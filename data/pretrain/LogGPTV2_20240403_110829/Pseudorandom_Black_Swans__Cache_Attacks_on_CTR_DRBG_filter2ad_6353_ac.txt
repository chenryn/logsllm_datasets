10:
11:
12:
13:
14:
15:
16:
17:
18:
out ← leftmost(temp, nbits)
(K (cid:2), V (cid:2)) ← update(K, V, addin)
c(cid:2) ← c + 1
return S = (K (cid:2), V (cid:2), c(cid:2)), out
V ← (V + 1) mod 2blocklen
output_block ← encrypt(K, V )
temp ← temp(cid:7)output_block
else
addin ← 0seedlen
temp ← Null
while len(temp) < nbits do
calls update with addin to update K and V again before the
reseed counter c is incremented (Line 17). The function returns
the new key, state, reseed counter, and output.
If the attacker compromises the key K and counter V
between Lines 11–14 and is able to guess addin, she can
predict the new key K (cid:2) and counter V (cid:2). She can then predict
future PRG outputs as well as future values of K and V. Note
that the same symmetric key is used to generate all of the
requested output, and the key is only changed at Line 16 after
all blocks have been generated. This observation is a crucial
element of our attack, since a long output buffer gives the
attacker many opportunities to extract K via a side-channel.
Indeed, SP 800-90A speciﬁes that at most 65KB can be
requested from the generator in a single call before a key
change. This is presumably intended to limit a single state’s
exposure to an attacker. However, our work demonstrates that
state recovery attacks within this limit are still viable.
Reseeding. The reseed function is intended to ensure that high
quality entropy is mixed into the state as required. The reseed
function takes as input additional input addin, an entropy
sample I, and a state S that consists of the key K, counter
V, and reseed counter c. It calls the update subroutine on a
derivation function taken over I and addin, which updates K
and V. Finally, it resets the reseed counter c to 1 and returns
the new key, counter, and reseed counter.
I V. C R Y P TA N A LY S I S O F C T R _ D R B G
Security Proofs. Woodage and Shumow [87] note that past
analyses of the security claims in SP 800-90A [15, 36, 42,
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 16:24:55 UTC from IEEE Xplore.  Restrictions apply. 
1245
75, 76, 94] were limited by simplifying assumptions, believed
necessary to accommodate nonstandard design elements. Their
analysis evaluated the standard’s claims that the designs in
the standard are both “backtracking resistant” and “prediction
resistant”. They provide robustness proofs that include back-
tracking and prediction resistance for both the HMAC and hash
constructions, but were unable to do so for CTR_DRBG and
instead identiﬁed an attack compromising prediction resistance.
Attacking CTR_DRBG. Bernstein [6] notes that to obtain
prediction resistance after every random bit,
the generate
process must be called with only a single bit, incurring massive
performance costs. Furthermore, SP 800-90A notes that “For
large generate requests, CTR_DRBG produces outputs at the
same speed as the underlying block cipher algorithm encrypts
data”. Woodage and Shumow [87] use this observation to pro-
pose an attack scenario where large amounts of CTR_DRBG
output is buffered, setting the stage for a side-channel attack
on the block cipher key. They give the following procedure
for recovering output at t + 1 from output rt and key Kt that
was compromised at time t:
1) Counter Recovery From Output. Attacker computes the
state prior to the last update as V (cid:2)
t = decrypt(Kt, rt )
2) Generating St+1. The attacker winds the generator forward
by computing Kt+1, Vt+1 = update(Kt, V (cid:2)
t , addint )
3) Generating PRG Output rt+1. This state is now used to
compute rt+1 = generate(Kt+1, Vt+1, addint+1)
Overall Attack Complexity. Assuming that the attacker has
access to Kt, the complexity of this attack depends only on the
difﬁculty of the attacker guessing addint and addint+1. While
a naïve attacker might attempt to enumerate the entire space of
2seedlen possibilities, we show that in practice implementations
use low-entropy or predictable data such as timestamps for this
parameter. This makes the enumeration task feasible, requiring
as little as 221 work to ﬁnd the correct values for both addint
and addint+1 values in some implementations.
In the next section, we evaluate the practicality of this
attack in the context of cache side-channel attacks on popular
CTR_DRBG implementations. We then evaluate the impact of
CTR_DRBG state recovery on the security of TLS.
V. S TAT E R E C O V E R Y AT TA C K
In this section we demonstrate the practicality of the
attack of Woodage and Shumow [87]. More speciﬁcally, we
demonstrate recovery of the CTR_DRBG state variables K
and V via a cache side-channel attack against AES as used
in different CTR_DRBG implementations. We begin with an
overview of the popular implementations we targeted.
A. Implementation Deep Dives
We examined the CTR_DRBG parameter choices of four
implementations representing diverse use cases: the NetBSD
operating system, the Fortinet FortiVM virtualized network
device, and two versions of OpenSSL. We identify limitations
(if any) on the number of bytes that may be requested in a
single call to the PRG, and highlight implementations’ use of
additional entropy. These parameters determine the viability
of the state recovery attack. Next, as an implementation may
be able to ‘recover’ from compromise following a reseed, we
also determine how frequently mandatory reseeds occur and
if such a reseed incorporates sufﬁcient entropy.
FortiOS.
the second-
We analyzed FortiOS version 5,
most recent major release of Fortinet’s network operating
system for their hardware and virtual appliances. The operating
system is an embedded Linux distribution with proprietary
kernel modules that perform device-speciﬁc functionality. The
software is used both on embedded devices and to operate
VMs that perform virtualized network functions.
After reverse-engineering the operating system binaries, we
discovered that FortiOSv5 replaces Linux’s default implemen-
tation of /dev/urandom with the nist_rng library [40]. We
note that [20] analyzed FortiOSv4 and found that it too replaces
the system’s default PRG with a FIPS certiﬁed design. Both
FortiOS v4 and v5 use OpenSSL to provide basic cryptographic
functionality, which as instantiated, relies on /dev/urandom.
While the original OpenSSL uses its own PRG, Fortinet’s
override makes OpenSSL fall back to an unprotected T-table-
based AES implementation based on the nist_rng library.
The FortiOS CTR_DRBG implementation does not use
additional entropy on each update and has no explicit reseeding.
It returns an error if more than 99,999 blocks are cumulatively
requested from an instantiated PRG over its lifetime. It there-
fore lacks meaningful protection against state compromise.
NetBSD. The NetBSD operating system uses CTR_DRBG
as the default source of system randomness. The kernel uses
the nist_rng library with 128-bit AES as the default underlying
cipher. We examined the kernel source code and single-stepped
through a running kernel to verify our ﬁndings. As in the
FortiOS case, the AES implementation is software-based with
unprotected T-Table accesses, based on the nist_rng library.
However, the OS limits requests to a maximum of 512 bytes
from the PRG in a single call, increasing the difﬁculty of our
proposed attack.
On each generate call, the state is updated using additional
entropy from rdtsc, a high resolution 64-bit CPU counter,
truncated to the low 32 bits. Finally, NetBSD schedules an
additional reseed after 231 − 2 calls to the PRG.
OpenSSL FIPS Module. We examined the OpenSSL FIPS
module, which supports only OpenSSL 1.0.2. This implemen-
tation is one of a small number of libraries that a manufacturer
can use to be FIPS compliant without submitting the product
for certiﬁcation [24]. The module uses CTR_DRBG with a
user conﬁgurable key length. Notably, while OpenSSL 1.0.2
FIPS uses hardware instructions for AES encryption,
the
CTR_DRBG implementation uses a lower-level interface for
AES. Instead of selecting the best implementation available (as
the AES interface used for encryption does), the lower-level
interface used by CTR_DRBG uses a hand-coded T-Table AES
implementation. On each generate call, the state is updated
using the time in microseconds, a counter, and the PID. The
FIPS module reseeds the PRG after 224 calls to generate.
OpenSSL 1.1.1. The default PRG in OpenSSL 1.1.1, the most
recent major release, is a CTR_DRBG implementation derived
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 16:24:55 UTC from IEEE Xplore.  Restrictions apply. 
1246
t
n
u
o
C
20
15
10
5
0
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
Bytes Correctly Recovered
Fig. 2: With the prefetcher enabled, our state recovery
technique often only partially recovers the 16-byte AES
key. We depict the frequency with which a given number
of bytes were recovered, across 100 trials.
from that of OpenSSL FIPS. It defaults to 256-bit AES with
user-conﬁgurable support for 128-bit and 192-bit AES. Unlike
version 1.0.2 it does default to using hardware instructions for
AES, so it is not vulnerable to our side-channel attack.
B. Side Channel Attacks on AES-128
T-Table AES is the canonical target for cache side channel
attacks. Extensive prior work has demonstrated key extraction
from table-based implementations [5, 32, 38, 64, 97]. Since
CTR_DRBG provides an attacker visibility to the AES cipher-
text (from the PRG output), we implemented the key recovery
attack of Neve and Seifert [58] on the last encryption round
of AES, which relies on monitoring cache access patterns. We
outline the technical details in Appendix A.
C. Evaluation of State Recovery
Attack Scenario. Our attack scenario is as follows. First,
we assume the attacker can execute unprivileged code on a
target machine. Next, a victim process on the same machine
uses CTR_DRBG and makes a call to generate, requesting
about 2 KB of pseudorandom output. The attacker then uses
Flush+Reload to monitor cache accesses during the AES
operations inside the CTR_DRBG, and recovers the PRG state
using the techniques described above. Our experimental setup
instantiates this scenario in a concrete setting.
Targeted Software. We targeted OpenSSL 1.0.2 conﬁgured to
use the nist_rng library with AES128 as the underlying block
cipher for the PRG. Beyond the implementations mentioned
in Section V-A, the nist_rng library is used by libuntu (a C
implementation of NTRUEncrypt) and the XMHF hypervisor,
among others. Recall, the nist_rng library uses a leaky T-table
based AES implementation and does not support AES-NI.
Hardware. We performed our experiments on a desktop
equipped with an Intel i7-3770 Quad Core CPU, with 8GB
of RAM and 8MB last level cache. The machine ran Ubuntu
17.10 (Kernel 4.13.0). To ensure fair comparison, we ﬁxed the
initial state of the random number generator to be the same
uniformly sampled state for all experiments in this section.
Empirical Results.
In 100 trials with the prefetcher disabled
we were always able to recover the state, with an average
false positive rate of 4.58% and false negative rate of 5.01%.
As shown in Fig. 2, with the prefetcher enabled our attack
succeeded in 12.0% of trials with average false positive rate
28.5% and false negative rate 1.94%. State recovery took an
average of 19s in both cases, using the same hardware.
V I . AT TA C K I N G T L S
In this section we show how recovering the PRG state from
CTR_DRBG leads to the attacker being able to compromise
long-term TLS authentication keys. While past work illustrates
how PRG failure can compromise TLS server keying mate-
rials [18–20], we build an attack targeting client keys. We
begin with necessary background on TLS and cryptographic
primitives.
A. RSA Background
RSA is a public-key encryption method that can be used as
a key exchange method in TLS 1.2 and earlier. RSA is not
included as a key exchange mechanism in TLS 1.3.
RSA Cryptosystem. An RSA public key consists of a public
encryption exponent e and an encryption modulus N. The
private key is the decryption exponent d, which satisﬁes d =
e−1 mod φ(N), where φ(N) = (p − 1)(q − 1) is the totient
function for an RSA modulus N = pq, and p, q are primes.
RSA Padding.
An RSA-encrypted key exchange begins
by padding the contents of the key exchange message using
PKCS#1 v1.5 [41] padding as depicted in Fig. 3. PKCS#1
v1.5 padding is not CCA-secure and has led to numerous
cryptographic attacks against RSA in practice [9, 26]. Yet, it
remains by far the most common padding method where RSA
encryption is still used, including versions of TLS prior to 1.3.
Let m be a message to be encrypted, and pad(m) be the
message with PKCS#1v1.5 padding applied. The encryption
m is the value c = (pad(m))e mod N. The padded message
pad(m) can be recovered by the decrypter by computing
pad(m) = cd mod N. In normal RSA usage, the decrypter then
veriﬁes that the padding is correctly formatted, and strips it
off to recover the original message m.
RSA-PSS.
RSA-PSS is a probabilistic signature scheme
with a formal security proof [54]. The padding mechanism
is designed to avoid the ﬂaws in PKCS#1 v1.5. The scheme
produces a padded message from a salt s and the input message
m. The salt can be a maximum of len(m) + h bytes in length,
where h is the length of the hash function output. RFC8446
(August 2018) updates TLS 1.2, adding optional support for
RSA-PSS signatures [56, 72], but speciﬁes that “the length of
the Salt MUST be equal to the length of the [digest] output”.
B. ECDSA
ECDSA is a standardized public key signature algorithm
[44]. The global parameters for an ECDSA key pair include
a pre-speciﬁed elliptic curve C with base point G of order n.
The signer’s private key is a random integer 1 < dA < n and
the public key is Q = dAG.
To sign a message m, the signer generates a random integer