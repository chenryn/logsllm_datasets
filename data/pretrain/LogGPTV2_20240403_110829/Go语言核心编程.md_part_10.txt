6) 方法主体：表示为了实现某一功能代码块
7) return 语句不是必须的。
10.2.6 方法的注意事项和细节
1) 结构体类型是值类型，在方法调用中，遵守值类型的传递机制，是值拷贝传递方式
2) 如程序员希望在方法中，修改结构体变量的值，可以通过结构体指针的方式来处理
3) Golang 中的方法作用在指定的数据类型上的(即：和指定的数据类型绑定)，因此自定义类型，
都可以有方法，而不仅仅是struct， 比如int,float32 等都可以有方法
4) 方法的访问范围控制的规则，和函数一样。方法名首字母小写，只能在本包访问，方法首字母
大写，可以在本包和其它包访问。[讲解]
5) 如果一个类型实现了 String()这个方法，那么 fmt.Println 默认会调用这个变量的 String()进行输
出
10.2.7 方法的课堂练习题
1) 编写结构体(MethodUtils)，编程一个方法，方法不需要参数，在方法中打印一个10*8 的矩形，
在main方法中调用该方法。
2) 编写一个方法，提供m和n两个参数，方法中打印一个m*n 的矩形
3) 编写一个方法算该矩形的面积(可以接收长 len，和宽 width)， 将其作为方法返回值。在 main
方法中调用该方法，接收返回的面积值并打印。
4) 编写方法：判断一个数是奇数还是偶数
5) 根据行、列、字符打印 对应行数和列数的字符，比如：行：3，列：2，字符*,则打印相应的效
果
6) 定义小小计算器结构体(Calcuator)，实现加减乘除四个功能
实现形式1：分四个方法完成:
实现形式2：用一个方法搞定
10.2.8 方法的课后练习题
强调: 一定自己要做，否则学习效果不好!!
10.2.9 方法和函数区别
1) 调用方式不一样
函数的调用方式: 函数名(实参列表)
方法的调用方式: 变量.方法名(实参列表)
2) 对于普通函数，接收者为值类型时，不能将指针类型的数据直接传递，反之亦然
3) 对于方法（如 struct 的方法），接收者为值类型时，可以直接用指针类型的变量调用方法，反
过来同样也可以
总结:
1) 不管调用形式如何，真正决定是值拷贝还是地址拷贝，看这个方法是和哪个类型绑定.
2) 如果是和值类型，比如 (p Person) , 则是值拷贝， 如果和指针类型，比如是 (p *Person) 则
是地址拷贝。
10.3 面向对象编程应用实例
10.3.1 步骤
1) 声明(定义)结构体，确定结构体名
2) 编写结构体的字段
3) 编写结构体的方法
10.3.2 学生案例：
1) 编写一个 Student 结构体，包含 name、gender、age、id、score 字段，分别为string、string、int、
int、float64 类型。
2) 结构体中声明一个say 方法，返回string 类型，方法返回信息中包含所有字段值。
3) 在main方法中，创建Student 结构体实例(变量)，并访问say 方法，并将调用结果打印输出。
4) 走代码
package main
import(
"fmt"
)
/*
学生案例：
编写一个 Student 结构体，包含 name、gender、age、id、score 字段，分别为 string、string、int、int、
float64 类型。
结构体中声明一个say 方法，返回string 类型，方法返回信息中包含所有字段值。
在main方法中，创建Student 结构体实例(变量)，并访问say 方法，并将调用结果打印输出。
*/
type Studentstruct {
namestring
genderstring
age int
idint
score float64
}
func(student *Student)say() string {
infoStr:=fmt.Sprintf("student 的信息 name=[%v] gender=[%v],age=[%v]id=[%v]score=[%v]",
student.name, student.gender,student.age, student.id, student.score)
return infoStr
}
funcmain() {
//测试
//创建一个 Student 实例变量
varstu =Student{
name: "tom",
gender: "male",
age :18,
id: 1000,
score : 99.98,
}
fmt.Println(stu.say())
}
10.3.3 小狗案例 [学员课后练习]
1) 编写一个Dog 结构体，包含name、age、weight 字段
2) 结构体中声明一个say 方法，返回string 类型，方法返回信息中包含所有字段值。
3) 在main方法中，创建Dog 结构体实例(变量)，并访问say 方法，将调用结果打印输出。
10.3.4 盒子案例
1) 编程创建一个 Box 结构体，在其中声明三个字段表示一个立方体的长、宽和高，长宽高要从终
端获取
2) 声明一个方法获取立方体的体积。
3) 创建一个Box 结构体变量，打印给定尺寸的立方体的体积
4) 走代码
10.3.5 景区门票案例
1) 一个景区根据游人的年龄收取不同价格的门票，比如年龄大于18，收费20元，其它情况门票免
费.
2) 请编写Visitor结构体，根据年龄段决定能够购买的门票价格并输出
3) 代码：
10.4 创建结构体变量时指定字段值
 说明
Golang 在创建结构体实例(变量)时，可以直接指定字段的值
 方式1
 方式2
10.5 工厂模式
10.5.1 说明
Golang 的结构体没有构造函数，通常可以使用工厂模式来解决这个问题。
10.5.2 看一个需求
一个结构体的声明是这样的:
package model
type Studentstruct {
Name string...
}
因为这里的Student 的首字母S是大写的，如果我们想在其它包创建Student的实例(比如main包)，
引入model 包后，就可以直接创建 Student 结构体的变量(实例)。但是问题来了，如果首字母是小写的，
比如 是 typestudentstruct {....} 就不不行了，怎么办---> 工厂模式来解决.
10.5.3 工厂模式来解决问题
 使用工厂模式实现跨包创建结构体实例(变量)的案例:
如果model 包的 结构体变量首字母大写，引入后，直接使用, 没有问题
如果model 包的 结构体变量首字母小写，引入后，不能直接使用, 可以工厂模式解决， 看老师演
示， 代码:
student.go
main.go
10.5.4 思考题
同学们思考一下，如果 model 包的 student 的结构体的字段 Score 改成 score，我们还能正常访问
吗？又应该如何解决这个问题呢？[老师给出思路，学员自己完成]
 解决方法如下：
第 章面向对象编程 下
11 ( )
11.1 VSCode 的使用
11.1.1 VSCode 使用技巧和经验
 设置字体
文件->首选项->设置
 快捷键的使用
自定义快捷配置：文件->首选项->键盘快捷方式
 介绍几个常用的快捷键
11.2 面向对象编程思想-抽象
11.2.1 抽象的介绍
我们在前面去定义一个结构体时候，实际上就是把一类事物的共有的属性(字段)和行为(方法)提取
出来，形成一个物理模型(结构体)。这种研究问题的方法称为抽象。
11.2.2 代码实现
package main
import(
"fmt"
)
//定义一个结构体 Account
typeAccount struct {
AccountNo string
Pwdstring
Balancefloat64
}
//方法
//1. 存款
func(account *Account) Deposite(money float64, pwd string) {
//看下输入的密码是否正确
ifpwd != account.Pwd {
fmt.Println("你输入的密码不正确")
return
}
//看看存款金额是否正确
ifmoney account.Balance {
fmt.Println("你输入的金额不正确")
return
}
account.Balance -=money
fmt.Println("取款成功~~")
}
//查询余额
func(account *Account) Query(pwd string) {
//看下输入的密码是否正确
ifpwd != account.Pwd {
fmt.Println("你输入的密码不正确")
return
}
fmt.Printf("你的账号为=%v 余额=%v \n", account.AccountNo, account.Balance)
}
funcmain() {
//测试一把
account :=Account{
AccountNo : "gs1111111",
Pwd: "666666",
Balance: 100.0,
}
//这里可以做的更加灵活，就是让用户通过控制台来输入命令...
//菜单....
account.Query("666666")
account.Deposite(200.0, "666666")
account.Query("666666")
account.WithDraw(150.0, "666666")
account.Query("666666")
}
 对上面代码的要求
1) 同学们自己可以独立完成
2) 增加一个控制台的菜单，可以让用户动态的输入命令和选项
11.3 面向对象编程三大特性-封装
11.3.1 基本介绍
Golang 仍然有面向对象编程的继承，封装和多态的特性，只是实现的方式和其它 OOP 语言不一
样，下面我们一一为同学们进行详细的讲解Golang 的三大特性是如何实现的。
11.3.2 封装介绍
封装(encapsulation)就是把抽象出的字段和对字段的操作封装在一起,数据被保护在内部,程序的其
它包只有通过被授权的操作(方法),才能对字段进行操作
11.3.3 封装的理解和好处
1) 隐藏实现细节
2) 提可以对数据进行验证，保证安全合理(Age)
11.3.4 如何体现封装
1) 对结构体中的属性进行封装
2) 通过方法，包 实现封装
11.3.5 封装的实现步骤
1) 将结构体、字段(属性)的首字母小写(不能导出了，其它包不能使用，类似private)
2) 给结构体所在包提供一个工厂模式的函数，首字母大写。类似一个构造函数
3) 提供一个首字母大写的Set方法(类似其它语言的public)，用于对属性判断并赋值
func(var 结构体类型名)SetXxx(参数列表)(返回值列表) {
//加入数据验证的业务逻辑
var.字段 = 参数
}
4) 提供一个首字母大写的Get 方法(类似其它语言的public)，用于获取属性的值
func(var 结构体类型名)GetXxx() {
return var.age;
}
特别说明：在 Golang 开发中并没有特别强调封装，这点并不像 Java. 所以提醒学过java 的朋友，
不用总是用java的语法特性来看待Golang, Golang 本身对面向对象的特性做了简化的.
11.3.6 快速入门案例
 看一个案例
请大家看一个程序(person.go),不能随便查看人的年龄,工资等隐私，并对输入的年龄进行合理的验
证。设计:model 包(person.go) main 包(main.go 调用Person 结构体)
 代码实现
model/person.go
main/main.go
11.3.7 课堂练习(学员先做)
 要求
1) 创建程序,在model 包中定义Account 结构体：在main 函数中体会Golang 的封装性。
2) Account 结构体要求具有字段：账号（长度在6-10 之间）、余额(必须>20)、密码（必须是六
3) 通过SetXxx 的方法给Account 的字段赋值。(同学们自己完成
4) 在main函数中测试
 代码实现
model/account.go
package model
import(
"fmt"
)
//定义一个结构体 account
type account struct {
accountNo string
pwdstring
balance float64
}
//工厂模式的函数-构造函数
funcNewAccount(accountNo string, pwd string, balance float64) *account {
iflen(accountNo) 10{
fmt.Println("账号的长度不对...")
return nil
}
iflen(pwd)!= 6{
fmt.Println("密码的长度不对...")
return nil
}
ifbalance <20{
fmt.Println("余额数目不对...")
return nil
}
return &account{
accountNo : accountNo,
pwd: pwd,
balance : balance,
}
}
//方法
//1. 存款
func(account *account) Deposite(money float64, pwdstring) {
//看下输入的密码是否正确
ifpwd != account.pwd {
fmt.Println("你输入的密码不正确")
return
}
//看看存款金额是否正确
ifmoney <= 0{
fmt.Println("你输入的金额不正确")
return
}
account.balance += money
fmt.Println("存款成功~~")
}
//取款
func(account *account)WithDraw(money float64, pwd string) {
//看下输入的密码是否正确