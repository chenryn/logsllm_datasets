nates by returning to the client the ﬁrst N elements in sl. These elements are
exposed to the client without any of the metadata added by our algorithms.
Similar to the previous discussed algorithm, the size of the localView can
grow indeﬁnitely. To avoid this, the insert operation associates to each element
a timestamp obtained from the service and removes from the localView all
61
CHAPTER 4. FINE-GRAINED CONSISTENCY FOR ONLINE SERVICES
Algorithm 4: Monotonic Writes
1: function insert(Lst, ElementID, V alue) do
2:
3:
4:
5:
6:
7:
lstState ← listStates[Lst]
Element e ← (ElementID, V alue)
e.clientSession ← getClientSessionID()
e.sessionCounter ← lstState.insertCounter++
service.insert(Lst, ElementID, e)
listStates[Lst] ← lstState
8: function get(Lst) do
Read
9:
10:
Transform
11:
12:
13:
lstState ← listStates[Lst]
sl ← service.get(Lst)
sl ← sortSessionSequences(sl)
sl ← removeElementsWithMissingDependencies(sl)
return removeMetadata(sl)
elements with a timestamp smaller than the timestamp of the last element
returned to the client (lastTimestamp). When the client issues a get operation,
we start by executing the get operation over the service (line 7), in the read
block of the algorithm. Then, the returned list (sl) is ordered (line 8) and all
elements in the localView that are missing in the list are added to the list,
keeping it ordered (line 9). This is done in the transformation block of the
algorithm. Before retuning to the client, we remove old elements, elements
that are below lastTimestamp (line 10), resize sl and update the list local state.
This update is done in the store block of the algorithm.
4.3.3 Monotonic Writes
This session guarantee requires that writes issued by a given client are observed
in the order in which they were issued by all clients. More precisely, if W is
a sequence of write operations issued by client c up to a given instant, and S
is a sequence of write operations returned in a read operation by any client, a
Monotonic Writes (MW) anomaly happens when the following property holds,
where W (x) ≺ W (y) denotes x precedes y in sequence W : ∃x, y ∈ W : W (x) ≺
W (y)∧ y ∈ S ∧ (x (cid:60) S ∨ S(y) ≺ S(x)).
However, this deﬁnition needs to be adapted for the case where only N
elements of a list are returned by a get operation. In this case, some session
sequences may be incomplete, because older elements of the sequence may be
62
4.3. ALGORITHMS
left out of the truncated list of N returned elements. Thus, we consider that
older elements are eligible to be dropped from the output, provided that we
ensure that there are no gaps in the session subsequences and that the write
order is respected, before returning to the client. Formally, we can redeﬁne
MW anomalies as follows, given a sequence of writes W in the same session,
and a sequence S returned by a read: (∃x, y, z ∈ W : W (x) ≺ W (y) ≺ W (z)∧ x ∈
S ∧ y (cid:60) S ∧ z ∈ S)∨ (∃x, y ∈ W : W (x) ≺ W (y)∧ S(y) ≺ S(x)).
Algorithm 4 presents the steps employed by our Middleware to enforce
the MW session guarantee. We avoid the anomaly described above by adding
metadata to each insert operation (lines 1 − 7) in the form of a unique client
session identiﬁer (clientSession – line 4) and a counter (local to each client and
session) that grows monotonically (sessionCounter – line 5). This information
allows us to establish a total order of inserts for each client session.
This metadata is then leveraged during the execution of a get operation
(lines 8−13) in the following way. After reading the current list from the service
(line 10), in the read block of the algorithm, we simply order the elements in
the read list (sl) to ensure that all elements respect the partial orders for each
client session (line 11). Finally, an additional step is required to ensure that
no element is missing in any of these partial orders. To ensure this, whenever
a gap is found within the elements of a given client session, we remove all
elements whose sessionCounter is above the one of any of the missing elements,
these operations are all done in the transformation block of the algorithm.
The get operation returns the contents that are left in the list sl without
the metadata added by our algorithms (line 13). Note that in this case we
might return to the client a list of elements with a size below N . We could try
to mitigate this behavior by resorting to the contents of the localView as we
did in the algorithm that we designed to enforce MR. However, we decided
to provide the minimal behavior to enforce each of the session guarantees in
isolation.
63
CHAPTER 4. FINE-GRAINED CONSISTENCY FOR ONLINE SERVICES
Algorithm 5: Writes Follow Read
1: function insert(Lst, ElementID, V alue) do
2:
3:
4:
5:
6:
7:
8:
lstState ← listStates[Lst]
Element e ← (ElementID, V alue)
e.cutTimestamp ← obtainCutTimestamp(lstState.localView)
e.dependencies ← projectElementIdentiﬁersAndTimestamps(lstState.localView)
e.timestamp ← obtainServiceTimeStamp(lstState.lastInsertTimestamp, lstState.localView)
lstState.lastInsertTimestamp ← e.timestamp
service.insert(Lst, ElementID, e)
9: function get(Lst) do
Read
10:
11:
Transform
12:
13:
14:
15:
Store
16:
17:
18:
19:
lstState ← listStates[Lst]
sl ← service.get(Lst)
sl ← orderByTimestamp(sl)
sl ← removeElementsWithMissingDependencies(sl)
cutTimestamp ← highestCutTimestamp(sl)
sl ← removeElementsBelowCutTimestamp(sl, cutTimestamp)
lstState.localView ← addNewElements(ls, lstState.localView)
lstState.localView ← purgeOldElements(lstState.localView)
listStates[Lst] ← lstState
return removeMetadata(sl)
4.3.4 Writes Follow Reads
This session guarantee requires that the eﬀects of a write observed in a read
by a given client always precede the writes that the same client subsequently
performs. (Note that although this anomaly has been used to exemplify causal-
ity violations [5, 49], any of the previous anomalies represent a diﬀerent form
of a causality violation [64].) To formalize this deﬁnition, and considering that
the service only returns at most N elements in a list, if S1 is a sequence re-
turned by a read invoked by client c, w a write performed by c after observing
S1, and S2 is a sequence returned by a read issued by any client in the sys-
tem; a violation of the Writes Follow Read (WFR) anomaly happens when:
∃w ∈ S2 ∧∃x, y ∈ S1 : S1(x) ≺ S1(y)∧ y (cid:60) S2 ∧ x ∈ S2.
Our algorithm to enforce this session guarantee is depicted in Algorithm. 5.
The key idea to avoid this anomaly is to associate with each insert the direct
list of dependencies of that insert, i.e., all elements previously observed by the
client performing the insert (line 5). Evidently, this solution is not practical,
since this list could easily grow to include all previous inserts performed during
the lifetime of the system. To overcome this limitation, we associate with each
64
4.3. ALGORITHMS
insert a timestamp based on the clock of the service, that increases monoton-
ically in the session, but with the restriction of being strictly greater than the
timestamp of any of its direct dependencies (line 6). Furthermore, we also as-
sociate with each insert operation a cut timestamp, that deﬁnes the timestamp
of its last explicit dependency, i.e., the dependencies registered in the depen-
dency list (line 4). The cut timestamp implicitly deﬁnes every element with a
lower timestamp to be a dependency of that insert operation. By combining
these diﬀerent techniques, we ensure that the explicit dependency list associ-
ated with an insert has at most a value around N elements (which is the size
of the localView maintained by our Middleware). Note that the dependency
list associated to each element, does not need to contain all the information of
an element, it can be a list of pairs , which
is the necessary information to identify an insert operation, which is enough
to enforce this session guarantee.
Since only N elements of a list are returned by a get operation, the older
dependencies may be left out of the sequence that is returned. When this
happens, it is safe to consider that these dependencies were dropped from the
window that is returned, provided that we ensure that, for each element that
is returned, all dependencies that are more recent than the oldest element are
also returned.
In the get operation we leverage this metadata to do the following: we start
by reading the contents of the list from the service (line 11), in the read block of
the algorithm, and then over this list we remove any insert whose dependencies
are missing. Thus, we only remove inserts whose missing dependencies have a
timestamp above the insert cut timestamp. We then compute a cut timestamp
for the obtained list sl (line 14) that is the highest cut timestamp among all
elements in sl. We use this timestamp to remove from sl any element whose
creation timestamp falls below the computed cut timestamp. These operations
are all done in the transformation block of the algorithm. Finally, before return-
ing to the client the elements that remain in sl without the additional metadata
(line 19) we update and garbage collect old entries from the localView (lines
16− 18), this is done in the store block of the algorithm.
65
CHAPTER 4. FINE-GRAINED CONSISTENCY FOR ONLINE SERVICES
Algorithm 6: Combinations insert operation
1: function insert(Lst, ElementID, V alue) do
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
lstState ← listStates[Lst]
Element e ← (ElementID, V alue)
if MW and WFR then
e.lastInsertTimestamp ← lstState.lastInsertTimestamp
if RYW or MR or WFR then
e.timestamp ← obtainServiceTimeStamp(lstState.lastInsertTimestamp, lstState.localView)
lstState.lastInsertedTimestamp ← e.timestamp
if RYW or MW then
e.clientSession ← getClientSessionID()
if MW then
e.sessionCounter ← lstState.insertCounter++
if WFR then
e.cutTimestamp ← obtainCutTimestamp(lstState.localView)
e.dependencies ← projectElementIdentiﬁersAndTimestamps(lstState.localView)
service.insert(Lst, ElementID, e)
if RYW then
lstState.insertSet ← addElementToInsertSet(e, lstState.insertSet)
listStates[Lst] ← lstState
Similarly to the previous algorithm, we might return a number of elements
that is lower than N . In this case, to ensure that we always return N elements,
we need to obtain the missing dependencies using a get operation that returns
a single element (if supported by the service).
In our implementation, we
avoided this solution because it is prone to triggering a violation of the API
rate limits.
4.3.5 Combining Multiple Session Guarantees
Considering the algorithms to enforce each of the session guarantees discussed
above, we can now summarize how to combine them in Algorithm 6 and in
Algorithm 7. The insert operation adds the metadata used by each of the indi-
vidual algorithms according to the guarantees conﬁgured by the application
developer. Correspondingly, upon the execution of a get operation, our Middle-
ware must perform the transformations over the list obtained from the service
(sl) prescribed by each of the individual algorithms.
More precisely, the insert operation starts by storing the necessary meta-
data in the element object before performing the insert operation over the
centralized service (lines 2 − 15). Note that, to obtain a correct timestamp,
66
4.3. ALGORITHMS
Algorithm 7: Combinations get operation
1: function get(Lst) do
Read
2:
3:
Transform
4:
5:
4:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
Store
23:
24:
25:
26:
27:
28:
29:
30:
31:
lstState ← listStates[Lst]
sl ← service.get(Lst)