Input:
join(J)v, J a ﬁnite subset of P − {v}
recv(join)u,v, u ∈ P − {v}
recv(m)u,v, m ∈ M, u ∈ P − {v}
failv
States:
status ∈ {idle, joining, active}, initially idle if c (cid:2)= v,
hints ⊆ P , initially ∅
Transitions:
else active if c = v
M, the set of messages
Output:
send(join)v,u, u ∈ P − {v}.
send(m)v,u, m ∈ M, u ∈ P − {v}
failed, Boolean, initially false
world, a ﬁnite subset of P , initially {v}
Input join(J)v
Effect:
if ¬f ailed then
if status = idle then
status ← joining
hints ← J
Output send(join)v,u
Precondition:
¬f ailed
status = joining
u ∈ hints
Effect:
none
Input recv(join)u,v
Effect:
if ¬f ailed then
if status = active then
world ← world ∪ {u}
Output send(W )v,u
Precondition:
¬f ailed
status = active
u ∈ world
W = world
Effect:
none
Figure 1. Speciﬁcation of the Join-P rotocol at v
Input recv(W )u,v
Effect:
if status = joining then
if ¬f ailed then
status = active
world ← world ∪ W
Input failv
Effect:
f ailed ← true
At the receiving end, the join request is received at some
u ∈ P via its input action recv(join)v,u. If u.status =
active, i.e., node u is already participating in the Join-
Protocol, the recipient adds the sender v to its set world.
When Join-Protocol v has its v.status = active and
v.f ailed = f alse, it sends out messages, consisting of
its v.world, to any processes u in v.world via the action
send(m)v,u. If Join-Protocol u has u.status = joining and
u.f ailed = f alse, then in the input action recv(W )v,u it
sets its status to active and sets its world to world ∪ W .
The input action failv models the crash of node v. When
the environment triggers this action, it results in v.f ailed =
true, which disables all output actions at v, and that prevent
any input actions from changing the state of v. The crashes
are terminal, and nodes cannot recover.
The nodes participating in the algorithm communicate
via point-to-point channels (not formally speciﬁed here).
Messages are not corrupted and are not spontaneously gen-
erated by the channels, but the messages may be lost, be de-
livered in an arbitrary order, and be duplicated. We denote
by Channel u,v the channel from node u to node v.
The full system is deﬁned as the composition of all
Join-Protocol v for v ∈ P , and all Channel u,v for u, v ∈
P . We denote the resulting composition by JOIN-SYSTEM.
2.2. The Join-Connectivity Graphs
In this paper we study properties of the executions of
JOIN-SYSTEM with the help of graphs induced by the exe-
cutions. We call these graphs join-connectivity graphs.
Deﬁnition 2.1 Let s be a state of an execution of JOIN-
SYSTEM. The join-connectivity graph at s is a derived state
variable, a directed graph s.G = (s.J, s.E), where
• s.J = {v ∈ P : s.v.status = active ∧ s.v.f ailed =
f alse}, is the set of vertices of the graph representing
the set of nodes that successfully joined and that have
not failed.
• s.E = {(u, v) : u, v ∈ s.J ∧ v ∈ s.u.world}, is the
set of edges.
Note that in the deﬁnition of the join-connectivity graph,
an edge (u, v) in s.E models the fact that u “knows” v in
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:34 UTC from IEEE Xplore.  Restrictions apply. 
state s; but this does no imply that v “knows” u. However,
provided u and v do not fail, edge (v, u) is eventually added.
This is because if u knowns v, u starts gossiping to v, and v
learns about u upon receipt of any such gossip message.
Where the state s is implied by the context, we
use the simpliﬁed notation G = (J, E) to stand for
the join-connectivity graph s.G = (s.J, s.E). Given a
join-connectivity graph G = (J, E), we deﬁne the undi-
rected version of the graph in the standard way and we
denote it by G = (J ,E).
When G = (J ,E) is connected, we deﬁne a metric space
(J , dist), where for any u, v in J , dist(u, v) is the length
of the shortest path connecting the vertices u and v in G.
join-connectivity graph
G = (J, E) has a unique undirected version G = (J ,E),
where J = J , we deﬁne the metric space (J, dist), where
dist(u, v) (cid:1) dist(u, v), for any u, v in J. We deﬁne the di-
ameter of a join-connectivity graph as the diameter of its
undirected version, and we let s.G.diam stand for the di-
ameter of the join-connectivity graph in state s.
Because each (connected)
We are interested in the system behaviors where the net-
work does not partition—if the universe fragments due to
failures we are not able to claim that any two nodes will ever
learn about each other. For our purposes it is sufﬁcient to as-
sume that join-connectivity graphs are always connected.
We close with a technical deﬁnition used in the analysis.
Deﬁnition 2.2 Let (J, dist) be a metric space deﬁned on
the graph (J, E). The ball B(v; r) with center v ∈ J
and radius r > 0 is deﬁned by B(v; r) = {u ∈ J :
dist(u, v) ≤ r}. The kth neighborhood N(v; k) of a ver-
tex v ∈ J is the set of all vertices at distance k from v,
N(v; k) = {u ∈ J : dist(u, v) = k}.
3. Join-Delay in Timed Executions
JOIN-SYSTEM is speciﬁed as a non-deterministic algo-
rithm for asynchronous environments with arbitrary mes-
sage delays and node crashes that may cause network par-
titions. In such environments it is not possible to quantify
how information is propagated throughout the “known uni-
verse.” For the purpose of analysis, we will restrict asyn-
chrony, resolve some of the non-determinism of the algo-
rithm, and impose constraints sufﬁcient to guarantee that
the universe is connected. Finally we deﬁne the notion of
join-delay that measures time necessary for nodes to learn
about each other after they join the system.
3.1. Timed Executions of JOIN-SYSTEM
To handle timing, we convert all the I/O automata to
general timed automata (GTAs) as deﬁned in [10], by al-
lowing arbitrary amounts of time to pass in any state. In
the GTA model we assume a special set of actions called
time-passage actions, ν(t), t ∈ R
+. The time-passage ac-
tion ν(t) represents the passage of time by amount t. A
timed execution of a GTA A, is deﬁned to be either a ﬁ-
nite sequence α = s0, π1, s1, π2, . . . , πr, sr or an inﬁnite
sequence α = s0, π1, s1, π2, . . ., where the π’s are actions
(either input, output, internal, or time-passage) of A, the s’s
are states of A, (sk, πk+1, sk+1) is a transition of A for ev-
ery k, and s0 is a start state. It is possible that sk = sk+1.
The set of transitions of A is denoted by trans(A).
If α1 and α2 are two execution fragments where the last
state of α1 is equal to the ﬁrst state of α2 then α1 ◦ α2 is
the concatenation of α1 and α2. The common state appears
only once.
A timed execution is called admissible if the sum of all
the reals in the time-passage actions in the execution is ∞.
We are interested in making observations about the exe-
cutions of JOIN-SYSTEM at states corresponding to certain
real times. We now give the technical background leading
to the deﬁnition of these states. There are two axioms re-
garding the time-passage action ν(t) for a GTA A:
(A1) If (s, ν(t), s(cid:1)) and (s(cid:1), ν(t(cid:1)), s(cid:1)(cid:1)) are in trans(A),
(A2) If (s, ν(t), s(cid:1)) ∈ trans(A) and 0  0. Since α
might not have states corresponding to the time of interest,
we construct a time-passage equivalent execution of α, that
we call a milestone execution, and that includes the unique
states of interest, that we call milestone states. We show that
such executions can indeed be constructed. First we intro-
duce some notation.
Deﬁnition 3.1 Let α = s0, π1, s1, π2,··· , sr, . . . be an ad-
missible timed execution. We deﬁne:
(i) preﬁx(α, sr) is the execution fragment of α from state
(ii) suﬃx(α, sr) is the execution fragment of α that starts
s0 to state sr,
with state sr,
preﬁx(α, sr).
(iii) t-preﬁx(α, sr) is the set of time-passage actions in
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:34 UTC from IEEE Xplore.  Restrictions apply. 
.
(cid:1)
(cid:1)
Lemma 3.1 shows that given an admissible timed execu-
tion α and any t(cid:1) > 0, there is a time-passage equivalent ex-
ecution β where we can choose a state such that the sum of
the reals of the time-passage actions occuring in β up to that
state is t(cid:1)
Lemma 3.1 Let α be an admissible timed execution of a
GTA A. Then for any t(cid:1) > 0 there exists an execution β, a
time-passage reﬁnement of α that is time-passage equiva-
ν(t)∈t-preﬁx (β,sr) t =
lent to α, and a state sr in β so that
t(cid:1)
, and if a state ˆs is such that
then
preﬁx(β, ˆs) = preﬁx (α, ˆs).
Proof. Since α is an admissible timed execution, the time
passes to inﬁnity. So, there exists a state s(cid:1)
(cid:1)
in α such that
and for any other state s that oc-
ν(t)∈t-preﬁx (α,s(cid:1))t ≤ t(cid:1)
curs before s(cid:1)
, and
let us choose s so that it occurs in α last among such states.
In other words, we are choosing the earliest state s(cid:1)
(cid:1)
in α,
ν(t)∈t-preﬁx (α,s(cid:1))t ≥ t(cid:1)
(cid:1)
is satisﬁed and s is the
such that
ν(t)∈t-preﬁx (α,s)t ≤ t(cid:1)
last state in α where the inequality
holds. Thus we have
ν(t)∈t-preﬁx (α,s(cid:1))t ≥ t(cid:1)
ν(t)∈t-preﬁx (α,ˆs) t  0 there exists a time-passage equivalent execution β
of α containing a subsequence of states {σ i}i≥0, such that
(cid:1)
ν(t)∈t-preﬁx (β,σk)t = kd + τ, for every k ∈ N (that is the
sum of the reals of the time-passage actions of β up to σ k is
kd + τ).
Proof. Suppose α is s0, π1, s1, π2,··· , sr, . . .. First, we
want to show that given d > 0 and any state σ0 in the ad-
missible timed execution α we can construct an execution β
and the sequence {σi}i∈N satisfying the condition stated in
the lemma. We construct a sequence of time-passage equiv-
alent (to α) executions α = α(0), α(1), . . . such that α(k+1)
is a time-passage reﬁnement of α(k) that satisﬁes the fol-
lowing properties:
(cid:1)
ν(t)∈t-preﬁx (α(k),σi)t = i · d, for i = 0, 1,··· , k.
(i)
(ii) preﬁx(α(k), σk) = preﬁx(α(k+1), σk) for k ∈ N.
Let α(0) = α = preﬁx (α, σ0) ◦ suﬃx(α, σ0). Suppose
we have constructed α(0), . . . , α(k). We use Lemma 3.1.
Choosing σk for ˆs and (k + 1)d + τ for t(cid:1)
, we can ﬁnd
a time-passage reﬁnement α(cid:1)
of α such that there is a
state st(cid:1) in α(cid:1)