nique can also be applied in other microprocessor architectures
such as the out-of-order processors [25]. There, the renaming
unit can assign infrequent registers to predetermined physical
registers where the NBTI-induced stress is relaxed by our
introduced hardware solution. Indeed, for longer bit-width
registers (e.g. 64-bit), our analysis to determine the high-
stressed bits in a register should be repeated similarly (see
Fig 4). Actually, dividing the registers into infrequent and
frequent categories, as we propose, exists to some extent,
but lessens the more physical registers there are. The divide
disappears once there are so many registers that all of them
are in effect only infrequently written, meaning all physical
registers are not used most of the time.
VII. EVALUATION AND EXPERIMENTAL RESULTS
To evaluate the effectiveness of our proposed technique,
various diverse applications from the Mibench and Media-
bench benchmark suites [22], [23] have been employed which
exhibit varying characteristics empowering us to cover many
different possible NBTI stress scenarios in the register ﬁle.
Since our work targets the 32-bit MIPS architecture, the MIPS
model simulator [26] has been exploited in our experiments.
Proﬁling information is gathered from an initial run of each
application.
Fig 8 presents the ABPF of the lower and upper halves
of the register ﬁle and the ABPF of the total register ﬁle after
applying our technique5.
As seen, our technique drives the ABPF of the register
ﬁle toward the optimal value of 50%. Moreover, the NBTI-
induced stress is equally distributed between the lower and
upper halves of the register ﬁle (the ABPF of both of them
is around 50%) and the upper half is not anymore suffering
from higher NBTI stress than the lower half as it was in the
Base case, where no NBTI mitigation technique is applied to
the register ﬁle, (see Fig 4(a)). Since our technique requires
three additional ﬂag bits, the corresponding duty cycle of each
ﬂag bit also needs to be analyzed. On average, it reaches 54%,
which reﬂects that the NBTI stress in the ﬂag bits is also well-
balanced.
Sensitivity to input data: generally, applications are subject
to different input data during runtime than were used in the
proﬁling phase. To explore how susceptible the results of our
technique are to these inputs and provide a fair evaluation, it
was necessary to repeat the experiments with different input
data sets. Fig 9 shows the corresponding ABPF result for each
benchmark. As shown, the ABPF of the lower/upper half and
the total register ﬁle are still very close to the optimal value of
50% and the results are very close to those presented in Fig 8.
In other words, modifying the input data does not signiﬁcantly
worsen the results and our technique does not rely too much
on the input data set.
Toward more investigating of how effectively our technique
balances the NBTI stress in the individual bits of the register
ﬁle, we gathered the duty cycle (λ) of each bit to build a
corresponding histogram. Fig 10 demonstrates a comparison,
in terms of the percentage of the λ values that are within
the range of [40% - 60%], among the Base case and the two
different NBTI relaxing strategies of our proposed technique.
Indeed,
this range in these experiments has been selected
because the NBTI-induced stress is approximately balanced
there and the reliability degradation is minimum, as observed
from our analysis in Fig 2. In the ﬁrst case (called ﬁxed
strategy), the NBTI stress in all registers is tackled using the
same strategy, i.e. we consider all the registers as frequent
and similarly relax them as explained earlier (see Fig 6).
Where in the second case (selective strategy), we selectively
address the NBTI effects in the register ﬁle (i.e. different
registers are differently relaxed according to their classiﬁcation
frequent/infrequent).
As seen in Fig 10, mitigating selectively the NBTI stress
is more
in the register ﬁle, as we propose in this work,
5In this evaluation, the hardware approach has been considered to mitigate
the NBTI effects in the infrequent category.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:27 UTC from IEEE Xplore.  Restrictions apply. 
ABP (LowerHalf) ABP (UpperHalf) ABP (Total) Stdv(σ    ) 
Stdv(σλ,F) 
ABPF(LowerHalf) 
λ,F 
Optimal case 
ABPF(UpperHalf) 
ABPF(Total) 
F
P
B
A
60%
50%
40%
30%
20%
10%
0%
F
P
B
A
60%
50%
40%
30%
20%
10%
0%
ABP(LowerHalf) ABP(UpperHalf) ABP(Total) Stdv(σ    ) 
Stdv(σλ,F) 
ABPF(LowerHalf) 
Optimal case 
ABPF(UpperHalf) 
ABPF(Total) 
Fig. 8. The NBTI stress evaluation in the register ﬁle after implementing
our technique using the small input data set (proﬁling phase)
Fig. 9. The NBTI stress evaluation in the register ﬁle after implementing
our technique using the large input data set (execution phase)
Base
Our Fixed Strategy
Our Selective Strategy
l
s
e
u
a
v
λ
d
e
c
n
a
a
B
l
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
Base
BR Technique Our Fixed Strategy
Our Selective Strategy
n
o
i
t
a
d
a
r
g
e
d
M
N
S
35%
30%
25%
20%
15%
10%
5%
0%
Percentage of the duty cycle (λ) values of the individual register
Fig. 10.
ﬁle bits that are within the range of [40% - 60%], where the NBTI-induced
reliability degradation is minimum
Fig. 11. The reliability degradation for the 32 nm technology node after 7
years compared to State-of-the-Art showing that our selective strategy always
has better results than the ﬁxed strategy alone
effective than applying one NBTI strategy for all registers. Our
technique (after implementing the selective strategy), across
all benchmarks, considerably increases the percentage of λ
values that are within the range of [40% - 60%] and the
increase reaches 3.3x, on average, and up to 6.2x. This, in turn,
promises to mitigate the NBTI-induced reliability degradation
in the register ﬁle because the NBTI stress is well-balanced in
the majority of the register ﬁle bits.
A. State-of-the-Art Comparison
It is worthy to note that other techniques based on toggling
the entire register ﬁle at a statistical aging standpoint works
ﬁne only if NBTI stress remains approximately the same
across applications. Varying NBTI-stress cases from multiple
applications may be interleaved resulting in non-optimal NBTI
stress overall. Assuming two applications with 0.1 and 0.9
mean ABP and a toggling interval corresponding to the time
an application is scheduled, the overall ABP from the toggling
technique is (0.1 + (1− 0.9))/2 = 0.1, which is far from the
optimal value (0.5) achieved if both applications have the same
stress, e.g. (0.1 + (1− 0.1))/2 = 0.5. Indeed, there are two
possibilities for employing the toggling mechanism. The ﬁrst is
not to apply it often. In this case the balancing of NBTI stress
in the SRAM cells needs to consider additional effects such
as application scheduling. It may not be possible to determine
the combined effect of several applications during one tog-
gling interval resulting in a non-deterministic stress balancing.
To balance stress, the toggling needs to occur very often,
incurring high overhead by stalling the processor for several
cycles each register ﬁle inversion. In contrast, our technique is
designed to attain high stress balancing with little additional
overhead independent of application behavior. According to
our technique, all-zero bits in a frequent register are only
periodically relaxed to ’1’s, they remain zeros roughly half
of the time. Additionally swapping the lower and upper halves
of the register bits compensates for non-balanced upper bits
due to non-uniform distribution of leading zeros in subsequent
register contents. On the other hand, the potential limitation
of our proposed technique is that the static proﬁling ﬁxes
the number of frequent or infrequent registers at design-time.
Without proﬁling, a runtime adaptive solution would require
on-line monitoring to determine infrequent registers and then
perform the required balancing.
Finally, Fig 11 evaluates our technique, in terms of reliabil-
ity degradation, and presents a comparison with the Base case
as well as with an implementation of the State-of-the-Art “Bit
level Rotation” (BR) technique [18]. This technique has been
selected as it has a similar goal to our work (i.e. balancing the
NBTI-inducing voltage stress in the register ﬁle bits). In this
comparison, we also take into account the both aforementioned
ﬁxed and selective cases. The SNM degradation has been
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:27 UTC from IEEE Xplore.  Restrictions apply. 
utilized as it is a widely used metric in evaluating register
ﬁle reliability. Indeed, this evaluation can translate the NBTI
stress in the register ﬁle and how it is distributed across the
individual bits to the corresponding reliability estimation. As
seen, applying the selective strategy increases the register ﬁle
resiliency against NBTI effects more than the ﬁxed strategy
alone. The SNM degradation is effectively minimized and
we achieve better results in all the targeted benchmarks: our
introduced technique improves, on average, the register ﬁle
reliability by 35% and 22% compared to the Base and the
BR technique, respectively. The reason behind achieving better
results is that our technique has the ability to select the best-
suited NBTI mitigation strategy for each register class.
VIII. CONCLUSION
The degradation of PMOS transistors throughout
their
lifetime due to NBTI stress has moved to the forefront of relia-
bility concerns affecting SRAM-based register ﬁles, especially
at deep sub-micron technologies. Current techniques aiming
to increase resiliency target all registers in the same manner
and fail to consider that different access patterns of individual
registers reduce the effectiveness of the techniques. In this
paper, we analyzed the severity of NBTI impact on the SRAM-
based register ﬁle when running a wide range of applications.
This key observation obtained from our study led to propose
our optimizing technique to selectively balance the voltage
stress in the register ﬁle bits depending on our classiﬁcation of
the registers, resulting in mitigating the reliability degradation
induced by NBTI. Our technique effectively balances the stress
by making the percentage of time that the PMOS transistors in
the register ﬁle is undergoing stress near to 50% on average.
This, in turn, minimizes the damaging effects of NBTI. We
reduce the reliability degradation by 35% and achieve better
results (22% on average) compared to the State-of-the-Art.
ACKNOWLEDGMENT
This work was supported in parts by the German Research
Foundation (DFG) as part of the priority program “Dependable
Embedded Systems” (SPP 1500 - spp1500.itec.kit.edu). We
would also like to thank Sani Nassif for his valuable input
regarding NBTI modeling.
REFERENCES
[1] T. Siddiqua and S. Gurumurthi, “Recovery boosting: A technique to
enhance NBTI recovery in SRAM arrays,” Proceedings of the IEEE
Annual Symposium on VLSI, pp. 393–398, 2010.
[2] K. Kang, S. Gangwal, S. Park, and K. Roy, “NBTI induced performance
degradation in logic and memory circuits: how effectively can we
approach a reliability solution?” Design Automation Conference, Asia
and South Paciﬁc, pp. 726–731, March 2008.
[3] R. Vattikonda, W. Wang, and Y. Cao, “Modeling and minimization of
PMOS NBTI effect for robust nanometer design,” Proceedings of the
43rd annual Design Automation Conference DAC, pp. 1047–1052, 2006.
[4] A. Bansal, R. M. Rao, J.-J. Kim, S. Zafar, J. H. Stathis, and C.-T.
Chuang, “Impacts of NBTI and PBTI on SRAM static/dynamic noise
margins and cell failure probability,” Microelectronics Reliability, pp.
642–649, 2009.
[5] G. Memik, M. Kandemir, and O. Ozturk, “Increasing register ﬁle
immunity to transient errors,” Design, Automation and Test in Europe,
Proceedings, pp. 586–591, March 2005.
[6]
J. A. Blome, S. Gupta, S. Feng, and S. Mahlke, “Cost-efﬁcient soft error
protection for embedded microprocessors,” Proceedings of the 2006
international conference on Compilers, architecture and synthesis for
embedded systems, pp. 421–431, 2006.
[7] H. Amrouch and J. Henkel, “Self-immunity technique to improve reg-
ister ﬁle integrity against soft errors,” VLSI Design, 24th International
Conference on, pp. 189–194, Jan. 2011.
[8] B. Calhoun and A. Chandrakasan, “Analyzing static noise margin for
sub-threshold SRAM in 65nm CMOS,” Solid-State Circuits Conference.
Proceedings of the 31st European, pp. 363–366, Sept. 2005.
[9] S. Bhardwaj, W. Wang, R. Vattikonda, Y. Cao, and S. Vrudhula,
“Predictive modeling of the NBTI effect for reliable design,” Custom
Integrated Circuits Conference, CICC ’06. IEEE, pp. 189–192, 2006.
[10] W. Zhao and Y. Cao, “Predictive technology model for nano-CMOS
design exploration,” J. Emerg. Technol. Comput. Syst., April 2007.
[11] K. Arabi, R. Saleh, and M. Xiongfei, “Power supply noise in SoCs:
Metrics, management, and measurement,” Design Test of Computers,
IEEE, vol. 24, no. 3, pp. 236–244, May-June 2007.
[12] A. Pavlov and M. Sachdev, CMOS SRAM Circuit Design and Paramet-
ric Test in Nano-Scaled Technologies: Process-Aware SRAM Design and
Test, 1st ed. Springer Publishing Company, Incorporated, 2008.
[13] F. Mesa, M. Brown, J. Nayfach, and J. Renau, “Measuring power and
temperature from real processors,” Parallel and Distributed Processing,
IEEE International Symposium on, pp. 1–5, April 2008.
I. K. Yongkui Han and C. Mritz, “Temperature aware ﬂoorplanning,”
Temperature-Aware Computer Systems, June 2005.
[14]
[15] K. Kang, H. Kuﬂuoglu, K. Roy, and M. Ashraful Alam, “Impact
of negative-bias temperature instability in nanoscale SRAM array:
Modeling and analysis,” Computer-Aided Design of Integrated Circuits
and Systems, IEEE Transactions on, pp. 1770–1781, Oct. 2007.
J. Abella, X. Vera, and A. Gonzalez, “Penelope: The NBTI-aware
processor,” Microarchitecture. 40th Annual IEEE/ACM International
Symposium on, pp. 85–96, Dec. 2007.
[16]
[17] L. Li, Y. Zhang, J. Yang, and J. Zhao, “Proactive NBTI mitigation for
busy functional units in out-of-order microprocessors,” Proceedings of
the Conference on Design, Automation and Test, pp. 411–416, 2010.
[18] S. Kothawade, K. Chakraborty, and S. Roy, “Analysis and mitigation of
NBTI aging in register ﬁle: An end-to-end approach,” Quality Electronic
Design, 12th International Symposium on, pp. 1–7, March 2011.
[19] Y. Kunitake, T. Sato, and H. Yasuura, “Signal probability control for
relieving NBTI in SRAM cells,” Quality Electronic Design (ISQED),
11th International Symposium on, pp. 660–666, March 2010.
[20] S. Wang, T. Jin, C. Zheng, and G. Duan, “Low power aging-aware
register ﬁle design by duty cycle balancing,” Design, Automation Test
in Europe Conference Exhibition (DATE), pp. 546–549, March 2012.
J. Tandon, “The openrisc processor: open hardware and linux,” Linux
J., Dec. 2011.
[21]
[22] M. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin, T. Mudge, and
R. B. Brown, “Mibench: A free, commercially representative embedded
benchmark suite,” Proceedings of the Workload Characterization, IEEE
International Workshop, pp. 3–14, 2001.
[23] C. Lee, M. Potkonjak, and W. H. Mangione-Smith, “Mediabench: a
tool for evaluating and synthesizing multimedia and communicatons
systems,” Proceedings of
the 30th annual ACM/IEEE international
symposium on Microarchitecture, pp. 330–335, 1997.
“Faraday Memory Compiler Architecture,
tech.com/index.html.”
http://www.faraday-
[24]
[25] R. Preston, R. Badeau, D. Bailey, S. Bell, L. Biro, W. Bowhill,
D. Dever, S. Felix, R. Gammack, V. Germini, M. Gowan, P. Gronowski,
D. Jackson, S. Mehta, S. Morton, J. Pickholtz, M. Reilly, and M. Smith,
“Design of an 8-wide superscalar risc microprocessor with simultaneous
multithreading,” Solid-State Circuits Conference, Digest of Technical
Papers. IEEE International, pp. 334–472, Feb. 2002.
[26] R. Azevedo, S. Rigo, M. Bartholomeu, G. Araujo, C. Araujo, and
E. Barros, “The ArchC architecture description language and tools,”
International Journal of Parallel Programming, pp. 453–484, 2005.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:27 UTC from IEEE Xplore.  Restrictions apply.