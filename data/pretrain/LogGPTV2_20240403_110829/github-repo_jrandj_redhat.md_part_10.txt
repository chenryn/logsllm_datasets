		whoami
		pwd
		hostname # check some basic information
		# ctrl + D to logout
        ```
1. Asghar Ghori - Exercise 19.2: Access RHEL System from Windows
	* Use a program called PuTTY to access *server20* using its IP address and as *user1*. Run appropriate commands on *server20* for validation. Log off to terminate the session:
	    ```shell
		# as above but using the server20 IP address in PuTTy
        ```
1. Asghar Ghori - Exercise 19.3: Generate, Distribute, and Use SSH Keys
	* Generate a password-less ssh key pair using RSA for *user1* on *server10*. Display the private and public file contents. Distribute the public key to *server20* and attempt to log on to *server20* from *server10*. Show the log file message for the login attempt:
	    ```shell
		# on server10
		ssh-keygen
		# press enter to select default file names and no password
		ssh-copy-id server20
		ssh server20 # confirm you can login
		# on server20
		vi /var/log/secure # view login event
        ```
1. Asghar Ghori - Exercise 20.1: Add Services and Ports, and Manage Zones
	* Determine the current active zone. Add and activate a permanent rule to allow HTTP traffic on port 80, and then add a runtime rule for traffic intended for TCP port 443. Add a permanent rule to the *internal* zone for TCP port range 5901 to 5910. Confirm the changes and display the contents of the affected zone files. Switch the default zone to the *internal* zone and activate it:
	    ```shell
		# on server10
		firewall-cmd --get-active-zones # returns public with enp0s8 interface
		firewall-cmd --add-service=http --permanent
		firewall-cmd --add-service=https
		firewall-cmd --add-port=80/tcp --permanent
		firewall-cmd --add-port=443/tcp
		firewall-cmd --zone=internal --add-port=5901-5910/tcp --permanent
		firewall-cmd --reload
		firewall-cmd --list-services # confirm result
		firewall-cmd --list-ports # confirm result
		vi /etc/firewalld/zones/public.xml # view configuration
		vi /etc/firewalld/zones/internal.xml # view configuration
		firewall-cmd --set-default-zone=internal
		firewall-cmd --reload
		firewall-cmd --get-active-zones # returns internal with enp0s8 interface
        ```
1. Asghar Ghori - Exercise 20.2: Remove Services and Ports, and Manage Zones
	* Remove the 2 permanent rules added above. Switch back to the *public* zone as the default zone, and confirm the changes:
	    ```shell
		firewall-cmd --set-default-zone=public
		firewall-cmd --remove-service=http --permanent
		firewall-cmd --remove-port=80/tcp --permanent
		firewall-cmd --reload
		firewall-cmd --list-services # confirm result
		firewall-cmd --list-ports # confirm result
        ```
1. Asghar Ghori - Exercise 20.3: Test the Effect of Firewall Rule
	* Remove the *sshd* service rule from the runtime configuration on *server10*, and try to access the server from *server20* using the *ssh* command:
	    ```shell
		# on server10
		firewall-cmd --remove-service=ssh --permanent
		firewall-cmd --reload
		# on server20
		ssh user1@server10
		# no route to host message displayed
		# on server10
		firewall-cmd --add-service=ssh --permanent
		firewall-cmd --reload
		# on server20
		ssh user1@server10
		# success
        ```
1. Asghar Ghori - Exercise 21.1: Modify SELinux File Context
	* Create a directory *sedir1* under `/tmp` and a file *sefile1* under *sedir1*. Check the context on the directory and file. Change the SELinux user and type to user_u and public_content_t on both and verify:
	    ```shell
		mkdir /tmp/sedir1
		touch /tmp/sedir1/sefile1
		cd /tmp/sedir1
		ll -Z # unconfined_u:object_r:user_tmp_t:s0 shown
		chcon -u user_u -R sedir1
		chcon -t public_content_t -R sedir1
        ```
1. Asghar Ghori - Exercise 21.2: Add and Apply File Context
	* Add the current context on *sedir1* to the SELinux policy database to ensure a relabeling will not reset it to its previous value. Next, you will change the context on the directory to some random values. Restore the default context from the policy database back to the directory recursively:
	    ```shell
		semanage fcontext -a -t public_content_t -s user_u '/tmp/sedir1(/.*)?'
		cat /etc/selinux/targeted/contexts/files/file_contexts.local # view recently added policies
		restorecon -Rv sedir1 # any chcon changes are reverted with this
        ```
1. Asghar Ghori - Exercise 21.3: Add and Delete Network Ports
	* Add a non-standard port 8010 to the SELinux policy database for the *httpd* service and confirm the addition. Remove the port from the policy and verify the deletion:
	    ```shell
		semanage port -a -t http_port_t -p tcp 8010
		semanage port -l | grep http # list all port settings
		semanage port -d -t http_port_t -p tcp 8010
		semanage port -l | grep http
        ```
1. Asghar Ghori - Exercise 21.4: Copy Files with and without Context
	* Create a file called *sefile2* under `/tmp` and display its context. Copy this file to the `/etc/default` directory, and observe the change in the context. Remove *sefile2* from `/etc/default`, and copy it again to the same destination, ensuring that the target file receives the source file's context:
	    ```shell
		cd /tmp
		touch sefile2
		ll -Zrt # sefile2 context is unconfined_u:object_r:user_tmp_t:s0
		cp sefile2 /etc/default
		cd /etc/default
		ll -Zrt # sefile2 context is unconfined_u:object_r:etc_t:s0
		rm /etc/default/sefile2
		cp /tmp/sefile2 /etc/default/sefile2 --preserve=context
		ll -Zrt # sefile2 context is unconfined_u:object_r:user_tmp_t:s0
        ```
1. Asghar Ghori - Exercise 21.5: View and Toggle SELinux Boolean Values
	* Display the current state of the Boolean nfs_export_all_rw. Toggle its value temporarily, and reboot the system. Flip its value persistently after the system has been back up:
	    ```shell
		getsebool nfs_export_all_rw # nfs_export_all_rw --> on
		sestatus -b | grep nfs_export_all_rw # also works
		setsebool nfs_export_all_rw_off
		reboot
		setsebool nfs_export_all_rw_off -P
        ```
1. Prince Bajaj - Managing Containers
	* Download the Apache web server container image (httpd 2.4) and inspect the container image. Check the exposed ports in the container image configuration:
	    ```shell
		# as root
		usermod user1 -aG wheel
		cat /etc/groups | grep wheel # confirm
		# as user1
		podman search httpd # get connection refused
		# this was because your VM was setup as an Internal Network and not a NAT network so it couldn't access the internet
		# see result registry.access.redhat.com/rhscl/httpd-24-rhel7
		skopeo inspect --creds name:password docker://registry.access.redhat.com/rhscl/httpd-24-rhel7
		podman pull registry.access.redhat.com/rhscl/httpd-24-rhel7
		podman inspect registry.access.redhat.com/rhscl/httpd-24-rhel7
		# exposed ports shown as 8080 and 8443
        ```
	* Run the httpd container in the background. Assign the name *myweb* to the container, verify that the container is running, stop the container and verify that it has stopped, and delete the container and the container image:
	    ```shell
		podman run --name myweb -d registry.access.redhat.com/rhscl/httpd-24-rhel7
		podman ps # view running containers
		podman stop myweb
		podman ps # view running containers
		podman rm myweb
		podman rmi registry.access.redhat.com/rhscl/httpd-24-rhel7
        ```
	* Pull the Apache web server container image (httpd 2.4) and run the container with the name *webserver*. Configure *webserver* to display content "Welcome to container-based web server". Use port 3333 on the host machine to receive http requests. Start a bash shell in the container to verify the configuration:
	    ```shell
		# as root
		dnf install httpd -y
		vi /var/www/html/index.html
		# add row "Welcome to container-based web server"
		# as user1
		podman search httpd
		podman pull registry.access.redhat.com/rhscl/httpd-24-rhel7
		podman inspect registry.access.redhat.com/rhscl/httpd-24-rhel7 # shows 8080 in exposedPorts, and /opt/rh/httpd24/root/var/www is shown as HTTPD_DATA_ORIG_PATH 
		podman run -d=true -p 3333:8080 --name=webserver -v /var/www/html:/opt/rh/httpd24/root/var/www/html registry.access.redhat.com/rhscl/httpd-24-rhel7
		curl http://localhost:3333 # success!
		# to go into the container and (for e.g.) check the SELinux context
		podman exec -it webserver /bin/bash
		cd /opt/rh/httpd24/root/var/www/html
		ls -ldZ
		# you can also just go to /var/www/html/index.html in the container and change it there
        ```
	* Configure the system to start the *webserver* container at boot as a systemd service. Start/enable the systemd service to make sure the container will start at book, and reboot the system to verify if the container is running as expected:
	    ```shell
		# as root
		podman pull registry.access.redhat.com/rhscl/httpd-24-rhel7
		vi /var/www/html/index
		# add row "Welcome to container-based web server"
		podman run -d=true -p 3333:8080/tcp --name=webserver -v /var/www/html:/opt/rh/httpd24/root/var/www/html registry.access.redhat.com/rhscl/httpd-24-rhel7
		cd /etc/systemd/system
		podman generate systemd webserver >> httpd-container.service
		systemctl daemon-reload
		systemctl enable httpd-container.service --now
		reboot
		systemctl status httpd-container.service
		curl http://localhost:3333 # success
		# this can also be done as a non-root user
		podman pull registry.access.redhat.com/rhscl/httpd-24-rhel7
		sudo vi /var/www/html/index.html
		# add row "Welcome to container-based web server"
		sudo setsebool -P container_manage_cgroup true
		podman run -d=true -p 3333:8080/tcp --name=webserver -v /var/www/html:/opt/rh/httpd24/root/var/www/html registry.access.redhat.com/rhscl/httpd-24-rhel7
		podman generate systemd webserver > /home/jr/.config/systemd/user/httpd-container.service
		cd /home/jr/.config/systemd/user
		sudo semanage fcontext -a -t systemd_unit_file_t httpd-container.service
		sudo restorecon httpd-container.service
		systemctl enable --user httpd-container.service --now
        ```
	* Pull the *mariadb* image to your system and run it publishing the exposed port. Set the root password for the mariadb service as *mysql*. Verify if you can login as root from local host:
	    ```shell
		# as user1
		sudo dnf install mysql -y
		podman search mariadb
		podman pull docker.io/library/mariadb
		podman inspect docker.io/library/mariadb # ExposedPorts 3306 
		podman run --name mariadb -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=mysql docker.io/library/mariadb
		podman inspect mariadb # IPAddress is 10.88.0.22
		mysql -h 10.88.0.22 -u root -p
        ```
1. Linux Hint - Bash Script Examples
	* Create a hello world script:
	    ```shell
		!#/bin/bash
		echo "Hello World!"
		exit
        ```
	* Create a script that uses a while loop to count to 5:
	    ```shell
		!#/bin/bash
		count=0
		while [ $count -le 5 ]
		do
			echo "$count"
			count = $(($count + 1))
		done
		exit
        ```
	* Note the formatting requirements. For example, there can be no space between the equals and the variable names, there must be a space between the "]" and the condition, and there must be 2 sets of round brackets in the variable incrementation.
	* Create a script that uses a for loop to count to 5:
	    ```shell
		!#/bin/bash
		count=5
		for ((i=1; i /dev/null 2>&1
		if [ $? -eq 0 ]
		then
			echo "Connectivity to $1 established"
		else
			echo "Connectivity to $1 unavailable"
		fi
		exit
        ```
1. Asghar Ghori - Sample RHCSA Exam 1
	* Setup a virtual machine RHEL 8 Server for GUI. Add a 10GB disk for the OS and use the default storage partitioning. Add 2 300MB disks. Add a network interface, but do not configure the hostname and network connection.
	* Assuming the root user password is lost, reboot the system and reset the root user password to root1234:
	    ```shell
		# ctrl + e after reboot
		# add rd.break after Linux line
		# ctrl + d
		mount -o remount, rw /sysroot
		chroot /sysroot
		passwd
		# change password to root12345
		touch /.autorelabel
		exit
		reboot
        ```
	* Using a manual method (i.e. create/modify files by hand), configure a network connection on the primary network device with IP address 192.168.0.241/24, gateway 192.168.0.1, and nameserver 192.168.0.1:
	    ```shell
		vi /etc/sysconfig/network-scripts/ifcfg-enp0s3
		systemctl restart NetworkManager.service
		# add line IPADDR=192.168.0.241
		# add line GATEWAY=192.168.0.1
		# add line DNS=192.168.0.1
		# add line PREFIX=24
		# change BOOTPROTO from dhcp to none
		ifup enp0s3
		nmcli con show # validate
        ```
	* Using a manual method (modify file by hand), set the system hostname to rhcsa1.example.com and alias rhcsa1. Make sure the new hostname is reflected in the command prompt:
	    ```shell
		vi /etc/hostname
		# replace line with rhcsa1.example.com
		vi /etc/hosts
		# add rhcsa1.example.com and rhcsa1 to first line
		systemctl restart NetworkManager.service
		vi ~/.bashrc
		# add line export PS1 = 
        ```
	* Set the default boot target to multi-user:
	    ```shell
		systemctl set-default multi-user.target
        ```
	* Set SELinux to permissive mode:
	    ```shell
		setenforce permissive
		sestatus # confirm
		vi /etc/selinux/config
		# change line SELINUX=permissive for permanence
        ```
	* Perform a case-insensitive search for all lines in the `/usr/share/dict/linux.words` file that begin with the pattern "essential". Redirect the output to `/tmp/pattern.txt`. Make sure that empty lines are omitted:
	    ```shell
		grep '^essential' /usr/share/dict/linux.words > /tmp/pattern.txt
        ```
	* Change the primary command prompt for the root user to display the hostname, username, and current working directory information in that order. Update the per-user initialisation file for permanence:
	    ```shell
		vi /root/.bashrc
		# add line export PS1 = ''$
        ```
	* Create user accounts called user10, user20, and user30. Set their passwords to Temp1234. Make accounts for user10 and user30 to expire on December 31, 2021:
	    ```shell
		useradd user10
		useradd user20