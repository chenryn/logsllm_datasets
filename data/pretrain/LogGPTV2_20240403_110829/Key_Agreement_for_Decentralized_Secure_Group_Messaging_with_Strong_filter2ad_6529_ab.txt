to the adversary. Since each user updates only their own sender
key, to recover from the compromise, each of the n group members
needs to generate a new key and send it to each of the n − 1 other
2) messages over the two-party channels.
members, resulting in 𝒪(n
Matrix’s end-to-end encryption protocol [29, 40] is a variant
of Sender Keys. It is decentralized, provides PCS, and explicitly
handles concurrent updates and group membership changes. It is
purposely not forward secret, although this could be changed. PCS
updates in Matrix require 𝒪(n
2) messages, while our protocol has
𝒪(n) cost. No formal security analysis of the Matrix protocol has
been published to date.
The MLS protocol, mentioned in Section 1, uses the TreeKEM key
agreement protocol [5, 8]. Adding or removing a group member, or
performing a PCS key update, requires broadcasting a message of
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2026Table 1: Summary of related work as discussed in this paper.
Protocol
Central
server not
needed
Broadcast
messages
PCS & FS
PCS in face of
concurrent updates
Per recipient
Update &
remove costs:1
Sender
𝒪(n)
𝒪(n)
𝒪(n)
𝒪(log n)
𝒪(log n)
𝒪(log n)
𝒪(n)
½ (PCS issues)3
✓2
✓2
✓
✗
✗
✓2
✓2
✓
Signal groups
Sender Keys (WhatsApp)
Matrix
MLS (TreeKEM)
Re-randomized TreeKEM
Causal TreeKEM
Concurrent TreeKEM
Our DCGKA protocol
All but last can be concurrent
1 Costs are the number of public-key cryptographic operations performed. The total size of messages broadcast equals the “Sender” column
except for Sender Keys and Matrix, which have total broadcast network cost 𝒪(n
2). t denotes the number of mutually concurrent messages.
2 Does not specify how to determine group membership in the face of concurrent additions and removals.
3 Optimal PCS in the face of concurrent updates is possible by using a 2-party protocol with optimal PCS+FS in place of pairwise Signal.
4 Optimal PCS in the face of concurrent updates is possible at the given costs, but not used in practice.
Any sequence heals
After two rounds
Only one sequence heals
𝒪(t + t log(n/t))
[Optimal]3
[Optimal]4
Optimal3
𝒪(1)
𝒪(n)
𝒪(n)
𝒪(1)
𝒪(1)
𝒪(1)
𝒪(1)
𝒪(1)
½ (severe FS issues)
FS only4
PCS only
½ (FS issues)
✓
✓
PCS only
✗
✓
✓
✓
✓
✓
✓
✓
size 𝒪(log(n)). This is achieved by arranging group members into
a binary tree, with one leaf per group member, and each member
knowing the secret keys on their leaf node’s path to the root.
In large groups, MLS update messages are smaller than those in
our protocol; the downside is that MLS is inherently centralized.
MLS allows several PCS updates and group membership changes
to be proposed concurrently, but they only take effect after being
committed, and all users must process commits strictly in the same
order. A proposal also blocks application messages until the next
commit. In the case of a network partition like that described in
Section 2, it is not safe for one subset of users to perform a commit,
because a different subset of users may perform a different commit,
resulting in a group state inconsistency that cannot be resolved. As
a result, MLS typically depends on a semi-trusted server to deter-
mine the sequence of commits. There is a technique for combining
concurrent commits [8, §5], but this approach does not apply to
commits that add or remove group members, and it provides weak
PCS guarantees for concurrent updates.
Alwen et al. [3] introduce Re-randomized TreeKEM to strengthen
TreeKEM’s forward secrecy. That protocol is even harder to de-
centralize: group members update each other’s secret keys so that
each secret key is only used once, allowing them to be deleted for
forward secrecy, but this approach breaks if multiple concurrent
messages are encrypted under the same public key.
In the other direction, Causal TreeKEM modifies TreeKEM to
require only causally ordered message delivery (see Section 5.1), at
the cost of even weaker forward secrecy [41, §4]. Like our work,
Causal TreeKEM describes how to handle dynamic groups in the
decentralized setting, although the protocol description is largely
informal. Also, its post-compromise security is weaker than for our
DCGKA protocol: after multiple compromises, all compromised
group members must send PCS updates in sequence, while our
protocol allows all but the last update to be concurrent.
Bienstock, Dodis, and Rösler [9, §6] also propose a concurrency-
aware variant of TreeKEM (“Concurrent TreeKEM” in Table 1). This
I1
I2
k1
k2
k3
k4
m1
m2
m3
m4
PRG
PRG
PRG
PRG
...
sender
recipient
c1
c2
c3
c4
Enc
Enc
Enc
Enc
Dec
Dec
Dec
Dec
I1
I2
k1
k2
k3
k4
m1
m2
m3
m4
PRG
PRG
PRG
PRG
...
Figure 1: Ratchet for forward secret and PCS encryption of
messages m1, m2, . . . based on a sequence of secrets I1, I2, . . . .
protocol achieves PCS updates whose cost scales with the number
of previous concurrent messages, matching MLS’s 𝒪(log(n)) when
all messages are totally ordered. However, it assumes that PCS
updates occur in fixed rounds, with all messages from one round
received before the start of the next round, and the authors do not
consider forward secrecy or dynamic groups.
Our definition of DCGKA security is based on CGKA, introduced
by Alwen et al. [3].
4 PROTOCOL OVERVIEW
We now introduce our protocol for decentralized secure group
messaging. We begin in this section by presenting a high-level
overview of the system architecture, before diving into the details
in the following sections.
Like many other messaging protocols, we begin with a ratchet,
which provides forward secrecy by encrypting each message with
a different key. Figure 1 illustrates the ratchet for encrypting the
sequence of messages m1, m2, . . . sent by one particular user. The
sender of the messages initializes the ratchet with an update secret
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2027I1. When this user wishes to send message mi, we use a pseudoran-
dom generator (PRG) to deterministically generate a symmetric key
ki and a new ratchet state from the current ratchet state. We encrypt
mi using ki in an authenticated encryption scheme with associated
data (AEAD), where the associated data includes the message index
i. The resulting ciphertext ci is broadcast to all group members.
We then delete I1, ki and the old ratchet state from memory, pre-
venting an adversary from obtaining ki if the user is subsequently
compromised. This construction has been formalized as forward
secure AEAD [2, §4.2].
From time to time, the sender may replace the ratchet state with
a fresh update secret I2, I3, . . . . This enables PCS: an adversary
who has learned the ratchet state from a past device compromise,
but who does not know the update secret, then loses the ability
to decrypt subsequent messages. The schedule for update secrets
can be chosen independently from the messages sent; for example,
a user could apply a PCS update once per day, and rely on the
PRG ratchet for messages sent over the course of a day. Thus, an
adversary loses decryption ability shortly after a device compromise
ends (e.g., due to a software update).
In a group messaging context, each group member has their own
ratchet for the sequence of messages they send. To decrypt those
messages, each group member maintains a copy of the ratchet for
every other group member. As long as each group member obtains
the same sequence of update secrets for each sender, and changes
their copy of the ratchet state at the appropriate times, they will
be able to decrypt the sender’s ciphertexts c1, c2, . . . . For forward
secrecy, recipients also delete update secrets, keys, and ratchet state
from memory as soon as they have been used.
With this construction, we have reduced the problem of secure
group messaging to the problem of generating a sequence of update
secrets I1, I2, . . . for each group member. That is the responsibility
of a DCGKA protocol, defined in Section 6.1. For example, in the
Sender Keys protocol (Section 3), a group member picks a fresh
random update secret, then sends it to every other group member
using a two-party secure messaging channel (e.g. the Signal proto-
col). Sender Keys has the downside that to heal a compromise, each
group member must send a new update secret to every other group
member, resulting in 𝒪(n
2) messages via the two-party channels.
Our DCGKA protocol, described fully in Section 6, reduces the
number of messages for a PCS update to 𝒪(n) as follows. To initiate
a PCS update, a user generates a fresh random value called a seed
secret, and sends it to each other group member via a two-party
secure channel, like in Sender Keys. On receiving a seed secret, a
group member deterministically derives from it an update secret for
the sender’s ratchet, and also an update secret for its own ratchet.
Moreover, the recipient broadcasts an unencrypted acknowledg-
ment to the group indicating that it has applied the update. Every
recipient of the acknowledgment then updates not only the ratchet
for the sender of the original update, but also the ratchet for the
sender of the acknowledgment. Thus, after one seed secret has been
disseminated via n − 1 two-party messages, and confirmed via n − 1
broadcast acknowledgments, each group member has derived an
update secret from it and updated their ratchet. To further reduce
cost, some of these messages can be delayed and batched without
weakening the security properties (see Section 8).
User A:
A1: create {A, B}
A2: update
User B:
B1: ack A1
B2: add C
B3: ack C2
B4: ack C3
User C:
C1: ack B2
C2: update
C3: remove A
Figure 2: Sequence of group state changes at each user.
user A’s rachet state
"A"
IA
I′
A
KDF
"A"
KDF
KDF
KDF
. . .
seed secret in
A’s PCS update
seed secret in
B’s PCS update
user B’s rachet state
"B"
KDF
"B"
KDF
KDF
KDF
. . .
IB
I′
B
Figure 3: Different group members apply the same seed se-
crets to their KDF ratchets, but in different orders.
To remove a group member, the user initiating the removal
performs a PCS update in which the update secret is sent to all group
members except the removed one. To add a group member, each
existing group member sends the new user a copy of state needed
to derive their future update secrets (see Section 6 for details).
Different group members may receive messages in different or-
ders; care is required to ensure that each sender’s ratchet is never-
theless updated with the same sequence of update secrets at each
group member. We achieve this by constructing a sequence of group
state changes for each group member, as illustrated in Figure 2. In
this example, user A first creates a group containing A and B. User
B acknowledges the group creation and then adds C. User C ac-
knowledges being added by B, then performs a PCS update (which
is acknowledged by B), and then removes A from the group (also
acknowledged by B). Concurrently A performs a PCS update, but it
is not acknowledged by B or C before A’s removal takes effect.
In Figure 2, each box is a group state change that results in an
update secret being applied to the ratchet for that particular user,