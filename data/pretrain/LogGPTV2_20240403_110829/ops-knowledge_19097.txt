When installing Celery through Puppet, you can place the `celeryconfig.py` file in a location where it will be automatically read by Celery. Since you are not using Celery with Django, a common and recommended approach is to place the `celeryconfig.py` file in the root directory of your project. This makes it easy to find and edit.

### Recommended Location
- **Project Root Directory**: Place `celeryconfig.py` in the root directory of your project. For example, if your project structure looks like this:

  ```
  /my_project
    ├── celeryconfig.py
    ├── tasks.py
    └── ...
  ```

### Loading the Configuration
To ensure that Celery loads the `celeryconfig.py` file, you need to manually configure Celery to use this configuration file. You can do this using one of the following methods:

1. **Using `config_from_object`**:
   ```python
   from celery import Celery

   app = Celery('my_project')
   app.config_from_object('celeryconfig')
   ```

2. **Using `config_from_envvar`**:
   - Set an environment variable to point to the configuration file.
   - In your shell or environment setup:
     ```sh
     export CELERY_CONFIG_MODULE=celeryconfig
     ```
   - In your Python code:
     ```python
     from celery import Celery

     app = Celery('my_project')
     app.config_from_envvar('CELERY_CONFIG_MODULE')
     ```

3. **Using `config_from_cmdline`**:
   - Pass the configuration file as a command-line argument when starting Celery.
   - In your shell:
     ```sh
     celery -A my_project worker --app=my_project -c 4 --config=celeryconfig
     ```

By placing `celeryconfig.py` in the project root and using one of the above methods, you ensure that Celery will read the configuration file every time it runs. This approach keeps your configuration organized and easily accessible.