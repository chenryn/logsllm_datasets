---
author: Nix Craft
category: 系统运维
comments_data:
- date: '2014-11-13 18:33:01'
  message: '@我的印象笔记'
  postip: 220.181.51.37
  username: 微博评论
- date: '2016-12-14 23:38:46'
  message: 请问跟paramiko是干嘛的
  postip: 14.155.148.182
  username: 狮子XL [Chrome 54.0|Windows 7]
- date: '2019-01-14 09:57:53'
  message: paramiko是python语言中的ssh库
  postip: 60.12.218.61
  username: 来自浙江宁波的 Chrome 60.0|Windows 10 用户
- date: '2019-01-14 09:58:00'
  message: paramiko是python语言中的ssh库
  postip: 60.12.218.61
  username: 来自浙江宁波的 Chrome 60.0|Windows 10 用户
count:
  commentnum: 4
  favtimes: 5
  likes: 0
  sharetimes: 5
  viewnum: 141588
date: '2014-11-13 16:04:30'
editorchoice: false
excerpt: 今天我来谈谈 ansible，一个由 Python 编写的强大的配置管理解决方案。尽管市面上已经有很多可供选择的配置管理解决方案，但他们各有优劣，而
  ansible 的特点就在于它的简洁。让 ansible 在主流的配置管理系统中与众不同的一点便是，它并不需要你在想要配置的每个节点上安装自己的组件。同时提供的一个优点在于，如果需要的话，你可以在不止一个地方控制你的整个基础架构。最后一点是它的正确性，或许这里有些争议，但是我认为在大多数时候这仍然可以作为它的一个优点。说得足够多了，让我们来着手在
  RHEL/CentOS 和基于 Debian/Ubuntu 的
fromurl: http://www.cyberciti.biz/python-tutorials/linux-tutorial-install-ansible-configuration-management-and-it-automation-tool/
id: 4215
islctt: true
largepic: /data/attachment/album/201411/13/160434wtgc5zv1ggh10qki.png
permalink: /article-4215-1.html
pic: /data/attachment/album/201411/13/160434wtgc5zv1ggh10qki.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 今天我来谈谈 ansible，一个由 Python 编写的强大的配置管理解决方案。尽管市面上已经有很多可供选择的配置管理解决方案，但他们各有优劣，而
  ansible 的特点就在于它的简洁。让 ansible 在主流的配置管理系统中与众不同的一点便是，它并不需要你在想要配置的每个节点上安装自己的组件。同时提供的一个优点在于，如果需要的话，你可以在不止一个地方控制你的整个基础架构。最后一点是它的正确性，或许这里有些争议，但是我认为在大多数时候这仍然可以作为它的一个优点。说得足够多了，让我们来着手在
  RHEL/CentOS 和基于 Debian/Ubuntu 的
tags:
- Ansible
- 配置管理
- IT自动化
thumb: false
title: Ansible ：一个配置管理和IT自动化工具
titlepic: false
translator: felixonmars
updated: '2014-11-13 16:04:30'
---
![](/data/attachment/album/201411/13/160434wtgc5zv1ggh10qki.png)
今天我来谈谈 ansible，一个由 Python 编写的强大的配置管理解决方案。尽管市面上已经有很多可供选择的配置管理解决方案，但他们各有优劣，而 ansible 的特点就在于它的简洁。让 ansible 在主流的配置管理系统中与众不同的一点便是，它并不需要你在想要配置的每个节点上安装自己的组件。同时提供的一个优点在于，如果需要的话，你可以在不止一个地方控制你的整个基础架构。最后一点是它的正确性，或许这里有些争议，但是我认为在大多数时候这仍然可以作为它的一个优点。说得足够多了，让我们来着手在 RHEL/CentOS 和基于 Debian/Ubuntu 的系统中安装和配置 Ansible。
### 准备工作
1. 发行版：RHEL/CentOS/Debian/Ubuntu Linux
2. Jinja2：Python 的一个对设计师友好的现代模板语言
3. PyYAML：Python 的一个 YAML 编码/反编码函数库
4. paramiko：纯 Python 编写的 SSHv2 协议函数库 （译者注：原文对函数库名有拼写错误）
5. httplib2：一个功能全面的 HTTP 客户端函数库
6. 本文中列出的绝大部分操作已经假设你将在 bash 或者其他任何现代的 shell 中以 root 用户执行。
### Ansible 如何工作
Ansible 工具并不使用守护进程，它也不需要任何额外的自定义安全架构，因此它的部署可以说是十分容易。你需要的全部东西便是 SSH 客户端和服务器了。
```
 +-----------------+                    +---------------+
 |安装了 Ansible 的|       SSH          | 文件服务器1   |
 |Linux/Unix 工作站|| 数据库服务器2 | 在本地或远程
 +-----------------+       模块         | 代理服务器3   | 数据中心的
    192.168.1.100                       +---------------+ Unix/Linux 服务器
```
其中：
1. 192.168.1.100 - 在你本地的工作站或服务器上安装 Ansible。
2. 文件服务器1到代理服务器3 - 使用 192.168.1.100 和 Ansible 来自动管理所有的服务器。
3. SSH - 在 192.168.1.100 和本地/远程的服务器之间设置 SSH 密钥。
### Ansible 安装教程
ansible 的安装轻而易举，许多发行版的第三方软件仓库中都有现成的软件包，可以直接安装。其他简单的安装方法包括使用 pip 安装它，或者从 github 里获取最新的版本。若想使用你的软件包管理器安装，在[基于 RHEL/CentOS Linux 的系统里你很可能需要 EPEL 仓库](http://www.cyberciti.biz/faq/fedora-sl-centos-redhat6-enable-epel-repo/)。
#### 在基于 RHEL/CentOS Linux 的系统中安装 ansible
输入如下 [yum 命令](http://www.cyberciti.biz/faq/rhel-centos-fedora-linux-yum-command-howto/):
```
$ sudo yum install ansible
```
#### 在基于 Debian/Ubuntu Linux 的系统中安装 ansible
输入如下 [apt-get 命令](http://www.cyberciti.biz/tips/linux-debian-package-management-cheat-sheet.html):
```
$ sudo apt-get install software-properties-common
$ sudo apt-add-repository ppa:ansible/ansible
$ sudo apt-get update
$ sudo apt-get install ansible
```
#### 使用 pip 安装 ansible
[pip 命令是一个安装和管理 Python 软件包的工具](http://www.cyberciti.biz/faq/debian-ubuntu-centos-rhel-linux-install-pipclient/)，比如它能管理 Python Package Index 中的那些软件包。如下方式在 Linux 和类 Unix 系统中通用：
```
$ sudo pip install ansible
```
#### 从源代码安装最新版本的 ansible
你可以通过如下命令从 github 中安装最新版本：
```
$ cd ~
$ git clone git://github.com/ansible/ansible.git
$ cd ./ansible
$ source ./hacking/env-setup
```
当你从一个 git checkout 中运行 ansible 的时候，请记住你每次用它之前都需要设置你的环境，或者你可以把这个设置过程加入你的 bash rc 文件中：
```
# 加入 BASH RC
$ echo "export ANSIBLE_HOSTS=~/ansible_hosts" >> ~/.bashrc
$ echo "source ~/ansible/hacking/env-setup" >> ~/.bashrc
```
ansible 的 hosts 文件包括了一系列它能操作的主机。默认情况下 ansible 通过路径 /etc/ansible/hosts 查找 hosts 文件，不过这个行为也是可以更改的，这样当你想操作不止一个 ansible 或者针对不同的数据中心的不同客户操作的时候也是很方便的。你可以通过命令行参数 -i 指定 hosts 文件：
```
$ ansible all -m shell -a "hostname" --ask-pass -i /etc/some/other/dir/ansible_hosts
```
不过我更倾向于使用一个环境变量，这可以在你想要通过 source 一个不同的文件来切换工作目标的时候起到作用。这里的环境变量是 $ANSIBLE\_HOSTS，可以这样设置：
```
$ export ANSIBLE_HOSTS=~/ansible_hosts
```
一旦所有需要的组件都已经安装完毕，而且你也准备好了你的 hosts 文件，你就可以来试一试它了。为了快速测试，这里我把 127.0.0.1 写到了 ansible 的 hosts 文件里：
```
$ echo "127.0.0.1" > ~/ansible_hosts
```
现在来测试一个简单的 ping：
```
$ ansible all -m ping
```
或者提示 ssh 密码：
```
$ ansible all -m ping --ask-pass
```
我在刚开始的设置中遇到过几次问题，因此这里强烈推荐为 ansible 设置 SSH 公钥认证。不过在刚刚的测试中我们使用了 --ask-pass，在一些机器上你会需要[安装 sshpass](http://www.cyberciti.biz/faq/noninteractive-shell-script-ssh-password-provider/) 或者像这样指定 -c paramiko：
```
$ ansible all -m ping --ask-pass -c paramiko
```
当然你也可以[安装 sshpass](http://www.cyberciti.biz/faq/noninteractive-shell-script-ssh-password-provider/)，然而 sshpass 并不总是在标准的仓库中提供，因此 paramiko 可能更为简单。
### 设置 SSH 公钥认证
于是我们有了一份配置，以及一些基础的其他东西。现在让我们来做一些实用的事情。ansible 的强大很大程度上体现在 playbooks 上，后者基本上就是一些写好的 ansible 脚本（大部分来说），不过在制作一个 playbook 之前，我们将先从一些一句话脚本开始。现在让我们创建和配置 SSH 公钥认证，以便省去 -c 和 --ask-pass 选项：
```
$ ssh-keygen -t rsa
```
样例输出：
```
Generating public/private rsa key pair.
Enter file in which to save the key (/home/mike/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/mike/.ssh/id_rsa.