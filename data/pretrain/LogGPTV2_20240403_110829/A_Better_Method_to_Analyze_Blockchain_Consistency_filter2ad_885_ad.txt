and how to reason about linearity of transactions [19, 21].
Session 4C: Blockchain 1CCS’18, October 15-19, 2018, Toronto, ON, Canada736y
t
i
l
i
b
a
b
o
r
P
10−1
10−2
10−3
49% Adv
25% Adv
c=1
c=4
c= 60
2
4
6
10
12
8
Length of fork
14
16
18
Figure 5: This graph depicts the probability for an execution
of Nakamoto to sustain a fork of a particular length. The
three regions correspond to this probability at settings of c =
1, c = 4, c = 60 where the hardness for the proof of work is set
such that a block is expected to be mined in c∆ attempts. In
each case, the top solid line of a shaded region represents the
probability for a 49% adversary, whereas the bottom dashed
line represents the same for a 25% adversary.
In this section we explore another class of DAG protocols in-
spired by Chainweb [14]. In Chainweb, the blockchain is a block-
braid made of multiple parallel chains in which each block must
refer to blocks in specific braids according to a reference base
graph. Chainweb security analysis is base-graph dependent and
the authors of Chainweb have attempted to analyze the general
graph case and provide a ‘50%’-attack type analysis. We specifically
choose a clique as the base graph (resulting in a proposal we call
Cliquechain2) to facilitate a rigorous analysis. As far as we know,
we provide the first consensus lower bound for any variant of a
non-trivial DAG-style protocol. Our consensus analysis applies to
any number of chains, while in our attack analysis we focus on the
2-chain and 3-chain examples and we see that as we add chains
the protocol becomes more resilient to these attacks. Our analy-
sis, however, does not support all the performance claims made in
the Chainweb paper as we provide provable consistency for any-
chain Cliquechain only up to the same throughput as Nakamoto’s
protocol.
5.1 The Model
In Cliquechain we have m parallel blockchains and, at any layer
l, each block points to a layer l − 1 block on its chain, as well as
a layer l − 1 block on each chain. Thus in total a block at layer l
references m blocks of layer l − 1, one on each chain.
Blocks in a layer must be compatible with one another, meaning
they must all point to the same blocks in the previous layer. Fig-
ure 6 shows an example of this with 1, 2, and 3-chain versions of
Cliquechain. Note that the 1-chain version is simply Nakamoto’s
2Cliquechain is the block consensus protocol. For reasoning about validity of messages,
we refer to Chainweb’s SPV protocol for creating inter-chain transactions[14].
protocol. When choosing which block to mine while running an
m-chain Cliquechain, a miner runs the following protocol.
(1) Let C be the set of all individual Cliquechains possible from
the graph of all blocks mined.
(2) Let L be the longest length of any chain in C, where the
length of the chain is the highest level of any block.
(3) Let S be the set of all compatible sets of L level blocks, where
a compatible set is a set where all blocks point to all the same
blocks in level L − 1.
one of the maximum sized sets.
(4) Let s be the maximum sized set in S or a random set from
(5) If |s| = m, level L is complete, choose a random chain to
(6) Otherwise, mine a block on a chain not in s which is com-
mine a L + 1 level block pointing to all blocks in s.
patible with the blocks in s.
Note that a new layer cannot start being mined until a compatible
previous layer has been mined. Thus, all chains grow synchronously.
As blocks are mined on a chain in a layer, honest miners move to
the remaining chains. If all players act honestly, each layer grows
in expected c∆m rounds since the probability a block is mined in a
given round is 1
c ∆
.
5.2 Block Expiry
The block expiry argument for Cliquechain works similarly to the
block expiry argument for Nakamoto’s protocol. The argument
is two part: the first is that Cliquechain’s honest chain growth is
lower bounded by the same bound as Nakamoto’s protocol, thus
this allows us to use the same lowerbound for block expiry.
Lemma 5.1 (Cliquechain Chain Growth). For any δ > 0, the
growth of the main chain of any honest player in an m-chain Cliquechain
protocol in T rounds is at least T (1− δ )
except with probability that drops exponentially in T .
∆(c +µ ) blocks over all chains,
µ
Proof. In the worst case, honest players in Cliquechain all work
on the same chain at all times, i.e. sequentially. Thus the chain
growth is similar to that of a single chain, where all players must
learn of a block in the previous chain before moving on to the
next chain. Thus Cliquechain’s growth is lowerbounded by the
same bound as Nakamoto’s protocol which is the 1-chain version
of Cliquechain.
□
For a block to be included in the main Cliquechain at level L, all
blocks in layers > L must have a path to this block. Thus if a block is
not included in the main Cliquechain at the time it is created, then
as time goes on all future blocks, starting on the next layer, point
to another block an honest player has of the same chain and level.
Thus for Cliquechian we also get the same block expiry lemma as
Nakamoto’s protocol.
Lemma 5.2 (Cliquechain Block Expiry). There exists a δ ∈
(0, 1) such that if µ ≥ δ ρ, then every adversarial block expires.
Proof. Let b be a block mined by the adversary at time r, and
let r +t be the first time any honest player hears of b. The adversary
is mining efficiently so it’s expected number of blocks in T rounds
ρ
T
c ∆
∆(c +µ )
added to it. Starting at the next layer from b, all blocks on b’s web
, while as proven above, any honest web has at least T
µ
Session 4C: Blockchain 1CCS’18, October 15-19, 2018, Toronto, ON, Canada737must point to it, and all blocks on an honest chain’s web with
another block in b′s place, call it b′, must point to b′. So in order
for b to not be able to replace b′ in the honest chain’s web, the
adversary must not have mined more blocks, and created a heavier
web, than any honest web. By a standard Chernoff-Hoeffding bound,
for any δ′ > 0, the probability that the adversarial chain grows by
at least (1 + δ′)T
is at most inverse exponential in T . So, from
Lemma 4.1, we set the parameters such that
ρ
c ∆
.
µ
(c + µ)
>
ρ
c
□
5.3 Convergence Opportunities
Recall that “convergence opportunities” are events at the end of
which all honest players agree on a single chain. A convergence
opportunity has 3 parts: ∆ rounds where no honest player mines a
block, a single honest block mined (termed a ‘hit’), then another ∆
rounds where no honest player mines a block. After a convergence
opportunity in Cliquechain, all honest players agree that the con-
vergence opportunity block is in the longest Cliquechain, and any
blocks they now mine on must be compatible with this block.
Lemma 5.3. At the end of a convergence opportunity (∆ silence +
single honest hit +∆ silence), all honest players in Cliquechain start
working on blocks compatible with the honest hit block.
Proof. Let C be the set of all m-Cliquechains from the blocks
mined which all honest players see after the first ∆ silent rounds,
let h be the player who mines the block in step 2, and C′ the new
set of chains created by the addition of this new block.
1. After the first ∆ silence, the longest layer of any chain in C is
of length L. Player h chooses the largest compatible subset in the
set of all sets of blocks of layer L. If there is not one unique largest
set, h chooses one of the largest sets at random.
2. If the set is of size m, player h mines a block on level L on a
random chain and points it to all blocks in the set. This new block
is now the only L + 1 block, and after the second ∆ silence, all
honest players hear about this block and start working on blocks
compatible with this block.
3. Otherwise, h chooses a chain not in the set and mines a block
which is compatible with the set. This new set is now the unique
largest set and after ∆ silence all honest players hear of this block
and mine blocks compatible with this set.
□
Note that after a convergence opportunity, honest miners now all
agree on level L − 1, and which chains still need to be mined blocks
compatible with level L − 1. A convergence opportunity however
does not differentiate between the case where there are two layer
L blocks on the same chain which point to all the same blocks.
Since these two blocks agree on the previous layer, we still say
we’ve converged on the previous layer. From the above we get that
any convergence opportunity in Nakamoto is also a convergence
opportunity in Cliquechain. Thus we can use the convergence
opportunity count we derived in §4.3. We have already shown that
block expiry in Cliquechain is satisfied under the same conditions
as Nakamoto. Thus, we can extend the consistency theorem of
Nakamoto’s protocol to Cliquechain.
A0
A0
B0
A0
B0
C0
A1
A1
B1
A1
B1
C1
A2
A2
B2
A2
B2
C2
Figure 6: 1, 2, and 3-chain Cliquechain examples where the
solid line represents a block pointing to a parent block in its
chain, and a dotted line represents a block cross-referencing
another chain. Notice 1-chain is simply Nakamoto’s proto-
col. In an m-chain Cliquechain protocol each block at layer
ℓ points directly their parent (the ℓ − 1 block of their chain)
plus references to a block in each m − 1 of the other chains.
1-chain
hit +∆
S0
3-chain
2-chain
∆+Hit + ∆
S0
Hit
S1
hit≤ ∆ +∆
Hit ≤ ∆, +∆
∆+ Hit +∆
S1
∆+ Hit
S2
S0
Hit
A
B
C
Figure 7: Markov chain models capturing the delay attack
on 1, 2 and 3-chain Cliquechain protocols.
Corollary 5.4. Cliquechain satisfies consistency under the same
conditions as stated in Theorem 4.4.
5.4 Cliquechain Consensus Attacks
We evaluate how Cliquechain preforms under a version of the delay
attack of [17]. This attack works on Cliquechain similarly to how it
works on Nakamoto’s protocol. The goal of the adversary is to delay
Session 4C: Blockchain 1CCS’18, October 15-19, 2018, Toronto, ON, Canada738)
n
o
i
t
c
a
r
f
y
r
a
s
r
e
v
d
A
(
ρ
1
2
3
10
1
10
0
Delay attack (1-chain)
Delay attack (2-chain)
Delay attack (3-chain)
Our Consistency Analysis
4
2
1
c (blocktime in terms of network delay ∆)
10
25
60 100
Figure 8: The minimum percentage of computing power
an adversary must hold in order to break consistency for
n = 105, ∆ = 1013, p = 1
c ∆ . We compare the delay attacks
for Cliquechain’s 1-chain, 2-chain and 3-chain models
all honest messages the maximum amount ∆. The adversary’s strat-
egy is to maximize wasted honest work by having honest miners
work on blocks they don’t know have already been mined, there-
fore delaying the growth of the honest chain(s) while the adversary
mines efficiently on their own secret chain(s). With Cliquechain,
this attack is thwarted by the fact that the honest players split their
mining power among all chains, so if a block is mined and delayed
on one chain, the honest miners on the remaining chains that don’t
yet have a block on that level, are not wasting work during that ∆
delay.
To evaluate these attacks we construct Markov models which
represent all possible scenarios of how honest blocks are mined
in a layer of Cliquechain. Crucial to this analysis is the fact that
in Cliquechain no blocks in a new layer can be mined until the
previous full layer is mined. Thus all variations of how a layer is
mined can restart once the full layer has been mined. Figure 7 shows
our Markov models for the 1,2 and 3-chain Cliquechain protocols,
with 1-chain being just the Nakamoto delay attack.
For all models, state S0 represents the state where miners are
mining a fresh new layer, and Si is the state where i chains have a
block at that layer. We say an attack succeeds if the expected time
for the honest players to mine a block in this model is more than
the expected time for an adversary to mine a block efficiently. The
expected time for an honest player to mine a block is the expected
time to leave state S0 and get back to state S0 divided by the number
of chains (i.e. how many blocks were added to the honest full braid).
The 1-chain analysis is just the Nakamoto analysis, we analyze
the 2-chain and 3-chain attack below:
Theorem 5.5. For any δ > 0, the delay attack on the 2-chain
Cliquechain protocol succeeds when
(1 + δ )
2
(l01 + Pr[e10A]l10A + Pr[e10A]l10A) <
1
(1 − µ)p
except with exponentially small probability in the length of the at-
tack.
Proof.
Pr[e01] = 1
Pr[e10A] = (1 − µp)∆
l01 =
1
µp
l10A = ∆ +
Pr[e10B] = 1 − Pr[e10A]
l10B = [
+ ∆
1
µp