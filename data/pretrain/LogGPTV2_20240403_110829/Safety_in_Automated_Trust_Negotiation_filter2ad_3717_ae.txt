certain. Credential-combination hiding does not have this problem because
all conﬁgurations with the same releasable credentials are indistinguishable,
so it does not permit the opponent to rule out any of the conﬁgurations that
induce U(cid:3).
4. APPLYING THE MODEL WITH DELEGATION
We now discuss the application of our model to credential systems that sup-
port forms of delegation common in trust-management languages. Delegation
credentials enable decentralization of authority over attributes and support ad-
ministrative scalability. They are essential to the traditional trust-management
approach to authorization [Blaze et al. 1996], where they allow a single at-
tribute, such as an access right, to be delegated from one principal to another.
However, they can be more general Li et al. [2002, 2003], specifying that having
attribute t1 implies having attribute t2. Here the authority on t2 is delegating
to the authority on t1 some control over who satisﬁes t2.
In this section, we present the TTGstrat family of ATN strategies. Unlike with
the eager strategy, negotiators exchange information about their ack policies
so as to focus their credential disclosures on credentials that are relevant to
the negotiation. In TTGstrat, credentials, ack policies, and AC policies are all
expressed using the language RT0 Li et al. [2002, 2003], which supports del-
egation. TTGstrat is based on the trust-target-graph (TTG) approach of Wins-
borough and Li [2002b], which it generalizes in that the search for successful
branches in the negotiation structure is more ﬂexible.
The main result of this section is that TTGstrat strategies provide credential–
combination hiding. This supports our contention that Deﬁnition 3.4 is a useful
deﬁnition of safety for ATN. It also shows that the use of ack policies enables
negotiators to safely focus one another’s credential disclosures on relevant cre-
dentials, even when using a credential system that supports delegation.
In terms of the framework given in Section 3.1, when the credential system
supports delegation, we capture this by presuming that the credentials directly
represented in the model are those that assign attributes directly to principals
speciﬁed in the credential. These are the only credentials that appear in the
conﬁguration of a negotiator. In the environment, there is also a set L of del-
egation credentials that do not belong to a speciﬁc negotiator, since they can
be used in many proofs that show various principals have a given attribute. In
general, a delegation credential (cid:5) ∈ L asserts that one attribute implies an-
other attribute. Thus, to handle the inferencing problems raised in Section 2,
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
Safety in Automated Trust Negotiation
•
371
when there are delegation credentials, init(G) will return a G in which AckG
protects attributes more strongly than does AckG.
4.1 Conﬁdentiality Assumptions
We make the simplifying assumption that all delegation credentials are avail-
able to the negotiator. If we assume only that delegation credentials are avail-
able to principals that satisfy the attributes deﬁned in the credentials, negotia-
tors cannot safely protect attributes they do not have. When having t1 implies
having t2, it is not possible to hide not having t1 unless one also hides not hav-
ing t2, so the negotiator must be aware of the implication. Thus, it appears
to be inherent that a negotiator cannot effectively negotiate while protecting
all information about an attribute without knowing whether it is at least pos-
sibly related to other attributes he may be asked about in the course of the
negotiation.
The assumption that delegation credentials are available is typically justiﬁed
when attributes are characteristics of subjects or roles that they occupy within
their organizations. For instance, it is unlikely to be private information that a
university delegates to its registrar authority for identifying students. However,
when attributes are capabilities to access speciﬁc resources, there may be times
when delegation of those capabilities are sensitive. If the negotiator does not
have access to all delegation credentials, but has an upper bound for the set,
he can still negotiate safely. However, if this is done, negotiation may fail in
some cases where it would succeed if the negotiator had perfect knowledge of
the delegation credentials. For instance, although a negotiator may not know
it, it may be that an attribute representing a given permission can depend
on other attributes representing the same permission, but cannot depend on
attributes representing something else. Without having this information, safety
would require the negotiator to protect all attributes as strongly as it does the
permission. Thus, it seems that our assumption can be relaxed only at the cost
of having some negotiations fail that would otherwise succeed.
4.2 The Language for Credentials and Policies
We ﬁrst describe the language for credentials and policies. The language is a
subset of RT0 Li et al. [2002, 2003]. Credentials, ack policies, and AC policies
are all expressed using statements in this language.
Constructs of RT0 include principals, attribute names, and attributes. An
attribute name is a string over a standard alphabet. An attribute takes the
form of a principal followed by an attribute name, separated by a dot, e.g., K .r
and K1.r1. (In Li et al. [2002, 2003], attributes are called roles.)
There are three types of statements in our subset of RT0, each corresponding
to a different way of deﬁning attributes. For consistency, we maintain the nam-
ing convention for these three statement types used in Li et al. [2002, 2003]
where further discussion of the intuition behind these statement forms can be
found:
r Type-1: K .r ←− K0
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
372
•
W. H. Winsborough and N. Li
Fig. 2. A credential chain showing that Alice is authorized for EPub’s student discount.
r Type-2: K .r ←− K1.r1
r Type-4: K .r ←− K1.r1 ∩ K2.r2 ∩ ··· ∩ Kn.rn
A credential is a digitally signed type-1 statement. A delegation credential
is a digitally signed type-2 statement. Type-4 statements can be used only for
policies.
Example 5. A ﬁctitious Web publishing service, EPub, offers a discount to
preferred customers of its parent organization, EOrg . EOrg considers students
of the university StateU to be preferred customers. StateU delegates the au-
thority over identifying students to RegistrarB , the registrar of one of StateU’s
campuses. RegistrarB then issues a credential to Alice stating that Alice is a
student. These are represented by four RT0 credentials:
1. EPub.discount ←− EOrg.preferred
2. EOrg.preferred ←− StateU.student
3. StateU.student ←− RegistrarB.student
4. RegistrarB.student ←− Alice
The credential “EPub.discount ←− EOrg.preferred” is read: if EOrg assigns
a principal the attribute “preferred,” then EPub assigns that principal the
attribute “discount.” The four credentials above form a chain, shown in Figure 2,
proving that Alice is entitled to a discount.
In our framework, a policy is a positive propositional formula in which the
propositions are attributes in T . In this section, such a policy is represented by
a dummy attribute drawn from a set TD, a new set of attributes that is disjoint
from T . Dummy attributes are deﬁned by one or more type-2 and/or type-4
statements in which the attributes to the right of the arrow are drawn from
T ∪ TD. Dummy attributes are deﬁned by statements that are assumed to be
locally available to the policy enforcer. Nondummy attributes are deﬁned by
nondelegation and delegation credentials that must be provided to the policy
enforcer. Each nondelegation credential K .r ←− K0 is stored (and protected) by
its subject, K0.
The semantics of the above language can be deﬁned in several equivalent
ways, e.g., using sets, graphs, or logic programming rules Li et al. [2002, 2003].
Here, we present a logical semantics. In this semantics, we use one binary
predicate hasAttr. Each statement is translated into a ﬁrst-order logic sentence.
r From K .r ←− K0 to hasAttr(K0, K .r)
r From K .r ←− K1.r1 to ∀z(hasAttr(z, K .r) ⇐ hasAttr(z, K1.r1))
r From K .r ←− K1.r1 ∩ ··· ∩ Kn.rn to ∀z(hasAttr(z, K .r) ⇐ hasAttr(z, K1.r1) ∧
··· ∧ hasAttr(z, Kn.rn))
Given a set E of nondelegation (type-1) credentials that have the same sub-
ject K0, a set L of delegation (type-2) credentials deﬁning nondummy attributes,
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
Safety in Automated Trust Negotiation
•
373
and a set P of statements deﬁning dummy attributes (type-2 and type-4), T (E)
is the set of attributes K .r such that the ﬁrst-order theory translated from
E ∪ L ∪ P implies hasAttr(K0, K .r).
4.3 A Simpliﬁed Trust Target Graph Protocol
In this section, we introduce a simpliﬁed version of the trust-target graph
protocol introduced in Winsborough and Li [2002b]. We are able to simplify
it, because we are using only a subset of RT0. The protocol accommodates a
diverse family of strategies based on TTGs. While different strategies that
use the protocol may construct a wide variety of TTGs, all strategies per-
mitted by the protocol construct TTGs that soundly demonstrate negotiator
attributes.
In this protocol, a trust negotiation process involves the two negotiators
working together to construct a trust-target graph (TTG). A TTG is a directed
graph, each node of which is a trust target. Trust targets, whose syntax is
given below, are queries issued by one negotiator about the other negotiator’s
attributes. When a requester requests access to a resource, the access mediator
and the requester enter into a negotiation process. The access mediator creates
a TTG containing one target, which we call the primary target. The access medi-
ator then tries to process the primary target and sends the partially processed
TTG to the requester. In each following round, one negotiator receives from the
other new information about changes to the TTG, veriﬁes that the changes are
legal, and updates its local copy of the TTG accordingly. The negotiator then
tries to process some nodes, making its own changes to the graph, which it
then sends to the other party, completing the round. The negotiation succeeds
when the primary target is satisﬁed; it fails when the primary target is failed
or when a round occurs in which neither negotiator changes the graph. In the
next section, we show how the TTG protocol supports the enforcement of ack
policies to protect sensitive attribute information.
4.3.1 Nodes in a Trust-Target Graph. A node in a TTG is one of the three
kinds of trust targets, deﬁned as follows. Nodes are unique.
r A attribute target takes the form (cid:4)K V : K .r ?(cid:2) K S(cid:5), in which K V is (a principal
controlled by) one of the negotiators, K .r is a attribute, and K S is a principal.
K S is the subject of the target, which is the negotiator opposing K V . This
target means that K V wants to see a proof of hasAttr(K S, K .r).
r An intersection target takes the form (cid:4)K V :(K1.r1 ∩ ··· ∩ Kn.rn) ?(cid:2) K S(cid:5). This
means that K V wants to see the proof that hasAttr(K S, K1.r1) ∧ ··· ∧
hasAttr(K S, Kn.rn).
r A trivial target takes the form (cid:4)K V : K S
?(cid:2) K S(cid:5), in which K V is one of the
negotiators, and K S is a principal. Trivial targets provide placeholders for
edges in the TTG.
In each of the above forms of targets, we call K V the veriﬁer, and K S the sub-
ject of the target. Each target has a satisfaction state, which has one of three
values: satisﬁed, failed, or unknown. Each target also has a processing state,
ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.
374
•
W. H. Winsborough and N. Li
which is a pair of Boolean states: veriﬁer- and opponent-processed. Depending
on target type, these are initially either true or false. The processing state of
a target can be changed by the veriﬁer- by setting veriﬁer-processed to true;
similarly for the opponent of the veriﬁer. When the veriﬁer is faithfully execut-
ing the protocol, a node is veriﬁer-processed if the veriﬁer cannot process the
node any further, meaning that the veriﬁer cannot add any new child to the
node via a justiﬁed edge, for instance, because he has no credentials that would
justify the edge. When the opponent of the veriﬁer is faithfully executing the
protocol, a node is opponent-processed if the opponent cannot process the node
any further. When a node is both veriﬁer- and opponent-processed, we say that
it is fully processed.
?(cid:2) K S(cid:5) where i is in 1..n. An intersection edge is always justiﬁed.
4.3.2 Edges in a Trust-Target Graph. Three kinds of edges are allowed in
a trust-target graph, listed below. Each kind of edge has its own requirements
for being justiﬁed. We use (cid:3) to represent edges in TTG’s. Note that the edges
of a TTG form a set, not a multiset.
r An implication edge takes the form (cid:4)K V : K .r ?(cid:2) K S(cid:5)(cid:3)(cid:4)K V : χ ?(cid:2) K S(cid:5), in
which χ is a principal, an attribute, or an intersection. An implication edge
has to end at an attribute target, but can start from any target. We call
(cid:4)K V : χ ?(cid:2) K S(cid:5) an implication child of (cid:4)K V : K .r ?(cid:2) K S(cid:5). (We use similar “child”
terminology for other kinds of edges.) An edge always points from the child
to the parent. An implication edge is justiﬁed if the edge is accompanied by
a credential of the form K .r ←− χ.
r An intersection edge takes the form (cid:4)KV : (K1.r1 ∩ . . . ∩ Kn.rn) ?(cid:2)K S(cid:5) (cid:3) (cid:4)KV :
Ki.ri
r A control edge takes the form (cid:4)K V : K .r ?(cid:2) K S(cid:5)(cid:3)(cid:4)K S : K (cid:3).r(cid:3)
?(cid:2) K V(cid:5). Control
edges are used for handling acknowledgment policies. This edge would be
added by the negotiator controlling K S; intuitively it means that, before this
negotiator will show anything indicating whether K S possesses K .r, it wants
to see a proof that K V possesses K (cid:3).r(cid:3) ﬁrst. A control edge is always justiﬁed.
4.3.3 Messages in the Protocol. As described above, negotiators cooperate
through use of the protocol in constructing a shared TTG, ttg, a copy of which is
maintained by each negotiator. Negotiators alternate transmitting messages,
each of which contains a sequence of TTG update operations and a set of cre-
dentials to be used in justifying implication edges. On receiving a message m,
a negotiator veriﬁes that the update operations it contains are legal before ap-
plying the operations to its local copy of the shared TTG. This is done by using
the Boolean-valued function legalUpdate(m, ttg). The following are legal TTG
update operations:
r Initialize the TTG to contain a given primary TT, specifying a legal initial
processing state for this node. (See below.)
r Add a justiﬁed edge (not already in the graph) from a TT that is not yet in