some degraded service, one has to identify what is exactly
meant by being ”operational” (which services, or which op-
erations under which conditions).
5.1 Partially operational
Figure 4 shows the set of arriving operations during a
given time interval. For a system to be considered fully op-
erational the operations that are invoked by clients have to
be performed together with checking integrity constraints.
If the integrity constraints can be checked, i.e., the system
is not partitioned, then the service is considered operational
even though the constraint may not hold (and thus the op-
eration not performed). If the integrity constraint cannot be
checked, then we are faced with one of two situations. Ei-
ther the integrity constraint is critical, in which case the op-
eration cannot be allowed (the system is non-operational),
or the constraint is non-critical. An operation with an as-
sociated non-critical constraint, which is invoked in a de-
graded mode, can be considered to render a system opera-
tional in the degraded mode. However, this is not the whole
story either. We need to consider what happens to this op-
eration once the degraded mode has ended. In some cases,
the operation will be considered as valid after returning to
the normal (fully consistent) mode of the system, and in
some cases this operation has to be revoked (undone) or
perhaps compensated, since the process of recovering from
the earlier failure has rendered this operation as unaccept-
able. The new metrics thus have to consider appropriate
measures that reﬂect these elements of partial availability
and apparent availability. Another aspect in devising the
set of experiments is a clear parameterisation in terms of
the load; not only in terms of the volume of operations that
Figure 3. Reconciliation example
stop has been sent. Note also that the continuous servers
keep sending the logs until they have sent their acknowl-
edgements of the stop. However, once a stopAck message
has been received from a given server, then no further log
messages will arrive from it. This is to ensure that no oper-
ations are performed during the installation of a new recon-
ciled state. This (short) period is the only interval in which
the system is completely unavailable.
4.1 Example
To illustrate the potential effect of reconciliation as a re-
sult of replaying operations we show a trivial synthetic sce-
nario with one integrity constraint in Figure 3. We use the
application from Section 2, using two objects with an ini-
tial state 3 and 12 respectively. There is a constraint stating
that obj1 + 1 
H is the (worst case) handling rate, TD the partition dura-
tion, d a bound on message and service time, TF the time
until next fault (in these runs the end of the simulation), C
the number of clients, and I the (worst case) invocation rate
for each client. If we put the (average) numbers from our
simulations in this inequality we ﬁnd that the handling rate
must be at least 137 to guarantee termination. In the ﬁgure
we see that termination actually occurs for rates over 100
(indicated by the fact that the CS protocol drops from full
availability to just under 100%).
As the results in Figure 5 only give the apparent avail-
ability (as discussed in Section 5) we need also to compare
the second availability metric, which is how many opera-
tions we have ﬁnally accepted.
In Figure 6 the relative increase of ﬁnally accepted op-
erations compared to the pessimistic approach is plotted
against the handling rate. This graph is based on the same
experiment as Figure 5. The 95% conﬁdence intervals are
within 1% for all measurement points. The optimistic ap-
proaches achieve better as handling rate increases. For large
enough handling rates they give signiﬁcantly better results
compared to the pessimistic approach. The CS reconcilia-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:58 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007]
%
[
s
n
o
i
t
a
r
e
p
O
d
e
t
p
e
c
c
A
y
l
l
a
n
i
F
f
o
e
s
a
e
r
c
n
I
e
v
i
t
a
l
e
R
20
15
10
5
0
-5
-10
-15
-20
-25
-30
continuous
stop-the-world
pessimistic
0
100
200
300
400
500
600
Handling Rate [1/s]
Figure 6. Increase of Finally Accepted Opera-
tions
tion protocol only gives distinctly better results than ”stop
the world” for handling between 100 and 300 operations per
second. However, as the handling rate increases further the
difference becomes marginal.
This plot indicates that an estimate of the average han-
dling rate, based on proﬁling the application, is appropriate
as a guideline before selecting the CS protocol in a recon-
ﬁgurable middleware.
The effect of partition duration There are applications,
like telecommunication, where partitions do occur but a lot
of effort is spent to make them as short as possible so that
acting pessimistically will not cause a big decrease in avail-
ability. In Figure 7 we see the effect that the partition dura-
tion has on the apparent availability. For long enough par-
titions the only approach that gives acceptable results is the
continuous service reconciliation. The conﬁdence intervals
for this graph are within 0.1% for all measurement points.
Both of the optimistic reconciliation protocols consid-
ered here are operation based. That is, they use a log
of operations that were performed in the degraded mode.
One can also perform state-based reconciliation where only
the current state of the partitions is used to construct the
new state. A state based reconciliation scheme might give
equally high apparent availability as the continuous service
protocol but instead it might suffer in terms of ﬁnally ac-
cepted operations [2].
A very interesting metric is the number of revocations
over provisionally accepted operations. This is the propor-
tion of operations that the client thinks have been performed
but which must be revoked/compensated. This is related
to, but should not be confused with, the collision probabil-
ity calculated by Grey et al. [11] to be proportional to the
square of the number of operations. Wang et al. [23] have
investigated the conﬂict rate for ﬁle systems. Common for
these two metrics is that they consider two replicas to be
1.05