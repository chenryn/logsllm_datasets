The next part of developing a network map is to ﬁgure out which
nodes were directly monitored in our switch-level traces. The issue
arises due to a basic ambiguity: if we see communication from MA
to MB, then it could be that the directly monitored hosts were A, B,
both, or neither. Our efforts at such identiﬁcation were signiﬁcantly
complicated by the fact that a number of simple approaches we
tried yielded quite unlikely results, ﬁnding more often than not that
9Note, a complication here arises when an internal host uses an
erroneous IP address. Simple such instances we observed in our
traces are private or self-assigned addresses, arising from dynamic
conﬁguration failures. More subtle cases use legitimate external ad-
dresses, even though the host employing them is operating inside
the enterprise. These appear to come about due to mobile hosts
that dynamically conﬁgured an address when at a location external
to the enterprise, and now attempt to continue to use it rather than
dynamically conﬁguring another address. We can identify such in-
stances by their quite low prevalence, and also by their failure to
engage in productive two-way communication.
150the trafﬁc patterns appeared explainable only in terms of H directly
monitored hosts for H > 5. Such a situation should not arise unless
one of the monitored ports in fact leads to a hidden switch, and we
believed that such switches would not be particularly common.
The approach we eventually developed—a generalization of the
initial simple approaches—works as follows. First, we locate all
ﬂows of the form A communicating with B for which (i) the large
majority of packets (90%) were not replicated, (ii) we similarly
saw mostly non-replicated trafﬁc from B to A, and (iii) at least
5% of the trafﬁc (constituting at least 5 packets) ﬂowed in each
direction.
The goal behind these constraints is to ﬁnd ﬂows for which we
can state with conﬁdence that either A or B must be a monitored
host, but not both. The reasoning proceeds as follows. If A and B
are both non-monitored, then the switch(es) that mediate their traf-
ﬁc should learn forwarding paths between the two, and those paths
by deﬁnition do not include our monitored ports. We should only
see packets for their ﬂows in those instances where the switches
lack a forwarding entry for the destination; thus, any instances of
their packets that appear in our traces should be replicated, violat-
ing (i).
In addition, we know that it is not the case that both A and B
are monitored hosts (assuming no hidden hubs, a point we return to
below) because if they were then the strong majority of the pack-
ets between the two would appear twice in the trace, once for each
monitored port. Indeed, we locate such “doubly-monitored” ﬂows
by ﬁnding those for which a replication level of 2 copies predomi-
nates (≥ 75% of packets). These are present in 34% of our traces.
Finally, we employ a simple form of graph coloring employing
two colors, red and green, as follows. We construct a graph G
where for each bidirectional ﬂow between an A and B that satis-
ﬁes (i), (ii) and (iii) above, we place an edge between nodes that
represent the two systems. We ﬁrst color red the nodes correspond-
ing to the routers we identiﬁed in § 6.1, and green any nodes to
which they have edges. (All traces had at least one router present
in them.) We then recursively continue coloring in this fashion,
alternating between red and green every time we traverse an edge.
If we arrive via an edge at a node that we need to color red, but
the node is already green, or vice versa, then we have detected an
inference inconsistency, and we abort. When done, we also check
to ensure that any nodes corresponding to doubly-monitored ﬂows
were both colored green.
At the end of this process, we have a collection of nodes col-
ored red, which reﬂect non-monitored nodes (since they reside in
an equivalence class with a router, and we have high conﬁdence
that the monitoring didn’t include a link to the router); green, re-
ﬂecting monitored nodes; and uncolored, reﬂecting nodes that were
unreachable from the original set seeded by the router’s ﬂow ac-
tivity (i.e., G has disconnected components). We could in prin-
ciple color these disconnected components too, though we would
not know in that case which color corresponds to monitored hosts
vs. non-monitored ones. However, these occur in only 6 traces,
in each case for very small components. We discuss treatment of
these uncolored nodes below.
In none of the traces did this approach produce a coloring in-
consistency. This gives us additional conﬁdence that the approach
does indeed uncover a basic facet of the monitoring layout; i.e., the
green hosts very likely do correspond to monitored hosts.
A ﬁnal conﬁrmation in this regard, albeit an unexpected one, was
our discovery that the deduction process often ﬂagged the same
MAC addresses in consecutive traces recorded by the same aggre-
gation interface on the monitor device. This behavior manifested
primarily on traces captured over a weekend, and has a natural ex-
s
t
s
o
H
d
e
r
o
t
i
n
o
M
#
0
0
2
2
5
5
1
1
0
0
1
1
5
5
0
0
oooooooooooo
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
ooo
o
o
o
o
o
o
o
o
o
o
o
o
o
o
ooooo
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
oo
ooo
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
o
oooo
o
Trace (2005/2006)
Figure 5: Deduced monitored hosts per trace: number seen
concurrently (grey), total (black), observed replication level
(circles).
planation that for the second trace, the operators did not in fact
move the taps to a new set of ports.
Having done this work to deduce the number of monitored hosts
per trace, we now face a conundrum, as illustrated in Figure 5. Here
we plot for each trace the total number of monitored (green) nodes.
For those traces with uncolored nodes, we add half (rounded down)
of their total number, since the disconnected component represents
at least that many monitored nodes. (For example, if the component
shows hosts A and B both communicating with C, then either A
and B are monitored, or C is.) Doing so only adds one deduced
node to each of 3 traces.
The bars on the left of the plot reﬂect traces from 2005, which
each tapped 4 ports. The righthand group, from 2006, tapped
5 ports per trace. The plot includes horizontal lines showing these
cutoffs. Finally the circles in the plot reﬂect the largest replication
level seen for each trace.
The conundrum arises from the fact that for the majority (55%)
of the traces, we deduce more monitored hosts than tapped ports.
This number further rises to 67% if we consider instances where we
deduced more monitored hosts than the largest observed replication
level.
This mismatch perturbed us. It implies either (a) we somehow
are seeing unreplicated packets for ongoing communication be-
tween two non-monitored hosts, indicating that our understanding
of switch operation is incorrect; (b) end systems employ multiple
MAC addresses when using a single network link; (c) at differ-
ent times, different end systems are plugged into the same network
link; (d) the network operator performing the monitoring moved
the taps to different switch ports during the middle of tracing; or
(e) our links did not connect to end systems but instead to net-
work segments shared among multiple hosts via hidden switches
or hubs. We cannot directly assess the likelihood of (a). We ﬁnd
(b) quite unlikely to occur often enough to affect the majority of
traces. Similarly, while (c) will likely sometimes occur, it struck
us as implausible that it would do so frequently enough to cause
the observed overrun of monitored hosts, particularly for the larger
counts, and similarly for (d). While it would not be surprising to
ﬁnd (e) occurring, the impression we had formed was that for the
LBL network it too would be an occasional, rather than dominant,
effect.
151We set out to test (c) by splitting each trace into 15-minute in-
tervals and counting for each interval the number of deduced moni-
tored hosts that appeared active in both that interval and the one im-
mediately following it. We consider such hosts as simultaneously
active, and therefore unable to reﬂect different systems plugged
into the same link at different times. We then looked for the 15-
minute interval in the trace that had the maximum number of such
concurrent host activity.
Figure 5 shows these maximum values in grey, drawn over the
total number of deduced monitored hosts, which we show in black.
The fact that the plot appears virtually entirely as grey bars thus
indicates that for almost all traces, all of the deduced monitored
hosts appeared together. This ﬁnding conclusively rules out (c).
In the process of examining 15-minute epochs, we also com-
puted over what proportion of all of a trace’s 15 minute intervals
did each monitored host appear active. We found that in all but 5 of
the traces, there was at least one monitored host that appeared ac-
tive during every 15-minute interval, and in only two traces (both
very lightly loaded) did the most active monitored host appear in
less than 75% of the intervals. Thus, we also can conclusively rule
out (d).
This then leads us to the problem of considering whether (e)
(widespread use of hidden switches/hubs) indeed explains the dis-
crepancies in Figure 5, or if we must consider the seemingly very
unlikely explanations of (a) or (b).
6.3 Detecting Hidden Switches and Hubs
We now turn to the problem of determining whether our mon-
itored ports in fact frequently (more than half the time) included
links that run not directly to individual end systems, but instead
to “hidden” switches or hubs that provide connectivity to multiple
end systems. If we cannot establish the frequent presence of such
hidden elements, then we are forced to consider alternative, seem-
ingly quite implausible, explanations for the excessive number of
apparently monitored hosts in Figure 5.
This is a difﬁcult problem, since we lack the ability to associate
a given MAC address directly with a given switch port. However,
we eventually devised the following methodology for detecting the
presence of some (not all) instances of hidden elements. Our key
observation is that if our traces often include hidden elements, then
during the recording of at least some our traces communication
probably occurred between hosts A and B, both of which com-
municate directly using the hidden element.
If the hidden element is a hub, then due to its broadcast nature
we will see a copy of the trafﬁc between A and B on the monitored
link. This in turn will lead us to create an edge between the nodes
corresponding to A and B in the graph G we devised in § 6.2, and
thus we would discover a graph-coloring inconsistency (either A
or B could be colored green, but not both). However, we did not
discover any such inconsistencies, which gives us conﬁdence that
our traces do not include numerous hidden hubs.10
Detecting hidden switches, however, presents a more difﬁcult
problem. If A and B connected to the hidden switch communi-
cate directly, then the switch might not replicate any of their trafﬁc,
or at best only their initial packets, so we will have little opportu-
nity to observe the activity on the tapped port. However, we can
infer such communication as follows. Whenever two hosts begin
communicating via IP for the ﬁrst time—or after a lengthy lull or
a reboot—each will generate an ARP request for the other. These
10It is possible for a given trace that A and B both reside in an
unconnected component of G, and hence were not colored at all.
However, we know that very few traces had such components, and
therefore there are at most just a few hidden hubs.
requests are normally broadcast, since the whole point of needing
to use ARP is that neither A nor B know what MAC address to
associate with the other. However, replies to ARP requests come
back to the requester via unicast. In addition, normally the initial
ARP request will have provided the switches between A and B
with awareness of MA (A’s MAC address), and thus the switches
will not replicate the ARP reply.
These dynamics then lead to the observation that if A and B
connect to a hidden switch, then when they communicate with one
another we will sometimes see A sending ARP requests for B, and
likewise B sending ARP requests for A—but we will not see ARP
replies in either case. We see the requests due to their broadcast
nature; the hidden switch replicates the request onto the monitored
link. But the replies will proceed directly back through the switch,
without replication onto the link.
We can therefore sometimes detect hidden switches in the pres-
ence of such intra-switch communication by identifying instances
where a host A sends an ARP request for a host B, for which we
do not see a reply; and host B likewise sends an apparently unan-
swered request for A. If from graph coloring we have that both A
and B are green, then we can say with high conﬁdence that both
reside behind a hidden switch: we know that both are located on
a monitored port due to their (separate) communication with exter-
nal hosts, and thus were they not behind a hidden switch we should
have seen the corresponding ARP replies. If both A and B are red
then we know they both reside externally (this will be a common
case when we see only the broadcasted ARP requests, but not the
unicasted ARP replies). Finally, if one is green and the other red,
then we have discovered an inconsistency. (This last did not in fact
occur.)
This procedure presents one difﬁculty, however. We do not di-
rectly observe “host A” sending an ARP request for “host B”.
Rather, we observe MA sending an ARP request for IB. Since
we do not see the reply, we do not directly obtain the pairing of
IB with MB, and therefore cannot immediately match the ARP
request from MB for IA as the other half of the communication
setup between A and B. We address this consideration by gener-
ating for each trace a mapping of all MAC/IP address pairs seen in
any IP packets (whether as source or destination). We then look for
any instance where MA makes an unanswered ARP request for IB,
for which a MAC address M(cid:2)
B seen associated with IB also sent an
unanswered ARP request for I(cid:2)
A, an IP address seen associated with
MA.
Applying this approach, we ﬁnd that 14 traces manifest such
communication setup between a pair of green hosts, with half of
those including more than one pair of intercommunicating hosts.
We accordingly conclude that hidden switches are not that uncom-
mon in our traces.
Furthermore, our ﬁnding of 14 instances is an underestimate, be-
cause it requires that a pair of the hosts connected to the hidden
switch not only happened to communicate with one another dur-
ing the tracing period, but also had to refresh their ARP caches
for each other. Above in § 6.2 we found that 34% of traces in-
cluded doubly-monitored ﬂows between pairs of monitored hosts.
(These hosts are not behind hidden switches, as we see two copies
of the packets of the ﬂow, indicating that the hosts reside on sepa-
rate monitored ports.) We might then roughly estimate that among
a group of hosts connected to a switch, during a day-long period
only about a third of the time does one of the hosts attached to
the switch communicate with another host attached to the switch.
If that rate happens to hold for hosts connected to hidden switches
too, then the 14 instances we observe might be only about a third of
the total (less, in fact, due to our need for the hosts to ARP for one