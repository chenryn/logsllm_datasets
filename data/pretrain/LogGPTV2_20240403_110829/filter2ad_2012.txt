# Policy Transformation in Software-Defined Networks

**Authors:**
- Nanxi Kang
- Joshua Reich
- Jennifer Rexford
- David Walker

**Affiliation:**
Princeton University

**Emails:**
- {nkang, jreich, jrex, dpw}@cs.princeton.edu

## Abstract
Software-Defined Networking (SDN) enforces network-wide policies by distributing packet-handling rules across a set of switches. Current SDN platforms require programmers to manually decompose high-level policies into low-level switch rules. We propose that future SDN platforms should support automatic policy transformation, enabling the movement, merging, or splitting of rules across multiple switches. This would simplify programming by allowing policies written for a single abstract switch to run on more complex topologies and facilitate analysis by consolidating distributed policies into a single rule list. This poster presents our ongoing work on developing a sound and complete set of axioms for policy transformation, ensuring the preservation of forwarding behavior while rewriting rules across multiple switches. These axioms are essential for creating and analyzing algorithms for optimizing rule rewriting.

## Categories and Subject Descriptors
C.2.m [Computer-Communication Networks]: Miscellaneous

## Keywords
- Software-defined networks
- Network virtualization
- OpenFlow

## 1. Introduction
The Software-Defined Networking (SDN) paradigm enables flexible programming of packet-switched networks. OpenFlow [2] is a key SDN building block, providing a standardized protocol for controllers to interact with switches, including installing rules, querying traffic counters, and directing packets for further processing. Current controller applications manage the network at the individual switch level. However, a truly powerful SDN system should allow reasoning about the cumulative effect of rules installed across multiple switches on packet traversal.

Our goal is to address this challenge by developing a framework for global policy transformation. This framework will enable moving, merging, and splitting rules across multiple switches while preserving the overall forwarding behavior. Using this machinery, policies written for a single switch can be distributed across a set of switches, and policies already distributed can be consolidated. This is important for several reasons:
- **Resource Usage:** Policies too large for a single switch can be distributed.
- **Ease of Programming:** Policies for a single switch are easier to write.
- **Portability:** Policies written for one topology can be transformed to run on another.
- **Analysis:** Distributed policies can be consolidated into a single list for easier verification.

Our aim is to enable SDN controllers to transform policies automatically, shielding programmers from the details. Previous research has focused on firewall policies, such as minimizing access control lists [1] and analyzing the correctness of distributed firewalls [4]. Our work is the first to examine the general problem of network-wide policy transformation.

We identify two critical challenges:
- **Correctness:** Each packet must be treated under the transformed policy exactly as it would under the original policy.
- **Efficiency:** Transformed policies should minimize the total number of rules, the maximum number of rules on any switch, and ensure no switch overflows its capacity.

We plan to address these challenges by developing a general-purpose policy rewriting framework that characterizes all possible, sound policy transformations. This framework will provide a formal foundation for analyzing the correctness of specific policy rewriting algorithms.

## 2. Policy Transformation
### 2.1 Policy Categories
A policy is a collection of packet-forwarding rules, where each rule \( r \) is a (pattern, action) pair. Patterns include exact-match, wildcard, and prefix-match patterns. If pattern \( p \) matches a smaller set of packets than \( p' \), we write \( p \subseteq p' \). Actions include forward, drop, and modify.

- **Single-Switch Policy:** A list \( l = r_1, r_2, \ldots, r_n \) of rules, ordered by decreasing priority. The action for a packet \( h \) is determined by scanning the list from left to right until a matching rule is found.
- **Chain-of-Switches Policy:** A list of single-switch policies \( c = l_1; l_2; \ldots; l_m \). Switch chains can model both cascading flow tables within a switch and a series of switches.

The semantics of a policy \( P \) relative to a packet \( h \), denoted \( P[h] \), is the set of observable actions applied to the packet as it traverses the network.

### 2.2 Policy Rewriting
Policy rewriting is specified via a collection of simple, local rewriting axioms. These axioms can be composed to produce arbitrary, semantics-preserving transformations. For example, the Shadow axiom:

\[
\frac{p_2 \subseteq p_1}{(p_1, a_1), (p_2, a_2) \leftrightarrow (p_1, a_1)}
\]

This states that if pattern \( p_2 \) is a subset of \( p_1 \), the adjacent rules \( (p_1, a_1), (p_2, a_2) \) can be rewritten to \( (p_1, a_1) \), and vice versa. The Congruence axiom allows local rewrites to be applied in a larger context:

\[
\frac{l_2 \leftrightarrow l_2'}{l_1, l_2, l_3 \leftrightarrow l_1, l_2', l_3}
\]

Additional axioms for single-switch policies include Reordering and Join. Switch-chain rewriting uses these axioms to optimize individual switches and additional axioms for shuffling functionality along the chain.

### 2.3 Soundness and Completeness Properties
A good rewriting system should satisfy:
- **Soundness:** Any combination of rewriting axioms produces a semantically equivalent list of rules.
- **Completeness:** Any semantically equivalent policy can be produced by applying the axioms.

Formally:
- **Soundness:** If \( P_1 \leftrightarrow P_2 \), then for all packet headers \( h \), \( P_1[h] = P_2[h] \).
- **Completeness:** If for all packet headers \( h \), \( P_1[h] = P_2[h] \), then \( P_1 \leftrightarrow P_2 \).

We have proven the soundness and completeness of our rewrite system for single-switch policies and the soundness of our system for switch-chains. Future work includes proving completeness for switch-chains and extending to richer topologies like trees and DAGs.

### 2.4 Ongoing Work: Optimization Algorithms
Our rewrite system describes the search space for optimization algorithms and provides a framework for analyzing their correctness. The next phase involves developing multi-phase algorithms for generating optimized, global network policies:
1. A heuristic algorithm to distribute global policy to specific switches.
2. Balancing across neighbors via switch-to-switch rule movement.
3. Optimization on individual switches.

## 3. References
[1] D. L. Applegate, G. Calinescu, D. S. Johnson, H. Karloff, K. Ligett, and J. Wang. Compressing rectilinear pictures and minimizing access control lists. In ACM-SIAM SODA, pages 1066–1075, 2007.

[2] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and J. Turner. OpenFlow: Enabling innovation in campus networks. SIGCOMM Computer Communications Review, 38(2):69–74, Mar. 2008.

[3] C. R. Meiners, A. X. Liu, and E. Torng. TCAM Razor: A systematic approach towards minimizing packet classifiers in TCAMs. IEEE/ACM Trans. Netw., 18(2):490–500, Apr. 2010.

[4] L. Yuan, J. Mai, Z. Su, H. Chen, C.-N. Chuah, and P. Mohapatra. FIREMAN: A toolkit for firewall modeling and analysis. In IEEE Symposium on Security and Privacy, pages 199–213, 2006.