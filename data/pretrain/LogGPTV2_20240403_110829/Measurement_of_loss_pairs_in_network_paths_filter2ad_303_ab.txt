j
j
and d(h)
j−1 as
j−1 (cid:17) + (cid:16)t(h+1)
j−1,j + d(h)
j−1.
= (cid:16)t(h+1)
= τ (h+1)
− t(h+1)
j
j−1 − t(1)
j−1(cid:17) ,
90100Mbits/s
Ethernet switch
Linux
router
Forward path
H(1)
H(2)
H(3)
H(4)
H(5)
H(6)
H(12)
Probe
sender
S1
X1
R1
H(11)
H(10)
S2
X2
R2
H(9)
H(8)
Reverse path
Probe/response traffic
Cross traffic
S3
X3
H(7)
Web
server
Cross-traffic
client
Figure 3: The testbed for the loss-pair experiments.
For this set of experiments, except for H (5), we did not
generate cross traﬃc for other hops (i.e., w(h)
j = 0, ∀h 6=
h′, in Eqns. (4) and (5)). We ran HTTP/OneProbe from
the probe sender to dispatch a sequence of 5000 Poisson-
modulated probe pairs with a mean probing rate of 5 Hz.
The probe sender was equipped with a DAG 4.5 passive
network monitoring card [1] to obtain the RTT samples in
microsecond resolution which is limited by the pcap header
structure [2]. Similar to [26], the cross-traﬃc sources entered
Pareto-distributed ON and OFF states with a shape α = 1.9
and had a ﬁxed packet size of 1500 bytes.
(4)
300 milliseconds
LP
01
LP
10
311 milliseconds
4.2 Analyzing the residual packets’ delays
In the following, we consider a packet in {pj−1, pj} being
dropped at H (h′) and the other packet delivered successfully.
Thus, the loss pair is either an LP10 or LP01. We also assume
that the packet losses are due to node congestion. We obtain
their residual packets’ delays by including the queueing delay
incurred from each hop. For the LP10, it is also important
to include pj−1’s delay on the ﬁrst h′ − 1 hops.
4.2.1 LP10
To obtain pj’s delay for the LP10, we ﬁrst apply Eqn. (1)
recursively until reaching the (h′ − 1)th node (since pj−1 is
discarded at the h′th node):
j = d(h′−1)
d(n)
j
+
n
X
h=h′
(cid:16)w(h)
j + X (h) + T (h)(cid:17) .
(3)
By using Eqn. (2) for d(h′−1)
recursively for d(h′−1)
, we obtain
j
j−1
and then applying Eqn. (1)
d(n)
j
= d(h′−1)
j−1 + τ (h′)
j−1,j +
n
X
h=h′
(cid:16)w(h)
j + X (h) + T (h)(cid:17) ,
=
h′−1
X
h=1
w(h)
j−1 +
n
X
h=h′
j + τ (h′)
w(h)
j−1,j +
n
X
h=1
(cid:16)X (h) + T (h)(cid:17) .
In addition to the queueing delay at all the nodes [31],
Eqn. (4) also shows that the residual packet’s delay contains
τ (h′)
j−1,j which, as will be seen shortly, depends on a number
of delay components in the preceding hops.
4.2.2 LP01
To obtain pj−1’s delay for the LP01, we apply Eqn. (1)
recursively for d(h)
j−1 to obtain
d(n)
j−1 =
n
X
h=1
w(h)
j−1 +
n
X
h=1
(cid:16)X (h) + T (h)(cid:17) .
(5)
Since the ﬁrst packet is the residual packet, its delay is not
aﬀected by the second packet and does not contain τ (h′)
j−1,j .
4.2.3 Testbed experiments
We conducted testbed experiments to evaluate the im-
pact of τ (h′)
j−1,j on the residual packet’s delay. The testbed,
shown in Figure 3, was conﬁgured with a 12-hop round-
trip path (n = 12), consisting of a probe sender, a web
server running Apache v2.2.3 as the destination node, three
cross-traﬃc clients X1 −X3, and ﬁve forwarding devices: two
Linux 2.6.26 routers R1 −R2 and three 100 Mbits/s Ethernet
switches S1 − S3. We designated H (5) (R2 and its link to S3)
to be the only congested node on the path (i.e., h′ = 5). We
achieved this by running TC/Netem [22] in R2 to emulate
C (5) = 50 Mbits/s and a FCFS queue to accommodate ap-
proximately 100 ms of packets, and generating forward-path
cross traﬃc (from X2 to X3) to congest H (5). Moreover, we
designated H (3) (R1 and its link to S2) to be a bottleneck
link by conﬁguring Click v1.8 [29] in R1 to emulate C (3) = 1
Mbit/s. The Click router was also conﬁgured to set the RTT
between the probe sender and web server to 200 ms.
y
t
i
s
n
e
d
y
t
i
l
i
b
a
b
o
r
P
0.4
0.2
0
0.3
0.31
0.34
RTT (seconds, 1 millisecond bins)
0.32
0.33
0.35
Figure 4: Residual packets’ delays for LP10 and LP01
with S = 1500 bytes on the testbed for which C (3) = 1
Mbit/s, C (h′) = 50 Mbits/s, and h′ = 5.
Figure 4 shows the distributions of the residual packets’
delays for the LP10 (i.e., P10xR00) and LP01 (i.e., P01x–)
with S = 1500 bytes. Similar to [31], we applied a small bin
size of 1 ms to mitigate the noise introduced by the non-
congested hops. The ﬁgure shows that the residual packets’
delays are dominated by the congested node’s queueing delay
of 100 ms, because most of them center around 300 ms and
311 ms for the LP01 and LP10, respectively. We also note
that many delay samples for the LP10 include an additional
quantity of 11 ms which, according to Eqn. (4), came from
τ (h′)
j−1,j . Unlike other noises, this quantity cannot be ﬁltered
out by choosing a small bin size.
4.3 Characterizing the congested node’s state
4.3.1 LP10
A packet is dropped at H (h′) when the node’s buﬀer is
full after the instantaneous input traﬃc rate exceeds C (h′)
for some time. We let {Q(h)(t), t ≥ 0} be the continuous-
91time process of its queue length in terms of bits, and Q(h)
Q(h)(t(h)−
pj). When {pj−1, pj} is an LP10, we have
j =
) (i.e., the queue length just prior to the arrival of
j
Q(h′)
j−1 + S > B(h′), and
j + S ≤ B(h′),
Q(h′)
where
j = (cid:16)Q(h′)
Q(h′)
j−1 + A(h′)
j−1,j − D(h′)
j−1,j(cid:17)+
(6)
(7)
,
(8)
j−1,j is the amount of packets (in
j−1, t(h′)
),
j−1,j is the total amount of packets (in bits) departed
). Therefore, the queueing
and (x)+ = max{0, x}. A(h′)
bits) arriving to and buﬀered at the queue during (t(h′)
and D(h′)
from the node during [t(h′)
delay of pj at H (h′) can be expressed as
j−1, t(h′)
j
j
hand, according to Eqn. (8), Q(h′)
A(h′)
gestion may be relieved by the time pj arrives.
j−1,j and τ (h′)
j−1,j ≪ D(h′)
j
j−1,j becomes large, because the con-
could be dampened when
4.3.2 LP01
The analysis for the LP01 is similar to the above. When
{pj−1, pj} is an LP01, we have
Q(h′)
j−1 + S ≤ B(h′), and
j + S > B(h′),
Q(h′)
where
j = (cid:16)Q(h′)
Q(h′)
j−1 + S + A(h′)
j−1,j − D(h′)
j−1,j(cid:17)+
(12)
(13)
.
(14)
By replacing w(h′)
j−1 with a similar expression as Eqn. (9),
we obtain pj−1’s path queueing delay, deﬁned by Θj−1 =
d(n)
j−1 − min∀i, j=2i{d(n)
j−1}:
w(h′)
j
=
j
Q(h′)
C (h′) + R(h′)
j
,
(9)
Θj−1 =
j−1 + ζj−1,
(15)
where R(h′)
j
is the residual service time upon pj’s arrival.
Moreover, τ (h′)
j−1,j , h′ > 1, can be expressed as [38]:
τ (h′)
j−1,j = X (h∗) + q(h∗)
j−1,j +
h′−1
X
h=h∗+1
(cid:16)w(h)
j − w(h)
j−1(cid:17) ,
(10)
where H (h∗), 1 ≤ h∗ ≤ h′ −1, is the last hop preceding H (h′)
for which pj arrives before pj−1’s full departure from the
node. That is, both belong to the same busy period of the
queue at H (h∗) [38]. Moreover, q(h∗)
j−1,j is pj’s queueing delay
at H (h∗) due to intervening cross traﬃc arriving between
pj−1 and pj, and X (h∗) is the time for transmitting pj at
H (h∗).
For the purpose of estimating Q(h′)
/C (h′), it is useful to
consider pj’s path queueing delay deﬁned by Θj = d(n)
j −
min∀i, j=2i{d(n)
j−1}. Assuming that the minimum observable
delay of pj−1, j = 2i, i = 1, 2, . . . , precludes the cross-
traﬃc-induced queueing delay and using Eqns. (4), (9), and
(10), we have
j
Θj = d(n)
j −
n
X
h=1
(cid:16)X (h) + T (h)(cid:17) ,
=
j
Q(h′)
C (h′) + R(h′)
j−1+q(h∗)
j + X (h∗ ) + ζj,
(11)
h=1 w(h)
where ζj(= Ph∗
j
is the queueing delay contributed by the cross traﬃc present
at H (h′)’s upstream and downstream hops.
j−1,j +Ph′−1
h=h∗+1 w(h)
j +Pn
h=h′+1 w(h)
j
From Eqn. (11), Θj can be used to estimate Q(h′)
/C (h′),
and the estimation is biased by the residual service time,
X (h∗), and cross traﬃc. Furthermore, Q(h′)
/C (h′) is a good
approximation for Q(h′)
j−1/C (h′) under certain conditions. For
instance, when τ (h′)
j−1,j is small enough and Eqn. (7) still
holds, Q(h′)
j−1, thus mak-
ing Q(h′)
a tight lower bound for B(h′) − S. As a result,
if Q(h′)
j + X (h∗) + ζj and B(h′) ≫ S, then
Θj ≈ B(h′)/C (h′) which was ﬁrst given in [31]. On the other
is expected to be very close to Q(h′)
/C (h′ ) ≫ R(h′)
j
j
j
j
Q(h′)
C (h′) + R(h′)
j−1
j−1 + Pn
h=1 w(h)
where ζj−1 = Ph′−1
j−1 is the
residual service time upon pj−1’s arrival. Unlike the LP10,
the LP01’s path queueing delay does not contain X (h∗), and
ζj−1 contains fewer components.
j−1 and R(h′)
h=h′+1 w(h)
To estimate B(h′)/C (h′) by the LP01, note that Q(h′)
j−1 serves
j
j−1,j
if A(h′)
as a tight lower bound for Q(h′)
j−1,j is close to D(h′)