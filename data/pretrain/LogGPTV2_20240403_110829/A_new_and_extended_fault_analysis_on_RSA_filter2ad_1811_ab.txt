(3)
Figure 3: An extension of fault analysis on RSA.
( (cid:22)S(cid:1)k−1∏
k−1∏
For Eq.(3), we could recover the key as follows.
md[i]2iw
)e = ((
md[i]2(i(cid:0)j)w
)(cid:1)md[j]2p(cid:6)2f )e2jw(cid:0)p(cid:1)m
i=j
i=j+1
(7)
Assuming that the correct values for dk−1, f and p are
known, we can recover window bits d[j] one by one by search-
ing for all triples [d[j]; f; p] that satisfy Eq.(7), then the
whole key d will be got by repeating this attack. For Eq.(4),
we need not consider the parameter p. The (cid:13)ow of the pri-
vate key is shown in Fig.2.
3.3 An Extension of Fault Analysis on RSA
The former analysis algorithms are all based on the as-
sumption that the fault location and length were known.
However, these parameters are not necessarily known in
practice; we have to guess the bits of key by exhaustive
searching. When we want to recover dj, but the fault does
not occur at the jth multiplication operation, the preceding
fault analysis algorithm would not work. Similarly, we can
not control the fault location at the jth window operation
for d[j] window bits. Therefore, we suggest an extension of
fault analysis on RSA.
The core of the extending analysis algorithm is that we
guess the secret key segment by segment instead of bit by
bit, as shown in Fig.3.
Assuming that the fault occurs at the (n (cid:0) j)th step and
the value of the (n(cid:0) j(cid:0) 1)th bit were unknown, but we want
to recover d(k−1), the fault signature is as follow:
(cid:22)S = (mdk(cid:0)1 (cid:6) 2f )2(n(cid:0)j) (cid:1) j−1∏
( (cid:22)S (cid:1) k−1∏
mdi2i
i=0
mdi2i
∏
)e = (mdk(cid:0)1 (cid:6) 2f )e2(n(cid:0)j) (cid:1) m
We can multiply both sides of Eq.(8) by
k−1
i=j mdi2i
raise both sides to the public exponent e and obtain:
(8)
, then
(9)
i=j
468
^dn-1dn-2(cid:258)dn-wdn-w-1(cid:258)d1d0[1]dk^[2]dk(cid:258)(cid:258)...^[0]dRSA Private key d^dn-1dn-2(cid:258)dn-jdn-j-1(cid:258)d1d0(1)kd^(2)kd(cid:258)(cid:258)...^(0)dRSA Private key dWe can recover d(k−1) that satis(cid:12)es equation (9) by exhaus-
tive searching for key segment d(k−1) and f , and (cid:12)nally get
the whole key by repeating this process.
There is also an extension of fault analysis on RSA FWE
implementation. If the bit-(cid:13)ip fault could not be injected
into the jth window operation, we can enlarge the size of
window bits and consider the jth and (j (cid:0) 1)th window bits
at the same time. The analysis algorithm is the same as the
situation of one window. The only di(cid:11)erence is that the size
of window w is enlarged twice or more. We do not discuss
the analysis algorithm here, as it is similar to the former one
.
Furthermore, when recovering one segment of the secret
key needs searching all values over d(j) and j, brute-search
of all possible solutions is needed, so these works could be
done with distributed calculation to improve the e(cid:14)ciency.
4. EXPERIMENT RESULTS AND COMPLEX-
ITY ANALYSIS
4.1 Implementation Algorithm and Experiment
Result
On ordinary PC, we implemented RSA LRE and FWE al-
gorithms with BIGNUM function of OpenSSL (v0.9.8i), The
fault analysis algorithm was programmed with VC++ 6.0.
LRE was implemented using BN mod exp mont consttime()
function, and the BN mul() was used to achieve multiplica-
tion operation. FWE was implemented using BN mod mul
montgomery(), which has more e(cid:14)ciency due to the adop-
tion of Montgomery Multiply Algorithm. The fault was in-
jected as described in Section 3.
In our experiments, as the fault was a single bit (cid:13)ip, we
mainly considered the situation from 1 to 0 or from 0 to
1, which was consistent with (cid:6)2f of the preceding equa-
tions. The faulty signature was gotten by injecting a single
bit fault into the result of multiplication during the special
process. The secret key can be recovered using fault anal-
ysis algorithm or the extended analysis algorithm. We can
recover the whole RSA private key via repeating many ex-
periments. In order to compare and analyze the result, we
attacked the RSA with 512-bit private key and 1024-bit pri-
vate key respectively. At the same time, in order to get the
opportunity of fault injection more accurately, we get the
total time of signature and the time of Montgomery Multi-
plication operation under the condition of random private
key. We (cid:12)nd that the longer the length of the private key
is, the longer the execution time is; the consuming time of
multiplication will increase as modulus increases. The (cid:12)xed
window algorithm is more e(cid:14)cient than "square-multiply"
algorithm.
Supposing that we have known the top j (cid:0) 1 bits of d, in
order to get the jth bit of d, we perform the fault analysis
algorithm on "Square-and-Multiply" algorithm as follows.
t h e top j (cid:0) i b i t o f d
Algorithm 2: The fault analysis algorithm of getting dj.
S e a r c h ( dj; m; d(j (cid:0) 1); n; e ) :
//d(j (cid:0) 1) d e n o t e s
(cid:22)S=myerrorLRBN exp(m; d; n; j) ;
d(j) = (d(j (cid:0) 1); 1) ;
// B N l s h i f t (d(j); d(j (cid:0) 1); 1) , B N s e t b i t (d(j); 0)
F or(i = 0; i , we can select the faulty sig-
nature via public key e to detect whether it is correct or
not. Then we match the corresponding equation by analyz-
ing algorithm to select the pair of message signature with
only one bit fault. As the relationship between the selected
pairs of message and fault injection is unknown, we must
analyze the entire messages that have not been analyzed.
The consuming time in a practical attack is longer than in
the simulation experiment. In 2010, Andrea Pellegrini et.al
recovered 1024 bits private key on RSA in about 104 hours,
using 81 PCs to parallel execute and OpenMPI library to
compute distribute[9], but they only attack the RSA FWE
implementation. In addition, other RSA implementations,
such as "Right-to-Left" square and multiplication and sliding
window exponentiation algorithm, also have such vulnerabil-
ity. The results in our study will also be bene(cid:12)cial to the
analysis of the same type of other public cryptography.
5. CONCLUSIONS
In this paper, based on the principle of the fault attack
on RSA, we have analyzed the situation when a single bit-
fault is injected into the multiplier during RSA signature,
and proposed a new fault analysis on RSA signature based
on the fault in multiplier. We theorized and implemented
a simulation fault-based attack on RSA LRE and FWE im-
plementations, taking the well known OpenSSL libraries as
the object attacked. The fault was injected into the result of
the multiplication during exponentiation, then the key was
470
05100123456x 107size of key segment/bitkey space0510020040060080010001200size of key segment/bitnumber of fault