# DDCTF 2018 writeup(二) 逆向篇
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
### 传送门： [_DDCTF_ 2018 writeup(一)
WEB篇](https://www.anquanke.com/post/id/144879)
## 一. 奈沙夜影与DDCTF
夜影是江苏科技大学大二的一名学生，也是本次比赛的第一名（Excellent！）~对于DDCTF2018他这样评价：
看到群里安姐说平台开放一年的消息，真的佩服！
Σ(ﾟДﾟ|||)━投入这种平台的公司貌似滴滴是头一家？能长期学习交流这样高质量的题目真的是幸事，感谢滴滴安全~(≧ω≦)/
re里的黑盒破解，初看起来觉得很复杂 然后一步一步逆下去抽丝剥茧最终完全理解整个程序的时候 非常巨大的成就感，这题很纯粹很硬核，我对它的印象最深~
总体而言，re系的题目都是考点很明确。以前懒得碰，这次在DD的指bi引po下去详细了解了一波ECC,比特币算法和b58等。
就从各种密码学和新颖的题型上学到了很多知识和技巧，这七天非常充实~ 基本就是醒了就做题，然后一边想着题怎么解一边睡着2333 很令人满足的比赛！
更多CTFer眼中的DDCTF请戳链接：
[https://www.zhihu.com/question/273538879](https://www.zhihu.com/question/273538879)
## 二. 逆向 writeup
### **0x01** **Baby MIPS**
IDA打开发现几个字符串结构都很清晰，提供16个变量，然后进行16次方程校验，但是运行会发现在中间就因为段错误而异常，尝试许久以后发现几个不太对劲的指令，突兀出现的t,
sp, 跳转等等的机器码都为EB02开头，猜测为花指令，于是使用IDC脚本去花。
注意MIPS为定长指令集，每个指令都为4字节，因此需要固定监测指令的头部，否则可能会误清除掉正常指令，例如方程参数的赋值
(╯‵□′)╯︵┻━┻
    #include   
    static matchBytes(StartAddr, Match)   
    {   
    auto Len, i, PatSub, SrcSub;   
    Len = strlen(Match);  
    while (i < Len)   
    {   
       PatSub = substr(Match, i, i+1);   
       SrcSub = form("%02X", Byte(StartAddr));   
       SrcSub = substr(SrcSub, i % 2, (i % 2) + 1);   
       if (PatSub != "?" && PatSub != SrcSub)   
       {   
        return 0;   
       }   
       if (i % 2 == 1)   
       {   
        StartAddr++;   
       }   
       i++;   
    }  
    return 1;   
    }  
    static main()   
    {   
       auto StartVa, SavedStartVa, StopVa, Size, i, j;  
    StartVa = 0x400420;   
    StopVa = 0x403233;  
    Size = StopVa - StartVa;   
    SavedStartVa = StartVa;  
    for (i = 0; i < Size/4; i++)   
    {   
       if (matchBytes(StartVa, "EB02????"))   
       {   
        Message("Find%x:%02x%02x%02x%02xn", StartVa,Byte(StartVa),Byte(StartVa+1),Byte(StartVa+2),Byte(StartVa+3));  
        for (j = 0; j < 4; j++)   
        {   
         PatchByte(StartVa, 0x00);   
         MakeCode(StartVa);   
         StartVa++;   
        }   
       }   
        else  
        StartVa=StartVa+4;   
    }  
    AnalyzeArea(SavedStartVa, StopVa);   
    Message("Clear eb02 Opcode Ok ");   
    }   
去花后再次分析即可得到清晰的赋值和check过程
有三种求解方法
**简单粗暴反汇编**
写了一个伪执行汇编的py脚本来得到参数，最后清洗一下即可得到方程，通过z3限制BitVec即可跑出整数解
    f = open("code.txt", "r")  
    flower = ["slti", "sdc1"]  
    a0 = 0x76ff270  
    v0 = 0xd0000  
    v1 = 8  
    fp = [0 for i in range(0x500)]  
    table = [0x0, 0x42d1f0, 0x0, 0x42d1f0,  
    0xa, 0xa, 0x0, 0x9,  
    0x4250bc, 0x9, 0x426630, 0x42d1f0,  
    0x40a3ec, 0x37343431, 0x363434, 0x0,  
    0x0, 0x42d1f0, 0x0, 0x4250bc,  
    0x0, 0x0, 0x425060, 0x42d1f0,  
    0x403ad0, 0x0, 0x0, 0x1000,  
    0x425088, 0x76fff184, 0x412fcd, 0x1,  
    0x410570, 0x425190, 0x40ca48, 0x0,  
    0x0, 0x42d1f0, 0x0, 0x42d1f0,  
    0x425088, 0xffffffff, 0x4106c4, 0xffffffff,  
    0x76fff184, 0x412fcd, 0x1, 0x42d1f0,  
    0x0, 0x425088, 0x40ccac, 0x0,  
    0x0, 0x0, 0x0, 0x42d1f0,  
    0x0, 0x425190, 0x76ffeef8, 0x425190,  
    0x10, 0x425088, 0x40baac, 0x42d1f0,  
    0x412fcd, 0x1, 0x425088, 0x40baac,  
    0x76fff184, 0x412fce, 0x40b684, 0x0,  
    0x0, 0x0, 0x0, 0x42d1f0,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x42d1f0, 0x0, 0x42d1f0,  
    0x0, 0x4250bc, 0x413081, 0x9,  
    0x403f24, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x42d1f0,  
    0x0, 0x413078, 0x0, 0x0,  
    0x0, 0x0, 0xd0000, 0xf1f4,  
    0xcf8, 0xf5f1, 0x7883, 0xe2c6,  
    0x67, 0xeccc, 0xc630, 0xba2e,  
    0x6e41, 0x641d, 0x716d, 0x4505,  
    0x76fff224, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0xfffffffe, 0x0,  
    0x76fff2ac, 0x412fcd, 0x1, 0x0,  
    0x6, 0x7fffffff, 0x1, 0x0,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x0,  
    0x0, 0x0, 0x0, 0x0,  