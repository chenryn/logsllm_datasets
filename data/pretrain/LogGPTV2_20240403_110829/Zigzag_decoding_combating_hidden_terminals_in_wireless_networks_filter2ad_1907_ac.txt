i
l
i
i
b
a
b
o
r
P
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 0
BPSK
4QAM
16QAM
 5
 10
 15
 20
Run-length of Symbol Errors
Figure 8: The probability of error propagation dies fast.
6 Dealing with Errors
Up to now, we have described the system assuming correct decoding.
But what happens if the AP makes a mistake in decoding a symbol?
For example, in Fig. 6, say the AP mistakenly decodes the ﬁrst bit in
chunk 1 as a “0” bit, when it is actually a “1” bit. Since chunk 1 is
subtracted from the second collision to obtain chunk 2, the error will
affect the ﬁrst symbol in chunk 2. This in turn will affect the ﬁrst
symbol in chunk 3, and so on. We will show the following:
• If a symbol error occurs while decoding, it may affect later chunks,
but this propagation does not persist. It dies exponentially fast.
• The errors can be further reduced by appling ZigZag in both the
forward and backward directions and combining the results.
(a) Errors Die Exponentially Fast. Intuitively, say the AP made
a random error in decoding a symbol; the error will propagate to
subsequent symbols making them random. However, any modulation
scheme has only a few possible symbol values (e.g., a BPSK symbol
can be either “0” or “1”). Even when a symbol is randomly decoded,
there is a reasonable chance the randomly picked value is correct.
Thus, a decoding mistake propagates for a stretch of symbols until it
is corrected by chance, at which point it stops affecting subsequent
symbols. Assume the probability of randomly picking the right
symbol is p, the errors dies at a rate 1
p .
We formalize the above argument for the case of BPSK, which
maps a “0” bit to -1 and a “1” bit to +1. Assume the AP makes a
mistake in decoding some symbol yA, and tries to use the erroneous
symbol to decode yB by subtracting the decoded vector from the
received signal y = yA + yB.4 In the worst case, and as shown in
Fig. 7, the error causes the AP to add the vector instead of subtracting
it, and hence the AP estimates ˆyB as yB + 2yA. In BPSK, the AP
will decode yB to the wrong bit value only if the estimate ˆyB has
the opposite sign of the original vector. This will happen only if
the angle between the two vectors yB and yA is less than −60o. The
frequency offset between Alice and Bob means that the vectors yB
and yA can have any angle with respect to each other. Thus, the error
propagates with probability less than 60
3 , i.e., in BPSK, errors
die exponentially fast at a rate 2
3 .
180 = 1
Fig 8 shows a simulation of error propagation in ZigZag. We
insert a decoding error by randomly mistaking a symbol as one of its
neighbors in the constellation. We compute the number of subsequent
symbols that are affected by this error. The ﬁgure shows that errors
die exponential quickly. The ﬁgure however shows that errors die
faster in BPSK and 4-QAM than in 16-QAM, and hence ZigZag
performs better in these modulation schemes.
(b) Forward and Backward Decoding. The ZigZag algorithm
described so far decodes forward. In Fig. 2, it starts with chunk 1
in the ﬁrst collision and proceeds until both packets are decoded.
4We ignore the noise term w since it has a random effect on the error and can equally
3We use the Muller-and-Muller algorithm [24] to estimate sampling offset errors.
emphasize it or correct it.
Pa1
Pb1
∆1
Pa1
Pb1
i
g
n
d
d
a
P
S
F
S
I
S
F
S
I
K
C
A
K
C
A
A
W
C
+
S
F
D
I
Pa2
Pb2
∆2
DIFS + CWB
t1
t2
Time
Figure 9: How ZigZag sends 802.11 synchronous acks.
However, clearly the ﬁgure is symmetric. The AP could wait un-
til it received all samples, then decode backward. If the AP does
so, it will have two estimates for each symbol. ZigZag combines
these estimates to both combat error propagation and reduce the
overall errors. To do so, ZigZag builds on prior results in diversity
combining [35, 6]; whenever there is a mismatch between forward
and backward decoding, ZigZag uses the soft values of the decoded
symbols as a conﬁdence measure. It picks the results of forward or
backward decoding depending on which one has a higher conﬁdence
(the details are in [12]).
In practice, instead of decoding all the way forward and then
backward, one can do it on a chunk-by-chunk basis, using the most
recently decoded chunk as a bootstrapping chunk for backward de-
coding.
7 Backward Compatibility
It would be beneﬁcial if ZigZag requires no changes to senders. In
this case, one can improve resilience to interference in a WLAN by
purely changing the APs, and without requiring any modiﬁcations to
the clients (e.g., laptops, PCs, PDAs). Compatibility with unmodiﬁed
802.11 senders requires a ZigZag receiver to ack the colliding senders
once it decoded their packets; otherwise the senders will retransmit
again unnecessarily. Recall that an 802.11 sender expects the ack to
follow the packet, separated only by a short interval called SIFS [34];
Can a ZigZag receiver satisfy such requirement?
The short answer is “yes, with a high probability.” To see how,
consider again the example where Alice and Bob are hidden terminals,
and say that the AP uses ZigZag to decode two of their packets, Pa1
and Pb1, as shown in Fig. 9. The AP acks the packets according
to the scheme outlined in Fig. 9. Speciﬁcally, by time t1, the AP
has fully decoded both Pa1 and Pb1. Even more, by t1 the AP has
performed both forward-decoding and backward decoding for all bits
transmitted so far, i.e., all bits except the few bits at the end of Pb1.5
Thus, at t1 the AP declares both packets decoded. It waits for a SIFS
and acks packet Pa1. Though the ack collides with the tail of packet
Pb1, the ack will be received correctly because Alice cannot hear
Bob’s transmission. Bob too will not be disturbed by the AP’s ack to
Alice because practical transmitters cannot receive and transmit at
the same time. The AP then transmits some random signal to prevent
Alice from transmitting her next packet, Pa2, before Bob’s packet is
acked. The AP knows how long this padding signal should be since it
already has a decoded version of Bob’s packet and knows its length.
After Bob ﬁnishes his transmission the AP acks him as well.
One question remains, however, would the offset between the two
colliding packets sufﬁce to send an ack? Said differently, in Fig. 9,
how likely is it that t2 − t1 > SIFS + ACK. One can show that, given
802.11 timing, the likelihood that the time offset between the two
packets is sufﬁcient to send an ack is quite high. In particular, for
the common deployment of backward compatible 802.11g, we prove
in [12] the following.
5This assumes the receiver tries in parallel to use standard decoding and ZigZag, and
takes whichever satisﬁes the checksum.
1
2
3
P1
P2
P3
1
2
3
P1
P2
P3
1
2
3
P1
P2
P3
Figure 10: Applying ZigZag to Three Collisions.
Lemma 7.1 In 802.11g, the probability that the time offset between
two colliding packets is sufﬁcient for sending an ACK is higher than
93.7%.
There exist however patterns that ZigZag can decode but cannot
ack synchronously. For example, in Fig. 4, with a high probability,
we can synchronously ack the ﬁrst four patterns. However, the last
two patterns require asynchronous acks. ZigZag always prefers to
use synchronous acks. Speciﬁcally, the AP identiﬁes ZigZag-aware
senders during association. It always tries to send synchronous acks
but if that fails and the sender is ZigZag-aware, the AP sends the ack
asynchronously in a manner similar to [35]. In practice, however,
most collisions tend to involve two terminals and the autorate algo-
rithm matches the bit rate to the SNR. Thus, we believe that even if
the AP does not implement asynchronous acks, it can still resolve
the majority of the collisions that occur in practice.
8 Beyond Two Interferers
Our description, so far, has been limited to a pair of colliding packets.
ZigZag, however, can resolve a larger number of colliding senders.
Consider the scenario in Fig. 10, where we have three collisions from
three different senders. We refer to the colliding packets by P1, P2
and P3, and collision signals by C1, C2 and C3. The ﬁgure shows a
possible decoding order. We can start by decoding chunk 1 in the
ﬁrst collision, C1, and subtract it from C2 and C3. As a result, chunk
2 in C2 becomes interference-free and thus decodable. Next, we
subtract chunk 2 from both C1 and C3. Now, chunk 3 in C3 becomes
interference-free; so we decode it and subtract it from both C1 and C2.
Thus, the idea is to ﬁnd a decoding order such that, at each point, at
least one collision has an interference-free chunk ready for decoding.
The following linear-time algorithm provides a chunk-decoding
order for any number of collisions.
• Step 1: For each of the collisions, decode all the overhanging
chunks that are interference-free.
• Step 2: Subtract the known chunks wherever they appear in all
collisions.
• Step 3: Decode all the new chunks that become interference free
as a result of Step 2.
• Step 4: Repeat the last two steps until all the chunks from all the
packets are decoded.
We would like to estimate how often this linear-time algorithm
succeeds in resolving collisions, i.e., the probability that it will not
get stuck before fully decoding all symbols. To do so, we simulate
the behavior of the 802.11 MAC. Speciﬁcally, we have n nodes, all
hidden from each other, and all want to transmit a packet at t = 0.
Each node maintains a congestion window cw, which is initialized to
32 slots. Each node randomly picks a slot in its congestion window
to transmit the packet.
If a collision occurs and the AP fails to
decode the packet, the sender doubles its congestion window, up to
a maximum of 1024 slots. The experiment is repeated 10,000 times
for each value of n. Fig. 11 shows the probability that the greedy
decoder fails to decode n packets given n collisions. It shows that
this probability ranges between .01%– 1%, and hence is negligible
in practice.
y
t
i
l
i
b
a
b
o
r
P
e
r
u
l
i
a
F
 0.01
 0.001
 1e-04
 1e-05
 2
 3
 4
 5
 6
 7
 8
 9
Number of Nodes
Figure 11: Failure probability of our linear-time decoder as a function
of the number of colliding nodes.
Intuitively, one may think of the system of n collisions of n packets
as a linear system of n equations and n unknowns. The collisions are
the linear equations, whereas the packets are the unknowns. Such
system is solvable if the equations are linearly independent, i.e., the
packets combine differently in different collisions. A general system
of linear equations, however, is not always solvable in linear-time
(it requires a matrix inversion). But the equations in the case of
collisions have a special structure because the symbols in a packet
appear in all collisions in the same order. Fig. 11 shows that for such
a structure a linear-time decoder is quite powerful. Indeed, for three
collisions (or less) we can show that our linear-time algorithm is as
powerful as a non-linear decoder. Speciﬁcally, we prove in [12] that:
Lemma 8.1 Given three collisions of three packets, if for any packet
pair Pi and Pj, there exists 2 collisions such that this pair has com-
bined differently (in terms of offsets) in these 2 collisions, the above
greedy algorithm always succeeds in decoding all symbols in all
colliding packets.
Finally, note that Fig. 11 is an upper bound on the performance of
our linear decoder. In practice, imperfections in the implementation
of the decoder limit the maximum number of colliding senders that
can be correctly decoded. In §10.6, we show experimental results for
scenarios with three interfering senders.
9 Complexity
ZigZag is linear in the number of colliding senders. In comparison to
current decoders, ZigZag requires only two parallel decoding lines
so that it can decode two chunks in the same time that it would take
a current decoder to decode one chunk. Most of the components
that ZigZag uses are typical to wireless receivers. ZigZag uses the
decoders and the encoders as black-boxes. Correlation, tracking,
and channel estimation are all typical functionalities in a wireless
receiver [24, 7].
10 Experimental Environment
We evaluate ZigZag in a 14-node GNURadio testbed. The topology
is shown in Fig. 12. Each node is a commodity PC connected to a
USRP GNU radio [17].
(a) Hardware and Software Environment. We use the Universal
Software Radio Peripheral (USRP) [17] for our RF frontend. We use
the RFX2400 daughterboards which operate in the 2.4 GHz range.
The software for the signal processing blocks is from the open source
GNURadio project [9].
(b) Modulation. ZigZag uses the modulation/demodulation module
as a black-box and works with a variety of modulation schemes. Our
implementation, however, uses Binary Phase Shift Keying, BPSK,
which is the modulation scheme that 802.11 uses at low rates.
(c) Conﬁguration Parameters. We use the default GNURadio con-
ﬁguration, i.e., on the transmitter side, the DAC rate is 128e6 sam-
ples/s, the interpolation rate is 128, and the number of samples per
symbol is 2. On the receiver side, the ADC rate is 64e6 samples/s and
Figure 12: Testbed Topology.
the decimation rate is 64. Given the above parameters and a BPSK
modulation, the resulting bit rate is 500kb/s. Each packet consists of
a 32-bit preamble, a 1500-byte payload, and 32-bit CRC.
(d) Implementation Flow Control. On the sending side, the net-
work interface pushes the packets to the GNU software blocks with
no modiﬁcations. On the receiving side, the packet is ﬁrst detected
using standard methods built in the GNURadio software package.
Second, we try to decode the packet using the standard approach (i.e.,
using the BPSK decoder in the GNURadio software). If standard
decoding fails, we use the algorithm in §5.1 to detect whether the
packet has experienced a collision, and where exactly the colliding
packet starts. If a collision is detected, the receiver matches the
packet against any recent reception, as explained in §5.2. If no match
is found, the packet is stored in case it helps decoding a future col-
lision. If a match is found, the receiver performs chunk-by-chunk
decoding on the two collisions, as explained in §5.3. Note that even
when the standard decoding succeeds we still check whether we can
decode a second packet with lower power (i.e., a capture scenario).
(e) Compared Schemes. We compare the following:
• ZigZag: This is a ZigZag receiver as described in §5 augmented
with the backward-decoding described in §6.
• 802.11: This approach uses the same underlying decoder as
ZigZag but operates over individual packet.
• Collision-Free Scheduler: This approach also uses the same ba-
sic decoder but prevents interference altogether by scheduling each
sender in a different time slot.
(f) Metrics. We employ the following metrics:
• Bit Error Rate (BER): The percentage of incorrect bits averaged
over every 100 packets.
• Packet Loss Rate (PER): This is the percentage of incorrectly
received packets. We consider a packet to be correctly received
if the BER in that packet is less than 10−3. This is in accordance
with typical wireless design, which targets a maximum BER of
10−3 before coding (and 10−5 after coding) [3, 28].6
• Throughput: This is the number of delivered packets normalized
by the GNU Radio transmission rate. Again a packet is considered
delivered if the uncoded BER is less than 10−3. In comparison
to packet loss rate, the throughput is more resilient to hidden
terminals in scenarios that exhibit capture effects. This is because
the terminal that captures the medium transmits at full rate and
gets its packets through, causing unfairness to the other sender, but
little impact on the overall throughput.
10.1 Setup
Since ZigZag acts exactly like current 802.11 receivers except when
a collision occurs, our evaluation focuses on scenarios with hidden
terminals, except in §10.5 where we experiment with various nodes
in the testbed irrespective of whether they are hidden terminals. In
6For example, 802.11a target packet error rate (PER) is 0.1 for a packet size of
8000 bits. Given a maximum uncoded BER of 10−3, practical channel codes like BCH
Code(127,99) and BCH Code(15,5) achieve the desired PER.
Table 1: Micro-Evaluation of ZigZag’s components
Correlation
Frequency