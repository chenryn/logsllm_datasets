D sends the previous hash element to the one it recently used.
For example, D uses hn−1 for the second rjoin it sends. A
router will hash hn−1 once to get hn = ha and thus verify the
message; it can then update its hash anchor with hn−1. Note
that not all routers receive every rjoin (or control message)
from D, so they may have an old hash anchor. However, to
verify a future message they simply have to repeatedly hash
the new element to get ha (an index into the hash chain can
be sent to speed this operation).
Although bogus rjoins from an attacker cannot usurp hidden
paths, if the attacker learns about a hash element hn (through a
compromised router), he may ﬂood the network with rjoins to
cause routers with outdated hash anchors to change their EFIB
entries. However, this change in only temporary, as D realizes
it lost some proxies and will send rjoins with a new hash
element (attacker doesn’t have the hash chain). In addition,
D may also proactively send the latest hash element to its
proxies and tell them to send it in keepalives (an optional
part of keepalive message). Routers can then update their
anchor after verifying this new element. The attacker may
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 Functions at a router for processing various
messages and creating the Epiphany forwarding table (EFIB)
function RJOIN(ifjoin, G, Pi, hk)
ifpi ← lookupU nicastF IB(Pi)
ifout ← ifjoin
if exists(EF IB(G)) then
ifjoin
if verif y(hk) then
// G is already claimed
// Did D claim G?
EF IB(G).{ifin} ←(EF IB (G).{ifin} ∪if pi) −
EF IB(G).ifout ← ifjoin
else
EF IB ← (cid:4)G,{ifpi}, ifout(cid:5)
setT imer(EF IB(G).{ifpi})
Update hash anchor ha with hk
send RJOIN Upstream on ifpi
if exists(EF IB(G)) ∧ verif y(hk) then
// D claimed G ﬁrst, create new entry for G
function RPRUNE(G, Pi, hk)
ifpi ← lookupU nicastF IB(Pi)
if directlyAttached(Pi) then
EF IB(G).{ifin} ← EF IB(G).{ifin} − ifpi
if EF IB(G).{ifin} = φ then
// Is proxy a neighbor?
EF IB(G) ← φ
else
send RPRUNE Upstream on ifpi
Update hash anchor ha with hk
function PURGE(ifpurge, G, hk)
if ifpurge = EF IB(G).ifout
if exists(EF IB(G)) ∧ verif y(hk) then
for all ifi ← EF IB(G).{ifin} do
EF IB(G) ← φ
send PURGE Upstream on ifi
then
if exists(EF IB(G)) ∧ ifi ∈ EF IB(G).{ifin} then
function RECVDKEEPALIVE(G, ifi)
resetT imer(EF IB(G).{ifi})
function TIMEREXPIRED(G, ifi)
EF IB(G).{ifin} ← EF IB(G).{ifin} − ifi
if EF IB(G).{ifin} = φ then
EF IB(G) ← φ
function RECVDPACKET(G, ifi)
if exists(EF IB(G)) ∧ ifi ∈ EF IB(G).{ifin} then
resetT imer(EF IB(G).{ifi})
Forward packet on EF IB(G).ifout
else
Drop packet
also target hidden paths by sending bogus rjoins with random
hash values to consume router cpu (veriﬁcation consumes cpu
resources), or may send rjoins to different Gs to exhaust
forwarding state at routers. In the ﬁrst case, routers nearest
to the attackers will be affected, but this is a local attack. The
second case is more serious since it may affect routers farther
away. To limit such attacks we assume routers allocate a ﬁxed
amount of EFIB resources to each of their neighbors. When
a router reaches the limit for a neighbor, it will ignore future
rjoins from that neighbor. The attacker will end up consuming
EFIB resources at the routers near his network. Moreover,
we assume hidden networks and their surroundings are tightly
controlled by operators to prevent such attacks.
E. Removing Misbehaving Proxies
If D decides to remove the hidden path to a proxy, it
stops sending rate refreshes causing the router state to expire.
However, a misbehaving proxy may keep the router state
active. To remove such a proxy, D sends an explicit rprune
message (refer Algorithm 1). Routers upstream of D forward
the rprune until it reaches the router adjacent to the proxy.
This router will remove the interface associated with the proxy
from its EFIB. Routers downstream will timeout and remove
the hidden path. Note that rprune can be use to remove the
path to any misbehaving router as well.
F. Removing All Hidden Paths
Occasionally D may need to switch to a different G(cid:2) and
remove all the hidden paths associated with an old G, say if it
ran into a collision with respect to G and is unable to construct
hidden paths to a number of proxies, or it is unable to remove
some hidden paths due to compromised routers and proxies.
To do this, D sends an explicit purge message to its upstream
router(s). Upon receiving a purge, a router forwards it on all
its input interface set, and removes the state associated with
G. The purge propagates from router to router until all EFIB
state associated with G is removed.
V. EVALUATION
We evaluated the main mechanisms of Epiphany through
implementation
simulations on an Internet scale topology,
on a local testbed and on a PlanetLab overlay. While we
cannot offer a complete evaluation of the effectiveness of some
aspects of Epiphany, such as reputation mechanisms, client
access policies by the service and tiered DP implementation,
we evaluate the new mechanisms such as the effectiveness
of anycast in isolating clients from bots, the overhead of the
hidden path implementation and the effectiveness of separating
DPs from SPs.
A. Effectiveness of Anycast SP
We conducted simulations to evaluate the effectiveness of
anycast SPs in isolating attackers from legitimate clients on
the 2011 dual Router+AS topology from CAIDA [25]. To this
end, we developed a topology simulator to study anycast SPs
under: 1) various attacker and legitimate client distributions,
and 2) different scenarios for placing SPs. The simulator
does not consider link capacities, because such information
is unavailable with the topology.
1) Methodology: We chose the midar-iff [25] alias resolved
router topology and converted IP links to graph edges to form
a router graph. The data does not list router interfaces that
connect to end hosts, so we assume any router with only one
interface to be connected to a subnet. We use the router to
AS mapping to convert the router graph to an AS graph. The
resulting graphs have 20,115 ASes and 2,743,974 routers –
1,356,359 of the routers only have one interface and 1,387,615
have more than one interface (routers that didn’t have an AS
mapping were ignored). We denote the routers with only one
interface as edge routers, and the rest as core routers. We
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply. 
 100
s
r
e
k
c
a
t
t
A
e
v
i
t
c
e
f
f
e
n
I
%
 90
 80
 70
 60
 50
 40
0.1% Attackers
1% Attackers
10% Attackers
s
t
n
e
i
l
C
e
t
a
m
i
t
i
g
e
L
d
e
t
c
e
f
f
a
n
U
%
0.1% Attackers
1% Attackers
10% Attackers
 80
 70
 60
 50
 40
 30
 20
 10
 0
0.025 0.125
0.25
0.5
0.75
1.0
0.025 0.125
0.25
0.5
0.75
1.0
% Setup Proxies (out of ~2.7mil)
% Setup Proxies (out of ~2.7mil)
(a) Percentage attackers rendered ineffective
(b) Percentage legitimate clients unaffected by attackers
P
S
m
o
r
f
e
c
n
a
t
s
D
i
r
e
k
c
a
t
t
A
.
g
v
A
 8
 6
 4
 2
0.1% Attackers
1% Attackers
P
S
m
o
r
f
e
c
n
a
t
s
D
i
r
e
k
c
a
t
t
A
f
o
e
d
o
M
 8
 6
 4
 2
0.1% Attackers
1% Attackers
 128
s
r
e
k
c
a
t
t
A
f
o
r
e
b
m
u
N
.
g
v
A
 64
 32
 16
 8
 4
 2
 1
0.1% Attackers
1% Attackers
s
r
e
k
c
a
t
t
A
f
o
r
e
b
m
u
N
f
o
e
d
o
M
 8
 6
 4
 2
 0
0.1% Attackers
1% Attackers
0.025 0.125
0.25
0.5
0.75
1.0
0.025 0.125
0.25
0.5
0.75
1.0
0.025 0.125
0.25
0.5
0.75
1.0
0.025 0.125
0.25
0.5
0.75
1.0
% Setup Proxies (out of ~2.7mil)
% Setup Proxies (out of ~2.7mil)
% Setup Proxies (out of ~2.7mil)
% Setup Proxies (out of ~2.7mil)
(c) Avg, mode of distance from attackers to SPs
(d) Avg number of attackers affecting legit clients
Fig. 6. Simulation results for various attacker distributions; Nl ﬁxed at 0.01% and Nsp varied from 0.0125% to1%.
always choose the attackers and legitimate clients from the
edge routers, but place the SPs on either or both edge and
core routers.
To model attackers and legitimate clients in the topology
we randomly pick Na%, Nl% of the edge routers and treat