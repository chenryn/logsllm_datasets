    {
        public function __construct()
        {
            parent::__construct();
        }
        public function index()
        {
            $ad_id = intval(I('get.ad_id'));
            if (empty($ad_id)) {
                $this->redirect(__URL__);
            }
            $act = ! empty($_GET['act']) ? I('get.act') : '';
            if ($act == 'js') {
                /* 编码转换 */
                if (empty($_GET['charset'])) {
                    $_GET['charset'] = 'UTF8';
                }
                header('Content-type: application/x-javascript; charset=' . ($_GET['charset'] == 'UTF8' ? 'utf-8' : $_GET['charset']));//这里没有单引号括起来直接拼接
                $url = __URL__;
这里其实是个 _header CRLF注入_ ,但是很可惜自从php4.1之后,php的header函数就没办法插入换行符了,
所以说这是一个很鸡肋的点,一点价值都没有,但是我想表达的是,我是如何去挖掘的。
payload:`%0a%0d`
在php高版本会提示错误,不允许多个header argument之类的。
前台那种直接输出
`$_GET $_POST`我基本找了一次,很遗憾没有发现那种很常见的反射xss。
####  0x6.2 前台会员中心csrf可盗取用户账号
这套系统首先是个人中心编辑资料处:
一般人觉得都是去修改密码那里看看,但是现在一般的程序员都会验证下原密码。
不过这里还有个设置问题答案的功能,我们可以尝试从这里入手。
很明显就没有token等类似的字样,burp生成csrf的payload。
打开访问下:
回到ecshop页面
这个点挺low的,权当分享。
还有csrf修改地址什么,基本都没有token保护,csrf挖掘应该是很简单的,其实我是觉得很多人混淆了下xss和csrf,
又刚好有这个例子,就拿来分析一波了。
###  0x6.3 前台的xss一次失败的挖掘过程
黑盒看功能点:
> 收获地址应该是经常被用于测试xss的
>
> 
跟进代码去解读下如何存起来的:
    public function add_address() {
            if (IS_POST) {
                $address = array(
                    'user_id' => $this->user_id,
                    'address_id' => intval($_POST['address_id']),
                    'country' => I('post.country', 0, 'intval'),
                    'province' => I('post.province', 0, 'intval'),
                    'city' => I('post.city', 0, 'intval'),
                    'district' => I('post.district', 0, 'intval'),//整形不可能
                    'address' => I('post.address'),//默认htmlspecialchars过滤
                    'consignee' => I('post.consignee'),
                    'mobile' => I('post.mobile')
                );
                $token = $_SESSION['token'] = md5(uniqid());
                if($_GET['token'] == $_SESSION['token']){
                    $url = url('user/address_list');
                    ecs_header("Location: $url");
                }
                if (model('Users')->update_address($address)) {//跟进这里
                    show_message(L('edit_address_success'), L('address_list_lnk'), url('address_list'));
                }
                exit();
            }
            if(!empty($_SESSION['consignee'])){
                $consignee = $_SESSION['consignee'];
                $this->assign('consignee', $consignee);
            }
        function update_address($address) {
            $address_id = intval($address['address_id']);
            unset($address['address_id']);
            $this->table = 'user_address';
            if ($address_id > 0) {
                /* 更新指定记录 */
                $condition['address_id'] = $address_id;
                $condition['user_id'] = $address['user_id'];
                $this->update($condition, $address);
            } else {
                /* 插入一条新记录 */
                $this->insert($address);//这里插入了
                $address_id = M()->insert_id();
            }
            .............................
            }
            return true;
        }
执行的sql:
     (`user_id`,`country`,`province`,`city`,`district`,`address`,`consignee`,`mobile`) VALUES ('1','1','5','58','722','admin\&quot;&gt;&lt;','admin\&quot;&gt;&lt;','13888788888')
全局htmlspecialchars过滤一次,数据库addalshes一次。
然后我们在看是如何输出的:
     public function address_list() {
            if (IS_AJAX) {
                ......................
            }
            // 赋值于模板
            $this->assign('title', L('consignee_info'));
            $this->display('user_address_list.dwt');
        }
这里直接输出已经被转义的payload,所以造不成xss。
通过这次xss失败挖掘经历,我更加理解了,针对这个cms的挖掘思路:
> 1.变量一定不能经过htmlspecialchars(除非有解码)
>
> 2.寻找htmlspecialchars_decode()解码输出点。
针对第一个:
通过正则匹配:
`I('.*?', .*?, '[^s]+')`找出非默认值I方法,这样就不会有htmlspecialchars
但是很遗憾我没找到好的利用点。
第二个我找到了看下面分析吧
###  0x6.4 ArticleController处xss
直接搜索:`htmlspecialchars_decode`
这里有两处,另一处是`html_out`函数起了`htmlspecialchars_decode`的功能
分析第一处:
     public function wechat_news_info() {
            /* 文章详情 */
            $news_id = I('get.id', 0, 'intval');
            $data = $this->model->table('wechat_media')->field('title, content, file, is_show, digest')->where('id = ' . $news_id)->find(); //wechat_media表去取内容
            $data['content'] = htmlspecialchars_decode($data['content']);
            $data['image'] =  $data['is_show'] ? __URL__ . '/' . $data['file'] : '';
            $this->assign('article', $data);
            $this->assign('page_title', $data['title']);
            $this->assign('meta_keywords', $data['title']);
            $this->assign('meta_description', strip_tags($data['digest']));
这里就很nice,直接全局搜索`table('wechat_media')` `'wechat_media'` `pre.'wechat_media'`
看看那里可以进行插入
有两个文件出现了很多次这个按道理来说肯定会有插入:
1.`WechatController.class.php` 前台
2.`admin/controllers/WechatController.class.php` 后台
读下前台,好像没有找到插入的,那么跟下第二个文件
     /**
         * 图文回复编辑
         */
        public function article_edit()
        {
            if (IS_POST) {
              ..................//省略
                if (! empty($id)) {
                    // 删除图片
                    if ($pic_path != $data['file']) {
                        @unlink(ROOT_PATH . $pic_path);
                    }
                    $data['edit_time'] = gmtime();
                    $this->model->table('wechat_media')
                        ->data($data)
                        ->where('id = ' . $id)
                        ->update(); //这里有个更新操作
                } else {
                    $data['add_time'] = gmtime();
                    $this->model->table('wechat_media')
                        ->data($data)
                        ->insert();//这里有个插入操作
                }
                $this->message(L('edit') . L('success'), url('article'));
            }
那么回去继续读下省略部分看`$data`经过了什么过滤没。
     if (IS_POST) {
                $id = I('post.id');
                $data = I('post.data');
                $data['content'] = I('post.content');
                $pic_path = I('post.file_path');
                // 封面处理
                if ($_FILES['pic']['name']) {
                    $result = $this->ectouchUpload('pic', 'wechat');
                    if ($result['error'] > 0) {
                        $this->message($result['message'], NULL, 'error');
                    }
                    $data['file'] = substr($result['message']['pic']['savepath'], 2) . $result['message']['pic']['savename'];
                    $data['file_name'] = $result['message']['pic']['name'];
                    $data['size'] = $result['message']['pic']['size'];
                } else {
                    $data['file'] = $pic_path;
                }
很明显内容是用了I方法获取了一次,也就是htmlspecialchars了一次,关于插入其实就是底层做了个escape过滤,
没啥影响,可以看我前面的分析,所以说这里可以导致xss
**演示分析下:**
`http://127.0.0.1:8888/ecshop/upload2/upload/mobile/?m=admin&c=Wechat&a=article_edit`
然后我们回去访问下:
`http://127.0.0.1:8888/ecshop/upload2/upload/mobile/index.php?m=default&c=article&a=wechat_news_info&id=1`
竟然没弹框?
直接搜索数据库:
      public function wechat_news_info() {
            /* 文章详情 */
            $news_id = I('get.id', 0, 'intval');
            $data = $this->model->table('wechat_media')->field('title, content, file, is_show, digest')->where('id = ' . $news_id)->find(); //对应是这个
            $data['content'] = htmlspecialchars_decode($data['content']);
            $data['image'] =  $data['is_show'] ? __URL__ . '/' . $data['file'] : '';
            $this->assign('article', $data);
            $this->assign('page_title', $data['title']);
            $this->assign('meta_keywords', $data['title']);
            $this->assign('meta_description', strip_tags($data['digest']));
的确是进行了解码
那么问题就出现了存进数据库的过程,但是我后端php代码感觉没啥问题呀,
我于是在跑回去用burp抓包下提交的过程
果然被我猜中了,编辑器自己又进行了一次编码,不过这是编辑器前端处理的,那么非常easy绕过
然后再去访问,ok弹框了
这个漏洞可能会觉得鸡肋,但是常见一般都会有回复功能,肯定也是这样写的,因为要安装插件啥的,这里直接用了后台来演示。
总结下这个点的成因和意义:
> 成因:
>
> 正因为编辑器有编码特性,所以程序员写了个解码函数,不过由于前端可控,导致绕过
>
> 意义:
>
> 这个对于挖漏洞,挖src可以多关注下是不是这样子的成因,要不然就错过了一个存储xss了。
## 0x7 预告计划
​ 现在续集来到了xss and
csrf,我为自己的坚持感到开心,通过这次从代码审计挖掘xss,也激起了我想写一篇从0到1的针对tsrc的xss挖掘漏洞系列(反射 dom
存储),一些绕过过程我感觉还是很有意思,不过需要js基础,还要问下审核能不能发表才行,不行就换家可以发表的,当作是自己挖src的学习刺激,也就是说tsrc的xss系列是我向前端审计的一种过渡,也是我下一步的方向。
## 0x8 感想
​ 这次写了比较久,可能是不太熟悉这种挖掘方式,感觉还是菜,寒假好好努力吧,在十天内,争取写完后端代码审计的大部分类型。