T8015C0911x1
push
ebp
ebp,
esp
C8015009:1x*1*
-text: 60351088
30V
eax, OrFTFFFFFh
'xeo
dvord_60353018
-text: 6035108B
Jnz
cmp
0801500912x*2*
short 1oc_603510cF
AOt
56019009:1x**
KOT
eax,
cmp
ecx, OFFFFTTFFh
eax
86015009:1X*1*
xe9*8102509p2onp
-text: 6035109D
ca11
jniz
-text:6035109F
o3otsco9“qn8
-text:603510A4
ecK,eax
-text:603510A6
-text:603510AB
AOE
eax, dvord_60353018
-text:603510B1
AOE
hModule, ecx
.text:603510B1 1oc_60351081:
: C0DE XREF: sub_60351080+1D
-text:603510B1
test
text:60351083
short 1oc_603510cF
ecx, ecx
.text:60351085
be
push
offset alx_unreg : *ax_unreg*
-text: 603510BA
.text:603510BB
ca11
puah
ds:GetProcAddress
ecK
:hModale
- - -
“ax_unreg”是字符串区域里的第二个字符串。第二个函数的起始地址是0x60351080，而在SYM文件
里二进制区域的第二个数值正是10001080。据此推测，文件里的这个值应该就是相对地址，只不过，这个相
对地址的基地址不是默认的DLL基址罢了。
简短截说，在SYM文件中那个66X2的数据里，前半部分66个数值是DLL文件里的函数地址。它
们也可能是函数里某个标签的相对地址。那么，由0x0000开头的、余下的66个值表达的是什么信息呢？
这些数据的取值区间是[0，0x3f8]。它不像是位域的值，只是某种递增序列。关键问题是：每个值的最后
一个数之间没有什么明确关系，它也不像是某种地址信息—地址的值应该是4、8或0x10的整数倍，
不妨直接问问您自己：如果您是研发人员，还要在这个文件里写什么数据？即便是瞎猜，也会猜得八
九不离十：目前还缺少文本字符串（函数名）在文件里的地址信总。简单验证可知，的确如此，这些数值
与字符串的第一个字母的地址存在对应关系。
大功告成。
此外，我还写了一段把SYM文件中的函数名加载到IDA 脚本的程序，以便idc脚本文件自动解析函
数的函数名：
include Cstdlo,h>
#Include Cstdint.h>
include 
#include 
#include
Int sain (intarge, char *argv[])
uint32_t sig, cnt, offset;
ZP.'IP， 12CuTn
Int
h, l, renain, file_lenj
char
*d3:
---
## Page 364
840
逆向工程权威指南（下册）
uint32_t array_size_in_bytes7
assert (argv[1]): // file nane
sssert (argv[2]): // additiona] offset (if needed)
sssert (8scanf [argv[21, *sx*, 4offset) =1);
// additional offset
// get r11e length
assert ((h=open (argv[1]_0_RDONLY 1 _0_sINARY, 0)) 1=1)
assert (([i1e_len=1seek (h, 0, SEEK_ESD)11=~1) )
assert (1seek [h, 0, SEEK_SET)I=-1);
as8ert (read [h, 5sig, 4]==4);
// read signature
// read count
assert (read [h, scnt, 4]=4)}
assert (s1g0x4059534F): // 081
// skip tinedatestanp (for 11g)
//_1seek (b, 4, 1):
array_size_Ia_bytes=cnt*s1zeof {uint32_t)}
// 1oad symbo1 addresses array
d1= uint32_t*)nalloc (array_size_in_bytes]
assert (zead (b, dl, array_size_in_bytes) *= array_size_in_bytes)/
assert (d1)2
// load string offsets array
d2=(uint32_t*)malloe (array_size_is_bytes);
assert (d2);
assert (read (h, d2, array_size_in_bytes) *=array_size_in_bytes]:
// calculate strings block aize
r(8u)  (+8) u"aT=Teu9
// Load strings block
assert (d3=(char*[malloc (remain))
assert (zead (h, d3, renain) ==renain) I
printf (*Iinclude \n\n*)
printf (*statie main() (\n*)
for (i=0 1
static main() {
MakeNiame [0x60351000, "_ax_reg°):
MakeName (0x60351080, *_ax_unreg*):
HakeNane (0x603510F0, "_1oadd11*);
MakeName (0x60351150, "_wtcsrin0*)=
Make&ame (0x60351160, "_wtcsrin*)
---
## Page 365
第86章Oracle的.SYM文件
118
MakeNane (0x603511c0, *_vtcsrfre") /
MakeName (0x60351370, *_vtcatu*):
KakeNane (0x60351100,
*_vtclkn*);
如需下载本章用到的 oracle文件，请访问：http:/beginners.re/examples/oracle/SYM/。
此外，我们来研究一下Win64下的64位oracle RDBMS。64位程序的指针背定就是64位数据了吧！
这种情况下，8字节数据的数据特征就更为明显了。如图86.5所示。
图 86.5RDBMS for Win64 的SYM 文件 (示例)
可见，数据表的所有元素都是64位数据，字符串偏移量也不例外。此外，大概是为了区别不同的操作
系统，文件的签名改成了OSYMAM64。
如需让IDA自动加载.SYM文件中的函数名，可参考我的样本程序：htps:/github.com/dennis714/porg/
blob/master/oracle_sym.c
---
## Page 366
第87章Oracle的.MSDB文件
在解决问题时，如果解是已知的，
那么你总会有章可循。
《墨菲定律一精确的法则》
Oracle的.MSDB文件是一种含有错误信息和相应错误编号的二进制文件，本章将与您共同研究它的文
件格式，尝试解读其中的原始数据。
虽然OracleRDBMS提供专门的、文本格式的错误信息文件，但是并非每个.MSB文件里都有相应的、
文本格式的错误信息文件，所以有时需要把二进制文件和信息文本进行关联分析。
过滤掉ORAUS.MSG的注释以后，文件开头部分的内容如下所示：
00000, 00oo0, *normal, sucessful completion*
00017,
00001，
00018,
00000,
*session requested to set trace erent*
'61000
00000,
00000,
"naximn munber of session licenses exceeded*
*naxinua sunber of sessilons exceeded*
00020,
'00000
00000,
session attached to some othez process;cannot svitch session*
"naxinuzs nunber of processes (ts) exceeded*
20021,
0022,
00000,
*invalid session ID; access denied*
'E200
00000,
"session references process private senory:cannot detach session*
00000,
logins fron more than one process not alloved in single=grocess mode*
0025,
00000
*nissing or Invalid sesslon ID*
“failed to allocate §s*
00026,
00027,
00000,
00000,
00029,
'8200
00000,
00000，
"session is not a user session*
"your sessicn has been killed*
00031, 00000, “sessien marked for ki11*
00030,
00000, “User session ID does not exist.*
T
其中，第一个数字是错误编号，第二个数字可能是某种特殊的标识信息。
现在，我们打开ORAUS.MSB的二进制文件，然后找到这些字符串，如图87.1所示。
文本字符串之间掺杂看二进制的数据。简单分析之后，可知文件的主体部分可分为多个固定长度的信息
块，每个信息块的大小是0x200（512）字节。
首先查看第一个信息块的数据，如图87.2所示。
可以看到第一条错误信息的文本内容，此外，我们还注意到错误信息之间没有零字节：也就是说，这些
字符申不是以零字节分割的C语言字符串，作为一种替代机制，文件中必须有某个数据记录字符串的长度。
然后我们来找找它的错误代码。参照ORAUS.MSG文件起始部分的错误编号，我们在.msb文件中找到
取值为错误编号的几个字节：0.1，17（0x11），18（0x12），19（0x13），20（0x14），21（0x15），22（0x16),
23（0x17），24（0x18）--笔者在这个信息块里找到了这些数字，并且在图87.2里用红线标出它们。相
邻两个错误代码之间的空间周期是6个字节。这意味着每条错误信息可能都占用6个字节。
第一个16位值（0xA即10）代表着每个信息块包含的错误信息的总数—其他信息块的调查结果印
证了这一猜想。稍微想一下就知道错误信息（文本字符串）的长度不会是一致的。这种字符串有长有短，
但是信息块的尺寸却是固定的。所以，程序无法事先知道每个信息块装载了多少个文本字符串。
---
## Page 367
第87章Oracle的MSDB文件
843
图87.1Hiew：第一个消息块
图87.2Hiew：第—个消息块
刚才讲过，这些字符串不是以零字节分割的C语言字符串，其字符串长度肯定位于文件中的其他什么
地方。字符串“normal， successful completion”有29（0x1D）字节，另—个字符串“unique constraint（%s.%s）
violated”有34个（0x22）字节。但是在这个信息块里，我们找不到0x1d或者0x22。
一般来说，OracleRDBMS应当需要确定每个字符串在信息块之中的相对位置。第一个字符申“normal
successfulcompletion在整个文件中的绝对位置是0x1444，在信息块中的相对位置是0x44。同理可得第二
个字符串“unique constraint（%s.%s）violated”的位置0x1461和 0x61.这两个数（0x44和0x61）并不陌
生！在信息块中的前儿个字节里就有这些数字。
综上所述，我们分析出了各个信息块里6字节非文本信息的格式：
·16位错误代码。
●16位的零（可能含有其他的标识信息）。
·16位的字符申地址信息，用于标记字符串在当前信息块的相对位置。
这些猜想可以被事实验证。在信息块中的最后一个6字节的、错误信息为“dummy”的信息块，它的
---
## Page 368
逆向工程权威指南（下册）
错误编号为零、起始位置指向最后一个错误信息的最后一个字符之后的位置。或许这个凌数的字符串偏改
量用于标记上一个字符串的结束符？至此为止，我们可以根据6字节数据的信息，索引指定的错误编号，
从面获取文本字符串的起始位置。我们还知道源程序会根据下一个6字节数据块推算本字符串的文本长度。
这样一来，我们可以确定字符串的界限。这种文件格式不必存储字符串的长度，因而十分节省空间。我们
可能无法判断它最终能压缩多少文件空间，但是这无疑是一种不错的思路。
此后，我们返回来分析.MSB文件的文件头信息。信息的总数如图87.3中红线部分所示。
图87.3Hiew：文件头
对其他.MSB文件进行了验证之后，我确信所有的推测都准确无误。虽然文件头中还富含其他信息，
但是我们的目标（供调试工具调用）已经达成，故而本文不再分析那些数据。除非我们要编写一个MSB
文件的封装程序，否则就不需要理解其他数据的用途，
如图87.4所示，在文件头之后还有一个16位数值构成的数据表。
图 87.4 Hiew: last_crmos 表
如图87.4中的红线所示，这些数据的数据宽度可以直接观察出来。在导出这些数据时，我发现这些16
---
## Page 369
第87章Oracle的.MSDB文件
845
位数据就是每个信息块里最后一个错误信息的错误编号。
可见，OracleRDBMS通过这部分数据进行快速检索的过程大体如下：
●加载last_ermos（随便起的名字）数据表。这个数据表包含每个信息块里的错误信息总数。
·依据错误编号找到相应的信息块。此处假设各信息块中的信息以错误代码的增序排列。
·加载相应的信息块。
逐一检索6字节的索引信息，
通过当前6字节数据找到字符串的第一个字符的位置。
通过下一个6字节数据找到最后一个字符的位置。
·加载这个区间之内的全部字符。
我编写了一个展开.MSB信息的C语言程序，有兴趣的读者可通过下述网址下载：http:/)beginners.re/
cxamples/oracle/MSB/oracle_msb.c,
本例还用到了Oracle RDBMS11.1.06的两个文件，如需下载请访间：
●go.yurichev.com/17214.
●go.yurichev.com/17215.
总结
对于现在的计算机系统来说，本章介绍的这种方法可能已经落伍了。恐怕只有那些在20世纪80年代中
期做过大型工程、时刻讲究内存和磁盘的利用效率的老古董才会制定这样严谨的文件格式。无论怎样，这
部分内容额具代表性。我们可以在不分析OracleRDBMS代码的前提下理解它的专用文件的文件格式。
---
## Page 371
第十部分
其他
---
## Page 373
第88章
npad
“npad”指令是一种汇编宏，用于把下一个指令标签的首地址向指定边界对齐。
被npad指令对齐的标签，通常都是需要被多次跳转到的地址标签。例如，在各种循环体起始地址处的
标签之前，我们经常可以看到npad指令，它可通过对齐内存地址、内存总线或缓存线等手段，提高CPU
加载数据（或指令代码）的访间效率。
下面这段代码摘自MSVC的文件listing.inc。
顺便提一下，这都是NOP指令的变种。虽然这些指令没有实际的操作意义，但是它们可以占用不同的
空间。
出于CPU性能的考虑，下述代码没有使用多条NOP指令，而是使用了单条指令。
11 LISTING, INC
11 This file contains assenbler macros and is included by the files created
vith the -FA conpiler svitch to be asserbled by MSX (Miczosoft Macre
11 Assenbler) .
:: Copyright (c) 1993-2003, Micro8oft Corporation, Al1 rights reserved.
:: non destruetivenop8
if size eq 1
npad racro size
e1se
nop
if size eq 2
Tp9 *tpe aou
else
if size eq 3
: lea ecx, [ecx+00]
D8 8DH, 49H, 00H
88Ta
if size eq 4
lea esp。[esp+00]
DB 808, 64H, 24H, 00H
if size eq 5
ad eax, DWORD PTR 0
else
if size eg 6
:lea ebx,[ebx+00o00]
DB BDH, 9BH, 00H, OO8, 0OH, 00H
If size eq 7
DB 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H
:leaesp，[esp+00occ0]
if size eg 8
08 0888, 068, 8D8, 988, 008, 008, 008, 008
 jap ,+8; -nped 6
if size eq 9
else
p-+9-npad 7
DB 088H, 078, 8D8, 0A4H, 24H, 00H, 00H, 008, 00H
e150
If aize eq 10
1 jnp +A; -npad 7; -npad 1
---
## Page 374
850
逆向工程权威指南（下册）
D8 0E88, 08H, 801, 0A41, 248, 00H, 00H, 001, 00H, 908
else
If size eq 11
：jnp .+8;.npad 7;.npad 2
DB OEB8, 09H, BDH, 0A4B, 248, 00H, 00H, 00H, 00B, 8B8, 0FFH
else
if size eq 12
1 =p .+C; .npad 71 .npad 3
DB OEBH, 0AH, 8DH, 0A4H, 248, 0OH, 00H, 00H, 00H, SCB, 49H, 00H
else
if size eq 13
DB 0EEH, 0BH, 8DH, 0A4H, 24K, 0GB, 008, 00B, 008, 8DB, 648, 24H, 00R
： jnp .+D: npad 7;.npad 4
else
：p+E:npad 7;npad 5
1f size eq 14
DB 0888, 0CH, 8D, 0A48, 248,008, 008, 008, 008, 058, 008, 008, 008, 008
else
if size eq 15
1ap+7/npad 7,npad 6
D8 O8BH, 0DH, 8DI, 0A4H, 248, 0OB, 0OH, 0OB, 00H, 808, 9BB, 0OH, 0OH, 008, 00H
else
feut
-erT
error: unsupported spad size
endif
endLf
endif
endif
endif
endir
endif
endif
endif
end1f
endif
endif
endif
endif
endir
endm
---
## Page 375
第89章修改可执行文件
89.1文本字特串
除了那些经过加密存储的字符串以外，我们可以使用任何一款的hexcditor直接编辑C字符串。即使
那些不了解机器码和可执行文件具体格式的人，也可以使用这项技术直接编辑可执行程序中的字符串，修
改后的字符串，其长度不得大于原来字符串的长度，否则可能覆盖其他的数据甚至是其他指令。在MS-DOS
盛行的时代，人们普遍使用这种方式直接用译文替换软件中的外文文字。至少在20世纪80年代和90年代
的前苏联，这种技术十分流行。所以，那个时代也出现了各种古灵精怪的超短缩写：预定长度的字符串存
储空间可能容纳不下完整的译文，所以软件翻译人员不得不绞尽脑汁压缩译文的长度，
在修改Delphi程序的字符串时，有时还要调整字符串的长度。
89.2x86指令
修改可执行文件中汇编指令的方式有以下几种：
●禁用某些指令。此时只要使用0x90（NOP）替换相应的汇编指令即可，
●禁用条件转移指令。在修改74xX（JZ）这样的条件转移指令时，我们可以直接把转移指令的2
个字节替换为两个0x90（NOP），也可以把第二个字节（jumpoffset）替换为0，即把偏移量固定
为0
·强制程序进行跳转。有些时候，我们需要把条件转移指令替换为跳转指令，强制其进行跳转。此
时，把opcde的第一个字节替换为JMP的0xEB即可。
·禁用某函数。只要把函数的第一个指令替换为RETN（0xC3），那么它就不会运行。只要程序的
调用约定不是stdcall（第64章第2节），那么这种修改方法都不会有问题，在修改遵循stdcall约
定的函数时，修改人员首先要注意函数参数的数量（可查阅原函数的RETN指令），然后使用带
有16位参数的RETN（0xC2）指令替换函数的第一条指令。
·某些情况下，被禁用的函数必须返回0或1。此时可使用“MOVEAX，0”或“MOVEAX，1”
进行处理。直接使用这两条指令的opcode进行替换时，您会发现其opcode较长。这种情况下就
可以使用“XOR EAX，EAX”（0x310xC0两个字节）或XOR EAX，EAX/INC EAX（0x31 0xC0
0x40三个字节）进行替换。
检验”两个步骤分步实现。即是说，要实现防修改机制，程序首先要读取（加载到内存里的）程序文件。
我们可设置断点，解析其读取内存函数的具体地址。
tracer工具可以满足这种调试需求。它具有BPM（内存断点）功能。
在修改程序时，不得修改PE可执行文件的relocs（参见本书的68.2.6节）。Windows的加载程序会使
用新的代码覆盖这部分代码。如果使用Hiew打开可执行程序，会发现这部分代码以灰色显示（请参考
图7.12）。万不得已的时候，您可使用跳转指令绕过reclos，否则就要编辑relocs的数据表。
---
## Page 376
第90章编译器内部函数
编译器内部函数（compiler intrinsic）是与特定编译器有关的函数，并非寻常的库函数。在编译库函数
时，编译器会调用（call）这个函数：而在编译内部函数时，编译器会使用对应的机器码进行直译。内部函
数通常是与特定CPU特定指令集有关的伪函数。
例如，C/C++语言里没有循环移位运算指令，面多数CPU硬件支持这种指令。为了便于编程人员使用
这种指令，MSVC推出了有关的伪函数_rotl0和_rotr0。在编译这两个函数时，编译器会直接使用x86指令
集中ROL/ROR指令的opcode进行替换。
此外，为了方便程序代码调用SSE指令，MSVC还推出了一些内部函数。
如需查询所有的 MSVC 内部函数，请查间 MSDN 网站：htp:/msdn.microsofL.com/en-us/library/26td21ds.aspx。