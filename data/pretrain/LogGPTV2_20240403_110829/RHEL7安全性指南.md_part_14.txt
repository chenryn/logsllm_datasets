::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sect-Security_Guide-Securing_FTP-Use_TCP_Wrappers_To_Control_Access}4.3.8.4. 使用 TCP Wrapper 控制访问 {.title}
:::
::: para
使用 TCP Wrapper 控制对 FTP 守护进程的访问，如〈[第 4.4.1 节 "使用 TCP
Wrappers 以及 xinetd
保证服务安全"](#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Securing_Services_With_TCP_Wrappers_and_xinetd){.xref}〉所述。
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Securing_Postfix}4.3.9. 保障 Postfix 的安全 {.title}
:::
::: para
Postfix 是邮件传输代理（MTA），它使用简单邮件传输协议（SMTP）在其它 MTA
和电子邮件客户端或者传递代理之间传递电子信息。虽然很多 MTA
都可以在彼此之间加密流量，但大多数并不这样做，因此使用任何公共网络发送电子邮件都被视为不安全的沟通形式。Postfix
替代 Sendmail 成为 Red Hat Enterprise Linux 7 默认的 MTA。
:::
::: para
建议使用 Postfix 服务器的用户解决以下问题。
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sect-Security_Guide-Securing_Postfix-Limiting_a_Denial_of_Service_Attack}4.3.9.1. 限制拒绝服务攻击 {.title}
:::
::: para
因为电子邮件的本质，坚定的攻击者可以极其容易地使用邮件对服务器进行洪水攻击，导致拒绝服务。通过对
`/etc/postfix/main.cf`{.filename}
文件中的指令进行限制设定，可以阻止有效的此类攻击。您可以更改已经存在的指令赋值，或是以下列格式，将所要的值添加到所需的指令中：
``` programlisting
 = 
```
以下一系列指令可用于限制拒绝服务攻击：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `smtpd_client_connection_rate_limit`{.command} ---
    单位时间内，任何客户被允许与这个服务进行的最大连接尝试次数（如下所述）。如果默认值是0，这就意味着在单位时间内，客户可进行的连接次数与
    Postfix
    能接收的连接次数一样多。默认情况下，可排除在信任网络中的客户。
    :::
-   ::: para
    `anvil_rate_time_unit`{.command} ---
    该单位时间可用于进行速率限制计算。默认值是 60 秒。
    :::
-   ::: para
    `smtpd_client_event_limit_exceptions`{.command} ---
    从连接和速率限制命令中所排除的客户。默认情况下，也可排除在信任网络中的客户。
    :::
-   ::: para
    `smtpd_client_message_rate_limit`{.command} ---
    单位时间内，客户被允许进行请求传递信息的最大次数（不管
    Postfix是否真的接收这些信息）。
    :::
-   ::: para
    `default_process_limit`{.command} --- 提供特定服务的 Postfix
    子进程默认的最大值。这种限制可能因为在 `master.cf`{.filename}
    文件中的特定服务而取消。默认情况下，赋值为 100。
    :::
-   ::: para
    `queue_minfree`{.command} ---
    在队列文件系统中，接收邮件所需的最小可用空间（以字节为单位）。Postfix
    SMTP
    服务器当前使用此指令来决定是否可以接收任何邮件。默认情况下，当可用空间的最小值小于
    message_size_limit 的 1.5 倍时， Postfix SMTP 服务器则会拒绝
    `MAIL FROM`{.command}
    指令。要具体制定一个更高的可用空间最小值限定，则须具体制定一个
    queue_minfree 值，其大小至少是 message_size_limit 的 1.5
    倍。默认情况下，queue_minfree 值是 0。
    :::
-   ::: para
    `header_size_limit`{.command} ---
    用于储存信息标题的最大内存（以字节为单位）。如果标题太大，那么超出的部分就会被舍弃。默认情况下，赋值为
    102400。
    :::
-   ::: para
    `message_size_limit`{.command} ---
    信息的最大值（以字节为单位），包括信封信息。默认情况下，赋值为
    10240000。
    :::
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sect-Security_Guide-Securing_Postfix-NFS_and_Postfix}4.3.9.2. NFS 以及 Postfix {.title}
:::
::: para
请勿将邮件 spool 目录，`/var/spool/postfix/`{.filename}，放到 NFS
共享卷上。因为 NFSv2 和 NFSv3 不会保持对用户 ID 和组群 ID
的控制，所以两个或者更多用户可以有相同的 UID，并接收和读取彼此的邮件。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
在 NFSv4 中使用 Kerberos，就不会出现这种情况。因为
`SECRPC_GSS`{.filename} 内核模块不会根据 UID
进行认证。但是，最好还是"[*不要*]{.emphasis}"将邮件池目录放到 NFS
共享卷中。
:::
:::
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sect-Security_Guide-Securing_Postfix-Mail_only_Users}4.3.9.3. 只使用邮件的用户 {.title}
:::
::: para
要防止本地用户利用 Postfix
服务器上的漏洞，那么最好是让邮件用户只能使用电子邮件程序访问 Postfix
服务器。应该禁止邮件服务器上的 shell
帐户访问，并且`/etc/passwd`{.filename} 文件中的所有 shell 用户都应设定到
`/sbin/nologin`{.command} 中（可能除了 root 用户之外）。
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sect-Security_Guide-Disable_Postfix_Network_Listening}4.3.9.4. 禁用 Postfix 网络侦听 {.title}
:::
::: para
默认情况下，Postfix 被设定为只侦听本地回路地址。您可以通过查看
`/etc/postfix/main.cf`{.filename} 文件来核实这一点。
:::
::: para
查看 `/etc/postfix/main.cf`{.filename} 文件，以确保只出现下列
*`inet_interfaces`* 命令行：
``` screen
inet_interfaces = localhost
```
:::
::: para
这确保 Postfix
只接收来自本地系统而非来自网络的邮件信息（比如定时任务报告）。这是默认设置，并且保护
Postfix 免受网络攻击。
:::
::: para
*`inet_interfaces = all`* 设置可用于删除本地主机限制，并且允许Postfix
侦听所有接口。
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Securing_SSH}4.3.10. 保障 SSH {.title}
:::
::: para
*Secure Shell*
（``{=html}SSH``{=html}）是一个强大的网络协议，可通过安全的渠道与其他系统进行通讯。通过
`SSH`{.systemitem} 的传输都经过加密，可避免被拦截。关于
`SSH`{.systemitem} 协议，以及在 Red Hat Enterprise Linux 7
中如何使用`SSH`{.systemitem} 服务的常用信息，请参阅《[红帽企业版 Linux 7
系统管理员指南](https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/index.html)》。
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
此章节特别关注于保障 `SSH`{.systemitem}
安全设置的最常用方法。这张列表中所推荐方法绝不可认为是详尽的，或是最权威的方法。关于可用于修改
`sshd`{.systemitem} 守护进程的所有配置指令，请参阅
`sshd_config(5)`{.command} ；关于 `SSH`{.systemitem}
基本概念的详细介绍，请参阅 `ssh(1)`{.command} 。
:::
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Securing_SSH-Cryptographic_Login}4.3.10.1. 加密登录 {.title}
:::
::: para
`SSH`{.systemitem}
支持使用加密密钥登录电脑。这比只使用密码要更安全。如果您可以把这种方法与其他受到认证的方法相结合，那么这就被认为是多因素认证。有关如何使用多种认证方法的更多信息，请参阅〈[第 4.3.10.2 节
"多种认证方法"](#chap-Hardening_Your_System_with_Tools_and_Services.html#Securing_SSH-Multi_Auth_Methods){.xref}〉。
:::
::: para
为了启用加密密钥进行认证， 在 `/etc/ssh/sshd_config`{.filename}
文件中的`PubkeyAuthentication`{.option} 配置指令需要设定为
`yes`{.literal}。请注意，这是默认设置。把
`PasswordAuthentication`{.option} 指令设定为 `no`{.literal}
，则会消除使用密码登录的可能性。
:::
::: para
使用 `ssh-keygen`{.command} 命令可以生成`SSH`{.systemitem}
密钥。如果在没有其它参数的情况下，调用 SSH 密钥，则会生成 2048
位``{=html}RSA``{=html}
密钥集。在默认情况下，密钥储存在 `~/.ssh`{.filename} 目录中。您可以使用
`-b`{.option} 切换更改密钥强度。正常情况下，使用 2048
位密钥就足够了。《[红帽企业版 Linux 7
系统管理手册](https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/index.html)》包含了有关生成密钥对的详细信息。
:::
::: para
在`~/.ssh`{.filename}目录中，您应该会看到两个密钥。当运行`ssh-keygen`{.command}
命令时，如果您接受这种默认情况，那么所生成文件就会命名为
`id_rsa`{.filename} 和 `id_rsa.pub`{.filename}
，并且分别含有公钥和私钥。您应当随时保护私钥，将其设置为除文件所有者外其他任何人都不可读取，使其免于暴露。然而，公钥则需要传送到您将要登录的系统。您可以使用`ssh-copy-id`{.command}
命令来传送密钥至服务器：
:::
``` screen
~]$ ssh-copy-id -i [user@]server
```
::: para
这个命令会自动把公钥添加到*服务器*上的
`~/.ssh/authorized_key`{.filename} 文件中。当您试图登录服务器时，
`sshd`{.systemitem} 守护进程就会检查此文件。
:::
::: para
同样地，对于密码以及其他认证机制，您也应该时常更改 `SSH`{.systemitem}
密钥。当您这样做的时候，请确保从`authorized_key`{.filename}
文件中移除所有不用的密钥。
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Securing_SSH-Multi_Auth_Methods}4.3.10.2. 多种认证方法 {.title}
:::
::: para
使用多种认证方法或者多因素认证，会提升保护水平以防止未经授权的访问；强化系统以防止被入侵，也可起到同样的效果。尝试使用多因素认证登录系统的用户，必须成功通过所有指定的认证方法，才能得到授权进行访问。
:::
::: para
使用 `/etc/ssh/sshd_config`{.filename} 文件中的
`AuthenticationMethods`{.option}
配置指令，可指定要使用的认证方法。请注意，使用此指令可以定义多份所需的认证方法列表。如果是那样的话，用户必须在完成至少一份列表上的每种方法。列表需用空格进行分隔，且列表中，每个认证方法的名称必须用逗号分隔。例如：
:::
``` screen
AuthenticationMethods publickey,gssapi-with-mic publickey,keyboard-interactive
```
::: para
如果尝试登录成功的用户是通过 `publickey`{.literal} 认证和
`gssapi-with-mic`{.literal} 认证，或是 `publickey`{.literal} 认证和
`keyboard-interactive`{.literal} 认证，那么只有使用上述的
`AuthenticationMethods`{.option} 指令进行配置的 `sshd`{.systemitem}
守护进程才能得到授权进行访问。请注意，每个所要求的认证方法都要使用对应的配置指令（例如，
`/etc/ssh/sshd_config`{.filename}
文件中的`PubkeyAuthentication`{.option}），方可准确地启用。关于可用认证方法的常用列表，请参阅
`ssh(1)`{.command} 的〈*AUTHENTICATION*〉章节。
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#Securing_SSH-Other_Ways}4.3.10.3. 其他方法保障 SSH 安全 {.title}
:::
##### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#idm140694684844976}协议版本