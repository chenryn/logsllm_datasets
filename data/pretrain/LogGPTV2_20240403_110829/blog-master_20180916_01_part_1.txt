## PostgreSQL 11 100亿 tpcb 性能测试 on ECS  
### 作者                                                                 
digoal                                                                 
### 日期                                                                 
2018-09-16                                                               
### 标签                                                                 
PostgreSQL , tpcb , pgbench , 100亿    
----                                                                 
## 背景    
PostgreSQL 11 发布在即，以下是tpcc与tpch测试的结果：  
[《PostgreSQL 11 tpcc 测试(103万tpmC on ECS) - use sysbench-tpcc by Percona-Lab》](../201809/20180913_01.md)    
[《(TPC-H测试 SF=10,SF=200) PostgreSQL 11 vs 10 vs Deepgreen》](../201808/20180823_01.md)    
tpcb是pgbench标准测试CASE，本文使用与以上同样的测试机器（部署方式请参考以上），测试100亿tpch的性能。  
## 参数  
1、postgresql.auto.conf  
```  
listen_addresses = '0.0.0.0'    
port = 1921    
max_connections = 2000    
superuser_reserved_connections = 13    
unix_socket_directories = '., /var/run/postgresql, /tmp'    
tcp_keepalives_idle = 60    
tcp_keepalives_interval = 10    
tcp_keepalives_count = 10    
shared_buffers = 64GB    
max_prepared_transactions = 2000    
work_mem = 8MB    
maintenance_work_mem = 2GB    
dynamic_shared_memory_type = posix    
vacuum_cost_delay = 0    
bgwriter_delay = 10ms    
bgwriter_lru_maxpages = 1000    
bgwriter_lru_multiplier = 10.0    
effective_io_concurrency = 0    
max_worker_processes = 128    
max_parallel_maintenance_workers = 24    
max_parallel_workers_per_gather = 0    
parallel_leader_participation = on    
min_parallel_table_scan_size=0  
min_parallel_index_scan_size=0  
parallel_setup_cost=0  
parallel_tuple_cost=0  
max_parallel_workers = 64    
wal_level = minimal      
synchronous_commit = off    
wal_writer_delay = 10ms    
checkpoint_timeout = 35min    
max_wal_size = 128GB    
min_wal_size = 32GB    
checkpoint_completion_target = 0.1    
max_wal_senders = 0    
effective_cache_size = 400GB    
log_destination = 'csvlog'    
logging_collector = on    
log_directory = 'log'    
log_filename = 'postgresql-%a.log'    
log_truncate_on_rotation = on    
log_rotation_age = 1d    
log_rotation_size = 0    
log_checkpoints = on     
log_connections = on    
log_disconnections = on    
log_error_verbosity = verbose     
log_line_prefix = '%m [%p] '    
log_timezone = 'PRC'    
log_autovacuum_min_duration = 0    
autovacuum_max_workers = 16    
autovacuum_freeze_max_age = 1200000000    
autovacuum_multixact_freeze_max_age = 1400000000    
autovacuum_vacuum_cost_delay = 0ms    
vacuum_freeze_table_age = 1150000000    
vacuum_multixact_freeze_table_age = 1150000000    
datestyle = 'iso, mdy'    
timezone = 'PRC'    
lc_messages = 'C'    
lc_monetary = 'C'    
lc_numeric = 'C'    
lc_time = 'C'    
default_text_search_config = 'pg_catalog.english'    
jit = off    
cpu_tuple_cost=0.00018884145574257426      
cpu_index_tuple_cost = 0.00433497085216479990      
cpu_operator_cost = 0.00216748542608239995      
seq_page_cost=0.014329      
random_page_cost = 0.016   
```  
## 测试  
### 初始100亿数据  
使用pgbench 初始化100亿tpcb测试数据。  
man pgbench  
```  
-i  
--initialize  
    Required to invoke initialization mode.  
-I init_steps  
--init-steps=init_steps  
    Perform just a selected set of the normal initialization steps.    
    init_steps specifies the initialization steps to be performed,   
    using one character per step. Each step is invoked in the specified order.   
    The default is dtgvp.   
    The available steps are:  
    d (Drop)  
        Drop any existing pgbench tables.  
    t (create Tables)  
        Create the tables used by the standard pgbench scenario,   
	namely pgbench_accounts, pgbench_branches, pgbench_history,   
	and pgbench_tellers.  
    g (Generate data)  
        Generate data and load it into the standard tables,   
	replacing any data already present.  
    v (Vacuum)  
        Invoke VACUUM on the standard tables.  
    p (create Primary keys)  
        Create primary key indexes on the standard tables.  
    f (create Foreign keys)  
        Create foreign key constraints between the standard tables.   
	(Note that this step is not performed by default.)  
```  
初始化  
```  
pgbench -i -s 100000 -I dtg -n --tablespace=tbs2   
```  
耗时8385秒，约119万行/s。  
```  
9998500000 of 10000000000 tuples (99%) done (elapsed 8384.23 s, remaining 1.26 s)  
9998600000 of 10000000000 tuples (99%) done (elapsed 8384.31 s, remaining 1.17 s)  
9998700000 of 10000000000 tuples (99%) done (elapsed 8384.40 s, remaining 1.09 s)  
9998800000 of 10000000000 tuples (99%) done (elapsed 8384.48 s, remaining 1.01 s)  
9998900000 of 10000000000 tuples (99%) done (elapsed 8384.56 s, remaining 0.92 s)  
9999000000 of 10000000000 tuples (99%) done (elapsed 8384.65 s, remaining 0.84 s)  
9999100000 of 10000000000 tuples (99%) done (elapsed 8384.73 s, remaining 0.75 s)  
9999200000 of 10000000000 tuples (99%) done (elapsed 8384.82 s, remaining 0.67 s)  
9999300000 of 10000000000 tuples (99%) done (elapsed 8384.90 s, remaining 0.59 s)  
9999400000 of 10000000000 tuples (99%) done (elapsed 8384.98 s, remaining 0.50 s)  
9999500000 of 10000000000 tuples (99%) done (elapsed 8385.07 s, remaining 0.42 s)  
9999600000 of 10000000000 tuples (99%) done (elapsed 8385.15 s, remaining 0.34 s)  
9999700000 of 10000000000 tuples (99%) done (elapsed 8385.24 s, remaining 0.25 s)  
9999800000 of 10000000000 tuples (99%) done (elapsed 8385.33 s, remaining 0.17 s)  
9999900000 of 10000000000 tuples (99%) done (elapsed 8385.41 s, remaining 0.08 s)  
10000000000 of 10000000000 tuples (100%) done (elapsed 8385.49 s, remaining 0.00 s)  
```  
### 创建索引  
1、强制设置并行度为24，a,b,c,d取最小  
```  
alter table pgbench_accounts set (parallel_workers =32);  # a  
```  
```  
max_worker_processes = 128   # b  
max_parallel_maintenance_workers = 24   # c  
max_parallel_workers = 64   # d  
max_parallel_workers_per_gather = 0    
min_parallel_table_scan_size=0  
min_parallel_index_scan_size=0  
parallel_setup_cost=0  
parallel_tuple_cost=0  
```  
2、创建tpcb数据表索引，100亿记录，创建索引耗时44分钟。  
```  
pgbench -i -I p --index-tablespace=tbs1  
```  
IO监测  
```  
Total DISK READ :       2.77 G/s | Total DISK WRITE :       2.86 G/s  
Actual DISK READ:       2.79 G/s | Actual DISK WRITE:    1795.02 M/s  
  TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO>    COMMAND                                                                                                                                                                         
13683 be/4 postgres  142.87 M/s  141.55 M/s  0.00 %  1.47 % postgres: parallel worker for PID 13655  
13684 be/4 postgres  114.55 M/s  124.78 M/s  0.00 %  1.07 % postgres: parallel worker for PID 13655          
13686 be/4 postgres  163.22 M/s  165.50 M/s  0.00 %  0.64 % postgres: parallel worker for PID 13655  
13671 be/4 postgres  162.38 M/s  165.76 M/s  0.00 %  0.49 % postgres: parallel worker for PID 13655  
13676 be/4 postgres  169.80 M/s  169.31 M/s  0.00 %  0.45 % postgres: parallel worker for PID 13655          
13672 be/4 postgres  160.74 M/s  165.52 M/s  0.00 %  0.41 % postgres: parallel worker for PID 13655  
13685 be/4 postgres  174.74 M/s  177.10 M/s  0.00 %  0.37 % postgres: parallel worker for PID 13655  
13687 be/4 postgres  172.48 M/s  173.00 M/s  0.00 %  0.36 % postgres: parallel worker for PID 13655  
13677 be/4 postgres  116.31 M/s  124.28 M/s  0.00 %  0.35 % postgres: parallel worker for PID 13655  
13680 be/4 postgres  165.52 M/s  177.19 M/s  0.00 %  0.34 % postgres: parallel worker for PID 13655  
13674 be/4 postgres  167.31 M/s  169.44 M/s  0.00 %  0.12 % postgres: parallel worker for PID 13655  
13655 be/4 postgres  114.55 M/s  122.85 M/s  0.00 %  0.05 % postgres: postgres postgres [local] ALTER TABLE  
13678 be/4 postgres  175.54 M/s  177.10 M/s  0.00 %  0.04 % postgres: parallel worker for PID 13655  
13670 be/4 postgres  127.29 M/s  126.61 M/s  0.00 %  0.01 % postgres: parallel worker for PID 13655  
13682 be/4 postgres  162.41 M/s  165.74 M/s  0.00 %  0.00 % postgres: parallel worker for PID 13655          
13673 be/4 postgres  145.02 M/s  152.94 M/s  0.00 %  0.00 % postgres: parallel worker for PID 13655          
13675 be/4 postgres  167.42 M/s  169.41 M/s  0.00 %  0.00 % postgres: parallel worker for PID 13655  
13679 be/4 postgres  117.00 M/s  128.97 M/s  0.00 %  0.00 % postgres: parallel worker for PID 13655  
13681 be/4 postgres  121.97 M/s  132.34 M/s  0.00 %  0.00 % postgres: parallel worker for PID 13655  
13642 be/4 postgres    0.00 B/s    0.00 B/s  0.00 %  0.00 % postgres: logical replication launcher  
13634 be/4 postgres    0.00 B/s    0.00 B/s  0.00 %  0.00 % postgres  
13635 be/4 postgres    0.00 B/s    0.00 B/s  0.00 %  0.00 % postgres: logger  
13637 be/4 postgres    0.00 B/s    0.00 B/s  0.00 %  0.00 % postgres: checkpointer  
13638 be/4 postgres    0.00 B/s    0.00 B/s  0.00 %  0.00 % postgres: background writer  
13639 be/4 postgres    0.00 B/s    0.00 B/s  0.00 %  0.00 % postgres: walwriter  
13640 be/4 postgres    0.00 B/s    0.00 B/s  0.00 %  0.00 % postgres: autovacuum launcher  
13641 be/4 postgres    0.00 B/s    0.00 B/s  0.00 %  0.00 % postgres: stats collector  
```  
耗时，43分50秒左右。  