12.  Save your configuration changes once again and run the Prometheus application from the command line, as shown here:
    ```
    ./prometheus --config.file=prometheus.yml
    ```
    如果您现在查看普罗米修斯网络界面上可用的`Targets`，您应该会看到类似于下面的内容，显示`cAdvisor`也在我们的界面上可用:
    ![Figure 13.9: Prometheus Targets page with cAdvisor added ](img/B15021_13_09.jpg)
    图 13.9:添加了 cAdvisor 的普罗米修斯目标页面
13.  With the `Targets` page of Prometheus showing that `cAdvisor` is now available and connected, it verifies that Prometheus is now collecting metrics data from `cAdvisor`. You can also test this from the expression browser to verify it is working as it should. Move into the expression browser by selecting `Graphs` or `Prometheus` from the top menu. When the page loads, add the following PromQL query to the query editor and click the `Execute` button:
    ```
    (time() - process_start_time_seconds{instance="0.0.0.0:8080",job="cadvisor"})
    ```
    注意
    我们开始使用一些更高级的 PromQL 查询，它看起来可能有点混乱。本章的下一部分致力于让您更好地理解 PromQL 查询语言。
    该查询使用`process_start_time_seconds`度量，特别是针对`cAdvisor`应用和`time()`函数来添加总秒数。您应该会在表达式浏览器上看到类似以下的结果:
    ![Figure 13.10: cAdvisor uptime from the expression browser ](img/B15021_13_10.jpg)
图 13.10:表达式浏览器的 cAdvisor 正常运行时间
通过这个练习，我们现在有了一个正在运行的普罗米修斯实例，并且正在从 Docker 守护程序收集数据。我们还设置了`cAdvisor`来给我们一些关于正在运行的容器实例的进一步信息。本章的下一部分将更深入地讨论 PromQL 查询语言，以帮助您更轻松地查询 Prometheus 提供的指标。
# 理解普罗米修斯查询语言
正如我们在本章前面部分看到的，普罗米修斯提供了自己的查询语言 PromQL。它允许您搜索、查看和聚合普罗米修斯数据库中存储的时间序列数据。本节帮助您进一步理解查询语言。普罗米修斯中有四种核心度量类型，我们将从描述每一种开始。
## 计数器
计数器随着时间对元素进行计数；例如，这可能是访问您的网站的次数。当服务或应用重新启动时，计数只会上升或重置。它们适用于计算某个时间点上特定事件的数量。每次计数器改变时，数字也会反映在您收集的数据中。
计数器通常以`_total`后缀结束。但是由于计数器的性质，每次服务重新启动时，计数器将被设置回 0。在我们的查询中使用`rate()`或`irate()`函数，我们将能够查看一段时间内的度量率，并忽略计数器重置为 0 的任何时间。`rate()`和`irate()`函数都使用方括号`[ ]`取一个数值范围，其中指定了一个时间值，如`[1m]`。
如果您对我们正在收集的数据中的计数器示例感兴趣，请在网址`http://0.0.0.0:8080/metrics`上打开`cAdvisor`正在收集的数据的指标页面。首先提供的指标之一是`container_cpu_system_seconds_total`。如果我们浏览指标页面，我们将看到此处列出的指标值和类型的信息:
```
# HELP container_cpu_system_seconds_total Cumulative system cpu time 
consumed in seconds.
# TYPE container_cpu_system_seconds_total counter
container_cpu_system_seconds_total{id="/",image="",name=""} 
195.86 1579481501131
…
```
现在，我们将研究普罗米修斯公司提供的第二种公制类型，换句话说，就是仪表。
## 仪表
仪表被设计用来处理可能随时间而减少的值，并且被设计用于任何暴露事物当前状态的度量。就像温度计或燃油表一样，你可以看到当前的状态值。仪表的功能受到限制，因为并非所有数据都将被收集，因为时间点之间可能会有缺失值。因此，它们不如计数器可靠，因此计数器仍然用于数据的时间序列表示。
如果我们再次转到`cAdvisor`的指标页面，您可以看到我们的一些指标显示为指标。我们首先看到的指标之一是`container_cpu_load_average_10s`，它是作为一个标准提供的，类似于以下值:
```
# HELP container_cpu_load_average_10s Value of container cpu load 
average over the last 10 seconds.
# TYPE container_cpu_load_average_10s gauge
container_cpu_load_average_10s{id="/",image="",name=""} 0 
1579481501131
…
```
下一节将带您浏览直方图，这是普罗米修斯中可用的第三种度量。
## 直方图
直方图比计量器和计数器复杂得多，并且提供额外的信息，比如观察值的总和。它们用于提供一组数据的分布。直方图使用采样，可用于估计普罗米修斯服务器上的分位数。
直方图不如仪表和计数器常见，似乎也不是为`cAdvisor`设置的，但是我们可以在我们的 Docker 守护程序度量中看到一些可用的直方图。移动到网址`http://0.0.0.0:9191/metrics`你将能够看到首先列出的直方图指标之一是`engine_daemon_container_actions_seconds`。这是 Docker 守护程序处理每个操作所需的秒数:
```
# HELP engine_daemon_container_actions_seconds The number of seconds 
it takes to process each container action
# TYPE engine_daemon_container_actions_seconds histogram
engine_daemon_container_actions_seconds_bucket{action="changes",
le="0.005"} 1
…
```
下一节将介绍第四种可用的度量类型，换句话说，总结。
## 总结
摘要是直方图的扩展，是在客户端计算的。它们的优点是更准确，但对客户来说也很昂贵。我们可以在 Docker 守护进程度量中看到一个摘要示例，这里列出了`http_request_duration_microseconds`:
```
# HELP http_request_duration_microseconds The HTTP request latencies in microseconds.
# TYPE http_request_duration_microseconds summary
http_request_duration_microseconds{handler="prometheus",quantile=
"0.5"} 3861.5
…
```
现在，既然我们已经解释了 PromQL 中可用的度量类型，我们可以进一步了解如何将这些度量作为查询的一部分来实现。
# 执行 PromQL 查询
在表达式浏览器上运行查询很容易，但您可能并不总能获得所需的信息。通过简单地添加度量名称，比如`countainer_cpu_system_seconds_total`，我们可以得到相当多的响应。尽管如此，这个数量取决于我们系统上的容器数量以及我们主机系统上运行的每个文件系统的返回值。为了限制我们的结果中提供的响应数量，我们可以使用花括号`{ }`搜索特定的文本。
考虑下面的例子。以下命令提供了我们希望查看的`"cadvisor"`容器的全名:
```
container_cpu_system_seconds_total{ name="cadvisor"}
```
以下示例使用与 GO 兼容的正则表达式。该命令查找任何以`ca`开头并在其后有更多字符的名称:
```
container_cpu_system_seconds_total{ name=~"ca.+"} 
```
下面的代码片段通过使用不等于(`!=`)值来搜索名称值不为空的任何容器:
```
container_cpu_system_seconds_total{ name!=""}
```
如果我们将这些度量搜索中的任何一个放在表达式浏览器中，并创建一个图表，您会注意到图表会随着时间的推移以线性方式攀升。正如我们前面提到的，这是因为度量`container_cpu_system_seconds_total`是一个计数器，只会随着时间的推移而增加或被设置回零。利用函数，我们可以计算出更多有用的时间序列数据。以下示例使用`rate()`函数计算匹配时间序列数据的每秒速率。我们用了`[1m]`，代表 1 分钟。数字越大，图形越平滑:
```
rate(container_cpu_system_seconds_total{name="cadvisor"}[1m])
```
`rate`功能只能用于计数器指标。如果我们有多个容器在运行，那么我们可以使用`sum()`函数将所有值相加，并使用`(name)`函数按容器名称提供一个图表，如这里所示:
```
sum(rate(container_cpu_system_seconds_total[1m])) by (name)
```
注意
如果您想查看 PromQL 中所有可用功能的列表，请访问 Prometheus 官方文档提供的以下链接:
https://prometheus.io/docs/prometheus/latest/querying/functions/.
PromQL 还允许我们根据查询进行算术运算。在下面的例子中，我们使用`process_start_time_seconds`度量并搜索普罗米修斯实例。我们可以从`time()`函数中减去这个时间，该函数给出了纪元时间中的当前日期和时间:
```
(time() - process_start_time_seconds{instance="localhost:9090",job="prometheus"})
```
注意
Epoch time 是从 1970 年 1 月 1 日开始的秒数，用数字表示；例如，1578897429 被转换为 2020 年 1 月 13 日上午 6:37(格林尼治标准时间)。
我们希望 PromQL 中的这本入门书能让您对在项目中使用查询语言有更多的了解。下面的练习将通过进一步监控我们正在运行的 Docker 容器来帮助巩固我们所学到的知识。
## 练习 13.03:使用 PromQL 查询语言
在下面的练习中，我们将在您的系统中引入一个新的 Docker 映像，以帮助您演示在使用 Prometheus 时 Docker 特有的一些可用指标。本练习将通过收集和显示基本网站的指标数据的实际用例，巩固您迄今为止对 PromQL 查询语言的了解:
1.  打开一个新终端，新建一个目录，称之为`web-nginx` :
    ```
    mkdir web-nginx; cd web-nginx
    ```
2.  在`web-nginx`目录下新建一个文件，称之为`index.html`。用文本编辑器打开新文件，并添加以下 HTML 代码:
    ```
            Hello Prometheus
    ```
3.  使用以下命令运行一个新的 Docker 容器。现在，您应该已经熟悉了语法，但是下面的命令将拉取最新的`nginx`映像，将其命名为`web-nginx`，并暴露端口`80`，这样您就可以查看您在上一步中创建的挂载的`index.html`文件:
    ```
    docker run --name web-nginx --rm -v ${PWD}/index.html:/usr/share/nginx/html/index.html -p 80:80 -d nginx
    ```
4.  Open a web browser and access `http://0.0.0.0`. The only thing you should see is the greeting `Hello Prometheus`:
    ![Figure 13.11: Sample web page ](img/B15021_13_11.jpg)
    图 13.11:示例网页
5.  If Prometheus is not running on your system, open a new terminal and, from the Prometheus application directory, start the application from the command line:
    ```