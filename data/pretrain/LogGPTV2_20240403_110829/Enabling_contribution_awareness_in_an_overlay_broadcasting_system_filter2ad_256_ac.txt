### 3. Evaluation Metrics

- **Reduction in Trees**: This metric measures the percentage of reductions in the number of trees a user is connected to. However, it does not distinguish between different types of reductions. For example, in a forest of four trees, a reduction from four to three trees is treated the same as a reduction from one to zero trees. Therefore, a reduction does not necessarily indicate a significant drop in quality.
  
- **Reconnection Time**: When a node is disconnected from a tree, it should be able to reconnect quickly. This may involve preempting nodes of lower priority or locating an unused slot. The time between tree reductions measures how frequently a user experiences a dip in performance, while this metric describes how long such a dip persists.

- **Utilization**: This metric is computed as the total bandwidth consumed by all hosts over the total forwarding limits of the hosts at a given time. It indicates the fraction of system resources that are being correctly located and leveraged.

### 5.2 Experimental Methodology

Our study is based on real-world traces obtained from previous operational deployments of the ESM Broadcasting System [6]. Each trace lasts for several hours, and it is not feasible to emulate the full duration. Thus, for each trace, we select a twenty-minute segment with characteristics shown in Table 2. High-speed and low-speed hosts are generally behind Ethernet and asymmetric DSL/cable connections, respectively. The traces include the join/leave patterns of different nodes, as well as estimates of the outgoing bandwidth of each node.

To quantify the resources available in these traces, we introduce the Resource Index (RI) [6], defined as the total forwarding capacity in the system divided by the bandwidth required for all hosts to receive the full source rate. Traces with an RI above one are classified as resource-rich, and those below one as resource-scarce.

The primary trace used for evaluation is the Slashdot trace, which represents a resource-scarce broadcast to an interest group where the majority of hosts are behind DSL. SIGCOMM2002 and SOSP2003 are broadcasts of conferences, and thus have a much larger fraction of hosts behind high-bandwidth university machines, representing resource-rich environments. GrandChallenge is a broadcast of a vehicular competition, and Rally refers to a broadcast of an election campaign, both representing resource-scarce environments. We focus our evaluation on the Slashdot trace and use other traces to study the sensitivity of our systems to various operating environments.

Figure 3 shows the RI as a function of time for the five trace segments. We emulate the traces by mapping each client to a PlanetLab host and using the same client join/leave patterns as in the trace segments to drive the experiment. Furthermore, we emulate DSL/cable and Ethernet hosts with degrees of 0.25 and 2, respectively.

For each experiment, four multicast trees are formed. Although more trees could improve the granularity of bandwidth distribution, network and video-codec overheads increase with the number of trees. We consider four trees to be small enough to be efficient while large enough to provide reasonable flexibility in varying the bandwidth. We use a source data rate of 400 kbps, a typical size for streaming videos on the Internet [6]. The source streams a stripe of 100 kbps to each tree. Clients present before the start of the segment join the broadcast in a burst and begin contributing to their respective Contributor trees. We allow them 2 minutes to reach a steady state, after which the rest of the clients follow the join/leave patterns in the trace for the next 20 minutes, and experimental data is collected over that period.

Hosts with mean contributions greater than 700 kbps are considered High Contributors (HC), and those with mean contributions between 75 and 100 kbps are considered Low Contributors (LC). This categorization helps us evaluate the performance of hosts with different contribution levels separately. Each result is aggregated or averaged over three runs with a consistent set of PlanetLab machines. When presenting results, we filter out hosts that stay for less than 2 minutes to highlight the results for hosts that participate for a reasonable amount of time. The impact of node stay time is studied in Section 6.2.

### 6. Experimental Results

We begin by showing the behavior of a typical host under the Cont-Aware system in a resource-scarce environment using the Slashdot trace in Section 6.1. Next, under the same setting, we compare the performance and average time between reductions in the number of trees of hosts in Cont-Aware to those in Cont-Agnostic in Sections 6.2 and 6.3, followed by a detailed evaluation of various key design components in Section 6.5. Section 6.6 explores how Cont-Aware behaves in different operating environments.

#### 6.1 Results with a Typical Run

Figure 4 shows the performance of a typical high contributor in our system. The node begins by making zero contribution and connecting to its Contributor tree. Over the next minute, the number of children the node supports goes from zero to eight. As the number of adopted children increases, the number of successfully connected trees also increases quickly, as the node becomes entitled to them. The actual performance fluctuates due to the fact that ESM uses non-blocking TCP to transfer data across each overlay link, leading to burstiness in the received bandwidth.

[Figure 4: Behavior of a typical high contributor under Cont-Aware. The top curve shows the bandwidth contributed, the solid curve shows the Entitled bandwidth, and the dashed line shows the actual bandwidth received.]

Note that because we smooth away transient drops in contribution, the sudden loss of children between 255 and 300 seconds does not impact performance, and the node quickly acquires new children. The node is briefly disconnected from one tree at 250 seconds, as shown by a 100 kbps dip of the solid line. This is due to the departure of the node’s parent. However, because the node is contributing significantly to the system, the recovery time is very brief—the node finds a new location in the tree in under 6 seconds.

#### 6.2 System Performance

In this section, we evaluate how well Cont-Aware leverages system resources and distributes them based on the contribution of each host compared to Cont-Agnostic. Specifically, hosts with similar contributions should see similar performance, and hosts with higher contributions should see equal or better performance than those with lower contributions.

[Figure 5: Cumulative distribution of average received bandwidth for high contributors.]

Figure 5 plots the cumulative distribution of the mean session bandwidth of high contributors for the two schemes: Cont-Aware and Cont-Agnostic. There are two curves, each corresponding to one scheme. The y-axis is the CDF, and the x-axis is the mean bandwidth ranging from 0 to 400 kbps (i.e., source rate). The more a curve is toward the right, the better the overall performance is. Cont-Aware significantly improves the performance of high contributors, with 80% of them receiving the source rate of 400 kbps. In contrast, Cont-Agnostic allows only 20% of high contributors to receive the source rate. Furthermore, almost all high contributors under Cont-Aware obtain bandwidth greater than 350 kbps, whereas Cont-Agnostic does much worse, with only half of high contributors receiving more than 350 kbps. By prioritizing high contributors, Cont-Aware allocates about two more stripes to each high contributor than Cont-Agnostic.

[Figure 6: Cumulative distribution of average received bandwidth for low contributors.]

While Figure 5 plots the mean bandwidth CDF for high contributors alone, Figure 6 plots the same type of graph but for low contributors. We see that with Cont-Agnostic, almost all low contributors receive anywhere from 100 kbps up to the source rate. Cont-Aware reduces this spread to 200-350 kbps, bringing the performance of all low contributors toward the mean. This shows that Cont-Aware enables nodes contributing similarly to receive similar bandwidth.

To quantify this observation, we compute the mean and standard deviation of both curves and find that although low contributors in both schemes receive a mean bandwidth around 300 kbps, with Cont-Aware, the standard deviation significantly drops from 80.5 to 34.8.

When looking at Figures 5 and 6 together, we see that Cont-Agnostic gives high and low contributors a similar allocation pattern, while Cont-Aware treats high contributors more favorably. Figure 5 also suggests that Cont-Aware reduces the performance spread for high contributors. Furthermore, all low contributors under Cont-Aware receive at least one stripe of 100 kbps. Thus, we conclude that our contribution-aware heuristics achieve equitable and differential distribution of bandwidth based on nodes’ contributions while offering some minimum guarantee on performance for low contributors. This offers incentives for nodes to contribute more and keep low contributors interested in the broadcast.

One question is whether it is possible to make the distribution among low contributors in Cont-Aware even more equitable, in which case most of them should receive closer to the average bandwidth of 300 kbps. We see various reasons for this. First, we are limited by the granularity imposed by the multi-tree framework, and more equality could result if more trees are created. Second, some clients are limited by the bandwidth near them, and there are issues related to our experimental setup, as several clients may be mapped to the same PlanetLab machine and compete for incoming bandwidth, causing them to underperform. Third, there are convergence issues: short-lived low contributors do not remain in the system long enough to connect to their Excess trees, and due to the distributed nature of the system, resources are not always quickly located. In an extreme case, an Excess node that fails frequently on consecutive attempts may not be able to recover quickly.

[Figure 7: Cumulative distribution of received bandwidth for LC staying for more than 0, 2, and 5 minutes.]

Figure 7 shows the cumulative distribution of received bandwidth for low contributors staying for more than 0, 2, and 5 minutes. This further illustrates the impact of node stay time on performance.