# pyc文件
code object
===
> 在我们导入 python 脚本时在目录下会生成个一个相应的 pyc 文件，是pythoncodeobj的持久化储存形式,加速下一次的装载。
## 文件结构
pyc文件由三大部分组成
- 最开始4个字节是一个Maigc int, 标识此pyc的版本信息
- 接下来四个字节还是个int,是pyc产生的时间
- 序列化的 PyCodeObject,结构参照[include/code.h](https://github.com/python/cpython/blob/master/Include/code.h),序列化方法[python/marshal](https://github.com/python/cpython/blob/master/Python/marshal.c)
**pyc完整的文件解析可以参照**
- [Python程序的执行原理](http://python.jobbole.com/84599/)
- [PYC文件格式分析](http://kdr2.com/tech/python/pyc-format.html)
**关于co_code**
一串二进制流,代表着指令序列,具体定义在[include/opcode.h](https://github.com/python/cpython/blob/fc7df0e664198cb05cafd972f190a18ca422989c/Include/opcode.h)中,也可以参照[python opcodes](http://unpyc.sourceforge.net/Opcodes.html)。
由
- 指令(opcode),分为有参数和无参数两种,以 https://github.com/python/cpython/blob/fc7df0e664198cb05cafd972f190a18ca422989c/Include/opcode.h#L69 划分
- 参数(oparg)
python3.6 以上参数永远占1字节,如果指令不带参数的话则以`0x00`代替,在运行过程中被解释器忽略,也是**Stegosaurus**技术原理;而低于python3.5的版本中指令不带参数的话却没有`0x00`填充
### 例题
**[Hackover CTF 2016 : img-enc](https://github.com/ctfs/write-ups-2016/tree/master/hackover-ctf-2016/forensics/img-enc)**
首先尝试pycdc反编译失败
```python
# Source Generated with Decompyle++
# File: imgenc.pyc (Python 2.7)
import sys
import numpy as np
from scipy.misc import imread, imsave
def doit(input_file, output_file, f):
Unsupported opcode: STOP_CODE
    img = imread(input_file, flatten = True)
    img /= 255
    size = img.shape[0]
# WARNING: Decompyle incomplete
```
注意到是python2.7,也就是说指令序列共占1字节或3字节(有参数无参数)
使用pcads得到
```xml
imgenc.pyc (Python 2.7)
...
                67      STOP_CODE               
                68      STOP_CODE               
                69      BINARY_DIVIDE           
                70      JUMP_IF_TRUE_OR_POP     5
                73      LOAD_CONST              3: 0
                76      LOAD_CONST              3: 0
                79      BINARY_DIVIDE       
```
定位到出错的地方,观察发现 `LOAD_CONST LOAD_CONST BINARY_DIVIDE STORE_FAST opcodes (64 03 00 64 03 00 15 7d 05 00)`被破坏了,根据上下文线索修复后
```xml
00000120  64 04 00 6b 00 00 72 ce  00 64 03 00 64 03 00 15  |d..k..r..d..d...|
00000130  7d 05 00 64 03 00 64 03  00 15 7d 05 00 64 03 00  |}..d..d...}..d..|
00000140  64 03 00 15 7d 05 00 64  03 00 64 03 00 15 7d 05  |d...}..d..d...}.|
00000150  00 64 03 00 64 03 00 15  7d 05 00 64 03 00 64 03  |.d..d...}..d..d.|
00000160  00 15 7d 05 00 64 03 00  64 03 00 15 7d 05 00 64  |..}..d..d...}..d|
00000170  03 00 64 03 00 15 7d 05  00 64 03 00 64 03 00 15  |..d...}..d..d...|
00000180  7d 05 00 64 03 00 64 03  00 15 7d 05 00 64 03 00  |}..d..d...}..d..|
00000190  64 03 00 15 7d 05 00 64  03 00 64 03 00 15 7d 05  |d...}..d..d...}.|
000001a0  00 64 03 00 64 03 00 15  7d 05 00 64 03 00 64 03  |.d..d...}..d..d.|
000001b0  00 15 7d 05 00 64 03 00  64 03 00 15 7d 05 00 6e  |..}..d..d...}..n|
```
接下来根据修复好的python源代码得到flag即可
**延伸**:
- 题目: [0ctf-2017:py](https://github.com/ctfs/write-ups-2017/tree/master/0ctf-quals-2017/reverse/py-137)
- writeup: [记一次手撸CPython bytecode](http://0x48.pw/2017/03/20/0x2f/)
## Tools
### [pycdc](https://github.com/zrax/pycdc)
> 将python字节码转换为可读的python 源代码,包含了反汇编(pycads)和反编译(pycdc)两种工具
### [Stegosaurus](https://github.com/AngelKitty/stegosaurus)
> Stegosaurus 是一款隐写工具，它允许我们在 Python 字节码文件( pyc 或 pyo )中嵌入任意 Payload。由于编码密度较低，因此我们嵌入 Payload 的过程既不会改变源代码的运行行为，也不会改变源文件的文件大小。 Payload 代码会被分散嵌入到字节码之中，所以类似 strings 这样的代码工具无法查找到实际的 Payload。 Python 的 dis 模块会返回源文件的字节码，然后我们就可以使用 Stegosaurus 来嵌入 Payload 了。
原理是在 python 的字节码文件中，利用冗余空间，将完整的 payload 代码分散隐藏到这些零零碎碎的空间中。
具体用法可参看 [ctf-tools](https://ctf-wiki.github.io/ctf-tools/misc/)。
#### 例题
Bugku QAQ
赛题链接如下：
```shell
http://ctf.bugku.com/files/447e4b626f2d2481809b8690613c1613/QAQ
http://ctf.bugku.com/files/5c02892cd05a9dcd1c5a34ef22dd9c5e/cipher.txt
```
首先拿到这道题，用 `010Editor` 乍一眼看过去，我们可以看到一些特征信息：
可以判断这是个跟 `python` 有关的东西，通过查阅相关资料可以判断这是个 `python` 经编译过后的 `pyc` 文件。这里可能很多小伙伴们可能不理解了，什么是 `pyc` 文件呢？为什么会生成 `pyc` 文件？ `pyc` 文件又是何时生成的呢？下面我将一一解答这些问题。
简单来说， `pyc` 文件就是 `Python` 的字节码文件，是个二进制文件。我们都知道 `Python` 是一种全平台的解释性语言，全平台其实就是 `Python` 文件在经过解释器解释之后(或者称为编译)生成的 `pyc` 文件可以在多个平台下运行，这样同样也可以隐藏源代码。其实， `Python` 是完全面向对象的语言， `Python` 文件在经过解释器解释后生成字节码对象 `PyCodeObject` ， `pyc` 文件可以理解为是 `PyCodeObject` 对象的持久化保存方式。而 `pyc` 文件只有在文件被当成模块导入时才会生成。也就是说， `Python` 解释器认为，只有 `import` 进行的模块才需要被重用。 生成 `pyc` 文件的好处显而易见，当我们多次运行程序时，不需要重新对该模块进行重新的解释。主文件一般只需要加载一次，不会被其他模块导入，所以一般主文件不会生成 `pyc` 文件。
我们举个例子来说明这个问题：
为了方便起见，我们事先创建一个test文件夹作为此次实验的测试：
```shell
mkdir test && cd test/
```
假设我们现在有个 `test.py` 文件，文件内容如下：
```python
def print_test():
    print('Hello,Kitty!')
print_test()
```
我们执行以下命令：
```shell
python3 test.py
```
不用说，想必大家都知道打印出的结果是下面这个：
```shell
Hello,Kitty!
```
我们通过下面命令查看下当前文件夹下有哪些文件：
```shell
ls -alh
```
我们可以发现，并没有 `pyc` 文件生成。
‘我们再去创建一个文件为 `import_test.py` 文件，文件内容如下：
> 注： `test.py` 和 `import_test.py` 应当放在同一文件夹下
```python
import test
test.print_test()
```
我们执行以下命令：
```shell
python3 import_test.py
```
结果如下：
```shell
Hello,Kitty!
Hello,Kitty!
```
诶，为啥会打印出两句相同的话呢？我们再往下看，我们通过下面命令查看下当前文件夹下有哪些文件：
```shell
ls -alh
```
结果如下：
```shell
总用量 20K
drwxr-xr-x 3 python python 4.0K 11月  5 20:38 .
drwxrwxr-x 4 python python 4.0K 11月  5 20:25 ..
-rw-r--r-- 1 python python   31 11月  5 20:38 import_test.py
drwxr-xr-x 2 python python 4.0K 11月  5 20:38 __pycache__
-rw-r--r-- 1 python python   58 11月  5 20:28 test.py
```
诶，多了个 `__pycache__` 文件夹，我们进入文件夹下看看有什么？
```shell
cd __pycache__ && ls
```
我们可以看到生成了一个 `test.cpython-36.pyc` 。为什么是这样子呢？
我们可以看到，我们在执行 `python3 import_test.py` 命令的时候，首先开始执行的是 `import test` ，即导入 `test` 模块，而一个模块被导入时， `PVM(Python Virtual Machine)` 会在后台从一系列路径中搜索该模块，其搜索过程如下：
- 在当前目录下搜索该模块
- 在环境变量 `PYTHONPATH` 中指定的路径列表中依次搜索
- 在 `python` 安装路径中搜索
事实上， `PVM` 通过变量 `sys.path` 中包含的路径来搜索，这个变量里面包含的路径列表就是上面提到的这些路径信息。
模块的搜索路径都放在了 `sys.path` 列表中，如果缺省的 `sys.path` 中没有含有自己的模块或包的路径，可以动态的加入 `(sys.path.apend)` 即可。
事实上， `Python` 中所有加载到内存的模块都放在 `sys.modules` 。当 `import` 一个模块时首先会在这个列表中查找是否已经加载了此模块，如果加载了则只是将模块的名字加入到正在调用 `import` 的模块的 `Local` 名字空间中。如果没有加载则从 `sys.path` 目录中按照模块名称查找模块文件，模块文件可以是 `py` 、 `pyc` 、 `pyd` ，找到后将模块载入内存，并加入到 `sys.modules` 中，并将名称导入到当前的 `Local` 名字空间。
可以看出来，**一个模块不会重复载入**。多个不同的模块都可以用 `import` 引入同一个模块到自己的 `Local` 名字空间，其实背后的 `PyModuleObject` 对象只有一个。
在这里，我还要说明一个问题，**`import` 只能导入模块，不能导入模块中的对象(类、函数、变量等)。**例如像上面这个例子，我在 `test.py` 里面定义了一个函数 `print_test()` ，我在另外一个模块文件 `import_test.py`不能直接通过 `import test.print_test` 将 `print_test` 导入到本模块文件中，只能用 `import test` 进行导入。如果我想只导入特定的类、函数、变量，用 `from test import print_test` 即可。 
既然说到了 `import` 导入机制，再提一提嵌套导入和 `Package` 导入。
**`import` 嵌套导入**
嵌套，不难理解，就是一个套着一个。小时候我们都玩过俄罗斯套娃吧，俄罗斯套娃就是一个大娃娃里面套着一个小娃娃，小娃娃里面还有更小的娃娃，而这个嵌套导入也是同一个意思。假如我们现在有一个模块，我们想要导入模块 `A` ，而模块 `A` 中有含有其他模块需要导入，比如模块 `B` ，模块 `B` 中又含有模块 `C` ，一直这样延续下去，这种方式我们称之为 `import` 嵌套导入。
对这种嵌套比较容易理解，我们需要注意的一点就是各个模块的 `Local` 名字空间是独立的，所以上面的例子，本模块 `import A` 完了后，本模块只能访问模块 `A` ，不能访问 `B` 及其它模块。虽然模块 `B` 已经加载到内存了，如果要访问，还必须明确在本模块中导入 `import B` 。
那如果我们有以下嵌套这种情况，我们该怎么处理呢？
比如我们现在有个模块 `A` ：
```python
# A.py