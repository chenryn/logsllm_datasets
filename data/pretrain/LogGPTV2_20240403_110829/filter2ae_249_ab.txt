  3. 覆盖到栈中返回地址值
  4. 函数结束，开始返回
  5. leave（pop rbp ；mov rsp rbp），恢复之前rbp，将之前rbp值赋予rsp
  6. ret（pop rip），发生crash
在上面的例子中，执行到over函数时就结束了后续路径的探索，是因为栈溢出使得rip的值unconstrained了
**那么如何才能既可以发现over函数中的栈溢出，又能让over函数正确返回，从而继续探索出后续路径中的栈溢出呢？**
根据上述6个过程，我的思路就出来了，就是每次进入一个新的函数时，先存储rbp正确的值，等到函数快结束时，先不着急返回，先去判断栈中的数据是否异常，就看即将被pop的rbp位置的值是否符号化，看将被pop
rip位置的值是否符号化，如果是，那么很明显出现了栈溢出，然后 **使用angr去还原正确的栈数据**
，也就是还原rbp和返回地址，这样一来，既检测出了漏洞同时使得产生漏洞的函数能够继续执行下去，从而达到了探索多个漏洞的目的
以上是总体的思路，但实际上还有许多的小问题需要解决
比如
**如何判断进入了一个新的函数和即将离开这个函数呢？**
这里我使用的方法是，可以通过判断汇编指令，比如进入函数时，如果出现了`push rbp; mov
rsp,rbp;`这样的指令，那么基本上可以判断是函数的开头，如果出现了`leave; ret;`，同样可以判断是函数的结尾
代码的具体实现如下：
    def check_head(state):
        insns=state.project.factory.block(state.addr).capstone.insns
        if len(insns)>=2:
            #check for : push rbp; mov rsp,rbp; 
            ins0=insns[0].insn
            ins1=insns[1].insn
            if len(ins0.operands)==1 and len(ins1.operands)==2:
                # print(insns)
                ins0_name=ins0.mnemonic#push 
                ins0_op0=ins0.reg_name(ins0.operands[0].reg)#rbp
                ins1_name=ins1.mnemonic#mov 
                ins1_op0=ins1.reg_name(ins1.operands[0].reg)#rsp
                ins1_op1=ins1.reg_name(ins1.operands[1].reg)#rbp
                if ins0_name=="push" and ins0_op0=="rbp" and ins1_name=="mov" and ins1_op0=="rbp" and ins1_op1=="rsp":
                    # print("find a function head,save the rsp,rbp")
                    pre_target=state.callstack.ret_addr
                    state.globals['rbp_list'][hex(pre_target)]=state.regs.rbp
    def check_end(state):
        if state.addr==0:
            return
        insns=state.project.factory.block(state.addr).capstone.insns
        if len(insns)>=2:
            flag=0
            #check for : leave; ret;
            for ins in insns:
                if ins.insn.mnemonic=="leave":
                    flag+=1
                if ins.insn.mnemonic=="ret":
                    flag+=1
            if flag==2:
                ........
**当函数调用多的时候，如何存储正确的rbp值？**
每次进入新函数时，可以使用字典的方式进行存储rbp，key为该函数结束时的正确返回地址，value为当前函数的rbp，这样一来不论函数调用多复杂，都可以通过唯一的返回地址锁定rbp的正确值
**当符号执行路径多的时候，如何保证不同路径之间存储的rbp值是相互独立且不受干扰？**
angr中提供了一种这样的用法：`state.globals['rbp_list']={}`
这个意思是，设置路径state的一个全局变量名为rbp_list，且初始化rbp_list为一个空的字典
这种设置全局变量的方法，只会在被设置的路径以及其衍生路径中存在
比如
    int main()
    {
        .....
        if(xxx)
        {
        //路径1，不存在name变量
        }
        else if(xxx)
        {
            ////路径2
            设置state.globals['name']=“23R3F”
            if(xxx)
            {
                //路径2.1，存在name变量
            }
            else
            {
                设置state.globals['age']=233
                //路径2.2，存在name、age变量
            }
        }
        else if(xxx)
        {
            //路径3，不存在name变量
        }
        else
        {
            //路径4，不存在name变量
        }
    }
因此通过这种方法设置的路径全局变量rbp_list字典可以保证不被其他不相干路径所干扰
**有的时候溢出不一定导致rip修改，可能只溢出到rbp的几个字节，这种情况又该如何挖掘搜索出来？**
这里用了angr提供的一种方法，可以检测某地址的值是否符号化，通过这种方法，就能计算出溢出的具体字节，至于溢出到rbp和返回地址，这里可以通过检测顺序来解决，比如溢出到了返回地址，那么必然是溢出了rbp，那么就直接报出pc
overflow，因此首先检测返回地址是否被溢出，然后再检测是否溢出到了rbp，如果只溢出到rbp则只报出 rbp overflow
相关代码如下
    def check_symbolic_bits(state,val):
        bits = 0
        for idx in range(state.arch.bits):
            if val[idx].symbolic:
                bits += 1
        return bits
    def check_end(state):
        ..........
        ..........
                rsp=state.regs.rsp
                rbp=state.regs.rbp
                byte_s=state.arch.bytes
                stack_rbp=state.memory.load(rbp,endness=angr.archinfo.Endness.LE)
                stack_ret=state.memory.load(rbp+byte_s,endness=angr.archinfo.Endness.LE)
                pre_target=state.callstack.ret_addr
                pre_rbp=state.globals['rbp_list'][hex(pre_target)]
                if stack_ret.symbolic:
                    num=check_symbolic_bits(state,stack_ret)
                    print_pc_overflow_msg(state,num//byte_s)
                    state.memory.store(rbp,pre_rbp,endness=angr.archinfo.Endness.LE)
                    state.memory.store(rbp+byte_s, state.solver.BVV(pre_target, 64),endness=angr.archinfo.Endness.LE)
                    return
                if stack_rbp.symbolic:
                    num=check_symbolic_bits(state,stack_rbp)
                    print_bp_overflow_msg(state,num//byte_s)
                    state.memory.store(rbp,pre_rbp,endness=angr.archinfo.Endness.LE)
# 完整代码
以下是完整的代码
    import angr
    def check_symbolic_bits(state,val):
        bits = 0
        for idx in range(state.arch.bits):
            if val[idx].symbolic:
                bits += 1
        return bits
    def print_pc_overflow_msg(state,byte_s):
        print("\n[========find a pc overflow========]")
        print("over for ",hex(byte_s),"bytes")
        print("[PC]stdout:\n",state.posix.dumps(1))
        print("[PC]trigger overflow input:")
        print(state.posix.dumps(0))
    def print_bp_overflow_msg(state,byte_s):
        print("\n[========find a bp overflow========]")
        print("over for ",hex(byte_s),"bytes")
        print("[PC]stdout:\n",state.posix.dumps(1))
        print("[PC]trigger overflow input:")
        print(state.posix.dumps(0))
    def check_end(state):
        if state.addr==0:
            return
        insns=state.project.factory.block(state.addr).capstone.insns
        if len(insns)>=2:
            flag=0
            #check for : leave; ret;
            for ins in insns:
                if ins.insn.mnemonic=="leave":
                    flag+=1
                if ins.insn.mnemonic=="ret":
                    flag+=1
            # ins0=insns[0].insn
            # ins1=insns[1].insn
            # if ins0.mnemonic=="leave" and ins1.mnemonic=="ret":
            if flag==2:
                rsp=state.regs.rsp
                rbp=state.regs.rbp
                byte_s=state.arch.bytes
                stack_rbp=state.memory.load(rbp,endness=angr.archinfo.Endness.LE)
                stack_ret=state.memory.load(rbp+byte_s,endness=angr.archinfo.Endness.LE)
                pre_target=state.callstack.ret_addr
                pre_rbp=state.globals['rbp_list'][hex(pre_target)]
                if stack_ret.symbolic:
                    num=check_symbolic_bits(state,stack_ret)
                    print_pc_overflow_msg(state,num//byte_s)
                    state.memory.store(rbp,pre_rbp,endness=angr.archinfo.Endness.LE)
                    state.memory.store(rbp+byte_s, state.solver.BVV(pre_target, 64),endness=angr.archinfo.Endness.LE)
                    return
                if stack_rbp.symbolic:
                    num=check_symbolic_bits(state,stack_rbp)
                    print_bp_overflow_msg(state,num//byte_s)
                    state.memory.store(rbp,pre_rbp,endness=angr.archinfo.Endness.LE)
    def check_head(state):
        insns=state.project.factory.block(state.addr).capstone.insns
        if len(insns)>=2:
            #check for : push rbp; mov rsp,rbp; 
            ins0=insns[0].insn
            ins1=insns[1].insn
            if len(ins0.operands)==1 and len(ins1.operands)==2:
                # print(insns)
                ins0_name=ins0.mnemonic#push 
                ins0_op0=ins0.reg_name(ins0.operands[0].reg)#rbp
                ins1_name=ins1.mnemonic#mov 
                ins1_op0=ins1.reg_name(ins1.operands[0].reg)#rsp
                ins1_op1=ins1.reg_name(ins1.operands[1].reg)#rbp
                if ins0_name=="push" and ins0_op0=="rbp" and ins1_name=="mov" and ins1_op0=="rbp" and ins1_op1=="rsp":
                    # print("find a function head,save the rsp,rbp")
                    pre_target=state.callstack.ret_addr
                    state.globals['rbp_list'][hex(pre_target)]=state.regs.rbp
    if __name__ == '__main__':  
        filename="stack1"
        p = angr.Project(filename,auto_load_libs=False)
        state=p.factory.entry_state()
        state.globals['rbp_list']={}
        simgr = p.factory.simulation_manager(state,save_unconstrained=True)
        while simgr.active:
            for act in simgr.active:
                # print("||||||||||||||active head||||||||||||")
                check_head(act)
                check_end(act)
                # print("||||||||||||||active end|||||||||||||")
            simgr.step()
            # print("now->",simgr,"\n")
运行后，可以发现，完美的搜索到了两个栈溢出漏洞：
以上便是我关于栈溢出方面的一点点挖掘思路，如果有师傅有更骚的操作，也望不啬赐教