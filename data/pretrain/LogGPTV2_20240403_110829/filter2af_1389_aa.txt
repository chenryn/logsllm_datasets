## DGA
DGA，顾名思义常用于构建恶意域名，像wannacry，xshellghost这些也都使用了DGA域名用于躲避黑名单检测。
先前有一篇通过使用LSTM来预测DGA域名的论文解读传遍了各大平台，基本就是通过LSTM这种基于RNN的进阶算法，可以在大跨度的时间区域范围内进行学习并预测可能存在的新的信息，准确率相当之高。并且目前大量类似的这种预测DGA域名的机器学习算法都是基于对随机域名的样本集学习再预测。
那么关键问题就是DGA域名的随机性貌似给它也带来了一些不方便。如何突破这个随机性，接下来攻击者针对这些新生的算法进行了研究和绕过。
**对抗升级**
针对上述随机性问题，可以针对字符熵来辅助判断是否为DGA域名，为了突破随机性过于明显的特征。研究人员实现了一种伪随机的DGA算法，名为CharBot，该算法成功攻击了一些DGA
classifier，例如名为FANCI的RF模型和名为LSTM.MI的DNN模型。
这种基于字符的DGA算法主要使用了如下三个数据集作为基本输入：
  1. 合法二级域名（SLD）；
  2. 顶级域名（TLD）；
  3. 一个用作伪随机化种子的日期数值；
那么CharBot的基本算法过程如下（具体算法伪代码如图所示）：
  1. 选择一个data set中的domain；
  2. 选择SLD中两个字符（替换的字符越多，DGA classifier检测率越高，越少则已注册越多。2个为平衡这两种状态的最佳中间值）；
  3. 选择两个替换字符（算法保证替换字符与原有字符不一样）；
  4. 添加com,uk,biz,fr,jp这些后缀然后成为顶级域名。
这种算法很大程度降低DGA
classifier对随机化的检测率。但是该算法唯一的实现阻碍在于软件在内置该算法时需要内置大量的域名数据集，导致软件本身的文件大小大大提升。但是根据实际测试，一个包含Alexa全局数据集的python代码体积还是比DeepDGA的算法实现代码体积小，所以该问题不会影响在恶意软件中部署CharBot算法。
检测CharBot算法生成的域名有如下一些方法：
  1. 与Alexa样本比较发现是否存在几个字符替换的现象（Alexa样本巨大，且攻击者可能不使用Alexa样本，防御成本过高）；
  2. 使用更复杂的模型来训练处理，但是也是不太可行，因为需要定期重新训练，且需要处理的对象过多；
  3. 重复的白盒对抗训练，但对抗学习的参数难调；
  4. 使用DGA域名以外的信息进行辅助判断，例如IP地址，域查询频率和时间等。
## **关于DNS类攻击的解决方法**
常见的一些对恶意域名的官方拉黑办法有大家熟知的DNS
Sinkhole，NXDomain，或者是将其映射到实验性IP地质类（D类地址和E类地址）等。但是这些办法都是已经捕捉到恶意域名后再对其拉黑的方式，那么如何捕捉恶意域名，或者在应急响应的过程中发现恶意的DNS活动流量？研究者对此开发了多个框架系统。
**PDNS**
这里的PDNS（Process-DNS system）与之前提到的PDNS（Passive
DNS）不一样。这里的PDNS是可以针对进程级别的DNS流量进行监测的系统，其监测能力主要是是基于两大特征：
  1. 网络特征
域名的whois信息（域名使用时长，域名注册信息，域名注册地址）；
IP whois信息和IP物理定位（AS自治系统编号，IP物理定位）；
授权解析服务器（域名TTL值）
  2. 进程特征
DNS活动信息（域名和主机名，域名解析失败率）；
进程信息（加载dll，code signing）；
该系统是部署在一个后台服务器和各个需要被监控的终端主机上的，它弥补了传统DNS监测系统的溯源定位不精确的缺陷：
  1. PDNS分析细粒度级别由主机级别到了线程级别，收集的数据更加敏感更利于模型建立；
  2. 流程为中心可以立即确定恶意进程；
  3. 终端部署方式可以提高对DNS-over-TLS/HTTPS的可见性；
那么为什么PDNS需要将这两个特征（网络特征和进程特征）绑定在一起进行分析使用呢？这里首先区分定义一下什么是软件，什么是进程。软件可以启动多个进程，进程是软件的一个或其中一个运行实体。
如图所示，Skype.exe启动了多个进程，每个进程都连接到Skype或Microsoft等相关的域，Skype启动的这些进程收集到的29K个DNS查询最终只对应到19个域，这其中17个域由Microsoft或skype注册。除了Skype在爱尔兰（IE）注册的域名外，它们只在四个组织下注册，并且只在美国（US）注册。程序DNS配置文件还显示了程序的软件发布者与程序访问的域的注册者之间的相关性。skype.exe的代码签名信息将软件发布者标识为“Skype
Software Sarl”。相应地，DNS
Whois记录确认大多数dns查询都有“skype”或“microsoft”作为注册者，而注册者最终是同一家公司。Skype软件以图形界面运行，允许用户交互。所以从这些信息可以看得出来，Skype是一个合法的不具有恶意行为的软件。
而Mal.exe就表现出截然相反的特征，其访问了大概20个不同的域，且所有域都是在不同地理位置的不同组织下注册的，而且某些域为NXDOMAIN。虽然恶意软件是正确签名的，但是代码签名者几乎不匹配域的注册者。恶意软件主要作为后台进程运行，而不加载GUI和用户交互DLL。这些信息表现了其大概率上为一个执行了恶意行为的软件。
PDNS系统的基本运行过程如下：
  1. 装载监控客户端的agent拦截监测DNS流量中的活动行为；
  2. agent也会从内核获取进程信息（加载的dlls, code signing）；
  3. agent将获取到的信息传递给backend服务器；
  4. backend服务器获取外部网络特征信息；
  5. backend服务器获取DNS历史活动信息；
PDNS的后台服务器获取到上述复杂信息后会丢给内置的机器学习算法进行分析判断，最后给出结果是否存在恶意软件传出或传入的DNS流量，并且能准确溯源该恶意软件的具体宿主及其进程信息。为了找到最佳classifier，研究者使用2015-2017的恶意软件样本作为输入测试几种训练模型，可以从训练结果的视图中发现随机森林算法（RF）的判断恶意软件的准确性最高。
上述过程存在两个难题，一是如何捕获到所有的DNS活动，二是如何将捕获到的DNS活动与进程联系在一起。
软件通常通过两个信道进行域名解析活动：
  1. 与解析服务器之间的UDP通信；
针对这个信道，使用网络跟踪工具即可，比如普林斯顿的Hone开源项目（该项目本身就可以将每个捕获到的包与进程ID联系在一起）。
  2. 软件将该解析认为直接委派给系统本身的DNS解析功能；
捕获进程与解析服务器之间的通信数据或者读取本地服务产生的日志文件。
针对Linux主机，一般开发者不会使用Linux内部的DNS解析服务，所以直接通过Hone即可捕获读取。而针对Windows系统而言，开发者一般都会使用Windows自带的DNS
Client Service，所以在Windows 8及以下版本，PDNS会拦截LPRC通信进行分析，而在Windows 8.1及以上版本可以直接从DNS
Client Service的日志中读取即可。
那么为什么DNS Client Service日志在Windows 8及以下版本不可行呢？这是因为该日志功能存在一定的bug。