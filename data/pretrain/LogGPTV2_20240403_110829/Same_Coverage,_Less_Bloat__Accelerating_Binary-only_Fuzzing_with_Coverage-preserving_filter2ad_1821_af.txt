2.05
✗
✗
✗
✗
✗
✗
✗
✗
+1193%
+749%
+350%
+56%
✗
✗
HeXcite / Clang
Rel.
Crash
1.31
5.22
1.74
1.32
1.78
1.01
1.10
10.47
✗
✗
+199%
Rel.
Bugs
1.12
1.82
1.27
1.21
1.88
1.05
1.63
1.72
✗
✗
+46%
MWU
0.216
<0.001
<0.001
0.018
<0.001
0.084
<0.001
<0.001
✗
✗
Table 10: HeXcite’s mean crashes and bugs relative to UnTracer, QEMU, Dyninst, RetroWrite, and AFL-Clang. We omit lzturbo and rar as none trigger any
crashes for them. ✗ = the tracer is incompatible with the respective benchmark and hence omitted. Statistically significant improvements in mean bugs found for
HeXcite (i.e., Mann-Whitney U test 𝑝 < 0.05) are bolded.
5.4 Q3: Bug-finding Evaluation
We evaluate the crash- and bug-finding effectiveness of coverage-
preserving CGT across our 12 benchmarks. To triage raw crashes
into bugs, we apply the popular “fuzzy stack hashing” methodology,
trimming stack traces to their top-6 entries, and hash each with
their corresponding fault address and reported error. We make use
of the binary-only AddressSanitizer implementation QASan [17] to
extract crash stack traces and errors.
binaries (respectively). Overall, beating even source-level tracers
highlights HeXcite’s value at binary-only coverage.
5.4.2 Bug Diversity. Following additional triage to map discov-
ered crashes to previously-reported vulnerabilities and bugs, we
conduct several case studies to further examine HeXcite’s practi-
cality in real-world bug-finding versus existing tracers.
5.4.1 Unique Bugs and Crashes. Table 10 shows the HeXcite’s
mean crash- and bug-finding relative to block-coverage-only CGT
UnTracer; and always-on fuzzing coverage tracers QEMU, Dyninst,
RetroWrite, and AFL-Clang. Figure 10 shows the mean unique
crashes over time for several benchmarks. We omit lzturbo and
rar as no fuzzing run found crashes in them.
Versus UnTracer: As Table 10 shows, HeXcite exposes a mean
12% more bugs than UnTracer. In conjunction with the plots shown
in Figure 10, we see that coverage-preserving CGT’s small sacrifice
in speed is completely offset by the much higher number of bugs
and crashes found—attaining effectiveness statistically better than
or identical to UnTracer on all 12 benchmarks.
Versus binary-only always-on tracing: As expected, HeX-
cite’s coverage-preserving CGT attains a mean improvement of
521%, 1193%, and 56% in fuzzing bug-finding over always-on binary-
only tracers QEMU, Dyninst, and RetroWrite (respectively). Just as
in our performance experiments (§ 5.3), all 21 comparisons yield a
statistically significant improvement for HeXcite.
Versus source-level always-on tracing: Across all eight open-
source benchmarks, HeXcite achieves a 46% higher bug-finding
effectiveness than source-level tracer AFL-Clang, with statistically
improved and statistically identical bug-finding on 6/8 and 2/8
To determine whether coverage-preserving CGT effectively re-
veals many bugs, or is merely constrained to the same few time
after time, we compare the total bugs found by HeXcite to the
best-performing always-on coverage-tracers, RetroWrite (binary-
only) and AFL-Clang (source-level). As Figure 11 shows, despite
some overlap, HeXcite reveals 1.4× the unique bugs as RetroWrite
and AFL-Clang—with a higher number of bugs that only HeXcite
successfully reveals—confirming that coverage-preserving CGT is
practical for real-world bug-finding.
98
147
28
141
197
48
(a) HeXcite vs. RetroWrite
(b) HeXcite vs. AFL-Clang
Figure 11: HeXcite’s total unique bugs found versus the fastest conventional
always-on tracers RetroWrite (binary-only) and AFL-Clang (source-level).
5.4.3 Bug Time-to-Exposure. We further compare HeXcite’s
mean time-to-exposure for 16 previously-reported bugs versus
block-only CGT UnTracer; and always-on coverage tracers QEMU,
Dyninst, RetroWrite, and AFL-Clang. As Table 11 shows, HeX-
cite accelerates bug discovery by 52.4%, 48.9%, 41.2%, 43.5%, and
32.3% over UnTracer, QEMU, Dyninst, RetroWrite, and AFL-Clang
(respectively). While HeXcite is not the fastest on every bug, its
04812162024Hours of Fuzzing0.00.20.40.60.81.0Rel. Unique BugsClangQEMUDyninstUnTracerHeXcite04812162024Hours of Fuzzing0.00.20.40.60.81.0Rel. Unique BugsClangRetroWriteDyninstUnTracerHeXcite04812162024Hours of Fuzzing0.00.20.40.60.81.0Rel. Unique BugsClangRetroWriteQEMUDyninstUnTracerHeXcite04812162024Hours of Fuzzing0.00.20.40.60.81.0Rel. Unique BugsQEMUUnTracerHeXciteSession 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea361Identifier
Category
Binary
Coverage-guided Tracing
Binary- and Source-level Always-on Tracing
Dyninst
RetroWrite
heap overflow
CVE-2011-4517
stack overflow
GitHub issue #58-1
stack overflow
GitHub issue #58-2
stack overflow
GitHub issue #58-3
stack overflow
GitHub issue #58-4
stack overflow
GitHub issue #136
null pointer deref
Bugzilla #3392519
heap overflow
CVE-2018-8881
use-after-free
CVE-2017-17814
use-after-free
CVE-2017-10686
illegal address
Bugzilla #3392423
heap overflow
CVE-2008-5824
stack over-read
CVE-2017-13002
heap over-read
CVE-2017-5923
integer overflow
CVE-2020-29384
CVE-2007-0855
stack overflow
HeXcite’s Mean Relative Speedup
jasper
mjs
mjs
mjs
mjs
mjs
nasm
nasm
nasm
nasm
nasm
sfconvert
tcpdump
yara
pngout
unrar
HeXcite
13.1 hrs
13.3 hrs
13.6 hrs
5.88 hrs
8.60 hrs
1.30 hrs
12.1 hrs
5.06 hrs
3.54 hrs
3.84 hrs
8.17 hrs
13.1 hrs
8.34 hrs
3.24 hrs
5.40 min
10.7 hrs
UnTracer
18.2 hrs
19.0 hrs
16.4 hrs
6.80 hrs
10.7 hrs
7.50 hrs
13.5 hrs
14.6 hrs
6.31 hrs
5.40 hrs
14.2 hrs
14.8 hrs
12.5 hrs
5.67 hrs
34.5 min
17.6 hrs
52.4%
QEMU
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
1.87 hrs
18.0 min
✗
48.9%
✗
✗
22.6 hrs
14.7 hrs
20.1 hrs
1.30 hrs
✗
✗
✗
✗
✗
14.3 hrs
13.5 hrs
✗
✗
✗
41.2%
✗
15.30 hrs
✗
✗
19.6 hrs
✗
✗
✗
✗
✗
✗
15.4 hrs
11.5 hrs
9.33 hrs
✗
✗
43.5%
Clang
8.70 hrs
✗
15.70 hrs
✗
✗
✗
✗
13.9 hrs
5.91 hrs
4.70 hrs
✗
✗
8.04 hrs
6.19 hrs
✗
✗
32.3%
Table 11: HeXcite’s mean bug time-to-exposure relative to block-coverage-only CGT UnTracer; and conventional always-on coverage tracers QEMU, Dyninst,
RetroWrite, and AFL-Clang. ✗ = the competing tracer is incompatible with the benchmark or does not uncover the bug.
overall improvement over competing tracers further substantiates
the improved fuzzing effectiveness of coverage-preserving CGT.
Q3: Coverage-preserving CGT’s balance of speed and coverage im-
proves fuzzing effectiveness, revealing more bugs than alternative
tracing approaches—in less time.
6 DISCUSSION
Below we discuss several limitations of coverage-preserving CGT
and our prototype implementation, HeXcite.
6.1 Indirect Critical Edges
While resolving direct critical edges is straightforward through
jump mistargeting or edge splitting (§ 3.1), indirect critical edges
(i.e., indirect jumps/calls/returns) remain a universal problem even
for source-level solutions like LLVM’s SanitizerCoverage [50]. Be-
low we discuss several emerging and/or promising techniques for
resolving indirect critical edges, and their trade-offs with respect
to supporting a binary-level coverage-preserving CGT.
Block Header Splitting: LLVM’s SanitizerCoverage supports
resolving indirect critical edges whose end blocks have one or more
incoming direct edges. For example, given a CFG with indirect
critical edge #»
ib (with i having outgoing indirect edges to some other
blocks x and y) and direct edge #»
ab, SanitizerCoverage first cuts block
b’s header from its body into two copies, b0𝑖 and b0𝑎. Second, as
the indirect transfer’s destination is resolved dynamically and thus
cannot be statically moved, b0𝑖’s location must be pinned to that of
the original block b. Finally, the twin header blocks (b0𝑖 and b0𝑎) are
appended with a direct jump to b’s body, b1—effectively splitting
ib with edges #    »
the original indirect critical edge #»
ib0𝑖 and #       »
b0𝑖 b1;
and direct edge #»
b0𝑎b1. However, the inability to
statically alter indirect transfer destinations makes this approach
only applicable for indirect critical edges that are the sole indirect
edge to their end block; i.e., should there be multiple indirect critical
edges ( #   »
i2b), at most one can be split.
Indirect Branch Promotion: Originally designed as a mitiga-