modular manner, we thus design (in Section 3) a general zero-knowledge protocol
that subsumes all argument systems of this work. In comparison with previous
protocols [40,48,44,46] built on Stern’s framework [60], this general protocol
introduces a technical novelty which allows to reduce the communication cost.
Range Membership and Set Non-Membership. Our techniques for addi-
tions of non-negative integers directly yield a method for proving inequalities of
the form X ≤ Z, where it suﬃces to show the existence of non-negative integer
Y such that X + Y = Z. This method can be further adapted to handle strict
inequalities. To prove that X  X(cid:48)
0 and b = 0 otherwise, this can be expressed by the equation:
(X(cid:48)
To address the problems caused by carry-on bits in additions, Knuth [41]
0) = b · (X1 − X0) + (1 − b) · (X0 − X1),
0 and {X(cid:48)
1 − X(cid:48)
1 ≥ X(cid:48)
1, X(cid:48)
0
which is provable in zero-knowledge using our techniques for integer additions.
0} =
If we repeat the above process and deﬁne variables Y (cid:48)
{Y1, Y0} and an order control bit c ∈ {0, 1}, if we deﬁne d = b + c mod 2, we have
0 such that {Y (cid:48)
1 , Y (cid:48)
1 , Y (cid:48)
(X1 − X0) · (Y1 − Y0) = (X(cid:48)
(X1 − X0) · (Y1 − Y0) = −(X(cid:48)
1 − X(cid:48)
1 − X(cid:48)
0) · (Y (cid:48)
0) · (Y (cid:48)
1 − Y (cid:48)
0 )
1 − Y (cid:48)
0 )
The term (X1 − X0) · (Y1 − Y0) appearing in equation (2) can thus be written as
(X1 − X0)· (Y1 − Y0) = (1− d)· (X(cid:48)
1 − Y (cid:48)
0 ),
0 )− d· (X(cid:48)
0)· (Y (cid:48)
0)· (Y (cid:48)
1 − X(cid:48)
1 − X(cid:48)
1 − Y (cid:48)
if
if
d = 0
d = 1.
6
1−Y (cid:48)
which yields an equation compatible our techniques while avoiding to handle
1−X(cid:48)
negative integers. At each recursive step, we further divide the diﬀerences X(cid:48)
0
and Y (cid:48)
0 and keep track of the control bits b, c, d which are part of the witnesses.
Related Work. The ﬁrst integer commitment scheme was proposed by Fujisaki
and Okamoto [26] who suggested to use it to prove relation over the integers.
They underlined the importance of zero-knowledge arguments over the integers
in order to be able to prove modular relations when the modulus is not known
in advance, when the commitment key is generated. Damg˚ard and Fujisaki [22]
corrected a ﬂaw in the Fujisaki-Okamoto commitment and generalized it to
abelian groups satisfying speciﬁc properties.
Lipmaa [49] highlighted the cryptographic importance of the class D of Dio-
phantine sets5 [1] and gave improved constructions of zero-knowledge proofs for
Diophantine equations. As special cases, he obtained eﬃcient zero-knowledge
arguments for intervals, unions of intervals, exponential relations and gcd rela-
tions. In [34], Groth suggested another integer commitment scheme based on
the Strong RSA assumption [4] which, like [26,22], relies on groups of hidden
order. Couteau, Peters and Pointcheval [21] recently suggested to combine integer
commitments with a commitment scheme to ﬁeld elements in order to improve
the eﬃciency of zero-knowledge proofs over the integers. They also revisited the
Damg˚ard-Fujisaki commitment [22] and proved it the security of its companion
argument system under the standard RSA assumption. While our results are not
as general as those of [49,21] as we do not handle negative integers, they suﬃce
for many applications of integer commitments, as we previously mentioned.
Range proofs were introduced by Brickell et al. [10] and received a permanent
attention [19,12,9,49,36,18,21,32] since then. They served as a building block of
countless cryptographic applications, which include anonymous credentials [14],
anonymous e-cash [13], auction protocols [50], e-voting [35] privacy-preserving
certiﬁcate transparency [25] and many more.
Currently known range proofs proceed via two distinct approaches. The ﬁrst
one proceeds by breaking integers into bits or small digits [10,7,23,12,36,32],
which allows communicating a sub-logarithmic (in the range size) number of
group elements in the best known constructions [12,36,32]. The second approach
[9,49,35,21] appeals to integer commitments and groups of hidden order. This
approach is usually preferred for very large ranges (which often arise in appli-
cations like anonymous credentials [14], where range elements are comprised of
thousands of bits) where it tends to be more eﬃcient and it does not require the
maximal range length to be known when the commitment key is chosen.
Despite three decades of research, all known eﬃcient range proofs (by “eﬃ-
cient”, we mean that the communication complexity should be only logarithmic
in the range size) build on quantum-vulnerable assumptions and the only candi-
dates supporting very large integers rely on groups of hidden order. By proving
knowledge of small secret vectors, lattice-based protocols [40,48] can be seen as
5 For k, (cid:96) ∈ N, a Diophantine set is a set of the form S = {x ∈ Zk | ∃w ∈ Z(cid:96) :
PS(x, w) = 0}, for some representing polynomial PS(X, W ) deﬁned over integer
vectors X ∈ Zk, W ∈ Z(cid:96). Any recursively enumerable set is [24] Diophantine.
7
providing a limited form of range proofs: if we can prove that a committed x ∈ Zm
has inﬁnity norm (cid:107)x(cid:107)∞  q. Even with a sub-exponential modulus q, the
size L of integers can be at most sub-linear in n. To our knowledge, no ﬂexible
solution has been proposed in the lattice setting, let alone under standard lattice
assumptions with polynomial approximation factors and polynomial-size moduli.
Our schemes thus provide a ﬁrst answer to this question.
In the context of set non-membership, our construction bears resemblance
with a technique used by Nakanishi et al. [57] to handle revocation in privacy-
preserving protocols by proving inequalities over the integers. For a public set
S = {s1, . . . , sN} arranged in lexicographical order, they rely on a trusted au-
thority to create Camenisch-Lysyanskaya signatures [16] on all ordered pairs
{Msgi = (si, si+1)}N−1
i=1 of adjacent set elements. To prove that a committed
s is not in S, the prover proceeds with a proof of knowledge of two message-
signature pairs (Msgj, sigj), (Msgj+1, sigj+1) for which Msgj = (sj, sj+1) and
Msgj+1 = (sj+1, sj+2) contain elements sj, sj+1 such that sj < s < sj+1. While
this approach could be instantiated with our technique for proving integer inequal-
ities, it would require proofs of knowledge of signatures and thus lattice trapdoors
(indeed, all known lattice-based signatures compatible with proofs of knowledge
rely on lattice trapdoors [27,54]). By using proofs of knowledge of a Merkle
tree path [45] instead of signatures, our solution eliminates the need for lattice
trapdoors, which allows for a better eﬃciency (note that proving inequalities
sj < s < sj+1 incurs a complexity Ω(log N ) in both cases, so that using Merkle
trees does not aﬀect the asymptotic complexity). Moreover, the technique of
Nakanishi et al. [57] involves a trusted entity to sign all pairs (si, si+1)}N−1
in a
setup phase whereas no trusted setup is required in our construction. Eskandarian
et al. [25] recently used proofs of integer inequalities and hash trees in their proofs
of non-membership. Still, they prove inequalities by using signatures issued by
some TTP. In contrast, our approach does not require any TTP.
i=1
Other approaches to prove (non-)membership of a public set were suggested in
[15,42,12,47]. However, they rely on a trusted entity to approve the sets of which
(non-)membership must be proven during a setup phase. Setup-free accumulator-
based set membership proofs were described in [11,45], but they are not known
to support non-membership proofs.
In [6], Bayer and Groth cleverly used Σ protocols to handle proofs of non-
membership without assuming a trusted setup. Their construction achieves
logarithmic complexity in the cardinality of the set, but it crucially relies on
commitment schemes, like Pedersen’s discrete-log-based commitment [58], with
homomorphic properties over the message space and the randomness space. For
8
lack of a lattice-based commitment scheme with similar properties, their approach
does not seem readily instantiable under lattice assumptions.
2 Preliminaries
Notations. When working with an integer X ∈ [0, 2L − 1], we use the notation
X = (xL−1, . . . , x0)2 to describe its bits, and use bold lower-case letter x to
denote the representation of X as binary column vector (xL−1, . . . , x0) ∈ {0, 1}L.
The column concatenation of matrices A ∈ Zn×k and B ∈ Zn×m is denoted by
[A| B] ∈ Zn×(k+m). When concatenating column vectors x ∈ Zk and y ∈ Zm,
for simplicity, we often use the notation (x(cid:107)y) ∈ Zk+m (instead of (x(cid:62)(cid:107)y(cid:62))(cid:62)).
2.1 Lattice-Based Cryptographic Building Blocks
We ﬁrst recall the average-case problem SIS and its hardness.
n,m,q,β [2][27]). Given uniformly random matrix A ∈ Zn×m
∞
Deﬁnition 1 (SIS
ﬁnd a non-zero vector x ∈ Zm such that (cid:107)x(cid:107)∞ ≤ β and A · x = 0 mod q.