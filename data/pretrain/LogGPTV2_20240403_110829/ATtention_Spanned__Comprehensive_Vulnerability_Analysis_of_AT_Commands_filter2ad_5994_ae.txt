utor’s permissions (see Section 4.3), but were blocked by
SELinux’s Mandatory Access Control (MAC) policy. In
this case, SELinux prevented sensitive information from
being leaked, but without a full audit of the policy, a by-
pass could still exist.
6 Related Work
by 1290 of 2423 factory images. Aafer et al. [15] discov-
ered inconsistent security conﬁgurations among 591 cus-
tom images. Unlike previous work oriented around static
analysis, we consider both static and dynamic analysis.
Communicating with the modem within a Samsung
S2 using AT commands was previously detailed on the
XDA forums [58]. Pereira et al. showed how to use two
AT commands to ﬂash a malicious image onto Samsung
phones [46, 20]. Roberto and Aristide found additional
commands working on Samsung Galaxy S4 and S6 with
certain image builds [47]. Bluebug [38] showed how to
exploit a security loophole within Bluetooth to issue AT
commands via a covert channel to vulnerable phones. Hay
discovered around 10 AT commands with security im-
pacts on Nexus 6P due to the exposure of the AT interface
exploited from the Android bootloader (ABOOT) [31].
Mickey et al. also demonstrated how to exploit the modem
in cars using AT commands via USB connections [41].
Unlike previous work which focused on a single brand/-
model, limited the number of AT commands covered,
or rediscovered the traditional AT commands for real
modems, we provide a systematic study of traditional and
Android-speciﬁc AT commands in Android ecosystems
across different major vendors and phone models.
While USB security has been evaluated in traditional
computing environments [44, 52, 53, 32], it has received
limited attention on mobile computing platforms. Stavrou
et al. demonstrated how a malicious host machine can un-
lock the bootloader and ﬂash a compromised system im-
age onto an Android device using fastboot and adb via
USB [55, 50]. MACTANS [37] augmented USB charg-
ers with USB host functionalities, allowing the injection
of malware into iOS devices during charging. Vidas et
al. summarized Android attacks via USB [54], although
the focus is mainly limited to adb. Due to OEM vulnera-
bilities in fastboot implementations, Hay also showed that
hidden USB functionalities can be enabled, including mo-
dem diagnostics and AT interfaces [31], allowing data ex-
ﬁltration and system downgrading.
The Android community has been aware of the impact
of vendor customization on Android images. Felt et
al. [28, 29] investigated over 900 Android applications
and discovered occurrences of over privilege and permis-
sion re-delegation. Wu et al. [56] showed that 85.78% of
the pre-loaded apps in 10 stock Android images are over
privileged due to vendor customizations. Aafer et al. [14]
analyzed the threat of hanging attribute references within
pre-installed apps by looking into 97 factory images cov-
ering major Android vendors. Previous research mainly
focused on apps inside the Android image, so the number
of images covered was usually limited. Zhou et al. [59]
studied the vulnerabilities of Linux device drivers in An-
droid customizations, and found common issues shared
7 Conclusion
AT commands have become an integral part of the An-
droid ecosystem, yet the extent of their functionality is
unclear and poorly documented. In this paper, we sys-
tematically retrieve and extract AT commands from over
2,000 Android smartphone ﬁrmware images across 11
vendors to build a database of 3,500 commands. We test
this AT command corpus against 8 Android devices from
4 vendors via USB connections. We ﬁnd different attacks
using AT commands, including ﬁrmware ﬂashing, An-
droid security mechanism bypassing by making calls via
USB, unlocking screens, injecting touch events, exﬁltrat-
ing sensitive data, etc. We demonstrate that the AT com-
USENIX Association
27th USENIX Security Symposium    285
mand interface contains an alarming amount of uncon-
strained functionality and represents a broad attack sur-
face on Android devices.
Disclosure We have notiﬁed each vendor of any rele-
vant ﬁndings and have worked with their security team to
address the issues.
Acknowledgments
This work was supported by the National Science Foun-
dation under grants CNS-1540217, CNS-1526718, CNS-
1564140, and CNS-1617474.
References
[1] baksmali.
https://bitbucket.org/JesusFreke/smali.
Last Accessed: Feb. 2018.
[2] dex2jar. https://github.com/pxb1988/dex2jar. Last Ac-
cessed: Feb. 2018.
[3] FlashTool. http://www.flashtool.net. Last Accessed: Feb.
2018.
[4] jadx. https://github.com/skylot/jadx. Last Accessed:
Feb. 2018.
[5] jd-cmd - Command line Java Decompiler.
https://
github.com/kwart/jd-cmd. Last Accessed: Feb. 2018.
[6] Lenovo QSB File
splitter.
developers.com/showthread.php?t=2595269.
Accessed: Feb. 2018.
https://forum.xda-
Last
[7] LGE KDZ Utilities. https://github.com/ehem/kdztools.
Last Accessed: Feb. 2018.
[8] sdat2img. https://github.com/xpirt/sdat2img. Last Ac-
cessed: Feb. 2018.
[9] simg2img.
https://github.com/anestisb/android-
simg2img. Last Accessed: Feb. 2018.
[10] splitupdate.
https://github.com/jenkins-84/
split updata.pl. Last Accessed: Feb. 2018.
[11] szbtool. https://github.com/yuanguo8/szbtool. Last Ac-
cessed: Feb. 2018.
[12] Universal HTC RUU/ROM Decryption Tool 3.6.8.
https:
//forum.xda-developers.com/chef-central/android/
tool-universal-htc-ruu-rom-decryption-t3382928.
Last Accessed: Feb. 2018.
[13] unyaffs. https://github.com/ehlers/unyaffs. Last Ac-
cessed: Feb. 2018.
[14] Y. Aafer, N. Zhang, Z. Zhang, X. Zhang, K. Chen, X. Wang,
X. Zhou, W. Du, and M. Grace. Hare Hunting in the Wild An-
droid: A Study on the Threat of Hanging Attribute References. In
Proceedings of the 22nd ACM SIGSAC Conference on Computer
and Communications Security, pages 1248–1259. ACM, 2015.
[15] Y. Aafer, X. Zhang, and W. Du. Harvesting Inconsistent Security
Conﬁgurations in Custom Android ROMs via Differential Analy-
sis. In USENIX Security Symposium, pages 1153–1168, 2016.
[16] ActiveXperts Software. Basic Hayes AT Command Set. https:
//www.activexperts.com/sms-component/at/basic/,
2018.
[17] ActiveXperts Software. Extended AT Command Set. https:
//www.activexperts.com/sms-component/at/extended/,
2018.
[18] ActiveXperts Software. Proprietary Sony Ericsson AT Command
Set. https://www.activexperts.com/sms-component/at/
sonyericsson/, 2018.
[19] M. Anderson and K. Olmstead. Many smartphone owners don’t
take steps to secure their devices, Mar. 2017. Pew Research Center.
[20] P. Andr´e, C. Manuel Eduardo, and B. Pedro. Charge your device
with the latest malware. BlackHat Europe, 2014.
[21] Burak Alakus.
TO CONTROL YOUR MOBILE PHONE
BY AT COMMANDS VIA BLUETOOTH (C#.NET).
https://burakalakusen.wordpress.com/2011/07/27/
to-control-your-mobile-phone-by-at-commands-
via-bluetooth/, 2011.
[22] CVE. CVE-2013-3666. https://www.cvedetails.com/cve/
CVE-2013-3666/, 2013.
[23] O. Davydov. Unlocking The Screen of an LG Android Smartphone
with AT Modem Commands, Feb. 2017. Forensic Focus Blog.
[24] F. Durda IV. The AT Command Set Reference - History. https:
//nemesis.lonestar.org, 2004.
[25] ETSI. Digital cellular telecommunications system (Phase 2+);
Use of Data Terminal Equipment - Data Circuit terminating;
Equipment (DTE - DCE) interface for Short Message Service
(SMS) and Cell Broadcast Service (CBS) (GSM 07.05 ver-
sion 5.5.0). http://www.etsi.org/deliver/etsi gts/07/
0705/05.03.00 60/gsmts 0705v050300p.pdf, 1997.
[26] ETSI.
Digital cellular telecommunications system (Phase
for GSM Mobile Equipment
2+); AT Command set
(ME)
version
1998).
(3GPP TS 07.07
http://www.etsi.org/deliver/etsi ts/100900 100999/
100916/07.08.00 60/ts 100916v070800p.pdf, 2003.
7.8.0 Release
[27] ETSI.
Digital cellular telecommunications system (Phase
(GSM); Universal Mobile Telecommunications Sys-
2+)
tem (UMTS); LTE; AT command set
for User Equip-
ment (UE) (3GPP TS 27.007 version 13.6.0 Release 13).
http://www.etsi.org/deliver/etsi ts/127000 127099/
127007/13.06.00 60/ts 127007v130600p.pdf, 2017.
[28] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android
Permissions Demystiﬁed. In Proceedings of the 18th ACM confer-
ence on Computer and communications security, pages 627–638.
ACM, 2011.
[29] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Per-
mission re-delegation: Attacks and defenses. In USENIX Security
Symposium, volume 30, 2011.
[30] A. Ganti.
Latest Samsung Galaxy Note 8 Bootloader Pre-
https://
vents Flashing Unsigned Firmware on Device.
wccftech.com/latest-samsung-galaxy-s8-s8-note8-
bootloader-prevents-flashing-new-firmware/, 2018.
[31] R. Hay. fastboot OEM vuln: Android Bootloader Vulnerabilities in
Vendor Customizations. In 11th USENIX Workshop on Offensive
Technologies (WOOT 17). USENIX Association, 2017.
[32] G. Hernandez, F. Fowze, D. J. Tian, T. Yavuz, and K. Butler. Fir-
mUSB: Vetting USB Device Firmware using Domain Informed
Symbolic Execution. In 24th ACM Conference on Computer and
Communications Security (CCS’17), Dallas, USA, 2017.
[33] Intel.
Installation instructions for the intel R(cid:13) usb driver for
https://software.intel.com/en-us/
android* devices.
android/articles/installation-instructions-for-
intel-android-usb-driver, 2015.
[34] IPFS. Motorola phone AT commands. https://ipfs.io/ipfs/
QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/
wiki/Motorola phone AT commands.html, 2014.
286    27th USENIX Security Symposium
USENIX Association
[35] ITU-T.
Serial asynchronous automatic dialling and con-
trol.
https://www.itu.int/rec/dologin pub.asp?lang=
e&id=T-REC-V.250-200307-I!!PDF-E&type=items, 2003.
[36] J. Jelinek, A. Van de Ven, U. Drepper, and D. Novillo. Object size
checking to prevent (some) buffer overﬂows, Sept. 2004. GCC
Patches List.
[37] B. Lau, Y. Jang, C. Song, T. Wang, P. Chung, and P. Royal. Mac-
tans: Injecting Malware into iOS Devices via Malicious Chargers.
Proceedings of the Black Hat USA Brieﬁngs, Las Vegas, NV, Au-
gust 2013, 2013.
[38] A. Laurie, M. Holtmann, and M. Herfurt. The bluebug. AL Digital
Ltd. http://triﬁnite. org/triﬁnite stuff bluebug. html.
[39] LG. LGUP. https://www.mylgphones.com/download-lg-
up-software, 2017.
[40] Messagestick.
MODEMS.
hayes modem.html, 1992.
TECHNICAL REFERENCE FOR HAYES
http://www.messagestick.net/modem/
[41] S. Mickey, M. Jesse, and B. Oleksandr. Driving down the rabbit
hole. In DEF CON 25, 2017.
[42] MultiTech Systems.
AT Commands For CDMA Wire-
less Modems. http://www.canarysystems.com/nsupport/
CDMA AT Commands.pdf, 2004.
[43] MultiTech Systems. EV-DO and CDMA AT Commands Ref-
https://www.multitech.com/documents/
erence Guide.
publications/manuals/s000546.pdf, 2015.
[44] K. Nohl and J. Lell. BadUSB-On accessories that turn evil. Black
Hat USA, 2014.
[45] Openmoko.
modem.
Neo 1973 and Neo FreeRunner gsm modem, 2012.
Neo 1973 and Neo FreeRunner GSM
http://wiki.openmoko.org/wiki/
[46] A. Pereira, M. Correia, and P. Brand˜ao. USB Connection Vul-
nerabilities on Android Smartphones: Default and Vendors’ Cus-
In IFIP International Conference on Communica-
tomizations.
tions and Multimedia Security, pages 19–32. Springer, 2014.
[47] P. Roberto and F. Aristide.
Modem interface exposed
https://github.com/ud2/advisories/tree/
via USB.
master/android/samsung/nocve-2016-0004, 2016.
[48] Samsung. Samsung Odin. https://samsungodin.com/, 2017.
[49] Y. Shao, J. Ott, Y. J. Jia, Z. Qian, and Z. M. Mao. The misuse of
android unix domain sockets and security implications. In Pro-
ceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security, pages 80–91. ACM, 2016.
[50] A. Stavrou and Z. Wang. Exploiting Smart-Phone USB Connec-
tivity For Fun And Proﬁt. BlackHat DC, 2011.
solutions.
[51] Telit wireless
ence Guide.
Telit xN930 AT Commands Reference Guide r1.pdf,
2013.
xN930 AT Command Refer-
http://www.iot.com.tr/uploads/pdf/
[52] D. J. Tian, A. Bates, and K. Butler. Defending Against Malicious
USB Firmware with GoodUSB. In Proceedings of the 31st An-
nual Computer Security Applications Conference, pages 261–270.
ACM, 2015.
[53] D. J. Tian, N. Scaife, A. Bates, K. Butler, and P. Traynor. Making
USB Great Again with USBFILTER. In USENIX Security Sympo-
sium, 2016.
[54] T. Vidas, D. Votipka, and N. Christin. All Your Droid Are Belong
to Us: A Survey of Current Android Attacks. In WOOT, pages
81–90, 2011.
[55] Z. Wang and A. Stavrou. Exploiting Smart-Phone USB Connec-
tivity For Fun And Proﬁt. In Proceedings of the 26th Annual Com-
puter Security Applications Conference, pages 357–366. ACM,
2010.
[56] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The Impact of
Vendor Customizations on Android Security. In Proceedings of
the 2013 ACM SIGSAC conference on Computer & communica-
tions security, pages 623–634. ACM, 2013.
[57] XDA Developers. New Samsung Galaxy S8, S8+, and Note8
Bootloader Prevents Flashing Out of Region Firmware.
https://www.xda-developers.com/samsung-galaxy-
s8-note8-bootloader-odin/, 2018.
[58] XDA Forums. How to talk to the Modem with AT com-
mands. https://forum.xda-developers.com/galaxy-s2/
help/how-to-talk-to-modem-commands-t1471241, 2012.
[59] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang. The Peril of
Fragmentation: Security Hazards in Android Device Driver Cus-
tomizations. In Security and Privacy (SP), 2014 IEEE Symposium
on, pages 409–423. IEEE, 2014.
USENIX Association
27th USENIX Security Symposium    287
A Additional Implementation Details
A.1 AT Extraction Details
Some limitations of our extraction include potentially
missing AT commands, images that fail to extract, and
missing build.prop ﬁles. Given our AT command regular
expression and the symbol set we use, we may miss com-
mands using a non-standard symbol following the AT. In
practice, we observe from AT command standards, ex-
isting online AT databases, manual analysis in IDA Pro,
Google searches, and more permissive regular expres-
sions that the vast majority of extended AT commands
found in the wild are uppercase and use one of the sym-
bols [+*!@#$%ˆ&] matched by our expression. Despite
this, if new valid patterns are found in the future, they can
be easily added to our regular expression.
Images that fail to extract completely are still ana-
lyzed for strings, but if they are compressed, detecting
any matches will be impossible. If an image is missing
a build.prop ﬁle, we do not include it in our dataset, as
this may be indicative of an invalid Android image, since
all AOSP images are mandated to contain this ﬁle.
A.2 AT Database Filtering
Filtering Heuristic
cmd := String
f ile:= AtFile
(cid:40)e−0.4∗(cmd::len−3), cmd::class(cid:51){alnum}
charclass =
0, otherwise
f ile::badlines
f ile score =
at score = 10·(map
[0,1]
f ile::lines
(e0.05∗ f ile::lines−1)
· map
[0,1]
(charclass)+ f ile score)
We deﬁne String and AtFile as types, var::attr as
accessing the attribute attr of var, and the
(n) function
map
[x,y]
to clamp n to the range x≤n≤y.
In practice we observe that it is less common for an AT
command to have digits ([0-9]) and lower case letters ([a-
z]) in the same command. We punish commands match-
ing this with an exponential decay term in terms of a con-
stant and the command length with the charclass metric.
The minimum command that would be scored is three (3)
characters, hence the subtraction of three. The larger the
candidate AT command, the less it is punished, as the like-
lihood that the command is not random noise increases
with each character.
For the f ile score metric, we record every line found
that fails the initial regular expression test and increase
the f ile::badlines variable. For each line, regardless of
it failing or passing, we increase the f ile::lines variable.
This creates a false positive percentage for the ﬁle. We in-
crease the conﬁdence of this FP score exponentially based
off of the number of lines seen in the ﬁle and a constant of
our choosing.
Finally we sum and weight
the charclass and
f ile score metrics to create a ﬁnal at score (a lower score
means that it is less likely to be spurious). For future
processing, we set the spurious command threshold to be
at score≥5.0. Through manual inspection we found this
balances the number of false negatives (actual commands
discarded) and false positives (bad commands accepted).
Filtering Results During the initial extraction of
ﬁrmware images, we used strings to match on lines
matching the regular expression AT[!@#$%^&*+]. To
narrow down on actual AT commands, we applied the
heavier regular expression, which eliminated 33.2% of
all processed lines, as shown in Table 15. To further