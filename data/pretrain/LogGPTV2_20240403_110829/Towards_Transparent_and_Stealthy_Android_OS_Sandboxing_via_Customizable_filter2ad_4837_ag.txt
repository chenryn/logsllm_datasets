159
157
139
142
141
150
132
147
141
147
150
141
157
149
151
131
153
157
151
146
or “google,” G-Ware’s malicious activities will not be triggered.
We construe this behavior as a way to evade Android’s built-in
Application Sandbox or bare-metal analysis framework, because
Android’s built-in sandboxing environments are usually named as
“Nexus XXX” or “Pixel YYY,” and the bare-metal analysis framework
like BareDroid [48] is also built on a specific Google Nexus phone.
We list G-Ware samples’ MD5 values in Appendix Table 7.
Our device attribute customization functionality prevents mal-
ware from fingerprinting the underlying mobile device that runs
VPBox. We configure our VPs as four different phones: Xiaomi
RedmiNote 4 (VP1), Xiaomi Redmi Note 4x (VP2), Huawei Honor
6x (VP3), and Huawei Honor 8 (VP4). In particular, we edit cus-
tomizable device-attribute options (shown in Appendix Table 6) as
the same values of the target phone. After that, we rerun G-Ware
malware in custom VPs to monitor their behaviors. As shown in
Table 4, all G-Ware samples exhibit much more file operations in
VPs than in physical Google phones. Besides, we observe the same
behaviors across the four VP environments, such as calling “set-
ComponentEnabledSetting” to hide the current App icon and then
stealthily downloading new malicious packages.
9 DISCUSSION AND FUTURE WORK
A natural question to VPBox is whether a skilled attacker can easily
detect the presence of the new Android container once it is publicly
known. We do not assume that evading our approaches is strictly
impossible, but they can prohibitively increase attackers’ cost. We
acknowledge that VPBox introduces some specific artifacts, such
as never-changing geographical location and device namespace.
However, these artifacts can be hidden by VPBox’s unique feature
on device attribute customization and its fine-grained SELinux
policy. As some devices’ virtualization methods happen at the host
userspace, if an app in the VP has the root privilege, it can find out
the corresponding service processes are incomplete. For example,
the VP’s Bluetooth service process does not interact with its own
Bluetooth stack and Bluetooth controller. However, our design
pushes attackers from attempting to fingerprint a virtual machine
or a very specific mobile device, to attempting to exploit privilege
escalation vulnerabilities to root devices. We believe this to be a
non-trivial task even for skilled attackers.
VPBox now provides 150 device customization options, but we
cannot guarantee that our list is complete. The arms race here is
that an attacker could detect the existence of VPBox’s underlying
Google phone by checking the consistency of some obscure device
properties, but finding all of them is an open problem. It is worth
noting that only the foreground VP shows the full strength in
bypassing virtual-machine detection heuristics. Some devices (e.g.,
Bluetooth and ADB) in background VPs are disabled because they
are physically not designed for multiplexing. Therefore, the best
strategy to run untrusted apps or evasive malware is executing
them in the foreground VP.
Reverse Turing Test. A new trend of evading virtual environ-
ment is the so-called “Reverse Turing Test” by detecting human
interactions [19, 24, 47]. For example, Miramirkhani et al. [47] pro-
pose using the “wear and tear” artifacts that typically occur on
devices of real users, but not virtual devices, to detect malware
sandboxes. The authors [47] also developed a statistical model to
help build virtual machine images that exhibit more realistic “wear-
and-tear” characteristics. Their findings help further improve the
fidelity of VPBox by customizing the VP with the “wear-and-tear”
artifacts.
Dynamic Malware Analysis. VPBox shows promise as a sand-
box for dynamic malware analysis. Currently, system call invoca-
tion tracking is ready via SELinux virtualization. With the device
namespace and our custom SELinux policy, we can capture sys-
tem calls pertaining to the malware process. However, system calls
alone have been questioned to depict high-level Android-specific
semantics [64, 75]. Next, inspired by CopperDroid’s out-of-the-
box approach [64], we will reconstruct malware behaviors from
low-level system events, leaving no in-guest behavior analysis com-
ponents. We always perform malware analysis in the foreground
VP, and all background VPs are customized in a clean state. Upon
analysis completion, a background VP is switched to the foreground
to start the next round of malware analysis.
10 CONCLUSION
In this paper, we characterize, research, and evaluate VPBox, a new
Android container-based virtualization framework. VPBox provides
a transparent virtual phone environment and allows users to cus-
tomize the virtual phone’s device attributes stealthily. Currently,
VPBox is the only Android container framework that can work on
mainstream Android versions. Our experiments demonstrate that
VPBox introduces negligible runtime overhead and reveals strong
resilience against various virtual machine detection heuristics. VP-
Box has been deployed into a production environment to assist
security professionals in identifying evasive malware.
ACKNOWLEDGMENTS
We sincerely thank CCS 2021 anonymous reviewers for their in-
sightful comments and Dr. Srdjan Capkun for helping us improve
the paper throughout the shepherding process. This research was
supported in part by the National Natural Science Foundation of
China (62172308, U1626107, 61972297, 62172144), and Jiang was
supported by the National Science Foundation (NSF) under grant
CNS-1850434 and CNS-2128703.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2870REFERENCES
[1] Yousra Aafer, Jianjun Huang, Yi Sun, Xiangyu Zhang, Ninghui Li, and Chen
Tian. 2018. AceDroid: Normalizing Diverse Android Access Control Checks
for Inconsistency Detection. In Proceedings of the 2018 Network and Distributed
System Security Symposium (NDSS’18).
[2] Theodora Adufu, Jieun Choi, and Yoonhee Kim. 2015. Is Container-based Tech-
nology a Winner for High Performance Scientific Applications?. In Proceedings
of the 17th Asia-Pacific Network Operations and Management Symposium.
[3] Amir Afianian, Salman Niksefat, Babak Sadeghiyan, and David Baptiste. 2019.
Malware Dynamic Analysis Evasion Techniques: A Survey. Comput. Surveys 52,
6, Article 126 (November 2019), 28 pages.
[4] Vitor Afonso, Anatoli Kalysch, Tilo Müller, Daniela Oliveira, André Grégio, and
Paulo Lício de Geus. 2018. Lumus: Dynamically Uncovering Evasive Android
Applications. In Proceedings of the 21st International Conference on Information
Security (ISC’18).
[5] Android Developers. [online]. SafetyNet Attestation API. https://developer.
android.com/training/safetynet/attestation.
[6] Android Open Source Project. 2019. Low Memory Killer Daemon (lmkd). https:
//source.android.com/devices/tech/perf/lmkd.
[7] Android Open Source Project. [online]. Supporting Multiple Users. https://source.
android.com/devices/tech/admin/multi-user/.
[8] Android Open Source Project. [online]. Using Binder IPC. https://source.android.
com/devices/architecture/hidl/binder-ipc.
[9] androidcentrol. 2018. G-Ware Virus. https://forums.androidcentral.com/ask-
question/885223-g-ware-virus-app-not-deleting.html.
[10] Jeremy Andrus, Christoffer Dall, Alexander Van’t Hof, Oren Laadan, and Jason
Nieh. 2011. Cells: A Virtual Mobile Smartphone Architecture. In Proceedings of
the 23rd ACM Symposium on Operating Systems Principles (SOSP’11).
[11] asLody. 2015. VirtualApp. https://github.com/asLody/VirtualApp.
[12] Michael Backes, Sven Bugiel, Christian Hammer, Oliver Schranz, and Philipp von
Styp-Rekowsky. 2015. Boxify: Full-fledged App Sandboxing for Stock Android.
In Proceedings of the 24th USENIX Conference on Security Symposium (USENIX
Security’15).
[13] Rafael Ballagas, Michael Rohs, Jennifer G Sheridan, and Jan Borchers. 2004. BYOD:
Bring Your Own Device. In Proceedings of the 6th International Conference on
Ubiquitous Computing (UbiComp’04).
[14] Ken Barr, Prashanth Bungale, Stephen Deasy, Viktor Gyuris, Perry Hung, Craig
Newell, Harvey Tuch, and Bruno Zoppis. 2010. The VMware Mobile Virtualization
Platform: Is That a Hypervisor in Your Pocket? ACM SIGOPS Operating Systems
Review 44, 4 (2010).
[15] Antonio Bianchi, Eric Gustafson, Yanick Fratantonio, Christopher Kruegel, and
Giovanni Vigna. 2017. Exploitation and Mitigation of Authentication Schemes
Based on Device-Public Information. In Proceedings of the 33rd Annual Computer
Security Applications Conference (ACSAC’17).
[16] Lorenzo Bordoni, Mauro Conti, and Riccardo Spolaor. 2017. Mirage: Toward a
Stealthier and Modular Malware Analysis Sandbox for Android. In Proceedings
of the 22th European Symposium on Research in Computer Security (ESORICS’17).
[17] Cellrox ltd. [online]. Cellrox Mobile Virtualization. https://www.cellrox.com/.
[18] Ngoc-Tu Chau and Souhwan Jung. 2018. Dynamic analysis with Android Con-
tainer: Challenges and Opportunities. Digital Investigation 27 (2018).
[19] Valerio Costamagna, Cong Zheng, and Heqing Huang. 2018. Identifying and Evad-
ing Android Sandbox Through Usage-Profile Based Fingerprints. In Proceedings
of the First Workshop on Radical and Experiential Security.
[20] Deshun Dai, Ruixuan Li, Junwei Tang, Ali Davanian, and Heng Yin. 2020. Parallel
Space Traveling: A Security Analysis of App-Level Virtualization in Android. In
Proceedings of the 25th ACM Symposium on Access Control Models and Technologies
(SACMAT’20).
[21] Christoffer Dall and Jason Nieh. 2014. KVM/ARM: The Design and Implemen-
tation of the Linux ARM Hypervisor. In Proceedings of the 19th International
Conference on Architectural Support for Programming Languages and Operating
Systems (ASPLOS’14).
[22] David Pierce. 2018. Your Smartphone Is the Best Computer You Own. The Wall
Street Journal, http://tiny.cc/cqsnpz.
[23] Hitesh Dharmdasani. 2014. Android.HeHe: Malware Now Disconnects Phone
Calls. https://www.fireeye.com/blog/threat-research/2014/01/android-hehe-
malware-now-disconnects-phone-calls.html.
[24] Wenrui Diao, Xiangyu Liu, Zhou Li, and Kehuan Zhang. 2016. Evading Android
Runtime Analysis Through Detecting Programmed Interactions. In Proceedings
of the 9th ACM Conference on Security & Privacy in Wireless and Mobile Networks
(WiSec’16).
[25] Echo Duan and Roland Sun. 2017. GhostClicker Adware: a Phantomlike Android
Click Fraud. http://tiny.cc/7w5ctz.
[26] Michael Eder. 2016. Hypervisor- vs. Container-based Virtualization. In Proceed-
ings of the Seminars Future Internet (FI) and Innovative Internet Technologies and
Mobile Communications.
[27] Eric Enge. 2019. Mobile vs. Desktop Usage in 2019. https://www.perficient.com/
insights/research-hub/mobile-vs-desktop-usage-study.
[28] Wes Felter, Alexandre Ferreira, Ram Rajamony, and Juan Rubio. 2015. An Up-
dated Performance Comparison of Virtual Machines and Linux Containers. In
Proceedings of the 2015 IEEE International Symposium on Performance Analysis of
Systems and Software.
[29] Yanick Fratantonio, Antonio Bianchi, William Robertson, Engin Kirda, Christo-
pher Kruegel, and Giovanni Vigna. 2016. TriggerScope: Towards Detecting Logic
Bombs in Android Applications. In Proceedings of the 37th IEEE Symposium on
Security and Privacy.
[30] Jyoti Gajrani, Jitendra Sarswat, SMeenakshi Tripathi, Vijay Laxmi, M.S. Gaur,
and Mauro Conti. 2015. A Robust Dynamic Analysis System Preventing SandBox
Detection by Android Malware. In Proceedings of the 8th International Conference
on Security of Information and Networks (SIN’15).
[31] Tal Garfinkel, Keith Adams, Andrew Warfield, and Jason Franklin. 2007. Compat-
ibility is Not Transparency: VMM Detection Myths and Realities. In Proceedings
of the 11th USENIX Workshop on Hot Topics in Operating Systems (HOTOS’07).
[32] Grant Ho, Derek Leung, Pratyush Mishra, Ashkan Hosseini, Dawn Song, and
David Wagner. 2016. Smart Locks: Lessons for Securing Commodity Internet of
Things Devices. In Proceedings of the 11th ACM on Asia Conference on Computer
and Communications Security (ASIACCS’16).
[33] John Høegh-Omdal. 2020. StrandHogg 2.0 - The ‘evil twin’, New Android Vul-
nerability Even More Dangerous, With Attacks More Difficult to Detect Than
Predecessor. https://promon.co/strandhogg-2-0/.
[34] Yiming Jing, Ziming Zhao, Gail-Joon Ahn, and Hongxin Hu. 2014. Morpheus:
Automatically Generating Heuristics to Detect Android Emulators. In Proceedings
of the 30th Annual Computer Security Applications Conference (ACSAC’14).
[35] Uri Kanonov and Avishai Wool. 2016. Secure Containers in Android: The Samsung
KNOX Case Study. In Proceedings of the 6th Workshop on Security and Privacy in
Smartphones and Mobile Devices (SPSM’16).
[36] Alexander Kedrowitsch, Danfeng (Daphne) Yao, Gang Wang, and Kirk Cameron.
2017. A First Look: Using Linux Containers for Deceptive Honeypots. In Pro-
ceedings of the 2017 Workshop on Automated Decision Making for Active Cyber
Defense.
[37] Ayrat Khalimov, Sofiane Benahmed, Rasheed Hussain, S.M. Ahsan Kazmi, Alma
Oracevic, Fatima Hussain, Farhan Ahmad, and Chaker Abdelaziz Kerrache. 2019.
Container-Based Sandboxes for Malware Analysis: A Compromise Worth Con-
sidering. In Proceedings of the 12th IEEE/ACM International Conference on Utility
and Cloud Computing (UCC’19).
[38] I Luk Kim, Yunhui Zheng, Hogun Park, Weihang Wang, Wei You, Yousra Aafer,
and Xiangyu Zhang. 2020. Finding Client-side Business Flow Tampering Vulnera-
bilities. In Proceedings of the 42nd International Conference on Software Engineering
(ICSE’20).
[39] Dhilung Kirat, Giovanni Vigna, and Christopher Kruegel. 2011. BareBox: Efficient
Malware Analysis on Bare-Metal. In Proceedings of the 27th Annual Computer
Security Applications Conference (ACSAC’11).
[40] Mohit Kumar. 2019. New Android Malware Apps Use Motion Sensor to Evade De-
tection. https://thehackernews.com/2019/01/android-malware-play-store.html.
[41] Patrik Lantz. 2015. Dynamic Analysis of Android Apps. https://github.com/
pjlantz/droidbox.
[42] LBE Tech. [online]. Parallel Space: Run Multiple Social and Game Accounts in
Your Phone Simultaneously. http://parallel-app.com/.
[43] Martina Lindorfer, Matthias Neugschwandtner, Lukas Weichselbaum, Yanick
Fratantonio, Victor van der Veen, and Christian Platzer. 2014. ANDRUBIS –
1,000,000 Apps Later: A View on Current Android Malware Behaviors. In Proceed-
ings of the 3rd International Workshop on Building Analysis Datasets and Gathering
Experience Returns for Security.
[44] Linux Containers. [online].
Infrastructure for Container Projects.
https:
//linuxcontainers.org/.
[45] Dominik Maier and Mykola Protsenko. 2014. Divide-and-Conquer: Why Android
Malware Cannot Be Stopped. In Proceedings of the 9th International Conference
on Availability, Reliability and Security (ARES’14).
[46] Iliyan Malchev. 2017.
Here comes Treble: A modular base for An-
droid. https://android-developers.googleblog.com/2017/05/here-comes-treble-
modular-base-for.html.
[47] Najmeh Miramirkhani, Mahathi Priya Appini, Nick Nikiforakis, and Michalis
Polychronakis. 2017. Spotless Sandboxes: Evading Malware Analysis Systems
Using Wear-and-Tear Artifacts. In Proceedings of the 38th IEEE Symposium on
Security and Privacy (S&P’17).
[48] Simone Mutti, Yanick Fratantonio, Antonio Bianchi, Luca Invernizzi, Jacopo Cor-
betta, Dhilung Kirat, Christopher Kruegel, and Giovanni Vigna. 2015. BareDroid:
Large-Scale Analysis of Android Apps on Real Devices. In Proceedings of the 31st
Annual Computer Security Applications Conference (ACSAC’15).
[49] Junjiro R. Okajima. [online]. Advanced Multi Layered Unification Filesystem.
http://aufs.sourceforge.net/.
[50] Thanasis Petsas, Giannis Voyatzis, Elias Athanasopoulos, Michalis Polychronakis,
and Sotiris Ioannidis. 2014. Rage Against the Virtual Machine: Hindering Dy-
namic Analysis of Android Malware. In Proceedings of the 7th European Workshop
on System Security (EuroSec’14).
[51] Qihoo360. 2015. DroidPlugin. https://github.com/DroidPluginTeam/DroidPlugin.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2871[52] Paul Ratazzi, Yousra Aafer, Amit Ahlawat, Hao Hao, Yifei Wang, and Wenliang
Du. 2014. A Systematic Security Evaluation of Android’s Multi-User Framework.
In Proceedings of the Mobile Security Technologies (MOST’14).
[53] Idan Revivo and Ofer Caspi. 2016. CuckooDroid - Automated Android Malware
Analysis. https://github.com/idanr1986/cuckoo-droid.
[54] rovo89. [online]. Xposed Module Repository. https://repo.xposed.info/.
[55] Onur Sahin, Ayse K. Coskun, and Manuel Egele. 2018. PROTEUS: Detecting
Android Emulators from Instruction-level Profiles. In Proceedings of the 21st Inter-
national Symposium on Research in Attacks, Intrusions, and Defenses (RAID’18).
[56] Luman Shi, Jianming Fu, Zhengwei Guo, and Jiang Ming. 2019. “Jekyll and Hyde”
is Risky: Shared-Everything Threat Mitigation in Dual-Instance Apps. In Proceed-
ings of the 17th ACM International Conference on Mobile Systems, Applications,
and Services (MobiSys’19).
[57] Luman Shi, Jiang Ming, Jianming Fu, Guojun Peng, Dongpeng Xu, Kun Gao, and
Xuanchen Pan. 2020. VAHunt: Warding Off New Repackaged Android Malware
in App-Virtualization’s Clothing. In Proceedings of the 27th ACM Conference on
Computer and Communications Security (CCS’20).
[58] Tatyana Shishkova and Lev Pikman. 2018. The Rotexy Mobile Trojan —- Banker
and Ransomware. https://securelist.com/the-rotexy-mobile-trojan-banker-and-
ransomware/88893/.
[59] Junaid Shuja, Abdullah Gani, Kashif Bilal, Atta Ur Rehman Khan, Sajjad A. Madani,
Samee U. Khan, and Albert Y. Zomaya. 2016. A Survey of Mobile Device Virtual-
ization: Taxonomy and State of the Art. Comput. Surveys 49, 1 (April 2016).
[60] shumei. [online]. ishumei Android Device Security Threat Detection SDK. https:
//www.ishumei.com/product/bs-post-sdk.html.
[61] Stephen Soltesz, Herbert Pötzl, Marc E. Fiuczynski, Andy Bavier, and Larry
Peterson. 2007. Container-Based Operating System Virtualization: A Scalable,
High-Performance Alternative to Hypervisors. In Proceedings of the 2nd ACM
SIGOPS/EuroSys European Conference on Computer Systems (EuroSys’07).
[62] SophosLabs. 2017. Android Malware Anti-emulation Techniques. http://tiny.cc/
s416tz.