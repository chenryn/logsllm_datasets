### G-Ware Malware Behavior and Evasion Techniques

When encountering terms like "Nexus" or "google," G-Ware's malicious activities are not triggered. This behavior is interpreted as a method to evade Android’s built-in Application Sandbox or bare-metal analysis frameworks. Typically, Android’s sandboxing environments are named "Nexus XXX" or "Pixel YYY," and bare-metal analysis frameworks, such as BareDroid [48], are often based on specific Google Nexus phones. The MD5 values of the G-Ware samples are listed in Appendix Table 7.

### Device Attribute Customization for Malware Analysis

Our device attribute customization functionality prevents malware from fingerprinting the underlying mobile device running VPBox. We configure our Virtual Phones (VPs) to mimic four different devices: Xiaomi RedmiNote 4 (VP1), Xiaomi Redmi Note 4x (VP2), Huawei Honor 6x (VP3), and Huawei Honor 8 (VP4). Specifically, we modify customizable device-attribute options (detailed in Appendix Table 6) to match the target phone. After configuring the VPs, we rerun the G-Ware malware to monitor their behaviors. As shown in Table 4, all G-Ware samples exhibit significantly more file operations in VPs compared to physical Google phones. Additionally, we observe consistent behaviors across the four VP environments, such as using "setComponentEnabledSetting" to hide the current app icon and stealthily downloading new malicious packages.

### Discussion and Future Work

A natural question about VPBox is whether skilled attackers can easily detect its presence once it becomes publicly known. While we do not assume that evading our approaches is impossible, we believe it would significantly increase the cost for attackers. VPBox introduces some specific artifacts, such as a never-changing geographical location and device namespace. However, these artifacts can be hidden by VPBox’s unique feature of device attribute customization and its fine-grained SELinux policy. 

If an app in the VP has root privileges, it may detect that the corresponding service processes are incomplete. For example, the VP’s Bluetooth service process does not interact with its own Bluetooth stack and controller. Nevertheless, our design makes it more difficult for attackers to fingerprint a virtual machine or a specific mobile device, instead pushing them towards exploiting privilege escalation vulnerabilities to gain root access, which is a non-trivial task even for skilled attackers.

VPBox currently provides 150 device customization options, but we cannot guarantee completeness. An attacker could potentially detect the existence of VPBox’s underlying Google phone by checking the consistency of obscure device properties, but finding all such properties remains an open problem. It is important to note that only the foreground VP fully bypasses virtual-machine detection heuristics. Some background VPs have disabled services (e.g., Bluetooth and ADB) because they are not designed for multiplexing. Therefore, the best strategy for running untrusted apps or evasive malware is to execute them in the foreground VP.

### Reverse Turing Test

A new trend in evading virtual environments is the "Reverse Turing Test," which involves detecting human interactions [19, 24, 47]. For instance, Miramirkhani et al. [47] propose using "wear and tear" artifacts, typically found on real user devices but not on virtual ones, to detect malware sandboxes. They also developed a statistical model to build virtual machine images that exhibit more realistic "wear-and-tear" characteristics. These findings can help further improve the fidelity of VPBox by customizing the VP with "wear-and-tear" artifacts.

### Dynamic Malware Analysis

VPBox shows promise as a sandbox for dynamic malware analysis. Currently, system call invocation tracking is available via SELinux virtualization. With the device namespace and our custom SELinux policy, we can capture system calls related to the malware process. However, relying solely on system calls has been questioned for depicting high-level Android-specific semantics [64, 75]. Inspired by CopperDroid’s out-of-the-box approach [64], we plan to reconstruct malware behaviors from low-level system events, leaving no in-guest behavior analysis components. We always perform malware analysis in the foreground VP, and all background VPs are customized in a clean state. Upon analysis completion, a background VP is switched to the foreground to start the next round of malware analysis.

### Conclusion

In this paper, we characterize, research, and evaluate VPBox, a new Android container-based virtualization framework. VPBox provides a transparent virtual phone environment and allows users to customize the virtual phone’s device attributes stealthily. Currently, VPBox is the only Android container framework that works on mainstream Android versions. Our experiments demonstrate that VPBox introduces negligible runtime overhead and exhibits strong resilience against various virtual machine detection heuristics. VPBox has been deployed in a production environment to assist security professionals in identifying evasive malware.

### Acknowledgments

We sincerely thank the anonymous reviewers of CCS 2021 for their insightful comments and Dr. Srdjan Capkun for his assistance in improving the paper throughout the shepherding process. This research was supported in part by the National Natural Science Foundation of China (62172308, U1626107, 61972297, 62172144), and Jiang was supported by the National Science Foundation (NSF) under grants CNS-1850434 and CNS-2128703.

### References

[References section remains unchanged]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the text.