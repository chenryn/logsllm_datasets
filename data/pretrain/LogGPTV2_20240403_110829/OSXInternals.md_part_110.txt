Chapter 9. Interprocess Communication Page 13 of 153
trailer. The trailer itself contains the trailer size in its msgh_trailer_size field.
The kernel may provide several trailer formats, and within each format, there can be multiple trailer
attributes. Mac OS X 10.4 provides only one trailer format: MACH_MSG_TRAILER_FORMAT_0. This format
provides the following attributes (in this order): a sequence number, a security token, and an audit token.
During messaging, the receiver can request the kernel to append one or more of these attributes as part of
the received trailer on a per-message basis. However, there is a caveat: To include a later attribute in the
trailer, the receiver must accept all previous attributes, where the later/previous qualifiers are with respect
to the aforementioned order. For example, including the audit token in the trailer will automatically
include the security token and the sequence number. The following types are defined to represent valid
combinations of trailer attributes:
 mach_msg_trailer_t the simplest trailer; contains a mach_msg_trailer_type_t and a
mach_msg_trailer_size_t, with no attributes
 mach_msg_seqno_trailer_t also contains the sequence number (mach_port_seqno_t) of the
message with respect to its port
 mach_msg_security_trailer_t also contains the security token (security_token_t) of the task
that sent the message
 mach_msg_audit_trailer_t also contains an audit token (audit_token_t)
A security token is a structure containing the effective user and group IDs of the sending task (technically,
of the associated BSD process). These are populated by the kernel securely and cannot be spoofed by the
sender. An audit token is an opaque object that identifies the sender of a Mach message as a subject to the
kernel's BSM auditing subsystem. It is also filled in securely by the kernel. Its contents can be interpreted
using routines in the BSM library.
A task inherits its security and audit tokens from the task that creates it. A task without a parent (i.e., the
kernel task) has its security and audit tokens set to KERNEL_SECURITY_TOKEN and KERNEL_AUDIT_TOKEN,
respectively. These are declared in osfmk/ipc/mach_msg.c. As the kernel evolves, it is likely that other
types of tokens that include more comprehensive information could be supported.
Figure 94 shows an example of how to request the kernel to include the security token in the trailer of a
received message.
Figure 94. Requesting the kernel to include the sender's security token in the message trailer
typedef struct { // simple message with only an integer as inline data
mach_msg_header_t header;
int data;
mach_msg_security_trailer_t trailer;
} msg_format_recv_t;
...
int
main(int argc, char **argv)
{
kern_return_t kr;
msg_format_recv_t recv_msg;
msg_format_send_t send_msg;
mach_msg_header_t *recv_hdr, *send_hdr;
mach_msg_option_t options;
...
options = MACH_RCV_MSG | MACH_RCV_LARGE;
options |= MACH_RCV_TRAILER_TYPE(MACH_MSG_TRAILER_FORMAT_0);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 14 of 153
// the following will include all trailer elements up to the specified one
options |= MACH_RCV_TRAILER_ELEMENTS(MACH_RCV_TRAILER_SENDER);
kr = mach_msg(recv_hdr, options, ...);
...
printf("security token = %u %u\n",
recv_msg.trailer.msgh_sender.val[0], // sender's user ID
recv_msg.trailer.msgh_sender.val[1]); // sender's group ID
...
}
The MACH_RCV_TRAILER_ELEMENTS() macro is used to encode the number of trailer elements desiredvalid
numbers are defined in osfmk/mach/message.h:
#define MACH_RCV_TRAILER_NULL 0 // mach_msg_trailer_t
#define MACH_RCV_TRAILER_SEQNO 1 // mach_msg_trailer_seqno_t
#define MACH_RCV_TRAILER_SENDER 2 // mach_msg_security_trailer_t
#define MACH_RCV_TRAILER_AUDIT 3 // mach_msg_audit_trailer_t
Note that the receive buffer must contain sufficient space to hold the requested trailer type.
In a client-server system, both the client and the server can request the other party's security token to be
appended to the incoming message trailer.
An Empty Message Sounds Much
Because of the trailer, the size of the smallest message you can send is different from the size
of the smallest message you can receive. On the send side, an empty message consists of only
the message header. The receiver must account for a trailer, so the smallest message that can
be received consists of a header and the smallest trailer possible.
9.3. Mach IPC: The Mac OS X Implementation
The core of the IPC subsystem is implemented in files in the osfmk/ipc/ directory in the kernel source
tree. Moreover, the osfmk/kern/ipc_* set of files implements IPC support functions and IPC-related
functions for kernel objects such as tasks and threads. Figure 95 shows an overview of Mach IPC
implementation in Mac OS X. We will examine the pieces of this picture in the next few sections.
Figure 95. An overview of Mach IPC implementation in Mac OS X
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 15 of 153
9.3.1. IPC Spaces
Each task has a private IPC spacea namespace for portsthat is represented by the ipc_space structure in
the kernel. A task's IPC space defines its IPC capabilities. Consequently, IPC operations such as send and
receive consult this space. Similarly, IPC operations that manipulate a task's rights operate on the task's
IPC space. Figure 96 shows the fields of the ipc_space structure.
Figure 96. The data structure for a task's IPC space
// osfmk/ipc/ipc_space.h
typedef natural_t ipc_space_refs_t;
struct ipc_space {
decl_mutex_data(,is_ref_lock_data)
ipc_space_refs_t is_references;
decl_mutex_data(,is_lock_data)
// is the space active?
boolean_t is_active;
// is the space growing?
boolean_t is_growing;
// table (array) of IPC entries
ipc_entry_t is_table;
// current table size
ipc_entry_num_t is_table_size;
// information for larger table
struct ipc_table_size *is_table_next;
// splay tree of IPC entries (can be NULL)
struct ipc_splay_tree is_tree;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 16 of 153
// number of entries in the tree
ipc_entry_num_t is_tree_total;
// number of "small" entries in the tree
ipc_entry_num_t is_tree_small;
// number of hashed entries in the tree
ipc_entry_num_t is_tree_hash;
// for is_fast_space()
boolean_t is_fast;
};
The IPC space encapsulates the knowledge necessary to translate between task-specific (local) port names
and kernel-wide (global) port data structures. This translation is implemented using translation entries for
port capabilities. Each capability is recorded in the kernel using an IPC entry data structure (struct
ipc_entry). An IPC space always contains a table of IPC entries that is pointed to by the is_table field
of the ipc_space structure. It can also contain a splay tree[6] of IPC entries, in which case the is_tree
field will be non-NULL. Both these are per-task data structures.
[6] A splay tree is a space-efficient, self-adjusting binary search tree with (amortized)
logarithmic time.
The table holds "small" port rights, with each table entry (struct ipc_entry) consuming 16 bytes. If a
port right is contained in the table, the right's name is an index into the table. The splay tree holds "large"
port rights, with each tree entry (struct ipc_tree_entry) consuming 32 bytes.
Naturally Speaking
The integer type used to represent a port name is historically the native integer type for the
machine. This type is called natural_t and is accessed by including
, which in turn accesses it from  or
 on the PowerPC and x86 versions, respectively, of Mac OS X.
With the introduction of the 64-bit Darwin ABI, several Mach data types (such as
vm_offset_t and vm_size_t) have been scaled to be the same size as a pointer. However,
natural_t is 32 bits in size regardless of the ABI.
9.3.1.1. IPC Entry Table
In general, port right names, which are integers (see Section 9.3.2), do fit in a table because the number of
ports a typical task uses is small enough. As we will see shortly, Mach allows a task to rename a port.
Moreover, ports can also be allocated using caller-specified names. This means a port name could
represent an index that is out of bounds for the task's table. Such rights can be accommodated by
overflowing them to the task's splay tree. To minimize memory consumption, the kernel dynamically
adjusts the threshold at which entries are held in the splay tree. In fact, the table can also be grown in size.
When the kernel does grow the table, it expands it to a new size that is specified (in units of number of
table entries) by the is_table_next field of the ipc_space structure. As shown in Figure 95, the
is_table_next field points to an ipc_table_size structure. The kernel maintains an array called
ipc_table_entries of such structures. This array, which is populated during the IPC subsystem's
initialization, is simply a predefined sequence of table sizes.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 17 of 153
Fast IPC Space
A fast IPC space is a special-case space that does not use a splay tree. It can be used only if
port names are guaranteed to be within table bounds.
When a port right whose entry is in the table is deleted, the entry is placed on a free list of unused entries.
The list is maintained within the table itself by chaining together unused entries through their ie_next
fields. When the next port right is allocated, the last freed entry (if any) is used. The ie_index field
implements an ordered hash table used for (reverse) translating an { IPC space, IPC object } pair to a
name. This hash table uses open addressing with linear probing.
9.3.1.2. IPC Entry Splay Tree
As shown in Figure 95, an entry in the splay tree consists of an ipc_entry structure (the same as a table
entry) along with the following additional fields: name, IPC space, and pointers to left and right children.
The ite_next field implements a global open hash table used for (reverse) translating an { IPC space,
IPC object } pair to a { name, IPC entry } pair.
9.3.2. The Anatomy of a Mach Port
A Mach port is represented in the kernel by a pointer to an ipc_port structure. The IPC entry structure's
ipc_object field points to an ipc_object structure, which is logically superimposed on an ipc_port
structure. Figure 97 shows an internal representation of the port data structure.
Figure 97. A view of the internal structure of a Mach port
[View full size image]
From an object-oriented perspective, an ipc_port structure is a subclass of an ipc_object structure.
Ports can be grouped into port sets in Mach, with the corresponding structure being an ipc_pset structure
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 18 of 153
[osfmk/ipc/ipc_pset.h]. In such a case, a right will be represented in the kernel by passing a pointer to
the ipc_pset structure in question (rather than an ipc_port structure). Another possibility is an
rpc_port structure.
The fields of an ipc_port structure include a pointer to the IPC space of the task holding the receive
right, a pointer to the kernel object that the port represents, and various reference counts such as the make-
send count, the number of send rights, and the number of send-once rights.
9.3.2.1. What's in a Port's Name?
It is important to realize the different between mach_port_t and mach_port_name_t: The two are treated
the same in user space but not in the kernel. A port's name is relevant only in a particular namespace,
corresponding to a task. A mach_port_name_t represents the local, namespace-specific identity of a port,
without implying any associated rights. A mach_port_t represents a reference added or deleted to a port
right. Such a reference is represented in user space by returning the name of the right (or many rights) that
was altered within the task's IPC space, which is why it is the same as a mach_port_name_t in user space.
Within the kernel, however, port rights are represented by passing a pointer to the appropriate port data
structure (ipc_port_t). If a user program receives a mach_port_name_t from the kernel, it means that
the kernel has not mapped any associated port rightsthe name is simply the port's integer representation.
When the kernel returns a mach_port_t, it maps the associated port rights to the recipient of the message.
In both cases, the user program sees the same integer, but with different underlying semantics.
The same port can exist with different names in multiple tasks. Conversely, the same port name can
represent different ports in different tasks. It is important to note that knowing a port name in another task
is not enough to use that port, since the kernel will evaluate the name in the caller's IPC space. For
example, if you print a mach_port_name_t value in a program and then attempt to use the value in
another task (one that does not have send rights to that port) to send a message, you will not succeed.
In a given port namespace, if there exist multiple rights for a given port, say, a send right and a receive
right, the names for the various rights will coalesce into a single name. In other words, a single name can
denote multiple rights. This is not so in the case of send-once rights, which are always named uniquely.
The ie_bits field of the ipc_entry structure holds the types of rights a given name represents. This
bitmap is what allows a single name in an IPC space to represent multiple rights. The IE_BITS_TYPE
macro is used to test the bit values.
// osfmk/mach/mach_port.h
typedef natural_t mach_port_right_t;
#define MACH_PORT_RIGHT_SEND ((mach_port_right_t) 0)
#define MACH_PORT_RIGHT_RECEIVE ((mach_port_right_t) 1)
#define MACH_PORT_RIGHT_SEND_ONCE ((mach_port_right_t) 2)
#define MACH_PORT_RIGHT_PORT_SET ((mach_port_right_t) 3)
#define MACH_PORT_RIGHT_DEAD_NAME ((mach_port_right_t) 4)
#define MACH_PORT_RIGHT_NUMBER ((mach_port_right_t) 5)
typedef natural_t mach_port_type_t;
typedef mach_port_type_t *mach_port_type_array_t;
#define MACH_PORT_TYPE(right) \
((mach_port_type_t)(((mach_port_type_t) 1) \
> 8)
#define MACH_PORT_GEN(name) (((name) & 0xff) > 24)
If a user program needs to use port names for arbitrarily mapping them to user data, it must use only the
index part of the port name, which is why the layout of a mach_port_name_t is exposed to user space.
Renaming Ports
It is possible for a task to rename a port to a new name. Such renaming may be useful if a
program wishes to overload port names with some program-specific meaning, say, the
address of hash table entries, each of which has a one-to-one correspondence with a port
name. A task still cannot have multiple names for the same port.
9.3.2.2. Validity of a Port Name
The kernel defines the value 0 to be the name of the null port (MACH_PORT_NULL). A null port is a legal
port value that can be carried in messages to indicate the absence of any port or port rights. A dead port
(MACH_PORT_DEAD) indicates that a port right was present but no longer isthat is, the right is dead. The
numerical value of MACH_PORT_DEAD is a natural_t with all bits set. It is also a legal port value that can
appear in a message. However, these two values do not represent valid ports. All remaining natural_t
values are valid port values. The header file osfmk/mach/port.h contains several port-related definitions.
The code that manages IPC entries provides interfaces to look up an IPC object given its name in an IPC
space and, conversely, to look up the name of an IPC object in a given IPC space. The former type of
lookup, typically a  mach_port_t TRanslation, is used while sending a
message. The latter, typically a  mach_port_name_t translation, is used while
receiving a message.
9.3.3. Tasks and IPC
Mach tasks and threads both begin life with certain sets of standard Mach ports (recall that we came
across these ports in Chapter 7). Figure 98 shows the IPC-related data structures associated with a task.
Besides the task's standard ports, the task structure also contains a pointer (itk_space) to the task's IPC
space.
Figure 98. IPC-related data structures associated with a Mach task
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 20 of 153
// osfmk/mach/ppc/exception.h
#define EXC_TYPES_COUNT 10
// osfmk/mach/mach_param.h
#define TASK_PORT_REGISTER_MAX3 // number of "registered" ports
// osfmk/kern/task.h
struct task {
// task's lock
decl_mutex_data(,lock)
...
// IPC lock
decl_mutex_data(,itk_lock_data)
// not a right -- ipc_receiver does not hold a reference for the space
// used for representing a kernel object of type IKOT_TASK
struct ipc_port *itk_self;
// "self" port -- a "naked" send right made from itk_self
// this is the task's kernel port (TASK_KERNEL_PORT)
struct ipc_port *itk_sself;
// "exception" ports -- a send right for each valid element
struct exception_action exc_actions[EXC_TYPES_COUNT];
// "host" port -- a send right
struct ipc_port *itk_host;
// "bootstrap" port -- a send right
struct ipc_port *itk_bootstrap;
// "registered" port -- a send right for each element
struct ipc_port *itk_registered[TASK_PORT_REGISTER_MAX];
// task's IPC space
struct ipc_space *itk_space;
...
};
The set of standard task ports includes the following:
A self portalso known as the task's kernel portrepresents the task itself. The kernel holds receive
rights to this port. The self port is used by the task to invoke operations on itself. Other programs
(such as debuggers) wishing to perform operations on a task also use this port.
A set of exception ports includes one port for each type of exception supported by the kernel. The
kernel sends a message to the task's appropriate exception port when an exception occurs in one of
the task's threads. Note that exception ports also exist at the thread level (more specific than a task-
level exception port) and the host level (less specific). As we will see in Section 9.7.2.1, the kernel