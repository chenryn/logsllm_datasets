# Unboxing Android: A Comprehensive Guide to Android Packers

## Authors
- **Slava Makkaveev**: Senior Security Researcher at Check Point, former Security Researcher at Verint. Holds a Ph.D. in Computer Science with extensive experience in mobile reverse engineering, Linux internals, and malware analysis.
- **Avi Bashan**: Founder at myDRO, former Mobile R&D Team Leader at Check Point, and security researcher at Lacoon Mobile Security. Experienced in OS internal research, mobile security, and the Linux kernel.

## Introduction
This guide delves into the world of Android packers, providing an in-depth look at the techniques used by malware authors to protect their applications from static code analysis and reverse engineering. We will also explore methods for unpacking these protected apps.

## Boxing Techniques
Malware authors employ various "boxing" techniques to prevent:

- Static Code Analysis
- Reverse Engineering

These techniques can be implemented using proprietary methods or third-party software and include:

- **Code Obfuscation**
- **Anti-Debugging**
- **Anti-Tampering**
- **Anti-Dumper**
- **Anti-Decompiler**
- **Anti-Runtime Injection**

## Maliciousness of Packed Apps
We analyzed 13,000 apps (as of July 2017) and identified the following protection techniques:

- **Obfuscators**
- **Packers**
- **Protectors**

### APK Protection Techniques
The following are common techniques used to protect an app's code:

- **Obfuscators**: Make the code difficult to understand.
- **Packers**: Encrypt and compress the DEX file.
- **Protectors**: Implement additional security measures like anti-debugging and anti-tampering.

### Packing Process
The packing process involves the following steps:

1. **Original DEX**: The original DEX file is encrypted and modified.
2. **Packer Loader**: A loader is created to decrypt and load the protected DEX.
3. **Encrypted DEX**: The encrypted DEX file is included in the APK.
4. **APK**: The final packed APK is generated.

### Execution Process
During execution, the following steps occur:

1. **Packer Loader**: The loader decrypts the DEX file.
2. **Original DEX**: The decrypted DEX file is loaded.
3. **APK**: The app runs as intended.

### Protector Process
For more advanced protection, a protector can be used:

1. **Original DEX**: The original DEX file is encrypted and modified.
2. **Protector Loader**: A loader is created to decrypt and load the protected DEX.
3. **Encrypted Modified DEX**: The encrypted and modified DEX file is included in the APK.
4. **APK**: The final protected APK is generated.

During execution, the following steps occur:

1. **Protector Loader**: The loader decrypts and modifies the DEX file.
2. **Modified DEX**: The modified DEX file is loaded.
3. **APK**: The app runs as intended.

## Back to Basics: Android Runtime (ART)
Android RunTime (ART) provides an Ahead of Time (AOT) compilation approach, converting DEX files to OAT files. This process includes:

- **Pre-compilation at install time**: Installation takes more time and requires more internal storage.
- **OAT vs JIT**: Reduces startup time, improves battery performance, and uses less RAM.

### DEX Loading Process
The DEX loading process involves:

1. **Zygote Process**: The Zygote process forks to create the app process.
2. **App Process**: The app process loads the `classes.dex` file.
3. **dex2oat**: Converts the `classes.dex` file to its OAT version.
4. **Load App Code**: The app contains at least one DEX file and can load additional DEX files during execution.
5. **Compilation**: Each DEX file is compiled into an OAT file.
6. **Execution**: The Android Runtime executes the OAT files and checks the DEX files' checksums.

### OAT File Structure
OAT files are ELF files with three special symbols in the dynamic section:

- **oatdata**: Contains the original DEX file.
- **oatexec**: Contains the compiled native instructions.
- **aotlastword**: Marks the end of the OAT file.

## Unpacking Approaches
Possible approaches to unpack an Android app include:

- **Find the Algorithm**: Identify and reverse-engineer the packing algorithm.
- **Extract DEX from Compiled OAT**: Extract the DEX file from the OAT file.
- **Dump DEX from Memory**: Dump the DEX file directly from memory.
- **Runtime Environment Modification**: Modify the runtime environment to bypass protections.

### Notable Previous Work
- **Android Hacker Protection Level 0**:
  - **Authors**: Tim Strazzere and Jon Sawyer
  - **Conference**: DEFCON 22, 2014
  - **Contribution**: Released a set of unpacking scripts.
- **The Terminator to Android Hardening Services**:
  - **Authors**: Yueqian Zhang, Xiapu Luo, Haoyang Yin
  - **Conference**: HITCON, 2015
  - **Contribution**: Released DexHunter, a modified version of the Android Dalvik/ART VM.

## Our Approach
### Goals
- **Minimal Changes to Android**: Find a solution that requires minimal changes to the Android system.
- **Broad Compatibility**: Ensure the solution works on most packers.

### Methodology
- **Reversed Popular Packers**: Analyzed and reversed the most popular packers.
- **Patched Android Runtime**: Made minimal changes to the Android Runtime to facilitate unpacking.

### Results
We successfully encountered and unpacked the following popular packers:

- Baidu
- Bangcle
- Tencent
- Ali
- 360 Jiagu
- (and a few more)

### Abstract Packer Model
The abstract packer model involves:

- **Loader DEX**: The DEX file that loads the protected DEX.
- **libart.so and libc.so**: System libraries used for loading and mapping data.
- **Open, Read, Mmap**: Functions used to open, read, and map the DEX file.

### Bangcle - Detailed Analysis
#### Classification
- **Classes**: `ApplicationWrapper`, `FirstApplication`, `MyClassLoader`, `ACall`
- **Files**: `libsecse`, `libsecmain`, `libsecexe`, `libsecpreload`, `bangcle_classes` (original DEX)

#### Java Loader Implementation
- **Assets to Cache**: Copies necessary files to the cache directory.
- **Class Loader**: Uses a custom `MyClassLoader` to load the original DEX.

#### Native Loader Implementation
- **Native Functions**: Implements various native functions for decryption and loading.
- **Function Mapping**: Maps Java interface methods to native functions.

### Conclusion
This guide provides a comprehensive overview of Android packers, their protection techniques, and methods for unpacking. By understanding these techniques, researchers and developers can better analyze and secure Android applications.