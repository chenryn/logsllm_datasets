### Improved Text

#### The Signed Root and Key Strength
The signed root can be more easily detected. Additionally, longer keys, which are likely to be stronger, can be utilized. An effective CVT (Certification Verification Tree) implementation can be based on a B\(^2\),3-tree. Experimental results on this topic can be found in [10]. Table 2 compares the average costs of different freshness schemes. As evident from the table, the costs of CVT and CRS2 are very similar.

#### Advantages of CVTs
The excellent performance, enhanced security, and simplicity of implementation convinced us to base PAMINA on CVTs. However, there are some issues with this CVT design that will be discussed in the next section.

### 4. Improved Certification Verification Tree

#### Problem with Existing CVTs
One issue with the proposed CVTs is that when a verifier requests a set of certificates, such as all certificates issued for a particular user, the directory storing the CVT cannot prove that it has delivered all of those certificates. While a verifier can check the validity of received certificates by processing the certification paths, they cannot determine whether all valid certificates have been received. In other words, a malicious directory could deny the existence of a certificate. This is particularly problematic for authorization certificates, as a user might not be able to utilize all privileges assigned by the issuing authority. Buldas et al. [11] demonstrated that it is impossible to generate an undeniable non-existence proof using the proposed CVTs. The issuing authority could construct an incorrectly sorted tree, providing one verifier with a certificate and another with a contradictory "proof" of non-existence. Therefore, the structure of a CVT should be improved to provide an undeniable proof of non-existence if the directory does not deliver a requested certificate.

#### Introduction of I-CVTs
To address these issues, we introduce Improved Certification Verification Trees (I-CVTs) that are both efficient and more trustworthy. The underlying data structure of an I-CVT is a variant of a balanced search tree, specifically a B\(^+\)-tree. A B\(^+\)-tree differs from a B-tree in that all data is stored in the leaves (see Fig. 1). A B\(^+\)-tree of order \(m\) satisfies the following properties [12]:
- Every internal node has at least \(\lceil m/2 \rceil\) and at most \(m\) children.
- The root node has at least 2 children.
- A non-leaf node with \(k\) children contains \(k-1\) keys.
- Leaves contain at least \(\lceil m/2 \rceil - 1\) and at most \(m-1\) keys, along with pointers to data records (e.g., certificate statements).
- The leaves are linked, optimizing sequential access to the data records.

To store certificates in a B\(^+\)-tree, an order must be defined, such as a unique serial number or a certificate hash value. B\(^+\)-trees offer several advantages for certificate management:
- Each path from a certificate to the root has the same length, ensuring consistent certification path sizes and similar communication and computational costs.
- Insertion, deletion, and searching operations are highly efficient, with a time complexity of \(O(\log_{\lceil m/2 \rceil} n)\), where \(n\) is the number of records (certificates) in the tree [13].
- B\(^+\)-trees can be optimized for search, insertion, deletion, and certification path length by choosing the parameter \(m\) appropriately.
- They support easy and efficient search and sequential access to the certificates.

For certificate management, we extend the B\(^+\)-tree to a Merkle hash-tree. The signature on the root, along with a properly constructed hash-path, attests that a given certificate is stored in the tree and is therefore valid.

### Certification Path and Non-Existence Proof
In [1], the certification path is defined as "the path from the leaf containing the certificate statement to the root, along with the hash values necessary to verify that path, including the hash values for all siblings of nodes along that path." If the certification path and the signature on the root hash value are both valid, it is shown that the certificate is stored in the CVT and thus valid.

#### Example
**Figure 1: Improved CVT based on a B\(^+\)-tree (here \(m=3\))**

Since trust in the database storing and publishing the certificates should be minimized, it is crucial that the database provides a proof of non-existence if it does not deliver a requested certificate. Otherwise, the database could simply deny the existence of a certificate. Buldas et al. [11] showed that to provide an undeniable proof of non-existence, information about the order and internal structure of the tree must be added to the hash-path. This information is missing in the CVTs proposed in [1].

Therefore, we add information about the structure and order of the B\(^+\)-tree to construct I-CVTs (see Fig. 1). The values \(H[i]\) are the hash values stored in the nodes. Each hash value is computed from the search keys of the particular node and the hash values of its children. For example, the value \(H[1]\), stored in the leftmost leaf of the I-CVT in Fig. 1, is computed as follows: \(H[1] = h(13, 27, h(CS1), h(CS2))\), where \(h\) is a collision-resistant hash function.

The certification path includes the search keys stored in the nodes on the path from the leaf with the certificate to the root, as well as the sibling hash values:
- **Certification path \(cp\)**: Sequence of (sequence of keys, sequence of sibling hash values) + signature on the root of the tree
- **Example 1**: Certification path for the certificate statement with ID 27 (see Fig. 1)
  - \(cp(27) = ((13, 27; h(CS1), h(CS2)); (27,34; H[2], H[3]); (63; H[7])) + \text{signature on } H[8]\)

The proof of non-existence of a certificate is simply the certification path for the leaf that would contain the certificate if it were in the I-CVT.
- **Example 2**: Non-existence proof for the certificate statement with ID 42 (see Fig. 1)
  - \(cp(42) = ((41,63; h(CS4), h(CS5)); (27,34; H[1], H[2]); (63; H[7])) + \text{signature on } H[8]\)

Note that the latter certification path can also be used as a certification path for the certificates with IDs 41 and 63. The hash values of the nodes on the path to the root and their positions within their siblings can be omitted, as the hash value of a node is determined by the hash values of its children, and its position within its siblings is determined by the search keys of its parent node.

**Figure 2: Algorithm for creating a certification path**

This certification path is an undeniable attester as defined in [11], solving the problems of CVTs described above. It can also be shown that we achieve the minimal certification path length for a B\(^+\)-tree with \(m=3\) (i.e., a B\(^+_{2,3}\)-tree), but we expect faster search, insertion, and deletion times for larger \(m\), leaving room for optimization in specific implementations.

### Flexibility and User Certificates
To make the system flexible and suitable for different scenarios, we enable an authority to issue more than one certificate for a particular user and store them in its I-CVT. A verifier should be able to check that they receive all certificates issued for a user to ensure that access is not denied if the user has the required privileges. Therefore, the certificates in the I-CVT are sorted by the pair (user-ID, serial number), which is unique since the serial number must be unique in an I-CVT. The user-ID is the more significant part, and the serial number is the less significant part. All certificates are sorted by user-ID, and all certificates for a specific user are sorted by their serial numbers. This ensures that all certificate statements for a particular user are adjacent and form a closed sequence. Verifiers get the certification paths for each certificate in this sequence and additionally for the certificates directly before and after it, ensuring they receive all certificates issued for a particular user.

### 5. Architecture of PAMINA

#### Design Decisions
Based on our requirements and the analysis of different competing approaches, we decided to design PAMINA to support the pull model and use separate certificates for privilege management. The cost analysis shows that CVTs guarantee excellent performance and enhanced security. To reduce the trust placed on the database storing CVTs and to make the scheme more efficient, we developed I-CVTs. We believe that I-CVTs are an enabling technology for open directories storing certificates issued by one authority. PAMINA is designed for environments requiring delegation of privileges and confidential management of ACs (Access Certificates). Enabling privilege delegation implies the coexistence of many I-CVTs, which should be accessible for applications. Therefore, we developed a central database to store all I-CVTs of the system, supporting simpler scenarios as well.

#### Components of PAMINA
**Figure 3: Subjects and components of the system, including the most important data flows.**

- **Resource**: PAMINA maintains authorization information for controlling access to different objects, the resources. Each resource is owned by one or more PMAs (Privilege Management Authorities), and each PMA can own one or more resources. For example, PMA2 owns resources RB and RC (see Fig. 3).
- **User**: From PAMINA's perspective, users are holders of one or more ACs. Users cannot issue ACs. We assume each user has a unique identifier (name, public key) associated with the privileges stored in their ACs.
- **Client**: A client is an application representing a remote user. Since access control decisions require the requesting user's identity, the client system must include identification information of the authenticated user in its request messages.
- **PMA (Privilege Management Authority)**: PMAs are issuers of ACs, representing organizational units such as companies or divisions. Each PMA owns and/or controls one or more resources. PMAs are autonomous and can manage privileges according to their own policies. PMAs can delegate privileges to other PMAs in a controlled manner. For example, PMA2, which owns resource RC, has delegated some of its privileges to PMA3. PMA3 does not own any resources but can authorize its users to access RC. Each PMA maintains exactly one signed I-CVT, storing all certificates issued by that PMA. We assume the public (signing) key of the PMA is managed by an external PKI (Public Key Infrastructure).
- **P-DB (Privilege Database)**: The P-DB is a central, non-trusted database storing the I-CVTs of registered PMAs. Non-trusted means that a verifier obtaining ACs can always be sure that the P-DB cannot manipulate the ACs or disclaim the existence of a given AC. These properties are guaranteed by the digitally signed I-CVTs. PMAs must periodically send updated I-CVTs to the P-DB according to their own update policy. The P-DB does not control the validity or freshness of the I-CVTs; it only stores them. ACs can be downloaded by verifiers, which are owned by registered PMAs. To avoid performance and availability issues, the P-DB can be replicated.
- **Verifier**: In PAMINA, a verifier is owned by at least one PMA and controls access to resources owned by their owner PMAs. For example, VPMA2 is owned by PMA2 (see Fig. 3). PMAs state this ownership with policy certificates. Verifiers make access control decisions based on the ACs downloaded from the P-DB. A verifier is a program running directly on the targeted system or an external service used by server-side applications. In Fig. 3, client C, authorized by PMA3, wants to use resource RC, controlled by verifier VPMA2.

**Figure 3: System components and data flows.**

- **RA (Resource A)**
- **RB (Resource B)**
- **RC (Resource C)**
- **owns**: Relationship indicating ownership of resources by PMAs.

This structured and detailed approach ensures that PAMINA is robust, secure, and adaptable to various privilege management scenarios.