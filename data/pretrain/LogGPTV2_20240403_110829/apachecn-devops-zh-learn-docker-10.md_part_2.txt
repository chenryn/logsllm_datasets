# 创建本地单节点群
所以，别再幻想了，让我们演示一下如何创造一个群体。最简单的形式是，一个功能齐全的 Docker Swarm 只包含一个节点。如果你正在使用 Docker for Mac 或 Windows，或者即使你正在使用 Docker 工具箱，那么你的个人电脑或笔记本电脑就是这样一个节点。因此，我们可以从这里开始，展示蜂群的一些最重要的特征。
让我们初始化一个群。在命令行上，只需输入以下命令:
```
$ docker swarm init
```
经过一段令人难以置信的短暂时间后，您应该会看到如下截图:
![](img/9749b111-4a68-4fa8-8951-8867fcde69e9.png)
Output of the docker swarm init command
我们的计算机现在是一个群体节点。它的角色是经理，它是领导者(经理中的领导者，这很有意义，因为此时只有一个经理)。虽然只花了很短的时间就完成了`docker swarm init`，但是在那段时间里指挥部做了很多事情，其中有一些是:
*   它创建了根**证书颁发机构** ( **CA** )
*   它创建了一个键值存储，用来存储整个群体的状态
现在，在前面的输出中，我们可以看到一个命令，它可以用来将其他节点加入到我们刚刚创建的群中。命令如下:
```
$ docker swarm join --token  :2377
```
这里:
*   ``是群领袖在初始化群时生成的令牌
*   ``是领导的 IP 地址
虽然我们的集群仍然很简单，因为它只有一个成员，但我们仍然可以要求 Docker CLI 列出集群的所有节点。这将类似于下面的截图:
![](img/cc05fe33-478b-4dfc-9d6e-9dfdcc8eddaa.png)
Listing the nodes of the Docker Swarm
在这个输出中，我们首先看到给节点的标识。ID 后面的星号(`*`)表示这是执行`docker node ls`的节点；基本上，说这是活动节点。然后我们有了节点的(人类可读的)名称、状态、可用性和管理器状态。如前所述，群的第一个节点自动成为领导者，如前面的截图所示。最后，我们看看我们使用的是哪个版本的 Docker 引擎。
要获得关于节点的更多信息，我们可以使用`docker node inspect`命令，如下图所示:
![](img/4eebdb0d-2080-4bf1-be0d-f3af1d867f47.png)
Truncated output of the command docker node inspect
这个命令生成了很多信息，所以我们只呈现了输出的截断版本。例如，当需要对行为不良的群集节点进行故障排除时，此输出可能会很有用。
# 在 VirtualBox 或 Hyper-V 中创建本地集群
有时候单个节点群是不够的，但是我们没有或者不想用一个账号在云中创建群。在这种情况下，我们可以在 VirtualBox 或 Hyper-V 中创建一个本地集群。在 VirtualBox 中创建集群比在 Hyper-V 中创建集群稍微容易一点，但是如果您使用的是 Windows 10 并且运行了 Docker for Windows，那么您就不能同时使用 VirtualBox。这两个虚拟机管理程序是互斥的。
假设我们的笔记本电脑上安装了 VirtualBox 和`docker-machine`。然后，我们可以使用`docker-machine`列出所有当前已定义并可能在 VirtualBox 中运行的 Docker 主机:
```
$ docker-machine ls
NAME      ACTIVE   DRIVER       STATE      URL    SWARM   DOCKER    ERRORS
default   -        virtualbox   Stopped                   Unknown
```
在我的例子中，我定义了一个名为`default`的虚拟机，该虚拟机当前已停止。我可以通过发出`docker-machine start default`命令轻松启动虚拟机。此命令需要一段时间，并将产生以下(缩短的)输出:
```
$ docker-machine start default
Starting "default"...
(default) Check network to re-create if needed...
(default) Waiting for an IP...
Machine "default" was started.
Waiting for SSH to be available...
Detecting the provisioner...
Started machines may have new IP addresses. You may need to re-run the `docker-machine env` command.
```
现在，如果我再次列出我的虚拟机，我应该会看到下面的截图:
![](img/452bda6f-0e36-41f9-bc60-7cc6044dd8de.png)
List of all VMs running in VirtualBox
如果我们还没有名为`default`的虚拟机，我们可以使用`create`命令轻松创建一个:
```
docker-machine create --driver virtualbox default
```
这将产生以下输出:
![](img/a0ecb14c-3934-4e7f-a4dc-5e28c6cdef6b.png)
Output of docker-machine create
我们可以在前面的输出中看到`docker-machine` 如何从一个 ISO 映像创建 VM，定义 SSH 密钥和证书，并将它们复制到 VM 和本地`~/.docker/machine`目录，稍后当我们想要通过 Docker CLI 远程访问这个 VM 时，我们将在这里使用它。它还为新虚拟机提供了一个 IP 地址。
我们使用参数为`--driver virtualbox`的`docker-machine create`命令。Docker 机器还可以与其他驱动程序一起工作，如 Hyper-V、AWS、Azure、DigitalOcean 等。有关更多信息，请参见 docker-machine 的文档。默认情况下，新虚拟机会获得 1 GB 的相关内存，这足以将该虚拟机用作开发或测试群的节点。
现在，让我们为一个五节点群集创建五个虚拟机。我们可以使用一些脚本来减少手动工作:
```
$ for NODE in `seq 1 5`; do
  docker-machine create --driver virtualbox "node-${NODE}"
done
```
Docker 机器现在将创建五个名为`node-1`到`node-5`的虚拟机。这可能需要一些时间，所以这是给自己泡杯热茶的好时机。创建虚拟机后，我们可以列出它们:
![](img/f960e55b-f46c-4e62-854e-1b433d4a1f45.png)
List of all VMs we need for the swarm
现在我们准备建造一个蜂群。从技术上讲，我们可以将 SSH 引入第一个虚拟机`node-1`并初始化一个群，然后将 SSH 引入所有其他虚拟机，并将它们加入群领导。但这是没有效率的。让我们再次使用一个脚本来完成所有的艰苦工作:
```
# get IP of Swarm leader
$ export IP=$(docker-machine ip node-1)
# init the Swarm
$ docker-machine ssh node-1 docker swarm init --advertise-addr $IP
# Get the Swarm join-token
$ export JOIN_TOKEN=$(docker-machine ssh node-1 \
    docker swarm join-token worker -q)
```
现在我们有了加入令牌和群领导的 IP 地址，我们可以要求其他节点加入群，如下所示:
```
$ for NODE in `seq 2 5`; do
  NODE_NAME="node-${NODE}"
  docker-machine ssh $NODE_NAME docker swarm join \
        --token $JOIN_TOKEN $IP:2377
done
```
为了使群体高度可用，我们现在可以提升，例如，`node-2`和`node-3`成为经理:
```
$ docker-machine ssh node-1 docker node promote node-2 node-3
Node node-2 promoted to a manager in the swarm.
Node node-3 promoted to a manager in the swarm.
```
最后，我们可以列出群的所有节点:
```
$ docker-machine ssh node-1 docker node ls
```
我们应该会看到下面的截图:
![](img/835bb4f9-4ff7-4858-9d9a-db39c65c4fec.png)
List of all the nodes of the Docker Swarm on VirtualBox
这证明我们刚刚在笔记本电脑或工作站上本地创建了一个高度可用的 Docker Swarm。让我们把所有的代码片段放在一起，让整个事情变得更加健壮。脚本如下所示:
```
alias dm="docker-machine"
for NODE in `seq 1 5`; do
  NODE_NAME=node-${NODE}