the random noise present in mobile device hardware [41].
rand is an integer chosen uniformly at random from 1 to
2· x upon each dummy write, to ensure that the probability of
performing dummy write will be always under 50%.
When a dummy write is performed, m free blocks will be
allocated and the corresponding blocks should be marked as
“allocated” in the global bitmap. These blocks will be ﬁlled
with random noise, which should be indistinguishable from
the encrypted data (Sec. IV-A). m is determined as follows:
m = (cid:6)m(cid:2)(cid:7), m(cid:2) = −(ln(1 − f ))/λ.
Here, f is a random number in the range of (0, 1) and λ is
the rate parameter, making m(cid:2) follow exponential distribution.
The mean value of m(cid:2) is 1/λ, e.g., if we choose λ as 1, each
dummy write will be allocated one free block on average. The
exponential distribution is advantageous since it can ensure
that the value of m can have a large variance which is good
for deniability.
Block Allocation Strategy in Block Layer. A common block
allocation strategy in the block layer is sequential allocation,
by which when data blocks are allocated to virtual volumes,
they will be allocated sequentially from the disk (e.g., thin
provisioning [21]). A concrete example for the sequential
allocation is shown in the following:
Dv2||Dv1||Dv2||Dv2||Dv2||Dv2||Dv2||Dv2||Dv2||Dv1
Here, Dv1 means the data block allocated to the public volume
(identiﬁed by v1) and Dv2 means the data block allocated to
the hidden volume (identiﬁed by v2). From the aforementioned
block layout, an adversary can observe that seven data blocks
are allocated between Dv1. To deny the existence of the hidden
data, the user will claim that the seven data blocks have
been allocated to dummy volumes. However, since the number
of dummy writes associated with each public write will be
limited, the adversary may observe that the number of dummy
blocks being claimed by the user exceeds this limit (this is
highly possible if a large ﬁle has been written to the hidden
volume), and suspects the existence of hidden volume.
To avoid this deniability compromise, we use random al-
location in the block layer. Speciﬁcally, each write from the
upper layer (performed by the public or the hidden/dummy
volume), should be allocated with an unused block at a random
location. In this manner, the adversary will not be able to
observe such a layout that a block, which has been allocated
to the public volume, is followed by a large number of blocks
being allocated to the hidden volume.
A potential deniability compromise remaining is that the
adversary can calculate the total number of blocks for the
public volume, and estimate the maximal number of blocks
for the dummy volume. If the total number of blocks being
allocated for non-public data exceeds this maximal number,
the adversary may suspect existence of hidden data. This
would happen if the user stores a very large ﬁle in the
hidden volume and does not store enough data in the public
volume. To mitigate this issue, we recommend that the user
should store a ﬁle with approximately equal size in the public
volume after storing a large ﬁle in the hidden volume. In
practice, the sensitive data (e.g., secret documents, photos,
short audio/video ﬁles) are usually small in size.
User Steps. If the user needs data encryption without denia-
bility, he/she needs to enable device encryption with one pass-
word (e.g., through settings GUI). Note that before initializing
the device encryption, the user should backup the data on the
device since the initialization erases existing data. The system
then creates a public volume (encrypted with a key derived
from the password) and a dummy volume, and reboots when
complete. The user can enter the password during pre-boot
authentication to decrypt the device.
If the user requires the deniability feature, he/she needs
to initialize the device with a decoy password and a hidden
password. The system then creates a public volume and a
hidden volume, encrypted with keys derived from the decoy
password and the hidden password, respectively. For daily
use,
the user enters the decoy password during pre-boot
authentication to activate the public volume. Note that we
assume the user enables the screen lock when they are using
the public volume, and the screen lock password is different
from the hidden password. When the user wants to activate
the hidden volume, he/she enters the hidden password in the
screen lock (Sec. IV-D). The system closes the public volume,
decrypts the hidden volume and enables the hidden volume.
459
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply. 
sŝƌƚƵĂůsŽůƵŵĞϭ
sŝƌƚƵĂůsŽůƵŵĞϮ
͘
͘
͘
sŝƌƚƵĂůsŽůƵŵĞŬ
͘
͘
͘
sŝƌƚƵĂůsŽůƵŵĞŶ
^ƚŽƌĂŐĞ
&ŝůĞƐǇƐƚĞŵ
ŶĐƌǇƉƚĞĚůŽĐŬĞǀŝĐĞ
sŝƌƚƵĂůsŽůƵŵĞϭ
WƵďůŝĐsŽůƵŵĞ
&ŝůĞƐǇƐƚĞŵ
ŶĐƌǇƉƚĞĚůŽĐŬĞǀŝĐĞ
sŝƌƚƵĂůsŽůƵŵĞŬ
,ŝĚĚĞŶsŽůƵŵĞ
Fig. 2. System architecture of the extended MobiCeal scheme.
The user then can collect and store sensitive data. After that,
the user should immediately reboot to use the public volume
(Sec. IV-D). When the user is coerced by the adversary, he/she
can supply the decoy password and claim that the other volume
is a dummy volume. The adversary can examine the device but
cannot distinguish a hidden volume from a dummy volume.
If the user does not reveal the hidden password, the adversary
will ﬁnd no evidence of the hidden data.
C. An Extended MobiCeal Scheme Supporting Multi-level
Deniability
To support multi-level deniability,
the system creates n
virtual volumes (by utilizing thin provisioning as introduced in
Sec. II-C) initially, among which, there are n(cid:2) hidden volumes
(n(cid:2) < n). Note that n(cid:2) should be kept secret. After n virtual
volumes (labeled as V1, V2, ..., Vn) are created, MobiCeal
simply uses the ﬁrst virtual volume V1 as the public volume.
The user can provide different hidden passwords to protect
different hidden volumes and the number of hidden volumes
is controlled by the number of hidden passwords.
For example, if virtual volume Vk (2 ≤ k ≤ n) is used as the
hidden volume, k can be derived using the hidden password:
k = (H(pwd||salt) mod (n − 1)) + 2.
Here, H is a PBKDF2 [14] iterated hash function, n is the total
number of virtual volumes, pwd is the hidden password and
salt is a random salt value for PBKDF2. The salt value will
be stored in the encryption footer. If different hidden volumes
result in the same k, another random salt will be chosen. All
the remaining virtual volumes are dummy volumes. Figure 2
shows the system architecture of MobiCeal.
When generating dummy writes, the system will assign
them to a random virtual volume. The dummy write is assigned
to Vj and j is generated as follows:
j = (stored rand mod (n − 1)) + 2.
Storage Layout. The entire disk is divided into 3 parts, con-
taining the metadata, data and encryption footer, respectively.
The storage layout is shown in Figure 3. Speciﬁcally, the
metadata part stores the information of virtual volumes, e.g,
the global bitmap, the sizes and mappings of virtual volumes.
The data part stores the data blocks for the virtual volumes
460
while the encryption footer is a default part of Android. Note
that in Android, the encrypted decoy key and the salt are stored
in the encryption footer which is located in the last 16KB of
the userdata partition.
D. Additional Design Considerations
Defending against Side Channel Attack. Existing PDE
systems that defend against multi-snapshot adversaries like
HIVE [15] and DEFY [33] suffer from the side channel
attack [23]. Due to the shared OS, the information of the
hidden ﬁles may be recorded in the public volume [23], leading
to compromise of the deniability. However, our design can
defend against this side channel attack, since we isolate the
hidden volume from the public volume. Although the hidden
password is entered in the public mode, the Android screen
lock does not record the entered password and we assume the
mobile OS, the boot-loader, as well as the ﬁrmware and the
baseband OS are all malware-free (Sec. III). As a result, the
security of the hidden password is ensured.
We consider four possible leakage paths for the side channel
attack: 1) the public volume, 2) logs at /devlog, 3) /cache and
4) RAM. The information of the hidden volume or hidden ﬁles
may be recorded in the public volume, /devlog, or /cache,
if the hidden volume is in the system together with others.
To prevent the leakage, after the hidden password is veri-
ﬁed, the system unmounts these three partitions immediately,
and mounts two tmpfs RAM disks to /devlog and /cache,
respectively. Then the system decrypts the hidden volume and
mounts it as the userdata partition. In this way, the information
leakage is prevented.
Additionally, if the RAM is not cleared after the hidden
mode is off, the deniability may be compromised. To prevent
this threat, we only support fast switching from the public
mode to the hidden mode. When the user wants to switch from
the hidden mode to the public mode, he/she has to reboot the
phone. In this way, the information of the hidden volume or
hidden ﬁles in the RAM will be cleared. Note that the one-
way fast switching is reasonable, since the mobile device is
assumed to be usually in the public mode. When the user
wants to switch to the hidden mode, he/she needs to enter the
hidden password and the system will begin switching.
Switching without Rebooting. The existing PDE systems for
mobile devices [21], [34], [43] all require rebooting to switch
modes. However, if time is limited which does not allow a slow
mode switching, the user may miss a best moment to capture
sensitive information (e.g., an opportunistic sensitive photo).
We propose a fast switching mechanism without rebooting the
entire device. Our main concern is how to switch fast from
the public mode to the hidden mode, without compromising
deniability. We ﬁnd it unnecessary to reboot the entire device.
Instead, we can simply restart the Android framework. In
this way, the switching time can be signiﬁcantly reduced. We
choose the default screen lock app of Android as the entrance
of the hidden mode, because it is widely used and allows the
user to enter the password conveniently.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply. 
WƵďůŝĐsŽůƵŵĞ
ƵŵŵǇsŽůƵŵĞ
Ǉ
,ŝĚĚĞŶsŽůƵŵĞ
ƵŵŵǇsŽůƵŵĞ
Ǉ
͘͘͘
͘͘͘
DĞƚĂĚĂƚĂ
ĂƚĂ
ŶĐƌǇƉƚŝŽŶ&ŽŽƚĞƌ
Fig. 3. Storage layout of the extended MobiCeal scheme.
The screen lock app runs as usual if the user does not enter
the hidden password. When the user wants to switch to the
hidden mode, he/she needs to enter the hidden password. After
that, the system will unmount the public volume, decrypt and
mount the hidden volume, switching to the hidden mode. Note
that it is necessary to unmount the public volume. Otherwise,
the traces of the hidden volume and hidden ﬁles may be
leaked to the public volume which may lead to compromise of
deniability. Since the public volume is mounted to “/data” and
Android framework requires “/data” to run [7], we unmount
the public volume by shutting down the Android framework.
Key Derivation. Different keys can be derived using PBKDF2
with different passwords, and different master keys can be
derived by decrypting the same random data stored in the
encryption footer using these different keys. Further, each
virtual volume can be encrypted using a different master key
via dm-crypt (Sec. II-A).
Reclaiming Space Occupied by Dummy Writes. The data
created by dummy writes will accumulate and may ﬁll the
entire disk space over time. This issue can be mitigated by
periodically performing garbage collection, reclaiming part of
the space occupied by dummy writes. Note that the garbage
collection cannot reclaim all the space occupied by dummy
data. Otherwise, the adversary can easily identify where the
hidden data are by comparing snapshots. This is because the
space occupied by the hidden data remains unchanged. As
a result, when performing garbage collection, the system re-
claims a random percentage of the space occupied by dummy
writes. To make the garbage collection more efﬁcient, the
percentage should be large with a high probability. A side
effect of this approach is, when performing garbage collection,
the system may not be able to distinguish dummy data and the
hidden data. This issue can be solved by performing garbage
collection in the hidden mode4.
V. MOBICEAL IMPLEMENTATION
We implement a prototype of MobiCeal on an LG Nexus 4
phone using the 4.2.2 (Jelly Bean) Android source code and
the 3.4 Linux kernel. Note that we only implement/evaluate
the extended MobiCeal scheme supporting multiple levels of
deniability, since the basic MobiCeal scheme is a special case
4There is no need to frequently perform garbage collection as long as the
user does not frequently store large amount of public and hidden data. In
addition, the user can choose to perform garbage collection when the mobile
device is idle, e.g., during night time, to avoid disturbing regular use.
of MobiCeal with multi-level deniability support. To allow
creating multiple virtual volumes, we rely on thin provisioning
(Sec. II-C), but modify it for PDE considerations. We also
test MobiCeal on a Huawei Nexus 6P with Android 7.1.2
and Linux kernel 3.10. The transplant can be done with
a little work on SEAndroid [36]. The source code of the
implementation has been released5. There are three parts of
implementation, including changes to 1) the Linux kernel, 2)
Android volume daemon, and 3) Android screen lock. The
implementation requires approximately one thousand lines of
C and Java code. We also compile LVM and thin provisioning
tools for Android and put them in the boot image.
A. Changes to the Linux Kernel
Tweaking Thin Provisioning. To implement
the random
allocation and the dummy write, we modify the thin pro-
visioning target in the device mapper. We add the dummy
write mechanism to thin provisioning and change the original
sequential allocation strategy of thin provisioning to random
allocation. The reasons why we choose thin provisioning are
as follows: First, when the thin volumes are initialized, they
do not really occupy disk space until the actual data are
written to the thin volumes. This makes it cost effective to
hide a thin volume that contains sensitive data among dummy
thin volumes. Second, thin provisioning does not allocate data
blocks for a thin volume until the data are written to it. This
feature helps us to realize a dummy write mechanism to hide
sensitive data written to a thin volume. Third, thin provisioning
has an inborn ability to prevent overlap among thin volumes
by using a free space bitmap to track allocated blocks. Fourth,
it is feasible to create an encrypted block device on a thin
volume and an arbitrary ﬁle system can be deployed.
Dummy Write Implementation. To implement the dummy
write, we use jifﬁes as the random seed to determine the
probability of the dummy write, which is a global variable
in the Linux kernel. Jifﬁes holds the number of ticks that have
occurred since the system booted. We store this variable in
the thin pool structure. It is updated when data are written
to the thin volume and the time interval is longer than one