# Title: AFL-based Fuzzing for Java with Kelinci

## Authors:
- Rody Kersten
- Kasper Søe Luckow
- Corina S. Păsăreanu

### Affiliations:
- Carnegie Mellon University, Silicon Valley, Moffett Field, California
- NASA Ames Research Center, Moffett Field, California

**Principal Investigator (PI) Email: [EMAIL]**

---

## Abstract

Grey-box fuzzing is a random testing technique that has proven effective in identifying security vulnerabilities in software. This method leverages program instrumentation to gather information about the program, aiming to increase code coverage during fuzzing, thereby making grey-box fuzzers highly efficient at detecting vulnerabilities. One such tool is AFL, a grey-box fuzzer for C programs that has successfully identified numerous security vulnerabilities and critical defects in various software products.

We introduce Kelinci, a tool that interfaces AFL with instrumented Java programs. Kelinci does not require modifications to AFL and is easily parallelizable. By applying AFL-type fuzzing to Java programs, Kelinci opens up the possibility of testing Java-based applications using this powerful technique. We demonstrate the effectiveness of Kelinci by applying it to the image processing library Apache Commons Imaging, where it identified a bug within one hour.

---

## CCS Concepts
- **Software and its engineering**: Software testing and debugging; Dynamic analysis
- **Security and privacy**: Software and application security

## Keywords
- AFL, Fuzzing, Random Testing, Java

## ACM Reference Format
Rody Kersten, Kasper Luckow, and Corina S. Păsăreanu. 2017. POSTER: AFL-based Fuzzing for Java with Kelinci. In Proceedings of CCS '17, Dallas, TX, USA, October 30–November 3, 2017, 3 pages. https://doi.org/10.1145/3133956.3138820

---

## 1. Introduction

Fuzz testing is an automated testing technique used to discover security vulnerabilities and other bugs in software. In its simplest form, black-box fuzzing, a program is run on randomly generated or mutated inputs to identify cases where the program crashes or hangs. More advanced, white-box fuzzing techniques leverage program analysis to systematically increase code coverage during fuzzing. Grey-box fuzzers use program instrumentation to gather information about the program paths exercised by the inputs, thereby increasing coverage.

Popular tools for Java include EvoSuite and Randoop. However, there is no support for Java programs in AFL, a widely used grey-box fuzzer for C programs. The only known effort to apply AFL to Java uses the GNU Compiler for Java (GCJ), which is no longer maintained. In this paper, we present Kelinci, which addresses this gap. We demonstrate the effectiveness of Kelinci by applying it to the image processing library Apache Commons Imaging, where it found a bug within one hour.

### 1.1. AFL

American Fuzzy Lop (AFL) is a security-oriented grey-box fuzzer that employs compile-time instrumentation and genetic algorithms to automatically discover test cases that trigger new internal states in C programs, improving functional coverage. AFL has been instrumental in finding notable vulnerabilities in many applications, including the Stagefright vulnerabilities in Android, Shellshock-related vulnerabilities (CVE-2014-6277 and CVE-2014-6278), and Denial-of-Service vulnerabilities in BIND (CVE-2015-5722 and CVE-2015-5477). It supports programs written in C, C++, or Objective-C, compiled with GCC or Clang. On Linux, the optional QEMU mode allows fuzzing of black-box binaries. There are variants and derivatives of AFL for Python, Go, Rust, OCaml, etc., but none for Java.

---

## 2. Kelinci

Inspired by the success of AFL, we developed Kelinci to apply AFL-style fuzzing to Java-based applications. Kelinci provides an interface to execute AFL on Java programs by adding AFL-style instrumentation to Java programs and communicating results back to a simple C program that interfaces with the AFL fuzzer.

### 2.1. Design Overview

The overall design of Kelinci is depicted in Figure 1. The first step is to add AFL-style instrumentation to a Java program. AFL uses a 64 kB region of shared memory for communication with the target application. Each basic block is instrumented with code that increments a location in the shared memory bitmap corresponding to the branch made into this basic block.

#### Instrumentation Example

```java
Mem.mem[id ^ Mem.prev_location]++;
Mem.prev_location = id >> 1;
```

In this example, the `Mem` class represents the shared memory and holds the (shifted) id of the last program location. The id of a basic block is a compile-time random integer, where \(0 \leq \text{id} < 65536\). Each jump from a block `id1` to a block `id2` is represented by a location in the bitmap `id1 ⊕ id2`. While there may be multiple jumps mapping to the same bitmap location, such loss of precision is considered rare enough to be an acceptable trade-off for efficiency.

Instrumentation is added to the program using the ASM bytecode manipulation framework. Basic blocks are instrumented as described, and the `Mem` class and a TCP server component are added to handle communication with the C side and execution of the target application on incoming files.

### 2.2. Communication with AFL

AFL expects two pieces of information from an instrumented application:
1. The application should run a fork server that responds to requests from the fuzzer to fork the process and run the forked process on the provided input file.
2. The application should connect to the shared memory and write to locations corresponding to branches in the program.

The `interface.c` component implements a fork server identical to the one in programs instrumented by an AFL compiler. When a request to fork comes in, it creates a fork of itself that sends the provided file to the Java side, receives the result (shared memory plus error status), writes the results to shared memory, and crashes if the Java program resulted in an exception escaping the main method.

---

**Note:** This material is based on research sponsored by DARPA under agreement number FA8750-15-2-0087. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA or the U.S. Government.

**CCS '17, October 30–November 3, 2017, Dallas, TX, USA**
This is the author’s version of the work. It is posted here for your personal use. Not for redistribution. The definitive Version of Record was published in Proceedings of CCS '17, October 30–November 3, 2017, https://doi.org/10.1145/3133956.3138820.