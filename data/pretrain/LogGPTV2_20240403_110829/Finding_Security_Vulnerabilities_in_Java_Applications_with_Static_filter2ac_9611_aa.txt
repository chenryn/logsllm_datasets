# Title: Detecting Security Vulnerabilities in Java Applications with Static Analysis

## Authors: V. Benjamin Livshits and Monica S. Lam

### Abstract
This paper introduces a static analysis technique for identifying various recently discovered application vulnerabilities, including SQL injections, cross-site scripting, and HTTP splitting attacks. These vulnerabilities often arise from unchecked input, which is widely recognized as the primary source of security issues in web applications. Our approach leverages a scalable and precise points-to analysis to automatically translate user-provided vulnerability specifications into static analyzers. The system identifies all vulnerabilities that match the given specifications within the statically analyzed code. The results are presented to the user through an integrated auditing interface within Eclipse, a popular Java development environment.

Our static analysis detected 29 security vulnerabilities across nine large, popular open-source applications, with two vulnerabilities found in widely-used Java libraries. In fact, all but one application in our benchmark suite had at least one vulnerability. Context sensitivity, combined with improved object naming, significantly reduced the number of false positives. In our experiments, only one benchmark produced false alarms.

### 1. Introduction
The security of web applications has become increasingly critical over the past decade. Many web-based enterprise applications handle sensitive financial and medical data, and a breach can result in substantial financial losses. Protecting these applications from hacker attacks is crucial. However, the current state of application security is inadequate. The 2002 Computer Crime and Security Survey by the Computer Security Institute and the FBI revealed that over half of all databases experience at least one security breach annually, with each incident costing around $4 million [10].

A recent study by the Imperva Application Defense Center, which included more than 250 web applications from e-commerce, online banking, enterprise collaboration, and supply chain management sites, concluded that at least 92% of web applications are vulnerable to some form of hacker attack [54]. Compliance with security regulations, such as the Sarbanes-Oxley Act, further underscores the importance of application security [4, 19].

While much attention has been given to network-level attacks like port scanning, approximately 75% of attacks against web servers target web-based applications, according to a recent survey [24]. Traditional defenses like firewalls do not protect against these attacks, as they rely on HTTP traffic, which typically passes through firewalls unimpeded. Thus, attackers have direct access to web applications.

Previous projects have focused on vulnerabilities in C, such as buffer overruns and format string vulnerabilities [12, 45, 51]. However, Java has become the preferred language for building complex web-based systems due to its safety features, which prevent direct memory access and eliminate issues like buffer overruns. Platforms like J2EE (Java 2 Enterprise Edition) have further promoted Java's adoption for e-commerce applications.

Despite Java's safety, logical programming errors can still lead to vulnerabilities such as SQL injections and cross-site scripting attacks. A simple mistake can leave a web application vulnerable to unauthorized data access, updates, or deletions, and even denial-of-service attacks.

### 1.1 Causes of Vulnerabilities
Unchecked input is the most common cause of vulnerabilities in web applications [41]. To exploit unchecked input, an attacker must achieve two goals:

1. **Inject Malicious Data**:
   - **Form Field Manipulation**: Enter malicious values in HTML form fields.
   - **Parameter Tampering**: Pass specially crafted parameters in the URL.
   - **Hidden Field Manipulation**: Modify hidden fields in HTML forms.
   - **HTTP Header Tampering**: Manipulate parts of HTTP requests.
   - **Cookie Poisoning**: Place malicious data in cookies.

2. **Manipulate Applications Using Malicious Data**:
   - **SQL Injection**: Pass input containing SQL commands.
   - **Cross-Site Scripting**: Exploit applications that output unchecked input verbatim.
   - **HTTP Response Splitting**: Exploit applications that output input verbatim.
   - **Path Traversal**: Use unchecked user input to control file access on the server.
   - **Command Injection**: Execute shell commands using user input.

These vulnerabilities are widespread. A recent empirical study found that parameter tampering, SQL injection, and cross-site scripting account for more than a third of all reported web application vulnerabilities [49]. All these attacks are made possible by user input that has not been properly validated. This set of problems is similar to those handled dynamically by Perl's taint mode [52], though our approach is more extensible. We refer to this class of vulnerabilities as the tainted object propagation problem.

### 1.2 Code Auditing for Security
Many of the attacks described above can be detected through code auditing. Code reviews help identify potential vulnerabilities before an application is run. Most web application development methodologies recommend a security assessment or review phase after testing and before deployment [40, 41].

However, code reviews are time-consuming, costly, and require security expertise that many developers lack. Security audits are often performed by external consultants, adding to the cost. Additionally, new security errors can be introduced while fixing old ones, necessitating double-audits. There is a need for better tools to help developers avoid introducing vulnerabilities during the development cycle.

### 1.3 Static Analysis
This paper proposes a tool based on static analysis for detecting vulnerabilities caused by unchecked input. Users can describe vulnerability patterns succinctly in PQL [35], a program query language with a Java-like syntax. Our tool applies user-specified queries to Java bytecode and finds all potential matches statically. The results are integrated into Eclipse, making potential vulnerabilities easy to examine and fix during development.

Static analysis can find all potential security violations without executing the application. Bytecode-level analysis eliminates the need for source code, which is especially important since many Java applications use libraries without available source code. Our approach can also be applied to other bytecodes, such as MSIL, enabling the analysis of C# code [37].

Our tool stands out by using a precise context-sensitive pointer analysis, which scales to large applications [55]. This combination of scalability and precision ensures that all vulnerabilities matching a specification are found within the analyzed code. Previous practical tools are often unsound [6, 20], leading to missed vulnerabilities.

### 1.4 Contributions
- **Unified Analysis Framework**: We unify multiple categories of security vulnerabilities in web applications and propose an extensible tool for detecting them using a sound and practical static analysis for Java.
- **Powerful Static Analysis**: Our tool is the first practical static security analysis that utilizes fully context-sensitive pointer analysis results. We improve the state of the art in pointer analysis by enhancing the object-naming scheme, reducing false positives.
- **Simple User Interface**: Users can specify vulnerabilities using PQL. Our system provides a GUI auditing interface within Eclipse, allowing quick security audits during development.
- **Experimental Validation**: We evaluated our system on a set of large, widely-used open-source Java applications, finding 29 security errors, including two in widely-used libraries. Eight out of nine benchmark applications had at least one vulnerability, with only 12 false positives.

### 1.5 Paper Organization
- **Section 2**: Overview of application-level security vulnerabilities.
- **Section 3**: Description of our static analysis approach.
- **Section 4**: Improvements to increase analysis precision and coverage.
- **Section 5**: Description of the auditing environment.
- **Section 6**: Summary of experimental findings.
- **Section 7**: Related work.
- **Section 8**: Conclusion.

### 2. Overview of Vulnerabilities
In this section, we focus on security vulnerabilities in web applications caused by unchecked input. According to the Open Web Application Security Project [41], unvalidated input is the number one security problem in web applications. Many such vulnerabilities have been reported on specialized tracking sites like SecurityFocus and have been widely publicized [39, 41]. Recent reports include SQL injections in Oracle products [31] and cross-site scripting vulnerabilities in Mozilla Firefox [30].

#### 2.1 SQL Injection Example
SQL injections are a well-known type of security vulnerability in web applications. They occur when unchecked user input is passed to a back-end database for execution [1, 2, 14, 29, 32, 47]. An attacker can embed SQL commands in the data sent to the application, leading to unintended actions on the database. Exploited SQL injections can cause unauthorized data access, updates, deletions, and even shell command execution.

**Example 1:**
```java
HttpServletRequest request = ...;
String userName = request.getParameter("name");
Connection con = ...;
String query = "SELECT * FROM Users WHERE name = '" + userName + "'";
con.execute(query);
```
This code snippet retrieves a user name and uses it to construct a SQL query. If an attacker controls the `userName` string, they can set it to `' OR 1 = 1;--`, effectively bypassing the `WHERE` clause and gaining access to all user records in the database.

SQL injection is just one example of a tainted object propagation problem. If a tainted object (or any derived object) is passed to a sink (e.g., `con.execute`), a vulnerability exists. The attack typically involves two steps: injecting malicious data and using it to manipulate the application.

#### 2.2 Injecting Malicious Data
Protecting web applications from unchecked input vulnerabilities is challenging because applications can obtain information from users in various ways. Common sources of user-controlled data include form parameters, HTTP headers, and cookie values. Client-side filtering is not effective, as attackers can easily circumvent restrictions. Therefore, inputs must be filtered by the web application on the server.

##### 2.2.1 Parameter Tampering
HTML forms are a common way for web applications to accept parameters. When a form is submitted, parameters are sent as part of an HTTP request. Attackers can easily tamper with these parameters by entering malicious values into form fields.

##### 2.2.2 URL Tampering
For HTML forms submitted using the HTTP GET method, form parameters and their values appear in the URL. Attackers can edit the URL to inject malicious data.

**Example 2:**
Consider a bank site that allows an authenticated user to select an account and debit $100. The URL might look like:
```
http://www.mybank.com/myaccount?accountnumber=341948&debit_amount=100
```
If no precautions are taken, accessing:
```
http://www.mybank.com/myaccount?accountnumber=341948&debit_amount=-5000
```
could increase the account balance.

##### 2.2.3 Hidden Field Manipulation
Web applications often use hidden fields to emulate persistence. While hidden fields cannot be modified directly in an HTML form, saving the page, editing the hidden field, and reloading the page can update the value.

##### 2.2.4 HTTP Header Manipulation
HTTP headers are typically invisible to users but can be processed by web applications. Attackers can inject malicious data into these headers using freely available tools. For example, the `Referer` field can be forged to mount cross-site scripting or HTTP response splitting attacks.

##### 2.2.5 Cookie Poisoning
Cookies store information such as user login/password pairs and identifiers. Modifying a cookie can pass malicious input into the application. Because cookies are supposed to be invisible to the user, cookie poisoning is often more dangerous than other forms of manipulation.

##### 2.2.6 Non-Web Input Sources
Malicious data can also be passed as command-line parameters. While this is less common, command-line utilities used for critical tasks like database initialization or data migration can still be vulnerable.

#### 2.3 Exploiting Unchecked Input
Once malicious data is injected, an attacker can use various techniques to exploit it:

##### 2.3.1 SQL Injections
SQL injections, as described in Section 2.1, can be avoided by using better APIs. J2EE provides the `PreparedStatement` class, which allows specifying a SQL statement template with placeholders for parameters. Prepared statements are precompiled, and expanded parameters never become part of executable SQL. However, improper use of prepared statements can still lead to vulnerabilities.