be used to prove the script’s authenticity to the widget (see Fig. 1).
Upon initialization, the protection script retrieves the widget’s iFrame element
from the DOM and conducts the visibility veriﬁcation process. After successful
completion of visibility (see Sec. 4) and DOM integrity (see Sec. 6) checks, the
script sends a postMessage to the widget with the signal, that it is safe to
enable user interaction. Included in this message is the shared secret, to proof
the messages authenticity. This approach is secure, as the PostMessage-API
guarantees that only scripts running in the widget’s origin can read the message
and the shared secret is kept in a closure with no connection to the global object.
From this point on, the protection script re-executes the visibility and in-
tegrity checking process at randomized times, to detect if the widget’s visibility
or position have been actively tampered with after the initial positive validation.
Finally, a concluding PostMessage handshake is conducted when the widget
receives actual user interaction, e.g., through clicking: Before acting on the click,
the widget queries the protection script, to ensure that the visibility and integrity
properties have not been violated in the meantime. As the widget’s position
guard (see Sec. 4.4) must have been triggered right before the interaction with the
widget occurred, this information is fresh and reliable. In case the guard has not
276
M. Johns and S. Lekies
been triggered, this is a clear indication that the widget has been moved since the
last periodic check, which in turn is a clear sign of potentially malicious actions.
Only in case that the guard has been triggered and the visibility conditions are
intact, the protection script answers the widget’s enquiry. In turn, the widget
only directly acts on the click, if this answer was received.
6 Validating DOM Integrity
6.1 Redeﬁnition of Existing Properties and APIs
JavaScript is a highly dynamic language, which allows the redeﬁnition of al-
ready existing elements and methods. This can be done in two fashions: For one
an element can be redeﬁned through direct assignment. Alternatively, Object.
defineProperty can be utilized to change properties of existing objects. The
latter method cannot only redeﬁne the behavior of methods, but also of object
properties, through the deﬁnition of the internal [[Get]], [[Set]], and [[Value]]
properties. In addition, setting its internal property [[Conﬁgurable]] to false
prevents deletion and further changes.
6.2 Resulting Potential DOM Integrity Attacks
Redeﬁnition of existing methods and properties is not restricted to objects that
have been created through script code. Also the Web browser’s native APIs and
objects can be changed this way. It is possible to overwrite global APIs, such
as alert(), with custom functions. It has been shown in the past, how this
technique can be used to detect [2] and mitigate [8, 17, 24] XSS attacks.
However, in our case, the adversary could potentially use this technique to ob-
fuscate LikeJacking attempts. As discussed in Sections 4 and 5 our system relies
on several native DOM APIs, such as window.getComputedStyle() and prop-
erties of DOM elements, such as parent or offsetWidth. Through redeﬁning
these DOM properties to return false information, the attacker can eﬀectively
undermine the visibility check’s correctness.
Challenge: Validating DOM Integrity. To ensure the correctness of the visi-
bility checking algorithm, we have to conduct two steps: For one, we need to
compile a complete list of all native APIs and DOM properties which are used
by the process, including the applicable checking scope (see Table 2). Secondly,
for each element of this list, a reliable methodology has to be determined, which
validates that the method or property has not been redeﬁned by the adversary.
6.3 Built-In Objects and the Semantics of the delete Operator
To handle potential DOM tampering attacks, JavaScript’s delete operator plays
a central role. In [17] Magazinius et al. noted, that redeﬁned DOM APIs revert
back to their original state if they are deleted. The reason for this lies in the
method how native DOM elements and APIs are exposed to the JavaScript:
Tamper-Resistant LikeJacking Protection
277
Table 2. List of required DOM APIs and properties
Type
DOM method window
Checking scope
Name
getComputedStyle
getElementById, getElementsByTagName DOM method document
defineProperty
addEventListener
contentDocument, postMessage
parentNode, offsetParent
offsetLeft, offsetTop
offsetHeight, offsetWidth
DOM method all DOM nodes1
DOM method window & position guard
DOM property widget iframe
DOM property all DOM nodes
DOM property all DOM nodes
DOM property all DOM nodes
1 : Google Chrome only
The actual implementation of these properties are within the built-in host ob-
jects, which are immutable. These built-ins serve as the prototype-objects for
the native DOM objects, such as window, Object, or document. The DOM-space
instances of these objects merely provide references to the native implementa-
tions. The delete operator removes a property from an object. If this operation
succeeds, it removes the property from the object entirely. However, if a prop-
erty with the same name exists on the object’s prototype chain, the object will
inherit that property from the prototype, which in the case of host objects is
immutable [22]. Thus, redeﬁning native DOM APIs creates a new property in
the native object’s current DOM-space instance, which eﬀectively shadows the
native prototype. Through deletion of this shadowing property, the prototype’s
implementation reappears (please refer to [32] for further information on this
topic). However, deleting properties is potentially destructive. It is known that
redeﬁnition or wrapping of native API can be used for legitimate reasons, e.g.,
to provide the developer with enhanced capabilities. Thus, whenever possible,
our mechanism attempts to detect but not to undo changes to the essential APIs
and properties (see Sec. 6.4). If such changes could be detected, the mechanism
concludes that the DOM integrity can’t be validated and instructs the widget
to disable seamless interaction (according to the strategy deﬁned in Sec. 3.4).
6.4 Integrity of Native DOM APIs
As explained above, native DOM APIs cannot be deleted and a redeﬁnition
merely creates a DOM-space reference with the same name. Thus, a straightfor-
ward check for redeﬁned native APIs works like this (see also Lst. 2):
1. Store a reference to the checked API in a local variable. In the tampering
case, this variable will point to the DOM-space implementation.
2. delete the API and check the outcome. If the operation returned true
continue to step 4.
3. If the operation returned false, the deletion failed. As deleting unchanged
references to host-APIs always succeeds, the failing of the operation is a re-
liable indicator, that the corresponding property of the hosting object was
278
M. Johns and S. Lekies
Listing 2 Tamper checking DOM APIs (simpliﬁed sketch)
// Keep a copy for reference
var copy = window . getComputedS t yl e ;
// deletion of unchanged host APIs always returns ’ true ’
if ( delete window . getComputedS t yl e ){
// Check if the function has changed
if ( window . getComputed S ty le == copy )
[... all is ok ...]
else
error ( " tampered ! " );
} else {
// delete failed
// Redefined property with [[ Configurable ]] set to ’ false ’
error ( " tampered ! " );
}
redeﬁned with defineProperty, while setting the internal [[Conﬁgurable]]
property to false (see Sec. 6.1). Hence, the API has been redeﬁned. Termi-
nate.
4. Compare the API to the local copy. If both point to the same implementa-
tion, the API’s integrity is validated. Terminate positively.
5. If they diﬀer, the API has been overwritten. Restore the local copy to the
host object, in case the redeﬁnition has legitimate reasons (non-disruptive
approach) and terminate the integrity validation with negative result.
We practically validated this algorithm with Internet Explorer 9, Firefox 19, and
Safari 5.
A subtle bug in Google Chrome: The behavior described above is universally
implemented in all browsers, with one exception: Current versions of Google
Chrome (in our tests version 26) allow destructive deletion of some native DOM
APIs, mainly the ones attached to Object, such as getOwnPropertyDescriptor.
However, for aﬀected APIs, Chrome APIs can be veriﬁed by applying the same
test to the API’s respective toString() method, as the Function prototype
exposes the correct behavior. This means, Chrome DOM APIs can be checked via
applying the method discussed above to the APIs toString() method, instead
to the APIs themselves.
6.5 Native DOM Property Integrity
While all browsers act (mostly) identical in respect to the redeﬁnition of native
DOM APIs, they expose diﬀerences when it comes to the properties of DOM
elements, such as parentNode or offsetHeight.
Firefox & Internet Explorer 9 treat DOM properties in the exact same fashion
as DOM APIs (see Sec. 6.4). Hence, for these browsers, the same algorithm can
be applied.
(cid:13)(cid:1)
(cid:12)(cid:1)
(cid:11)(cid:1)
(cid:10)(cid:1)
(cid:9)(cid:1)
(cid:8)(cid:1)
(cid:7)(cid:1)
(cid:6)(cid:1)
(cid:5)(cid:1)
(cid:4)(cid:1)
Tamper-Resistant LikeJacking Protection
279
(cid:21)(cid:18)(cid:1)
(cid:20)(cid:23)(cid:1)
(cid:20)(cid:18)(cid:1)
(cid:19)(cid:23)(cid:1)
(cid:19)(cid:18)(cid:1)
(cid:23)(cid:1)
(cid:18)(cid:1)
(cid:4)(cid:11)(cid:14)(cid:8)(cid:9)(cid:13)(cid:15)(cid:1)
(cid:2)(cid:10)(cid:14)(cid:13)(cid:12)(cid:8)(cid:1)
(cid:6)(cid:7)(cid:9)(cid:7)(cid:14)(cid:11)(cid:1)
(cid:5)(cid:3)(cid:27)(cid:1)
(cid:18)(cid:1) (cid:19)(cid:18)(cid:1) (cid:20)(cid:18)(cid:1) (cid:21)(cid:18)(cid:1) (cid:22)(cid:18)(cid:1) (cid:23)(cid:18)(cid:1) (cid:24)(cid:18)(cid:1) (cid:25)(cid:18)(cid:1) (cid:26)(cid:18)(cid:1) (cid:27)(cid:18)(cid:1) (cid:19)(cid:18)(cid:18)(cid:1) (cid:19)(cid:19)(cid:18)(cid:1) (cid:19)(cid:20)(cid:18)(cid:1) (cid:19)(cid:21)(cid:18)(cid:1) (cid:19)(cid:22)(cid:18)(cid:1)
Number of DOM nodes
Performance
X-axis: Number of DOM nodes, Y-axis: Percentage of sites
X-axis: Time in ms, Y-axis: Percentage of sites
Fig. 2. Results of the performance evaluation
Google Chrome’s native DOM properties are immutable. This means, direct
overwriting or redeﬁning via defineProperty has no eﬀect on the property. The
property’s value remains untouched by attempts to change it. Unfortunately,
Chrome allows the irreversible deletion of DOM properties. Furthermore, after
such deletion, a new property with the same name can be added to the hosting
object again, now under full control of the attacker. However, the new property
has the same characteristic as all ’normal’ JavaScript properties, namely its in-
ternal [[Conﬁgurable]] property acts as speciﬁed: If it is set to true, the property
can be redeﬁned, if it is set to false a redeﬁning step fails with an error mes-
sage. Both cases diﬀer noticeably from the legitimate behavior and, thus, can be
utilized for a reliable test.
Safari & Internet Explorer 8 are strict about DOM integrity and do not allow
direct overwriting or deleting of DOM properties. This also applies to using the
defineProperty method. Thus, in the case of these two browsers, nothing has
to be done, as malicious undermining of the DOM integrity is impossible.
7 Evaluation
7.1 Security Evaluation
In this section we discuss, based on the attack description in Sec 2.2, how our
measure is able to defend the widget. Please note: This security evaluation only
covers attack variants, which have been previously documented. In respect to
yet to-be-discovered attacks, please refer to Sec. 4.5.
Hiding the iframe via CSS: The visibility checking process identiﬁes all po-
tential conditions that would render the widget invisible to the user (see Sec 4.1)
and, thus, notiﬁes the widget about the potentially malicious settings.
280
M. Johns and S. Lekies
Obstructing the iframe with Overlaying Elements: Our mechanism ﬁnds
all DOM elements that overlap with the widget (see Sec 4.2). Therefore, potential
obstructing elements can be identiﬁed and acted upon.
Moving the iframe under the Mouse Pointer: The position guard overlay
(see Sec. 4.4) enforces that the relative position of the widget in the page does not
change after the visibility check has concluded. Therefore, this attack method is
eﬀectively disarmed.
Furthermore, the correct functioning of the visibility checking process is en-
sured through the system’s DOM integrity checking methodology even in the
context of an actively malicious embedding page (see Sec 6).
In this context, it has to be stressed, that the boundaries between Click/-
LikeJacking and pure social engineering are ﬂuid. Under suiting circumstances
related attacks might be possible without resorting to overlays or other visibil-
ity inﬂuencing techniques, i.e., through hiding a visible element in plain sight
via surrounding it with many similar looking elements. In such situations, the
proposed protection method is powerless.
7.2 Functional and Performance Evaluation
To examine our approach’s performance and interoperability characteristics, we
conducted a practical evaluation. For this purpose, we selected a set of 635 sites
out of the Alexa Top 1000, based on the characteristic that the sites included at
least one JavaScript library directly from Facebook, as such a script-include is a
necessary precondition to integrate Facebook’s “like button”. Furthermore, we
implemented our visibility- and tamper-checking algorithms in a fashion, that
it becomes active automatically after the page ﬁnished its rendering process.
This means for every page, which includes our measure, the script automat-
ically identiﬁes all included social sharing widget (from the Facebook, Goole
and Twitter) and validates their respective visibility state. Finally, we created
a small program that causes a browser to successively visit the test sites and a
userscript, which injects our script in every page this browser loads. For this,
we used the following browser extensions: Greasemonkey2 for Firefox 19, Nin-
jaKit3 for Safari 5, and IE7Pro4 for Internet Explorer 9. Google Chrome has