title:Transys: Leveraging Common Security Properties Across Hardware Designs
author:Rui Zhang and
Cynthia Sturton
Transys: Leveraging Common Security Properties
Across Hardware Designs
Rui Zhang, Cynthia Sturton
University of North Carolina at Chapel Hill
{rzhang, csturton}@cs.unc.edu
Abstract—This paper presents Transys, a tool for translating
security critical properties written for one hardware design
to analogous properties suitable for a second design. Transys
works in three passes adjusting the variable names, arithmetic
expressions, logical preconditions, and timing constraints of the
original property to retain the intended semantics of the property
while making it valid for the second design. We evaluate Transys
by translating 27 assertions written in a temporal
logic and
9 properties written for use with gate level information ﬂow
tracking across 38 AES designs, 3 RSA designs, and 5 RISC
processor designs. Transys successfully translates 96% of the
properties. Among these, the translation of 23 (64%) of the
properties achieved a semantic equivalence rate of above 60%.
The average translation time per property is about 70 seconds.
I. INTRODUCTION
The Spectre [1] and Meltdown [2] attacks, along with
their variants [3], [4], have demonstrated the importance of
validating the security of a processor design. To do so,
one needs a comprehensive set of properties describing the
security requirements of the design. Developing such a set
is challenging. The high-level goals of conﬁdentiality and
integrity of a particular security domain—and availability of
a machine in general—may be well understood, but mapping
these goals to the cycle-by-cycle behavior of speciﬁc registers,
signals, and ports in a design is difﬁcult, and a matter of art as
much as science. In practice this effort must be repeated for
each new design, even for new generations of existing designs.
We present Transys, a tool that takes in a set of security
critical properties developed for one hardware design and
translates those properties to a form that is appropriate for
a second design. The insight that led to this work is the
recent research into security speciﬁcation development and
security validation tools, which uses properties developed
for one processor design in order to evaluate the proposed
methodology on a second design [5], [6], [7]. The properties
must be translated manually, and this process is mentioned
only in passing, but it suggests that the properties crafted for
one processor design can be made suitable for a second design.
We examine the question more closely. We investigate
how the translation may be done programmatically, and we
build Transys to implement our approach. We go beyond
processor cores and include RSA and AES implementations in
our evaluation. We examine properties from the two security
veriﬁcation methods in use today: assertion based veriﬁcation
using a restricted temporal logic, and gate level information
ﬂow tracking using set and assert tags. We ﬁnd that cross-
design, and in the case of a processor core, cross-architecture
security speciﬁcation translation is feasible and practical.
The problem statement is this: given a property written for
one design, produce an equivalent property suitable for the
veriﬁcation of a second design.
It is not always clear what “equivalent” means. For exam-
ple, prior work has demonstrated that the following policy,
although relatively simple, is critical to security and holds for
many pipelined RISC architectures [6]:
Policy 1. The zeroth general purpose register (GPR0) must
always contain the value 0.
To ensure that the above policy is upheld for a particular
design D, a designer might craft the following property, which
if proven to hold for all possible traces of execution (along
with a proof that GPR0 is initialized to 0), will enforce the
desired policy.
PD
= wr_enable → rf_addr (cid:54)= 0.
.
(1)
Property PD states that if a write to the register ﬁle is en-
abled (wr_enable) then the register being written (rf_addr)
is not zero—i.e., general purpose register 0 is not the target
of the write.
However, the same property may not be true of a second
design D(cid:48), even though the design enforces the same policy.
Design D(cid:48) might require the following property:
= wr_enable → rf_addr (cid:54)= 0 ∨ rf_data = 0,
.
PD(cid:48)
which states that writes are enabled only when GPR0 is not
the target of the write or when the value being written is 0.
Design D(cid:48) does not satisfy property PD and an effort to verify
the property will fail; however the underlying policy that we
care about is upheld.
(2)
Given two properties written over the registers, signals,
and ports of two different designs, it is not clear how to
formally deﬁne equivalence between them. We therefore take
an operational approach. We start with observations about how
properties are likely to morph from one design to another: for
example, varying pipeline stages may affect in which clock
cycle a signal becomes valid; ﬂags may be laid out differently
in control registers; and additional gating signals may be used
in one design, but not in another. We then deﬁne a set of steps
that modify property PD in a set, limited number of ways to
build a property PD(cid:48) that is valid for design D(cid:48). We build a
system that can reliably translate properties from one design to
another, without requiring a formal deﬁnition of the intended
high-level security policies each property is in aid of.
The gist of the approach is to do the translation in three
phases: the ﬁrst phase substitutes the appropriate signals, ports,
and register names of the second design into the property; the
second phase adjusts the arithmetic expressions and timing
constraints of the newly drafted property; and the third phase
reﬁnes the precondition of the new property. Transys takes as
input the property to be translated and the RTL implementation
of both the original design and the new design. No instrumen-
tation or manual modeling of either design is required.
Transys does not obviate the need for human involvement
in security property speciﬁcation. In fact, manual review of
the generated properties is a required step of the Transys
workﬂow. Transys does, however, do much of the heavy
lifting for the designer, leveraging work done by others in the
community tackling the security validation of similar designs,
and providing an initial set of security properties. In our
evaluation, we manually analyze the new properties to decide
if they are semantically analogous to the original set.
We have implemented a prototype of Transys on top of
Yosys[8] and it supports translating security assertions for
hardware designs written in Verilog. To evaluate Transys, we
collect 38 AES designs, 3 RSA designs, and 5 RISC processor
designs, along with 27 temporal
logic assertions and 11
information ﬂow tracking assertions. Transys can successfully
translate 96% of the properties across the evaluated hardware
designs. Among these, the translation of 23 (64%) of the
properties achieved a semantic equivalence rate of above 60%.
The average translation time per property is about 70 seconds.
The results indicate that Transys can be practically used by
hardware veriﬁcation teams.
II. SECURITY PROPERTIES
We focus on properties developed for a hardware design
at the register transfer level (RTL). An RTL design deﬁnes
the registers, signals, and ports in a hardware module and
describes how data ﬂows through the module in each clock
cycle. Properties are written for use with a particular veriﬁca-
tion method, and each method has an associated speciﬁcation
language in which the properties can be expressed. We present
the two main logic systems used to express security properties
of hardware designs.
A. Restricted Temporal Logic
Assertion based veriﬁcation (ABV) is widely used in in-
dustry for the functional validation of hardware designs [9].
Properties expressed in a restricted temporal logic are added,
in the form of assertion statements, to the RTL design and
simulation-based testing or static analysis is used to ﬁnd
violations. Researchers have recently begun to adapt ABV for
the security validation of a hardware design [10], [5], [7], [6].
The security properties that have been developed to date
make use of existing industry standard libraries for expressing
assertions [11] and are written in a fragment of linear temporal
logic that includes the globally (G) and next (X) operators
LTL(G, X)
φ
s
f
a
t
.
= G(φ)
= s → s
.
= f | Xs
.
= a | ¬f | f ∨ f | f ∧ f | f → f
.
= t == t | t (cid:54)= t | true
.
= reg | N | reg + reg | reg − reg
.
| reg > N
| reg[N : N ]
Fig. 1: The restricted temporal logic used by security properties expressed as
assertions, where reg is a signal, register, or port in the design, and N is the
set of natural numbers.
property : (set_stmt)∗ . . . (assert_stmt)∗
|(set_stmt)∗ . . . (gated_assert_stmt)∗
|(set_stmt)∗ . . . (declass_assert_stmt)∗
set_stmt : ‘set’ reg ‘:=’ tag
assert_stmt : ‘assert’ reg ‘==’ tag
gated_assert_stmt : ‘assert’ reg ‘==’ tag ‘when’ expr
declass_assert_stmt : ‘assert’ reg ‘==’ tag ‘allow’ reg
tag : ‘high’ | ‘low’
Fig. 2: The syntax used to track how information ﬂows through a hardware
design at the gate level. A property is a series of set statements over source
variables and assert statements over sink variables. The assert statements may
be made conditional using when. Declassiﬁcation is done using allow.
with a syntactic restriction that conforms to the grammar
shown in Figure 1. In particular, the properties are of the
form G(A → B), where A and B are boolean combinations
of arithmetic expressions and may contain the X operator.
Transys can be used to translate these properties.
B. Information Flows
individual
The properties expressible in the temporal logic are trace
properties:
traces of execution either satisfy or
violate the given property. However, properties about how
information ﬂows through the processor are not immediately
expressible as trace properties, but rather require hyperproper-
ties [12], [13]. Whereas a trace property can be deﬁned by a set
of traces—those traces that satisfy the property, a hyperprop-
erty is deﬁned by a set of sets of traces—those systems that
satisfy the property. Properties about conﬁdentiality, such as
asserting an absence of side channels, or about integrity, such
as asserting which security domains can inﬂuence the control
ﬂow of a protected domain are examples of hyperproperties.
These properties can be handled at the language level, using
typed hardware description languages [14], [15], [16]. An
alternative approach is gate level information ﬂow tracking
in which shadow state added to the hardware design tracks
how data ﬂows. Standard trace properties expressed over the
shadow state can then evaluate how information is allowed
to ﬂow through the original design. This approach has the
advantage that existing designs, written in current industry
standard hardware description languages, can be validated.
The approach has been studied in the literature in a series
of papers [17], [18], [19].
Type
Memory
Access
Exception
Related
Control
Flow
Update
Registers
Correct
Results
Instruction
Executed
Description
P01: Memory value in equals register value out
P02: Register value in equals memory value out
P03: Memory address equals effective address
P04: Calculation of memory address or memory data
is correct
P05: Execution privilege matches page privilege
P06: Updates to exception registers make sense
P07: Privilege escalates correctly
P08: Privilege deescalates correctly
P09: Exception return updates state correctly
P10: Interrupt implies handled
P11: Enter supervisor mode is on reset or exception
P12: Exception handling implies exception mecha-
nism activated
P13: Exception handler accessed only during excep-
tion, in supvr mode, or on reset
P14: Jumps update the PC correctly
P15: Jumps update the LR correctly
P16: Continuous Control Flow
P17: Flags that inﬂuence control ﬂow should be set
correctly
P18: Link address is not modiﬁed during function
call execution
P19: SPR equals GPR in register move instructions
P20: SR is not written to a GPR in user mode
P21: SPR modiﬁed only in supervisor mode
P22: Destination matches the target
P23: Reg change implies that it is the instruction
target
P24: Instruction is in a valid format
P25: Instructions unchanged in pipeline
P26: Unspeciﬁed custom instructions are not allowed
Table I: Security properties of OR1200 processor mined from the speciﬁcation.
Gate level information ﬂow tracking requires tagging source
variables with the appropriate level (e.g., “high” or “low”)
of information, asserting the correct level is maintained for
sink variables, and deciding when to conditionally disable the
assert or under what circumstances to allow declassiﬁcation.
Transys can be used to translate these properties as well and
we describe their syntax in Figure 2.
C. Hardware Security Properties
We present
the security properties for three classes of
designs: RISC processor cores, AES implementations, and
RSA implementations. Table I shows the security properties of
the OR1200 processor. These security properties are collected
from the literature [10], [5], [6] and can be categorized
as follows: control ﬂow related properties, exception related
properties, memory access related properties, properties to
ensure execution of the correct and speciﬁed instructions, and
properties about correctly updating results.