title:Mapping to Bits: Efficiently Detecting Type Confusion Errors
author:Chengbin Pang and
Yunlan Du and
Bing Mao and
Shanqing Guo
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:20)(cid:17)(cid:85)(cid:73)(cid:1)(cid:42)(cid:79)(cid:85)(cid:70)(cid:83)(cid:79)(cid:66)(cid:85)(cid:74)(cid:80)(cid:79)(cid:66)(cid:77)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:80)(cid:71)(cid:85)(cid:88)(cid:66)(cid:83)(cid:70)(cid:1)(cid:51)(cid:70)(cid:77)(cid:74)(cid:66)(cid:67)(cid:74)(cid:77)(cid:74)(cid:85)(cid:90)(cid:1)(cid:38)(cid:79)(cid:72)(cid:74)(cid:79)(cid:70)(cid:70)(cid:83)(cid:74)(cid:79)(cid:72)(cid:1)(cid:9)(cid:42)(cid:52)(cid:52)(cid:51)(cid:38)(cid:10)
TCD: Statically Detecting Type Confusion Errors in
C++ Programs
Changwei Zou∗ , Yulei Sui†, Hua Yan∗, Jingling Xue∗
∗School of Computer Science and Engineering, University of New South Wales, Australia
†Faculty of Engineering and Information Technology, University of Technology Sydney, Australia
Abstract—For performance reasons, C++, albeit unsafe, is often
the programming language of choice for developing software
infrastructures. A serious type of security vulnerability in C++
programs is type confusion, which may lead to program crashes
and control ﬂow hijack attacks. While existing mitigation so-
lutions almost exclusively rely on dynamic analysis techniques,
which suffer from low code coverage and high overhead, static
analysis has rarely been investigated.
This paper presents TCD, a static type confusion detector
built on top of a precise demand-driven ﬁeld-, context- and ﬂow-
sensitive pointer analysis. Unlike existing pointer analyses, TCD
is type-aware as it not only preserves the type information in the
pointed-to objects but also handles complex language features of
C++ such as multiple inheritance and placement new, making it
therefore possible to reason about type casting in C++ programs.
We have implemented TCD in LLVM and evaluated it using seven
C++ applications (totaling 526,385 lines of C++ code) from Qt, a
widely-adopted C++ toolkit for creating GUIs and cross-platform
software. TCD has found ﬁve type confusion bugs, including one
reported previously in prior work and four new ones, in under
7.3 hours, with a low false positive rate of 28.2%.
Index Terms—type confusion, bug detection, software security,
pointer analysis, static analysis
I. INTRODUCTION
Large software systems, such as Linux kernels, compilers,
browsers, and Java Virtual Machines, are the cornerstone for
the modern software industry. To seek for high performance
and low-level control over memory allocation, almost all of
these fundamental products are implemented in C and/or C++,
both of which lack memory safety [1]–[3] and type safety [4],
leading to severe software security vulnerabilities [5]–[7].
With the rapid increase in both complexity and scale of
software, teamwork is necessary for all large projects. Given
a base-class pointer in a large project, it is harder than ever
before for C++ programmers to ﬁgure out which objects this
pointer may point to. If an object is cast from a base class
to a derived one, it is their responsibility to ensure that type
casting is correct at runtime. If this fails, a type confusion
error (or bug) will occur, allowing attackers to corrupt out-
of-bound data and hijack control ﬂow by tampering with
code pointers [6]. As shown in Figure 1, the number of type
confusion vulnerabilities reported on the CVE website [8] has
surged rapidly in recent years. It is thus imperative to develop
program analysis techniques to detect type confusion bugs.
Prior Work: Dynamic Analysis. Existing mitigation solu-
tions [6], [9]–[15] are all dynamic. At compile-time, instru-
mentation code is added to collect the information for the
(cid:26)(cid:24)(cid:25)(cid:14)(cid:18)(cid:14)(cid:24)(cid:19)(cid:25)(cid:18)(cid:14)(cid:21)(cid:26)(cid:25)(cid:19)(cid:14)(cid:17)(cid:16)(cid:18)(cid:26)(cid:16)(cid:5)(cid:20)(cid:18)(cid:15)(cid:17)(cid:17)(cid:1)(cid:165)(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:42)(cid:52)(cid:52)(cid:51)(cid:38)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:20)(cid:24)
(cid:19)(cid:26)(cid:19)
# of type confusion vulnerabilities
120
100
80
60
40
20
0
2010
2011
2012
2013
2014
2015
2016
2017
Year
2018
Fig. 1. The rapid increase of type confusion vulnerabilities [8].
objects in a program. At runtime, the safety of type casting for
each object is veriﬁed. To trace all the objects efﬁciently, data
structures, such as red-black trees [10], shadow memory [12],
hash tables [6] and low fat pointers [13], have been used.
This Work: Static Analysis. Dynamic analysis tools can
detect type confusion bugs precisely at runtime, but suffer
from the two well-known problems: low code coverage and
high performance overhead. In contrast, static analysis tools
can ﬁnd potential software security vulnerabilities that are
harder to ﬁnd dynamically in the entire codebase earlier in
the development life cycle. Thus, recent years have witnessed
widespread adoption of static tools in software industries
[16]. However, there has been little research on developing
static techniques and tools for ﬁnding type confusion bugs in
C++ source code. To the best of our knowledge, this work
represents the ﬁrst such investigation.
There are several challenges faced in ﬁnding type confusion
bugs efﬁciently and precisely in a static manner. First, a precise
and efﬁcient inter-procedural analysis is needed, but current
bug-ﬁnding tools [16] perform the majority of their analysis
tasks intra-procedurally. Second, a precise and efﬁcient type-
aware pointer analysis is also needed to track the points-to
information. Due to complex C++ language features such as
multiple inheritance, the pointer analyses developed for C [17]
and Java [18] can not be directly applied in type confusion
detection. Worse still, some type information can be lost in the
Intermediate Representations (IRs) operated by C++ compilers
such as LLVM [19], even under -O0.
In this paper, we address these challenges by introducing
TCD, a static type confusion detector built on top of a C++
compiler front-end modiﬁed to provide some cast-related type
annotations required in the IR and a precise demand-driven
C *
B *
A *
Pointer 
Adjustment
1  struct A{
2     virtual ~A(){};
3  };
4  struct B{
5     int y;
6  };
7  struct C : public A, public B{
8     int z;
9  };
Pointer 
10 B * getObj(){
Adjustment
11    return new B;
12 }
13 void test(){
14    B *bptr = new C;
15    if(hard_to_satisfy()){
16 
17    }
18    C *cptr = static_cast(bptr);
19    delete cptr;
20 }
  bptr = getObj();
C *
B *
-8
0
Out-of-Bound
Out-of-Bound
int y
int y
B  Object
0
8
12
Virtual Table 
Virtual Table 
Pointer
Pointer
int y
int y
int z
int z
C Object
 Function Pointer to  ~A() 
 Function Pointer to  ~A() 
Virtual Table
Fig. 2. A motivating example of TCD.
ﬁeld-, context- and ﬂow-sensitive pointer analysis leveraged
to compute the points-to information inter-procedurally. How-
ever, unlike existing pointer analyses for C and Java, TCD is
type-aware as it not only preserves the type information in
the objects pointed to by a pointer but also handles complex
language features of C++ such as multiple inheritance and
placement new, making it therefore possible to reason about
type casting in C++ programs.
Figure 2 illustrates how a type confusion bug occurs and
why both existing pointer analyses and dynamic analyses
are inadequate. Here, class C inherits from both A and
B, with the memory layout of B and C objects shown. If
hard_to_satisfy() in line 15 evaluates to true (even
though very infrequently), bptr in line 18 will point to a
B object created in line 11. Due to multiple inheritance, the
downcasting from B to C in line 18 will trigger a pointer
adjustment as shown by the single-head arrow. As a result,
the B object will be mistakenly treated as a C object, lead-
ing to a type confusion error. The out-of-bound area will
be misunderstood as containing a virtual table pointer. The
delete operation in line 19 will attempt to invoke the virtual
destructor of class C (inherited from A), causing an illegal
dereference for the out-of-bound area, and consequently, a
program crash. Worse still, if this area is controlled by some
motivated attackers, they can easily hijack control ﬂow by
forging a virtual table pointer inside [20]–[22]. Note that if
hard_to_satisfy() in line 15 evaluates to false, there
are also pointer adjustments for the C object created, once
from C to B in line 14 (upcasting) and once from B to C in
line 18 (downcasting), as shown by the two-head arrow.
The state-of-the-art pointer analyses for C such as SVF [17]
cannot be directly applied in detecting type confusion bugs
in C++ programs. There are two reasons for this. First, the
pointed-to objects discovered for a pointer do not carry enough
type information. Second, the missing type information, even
if added directly, can be incorrect in the presence of multiple
inheritance, as the pointer adjustments as shown in Figure 2
are not taken into account. SVF [17] expects every C program
being analyzed to be C-compliant. Given p = q + offset,
where p and q are pointers and offset
is a non-negative
integer (which is not necessarily known at compile time), SVF
therefore assumes that p will always point to the objects that
q points to (regardless of what offset is). For a C++ program,
however, this assumption no longer holds due to the pointer
value adjustments between B and C, as shown in Figure 2.
Speciﬁcally speaking, the pointer adjustment from B to C in
line 18 will generate a negative offset (-8) in the LLVM-
IR. In order to ﬁgure out the type of a pointed object obj,
1 offi),
1 offi is
the offset accumulated during ﬁeld-sensitive pointer analysis.
Ignoring the negative offset caused by downcasting (e.g., in
line 18) will eventually lead to an incorrect offset accumulated
1 offi) during program analysis, thereby resulting in a
the information we need can be represented as (t,!n
where t is the type of the object containing obj and!n
in (t,!n
Dynamic analysis tools [6], [9], [10], [12]–[15] can hardly
ﬁnd the type confusion bug in line 18. To ﬁnd bugs at
testing stage, these tools are usually driven by a fuzzer like
AFL [23] to repeatedly run the program with different inputs.
Suppose that hard_to_satisfy() in line 15 consists of
testing an 8-byte integer (read as the standard input) against a
magic number, 0x12345678deadbeef. The modern grey-
box fuzzer, AFL, could not expose the bug in 24 hours (as line
16 was never reached during a total of 431 million program
runs). Recent fuzzing tools such as T-Fuzz [24] attempt to
alleviate this issue. However, constraint solvers they rely on
may still not be powerful enough to solve complex constraints.
In contrast, as a static detector, TCD does not need to really
run the program, thus bypassing the hard_to_satisfy()
condition in line 15 that thwart dynamic detectors.
wrong type inferred for the object obj.
This paper makes the following contributions:
• We describe a new type-aware pointer analysis that can
reason about the type information in the pointed-to ob-
jects for C++.
mented in LLVM, for ﬁnding type confusion bugs.
• We introduce TCD, a type confusion detector imple-
• We have evaluated it using seven C++ applications (to-
taling 526,385 lines of C++ code) from Qt, a widely-
adopted C++ toolkit for supporting GUIs and cross-
platform software. TCD has found ﬁve type confusion
bugs, including one reported previously in prior work
and four new ones, in under 7.3 hours, with a low false
positive rate of 28.2%.
The rest of this paper is organized as follows. Section II
reviews type casting and pointer analysis. Section III presents
the design and implementation of TCD. Section IV evaluates
TCD, showing that TCD is able to detect new bugs that evaded
previous approaches. Section V discusses the related work.
Finally, Section VI concludes the paper.
II. BACKGROUND
A. Type Casting in C++
C++ introduces four keywords to support four different
kinds of casts, static_cast, reinterpret_cast,
(cid:19)(cid:26)(cid:20)
In
and
const_cast.
to enforce the semantics required. At
particular,
dynamic_cast
static_cast, which is checked at compile time,
is
mainly used to cast a pointer of a base class to a pointer of a
derived class. As illustrated in Figure 2, pointer adjustments
will be performed for both upcasting and downcasting in the
case of multiple inheritance if the two related types have
different offsets. Unlike static_cast, dynamic_cast
performs a type conversion between two polymorphic classes
(with virtual
tables). At compile time, a C++ compiler
inserts code to call __dynamic_cast(), a C++ library
function,
runtime,
__dynamic_cast() will search the type information
stored in virtual tables to check whether a dynamic_cast
is safe or not. In other words, dynamic_cast does not
lead to any type confusion bug.
version
casting,
reinterpret_cast will not modify the underlying
pointer, even in the presence of multiple inheritance.
Furthermore, reinterpret_cast can be used between
unrelated classes while static_cast and dynamic_cast
are often conducted in the same class hierarchy. As for
const_cast, its main purpose is to discard the read-only
constness on an object. While const_cast may still
introduce security issues [6], its protection is an orthogonal
issue that we do not address in this paper.
C-style