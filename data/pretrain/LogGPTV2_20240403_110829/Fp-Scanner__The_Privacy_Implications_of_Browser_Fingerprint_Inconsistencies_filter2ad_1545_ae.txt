### Advanced Countermeasures and Performance Analysis

For more advanced countermeasures, such as FPRANDOM, it may be necessary to analyze the canvas pixels. In Figure 4, we present four boxplots that illustrate the processing time for the following scenarios:

1. **FINGERPRINTJS2 Inconsistency Tests**
2. **FP-SCANNER (Default Mode)**: The scanner stops upon detecting the first inconsistency.
3. **FP-SCANNER (Depth Mode)**: All inconsistency tests are executed.
4. **FP-SCANNER (Canvas Only Mode)**: Only the test that manipulates the canvas pixels is executed.

When all tests are executed (Scenario 3), which corresponds to genuine fingerprints, 90% of the fingerprints are processed in less than 513ms. However, a significant speedup is observed when the processing halts after the first inconsistency (Scenario 2). Specifically, 83% of the fingerprints are processed in less than 0.21ms, while the remaining 17% require more than 440ms. This performance difference is due to the fact that most tested fingerprints had installed countermeasures that could be detected using straightforward tests, such as media queries or testing for overridden functions. Fingerprints with no countermeasures or FPRANDOM (17 fingerprints) required the execution of all tests.

The fourth boxplot highlights the additional processing time needed for pixel analysis, which is only required for detecting FPRANDOM. Disabling the pixel analysis test results in FP-SCANNER outperforming FINGERPRINTJS2 with better accuracy (> 0.92) and faster execution (90th percentile of 220ms).

### Privacy Implications

#### Discrimination
Detection of fingerprinting countermeasures can lead to discrimination. For example, Hannak et al. [9] demonstrated that some websites adjust prices based on the user agent. Similarly, many websites refuse to serve content to browsers with ad blockers. Being detected with a fingerprinting countermeasure can result in altered content delivery or access denial if users do not share their true browser fingerprint.

#### Trackability
Detecting countermeasures can sometimes improve tracking. Nikiforakis et al. [16] noted that user agent spoofers make browsers more identifiable. We extend this idea to argue that detection of fingerprinting countermeasures can make browsers more trackable, although this is not always the case. The ease of tracking depends on factors such as the ability to identify the countermeasure, the number of users, the recovery of real fingerprint values, and the volume of information leaked by the countermeasure.

### Anonymity Set
Countermeasures with large user bases, such as Firefox with fingerprinting protection or Brave, increase the anonymity set by blocking different attributes and, in the case of Firefox, by sharing the same user agent, platform, and timezone. Given their widespread use, the information gained from knowing someone uses these countermeasures does not compensate for the loss in entropy from the removal of fingerprinting attributes. Conversely, for countermeasures with small user bases, like CANVAS DEFENDER (21k downloads on Chrome, 5k on Firefox) or RAS (160k downloads on Firefox), the anonymity gained is likely insufficient to offset the information obtained from knowing the countermeasure's use.

### Increasing Targetability
In the case of RAS, it is possible to detect its presence and recover the original browser and OS family. Since the canvas attribute has high entropy and RAS does not randomize or block it by default, a combination of a few fingerprint attributes (being a RAS user, predicted browser, predicted OS, and canvas) may be enough to identify a RAS user.

### Blurring Noise
CANVAS DEFENDER claims to have a safer solution than other canvas countermeasure extensions, but its operation makes it easier for fingerprinters to track users. CANVAS DEFENDER applies a uniform noise vector to all pixels of a canvas, composed of four random numbers between -10 and 30 for the red, green, blue, and alpha (rgba) components. With a small user base, it is unlikely that two or more users share the same noise and the same original canvas. The probability that two or more users among k share the same noise vector is given by the formula \(1 - \prod_{i=1}^{k} (1 - \frac{1}{404-i})\). For 21k Chrome users, the probability is 0.0082. Moreover, CANVAS DEFENDER does not change the noise vector by default, making it easy to extract and use as an additional fingerprinting attribute.

### Protection Level
While aggressive fingerprinting countermeasures, like RAS, may seem tempting, it is wiser to use a countermeasure with a large user base, even if it does not modify many fingerprinting attributes. Widely-used open-source projects are also more likely to be regularly audited. We recommend a defense strategy that either blocks access to an attribute or unifies the returned value for all users, rather than randomizing the value based on the original value.

### Perspectives
The techniques used to detect and characterize fingerprinting countermeasures can be applied to any browser extension. Starov et al. [18] showed that browser extensions can be detected through their interactions with the DOM. If an extension has different settings resulting in different fingerprintable side effects, these side effects can be used to characterize the combination of settings used by a user, potentially making them more trackable.

### Threats to Validity
A potential threat lies in our experimental framework. Extensive testing of FP-SCANNER ensured that browser fingerprints were appropriately detected as altered. However, there might be bugs in the experimental infrastructure. The dataset and algorithm are publicly available online, allowing for replication of the experiment. While maintaining an up-to-date set of rules to minimize false positives and detect new countermeasures can be time-consuming, FP-SCANNER aims to be general in its approach.

### Conclusion
In this paper, we identified a set of attributes explored by FP-SCANNER to detect inconsistencies and classify browser fingerprints into genuine and altered categories. We collected fingerprints from browsers using state-of-the-art fingerprinting countermeasures and showed that FP-SCANNER accurately distinguishes genuine from altered fingerprints. We measured the overhead imposed by FP-SCANNER and observed that both the fingerprinter and the test suite impose a marginal overhead on a standard laptop, making our approach feasible for production use. Finally, we discussed the privacy implications of detecting fingerprinting countermeasures and the factors that influence tracking vulnerability.

### References
[References listed here as provided in the original text]

### Notes
[Notes listed here as provided in the original text]