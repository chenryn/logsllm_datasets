Binwalk can help later, as can “standard” DOS 
partition tables.
Having some in-vivo information is helpful
eMMC devices make things harder though. eMMC is really similar to SD in that they 
share a common ancestor, there’s a few divergences that have been made to make 
the phone manufacturing industry happy. 
50
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the 
data lines, but it can be done!
You will need to understand how the disk is laid out
Binwalk can help later, as can “standard” DOS 
partition tables.
Having some in-vivo information is helpful
More eMMC modules now are actually eMCP modules, where you have the eMMC 
module stacked in silicon alongside LPDDR.
51
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the 
data lines, but it can be done!
You will need to understand how the disk is laid out
Binwalk can help later, as can “standard” DOS 
partition tables.
Having some in-vivo information is helpful
eMMC readers are readily available. They come in all shapes and sizes and even have 
USB versions. eMMC cards still talk the same protocol that MMC cards talk, and are 
thus compatible with SD cards! 
52
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the 
data lines, but it can be done!
You will need to understand how the disk is laid out
Binwalk can help later, as can “standard” DOS 
partition tables.
Having some in-vivo information is helpful
http://blog.oshpark.com/2017/02/23/retro-cpc-dongle/
This also means you can be like this crazy bastard and make your own SD card 
adapters for eMMC devices. 
53
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the 
data lines, but it can be done!
You will need to understand how the disk is laid out
Binwalk can help later, as can “standard” DOS 
partition tables.
Having some in-vivo information is helpful
eMMC devices are also more common in industrial applications, as their lack of a 
physical interconnect means they can be potted and conformal coated. They survive 
higher temperatures, more reads and writes than your typical consumer SD card, and 
are generally meant for more abuse.
These devices here are just two examples of Raspberry Pi clones – compatible ones, 
even – which are built around eMMC devices. 
54
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the data lines, 
but it can be done!
You will need to understand how the disk is laid out
Binwalk can help later, as can “standard” DOS partition tables.
Having some in-vivo information is helpful
All Else Fails: Solder to the rescue
Might need to desolder some storage, or otherwise physically 
attack the hardware
MTD devices are weird. Prepare to get your hands dirty
Interested in more? HHV and friends are the place to start 
looking.
JTAG, etc. might be the hard way out.
In the end, you may have to go out of your way and start sniffing around the device to 
try and find what’s going on. Your device might need a whole bunch of fun.
If you think this could be you, It’s time to go to the Hardware Hacking Village and 
learn you a Thing. Hardware is a whole different special chunk of fun that we won’t 
get into because that rabbit hole is deeper than some young men at a street fair in 
late September.
55
Logic 
Analyzers
Salae makes a good one
Cheap
Basic
Runs over USB
It might be time to get a logic analyzer. There’s plenty of cheaper, USB based ones 
that are more than capable .
56
Hardware interfaces
https://www.crowdsupply.com/excamera/spidriver
http://dangerousprototypes.com/docs/Bus_Pirate
Devices like the Bus Pirate and SPIDriver are convenient hardware bridges for the 
wide, wide world of hardware peripherals that let you bridge the gap. Sure, laptops 
have SPI and I2C but they’re not easily accessible as a platform. These sorts of 
devices are amazing ways for you to mumble with hardware. 
57
Now that we have that, 
what do?
Try mounting it/extracting it/etc. `file` might give you a 
good idea of what it thinks it might be, as will `strings` 
and the like.
eMMCs sometimes have real partition tables
SD cards often do
Look at the reconnaissance you did
Boot logs: lots of good information about partitions
Fstab, /proc/mounts
So now we have the root filesystem, or a dump. It’s time to start digging around. 
58
Let automation do your 
work
Binwalk!
Takes a rough guess at what might be in a place
Makes educated guesses about filesystems
High false positive rate
Photorec might be helpful
Get creative
Losetup and friends are capable of more than you give them 
credit for.
There are a lot of filesystems that are read-only or create-and-
read, like cramfs and such. These are often spotted by binwalk
but are even sometimes seen as lzma or other compressed or 
high-entropy data
If you’re only looking to play in IDA/Radare/etc, the bulk extraction 
from binwalk might help.
The biggest thing that you should get in the habit of is finding automation tools that 
work for your use case. Binwalk is the classic tool for this. It makes rough, educated 
guesses and spits out more guesses. It has a fairly high false positive rate, but a fairly 
low false negative rate, which makes it fairly useful in finding what could be hiding 
under there, so long as you can dig through the dirt.
Tools like Photorec, losetup, etc. are sometimes useful in their own right: These sorts 
of tools have a little bit of smarts baked in that can be really helpful. There are 
compressed filsystems that binwalk will ignore that other tools will totally be happy 
to consume. Your worst case is that a tool makes your working directory a bit of a 
mess.
59
QEMU: the 
Quick 
EMUlator
QEMU is a fast processor 
emulator for a variety of 
targets.
Targets you’ve never 
heard of?
Mainframes
ARM, MIPS
PowerPC
OpenRISC
DEC Alpha
Lots of different ports and 
targets have been ported. 
However, this brings us to one amazing chunk of automation: QEMU. QEMU is a fast 
emulator for a variety of different platforms, letting you do stupid shit like 
60
Did 
someone 
say “OSX on 
Amiga 
hardware”?
Run Mac OSX 10.4 on an Amiga
61
Or Haiku 
on BeOS?
Or run Haiku on BeOS.
Or, alternately, more practical things. 
62
Two ways to run QEMU
AS A FULL FAT VM
You preserve full control over the 
whole process
You’ve got access to things like gdb at 
a kernel level
Requires zero trust in the safety of the 
binary
But you probably want a special 
kernel and board setup, though there 
are generic setups to get you started
Any tools are going to need to be 
compiled for the target environment
I hate cross-compilers.
AS A TRANSLATING LOADER
You have access to all your existing 
x86-64 tools (or whatever your native 
tools are)
They’re not only native, but they’re 
running full-speed.
You can run AFL like it’s meant to
Runs nicely in containers
You don’t even need a container!
QEMU has two general modes: A full-fat VM, like we just saw, or as a translating 
loader in Linux. Your device turned out to be X86 but you’re a paranoid person and 
don’t feel like letting it touch the real hardware directly? Full fat VM. Hell, even 
PowerPC can get in on the game. As a loader, it makes those weird executables from 
that hot new device look like any other executable.
63
Full-Fat VM: 9 tracks of 
DOS
Here we see QEMU running as a full VM, running MSDOS 6.22 and interfacing with 
real hardware, a gigantic Overland Data 9 track tape drive. I used this to dump Data 
General AOS boot and install tapes.
64
Binfmt: Linux’ way of 
loading executables
Long ago, Linux added loadable loaders
Originally for the purposes of running JARs from the 
command line like God and Sun Microsystems intended.
Turns out this is a great place to put emulators.
Debian ships with support for this in its binfmt-misc package.
QEMU can be shipped as a “static userspace” environment 
(think WINE)
Uses “magic numbers” – signatures from a database – to 
determine which ones are supposed to load what.
Fairly simple to add new kinds of binaries. You could actually 
execute JPEGs if you really wanted to?
So let’s talk about Linux’s loader. Ever wondered why you can call Mono and WINE 
executables directly from the command line? Simple, it’s the loader framework. 
Originally so that you could call JARs directly, it’s now fairly trivial to add new kinds of 
“executables” to Linux. 
65
QEMU as loader
WITHOUT A CONTAINER
Dumb simple to set up:
qemu-whatever-static 
With binfmt, just call your binary.
Must trust that the executable 
is not malicious
Might depend on your local 
environment looking like its 
target environment
This works best for static, 
monolithic executables
WITH A CONTAINER
Bring that whole root filesystem 
along!
Run it in the confines of a jail, 
Docker instance, even 
something like Systemd 
containers
Might need root depending on 
your container (systemd)
Great for when your binary 
loads its own special versions of 
libraries that have weird things 
added to them
As a loader, it comes down to two options: With or without containers. Without a 
container, you’re going in raw with no protection. If that executable decides to do 
something terrible to you, it’s totally going to do it. On the other hand, containers are 
a totally reasonable option. Using containers means that you have some amount of 
wall around a possibly malicious application, or something that needs weird library 
setups. As long as Linux can call the loader, it’s all fine. 
66
To give you context on what you’re going to see next, this is the hardware most 
software expects. Not a laptop running a VM running QEMU. 
67
QEMU user Demo
Here we see QEMU running S390x executables from Alpine Linux, doing a full boot, 
then just running a shell from the ArmArch64 
68
AFL setup
Oh boy. Let’s talk about AFL. 
AFL needs to compiled with QEMU support
Magic sauce: CPU_TARGET=whatever 
./build_qemu_support.sh
AFL needs to bring along the host’s libraries
Easiest bound with systemd-nspawn
Don’t do this in a VM
It hurts
In my outline, I promised a demo of AFL.
AFL needs a bunch of setup. I had to compile AFL under Debian, pull over a bunch of 
libraries from the local side, then pass in some environment arguments. Why am I 
going to these great lengths? I’m running it into the container that all the s390x 
executable lives in, which is under Alpine’s version of musl libc. 
69
AFL Demo
70
Wrapping up
What did we learn today?
Hardware vendors are lazy
Attacking hardware means getting creative
QEMU is pretty neato
AFL runs really slow when you’re emulating an X86
emulating an IBM mainframe.
Going forward:
I hope I’ve given you some idea of the landscape of 
tools
Always remember rule 0
71
More Resources
Non-Linux  targets:
RECON 2010 with Igor Skochinsky: Reverse Engineering for 
PC Reversers: 
http://hexblog.com/files/recon%202010%20Skochinsky.pdf
JTAG Explained: https://blog.senr.io/blog/jtag-explained
https://www.blackhat.com/presentations/bh-europe-
04/bh-eu-04-dehaas/bh-eu-04-dehaas.pdf
https://beckus.github.io/qemu_stm32/ (among others)
Linux targets:
eLinux.org – Fucking Gigantic wiki about embedded Linux. 
linux-mips.org – Linux on MIPS 
72
Thank you
Keep on hacking.
73