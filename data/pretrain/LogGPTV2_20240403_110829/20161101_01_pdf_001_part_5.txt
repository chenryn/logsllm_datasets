 -> Seq Scan on p_201201 p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 -> Seq Scan on p_201202 p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 -> Seq Scan on p_201203 p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 -> Seq Scan on p_201204 p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 -> Seq Scan on p_201205 p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 -> Seq Scan on p_201206 p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 -> Seq Scan on p_201207 p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 -> Seq Scan on p_201208 p (cost=0.00..34.45 rows=8 width=20)
Partition
 Filter: (logtime = now())
 -> Seq Scan on p_201209 p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 -> Seq Scan on p_201210 p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 -> Seq Scan on p_201211 p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 -> Seq Scan on p_201212 p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 -> Seq Scan on p_default p (cost=0.00..34.45 rows=8 width=20)
 Filter: (logtime = now())
 (30 rows)
 函数稳定性
 Thinking PostgreSQL Function's Volatility Categories
 http://blog.163.com/digoal@126/blog/static/163877040201151011105494/
Partition
 分区表使用注意事项
 尽量将分区功能移至应用端代码中.
 constraint_exclusion = partition
 WHERE条件带有分区字段作为过滤条件时, 传入的参数必须使用constant才能获得良好的
执行计划
 简化分区规则, 分区字段上使用简单的b-tree索引, 尽量避免函数索引.
 使用数据库分区的潜在问题
 CPU开销(触发器或rule, 硬解析)
 PostgreSQL partition table's arithmetic tuning example
 http://blog.163.com/digoal@126/blog/static/1638770402011210114036419/
Foreign Data
 Foreign data wrapper
 A foreign data wrapper is a library that can communicate with an external data source, hiding
the details of connecting to the data source and fetching data from it.
 There is a foreign data wrapper available as a contrib module, which can read plain data files
residing on the server.
 Other kind of foreign data wrappers might be found as third party products.
Foreign Data
TABLE
Foreign Foreign Foreign Foreign Foreign Foreign
Table(s) Table(s) Table(s) Table(s) Table(s) Table(s) DEFINE
AUTH
User User User User User
NOT NEED
Mapping(s) Mapping(s) Mapping(s) Mapping(s) Mapping(s) INFO
Conn
Server(s) Server(s) Server(s) Server(s) Server(s) Server(s) INFO
API
FDW FDW FDW FDW FDW FDW(s)
External
File Oracle MySQL PostgreSQL Redis Others
Data
Source
Foreign Data
 PostgreSQL Foreign Table - pgsql_fdw
 http://blog.163.com/digoal@126/blog/static/163877040201231514057303/
 PostgreSQL Foreign Table - oracle_fdw 1
 http://blog.163.com/digoal@126/blog/static/163877040201181505331588/
 PostgreSQL Foreign Table - oracle_fdw 2
 http://blog.163.com/digoal@126/blog/static/16387704020118151162340/
 PostgreSQL Foreign Table - oracle_fdw 3
 http://blog.163.com/digoal@126/blog/static/16387704020118951953408/
 PostgreSQL Foreign Table - file_fdw
 http://blog.163.com/digoal@126/blog/static/163877040201141641148311/
 PostgreSQL Foreign Table - redis_fdw
 http://blog.163.com/digoal@126/blog/static/16387704020119181188247/
 PostgreSQL Foreign Table - mysql_fdw 1
 http://blog.163.com/digoal@126/blog/static/1638770402011111233524987/
 PostgreSQL Foreign Table - mysql_fdw 2
 http://blog.163.com/digoal@126/blog/static/16387704020121108551698/
DML
 INSERT
 UPDATE
 DELETE
 一个事务最大2^32条SQL(因为cmin,cmax的长度是4Bytes)
 PostgreSQL一个事务中可以包含DML, DDL, DCL.
 除了以下
 create tablespace
 create database
 使用concurrently并行创建索引
 其他未尽情况略
 (Oracle执行DDL前自动将前面的未提交的事务提交,所以Oracle不支持在事务中
执行DDL语句)
Query
 JOIN
 ALIAS
 Table as Function's Return data type
 GROUP BY [ HAVING ]
 DISTINCT
 COMBINING QUERY
 SORT
 LIMIT [ OFFSET ]
 WITH
JOIN
 T1 CROSS JOIN T2 ( T1 INNER JOIN T2 ON TRUE )
 T1 { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2 ON boolean_expression
 T1 { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2 USING ( join column list )
 T1 NATURAL { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2
 The words INNER and OUTER are optional in all forms. INNER is the default; LEFT, RIGHT,
and FULL imply an outer join.
JOIN
 CROSS JOIN 产生笛卡尔积
 因为关联的两个表有两列同名同类型同长度, 所以以下三种写法等同
JOIN
 左或右连接, 不满足条件的右或左表的值  全关联,不满足条件的值都置空
置空
ALIAS
 table alias:
 FROM table_reference AS alias
 FROM table_reference alias
 colum alias:
 SELECT expression [ [ AS ] output_name ]
 subquery alias:
 FROM (SELECT * FROM table1) AS alias_name
Table as Function's Return
data type
 return table's row type
 create table t1 (id int,name text,crt_time timestamp(0));
 create or replace function f_t1 (i_id int) returns setof t1 as $$
 declare
 begin
 return query select * from t1 where id=i_id;
 return;
 end;
 $$ language plpgsql;
 insert into t1 values(1,'digoal',now());
 insert into t1 values(1,'DIGOAL',now());
 select * from f_t1(1);
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
 1 | DIGOAL | 2012-04-26 08:15:15
Table as Function's Return
data type
 return composite type
 create type type1 as (id int,name text,crt_time timestamp(0));
 create or replace function f_type1 (i_id int) returns setof type1 as $$
 declare
 begin
 return query select * from t1 where id=i_id;
 return;
 end;
 $$ language plpgsql;
 select * from f_type1(1);
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
 1 | DIGOAL | 2012-04-26 08:15:15
Table as Function's Return
data type
 return record
 create or replace function f_record1 (i_id int) returns setof record as $$
 declare
 begin
 return query select * from t1 where id=i_id;
 return;
 end;
 $$ language plpgsql;
 select * from f_record1(1) as (id int,name text,crt_time timestamp(0));
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
 1 | DIGOAL | 2012-04-26 08:15:15
DISTINCT
 SELECT DISTINCT select_list ... (NULL在DISTINCT [ON] 中视为相等)
 postgres=# select * from t1 ;
 id | name | crt_time
 1 | digoal | 2012-04-26 08:15:09
 1 | DIGOAL | 2012-04-26 08:15:15
 postgres=# select distinct id from t1;
 id
 1
 SELECT DISTINCT ON (expression [, expression ...]) select_list ...
 Here expression is an arbitrary value expression that is evaluated for all rows. A
set of rows for which all the expressions are equal are considered duplicates, and
only the first row of the set is kept in the output. Note that the "first row" of a set is
unpredictable unless the query is sorted on enough columns to guarantee a unique
ordering of the rows arriving at the DISTINCT filter. (DISTINCT ON processing
occurs after ORDER BY sorting.)
DISTINCT
 postgres=# select distinct on (id) id,name,crt_time from t1 ;
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
 postgres=# select distinct on (id) id,name,crt_time from t1 order by crt_time;
 ERROR: SELECT DISTINCT ON expressions must match initial ORDER BY expressions
 LINE 1: select distinct on (id) id,name,crt_time from t1 order by cr...
 ^
 postgres=# select distinct on (id) id,name,crt_time from t1 order by id;
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
DISTINCT
 postgres=# select distinct on (id) id,name,crt_time from t1 order by id,crt_time;
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
 postgres=# select distinct on (id) id,name,crt_time from t1 order by id,crt_time desc;
 id | name | crt_time
 ----+--------+---------------------
 1 | DIGOAL | 2012-04-26 08:15:15
DISTINCT
 postgres=# select distinct on (id,name) id,name,crt_time from t1 order by id,crt_time desc;
 ERROR: SELECT DISTINCT ON expressions must match initial ORDER BY expressions
 LINE 1: select distinct on (id,name) id,name,crt_time from t1 order ...
 ^
 postgres=# select distinct on (id,name) id,name,crt_time from t1 order by id,name,crt_time
desc;
 id | name | crt_time
 ----+--------+---------------------
 1 | DIGOAL | 2012-04-26 08:15:15
 1 | digoal | 2012-04-26 08:15:09
DISTINCT
 使用DISTINCT ON实现前面章节用窗口函数实现的取第一名的功能
 postgres=# CREATE TABLE window_test(id int, name text, subject text, score numeric);
 postgres=# INSERT INTO window_test VALUES (1,'digoal','数学',99.5), (2,'digoal','语文
',89.5),
 (3,'digoal','英语',79.5), (4,'digoal','物理',99.5), (5,'digoal','化学',98.5),
 (6,'刘德华','数学',89.5), (7,'刘德华','语文',99.5), (8,'刘德华','英语',79.5),
 (9,'刘德华','物理',89.5), (10,'刘德华','化学',69.5),
 (11,'张学友','数学',89.5), (12,'张学友','语文',91.5), (13,'张学友','英语',92.5),
 (14,'张学友','物理',93.5), (15,'张学友','化学',94.5);
 -- 取出每门课程的第一名.
 postgres=# select distinct on (subject) id,name,subject,score from window_test order by
subject,score desc;
DISTINCT
 id | name | subject | score
 ----+--------+---------+-------
 5 | digoal | 化学 | 98.5
 1 | digoal | 数学 | 99.5
 4 | digoal | 物理 | 99.5
 13 | 张学友 | 英语 | 92.5
 7 | 刘德华 | 语文 | 99.5
 (5 rows)
 与使用窗口函数得到的结果一致, 并且写法更简洁.
NULL IN ORDER BY and
DISTINCT
 order by和distinct处理NULLs时视为相等  postgres=# select 1 where null is null;
 postgres=# select 1 where null=null;  ?column?
 ?column?  ----------
 ----------  1
 (0 rows)  (1 row)
 postgres=# select 1 where null <> null;  postgres=# select distinct name from t1;
 ?column?  name
 ----------  ------
 (0 rows) 
 (1 row)
NULL IN ORDER BY and
DISTINCT
 NULL视为相等  如果NULL视为不相等, 结果应该是无序的.
 postgres=# select * from t1 order by name,id;  postgres=# select * from t1 order by
crt_time,id;
 id | name | crt_time
 ----+------+---------------------  id | name | crt_time
 1 | | 2012-04-26 09:29:23  ----+------+---------------------
 2 | | 2012-04-26 09:29:26  5 | | 2012-04-26 08:30:04
 3 | | 2012-04-26 09:29:28  1 | | 2012-04-26 09:29:23
 4 | | 2012-04-26 09:29:32  2 | | 2012-04-26 09:29:26
 5 | | 2012-04-26 08:30:04  3 | | 2012-04-26 09:29:28
 4 | | 2012-04-26 09:29:32
COMBINING QUERY
 query1 UNION [ALL] query2
 query1 INTERSECT [ALL] query2