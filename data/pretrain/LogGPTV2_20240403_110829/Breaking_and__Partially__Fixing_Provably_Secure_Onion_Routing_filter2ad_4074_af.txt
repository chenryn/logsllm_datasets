[28] P. H. Potgieter. An introduction to new media for South African students.
2009.
minx. In PETS, 2008.
[29] E. Shimshock, M. Staats, and N. Hopper. Breaking and provably ﬁxing
[30] F. Tschorsch. Onions in the Queue: An Integral Networking Perspective
on Anonymous Communication Systems. PhD thesis, Humboldt-Universitt
zu Berlin, 2016.
APPENDIX
A. Deﬁnition Privacy Notions
1) Game: The model uses r = (u, u(cid:48), m, aux) to denote
the communication of message m from sender u to receiver
u(cid:48) with auxiliary information aux. Communications that are
processed together are grouped in batches r. The adversary
decides on two scenarios. Those are a sequence of pairs of
batches. The challenger veriﬁes every pair of batches r0, r1
regarding the analyzed privacy notion, i.e. they differ only in
private information. If the check succeeds, the challenger picks
a random b and simulates the protocol for the corresponding
batch rb. The adversary can issue more batches and ﬁnally
makes a guess g for b. If the adversary cannot guess g = b
correctly with a more than negligibly better probability than
2, the notion is achieved as nothing private can be learned.
1
2) Important Notions: We always consider the checked
batches r0, r1, which for b ∈ {0, 1} include the communica-
tions rbj = (ubj , u(cid:48)
, mbj , auxbj ) with j ∈ {1, . . . l}.
0j
[23]
M O, iff for all j ∈ {1, . . . l}: r1j = (u0j , u(cid:48)
For M O two batches may only differ in the messages:
Deﬁnition 7 (M O i. a. w. [23]): The batches are valid for
, m1j, aux0j ).
For SM L only the senders may differ and further each
sender has to send the same number of messages in the
two batches. To deﬁne this,
formally deﬁnes Qb.
Here we use a less formal description: Qb := {(u, n) |
u sends n messages in rb}.
SM L, iff for all j ∈ {1, . . . l} : r1j = (u1j, u(cid:48)
and Q0 = Q1.
u(cid:48) receives n messages in rb}.
RM L, iff for all j ∈ {1, . . . l} : r1j = (u0j , u(cid:48)
and Q(cid:48)
Deﬁnition 8 (SM L i. a. w. [23]): The batches are valid for
, m0j , aux0j )
:= {(u(cid:48), n) |
Deﬁnition 9 (RM L i. a. w. [23]): The batches are valid for
, m0j , aux0j )
RM L is similar, but for receivers: Q(cid:48)
0 = Q(cid:48)
1.
1j
0j
b
bj
Fig. 6. Batches in MSR illustrated
SRL allows only sender and receiver to differ and has the
complex requirement MSR. MSR requires that the batches
only differ in two senders (A, C) and two receivers (B, D). In
the case b = 0: A must communicate with B, and C with D;
in the case b = 1: A with D, and C with B. The order of the
two communications in the batch is chosen randomly by the
challenger. Before, between and after those communications
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:48 UTC from IEEE Xplore.  Restrictions apply. 
181
A      BA      DC      DC      BA      BA      DC      DC      Beither this orderor this orderbatch 0batch 1multiple communications that are equal in both batches can
occur. The possible communications are depicted in Fig. 6.
SRL, iff for all j ∈ {1, . . . l} : r1j = (u1j, u(cid:48)
and MSR.
Deﬁnition 10 (SRL i.a. w. [23]): The batches are valid for
, m0j , aux0j )
3) Corruption: User corruption is realized by returning
internal information of the user (keys, current state etc.). Xc0
ensures that the adversary is not allowed corruption. The other
corruption options add requirements for the two batches:
Deﬁnition 11 (Corruption): Let ˆU be the set of all corrupted
1j
users. The following options are met, iff:
Xs : ∀(u, u(cid:48), m, aux) ∈ r0 ∪ r1 : u (cid:54)∈ ˆU
Xe : ∀ˆu ∈ ˆU : r0i = (ˆu,
, m, ) =⇒ r1i = (ˆu,
, m, )
∧ r0i = ( , ˆu, m, ) =⇒ r1i = ( , ˆu, m, )
B. Proof of new Properties
of
of
the
Our proof follows in large parts the argumentation from [8].
For UC-realization, we show that every attack on the real world
protocol Π can be simulated by an ideal world attack without
the environment being able to distinguish those.
1) Constructing S: S interacts with the ideal functionality
F as the ideal world adversary, and simulates the real-world
honest parties for the real world adversary A. All outputs A
does are forwarded to the environment by S.
First, S carries out the trusted set-up stage: it generates public
and private key pairs for all the real-world honest parties. S
then sends the respective public keys to A and receives the
real world corrupted parties public keys from A.
r-list
tuples
consisting
The simulator S maintains two internal data structures:
• The
form
list
(rtemp, nextRelay, temp). Each entry in this
corresponds to a stage in processing an onion that belongs
to a communication of an honest sender. By stage, we
mean that the next action to this onion is adversarial
(i.e. it is sent over a link or processed by an adversarial
router).
Case
“start belongs
• The O-list containing onions sent by corrupted senders
together with the information about the communication
(onion, nextRelay, inf ormation).
a) S’s behavior on a message from F:
In case the
received output belongs to an adversarial sender’s commu-
nication14:
I:
to onion from PS with
sid, Pr, m, n,P”. This is just the result of Ss reaction to an
onion from A that was not the protocol-conform processing of
an honest sender’s communication (Case VIII). S does nothing.
Case II: any output together with “temp belongs to onion
from PS with sid, Pr, m, n,P” for temp (cid:54)∈ {start, end}. This
means an honest relay is done processing an onion received
from A that was not the protocol-conform processing of
an honest sender’s communication (processing that follows
Case VII). S ﬁnds (onion, nextRelay, inf ormation) with
this inputs as inf ormation in the O-list (notice that there has
14S knows whether they belong to an adversarial sender from the output it
gets
to be such an entry) and sends the onion onion to nextRelay if
it is an adversarial one, or it sends onion, as if it is transmitted,
to the A’s party representing the link between the currently
processing honest relay and the honest nextRelay.
Case III: any output together with “end belongs to onion
from PS with sid, Pr, m, n,P”. This is just the result of S’s
reaction to an onion from A. S does nothing.
In case the received output belongs to an honest sender’s
if
to Poj
Case V:
“Onion temp from Poi
communication:
Case IV: “Onion temp from Poi routed through () to Poi+1”.
In this case S needs to make it look as though an onion
was passed from the honest party Poi
to the honest party
Poi+1: S picks pseudo-randomly (with temp as seed) a path
Prdm, of valid length that includes the sequence of Poi to
Poi+1 starting at node j, and a message mrdm. S calculates
(O1, . . . , On) ← FormOnion(mrdm,Prdm, (P K)Prdm) and
sends the onion Oj+1 to A’s party representing the link between
the honest relays as if it was sent from Poi to Poi+1. S stores
(Oj+1,Poi+1,temp) on the r-list.
routed through
(Poi+1, . . . , Poj−1 ) to Poj ”. S picks pseudo-randomly (with
temp as seed) a path Prdm of valid length that includes
the k-th node
the sequence of Poi
and a message mrdm and calculates (O1, . . . , On) ←
FormOnion(mrdm,Prdm, (P K)Prdm) and sends the onion
it came from Poi. S stores
Ok+1
(Ok+j−i, Poj , temp) on the r-list.
Case VI: “Onion from Poi with message m for Pr routed
through (Poi+1, . . . , Pon )”. S picks randomly a path Prdm of
valid length that includes the sequence of Poi to Pr at the
end (staring at the k-th node) and calculates (O1, . . . , On) ←
FormOnion(mt,Prdm, (P K)Prdm) and sends the onion Ok+1
to Poi+1, as if it came from Poi.
b) S’s behavior on a message from A: S, as real world
honest party Pi, received an onion O from A as adversarial
player Pa.
to Poi+1, as
starting at
is the recipient and O(cid:48)
Case VII: (O, Pi, temp) is on the r-list for some temp. In
this case O is the protocol-conform processing of an onion
from a communication of an honest sender. S calculates
ProcOnion(SK(Pi), O, Pi). If it returns a fail (O is a replay
that is detected and dropped by Π), S does nothing. Otherwise,
S sends the message (Deliver Message, temp) to F.
S calculates ProcOnion(SK(Pi), O, Pi) = (O(cid:48), P (cid:48)).
Case VIII. (O, Pi, temp) is not on the r-list for any temp.
(a) P (cid:48) =⊥: Poj
is a mes-
sage or a fail
the message
(P rocessN ewOnion, Pi, O(cid:48), n, ()) to F on Pa’s behalf and
as A already delivered this message to the honest party sends
(Deliver Message, temp) for the belonging temp (Notice that
S knows which temp belongs to this communication as it is
started at an adversarial party Pa).
(b) P (cid:48) (cid:54)=⊥: S picks a message m ∈ M. S sends on Pa’s
behalf the message, P rocess N ew Onion(P (cid:48), m, n, ()) from
Pi and Deliver M essage(temp) for the belonging temp
(Notice that S knows the temp as in case (a)) to F. S adds
the entry (O(cid:48), P (cid:48), (Pa, sid, P (cid:48), m, n, ())) to the O-list.
symbol. S thus
sends
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:48 UTC from IEEE Xplore.  Restrictions apply. 
182
Hybrid H1
2) Indistinguishability: Hybrid H0. This machine sets up
the keys for the honest parties (so it has their secret keys).
Then it interacts with the environment and A on behalf of
the honest parties. It invokes the real protocol for the honest
parties in interacting with A.
H0 ≈I H1
k+i with (O(cid:48)
1. In this hybrid, for one communication the onion
layers from its honest sender to the next honest node (relay
or receiver) are replaced with random onion layers embedding
the same path. More precisely, this machine acts like H0
except that the consecutive onion layers O1, O2, . . . , Oj from
an honest sender P0 to the next honest node Pj are replaced
n) ←
with ¯O1, . . . , ¯Oj where ¯Oi = O(cid:48)
FormOnion(mrdm,Prdm, (P K)Prdm) where mrdm is a ran-
dom message, P a random path that includes the sequence
from P0 to Pj starting at the k-th node. H1
1 keeps a ¯O-list and
stores ( ¯Oj, Pj, ProcOnion(SKPj , Oj, Pj)) on it. If an onion
˜O is sent to Pj, the machine tests if processing results in a fail
(replay detected and dropped). If it does not, H1
1 compares ˜O
to all ¯Oj on its ¯O-list where the second entry is Pj. If it ﬁnds
a match, the belonging ProcOnion(SKPj , Oj, Pj) is used as
processing result of Pj. Otherwise, ProcOnion(SKPj , ˜O, Pj)
is used.
1, . . . , O(cid:48)
1. The environment gets notiﬁed when an honest
party receives an onion layer and inputs when this party is
done. As we just exchange onion layers by others, the behavior
to the environment is indistinguishable for both machines.
A observes the onion layers after P0 and if it sends an
onion to Pj the result of the processing after the honest node.
Depending on the behavior of A three cases occur: A drops the
onion belonging to this communication before Pj, A behaves
protocol-conform and sends the expected onion to Pj or A
modiﬁes the expected onion before sending it to Pj. Notice
that dropping the onion leaves the adversary with less output.
Thus, we can focus on the other cases.
We assume there exists a distinguisher D between H0 and
H1
1 and construct a successful attack on LU:
The attack receives key and name of the honest relay and
uses the input of the replaced communication as choice for the
challenge, where it replaces the name of the ﬁrst honest relay
with the one that it got from the challenger15. For the other
relays the attack decides on the keys as A (for corrupted) and
the protocol (for honest) does. It receives ( ˜O, ProcOnion(Oj))
from the challenger. The attack uses D. For D it simulates
all communications except the one chosen for the challenge,
with the oracles and knowledge of the protocol and keys.
(This includes that for bit-identical onions for which the oracle
cannot be used, depending on whether the protocol has replay
protection ProcOnion(Oj) is reused or the onion is dropped.)
For simulating the challenge communication the attack hands
˜O to A as soon as D instructs to do so. To simulate further for
D it uses ˜O to calculate the later layers and does any actions
A does on the onion.
A either sends the honest processing of ˜O to the challenge
router or A modiﬁes it to f ( ˜O). In the ﬁrst case, the attack
15As both honest nodes are randomly drawn this does not change the success
Hybrid H∗
simulates corresponding to ProcOnion(Oj). In the second
case, f ( ˜O) is given to the oracle and the simulation is done
for the returned ProcOnion(f ( ˜O)).
Thus, either the challenger chose b = 0 and the attack
behaves like H0 under D; or the challenger chose b = 1 and
1 under D. The attack outputs the
the attack behaves like H1
same bit as D does for its simulation to win with the same
advantage as D can distinguish the hybrids.
1, . . . , O(cid:48)
H1
1 ≈I H∗
Hybrid H1
1. In this hybrid, for one communication, for
which they had not been replaced, onion layers from an honest
sender to the next honest node are replaced with a random
onion sharing this path.
indistinguishability (H0 ≈I H1
1. Analogous above. Apply argumentation of
1) for every replaced subpath.16
2. In this hybrid, for one communication (and
all its replays) for which in the adversarial processing no
modiﬁcation occurred17 onion layers between two consecutive
honest relays (the second might be the receiver) are replaced
with random onion layers embedding the same path. More
precisely, this machine acts like H∗
1 except that the processing
of Oj (and, if no replay protection, the processing result of all
replays of Oj); i.e. the consecutive onion layers Oj+1, . . . , Oj(cid:48)
from a communication of an honest sender, starting at the
next honest node Pj to the next following honest node Pj(cid:48),
are replaced with ¯Oj+1, . . . , ¯Oj(cid:48). Thereby, ¯Oj+1 = O(cid:48)
n) ← FormOnion(mrdm,Prdm, (P K)Prdm)
j+k+1
with (O(cid:48)
where mrdm is a random message, P a random path that