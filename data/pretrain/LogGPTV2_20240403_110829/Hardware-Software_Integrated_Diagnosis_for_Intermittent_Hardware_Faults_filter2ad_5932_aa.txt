title:Hardware-Software Integrated Diagnosis for Intermittent Hardware Faults
author:Majid Dadashi and
Layali Rashid and
Karthik Pattabiraman and
Sathish Gopalakrishnan
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Hardware-Software Integrated Diagnosis for Intermittent Hardware Faults
Majid Dadashi, Layali Rashid, Karthik Pattabiraman and Sathish Gopalakrishnan
Department of Electrical and Computer Engineering,
University of British Columbia (UBC), Vancouver
{mdadashi, lrashid, karthikp, sathish}@ece.ubc.ca
repair, the diagnosis should be ﬁne-grained at the granularity
of individual resources in a microprocessor, so that
the
processor can be deconﬁgured around the faulty resource
after diagnosis [7].
Abstract—Intermittent hardware faults are hard to diagnose
as they occur non-deterministically at
the same location.
Hardware-only diagnosis techniques incur signiﬁcant power
and area overheads. On the other hand, software-only diagnosis
techniques have low power and area overheads, but have
limited visibility into many micro-architectural structures and
hence cannot diagnose faults in them.
To overcome these limitations, we propose a hardware-
software integrated framework for diagnosing intermittent
faults. The hardware part of our framework, called SCRIBE
continuously records the resource usage information of every
instruction in the processor, and exposes it to the software
layer. SCRIBE incurs a performance overhead of 12% and
power overhead of 9%, on average. The software part of our
framework is called SIED and uses backtracking from the
program’s crash dump to ﬁnd the faulty micro-architectural
resource. Our technique has an average accuracy of 84% in
diagnosing the faulty resource, which in turn enables ﬁne-
grained deconﬁguration with less than 2% performance loss
after deconﬁguration.
Keywords: Intermittent Faults, Backtracking, Dy-
namic Dependence Graphs, Hardware/Software Co-
design
I. INTRODUCTION
CMOS scaling has exacerbated the unreliability of Silicon
devices and made them more susceptible to different kinds
of faults [1]. The common kinds of hardware faults are
transient and permanent. However, a third category of faults,
namely intermittent faults has gained prominence [2]. A
recent study of commodity hardware has found that inter-
mittent faults were responsible for at least 39% of computer
system failures due to hardware errors [3]. Unlike transient
faults, intermittent faults are not one-off events, and occur
repeatedly at the same location. However, unlike permanent
faults, they appear non-deterministically, and only in certain
circumstances.
Diagnosis is an essential operation for a fault-tolerant sys-
tem. In this paper, we focus on diagnosing intermittent faults
that occur in the processor. Intermittent faults are caused
by marginal or faulty micro-architectural components, and
hence diagnosing such faults is important to isolate the faulty
resource [4], [5], [6]. Components can experience intermit-
tent faults either due to design and manufacturing errors, or
due to aging and temperature effects that arise in operational
settings [2]. Therefore, the diagnosis process should be run
throughout the life-time of the processor rather than only at
design validation time. This makes it imperative to design
a diagnosis scheme that has low online performance and
power overheads. Further, to retain high performance after
Diagnosis can be carried out
in either hardware or
software. Hardware-level diagnosis has the advantage that
it can be done without software changes. Unfortunately,
performing diagnosis entirely in hardware incurs signiﬁcant
power and area overheads, as diagnosis algorithms are often
complex and require specialized hardware to implement. On
the other hand, software-based diagnosis techniques only
incur power and performance overheads during the diag-
nosis process, and have zero area overheads. Unfortunately,
software techniques have limited visibility into many micro-
architectural structures (e.g., the reorder buffer) and hence
cannot diagnose faults in them. Further, software techniques
cannot identify the resources consumed by an instruction as
it moves through the pipeline, which is essential for ﬁne-
grained diagnosis.
In this paper, we propose a hardware-software integrated
technique for diagnosing intermittent hardware errors in
multi-core processors. As mentioned above,
intermittent
faults are non-deterministic and may not be easily repro-
duced through posteriori testing. Therefore, the hardware
portion of our technique continuously records the micro-
architectural resources used by an instruction as the in-
struction moves through the processor’s pipeline, and stores
this information in a log that is exposed to the software
portion of the technique. We call
the hardware portion
SCRIBE. When the program fails (due to an intermittent
fault), the software portion of our technique uses the log to
identify which resource of the microprocessor was subject
to the intermittent fault that caused the program to fail.
The software portion runs on a separate core and uses a
combination of deterministic replay and backtracking from
the failure point, to identify the faulty component. We call
the software portion of our technique SIED, which stands for
Software-based Intermittent Error Diagnosis. SCRIBE and
SIED work in tandem to achieve intermittent fault diagnosis.
Prior work on diagnosis [5] has either assumed the pres-
ence of ﬁne-grained checkers such as the DIVA checker [8],
or has assumed that the fault occurs deterministically [9],
which is true for permanent faults, but not intermittent faults.
In contrast, our technique does not require any ﬁne-grained
checkers in the processor nor does it rely upon determinism
of the fault, making it well suited for intermittent faults.
Other papers [10], [11] have proposed diagnosis mechanisms
for post-Silicon validation. However, these approaches target
978-1-4799-2233-8/14 $31.00 © 2014 Crown Copyright
978-1-4799-2233-8/14 $31.00 © 2014 Crown Copyright
978-1-4799-2233-8/14 $31.00 © 2014 Crown Copyright
DOI 10.1109/DSN.2014.1
DOI 10.1109/DSN.2014.1
DOI 10.1109/DSN.2014.1
363
363
363
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:27:50 UTC from IEEE Xplore.  Restrictions apply. 
design faults and not operational faults, which is our focus.
To the best of our knowledge, we are the ﬁrst to propose
a general purpose diagnosis mechanism for in-ﬁeld, inter-
mittent faults in processors, with minimal changes to the
hardware.
The main contributions of the paper are as follows:
i) Enumerate the challenges associated with intermittent
fault diagnosis and explain why a hybrid hardware-
software scheme is needed for diagnosis.
ii) Propose SCRIBE,
an efﬁcient micro-architectural
mechanism to record instruction information as it
moves through the pipeline, and expose this information
to the software layer.
iii) Propose SIED, a software-based diagnosis algorithm
that leverages the information provided by SCRIBE to
isolate the faulty micro-architectural resource through
backtracking from the failure point,
iv) Conduct an end-to-end evaluation of the hybrid ap-
proach in terms of diagnosis accuracy using fault in-
jection experiments at the micro-architectural level.
v) Evaluate the performance and power overheads in-
curred by SCRIBE during fault-free operation. Also,
evaluate the overhead incurred by the processor after
it is deconﬁgured upon a successful diagnosis by our
approach.
Our experiments on the SPEC2006 benchmarks show that
SCRIBE incurs an average performance overhead of 11.5%,
and a power consumption overhead of 9.3%, for a medium-
width processor. Further,
the end-to-end accuracy of di-
agnosis is 84% on average across different resources of
the processor (varies from 71% to 95% depending on the
pipeline stage in which the fault occurs). We also show that
with such ﬁne-grained diagnosis, only 1.6% performance
overhead will be incurred by the processor after deconﬁgu-
ration, on average.
II. BACKGROUND
In this section, we ﬁrst explain what are intermittent faults,
and their causes. We then explain why resource level, online
diagnosis is needed for multi-core processors. Finally, we
explain the Dynamic Dependence Graph (DDG), which is
used in our paper for diagnosis.
A. Intermittent faults: Deﬁnition and Causes
Deﬁnition We deﬁne an intermittent fault as one that
appears non-deterministically at the same hardware location,
and lasts for one or more (but ﬁnite number of) clock
cycles. The main characteristic of intermittent faults that
distinguishes them from transient faults is that they occur
repeatedly at
the same location, and are caused by an
underlying hardware defect rather than a one-time event
such as a particle strike. However, unlike permanent faults,
intermittent faults appear non-deterministically, and only
under certain conditions.
Causes: The major cause of intermittent faults is device
wearout, or the tendency of solid-state devices to degrade
with time and stress. Wearout can be accelerated by ag-
gressive transistor scaling which makes processors more
susceptible to extreme operating condition such as voltage
and temperature ﬂuctuations [12], [13]. In-progress wearout
364364364
faults are often intermittent as they depend on the operating
conditions and the circuit inputs. In the long term, such faults
may eventually lead to permanent defects. Another cause
of intermittent faults is manufacturing defects that escape
VLSI testing [14]. Often, deterministic defects are ﬂushed
out during such testing and the ones that escape are non-
deterministic defects, which emerge as intermittent faults.
Finally, design defects can also lead to intermittent faults,
especially if the defect is triggered under rare scenarios or
conditions [15]. However, we do not consider intermittent
faults due to design defects in this paper.
B. Why resource-level, online diagnosis ?
Our goal is to isolate individual micro-architectural re-
sources and units that are responsible for the intermittent
fault. Fine-grained diagnosis implicitly assumes that these
resources can be deconﬁgured dynamically in order to
prevent the fault from occurring again. Other work has also
made similar assumptions [5], [9], [6]. While it may be
desirable to go even further and isolate individual circuits or
even transistors that are faulty, it is often difﬁcult to perform
deconﬁguration at that level. Therefore, we conﬁne ourselves
to performing diagnosis at the resource level.
Another question that arises in ﬁne-grained diagnosis is
why not simply avoid using the faulty core instead of de-
conﬁguring the faulty resource. This would be a simple and
cost-effective solution. However, this leads to vastly lower
performance in a high-performance multi-core processor, as
prior work has shown [7], [6]. Finally, the need for online
diagnosis stems from the fact that taking the entire processor
or chip ofﬂine to perform diagnosis is wasteful, especially
as the rate of intermittent faults increases as future trends
indicate [14]. Further, taking the chip ofﬂine is not feasible
for safety-critical systems. Our goal is to perform online
diagnosis of intermittent faults.
C. Dynamic Dependency Graphs
A dynamic dependency graph (DDG) is a representation
of data ﬂow in a program [16]. It is a directed acyclic graph
where graph nodes or vertices represent values produced by
dynamic instructions during program execution. In effect,
each node corresponds to a dynamic instance of a value-
producing program instruction. Dependencies among nodes
result in edges in the DDG. In the DDG, there is an edge
from node N1 (corresponding to instruction I1) to node N2
(corresponding to instruction I2), if and only if I2 reads the
value written by I1 (instructions that do not produce any
values correspond to nodes with no outgoing edges).
III. APPROACH
This section ﬁrst presents the fault model we consider. It
then presents the challenges of intermittent fault diagnosis.
Finally, it presents an overview of our approach and how it
addresses the challenges.
A. Fault Model
As mentioned in Section II-A, intermittent faults are faults
that last for ﬁnite number of cycles at the same micro-
architectural location. We consider intermittent faults that
occur in processors. In particular, we consider faults that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:27:50 UTC from IEEE Xplore.  Restrictions apply. 
occur in functional units, reorder buffer, instruction fetch
queue, load/store queue and reservation station entries. We
assume that caches and register ﬁles are protected using ECC
or parity and therefore do not experience software visible
faults. We also assume that the processor’s control logic is
immune to errors, as this is a relatively small portion of
the chip [17]. Finally, we assume that a component may be
affected by at most one intermittent fault at any time, and
that the fault affects a single bit in the component (stuck-at
zero/one), lasting for several cycles.
B. Challenges
tent fault diagnosis method needs to overcome.
In this section, we outline the challenges that an intermit-
Non-determinism: Since intermittent faults occur non-
deterministically, re-execution of a program that has failed
as a result of an intermittent fault, often results in a dif-
ferent event sequence than the original execution. In other
words, the sequence of events that lead to a failure is not
(necessarily) repeatable under intermittent faults.
Overheads: An intermittent fault diagnosis mechanism
should incur as low overhead as possible in terms of
performance, area and power, especially during fault-free
operation, which is likely to be the common case.
Software Layer Visibility: Software diagnosis algorithms
suffer from limited visibility into the hardware layer. In
other words, software-only approaches are not aware of what
resources an instruction has used since being fetched until
retiring from the pipeline (the only inferable information
from an instruction is the type of functional unit it has used).
No information about the faulty instructions: To ﬁnd
the faulty resource, the diagnosis algorithm needs to have
information about the instructions that have been affected
by the intermittent fault in order that the search domain of
the faulty resource can be narrowed down to resources used
by these instructions. One way to obtain this information
is to log the value of the destination of every instruction
at runtime, and to compare its value with that of a fault-
free run (more details in Section III-C). However, logging
the value of every executed instruction in addition to its
resource information can result in prohibitive performance
overheads as we show in Section VI. Therefore, we need to
infer this information from the failure log instead.
C. Overview of our Approach
In this section, we present an overview of our approach
and how it addresses the challenges in section III-B.
We propose a hybrid hardware-software approach for
diagnosis of intermittent faults in processors. Our approach
consists of two parts. First, we propose a simple,
low-