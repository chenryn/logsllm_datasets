Apply as Filter Analyze 用当前选中的项作为过滤显示
Prepare a Filter Analyze 准备将当前选择项作为过滤器
将当前选择项的地址信息作为过滤设置。选中该选项以后，会生成一个显示过滤，
Conversation Filter - 用于显示当前包两个地址之间的会话(不分源目标地址)。(XXX - add a new
section describing this better.---作者似乎建议添加新章节详细描述)
STCP - 有待补充
Follow TCP Stream Analyze 浏览两个节点间的一个完整 TCP 流所有数据
Follow SLL Stream Analyze 同上，将 TCP 替换成 SSL 理解
-----
Copy/Summary(TEXT) - 将摘要字段复制到剪贴板。(以 tab 分开的文本)
Copy/Summary(CVS) - 将摘要字段复制到剪贴板，(CVS 格式,逗号分开)
Copy/As Filter - 以当前选择项，建立一个显示过滤器，复制到剪贴板
Copy/Bytes(Offset Hex
- 以 16 进制转储格式将包字节复制到剪贴板。
Text)
对应主菜
项目 描述
单项
Copy/Bytes(Offset
- 以 16 进制转储格式将包字节复制到剪贴板。不包括文本部分。
Text)
Copy/ Bytes (Printable
- 以 ASCII 码格式将包字节复制到剪贴板，包括非打印字符。
Text Only)
Copy/ Bytes (HEX 以 16 进制未分段列表数字方式将包字节复制到剪贴板，（an unpunctuated list
-
Stream) of hex digits 应该有专有名词，有兴趣的查一下）
Copy/ Bytes (Binary 以 raw binary 格式将包字节复制到剪贴板。数据在剪贴板以"MIME-type
-
Stream) application/octet-stream"存储，该功能在 GTK+1.x 环境下不支持
Export Selected Packet
File 与文件菜单同名项目功能一样。允许将 Raw packet 字节转换为二进制文件它
Bytes...
---
Decode As... Analyze 在两个解析之间建立或修改新关联(不知所云)
Print... File 打印包
Show Packet in New
View 在新窗口显示选中的包
Window
6.2.2. 包详情面板的弹出菜单
图 6.4. 包详情面板弹出上下文菜单项
下表介绍了包详情列表菜单项的功能描述，及其他可以提供该功能的主菜单
表 6.2. 包详情面板弹出上下文菜档项
对应的主
项目 描述
菜单
对应的主
项目 描述
菜单
Expand Subtrees View 展开当前选择的子树
Expand All View 展开捕捉文件的所有包的所有子树
Collapse All View 关闭包中所有已展开的子树
-----
Copy/Description - 复制选择字段显示的文本到剪贴板
Copy/AS Filter Edit 将选择项目作为显示过滤内容复制到剪贴板
Copy/Bytes(Offset 将包字节以 Hexdump-like 格式存储到剪贴板；类似于包列表面板中同名的命令，
-
Hex Text) 但是拷贝结果仅仅是树分支中被选中部分(包字节面板中被选中字节)
Copy/Bytes(Offset 以 Hexdump-linke 格式保存到剪贴，不包括文本部分。类似于包列表命令，不同之
-
Hex) 处在于此处仅拷贝树分支选中部分(包字节面板选中部分)
COPY/Bytes 以 ASCII 格式拷贝包字节，非打印字符除外；类似于包列表面板中同样的命令。不
-
(printable Text Only) 同点在于此处仅拷贝选择的树分支（包字符被选择部分）
Copy/Bytes(Hex j 以 unpunctuated list hex digits 形式保存到剪贴板，类似于包列表面板中的命
-
Stream) 令，不同之处在于仅复制选中子树部分(包字节面板选中部分)
以 raw binary 格式拷贝到剪贴板；类似于包列表面板中的命令，不同之处在于仅
Copy/Bytes(Binary 拷贝选中部分子树(包字节面板选中部分)。数据以
-
Stream) MIME-type“Application/octet-stream”存储在剪贴板.该功能在GTK+1.x下不可
用
Export Selected
File 同文件菜单中的同名项一样。导出 raw packet 字节为二进制文件。
Packet Bytes...
---
Apply as Filter analyze 将当前选择项作为过滤内容，并应用
Preapare a Filter Analyze 将当前选择项作为过滤内容，但不立即应用
Follow TCP Stream Analyze 追踪两个节点见，被选择包所属 TCP 流的完整数据
Follow SSL Stream Analyze 同上
-----
Wiki Protocol Page - 显示当前选择协议的对应 WIKI 网站协议参考页
Filter Field
- 显示当前过滤器的 WEB 参考
Reference
Protocol
- 如果协议字段被选中，点击该选项，打开属性对话框，选择对应协议的页面，???
Preferences...
-----
Decode As... Analyze 更改或应用两个解析器之间的关联(什么鸟意思？)
Resolve Name... View 对选择的包进行名称解析，不是指所有的包
Go to corresponding
Go 跳到当前选择包的相应包。
Packet ...
TNND,表格让人崩溃
6.3. 浏览时过滤包
Wireshark 有两种过滤语法：一种是捕捉包时使用，另一种是显示包时使用。本节介绍第二种过滤语法：显示过滤。
第一种过滤语法在第 4.8 节 “捕捉时过滤”提到
显示过滤可以隐藏一些你不感兴趣的包，让你可以集中注意力在你感兴趣的那些包上面。你可以用从以下几个方面选
择包:
• 协议
• 预设字段
• 字段值
• 字段值比较
• 。。。以及许多
根据协议类型选择数据报，只需要在 Filter框里输入你刚兴趣的协议，然后回车开始过滤。???显示了你输入 tcp 进
行过滤后的图。
图 6.5. 用 TCP 协议过滤
或许你没有注意到，上图显示的已经仅有 TCP 协议了（从图中可以看到 1-10 号包已经被隐藏）。因为包的编号是固定
不变的，所以第一个包显示的编号是 11。
注意
当你使用过滤时，所有的包依然保留在捕捉文件里。显示过滤只是更改捕捉文件的显示方式而非内容。
你只能对 Wireshark 可以识别的协议进行过滤。你也可以对解析器已经添加到树视图的字段进行过滤，但仅限于解析
器已经为字段加上了协议缩写的。在 Add Expression...对话框可以看到可用的字段列表.详见第 6.5 节 ““Filter
Expression/过滤表达式”对话框”
例如：想要限制包列表面板仅显示来自或指向 192.168.0.1 的包，可以使用 ip.addr==192.168.0.
注意
点击 Clear可以移除过滤
6.4. 建立显示过滤表达式
Wireshark 提供了简单而强大的过滤语法，你可以用它们建立复杂的过滤表达式。你可以比较包中的值，合并表达式
为多个指定表达式。本节介绍了相关操作。
提示
你可以在 Wireshark Wiki Display 页找到发现大量的显示过滤范例。
http://wiki.wireshark.org/DisplayFilters.
6.4.1. 显示过滤字段
包详情面板的每个字段都可以作为过滤使用。应用这些作为过滤将会仅显示包含该字段的包。例如：过滤字符串:TCP
将会显示所有包含 TCP 协议的包。
通过"Help/Support Protocals"/帮助/协议支持菜单项访问"Display Filter Fields/显示过滤字段"可以查看完整完
整的过滤字段列表。
6.4.2. 比较值
你可以通过在许多不同的比较操作建立比较过滤。详见表 6.3 “显示滤镜比较操作符”
提示
你可以使用下表中的英语和比较符(c-link)项达到同样的效果，它们也可以混合使用。
表 6.3. 显示滤镜比较操作符
English C-linke 描述及范例
Equal
eq ==
ip.addr==10.0.0.5
Not equal
ne !=
ip.addr!=10.0.0.5
Greate than
gt >
frame.pkt_len>10
Less than
lt =
frame.pkt_len ge 0x100
Equal
le <=
frame.pkt_len <= 0x20
6.4.3. 组合表达式
你可以用逻辑操作符将过滤表达式组合在一起使用，见表 6.4 “显示过滤的逻辑操作符”
表 6.4. 显示过滤的逻辑操作符
English C-linke 描述和范例
Logical AND
and &&
ip.addr==10.0.0.5 and tcp.flags.fin
Logical OR
or ||
ip.addr==10.0.0.5 or ip.addr==192.1.1.1
Logical XOR
xor ^^
tr.dst[0:3] == 0.6.29 xor tr.src[0:3] == 0.6.29
Logical Not
not !
not llc
Substring Operator
Wireshark 允许选择一个序列的子序列。在标签后你可以加上一对[]号，在里面包含用逗号(是不是
冒号？)分离的列表范围。
eht.src[0:3] == 00:00:83
上例使用 n:m 格式指定一个范围。在这种情况下，n 是起始位置偏移(0 表示没有偏移，即是第一位，
同理 1 表示向右偏移一位，便是第二位)，m 是从指定起始位置的区域长度。
eth.src[1-2] == 00:83
[...]
上例使用 n-m 格式一个范围。在本例中 n 表示起始位置偏移,m 表示终止位置偏移