title:Forwarding in a content-based network
author:Antonio Carzaniga and
Alexander L. Wolf
Forwarding in a Content-Based Network
Antonio Carzaniga
Department of Computer Science
University of Colorado
Boulder, Colorado 80309-0430 USA
Alexander L. Wolf
Department of Computer Science
University of Colorado
Boulder, Colorado 80309-0430 USA
PI:EMAIL
PI:EMAIL
ABSTRACT
This paper presents an algorithm for content-based forward-
ing, an essential function in content-based networking. Un-
like in traditional address-based unicast or multicast net-
works, where messages are given explicit destination ad-
dresses, the movement of messages through a content-based
network is driven by predicates applied to the content of the
messages. Forwarding in such a network amounts to eval-
uating the predicates stored in a router’s forwarding table
in order to decide to which neighbor routers the message
should be sent. We are interested in ﬁnding a forwarding
algorithm that can make this decision as quickly as possible
in situations where there are numerous, complex predicates
and high volumes of messages. We present such an algorithm
and give the results of studies evaluating its performance.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Net-
work Protocols—Routing protocols; C.2.1 [Computer-
Communication Networks]:
Network Architecture
and Design—Distributed networks; C.2.4 [Computer-
Communication Networks]: Distributed Systems—Dis-
tributed applications
General Terms
Algorithms, Measurement, Performance, Experimentation
Keywords
Content-based network, forwarding, matching, overlay, pub-
lish/subscribe
1.
INTRODUCTION
Content-based communication is a novel communication
service whereby the ﬂow of messages from senders to re-
ceivers is driven by the content of the messages, rather than
by explicit addresses assigned by senders and attached to the
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’03, August 25–29, 2003, Karlsruhe, Germany.
Copyright 2003 ACM 1-58113-735-4/03/0008 ...$5.00.
messages [9]. Using a content-based communication service,
receivers declare their interests by means of selection pred-
icates, while senders simply publish messages. The service
consists of delivering to any and all receivers each message
that matches the selection predicates declared by those re-
ceivers.
In a content-based service model, message content is
structured as a set of attribute/value pairs, and a selection
predicate is a logical disjunction of conjunctions of elemen-
tary constraints over the values of individual attributes. For
example, a message might have the following content
[class=“alert”, severity=6, device-type=“web-server”,
alert-type=“hardware failure”]
which would match a selection predicate such as this:
[alert-type=“intrusion” ∧ severity>2 ∨ class=“alert” ∧
device-type=“web-server”]
An ideal application for a content-based communication
service is a publish/subscribe event notiﬁcation service [4, 5,
7], where a selection predicate represents a subscription and
a message represents a published event. Other applications
that can directly beneﬁt from a content-based communi-
cation service include system monitoring and management,
network intrusion detection, service discovery, data sharing,
distributed electronic auctions, and distributed games.
We believe that the best way to provide a content-
based communication service is through a content-based net-
work. A content-based network is an overlay network whose
routers perform specialized routing and forwarding func-
tions. Routing in a content-based network amounts to syn-
thesizing distribution paths from a combination of the topo-
logical features of the overlay network and the selection
predicates declared by applications. The routing function
compiles two forwarding tables: the ﬁrst contains topolog-
ical constraints, and is conceptually identical to a forward-
ing table of an IP router, while the second contains selection
predicates, and is the result of combining the selection predi-
cates declared by applications. The forwarding function de-
termines the set of next-hop destinations by applying the
appropriate topological constraints found in the ﬁrst table,
and by matching the content of the message against the set
of selection predicates found in the second table.
Our concern in this paper is with the design of a fast for-
warding function for a content-based network. In particular,
we focus on the predicate-matching algorithm, since this is
the novel aspect of the forwarding function in a content-
based network. Notice that the properties of the forwarding
table used by this algorithm (the second table mentioned
above) result directly from the characteristics of end-user
applications, as opposed to characteristics of the network it-
self. We seek an algorithm that can scale well in situations
where there are numerous, complex predicates and high vol-
umes of messages generated by end-user applications.
In this paper we present a forwarding algorithm and give
the results of studies evaluating its performance. Because
our goal is fast forwarding, our primary metric for success
is how well we minimize, for a given message, the time it
takes to identify the set of neighbors to which the message
should be forwarded.
Intuitively, the main scale factor of
the algorithm is the total number of constraints resident in
the forwarding table.
Our evaluation shows that the algorithm has good abso-
lute performance under heavy loads and in a variety of net-
work conﬁgurations, including the extreme case of a single,
centralized router. It also shows that the algorithm scales
sublinearly in the number of conjunctions, with almost no
degradation of throughput, in the context of a network of
routers with a ﬁxed number of neighbor nodes. For exam-
ple, a software implementation of our algorithm, running
on a 950Mhz computer, is able to forward a 10-attribute
message in 3 milliseconds in a situation where there are 20
predicates (i.e., neighbors) consisting of 250000 conjunctions
formed from 5 million individual constraints over an alpha-
bet of 1000 attributes. In this experiment, the message went
to 18 of the 20 neighbors, but we observed in other exper-
iments that the performance generally improves (i.e., the
forwarding time goes down) as the percentage of matching
neighbors goes down. In terms of space, the forwarding ta-
ble in this experiment occupies only 48 bytes per constraint,
even though we have not yet turned our attention to opti-
mizing that aspect of the algorithm.
In the next section we provide some necessary detail con-
cerning the content-based service model and the general ar-
chitecture of a content-based network. We then discuss re-
lated work, highlighting the contribution of this paper. Fol-
lowing that, we present our forwarding algorithm. An ex-
perimental evaluation of its performance is then described.
We conclude with a summary and future plans.
2. CONTENT-BASED NETWORKING
A content-based network is an application-level overlay
consisting of client nodes and router nodes, connected by
communication links. A content-based network accepts mes-
sages for delivery, and is connectionless and best-eﬀort in
nature. As mentioned in the previous section,
it is the
communication model of a content-based network that dif-
fers signiﬁcantly from a traditional (unicast or multicast)
address-based network such as IP. In a content-based net-
work, nodes are not assigned unique network addresses, nor
are messages addressed to any speciﬁc node. Instead, each
node advertises a predicate that deﬁnes messages of interest
for that node and, thus, the messages that the node intends
to receive. The content-based service consists of delivering
a message to all the client nodes that advertised predicates
matching the message.
The content-based service does not eliminate the need for
network addresses.
Instead, it limits their use to that of
node identiﬁers. In particular, node identiﬁers are needed to
associate predicates with their issuers, to maintain topolog-
ical routing information, and to manage direct (lower-level)
communications between nodes. The fundamental diﬀerence
with respect to traditional networks such as IP is that these
identiﬁers are not used as locators or destination speciﬁers
by either senders or receivers.
The concept of a content-based network service is inde-
pendent of the form of messages and predicates. Denoting
the universe of messages as M, and the universe of predi-
cates over M as P : M → {true, false}, we say that P and
M deﬁne a content-based addressing scheme, which in turn
deﬁnes the content-based service. Consistently we say that
the predicate pn advertised by n is the content-based address
of the node n. We also say that a message m is implicitly
addressed by its content to a node n with content-based
address pn if pn(m) = true.
In practice, we must reﬁne these deﬁnitions somewhat.
Here we use the concrete syntax and semantics embodied
in the Siena event notiﬁcation service [7] to illustrate what
we mean by messages and predicates. Thus, a message is
a set of typed attributes. Each attribute is uniquely iden-
tiﬁed within the message by a name, and has a type and
a value. For purposes of this paper, we consider the com-
mon types string, integer, and boolean. For example, [string
carrier = UA; string dest = ORD; int price = 300; bool up-
gradeable = true;] would be a valid message. A predicate
is a disjunction of conjunctions of constraints on individual
attributes. Each constraint has a name, a type, an operator,
and a value. A constraint deﬁnes an elementary condition
over a message. A message matches a constraint if it con-
tains an attribute with the same name and type, and if the
value matches the condition deﬁned by the operator and
value of the constraint. For example, [string dest = ORD ∧
int price  1000
string dest =
int
string
int
int
string airline = UA
string
orig = Chicago
string
dest = Atlanta
string dest = New York
int
string orig = Chicago
string
bool
string stock = MSFT
int
price < 200
airline = UA
upgradeable = true
price < 200
content−based "physical" overlay
Figure 2: Example Contents of a Forwarding Table
Figure 1: Network Overlay and High-Level Routing
Scheme
stream node reachable through that interface. (Notice that,
by analogy to an IP network, we term the connections of a
content-based router to its adjacent nodes as the interfaces
of that router.)
The content-based routing protocol uses two mechanisms
for the propagation of routing information. The ﬁrst is a
“push” mechanism based on receiver advertisements, while
the second one is a “pull” mechanism based on sender re-
quests and update replies.
Receiver advertisements (RAs) are issued by nodes peri-
odically and/or when they advertise new content-based ad-
dresses. An RA carries the content-based address as well as
the identiﬁer of its issuer, and its purpose is to push routing
information from the issuer (receiver) out to all the potential
senders. The propagation of an RA follows the broadcast
tree rooted at the issuer node, and sets up reverse forward-
ing paths towards the issuer. Speciﬁcally, at each node, the
predicate advertised by an RA is added (i.e., combined in
a logical disjunction) to the predicate associated with the
interface that is on the reverse path to the issuer.
If this
logical combination generates a new predicate for that in-
terface, then the node continues the propagation of the RA.
Otherwise, the node simply stops propagating the RA. No-
tice that by pruning the propagation of RAs in this latter
case, content-based routers avoid advertising content-based
addresses along paths that are already set up with the neces-
sary forwarding state. Notice also that, by the same pruning
rule, RAs can only “widen” the selection of content-based
addresses in routing tables. This eﬀect is balanced by the
use of sender requests.
A router uses a sender request (SR) to collect routing
information from other routers. SRs are issued on a reg-
ular basis by each node, and are designed to pull content-
based routing information from receivers back to senders.
An SR ﬂows from its issuer to every other node, following
the broadcast tree rooted at the issuer. Routers respond to
SRs by generating update replies (URs). URs are returned
back to the issuer of the SR, on the reverse path of the
SR, accumulating content-based addresses along the way.
Speciﬁcally, leaf nodes immediately return a UR containing
their content-based address.
Intermediate nodes compute
their UR by combining (in a logical disjunction) their own
content-based address with the content-based addresses re-
ported by the URs received from routers downstream from
the issuer. Eventually, the issuer of the SR receives one UR
per interface, each one carrying the combined content-based
address of the nodes reachable through that interface.
2.2 Content-Based Forwarding and Problem
Statement
Following the routing scheme described above, we propose
a forwarding process consisting of the combination of broad-
cast forwarding and content-based forwarding. In this paper
we focus on the design of the content-based forwarding al-
gorithm and assume the availability of a generic broadcast
forwarding function.
Without loss of generality, we assume that the output
of the given broadcast forwarding function for a message
m originating at a node s is a set of output interfaces B.
For example, with a broadcast protocol that uses minimal
source-based trees, B is the set of links downstream on the
directed, shortest-paths spanning tree rooted in s, whereas
with reverse-path broadcast forwarding [10] B is the com-
plete set of interfaces of the router when m is received over
the link that is on the (reverse) unicast path to s.
We also assume that the content-based routing protocol
maintains a content-based forwarding table. The table rep-
resents a map between interfaces and predicates, where a
predicate pi associated with interface i represents the union
of the predicates advertised by downstream nodes reachable
through i or, in general, a superset thereof. Figure 2 shows
an example of a content-based forwarding table (the details
of this table are explained in Section 4).
Given this modularization of the broadcast routing and
forwarding functions, and of the content-based routing func-
tion, we deﬁne content-based forwarding as a function CBF
of three inputs: a message m, a set of broadcast output
interfaces B, and a content-based forwarding table T =
{p1, p2, . . . , pI}, where I is the total number of interfaces.
The function computes the subset of the broadcast output
B that includes all the interfaces in T associated with a
predicate matched by m. Formally:
CBF(m, B, T ) = {i : i ∈ B ∧ matches(pi, m)}
Our goal is to design a fast algorithm for CBF.
3. RELATED WORK AND CONTRIBU-
TIONS OF THIS PAPER
In order to place our work within the proper context, we
ﬁrst discuss the concept of content-based networking in rela-
tion to other research eﬀorts in the general area of advanced
network services, and then relate our proposed algorithm to
other forwarding and matching algorithms.
IP Multicast. Content-based networking can be seen as an
extension of a multicast network service such as IP multi-
cast [11]. The two service models are similar in that they
both allow senders and receivers to communicate indirectly
through a logical rendezvous point, but diﬀer signiﬁcantly
in their ﬂexibility. Formally, this diﬀerence can be charac-
terized as follows: the multicast model allows senders and
receivers to create and refer to partitions of the information
space, while the content-based model allows senders to use
a completely open information space, and receivers to select
information from arbitrary subsets of that space. In prac-
tice, this means that the IP multicast service is well suited
to streaming media, where information is channeled in a
relatively small number of groups, and where group mem-
bers are interested in receiving everything that is sent to the
group. Conversely, content-based networking is intended to
better support distributed applications, where application
components need ﬁne-grained selection of the information
they exchange. This view of the IP multicast model and the
diﬀerence between it and the content-based model have also
been pointed out elsewhere [9, 15].
Extended Multicast Models. Stoica et al. [18] have pro-
posed the internet indirection infrastructure (i3 ), as a plat-
form to implement various forms of advanced network ser-
vices, including multicast, anycast, and mobility. The ser-
vice model of i3 provides a rendezvous-based communica-
tion service similar to that of IP multicast, but with an
extended “join” semantics. Clearly, i3 and our content-
based networking model have similar goals,
in that they
are intended to better support advanced distributed appli-
cations. However, they are based on rather diﬀerent design
decisions: i3 uses a single identiﬁer as a logical rendezvous
point, whereas our content-based model uses structured in-
formation and more powerful selection predicates.
Content-Addressable Network and Content Routing.
Despite the similarity in terminology, the content-based net-
working model presented in this paper has practically no re-
lationship to the model of content-addressable network pro-
posed by Ratnasamy et al. [17]. As they use it, the term
“content-addressable network” indicates what amounts to
a lookup service that maps keys (usually resource identi-
ﬁers such as ﬁle names) to keys (usually locations). An-