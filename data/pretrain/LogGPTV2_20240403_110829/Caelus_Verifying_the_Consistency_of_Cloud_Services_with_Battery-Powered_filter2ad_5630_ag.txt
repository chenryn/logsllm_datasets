### Developing a Protocol for Secure Cloud Buffering and Multicasting

We aim to develop a protocol that leverages cloud services for buffering and multicasting messages, without requiring trust in the cloud service. Timeweave [34] was an early example of using attested histories to verify the actions of untrusted parties. Since then, the concept of attested histories has been applied to detect misbehavior in virtual machines [35], replicas in Byzantine Fault Tolerant (BFT) systems [36], [37], and to enhance the performance of BFT systems [38], [39]. Recent research has also proposed the use of Trusted Platform Modules (TPMs) as integrity verifiers for cloud infrastructure [40]. However, none of these prior works directly address the issue of consistency verification.

### Cryptographic File Systems and Freshness Guarantees

Several cryptographic file systems ensure freshness [41]–[46]. These systems assume that all operations are linearizable, meaning they only need to verify that clients read the latest values (i.e., strong consistency). According to the well-known CAP theorem, systems enforcing strong consistency cannot scale effectively. In contrast, Caelus provides protection for systems with weaker consistency models, such as eventual and causal consistency, which are more suitable for globally distributed cloud infrastructures.

### Data Integrity and Recoverability

Other research has focused on distributing data across multiple cloud services to protect data integrity and recoverability [47]–[49]. Additionally, cryptographic techniques have been used to probabilistically prove retrievability [50], [51], data possession [52], and proper encryption [53]. However, these systems do not address data consistency and often assume static data. Caelus, on the other hand, does not directly address recoverability or retrievability, making the integration of these techniques with Caelus an interesting area for future work.

### Conclusion

From the design and evaluation of our Caelus prototype, we draw two major conclusions. First, Caelus can avoid direct client-to-client communication by offloading parts of the monitoring task to an untrusted cloud provider, thereby eliminating the need to trust the cloud service. Second, the role of the attestor can be partitioned into two devices: a root attestor and an active attestor, each fulfilling distinct roles. Through careful protocol design, Caelus ensures that these devices cannot be compromised by a malicious cloud service.

Our evaluation shows that Caelus can detect consistency violations on Amazon’s S3 storage service efficiently, both in terms of computation and battery usage. Attestation-partitioning reduces the battery impact on the root attestor by approximately 40 times, with minimal CPU time and network bandwidth overhead.

### Acknowledgments

We thank our shepherd, Alina Oprea, for her invaluable guidance. We also extend our gratitude to Wei Huang, Afshar Ganjali, Sukwon Oh, Ding Yuan, Michael Stumm, Ashvin Goel, Eyal de Lara, and Angela Demke-Brown for their insightful comments. This research was supported by an ORF-RE grant from the Ontario Ministry of Research and Innovation and an NSERC Discovery Grant.

### References

[References listed here, as provided in the original text]

### Smartphone Connectivity Study

While smartphones are designed to maintain constant connectivity, momentary gaps in cellular coverage are still common. To better understand this, we conducted an informal smartphone connectivity study. We acknowledge the limitations of our study, as participants were from the same geographical area, limiting the scope to 4-5 carriers. However, given the continuous improvement in cellular coverage, we believe our findings are representative of what most populated areas will achieve in the near future.

To record phone availability, we developed a simple Android application that logs periods of disconnection. The application continuously monitors network connectivity on both cellular and WiFi interfaces. Over a 7-month period, the application was installed on the phones of 12 participants. Our results show that the phones had network connectivity 97.81% of the total monitored time. The average duration of a disconnection was approximately exponentially distributed, with a mean of 94 seconds and a maximum of 5.7 hours. About 90% of disconnections lasted less than 2 minutes, indicating that even if a user encounters a loss of connectivity, it is unlikely to cause significant inconvenience. Most disconnection events were clustered, suggesting they were related to the user's physical location. Thus, if a user is in an area with poor reception, moving to a different location can likely resolve the issue.