解题思路
乘坐的公交车数量。返回－1表示不可能到达终点车站。
我们有一系列公交路线。每一条路线routes[ij] 上都有一辆公交车在上面循环行驶。例如，有一条路线
题目大意
Note:
Example:
it is not possible.
Kq Bulane1l  dos snq on o ot juem am pue (snq e uo jou 5->7->1->5->7->1->.的车站路线行
buses only, what is the least number of buses we must take to reach our destination? Return -1 if 
sequence 1->5->7->1->5->7->1->.. forever. 
example if routes[0] = [1, 5, 7], this means that the first bus (0-th indexed) travels in the 
We have a list of bus routes. Each routes [i] is a bus route that the i-th bus repeats forever. For
题目
815. Bus Routes
·给出一些公交路线，公交路径代表经过的哪些站。现在给出起点和终点站，问最少需要换多少辆公
●0O {
vertexMap, visited, queue, res := map[int][]int{}, make([]bool,
//vertexMap 中 key 是站点，value 是公交车数组，代表这些公交车路线可以到达此站点
出现了终点T，就可以返回结果了。
程中可以用这个映射关系，拿到公交车的其他站点信息，从而扩张队列里面的可达站点。一旦扩展
引起的环。用 map 存储站点和公交车的映射关系(即某个站点可以由哪些公交车到达)，BFS 的过
轻松解决。从起点S开始，不断的扩展它能到达的站点。用visited 数组防止放入已经可达的站点
边染色相同。题目即可转化为从顶点 S 到顶点T需要经过最少多少条不同的染色边。用 BFS 即可
交车才能从起点到终点？
for i := O; i 1->2->3->4
odo paao om a ae ] pe  o] os ‘paauo a  pe o
Input:
Explanation:
G = [0, 1, 3] 
head: 0->1->2->3
Input:
G is a subset of all values in the linked list.
return -1
---
## Page 776
代码
段。所以链表末尾再单独判断一次，
考虑末尾的情况，0-1，1-0，0-0，1-1，这4种情况的特征都是，末尾一位只要是0，都会新产生一
链表被断成了 4段。只要在链表中找0-1组合就可以认为是一段，因为这里必定会有一段生成。
链表中G 中存在的数标为0，不存在的数标为 1。
这个问题再抽象一下就成为这样：在原链表中去掉G中不存在的数，会被切断成几段链表。例如，将原
解题思路
这道题的意思是，在G中能组成多少组子链表，这些子链表的要求是能在原链表中是有序的。
这道题题目的意思描述的不是很明白，我提交了几次WA以后才悟懂题意。
func numComponents(head *ListNode, G []int) int {
package leetcode
 if head.Next == nil {
* Definition for singly-linked list.
for cur != nil {
cur := head
count := 0 
gMap := toMap(G)
 return 1
cur = cur.Next
if cur.Next == nil{// 末尾存在，直接加一
} else{ 
count++
Next *ListNode
Val int 
if -, ok = gMap[cur.Next.val]; !ok {
count++
是〇就再加一。
。原链表标识为0-0-0-1-0-1-1-0-0-1-0-1，那么这样原
---
## Page 777
Example:
paragraph are not case sensitive. The answer is in lowercase.
Words in the list of banned words are given in lowercase, and free of punctuation. Words in the 
Note:
 answer is unique. 
list of banned words. It is guaranteed there is at least one word that isn't banned, and that the
Given a paragraph and a list of banned words, return the most frequent word that is not in the
题目
819. Most Common Word
●1 -1 {
start = -1
 start = i
freqMap [word]++ 
 word := strings.ToLower(paragraph[start:i])
0
，同时不在禁用列表中
---
## Page 779
解题思路
益最高)。有一批工人，每个人能处理的任务难度不同。要求输出这批工人完成任务以后的最大收益。
给出一组任务，每个任务都有一定的难度，每个任务也都有完成以后对应的收益(完成难的任务不一定收
这道题考察的是滑动窗口的问题，也是排序相关的问题。
题目大意
Note:
Example 1: 
What is the most profit we can make?
worker cannot complete any job, his profit is $0.
For example, if 3 people attempt the same job that pays 1, thenthetotalprofitwillbe3. If a 
Every worker can be assigned at most one job, but one job can be completed multiple times.
worker can only complete a job with difficulty at most worker[ijl.
Now we have some workers. worker[i] is the ability of the ith worker, which means that this
We have jobs: difficultyli] is the difficulty of the ith job, and profit[i] is the profit of the ith job.
题目
826. Most Profit Assigning Work
● difficultyli], profiti], worker[i] are in range [1, 10~5] 
●1  mostFreqcount { 
mostFreqcount = freq
 mostFreqword = word 
---
## Page 780
代码
组，最终结果就是最大收益。
终结果了。遍历一遍工人数组，如果工人的能力大于任务的难度，就加上这个最大收益。遍历完工人数
排过序，难度是依次递增的)。有了这个难度依次递增，并且记录了最大收益的数组以后，就可以计算最
前能达到的最大收益。计算这个收益只需要从下标为1开始，依次比较自己和前一个的收益即可(因为 
先将任务按照难度排序，工人也按照能处理任务难度的能力排序。用一个数组记录下，每个i下标，当
func maxProfitAssignment(difficulty []int, profit []int, worker []int) int {
func （p SortByDiff) Less(i，j int） bool {
// Less define
type SortByDiff struct{ Tasks }
// SortByDiff define
func（p Tasks） Swap(i,j int) {p[i],p[j] = p[j]，p[i] }
// Swap define
func (p Tasks) Len() int { return len(p) }
// Len define
type Tasks []Task
// Tasks define
type Task struct
// Task define
package leetcode
 return p.Tasks[i].Difficulty = tasks[index].Difficulty {
 tasks[i].Profit = max(tasks[i].Profit, tasks[i-l].Profit)
if index > O { 
fmt.Printf("tasks 【index】 = %v\n", tasks[index])
 res += tasks[index-1].Profit
 index++
，那么我们称其为独特字符。例如，在字符串 S=
---
## Page 782
代码
func uniqueLetterstringl(s string) int 
//暴力解法，超时！时间复杂度O(n^2)
func uniqueLetterstring(s string) int {
package leetcode
if len(s) == 0 {
return res % 1000000007
for i := O; i = O && S[left] != S[i] {
left = i - 1 
right = i + 1 
 right++
left--
t<len(s)&& s[right]!= s[i] {
A
---
## Page 783
Example 2: 
Example 1: 
example, inverting [0, 1, 1] results in [1, 0, 0] .
To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For 
To flip an image horizontally means that each row of the image is reversed. For example, flipping 
resulting image.
 Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the
题目
832. Flipping an Image
[1, 1, 0] horizontally results in [0, 1, 1] .
Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]
Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].
Output: [[1,0,0],[0,1,0],[1,1,1]]
Input: [[1,1,0],[1,0,1],[0,0,0]]
return res % mod
for i := O; i < len(s); i++
res, mod := 0, 1000000007 
letterMap := map[byte]int{}
 letterMap = map[byte]int{}
for j := i; j < len(s); j++ {
}else {
if tmp == len(letterMap) {
letterMap[s[j]]++ 
for_
tmp := 0
res += len(letterMap) - tmp
 continue
if v 
++duz
v := range letterMap {
---
## Page 784
The ith edge connects nodes edges[i] [o] and edges[i] [1] together.
 An undirected, connected tree with N nodes labelled 0...N-1 and N-1edges are given.
题目
834. Sum of Distances in Tree
代码
解题思路