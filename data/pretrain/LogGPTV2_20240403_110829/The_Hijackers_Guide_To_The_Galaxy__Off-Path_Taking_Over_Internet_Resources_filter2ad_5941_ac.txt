which enables an informed attacker to ﬁnd the Email ad-
dresses in less than ten attempts when these details are not
publicly available through whois. We apply dictionary attack
to also recover other details: for example, our study shows
that about 1 in 10 LIRs (customers of RIRs) use usernames
that are identical to the Email address that is registered in the
whois records; e.g., username operator is associated with
Email address operator@email.info.
5.3 Attacking Providers
The adversary needs to poison the DNS cache of the provider,
by injecting a record into the resolver’s cache that maps the
domain of the provider to the adversarial IP addresses. We
therefore collect the IP addresses of the DNS resolvers of the
providers.
5.3.1
Identify the target DNS resolvers
In order to poison the DNS cache of the provider the adversary
needs to ﬁnd the IP addresses of the DNS resolvers which are
used for looking up the Email servers of the customers during
requests for password recovery.
We register accounts with the providers via the web portal
of each provider. For our evaluation we register 20 accounts
with each provider, each account is associated with a unique
domain that we registered for that purpose. We use these
registered accounts to learn about the infrastructure of the
provider. We trigger the password recovery procedure for
our registered accounts. To stay under the radar we limit the
amount of password recovery requests to ten for each account.
3154    30th USENIX Security Symposium
USENIX Association
e Provider
p
y
T
a
h
c
t
p
a
C
k
c
a
j
i
h
P
G
B
Email
Email
Email, Username
Username1
Username, 2-FA
NIC-handle
Email
Username
Email
t
n
e
m
g
a
r
F
S
N
D
d
a
S
Email, Domain name
Login ID, Sec. question
Details needed
for PW recovery
Email, Sec. question
Last password, 2-FA
n
w
o
n
k
-
c
i
l
b
u
P
    
    
   - 
    
    
   - 
    
    
    
   - 
    
    
    
    
    
    
   
   
   
   
   
   
   
   
   
   
   
   
   
  - 
   - 
    
    
Username1, customer No.1    - 
   - 
AFRINIC
APNIC
ARIN
LACNIC
RIPE NCC
godaddy
namecheap
networksolutions
enom.com
name.com
Alibaba Cloud
Amazon AWS
gandi.net
namesilo.com
Google Cloud
ovh.com
Amazon AWS
Microsoft Azure
Alibaba Cloud
Google Cloud
IBM Cloud
Tencent Cloud
Oracle Cloud
DigitalOcean
Linode
IONOS
Hostwinds
OVHcloud
Vultr
CloudSigma
IdenTrust
DigiCert
Sectigo
GoDaddy
GlobalSign
-: No response. 1: Can be retrieved using domain name/Email.
Email
Email
Email
Email
s
r
e
d
i
v
o
r
p
S
a
a
I
l
l
a
r
o
f
o
n
y
l
l
a
c
i
p
y
T
Username, 2-FA
Last password, 2-FA
Account number
Username1
Username1
Email, id or domain
Email
Email
Email
Email
Email
Email
Username
Email (’id’)
Email
Email
Email
s
R
R
I
s
r
a
r
t
s
i
g
e
r
n
i
a
m
o
D
)
S
a
a
I
(
t
n
e
m
e
g
a
n
a
m
d
u
o
l
C
s
A
C
Table 1: Password recovery at each provider.
The Email server of the provider requests the DNS resolver
to look up the MX and A records for our Email exchanger -
this is required in order to send the password, or the link
to reset the password. We monitor the requests arriving at
the nameservers of our domains and collect the IP addresses
which sent DNS requests for records in domains under which
we registered our accounts. These IP addresses belong to the
DNS resolvers used by the providers. We repeat this for each
provider on our list in Table 2.
For every provider, we list in Table 2 the service providers
of the Email servers and the DNS resolvers (by mapping
the observed IP addresses to ASNs). Additionally, we also
performed measurements if the resolvers of the providers in
our dataset support DNSSEC and the default EDNS size in
DNS requests.
5.3.2 Poison providers’ DNS caches
To understand the vulnerabilities to cache poisoning across
the providers, we evaluate the DNS cache poisoning method-
ologies against the DNS resolvers of the providers in our
dataset. Our evaluations are done as described in Section 4
using the victim domains that we set up and the accounts that
we registered. During the evaluations the adversary triggers
password recovery procedure and applies the DNS cache poi-
soning methodologies (one during each test) to inject into the
DNS cache of the provider malicious records mapping the
Email servers of our victim domains to the hosts controlled
by the adversary. In this section we report on the results of
our evaluations and the extent of the vulnerabilities among
the providers.
HijackDNS. To infer the scope of providers vulnerable
to the attack in Section 4.3 we perform Internet measure-
ments checking for vulnerabilities that allow sub-preﬁx hi-
jacks. Since many networks ﬁlter BGP advertisements with
preﬁxes more speciﬁc than /24, we consider an IP address vul-
nerable if it lies inside a network block whose advertised size
is larger than /24. We therefore map all resolvers’ IP addresses
to network blocks. Then, to obtain insights about the sizes of
the announced BGP preﬁxes for providers’ network blocks
with resolvers we use the BGPStream of CAIDA [2] and re-
trieve the BGP updates and the routing data from the global
BGP routing table from RIPE RIS [38] and the RouteViews
collectors [44]. We analyse the BGP announcements seen
in public collectors for identifying networks vulnerable to
sub-preﬁx hijacks by studying the advertised preﬁx sizes. The
dataset used for the analysis of the vulnerable sub-preﬁxes
was collected by us in January 2021. Our analysis in Table
2 shows that the networks of 29 providers are vulnerable to
sub-preﬁx hijacks.
To understand the viability of same-preﬁx hijack attacks we
perform experimental simulations using the target providers
and customers in our dataset. For creating the topological
map of the AS-relationship dataset of the customer domains
and the providers in our dataset we use CAIDA [3]. We sim-
ulate the attacks using a simulator developed in [19]. We
evaluate HijackDNS attack for each provider with respect to
customer domains of the corresponding provider and an AS
level adversary on an Internet topology. In our simulations we
consider attacks from 1000 randomly selected ASes against
the domains of the customers and providers. The adversary
can succeed at the attack against 80% of the Alexa customer
domains with 60% success probability. One of the reasons
for the high success probability is the concentration of the
nameservers in few ASes: 10% of the ASes host 80% of the
nameservers in Alexa domains and 1% of ASes host 80% of
the domains. The customers of the LIRs are slightly more
resilient since they mostly use at least two nameservers on
different preﬁxes. This means that to succeed the attacker
would need to hijack both. Furthermore, the distribution of
USENIX Association
30th USENIX Security Symposium    3155
Figure 3: IP preﬁx distribution of customer accounts’ nameservers
the nameservers across ASes is more uniform in contrast to
Alexa domains.
SadDNS & FragDNS. To test vulnerabilities in the
providers to SadDNS and FragDNS we perform the eval-
uations in Sections 4.4 and 4.5. Out of 31 tested providers,
28 (90%) are vulnerable to FragDNS attack and four of the
providers are vulnerable to SadDNS attack. Vulnerabilities
for each provider are listed in Table 1.
5.4 Measurements of Vulnerable Customers
The success of the attack against a speciﬁc victim customer
depends not only on the vulnerabilities in the DNS resolver
of the provider but also on the properties in the domain of the
customer. For instance, say a DNS resolver of some provider
is vulnerable to FragDNS attack but the nameservers of the
customer’s domain do not fragment UDP packets and packets
that are too large are transmitted over TCP. In that case, the
FragDNS attack is not effective against that customer. To
understand the extent of the vulnerabilities in customers we
evaluate the attack methodologies in Section 4 against the
DNS resolvers that we own and control using the responses
from the domains of the customers in our dataset. Using
results from this evaluation we can reliably determine if the
attack methodology is effective against a customer or not.
The results of our experimental evaluations of attacks in
Section 4 and measurements of the customers’ domains and
their nameservers are summarised in Table 3.
HijackDNS. We analyse the preﬁxes of the customers sim-
ilarly to Section 5.3.2. The results are plotted in Figure 3.
Our ﬁndings are that more than 60% of the domains have
all their nameservers on preﬁxes less than /24. Furthermore,
above 20% of the domains host all the nameservers of each
domain on a single preﬁx, as a result, by hijacking one preﬁx
the adversary immediately hijacks the entire domain. Out of
these, 17% host all the nameservers on a preﬁx that is less
than /24. 10% of the domains have a single nameserver in
the domain. To conclude: more than 40% of the domains are
vulnerable to HijackDNS attack via sub-preﬁx hijack.
SadDNS. Based on the implementation in Section 4.4 we
develop an automated simulation of the SadDNS attack, and
run it on our dataset of customer domains to compute the
success probability of SadDNS attack against our victim DNS
resolver. When running the attack for domains that have the
required properties (e.g., support rate limiting), poisoning suc-
ceeds after an average of 471s (min 39s, max 779s) which is
Figure 4: Cumulative distribution of lowest fragment size of nameservers
(left) and domains (right) after sending ICMP PTB.
comparable to the original SadDNS results (avg 504s, min
13s, max 1404s, [33]). Our test implementation triggers 497
queries on average for each domain, which is strongly corre-
lated with the attack duration due to the fact that we do not
trigger more than two queries per second; the resolvers return
SRVFAIL when receiving more than two queries per attack
iteration. By inverting this number we get a hitrate of 0.2%.
Our results of an automated evaluation of SadDNS show
that 8,469 accounts from the RIRs dataset and 11% of the
accounts from the Alexa dataset could be hijacked via the
SadDNS method.
FragDNS. We measured the victim customers’ name-
servers for support of ICMP errors and fragmentation. We
send a DNS request to the nameserver for ANY type DNS