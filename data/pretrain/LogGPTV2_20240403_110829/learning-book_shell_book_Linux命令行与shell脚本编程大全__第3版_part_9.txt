# 使用Ctrl+Shift+F快捷键
使用 `Ctrl+Shift+F` 快捷键可以打开 Konsole 终端窗口底部的“查找”窗口，提供文本搜索功能。

## 查找下一个
- **快捷键**: F3
- **功能描述**: 在回滚缓冲区历史记录中查找下一个匹配的文本。

## 查找上一个
- **快捷键**: Shift+F3
- **功能描述**: 在回滚缓冲区历史记录中查找上一个匹配的文本。

## 保存输出
- **快捷键**: 无
- **功能描述**: 将回滚缓冲区中的内容保存到一个文本文件或 HTML 文件中。

## 回滚选项
- **快捷键**: 无
- **功能描述**: 打开“回滚选项”窗口以配置回滚缓冲区设置。

## 清除回滚
- **快捷键**: 无
- **功能描述**: 删除回滚缓冲区中的内容。

## 清除回滚并重置
- **快捷键**: Ctrl+Shift+X
- **功能描述**: 删除回滚缓冲区中的内容，并重置终端窗口。

你还可以通过滚动条在可视区域中查看回滚缓冲区的内容。此外，可以使用 `Shift+UpArrow` 按键逐行向上翻看，或者使用 `Shift+PageUp` 按键逐页（24 行）向上翻看。

### 书签菜单
表 2-14 展示了 Bookmarks 菜单中的项目，用于管理 Konsole 终端窗口中的书签。书签能够保存活动会话的目录位置，以便于在相同会话或新的会话中轻松返回之前的位置。

| 名称 | 快捷键 | 描述 |
| --- | --- | --- |
| 添加书签 | Ctrl+Shift+B | 在当前目录位置创建一个新的书签 |
| 为标签会话创建书签 | 无 | 为当前所有终端标签会话创建一个新的书签 |
| 新建书签文件夹 | 无 | 创建一个新的书签文件夹 |
| 编辑书签 | 无 | 编辑已有的书签 |

### 设置菜单
表 2-15 展示了 Settings 菜单中的项目，用于定制和管理配置文件。这些菜单项没有对应的快捷键。

| 名称 | 描述 |
| --- | --- |
| 更改配置文件 | 将所选的配置文件应用于当前标签 |
| 编辑当前配置文件 | 打开“编辑配置文件”窗口，提供配置文件配置选项 |
| 管理配置文件 | 打开“管理配置文件”窗口，提供配置文件管理选项 |
| 配置快捷键 | 创建 Konsole 终端命令快捷键 |
| 配置通知 | 创建自定义的 Konsole 终端方案及会话 |

**配置通知** 允许将会话中发生的特定事件与不同的行为关联起来。当某个事件发生时，将触发指定的行为（或一系列行为）。

### 帮助菜单
表 2-16 展示了 Help 菜单中的项目，提供了完整的 Konsole 手册（如果 Linux 发行版中已经安装了 KDE 手册）以及标准的关于对话框。

| 名称 | 快捷键 | 描述 |
| --- | --- | --- |
| Konsole 手册 | 无 | 包含完整的 Konsole 手册 |
| 终端部件帮助 | Shift+F1 | 包含终端部件的帮助信息 |
| 报告错误 | 无 | 打开提交错误报告表单 |
| 切换应用程序语言 | 无 | 打开切换应用程序语言表单 |
| 关于 Konsole | 无 | 显示当前 Konsole 终端的版本 |
| 关于 KDE | 无 | 显示当前 KDE 桌面环境的版本 |

Konsole 终端仿真器软件包有详细的文档支持。此外，如果遇到程序故障，可以使用错误报告表单向 Konsole 开发人员提交问题。

相较于另一个流行的软件包 xterm，Konsole 终端仿真器软件包算是较新的。在下一节中，我们将探讨古老的 xterm。

### 使用 xterm 终端仿真器

最古老也是最基本的终端仿真软件包是 xterm。xterm 软件包在 X Window 出现之前就已经存在，并且通常默认包含在发行版中。

尽管 xterm 是一个功能齐全的仿真软件包，但它并不需要太多的资源（如内存）来运行。因此，在专为老旧硬件设计的 Linux 发行版中，xterm 非常流行。一些图形化桌面环境也用它作为默认终端仿真器软件包。

xterm 软件包虽然没有提供太多炫目的特性，但它的主要优势在于能够仿真旧式终端，如 DEC 公司的 VT102、VT220 以及 Tektronix 4014 终端。对于 VT102 和 VT220 终端，xterm 甚至能够仿真 VT 序列色彩控制码，使你在脚本中使用颜色成为可能。

#### 访问 xterm

在 Ubuntu 的 Unity 桌面中，xterm 是默认安装的。可以通过 Dash Search 输入 xterm 进行访问。xterm 会作为一个名为 XTEmm 的应用出现在 Dash 区域。点击对应的图标就可以打开 xterm 终端仿真器。

在 GNOME 和 KDE 桌面环境中，默认不安装 xterm。你需要先安装它（可以参阅第 9 章安装软件包）。安装完成后，可以从另一个终端仿真器中启动 xterm。打开一个终端仿真器进入 CLI，输入 `xterm` 并按回车键。也可以创建桌面启动器来启动 xterm。

xterm 包允许你使用命令行参数设置自己的特性。下面的内容将讨论这些特性和如何进行修改。

#### 命令行参数

xterm 的命令行参数非常多。你可以控制大量特性来对终端仿真实施定制，例如允许或禁止某种 VT 仿真。

说明：xterm 包含数量众多的配置选项，在此无法一一列举。bash 手册中有大量的文档可供参考。第 3 章中会讲到如何阅读 bash 手册。另外，xterm 开发团队也在其网站上提供了很好的帮助：[http://invisible-island.net/xterm/](http://invisible-island.net/xterm/)

通过向 xterm 命令加入参数来调用某些配置选项。例如，要让 xterm 仿真 DEC VT100 终端，可以输入命令 `xterm -ti vt100`，然后按回车键。表 2-17 给出了一些可以配合 xterm 终端仿真器使用的参数。

| 参数 | 描述 |
| --- | --- |
| `-bg color` | 指定终端背景色 |
| `-fb font` | 指定粗体文本使用的字体 |
| `-fg color` | 指定文本颜色 |
| `-fn font` | 指定文本字体 |
| `-fv font` | 指定宽文本字体 |
| `-lf filename` | 指定用于屏幕日志的文件名 |
| `-mc color` | 指定文本光标颜色 |
| `-name name` | 指定标题栏中的应用程序名称 |
| `-ti terminal` | 指定要仿真的终端类型 |

一些 xterm 命令行参数使用加号（+）或减号（-）来指明如何设置某种特性。加号表示启用某种特性，减号表示关闭某种特性。不过反过来也行。加号可以表示禁止某种特性，减号可以表示允许某种特性，例如在使用 `bc` 参数的时候。表 2-18 中列出了可以使用 +/- 命令行参数设置的一些常用特性。

| 参数 | 描述 |
| --- | --- |
| `+ah` | 启用/禁止文本光标高亮 |
| `+av` | 启用/禁止文本行自动环绕 |
| `+bc` | 启用/禁止文本光标闪烁 |
| `+CI` | 启用/禁止识别 ANSI 色彩更改控制码 |
| `+fullscreen` | 启用/禁止全屏模式 |
| `+jumpscroll` | 启用/禁止跳跃式滚动 |
| `+l` | 启用/禁止将屏幕数据记录进日志文件 |
| `+nib` | 启用/禁止边缘响铃 |
| `+rv` | 启用/禁止图像反转 |
| `+tek` | 启用/禁止 Tektronix 模式 |

要注意，不是所有的 xterm 实现都支持这些命令行参数。你可以在 xterm 启动后，使用 `-help` 参数来确定你所使用的 xterm 实现支持哪些参数。

现在你已经了解了三种终端仿真器软件包，重要的问题是：哪个是最好的终端仿真器。对于这个问题，并没有权威的答案。要使用哪个仿真器软件包取决于你的个人需求。不过，能有这么多选择总是好事。

### 小结

为了着手学习 Linux 命令行命令，得先能访问命令行。在图形化界面的世界里，有时会费点周折。本章讨论了能够获得 Linux 命令行的一些不同的界面。

首先，我们讲解了通过虚拟控制台终端（不涉及 GUI 的终端）和通过图形化终端仿真软件包（GUI 中的终端）访问 CLI 时的不同。简要对比了两种访问方式之间的差别。

接下来，我们详细探究了通过虚拟控制台终端访问 CLI，包括像更改背景色这类控制台终端配置选项。

在学习了虚拟控制台终端之后，本章还讲述了利用图形化终端仿真器访问 CLI，其中主要涉及三种终端仿真器：GNOME Terminal、Konsole Terminal 以及 xterm。

本章还讨论了 GNOME 桌面项目的 GNOME 终端仿真软件包。GNOME Terminal 通常默认安装在 GNOME 桌面环境中。通过菜单和快捷键，它可以很方便地设置多种终端特性。

然后讨论了 KDE 桌面项目的 Konsole 终端仿真软件包。Konsole Terminal 通常默认安装在 KDE 桌面环境中。它提供了诸多漂亮的特性，例如能够监测到空闲的终端。

最后讲到了 xterm 终端仿真器软件包。xterm 是 Linux 中第一个可用的终端仿真器。它能够仿真旧式终端硬件，如 VT 和 Tektronix 终端。

下一章将开始接触 Linux 命令行。你将从中学习到 Linux 文件系统导航以及创建、删除、处理文件所需的命令。

### 基本的 Bash Shell 命令

多数 Linux 发行版的默认 shell 都是 GNU Bash Shell。本章将介绍 Bash Shell 的一些基本特性，例如 Bash 手册、Tab 键自动补全以及显示文件内容，带你逐步了解怎样用 Bash Shell 提供的基本命令来操作 Linux 文件和目录。如果你已经熟悉了 Linux 环境中的这些基本操作，可以直接跳过本章，从第 4 章开始了解更多的高级命令。

#### 启动 Shell

GNU Bash Shell 能提供对 Linux 系统的交互式访问。它是作为普通程序运行的，通常是在用户登录终端时启动。登录时系统启动的 shell 依赖于用户账户的配置。

`/etc/passwd` 文件包含了所有系统用户账户列表以及每个用户的基本配置信息。以下是从 `/etc/passwd` 文件中取出的样例条目：

```
christine:x:501:501:Christine Breenahan:/home/christine:/bin/bash
```

每个条目有七个字段，字段之间用冒号分隔。系统使用字段中的数据来赋予用户账户某些特定特性。其中的大多数条目将在第 7 章有更加详细的介绍。现在先将注意力放在最后一个字段上，该字段指定了用户使用的 shell 程序。

在前面的 `/etc/passwd` 样例条目中，用户 `christine` 使用 `/bin/bash` 作为自己的默认 shell 程序。这意味着当 `christine` 登录 Linux 系统后，Bash shell 会自动启动。

尽管 Bash shell 会在登录时自动启动，但是是否会出现 shell 命令行界面（CLI）则依赖于所使用的登录方式。如果采用虚拟控制台终端登录，CLI 提示符会自动出现，你可以输入 shell 命令。但如果是通过图形化桌面环境登录 Linux 系统，你就需要启动一个图形化终端仿真器来访问 shell CLI 提示符。

#### Shell 提示符

一旦启动了终端仿真软件包或者登录 Linux 虚拟控制台，你就会看到 shell CLI 提示符。提示符就是进入 shell 世界的大门，是你输入 shell 命令的地方。

默认 Bash shell 提示符是美元符号 (`$`)，这个符号表明 shell 在等待用户输入。不同的 Linux 发行版采用不同格式的提示符。在 Ubuntu Linux 系统上，shell 提示符看起来是这样的：

```
christine@server01:~$
```

在 CentOS 系统上是这样的：

```
[christine@server01 ~]$
```

除了作为 shell 的入口，提示符还能够提供其他的辅助信息。在上面的两个例子中，提示符中显示了当前用户 ID 名 `christine`。另外还包括系统名 `server01`。在本章的后续部分，你会学习到更多可以在提示符中显示的内容。

窍门：如果你还是 CLI 新手，请记住，在输入 shell 命令之后，需要按回车键才能让 shell 执行你输入的命令。

shell 提示符并非一成不变。你可根据自己的需要改变它。第 6 章讲到了如何修改 shell CLI 提示符。

可以把 shell CLI 提示符想象成一名助手，它帮助你使用 Linux 系统，给你有益的提示，告诉你什么时候 shell 可以接受新的命令。shell 中另一个大有帮助的东西是 Bash 手册。

#### Bash 手册

大多数 Linux 发行版自带用以查找 shell 命令及其他 GNU 工具信息的在线手册。熟悉手册对使用各种 Linux 工具有很大帮助，尤其是在你要弄清各种命令行参数的时候。

`man` 命令用来访问存储在 Linux 系统上的手册页面。在想要查找的工具的名称前面输入 `man` 命令，就可以找到那个工具相应的手册条目。图 3-1 展示了查找 `xterm` 命令的手册页面的例子。输入命令 `man xterm` 就可以进入该页面。

```
(13883AX)
X Hierarchical System
XTERM(1)
NAME
xterm - terminal emulator for X
DESCRIPTION
This is the window that contains the
terminal. When it is resized, the
terminal may be resized.
...
```