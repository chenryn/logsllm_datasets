能。
了解了这一点之后，来看看下面的代码：
"123*=~m(
\d+
(i)
}×;
结果是：
matched at []
matched at [3]
matched at [23]
matched at [1]
matched at [13]
matched at [12]
前三行是我们能够想象的，但如果不仔细动动脑筋，可能没法理解后三行。（？！）强迫进行
的回溯对应第二行和第三行。在开始位置的尝试失败之后，传动装置会启动驱动过程，从
第二个字符开始（第4章对此有详细介绍）。第四行和第五行对应第二轮尝试，最后一行对
应第三轮。
---
## Page 360
334
第7章：Perl
所以，添加（？！）之后确实能显示出所有可能的匹配，而不是从某个特定位置开始的所有匹
配。不过，有时候只需要从特定位置开始的所有匹配，下面我们将会看到。
寻找最长匹配
如果我们不希望找到所有匹配，而是希望找到并保存最长的匹配，应该如何做呢？我们可
‘onself’的例子：
$longest_match = undef;
#用于记录最长的匹配
"oneselfsufficient*=~ m(
one (self)?(selfsufficient)?
}）
#比较当前匹配（S&）与之前记录的最长匹配
if (not defined($longest_match)
or
length($&) > 1ength($longest_match))
Slongest_match = S&;
（？！）#保证匹配失败，通过回溯继续寻找其他匹配
#如果有结果，就输出
if (defined($longest_match)）{
print *1ongest match=[$longest_match]\n*;
}else{
print *no match\n";
毫不奇怪，结果是“longestmatch=[oneselfsufficient]’。这一段内嵌代码很长，不
过将来我们可能会使用，所以我们把它和（？！）封装起来，作为单独的regex对象：
my $RecordPossibleMatch = qr{
(?(
#比较当前匹配（S&）与之前记录的最长匹配
if (not defined($longest_match)
or
length($&)>length($longest_match))
$longest_match = $&;
）
))
(i)
#保证匹配失败，通过回潮继续寻找其他匹配
)x;
---
## Page 361
巧用Perl的专有特性
335
下面这个简单例子会找到最长的匹配‘9938”：
Slongest_match=undef；#记录最长的匹配
"800-998-9938*=~m(\d+ SRecordPossibleMatch )x;
#输出到目前为止的累积结果
if (defined($longest_match))(
print *longest match=[$longest_match]\n";
}else{
print "no match\n";
）
寻找最左最长的匹配
我们已经能找到最长的全局匹配，现在需要找到出现在最前边的最长匹配。POSIXNFA就
是这样做的（177）。所以，如果找到一个匹配，就要禁止传动装置的驱动过程。这样，
一旦我们找到某个匹配，正常的回溯会起作用，在同一位置寻找其他可能的匹配（同时需
要保存最长的匹配），但是禁用驱动过程保证不会从其他位置寻找匹配。
Perl不容许我们直接操作传动装置，所以我们不能直接禁用驱动过程，但如果slongest_
match已经定义，我们能够达到实现禁用驱动过程的效果。测试定义的代码是（?{defined
slongest_match}），但这还不够，因为它只测试变量是否定义。重要的是根据测试结果进
行判断。
在条件判断中使用内嵌代码
为了让正则引擎根据测试结果改变行为，我们把测试代码作为（?ifthen1else）中的if部
分（140）。如果我们希望测试结果为真时正则表达式停下来，就把必然失败的（？！）作
为then部分。（这里不需要else部分，所以没有出现）。下面是封装了条件判断的regex对
象：
my SBaiiIfAnyMatch = qr /(?(?(defined $longet_match))(?1))/;
f部分以下画线标注，then部分以粗体标注。下面i是它的应用实例，其中结合了前一页定义
的sRecordPossibleMatch:
800-998-9938*=~m{$BailIfAnyMatch\d+$RecordPossibleMatch }x;
在内嵌代码结构中使用local函数
UlsinglocalinanEmbedded-CodeConstrucf
local在内嵌代码结构中有特殊的意义。理解它需要充分掌握动态作用域（295）的概念和
第4章讲解表达式主导的NFA引擎工作原理时所做的“面包渣比喻”（158）。下面这段专
---
## Page 362
336
第7章：Perl
门设计（我们会看到，它有缺陷）的程序没有太多复杂的东西，但有助于理解local的意义。
它检查一行文本是否只包含w+和s+，以及有多少\w+是d+\b)：
my $Count=0;
$text =~m
（?>\d+（?($Count++）)\b1\w+1\s+）*$
如果用它来匹配字符串‘123·abc·73·9271·xyz”，$Count的值是3。不过，如果匹配字符
串‘123·abc·73xyz'，结果就是2，虽然应该是1。问题在于，‘73’匹配之后，SCount的
值会发生变化，因为后面的八bi无法匹配，d+当时匹配的内容需要通过回溯“交还”，内
嵌结构的代码却不能恢复到“未执行”的状态。
如果你还不完全了解固化分组（？>）：（139）和上面发生的回溯也没关系，固化分组用
于避免无休止匹配（269），但不会影响结构内部的回溯，只会影响重新进入此结构的回
简单的解决办法是，在sCount增加之前添加bi，保证它的值只有在不进行“交还”操作
的情况下才会变化。不过我更愿意在这里使用1oca1，来说明应用正则表达式期间这个函
数对Perl代码的影响。来看这段程序：
our SCount=0;
$text=~m
（?>\d+（?（local（$Count）=$Count+1}）\b1\w+1\s+）*$
}×;
要注意的第一点是，SCount从my变量变为全局变量（我推荐使用useBtrict，如果这么
做了，就必须使用our来“声明”全局变量）。
另一点要注意的是，SCount的修改已经本地化了。关键在于：对正则表达式内部的本地化
变量来说，如果因为回溯需要“交还”1oca1的代码，它会恢复到之前的值（新设定的值
会被放弃）。所以，即使local（SCount）=SCount+1在"d+匹配‘73′之后执行，把
的）成功路径”。如果“bi匹配失败，正则引擎会回溯到local之前，SCount恢复到1。这
也就是正则表达式结束时的值。
---
## Page 363
巧用Perl的专有特性
337
内嵌Perl代码的插值
因为安全方面的考虑，Perl不容许用内嵌代码结构（？（））或动态表达式结构
（？？{)）：对正则表达式进行字符串插值（不过它们可以进行regex对象插值，参考
第334页的sRecordPossibleMatch)，也就是说：
是可以的，但
.（）.= 
m($showStart some regex"}x;
不行。之所以要施加这种限制，是因为把用户的输入作为正则表达式的一部分是长期
以来的普遍做法，引入这些结构会容许用户运行任意代码，带来严重的安全隐患。所
以，默认情况下不容许这样。
如果你喜欢这样插值，可以使用下面的声明（declaration）：
use re'eval';
这就绕开了限制（设置其他参数，编译指示（pragma）usere也可以用于调试，361）
整理用于插值的输入数据
如果采用了上面的做法，而且确实需要使用用户输入的数据插值，请确保其中不包含
内嵌Perl代码或者动态正则结构。我们可以用正则表达式（\s*\？+[p（l来校验。如
果输入数据能够匹配，把它用在正则表达式里就是不安全的。使用s*是因为/×
修饰符容许开括号之后出现空白字符（我更愿意相信它们不应该出现在那里、不过事
实却与此相反）。加号约束的？保证两种结构都可以识别。最后，包含p是为了匹配
现在已经废弃的（？p（)）结构，也就是老版本的（？？（…））1。
我想最好的办法是由Perl提供某个修饰符，控制在整个正则表达式或某个子表达式中，
容许还是禁止使用内嵌代码。但是在没有实现之前，我们必须按照上面介绍的办法手
工检查。
所以，为了保证sCount的记数不发生错误，必须使用1ocal。如果把（？{print“Final
countisSCount.\n”}）放在正则表达式的末尾，它会显示正确的计数值。因为我们希
望在匹配完成之后使用sCount，就必须在匹配正式结束之前把它保存到一个非本地化的变
量中。因为匹配完成之后，所有在匹配过程中本地化的变量都会丢失。
---
## Page 364
338
第7章：Perl
下面是一个例子：
my$Count = undef;
our $TmpCount=0;
$text =~ m{
（?>\d+（?{1ocal（$TmpCount）=$TmpCount+1}）\b1\w+1\s+）+$
（？{SCount=STmpCount））#最后特sCount存入非本地变量中
}×;
if (defined $Count）{
print
"Count is $Count.\n"；
}else(
print "no match\n";
看起来这么做有点儿折腾，但这个例子的目的是说明正则表达式中本地化变量的工作机制。
我们会在第344页的“模拟命名捕获”中见到实际的应用。
关于内嵌代码和my变量的忠告
AWarningAboutEmbedded CodeandmyVariables
如果my变量在正则表达式之外声明，那么在正则表达式之中的内嵌代码引用，就必须非常
小心，Perl中变量绑定的详细规定可能会产生重大的影响。在讲解这个问题之前，我必须
指出，如果正则表达式的内嵌代码中使用的都是全局变量就没有这种问题，完全可以跳过
这一节。忠告：这一节难度不小。
下面的例子说明了问题：
sub CheckOptimizer
my $text = shift;
#第一个参数是要检索的文本
my $start = undef;
#记录表达式第一次应用的位置
my $match = $text =~m{
（?{ $start = S-[o] if not defined $start))
#保存第一次应用的位置
d#这是需要测试的正则表达式
x;
if (not defined $atart）(
print"The whole match was optimized away.\n";
if （Smatch）（
#这种情况不可能发生！
print “Whoa,but it matched!How can this happen!?\n";
}elsif （$start == 0）（
print "The match start was not optimized.\n*;
}else{
print "The optimizer started the match at character $start.\n"
程序中包含3个my变量，但是只有sstart与此问题有关（因为其他两个并没有在内嵌代
---
## Page 365
巧用Perl的专有特性
339
码中引用）。程序首先把sstart设为未定义的值，然后应用开头元素为内嵌代码的匹配，
只是在sstart未设定时，内嵌代码结构才会把sstart设置到尝试开始位置。“本次尝试的
起始位置”取自s-[0]（@-的第1个元素302）。
所以，如果调用：
CheckOptimizer(*test 123");
结果就是：
The optimizer startedthematch atcharacter 5.
这没有问题，但如果我们再运行一次，结果就成了：
Thewholematchwasoptimizedaway
whoa, but it matched! How can this happen!?
即使正则表达式检查的文本没有变化（而且正则表达式本身也没有变化），结果却不一样了，
你发现问题了吗？问题就在于，在第二次调用中编译正则表达式时，内嵌代码中的sstart
取的是第一次运行之后设置的值。此函数的其他部分使用的sstart其实是一个新的变量一
一每次函数调用的开始，执行my都会重新设置这个值。
问题的关键就在于，内嵌代码中的my变量“锁定”（用术语来说就是：绑定bound）在具体
的my变量的实例中，此实例在正则表达式编译时激活。（正则表达式的编译详见348页）
每次调用checkOptimizer，都会创造一个新的sstart实例，但是用户很难以察觉，内嵌
代码中的sstart仍然指向之前的值。这样，函数其他部分使用的sstart实例并没有接收到
正则表达式中传递给它的值。
这种类型的实例绑定称为“闭包（closure）”，ProgrammingPerl和ObjectOrientedPerl之类
的书中介绍了这种特性的价值所在。关于闭包，Perl社群中存在争议，比如本例中闭包究竟
是不是一种“特性”，就有不同看法。对大多数人来说，这很难理解。
解决的办法是，不要在正则表达式内部引用my变量，除非你知道正则文字的编译与my实
例的更新是一致的。比如我们知道，第345页SimpleConvert子程序中使用的my变量
SNestedStuffRegex没有这个问题，因为sNestedStuffRegex只有一个实例。这里的my
不在函数或者循环之中，所以它只会在脚本载人时创建一次，然后一直存在，直到程序终
止。
---
## Page 366
340
第7章：Perl
使用内嵌代码匹配嵌套结构
MatchingNested Constructsoith Embedded Code