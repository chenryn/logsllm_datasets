# 五、保持数据的持久性
在本章中，我们将通过介绍 Docker 卷的所有内容来介绍如何保持重要数据的持久性、安全性和独立于容器。我们将讨论各种主题，包括以下内容:
*   Docker 内部映像
*   部署您自己的存储库实例
*   瞬态存储
*   持久存储
    *   绑定安装
    *   命名卷
    *   可重定位卷
*   用户和组标识处理
虽然我们不会涵盖所有可用的存储选项，尤其是那些特定于编排工具的选项，但本章应该让您更好地了解 Docker 如何处理数据，以及您可以做些什么来确保数据保持在您想要的方式。
# Docker 内部映像
为了更好地理解为什么我们需要持久数据，我们首先需要详细理解 Docker 如何处理容器层。在前面的章节中，我们已经详细介绍了这个主题，但是在这里，我们将花一些时间来了解封面下发生了什么。我们将首先讨论 Docker 目前如何处理容器中的书面数据。
# 映像是如何分层的
如前所述，Docker 将组成映像的数据存储在一组离散的只读文件系统层中，当您构建映像时，这些文件系统层相互堆叠。对文件系统所做的任何更改都像透明幻灯片一样堆叠在彼此之上，以创建完整的树，任何具有较新内容的文件(包括被完全删除的文件)都将通过每个新层来掩盖旧文件。对于容器的基本处理，我们以前的理解深度可能已经足够了，但是对于高级使用，我们需要知道数据如何被处理的全部内部信息。
当您用同一个基本映像启动多个容器时，所有容器都被赋予了与原始映像相同的文件系统层集，因此它们从完全相同的文件系统历史开始(除了任何装载的卷或变量)，正如我们所期望的那样。但是，在启动过程中，会在映像的顶部添加一个额外的可写层，该层会保留写入该特定容器中的任何数据:
![](img/ff574c3c-14b2-4922-a4b8-b3dfee7d644f.png)
如您所料，任何新文件都会写入这个顶层，但这个层实际上与其他层不是同一类型，而是一种特殊的**写入时复制** ( **CoW** )类型。如果您正在容器中写入的文件已经是其中一个底层的一部分，Docker 将在新的层中复制它，屏蔽旧的层，从那时起，如果您读取或写入该文件，CoW 层将返回其内容。
如果您在不尝试保存这个新的 CoW 层或不使用卷的情况下销毁这个容器，正如我们之前在不同的上下文中所经历的那样，这个可写层将被删除，并且该容器写入文件系统的所有数据都将丢失。事实上，如果您通常认为容器只是具有薄且可写的 CoW 层的映像，您可以看到这个分层系统是多么简单而有效。
# 持久化可写 CoW 层
在某个时候，您可能希望保存可写容器层，以便以后用作常规映像。虽然这种类型的映像拼接是非常不鼓励的，我也倾向于同意这一点，但是当您无法以其他方式研究容器代码时，您可能会发现它可以为您提供无价的调试工具。要从现有容器创建映像，需要`docker commit`命令:
```
$ docker commit --help
Usage:  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
Create a new image from a container's changes
Options:
 -a, --author string    Author (e.g., "John Hannibal Smith ")
 -c, --change list      Apply Dockerfile instruction to the created image
 --help             Print usage
 -m, --message string   Commit message
 -p, --pause            Pause container during commit (default true)
```
如你所见，我们只需要一些基本信息，其余的由 Docker 负责。不如我们自己试试:
```
$ # Run a new NGINX container and add a new file to it
$ docker run -d nginx:latest
2020a3b1c0fdb83c1f70c13c192eae25e78ca8288c441d753d5b42461727fa78
$ docker exec -it \
              2020a3b1 \
              /bin/bash -c "/bin/echo test > /root/testfile"
$ # Make sure that the file is in /root
$ docker exec -it \
              2020a3b1 \
              /bin/ls /root
testfile
$ # Check what this container's base image is so that we can see changes
$ docker inspect 2020a3b1 | grep Image
 "Image": "sha256:b8efb18f159bd948486f18bd8940b56fd2298b438229f5bd2bcf4cedcf037448",
 "Image": "nginx:latest",
$ # Commit our changes to a new image called "new_nginx_image"
$ docker commit -a "Author Name " \
                -m "Added a test file" \
                2020a3b1 new_nginx_image
sha256:fda147bfb46277e55d9edf090c5a4afa76bc4ca348e446ca980795ad4160fc11
$ # Clean up our original container
$ docker stop 2020a3b1 && docker rm 2020a3b1
2020a3b1
2020a3b1
$ # Run this new image that includes the custom file
$ docker run -d new_nginx_image
16c5835eef14090e058524c18c9cb55f489976605f3d8c41c505babba660952d
$ # Verify that the file is there
$ docker exec -it \
              16c5835e \
              /bin/ls /root
testfile
$ # What about the content?
$ docker exec -it \
              16c5835e \
              /bin/cat /root/testfile
test
$ See what the new container's image is recorded as
$ docker inspect 16c5835e | grep Image
 "Image": "sha256:fda147bfb46277e55d9edf090c5a4afa76bc4ca348e446ca980795ad4160fc11",
 "Image": "new_nginx_image",
$ # Clean up
$ docker stop 16c5835e && docker rm 16c5835e
16c5835e
16c5835e
```
The `docker commit -c` switch is very useful and adds a command to the image just like the Dockerfile would and accepts the same directives that the Dockerfile does, but since this form is so rarely used, we have decided to skip it. If you would like to know more about this particular form and/or more about `docker commit`, feel free to explore [https://docs.docker.com/engine/reference/commandline/commit/#commit-a-container-with-new-configurations](https://docs.docker.com/engine/reference/commandline/commit/#commit-a-container-with-new-configurations) at leisure.
# 运行您自己的映像注册表
在前一章中，在 Swarm 部署期间，我们收到了关于不为我们的映像使用注册表的警告，这是有充分理由的。我们所做的所有工作都是基于我们的映像只对我们本地的 Docker Engine 可用，因此多个节点无法使用我们构建的任何映像。对于绝对简单的设置，您可以使用 Docker Hub([https://hub.docker.com/](https://hub.docker.com/))作为托管您的公共映像的选项，但是由于几乎每个**虚拟私有云(VPC)** 集群都使用自己的私有注册表内部实例来实现安全性、速度和隐私，如果您想探索它，我们将把 Docker Hub 留给您作为练习，我们将在此介绍如何运行我们自己的注册表。
Docker has recently come out with a service called Docker Cloud ([https://cloud.docker.com/](https://cloud.docker.com/)), which has private registry hosting and continuous integration and may cover a decent amount of use cases for small-scale deployments, though the service is not free past a single private repository at this time. Generally, though, the most preferred way of setting up scalable Docker-based clusters is a privately hosted registry, so we will focus on that approach, but keep an eye on Docker Cloud's developing feature set as it may fill some operational gaps in your clusters that you can defer as you build other parts of your infrastructure.
为了在本地托管注册表，Docker 提供了 Docker 注册表映像(`registry:2`)，您可以将其作为具有各种后端的常规容器运行，包括以下内容:
*   `inmemory`:带有本地内存映射的临时映像存储器。这仅建议用于测试。
*   `filesystem`:使用常规文件系统树存储映像。
*   `s3`、`azure`、`swift`、`oss`、`gcs`:存储后端的云供应商特定实现。
让我们部署一个带有本地文件系统后端的注册表，看看如何使用它。
Warning! The following section does not use TLS-secured or authenticated registry configuration. While this configuration might be acceptable in some rare circumstances in isolated VPCs, generally, you would want to both secure the transport layer with TLS certificates and add some sort of authentication. Luckily, since the API is HTTP-based, you can do most of this with an unsecured registry with a reverse-proxied web server in front of it, like we did earlier with NGINX. Since the certificates need to be "valid" as evaluated by your Docker client and this procedure is different for pretty much every operating system out there, doing the work here would generally not be portable in most configurations, which is why we are skipping it.
```
$ # Make our registry storage folder
$ mkdir registry_storage
$ # Start our registry, mounting the data volume in the container
$ # at the expected location. Use standard port 5000 for it.
$ docker run -d \
 -p 5000:5000 \
 -v $(pwd)/registry_storage:/var/lib/registry \
 --restart=always \
 --name registry \
 registry:2 
19e4edf1acec031a34f8e902198e6615fda1e12fb1862a35442ac9d92b32a637
$ # Pull a test image into our local Docker storage
$ docker pull ubuntu:latest
latest: Pulling from library/ubuntu
Digest: sha256:2b9285d3e340ae9d4297f83fed6a9563493945935fc787e98cc32a69f5687641
Status: Downloaded newer image for ubuntu:latest
$ # "Tag our image" by marking it as something that is linked to our local registry
$ # we just started
$ docker tag ubuntu:latest localhost:5000/local-ubuntu-image
$ # Push our ubuntu:latest image into our local registry under "local-ubuntu-image" name
$ docker push localhost:5000/local-ubuntu-image
The push refers to a repository [localhost:5000/local-ubuntu-image]
latest: digest: sha256:4b56d10000d71c595e1d4230317b0a18b3c0443b54ac65b9dcd3cac9104dfad2 size: 1357
$ # Verify that our image is in the right location in registry container
$ ls registry_storage/docker/registry/v2/repositories/
local-ubuntu-image
$ # Remove our images from our main Docker storage
$ docker rmi ubuntu:latest localhost:5000/local-ubuntu-image
Untagged: ubuntu:latest
Untagged: localhost:5000/local-ubuntu-image:latest