# 技术分享：通过JMX访问破坏Apache Tomcat

## 译文声明
本文为翻译文章，原文来源：nccgroup.trust。具体表达及含义以原文为准。

**翻译者**: [myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)  
**预估稿费**: 300 RMB  
**投稿方式**: 发送邮件至 [linwei#360.cn](mailto:PI:EMAIL)，或登录[网页版](http://bobao.360.cn/contribute/index) 在线投稿

## 前言
本文主要探讨了Tomcat服务器配置中的一些问题，这些问题可能导致Java管理扩展（JMX）服务暴露于外部网络，从而被用于远程监控和管理。攻击者可以利用Java开发工具包（JDK）中的JConsole工具滥用这些功能，从而获取系统的控制权限。本文旨在强调这种新的攻击方法，并提供有效的缓解措施，帮助渗透测试团队评估使用此类配置的Tomcat服务器的安全状态。

已将该问题提交给Tomcat团队，目前将其归类为程序的已知功能，暂无补丁提供。Tomcat官方指出：
- Java JMX访问等同于admin/root访问权限。
- 敏感信息如session IDs可通过JMX访问。
- 隐藏这些信息会严重降低JMX接口的实用性。
- Tomcat文档通常不涵盖JMX主题，但在其他地方有所涉及。
- 建议读者遵循本文第九节中的建议。

## Tomcat的JMX服务
Apache Tomcat的JMX服务通常用于通过网络监控和管理远程Tomcat实例，通过Java远程方法调用（RMI）与服务器交互。默认情况下，此服务未开启，与其他常见的Java企业版服务器（如JBoss）不同。要启用Tomcat的JMX服务，需在`setenv.sh/setenv.bat`脚本中进行简单修改，设置环境变量和Catalina进程启动时的属性。

JMX服务可配置为支持认证，但默认情况下未开启。当启用认证（强烈推荐），其授权模型允许两个不同的用户角色：只读和读写。然而，网络上的相关配置信息较少且过时。例如，在某些指南中，虽然提供了简单的配置步骤，但并未强调启用认证的重要性及设置强密码的必要性。因此，在现场渗透测试期间，经常发现该接口未配置认证或使用弱密码。

## 决定是否启用Tomcat的JMX接口
通常需要使用nmap扫描来确认Tomcat关联的JMX接口是否已启动并在远程服务器上运行。建议使用`--version-all`和`-A`标志，以便触发附加探测器检测非标准端口上的JMX接口存在情况。例如：

```bash
nmap -p- -sV -A --version-all 192.168.11.128
```

扫描结果可能显示一些未明确标识的端口。添加`--version-all`标志后，可以看到更多详细信息。需要注意的是，单独使用nmap无法确定Tomcat JMX接口是否启用了认证。

## 使用JConsole连接JMX服务
JConsole是JDK中的一个工具，可在Windows和Linux系统中找到。若要远程连接到Tomcat JMX接口，请选择“Remote Process”选项并输入目标IP地址和端口号。如果SSL未启用，JConsole会提示继续使用不安全连接。启用认证时，会提示输入有效凭据。连接失败的常见原因之一可能是防火墙阻止传入流量到其他Java RMI进程使用的端口。

## 使用JMX读取Tomcat管理器的密码
假设Tomcat启用了管理器应用程序，但没有使用弱凭据。在这种情况下，攻击者可以通过JConsole连接到远程Tomcat JMX接口，选择MBeans选项卡，展开Users目录，查看泄漏的用户名和密码。这使得攻击者能够使用发现的凭据连接到远程Tomcat管理器，从而控制服务器。

## 日志循环函数中的目录遍历
即使Tomcat管理器不可用，仍有一种方法可以通过JMX接口浏览服务器。日志循环函数（`rotate`）允许备份Tomcat访问日志到服务器上的文件中。通过调用此函数，攻击者可以在服务器任意目录中存储文件，并执行操作系统命令。

### 示例
在Bitnami Linux VM上运行Tomcat 8.0.39，并配置服务器公开JMX端口。调用`rotate`函数并将日志文件保存到`/tmp/test.log`，确认文件已成功创建并包含访问日志内容。

```bash
bitnami@ubuntu:/tmp$ cat /tmp/test.log
192.168.11.1 - - [08/Dec/2016:14:50:42 +0000] "GET /test-log-request HTTP/1.1" 404 1026
bitnami@ubuntu:/tmp$
```

通过这种方式，攻击者可以进一步探索服务器并执行恶意操作。