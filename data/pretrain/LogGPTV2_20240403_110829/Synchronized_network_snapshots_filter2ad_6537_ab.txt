We note that in pursuit of this goal, a truly simultaneous
network-wide snapshot is impossible without either freezing
the network or using prohibitively expensive hardware like
atomic clocks. Instead, our goal is a snapshot primitive with
the following two properties:
• Causal consistency: If a measurement in snapshot S in-
cludes the e"ect of event e (e.g., a packet reception), S
also includes the e"ects of every event that led to e.
• Near synchronicity: The time di"erence between every
pair of measurements in the snapshot is guaranteed to
be at most d, where d  sid then
3
4
5
6
7
8
9
10
11
12
13
/* New snapshot */
for i ← sid + 1 to pkt.sid do
snaps[i] ← state
sid ← pkt.sid
else if pkt.sid  sid then
16
17
18
19
20
for i ← sid + 1 to pkt.sid do
snaps[i] ← state
sid ← pkt.sid
All snapshots up to sid are complete
Update state and set pkt.sid ← sid
Figure 3: Per-processing-unit pseudocode for our ide-
alized network snapshot protocol (w/ and w/o channel
state). The match-action approximation and other de-
tails are described in Sections 5 and 6. Global state pre-
ceded by ‘−’ is only necessary for channel state.
message drops, and bounded delay. When considering a net-
work of routers, few if any of these assumptions hold. Instead,
our network snapshot protocol operates over the network
of per-port, per-direction processing units connected by log-
ical communication channels (either a physical link or an
internal, logical CoS queue). This formulation gives us a
distributed system of linearizable nodes connected by FIFO
channels. To handle drops and delays, we take inspiration
from subsequent work (e.g., Li et. al. [27]) and classical net-
work assumptions. While snapshot protocols exist for other,
more relaxed system models, they typically require massive
storage requirements, delaying of messages, or they limit
the gathered state to packet/byte counts.
Figure 3 depicts our algorithm in pseudocode. Every pro-
cessing unit keeps track of its current snapshot ID, s, initial-
ized to 0. They also keep track of the local state that is the
target of the snapshot. Note that this requires snapshots of
shared state (e.g., a switch-wide packet counter) be taken as
a set of local snapshots or re-implemented as local state.
Every packet carries a snapshot ID "eld, sp that indicates
the epoch from which it was sent (similar to [27]). ‘Piggy-
backing’ of markers on every packet ensures that snapshot
406
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Nofel Yaseen, John Sonchack, and Vincent Liu
/6%’;+
!"#$%&’
()*+%&,
--’
.&$#&,’
/,&0&+%
1
$+?&#1
*73
6#
4*5
1;#-*%6#+.FG%
+#%1&2%
D>"*55
6#
6#
D>"*55.->%
+#%D-7%
=#5+3
,-.+.’+.#-%
/"#0%
1&23
4*5
/.;;%88%
C*’7*"
A*0#B*%
88%C*’7*"
4*5
!"#$%
&’()*+
Figure 5: An egress processing unit. Shaded boxes involve stateful registers. Not shown is the CPU egress path.
ID updates are resilient to packet loss. On receipt of a packet,
processing units compare the packet’s carried snapshot ID
with their local ID. If sp > s, the upstream neighbor has
begun a new snapshot, and the current node should as well.
The local state is immediately saved and the local ID is up-
dated (s ← sp ). If, on the other hand, sp  s ′. As
with snapshot initiation, we discuss the practical concerns
of snapshot completion in real networks in Section 6.
Proof sketch. The proof of correctness for our algorithm
mirrors that of prior work, but we provide a brief sketch of
the proof here. For each state-a#ecting event e on node n,
e ∈ PRE (‘pre-snapshot’) if it occurs before the local snapshot
on n. The algorithm is correct if, for all e ∈ PRE, if e ′ happens
causally before e, then e ′
∈ PRE.
(1) If e and e ′ are on the same processing unit, the above is
trivially true.
(2) Otherwise, e ∈ PRE ⇒ e ′
∈ PRE by contradiction.
(a) Assume for snapshot i that e ′ ! PRE is a send of
packet p and e ∈ PRE is the matching receive.
(b) Since e ′ ! PRE, p must be carrying snapshot ID i.
(c) That is not possible since e ∈ PRE, thus there is a
contradiction.
(d) Similar logic can be applied to other relationships
between e and e ′.
5 DATA PLANE COORDINATION
This section is the "rst of two that describes in detail the