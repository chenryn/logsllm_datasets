fi
```
- [ ] If the value of PET doesn't match dog, the script will return a nonzero status code.
- [ ] There is nothing wrong with it. The condition checks the value of PET perfectly.
- [x] It will fail if the user hits the Enter (Return) key without entering a pet name when prompted.
- [ ] The then statement needs to be on a separate line.
#### Q33. How can you gather history together for multiple terminals?
- [ ] It just works by default.
- [ ] `history --shared`
- [ ] `history --combined`
- [x] `shopt -s histappend`
#### Q34. What is the difference between the $@ and $\* variables?
- [x] `$@` treats each quoted argument as a separate entity. `$*` treats the entire argument string as one entity.
- [ ] `$*` treats each quoted argument as a separate entity. `$@` treats the entire argument string as one entity.
- [ ] `$*` is used to count the arguments passed to a script, `$@` provides all arguments in one string.
- [ ] `$*` is the wildcard that includes all arguments with word splitting, `$@` holds the same data but in an array.
#### Q35. Which command is being run in this script to check if file.txt exists?
```bash
if [ -f file.txt ]; then
    echo "file.txt exists"
fi
```
- [ ] `/usr/bin/test`
- [ ] `/usr/bin/[`
- [x] `the built-in [ command`
- [ ] `/usr/bin/[[`
#### Q36. What will be the output of this script?
```bash
#!/bin/bash
Linux=('Debian' 'Redhat' 'Ubuntu' 'Android' 'Fedora' 'Suse')
x=3
Linux=(${Linux[@]:0:$x} ${Linux[@]:$(($x + 1))})
echo "${Linux[@]}"
```
- [ ] Debian Redhat Ubuntu Android Fedora Suse
- [ ] Android
- [ ] Fedora Suse
- [x] Debian Redhat Ubuntu Fedora Suse
#### Q37. Which file allows you to save modifications to the shell environment across sessions?
- [ ] `/etc/bash.conf`
- [x] `~/.profile`
- [ ] `/etc/bashprofile`
- [ ] `~/profile`
#### Q38. Given the listed permissions on data.txt is it possible that user2 could have read, write, and execute permissions on data.txt?
```bash
$ ls -l
total 0
-rwx------+ 1 user1 user1 0 Oct 27 10:54 data.txt
```
- [ ] No, it's clear that user2 does not have read, write, and execute permissions.
- [x] Yes, the `+` at the end of the 10-digit permission string signifies there's an access control list. This could possibly give user2 permissions not visible by `ls -l`.
- [ ] It's possible that SELinux provides read, write, and execute permissions for user2 which are not visible with `ls -l`.
- [ ] Yes, the `+` at the end of the 10-digit permission string signifies there's an extended attribute set. This could give user2 permissions to read, write, and execute data.txt.
#### Q39. What does this script accomplish?
```bash
#!/bin/bash
declare -A ARRAY=([user1]=bob [user2]=ted [user3]=sally)
KEYS=(${!ARRAY[@]})
for (( i=0; $i  out.txt
```
- [ ] No such file
- [ ] ls: cannot access nonexistentfile: No such file or directory
- [x] Nothing, out.txt will be empty.
- [ ] It will be the contents of nonexistentfile.
#### Q42. For the script to print "Is numeric" on screen, what would the user have to enter when prompted?
```bash
#!/bin/bash
read -p "Enter text " var
if [[ "$var" =~ "^[0-9]+$" ]];then
    echo "Is numeric"
else
    echo "Is not numeric"
fi
```
- [ ] Any sequence of characters that includes an integer
- [ ] The user would have to enter the character sequence of `^[0-9]]+$` Only this will prove to be true and "Is numeric" would be printed on the screen due to incorrect syntax. By encapsulating the regular expression in double quotes every match will fail except the text string `^[0-9]+$`
- [ ] One or more characters that only includes integers
- [x] Due to a syntax error it is impossible to get the script to print "Is numeric"
The regex must not be quoted to work properly.
#### Q43. How would you find the last copy command run in your history?
- [ ] `history | find cp`
- [x] `history | grep cp`
- [ ] `grep cp history`
- [ ] `cp history`
#### Q44. In order to write a script that iterates through the files in a directory, which of the following could you use?
- [x] `for i in $(ls); do ... done`
- [ ] `for $(ls); do ... done`
- [ ] `for i in $ls; do ... done`
- [ ] `for $ls; do ... done`
#### Q45. When executing a command and passing the output of that command to another command, which character allows you to chain these commands together?
- [x] `|`
- [ ] `->`
- [ ] `\#`
- [ ] `@`
#### Q46. In the script shown below, what is **greeting**?
```bash
#!/usr/bin/env bash
greeting="Hello"
echo $greeting, everybody!
```
- [ ] a command
- [ ] a loop
- [ ] a parameter
- [x] a variable
#### Q47. Which statement checks whether the variable num is greater than five?
- [ ] `(( num -gt 5 ))`
- [ ] `[[$num -lt 5]]`
- [x] `(( num > 5 ))`
- [ ] `num > 5`
[reference](https://tldp.org/LDP/abs/html/dblparens.html)
#### Q48. Using Bash extended globbing, what will be the output of this command?
```bash
$ ls -l
apple
banana
bananapple
banapple
pineapple
strawberry
$ shopt -s extglob
$ ls -l @(ba*(na)|a+(p)le)
```
- [x] a
```bash
apple
banana
```
- [ ] b
```bash
apple
banana
bananapple
banapple
pineapple
strawberry
```
- [ ] c
```bash
apple
banana
bananappple
banapple
pineapple
```
- [ ] d
```bash
apple
banana
bananapple
banapple
pineapple
```
[reference](https://www.linuxjournal.com/content/bash-extended-globbing)
#### Q49. When used from within a script, which variable contains the name of the script?
- [x] \$0
- [ ] \$# // number of positional parameters
- [ ] \$\$ // pid of the current shell
- [ ] \$@ // array-like construct of all positional parameters
#### Q50. What does the + signify at the end of the 10-digit file permissions on data.txt?
```bash
ls -l
-rwx------+ 1 user1 u1 0 Oct 1 10:00 data.txt
```
- [ ] There is an SELinux security context
- [ ] The sticky bit is set and the file will stay in RAM for speed
- [x] There is an access control list
- [ ] There is an extended attribute such as immutable set
#### Q51. In Bash, what does the command below do?
```bash
cd -
```
- [x] It moves you to the directory you were previously in.
- [ ] It moves you to your home folder (whatever your current working directory happens to be).
- [ ] It deletes the current directory.
- [ ] It moves you one directory above your current working directory.
#### Q52. What does this command do?
```bash
cat > notes -
```
- [x] Accepts text from standard input and places it in "notes"
- [ ] Creates "notes" and exits
- [ ] Outputs the content of notes and deletes it
- [ ] Appends text to the existing "notes"
#### Q53. What is the output of:
```bash
VAR="This old man came rolling"
echo "\${VAR//man/rolling}"
```
- [x] This old rolling came rolling
- [ ] This old man came man
- [ ] This old man came rolling
- [ ] This old came
#### Q54. The shell looks at the contents of a particular variable to identify which programs it can run. What is the name of this variable?
- [ ] $INCLUDE
- [x] $PATH
- [ ] $PROGRAM
- [ ] $PATHS
#### Q55. What statement would you use to print this in the console?
`Shall we play a game? yes\no`
- [ ] `echo "Shall we play a game? yes/\no"`
- [ ] `echo "Shall we play a game\? yes\\no"`
- [x] `echo "Shall we play a game? yes\\no"`
- [ ] `echo "Shall we play a game? yes\no"`
#### Q56. Given a directory with these seven files, what would remain after executing these commands?
```bash
archive.tar
image1.gif
image1.jpg
image2.gif
image2.jpg
textfile1.txt
textfile2.txt
----------
`shopt -s extglob
rm !(*gif|*jpg)`
```
- [ ] a
```bash
archive.tar
image1.gif
image1.jpg
image2.gif
image2.jpg
textfile1.txt
textfile2.txt
```
- [ ] b
```bash
archive.tar
textfile1.txt
textfile2.txt
```
- [ ] `c : All of this files will be deleted`
- [x] d:
```bash
image1.gif
image1.jpg
image2.gif
image2.jpg
```
#### Q57. The code below seems to work and outputs "8 is greater than 5". However, what unexpected result will tell you it is not functioning properly?
```bash
#!/bin/bash
var="8"
if [ $var > 5 ]; then
    echo "$var is greater than 5"
fi
```
- [ ] There will be no unexpected results. This script works as is and the output will be "8 is greater than 5".
- [ ] The comparison will not be able to handle floating-point numbers, as Bash only handles integers. So this example will output an error message if the value of $var is changed to "8.8".
- [x] There will be a file in the current directory named 5.
- [ ] The variable $var is not quoted, which will lead to word splitting. This script will fail with a "unary operator expected" message if you change the value of
#### Q58. What is the result of this script?
![question](images/Q60/question.png?raw=png)
- [ ] It removes the directory 'foo' and the files contained within it.
- [ ] It removes all files except those in the current directory.
- [x] It removes all files in the current directory.
- [ ] It removes all files except those in the 'foo' directory.
#### Q59. Which one is true?
- [x] SELinux policy rules are checked after DAC rules.
- [ ] SELinux policy rules are checked before DAC rules
- [ ] SELinux policy rules are never checked after DAC rules.
- [ ] None of these
[reference](https://unix.stackexchange.com/questions/16828/what-roles-do-dac-file-permissions-acl-and-mac-selinux-play-in-linux-file-s)
#### Q60. Which does the below command do?
```bash
w
```
- [ ] It doesn't display information about the users currently on the machine.
- [x] It displays information about the users currently on the machine.
- [ ] It displays information about the users currently on the another machine.
- [ ] None of these
#### Q61. Which sed options should you use to change the second-to-last instance of variable to rock so it would read:
A constant is a variable that is a rock that isn't variable
```bash
var="A constant is a variable that is a variable that isn't variable"
echo "$var" | sed _____
```
- [x] `s/\(.*\)variable\(.*variable\)/\1rock\2/'`
- [ ] `s/variable/rock/'`
- [ ] `s/variable/rock/g'`
- [ ] `s/(.*\)variable\(.*variable\)/\1rock\2/'`
#### Q62. To make a Bash script named script.sh executable, what should you run?
- [ ] exec script.sh
- [x] chmod +x script.sh
- [ ] bash script.sh
- [ ] source script.sh
#### Q63. How can you create a shared terminal in a Bash shell?
- [x] screen
- [ ] screen -X
- [ ] screen --shared
- [ ] terminal -shared