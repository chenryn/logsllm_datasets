spread much more evenly along the diagonal. Yet, these results clearly show
that certiﬁcates typically are replaced almost immediately even when there are
large overlaps. While this may suggest that the old certiﬁcates in some cases are
invalidated prematurely (especially in the case they are replaced with a certiﬁ-
cate of the same key), it should be noted that websites or CAs may select to
change certiﬁcates prematurely for other reasons (e.g., to add/remove domains
or subdomains that can use the key).
5 Towards Short-Lived Certiﬁcates
Motivated by the success of recent automation systems (observed in prior sec-
tions), in this section we present a data-driven case study that take current
trends of the validity periods and reuse of keys (characterized in prior sections)
to the extreme. After presenting the problem and highlighting current trends, we
ﬁrst sketch out a solution that combines several new ideas to address the revoca-
tion problem that currently leaves all web users vulnerable to man-in-the-middle
attacks on most compromised keys long after a certiﬁcate has been revoked. Sec-
ond, we demonstrate the eﬀectiveness of our solution using the diﬀerent subsets
of the CRs identiﬁed and characterized in the previous sections as baselines.
5.1 Motivation
Revocation problem: While we have shown that some CAs (e.g., Let’s
Encrypt, Google, cPanel) mostly issue certiﬁcates with roughly 90-day valid-
ity periods, even these validity periods can leave users vulnerable to attacks for
a long time period. One reason for this is that most browsers (especially mobile
browsers) do not suﬃciently verify whether an X.509 certiﬁcate has been revoked
or not [55]. While, as discussed in the introduction, Chrome and Firefox browsers
periodically push a by-them-selected set of revocations to their users [41,59], the
Changing of the Guards: Certiﬁcate and Public Key Management
67
frequency and size of these revocation sets still leave users of most revoked (leaf)
certiﬁcates vulnerable long after the compromised certiﬁcates have been revoked.
A Case for Shorter Validity Periods: One way to address the lack of revo-
cation checks is to use short-lived certiﬁcates. This is not new [62,71,76]. One
reason this idea has not been widely adopted is due to the lack of automation in
past systems (e.g., wide-scale automation was ﬁrst implemented and deployed
by Let’s Encrypt [9]), but also due to the signiﬁcant increase in the number of
certiﬁcates that would need to be handled.
Current Status: We have seen several success stories of automated solutions,
including the eﬀectiveness of Let’s Encrypt’s automated solutions. In addition,
our results show that Let’s Encrypt allows its customers to eﬀectively reuse the
same key over multiple certiﬁcates in a resource eﬀective way.
Overhead Tradeoﬀs: There are important security-overhead tradeoﬀs to con-
sider with short-lived certiﬁcates. On one hand, short validity periods reduce the
attacker’s time window and the potential impact of a compromised key. How-
ever, its use also increases the issuance and replacement overheads, and puts
much tighter and less ﬂexible timing requirements on certiﬁcate replacements.
It is easy to see how automation can help resolve timing issues in the cer-
tiﬁcate distribution between CAs and their customers. However, there still are
signiﬁcant overheads associated with the subject-key veriﬁcation during issuance
and it is unclear how Certiﬁcate Transparency (CT) logs [42,50,69] would han-
dle the increased submission rates resulting from use of short-lived certiﬁcates.
For example, while splitting a log into several logs may oﬀset the load that a
single log would observe, it does not reduce the combined load of the logs. To
provide similar response times, for example, the combined set of resources of
such solution would hence still need to scale with the load.
The primary purpose of CT is to provide public immutable records that
help detect maliciously or mistakenly issued certiﬁcates. Since 2018, Chrome
and Apple require all newly issued certiﬁcates to be included in CT logs [13,63].
These are public, auditable, append-only logs that at submission return a Signed
Certiﬁcate Timestamps (SCTs) that the servers can then deliver with their cer-
tiﬁcates so to prove that the certiﬁcate has been logged. However, CT logs do
not log revocations and do not protect from misuse of a revoked certiﬁcate.
Without new methods to reduce the overheads associated with short-lived
certiﬁcates, it is unlikely that short-lived, CA-issued certiﬁcates with validity
periods of one or a few days will see extended use in the near future.
5.2 Parent-Child Certs: Limiting the Cost of Short-Lived
Certiﬁcates
We next propose a novel approach to address the above tradeoﬀ so as to achieve
the advantages of short-lived certiﬁcates while keeping the overheads low for
CAs. Our approach makes use of three key observations.
68
C. M. Bruhner et al.
First, and most importantly, we note that signiﬁcant overhead savings can
be achieved by decoupling the subject-key veriﬁcation done by CAs and their
issuance of certiﬁcates conﬁrming the validity of these pairings. Such decoupling
allows CAs to easily create many short-lived certiﬁcates that reuse the same
key without requiring new domain validation checks. As long as the owner of a
key does not report to the CA that the key has been compromised, the CA can
continue to generate short-lived certiﬁcates with that key.
Second, when using short-lived certiﬁcates, it is important to have a fallback
mechanism when a certiﬁcate is not replaced in time. A key observation here is
that the current Online Certiﬁcate Status Protocol (OCSP) [39] solutions pro-
vide an excellent fallback mechanism (that can be called upon at such instances).
OCSP is already implemented by all CAs and the server load is primarily deter-
mined by the request volume, not by the number of certiﬁcates with tracked
status. (Memory and disk to keep track of certiﬁcates are not expected to be
bottlenecks for an individual CA.)
Third, with today’s high CT compliance, the load of CT logs would be pro-
portional to the rate that new certiﬁcates are issued. As a naive implementation
of short-lived certiﬁcates would result in a huge increase in the issuance rate of
new certiﬁcates (e.g., Fig. 15, discussed later in this section), this could result
in a very high load also at CT logs. To address this issue, we introduce the
concept of parent and child certiﬁcates. This concept would enable the CAs to
submit a parent certiﬁcate to the CT logs as a means to obtain a special SCT
that can be used as inclusion proof for all issued child certiﬁcates that use the
same subject-key mapping and for which the validity period t is a subset of the
parent’s validity period T (i.e., t ⊆ T ).
The idea of logging a parent on behalf of its child certiﬁcates is inspired by the
use of pre-certiﬁcates in current CT systems [51]. Pre-certiﬁcates are created and
logged prior to certiﬁcate issuance in order to obtain an SCT for the certiﬁcate,
but include a critical poison extension that ensures that it can not be validated
by a client.
By only logging parent certiﬁcates, the CAs can help keep the load on CT
logs low even when issuing many more child certiﬁcates. An alternative idea of
how to eﬀectively obtain an SCT for a larger set of certiﬁcates (in our case a set
of child certiﬁcates) is to introduce speciﬁc log entries into CT logs [36], where
several short-lived certiﬁcates can be contained in one CT entry. Our solution
would work with this approach too.
Motivated by these three key observations, we propose an approach inspired
by the general ideas of a three-phased certiﬁcate, ﬁrst presented by Rivest in
1998 [66]. In contrast to regular certiﬁcates (as used today), which only have
two phases: probable (check revocation status) and expired, Rivest suggested
that certiﬁcates should have three phases: guaranteed, probable, expired. The
idea is to make checking revocation status unnecessary during the ﬁrst (guaran-
teed) phase and only check in the second (probable) phase. To combine the ﬁrst
two observations, we extend Rivest’s idea to separate the key generation and
validation process from the certiﬁcate generation process. To do this: (1) Parent
Changing of the Guards: Certiﬁcate and Public Key Management
69
Fig. 14. Parent-child issuance overview. Left-hand side shows parent certiﬁcates logged
in CT. Right-hand side zooms in on a few overlapping child certiﬁcates.
certiﬁcates with a validity period T are issued and submitted to CT logs every
Δ days with an overlap of O = T − Δ days. (2) Child certiﬁcates are issued every
δ (cid:4) Δ days with an overlap of og = g − δ days in the guaranteed phases, where
g is the duration of the guaranteed phase. (3) Revocations are handled by (i)
requiring OCSP checks of child certiﬁcates after g days and (ii) asking the CA
to stop generating/releasing new child certiﬁcates based on that key. Figure 14
provides an overview of the issuance and logging process.
Note that a client would only need to perform OCSP calls when a child
certiﬁcate is not replaced with another child certiﬁcate within time g or when a
certiﬁcate actually is compromised. In both cases, the client would perform the
OCSP checks as soon as the guaranteed period g has expired. At this time, a
client would be informed whether the certiﬁcate (and its parent certiﬁcate) has
been revoked.
Browser Discussion: With our solution, the parent should not sign the child.
Instead, the child certiﬁcate’s is expected to use a validity period t ⊆ T that is a
subset of its parent’s validity period T . Non-CT enabled browsers can treat the
certiﬁcate independently, while CT-enabled browsers implementing our solution
can use the special shared SCTs to validate that the subject-key mapping has
been logged in a similar manner as with SCTs based on regular pre-certiﬁcates.
Another interesting browser-related aspect is the browser-side usage of OCSP
checks. Here, our solution is designed such that OCSP only is used as a fallback
mechanism during the probable phase. This design choice is motivated by similar
reasons (e.g., privacy, performance, etc.) as why Chrome today does not perform
OCSP checks [76]. By avoiding the use of OCSP checks for any certiﬁcate in the
guaranteed phase we incentivize CAs and servers to properly manage their cer-
tiﬁcates so that they always can present a certiﬁcate in its guaranteed phase. Any
performance penalties (which can be sever if enforcing strict OCSP checks), for
example, are only endured when a certiﬁcate already should have been replaced
by a new child certiﬁcate. While Chrome currently does not perform OCSP
checks, other browsers do. Furthermore, all CAs operate active OCSP servers
that provide (mostly) good response rate for status checks of all their issued cer-
tiﬁcates up to the expiry time of each individual certiﬁcate (and beyond) [46].
Implementing such fallback mechanism is therefore expected to be trivial for all
browsers. Also, as long as the servers properly maintain their certiﬁcates, the
browsers should never need to make any OCSP checks.
70
C. M. Bruhner et al.
Parameter Discussion: We next brieﬂy discuss the best parameter choices
in the context of prior research and best practices. For part of this discussion,
we refer to the CA/Browser Forum Baseline Requirements (BR). These BR are
shaped in a democratic process of CAs and browser vendors, where both the
browser vendors and the CAs have a strong interest in security while keeping
costs low. Today, the BR has a central role in the governance of CAs [19]. For
example, non-compliance has been used as an argument for root removal [57],
and the major root programs require CAs to comply with the BR [70].
The guaranteed period determines the worst-case response time to a revo-
cation. The intention is to allow organizations to choose their own guaranteed
period based on their individual risk assessment. However, for the CAs to comply
with the BR, they must revoke certiﬁcates within 24 h in some serious cases (e.g.,
key compromise) and within 5 days for less critical cases [24,26]. Therefore, the
revocation mechanism would remain a part of the system. Furthermore, using a
guaranteed period g of 24 h is expected to provide as good protection as achieved
by a conservative client always performing revocation checks and better protec-
tion than the current status-quo of not doing revocation checks. Motivated by
OCSP responses being cached for 4 days on average [74], others have suggested
that similar guarantees as OCSP can be achieved using certiﬁcates with a 4-day
validity period [76]. Based on these observations, we foresee that a good selection
for the guaranteed period g may vary between 1-to-4 days.
Currently, the CA/Browser EV Guidelines suggest that EV certiﬁcates
should be valid for up to a year [7]. Given this and the measured average fre-
quency that diﬀerent CAs currently issue certiﬁcates, we suggest that new keys
are generated, CAs perform re-validation checks of such subject-key mappings,
and that the parent certiﬁcates are submitted to CT logs accordingly (i.e., Δ < T
is less than a year). During this period, new child certiﬁcates (reusing this key)
are then generated every δ days. To ensure overlapping guaranteed phases and
avoid unnecessary OCSP checks, we suggest using δ < g.
Finally, we note that the validity periods of the child certiﬁcates can be
much longer than g, as long as the browsers commit to OCSP lookups during
the probable phase.
This approach ensures that domains that always maintain an up-to-date
certiﬁcate in the guaranteed phase can provide services to their clients without
any performance penalty. We propose that browsers only penalize the domains
that do not provide up-to-date certs (i.e., that are in the probable phase).
Deployment Incentives and Challenges: Like past successful changes to
the certiﬁcate management practices (e.g., CAs becoming CT compliant and
398-day compliant), new solutions must be easy to deploy and/or driven by
demand/pressure from users and browser vendors. First, assuming that browsers
would demand CA compliance, we believe that our solution easily can be
deployed by CAs to meet such expectations. Second, there already is interest
in shorter certiﬁcate lifetimes. For example, Let’s Encrypt publicly expressed
interest in shorter lifetimes than the 90-day validity periods used today [8],
which was selected to “allow plenty of time for manual renewal if necessary”.
Changing of the Guards: Certiﬁcate and Public Key Management
71
Third, our solution allows individual CAs to use diﬀerent parameters and safety
margins based on the level of automation that they can provide each customer.
Since diﬀerent safety margins have diﬀerent security-performance tradeoﬀs, some
CAs are likely to compete based on the level of automation that they can pro-
vide. This could drive the demand of good implementations compatible with our
framework.
Finally, there are other subtle policy decisions that browsers can do to incen-
tivize CAs and servers to implement and properly maintain up-to-date child
certiﬁcates. For example, consider again our use of OCSP checks as a potential
fallback mechanism during the probable phase. While they initially could use a
safe-fail policy here (to limit performance implications of slow OCSP responses),