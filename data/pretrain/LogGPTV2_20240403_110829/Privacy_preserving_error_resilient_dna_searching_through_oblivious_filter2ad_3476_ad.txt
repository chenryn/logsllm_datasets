### 优化后的文本

#### Figure 2: State Diagram for the Levenshtein Automaton
Figure 2 illustrates the state diagram for the Levenshtein automaton that accepts all sequences within a distance of 1 from the sequence "actg" (part a) and its extension to handle arbitrary length sequences (part b).

To enhance security, the number of states can be partially concealed by adding a random number of dummy states.

1. **Levenshtein Automaton Extension for Search:**
   - In the case of a search, the Levenshtein automaton is extended by concatenating the Kleene closure of the alphabet \(\Sigma^*\) at both the left and right ends (see Section 5.1).
   - The resulting automaton is then minimized. Again, a random number of dummy states can be added to partially conceal the number of states in the minimal automaton.

2. **Protocol Execution:**
   - Both parties run the protocol described in Section 4.1, using A's automaton and B's sequence \(x_B\) as inputs, to obtain a binary answer to the approximate matching or searching problem.

3. **Complexity Analysis:**
   - The extended Levenshtein automaton typically has a state complexity of \(O(n)\) for a sequence of length \(n\).
   - The private evaluation of an automaton with \(|Q|\) states and an input alphabet \(\Sigma\) on an input sequence of length \(N\) has a communication complexity of \(O(N \cdot (|Q| + |\Sigma|))\).
   - For the approximate search of a sequence of length \(n\) in another sequence of length \(N\), the communication complexity is \(O(N \cdot n)\).
   - The amortized computational complexity for the owner of the query sequence \(x_A\) is \(O(N \cdot n)\), and for the owner of the long sequence \(x_B\), it is \(O(N)\). This means that the privacy-preserving protocol has the same order of computational complexity as the non-privacy-preserving protocol for the querying party, while the complexity for the other party is linear in the length of their sequence and independent of the query string's length.

4. **Round Complexity:**
   - The round complexity of the privacy-preserving protocol for automaton evaluation is linear in the length of the input sequence \(x_B\).
   - If round complexity is a concern and the value \(|x_A| + d\) does not need to be kept secret, the input sequence \(x_B\) can be partitioned into consecutive blocks with an overlap of \(|x_A| + d - 1\) symbols.
   - One instance of the oblivious automaton protocol can be run in parallel for each block, and a logical OR can be applied to the obtained (concealed) outputs.
   - By choosing the maximal number of blocks, the number of rounds of the resulting protocol becomes independent of the input sequence length, but this increases the communication complexity, which is quadratic in the number of states of the automaton.
   - A trade-off can be found to achieve sublinear round complexity in the length of \(x_B\) and subquadratic communication complexity in the number of states of the automaton.

### Further Applications

The protocol presented in Section 4 allows for efficient privacy-preserving execution of finite state machines, making it applicable to any problem that can be expressed using regular expressions. Common applications include:

- **Password Format Validation:** Regular expressions are used to validate the format of passwords, ensuring they meet specific criteria.
- **Data Parsing:** Regular expressions can be used to parse files, erasing, substituting, or inserting text in specific parts of the file. This can be done through a finite automaton with output, and the protocol can be applied to protect the input text.
- **Spam Checkers and Virus Analyzers:** Regular expressions are used to find specific words or patterns in documents, such as in spam checkers for email or virus analyzers. When dealing with confidential data, the protocol can be used to protect the information from the party running the checker or analyzer.
- **Large-Scale Dictionaries:** Sequential transducers are used in large-scale dictionaries for computational linguistics, lexical analysis, morphology, phonology, syntax, text-to-speech synthesis, and speech recognition. The protocol can be applied to protect the recognized sequence in these applications.

### Conclusions

We have presented a protocol for the secure evaluation of finite state machines, demonstrating its security in the semi-honest setting and proving its efficiency in terms of communication complexity, which is linear in the size of the input alphabet and the number of states of the FSM.

- **Main Application:** The protocol is particularly useful for secure DNA matching, overcoming the performance deficits of previous approaches.
- **Error-Resilient DNA Searching:** We have also presented the first efficient privacy-preserving solution for error-resilient DNA searching.
- **Versatility:** Due to the versatility of finite state machines, the protocol can be used for privately solving any problem involving matching a string against a regular expression, such as searching a DNA database with incomplete definitions, oblivious spam checkers, and virus analyzers.

### Acknowledgments

This work was partially funded by Xunta de Galicia under projects PGIDT04 TIC322013PR and PGIDT04 PXIC32202PM; MEC project DIPSTICK, reference TEC2004-02551/TCM; and the European Commission through the IST Programmes under Contract IST-2006-034238 SPEED and IST-2002-507932 ECRYPT. The information in this paper is provided as is, and no guarantee or warranty is given or implied that the information is fit for any particular purpose. The user thereof uses the information at their sole risk and liability.

### References

[1] Human Genome Project. http://genomics.energy.gov.
[2] M. J. Atallah, F. Kerschbaum, and W. Du. Secure and private sequence comparisons. In Proceedings of the 2003 ACM Workshop on Privacy in the Electronic Society, pages 39–44, Washington, DC, 2003. ACM Press.
[3] M. J. Atallah and J. Li. Secure outsourcing of sequence comparisons. International Journal of Information Security, 4(4):23–36, October 2005.
[4] R. E. Bellman. Dynamic Programming. Courier Dover Publications, 2003.
[5] B. Chor, S. Goldwasser, S. Micali, and B. Awerbuch. Verifiable secret sharing and achieving simultaneity in the presence of faults. In 25th Annual Symposium on Foundations of Computer Science FOCS’85, pages 383–395. IEEE Computer Society, 1985.
[6] I. Damgård, M. Fitzi, E. Kiltz, J. B. Nielsen, and T. Toft. Unconditionally secure constant-rounds multi-party computation for equality, comparison, bits and exponentiation. In Proceedings of the third Theory of Cryptography Conference, TCC 2006, volume 3876 of Lecture Notes in Computer Science, pages 285–304. Springer-Verlag, 2006.
[7] O. Goldreich. Secure multi-party computation. Working Draft, 2002.
[8] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game. In Proceedings of the nineteenth annual ACM conference on Theory of Computing, pages 218–229, New York, U.S.A., 1987. ACM Press.
[9] S. Goldwasser and S. Micali. Probabilistic encryption. Journal of Computer and System Sciences, 28(2):270–299, April 1984.
[10] A. Hall. Coming soon: Your personal DNA map? http://news.nationalgeographic.com/news/2006/03/0307_060307_dna.html.
[11] J. E. Hopcroft and J. D. Ullman. Introduction to Automata Theory, Languages, and Computation. Addison Wesley, 1979.
[12] M. Jacobsson and A. Juels. Mix and match: Secure function evaluation via ciphertexts. In T. Okamoto, editor, Advances in Cryptology – ASIACRYPT’00, volume 1976 of Lecture Notes in Computer Science, pages 162–177. Springer-Verlag, 2000.
[13] L. Kruger, S. Jha, E.-J. Goh, and D. Boneh. Secure function evaluation with ordered binary decision diagrams. In Proceedings of the 13th ACM conference on Computer and Communications Security CCS’06, pages 410–420, Virginia, U.S.A., November 2006. ACM Press.
[14] V. I. Levenshtein. Binary codes capable of correcting deletions, insertions and reversals. Doklady Akademii Nauk SSSR, 163(4):845–848, 1965. English translation at Soviet Physics Doklady 10(8): 707–710, 1966.
[15] M. Mohri. On some application of finite-state automata theory to natural language. Natural Language Engineering, 2(1):1–20, 1996.
[16] M. Mohri. Finite-state transducers in language and speech processing. Computational Linguistics, 23(2):269–311, 1997.
[17] M. Naor and K. Nissim. Communication complexity and secure function evaluation. Electronic Colloquium on Computational Complexity (ECCC), 8(062), 2001.
[18] M. Naor and K. Nissim. Communication preserving protocols for secure function evaluation. In ACM Symposium on Theory of Computing, pages 590–599, 2001.
[19] M. Naor and B. Pinkas. Efficient oblivious transfer protocols. In Proceedings of the twelfth annual ACM-SIAM symposium on Discrete algorithms, pages 448–457, Washington, D.C., U.S.A., 2001.
[20] S. B. Needleman and C. D. Wunsch. A general method applicable to the search for similarities in the amino acid sequence of two proteins. Journal of Molecular Biology, 48:443–453, 1970.
[21] P. Paillier. Public-key cryptosystems based on composite degree residuosity classes. In Advances in Cryptology - EUROCRYPT 1999, volume 1592 of Lecture Notes in Computer Science, pages 223–238. Springer, 1999.
[22] K. U. Schulz and S. Mihov. Fast string correction with Levenshtein automata. International Journal of Document Analysis and Recognition (IJDAR), 5(1):67–85, 2002.
[23] T. K. Vintsyuk. Speech discrimination by dynamic programming. Kibernetika, 4:52–57, 1968.
[24] A. C. Yao. Protocols for secure computations. In Proceedings of the IEEE Symposium on Foundations of Computer Science, pages 160–164, 1982.
[25] S. Yu and Q. Zhuang. The state complexities of some basic operations on regular languages. Theoretical Computer Science, 125:315–328, 1994.