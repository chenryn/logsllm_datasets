### Problem revoking a subfolder
Currently you cannot revoke a subfolder permission.  
**example :**
    ///1. Request permissions needed
    const permStatus_1 = await Deno.permissions.request({ name: "read", path: "./folderA"}); //Grant
    //Skipped because folderA was granted
    const permStatus_2 = await Deno.permissions.request({ name: "read", path: "./folderA/SubFolderA" }); 
    console.log(permStatus_1); //Granted
    console.log(permStatus_2); //Granted
    ///2. Remove unused permissions
    //Revoke the folderA
    await Deno.permissions.revoke({ name: "read", path: "./folderA/SubFolderA" }); 
    const permStatus_3 = await Deno.permissions.query({ name: "read", path: "./folderA" });
    const permStatus_4 = await Deno.permissions.query({ name: "read", path: "./folderA/SubFolderA" });
    console.log(permStatus_3); //Granted
    console.log(permStatus_4); //Granted [!] The revocation was not taken into account
### Proposition : add the **`recursive`** optional attribute
It's an idea, but I think it might be interesting to consider the permission
request of the subfolder, although the permission of parent folder was already
granted.  
Also, when a revocation is called, revoke all children only if the optional
`recursive` parameter has been provided.
    const permStatus_5 = await Deno.permissions.request({ name: "read", path: "./folderA" }); //Grant
    //Skipped because folderA was granted, /!\ but add the path to the granted list
    const permStatus_6 = await Deno.permissions.request({ name: "read", path: "./folderA/SubFolderA" }); 
    console.log(permStatus_5 ); //Granted
    console.log(permStatus_6 ); //Granted
**without** the `recursive` attribute :
    await Deno.permissions.revoke({ name: "read", path: "./folderA" }); //Revoke the folderA 
    const permStatus_7 = await Deno.permissions.query({ name: "read", path: "./folderA" });
    const permStatus_8 = await Deno.permissions.query({ name: "read", path: "./folderA/SubFolderA" });
    console.log(permStatus_7); //Prompt
    console.log(permStatus_8); //Granted
**with** the `recursive` attribute :
    await Deno.permissions.revoke({ name: "read", path: "./folderA", recursive: true }); //Revoke the folderA recursively
    const permStatus_9 = await Deno.permissions.query({ name: "read", path: "./folderA" });
    const permStatus_10 = await Deno.permissions.query({ name: "read", path: "./folderA/SubFolderA" });
    console.log(permStatus_9);  //Prompt
    console.log(permStatus_10); //Prompt