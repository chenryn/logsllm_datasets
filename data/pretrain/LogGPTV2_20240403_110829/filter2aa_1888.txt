# Covert Post-Exploitation Forensics with Metasploit: Tools and Examples

**Author:** R. Wesley McGrew  
**Email:** [PI:EMAIL](http://mcgrewsecurity.com)  
**Affiliation:** Mississippi State University, National Forensics Training Center  
**Website:** [msu-nftc.org](http://msu-nftc.org)

## Introduction

In digital forensics, most examinations occur after the hardware has been physically seized (common in law enforcement scenarios) or accessed via a preinstalled agent (as in enterprise forensics). Existing tools enable forensic examination of storage media, including recovery of data from deleted files, unallocated space, and slack space.

These scenarios typically imply that the subject (the individual in possession of the media) is aware that their data has been seized or accessed remotely. However, there are situations where this awareness is undesirable, such as:

- **Penetration Testing:** To evaluate security without alerting the target.
- **Evidence Seizure with Unknown Physical Location:** When the exact location of the target system is unknown.
- **Surreptitious Monitoring:** For intelligence gathering without detection.

While tools like those in the Metasploit framework allow attackers to navigate and selectively download portions of the target's filesystem without the subject's knowledge, they lack the comprehensive feature set of traditional file-system forensic examinations. A penetration tester would benefit from the ability to recover previously deleted data for compliance checks, and intelligence gatherers could use data carving to find old versions of documents or emails.

This paper and the accompanying talk introduce three new Meterpreter scripts designed to facilitate covert post-exploitation forensics. These tools enable remote imaging of subject filesystems and disks, as well as mapping remote filesystems to local block devices. Examples demonstrate how to integrate these tools with the capabilities of the Metasploit framework and modern digital forensic tools.

## Tools

The tools developed for covert post-exploitation forensics are Ruby scripts intended to be run from the shell in Metasploit’s Meterpreter payload. They leverage Patrick HVE’s Railgun extension to make Windows API calls on the remote host. The three primary scripts are:

1. **Imager.rb:** Provides a "dd"-like interface for creating local byte-for-byte images of remote physical drives and logical filesystems.
2. **NBDServer.rb:** Maps a remote drive to a Network Block Device (NBD), which can be mounted read-only or analyzed locally by the attacker.
3. **Listdevices.rb:** Enumerates remote physical devices and logical filesystems.

### Listdevices.rb

**Purpose:**
Enumerates the compromised host's `\\.\PhysicalDriveX` filenames for physical storage devices and drive letters for logical filesystem volumes. The resulting names can be used as arguments in `imager.rb` or `nbdserver.rb`.

**Usage:**
```plaintext
meterpreter > run listdrives.rb -h
USAGE:   run listdrives
OPTIONS:
    -h        Help menu.
    -m   Maximum physical drive number (Default: 10)
```
There is a delay associated with each Windows API call over Railgun, so `listdrives.rb` only iterates through the first ten possible physical drive numbers by default. If you suspect the target has more, specify a higher maximum.

**Sample Output:**
```plaintext
meterpreter > run listdrives.rb
Device Name:                    Type:   Size (bytes):
------------                    -----   -------------
\\.\PhysicalDrive0              Fixed    21474836480
\\.\PhysicalDrive1              Fixed    42949672960
\\.\PhysicalDrive2          Removable     1998585344
\\.\A:                                            78
\\.\C:                          Fixed    42949672960
\\.\D:                                            78
\\.\E:                      Removable     1998585344
```

### Imager.rb

**Purpose:**
Allows for making byte-for-byte copies of physical volumes and logical drives on the target system over the network to image files on the attacker’s computer. It provides familiar options for those experienced with local drive imaging, such as split image files and MD5/SHA1 hashing.

**Usage:**
```plaintext
meterpreter > run imager -h
USAGE:   run imager -d devicename
OPTIONS:
    -b   Block size in bytes (multiple of 512) (Default: 1048576)
    -c   Skip  blocks (Default: 0)
    -d   Device to image ("run listdrives" for possible names)
    -h        Help menu.
    -n   Read only  blocks (Default: 0 (read till end))
    -o   Output filename without extension (Default: image)
    -s   Split image every  bytes (Default: 1610612736) (Don't split: 0)
```
The default block size is higher than typical for local imaging due to the overhead of API calls through Railgun and network latency. Setting a high block size reduces the frequency of API calls, improving speed.

**Sample Output:**
```plaintext
meterpreter > run imager -d //./PhysicalDrive2
Started imaging //./PhysicalDrive2 to image.001
...continuing with image.002
Finished!
MD5  : 0009544b13fba447ee1d5150d2339378
SHA1 : a669ab2e1cec053ace2a94c4f9b94140621720a5
```

### NBDServer.rb

**Purpose:**
Maps a remote physical drive or logical volume to a local block device on Linux systems (or other systems supporting the Network Block Device protocol). It starts a TCP server on the specified port and listens for connections from `nbd-client`. Reads from a `/dev/nbdX` block device are fulfilled by reading the data over the network from the compromised system.

**Usage:**
```plaintext
meterpreter > run nbdserver -h
USAGE:   run nbdserver
OPTIONS:
    -d   Device to map ("run listdrives" for possible names)
    -h        Help menu.
    -i   IP Address for NBD server (Default: 0.0.0.0)
    -p   TCP Port for NBD server (Default: 10005)
```
Once `NBDServer` is running, a Linux system can map the device using `nbd-client` with the following command:
```plaintext
nbd-client localhost 10005 /dev/nbd0
```

## Examples

### Imaging a Remote Disk
### Recovering Deleted Files
### Mounting a Disk Remotely

## Caveats

Remote forensics can be time-consuming and bandwidth-intensive, depending on the environment and techniques used. Occasionally, API calls to determine device or volume sizes may fail, reporting incorrect values. In such cases, re-run `listdrives.rb` or start a new Meterpreter session.

## Conclusions

The ability to perform file system forensic analysis on remote compromised systems opens new possibilities for penetration testers to uncover valuable information. Experienced forensic examiners know that recoverable deleted files and data-carved media contain a wealth of information, and these tools make this potential accessible to a broader audience of information security professionals.

The ease with which this can be done by malicious attackers underscores the need to securely wipe sensitive data. Previously, it was assumed that attackers would not have the tools or inclination to sift through unallocated space, but this set of tools demonstrates that it is not difficult.

## Acknowledgements

- **Patrick HVE:** For the Railgun extension on Meterpreter, which simplified the implementation of these tools.
- **Brian Carrier:** For providing an excellent set of file system forensic tools in The Sleuth Kit.
- **Rob Fuller (Mubix):** For the code to enumerate logical drive letters and his blog post on Railgun.
- **Kragen Sitaker:** For posting a Python implementation of NBD, which served as a reference for writing `nbdserver.rb`.

For more information, visit [mcgrewsecurity.com](http://mcgrewsecurity.com) and [msu-nftc.org](http://msu-nftc.org).