+----------------------------------------------------------------+----------------------------+----------  
  4 | 23731 | public       | test       | AFTER   | ROW   | INSERT |                                                                  
| "id"=>"1", "info"=>"digoal", "crt_time"=>"2012-06-25 10:54:43" | 2012-06-25 10:54:42.839553 | postgres  
  5 | 23731 | public       | test       | AFTER   | ROW   | UPDATE | "id"=>"1", "info"=>"digoal", "crt_time"=>"2012-06-25 10:54:43"   
| "id"=>"1", "info"=>"DIGOAL", "crt_time"=>"2012-06-25 10:54:43" | 2012-06-25 10:55:41.006069 | postgres  
(2 rows)  
postgres=# delete from test where id=1;  
DELETE 1  
postgres=# select * from test;  
 id | info | crt_time   
----+------+----------  
(0 rows)  
postgres=# select * from table_change_rec;  
 id | relid | table_schema | table_name | when_tg | level |   op   |                            old_rec                               
|                            new_rec                             |          crt_time          | username   
----+-------+--------------+------------+---------+-------+--------+----------------------------------------------------------------  
+----------------------------------------------------------------+----------------------------+----------  
  4 | 23731 | public       | test       | AFTER   | ROW   | INSERT |                                                                  
| "id"=>"1", "info"=>"digoal", "crt_time"=>"2012-06-25 10:54:43" | 2012-06-25 10:54:42.839553 | postgres  
  5 | 23731 | public       | test       | AFTER   | ROW   | UPDATE | "id"=>"1", "info"=>"digoal", "crt_time"=>"2012-06-25 10:54:43"   
| "id"=>"1", "info"=>"DIGOAL", "crt_time"=>"2012-06-25 10:54:43" | 2012-06-25 10:55:41.006069 | postgres  
  6 | 23731 | public       | test       | AFTER   | ROW   | DELETE | "id"=>"1", "info"=>"DIGOAL", "crt_time"=>"2012-06-25 10:54:43"   
|                                                                | 2012-06-25 10:56:00.862319 | postgres  
(3 rows)  
```  
使用each函数分解显示hstore存储的信息.  
```  
postgres=# select id,(each(old_rec)).* from table_change_rec;  
 id |   key    |        value          
----+----------+---------------------  
  5 | id       | 1  
  5 | info     | digoal  
  5 | crt_time | 2012-06-25 10:54:43  
  6 | id       | 1  
  6 | info     | DIGOAL  
  6 | crt_time | 2012-06-25 10:54:43  
(6 rows)  
postgres=# select id,(each(new_rec)).* from table_change_rec;  
 id |   key    |        value          
----+----------+---------------------  
  4 | id       | 1  
  4 | info     | digoal  
  4 | crt_time | 2012-06-25 10:54:43  
  5 | id       | 1  
  5 | info     | DIGOAL  
  5 | crt_time | 2012-06-25 10:54:43  
(6 rows)  
```  
#### 事件触发器函数  
事件触发器，当数据库中发生某些DDL或DCL事件（ddl_command_start，ddl_command_end，sql_drop，table_rewrite）时，可以被捕获，并触发调用用户定义的事件触发器函数。  
语法  
```  
postgres=# \h create event  
Command:     CREATE EVENT TRIGGER  
Description: define a new event trigger  
Syntax:  
CREATE EVENT TRIGGER name  
    ON event  
    [ WHEN filter_variable IN (filter_value [, ... ]) [ AND ... ] ]  
    EXECUTE PROCEDURE function_name()  
```  
目前事件触发器，支持的command tag如下  
![pic](20170412_02_pic_086.jpg)  
![pic](20170412_02_pic_087.jpg)  
![pic](20170412_02_pic_088.jpg)  
首先要创建返回event_trigger的函数，然后创建事件触发器。  
例子1，禁止postgres用户在数据库digoal中执行CREATE TABLE和DROP TABLE命令.    
创建触发器函数 :     
```    
CREATE OR REPLACE FUNCTION abort()       
  RETURNS event_trigger                      
 LANGUAGE plpgsql    
  AS $$    
BEGIN    
  if current_user = 'postgres' then    
    RAISE EXCEPTION 'event:%, command:%', tg_event, tg_tag;    
  end if;    
 END;    
$$;    
```    
创建事件触发器 :     
```    
digoal=# create event trigger a on ddl_command_start when TAG IN ('CREATE TABLE', 'DROP TABLE') execute procedure abort();    
CREATE EVENT TRIGGER    
digoal=# select * from pg_event_trigger ;    
 evtname |     evtevent      | evtowner | evtfoid | evtenabled |            evttags                
---------+-------------------+----------+---------+------------+-------------------------------    
 a       | ddl_command_start |       10 |   16683 | O          | {"CREATE TABLE","DROP TABLE"}    
(1 row)    
```    
测试postgres用户是否可以使用create table和drop table .    
```    
digoal=# \c digoal postgres    
You are now connected to database "digoal" as user "postgres".    
```    
无法新建表了    
```    
digoal=# create table new(id int);    
ERROR:  event:ddl_command_start, command:CREATE TABLE    
digoal=# \d new    
Did not find any relation named "new".    
digoal=# \dt    
          List of relations    
 Schema |  Name   | Type  |  Owner       
--------+---------+-------+----------    
 public | digoal  | table | postgres    
 public | digoal1 | table | postgres    
 public | test    | table | postgres    
(3 rows)    
```    
无法删表了    
```    
digoal=# drop table digoal;    
ERROR:  event:ddl_command_start, command:DROP TABLE    
digoal=# \d digoal    
    Table "public.digoal"    
 Column |  Type   | Modifiers     
--------+---------+-----------    
 id     | integer |     
```    
测试其他用户是否会有影响 (未受到影响)  
```    
digoal=# \c digoal digoal    
You are now connected to database "digoal" as user "digoal".    
digoal=> create table tbl(id int);    
CREATE TABLE    
digoal=> drop table tbl;    
DROP TABLE    
```    
例子2，用事件触发器来实现recycle bin  
我们创建一个schema来存放重命名的对象。    
用一个表来记录重命名的前后关系。    
```  
postgres=# create schema recyclebin;    
postgres=# create table recyclebin.trace(id serial8 primary key,type_name text,nsp_name text,obj_name text,tg_tag text,new_nsp_name text,new_obj_name text,crt_time timestamp);    
CREATE TABLE    
```  
创建一个事件触发器函数进行测试：    
在遇到sql_drops事件时被触发，执行rename的动作，而不是真实的DROP TABLE。从而实现recycle bin的功能。     
```  
CREATE OR REPLACE FUNCTION test_event_trigger_for_drops()    
        RETURNS event_trigger LANGUAGE plpgsql AS $$    
DECLARE    
    obj record;    
    v_type_name text[] := '{}'::text[];    
    v_nsp_name text[] := '{}'::text[];    
    v_obj_name text[] := '{}'::text[];    
    v_tg_tag text := TG_TAG;    
    v_crt_time timestamp := now();    
    i int := 1;    
    v_new_nsp_name text := 'recyclebin';    
    v_new_obj_name text;    
    have_table boolean := false;    
    x text;    
    tt text := '';    
    v_sql text[];    
    v_sqlend text := '';    
    v_cname text;    
BEGIN    
    FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()    
    LOOP    
        RAISE NOTICE '% dropped object: % %.% %',    
                     v_tg_tag,    
                     obj.object_type,    
                     obj.schema_name,    
                     obj.object_name,    
                     obj.object_identity;    
        v_type_name := array_append(v_type_name, obj.object_type);    
        v_nsp_name := array_append(v_nsp_name, obj.schema_name);    
        v_obj_name := array_append(v_obj_name, obj.object_name);    
        if (obj.object_type = 'table') then    
          have_table := true;    
        end if;    
    END LOOP;    
    if ( have_table = true ) then    
      RAISE NOTICE 'Move table to recycle bin';    
      RAISE exception 'Found table in drop list.';    
    end if;    
    EXCEPTION WHEN others then    
      raise notice 'begin: ';    
      raise notice '-----------------------------------------------------------';    
      FOREACH x in ARRAY v_obj_name LOOP    
        if v_type_name[i] = 'table' then    
          v_new_obj_name := 'md5'||md5(random()::text||clock_timestamp()::text);    
          v_sql[1] := 'alter table '||v_nsp_name[i]||'.'||x||' set schema '||v_new_nsp_name||';';    
          v_sql[2] := 'alter table '||v_new_nsp_name||'.'||x||' rename to '||v_new_obj_name||';';              
          v_sql[3] := 'insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time)     
            values ('||quote_nullable(v_type_name[i])||','||quote_nullable(v_nsp_name[i])||','||quote_nullable(v_obj_name[i])||','||quote_nullable(v_tg_tag)||','||quote_nullable(v_new_nsp_name)||','||quote_nullable(v_new_obj_name)||','||quote_nullable(v_crt_time)||');';    
          v_sqlend := v_sqlend||v_sql[1]||v_sql[2]||v_sql[3];    
        end if;    
        i := i+1;    
      END LOOP;    
          v_cname := 'myconn';    
          if (dblink_get_connections() @> array[v_cname] is not true) then    
            perform dblink_connect(v_cname, 'dbname='||current_database());    
          else    
            perform dblink_disconnect(v_cname);    
            perform dblink_connect(v_cname, 'dbname='||current_database());    
          end if;    
          perform dblink_send_query(v_cname, v_sqlend);    
          perform dblink_disconnect(v_cname);    
      raise notice 'BEGIN; % COMMIT;', v_sqlend;    
      raise notice '-----------------------------------------------------------';    
      raise exception 'Good Luck.';    
END;    
$$;   
```  
创建事件触发器：    
```  
CREATE EVENT TRIGGER test_event_trigger_for_drops    
   ON sql_drop     
   EXECUTE PROCEDURE test_event_trigger_for_drops();    
```  
测试：    
```  
postgres=# create table test(id int);    
CREATE TABLE    
postgres=# create table test1(id int) inherits(test);    
NOTICE:  merging column "id" with inherited definition    
CREATE TABLE    
postgres=# create table test2(id int) inherits(test);    
NOTICE:  merging column "id" with inherited definition    
CREATE TABLE    
postgres=# create table test3(id int) inherits(test);    
NOTICE:  merging column "id" with inherited definition    
CREATE TABLE    
```  
删除    
```  
postgres=# drop table test cascade;    
NOTICE:  drop cascades to 3 other objects    
DETAIL:  drop cascades to table test1    
drop cascades to table test2    
drop cascades to table test3    
NOTICE:  DROP TABLE dropped object: table public.test public.test    
NOTICE:  DROP TABLE dropped object: type public.test public.test    
NOTICE:  DROP TABLE dropped object: type public._test public.test[]    
NOTICE:  DROP TABLE dropped object: table public.test1 public.test1    
NOTICE:  DROP TABLE dropped object: type public.test1 public.test1    
NOTICE:  DROP TABLE dropped object: type public._test1 public.test1[]    
NOTICE:  DROP TABLE dropped object: table public.test2 public.test2    
NOTICE:  DROP TABLE dropped object: type public.test2 public.test2    
NOTICE:  DROP TABLE dropped object: type public._test2 public.test2[]    
NOTICE:  DROP TABLE dropped object: table public.test3 public.test3    
NOTICE:  DROP TABLE dropped object: type public.test3 public.test3    
NOTICE:  DROP TABLE dropped object: type public._test3 public.test3[]    
NOTICE:  Move table to recycle bin    
NOTICE:  begin:     
NOTICE:  -----------------------------------------------------------    
NOTICE:  BEGIN; alter table public.test set schema recyclebin;alter table recyclebin.test rename to md584b8a4bd192773d3bfe554016b4f4b46;insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time)     
    values ('table','public','test','DROP TABLE','recyclebin','md584b8a4bd192773d3bfe554016b4f4b46','2016-12-24 11:58:23.497347');alter table public.test1 set schema recyclebin;alter table recyclebin.test1 rename to md59e63afc3c45a334f054e1a04711c1b9b;insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time)     
    values ('table','public','test1','DROP TABLE','recyclebin','md59e63afc3c45a334f054e1a04711c1b9b','2016-12-24 11:58:23.497347');alter table public.test2 set schema recyclebin;alter table recyclebin.test2 rename to md599fc68c328a54d5a4ded5cb98b5468eb;insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time)     
    values ('table','public','test2','DROP TABLE','recyclebin','md599fc68c328a54d5a4ded5cb98b5468eb','2016-12-24 11:58:23.497347');alter table public.test3 set schema recyclebin;alter table recyclebin.test3 rename to md5de3d73b4c8d0afe47cbcd61ba9a8f7e1;insert into recyclebin.trace(type_name,nsp_name,obj_name,tg_tag,new_nsp_name,new_obj_name,crt_time)     
    values ('table','public','test3','DROP TABLE','recyclebin','md5de3d73b4c8d0afe47cbcd61ba9a8f7e1','2016-12-24 11:58:23.497347'); COMMIT;    
NOTICE:  -----------------------------------------------------------    
ERROR:  Good Luck.    
CONTEXT:  PL/pgSQL function test_event_trigger_for_drops() line 66 at RAISE    
```  
表已经被转移到recyclebin了。       
```  
postgres=# \dt    
No relations found.    
postgres=# select * from recyclebin.trace;    
 id | type_name |  nsp_name  | obj_name |   tg_tag   | new_nsp_name |            new_obj_name             |          crt_time              
----+-----------+------------+----------+------------+--------------+-------------------------------------+----------------------------    
  1 | table     | public     | test     | DROP TABLE | recyclebin   | md56015e0b40b55526be0bc35591f749438 | 2016-12-24 11:12:39.535339    
  2 | table     | public     | test     | DROP TABLE | recyclebin   | md5697b9f6a4ddca7c5d3a5e555bc13524e | 2016-12-24 11:17:56.478331    
  3 | table     | public     | test     | DROP TABLE | recyclebin   | md56e003aa8d4580d773dfb9ed218095350 | 2016-12-24 11:18:26.072341    
  4 | table     | public     | test     | DROP TABLE | recyclebin   | md5987a31420a41c0335096e13bf3104bee | 2016-12-24 11:24:28.805337    
  7 | table     | public     | test     | DROP TABLE | recyclebin   | md5ab75b9adad19028dc139c9594c1ad283 | 2016-12-24 11:30:57.128355    
  9 | table     | recyclebin | test     | DROP TABLE | recyclebin   | md556dc1d9f932e19958780ec9088015531 | 2016-12-24 11:42:34.987422    
 10 | table     | public     | test     | DROP TABLE | recyclebin   | md5dfe0ecb69b7f0c559b5512ac2cc3ac5f | 2016-12-24 11:43:00.849329    
 11 | table     | public     | test     | DROP TABLE | recyclebin   | md5be413eefcb0a06359a813ea235aec991 | 2016-12-24 11:51:46.498338    
 12 | table     | public     | test1    | DROP TABLE | recyclebin   | md5c703b51dfd054b08b092df4e4ad24074 | 2016-12-24 11:51:46.498338    
 13 | table     | public     | test2    | DROP TABLE | recyclebin   | md50b59927a9a61e0324d4434a246da79b6 | 2016-12-24 11:51:46.498338    
 14 | table     | public     | test     | DROP TABLE | recyclebin   | md584b8a4bd192773d3bfe554016b4f4b46 | 2016-12-24 11:58:23.497347    
 15 | table     | public     | test1    | DROP TABLE | recyclebin   | md59e63afc3c45a334f054e1a04711c1b9b | 2016-12-24 11:58:23.497347    
 16 | table     | public     | test2    | DROP TABLE | recyclebin   | md599fc68c328a54d5a4ded5cb98b5468eb | 2016-12-24 11:58:23.497347    
 17 | table     | public     | test3    | DROP TABLE | recyclebin   | md5de3d73b4c8d0afe47cbcd61ba9a8f7e1 | 2016-12-24 11:58:23.497347    
(14 rows)    
```  
查看当前数据库中存在的事件触发器  
```  
digoal=# select * from pg_event_trigger ;    
```  
### 6. 类型转换  
例如要从一个类型转换为另一个类型。  
语法  
```  
CAST ( expression AS type )  
expression::type  
```  
例子  
```  
postgres=# select cast('2017-01-01' as date);  
    date      
------------  
 2017-01-01  
(1 row)  
postgres=# select '2017-01-01'::date;  
    date      
------------  
 2017-01-01  
(1 row)  
```  
自定义转换函数  
语法  
```  
postgres=# \h create cast  
Command:     CREATE CAST  
Description: define a new cast  
Syntax:  
CREATE CAST (source_type AS target_type)  
    WITH FUNCTION function_name (argument_type [, ...])  
    [ AS ASSIGNMENT | AS IMPLICIT ]  
CREATE CAST (source_type AS target_type)  
    WITHOUT FUNCTION  
    [ AS ASSIGNMENT | AS IMPLICIT ]  
CREATE CAST (source_type AS target_type)  
    WITH INOUT  
    [ AS ASSIGNMENT | AS IMPLICIT ]  
```  
例子  
```  
postgres=# select '12.1a.1'::text::numeric;  
ERROR:  invalid input syntax for type numeric: "12.1a.1"  
postgres=# create or replace function text_to_numeric(text) returns numeric as $$  
select to_number($1,'9999999999999999999999999.99999999999999');  
$$ language sql strict;  
CREATE FUNCTION  
postgres=# select text_to_numeric('12.1a.1');  
 text_to_numeric   
-----------------  
           12.11  
(1 row)  
postgres=# create cast (text as numeric) with function text_to_numeric(text) ;  
CREATE CAST  
postgres=# select '12.1a.1'::text::numeric;  
 numeric   
---------  
   12.11  
(1 row)  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")