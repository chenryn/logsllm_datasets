内存也是这样，内存的三个部分，不是所有的东西都能存进去的。
静态区：保存自动全局变量和static 变量（包括static 全局和局部变量）。静态区
的内容在总个程序的生命周期内都存在，由编译器在编译的时候分配。
栈：保存局部变量。栈上的内容只在函数的范围内存在，当函数运行结束，这些内容也
- 95 -
会自动被销毁。其特点是效率高，但空间大小有限。
堆：由malloc 系列函数或new 操作符分配的内存。其生命周期由free 或delete 决
定。在没有释放之前一直存在，直到程序结束。其特点是使用灵活，空间比较大，但容易出
错。
5.3 常见的内存错误及对策
5.3.1 挃针没有挃向一块合法的内存
定义了指针变量，但是没有为指针分配内存，即指针没有指向一块合法的内存。浅显的
例子就不举了，这里举几个比较隐蔽的例子。
5.3.1.1 结构体成员指针未初始化
struct student
{
char *name;
int score;
}stu,*pstu;
int main()
{
strcpy(stu.name,"Jimy");
stu.score = 99;
return 0;
}
很多初学者犯了这个错误还不知道是怎么回事。这里定义了结构体变量stu，但是他没
想到这个结构体内部char *name 这成员在定义结构体变量stu 时，只是给name 这个指针
变量本身分配了4 个字节。name 指针并没有指向一个合法的地址，这时候其内部存的只是
一些乱码。所以在调用strcpy 函数时，会将字符串"Jimy"往乱码所指的内存上拷贝，而
这块内存name 指针根本就无权访问，导致出错。解决的办法是为name 指针malloc 一块
空间。
同样，也有人犯如下错误：
intmain()
{
pstu = (struct student*)malloc(sizeof(struct student));
strcpy(pstu->name,"Jimy");
pstu->score = 99;
free(pstu);
return 0;
}
为指针变量pstu 分配了内存，但是同样没有给name 指针分配内存。错误与上面第一
种情况一样，解决的办法也一样。这里用了一个malloc 给人一种错觉，以为也给name 指
- 96 -
针分配了内存。
5.3.1.2 没有为结构体指针分配足够的内存
int main()
{
pstu = (struct student*)malloc(sizeof(struct student*));
strcpy(pstu->name,"Jimy");
pstu->score = 99;
free(pstu);
return 0;
}
为pstu 分配内存的时候，分配的内存大小不合适。这里把sizeof(struct student)
误写为sizeof(struct student*)。当然name 指针同样没有被分配内存。解决办法同上。
5.3.1.3 函数的入口校验
不管什么时候，我们使用指针之前一定要确保指针是有效的。
一般在函数入口处使用assert(NULL != p)对参数进行校验。在非参数的地方使用if
（NULL != p）来校验。但这都有一个要求，即p 在定义的同时被初始化为NULL 了。比如
上面的例子，即使用if（NULL != p）校验也起不了作用，因为name 指针并没有被初始化
为NULL，其内部是一个非NULL 的乱码。
assert 是一个宏，而不是函数，包含在assert.h 头文件中。如果其后面括号里的值
为假，则程序终止运行，并提示出错；如果后面括号里的值为真，则继续运行后面的代码。
这个宏只在Debug 版本上起作用，而在Release 版本被编译器完全优化掉，这样就不会影
响代码的性能。
有人也许会问，既然在Release 版本被编译器完全优化掉，那Release 版本是不是就
完全没有这个参数入口校验了呢？这样的话那不就跟不使用它效果一样吗？
是的，使用assert 宏的地方在Release 版本里面确实没有了这些校验。但是我们要
知道，assert 宏只是帮助我们调试代码用的，它的一切作用就是让我们尽可能的在调试函
数的时候把错误排除掉，而不是等到Release 之后。它本身并没有除错功能。再有一点就
是，参数出现错误并非本函数有问题，而是调用者传过来的实参有问题。assert 宏可以帮
助我们定位错误，而不是排除错误。
5.3.2 为挃针分配的内存太小
为指针分配了内存，但是内存大小不够，导致出现越界错误。
char *p1 = ‚abcdefg‛;
char *p2 = (char *)malloc(sizeof(char)*strlen(p1));
strcpy(p2,p1);
p1 是字符串常量，其长度为7 个字符，但其所占内存大小为8 个byte。初学者往往忘
了字符串常量的结束标志“\0”。这样的话将导致p1 字符串中最后一个空字符“\0”没有
- 97 -
被拷贝到p2 中。解决的办法是加上这个字符串结束标志符：
char *p2 = (char *)malloc(sizeof(char)*strlen(p1)+1*sizeof(char));
这里需要注意的是，只有字符串常量才有结束标志符。比如下面这种写法就没有结束标
志符了：
char a[7] = {‘a’,’b’,’c’,’d’,’e’,’f’,’g’};
另外，不要因为char 类型大小为1 个byte 就省略sizof（char）这种写法。这样只
会使你的代码可移植性下降。
5.3.3 内存分配成功，但并未初始化
犯这个错误往往是由于没有初始化的概念或者是以为内存分配好之后其值自然为0。未
初始化指针变量也许看起来不那么严重，但是它确确实实是个非常严重的问题，而且往往出
现这种错误很难找到原因。
曾经有一个学生在写一个windows 程序时，想调用字库的某个字体。而调用这个字库
需要填充一个结构体。他很自然的定义了一个结构体变量，然后把他想要的字库代码赋值给
了相关的变量。但是，问题就来了，不管怎么调试，他所需要的这种字体效果总是不出来。
我在检查了他的代码之后，没有发现什么问题，于是单步调试。在观察这个结构体变量的内
存时，发现有几个成员的值为乱码。就是其中某一个乱码惹得祸！因为系统会按照这个结构
体中的某些特定成员的值去字库中寻找匹配的字体，当这些值与字库中某种字体的某些项匹
配时，就调用这种字体。但是很不幸，正是因为这几个乱码，导致没有找到相匹配的字体！
因为系统并无法区分什么数据是乱码，什么数据是有效的数据。只要有数据，系统就理所当
然的认为它是有效的。也许这种严重的问题并不多见，但是也绝不能掉以轻心。所以在定义
一个变量时，第一件事就是初始化。你可以把它初始化为一个有效的值，比如:
int i = 10；
char *p = (char *)malloc(sizeof(char))；
但是往往这个时候我们还不确定这个变量的初值，这样的话可以初始化为0 或NULL。
int i = 0；
char *p = NULL；
如果定义的是数组的话，可以这样初始化：
int a[10] = {0};
或者用memset 函数来初始化为0：
memset（a,0,sizeof(a)）;
memset 函数有三个参数，第一个是要被设置的内存起始地址；第二个参数是要被设置
的值；第三个参数是要被设置的内存大小，单位为byte。这里并不想过多的讨论memset 函
数的用法，如果想了解更多，请参考相关资料。
至于指针变量如果未被初始化，会导致if 语句或assert 宏校验失败。这一点，上面
已有分析。
5.3.4 内存越界
内存分配成功，且已经初始化，但是操作越过了内存的边界。这种错误经常是由于操作
数组或指针时出现“多1”或“少1”。比如：
int a[10] = {0};
- 98 -
for (i=0; i<=10; i++)
{
a[i] = i;
}
所以，for 循环的循环变量一定要使用半开半闭的区间，而且如果不是特殊情况，循
环变量尽量从0 开始。
5.3.5 内存泄漏
内存泄漏几乎是很难避免的，不管是老手还是新手，都存在这个问题。甚至包括
windows，Linux 这类软件，都或多或少有内存泄漏。也许对于一般的应用软件来说，这
个问题似乎不是那么突出，重启一下也不会造成太大损失。但是如果你开发的是嵌入式系统
软件呢？比如汽车制动系统，心脏起搏器等对安全要求非常高的系统。你总不能让心脏起搏
器重启吧，人家阎王老爷是非常好客的。会产生泄漏的内存就是堆上的内存（这里不讨论资
源或句柄等泄漏情况），也就是说由malloc 系列函数或new 操作符分配的内存。如果用完
之后没有及时free 或delete，这块内存无法释放，直到整个程序终止。
5.3.5.1 告老还乡求良田
怎么去理解这个内存分配和释放过程呢？先看下面这段对话：
万岁爷：爱卿，你为朕立下了汗马功劳，想要何赏赐啊？
某功臣：万岁，黄金白银，臣视之如粪土。臣年岁已老，欲告老还乡。臣乞良田千亩以
荫后世，别无他求。
万岁爷：爱卿，你劳苦功高，却仅要如此小赏，朕今天就如你所愿。户部刘侍郎，查看
湖广一带是否还有千亩上等良田未曾封赏。
刘侍郎：长沙尚有五万余亩上等良田未曾封赏。
万岁爷：在长沙拨良田千亩封赏爱卿。爱卿，良田千亩，你欲何用啊？
某功臣：谢万岁。长沙一带，适合种水稻，臣想用来种水稻。种水稻需要把田分为一亩
一块，方便耕种。
。。。。
5.3.5.2 如何使用 malloc 函数
不要莫名其妙，其实上面这段小小的对话，就是malloc 的使用过程。malloc 是一个
函数，专门用来从堆上分配内存。使用malloc 函数需要几个要求：
内存分配给谁？这里是把良田分配给某功臣。
分配多大内存？这里是分配一千亩。
是否还有足够内存分配？这里是还有足够良田分配。
内存的将用来存储什么格式的数据，即内存用来做什么?这里是用来种水稻，需要把田
分成一亩一块。
分配好的内存在哪里？这里是在长沙。
如果这五点都确定，那内存就能分配。下面先看malloc 函数的原型：
- 99 -
(void *)malloc(int size)
malloc 函数的返回值是一个void 类型的指针，参数为int 类型数据，即申请分配的
内存大小，单位是byte。内存分配成功之后，malloc 函数返回这块内存的首地址。你需要
一个指针来接收这个地址。但是由于函数的返回值是void *类型的，所以必须强制转换成
你所接收的类型。也就是说，这块内存将要用来存储什么类型的数据。比如：
char *p = (char *)malloc(100);
在堆上分配了100 个字节内存，返回这块内存的首地址，把地址强制转换成char *类
型后赋给char *类型的指针变量p。同时告诉我们这块内存将用来存储char 类型的数据。
也就是说你只能通过指针变量p 来操作这块内存。这块内存本身并没有名字，对它的访问是
匿名访问。
上面就是使用malloc 函数成功分配一块内存的过程。但是，每次你都能分配成功吗？
不一定。上面的对话，皇帝让户部侍郎查询是否还有足够的良田未被分配出去。使用
malloc函数同样要注意这点：如果所申请的内存块大于目前堆上剩余内存块（整块），则
内存分配会失败，函数返回NULL。注意这里说的“堆上剩余内存块”不是所有剩余内存块
之和，因为malloc 函数申请的是连续的一块内存。
既然malloc 函数申请内存有不成功的可能，那我们在使用指向这块内存的指针时，必
须用if（NULL ！= p）语句来验证内存确实分配成功了。
5.3.5.3 用 malloc 函数申请 0 字节内存
另外还有一个问题：用malloc 函数申请0 字节内存会返回NULL 指针吗？
可以测试一下，也可以去查找关于malloc 函数的说明文档。申请0 字节内存，函数并
不返回NULL，而是返回一个正常的内存地址。但是你却无法使用这块大小为0 的内存。这
好尺子上的某个刻度，刻度本身并没有长度，只有某两个刻度一起才能量出长度。对于这一
点一定要小心，因为这时候if（NULL ！= p）语句校验将不起作用。
5.3.5.4 内存释放
既然有分配，那就必须有释放。不然的话，有限的内存总会用光，而没有释放的内存却
在空闲。与malloc 对应的就是free 函数了。free 函数只有一个参数，就是所要释放的
内存块的首地址。比如上例：
free(p);
free 函数看上去挺狠的，但它到底作了什么呢？其实它就做了一件事：斩断指针变量
与这块内存的关系。比如上面的例子，我们可以说malloc 函数分配的内存块是属于p 的，
因为我们对这块内存的访问都需要通过p 来进行。free 函数就是把这块内存和p 之间的所
有关系斩断。从此p 和那块内存之间再无瓜葛。至于指针变量p 本身保存的地址并没有改
变，但是它对这个地址处的那块内存却已经没有所有权了。那块被释放的内存里面保存的值
也没有改变，只是再也没有办法使用了。
这就是free 函数的功能。按照上面的分析，如果对p 连续两次以上使用free 函数，
肯定会发生错误。因为第一使用free 函数时，p 所属的内存已经被释放，第二次使用时已
经无内存可释放了。关于这点，我上课时让学生记住的是：一定要一夫一妻制，不然肯定出
错。