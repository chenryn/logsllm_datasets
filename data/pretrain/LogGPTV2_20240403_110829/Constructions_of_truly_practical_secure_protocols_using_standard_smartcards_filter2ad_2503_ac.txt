messaging for authentication using an additional key kinit.
This initialization is an association between the key k and
the key kinit so that when a command to delete k is issued
to the smartcard, the conﬁrmation by the smartcard that
this operation took place is authenticated using a message
authentication code keyed with kinit (standard smartcards
support such a conﬁguration). Observe that given this ini-
tialization, P2 can prove to P1 that it has deleted k before
P1 sends XF (note that P1 knows kinit and so can verify that
the MAC is correct). We present the protocol.
4.1 The Basic Protocol
Let F be a pseudorandom permutation with domain {0, 1}n
and keys that are chosen uniformly from {0, 1}n (this is for
simplicity only).
Protocol 2. (secure set intersection – P2 only receives
output)
• Inputs: Party P1 has a set of n1 elements and party
P2 has a set of n2 elements; all elements are taken from
{0, 1}n, where n also serves as the security parameter.
• Auxiliary inputs: Both P1 and P2 are given n1 and
n2, as well as the security parameter n.
• SmartCard Initialization: Party P1 chooses two keys
k, kinit ← {0, 1}n and imports k into a smartcard SC for
usage as a pseudorandom permutation. P2 sets the usage
counter of k to be n2 and deﬁnes that the conﬁrmation
to DeleteObject is MACed using the key kinit.
P1 sends SC to P2 (this takes place before the protocol
below begins).2
• The protocol:
1. P2’s ﬁrst step:
(a) Given the smartcard SC, party P2 computes the
set YF = {(y, Fk(y))}y∈Y .
(b) Next, P2 issues a DeleteObject command to
the smartcard to delete k and receives back the
conﬁrmation from the smartcard.
(c) P2 sends the delete conﬁrmation to P1.
2
We assume that SC is sent via a secure carrier and so cannot be
accessed by an adversary in the case that P1 and P2 are both honest.
This assumption can be removed by protecting the use of k with a
random password of length n. Then, P1 sends the password to P2
after it receives SC.
2. P1’s step: P1 checks that the DeleteObject con-
ﬁrmation states that the operation was successful
and veriﬁes the MAC-tag on the response. If either
of these checks fail, then P1 outputs ⊥ and halts.
Otherwise, it computes the set XF = {Fk(x)}x∈X,
sends it to P2 and halts.
3. P2’s second step: P2 outputs the set {y | Fk(y) ∈
XF} and halts.
We have the following theorem:
Theorem 3. Assume that F is a pseudorandom permu-
tation over {0, 1}n. Then, Protocol 2 securely computes the
function F∩(X, Y ) = X ∩ Y in the presence of malicious
adversaries, where only P2 receives output.
Proof. We treat each corruption case separately:
No parties are corrupted.
In this case, all the adver-
sary sees is the list XF which reveals nothing about X by
the fact that F is a pseudorandom permutation (recall that
we assume that the adversary cannot intercept and use the
smartcard while en route between the parties).
Party P1 is corrupted. Let A be an adversary controlling
P1. We construct an ideal-model simulator S that works
with a trusted party computing F∩. S invokes A upon its
input and receives from A the keys k and kinit that S im-
ports to the smartcard (S receives all messages sent by A,
including those sent to the smartcard, because sending a
message to the smartcard involves A writing on its outgo-
ing communication tape to the smartcard which can be read
by S). Then, S hands A a conﬁrmation message for delete
with a correct MAC (computed using kinit). Following this,
S receives XF = {z1, . . . , zn1} from A and for every i sets
xi = F −1
k (zi). (If some zi is not in the range of Fk, then
S ignores it.) Finally, S sends X = {x1, . . . , xn1} to the
trusted party computing F∩, outputs whatever A outputs
and halts. The view of A and thus its output in this simula-
tion is identical to a real execution because it consists only
of the delete conﬁrmation message. Regarding the output
of the honest P2, notice that in a real execution P2 outputs
an element y if and only if Fk(y) ∈ XF which is equivalent
k (z) ∈ Y .
to saying that there exists a z ∈ XF such that F −1
However, this is exactly what determines P2’s output in the
ideal model, as required.
Party P2 is corrupted. Let A be an adversary controlling
P2. We construct an ideal-model simulator S that works
with a trusted party computing F∩. S chooses random
k, kinit, initializes Y = φ, and invokes A upon its input.
Whenever A sends a value y intended for the smartcard,
S adds y to the set Y , and gives A the smartcard response
Fk(y) computed using the key k that S chose. If A attempts
to send more than n2 values to the smartcard, S replies with
a fail message (simulating what the smartcard would do if
the usage counter reaches zero). Finally, S receives a delete
conﬁrmation message from A.
If the message is not valid
(when checking the MAC with key kinit, then S sends ⊥ to
the trusted party for input, outputs whatever A outputs and
halts. Else, S sends the set Y that it constructed above to
the trusted party and receives back the set Z = X ∩ Y . Sim-
ulator S then constructs the set XF by ﬁrst adding Fk(z)
for every z ∈ Z. Then, S adds Fk(z) for n1 − |Z| distinct
elements that are also diﬀerent from every element in Y . Fi-
nally, S hands A the set XF (as if it was received from P1,
outputs whatever A outputs and then halts.
We argue that the output distribution of S and the honest
P2 in the ideal model is computationally indistinguishable
from the output distribution of A and the honest P2 in a
real protocol execution. In order to prove this, we construct
S(cid:5)
who works exactly like S except that it uses a truly ran-
dom permutation instead of Fk. Using a straightforward
reduction to the security of the pseudorandom permutation,
we have that the output of S(cid:5)
and P2 is computationally
indistinguishable from the output of S and P2. Next, we
construct S(cid:5)(cid:5)
who instead of interacting with a trusted third
party is given P1 real input set X. Then, S(cid:5)(cid:5)
constructs the
set XF like S(cid:5)
except that the n1 − |Z| elements that are
added are those in the set X − X ∩ Y (but again, using a
truly random permutation). Since both S(cid:5)
construct
XF by applying a random permutation to n1 distinct ele-
ments, we have that the distributions are identical. Finally,
we construct S(cid:5)(cid:5)(cid:5)
exact that it
uses Fk again, instead of using a random permutation. Once
again, the output distribution of S(cid:5)(cid:5)
and P2 is indistinguish-
able from the output distribution of S(cid:5)(cid:5)(cid:5)
and P2, due to the
assumption that Fk is a pseudorandom permutation. The
proof of this corruption case is concluded by noting that the
messages sent by S(cid:5)(cid:5)(cid:5)
are exactly the same as those sent by
an honest P1. (Note that S(cid:5)(cid:5)(cid:5)
constructs XF by taking the
set Z = X ∩ Y and then adding X − X ∩ Y , but this means
that it is constructed from the set X, just like an honest
P1.)
who works exactly like S(cid:5)(cid:5)
and S(cid:5)(cid:5)
Composability. Observe that our simulators above do not
rewind A at all. Thus, as shown in [18], this proves that the
protocol is also secure under concurrent general composition
(equivalently, it is universally composable). We remark that
in [18] this is shown only for protocols that have the ad-
ditional property of “start synchronization”. However, this
always holds for two-party protocols.
Reusing the smartcard. Although we argue that it is
realistic for parties in non-transient relationships to send
smartcards to each other, it is not very practical for them
to do this every time they wish to run the protocol. Rather,
they should be able to do this only once, and then run the
protocol many times. This is achieved in a very straightfor-
ward way using secure messaging. Speciﬁcally, P1 initializes
the smartcard so that a key for a pseudorandom permutation
can be imported, while encrypted under a secure messaging
key ksm. This means that P1 can begin the protocol by im-
porting a new key k to the smartcard (with usage counter
n2 for the size of the set in this execution and protected with
kinit for delete as above). This means that P1 only needs to
send a smartcard once to P2 and the protocol can be run
many times, using standard network communication only.
4.2 Experimental Results
We implemented our protocol for set intersection using
the eToken smartcard of Aladdin Knowledge Systems and
received the following results:
Size of Run-time Run-time Avg time per
each set
element for 2
52 ms.
52 ms.
49 ms.
60 ms.
66 ms.
1000
5000
10000
20000
30000
of 1
2 sec
5 sec
8 sec
14 sec
21 sec
of 2
52 sec
262 sec
493 sec
1196 sec
1982 sec
These results conﬁrm the expected complexity of approxi-
mately 50 milliseconds per smartcard operation. We remark
that no code optimizations were made and the running-time
can be further improved (although the majority of the work
is with the smartcard and this cannot be made faster with-
out further improvements in smartcard technology).
5. OBLIVIOUS DATABASE SEARCH
In this section we study the problem of oblivious database
search. The aim here is to allow a client to search a database
without the server learning the query (or queries) made by
the client. Furthermore, the client should only be able to
make a single query (or, to be more exact, the client should
only be able to make a search query after receiving explicit
permission from the server). This latter requirement means
that the client cannot just download the entire database
and run local searches. We present a solution whereby the
client downloads the database in encrypted form, and then
a smartcard is used to carry out a search on the database
by enabling the client to decrypt a single database record.
We now provide an inaccurate description of our solu-
tion. Denote the ith database record by (pi, xi), where pi is
the value of the search attribute (as is standard, the values
p1, . . . , pN are unique). We assume that each pi ∈ {0, 1}n,
and for some (cid:4) each xi ∈ {0, 1}(cid:3)n (recall that the pseudoran-
dom permutation works over the domain {0, 1}n; thus pi is
made up of a single “block” and xi is made up of (cid:4) blocks).
Then, the server chooses a key k and computes ti = Fk(pi),
ui = Fk(ti) and ci = Eui (xi), for every i = 1, . . . , N . The
server sends the encrypted database (ti, ci) to the client,
together with a smartcard SC that has the key k. The
key k is also protected by a challenge/response with a key
ktest that only the server knows; in addition, after passing a
challenge/response, the key k can be used only twice (this
is achieved by setting the access-granted counter of k to
2; see Section 2). Now, since F is a pseudorandom func-
tion, the value ti reveals nothing about pi, and the “key”
ui is pseudorandom, implying that ci is a cryptographically
sound (i.e., secure) encryption of xi, that therefore reveals
nothing about xi. In order to search the database for at-
tribute p, the client obtains a challenge from the smartcard
for ktest and sends it to the server. If the server agrees that
the client can carry out a search, it computes the response
and sends it back. The client then computes t = Fk(p) and
u = Fk(t) using the smartcard. If there exists an i for which
t = ti, then the client decrypts ci using the key u, obtaining
the record xi as required. Note that the server has no way
of knowing the search query of the client. Furthermore, the
client cannot carry out the search without explicit approval
from the server, and thus the number of searches can be
audited and limited (if required for privacy purposes), or a
charge can be issued (if a pay-per-search system is in place).
We warn that the above description is not a fully secure
solution. To start with, it is possible for a client to use the
key k to compute t and t(cid:5)
for two diﬀerent values p and
p(cid:5)
. Although this means that the client will not be able to
obtain the corresponding records x and/or x(cid:5)
, it does mean
that it can see whether the two values p and p(cid:5)
are in the
database (something which it is not supposed to be able to
do, because just the existence of an identiﬁer in a database
can reveal conﬁdential information). We therefore use two
diﬀerent keys k1 and k2; k1 is used to compute t and k2 is
used to compute u. In addition, we don’t use u to directly
encrypt x and use the smartcard with a third key k3 (this
is needed to enable a formal reduction to the security of the
encryption scheme and for obtaining simulatability).
5.1 The Functionality
We begin by describing the ideal functionality for the
problem of oblivious database search; the functionality is a
reactive one where the server P1 ﬁrst sends the database to
the trusted party, and the client can then carry out searches.
We stress that the client can choose its queries adaptively,
meaning that it can choose what keywords to search for af-
ter it has already received the output from previous queries.
However, each query must be explicitly allowed by the server
(this allows the server to limit queries or to charge per
query). We ﬁrst present a basic functionality and then a
more sophisticated one:
The Oblivious Database Search Functionality
FbasicDB
Functionality FbasicDB works with a server P1 and a client
P2 as follows (the variable init is initially set to 0):
Initialize: Upon
from P1
receiving
if
init = 0,
a message
(init, (p1, x1), . . . , (pN , xN )),
function-
ality FbasicDB sets init = 1, stores all pairs and sends
(init, N ) to P2. If init = 1, then FbasicDB ignores the
message.
Search: Upon receiving a message retrieve from P2, function-
ality FbasicDB checks that init = 1 and if not it returns
notInit. Otherwise, it sends retrieve to P1. If P1 replies
with allow then FbasicDB forwards allow to P2. When
P1 replies with (retrieve, p), FbasicDB works as follows:
1. If there exists an i for which p = pi, functionality
2. If there is no such i, then FbasicDB sends notFound
FbasicDB sends (retrieve, xi) to P2
to P2.
If P1 replies with disallow, then FbasicDB forwards
disallow to P2.
Figure 1: The basic oblivious database search func-
tionality
The main drawback with FbasicDB is that the database
is completely static and updates cannot be made by the
server. We therefore modify FbasicDB so that inserts and
updates are included. An insert operation adds a new record
to the database, while an update operation makes a change