Nathan	
  Hamiel	
Principal	
  Consultant	
Associate	
  Professor	
  at	
  UAT	
Marcin	
  Wielgoszewski	
Security	
  Engineer	
•  Reliance	
  on	
  tools	
  can	
  =	
  Fail!	
– Many	
  more	
  people	
  tes4ng	
  web	
  apps	
– Vendors	
  play	
  catch-­‐up	
– Success	
  is	
  on	
  your	
  shoulders	
•  Diﬃcult	
  cases	
– APIs	
  and	
  specialized	
  data	
  formats	
– Sequenced	
  opera4ons	
– Randomized	
  data	
•  Language	
  speciﬁc	
– Object-­‐oriented	
– Byte	
  compiled	
– Fast	
•  Wide	
  support	
– Many	
  security	
  tools	
  wriLen	
  in	
  Python	
– Plenty	
  of	
  help	
  available	
– Plenty	
  of	
  resources	
  for	
  learning	
  available	
w3af	
SpikeProxy	
sqlmap	
ProxyStrike	
wapi4	
sulley	
Peach	
Canvas	
Pyscan	
DeBlaze	
Scapy	
MonkeyFist	
Pcapy	
MyNav	
Idapython	
•  CPython	
– hLp://python.org	
•  Jython	
– hLp://jython.org	
•  IronPython	
– hLp://ironpython.net	
•  Start	
  with	
  hLp://python.org	
– hLp://docs.python.org/	
– hLp://docs.python.org/tutorial/index.html	
•  Google’s	
  Python	
  Class	
– hLp://code.google.com/edu/languages/google-­‐
python-­‐class/	
•  There	
  are	
  diﬀerences	
  between	
  Python	
  2.x	
  and	
3.x	
•  Walk	
  like	
  a	
  duck	
  and	
  quack	
  like	
  a	
  duck	
Standard	
  Lib	
•  hLplib	
•  urllib	
  /	
  urllib2	
•  urlparse	
•  HTMLParser	
•  struct	
•  xml	
•  json	
  (Python	
  2.6)	
•  diﬄib	
3rd	
  Party	
•  hLplib2	
•  lxml	
•  zsi	
  /	
  suds	
•  PyAMF	
•  pydermonkey	
•  Twisted	
•  hLplib	
– Standard	
  HTTP	
  Module	
– Good	
  for	
  GETs	
  and	
  POSTs	
– HTTP	
  /	
  HTTPS	
  support	
•  hLplib2	
– Expanded	
  HTTP	
  method	
  support	
– Supports	
  various	
  auth	
  methods	
– Automa4cally	
  follows	
  3xx	
  redirects	
•  urllib	
– High	
  level	
  module	
  for	
  opening	
  resources	
– Has	
  URL	
  encoding	
  capabili4es	
•  urllib2	
– Expanded	
  support	
  for	
  handlers	
•  Merged	
  in	
  Python	
  3	
  along	
  with	
  urlparse	
•  Examples	
•  Perform	
  transi4on	
  magic	
– URL	
  encoding	
  and	
  Escaping	
– String	
  methods	
  (base64	
  /	
  hex	
  /	
  rot13,	
  etc)	
– Data	
  representa4ons	
  (decimals	
  /	
  en44es	
  /	
  etc)	
•  DharmaEncoder	
– Provides	
  methods	
  to	
  encode	
  and	
  wrap	
  values	
– hLp://hexsec.com/labs	
•  Do	
  the	
  legwork	
– Know	
  your	
  app	
– Know	
  your	
  parameters	
– Know	
  your	
  data	
•  Work	
  smarter	
– Create	
  accurate	
  ranges	
– itertools	
  methods	
– Don’t	
  empty	
  the	
  clip	
•  Web	
  fuzzing	
  lib	
  for	
  Python	
–  hLp://code.google.com/p/pywebfuzz/	
– Usable	
  in	
  Python	
  2.x	
– Easy	
  to	
  distributable	
  and	
  repeat	
  tests	
•  Convenience	
– Fuzzdb	
  values	
  accessible	
  through	
  classes	
– Request	
  Logic	
– Range	
  genera4on	
  and	
  encoding	
  /decoding	
•  Basic	
  request	
  fuzzing	
•  Finding	
  an	
  error	
  condi4on	
•  First	
  things	
  ﬁrst	
– Determine	
  content	
  type,	
  use	
  appropriate	
  parser	
– Don’t	
  use	
  HTMLParser	
if	
  html:	
  use	
  lxml.html	
elif	
  xhtml:	
  use	
  lxml.etree	
elif	
  xml:	
  use	
  lxml.etree	
elif	
  json:	
  use	
  json	
•  State	
  Issues	
– Account	
  login	
  /	
  logout	
– Randomized	
  values	
– Maintaining	
  proper	
  state	
  while	
  tes4ng	
•  Request	
– Process	
  headers	
  (referer	
  and	
  cookies)	
– Unable	
  to	
  parse	
  content	
  properly	
– Resort	
  to	
  regular	
  expressions	
•  Selenium	
– hLp://seleniumhq.org/	
•  Windmill	
– hLp://www.getwindmill.com/	
•  Firefox	
  /	
  XULRunner	
–  pyxpcomext	
•  hLp://pyxpcomext.mozdev.org/no_wrap/tutorials/pyxulrunner/
python_xulrunner_about.html	
•  Webkit	
–  PyGtk	
  /	
  PyWebKitGtk	
•  hLp://code.google.com/p/pywebkitgtk/	
–  PyQT	
•  hLp://wiki.python.org/moin/PyQt4	
–  PySide	
  (Oﬃcial	
  Support	
  from	
  Nokia)	
•  hLp://www.pyside.org/	
•  Render	
  returned	
  requests	
  from	
  other	
  libs	
  in	
just	
  a	
  couple	
  of	
  lines	
  of	
  code	
from PyQt4.QtGui import * 
from PyQt4.QtWebKit import * 
import httplib2 
http = httplib2.Http() 
headers, content = http.request("http://python.org", "GET") 
app = QApplication(sys.argv) 
web = QWebView()web.setHtml(content) 
web.show() 
sys.exit(app.exec_()) 
•  Tradi4onal	
– ZSI	
– Suds	
•  RESTful	
– Both	
  High	
  and	
  Low	
  Rest	
– hLplib	
– hLplib2	
•  Example	
•  Iden4fy	
  issues	
  passively	
– Cookie	
  issues	
– Cache-­‐control	
– Encoding	
  issues	
•  Augment	
  other	
  tools	
– Perform	
  inspec4on	
  on	
  captured	
  data	
– Use	
  your	
  favorite	
  inspec4on	
  proxy	
– No	
  need	
  to	
  send	
  data	
  to	
  endpoint	
•  PyAMF	
  is	
  most	
  popular	
•  Ac4on	
  Message	
  Format	
  encoder/decoder	
•  Create	
  remo4ng	
  clients,	
  gateways	
•  Bind	
  client-­‐side	
  classes	
  to	
  server-­‐side	
  POJOs	
•  Start	
  with	
  a	
  simple	
  Python	
  design	
  paLern	
  class	
  Factory(object):	
  def	
  __init__(self,	
  *args,	
  **kwargs):	
  self.__dict__.update(kwargs)	
  pyamf.register_class(Factory,	
  "namespace.of.object.Class")	
•  You’re	
  presented	
  with	
  an	
  app	
  that	
communicates	
  via	
  a	
  custom	
  binary	
  protocol	
•  Oh	
  what	
  to	
  do	
  without	
  my	
  scanner…	
•  Convert	
  between	
  Python	
  values	
  and	
  C	
  structs	
U8      = unsigned 8-byte integer 
U16     = unsigned 16-byte integer 
UTF-8   = U16 * (UTF8-char) ; as defined in RFC3629 
DOUBLE  = 8-byte IEEE-754 double precision  
        ; floating point in network byte order	
msg                = message-count parameters	
message-count      = U16 
parameters         = number-type | boolean-type | string-type 
number-marker      = 0x00 
boolean-marker     = 0x01 
string-marker      = 0x02 
number-type        = number-marker DOUBLE 
boolean-type       = boolean-marker U8 
string-type        = string-marker UTF-8 
•  Write	
  the	
  appropriate	
  type-­‐marker	
  to	
  buﬀer	
•  Followed	
  by	
  the	
  value	
  as	
  a	
  Double	
  buf.write("\x00")	
  buf.write(struct.pack("!d",	
  val)	
•  Reading	
  is	
  just	
  the	
  opposite	
•  Struct	
  unpacks	
  into	
  a	
  Tuple	
  while	
  pos	
def	
  decode(buf):	
  state	
  =	
  "START"	
  while	
  pos	
  <	
  len(buf):	
  if	
  state	
  ==	
  "START":	
  #	
  get	
  message	
  count	
  elif	
  state	
  ==	
  "MARKER":	
  #	
  parse	
  marker	
  elif	
  state	
  ==	
  "NUMBER":	
  #	
  parse	
  number	
  elif	
  state	
  ==	
  "BOOL":	
  #	
  parse	
  boolean	
  elif	
  state	
  ==	
  "STRING":	
  #	
  parse	
  string