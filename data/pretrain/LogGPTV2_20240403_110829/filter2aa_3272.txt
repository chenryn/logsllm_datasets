# 人员介绍

- **Nathan Hamiel**
  - 职位：首席顾问
  - 职称：亚利桑那技术大学副教授

- **Marcin Wielgoszewski**
  - 职位：安全工程师

# 主题：工具依赖与挑战

## 工具依赖的风险

- 过度依赖工具可能导致失败。
- 更多的人正在测试网络应用程序，供应商则在追赶。
- 成功的关键在于个人能力。

## 复杂情况处理

- API 和特定数据格式的处理。
- 序列化操作。
- 随机数据处理。

## 语言特性

- 面向对象编程。
- 字节编译。
- 高效执行。

## 广泛的支持

- 许多安全工具是用 Python 编写的。
- 提供丰富的帮助和学习资源。

### 常用工具列表

- w3af
- SpikeProxy
- sqlmap
- ProxyStrike
- wapi4
- sulley
- Peach
- Canvas
- Pyscan
- DeBlaze
- Scapy
- MonkeyFist
- Pcapy
- MyNav
- Idapython

## Python 版本

- CPython: <https://python.org>
- Jython: <https://jython.org>
- IronPython: <https://ironpython.net>

建议从 <https://python.org> 开始：
- 文档: <https://docs.python.org/>
- 教程: <https://docs.python.org/tutorial/index.html>
- Google 的 Python 课程: <https://code.google.com/edu/languages/google-python-class/>

注意 Python 2.x 和 3.x 之间的差异。

## 标准库

- hLplib
- urllib / urllib2
- urlparse
- HTMLParser
- struct
- xml
- json (Python 2.6)
- diﬄib

## 第三方库

- hLplib2
- lxml
- zsi / suds
- PyAMF
- pydermonkey
- Twisted

### HTTP 模块

- **hLplib**:
  - 标准 HTTP 模块。
  - 支持 GET 和 POST 请求。
  - 支持 HTTP 和 HTTPS。

- **hLplib2**:
  - 扩展了 HTTP 方法支持。
  - 支持多种认证方法。
  - 自动跟随 3xx 重定向。

- **urllib**:
  - 高级模块，用于打开资源。
  - 具有 URL 编码功能。

- **urllib2**:
  - 扩展了处理器支持。
  - 在 Python 3 中与 urlparse 合并。

### 示例

- 进行转换魔法（URL 编码、字符串方法等）。
- 使用 DharmaEncoder 进行编码和包装值：<https://hexsec.com/labs>

### 实践技巧

- 了解您的应用、参数和数据。
- 创建准确的范围。
- 使用 itertools 方法。
- 不要清空剪贴板。

### 网络模糊测试库

- **pywebfuzz**: <https://code.google.com/p/pywebfuzz/>
  - 可在 Python 2.x 中使用。
  - 易于分发和重复测试。

### 方便性

- Fuzzdb 值通过类访问。
- 请求逻辑。
- 范围生成和编码/解码。

### 基本请求模糊测试

- 寻找错误条件。
- 确定内容类型并使用适当的解析器。

### 状态问题

- 账户登录/登出。
- 随机值。
- 维护正确的状态进行测试。

### 请求处理

- 处理头部（引用和 Cookie）。
- 无法正确解析内容时，可以使用正则表达式。

### 浏览器自动化工具

- **Selenium**: <https://seleniumhq.org/>
- **Windmill**: <https://www.getwindmill.com/>
- **Firefox/XULRunner**: <http://pyxpcomext.mozdev.org/no_wrap/tutorials/pyxulrunner/python_xulrunner_about.html>
- **Webkit**:
  - **PyGtk/PyWebKitGtk**: <https://code.google.com/p/pywebkitgtk/>
  - **PyQT**: <https://wiki.python.org/moin/PyQt4>
  - **PySide** (官方支持来自诺基亚): <https://www.pyside.org/>

### 渲染返回的请求

```python
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *
import httplib2
http = httplib2.Http()
headers, content = http.request("http://python.org", "GET")
app = QApplication(sys.argv)
web = QWebView()
web.setHtml(content)
web.show()
sys.exit(app.exec_())
```

### 传统与 RESTful

- **ZSI/Suds** (传统 SOAP)。
- **hLplib/hLplib2** (RESTful)。

### 被动识别问题

- Cookie 问题。
- Cache-control 问题。
- 编码问题。

### 增强其他工具

- 对捕获的数据进行检查。
- 使用您喜欢的检查代理。
- 无需将数据发送到端点。

### PyAMF

- 最流行的 Action Message Format 编解码器。
- 创建远程客户端和网关。
- 绑定客户端类到服务器端 POJOs。

### 示例代码

```python
class Factory(object):
    def __init__(self, *args, **kwargs):
        self.__dict__.update(kwargs)
pyamf.register_class(Factory, "namespace.of.object.Class")
```

### 自定义二进制协议

- 将 Python 值转换为 C 结构体。

#### 数据结构

- U8: 无符号 8 字节整数
- U16: 无符号 16 字节整数
- UTF-8: U16 * (UTF8-char)，如 RFC3629 定义
- DOUBLE: 8 字节 IEEE-754 双精度浮点数，网络字节序

#### 消息格式

- 消息计数和参数。
- 数字类型、布尔类型和字符串类型。

#### 编写代码

- 写入适当类型标记。
- 写入 Double 类型的值。

```python
buf.write("\x00")
buf.write(struct.pack("!d", val))
```

- 读取则是相反的过程。
- 使用 `struct.unpack` 解析数据。

```python
def decode(buf):
    state = "START"
    pos = 0
    while pos < len(buf):
        if state == "START":
            # 获取消息计数
        elif state == "MARKER":
            # 解析标记
        elif state == "NUMBER":
            # 解析数字
        elif state == "BOOL":
            # 解析布尔值
        elif state == "STRING":
            # 解析字符串
```

希望这些优化使文本更加清晰、连贯和专业。