Question: "Consider a hardware design scenario where a flip-flop is used to control the lock state of a test and debug interface. Which of the following Verilog code snippets correctly initializes the flip-flop to a known secure state upon reset, preventing an attacker from exploiting the indeterminate state of the flip-flop?"
 "A": "always @(posedge clk) begin if (en) lock_jtag <= d; end"
 "B": "always @(posedge clk) begin if (~reset) lock_jtag <= 1'b1; else if (en) lock_jtag <= d; end"
 "C": "always @(posedge clk) begin if (~reset) lock_jtag <= 1'b0; else if (en) lock_jtag <= d; end"
 "D": "always @(posedge clk) begin if (reset) lock_jtag <= 'bX; else if (en) lock_jtag <= d; end"
Answer: C