title:A Practical Attack Against the Use of RC4 in the HIVE Hidden Volume
Encryption System
author:Kenneth G. Paterson and
Mario Strefler
A Practical Attack Against the Use of RC4 in the HIVE
Hidden Volume Encryption System(cid:63)
Kenneth G. Paterson1 and Mario Streﬂer2
1Information Security Group, Royal Holloway, University of London
PI:EMAIL
2Karlsruhe Institute of Technology
PI:EMAIL
Abstract. The HIVE hidden volume encryption system was proposed by Blass et al.
at ACM-CCS 2014. Even though HIVE has a security proof, this paper demonstrates
an attack on its implementation that breaks the main security property claimed for the
system by its authors, namely plausible hiding against arbitrary-access adversaries. Our
attack is possible because of the HIVE implementation’s reliance on the RC4 stream cipher
to ﬁll unused blocks with pseudorandom data. While the attack can be easily eliminated
by using a better pseudorandom generator, it serves as an example of why RC4 should be
avoided in all new applications and a reminder that one has to be careful when instantiating
primitives.
1 Introduction
At ACM CCS 2014, Blass et al. [2] presented a novel “hidden volume encryption” system
called HIVE. Their system splits an encrypted disk into several volumes. The intention
of HIVE is to hide the existence of some of these volumes, and to hide the pattern of
read and write accesses to the volumes from observers.
To hide the access patterns, reading and writing has to be indistinguishable. This
is accomplished by overwriting an empty block with pseudorandom data during a read
operation to simulate an encryption. The HIVE implementation makes use of the RC4
algorithm to overwrite blocks with pseudorandom data and AES in CBC mode to per-
form encryption. This approach can be proved secure if both the ciphertexts produced
by the symmetric encryption scheme and the output of the pseudorandom generator are
indistinguishable from random. We stress that RC4 is not used to encrypt any data in
the scheme, but only to ﬁll unused disk space with pseudorandom bytes. According to
[2], RC4 was selected for performance reasons.
We show that RC4 is a poor choice for this task: we demonstrate that its use enables
us to break the main security property claimed for HIVE in [2], namely “plausible hiding
against arbitrary-access adversaries”. In fact, we will break the even weaker notion of
plausible hiding against one-time adversaries. Our attack does not extract plaintext, but
we are able to detect the supposedly hidden volumes by only examining the disk twice.
(cid:63) The ﬁrst author was supported by EPSRC Leadership Fellowship EP/H005455/1. The second author
did most of the work while working at Aarhus University and was supported by European Research
Council Starting Grant 279447 and by the Danish Council for Independent Research via DFF Starting
Grant 10-081612.
The supposed infeasability of this kind of attack is the main advantage claimed for HIVE
over conventional disk encryption systems and was used to justify its storage overhead
[2].
Our attack exploits biases in RC4 keystreams. While it is well-known that RC4
keystreams are biased, and therefore not indistinguishable from random byte streams
[5,3,4,1,6], it is not immediately obvious that these existing results can be applied to
break any claimed security property of HIVE. This is because previous distinguishers
[3,4] require access to either a very large amount of consecutive keystream bytes, or to a
corresponding amount of truly random bytes, whereas HIVE acts in a blockwise fashion
(with the typical block size being 4096 bytes), presenting a distinguisher with a mix of
short RC4 blocks and AES-CBC blocks.
Our adversary makes use of the Mantin biases in RC4 key-streams [4] to build a
weak blockwise distinguisher for short blocks; in contrast to previous work identifying
RC4 biases [3,4] we explicitly present an eﬃcient and near-optimal statistical test that
can be used to implement the distinguisher. Our blockwise distinguisher is then applied
repeatedly over many blocks to estimate how many blocks on the disk are ﬁlled with
RC4 and how many are ﬁlled with AES-CBC ciphertexts; this approach seems to be
novel and not previously exploited in the literature. Finally, the estimate can be used to
decide what sequence of read and/or write accesses was performed on the disk by the
HIVE system.
Our adversary is eﬃcient, and it needs access only to a moderate number of read/write
queries on blocks. For example, it has success rate 0.997 in an attack involving 223.7
read/write queries on a disk containing a total of 224.7 blocks and 104 GB of data.
Our approach does not involve the derivation of any new properties of RC4. However
it does illustrate that RC4 is not only unﬁt for use as a general purpose pseudorandom
generator (PRG), but also that it can result in systems that can be practically attacked
in scenarios where RC4’s weaknesses are not obviously problematic.
We informed the authors of [2] about our attack at a conceptual level, and, while they
updated their FAQ for the HIVE system1, they did not initially take the opportunity to
revise their source code to use a better PRG or amend their research paper describing
the system. They instead argued that RC4 is only an exchangeable building block that
can easily be replaced. We note that RC4 was the default, and it is unlikely that users
would replace it with their own implementation of a secure PRG, leaving them at risk.
Given that the authors released HIVE to the public and still claimed that it “provides
more security than all existing schemes”,2 we therefore decided to prepare this paper to
alert potential users of the HIVE implementation to the shortcomings of the system. We
are happy to note that after publication of a pre-print of this paper, RC4 was replaced
by AES-CTR in the HIVE implementation.
We again emphasise that we attack only the speciﬁc implementation of HIVE that
instantiates the PRG with RC4, and do not claim that the HIVE scheme is insecure if
1 http://hive.ccs.neu.edu/FAQ, date of access 26/10/2014
2 http://hive.css.neu.edu, date of access 26/10/2014
2
instantiated with a diﬀerent PRG. Indeed we consider HIVE to be a very interesting
proposal that is worthy of further (crypt)analysis.
1.1 Paper Organisation
In the next section, we provide more details on HIVE and its use of RC4. We build
an RC4 distinguisher for short blocks in Section 3. Section 4 describes how we use this
distinguisher to attack the HIVE scheme.
2 Description of the HIVE Scheme
HIVE [2] is a hidden volume encryption scheme that works on a storage device divided
into blocks. The user chooses a value l and can then conﬁgure up to l logical volumes
Vi, where each volume is encrypted with a key derived from a password Pi. Without
knowledge of the corresponding password, a volume should be undetectable. The goal is
that “a user can plausibly deny the existence of a hidden volume even if the adversary
has been able to take several snapshots of their disk and knows the password for the main
volume.”3 This makes it necessary to hide the pattern of accesses that a user makes to
the disk, which is achieved by building on a write-only oblivious RAM (ORAM) scheme.
The original paper presents several diﬀerent security notions and two diﬀerent schemes;
to ﬁx the attack target, we choose a weak security notion and one scheme, which we de-
scribe below. For simplicity, we assume that all ORAMs have the same size, 1/l times
the size of the hard disk.
2.1 ORAM
The stash-optimized, write-only ORAM scheme from [2] is a logical overlay of an en-
crypted disk over a physical disk at least twice the size of the encrypted disk. It makes
use of a pseudo-random generator (PRG) and a symmetric encryption scheme with the
property that without the key, ciphertexts are indistinguishable from random strings of
the same length. The security goal for ORAM is to hide access patterns to the encrypted
disk.
The ORAM maintains a map of logical blocks to physical blocks. Initially, all logical
blocks are mapped to ⊥. At each ORAM.Write(logical block, data block) operation, the
ORAM picks K physical blocks at random (independently of the logical address) and
tries to decrypt each of them. Some may already contain data, while others may be
empty. The new data block to be written and any data blocks that were already stored
in the selected K blocks are written to memory. Speciﬁcally, they are added to a stash,
which acts as a buﬀer to store blocks yet to be written to disk. Then as many of the
data blocks in the stash as possible are encrypted and written back to the selected K
blocks. Because the physical disk is much larger than the logical disk, there is a good
chance that one or more of the K selected blocks were still free, so that all the blocks
3 [2], Introduction
3
currently in the stash can be written to the disk. Any remaining free blocks from the
K selected blocks are overwritten with random data (generated by the PRG). The map
from logical to physical blocks is updated accordingly.
If not enough of the selected blocks were free, then some data blocks will remain in
the stash, to be written during a later write operation, when free blocks are found. In
general, the parameters of the scheme are selected so that there is a good probability
that one or more blocks will be free, so that with high probability the stash size remains
small throughout. For example, for K = 3, the probability of having more than 50 items
in the stash is bounded by 2−64.
The security argument is that since for each operation, K randomly selected blocks
are overwritten with a pseudo-random string, the operation does not leak any information
about the logical address, the data to be written, or the state of the disk (i.e. which blocks
are free).
2.2 HIVE
The security target for HIVE is that it should hide the existence of encrypted disk
volumes for which the key is not known. This is accomplished by executing a real
ORAM.Read and a dummy ORAM.Write for each Read, and a dummy ORAM.Read
and a real ORAM.Write for each Write.
It is claimed in [2] that HIVE achieves the notion of plausible hiding against arbitrary-
access adversaries. We will break the even weaker notion of plausible hiding against
one-time adversaries, which is given in Deﬁnition 1 immediately below.
Deﬁnition 1 (Plausible hiding against one-time adversaries). The experiment
Exppl-ot-bA,Σ (k) for a bit b is run between an adversary A and a challenger emulating the
scheme Σ and consists of the following phases.
1. In the setup phase, A sends l to the challenger, who chooses l passwords P1, . . . , Pl.
The challenger initializes Σ0 with l volumes and passwords, and Σ1 with l−1 volumes
and passwords P1, . . . , Pl−1 and sends P1, . . . , Pl−1 and a snapshot D0 of Σb to A.
2. In round i, A sends two accesses oi,0 and oi,1 to the challenger; the challenger executes
3. Finally, the adversary requests a snapshot Df of the disk, and outputs a bit b(cid:48), which
oi,b on Σb.
is the output of the experiment.
An access o is of the form o = (op, b, V, d). If op = w, then data d is written to block b
on volume V . If op = r, then block b from volume V is read into d. Since the adversary
knows the passwords P1, . . . , Pl−1, if one of the operations in round i is a write to one of
the volumes V1, . . . , Vl−1, then both operations must be identical. Intuitively, this means
that any access to Vl can be passed oﬀ as an access to another volume.
We deﬁne the advantage of the adversary as
Advpl-otA,Σ (k) = |Pr[1 ← Exppl-ot-0A,Σ (k)] − Pr[1 ← Exppl-ot-1A,Σ (k)]|.
4
If we used an asymptotic deﬁnition, we would say that Σ is secure if for all PPT A,
Advpl-otA,Σ (k) is a negligible function. Since we want to attack a concrete instance, we use
a concrete security deﬁnition. We ﬁx a concrete security parameter k and let
Advpl-ot
Σ,k (τ, q) = maxA {Advpl-otA,Σ (k)},
where the maximum is taken over all adversaries running4 in at most τ steps and mak-
ing at most q access queries (that is, there are at most q rounds in the game, each
round involving either writing to or reading from a single block). We then say that for
a concrete parameter k, Σ is (ε, τ, q)-plausible hiding against one-time adversaries, if
Advpl-ot
Σ,k (τ, q) ≤ ε.
2.3 HIVE Instantiation
In HIVE, the symmetric encryption scheme is instantiated with AES-CBC using 256-bit,
password-derived keys and a fresh IV at each call. The number of blocks written to for
each operation, K (k in the original paper), is set to 3 in the implementation.5 This low
value of K necessitates the use of a stash of unwritten blocks to handle the situation
where, when K random blocks are selected, all are already in use. From the HIVE source
code it appears that a volume is not initially overwritten with random data. This will
help our adversary, since it means it will need to consider less additional data, but is not
necessary for the attack to work.
The implementation follows the good practice of using a PRG seeded once with true
randomness obtained from the OS to generate all the randomness consumed by the
cryptographic operations involved in HIVE. Speciﬁcally, the output of the PRG is used
to:
1. produce a fresh, random 16-byte IV (for use with each call to AES-CBC);
2. ﬁll a 4096-byte sector with random bytes;
3. ﬁll a 32-byte metadata block with random bytes. A metadata block consists of two
8-byte values and a 16-byte IV.
4. select a random sector to write to. This requires a random 8-byte value for the sector
id.
The PRG, while being properly seeded, is instantiated with RC4-drop256. According
to [2] this is for performance reasons. More speciﬁcally, RC4 is keyed using 256 bytes
of randomness obtained from the OS, the ﬁrst 256 bytes of RC4 output are dropped to
avoid well-known strong biases (see for example [1] for a complete exposition of these),
some further bytes of output are used for other purposes, and then B consecutive bytes
of output are used to ﬁll a block with “random” bytes. The HIVE implementation uses
B = 4096 (so it has 4 KB blocks), though the choice B = 256 is also discussed in [2]. Note
that we do not (and do not need to) know from precisely where in the RC4 keystream
the bytes are selected, but only that they are consecutive.
4 for an appropriate deﬁnition of running time, a problem we do not consider in this paper
5 Variable HIVE K in dm-hive.c
5
3 Blockwise Distinguisher for RC4
In this section, we develop and evaluate a distinguisher D for short RC4 keystreams as