to use an ideal permutation in place of an ideal cipher.
In more detail, the CDJ mechanism has the parties run 𝑛 instances
of string equality tests. Each equality test will return either true or
false, indicating which items are in the intersection. We observe
that full-fledged equality tests are overkill for CDJ. Instead, let the
parties run 𝑛 instances of plain KA, embedded into polynomials
according to their PSI inputs. Each of these KA instances terminates
with an output key. If Alice and Bob hold a common item, then they
will have a key in common. If Alice has an item that Bob doesn’t (or
vice-versa), we show that Alice computes a key that looks random
to Bob. Hence, for PSI it suffices for the parties to simply compare
their set of KA outputs in the clear.
Not only are key agreement protocols conceptually simpler and
more concretely efficient than string equality test protocols — they
are also inputless. As a result, KA protocols have the property that
their first protocol message can be reused for many instances. This
is not necessarily true for a string equality test protocol, where
the party’s input string would typically be “baked into” the first
protocol message. In terms of the PSI protocol, this means that our
protocol does not require a large polynomial of degree 𝑛 (for 𝑛
items) for the first message. Instead, Alice can send just a single
KA protocol message, to which Bob computes 𝑛 KA responses.
For a two-message KA protocol (like Diffie-Hellman), the fact
that the second message is pseudorandom ensures that the poly-
nomial hides the input set. By adding random oracle calls in a few
selected places, we provide a “hook” for the simulator to extract
malicious parties’ inputs, yielding a malicious-secure PSI protocol.
Finally, the CDJ mechanism uses an ideal cipher for technical
reasons (giving the simulator the ability to ”program” outputs of
the polynomial). We show that a simpler ideal permutation suffices.
Performance of the Diffie-Hellman Instantiation. When our new
PSI paradigm is instantiated with Diffie-Hellman KA, we obtain the
most efficient DH-based PSI protocol to date. For malicious security
we require the oracle Diffie-Hellman (ODH) assumption [2] to
hold in the cyclic group. For semi-honest security we only require
the standard CDH assumption.
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1168CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Mike Rosulek and Ni Trieu
Protocol
Communication
28
29
𝑛 = 𝑛1 = 𝑛2
210
212
216
220
Hardness
Assumption
(𝜙 + 𝜆 + log(𝑛1𝑛2))𝑛1 + 𝜙𝑛2
(3 + 𝑠)(𝜆 + log(𝑛1𝑛2))𝑛1 + 1.2ℓ𝑛2 + |baseOT|
1.02(𝜆 + log2(𝑛2) + 2)𝑛1 + ℓ𝑛2 + |baseOT|
2(𝜆 + log(𝑛1𝑛2))𝑛1 + ℓ(1 + 1/𝜆)𝑛2 + |baseOT|
(𝜆 + log2(𝑛1𝑛2))𝑛1 + ℓ(2.4𝑛2 + 𝜆 + 𝜒) + |baseOT|
(𝜆 + log(𝑛1𝑛2))𝑛1 + 4.8𝜅𝑛2 + |baseOT|
(𝜆 + log(𝑛1𝑛2))𝑛1 + 217𝜅𝑛0.05
+ 2.4𝜅𝑛2 + |baseOT|
2
(𝜆 + log(𝑛1𝑛2))𝑛1 + 217𝜅𝑛0.05
+ 𝜅𝑛2 + |baseOT|
2
(𝜆 + log(𝑛1𝑛2))𝑛1 + 𝜙𝑛2 + 𝜙
2𝜅𝑛1 + 6𝜙𝑛2 + 2𝜙
2𝜅𝑛1 + 3𝜙𝑛2
𝜙(𝑛1 + 𝑛2) log(𝑛1 + 𝑛2)
2𝜅𝑛1 + ℓ(2.4𝑛2 + 2𝜆 + 𝜒) + 𝜆(2.4𝑛2 + 2ℓ) + |baseOT|
2𝜅𝑛1 + 217𝜅𝑛0.05
2
2𝜅𝑛1 + 217𝜅𝑛0.05
2
2𝜅𝑛1 + 𝜙𝑛2 + 𝜙
Semi Honest
DH-PSI
KKRT [36]
SpOT-low [42]
SpOT-fast [42]
PaXoS [43]
CM [11]
VOLE-PSI (PaXoS)[48]
VOLE-PSI (interpolation)[48]
Ours
Malicious
DKT [16]
JL [34]
Hazay [25]
PaXoS [43]
VOLE-PSI (PaXoS)[48]
VOLE-PSI (interpolation)[48]
Ours
Table 1: Theoretical communication costs of PSI protocols (in bits), calculated using computational security 𝜅 = 128 and
statistical security 𝜆 = 40. The cost of base OTs are independent of input size and equal to 5𝜅, which are ignored in the columns
𝑛 = 𝑛1 = 𝑛2. 𝑛1 and 𝑛2 are the input sizes of the sender and receiver respectively. 𝜙 is the size of elliptic curve group elements
(256 is used here). ℓ is width of OT extension matrix (depends on 𝑛1 and protocol). 𝜒 is the upper bound on the number of cycles
in a cuckoo graph of PaXoS.
CDH
OMGDH
CDH
CDH
LPN+CDH
ODH
584𝑛
1032𝑛
515𝑛
595𝑛
1128𝑛
686𝑛
825𝑛
646𝑛
328n
1792𝑛
1024𝑛
8704𝑛
1408𝑛
1009𝑛
830𝑛
512n
576𝑛
1094𝑛
499𝑛
571𝑛
1101𝑛
678𝑛
6580𝑛
6400𝑛
320n
1792𝑛
1024𝑛
6656𝑛
1389𝑛
6772𝑛
6592𝑛
512n
572𝑛
1418𝑛
495𝑛
563𝑛
1097𝑛
674𝑛
23538𝑛
23358𝑛
316n
1792𝑛
1024𝑛
5632𝑛
1389𝑛
23734𝑛
23554𝑛
512n
568𝑛
1349𝑛
483𝑛
547𝑛
1074𝑛
670𝑛
86838𝑛
86659𝑛
312n
1792𝑛
1024𝑛
4608𝑛
1370𝑛
87038𝑛
86859𝑛
512n
570𝑛
1388𝑛
493𝑛
559𝑛
1095𝑛
672𝑛
45128𝑛
44948𝑛
314n
1792𝑛
1024𝑛
5120𝑛
1389𝑛
45326𝑛
45146𝑛
512n
+ 2.4𝜅𝑛2 + |baseOT|
+ 𝜅𝑛2 + |baseOT|
592𝑛
1018𝑛
532𝑛
619𝑛
1155𝑛
694𝑛
419𝑛
240n
336𝑛
1792𝑛
1024𝑛
10752𝑛
1427𝑛
595𝑛
416n
512𝑛
CDH
CDH
LPN+CDH
CDH
Our protocol is both faster and uses less communication
than any other protocol, when the set sizes are small (less than
1000 items) — even considering semi-honest protocols and protocols
based on OT extension, which are faster on large sets. For 𝑛 = 256
items, our malicious protocol is 18-30% faster (depending on the
network speed) and uses 10% less communication than the next
best (semi-honest) protocol. Our semi-honest variant uses 45% less
communication than the next best. See Figure 1 for a complete
comparison.
To the best of our knowledge, ours is the first significant im-
provement in communication cost to the 20-year old classic
DH-PSI protocol, due to [29]. We reduce the communication cost
while simultaneously promoting it from semi-honest to malicious secu-
rity. The classic semi-honest DH-PSI protocol of [29] requires total
communication 2𝑛 group elements plus 𝑛 hashes; the total com-
putation is 4𝑛 variable-base exponentiations. In our protocol, the
total communication is only 𝑛+1 group elements plus 𝑛 hashes; the
total computation is 3𝑛 fixed-base exponentiations, 2𝑛 variable-base
exponentiations, and 2 polynomial interpolation/multi-evaluations
of a degree-𝑛 polynomial. The leading malicious DH-based PSI
protocol is due to De Cristofaro, Kim, and Tsudik [16]; its total
communication is 6𝑛 group elements plus 𝑛 hashes; the total com-
putation is 2𝑛 fixed-based exponentiations and 4𝑛 variable-base
exponentiations. Our malicious protocol is over 30× faster and uses
80% less communication.
2 PRELIMINARIES
2.1 Security Model
Secure two-party computation allows mutually distrusting parties
to jointly perform a computation on their private inputs without
revealing any additional information except for the result itself.
There are two adversarial models, which are usually considered.
In the semi-honest model, the adversary is assumed to follow the
Parameters: Size of parties’ sets: 𝑛 for honest parties and 𝑛′ for
corrupt parties.
Functionality:
• Wait for input 𝑌 ⊆ {0, 1}∗ from receiver. Abort if |𝑌| > 𝑛
and the receiver is honest, or if |𝑌| > 𝑛′ and the receiver is
corrupt.
• Wait for input 𝑋 ⊆ {0, 1}∗ from sender and abort if |𝑋| > 𝑛.
• Give output 𝑋 ∩ 𝑌 to the receiver.
Figure 2: PSI ideal functionality.
protocol, but may try to learn information from the protocol tran-
script. In the malicious model, the adversary follows an arbitrary
polynomial-time strategy, and feasibility holds in the presence of
both types of attacks.
2.2 PSI functionality
In Figure 2, we formally describe the PSI functionality, which allows
2 parties to compute the intersection of their datasets without
revealing any additional information.
Note that the functionality allows a corrupt receiver to have more
input items (𝑛′) than is “advertised” (𝑛). This property reflects the
fact that our protocol can’t tightly enforce the number of items held
by the receiver. This is a common feature of PSI protocols, shared
in particular by all the fastest malicious-secure PSI protocols [43,
46, 47]. We discuss specific relationship between 𝑛′ and 𝑛 achieved
by our protocol in Section 4.1.
2.3 Polynomial Operations
A common implementation of polynomial interpolation and multi-
point evaluation is based on Lagrange algorithm, which costs 𝑂(𝑛2)
field operations. This implementation typically uses for low-degree
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1169Compact and Malicious Private Set Intersection for Small Sets
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
polynomials. However, when 𝑛 is very large (e.g. 𝑛 = 220) this algo-
rithm is completely impractical. In this work, we use the faster algo-
rithms [41] which achieves computational complexity of 𝑂(𝑛 log2 𝑛)
arithmetic operations. At the high level idea, the algorithms for
both problems follow the divide-and-conquer approach. Particu-
larly, the problem is reduced to two half-size problems after each
iteration. Each combination of individual solutions from two half-
size problems to the full-size solution costs 𝑂(𝑛 log 𝑛). Therefore,
the total complexity of polynomial interpolation and multi-point
evaluation is 𝑂(𝑛 log2 𝑛).
Given 𝑋 = {𝑥1, . . . , 𝑥𝑛} ⊆ F and 𝑌 = {𝑦1, . . . , 𝑦𝑛} ⊆ F, we
use 𝑃 = interpolF({(𝑥1, 𝑦1), . . . , (𝑥𝑛, 𝑦𝑛)}) to refer to polynomial
interpolation which finds the unique (𝑛 − 1)-degree polynomial 𝑃
that satisfies 𝑃(𝑥𝑖) = 𝑦𝑖 for all 𝑖 ∈ [𝑛].
2.4 Ideal Permutation
In the ideal permutation model, all parties have oracle access to a
random permutation Π on {0, 1}𝑛 and its inverse Π−1. We write
Π± to refer to the pair of these oracles. In the proof of security, the
simulator answers the interface of Π±, meaning that it can observe
all queries and program the responses. The ideal permutation model
is similar to, but weaker than, the ideal cipher model. An ideal cipher
is a family of ideal permutations, one for each key.
The ideal permutation assumption has recently become popular
in practical MPC implementations, because it allows one to base
cryptographic operations on a fixed-key block cipher — i.e., to use
hardware-accelerated AES instructions without computing the AES
key schedule. Ideal permutations have been used to realize efficient
hashing functions for garbled circuits and OT extension [5, 24]. Our
work requires an ideal permutation that supports key-agreement
messages as inputs, therefore our implementation uses Rijndael-
256 rather than AES (whose block size is only 128). We note that
other options are available to instantiate an ideal permutation.
For example, symmetric-key constructions that use the sponge
methodology [7] all use an efficient underlying ideal permutation.
3 KEY AGREEMENT PRELIMINARIES
We construct PSI from 2-round key-agreement protocols. A 2-
round key agreement protocol KA has several parameters:
• KA.R is the space of random coins for the two parties.
• KA.M is the space of possible messages for Party 2.
• KA.K is the space of possible output keys.
A key agreement protocol consists of algorithms: KA.msg1, KA.msg2,
KA.key1, KA.key2, which correspond to an interactive key agree-
ment protocol as shown in Figure 3.
In some 2-round key agreement protocols, the second message
𝑚2 does not depend on the first message 𝑚1, and we can write
𝑚2 = KA.msg2(𝑏) instead of 𝑚2 = KA.msg2(𝑏, 𝑚1). In these cases,