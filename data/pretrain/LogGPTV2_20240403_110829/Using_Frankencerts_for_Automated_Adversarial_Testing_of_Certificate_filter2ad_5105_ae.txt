### Semantic Discrepancies in Certificate Validation

The following table highlights semantic discrepancies found in certificate validation across different SSL/TLS implementations. Incorrect answers are shown in bold.

| **Problem** | **Certiﬁcates Triggering the Problem Occur in the Original Corpus** | **OpenSSL** | **PolarSSL** | **GnuTLS** | **CyaSSL** | **MatrixSSL** | **NSS** | **OpenJDK, Bouncy Castle** | **Browsers (Firefox, Opera, Chrome)** |
|-------------|------------------------------------------------------------------|-------------|--------------|------------|------------|---------------|---------|-----------------------------|--------------------------------------|
| Untrusted version 1 intermediate CA certiﬁcate | No | reject | reject | accept | reject | reject | reject | reject | Firefox: reject, Opera/Chrome: accept |
| Untrusted version 2 intermediate CA certiﬁcate | No | reject | reject | reject | reject | reject | reject | reject | reject |
| Version 1 certiﬁcate with valid basic constraints | No | accept | reject | accept | accept | accept | reject | reject | accept |
| Intermediate CA not authorized to issue further intermediate CA certiﬁcates, but followed by an intermediate CA certiﬁcate | No | reject | reject | accept | reject | reject | reject | reject | reject |
| Intermediate CA not authorized to issue further intermediate CA certiﬁcates, but followed by a leaf CA certiﬁcate | No | reject | reject | accept | reject | reject | reject | reject | reject |
| Intermediate CA not authorized to issue certiﬁcates for server’s hostname | No | reject | reject | reject | reject | reject | reject | reject | reject |
| Certiﬁcate not yet valid | Yes | reject | accept | reject | reject | reject | reject | reject | reject |
| Certiﬁcate expired in its timezone | Yes | reject | reject | reject | reject | reject | reject | reject | reject |
| CA certiﬁcate not authorized for signing other certiﬁcates | Yes | reject | reject | reject | reject | reject | reject | reject | reject |
| Server certiﬁcate not authorized for use in SSL/TLS handshake | Yes | reject | accept | reject | reject | reject | reject | reject | reject |
| Server certiﬁcate not authorized for server authentication | Yes | reject | reject | reject | reject | reject | reject | reject | reject |
| Certiﬁcate with unknown critical extension | No | reject | reject | reject | accept | reject | reject | reject | reject |
| Certiﬁcate with malformed extension value | No | reject | reject | reject | accept | reject | reject | reject | reject |
| Certiﬁcate with the same issuer and subject and a valid chain of trust | No | reject | reject | reject | reject | reject | reject | reject | reject |
| Issuer name does not match AKI | Yes | reject | reject | reject | reject | reject | reject | reject | reject |
| Issuer serial number does not match AKI | Yes | reject | reject | reject | reject | reject | reject | reject | reject |

### Dependency Between Flags in GnuTLS

There is an interesting dependency between two flags in GnuTLS that affects the acceptance of intermediate v1 certificates:

- `GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT` must be set to `false`.
- `GNUTLS_VERIFY_DO_NOT_ALLOW_X509_V1_CA_CRT` must be set to `true`.

However, the calling function only sets the former flag, leading to a situation where GnuTLS accepts any v1 certificate, even though it is intended to accept only root v1 certificates. This bug has significant security implications. If an application based on GnuTLS trusts a v1 root CA certificate, any server certified by the same root can act as a rogue CA, issuing fake certificates for any Internet domain and launching man-in-the-middle attacks. This vulnerability is particularly concerning because trusting v1 root certificates is common. For example, Gentoo Linux by default includes 13 v1 root CA certificates, and Mozilla includes 9.

### Untrusted Version 2 Intermediate Certificate

Version 2 X.509 certificates were not observed "in the wild," but they were generated for testing purposes. MatrixSSL silently accepts all CA certificates with a version field less than 2. In GnuTLS, the `gnutls_x509_crt_get_version` function returns the actual version, and the following check blocks version 2 certificates:

```c
issuer_version = gnutls_x509_crt_get_version(issuer);
if (!(flags & GNUTLS_VERIFY_DISABLE_CA_SIGN) &&
    ((flags & GNUTLS_VERIFY_DO_NOT_ALLOW_X509_V1_CA_CRT) || issuer_version != 1)) {
    // ...
}
```

### Version 1 Certificate with Valid Basic Constraints

Basic constraints were added in X.509 version 3, but some SSL/TLS implementations always verify these constraints if present, regardless of the certificate's version. Some of our test chains include version 1 intermediate certificates with correct basic constraints. OpenSSL, GnuTLS, MatrixSSL, CyaSSL, Opera, and Chrome accept them, while OpenJDK and Bouncy Castle reject them. NSS and Firefox fail with a generic "Security library failure" error. Neither choice appears to lead to a security vulnerability.

### Intermediate CA Not Authorized to Issue Further Intermediate CA Certificates

When a higher-level CA certifies a lower-level CA, it can impose restrictions using the `pathLenConstraint` field in the basic constraints extension. For example, setting `pathLenConstraint` to zero restricts the lower-level CA from issuing further intermediate CA certificates. We observed 17 CA certificates with path length constraints in our corpus. MatrixSSL ignores these constraints, which can be exploited by a malicious or compromised CA to evade restrictions. 

For instance, if a trusted root CA authorizes a lower-level CA (e.g., EnterpriseCA) but prohibits it from creating other CAs and issuing certificates for any domain other than `enterprise.com`, this provides some protection if EnterpriseCA is compromised. However, if the attacker uses EnterpriseCA to issue a certificate for `google.com`, this should be rejected by most SSL/TLS implementations. MatrixSSL, however, would accept it, potentially leading to man-in-the-middle attacks. The impact is amplified because MatrixSSL targets embedded devices, whose manufacturers often obtain CA certificates with restricted authority.

### Discrepancy in Path Length Zero

There is a discrepancy in how implementations handle an intermediate CA with a path length of zero followed by a leaf certificate that is also a CA certificate. Only MatrixSSL and GnuTLS accept this chain, while other implementations reject it. The X.509 standard explicitly permits a leaf CA certificate to follow an intermediate CA with a path length of zero, but only GnuTLS implements this correctly.

### Incorrect Checking of Name Constraints

A higher-level CA can restrict a lower-level CA's ability to issue certificates for arbitrary domains using name constraints. For example, if the issuing CA wants to allow the lower-level CA to certify only subdomains of `foo.com`, it can add a name constraint `*.foo.com` to the lower-level CA's certificate. GnuTLS, MatrixSSL, and CyaSSL ignore these constraints and accept the server's certificate even if it was issued by a CA not authorized for that domain.

### Incorrect Checking of Time

Every X.509 certificate has `notBefore` and `notAfter` timestamp fields. The SSL/TLS client must verify that the current date and time (in GMT or the specified time zone) is within these timestamps. PolarSSL ignores the `notBefore` timestamp and uses local time for `notAfter`. MatrixSSL does not perform time checks and delegates this responsibility to the application, which may only check the day and not the hours and minutes, and uses local time instead of GMT.

### Incorrect Checking of Key Usage

SSL/TLS clients must check the key usage and extended key usage extensions to ensure certificates are authorized for their intended purpose. Leaf certificates must be authorized for key encipherment or key agreement, while CA certificates must be authorized to sign other certificates. GnuTLS, CyaSSL, and MatrixSSL do not check the key usage extension in CA certificates, allowing an attacker who compromises a CA key to forge certificates and launch man-in-the-middle attacks. Similarly, PolarSSL, GnuTLS, CyaSSL, and MatrixSSL do not check the key usage extension in leaf certificates, which is a serious security vulnerability. For example, if an attacker compromises a code signing certificate, they can impersonate network and web servers, significantly increasing the attack's impact.