客户端来进行一个测试，这里可以开两个终端窗口，下面左边的是其中的一个的输出，右边
的是另一个的输出：
$ go build gopl.io/ch8/netcat1
$ ./netcat1
13:58:54 $ ./netcat1
13:58:55
13:58:56
^C
13:58:57
13:58:58
13:58:59
^C
$ killall clock1
killall命令是一个Unix命令行工具，可以用给定的进程名来杀掉所有名字匹配的进程。
第二个客户端必须等待第一个客户端完成工作，这样服务端才能继续向后执行；因为我们这
里的服务器程序同一时间只能处理一个客户端连接。我们这里对服务端程序做一点小改动，
使其支持并发：在handleConn函数调用的地方增加go关键字，让每一次handleConn的调用都
进入一个独立的goroutine。
示例: 并发的Clock服务 294
gopl
gopl.io/ch8/clock2
for {
conn, err := listener.Accept()
if err != nil {
log.Print(err) // e.g., connection aborted
continue
}
go handleConn(conn) // handle connections concurrently
}
现在多个客户端可以同时接收到时间了：
$ go build gopl.io/ch8/clock2
$ ./clock2 &
$ go build gopl.io/ch8/netcat1
$ ./netcat1
14:02:54 $ ./netcat1
14:02:55 14:02:55
14:02:56 14:02:56
14:02:57 ^C
14:02:58
14:02:59 $ ./netcat1
14:03:00 14:03:00
14:03:01 14:03:01
^C 14:03:02
^C
$ killall clock2
练习 8.1： 修改clock2来支持传入参数作为端口号，然后写一个clockwall的程序，这个程序可
以同时与多个clock服务器通信，从多服务器中读取时间，并且在一个表格中一次显示所有服
务传回的结果，类似于你在某些办公室里看到的时钟墙。如果你有地理学上分布式的服务器
可以用的话，让这些服务器跑在不同的机器上面；或者在同一台机器上跑多个不同的实例，
这些实例监听不同的端口，假装自己在不同的时区。像下面这样：
$ TZ=US/Eastern ./clock2 -port 8010 &
$ TZ=Asia/Tokyo ./clock2 -port 8020 &
$ TZ=Europe/London ./clock2 -port 8030 &
$ clockwall NewYork=localhost:8010 Tokyo=localhost:8020 London=localhost:8030
练习 8.2： 实现一个并发FTP服务器。服务器应该解析客户端来的一些命令，比如cd命令来切
换目录，ls来列出目录内文件，get和send来传输文件，close来关闭连接。你可以用标准的ftp
命令来作为客户端，或者也可以自己实现一个。
示例: 并发的Clock服务 295
gopl
示例: 并发的Clock服务 296
gopl
8.3. 示例: 并发的Echo服务
clock服务器每一个连接都会起一个goroutine。在本节中我们会创建一个echo服务器，这个服
务在每个连接中会有多个goroutine。大多数echo服务仅仅会返回他们读取到的内容，就像下
面这个简单的handleConn函数所做的一样：
func handleConn(c net.Conn) {
io.Copy(c, c) // NOTE: ignoring errors
c.Close()
}
一个更有意思的echo服务应该模拟一个实际的echo的“回响”，并且一开始要用大写HELLO来
表示“声音很大”，之后经过一小段延迟返回一个有所缓和的Hello，然后一个全小写字母的
hello表示声音渐渐变小直至消失，像下面这个版本的handleConn(译注：笑看作者脑洞大
开)：
gopl.io/ch8/reverb1
func echo(c net.Conn, shout string, delay time.Duration) {
fmt.Fprintln(c, "\t", strings.ToUpper(shout))
time.Sleep(delay)
fmt.Fprintln(c, "\t", shout)
time.Sleep(delay)
fmt.Fprintln(c, "\t", strings.ToLower(shout))
}
func handleConn(c net.Conn) {
input := bufio.NewScanner(c)
for input.Scan() {
echo(c, input.Text(), 1*time.Second)
}
// NOTE: ignoring potential errors from input.Err()
c.Close()
}
我们需要升级我们的客户端程序，这样它就可以发送终端的输入到服务器，并把服务端的返
回输出到终端上，这使我们有了使用并发的另一个好机会：
gopl.io/ch8/netcat2
示例: 并发的Echo服务 297
gopl
func main() {
conn, err := net.Dial("tcp", "localhost:8000")
if err != nil {
log.Fatal(err)
}
defer conn.Close()
go mustCopy(os.Stdout, conn)
mustCopy(conn, os.Stdin)
}
当main goroutine从标准输入流中读取内容并将其发送给服务器时，另一个goroutine会读取并
打印服务端的响应。当main goroutine碰到输入终止时，例如，用户在终端中按了Control-
D(^D)，在windows上是Control-Z，这时程序就会被终止，尽管其它goroutine中还有进行中的
任务。(在8.4.1中引入了channels后我们会明白如何让程序等待两边都结束)。
下面这个会话中，客户端的输入是左对齐的，服务端的响应会用缩进来区别显示。 客户端会
向服务器“喊三次话”：
$ go build gopl.io/ch8/reverb1
$ ./reverb1 &
$ go build gopl.io/ch8/netcat2
$ ./netcat2
Hello?
HELLO?
Hello?
hello?
Is there anybody there?
IS THERE ANYBODY THERE?
Yooo-hooo!
Is there anybody there?
is there anybody there?
YOOO-HOOO!
Yooo-hooo!
yooo-hooo!
^D
$ killall reverb1
注意客户端的第三次shout在前一个shout处理完成之前一直没有被处理，这貌似看起来不是特
别“现实”。真实世界里的回响应该是会由三次shout的回声组合而成的。为了模拟真实世界的
回响，我们需要更多的goroutine来做这件事情。这样我们就再一次地需要go这个关键词了，
这次我们用它来调用echo：
gopl.io/ch8/reverb2
示例: 并发的Echo服务 298
gopl
func handleConn(c net.Conn) {
input := bufio.NewScanner(c)
for input.Scan() {
go echo(c, input.Text(), 1*time.Second)
}
// NOTE: ignoring potential errors from input.Err()
c.Close()
}
go后跟的函数的参数会在go语句自身执行时被求值；因此input.Text()会在main goroutine中被
求值。 现在回响是并发并且会按时间来覆盖掉其它响应了：
$ go build gopl.io/ch8/reverb2
$ ./reverb2 &
$ ./netcat2
Is there anybody there?
IS THERE ANYBODY THERE?
Yooo-hooo!
Is there anybody there?
YOOO-HOOO!
is there anybody there?
Yooo-hooo!
yooo-hooo!
^D
$ killall reverb2
让服务使用并发不只是处理多个客户端的请求，甚至在处理单个连接时也可能会用到，就像
我们上面的两个go关键词的用法。然而在我们使用go关键词的同时，需要慎重地考虑
net.Conn中的方法在并发地调用时是否安全，事实上对于大多数类型来说也确实不安全。我
们会在下一章中详细地探讨并发安全性。
示例: 并发的Echo服务 299
gopl
8.4. Channels
如果说goroutine是Go语言程序的并发体的话，那么channels则是它们之间的通信机制。一个
channel是一个通信机制，它可以让一个goroutine通过它给另一个goroutine发送值信息。每个
channel都有一个特殊的类型，也就是channels可发送数据的类型。一个可以发送int类型数据
的channel一般写为chan int。
使用内置的make函数，我们可以创建一个channel：
ch := make(chan int) // ch has type 'chan int'
和map类似，channel也对应一个make创建的底层数据结构的引用。当我们复制一个channel
或用于函数参数传递时，我们只是拷贝了一个channel引用，因此调用者和被调用者将引用同
一个channel对象。和其它的引用类型一样，channel的零值也是nil。
两个相同类型的channel可以使用==运算符比较。如果两个channel引用的是相同的对象，那
么比较的结果为真。一个channel也可以和nil进行比较。
一个channel有发送和接受两个主要操作，都是通信行为。一个发送语句将一个值从一个
goroutine通过channel发送到另一个执行接收操作的goroutine。发送和接收两个操作都使
用 运算符。在发送语句中， 运算符分割channel和要发送的值。在接收语句中， 运
<- <- <-
算符写在channel对象之前。一个不使用接收结果的接收操作也是合法的。
ch <- x // a send statement
x = <-ch // a receive expression in an assignment statement
<-ch // a receive statement; result is discarded
Channel还支持close操作，用于关闭channel，随后对基于该channel的任何发送操作都将导
致panic异常。对一个已经被close过的channel进行接收操作依然可以接受到之前已经成功发
送的数据；如果channel中已经没有数据的话将产生一个零值的数据。
使用内置的close函数就可以关闭一个channel：
close(ch)
以最简单方式调用make函数创建的是一个无缓存的channel，但是我们也可以指定第二个整
型参数，对应channel的容量。如果channel的容量大于零，那么该channel就是带缓存的
channel。
Channels 300
gopl
ch = make(chan int) // unbuffered channel
ch = make(chan int, 0) // unbuffered channel
ch = make(chan int, 3) // buffered channel with capacity 3
我们将先讨论无缓存的channel，然后在8.4.4节讨论带缓存的channel。
8.4.1. 不带缓存的Channels
一个基于无缓存Channels的发送操作将导致发送者goroutine阻塞，直到另一个goroutine在相
同的Channels上执行接收操作，当发送的值通过Channels成功传输之后，两个goroutine可以
继续执行后面的语句。反之，如果接收操作先发生，那么接收者goroutine也将阻塞，直到有
另一个goroutine在相同的Channels上执行发送操作。
基于无缓存Channels的发送和接收操作将导致两个goroutine做一次同步操作。因为这个原
因，无缓存Channels有时候也被称为同步Channels。当通过一个无缓存Channels发送数据
时，接收者收到数据发生在唤醒发送者goroutine之前（译注：happens before，这是Go语言
并发内存模型的一个关键术语！）。
在讨论并发编程时，当我们说x事件在y事件之前发生（happens before），我们并不是说x事
件在时间上比y时间更早；我们要表达的意思是要保证在此之前的事件都已经完成了，例如在
此之前的更新某些变量的操作已经完成，你可以放心依赖这些已完成的事件了。
当我们说x事件既不是在y事件之前发生也不是在y事件之后发生，我们就说x事件和y事件是并
发的。这并不是意味着x事件和y事件就一定是同时发生的，我们只是不能确定这两个事件发
生的先后顺序。在下一章中我们将看到，当两个goroutine并发访问了相同的变量时，我们有
必要保证某些事件的执行顺序，以避免出现某些并发问题。
在8.3节的客户端程序，它在主goroutine中（译注：就是执行main函数的goroutine）将标准输
入复制到server，因此当客户端程序关闭标准输入时，后台goroutine可能依然在工作。我们
需要让主goroutine等待后台goroutine完成工作后再退出，我们使用了一个channel来同步两个
goroutine：
gopl.io/ch8/netcat3
Channels 301
gopl
func main() {
conn, err := net.Dial("tcp", "localhost:8000")
if err != nil {
log.Fatal(err)
}
done := make(chan struct{})
go func() {
io.Copy(os.Stdout, conn) // NOTE: ignoring errors
log.Println("done")
done <- struct{}{} // signal the main goroutine
}()
mustCopy(conn, os.Stdin)
conn.Close()
<-done // wait for background goroutine to finish
}
当用户关闭了标准输入，主goroutine中的mustCopy函数调用将返回，然后调用conn.Close()