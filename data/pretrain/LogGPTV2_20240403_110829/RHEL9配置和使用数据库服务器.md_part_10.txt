        将 [*backup_directory*]{.emphasis} 替换为您所希望的备份位置。
        如果您在与服务器相同的主机上使用表空间并执行基础备份，那么也必须使用
        `--tablespace-mapping`{.literal}
        选项，否则当试图将备份写入到同一位置时，备份将失败。
    -   将基础备份创建为一个 `tar`{.literal} 归档（`tar`{.literal}
        和压缩格式）：
        ``` literallayout
        $ pg_basebackup -D backup_directory -Ft -z
        ```
        将 [*backup_directory*]{.emphasis} 替换为您所希望的备份位置。
        要恢复此数据，您必须手动提取正确位置中的文件。
    :::
2.  基础备份进程完成后，将备份历史记录文件中指定的数据库集群副本和备份过程中使用的
    WAL 段文件进行安全归档。
3.  删除比基础备份中使用的 WAL
    段文件数值更低的WAL段，因为这些比基础备份旧，并且不再需要进行恢复。
:::
要指定[**serverpg_basebackup**]{.strong}将与哪个数据库联系，请使用以下命令行选项：
::: itemizedlist
-   `-h`{.literal} 选项用来定义主机的。
    默认主机要么是本地主机，要么是 `PGHOST`{.literal}
    环境变量所指定的主机。
-   `-p`{.literal} 选项用来定义端口。
    默认端口是由 `PGPORT`{.literal} 环境变量或编译后的默认值指明的。
:::
::: itemizedlist
**其他资源**
-   [PostgreSQL 文档 -
    基础备份](https://www.postgresql.org/docs/current/continuous-archiving.html#BACKUP-BASE-BACKUP){.link}.
-   [PostgreSQL 文档 - [**pg_basebackup**]{.strong}
    工具](https://www.postgresql.org/docs/13/app-pgbasebackup.html){.link}。
:::
:::
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#restoring-database-with-continuous-archiving}使用持续归档备份来恢复数据库 {.title}
:::
要使用持续备份来恢复数据库，请使用以下流程：
::: orderedlist
**流程**
1.  停止服务器：
    ``` literallayout
    # systemctl stop postgresql.service
    ```
2.  将必要的数据复制到临时位置。
    最好复制整个集群数据目录和任何表空间。请注意，这需要系统上有足够的可用空间来保存现有数据库的两个副本。
    如果您没有足够的空间，就保存集群的`pg_wal`{.literal}
    目录的内容，其中可能包含系统关闭前没有归档的日志。
3.  删除集群数据目录下的所有现有文件和子目录，并在您要使用的任何表空间的根目录下删除。
4.  从您的基础备份恢复数据库文件。
    请确定：
    ::: itemizedlist
    -   恢复的文件具有正确的所有权（数据库系统用户，而不是
        `root`{.literal}）。
    -   恢复的文件具有正确的权限。
    -   `pg_tblspc/`{.literal} 子目录中的符号链接被正确恢复。
    :::
5.  删除 `pg_wal/`{.literal} 子目录中的任何文件。
    这些文件源自基础备份，因此已过时。如果您没有归档
    `pg_wal/`{.literal}，请重新创建它，并使其具有正确的权限。
6.  将你在步骤 2 中保存的任何未归档的 WAL 段文件复制到
    `pg_wal/`{.literal} 中。
7.  在集群数据目录中创建 `restore.conf`{.literal} 恢复命令文件，并在
    `restore_command`{.literal} 配置参数中指定 shell 命令。您可以使用
    `cp`{.literal} 命令、其它命令或 shell 脚本。例如：
    ``` literallayout
    restore_command = 'cp /mnt/server/archivedir/%f "%p"'
    ```
8.  启动服务器：
    ``` literallayout
    # systemctl start postgresql.service
    ```
    服务器将进入恢复模式，并继续读取所需的存档 WAL 文件。
    如果恢复因为外部错误而终止，那么可以重启服务器，它将继续进行恢复。恢复过程完成后，服务器将
    `restore.conf`{.literal} 重命名为
    `restore.done`{.literal}。这可以防止服务器在启动正常的数据库操作后意外重新进入恢复模式。
9.  检查数据库的内容，确保数据库已恢复到所需的状态。
    如果数据库尚未恢复到所需状态，请返回到第 1
    步。如果数据库已恢复到所需的状态，那么通过恢复
    `pg_hba.conf`{.literal}
    文件中的客户端身份验证配置来允许用户进行连接。
:::
有关使用持续备份恢复的更多信息，请参阅 [PostgreSQL
文档](https://www.postgresql.org/docs/current/continuous-archiving.html#BACKUP-PITR-RECOVERY){.link}。
::: itemizedlist
**其他资源**
-   [PostgreSQL 文档 -
    持续存档方法](https://www.postgresql.org/docs/current/continuous-archiving.html){.link}。
:::
:::
:::
:::
::: section
::: titlepage
# []{#using-postgresql_configuring-and-using-database-servers.html#migrating-to-a-rhel-9-version-of-postgresql_using-postgresql}迁移到 RHEL 9 的 PostgreSQL 版本 {.title}
:::
Red Hat Enterprise Linux 8 在多个模块流中提供 [**PostgreSQL**]{.strong}
：[**PostgreSQL 10**]{.strong} （默认的 postgresql 流）、[**PostgreSQL
9.6**]{.strong}、[**PostgreSQL 12**]{.strong} 和 [**PostgreSQL
13**]{.strong}。在 RHEL 9 中，[**PostgreSQL 13**]{.strong} 可用。
Red Hat Enterprise Linux 上的 [**PostgreSQL**]{.strong}
用户可为数据库文件使用两个迁移路径：
::: itemizedlist
-   [使用 pg_upgrade
    工具快速升级](#using-postgresql_configuring-and-using-database-servers.html#fast-upgrade-using-the-pg_upgrade-tool_migrating-to-a-rhel-9-version-of-postgresql "使用 pg_upgrade 工具快速升级"){.link}
-   [转储和恢复升级](#using-postgresql_configuring-and-using-database-servers.html#dump-and-restore-upgrade_migrating-to-a-rhel-9-version-of-postgresql "转储和恢复升级"){.link}
:::
快速升级方法比转储和恢复过程要快。然而，在某些情况下，快速升级无法正常工作，例如，当跨架构升级时，只能使用转储和恢复过程。
迁移到更新版本的 [**PostgreSQL**]{.strong} 的先决条件是备份所有
[**PostgreSQL**]{.strong} 数据库。
转储和恢复过程需要转储数据库并执行SQL文件备份，建议使用快速升级方法。
在迁移到 [**PostgreSQL**]{.strong} 的后续版本之前，请参阅您要迁移的
[**PostgreSQL**]{.strong}
版本的[上游兼容性说明](https://www.postgresql.org/docs/13/release.html){.link}，以及您要迁移的版本与目标版本之间所有跳过的
[**PostgreSQL**]{.strong} 版本。
::: section
::: titlepage
## []{#using-postgresql_configuring-and-using-database-servers.html#fast-upgrade-using-the-pg_upgrade-tool_migrating-to-a-rhel-9-version-of-postgresql}使用 pg_upgrade 工具快速升级 {.title}
:::
在快速升级过程中，必须将二进制数据文件复制到
`/var/lib/pgsql/data/`{.literal} 目录中，并使用 `pg_upgrade`{.literal}
工具。
您可以使用此方法将数据从 RHEL 8 的 [**PostgreSQL 12**]{.strong}
版本迁移到 RHEL 9 版本的 [**PostgreSQL 13**]{.strong}。
以下流程描述了使用快速升级方法从 RHEL 8 版本的 [**PostgreSQL
12**]{.strong} 迁移到 RHEL 9 版本的 [**PostgreSQL 13**]{.strong}。对于从
`12`{.literal} 以外的 `postgresql`{.literal}
流进行迁移，请使用以下方法之一：
::: itemizedlist
-   将 RHEL 8 上的 [**PostgreSQL**]{.strong} 服务器更新至版本
    12，然后使用 `pg_upgrade`{.literal} 程序执行一个到 RHEL 9 版本的
    [**PostgreSQL 13**]{.strong} 的快速升级。如需更多信息，请参阅
    [迁移到 PostgreSQL 的 RHEL 9
    版本](#using-postgresql_configuring-and-using-database-servers.html#migrating-to-a-rhel-9-version-of-postgresql_using-postgresql "迁移到 RHEL 9 的 PostgreSQL 版本"){.link}。
-   使用 dump 和 restore 直接在 RHEL 8 中的 [**PostgreSQL**]{.strong}
    版本和 RHEL 9 中的 [**PGPostgreSQL 13**]{.strong} 之间进行升级。
:::
::: itemizedlist
**先决条件**
-   在执行升级前，请备份存储在 [**PostgreSQL**]{.strong}
    数据库中的所有数据。默认情况下，所有数据都存储在 RHEL 8 和 RHEL 9
    系统的 `/var/lib/pgsql/data/`{.literal} 目录中。
:::
::: orderedlist
**流程**
1.  在 RHEL 9 系统中，安装 `postgresql-server`{.literal} 和
    `postgresql-upgrade`{.literal} 软件包：
    ``` literallayout
    # dnf install postgresql-server postgresql-upgrade
    ```
    另外，如果您在 RHEL 8 上使用了任何 [**PostgreSQL**]{.strong}
    服务器模块，那么也可以在 RHEL 9 系统上安装该模块的两个版本，分别针对
    [**PostgreSQL 12**]{.strong} （作为 `postgresql-upgrade`{.literal}
    软件包安装）和 [**PostgreSQL 13**]{.strong} 的目标版本（作为
    `postgresql-server`{.literal}
    软件包安装）进行编译。如果您需要编译第三方[**PostgreSQL**]{.strong}服务器模块，请根据`postgresql-devel`{.literal}和`postgresql-upgrade-devel`{.literal}软件包来构建它。
2.  检查以下项：
    ::: itemizedlist
    -   基本配置：在 RHEL 9 系统中，检查您的服务器是否使用默认
        `/var/lib/pgsql/data`{.literal}
        目录，且数据库已正确初始化并启用。此外，数据文件必须存储在
        `/usr/lib/systemd/system/postgresql.service`{.literal}
        文件中提及的相同路径。
    -   [**PostgreSQL**]{.strong} 服务器：您的系统可以运行多个
        [**PostgreSQL**]{.strong}
        服务器。请确定所有这些服务器的数据目录都是独立处理的。
    -   [**PostgreSQL**]{.strong} 服务器模块：确保在 RHEL 8 中使用的
        [**PostgreSQL**]{.strong} 服务器模块也安装在 RHEL 9
        系统中。请注意，插件安装在 `/usr/lib64/pgsql/`{.literal}
        目录中。
    :::
3.  确保 `postgresql`{.literal} 服务在复制数据时未在源和目标系统上运行。
    ``` literallayout
    # systemctl stop postgresql.service
    ```
4.  将源位置中的数据库文件复制到 RHEL 9 系统上的
    `/var/lib/pgsql/data/`{.literal} 目录中。
5.  以 [**PostgreSQL**]{.strong} 用户身份运行以下命令来执行升级过程：
    ``` literallayout
    # postgresql-setup --upgrade
    ```
    这会在后台启动 `pg_upgrade`{.literal} 进程。
    在出现故障时，`postgresql-setup`{.literal}
    会提供一条说明性的错误消息。
6.  将之前的配置从 `/var/lib/pgsql/data-old`{.literal} 复制到新集群。
    请注意，快速升级不会在较新的数据栈中重用之前的配置，配置是从零开始生成的。如果要手动组合旧配置和新配置，请使用数据目录中的
    \*.conf 文件。
7.  启动新的 [**PostgreSQL**]{.strong} 服务器：
    ``` literallayout
    # systemctl start postgresql.service
    ```
8.  运行 [**PostgreSQL**]{.strong} 主目录中的
    `analyze_new_cluster.sh`{.literal} 脚本：
    ``` literallayout
    su postgres -c '~/analyze_new_cluster.sh'
    ```
9.  如果您希望新 [**PostgreSQL**]{.strong}
    服务器在引导时自动启动，请运行：
    ``` literallayout
    # systemctl enable postgresql.service
    ```
:::
:::
::: section
::: titlepage
## []{#using-postgresql_configuring-and-using-database-servers.html#dump-and-restore-upgrade_migrating-to-a-rhel-9-version-of-postgresql}转储和恢复升级 {.title}
:::
使用转储和恢复升级时，您必须将所有的数据库内容转储到 SQL
文件转储文件中。请注意，转储和恢复升级比快速升级方法慢，可能需要在生成的
SQL 文件中进行一些手动修复。
您可以使用此方法将数据从任何 RHEL 8 版本的 [**PostgreSQL**]{.strong}
迁移到 RHEL 9 版本的 [**PostgreSQL 13**]{.strong}。
在 RHEL 8 和 RHEL 9 系统中，[**PostgreSQL**]{.strong} 数据默认存储在
`/var/lib/pgsql/data/`{.literal} 目录中。
要执行转储和恢复升级，请将用户改为 `root`{.literal}。
以下流程描述了从 RHEL 8 的默认 [**Postgreql 10**]{.strong} 迁移到 RHEL 9
的 [**PostgreSQL 13**]{.strong}。
::: orderedlist
**流程**
1.  在 RHEL 8 系统中，启动 [**PostgreSQL 10**]{.strong} 服务器：
    ``` literallayout
    # systemctl start postgresql.service
    ```
2.  在 RHEL 8 系统中，将所有数据库内容转储到 `pgdump_file.sql`{.literal}
    文件中：
    ``` literallayout
    su - postgres -c "pg_dumpall > ~/pgdump_file.sql"
    ```
3.  确保正确转储数据库：
    ``` literallayout
    su - postgres -c 'less "$HOME/pgdump_file.sql"'
    ```
    结果显示的转储的 sql
    文件的路径为：`/var/lib/pgsql/pgdump_file.sql`{.literal}。
4.  在 RHEL 9 系统中，安装 `postgresql-server`{.literal} 软件包：
    ``` literallayout
    # dnf install postgresql-server
    ```
    另外，如果您在 RHEL 8 中使用了任何 [**PostgreSQL**]{.strong}
    服务器模块，也需要在 RHEL 9 系统中安装它们。如果您需要编译第三方
    [**PostgreSQL**]{.strong} 服务器模块，请根据
    `postgresql-devel`{.literal} 软件包进行构建。
5.  在 RHEL 9 系统中，初始化新 [**PostgreSQL**]{.strong}
    服务器的数据目录：
    ``` literallayout
    # postgresql-setup --initdb
    ```
6.  在 RHEL 9 系统中，将 `pgdump_file.sql`{.literal} 复制到
    [**PostgreSQL**]{.strong} 主目录中，并检查是否已正确复制该文件：
    ``` literallayout
    su - postgres -c 'test -e "$HOME/pgdump_file.sql" && echo exists'
    ```
7.  复制 RHEL 8 系统中的配置文件：
    ``` literallayout
    su - postgres -c 'ls -1 $PGDATA/*.conf'
    ```
    要复制的配置文件包括：
    ::: itemizedlist
    -   `/var/lib/pgsql/data/pg_hba.conf`{.literal}
    -   `/var/lib/pgsql/data/pg_ident.conf`{.literal}
    -   `/var/lib/pgsql/data/postgresql.conf`{.literal}
    :::
8.  在 RHEL 9 系统中，启动新的 [**PostgreSQL**]{.strong} 服务器：
    ``` literallayout
    # systemctl start postgresql.service
    ```
9.  在 RHEL 9 系统中，从转储的 sql 文件中导入数据：
    ``` literallayout
    su - postgres -c 'psql -f ~/pgdump_file.sql postgres'
    ```
:::
:::
:::
:::