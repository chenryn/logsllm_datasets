### 3.2 Sandboxing Low-Integrity Subjects

A robust security mechanism must mediate all potential attack vectors. Developing such enforcement mechanisms can be challenging, especially when aiming for a system-wide solution against stealthy malware. Malware developers are adept at finding and exploiting vulnerabilities in either the sandbox design or the policy. Therefore, we build our sandbox for low-integrity subjects on time-tested Discretionary Access Control (DAC) mechanisms. The following policies are enforced by the sandbox on subjects owned by \( R_U \):

- **Read Permission**: By default, \( R_U \) is permitted to read every object (file, registry, pipe, etc.) that is readable by \( R \). This policy can be made more restrictive to achieve confidentiality objectives, but this has not been pursued currently.
  
- **Write Permission**: By default, \( R_U \) subjects are not permitted to write to objects that are writable by \( R \). However, Spif provides a utility library that can perform shadowing of a file. Shadowing involves copying the original file \( F \) to a new location where \( R_U \) maintains its shadowed files. All accesses by \( R_U \)-subjects to \( F \) are transparently redirected to this shadow file. Shadowing avoids permission denials, enabling more applications to execute successfully. However, this may not always be desirable, so Section 3.5 discusses how to decide between denial and shadowing.

- **Object Creation**: New object creation is permitted if \( R \) has permission to create the same object. \( R_U \) owns these new objects, and high-integrity processes will not be allowed to read them. If \( R \) creates an object with a name that collides with a low-integrity object, the low-integrity object will be transparently shadowed.

- **Operations on \( R \)'s Subjects**: \( R_U \)-subjects are not allowed to interact with \( R \)-subjects. This includes creating remote threads in or sending messages to \( R \)'s processes, or communicating with \( R \)'s processes using shared memory.

- **Other Operations**: \( R_U \)-subjects are given the same rights as \( R \) for operations such as listing directories, executing files, querying the registry, renaming low-integrity files inside user directories, and so on. Operations that modify high-integrity file attributes are automatically denied.

All these rights, except for shadowing, are granted to \( R_U \)-subjects by appropriately configuring permissions on objects. On Windows, object permissions are specified using Access Control Lists (ACLs), which can encode an arbitrary number of principals. There are separate permissions for object creation and writing, and permissions can be inherited, e.g., from a directory to files within the directory. These features provide Spif with the flexibility needed to implement the above policies.

File shadowing is implemented using a utility library that is loaded by default by low-integrity subjects. All shadow files are created within a specific directory created for this purpose. \( R_U \) is given full access permissions for this directory.

### 3.3 Sandboxing High-Integrity Subjects

The Windows Integrity Mechanism (WIM) enforces a no-write-up policy to protect higher-integrity processes from being attacked by lower-integrity processes. However, WIM does not enforce a no-read-down policy. A higher-integrity process can read lower-integrity files and thus become compromised. This is illustrated by the Task Scheduler XML Privilege Escalation attack in Stuxnet, where a user-writable task file is maliciously modified to allow the execution of arbitrary commands with system privileges. Therefore, it is crucial to protect benign processes from consuming untrusted objects accidentally.

While policy enforcement against low-integrity processes must be very secure, policies on high-integrity subjects can be enforced in a more cooperative setting. High-integrity subjects do not have malicious intentions and can be trusted not to actively circumvent enforcement mechanisms. In this cooperative setting, protection is easily providedâ€”Spif uses a utility library that intercepts calls to DLLs used for making security-sensitive operations and changes their behavior to prevent high-integrity processes from opening low-integrity objects. In contrast, a non-bypassable approach would need to be implemented in the kernel and cope with the fact that the system call API in Windows is not well-documented.

Similar to performing file shadowing transparently for low-integrity processes, Spif intercepts low-level Windows APIs, checks if an object about to be consumed is untrusted, and, if so, the API call returns a failure immediately.

### 3.4 Transitioning Between Integrity Levels

Users may wish to use benign applications to process untrusted files. Normally, benign applications execute within the high-integrity sandbox and cannot read untrusted files. To avoid this, they need to preemptively downgrade themselves and run within the low-integrity sandbox. The decision to downgrade is discussed in Section 3.5.

For a high-integrity process to run a low-integrity program, it needs to change its user ID from \( R \) to \( R_U \). On Unix, this is performed using `setuid`, but Windows only supports an impersonation mechanism that temporarily changes security identifiers (SIDs) of processes. This is insecure for confining untrusted processes as they can re-acquire privileges. The secure alternative is to change the SID using the `CreateProcessAsUser` system library function to spawn new processes with a specific SID. Spif uses the Windows utility `RunAs` to perform this transition.

`RunAs` behaves like a `setuid` wrapper that runs programs as a different user. It also maps the desktop of \( R_U \) to the current desktop of \( R \) to ensure a seamless transition.

In the context of information flow-based systems, Spif adopts the early downgrading model, which allows a process to downgrade itself just before executing a program image. Compared to the strict Biba policy, early downgrading is more usable. While dynamic downgrading is more general, it requires changes to the OS, whereas early downgrading does not.

### 3.5 Policies

In the design described above, there were two instances where a policy choice needed to be made: (a) whether to deny a write request or apply shadowing, and (b) whether to execute a benign application at low-integrity. Below, we describe how these choices are automated in Spif.

- **Deny vs. Shadow**: Shadowing converts write denials into successful operations, but this is not always desirable. For example, if a user attempts to overwrite a benign file \( H \) with untrusted data \( L \), it would be preferable to inform the user that the operation failed rather than creating a shadow. Otherwise, the user will be confused when they open the file subsequently using a benign application and find that it does not contain the content of \( L \).

  For this reason, Spif applies shadowing only to files that users are largely unaware of, similar to previous systems such as PIP, where shadowing is primarily applied to preference files. Specifically, Spif applies shadowing to files in `%USERPROFILE%\AppData`, `HKEY_CURRENT_USER`, and files in all hidden directories.

- **Sandbox Selection for Benign Applications**: If a benign application expects to consume untrusted inputs, it should be run as a low-integrity process. Otherwise, it should be run as a high-integrity process. To determine the appropriate sandbox, we need to know in advance whether a benign application will open a low-integrity file.

  While there is no general way to make this prediction, there are important use cases where it is possible. For instance, users often run applications by double-clicking on a data file \( F \). Windows Explorer will spawn a child process to run the designated handler program for this file. This child process will inherit the high-integrity label from Windows Explorer. However, if \( F \) is a low-integrity file, the handler should be executed as a low-integrity process; otherwise, the application won't execute successfully.

  Note that if the handler is a low-integrity application, it must run within the low-integrity sandbox. Thus, this form of user intent inference is necessary only for benign applications.

### 4. Spif System

#### 4.1 Initial File Labeling Using Security Zones

An important requirement for enforcing policies is to label new files according to their provenance. Some files may arrive via external storage media. In such cases, we expect the files to be labeled as untrusted unless their authenticity and/or integrity can be verified using signatures or other means. However, we have not implemented any automated mechanisms to ensure this, given that almost all files arrive via the Internet.

To enable tracking of the origin of such files, Windows provides a mechanism called Security Zones. Most web browsers and email clients, such as Internet Explorer, Chrome, Firefox, MS Outlook, and Thunderbird, assign security zones when downloading files. The origins-to-security zones mapping can be customized, and Windows provides a convenient user interface for users to configure what domains belong to which security zones. Microsoft also provides additional tools for enterprises to manage this configuration across multiple machines.

Windows has used security zones to track provenance, but in an ad-hoc manner. When users run an executable that comes from the Internet, they are prompted to confirm their intention. Unfortunately, users often grant permission without careful consideration. While some applications, such as Office, use zone labels to run in protected view, others ignore these labels and may be compromised by malicious input files. Finally, zone labels can be changed by applications, providing another way for malware to sneak in unnoticed.

Spif makes the use of security zone information mandatory. Spif considers files from `URLZONE_INTERNET` and `URLZONE_UNTRUSTED` as low-integrity. Applications must run as low-integrity to consume these files. Moreover, since Spif's integrity labels on files cannot be modified, attacks similar to those removing file zone labels are not possible.

#### 4.2 Relabeling

Spif automatically labels files downloaded from the Internet based on their origin. However, it is possible that high-integrity files are hosted on untrusted servers. As long as their integrity can be verified (e.g., using checksums), Spif allows users to relabel a low-integrity file as high-integrity. Changing the file integrity level requires copying the file from shadow storage to its normal location while changing the file ownership from \( R_U \) to \( R \). We rely on a trusted application for this purpose, and this program is exempted from the information flow policy.

Of course, such an application can be abused: (a) low-integrity programs may attempt to use it, or (b) users may be persuaded through social engineering to use this application to modify the label on malware. The first avenue is blocked because low-integrity applications are not permitted to execute this program. The second avenue can be blocked by setting mandatory policies based on file content, e.g., upgrading files only after signature or checksum verification.

#### 4.3 Windows API Hooking

Utility libraries used by low- and high-integrity processes operate by hooking onto Windows APIs. The hooking mechanisms used are bypassable, but the libraries themselves possess the exact same privileges that the process already has. Thus, there is no reason for any process to evade hooking.

**Hooking Methodology**: One way to hook onto Windows APIs is to modify DLLs statically. However, Windows protects DLLs from tampering using digital signatures, so we cannot modify them. Instead, Spif relies on a dynamic binary instrumentation tool, Detours, which works by rewriting in-memory function entry points with jumps to specified wrappers. Spif builds these wrappers around low-level APIs in `ntdll.dll` to modify API behaviors.

To initiate API hooking, Spif injects a Spif-dll into every process. Upon injection, the `DLLMain` routine of Spif-dll is invoked, which, in turn, invokes Detours.

Spif relies on two methods to inject the Spif-dll into process memory. The first method is based on `AppInit_DLLs`, a registry entry used by `user32.dll`. Whenever `user32.dll` is loaded into a process, the DLL paths specified in the registry `AppInit_DLLs` will also be loaded.

A second method is used for a few console-based applications (e.g., the SPEC benchmark) that don't load `user32.dll`. It relies on the ability of processes to create a child process in a suspended state (by setting the `CREATE_SUSPENDED` flag). The parent then writes the path of the Spif-dll into the memory of the child process and creates a remote thread to run `LoadLibraryA` with this path as an argument. After this step, the parent releases the child from suspension.

We rely on the first method to bootstrap the API interception process. Once the Spif-dll has been loaded into a process, the library can ensure that all its descendants are systematically intercepted by making use of the second method. Although our approach may miss some processes started at the early booting stage, most processes (such as the login and Windows Explorer) are intercepted.

**API Interception**: Spif intercepts mainly the low-level functions in `kernel32.dll` and `ntdll.dll`. Higher-level Windows functions, such as `CreateFile(A/W)`, rely on a few low-level functions such as `NtCreateFile`, `NtSetInformationFile`, and `NtQueryAttributes`. By intercepting these low-level functions, all higher-level APIs can be handled. Our experience shows that changes to these lower-level functions are very rare. Moreover, some applications, such as Cygwin, do not use higher-level Windows APIs but still rely on the low-level APIs. By hooking at the lower-level API, Spif can handle such applications as well.

Figure 2 shows a list of API functions that Spif intercepts. Note that we intercept a few higher-level functions as they provide more context, enabling better policy choices. For example, Spif intercepts `CreateProcess(A/W)` to check if a high-integrity executable is being passed a low-integrity file argument, and if so, creates a low-integrity process.

| **API Type** | **APIs** |
|--------------|----------|
| **File**     | `NtCreateFile`, `NtOpenFile`, `NtSetInformationFile`, `NtQueryAttributes`, `NtQueryAttributesFile`, `NtQueryDirectoryFile`, ... |
| **Process**  | `CreateProcess(A/W)` |
| **Registry** | `NtCreateKey`, `NtOpenKey`, `NtSetValueKey`, `NtQueryKey`, `NtQueryValueKey`, ... |

#### 4.4 Handling Registry

To provide a consistent user experience when benign applications are used to process both high- and low-integrity files, shadowing is applied to the registry as well. User settings from a high-integrity application can be read when using that application as a low-integrity process. Spif handles registry shadowing as follows: if a low-integrity process tries to read a registry, it is first checked from \( R_U \)'s registry. Only if such a registry entry does not exist, Spif reads from \( R \)'s registry. Registry writes by low-integrity processes are always directed to \( R_U \)'s registry.

#### 4.5 Alternative Choices for Enforcement

Spif could be designed to use WIM labels instead of user IDs for provenance tracking and policy enforcement. WIM enforces a no-write-up policy that prevents a low-integrity process from writing to high-integrity files and processes. Although WIM does not enforce a no-read-down policy, we can achieve it in a cooperative manner using a utility library, similar to how Spif achieves it now.

Using user IDs, Spif gets more flexibility and functionality by using DAC permissions to limit the access of untrusted processes. For instance, files that can be read by low-integrity applications can be fine-tuned using the DAC mechanism. Moreover, Spif can be easily generalized to support the notion of groups of untrusted applications, each group running with a different user ID and with a different set of restrictions on the files they can read or write. Achieving this kind of flexibility would be difficult if WIM labels were used instead of user IDs. On the positive side, WIM can provide better protection against desktop/window system-related attacks. The transition to lower integrity is also automatic when a process executes a lower-integrity image, whereas this functionality is currently implemented in our utility library. For added protection, one could combine the two mechanismsâ€”a topic of ongoing research.

#### 4.6 Limitations

Our WinAPI interception relies on the `AppInit_DLLs` mechanism, which does not kick in until the first GUI program runs. Furthermore, libraries loaded during the process initialization phase may not be intercepted.