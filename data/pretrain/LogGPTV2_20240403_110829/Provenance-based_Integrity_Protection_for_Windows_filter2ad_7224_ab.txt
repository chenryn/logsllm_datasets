jects executing on behalf of R. Subjects owned by R are
deemed benign, so all untrusted subjects must be owned by
RU . Objects such as ﬁles, registry contents, pipes and vari-
ous IPC objects are untrusted if they are owned by (or are
writable by) RU ; otherwise they are considered benign. Ob-
jects are labeled as low-integrity automatically when created
by low-integrity processes.
3.2 Sandboxing low-integrity subjects
A security mechanism should mediate all possible attack
paths. Developing such enforcement mechanisms can be
tricky [3], especially when we are seeking a system-wide
enforcement solution against stealthy malware. Developers
of such malware are experts at ﬁnding vulnerabilities in either
the sandbox design or the policy, and exploiting them. For
this reason, we build our sandbox for low-integrity subjects
over time-tested DAC mechanisms. The following policies
are enforced by the sandbox on subjects of RU :
• Read permission: By default, RU is permitted to read
readable by R.
every object (ﬁle, registry, pipe, etc.)
This policy can be made more restrictive to achieve some
conﬁdentiality objectives, but we have not pursued this
avenue currently.
• Write-permission: By default, RU subjects are not per-
mitted to write objects that are writable by R. However,
Spif provides a utility library that can instead perform
shadowing [23] of a ﬁle. Shadowing causes the original ﬁle
F to be copied to a new location where RU maintains its
shadowed ﬁles. Henceforth, all accesses by RU -subjects to
access F are transparently redirected to this shadow ﬁle.
By avoiding permission denials, shadowing enables more
applications to successfully execute. But this may not
always be desirable, so we describe in Section 3.5 how to
decide between denial and shadowing.
• Object creation: New object creation is permitted if R has
permission to create the same object. RU owns these new
object and high-integrity processes will not be permitted
to read them. If R creates an object whose name collides
with a low-integrity object, the low-integrity object will
be transparently shadowed.
• Operations on R’s subjects: RU -subjects are not allowed
to interact with R-subjects. These include creating re-
mote threads in or sending messages to R’s processes, or
communicating with R’s processes using shared memory.
• Other operations. RU -subjects are given the same rights as
those of R for the following operations: listing directories,
executing ﬁles, querying registry, renaming low-integrity
ﬁles inside user directories, and so on. Operations that
modify high-integrity ﬁle attributes are automatically de-
nied.
All these rights, except that of shadowing, are granted to
RU -subjects by appropriately conﬁguring permissions on
objects. On Windows, object permissions are speciﬁed using
ACLs, which can encode arbitrary number of principals.
Moreover, there are separate permissions for object creation
versus writing, and permissions can be inherited, e.g., from
a directory to ﬁles in the directory. These features give Spif
the ﬂexibility needed to implement the above policies.
File shadowing is implemented using a utility library that
is loaded by default by low-integrity subjects. All shadow
ﬁles are created within a speciﬁc directory created for this
purpose. RU is given full access permissions for this directory.
3.3 Sandboxing high-integrity subjects
Windows Integrity Mechanism (WIM) enforces no-write-
up policy to protect higher-integrity processes from being
attacked by lower-integrity processes. However, WIM does
not enforce no-read-down. A higher-integrity process can
read lower-integrity ﬁles and hence get compromised. This is
well illustrated by the Task Scheduler XML Privilege Esca-
lation attack [17] in Stuxnet, where a user-writable task-ﬁle
is maliciously modiﬁed to allow the execution of arbitrary-
commands with system privileges. Hence, it is important to
protect benign processes from consuming untrusted objects
accidentally.
While policy enforcement against low-integrity processes
has to be very secure, policies on high-integrity subjects can
be enforced in a more cooperative setting. High-integrity sub-
jects do not have malicious intentions and hence they can be
trusted not to actively circumvent enforcement mechanisms2.
In this cooperative setting, it is easy to provide protection—
Spif uses a utility library that operates by intercepting calls
to DLLs used for making security-sensitive operations, and
changing their behavior so as to prevent attempts by a high-
integrity process to open low-integrity objects. In contrast, a
non-bypassable approach will have to be implemented in the
kernel, and moreover, will need to cope with the fact that
the system call API in Windows is not well-documented.
2Although benign applications may contain vulnerabilities, exploit-
ing a vulnerability requires providing a malicious input. Recall
our assumption that inputs will be conservatively tagged, i.e., any
input that isn’t from an explicitly trusted source will be marked
as untrusted. Since a high-integrity process won’t be permitted to
read untrusted input, it follows that it won’t ever be compromised,
and hence won’t actively subvert policy enforcement.
Similar to performing ﬁle shadowing transparently for low-
integrity processes, Spif intercepts low-level Windows APIs,
checks if an object about to be consumed is untrusted, and
if so, the API calls returns a failure immediately.
3.4 Transitioning between integrity-levels
Users may wish to use benign applications to process un-
trusted ﬁles. Normally, benign applications will execute
within the high-integrity sandbox, and hence won’t be able
to read untrusted ﬁles. To avoid this, they need to preemp-
tively downgrade themselves and run within the low-integrity
sandbox. The (policy) decision as to whether to downgrade
this way is discussed in Section 3.5.
For a high-integrity process to run a low-integrity program,
it needs to change its userid from R to RU . On Unix, this
is performed using setuid, but Windows only supports an
impersonation mechanism that temporarily changes security
identiﬁers (SIDs) of processes. This is insecure for conﬁning
untrusted processes as they can re-acquire privileges. The
secure alternative is to change the SID using a system library
function CreateProcessAsUser to spawn new processes with
a speciﬁc SID. Spif uses a Windows utility RunAs to perform
this transition.
RunAs behaves like a setuid-wrapper that
runs programs as a diﬀerent user. It also maps the desktop
of RU to the current desktop of R so that the transition to
user RU is seamless.
In the context of information ﬂow based systems, Spif
adopts the early downgrading model, which allows a process
to downgrade itself just before executing a program image.
When compared to the strict Biba [2] policy, early downgrad-
ing is strictly more usable [43]. While dynamic downgrading
[12, 42] is more general, it requires changes to the OS [42,
43], whereas early downgrading does not.
3.5 Policies
In the design described above, there were two instances
where a policy choice needed to be made: (a) whether to
deny a write request, or to apply shadowing, and (b) whether
to execute a benign application at low-integrity. Below we
describe how these choices are automated in Spif.
Deny Vs Shadow. Shadowing converts write-denials into
successful operations, but this is not always desirable. For
instance, if a user attempts to overwrite a benign ﬁle H
with untrusted data L, it would be preferable to inform the
user that the operation failed, instead of creating a shadow.
Otherwise, the user will be confused when she opens the ﬁle
subsequently using a benign application: she ﬁnds that it
does not have the content of L, and wonders why her data
was lost3.
For this reason, Spif applies shadowing only to ﬁles that
users are largely unaware of. This choice is similar to previous
systems such as PIP [44] where shadowing is primarily applied
to preference ﬁles. Speciﬁcally, Spif applies shadowing to
ﬁles in %USER PROFILE%\AppData, HKEY_CURRENT_USER and
ﬁles in all hidden directories.
Sandbox selection for benign applications. If a benign
application expects to consume untrusted inputs, then it
should be run as a low-integrity process. Otherwise it should
be run as a high-integrity process. Thus, to determine the
sandbox that should be used, we need to know in advance
whether a benign application will open a low-integrity ﬁle.
3The data is not actually lost: if she used an untrusted application
to open the ﬁle, then she would see L.
While there is no general way to make this prediction, there
are important use cases where it is indeed possible to do so.
In particular, users most often run applications by double-
clicking on a data ﬁle, say F . Windows Explorer will spawn
a child process to run the designated handler program for
this ﬁle. This child process will inherit the high-integrity
label from Windows Explorer. However, it is clear that the
application is being invoked to open F . Thus, if F is a high-
integrity ﬁle, then the handler program (usually a benign
application), should be executed as a high-integrity process.
If F is a low-integrity ﬁle, then the only sensible choice is to
run the handler as a low-integrity ﬁle, or else the application
won’t execute successfully.
Note that if the handler is a low-integrity application, then
there is no choice except to run it within the low-integrity
sandbox. Thus, this form of user intent inference [44] is
necessary only for benign applications.
4. SPIF SYSTEM
4.1
Initial ﬁle labeling using security zones
An important requirement for enforcing policies is to label
new ﬁles according to their provenance. Some ﬁles may arrive
via means such as external storage media. In such a case,
we expect the ﬁles to be labeled as untrusted (unless the
authenticity and/or integrity of ﬁles could be veriﬁed using
signatures or other means). However, we have not imple-
mented any automated mechanisms to ensure this, given that
almost all ﬁles arrive via the Internet. To enable tracking of
the origin of such ﬁles, Windows provides a mechanism called
Security Zones. Most web browsers and email clients such
as Internet Explorer, Chrome, Firefox, MS Outlook, and
Thunderbird assign security zones when downloading ﬁles.
The origins-to-security zones mapping can be customized.
Windows provides a convenient user-interface for users to con-
ﬁgure what domains belong to what security zones. Microsoft
also provides additional tools for enterprises to manage this
conﬁguration across multiple machines with ease.
Windows has used security zone to track provenance, but
in an ad-hoc manner. When users run an executable that
comes from the Internet, they are prompted to conﬁrm that
they really intend to run the executable. Unfortunately,
users tire of these prompts, and tend to grant permission
without any careful consideration. While some applications
such as Oﬃce make use of the zone labels to run themselves
in protected view, other applications ignore these labels and
hence may be compromised by malicious input ﬁles. Finally,
zone labels can be changed by applications, providing another
way for malware to sneak in without being noticed.
Spif makes the use of security zone information manda-
tory. Spif considers ﬁles from URLZONE_INTERNET and URL-
ZONE_UNTRUSTED as low-integrity. Applications must run as
low-integrity in order to consume these ﬁles. Moreover, since
Spif’s integrity labels on ﬁles cannot be modiﬁed, attacks
similar to those removing ﬁle zone labels are not possible.
4.2 Relabeling
Spif automatically labels ﬁles downloaded from the Inter-
net based on its origin. However, it is possible that high-
integrity ﬁles are simply hosted on untrusted servers. As
long as their integrity can be veriﬁed (e.g., using checksum),
Spif would allow users to relabel a low-integrity ﬁle as high-
integrity. Changing ﬁle integrity level requires copying the
ﬁle from shadow storage to its normal location, while the ﬁle
ownership is changed from RU to R. We rely on a trusted
application for this purpose, and this program is exempted
from the information ﬂow policy. Of course, such an applica-
tion can be abused: (a) low-integrity programs may attempt
to use it, or (b) users may be persuaded, through social
engineering, to use this application to modify the label on
malware. The ﬁrst avenue is blocked because low-integrity
applications are not permitted to execute this program. The
second avenue can be blocked by setting mandatory policies
based on ﬁle content, e.g., upgrading ﬁles only after signature
or checksum veriﬁcation.
4.3 Windows API hooking
Utility libraries used by low- as well as high-integrity pro-
cesses operate by hooking on Windows APIs. The hooking
mechanisms used are bypassable, but the libraries themselves
possess the exact same privileges that the process already has.
Thus, there is no reason for any process to evade hooking.
Hooking methodology. One way to hook on Windows
APIs is to modify DLLs statically. However, Windows pro-
tects DLLs from tampering using digital signatures, so we
Instead, Spif relies on a dynamic
cannot modify them.
binary instrumentation tool Detours [30]. Detours works
by rewriting in-memory function entry-points with jumps
to speciﬁed wrappers. Spif builds these wrappers around
low-level APIs in ntdll.dll to modify API behaviors.
To initiate API-hooking, Spif injects a Spif-dll into every
process. Upon injection, the DLLMain routine of Spif-dll
will be invoked, which, in turn, invokes Detours.
Spif relies on two methods to inject the Spif-dll into
process memory. The ﬁrst one is based on AppInit DLLs [29],
which is a registry entry used by user32.dll. Whenever
user32.dll is loaded into a process, the DLL paths speciﬁed
in the registry AppInit DLLs will also be loaded.
A second method is used for a few console-based applica-
tions (e.g., the SPEC benchmark) that don’t load user32.dll.
It relies on the ability of processes to create a child process
in suspended state (by setting the ﬂag CREATE SUSPENDED).
The parent then writes the path of the Spif-dll into the
memory of the child process, and creates a remote thread to
run LoadLibraryA with this path as argument. After this
step, the parent releases the child from suspension.
We rely on the ﬁrst method to bootstrap the API inter-
ception process. Once the Spif-dll has been loaded into
a process, the library can ensure that all its descendants
are systematically intercepted by making use of the second
method. Although our approach may miss some processes
started at the early booting stage, most processes (such as
the login and Windows Explorer) are intercepted.
API interception. Spif intercepts mainly the low-level
functions in kernel32.dll and ntdll.dll. Higher-level
Windows functions such as CreateFile(A/W)4 rely on a few
low-level functions such as NtCreateFile, NtSetInforma-
tionFile and NtQueryAttributes. By intercepting these
low-level functions, all of the higher-level APIs can be han-
dled. Our experience shows that changes to these lower level
functions are very rare5. Moreover, some applications such
as cygwin don’t use higher-level Windows APIs, but still rely
4Calls ending with “A” are for ASCII arguments, “W” are for wide
character string arguments.
5We did see new functions in Windows 8.1 that Spif needed to
handle.
API Type APIs
File
Process
Registry
NtCreateFile, NtOpenFile, NtSetInformationFile,
NtQueryAttributes, NtQueryAttributesFile,
NtQueryDirectoryFile,...
CreateProcess(A/W)
NtCreateKey, NtOpenKey,NtSetValueKey,
NtQueryKey, NtQueryValueKey,...
Figure 2: API functions intercepted by Spif
on the low-level APIs. By hooking at the lower-level API,
Spif can handle such applications as well.
Figure 2 shows a list of API functions that Spif intercepts.
Note that we intercept a few higher-level functions as they
provide more context that enables better policy choices. For
example, Spif intercepts CreateProcess(A/W) to check if a
high-integrity executable is being passed a low-integrity ﬁle
argument, and if so, create a low-integrity process.
4.4 Handling Registry
To provide a consistent user-experience when benign appli-
cations are used to process high- as well as low-integrity ﬁles,
shadowing is applied on the registry as well. User settings
from a high-integrity application can be read when using
that application as a low-integrity process. Spif handles
registry shadowing as follows: if a low-integrity process tries
to read a registry, it is ﬁrst checked from RU ’s registry. Only
if such a registry-entry does not exist, Spif reads from the
R’s registry. Registry writes by low-integrity processes are
always directed to RU ’s registry.
4.5 Alternative choices for enforcement
Spif could be designed to use WIM labels instead of userids
for provenance tracking and policy enforcement. WIM en-
forces a no-write-up policy that not only prevents a low-
integrity process from writing to high-integrity ﬁles, but also
to processes. Although WIM does not enforce no-read-down,
we can achieve it in a co-operative manner using an utility
library, the same way how Spif achieves it now.
With userids, Spif gets more ﬂexibility and functionality
by using DAC permissions to limit the access of untrusted
processes. For instance, ﬁles that can be read by low-integrity
applications can be ﬁne-tuned using the DAC mechanism.
Moreover, Spif can be easily generalized to support the no-
tion of groups of untrusted applications, each group running
with a diﬀerent userid, and with a diﬀerent set of restrictions
on the ﬁles they can read or write. Achieving this kind of
ﬂexibility would be diﬃcult if WIM labels were used instead
of userids. On the positive side, WIM can provide better
protection on desktop/window system related attacks. The
transition to lower-integrity is also automatic when a process
executes a lower-integrity image, whereas this functionality
is currently implemented in our utility library. For added
protection, one could combine the two mechanisms — this is
a topic of ongoing research.
4.6 Limitations
Our WinAPI interception relies on the AppInit_DLLs mech-
anism, which does not kick in until the ﬁrst GUI program
runs. Furthermore, libraries loaded during the process ini-