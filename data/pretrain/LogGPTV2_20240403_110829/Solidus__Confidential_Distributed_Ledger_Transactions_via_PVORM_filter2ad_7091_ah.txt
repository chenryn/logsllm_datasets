of CPA security that a cryptosystem (Gen, Enc, Dec) is CPA secure
if for all PPT adversaries A there is a negligible function negl such
that
(cid:102)
(cid:12)(cid:12)(cid:12)(cid:12) Pr
(cid:103)(cid:12)(cid:12)(cid:12)(cid:12) ≤ negl(λ).
(cid:102)
ExpCPA
(0, A, λ) = 1
ExpCPA
− Pr
(b, A, λ) is defined as
Experiment ExpCPA
(1, A, λ) = 1
(b, A, λ):
where ExpCPA
(cid:103)
(cid:103)
(sk, pk)
$←− Gen(1λ )
$←− A(1λ, pk)
(m0, m1)
$←− Enc(pk, mb )
c
return A(1λ, c )
It is well known that El Gamal (which Solidus uses) is CPA-secure
in a DDH-hard group. We further define double-CPA security which
we will use to prove obliviousness of our PVORM construction.
Definition B.2 (Double-CPA Security). A cryptosystem (Gen, Enc, Dec)
is double-CPA secure if for all PPT adversaries A there is a negligible
negl such that
where Exp2CPA
(cid:102)
(cid:12)(cid:12)(cid:12)(cid:12) Pr
(cid:102)
Exp2CPA
(0, A, λ) = 1
Exp2CPA
− Pr
(0, A, λ) is defined as
Experiment Exp2CPA
$←− Gen(1λ )
(sk, pk)
0), (m1, m′
((m0, m′
1))
$←− Enc(pk, mb )
c
c′
$←− Enc(pk, m′
b )
return A(1λ, c, c′
)
(cid:103)(cid:12)(cid:12)(cid:12)(cid:12) ≤ negl(λ).
(1, A, λ) = 1
(b, A, λ):
$←− A(1λ, pk)
We now prove by a hybrid argument that any public-key cryp-
tosystem that is CPA secure (e.g., El Gamal) is double-CPA secure.
Lemma B.3 (Double-CPA Security). Let (Gen, Enc, Dec) be a
CPA secure public-key cryptosystem. Then it is also a double-CPA
secure cryptosystem.
Proof. Assume for contradiction that there is some A and non-
(cid:102)
(cid:12)(cid:12)(cid:12)(cid:12) Pr
negligible ε (λ) such that
Exp2CPA
− Pr
(cid:102)
(0, A, λ) = 1
Exp2CPA
(1, A, λ) = 1
(cid:103)
(cid:103)(cid:12)(cid:12)(cid:12)(cid:12) ≥ ε (λ).
18
$←− A(1λ, pk)
$←− Gen(1λ )
(sk, pk)
((m0, m′
0), (m1, m′
1))
$←− Enc(pk, m0)
c
$←− Enc(pk, m′
c′
1)
return A(1λ, c, c′
)
$←− Enc(pk, m′
computes c′
the result.
1). It then picks a random i
• i = 1: In this case B outputs (m′
Note that we encrypt m0 (as in H0) and m′
1 (as in H2). By the stan-
dard hybrid argument A must have advantage at least ε (λ)/2 in
distinguishing either between H0 and H1 or between H1 and H2.
We now construct an adversary B to break the CPA security of
(Gen, Enc, Dec). On input (1λ, pk), B first runs A to get (m0, m′
0)
and (m1, m′
$←− {0, 1}. We handle these
cases separately.
• i = 0: In this case B outputs (m0, m1). On receipt of challenge c it
1), submits (1λ, c, c′) to A and returns
1). On receipt of challenge
$←− Enc(pk, m0) and submits (1λ, c, c′) to A and
c′, it computes c
returns the result.
In the first case, if c encrypts m0 then this is exactly experiment
H1 and if c encrypts m1, this is experiment H2. For the second
case, B has similarly generated either experiment H0 or H1. B
will succeed exactly when A succeeds. Since A has advantage
at least ε (λ)/2 in one of these experiments and B randomly se-
lects which experiment to run, it must be the case that B succeeds
with advantage at least ε (λ)/4, which is non-negligible. By assump-
tion, however, (Gen, Enc, Dec) is CPA-secure, so this contradicts
our assumption that A exists. Thus (Gen, Enc, Dec) is double-CPA
secure.
□
Theorem B.4 (PVORM Obliviousness). Construction 1 is oblivi-
0, m′
ous in the ROM assuming a DDH-hard group.
Proof. Assume for contradiction that there exists some PPT
adversary A and non-negligible ε (λ) such that
(cid:103)
(cid:102)
(cid:12)(cid:12)(cid:12)(cid:12) Pr
(cid:102)
ExpObliv
− Pr
(0, A, λ, n, m0, U ) = 1
ExpObliv
(1, A, λ, n, m0, U ) = 1
(cid:103)(cid:12)(cid:12)(cid:12)(cid:12) ≥ ε (λ).
We now construct an adversary B that breaks the game Exp2CPA,
as defined in Lemma B.3, for El Gamal.
First we argue that A cannot distinguish based solely on observ-
ing the pattern of data blocks touched within the Circuit ORAM
structure. As noted by Wang, Chan, and Shi [62], each access con-
sists first of accessing a uniformly random path independent from
all previous accesses, followed by eviction along two paths chosen
independently from the access. Thus A can only hope to distin-
guish in this manner by forcing the stash to overflow. Wang, Chan,
and Shi additionally note that the probability of stash overflow is
negligible in the size of the stash even for a worst-case access pat-
tern. Therefore A gains at most negligible advantage by observing
the Circuit ORAM access structure.
This means that A must either break the semantic security of
El Gamal or the zero-knowledge property of an NIZK. We now
assume that A will make at most p(λ) queries the PVORM oracle
for some polynomial p. Using this, we construct a series of hybrid
distributions H0, . . . , Hp (λ)+1 modifying how the ExpObliv oracle
works.
In hybrid H0, O operates exactly as O1,sk,C. In H1, O operates
the same way except it leverages the fact that we are in the ROM
to forge all NIZKs. For Hi with i ≥ 1, on input (u0, u1) from A,
the oracle applies update u1 as in H1 for the first i − 1 queries,
after which it applies u0 instead. Though this may result in invalid
updates, the new oracle does not check the validity and applies the
update anyway with forged proofs. Because the proofs are forged,
it will always succeeded in making this (forged) update. Since, by
the definition of the game, A could not rely on submitting invalid
updates in order to distinguish, this cannot improve the advantage
at all.
Because we are working in the ROM and all NIZKs are GSPs, A
receives the same view in H0 and H1. Whenever the PVORM oracle
needs to generate a proof, it first picks a random challenge c and
a response. It then computes the commitment com to ensure that
the tuple is from the correct distribution, and modifies A’s random
oracle so that it receives c when querying that oracle on com. As
long as the random oracle has not previously been queried on com,
this strategy will work and produce exactly the same distribution
as in H1.
, a negligible function.
If there is a collision—the random oracle has been queried on
com—then the experiment H1 simply aborts. Fortunately this hap-
pens with negligible probability. Specifically, A makes at most
q(λ) independent queries to its random oracle for some polyno-
mial q, and O must forge some constant k number of proofs for
each PVORM update. This bounds the probability of collision to
ν (λ) = k·p (λ)+q (λ)
We can apply the same argument to Hp (λ)+1 and the (unnamed)
hybrid that corresponds to O0,sk,C with real proofs. Thus A can
distinguish between H1 and Hp (λ)+1 with advantage at least ε (λ) −
2ν (λ). So by a standard hybrid argument, there must be some
i ∈ [1, p(λ)] such that A can distinguish between Hi and Hi +1
with advantage at least ε (λ)−2ν (λ)
. This too is non-negligible. For
simplicity, we will denote this advantage ε′(λ).
Next we recall that the secret key is only used to generate NIZKs
in Update, meaning an adversary with only the public key can
run A with an oracle that generates any of H1, . . . , Hp (λ)+1. B is
exactly such an adversary.
On input (1λ, pk), B first guesses a uniformly random i ∈ [1, p(λ)]
and then runs A. B then handle’s A’s PVORM oracle queries as
follows. For the first i − 1 queries (u0, u1), B applies u1 with forged
proofs—as in both Hi and Hi +1. Because Update uses sk only for
proofs and B is forging proofs, it can perform the rest of Update
properly with only pk. Recall that an update u consists of two
plaintexts: an account ID id and a transaction value $v. So to gen-
erate its chosen plaintext pairs, B outputs the updates specified
for A’s ith PVORM oracle query. Upon receiving a challenge pair
of ciphertexts e = (cid, cv ), B performs the rest of Update using
that update ciphertext (and forging proofs). For all future PVORM
oracle queries after the ith, B uses update request u0—as in both
p (λ)
2λ
1
p (λ)
Hi and Hi +1. When A terminates with an output, B outputs the
same value.
We now claim that B has non-negligible advantage in the Exp2CPA
, B will
experiment defined above. With probability at least
pick some i where A has non-negligible advantage ε′(λ) distin-
guishing between Hi and Hi +1. If B receives a challenge encryption
of u1, then A is playing exactly the game in Hi. Similarly, if B is
challenged with an encryption of u0, then A sees exactly distri-
bution Hi +1. In either case B will output the correct value exactly
when A does. This means that B must succeed with advantage at
least ε′(λ)
p (λ)
, which is non-negligible.
By assumption we are working with a DDH-hard group and
using El Gamal as our cryptosystem. Thus our cryptosystem is CPA
secure, so by Lemma B.3 no such B exists. This contradicts our
assumption that A exists and therefore Construction 1 must be an
oblivious PVORM.
□
Theorem B.5 (PVORM Public Verifiability). Construction 1 is
publicly verifiable in the ROM.
Proof. This result follows directly from the fact that our Update
specification includes a proof of every operation as well as a range
proof. By definition Ver simply verifies all NIZKs produced by
Update. Therefore, if an adversary were able to fool Ver, it must be
able to forge (at least) one of the proofs produced by Update.
adversary A and non-negligible ε (λ) such that
≥ ε (λ).
Assume for contradiction that there exists some PPT adversary
ExpPubVer
(A, λ, n)
(cid:102)
(cid:103)
Pr
We note that Update produces three types of proofs. Thus we con-
struct three new PPT adversaries BR, BE, and BS that attempt to
forge range proofs, proofs of plaintext equivalence on El Gamal
ciphertexts, and proofs of correct El Gamal swaps, respectively.
They operate as follows.
• BR: On input (pk, sk), BR runs A and outputs the resulting
• BE: On input (pk, sk), BE runs A and outputs the resulting
• BS : On input (pk, sk), BS runs A, picks a uniformly random El
Gamal swap proof from the output, and outputs that proof and
the associated ciphertexts.
plaintext equivalence proof and associated ciphertexts.
range proof with associated ciphertexts.
Whenever A forges the one range proof or the one plaintext equiv-
alence proof, BR or BE succeed, respectively. For BS , the number
of El Gamal swaps executed by Update is fixed for a given PVORM
configuration (tree depth, bucket size, and stash size), so if A forges
any El Gamal swap correctness proof, BS will succeed with constant
probability.
By inspection of the specification of Update and a standard hy-
brid argument, A must succeed in forging at least one type of proof
with non-negligible probability, hence one BR, BE, and BS must
succeed with non-negligible probability. As we describe in Appen-
dix A, prior work shows that each of the associated proofs have
negligible soundness error in the ROM. Thus no such adversary A
can exist so the Solidus PVORM construction is publicly verifiable
in the ROM.
□
19
C SOLIDUS SECURITY PROOF
We now provide a proof of Theorem 5.2 that ProtSol is secure.
We assume several simple pieces of behavior not directly spec-
ified by the protocol. First, each honest bank will have only one
pending transaction at a time. That means that it will not approve
a request (as sending or receiving bank) while there is another
transaction it has approved that has not yet cleared. In the FLedger-
hybrid world, this is codified within ProtSol, but we simply assume
this property in the ideal world. Second, we assume that an honest
bank will reply immediately upon receiving a transaction approval
request. It may approve or abort the transaction, but it will reply in
some fashion. Note that an honest bank may abort a transaction it
has already approved in order to maintain availability. Finally, we
assume that for an honest bank, whenever an assertion fails, the
bank acts exactly as if the message it failed to process was never
received.
For simplicity, we omit asset notaries from our proof. Adding
them requires only small modification. Initialization must publicly
distribute asset notary identities, FLedger must check for valid asset
notary signatures, and ProtSol must properly reveal asset notary
identities.
Theorem 5.2. The Solidus protocol ProtSol satisfies Definition 5.1
assuming a DDH-hard group in the ROM.
Proof. We prove that IdealS,Z (λ) and HybridA,Z (λ) are in-
distinguishable using a sequence of hybrids. In the following, a
probability is negligible if it is a negligible function of the security
parameter λ.
We define hybrids H0, . . . , H7. H0 is the FLedger-hybrid world
with S being a “dummy” simulator that passes all messages through
unchanged. H1 allows S to simulate FLedger. H2 replaces all proofs
generated by honest parties with forgeries and H3 to replaces the
contents of requests and PVORMs with arbitrary values. In H4 S
simulates the trusted initializer and controls all keys. H5 isolates
A’s set of transaction IDs and H6 drops any invalid messages from
A. Finally H7 is equivalent to an ideal execution.