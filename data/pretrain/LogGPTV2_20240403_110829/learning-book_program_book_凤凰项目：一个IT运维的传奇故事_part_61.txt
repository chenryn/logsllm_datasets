为了保护销售承诺，产品销售人员希望拥有很多库存，让客户在需要时总能拿到产品。然而，为了降低成
本，厂长则希望降低库存水平和半成品数量。
由于无法在工厂内同时提高和降低库存水平，销售经理和厂长在一场长期的冲突中僵持着。
通过采用精益理论，他们化解了冲突。精益理论包括降低批量规模、减少半成品以及缩短并增强反馈回
路。结果，工厂生产力、产品质量和客户满意度急剧提升。4
随者精益原则被采纳，丰田生产系统、精益制造、约乘理论、六标准差等技术也被广泛采用。
20世纪80年代，平均订单交付期5是六个星期，按时发货的订单不到70%。到了2005年，平均产品交付期己
经缩短到三个星期以内，按时发货的订单超过95%。无法实现这些绩效突破的企业，即使尚未倒闭，也已
丧失了市场份额。6
5订单交付周期是指从“工厂管理人员接受订单“订单运往客户*所需的时间
6埃利亚期·高德拉特博士，《超越日标：埃利亚期·高德拉特关于约束理论的论述》（马里兰州弗雷德里克王子村：吉尔丹传媒公司
2005)。
---
## Page 205
开发运维从何而来
100年后，历史学家回顾这十年，会晞喔这一时期的变化：开发和IT运维的工作方式彻底改变了...我
预测，历史学家会把这十年称为“IT界的寒武纪大爆发”，一个充满革新和分化的惊人时代。在计算机
技术诞生50年后，我们终于明白了技术能够用于何处。
约翰·威利斯，“开发运维咖啡馆”
插客节目主持人之一
“开发运维"这个词最初是在2008年1由帕特里克·德布瓦和安德鲁·谢弗提出的，并于2009年因为约翰-阿斯帕
尔瓦和保罗·哈蒙德z那场著名的“每天超过10次部署：Flickr的开发与运维合作"演讲，在Velocity技术大会广
为流传。
的输·威利斯，*开发运维的融合”，2012年"TT变革新间*（博客）。2014年7月14日访间，bpWiremuin.cme-rce-f
ups
Velocity Confeence website) 。 2009年6月23日。2014年7月14日访间. htp2welorityrnf.cmvelociy200%pablicshesuledeail/7641
2的输·阿尔斯帕瓦和保罗·哈蒙德，*一天超过十次部署：Flickr公司的开发与运维协间”。OReilly Web性能与运维大会网站（OReily
确管理实践为基础的。然而，我们运用这些原理来提高流经生产管理、开发、测试、I运维以及信息安全
等部门的工作流的速度，而不是应用于实体产品的转化。
开发运维从“敏捷社区"开展的工作中获益良多，这些工作表明，信任度高的小团队，加上小的批量规模以
及更小、更频繁的软件发布，能够极大地提高开发部门的生产能力。事实上，开发运维历史上的很多关键
时刻都发生在敏捷会议以及热间的DevOpsDays活动上。首次DevOpsDays活动于2009年举行，此后这一活动
在世界各地开展。
当然，开发运维脱胎于马克·伯吉斯博士发起的"基础设施即代码"的实践以及持续集成和持续部署（由杰兹
亨伯尔和戴维·法利发起），这是实现快速部署流的前提。
开发运维同样受益于新型管理思潮的惊人融合，比如精益创业、创新文化、丰田套路、加固型计算（rugged
computing）以及Velocity社区。它们相互促进，产生强大的聚合力，加快开发运维的采纳应用。
---
## Page 206
对三步工作法的解释
在本书中，我们闸述了这一基础原理，即所有开发运维模式都来自“三步工作法”，它旨在闸明指导开发运
维的流程与实践的价值观与理念。
第一工作法是关于从开发到T运维再到客户的整个自左向右的工作流。为了使流量最大化，我们需要小的
批量规模和工作间隔，绝不让缺陷流向下游工作中心，并且不断为了整体目标（相对于开发功能完成率、
测试发现/修复比率或运维有效性指标等局部目标）进行优化。
必要的做法包括持续构建、集成以及部署，按需创建环境，严控半成品，以及构建起能够顺利变更的安全
系统和组织。
第二工作法是关于价值流各阶段自石向左的快速持续反馈流，放大其效益以确保防正问题再次发生，或者
更快地发现和修复问题。这样，我们就能在所需之处获取或嵌入知识，从源头上保证质量。
必要的做法包括：在部署管道中的构建和测试失败时“停止生产线”：日复一日地持续改进日常工作：创建
快速的自动化测试套装软件，以确保代码总是处于可部署的状态：在开发和IT运维之间创建共同的目标和
共同解决问题的机制：创建普遍的产品遥测技术，让每个人都能知道，代码和环境是否在按照设定的运
行，以及是否达到了客户的目标。
第三工作法是关于创造公司文化，该文化可带动两种风气的形成：不断尝试，这需要承担风险并从成功和
失败中吸取经验教训：理解重复和练习是熟练掌握的前提。
尝试和承担风险让我们能够不懈地改进工作系统，这经常要求我们去做一些与几十年来的做法大不相同的
事。一且出了问题，不断重复的日常操练赋予我们的技能和经验，令我们可以撤回至安全区域并恢复正常
运作。
必要的做法包括营造一种勇于创新、敬于冒险（相对于畏惧或盲目服从命令）以及高信任度（相对于低信
任度和命令控制）的文化，把至少20%的开发和IT运维周期划拨给非功能性需求，并且不断鼓励进行改进。
---
## Page 207
对开发运维的主要误解
一如各种变革性、颠覆性的运动，开发运维也会被误解或曲解。以下是对开发运维的一些主要误解。
开发运维取代了敏捷开发
开发运维与敏捷开发完全兼容。事实上，开发运维是始于2001年的敏捷开发的逻辑延伸，因为我们现在知
道，“完成"的真正定义并非开发部完成了编码，而是只有在代码经过充分测试并按设计在生产中运行时，
代码才算“完成”。（注意，敏提开发并非采用开发运维的前提条件。）
开发运维取代了ITIL
尽管有些人可能会把开发运维看作ITIL（ITInfrastructureLibrary，信息技术基础架构库）或ITSM（IT
是支撑T运维流程的最佳编码法则，而且它们描述了为了支撑开发运维协同工作的流程，IT运维部所需要
具备的很多能力。
为了适应与开发运维相关的更短的交付周期和更高的部署频率，ITIL流程的许多方面都需要自动化，特别
是变更、配置和发布流程等方面。
因为在发生服务事故时，我们同样需要快速检测和修复，所以关于服务设计以及事故问题管理的ITIL准则
仍然和以前一样有意义。
开发运维意味者无需运维
有时候，“开发运维"被错误地理解为“无需运维”（例如，IT运维部被整体取消了）。然而，更准确地说，开
发运维经常会让开发部承担更多开展代码部署和维持服务水平的责任。这只不过意味着开发部接管了许多
IT运维部和运维工程的职责。
为了支持快速交付并让开发人员提高工作效率，开发运维确实要求把许多T运维任务转变为自助服务。也
就是说，不再是开发部开出一张派工单，等着IT运维部完成工作，许多这一类的活动将会自动化，让开发
开发运维只适用于开源软件
尽管开发运维的很多成功案例都来自使用LAMP栈（LAMPstack）1o等软件的公司，但各组织通过Microsoft
.NET、SAP，甚至COBOL应用程序，将开发运维的模式植入到大型机和惠普激光打印固件上。
10 LAMP是“Linux、Apache网络腺务器、MySQL数据库和PHP、Python或Perl*的编写
开发运维的原理是通用的，它们在很大程度上独立于所采用的底层技术。一些开发运维模式有特定的技术
要求（例如，可支持自动测试，可公开能够在版本控制中核查的配置），这在开源软件中更为普通。
开发运维只是“作为代码的基础架构"或自动化
尽管本书展示的许多开发运维模式需要自动化，但开发运维也需要IT价值流自始至终拥有共同的目标并共
同解决问题。这远非自动化所能涵盖的。
开发运维只适用于创业公司和“独角兽*公司
*“独角兽“公司即超过10亿美元估值的创业公司，估值低于此的则称为“马病公司”
开发运维适用于任何一家函需提高开发部门计划内工作流，同时为客户保持质量、可靠性及安全性的企
业
---
## Page 208
事实上，我们认为开发运维对于“马驹公司"的重要性更甚于“独角兽"公司。毕竞，如理乍得·福斯特所
言：“1955年的财富500强公司中，有87%业已消失。1958年，财富500强公司的平均寿命为61年，而现在只
有18年。”1我们知道，每一家IT公司都有螺旋式下降的过程。然面，绝大多数公司的IT部门都会给出无数
条理由，证明其不能采用开发运维，或者证明开发运维与其无关。
理乍得福斯特和莎拉·卡告兰，《创造性破环：为什会基业常青的企业在市场上表现平平如何成功转变它们》（Crearth
(100Z
“马驹公司"最主要的一个反对意见是，所有的"独角兽公司”（例如谷歌、亚马逊、Twiuer、Etsy）都是生来
如此的。也就是说，“独角兽公司"从一开始就在做开发运维。
实际上，几乎每一家开发运维“独角兽公司"都曾是“马驹公司"，都曾有过“马驹公司"所面临的全部间题，
·亚马逊在2001年之前一直运行OBIDOS内容交付系统，这个系统后来变得间题重重、难以为继，于是亚
马逊公司CTO沃纳·威格尔把整个组织和代码都改换成了以服务为导向的架构体系。2
·2009年，Twitter千方百计想对其前端单片机（front-endmonolithic）RubyonRails系统扩大规模能级，
为了逐步重构并替代这个系统，启动了一个耗时多年的项目。3