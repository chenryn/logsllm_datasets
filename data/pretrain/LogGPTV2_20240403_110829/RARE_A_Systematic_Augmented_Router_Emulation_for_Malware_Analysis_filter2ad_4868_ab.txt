for emulating the router with the provided augmenting information and records
execution traces. This module can: (a) instantiate an emulated router, (b) inject
malware into the router, (c) replay pre-recorded network traﬃc or crafted C&C
responses for the malware requests, (d) receive commands and information from
the Intelligent Emulation malware in order to convince the malware to activate.
The emulation is hosted in an Ubuntu server and QEMU [5] (an open source and
widely used tool) is used to emulate the router hardware of interest, which here
is ARM and MIPS.
We have made signiﬁcant extensions and engineering in order to enable all
the functionality. For example, we modify QEMU to recognize two subnets to
represent the enterprise network and the rest of the Internet. We also added
the ability to interact with the router through the network interfaces connect-
ing to subnets, which is further discussed in the Traﬃc Replay module. For the
ﬁrmware of the instantiated router, we use OpenWrt [1], which is fairly widely
used codebase and it is considered as a reference ﬁrmware for routers. OpenWrt
has the essential basic modules of a home router such as DHCP server, packet for-
warding and routing, and a web interface. We added the monitoring capabilities
to the instantiated router to collect execution traces for the router for further
behavioral analysis, which we discuss in the Proﬁling and Monitoring module.
RARE: A Systematic Augmented Router Emulation for Malware Analysis
65
c. Intelligent Emulation Manager. The key novelty of RARE is represented
by the Intelligent Emulation Manager module. This module drives the emulation
in a way that achieves malware activation. First, it uses information from static
and dynamic analysis in the previous two modules. The intelligence of the emu-
lation is based on a feedback loop that gets execution information from each run.
Every run is a clean start of the router augmented with information about the
malwares requirement to fully execute itself. This loop represents the learning
process of our approach. Second, the module facilitates the manual interaction
with the malware, such as crafting C&C responses.
d. Traﬃc Replay Module. To observe a router in its natural element, we
developed the Traﬃc Replay module, for replaying arbitrary network traﬃc to
the router. Our module can get a real trace of two directions, incoming and
outgoing, and replay it through the emulated router. This module is built on top
of tcpreplay [3], but signiﬁcantly we added new functionality. For example, the
concept of incoming and outgoing traﬃc needed signiﬁcant engineering, as it was
not fully provided by tcpreplay. We also needed to take care of implementation
issues, such as timing the replay traﬃc through the router. The network traﬃc
we use is real traﬃc data from project MAWI [7], ensuring that we capture the
beginning of each TCP ﬂow across diﬀerent days and diﬀerent hours. Another
key feature in this module is its ability to inject traﬃc at the command of the
Intelligent Emulation Manager. This allows us to impersonate the C&C server
by providing server responses and commands. In other words, our approach
combines the knowledge of who the malware attempts to talk to, and what the
malware expects to hear, through the deep proﬁling in the Static Analysis and
Proﬁling and Monitoring modules, and we expect to be able to fully explore the
intention and capability of the malware.
e. Proﬁling and Monitoring Module. This module synthesizes information
from the static analysis and dynamic executions with the following goals. We
want to: (a) understand the malware in order to create an environment that will
make it to activate, and (b) proﬁle the behavior of the infected router in order
to distinguish it from that of a benign one. We list the types of data that this
module collects and analyzes.
– Network Traﬃc: The module collects the network traces for both router inter-
faces (think incoming and outgoing) and analyzes them. The goal is to observe
packets and ﬂows generated by the malware, so that we can respond to them
as if we are the C&C server. We can determine if a packet is generated by
the malware by comparing the log ﬁles of the execution with and without the
malware.
– OS System Calls: The module also collects the system calls at the operating
system level. The goal is to extract information for augmenting the next iter-
ation of the emulation. For example, the malware usually checks for existence
of diﬀerent ﬁles in the system as a means to infer which platform it is oper-
ating on. Another family of malware uses the /proc/sysinfo ﬁle to infer the
CPU architecture, while in another family they use banner ﬁle.
66
A. Darki et al.
– System Processes: The module also monitors the processes in the router,
which provides a complementary view on the behavior and intentions of the
malware. For example, several malware binaries kill: (a) processes in the
router in order to free up resources for themselves, (b) security processes,
such as the iptable ﬁrewall process, and (c) user access processes, such as
the http server process.
This module initiates the feedback-loop by providing the information to the
Intelligent Emulation Manager to ensure that it can “fool” the malware to reveal
itself and even believe that it is communicating with its C&C server.
Finally, this high-level description of our approach can be seen as a blueprint
for a router malware analysis tool. Although in RARE, we have made speciﬁc
implementation decisions for each module, functions and methodologies can be
modiﬁed and replaced easily due to its modular design.
3 Evaluation
We evaluate our method to assess the eﬀectiveness of RARE in activating the
malware and proﬁling the behavior of malware.
The malware binaries. In our evaluation, we use malware binaries that were
collected from a community-based project, that requested to stay anonymous.
These sources use honeypot and manual eﬀort to collect these malware binaries.
We have a total of 221 unique malware binaries targeting MIPS Big Endian
(BE), MIPS Little Endian (LE), and ARM architectures. We focus on these
architectures given that they are the most common ones in routers.
Network traﬃc. A key feature of our emulation is that we can do experiments
using arbitrary network traﬃc. We report results with real network traﬃc from
MAWI [8] with a duration of 1300 s. Note that we have experimented with other
data traces, and also observed the router with no traﬃc at all. We obtained
qualitative similar results, which we do not report here due to space limitations.
The baseline approach. We deﬁne the baseline approach, as an emulation
using the RARE infrastructure (OpenWrt over QEMU) but without any of the
intelligence of our approach. We inject the malware in such an instance of an
emulated router, and we monitor its behavior as the traﬃc passes through.
Evaluation. For each malware and data trace, we compare the following
approaches in executions with and without the malware: (a) Baseline run: which
is the approach described above. (b) RARE run: The emulation gets augmented
with the information extracted from the malware in each run. We deﬁne each
execution as kth run, being 1st emulation informed by Static Analysis module
and later runs informed by the behavior observed in the previous run.
Deﬁning failure: no malware activation by the 6th run. Setting a high
standard for our approach, we require that we achieve malware activation by the
sixth run. If this does not happen, we consider this a failure.
RARE: A Systematic Augmented Router Emulation for Malware Analysis
67
A. Evaluating RARE: 94% malware activation success. Using our tool
we have been able to reach activation for 208 malware binaries out of 221. Table 1
details this success by comparing RARE with baseline approach. We report the
average number of runs that RARE needed in order to reach activation for
the binaries in that group that reach activation. We see that RARE requires a
relatively low number of repetitions on average, namely three. We also separate
the malware based on the target architecture: ARM, MIPS BE, and MIPS LE.
Table 1. The success ratio of our solution RARE compared to a baseline method.
Binaries Baseline
RARE
Raw No. Percentage Raw No. Percentage Avg. Runs
All
221
Obfuscated
45
ARM
MIPS BE
MIPS LE
101
77
43
23
5
11
6
6
10.4%
11.1%
10.9%
7.8%
14%
208
40
91
75
42
94.1%
88.8%
90.1%
97.4%
97.6%
3
3
3
2
3
RARE exhibits great performance even for obfuscated malware. We
compare the two approaches on 45 obfuscated malware binaries, as, for these
binaries, static analysis cannot be used. Although there is a drop, our approach
maintains a success ratio of 88.8%.
What does the malware need to activate? We observe an interesting and
systematic progression in the types of requests that the malware generates. In
the ﬁrst few runs, the malware binaries typically attempt to change or check
the existence of ﬁles, such as conﬁguration ﬁles such as /etc/ISP name or web
interface ﬁles from Linksys and TP-Link routers, which are found speciﬁcally in
home routers routers or speciﬁc brands of routers. Subsequently, some binaries
attempt to tamper with diﬀerent routing services, such as libnss and DNS, or
change the routing table to subvert traﬃc. Typically, in the last run before the
activation stage, the malware tries to resolve the hostname to locate its C&C
server. In response, we inject DNS lookup responses using our Traﬃc Replay
module. Note that, in our system, we retrieve the request that led to the failure
using the Proﬁling and Monitoring module, we prepare for the subsequent run
accordingly. As an example, when running one of the binaries an HTTP request
to userRpm/SoftwareUpgradeRpm.htm (part of the TP-Link web interface) is
observed which tampers with the installed ﬁrmware on the router. Failure to
respond to this request will interrupt malware’s execution. Using the Intelligent
Emulation Manager module the appropriate web interface is installed for the
next clean run of the router emulation.
Why do some malware fail to activate? This is an open question, which we
will continue to investigate in our future work. In many of the malware requests
listed above, we are able to provide a fake answer or a fake ﬁle. In most of the
68
A. Darki et al.
Fig. 3. The number of extracted IP