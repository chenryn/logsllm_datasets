When a call to /dev/urandom is made, data is generated from the pool Su and when a call to
/dev/random is made, data is generated from the pool Sr.
Functions refresh and next. There are two refresh functions, refreshi that initializes the in-
ternal state and refreshc that updates it continuously. There are two next functions, nextu for
/dev/urandom and nextr for /dev/random.
Mixing Function. The generator uses a mixing function M, described below, to mix new
data in the input pool and to transfer data between the pools.
Entropy Estimator. The generator uses an entropy estimator, described below, to estimate
the entropy of the collected input and to continuously estimates the entropy of the pools. With
these estimations, the generator controls the transfers between the pools and how new input
is collected. This is illustrated in Figure 7.1 and described below but at high level, the main
principles are:
• New inputs are ignored when the input pool contains enough entropy. Otherwise, the
estimated entropy of the input pool is increased with new input.
• Entropy estimation of the output pool is decreased on generation.
• Data is transferred from the input pool to the output pools if they require entropy.
• When the pools do not contain enough entropy, no output can be generated with /dev/random
and it blocks whereas /dev/urandom always generates output.
The technical internal parameters that are the entropy estimations are named Ei (entropy
estimator of Si), Eu (of Su), Er (of Sr).
The refreshi and refreshc Functions
The generator LINUX contains two refresh functions. A ﬁrst refresh function, refreshi, is used to
generate the ﬁrst internal state of the generator and the second one, refreshc, is used to refresh
continuously the generator with new input.
Internal State Initialisation with refreshi. To generate the ﬁrst internal state with refreshi,
LINUX collects device-speciﬁc data using a built-in function called add_device_randomness and
refreshes Si and Sn with them. The data is derived from system calls, a call to variable jiﬃes,
which gives the number of CPU cycles since system start-up and is represented by 32 bits, and
a call to system function get_cycles, that gives the number of clock ticks since system start-up,
which also returns 32 bits. The two values are xor-ed together, giving a new 32-bit input data that
is generated twice for Si and Sn and mixed for each pool. Then LINUX collects system data and
refreshes the three pools Si, Sn and Sb with them using built-in function init_std_data. The data
is derived from system calls, a call to function ktime_get_real, which returns 64 bits and a call
— 116 —
7.2. Security of Linux Generators
(I)
(Si, Su, Sr)
(0, I) refreshi→ S
(S, I) refreshc→ S0
(Sr → S0
r)
nextr→ (S0, R)
S
/dev/random
(Su → S0
u)
nextu→ (S0, R)
(Si → S0
i)
S
/dev/urandom
(I)
(Si, Su, Sr)
Ei  8t
yes
u, Sr, R)
(Si, S0
(S0
i, S0
nextu→ (S0, R)
S
no
no
αu > 8
yes
u, Sr, R)
(Si, Su, Sr)
Er > 8t
no
αr > 8
wait
no
yes
(Si, Su, S0
r; R)
nextr→ (S0, R)
S
(S0
yes
i, Su, S0
r; R)
Figure 7.1 – Relations between functions and pools for LINUX
to function utsname, which returns 3120 bits. The two are concatenated, giving 3184 bits. This
input data is generated for each pool and mixed with M, implemented in the built-in function
mix_pool_bytes. Finally, the generated input is I = (utsnamekktime_get_realkget_cycles ⊕
jiﬃes) for Si and Sn, and I = (utsnamekktime_get_real) for Sr. In all cases, refreshi(0, I) =
M(0, I). The entropy estimator is not used during this process, so Ei = Eu = Er = 0.
Algorithm 6 LINUX refreshi
Require: I1 = [utsnamekktime_get_realkget_cycles ⊕ jiﬃes], I2 = [utsnamekktime_get_real], S = ∅
Ensure: S = (Si, Su, Sr)
1: Si = M(I1, 0)
2: Sr = M(I2, 0)
3: Su = 0
4: return S = (Si, Su, Sr)
Internal State Update with refreshc. The refreshc function uses system events that are
collected by three built-in functions: add_input_randomness, add _interrupt_randomness and
add_disk_randomness. All of them call another built-in function, add_timer _randomness, which
builds a 96 bits input data containing the collected event mapped to a speciﬁc value num coded
in 32 bits, concatenated with jiﬃes and get_cycles. Finally, the generated input is then given
by I = [jiﬃeskget_cyclesknum]. If the estimated entropy is above the default value 3584, this
input is ignored (except 1 input over 4096). The entropy estimator Ent described below is used
to estimate the entropy of the new input and is added to Ei.
Algorithm 7 LINUX refreshc
Require: I = [jiﬃeskget_cyclesknum], S = (Si, Su, Sr)
Ensure: S0 = (S0
i, S0
1: if Ei ≥ 3584 then
S0
i = Si
2:
3: else
e = Ent(I)
4:
S0
i = M(I, Si)
5:
Ei = e + Ei
6:
7: end if
8: (S0
u, S0
9: return S0 = (S0
u, S0
r)
r) = (Su, Sr)
i, S0
u, S0
r)
— 117 —
Chapter 7. Security Analysis
Remark 3. Starting from version 3.6.0 of the kernel, LINUX involves a particular behavior of
add_interrupt _randomness which collects system events and gather them in a dedicated 128 bits
pool fast_pool without calling add_timer _randomness. In this case, the input is I = fast_pool.
For all these inputs, refreshc(Si, I) = M(Si, I) and LINUX estimates the entropy of the data
collected by add_timer _randomness and estimates every input collected from fast_pool to 1
bit.
Remark 4. Starting from version 3.2.0 of the kernel, for both /dev/urandom and /dev/random,
there is an additional input speciﬁc for x86 architectures for which a hardware random num-
In this case, the output of the generator is mixed with M when
ber generator is available.
this hardware random number generator is used for refreshi and the output is mixed with the
output of LINUX when used with next. For this speciﬁc architecture, denoting Ihd the in-
put generated by the hardware random number generator, refreshi(Si, Ihd) = M(Si, Ihd) and
nexthd(S) = [Ihd||next(S)].
The nextu and nextr Functions
The next functions use built-in functions random_read and urandom_read that are user inter-
faces to read data from /dev/random and /dev/urandom, respectively. A third kernel interface,
get_random_bytes(), allows to read from /dev/urandom. The three rely on the same built-in
function extract_buf that calls the mixing function M, the hash function HK described in Section
7.1 and a folding function F(w0,··· , w4) = (w0 ⊕ w3, w1 ⊕ w4, w2[0···15] ⊕ w2[16···31]).
Algorithm 8 LINUX nextr
Require: t, S = (Si, Su, Sr)
Ensure: R, S0 = (S0
u, S0
r)
1: αr = min(min(max(t, 8), 128), bEi/8c)
2: if αr ≥ 8 then
3:
4:
5:
6:
7:
8:
9:
10:
11: else
12:
13: end if
14: S0
15: return R, S0 = (S0
Ti = F ◦ HK ◦ M(Si, HK(Si))
S0
i = M(Si, HK(Si))
S∗
r = M(Sr, Ti)
Ei = Ei − 8αr
Er = Er + 8αr
r , HK(S∗
S0
r = M(S∗
r ))
R = F ◦ HK ◦ M(S∗
r , HK(S∗
r ))
Er = Er − 8t
Blocks until αr ≥ 8
u = Su
i, S0
i, S0
u, S0
r)
Output with /dev/random. Let us describe the transfers when t bytes are requested from the
blocking pool. If Er ≥ 8t, then the output is generated directly from Sr: LINUX ﬁrst calculates
a hash across Sr, then mixes this hash back with Sr, hashes again the output of the mixing
function and folds the result in half, giving R = F◦HK ◦M(Sr, HK(Sr)) and S0
r = M(Sr, HK(Sr)).
This decreases Er by 8t and the new value is Er − 8t. If Er < 8t, then depending on Ei, data
is transferred from Si to Sr. Let αr = min(min(max(t, 8), 128),bEi/8c).
• If αr ≥ 8, then αr bytes are transferred between Si and Sr (so at least 8 bytes and
at most 128 bytes are transferred between Si and Sr, and Si can contain 0 entropy.
The transfer is made in two steps: ﬁrst LINUX generates from Si an intermediate data
Ti = F ◦ HK ◦ M(Si, HK(Si)) and then it mixes it with Sr, giving the intermediate states
S0
i = M(Si, HK(Si)) and S∗
r = M(Sr, Ti). This decreases Ei by 8αr and increases Er
— 118 —
7.2. Security of Linux Generators
by 8αr. Finally LINUX outputs t bytes from S∗
S0
r = M(S∗
r , HK(S∗
r)) and R = F ◦ HK ◦ M(S∗
r , HK(S∗
r, this produces the ﬁnal output pool
r)). This decreases Er by 8t.
• If αr < 8, then LINUX blocks and waits until Si gets refreshed with I and until αr ≥ 8.
Output with /dev/urandom. Similarly, let us describe the transfers when t bytes are requested
from the non-blocking pool. If Eu ≥ 8t then LINUX applies the same process as in the non-
blocking case, outputs R = F ◦ HK ◦ M(Su, HK(Su))) and sets S0
u = M(Su, HK(Su)). If Eu < 8t
then LINUX behaves diﬀerently. Let αu = min(min(max(t, 8), 128),bEi/8c − 16):
• If αu ≥ 8, the process is the same as in the non-blocking case, but with Su, Eu and αu
instead of Sr, Er and αr.
• If αu < 8, then LINUX outputs the requested bytes from Su without transferring data
u =
from Si. Hence LINUX behaves as if Eu ≥ 8t: R = F ◦ HK ◦ M(Su, HK(Su)), and S0
M(Su, HK(Su)). This decreases Eu by 8t and the new value is 0.
i, S0
Algorithm 9 LINUX nextu
Require: t, S = (Si, Su, Sr)
Ensure: R, S0 = (S0
u, S0
r)
1: αu = min(min(max(t, 8), 128), bEi/8c − 16)
2: if αu ≥ 8 then
3:
4:
5:
6:
7:
8:
9:
10:
11: else
12:
13:
14: end if
15: S0
r = Sr
16: return R, S0 = (S0
Ti = F ◦ HK ◦ M(Si, HK(Si))
S0