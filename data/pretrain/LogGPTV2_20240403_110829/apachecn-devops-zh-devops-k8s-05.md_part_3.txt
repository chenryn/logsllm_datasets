 metadata:
 name: echoserver
 labels:
 project: chapter5
 service: echoserver
 spec:
 containers:
 - name: echoserver
 image: gcr.io/google_containers/echoserver:1.4
 ports:
 - containerPort: 8080
---
kind: Service
apiVersion: v1
metadata:
 name: echoserver
spec:
 type: NodePort
 selector:
 project: chapter5
 service: echoserver
 ports:
 - protocol: TCP
 port: 8080
 targetPort: 8080
// create RS and SVC by above configuration file
# kubectl create -f 5-2-1_echoserver.yaml
deployment "echoserver" created
service "echoserver" created  
```
接下来，我们将创建入口资源。有个注解叫`ingress.kubernetes.io/rewrite-target`。如果服务请求来自根 URL，这是必需的。如果没有重写注释，我们将得到 404 作为响应。请参考[https://github . com/kubernetes/ingress/blob/master/controllers/nginx/configuration . MD #注解](https://github.com/kubernetes/ingress/blob/master/controllers/nginx/configuration.md#annotations)了解 nginx 入口控制器中更多支持的注解:
```
# cat 5-2-1_ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 name: ingress-example
 annotations:
 ingress.kubernetes.io/rewrite-target: /
spec:
 rules:
 - host: devops.k8s
 http:
 paths:
 - path: /welcome
 backend:
 serviceName: nginx
 servicePort: 80
 - path: /echoserver
 backend:
 serviceName: echoserver
 servicePort: 8080
// create ingress
# kubectl create -f 5-2-1_ingress.yaml
ingress "ingress-example" created
```
In some cloud providers, service LoadBalancer controller is supported. It could be integrated with ingress via the `status.loadBalancer.ingress` syntax in the configuration file. For more information, refer to [https://github.com/kubernetes/contrib/tree/master/service-loadbalancer](https://github.com/kubernetes/contrib/tree/master/service-loadbalancer).
由于我们的主机被设置为`devops.k8s`，只有当我们从该主机名访问它时，它才会返回。您可以在 DNS 服务器中配置 DNS 记录，或者在本地修改主机文件。为简单起见，我们将在宿主文件中添加一行`ip hostname`格式的内容:
```
// normally host file located in /etc/hosts in linux
# sudo sh -c "echo `minikube ip` devops.k8s >> /etc/hosts"  
```
那么我们应该能够通过以下网址直接访问我们的服务:
```
# curl http://devops.k8s/welcome
...
Welcome to nginx!
...
// check echoserver 
# curl http://devops.k8s/echoserver
CLIENT VALUES:
client_address=172.17.0.4
command=GET
real path=/
query=nil
request_version=1.1
request_uri=http://devops.k8s:8080/  
```
pod 入口控制器根据 URL 路径调度流量。路由路径类似于外部服务通信。数据包在节点和 Pod 之间跳跃。Kubernetes 是可插拔的。许多第三方实现正在进行。我们在这里只触及表面，而 iptables 只是一个默认的和常见的实现。网络在每个版本中都有很大的发展。在撰写本文时，Kubernetes 刚刚发布了 1.7 版本。
# 网络策略
网络策略对 pods 来说就像一个软件防火墙。默认情况下，每个 Pod 都可以没有任何边界地相互通信。网络策略是您可以应用于 pods 的隔离之一。它通过名称空间选择器和容器选择器来定义谁可以访问哪个端口中的哪个容器。命名空间中的网络策略是附加的，一旦 pod 启用了策略，它就会拒绝任何其他入口(也称为默认拒绝所有入口)。
目前有多家网络提供商支持网络政策，如 Calico([https://www . project Calico . org/Calico-network-policy-to-kubernetes/](https://www.projectcalico.org/calico-network-policy-comes-to-kubernetes/))、Romana([https://github.com/romana/romana](https://github.com/romana/romana)))、Weave Net([https://www.weave.works/docs/net/latest/kube-addon/#npc)](https://www.weave.works/docs/net/latest/kube-addon/#npc))、Contiv([http://contiv.github.io/documents/networking/policies.html)](http://contiv.github.io/documents/networking/policies.html))和 Trireme([https://github.com/aporeto-inc/trireme-kubernetes](https://github.com/aporeto-inc/trireme-kubernetes))。用户可以自由选择任何选项。为了简单起见，我们将使用带 minikube 的 Calico。为此，我们必须使用`--network-plugin=cni`选项启动 minikube。在这一点上，网络政策在 Kubernetes 还是相当新的。我们正在运行带有 v.1.0.7 minikube ISO 的 Kubernetes v . 1 . 7 . 0 版本，通过自托管解决方案部署 Calico([http://docs . project Calico . org/v 1.5/入门/Kubernetes/installation/hosted/](http://docs.projectcalico.org/v1.5/getting-started/kubernetes/installation/hosted/))。首先，我们需要下载一个`calico.yaml`([https://github . com/project calico/Calico/blob/master/v 2.4/入门/kubernetes/installation/hosted/Calico . YAML](https://github.com/projectcalico/calico/blob/master/v2.4/getting-started/kubernetes/installation/hosted/calico.yaml)))文件来创建 Calico 节点和策略控制器。`etcd_endpoints`需要配置。要找到 etcd 的 IP，我们需要访问 localkube 资源。
```
// find out etcd ip
# minikube ssh -- "sudo /usr/local/bin/localkube --host-ip"
2017-07-27 04:10:58.941493 I | proto: duplicate proto type registered: google.protobuf.Any
2017-07-27 04:10:58.941822 I | proto: duplicate proto type registered: google.protobuf.Duration
2017-07-27 04:10:58.942028 I | proto: duplicate proto type registered: google.protobuf.Timestamp
localkube host ip:  10.0.2.15  
```
etcd 的默认端口是`2379`。在这种情况下，我们将`calico.yaml`中的`etcd_endpoint`从`http://127.0.0.1:2379`修改为`http://10.0.2.15:2379`:
```
// launch calico
# kubectl apply -f calico.yaml
configmap "calico-config" created
secret "calico-etcd-secrets" created
daemonset "calico-node" created
deployment "calico-policy-controller" created
job "configure-calico" created
// list the pods in kube-system
# kubectl get pods --namespace=kube-system
NAME                                        READY     STATUS    RESTARTS   AGE
calico-node-ss243                           2/2       Running   0          1m
calico-policy-controller-2249040168-r2270   1/1       Running   0          1m  
```
我们再以`5-2-1_nginx.yaml`为例:
```
# kubectl create -f 5-2-1_nginx.yaml
replicaset "nginx" created
service "nginx" created
// list the services
# kubectl get svc
NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
kubernetes   10.0.0.1             443/TCP        47m
nginx        10.0.0.42           80:31071/TCP   5m
```
我们会发现我们的 nginx 服务有 IP `10.0.0.42`。让我们启动一个简单的 bash 并使用`wget`来看看我们是否可以访问我们的 nginx:
```
# kubectl run busybox -i -t --image=busybox /bin/sh
If you don't see a command prompt, try pressing enter.
/ # wget --spider 10.0.0.42 
Connecting to 10.0.0.42 (10.0.0.42:80)  
```
`--spider`参数用于检查网址是否存在。在这种情况下，busybox 可以成功访问 nginx。接下来，让我们将`NetworkPolicy`应用于我们的 nginx Pod :
```
// declare a network policy
# cat 5-3-1_networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
 name: nginx-networkpolicy
spec:
 podSelector:
 matchLabels:
 service: nginx
 ingress:
 - from:
 - podSelector:
 matchLabels:
 project: chapter5  
```
我们可以在这里看到一些重要的语法。`podSelector`用于选择 Pod ，应与目标 Pod 的标签相匹配。另一个是`ingress[].from[].podSelector`，用于定义谁可以访问这些 PODS。在这种情况下，所有带有`project=chapter5`标签的 PODS 都有资格访问带有`server=nginx`标签的 PODS。如果我们回到 busybox pod，我们将无法再联系 nginx，因为现在 nginx pod 已经打开了 NetworkPolicy。默认情况下，它是全部拒绝，因此 busybox 将无法与 nginx 对话:
```
// in busybox pod, or you could use `kubectl attach  -c busybox -i -t` to re-attach to the pod 
# wget --spider --timeout=1 10.0.0.42
Connecting to 10.0.0.42 (10.0.0.42:80)
wget: download timed out  
```
我们可以使用`kubectl edit deployment busybox`将标签`project=chaper5`添加到 busybox PODS 中。
Refer to the labels and selectors section in [Chapter 3](03.html#22O7C0-6c8359cae3d4492eb9973d94ec3e4f1e), *Getting Started with Kubernetes* if you forget how to do so.
之后，我们可以再次联系 nginx Pod :
```
// inside busybox pod
/ # wget --spider 10.0.0.42 
Connecting to 10.0.0.42 (10.0.0.42:80)  
```
借助前面的例子，我们有了一个如何应用网络策略的想法。我们也可以应用一些默认策略来拒绝所有或允许所有，通过调整选择器来选择没有人或所有人。例如，拒绝所有行为可以通过以下方式实现:
```
# cat 5-3-1_np_denyall.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
 name: default-deny
spec:
 podSelector:  
```
这样，所有不匹配标签的 PODS 将拒绝所有其他流量。或者，我们可以创建一个`NetworkPolicy`，它的入口从任何地方都被列出。那么在这个命名空间中运行的 pods 可以被任何其他人访问。
```
# cat 5-3-1_np_allowall.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
 name: allow-all
spec:
 podSelector:
 ingress:
 - {}  
```
# 摘要
在这一章中，我们学习了容器之间如何进行必要的通信，并介绍了容器之间的通信是如何工作的。服务是一个抽象，如果标签选择器匹配，它将流量路由到下面的任何一个单元。我们学习了 iptables magic 如何使用 pod 进行服务。我们知道了数据包是如何从外部路由到 Pod 的，以及 DNAT，un-DAT 技巧。我们还学习了新的应用编程接口对象，如*入口*，它允许我们使用网址路径路由到后端的不同服务。最后引入了另一个对象`NetworkPolicy`。它提供了第二层安全性，充当软件防火墙规则。有了网络策略，我们可以让特定的 PODS 只与特定的 PODS 通信。例如，只有数据检索服务可以与数据库容器对话。所有这些都使得 Kubernetes 更加灵活、安全和强大。
到目前为止，我们已经了解了 Kubernetes 的基本概念。接下来，我们将通过监控集群指标和分析 Kubernetes 的应用和系统日志，更清楚地了解集群内部发生的事情。监控和日志工具对于每个 DevOps 都是必不可少的，它们在动态集群(如 Kubernetes)中也发挥着极其重要的作用。因此，我们将深入了解集群的活动，例如调度、部署、扩展和服务发现。下一章将帮助您更好地理解在现实世界中操作 Kubernetes 的行为。