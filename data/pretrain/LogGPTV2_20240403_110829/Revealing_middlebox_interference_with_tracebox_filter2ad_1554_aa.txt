title:Revealing middlebox interference with tracebox
author:Gregory Detal and
Benjamin Hesmans and
Olivier Bonaventure and
Yves Vanaubel and
Benoit Donnet
Revealing Middlebox Interference with Tracebox
Gregory Detal, Benjamin Hesmans,
Yves Vanaubel, Benoit Donnet
Olivier Bonaventure
Université catholique de Louvain
Louvain-la-Neuve – Belgium
ﬁPI:EMAIL
Université de Liège
Liège – Belgium
ﬁPI:EMAIL
ABSTRACT
Middleboxes such as ﬁrewalls, NAT, proxies, or Deep Pack-
et Inspection play an increasingly important role in various
types of IP networks, including enterprise and cellular net-
works. Recent studies have shed the light on their impact on
real traﬃc and the complexity of managing them. Network
operators and researchers have few tools to understand the
impact of those boxes on any path. In this paper, we pro-
pose tracebox, an extension to the widely used traceroute
tool, that is capable of detecting various types of middle-
box interference over almost any path. tracebox sends IP
packets containing TCP segments with diﬀerent TTL values
and analyses the packet encapsulated in the returned ICMP
messages. Further, as recent routers quote, in the ICMP
message, the entire IP packet that they received, tracebox
is able to detect any modiﬁcation performed by upstream
middleboxes. In addition, tracebox can often pinpoint the
network hop where the middlebox interference occurs. We
evaluate tracebox with measurements performed on Plan-
etLab nodes. Our analysis reveals various types of mid-
dleboxes that were not expected on such an experimental
testbed supposed to be connected to the Internet without
any restriction.
Categories and Subject Descriptors
C.2.3 [Network Operations]: Network Monitoring
Keywords
Network Discovery, Middleboxes, tracebox
1.
INTRODUCTION
The TCP/IP architecture was designed to follow the end-
to-end principle. A network is assumed to contain hosts im-
plementing the transport and application protocols, routers
implementing the network layer and processing packets, swit-
ches operating in the datalink layer, etc. This textbook
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC’13, October 23–25, 2013, Barcelona, Spain.
Copyright 2013 ACM 978-1-4503-1953-9/13/10 ...$15.00.
http://dx.doi.org/10.1145/2504730.2504757.
description does not apply anymore to a wide range of net-
works. Enterprise networks, WiFi hotspots, and cellular net-
works often include various types of middleboxes in addition
to traditional routers and switches [1]. A middlebox, deﬁned
as “any intermediary box performing functions apart from
normal, standard functions of an IP router on the data path
between a source host and destination host” [2], manipulates
traﬃc for purposes other than simple packet forwarding.
Middleboxes are often deployed for performance or secu-
rity reasons. Typical middleboxes include Network Address
Translators, ﬁrewalls, Deep Packet Inspection boxes, trans-
parent proxies, Intrusion Prevention/Detection Systems, etc.
Recent papers have shed the light on the deployment of
those middleboxes. For instance, Sherry et al. [1] obtained
conﬁgurations from 57 enterprise networks and revealed that
they can contain as many middleboxes as routers. Wang
et al. [3] surveyed 107 cellular networks and found that 82
of them used NATs. Although these middleboxes are sup-
posed to be transparent to the end-user, experience shows
that they have a negative impact on the evolvability of the
TCP/IP protocol suite [4]. For example, after more that ten
years of existence, SCTP [5] is still not widely deployed, par-
tially because many ﬁrewalls and NAT may consider SCTP
as an unknown protocol and block the corresponding pack-
ets. Middleboxes have also heavily inﬂuenced the design of
Multipath TCP [4, 6].
Despite of their growing importance in handling opera-
tional traﬃc, middleboxes are notoriously diﬃcult and com-
plex to manage [1]. One of the causes of this complexity
is the lack of debugging tools that enable operators to un-
derstand where and how middleboxes interfere with packets.
Many operators rely on ping, traceroute, and various types
of show commands to monitor their networks.
In this paper, we propose, validate, and evaluate trace-
box. tracebox is a traceroute [7] successor that enables
network operators to detect which middleboxes modify pack-
ets on almost any path. tracebox allows one to easily gen-
erate complex probes to send to any destination. By using
the quoted packet inside of ICMP replies, it allows to iden-
tify various types of packet modiﬁcations and can be used
to pinpoint where a given modiﬁcation takes place.
The remainder of this paper is organized as follows: Sec. 2
describes how tracebox works and how it is able to iden-
tify middleboxes along a path. Sec. 3 analyses three use
cases from a deployment of tracebox on PlanetLab. Sec. 4
shows how tracebox can be used to debug networking is-
sues. Sec. 5 compares tracebox regarding state of the art.
Finally, Sec. 6 concludes and discusses further work.
12. TRACEBOX
To detect middleboxes, tracebox uses the same incremen-
tal approach as traceroute, i.e., sending probes with in-
creasing TTL values and waiting for ICMP time-exceeded
replies. While traceroute uses this information to detect
intermediate routers, tracebox uses it to infer the modiﬁca-
tion applied on a probe by an intermediate middlebox.
tracebox brings two important features.
Middleboxes Detection tracebox allows one to easily and
precisely control all probes sent (IP header, TCP or UDP
header, TCP options, payload, etc.). Further, tracebox
keeps track of each transmitted packet. This permits to
compare the quoted packet sent back in an ICMP time-
exceeded by an intermediate router with the original one.
By correlating the diﬀerent modiﬁcations, tracebox is
able to infer the presence of middleboxes.
Middleboxes Location Using an iterative technique (in
the fashion of traceroute) to discover middleboxes also
allows tracebox to approximately locate, on the path,
where modiﬁcations occurred and so the approximate mid-
dleboxes position.
When an IPv4 router receives an IPv4 packet whose TTL
is going to expire, it returns an ICMPv4 time-exceeded
message that contains the oﬀending packet. According to
RFC792, the returned ICMP packet should quote the IP
header of the original packet and the ﬁrst 64 bits of the pay-
load of this packet [8]. When the packet contains a TCP
segment, these ﬁrst 64 bits correspond to the source and
destination ports and the sequence number. RFC1812 [9]
recommended to quote the entire IP packet in the returned
ICMP, but this recommendation has only been recently im-
plemented on several major vendors’ routers. Discussions
with network operators showed that recent routers from
Cisco (running IOX), Alcatel Lucent, HP, Linux, and Palo-
Alto ﬁrewalls return the full IP packet.
In the remainder
of this paper, we use the term Full ICMP to indicate an
ICMP message quoting the entire IP packet. We use the
term RFC1812-compliant router to indicate a router that
returns a Full ICMP .
By analyzing the returned quoted packet, tracebox is able
to detect various modiﬁcations performed by middleboxes
and routers. This includes changes in the Diﬀerentiated Ser-
vice ﬁeld and/or the Explicit Congestion Notiﬁcation bits in
the IP header, changes in the IP identiﬁcation ﬁeld, packet
fragmentation, and changes in the TCP sequence numbers.
Further, when tracebox receives a Full ICMP , it is able
to detect more changes such as the TCP acknowledgement
number, TCP window, removal/addition of TCP options,
payload modiﬁcations, etc.
tracebox also allows for more complex probing techniques
requiring to establish a connection and so multiple probes to
be sent, e.g., to detect segment coalescing/splitting, Applica-
tion-level Gateways, etc.
In this case tracebox works in
two phases: the detection and the probing phases. Dur-
ing the detection phase, tracebox sends probes by itera-
tively increasing the TTL until it reaches the destination.
This phase allows tracebox to identify RFC1812-compliant
routers. During the probing phase, tracebox sends addi-
tional probes with TTL values corresponding to the previ-
ously discovered RFC1812-compliant routers. This strategy
allows tracebox to reduce its overhead by limiting the num-
ber of probes sent.
Source
MB1
R1
R2
Destination
1.1.1.1
2.2.2.2
3.3.3.3
4.4.4.4
5.5.5.5
(a) topology
# tracebox -p ’IP / TCP / mss(9000)’ -n 5.5.5.5
tracebox to 5.5.5.5 (5.5.5.5): 30 hops max
1: 3.3.3.3 TCP::SequenceNumber
2: 4.4.4.4 IP::TTL IP::CheckSum TCP::CheckSum TCP::SequenceNumber
TCPOptionMaxSegSize::MaxSegSize
3: 5.5.5.5
(b) output
Figure 1: tracebox example
Fig. 1(a) shows a simple network, where MB1 is a middle-
box that changes the TCP sequence number and the MSS
size in the TCP MSS option but that does not decrement the
TTL. R1 is an old router while R2 is a RFC1812-compliant
router. The server always answer with a TCP reset. The
output of running tracebox between “Source” and “Destina-
tion” is given by Fig. 1(b). The output shows that tracebox
is able to eﬀectively detect the middlebox interference but
it may occur at a downstream hop. Indeed, as R1 does not
reply with a Full ICMP , tracebox can only detect the TCP
sequence change when analyzing the reply of R1. Neverthe-
less, when receiving the Full ICMP message from R2, that
contains the complete IP and TCP header, tracebox is able
to detect that a TCP option has been changed upstream of
R2. At the second hop, tracebox shows additional modiﬁca-
tions on top of the expected ones. The TTL and IP check-
sum are modiﬁed by each router and the TCP checksum
modiﬁcation results from the modiﬁcation of the header.
The detection of middleboxes depends on the reception
of ICMP messages. If the router downstream of a middle-
box does not reply with an ICMP message, tracebox will
only be able to detect the change at a downstream hop simi-
larly as the above example. Another limitation is that if the
server does not reply with an ICMP (as in Fig. 1), then the
detection of middleboxes in front of it is impossible.
tracebox is implemented in C++ in about 2,000 lines of
code and embeds LUA [10] bindings to allow a ﬂexible de-
scription of the probes as well to ease the development of
more complex middlebox detection scripts. tracebox aims
at providing the user with a simple and ﬂexible way of deﬁn-
ing probes without requiring a lot of lines of code. tracebox
indeed allows to use a single line to deﬁne a probe (see as ex-
ample the argument -p of tracebox in Fig. 1(b)) similarly
to Scapy [11]. tracebox provides a complete API to eas-
ily deﬁne IPv4/IPv6 as well as TCP, UDP, ICMP headers
and options on top of a raw payload. Several LUA scripts
are already available and allows one to detect various types
of middleboxes from Application-level Gateways to HTTP
proxies. It is open-source and publicly available [12].
To verify the ability of tracebox to detect various types
of middlebox interference, we developed several Click ele-
ments [13] modeling middleboxes. We wrote Click elements
that modify various ﬁelds of the IP or TCP header, ele-
ments that add/remove/modify TCP options and elements
that coalesce or split TCP segments. These elements have
been included in a python library [14] that allows to easily
describe a set of middleboxes and that generates the corre-
sponding Click conﬁguration. This library is used as unit
tests to validate each new version of tracebox.
23. VALIDATION & USE CASES
In this section, we validate and demonstrate the usefulness
of tracebox based on three use cases. We ﬁrst explain how
we deploy tracebox on the PlanetLab testbed (Sec. 3.1),
next we asses the coverage of tracebox (Sec. 3.2) and ﬁnally
discuss our use cases (Sec. 3.3, and 3.4).
1.0
0.8
0.6
f
d
c
0.4
0.2
3.1 PlanetLab Deployment
We deployed tracebox on PlanetLab, using 72 machines
as vantage points (VPs). Each VP had a target list of 5,000
items build with the top 5,000 Alexa web sites. Each VP
used a shuﬄed version of the target list. DNS resolution
was not done before running tracebox. This means that,
if each VP uses the same list of destination names, each
VP potentially contacted a diﬀerent IP address for a given
web site due to the presence of load balancing or Content
Distribution Networks. Our dataset was collected during
one week starting on April 17th, 2013.
In this short paper, we focus on analyzing some interfer-
ences between middleboxes and TCP. In theory, PlanetLab
is not the best place to study middleboxes because Planet-
Lab nodes are mainly installed in research labs with unre-
stricted Internet access. Surprisingly, we noticed that seven
VPs, from the 72 considered for the use cases, automati-
cally removed or changed TCP options at the very ﬁrst hop.
They replaced the Multipath TCP [6], MD5 [15], and Win-
dow Scale [16] options with NOP and changed the value of
the MSS option. We also found that two VPs always change
the TCP Sequence number.
3.2 RFC1812-compliant routers
tracebox keeps track of each original packet sent and
makes a comparison with the quoted IP packet when the
ICMP time-exceeded message is received. Further, trace-
box can potentially detect more middleboxes when routers
return a Full ICMP packet. tracebox’s utility clearly in-
creases with the number of RFC1812-compliant routers.
Fig. 2 provides an insight of the proportion of RFC1812-
compliant routers and their locations.
In particular, Fig. 2(a) gives the proportion of RFC1812-
compliant routers (the horizontal axis) as a CDF. A value
of 0, on the horizontal axis, corresponds to paths that con-
tained no RFC1812-compliant router. On the other hand,
a value of 1 corresponds to paths made only of RFC1812-
compliant routers. Looking at Fig. 2(a), we observe that, in
80% of the cases, a path contains at least one router that
replies with a Full ICMP . In other words, tracebox has the
potential to reveal more middleboxes in 80% of the cases.
Fig. 2(b) estimates the position of the RFC1812-compliant
It provides the distance be-
routers in the probed paths.
tween the VP and the RFC1812-compliant routers on a given
path. Note that, on Fig. 2(b), the X-Axis (i.e., the distance
from the VPs) has been normalized between 1 and 10. Dis-
tances between 1 and 3 refer to routers close to the VP,
4 and 6 refer to the Internet core while, ﬁnally, distances
between 7 and 10 refer to routers closer to the tracebox
targets. The widespread deployment of RFC1812-compliant
routers in the Internet core is of the highest importance since
tracebox will be able to use these routers as “mirrors” to
observe the middlebox interferences occurring in the access
network [3].
Fig. 2(b) shows that for 22% of the paths, the RFC1812-
compliant routers are close to the VP. This is approxima-
1.0
0.8
0.6
f
d
c
0.4
0.2
0.0
0
close to VP
core
close to dst
2
4
6
8
10