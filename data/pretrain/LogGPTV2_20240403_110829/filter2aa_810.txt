极棒跨次元 CTF 初赛解题报告
本队伍承诺诚信比赛，比赛期间，队伍之间不互相交流思路和 Flag。本队伍承诺题目包
中的所有内容仅用于信息安全学习，不用于任何其它恶意用途。本报告均由本队伍独立完成。
队伍： Nu1L
提示：题目名称后面的数字为本题总分数，详细评分规则请见题目包内部 ReadMe。题
目不分先后顺序。
SignIn-10
Flag：flag{Geekpwn2016}
直接修改高度
Only a JPG-150
Flag：flag{fight_on_the_stage}
解题步骤：
提取 MP4 文件
SecretCode-150
Flag：
解题步骤：
这题用 ollvm 混淆了下，写了段代码直接爆破，从-2147483648 到 2147483647 都爆了一遍还
是没发现答案，由于是 double 型，可能有小数部分或者数字特别大，范围太大爆不下去了。。
混淆后代码太恶心，就没有继续看了。
撕裂的藏宝图-150
Flag：flag{g1ve_Me_Five!!}
解题步骤：
题目描述：
发现藏宝图，找到秘密。
入口：http://map.geekpwn.org/entry.html
打开目标 URL 后发现都是不断跳转的站内连接。直接
#wget –m http://map.geekpwn.org/entry.html
有两张图片
http://map.geekpwn.org/map2_ghasdfhjlsadvbjsbfjjasd.bmp
http://map.geekpwn.org/map1_asdjduhfuasjkdhakjsdhkja.bmp
都是一样的乱，直觉直接用神器 StegoSolve XOR 两张图片。
都是 IPC 惹的祸-150
解题步骤：
消失的 Flag-250
Flag：
解题步骤：
逆向发现是个 kms 激活程序。自带激活码{0ff1ce15-a989-479d-af46-f275c6370663}，也可以
自行输入一个激活码。然而并不知道题目的具体意图。
Hollyhigh Image-350
Flag：
解题步骤：
1、 随便上传一些图片，发现都被禁，有一些是超过最大上传大小。有一些返回 nonono 一
开始摸不着头脑，所以就随手弄了些更小的图片试试。
2、 尝试成功跳转到了 emage.geekpwn.org/showpic.html#
3、 太辣眼睛了 background image，看源码觉得 loadfile.php 很明显一个读文件的功能。
4、 一开始不知道因为啥一直有问题，之后题目变了，给了 loadfile1.php 是 loadfile.php 的源
码，成功用 loadfile.php 读出了 upload.php 的源码。
 4096) {
die('nonono');
}
if(move_uploaded_file($_FILES['userfile']['tmp_name'], $uploadfile))
{
var_dump($_FILES['userfile']);
$command = "/tmp/ctf/g33kpwchen " . $uploadfile;
echo $command . "\n";
exec($command, $res);
$width = $res[0];
$height = $res[1];
$filename = $res[2];
$url = "/showpic.html#".substr($filename, 21);
header("HTTP/1.1 301 Moved Permanently");
header ("Location: " . $url);
}
else
{
echo "fail";
}
?>
文件名是上传文件名作一次 md5 哈希，感觉没什么搞点，看了源码之后就确定了。
是构造文件内容。逆向 g33kpwchen。有 tips 发现是开启了 ASLR。
逆向部份：
构造
P3 开头的文件。
HugMe-300
Flag：flag{e01eeed093cb22bb}
解题步骤：
一个加了壳的swf(后来知道是doswf的壳)
先preload挂个TheMiner，然后看loader的内容，脱去第一层壳。
反编译取出的swf，发现一个坑
显示出来的hugme啥用都没有。。。需要点击的那个hugme又没被正确加载。。需要自己做
修改
然后才能看见真正的按钮
接着关键的判断逻辑。
然而Verify运行时才载入。。
于是再次脱壳。。。TheMiner没hook loadBytes,所以这里只能自己来
提取出这个函数运行然后把uncompress的结果base64一下，trace打出来。
然后再用python保存成文件。(不会actionscript的文件读写只好这么搞)
然后反编译保存下来的文件，发现校验过程其实就是个方程组
method3没用。。只要符合method2里的方程组，method3一定符合。
然后就是求解方程组得到一组解[14,0,1,14,14,14,13,0,9,3,12,11,2,2,11]
对应的flag e01eeed093cb22b
然而这才15位 。。根据readme的提示，枚举最后一位。。发现e01eeed093cb22bb是hello world
的md5
故 flag 为 e01eeed093cb22bb
matryoshka-300
Flag：
解题步骤：
patch so文件绕过反调试、签名校验，动态跟踪了下发现该函数：
this.a.stringFronJNI(this.a.getBaseContext(),"matryoshka")
返回固定值"matryoshka"，接下来对该字符串进行 reverse 等变换后进入 b.a，该函数实
现了 DES 加密（解密），第一个参数是输入，第二个参数是固定密钥。
不知道最后的 flag 是什么形式，没有找到提示。。感觉爆破的话范围太大，脑洞不够。。。
Rivest Shamir Adleman-400
解题步骤：
XSS Book-400
Flag：
解题步骤：
被捕获的 0day-600
解题步骤：
一：漏洞分析
搭建环境，WinDbg attach，触发漏洞。
栈回溯
三个题目中对应的 dll
根据 POC，主要关注
CCardSpaceClaimCollection::add
和 CCardSpaceClaimCollection::remove
首先看 remove 这个函数：
结合 WinDbg 在 CCardSpaceClaimCollection::remove+0x128 处，IDA 查看反汇编代码。
IDA 反汇编代码结合 WinDbg 在此处下断点并动态调试，发现 remov 传入参数为 0 时会造成
溢出修改一块存储长度的内存。
再看 add 函数：
函数中有一个数组的检查：
也能从后面的代码中查看到调用它对数组进行调整：
在调整前，add 函数会先存储一下 ppvData 的指针于一个局部变量：
之后会有一个用户可控的字符串传入同时指向该字符串的指针存入 ppvData，但此时存储长
度的内存已经被覆盖，所以也就不需要再通过 SafeArray 进行调整。
之后可以通过构造不同输入，进行漏洞利用。
控制 eip poc: