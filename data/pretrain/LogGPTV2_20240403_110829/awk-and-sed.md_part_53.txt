a [address]a\
= [address]= 
sed 的命令汇总
C
:label 
将所寻址的行编写到标准输出。
将读取一个新的输入行，和执行了d命令。
允许标签的长度任意。）
在脚本中标记一行，
并且用脚本的第一条命令恢复编辑。如果这个命令使模式空间为空，那么
删除由命令N创建的多行模式空间中的第一部分（直到嵌入的换行符）
[address1[, address2 ]]D 
读取，并用脚本的第一个命令来编辑。
text
个字符。
[address1[,address2 ]]d 
直到达脚本的末端，因此不再有命令作用于当前行。
[address1[, address2 ]]c\ 
[address1[, address2 ]]b[label] 
31
用
的
在
8
text
无
模式空间中删除行。
内
换
有
用
不管在模式空间中的当前行发生了什么。
于它。
第一个换行符结束。text在模式空间中不是可用的并且后续命令不能应
与 address 匹配的每行后面追加 text。如果text 多于一行，必须用反
的命令是应用
条件地将控制转移到脚本其它位置的：labe”处。也就是说，
容被删除，因此后续的命令不能应用于它（或应用于text）。
的这些行作为一个组由 text 的一个副本来替代。每个text行后面的
text 替代（改变）由地址选定的行。
符必须用反斜杠将其转义，但最后一行除外。实际上，模式空间的
。（POSIX 标准允许实现工具在需要时定义更长的标签。GUNsed
当编辑命令的列表用完时这个命令的结果将被输送到标准输出，
当在替换字符串中使用时打印整个被匹配的文本。
个从1到9的数字，前面保存的模式从行的左边开始编号。
匹配用前面“\（”
列“\1”
空间。用这种方法在一行中可以最多保存9个模式。用转义序
将包含在“\(”
转义随后的特殊字符
式的末尾时是特殊的
定位位于行末尾的正则表达式，只有当$符号出现在正则表达
用于当前行的下一个命令。
QQ群：
用于实现由b或t的控制转移。label最多可以包含7
到“\9”可以重新使用它们。
，因此行没有被传递到标准输出。一个新的输入行被
50192241
和“\)”之间的模式保存到一个特殊的保持
- 411 -
和“\)”保存的第 n 个模式，这里n 是一
，当指定的是一个行范围时，将所
如果没有指定label，
附
录
1
 sed 的快速参考
，label后
控制将一
---
## Page 394
S
Q
C
D
G
b.0
保持空间为空，则将换行符添加到模式空间。
将保持空间（参见h或H命令）中的内容复制到模式空间。如果保持空间
阻止当前行被输出。
打印所寻址的行。注意这将导致输出的重复,
命令也追加换行名
将换行符后面的保持空间（参见h或H命令）内容追加到模式空间。如果
为
u
模
用
之
读
[address]q 
没
打
[address1[, address2 ]]p 
配
前
将
[address1[, address2 ]]N 
并
读
[address1[, address2 ]]n 
列出模式空间的内容，
[addr ess1]i\
将换行符和模式空
[address1[, address2 ]]H 
的
将
[address1[, address2 ]]h 
[address1[, address2 ]]G 
[address1[,address2 ］]g
[address]r file 
宗
并递增计数器。将控制转到n后面的命令，而不是恢复到脚本的顶部。
的细节）。
将
text
空，则将换行符添加到模式空间。
式//表示最后指定的模式地址。
间保存留一个空格。
取 file的内容并追加到模式空间内容的后面。必须在r和文件名file
有将
印由
嵌入的换行符，则可以实现多行模式匹配）。
取下一个输入行到模式空间。
n”
text 插入到每个和 address 匹配的行的前面（参见a详细了解text
当前内名
模
，包括用前面的a或r命令为它追加的
到 address 时退出。
容用换行符分隔（这个命令用于实现两行的模式匹配。利用\n 来匹
一个输入行追加到模式空间的内容之后;新添加的行与模式空间的当
式空间的内
替代每个寻址的行的第n个/pattern/。n是1 到512之间的任意数
字
白n命令创建的多行模式空间的第一部分(直到嵌入的换行符)。如果
”命令行选项限制。
将N应用于桌
，并且默认值为1.
容被清际
QQ群：
某一行则和p相同
空间的内容追加到保持空间中，即使保存空间为空，这个
符
除
容复制到保存空间,
。
将不可打印的字符表示为ASCI丨码。长的行被折
50192241
寻址的行首先被写到输出
常用于改变流控制
412
，当前行被送到标准输出。新行成为当前行
可以指定下面的标志。
即一个特殊的临时缓冲区。保存空间
文
（d,n，b）的命令之前并可能
除非默认的输出用“#n”或
本。
附录一
：（如果没有限制默认输
sed 的快速参考
那么
---
## Page 395
K
X
M
按位置将字符串 abc 中的字符转换成字符串 xyz 中的相应该字符。
输出模式空间内容时发生。必须在W和这个文件名之间保留一个空格。在
将模式空间的内容追加到file。
w file 如果发生一次替换则将这行写入file。最多可以打开10个不同
[address1 [, address2 ]]y/abc/xyz/ 
交换模式空间和保持空间的内容
[address1[, address2 ]]x 
直接将输出写入到同一个文件并追加到这个文件的末端。
部。
标志的行（参见b和：）。如果没有给出label，控制将转移到脚本的底
测式在寻址的行范围内是否成功执行了替换，如果是，
[address1[,address2 ]]t [label] 
文件。如果文件存在，
本中可以打开的最
的 file.
个行的多个副本。
如果替换成功则打印这一行。如果成功进行了多个替换，将打印这
替代每个寻址的行的所有/pattrtn/，而不只是第一个。
QQ群：
大文件数是10.如果文件不存在，
50192241
则
每次执行脚本时将改定其内容，多重写入命令
413
，这个动作是在遇到命令时发生而不是在
附录一
，这个命令将创建一
则转移到有丨abel
sed 的快速参考
---
## Page 396
直到读取第一个输入行。命令行参数才能使用，因此在 BEGIN过程中不能访
根据 POSIX参数分析约定,
这个附录介绍关于 awk 脚本的语言的特点。
awk 的快速参考
是，在 BEGIN过程之后，awk 将它们作为文件名来处理。在19891年初，Bell
来。可以指定任意多个变量。
一个命令的结果（‘cmd’）；如果其中包含空格或制表符则必须用引号包围起
变量，例如FS,OFS 和RS。value 可以是一个文字，
通过在脚本后命令行上指定参数，可以将它们传递到awk 中，这包括设置系统
换句话说，你也可以将脚本写入一个单独的文件并在命令行中用-F 选项指定文
你可以在命令行指定一个由用单引号包围的由 pattern 和 action 组成的脚本。
行。（参见下面有关命令行参数的讨论）。
-v 选项在脚本执行前将变量 var 的值设置为 value.这个 BEGIN 过程运行前执
取。选项-F 将字段分隔符（FS）设置为re.
文件中读取的。如果没有指定文件名或指定为“-”
调用 awk 的语法有两种基本形式：
1
命令行语法
附录二
。（awk 和 nawk 中的较老的实现可以在运行 BEGIN过程之前处理前导的命令
-个 awk 命令行是由命令，
 awk [-v var=value] 
u u e .[--] [ -] [ ]  
datafile(s)
QQ群：
I[-Fr e] -f scriptfile [--] var=value datafile(s)
脚本和输入文件名组成的。输入是从命令中指定的
50192241
选项“--”标记命令行选项的结束。例如，利用这
- 414 -
附录二
一个shell变量（$var）或
，那么将从标准输入中读
awk 的快速参考
var=value
---
## Page 397
也可以将定界符赋值给系统蛮量FS。这通常在 BEGIN过程中完成，但也可以作
这部分概括了 awk 如何处理输入记录和描述组成 awk 程序的各种语法要素。
awk语言概要
的位置来引用。
每个输入行都是几个字段组成的一个记录。
每个输入行都被分割为字段。默认情况下，字段定界符是一个或多个空格和/或
记录和字段
路径名取决于系统。
awk 参数和输入文件名可以在调用 shel丨脚本的命令行上指定。注意，使用的
在现代的unux 系统中，包括linux，你可以用#!语法来创建自包含 awk 脚本：
这是为了更易于使用和重用。
可以将调用 awk 的命令行放在一个文件中，
使别人更容易使用这些脚本。
调用并重用的脚本都可以放到 shelI脚本中。利用 shell程序来调用 awk 可以
在系统提示符下输入脚本只能练习简单的单行脚本。任何可以作为一个命令来
文件名之后的参数在下一个文件名被识别时变为可用。
数按照它们出现在命令行中的顺序来求值，直到遇到一个文件名。出现在这个
Lab awk 修正了它们，并添加了-v选项。现在它是POSIX awk 的一部分。）参
为
制
中
将
用 shell实现调用 awk
命令行的参数来传递。
面命令行将字段分隔符改为一个冒号：
表符。可以使用-F 命令行选项来改变字段分隔符。同时还要设置 FS 的值。
包含局部命令。可以在命令行输入这个 shell脚本的名字来执行 awk 脚本。
子文件做成可执行的（利用chmod 命令）并将它放入到一个目录中，这个目
“$O”表示整个记录。下面的操作打印每个输入行的第一个字段：
 awk -f awkscr FS=: /etc/passwd
 awk -F: -f awkscr /etc/passwd
script
#! /usr/bin/awk -f
{print $1 }
“$1”表示第一个字段中的值，
QQ群：
50192241
- 415 -
，每个字段可以根据它在这个记录中
给它一个名字以说明脚本的功能，
附录二
“$2”表示第二个字段的值等
awk 的快速参考
录
---
## Page 398
语句。如果给出了多个与控制语句相关的语句，那么必须用大括号括起来。
程序控制语句（do,if,for 或 while）的范围包括下一行，
行放在同一行，但这将降低程序的可读性。在语句之间允许存在空行。
awk 脚本中的行以一个换行符或一个分号终止。如果允许，
行为终止
数”中进行了介绍。
括号之间有空格存在。在函数的定义中允许有空格。自定义函数在第九章“函
以在函数外部对它们进行访问。当调用自定义函数时，不允许在函数名和左圆
表中指定的变量被看做是函数内部的局部变量，，
也可以出现函数的定义：
如果指定一个模式，
这个语法定义了函数 name，
打印输入文件的每个行：
action 操作由一个或多个语句组成，
awk 脚本包含一系列模式匹配规则和操作：
脚本的格式
Programming》中讨论了更多的细节。
隔字段。
注意，当RS 被设置为一个空字符时，不管fs 的值是什么，换行符总是用来分
到遇到空行前的任意个行解释为一个记录，而每个行是一个单独的字段。
默认的记录分隔符是一个换行符。
。如果没有指定模式，
 function name (parameter list) { statements ↓
 patter n { action }
BEGIN { FS = "\n"; RS = ""]
total += $2
name = $1 
if (NF > 1)
 print 
QQ群：
，那么默认的操作由print 语句构成，如上所示。
这个操作对每个行都执行。下面的例子用 print 语句
50192241
给出了在函数体中可以访问的参数列表。在参数列
下面的过程设置了FS和RS，使得 awk 将直
416-
用于对那些怀模式匹配的输入行执行操
其他所有的变量是全局的并可
附录二
在那一行列出了相关
可利用分号将多个
awk 的快速参考
---
## Page 399
Z.9
45
一个模式可以是下面所列的任何一个：
模式
到下一行。
注解以“#”开始并以换行符结束。它可以单独出现在一行上或出现在一行的最
任何一个来中断行。
对于使用反斜杠(\)转义符实现将一行代码写在多行上。也可以用下列字符中的
?
.7
后
注解
。注释是描述性的说明，用于解释脚本有操作。注释不可能用反斜杠来延伸
patter n, patter 
END
BEGIN
relational expression 
/regular expression/
BEGIN 和 END 模式必须和操作相联系。如果编写了多个 BEGIN 和 END 规
水
{&
则，
可以将模式放在圆括号号确保正确的求值。
/quick/”是不起作用的。
尔表达式的一部分。例如,
nawk 的 sun 版本（sunos4.1X）不支持将正则表达式看做是一个大的布
逻辑或
除
pattern, pattern 