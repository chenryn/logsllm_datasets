### Double Spending and Liveness in Corda

Corda's global graph does not contain any instances of double spending. Since this global graph is a superset of the read outputs of honest parties (as per F\_cread), it ensures that honest clients are protected from double spending.

**Liveness:**
F\_cupdRnd guarantees that transactions involving only honest clients will be included in the global graph within an upper-bounded delay, provided all clients have acknowledged the transaction. Additionally, F\_cread ensures that transactions initiated by honest parties will be reflected in the local state of all honest signees after another bounded time delay. According to Theorem 4.1, these properties directly apply to Corda. However, a stronger liveness guarantee is not feasible for Corda. If a notary is compromised, and consequently, all clients relying on this notary consider themselves compromised, a transaction may never be signed by that notary and thus will not enter the global graph. Furthermore, since the initiator is solely responsible for forwarding responses from the notary, if the initiator misbehaves, the response might not reach the local state of a signee.

### Privacy in Corda

Privacy in Corda requires a more detailed explanation compared to other properties. First, F\_cread ensures that honest parties can only read transactions that are part of their potential knowledge, i.e., those they are directly involved in or that have been forwarded to them by someone who already knew the transaction. By the definition of F\_csubmit, if no dishonest client is involved in a new transaction, only the length of the body is leaked. For Corda, this means that the body of a transaction involving only honest clients (and, by extension, an honest notary) remains secret unless one of those clients intentionally forwards the transaction to another party.

We can also determine the maximum information a dishonest client or notary can learn in Corda, thereby establishing the level of privacy provided:
- By the definitions of F\_csubmit and Fleak, all metadata of transactions is leaked.
- The message bodies of transactions are only leaked if they involve a dishonest client.

Thus, an adversary on Corda can learn at most the metadata of transactions, all transaction bodies that use a dishonest notary, and all transaction bodies that involve a dishonest client. Any additional information would cause the simulation of dishonest clients/notaries to fail, violating Theorem 4.1.

**Metadata Leakage:**
Corda does leak some meta-information of transactions. An outside adversary can observe network communication, which strongly depends on and changes based on the meta-information of a transaction. For example, the initiator of an honest transaction collects approvals from all signees, making it easy to derive the set of participating clients. Similarly, the notary is evident from watching where a transaction is sent by the initiator after collecting approvals from signees. Even the set of inputs to a transaction is partially visible, as signees and the notary request missing inputs from the initiator. While we slightly overestimate this information leakage by leaking full meta-information in F\_cledger, it is not possible to obtain a significantly stronger privacy statement for meta-information in Corda.

**Transaction IDs and Attacks:**
The adversary on F\_cledger is allowed to obtain IDs for arbitrary transactions. This captures that the IDs of transactions in Corda are computed as hashes over the full transaction, including the body in plain text. If an attacker obtains such an ID, they can attempt to brute force the content of the transaction.

Additionally, an adversary on F\_cledger can validate arbitrary transactions with respect to the current partial view of some honest client, potentially leaking information about input states. This captures the following attack on Corda: if an adversary controls a notary and knows the ID of a currently secret transaction \( tx \) from an honest client, they can create and have the notary sign a new transaction \( tx' \) that uses one or more output states from the secret transaction \( tx \) as input. The adversary can then push this transaction via a corrupted client to the honest client, who will verify the transaction and, depending on the verification result, add \( tx' \) to their partial view of the global state. Since this is generally observable, the adversary learns the result of the verification, which, depending on the smart contracts involved, might leak parts of \( tx \).

**Importance of Transaction IDs:**
Both of the above leakages and attacks on Corda are only possible if a transaction ID is leaked by a higher-level protocol, highlighting the importance of keeping transaction IDs secret. Since our proof considers arbitrary higher-level protocols (simulated by the environment), we cannot avoid these leakages. However, if we consider a specific higher-level protocol, say Q, using Corda/the ideal ledger such that Q keeps the transaction IDs secret (at least for honest parties), we can prove that Corda in this specific context realizes a variant of F\_cledger that does not leak transaction IDs, does not provide access to a hash oracle, and does not leak verification results. Our results show that this is not true in general.

### Acknowledgments

This research was partially funded by the Ministry of Science of Baden-Württemberg, Germany, for the Doctoral Program “Services Computing”. It was also supported by Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) through grant KU 1434/13-1, 442893093, and as part of the Research and Training Group 2475 “Cybercrime and Forensic Computing” under grant number 393541319/GRK2475/1-2019, and by the state of Bavaria at the Nuremberg Campus of Technology (NCT).

[References]  
(References section remains unchanged)