        `pam_sss_gss.so`{.literal} 条目的末尾添加 `debug`{.literal}
        选项：
        ``` literallayout
        [root@idm-client ~]# cat /etc/pam.d/sudo
        #%PAM-1.0
        auth       sufficient   pam_sss_gss.so   debug
        auth       include      system-auth
        account    include      system-auth
        password   include      system-auth
        session    include      system-auth
        ```
        ``` literallayout
        [root@idm-client ~]# cat /etc/pam.d/sudo-i
        #%PAM-1.0
        auth       sufficient   pam_sss_gss.so   debug
        auth       include      sudo
        account    include      sudo
        password   include      sudo
        session    optional     pam_keyinit.so force revoke
        session    include      sudo
        ```
    -   尝试使用 `pam_sss_gss.so`{.literal}
        模块进行身份验证，并查看控制台输出。在本例中，用户没有任何
        Kerberos 凭据。
        ``` literallayout
        [idm-user@idm-client ~]$ sudo ls -l /etc/sssd/sssd.conf
        pam_sss_gss: Initializing GSSAPI authentication with SSSD
        pam_sss_gss: Switching euid from 0 to 1366201107
        pam_sss_gss: Trying to establish security context
        pam_sss_gss: SSSD User name: PI:EMAIL
        pam_sss_gss: User domain: idm.example.com
        pam_sss_gss: User principal:
        pam_sss_gss: Target name: PI:EMAIL
        pam_sss_gss: Using ccache: KCM:
        pam_sss_gss: Acquiring credentials, principal name will be derived
        pam_sss_gss: Unable to read credentials from [KCM:] [maj:0xd0000, min:0x96c73ac3]
        pam_sss_gss: GSSAPI: Unspecified GSS failure.  Minor code may provide more information
        pam_sss_gss: GSSAPI: No credentials cache found
        pam_sss_gss: Switching euid from 1366200907 to 0
        pam_sss_gss: System error [5]: Input/output error
        ```
    :::
:::
:::
::: section
::: titlepage
# []{#granting-sudo-access-to-an-IdM-user-on-an-IdM-client_configuring-and-managing-idm.html#using-an-Ansible-playbook-to-ensure-sudo-access-for-an-IdM-user-on-an-IdM-client_granting-sudo-access-to-an-IdM-user-on-an-IdM-client}使用 Ansible playbook 确保 IdM 客户端上的 IdM 用户具有 sudo 访问权限 {.title}
:::
在身份管理(IdM)中，您可以确保对特定命令的 `sudo`{.literal}
访问权限被授予给特定 IdM 主机上的 IdM 用户帐户。
完成此流程以确保名为 [**idm_user_reboot**]{.strong} 的 `sudo`{.literal}
规则存在。该规则授予 [**idm_user**]{.strong} 在 [**idmclient**]{.strong}
机器上运行 `/usr/sbin/reboot`{.literal} 命令的权限。
::: itemizedlist
**先决条件**
-   您已在 Ansible 控制器上安装了
    [ansible-freeipa](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/installing_identity_management/index#installing-the-ansible-freeipa-package_server-ansible){.link}
    软件包。
-   您知道 IdM 管理员密码。
-   您已 [确保 IdM 中存在 [**idm_user**]{.strong}
    用户帐户，并通过为用户创建密码解锁了帐户](#managing-user-accounts-using-Ansible-playbooks_configuring-and-managing-idm.html#ensuring-the-presence-of-an-IdM-user-using-an-Ansible-playbook_managing-idm-users-using-Ansible-playbooks "使用 Ansible playbook 确保存在一个 IdM 用户"){.link}。有关使用命令行界面添加新
    IdM
    用户的详情，请参阅[使用命令行添加用户](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_identity_management/index#adding-users-using-the-command-line_managing-idm-users-using-the-command-line){.link}。
-   [**idmclient**]{.strong} 中没有本地 [**idm_user**]{.strong}
    帐户。[**idm_user**]{.strong} 用户未列在 [**idmclient**]{.strong}
    上的 `/etc/passwd`{.literal} 文件中。
:::
::: orderedlist
**流程**
1.  创建一个清单文件，如 `inventory.file`{.literal}，并在其中定义
    `ipaservers`{.literal} ：
    ``` literallayout
    [ipaservers]
    server.idm.example.com
    ```
2.  添加一个或多个 `sudo`{.literal} 命令：
    ::: orderedlist
    1.  创建一个 `ensure-reboot-sudocmd-is-present.yml`{.literal}
        Ansible playbook，来确保 `sudo`{.literal} 命令的 IdM
        数据库中存在 `/usr/sbin/reboot`{.literal}
        命令。要简化此步骤，您可以复制并修改 `/usr/share/doc/ansible-freeipa/playbooks/sudocmd/ensure-sudocmd-is-present.yml`{.literal}
        文件中的示例：
        ``` literallayout
        ---
        - name: Playbook to manage sudo command
          hosts: ipaserver
          become: true
          tasks:
          # Ensure sudo command is present
          - ipasudocmd:
              ipaadmin_password: MySecret123
              name: /usr/sbin/reboot
              state: present
        ```
    2.  运行 playbook：
        ``` literallayout
        $ ansible-playbook -v -i path_to_inventory_directory/inventory.file path_to_playbooks_directory/ensure-reboot-sudocmd-is-present.yml
        ```
    :::
3.  创建一个引用命令的 `sudo`{.literal} 规则：
    ::: orderedlist
    1.  创建一个
        `ensure-sudorule-for-idmuser-on-idmclient-is-present.yml`{.literal}
        Ansible playbook，来使用 `sudo`{.literal} 命令条目确保存在 sudo
        规则。sudo 规则允许 [**idm_user**]{.strong} 重新启动
        [**idmclient**]{.strong}
        机器。要简化此步骤，您可以复制并修改 `/usr/share/doc/ansible-freeipa/playbooks/sudorule/ensure-sudorule-is-present.yml`{.literal}
        文件中的示例：
        ``` literallayout
        ---
        - name: Tests
          hosts: ipaserver
          become: true
          tasks:
          # Ensure a sudorule is present granting idm_user the permission to run /usr/sbin/reboot on idmclient
          - ipasudorule:
              ipaadmin_password: MySecret123
              name: idm_user_reboot
              description: A test sudo rule.
              allow_sudocmd: /usr/sbin/reboot
              host: idmclient.idm.example.com
              user: idm_user
              state: present
        ```
    2.  运行 playbook：
        ``` literallayout
        $ ansible-playbook -v -i path_to_inventory_directory/inventory.file path_to_playbooks_directory/ensure-sudorule-for-idmuser-on-idmclient-is-present.yml
        ```
    :::
:::
::: title
**验证步骤**
:::
通过验证 [**idm_user**]{.strong} 能够使用 `sudo`{.literal} 重启
[**idmclient**]{.strong}，来测试您在 IdM 服务器上确认其存在性的
`sudo`{.literal} 规则是否在 [**idmclient**]{.strong}
上可以工作。请注意，可能需要过几分钟后，服务器上所做的更改才会对客户端生效。
::: orderedlist
1.  以 [**idm_user**]{.strong} 用户身份登录到 [**idmclient**]{.strong}。
2.  使用 `sudo`{.literal} 重新启动计算机。在提示时输入
    [**idm_user**]{.strong} 的密码：
    ``` literallayout
    $ sudo /usr/sbin/reboot
    [sudo] password for idm_user:
    ```
:::
如果正确配置了 `sudo`{.literal}，则机器将重启。
::: itemizedlist
**其它资料**
-   有关如何使用 Ansible playbook （包括 playbook 变量的描述）在 IdM
    中应用 `sudo`{.literal} 命令、命令组和规则的更多详细信息，请参阅
    `/usr/share/doc/ansible-freeipa/`{.literal} 目录中的
    README-sudocmd.md、README-sudocmdgroup.md 和 README-sudorule.md
    Markdown 文件。
:::
:::
:::
[]{#ensuring-the-presence-of-host-based-access-control-rules-in-idm-using-Ansible-playbooks_configuring-and-managing-idm.html}
::: chapter
::: titlepage
# []{#ensuring-the-presence-of-host-based-access-control-rules-in-idm-using-Ansible-playbooks_configuring-and-managing-idm.html#ensuring-the-presence-of-host-based-access-control-rules-in-idm-using-Ansible-playbooks_configuring-and-managing-idm}第 45 章 确保使用 Ansible playbook 的基于主机的访问控制规则在 IdM 中存在 {.title}
:::
本章描述了基于主机的身份管理(IdM)访问策略，以及如何使用
[Ansible](https://docs.ansible.com){.link} 定义它们。
Ansible
是一个自动化工具，用于配置系统、部署软件和执行滚动更新。它包括对身份管理(IdM)的支持。
::: section
::: titlepage
# []{#ensuring-the-presence-of-host-based-access-control-rules-in-idm-using-Ansible-playbooks_configuring-and-managing-idm.html#host-based-access-control-rules-in-idm_ensuring-the-presence-of-host-based-access-control-rules-in-idm-using-Ansible-playbooks}IdM 中基于主机的访问控制规则 {.title}
:::
基于主机的访问控制(HBAC)规则定义哪些用户或用户组可以通过哪些服务或服务组中的哪些服务来访问哪些主机或主机组。作为系统管理员，您可以使用
HBAC 规则来实现以下目标：
::: itemizedlist
-   将您域中对指定系统的访问权限限制为特定用户组的成员。
-   仅允许使用特定服务来访问域中的系统。
:::
默认情况下，IdM 是使用一个名为 [**allow_all**]{.strong} 的默认 HBAC
规则配置的，这意味着每个用户都可以通过整个 IdM
域中每个相关服务对每个主机进行通用访问。
您可以通过将默认的 [**allow_all**]{.strong} 规则替换为您自己的一组 HBAC
规则来微调对不同主机的访问。对于集中式和简化的访问控制管理，您可以将
HBAC 规则应用到用户组、主机组或服务组，而不是单个用户、主机或服务。
:::
::: section
::: titlepage
# []{#ensuring-the-presence-of-host-based-access-control-rules-in-idm-using-Ansible-playbooks_configuring-and-managing-idm.html#ensuring-the-presence-of-an-hbac-rule-in-idm-using-an-ansible-playbook_ensuring-the-presence-of-host-based-access-control-rules-in-idm-using-Ansible-playbooks}使用 Ansible playbook 确保在 IdM 中存在 HBAC 规则 {.title}
:::
本节描述了如何使用 Ansible playbook 确保在
身份管理(IdM)中存在基于主机的访问控制(HBAC)规则。
::: itemizedlist
**先决条件**
-   [ansible-freeipa](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/installing_identity_management/index#installing-the-ansible-freeipa-package_server-ansible){.link}
    软件包安装在 Ansible 控制器上。
-   您知道 IdM 管理员密码。
-   IdM 中存在您要用于 HBAC 规则的用户和用户组。详情请参阅 [使用 Ansible
    playbook
    管理用户帐户](#managing-user-accounts-using-Ansible-playbooks_configuring-and-managing-idm.html "第 12 章 使用 Ansible playbook 管理用户帐户"){.link}
    ，以及 [使用 Ansible playbook 确保 IdM
    组和组成员存在](#managing-user-groups-using-ansible-playbooks_configuring-and-managing-idm.html#ensuring-the-presence-of-IdM-groups-and-group-members-using-Ansible-playbooks_managing-user-groups-using-ansible-playbooks "使用 Ansible playbook 确保存在 IdM 组和组成员"){.link}。
-   您要应用 HBAC 规则的主机和主机组在 IdM 中存在。详情请参阅 [使用
    Ansible playbook
    管理主机](#managing-hosts-using-Ansible-playbooks_configuring-and-managing-idm.html "第 37 章 使用 Ansible playbook 管理主机"){.link}，以及
    [使用 Ansible playbook
    管理主机组](#managing-host-groups-using-Ansible-playbooks_configuring-and-managing-idm.html "第 40 章 使用 Ansible playbook 管理主机组"){.link}。
:::
::: orderedlist
**流程**
1.  创建一个清单文件，如 `inventory.file`{.literal}，并在该文件中定义
    `ipaserver`{.literal} ：
    ``` literallayout
    [ipaserver]
    server.idm.example.com
    ```
2.  创建 Ansible playbook 文件，该文件定义您要确保其存在的 HBAC
    策略。要简化此步骤，您可以复制并修改 `/usr/share/doc/ansible-freeipa/playbooks/hbacrule/ensure-hbacrule-allhosts-present.yml`{.literal}
    文件中的示例：
    ``` literallayout
    ---
    - name: Playbook to handle hbacrules
      hosts: ipaserver
      become: true
      tasks:
      # Ensure idm_user can access client.idm.example.com via the sshd service
      - ipahbacrule:
          ipaadmin_password: MySecret123
          name: login
          user: idm_user
          host: client.idm.example.com
          hbacsvc:
          - sshd
          state: present
    ```
3.  运行 playbook：
    ``` literallayout
    $ ansible-playbook -v -i path_to_inventory_directory/inventory.file path_to_playbooks_directory/ensure-new-hbacrule-present.yml
    ```
:::
::: orderedlist
**验证步骤**
1.  以管理员身份登录到 IdM Web UI。
2.  导航到 [**Policy**]{.strong} →
    [**Host-Based-Access-Control**]{.strong} → [**HBAC
    Test**]{.strong}。
3.  在 [**Who**]{.strong} 选项卡中，选择 idm_user。
4.  在 [**Accessing**]{.strong} 选项卡中，选择
    [**client.idm.example.com**]{.strong}。
5.  在 [**Via service**]{.strong} 选项卡中，选择 [**sshd**]{.strong}。
6.  在 [**Rules**]{.strong} 选项卡中，选择 [**login**]{.strong}。
7.  在 [**Run test**]{.strong} 选项卡中，单击 [**Run test**]{.strong}
    按钮。如果您看到 ACCESS GRANTED，则 HBAC 规则成功实现。
:::
::: itemizedlist
**其它资源**
-   有关使用 Ansible 配置 HBAC 服务、服务组和规则的详情，请查看
    README-hbacsvc.md、README-hbacsvcgroup.md 和 README-hbacrule.md
    Markdown 文件。这些文件位于
    `/usr/share/doc/ansible-freeipa`{.literal} 目录中。另请参阅
    `/usr/share/doc/ansible-freeipa/playbooks`{.literal}
    目录的相关子目录中的 playbook。
:::
:::
:::
[]{#cert-intro_configuring-and-managing-idm.html}
::: chapter
::: titlepage
# []{#cert-intro_configuring-and-managing-idm.html#cert-intro_configuring-and-managing-idm}第 46 章 身份管理中的公钥证书 {.title}
:::
本章描述了 X.509
公钥证书，其用于验证身份管理(IdM)中的用户、主机和服务。除了身份验证外，X.509
证书还支持数字签名和加密，来提供隐私性、完整性和不可否认性。
证书包含以下信息：
::: itemizedlist