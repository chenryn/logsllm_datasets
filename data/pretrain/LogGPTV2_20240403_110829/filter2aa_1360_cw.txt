### 32606: Advanced Data Search and Modification Techniques

#### Using `sed` to Replace Tabs with Colons
The following optional command will replace each tab with a colon, which compresses the data and makes it easier to read. The same search from the previous example now produces the text visible below the command. This is much cleaner and will make future search results easier to digest. Note that the spaces in the command are created by pressing the control, v, and tab keys at the same time. This represents a "tab" to the command. When `sed` is executed, you will not see any output or indication it is working. However, you will be prompted when complete.

```bash
sed 's/\t/:/g' filename
```

Example Output:
```
Glenda Dianne N 217218 : 08/17/1951
rg -a -F -i -N 'NW 48Th TER'
0118201303191921
S : DOROTHY
432 Chapter 28
```

#### Searching for Specific Entries
The results will include multiple entries with the following format:

```
433220353 BAZZELL
rg -a -p -i _N 6185551212 
rg -a -F -i -N 618-555-1212
Display all Gmail accounts within the voter files 
Search a specific email address within all the files
• cd -/Desktop/Databases
• rg -a -F -i -N bazzell SSDI.txt
• rg -a -F -i -N @gmail.com 
• rg -a -F -i -N PI:EMAIL
```

#### Understanding the Value of Stolen Data
Now that you understand the basics of searching and modifying data, we should discuss the true value of this technique. Until this point, we have only experimented with truly public data that is legal. The real power lies within the stolen databases that are now publicly available, which I am about to discuss. There are usually two types of people that download these databases. The first are amateur criminals that use the data to illegally obtain account access to victims' accounts by supplying the usernames and passwords from one service into another service. For example, if a criminal learns your username and password that you used on LinkedIn, he or she may try that same combination on Twitter or Gmail. We will never do this, as it is illegal and unethical.

#### Voter Registration Data
Voter registration data clearly identifies the full name, home address, gender, date of birth, date of last registration change, and party affiliation. This information is extremely useful, but all of this could have been obtained from the previously mentioned websites. Therefore, let's conduct a search for any registered voters that live on the street of our previous example. The following would be the query, providing our search in single quotes because it contains a space. Instead of specifying the file, we can leave that off and it will simply search every file in the folder.

```bash
rg -a -F -i -N 'NW 48Th TER'
```

The response contains the same type of details as seen previously but displays hundreds of people. You cannot replicate these results with a traditional manual search on the sites themselves. Furthermore, we can conduct these searches across all of our databases, which we will do later. You could replicate all of this instruction throughout the various voter registration databases available for download. Some readers may choose not to modify the files while others may sanitize them to the point of ultimate conservation of file size. Each user's collection will be unique. You might try the following search options.

#### Social Security Death Index (SSDI)
An individual previously purchased the entire Social Security Death Index (SSDI), which is public data, and uploaded it for public consumption. This entire database can be downloaded from [http://cancelthesefunerals.com](http://cancelthesefunerals.com). After downloading the multiple files, you can combine them into a single file and name it `SSDI.txt`. Assuming you placed the text file in the Databases folder, the following commands would navigate to the folder and search for anyone in the file with the last name "Bazzell".

```bash
cd /Desktop/Databases
rg -a -F -i -N bazzell SSDI.txt
```

#### Data Breaches and Leaks
If desired, you could use the Firefox extension mentioned previously to automatically download all of this data overnight into a folder on your Linux desktop titled "SpecialK". You could then execute a command through Terminal within that folder of `cat * > SpecialK.txt`. The result would be a single file, 19.73 gigabytes in size. That is very big, but also very powerful. Let's take a look at the content. Assume I was looking for a target who possessed an email address of `robynsnest2006@yahoo.com`. Assuming that I had made a single file titled `SpecialK.txt` within my Databases folder on my Linux desktop, my commands in Terminal would be as follows.

```bash
cd /Desktop/Databases
rg -a -F -i -N robynsnest2006@yahoo.com SpecialK.txt
```

The result of the search is directly after the search command.

#### Real-World Application
Real-world application: I have used this technique numerous times over the past couple of years. During one investigation, I located the LinkedIn profile of my target. I had previously found no email addresses connected to him. By looking at the source code of the LinkedIn profile, I could see his user ID. Searching that user ID within this LinkedIn data provided the personal email address used to create the account. That email address led to old passwords, which led to additional email addresses, as explained in a moment. Obtaining a confirmed personal email address can lead to numerous new investigation techniques.

#### Conclusion
We have only discussed a few databases stored within archive.org. I promise you there are many others containing sensitive details which would help greatly within your investigations. Conducting searches for any specific breached databases displayed on notification websites such as [haveibeenpwned.com/PwnedWebsites](https://haveibeenpwned.com/PwnedWebsites) should reveal interesting results. You have learned about numerous search methods throughout this book. What can you find?

For more detailed and ethical use of this data, always ensure you are adhering to legal and organizational policies.