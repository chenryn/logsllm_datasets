32606
ACT
The following optional command will replace each tab with a colon, which compresses the data and makes it 
easier to read. The same search from the previous example now produces the text visible below the command. 
This is much cleaner and will make future search results easier to digest. Note that the spaces in the command 
are created by pressing the control, v, and tab keys at the same time. This represents a "tab" to the command. 
When sed is executed, you will not see any output or indication it is working. However, you will be prompted 
when complete.
Glenda Dianne N 217218 
08/17/1951
rg -a -F -i -N 'NW 48Th TER'
0118201303191921
S
DOROTHY
432 Chapter 28
The results will include multiple entries with the following format
433220353 BAZZELL
rg -a -p -i _N 6185551212 
rg -a -F -i -N 618-555-1212
Display all Gmail accounts within the voter files 
Search a specific email address within all the files
• 
cd -/Desktop/Databases
• 
rg -a -F -i -N bazzell SSDI.txt
rg -a -F -i -N @gmail.com 
rg -a -F -i -N PI:EMAIL
should discuss the true value of this 
’ ’  1 to possess. The real 
about to discuss. There are 
criminals that use the data to
Now that you understand the basics of searching and modifying data, we 
technique. Until this point, we have only experimented with truly public data that is legal 
power lies within the stolen databases that are now publicly available which I am v 
usually two types of people that download these databases. The first are amateur 
illegally obtain account access to victims' accounts by supplying the usernames and passwords from one service 
into another service. As an example, if a criminal learns your username and password that you used on Linkedln, 
he or she may tty that same combination on Twitter or Gmail. We will never do this, as it is illegal and unethical.
They clearly identify the full name, home address, gender, date of birth, date of last registration change, and 
party* affiliation. I find this extremely useful, but all of this could have been obtained from the previously 
mentioned websites. Therefore, let's conduct a search for any registered voters that live on the street of our 
previous example. The following would be the query’, providing our search in single quotes because it contains 
a space. Instead of specifying the file, we can leave that off and it will simply search every’ file in the folder.
The response contains the same type of details as seen previously, but displays hundreds of people, ou cannot 
replicate these results with a traditional manual search on the sites themselves. Furthermore, we cou cone uct 
these searches across all of our databases, which we will do later. You could replicate all of this instruction 
throughout the various voter registration databases available for download. You might eventually’ have a singe 
file for each state, with all of the unnecessary’ content removed from within the files. Some readers may c oosc 
not to modify the files while others may’ sanitize them to the point of ultimate conservation of file size, -ac 
user's collection will be unique. You might try’ the following search options.
Hopefully, you agree that possessing your own collection of this type of data could be useful. 
jnjex
collection of publicly available data. An individual previously purchased the entire Social Security ue - 
which is public data, and uploaded it for public consumption. This entire database can e ow 
http://cancelthesefunerals.com. After downloading the multiple files, you can com inc cm 
previously into a single file and name it SSDI.txt. Assuming you placed the text file in the Databases 
following commands would navigate to the folder and search for anyone in the file wi my ast nam
this file as it was created. Let’s recap where wc are at right now. You might have single, very large, .
each include all of the reg>stered voter data for various states. These often include dates 
,
telephone numbers, addresses, and email accounts. You also have the entire SSDI You can now search*  gh 
all of that data with a simple search. If you wanted to identify any entries w.thin all of the files 
.
number of 618-555-1212, the following would be the most appropriate searches. You cou a 
social security number, date of birth, or date of death.
https://web.archive.Org/web/20151110195654/http://www.updates4news.com:80/kyledata/
Data Breaches & Leaks 433
MANHATTAN BEACH, PI:EMAIL,yahoo.com, Robyn Bazzell, 2015-04-07, 72.129.87.179, 
paydayloaneveryday.com, CA, 90266
• 
cd -/Deskxop/Databases
• 
rg -a -F -i -N PI:EMAIL SpecialK.txt
or other similar sites. This stolen data is already out there, and it can 
same techniques used against us, when researching criminals. OK, 
judgment for the rest of this chapter.
If desired, you could use the Firefox extension mentioned previously to automatically download all of this data 
overnight into a folder on your Linux desktop tided "SpecialK". You could then execute a command through 
Terminal within that folder of cat * > SpecialK. txt. The result would be a single file, 19.73 gigabytes in 
size. That is very big, but also very powerful. Let's take a look at the content. Assume 1 was looking for a target 
who possessed an email address of robynsnest2006@yahoo.com. Assuming that I had made a single file tided 
SpecialK.txt within my Databases folder on my Linux desktop, my commands in Terminal would be as follows. 
The result of the search is direcdy after the search command.
By now you may just want to know where to obtain these databases. The source websites that allow download 
of this stolen data get shut down often. However, the magic of internet archives can help us regain the data. 
Let's start with something in a grey area. There are many companies that collect millions of email addresses and 
create spam lists. These then get sold to companies selling fake pharmaceuticals or designer handbags, and those 
unwanted messages end up in your inbox. We are all on a spam list somewhere. These are very expensive to 
buy, especially the good ones. One such database is the Kyle Data, or "Special K" spam list. We used this 
example in the browser chapter when DownThemAll easily acquired all of the data. This database contains 
178,288,657 email addresses. There are no passwords, but it does contain other sensitive data. In November of 
2015, a web page at updates4news.com temporarily possessed active links to this entire data set This page is 
long gone by now. Fortunately for us, the Wayback Machine archived all of it. The following direct link displays 
hundreds of csv spreadsheets, each containing millions of email addresses.
The next exercise also involves archive.org. Specifically, data from Linkedln. This data set surfaced in 2017 and 
does not possess any passwords. It contains only Linkedln user ID numbers and the associated email addresses. 
While this type of data was included within the original 20 GB Linkedln breach, it was excluded from the popular 
password dumps that can be found online today. Since it does not contain passwords, it can be found on die 
Wayback Machine. At the time of this writing, the direct link to download the entire user ID database could be 
found at https://archive.org/details/LlLJsers.7z.
This tells me that my target lives in Manhattan Beach, CA 90266. Her name is Robyn Bazzell, and on 
04/07/2015 her marketing data was collected from the website paydayloaneveryday.com. At the time, her 
computer IP address was 72.129.87.179. We basically just converted an email address into a full dossier on our 
target. This type of data is simply not available on public websites. If you doubt the validity of this data, please 
consider searching your own content. This is only one of dozens of interesting databases stored within the 
Wayback Machine. It is up to you to exercise your skills from previous chapters to locate them all.
The second group of individuals that download this data are security researchers. Numerous private 
organizations authorize employees to collect this stolen information and use the data to make their own systems 
more secure. I personally know of many researchers who download this data, protect it from further distribution, 
and only use it in an ethical manner. This is the only acceptable use of this data. For those that still believe that 
we should not access stolen databases released to the public, consider one last argument. Tens of thousands of 
criminal hackers use this content to "dox" people every day. Doxing is the act of exposing personal information 
about a victim online. This is a very common tactic used against law enforcement officers when an event such 
as an officer-involved shooting happens. The government employees' passwords often get leaked on Pastebin 
-----------rrn-:- —-----J-*-- J----- - ------ — J :------ never be secured. We should embrace the 
enough warnings. You can use your best
• rg -a -F -i -N PI:EMAIL linkedin_users.txt
1332567, PI:EMAIL
• rg -a -F -i -N 1288635 linkedin_users.txt
1288635, PI:EMAIL
rg -a -F -i -N mikenapll5 SnapChat.txt
(’21220392XX’, mikenapllS, '*, ’’)
rg -a -F -i -N 30351923XX SnapChat.txt
434 Chapter 28
Decompress this file by right-clicking within Linux and choosing "Extract here". The text file contains the email 
addresses and user ID numbers extracted from the full Linkedln breach. It is nothing more than each email 
address used to create a specific profile ID number. The following search within Terminal would display the 
results of a target email address, and the response is directly below the command.
■ ),
We can also now search by telephone numbers. If you know your target has a cellular number of 303-519-2388, 
you could conduct the following search, with the partial result appearing after.
You now know that your target's user ID number is 1332567. This data alone is not very7 helpful. Let's consider 
another perspective. Assume you find your target's Linkedln profile page, and you want to know the email 
address used to create the account. Right-clicking on the profile allows the option to display the "Source Code" 
of the profile. Searching the term "member" within this code presents numerous occurrences of that term. The 
third or fourth from last occurrence should appear similar to "member:l288635". This tells you that the member 
ID for your target is 1288635. The following displays the email address associated with that number, with the 
results immediately below.
Real World Application: I have used this technique numerous times over the past couple of years. During one 
investigation, I located the Linkedln profile of my target. I had previously found no email addresses connected 
to him. By looking at the source code of the Linkedln profile, I could see his user ID. Searching that user ID 
within this Linkedln data provided the personal email address used to create the account. That email address 
led to old passwords, which led to additional email addresses, as explained in a moment. Obtaining a confirmed 
personal email address can lead to numerous new investigation techniques.
This identifies the cellular telephone number of our target to include 212-203-92xx. While the last two numbers 
are redacted, you could try’ all 100 combinations within the previously discussed telephone search options. It is 
a great start. You could have also conducted this query’ on websites which possess this data. However, those 
sites require an absolute username. It cannot search partial names. If we only’ knew that our target had a Snapchar 
name that included the term "topher4", this database would provide the following users of interest.
('30351923XX’, ,topher451’,
('41572499XX*, ,topher413’,
('71974140XX', ’topher456’,
('75426428XX', ,topher4811,
Let's conduct one more archive.org demonstration before moving on to credentials. In January’ 2014, Snapchat 
had 4.6 million usernames and phone numbers exposed. The breach enabled individual usernames, which are 
often used across other services, to be resolved to phone numbers. This file is titled SnapChat.7z and can be 
found at archive.org/download/SnapChat.7z. This link contains the entire breach inside one text file. 
Conducting the following search would query’ a specific Snapchat username for any’ leaked data. Directly after 
this command is the result
Credentials
site:anonfiles.com ”CompilationOfManyBreaches.7z"
Data Breaches & Leaks 435
Your target may not appear in the results, but minimal investigation could result in a powerful new lead. You 
should note that the full numbers were never publicly leaked, and the group that conducted this attack redacted 
the results to exclude the last digits.
We have only discussed a few databases stored within archive.org. I promise you there are many others 
containing sensitive details which would help greatly within your investigations. Conducting searches for any 
specific breached databases displayed on notification websites such as haveibeenpwned.com/PwnedWebsites 
should reveal interesting results. You have learned about numerous search methods throughout this book. What 
can you find?
(’30351923XX*, ’topher451’J ”, 
(' 30351923XX', ’ben_davis', 
('30351923XX', *rosemcdonald 
('30351923XX*, 'cuzzycook', 
('30351923XX', ’angelgallozzi’ 
('30351923XX', * kmo85’ , ” 
(■30351923XX*, ’rinisob*.
Now that we are dipping our toes into the waters of "stolen” data, we should consider the big breaches. You 
have likely heard about Linkedln, Dropbox, Myspace and Adobe being hacked. All of those breaches have been 
publicly released by various criminal organizations. At the time of this writing, most remaining sites which 
possessed this huge collection of stolen data had been shut down. However, the data lives on. Numerous 
"hacking" groups have collected tens of thousands of breached databases, both large and small, and combined 
them into credential lists. These lists contain only the email addresses and passwords of billions of accounts. 
They do not identify which breach each credential originated, but the data is extremely valuable for investigators. 
Before we analyze the content, we must obtain a full copy of the data. This is where things get tricky (again).
In 2021, an unknown group of credential thieves created a huge collection of 3.2 billion credentials consisting 
only of email address and password combinations. This data set was titled "Compilation Of Many Breaches", 
otherwise known as "COMB”. There have been numerous other combo lists released in previous years, such as 
Anti-Public, Exploit.in, and others. However, this set included a better search structure and ability to conduct 
queries within seconds. Some people may find that searching for "CompilationOfManyBreaches.7z" within 
Google might lead you to a copy. Others report that the following query xx’ill display the torrent file for this data.
My attorney says I cannot HOST links to any of this content, which I understand. She also says that I cannot 
display any direct links to an identifiable breach, such as Linkedln or Adobe. This would make me a target for 
a lawsuit, and seems like great advice. My only option is to "identify public resources which link to data without 
attribution of a specific originating source". In other words, I can tell you where you may find this "Combo List" 
content, but it is up to you to take action to obtain it Let's connect our VPN; understand any employer policies 
which might prevent the following actions; and tiptoe into the world of stolen credentials.
, ”),
”, ”),
”, ”),
”,
, ”),
Real World Application: In 2017,1 was provided a Snapchat username, similar to "yourdaddy3", of a suspect 
in a human trafficking investigation. A quick search revealed the first eight digits of his cellular telephone number 
which did not prove to be beneficial to various online searches. However, conducting a search for "yourdaddy" 
without the digit revealed a new partial number associated with "yourdaddyl" and "yourdaddy2", all within the 
same area code. Using the reverse caller ID APIs mentioned previously, I attempted to identify the owners of 
all 100 possible numbers. 58 of them were not registered, which left 42 valid numbers returning to individuals 
living in the area. Of those, only 19 of them were associated with males. Of those, only three fit a physical 
description of the suspect. A cooperating witness easily identified the suspect from these options. I truly believe 
in the power of this data.
This should result in
• ./query PI:EMAIL
The result should appear as follows.
PI:EMAIL:password
./query michael.bazzell
436 Chapter 28
conduct searches 
will start with it
• ./query PI:EMAIL
no hits within a few seconds. Now try the following.
Let's assume you now have a hard drive with the entire contents from COMB. The result is a 20GB compressed 
file which contains all 3.2 billion credentials. The file itself is titled "CompilationOfManyBreaches.7z". If you 
chose to download this file, it must be decompressed. I prefer a utility such as 7-zip for Linux and Windows, or 
Keka for Mac. Upon decompression, you might be prompted for a password. A Twitter post located at 
https://twitter.com/BubbaMustafa/status/1370376039583657985 claims the required archive password is 
"+w/P3PRqQQoJ6g". Once decompressed, you should see a new folder titled "CompilationOfManyBreaches" 
which is 106 GB in size.
This identifies a password "password". Notice that the first query failed because we did not include the within 
the search parameter. This tool can be fairly unforgiving and requires exact data. The following search provides 
any email address which begins with "michael.bazzell" with results which follow.
Assume you possess a folder called COMB within your external hard drive connected to your Linux VM which 
contains the data downloaded during this exercise. Opening Terminal and navigating to that folder may not be 
easy. You would need to know the exact path. Instead, open the Files application and you should see your 
external hard drive in the left menu. Click on it and select the COMB folder. Open Terminal, type cd, then 
space, then drag the COMB folder in the external storage from the Files application to Terminal. Strike enter 
and it should populate the path of the drive. Mine appeared as cd ’ /media/osint/lTBExternal/COMB'. 
You could also find the external drive within the Files application in Ubuntu, right-click, and choose "Open in 
Terminal". You should now be within your new data collection folder inside Terminal. We can conduct searches 
to start evaluating the benefit of this data. Since COMB includes a fast search option, we 
Execute the following commands within Terminal from within the "CompilationOfManyBreaches" folder.
At the time of this writing, the single result from this search possessed a torrent file which could be opened with 
a torrent software application such as Transmission. This program will download tine large file to your computer. 
This is a lot of data. It may be more content than your internal hard drive can store, and is definitely more than 
your VM is configured to handle. You may see better results by downloading it through your host, but even’ 
situation is unique. If appropriate, you may consider downloading the entire torrents to an external hard drive. 
During testing of this tutorial, I connected a 1TB external USB drive to my VM and chose it as the destination 
for the downloaded files through Transmission. This kept my VM clean and all data was available on the external 
drive. This allows use within multiple VMs or host computers. Depending on your internet connection, this 
entire download can take hours or weeks to finish. If possessing user credentials violates your security clearance 
or organizational polices, do not proceed with this download.
PI:EMAIL:password
PI:EMAIL:redactedlO
PI:EMAIL:redacted201
Note that Mac users can submit queries as bash /query michael .bazzell and obtain the same results. 
This search tool is extremely fast If you know the email address of your target, or at least the first portion of 
the address, searching through the native COMB query option is best. However, this presents limitations. You 
cannot use this tool to search a specific domain or password. For that we will once again rely on Ripgrep. The
rg -a -F -i -N PI:EMAIL
mikewilson@microsoft. com: bigbucks55
rg -a -F -i -N bigbucks55
We can also use this to query all credentials from a specific domain.
rg -a -F -i -N @altonpolice.com
One of the results is quite embarrassing, as follows. I promise I have not used that password since the late 90's.
bazzellgaltonpolice. com: mb01mb01mb
Data Breaches & Leaks 437
bigbucks551@yahoo. com: towboat@l 
bigbucks55@hotmail .co.uk: towboat@l 
bigbucks55@hotmail. com: towboat@l 
prizeunitgyahoo. com: bigbucks55 
mike. wilson5@gmail. com: BigBucks55 
mikewilsongmicrosoft. com: bigbucks55
Real World Application: The tactic of searching leaked passwords and recovering associated accounts is by far 
the most successful database leaks stratejpr that I have applied to my investigations. In 2017,1 was assisting a 
federal agency with a child pornography investigation where a suspect email address had been identified. This 
address was confirmed as being connected to the original person that had manufactured illegal videos of children 
being molested, but an alias name was used during creation. A search of this address through a breach 
compilation revealed a unique password associated with the account. Searching this password revealed only one 
additional email account, which was the personal Gmail account of the suspect (in his real name). The suspect 
used the same password for both accounts. The primary investigator made an arrest the next day after confirming 
the connection. While some will say that we should never download leaked databases that contain personal login
following queries will all assume that you have already opened Terminal and have navigated to the folder where 
your data is stored. The next search would attempt to identify a specific email address within all the files. Note 
that results were modified to protect the privacy of the individual. As a reminder, this command applies our 
parameters and identifies the target data to be searched. The result follows the command.
The results include accounts associated with our target, and some that are not. The more unique your target's 
password, the better quality of associated content you will receive. The following data was presented during my 
search. Notice the ways that data was displayed based on the search, and how any portion of the results were 
included. Since we specified our search parameters, we received results regardless of case.
We now know that at some point a password of bigbucks55 was used in conjunction with an online account 
associated with our target email address. Would this password still work with any online accounts? Possibly, but 
we will never know. Attempting to log in to an account with this information is a crime. Instead, think about 
other ways that we could use this data offline. We know our target's work email account, but we may want his 
personal account. Since many people recycle the same password across multiple accounts, let's conduct a search 
for the password.
This tells me that the last two results are very7 likely my target, since the names are similar and the passwords are 
almost identical. 1 can now assume that my target's personal email account is mike.wilson5@gmail.com. The 