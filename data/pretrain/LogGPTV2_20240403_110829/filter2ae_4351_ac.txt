    General Purpose Registers:
          rax = 0xffffff802f40ba40  kernel.development`processor_master
          rbx = 0x0000000000000000
          rcx = 0xffffff802f40ba40  kernel.development`processor_master
          rdx = 0x0000000000000000
          rdi = 0x0000000000000004
          rsi = 0xffffff7fb1483ff4
          rbp = 0xffffff817e8ccd50
          rsp = 0xffffff817e8ccd10
           r8 = 0x0000000000000000
           r9 = 0x0000000000000001
          r10 = 0x00000000000004d1
          r11 = 0x00000000000004d0
          r12 = 0x0000000000000000
          r13 = 0x4141414141414141 view->open
subviews->strings选项。这时，将出现一个新的Strings窗口，在该窗口中按Ctrl+F组合键，搜索框将出现在窗口的底部，这样就可以从中搜索Darwin了。
双击找到的字符串，将会将我们重定向到一个名为version的常量那里。现在，我们就能找到版本号了。这个常量叫做“version”，这就是我们要寻找的目标。也许您喜欢从IDA反汇编代码中复制常量的地址，但这种做法时不正确的！因为内核使用KASLR或内核地址空间布局随机化保护机制，因此，实际地址将有所不同。实际上，我们根本不需要知道地址，因为可以在调试器计算机上使用LLDB轻松地得到它。
**获取“version”常量的地址**
* * *
其实，事情很简单：按下电源按钮以触发NMI（如果您已经让该进行继续运行的话），并键入print &(version)命令即可。
    (lldb) print &(version)
    (const char (*)[101]) $8 = 0xffffff802f0f68f0
    (lldb)
AHAM！就本例来说，const char version位于地址0xffffff802f0f68f0处。所以，如果我们显示该处的字符数组的话，将会看到：
    (lldb) print version
    (const char [101]) $9 = {
      [0] = 'D'
      [1] = 'a'
      [2] = 'r'
      [3] = 'w'
      [4] = 'i'
      [5] = 'n'
      [6] = ' '
      [7] = 'K'
      [8] = 'e'
      [9] = 'r'
      [10] = 'n'
      [11] = 'e'
      [12] = 'l'
      [13] = ' '
      [14] = 'V'
      [15] = 'e'
      [16] = 'r'
      [17] = 's'
      [18] = 'i'
      [19] = 'o'
      [20] = 'n'
      [21] = ' '
      [22] = '1'
      [23] = '7'
      [24] = '.'
      [25] = '7'
      [26] = '.'
      [27] = '0'
      [28] = ':'
      [29] = ' '
      [30] = 'W'
      [31] = 'e'
      [32] = 'd'
      [33] = ' '
      [34] = 'O'
      [35] = 'c'
      [36] = 't'