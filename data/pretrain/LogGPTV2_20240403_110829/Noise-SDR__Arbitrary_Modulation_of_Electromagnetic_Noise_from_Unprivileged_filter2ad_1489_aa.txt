title:Noise-SDR: Arbitrary Modulation of Electromagnetic Noise from Unprivileged
Software and Its Impact on Emission Security
author:Giovanni Camurati and
Aur&apos;elien Francillon
7
6
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Noise-SDR: Arbitrary Modulation
of Electromagnetic Noise from Unprivileged
Software and Its Impact on Emission Security
Giovanni Camurati, Aur´elien Francillon
Software and System Security Group
EURECOM
Sophia-Antipolis, France
e-mail: PI:EMAIL
Abstract—Electronic devices generate electromagnetic noise, also
known as EM leakage when the noise leaks information. Many
recent research papers exploit the fact that software activity can
exploit this leakage to generate radio signals. This process breaks the
isolation between simple unprivileged code and the radio spectrum,
letting an attacker generate physical radio signals without accessing
any radio interface. Previous work has discovered many leakage
sources and covert communication channels, which generally use
simple modulation schemes. However, a fundamental research
question has been left unexplored: to which point can attackers shape
electromagnetic leakage into signals of their choice?
The answer to this question has an important security impact
that goes beyond specific attacks or platforms. Indeed, arbitrary
signal modulation is a useful primitive. This would allow attackers
to use advanced modulations and better exploit the channel (leakage)
capacity, for example, to establish advanced communication channels,
or to inject malicious signals into victim receivers. At a first analysis,
arbitrary modulation seems impossible: software has limited control
on the leakage and existing attacks are therefore constrained to on-off
keying or frequency-shift keying.
In this paper, we demonstrate that shaping arbitrary signals out
of electromagnetic noise is possible from unprivileged software. For
this we leverage fully-digital radio techniques and call our method
Noise-SDR because, similarly to a software-defined radio, it can
transmit a generic signal synthesized in software. We demonstrate
our approach with a practical implementation with DRAM accesses
on ARMv7-A, ARMv8-A, x86-64, and MIPS32. We evaluate it on
different types of devices, including smartphones, a laptop, a desktop,
and a Linux-based IoT device. Although power, frequency and
bandwidth are constrained by the properties of the leakage, we
present several case studies, including transmission with advanced
protocols, device tracking, and signal injection.
I. INTRODUCTION
Software often stimulates and modulates the electromagnetic
emissions of the electronic device on which it is running. From
a security point of view, this breaks the logic isolation between
unprivileged software and the physical world. An attacker able to
intentionally control this process can interact with the physical world
without having any explicit access to peripherals or communication
interfaces. This idea was first introduced in 1998 under the name of
Soft-TEMPEST [1], [2], though the authors mention earlier records
of this principle for playful applications. Soft-TEMPEST consists in
displaying a specially-crafted pattern on the screen to modulate the
video signal. The resulting leakage at the frequency of AM radio
can be easily picked with a standard handheld device. This is useful
to exfiltrate data from a compromised device, or to intentionally
add noise to the leakage from the screen to prevent eavesdropping.
Over the years, a vast literature [3]–[28] in the field of Emission
Security (EmSec) has studied how to exfiltrate data from air-gapped
networks using software-controlled emissions. There are many
different leakage sources (e.g., electromagnetic, magnetic, electrical,
optical, vibrational, acoustic, thermal), but their modulation is
challenging because:
Challenge 1: The carrier is a harmonic of a leakage
whose properties (e.g., power, frequency, phase, stability)
are generally not under control of unprivileged software.1
Challenge 2: In general, software can only cross-
modulate a binary pattern on top of the leakage (e.g.,
alternating memory accesses and inactivity to turn the
emissions on and off).
Challenge 3: Timer sources that control the software
pattern, which modulate the leakage, are not comparable
to those available to dedicated radio circuits.
Under these conditions, only simple modulation schemes such as
On-Off Keying (OOK) and Frequency Shift Keying (FSK) are easy
to implement. They are used by the majority of covert channels,
with simple custom protocols. A few exceptions explore more
advanced modulations, including multiple OOK subcarriers using
multiple threads [11], and LoRa-like Chirp Spread Spectrum (CSS)
approximated with FSK [8].
However, the ability to go beyond simple modulation schemes
(i.e., to achieve arbitrary modulation of electromagnetic noise) could
have a significant impact on emission security. Indeed, shaping
arbitrary radio signals from unprivileged software can have many
applications, from establishing advanced radio links to injecting
signals into other victim receivers. For this reason, in this paper, we
formulate and answer the following two research questions:
Question 1: Is it theoretically and practically possible
to generate arbitrary radio signals using the noise
produced by unprivileged software?
Question 2: What are the impact and applications of
arbitrary modulation on emission security?
1Using output peripherals (e.g., the speakers in [25]) is beyond our goals.
© 2022, Giovanni Camurati. Under license to IEEE.
DOI 10.1109/SP46214.2022.00018
1193
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:04 UTC from IEEE Xplore.  Restrictions apply. 
COMPARISON OF SOFTWARE-CONTROLLED ELECTROMAGNETIC AND MAGNETIC LEAKAGE
TABLE I
Name
Noise-SDR (this paper)
Soft-TEMPEST [1], [2]
AirHopper [3], [4]
USBee [5]
GSMem [6]
BitJabber [7]
EMLora [8]
AIR-FI [9]
MAGNETO [10]
ODINI [11]
Matyunin et al. [12]
Type
EM
EM
EM
EM
EM
EM
EM
EM
M
M
M
Physical layer modulation
Arbitrary (RF-PWM)
AM, FSK
FSK (A-FSK, DTMF)
FSK (B-FSK)
OOK (B-ASK)
OOK, FSK (M-FSK)
Approximated CSS
OOK
OOK, FSK (B-FSK)
OOK (ASK, OOK-OFDM
using multiple cores), FSK
OOK, FSK (‘period based’)
Protocol
Arbitrary analog or digital protocols
Custom
Custom (raw or packet)
Custom
Custom
Custom
Custom Lora-like
Custom
Custom
Custom (including FEC)
Custom
Applications
Advanced software-defined radio transmissions
Exfiltration (display to AM radio)
Exfiltration (computer screen to smartphone)
Exfiltration (USB bus to SDR)
Exfiltration (computer to mobile phone)
Exfiltration (computer to SDR)
Exfiltration (computer to SDR)
Exfiltration (computer to SDR or WiFi cards
that expose physical layer radio measurements)
Exfiltration (computer to smartphone)
Exfiltration (computer to magnetic bug)
Exfiltration (laptop to smartphone)
a) Generating arbitrary radio modulation: To provide a
positive answer to Question 1 despite the aforementioned chal-
lenges, we take an approach to modulation that is radically different
from previous work. Like previous work, we are limited to binary
modulation of the leakage (e.g., ‘on’ and ‘off’ symbols) using simple
patterns (e.g., ‘intense memory accesses’ vs. ‘inactivity’). Unlike
previous work, we do not map these symbols directly with the data
to transmit (e.g., ‘1’ → ‘on’ vs. ‘0’ → ‘off’). Instead, we add two
layers of abstraction that bridge the gap with arbitrary modulation:
Abstraction 1: Using a software-defined approach, the
application data to transmit is mapped to the baseband
signal of a given radio protocol.
Abstraction 2: Using a fully-digital radio approach,
the generic multi-bit baseband signal is upconverted to
intermediate frequency and approximated with a binary
sequence (that can be easily modulated on the leakage
in a conventional way).
Thanks to Abstraction 1, attackers can easily implement, or
reuse existing, generic radio protocols, from the upper layers to
the physical layer. Thanks to Abstraction 2, attackers can control
the amplitude, frequency, and phase of a band-pass signal at an
intermediate frequency of their choice. Like in a superheterodyne
transmitter, this signal is modulated on a leakage at radio frequency.
We call this method Noise-SDR, as it uses a software-defined
fully-digital approach to shape arbitrary radio signals out of noise
from unprivileged software. The fully-digital method that is best
suited for this context is Radio-Frequency Pulse-Width Modulation
(RF-PWM) [29]–[33].
We demonstrate that Noise-SDR is a generic and practical
implementations on modern ARM
technique with practical
smartphones, IoT devices, Laptop and Desktop computers. We start
with controlling DRAM accesses as an electromagnetic leakage
source, because they have been proven to be effective [7], [8].
However, any leakage source that can be controlled by software
in a binary way can be used.
Although considerably more flexible than classic leakage-based
transmitters, Noise-SDR has some hardware constraints. Indeed,
the time resolution at which the leakage can be switched on and
off affects the resolution, intermediate frequency and bandwidth
of the radio signal (e.g, tens of kHz on ARMv7-A and a few MHz
on ARMv8-A). In addition, like classic leakage-based transmitters,
the frequency range is limited to the harmonics of the leakage
(e.g., all the multiples of an 800 MHz DRAM clock). However,
in modern devices the leakage frequencies are high and might
overlap with other radio protocols [3], [6], [9]. It is natural that
leakage-based transmitters have more limitations than dedicated
radio hardware. However, by implementing the physical layer in