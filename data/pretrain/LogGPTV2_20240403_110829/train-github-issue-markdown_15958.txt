### Elasticsearch Configuration and Issue Description

**Elasticsearch Version:** 2.3.5 (using [Docker Hub](https://hub.docker.com/_/elasticsearch/))

**Installed Plugins:**
- head
- license
- cloud-aws
- marvel-agent (marvel is disabled on tribe and master-only nodes)

**JVM Version:** Refer to [Docker Hub](https://hub.docker.com/_/elasticsearch/)

**OS Version:** Refer to [Docker Hub](https://hub.docker.com/_/elasticsearch/)

**Problem Description:**

I am attempting to configure a tribe node to connect to multiple remote clusters, with the understanding that not all clusters may be available at any given time. The configuration uses service discovery and DNS because the IP addresses are dynamic. 

**Expected Behavior:**
- Elasticsearch should continue retrying at a backoff interval and serve requests for the clusters it can successfully connect to.
- If a cluster is not yet up or if DNS fails to resolve a remote entry, Elasticsearch should not exit but instead handle the failure gracefully.

**Actual Behavior:**
- If a cluster is not available at startup or if DNS resolution fails, Elasticsearch exits with an exception.

**Steps to Reproduce:**

1. Configure the tribe nodes with DNS entries, including at least one unknown host at startup:
   ```plaintext
   -Des.node.master=false
   -Des.marvel.enabled=false
   -Des.tribe.dc1.cluster.name=dc1-elasticsearch
   -Des.tribe.dc1.discovery.zen.ping.unicast.hosts=master-elasticsearch-dc1
   -Des.tribe.dc2.cluster.name=dc2-elasticsearch
   -Des.tribe.dc2.discovery.zen.ping.unicast.hosts=master-elasticsearch-dc2
   ```

2. Start Elasticsearch. The process will exit with the following exception:

**Exception Log:**

```plaintext
Exception in thread "main" java.lang.IllegalArgumentException: Failed to resolve address for [master-elasticsearch-dc2]
Likely root cause: java.net.UnknownHostException: master-elasticsearch-dc2: unknown error
    at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
    at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:928)
    at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1323)
    at java.net.InetAddress.getAllByName0(InetAddress.java:1276)
    at java.net.InetAddress.getAllByName(InetAddress.java:1192)
    at java.net.InetAddress.getAllByName(InetAddress.java:1126)
    at org.elasticsearch.transport.netty.NettyTransport.parse(NettyTransport.java:733)
    at org.elasticsearch.transport.netty.NettyTransport.addressesFromString(NettyTransport.java:685)
    at org.elasticsearch.transport.TransportService.addressesFromString(TransportService.java:424)
    at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.<init>(UnicastZenPing.java:160)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
    at org.elasticsearch.node.Node.<init>(Node.java:213)
    at org.elasticsearch.tribe.TribeClientNode.<init>(TribeClientNode.java:35)
    at org.elasticsearch.tribe.TribeService.<init>(TribeService.java:146)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
    at org.elasticsearch.node.Node.<init>(Node.java:213)
    at org.elasticsearch.node.Node.<init>(Node.java:140)
    at org.elasticsearch.node.NodeBuilder.build(NodeBuilder.java:143)
    at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:178)
    at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:270)
    at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35)
```

**Additional Notes:**
- This behavior also needs to be robust in the case of an extended WAN outage.
- It is expected that Elasticsearch should handle such failures gracefully and continue to serve requests for the available clusters.