Total number of apps in all ﬁrmwares
Average number of apps per ﬁrmware
Average size of a ﬁrmware
Android Version (≥4.0)
Phone Models (e.g., Samsung Galaxy S4)
Number
250
24,009
96.04
274.7MB
210
101
Table 1: Summary Statistics of 250 Firmwares
4. SECURITY EVALUATION OF
PRE-INSTALLED APPLICATIONS
In this section, we brieﬂy introduce how to pre-install and
extract applications in the Android ﬁrmware, then we show
our analysis methodologies and experiment results for An-
droid pre-installed applications.
4.1
Introduction to Pre-installation
There are two methods to pre-install the applications in
the Android ﬁrmware: One is putting the apk ﬁles to the
“/system/app” folder or “/data/app” folder of the ﬁrmware.
Then the system will pre-install these applications when it
launches. The advantage of using this method is that the ap-
plications in the “/system/app” folder (not the “/data/app
folder) can gain the system privilege. The drawback of this
approach is that the applications cannot execute normally
if it contains any native libraries i.e., libraries which are
written in C/C++, such as foo.so. Because the Android
system does not extract the native libraries for applications
in the “/system/app” folder, the applications cannot ﬁnd the
related native libraries when it executes.
The other way is using the “pm install” command to
create a pre-install script and add the trigger script to the
“init.rd” ﬁle in the “boot.img” ﬁle. After that, the sys-
tem will trigger the pre-install shell script the ﬁrst time it
Figure 2: Architecture of DroidRay
launches. The advantage of using this method is it uses the
normal installation process, so the application which con-
tains native libraries can execute normally. The drawback
is the pre-installed applications cannot obtain the system
privilege.
build their released Android applications because everyone
can obtain these key pairs from the AOSP. Therefore, it is in
danger that an application with “SharedUserId” attribute is
signed by the AOSP keys.
In order to detect application signature vulnerability, DroidRay
In order to analyze the pre-installed applications, we need
to extract all the apk ﬁles from the Android ﬁrmware. In
DroidRay, our system uses both static and dynamic ap-
proaches to extract apk ﬁles. Since an apk ﬁle is in fact a zip
ﬁle which includes AndroidManifest.xml and classes.dex
ﬁle. The static approach of extracting apk ﬁles is to uncom-
press the Android ﬁrmware and extract all the ﬁles which has
the zip magic number and contains AndroidManifest.xml
ﬁle. The dynamic approach of extracting apk ﬁles is to ﬂash
Android ﬁrmware into the device and then use “pm list
packages” and “pm path” command to obtain all the paths
of these apk ﬁles in the device, and then use “adb pull” to
extract all the apk ﬁles.
4.2 Application Signature Vulnerability Detec-
tion
In Android, application signature is very important for se-
curity and privacy. The Android system requires all installed
applications be digitally signed with a certiﬁcate and the pri-
vate key should be held by the application’s developer. The
Android system uses the certiﬁcate as a mean of identifying
the author of an application and establishing trust relation-
ships between applications. Note that if two applications
have the same package name and same signature, they can
replace each other due to the application update mechanism.
In addition, if two applications are signed by the same cer-
tiﬁcation and claim the same “SharedUserId” attribute in
their AndroidManifest.xml ﬁles, they will share the same
union permission set. Furthermore, with the same uid, they
will have the permission to access each other’s data. There-
fore, if two applications have the same certiﬁcate but one of
them is a malware, this implies the malware has penetrated
into the system.
AOSP (Android Open source Project) comes with four
signature key pairs in the “build/target/product/securi-
ty/” folder. The platform key is used to sign core parts of
the system. The shared key is used to sign home and con-
tacts part of AOSP. The media key is used to sign media and
download framework parts of AOSP. The test key is used to
sign everything else. These signature key pairs are for the
developers to build test Android ﬁrmwares. The signature
information can be found in Table 2. The ﬁrst column shows
the MD5 value of the signature after signed. The second col-
umn shows the description of the signature. Because all of
these four key pairs are created by the Android team, they
have the same description. The last column shows the sig-
nature of ﬁle names. It is important for us to point out that
developers should not use these default AOSP key pairs to
ﬁrst extracts the “SharedUserId” attribute from the An-
droidManifest.xml ﬁle and the signature information from
the RSA ﬁle of the application. Then DroidRay puts all of
the information into the database and compares with the
default signatures of AOSP. Note that we did not count the
applications which share the same uid (as known as “an-
droid.uid.system”) with the system platform. The reason
is that these applications belong to the platform applications
with the system level privilege, so we classify them as a part
of system signature vulnerability. We will discuss this form
of security analysis in Section 5.
Among 24,009 apps in 250 Android ﬁrmwares we ana-
lyzed, we discover that 5,712 apps have the “SharedUserId”
attribute in their AndroidManifest.xml ﬁles. Moreover,
1,947 (34%) applications are signed by the default AOSP key
pairs. Table 3 shows how many shared uid applications are
signed by which key pairs (because of the page limit, the full
list can be found at https://www.dropbox.com/s/f7c5de
4s55o2rk9/AppSign.zip). This is quite alarming since mal-
ware writers can easily sign their malware with the default
AOSP key pairs, and the malware can gain extra permissions
and modify other applications’ data if they have the same
shared uid. For example, we discover that all the ﬁrmwares
released by Cyanogenmod [22] have several vulnerable ap-
plications.
In particular, com.android.providers.media,
com.android.providers.drm and com.android.providers.
downloads are signed by the default AOSP media key and
they all have a same shared uid, “android.media”. Also,
com.android.contacts, com.android.providers.contacts,
com.android.providers.applications and com.android.
providers.userdictionary are signed by the default AOSP
shared key and they all have a same shared uid, “android.uid.
shared”. Therefore, if the malware is signed by the default
AOSP key (media or shared key) and claims the same shared
uid (“android.media” or “android.uid.shared”), it can ac-
cess all the data and get permissions (e.g., READ_CONTACTS,
WRITE_CONTACTS, WRITE_SETTINGS and ACCESS_DRM) from vul-
nerable applications.
4.3 Malware Detection
DroidRay ﬁrst uses anti-virus software (e.g. VirusTo-
tal [11]) to scan all apks and ﬁlter out the “known” and com-
mon malware. For the remaining applications, DroidRay
only retains the applications which have dangerous permis-
sions (e.g., sending SMS message) or silent installation be-
havior. For the applications with dangerous permissions,
DroidRay uses permission-to-api map table [1] to ﬁnd the
code section which uses the related API of dangerous per-
MD5 of Signature
Signature Description
8ddb342f2da5408402d7568af21e29f9
e89b158e4bcf988ebd09eb83f5378e87
1900bbfba756edd3419022576f3814ff
5dc8201f7db1ba4b9c8fc44146c5bcc2
EMAIL=PI:EMAIL,CN=Android,OU=Android,
O=Android,L=Mountain View,ST=California,C=US
EMAIL=PI:EMAIL,CN=Android,OU=Android,
O=Android,L=Mountain View,ST=California,C=US
EMAIL=PI:EMAIL,CN=Android,OU=Android,
O=Android,L=Mountain View,ST=California,C=US
EMAIL=PI:EMAIL,CN=Android,OU=Android,
O=Android,L=Mountain View,ST=California,C=US
Signature Type
platform
testkey
media
shared
MD5 of Signature
Signature Description
Table 2: Default Signature Information
cde9f6208d672b54b1dacc0b7029f5eb
8ddb342f2da5408402d7568af21e29f9
5dc8201f7db1ba4b9c8fc44146c5bcc2
1900bbfba756edd3419022576f3814ff
4a441695cb20427d284e7ded135925ad
f11fdf766b78025bf4035cb1b7ad483c
2eed75e85b154fb0c1013ecd16115c84
e89b158e4bcf988ebd09eb83f5378e87
d087e72912fba064cafa78dc34aea839
ea75f0b73ee288cd683b7a11716b9f77
f31d93c0e9064bafa39cbe653360e6ba
701478a1e3b4b7e3978ea69469410f13
CN=Android,OU=Android,O=Google Inc.,L=Mountain View,ST=California,C=US
emailAddress=PI:EMAIL,CN=Android,OU=Android,O=Android,L=Mountain
View,ST=California,C=US
emailAddress=PI:EMAIL,CN=Android,OU=Android,O=Android,L=Mountain
View,ST=California,C=US
emailAddress=PI:EMAIL,CN=Android,OU=Android,O=Android,L=Mountain
View,ST=California,C=US
emailAddress=PI:EMAIL,CN=Android,OU=Android,O=Android,L=Taoyuan,ST=Taoyuan,C=TW
emailAddress=PI:EMAIL,CN=Samsung Cert,OU=DMC,O=Samsung Corpora-
tion,ST=South Korea,C=KR
CN=Tencent,OU=Tencent,O=Tencent,L=Beijing,ST=Beijing,C=CN
emailAddress=PI:EMAIL,CN=Android,OU=Android,O=Android,L=Mountain
View,ST=California,C=US
emailAddress=PI:EMAIL,CN=Samsung Cert,OU=DMC,O=Samsung Corpora-
tion,ST=South Korea,C=KR
emailAddress=PI:EMAIL,CN=Android,OU=Android,O=Android,L=Taoyuan,ST=Taoyuan,C=TW
emailAddress=PI:EMAIL,CN=Samsung Cert,OU=DMC,O=Samsung Corpora-
tion,ST=South Korea,C=KR
emailAddress=PI:EMAIL,CN=MIUI,OU=MIUI,O=Xiaomi,L=Beijing,ST=Beijing,C=CN
# of
App
767
673
518
503
268
263
255
253
241
159
128
115
Table 3: App Signature Information
missions and then check whether it has malicious behavior
or not. On the other hand, in order to ﬁnd those applica-
tions with silent installation behavior, DroidRay disassem-
bles each application and uses two silent installation code
patterns to search the assemble code. One code pattern we
used is using the hidden installation API, android.content.
pm.PackageManager.installPackage(), to install the apk
ﬁle. The other code pattern we used is Runtime.exec()
which is to execute “pm install” command to install the
apk ﬁle. After determining the code section, we continue to
check whether it contains malicious behavior or not.
Among the 250 Android ﬁrmwares we analyzed, we dis-
covered that 19 ﬁrmwares contain malware. This means
about 7.6% Android ﬁrmwares contain pre-installed mal-
ware. Again, this is quite alarming since many low-cost
manufactures use public ﬁrmwares for their products. We
provide more detailed information of these 19 ﬁrmwares in
Table 4.
• We discover that 19 ﬁrmwares contain the same An-
droid malware which is known as “Agent”. This is a
premium SMS trojan.
In addition, it has a special
permission, android.permission.INSTALL_PACKAGES,
as compared with other Android malware. Usually,
a normal Android application cannot be installed in
the smartphone if it has the android.permission.
INSTALL_PACKAGES permission, because this is a privi-
lege permission only reserved for system applications.
However, pre-installed applications are diﬀerent. Be-
cause they are stored in the “/system/app/” folder,
these apps belong to the system applications. There-
fore they possess the android.permission.INSTALL_
PACKAGES permission. Once the malware has this per-
mission, it can install other Android applications into
the smartphone without notifying the user that a new
application is being installed.
• We discover “JSmsHider”, which is a premium SMS tro-
jan that uses the HTTP protocol to receive and execute
the command from some botnet masters.
• We discover “Stesec”, which is a SMS trojan which
makes phone calls to long-distance numbers or sends
SMS premium rate phone numbers without the phone
owner’s knowledge.
• We discover “Hippo”, which is another premium SMS
trojan that can cause additional phone charges by send-
ing SMS messages to some hard-coded premium-rated
numbers in the mobile application.
• One malware family we want to emphasize is the “CE-
Plugnew”. In our security analysis, we discover that it
uses various encryption techniques to bypass the anti-
virus detection and hide in the ﬁrmwares. To gain a
deeper understanding on this malware family and its
business chain, we carried out a detailed study of this
new malware family. Results and discussion will be
presented in Section 6.
5. SECURITY EVALUATION OF
THE SYSTEM
In this section, we discuss how we perform system security
detection. The process can be divided into three aspects: (1)
system signature vulnerability detection, (2) network security
vulnerability detection, and (3) privilege escalation vulnera-
bility detection.
MD5 of Firmware Image
Size
OS
Phone Model
(MB) Version
# of Malware Path
Apps
3643C59163D102616BF547A465837C44
5B7E06BCE9920E82CB0A8CBC0302BC7E
5BFE256A10BDB9A44BA7F7AF78DDD3AC
6B20E70C4AD84B1EE5F840E920E718EB
76099C37D57AC1A5659B7B312155733C
8BA7722157471E31946D500BDAAA7998
959A7ADC6F1A8AC4D8D266C4AB3EDD9E
979DAF30377A1D85CD19F1CE71A7A5DC
99DD205A5E6D2045CE3D57D157278FBF
A364CF949574DAEF8C30072F45504432
BC3B5944A758A8B7734C152E096C80A6
BE541971F46F5BCE0EDC0A397B608FF9
BEC16CFCB0C5FBE9E6F8D402D88BDB8B
D3ECD1333E7F46CE3E028CEA1CB3F224
E9F033CD8C694A5BD56C7AE94A425C97
F4DF6D64A4F856CA1B53B400A33C55F4
F62C11C7827BBA0374DB69B276910266