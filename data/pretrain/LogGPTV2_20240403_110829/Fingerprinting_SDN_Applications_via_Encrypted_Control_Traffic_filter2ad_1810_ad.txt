cantly improve when the split length exceeds 150.
According to the above results, we conclude that an adver-
sary can well ﬁngerprint SDN applications with more than
150 encrypted control packets.
Effectiveness with Different Number of Applications. We
explore how the effectiveness of ﬁngerprinting an applica-
tion changes with different number of applications running
on controllers. We train and test CNN models for ﬁnger-
printing ARP Proxy with ﬁve datasets 2. The ﬁve datasets
contain control trafﬁc of at most 6, 7, 8, 9, and 10 SDN ap-
plications, respectively. As shown in Figure 9, the accuracy,
recall rate, and precision slightly decrease with the number
of applications. When the number of applications increases
from six to ten, the accuracy drops by 1.9%, the recall rate
drops by 1.8%, and the precision drops by 2.0%. The results
demonstrate that the effectiveness of ﬁngerprinting applica-
tions is not signiﬁcantly affected by the number of applica-
tions. Our main conclusion here is that deep learning based
classiﬁers are capable of extracting stable patterns of control
2We also test the effectiveness of ﬁngerprinting other applications with
different number of applications. The results are similar to those in Figure 9.
For simplicity and due to space constraints, we do not present the results.
 80 85 90 95 100 50 100 150 200 250Accuracy (%)Split Length (packets)Topology DiscoveryLearning SwitchARP ProxyTraffic MonitorLink Delay Monitor 80 85 90 95 100 50 100 150 200 250Accuracy (%)Split Length (packets)TopoGuardLoad BalancerDoS DetectionAnonymous Comm  Scan Detection 80 85 90 95 100 50 100 150 200 250Recall (%)Split Length (packets)Topology DiscoveryLearning SwitchARP ProxyTraffic MonitorLink Delay Monitor 80 85 90 95 100 50 100 150 200 250Recall (%)Split Length (packets)TopoGuardLoad BalancerDoS DetectionAnonymous Comm  Scan DetectionUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 509(a) Precision of First Five Apps.
(b) Precision of Last Five Apps.
Figure 8: Precision of Fingerprinting SDN Applications with Different Split Lengths.
6 Discussion
In this section, we discuss the limitations of our current work
and possible countermeasures to mitigate the attack.
6.1 Limitations
Model Effectiveness on Trafﬁc and Settings Changes.
Our experiments contain more than 10,000 real network
ﬂows to train the deep learning models. Results show that
enough training data makes the models generalize well for
different ﬂows containing different numbers and sizes of
packets. However, since deep learning models learn pat-
terns from data, they cannot classify unseen patterns that
training data does not contain. Thus, if network trafﬁc or
setting of applications changes signiﬁcantly, the classiﬁca-
tion accuracy for ﬁngerprinting certain applications may de-
crease unless we provide more diverse data to train mod-
els. According to our analysis, among the tested ten applica-
tions, the accuracy of ﬁngerprinting four applications, i.e.,
Topology Discovery, Traffic Monitor, Link Delay
Monitor, and Anonymous Communication, is sensitive to
settings changes but not to trafﬁc changes since they hardly
generate network events based on network trafﬁc. For ﬁn-
gerprinting the other six applications, the accuracy may de-
crease when either network trafﬁc or settings signiﬁcantly
change if there lacks enough training data to cover the
changed patterns.
Classifying SDN Applications with Control Trafﬁc of
Multiple Switches. Our threat model currently assumes that
an adversary eavesdrops control trafﬁc between one SDN
controller and one switch, which is common in practice. Al-
though we demonstrate many applications can be identiﬁed
with control trafﬁc by deep learning models, we admit a few
applications cannot be well classiﬁed without further infor-
mation from control trafﬁc between the controller and other
switches. It is because a few applications perform similar
Figure 9: Effectiveness of Fingerprinting an SDN Applica-
tion with Different Number of Applications.
trafﬁc, which allows an adversary to ﬁngerprint SDN appli-
cations with a high success rate.
5.3 Performance
We evaluate the runtime for building a classiﬁer to ﬁnger-
print an SDN application. As the runtime of classiﬁers with
different applications changes slightly (less than 1% differ-
ences), we list the average runtime for different applications
in Table 4. CNN runs fastest among the three models with
2.4 min runtime since it has fewer learnable parameters and
most computations in CNN happen in parallel. LSTM per-
forms the slowest due to its recurrent structure where the sub-
sequent processing steps depend on the previous ones.
Table 4: Runtime of Different DNN Models
DNN Models
Average Runtime
Loss
SDAE
6.9 min
0.179
LSTM
350.1 min
0.192
CNN
2.4 min
0.125
 80 85 90 95 100 50 100 150 200 250Precision (%)Split Length (packets)Topology DiscoveryLearning SwitchARP ProxyTraffic MonitorLink Delay Monitor 80 85 90 95 100 50 100 150 200 250Precision (%)Split Length (packets)TopoGuardLoad BalancerDoS DetectionAnonymous Comm  Scan Detection 90 92 94 96 98 100 6 7 8 9 10Percentage (%)# of ApplicationsAccuracyRecallPrecision510          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationbehaviors on one local switch but have different behaviors
on multiple switches. Therefore, if we assume a stronger
threat model, i.e., an adversary can eavesdrop control trafﬁc
of multiple switches, more applications may be classiﬁed.
We elaborate this with an example. Considering the
two SDN applications: Learning Switch and Reactive
Routing. Any of them running on controllers receives a
PACKET IN message to analyze a new ﬂow and then installs
a ﬂow rule into the ingress switch with a FLOW MOD mes-
sage. The PACKET IN messages are same between the two
applications for same ﬂows and the FLOW MOD messages be-
tween them can also be same if the two applications set same
match ﬁelds and actions in the ﬂow rules. Thus, the patterns
of control trafﬁc for the two applications are same in all as-
pects, such as packet lengths, relative orders of packets, di-
rections of packets, etc. An adversary cannot classify which
application running on the controller only with control traf-
ﬁc between the controller and the ingress switch. However,
Reactive Routing paves a routing path for a ﬂow in many
switches, i.e., installing multiple FLOW MOD messages into
each switch along the path once receiving a PACKET IN mes-
sage from the ingress switch. Instead, Learning Switch
performs per-hop forwarding, i.e., receiving a PACKET IN
message from each switch and installing a FLOW MOD mes-
sage into each corresponding switch. The patterns of the two
applications are different from the view of multiple switches.
Thus, it is possible for an adversary to classify the two ap-
plications by analyzing control trafﬁc from many switches.
However, how to effectively leverage the context between
control trafﬁc of multiple switches to ﬁngerprint SDN appli-
cations is challengeable. We leave it as future work.
Fingerprinting SDN Applications that generate little con-
trol trafﬁc. Although most applications running on con-
trollers continuously generate much control trafﬁc, a few
applications only generate little control trafﬁc at some time
when network administrators actively change the policy of
the applications. For example, REST Firewall [9] in the
Floodlight controller generates no control messages most of
the time. However, if a network administrator updates net-
work security policies by commanding the application with
REST API, the application will install ﬂow rules with speci-
ﬁed match ﬁelds and actions into switches to enable new se-
curity policies. The control trafﬁc of the application is little
most of the time, which is difﬁcult for deep learning models
to train effective classiﬁers to identify the application. More-
over, the patterns of control trafﬁc highly depend on how
a network administrator command the application, which is
extremely mutable. Deep learning models may not extract
universal patterns to generalize well to identify the applica-
tion. One possible but ineffective solution is to manually
summarize useful patterns with enough SDN background
knowledge to identify them. Our future work will focus on
how to efﬁciently solve the problem.
6.2 Possible Countermeasures
Reducing Differences for Control Trafﬁc. To the best of
our knowledge, there are no public SDN defense systems
that can mitigate our attack. However, as an adversary ﬁn-
gerprints SDN applications mainly based on different pat-
terns of control trafﬁc, one straightforward mitigation is to
reduce the difference between control trafﬁc of various ap-
plications. As we mentioned in Section 3.2, the main differ-
ence exists in the packet lengths, the packet directions, the
relative orders of packets, and the number of packets. Thus,
we may encapsulate control messages to normalize them. To
normalize the packet lengths, both controllers and switches
can reshape different packets by splitting one big packet into
several packets or adding padding in small packets so that
the packet lengths are equal. Since different packets cannot
be identiﬁed without knowing their real lengths, the relative
orders of packets are also hided. Moreover, to eliminate the
differences in the packet directions and the number of pack-
ets, controllers and switches can morph packets into ﬁxed
bursts, i.e., breaking each trafﬁc pattern into small bursts of
packets consisting of a ﬁxed number of consecutive outgoing
packets followed by a ﬁxed number of consecutive incom-
ing packets. By normalizing control packets, deep learning
models may thus identify SDN applications with a low ac-
curacy. However, one main disadvantage is that it requires
many modiﬁcations in switches, controllers, and the Open-
Flow protocol. Applying the countermeasure in real SDN
environments may take a long time and bring some costs.
Adding Adversarial Examples. Another interesting de-
fense strategy worthy of being further studied is to mislead
deep neural networks by deliberately generating adversarial
examples. They are specially crafted instances with small
and intentional feature perturbations to fool deep learning
models into false classiﬁcations or predictions. Previous
studies [40,65] have demonstrated that adversarial examples
can successfully fool deep learning for computer vision and
pattern recognition. We may explore how an SDN applica-
tion can generate adversarial examples of control packets to
mislead ﬁngerprinting SDN applications. For example, ARP
Proxy may periodically generate control packets that simu-
late the patterns of another application, such as Learning
Switch, to mislead the classiﬁcation of deep learning mod-
els. It may effectively decrease the accuracy of ﬁngerprinting
SDN applications. This defense requires to modify the SDN
applications.
7 Related Work
Fingerprinting and Probing in SDN. There are many pre-
vious studies on ﬁngerprinting and probing information in
SDN. Shin et al. [52] designed a scanning tool to remotely
ﬁngerprint networks that deploy SDN by measuring response
delays of probing packets. Kl¨oti et al. [32] provided a prob-
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 511ing technique to ﬁngerprint aggregated ﬂow rules by tim-
ing TCP setup. Cui et al. [21] demonstrated that an adver-
sary can acquire knowledge on which ﬂow rules installed
on switches by analyzing the packet-pair dispersion of data
packets. Achleitner et al. [12] presented SDNMap to recon-
struct the detailed composition of ﬂow rules by actively send-
ing probing packets with different network protocols. Liu et
al. [39] developed a Markov model to infer if a target ﬂow oc-
curred recently by sending optimized probing packets, in the
face of rule expiration and eviction. John et al. [57] presented
a sophisticated attack to infer host communication patterns,
network access control and network monitoring policies by
timing processing delays of controllers. Azzouni et al. [14]
ﬁngerprinted SDN controllers by timing timeouts of ﬂow
rules as well as processing time of controllers. Although the
above studies effectively probe many types of information
in SDN, none of them show how to ﬁngerprint SDN appli-
cations with control trafﬁc. Our work reveals a new attack
vector in SDN.
Security Research in SDN. Recently, many SDN security
issues have been studied. They cover attacks and security
enhancements in all layers of SDN. In the application layer,
studies focus on cross-app poisoning [58], malicious appli-
cations abusing [36], and secure system for permission con-
trol of SDN applications [46, 63]. A wide range of stud-
ies focus on the control layer security. Various attacks are
presented, including ﬂooding controllers [53, 60], disrupt-
ing control channels [18], attacking information misman-
agement in SDN-datastores [23], poisoning network typolo-
gies [27] and identiﬁers of network stack [30], generating
harmful race conditions in controllers [66], and subverting
SDN controllers [48]. Extensive security enhancement sys-
tems [22, 30, 51, 56, 60] are designed to mitigate the attacks.
Other studies present attacks on data plane, such as low-rate
ﬂow table overﬂow [19], attacking SDN switches with con-
trol plane reﬂection [69], and security policies violation [45].
To fortify SDN data plane, intrusion detection and abnormal
data plane diagnose systems [38, 50] are provided. More-
over, automatic vulnerability discovery and security assess-
ment tools [29, 35] are designed to understand the possible
attack surface of SDN. In contrast to existing work, we show
a new threat to SDN and existing defense systems cannot
defend it.
Encrypted Network Trafﬁc Analysis. Analyzing encrypted
network trafﬁc to infer possible information based on packet
sizes, timing and other side channel leaks has been exten-
sively studied. Li et al. [37] ﬁngerprinted personas from
WI-FI trafﬁc by analyzing meta-data information on inter-
actions through HTTPS connections with machine learn-
ing. Chen et al. [20] showed detailed sensitive informa-
tion can be leaked out from encrypted network trafﬁc of
web applications. Wright et al. [64] designed an attack
to identify the phrases spoken within a call by analyzing
lengths of encrypted VoIP packets. Zhang et al. [70] pro-
vided HoMonit to monitor smart home applications from en-
crypted wireless trafﬁc. Moreover, a series of previous stud-
ies [25, 43, 44, 47, 54, 55, 62] focuses on website ﬁngerprint-
ing with the onion router (Tor) that preserves anonymity for
Internet users. They reveal which website Tor users are vis-
iting by analyzing Tor trafﬁc with machine learning. How-
ever, all these studies make a single page assumption, i.e.,
the collected trafﬁc always belongs to a single page from a
website and contains no mixed trafﬁc from other pages. One
study [67] relaxes the assumption and provides a multi-tab
website ﬁngerprinting attack on partially mixed trafﬁc.
It
provides a split algorithm to extract a small initial chunk of
packets of the ﬁrst page, which is not overlapped with the
packets of the following pages. Different from these studies,
we concentrate on ﬁngerprinting what applications run on
SDN controllers via encrypted control trafﬁc. Particularly,
control packets of different SDN applications are mixed in a
single TCP connection. Since all applications concurrently
send control messages to switches, control packets are tightly
coupled and totally mixed and thus can not be split using the
algorithm in the study [67]. We provide novel techniques
to accurately and efﬁciently ﬁngerprint all applications from
mixed control trafﬁc.
8 Conclusion
In this paper, we present a new attack on SDN that ﬁnger-
prints SDN applications with low-level and encrypted con-
trol trafﬁc.
It exploits different patterns of control trafﬁc
caused by different behaviors of applications to infer what
applications run on SDN controllers. In order to characterize
the underlying patterns, we transform network packets into
the time series and apply deep learning to automatically learn
the patterns to ﬁngerprint SDN applications. We divide the
task of ﬁngerprinting multiple SDN applications into several
subtasks to improve the efﬁciency of training deep learning
models. We collect massive traces of control trafﬁc from a
real SDN testbed. Extensive experiments demonstrate that
an adversary can effectively ﬁngerprint SDN applications
with a high accuracy.
Acknowledgments
The research is partly supported by the National Natu-
ral Science Foundation of China under Grant 61625203,
61832013, 61572278, and U1736209, ONR grants N00014-
16-1-3214, N00014-18-2893, and ARO grant W911NF-17-
1-0447. Mingwei Xu and Qi Li are corresponding authors.
References
[1] ARP Proxy.
https://github.com/mbredel/
floodlight-proxyarp/. [Online].
512          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association[2] CAIDA Passive Monitor: Chicago B.
http:
//www.caida.org/data/passive/trace_stats/
chicago-B/2015/?monitor=20150219-130000.
UTC. [Online].
[14] Abdelhadi Azzouni, Othmen Braham, Thi Mai Trang
Nguyen, Guy Pujolle, and Raouf Boutaba. Fingerprint-
ing openﬂow controllers: The ﬁrst step to attack an sdn
control plane. In IEEE GLOBECOM’16 (2016).
[3] Learning
Switch.
https://github.com/
floodlight/floodlight/tree/master/src/
main/java/net/floodlightcontroller/
learningswitch/. [Online].
[4] Load
Balancer.
https://github.com/
floodlight/floodlight/blob/master/src/
main/java/net/floodlightcontroller/
loadbalancer/. [Online].
[5] Microsoft Azure and Software Deﬁned Network-
https://docs.microsoft.com/en-us/
ing.
windows-server/networking/sdn/azure_and_
sdn/. [Online].
[6] Network Trafﬁc Monitor.
https://github.
com/floodlight/floodlight/blob/master/
src/main/java/net/floodlightcontroller/
statistics/. [Online].
[7] NGMN - 5G White Paper.
5g-white-paper/5g-white-paper.html.
line].
https://ngmn.org/
[On-