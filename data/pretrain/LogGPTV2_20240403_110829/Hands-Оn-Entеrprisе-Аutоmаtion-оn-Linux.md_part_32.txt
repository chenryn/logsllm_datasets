2. Which Ansible module is used to locate files based on given criteria, such as age?
3. Why is it important to monitor for configuration drift?
4. What are two ways in which you can monitor a text-based configuration file for
changes in Ansible?
5. How would you manage a systemd service on a remote server using Ansible?
6. What is the name of the built-in filtering within Ansible that can help process
string output (for example, to split a comma-separated list)?
7. How would you split a comma-separated list in an Ansible variable?
8. When operating in a load-balanced environment, why would you not want all
tasks performed on all the servers in one go?
9. Which Ansible feature can prevent you from rolling out a failed task to all
servers?
[ 346 ]
Performing Routine Maintenance with Ansible Chapter 12
Further reading
For an in-depth understanding of Ansible, please refer to Mastering Ansible,
Third Edition—James Freeman and Jesse Keating (https:/​/​www.​packtpub.​com/​gb/
virtualization-​and-​cloud/​mastering-​ansible-​third-​edition)
[ 347 ]
4
Section 4: Securing Your Linux
Servers
In this section, we go hands-on with security benchmarks and cover practical examples of
how to apply, enforce, and audit them in the Enterprise.
This section comprises the following chapters:
Chapter 13, Using CIS Benchmarks
Chapter 14, CIS Hardening with Ansible
Chapter 15, Auditing Security Policy with OpenSCAP
Chapter 16, Tips and Tricks
13
Using CIS Benchmarks
When implementing Linux in the Enterprise, security is paramount. There is no one step
that can be taken to achieve the nirvana of a truly secure environment—rather, the approach
is an amalgamation of disparate steps that come together to build an environment that is as
safe and secure as it can be. Indeed, this statement brings us to another important
point—security is a moving target. As just one example, SSLv2 was considered to be secure
and was used to secure websites across the internet for many years. Then came the
DROWN attack in 2016, which rendered it insecure. Thus, a server secured for internet
traffic (perhaps a frontend web server) in 2015 would have, at the time, been considered
secure. However, in 2017, it would have been considered highly vulnerable.
Linux itself has always been considered a secure operating system, though its high and
increasing levels of adoption has seen attacks on the rise. Throughout this book, we have
advocated, at a high level, good security practices in the design of your Linux estate, for
example, not installing unnecessary services on your base operating system image.
Nonetheless, there is much more we can do to make our Linux environment more secure
and, in this chapter, we will explore the ways in which standards have been developed to
ensure the security of Linux environments. Specifically, we will consider the use of the CIS
Benchmarks, along with some practical examples of how to apply them.
Specifically, the following topics will be covered in this chapter:
Understanding CIS Benchmarks
Applying security policy wisely
Scripted deployment of server hardening
Using CIS Benchmarks Chapter 13
Technical requirements
This chapter includes examples based on the following technologies:
CentOS 7.6
Ansible 2.8
To run through these examples, you will need access to two servers or virtual machines
running the operating system listed previously, along with Ansible. Note that the examples
given in this chapter may be destructive in nature (for example, they delete files and make
changes to server configuration) and, if run as shown, are only intended to be run in an
isolated test environment.
Once you are satisfied that you have a safe environment to operate in, let's get started with
routine system maintenance with Ansible.
All example code discussed in this chapter is available from GitHub at the following
URL: https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Enterprise-​Automation-​on-
Linux/​tree/​master/​chapter13.
Understanding CIS Benchmarks
Before we delve into what a CIS Benchmark actually consists of, let's take a look at why
they exist and, conceptually, what they are.
What is a CIS Benchmark?
Securing servers, regardless of their operating system, is a big task. It requires being
constantly up to date with new attack vectors and vulnerabilities as they are discovered
(see the mention of the DROWN attack and SSLv2 in the introduction to this chapter). Some
things are well-known and considered normal. For example, on Linux, it is generally
frowned upon to ever log in as root—instead, it is almost universally recognized that each
individual user should have their own user account and should perform all commands
requiring elevated permissions using the sudo command. Thus, some Linux distributions
such as Ubuntu come with remote root access disabled by default. Others, such as CentOS,
do not. Even between these two key distributions commonly found in the enterprise, you
know that, for one, you need to actively turn off remote root SSH access and, for the other,
you just need to check that it is turned off.
[ 350 ]
Using CIS Benchmarks Chapter 13
Of course, defining a security policy goes far deeper than whether root access is allowed
over SSH. Over the years, individuals build up a wealth of knowledge about what works
and, perhaps by learning the hard way, what doesn't. However, the security of your
environment should not be defined by how experienced your system administrators are.
Rather, there should be some defined standard for how to best secure a server to prevent
most of the common attacks, and also to ensure that a suitable level of information is
logged in the case that an audit is ever required to find the root cause of an event.
This is where the concept of the CIS Benchmark comes in. Many people are familiar with
the concept of a benchmark as a performance test (that is, speed). However, whether your
server is secure or not is something that can be tested by looking for certain criteria, and
thus the CIS Benchmark exists. Quoting directly from the Community for Internet Security
(CIS for short) website:
"CIS Benchmarks are developed through a unique consensus-based process comprised of
cybersecurity professionals and subject matter experts around the world."
Thus, these benchmarks can be considered an amalgamation of best practices from industry
professionals. Further, they are regularly updated and so can be used by engineers and
administrators to keep abreast of best practices when it comes to securing a server.
It should, of course, be noted that there are other security standards out there that go to
even greater depths than the CIS Benchmark, for example, FedRAMP and NSA security
requirements. It would be impossible to go into detail of all the different profiles available
within this book, and so we will focus on the CIS Benchmark, which is freely available (in
exchange for some personal information) and is also well regarded.
That this book focuses on the CIS Benchmarks should not be taken as an
implicit statement that you should implement these on your server estate
in order for it to be secure. It is the duty of each and every reader to
ensure they understand their own security requirements and to
implement the correct ones accordingly. In this chapter, we work through
the use of CIS Benchmarks as a worked example of server hardening to a
given standard.
Also of note is that the CIS Benchmarks are divided by technology. For example, there is a
CIS Benchmark for both Red Hat Enterprise Linux 7 and Ubuntu Server, which you can
apply to your Enterprise Linux estate. However, these focus on securing the base operating
system, and if you install an application layer on top of it, then you must apply the
appropriate security policy for that as well.
[ 351 ]
Using CIS Benchmarks Chapter 13
There are CIS Benchmarks for more than 140 technologies, including common Linux
services such as nginx, Apache, and PostgreSQL. Thus, if you are building an internet-
facing web server, it would make sense to apply both the operating system benchmark and
then the appropriate one for the chosen web server.
If you have a bespoke application layer, or indeed are simply using a technology not listed
on the CIS website, do not despair—secure the underlying operating system using the
appropriate benchmark and then apply security practices in the best way you can. Often,
there is good advice on the internet, but figuring this out is beyond the scope of this book.
A full list of the technologies for which there are CIS Benchmarks can be found
here: https:/​/​www.​cisecurity.​org/​cis-​benchmarks/​.
Once you have obtained the security benchmark for your chosen operating system, it is
time to consider the application of it. Before we get this far, though, in the next section of
this chapter, we will explore in greater detail the contents of a CIS Benchmark for the Linux
operating system.
Exploring CIS Benchmarks in detail
Let's take a practical example to explore CIS Benchmarks in greater detail by looking at the
one for RHEL 7. At the time of writing, this is on release version 2.2.0 and consists of 386
pages! Thus, immediately we can see that implementing this benchmark is unlikely to be a
trivial activity.
As you explore the document, you will find that the section of most interest to us—the
Recommendations section—is divided into subsections. Each of these focuses on a specific
area of security within the operating system. At the time of writing, section 1 is all about the
initial setup of the operating system; parameters and configuration likely to be applied at
build time. Section 2 is all about securing common services that might be installed by
default on a RHEL 7 server. Section 3 deals with network configuration, while section 4 goes
into detail on your logging and audit logging setup to ensure you are capturing the
requisite amount of data during daily use. This is to ensure you can audit your servers and
find out what happened if you are unfortunate enough to suffer a breach or an outage.
Section 5 considers access to your server and authentication (this is where you will find SSH
server security mentioned—in fact, you will see that our example of disabling remote root
logins is benchmark 5.2.8 in version 2.2.0 of the document). Finally, section 6 is entitled
System Maintenance and is intended to be run not once, but regularly, to ensure the integrity
of the system.
[ 352 ]
Using CIS Benchmarks Chapter 13
Of course, we have discussed previously in this book that it is possible for anyone with root
privileges to change core system configuration, and thus it is recommended that all of the
benchmarks be run (or at least checked) on a regular basis to ensure compliance with the
original policy.
We will explore this across the next two chapters of this book; however, for now, let's
return to furthering our understanding of the CIS Benchmark itself. As you look into each
recommendation, you will notice that each has a level associated with it and is either Scored
or Not Scored (this is stated in the title of each benchmark).
Each of these benchmarks are intended to contribute to a final report or scoring of a system
as part of a compliance check—and recommendations that are scored quite literally
contribute to the final score. Thus, if your system meets the check, then the final score is
increased—however, if it is not met, the final score is decreased. Those marked as Not
Scored have no bearing on the final score at all. In other words, you are not marked down
for failing to implement them.
This, of course, does not mean they are any less important to consider. By way of example,
let's consider benchmark 3.7 of the version 2.2.0 RHEL 7 benchmark, which is
entitled Ensure wireless interfaces are disabled. The rationale between each benchmark is given
in the details of the benchmark, and this one states the following:
"If wireless is not to be used, wireless devices can be disabled to reduce the potential attack
surface."
This is a logical approach—we know that if your device has a wireless interface, it should
be disabled unless it is in use. In addition, wireless security protocols have been historically
broken, just as SSLv2 was, and thus, in the long term, wireless network communication
might not be considered to be truly secure. Nonetheless, on a corporate laptop running
RHEL 7, you cannot guarantee that it will be connected to a wired network connection.
Wireless networking might be the only option and, in this instance, you would need to
leave it turned on.
Of course, the CIS Benchmark cannot make this decision for you—only you can know
whether your system needs to have its wireless network adapters enabled (if present), and
so it is reasonable that this is a non-scorable item.
By contrast, our old friend benchmark 5.2.8 (disabling remote root SSH access) is scored as
there should be no rational reason for enabling this in an enterprise environment. Thus, we
would expect our system to be scored down if this benchmark could not be met.
[ 353 ]
Using CIS Benchmarks Chapter 13
Each benchmark has details on how to test for the presence of the condition or
configuration mentioned, along with the details on how to apply the desired configuration.
In addition to these details, you will also note that each benchmark has a level associated
with it that can be either 1 or 2. In each case, for RHEL 7, you will see that these levels are
applied to two different scenarios—the use of RHEL 7 as a server and as a workstation.
Again, this makes sense when we delve into the meaning of these levels.
Level 1 is intended to be a sensible security baseline for you to apply to your environment
to reduce the attack surface. It is not intended to have an extensive impact on the day-to-
day business usage of your Linux environment, and so level 1 benchmarks are the less
intrusive ones to implement.
By contrast, level 2 benchmarks are offered to provide a much more rigorous level of
security, and are highly likely to have an impact on the day-to-day usage of your
environment.
If we look again at benchmark 3.7, we will see that it is categorized as level 1 for servers
and level 2 for workstations. This makes sense—a server is unlikely to have a wireless
network adapter, and even less likely to be using it, even if present, thus disabling it has
little or no impact on the day-to-day usage of the server. However, a RHEL 7 laptop would
become a lot less portable if benchmark 3.7 was implemented on it, and so the level 2
categorization warns us of this. Imagine having a laptop and not being able to use it on a
wireless network—this is a concept that, to many, is unfeasible in this day and age!
Benchmark 5.2.8 is considered level 1 for both server and workstation because it is already
considered good practice not to use the root account for day-to-day operations—thus,
disabling access to it over SSH should not have any impact on a day-to-day basis.
In an ideal world, you should read and understand all benchmarks before you apply them
in case they have an impact on your way of doing things—for example, I still come across
systems that make use of the root account over SSH for scripted operations, and while my
first task is normally to rectify this, if I were to blindly apply the CIS Benchmark to these
systems, I would break an otherwise working setup.
However, accepting that anyone who manages an Enterprise Linux environment is
incredibly busy, you could be forgiven for thinking that you could just apply the scored
level 1 benchmarks to your systems. Indeed, this would give you a reasonable security
baseline while incurring a relatively low risk—yet there is no substitute for being thorough.
In the next section of this chapter, we will look in greater detail at how to wisely select
benchmarks without causing issues in your environment!
[ 354 ]
Using CIS Benchmarks Chapter 13
Applying security policy wisely
As we had begun to explore in the previous section, each CIS Benchmark has a level and
scoring associated with it. The level is of particular concern to us as, while we wish to
secure our systems as effectively as possible, we would not wish to break any running
systems. For this reason, it is highly advisable to apply the benchmarks in an isolated test
environment and test your applications before deploying them to a production
environment. Indeed, if the application of a benchmark breaks a given system, the
following process should be executed in the enterprise to resolve it:
1. Establish which benchmark caused the issue.
2. Determine which internal systems were affected by the benchmark.
3. Decide whether the internal systems can be changed to work with the
benchmarks (for example, use an unprivileged account over SSH rather than
root).
4. Implement the changes to the internal systems and apply the benchmark
universally or (only if there is a good reason to) make an exception for that
benchmark and record it.
The CIS Benchmarks could even break your Ansible automation—the
simplest example being that you are using the root account to perform
your automation tasks over, and you disable this as part of your CIS
Benchmark deployment. In this instance, you would find Ansible locked
out of all of your systems and, in the worst case, you would have to
manually modify each server to reinstate Ansible access.
Although we can't go through the benchmarks one by one in this chapter, in the following
subsections, we will explore some of the relevant examples to look out for. It is hoped this
will give you enough information to review the benchmark for your chosen version of
Linux, and then make informed decisions on what security policies are in the best interests
of your environment.
We will continue with our example of using the RHEL 7 benchmark version 2.2.0.
However, most of what we describe here will be applicable to other Linux platforms too.
Configuration file paths and even log file paths might vary, but these will be detailed in the
relevant CIS Benchmark for your operating system, so be sure to download the benchmark
that is most relevant to you.
Now that we have considered the overall principles of security policy application, we will
dive into some specific examples, starting with the SELinux policy in the next section.
[ 355 ]
Using CIS Benchmarks Chapter 13
Applying the SELinux security policy
Section 1.6.1 of the RHEL 7 benchmark concerns the implementation of SELinux and
consists of checks to ensure SELinux is in enforcing mode rather than disabled at some
level. You will note that these checks are all level 2 benchmarks, meaning they could break
existing systems.
Enabling and applying SELinux is a very good idea on operating systems that support it,
yet even at the time of writing there are many Linux applications that do not work with it
and whose installation instructions state that SELinux must be disabled for the application
to function. This, of course, is not ideal and instead you should create an SELinux policy
that allows your application stack to work without the need to disable it.
Not all enterprises will have the skill set of time to allow this to be completed, though, and
so some careful consideration needs to be given to this set of benchmarks—in short, it
should be applied if at all possible, but exceptions may be required.
If you are working with Ubuntu, the same logic should be applied to AppArmor, which is
enabled by default on Ubuntu Server.
In the next section of this chapter, we will take a look at how the CIS Benchmarks affect the
way filesystems are mounted on Linux.
Mounting of filesystems
All filesystems in Linux must be mounted before they can be used—this is quite simply the
mapping of block devices such as a partition on a disk to a path. To most users, this is
transparent and happens at boot time, but to those responsible for configuring systems, it
needs some attention. For example, the /tmp filesystem is usually writable to all users, and
so it is desirable to not let people execute files from this directory as they could put any
arbitrary binary in there to be run by themselves or someone else. Thus, this filesystem is
often mounted with the noexec flag to achieve exactly this.
Changing mount options for partitions (and indeed partition structure)
can be problematic on machines that have already been deployed. In
addition, many cloud platforms feature a flat filesystem structure and, as
such, the preceding example of /tmp may not be achievable as it cannot be
mounted separately from the root partition. As a result, I recommend
that you factor this part of the CIS Benchmark into your server (or image)
build process and create exclusions for public cloud platforms where
required.
[ 356 ]
Using CIS Benchmarks Chapter 13
The benchmarks in section 1.1 of the CIS Benchmark (entitled Filesystem Configuration)
concern exactly these kinds of details and, again, these will need to be tailored to your
environment. For example, benchmark 1.1.1.8 recommends disabling the ability to mount
FAT filesystems, and section 1.1.5 recommends disabling binary execution on /tmp, as
discussed previously. These are both scored benchmarks and, at the time of writing, there
should be little need to use or mount FAT volumes or execute files from /tmp. However, in