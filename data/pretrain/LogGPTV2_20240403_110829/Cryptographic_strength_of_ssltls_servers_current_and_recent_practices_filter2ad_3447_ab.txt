NLANR Web Caching Project [2]. This resulted in a list of
19,429 SSL servers that we probed with PSST. The PSST
software used OpenSSL version 0.9.7b and the Linux oper-
ating system version 2.4.24.
Our tests were conducted on February 2005, August 2005,
June 2006, and November 2006 from Columbia University
in New York City. All our numbers are from the November
2006 test, up to Section 4.7, where we consider the other re-
sults in a longitudinal discussion. We discounted any servers
that did not respond in all four surveys to keep the data
comparable. There were also a handful of IP addresses that
provided inconsistent data on SSL/TLS support which are
excluded from our analysis. We speculate that these sites use
network load balancers (i.e., L4/L7 switches) to distribute
traﬃc across multiple servers with diﬀerent SSL conﬁgura-
tions.
Interestingly, even though our tool could be perceived to
be an attack, and we made no eﬀort to conceal our identity,
we received no complaints or requests to desist. This testiﬁes
to the level of hostile traﬃc that now pervades the Internet;
our probes were considered noise in comparison.
4. RESULTS
In this section we present our results in detail.
4.1 SSL/TLS Protocol Versions
SSL Type Number Percentage
85.37 %
SSL 2.0
97.92 %
SSL 3.0
TLS1
98.36 %
16587
19025
19111
Table 1: Overall SSL/TLS Support
We ﬁrst examine the distribution of the diﬀerent versions
of SSL/TLS supported by the sampled servers. This is
shown in Table 1. Most servers support all three versions
(while the support of SSL2 should arguably be dropped,
given its serious security problems outlined in Section 2).
Moreover, a small percentage support only SSL 2.0, despite
the known problems. The data from Table 1 is broken out
in more detail in Table 2, showing that surprising permu-
tations (in fact, all possible permutations) of the available
support exist. It seems particularly odd that 0.87 percent of
SSL 2.0
Yes
No
Yes
No
Yes
No
Yes
SSL 3.0 TLS Number Percentage
0.12 %
0.75 %
0.76 %
1.09 %
0.87 %
12.79 %
83.62 %
24
146
148
211
169
2485
16246
No
No
No
Yes
Yes
Yes
Yes
No
Yes
Yes
No
No
Yes
Yes
Table 2: Breakdown of SSL/TLS Support
servers support SSL 2.0 and TLS, yet do not support SSL
3.0.
4.2 Key Exchange and Authentication
SSL uses two common protocols for key exchange and two
common protocols for authentication, used in the following
three combinations. One is to use the Ephemeral Diﬃe-
Hellman (EDH) key exchange algorithm with the Digital
Signature Standard (DSS) for authentication. Another is to
use the EDH key exchange algorithm with RSA for authen-
tication. The other popular option is to use RSA for both
key exchange and authentication.
The security of the EDH key exchange algorithm is equiva-
lent to the intractability of the Decision Diﬃe-Hellman prob-
lem, which is in turn based on (though not known to be
equivalent to) the intractability of the discrete logarithm
problem. RSA security is equivalent to the intractability of
the RSA problem [39], which is in turn based on (though
not known to be equivalent to) the intractability of factor-
ing. While solving the discrete logarithm problem will solve
the factoring problem, this has no bearing on the relative
security of the EDH or RSA key exchange algorithms. Both
problems have been subject to intense scrutiny, and are as-
sumed to be hard for now. Based on the best attacks known,
equal key sizes for EDH, DSS, and RSA give comparable lev-
els of security [47].
KeyEx + Auth Number Percentage
EDH + DSS
0.02 %
57.57 %
EDH + RSA
RSA + RSA
99.86 %
4
11185
19401
Table 3: Key Exchange & Authentication Support
Table 3 shows how these algorithms are used in practice.
We see that the RSA key exchange is supported by the vast
majority of servers, while the EDH key exchange algorithm
is supported by slightly more than half the servers. We can
also see that RSA has become the de facto standard for
authentication, with only a few servers supporting DSS. It
is interesting to note that the 3 of the 4 servers that support
DSS use DSS exclusively.
4.3 Key Size
We next turn our attention to the size of the keys used
for authentication. The current industry standard is to use
1024-bit key sizes for RSA keys. Note that a 512-bit key
was factored in 1999, and that this key size is now consid-
ered unsafe [41]. The 1024-bit key size provides comparable
strength to an 80-bit symmetric key, and the National In-
stitute of Standards and Technology (NIST) suggests that
the 80-bit security level is appropriate for protecting data
through the year 2015 [32]. They also suggest that the 112-
bit level is appropriate through the year 2035. RSA Labora-
tories makes a similar recommendation [23, 40]. Speciﬁcally,
RSA Laboratories currently recommends key sizes of 1024
bits for corporate use, and 2048 bits for extremely valuable
keys such as the root key pair used by a certifying authority.
They expect that the 80-bit level (corresponding to 1024-
bit RSA keys) should be suﬃcient at least until 2010, and
that extremely sensitive information should be encrypted at
the 112-bit level (corresponding to 2048-bit RSA key size),
which should protect data at least until 2030. Finally, we
note that in recent NESSIE recommendations, a minimum of
1536 bits is suggested for RSA signature keys [11], though,
according to RSA Laboratories [23], 2048 bits is a better
choice.
Key Size Number Percentage
3.94 %
1.42 %
88.35 %
0.01 %
6.14 %
0.19 %
765
275
17166
1
1192
36
512
768
1024
1280
2048
4096
Table 4: Public Key Size Support
Table 4 presents the distribution of public key sizes sup-
ported by the servers we probed (all but 7 of which only
support one size). We can see that over 5 percent of the
servers only support weak key lengths that are not consid-
ered secure. We note that several odd key sizes appear, such
as 1280, and 1568 in previous runs (as shown in Table 18 of
Section 4.7), although these are relatively rare.
Until December of 1998, US export laws banned the over-
seas sales of US software using encryption with keys over
512 bits. This may explain the fact that we still see some
servers supporting weak 512-bit key sizes. However, since
all but 7 of the servers only support one key size, and thus
the servers that support 512-bit keys also tend to have a
maximum key size of 512 bits.
4.4 Hash Functions
Cryptographic hash functions are vital for the security
of SSL/TLS. For a hash function H, given an input x the
output H(x) should be easy to compute, but given H(x),
ﬁnding an inverse should be computationally infeasible to
compute. Also, given x and H(x), it should be computa-
tionally infeasible to compute a y such that H(y) = H(x).
Such hash functions are said to be weakly collision free. If it
is computationally infeasible to ﬁnd any such pair x, y with
H(x) = H(y) (as opposed to ﬁnding a collision for a particu-
lar x), then the hash function is said to be strongly collision
free.
The two most widely used hash functions are MD5 [38]
and SHA-1 [30]. MD5 was created by Rivest, and has been
attacked repeatedly over the years [13, 16, 17]. The fatal
blow came in a work-in-progress session at the Crypto 2004
conference, where Wang announced that there existed a fam-
ily of collisions in MD5 [45]. Even before this announcement,
NIST recommended that only SHA-1 (whose output is 160
bits) and the related SHA-256, SHA-384, and SHA-512 al-
gorithms be used. Then in February 2005, Wang, Yin, and
Yu announced that they were able to signiﬁcantly reduce
the search space for SHA-1 [46]. Fortunately, SSL 3.0 and
TLS use both SHA-1 and MD5 in a redundant fashion for
its authentication. They may use MD5 or SHA-1 alone in
negotiated cipher suites, but then they are used within the
HMAC construction. Since the HMAC construction works
by nesting two applications of the hash function with two
diﬀerent keys, breaking it would require ﬁnding two related
collisions. Thus, the announced attacks cannot be directly
applied to HMAC at this stage. On the other hand, SSL
2.0 only uses MD5 without HMAC or SHA-1, and is thus
very vulnerable as MD5 is still considered to be much weaker
than SHA-1.
MAC
MD5
SHA-1
Number Percentage
98.83 %
99.47 %
19201
19326
Table 5: Symmetric Key MAC Support
Table 5 shows the MAC algorithm support discovered by
PSST. Most servers we surveyed supported both. While
some of the servers that only supported MD5 did so because
they only ran SSL 2.0, there were 79 sites that used SSL 3.0
and TLS that still only supported MD5 cipher suites. This
brings the total number of servers supporting only MD5 to
103.
4.5 Symmetric Encryption
Symmetric encryption is the backbone of secure commu-
nication. Once secret keys have been established, the trans-
mitted data is encrypted using a symmetric encryption al-
gorithm. In this section, we examine both the algorithms
employed and the key sizes used.
Cipher Number Percentage
57.17 %
AES
98.66 %
DES
92.29 %
RC2
RC4
99.03 %
11107
19168
17931
19241
Table 6: Symmetric Key Cipher Support
Table 6 presents an overview of the symmetric key cipher
support in the servers we examined (here, the DES category
includes 3-DES). As can be seen, nearly all the servers we
surveyed support DES, RC2, and RC4. RC4 appears to
be the most frequently supported cipher. The Advanced
Encryption Standard (AES), which is a fairly new cipher,
is already supported by over 57 percent of the servers. We
now look at each cipher in more detail.
The Data Encryption Standard [29], invented by IBM at
the request of the National Bureau of Standards, has been in
use since 1976. DES uses 56-bit keys and has some peculiar-
ities that make it undesirable, but in particular, its short key
length has made it vulnerable to brute-force attacks. When
the US export laws were in eﬀect, the export key length was
artiﬁcially reduced to 40 bits, making DES even less secure.
Table 7 shows the DES usage in detail. While the old
US export regulations no longer apply, almost 67 percent of
the servers surveyed still support these weak keys, and most
Cipher
DES-40
DES-56
DES-64
3-DES
Number Percentage
66.55 %
62.29 %
93.48 %
97.50 %
12930
12102
18162
18943
Table 7: DES Support
Cipher
DES-40
DES-56
DES-64
3-DES
Number Percentage
0.13 %
0.18 %
0.85 %
97.50 %
25
35
165
18943
Table 8: Maximum DES Key Strength
servers support DES-64, which is only slightly stronger. For-
tunately, fewer than 2 percent of the servers support these
weak keys exclusively, as can be seen in Table 8, showing the
maximum DES key strengths supported by the servers. For