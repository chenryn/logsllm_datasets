### NLANR Web Caching Project

The NLANR Web Caching Project [2] provided a list of 19,429 SSL servers that we probed using PSST. The PSST software utilized OpenSSL version 0.9.7b and the Linux operating system version 2.4.24.

Our tests were conducted in February 2005, August 2005, June 2006, and November 2006 from Columbia University in New York City. All the data presented up to Section 4.7 is from the November 2006 test. We excluded any servers that did not respond in all four surveys to ensure data comparability. Additionally, a few IP addresses that provided inconsistent SSL/TLS support data were also excluded from our analysis. We speculate that these sites use network load balancers (L4/L7 switches) to distribute traffic across multiple servers with different SSL configurations.

Interestingly, despite the potential for our tool to be perceived as an attack and our lack of effort to conceal our identity, we received no complaints or requests to desist. This suggests the high level of hostile traffic on the Internet, where our probes were considered minor noise.

### 4. Results

In this section, we present our detailed findings.

#### 4.1 SSL/TLS Protocol Versions

| SSL Type | Number | Percentage |
|----------|--------|------------|
| SSL 2.0  | 16,587 | 85.37%     |
| SSL 3.0  | 19,025 | 97.92%     |
| TLS 1.0  | 19,111 | 98.36%     |

**Table 1: Overall SSL/TLS Support**

We first examined the distribution of different SSL/TLS versions supported by the sampled servers, as shown in Table 1. Most servers support all three versions, although SSL 2.0 should arguably be deprecated due to its serious security issues (as outlined in Section 2). A small percentage of servers still support only SSL 2.0, despite known vulnerabilities. Table 2 provides a more detailed breakdown, revealing all possible permutations of SSL/TLS support. Notably, 0.87% of servers support SSL 2.0 and TLS but not SSL 3.0.

| SSL 2.0 | SSL 3.0 | TLS 1.0 | Number | Percentage |
|---------|---------|---------|--------|------------|
| Yes     | No      | No      | 24     | 0.12%      |
| No      | Yes     | No      | 146    | 0.75%      |
| No      | No      | Yes     | 148    | 0.76%      |
| Yes     | Yes     | No      | 211    | 1.09%      |
| Yes     | No      | Yes     | 169    | 0.87%      |
| No      | Yes     | Yes     | 2,485  | 12.79%     |
| Yes     | Yes     | Yes     | 16,246 | 83.62%     |

**Table 2: Breakdown of SSL/TLS Support**

#### 4.2 Key Exchange and Authentication

SSL uses two common protocols for key exchange and two for authentication, combined in the following ways:
- Ephemeral Diffie-Hellman (EDH) key exchange with Digital Signature Standard (DSS) for authentication.
- EDH key exchange with RSA for authentication.
- RSA for both key exchange and authentication.

The security of the EDH key exchange algorithm is equivalent to the intractability of the Decision Diffie-Hellman problem, which is based on the discrete logarithm problem. RSA security is equivalent to the intractability of the RSA problem [39], which is based on the difficulty of factoring. While solving the discrete logarithm problem can solve the factoring problem, this does not affect the relative security of EDH or RSA key exchange algorithms. Both problems are assumed to be hard, and equal key sizes for EDH, DSS, and RSA provide comparable security levels [47].

| Key Exchange + Authentication | Number | Percentage |
|-------------------------------|--------|------------|
| EDH + DSS                     | 4      | 0.02%      |
| EDH + RSA                     | 11,185 | 57.57%     |
| RSA + RSA                     | 19,401 | 99.86%     |

**Table 3: Key Exchange & Authentication Support**

Table 3 shows the practical usage of these algorithms. RSA key exchange is supported by the vast majority of servers, while the EDH key exchange algorithm is supported by slightly more than half. RSA has become the de facto standard for authentication, with only a few servers supporting DSS. Interestingly, three out of the four servers that support DSS use it exclusively.

#### 4.3 Key Size

The current industry standard for RSA keys is 1024-bit. A 512-bit key was factored in 1999 and is now considered unsafe [41]. A 1024-bit key provides strength comparable to an 80-bit symmetric key, and the National Institute of Standards and Technology (NIST) recommends this level of security through 2015 [32]. They also suggest that the 112-bit level is appropriate through 2035. RSA Laboratories recommends 1024-bit keys for corporate use and 2048-bit keys for extremely valuable keys, such as those used by certifying authorities [23, 40]. They expect 1024-bit keys to be sufficient until at least 2010, and 2048-bit keys to protect data until at least 2030. Recent NESSIE recommendations suggest a minimum of 1536 bits for RSA signature keys [11], though RSA Laboratories [23] recommends 2048 bits.

| Key Size (bits) | Number | Percentage |
|-----------------|--------|------------|
| 512             | 765    | 3.94%      |
| 768             | 275    | 1.42%      |
| 1024            | 17,166 | 88.35%     |
| 1280            | 1      | 0.01%      |
| 2048            | 1,192  | 6.14%      |
| 4096            | 36     | 0.19%      |

**Table 4: Public Key Size Support**

Table 4 presents the distribution of public key sizes supported by the servers we probed (all but 7 of which support only one size). Over 5% of the servers support weak key lengths that are not considered secure. We note that some unusual key sizes, such as 1280 and 1568, appear in previous runs (as shown in Table 18 of Section 4.7), though they are relatively rare.

Until December 1998, US export laws banned the overseas sales of US software using encryption with keys over 512 bits. This may explain why some servers still support 512-bit keys. However, since all but 7 of the servers support only one key size, those that support 512-bit keys also tend to have a maximum key size of 512 bits.

#### 4.4 Hash Functions

Cryptographic hash functions are crucial for the security of SSL/TLS. A hash function \( H \) should be easy to compute for an input \( x \) to produce \( H(x) \), but finding an inverse given \( H(x) \) should be computationally infeasible. Additionally, given \( x \) and \( H(x) \), it should be infeasible to compute a \( y \) such that \( H(y) = H(x) \). Such hash functions are said to be weakly collision-free. If it is infeasible to find any pair \( x, y \) with \( H(x) = H(y) \), the hash function is strongly collision-free.

The two most widely used hash functions are MD5 [38] and SHA-1 [30]. MD5, created by Rivest, has been repeatedly attacked [13, 16, 17]. The fatal blow came at the Crypto 2004 conference, where Wang announced the existence of a family of collisions in MD5 [45]. Even before this, NIST recommended using only SHA-1 (160-bit output) and related SHA-256, SHA-384, and SHA-512 algorithms. In February 2005, Wang, Yin, and Yu significantly reduced the search space for SHA-1 [46]. Fortunately, SSL 3.0 and TLS use both SHA-1 and MD5 redundantly for authentication. They may use MD5 or SHA-1 alone in negotiated cipher suites, but then they are used within the HMAC construction, which requires finding two related collisions. Thus, the announced attacks cannot be directly applied to HMAC. On the other hand, SSL 2.0 uses only MD5 without HMAC or SHA-1, making it very vulnerable as MD5 is much weaker than SHA-1.

| MAC Algorithm | Number | Percentage |
|---------------|--------|------------|
| MD5           | 19,201 | 98.83%     |
| SHA-1         | 19,326 | 99.47%     |

**Table 5: Symmetric Key MAC Support**

Table 5 shows the MAC algorithm support discovered by PSST. Most servers support both. Some servers that only support MD5 do so because they only run SSL 2.0, but there are 79 sites that use SSL 3.0 and TLS that still only support MD5 cipher suites. This brings the total number of servers supporting only MD5 to 103.

#### 4.5 Symmetric Encryption

Symmetric encryption is the backbone of secure communication. Once secret keys are established, transmitted data is encrypted using a symmetric encryption algorithm. In this section, we examine the algorithms employed and the key sizes used.

| Cipher | Number | Percentage |
|--------|--------|------------|
| AES    | 11,107 | 57.17%     |
| DES    | 19,168 | 98.66%     |
| RC2    | 17,931 | 92.29%     |
| RC4    | 19,241 | 99.03%     |

**Table 6: Symmetric Key Cipher Support**

Table 6 presents an overview of the symmetric key cipher support in the servers we examined (the DES category includes 3-DES). Nearly all servers support DES, RC2, and RC4, with RC4 being the most frequently supported cipher. The Advanced Encryption Standard (AES), a relatively new cipher, is already supported by over 57% of the servers.

The Data Encryption Standard [29], invented by IBM at the request of the National Bureau of Standards, has been in use since 1976. DES uses 56-bit keys and has some peculiarities that make it undesirable, particularly its short key length, which makes it vulnerable to brute-force attacks. When US export laws were in effect, the export key length was artificially reduced to 40 bits, further weakening DES.

| Cipher | Number | Percentage |
|--------|--------|------------|
| DES-40 | 12,930 | 66.55%     |
| DES-56 | 12,102 | 62.29%     |
| DES-64 | 18,162 | 93.48%     |
| 3-DES  | 18,943 | 97.50%     |

**Table 7: DES Support**

| Cipher | Number | Percentage |
|--------|--------|------------|
| DES-40 | 25     | 0.13%      |
| DES-56 | 35     | 0.18%      |
| DES-64 | 165    | 0.85%      |
| 3-DES  | 18,943 | 97.50%     |

**Table 8: Maximum DES Key Strength**

Table 7 shows the DES usage in detail. Although the old US export regulations no longer apply, almost 67% of the servers still support these weak keys, and most support DES-64, which is only slightly stronger. Fortunately, fewer than 2% of the servers support these weak keys exclusively, as shown in Table 8, which details the maximum DES key strengths supported by the servers.