veriﬁed if they are triggerable and stitchable using the CVE.
The cases that we conﬁrmed as exploitable by running the
exploits and dynamically analyzing the execution are denoted
by a check-mark ((cid:2)) in Table VII. We have also constructed
end-to-end attacks using some of these gadgets as discussed
in Section V-C.
B. Turing-Complete Examples
We have established that x86 data-oriented gadgets required
to simulate MINDOP exist in real-world applications and can
be triggered by the concrete vulnerabilities. Next we evaluate
the ease of stitching multiple gadgets for building Turing-
complete exploits. Currently we resorted to prioritizing cases
and manually checking a random sample of gadgets based
on their type and concrete memory errors. We present the
details of two representative examples wherein the attacker: (1)
actively interacts with the program, observes the behavior and
crafts the next attack payload; (2) sends a single payload which
triggers all the gadgets to execute the attacker’s MINDOP
program. Readers interested in end-to-end real attacks can read
Section V-C ﬁrst, where we show expressive attacks with these
Turing-complete gadgets.
1) Interactive — ProFTPD: ProFTPD is a light-weight
ﬁle server and its 1.2-1.3 versions have a stack-based buffer
overﬂow vulnerability in the sreplace function (CVE-
2006-5815 [45]). Line 14 in Code 7 shows the string copy
978978
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:56 UTC from IEEE Xplore.  Restrictions apply. 
which overﬂows the stack buffer buf. We conﬁrm that the
dispatcher around this memory error and the data-oriented
gadgets can be used to build Turing-complete calculation. We
use the following methodology to implement MINDOP virtual
operations with the x86 data-oriented gadgets in ProFTPD.
cmd_loop()->pr_cmd_dispatch()->_chdir()
->pr_display_file()->sreplace()
1 //memory error & assignment :
2 //
3 //
4 char *sreplace(char * s, ...) {
5
char *src,*cp,**mptr,**rptr;
6
char *marr[33],*rarr[33];
7
char buf[PR_TUNABLE_PATH_MAX] = {’\0’};
8
src = s; cp = buf; mptr=marr; rptr=rarr;
9
...
10
while (*src)
11
12
13
14
15
16 }
//1st round: memory error
//2nd round: assignment
sstrncpy(cp,*rptr,blen-strlen(pbuf)); ...
for (; *mptr; mptr++, rptr++) {
...
}
Code 7. Code snippet of ProFTPD, with a stack-based buffer overﬂow. This
code is also used to simulate the assignment gadget.
• Conditional
to
an
use
assignment
operation. We
simulate
the
sstrncpy function
assignment
which moves data from one arbitrary location to another
arbitrary location. In the ﬁrst iteration of the while
loop (Line 10-15 in Code 7), the memory error corrupts
the variable cp and content of the array rarr. So in
the next iteration, both the source and the target of the
string copy sstrncpy are controlled by the attacker.
This way, the attacker simulates a MINDOP assignment
operation. This gadget is conditional because the attacker
can corrupt src, which is the condition for the second
round of the loop body. If the condition is not satisﬁed,
the assignment operation will not be executed.
1 //load : cmd_loop()->pr_cmd_dispatch()->_chdir()
2 //
->pr_display_file()
3 int pr_display_file(...) {...
4
outs = sreplace(p, buf, ...,
5
6
7 }
8 void pr_response_send_raw(const char *fmt,...){
9
10 }
pr_response_send_raw("%s-%s", code, outs);
vsnprintf(resp_buf, size, fmt, msg);
"%V", main_server->ServerName,);
Code 8. Simulated load gadget. This code copies data from a global variable
ServerName to a global buffer resp_buf. With the assignment gadget
that reads *resp_buf to &ServerName, we get the load gadget.
• Dereference operations (Load / Store). The load operation
takes two memory addresses as input (say p and q) and
performs operation *p=**q. We decompose the opera-
tion into two sub-operations: *ptmp=*q and *p=*tmp,
such that the ptmp is the address of tmp. In ProFTPD,
we use the assignment gadget to move data from the
resp_buf to &ServerName as the ﬁrst dereference.
Then we use the function pr_display_file (Line
4, Code 8), which reads the content of ServerName
to the buffer resp_buf as the second dereference.
These two dereferences form a MINDOP load operation
979979
*resp_buf=**resp_buf. The MINDOP store oper-
ation is simulated by a similar method.
1 //addition : cmd_loop()->pr_cmd_dispatch()
2 //
->xfer_log_retr()
3 MODRET xfer_log_retr(cmd_rec *cmd) {
4
session.total_bytes_out += session.xfer.
total_bytes;
5 }
Code 9. Simulated addition gadget. This code adds two ﬁxed memory
locations. Arbitrary memory addition can be achieved by combining this
gadget with the assignment gadget.
• Addition operation. Code 9 shows the code in ProFTPD
which adds two variables. The structure session is
a global variable and hence all
the operands of this
gadget are the under attacker’s control. To achieve an
addition operation on arbitrary memory locations, we
use the MINDOP assignment operation to load operands
from desired source locations to the session structure,
perform the addition, and then move the result to the
desired destination location.
while (TRUE) {
pr_netio_telnet_gets(buf, ..);
cmd = make_ftp_cmd(buf, ...);
pr_cmd_dispatch(cmd);
1 //dispatcher & jump :
2 void cmd_loop(server_rec *server,conn_t *c) {
3
4
5
6
7
8
9 }
10 char *pr_netio_telnet_gets(char *buf,...) {
11
while(*pbuf->current != ’\n’ && toread>0)
12
13
14 }
//calls functions
// with memory errors and gadgets
//reads through virtual PC
*buf++ = *pbuf->current++;
}
Code 10. Gadget dispatcher and simulated jump gadget. pbuf->current
is the virtual PC pointing to the malicious input.
• (Conditional)
jump operation. Code 10 shows
the
ProFTPD program logic to read the next command
from an input buffer. pbuf->current is a pointer to
the next command in the input, thus forming a virtual
PC for the attacker’s MINDOP program. By corrupting
pbuf->current, the attacker can select a particular
input that invokes a speciﬁc MINDOP operation. We
use the assignment operation to conditionally update the
virtual PC, thus simulating a conditional jump operation.
To stitch these identiﬁed gadgets together, we identiﬁed a
gadget dispatcher (Code 10) in the function cmd_loop. It
contains an inﬁnite loop that repeatedly reads requests from
the remote attackers or cached in the buffer and dispatches the
request to functions with various gadgets. For each request,
the attacker embeds a malicious input which ﬁrst exploits the
memory error to prepare the memory state for one of these
gadgets and then triggers the expected gadget to achieve the
MINDOP operation. In Section V-C we show the case studies
of expressive exploits against ProFTPD.
is
a
and its versions
overﬂow
buffer
The
ﬁxed-size
2) Non-interactive
– Wireshark: Wireshark
widely-used network packet
before
vulnerability
(CVE-2014-2299
analyzer
stack-based
[41]).
1.8.0
have
a
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:56 UTC from IEEE Xplore.  Restrictions apply. 
If
the
the
than 0xffff),
frame data overﬂows
from a mpeg trace ﬁle.
(PacketList *packet_list, ...) {
parameter packet_list with malicious
gint col; column_info *cinfo;
guint8 pd[WTAP_MAX_PACKET_SIZE]; //vul buf
//memory error function
cf_read_frame_r(...,fdata,...,pd);
packet_list_change_record(packet_list,
in function
buffer pd (shown on Line 5 of Code 11)
packet_list_dissect_and_cache_record accepts
frame data
attacker
trace ﬁle containing a large frame
sends a malicious
(larger
the
buffer. This is used to overwrite variables col, cinfo,
and
input.
These corrupted values are then passed to the function
packet_list_change_record which contains all the
x86 data gadgets of our interest.
1 //vulnerable function
2 void packet_list_dissect_and_cache_record
3
4
5
6
7
8
9
10 }
11 //gadgets: assignment/load/store/addition
12 void packet_list_change_record(PacketList *
13
14 {
15
16
17
18
19
20 }
21 void gtk_tree_view_column_cell_set_cell_data(..)
22 {
23
24
25
26
27
28
29 }
....
//finally calls vulnerable function
show_cell_data_func();
record = packet_list->physical_rows[row];
record->col_text[col] =
if (!record->col_text_len[col])
++packet_list->const_strings;
packet_list,..,gint col,column_info *cinfo)
for (cell_list = tree_column->cell_list;
cell_list; cell_list = cell_list->next) {
(gchar *) cinfo->col_data[col];
...,col, cinfo);
}
Code 11. Wireshark code snippet of the vulnerable function and gadgets.
• Assignment operation. We identify an assignment op-
eration from the function packet_list_change
_record, called after the memory error function. Line
16 in Code 11 shows the gadget, where memory copy
addresses are under the attack’s control. col_text and
col_data are of gchar ** type, so the assignment
operation performs two dereferences per operand. To
simulate a simple assignment from one memory location
to another, the attacker corrupts record->col_text
and cinfo->col_data. This is achieved by corrupting
record and cinfo to point to controllable memory
regions, where the value of record->col_text and
cinfo->col_data will be retrieved.
• Dereference operations (Load / Store). Line 16 in
Code 11 also serves gadgets for simulating load and
store operations of MINDOP, as it has two dereference
operations. To simulate a load operation, the attacker
corrupts record->col_text and cinfo. To simulate
a store operation, the attacker can change the value of
record and cinfo->col_data.
• Conditional addition operation. Lines 18-19 in Code 11
show a data gadget to perform a conditional increment
operation. At each time this gadget is invoked it adds 1 to
the target location. With the condition, we can implement
an addition operation over arbitrary memory locations,
where the attacker controls the condition as well as the
operand of the increment.
• Conditional jump operation. The memory error is trig-
gered by the ﬁle read, and the program maintains a ﬁle
position indicator in the FILE structure. The attacker can
change the ﬁle position indicator to force the program to
non-linearly access the data frames in the ﬁle. This way
the ﬁle position indicator serves as a virtual PC for the
MINDOP program in Wireshark. Using the conditional
addition operation, the attacker can simulate the MIN-
DOP conditional jump operation by manipulating the ﬁle
position indicator.
at
all
are
the
after
Since
gadgets
executed
from the parent
each execution of
large number of gadgets
the
the memory error
memory error,
least one MINDOP operation.
can stably invoke
together, we
To chain a
identify a gadget dispatcher
function
gtk_tree_view_column_cell_set_cell_data, as
shown in Line 21-27, Code 11. In the ﬁrst invocation of the
memory error, the attacker uses the assignment operation to
corrupt the loop condition cell_list, and points it to a
fake linked-list in the malicious payload, making it an inﬁnite
loop. In each of the subsequent executions, the program reads
malicious frame data to trigger different gadgets to synthesize
the execution of expected MINDOP operations.
C. Why are Expressive Payloads Useful?
We demonstrate the stitchability of identiﬁed data-oriented
gadgets by building concrete end-to-end exploits. We discuss
three case studies to highlight the importance of expressive
payloads. Speciﬁcally, we demonstrate how MINDOP empow-
ers attackers to (a) bypass randomization defense without leak-
ing addresses, (b) run a network bot which takes commands
from attackers and (c) alter the memory permission.
1) Example 1 — Bypassing Randomization Defenses:
Typical memory error exploits bypass Address Space Layout
Randomization (ASLR) by mounting a memory disclosure
attack to leak randomized addresses to the network [15]. But if
the memory corruption vulnerability cannot leak / disclose the
addresses then the attack fails. We show how to defeat ASLR
with DOP without leaking any addresses to the network. As a
real example, consider the vulnerable ProFTPD server, which
internally uses OpenSSL for authentication. Our goal is to
leak the server’s OpenSSL private key. The program stores
this key in a randomized memory region, so a direct access to
it in presence of ASLR is not viable. We ﬁnd that the private
key has a chain of 8 pointers pointing the private key buffer, as
shown in Figure 3. The locations of all the pointers except the
base pointer are randomized; only the base pointer is reliably
readable from the memory error. However, creating a reliable
exploit needs to de-randomize 7 out of 8 pointers successfully
to leak the key without any network disclosure of addresses!
980980
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:56 UTC from IEEE Xplore.  Restrictions apply. 
Proftpd’s memory 
@0x080dbc28 
SSL_CTX * ssl_ctx 
struct cert_st * cert 
CERT_PKEY * key 
EVP_PKEY*privatekey 
struct rsa_st * rsa 
BIGNUM * d 
BN_ULONG * d 
Private Key 
DOP attack steps 
*addr1 = *0x080dbc28  (ssl_ctx) 
*addr1 = *addr1 + offset1 
*addr2 = *addr1 
*addr3 = **addr2           (cert) 
*addr1 = *addr3  
*addr1 = *addr1 + offset2 
*addr2 = *addr1 
*addr3 = **addr2           (key) 
*addr1 = *addr3  