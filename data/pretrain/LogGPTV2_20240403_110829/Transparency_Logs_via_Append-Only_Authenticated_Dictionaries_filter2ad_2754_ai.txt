ℓ this would produce a collision in H .
Else, we argue as follows. Each accumulator a1, . . . , aℓ is ac-
companied by an extractability term ˆa1, . . . , ˆaℓ, which the client
checks as e (aj , дτ ) = e ( ˆaj , д) for j ∈ [ℓ] (see Line 19 in Algorithm 5).
Hence, from the q-PKE assumption, it follows that there exists a
polynomial time algorithm that, upon receiving the same input as
A, outputs polynomials (Aj (x ))j∈[ℓ] (in coefficient form) such that
дAj (s ) = aj with all but negligible probability. The same holds for
all frontier accumulators o1, . . . , oℓ′ and terms ˆo1, . . . , ˆoℓ′ included
in π′, and let (Oj (x ))j∈[ℓ′] denote their polynomials.
We distinguish two cases and analyze them separately:
(a) (x − HF (ρ)) ∤ Aℓ (x ) or (x − HF (ρ)) ∤ Oℓ′ (x )
(b) (x − HF (ρ)) | Aℓ (x ) and (x − HF (ρ)) | Oℓ′ (x )
For case (a), without loss of generality we will focus on the
(x − HF (ρ)) ∤ Aℓ (x ) sub-case. (The proof for the second sub-case
proceeds identically.) Observe that, by construction, (x − HF (ρ)) |
A0 (x ) and, by assumption, (x − HF (ρ)) ∤ Aℓ (x ). Thus, there must
exist some index 0 < i ≤ ℓ such that (x − HF (ρ))
| Ai−1 (x )
and (x − HF (ρ)) ∤ Ai (x ). Note that i can be easily deduced given
all (Aj (x ))j∈[ℓ]. Therefore, by polynomial division there exist effi-
ciently computable polynomials qi (x ), qi−1(x ) and κ ∈ Fp such that:
Ai−1 (x ) = (x −HF (ρ))·qi−1 (x ) and Ai (x ) = (x −HF (ρ))·qi (x ) +κ.
Session 6C: Secure Computing VICCS ’19, November 11–15, 2019, London, United Kingdom1314Now, during the verification of the ith subset proof, it holds that:
e (ai , д) = e (ai−1, πi−1) ⇔
e (дAi (s ), д) = e (дAi−1 (s ), πi−1) ⇔
e (д(s−HF (ρ ))·qi (s )+κ , д) = e (д(s−HF (ρ ))·qi−1 (s ), πi−1) ⇔
qi (s )+
e (д
e (д
e (д
κ
κ
(s−HF (ρ )) , д) = e (дqi−1 (s ), πi−1) ⇔
(cid:102)
(s−HF (ρ )) , д) = e (дqi−1 (s ), πi−1) · e (д
(cid:102)
e (дqi−1 (s ), πi−1) · e (д
(s−HF (ρ )) , д) =
e (дqi−1 (s ), πi−1) · e (д−qi (s ), д)
1
(cid:103)κ−1
−qi (s ), д) ⇔
−qi (s ), д)
(cid:103)κ−1
.
Hence, the pair (HF (ρ),
used to break the q-SBDH assumption.
) can be
In case (b), by assumption, (x−HF (ρ)) | Aℓ (x ) and (x−HF (ρ)) |
Oℓ′ (x ). Therefore, by polynomial division there exist efficiently
computable polynomials qA (x ), qo (x ) such that: Aℓ (x ) = (x −
HF (ρ)) · qA (x ) and Oℓ′ (x ) = (x − HF (ρ)) · qo (x ). Let ψ = (y, z) be
the proof of disjointness from π′. Since ψ verifies against accumu-
lators aℓ and oℓ′, it holds that:
e (aℓ, y) · e (oℓ′, z) = e (д, д) ⇔
e (дAℓ (s ), y) · e (дOℓ′ (s ), z) = e (д, д) ⇔
e (д(s−HF (ρ ))·qA (s ), y) · e (д(s−HF (ρ ))·qo (s ), z) = e (д, д) ⇔
1
e (дqA (s ), y) · e (дqo (s ), z) = e (д, д)
(s−HF (ρ )) .
Thus, the pair (HF (ρ), e (дqA (s ), y) · e (дqo (s ), z)) can again be used
to break the q-SBDH assumption.
Append-only security. We can prove append-only security with
the same techniques used above. Let ρ be the prefix of k used to
prove non-membership w.r.t. the new digest dj. The membership
proof for k w.r.t. the old digest di again involves a series of BPT
accumulators whose corresponding polynomials can be extracted.
By our previous analysis, (x − HF (ρ)) must divide the polynomial
extracted for the BPT root accumulator in di, otherwise the q-SBDH
assumption can be broken. Continuing on this sequence of subset
proofs, the append-only proof “connects” this BPT root accumulator
to a BPT root accumulator in dj. By the same argument, (x−HF (ρ))
must also divide the polynomial extracted for this BPT root. Since
non-membership also verifies, (x−HF (ρ)) must divide the extracted
polynomial for the root BFT accumulator in dj, or else q-SBDH can
be broken. Finally, we apply the same argument as case (b) above,
since (x − HF (ρ)) divides both these polynomials and we have a
disjointness proof for their accumulators, again breaking q-SBDH.
Fork consistency. Assume there exists a polynomial-time adver-
sary A that breaks fork consistency, producing digests di (cid:44) d′
i with
append-only proofs πi , π′
i to a new digest dj. Since di (cid:44) d′
i , there
exists a root r such that its hash hr in di differs from its hash h′
r in
i get “joined” into dj, let r∗ (cid:44) r denote the ances-
d′
i . Since di and d′
tor root of r in dj. (Note that r∗ (cid:44) r, since VerAppendOnly always
makes sure that common roots between an old digest and a new
digest have the same hash.) Now, note that both proofs πi , π′
i are
Merkle proofs from node r to r∗. Importantly, because every node w
is hashed together with its label w (as hw = H (w, hw |0, aw , hw |1)),
the two Merkle proofs take the same path (i.e., path[r , r∗])! In other
words, the adversary produced two Merkle proofs that (1) verify
against the same digest dj, (2) take the same path to the same leaf r,
but (3) attest for different leaf hashes hr and h′
r . This breaks Merkle
hash tree security and can be used to produce a collision in H .
D AAS ASYMPTOTIC ANALYSIS
Suppose we have a worst-case AAS with n = 2i − 1 elements.
Space. The space is dominated by the BFTs, which take up O (λn/2)+
O (λn/4) +· · ·+O (1) = O (λn) space. (BPTs only take up O (n) space.)
Membership proof size. Suppose an element e is in some BPT of
the AAS . To prove membership of e, we show a path from e’s leaf in
the BPT to the BPT’s root accumulator consisting of constant-sized
subset proofs at every node. Since the largest BPT in the forest has
height log (n/2), the membership proof is O (log n)-sized.
Non-membership proof size. To prove non-membership of an
element e, we show a frontier proof for a prefix of e in every BFT in
the forest. The largest BFT has O (λn) nodes so frontier proofs are
O (log (λn))-sized. Because there are O (log n) BFTs, all the frontier
proofs are O (log n log (λn)) = O (log2 n)-sized.
Append-only proof size. Our append-only proof is O (log n)-sized.
This is because, once we exclude common roots between the old
and new digest, our proof consists of paths from each old root in
the old forest up to a single new root in the new forest. Because
the old roots are roots of adjacent trees in the old forest, there will
be a single O (log n)-sized Merkle path connecting the old roots to
the new root. In other words, our append-only proofs are similar
to the append-only proofs from history trees [29].
E AAD DEFINITIONS
Notation. Let |S| denote the number of elements in a multiset S
(e.g., S = {1, 2, 2} and |S| = 3). Let K be the set of all possible keys
and V be the set of all possible values. (K and V are application-
specific; e.g., in software transparency, a key is the software package
name and a value is the hash of a specific version of this software
package.) Formally, a dictionary is a function D : K → P (V ) that
maps a key k ∈ K to a multiset of values V ∈ P (V ) (including the
empty set), where K ⊂ K and P (V ) denotes all possible multisets
with elements from V. Thus, D(k ) denotes the multiset of values
associated with key k in dictionary D. Let |D| denote the number
of key-value pairs in the dictionary or its version. Appending (k, v)
to a version i dictionary updates the multiset V = D(k ) of key k to
V ′ = V ∪ {v} and increments the dictionary version to i + 1.
Server-side API. The untrusted server implements:
Setup(1λ, β ) → pp, V K. Randomized algorithm that returns public
parameters pp used by the server and a verification key V K used
by clients. Here, λ is a security parameter and β is an upper-
bound on the number of elements n in the dictionary (i.e., n ≤ β).
Append(pp, Di , di , k, v) → Di +1, di +1. Deterministic algorithm
that appends a new key-value pair (k, v) to the version i dic-
tionary, creating a new version i + 1 dictionary. Succeeds only
if the dictionary is not full (i.e., i + 1 ≤ β). Returns the new
authenticated dictionary Di +1 and its digest di +1.
ProveLookup(pp, Di , k ) → V , πk,V . Deterministic algorithm that
generates a proof πk,V that V is the complete multiset of values
for key k. In particular, when Di (k ) = ∅, this is a proof that key
Session 6C: Secure Computing VICCS ’19, November 11–15, 2019, London, United Kingdom1315Lookup correctness. ∀ sequences (ki ∈ K , vi ∈ V )i∈[n] with
corresponding dictionary Dn, ∀ keys k ∈ K ,
(pp, V K ) ← Setup(1λ, β ),
(D, d ) ← Append+ (pp, D0, d0, (ki , vi )i∈[n]),
V = Dn (k ) ∧ VerLookup(V K, d, k, V , π ) = T
(V , π ) ← ProveLookup(pp, D, k ) :
 ≥ 1 − ε (λ)
Pr
k has no values. Finally, the server cannot construct a fake proof
πk,V ′ for the wrong V ′, including for V ′ = ∅.
ProveAppendOnly(pp, Di , Dj ) → πi, j. Deterministic algorithm
that proves Di is a subset of Dj. Generates an append-only proof
πi, j that all key-value pairs in Di are also present and unchanged
in Dj. Importantly, a malicious server who removed or changed
keys from Dj that were present in Di cannot construct a valid
append-only proof.
Client-side API. Clients implement:
VerLookup(V K, di , k, V , π ) → {T , F}. Deterministic algorithm that
verifies proofs returned by ProveLookup(·) against the digest di
at version i of the dictionary. When V (cid:44) ∅, verifies that V is
the complete multiset of values for key k, ensuring no values
have been left out and no extra values were added. When V = ∅,
verifies that key k is not mapped to any value.
VerAppendOnly(V K, di , i, dj , j, πi, j ) → {T , F}. Deterministic algo-
rithm that ensures a dictionary remains append-only. Verifies
that πi, j correctly proves that the dictionary with digest di is a
subset of the dictionary with digest dj. Also, verifies that di and
dj are digests of dictionaries at version i and j, respectively.
AAD Correctness and Security Definitions. Consider an or-
dered sequence of n key-value pairs (ki ∈ K , vi ∈ V )i∈[n]. Note
that the same key (or key-value pair) can occur multiple times
in the sequence. Let D′, d′ ← Append+ (pp, D, d, (ki , vi )i∈[n]) de-
note a sequence of Append(·) calls arbitrarily interleaved with other
ProveLookup(·) and ProveAppendOnly(·) calls such that D′, d′ ←
Append(pp, Dn−1, dn−1, kn, vn ), Dn−1, dn−1 ← Append(pp, Dn−2,
dn−2, kn−1, vn−1), . . . , D1, d1 ← Append(pp, D, d, k1, v1). Let Dn
denote the corresponding dictionary obtained after appending each
(ki , vi )i∈[n] in order. Finally, let D0 denote an empty authenticated
dictionary with (empty) digest d0.
Definition E.1 (Append-only Authenticated Dictionary). (Setup,
Append, ProveLookup, ProveAppendOnly, VerLookup, VerAppendOnly)
is a secure append-only authenticated dictionary (AAD) if ∃ negligi-
ble function ε,∀ security parameters λ,∀ upper-bounds β = poly(λ)
and ∀n ≤ β it satisfies the following properties:
Observation: Note that this definition compares the returned mul-
tiset V with the “ground truth” in Dn and thus provides lookup
correctness. Also, it handles non-membership correctness since V
can be the empty set. Finally, the definition handles all possible
orders of inserting key-value pairs.
Lookup security. ∀ adversaries A running in time poly(λ),
(pp, V K ) ← Setup(1λ, β ),
(d, k, V (cid:44) V ′, π, π′) ← A(pp, V K ) :
VerLookup(V K, d, k, V , π ) = T ∧
VerLookup(V K, d, k, V ′, π′) = T
 ≤ ε (λ)
Pr
Observation: This definition captures the lack of any “ground truth”
about what was inserted in the dictionary, since there is no trusted
source in our model. Nonetheless, given a fixed digest d, our defini-
tion prevents all equivocation attacks about the complete multiset
of values of a key, including the special case where the server
equivocates about the key being present (i.e., V (cid:44) ∅ and V ′ = ∅).
Append-only correctness. ∀ sequences (ki ∈ K , vi ∈ V )i∈[n]
where n ≥ 2
(pp, V K ) ← Setup(1λ, β )
(Dm, dm ) ← Append+ (pp, D0, d0, (ki, vi )i∈[m]),
(Dn, dn ) ← Append+ (pp, Dm, dm, (kj, vj )j∈[m+1,n]),
π ← ProveAppendOnly(pp, Dm, Dn ) :
VerAppendOnly(V K, dm, m, dn, n, π ) = T
Append-only security. ∀ adversaries A running in time poly(λ),
(pp, V K ) ← Setup(1λ, β )
(di, dj, i < j, πa, k, V (cid:44) V ′, π, π′) ← A(pp, V K ) :
VerAppendOnly(V K, di, i, dj, j, πa ) = T ∧
Pr
VerLookup(V K, di, k, V , π ) = T ∧
VerLookup(V K, dj, k, V ′, π′) = T
Observation: This definition ensures that values can only be added
to a key and can never be removed nor changed.
Fork consistency. This definition stays the same as in Section 3.1.
 ≥ 1 − ε (λ)
 ≤ ε (λ)
Pr
Session 6C: Secure Computing VICCS ’19, November 11–15, 2019, London, United Kingdom1316