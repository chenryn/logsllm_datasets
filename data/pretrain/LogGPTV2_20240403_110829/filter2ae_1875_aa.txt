**作者：su18  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
当一个 JDBC 连接 URL 可控时，能造成什么影响？相关的若干攻击方法已经被披露很长时间了，但是我还一直都没有学习，随着 HITB2021SIN
中的分享议题 "[Make JDBC Attacks Brilliant
Again](https://www.youtube.com/watch?v=MJWI8YXH1lg&ab_channel=HackInTheBoxSecurityConference)"
的视频上传到了 Youtube 上之后，我觉得实在是不能再拖了，于是就有了这篇文章，本文记录了相关的学习和研究成果，并集合了相关的漏洞代码。
在看本篇文章时，可以边结合视频，边看 PPT 边看我对其的讲解分析，打开 youtube
的自动字幕和自动翻译，结合本文，对英文不好的同学来说可能更容易一点。
# 开端
在 2019 年欧洲 BlackHat 大会上, 一个名为 "[New Exploit Technique In Java Deserialization
Attack](https://i.blackhat.com/eu-19/Thursday/eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack.pdf)" 的议题由 Back2Zero 安全团队的 Yongtao
Wang, Lucas Zhang, Kevin Li 以及 Kunzhe Chai 分享出来，首次披露了 JDBC 相关反序列化攻击的利用技术。
视频也上传到了
[youtube](https://www.youtube.com/watch?v=Lv9BC_bYaI8&ab_channel=BlackHat)
上，首先来跟着 PPT 学习一下。
## Introduction to Java Deserialization
这个议题根据其 PPT 一共有 5 个部分，第一部分是对 Java
反序列化漏洞的一些介绍，比较基础，这里我就不再描述了，之前我也写过一篇相关的文章[《Java反序列化取经路》](https://su18.org/post/ysuserial/),对基础有问题的朋友可以先补一下。这里我就直接贴几张议题中的
PPT。
攻击场景，以及一些再反序列化过程中会自动触发的方法
一个有漏洞的类的举例，可以看到，在重写的 readObject 中执行了文件删除的操作
## Well-Known Defense Solutions
Lucas 列举出了三种广泛使用的防御反序列化漏洞的方案。
  1. **黑名单校验** 通过在反序列化过程中对输入流进行校验来确保其安全性. 如果反序列化过程中遇到了黑名单的类，将会终止反序列化进程。一般是通过增强 resolvClass 方法来实现的。 我们可以在 Jackson/Weblogic 以及开源项目 SerialKiller 中看到这种防御机制的实现。
  2. **JEP290(过滤机制)** JEP290 提供了一个 Filter 机制，可以对反序列化数据的输入流进行过滤，来提高安全性。官方文档可以看[这里](https://blogs.oracle.com/java/post/filter-incoming-serialization-data-a-little-of-jdk-9-goodness-available-now-in-current-release-families)。每当进行一次反序列化操作时，底层就会根据filter中的内容来进行判断，从而防止恶意的类进行反序列化操作。此外，还可以限制反序列化数据的信息，比如数组的长度、字节流长度、字节流深度以及使用引用的个数等。filter返回accept，reject或者undecided几个状态，然后用户根据状态进行决策。
  3. **Runtime Application Self-protection(RASP)** RASP 大家应该都不陌生了，这里就不多说了, 在 JavaSec 里园长写了一篇[文章](https://javasec.org/java-rasp/)，大家可以看一看。总体来说，RASP 是在程序运行时基于行为的防御，不基于规则，也不基于黑名单。 但各家 RASP 实现参差不齐，部分 RASP 可能仅仅关注了简单的命令执行功能的防御，而对其他的防御没有到位。
这三种通用的方法，还不是完美的防御方案，可能存在一些瑕疵： \- 如果我们找到了一条新的反序列化利用链，就可以绕过基于黑名单的反序列化防御机制； \-大多数的安全研究员一般情况下会找一些包含常见危险函数的 Gadget，比如执行命令的 `Runtime.exec()`，导致一些防御措施甚至是 RASP
也仅仅防御了这些常见的危险函数，此时如果我们发现了一个 Java 中的攻击向量，就可以绕过绝大部分的防御手段。
## Critical vulnerabilities in Java
接下来 Lucas 公布了两个能带来较大危害的攻击向量。
### URLConnection
提到 URLConnection，我能想到的漏洞利用就只有 SSRF，但是 Lucas 将其延伸至 NTLM Reflection Attack
(CVE-2019-1040) 并且获得了本地 Windows 凭证信息。
这部分不是本文的重点，所以也将其略过。
### JDBC
这部分的议题由 Kunzhe Chai 给出了相关的讲解。
JDBC 是 JavaSE 中一个重要的 API，定义了一个客户端连接数据库的方式。
开发人员使用 JDBC 与数据库建立连接，对数据库执行查询和更新语句，并检索从数据库接收到的结果。下面是一个常见的创建连接并查询数据的过程：
    public static void main(String[] args) throws Exception {
            String CLASS_NAME = "com.mysql.jdbc.Driver";
            String URL        = "jdbc:mysql://localhost:3306/test";
            String USERNAME   = "root";
            String PASSWORD   = "root";
            Class.forName(CLASS_NAME);
            Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            Statement statement = connection.createStatement();
            statement.execute("select 10086");
            ResultSet set = statement.getResultSet();
            while (set.next()) {
                System.out.println(set.getString(1));
            }
            statement.close();
            connection.close();
        }
JDBC 通常使用不同的 URL/URI 连接字符串来与指定类型的数据库建立连接，这个 URL 主要包含三个部分: 驱动名称、连接地址以及扩展参数。
而 "扩展参数" 就是本次导致安全漏洞的一个重要的部分。
Mysql JDBC 中包含一个危险的扩展参数： ” **autoDeserialize** “。这个参数配置为 true 时，JDBC
客户端将会自动反序列化服务端返回的数据，这就产生了 RCE。
此时如果攻击者作为 MYSQL 服务器的角色，给客户端返回了恶意的序列化数据，客户端就会自动反序列化触发恶意代码，造成漏洞。
在此处我们以 mysql-connector-java 8.0.14 为例，类
`com.mysql.cj.jdbc.result.ResultSetImpl` 实现了 `java.sql.ResultSet` 并且重写了
`getObject()` 方法。
如果在 JdbcConnection 的相关属性中找到了 "autoDeserialize" 参数，客户端就会读取服务端返回数据并执行其
`readObject()` 方法，这就是 mysql jdbc 攻击的最根本原因。
但是在默认情况下 JDBC 客户端不会调用 `getObject()` 函数来处理攻击者的数据，所以还需要找到一个可以触发的方式。
经过了一番深入的研究，Kunzhe Chai 找到了一个可以触发这个方法的扩展参数 : queryInterceptors。
"queryInterceptors" 参数可以指定接口 `com.mysql.cj.interceptors.QueryInterceptor`
的子类，通过名字可以看到，这是一个起到”拦截器“作用的类。在这些拦截器的实现类中，可以修改或增强语句的某些子级所做的处理，例如自动检查 memcached
服务器中的查询数据、重写慢速查询、记录有关语句执行的信息，或将请求路由到远程服务器。总体来说，这是一个为查询提供自动化增强功能的参数。
根据相关的[文档](https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-statements.html#cj-conn-prop_queryInterceptors), "queryInterceptors"
配置是从 8.0.7 版本开始支持的。
接口 QueryInterceptor 提供了一个完整的拦截流程如
`init`->`preProcess`->`postProcess`->`destroy`, 而且 QueryInterceptors 是
"chainable" 的，也就是链式的，可以指定多个 QueryInterceptor ，上一个处理的结果会传递给下一个
QueryInterceptor。
在 mysql-connector-java 中，QueryInterceptor 有好几个实现类。
Chai 发现 `ServerStatusDiffInterceptor` 会调用 `getObject` 方法，接下来看一下具体的调用链。
ServerStatusDiffInterceptor 用于显示在查询之间服务器状态的差异，`preProcess()`/`postProcess()`
调用 `populateMapWithSessionStatusValues()`方法。
`populateMapWithSessionStatusValues()` 使用已经建立的 connection 创建并执行了一个新的语句 `SHOW
SESSION STATUS`，并调用 `ResultSetUtil.resultSetToMap()` 处理返回结果。
`resultSetToMap` 调用了之前我们提到的 `getObject()` 方法，连成了一条调用链。
有了上面的知识点的积累，我们已经找到了一条反序列化的攻击路径：如果我们可以控制 JDBC URI，我们就可以： \- 将 JDBC
连接地址指向攻击者事先准备好的恶意服务器，这个服务器可以返回恶意的序列化数据。 \- 指定 autoDeserialize 参数为 true，mysql
客户端就可以自动反序列化恶意 payload。 \- 使用 ServerStatusDiffInterceptor 触发客户端和服务端的交互和反序列化。
攻击 JDBC 的步骤大概分为:
## New exploit for Java Deserialization
在这一 part，Kunzhe Chai 组合了 3 个漏洞(反序列化/NTLM Hash Leaking/NTLM Reflection Attack)
组成了 RCE 漏洞利用。
然后他制作了一个视频来演示在一个真实环境中的攻击。
然后他展示了他找到的其他可以触发 URLConnection 的 gadget，可以触发其他例如 Java 反序列化/Jackson 的漏洞利用。
依旧不是本篇文章的重点，继续略过。
## Takeaways
在 PPT 的结尾，Chai 给开发人员和安全研究人员都提了一些建议：
# 后续
在听整个演讲的过程中，我一直有个疑问，演讲之后的提问环节恰好有个老外问了这个问题:
> 攻击者可以控制 jdbc url 的情况好像并不常见，在什么情况下我们可以在现实世界中执行这个攻击呢？
这确实是一个比较现实的问题，Lucas 给出了他的答案：云平台配置。
然后这个老外接着问，有没有一个独立的产品，不正确的允许了攻击者配置 jdbc url。我感觉这个老外可能并不认可这种漏洞利用链作为一种攻击手段。
Lucas 好像没懂他的问题，并没有给出清晰的解释。同时我也觉得应该不会有商业化产品能允许攻击者未授权的修改 jdbc connection url。
但是无论如何，这种技术永远可以用来进行反制红队或者威胁诱捕（比如说蜜罐）。
在会议中，Lucas 和 Chai 仅仅提供了思路，并没有提供能够返回恶意序列化的 mysql 服务端。
几个月后，codeplutos 使用了修改后的 MySQL 插件来成功创建了恶意服务器，并且使用了一个新的扩展参数：
detectCustomCollations 。
当在 jdbc 连接参数中设置了 `detectCustomCollations=true` 时，也可以触发反序列化的流程，调用点在
`com.mysql.jdbc.ConnectionImpl#buildCollationMapping`， 依赖是 mysql-connector-java 5.1.29。
`buildCollationMapping` 方法会执行 SQL 语句 `SHOW COLLATION` 并调用
`Util.resultSetToMap()` 处理返回结果。
`resultSetToMap()` 方法调用 `getObject()` 导致反序列化。
无论用上面哪条触发链，我们都需要创建一个恶意的 mysql 服务端来针对这两条在建立连接时触发 gadget 中执行的 SQL 语句进行响应： \-`SHOW SESSION STATUS` \- `SHOW COLLATION`
但是该如何创建?
一个月后, fnmsd 师傅发布他的 [研究文章](https://www.anquanke.com/post/id/203086) 以及他的 [fake
server 项目](https://github.com/fnmsd/MySQL_Fake_Server)。
fnmsd 师傅在分析了 MySQL connector/J 的不同版本后，给出了一个统一的总结，并给出了不同版本所需的恶意 URL。
十分建议先学习一下 fnmsd 师傅的文章。
# 打造自己的恶意服务器
在了解了调用链和原理后，下一步我们可以打造一个属于自己的恶意服务器。有以下几种实现思路： \- 从头开始编写一个伪 MySQL 服务器，兼容 MySQL
的协议交互和 MySQL SQL 语法执行的流程。（需要了解通信协议和实现机制，工作量太大） \- 对 jdbc 连接过程中的全部 TCP
进行抓包，分析服务端和客户端交互的全部流程，包括握手、认证、执行语句等等, 重现整个交互流程，在指定位置返回恶意数据包。（fnmsd