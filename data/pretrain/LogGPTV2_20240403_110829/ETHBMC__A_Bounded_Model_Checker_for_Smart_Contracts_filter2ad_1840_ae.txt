scan. Since we want to avoid unnecessary rescanning of con-
tracts, we continue with only scanning the difference between
the teEther and MAIAN account set. We calculated this dif-
ference by collecting all newly created accounts, as well as
all accounts whose account state changed between the two
blocks, thus “updating” our view of the blockchain to the
newer block. Finally, we used the same method to calculate
the difference between the MAIAN scan and all the accounts
listed on Google BigQuery as of December 2018, giving us a
complete picture of the current Ethereum vulnerability land-
scape. Note we chose both the teEther and MAIAN scans
since both tools provide false positive pruning, enabling a fair
comparison.
Due to the scale of our analysis, we have to impose some
restrictions on ETHBMC. The analysis is conﬁgured to use
a 30 minute timeout. Moreover, we bound loop execution to
one iteration, use a two minute timeout for our backend SMT
solver, as well as only loading up to 10,000 storage variables.
When an accounts has zero balance on chain, we assume a
substitute of 10 Ether so the model checker can reason about
extracted Ether. Additionally, we limit transaction depth to
three transactions and introduce an additional constraint to our
execution to limit memcopy operations to size 256, mimicking
teEther’s behaviour.
We used a cluster of machines for our experiments: 20
virtual machines in our university’s internal cloud running 6
× 2.5 Ghz virtualized cores with 12 GB of memory assigned
each. Additionally, we ran 12 ETHBMC instances on two
servers, each equipped with an Intel Xeon E5-2667 and 96GB
of memory. Scanning 2,193,697 unique accounts took the
entire cluster around 3.5 months in total, which equals to
roughly 39 CPU years.
teEther We contacted the authors of teEther [33] and got
access to their experimental data and performed an analysis of
all 784,344 accounts listed by their dataset on the same date
(Nov 30, 2017). Note that Krupp and Rossow ﬁrst assumed an
empty storage during their analysis. This, in conjunction with
only single contract analysis, allowed them to skip analyzing
duplicate contract codes resulting in a reduced initial analy-
sis set of 38,757 contracts. They ﬁrst analyzed this reduced
contract set for vulnerabilities. When their tool ﬂagged an
account as vulnerable, they searched the bigger set for all ac-
counts which share this contract code. Subsequently, they than
reran their analysis for these accounts while also extracting
the corresponding environment (e.g., the storage variables of
these accounts). However, note that this shortcut might miss
vulnerable contracts since they may behave differently based
on initialized storage variables and accounts they interact
with. To avoid this, we scan all 784,344 accounts separately,
extracting initial storage variables, as well as called accounts
discovered during the analysis. We want to stress that both
scans target the same set of contracts, we only differ in the
approach.
Our analysis ﬁnished successfully for the majority of
contracts (91.21%), with only a small number of time-
outs (2.41%). In comparison, teEther successfully analyzed
85.65% of the contracts. Due to the large-scale nature of our
analysis, we did encounter multiple errors during analysis
(6.38%). Some are the result of a bug in EVM, the framework
used for validation. Some are related to us not being able to
load the account from the blockchain which is an issue we
are currently still investigating. However, in any case we are
conservative and ﬂag the corresponding account as an error,
excluding it from analysis.
After both stages of their analysis, Krupp and Rossow
report 1,532 vulnerable accounts. During our analysis, we
2768    29th USENIX Security Symposium
USENIX Association
discovered 2,856 vulnerable contracts, 1,681 contract from
which we could extract Ether, 51 whose control ﬂow we could
redirect, and 1,431 which we could kill at any time (i.e., suici-
dal contracts). Note that an account can be ﬂagged in multiple
categories, e.g., 255 accounts are both ﬂagged as suicidal
and able to extract Ether. During their evaluation, the teEther
authors list accounts which are vulnerable to hijacked con-
trol ﬂow, both in a separate category, as well as in the steal
ether category. The reasoning being, that once an attacker
can redirect the control ﬂow, they can easily extract all funds
from the account [33]. We follow their lead to enable better
comparability.
We examined how our results directly compare to the ac-
counts ﬂagged as vulnerable by teEther. During our analysis,
we ﬂagged 1,493 out of the 1,532 accounts as vulnerable.
The remaining 39 are either timeouts (16) or reported benign
by ETHBMC (23). We discovered that teEther does not cor-
rectly model the environment, i.e., during analysis they treat
all environmental information (e.g., the block hash or block
number) as fully symbolic. When their framework ﬂags an
account as potentially vulnerable, they try to correct these
overapproximations by simulating the environment with a
private development chain. However, they start the private
chain with the default initial parameters, beginning the chain
at block number one. In contrast, we simulate the execution at
the corresponding real-world blocks and supply the environ-
ment we discovered during live analysis. The authors stated
that this also caused problems while generating exploits in the
original publications [33] and, after contacting them, they con-
ﬁrmed our suspicion about such false positives, leaving 1,509
vulnerable accounts with 1,541 valid exploits. In summary,
ETHBMC is able to ﬁnd 10.3 % more vulnerable accounts
and 22.8 % more exploits than teEther.
MAIAN Nikolic et al. conducted their own analysis by scan-
ning 970,898 contracts on a later date than teEther [46]. Un-
fortunately, their data set is not available to us and we could
not recreate their experiments due to the problems described
in Section 6.1. We scanned up to the same blocknumber
and found a total of 1,439 (+1.1%) accounts to be suicidal,
MAIAN found 1,423. As we do not have access to the exper-
imental data, we speculate that the concolic execution used
by MAIAN underapproximates several contracts. Our analy-
sis successfully ﬁnished for 92.46% of all accounts, a slight
improvement compared to the teEther results.
Current Vulnerability Landscape Finally, our last scan
revealed a total of 4,301 vulnerable, active contracts on the
Ethereum blockchain as of December 2018. These are split
between 2,708 contracts from which we could extract Ether,
97 accounts whose control ﬂow can be redirected, and 1,924
contracts which we could selfdestruct at will. Our technique
still ﬁnished successfully for around 92.49% of all contracts.
Figure 3: Cumulative overview of analysis time of 10,000 randomly sampled
contracts. Note that the x-axis is not linearly scaled.
6.3 Performance Analysis
In Section 6.2, we demonstrated ETHBMC’s ability to scale
to large datasets. However, we are also interested in its per-
formance when analyzing individual contracts. We randomly
sampled 10,000 contracts from our dataset and conduct a
study of our analysis time. Note that if the contract interacts
with other contracts, we still load them from the blockchain.
The results are presented in Figure 3.
From the 10,000 contracts, we successfully analyzed 5,577
in the ﬁrst 5 seconds and an additional 2,006 in 5 to 10 sec-
onds(i.e., a total of 7,583 in 10 seconds). Afterwards, the
number of solved contracts gradually increases, with 8,471 of
10,000 contracts being solved in the ﬁrst 2 minutes. After 30
minutes, we have successfully analyzed 9,031 out of 10,000
accounts, i.e., around 90%, which mirrors our performance
during the large-scale analysis. Note that we plotted errors
and timeouts together in Figure 3 for a better presentation.
6.4 Ablation Study
We perform an ablation study to gain a better insight into
ETHBMC’s inner workings and how the enhancements pre-
sented in Section 4 affect the model checker’s ability to detect
vulnerabilities. We re-scan all vulnerable accounts found in
the ﬁrst phase of our experiments, i.e., our evaluation com-
paring against teEther, while successively disabling different
features. This gives us a clear picture which feature con-
tributes to ﬁnding additional bugs. Note that we chose the
teEther contracts to gain a frame of reference with a different
approach, i.e., concolic execution. Since ETHBMC is a multi-
threaded system, we raise the timeout limit to one hour ensur-
ing the difference it not by chance. We disabled the memcopy
feature, leaving us with a memory model similar to other
memory models discussed in Section 3.3. When disabling
inter-contract calls, we still simulate a full environment with
transaction (and thus Ether transfer), i.e., we still simulate an
USENIX Association
29th USENIX Security Symposium    2769
Table 4: Ablation Study of ETHBMC
Features
teEther
Baseline ETHBMC
+ Memory
+ Keccak
+ Calls
Steal Ether
Hijack
Suicidal
1,509
1,543
1,557
1,628
1,681
8
50
51
51
51
(+0.91%)
(+4.56%)
(+3.36%)
(+2%)
-
1,403
1,409
1,425
1,431
(+0.43%)
(+1.13%)
(+0.42%)
Total
-
2,709
2,725
2,803
2,856
(+0.6%)
(+2.86%)
(+1.89%)
attacker account executing the victim account. However, the
analyzed contract cannot call (or DELEGATECALL) into other
accounts. Lastly, we disable the keccak handling presented
in Section 4.6, overapproximating every keccak computation
with a fresh symbolic variable.
The results are presented in Table 6.4. Note the Baseline
ETHBMC row refers to ETHBMC with all three features
turned off. The percentages are calculated relative to the pre-
vious row, read top to bottom, i.e., additionally enabling the
keccak handling resulted in a 4.56% increase compared to
only enabling a full memory model. The study clearly shows
that all three features play a crucial role in discovering addi-
tional bugs when compared to previous approaches. While the
memory feature might not seem too important, note that the
memory model is so precise to enable inter-contract analysis.
As presented in Section 4.5, when executing an inter-contract
call, the calldata of the new call is copied from the old exe-
cution memory. In the same vein, the returndata of the call
gets copied back to execution memory. Thus, one might also
interpret these features as one, which puts them to an about
equal contribution to the keccak handling.
6.5 SMT Solver
All executors evaluated in Section 3.3 use Z3 as their back-
end solver [33, 36, 39, 41, 46]. However, during our research
we empirically discovered that using other SMT solvers re-
sulted in a drastic performance gain. We compare three par-
ticipants of the 2018 SMT competition [26] in the category
QF_ABV (quantiﬁer-free theory of arrays and bitvectors),
Boolector [44], Z3 [12], and Yices2 [15]. From the account
addresses computed in Section 6.2, we randomly sampled
1,000 addresses to evaluate our backend SMT solver. All ex-
periments were run on a server with an Intel Xeon X5650
CPU and 48GB Memory. We run ETHBMC on the 1,000
addresses and recorded all queries sent to the SMT solver
resulting in 1,161,498 unique queries. From these queries, we
randomly sampled 10,000 queries and ran them on each solver
5 times, with a two minute timeout, averaging the results.
The results are plotted in Figure 4. We omit some smaller
formulas since all solver handle them almost instantly. The
best performing solver in our experiments is by a wide margin
Yices2, followed by Boolector and Z3 being the worst. From
anecdotal evidence, we can report that switching our backend
Figure 4: Solving time for a sample of formulas produced by ETHBMC
across various common solvers.
solver to Yices2 cut our analysis time down by a third. Thus,
we highly encourage other projects to evaluate this change as
well and test different SMT solvers.
7 Discussion
In the following, we discuss the underlying assumptions and
limitations of ETHBMC.
Environment Model While our environment model is pre-
cise, we still have to impose some limitations on it. When
executing an instruction which interacts with other accounts
in the environment, e.g., the instruction BALANCE or CALL, we
only consider accounts in the currently loaded environment
as valid targets. Otherwise, we would have to consider every
single account in the Ethereum ecosystem as a valid target.
While we could simply model the execution fully symbol-
ically, this would also introduce the drawback that such an
2770    29th USENIX Security Symposium
USENIX Association
1021031041050100101102Z3BoolectorYicesFormulaSizeSolvingTimeaccount constellation might never even be possible. Thus,
we decided to only consider accounts supplied to the envi-
ronment or discovered during live analysis. Also, we do not
model account creation. At the time of writing and to the best
of our knowledge, no one has evaluated account creation as
an attack vector.
Restrictions During our evaluation, we had to impose some
restrictions on our framework, such as bounding loops and
setting a time limit. While some of these restrictions cannot
be lifted completely, e.g., we always have to impose an upper
limit on loops, raising the timeout limit or loop count may
lead to discovering bugs hidden deeper in programs. The same
applies for contract invocations, i.e., ETHBMC cannot ﬁnd
bugs, which require more than three transactions. Also, we
only model one attacker account at the moment. However,
since smart contracts are used to model complex systems,
actually including additional attacker or user accounts might
lead to discovering interactions which may only be triggered
when multiple parties are using the contract. Note that since
ETHBMC already supports a full environment, it has the
capabilities to be used in this fashion.
Extending to Other Vulnerabilities Our model checking
approach can detect new attack vectors by modeling new
vulnerabilities as constraints. Additionally, EthBMC can be
utilized to provide formal guarantees over contracts. An an-
alyst would model the correct behavior of the contract as a
constraint system. In a standard model checking procedure,
EthBMC would then be used to check if there exists a state
which is both reachable, as well as satisfying the negation of
the constraint system. These properties prove a violation of
the correct behavior. The reachability assesses that the state
is feasible in practice. The constraint system of the correct
behavior is a subset of all feasible program states. When we
ﬁnd a state outside of this subset (i.e., the negation), which is
also feasible in practice, we found a violation of this behavior.
Comparison to Other Analysis Techniques The differ-
ence between analysis techniques is typically characterized
by a trade-off between ﬂagging more bugs, but at the same
time introducing more false positives. For example crypto-
graphic schemes [16] are a common occurrence on Ethereum.
Assuming our example in Listing 1, where an attacker has to
supply a correct pre-image for a keccak value. If an attacker
knows the particular value, e.g., it is a publicly known value,
they could bypass the check and destroy the contract. We
assume in the general case that an attacker is oblivious to this
value. However, approaches which overapproximate keccak
computations, e.g., by simply assuming it could result in any
value (see for example Securify or Vandal), ﬂag the contract
as vulnerable accordingly. Thus, these approaches might de-
tect bugs “hidden” behind these code constructs. Yet, at the
same time they burden an analyst with more false positives,
resulting in wasting valuable audit time.
Scalability Similar arguments can be made for scalability:
Again, assuming the keccak example. We encode these com-
putations with our strict encoding scheme, which results in
higher analysis time due to the added complexity. If we would
simply assume that the computation could have any results,
i.e., overapproximate it, this makes reasoning straight forward.
This is demonstrated when examining the analysis time of
tools like MadMax: While we solve about 80 % of all con-
tracts in the ﬁrst minute, these tools analyze about 90 % in
the ﬁrst 20 seconds. Similar performance is reported by a
comparison conducted by Brent et al. [4] for Vandal, Mythril,
and Oyente. However, this faster analysis comes at the cost
of more false positives to evaluate. During a normal develop-
ment cycle of a smart contract, where the developer quickly
iterates over many versions of the contract, they could utilize
“faster” tools. Finally, before deploying to the blockchain, a
ﬁnal precise analysis could be conducted using ETHBMC.
Impact Giving a fair assessment of the practical impact
EthBMC could have is quite hard. Since the Ethereum system