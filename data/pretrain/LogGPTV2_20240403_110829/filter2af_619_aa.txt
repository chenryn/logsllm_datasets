字数：1w6
推荐阅读时间：>2h
## 前言
其实起因是听老哥讲 **"shiro-721可以用JRMP的payload，短很多，1分钟就可以跑出来"**
，啊！JRMP，RMI学过，我会的我会的.......实际上我会个锤子，YSO-JRMP的模块根本没用过。
> 但实际上本文只是顺道解决了这个问题的原理，如果只是想知道这个原理，可以到下篇的
> JRMP服务端打JRMP客户端(ysoserial.exploit.JRMPListener) 中去解答这个疑问，利用方式是同理的。
然后有一天看了一波别人攻击RMI服务的工具，瞬间三观崩坏，打脸piapia响！
于是.....花了按照月为单位的很长时间洋洋洒洒写了3w字的文整理了针对RMI服务的9种攻击方式，长文少有人能看下去，先丢上最终的研究的结果吧。（其实我感觉是不是应该去混议题的，算了资历尚浅，下次一定。死人脸）
如果觉得有什么出入，喷就完事了；  
同时觉得本文对你有帮助， ~~也请留言、评论、关注、一键三连支持你喜欢的up主！你的点赞是我更新的动力！如果这期点赞超过20w，下篇文章直播吃.....~~
咳...同时由于文章实在过长，图片多达74张，将全文分为上、下两篇。
在上篇中将讲述 **针对已知RMI接口的三种攻击方式** 与 **针对RMI层（RMI注册端、RMI服务端）/DGC层** ，是对已有常见利用方式的总结。
而在下篇中将重点讲述 **绕过JEP290的引入JRMP的利用方式**
，这就很好玩了，指出了别的老哥的错误之处，找到了别人没提及的骚姿势，复现分析了老外的绕过方式。
上下篇的小结论是沿用的，建议配合食用；文中实验代码、环境及工具均已上传[github](https://github.com/lalajun/RMIDeserialize)。
此外安利下[ysomap](https://github.com/wh1t3p1g/ysomap)，如果没有意外的话，之后会陆续把这些攻击方式都移植过去（已经支持大部分攻击方式）。
## 回顾稚嫩的过去
在学习了一整子之后回过头去看之前对于RMI的理解真是片面啊......  
在 RMI 反序列化一文中，我们把RMI服务的攻击维度分成四个方向：
  1. 探测利用开放的RMI服务
  2. 基于RMI服务反序列化过程的攻击
  3. 利用RMI的动态加载特性的攻击利用
  4. 结合JNDI注入
>
> 我个人推荐把第一、第二方向与第三、第四个方向隔离开讨论与理解，第二个点是标准反序列化利用套路（readobject入口点+利用链+RCE）。同第一个一样都是针对RMI服务进行攻击，即打一个1099端口。
>
>
> 而第三、第四个点则是想办法让对方服务器加载我们的恶意类，在对方服务器上实例化的时候执行恶意的构造函数或静态方法等（JNDI由于代码还可以执行另一个方法，这里不多说了）
>
> **我们在本文中只专注讨论剖析 探测利用开放的RMI服务、基于RMI服务反序列化过程的攻击**
我们对于 **1.探测利用开放的RMI服务** 简单纸上谈兵了一下：可能存在可以利用的随便写入文件的类啦巴拉巴拉。
同时简单复现了其中的 **2.基于RMI服务反序列化过程** 的攻击：
在起一个有CC利用链（Commons-Collections）的RMI服务端之后，我们将服务端提供的服务的接口参数设置成Object类型（因为我们的payload就是Object对象）然后再拿这个object的payload去打提供服务的RMI服务端，成功。
    String url = "rmi://127.0.0.1:1099/User";
    User userClient = (User)Naming.lookup(url);
    userClient.say("world");
    userClient.dowork(getpayload());
    //dowaok接受一个Object函数，这时候我们传入恶意object会在对方服务器readobject反序列化
于是那时候总结就是，如果RMI服务端可以被攻击成功需要：
  1. 服务端提供一个RMI服务，提供的RMI服务的方法的参数必须为Object（因为我们的payload是Object）
  2. 服务端有可以被利用的反序列化利用链及环境
于是就觉得辣鸡漏洞，还需要对方提供一个Object的对象来把自己的payload对着这个Object点塞进去才行。实际情况咋可能，垃圾。
实际上，对于之前讨论的：
  1. 我们没有对探测利用开放的RMI服务进行进一步探究，到底是怎么探测的？
  2. RMI客户端打RMI服务端我们知道需要一个Object接口，但是我们是可以查询到这个接口是不是有Object参数，然后真的就条件这么苛刻，没有其他办法了么？
  3. 之前的分析，完全忽略了 **RMI注册端** 的情况。
  4. 之前的分析，完全片面理解了针对RMI服务的攻击，实际上还有很多利用方式和细节，简直管中窥豹。
  5. 我们没有继续分析相应的利用工具的使用以及实现细节。
  6. 我们没有继续分析在JDK版本更新中对于封堵的绕过情况
这是一长串的一环套着一环的疑问，
我们先来解决第一个问题 **探测利用开放的RMI服务到底是个怎样攻击的流程** 。
## 探测利用开放的RMI服务
之前我们讲到探测利用开放的RMI服务，使用工具[BaRMIe](https://github.com/NickstaDB/BaRMIe)去寻找可受攻击的RMI服务，比如可能提供了文件上传等危险功能，一种就跟普通web测试差不多的很简单的感觉。
但实际上我们要调用一个存在危险功能的RMI服务端需要知道：RMI对象 **a** 、方法 **b** 、参数 **c** ，即`a.b(c)`
自然会认为我们作为RMI客户端向RMI注册端查询有哪些RMI服务端，然后再去RMI服务端查询接口和参数，再根据返回的接口和参数，构造利用就好了。
但是回忆一下在上一篇中讲述的RMI通讯流程，好像压根就没有RMI客户端向RMI服务端查询接口（方法和参数）的这一步骤，都是本地写一个一模一样的接口然后直接调用的。
那么我们得不到方法和参数，实际上是不是根本就没有探测利用开放的RMI服务利用这么一说呢？
我们来看 **BaRMIe工具** 是怎么做的。
### BaRMIe
先分析下这个工具——[BaRMIe](https://github.com/NickstaDB/BaRMIe)。工具提供了两种利用模式——`enum`枚举模式，`attack`攻击模式。
Github下载源码，然后Debug一下这个工具，idea使用 **listen to remote JVM** 的形式进行调试。
idea端：
源码处下断点，复制图中那个Command line，然后删掉<>可选，命令行运行比如：
`java
-agentlib:jdwp=transport=dt_socket,server=n,address=LAPTOP-50N17D1J:5005,suspend=y
-jar BaRMIe.jar -enum 127.0.0.1 1099`
就可以调试了。（复制过去是不行的因为address不一样）
看enum枚举模式。入口在`nb.barmie.modes.enumeration.EnumerationTask#run`
代码不复杂就不大篇幅注解了，主要分为几步，直接总结下：
**第一步** ：`ep = this._enumerator.enumerateEndpoint(this._target);`
作为RMI客户端向RMI注册端获取RMI服务端信息，这里叫做Endpoint，并分析Endpoint是RMI服务端
  1. `LocateRegistry.getRegistry`获取目标IP端口的RMI注册端
  2. `reg.list()`获取注册端上所有服务端的Endpoint对象
  3. 使用`reg.unbind(unbindName);`解绑一个不存在的RMI服务名，根据报错信息来判断我们当前IP是否可以操控该RMI注册端（如果可以操控，意味着我们可以解绑任意已经存在RMI服务，但是这只是破坏，没有太大的意义，就算bind一个恶意的服务上去，调用它，也是在我们自己的机器上运行而不是RMI服务端）
  4. 本地起一个代理用的RMI注册端，用于转发我们对于目标RMI注册端的请求（在RaRMIe中，通过这层代理用注册端可以变量成payload啥的，算是一层封装；在这里用于接受原始回应数据，再进行解析）
  5. 通过代理服务器`reg.lookup(objectNames[i]);`遍历之前获取的所有服务端的Endpoint。
  6. 通过代理服务器得到lookup返回的源数据，自行解析获取对应对象相应的类细节。（因为直接让他自动解析是不会有响应的类信息的）
至此就获取了如下信息，可以看到会解析出RMI服务端的类名等等。
如果这些信息都获取成功，就会判定为这个端口是一个注册端，否则觉得这个不是注册端，输出
但是实际上你一个根本没开的端口扫描结果也会跟你说是一个RMI服务接口，随便看看就好了，相当于失败了。
**第二步** ：`attacks = RMIAttackFactory.findAttacksForEndpoint(ep);`：
对于所有Endpoint（RMI服务端）进行遍历，再一一调用攻击模块判断是否可以攻击。
攻击模块如下：
在看完代码后，我把他们根据攻击类型划分如下：
  1. RMI客户端探测利用RMI服务：
    Axiom
        -DeleteFile
        -ListFiles
        -ReadFile
        -WriteFile
  1. RMI客户端反序列化攻击RMI服务端——利用Object类型参数（RMI服务端提供的对象的方法参数有一个是Obejct类型）
    Java
        -JmxDeser
    SpringFramework
        -RmiInvocationHandlerDeser
        -Spring2RmilnvocationHandlerDeser
  1. RMI服务端攻击RMI注册端——Bind类攻击
    Java
        -IllegalRegistryBind
以上当然这就有超出了探测利用RMI服务以外的类型，我们先划分出来。看看调用攻击模块之后做了什么，再回过头一个个分析攻击模块。
**第三步** ：`deserPayloads = DeserPayloadFactory.findGadgetsForEndpoint(ep);`
对于所有Endpoint（RMI服务端）进行遍历，尝试判断是否存在反序列化利用链。
  1. 其判断的原理大概是，判断RMI注册端提供的RMI服务端的对象class（如：com.lala.User）的路径中（不是非常确定？)，是否包含存在已知反序列化利用链的jar包。
这是一个比较不靠谱的判断是否存在反序列化利用链的方法，反正我靶机中服务端有CC利用链，但是无法探测到。
其中工具中已知反序列化利用链的jar包类别如下：
    CommonsCollectionsPayload
    GroovyPayload
    JBossInterceptorsPayload
    ROMEPayload
    RhinoPayload
### 看看探测利用开放的RMI服务的攻击模块是怎么实现的
4个攻击模块Delete、List、Read、Write都是针对AxiomSL这个组件。看一个List的。
描述：AxiomSL公开一个对象FileBrowserStub，它有一个list files（）方法，该方法返回给定目录中的文件列表。
在判断是否存在漏洞时会去判断RMI服务返回的对象的class栈中是否存在以下class路径：
    axiomsl.server.rmi.FileBrowserStub
判断存在该class路径后，再进行利用；实际利用代码也很简单，就是普通的RMI服务调用：
    //nb.barmie.modes.attack.attacks.Axiom.ListFiles#executeAttack
    public void executeAttack(RMIEndpoint ep) throws BaRMIeException {
            //一些参数设定    
            //用户输入一个想要列出的文件目录
            path = this.promptUserForInput("Enter a path to list files from: ", false);
            System.out.println("");
            //向eq（RMI服务端）lookup一个FileBrowserStub对象
            //同时本地也写好了FileBrowserStub接口
            System.out.println("[~] Getting fileBrowser object...");
            fbs = (FileBrowserStub)this.getRemoteObject(ep, "fileBrowser");
            //调用listFilesOnServer方法获取调用结果
            files = fbs.listFilesOnServer(path);
        }
    /***********************************************************
     * FileBrowserStub for AxiomSL attacks.
     **********************************************************/
    public abstract interface FileBrowserStub extends Remote {
        public abstract FileInformation[] listFilesOnServer(String paramString) throws RemoteException;
        public abstract byte[] readFile(String paramString, long paramLong, int paramInt) throws IOException;
        public abstract void writeFile(String paramString, byte[] paramArrayOfByte) throws IOException;
        public abstract boolean deleteFile(String paramString, boolean paramBoolean) throws RemoteException;
        public abstract FileInformation getFileInformation(String paramString) throws RemoteException;
    }
那这边也就清楚了，实际上探测利用开放的RMI服务，根本只是攻击者自己知道有哪些组件会提供危险的RMI服务。然后根据class路径去判断对面是否使用了该组件，如果用了就尝试打一打看看成不成功。
假如对面提供了我们一个不认识的RMI服务，我们是没有能力攻击的。
就如之前提到的一样：因为我们没有RMI服务对象的接口（方法+参数）。就算对面开放了一个Class名字可疑的服务，我们也没有办法去正确调用它。
可见这种理论存在但是不怎么被人讨论的攻击方法总是有些鸡肋。
## RMI客户端反序列化攻击RMI服务端
那么再看之前的工具中的第二类攻击形式——RMI客户端反序列化攻击RMI服务端
### 利用Object类型参数
3个攻击模块都是利用有Object类型参数的接口，来传入Object类型的payload，在RMI服务端对Object类型的参数进行反序列化时，触发payload来完成反序列化攻击的。
    Java
        -JmxDeser
    SpringFramework
        -RmiInvocationHandlerDeser
        -Spring2RmilnvocationHandlerDeser
这三个攻击模块同样是针对特定的组件提供的RMI服务，在判断是否存在漏洞时，代码会去判断RMI服务返回的对象的class栈是否存在以下class路径：
    javax.management.remote.rmi.RMIServerImpl_Stub
    javax.management.remote.rmi.RMIServer
    org.springframework.remoting.rmi.RmiInvocationWrapper_Stub
    org.springframework.remoting.rmi.RmiInvocationHandler
**利用Object类型参数** 跟探测利用开放的RMI服务一样，也是假如对面自实现了RMI服务，我们没有接口的话就两眼摸黑，无法下手。
还是继续看看BaRMIe是怎么攻击的，以Spring RMI服务为例。
描述：Spring RMI
Remoting使用invoke（）方法公开一个远程类，该方法接受一个RemoteInvocation对象作为参数。RemoteInvocation对象有一个可以保存任何对象的属性，从而启用反序列化攻击。
    //nb.barmie.modes.attack.attacks.Java.JMXDeser#executeAttack    
    public void executeAttack(RMIEndpoint ep, DeserPayload payload, String cmd) throws BaRMIeException {
            RMIServer obj;
            //eq是RMI服务
            //payload是选取的payload种类
            //cmd是我们要在目标执行的命令
            //开始攻击