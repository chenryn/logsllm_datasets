Gen takes n as a security parameter and outputs a pair of
keys (pk, sk), the public and private keys respectively; (2)
Enc takes as input the public key pk and encrypts a message
(plaintext) r to return a ciphertext c = Enc(pk, r); (3) Dec
takes as input the private key sk and a ciphertext c to decrypt a
message r = Dec(sk, c). We only need to discuss public-key
cryptosystems encrypting 1-bit messages (0 and 1).
One of the security requirements of a public-key cryptosys-
tem is that it is computationally infeasible for an adversary,
knowing the public key pk and a ciphertext c, to recover the
original message, r. This requirement can also be interpreted
as the need for indistinguishability under the chosen plaintext
attack (also often referred to as semantic security requirement)
[24]. Given the encryption function Enc and the public key
pk, the goal of an attacker is to devise a distinguisher A to
distinguish between encryption Enc(pk, r) of r = 0 and r = 1
with non-negligible probability:
|Pr[A(pk, Enc(pk, 0)) = 1]−Pr[A(pk, Enc(pk, 1)) = 1]| ≥ .
A cryptosystem is semantically secure if no polynomial-
time attacker can correctly predict the message bit with non-
negligible probability.
The connection between the above-stated security of a
public-key cryptosystem and the hardness of learning a con-
cept class associated with its decryption function was estab-
lished in [25], [28]. The insight of [25], [28] is that PAC-
learning is a natural result of the ease of encrypting messages
with a public key. Since the encryption function Enc and
the public-key pk is known, the distinguishing algorithm can
sample independent training examples in the following way:
(1) picking a plaintext bit r uniformly randomly from {0, 1},
(2) encrypting r to get the ciphertext c = Enc(pk, r). (We
later refer to the resulting distribution of ciphertext as the
”ciphertext distribution”.) Next, the distinguishing algorithm
passes the set of training examples ((c, r)’s) into an algo-
rithm for learning the decryption function Dec(sk,·). The
PAC learning algorithm returns a model h(·) that aims to
approximate Dec(sk,·). Using h(·), one could distinguish
between ciphertexts stemming from r = 0 and r = 1 with
non-negligible probability. This would entail violating the
semantic security of the cryptosystem. Technically, this can
be summarized as follows [25], [28].
Theorem 1: If a public-key cryptosystem is secure against
chosen plaintext attacks, then its decryption functions are not
PAC-learnable (under the ciphertext input distribution).
C. LWE Is Post-Quantum Secure
integer-factoring-based cryptosystems,
According to the cryptographic hardness above, decryption
functions of any secure public-key cryptosystem, such as
Rivest–Shamir–Adleman (RSA) and elliptic-curve cryptogra-
phy (ECC), can be used to construct ML-resistant PUFs. How-
ever,
including RSA
and ECC above, become insecure with the development of
quantum computers. Among all post-quantum schemes [6], the
LWE cryptosystem based on hard lattice problems appears to
be most promising due to its implementation efﬁciency and
stubborn intractability since 1980s.
A lattice L(V) in n dimensions is the set of all integral
linear combinations of a given basis V = {v1, v2, . . . , vn}
with vi ∈ Rn:
L(V) = {a1v1 + a2v2 + . . . anvn : ∀ai ∈ Z}.
The LWE problem is deﬁned on the integer lattice L(V) =
{(a,(cid:104)a, s(cid:105))} with a basis V = (I; s), in which I is an n-
dimensional identity matrix and s is a ﬁxed row vector (also
called the secret) in Zn
q . Throughout this paper, vectors and
matrices are denoted with bold symbols with dimension on
superscript, which can be dropped for convenience in case
of no confusion. Unless otherwise speciﬁed, all arithmetic
operations in the following discussion including additions and
multiplications are performed in Zq, i.e. by modulo q.
For the lattice L(V) = {(a,(cid:104)a, s(cid:105))} with dimension n,
integer modulus q and a discrete Gaussian distribution ¯Ψα for
noise, the LWE problem is deﬁned as follows. The secret vec-
tor s is ﬁxed by choosing its coordinates uniformly randomly
from Zq. Next ai’s are generated uniformly from Zn
q . Together
with the error terms ei, we can compute bi = (cid:104)a, s(cid:105) + ei.
q × Zq is called the LWE
Distribution of (ai, bi)’s over Zn
distribution As, ¯Ψα. The most important property of As, ¯Ψα is
captured in the following lemma:
Lemma 1: Based on hardness assumptions of several lattice
problems, the LWE distribution As, ¯Ψα of (a, b)’s is indistin-
guishable from a uniform distribution in Zn
q × Zq.
Solving the decision version of LWE problem is to distin-
guish with a non-negligible advantage between samples from
q × Zq. This
As, ¯Ψα and those generated uniformly from Zn
LWE problem is shown to be intractable to solve, without
knowing the secret s, based on the worst-case hardness of
several lattice problems [41]. Errors e are generated from a
discrete Gaussian distribution ¯Ψα on Zq parameterized by
√
α > 0: sampling a continuous Gaussian random variable with
2π and rounding it to
mean 0 and standard deviation αq/
the nearest integer in modulo q. Notice that error terms are
also essential for guaranteeing the indistinguishability: without
noise (a, b) becomes deterministic and the secret s can be
solved efﬁciently via Gaussian elimination methods.
We now describe a public-key cryptosystem based on the
LWE problem above in [9]:
q
Deﬁnition 1: (LWE cryptosystem)
• Private key: s is uniformly random in Zn
q .
• Public key: A ∈ Zm×n
is uniformly random, and e ∈
Zm
q with each entry from ¯Ψα. Public key is (A, b =
As + e).
• Encryption: x ∈ {0, 1}m is uniformly random. To
encrypt a one-bit plaintext r, output ciphertext c =
(a, b) = (AT x, bT x + r(cid:98)q/2(cid:99)).
• Decryption: Decrypt the ciphertext (a, b) to 0 if b−(cid:104)a, s(cid:105)
is closer to 0 than to (cid:98)q/2(cid:99) modulo q, and to 1 otherwise.
Notice that each row in the public-key (A, b) is an instance
from the LWE distribution As, ¯Ψα.
Correctness of the LWE cryptosystem can be easily veriﬁed:
the error terms, b − (cid:104)a, s(cid:105) is either 0 or (cid:98)q/2(cid:99),
without
depending on the encrypted bit. Semantic security of the LWE
cryptosystem follows directly from the indistinguishability
of the LWE distribution from the uniform distribution in
q × Zq. Ciphertexts (a, b) are either linear combinations or
Zn
shifted linear combination of LWE samples, both of which
are indistinguishable from the uniform distribution. This is
true because shifting by any ﬁxed length preserves the shape
of a distribution. Therefore, an efﬁcient algorithm that can
correctly guess the encrypted bit would be able to distinguish
LWE samples from uniformly distributed samples. This allows
[41] to prove that:
Theorem 2: Based on the hardness assumptions of several
lattice problems,
the LWE cryptosystem is secure against
the chosen-plaintext attacks using both classical and quantum
computers.
When the error terms ei’s are introduced:
b − (cid:104)a, s(cid:105) =
decryption error to occur, the accumulated error(cid:80)
in which S is the set of non-zero coordinates in x. For a
i∈S ei must
be greater than the decision threshold (cid:98)q/4(cid:99). The probability
(cid:99)r − (cid:104)(cid:88)
i∈S
((cid:104)ai, s(cid:105) + ei) − (cid:98) q
2
i∈S
bi + (cid:98) q
2
(cid:88)
(cid:88)
(cid:99)r −(cid:88)
=
i∈S
=(cid:98) q
2
ei,
i∈S
ai, s(cid:105)
(cid:99)r − (cid:104)(cid:88)
i∈S
ai, s(cid:105)
of the error is given by [37]:
ErrLWE ≈ 2(1 − Φ(
= 2(1 − Φ(
αq(cid:112)m/2/
q/4
√
√
√
π
m
2α
)),
))
2π
in which Φ(·) is the cumulative distribution function of the
standard Gaussian variable. We later use this expression to
ﬁnd the practical parameters for the lattice PUF.
IV. DESIGN OF LATTICE PUF
The theoretical security guarantees in Section III shows that
an LWE decryption function can be used as a strong PUF with
challenges generated from a ciphertext distribution. In this sec-
tion, we ﬁrst derive design parameters for the LWE decryption
function and show that such a direct implementation of lattice
PUF is inefﬁcient in resource constrained environments due to
high-ratio of ciphertext to plaintext. As we will illustrate in the
following, an LWE decryption function with a 128-bit concrete
ML hardness requires transmitting 128.8K challenge bits in
order to produce a 100-bit response string. We then solve this
problem by exploiting distributional relaxations allowed by
recent work in space-efﬁcient LWEs. The proposed strategy
allows introducing a low-cost PRNG based on an LFSR and
transmitting only a small seed, which results in a dramatic
reduction of effective challenge size. Last, we introduce a
simple defense to protect our PUF against a standard active
attack on the LWE decryption function.
The top-level architecture of the proposed lattice PUF is
shown in Figure 1.
A. LWE Decryption Function
Figure 2 shows the core component of the proposed lattice
PUF: the LWE decryption function. It takes a binary challenge
vector c = {c0, c1, . . . , cN−1} of size N = (n+1) log q which
maps to a ciphertext (a, b) in the following way:
log q−1(cid:88)
log q−1(cid:88)
j=0
j=0
ai =
b =
log q−1(cid:88)
c(i−1) log q+j2j, ∀i ∈ {1, 2, . . . , n},
cn log q+j2j.
Here ai denotes the i-th element of the integer vector a ∈
Zn
q . In this paper, without speciﬁcation,
log(x) refers to
log2(x). Similarly, the private key s for the corresponding
LWE decryption function is realized by a binary secret key
W = {W0, W1, . . . , Wn log q−1} of size n log q:
si =
W(i−1) log q+j2j, ∀i ∈ {1, 2, . . . , n}.
j=0
A modulo-dot-product b − (cid:104)a, s(cid:105) is computed using the
modulo-multiply-accumulate unit. It can be implemented in
a serial way using n stages. Recall that all additions and mul-
tiplications are performed in modulo q. Since q is a power of 2
in our construction, modulo addition and multiplication can be
naturally implemented by integer addition and multiplication
that keep only the last log q-bit result. Finally the response r
is produced by a quantization operation r = Q(b − (cid:104)a, s(cid:105)):
(cid:40)
Q(x) =
4 ] ∪ ( 3q
0 x ∈ [0, q
1 x ∈ ( q
4 , 3q
4 ].
4 , q − 1],
The computation above can be directly implemented as a
strong PUF with 2N CRPs since it maps a challenge vector
c ∈ {0, 1}N into a binary response r ∈ {0, 1}. We now
discuss parameter selection for the LWE decryption function.
In general, we seek to ﬁnd design parameters such that (1)
the resulting PUF has excellent statistical properties, such as
uniformity, uniqueness, and reliability, (2) successful ML at-
tacks against it require an un-affordably high time complexity
in practice, and (3) its hardware implementation costs are
minimized.
Prior theoretical arguments establish the impossibility of
a polynomial-time attacker. To guarantee practical security,
we need to estimate the number of samples and the actual
running time (or a number of CPU operations) required for
a successful ML attack. [41] shows that a small number of
samples are enough to solve an LWE problem, but in an
exponential time. Thus, we refer to runtime as concrete ML
resistance (or ML hardness) and say that a PUF has k-bit
ML resistance if any successful ML attack requires at least
2k operations. We adopt the estimator developed by Albrecht
et al. [3] to estimate concrete ML hardness. The concrete
hardness of an LWE problem increases with the increase of
LWE parameters n, q, and α for all types of attacks. Recall
that n represents the lattice dimension, q represents the range
of integer for each dimension, and α reﬂects the noise level in
CRP (ciphertext) generation. For a given set of parameters, the
estimator compares the complexity of several most effective
attacks, including decoding, basis reduction, and meet-in-the-
middle attacks [11], [20], [31]. We utilize the estimator in a
black-box fashion to ﬁnd the set of parameters with the target
of 128-bit concrete ML resistance.
We consider two metrics of implementation cost, both of
which scale with n:
the number of challenge and secret
bits needed (n log q), and the number of multiply-accumulate
(MAC) operations (n). This motivates the need to decrease n.
For conventional PUFs, such as APUF and SRAM PUF, an
output error is due to environmental noise, e.g. delay changes
in APUF and FET strength changes in SRAM PUF with
both voltage and temperature. In contrast, output errors of the
lattice PUF come from two sources: (1) environmental errors
of secret bits, and (2) errors of decryption during response
generation. The former can be thought as the failure of key
reconstruction in POKs. Since a single bit-ﬂip completely
changes the challenge-response behavior of LWE decryption
function, the failure rate of key reconstruction needs to be low,
e.g. 10−6 (as widely adopted in other PUF applications [34]).
Section V describes how the target failure rate can be achieved
via a conventional FE based on the error-correcting codes. The
Fig. 1: Top-level architecture and data ﬂow of the lattice PUF.
Fig. 2: Architecture of LWE decryption function.
Fig. 3: Super-exponential decrease of decryption error rate
with the increase of secret bits. The analysis is done for 128-
bit concrete hardness.
latter corresponds to the decryption error and is orthogonal to
errors in the secret key s. Recall that in CRP generation of the
lattice PUF, a bit of plaintext r is sampled and the ciphertext
c is produced by a noisy encryption function c = Enc(r).
Given ciphertext c as input challenge, the decryption function
(cid:54)= r when the accumulated
can output a wrong response r(cid:48)
i∈S ei in the encryption function exceeds the decision
error(cid:80)
boundary.
The model for evaluating the decryption error rate is shown
in Section II. In order for a strong PUF to be used in
direct authentication, its decryption error rate should be small
enough for reliable distinguishability of long strings. We set
the target around 2%. Figure 3 explores the trade-off between
the number of secret bits and the decryption error rate needed
for 128-bit concrete ML hardness. It shows that, at ﬁxed
concrete ML hardness, the decryption error rate decreases
super exponentially with the number of secret bits.
Considering the design metrics above, a feasible set of
parameters is found using the estimator in [3]. By setting
n = 160, q = 256, m = 256 and α = 2.20%, we achieve
a lattice PUF with 128-bit concrete hardness and a decryption
error rate of 1.26%.
In order to get a 1-bit response, (n + 1) log q = 1288
bits need to be sent to the lattice PUF as a challenge. For