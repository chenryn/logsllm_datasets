# Computational Soundness of Observational Equivalence

**Authors:**
- Hubert Comon-Lundh, ENS Cachan, AIST, Akihabara-Daibiru, Tokyo, Japan
- VÃ©ronique Cortier, LORIA, CNRS & INRIA project CASSIS, Nancy, France

## Abstract

Many security properties are naturally expressed as indistinguishability between two versions of a protocol. In this paper, we show that computational proofs of indistinguishability can be significantly simplified for a class of processes that covers most existing protocols. Specifically, we demonstrate a soundness theorem, following the research initiated by Abadi and Rogaway in 2000: computational indistinguishability in the presence of an active attacker is implied by the observational equivalence of the corresponding symbolic processes.

We prove our result for symmetric encryption, but the same techniques can be applied to other security primitives such as signatures and public-key encryption. The proof introduces new concepts that are general and can be reused in other settings.

**Categories and Subject Descriptors:**
- D.2.4 [Verification]: Formal methods

**General Terms:**
- Verification

## 1. Introduction

Two families of models have been designed for the rigorous analysis of security protocols: the so-called Dolev-Yao (symbolic, formal) models and the cryptographic (computational, concrete) models. In symbolic models, messages are formal terms, and the adversary can only perform a fixed set of operations on them. The main advantage of the symbolic approach is its relative simplicity, which makes it amenable to automated analysis tools [14]. In cryptographic models, messages are bit strings, and the adversary is an arbitrary probabilistic polynomial-time (ppt) Turing machine. While the proofs in such models yield strong security guarantees, they are often quite involved and seldom suitable for automation.

Starting with the seminal work of Abadi and Rogaway [4], significant efforts have been directed towards bridging the gap between these two approaches. The goal is to achieve the best of both worlds: simple, automated security proofs that provide strong security guarantees. Relevant works can be divided into two categories. The first category ([1, 12, 31] and many others) generalizes Abadi and Rogaway's results, typically considering a larger set of security primitives. However, they still only consider a passive adversary, which rules out "man-in-the-middle" attacks. Analyzing real protocols requires considering active adversaries, which is the aim of the second category of papers (e.g., [8, 18, 22, 30]).

### Trace Properties vs. Equivalence Properties

We define a trace property as a formal statement that something bad never occurs on any trace of a protocol (formally, a property definable in linear time temporal logic). Integrity and authentication are examples of trace properties. These were the first for which computational guarantees were derived from symbolic ones [10, 32].

However, several security properties cannot be defined or naturally defined as trace properties:

- **Anonymity**: States that any two execution traces, in which names are swapped, cannot be distinguished by an attacker. Anonymity requires two instances of the protocol \( P_{AB} \) and \( P_{BA} \), with names \( A \) and \( B \) switched in the second copy. An adversary interacting with one of the two copies should not be able to tell (with non-negligible probability) which copy he is interacting with. There is no known way to reduce this problem to a property of a single protocol copy.
- **Privacy-related properties**: Involved in electronic voting protocols [23] also use an equivalence and cannot be expressed in linear temporal logic.
- **Computational secrecy**: States that the protocol does not leak any piece of the secret (sometimes called "real or random"). This is naturally expressed as an indistinguishability property: the attacker cannot distinguish between two games, one of which is the real protocol, and, in the other, the secret has been replaced by a random string. Several works [32, 9, 22, 26, 18, 21] show how to soundly abstract it as a trace property in the symbolic model, in a number of particular cases. However, it is not clear that such a property can be expressed as a trace property in general.
- **Strong (black-box) simulatability**: States that, given a real protocol \( P \) and an ideal functionality \( F \), there is a simulator \( S \) such that \( P \) cannot be distinguished from \( S^F \) by any environment. This is not a property of any particular trace but rather a relationship between the real traces and the ideal ones. Various notions of universal composability [17, 19] can be defined similarly.

This highlights the importance and generality of indistinguishability properties compared to trace properties.

### Main Question

The main question is whether it is possible to obtain sound abstraction results for computational indistinguishability, analogous to the results obtained so far for trace properties. This is the question we address in this paper, for a sample set of cryptographic primitives.

### Our Contribution

In concurrency theory, a well-known notion is observational equivalence, introduced by Milner and Hoare in the early 1980s. Two processes \( P \) and \( Q \) are observationally equivalent, denoted by \( P \sim_o Q \), if for any process \( O \) (a symbolic observer), the processes \( P \parallel O \) and \( Q \parallel O \) are equally able to emit on a given channel. This means that \( O \) cannot observe any difference between \( P \) and \( Q \). Observational equivalence is therefore a natural candidate for the symbolic counterpart of indistinguishability, with the attacker being replaced by the observer. We show a result of the form: "two networks of machines are indistinguishable if the processes they implement are observationally equivalent." As a consequence, proving computational indistinguishability can be reduced to proving observational equivalence (for a class of protocols and assuming some standard security hypotheses on the cryptographic primitives). This is a simpler task, which can be completely formalized and sometimes automated [15, 24].

We prove our result for symmetric encryption and pairing, using a fragment of the applied pi-calculus [2] for specifying protocols and relying on standard cryptographic assumptions (IND-CPA and INT-CTXT) as well as hypotheses similar to those of [8]. The main difference with this latter work is that we prove the soundness of observational equivalence, which covers more properties. The fragment of applied pi-calculus we consider allows expressing an arbitrary (unbounded) number of sessions of a protocol.

To prove our result, we first show that any computational trace is, with overwhelming probability, an instance of a symbolic one. This lemma is similar to [22, 26], though with different hypotheses and in a different model. A naive idea would be to consider any pair of related symbolic traces: by observational equivalence (and actually labeled bisimilarity), the two traces are statically equivalent. Then we could try to apply the soundness of static equivalence on these traces (using results in the passive case, e.g., [4, 1, 12, 31]). This idea does not work because the computational traces could be spread over the symbolic ones: if there is only one computational trace corresponding to a given symbolic trace, then the symbolic traces' indistinguishability does not tell us anything relevant about the computational ones.

Therefore, we need a new tool. The main technical ingredient of our proof is the introduction of tree soundness in the case of passive attackers and the use of intermediate structures, which we call computation trees. On one end, such trees roughly correspond to the labeled transition semantics of some process algebra, and, on the other end, they are interpreted as an encryption oracle, scheduled by the attacker. These notions are defined independently of the cryptographic setting. Tree soundness captures the fact that even a passive attacker can adaptively choose its requests. It seems related to "adaptive soundness of static equivalence" as defined in [28], though no precise relationship has been established yet. We can then derive a general method for proving that observational equivalence implies computational indistinguishability. We believe our techniques are general and can be reused in other settings. In particular, using our generic approach, it should not be difficult to extend our result to other security primitives like asymmetric encryption and signatures.

### Related Work

In a series of papers starting with Micciancio and Warinschi [32] and continued with e.g., [22, 26], the authors show trace mapping properties: for some selected primitives (public-key encryption and signatures in the above-cited papers), they show that a computational trace is an instance of a symbolic trace, with overwhelming probability. We have a similar result for symmetric encryption in the present paper, but this is not our main contribution.

There is a significant amount of work on simulatability/universal composability, especially the work of Backes et al. and Canetti [17, 11, 10, 8, 9]. In the black-box simulatability approach of [11], which we refer to as BPW, the symbolic model is different from ours: there are essential constructions such as handles, which we do not have in our (more abstract) symbolic model, that is a standard process algebra. The BPW model also requires constructing a simulator within the model, which we do not require. Therefore, we must be cautious with any comparison.

BPW-simulatability roughly states that \([P] \approx P \parallel S\): the computational interpretation of the process \( P \) is indistinguishable from the simulated version of \( P \). As shown in [7], this implies the trace mapping property, hence that symbolic trace properties transfer to the computational level. The BPW-simulatability should also imply the soundness of observational equivalence of the corresponding BPW-processes in a simple way (D. Unruh, private communication). The precise relationships with our work are worth further investigation.

Conversely, if a simulated process \( S \parallel P \) could be seen as the computational interpretation of a process \( Q \), then the BPW-simulatability itself could be seen as an instance of our result.

Our work can also be seen as a generalization of soundness results for static equivalence [4, 3, 12] from a passive attacker to an active one. However, as we sketched above and as we will see in an example later, these results cannot be used directly in the active attacker case, which is the one we consider.

In [18], the authors show how to encode an equivalence property (actually computational secrecy for a given set of primitives) in the symbolic trace, using patterns. This allows showing how an indistinguishability property can be lifted to the symbolic case. The method, contrary to ours, is, however, dedicated to this particular property.

The work of Mitchell et al. [33] also aims at faithfully abstracting the model of interactive Turing machines. Their results concern general processes and not only a small fragment, as we do here. In this respect, they are much more general than us. However, on the other hand, they abstract much less: there are still computations, coin tossing, and probabilistic transitions in their model. Our aim is really to show that it makes no difference if the attacker is given only a fixed set of operations (encryption, decryption, name generation, etc.) and if there are no probabilities or coin tossing.

To our knowledge, the only previous work formally connecting observational equivalence and computational indistinguishability is [6]. In this paper, the authors give soundness and completeness results of a cryptographic implementation of processes. The major difference with our work is that they do not have explicit cryptographic constructions in the formal model. For instance, encryption keys cannot be sent or leaked since they are implicit. Most standard security protocols cannot be described at this level of abstraction without possibly missing attacks. The results of [6] are useful in designing secure implementations of abstract functionalities, not for the verification of existing protocols.

Finally, the work on automation and decision of observational equivalence [25, 15, 24] shows that there exist systematic ways of deriving such equivalences in the symbolic world. This is also the advantage of using a standard process algebra as a symbolic model.

### Organization of the Paper

We first give the definitions of our computational model in Section 2. Next, we recall some general definitions of the applied Ï-calculus in Section 3. Note that, in the following, we only consider a fragment of the calculus for the protocol description (as usual), and we will only consider a particular equational theory corresponding to symmetric encryption. The relationship between the two models, as well as the protocol description language, is given in Section 4.

In Section 5, we present our main result and outline the proof. More details, including intermediate lemmas, the notions of computation trees, tree oracles, and tree soundness, are provided in Section 6. We omit details and proofs in this short paper; they can be found in [20].

## 2. Communicating Turing Machines

Randomized Turing machines are Turing machines with an additional random tape. We assume w.l.o.g. that these machines first draw an infinite random input string on the random tape and then compute deterministically. Communicating Turing machines (CTMs) are randomized machines equipped with input/output tapes and two special instructions: send and receive. They are restricted to work in polynomial time with respect to their original input (see [11] for a discussion).

The adversary is a special CTM with an additional scheduling tape. A network \( F \parallel A \) consists of an adversary \( A \) and a family of CTMs \( F = (M_n)_{n \in \mathbb{N}} \). We also call \( F \) the environment of \( A \). This model is a simplification of interactive Turing machines of [17], keeping only the essential features.

In brief, in the initial configuration, each machine of the network has the security parameter in unary on its input tape and possibly other data such as secret keys. For simplicity, we do not model the key distribution here. Moves between configurations are defined according to the attackerâs view: in each configuration, the attacker decides to perform an internal move, to ask for the initialization of a new machine, or to schedule a communication. In the latter case, the identity of the recipient is written on the scheduling tape, and either a send or a receive action is performed. In case of a send, the contents of the sending tape are copied to the receiving tape of the scheduled recipient, who performs (in one single step) all its computations until waiting for another communication. In case of a receive action, the whole content of the sending tape of the scheduled machine is copied to the receiving tape of the attacker. The number of CTMs in the network is unbounded. Note that this setting allows dynamically corrupted parties, as in most results relating symbolic and computational models. Initially corrupted machines simply send their keys on the network.

We say that a function \( f : \mathbb{N} \to \mathbb{N} \) is negligible if, for every polynomial \( P \), there exists \( N \in \mathbb{N} \) such that for all \( \eta > N \), \( f(\eta) < \frac{1}{P(\eta)} \). We write \( \Pr\{x : P(x)\} \) the probability of event \( P(x) \) when the sample \( x \) is drawn according to an appropriate distribution.