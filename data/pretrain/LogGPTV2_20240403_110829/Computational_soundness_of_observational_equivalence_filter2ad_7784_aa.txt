title:Computational soundness of observational equivalence
author:Hubert Comon-Lundh and
V&apos;eronique Cortier
Computational Soundness of Observational Equivalence
Research Center for Information Security and
LORIA, CNRS & INRIA project CASSIS
Véronique Cortier∗
Nancy, France
PI:EMAIL
Hubert Comon-Lundh
ENS Cachan
AIST, Akihabara-Daibiru, Tokyo, Japan
PI:EMAIL
ABSTRACT
Many security properties are naturally expressed as indis-
tinguishability between two versions of a protocol. In this
paper, we show that computational proofs of indistinguisha-
bility can be considerably simpliﬁed, for a class of processes
that covers most existing protocols. More precisely, we show
a soundness theorem, following the line of research launched
by Abadi and Rogaway in 2000: computational indistin-
guishability in presence of an active attacker is implied by
the observational equivalence of the corresponding symbolic
processes.
We prove our result for symmetric encryption, but the same
techniques can be applied to other security primitives such
as signatures and public-key encryption. The proof requires
the introduction of new concepts, which are general and can
be reused in other settings.
Categories and Subject Descriptors
D.2.4 [Veriﬁcation]: Formal methods
General Terms
Veriﬁcation
1.
INTRODUCTION
Two families of models have been designed for the rigor-
ous analysis of security protocols: the so-called Dolev-Yao
(symbolic, formal) models on the one hand and the cryp-
tographic (computational, concrete) models on the other
hand. In symbolic models messages are formal terms and
the adversary can only perform a ﬁxed set of operations on
them. The main advantage of the symbolic approach is its
relative simplicity which makes it amenable to automated
analysis tools [14] In cryptographic models, messages are
bit strings and the adversary is an arbitrary probabilistic
∗This work has been partially supported by the ARA SSIA
FormaCrypt and the ARA project AVOT´E.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
polynomial-time (ppt) Turing machine. While the proofs in
such models yield strong security guarantees, they are often
quite involved and seldom suitable for automation.
Starting with the seminal work of Abadi and Rogaway [4],
a lot of eﬀorts has been directed to bridging the gap between
the two approaches. The goal is to obtain the best of both
worlds: simple, automated security proofs that entail strong
security guarantees. The numerous relevant works can be
divided into two categories. In the ﬁrst one ([1, 12, 31] and
many others), the authors generalize Abadi and Rogaway re-
sult, typically considering a larger set of security primitives.
However, they still only consider a passive adversary. This
rules out the so-called “man-in-the-middle attacks”. Ana-
lyzing real protocols requires to consider active adversaries,
which is the aim of the second category of papers (e.g.
[8,
18, 22, 30]).
It is also the aim of the present paper. We
consider however a wider class of security properties.
Trace properties vs. Equivalence properties. We
call here a trace property a formal statement that something
bad never occurs on any trace of a protocol. (Formally, this
is a property deﬁnable in linear time temporal logic).
In-
tegrity and authentication are examples of trace properties.
That is why they were the ﬁrst for which computational
guarantees were derived out of symbolic ones [10, 32].
There are however several security properties, which cannot
be deﬁned (or cannot be naturally deﬁned) as trace proper-
ties.
• Anonymity states that any two execution traces, in
which names are swapped, cannot be distinguished by
an attacker. More precisely, anonymity requires two
instances of the protocol PAB and PBA, the names
A, B being switched in the second copy. An adver-
sary interacting with one of the two copies should not
be able to tell (with non-negligible probability) with
which copy he is interacting. There is no known way
to reduce this problem to a property of a single proto-
col copy.
Privacy related properties involved in electronic vot-
ing protocols [23] also use an equivalence and cannot
be expressed in linear temporal logic.
• Similarly, in the computational worlds, anonymity of
group signatures [5] is deﬁned through the indistin-
guishability of two games where diﬀerent identities are
used in each game. A similar deﬁnition is proposed for
“blindness” of signatures in [27].
• The “computational secrecy” states that the protocol
does not leak any piece of the secret (this is sometimes
109called “real or random”). Such a property is naturally
expressed as an indistinguishability property: the at-
tacker cannot distinguish between two games, one of
which is the real protocol, and, in the other one, the
secret has been replaced by a random string. There
are several works [32, 9, 22, 26, 18, 21]showing how to
soundly abstract it as a trace property in the symbolic
model, in a number of particular cases. It is not clear,
however, that such a property can be expressed as a
trace property in general. Consider e.g. the case of a
hash function and assume that a protocol reveals the
hash h(s) of some secret s. Then s cannot be computed
(by one-wayness of h), which, from the trace property
point of view, would be suﬃcient for conﬁdentiality.
On the other hand, an attacker certainly learns some-
thing about s and the computational secrecy is not
preserved.
• Strong (also called “black-box”) simulatability [11, 29],
states that, given a real protocol P and an ideal func-
tionality F , there is a simulator S such that P can-
not be distinguished from SkF by any environment.
Again, this is not a property of any particular trace,
but rather a relationship between the real traces and
the ideal ones. Various notions of universal compos-
ability [17, 19] can be deﬁned in a similar way.
This shows the importance and generality of indistinguisha-
bility properties compared to trace properties.
The main question is then: “is it possible to get sound ab-
straction results for computational indistinguishability, anal-
ogous to the results obtained so far for trace properties ?”
This is the question, which we want to address in this paper,
for a sample set of cryptographic primitives.
Our contribution. There is a well-known similar no-
tion in concurrency theory: observational equivalence, intro-
duced by Milner and Hoare in the early 80s. Two processes
P and Q are observationally equivalent, denoted by P ∼o Q,
if for any process O (a symbolic observer) the processes P kO
and QkO are equally able to emit on a given channel. This
means that O cannot observe any diﬀerence between P and
Q. Observational equivalence is therefore a natural can-
didate for the symbolic counterpart of indistinguishability,
the attacker being replaced by the observer. And indeed, we
show in this paper a result of the form “two networks of ma-
chines are indistinguishable if the processes they implement
are observationally equivalent”. As a consequence, proving
computational indistinguishability can be reduced to prov-
ing observational equivalence (for a class of protocols and
assuming some standard security hypotheses on the crypto-
graphic primitives). This is a simpler task, which can be
completely formalized and sometimes automated [15, 24].
We prove our result for symmetric encryption and pair-
ing, using a fragment of the applied pi-calculus [2] for spec-
ifying protocols and relying on standard cryptographic as-
sumptions (IND-CPA and INT-CTXT) as well as hypothe-
ses, which are similar to those of [8]. The main diﬀerence
with this latter work is that we prove the soundness of ob-
servational equivalence, which covers more properties. The
fragment of applied pi-calculus we consider allows to express
an arbitrary (unbounded) number of sessions of a protocol.
To prove our result, we need ﬁrst to show that any compu-
tational trace is, with overwhelming probability, an instance
of a symbolic one. This lemma is similar to [22, 26], though
with diﬀerent hypotheses and in a diﬀerent model. A naive
idea would be then to consider any pair of related symbolic
traces: by observational equivalence (and actually labeled
bisimilarity) the two traces are statically equivalent. Then
we could try to apply soundness of static equivalence on
these traces (using results in the passive case, e.g.
[4, 1,
12, 31]). This idea does not work, since the computational
traces could be spread over the symbolic ones: if there is only
one computational trace corresponding to a given symbolic
trace, then the symbolic traces indistinguishability does not
tell us anything relevant on the computational ones.
That is why we need a new tool; the main technical in-
gredient of our proof is the introduction of tree soundness
in the case of passive attackers and the use of intermedi-
ate structures, which we called computation trees: on one
end such trees roughly correspond to the labeled transition
semantics of some process algebra, and, on the other end,
they are interpreted as an encryption oracle, scheduled by
the attacker. These notions are deﬁned independently of the
cryptographic setting. Tree soundness captures the fact that
even a passive attacker can adaptively choose its requests.
It seems related to “adaptive soundness of static equiva-
lence” as deﬁned in [28] though no precise relationship has
been established yet. We can then derive a general method
for proving that observational equivalence implies compu-
tational indistinguishability. We believe our techniques are
general and can be reused in other settings. In particular,
using our generic approach, it should not be diﬃcult to ex-
tend our result to other security primitives like asymmetric
encryption and signatures.
Related Work. In a series of papers starting with Mic-
ciancio and Warinschi [32] and continued with e.g. [22, 26],
the authors show trace mapping properties:
for some se-
lected primitives (public-key encryption and signatures in
the above-cited papers) they show that a computational
trace is an instance of a symbolic trace, with overwhelm-
ing probability. We have a similar result for symmetric
encryption in the present paper, but this is not our main
contribution.
There is a huge amount of work on simulatability/universal
composability, especially the work of Backes et. al. and
Canetti [17, 11, 10, 8, 9].
In the black-box simulatability
approach of [11], which we refer to as BPW, the symbolic
model is diﬀerent than ours: there are essential construc-
tions such as handles, which we do not have in our (more
abstract) symbolic model, that is a standard process alge-
bra. The BPW model also requires to construct a simulator,
within the model, which we do not require. Therefore, we
must be cautious with any comparison.
BPW-simulatability roughly states that [[P ]] ≈ P kS: the
computational interpretation of the process P is indistin-
guishable from the simulated version of P . As shown in [7],
this implies the trace mapping property, hence that symbolic
trace properties transfer to the computational level. The
BPW-simulatability should also imply the soundness of ob-
servational equivalence of the corresponding BPW-processes
in a simple way (D. Unruh, private communication). The
precise relationships with our work are worth being further
investigated.
Conversely, if a simulated process SkP could be seen as
the computational interpretation of a process Q, then the
BPW-simulatability itself could be seen as an instance of
our result.
Our work can also be seen as a generalization of soundness
results for static equivalence [4, 3, 12] from a passive attacker
to an active one. However, as we sketched above and as
we will see on an example later, these results cannot be
used directly in the active attacker case, which is the one we
consider.
In [18] the authors show how to encode an equivalence
property (actually computational secrecy for a given set of
primitives) in the symbolic trace, using patterns. This allows
to show how an indistinguishability property can be lifted to
the symbolic case. The method, contrary to ours, is however
dedicated to this particular property.
The work of Mitchell et. al.
[33] also aims at faithfully
abstracting the model of interactive Turing machines. Their
results concern general processes and not only a small frag-
ment, as we do here. In this respect, they are much more
general than us. However, on the other hand, they abstract
much less: there are still computations, coin tossing and
probabilistic transitions in their model. Our aim is really to
show that it makes no diﬀerence if the attacker is given only
a ﬁxed set of operations (encryption, decryption, name gen-
eration...) and if there is no probabilities nor coin tossing.
To our knowledge, the only previous work formally con-
necting observational equivalence and computational indis-
tinguishability is [6]. In this paper, the authors give sound-
ness and completeness results of a cryptographic implemen-
tation of processes. The major diﬀerence with our work is
that they do not have explicit cryptographic constructions
in the formal model. For instance encryption keys cannot
be sent or leaked since they are implicit. Most standard
security protocols cannot be described at this level of ab-
straction without possibly missing attacks. The results of
[6] are useful in designing secure implementations of abstract
functionalities, not for the veriﬁcation of existing protocols.
Finally, the work on automation and decision of observa-
tional equivalence [25, 15, 24] shows that there exist sys-
tematic ways of deriving such equivalences in the symbolic
world. This is also the advantage of using a standard process
algebra as a symbolic model.
Organization of the paper: we ﬁrst give the deﬁnitions
of our computational model in section 2. Next we recall some
of the general deﬁnitions of applied π-calculus in section 3.
Note that, in the following, we only consider a fragment of
the calculus for the protocol description (as usual), and we
will only consider a particular equational theory correspond-
ing to symmetric encryption. The relationship between the
two models, as well as the protocol description language is
given in section 4.
In section 5 we give our main result
and outline the proof. More details, including intermediate
lemmas, the notions of computation trees, tree oracles, tree
soundness are provided in section 6. We omit details and
proofs in this short paper: they can be found in [20].
2. COMMUNICATING TURING MACHINES
Randomized Turing machines are Turing machines with
an additional random tape. We assume w.l.o.g. that these
machine ﬁrst draw an inﬁnite random input string on the
random tape, and then compute deterministically. Commu-
nicating Turing machines are randomized machines equipped
with input/output tapes and two special instructions: send
and receive. They are restricted to work in polynomial time
with respect to their original input (see [11] for a discussion).
The adversary is a special CTM with an additional schedul-
ing tape. A network FkA consists of an adversary A and a
family of CTMs F = (Mn)n∈N. We also call F the envi-
ronment of A. This model is a simpliﬁcation of interactive
Turing machines of [17], keeping only the essential features.
In brief, in the initial conﬁguration, each machine of the
network has the security parameter in unary on its input
tape and possibly other data such as secret keys. For sim-
plicity we do not model here the key distribution. Moves be-
tween conﬁgurations are deﬁned according to the attacker’s
view: in each conﬁguration, the attacker decides to perform
an internal move, to ask for the initialization of a new ma-
chine or to schedule a communication.
In the latter case,
the identity of the recipient is written on the scheduling
tape and either a send or a receive action is performed. In
case of a send, the contents of the sending tape is copied to
the receiving tape of the scheduled recipient, who performs
(in one single step) all its computations, until (s)he is wait-
ing for another communication. In case of a receive action,
the whole content of the sending tape of the scheduled ma-
chine is copied on the receiving tape of the attacker. The
number of CTMs in the network is unbounded. Note that
this setting does allow dynamically corrupted parties as in
most results relating symbolic and computational models.
Initially corrupted machines simply send their keys on the
network.
We say that a function f : N → N is negligible if, for
every polynomial P , ∃N ∈ N, ∀η > N, f (η) < 1
P (η) . We
write Pr{x : P (x)} the probability of event P (x) when the
sample x is drawn according to an appropriate distribution