### Understanding Single Sign-On (SSO) with Active Directory for Intranet Web Applications

#### Introduction
Single Sign-On (SSO) is a mechanism that allows users to authenticate once and gain access to multiple applications without needing to re-enter their credentials. When it comes to integrating SSO with Active Directory (AD) for an intranet web application, the goal is to enable transparent authentication, where users can log in to their Windows machine and then access the web application without seeing a login prompt.

#### Key Concepts
1. **Active Directory (AD)**: A directory service developed by Microsoft, used for network administration. AD stores user information and provides authentication services.
2. **LDAP (Lightweight Directory Access Protocol)**: A protocol used to interact with directory services like AD.
3. **NTLM (NT LAN Manager)**: An older authentication protocol used by Microsoft. NTLMv1 is deprecated due to security issues, and NTLMv2 is still used but being phased out in favor of Kerberos.
4. **Kerberos**: A network authentication protocol designed to provide strong authentication for client/server applications by using secret-key cryptography.
5. **SPNEGO (Simple and Protected GSSAPI Negotiation Mechanism)**: A protocol that allows clients and servers to negotiate the type of authentication to use, supporting both Kerberos and NTLMv2.

#### How SSO with Active Directory Works
To achieve SSO with Active Directory, you need to leverage Integrated Windows Authentication (IWA), which uses SPNEGO. Hereâ€™s a step-by-step explanation:

1. **User Logs into Windows**:
   - The user logs into their Windows machine using their AD credentials.
   - The Windows system authenticates the user against the AD.

2. **User Accesses the Web Application**:
   - The user navigates to the intranet web application.
   - The web server (e.g., Tomcat) sees that the user does not have an active session and initiates the authentication process.

3. **Authentication Process**:
   - The web server sends a 401 Unauthorized response, indicating that authentication is required.
   - The browser, recognizing that the user is already authenticated on the Windows domain, uses the SPNEGO protocol to negotiate the authentication method.
   - SPNEGO typically chooses Kerberos as the preferred method, but it can fall back to NTLMv2 if Kerberos is not available.

4. **Credential Exchange**:
   - The browser sends a Kerberos token (or NTLMv2 token) to the web server.
   - The web server verifies the token with the AD (or a Key Distribution Center (KDC) for Kerberos).

5. **Session Establishment**:
   - Once the token is verified, the web server creates a session for the user.
   - The user is granted access to the web application without needing to enter any additional credentials.

#### Implementation Considerations
- **SPNEGO Configuration**:
  - Use the SPNEGO Project from SourceForge to integrate SPNEGO with your Tomcat server.
  - Configure the Tomcat server to request and handle SPNEGO tokens.
  - Set up the necessary Kerberos configuration, including generating keytabs and setting up 'dummy' accounts in AD.

- **Performance and Security**:
  - Ensure that the SSO solution does not spam the identity provider (AD) with unnecessary requests. Ideally, the authentication should be performed once per session.
  - Monitor and configure the frequency of authentication checks to balance security and performance.

- **Testing and Troubleshooting**:
  - Thoroughly test the SSO implementation to ensure that it works seamlessly across different browsers and environments.
  - Use tools like Wireshark to capture and analyze network traffic during the authentication process for troubleshooting.

#### Conclusion
By leveraging Integrated Windows Authentication and SPNEGO, you can achieve transparent SSO for your intranet web application. This approach ensures that users only need to log in to their Windows machine, and they can access the web application without any additional login prompts. Proper configuration and testing are essential to ensure a secure and efficient SSO experience.