### 作者与来源
- **作者**: 阮一峰
- **地址**: [http://www.ruanyifeng.com/](http://www.ruanyifeng.com/)

### OAuth 2.0 简介
OAuth 2.0 是一个关于授权（authorization）的开放网络标准，在全球范围内得到广泛应用。本文旨在简明地解释 OAuth 2.0 的设计思路和运行流程，主要参考材料为 [RFC 6749](http://www.rfcreader.com/#rfc6749)。

## 一、应用场景
为了更好地理解 OAuth 2.0 的适用场合，我们通过一个假设的例子来说明。

假设有一个名为“云冲印”的网站，可以将用户储存在 Google 上的照片打印出来。用户若要使用该服务，必须允许“云冲印”读取其在 Google 上的照片。然而，Google 只有在获得用户明确授权的情况下才会同意第三方应用访问这些照片。那么，“云冲印”如何获取用户的授权呢？

传统的方法是让用户直接提供其 Google 账户的用户名和密码给“云冲印”，但这存在以下严重问题：
1. “云冲印”会保存用户的密码，这显然不安全。
2. Google 必须支持密码登录，而单纯的密码登录方式并不安全。
3. “云冲印”能够访问用户在 Google 上的所有数据，用户无法限制其权限范围和有效期。
4. 用户只能通过修改密码来撤销对“云冲印”的授权，但这会导致所有其他已授权的应用失效。
5. 如果任何一个第三方应用程序被破解，用户的密码及所有受密码保护的数据都将面临泄露风险。

OAuth 正是为了克服上述问题而诞生的。

## 二、名词定义
在深入探讨 OAuth 2.0 之前，我们需要了解一些关键术语，它们对于理解后续内容至关重要：

- **Third-party application** (第三方应用程序)：本文中也称为“客户端”（client），例如上文中的“云冲印”。
- **HTTP service** (HTTP 服务提供商)：本文简称“服务提供商”，如示例中的 Google。
- **Resource Owner** (资源所有者)：即“用户”（user）。
- **User Agent** (用户代理)：本文指浏览器。
- **Authorization server** (认证服务器)：用于处理认证请求的服务器。
- **Resource server** (资源服务器)：存放用户生成资源的服务器，可与认证服务器相同或不同。

了解了这些术语后，我们可以更清晰地理解 OAuth 的作用：它使得“客户端”能够在用户的授权下，安全可控地与“服务提供商”进行交互。

## 三、OAuth 的工作原理
OAuth 在“客户端”与“服务提供商”之间引入了一个授权层（authorization layer）。客户端不能直接登录到服务提供商，而是需要通过授权层进行身份验证，从而将用户与客户端区分开来。客户端使用的令牌（token）不同于用户的密码，用户可以在登录时指定令牌的权限范围和有效期。

一旦客户端成功登录授权层，服务提供商将根据令牌的权限范围和有效期，向客户端开放用户存储的资料。

## 四、运行流程
OAuth 2.0 的运行流程如下图所示（摘自 RFC 6749）：

1. 用户打开客户端后，客户端请求用户授权。
2. 用户同意授予客户端授权。
3. 客户端使用上一步获得的授权，向认证服务器申请令牌。
4. 认证服务器验证客户端的身份，确认无误后发放令牌。
5. 客户端使用令牌向资源服务器请求资源。
6. 资源服务器验证令牌无误后，同意向客户端开放资源。

在上述六个步骤中，第 2 步尤为关键，因为只有在用户授予客户端授权后，客户端才能继续获取令牌并访问资源。

## 五、客户端授权模式
客户端必须获得用户的授权（authorization grant），才能获取令牌（access token）。OAuth 2.0 定义了四种授权方式：

- 授权码模式（authorization code）
- 简化模式（implicit）
- 密码模式（resource owner password credentials）
- 客户端模式（client credentials）

## 六、授权码模式
授权码模式是最完整且流程最严密的授权方式。其特点是通过客户端的后台服务器与服务提供商的认证服务器进行交互。具体步骤如下：

1. 用户访问客户端，客户端将其重定向至认证服务器。
2. 用户选择是否授予客户端授权。
3. 若用户同意授权，认证服务器将用户重定向回客户端事先指定的“重定向 URI”（redirection URI），同时附带一个授权码。
4. 客户端收到授权码后，连同早先的“重定向 URI”一起，向认证服务器申请令牌。这一步在客户端的后台服务器上完成，对用户不可见。
5. 认证服务器核对授权码和重定向 URI，确认无误后，向客户端发送访问令牌（access token）和刷新令牌（refresh token）。

以下是各步骤所需的参数：

### A 步骤
客户端请求认证的 URI 包含以下参数：
- `response_type`：表示授权类型，必选项，值固定为 "code"。
- `client_id`：表示客户端的 ID，必选项。
- `redirect_uri`：表示重定向 URI，可选项。
- `scope`：表示申请的权限范围，可选项。
- `state`：表示客户端的当前状态，可指定任意值，认证服务器会原封不动地返回这个值。

示例：
```
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
        &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
Host: server.example.com
```

### C 步骤
服务器回应客户端的 URI 包含以下参数：
- `code`：表示授权码，必选项。该码的有效期通常很短（例如 10 分钟），且客户端只能使用一次。
- `state`：如果客户端的请求中包含此参数，认证服务器的回应也必须包含相同的值。

示例：
```
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
```

### D 步骤
客户端向认证服务器申请令牌的 HTTP 请求包含以下参数：
- `grant_type`：表示使用的授权模式，必选项，值固定为 "authorization_code"。
- `code`：表示上一步获得的授权码，必选项。
- `redirect_uri`：表示重定向 URI，必选项，必须与 A 步骤中的值一致。
- `client_id`：表示客户端 ID，必选项。

示例：
```
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
```

### E 步骤
认证服务器发送的 HTTP 回复包含以下参数：
- `access_token`：表示访问令牌，必选项。
- `token_type`：表示令牌类型，大小写不敏感，必选项，可以是 bearer 类型或 mac 类型。
- `expires_in`：表示过期时间，单位为秒。如果省略该参数，则必须通过其他方式设置过期时间。
- `refresh_token`：表示刷新令牌，用于获取下一个访问令牌，可选项。
- `scope`：表示权限范围，如果与客户端申请的范围一致，此项可省略。

示例：
```
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "example",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
```

从上述代码可以看出，相关参数以 JSON 格式发送（Content-Type: application/json）。此外，HTTP 头信息中明确禁止缓存。