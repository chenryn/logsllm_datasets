Tot # of ﬁelds
51
18
21
16
18
21
# of sec ﬁelds
21
2
2
4
10
2
login, get
login, get
P2P
download
Detected
21
2
2
4
10
2
4.1 Access Control Conﬁgurations
In the (cid:2)rst experiment, we ran our prototype on these applica-
tions to partition their con(cid:2)guration (cid:2)les into (cid:2)elds, extract those
that represent subjects, objects and permissions, and identify their
permission structures. Table 1 illustrates some experimental set-
tings and outcomes, including the names and types of the appli-
cations, the test requests used in the experiment, total number of
the (cid:2)elds in con(cid:2)guration (cid:2)les, the number of the (cid:2)elds related to
access control and the number of these (cid:2)elds Con(cid:2)gRE detected.
From the table, we can see that our prototype successfully captured
all the security-related (cid:2)elds.
Apache. We evaluated our prototype using an Apache server with
security con(cid:2)gurations as described in Figure 3. Apache allows
the user to specify security policies for individual directories and
(cid:2)les through a set of directives. The main directives for access
controls are Order, Allow and Deny. Allow permits a remote
subject to read a local (cid:2)le and Deny blocks such a request. Order
de(cid:2)nes the order in which Apache checks the permission rules for
a request and the permissions for unspeci(cid:2)ed subjects: if the value
of the directive is ‘Allow, Deny’, then the server drops all the
requests not explicitly speci(cid:2)ed by an Allow rule; if the value is
‘Deny, Allow’, requests will be processed unless they are ex-
plicitly denied. These permissions are de(cid:2)ned under the directives
hDirectory for directories or hFiles for individual (cid:2)les.
Our prototype detected delimiters of the con(cid:2)guration (cid:2)le and
used them to partition the (cid:2)le into (cid:2)elds. An interesting observa-
tion here is that Apache does not treat ‘h’ and ‘i’ as normal de-
limiters and as a result, our approach took ‘h’ as part of a directive
(cid:2)eld and failed to catch ‘i’. Fortunately, this did not affect the
follow-up analysis.
In the second step, those (cid:2)elds were tainted
for analyzing how the server processed a GET request. This anal-
ysis revealed subjects, objects and candidate permissions. Among
these candidate (cid:2)elds were Options and FollowSymLinks,
which were found to be unrelated to access control during the re-
run stage. Alternative values ‘Deny, Allow’, ‘Allow, Deny’
and ‘mutual-failure’ were also detected. The access-control
components and permission structures identi(cid:2)ed by our prototype
are described in Table 2.
Bftpd. Bftpd [2] is a small FTP server which has been widely used
on a variety of platforms including Linux, BSD and routers. Like
many other FTP server, Bftpd supports both anonymous user ac-
cess and local user access. In the latter case, it lets the users of
an operating system (OS) access (cid:2)les and directories using their
privileges bestowed by the OS. The interesting part of this FTPD is
that it can be con(cid:2)gured to overrule a user’s OS permissions. For
example, one’s root directory can be rede(cid:2)ned, which could en-
able her to download the (cid:2)les from a directory she cannot access
with her OS privileges. Though Bftpd enforces some restrictions
to this potentially dangerous functionality, for example, forbidding
one to set /root as a user’s home directory, its security implica-
tions remain. In our experiment, we evaluated our prototype using
a con(cid:2)guration (cid:2)le containing such settings. The fragment of the
(cid:2)le is presented in Figure 4.
The fragment contains a set of global con(cid:2)gurations de(cid:2)ned un-
der the keyword ‘global’. They are applied to every user but can
be overridden once the same settings are explicitly speci(cid:2)ed for
that user. Consider the example in Figure 4. ‘DENY LOGIN’ ap-
pears under both ‘global’ and user temp to specify whether
the user is not allowed to login. The latter supersedes the former.
Actually, this setting and ‘ROOTDIR’, which changes one’s root di-
rectory, are the main access-control con(cid:2)gurations Bftpd provides
to adjust a user’s OS-de(cid:2)ned read privilege.
Our prototype analyzed Bftpd using a test request for download-
ing a (cid:2)le. This analysis detected the (cid:2)eld ‘temp’ as a subject from
a match that happened between the (cid:2)eld and part of the request
related to username, and ‘/root/temp’ as an object from the ob-
servation that it was used to encapsulate the value tainted by the
request as a directory path for opening a (cid:2)le. We also found al-
ternative value for the (cid:2)eld ‘no’, which is ‘yes’, and permission
(cid:2)elds and permission structures, as illustrated in Table 2.
Our approach effectively captured the relations between two
DENY LOGIN (cid:2)elds de(cid:2)ned under ‘global’ and ‘user’ through
reruns: the second setting overrules the (cid:2)rst one, but when the for-
mer is not there, the latter takes effects. The (cid:2)eld ROOTDIR was
con(cid:2)rmed as a permission and a parent of the object. As a result,
all the permission vectors not including it were removed. Another
interesting observation is that a (cid:2)eld seemingly unrelated to secu-
rity, RATIO, was also identi(cid:2)ed as a permission. The (cid:2)eld is for
specifying upload/download ratio.
In our experiment, we found
that removal of the (cid:2)eld did not incur any con(cid:2)guration errors but
caused the processing of the request to fail. Therefore, it can be
deemed as an implicit permission (cid:2)eld.
Table 2: Apache and Bftpd. Here we list both the ﬁelds identiﬁed as access control components (highlighted items) and their parent
nodes in semantic trees. The languages for both examples contain a special production rule, Rule 3, to describe the root of the K-
trees. This rule can be constructed in a recursive manner for continually scanning a conﬁguration ﬁle after recognizing a security
policy until the end of the ﬁle.
App
Apache Subjects:
Subjects/Objects/Permissions
hDirectory Allow from 192.168.0.0/24
hFiles Allow from 192.168.1.0/24
hDirectory Deny from 192.168.2.0/24
Objects:
hDirectory /web/doc1
hFiles sensitive.htm
hDirectory /web/doc2
Permissions:
p1:hDirectory Order allow,deny
p2:hDirectory Order deny,allow
p3:hDirectory Order mutual-failure
p4:hDirectory Allow from
p5:hDirectory Deny from
p6:hFiles Order allow,deny
p7:hFiles Order deny,allow
p8:hFiles Order mutual-failure
p9:hFiles
Home Directory Permission
Allow from
Bftpd
Subjects:
user temp
Objects:
Permissions:
user ROOTDIR /root/temp
p1: global DENY LOGIN no
p2: global DENY LOGIN yes
p3: global RATIO
p4: user DENY LOGIN no
p5: user DENY LOGIN yes
p6: user ROOTDIR
Home Directory Permission
none
Structures
Languages
(cid:15) Directory Permit:
(p4) _ (p4 ^ p3) _ (p4 ^
p2) _ (p4 ^ p1) _ (p2) _ (")
(cid:15) Directory Denial:
(p1)_(p3)_(p5)_(p5 ^
p3) _ (p5 ^ p2) _ (p5 ^ p1)
(cid:15) Files Permit:
(p9) _ (p9 ^ p8) _ (p9 ^
p7) _ (p9 ^ p6) _ (p7) _ (")
(cid:15) Files Denial:
(p6) _ (p8)
(cid:15) Permit:
(p1 ^ p3 ^ p4 ^ p6) _
(p2 ^ p3 ^ p4 ^ p6) _ (p3 ^
p4 ^ p6) _ (p2 ^ p3 ^ p6) _
(p3 ^ p6)
(cid:15) Denial:
(p4 ^ p6) _ (p2 ^ p4 ^
p6) _ (p1 ^ p4 ^ p6) _ (p1 ^
p5 ^ p6) _ (p2 ^ p5 ^ p6) _
(p5 ^ p6) _ (p3 ^ p5 ^ p6) _
(p2 ^ p3 ^ p5 ^ p6) _ (p1 ^
p3 ^ p5 ^ p6) _ (p2 ^ p3 ^
p6) _ (p6) _ (p2 ^ p6) _
(p1 ^ p6)
1. (cid:6) = f hDirectory, h/Directory, ‘nn’, Order, allow,deny, deny,allow, mutual-
failure, Deny, from, Allow, hFiles, object, subject, h/Filesg
2. V = f A00, A10, U10, A21, B21, A22, U22, A23, A23, A11, U11, A25,
B25, A26, U26, U25, A26, I g
3. A00 ! A10A00jA11A00jIj"
4. A10 ! hDirectory object ‘nn’ U10 h/Directory ‘nn’
5. U10 ! A21IA22jA21IA23jA21jA22jA23jIj"
6. A21 ! Order B21 ‘nn’
7. B21 ! allow,deny j deny,allow j mutual-failure
8. A22 ! Allow U22 ‘nn’
9. U22 ! from subject
10. A23 ! Deny U23 ‘nn’
11. U23 ! from subject
12. A11 ! hFiles object U11 h/Files ‘nn’
13. U11 ! A25IA26
14. A25 ! Order B25 ‘nn’
15. B25 ! allow,deny j deny,allow j mutual-failure
16. A26 ! Allow U26 ‘nn’
17. U26 ! from subject
18. I ! " j I ‘nn’
1. (cid:6) = f‘f’, ‘nn’, ‘g’, ‘=’, ‘(cid:148)’, object, subject, global, DENY LOGIN, yes, no,
RATIO, none, user, ROOTDIRg
2. V = f A00, A10, U10, A20, B20, A21, A11, U11, A23, A24, B24, I g
3. A00 ! A10IA11
4. A10 ! global ‘f’ ‘nn’ U10 ‘g’ ‘nn’
5. U10 ! A20IA21jA20jA21j"
6. A20 ! DENY LOGIN ‘=’ ‘(cid:148)’ B20 ‘(cid:148)’ ‘nn’
7. B20 ! yes j no
8. A21 ! RATIO ‘=’ ‘(cid:148)’ none ‘(cid:148)’ ‘nn’
9. A11 ! user subject ‘f’ ‘nn’ U11 ‘g’ ‘nn’
10. U11 ! A23A24jA24
11. A23 ! ROOTDIR ‘=’ ‘(cid:148)’ object ‘(cid:148)’ ‘nn’
12. A24 ! DENY LOGIN ‘=’ ‘(cid:148)’ B24 ‘(cid:148)’ ‘nn’
13. B24 ! yes j no
14. I ! " j ‘f’ Ij ‘nn’ Ij ‘g’ Ij ‘=’ Ij ‘(cid:148)’ I
4.2 Languages and Scanners
After identifying the access control components of the applica-
tions, our prototype continued to generate speci(cid:2)cation languages
for their security-related con(cid:2)gurations. Based upon these lan-
guages, scanners for recognizing access control policies from these
applications’ con(cid:2)guration (cid:2)les were also automatically created,
and evaluated in our experiments. Again, we use Apache and Bftpd
as examples here to elaborate this study.
Languages. Con(cid:2)gRE (cid:2)rst created a K-tree for each application
through annotating its semantic tree with the delimiters that linked
semantically-related (cid:2)elds together. The K-trees for Apache and
Bftpd are illustrated in Figure 4. From the K-trees, our proto-
type automatically generated speci(cid:2)cation languages for the appli-
cations. As an example, Table 2 describes the languages for Apache
and Bftpd, which accurately capture the syntactic relations among
individual access control components detected from these applica-
tions.
Evaluations of scanners. The languages generated by the proto-
type were automatically converted into scanners by BISON [12].
These scanners were tested in our experiments on other con(cid:2)gu-
ration (cid:2)les of these applications. In particular, we ran the scanner
for Apache on a con(cid:2)guration (cid:2)le used by a major university’s web
server, which contained 1341 lines of settings. Our scanner suc-
cessfully detected all con(cid:2)guration settings except those involving
SSL authentications and a policy that denies access to a (cid:2)le. This
is because both of them did not appear in the con(cid:2)guration (cid:2)le the
prototype used to generate the language. We manually checked the
access control policies the scanner identi(cid:2)ed, and found all of them
were correct.
We further evaluated other scanners using synthesized con(cid:2)gu-
ration (cid:2)les. These (cid:2)les were constructed in a way that mingles the
settings related to access control with those not. Speci(cid:2)cally, we
injected the con(cid:2)guration commands unrelated to security to those
that de(cid:2)ne access control components. We also randomly picked
up the names or addresses for subjects and objects. From the ex-
periments, we found that the scanners always correctly detected the
security policies from these (cid:2)les, as long as similar con(cid:2)gurations
appeared in the (cid:2)les used for extracting con(cid:2)guration knowledge.
5. RELATED WORK
Miscon(cid:2)gurations are well-recognized to be one of the most se-
rious operator mistakes that affect performance, availability and
security of a computing system. This problem has been exten-
sively studied under the scenarios of con(cid:2)guration management.
For example, Glean infers correctness constraints for Registry [15];
Strider [29] compares the registry of a system with a (cid:147)healthy(cid:148) reg-
istry to detect potential miscon(cid:2)guration; PeerPressure [27] further