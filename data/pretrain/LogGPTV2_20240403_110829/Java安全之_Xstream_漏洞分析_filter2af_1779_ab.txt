                }
            }
    }
canConvert
变量所有转换器，通过调用`Converter.canConvert()`方法来匹配转换器是否能够转换出`TreeSet`类型，这里找到满足条件的`TreeSetConverter`转换器
下面则是调用`this.typeToConverterMap.put(type, converter);`将该类和转换器存储到map中。
然后将转换器进行返回。
回到`com.thoughtworks.xstream.core.TreeUnmarshaller#convertAnother`中，执行来到这里。
      protected Object convert(Object parent, Class type, Converter converter) {
            Object result;
            if (this.parentStack.size() > 0) {
                result = this.parentStack.peek();
                if (result != null && !this.values.containsKey(result)) {
                    this.values.put(result, parent);
                }
            }
            String attributeName = this.getMapper().aliasForSystemAttribute("reference");
            String reference = attributeName == null ? null : this.reader.getAttribute(attributeName);
            Object cache;
            if (reference != null) {
                cache = this.values.get(this.getReferenceKey(reference));
                if (cache == null) {
                    ConversionException ex = new ConversionException("Invalid reference");
                    ex.add("reference", reference);
                    throw ex;
                }
                result = cache == NULL ? null : cache;
            } else {
                cache = this.getCurrentReferenceKey();
                this.parentStack.push(cache);
                result = super.convert(parent, type, converter);
                if (cache != null) {
                    this.values.put(cache, result == null ? NULL : result);
                }
                this.parentStack.popSilently();
            }
            return result;
        }
获取reference别名后，从xml中获取reference标签内容。获取为空则调用
`this.getCurrentReferenceKey()`来获取当前标签将当前标签。
调用`this.types.push`将获取的值压入栈中，跟进查看一下。
    public Object push(Object value) {
            if (this.pointer + 1 >= this.stack.length) {
                this.resizeStack(this.stack.length * 2);
            }
            this.stack[this.pointer++] = value;
            return value;
        }
实际上做的操作也只是将值存储在了`this.stack`变量里面。
来到以下代码
    Object result = converter.unmarshal(this.reader, this);
调用传递进来的类型转换器，也就是前面通过匹配获取到的类型转换器。调用`unmarshal`方法，进行xml解析。也就是`com.thoughtworks.xstream.converters.collections.TreeSetConverter#unmarshal`
    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
        TreeSet result = null;
        Comparator unmarshalledComparator = this.treeMapConverter.unmarshalComparator(reader, context, (TreeMap)null);
        boolean inFirstElement = unmarshalledComparator instanceof Null;
        Comparator comparator = inFirstElement ? null : unmarshalledComparator;
        TreeMap treeMap;
        if (sortedMapField != null) {
            TreeSet possibleResult = comparator == null ? new TreeSet() : new TreeSet(comparator);
            Object backingMap = null;
            try {
                backingMap = sortedMapField.get(possibleResult);
            } catch (IllegalAccessException var11) {
                throw new ConversionException("Cannot get backing map of TreeSet", var11);
            }
            if (backingMap instanceof TreeMap) {
                treeMap = (TreeMap)backingMap;
                result = possibleResult;
            } else {
                treeMap = null;
            }
        } else {
            treeMap = null;
        }
        if (treeMap == null) {
            PresortedSet set = new PresortedSet(comparator);
            result = comparator == null ? new TreeSet() : new TreeSet(comparator);
            if (inFirstElement) {
                this.addCurrentElementToCollection(reader, context, result, set);
                reader.moveUp();
            }
            this.populateCollection(reader, context, result, set);
            if (set.size() > 0) {
                result.addAll(set);
            }
        } else {
            this.treeMapConverter.populateTreeMap(reader, context, treeMap, unmarshalledComparator);
        }
        return result;
    }
调用`unmarshalComparator`方法判断是否存在comparator，如果不存在，则返回NullComparator对象。
    protected Comparator unmarshalComparator(HierarchicalStreamReader reader, UnmarshallingContext context, TreeMap result) {
        Comparator comparator;
        if (reader.hasMoreChildren()) {
            reader.moveDown();
            if (reader.getNodeName().equals("comparator")) {
                Class comparatorClass = HierarchicalStreams.readClassType(reader, this.mapper());
                comparator = (Comparator)context.convertAnother(result, comparatorClass);
            } else {
                if (!reader.getNodeName().equals("no-comparator")) {
                    return NULL_MARKER;
                }
                comparator = null;
            }
            reader.moveUp();
        } else {
            comparator = null;
        }
        return comparator;
    }
回到`com.thoughtworks.xstream.converters.collections.TreeSetConverter#unmarshal`
获取为空，则`inFirstElement`为false,下面的代码`comparator`变量中三目运算返回null。而`possibleResult`也是创建的是一个空的`TreeSet`对象。而后则是一些赋值，就没必要一一去看了。来看到重点部分。
    this.treeMapConverter.populateTreeMap(reader, context, treeMap, unmarshalledComparator);
跟进一下。
    protected void populateTreeMap(HierarchicalStreamReader reader, UnmarshallingContext context, TreeMap result, Comparator comparator) {
            boolean inFirstElement = comparator == NULL_MARKER;
            if (inFirstElement) {
                comparator = null;
            }
            SortedMap sortedMap = new PresortedMap(comparator != null && JVM.hasOptimizedTreeMapPutAll() ? comparator : null);
            if (inFirstElement) {
                this.putCurrentEntryIntoMap(reader, context, result, sortedMap);
                reader.moveUp();
            }
            this.populateMap(reader, context, result, sortedMap);
            try {
                if (JVM.hasOptimizedTreeMapPutAll()) {
                    if (comparator != null && comparatorField != null) {
                        comparatorField.set(result, comparator);
                    }
                    result.putAll(sortedMap);
                } else if (comparatorField != null) {
                    comparatorField.set(result, sortedMap.comparator());
                    result.putAll(sortedMap);
                    comparatorField.set(result, comparator);
                } else {
                    result.putAll(sortedMap);
                }
            } catch (IllegalAccessException var8) {
                throw new ConversionException("Cannot set comparator of TreeMap", var8);
            }
        }
下面调用了`this.putCurrentEntryIntoMap`跟进查看一下。
读取标签内的内容并缓存到target这个Map中。
`reader.moveUp()`往后解析xml
然后调用`this.populateMap(reader, context, result, sortedMap);`
跟进方法查看
      protected void populateMap(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, final Map target) {
                    TreeSetConverter.this.populateCollection(reader, context, new AbstractList() {
                        public boolean add(Object object) {
                            return target.put(object, object) != null;
                        }
                        public Object get(int location) {
                            return null;
                        }
                        public int size() {
                            return target.size();
                        }
                    });
                }
其中调用`populateCollection`用来循环遍历子标签中的元素并添加到集合中。
调用`addCurrentElementToCollection`—>`readItem`
    protected Object readItem(HierarchicalStreamReader reader, UnmarshallingContext context, Object current) {
            Class type = HierarchicalStreams.readClassType(reader, this.mapper());
            return context.convertAnother(current, type);
        }
读取标签内容，并且获取转换成对应的类，最后将类添加到targer中。
跟踪一下看看。大概流程和前面的一样。
一路跟踪来到
`com.thoughtworks.xstream.converters.extended.DynamicProxyConverter#unmarshal`
前面获得的`DynamicProxyConverter`。
这就获取到了一个动态代理的类。EventHandler
`com.thoughtworks.xstream.converters.collections.TreeMapConverter#populateTreeMap`中调用`result.putAll`，也就是代理了`EventHandler`类的putALL。动态代理特性则会触发，`EventHandler.invoke`。
invoke的主要实现逻辑在`invokeInternal`
怎么说呢，整体一套流程其实就是一个解析的过程。从`com.thoughtworks.xstream.core.TreeUnmarshaller#start`方法开始解析xml，调用`HierarchicalStreams.readClassType`通过标签名获取Mapper中对于的class对象。获取class完成后调用`com.thoughtworks.xstream.core.TreeUnmarshaller#convertAnother`,该方法会根据class转换为对于的Java对象。`convertAnother`的实现是`mapper.defaultImplementationOf`方法查找class实现类。根据实现类获取对应转换器，获取转换器部分的实现逻辑是`ConverterLookup`中的`lookupConverterForType`方法,先从缓存集合中查找`Converter`,遍历`converters`找到符合的`Converter`。随后，调用`convert`返回object对象。`convert`方法实现逻辑是调用获取到的`converter`转换器的`unmarshal`方法来根据获取的对象，继续读取子节点，并转化成对象对应的变量。直到读取到最后一个节点退出循环。最终获取到java对象中的变量值也都设置，整个XML解析过程就结束了。
###  POC2
            fookey
            foovalue
                java.lang.Comparable
                            calc.exe
                    start
            good
我们第一个payload使用的是`sortedset`接口在`com.thoughtworks.xstream.core.TreeUnmarshaller#convertAnother`方法中`this.mapper.defaultImplementationOf(type);`
寻找到的实现类为`java.util.TreeSet`。根据实现类寻找到的转换器即`TreeSetConverter`。
这里使用的是`tree-map`,获取的实现类是他本身，转换器则是`TreeMapConverter`。同样是通过动态代理的map对象，调用putAll方法触发到`EventHandler.invoke`里面实现任意反射调用。
###  1.3.1版本无法利用原因
`com.thoughtworks.xstream.core.util.HierarchicalStreams#readClassType`
该行代码爆出`Method threw
'com.thoughtworks.xstream.mapper.CannotResolveClassException'
exception.`无法解析异常。
发现是从遍历去调用map,调用realClass查找这里并没有从map中找到对应的class。所以这里报错了。
###  1.4.7-1.4.9版本无法利用原因
`com.thoughtworks.xstream.core.TreeUnmarshaller#start`
    Class type = HierarchicalStreams.readClassType(this.reader, this.mapper);
    Object result = this.convertAnother((Object)null, type);
获取class部分成功了，报错位置在调用`this.convertAnother`转换成Object对象步骤上。
跟进查看一下。
`EventHandler`的处理由`ReflectionConverter`来处理的，在1.4.7-1.4.9版本。添加了`canConvert`方法的判断。
###  1.4.10版本payload可利用原因
`com.thoughtworks.xstream.converters.reflection.ReflectionConverter#canConvert`中没了对`EventHandler`类的判断。
1.4.10版本以后添加了`XStream.setupDefaultSecurity(xStream)`方法的支持。
`com.thoughtworks.xstream.XStream$InternalBlackList#canConvert`中
      public boolean canConvert(Class type) {
                return type == Void.TYPE || type == Void.class || XStream.this.insecureWarning && type != null && (type.getName().equals("java.beans.EventHandler") || type.getName().endsWith("$LazyIterator") || type.getName().startsWith("javax.crypto."));
            }
添加黑名单判断。
## 0x04 结尾
篇章略长，分开几部分来写。