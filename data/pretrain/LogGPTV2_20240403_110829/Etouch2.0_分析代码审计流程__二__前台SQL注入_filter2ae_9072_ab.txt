            // 获得分类的相关信息
            $cat = model('Category')->get_cat_info($this->cat_id);
            $this->keywords();
            $this->assign('show_asynclist', C('show_asynclist'));
            // 初始化分页信息
            $page_size = C('page_size');
            $brand = I('request.brand', 0, 'intval');
            $price_max = I('request.price_max'); //这里外部获取可控变量
            $price_min = I('request.price_min'); //这里外部获取可控变量
            $filter_attr = I('request.filter_attr');
            $this->size = intval($page_size) > 0 ? intval($page_size) : 10;
            $this->page = I('request.page') > 0 ? intval(I('request.page')) : 1;
            $this->type = I('request.type');
            $this->brand = $brand > 0 ? $brand : 0;
            $this->price_max = $price_max > 0 ? $price_max : 0; //利用php弱类型绕过
            $this->price_min = $price_min > 0 ? $price_min : 0;
这里 `$price_max = I('request.price_max');`->`$this->price_max = $price_max > 0
? $price_max : 0; //利用php弱类型绕过`
这个绕过很经典呀 `1.0union select == 1` 也就是说
`$this->price_max` 、`$this->price_min`变量可以被控制
继续跟进代码,发现:
Lines 75
            $count = model('Category')->category_get_count($this->children, $this->brand, $this->type, $this->price_min, $this->price_max, $this->ext, $this->keywords);//可控变量
            $goodslist = $this->category_get_goods();
            $this->assign('goods_list', $goodslist);
            .....................
            $this->assign('pager', $this->pageShow($count));//注册返回结果到模版
当时我很开心啊,终于来个无限制回显的SQL注入,结果分析下去无果,但是我感觉很有意思。
我们继续跟进model类:
     function category_get_count($children, $brand, $type, $min, $max, $ext, $keyword)
        {
            $where = "g.is_on_sale = 1 AND g.is_alone_sale = 1 AND " . "g.is_delete = 0 ";
            if ($keyword != '') {
                $where .= " AND (( 1 " . $keyword . " ) ) ";
            } else {
                $where .= " AND ($children OR " . model('Goods')->get_extension_goods($children) . ') ';
            }
            ..............
            if ($brand > 0) {
                $where .= "AND g.brand_id = $brand ";//
            }
            if ($min > 0) {
                $where .= " AND g.shop_price >= $min "; //直接拼接变量
            }
            if ($max > 0) { //这里可控
                $where .= " AND g.shop_price pre . 'goods AS g ' . ' LEFT JOIN ' . $this->pre . 'touch_goods AS xl ' . ' ON g.goods_id=xl.goods_id ' . ' LEFT JOIN ' . $this->pre . 'member_price AS mp ' . "ON mp.goods_id = g.goods_id AND mp.user_rank = '$_SESSION[user_rank]' " . "WHERE $where $ext "; //直接拼接变量
            $res = $this->row($sql);//进入查询
            return $res['count'];
        }
`"WHERE $where $ext ";` 从这里可以看到100%注入了,那么构造下回显注入罗:
debug出SQL语句,本地MYSQL执行:
    SELECT COUNT(*) as count FROM ecs_goods AS g  LEFT JOIN ecs_touch_goods AS xl  ON g.goods_id=xl.goods_id  LEFT JOIN ecs_member_price AS mp ON mp.goods_id = g.goods_id AND mp.user_rank = '0' WHERE g.is_on_sale = 1 AND g.is_alone_sale = 1 AND g.is_delete = 0  AND (g.cat_id  IN ('0')  OR g.goods_id IN ('') )  AND g.shop_price category_get_count($this->children, $this->brand,
$this->type, $this->price_min, $this->price_max, $this->ext,
$this->keywords);`
执行完这个语句后可以看到:
是正常的,继续走,下一句发现程序mysql错误,停止执行,那么跟进看下原因
     private function category_get_goods()
        {
        ................................
            }
            if ($this->brand > 0) {
                $where .= "AND g.brand_id=$this->brand ";
            }
            if ($this->price_min > 0) {
                $where .= " AND g.shop_price >= $this->price_min ";
            }
            if ($this->price_max > 0) {
                $where .= " AND g.shop_price price_max "; //再次拼接这个变量
            }
            $sql = 'SELECT g.goods_id, g.goods_name, g.goods_name_style, g.market_price, g.is_new, g.is_best, g.is_hot, g.shop_price AS org_price, g.last_update,' . "IFNULL(mp.user_price, g.shop_price * '$_SESSION[discount]') AS shop_price, g.promote_price, g.goods_type, g.goods_number, " .
                'g.promote_start_date, g.promote_end_date, g.goods_brief, g.goods_thumb , g.goods_img, xl.sales_volume ' . 'FROM ' . $this->model->pre . 'goods AS g ' . ' LEFT JOIN ' . $this->model->pre . 'touch_goods AS xl ' . ' ON g.goods_id=xl.goods_id ' . ' LEFT JOIN ' . $this->model->pre . 'member_price AS mp ' . "ON mp.goods_id = g.goods_id AND mp.user_rank = '$_SESSION[user_rank]' " . "WHERE $where $this->ext ORDER BY $sort $this->order LIMIT $start , $this->size";
            $res = $this->model->query($sql);
这里可以看出来`WHERE $where $this->ext`
这里又拼接进去查询了,然而这里有11列,那么查询肯定报错(前面是1列),这里我对比了下两个函数的代码,发现他们没有任何差别,所以这里很遗憾没办法进行绕过。
> 但是这里我衍生下攻击思路:
>
>
> 比如第二个函数里面有第二个参数可控的话,并且在前面,而第一个函数没有的话,那么我们控制第二个函数的那个参数,去注释掉我们第一个函数的第一个参数,不让mysql出错,这样就可以达到回显注入了。
这个点可以说是我感觉比较好玩的点了。
**总结来说下:**
这个点依然是半限制的盲注,时间盲注是通杀的,但是可以考虑布尔盲注,自己寻找下差异构造就行了。
## 0x8 前台FLOW cart_label_count $goods_id 半限制SQL注入
    public function cart_label_count(){
        $goods_id  = I('goods_id',''); //没有intval处理
        $parent_id  = I('parent_id',''); 
        if($parent_id ){
            $shop_price = $this->model->table('goods')->where(array('goods_id'=>$parent_id))->field('shop_price')->getOne();
        }
        if($goods_id) {
            $sql = "select g.shop_price ,gg.goods_price from " . $this->model->pre ."group_goods as gg LEFT JOIN " . $this->model->pre . "goods as g on gg.goods_id = g.goods_id " . "where gg.goods_id in ($goods_id) and gg.parent_id = $parent_id "; //拼接
            $count = $this->model->query($sql);
        }
        $num=0;
        if(count($count)>0){
            foreach($count as $key){
                $count_price += floatval($key['goods_price']);
                $num ++;
            }
        }else{
            $count_price = '0.00';
        }
        if($shop_price){
            $count_price += floatval($shop_price);
            $num += 1;
        }
        $result['content'] = price_format($count_price);
        $result['cart_number'] = $num;
        die(json_encode($result));
`where gg.goods_id in ($goods_id)` 这里直接拼接了进去导致了注入
     if(count($count)>0){
            foreach($count as $key){
                $count_price += floatval($key['goods_price']);
                $num ++;
            }
        }else{
            $count_price = '0.00';
        }
这里做了个强制转换,导致不能把结果带出来,可以考虑布尔盲注
## 0x9 前台 User $rec_id 多处注入
###  0x9.1 del_attention() 半限制SQL注入
        public function del_attention() {
            $rec_id = I('get.rec_id', 0); //直接获取
            if ($rec_id) {
                $this->model->table('collect_goods')->data('is_attention = 0')->where('rec_id = ' . $rec_id . ' and user_id = ' . $this->user_id)->update();
            }
            $this->redirect(url('collection_list'));
        }
###  0x9.2 add_attention() 半限制SQL注入
    public function add_attention() {
        $rec_id = I('get.rec_id', 0); //直接获取
        if ($rec_id) {
            $this->model->table('collect_goods')->data('is_attention = 1')->where('rec_id = ' . $rec_id . ' and user_id = ' . $this->user_id)->update();
        }
        $this->redirect(url('collection_list'));
    }
###  0x9.3 aftermarket_done 无限制SQL注入
     public function aftermarket_done() {
            /* 判断是否重复提交申请退换货 */
            $rec_id = empty($_REQUEST['rec_id']) ? '' : $_REQUEST['rec_id']; //控制输入
         ....................................
            if ($rec_id) {
                $num = $this->model->table('order_return')
                        ->field('COUNT(*)')
                        ->where(array('rec_id' => $rec_id))
                        ->getOne();
            } else {
                show_message(L('aftermarket_apply_error'), '', '', 'info', true);
            }
            $goods = model('Order')->order_goods_info($rec_id); /* 订单商品 */ //这里也是注入
            $claim = $this->model->table('service_type')->field('service_name,service_type')->where('service_id = ' . intval(I('post.service_id')))->find(); /* 查询服务类型 */
            $reason = $this->model->table('return_cause')->field('cause_name')->where('cause_id = ' . intval(I('post.reason')))->find(); /* 退换货原因 */
            $order = model('Users')->get_order_detail($order_id, $this->user_id); /* 订单详情 */
            if (($num > 0)) {
                /* 已经添加 查询服务订单 */
                $order_return = $this->model->table('order_return')
                        ->field('ret_id, rec_id, add_time, service_sn, return_status, should_return,is_check,service_id')
                        ->where('rec_id = ' . $rec_id) //拼接变量
                        ->find(); //where注入
                $ret_id = $order_return['ret_id'];
            } else {
`$goods = model('Order')->order_goods_info($rec_id); /* 订单商品 */ //这里也是注入`
                $order_return = $this->model->table('order_return')
                        ->field('ret_id, rec_id, add_time, service_sn, return_status, should_return,is_check,service_id')
                        ->where('rec_id = ' . $rec_id) //拼接变量
                        ->find(); //where注入