2
FTP
0
0
98.0K
749
SMTP
0
0
2
1.4M
Other
41.1K
4.2
2.3K
195
No sig.
1.2M
524
52.5K
31.9K
Table 3: Signature-based detection vs. port-based detec-
tion for well-known ports (# connections).
Overall, the results show that the problem we pose
does indeed already manifest operationally. Further-
more, because security analysis entails an adversary,
what matters most is not the proportion of benign con-
nections using ports other than those we might expect,
but the prevalence of malicious connections doing so.
We later discuss a number of such instances found op-
erationally.
3.3 Existing NIDS Capabilities
Today’s spectrum of intrusion detection and prevention
systems offer powerful ways for detecting myriad forms
of abuse. The simpler systems rely on searching for byte
patterns within a packet stream, while the more complex
perform extensive, stateful protocol analysis.
In addi-
tion, some systems offer anomaly-based detection, com-
paring statistical characteristics of the monitored trafﬁc
against “normal network behavior,” and/or speciﬁcation-
based detection, testing the characteristics against ex-
plicit speciﬁcations of allowed behavior.
For analyzing application-layer protocols, all sys-
tems of which we are aware depend upon port num-
bers.2 While some can use signatures to detect other
application-layer protocols, all only perform detailed
protocol analysis for trafﬁc identiﬁed via speciﬁc ports.
Commercial systems rarely make details about their im-
plementation available, and thus we must guess to what
depth they analyze trafﬁc. However, we have not seen an
indication yet that any of them initiates stateful protocol
analysis based on other properties than speciﬁc ports.
The most widely deployed open source NIDS,
Snort [34], does not per se ship with signatures for de-
tecting protocols. However the Snort user community
constantly contributes new open signatures [4], includ-
ing ones for detecting IRC and FTP connections. Tradi-
tionally, Snort signatures are raw byte patterns. Newer
versions of Snort also support regular expressions. An-
other open source NIDS, Bro [31], ships with a back-
door [41] analyzer which follows two approaches. First,
to detect interactive trafﬁc it examines inter-packet inter-
vals and packet size distributions. Second, for several
2DSniff [11] is a network sniffer that extracts protocol-speciﬁc
usernames and passwords independent of ports. Its approach is similar
to ours in that it uses a set of patterns to recognize protocols.
It is
however not a NIDS and does not provide any further payload analysis.
260
Security ’06: 15th USENIX Security Symposium
USENIX Association
Port
80
445
443
22
25
1042
1433
135
< 1024
≥ 1024
Successful % Success.
Connections % Conns.
93,428,872
68.13
97,106,281
70.82%
0.01
8,398
3.53%
4,833,919
2.08
2,855,457
2.34%
3,206,369
1.75
2,395,394
2.12%
2,900,876
1,447,433
1.05
2,533,617
1.85%
0.00
35
1.66%
2,281,780
0.00
57
1.06%
1,451,734
0.00
1.04%
1,431,155
62
73.73
83.68% 101,097,769
114,747,251
22,371,805
16.32%
5,604,377
4.08
Payload [GB] % Payload
72.59
0.00
1.29
1.71
1.71
0.00
0.00
0.00
79.05
20.95
2,548.55
0.01
45.22
59.91
60.00
0.01
0.06
0.00
2,775.15
735.62
Table 1: Ports accounting for more than 1% of the mwn-full-packets connections.
Method
Port (successful)
Signature
on expected port
on other port
%
HTTP
93,429K 68.14
94,326K 68.79
67.3
92,228K
2,126K
1.6
IRC
75,876
73,962
71,467
2,495
%
0.06
0.05
0.05
0.00
FTP
151,700
125,296
98,017
27,279
%
0.11
0.09
0.07
0.02
SMTP
%
1,447K 1.06
1,416K 1.03
1,415K 1.03
0.00
265
Table 2: Comparison of signature-based detection vs. port-based detection (# connections).
well-known protocols like HTTP, FTP and IRC, it scans
the analyzed payload for hard-coded byte patterns.
In
addition, Bro features a signature matching engine [38]
capable of matching the reassembled data stream of a
connection against regular expression byte-patterns and
leveraging the rich state of Bro’s protocol decoders in the
process. The engine allows for bidirectional signatures,
where one byte pattern has to match on a stream in one
direction and another in the opposite direction. The com-
mercial IntruShield system by Network Associates is pri-
marily signature-based and ships with signatures for ap-
plication detection, including SSH and popular P2P pro-
tocols. The technical details and the signatures do not ap-
pear accessible to the user. Therefore, it is unclear which
property of a packet/stream triggers which signature or
protocol violation. We also have some experience with
Enterasys’ Dragon system. It ships with a few signatures
to match protocols such as IRC, but these do not appear
to then enable full protocol analysis.
1. In some environments, such a policy may prove too
restrictive or impractical due to the sheer size and
diversity of the site. As user populations grow, the
likelihood of users wishing to run legitimate servers
on alternate ports rises.
2. Neither approach to application detection (byte pat-
terns or statistical tests) is completely accurate (see
§3.2). Blocking false-positives hinders legitimate
operations, while failing to block false-negatives
hinders protection.
3. Protocols that use non-ﬁxed ports (e.g., Gnutella)
can only be denied or allowed. Some of these, how-
ever, have legitimate applications as well as appli-
cations in violation of policy. For example, BitTor-
rent [5] might be used for distributing open-source
software. Or, while a site might allow the use of
IRC, including on non-standard ports, it highly de-
sires to analyze all such uses in order to detect bot-
nets.
3.4 NIDS Limitations
It is useful to distinguish between the capability of de-
tecting that a given application protocol is in use, versus
then being able to continue to analyze that instance of
use. Merely detecting the use of a given protocol can
already provide actionable information; it might consti-
tute a policy violation at a site for which a NIDS could
institute blocking without needing to further analyze the
connection. However, such a coarse-grained “go/no-go”
capability has several drawbacks:
In addition, some protocols are fundamentally difﬁcult
to detect with signatures, for example unstructured proto-
cols such as Telnet. For Telnet, virtually any byte pattern
at the beginning is potentially legitimate. Telnet can only
be detected heuristically, by looking for plausible login
dialogs [31]. Another example is DNS, a binary proto-
col with no protocol identiﬁer in the packet. The DNS
header consists of 16-bit integers and bit ﬁelds which
can take nearly arbitrary values. Thus, reliably detect-
ing DNS requires checking the consistency across many
ﬁelds. Similar problem exist for other binary protocols.
USENIX Association
Security ’06: 15th USENIX Security Symposium
261
Another difﬁculty is that if an attacker knows the sig-
natures, they may try to avoid the byte patterns that trig-
ger the signature match. This means one needs “tight”
signatures which comprehensively capture any use of a
protocol for which an attacked end-system might engage.
Finding such “tight” signatures can be particularly dif-
ﬁcult due to the variety of end-system implementations
and their idiosyncrasies.
4 Architecture
In this section we develop a framework for performing
dynamic application-layer protocol analysis. Instead of
a static determination of what analysis to perform based
on port numbers, we introduce a processing path that dy-
namically adds and removes analysis components. The
scheme uses a protocol detection mechanism as a trigger
to activate analyzers (which are then given the entire traf-
ﬁc stream to date, including the portion already scanned
by the detector), but these analyzers can subsequently
decline to process the connection if they determine the
trigger was in error. Currently, our implementation relies
primarily on signatures for protocol detection, but our
design allows for arbitrary other heuristics.
We present the design of the architecture in §4.1 and a
realization of the architecture for the open-source NIDS
Bro in §4.2. We ﬁnish with a discussion of the tradeoffs
that arise in §4.3.
4.1 Design
Our design aims to achieve ﬂexibility and power-of-
expression, yet to remain sufﬁciently efﬁcient for oper-
ational use. We pose the following requirements as nec-
essary for these goals:
Detection scheme independence: The
architecture
must accommodate different approaches to proto-
col detection (§3.1). In addition, we should retain
the possibility of using multiple techniques in
parallel (e.g., complementing port-based detection
with signature-based detection).
Dynamic analysis: We need the capability of dynami-
cally enabling or disabling protocol-speciﬁc analy-
sis at any time during the lifetime of a connection.
This goal arises because some protocol detection
schemes cannot make a decision upon just the ﬁrst
packet of a connection. Once they make a decision,
we must trigger the appropriate protocol analysis.
Also, if the protocol analysis detects a false posi-
tive, we must have the ability to stop the analysis.
Modularity: Reusable components allow for code reuse
and ease extensions. This becomes particularly im-
IP
TCP
SMTP
Interact.
IMAP
POP3
IP
TCP
PIA
IP
TCP
PIA
HTTP 
IP
TCP
PIA
SSL
HTTP 
(a)
(b)
(c)
(d)
Figure 1: Example analyzer trees.
portant for dealing with multiple network substacks
(e.g., IP-within-IP tunnels) and performing in paral-
lel multiple forms of protocol analysis (e.g., decod-
ing in parallel with computing packet-size distribu-
tions).
Efﬁciency: The additional processing required by the
extended NIDS capabilities must remain commen-
surate with maintaining performance levels neces-
sary for processing high-volume trafﬁc streams.
Customizability: The combination of analysis to per-
form needs to be easily adapted to the needs of
the local security policy. In addition, the trade-offs
within the analysis components require conﬁgura-
tion according to the environment.
To address these requirements we switch from the tra-
ditional static data analysis path to a dynamic one inside
the NIDS’s core. Traditional port-based NIDSs decide at
the time when they receive the ﬁrst packet of each con-
nection which analyses to perform. For example, given
a TCP SYN packet with destination port 80, the NIDS
will usually perform IP, TCP, and HTTP analysis for all
subsequent packets of this ﬂow. Our approach, on the
other hand, relies on a per-connection data structure for
representing the data path, which tracks what the system
learns regarding what analysis to perform for the ﬂow.
If, for example, the payload of a packet on port 80/tcp—
initially analyzed as HTTP—looks like an IRC session
instead, we replace the HTTP analysis with IRC analy-
sis.
We provide this ﬂexibility by associating a tree struc-
ture with each connection. This tree represents the data
path through various analysis components for all infor-
mation transmitted on that connection (e.g., Figure 1(a)).
Each node in this tree represents a self-contained unit of
analysis, an analyzer. Each analyzer performs some kind
262
Security ’06: 15th USENIX Security Symposium
USENIX Association
of analysis on data received via an input channel, subse-
quently providing data via an output channel. The input
channel of each node connects to an output channel of
its data supplier (its predecessor in the data path tree).
The input channel of the tree’s root receives packets be-
longing to the connection/ﬂow. Each intermediate node
receives data via its input channel and computes analysis
results, passing the possibly-transformed data to the next
analyzer via its output channel.
Figure 1(a) shows an example of a possible analyzer
tree for decoding email protocols. In this example, all
analyzers (except INTERACTIVE) are responsible for
the decoding of their respective network protocols. The
packets of the connection ﬁrst pass through the IP ana-
lyzer, then through the TCP analyzer. The output chan-
nel of the latter passes in replica to three analyzers for
popular email protocols: SMTP, IMAP, and POP3. (Our
architecture might instantiate such a tree for example if
a signature match indicates that the payload looks like
email but does not distinguish the application-layer pro-
tocol.) Note, though, that the analyzers need not corre-
spond to a protocol, e.g., INTERACTIVE here, which
examines inter-packet time intervals to detect surrepti-
tious interactive trafﬁc [41], performing its analysis in
parallel to, and independent from, the TCP and email
protocol analyzers.