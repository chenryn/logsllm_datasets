parameters to those methods are handled. Often, more methods are available
than are ever called from within application pages, and you may also discover
more about the purpose and handling of parameters to these methods.
For example, a component may expose a method that can be invoked to enable
or disable parts of the visible user interface. Using your intercepting proxy, you
may be able to edit the HTML page that loads the component and modify or
add some JavaScript to unlock parts of the interface that are hidden.
HACK STEPS
1. Use the techniques described to download the component’s bytecode,
unpack it, and decompile it into source code.
2. Review the relevant source code to understand what processing is being
performed.
3. If the component contains any public methods that can be manipulated to
achieve your objective, intercept an HTML response that interacts with the
component, and add some JavaScript to invoke the appropriate methods
using your input.
4. If not, modify the component’s source code to achieve your objective, and
then recompile it and execute it, either in your browser or as a standalone
program.
5. If the component is being used to submit obfuscated or encrypted data to
the server, use your modified version of the component to submit various
suitably obfuscated attack strings to the server to probe for vulnerabili-
ties, as you would for any other parameter.
Coping with Bytecode Obfuscation
Because of the ease with which bytecode can be decompiled to recover its
source, various techniques have been developed to obfuscate the bytecode itself.
Applying these techniques results in bytecode that is harder to decompile or that
decompiles to misleading or invalid source code that may be very diffi cult to
understand and impossible to recompile without substantial effort. For example,
consider the following obfuscated Java source:
package myapp.interface;
import myapp.class.public;
import myapp.throw.throw;
cc0055..iinndddd 114444 88//1199//22001111 1122::0055::4444 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 145
Chapter 5 n Bypassing Client-Side Controls 145
import if.if.if.if.else;
import java.awt.event.KeyEvent;
public class double extends public implements strict
{
public double(j j1)
{
_mthif();
_fldif = j1;
}
private void _mthif(ActionEvent actionevent)
{
_mthif(((KeyEvent) (null)));
switch(_fldif._mthnew()._fldif)
{
case 0:
_fldfloat.setEnabled(false);
_fldboolean.setEnabled(false);
_fldinstanceof.setEnabled(false);
_fldint.setEnabled(false);
break;
...
The obfuscation techniques commonly employed are as follows:
n Meaningful class, method, and member variable names are replaced
with meaningless expressions such as a, b, and c. This forces the reader
of decompiled code to identify the purpose of each item by studying how
it is used. This can make it diffi cult to keep track of different items while
tracing them through the source code.
n Going further, some obfuscators replace item names with keywords
reserved for the language, such as new and int. Although this technically
renders the bytecode illegal, most virtual machines (VMs) tolerate the
illegal code, and it executes normally. However, even if a decompiler
can handle the illegal bytecode, the resulting source code is even less
readable than that just described. More importantly, the source cannot
be recompiled without extensive reworking to consistently rename
illegally named items.
n Many obfuscators strip unnecessary debug and meta-information from
the bytecode, including source fi lenames and line numbers (which makes
stack traces less informative), local variable names (which frustrates debug-
ging), and inner class information (which stops refl ection from working
properly).
n Redundant code may be added that creates and manipulates various kinds
of data in signifi cant-looking ways but that is autonomous from the real
data actually being used by the application’s functionality.
cc0055..iinndddd 114455 88//1199//22001111 1122::0055::4444 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 146
146 Chapter 5 n Bypassing Client-Side Controls
n The path of execution through code can be modifi ed in convoluted ways,
through the use of jump instructions, so that the logical sequence of execu-
tion is hard to discern when reading through the decompiled source.
n Illegal programming constructs may be introduced, such as unreachable
statements and code paths with missing return statements. Most VMs
tolerate these phenomena in bytecode, but the decompiled source cannot
be recompiled without correcting the illegal code.
HACK STEPS
Effective tactics for coping with bytecode obfuscation depend on the tech-
niques used and the purpose for which you are analyzing the source. Here are
some suggestions:
1. You can review a component for public methods without fully under-
standing the source. It should be obvious which methods can be invoked
from JavaScript, and what their signatures are, enabling you to test the
behavior of the methods by passing in various inputs.
2. If class, method, and member variable names have been replaced with
meaningless expressions (but not special words reserved by the pro-
gramming language), you can use the refactoring functionality built into
many IDEs to help yourself understand the code. By studying how items
are used, you can start to assign them meaningful names. If you use the
rename tool within the IDE, it does a lot of work for you, tracing the item’s
use throughout the codebase and renaming it everywhere.
3. You can actually undo a lot of obfuscation by running the obfuscated byte-
code through an obfuscator a second time and choosing suitable options.
A useful obfuscator for Java is Jode. It can remove redundant code paths
added by another obfuscator and facilitate the process of understanding
obfuscated names by assigning globally unique names to items.
Java Applets: A Worked Example
We will now consider a brief example of decompiling browser extensions by
looking at a shopping application that performs input validation within a Java
applet.
In this example, the form that submits the user’s requested order quantity
looks like this:
Product: Samsung Multiverse 
Price: 399 
Quantity:  (Maximum quantity is 50)
When the form is submitted with a quantity of 2, the following request is made:
POST /shop/154/Shop.aspx?prod=2 HTTP/1.1
Host: mdsec.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 77
obfpad=klGSB8X9x0WFv9KGqilePdqaxHIsU5RnojwPdBRgZuiXSB3TgkupaFigjUQm8CIP5
HJxpidrPOuQ
Pw63ogZ2vbyiOevPrkxFiuUxA8Gn30o1ep2Lax6IyuyEUD9SmG7c&quantity=4b282c510f
776a405f465
877090058575f445b536545401e4268475e105b2d15055c5d5204161000
As you can see from the HTML code, when the form is submitted, the vali-
dation script passes the user’s supplied quantity, and the value of the obfpad
parameter, to a Java applet called CheckQuantity. The applet apparently performs
the necessary input validation and returns to the script an obfuscated version
of the quantity, which is then submitted to the server.
Since the server-side application confi rms our order for two units, it is clear
that the quantity parameter somehow contains the value we have requested.
However, if we try to modify this parameter without knowledge of the obfusca-
tion algorithm, the attack fails, presumably because the server fails to unpack
our obfuscated value correctly.
cc0055..iinndddd 114477 88//1199//22001111 1122::0055::4444 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 148
148 Chapter 5 n Bypassing Client-Side Controls
In this situation, we can use the methodology already described to decompile
the Java applet and understand how it functions. First, we need to download
the bytecode for the applet from the URL specifi ed in the applet tag of the
HTML page:
/scripts/CheckQuantity.class
Since the executable is not packaged as a .jar fi le, there is no need to unpack
it, and we can run Jad directly on the downloaded .class fi le:
C:\tmp>jad CheckQuantity.class
Parsing CheckQuantity.class...The class file version is 50.0 (only 45.3,
46.0 and 47.0 are supported)
Generating CheckQuantity.jad
Couldn’t fully decompile method doCheck
Couldn’t resolve all exception handlers in method doCheck
Jad outputs the decompiled source code as a .jad fi le, which we can view in
any text editor:
// Decompiled by Jad v1.5.8f. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3)
// Source File Name: CheckQuantity.java
import java.applet.Applet;
public class CheckQuantity extends Applet
{
public CheckQuantity()
{
}
public String doCheck(String s, String s1)
{
int i = 0;
i = Integer.parseInt(s);
if(i  50)
return null;
break MISSING_BLOCK_LABEL_26;
Exception exception;
exception;
return null;
String s2 = (new StringBuilder()).append(“rand=”).append
(Math.random()).append(“&q=”).append(Integer.toString(i)).append
(“&checked=true”).toString();
StringBuilder stringbuilder = new StringBuilder();
for(int j = 0; j  2)
s3 = s3.substring(k - 2, k);
stringbuilder.append(s3);
}
return stringbuilder.toString();
}
}
As you can see from the decompiled source, Jad has done a reasonable job of
decompiling, and the source code for the applet is simple. When the doCheck
method is called with the user-supplied quantity and application-supplied
obfpad parameters, the applet fi rst validates that the quantity is a valid num-
ber and is between 1 and 50. If so, it builds a string of name/value pairs using
the URL querystring format, which includes the validated quantity. Finally, it
obfuscates this string by performing XOR operations against characters with the
obfpad string that the application supplied. This is a fairly easy and common
way of adding some superfi cial obfuscation to data to prevent trivial tampering.
We have described various approaches you can take when you have decom-
piled and analyzed the source code for a browser extension component. In this
case, the easiest way to subvert the applet is as follows:
1. Modify the doCheck method to remove the input validation, allowing you
to supply an arbitrary string as your quantity.
2. Add a main method, allowing you to execute the modifi ed component
from the command line. This method simply calls the modifi ed doCheck
method and prints the obfuscated result to the console.
When you have made these changes, the modifi ed source code is as follows:
public class CheckQuantity
{
public static void main(String[] a)
{
System.out.println(doCheck(“999”,
“klGSB8X9x0WFv9KGqilePdqaxHIsU5RnojwPdBRgZuiXSB3TgkupaFigjUQm8CIP5HJxpi
drPOuQPw63ogZ2vbyiOevPrkxFiuUxA8Gn30o1ep2Lax6IyuyEUD9 SmG7c”));
}
public static String doCheck(String s, String s1)
{
String s2 = (new StringBuilder()).append(“rand=”).append
(Math.random()).append(“&q=”).append(s).append
(“&checked=true”).toString();
StringBuilder stringbuilder = new StringBuilder();
for(int j = 0; j  2)
s3 = s3.substring(k - 2, k);
stringbuilder.append(s3);
}
return stringbuilder.toString();
}
}
This version of the modifi ed component provides a valid obfuscated string
for the arbitrary quantity of 999. Note that you could use nonnumeric input
here, allowing you to probe the application for various kinds of input-based
vulnerabilities.
TIP The Jad program saves its decompiled source code with the .jad exten-
sion. However, if you want to modify and recompile the source code, you need
to rename each source fi le with the .java extension.
All that remains is to recompile the source code using the javac compiler
that comes with the Java SDK, and then execute the component from the
command line:
C:\tmp>javac CheckQuantity.java
C:\tmp>java CheckQuantity
4b282c510f776a455d425a7808015c555f42585460464d1e42684c414a152b1e0b5a520a
145911171609
Our modifi ed component has now performed the necessary obfuscation
on our arbitrary quantity of 999. To deliver the attack to the server, we simply
need to submit the order form in the normal way using valid input, intercept
the resulting request using our proxy, and substitute the obfuscated quantity
with the one provided by our modifi ed component. Note that if the application
issues a new obfuscation pad each time the order form is loaded, you need to
ensure that the obfuscation pad being submitted back to the server matches the
one that was used to obfuscate the quantity also being submitted.
TRY IT!
These examples demonstrate the attack just described and the corresponding
attacks using Silverlight and Flash technologies: