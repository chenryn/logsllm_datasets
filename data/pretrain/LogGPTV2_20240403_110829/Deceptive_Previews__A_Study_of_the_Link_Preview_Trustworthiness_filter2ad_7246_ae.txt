e
l
t
i
t
e
t
i
S
.
r
c
s
e
d
e
t
i
S
e
g
a
m
I
t
s
o
H
N N N N
-
-
-
N
N
-
N N N (cid:51)
N (cid:51)
N (cid:51)
N (cid:51)
N N N (cid:51)
N N N (cid:51)
N N N (cid:51)
N N N N
-
N
N N N
N
-
-
-
-
-
-
-
-
-
-
-
-
Name
Facebook
Twitter
VK
LinkedIn
Pinterest
Tumblr
Medium
Xing
Plurk
MeWe
Instagram
-
-
N
Snapchat
WhatsApp
Skype
Line
Viber
(cid:51)
Messenger N N N N (cid:51)
N (cid:51)
N N N N (cid:51)
N N N (cid:51)
(cid:51)
N (cid:51)
KakaoTalk N N N (cid:51) (cid:51)
N N N N (cid:51)
N N N
N
N N N N N
Telegram
Slack
-
-
-
-
TABLE VII: Summary of the evaluation of our attacks. We
use “N” when the attacker can change a ﬁeld via HTML tags.
We use “(cid:51)” when the attacker can replace the value of a ﬁeld
via the domain name of the malicious URL. We use “” when
a bypass technique and attack succeeded. Finally, we use “-
” when the ﬁeld is not present or when we did not test the
platform.
1) Crafting Fields: We evaluate the replacement of the
preview ﬁelds considering two types of attacker models. The
ﬁrst one is a person that can create malicious web pages and
upload them on a web server. This setting intends to model the
common scenario where the attacker exploits vulnerabilities
in existing servers or web applications to upload malicious
content such as phishing pages. Since this attacker controls the
web page content, they can modify the title, the description,
and the images with ones of their choice. Here, the attacker can
store the selected values in the meta tags or the standard HTML
tags. In Table VII, we mark these ﬁeld with “N”. However,
such an attacker may not be able to alter the content of the
domain name and the shared URL.
The second type of attacker possesses the capabilities of the
previous attacker and extends them with the ability to register
domain names. This scenario intends to model the typical
attacker that registers fraudulent domain names to support
their malicious activities. Being able to register domain names
extends the abilities of the previous attacker as it allows for
crafting the domain name and shared URL too.
In the remainder, we present our analysis, discussing in
detail what an attacker could do to change the content of these
two ﬁelds. We grouped our results in ﬁve distinct classes based
on the observed behaviors:
a) Link Previews without Domain Name: One platform,
i.e., Plurk, does not include any information regarding the
9
landing page URL, i.e., neither the domain name nor the
original URL. In this case,
the creation of a crafted link
preview is straightforward. An example of preview for Plurk
is Figure 3b.
Instagram and Line do not show the domain name either.
However, we point out that they show the original URL. In
our experiments, we could not ﬁnd a way to remove or replace
the string of the shared URL from the preview. Accordingly,
it can be changed only by an attacker who has full control of
the URL string.
b) Replacing Domain Name using og:url: In Face-
book, we observed that when the URL of the shared webpage
mismatches the og:url meta tag, the preview ﬁelds title,
image, description and host are retrieved from the webpage
hosted at the URL speciﬁed in the og:url meta tag rather
than in the shared one. Nonetheless, the ﬁnal landing page
remains the URL of the shared web page. In this case, the
attacker can assign to the tag og:url a URL of a benign re-
source, resulting in a preview that is entirely indistinguishable
from a benign preview. Figure 3c shows such a benign-looking
preview. The Messenger app shows the same behavior, but the
attacker cannot remove the shared URL from the message text;
due to the mismatch between the shared URL and the preview,
we say that this attack is possible only for an attacker that can
register domain names.
WhatsApp replaces the content of the host ﬁeld only,
showing the URL speciﬁed in the og:url meta tag. Also in
this case, the shared URL cannot be removed from the message
text, requiring the attacker to register a new domain name for
this purpose.
c) Removing Shared URLs in IMs: One IM platform,
i.e., Slack, permits the editing of the content of sent messages.
We veriﬁed that a user could edit the URL string of a message
too, after the creation of the preview, effectively eliminating
this ﬁeld from the rendered preview. The platforms Snapchat,
Skype and Viber remove the URL from the message text after
posting, although we observe that they include the domain
name in the preview, which is extracted directly from the
shared URL. We could not ﬁnd a way to replace the domain
name with an arbitrary string. Therefore, this attack may not
be successful for an attacker controlling the webpage content
only.
d) Replacing Domain using og:site_name: During
our experiments, we discovered that three platforms, i.e., Xing,
Telegram and Slack, replace the domain name with the content
of the og:site_name meta tag.
As mentioned before, Slack allows removing the shared
URL from the message text after posting the link. Accordingly,
an attacker can generate a preview that looks like a benign one
only by controlling the HTML code of the page. Figure 3a
shows an example of such a link preview.
Xing does not include the original URL; therefore, con-
trolling the web page content is sufﬁcient to craft a URL
preview where the domain name is replaced with the site name.
Figure 3d shows such a link preview.
Then, replacing the domain name of Telegram’s preview
with the og:site_name meta tag may not be sufﬁcient as
(c) Facebook
(a) Slack
(b) Plurk
(d) Xing
Fig. 3: Examples of maliciously-crafted previews by an at-
tacker who controls the content of a webpage. In all these
examples, the shared page does not include the text in de-
scription, nor the displayed image.
(c) Messenger
(a) Twitter
(b) Tumblr
(d) Telegram
Fig. 4: Examples of crafted previews that always show the
domain name. The red box shows the position of the domain
name.
Telegram includes the shared URL that we could not remove.
Accordingly, the creation of a Telegram’s preview is more
suitable for an attacker that can register domain names.
2) Attacks: To summarize, our analysis shows that it is
possible to create an attack against each platform. Our attacks
can create entirely indistinguishable link previews against four
platforms, i.e., Facebook, Xing, Plurk, and Slack, by changing
only the content of the malicious web page. In three cases,
the attacker needs to exploit seemingly innocuous behaviors of
10
the platforms to achieve their goal. For example, on Facebook,
the attacker can replace the domain name with the domain of
og:url meta tag, whereas for Xing and Slack, the attacker
can replace the domain name by using the og:site_name
tag. As Slack includes the shared URL too, the attacker can
also remove the original URL from the preview after its
creation. We point out that, in all these four cases, even when
the attacker replaces or hides the domain names and the shared
URLs, the landing pages, i.e., the malicious pages, of the link
preview remain unchanged. When the attacker controls the
domain name, then the remaining platforms can be targeted
as well. Figure 4 show examples of partially crafted link
previews. The areas in red contain either the domain name or
the original URL. Finally, the evaluation for two platforms,
i.e., Medium and Plurk, was limited to the generation of
the previews. On these two platforms, we did not share any
malicious URLs as they cannot restrict the visibility of the
shared content.
B. Bypassing Countermeasures
When sharing malicious content, social media platforms
may detect the maliciousness of the shared web page. As
shown in Section IV, only two platforms can detect when
a URL is known to be distributing malware by using, e.g.,
Google Safe Browsing [14]. In this section, we focus on these
two platforms and show that, despite the efforts of validating
URLs, it is possible to bypass these controls by creating ad-
hoc web pages. In this page, we consider two approaches that
are based on the ﬁndings of Sections III-A4 and III-B.
1) Redirections: During our experiments of Section III-A4,
we observed that all platforms except for one (Facebook) do
not support HTTP redirections. As a result, those platforms
may not be able to determine the next URL in the redi-
rection chain, and accordingly, they should fail in verifying
whether the URL is malicious. We tested our hypothesis and
conﬁrmed that client-side redirections could effectively bypass
both Twitter and LinkedIn URL validation. The evaluation with
redirections is summarized in Table VI.
However, interestingly, we also found out that it is possible
to bypass the URL ﬁltering of LinkedIn with a server-side
redirection, i.e., 30x response. Here, we suspect that LinkedIn
does not validate the Location header of the HTTP response
sent by the redirector.
2) Link Cloaking: As a ﬁnal step, an attacker may resort
to cloaking attacks. The analysis Section III-B showed that
the source IP and the user agent strings of the social media
platforms are unique, and an attacker can leverage on these
features to change the behavior of the servers selectively. For
example, when the incoming request matches one of the known
signatures, the server will deliver the benign web page for link
preview creation. Otherwise, the server delivers the malicious
web page.
VI. DISCUSSION AND RECOMMENDATIONS
In this section, we discuss our results and distill a set
of recommendations for social media platforms towards the
creation of more reliable link previews.
A. Variety of Layouts and Processing Rules Can Lead to
Underestimate the Risk
Our results show a great variety of layouts used by the plat-
forms under evaluation. We distinguished 14 distinct templates
for link previews. Also, we observed that the same platform
could create many variants of the same template, for example,
by removing or replacing ﬁelds.
The variety that we observed suggests that there is no gen-
eral consensus on (i) which ﬁelds constitute a link preview, (ii)
under which circumstances ﬁelds are displayed, and (iii) the
processing rules and priority. The lack of consensus can have a
dramatic impact on the way users evaluate the trustworthiness
of a preview. As users can be exposed to different layouts,
they may neglect the importance of a ﬁeld, underestimating
the overall security risks of a link.
(R1) Standardize Content and Construction Rules of Link
Previews: Our ﬁrst recommendation is to deﬁne and agree on
the content of link previews, and the exact rules to construct
them.
B. Distrustful Scenario
The scenario in which social platforms operate is charac-
terized by distrust. On the one hand, social platforms cannot
verify the truthfulness of webpages content. For example,
they cannot decide whether an image or a title is appropriate
for a given page. Accordingly, social platforms cannot trust
webpages. On the other hand, users can leverage on their
own experiences and skills to navigate the web and inspect
both URLs and the circumstances that led them to see those
URLs looking for warning signals, indicating that pages may
be dangerous. Experienced users may be trusting webpages
they are familiar with, e.g., their web email provider; however,
in the general case, they will not trust any page.
In a scenario with these trust relationships, social media
platforms act as intermediaries between web pages and users,
providing to the latter syntheses of the former. In playing such
a role, social platforms should avoid introducing interpretations
of the content of the webpages or using processing rules
that can hide or distort the preview of the page. Also, social
platforms should enforce the presence of security-relevant
ﬁelds that users can use to decide whether to click, i.e., domain
names, and original URLs. While most of the social platforms
under test include a domain name or the original URL, four
of them, i.e., Facebook, Xing, Plurk, and Slack do not satisfy
such a requirement. From the analysis of these four platforms,
we derive the following recommendations:
(R2) Show Domain or URL: As reported in Table III and
further detailed in Section V-A1a, the link preview created
by the social network Plurk does not include any host ﬁeld,
and there is no URL in the post text. As this information is
signiﬁcant in assessing the trustworthiness of the link preview,
we include as part of our recommendations that link previews
must include either the domain name or the shared URL.
Among the platforms under evaluation, only Plurk does not
comply with our recommendation.
(R3) Limit Edits of Posts or Refresh Previews: Platforms
may want to allow users to edit previous posts. In these cases,
they should forbid changing the shared URLs. Alternatively,
11
HTML title
Listing (2) Example of Malicious Page Shared on Slack
(a) Rendered Preview
Fig. 5: Example of Malicious Link Preview.
when changing the URL is admitted, platforms should re-build
the link preview and replace the old preview with the new
one. In our experiments, and in particular in Section V-A1c,
we observed that Slack allows users to remove URLs from
previous messages without updating the link preview. This
feature can be misused as shown in Figure 3a, especially if
the domain name ﬁeld contains an arbitrary string rather than
the actual domain or URL.
(R4) Create Preview Without Retrieving Referred Pages:
Platforms should create link previews using data items con-
tained in the code of the landing page. When the landing
page contains external links such as og:url, platforms could
consider such resources as long as they are in the same domain
as the landing page. Furthermore, platforms should not use
such URLs to build the entire preview. In Section V-A1b, we
observed that Facebook creates the entire preview by using
the content of the URL in the og:url tag, and an attacker
can hide a malicious webpage by creating a link preview
with a YouTube video using only the og:url meta tag (see,
Figure 5a).
(R5) Type Fields: In Section III-A2 we observed that, in a
few social platforms, it is possible to override the content of
the domain name ﬁeld by adding the og:site_name meta
tag. When the platform additionally does not include the shared
URL in the text ﬁeld of the post, as observed in Section V-A1d
for the social network Xing, the ﬁnal link preview contains
no trusted information on the URL, as the domain ﬁeld can
contain an arbitrary string. Therefore, we recommend that
each ﬁeld of a link preview should have a well-deﬁned type,
e.g., image, description, title, domain, and URL. Then, when
creating a preview, platforms should not use the content of a
ﬁeld of type t1 to ﬁll a ﬁeld of a different type t2.
C. Upstream vs Downstream URL Validation
During the lifetime of a link preview, there are different
points in time when malicious links can be detected, e.g., when
platforms accept the URL and when users click on the preview.
In the remaining, we discuss where and how such a check
should be enforced.
(R6) Do Upstream URL Validation: When testing social
media platforms against phishing URLs, we observed that
not all browsers could show Google Safe Browsing warn-
ing messages before loading malicious URLs. In particular,
we veriﬁed that
the in-app browsers as used per default
conﬁguration by Messenger, Slack, Telegram, Line, Insta-