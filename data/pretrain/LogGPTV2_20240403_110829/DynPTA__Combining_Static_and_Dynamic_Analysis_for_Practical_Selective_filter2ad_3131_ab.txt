Both begin by iterating over every instruction and collecting
constraints related to the ﬂows of pointers. These constraints
are of the types Addr-of, Copy, Deref, and Assign. For C
programs, these correspond to statements of the form p := &q,
p := q, p := ∗q, and ∗p := q, respectively. Each algorithm
solves these constraints using a set of resolution rules.
Andersen’s analysis begins by constructing points-to sets
for each pointer. When a new possible target q is found for
a pointer p, then q is included in the points-to set of p. This
inclusion, however, requires the recomputation of the pointer
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1920
relationships for all Deref constraints that involve p, resulting in
a cubic complexity of O(n3). This makes Andersen’s algorithm
inapplicable to large and complex applications.
Steensgaard’s analysis maintains both pointer sets and points-
to sets. Every pointer is a member of a unique set, and a points-
to relationship is represented as a one-to-one mapping between
a pointer and a points-to set, i.e., all pointers in a pointer set
may point to all objects in a points-to set. When a new target
q is found for a pointer p, p’s points-to set is uniﬁed with
the set that contains q. This allows the algorithm to run in
almost linear time, making it applicable to large applications.
However, the uniﬁcation of pointer sets leads to a signiﬁcant
loss of precision, which makes the analysis results less useful.
We discuss the constraints and resolution rules in more detail
and also illustrate the results of running both Andersen’s and
Steensgaard’s analysis on a C code snippet in Appendix A.
2) Memory Object Modeling: Although constraint resolution
is an important consideration, the way constraints are modeled
also affects the analysis precision and speed. Context sensitivity
is a constraint modeling approach that considers the calling
context when analyzing the target of a function call. When
a function is invoked from multiple call sites, each site is
analyzed independently, reducing imprecision. This is critical
for functions that allocate or reassign objects referenced by their
arguments, or functions that return pointers. The prevalent use
of wrapper functions around memory allocation routines makes
context sensitivity a particularly important issue. Performing
context-insensitive analysis for memory wrappers would cause
all pointers to heap memory to point to the same object.
We address this issue by introducing a summarization-based
context-sensitive heap modeling approach (Section IV-B).
B. In-memory Data Encryption
Starting with the programmer’s sensitive data annotations, the
results of value ﬂow analysis and pointer analysis provide us the
set of all memory load and store instructions that may access
sensitive memory locations. How these memory locations will
be protected against data leakage attacks is an orthogonal
design decision with various possible options. Relying on
typical software-based memory safety checks [31] requires the
insertion of just a few instructions per memory access, but does
not offer any protection against transient execution attacks [7,
19]. Relying on hardware-enforced memory isolation [30, 32,
42] can potentially reduce the cost of memory protection, but
the coarse-grained nature of these isolation mechanisms make
them challenging to use for individual memory objects, while
they may not be available on legacy systems.
An alternative is to keep sensitive data always encrypted
in memory, and decrypt it only when being loaded into CPU
registers [33]. Leaking secrets from registers requires arbitrary
code execution, which falls outside our threat model. The main
beneﬁts of this approach include protection against transient
execution attacks, and wide applicability on existing and legacy
systems. The main drawback is the exceedingly high runtime
overhead of cryptographic transformations, even with hardware
acceleration through the AES-NI extensions.
For DynPTA, we opted to protect sensitive data using
in-memory encryption due to its attractive beneﬁts. As the
key advantage of our approach is that it ameliorates the
overapproximation of the points-to analysis using runtime
information, we can afford the cost of cryptographic operations,
as they will be applied sparingly.
III. THREAT MODEL
We consider memory disclosure or data leakage vulnerabili-
ties that allow an attacker to read arbitrary user-space memory.
Data modiﬁcation (e.g., swapping an encrypted value with
another leaked encrypted value) or corruption attacks are out
of the scope of this work. We assume that either due to the
nature of the vulnerability (e.g., Heartbleed), or due to defenses
and mitigations against arbitrary code execution, the attacker
has to resort to a data leakage attack. Given that attackers cannot
execute arbitrary machine code, any sensitive information or
secrets stored in the processor’s registers remain safe. Note that
attackers may still run arbitrary script code (e.g., in-browser
JavaScript) to access any part of the process’s address space
through a memory disclosure vulnerability [6].
Our focus is on user-space applications, and the exploitation
of kernel vulnerabilities is out of scope, as we assume that the
attacker cannot corrupt any kernel code or data.
Transient execution attacks can be classiﬁed as Spectre-
type [18] or Meltdown-type [43], depending on whether the
program can access the compromised data architecturally [7].
Spectre-type attacks bypass software-deﬁned security policies,
such as bounds checking. Meltdown-type attacks bypass
architectural isolation barriers, and allow access to sensitive
data using instructions that cause hardware faults. We consider
both user-space Spectre-type and Meltdown-type attacks in our
threat model, but their kernel variants are out of scope.
Potential implicit leakage of sensitive data that takes part in
computation that observably affects control ﬂow (e.g., through
execution timing side channels) is outside our threat model.
IV. DESIGN
The main goal of DynPTA is to protect sensitive memory-
resident process data from leakage. Due to the presence
of pointers in C/C++, pointer analysis is required to re-
solve sensitive memory accesses. DynPTA ameliorates the
imprecision of existing (scalable) pointer analysis algorithms
by coupling static pointer analysis with dynamic data ﬂow
tracking (DFT). In particular, DynPTA uses a scoped form of
dynamic DFT that maintains labels for only potentially sensitive
memory objects. For a given sensitive pointer dereference,
DynPTA selectively encrypts or decrypts the accessed data
depending on the presence or absence of the sensitive label.
Although scoped DFT does not improve the precision of pointer
analysis per se, it ensures that only sensitive data undergoes
expensive cryptographic transformations. The sensitive data
to be protected is identiﬁed by the developer, who annotates
the respective variables or pointer initialization locations in
the source code—no further manual code modiﬁcations are
required, and the rest of the process is fully automated.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1921
D3RLQWVWR $QDO\VLV
E(QFU\SWLRQZLWKRXW'DWD)ORZ7UDFNLQJ
F(QFU\SWLRQwith 'DWD)ORZ7UDFNLQJ
reg1 = *ptr1;
*ptr2 =  reg2;
reg1 = decr(*ptr1);
*ptr2 = encr( reg2);
reg1 = isSensitive(ptr1) ? decr(*ptr1) : *ptr1;
*ptr2 = isSensitive(ptr2) ? encr( reg2) :  reg2;
mem1
mem2
mem3
mem4
reg1
reg2
ĚĞĐƌǇƉƚ
ĚĞĐƌǇƉƚ
ĚĞĐƌǇƉƚ
ĞŶĐƌǇƉƚ
ĚĞĐƌǇƉƚ
ĞŶĐƌǇƉƚ
mem1
mem2
mem3
mem4
reg1
ptr1
reg2
ptr2
Actual Sensitive Data
mem1
mem2
mem3
mem4
reg1
reg2
ĚĞĐƌǇƉƚ
ĞŶĐƌǇƉƚ
Fig. 1: In this example, mem4 has been marked as sensitive, and it can be accessed through ptr1 and ptr2, along with other
memory locations (a). Relying on points-to analysis alone necessitates treating all target locations as sensitive, resulting in
excessive cryptographic transformations (b). Before dereferencing a pointer, DynPTA relies on scoped dynamic data ﬂow
tracking to ﬁrst check if the object is truly sensitive, and only then performs the required encryption or decryption operation (c).
Without the use of data ﬂow tracking, the inherent overap-
proximation of pointer analysis would result in an excessive
number of cryptographic operations for data that is not actually
sensitive. Figure 1 illustrates how the use of scoped DFT
dramatically reduces the required instrumentation, by protecting
only the data that is actually sensitive. Consider the sample
code snippet in Figure 1(a). In this example, we assume
the programmer has speciﬁed that location mem4 contains
sensitive data. The two memory load and store instructions
are performed via pointers, and the pointer analysis algorithm
resolves pts(ptr1) := {mem1, mem2, mem3, mem4}, and
pts(ptr2) := {mem3, mem4}. These results may contain
overapproximation, i.e., the memory locations that will be
accessed through the two pointers may be fewer than the
locations the points-to analysis denotes as potential targets.
As shown in Figure 1(b), relying solely on static analysis,
we would conclude that ptr2 may point to sensitive memory
mem4, and therefore the value being stored must be encrypted
ﬁrst. As ptr2 may also be used to store values to mem3, the
content of mem3 will end up being encrypted as well. Similarly,
the pointer analysis informs us that ptr1 may be used to read
not only from mem3 and mem4, but also from two more
memory locations. Since any read access through ptr1 will
ﬁrst decrypt the fetched data, all memory objects that ptr1
may point to (mem1, mem2, mem3, mem4) must be kept
encrypted in memory to maintain the correct execution of the
program—otherwise any non-encrypted data accessed through
the pointer would be mangled by the decryption operation.
Instead of unconditionally encrypting (or decrypting) all
memory objects written (or read) through a pointer associated
with sensitive data, DynPTA uses scoped dynamic DFT to
maintain labels for sensitive objects. At runtime, DynPTA
selectively applies cryptographic transformations depending on
the presence or absence of the sensitive label for a given pointer
dereference. As shown in Figure 1(c), before reading through
ptr1 or writing through ptr2, DynPTA ﬁrst dynamically checks
$QQRWDWHG
%LWFRGH

6HQVLWLYH2EMHFW
,GHQWLILFDWLRQ

6WHHQVJDDUG3RLQWHU$QDO\VLVZLWK
&RQWH[WVHQVLWLYH+HDS0RGHOLQJ
([HFXWDEOH
+DUGHQHG
%LWFRGH
/RZHULQJWR
0DFKLQH&RGH

$(6
7UDQVIRUPV


9DOXH)ORZ
$QDO\VLV
'\QDPLF
)ORZ
7UDFNLQJ
Fig. 2: DynPTA’s main analysis and transformation phases.
whether the pointed object is truly sensitive, and if so, then
applies the necessary decryption or encryption operation.
Figure 2 presents an overview of DynPTA’s design, and
illustrates how the different phases of our approach analyze
and transform a target program. Based on the programmer’s
annotations, we ﬁrst identify the initial set of sensitive memory
objects x. The whole code is then analyzed using Steensgaard’s
algorithm in conjunction with our context-sensitive heap mod-
eling (Section IV-B) to identify the set of memory instructions
that may access sensitive data y. Memory instructions are
then further analyzed to pinpoint those that may result in the
ﬂow of sensitive values from the initial (annotated as) sensitive
objects to other variables z. Finally, the memory instructions
identiﬁed in the previous step are instrumented with code that
i) determines at runtime whether the read (or written) data is
sensitive or not based on its DFT information {, and ii) in case
it is sensitive, decrypts (or encrypts) the data before moving it
to CPU registers (or writing it back to memory) |.
A. Sensitive Object Identiﬁcation
As shown in the example of Listing 1, DynPTA provides a
mark_sensitive() function that programmers can use to
mark individual objects that need to be protected. The function
treats the object whose address is provided to it as sensitive.
These objects can be simple variables or data referred to by
pointers. Note that when a programmer marks a pointer as
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1922
sensitive, their intent is to guarantee the conﬁdentiality of what
the pointer points to, and not of the pointer itself.
For pointers, mark_sensitive() must be applied at
every initialization (or reinitialization) point of the pointer,
where the pointer points to a new object. In the example of
Listing 1, the priv_key pointer is annotated as sensitive
after it is initialized in Line 3, and again after it is reini-
tialized in Line 12. For variables, the programmer must use
mark_sensitive() only once after the variable is deﬁned.
1 int main (void) {
2
3
4
5
6
7
8
9
10
11 }
Listing 1: Simpliﬁed code with a pointer annotated as sensitive.
char* priv_key = malloc(8);
mark_sensitive(priv_key);
...
char* ptr = priv_key;
...
pub_key[i] = *(ptr+i)ˆ0xA;
...
priv_key = malloc(8);
mark_sensitive(priv_key);
Once the initial annotations are provided by the program-
mer, no other manual intervention is required. DynPTA then
processes the annotations to identify all sensitive objects and
applies a “sensitive” label to them that is propagated by DFT at
runtime. Identifying sensitive variables is straightforward based
on the accompanying annotation. In case a pointer is marked
as sensitive, we have to treat the objects that this pointer points
to as sensitive, and any memory instructions operating on these
objects must be protected. DynPTA uses Steensgaard’s pointer
analysis with a novel context-sensitive heap modeling approach
to ﬁnd these memory instructions.
B. Summarization-based Context-sensitive Heap Modeling
As discussed in Section II-A2, context sensitivity is an
important aspect of modeling the memory of a program for
pointer analysis. Most pointer analysis implementations model
every call to known Libc memory allocation routines uniquely.
For example, in the assignment p = malloc(...), the
object allocated by malloc ﬂows to the pointer p. In the
presence of memory allocation wrapper functions, however,
this modeling results in a completely context-insensitive heap.
Although the object returned by the Libc function within the
wrapper ﬂows to a single pointer, that pointer itself ﬂows to
all the call sites that invoke the memory allocation wrapper.
Figure 3(a) shows how existing pointer analysis algorithms
model a simpliﬁed code snippet from OpenSSL, in which
the CRYPTO_malloc wrapper is used to allocate memory
for the session (sess) and certiﬁcate (cert) objects. The
context insensitivity due to the use of the wrapper causes
overapproximation, and both sess and cert point to the same
heap object. In practice, the overapproximation is much worse,
as all memory allocations in the library are performed via calls
to CRYPTO_malloc, and thus all pointers to heap objects
would end up pointing to the same object. For our purposes,
even if just one of these pointers is marked as sensitive, then
all heap objects would become sensitive. To deal with these
D&RQWH[WLQVHQVLWLYH+HDS0RGHOLQJ
sess
object
cert
SSL_SESSION_NEW {
...
sess = CRYPTO_malloc(…)
...