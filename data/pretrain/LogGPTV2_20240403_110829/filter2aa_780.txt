# SIM Card Hacking and Application Development

## Presenters
- Karl Koscher – @supersat
- Eric Butler – @codebutler

## Overview
This presentation covers the process of writing, building, loading, and using code on SIM cards. The context is a project at Toorcamp 2012, a hacker camp on the Washington coast, where the goal was to run a GSM network. The specific task discussed is procuring and programming SIM cards that support applications.

## SIM Card Basics
### What is a SIM Card?
- **Subscriber Identity Module (SIM)**
  - Contains an identity (IMSI) and a symmetric key (Ki).
  - Secure: The key cannot be extracted, and the SIM cannot be cloned.
  - Used by GSM carriers and now LTE (e.g., Verizon).

### Historical Context
- **Applications on SIM Cards**
  - In the past, applications lived on the SIM card.
  - Phones were dumb hosts, providing only UI and connectivity.
  - Telcos controlled the SIMs and thus the applications.
  - This model is mostly obsolete today but still exists in some form.

### Current State
- SIM cards are small, mysterious computers in your pocket that you don't control.
- For the Toorcamp project, we needed SIMs that supported apps, which took many months to procure and program due to limited documentation.

## Technical Details
### SIM Card Specifications
- **Chip Field Description**
  - **Platform**: Atmel AT90SC25672RU
  - **CPU Architecture**: 8-bit AVR
  - **Technology**: 0.15uM CMOS
  - **ROM**: 256KB ROM Program Memory
  - **Non-volatile memory**: 72 KB EEPROM
  - **RAM**: 6 KB
  - **Internal operating frequency**: 20-30 MHz
  - **Endurance**: 500,000 write/erase cycles

### SIM Card Applications
- **Running on SIM Card CPU**
  - Separate from the phone, connected directly to the baseband.
  - Can be silently remotely installed by the carrier.
  - Supported by most carrier SIMs.
  - Multiple apps can be selected by AIDs, managed by a "master" card manager app.
  - GSM "SIM" is actually just an applet on a UICC (the physical card).

### Capabilities
- **User Interface**
  - Display text, menus, play tones, read input.
  - Works with most modern smartphones and dumbphones.
  - Launch URLs, send SMSes, initiate calls, and use data services.
  - Receive and act on events like call connected/disconnected.
  - Interact with the rest of the SIM card.
  - Run arbitrary AT commands on the phone.

### Usage
- **Common in Developing World**
  - Mobile banking, etc.
- **Technologies**
  - **Smart Cards**: Physical connection between SIM and phone.
  - **Java Card**: Java for Smart Cards, easiest way to write applets.
  - **SIM Toolkit (STK) API**: Interface between applets and phone UI.
  - **GlobalPlatform**: Standard for loading and managing applications on a card.

### Security and Communication
- **Secure Storage and Computation**
  - Communication via APDUs (Application Protocol Data Units).
- **Java Card Limitations**
  - No garbage collection, no chars, strings, floats, or multi-dimensional arrays.
  - Ints are optional, no standard API, no threads.
  - Verification can be offloaded, but exceptions exist.
  - Instance and class variables saved in EEPROM with limited write cycles.

### Development Environment
- **IDEs and Tools**
  - Specialized commercial IDEs available, but not necessary.
  - Use the free Java Card Development Kit from Oracle.
  - If using Eclipse, remove the JRE system library and add the Java Card library.
  - Custom tools were written to make development easier.

### Applet Lifecycle
- **App Loading and Registration**
  - App is loaded onto the card.
  - Registers itself with the SIM Toolkit API.
  - Phone informs STK of its capabilities.
  - STK informs the phone about registered apps.
  - Selection of an app triggers an event, and the app sends UI requests back to the phone.

### Example Code
```java
public class CryptoChallenge extends Applet implements ToolkitConstants, ToolkitInterface {
    private byte hintsGiven;
    private byte mainMenuItem;
    private static byte[] menuItemText = {'C', 'r', 'e', 'd', 'i', 't', 's'};
    private static byte[] needHints = {'N', 'e', 'e', 'd', ' ', 's', 'o', 'm', 'e', ' ', 'h', 'i', 'n', 't', 's', '?'};
    private static byte[] yes = {'Y', 'e', 's'};
    private static byte[] no = {'N', 'o'};
    private static byte[] hints = {'H', 'i', 'n', 't', 's'};

    private CryptoChallenge() {
        hintsGiven = 0;
        ToolkitRegistry reg = ToolkitRegistry.getEntry();
        mainMenuItem = reg.initMenuEntry(menuItemText, (short) 0, (short) menuItemText.length, PRO_CMD_SELECT_ITEM, false, (byte) 0, (short) 0);
    }

    public static void install(byte[] bArray, short bOffset, byte bLength) {
        CryptoChallenge applet = new CryptoChallenge();
        applet.register();
    }

    public void processToolkit(byte event) throws ToolkitException {
        EnvelopeHandler envHdlr = EnvelopeHandler.getTheHandler();
        if (event == EVENT_MENU_SELECTION) {
            byte selectedItemId = envHdlr.getItemIdentifier();
            if (selectedItemId == mainMenuItem) {
                ProactiveHandler proHdlr = ProactiveHandler.getTheHandler();
                if (hintsGiven == 0) {
                    proHdlr.initDisplayText((byte) 0, DCS_8_BIT_DATA, credits, (short) 0, (short) (credits.length));
                    proHdlr.send();
                    hintsGiven = (byte) 0x80;
                    return;
                }
                proHdlr.init(PRO_CMD_SELECT_ITEM, (byte) 0x00, (byte) ToolkitConstants.DEV_ID_ME);
                proHdlr.appendTLV((byte) TAG_ALPHA_IDENTIFIER, needHints, (short) 0x0000, (short) needHints.length);
                proHdlr.appendTLV((byte) TAG_ITEM, (byte) 1, yes, (short) 0x0000, (short) yes.length);
                proHdlr.appendTLV((byte) TAG_ITEM, (byte) 2, no, (short) 0x0000, (short) no.length);
                proHdlr.send();
                ProactiveResponseHandler rspHdlr = ProactiveResponseHandler.getTheHandler();
                byte selItemId = rspHdlr.getItemIdentifier();
                if (selItemId == 2) { // No
                    proHdlr.initDisplayText((byte) 0, DCS_8_BIT_DATA, credits, (short) 0, (short) (credits.length));
                    proHdlr.send();
                }
            }
        }
    }

    public void process(APDU apdu) throws ISOException {
        if (selectingApplet()) return;
        byte[] buffer = apdu.getBuffer();
        if (buffer[ISO7816.OFFSET_CLA] != (byte) 0x80)
            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);
        if (buffer[ISO7816.OFFSET_INS] == 0x61) {
            buffer[0] = hintsGiven;
            apdu.setOutgoingAndSend((short) 0, (short) 1);
            return;
        }
        ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
    }
}
```

### Compilation and Conversion
- **Compilation**
  - Target Java 1.1 bytecode, 1.3 source code compatibility is okay.
  - Use the following command:
    ```sh
    javac -cp javacard/lib/api21.jar -target 1.1 -source 1.3 HelloApplet.java
    ```

- **Conversion to Java Card Bytecode**
  - Use the converter tool in the SDK.
  - Specify application ID, API export directory, etc.
  - Example command:
    ```sh
    java -jar javacard/bin/converter.jar -exportpath javacard/api21_export_files -applet 0xde:0xfc:0x09:0x20:0x13:0x01 com.example.HelloCard.HelloApplet com.example.HelloCard 0xde:0xfc:0x09:0x20:0x13 1.0
    ```

### Reader and Installation
- **Types of Readers**
  - PCSC (PC/Smartcard API)
  - Serial
  - PCSC is more flexible; get a cheap one like the SCR3500 ($8 on eBay).

- **Installation Challenges**
  - Initially, couldn't load the applet using popular GPShell tool.
  - Recommended software from the SIM vendor was unavailable.
  - Alternative methods and tools were developed.

### GlobalPlatform
- **Standard for Loading and Managing Apps**
  - Defines the card manager app, protocols, and commands.
  - Handles authentication and encryption.
  - Deals with off-card responsibilities like verifying applet binaries.

- **Issuer Security Domain (ISD)**
  - All apps are loaded and authorized by the ISD.
  - Typically, you can't load apps onto a card you didn't issue yourself.
  - Karsten Nohl's work shows potential bypasses.

### Installation Process
- **Two-Step Process**
  - Load the binary (LOAD)
  - Instantiate the app (INSTALL)
  - Requires authorization through the INSTALL for LOAD command.
  - Three AIDs involved: Application AID, Module AID, and Instance AID.

### Over-the-Air (OTA) Update
- **SMS Packets**
  - The only way to talk to the SIM’s ISD is through the OTA update mechanism.
  - Generate commands to the card with SMS packets.
  - Example: CAT ENVELOPE (A0 C2), SMS-PP Download (D1).

### Remote Access
- **APDUs via SMS**
  - Can remotely send APDUs to a SIM card.
  - Cell broadcast can also be used.
  - Authentication is typically required, but errors can be exploited to brute-force the DES key.

### Tools and Scripts
- **Python Script for Loading and Installing**
  - Works on macOS, Linux, and Windows.
  - Example commands:
    ```sh
    shadysim.py --pcsc -l CryptoChallenge.cap
    shadysim.py --pcsc -i CryptoChallenge.cap --module-aid d07002ca4490cc01 --instance-aid d07002ca4490cc0101 --enable-sim-toolkit --max-menu-entries 1 --max-menu-entry-text 10 --nonvolatile-memory-required 0100 --volatile-memory-for-install 0100
    shadysim.py --pcsc -t
    ```

### Testing
- **Manual Testing**
  - Turn off the phone.
  - Take out the SIM card and battery.
  - Put the SIM card into the reader.
  - Load new code.
  - Place the SIM card back into the phone and replace the battery.
  - Wait for the phone to boot and check if the code works.

### Improvements
- **SEEK Project**
  - Open-source Android SDK for smart cards.
  - Patches to the Android emulator for SIM access using a USB PCSC reader.
  - Avoids the hassle of swapping the SIM between the computer and phone.

- **Remote SIM Access Protocol**
  - Provides a solution for radio interfaces.
  - Reverse-engineered protocol and auth scheme.
  - Need to write an app that sends/receives APDUs.

### Potential Applications
- **Limited but Powerful**
  - SIM card botnet.
  - Integrating Android apps with SIM applets.
  - SSH private keys secured on the SIM.
  - Secure Bitcoin transactions.
  - Carriers need to get on board.
  - Android app for OTA installs?

### Single Wire Protocol (SWP)
- **Direct Connection Between SIM and NFC Controller**
  - SIM acts as a "secure element."
  - Used by mobile payment systems like ISIS.
  - Attempt by carriers to regain control lost to app stores.

### Embedded Secure Element (eSE)
- **Chip Inside Most Android Phones**
  - Part of the NFC controller.
  - Same technology as SIM cards.
  - Used by Google Wallet.
  - More info: [Accessing Embedded Secure Element](http://nelenkov.blogspot.com/2012/08/accessing-embedded-secure-element-in.html)

### Getting Started
- **Resources**
  - Few hardware requirements (<$20).
  - SIM cards available (EFF donation): [SIM Hacks GitHub](http://simhacks.github.io/)
  - These slides.
  - Technical details, JavaCard makefiles, scripts for managing applets, patched Android emulator/system image, and more.

### Contact Information
- **Questions?**
  - Karl Koscher – @supersat
  - Eric Butler – @codebutler