# 十、隔离网络访问
应用安全性的一个基本组成部分是控制网络访问的能力，包括应用的入站和出站。AWS 提供的 EC2 安全组提供了这样的功能，您可以基于每个网络接口将它应用到您的 EC2 实例。这种机制对于部署到 EC2 实例的传统应用很有效，但对于容器应用来说，历史上并不那么有效，容器应用通常在共享的 EC2 实例上运行，这些实例通过 EC2 实例上的共享主机接口进行通信。对于 ECS，直到最近的方法是，您有两个已应用的安全组，它们满足您需要支持在给定 ECS 容器实例上运行的所有容器的网络安全要求，这降低了您的安全规则的有效性，对于具有高安全要求的应用，这是不可接受的。直到最近，这种方法的唯一替代方案是为每个应用构建专用的 ECS 集群，确保能够满足应用安全要求，但代价是额外的基础架构和运营开销。
AWS 在 2017 年末宣布了一项称为 ECS 任务联网的功能，该功能引入了为您的 ECS 容器实例动态分配弹性网络接口(ENI)的能力，该接口是为给定的 ECS 任务保留的。这允许您创建特定于每个容器应用的安全组，并在同一 ECS 容器实例上同时运行这些应用，而不会影响安全性。
在本章中，您将学习如何配置 ECS 任务网络，这要求您了解 ECS 任务网络的工作原理，为任务网络配置 ECS 任务定义，并创建和部署链接到您的已启用任务网络的 ECS 任务定义的 ECS 服务。结合您在上一章中配置的 ECS 任务角色功能，这将使您能够构建高度安全的容器应用环境，在 IAM 权限和网络安全级别强制隔离和分离。
将涵盖以下主题:
*   了解 ECS 任务网络
*   配置网络地址转换网关
*   配置 ECS 任务网络
*   部署和测试 ECS 任务网络
# 技术要求
下面列出了完成本章的技术要求:
*   对 AWS 帐户的管理员访问权限
*   根据第 3 章中的说明配置本地 AWS 配置文件
*   AWS CLI 1.15.71 或更高版本
*   完成第 9 章，并成功地将示例应用部署到 AWS
以下 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch10](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch10)。
查看以下视频，了解《行动守则》:
[http://bit.ly/2MUBJfs](http://bit.ly/2MUBJfs)
# 了解 ECS 任务网络
在幕后，ECS 任务联网实际上是一个相当复杂的功能，它依赖于多种 Docker 联网功能，需要详细了解 Docker 联网。作为一个使用 ECS 在 AWS 中设计、构建和部署容器环境的人，好消息是，您不必了解这种级别的细节，实际上您只需要对 ECS 任务网络如何工作有一个高层次的了解。因此，我将在本节中提供 ECS 任务联网如何工作的高级概述，但是，如果您对 ECS 任务联网如何更详细地工作感兴趣，这篇来自 AWS([https://AWS . Amazon . com/blogs/compute/under-hood-task-networking-for-Amazon-ECS/](https://aws.amazon.com/blogs/compute/under-the-hood-task-networking-for-amazon-ecs/))的博文将提供更多信息。
# Docker 桥网络
为了理解 ECS 任务网络，了解 Docker 网络和 ECS 容器的标准配置默认情况下是如何工作的是有帮助的。默认情况下，ECS 任务定义配置为 Docker 网桥网络模式，如下图所示:
![](img/64cd1234-38fd-40fb-9d7b-c30700f382ea.png)
Docker bridge networking
在上图中，您可以看到每个 ECS 任务都有自己的专用网络接口，该接口由 Docker Engine 在创建 ECS 任务容器时动态创建。Docker 桥接口是第 2 层网络组件，类似于以太网交换机，它将 Docker 引擎主机内部网络中的每个 Docker 容器网络接口连接在一起。
请注意，每个容器在`172.16.0.x`子网内有一个 IP 地址，而外部 AWS 公共网络和 ECS 容器实例的弹性网络接口在`172.31.0.x`子网内有 IP 地址，您可以看到所有容器流量都通过单个主机网络接口路由，在 AWS EC2 实例的情况下，该接口是分配给实例的默认弹性网络接口。弹性网络接口(ENI)是一种 EC2 资源，可为您的 VPC 子网提供网络连接，是您认为每个 EC2 实例使用的标准网络接口。
同样作为 Docker 容器运行的 ECS 代理与其他容器的不同之处在于，它以主机网络模式运行，这意味着它使用主机操作系统网络接口(即 ENI)进行网络连接。由于容器位于 Docker Engine 主机内部的不同 IP 网络上，为了提供与外部世界的网络连接，Docker 在 ENI 上配置 iptables 规则，将所有出站网络流量转换为弹性网络接口 IP 地址，并为入站网络流量设置动态端口映射规则。例如，上图中某个容器的动态端口映射规则会将`172.31.0.99:32768`的传入流量转换为`172.16.0.101:8000`。
iptables are a standard Linux kernel capability that provides network access control and network address translation features to your Linux hosts.
尽管许多应用在网络地址转换(NAT)方面运行良好，但有些应用在 NAT 方面运行不佳或根本不运行，使用 NAT 会对网络流量大的应用产生性能影响。还要注意，应用于 ENI 的安全组由所有容器、ECS 代理和操作系统本身共享，这意味着安全组必须允许所有这些组件的组合网络连接要求，这可能会危及容器和 ECS 容器实例的安全性。
It is possible to configure your ECS task definitions to operate in host-networking mode, meaning their network configuration would be similar to the ECS agent configuration, where no network address translation (NAT) is required. Host-networking mode has its own security implications and is generally not recommended for applications that want to avoid NAT or require network isolation—instead you should use ECS task networking for such requirements. Host networking should be used with care and only for ECS tasks that perform a system function, such as logging or monitoring a sidecar container.
# ECS 任务联网
现在，您已经对 ECS 容器实例及其关联容器的默认网络配置有了基本的了解，让我们回顾一下当您配置 ECS 任务网络时，这种情况是如何变化的。下图说明了 ECS 任务网络在高层次上是如何工作的:
![](img/bf9feb71-45dc-4c68-9b73-e707910cb295.png)
ECS task networking
在上图中，每个 ECS 任务都被分配和配置为使用自己的专用弹性网络接口。这与第一个图有很大不同，在第一个图中，容器使用由 Docker 动态创建的内部网络接口，相反，ECS 负责每个 ECS 任务弹性网络接口的动态创建。这对于 ECS 来说更加复杂，但是它的优点是您的容器可以直接连接到您的 VPC 子网，并且可以有自己独立的安全组。这意味着您的容器网络端口不再需要复杂的功能，如动态端口映射，这将损害安全性和性能，您的容器端口将直接暴露给 AWS 网络环境，并可由负载平衡器直接访问。
在上图中需要注意的一点是外部网络配置，它引入了私有子网和公共子网的概念。我以这种方式表示网络连接，因为在撰写本文时，ECS 任务网络不支持为每个动态创建的 ENI 分配公共 IP 地址，因此如果您的容器需要互联网连接，您确实需要额外的 VPC 网络设置。该设置包括在公共网络上创建 NAT 网关或 HTTP 代理，然后您的 ECS 任务可以将互联网流量路由到该网关或代理。在当前 todobackend 应用的场景中，第 9 章中介绍的入口点脚本与位于互联网上的 AWS Secrets Manager API 进行通信，因此需要类似于第一个图中所示的网络设置。
The ECS agent does not have the limitation of being unable to assign a public IP address, given it uses the default EC2 instance ENI that is allocated to the instance on creation. So you could, for example in the preceding diagram, connect the default ENI used by the ECS agent to the public network or another network with internet connectivity.
通过比较前面的两个图表，您可以看到，如果您想象 ECS 容器实例是一台裸机服务器，而您的容器是虚拟机，那么 ECS 任务网络简化了您的 ECS 容器实例的内部网络配置，使其看起来非常像传统的虚拟机网络模型。这带来了更高的性能和安全性，但代价是外部网络设置更复杂，出站互联网连接需要 NAT 网关或 HTTP 代理配置，而 ECS 负责将 ENI 动态附加到您的实例，这有其自身的局限性。
例如，可以附加到给定 EC2 实例的最大 eni 数量因 EC2 实例类型而异，如果您查看[https://docs . AWS . Amazon . com/AWSEC2/latest/user guide/using-ENI . html # available pereni](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI)，您可以看到自由层 t2.micro 实例类型最多只支持两个 Eni，将您在 ECS 任务联网模式下可以运行的 ECS 任务的最大数量限制为每个实例一个(给定一个 ENI 将
# 配置网络地址转换网关
正如您在上一节中了解到的，在编写本文时，ECS 任务网络不支持分配公共 IP 地址，这意味着您必须配置额外的基础架构来支持您的应用可能需要的任何互联网连接。虽然应用可以通过栈中的应用负载平衡器在没有出站互联网访问的情况下访问，但应用容器入口点脚本确实需要在启动时与 AWS 机密管理器服务通信，这需要互联网连接才能与机密管理器应用编程接口通信。
为了提供这种连接，您可以采用两种典型的方法:
*   **配置 NAT 网关**:这是一个 AWS 管理的服务，为出站通信提供网络地址转换，使位于私有子网的主机和容器能够访问互联网。
*   **配置一个 HTTP 代理**:这提供了一个转发代理，配置了代理支持的应用可以将 HTTP、HTTPS 和 FTP 请求转发给你的代理。
我通常推荐后一种方法，因为它为您提供了基于对 HTTP 和 HTTPS 流量的 DNS 命名来限制对网站的访问的能力(后者取决于所使用的 HTTP 代理的能力)，而 NAT 网关仅具有基于 IP 地址来限制访问的能力。然而，设置代理确实需要更多的努力，并且会产生管理附加服务的操作开销，因此，为了专注于 ECS 任务联网并保持简单，我们将在本章中实现 NAT 网关方法。
# 配置专用子网和路由表
为了使用您在现实世界中看到的典型路由配置来支持 NAT 网关，我们需要首先添加一个私有子网和一个私有路由表，我们将把它作为 CloudFormation 资源添加到 todobackend 栈中。以下示例演示了如何在位于 todobackend-aws 存储库根目录的`stack.yml`文件中执行此配置:
In the interests of keeping this example simple, we are creating network resources in the todobackend application stack, however you typically would create network subnets and associated resources such as NAT gateways in a separate network-focused CloudFormation stack.
```
...
...
Resources:
  PrivateSubnet:
 Type: AWS::EC2::Subnet
 Properties:
 AvailabilityZone: !Sub ${AWS::Region}a
 CidrBlock: 172.31.96.0/20
 VpcId: !Ref VpcId
 PrivateRouteTable:
 Type: AWS::EC2::RouteTable
 Properties:
 VpcId: !Ref VpcId
 PrivateSubnetRouteTableAssociation:
 Type: AWS::EC2::SubnetRouteTableAssociation
 Properties:
 RouteTableId: !Ref PrivateRouteTable
 SubnetId: !Ref PrivateSubnet
...
...
```
Creating a private subnet and route table
在上例中，您创建了私有子网和路由表资源，然后通过`PrivateSubnetRouteTableAssociation`资源将它们关联起来。这种配置意味着从专用子网发送的所有网络流量都将根据专用路由表中公布的路由进行路由。请注意，您只在本地 AWS 区域的可用性区域 A 中指定了一个子网，在实际场景中，您通常会在两个可用性区域中配置至少两个子网以实现高可用性。另一点需要注意的是，您必须确保为您的子网配置的`CidrBlock`位于为您的 VPC 配置的 IP 范围内，并且没有分配给任何其他子网。
以下示例演示了如何使用 AWS CLI 确定 VPC IP 范围并查看现有的子网 CIDR 块:
```
> export AWS_PROFILE=docker-in-aws
> aws ec2 describe-vpcs --query Vpcs[].CidrBlock
[
    "172.31.0.0/16"
]
> aws ec2 describe-subnets --query Subnets[].CidrBlock
[
    "172.31.16.0/20",
    "172.31.80.0/20",
    "172.31.48.0/20",
    "172.31.64.0/20",
    "172.31.32.0/20",
    "172.31.0.0/20"
]
```
Querying VPC and subnet CIDR blocks
在前面的示例中，您可以看到默认的 VPC 已经配置了一个名为`172.31.0.0/16`的 CIDR 块，您还可以看到已经分配给默认 VPC 中创建的默认子网的现有 CIDR 块。如果您回头参考第一个示例，您可以看到我们已经为新定义的专用子网选择了该块中的下一个`/20`子网(`172.31.96.0/20`)。
# 配置网络地址转换网关
私有路由配置就绪后，您现在可以配置 NAT 网关和其他支持资源。
网络地址转换网关需要一个弹性的 IP 地址，这是固定的公共 IP 地址，通过网络地址转换网关的出站流量看起来就是来自这个地址，并且必须安装在具有互联网连接的公共子网中。
以下示例演示了配置 NAT 网关以及相关的弹性 IP 地址:
```
...
...
Resources:
 NatGateway:
 Type: AWS::EC2::NatGateway
 Properties:
 AllocationId: !Sub ${ElasticIP.AllocationId}
 SubnetId:
 Fn::Select:
 - 0
 - !Ref ApplicationSubnets
 ElasticIP:
 Type: AWS::EC2::EIP
 Properties:
 Domain: vpc
...
...
```
Configuring a NAT gateway
在前面的示例中，您创建了一个分配给虚拟专用网络使用的弹性 IP 地址，然后通过`AllocationId`属性将分配的 IP 地址链接到 NAT 网关。
Elastic IP addresses are somewhat interesting from a billing perspective, in that AWS does not charge you for them as long as you are actively using them. If you create Elastic IP addresses but don't associate them with an EC2 instance or a NAT gateway, then AWS will charge you for them. See [https://aws.amazon.com/premiumsupport/knowledge-center/elastic-ip-charges/](https://aws.amazon.com/premiumsupport/knowledge-center/elastic-ip-charges/) for more details on how billing works for Elastic IP addresses.
注意在指定`SubnetId`时`Fn::Select`固有函数的使用，重要的是要理解子网必须与将链接到 NAT 网关的子网和路由表资源处于同一可用性区域。在我们的用例中，这是可用性区域 A，`ApplicationSubnets`输入包括分别位于可用性区域 A 和 B 的两个子网标识，因此您选择第一个零索引子网标识。注意:您可以使用以下示例中演示的`aws ec2 describe-subnets`命令来验证子网的可用性区域:
```
> cat dev.cfg
ApplicationDesiredCount=1
ApplicationImageId=ami-ec957491
ApplicationImageTag=5fdbe62
ApplicationSubnets=subnet-a5d3ecee,subnet-324e246f VpcId=vpc-f8233a80
> aws ec2 describe-subnets --query Subnets[].[AvailabilityZone,SubnetId] --output table
-----------------------------------
|         DescribeSubnets         |
+-------------+-------------------+
|  us-east-1a |  subnet-a5d3ecee  |