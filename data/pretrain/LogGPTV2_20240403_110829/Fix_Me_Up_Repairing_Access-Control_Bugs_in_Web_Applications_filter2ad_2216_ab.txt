1 
Figure 2: DNscript: Correct access-control check in Ac-
ceptBid.php for the “regular user” role, a missing check in
DelCb.php, and the repair by FIXMEUP
control policies in its own, idiosyncratic way. The variables
that hold users’ credentials and authorization information,
as well as the semantics of access-control checks, vary sig-
niﬁcantly from application to application. Fortunately, they
tend to follow a stylized code design pattern.
Access control is typically enforced near the program’s
entry point. First, the program collects relevant information.
For example, the SELECT query returns the user’s record
from the administrative database in minibloggie in Figure 1,
while the session state variable holds user data in DNscript
in Figure 2. Typically, only a few security-critical vari-
ables hold access-control information—for example, vari-
ables $user, $pwd, and $result in minibloggie—and they
are updated in a very small number of places. The corre-
sponding program slice is thus relatively small. All of our
benchmark applications exhibit these features (see Table 2).
Second, the application executes one or more condi-
1 
. . .
11
12 ?>
. . .
6
7 ?>
1 Access Denied ! A u t h o r i z a t i o n R e q u i r e d . ’ ;
s l i c e & ACT
/ /
/ /
e x i t ;
. . .
}
}
switch ( $ a c t i o n ) {
s l i c e & ACT
case ” check ” :
case ” add ” :
check ( ) ; break ;
/ / @SSO( ’ admin ’ )
add ( ) ;
break ;
case ” d e l e t e ” :
d e l e t e ( ) ;
break ;
. . . } ?>
/ / @SSO( ’ admin ’ )
conﬁguration.php
. . .
1 
$PHP AUTH PW = $ SERVER [ ’PHP AUTH PW ’ ] ;
$PHP AUTH USER = $ SERVER [ ’PHP AUTH USER ’ ] ;
/ /
/ /
s l i c e
s l i c e
Access-control template for admin users
(m0 = admin . php ( program e n t r y ) ,
S0 = {
i n c l u d e ( ” c o n f i g u r a t i o n . php ” ) ;
$ s e c u r i t y = ” yes ” ;
i f
( $ s e c u r i t y == ” yes ” ) {
i f
( ( ! i s s e t ( $PHP AUTH USER ) )
| |
( ! i s s e t ( $PHP AUTH PW ) )
| |
( $PHP AUTH USER != ’UT ’ )
| |
( $PHP AUTH PW != ’UTCS ’ ) ) {
header ( ’WWW−A u t h e n t i c a t e : B a s i c re al m =”
n e w s a d m i n i s t r a t i o n ” ’ ) ;
header ( ’HTTP / 1 . 0 401 U n a u t h o r i z e d ’ ) ;
echo ’Access Denied ! A u t h o r i z a t i o n
R e q u i r e d . ’ ;
e x i t ;
}
} )
Figure 4: Newsscript: Slice and access-control template
access-control enforcement are typically loop-free compu-
tations that ﬁrst acquire or retrieve user credentials or ses-
sion state, and then check them. All of our benchmarks
follow this pattern. Statements in these slices update only a
small set of dedicated variables which are used in the check
but do not affect the rest of the program. The exceptions are
global variables that hold database connections and session
state. These variables are typically initialized before per-
forming access control and read throughout the program.
When FIXMEUP inserts code to repair vulnerabilities, it
takes care not to duplicate statements with side effects.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15 }
4.2 Computing access-control templates
Statements in a slice may be spread across multiple meth-
ods and thus do not directly yield an executable code se-
quence for inserting elsewhere. Therefore, FIXMEUP con-
verts slices into templates.
An access-control template (ACT) is a hierarchical data
structure whose hierarchy mirrors the calling context of the
access-control check. Each level of the ACT corresponds
to a method in the context. For each method, the ACT
records the statements in that method that are part of the
slice. These statements may include calls to methods that
return before the access-control check is executed, but only
if the call subgraphs rooted in these methods contain state-
ments that are part of the slice.
The last level of the ACT contains the access-control
check and the failed-authorization code that executes if the
check fails (e.g., termination or redirection). The developer
optionally speciﬁes the failed-authorization branch. With-
out such speciﬁcation, FIXMEUP uses the branch that con-
tains a program exit call, such as die or exit. We label
each ACT with the programmer-speciﬁed user role from the
check’s annotation.
Formally, ACTrole is an ordered list of (mi, Si) pairs,
where mi are method names and Si ∈ mi are ordered lists
of statements. Each mi is in the calling context of check,
i.e., it will be on the stack when check executes. Each state-
ment s ∈ Si is part of the access-control logic because (1)
the check is data- or control-dependent on s, or (2) s is a call
to a method n that contains such a statement somewhere in
its call graph, but n returns before the check executes, or (3)
s is a statement in the failed-authorization branch of check.
Consider the following example:
1 main ( ) {
a = b ;
c = c r e d e n t i a l s ( a ) ;
i f
p e r f o r m s e c u r i t y −s e n s i t i v e o p e r a t i o n
t h e n f a i l ( . . . ) ;
( c )
2
3
4
5
6 }
the
conditional
statement if (c) is
access-
The
is simply main.
control check and its calling context
The computed template ACTrole includes the call
to
credentials, as well as fail(...) in the branch cor-
responding to the failed check. We add the following pair
to the ACTrole: (main, { a=b, c=credentials(a),
if (c) then fail(...) }).
Figure 5 shows the algorithm that, given a calling context
and a slice, builds an ACT. The algorithm also constructs
data- and control-dependence maps, DDACT and CDACT ,
which represent all dependences between statements in the
ACT. FIXMEUP uses them to (1) preserve dependences be-
tween statements when inserting repair code, and (2) match
templates to each other when validating repairs. Figure 4
gives an example of an access-control slice and the corre-
sponding ACT from Newsscript 1.3.
GetACT (CC, SLICE) {
// INPUT
CC = {(cs1, m0), (cs2, m1) . . . (check, mn)}: calling context of the
SLICE: statements on which the check is data− or control−dependent
check, where csi+1 ∈ mi is the call site of mi+1
and statements executed when authorization fails
// OUTPUT
ACT : template {(mi, si)}, where si is an ordered list of statements in
method mi
DDACT , CDACT : data and control dependences in ACT
ACT ← ∅
ACT.CCsrc ← CC
BuildACT (m0, CC, SLICE)
DDACT = {(sk, sj ) s.t. sk,j ∈ ACT and sk is data−dependent on sj}
CDACT = {(sk, sj ) s.t. sk,j ∈ ACT and sk is control−dependent on sj}
return ACT
BuildACT (mi, CC, SLICE) {
Si ← ∅
j ← 0
for (k = 0 to |mi|, sk ∈ mi) { // |mi| is the number of statements in mi