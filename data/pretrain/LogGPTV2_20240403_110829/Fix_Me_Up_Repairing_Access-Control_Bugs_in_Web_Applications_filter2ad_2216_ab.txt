### Figure 2: DNscript: Correct Access-Control Check in `AcceptBid.php` for the "Regular User" Role, a Missing Check in `DelCb.php`, and the Repair by FIXMEUP

Access control is typically enforced near the program's entry point. First, the program collects relevant information. For example, in minibloggie (Figure 1), a `SELECT` query retrieves the user's record from the administrative database, while in DNscript (Figure 2), session state variables hold user data. Typically, only a few security-critical variables hold access-control information, such as `$user`, `$pwd`, and `$result` in minibloggie, and they are updated in a very small number of places. The corresponding program slice is thus relatively small. All of our benchmark applications exhibit these features (see Table 2).

Second, the application executes one or more conditional checks to enforce access control. These checks are typically loop-free computations that first acquire or retrieve user credentials or session state, and then validate them. All of our benchmarks follow this pattern. Statements in these slices update only a small set of dedicated variables, which are used in the check but do not affect the rest of the program. The exceptions are global variables that hold database connections and session state. These variables are typically initialized before performing access control and read throughout the program.

When FIXMEUP inserts code to repair vulnerabilities, it takes care not to duplicate statements with side effects.

### Access-Control Template for Admin Users

```php
// admin.php (program entry)
include("configuration.php");
$security = "yes";
if ($security == "yes") {
    if (!isset($PHP_AUTH_USER) || !isset($PHP_AUTH_PW) ||
        $PHP_AUTH_USER != 'UT' || $PHP_AUTH_PW != 'UTCS') {
        header('WWW-Authenticate: Basic realm="news administration"');
        header('HTTP/1.0 401 Unauthorized');
        echo 'Access Denied! Authorization Required.';
        exit;
    }
}
```

### Figure 4: Newsscript: Slice and Access-Control Template

Newsscript follows the same pattern, where the access-control enforcement is typically a loop-free computation that first acquires or retrieves user credentials or session state, and then checks them. The statements in these slices update only a small set of dedicated variables, which are used in the check but do not affect the rest of the program. The exceptions are global variables that hold database connections and session state. These variables are typically initialized before performing access control and read throughout the program.

### 4.2 Computing Access-Control Templates

Statements in a slice may be spread across multiple methods and thus do not directly yield an executable code sequence for insertion elsewhere. Therefore, FIXMEUP converts slices into templates.

An **access-control template (ACT)** is a hierarchical data structure whose hierarchy mirrors the calling context of the access-control check. Each level of the ACT corresponds to a method in the context. For each method, the ACT records the statements in that method that are part of the slice. These statements may include calls to methods that return before the access-control check is executed, but only if the call subgraphs rooted in these methods contain statements that are part of the slice.

The last level of the ACT contains the access-control check and the failed-authorization code that executes if the check fails (e.g., termination or redirection). The developer can optionally specify the failed-authorization branch. Without such specification, FIXMEUP uses the branch that contains a program exit call, such as `die` or `exit`. We label each ACT with the programmer-specified user role from the check’s annotation.

Formally, an **ACT<sub>role</sub>** is an ordered list of (m<sub>i</sub>, S<sub>i</sub>) pairs, where m<sub>i</sub> are method names and S<sub>i</sub> ∈ m<sub>i</sub> are ordered lists of statements. Each m<sub>i</sub> is in the calling context of the check, i.e., it will be on the stack when the check executes. Each statement s ∈ S<sub>i</sub> is part of the access-control logic because:
1. The check is data- or control-dependent on s.
2. s is a call to a method n that contains such a statement somewhere in its call graph, but n returns before the check executes.
3. s is a statement in the failed-authorization branch of the check.

#### Example

Consider the following example:

```php
main() {
    a = b;
    c = credentials(a);
    if (c) {
        perform_security_sensitive_operation();
    } else {
        fail(...);
    }
}
```

In this example, the conditional statement `if (c)` is the access-control check, and its calling context is simply `main()`. The computed template **ACT<sub>role</sub>** includes the call to `credentials` and `fail(...)` in the branch corresponding to the failed check. We add the following pair to the **ACT<sub>role</sub>**: (main, {a=b, c=credentials(a), if (c) then fail(...) }).

### Algorithm for Building Access-Control Templates

The algorithm below, given a calling context and a slice, builds an ACT. It also constructs data- and control-dependence maps, **DD<sub>ACT</sub>** and **CD<sub>ACT</sub>**, which represent all dependences between statements in the ACT. FIXMEUP uses these maps to preserve dependences between statements when inserting repair code and to match templates to each other when validating repairs.

```plaintext
GetACT(CC, SLICE) {
    // INPUT
    CC = {(cs1, m0), (cs2, m1) ... (check, mn)}: calling context of the check,
    SLICE: statements on which the check is data- or control-dependent and statements executed when authorization fails
    // OUTPUT
    ACT: template {(mi, si)}, where si is an ordered list of statements in method mi
    DDACT, CDACT: data and control dependences in ACT
    ACT ← ∅
    ACT.CCsrc ← CC
    BuildACT(m0, CC, SLICE)
    DDACT = {(sk, sj) | sk, sj ∈ ACT and sk is data-dependent on sj}
    CDACT = {(sk, sj) | sk, sj ∈ ACT and sk is control-dependent on sj}
    return ACT
}

BuildACT(mi, CC, SLICE) {
    Si ← ∅
    j ← 0
    for (k = 0 to |mi|, sk ∈ mi) { // |mi| is the number of statements in mi
        if (sk ∈ SLICE) {
            Si ← Si ∪ {sk}
        }
    }
    ACT ← ACT ∪ {(mi, Si)}
}
```

This algorithm ensures that the access-control logic is correctly captured and can be effectively used for vulnerability repair.