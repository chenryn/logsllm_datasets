f . wzite (cipher + "\n")
The magic file stores 256 hexadecimal numbers, and the cryptographic logic of
the entire code is to perform bit-wise and operation on the numbers and plaintexts in
each round, and then perform an XOR operation, and finally output the result. Is the
XOR and bit-wise and operation equivalent to some GF(2) operations? The algo-
rithm of the XOR is as follows.
①1=1
I =(zpou）1 + 0
①0=0
0 + 0(mod2) = 0
11=0
0 =(zpou）1 +1
The XOR operation is actually equivalent to summing on GF(2). Likewise, the
bit-wise and operation is equivalent to multiplication on GF(2). By this transforma-
tion, the entire script is essentially a 256-element linear system of equations over GF
(2), and the best way to solve the linear system of equations is to solve for the inverse
of the coefficient matrix.
We can use sage to calculate the inverse of matrices over finite fields, as follows.
sage: a = matxix (GF (2) , [ [1, 1] , [1, o]11
sage: a * (-1)
---
## Page 587
7.3 Block Ciphers
575
[1 1]
[0 1]
After calculating the inverse of the coefficient matrix, the plaintext is obtained by
multiplying it with the ciphertext.
7.3.3.2Rijndael Key Schedule
The algorithm used in AES is called Rijndael Key Schedule (RKS), which generates
a series of subkeys based on the master key. In each round, the data needs to be
XORed with the 128-bit subkey.
Suppose the master key is the following matrix.
5a555720
053b 5632
f6  5e  7d5a
[17  e2 b8  70
First, the last row, 117 e2 b8 70l, is taken out and shifted left to become le2 b8 70
17l; and transformed into lcd 36 ee 771 by looking up the values in the SBOX.
Then, the first element is XORed with the first element of the Rcon array, which is a
pre-defined array where the (-th term is the i-1th power of 2 under GF(2°).
The operation under GF(2°) is similar to that of GF(2), where a number is treated
as a seventh polynomial in the field. The following is a simple example.
Polynomial : x + x* + x + 1 Binary : {01010011}Decimal : {53}
As you can see, each coefficient in a polynomial corresponds to a bit in binary form,
so you can convert the operations under GF(2?) directly into operations between
polynomials. However, the result of the operation may exceed 255, so it is necessary
opo anp s snsau a °() u sueu po no are pe siaqnu o aauo o
2, but in the GF(2°) field, a polynomial is specified, and the result of multiplying two
polynomials is then performed modulo that polynomial. The following polynomial
is used in AES.
p(x) = x²+ x+ x² +x + 1
For example, the 9th item in Rcon can be calculated as follows.
x² = p(x) + x + x² + x+ 1 → x = (x + x² + x+ 1)modp(x)
Therefore, the 9th polynomial is x* + x” + x + 1 and its corresponding decimal value
is 27.
---
## Page 588
576
7Crypto
key1
key2
key3
key4
Shift
sbox
Rcon[1]
key2-1
key2-2
key2-3
key2-4
Fig, 7.19 Rijndael key schedule
This yields the Rcon array. For the previously obtained data lcd 36 ee 77L,
perform an XOR operation on the first byte with Rcon[1] to obtain lcc 36 ee 77],
and then XOR this row with the first row of master key I5a 55 57 20l to obtain the
first row of the second subkey I96 63 b9 571.
the second subkey XORing the corresponding row in the first subkey (Fig. 7.19).
Then, the following rows of the second subkey are equal to their previous row in
Finally, after 10 rounds of operations, the subkeys used in each round of AES are
obtained.
7.3.3.3 AES Procedure
(1) AddRoundKey: performs an XOR operation between the input and the subkey.
(2) SubBytes: The bytes in the state array are replaced with their corresponding
elements in the sbox. The code for substitution is as follows.
row = (data & 0xfo) >> 4;
col = data & 0xof;
data = sbox [16 *row + co1] ;
The inverse of this step is also relatively simple: find the index of the data in the
sbox. To make it easier to look up the sbox, we can prepare an inverse sbox, that
corresponds to the index of the data in sbox.
---
## Page 589
7.3 Block Ciphers
577
(3) ShiftRows: Transpose the matrix according to the following rules.
a
04
1
2
ff3
4
l§
Gs
Shift 1
l6
7
is
l5
g 01011212
Shift 2
211
2
clg
10
[13 01415 216
Shift 3
613@1415
sogedo ygs a o saoeda i we u sogp ds sp jo uoeado asuaau au
with right shift operations.
(4) MixColumns: Treats each input column as a vector and multiplies it with a fixed
matrix over the GF(2^8) extension, which is actually obtained by bit-by-bit
transformation of the vector I2 1 1 31.
The inverse operation of multiplying a matrix is done by multiplying the inverse of
that matrix. The corresponding inverse matrix can also be obtained using sage.
sage: k. = GF (2) []
sage: 1 .  = GP (2^8, modulus = a^8 + a^4 + a^3 + a + 1)
sage : for i Ln xrange (4) :
sage: res = []
res2 = [1
for J in xrange {4) :
t = [2, 1, 1, 3]
res2 append (1 . fetch_int (t [(j+i) 4] ))
res. append (res2)
sage: res = Matrix(res)
sage: res
[11x+1
x
1 x + 1]
1 x + 1
x]
[x+ 1 x 11]
1]
sage: res.inverse (1
[ + Z、x + ε、x  + x + ε、x x + Z、x + E、x]
x^3 + 1 x^3 + x^2 + x]
x^3 + 1]
[ x^3 + x + 1 x^3 + x^2 + 1
[x*3 + x^2 + 1 
x^3 + 1 x^3 + x^2 + x x^3 + x + 1]
[ + Zx + E、x  + x + Ex x + Z、x + E_x + Ex
Although there are relatively few cryptography challenges that specifically exam-
ine this step, it is not infrequent in reverse challenges, and similar challenges can be
found here: https://github.com/veritas501/attachment_in_blog/tree/master/
Gadgetzan.
---
## Page 590
578
?Crypto
7.3.3.4 Common Attacks
1. Byte-at-a-Time
For example, for crypto1 of pwnable.kr, the core code is as follows.
PADDING = '\,x00'
BLOCK_SIZE = 16
pad = lambda s: s + (BLOCK_SIZE - 1en (s)  BLOCK_SIZE) + PADDING
EncodeAEs = 1amibda c, 8 : C encrypt (pad (≤) ) encode ( *hex)
DecodeAEs = 1amibda c, e : c. decrypt (e . decode ( *hex′)
iv - *erased. but there ie something on the real source code'
key = 'erased. but there is something on the real source code'
cookie = 'erased, but there ia something on the real source code*
def AEs128_cBC (msg) :
cipher = AES,nev (key, AEs MoDE_CBC, iv)
def authenticate (e_packet) :
return DecodeAEs (cipher, msg) .rstrip (PADDING)
packet = ABS128_CBC (e_packet)
id = packet split [*-*) [0]
[] {- ] ads qaoed = nd
if packet .split (-) [2] I= cookie:
: , ason6 , == p pre xd == () aeo6tpxou* (oxooo+pT) 9szeqs qTtuseu T
return 0
# request is not originated from expected sezver
return 1
if hashlib sha256 (id+cookie) .hexdigest () == pv and id == 'admin′ :
return 0
return 2
def request_auth (id, pw) :
packet = *{o) -(1) - (2) * format (id, pv, cookie)
e_packet = AES128_CBC (packet)
print 'sending encrypted data ({o)) ' format (e_packet)
return authenticate (e_packet)
This challenge needs to be successfully authenticated to make the server think we
are the admin user to get the flag. The request_auth function prints the encrypted
packet and we can control the id and pw in this packet.
The first block of data encrypted in AES_CBC mode is the plaintext after XOR
with the IV, and the IV is fixed, so the result of encrypting the same data must be the
same. You can take advantage of this feature to construct data so that the length of
"id-pw-" is 15 and the last byte will be the first byte of the cookie (Fig. 7.20). At this
point, we can get the result of the whole block after encryption. So we can then fill
the last byte with a guessed byte to construct another data (Fig. 7.21).
Fig, 7.20 Byte at a time
id-pw
cookie[0]
Fig, 7.21 Byte at a time
id-pw-
guessed byte
---
## Page 591
7.3 Block Ciphers
579
Ciphertext
Ciphertext
口
Key
decrypt
Key
decrypt
IV
+
Plaintext
Plaintext
Fig, 7.22 CBC bit fliping
If the encryption result of the data we constructed is exactly equal to the previous
encryption result, it proves that the data used to encrypt the data is the same as the
previous data, and we successfully guessed the first byte of the cookie.
This attack method can be used not only in CBC mode but also in ECB mode for
encryption.
2. CBC-IV-Detection
This attack can be used to obtain unknown IV values in CBC mode. First, decrypt in
CBC mode.
P = D(C)IV
P = D(C2)C
P= D(C)C
Assume that C and C are equal at this point, and that C is a block of all zeros.
P =D(C)①IV
P = D(\x00BLOCK_LEN)  C
P, = D(C)("\x00*BLOCK_LEN) = D(C)
Thus the value of D(C) is known, and the value of IV can be obtained by XOR
D(C;) with P
3. CBC-Bit-Flipping
This attack is common in Web challenges where the ciphertext can be arbitrarily
controlled to affect the deciphered plaintext in the subsequent block by changing the
ciphertext in the previous block, as shown in Fig. 7.22
After the decryption function, the data wil be XORed with the ciphertext of the
previous block, thus control the plaintext decrypted. Of course, since the ciphertext
of the first block is changed, the plaintext of the first block after the decryption
---
## Page 592
580
7 Crypto
ies
23x09x0909x09x09x0909x09x09
s2348x08x0808x8x08x808
Fig, 7.23 Padding
function cannot be controlled, but if the IV can be controlled, the result of the
decryption of the first data set can also be controlled.
enc1 = aes_ene (key, iv, 'a' + 32)
[: ↑] toua + (E  ( [o] toua) pxo) xuo = goua
aes_dec (key, iv, enc2)
"\xf1\xBeLP\xfb′,x80′′,xce^xa2)qSN; \,xe5baaaaaaaaaaaaaaa*
As the code above shows, the first byte of the encrypted data is XORed by
3 (to change *a’ into *b’), and then the decryption operation is performed, you can
see that the first byte character *a’ has become *b’ in the plaintext of the second
block.
4. CBC-Padding-Oracle
Assuming that we are able to interact with the server and know from the server
whether the padding is normal or not, it is possible to exploit this type of attack. The
information provided by the server is called an oracle in Cryptography, so here the
oracle is a CBC-Pading-Oracle. When using a block cryptography algorithm, the
data is encrypted block by block, and the deficient parts are usually encrypted using
the padding method (PKCS#7 padding algorithm) shown in Fig. 7.23.
If the padding is not correct, the server throws an exception when decrypting. If
you can get the ciphertext Y, then construct the message C = F + Y. You can use a
technique similar to CBC-Bit-Flipping to change the last byte of the plaintext by
modifying the last byte of F.
Usually, F is set to a random value, so there is a high probability that the padding
error will not occur when the last 1 byte of Y is “x01°. If the decryption result of the
penultimate byte is “x02', and the decryption result of the last 1 byte of Y is “x02',
no error will be reported, so you can generate a new Y or change the detection
strategy.
When an error-free value of F(n  1) is detected, the plaintext corresponding to
the last 1 byte of Y can be calculated using the following formula.
After getting the last 1-byte value, you can probe the values of other bytes in the
same way. This way, the result of the decryption function can be obtained for the
secret F. In addition, if you have control over the IV used for encryption, you can use
a similar technique to Bit-Flipping to modify the IV and thus control the decrypted
plaintext. Note that the challenges encountered in CTF are generally not the standard
---
## Page 593
7.3 Block Ciphers
581
admin:0:usemame
aaaa:password
-puwpe',+eee
Fig, 7.24 Input
Padding Oracle Attack, and need to be adjusted flexibly according to different
situations.
Here is an example of the use of Padding-Oracle attack with RCTF 2019’s
baby_crypto. The main logic of the program is as follows.
key = os urandom (16)
sa1t = xey
iv = os .urandom (16)
cookie = b"admin: 0;usernane:ve;passvord:$a* (username encode () ,
# Get user's username and password
password encode () )
hv = shal (salt +cookie)
print ("Your cookie : #)
while True:
# Outputs cookie, iv, hv
txy :
print ("Input your cookie :*)
iv, cookie_padded_encrypted, hv
# Read from input
cookie_padded
# Decrypted cookie vith user′ s input
:x
okie = unpad (cookie_padded)
except Exception as e:
print (*Invalid padding*)
if not is_valid_hash (cookie, hv) :
continue
print (*Invalid hash*)
continue
# Check if cookie matches hv
# if admin=1 in cookie, outputs flag
The code to set the admin flag bit is as follows.
for part in cookie split (b*;*) :
k, v = part.aplit (b":")
info [k] = v
The program does not validate duplicate keys, so you can set the admin flag to
1 by adding an admin:1 string directly after the previous encryption. If there is no
hash verification, you can directly modify the value of iv to change the admin flag to
1 in the result of decrypting the first block of ciphertext.
In order to make the last block of decrypted plaintext contains admin:1, assuming
that the usemame and password entered are both 5 a’s, you can construct such an
input (Fig. 7.24) to change the last block of plaintext from
---
## Page 594
582
7Crypto
(S1)"aaaaa\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b
t0
(S2)"aaaaa ;admin : 1\x03^x03^x03 *
The string needs to make the ciphertext of the previous block equal to S) ① S.
However, we don't want the value of the second block to be changed, so we need
to continue modifying the value of the first block. If we know the decrypted plaintext
of the second block (S:  S), we can modify the first block's ciphertext in the same
way to control the plaintext of the second block. This is where the Padding-Oracle
attack comes into play. Here is a script to get the decrypted value of the last_chunk2
variable.
def set_str (s, 1, d) :
if 1 >= 0:
retuzn s [:i] + chx (d) + s [i+1 :]
else:
 = len (s) + 
1ast_chunk2 = xor_stx (S1,S2)
retuzn s [:i] + chx (d) + s [i+1 :]
# Data to obtain decryption result
random_f = os .urandom(16)
res = 11
 Eandomly generated F
for i in xrange (0, 16) :
random_f_r = random_f [o : 16]
for  in xrange (0, 0x100) :
guess = iv + set_str (random_f, 15-1, j) + last_chunk2
p. sendline (guess encode (*hex*) + hv_hex)
rr = p. recvunti1 (* Input your cookie : (n′)
if 'Invalid padding' not in rr:
、{[-st]uopuex)pxo  (+) = 
{2) xqo + sa.x = s9x
for k in xrange (0, len (res) 1 :
random_f=set_stz (xandom_f, - (k+1) , (1+2) ~ord (res [k] 1 ~ord
(zandom__z[15k] ) ]
res = xor_str (res [: : -1] , random_f_r)
break
print (zes,encode (*hex′))
Of course, we also need the hash of the newly created cookie to pass the
program's validation, and subsequent chapters will explain the basics of the hash
length extension attack. Note that the Padding-Oracle attack may appear much more
often in CTF than other attacks for block ciphers, so you may want to prepare a
Kpeau anedtuan nduos Susaqos Suspudsauoo
---
## Page 595
7.4  Stream Cipher
583