an OR-split and an OR-join, we depict the resulting process as Our CFC measure does not follow this property. Therefore,
PoQ. This type of concatenation has the same illustration as it makes no provision for distinguishing between processes
the one in Fig. 3, except that the AND-split and the AND-join which have a small number of activities (possibly performing
shown are replaced with an OR-split and an OR-join, very little computation) and those which have a large number
respectively. of activities (possibly performing substantial amount of
4) When a process P is concatenated with a process Q using computation), provided that they have the same decision
a XOR-split and a XOR-join, we depict the resulting process structure. The influence of the number of activities is captured
as P⊕Q. This type of concatenation has also the same by the activity complexity metric.
illustration as the one in Fig. 3, except that the AND-split and
the AND-join shown are replaced with a XOR-split and a Property 3:
XOR-join, respectively. We have processes which have different degrees of
perceived complexity, but map into the same complexity
C. Evaluating the CFC Metric
measurement value.
The nine criteria proposed by Weyuker give a framework to
evaluate software metrics’ properties using a formal There are distinct processes P and Q such that, |P|=|Q|.
theoretical basis. The properties are intended to evaluate
complexity measures on source code metrics. Since there is a A measure that assigns a distinct value to every process is
strong similarity of source code flowgraphs and processes [1], not much of a measure. It would go against the principle of
we will use Weyuker’ properties to validate our CFC measure. measurements which requires that the number of objects that
This widely used criterion will be presented, adapted and can be measured be greater than range of the values of the
applied to processes in the following paragraphs. measure.
Our measure clearly satisfies this property. Let us take two
Property 1: processes, P and Q. Let us assume that P has an AND-split at
There are processes P and Q such that the complexity of P activity a with a fan-out(a) of two. Let us construct process Q
is not equal to the complexity of Q. The property requires that exactly in the same way as process P, but with a fan-out(a) of
a measure should not produce the same complexity value for four at the AND-split activity a. Since CFC (a)= 1, the
AND-split
every process. complexity of P is equal to the complexity of Q, i.e. |P|=|Q|,
but the processes are distinct.
(∃P)(∃Q)( Q)
P ≠ .
Property 4:
There exist processes P and Q such that P is equivalent to Q
This property is an essential requirement for measures and
but the complexity of P is not equal to the complexity of Q.
process measurement. It says that a measure should
distinguish between at least two processes. The property
(∃P)(∃Q)( Q)
stresses that a measure in which all processes are equally P≡Q and P ≠ .
complex is not really a measure.
With our measure we can always come up with two Even though two processes may have the same
processes with two different control-flow complexity values. functionality, it is the details of the design that determine the
We can always design a process P which has the same number process’s complexity. There are different process designs for
of split types but with a higher fan-out from those in process the same functionality. For example let us take a business
Q. As another example, let us take two processes, P and Q, process that makes the backup of a file system composed of
containing only XOR splits. Let us assume that P=Q (the four activities that save files at different locations. Two
processes are exactly equal). Let us replace the XOR splits of different designs (processes P and Q) with the same
process P with OR splits (for correctness reasons, let us also functionality of the business process can be constructed.
replace the XOR joins with OR joins). Since CFC XOR-split(a)= Process P, carries out the four activities sequentially, while
fan-out(a) and CFC OR-split(a)= 2fan-out(a)-1, where a is an process Q uses an AND-split and an AND-join to reduce the
activity, then |P|>|Q|. Therefore Property 1 is satisfied. time it takes to complete a file system backup. As a result,
|P|=0 and |Q| =1, i.e. |P|≠|Q|. Therefore this property is
Property 2: satisfied by our metric.
A measure has to be sufficiently sensitive. A measure is not
sensitive enough if it divides all processes into just a few Property 5:
complexity classes For any processes P and Q, the complexity of P*Q,
*∈{ o,•,⊕}
−, , is greater than or equal to the original
complexity of P (weak positivity). Case 4 (⊕): |P⊕R|=|P|+|R|+2 and |Q⊕R|=|Q|+|R|+2, since
|P|=|Q|, it holds that |P⊕R|= |Q|+|R|+2, thus |P⊕R| =
Case 1 (-):
|Q⊕R|.
(∀P)(∀Q)( P)
P−Q ≥
As a result, it is clear that our measurement does not follow
For the concatenation operation ‘–‘, the weak positivity Weyuker's property 6 in any of the cases presented.
holds. For any two processes P and Q, |P-Q|=|P|+|Q|, thus |P-
Q| ≥ |P|. Property 7:
There are processes P and Q such that Q is formed by
Case 2 (o): permuting the order of the activities of P and |P| is not equal to
(∀P)(∀Q)( P)
PoQ > |Q|.
For the concatenation operation ‘o‘, the weak positivity (∃P)(∃Q) If Q is formed by permuting the order of the
holds. For any two processes P and Q, |PoQ|=|P|+|Q|+22-1, activities of P, then |P| ≠ |Q|.
thus |PoQ| ≥ |P|. Furthermore, for the concatenation operation
‘o‘ the positivity also holds since |PoQ| > |P|. This property requires that permutation of elements within a
process change the metric value. The intent is to ensure that
Case 3 (●): the possibility exists for metric values to change due to
(∀P)(∀Q)( P)
P•Q > permutation of process activities.
Let us assume that we have a process P which contains an
For the concatenation operation ‘●‘, the weak positivity AND-split and an OR-split for the activities a 1 and a 2,
holds. For any two processes P and Q, |P●Q|=|P|+|Q|+1, thus respectively. Each split has a different fan-out. Activity a 1 has
|P●Q| ≥ |P|. Furthermore, for the concatenation operation ‘●‘ a fan-out of two, while activity a 2 has a fan-out of three.
the positivity also holds since |P●Q| > |P|. Therefore,
Case 4 (⊕): |P| = CFC (a )+CFC (a )
AND−split 1 OR−split 2
(∀P)(∀Q)( P⊕Q > P) = 1 + 23 -1 = 8
For the concatenation operation ‘⊕‘, the weak positivity Let us assume that Q is a permutation of the activities of
process P. More precisely, the activities a and a are
holds. For any two processes P and Q, |P⊕Q|=|P|+|Q|+2, thus 1 2
exchanged. As a result, activity a has now a fan-out of three,
|P⊕Q| ≥ |P|. Furthermore, for the concatenation operation 1
while activity a has a fan-out of two. The complexity of Q
2
‘⊕‘ the positivity also holds since |P⊕Q| > |P|. becomes,
Property 6: |Q| = CFC (a ) + CFC (a )
AND−split 2 OR−split 1
There exist processes P, Q, and R, such that |P|=|Q| and
= 1+22 -1 = 4
{ }
|P*R|≠|Q*R|, where*∈ −, o,•,⊕ .
Since |P| ≠ |Q| (i.e. 8 ≠ 4), it happens that our measurement
⎛P = Q and P*R ≠ Q*R ⎞ follows this property.
(∃P)(∃Q)(∃R) ⎜⎜ ⎟⎟
⎝and *∈{−,o,•,⊕} ⎠
Property 8:
This property states that uniformly changing activity names
As with property 5, this property has four distinct cases.
should not affect a process complexity.
Case 1 (-): |P-R|=|P|+|R| and |Q-R|=|Q|+|R|, since |P|=|Q|, it
If P is a renaming of Q, then |P| = |Q|.
holds that |P-R|= |Q|+|R|, thus |P-R| = |Q-R|.
This property requires that when the name of the activities
Case 2 (o): |PoR|=|P|+|R|+22-1 and |QoR|=|Q|+|R|+22-1, since
or processes changes, the metric should remain unchanged. As
|P|=|Q|, it holds that |PoR|= |Q|+|R|+22-1, thus |PoR| = |QoR|.
the metric being considered in this research does not depend
on the name of activities or processes, it satisfies this property.
Case 3 (●): |P●R|=|P|+|R|+1 and |Q●R|=|Q|+|R|+1, since
|P|=|Q|, it holds that |P●R|= |Q|+|R|+1, thus |P●R| = |Q●R|.
Property 9:
The complexity of a process formed by concatenating two
processes can be greater than the sum of their individual
complexities (wholeness property). This property states that
the whole must be at least as great as the sum of the parts. The In [13] the authors attempt to formalize some properties
idea behind wholeness is that the whole is more complex than which any reasonable control-flow complexity measure must
the sum of its components. satisfy. Their approach is directed to large software programs
which are often built by sequencing and nesting of simpler
(∃P)(∃Q)( P*Q > P + Q, and *∈{−, ,•,⊕}) , constructs, the authors explore how control-flow complexity
o
measures behave under such compositions.
Please note that these two last fields of research have been
This property states that, at least in some cases, the
carried out in the context of software engineering and not
complexity of a process formed by concatenating two
process management.
processes is greater than the sum of their complexities. This
reflects the fact that there may be interactions between the
VI. CONCLUSIONS
concatenated processes.
As with previous properties, this property has four distinct Most of the work done so far in the business process field
cases. has been tool-oriented and technological in nature; the main
goal has been during years the definition and development of
Case 1 (-): |P-Q|=|P|+|Q|, thus |P-Q| ≥ |P|+|Q|. WfMS including models, modeling languages, correctness
analysis, and execution environments. Recently, a new field of
Case 2 (o): |PoQ|=|P|+|Q|+22-1, thus |PoQ| > |P|+|Q|. research for processes has emerged. This new field – termed
process measurement – presents a set of approaches to the
Case 3 (●): |P●Q|=|P|+|Q|+1, thus |P●Q| > |P|+|Q|. quantification of specific properties of processes, such as their
complexity.
Case 4 (⊕): |P⊕Q|=|P|+|Q|+2, thus |P⊕Q| > |P|+|Q|. The process control-flow complexity (CFC) metric is a
design-time metric that can be used to evaluate the difficulty
As a result, our measurement follows property 9 for case 2, of producing business process, Web process, and workflow
3, and 4. Case 1 follows a variation of the wholeness property, designs before an actual implementation exist. When process
called the weak wholeness property. control-flow complexity analysis becomes part of the process
development cycle, it has a considerable influence in the
(∃P)(∃Q)( +Q)
P−Q ≥ P design phase, leading to less complex processes.
To increase the confidence, acceptance, and use of the CFC
D. Dealing with process loops
measure we have carried out a serious validation procedure
Our complexity metric is able to cope with the modeling of using Weyuker’s nine properties. These properties give a
loops. When a transition “goes back” to a previous activity, a formal analytical approach to classify our measure. Since our
XOR split as to be place on the activity that will decide if the CFC measure happens to fully satisfy seven of the Weyuker’s
loop will be taken or not. As presented earlier, our analysis of nine properties and partially satisfies one property it can be
Weyuker’s properties accounts for the existence of XOR splits considered to have passed a significant part of the
in a process. theoretically validation process. Therefore, it can be
categorized as a good, structured, and comprehensive one
V. RELATED WORK
While a significant amount of research on the complexity of REFERENCES
software programs has been done in the area of software [1]. Cardoso, J., Evaluating Workflows and Web Process Complexity, in
engineering, the work found in the literature on complexity Workflow Handbook 2005, L. Fischer, Editor. 2005, Future Strategies
Inc.: Lighthouse Point, FL, USA. p. 284-290.
analysis for business processes, workflows, and processes in
[2]. Weyuker, E.J., Evaluating software complexity measures. IEEE
general is almost inexistent. Transactions on Software Eng., 1988. 14(9): p. 1357-1365.
Research in software engineering has produced various [3]. Cardoso, J. About the Data-Flow Complexity of Web Processes. in 6th
International Workshop on Business Process Modeling, Development,
measurements for software. Among others are lines-of-code,
and Support: Business Processes and Support Systems: Design for
the Halstead’s measure [10], McCabe’s measure [4], the and
Flexibility. 2005. Porto, Portugal.
the COCOMO model [11]. There is a vast literature on [4]. McCabe, T., A Complexity Measure. IEEE Transactions of Software
software metrics which represents the result from the Engineering, 1976. SE-2(4): p. 308-320.
[5]. Kitchenham, B., S.L. Pfleeger, and N. Fenton, Toward a Framework for
measurement of the development, operation and maintenance
Measurement Validation. IEEE Transactions of Software Engineering,,
of software in order to supply meaningful and timely 1996. 21(12): p. 929-944.
management information. [6]. Fenton, N., Software Measurement: A Necessary Scientific Basis. IEEE
Transactions on Software Engineering, 1994. 20(3).
Misra and Misra [12] have evaluated cognitive complexity
[7]. Morasca, S., et al., Comments on "Towards a Framework for Software
measure in terms of Weyuker properties and has found that Measurement Validation". IEEE Transactions on Software Engineering,
most of Weyuker properties have been satisfied by the 1997. 23(3): p. 187-188.
[8]. Zuse, H., A Framework of Software Measurement. 1997, Berlin: Walter
cognitive weight software complexity measure and established
de Gruyter Inc.
the cognitive complexity as a well structured one.
[9]. Aalst, W.M.P.v.d., The Application of Petri Nets to Workflow
Management. The Journal of Circuits, Systems and Computers, 1998.
8(1): p. 21-66.
[10]. Halstead, M.H., Elements of Software Science, Operating, and
Programming Systems Series. Vol. 7. 1977, New York, NY: Elsevier.
[11]. Boehm, B., Software Engineering Economics. 1981: Prentice Hall.
[12]. Misra, S. and A.K. Misra. Evaluating Cognitive Complexity Measure
with Weyuker Properties. in Third IEEE International Conference on
Cognitive Informatics (ICCI'04). 2004. Victoria, Canada.
[13]. Lakshmanan, K.B., S. Jayaprakash, and P.K. Sinha, Properties of
Control-Flow Complexity Measures. IEEE Transactions on Software
Engineering archive, 1991. 17(12): p. 1289 - 1295.