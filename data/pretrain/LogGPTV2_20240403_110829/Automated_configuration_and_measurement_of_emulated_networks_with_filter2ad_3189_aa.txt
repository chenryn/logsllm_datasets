title:Automated configuration and measurement of emulated networks with
AutoNetkit
author:Simon Knight
An Automated System for Emulated Network
Experimentation
Simon Knight
University of Adelaide
Cisco Systems
Hung Nguyen
University of Adelaide
Olaf Maennel
Loughborough University
Iain Phillips
Loughborough University
Nickolas Falkner
University of Adelaide
Randy Bush
IIJ
Matthew Roughan
University of Adelaide
ABSTRACT
Emulated networks and systems, where router and server
software are run in virtual environments, allow network op-
erators and researchers to perform experiments at large scale
more economically than in testbeds. Running real code pro-
vides a greater level of realism than simulation.
However, large scale comes with a problem: running real
software means each test needs at least as much conﬁgura-
tion as a real network. To recognise the true value of emula-
tion at scale, we need to reduce the complexity of building,
conﬁguring, deploying, and measuring emulated networks.
We present a system to facilitate emulation by provid-
ing translation from a high-level network design into a con-
crete set of conﬁgurations that are automatically deployed
into one of several emulation platforms. Our system can be
used to construct multi-domain networks in minutes, and
is scalable to networks with over a thousand devices. It is
modular, allowing support for diﬀerent protocols, topology
designs, and target platforms: Quagga, JunOS, IOS, etc.
Users, from both the research community and industry, have
already demonstrated its value in research and education.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network
Operations—Network Management
Keywords
Emulation; Conﬁguration Management;
ACM acknowledges that this contribution was authored or co-authored by an em-
ployee, contractor or afﬁliate of the United States government. As such, the Gov-
ernment retains a nonexclusive, royalty-free right to publish or reproduce this article,
or to allow others to do so, for Government purposes only.
CoNEXT’13, December 9–12, 2013, Santa Barbara, California, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2101-3/13/12 ...$15.00.
http://dx.doi.org/10.1145/2535372.2535378.
1.
INTRODUCTION
This paper presents a tool that allows quick and easy con-
ﬁguration of large-scale emulated networks. This tool repre-
sents network topologies as a series of layered mathematical
graphs. By using such an abstraction, we allow a user to
specify their network topology at a high-level—similar to
planning a network on a whiteboard—with an API to write
design rules. These construct topologies to represent the
complex relationships involved in protocol or service conﬁg-
uration. The abstraction allows users to quickly bootstrap
a network, with design rules to either allocate defaults for
parameters such as IP addressing, or to be speciﬁed directly.
Simplifying emulated network conﬁguration allows net-
work researchers, operators, and educators to quickly pro-
totype low-cost large-scale network experiments, that can
realistically model network behaviour.
The aim of the system is not to provide network emula-
tion, but to generate conﬁgurations for existing network em-
ulation platforms. While this paper discusses using the sys-
tem to generate conﬁgurations for the Netkit platform, it can
easily be adapted to new routing protocols, services, or em-
ulation platforms, due to our use of overlay attribute graphs
to provide an abstract network representation. The sys-
tem is used as the conﬁguration engine in Cisco’s VIRL [10]
framework, used for Cisco Modeling Labs.
Real networks consist of heterogeneous devices connected
by multi-layer protocols with higher-layer services. These
services run over the network itself, but also provide vital
features of the network (e.g., DNS or authentication ser-
vices). The interactions of these systems are complex, even
when devices perform as described. Subtle (often unspeci-
ﬁed) features can cause unpredictable behaviour. And yet,
network operators need to deploy these networks with pre-
dictable results, students need to experiment with them as
part of active learning, and researchers need to develop new
ideas in just such realistic settings. The obvious solution—
building a hardware testbed—is costly and beyond the reach
of most, especially at a large scale. An alternative, where
software models the theoretical behaviour of an algorithm
or protocol in software, lacks vendor-speciﬁc bugs and im-
plementation details.
235Emulation, where real router or server software is run in-
side virtual machines, enables large-scale networks to be con-
structed on modest or commodity hardware [9, 25]. How-
ever, the very thing that makes emulations useful—their
verisimilitude—is also their Achilles heel. Real networks re-
quire conﬁguration, and this is equally true for emulated
networks. The conﬁguration problem has been shown to
be diﬃcult to solve [4, 8, 14], and there are various projects
trying to solve it for live networks. However, the existing
solutions typically focus on particular aspects of the prob-
lem (most often routing, which is seen as both hard and
relatively dynamic), whereas for emulation, we need to con-
ﬁgure the entire network starting from blank conﬁgurations.
The conﬁguration problem for emulation is further dif-
ferentiated from that of real networks by its typical use in
experimentation: we don’t just want to conﬁgure a single
network, but instead be able to consider many diﬀerent net-
works to see the aﬀect of changing parameters, protocols, or
even the network topology.
The goal of our work is to facilitate such experimenta-
tion by providing a system to automate conﬁguration and
deployment of emulated networks.
Providing eﬀective conﬁguration tools for emulated net-
works involves many of the same problems of conﬁguring real
networks. Historically, real networks have often been con-
ﬁgured by manual conﬁguration of devices, using low-level,
device-centric conﬁguration languages. However, device-level
conﬁguration scales at best linearly in the size of the net-
work, but typically super-linearly because consistency amongst
all devices must be maintained. For instance, to set up a
single point-to-point link, two routers must have interfaces
correctly conﬁgured, including consistent IP addresses (that
must not overlap any others allocated in the network); rout-
ing protocol policies (e.g., link weights) must be correctly set
(also considering their eﬀect on the whole network’s rout-
ing); and DNS entries must be correctly conﬁgured to map
the IP addresses to names. The repetitive, yet complex, na-
ture of the task has been shown [29] to cause many of the
problems observed in real networks.
Easing the burden of this task requires high-level, network-
wide abstractions, analogous with abstraction in program-
ming languages. Our system starts from such abstractions
with network design passed through a compiler to gener-
ate a device independent network resource database. This
is then converted into device-speciﬁc conﬁgurations using
templates, and deployed: deployment in emulated networks
involves creation of the virtual machines, their connectivity,
and their invidual conﬁguration.
A crucial part of emulation is measurement. This allows
a user to test that the emulated network is functioning as
intended, but also to collect results from the experiment.
Mechanisms are provided to conﬁgure basic measurements,
for example traceroutes, as part of the emulation. An ad-
vantage of an emulation is that when traceroute is used, it
is the same binary application used by real world operators:
we are using the same, and can see the results that would
arise from real experiments.
It also enables new network
tools to be tested on a realistic testbed: for instance, a load-
balancer-aware traceroute could be run.
A critical feature of our approach lies in the abstrac-
tions used, based on representing the network as a graph.
However a single graph does not capture the complexity of
IP networks, consisting of multiple layers, including service
overlays that each may be represented by a diﬀerent graph.
Our multi-layed graph approach naturally allows construc-
tion of these graphs.
The result is a system that provides high-level, progra-
matic network design, template-based conﬁguration, and au-
tomated deployment and measurement. It allows us to spec-
ify a network at an abstract level, but study it in all of its
complexity: networks of over 1,000 routers and 800 servers
have been created and run. It is ﬂexible enough to allow ex-
perimentation with new protocols [18], or to consider com-
plex research questions, e.g., [19, 20]. The system does not
cover all possibilities, but is extensible, and has been ex-
tended for use in several projects [10, 30, 33].
2. BACKGROUND
Experiments are an important part of research; a way for
operators to test new conﬁgurations before deployment; and
useful in teaching students. However setting up experiments
can be time-consuming and error-prone.
So how can researchers and operators conduct such ex-
periments? PlanetLab provides resources for realistic ex-
periments, but only limited control and repeatability. Hard-
ware testbeds oﬀer realism and control, but purchase and
maintenance are expensive and devices may need to be re-
cabled for each new experiment, also limiting the scale of
such experiments.
Another choice is to use simulation software. Simulations
are low-cost, and scale to large networks, but simulations
focus on certain aspects of a network, sacriﬁcing detail in
other aspects in order to constrain the simulation complex-
ity. Some simulation tools focus on a single issue (e.g., c-
BGP and the Border Gateway Protocol (BGP) [34]), but
even those that seek to be realistic over a wide range of net-
working components cannot replicate the full complexity of
real software. For instance, simulations don’t recreate soft-
ware bugs (unless speciﬁcally designed to do so). Further,
if a new protocol, service, or application is to be added to a
simulation, a new simulated version must be created.
Emulation [2, 23, 25, 27, 31] lies between the extremes of
hardware testbeds and software simulation. Instead of pur-
chasing speciﬁc physical hardware, routers and servers can
be run in software, as virtual machines on physical servers.
This brings realism, as both the individual protocol decision
processes and the inter-protocol interactions are the same as
on production routers. Indeed, research conducted on net-
work emulation platforms can expose bugs or implementa-
tions that are diﬀﬁcult to detect in production networks [12]:
the advantages of emulated experimentation extend beyond
the low-cost and ﬂexible topology construction.
Emulation also simpliﬁes creating experiments: it is much
simpler to create a virtual machine than to purchase and
ship physical routers and PCs, and inter-device connections
don’t require physical and complex cabling. Finally, if user
wishes to add a new service, protocol or other application,
they can often install an existing software package directly.
Many emulation platforms allow directly inspection of the
virtual links connecting devices. This allows packet capture
tools such as WireShark to interface directly with the em-
ulated network, for insight into packet-level network behav-
ior. This is much simpler to script in an emulated environ-
ment than placing hardware capture devices into a physical
testbed.
236While emulation oﬀers many beneﬁts to networking re-
search, it is important to note that it isn’t a complete re-
placement for hardware testbeds. Emulated packet forward-
ing does not have the same throughput as dedicated hard-
ware line cards. Emulation is also limited to seeing software
bugs—we can’t see hardware faults.
While emulation isn’t a substitute for hardware testbeds,
in some situations it can enable budget-constrained experi-
mentation where a hardware testbed is out of reach. In oth-
ers, it can allow rapid prototyping, and free up the hardware
testbed for experiments that do require accurate hardware
behaviour. Finally, hybrid experiments can be constructed,
allowing physical devices to be studied, connected to realis-
tic large-scale emulated topologies.
Emulation creates realistic routers that need realistic con-
ﬁguration: a problem to solve in a static network (for a short
list of papers that discuss the problem see [4, 8, 14]). Auto-
conﬁguration of emulations is more demanding:
• Experimentation requires changing variables to observe
the eﬀects: emulation must support conﬁguration of mul-
tiple networks.
• Scientiﬁc rigour requires that we repeat experiments mul-
tiple times to obtain statistical conﬁdence in results, and
that we enable others to repeat our experiments (as ex-
actly as possible).
• It is important to avoid errors in real network conﬁgu-
rations, but at least they are detectable. In emulation
experiments, we must always be concerned that what we
are emulating is what we intend: particularly as there is
no feedback from customers on network events.
• We need more ﬂexibility than a commercial environment:
typical networks consist of limited set of devices, but an
experiment may require observing an eﬀect across equip-
ment models or vendors.
Conﬁguration is a signiﬁcant limitation of existing emula-
tion systems, which focus on providing an emulated network
environment. Netkit [31], Junosphere [25] and Dynagen [2]
all make it easy to create and connect virtual machines
to form complex network topologies, but leave the prob-
lem of conﬁguration to the experimenter. Current research
on autoconﬁguration, e.g., [4, 8, 14], focuses on production
networks and doesn’t directly solve the problems outlined
above.
A number of tools exist to aid in network conﬁguration.
However these are typically written to assist with one spe-
ciﬁc aspect of the conﬁguration process — commonly ex-
pressing BGP routing policy. These include RtConﬁg [35],
which uses the RPSL routing policy language, and can build
conﬁgurations for devices including Cisco IOS and Juniper
JunOS; bgp++ conf [5], which generates conﬁgurations for
the BGP++ simulator; and the Scalable Simulation Frame-
work [36], which automates the conﬁguration required to
simulate routing protocol behaviour. In contrast, our system
has been designed to be holistic by providing a framework
to conﬁgure the network protocols and services required in
an experiment, rather than to meet a speciﬁc use-case. This
ﬂexibility allows experiments to be extended to new proto-