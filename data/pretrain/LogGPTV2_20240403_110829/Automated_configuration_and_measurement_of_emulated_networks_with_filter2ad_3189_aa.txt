# Title: Automated Configuration and Measurement of Emulated Networks with AutoNetkit

# Authors:
- Simon Knight, University of Adelaide, Cisco Systems
- Hung Nguyen, University of Adelaide
- Olaf Maennel, Loughborough University
- Iain Phillips, Loughborough University
- Nickolas Falkner, University of Adelaide
- Randy Bush, IIJ
- Matthew Roughan, University of Adelaide

## Abstract
Emulated networks, where router and server software run in virtual environments, enable network operators and researchers to conduct large-scale experiments more economically than in physical testbeds. Running actual software provides a higher level of realism compared to simulations. However, large-scale emulations require extensive configuration, similar to real networks. To fully leverage the benefits of large-scale emulation, we need to simplify the processes of building, configuring, deploying, and measuring these networks.

We present a system that facilitates this by translating high-level network designs into concrete configurations, which are then automatically deployed on various emulation platforms. Our system can construct multi-domain networks in minutes and scales to networks with over a thousand devices. It is modular, supporting different protocols, topology designs, and target platforms such as Quagga, JunOS, and IOS. The system has already demonstrated its value in research and education for both academic and industry users.

## Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network Operations—Network Management

## Keywords
Emulation, Configuration Management

## ACM Acknowledgment
ACM acknowledges that this contribution was authored or co-authored by an employee, contractor, or affiliate of the United States government. As such, the Government retains a nonexclusive, royalty-free right to publish or reproduce this article, or to allow others to do so, for Government purposes only.

CoNEXT'13, December 9–12, 2013, Santa Barbara, California, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2101-3/13/12 ...$15.00.
http://dx.doi.org/10.1145/2535372.2535378.

## 1. Introduction
This paper introduces a tool that simplifies the configuration of large-scale emulated networks. The tool represents network topologies as layered mathematical graphs, allowing users to specify their network design at a high level, similar to planning on a whiteboard. This abstraction enables users to quickly set up a network, with design rules to either allocate default parameters or specify them directly.

Simplifying the configuration of emulated networks allows researchers, operators, and educators to rapidly prototype low-cost, large-scale network experiments that realistically model network behavior. The system's primary goal is to generate configurations for existing network emulation platforms, not to provide the emulation itself. While this paper focuses on the Netkit platform, the system can be adapted to new routing protocols, services, or emulation platforms due to its use of overlay attribute graphs for abstract network representation. The system is used as the configuration engine in Cisco’s VIRL framework, which is part of Cisco Modeling Labs.

Real networks consist of heterogeneous devices connected by multi-layer protocols and higher-layer services. These services, while running over the network, also provide essential features like DNS or authentication. The interactions between these systems are complex, and subtle, often unspecified, features can lead to unpredictable behavior. Network operators need to deploy these networks with predictable results, students need to experiment with them for active learning, and researchers need to develop new ideas in realistic settings. Building a hardware testbed is costly and impractical, especially at a large scale. Simulation, while cost-effective, lacks vendor-specific bugs and implementation details.

Emulation, where real router or server software runs inside virtual machines, enables the construction of large-scale networks on modest or commodity hardware. However, the complexity of configuring these emulated networks is a significant challenge. The configuration problem is known to be difficult, and existing solutions typically focus on specific aspects, such as routing. For emulation, we need to configure the entire network from scratch. Moreover, experimentation requires the ability to configure multiple networks to observe the effects of changing parameters, protocols, or topologies.

Our work aims to facilitate such experimentation by automating the configuration and deployment of emulated networks. Providing effective configuration tools involves many of the same challenges as configuring real networks. Historically, real networks have been configured manually using device-centric languages, which scale poorly. High-level, network-wide abstractions are needed to ease this burden. Our system uses such abstractions, passing network designs through a compiler to generate a device-independent network resource database. This is then converted into device-specific configurations using templates and deployed. Deployment in emulated networks involves creating virtual machines, setting up their connectivity, and configuring each device.

Measurement is a crucial part of emulation, allowing users to verify the network's functionality and collect experimental results. Our system provides mechanisms to configure basic measurements, such as traceroutes, as part of the emulation. An advantage of emulation is that the same binary applications used in the real world, like traceroute, can be used, providing results that would arise from real experiments. This also enables testing new network tools, such as load-balancer-aware traceroutes, in a realistic environment.

A key feature of our approach is the use of multi-layered graph abstractions to represent the network. This naturally allows the construction of graphs for different layers and service overlays. The result is a system that provides high-level, programmable network design, template-based configuration, and automated deployment and measurement. It allows us to specify a network at an abstract level but study it in all its complexity. Networks with over 1,000 routers and 800 servers have been created and run. The system is flexible enough to support new protocols and address complex research questions. While it does not cover all possibilities, it is extensible and has been extended for several projects.

## 2. Background
Experiments are crucial for research, testing new configurations before deployment, and teaching. Setting up experiments can be time-consuming and error-prone. PlanetLab provides resources for realistic experiments but offers limited control and repeatability. Hardware testbeds offer realism and control but are expensive and require recabling for each new experiment, limiting their scale.

Simulation software is low-cost and scalable but focuses on certain aspects of a network, sacrificing detail in others to manage complexity. Some simulation tools, like c-BGP, focus on specific issues, but even those that aim for realism cannot replicate the full complexity of real software. Simulations do not recreate software bugs unless specifically designed to do so. Adding a new protocol, service, or application to a simulation requires creating a new simulated version.

Emulation lies between hardware testbeds and software simulation. Instead of purchasing physical hardware, routers and servers can be run as virtual machines on physical servers. This brings realism, as both the individual protocol decision processes and inter-protocol interactions are the same as on production routers. Research on network emulation platforms can expose bugs or implementations that are difficult to detect in production networks. Emulation also simplifies creating experiments, as it is easier to create a virtual machine than to purchase and ship physical routers and PCs. Inter-device connections do not require complex cabling. If a user wants to add a new service, protocol, or application, they can often install an existing software package directly.

Many emulation platforms allow direct inspection of the virtual links connecting devices, enabling packet capture tools like Wireshark to interface directly with the emulated network. This is much simpler to script in an emulated environment than placing hardware capture devices in a physical testbed.

While emulation offers many benefits, it is not a complete replacement for hardware testbeds. Emulated packet forwarding does not match the throughput of dedicated hardware line cards, and it is limited to detecting software bugs, not hardware faults. Emulation can enable budget-constrained experimentation, rapid prototyping, and hybrid experiments that combine physical and emulated devices.

Emulation creates realistic routers that need realistic configuration, a problem that is more demanding in a static network. Auto-configuration of emulations must support multiple networks, ensure scientific rigor through repeatable experiments, and avoid errors that could go undetected without customer feedback. Experiments may also require observing effects across different equipment models or vendors.

Existing emulation systems, such as Netkit, Junosphere, and Dynagen, make it easy to create and connect virtual machines but leave the configuration to the experimenter. Current research on auto-configuration, such as RtConfig, bgp++ conf, and the Scalable Simulation Framework, focuses on production networks and does not directly address the challenges of emulated networks. Our system is designed to be holistic, providing a framework to configure the network protocols and services required for an experiment, rather than meeting a specific use-case. This flexibility allows experiments to be extended to new protocols and services.