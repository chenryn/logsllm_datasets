with victim addresses in exactly one way, as a function of ν for various k
(avg. over 100 runs). Instance is RAND(8, 9, 8)
resulting set. The probe step samples noise in addition to the
collisions with the targeted victim cache line.
Figure 7 and Figure 8 show both effects. Though the
unmodiﬁed prune step terminates, the resulting set size k(cid:48)
can be seen to decrease quickly with ν, while the number
of pruning iterations mpr increases. Hence, with noise, the
attacker could explore the PPP parameter space in favor of
a smaller k. Figure 8 also shows a faster decrease in correct
collisions for higher k, while the cost of pruning grows.
Alternatively, the attacker can consider early-aborting prun-
ing, i.e., terminating prune before it is entirely free of misses.
Indeed, a large part of the pruning iterations are no longer due
to self-evictions, but due to sampling noise. The false positives
introduced by the early-abort are then removed in a later stage.
The separation phase from Section VII-A is effective at
ﬁltering false positives caused by noise during PPP, since static
victim accesses, dynamic victim accesses, and false positives
exhibit different behavior in the separation phase. In contrast to
static or dynamic accesses, false positives occur only in some
runs, leading to multiple runs with 0 accesses. Hence, they
appear in more than one set in the end and can be removed.
Figure 6 shows the total number of cache misses for the
generation of supersets for victims of different total sizes
(nstat+ndyn). These supersets contain exactly 3 · nw · (nstat+
ndyn) addresses that collide with victim cache lines in exactly
one way. They additionally contain non-colliding addresses
introduced by noise and self-eviction in the proportion shown
in Figure 8, which is removed during separation. We can see
that the number of cache misses (and by extension, the runtime)
for this step grows approximately linearly with noise.
C. Infrequent victim events
In the case where an event in the victim happens only once
or a limited number of times (e.g., user input), the probe set
G needs to be large enough to achieve a very high detection
probability, which places more weight on accurate proﬁling
compared to VII-A2. On the other hand, when events trigger
Fig. 9: Differential propagation through CEASER’s LLBC. For brevity, we
introduce f [j◦i](·) as shorthand for f [j](f [i](·)).
accesses to multiple cache lines, all of them can be used for
detection. Attacks will mostly need to be asynchronous, which
necessitates some form of continuous monitoring. We leave an
investigation of practical implementations for future work.
VIII. SHORTCUT ATTACKS
In this section, we consider attack Ashort and draw attention
to the soundness of the randomized mapping by achieving
shortcuts during a case study on CEASER and CEASER-S.
In particular, we demonstrate how weaknesses in their
common randomized mapping allow us to reliably construct
eviction sets without any memory accesses. We ﬁrst describe
Low-Latency Block Cipher (LLBC), the CEASER-speciﬁc
implementation of the mapping RK. Drawing inspiration from
differential cryptanalysis, we show how input differences
propagate through the LLBC, and we derive an expression
for precomputing address differences that systematically yield
cache set collisions, independent of key, partition, and address.
We describe the attack ﬁrst for CEASER [38] before tackling
the generalized and improved CEASER-S [39].
A. Low-Latency Block Cipher in CEASER(-S)
CEASER instantiates RK by encrypting the input address
a with a custom LLBC with 40-bit blocks and 80-bit key. In
particular, it divides the input address in two equally sized (left-
right) chunks a = (L || R) and produces an output encrypted
address RK(a) = (L’|| R’). From this output, the lowermost
b bits determine the cache set index: s = (cid:98)RK(a)(cid:99)b = (cid:98)R’(cid:99)b.
The encryption proceeds as a keyed four-stage Feistel
network (depicted in Figure 9). Each stage instantiates a round
function F (X, K), taking 40-bit input (20 bit X and 20 bit
K) and producing 20-bit output (Y ). In each round function,
20 intermediary bits Wi are ﬁrst computed as Wi = Si(X, K),
where Si deﬁnes exclusive or (xor) of 20 input bits (out of
40). The Wi are shifted with a bit-permutation P to obtain Y .
In CEASER, the round functions are randomly sampled,
ﬁxed at design time, and explicitly different in every stage.
Let F [r] denote the round function for stage r, and K [r] the
20-bit subkey for this stage. Describe the bit-permutation with
i ← P (i), i.e., a bit at position P (i) moves to position i.
Next, let Xi and Ki denote the indices from resp. X and K [r]
that are xored to obtain intermediary bit Wi = Si(X, K).
is Y = (Y0||Y1||...||Y19) =
The round function output
(WP (0)||WP (1)||...||WP (19)). The round function F [r]
thus
(cid:88)
comprises 20 functions F [r]
i (X, K [r]) each computing one Yi:
(X, K[r]) =
(1)
(cid:88)
Yi = F [r]
Xj +
K[r]
k
i
j∈XP (i)
k∈KP (i)
Observing the linearity in the entire cipher (particularly in the
SBoxes Si, supposed to be non-linear), we draw inspiration
from differential cryptanalysis to bypass RK altogether.
B. Constructing and Using the Shortcut
The outcome of the shortcut is a set of addresses ai that
collides in the cache with a target address a, i.e., RK(ai) =
RK(a). The attacker could attempt this shortcut by recovering
the mapping key K, granting the shortcut for the lifetime of
the key. Our approach, in contrast, is fully key-independent.
It is a restricted take on chosen-plaintext attacks, where the
restriction stems from being embedded in a cache. Speciﬁcally,
the adversary can choose a set of plaintexts to RK (i.e., input
addresses ai), but does not observe any cryptographic output.
We rephrase the shortcut as a differential problem, i.e., to
ﬁnding a set of ∆a satisfying RK(a+∆a) = RK(a). Matching
with the Feistel topology, we denote the input difference ∆a =
(∆L||∆R) and the output difference (∆L(cid:48)||∆R(cid:48)). Achieving
the shortcut is then equivalent to ﬁnding pairs ∆L and ∆R, not
both zero, that result in the same set index bits: (cid:98)∆R(cid:48)(cid:99)b = 0b.
1) ∆−Propagation: We derive the propagation ﬁrst through
the round function F [r], then the full LLBC. Let+denote GF (2)
addition (bitwise xor). As a well-known cryptanalytic fact,
differences propagate unaffected through addition. Let ∆X and
∆Y denote differences at the input and output of F [r]. Stated
differently, if Y = F [r](X, K [r]) and Y (cid:48) = F [r](X+∆X , K [r]),
then ∆Y = Y (cid:48) +Y . Now compute the i-th output bit ∆Y,i:
∆Y,i = Y
(cid:48)
i + Yi = F [r]
i
(X + ∆X , K[r]) + F [r]
(cid:88)
i
k∈KP (i)
(X, K[r])
(K[r]
k + K[r]
k )
(cid:88)
(cid:88)
j∈XP (i)
j∈XP (i)
=
=
(Xj + ∆X,j + Xj ) +
∆X,j = f [r]
i (∆X )
If we let ∆Y = f [r](∆X ), then f [r] captures the effect of
round function F [r] on an input difference ∆X. Similar to F [r]
before, f [r] is an umbrella for 20 functions:
∆Y = f [r](∆X ) = (f [r]
0 (∆X ) || f [r]
1 (∆X ) || ... || f [r]
19 (∆X ))
Note that f [r] only depends on the input difference ∆X.
Crucially, it is independent of both X itself and the key K.
2) Shortcut Equation: Armed with the ∆-propagation
through round functions F [r], Figure 9 shows our probability
1 differential trail through CEASER’s full LLBC, yielding an
expression for output difference ∆(cid:48)
R. This expression, which we
dub the SHORTCUT EQUATION, describes ∆a = (∆L||∆R) sat-
isfying output collision: (cid:98)∆(cid:48)
R(cid:99)b = 0b ⇒ RK(a) = RK(a+∆a).
A straightforward way to ﬁnd solutions to this equation
ﬁxes (say) ∆L and tests variable ∆R for equality. The
expected ofﬂine complexity for each ∆a = (∆L, ∆R) is 2b−1
evaluations of the shortcut equation. Since very often b < 20, the
na¨ıve computation is very practical. As the shortcut equation
describes twenty linear equations over GF (2), one could also
algebraically determine a compact expression for ∆L and ∆R.
3) Implications: The shortcut does not require knowledge of
key K, and is even completely independent of K. Furthermore,
it is also independent of the input a. Although in general
RK(a) (cid:54)= RK(cid:48)(a), eviction sets constructed for key K(cid:48) and
input a(cid:48) are still eviction sets for any other (K, a) pair:
RK (a) = RK (a + ∆a) ⇒ RK(cid:48) (a
(cid:48)
+ ∆a) = RK(cid:48) (a
)
(2)
(cid:48)
This follows from the key-independence of the SHORTCUT
EQUATION. Hence, rekeying does not
invalidate eviction
sets constructed using the shortcut. This has the devastating
consequence that, as soon as the ∆a have been precomputed
ofﬂine, the attacker can construct arbitrary eviction sets for any
target a with zero cache accesses, completely bypassing RK.
4) Extension to CEASER-S: CEASER-S implements parti-
tions with P parallel LLBC instances with different keys. By
Equation (2), collision in one partition implies collision in
all partitions. Thus, our shortcut equally impacts CEASER-S,
allowing easy construction of fully congruent eviction sets.
5) Mitigation: At the very least, the LLBC rounds should
incorporate non-linear SBox layers. This spot mitigation thwarts
the presented shortcut, but more subtle attacks could remain.
Takeaway: Do not overestimate the mapping’s security.
Shortcut attacks can be fundamentally eliminated by a
randomization mapping that resists formal cryptanalysis.
IX. DISCUSSION
In this section, we relate and compare the contributions in
this paper to the most closely related work, as well as provide
speciﬁc recommendations and directions for future work.
A. Prime+Prune+Probe on speciﬁc designs
Our generic model for computation-based randomized caches
permits to instantiate existing designs, extend their security
analysis, and compare them in terms of proﬁling effort.
We consider an 8 MB cache with 16 ways (nw) and 13
index bits (b) (i.e., N = 131 072). We assume a non-accessible
target address (e.g., by enabling security domain separation s).
Although we consider Aideal (cf. Section III-B), i.e., we are able
to pinpoint one target access of interest, victim execution time
cannot be neglected. Therefore, we assume a modestly-sized
victim program, performing 1 000 accesses per invocation.
Figure 10 shows total cache accesses to proﬁle a generalized
eviction set G with pe = 90%. For each instance we use
PRIME+PRUNE+PROBE and optimize for total cache accesses.
1) Single-partition caches: Randomized caches with P = 1
(CEASER, TSC) can be treated as traditional caches without
adversary control over physical addresses. They require ex-
tremely frequent rekeying, given that fully congruent eviction
sets (i.e., pe = 100%) can be obtained with the efﬁcient top-
down proﬁling approach [49], [39].
2) CEASER-S: First-party CEASER-S analysis [39] only
considers fully congruent eviction. As fully congruent addresses
are extremely scarce, it is completely infeasible for larger P .
We instantiate the model to CEASER-S2 (resp. CEASER-
S4) by setting P = 2 (resp. P = 4) and replacement policy
not
investigated, TSC risks shortcuts due to absence of
cryptographic structure. Shortcuts in SCATTERCACHE are only
possible by signiﬁcant cryptanalytic advances for QARMA [1].
B. Future Work
Our work serves as a baseline to which future secure cache
designs, and their analysis, could be compared. This paper also
shows the importance of cryptanalytic resistance of the core
randomization mapping. Stringent latency constraints could
inspire new designs in the space of low-latency cryptography.
The rekeying period may be varied for different security lev-
els. This can be transparently implemented through frequently
and unpredictably updating s for high-security processes (e.g.,
enclaves), while refreshing K in larger intervals for regular
processes. We also propose heuristic-based rekeying, invalidat-
ing eviction sets upon observation of certain microarchitectural
events (e.g., many LLC cache misses or PPP signatures). It
should be noted that rapid rekeying only mitigates attacks in
scope for randomized caches, i.e., potential cache-contention
channels that do not target set contention might remain.
The gap between our conservative rekeying periods (Sec-
tion VI-D2) and PPP proﬁling in practice is quite large. Future
work could explore closing this gap by improving proﬁling,
relaxing theoretical bounds, or a combination of both.
X. CONCLUSION
Analyzing the residual attack surface of randomized cache
architectures is a complex undertaking. In this work, we have
established a generic framework to jointly analyze all existing
computation-based randomized caches. We showed that, similar
to cryptanalysis, randomized cache designs must be subjected
to systematic analysis to gain conﬁdence in their security. In
this effort, we have contributed on three main fronts.
First, we have advanced the proﬁling state of the art for
randomization-based secure caches. We developed novel attack
techniques for such caches, including PRIME+PRUNE+PROBE
and optimizations like bootstrapping and multi-step proﬁling.
Second, we have started bridging the gap between the usually
assumed ideal attack and complicating effects like noise and
multiple victim accesses. We have simulated an end-to-end
attack, leaking AES keys from a vulnerable implementation.
Finally, we have falsiﬁed the implicit assumption that any
randomized mapping successfully results in a secure cache.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers and our
shepherd, David Kohlbrenner, for their valuable feedback.
This work was supported in part by the European Research
Council (ERC) under the EU Horizon 2020 research and
innovation programme (grant agreements No 681402 and No
695305). It was also supported by the CyberSecurity Research
Flanders VR20192203 and the Research Council KU Leuven
C16/15/058. Antoon Purnal is funded by an FWO fellowship.
Additional funding was provided by a generous gift from Intel.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this paper are those of the authors and do not
necessarily reﬂect the views of the funding parties.
Fig. 10: Complexity (Aideal) to construct a fully congruent or generalized
(pe = 90% or pe = 50%) eviction set. Randomized caches are monolithic 8 MB
(nw = 16, b = 13, N = 131 072 lines). Cost metric is total cache accesses;
victim runtime is modeled with 1 000 accesses. Fully congruent eviction
assumes initial set (before reduction) of 2N. PPP uses the best-performing
strategy (cf. Section VI-C), with k = N
2 (RAND) or k = 3N
4 (LRU).
LRU. While CEASER-S could accomodate several policies (e.g.,
LRU, RRIP, . . . ) [39], we believe LRU leads to an accurate
security assessment. Indeed, many stateful replacement policies
can be degraded to LRU with some repeated accesses [10].
In what follows, we assume the problems from Section VIII
to be ﬁxed. There are three proposed CEASER-S instances,
with rekeying periods resp. 100N, 200N and 1000N. We
observe that PRIME+PRUNE+PROBE consistently obtains high-
quality generalized eviction sets within the rekeying period of
the 1000N-instance. While prior proﬁling techniques succeed
on average once every 68 years [39], PPP on CEASER-S2
has average complexity of ≈ 320N, leaving on average 68%
of every rekeying period available for exploitation. The more
conservative designs (100N, 200N) resist PPP for the majority
of rekeying periods, though with considerably reduced security
margin. We observe an extreme gap between PPP and previous
idealized estimates, easily exceeding 20 orders of magnitude
for P = 4 and 50 orders of magnitude for P = 8 (not displayed).
3) SCATTERCACHE: First-party analysis [53] already con-
siders generalized eviction. Their approach can be seen as a
corner case of PPP, i.e., using k = 1 (cf. Section V).
We instantiate SCATTERCACHE by setting P = nw = 16,
implicitly with replacement RAND. Optimized for total accesses,
PPP improves proﬁling with three orders of magnitude for the
considered conﬁguration. The main contribution of PPP is that
it requires much fewer victim invocations, as it permits to test
many addresses in parallel (k (cid:29) 1). While SCATTERCACHE
does not specify a rekeying frequency, our results indicate that
it should be determined more conservatively than expected.
4) Shortcuts: With a case study on CEASER-S, we show
with devastating consequences that the security of the ran-
domization should not be taken for granted, even if its output
is not directly observable. A similar study was conducted
in concurrent work [5]. Instantiating a sound cryptographic
algorithm thwarts all shortcuts but affects performance. Though
[10] D. Gruss, C. Maurice, and S. Mangard, “Rowhammer.js: A Remote
[39] ——, “New Attacks and Defense for Encrypted-address Cache,” in ISCA,
REFERENCES
[1] R. Avanzi, “The QARMA block cipher family. almost MDS matrices over
rings with zero divisors, nearly symmetric even-mansour constructions
with non-involutory central rounds, and search heuristics for low-latency
s-boxes,” in IACR ToSC, 2017.