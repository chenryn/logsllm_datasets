            e = bytes_to_long(os.urandom(32))
            u = random.randint(1 , p)
            D = random.randint(1 , p)
            curve = MyCurve(p , D , u)
            self.send('p = ' + str(p))
            self.send('D = ' + str(D))
            for i in range(3):
                G = curve.getPoint()
                self.ot(G)
                P = curve.mul(e , G)
                self.ot(P)
                self.send("do you know my e?")
                guess = int(self.recv())
                if guess == e:
                    self.send("oh no!")
                    self.send(flag)
                    return 0
                else:
                    self.send("Ha, I know you can't get it.")
    class ForkedServer(socketserver.ForkingMixIn, socketserver.TCPServer):
        pass
    if __name__ == "__main__":
        HOST, PORT = '0.0.0.0', 10000
        server = ForkedServer((HOST, PORT), Task)
        server.allow_reuse_address = True
        server.serve_forever()
其使用了一个随机生成参数的`MyCurve`并生成了随机的`e`，给我们三次交互的机会，每次交互会随机生成点`G`和点`P`并使用`OT`将这两个点的信息传递给我们，点`P`是`e`倍的点`G`，当我们给服务器正确的`e`的时候我们可以得到`flag`
这其实就是一个`离散对数问题`，我们首先关注服务器的参数，`MyCurve`所使用的`p`是`512`比特的，而`OT`中`RSA`的`n`是`2048`比特的，这样生成的点的`x`和`y`乘起来也没有`n`的大。那么可以参考2020hackergame的[不经意传输](https://github.com/USTC-Hackergame/hackergame2020-writeups/blob/master/official/%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/README.md)中的攻击方式来同时获取点的`x`和`y`坐标
之后便是如何通过点`G`和点`P`来获取`e`了，我们可以注意到`p-1`是光滑的
    sage: factor(p-1)
    2^21 * 3^10 * 7^4 * 11 * 13^2 * 17 * 19 * 29 * 31 * 37 * 43^3 * 47 * 71 * 83 * 89 * 97 * 223 * 293 * 587 * 631 * 709 * 761 * 1327 * 1433 * 1733 * 1889 * 2503 * 3121 * 6043 * 6301 * 49523 * 98429 * 140683 * 205589 * 1277369 * 1635649 * 5062909 * 45698189 * 67111151 * 226584089 * 342469397
那么我们可以通过[Pohlig-Hellman algorithm](https://ctf-wiki.org/crypto/asymmetric/discrete-log/discrete-log/#pohlig-hellman-algorithm)来解决`离散对数问题`并最终得到flag
###  EXP
`exp`有概率成功，如果报错或者答案错误多跑几次即可
    #!/usr/bin/env python
    import string, gmpy2
    from hashlib import sha256
    from pwn import *
    context.log_level = "debug"
    dic = string.ascii_letters + string.digits
    def solvePow(prefix,h):
        for a1 in dic:
            for a2 in dic:
                for a3 in dic:
                    for a4 in dic:
                        x = a1 + a2 + a3 + a4
                        proof = x + prefix.decode("utf-8")
                        _hexdigest = sha256(proof.encode()).hexdigest()
                        if _hexdigest == h.decode("utf-8"):
                            return x
    def getData():
        r.recvuntil("n = ")
        n = int(r.recvuntil("\n", drop = True))
        r.recvuntil("e = ")
        e = int(r.recvuntil("\n", drop = True))
        r.recvuntil("x0 = ")
        x0 = int(r.recvuntil("\n", drop = True))
        r.recvuntil("x1 = ")
        x1 = int(r.recvuntil("\n", drop = True))
        offset = 2  5:
                self._send('sorry, the number of users is out of limit')
                return 0
            self._send('please give me your name')
            userid = self._recv()
            if len(userid) > 20:
                self._send('your id can\'t be too long')
                return 0
            elif userid in self.passwd:
                self._send('the name has been used')
                return 0
            else:
                self._send('please give me your passwd(encrypted)')
                userpasswd = self.dec_recv()
                if len(userpasswd) > 11:
                    self._send('your password can\'t be too long')
                    return 0
                else:
                    self.passwd[userid] = userpasswd
                self._send('please give me your publickey')
                userpubkey = self._recv()
                try: