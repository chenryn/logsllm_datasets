From the attacker’s point of view, this feature is very
interesting.
If a password manager does not respect the
autocomplete value when storing the credentials but only
when later ﬁlling out the input ﬁelds, it is still susceptible
to attacks. In order to extract password data from clients,
the adversary can simply add a second form with the same
names and input types to the document, this time without
the autocomplete attribute, which is then ﬁlled with the
persisted credentials.
185Figure 1: Process of leveraging the password manager to steal stored credentials
In Section 5, we will discuss in detail how the browsers
that we examined behaved with respect to the aforemen-
tioned four dimensions.
3.4 Network-based attacks
In concurrent and independent work, Gonzalez et al. [9]
discovered a related attack. However, in contrast to our at-
tacker model, their attacker is located in the network and
can thus introduce content into every site of his choosing.
They developed a tool called Lupin which automatically in-
jects iframes for each site they want to steal credentials from
and then extracts the inserted data. However, if we assume
that the attacker cannot produce a valid TLS certiﬁcate for
any domain he wants to extract data from, this attacker can
only steal login data from sites that do not use HTTPS to
serve their login form. Thus, this attack scenario can be
thwarted if all pages use strict HTTPS for both the login
form and the URL the data is then sent to. Although this
attacker model is not the focus of our work, we evaluate the
suspecibility of current Web applications to these attacks in
Section 5.
4. MITIGATION STRATEGIES
Before presenting our solution approach in Section 6, we
brieﬂy discuss existing remedies and potential techniques,
which could be applied by application providers and end
users.
4.1 Server-side Mitigation
Several approaches exist, which could be adopted by Web
application providers to protect their users against the pre-
sented attacks. However, as we will discuss, each of these
techniques comes with certain drawbacks.
Switching to alternative authentication methods.
Instead of relying on form-based authentication, which
is susceptible to XSS attacks due to the fact that injected
JavaScript can access the value of the password ﬁeld, Web
application providers could switch to authentication pro-
cesses that utilize credentials which are out of the adver-
sary’s reach:
• HTTP authentication: HTML forms are not the only
available user interface component for password entry
oﬀered by Web browsers. If a Web application’s server
side requires HTTP authentication, signaled through
a 401 HTTP response [7], the user is presented with a
dedicated authentication dialog, which is realized with
UI components that are outside of the current docu-
ment’s DOM, and hence, out of reach for a JavaScript
attacker. Unfortunately, HTTP authentication is cum-
bersome to integrate the general workﬂow of Web ap-
plications: Form data is pushed by the browser to the
server on form submit, while HTTP authentication is
pulled, after the server notices an attempt to access
restricted information. Mixing the two paradigms po-
tentially leads to incoherent and confusing end user
interfaces.
• Client-side SSL authentication: Instead of using pass-
words, the application could switch to public key au-
thentication. Authenticating via client-side SSL cer-
tiﬁcates [5] is well supported by the browser’s SSL/TLS
implementation. However, such certiﬁcates have sig-
niﬁcant disadvantages over passwords in respect to de-
ployment (the application needs to outﬁt all users with
valid certiﬁcates), usability (handling browser-based
certiﬁcates is well out of the expertise of the average
Web end user), and portability (the certiﬁcates are en-
rolled in the browser, switching browsers or computers
requires certiﬁcate migration).
Moving password forms to a dedicated sub domain.
Furthermore, to mitigate the outlined threat, sites could
leverage the Same-Origin Policy’s protection capabilities.
If all password handling forms, and only these forms, are
hosted on a dedicated (sub)domain, XSS vulnerabilities of
the main application won’t compromise the password’s se-
curity. The injected JavaScript is executed under an origin
that diﬀers from the origin of the password-hosting docu-
ment, hence, the JavaScript has no access to the ﬁeld. Fur-
thermore, the password manager stores the password for the
domain value of the dedicated (sub)domain, thus, injecting
further password ﬁelds into the document of the injected
JavaScript has no eﬀect, as no password has been stored
for this document’s origin in the ﬁrst place. For apparent
reasons, choosing this path comes with the price of elevated
setup, deployment, and maintenance costs for the applica-
tion provider (e.g., valid SSL certiﬁcates for the subdomain
need to be acquired).
Disabling the password manager.
As covered earlier, using the HTML attribute autocom-
plete="off" [12], a Web application can prevent the browser
from storing the password in the ﬁrst place. The reasoning
behind this is that the data, which is entered into ﬁelds
which have this attribute set to off, is particularly sen-
sitive and should therefore neither be stored nor inserted
later. While being secure against the outlined attacks, this
technique causes the loss of the usability advantage of the
Password Manager Attacker Code 186password manager, which in turn (see Sec. 2.1) could lead to
situations in which end users potentially choose less secure
passwords.
4.2 End-user Protection
Currently, end-users have two options to protect them-
selves against XSS password theft:
For one, they can simply turn their browser’s password
manager oﬀ through switching the corresponding setting in
the browser’s conﬁguration [21]. While this is certainly the
safest choice, the user looses both the functionality gain and
the potential security advantage (see Sec. 2.1) of using a
password manager.
The second option is to switch to a third-party password
manager that requires explicit user interaction. If explicit
user interaction, such as clicking a button, is a prerequisite
for the system to ﬁll the password value, fully automatic
XSS-driven attacks are thwarted. Please note: It is crucial
to mention, that the UI component which triggers the re-
quired user interaction is positioned outside of the DOM of
the attacked page. Otherwise, the adversary can resort to
the ClickJacking attack variant (see Sec. 3.3) and undermine
the provided mitigation.
The primary focus of most third-party password managers
is on security and not on ease-of-use or transparency. For
instance, in it’s default conﬁguration, 1Password1 requires
the pressing of a predeﬁned key combination, followed with
the entry of the tool’s master password. Hence, they might
be not a viable option for end users that utilize password
managers foremost as a convenience feature.
5. EXPLORING THE PASSWORD
(MANAGER) LANDSCAPE
As explained above, several potential XSS attack patterns
on password managers exist. To examine the degree to which
these theoretic attacks are applicable with the currently de-
ployed password managers and Web sites, we conducted two
comprehensive studies. For one, we systematically examined
the built-in password managers of the current browser gen-
eration (see Sec. 5.1). Furthermore, we conducted a large
scale study on how password ﬁelds are used by existing ap-
plications (see Sec. 5.2).
5.1 Password managers
In this section we present the results of our experiments on
the behavior of diﬀerent modern browsers. Our tests were
aimed in the four diﬀerent dimensions previously discussed
in Section 3.3.
To ensure a broad coverage of internet users, we opted to
examine Google Chrome (version 31), Mozilla Firefox (ver-
sion 25), Opera (version 18), Safari (version 7), Internet Ex-
plorer (version 11) and the Maxthon Cloud Browser (version
3). Although the latter one might not be as well-known as
the other candidates, it is one of the options that is shown
to users installing the latest Windows versions. Hence, we
looked at the behavior of this browser along with the previ-
ously named.
Before investigating the behavioral changes when tamper-
ing with the form or the URLs the form was located in, we
ﬁrst analyzed the general ﬁll-in behavior of our test subjects
according to the speciﬁc attacks discussed in Section 3.3.
11Password: https://agilebits.com/onepassword
Filling only in the top frame.
To assess whether password managers would ﬁll out forms
only in top frames, we created a page that framed the orig-
inal, unchanged login page we had initially stored our cre-
dentials for. Apart from Internet Explorer, which refused
to insert any data, all browsers ﬁlled in the username and
password ﬁeld.
Explicit user interaction.
Next, we investigated whether a browser would actually
need any form of interaction from the user to ﬁll in pass-
words. Again, Internet Explorer was the (albeit positive)
outlier, being the only browsing engine that required any
form of interaction.
In Internet Explorer, the user has to
manually put the focus to the username ﬁeld and is then pre-
sented with a dropdown menu allowing him to select which
credentials he wants to insert. The user then has explicitly
click on an entry to trigger the browsers ﬁll-in action. Also,
this is done properly outside of the DOM, thus the Click-
Jacking attacker discussed in Section 3.3 can also not force
the ﬁlling of password ﬁelds.
URL matching.
We assume that the attacker wants to steal the creden-
tials from his victim in a stealthy manner. We consider the
following example: an application hosts its login at /login.
The attacker has found a XSS vulnerability at /otherpage
which he wants to abuse to steal the stored credentials.
Hence, if a password manager only supplies the password
to the exact URL it stored the passwords for, the attacker
would have to open a popup window or embed a frame to
the login page to steal the secret data. However, opening
a popup window is very suspicious and therefore not de-
sirable. Also, framing the login page in an invisible frame
might not work due to X-Frame-Options headers.
In our
study, which we discuss in Section 6.3, we found that only
8.9% of login pages make use of this header to ensure that
they are not framed. Thus, in our work, we wanted to de-
termine how easy it was to make password managers ﬁll in
the stored credentials into forms if the URL did not match
the one the password was originally stored for. To examine
the browsers’ behaviours, we created a simple Web appli-
cation with a login form. We visited this login and let the
password manager under investigation save the credentials
that we entered. We then created multiple other pages run-
ning under diﬀerent protocol (HTTP vs. HTTPS), diﬀerent
ports, diﬀerent (sub-)domains as well as changing paths to
determine what the implemented matching criteria were for
all our test subjects. In the following, we discuss the results
of the analysis of the aforementioned browsers.
• Google Chrome: Our tests showed that changing the
protocol, sub domain or port lead to the password to
not be ﬁlled in anymore.
In contrast, when visiting
a form running under a diﬀerent path, Chrome still
inserted the stored credentials. This leads us to reason
that Chrome stores the password alongside their origin
in the sense of the Same-Origin Policy, namely the
triple protocol, domain and port.
• Our second candidate was Firefox. Similar to the be-
haviour Chrome exhibited, Firefox also refused to ﬁll
out login ﬁelds if either protocol, (sub-)domain or port
were changed. It also behaved in a similar manner to
187Chrome with respect to a change in the path – still au-
tomatically setting the username and password ﬁelds
to the stored values.
• Both, Opera and Safari behaved in a similar manner.
With changed origins, they refused to ﬁll out forms,
whereas the path was not taken into consideration in
the decision whether to insert the stored credentials or
not.
• Internet Explorer:
In contrast to all the aforemen-
tioned, Microsoft’s Internet Explorer apparently stores
the complete URL of the form it saved the password
data for. In our tests, it showed to be the only browser
that did not insert stored credentials even if only the
path changed.
• Maxthon Cloud Browser: Alongside all the well-known
browsers we examined thus far, we also looked at the
password manager of the Maxthon Cloud Browser. Most
interestingly, the passwords were apparently only stored
coupled with the second-level domain they stemmed
from. In our tests, the browser would still ﬁll in pass-
word ﬁelds even if the protocol, sub domain, port or
path changed.
Summarizing, our tests showed that out of the most com-
monly used browsers on the Web, all but Internet Explorer
gladly ﬁll forms on any part of the same Web application,
whereas the application borders are determined by the Same-
Origin Policy. The Maxthon Cloud Browser even ﬁlls in
credentials if only the same second-level domain is visited –
ignoring both the protocol and the port of resource – making
it even easier for an attacker to extract the passwords from
its storage.
Form matching.
After having examined how browsers treat changes in the
URL with respect to their password managers, we analyzed
what kind of information on the actual form browsers would
store. To gain insight into this, we built another set of test
pages – this time with diﬀerent modiﬁcations to the login
form itself. Our test pages were diﬀerent from the original
form in diﬀerent aspects, which we discuss brieﬂy in the
following.
For the ﬁrst test case, we removed the action and the
method of the form. Our second modiﬁcation was the re-
moval of the names of all ﬁelds in the form, whereas the
third change was to only change the names of all ﬁelds rather
than removing them. For the next part of our analysis, we
removed the types from all ﬁelds, essentially resetting them
all to type=text. We then derived a minimal form as shown
in Listing 1, only consisting of two input ﬁelds with random
names, no action or method as well as no additional submit
buttons. After these changes to the form ﬁelds, we build
a ﬁnal testing page, setting the autocomplete attribute for
the password ﬁeld to oﬀ. According to the W3C speciﬁ-
cation [12], this value indicates the browser should neither
store the data inserted into that ﬁeld nor automatically ﬁll
it in later.
Utilizing these, we now discuss the matching criteria with
respect to the structure of the form presented to the pass-
word manager.
• Google Chrome: We observed that neither action nor
method of the form were criteria in the decision, whereas
the same held true for changes to the names of the
ﬁelds we provided. However, if we presented Chrome
with ﬁelds without any name, it would not provide the
credentials to the form. Chrome did not strictly ad-
here to the autocomplete setting of the password ﬁeld,
prompting the user to save the password nonetheless.
It did however adhere to the setting when inserting
the password into the form – nevertheless, we could
extract secret data by adding a second form, as de-
scribed in Section 3.3. Since the matching is done on
a structural basis, the minimal form shown in Listing 1
was suﬃcient for this attack.
• Firefox also only performed matching against a form’s
structure, not the content itself. In contrast to what we
had seen with Chrome, Firefox did however also insert
credentials into forms that only contained input ﬁelds
without names. Also unlike Chrome, Firefox adhered
to the autocomplete attribute – if either ﬁeld had this
set to oﬀ, Firefox would not store any data. Due to
these factors, injecting the minimal form would still
trigger the auto-ﬁll functionality of Firefox’s password
manager.
• Opera and Safari again behaved alike, ﬁlling in pass-
words into the minimal form but not into forms con-
taining only input ﬁelds without names. On our test
machine, a Macbook running OS X Mavericks, we dis-
covered that both Opera and Safari also use the OS X
keychain to store their passwords. Thus, after having
stored a password in Opera, Safari automatically ﬁlled
out our ﬁelds although we had not previously stored
a password in its database. While Opera – similar to
Chrome – also oﬀered to store passwords if at least one
of the posted ﬁelds did not have autocomplete set to
oﬀ, Safari behaved like Firefox and did not save any
data in that case. Again, the test subjects only per-
formed structural rather than content matching, lead-
ing to both of them also auto-ﬁlling the minimal form.
Contrary to Firefox, both browsers would not ﬁll input
ﬁelds without names.
• Internet Explorer: As explained in Section 5.1, Inter-
net Explorer was the only browser that required any
form of user interaction to ﬁll in the passwords. To
nevertheless check the functionality, we manually in-
teracted with the browser to ensure that it would ﬁll
in the username and password. In that, we discovered
that Internet Explorer applies matching criteria in the
same manner as Firefox, namely inserting passwords