### From the Attacker’s Perspective: Exploiting Password Managers

From an attacker's standpoint, this feature is particularly intriguing. If a password manager does not respect the `autocomplete` attribute when storing credentials but only when filling out input fields, it remains vulnerable to attacks. To extract password data from clients, an adversary can simply add a second form with the same names and input types to the document, this time without the `autocomplete` attribute, which will then be filled with the stored credentials.

**Figure 1: Process of Leveraging the Password Manager to Steal Stored Credentials**

In Section 5, we will provide a detailed analysis of how the browsers we examined behaved in relation to the four dimensions discussed earlier.

### 3.4 Network-based Attacks

In concurrent and independent research, Gonzalez et al. [9] discovered a related attack. However, their attacker model differs in that the attacker is located within the network and can inject content into any site of their choosing. They developed a tool called Lupin, which automatically injects iframes into targeted sites and extracts the inserted data. If the attacker cannot obtain a valid TLS certificate for the domain they wish to target, they can only steal login data from sites that do not use HTTPS for their login forms. Thus, this attack can be mitigated if all pages use strict HTTPS for both the login form and the URL to which the data is sent. Although this attacker model is not the primary focus of our work, we evaluate the susceptibility of current web applications to these attacks in Section 5.

### 4. Mitigation Strategies

Before presenting our solution approach in Section 6, we briefly discuss existing remedies and potential techniques that can be applied by application providers and end users.

#### 4.1 Server-side Mitigation

Several approaches can be adopted by web application providers to protect their users against the described attacks. However, each of these techniques has certain drawbacks.

- **Switching to Alternative Authentication Methods:**
  - **HTTP Authentication:** Instead of relying on form-based authentication, which is susceptible to XSS attacks due to the ability of injected JavaScript to access the password field, web application providers could switch to HTTP authentication. This method uses a dedicated authentication dialog outside the current document's DOM, making it inaccessible to JavaScript attackers. However, integrating HTTP authentication into the general workflow of web applications can be cumbersome, as it requires a pull-based approach rather than the push-based form submission.
  - **Client-side SSL Authentication:** Another option is to use public key authentication via client-side SSL certificates. This method is well-supported by browser SSL/TLS implementations but has significant disadvantages in terms of deployment, usability, and portability. Users need to be equipped with valid certificates, and handling them can be complex for the average user.

- **Moving Password Forms to a Dedicated Subdomain:**
  - To mitigate the threat, sites can leverage the Same-Origin Policy by hosting all password handling forms on a dedicated (sub)domain. This way, XSS vulnerabilities in the main application do not compromise the security of the passwords. The injected JavaScript runs under a different origin and thus has no access to the password field. Additionally, the password manager stores the password for the dedicated (sub)domain, so injecting additional password fields into the document has no effect. However, this approach increases setup, deployment, and maintenance costs for the application provider, such as acquiring valid SSL certificates for the subdomain.

- **Disabling the Password Manager:**
  - By using the HTML attribute `autocomplete="off"`, a web application can prevent the browser from storing the password. This method is secure against the described attacks but sacrifices the usability advantage of the password manager, potentially leading to users choosing less secure passwords.

#### 4.2 End-user Protection

Currently, end-users have two options to protect themselves against XSS password theft:

- **Turning Off the Browser’s Password Manager:**
  - Users can disable the browser’s password manager through the browser settings. While this is the safest choice, it results in the loss of the functionality and potential security benefits of using a password manager.

- **Using a Third-party Password Manager:**
  - Users can switch to a third-party password manager that requires explicit user interaction, such as clicking a button, to fill the password value. This thwarts fully automatic XSS-driven attacks. It is crucial that the UI component triggering the required user interaction is positioned outside the DOM of the attacked page to prevent ClickJacking attacks. Most third-party password managers prioritize security over ease-of-use and transparency, making them less viable for users who primarily use password managers for convenience.

### 5. Exploring the Password (Manager) Landscape

To examine the degree to which the theoretical XSS attacks are applicable to currently deployed password managers and websites, we conducted two comprehensive studies. We systematically examined the built-in password managers of modern browsers (Section 5.1) and conducted a large-scale study on how password fields are used by existing applications (Section 5.2).

#### 5.1 Password Managers

In this section, we present the results of our experiments on the behavior of different modern browsers, focusing on the four dimensions discussed in Section 3.3. We tested Google Chrome (version 31), Mozilla Firefox (version 25), Opera (version 18), Safari (version 7), Internet Explorer (version 11), and the Maxthon Cloud Browser (version 3).

- **Filling Only in the Top Frame:**
  - We created a page that framed the original login page where we had initially stored our credentials. All browsers except Internet Explorer filled in the username and password fields.

- **Explicit User Interaction:**
  - We investigated whether browsers require user interaction to fill in passwords. Internet Explorer was the only browser that required the user to manually focus on the username field and select the credentials from a dropdown menu, ensuring that the ClickJacking attacker cannot force the filling of password fields.

- **URL Matching:**
  - We created a simple web application with a login form and tested the browsers' behaviors under different protocols, ports, (sub-)domains, and paths. Our findings were:
    - **Google Chrome:** Changes in protocol, subdomain, or port prevented the password from being filled in, but a change in path did not.
    - **Firefox:** Similar to Chrome, changes in protocol, (sub-)domain, or port prevented the password from being filled in, but a change in path did not.
    - **Opera and Safari:** Behaved similarly to Chrome and Firefox, refusing to fill forms with changed origins but ignoring the path.
    - **Internet Explorer:** Stored the complete URL and did not insert stored credentials even if only the path changed.
    - **Maxthon Cloud Browser:** Filled in password fields even if the protocol, subdomain, port, or path changed, as long as the second-level domain was the same.

- **Form Matching:**
  - We analyzed how browsers treat changes in the form structure. We created test pages with different modifications to the login form, including removing the action and method, changing or removing field names, and setting the `autocomplete` attribute to "off." Our findings were:
    - **Google Chrome:** Did not strictly adhere to the `autocomplete` setting but adhered to it when inserting the password. A minimal form with random field names was sufficient for the attack.
    - **Firefox:** Performed matching based on form structure and adhered to the `autocomplete` attribute. Injecting the minimal form triggered the auto-fill functionality.
    - **Opera and Safari:** Behaved similarly, filling in passwords into the minimal form but not into forms with unnamed input fields. Both browsers also used the OS X keychain to store passwords, leading to cross-browser auto-filling.
    - **Internet Explorer:** Required user interaction and applied matching criteria similar to Firefox, inserting passwords only if the form structure matched.

In summary, our tests showed that most commonly used browsers, except Internet Explorer, readily fill forms on any part of the same web application, while the Maxthon Cloud Browser even fills in credentials if only the same second-level domain is visited, making it easier for an attacker to extract passwords.