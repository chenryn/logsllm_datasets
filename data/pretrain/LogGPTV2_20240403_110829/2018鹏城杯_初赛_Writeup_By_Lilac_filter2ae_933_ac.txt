      get_shell()
      # get_libc()
      # sn(p32())
      # pass
      # get_key()
## WEB
### Three body 1
  1. 下载 /flag.txt 得到 flag  
### Myblog
  1. PHP 本地文件包含导致任意文件读取
  2. 通过扫描发现存在 YWJvdXQ=.php
  3. 读取该文件
  4. /index.php?flag=php://filter/convert.base64-encode/resource=YWJvdXQ%3D
    ';
            echo file_get_contents($$falg);
        }
        else{
            echo 'don`t give up';
        }
    }
  1. 绕过即可读取 flag.txt
    platypus@platypus:~$ curl 'http://58.20.46.148:26111/YWJvdXQ=.php?sign=&filename=php://input&falg=f&f=flag.txt'
    Congratulation!flag{nev1r_g1ve_8p_aer}
### Shadow
  1. 读取 Flask config 得到 SECRET_KEY
  2. 发现客户端 SESSION 中存在字段 is_admin
  3. 通过 Flask 伪造 SESSION 修改 is_admin
  4. 上传 XML 文件利用 XXE 读取 Flag  
## REV
### happy
程序打开一看肯定是动态解密代码的，用strace试了一下没有strace反调，没有的话用gdb动态调试。用`catch syscall
write`来捕获write调用，找到代码解密后的位置之后dump分析之。  
发现加密过程有点像DES，在内存中得感觉像是SBOX的数组，搜一下果然是DES的SBOX，先解一下看。
    from Crypto.Cipher import DES
    dest = [39L, 66L, 172L, 166L, 75L, 144L, 164L, 125L, 71L, 64L, 204L, 69L, 127L, 161L, 44L, 188L, 131L, 82L, 94L, 81L, 96L, 249L, 238L, 79L, 61L, 104L, 221L, 222L, 232L, 116L, 250L, 26L, 83L, 34L, 91L, 19L, 199L, 229L, 122L, 94L, 88L, 128L, 176L, 101L, 153L, 241L, 91L, 79L]
    key="hAppysad"
    des = DES.DESCipher(key)
    print des.decrypt(''.join(map(chr, dest)))
其中的key在dump中的程序找不到，但可以在调试时得到。  
解出flag:  
### flow
pyexe的逆向，用unpy2exe得到pyc文件后用uncompyle6得到源代码。源代码被混淆过，手动重命名去混淆得到如下的代码
    import sys, os, hashlib, time, base64, random, itertools
    from flag import flag
    from pwn import *
    class Cipher:
        def __init__(self, public=None, lenth=16):
            self.lenth = lenth
            self.public = public
            val = hashlib.md5(self.public.encode('utf-8')).hexdigest()
            self.vala = hashlib.md5(val[0:16].encode('utf-8')).hexdigest()
            self.valb = hashlib.md5(val[16:32].encode('utf-8')).hexdigest()
            self.valc = ''
        def encode(self, string):
            self.valc = hashlib.md5(str(1234).encode('utf-8')).hexdigest()[32 - self.lenth:32]
            string = '0000000000' + hashlib.md5((string + self.valb).encode('utf-8')).hexdigest()[0:16] + string
            self.result = ''
            self.docrypt(string)
            return str(self.valc + base64.b64encode(self.result))
        def docrypt(self, string):
            string_lenth = len(string)
            self.result = ''
            sbox = list(range(256))
            randval = []
            cryptval = self.vala + hashlib.md5((self.vala + self.valc).encode('utf-8')).hexdigest()
            val_lenth = len(cryptval)
            for i in range(255):
                randval.append(ord(cryptval[i % val_lenth]))
            for i in range(255):
                sidx = 0
                sidx = (sidx + sbox[i] + randval[i]) % 256
                tmp = sbox[i]
                sbox[i] = sbox[sidx]
                sbox[sidx] = tmp
            for i in range(string_lenth):
                j = sidx = 0
                j = (j + 1) % 256
                sidx = (sidx + sbox[j]) % 256
                tmp = sbox[j]
                sbox[j] = sbox[sidx]
                sbox[sidx] = tmp
                self.result += chr(ord(string[i]) ^ sbox[(sbox[j] + sbox[sidx]) % 256])
    def block_chng(block):
        W = 4
        perm = range(W)
        random.shuffle(perm)
        while len(block) % (2 * W):
            block += '.'
        for i in xrange(100):
            block = block[1:] + block[:1]
            block = block[0::2] + block[1::2]
            block = block[1:] + block[:1]
            res = ''
            for sidx in xrange(0, len(block), W):
                for lsboxl in xrange(W):
                    res += block[sidx:sidx + W][perm[lsboxl]]
            block = res
        return block
    if __name__ == '__main__':
        rc = Cipher('sdfgowormznsjx9ooxxx')
        string = '1234'
        string = block_chng(string)
        st = rc.encode(string)
        print st
连接服务器拿到密文后使用密文进行解密，解密难度不大，最后一步参考了[这篇文章](https://pwnthemole.github.io/crypto/2018/09/16/jordantunisiactftransposed.html)  
最终写出解密脚本
    import sys, os, hashlib, time, base64, random, itertools
    import random
    import itertools
    from CaR import *
    enc = '0036dbd8313ed055NJD5H1Ufzl75Uffc1cp9LhnZx9Ydj6VpRRfquCuDqt9x3ku7ovvsgE3WdikR1I8T08N+dIoyipit+q/lALO35Pww'
    enc = base64.b64decode(enc[16:])
    rc = Cipher('sdfgowormznsjx9ooxxx')
    rc.valc = hashlib.md5(str(1234).encode('utf-8')).hexdigest()[32 - 16:32]
    rc.docrypt(enc)
    msg2 = rc.result[26:]
    # msg2 = 'd73g.669l78fce0114217d}fa91a7e754.fff{12'
    for perm in itertools.permutations(range(4)):
        msg = msg2
        for i in xrange(100):
            msg = msg[1:] + msg[:1]
            msg = msg[0::2] + msg[1::2]
            msg = msg[1:] + msg[:1]
            res = ""
            for j in xrange(0, len(msg), 4):
                for k in xrange(4):
                    res += msg[j:j+4][perm[k]]
            msg = res
            if "flag" in msg:
                print(msg)
得到flag  
### ctopia
本题的游戏还不错，一开始先运行游戏玩了一下，在第一幕结束的时候显示Decrypt Process 0%。然后开始分析程序。  
题目很善良，所有调试信息都保留了，可以在mainloop中找到解密的逻辑，当游戏达到某些条件时，游戏会释放一部分key，调用Key::writekey函数将key写入resource/secret/secret.key文件中，然后调用解密。因此直接在调试的时候手动调用writekye(1),
writekye(2), writekye(3), writekye(4)和FinalDecrypt就可以得到flag  
### badlock
题目使用C++实现了一个虚拟机，相对于用C实现的虚拟机, 分析起来会费劲一些。  
分析每一条指令，写出反汇编器如下
    #-*- coding: utf-8
    # stack is code in fact
    # val_r2_stack is ip address
    stack = [8, 0, 20, 8, 1, 0, 8, 2, 1, 8, 7, 9, 8, 8, 0, 8, 9, 0, 1, 9, 8, 1, 8, 2, 3, 7, 8, 516, 65532, 0, 5, 3, 9, 3, 1, 0, 260, 10, 0, 5, 4, 1, 1, 4, 3, 1, 4, 4, 10, 5, 1, 12, 5, 4, 11, 6, 1, 1, 1, 2, 3, 6, 5, 260, 65525, 0, 516, 1, 0, 255, 0, 0, 9, 0, 0, 255, 0, 0, 0]
    inst = {
        1: "add",
        2: "sub",
        3: "cmp_mem_z1_nz2",
        4: "add_val_r2_stack",
        5: "mov",
        6: "store_val_r2_stack",
        7: "load_val_r2_stack",
        8: "movi",
        9: "write_err",
        10: "mov_p2m",
        11: "mov_k2m",
        12: "xor",
        13: "check_reg",
        255: "exit"
    }
    flag = 0
    for i in range(0, len(stack), 3):
        if i+2 >= len(stack):
            break
        opcode = stack[i]
        op1 = stack[i+1]
        op2 = stack[i+2]
        if not inst.has_key(opcode):
            cond = opcode >> 8
            opcode &= 0xff
        else:
            cond = 0
        if cond:
            print(cond)
        print("0x%02x: %s 0x%x, 0x%x" % (i, inst[opcode], op1, op2))
虽然反汇编的效果一般，但是加密逻辑很简单，可以据此写出注册机如下
    key = [46L, 38L, 45L, 41L, 77L, 103L, 5L, 68L, 26L, 14L, 127L, 127L, 125L, 101L, 119L, 36L, 26L, 93L, 51L, 81L]
    acc = 36
    res = []
    for i in range(20):
        res.append(((i + acc) * 2) ^ key[i])
    for j in range(4):
        for i in range(19, 0, -1):
            res[i] ^= res[i-1]
    print ''.join(map(chr, res))
运行结果如下  
## CRYPTO
### easyCrypto
这里的加密方法有点类似[最近比赛的一道密码题](https://xz.aliyun.com/t/2830),不过
prev_pt,prev_ct都是iv,没有变换,直接利用解密脚本.  
> flag:pcbctf{345f3_asss3_loasd_aswew}
### MixMix
程序是rsa加密,其中e=3,返回密文和一半长度的d,其中d通过xor变换加密了,xor的密钥是伪随机出来的`random.getrandbits(1024)`这里提供了624个之前的随机数,可以[预测](https://github.com/eboda/mersenne-twister-recover/blob/master/MTRecover.py)出伪随机的状态,从而得到xor的密钥,得到d的低位,由于`e*d+1==k*phi`,用n代替phi则`0 flag{m1x_flag_for_alot_of_challenges_rsa_block_stream_ctf}
### 签名伪造
这题本身是个[ElGamal forge](https://kitctf.de/writeups/bkp2015/wood-island)题目,出题人疏忽,可是题目的s2h函数有漏洞,可以直接伪造admin用户,从而拿到(r,s),得到admin凭证,从而获取flag.  
漏洞函数`def s2h(s): return ''.join([hex(ord(c)).replace('0x', '') for c in
s])`,这个可以将字符通过的`replace('0x',
'')`连接起来可以很轻松绕过admin的判断,比如传入admi\x06\x0e,则经过s2h函数,则将6e连接起来了.  
> flag:flag{25478-92GSEF-jsaafa-I85266}
## MISC
### Welcome
> flag{ausjnhjajfjakjw45}
### Traffic Light
gif一共一千多帧,通过红灯绿灯黄灯分割,其中红灯为1,路灯为0,黄灯为每个字符的分隔符.先[online](https://ezgif.com/split/ezgif-1-823180199d90.gif)分割gif,然后python处理.  
得到flag:flag{Pl34s3_p4y_4tt3nt10n_t0_tr4ff1c_s4f3ty_wh3n_y0u_4r3_0uts1d3}
### Quotes
密文 `My+mission+in+life+is+not+mer ely+to+survive+but to+thrive+and+to+do+so+w
ith+s ome+pass i on+some+compass ion+so me+humor+and+some+style`
通过空格分割,每串字符串的字符个数是字母[a-z]的索引,统计个数,得到:wordgames  
最终尝试:flag{word games}