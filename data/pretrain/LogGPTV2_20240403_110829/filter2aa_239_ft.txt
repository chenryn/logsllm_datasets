      Title="Multi Trigger" Height="300" Width="300">
34.4.3 数据触发器
如果绑定到控件上的数据满足指定的条件，就激活数据触发器。下面的例子使用
Book类，它根据图书的出版社显示不同的内容。
Book类定义Title和Publisher属性，还重载ToString（）方法（代码文件
TriggerSamples/Book.cs）：
    public class Book
    {
      public string Title { get; set; }
      public string Publisher { get; set; }
      public override string ToString() => Title;
    }
在XAML代码中，给ListBoxItem元素指定了一个样式。该样式包含DataTrigger元素，
它绑定到用于列表项的类的Publisher属性上。如果Publisher属性的值是Wrox 
Press,
Background就设置为Red。对于Dummies和Wiley出版社，把Background分别设置为Yellow
和DarkGray（代码文件TriggerSamples/DataTriggerWindow.xaml）：
在代码隐藏文件中，把列表list1初始化为包含几个Book对象（代码文件
TriggerSamples/DataTriggerWindow.xaml.cs）：
    public DataTriggerWindow()
    {
      InitializeComponent();
      list1.Items.Add(new Book
      {
        Title = "Professional C# 6 and .NET Core 1.0",
        Publisher = "Wrox Press"
      });
      list1.Items.Add(new Book
      {
        Title = "C# 5 All-in-One for Dummies",
        Publisher = "For Dummies"
      });
      list1.Items.Add(new Book
      {
        Title = "HTML and CSS: Design and Build Websites",
        Publisher = "Wiley"
      });
    }
运行应用程序，ListBoxItem元素就会根据Publisher的值进行格式化，如图34-11所
示。
图34-11
使用DataTrigger时，必须给MultiDataTrigger设置多个属性（类似于Trigger和
MultiTrigger）。
 注意： 
数据触发器在数据绑定更改时，更新用户界面（实现
INotifyPropertyChanged接口）。后面的“实时成型”一节包括一个示例。
34.5 菜单和功能区控件
许多数据驱动的应用程序都包含菜单和工具栏或功能区控件，允许用户控制操作。在
WPF 4.5中，也可以使用功能区控件，所以这里介绍菜单和功能区控件。
本节会创建两个新的WPF应用程序BooksDemoMenu和BooksDemoRibbon，以及一个
库BooksDemoLib，本章将一直使用它——它不仅包含菜单和功能区控件，还包含
Commanding和数据绑定。这个应用程序会显示一本书、一个图书列表和一个图书网格。
操作由与命令关联的菜单或功能区控件来启动。
34.5.1 菜单控件
在WPF中，菜单很容易使用Menu和MenuItem元素创建，如下面的代码段所示，其中
包含两个主菜单File和Edit，以及一个子菜单项列表。字符前面的_标识了可不使用鼠标而
直接访问菜单项的特定字符。使用Alt键可以使这些字符可见，并使用该字符访问菜单。
其中一些菜单项指定了一个命令，如下一节所示（代码文件
BooksDemoMenu/MainWindow.xaml）：
运行应用程序，得到的菜单如图34-12所示。菜单目前还不能用，因为命令还没有激
活。
图34-12
34.5.2 功能区控件
菜单控件的替代品是功能区控件。Microsoft Office 2007是Microsoft引入新开发的功能
区控件后发布的第一个应用程序。引入这个新功能之后不久，Office以前版本的许多用户
抱怨在新的UI中找不到需要的操作按钮了。新Office用户没有使用过以前的用户界面，却
在新的UI中得到了很好的体验，很容易找到以前版本的用户难以找到的操作按钮。
当然，目前功能区控件在许多应用程序中都很常见。在Windows 8中，功能区在随操
作系统发布的工具中，例如Windows资源管理器、画图和写字板。
WPF功能区控件在System.Windows.Controls.Ribbon名称空间中，需要引用程序集
system. Windows.Controls.Ribbon。
图34-13显示了示例应用程序的功能区控件。在顶行上，标题左边是快速访问工具
栏，第二行中最左边的项是应用程序菜单，其后是两个功能区标签Home和Ribbon
Controls。选择了Home标签，会显示两个组Clipboard和Show。这两个组都包含一些按钮
控件。
图34-13
功能区控件在下面的代码段中定义。Ribbon元素的第一个子元素由
QuickAccessToolBar属性定义。这个工具栏包含两个引用了小图像的RibbonButton控件，
这些按钮允许用户直接、快速、方便地执行操作（代码文件
BooksDemoRibbon/MainWindow.xaml）：
为了直接把快速访问工具栏中的这些按钮放在窗口的边框中，需要把基类改为
RibbonWindow，而不是Window类（代码文件BooksDemoRibbon/MainWindow.xaml.cs）：
    public partial class MainWindow : RibbonWindow
    {
修改带后台代码的基类时，还需要修改XAML代码，以使用RibbonWindow元素：
应用程序菜单使用ApplicationMenu属性定义。应用程序菜单定义了两个菜单项——
第一个显示一本书；第二个关闭应用程序：
在应用程序菜单的后面，使用RibbonTab元素定义功能区控件的内容。该标签的标题
用Header属性定义。RibbonTab包含两个RibbonGroup元素，每个RibbonGroup元素都包含
RibbonButton元素。在按钮中，可以设置Label来显示文本，设置SmallImageSource或
LargeImageSource属性来显示图像：
第二个RibbonTab元素仅用于演示可以在功能区控件中使用的不同控件，例如文本
框、复选框、组合框、微调按钮和图库元素。图34-14打开了这个选项卡。
              One
              Two
              Text Box 
图34-14
34.6 Commanding
Commanding是一个WPF概念，它在动作源（如按钮）和执行动作的目标（如处理程
序方法）之间创建松散耦合。这个概念基于Gang of Four中的命令模式。在WPF中，事件
是紧密耦合的。编译包含事件引用的XAML代码，要求代码隐藏已实现一个处理程序方
法，且在编译期间可用。而对于命令，这个耦合是松散的。
  注意： 命令模式是一种行为设计模式，它分离客户和命令的接收者，更便于
进行单元测试。
要执行的动作用命令对象定义。命令实现ICommand接口。WPF使用的命令类是
RoutedCommand及其派生类RoutedUICommand。RoutedUICommand类定义一个ICommand
接口未定义的附加Text属性，这个属性可以在用户界面中用作文本信息。ICommand定义
Execute（）和CanExecute（）方法，它们都在目标对象上执行。
命令源是调用命令的对象。命令源实现ICommandSource接口。这种命令源的例子有
派生自ButtonBase的按钮类、Hyperlink和InputBinding。KeyBinding和MouseBinding是派生
自InputBinding的类。命令源有一个Command属性，其中可以指定实现ICommand接口的命
令对象。在使用控件（如单击按钮）时，这会激活命令。
命令目标是实现了处理程序的对象，用于执行动作。通过命令绑定，定义一个映射，
把处理程序映射到命令上。命令绑定指定在命令上调用哪个处理程序。命令绑定通过
UIElement类中实现的CommandBinding属性来定义。因此派生自UIElement的每个类都有
CommandBinding属性。这样，查找映射的处理程序就是一个层次化的过程。例如，在
StackPanel中定义的一个按钮可以激活命令，而StackPanel位于ListBox中，ListBox位于
Grid中。处理程序在该树型结构的某个位置上通过命令绑定来指定，如Window的命令绑
定。下面修改BooksDemoRibbon项目的实现方式，改为使用命令替代事件模型。
34.6.1 定义命令
.NET提供了返回预定义命令的类。ApplicationCommands类定义了静态属性New、
Open、Close、Print、Cut、Copy、Paste等。这些属性返回可用于特殊目的的
RoutedUICommand对象。提供了命令的其他类有NavigationCommands和
MediaCommands。NavigationCommands提供了用于导航的常见命令，如GoToPage、
NextPage和PreviousPage, MediaCommand提供的命令可用于运行媒体播放器，媒体播放器
包含Play、Pause、Stop、Rewind和Record等按钮。
定义执行应用程序域的特定动作的自定义命令并不难。为此，创建一个
BooksCommands类，它通过ShowBook和ShowBookslist属性返回一个RoutedUICommand。
也可以给命令指定一个输入手势，如KeyGesture或MouseGesture。这里指定一个
KeyGesture，用Alt修饰符定义B键。因为输入手势是命令源，所以按Alt+B组合键会调用
该命令（代码文件BooksDemoLib/Commands/BooksCommands.cs）：
    public static class BooksCommands
    {
      private static RoutedUICommand s_showBook;
      public static ICommand ShowBook =>
        s_showBook ? ? (s_showBook = new RoutedUICommand("Show Book",
            nameof(ShowBook), typeof(BooksCommands)));
      private static RoutedUICommand s_showBooksList;
      public static ICommand ShowBooksList
      {
        get
        {
          if (s_showBooksList == null)
          {
          s_showBooksList = new RoutedUICommand("Show Books",
            nameof(ShowBooksList), typeof(BooksCommands));
          s_showBooksList.InputGestures.Add(new KeyGesture(Key.B,
            ModifierKeys.Alt));
          }
          return s_showBooksList;
        }
      }
      // etc.
    }
34.6.2 定义命令源
每个实现ICommandSource接口的类都可以是命令源，如Button和MenuItem。在前面
创建的功能区控件中，把Command属性赋予几个RibbonButton元素，例如快速访问工具
栏，如下所示（代码文件BooksDemoRibbon/MainWindow.xaml）：