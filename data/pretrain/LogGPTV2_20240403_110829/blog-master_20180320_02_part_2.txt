          select res[xx][yy] from     
            (select generate_series(((((x-1)/dim)::int)*dim)+1, ((((x-1)/dim)::int)*dim)+dim) xx) t1,     
            (select generate_series(((((y-1)/dim)::int)*dim)+1, ((((y-1)/dim)::int)*dim)+dim) yy) t2    
        ))::int[];  
	return false;    
      end if;    
    end loop;  
  end loop;  
  return true;  
end;  
$$ language plpgsql strict;  
```  
例子  
```  
postgres=# select check_sudoku(sudoku), sudoku from gen_rand_sudoku() sudoku;  
NOTICE:  relation "tmp_sudoku" already exists, skipping  
NOTICE:  {1,2,3,4,5,6,7,8,9}  
 check_sudoku |                                                                                        sudoku                                                                                           
--------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 t            | {{7,5,1,8,2,4,3,9,6},{8,2,4,3,9,6,7,5,1},{3,9,6,7,5,1,8,2,4},{5,1,7,2,4,8,9,6,3},{2,4,8,9,6,3,5,1,7},{9,6,3,5,1,7,2,4,8},{1,7,5,4,8,2,6,3,9},{4,8,2,6,3,9,1,7,5},{6,3,9,1,7,5,4,8,2}}  
(1 row)  
postgres=# select check_sudoku(sudoku), sudoku from gen_rand_sudoku() sudoku;  
NOTICE:  relation "tmp_sudoku" already exists, skipping  
NOTICE:  {1,2,3,4,5,6,7,8,9}  
 check_sudoku |                                                                                        sudoku                                                                                           
--------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 t            | {{4,5,3,8,7,6,2,9,1},{2,9,1,4,5,3,8,7,6},{8,7,6,2,9,1,4,5,3},{3,4,5,6,8,7,1,2,9},{1,2,9,3,4,5,6,8,7},{6,8,7,1,2,9,3,4,5},{5,3,4,7,6,8,9,1,2},{9,1,2,5,3,4,7,6,8},{7,6,8,9,1,2,5,3,4}}  
(1 row)  
postgres=# select check_sudoku('{{8,2,1,6,9,3,7,5,4},{6,9,3,7,5,4,8,2,1},{7,5,4,8,2,1,6,9,3},{2,1,8,9,3,6,5,4,7},{9,3,6,5,4,7,2,1,8},{5,4,7,2,1,8,9,3,6},{1,8,2,3,6,9,4,7,5},{3,6,9,4,7,5,1,8,2},{4,7,5,1,8,2,3,6,0}}'::int[]);  
NOTICE:  {1,2,3,4,5,6,7,8,9}  
NOTICE:  {1,2,3,4,5,6,7,8,9}, {0,1,2,3,4,5,6,7,8}  
 check_sudoku   
--------------  
 f  
(1 row)  
```  
4、生成随机可解数独，抹去N个值。  
```  
create or replace function gen_sudoku_question(int) returns setof int[] as $$   
declare   
  sudo int[] := gen_rand_sudoku();    -- 生成一个随机有解数独  
  tmp int[];  
  dims int := array_length(sudo, 1);  -- 数独任意一边的长度  
  rand int;                           -- 随机位置  
  n int;                              -- 替换N个数值计数  
begin  
  return next sudo;  
  loop  
    -- 随机开始位置  
    rand := 1 + (random()*(dims^2 - 1))::int;  
    select array_agg(arr) from  
      (  
        select   
          array_agg(case when g=rand then 0 else o end order by g) arr  
        from   
          (select row_number() over() g, unnest as o from  unnest(sudo)) t  
        group by (g-1)/dims  
      ) t  
    into tmp;   
    sudo := tmp;  
    select count(*) into n from unnest(sudo) t where t=0;  
    if n >= $1 then  
      return next sudo;  
      return;  
    end if;  
    n := n+1;  
  end loop;  
end;  
$$ language plpgsql strict;  
```  
例子  
```  
postgres=# select gen_sudoku_question(20);  
NOTICE:  relation "tmp_sudoku" already exists, skipping  
                                                                                  gen_sudoku_question                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 {{6,4,9,1,2,8,5,3,7},{5,3,7,6,4,9,1,2,8},{1,2,8,5,3,7,6,4,9},{9,6,4,8,1,2,7,5,3},{7,5,3,9,6,4,8,1,2},{8,1,2,7,5,3,9,6,4},{4,9,6,2,8,1,3,7,5},{3,7,5,4,9,6,2,8,1},{2,8,1,3,7,5,4,9,6}}  
 {{6,4,9,1,2,8,5,3,0},{5,0,7,6,4,0,1,2,8},{0,2,0,5,3,7,6,4,0},{9,6,4,8,1,0,0,5,0},{0,5,3,9,0,4,8,1,2},{8,0,0,7,5,3,0,6,4},{4,9,6,2,8,1,0,7,5},{3,7,5,0,0,0,2,8,1},{0,8,1,3,7,0,4,9,6}}  
(2 rows)  
postgres=# select gen_sudoku_question(50);  
NOTICE:  relation "tmp_sudoku" already exists, skipping  
                                                                                  gen_sudoku_question                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 {{6,9,1,3,7,8,4,2,5},{4,2,5,6,9,1,3,7,8},{3,7,8,4,2,5,6,9,1},{1,6,9,8,3,7,5,4,2},{5,4,2,1,6,9,8,3,7},{8,3,7,5,4,2,1,6,9},{9,1,6,7,8,3,2,5,4},{2,5,4,9,1,6,7,8,3},{7,8,3,2,5,4,9,1,6}}  
 {{0,0,0,3,7,8,4,0,5},{4,0,5,0,0,0,0,7,8},{0,7,0,4,0,5,0,0,1},{0,0,9,8,0,7,5,4,0},{0,0,0,0,0,0,0,0,7},{8,3,0,0,0,2,0,0,9},{0,0,0,0,0,0,2,0,0},{0,5,4,0,1,6,0,0,0},{7,0,3,2,0,0,0,0,0}}  
(2 rows)  
```  
格式化  
```
postgres=# select (row_number() over ()-1)/9 as group, * from (select regexp_split_to_table(rtrim(ltrim(gen_sudoku_question(20)::text, '{{'),'}}'),'},{') ) t;
NOTICE:  relation "tmp_sudoku" already exists, skipping
 group | regexp_split_to_table 
-------+-----------------------
     0 | 3,2,1,4,8,7,9,6,5
     0 | 4,8,7,9,6,5,3,2,1
     0 | 9,6,5,3,2,1,4,8,7
     0 | 2,1,3,8,7,4,6,5,9
     0 | 8,7,4,6,5,9,2,1,3
     0 | 6,5,9,2,1,3,8,7,4
     0 | 1,3,2,7,4,8,5,9,6
     0 | 7,4,8,5,9,6,1,3,2
     0 | 5,9,6,1,3,2,7,4,8
     1 | 3,2,1,0,8,7,9,6,5
     1 | 4,8,7,9,6,5,3,2,1
     1 | 9,0,0,3,2,1,4,8,7
     1 | 2,1,3,0,0,4,6,0,9
     1 | 8,7,4,6,5,0,2,1,0
     1 | 6,0,9,0,1,0,8,0,4
     1 | 1,3,2,7,4,0,0,9,6
     1 | 7,4,0,0,0,6,0,3,2
     1 | 5,9,6,1,3,2,7,0,0
(18 rows)
```
输入参数1-81，数值越大，难度越高。   
## 小结  
使用模板+映射的方法，生成数独效率大幅提高。  
PostgreSQL的语法、plpgsql功能非常丰富，处理起来还是不错的。  
对接plpython, pljava, plR, plv8, ....等，可以在数据库内部实现更加复杂的逻辑。  
https://www.postgresql.org/docs/devel/static/external-pl.html  
https://www.postgresql.org/docs/devel/static/external-projects.html   
如果要生成16\*16的数独，方法类似。   
其他算法, 精确覆盖算法:  https://zhuanlan.zhihu.com/p/67447747   
## 参考    
[《PostgreSQL 生成任意基数数独 - 1》](../201803/20180319_01.md)     
[《PostgreSQL 生成任意基数数独 - 2》](../201803/20180320_01.md)     
[《PostgreSQL 生成任意基数数独 - 3》](../201803/20180320_02.md)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")