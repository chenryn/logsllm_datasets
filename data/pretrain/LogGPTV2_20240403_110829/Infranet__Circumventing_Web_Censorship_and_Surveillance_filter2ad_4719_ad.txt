this, the system could give the user a certain degree of con-
trol over which visible requests are transmitted. One ex-
ample is for the requester to conﬁrm each URL with the
user before sending it. If the user ﬁnds the URL strange, he
can force the requester to send a different URL that com-
municates the same message fragment. These overrides in-
troduce noise into the requester’s sequence. However, the
requester can encode the message with an error correcting
code that allows for such noise.
Another solution would be to ensure that multiple URLs
map to each message fragment the requester wants to send
to give the user a choice of which speciﬁc visible URL to
request. We conjecture that with sufﬁcient redundancy, a
user will frequently be able to ﬁnd a plausible URL that
sends the desired message fragment.
By targeting multiple users, a censor may learn about
many Infranet users as a result of discovering one Infranet
user. Alternatively, a censor could become an Infranet re-
quester and compare its behavior against other suspected
users. We defend against these types of attacks by using
requester-speciﬁc shared secrets.
5.2 Disruptive Attacks
Because all trafﬁc between an Infranet requester and re-
sponder passes through the censor, the censor can disrupt
Infranet tunnels by performing active attacks on HTTP traf-
ﬁc, such as ﬁltering, transaction tampering, and session
tampering.
5.2.1 Filtering
A censor may block access to various parts of the Internet
based on IP address or preﬁx block, DNS name, or port
number. Additionally, censors can block access to content
by ﬁltering out Web pages that contain certain keywords.
For instance, Saudi Arabia is reportedly trying to acquire
such ﬁltering software [10].
Infranet’s success against ﬁltering attacks depends on the
pervasiveness of Infranet responders throughout the Web.
Because Infranet responders are discovered out-of-band, a
censor cannot rapidly learn about Infranet responders by
crawling the Web with an automated script. While a cen-
sor could conceivably learn about responders out-of-band
and systematically block access to these machines, the out-
of-band mechanism makes it more difﬁcult for a censor to
block access to all Infranet responders. The wider the de-
ployment of responders on Web servers around the world,
the more likely it is that Infranet will succeed.
Note that because the adversary may ﬁlter trafﬁc based
on content and port number, it is relatively easy for the ad-
versary to block SSL by ﬁltering SSL handshake messages.
Thus, Infranet provides far better defense against ﬁltering
than a system that simply relies on SSL.
5.2.2 Transaction Tampering
A censor may attempt to disrupt Infranet tunnel communi-
cation by modifying HTTP requests and responses in ways
that do not affect HTTP protocol conformance. For exam-
ple, the adversary may change ﬁelds in HTTP request or
response headers (e.g., changing the value of the Date:
ﬁeld), reorder ﬁelds within headers, or even remove or add
ﬁelds. Infranet is resistant to these attacks because the tun-
nel protocol does not rely on modiﬁcations to the HTTP
header.
As described in Section 4.1, the Infranet requester must
present a unique user identiﬁer with each HTTP request in
order to be recognized across multiple HTTP transactions.
A requester could send its user ID in a Web cookie with each
HTTP request. However, if the censor removes cookies,
we suggest maintaining client state by embedding the user
ID (or some token that is a derivative of the user ID) in
each URL requested by the client. Of course, to preserve
the requester’s deniability, the responder must rewrite all
embedded links to include this client token.
The censor may modify the returned content itself. For
example, it might insert or remove embedded links on a re-
quested Web page or ﬂip bits in requested images. Link
insertion and deletion does not affect tunnel communica-
tions that use a codebook because the client sends mes-
sages upstream according to this codebook. Attacks on
image content could disrupt the correct Infranet communi-
cation. Traditional robust watermarking techniques defend
against such attacks. Infranet detects and blocks such dis-
ruptions by embedding the name of the served URL in each
response.
5.2.3 Session Tampering
An adversary might attempt to disrupt tunnel communica-
tion by interfering with sequences of HTTP requests. A
censor could serve a requester’s visible HTTP request from
its own cache rather than forwarding this request to the In-
franet responder. To prevent such an attack, the Infranet re-
quester must ensure that its HTTP requests are never served
from a cache. One way to do this is to always request
unique URLs. We consider this requirement fairly reason-
able: many sites that serve dynamic content (e.g., CGI-
based pages, webcams, etc.) constantly change their URLs.
Another option is to use the Pragma: no-cache di-
rective, although a censoring proxy will likely ignore this.
Alternatively, a censor might insert, remove, or reorder
HTTP requests and responses. If a censor alters HTTP re-
quest patterns, the Infranet responder might see errors in the
received message. However, Infranet responders include the
name of the served URL in each response stream, thus en-
abling the requester to detect session corruption and restart
the transmission. In the case of range-mapping, upstream
transmission errors will be reﬂected in the split-strings re-
turned by the responder. The requester can also defend
against these attacks with error correction techniques that
recover from the insertion, deletion, and transposition of
bits [20].
6 Implementation
Our implementation of Infranet consists of two compo-
nents: the Infranet requester and the Infranet responder. The
requester functions as a Web proxy and is responsible for
modulating a Web browser’s request for hidden content as
a sequence of visible HTTP requests to the Infranet respon-
der. The responder functions as a Web server extension and
is responsible for demodulating the requester’s messages
and delivering requested content. The requester and respon-
der utilize a common library, libinfranet, that imple-
ments common functionality, such as modulation, hiding,
and cryptography. In this section, we discuss our implemen-
tation of the Infranet requester and responder, as well as the
common functionality implemented in libinfranet.
6.1 Requester
We implemented the Infranet requester as an asyn-
chronous Web proxy in about 2,000 lines of C++. We used
libtcl for the asynchronous event-driven functionality.
The requester sends visible HTTP requests to an Infranet
responder, based on an initial URL at the responder, the re-
sponder’s public key, and optionally an initial key IKEY.
The requester queues HTTP requests from the user’s
browser and modulates them sequentially. If the requester
0
10
2 3 4 5 6 7 8 9
1
10
2 3 4 5 6 7 8 9
2
10
2 3 4 5 6 7 8 9
3
0 1
Version
Type Z
Empty
Fragment Length
bandwidth is scarce and transmitting a header might cre-
ate recognizable modulation patterns, the requester does not
prepend a header to its messages.
Fragment Offset
Message Length
Figure 9. Responder header format.
knows about more than one responder, it can service re-
quests in parallel by using multiple responders.
In our implementation, visible HTTP requests from the
requester are generated entirely automatically. As discussed
in Section 5.1, we could also allow the user to participate in
link selection to provide increased covertness.
6.2 Responder
We implemented the Infranet responder as an Apache
module, mod infranet in about 2,000 lines of C++,
which we integrated with Apache 1.3.22 running on Linux
2.4.2. The Apache request cycle consists of many phases,
including URI translation, content-handling, and authoriza-
tion [22]. Our mod infranet module augments the con-
tent handler phase of the Apache request loop. The respon-
der processes requests as it normally would but also inter-
prets them as modulated hidden messages.
An Infranet responder must maintain state for a requester
across multiple HTTP transactions. The current implemen-
tation of the responder uses Web cookies to maintain client
state because this mechanism was simple to implement; in
the future, we plan to implement the URL rewriting mech-
anism outlined in Section 5 because of its stronger defense
against passive discovery attacks. The responder uses the
REQUESTERTOKEN cookie, which contains a unique iden-
tiﬁer, to associate HTTP requests to a particular requester.
For each requester, the responder maintains per-requester
state, including which FSM state the requester is in, the
modulation function the requester is using, the shared se-
cret SKEY, and message fragments for pending messages.
Figure 9 shows the header that the responder prepends to
each message fragment. Version is a 4-bit ﬁeld that speciﬁes
which version of the Infranet tunnel protocol the responder
is running. Type speciﬁes the type of message that the pay-
load corresponds to (e.g., modulation function update, re-
quested hidden content, etc.). Z is a 1-bit ﬁeld that indicates
whether the requested content in the payload is compressed
with gzip (this is the case for HTML ﬁles but not images).
Fragment Length refers to the length of the message frag-
ment in the payload in bytes, and Fragment Offset speci-
ﬁes the offset in bytes where this fragment should be placed
for reassembly of the message. Message Length speciﬁes
the total length of the message in bytes. Because upstream
6.3 Steganography and Compression
Upon receiving a request,
the responder determines
whether it can embed hidden content in the response. Cur-
rently, mod infranet only embeds data in JPEG images.
If the responder determines that it is capable of hiding infor-
mation in the requested data, it uses outguess to embed
the hidden information using SKEY. To reduce the amount
of data that the responder must send to the requester, the
responder compresses HTML ﬁles with gzip [5] before
embedding them into images.
6.4 Cryptography
The Infranet requester generates the 160-bit shared se-
cret SKEY using /dev/random. SKEY is encrypted us-
ing the RSA public key encryption implementation in the
OpenSSL library [15]. This ciphertext is 128 bytes, which
imposes a large communication overhead. However, be-
cause the ciphertext is a function of the length of the re-
quester’s public key, it is difﬁcult to make this ciphertext
shorter. One option to ameliorate this would be to use an
implementation of elliptic curve cryptography [13].
7 Performance Evaluation
In this section, we examine Infranet’s performance. We
evaluate the overhead of the tunnel setup operation and
the performance of upstream and downstream communi-
cation. Finally, we estimate the overhead imposed by
mod infranet on normal Web server operations.
All of our performance tests were run using Apache
1.3.22 with mod infranet on a 1.8 GHz Pentium 4 with
1 GB of RAM. For all performance tests, we ran an Infranet
requester and a Perl script that emulates a user’s browser
from the same machine.
7.1 Tunnel Setup
Tunnel setup consists of two operations: upstream trans-
mission of SKEY encrypted with the responder’s public-key,
and downstream transmission of U	e . In our implemen-
tation, SKEY is 160 bits long and the corresponding cipher-
text is 128 bytes, proportional to the length of the respon-
der’s public key. Transmission of U	e  is equivalent to a
single document transmission. The transmission of an ini-
tial modulation function, if one is used, requires one addi-
tional downstream transmission.
s
L
R
U
n
e
d
d
h
i
l
l
a
f
o
n
o
i
t
c
a
r
F
Ignoring traversal probabilities (mean: 5.9)
Using traversal probabilities (mean: 6.4)
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0
1
2
3
7
Number of requests to transmit hidden URL
4
5
6
20
15
10
5
s
t
s
e
u
q
e
r
f
o
r
e
b
m
u
N
8
9
10
0
1
2
90th percentile
50th percentile
64
128
4
32
Number of possible next requests at each page
16
8
Figure 10. Number of visible HTTP requests required to
modulate hidden URLs with and without link traversal
probabilities for range-mapping, assuming 8 links per
page (k = 8). The expected number of visible HTTP
requests required to modulate a message is independent
of whether the link traversal probabilities are used.
7.2 Upstream Communication
An important measure of upstream communication per-
formance is how many HTTP requests are required to mod-
ulate a typical message. We focus our evaluation on the
range-mapping scheme described in Section 4.2.
We evaluated the performance of range-mapping using a
Web proxy trace containing 174,100 unique URLs from the
Palo Alto IRCache [8] proxy on January 27, 2002.3 When
we weight URLs according to popularity, the most popular
10% of URLs account for roughly 90% of the visible HTTP
trafﬁc. This is signiﬁcant, since modulating the most popu-
lar 10% of URLs requires a small number of visible HTTP
requests.
A requester can achieve statistical deniability by pattern-
ing sequences of HTTP requests after those of innocuous
Web clients. As described in Section 4.2.3, this is done by
assigning split-string ranges in C according to the pairwise
link traversal probabilities . To evaluate the effect of us-
ing the distribution , we modulated 1,740 requests from C,
both using and ignoring , assuming 8 outgoing links per
page.
Figure 10 shows that assigning ranges based on link
traversal probabilities does not affect the expected number
of visible HTTP requests required to modulate a hidden re-
quest. This follows directly from properties of arithmetic
codes [31].
In both cases, over half of hidden messages
3These traces were made available by National Science Foundation
grants NCR-9616602 and NCR-9521745, and the National Laboratory for
Applied Network Research.
Figure 11. The median and 90th percentile of number of
requests to modulate a message is very small even for
small numbers of outgoing links (k) on each page.
required 4 visible HTTP requests, and no more than 10
requests were needed for any message. Therefore, using
traversal probabilities to determine the size of ranges in C
provides statistical deniability without hurting performance.
Setting link traversal probabilities to 1=k, we evaluated
the effect of the number of links on a page, k, on upstream
communication performance. Figure 11 shows that 90% of
messages from C can be modulated in 10 visible HTTP re-
quests or fewer, even for k as small as 4.
In the trace we used for our experiments, the binary en-
tropy of the frequency distribution of requested URLs is
16.5 bits. Therefore, the expected number of requests re-
 g k   2. The em-
quired to transmit a URL from C is   16:5
pirical results shown in Figure 11 agree with this analytical
result.
To evaluate the performance of range-mapping on real