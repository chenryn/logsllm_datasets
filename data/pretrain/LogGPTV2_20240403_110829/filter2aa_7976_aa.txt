readelf
===
用于显示elf格式文件的信息
## 补充说明
**readelf命令** 用来显示一个或者多个elf格式的目标文件的信息，可以通过它的选项来控制显示哪些信息。这里的elf-file(s)就表示那些被检查的文件。可以支持32位，64位的elf格式文件，也支持包含elf文件的文档（这里一般指的是使用ar命令将一些elf文件打包之后生成的例如lib*.a之类的“静态库”文件）。 
这个程序和objdump提供的功能类似，但是它显示的信息更为具体，并且它不依赖BFD库(BFD库是一个GNU项目，它的目标就是希望通过一种统一的接口来处理不同的目标文件)，所以即使BFD库有什么bug存在的话也不会影响到readelf程序。 
运行readelf的时候，除了-v和-H之外，其它的选项必须有一个被指定。 
###  ELF文件类型
 **种类型的ELF文件：** 
1.  可重定位文件:用户和其他目标文件一起创建可执行文件或者共享目标文件,例如lib*.a文件。 
2.  可执行文件：用于生成进程映像，载入内存执行,例如编译好的可执行文件a.out。 
3.  共享目标文件：用于和其他共享目标文件或者可重定位文件一起生成elf目标文件或者和执行文件一起创建进程映像，例如lib*.so文件。 
 **ELF文件作用：** 
ELF文件参与程序的连接(建立一个程序)和程序的执行(运行一个程序)，所以可以从不同的角度来看待elf格式的文件： 
1.  如果用于编译和链接（可重定位文件），则编译器和链接器将把elf文件看作是节头表描述的节的集合,程序头表可选。 
2.  如果用于加载执行（可执行文件），则加载器则将把elf文件看作是程序头表描述的段的集合，一个段可能包含多个节，节头表可选。 
3.  如果是共享文件，则两者都含有。 
 **ELF文件总体组成：**  
elf文件头描述elf文件的总体信息。包括：系统相关，类型相关，加载相关，链接相关。 
*   系统相关表示：elf文件标识的魔术数，以及硬件和平台等相关信息，增加了elf文件的移植性,使交叉编译成为可能。 
*   类型相关就是前面说的那个类型。 
*   加载相关：包括程序头表相关信息。 
*   链接相关：节头表相关信息。 
###  选项
```shell
-a 
--all 显示全部信息,等价于 -h -l -S -s -r -d -V -A -I. 
-h 
--file-header 显示elf文件开始的文件头信息. 
-l 
--program-headers  
--segments 显示程序头（段头）信息(如果有的话)。 
-S 
--section-headers  
--sections 显示节头信息(如果有的话)。 
-g 
--section-groups 显示节组信息(如果有的话)。 
-t 
--section-details 显示节的详细信息(-S的)。 
-s 
--syms        
--symbols 显示符号表段中的项（如果有的话）。 
-e 
--headers 显示全部头信息，等价于: -h -l -S 
-n 
--notes 显示note段（内核注释）的信息。 
-r 
--relocs 显示可重定位段的信息。 
-u 
--unwind 显示unwind段信息。当前只支持IA64 ELF的unwind段信息。 
-d 
--dynamic 显示动态段的信息。 
-V 
--version-info 显示版本段的信息。 
-A 
--arch-specific 显示CPU构架信息。 
-D 
--use-dynamic 使用动态段中的符号表显示符号，而不是使用符号段。 
-x  
--hex-dump= 以16进制方式显示指定段内内容。number指定段表中段的索引,或字符串指定文件中的段名。 
-w[liaprmfFsoR] or 
--debug-dump[=line,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges] 显示调试段中指定的内容。 
-I 
--histogram 显示符号的时候，显示bucket list长度的柱状图。 
-v 
--version 显示readelf的版本信息。 
-H 
--help 显示readelf所支持的命令行选项。 
-W 
--wide 宽行输出。 
@file 可以将选项集中到一个文件中，然后使用这个@file选项载入。 
```
###  实例
先给出如下例子：
 **1.对于可执行文件形式的elf格式文件：** 
1)查看可执行程序的源代码如下： 
```shell
root@localhost [test]$ cat main.cpp 
#include  
using std::cout; 
using std::endl; 
void my_print(); 
int main(int argc, char *argv[]) 
{ 
        my_print(); 
        cout 
using std::cout; 
using std::endl; 
void printInfo() 
{ 
    cout<<"hello"<<endl; 
} 
```
2)编译如下： 
```shell
[root@localhost test]$ g++ -c myfile.cpp 
[root@localhost test]$ g++ -shared -fPCI -o libmy.so myfile.o 
[root@localhost test]$ ar -r libmy.a myfile.o 
ar: creating libmy.a 
```
3)编译之后，查看生成的文件： 
[root@localhost test]$ ls -l 
总计 44 
```shell
-rw-r--r-- 1 quietheart quietheart 2154 07-08 16:14 libmy.a 
-rwxr-xr-x 1 quietheart quietheart 5707 07-08 16:08 libmy.so 
-rwxr-xr-x 1 quietheart quietheart  117 07-08 16:06 myfile.cpp 
-rwxr-xr-x 1 quietheart quietheart   63 07-08 16:08 myfile.h 
-rw-r--r-- 1 quietheart quietheart 2004 07-08 16:08 myfile.o 
libmy.a  libmy.so  myfile.cpp  myfile.h  myfile.o 
```
这里，分别生成目标文件myfile.o，共享库文件libmy.so，和静态库文件libmy.a。 
基于以上可执行文件和库，这里给出一些常用的命令。 
 **读取可执行文件形式的elf文件头信息：** 
```shell
[root@localhost test]$ readelf -h main 
ELF Header: 
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32 
  Data:                              2's complement, little endian 
  Version:                           1 (current) 
  OS/ABI:                            UNIX - System V 
  ABI Version:                       0 
  type:                              exec (Executable file) 
  Machine:                           Intel 80386 
  Version:                           0x1 
  Entry point address:               0x8048580 
  Start of program headers:          52 (bytes into file) 
  Start of section headers:          3232 (bytes into file) 
  Flags:                             0x0 
  Size of this header:               52 (bytes) 
  Size of program headers:           32 (bytes) 