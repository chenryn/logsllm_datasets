事件可能对组织具有广泛帮助的想法并不新鲜。事故研究长期以来一直强调事故作为指针的价值（参见Woods等人的著作，2010年），质量理论鼓励将事故和窗户用于过程和问题（参见
Deming，1982年）。使用故障报告（Allspaw，2012）可以提供对系统及其操作的独特洞见。
这里的关键思想是：复杂性和持续的变化，这使得在"理解"现有系统方面做出的大范围的、一般性的努力相对低效。作为对比，事件指向需要重新校准系统的心理模型的特定位置。事件提供了及时的、高度相关的关于问题分布位置的信息。
我们承认，这种观点与通常用来管理事件的方法截然相反。在许多组织中，事件被收集、简化为数据库条目，并很快被遗忘。"数字化"管理要求快速解决事件，并将事件发生频率减少到某个级别。这样做的效果是忽略（或至少降低）了事件的价值，破坏了更深入、更彻底调查问题的起点。具有讽刺意味的是，如此昂贵的"数字化"数据很快就被抛弃了。   
# 这一切意味着什么？
事件非常频繁。对于许多系统，组织确认的事件速率是*每天*一两次。我们知道有些地方的频率要高得多。在许多公司中，应对事件被当成是时间和资源的消耗。显然，如果这种情况将继续下去，随着系统的复杂性和重要性的增加，事件的后果可能会倍增。由于系统和环境在不断变化，因此事件的影响、性质和影响都会发生变化。然而，同样真实的是，事件是有价值的信息来源，可以在适当的条件下和努力地获得。
## 事件将继续
  这种情况不会好转。相反，问题可能会变得更加困难。随着越来越多的业务功能嵌入到系统中，并且日常业务操作变得更加依赖于系统操作，系统操作的风险会不断上升。这些系统的复杂性不断增加。试图驯服这种复杂性有时会改变人类操作员的注意力，但却没有也不会消除操作员理解正在发生的事情的必要性。
与其他行业一样，技术进步似乎同时减少了重大事故的数量，同时也*增强了*其后果。结果是，重大事件的发生频率较低，但一些事件确实发生，其影响比过去更大。现代系统的连通性和响应性使得干扰传播比过去更快、更广泛。
我们注意到，许多正在开发大型系统的机构都会含蓄地假定：未来的系统将理论上"无事故"。这是一个危险的技术幻想，可以说是一个魔咒。各种系统的历史，特别是信息技术的历史，都与这个想法相反。事件将继续发生，威胁始终存在，并要求我们关注。未能建立具有适合事件管理的系统的系统（技术和组织）可以说是失职的。
## 事件将导致代价
  事故的成本难以衡量，但肯定可能很大。周详的计算表明，一家主要航空公司的一天宕机可能造成超过2亿美元的损失。实际上无法计算已有事件造成的代价，例如
2012 年 Knight Capital 的崩溃。
事故的直接代价包括对收入的直接影响、响应成本等。[#some_direct_costs_of_incidents](#some_direct_costs_of_incidents)列出了其中的一些。
事件的一些直接代价
+-----------------------------------+-----------------------------------+
| 事件                              | 导致代价                          |
+===================================+===================================+
| 宕机时间                          | -   收入损失                      |
|                                   |                                   |
|                                   | -   服务条款对应的罚金            |
|                                   |                                   |
|                                   | -   恢复工作的成本                |
+-----------------------------------+-----------------------------------+
| 响应                              | -   应对事故的工作人员的薪酬      |
|                                   |                                   |
|                                   | -   将                            |
|                                   | 员工的注意力转移到事件的可能代价  |
|                                   |                                   |
|                                   | -   实施事后应对步骤的代价        |
+-----------------------------------+-----------------------------------+
| 组织开销                          | -   维护事件跟踪系统              |
+-----------------------------------+-----------------------------------+
| 监管                              | -   合规性报告                    |
|                                   |                                   |
|                                   | -   经济处罚                      |
|                                   |                                   |
|                                   | -   开发/运营中的法规干预         |
+-----------------------------------+-----------------------------------+
: 事件的一些直接代价
虽然这些费用当然很大，但事故的间接代价同样令人不安。[#some_indirect_costs_of_incidents](#some_indirect_costs_of_incidents)显示了其中一些代价。声誉受损、分心、脆弱，以及我们称之为"发展阻力"，都不容易量化。即便如此，这些事故的间接代价也可能造成严重损害。同样，这里还有一个具有讽刺意味的品质：现有代码库对于成功操作的重要性如此之大，以至于由于担心破坏该基础而避免修改。由该代码库引起的（或与该代码库相关的）任何事件都强化了这种恐惧。随着时间的推移，因为担心改动老代码带来的问题，留在组织中愿意处理它的人数也会减少。
事件的一些间接成本
+-----------------------------------+-----------------------------------+
| 事件                              | 导致代价                          |
+===================================+===================================+
| 声誉受损                          | -   客户对产品和公司失去信心      |
|                                   |                                   |
|                                   | -   其他产品和公司获得竞争优势    |
|                                   |                                   |
|                                   | -   定价的下行压力                |
+-----------------------------------+-----------------------------------+
| 组织分心                          | -   管理层需要在解决问题          |
|                                   | 和"处理"事件方面发挥更积极的作用  |
|                                   |                                   |
|                                   | -   事                            |
|                                   | 件纳入（并可能改变）内部办事日程  |
+-----------------------------------+-----------------------------------+
| 更加脆弱                          | -   害怕触                        |
|                                   | 发隐藏漏洞或引入新漏洞，导致不愿  |
|                                   | 修复、迁移、重构旧代码或基础架构  |
+-----------------------------------+-----------------------------------+
| 开发受阻                          | -   适应新情况的代价更加不确定    |
|                                   |                                   |
|                                   | -   控制更改以防止失败（CA        |
|                                   | B、代码冻结等）的努力会削弱敏捷性 |
|                                   |                                   |
|                                   | -   技术人员对管理层失去信心      |
|                                   | ，谋划秘密的实践机制，或离开公司  |
+-----------------------------------+-----------------------------------+
: 事件的一些间接成本
特别重要的是，组织寻求管理脆弱性造成的发展拖累。改变"审查"（或"咨询"）委员会，这是企图避免未来失败的组织结构。虽然这种机制确实可能阻止一些考虑不周的变化，但它带来的负担可能很大。这些委员会消耗宝贵的资源，造成解决问题的延误，导致版本功能太过集结，甚至会产生官僚体制问题（Hirschhorn，1998年；第61页）。
尽管这些代价是真实的，但它们很难量化，并且可能被管理层无视。
从管理角度来看，事件最好被视为对系统性能的意外投资。管理者面临的挑战是找到从事故中获得最大投资回报
（ROI） 的方法。  
## 事件模式将发生变化
  系统的复杂性和周围环境的多样性继续增加。将建立新的连接，并切断旧的连接。事件的模式也必然会发生变化；就如同财务免责声明说的："过去的表现并不能保证未来的收益。"
尽管在事件跟踪系统上投入了大量资金，但几乎没有证据表明这些方法可以预测未来故障的轨迹或性质。对于较大的系统，相关的行政官僚机构几乎没有产生什么价值。相反，它似乎在很大程度上起到类似锚的用处：船长希望这种机制能保持组织有一个安全的盼望。
## 事件指向特定的校准问题和位置
校准问题（见[#calibration_problem](calibration_problem)）是一个基本挑战。成功排除故障、修复和修改系统需要系统的准确模型。复杂性和变化可确保任何系统模型都过时。任何单一个体（人或机器）都无法保持此类系统的准确模型。相反，需要对系统进行故障排除、修复和修改，需要不断努力提高座席模型的准确性。
但是，现代系统的规模之大，使得维护校准的任何一般性努力都徒劳无功。没有人能阅读和消化所有的代码，所有的手册，所有的协议，组成一个现代系统。相反，我们需要将可用于重新校准的有限资源集中在最相关的方面。