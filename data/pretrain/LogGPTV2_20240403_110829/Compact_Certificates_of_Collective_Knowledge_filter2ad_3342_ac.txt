save bandwidth, because of overlapping entries. Moreover,
because higher-weight entries in the sigs and attestors
lists are more likely to be revealed, sorting attestors by
weight before committing to it will likely provide more
overlap in Merkle paths and thus will reduce the total proof
size. We implement this optimization in Section VII.
• Aggregatable vector commitments (see [57] and references
therein) allow one to combine multiple proofs πp into one,
reducing the size of the certiﬁcate (we do not implement
this optimization, because it comes at a considerable
computational cost; instead, we use a Merkle tree for
Cattestors).
V. Security
In this section, we ﬁrst prove security of the Pcompcert scheme
given in Section IV, and then discuss concrete parameter
choices.
A. Security Proof
The noninteractive protocol Pcompcert deﬁned in Section IV
is essentially the result of applying Merkle Trees [75] and
the Fiat-Shamir [45] transform (similarly to Micali’s CS
Proofs [77]) to the interactive protocol Pinteractive described
in Figure 1. Security intuition is provided by Lemma 1. The
rest is technicalities.
Theorem 1. The protocol Pcompcert is a compact certiﬁcate
system with knowledge error
(cid:18) provenWeight
(cid:19) numReveals
+
1
2
· Q2
2λ
+ Inseccom(t) ,
signedWeight
e < Q ·
630
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
Prover
Pinteractive
Veriﬁer
Compute sigs and
signedWeight as in P
sigs, signedWeight
Compute ij = IntToInd(coinj)
for each j
{coinj}numReveals−1
j=0
{ij}numReveals−1
j=0
Reject if signedWeight ≤ provenWeight.
Reject if |sigs| (cid:44) |attestors|
Compute numReveals as in V.
Choose numReveals values coinj
uniformly from the range [0, signedWeight)
(right boundary excluded)
For each j, check that
sigs[ij].L ≤ coinj < sigs[ij].L + attestors[ij].weight
and sigs[ij].sig is valid on M under attestors[ij].pk
Fig. 1. Protocol Pinteractive (§V-A). Protocol Pcompcert (§IV) is essentially the result of applying Merkle Trees and the Fiat-Shamir transform to Pinteractive.
where λ is the output length of the hash function used in the
Merkle tree, Q = 2q is the number of random oracle queries1
made by the adversary, t is the running time of the adversary,
and Inseccom(t) is the insecurity of the vector commitment
used to produce Cattestors (Section II-A).
Proof. First, consider the following relation R of pairs.
Let an instance x = (attestors, M, provenWeight). For
a list of signatures w, the pair (x, w) ∈ R if and only
if (attestors, M, w, provenWeight) is suﬃciently weighty
(Section III).
We ﬁrst study a (rather ineﬃcient) Interactive Oracle Proof
(IOP) Pinteractive for this relation R, in which the on common
input x, the prover will prove knowledge of w such that
(x, w) ∈ R. An IOP [10, §4] is an interactive proof that is
best viewed as a multi-round analogue of a Probabilistically
Checkable Proof (PCP): a prover and a veriﬁer exchange
messages, but the veriﬁer reads only a small (randomly chosen)
portion of each veriﬁer message. In our case, the prover
messages are simply uniformly random coins, and thus the
protocol is public-coin.
Lemma 1. The protocol Pinteractive
is a
public-coin interactive oracle proof of knowledge (as de-
ﬁned in [10, §4.2]) for R with knowledge error e =
(provenWeight/signedWeight)numReveals.
Proof. Completeness is self-evident, and all that we need to
show is the proof of knowledge property. Indeed, to extract
w, simply remove the L ﬁeld from every entry of sigs and
output the result. It remains to show that if the veriﬁer accepts
with probability , then the resulting (x, w) ∈ R (i.e., the total
weight of valid signatures is at least provenWeight) with
probability at least  − e.
(Figure 1)
1For easier analysis in terms of Q, we assume, without loss of generality,
that the adversary always runs the veriﬁcation algorithm on the proof it
outputs, making the necessary random oracle queries in the process.
Consider sigs sent by the prover in the ﬁrst message.
The prover can lie about the L values of some (or all)
elements of sigs, but not about their weight or the cor-
rectness of their signatures. The important feature of the L
values for security is not their correctness, but rather their
ﬁxity once the ﬁrst message is sent by the prover. Fixing
sigs[i].L for a given i ensures that the prover can use the
validity of sigs[i].sig in response to some coinj only
if sigs[i].L ≤ coinj < sigs[i].L + attestors[i].weight.
Thus, no matter what sigs[i].L is set to, the total amount
of the range [0, signedWeight) that sigs[i] can cover is
limited to attestors[i].weight. Therefore, after the ﬁrst
message is sent, if the total weight of attestors whose signatures
are valid in sigs is less than provenWeight,
then the
probability, for each j, that there exists an ij for that will sat-
isfy the veriﬁer is less than provenWeight/signedWeight.
Thus,
the prover will convince the
veriﬁer for all numReveals values of coinj
is less than
(provenWeight/signedWeight)numReveals = e.
the probability that
interactive.
Therefore, either the prover’s ﬁrst message makes the
knowledge extractor succeed, or the prover has to get very
lucky (probability less than e) with the veriﬁer’s coins. By
the union bound, the prover’s success probability is less than
(cid:3)
that of the knowledge extractor plus e.
We can modify Pinteractive to send the second prover message
as a map rather than a list (i.e., in arbitrary order and with
duplicates removed, with the veriﬁer ﬁguring out which set
element to use for which coinj). The analysis remains the
same. Let us call this modiﬁed protocol P(cid:48)
As shown by [10, Theorem 7.1], the process of applying
Merkle Trees (which shorten the ﬁrst message) together with
the Fiat-Shamir transformation (which replaces interaction
with random oracles) to a public-coin interactive oracle proof
of knowledge results in a NIROPK, and thus the required
knowledge extractor per Deﬁnition 1 exists (we will analyze
its knowledge error shortly).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
631
To show that Pcompcert is a compact certiﬁcate scheme, we
need to show the existence of a knowledge extractor according
to Deﬁnition 2. We can essentially use the knowledge extractor
given by [10, Theorem 7.1]. The most salient diﬀerence
between Pcompcert and the transformation of [10] applied to
P(cid:48)
interactive is that in Pcompcert, the veriﬁer does not have all of x.
Instead, attestors is replaced by Cattestors, and the prover
provides only those elements of attestors that the veriﬁer
needs. Since Cattestors is trusted (per Section III; from a
security point of view, this is equivalent to having Cattestors
computed by the veriﬁer), any prover who convinces the
veriﬁer to accept an incorrect element of attestors would
break the security of the vector commitment; this accounts for
the Inseccom term in the knowledge error given in Theorem 1.
There are other, minor diﬀerences between our transfor-
mation from P(cid:48)
interactive to Pcompcert and the IOP-to-NIROPK
transformation of [10, §6]. The diﬀerences arise because of
the speciﬁcs of Pinteractive, which enable us to simplify the
transformation slightly; these simpliﬁcations do not aﬀect
the extractor construction in any signiﬁcant way. A reader
unfamiliar with the details of [10, §6] may safely skip this
list.
• As a consequence of replacing attestors with Cattestors
in the veriﬁer input, the veriﬁer does not hash all of x, but
also replaces attestors by Cattestors. This has no eﬀect
on the security proof.
• The prover’s second message, which is short, is sent in the
clear rather than Merkle-hashed. This does not decrease
security.
• We do not compute hash values that tie together multiple
rounds of Merkle roots and veriﬁer randomness, because
Merkle hashing is applied only once (so chaining of roots
is not needed) and the veriﬁer needs randomness only once.
This only simpliﬁes the hash chains that are needed to
analyze security.
• We do not have the prover compute the ﬁnal hash value
σk of the alleged veriﬁer queries (which any prover can do
correctly anyway by expending one more random oracle
query); instead, we assume (Footnote 1) that the prover
makes at least the same random oracle queries as the veriﬁer.
To analyze the knowledge error of Pcompcert, we will apply the
same analysis as in [10, Thm. 7.1]. The analysis shows that
if the attestors vector is used instead of Cattestors, the
knowledge extractor will succeed unless the adversary gets
a lucky choice of the sequence {coinj}numReveals−1
in one
of its Q queries to Hash (which happens with probability at
most
j=0
(cid:18) provenWeight
(cid:19) numReveals
Q ·
signedWeight
by Lemma 1 and the union bound), or gets a collision of
random oracle outputs (which happens with probability at most
632
2Q2/2λ).2 Because we replace attestors by Cattestors, we
1
have to also add the probability Inseccom that the adversary
breaks the vector commitment.
that
We thus get
(cid:18) provenWeight
certiﬁcate scheme with soundness error
e < Q ·
(cid:19) numReveals
the protocol Pcompcert
+
signedWeight
is a compact
1
2
· Q2
2λ
+ Inseccom ,
(cid:3)
as claimed.
B. Choosing Parameters for Desired Security
The knowledge error e of Theorem 1 has three terms. The
Inseccom term depends only on the commitment used for
Cattestors, so as long as this commitment is suﬃciently secure,
there is nothing to analyze. The 1/2 · Q2 · 2−λ term is small
enough as long as λ is long enough; for practical purposes,
256-bit λ suﬃces for 128-bit security, as is usual for collision-
resistant hashing.
thus
Q · (provenWeight/signedWeight)numReveals.
this
term to be smaller than 2−k, then, recalling that Q = 2q and
solving
If we want
interesting
analyze
term
The
to
is
(cid:18) provenWeight
(cid:19) numReveals
2−k = 2q ·
signedWeight
for numReveals gives
numReveals =
k + q
log2 (signedWeight/provenWeight) ,
(2)
which is at most the value we use in the prover and veriﬁer
algorithms (Equation (1), Section IV-A).
Note that the closer signedWeight is to provenWeight,
the larger numReveals will be, and thus the larger the compact
certiﬁcate. Thus, as discussed in Section IV-B, veriﬁers may
choose to require a value for signedWeight that limits
numReveals, resulting in a shorter certiﬁcate and therefore
lower veriﬁcation cost.
VI. Using Compact Certificates When Some Attestors
are Adversarial
The statement of Theorem 1 and the analysis of Section V-B
give us concrete bounds on the insecurity of our compact
certiﬁcate scheme. We now wish to understand how these
bounds apply when some of the attestors are adversarial.
In the rest of this section, we compute what provenWeight
should be in two possible scenarios. We then demonstrate
examples of numReveals computed according to Equation (1)
(Section IV-A) for the given provenWeight for 128-bit
security (i.e., an adversary making Q = 2q queries to
the random oracle should succeed with probability at most
Q · 2−128; thus, we set 2−k = Q · 2−128 — equivalently,
k + q = 128).
2To see why our security loss is slightly better than in [10, Thm. 7.1], note
that the reduction fails only in case of hash collision or a hash output guess;
guessing is prevented by the assumption in Footnote 1, and hash collisions
are overcounted in [10, Claim 7.3], because ρ1 and ρ2 collisions can be
counted separately.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
totalWeight of
Fraction 1 − signedWeight
attestations missing
fA/2
1.5 fA
fA
31
30
31
40
42
41
55
49
52
71
59
64
97
71
81
86
147
105
144
104
291
219 —
128
164
442 —
0
5% 30
10% 39
15% 47
20% 56
25% 64
30% 74
35% 85
40% 97
45% 112
l
a
i
r
a
s
r
e
v
d
a
m
u
m
i