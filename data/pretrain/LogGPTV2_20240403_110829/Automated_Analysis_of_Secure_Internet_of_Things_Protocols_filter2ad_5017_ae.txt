(0 → λ) as superscript (e.g., K (0→λ)
) to show the length of
the element, which is (λ − 0)-bits long in this case.
0
0
∈ {0, 1}∗
K (0→λ)
P0 = R (cid:107) T (cid:107) RV
C0 = EK0 (P0)
(1)
(2)
(3)
Figure 11: Our proposed server puzzle construction.
for 1,..,i are generated by using a k-bit random vector and
(λ − k)-bits of the prior ciphertext.
K (0→λ)
i
= RV (0→k) ∈ {0, 1}∗ || C (k→λ)
(4)
The next plain texts Pi, for 1,..,n are XORed with the (i− 1)-
th AES key Ki−1 to eliminate the identical ciphertext blocks
and to force sequential i-round operation.
i−1
Pi = Ki−1 ⊕ P(i−1), for i=1,..,n
(5)
The corresponding ciphertexts (C(0..i)) are generated using
symmetric AES encryption EKi (Pi).
Ci = EKi (Pi), for i=1,..,n
(6)
We use the HMAC function to generate short ciphertext
blocks (CTi) since the corresponding ciphertext blocks are
of the same length as plaintext blocks.
CTi = HM ACKi (Ci), for i=0,..,n
(7)
Our server puzzle (SP) consists of initialization vectors, i
ciphertexts, and a (λ − k)-bits key. The puzzle SP is sent
to the server (adversary) upon detection of any sign of DoS
attacks. Our server puzzle generation is described in Fig. 11.
SP = T (cid:107) RV (cid:107) CT(0..i) (cid:107) K (k→λ)
0
(8)
Upon receiving the server puzzle SP, the server (adversary)
is required to solve a k-bit, i-round AES brute force problem
(using the ‘brute force function’ BF ).
Ki = BF (Pi, Ci)
(9)
The answer (SA) must contain the existing parameters
with a HMAC using Ki (see Fig. 12).
SA = R (cid:107) T (cid:107) RV (cid:107) HM ACKi(R (cid:107) T (cid:107) RV )
(10)
To verify the answer SA, the device only needs to perform
one HMAC operation.
Beneﬁts. Our server puzzle construction oﬀers four bene-
ﬁts for IoT applications:
After picking an ephemeral AES key (K0) of size λ-bits, the
ﬁrst ciphertext (C0) is generated by using the AES encryption
function (Ekey) as C0 = EK0 (P0). The next block keys Ki,
(1) It can be used generally in IoT protocols since it is
based on standard AES/HMAC and does not depend
on other parameters.
RTRVInitialization vectorK0AES-ECBCiphertext C0⊕Plaintext P0Ki...Server Puzzle SPCT0...iTRVRV0→K0k→*RV0→:(-0)-bits long random vector ∊ {0,1}*HMACK0(C0)CT0K1AES-ECBCiphertext C1⊕Plaintext P1HMACK1(C1)CT1RV0→k C0k→AES-ECBCiphertext CiPlaintext PiHMACKi(Ci)CTiRV0→k Ci-1k→247(2) Puzzle generation requires i-round AES/HMAC sym-
metric operations, which are lightweight even on
extremely constrained devices.
(3) Although i ephemeral AES keys are used, the device
needs to store only one AES key (Ki) to verify the
puzzle.
(4) The hardness of the problem is dynamically ad-
justable in two ways: 1) the length of the AES key
k and 2) the number of rounds i. The device can
control the expected time spent by the attacker by
adding more rounds.
challenges of formal security analysis tools in the IoT and
proposed two solutions, which will be useful in the analysis
of complicated protocol scenarios.
Furthermore, we showed how to represent DoS attacks in
the model; we showed that the majority of IoT protocols
are vulnerable to cryptographic DoS attacks. To protect IoT
devices from such attacks, we proposed a server puzzle that
can be used generally in any IoT protocols. Our server puzzle
features lower computation and communication complexity
for use in constrained IoT devices, yet oﬀers control over
hardness.
EC-JPAKE with DoS countermeasure. With our pro-
posed server puzzle scheme and cookie approach, we add
optional DoS defensive steps to EC-JPAKE (see Fig. 13).
Note that these steps are optional; they are not used when
there is no evidence of DoS attack in the protocol execution.
We further modeled EC-JPAKE with our SP using Tamarin
for DoS attack veriﬁcation. Tamarin veriﬁed EC-JPAKE with
our SP as resistant to DoS attacks.
7 CONCLUSION
In this paper, we presented a practical automated formal
analysis of IoT protocols using the Tamarin prover under
D-Y, eCK, and PFS. Upon protocol model/code changes,
formal symbolic models will require minimal eﬀort to per-
form substantial full analysis. We investigated the critical
ACKNOWLEDGMENTS
The authors would like to thank Prof. Cas Cremers and his
students Katriel Cohn-Gordon and Dennis Jackson for their
theoretical and practical Tamarin modelling support. The
authors would like to express gratitude to the UNSW Inno-
vation connection project and WBS Technology staﬀ, Walter
Huang, Jimmy Chan and Brian Cheney for their practical
support. The authors would also like to thank the anonymous
referees for their valuable comments and helpful suggestions.
This research is supported in part by the Australian Research
Council project DP150100564.
REFERENCES
[1] 2010. https://tools.ietf.org/html/rfc5996. (2010).
[Online; ac-
cessed 24-May-2017].
[2] 2010.
https://tools.ietf.org/html/draft-cragie-tls-ecjpake-00.
(2010). [Online; accessed 24-May-2017].
[3] 2013. The DDoS That Almost Broke the Internet. https://blog.
cloudﬂare.com/the-ddos-that-almost-broke-the-internet/. (2013).
[Online; accessed 24-May-2017].
[4] 2014. https://tools.ietf.org/html/rfc7252. (2014).
[Online; ac-
cessed 24-May-2017].
[5] 2015.
iot-worm-used-mine-cryptocurrency. (2015).
cessed 24-May-2017].
http://www.symantec.com/connect/blogs/
[Online; ac-
Figure 12: Server puzzle solving procedure.
[6] 2015. http://tools.ietf.org/html/draft-hao-jpake-01/. (2015). [On-
line; accessed 24-May-2017].
[7] 2015.
http://threadgroup.org/RESOURCES/White-Papers.
(2015). [Online; accessed 24-May-2017].
[8] 2015. https://tools.ietf.org/html/rfc6347. (2015).
[Online; ac-
cessed 24-May-2017].
[9] 2015. http://www.openmote.com/. (2015).
[Online; accessed
24-May-2017].
[10] 2016.
http://www.emarketer.com/Article/
Security-Top-Barrier-Internet-of-Things-Growth/1013624.
(2016). [Online; accessed 24-May-2017].
[11] 2016. https://github.com/tamarin-prover/tamarin-prover. (2016).
[Online; accessed 24-May-2017].
[12] 2016. 2016 Dyn cyberattack. https://techcrunch.com/2016/10/
21/many-sites-including-twitter-and-spotify-suﬀering-outage/.
(2016). [Online; accessed 24-May-2017].
[13] 2017.
LoRaWAN-White-Papers. (2017).
May-2017].
https://www.lora-alliance.org/What-Is-LoRa/
[Online; accessed 24-
Figure 13: EC-JPAKE protocol with our proposed
DoS attack countermeasure.
[14] 2017. https://www.sigfox.com/. (2017).
[Online; accessed 24-
May-2017].
[15] 2017. http://mqtt.org/. (2017). [Online; accessed 24-May-2017].
http://mqtt.org/2013/12/
[16] 2017.
[Online; accessed
mqtt-for-sensor-networks-mqtt-sn. (2017).
24-May-2017].
[17] 2017. http://www.ieee802.org/15/pub/TG4.html. (2017). [Online;
accessed 24-May-2017].
[18] 2017. http://csrc.nist.gov/groups/STM/cavp/documents/aes/
KAT AES.zip. (2017). [Online; accessed 24-May-2017].
RTRVInitialization vectorCiphertext C0⊕Plaintext P0Ciphertext C1⊕Plaintext P1Ciphertext CiPlaintext Pi...Puzzle answer SA = HMACKi(R, T, RV)K1BF-AES RV0→k C0k→λK0BF-AES RV0→k K0k→λKiBF-AES RV0→k Ci-1k→λAlice (Device)Bob (Server)(cid:1)1 ∈ (cid:2), (cid:3)1 = g(cid:1)1(cid:1)2 ∈ (cid:2), (cid:3)2 = g(cid:1)2(cid:3)1, (cid:3)2 ZKP for ((cid:1)1, (cid:1)2), [puzzle SP]Verify ZKP for ((cid:1)1, (cid:1)2)Verify if (cid:3)2  0(cid:1)3 ∈ (cid:2), (cid:3)3 = g(cid:1)3(cid:1)4 ∈ (cid:2), (cid:3)4 = g(cid:1)4(cid:3)5 = ((cid:3)1(cid:3)2(cid:3)3)(cid:1)4⋅s(cid:3)3, (cid:3)4,	(cid:3)5, ZKP for ((cid:1)3, (cid:1)4), ZKP for (cid:1)4⋅s , [SA]Flight 1Flight 2Verify ZKP for ((cid:1)3, (cid:1)4)Verify if (cid:3)4  0(cid:3)6 = ((cid:3)1(cid:3)3(cid:3)4)(cid:1)2⋅sVerify ZKP for (cid:1)4⋅s K =(cid:3)4(cid:1)2⋅s(    )(cid:3)5(cid:1)2KA                = g((cid:1)1 + (cid:1)3)⋅(cid:1)2⋅(cid:1)4⋅s  Session key = h(KA)(cid:3)6, ZKP for (cid:1)2⋅sFlight 3*ZKP : Zero-Knowledge Proof*s : pre-shared password [] : optional steps for DoS protection[Cookie request][Cookie verification][SA = solve puzzle SP][Verify puzzle SA][increased puzzle SP' with cookie][SA' with cookie][SA' = solve puzzle SP'][Repeat puzzle if verification fails]Verify ZKP for (cid:1)2⋅s K =(cid:3)2(cid:1)4⋅s(    )(cid:3)6(cid:1)4KB= g((cid:1)1 + (cid:1)3)⋅(cid:1)2⋅(cid:1)4⋅s  Session key = h(KB)248[19] Michel Abdalla, Fabrice Benhamouda, and Philip MacKenzie.
2015. Security of the J-PAKE password-authenticated key ex-
change protocol. In 2015 IEEE Symposium on Security and
Privacy. IEEE, 571–587.
[20] Nadhem J Al Fardan and Kenneth G Paterson. 2013. Lucky thir-
teen: Breaking the TLS and DTLS record protocols. In Security
and Privacy (SP), 2013 IEEE Symposium on. IEEE, 526–540.
[21] Alessandro Armando, David Basin, Yohan Boichut, Yannick
Chevalier, Luca Compagna, Jorge Cu´ellar, P Hankes Drielsma,
Pierre-Cyrille H´eam, Olga Kouchnarenko, Jacopo Mantovani, et al.
2005. The AVISPA tool for the automated validation of internet
security protocols and applications. In International Conference
on Computer Aided Veriﬁcation. Springer, 281–285.
[22] David Basin, Jannik Dreier, and Ralf Sasse. 2015. Automated
symbolic proofs of observational equivalence. In Proceedings of
the 22nd ACM SIGSAC Conference on Computer and Commu-
nications Security. ACM, 1144–1155.
[23] David Basin, Saˇsa Radomirovic, and Lara Schmid. 2016. Modeling
Human Errors in Security Protocols. (2016).
[24] Steven M Bellovin and Michael Merritt. 1993. Cryptographic
protocol for secure communications. (Aug. 31 1993). US Patent
5,241,599.
[25] Bruno Blanchet, Mart´ın Abadi, and C´edric Fournet. 2008. Auto-
mated veriﬁcation of selected equivalences for security protocols.
The Journal of Logic and Algebraic Programming 75, 1 (2008),
3–51.
[26] Cas Cremers, Marko Horvat, Sam Scott, and Thyla van der Merwe.
2016. Automated Analysis and Veriﬁcation of TLS 1.3: 0-RTT,
Resumption and Delayed Authentication. In Security and Privacy
(SP), 2016 IEEE Symposium on. IEEE.
[27] Thai Duong and Juliano Rizzo. 2011. Here come the XOR Ninjas.
White paper, Netifera (2011).
[28] Dov M Gabbay, Christopher John Hogger, and John Alan Robin-
son. 1998. Handbook of Logic in Artiﬁcial Intelligence and Logic
Programming: Volume 5: Logic Programming. Clarendon Press.
[29] Feng Hao and Peter Ryan. 2010. J-PAKE: authenticated key
exchange without PKI. In Transactions on computational science
XI. Springer, 192–206.
[30] David P Jablon. 2001. Cryptographic methods for remote authen-
tication. (May 1 2001). US Patent 6,226,383.
[31] Ari Juels and John G Brainard. 1999. Client Puzzles: A Crypto-
graphic Countermeasure Against Connection Depletion Attacks..
In NDSS, Vol. 99. 151–165.
[32] Deepak Kapur, Paliath Narendran, and Lida Wang. 2003. An
E-uniﬁcation algorithm for analyzing protocols that use modu-
lar exponentiation. In International Conference on Rewriting
Techniques and Applications. Springer, 165–179.
[33] Jun Young Kim, Wen Hu, Dilip Sarkar, and Sanjay Jha. 2017.
ESIoT: enabling secure management of the internet of things.
In Proceedings of the 10th ACM Conference on Security and
Privacy in Wireless and Mobile Networks. ACM, 219–229.
[34] Jun Young Kim, Wen Hu, Hossein Shafagh, and Sanjay Jha. 2016.
SEDA: Secure Over-The-Air Code Dissemination Protocol for
the Internet of Things. IEEE Transactions on Dependable and
Secure Computing (2016).
[35] Ralf K¨usters and Tomasz Truderung. 2009. Using ProVerif to an-
alyze protocols with Diﬃe-Hellman exponentiation. In Computer
Security Foundations Symposium, 2009. CSF’09. 22nd IEEE.
IEEE, 157–171.
[36] Brian LaMacchia, Kristin Lauter, and Anton Mityagin. 2007.
Stronger security of authenticated key exchange. In International
Conference on Provable Security. Springer, 1–16.
[37] Christopher Lynch and Catherine Meadows. 2004. Sound ap-
proximations to Diﬃe-Hellman using rewrite rules. In Interna-
tional Conference on Information and Communications Secu-
rity. Springer, 262–277.
[38] Sebastian M¨odersheim. 2011. Diﬃe-Hellman without diﬃculty.
In International Workshop on Formal Aspects in Security and
Trust. Springer, 214–229.
[39] Long Ngo, Colin Boyd, et al. 2011. Automated proofs for Diﬃe-
Hellman-based key exchanges. In Computer Security Foundations
Symposium (CSF), 2011 IEEE 24th. IEEE, 51–65.
[40] Ronald L Rivest, Adi Shamir, and David A Wagner. 1996. Time-
lock puzzles and timed-release crypto. (1996).
[41] Benedikt Schmidt, Simon Meier, Cas Cremers, and David Basin.
2012. Automated analysis of Diﬃe-Hellman protocols and ad-
vanced security properties. In 2012 IEEE 25th Computer Secu-
rity Foundations Symposium. IEEE, 78–94.
[42] Benedikt Schmidt, Ralf Sasse, Cas Cremers, and David Basin.
2014. Automated veriﬁcation of group key agreement protocols.
In 2014 IEEE Symposium on Security and Privacy. IEEE, 179–
194.
[43] Claus-Peter Schnorr. 1991. Eﬃcient signature generation by smart
cards. Journal of cryptology 4, 3 (1991), 161–174.
[44] Hailun Tan, John Zic, Sanjay K Jha, and Diethelm Ostry. 2011.
Secure multihop network programming with multiple one-way key
chains. Mobile Computing, IEEE Transactions on 10, 1 (2011),
16–31.
[45] Eugene Y Vasserman and Nicholas Hopper. 2013. Vampire at-
tacks: draining life from wireless ad hoc sensor networks. IEEE
transactions on mobile computing 12, 2 (2013), 318–332.
[46] Brent Waters, Ari Juels, J Alex Halderman, and Edward W Felten.
2004. New client puzzle outsourcing techniques for DoS resistance.
In Proceedings of the 11th ACM conference on Computer and
communications security. ACM, 246–256.
[47] Anthony D Wood and John A Stankovic. 2002. Denial of service
in sensor networks. computer 35, 10 (2002), 54–62.
249