### Our Proposed Server Puzzle Construction

We use the notation \((0 \rightarrow \lambda)\) as a superscript (e.g., \(K^{(0 \rightarrow \lambda)}\)) to denote the length of an element, which in this case is \((\lambda - 0)\)-bits long.

1. **Initialization:**
   - \(0 \in \{0, 1\}^*\)
   - \(K^{(0 \rightarrow \lambda)}\)
   - \(P_0 = R \parallel T \parallel RV\)
   - \(C_0 = E_{K_0}(P_0)\)

2. **Key and Ciphertext Generation:**
   - For \(i = 1, \ldots, n\), the keys \(K_i\) are generated using a \(k\)-bit random vector and \((\lambda - k)\)-bits of the previous ciphertext.
     \[
     K_i^{(0 \rightarrow \lambda)} = RV^{(0 \rightarrow k)} \parallel C_{i-1}^{(k \rightarrow \lambda)}
     \]

3. **Plaintext XOR Operation:**
   - The next plaintexts \(P_i\) for \(i = 1, \ldots, n\) are XORed with the \((i-1)\)-th AES key \(K_{i-1}\) to eliminate identical ciphertext blocks and enforce sequential i-round operations.
     \[
     P_i = K_{i-1} \oplus P_{i-1}, \quad \text{for } i = 1, \ldots, n
     \]

4. **Ciphertext Generation:**
   - The corresponding ciphertexts \(C_i\) are generated using symmetric AES encryption.
     \[
     C_i = E_{K_i}(P_i), \quad \text{for } i = 1, \ldots, n
     \]

5. **HMAC Generation:**
   - We use the HMAC function to generate short ciphertext blocks \(CT_i\) since the corresponding ciphertext blocks are of the same length as the plaintext blocks.
     \[
     CT_i = \text{HMAC}_{K_i}(C_i), \quad \text{for } i = 0, \ldots, n
     \]

### Server Puzzle (SP) Construction

Our server puzzle (SP) consists of initialization vectors, \(i\) ciphertexts, and a \((\lambda - k)\)-bit key. The puzzle SP is sent to the server (adversary) upon detection of any sign of DoS attacks. The server puzzle generation is described in Figure 11.
\[
SP = T \parallel RV \parallel CT_{(0..i)} \parallel K_0^{(k \rightarrow \lambda)}
\]

### Server Puzzle Solving

Upon receiving the server puzzle SP, the server (adversary) is required to solve a \(k\)-bit, \(i\)-round AES brute force problem using the 'brute force function' BF.
\[
K_i = \text{BF}(P_i, C_i)
\]
The answer (SA) must contain the existing parameters with a HMAC using \(K_i\) (see Figure 12).
\[
SA = R \parallel T \parallel RV \parallel \text{HMAC}_{K_i}(R \parallel T \parallel RV)
\]

To verify the answer SA, the device only needs to perform one HMAC operation.

### Benefits

Our server puzzle construction offers four benefits for IoT applications:
1. **General Applicability:** It can be used generally in IoT protocols since it is based on standard AES/HMAC and does not depend on other parameters.
2. **Lightweight Operations:** Puzzle generation requires \(i\)-round AES/HMAC symmetric operations, which are lightweight even on extremely constrained devices.
3. **Efficient Storage:** Although \(i\) ephemeral AES keys are used, the device needs to store only one AES key (\(K_i\)) to verify the puzzle.
4. **Adjustable Hardness:** The hardness of the problem is dynamically adjustable in two ways: 1) the length of the AES key \(k\) and 2) the number of rounds \(i\). The device can control the expected time spent by the attacker by adding more rounds.

### Integration with EC-JPAKE

With our proposed server puzzle scheme and cookie approach, we add optional DoS defensive steps to EC-JPAKE (see Figure 13). Note that these steps are optional; they are not used when there is no evidence of DoS attack in the protocol execution. We further modeled EC-JPAKE with our SP using Tamarin for DoS attack verification. Tamarin verified EC-JPAKE with our SP as resistant to DoS attacks.

### Conclusion

In this paper, we presented a practical automated formal analysis of IoT protocols using the Tamarin prover under D-Y, eCK, and PFS. Upon protocol model/code changes, formal symbolic models will require minimal effort to perform substantial full analysis. We investigated the critical challenges of formal security analysis tools in the IoT and proposed two solutions, which will be useful in the analysis of complicated protocol scenarios. Furthermore, we showed how to represent DoS attacks in the model and demonstrated that the majority of IoT protocols are vulnerable to cryptographic DoS attacks. To protect IoT devices from such attacks, we proposed a server puzzle that can be used generally in any IoT protocols. Our server puzzle features lower computation and communication complexity for use in constrained IoT devices, yet offers control over hardness.

### Acknowledgments

The authors would like to thank Prof. Cas Cremers and his students Katriel Cohn-Gordon and Dennis Jackson for their theoretical and practical Tamarin modeling support. The authors would also like to express gratitude to the UNSW Innovation Connection project and WBS Technology staff, Walter Huang, Jimmy Chan, and Brian Cheney for their practical support. Additionally, the authors would like to thank the anonymous referees for their valuable comments and helpful suggestions. This research is supported in part by the Australian Research Council project DP150100564.

### References

[References listed as provided, with proper formatting and access dates.]

---

This version of the text is more structured, clear, and professional, making it easier to follow and understand.