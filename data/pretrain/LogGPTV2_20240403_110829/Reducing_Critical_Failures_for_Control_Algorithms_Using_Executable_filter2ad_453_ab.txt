Figure 5.  Fault-free output u-lim 
from the PI controller. 
3. Experimental Setup 
The  experiments  were  conducted  using  a  new  fault 
injection  tool  called  GOOFI  (Generic  Object-Oriented 
Fault  Injection  tool)  [13]. The GOOFI tool  was executed 
on  a  UNIX  workstation  hosting  a  processor  board  based 
on the Thor microprocessor  [l 11, which was configured as 
the  target  system  for the  fault  injection  experiments  (see 
Figure 6). 
3.1.The Thor microprocessor 
The Thor microprocessor  executed  the code generated 
for  the  PI  controller  algorithm  described  in  Section  2. 
Thor is a 32-bit CPU with a four-stage pipeline and a  128 
byte data cache located within  the pipeline.  Several error 
detection mechanisms, see Table  1, and  support  for Ada 
tasking  are  included  in  the  processor. Thor  also features 
advanced  scan-chain logic that allows read access to more 
than  3000 of  the  almost 4500 internal  state elements  of 
the CPU and write access to more than 2700 internal state 
elements. 
So  far,  Thor  has  been  used  in  space  applications, 
where 
low  power 
consumption  are  important  factors  to  be  considered  in 
low  weight,  small  volume  and 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:07:27 UTC from IEEE Xplore.  Restrictions apply. 
3.2. The GOOFI tool 
The GOOFI tool can perform fault injection campaigns 
using  different  fault  injection  techniques  on  different 
target  systems. A major objective of the tool  is to provide 
fault 
a  user-friendly 
injection  environment  with  a 
graphical  user 
interface  and  an  underlying  generic 
architecture  that  assists  the  user  when  adapting the  tool 
for new target systems and new fault injection techniques. 
is  highly  portable  between 
different  host  platforms  since the  tool  was  implemented 
using  the  Java  programming  language  and  all  data  is 
saved  in  a  SQL  compatible  database.  GOOFI  was 
designed 
facilitate 
maintainability and portability. 
In  addition,  the  tool 
orientation 
object 
using 
to 
3.3. Campaign configuration 
As  shown  in  Figure  6,  conducting  fault  injection 
the 
campaigns  using  GOOFI 
configuration, set-up, fault  injection and analysis phase. 
involves  four  phases: 
3.3.1.  Configuration  phase.  The  configuration  phase 
involves  adapting  the  GOOFI  tool  to  the  chosen  fault 
injection technique and target system. The current version 
of  GOOFI  supports  pre-runtime  Software  Implemented 
Fault  Injection  (SWIFI)  and  Scan-Chain  Implemented 
Fault  Injection  (SCIFI). In  SCIFI, faults  are injected  via 
boundary  scan-chains  or internal  scan-chains  in  a  VLSI 
circuit  [ 121. This allows faults to be  injected into the pins 
and  many  of  the  internal  state  elements  of  the  target 
circuit.  The  scan-chains  are  also  used  to  observe  the 
internal  state  of  the  circuit  before  and  after  a  fault  is 
injected.  In  this study, the GOOH tool was configured to 
use the SCIFI technique on the Thor microprocessor. 
3.3.2. Set-up phase. In the set-up phase, the user selects a 
target  system  and  a  workload,  and  chooses  the  fault 
injection  locations  from  a  hierarchical  list  of  possible 
locations  presented  in  a  window.  The  user  must  also 
select  the  fault  models  to  use,  the  points  in  time  when 
faults should be injected, and the total number of faults in 
the fault injection campaign. 
2250 fault locations of the 3000 state elements of Thor 
accessible  via  the  scan-chain  logic  were 'chosen for fault 
injection.  The  fault  injection  locations  were  selected 
randomly  using  uniform  sampling  among  the  2250 state 
elements. 
Using  the  GOOFI  tool  with  the  SCIFI  technique 
requires  break-points  to be  set  according to  the points  in 
time when faults should be injected. The break-points are 
set  via  the  scan-chains  in  the  fault  injection  phase  and 
allow  the  Thor processor  to  be  halted  for fault  injection 
when a machine instruction is to be executed.  The points 
in  time  for fault  injection  are  selected by  analyzing the 
workload  code. In  this study, the points in  time for fault 
injection  were  selected  randomly  using  a  uniform 
sampling distribution  among  the  points  in  time  each  of 
the instructions of the workload begin their execution. 
The fault  model  used  was  single  bit-flip  faults,  which 
model  the effects of transients occurring in the CPU. 
The  fermination  conditions  for  the  experiments  are 
also  selected  in  the  set-up  phase.  A  fault  injection 
experiment  is terminated  by a debug event (generated  via 
the  scan  chains)  i.e.,  an  error  has  been  detected  or  the 
execution  of  the  workload  ends,  whichever comes  first. 
The  workload  may  consist  of  a  program  that  either 
terminates by  itself  or is executed  as an infinite loop. For 
an  infinite  loop,  such  as  the  PI  controller  used  in  this 
study,  the  user  must  specify  the  maximum  number  of 
iterations 
the  fault 
injection  experiment  is  terminated.  650  loop  iterations 
were  used  in  this  study  (see  Section  2). In  each  loop 
iteration,  data  may  be  exchanged  with  a  user  provided 
environment  simulator  program  emulating  the  target 
system  environment. 
the  environment 
simulator was the Simulink generated model of the engine 
shown  in  Figure  I  (excluding  the  PI  controller).  The 
environment  simulator  was  executed  on  the  same  host 
computer as the GOOFI tool. 
that  should  be  executed  before 
In  our  case 
Information  about the memory  locations  holding  input 
and  output data  within  the  target  system  as  well  as  the 
points  in  time  the  data exchange occurs, e.g.  when  each 
loop iteration  finishes, must also be selected by the user. 
All  set-up  data  is  stored  in  a  database for  use  during 
the fault injection phase. 
reading 
tool  starts  by 
3.3.3. Fault injection phase.  In the fault injection phase, 
the  GOOFI 
the  campaign 
information  from  the  database.  The  target  system  is 
initialised  and  the  workload  and  initial  input  data  is 
downloaded to the system. Then a reference  execution  of 
the  workload  is  made, logging the  fault-free  system  state 
to  the  GOOFI  database.  After  this,  each  fault  injection 
experiment  begins  by  reinitialising  the  target  system  and 
downloading the workload and initial input data. 
For each fault injection experiment,  a breakpoint is set 
via the scan-chains at the instruction to be executed when 
a fault should be injected. When the break-point condition 
has  been  fulfilled,  the  fault  is  injected  by  reading  the 
scan-chains,  inverting  the  bits  corresponding  to  the  fault 
location,  and  then  writing  back  the  altered  scan-chain 
data. 
After injecting a fault, the execution  starts from where 
the  target  system  was  halted  and  continues  until  the 
termination  condition  occurs.  The  system  state  is  then 
351 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:07:27 UTC from IEEE Xplore.  Restrictions apply. 
logged  to  the  database.  Finally,  the  target  system  is 
reinitialized and a new fault injection experiment begins. 
GOOFI  can  be  operated  in  either  nornial  or  detail 
mode.  In  normal  mode,  the  system  state  is  logged  only 
when the termination condition is fulfilled. In detail mode 
the  system  state  is  logged  as  frequently  as  the  target 
system allows,  in  this  case  before  the  execution  of  each 
machine  instruction,  which  increases  the  time-overhead. 
The  detail  mode  operation 
to  produce  an 
execution  trace,  allowing  the  error  propagation  to  be 
analyzed  in  detail.  The  logged  system state  includes  the 
contents  of  all  the  locations in  the  target  system  that  are 
observable  as  well  as  the  workload  input  and  output 
values,  together  with  information about  when  and  where 
any faults were injected. 
is  used 
in  order 
3.3.4.  Analysis  phase.  The  final  phase  involved  when 
conducting  fault  injection campaigns using GOOFI  is the 
analysis  phase.  In  this  phase,  the  data in  the  database  is 
analyzed 
to  obtain  various  dependability 
measures.  Currently,  there  is  no  support  for  automatic 
generation of  software that  analyses the logged data. The 
user must write tailor made scripts or programs that query 
the  database  for  the  required  information.  However,  this 
is typically done once for each new target system. 
4.  Results 
In  this  section,  we  first describe  the  error  and  failure 
classification  scheme  used  in  the  presentation  of  the 
results.  We  then  present  the  results  of  a  fault  injection 
campaign evaluating the PI controller algorithm described 
in  Section  2  (Algorithm  I),  which  is  followed  by  a 
description  of  a  modified  algorithm  aimed  at  reducing 
critical  failures (Algorithm 11). Finally, the results of  fault 
injection  experiments  using  Algorithm  I1  are  presented 
and compared with the results for Algorithm I. 
4.1. Error and failure classification 
that  were  detected, but  the  GOOFI  analysis  software 
could  not  determine  which  mechanism  that  detected 
the error. 
Undetected wrong results:  The controller produced an 
incorrect  result,  i.e. a value  failure. These failures  are 
classified 
failures 
depending on their impact on the controlled object 
severe  or  minor  value 
into 
Severe:  The  value  failure  has  a  severe  impact  on 
the controlled object. These failures are either: 
(650 
iterations  of 
Permanent:  The  output  from  the  controller  is 
either  at  maximum  value  (70.0  degrees)  or 
minimum  value (0.0 degrees) from the time the 
value  failure  first  appears  until  the  end  of  the 
observed time  interval,  see Figure  7. Note that 
the  observed  time  interval  is  limited  to  10 
seconds 
control 
algorithm)  and  that  the  output  may  converge 
towards the fault-free output sequence later. 
Semi-permanent:  The  output 
the 
from 
controller  differs  strongly  (more 
than  0.1 
degrees) from the fault-free output during more 
than  one  iteration,  but  the  output  starts  to 
converge 
output 
sequence within the observed time  interval,  see 
Figure 8: 
fault-free 
towards 
the 
the 
Minor:  The  value  failure  has  a  minor  impact  on 
the  controlled  object. These  failures  are classified 
into: 
Transient:  The  output  from  the  controller 
differs  strongly  (more  than  0.1  degrees)  from 
the  fault-free  output  during  one  iteration  and 
then  rapidly  starts  to  converge  towards  the 
fault-free output, see Figure 9. 
Insignificant:  The output  from the controller  is 
almost  identical  to  the  fault-free  output.  We 
define  an insignificant error to have a deviation 
from the fault-free output less than 0.1 degrees. 
The  errors  are  classified  into  either  effective  or  non- 
effective  errors  in  the  results  from  the  fault  injection 
experiments. 
60 701 
Incorrect output delivered from the PI controller 
I 
1 
-Permanentenor 
I 
4.1.1. Effective errors. Effective  errors  are  errors  which 
were either detected by  the error detection mechanisms of 
the  Thor  processor  (see  Table  1)  or  errors  causing 
undetected  wrong  results  (value  failures) to  be  produced 
by  the PI controller: 
Detected  errors: Errors detected by  the error detection 
mechanisms 
further 
classified  into  errors  detected  by  each  of  the  various 
mechanisms  or  other  errors.  Other  errors  are  errors 
in  Thor.  These  errors  are 
0.0  0.8  1.6 
2.3  3.1  3.9  4.6 
5.4 
6.2  6.9  7.7 
8.5 
~ 
9.3  10.0 
Figure 7.  Severe undetected wrong result 
Time (seconds) 
(permanent). 
352 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:07:27 UTC from IEEE Xplore.  Restrictions apply. 
Incorrect output delivered from the PI controller 
4.2.  Results for Algorithm I 
70 
60 
.Giw 
h 
p 40 
0 
630 
I 
20 
10 
0 
0.0 
0.8 
1.6  2.3 
3.1 
3.9  4.6 
5.4 
6.2 
6.9 
7.7  8.5 
9.3  10.0 
Figure 8.  Severe undetected wrong result 
Time (seconds) 
(semi-permanent). 
Incorrect Output delivered from the PI controller 
70 4 
I 
-correct  output 
-Transient  error 
10 
0 
0.0  0.8  1.6 
2.3  3.1 
3.9 
4.6  5.4 
6.2 
6.9 
7.7 
8.5 
9.3  10.0 
Figure 9.  Minor undetected wrong result 
Time (seconds) 
(transient). 
Table 2 shows the results obtained for the PI controller 
implemented  according  to  Algorithm  I.  The  first  two 
columns  present  the  results  separately for  faults  injected 
into the data cache of  Thor (denoted "Cache" in the table) 
and into all  other parts of  the CPU (denoted  "Registers"). 
The  last  column  presents  the  total  results  for  all  faults 
injected into the CPU, The percentage  of  errors obtained 