# Hacking Windows CE

## Structure Overview
- **Windows CE Overview**
- **Windows CE Memory Management**
- **Windows CE Processes and Threads**
- **Windows CE API Address Search Technology**
- **The Shellcode for Windows CE**
- **Windows CE Buffer Overflow Demonstration**
- **About Decoding Shellcode**
- **Conclusion**
- **References**

## Windows CE Overview
- **Introduction:**
  - Windows CE is a popular embedded operating system for PDAs and mobile devices.
  - It allows Windows developers to easily create applications for the platform.
  - The latest version discussed here is Windows CE 5.0, but this presentation is based on Windows CE.net (4.2).
  - Windows Mobile Software for Pocket PC and Smartphone are also built on the core of Windows CE.
  - By default, Windows CE operates in little-endian mode.

- **ARM Architecture:**
  - ARM is a RISC (Reduced Instruction Set Computing) architecture.
  - ARM versions range from ARMv1 to ARMv6.
  - Common ARM processors include ARM7, ARM9, ARM10, and ARM11.
  - There are 7 processor modes and 37 registers, with 15 general-purpose registers visible at any time.
  - Special registers include `r13` (stack pointer, sp), `r14` (link register, lr), and `r15` (program counter, pc).

## Memory Management
- **Memory Types:**
  - Windows CE uses ROM (read-only memory) and RAM (random access memory).
  - ROM acts like a small read-only hard disk.
  - RAM is divided into program memory and object store.

- **Virtual Address Space:**
  - Windows CE is a 32-bit OS, supporting a 4GB virtual address space.
  - The upper 2GB is kernel space, used by the system for its own data.
  - The lower 2GB is user space.
  - Memory from `0x42000000` to `0x7FFFFFFF` is used for large memory allocations.
  - Memory from `0x0` to `0x41FFFFFF` is divided into 33 slots, each 32MB.

- **Slot 0 Layout:**
  - Details of Slot 0 layout will be covered in the next section.

## Processes and Threads
- **Process Limitations:**
  - Windows CE limits the number of processes to 32 at any given time.
  - Each process is restricted to its own code and data.
  - Every process starts with at least one primary thread.
  - Additional threads can be created, limited only by available memory.
  - Each thread belongs to a specific process and shares the same memory space.
  - Each thread has an ID, a private stack, and a set of registers.

- **Process Loading:**
  - When a process is loaded, it is assigned to the next available slot.
  - DLLs are loaded into the slot, followed by the stack and default process heap.
  - The process is then executed.
  - When a process' thread is scheduled, it is copied from its slot into slot 0.
  - If the process becomes inactive, it is mapped back to its original slot.
  - The kernel, file system, and windowing system run in their own slots.

- **Stack Allocation:**
  - Each thread's stack size is 64KB by default, depending on the link parameter during compilation.
  - The top 2KB is used to guard against stack overflow.
  - Variables declared inside functions are allocated in the stack.
  - Stack memory is reclaimed when the thread terminates.

## API Address Search
- **Locating coredll.dll:**
  - Use the `KDataStruct` structure to locate the loaded address of `coredll.dll`.
  - The kernel data page is at `0xFFFFC800`.
  - The module list is at offset `0x324`.
  - The export table position is at `0x8c`.

- **Finding API Addresses:**
  - Use the `IMAGE_EXPORT_DIRECTORY` structure to find API addresses.
  - Key fields include `AddressOfFunctions`, `AddressOfNames`, and `AddressOfNameOrdinals`.

## The Shellcode for Windows CE
- **Shellcode Implementation:**
  - `test.asm` contains the final shellcode.
  - Functions include `get_export_section` and `find_func`.
  - The shellcode can soft reset the PDA and open Bluetooth for some IPAQs (e.g., HP1940).

- **Writing Shellcode:**
  - Be cautious with LDR pseudo-instructions.
  - Registers `r0` to `r3` are used as the first four parameters of an API, with others stored in the stack.

## Buffer Overflow Demonstration
- **Vulnerable Program:**
  - `hello.cpp` reads data from a file into a stack variable, causing a buffer overflow.
  - ARM assembly uses the `bl` instruction to call functions.
  - Overwriting the `lr` register in the stack can gain control when the function returns.

- **Memory Addressing:**
  - Variable memory addresses are relative to the loaded slot.
  - The base address may change each time the process starts.
  - Slot 0 is stable and maps from the current process' slot.

- **Exploit Examples:**
  - A failed exploit: The PDA freezes due to the small stack size and overflow.
  - A successful exploit: The PDA restarts, and the program flows to the shellcode.

## About Decoding Shellcode
- **Decoding Necessity:**
  - Other programs may filter special characters before a string buffer overflow.
  - Writing shellcode without special characters using API address search is difficult in Windows CE.

- **ARM Processor Considerations:**
  - Newer ARM processors have Harvard Architecture, separating instruction and data caches.
  - Self-modifying code is challenging to implement.
  - Successful examples use store instructions to modify self-code, padding with NOP instructions.
  - ARM10 core requires more padding instructions.

- **Challenges:**
  - Using load and store instructions to decode shellcode is problematic.
  - SWI does nothing except `movs pc, lr` under Windows CE.
  - Applications on PocketPC run in kernel mode, allowing use of `mcr` to manage the cache system, but this method is not yet successful.

## Conclusion
- **Real-World Example:**
  - The examples provided are real-life buffer overflow cases in Windows CE.
  - Instruction cache makes decoding shellcode less effective.
  - As internet and mobile device usage grows, threats to PDAs and mobiles become more serious.
  - Patching Windows CE is more difficult and dangerous.

## References
1. [ARM Architecture Reference Manual](http://www.arm.com)
2. [Windows CE 4.2 Source Code](http://msdn.microsoft.com/embedded/windowsce/default.aspx)
3. [Details Emerge on the First Windows Mobile Virus](http://www.informit.com/articles/article.asp?p=337071)
4. [Pocket PC Abuse - Seth Fogie](http://www.blackhat.com/presentations/bh-usa-04/bh-us-04-fogie/bh-us-04-fogie-up.pdf)
5. [Misc Notes on the XDA and Windows CE](http://www.xs4all.nl/~itsme/projects/xda/)
6. [Introduction to Windows CE](http://www.cs-ipv6.lancs.ac.uk/acsp/WinCE/Slides/)
7. [Nasiry's Way](http://www.cnblogs.com/nasiry/)
8. [Programming Windows CE Second Edition - Doug Boling]
9. [Win32 Assembly Components](http://LSD-PLaNET)

Thank you!