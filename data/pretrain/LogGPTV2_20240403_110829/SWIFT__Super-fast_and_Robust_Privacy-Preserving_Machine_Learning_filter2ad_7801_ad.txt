z to the third server which computes β(cid:63)
z. Due to the
presence of one honest server in each team, this β(cid:63)
z is correct
and P1,P2 directly use it to compute βz, with the knowledge
of ψ,βx,βy. The outcome of our approach is a win-win situ-
ation i.e. either success or TTP selection. Our approach of
computing βz from β(cid:63)
z is a departure from BLAZE, where
the latter suggests computing βz from the exchange P1,P2’s
respective share of βz (as in the semi-honest construction)
and use β(cid:63)
z for veriﬁcation. Our new β(cid:63)
χ = γxαy + γyαx + Γxy − ψ and
z = −(βx + γx)αy − (βy + γy)αx + αz + χ
β(cid:63)
= (−βxαy − βyαx + Γxy + αz)− ψ = βz − βxβy − ψ
z]i = −(βx +
Clearly, both P0 and Pi can compute [β(cid:63)
γx) [αy]i − (βy + γy) [αx]i + [αz]i + [χ]i given [χ]i. The rest of
our discussion explains how (a) ith share of [χ] can be made
available to {P0,Pi} and (b) ψ can be derived by P1,P2, from
a multiplication triple. Similar to BLAZE, yet for a different
triple, we observe that (d, e, f) is a multiplication triple, where
d = (γx + αx), e = (γy + αy), f = (γxγy + ψ) + χ if and only if
χ and Γxy are correct. Indeed,
z and χ are:
de = (γx + αx)(γy + αy) = γxγy + γxαy + γyαx + Γxy
= (γxγy + ψ) + (γxαy + γyαx + Γxy − ψ)
= (γxγy + ψ) + χ = f
Based on this observation, we compute the above multiplica-
tion triple using a multiplication protocol and extract out the
values for ψ and χ from the shares of f which are bound to
be correct. This can be executed entirely in the preprocessing
phase. Speciﬁcally, the servers (a) locally obtain (cid:104)·(cid:105)-shares
of d, e as in Table 2, (b) compute (cid:104)·(cid:105)-shares of f(= de), say
denoted by f0, f1, f2, using an efﬁcient, robust 3-party multi-
plication protocol, say ΠmulPre (abstracted in a functionality
Fig. 10) and ﬁnally (c) extract out the required preprocessing
data locally as in Eq. 2.
(cid:104)v(cid:105)
(cid:104)d(cid:105)
(cid:104)e(cid:105)
P0
(v0, v1)
([αx]2 , [αx]1)
([αy]2 , [αy]1)
P1
(v1, v2)
([αx]1 ,γx)
([αy]1 ,γy)
P2
(v2, v0)
(γx, [αx]2)
(γy, [αy]2)
Table 2: The (cid:104)·(cid:105)-sharing of values d and e
[χ]2 ← f0,
[χ]1 ← f1, γxγy + ψ ← f2.
(2)
We switch to (cid:104)·(cid:105)-sharing in this part to be able to use the best
robust multiplication protocol of [9] that supports this form of
secret sharing and requires communication of just 3 elements.
Fortunately, the switch does not cost anything, as both the step
USENIX Association
30th USENIX Security Symposium    2657
(a) and (c) (as above) involve local computation and the cost
simply reduces to a single run of a multiplication protocol.
According to (cid:104)·(cid:105)-sharing, both P0 and P1 obtain f1 and hence
obtain [χ]1. Similarly, P0,P2 obtain f0 and hence [χ]2. Finally,
P1,P2 obtain f2 from which they compute ψ = f2 − γxγy. This
completes the informal discussion.
To leverage amortization, the send phase of jmp-send alone
is executed on the ﬂy and verify is performed once for multiple
instances of jmp-send. Further, observe that P1,P2 possess
the required shares in the online phase to compute the entire
circuit. So, P0 can come in only during verify of jmp-send
towards P1,P2, which can be deferred towards the end. Hence,
the jmp-send of βz + γz to P0 (enabling computation of the
veriﬁcation information) can be performed once, towards the
end, thereby requiring a single round for sending βz +γz to P0
for multiple instances. Following this, the verify of jmp-send
towards P0 is performed ﬁrst, followed by performing the
verify of jmp-send towards P1,P2 in parallel.
We note that to facilitate a fast online phase for multiplica-
tion, our preprocessing phase leverages a robust multiplication
protocol [9] in a black-box manner to derive the necessary
preprocessing information. A similar black-box approach is
also taken for the dot product protocol in the preprocessing
phase. This leaves room for further improvements in the com-
munication cost, which can be obtained by instantiating the
black-box with an efﬁcient, robust protocol coupled with the
fast online phase.
Reconstruction Protocol Protocol Πrec allows servers to ro-
bustly reconstruct value v ∈ Z2(cid:96) from its (cid:74)·(cid:75)-shares. Note
that each server misses one share of v which is held by the
other two servers. Consider the case of P0 who requires γv
to compute v. During the preprocessing, P1,P2 compute a
commitment of γv, denoted by Com(γv) and jmp-send the
same to P0. Similar steps are performed for the values [αv]2
and [αv]1 that are required by servers P1 and P2 respectively.
During the online phase, servers open their commitments to
the intended server who accepts the opening that is consistent
with the agreed upon commitment. We defer the details to the
full version [36].
The Complete 3PC For the sake of completeness and to
demonstrate how GOD is achieved, we show how to compile
the above primitives for a general 3PC. A similar approach
will be taken for 4PC and each PPML task, and we will avoid
repetition. In order to compute an arithmetic circuit over Z2(cid:96),
we ﬁrst invoke the key-setup functionality Fsetup (Fig. 6) for
key distribution and preprocessing of Πsh, Πmult and Πrec, as
per the given circuit. During the online phase, Pi ∈ P shares its
input xi by executing online steps of Πsh. This is followed by
the circuit evaluation phase, where severs evaluate the gates
in the circuit in the topological order, with addition gates (and
multiplication-by-a-constant gates) being computed locally,
and multiplication gates being computed via online of Πmult
(Fig. 2). Finally, servers run the online steps of Πrec on the
output wires to reconstruct the function output. To leverage
amortization, only send phases of all the jmp are run on the
ﬂow. At the end of preprocessing, the verify phase for all pos-
sible ordered pair of senders are run. We carry on computation
in the online phase only when the verify phases in the pre-
processing are successful. Otherwise, the servers simply send
their inputs to the elected TTP, who computes the function
and returns the result to all the servers. Similarly, depending
on the output of the verify at the end of the online phase, either
the reconstruction is carried out or a TTP is identiﬁed. In the
latter case, computation completes as mentioned before.
On the security of our framework: We emphasize that we
follow the standard traditional (real-world / ideal-world based)
security deﬁnition of MPC, according to which, in the 4-party
setting with 1 corruption, exactly 1 party is assumed to be
corrupt, and rest are honest. As per this deﬁnition, disclosing
the honest parties’s inputs to a selected honest party is not a
breach of security. Indeed, in our framework, the data sharing
and the computation on the shared data is done in a way that
any malicious behaviour leads to establishment of a TTP who
is enabled to receive all the inputs and compute the output
on the clear. There has been a recent study on the additional
requirement of hiding the inputs from a quorum of honest
parties (treating them as semi-honest), termed as Friends-and-
Foes (FaF) security notion [2]. This is a stronger security goal
than the standard one and it has been shown that one cannot
obtain FaF-secure robust 3PC. We leave FaF-secure 4PC for
future exploration.
3.3 Building Blocks for PPML using 3PC
This section provides details on robust realizations of the fol-
lowing building blocks for PPML in 3-server setting– i) Dot
Product, ii) Truncation, iii) Dot Product with Truncation, iv)
Secure Comparison, and v) Non-linear Activation functions–
Sigmoid and ReLU. We defer the communication analysis of
our protocols and security proofs to the full version [36]. We
begin by providing details of input sharing and reconstruction
in the SOC setting.
Input Sharing and Output Reconstruction in the SOC
Setting Protocol ΠSOC
(Fig. 3) extends input sharing to the
SOC setting and allows a user U to generate the(cid:74)·(cid:75)-shares of
its input v among the three servers. Note that the necessary
commitments to facilitate the sharing are generated in the pre-
processing phase by the servers which are then communicated
to U, along with the opening, in the online phase. U selects
the commitment forming the majority (for each share) ow-
ing to the presence of an honest majority among the servers,
and accepts the corresponding shares. Analogously, proto-
col ΠSOC
(Fig. 3) allows the servers to reconstruct a value v
rec
towards user U. In either of the protocols, if at any point, a
TTP is identiﬁed, then servers signal the TTP’s identity to U.
U selects the TTP as the one forming a majority and sends
its input in the clear to the TTP, who computes the function
output and sends it back to U.
sh
2658    30th USENIX Security Symposium
USENIX Association
MSB Extraction, Bit to Arithmetic Conversion and Bit
Injection Protocols We provide a high-level overview of
three protocols that involve working over arithmetic and
boolean rings in a mixed fashion and are used in PPML prim-
itives. The bit extraction protocol, Πbitext allows servers to
compute boolean sharing of the most signiﬁcant bit (msb) of a
value v from its arithmetic sharing ((cid:74)v(cid:75)). The Bit2A protocol,
Πbit2A, given the boolean sharing of a bit b, denoted as(cid:74)b(cid:75)B,
allows the servers to compute the arithmetic sharing(cid:74)bR(cid:75).
servers to compute the arithmetic sharing(cid:74)bv(cid:75) from boolean
sharing of a bit b ((cid:74)b(cid:75)B) and arithmetic sharing of v ((cid:74)v(cid:75)).
Here bR denotes the equivalent value of b over ring Z2(cid:96) (see
Notation 2.2). Lastly, Bit Injection protocol, ΠBitInj, allows
The core techniques used in these protocols follow from
BLAZE [48], where multiplication calls are replaced with
our new Πmult, and private communications are replaced with
jmp-send to ensure a successful run or TTP selection. These
PPML building-blocks can be understood without details of
the constructs and hence, are deferred to full version [36].
rec (U,(cid:74)v(cid:75))
Protocol ΠSOC
(U, v) and ΠSOC
sh
Input Sharing:
– P0,Ps, for s ∈ {1,2}, together sample random [αv]s ∈ Z2(cid:96), while
P1,P2 together sample random γv ∈ Z2(cid:96).
– P0,P1 jmp-send Com([αv]1) to P2, while P0,P2 jmp-send
Com([αv]2) to P1, and P1,P2 jmp-send Com(γv) to P0.
– Each server sends (Com([αv]1), Com([αv]2), Com(γv)) to U
who accepts the values that form majority. Also, P0,Ps, for s ∈
{1,2}, open [αv]s towards U while P1,P2 open γv towards U.
– U accepts the consistent opening, recovers [αv]1 , [αv]2 ,γv,
computes βv = v + [αv]1 + [αv]2, and sends βv + γv to all three
servers.
– Servers broadcast the received value and accept the majority
value if it exists, and a default value, otherwise. P1,P2 locally
compute βv from βv + γv using γv to complete the sharing of v.
Output Reconstruction:
– Servers execute the preprocessing of Πrec(P ,(cid:74)v(cid:75)) to agree upon
commitments of [αv]1 , [αv]2 and γv.
– Each server sends βv + γv and commitments on [αv]1 , [αv]2
and γv to U, who accepts the values forming majority.
– P0,Pi for i ∈ {1,2} open [αv]i to U, while P1,P2 open γv to U.
– U accepts the consistent opening and computes v = (βv +γv)−
[αv]1 − [αv]2 − γv.
Figure 3: 3PC: Input Sharing and Output Reconstruction
Dot Product Given the(cid:74)·(cid:75)-sharing of vectors(cid:126)x and(cid:126)y, proto-
col Πdotp allows servers to generate(cid:74)·(cid:75)-sharing of z =(cid:126)x(cid:12)(cid:126)y
robustly.(cid:74)·(cid:75)-sharing of a vector(cid:126)x of size n, means that each
element xi ∈ Z2(cid:96) of (cid:126)x, for i ∈ [n], is(cid:74)·(cid:75)-shared. We borrow
ideas from BLAZE for obtaining an online communication
cost independent of n and use jmp primitive to ensure either
success or TTP selection. Analogous to our multiplication
protocol, our dot product ofﬂoads one call to a robust dot prod-
uct protocol to the preprocessing. By extending techniques
of [8, 9], we give an instantiation for the dot product protocol
used in our preprocessing whose (amortized) communication
cost is constant, thereby making our preprocessing cost also
independent of n.
To begin with, z =(cid:126)x(cid:12)(cid:126)y can be viewed as n parallel multi-
plication instances of the form zi = xiyi for i ∈ [n], followed
by adding up the results. Let β(cid:63)
(βxi + γxi)αyi − n∑
(βyi + γyi)αxi + αz + χ
zi. Then,
z = ∑n
i=1 β(cid:63)
(3)
i=1(γxiαyi + γyiαxi + Γxiyi − ψi).
i=1
z = − n∑
β(cid:63)
where χ = ∑n
i=1
Apart from the aforementioned modiﬁcation, the online
phase for dot product proceeds similar to that of multipli-
cation protocol. P0,P1 locally compute [β(cid:63)
z]1 as per Eq. 3
z]1 to P2. P1 obtains [β(cid:63)
and jmp-send [β(cid:63)
z]2 in a similar
fashion. P1,P2 reconstruct β(cid:63)
z]1 + [β(cid:63)
z]2 and compute
βz = β(cid:63)
i=1 βxiβyi + ψ. Here, the value ψ has to be cor-
rectly generated in the preprocessing phase satisfying Eq. 3.
Finally, P1,P2 jmp-send βz + γz to P0.
z = [β(cid:63)
z + ∑n
We now provide the details for preprocessing phase that
enable servers to obtain the required values (χ,ψ) with the
invocation of a dot product protocol in a black-box way. To-
wards this, let (cid:126)d = [d1, . . . , dn] and (cid:126)e = [e1, . . . , en], where
di = γxi + αxi and ei = γyi + αyi for i ∈ [n], as in the case
of multiplication. Then for f =(cid:126)d(cid:12)(cid:126)e,
i=1
n∑
n∑
i=1
f =(cid:126)d(cid:12)(cid:126)e =
n∑
i=1
diei =
(γxi + αxi)(γyi + αyi)
(γxiγyi + ψi) +
χi =
n∑
i=1