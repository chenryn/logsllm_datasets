In Figure 2c there was no restriction on how far an idle
SIMT lane that is performing a forced redundancy computation
is from the corresponding active SIMT lane. Such an imple-
mentation requires hardware support to forward data from any
active lane to any idle lane. In order to reduce this forwarding
hardware overhead we also consider a cluster-level approach
to force redundancy by allowing an active thread within a
cluster to be replicated only on idle lanes within the same
cluster. For instance, if the cluster size is two then it is not
possible to DMR the warp in Figure 2c, because the inherent
redundancy between L2 and L1 cannot be exploited because
they are in different clusters, and the idle lanes L4 and L5
cannot be exploited because they are not present in the same
cluster as the primary computation lanes for L3 and L0.
333333
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:52:38 UTC from IEEE Xplore.  Restrictions apply. 
s
p
r
a
W
f
o
e
g
a
t
n
e
c
r
e
P
1 
0.8 
0.6 
0.4 
0.2 
0 
backprop 
Cluster-level  Warp-level 
1
1
1
1
1
0
0
0
L7
L6
L5
L4
L3
L2
L1
L0
LIB 
M U M 
Average 
NN  WP 
0
1
1
1
1
0
0
0
1
0
0
0
0
0
0
0
L7
L6
L5
L4
L3
L2
L1
L0
L7
L6
L5
L4
L3
L2
L1
L0
lud 
srad 
heartwall 
btree 
kmeans 
lavaM D 
gaussian 
bfs 
hotspot 
Fig. 3: Opportunistic DMR
cutcp 
lbm 
Benchmarks 
mri-q 
nw 
pathfinder 
sgem m  CP 
sad 
Figure 2d shows a case where exploiting inherent redun-
dancy and idle SIMT lanes at the cluster-level is sufﬁcient.
L1 and L0 are within the same cluster and are inherently
redundant. L4 and L3 have distinctive source operands, but
they can be replicated on the idle lanes within their own cluster,
namely L5 and L2, respectively.
B. Quantifying Opportunistic DMR
To quantify the opportunistic DMR execution, we measure
the percentage of warp instructions that
leverage inherent
redundancy and/or idle SIMT lanes. Results are shown in
Figure 3. The ﬁgure shows the percentage of opportunistically
DMR-ed warps for warp-level and cluster-level implementa-
tions; note that cluster-level implementation uses two adjacent
SIMT lanes as shown in the previous subsection examples.
On average, 63% and 48% of the warps are opportunistically
DMR-ed with warp-level and cluster-level implementations,
respectively.
The warp-level implementation captures all the possible
warps which can be opportunistically DMR-ed. However, this
implementation is expensive and relatively complex because
it requires inputs to every SIMT lane to be compared against
inputs of all other SIMT lanes to detect inherent redundancy
across the warp. And, at the same time, it requires SP unit wide
MUX re-routing and data forwarding logic to leverage idle
SIMT lanes that may be present anywhere within the warp. On
the other hand, the cluster-level implementation captures 72%
of the opportunistically DMR-ed warps at a much lower design
cost (micro-architectural implementation details presented in
section VI). For instance, only adjacent lanes inputs need to be
compared and simple re-routing logic across just two adjacent
SIMT lanes is sufﬁcient to capture cluster-level opportunistic
DMR. Hence, we choose to leverage the opportunistic DMR
execution by exploiting inherent redundancy and idle SIMT
lanes at the cluster-level in the Warped-RE framework. Ac-
cordingly, during DMR mode the active threads within the
warp are logically divided into clusters of size two. The 1st
DMR cluster consists of the threads assigned to L1 and L0,
the 2nd cluster consists of threads assigned to L3 and L2, etc.
C. DMR Execution using Dynamic Warp Deformation
Cluster-level opportunistic DMR execution covers 48%
of the warp instructions during DMR mode. To cover the
remaining warp instructions, we used a modiﬁed version of the
dynamic warp deformation approach proposed in [6]. Dynamic
warp deformation splits a warp into multiple sub-warps with
fewer active threads which artiﬁcially creates more idle SIMT
lanes opportunities and allows the threads which are not
covered by the opportunistic DMR execution to be replicated
Sub-warp1
Sub-warp2
Fig. 4: Warp deformation in DMR mode
and veriﬁed for error detection. Unlike the opportunistic DMR
execution, dynamic warp deformation is expected to cause
performance degradation as more cycles are needed until all
the created sub-warps complete their execution.
When running in the DMR mode, the only case where
warp deformation is needed is when two active threads within
the same cluster are not inherently redundant. Figure 4 shows
a warp of eight threads logically divided into four clusters
as indicated by the dashed-line borders. The rightmost three
clusters are covered by opportunistic DMR execution. L1
and L0 have no active threads assigned to them. The thread
assigned to L3 has distinctive source operands but it can exploit
the idle SIMT lane L2 and force redundancy. The threads
assigned to L5 and L4 are inherently redundant.
The leftmost cluster has two active threads assigned to L7
and L6 and they are not inherently redundant. In order to
guarantee 100% error detection, threads assigned to L7 and
L6 are split across two sub-warps as shown in the ﬁgure.
In sub-warp1, the thread assigned to L6 is replicated on the
idle SIMT lane L7 that was created due to warp deformation.
In sub-warp2, the thread assigned to L7 is replicated on the
idle SIMT lane L6 that was created due to warp deformation.
The forced redundant execution on idle lanes is shown by the
curved arrows in this ﬁgure.
Notice that the need for deformation is determined by
the worst case cluster. In the example given in Figure 4, the
opportunistic DMR execution covers the active threads in the
rightmost three clusters. However, the leftmost cluster requires
deformation in order to allow each of its active threads to be
DMR-ed which causes the entire warp to be deformed and
issued over two cycles. All active threads which are covered
by opportunistic DMR execution are issued as part of sub-
warp1 and they do not need to be split across the sub-warps.
IV. ERROR DETECTION AND CORRECTION:
OPPORTUNISTIC TMR MODE
In our proposed Warped-RE framework, DMR is the de-
fault operational mode as long as no errors are detected in the
SIMT lanes. As we stated in our error modeling assumption
only a single error can be triggered for every cluster at any
point of time. Thus, running in DMR mode guarantees the
detection of any transient or non-transient error in any cluster.
However, when an error is detected it cannot be corrected
in DMR mode. In order to correct the error, the faulty warp
is re-executed in the TMR mode. Just as in DMR mode we
take advantage of inherent redundancy, idle SIMT lanes and
warp deformation to reduce TMR overheads. TMR has error
isolation capability which is used to check if the error still
334334
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:52:38 UTC from IEEE Xplore.  Restrictions apply. 
exists during the re-execution. If the error is not detected
during TMR re-execution then the original error is considered
transient and Warped-RE framework switches back to run
in DMR mode. On the other hand, if the error is detected
again during the re-execution then the error is considered non-
transient and Warped-RE framework switches to run in TMR
mode from then on. Note that a variety of mode switching
options could be easily implemented to tackle intermittent
errors if the errors appear only for a short time interval. But in
this paper we assume the occurrence of the error for the second
time, when executed in the TMR mode, is an indication of
permanent error and thus the system switches to TMR mode
from then on.
In order to support DMR and TMR operational modes,
every warp instruction issued to a streaming processor unit
(SP unit) is augmented with a mode bit (D T). During error-
free operation, the D T bit is set to 0 for all warp instructions
to indicate that they should run in DMR mode. When a warp
instruction needs to be re-executed because of an error, the
D T bit is set to 1 for that instruction to indicate that it
should run in TMR mode. Also, once a non-transient error
is detected the D T bit is set to 1 for all warps instructions
from then on to guarantee functional correctness through
TMR. Similar to DMR mode, Warped-RE framework leverages
inherent and forced redundancy across threads to achieve low
cost opportunistic TMR execution whenever possible and relies
on dynamic warp deformation only when necessary.
A. Opportunistic TMR Granularity
As in DMR mode, exploiting the inherent redundancy
in TMR can be either implemented at
the warp-level by
comparing the source operands across all threads in the warp or
at the cluster-level by limiting the comparison to threads within
the same cluster; in the case of TMR the cluster is deﬁned
as three consecutive SIMT lanes to allow TMR execution. In
the warp-level inherent redundancy implementation, a warp
is considered inherently TMR-ed if for every active thread
in the warp there are at least two more active threads with
matching source operands regardless of the physical location
of the SIMT lanes to which the matching threads are assigned
to. In the cluster-level inherent redundancy implementation, a
warp is considered inherently TMR-ed when the active threads
assigned to every cluster of three adjacent SIMT lanes have
matching source operands.
To better understand the two implementations while run-
ning in TMR mode, we provide four examples in Figure 5.
The warp in Figure 5a can be inherently TMR-ed assuming
the warp-level implementation is used because every thread has
two inherently redundant threads within the same warp. How-
ever, when the cluster-level implementation is used as indicated
by the dashed-line borders the warp cannot be inherently
TMR-ed because the threads within each cluster do not have
matching operands. On the other hand, the warp in Figure 5b
can be inherently TMR-ed with both implementations.
The warp in Figure 5c cannot be inherently TMR-ed
even with the warp-level implementation because the thread
assigned to L0 has unique source operands. Notice that the
ﬁgure shows the active mask bits on top of the SIMT lanes
and that L5 and L4 are idle because their active mask bits are
L5
L4
L3
L2
L1
L0
L5
L4
L3
L2
L1
L0
(a)
(b)
0
0
1
1
1
1
0
0
1
1
1
1
L5
L4
L3
L2
L1
L0
L5
L4
L3
L2
L1
L0
(c)
(d)
Fig. 5: TMR inherent redundancy and idle SIMT lanes
s
p
r
a
W
f
o
e
g
a
t
n
e
c
r
e
P
1 
0.8 
0.6 
0.4 
0.2 
0 
backprop 
Cluster-level  Warp-level 
heartwall 
btree 
kmeans 
lavaM D 
bfs 
hotspot 
gaussian 
Fig. 6: Opportunistic TMR
cutcp 
lbm 
Benchmarks 
mri-q 
nw 
pathfinder 
srad 
lud 
sgem m  CP 
sad 
LIB 
M U M 
Average 
NN  WP 
set to ”0”. When inherent redundancy is insufﬁcient, the idle
lanes can be exploited to replicate the non-inherently redundant
threads to achieve TMR. If idle lanes can be exploited at the
warp-level, then the thread assigned to L0 can be replicated
twice on the idle SIMT lanes L5 and L4. So,
the warp
in the ﬁgure becomes opportunistically TMR-ed by using a
combination of inherent and forced redundancy at the warp-
level. However, when cluster-level implementation restrictions
are placed then this warp cannot be opportunistically TMR-ed
since redundancy within the cluster boundary is not sufﬁcient.
Figure 5d shows a case where exploiting inherent redun-
dancy and idle SIMT lanes at the cluster-level is sufﬁcient
to provide TMR for the entire warp. In this scenario L2, L1
and L0 are within the same TMR cluster and are inherently
redundant. Also L3 has distinctive source operands, but can
be replicated twice on the idle lanes within its own cluster,
namely L5 and L4.
B. Quantifying Opportunistic TMR
We quantiﬁed the opportunistic TMR execution by measur-
ing the percentage of warp instructions that leverage inherent
redundancy and/or idle SIMT lanes to become opportunisti-
cally TMR-ed. The results are shown in Figure 6. On average,
56% and 47% of the warps can be opportunistically TMR-
ed with warp-level and cluster-level implementations, respec-
tively. These warps achieve error detection and correction
with minimal performance impact. Although the warp-level
implementation captures all possible warps which can be
opportunistically TMR-ed, its hardware complexity is higher.
Instead, the cluster-level implementation captures 86% of the
opportunities with much less complexity.
Similar to the DMR mode, we choose to leverage the op-
portunistic TMR execution by exploiting inherent redundancy
and idle SIMT lanes at the cluster-level in the Warped-RE
framework. Hence, during the TMR mode the active threads
within the warp are logically divided into clusters of size
three. The 1st TMR cluster consists of threads assigned to
(L2,L1,L0) and the 2nd cluster consists of threads assigned
to (L5,L4,L3), etc. In the Fermi architecture [8], the GPU
335335
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:52:38 UTC from IEEE Xplore.  Restrictions apply. 
1
1
0
L2
L1
L0
1
1
1
L2
L1
L0
1
1
1
L2
L1
L0
0
1
0
1
0
0
1
0
1
0
1
0
0
0
1
0
1
0