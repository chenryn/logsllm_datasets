**授权许可使用范围仅限于：清华大学。下载时间：2021年3月20日 09:58:58 UTC，来源：IEEE Xplore。本文件受使用限制。**

本文档讨论了一种通过重新映射寄存器以平衡访问频率、减少芯片峰值温度并提高处理器可靠性的技术。以下是对原文的优化整理：

### 寄存器重映射技术概述
图6展示了将逻辑寄存器名称转换为物理寄存器索引的门级逻辑电路设计示例（以bzip2为例）。在循环执行过程中，每个逻辑寄存器名称都会乘以偏移寄存器中的值。当遇到循环分支时，该偏移值会通过右移一位来实现乘以2的操作。同时，在这个例子中，混洗窗口由R1至R7组成，静态编码寄存器名称的最高有效位用于判断寄存器是否位于混洗窗口内。如果位于窗口内，则该寄存器是可移动的，其乘法结果作为物理寄存器索引；否则，直接使用不可移动寄存器的逻辑名称来访问寄存器文件。

需要注意的是，图6所示的具体实现参数仅为说明目的，并可根据应用的实际寄存器使用特性进行调整。从图6可以看出，所提出的寄存器混洗技术不需要硬件映射表，而只需要一个n位GF乘法器和一个n位2-to-1多路复用器，以及一个单个n位LFSR来记录混洗偏移量。此外，通过选择适当的生成多项式，可以高效地利用少量AND和XOR门实现GF乘法器。

对于其他大小的混洗窗口，可以采用模加法作为混洗函数。在这种情况下，需要一个n位模加器、一个n位比较器和一个n位2-to-1多路复用器，以及一个单独的n位加法器和n位寄存器来计算和记录混洗偏移量。尽管这种额外的硬件比基于XOR门的GF乘法器更复杂，但与传统寄存器重命名技术中使用的映射表相比，它仍然是微不足道的小成本。

由于逻辑和物理寄存器名称保留了循环体内的所有真实数据依赖关系，因此管道其余部分的行为（如转发逻辑）不会受到寄存器混洗过程的影响。此外，由于寄存器写入通常在较晚的管道阶段执行，因此可以在计算指令结果的同时并行执行寄存器名称翻译。即使对于寄存器读取访问，小型翻译逻辑的访问延迟也可以被有效地隐藏，因为在典型情况下，缓存访问构成了最长的管道阶段。

### 模拟结果
我们通过实验评估了所提寄存器旋转技术在平衡寄存器访问、降低全芯片峰值温度及提高处理器可靠性方面的有效性。为此，我们在MediaBench [23] 和SPECint 2000基准测试上进行了多项实验研究。

#### 寄存器访问结果
第IV-D节和IV-E节的讨论清楚地表明，可移动/不可移动寄存器的划分及其有效性与寄存器访问特性密切相关。因此，实验评估的第一步是检查每个循环中只读寄存器、有条件定义但无条件引用的寄存器以及未在循环中访问的寄存器的数量。这通过使用ATOM [24] 对汇编代码进行插桩以识别执行热点（即频繁执行的循环）并生成寄存器使用情况概要来实现。随后分析每个循环的控制流和寄存器使用信息。收集到的性能分析结果见表IV。

只有选定的SPEC 2000基准测试的结果被列出，因为这些基准测试由于工作集相对较大而表现出更平衡的寄存器利用率。对于每个基准测试，报告了已识别的热循环数量、它们在总执行时间中的占用率以及六组寄存器使用数据。表IV列出了最大、平均和最小的未访问寄存器数及活动未访问寄存器数，以及最大和平均的只读寄存器、热门只读寄存器、条件定义寄存器和热门条件定义寄存器的数量。后四组数据的最小值没有列出，因为这些值始终为零。

关于未访问寄存器最小数量的结果表明，ATOM识别的所有热循环至少有一个空闲寄存器，从而证实了所提出寄存器混洗技术的广泛适用性。由于代码规模较小，循环体内平均访问的寄存器数量少于9个。这种高度倾斜的寄存器利用率显然确认了像我们这里提出的寄存器混洗技术的必要性，以便提供更均衡的访问分布。

根据ATOM生成的寄存器使用情况概要，静态确定新的寄存器名称，并基于此对SimpleScalar工具集[25]进行了修改，以在一个顺序双发射处理器上实现了所提出的寄存器混洗技术。我们进一步将该技术与热感知寄存器重新分配技术[20]进行了比较。假设寄存器文件由8个子库组成，报告了两组数据，分别是每个独立寄存器和每个子库的访问分布。最常访问的寄存器和子库的累计比率如图7所示。可以看到，对于四个SPEC 2000基准测试，所提出的技术能够实现比热感知寄存器重新分配技术[20]更为均衡的独立寄存器访问分布。具体而言，最初81%至94%的寄存器访问集中在12个寄存器上，而在完全均衡的情况下，这12个寄存器应该只捕获总访问量的12/32=37.5%。使用静态寄存器重新分配（图7左上象限），64%至80%的总访问量集中在12个寄存器上，而使用所提出的寄存器混洗技术（图7右上象限），只有50%至60%的总访问量集中在12个寄存器上。如果以寄存器子库的粒度评估访问分布，两种技术都可以实现相当均衡的访问分布，仅有38%至40%的总访问量集中在12个寄存器上。与重新分配[20]技术相比，所提出的混洗技术导致mcf和twolf的首个子库访问次数略有增加（不到2%），这是因为寄存器R0的值严格对应于0且在几个循环体内经常被访问。在重新分配[20]技术中，R0可以放置在一个包含一组“冷”寄存器的子库中以平衡该子库的访问计数。然而，在所提出的技术中，“冷”寄存器会被迭代映射到“热”逻辑寄存器。因此，增加了的访问次数导致相应的子库被稍微更频繁地访问。

#### 温度结果
下一步评估重点在于生成温度剖面。WATTCH[26]经过修改后，可以生成每个硬件资源尤其是寄存器文件中每个寄存器的能量剖面。每次寄存器文件访问时消耗的小型5位加法器和多路复用器的功率也被包括在内。使用WATTCH提供的积极时钟门控来避免不必要的功耗。利用这些能量剖面，Hotspot[6]被用来采样每个硬件资源的瞬态温度。采样间隔设定为20,000条指令，远小于任何硬件资源的热时间常数。如图8所示，模拟中使用的平面布局是一个类似于Itanium的处理器[27]，晶片尺寸设置为8mm×8mm，初始温度设为60°C。获得的全芯片峰值温度降低结果见图9。可以看到，所提出的寄存器文件访问平衡技术可以实现全芯片峰值温度3.1至7.4°C的降低。最大的降温发生在art，而最小的降温发生在mcf。这些温度结果与寄存器访问结果一致，因为在art中实现了更均衡的访问分布，而mcf则相对不那么均衡。仿真结果证实，通过针对寄存器文件这一处理器中最易过热的硬件单元之一，所提出的技术可以在程序执行期间有效降低全芯片峰值温度。虽然温度降低看似不大，但实际上它可以显著降低整个芯片的故障率，因为每升高10°C，故障率就会翻倍[12]。同时，先前的研究表明，当峰值温度超过85°C时会发生大量延迟违规[4],[6]。从结果可以看出，对于大多数基准测试，所提出的算法可以有效地将峰值温度降至84°C以下。平均而言，所提出的技术将峰值温度从88.8°C降至83.5°C。

### 结论
本文介绍了一种通过减少寄存器文件（处理器中最易过热的模块之一）的峰值温度来提高整个芯片可靠性的技术。通过在局部热量积累前对重度访问的逻辑寄存器进行物理重新映射，可以有效控制峰值温度。此外，通过利用特定于应用程序的访问概要，编译器可以确定性地控制寄存器混洗过程，从而在有限的硬件预算下最大化峰值功耗的降低，并保持性能下降幅度极小。这种大幅降低的硬件复杂性使得所提出的技术能够轻松集成到大多数嵌入式处理器中，以有效降低整个芯片的峰值温度。对SPEC 2000和MediaBench程序的仿真结果进一步证实，所提出的寄存器混洗技术可以实现高达1.5至3倍更均衡的访问分布，并将全芯片峰值温度降低3.1至7.4°C。这种温度降低反过来又有效减少了运行时故障，从而提高了整个芯片的可靠性。

### 参考文献
此处省略了参考文献列表，实际文档中应完整列出所有引用的文献。