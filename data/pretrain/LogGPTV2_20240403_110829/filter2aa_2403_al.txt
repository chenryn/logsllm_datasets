.text:00000008    
la     $gp, (__gnu_local_gp & 0xFFFF) 
.text:0000000C    
sw     $ra, 0x20+var_4($sp) 
.text:00000010    
sw     $gp, 0x20+var_10($sp) 
; load address of printf(): 
.text:00000014    
lw     $t9, (printf & 0xFFFF)($gp) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 6 章  printf()函数与参数调用 
51 
; load address of the text string and set 1st argument of printf(): 
.text:00000018    
la    $a0, $LC0                # "a=%d; b=%d; c=%d" 
; set 2nd argument of printf(): 
.text:00000020    
li     $a1, 1 
; set 3rd argument of printf(): 
.text:00000024    
li     $a2, 2 
; call printf(): 
.text:00000028    
jalr  $t9 
; set 4th argument of printf() (branch delay slot): 
.text:0000002C    
li   $a3, 3 
; function epilogue: 
.text:00000030    
lw     $ra, 0x20+var_4($sp) 
; set return value to 0: 
.text:00000034    
move   $v0, $zero 
; return 
.text:00000038    
jr     $ra 
.text:0000003C    
addiu  #sp, 0x20 ; branch delay slot 
IDA 没有显示 0x1C 的指令。实际上 0x18 是“LUI”和“ADDIU”两条指令，IDA 把它们显示为单条
的伪指令，占用了 8 个字节。 
Non-optimizing GCC 4.4.5 
如果不启用编译器的优化选项，那么 GCC 输出的指令会详细得多。 
指令清单 6.12  Non-optimizing GCC 4.4.5（汇编输出） 
$LC0: 
         .ascii  "a=%d; b=%d; c=%d\000" 
main: 
; function prologue: 
         addiu   $sp,$sp,-32 
         sw      $31,28($sp) 
         sw       $fp,24($sp) 
         move     $fp,$sp 
         lui  
$28,%hi(__gnu_local_gp) 
         addiu  $28,$28,%lo(__gnu_local_gp) 
; load address of the text string 
         lui      $2,%hi($LC0) 
         addiu    $2,$2,%lo($LC0) 
; set 1st argument of printf(): 
         move     $4,$2 
; set 2nd argument of printf(): 
         li       $5,1        
# 0x1 
; set 3rd argument of printf(): 
         li       $6,2    
# 0x2 
; set 4th argument of printf():  
         li      $7,3    
# 0x3 
; get address of printf(): 
         lw    
$2,%call16(printf)($28) 
         nop 
; call printf(): 
         move   
$25,$2 
         jalr   
$25 
         nop 
; function epilogue: 
         lw    
$28,16($fp) 
; set return value to 0: 
         move  
$2,$0 
         move  
$sp,$fp 
         lw    
$31,28($sp) 
         lw    
$fp,24($sp) 
         addiu 
$sp,$sp,32 
; return 
         j  
#31 
         nop 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
52 
逆向工程权威指南（上册） 
指令清单 6.13  Non-optimizing GCC 4.4.5 (IDA) 
.text:00000000 main: 
.text:00000000 
.text:00000000 var_10   
= -0x10 
.text:00000000 var_8     
= -8 
.text:00000000 var_4     
= -4 
.text:00000000 
; function prologue: 
.text:00000000     
addiu  
$sp, -0x20 
.text:00000004     
sw      
$ra, 0x20+var_4($sp) 
.text:00000008     
sw       
$fp, 0x20+var_8($sp) 
.text:0000000C     
move     
$fp, $sp 
.text:00000010     
la       
$gp, __gnu_local_gp 
.text:00000018    
sw    
$gp, 0x20+var_10($sp) 
; load address of the text string: 
.text:0000001C  
la     
$v0, aADBDCD  # "a=%d; b=%d; c=%d" 
; set 1st argument of printf(): 
.text:00000024   
move   
$a0, $v0 
; set 2nd argument of printf(): 
.text:00000028     
li      
$a1, 1 
; set 3rd argument of printf(): 
.text:0000002C     
li       
$a2, 2 
; set 4th argument of printf(): 
.text:00000030     
li       
$a3, 3 
; get address of printf(): 
.text:00000034     
lw       
$v0, (printf & 0xFFFF)($gp) 
.text:00000038     
or       
$at, $zero 
; call printf(): 
.text:0000003C     
move     
$t9, $v0 
.text:00000040     
jalr     
$t9 
.text:00000044     
or       
$at, $zero ; NOP 
; function epilogue: 
.text:00000048     
lw       
$gp, 0x20+var_10($fp) 
; set return value to 0: 
.text:0000004C     
move     
$v0, $zero 
.text:00000050     
move     
$sp, $fp 
.text:00000054     
lw       
$ra, 0x20+var_4($sp) 
.text:00000058     
lw       
$fp, 0x20+var_8($sp) 
.text:0000005C     
addiu    
$sp, 0x20 
; return 
.text:00000060     
jr       
$ra 
.text:00000064     
or       
$at, $zero ; NOP 
6.3.2 传递 9 个参数 
我们再次使用 6.1.2 节中的例子，演示 9 个参数的传递。 
#include  
int main()  
{ 
         printf("a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d\n", 1, 2, 3, 4, 5, 6, 7, 8); 
         return 0;  
}; 
Optimizing GCC 4.4.5 
在传递多个参数时，MIPS 会使用$A0~$A3 传递前 4 个参数，使用栈传递其余的参数。这种平台主要
采用一种名为“O32”的函数调用约定。实际上大多数 MIPS 系统都采用这种约定。如果采用了其他的函
数调用约定，例如 N32 约定，寄存器的用途则会有不同的设定。 
下面指令中的“SW”是“Store Word”的缩写，用以把寄存器的值写入内存。MIPS 的指令集很小，
没有把数据直接写入内存地址的那类指令。当需要进行这种操作时，就不得不组合使用 LI/SW 指令。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 6 章  printf()函数与参数调用 
53 
指令清单 6.14  Optimizing GCC 4.4.5 (汇编输出) 
$LC0: 
         .ascii  "a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d\012\000" 
main: 
; function prologue: 
         lui    
$28,%hi(__gnu_local_gp) 
         addiu  $sp,$sp,-56 
         addiu  $28,$28,%lo(__gnu_local_gp) 
         sw       $31,52($sp) 
; pass 5th argument in stack: 
         li       $2,4           
# 0x4 
         sw       $2,16($sp) 
; pass 6th argument in stack: 
         li       $2,5           
# 0x5 
         sw       $2,20($sp) 
; pass 7th argument in stack: 
         li       $2,6       
# 0x6 
        sw       
$2,24($sp) 
; pass 8th argument in stack: 
         li       $2,7        
# 0x7 
         lw    
$25,%call16(printf)($28) 
         sw       $2,28($sp) 
; pass 1st argument in $a0: 
         lui      $4,%hi($LC0) 
; pass 9th argument in stack: 
         li       $2,8        
# 0x8 
         sw       $2,32($sp) 
         addiu    $4,$4,%lo($LC0) 
; pass 2nd argument in $a1: 
         li       $5,1           
# 0x1 
; pass 3rd argument in $a2: 
         li       $6,2           
# 0x2 
; call printf(): 
         jalr     $25 
; pass 4th argument in $a3 (branch delay slot): 
         li       $7,3           
# 0x3 
; function epilogue: 
         lw   
$31,52($sp) 
; set return value to 0: 
         move     $2,$0 
; return 
         j    
$31 
         addiu    $sp,$sp,56 ; branch delay slot 
指令清单 6.15  Optimizing GCC 4.4.5 (IDA) 
.text:00000000 main: 
.text:00000000 
.text:00000000 var_28      = -0x28 
.text:00000000 var_24      = -0x24  
.text:00000000 var_20      = -0x20  
.text:00000000 var_1C      = -0x1C 
.text:00000000 var_18      = -0x18 
.text:00000000 var_10      = -0x10 
.text:00000000 var_4       =-4 
.text:00000000     
; function prologue: 
.text:00000000          
lui    
$gp, (__gnu_local_gp >> 16) 
.text:00000004          
addiu    
$sp, -0x38 
.text:00000008          
la       
$gp, (__gnu_local_gp & 0xFFFF) 
.text:0000000C          
sw       
$ra, 0x38+var_4($sp) 
.text:00000010          
sw       
$gp, 0x38+var_10($sp) 
; pass 5th argument in stack: 
.text:00000014          
li       
$v0, 4 
.text:00000018          
sw       
$v0, 0x38+var_28($sp) 
; pass 6th argument in stack: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
54 
逆向工程权威指南（上册） 
.text:0000001C          
li       
$v0, 5 
.text:00000020          
sw       
$v0, 0x38+var_24($sp) 
; pass 7th argument in stack: 
.text:00000024          
li       
$v0, 6 
.text:00000028          
sw       
$v0, 0x38+var_20($sp) 
; pass 8th argument in stack: 
.text:0000002C          
li       