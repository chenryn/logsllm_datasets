### A. Taxonomy

To illustrate the security properties of our stack protection policies and to contextualize them with other stack protection research, we present a taxonomy of stack threats in Figure 9. This taxonomy categorizes threats based on the primary dimensions in which they differ and identifies which protection mechanisms provide defense against each threat.

1. **Prevention of Reading Unused Stack Memory:**
   - We first examine whether the protection mechanism prevents the reading of unused stack memory, where previous functions may have left critical data such as security keys.

2. **Prevention of Overwriting Return Addresses:**
   - Next, we assess whether the protection mechanism prevents the overwriting of return addresses, a common method for control flow hijacking attacks.

3. **Memory Safety Attacks:**
   - We differentiate between two types of memory safety attacks, as described in [26]:
     - **Contiguous Case:** The attacker must access memory contiguously from an existing pointer (e.g., controlling the source of an unchecked `strcpy`).
     - **Arbitrary Case:** The attacker can access memory arbitrarily (e.g., controlling both the source of an unchecked `strcpy` and the index into the destination buffer).

4. **Protection of Other Stack Data:**
   - Many stack protection mechanisms focus solely on protecting return addresses. However, other items stored on the stack, such as function pointers, permission bits, security keys, and private information, are also security-critical. Our taxonomy includes threats related to accessing these other stack data.
   - We distinguish between read accesses (R) and read/write accesses (RW) to highlight where violations are detected and enforced in different policies.

5. **Overhead Analysis:**
   - Finally, we provide an analysis of the overhead associated with each protection mechanism.

### B. Microbenchmarks

Given the challenges of porting an existing security benchmarking suite, such as RIPE [46], to our Alpha platform, we developed a set of security microbenchmarks for testing and characterizing our policies. For each threat in the taxonomy, we created a simple vulnerable C program and crafted payloads that enable an attacker to execute the specific threat. Our system halts the offending program at the expected instruction if the threat is successfully prevented (indicated by a checkmark in the taxonomy), and does not halt the program if the threat is not prevented (indicated by an X). Note that the checkmarks or Xs in the taxonomy are based on our understanding of the work rather than empirical evaluation.

### VIII. Related Work

#### A. Stack Protection

Stack memory safety exploits are prevalent, leading to numerous defensive efforts [4]. Traditional protection mechanisms like Data Execution Prevention (DEP) and Address Space Layout Randomization (ASLR) enhance security but do not eliminate all vulnerabilities. For example:
- **DEP** does not protect against code reuse attacks such as Return-Oriented Programming (ROP) [47, 48, 49, 50].
- **ASLR** can be bypassed with information leaks [51].

These limitations underscore the need for more robust and comprehensive stack protection mechanisms.