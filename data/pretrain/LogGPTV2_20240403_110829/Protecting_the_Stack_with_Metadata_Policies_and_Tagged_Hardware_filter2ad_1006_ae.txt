A. Taxonomy
To demonstrate the security properties of our stack protec-
tion policies and relate them to other stack protection work,
we provide a taxonomy of stack threats in Figure 9. We select
threats that decompose stack protection mechanisms along
487
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:21 UTC from IEEE Xplore.  Restrictions apply. 
)
Baseline
Cache Line Tagging
Lazy Tagging
Lazy Tagging+Cache Line Tagging
Lazy Tagging+Clearing
%
(
d
h
v
O
e
m
i
t
n
u
R
)
%
(
d
h
v
O
e
m
i
t
n
u
R
60
40
20
0
60
40
20
0
r
a
t
s
a
s
e
v
a
w
b
2
p
z
b
i
I
I
l
a
e
d
s
s
e
m
a
g
M
D
A
s
u
t
c
a
c
D
T
D
F
s
m
e
G
c
c
g
k
m
b
o
g
s
c
a
m
o
r
g
f
e
r
4
6
2
h
r
e
m
m
h
m
b
l
d
3
e
i
l
s
e
l
m
u
t
n
a
u
q
b
i
l
f
c
m
c
l
i
m
d
m
a
n
p
p
t
e
n
m
o
h
c
n
e
b
l
r
e
p
g
n
e
s
j
3
x
n
h
p
s
i
l
x
e
p
o
s
p
m
s
u
e
z
n
a
e
m
Fig. 7: Optimizations applied to Static Authorities
Baseline
Cache Line Tagging
Lazy Tagging
Lazy Tagging+Cache Line Tagging
Lazy Tagging+Clearing
r
a
t
s
a
s
e
v
a
w
b
2
p
z
b
i
I
I
l
a
e
d
s
s
e
m
a
g
M
D
A
s
u
t
c
a
c
D
T
D
F
s
m
e
G
c
c
g
k
m
b
o
g
s
c
a
m
o
r
g
f
e
r
4
6
2
h
r
e
m
m
h
m
b
l
d
3
e
i
l
s
e
l
t
m
u
n
a
u
q
b
i
l
f
c
m
c
l
i
m
d
m
a
n
t
p
p
e
n
m
o
h
c
n
e
b
l
r
e
p
g
n
e
s
j
3
x
n
h
p
s
i
l
x
e
p
o
s
p
m
s
u
e
z
n
a
e
m
Fig. 8: Optimizations applied to Depth Isolation
the main dimensions in which they differ and show which
protection mechanisms provide protection against each threat.
First, we show whether the protection mechanism prevents
the reading of unused stack memory, where previous functions
may have left critical data (security keys, etc). Next, we show
whether the protection mechanism prevents return addresses
from being overwritten, which is the most common vehicle for
control ﬂow hijacking attacks. We differentiate between two
kinds of memory safety attacks as in [26], the contiguous case
and the arbitrary case. In the contiguous case, an attacker must
access memory contiguously from an existing pointer (e.g., the
attacker controls the source of an unchecked strcpy); in the
arbitrary case, an attacker can access memory arbitrarily (e.g.,
the attacker controls the source of an unchecked strcpy and
the index into the destination buffer).
Many stack protection mechanisms only protect return ad-
dresses. However, many of the other items stored on the stack
are security-critical as well—these include code pointers such
as function pointers, permissions bits, security keys and private
information among many other possibilities, so the last threats
in the taxonomy concern accesses to other stack data. We
differentiate read accesses (R) from read/write accesses (
)
to discriminate where violations are detected and enforced in
different policies. Finally, we show the overhead for each of
the protection mechanisms.
B. Microbenchmarks
Due to the difﬁculty of porting an existing security bench-
marking suite such as RIPE [46] to Alpha, we instead con-
structed a set of security microbenchmarks for testing and
characterizing our policies. We use a simple vulnerable C
program for each of the threats in taxonomy and craft payloads
that allow an attacker to execute the threat shown. Our system
halts the offending program at the expected instruction when
we display a
in the taxonomy and does not halt the program
when we display X. Note that for the rest of the security
or X comes from our
mechanisms in the taxonomy, the
understanding of the work and not an empirical evaluation.
VIII. RELATED WORK
A. Stack Protection
Due to the prevalence of stack memory safety exploits,
stacks have been the subject of many defensive efforts [4].
Traditional protection mechanisms such as Data Execution
Prevention (DEP) and Address Space Layout Randomization
(ASLR) increase the difﬁculty of conducting attacks, but do
not prevent them entirely. For example, DEP does not protect
against code reuse attacks such as ROP [47], [48], [49], [50],
and ASLR can be subverted with information leaks [51].