title:Code Reuse Attacks in PHP: Automated POP Chain Generation
author:Johannes Dahse and
Nikolai Krein and
Thorsten Holz
Code Reuse Attacks in PHP:
Automated POP Chain Generation
Johannes Dahse, Nikolai Krein, and Thorsten Holz
Horst Görtz Institute for IT-Security (HGI)
Ruhr-University Bochum, Germany
{ﬁrstname.lastname}@rub.de
ABSTRACT
Memory corruption vulnerabilities that lead to control-ﬂow
hijacking attacks are a common problem for binary executa-
bles and such attacks are known for more than two decades.
Over the last few years, especially code reuse attacks at-
tracted a lot of attention.
In such attacks, an adversary
does not need to inject her own code during the exploitation
phase, but she reuses existing code fragments (so called gad-
gets) to build a code chain that performs malicious compu-
tations on her behalf. Return-oriented programming (ROP)
is a well-known technique that bypasses many existing de-
fenses. Surprisingly, code reuse attacks are also a viable
attack vector against web applications.
In this paper, we study code reuse attacks in the con-
text of PHP-based web applications. We analyze how PHP
object injection (POI) vulnerabilities can be exploited via
property-oriented programming (POP) and perform a sys-
tematic analysis of available gadgets in common PHP appli-
cations. Furthermore, we introduce an automated approach
to statically detect POI vulnerabilities in object-oriented
PHP code. Our approach is also capable of generating POP
chains in an automated way. We implemented a prototype of
the proposed approach and evaluated it with 10 well-known
applications. Overall, we detected 30 new POI vulnerabili-
ties and 28 new gadget chains.
Categories and Subject Descriptors
F.3.2 [Semantics of Programming Languages]: Pro-
gram analysis
General Terms
Security
Keywords
Static Code Analysis; Web Security; PHP Object Injection;
Property-Oriented Programming; Code Reuse Attacks
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660363.
1.
INTRODUCTION
Memory corruption vulnerabilities, such as buﬀer over-
ﬂows, format string bugs, and dangling pointers, are known
for a long time and still constitute an intractable class of pro-
gramming mistakes [37, 41]. While defense techniques such
as address space layout randomization (ASLR) and data ex-
ecution prevention (DEP) are widely deployed to hamper
the exploitation of such vulnerabilities, an adversary can
still utilize diﬀerent techniques to circumvent such defenses.
Especially code reuse techniques, such as for example return-
to-libc [32], return-oriented programming (ROP) [27], and
jump-oriented programming (JOP) [3], have received a lot of
attention since they are able to bypass several kinds of se-
curity protections. With ROP and JOP, an attacker reuses
available code fragments in memory (so called gadgets) and
joins them together to construct the attack payload piece by
piece (so called gadget chains) in scenarios where she cannot
inject her own code.
In 2009, Esser showed that code reuse attacks are also
viable in PHP-based web applications [9, 10]. More speciﬁ-
cally, he introduced a similar exploitation approach for ob-
ject injection vulnerabilities in web applications which abuses
the ability of an attacker to arbitrarily modify the proper-
ties of an object that is injected into a given web applica-
tion. Thus, the data and control ﬂow of the application can
be manipulated and he coined the term Property-Oriented
Programming (POP). In the past ﬁve years, many object in-
jection vulnerabilities were detected in popular open-source
PHP software such as Wordpress, Joomla, and Piwik. They
can lead to critical security vulnerabilities, such as remote
code execution, and aﬀect a majority of web servers since
PHP is the most popular scripting language on the Web
with a market share of more than 80% [43].
Similar to well-understood injection vulnerabilities such as
cross-site scripting (XSS) [19] and SQL injection (SQLi) [13],
PHP object injection (POI) vulnerabilities in a given ap-
plication can be detected with the help of taint analysis.
Broadly speaking, a vulnerability report is generated when
untrusted user input reaches a security-sensitive sink [28].
Several analysis frameworks to detect diﬀerent kinds of injec-
tion vulnerabilities were proposed in the last years [1, 18, 44,
46]. Recently, we presented a static code analysis approach
that detects 20 types of injection vulnerabilities, including
POI vulnerabilities [6]. However, no existing analysis tool
is capable of deciding whether a given POI vulnerability
is actually exploitable or not. This is a challenging analy-
sis task since we need to identify a combination of gadgets
in the code that allows an attacker to trigger another vul-
42nerability by manipulating the control and data ﬂow. Fur-
thermore, complex object-oriented programming (OOP) fea-
tures of PHP require a comprehensive analysis and—to the
best of our knowledge—no existing static analysis tool for
PHP-based web applications supports OOP analysis.
In this paper, we tackle these challenges and present the
ﬁrst automated approach to detect POP gadget chains to
conﬁrm POI vulnerabilities. By performing static code anal-
ysis that supports the analysis of PHP’s OOP features, we
are able to collect sensitive sinks in the application’s code
that can be reached after a PHP object was injected. More
speciﬁcally, we propose an inter-procedural, ﬁeld-sensitive,
and object-sensitive data ﬂow analysis that we can leverage
to analyze the relevant OOP features. By analyzing the re-
sulting path, we can also construct an actual attack payload
for each detected gadget chain. The resulting chains allow us
to verify the ability to exploit a potential POI vulnerability.
We have implemented a prototype of the proposed analysis
approach and tested it with 10 real-world applications vul-
nerable to PHP object injection. Besides conﬁrming most
of the previously reported POI in these applications in an
automated way, our prototype reported several previously
unknown POI vulnerabilities and gadget chains with only
few false positives.
In summary, we make the following three contributions:
• We perform a systematic analysis of PHP object injec-
tion (POI) vulnerabilities and demonstrate how such
vulnerabilities can be exploited via Property-Oriented
Programming (POP), a variant of code reuse attacks
against web applications.
• We are the ﬁrst to propose an automated approach to
statically detect POI vulnerabilities in object-oriented
PHP code and to automatically verify the severity by
constructing exploitable gadget chains.
• We evaluated our approach for 10 well-known applica-
tions recently aﬀected by a PHP object injection vul-
nerability. As a result, we detected 30 new POI vul-
nerabilities and 28 new gadget chains.
2. PHP OBJECT INJECTION
A PHP Object Injection (POI) vulnerability occurs when
unsanitized user input is used during the deserialization of
data in a given application. PHP features so called serializa-
tion and deserialization functions that allow a programmer
to store data of any type in an uniﬁed string format. This
format makes it easy to transfer combined data structures
and is often misused to create multidimensional cookies and
similar data structures.
Since PHP allows deserialization of arbitrary objects, an
attacker might be able to inject a specially prepared ob-
ject with an arbitrary set of properties into the application’s
scope. Depending on the context, the attacker can trigger
so called magic methods [39] and this potentially leads to
a variety of vulnerabilities. Note that the type of vulnera-
bility is highly dependent on the classes’ implementation of
their magic methods. Each magic method might call another
(potentially security-relevant) PHP function (e.g., eval() or
fwrite()) with attacker-controlled member variables as ar-
guments that can lead to remote code execution, ﬁle inclu-
sion, SQL injection, and any other kind of vulnerabilities.
We now introduce the concepts of magic methods (Sec-
tion 2.1) and serialization (Section 2.2) in PHP. Both PHP
features form the basis to exploit a POI vulnerability by
utilizing Property Oriented Programming. This exploit tech-
nique combines both features and is described in Section 2.3.
It is one of the most sophisticated attack techniques against
PHP applications since it requires reusing already existing
code in the application’s classes.
2.1 Magic Methods in PHP
The concept of object-oriented programming (OOP) was
considerably enhanced in version 5 of PHP and since then in-
cludes destructors, exceptions, interfaces, and further object-
oriented concepts. OOP allows to logically encapsulate data
and functionality in objects, while their implementation re-
side in the class deﬁnition. Each class can be initialized into
an object that contains properties and methods that are de-
ﬁned in their designated class. These properties are called
attributes (or ﬁelds), while methods describe a function ac-
cessible to an object.
Magic methods play an important role when exploiting
POI vulnerabilities since they are automatically executed
upon speciﬁc events. As we will see later on, they can be
used to start a POP gadget chain. The following magic
methods fulﬁll a special purpose and can be deﬁned once
per class:
• __construct(): This magic method implements the
constructor inside a class that is called whenever a new
object of that class is created. It is often used to initial-
ize the object’s attributes or to run other code before
the object can actually be used.
• __destruct(): In contrast to the __construct() func-
tion, __destruct() is executed whenever the script
terminates or the reference count of an object reaches
zero.
It is often used to invoke code that cleans up
used data or terminates connections that were possi-
bly established after the object was created.
• __call(): This function is always invoked when an
inaccessible method of an object is called (e. g., $obj
->invalid_method()).
It is handy in terms of error
handling, since accessing invalid methods usually re-
sults in a fatal error and termination of the PHP ap-
plication.
• __callStatic(): Similar to __call(), this magic func-
tion catches inaccessible calls in static context (e. g.,
obj::invalid_method()).
• __get($name): The method __get() is automatically
called when trying to read private, protected, or non-
existent properties of an object. Since private and
protected properties cannot be directly accessed from
outside the object, the parameter $name is used to ref-
erence the desired property.
• __set($name, $value): The method __set() is au-
tomatically called when trying to write to private or
protected properties of an object. Because this is pro-
hibited, this function allows the application to handle
assignments such as $obj->private = ’value’.
• __isset(): Similar to previously mentioned methods,
this function is called whenever isset() or empty() is
used on a non-existent property.
• __unset(): Every time unset() is used on non-existent
properties, this function is called with an argument
43that describes the name of the variable that the appli-
cation wants to unset.
• __sleep(): This magic method is triggered whenever
an object is serialized.
It gives the programmer the
ability to let the object run any sort of cleanup-code
before serialization.
• __wakeup(): In contrast to __sleep(), __wakeup() is
called directly after deserialization. It is often used to
reinitialize the application’s state that was lost during
serialization, for example the connection to a database.
• __toString(): Whenever an object is used in a string
context (e.g., when it is concatenated with a string),
this method is invoked to return a string representation
of the object.
• __invoke(): This method is called whenever an object
• __set_state($properties): Within an application,
the function var_export() is used in order to display
any sort of data as parsable PHP code. If an object is
used as argument, the method __set_state() is called
to deﬁne which properties are exported.
• __clone() This function is called when an object is
cloned by the clone operator. It is equivalent to copy-
constructors known in other languages. By implement-
ing this method in a class, the programmer can specify
what exactly should happen during cloning.
is used as a dynamic function name (e. g., $obj()).
2.2 Serialization in PHP
PHP supports serialization and deserialization of all de-
ﬁned data types—including objects. Serialization is realized
through the built-in function serialize() which accepts a
single parameter and returns a serialized string that can be
fed into unserialize() in order to retrieve said data again.
This string is represented in an uniﬁed format which con-
sists of several identiﬁers that specify the serialized data
type. These identiﬁers have the following purpose:
• a: – deﬁnes that the passed parameter is an array. a:
is always followed by a numerical value that speciﬁes
the size of the array.
• i: – simply deﬁnes a numerical value, e. g., i:8;.
• b: – speciﬁes a boolean value, e. g., b:0; or b:1;.
• s: – deﬁnes a constant string. s: is always followed
by a numerical value which declares the length of the
string, e. g., s:4:"test";.
• S: – deﬁnes a constant string in encoded format.
• O: – represents an object in its serialized form. O:
is followed by the length of the class name and by
the name itself, e. g., O:1:"A". It is then followed by
the number of properties and the deﬁned properties
themselves. Note that a property can also consist of
another object with its deﬁned properties.
Further identiﬁers, such as r: and R:, exist that can be
used to store references, but they are out of scope for our
purpose. An example of the functionality behind PHP’s
serialization is given in the Listing 1. Line 2 serializes the
array deﬁned in line 1 and it therefore returns the string in
line 4 which is then fed into unserialize() again. Line 6
then shows that the deserialization of the array returns the
same values as they were previously deﬁned.
1 $arr = array(1 => 2, 3 => "string");
2 $serialized = serialize($arr);
3 print $serialized . "\n";
4 // a:2:{i:1;i:2;i:3;s:6:"string";}
5 var_export(unserialize($serialized));
6 // array ( 1 => 2, 3 => ’string’ )
Listing 1: Exemplary serialization of an array.
2.3 Property Oriented Programming
There are two preconditions that a PHP application needs
to meet so that POP can be used to exploit a POI vulner-
ability. First, at least one magic method which gets called
during the application’s runtime needs to be deﬁned in an
object’s class that the attacker wants to inject. Second, the
chosen class needs to be loaded within the scope of the vul-
nerable unserialize() call the attacker passes her input to.
Each magic method can either be context-dependent or
context-independent. Context-dependent means that an ob-
ject has to be used in a certain way so that a magic method
gets executed (see Section 2.1). Other magic methods are
called automatically during the application’s lifetime: the
method __wakeup() and __destruct() is context-indepen-
dent since __wakeup() is always called directly after dese-
rialization of an object and __destruct() is always called
once the object is destroyed. Both methods might contain
suspicious code while using properties that can be arbitrarily
deﬁned when the object is deserialized.
Passing user input into the unserialize() function en-
ables an attacker to inject specially crafted objects with cho-
sen properties that will be used inside the magic method.
However, when only context-dependent methods such as
__toString() or __call() exist, the attacker has to choose
a code path where the deserialized object is used accordingly
to trigger the magic method. These code paths are often a
lot more scarce and thus context-independent methods are
a better choice for attacks.
Each magic method might also call diﬀerent methods of
other objects which are linked as members to the ﬁrst ob-
ject. In this scenario, it makes sense to check all other object
methods, which can also be denoted as gadgets, for danger-
ous sinks that can all be joined to a complete injectable POP
chain. Listing 2 shows an excerpt of a vulnerable application
where three gadgets are combined to achieve an arbitrary ﬁle
deletion.
1 class File {
2
public function shutdown() {
3
4
5
6
$this->close();
}
public function close() {
fclose($this->h); // harmless
}
7
8 }
9 class TempFile extends File {
10
11
public function close() {
unlink(’/var/www/tmp/logs/’ . $this->filename); // !!
}