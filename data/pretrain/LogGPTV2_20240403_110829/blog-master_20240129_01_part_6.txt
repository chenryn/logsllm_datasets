strict_word_similarity    
postgres=# select strict_word_similarity('abc','abc hello');    
 strict_word_similarity     
------------------------    
                      1    
(1 row)    
postgres=# select strict_word_similarity('abc hello','abc');    
 strict_word_similarity     
------------------------    
                    0.4    
(1 row)    
postgres=# select similarity('word', 'wor ord');    
 similarity     
------------    
      0.625    
(1 row)    
postgres=# select similarity('word', 'ord wor');    
 similarity     
------------    
      0.625    
(1 row)    
postgres=# select word_similarity('word', 'ord wor');    
 word_similarity     
-----------------    
               1    
(1 row)    
postgres=# select word_similarity('word', 'wor ord');    
 word_similarity     
-----------------    
           0.625    
(1 row)    
postgres=# select strict_word_similarity('word', 'wor ord');    
 strict_word_similarity     
------------------------    
                  0.625    
(1 row)    
postgres=# select strict_word_similarity('word', 'ord wor');    
 strict_word_similarity     
------------------------    
                  0.625    
(1 row)    
```    
六、思考      
为什么传统方法与pg_trgm相比性能相差这么大?    
字符串近似查询还可以应用于哪些场景?     
如果将相似度调低, 性能还能这么好吗?      
如果想返回最相似的一条, 怎么优化查询效果最佳?     
和smlar插件相比, 搜索算法是否有相似之处?     
### 3、营销场景, 根据用户画像的相似度进行目标人群圈选, 实现精准营销    
在营销场景中, 通常会对用户的属性、行为等数据进行统计分析, 生成用户的标签, 也就是常说的用户画像.    
标签举例: 男性、女性、年轻人、大学生、90后、司机、白领、健身达人、博士、技术达人、科技产品爱好者、2胎妈妈、老师、浙江省、15天内逛过手机电商店铺、... ...    
有了用户画像, 在营销场景中一个重要的营销手段是根据条件选中目标人群, 进行精准营销.    
例如圈选出包含这些标签的人群: 白领、科技产品爱好者、浙江省、技术达人、15天内逛过手机电商店铺 .    
这个实验的目的是在有画像的基础上, 如何快速根据标签组合进行人群圈选 .    
一、准备数据  
设计1张标签元数据表, 后面的用户画像表从这张标签表随机抽取标签.  业务查询时也从这里搜索存在的标签并进行圈选条件的组合, 得到对应的标签ID组合.    
```    
drop table if exists tbl_tag;    
create table tbl_tag (    
  tid int primary key,  -- 标签id    
  tag text,  -- 标签名    
  info text  -- 标签描述    
);    
```    
假设有1万个标签, 写入标签元数据表.    
```    
insert into tbl_tag select id, md5(id::text), md5(random()::text) from generate_series(1, 10000) id;    
```    
创建2个函数, 产生若干的标签. 用来模拟产生每个用户对应的标签数据.  分别返回字符串和数组类型.    
第一个函数, 随机提取若干个标签, 始终包含1-100的热门标签8个, 返回用户标签字符串:    
```    
create or replace function get_tags_text(int) returns text as $$    
  with a as (select string_agg(tid::text, ',') s from tbl_tag where tid = any (array(select ceil(random()*100)::int from generate_series(1,8) group by 1)))    
  , b as (select string_agg(tid::text, ',') s from tbl_tag where tid = any (array(select ceil(100+random()*9900)::int from generate_series(1,$1) group by 1)))    
  select ','||a.s||','||b.s||',' from a,b;    
$$ language sql strict;    
```    
得到类似这样的结果:    
```    
postgres=# select get_tags_text(10);    
                            get_tags_text    
----------------------------------------------------------------------    
 ,11,12,39,44,45,59,272,1001,1322,1402,2514,6888,7404,8922,9200,9409,    
(1 row)    
postgres=# select get_tags_text(10);    
                             get_tags_text    
------------------------------------------------------------------------    
 ,12,34,52,55,71,79,88,302,582,1847,3056,5156,8231,8542,8572,8747,9727,    
(1 row)    
```    
第二个函数, 随机提取若干个标签, 始终包含1-100的热门标签8个, 返回用户标签数组:    
```    
create or replace function get_tags_arr(int) returns int[] as $$    
  with a as (select array_agg(tid) s from tbl_tag where tid = any (array(select ceil(random()*100)::int from generate_series(1,8) group by 1)))    
  , b as (select array_agg(tid) s from tbl_tag where tid = any (array(select ceil(100+random()*9900)::int from generate_series(1,$1) group by 1)))    
  select a.s||b.s from a,b;    
$$ language sql strict;    
```    
得到类似这样的结果:    
```    
postgres=# select * from get_tags_arr(10);    
                                get_tags_arr    
----------------------------------------------------------------------------    
 {13,35,42,61,67,69,76,78,396,2696,3906,4356,5064,5711,7363,9417,9444,9892}    
(1 row)    
postgres=# select * from get_tags_arr(10);    
                              get_tags_arr    
-------------------------------------------------------------------------    
 {2,10,20,80,84,85,89,3410,3515,4159,4182,5217,6549,6775,7289,9141,9431}    
(1 row)    
```    
二、传统方法设计和实验    
传统数据库没有数组类型, 所以需要用字符串存储标签.    
创建用户画像表    
```    
drop table if exists tbl_users;    
create unlogged table tbl_users (  -- 为便于加速生成测试数据, 使用unlogged table    
  uid int primary key,   -- 用户id    
  tags text   -- 该用户拥有的标签 , 使用字符串类型    
);    
```    
创建100万个用户, 用户被贴的标签数从32到256个, 随机产生, 其中8个为热门标签(例如性别、年龄段等都属于热门标签).    
```    
insert into tbl_users select id, get_tags_text(ceil(24+random()*224)::int) from generate_series(1,1000000) id;    
```    
测试如下, 分别搜索包含如下标签组合的用户:    
- 2    
- 2,8    
- 2,2696    
- 2,4356,5064,5711,7363,9417,9444    
- 4356,5064,5711,7363,9417,9444    
使用如下SQL:    
```    
select uid from tbl_users where tags like '%,2,%';    
select uid from tbl_users where tags like '%,2,%' or tags like '%,8,%';    
select uid from tbl_users where tags like '%,2,%' or tags like '%,2696,%';    
select uid from tbl_users where tags like '%,2,%' or tags like '%,4356,%' or tags like '%,5064,%' or tags like '%,5711,%' or tags like '%,7363,%' or tags like '%,9417,%' or tags like '%,9444,%' ;    
select uid from tbl_users where tags like '%,4356,%' or tags like '%,5064,%' or tags like '%,5711,%' or tags like '%,7363,%' or tags like '%,9417,%' or tags like '%,9444,%' ;    
```    
查看以上SQL运行的执行计划和耗时如下:    
```    
postgres=# explain analyze select uid from tbl_users where tags like '%,2,%';    
                                                    QUERY PLAN    
-------------------------------------------------------------------------------------------------------------------    
 Seq Scan on tbl_users  (cost=0.00..103268.00 rows=80808 width=4) (actual time=0.018..1108.805 rows=77454 loops=1)    
   Filter: (tags ~~ '%,2,%'::text)    
   Rows Removed by Filter: 922546    
 Planning Time: 1.095 ms    
 Execution Time: 1110.267 ms    
(5 rows)    
postgres=# explain analyze select uid from tbl_users where tags like '%,2,%' or tags like '%,8,%';    
                                                     QUERY PLAN    
---------------------------------------------------------------------------------------------------------------------    
 Seq Scan on tbl_users  (cost=0.00..105768.00 rows=127232 width=4) (actual time=0.029..2001.379 rows=149132 loops=1)    
   Filter: ((tags ~~ '%,2,%'::text) OR (tags ~~ '%,8,%'::text))    
   Rows Removed by Filter: 850868    
 Planning Time: 1.209 ms    
 Execution Time: 2004.062 ms    
(5 rows)    
postgres=# explain analyze select uid from tbl_users where tags like '%,2,%' or tags like '%,2696,%';    
                                                    QUERY PLAN    
-------------------------------------------------------------------------------------------------------------------    
 Seq Scan on tbl_users  (cost=0.00..105768.00 rows=90093 width=4) (actual time=0.035..2058.797 rows=90084 loops=1)    
   Filter: ((tags ~~ '%,2,%'::text) OR (tags ~~ '%,2696,%'::text))    
   Rows Removed by Filter: 909916    
 Planning Time: 1.190 ms    
 Execution Time: 2060.434 ms    
(5 rows)    
postgres=# explain analyze select uid from tbl_users where tags like '%,2,%' or tags like '%,4356,%' or tags like '%,5064,%' or tags like '%,5711,%' or tags like '%,7363,%' or tags like '%,9417,%' or tags like '%,9444,%' ;    
                                                                                                       QUERY PLAN    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
 Seq Scan on tbl_users  (cost=0.00..118268.00 rows=135482 width=4) (actual time=0.024..6765.315 rows=150218 loops=1)    
   Filter: ((tags ~~ '%,2,%'::text) OR (tags ~~ '%,4356,%'::text) OR (tags ~~ '%,5064,%'::text) OR (tags ~~ '%,5711,%'::text) OR (tags ~~ '%,7363,%'::text) OR (tags ~~ '%,9417,%'::text) OR (tags ~~ '%,9444,%'::text))    
   Rows Removed by Filter: 849782    
 Planning Time: 4.344 ms    
 Execution Time: 6767.990 ms    
(5 rows)    
postgres=#  explain analyze select uid from tbl_users where tags like '%,4356,%' or tags like '%,5064,%' or tags like '%,5711,%' or tags like '%,7363,%' or tags like '%,9417,%' or tags like '%,9444,%' ;    
                                                                                          QUERY PLAN    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
 Seq Scan on tbl_users  (cost=0.00..115768.00 rows=59480 width=4) (actual time=0.112..6206.775 rows=78827 loops=1)    
   Filter: ((tags ~~ '%,4356,%'::text) OR (tags ~~ '%,5064,%'::text) OR (tags ~~ '%,5711,%'::text) OR (tags ~~ '%,7363,%'::text) OR (tags ~~ '%,9417,%'::text) OR (tags ~~ '%,9444,%'::text))    
   Rows Removed by Filter: 921173    
 Planning Time: 4.223 ms    
 Execution Time: 6208.191 ms    
(5 rows)    
```    
三、使用PolarDB|PostgreSQL 特性设计和实验1    
传统方法没有用到任何的索引, 每次请求都要扫描用户画像表的所有记录, 计算每一个LIKE的算子, 性能比较差.    
为了提升查询性能, 我们可以使用gin索引和pg_trgm插件, 支持字符串内的模糊查询索引加速.    
复用传统方法的数据, 创建gin索引, 支持索引加速模糊查询.    
```    
create extension pg_trgm;    
create index on tbl_users using gin (tags gin_trgm_ops);    
```    
使用索引后, 查看执行计划和耗时如下:    
```    
postgres=# explain analyze select uid from tbl_users where tags like '%,2,%';    
                                                              QUERY PLAN    
---------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=555.93..58686.88 rows=80808 width=4) (actual time=30.315..76.314 rows=77454 loops=1)    
   Recheck Cond: (tags ~~ '%,2,%'::text)    
   Heap Blocks: exact=53210    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..535.73 rows=80808 width=0) (actual time=22.967..22.967 rows=77454 loops=1)    
         Index Cond: (tags ~~ '%,2,%'::text)    
 Planning Time: 0.991 ms    
 Execution Time: 78.163 ms    
(7 rows)    
postgres=# explain analyze select uid from tbl_users where tags like '%,2,%' or tags like '%,8,%';    
                                                                 QUERY PLAN    
---------------------------------------------------------------------------------------------------------------------------------------------    