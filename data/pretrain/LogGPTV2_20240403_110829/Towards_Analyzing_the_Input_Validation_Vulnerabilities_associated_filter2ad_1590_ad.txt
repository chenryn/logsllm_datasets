continue to communicate with them to ﬁnd the state of these
issues.
5. DISCUSSION AND LIMITATIONS
The goal of this work is to understand the threat posed by
invalid inputs to the system services. The most important
limitation of the eﬀectiveness of our work is that much work
is done manually. We manually inspected the source code
of Android system services and found out the ratio of the
methods doing input validation in the system services. Then
we constructed a tool to fuzz the system services. This tool is
semi-automatic. It constantly sends requests to the system
services and records all logs of the system. Although this
tool uses a script to ﬁlter the unnecessary messages of the
logs, the messages from the target services and this tool are
checked manually. Future work could address the limitations
by using static analysis program to analyze the source code
of the system services and constructing a better script to
check the log messages automatically.
At present, buzzer is not cross-version. This is because
buzzer heavily depends on native libraries. The target NDK
has been set to compile buzzer. However, the NDK could
be conﬁgured for other versions. Namely, buzzer’s design is
not based on speciﬁc Android version and it could work on
other versions with more work done.
Towards the vulnerabilities found in this work, we think
the best way to ﬁx them is to use whitelist or positive val-
idation in the interface methods. In other words, interface
methods should check that the incoming argument is one of a
set of tightly constrained known good values. Any argument
that does not match them should be rejected. For example,
the interface method WifiServiceImpl.setFrequencyBand
should reject the request which contains the band number
greater than two or less than zero. Furthermore, for the ar-
guments which are too complicated to restrict their values,
the related system service methods should at least reject
known bad values. After analyzing the vulnerable meth-
ods, we found that nine methods out of 16 do perform input
validation. The system service developers should test these
system services more strictly.
6. RELATED WORK
6.1 Input Validation
Most input validation studies are put on the Web Ap-
plication [10, 30]. These input validation problems include
cross-site script, SQL injection and so on. Generally, the
client and the server are two separate information systems.
If the server is attacked by the attacker, the server and the
other clients accessing the server are aﬀected. The attacker
is immune. However, the input validation studied in this
work is in one system. The app and the system services
are in the same Android system.
If the system service is
attacked, the malicious app is also aﬀected. For instance,
a malicious app sends a request to set the WiFi frequency
band number greater than two, the device loses connection
with the WiFi Access Point and cannot connect to one again.
The malicious app self cannot access network through WiFi.
368
6.2 Fuzzer in Android and Linux
Our tool was inspired by the Linux System Call fuzz tester
— Trinity [9]. Trinity is a system call fuzzer which employs
some techniques to pass semi-intelligent arguments to the
syscalls being called. The idea behind these techniques is to
reduce the time spent running “useless” tests, thereby reach-
ing deeper into the tested code and increasing the changes of
testing a more interesting case that may result in an unex-
pected error. For instance, when trinity starts up, it creates
a list of ﬁle descriptors and passes one of these at random
if a syscall needs a ﬁle descriptor. Buzzer also passes semi-
intelligent arguments to the system services which accept
requests. Our work was to manually inspect all the methods
the system services provide. For example, lots of methods in
the system services receive an integer value which is a user
id and check its validity before using it. Therefore, buzzer
collects all the user ids in the system and sends them at ran-
dom to the methods which need them. Furthermore, many
methods would just reject the requests if the app does not
have the necessary permissions which the third-party app
cannot request. As a result, we recorded these functions
and buzzer would not fuzz these methods at all.
There are also some fuzzers in Android, such as intent
fuzzer [7, 28, 35]. Intent fuzzer [7] is an unprivileged app
that injects valid intents with the blank data ﬁeld to other
app’s exported components. Maji et al.
[28] extended this
basic intent fuzzer. They employed an empirical study of
the robustness on inter-component communication to create
a set of valid and semi-valid intents with object ﬁelds from
the Android documentation to the intents with object ﬁelds
selectively left blank. DroidFuzzer [35] focuses on activities
that process MIME data passed via an URI. It injects in-
tents with abnormal data generated from a normal data seed
using mutation. Inter-Component communication is based
on Binder. The work done by the previous literature could
complement the arguments generating methods in buzzer.
For instance, the system service activity receives many re-
quests with arguments that need Intent values.
6.3 Android Security
Research has established a large body of literature on An-
droid security. Here are some research hotspot examples.
Privilege Escalation [14, 15, 18] attack leverages the se-
curity deﬁciency of Android’s permission mechanism. It al-
lows an app with less permissions (a non-privileged caller)
to access components of a more privileged application (a
privileged callee). Privacy Leaks [11, 19, 23] attack leaks
users’ privacy data. Repackage attack [22, 36, 37] decom-
piles an Android app, inserts malicious functions into the
source code and recompiles to an app. All of the examples
concern about intra- and inter-application communication
or the app’s security.
Wu et al. [32], Zhou et al. [38] and Grace et al.[21] study
the hazard of Android system’s customization in the wild
world. Xing et al. [33] works on the updating mechanism in
Android OS which could result in privilege escalation. Chen
et al. [17] formulates the UI state inference attack designed
at exposing the running UI state of an application. Li et
al.
[25] analyzes popular push-messaging services. They
found these services are highly error-prone, allowing unau-
thorized parties to bind a target app’s registration to an
attack device or inject arbitrary messages to the app, both
locally and remotely. Bhoraskar et al.
[13], Georgiev et
[20] and Shekhar et al.
al.
[31] study the security quality
of the third-party components and libraries in the Android
apps, including advertisement libraries and hybrid applica-
tion frameworks.
At present, to the best of our knowledge, few work focus
on system services, especially the input validation vulnera-
bilities associated with system services. This paper studies
the security implication of the system services and ﬁnds the
input validation problems in them.
7. CONCLUSION
In this work, we take the ﬁrst steps to analyze Android
speciﬁc input validation vulnerabilities.
In particular, a)
we take the ﬁrst steps towards measuring the corresponding
attack surface and reporting the current input validation
status of Android system services. b) We developed a new
input validation vulnerability scanner for Android devices.
This tool fuzzes all the Android system services by send-
ing requests with malformed arguments to them. Through
comprehensive evaluation of Android system with over 90
system services and over 1,900 system service methods, we
identiﬁed 16 vulnerabilities in Android system services.
8. REFERENCES
[1] Android aidl guide.
http://developer.android.com/guide/components/aidl.html.
[2] Android init language.
https://android.googlesource.com/platform/system/core-
/+/master/init/readme.txt.
[3] Android init.rc ﬁle.
https://android.googlesource.com/platform/system/core-
/+/master/rootdir/init.rc.
[4] Android open source project.
https://android.googlesource.com/.
[5] Android shipments in 2014.
http://www.cnet.com/news/android-shipments-
exceed-1-billion-for-ﬁrst-time-in-2014/.
[6] Factory images for nexus devices.
https://developers.google.com/android/nexus/images.
[7] Intent fuzzer.
https://www.isecpartners.com/tools/mobile-
security/intent-fuzzer.aspx.
[8] Symantec’s threat report.
http://know.symantec.com/LP=1123.
[9] Trinity - a linux system call fuzz tester.
http://codemonkey.org.uk/projects/trinity/.
[10] M. A. Alkhalaf. Automatic Detection and Repair of
Input Validation and Sanitization Bugs. PhD thesis,
UNIVERSITY OF CALIFORNIA Santa Barbara,
2014.
[11] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel,
J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel.
Flowdroid: Precise context, ﬂow, ﬁeld, object-sensitive
and lifecycle-aware taint analysis for android apps. In
PLDI. ACM, 2014.
[12] A. Barth, C. Jackson, and J. C. Mitchell. Robust
defenses for cross-site request forgery. In CCS. ACM,
2008.
[13] R. Bhoraskar, S. Han, J. Jeon, T. Azim, S. Chen,
J. Jung, S. Nath, R. Wang, and D. Wetherall.
Brahmastra: driving apps to test the security of
369
third-party components. In USENIX Security
Symposium. USENIX Association, 2014.
[14] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, and
A.-R. Sadeghi. Xmandroid: A new android evolution
to mitigate privilege escalation attacks. Technische
Universit¨at Darmstadt, Technical Report TR-2011-04,
2011.
[15] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R.
Sadeghi, and B. Shastry. Towards taming
privilege-escalation attacks on android. In NDSS,
2012.
[16] G. Chen, H. Jin, D. Zou, B. B. Zhou, Z. Liang,
W. Zheng, and X. Shi. Safestack: automatically
patching stack-based buﬀer overﬂow vulnerabilities.
Dependable and Secure Computing, IEEE
Transactions on, 2013.
[17] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into
your app without actually seeing it: Ui state inference
and novel android attacks. In USENIX Security
Symposium. USENIX Association, 2014.
[18] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and
M. Winandy. Privilege escalation attacks on android.
In Information Security. Springer, 2011.
[19] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G.
Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N.
Sheth. Taintdroid: an information-ﬂow tracking
system for realtime privacy monitoring on
smartphones. ACM TOCS, 2014.
[20] M. Georgiev, S. Jana, and V. Shmatikov. Breaking
and ﬁxing origin-based access control in hybrid
web/mobile application frameworks. In NDSS, 2014.
[21] M. C. Grace, Y. Zhou, Z. Wang, and X. Jiang.
Systematic detection of capability leaks in stock
android smartphones. In NDSS, 2012.
[22] S. Hanna, L. Huang, E. Wu, S. Li, C. Chen, and
D. Song. Juxtapp: A scalable system for detecting
code reuse among android applications. In DIMVA.
Springer, 2013.
[23] J. Kim, Y. Yoon, K. Yi, J. Shin, and S. Center.
Scandal: Static analyzer for detecting privacy leaks in
android applications. MoST, 2012.
[24] Y. Kosuga, K. Kono, M. Hanaoka, M. Hishiyama, and
Y. Takahama. Sania: Syntactic and semantic analysis
for automated testing against sql injection. In
ACSAC, 2007.
[25] T. Li, X. Zhou, L. Xing, Y. Lee, M. Naveed, X. Wang,
and X. Han. Mayhem in the push clouds:
Understanding and mitigating security hazards in
mobile push-messaging services. In CCS. ACM, 2014.
[26] M. T. Louw and V. Venkatakrishnan. Blueprint:
Robust prevention of cross-site scripting attacks for
existing browsers. In Security and Privacy. IEEE,
2009.
[27] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex:
statically vetting android apps for component
hijacking vulnerabilities. In CCS. ACM, 2012.
[28] A. K. Maji, F. A. Arshad, S. Bagchi, and J. S.
Rellermeyer. An empirical study of the robustness of
inter-component communication in android. In DSN.
IEEE, 2012.
[29] Y. Nadji, P. Saxena, and D. Song. Document structure
integrity: A robust basis for cross-site scripting
defense. In NDSS, 2009.
[30] T. Scholte, D. Balzarotti, and E. Kirda. Have things
changed now? an empirical study on input validation
vulnerabilities in web applications. Computers &
Security, 2012.
[31] S. Shekhar, M. Dietz, and D. S. Wallach. Adsplit:
Separating smartphone advertising from applications.
In USENIX Security Symposium. USENIX
Association, 2012.
[32] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The
impact of vendor customizations on android security.
In CCS. ACM, 2013.
[33] L. Xing, X. Pan, R. Wang, K. Yuan, and X. Wang.
Upgrading your android, elevating my malware:
Privilege escalation through mobile os updating. In
Security and Privacy (SP). IEEE, 2014.
[34] L.-K. Yan and H. Yin. Droidscope: Seamlessly
reconstructing the os and dalvik semantic views for
dynamic android malware analysis. In USENIX
Security. USENIX Association, 2012.
[35] H. Ye, S. Cheng, L. Zhang, and F. Jiang. Droidfuzzer:
Fuzzing the android apps with intent-ﬁlter tag. In
MoMM. ACM, 2013.
[36] F. Zhang, H. Huang, S. Zhu, D. Wu, and P. Liu.
Viewdroid: Towards obfuscation-resilient mobile
application repackaging detection. In WiSec 2014.
Citeseer, 2014.
[37] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. Detecting
repackaged smartphone applications in third-party
android marketplaces. In CODASPY. ACM, 2012.
[38] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang.
The peril of fragmentation: Security hazards in
android device driver customizations. In Security and
Privacy (SP). IEEE, 2014.
[39] Y. Zhou and X. Jiang. Dissecting android malware:
Characterization and evolution. In Security and
Privacy (SP). IEEE, 2012.
370