 Numbers: Integers (whole numbers); Floats (decimal or fractional numbers), or complex
numbers.
 Strings: Character sequences.
 Bytes: Binary data such as images or other media files.
 Lists: Ordered value sequences.
 Tuples: Ordered values that are different from lists inasmuch as lists can change their values
(mutable), but tuples cannot (immutable).
 Sets: Unordered value sequences.
 Dictionaries: Unordered key-value pairs.
 You can use type-casting functions to manually convert data from one data type to another. This is
useful when you want to ensure that Python receives variable data in a particular format.
 For instance, try this:
vara = "100"
type(vara)
The result of the above code is that Python sees “100” as a string rather than as an integer. Does that
result surprise you? It shouldn’t. When the Python interpreter saw data contained within quotes, it
assumed you wanted to use the str (string) data type instead of int (integer). You can fix it, though, by
converting the string you assigned to the variable to an integer:
varb = int(vara)
type(varb)
In other words, Python infers a data type based upon how you type. If you use quotes, then dollars to
donuts Python assumes you’re talking about a string value. If you supply a number without quotes, then
Python selects one of the numeric data types depending upon the number.
 For instance, a variable value of 100 is an integer, and 100.1 is a float. Understand?
Concatenation
 In Python, string concatenation enables you to patch together bits of code. To do this, simply use the
plus sign (+). Consider the following examples, all of which you can try out in the Python Shell:
 str1, str2 = "abc", "def": Two things—you can create and initialize more than one variable
in one shot, and you can use single or double quotes to contain string data.
 str1 + str2: Note that when you concatenate strings, no extra space is included. The result of
this operation is abcdef.
 str1 + " " + str2: You can pad spaces by passing in the space character(s) as a separate string
literal. In this example, the result is “abc def”. Pretty cool, huh?
 print("The combined string value is: " + str1 + str2): You can concatenate string literal data
with variable data to provide the user with customized output.
Modules
 In Python, modules are .py script files that contain one or more related code blocks. What is so cool
about modules is that they make programming much more modular. Think of it: Would you rather
write (or copy/paste) a bunch of functions you created that pertain to several different Python
programs you’re working on, or would you rather have those functions stored in a module that you can
load and unload at your convenience?
 Earlier in this chapter I briefly introduced the random module that ships with the so-called reference
version of Python 3. As you can see in Figure 11.3, the contents of the module are stored in plain text
and can be viewed and analyzed by anyone.
FIGURE 11.3 Python modules are note encrypted, but boy, are they useful! Here you can see the
code behind the randint function used earlier in the chapter.
Note: Where Are Modules Located?
You can run help(“modules”) to get a list of all currently available modules in your
current Python 3 installation. After you get the name of your desired module, type
help(“module_name”) to get the file location. For instance, in Raspbian, the random
module is located by default in /usr/lib/python3.2/random.py.
Assuming a module is present on your system (see the note “Where Are Modules Located?” for more
info), you can use the import statement to bring a module into the current Python environment. Note
that an import statement lasts only for the duration of the current script file.
 When you perform an import, all of the code contained in the module becomes available to you in
Python. For instance, to import all code from the math module, you can issue any of the following
statements:
Click here to view code image
import math
from math import *
import math, random (we can import more than one module at a time; just use a
comma separator)
After you’ve imported a module, run dir(module_name) to get a list of all the names (the Python term
for code components) that are contained inside the module. To illustrate, run the following three
statements in the Python Shell:
import math
content = dir(math)
content
Now let’s drill into the math module, and you’ll see how to take advantage of a module’s inner
content. As an example, let’s work with the sqrt function from the math module:
import math
math.sqrt(25)
With respect to Python programming, a fully qualified function name takes the form of
module.function. Thus, after importing the math module, you issue math.sqrt() when you want to run
the sqrt() function that is contained in the math module.
 Even though you imported the math module, the Python interpreter would get confused and issue an
error if you used just sqrt() in your code without qualifying its location.
Note: Where to Find Cool Modules?
I’ve found that you can learn about any Python 3 module directly from the Python
website. Check out the Python Module Index (http://is.gd/yr7n0A) to learn about the built-in
module library. For third-party modules, see the Useful Modules list (http://is.gd/OvwCJm)
at the Python Wiki. Finally, I cover Raspberry Pi-specific modules as we move through the
remainder of this book.
As I said earlier, many Raspberry Pi projects require that you obtain and install additional modules.
You can use the Linux apt-get command in many cases.
 One word of warning: You need to be mindful of the fact that you’re working with Python 3 and not
Python 2. Many online tutorials show you how to do stuff with Python on the Pi, and the module and
code references the older version of Python.
 Let’s make sure you have the most recent version of the GPIO module in your Python 3 installation.
This module is important later because, you’ll recall, the GPIO headers are the principal way that you
connect the Raspberry Pi to external hardware.
 I’ve found that the case-sensitivity in Linux has caused Raspberry Pi users to conclude that their
Python 3 installation is missing certain modules when, in point of fact, they are present. Try the
following procedure.
Task: Loading and then Updating the GPIO Module in Python 3
Many of the projects that I cover in the latter part of this book involve taking control of
the Raspberry Pi’s General Purpose Input/Output (GPIO) header pins. Accordingly, it is
crucial that you ensure that your Python installation has access to the GPIO modules.
1. From LXTerminal, type python3 to start an interactive Python 3 session.
2. Import the GPIO module included in Raspbian so you can begin the process of
interacting with the Pi’s GPIO headers:
import RPI.GPIO
3. Did that work? No? Well, something you should know is that GPIO is a function library
inside of the RPi module. Notice the mixed case. Try this:
import RPi.GPIO as GPIO
The as keyword is used to provide an alias to an imported module. This means you can
call GPIO functions by using GPIO instead of RPi.GPIO. You had some more problems
though, correct? It turns out you also need to run Python as root. Sheesh!
4. Run exit() to leave the interpreter and then issue sudo python3 to enter the interpreter as
root. One more time with feeling!
import RPi.GPIO as GPIO
dir(GPIO)
Now we’re cooking! The output is displayed in Figure 11.4.
FIGURE 11.4 Working with modules in Python 3 can be...interesting.
5. Exit the interpreter one final time. Let’s update the module to make sure you have the
latest and greatest version:
Click here to view code image
sudo apt-get update
sudo apt-get dist-upgrade
sudo apt-get install python3-rpi.gpio
Where Do You Go from Here?
If nothing else, I hope your work in Chapters 10 and 11 has fired your imagination and inspired you to
learn more about Python programming. My challenge as your guide has been to pack as much Python
instruction as possible in just a few pages in a Raspberry Pi book.
 However, for those interested readers, I want to share with you what I think are the very best Python
learning resources available. I know different people have different learning styles, so following is a
collection of various types of references for your studying pleasure.
 Textbooks: For my money, you simply cannot go wrong with Tony Gaddis’ Starting Out with
Python, 2nd Edition (http://is.gd/CZy0QN).
Another Python text I enthusiastically recommend is Mark Lutz’ Learning Python
(http://is.gd/0oueEV). I’m not sure why the book gets mixed reviews on Amazon because it
really is a landmark text.
 Computer-based Training: At the risk of coming across as a self-promoter, I recorded a
computer-based training course on Python Programming for CBT Nuggets
(http://is.gd/A5XQei) that I fully stand behind. What’s cool about computer-based training is
that you can see the concepts in action immediately on your computer screen.
A second computer-based training course I had a hand in developing and recommend is
Wesley Chun’s Python Fundamentals LiveLessons (http://is.gd/V56Ekl).
 Online Resources: As I’ve stated before, the Python website is perhaps the best reference
source on the Internet for learning Python. Check out The Python Tutorial at
http://is.gd/KyCom5.
Another awesome online resource, and it is completely free, is Dive into Python 3 by Mark
Pilgrim (http://is.gd/QeW7OH). This is essentially the full text of the associated textbook by
Apress. However, it’s really nice to have direct access to the source code and examples.
Part III: Basic Raspberry Pi Projects
Chapter 12. Raspberry Pi Media Center
I am a huge set-top box fan. Not the rubbish one your cable company gave you, but the ones that let
you connect to virtually every streaming service under the sun. In fact, if it weren’t for my wife and
daughter, I would have gotten rid of digital cable service years ago and devoted myself entirely to
streaming media services such as Netflix and Hulu. The only way that somebody will take my Apple
TVs away from me is from my cold, dead hands!
 One of the biggest attractions of the Raspberry Pi is its utility as a media center platform. Recall that
the combination of the Broadcom VideoCore IV GPU and the HDMI output means that you have the
capability of sending 1080p High Definition to your monitor or HD television.
 As it always happens in open source development, several software options exist for building a
Raspberry PI media center. Some of the most popular choices include
 Raspbmc: http://is.gd/OX7dMY
 RasPlex: http://is.gd/HfEIIi
 OpenELEC: http://is.gd/drMs1E
 Xbian: http://is.gd/7LUXtc
 Three of these software/OS packages are derivatives of XBMC Media Center (http://is.gd/xwVddv),
the gold standard in open source media player software. You can see a screen shot of the XBMC
interface in Figure 12.1.
FIGURE 12.1 XBMC is the gold standard in open source media center software.
Note that because I wanted the highest-quality screen shots for this book, the XBMC interface images
I give you in this chapter are from the Windows version rather than from Raspbmc. The good news is
that XBMC 12.2 “Frodo” looks and behaves exactly the same regardless of its host hardware—hence
the great beauty of platform-independent, open source software.
A Bit o’ History
The name XBMC originally stood for Xbox Media Center because the software was intended to run
only on modified (“modded”) Xbox consoles. These days, of course, XBMC runs on almost every
desktop or mobile platform, and to that end, uses the backronym “XBMC Media Center.”
Note: XBMC and Raspbian
For those who are more experimentally minded, you can actually install XBMC directly
on top of Raspbian. Check out the Raspbian XBMC project page (http://is.gd/vxKwGJ) for
more details.
I like to describe XBMC as a Swiss Army knife media application that can play just about any media
file you can throw at it. Here is a run-down of some of the best features of XBMC:
 Plugins: You can easily extend XBMC functionality by installing add-ons that (for instance)
display local weather, pull Internet Movie Database (IMDB) metadata for your currently
loaded media, and so forth.
 Media Scrapers: XBMC can scan any media you load and automatically detect everything
there is to know about the item. For instance, the scraper can detect an MP3 audio file’s album
track listing, song lyrics, and so on.
 Apps: You can launch applications that enable XBMC to tie into streaming media services
such as Netflix.
 Codec Richness: Compressor–Decompressors (Codecs) allow media player software to
recognize, decode, and play various media. Not only does XBMC ship with a ton of media
codecs, you can manually install additional codecs to ensure that your custom media is
playable from within XBMC.
 For a more comprehensive listing of XBMC features, read the associated Wikipedia article at
http://is.gd/yZmSK8.
But Will It Blend?
If you haven’t yet seen the Blendtec’s “Will It Blend?” viral marketing videos, then do yourself a
favor and check them out on YouTube at http://is.gd/8gWfN9.
 “Will It Blend?” reminds me of a question that is more cogent to us as Raspberry Pi enthusiasts—
namely, “But does the Raspberry Pi have enough processing power to run XBMC appropriately?”
 Ah yes, the eternal question. First things first: The Model A board simply will not do as a media
player. Number one, there is the limited memory issue. Number two, you’ll need a hardwire Ethernet
connection to get appreciable network speeds, and the Model A has no RJ-45 port.
 Yes, yes—I know what you are thinking: “Couldn’t I add an RJ-45 wired Ethernet port to my Model
A Pi by using USB?” This is true enough, but I nonetheless submit that the latency you’ll experience in
not employing wired Ethernet that is built into the Pi’s circuitry (like we have with the Model B)
makes the process barely worthwhile.
 As in all things, though, your mileage may vary.
 The primary differentiator among the various Raspberry Pi XBMC ports is how completely they take
over the host operating system. Remember that with a device as hardware-constrained as the Pi, the
fewer software layers you have between XBMC and the underlying hardware, the better.
 There is vociferous debate online as to who makes the best XBMC player for the Pi. However, in this
book we install Raspbmc because it is (generally) considered to be the most stable and mature
XBMC port.
Introducing Raspbmc
As you probably guessed, Raspbmc (http://is.gd/OX7dMY) is a portmanteau of Raspbian and XBMC.
Thus, Raspbmc replaces the operating system on your Raspberry Pi instead of serving as a third-party
app that you install on an existing Raspbian installation.
 Raspbmc is the brainchild of Sam Nazarko of London and achieved final 1.0 release status in
February 2013. For in-depth coverage of all things Raspbmc-related, see Sam’s book Raspberry Pi
Media Center, by Packt Publishing (http://is.gd/GDTsVR).
 Basically, Sam stripped Raspbian down to almost bare metal and wove XBMC on top of it. To that
point, don’t expect to get anything more than Terminal access to your Raspbmc system. Because X11
is not present, you’ll never get VNC remote connections to work.
 You need the following components to get Raspbmc up and running on your Raspberry Pi Model B:
 HDMI connection: You need a monitor or television (remember, no VNC support in
Raspbmc).
 A decent-sized SD card: Go for a 16–32GB, Class 10 card unless you are absolutely
committed to storing your media on a USB thumb drive.
 Keyboard and mouse: These peripherals are necessary due to the “no VNC” rule mentioned
previously.
 Wired Ethernet connection with DHCP: Although you can get Wi-Fi going easily enough
after Raspbmc is installed on your Pi, your best bet—at least during the installation phase—is
to plug in a physical Ethernet cable and let the Pi pick up an IP address from your local DHCP
server.
Task: Installing Raspbmc Under Windows
1. Download the Windows Raspbmc Installer from the Raspbmc website
(http://is.gd/jdMxS2) and extract the .ZIP file contents to a local directory on your
Windows system.
2. Open Setup.exe, which starts the Raspbmc Installer. The interface is shown in Figure
12.2.
FIGURE 12.2 You can flash your SD card under Windows by using the Raspbmc Installer
application.
3. Take pains to verify that you select the correct volume in the device list. You want to
flash an SD card, remember, and you don’t want to pick the wrong drive. (You also need
to select the I accept the license agreement option before clicking Install to flash your
card.)
4. When the installation process completes, you see a Congratulations! message informing
you to boot your Raspberry Pi from the newly flashed SD card. Note also that you need to
plug in the Ethernet cable into your Model B board, have your home network configured
for automatic (DHCP-based) IP address assignment (if it’s not already), and have your
keyboard, mouse, and HDMI monitor all plugged in and ready to rock.
Task: Installing Raspbmc Under OS X
1. Open up a Terminal prompt and download the Python 2-based installer:
Click here to view code image
sudo curl -O http://svn.stmlabs.com/svn/raspbmc/testing/installers/python/
install.py
Note: Curl
The curl program is used in Linux to fetch web-based content from a command
line. Note also that the parameter after curl is an O (the letter), as opposed to a zero.
2. Now run the install.py Python script:
sudo python install.py
Hey, you are applying some of our newly found Python skills already—awesome! You
can view the screen output of these commands in Figure 12.3.
FIGURE 12.3 Flashing your Raspbmc SD card under OS X isn’t as easy as it is under
Windows.
Configuring Raspbmc
 Flashing your SD card by using the Raspbmc installer does not actually fully set up your environment;
instead, the installer formats your SD card, creates one big partition, and installs the barest layer of
Raspbian on the card.
 Upon first bootup the Raspbmc installer takes over the system, downloading and applying Raspbian
to your Pi. You can see this in action in Figure 12.4.
FIGURE 12.4 Raspbmc automatically installs the latest version of the software during the Pi’s
first startup.
After installation completes, you see the XBMC interface and are asked to choose a default language.
You need to navigate to System, Settings, Appearance, International to verify and set your localization
settings for
 Region
 Character Set
 Timezone country
 Timezone
 You’ll find that XBMC navigation is pretty intuitive by using the keyboard and mouse. As shown in
Figure 12.5, each configuration window can be closed individually by clicking the “X” in the upper-
right corner of each window. Also the navigation buttons in the lower-right of each screen take you
back one screen or jet you to the Home screen, respectively.
FIGURE 12.5 The XBMC user interface can be navigated easily with a keyboard, mouse, or
infrared (IR) remote.
Getting Your Remote Control Working
What is a set-top box worth if you can’t control it with your favorite remote control? Nothing, in my
estimation. Your first order of business is to study the list of Raspbmc-compliant remotes at the
Raspbmc website (http://is.gd/5Sw23o).