machine, but duplicating the plastic housing was more diﬃ-
cult. For this reason, attackers may prefer to tamper with
real machines (if they can get access to them) by replacing
chips or entire circuit boards within the original cases.
Tampering with Machine State Even if every compo-
nent of the system behaves honestly, attackers could still
attempt to manipulate the system by directly accessing or
manipulating the internal state of the machine in ways not
contemplated by its designers. For example, by attaching
additional hardware to the control unit’s circuit board, an
attacker could directly read and write the EEPROM chips
that record the votes. This is made easier because the ma-
chines are designed to use a simple I2C serial interface to
link the CPU to the memory chips, and because the simple
software design does not attempt to cryptographically pro-
tect or authenticate the data stored there. We constructed a
device that demonstrates such an attack, which we describe
in Section 4.2.
4. DEMONSTRATION ATTACKS
We implemented two demonstration attacks to illustrate
and experimentally conﬁrm some of the EVM security prob-
lems we described in the previous section. We built these
attacks without access to the machines’ source code and
with only limited access to an EVM during the design and
testing process. Nonetheless, they are fully functional on real
EVMs. A criminal who employed methods like these could
alter vote totals in real elections or undermine ballot secrecy
to determine how each voter voted.
4.1 Dishonest Display Attack
For our ﬁrst demonstration attack, we developed a dishon-
est display board (see Figure 4) that can replace the real
display board in the control unit. Normally, when votes
are counted, the EVM display board shows the number of
votes received by each candidate. The dishonest display adds
a separate, hidden microcontroller that intercepts the vote
totals and substitutes fraudulent results.
6Figure 4: Dishonest Display Attack — We developed a dishonest display board, shown here at actual size. It looks almost
identical to the real display board inside the control unit, but it shows fraudulent vote totals when results are counted.
The only visible component on the reverse side is a programming connector, which could be removed before deploying the
attack. Malicious election insiders or other criminals could install dishonest displays with little outward evidence of tampering.
(a)
(b)
(c)
(d)
We hid new components beneath the 7-segment displays and black plastic spacer. A PIC microcontroller (a) replaces the real vote
totals with dishonest ones when the machine shows results. A chip antenna (b) and Bluetooth radio module (c) let the attacker
wirelessly signal which candidate to favor. The circuit draws all its power from the main board, via a voltage regulator (d ).
To accomplish this, the dishonest display reads the electri-
cal signals from the control unit that would normally control
the 7-segment LED digits. This allows it to detect when the
control unit is attempting to display election results. It also
interprets the “total votes” output to determine the real over-
all number of votes so that it can make the dishonest votes
add up correctly. Finally, it calculates and shows plausible
but fraudulent vote counts for each candidate.
We developed a working prototype of the dishonest display
board in less than a week, with no access to the EVM and
from parts costing just a few dollars. We later reﬁned the
design to make the attack harder to detect and to add a
wireless signaling mechanism.
Election results could be compromised by inserting a dis-
honest display into an EVM control unit at any point before
votes are publicly counted, perhaps years before the election.
Election insiders and EVM manufacturer maintenance per-
sonnel routinely have suﬃcient access, and criminal outsiders
could be able to obtain access in places where the physical
security of the machines is lax.
Design Details Our dishonest display uses the same
kind of LEDs and connector found on the real display and
adds a Microchip PIC16F914 microcontroller, a KC Wirefree
KC22 Bluetooth module, an Antenna Factor chip antenna,
and various discrete components (see Figure 4). To match
the appearance of the real display, we conceal these extra
components underneath the 7-segment LEDs. Conveniently
for attackers, the LEDs on the real display are raised about
2 mm from the circuit board by a plastic spacer. We omit
parts of this spacer underneath the LEDs to make room for
the hidden components.
The EVM controls its 7-segment LED displays by mul-
tiplexing. The interface uses seven segment lines, where
each line is connected to a particular segment position on all
six displays, and six selector lines, which are connected
to the common cathode of each digit. To control a 7-segment
digit, the CPU drives its selector line low while keeping the
others high and uses the segment lines to control which of
the segments are lit. Each 7-segment display is lit for ap-
proximately 1.5 ms before switching to the next display, and
persistence of vision eﬀects make it appear as though all
six displays are lit continuously. The microcontroller in the
dishonest display monitors the selector lines and segment
lines in order to determine the digits that the EVM processor
is trying to display, and it computes its own vote totals as a
function of this input. It implements a simple state machine
to track the display of the election results.
The dishonest display draws power from the EVM, so
it does not require a separate battery. The 16-pin display
connector includes a ground line but no dedicated power
line. However, at any time, at least ﬁve of the six digit
selector lines are driven high, so the dishonest display can
use them as its power source. The control unit provides these
signals through a digital isolator, which is rated to source
25 mA per output pin. We are able to draw a total of about
150 mA from the six lines — enough to drive the LEDs or the
Bluetooth radio, but not both simultaneously. Our solution
is to keep the radio oﬀ until the display is blank, as it is
during most of the polling process.
Signaling Which Candidate to Favor Once the dis-
honest display is installed in an EVM (possibly months or
years before the election), the attacker must communicate
7the overall total number of votes in order to avoid being
detected by comparison with other records of the number of
voters who used the machine. We also note that to avoid
raising suspicion when there is a small number of voters
at a polling place or for a single candidate, a vote-stealing
attack should avoid decreasing a candidate’s vote total below
the size of the largest group of voters that might conﬁrm
independently that every member of that group voted for the
candidate (for example, a family or a group of close friends).
In most attack scenarios considered in previous work, de-
termining fraudulent vote totals is straightforward, even with
these constraints. However, some attacks that compromise a
machine’s input or output devices do not have access to the
full election results ahead of time, and this creates a more
diﬃcult challenge. For instance, our dishonest display sees
the candidate results one at a time as the machine tries to
show them, and it must commit to and output a fraudu-
lent result for each candidate before it learns the vote totals
for the remaining candidates. This means our vote-stealing
algorithm must operate online.
Despite this added complication, we implemented an on-
line proportional boost vote-stealing algorithm that ensures
no candidate’s votes falls below a certain threshold, main-
tains some consistency properties of the reported results,
and delivers extra votes to its favored candidate. For each
nonfavored candidate, it calculates the maximum votes that
can be stolen given the overall vote total, the totals out-
putted so far, and the need to reserve a certain number of
votes for the remaining candidates to prevent them from
falling below the minimum vote threshold. If the favored
candidate has not been encountered yet, it subtracts either
this maximum or the target proportion of the candidate’s
real votes, whichever is less. When the favored candidate
is displayed, it adds the number of votes stolen so far plus
a conservative estimate of the votes it will be able to steal
from the remaining candidates. For subsequent candidates,
it adds an additional constraint that prevents the sum of the
votes stolen from all of them from exceeding this estimate.
4.2 Clip-on Memory Manipulator Attack
We implemented a second attack that demonstrates how
malicious hardware can alter the internal state of the ma-
chine. Unlike the dishonest display attack, which involved
replacing hardware components with dishonest look-alikes,
this second attack involves only the temporary application
of new hardware.
We constructed a device that clips directly to the EEPROM
memory chips that record the votes inside the EVM. This
small device, shown in Figure 6, ﬁts discreetly in a shirt
pocket. It facilitates two kinds of attacks: stealing votes and
violating ballot secrecy.
Any time between the start of polling and the public count,
dishonest election insiders or other criminals could use the
clip-on device to change the votes recorded in the EVM. In
India, counting sometimes takes place weeks after voting, so
criminals could wait for an opportunity to tamper with the
machines while they are in storage. Another variation of this
attack is an electronic version of the booth capture attack
described in Section 2.3. The EVM is designed to limit the
rate of voting to no more than ﬁve per minute. However, our
device bypasses this restriction, so an attacker who forcibly
took control of an EVM could use it to stuﬀ the electronic
“ballot box” with any number of votes.
Figure 5: Wireless Signaling — An application running on
an Android mobile phone uses Bluetooth to tell our dishonest
display which candidate should receive stolen votes. Attacks
using other forms of radio communication are also possible.
which candidate is to be favored (or disfavored), and by what
margin. There are many diﬀerent ways that attackers could
send such a signal — with various kinds of radios, using secret
combinations of key presses, or even by using the number of
candidates on the ballot. We discuss these in more detail in
Section 5.
To demonstrate the potential for wireless signals, we imple-
mented a signaling mechanism based on the Bluetooth radio
protocol. Wireless signaling could be performed at any time
before votes are publicly counted. The dishonest display can
then store the chosen candidate in the PIC’s non-volatile
Flash memory until counting is performed. We tested two
methods for Bluetooth-based signaling, both of which can be
triggered using ordinary mobile phones. Though the use of
mobile phones is technically prohibited within 100 meters of
polling stations [22, Section XVII.10], this rule is infrequently
enforced, and a concealed phone could be discreetly operated
inside the polling booth.
In the ﬁrst method, the dishonest display performs a Blue-
tooth inquiry scan shortly after power on and looks for a
device with a name of the form “MAGICxx,” where MAGIC is
some secret word and xx is a pair of digits that are taken
to be the number of the favored candidate. The process is
extremely simple to implement; however, it carries the risk
that a third party might perform his own Bluetooth inquiry
scan and detect the signaling.
We also developed a more robust signaling method based
on the Bluetooth RFCOMM protocol, which provides a reli-
able stream of communication similar to TCP. Our prototype
implementation consists of an application running on an An-
droid phone, shown in Figure 5. It sends a short message
to the dishonest display via RFCOMM indicating the fa-
vored candidate and the proportion of votes to grant that
candidate. The application veriﬁes success by waiting for an
acknowledgment from the dishonest display. Our application
does not use any special Android features, so it could be
ported to any smartphone platform that supports RFCOMM,
such as the iPhone or Windows Mobile.
Online Algorithms for Vote Stealing As noted in
prior work (e.g., [29]), vote-stealing attacks need to preserve
8Figure 6: Clip-on Memory Manipulator Attack — We developed an attack device that can interface with the EVM’s
memory to change votes or violate ballot secrecy. The device (shown actual size, left) ﬁts in a shirt pocket. It attaches directly
to the memory chips that store the votes in the control unit (middle). A rotary switch (right) selects which candidate to favor.
Internally, the EVM records votes in the order in which
they were cast, and our device can also be used to extract
these records. An attacker who observed the order in which
voters used the machine could then determine which candi-
date each voter selected.
Vote Storage and Layout The EVM records votes in
two electronically-erasable, programmable read-only memory
(EEPROM) chips, which are designed to provide a long-
lasting record of the election results even if the machine loses
power. The chips are standard 8 KB 24LC64 EEPROMs
in an 8-pin SOIC package. Each of the two chips holds
two complete copies of the vote data, for a total of four
redundant copies. The vote data consists of a series of one-
byte candidate numbers, each representing a single vote for
a single candidate. Our testing shows that these records
are stored in the order in which the votes were cast. Each
chip also stores a copy of additional machine state, such
as a unique identiﬁer, the number of candidates, and the
state of the election (e.g., voting open, voting closed, results
tabulated, etc.).
The CPU interfaces with the EEPROMs through an I2C-
style serial protocol. Although the protocol allows all the
chips to share a single bus, the system has two I2C buses,
each connecting the CPU with one of the two EEPROMs.
In apparent violation of the I2C protocol, the CPU holds
the I2C lines low when the EEPROMs are not in use, which
prevents our device from communicating with them. We
avoid this condition by holding the CPU in reset, which
eﬀectively disconnects it from the I2C bus by forcing the
relevant I/O pins into a high-impedance state.
ming connector. The UART lines allow the device to be used
as an EEPROM programmer when it is connected to a PC.
The device draws all its power from the EVM.
To use the device, the attacker opens the EVM control
unit and connects a jumper wire to the CPU to hold it in
reset. Next, he powers on the machine and clips the device
to one of the EEPROM chips. When the “Done” LED lights,
the attacker disconnects the device and repeats the process
for the second memory chip.
Stealing Votes To steal votes, the attacker indicates his
favored candidate using the rotary switch, shown in Figure 6.
The rotary switch selects a number from 0 to 9, and the
attacker can use it to pick a favored candidate in any of the
ﬁrst nine ballot positions, which normally include the major
national parties.
When the switch is set to positions 1–9, the clip-on device
executes a vote-stealing program. The program runs in two
passes: ﬁrst, it reads the vote data and calculates how many
votes to steal from each candidate; second, it rewrites the
list of votes, stealing votes as calculated in the ﬁrst phase.
To reduce the chance of failure caused by an intermittent
connection to the EEPROM chip, we implemented a rudi-
mentary error recovery mechanism. The changes are written
to the ﬁrst array of votes and then copied to the second array,
with each array being marked dirty while it is being written.
In case of an error, the attacker merely needs to reattach the
device — it will detect the condition and recover by using the
clean array of votes as a backup. The stealing process takes
only milliseconds per vote, so even in a large polling place,
this part of the attack would take at most several seconds.
Clip-on Device Design Our clip-on attack device is
made from a small PCB mounted on top of a Pomona 5250
8-pin SOIC test clip. It incorporates a Microchip PIC16F88
microcontroller, a 10-position rotary switch, and three color
LEDs that represent “Busy,”“Done,” and “Error” conditions.
The PIC’s I/O pins connect to the LEDs, the rotary switch,
the I2C pins on the test clip, and UART lines on a program-
Violating Ballot Secrecy An attacker could also use
our clip-on device to violate the secret ballot. The device
can be connected to a laptop computer with a serial cable,
and, when the rotary switch is set to position 0, it awaits