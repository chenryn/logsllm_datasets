### 4.2 Security

**Theorem 11:** For each \( k \geq 1 \), if the \( k \)-Linear Assumption holds, then \( F_k \) is a pseudorandom function ensemble.

**Proof:**
The proof is essentially the same as the proof of Theorem 8. We first provide an equivalent definition of \( f \) using a less efficient algorithm. This alternative definition, while not practical for real-world use, simplifies the proof.

**Inefficient Evaluation Algorithm:**

- **Input:** \( x \in \{0, 1\}^n \), Secret Key \( SK \)
- **Output:** \( f(x) \)

1. Initialize variables \( A_1 = g^{c_1}, \ldots, A_k = g^{c_k} \) in group \( G \).
2. For \( i \) from 1 to \( n \):
   - If \( x_i = 0 \), set \( A_m = A_m \) for each \( m \in [k] \).
   - If \( x_i = 1 \), set \( A_m = \prod_{\ell=1}^k A_m^{b_{m,\ell}} \) for each \( m \in [k] \).
3. Output \( f(x) = A_1 \).

We define a sequence of games, Game 0 through Game \( n \). Each game involves a challenger and an attacker who makes function queries.

**Game \( j \):**
- The challenger fixes values \( b_{m,\ell} \in \mathbb{Z}_p \) for \( (m, \ell) \in [k] \times [k] \) and \( i \) from \( j+1 \) to \( n \).
- To respond to a query, the challenger sets \( A_1, \ldots, A_k \) as a random function of the first \( j \) bits of the input and then follows the iterative procedure above for bits \( j+1 \) to \( n \).

If our function family \( F_n \) is not pseudorandom, there exists an attacker \( D \) who can distinguish between two consecutive games \( j \) and \( j+1 \) with non-negligible advantage.

Using the same argument as in the proof of Theorem 8, we note that \( D \) can be used to define an attacker \( M \) who receives \( 2k \)-tuples of the form:
\[ (A_1, \ldots, A_k, B_1, \ldots, B_k) \]
where either these tuples are uniformly chosen from \( G^{2k} \) or \( (A_1, \ldots, A_k) \) is uniformly chosen and \( B_m = \prod_{\ell=1}^k A_m^{b_{m,\ell}} \) for fixed values \( b_{m,\ell} \). \( M \) will distinguish between these two cases with non-negligible advantage.

We will show that such an \( M \) can be used to break the \( k \)-Linear Assumption using a hybrid argument. We define new Games 0 through \( k \).

**Game \( j \):**
- \( M \) is given input tuples of the form:
  \[ (A_1, \ldots, A_k, \tilde{B}_1, \ldots, \tilde{B}_j, B_{j+1}, \ldots, B_k) \]
  where \( A_m \) and \( B_m \) are chosen uniformly randomly from \( G \) and \( \tilde{B}_m = \prod_{\ell=1}^k A_m^{b_{m,\ell}} \) for some fixed values \( b_{m,\ell} \).

Since \( M \) distinguishes between Game 0 and Game \( k \), it must distinguish between some Game \( j \) and Game \( j+1 \) with non-negligible advantage (assuming \( k \) is polynomial in the security parameter).

A \( k \)-Linear attacker can then use \( M \) as follows. First, upon receiving one instance of the \( k \)-Linear Problem from the \( k \)-Linear challenger:
\[ g_0, g_1, \ldots, g_k, g_1^{r_1}, \ldots, g_k^{r_k}, g_0^{r_0}, \]
the \( k \)-Linear attacker generates \( t \) instances with the same \( g_0, \ldots, g_k \) but different \( r'_0, \ldots, r'_k \) values using Lemma 2 repeatedly. The \( i \)-th instance is then used to generate the \( i \)-th tuple to send to \( M \). In the tuple, \( A_m = g_m^{r'_m} \) for \( m \) from 1 to \( k \). Then, \( b_{m,\ell} \) are chosen randomly from \( \mathbb{Z}_p \) for \( \ell \) from 1 to \( k \) and \( m \) from 1 to \( j \). For \( m \) from 1 to \( j \), \( \tilde{B}_m = \prod_{\ell=1}^k A_m^{b_{m,\ell}} \).

If \( r_0 = r_1 + \cdots + r_k \), then the \( j+1 \)-th element of the tuple is \( \tilde{B}_{j+1} = \prod_{\ell=1}^k A_{j+1}^{b_{j+1,\ell}} \). The \( j+1 \)-th element of the tuple is set to \( g_0^{r'_0} \). If \( r_0 \) is random, then the \( j+1 \)-th element of the tuple is a random element \( B_{j+1} \). Hence, when \( M \) correctly distinguishes between Game \( j \) and Game \( j+1 \), it will allow the \( k \)-Linear attacker to distinguish \( r_0 = r_1 + \cdots + r_k \) from random. Thus, our function ensemble is pseudorandom under the \( k \)-Linear Assumption. \(\blacksquare\)

### 5. Discussion and Performance

The primary advantage of our construction is an increase in security with only a small cost in efficiency. We summarize the relevant properties of our construction in the following table (with domain \(\{0, 1\}^n\) under the \( k \)-Linear Assumption):

| Computation Time | Private Key Storage | Computational Storage |
|------------------|---------------------|-----------------------|
| 1 exponentiation in \( G \) + \( k^2 n \) multiplications in \( \mathbb{Z}_p \) | \( G, g, p + k^2 n + k \) elements of \( \mathbb{Z}_p \) | \( 2k \) elements of \( \mathbb{Z}_p + \log p \) elements of \( \mathbb{Z}_q \) |

The \( 2k \) elements of \( \mathbb{Z}_p \) in the computational storage are used to retain all of the old values of the \( a_i \)'s in our efficient algorithm while we are computing the updated ones. The \( \log p \) elements of \( \mathbb{Z}_q \) come from preprocessing: we compute and store the values of \( g^{2i} \mod q \) for \( i \) from 0 to \( \log p \) and use these to speed up the final exponentiation. We do not include the private key in our computational storage because it is listed separately.

We implemented our construction in a subgroup of order \( p \) in \( \mathbb{Z}^*_q \), where \( q \) is a 1024-bit prime and \( p \) is a 160-bit prime dividing \( q-1 \). We used 160-bit inputs (i.e., \( n = 160 \)). We chose a random key and computed our function on randomly chosen inputs. The following table shows our running times as a function of the parameter \( k \). If we approximate these times with a quadratic polynomial using a least squares fit, we get the polynomial \( 441.4 + 1.57k + 39.57k^2 \). Our table also demonstrates how closely our times mimic this function:

| \( k \) | Running Time (μs) | Polynomial Fit (μs) |
|---------|--------------------|---------------------|
| 1       | 482                | 483                 |
| 2       | 605                | 603                 |
| 3       | 799                | 802                 |
| 4       | 1083               | 1081                |
| 5       | 1438               | 1439                |

Our implementation was programmed in C using the GNU Multiple-Precision Library (GMP). It was run on an Intel Core 2 6600 2.40GHz PC running the Ubuntu (Linux-based) operating system and compiled with gcc 4.2.4. The efficient evaluation algorithm given above is essentially pseudocode for our implementation (we also pre-computed the values of \( g^{2i} \) for \( i \) from 0 to \( \log p \) to speed up the final exponentiation). These actual times are less important than the general behavior they demonstrate: for small values of \( k \), the quadratic growth in the computation time is rather muted by the constant factor, so the increase in running time caused by increasing \( k \) is very mild. In particular, one can increase \( k \) from 1 to 2 to rely on the Linear Assumption instead of DDH, and the running time is only increased by a factor of roughly 1.255.

We note that the output of our construction (based on the \( k \)-Linear Assumption) could be expanded to \( k \) elements, \( A_1 = g^{a_1}, \ldots, A_k = g^{a_k} \). Pseudorandomness still holds for this larger output by the same proof. There is a cost in efficiency: computing the larger output takes \( k \) exponentiations in \( G \) instead of just one. However, if one needs to generate more pseudorandom output elements, then it is more efficient to use this version with \( k \) outputs instead of computing the version with one output on \( k \) different inputs. This is because the computations in \( \mathbb{Z}_p \) are then done only once instead of \( k \) times.

### 6. Conclusion

We have constructed relatively efficient pseudorandom functions and proven their security under the progressively weaker \( k \)-Linear Assumptions. Our proof relies on a novel application of two hybrid arguments to accommodate the weaker assumptions. An increase in the value of \( k \) leads to an increase in security (for generic groups at least) and only a mild quadratic increase in running time and private key size. Thus, we have made progress towards the important goal of providing provably secure alternatives to ad hoc constructions without sacrificing too much efficiency.

### 7. Acknowledgements

We thank Drake Dowsett for help with programming our implementation.

### References

1. L. Adleman. A subexponential algorithm for the discrete logarithm problem with applications to cryptography. In Proceedings of the 20th IEEE Foundations of Computer Science Symposium, volume 2656, 1979.
2. M. Bellare, R. Canetti, and H. Krawczyk. Keying hash functions for message authentication. In Advances in Cryptology - CRYPTO '96, volume 1109 of LNCS, pages 1–16. Springer, 1996.
3. M. Bellare and S. Goldwasser. New paradigms for digital signatures and message authentication based on non-interactive zero knowledge proofs. In Advances in Cryptology - CRYPTO '89, volume 435 of LNCS, pages 194–211. Springer, 1990.
4. E. Biham, R. Chen, A. Joux, P. Carribault, C. Lemuet, and W. Jalby. Collisions of SHA-0 and reduced SHA-1. In Advances in Cryptology - EUROCRYPT 2005, LNCS.
5. D. Boneh, X. Boyen, and H. Shacham. Short group signatures. In Advances in Cryptology - CRYPTO 2004, volume 3152 of LNCS, pages 41–55. Springer, 2004.
6. S. Brands. An efficient off-line electronic cash system based on the representation problem. 1993.
7. G. Brassard. Modern cryptology. Volume 325 of LNCS. Springer, 1988.
8. R. Cramer and V. Shoup. A practical public key cryptosystem provably secure against adaptive chosen ciphertext attack. In Advances in Cryptology - CRYPTO '98, volume 1462 of LNCS, pages 13–25. Springer, 1998.
9. T. Dierks and C. Allen. The TLS protocol version 1.0. RFC 2246. January 1999.
10. W. Diffie and M. Hellman. New directions in cryptography. In IEEE Transactions in Information Theory, volume 22, pages 644–654, 1976.
11. T. ElGamal. A public-key cryptosystem and a signature scheme based on discrete logarithms. In Advances in Cryptology - CRYPTO '84, volume 196 of LNCS, pages 10–18. Springer, 1985.
12. O. Goldreich. Two remarks concerning the Goldwasser-Micali-Rivest signature scheme. In Advances in Cryptology - CRYPTO '84, volume 263 of LNCS, pages 104–110. Springer, 1987.
13. O. Goldreich, S. Goldwasser, and S. Micali. On the cryptographic applications of random functions. In Advances in Cryptology - CRYPTO '84, volume 196 of LNCS, pages 276–288. Springer, 1985.
14. O. Goldreich, S. Goldwasser, and S. Micali. How to construct random functions. In Journal of the ACM, volume 33, pages 792–807, 1986.
15. J. Hastad, R. Impagliazzo, L. A. Levin, and M. Luby. Construction of a pseudo-random generator from any one-way function. In SIAM Journal on Computing, volume 28, pages 1364–1396, 1999.
16. D. Hofheinz and E. Kiltz. Secure hybrid encryption from weakened key encapsulation. In Advances in Cryptology - CRYPTO 2007, volume 4622 of LNCS, pages 553–571. Springer, 2007.
17. A. Joux and K. Nguyen. Separating decision Diffie-Hellman from computational Diffie-Hellman in cryptographic groups. In Journal of Cryptology, volume 16, pages 239–247, September 2003.
18. E. Kiltz. Chosen-ciphertext secure key encapsulation based on hashed gap decisional Diffie-Hellman. In Proceedings of IACR PKC 2007, volume 4450 of LNCS, pages 282–297, 2007.
19. D. E. Knuth. In The Art of Computer Programming, volume 3, pages 575–576, 1973.
20. M. Luby. In Pseudo-randomness and applications. Princeton University Press, 1996.
21. A. Menezes, T. Okamoto, and S. Vanstone. Reducing elliptic curve logarithms to logarithms in a finite field. In IEEE Transactions on Information Theory, volume 39, pages 1639–1646, 1993.
22. S. Micali, M. Rabin, and S. Vadhan. Verifiable random functions. In Proceedings of 40th Annual Symposium on Foundations of Computer Science, pages 120–130, 1999.
23. M. Naor and O. Reingold. Number-theoretic constructions of efficient pseudo-random functions. In 38th Annual Symposium on Foundations of Computer Science, pages 458–467, 1997.
24. J. Pollard. Monte Carlo methods for index computations (mod p). In Mathematics of Computation, volume 32, pages 918–924, 1978.
25. A. Razborov and S. Rudich. Natural proofs. In Journal of Computer and System Sciences, volume 55, pages 24–35, 1997.
26. H. Shacham. A Cramer-Shoup encryption scheme from the linear assumption and from progressively weaker linear variants. 2007.
27. M. Stadler. Publicly verifiable secret sharing. In Advances in Cryptology - EUROCRYPT '96, volume 1070 of LNCS, pages 190–199. Springer, 1996.
28. L. Valiant. A theory of the learnable. In Communications of the ACM, volume 27, pages 1134–1142, 1984.
29. X. Wang and H. Yu. How to break MD5 and other hash functions. In Advances in Cryptology - EUROCRYPT 2005, volume 3494 of LNCS, pages 19–35. Springer, 2005.