### 1. 引用的漏洞与资源

- **Chromium Bug 1019226**  
  [详情链接](https://bugs.chromium.org/p/chromium/issues/detail?id=1019226)

- **Magellan 漏洞在 64 位 Chrome 桌面版上的利用**  
  [博客文章](https://blog.exodusintel.com/2019/01/22/exploiting-the-magellan-bug-on-64-bit-chrome-desktop/)

- **Pwn2Own 大赛中 Mozilla 的快速破解与修复细节**  
  [博客文章](https://www.zerodayinitiative.com/blog/2018/4/5/quickly-pwned-quickly-patched-details-of-the-mozilla-pwn2own-exploit)

- **如何杀死 Firefox**  
  [博客文章](http://blogs.360.cn/post/how-to-kill-a-firefox-en.html)

- **Android 安全生态系统投资**  
  [Google 博客文章](https://android-developers.googleblog.com/2018/01/android-security-ecosystem-investments.html)

### 2. Firefox 漏洞分析

- **Firefox Bug 982957 (CVE-2014-1512, Pwn2Own 2014)**  
  这是一个特定的使用后释放（use-after-free）漏洞，仅在高内存压力下触发。更多利用细节请参阅[此处](http://web.archive.org/web/20150710021003/http://www.vupen.com/blog/20140520.Advanced_Exploitation_Firefox_UaF_Pwn2Own_2014.php)。

- **Firefox Bug 1299686 (CVE-2016-9066)**  
  该漏洞通过加载额外的 JavaScript 文件并返回恶意 HTTP 头来触发。相关技术文章见[此处](https://saelo.github.io/posts/firefox-script-loader-overflow.html)，而具体的漏洞利用代码则可在[这里](https://github.com/saelo/foxpwn)找到。

- **Firefox Bug 1352681 (2017)**  
  这是一个特定的漏洞，仅影响了某个 Beta 版本的 Firefox。它通过整数溢出和引用泄漏来实现完整的代码执行。详细的分析报告可见[此处](https://phoenhex.re/2017-06-21/firefox-structuredclone-refleak)。

- **Safari CVE-2019-8559**  
  由于 PoC 代码过长，未详细讨论此漏洞。它涉及一个缺失写屏障的问题，在 OffensiveCon 2020 上由 Ahn 提出[演讲视频](https://www.youtube.com/watch?v=fTNzylTMYks)。该利用方法通过创建大量数组树来触发缺少写屏障的漏洞，从而在垃圾回收过程中标记所有对象，使得写屏障更容易被发现。

### 3. 分析时未公开的漏洞

- **CVE-2019-5877**  
  在 BlackHat 2020 上公布了关于 v8 Torque 代码中的漏洞，允许越界访问数据。Gong 将此漏洞与其他两个漏洞串联起来，实现了对 Android 设备的远程 root 攻击。这是首次针对 Pixel 手机展示的远程 root 利用链，并获得了 Google VRP 计划中最高的奖励。[项目地址](https://github.com/secmob/TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices)

- **CVE-2020-9850**  
  同样在 BlackHat 2020 上发布，这是一个 JSC 中的漏洞，结合其他五个漏洞形成了针对 Safari 的攻击链。问题在于 `in` 运算符的副作用被错误建模。这属于第 4.5.3 节描述的漏洞类别。[项目地址](https://github.com/sslab-gatech/pwn2own2020)

- **Firefox Bug 1607443 (CVE-2019-17026)**  
  这是一个 0day 漏洞，在野外被用于针对性攻击。具体细节后来在 Google Project Zero 博客上发布[文章链接](https://googleprojectzero.blogspot.com/p/rca-cve-2019-17026.html)。其根本原因也是副作用注解错误。

### 4. 变异分析的应用

基于前一章节的分析结果以及变异分析的一般化方法，我们改进了一个当前最先进的模糊测试工具。结论是，渲染引擎中的新漏洞主要可以通过优化模糊测试器的语法定义文件来发现。此外，这些漏洞的利用过程复杂且耗时。

因此，变异分析的重点放在了 JavaScript 引擎的模糊测试上。这一选择符合近年来发布的漏洞报告，其中大部分都集中在 JavaScript 引擎上。此外，本文分析的所有漏洞中，除七个外均属于 JavaScript 引擎。因此，专注于这个目标可以最大程度地体现所提出的改进措施的影响。

#### 4.1 现代模糊测试器的适应

选择了 Fuzzilli 作为基础，因为它最近展示了令人信服的结果。Groß [39] 观察到 AddressSanitizer 与 JavaScript 引擎一起使用时并未显著增加识别到的崩溃数量。这可能是由于 JavaScript 引擎使用的自定义堆分配器所致。为了提高模糊测试速度，实验中未使用 AddressSanitizer。

将以下 Fuzzilli 组件集成到了开发的模糊测试器中：

- **Lib-REPRL**：在目标 JavaScript 引擎中执行内存中的 JavaScript 代码。
- **Lib-Coverage**：使用 LLVM sanitizer 覆盖率测量 JavaScript 引擎中的边缘覆盖率反馈。

这两个库被合并为一个 C 语言编写的库，提供 Python 代码接口。暴露的方法允许以高速度执行 JavaScript 代码，并指示代码是否产生了新的行为、崩溃、超时或异常。在虚拟机中进行测试时，每秒每个 CPU 核心可以处理约 40 个测试用例。如果不需要覆盖率反馈，则可以达到每秒 200 个测试用例。在 AWS t2.micro 实例上进行了类似的测试，结果显示每秒每个 CPU 核心可以处理 112 个测试用例（启用覆盖率反馈）或 426 个测试用例（禁用覆盖率反馈）。更详细的系统规格见第 5.4 节。

#### 4.2 库的修改

- **C 代码移植**：原始的 C 代码最初是作为 Swift 模块在 Fuzzilli 中使用的。由于作者更熟悉 Python，将其移植为 Python 模块。这样可以在 Python 中实现突变策略和语料库管理，而在 C 语言中实现内存执行和覆盖率反馈，以保证高速度。
- **覆盖率反馈稳定性改进**：
  - 如果 JavaScript 代码产生新的覆盖率，会再次执行直到不再产生新的覆盖率。
  - 如果 JavaScript 代码产生新的覆盖率，会重新测试以验证确实触发了新的行为。
  - 原始代码使用 sanitizer 覆盖率来测量控制流边的执行情况，但只报告了当前进程中的第一次执行。为了获得稳定的结果，修改为始终报告所有执行的边。
  - 初始运行时，会测量与启动和停止内存执行相关的边，并在识别新行为时不考虑这些边。

#### 4.3 语料库生成

语料库是包含所有在执行过程中触发独特行为的测试用例的集合。虽然可以从空语料库开始模糊测试，但这可能需要很长时间。因此，创建了一个初始语料库。通常情况下，传统模糊测试只使用一个语料库，但本文认为将语料库分为两部分对于模糊测试 JavaScript 引擎更为高效。具体理由将在后续章节中讨论。

初始语料库的生成是不同模糊测试器统计数据比较不具意义的原因之一。例如，Fuzzilli 必须从空语料库开始，并在测试系统的一个核心上运行几天才能达到 15% 的覆盖率。而本文介绍的模糊测试器在几秒钟内就能达到超过 25% 的覆盖率，因为花费了几周时间创建了一个全面的初始输入语料库。

### 5. 语料库生成

#### 5.1 JavaScript 代码片段语料库

第一个语料库存储了触发独特行为的小型 JavaScript 代码片段。以下是语料库中的一些示例代码片段：

- `globalThis.hasOwnProperty('String')`
- `var var_1_ = [1,2,3]; Object.seal(var_1_);`
- `Object.seal(undefined);`
- `const var_1_ = -Infinity; const var_2_ = Math.atan(var_1_);`
- `["1", "2", "3"].map(parseInt)`
- `Map.prototype.set = null;`

这些示例只是简单的语句，但完整的语料库包含超过 10,000 个这样的测试用例，包括复杂的测试用例，它们包含独特的控制流结构组合。这些测试用例可以被视为构建块，模糊测试器在模糊测试过程中使用这些构建块来构造新的测试用例，并通过 JavaScript 语法添加额外的代码。

### 6. 语料库创建过程

#### 6.1 Fuzzilli 创建的语料库

Fuzzilli 模糊测试器在一个虚拟机中独立运行了四天，使用了三个核心。目标 v8 引擎版本为 8.1.307.28。同步功能未启用，以检查生成的语料库文件是否会有所不同。Fuzzilli 在几秒钟内达到了 4% 的覆盖率，在几分钟内达到了 6% 的覆盖率。它从 80% 的高成功率开始，但在几个小时的模糊测试后降至 70%。它只生成了少量超时，从而加快了模糊测试速度。例如，在 50,000 次执行后只有 25 次超时记录。在 400,000 次执行后达到了 13.5% 的覆盖率。四天模糊测试后的结果如表 2 所示。

| 核心 | 总执行次数 | 覆盖率 | 语料库大小 | 崩溃次数 | 超时次数 | 成功率 | 平均程序大小 |
|------|------------|--------|-------------|-----------|-----------|---------|---------------|
| 1    | 2,868,881  | 16.03% | 6,261       | 37        | 71,658    | 70.02%  | 104.13        |
| 2    | 2,073,209  | 15.41% | 5,249       | 22        | 63,754    | 69.62%  | 196.20        |
| 3    | 2,789,794  | 16.04% | 6,374       | 27        | 73,246    | 69.12%  | 117.20        |

表 2: Fuzzilli 模糊测试器的结果

将 17,884 个文件最小化为 5,212 个触发独特行为的文件。这些文件共同触发了 596,937 个可能边中的 93,605 个，对应 15.68% 的覆盖率。这个覆盖率略低于表 2 中列出的覆盖率，原因是某些边在多次执行中未被报告。