our experience so far is that an estimation of complexity
works best. Speciﬁcally, we rank calculations and con-
ditions that are more complex higher than simple ones.
In Figure 1, u is involved in three different operations,
i.e., u++, u--, and u-=4, in multiple instructions inside a
loop. As we shall see, these intricate computations place
the dereferences of u in the top 3% of the most complex
pointer accesses across nginx.
In the second step 2(cid:31), Dowser repeatedly picks high-
ranking accesses, and selects test inputs which exercise
them. Then, it uses dynamic taint analysis to determine
which input bytes inﬂuence pointers dereferenced in the
candidate instructions. The idea is that, given the for-
USENIX Association  
22nd USENIX Security Symposium  51
3
while() {
  arr[i++] = x;
  arri[2*i-4] = 0;
}
static analysis 
finds interesting
array accesses
in loops;
Fig. 2: Dowser– high-level overview.
mat of the input, Dowser fuzzes (i.e., treats as sym-
bolic), only those ﬁelds that affect the potentially vul-
nerable memory accesses, and keeps the remaining ones
unchanged. In Figure 1, we learn that it is sufﬁcient to
treat the uri path in the HTTP request as symbolic. In-
deed, the computations inside the vulnerable function are
independent of the remaining part of the input message.
Next 3(cid:31), for each candidate instruction and the input
bytes involved in calculating the array pointer, Dowser
uses symbolic execution to try to nudge the program to-
ward overﬂowing the buffer. Speciﬁcally, we execute
symbolically the loop that contains the candidate instruc-
tions (and thus should be tested for buffer overﬂows)—
treating only the relevant bytes as symbolic. As we shall
see, a new path selection algorithm helps to guide execu-
tion to a possible overﬂow quickly.
Finally, we detect any overﬂow that may occur. Just
like in whitebox fuzzers, we can use any technique to do
so (e.g., Purify, Valgrind [30], or BinArmor [37]). In our
work, we use Google’s AddressSanitizer [34] 4(cid:31). It in-
struments the protected program to ensure that memory
access instructions never read or write so called, “poi-
soned” red zones. Red zones are small regions of mem-
ory inserted inbetween any two stack, heap or global ob-
jects. Since they should never be addressed by the pro-
gram, an access to them indicates an illegal behavior.
This policy detects sequential buffer over- and under-
ﬂows, and some of the more sophisticated pointer cor-
ruption bugs. This technique is beneﬁcial when search-
ing for new bugs since it will also trigger on silent
failures, not just application crashes.
In the case of
nginx, AddressSanitizer detects the underﬂow when the
u pointer reads memory outside its buffer boundaries
(line 33).
We explain step 1(cid:31) (static analysis) in Section 3,
step 2(cid:31) (taint analysis) in Section 4, and step 3(cid:31) (guided
execution) in Section 5.
3 Dowsing for candidate instructions
Previous research has shown that software complexity
metrics collected from software artifacts are helpful in
ﬁnding vulnerable code components [16, 44, 35, 32].
However, even though complexity metrics serve as useful
indicators, they also suffer from low precision or recall
values. Moreover, most of the current approaches oper-
ate at the granularity of modules or ﬁles, which is too
coarse for the directed symbolic execution in Dowser.
As observed by Zimmermann et al. [44], we need met-
rics that exploit the unique characteristics of vulnerabili-
ties, e.g., buffer overﬂows or integer overruns. In princi-
ple, Dowser can work with any metric capable of ranking
groups of instructions that access buffers in a loop. So,
the question is how to design a good metric for complex-
ity that satisﬁes this criterion? In the remainder of this
section, we introduce one such metric: a heuristics-based
approach that we speciﬁcally designed for the detection
of potential buffer overﬂow vulnerabilities.
We leverage a primary pragmatic reason behind com-
plex buffer overﬂows: convoluted pointer computations
are hard to follow by a programmer. Thus, we focus on
‘complex’ array accesses realized inside loops. Further,
we limit the analysis to pointers which evolve together
with loop induction variables, i.e., are repeatedly updated
to access (various) elements of an array.
Using this metric, Dowser ranks buffer accesses by
evaluating the complexity of data- and control-ﬂows in-
volved with the array index (pointer) calculations. For
each loop in the program, it ﬁrst statically determines
(1) the set of all instructions involved in modifying an ar-
ray pointer (we will call this a pointer’s analysis group),
and (2) the conditions that guard this analysis group, e.g.,
the condition of an if or while statement containing the
array index calculations. Next, it labels all such sets with
scores reﬂecting their complexity. We explain these steps
in detail in Sections 3.1, 3.2, and 3.3.
52  22nd USENIX Security Symposium 
USENIX Association
4
5:u1=r→uri.data; 
8:u2=(u1,u10)
12:u3=u2++;  …  26:u6=u2++; 32:u7=u2-4;
5
2*5
5
5
33:u8=(u7,u9)
33:u9=u8--;
5
+
3*10
different
constants
37:u10=(u3,..,u6,u9)
Fig. 3: Data ﬂow graph and analysis group associated with
the pointer u from Figure 1. For the sake of clarity, the ﬁgure
presents pointer arithmetic instructions in pseudo code. The
PHI nodes represent locations where data is merged from dif-
ferent control-ﬂows. The numbers in the boxes represent points
assigned by Dowser.
3.1 Building analysis groups
Suppose a pointer p is involved in an “interesting” array
access instruction accp in a loop. The analysis group as-
sociated with accp, AG(accp), collects all instructions
that inﬂuence the value of the dereferenced pointer dur-
ing the execution of the loop.
To determine AG(accp), we compute an intraproce-
dural data ﬂow graph representing operations in the loop
that compute the value of p dereferenced in accp. Then,
we check if the graph contains cycles. A cycle indicates
that the value of p in a previous loop iteration affects its
value in the current one, so p depends on the loop induc-
tion variable.
As mentioned before, this part of our work is built on
top of the LLVM [23] compiler infrastructure. The static
single assignment (SSA) form provided by LLVM trans-
lates directly to data ﬂow graphs. Figure 3 shows an ex-
ample. Observe that, since all dereferences of pointer u
share their data ﬂow graph, they also form a single anal-
ysis group. Thus, when Dowser later tries to ﬁnd an il-
legal array access within this analysis group, it tests all
the dereferences at the same time—there is no need to
consider them separately.
cult to keep track of, so is the value of p. To assess the
complexity of var, Dowser analyzes its data ﬂow, and
determines the analysis group, AG(var) (as discussed
in Section 3.1). Moreover, we recursively analyze the
analysis groups of other variables inﬂuencing var and p
inside the loop. Thus, we obtain a number of analysis
groups which we rank in the next step (Section 3.3).
3.3 Scoring array accesses
For each array access realized in a loop, Dowser assesses
the complexity of the analysis groups constructed in Sec-
tions 3.1 and 3.2. For each analysis group, it consid-
ers all instructions, and assigns them points. The more
points an AG cumulatively scores, the more complex it
is. The overall rank of the array access is determined
by the maximum of the scores. Intuitively, it reﬂects the
most complex component.
The scoring algorithm should provide roughly the
same results for semantically identical code. For this rea-
son, we enforce the optimizations present in the LLVM
compiler (e.g., to eliminate common subexpressions).
This way, we minimize the differences in (the amount
of) instructions arising from the compiler options. More-
over, we analyzed the LLVM code generation strategies,
and deﬁned a powerful set of equivalence rules, which
minimize the variation in the scores assigned to syntac-
tically different but semantically equivalent code. We
highlight them below.
Table 1 introduces all types of instructions, and dis-
cusses their impact on the ﬁnal score. In principle, all
common instructions involved in array index calculations
are of the order of 10 points, except for the two instruc-
tions that we consider risky: pointer casts and functions
that return non-pointer values used in pointer calculation.
The absolute penalty for each type of instruction is not
very important. However, we ensure that the points re-
ﬂect the difference in complexity between various code
fragments, instead of giving all array accesses the same
score. That is, instructions that complicate the array in-
dex contribute to the score, and instructions that compli-
cate the index a lot also score very high, relative to other
instructions. In Section 6, we compare our complexity
ranking to alternatives.
3.2 Conditions guarding analysis groups
It may happen that the data ﬂow associated with an array
pointer is simple, but the value of the pointer is hard to
follow due to some complex control changes. For this
reason, Dowser ranks also control ﬂows: the conditions
that inﬂuence an analysis group.
Say that an instruction manipulating the array pointer
p is guarded by a condition on a variable var, e.g.,
if(var<10){*p++=0;}.
If the value of var is difﬁ-
4 Using tainting to ﬁnd inputs that matter
Once Dowser has ranked array accesses in loops in or-
der of complexity, we examine them in turn. Typically,
only a small segment of the input affects the execution
of a particular analysis group, so we want to search for
a bug by modifying solely this part of the input, while
keeping the rest constant (refer to Section 5). In the cur-
rent section, we explain how Dowser identiﬁes the link
USENIX Association  
22nd USENIX Security Symposium  53
5
Instructions
Array index manipulations
Basic index arithmetic instr.,
i.e., addition and subtraction
Other index arithmetic instr.
e.g., division, shift, or xor
Different constant values
Rationale/Equivalence rules
GetElemPtr, that increases or decreases a pointer by an index, scores the same.
Thus, operations on pointers are equivalent to operations on offsets. An instruction
scores 1 if it modiﬁes a value which is not passed to the next loop iteration.
These instructions involve more complex pointer calculations than the standard
add or sub. Thus, we penalize them more.
Multiple constants used to modify a pointer make its value hard to follow.
It is easier to keep track of a pointer that always increases by the same value.
We assume that compilers handle accesses to structures correctly. We only consider
constants used to compute the index of an array, and not the address of a ﬁeld.
Though in the context of the loop they are just constants, the compiler cannot
predict their values. Thus they are difﬁcult to reason about and more error prone.
Since decoupling the computation of a pointer from its use might easily lead to
Points
1 or 5
10
10
per value
0
30
500
0
0
1 or 5
100
Constants used to access
ﬁelds of structures
Numerical values
determined outside the loop
Non-inlined functions
returning non-pointer values mistakes, we heavily penalize this operation.
Data movement instructions Moving (scalar or pointer) data does not add to the complexity of computations.
Pointer manipulations
Load a pointer calculated
outside the loop
GetElemPtr
Pointer cast operations
It denotes retrieving the base pointer of an object, or using memory allocators. We
treat all remote pointers in the same way - all score 0.
An LLVM instruction that computes a pointer from a base and offset(s). (See add.)
Since the casting instructions often indicate operations that are not equivalent to
the standard pointer manipulations (listed above), they are worth a close inspection.
Table 1: Overview of the instructions involved in pointer arithmetic operations, and their penalty points.
between the components of the program input and the
different analysis groups. Observe that this result also
beneﬁts other bug ﬁnding tools based on fuzzing, not just
Dowser and concolic execution.
We focus our discussion on an analysis group
AG(accp) associated with an array pointer dereference
accp. We assume that we can obtain a test input I
that exercises the potentially vulnerable analysis group.
While this may not always be true, we believe it is a rea-
sonable assumption. Most vendors have test suites to test
their software and they often contain at least one input
which exercises each complex loop.
4.1 Baseline: dynamic taint analysis
As a basic approach, Dowser performs dynamic taint
analysis (DTA) [31] on the input I (tainting each input
byte with a unique color, and propagating the colors on
data movement and arithmetic operations). Then, it logs
all colors and input bytes involved in the instructions in
AG(accp). Given the format of the input, Dowser maps
these bytes to individual ﬁelds. In Figure 1, Dowser ﬁnds
out that it is sufﬁcient to treat uri as symbolic.
The problem with DTA, as sketched above, is that it
misses implicit ﬂows (also called control dependencies)
entirely [14, 21]. Such ﬂows have no direct assignment
of a tainted value to a variable—which would be prop-
agated by DTA. Instead, the value of a variable is com-
pletely determined by the value of a tainted variable in
a condition. In Figure 1, even though the value of u in
line 12 is dependent on the tainted character ch in line
11, the taint does not ﬂow directly to u, so DTA would
not report the dependency. Implicit ﬂows are notoriously
hard to track [36, 9], but ignoring them completely re-
duces our accuracy. Dowser therefore employs a solu-
tion that builds on the work by Bao et al. [6], but with a
novel optimization to increase the accuracy of the analy-
sis (Section 4.2).
Like Bao et al. [6], Dowser implements strict control
dependencies. Intuitively, we propagate colors only on
the most informative (or, information preserving) depen-
dencies. Speciﬁcally, we require a direct comparison be-
tween a tainted variable and a compile time constant. For
example, in Figure 1, we propagate the color of ch in line
11 to the variables state and u in line 12. However, we
would keep state and u untainted if the condition in
line 11 for instance had been either "if(ch!=’/’)" or
"if(ch<’/’)". As implicit ﬂows are not the focus of
this paper we refer interested readers to [6] for details.
4.2 Field shifting to weed out false dependencies
Improving on the handling of strict control dependen-
cies by Bao et al. [6], described above, Dowser adds a
novel technique to prevent overtainting due to false de-
pendencies. The problems arise when the order of ﬁelds
in an input format is not ﬁxed, e.g., as in HTTP, SMTP
(and the commandline for most programs). The approach
from [6] may falsely suggest that a ﬁeld is dependent on
all ﬁelds that were extracted so far.
54  22nd USENIX Security Symposium 
USENIX Association
6
Input: 
Colors in handlers:
Fig. 4:
The ﬁgure shows how Dowser shufﬂes an input
to determine which ﬁelds really inﬂuence an analysis group.
Suppose a parser extracts ﬁelds of the input one by one, and the
analysis group depends on the ﬁelds B and D (with colors B and
D, respectively). Colors in handlers show on which ﬁelds the
subsequent handlers are strictly dependent [6], and the shaded
rectangle indicates the colors propagated to the analysis group.
Excluded colors are left out of our analysis.
For instance, lighttpd reads new header ﬁelds in a
loop and compares them to various options, roughly as
follows:
while () {
if(cmp(field, "Content") == 0)
...
else if(cmp(field, "Range") == 0)
...
else exit (-1);
field = extract_new_header_field();
}
As the parser tests for equivalence, the implicit ﬂow will
propagate from one ﬁeld to the next one, even if there
is no real dependency at all! Eventually, the last ﬁeld
appears to depend on the whole header.
Dowser determines which options really matter for the
instructions in an analysis group by shifting the ﬁelds
whose order is not ﬁxed. Refer to Figure 4, and suppose