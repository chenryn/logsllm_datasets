 **Migrated issue, originally created by Anonymous**
I'm building a search doo-dad and trying to describe criteria with chains of
attributes, like might appear in a loading option: `Song.album, Album.artist,
Artist.birth_year`.
    * Some tables need to be joined to multiple times, so I have to alias every table involved to be safe.  If all I have is `attr = Song.album`, the best way I can find to create a corresponding alias is `getattr(aliased(attr.property.argument), attr.key)` -- which is ugly, not really documented, and doesn't work with association proxies and other special relationships that have no `key` attribute.
    * After getting some result rows, I often want to retrieve the column data corresponding to some criteria; e.g. if the user searched for a range, it's helpful to show the actual values.  How do I get `some_song.album` given `Song.album`?  I've only come up with the `key` line above, or the slightly more "correct" `attr.__get__(type(some_song), some_song)`.
I could just use string names of properties, I suppose, but I like the
compile-time checking I get by using the actual objects.
A more general comment: some of the recipes and examples are absolutely
fabulous, but I'd never have guessed that SQLAlchemy was even capable of such
things, let alone figured out how to implement them. More documentation on
extending SQLAlchemy itself would be phenomenally helpful. Note, for example,
that the docs for `ConnectionEvents` don't describe the events' arguments.