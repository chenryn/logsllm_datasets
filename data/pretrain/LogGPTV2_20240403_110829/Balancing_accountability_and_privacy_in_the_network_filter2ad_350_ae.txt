### Delegates and Performance

Delegates are required to save briefs for 30 seconds and generate one signature per delegate. We believe these numbers are reasonable and provide sufficient headroom to handle larger networks. For example, CuckooFilter [38] can achieve over 180,000 lookups per second in a table with one billion entries, and the Ed25519 signature system [8] can perform 109,000 signatures per second on a 2010 quad-core 2.4GHz Westmere CPU.

### Storage Overhead

As routers verify flows, they maintain a whitelist of verified flows to avoid re-verifying every single packet. Whitelist entries expire at the end of each verification interval, at which point the flow is re-verified. We use our trace data to estimate the size of this whitelist.

To account for network architectures with addresses significantly larger than IP's, we assume each address is 60 bytes—20 bytes each for the NID, HID, and SID. (Many research efforts explore self-certifying IDs [6, 27, 4, 17], which are typically hashes of a name or public key; we choose 20 bytes since SHA-1 produces 20-byte digests.) Each entry identifies flows at a host-host granularity, so each entry is 120 bytes (two 60-byte addresses).

Figure 10 illustrates the size of the whitelist as the verification interval varies. For a given verification interval, we group the flows in our trace into bins the size of that interval. Flows belong to a bin if they were active during that time period (so a flow could belong to multiple bins). The figure reports the whitelist size based on both the average number of flows across bins and the maximum seen in any bin. A 10-second interval requires a maximum of 94 MB of whitelist space.

### Shutoff Mechanism

After receiving a shutoff command, a delegate blocks malicious flows by ceasing to verify them. The next time a router on the path from the attacker to the victim verifies the flow, the delegate returns a DROP_FLOW, and the router blocks the flow. The speed at which this occurs after a shutoff depends on the number of on-path routers performing verification and how often they verify each flow. Figure 11 shows the expected delay before a shutoff takes effect for different verification intervals as a function of the number of participating routers.

### Privacy

How much privacy does APIP provide? If a sender uses its source domain as a delegate, this depends on the size of that domain. Raghavan et al. [30] find that, if ISPs were to aggregate prefixes geographically, over half of the prefixes advertised by many popular last-mile ISPs would include more than 10 million IPs.

If a sender uses a third-party delegate, the anonymity set grows as the packet travels further from the source domain. To estimate this, we use Route Views [2] data from January 1, 2014, to roughly estimate AS "fanout." For each AS, we track how many customer networks sit beneath it in the AS hierarchy. (To be conservative, we only count an AS as a customer if it originates a prefix. Transit networks with no hosts do not contribute to an anonymity set.) For each BGP announcement, we add the origin AS to its first- and second-hop providers' customer sets. Figure 12 shows a CDF of first- and second-hop anonymity set sizes. Notably, 50% of ASes originating prefixes have at least 180 first-hop "siblings" and 90% have over 900 second-hop siblings. Although drawing conclusions about AS topology based on BGP announcements is imprecise, these figures give an idea of the anonymity benefits of delegated accountability.

### Related Work

#### Privacy

Various techniques exist for hiding network source addresses, including crowds [32], mixes [12], and onion routing [31]. Real-world implementations based on these ideas include Anonymizer [2] and Tor [3]. Liu et al. consider building onion routing into the network architecture itself [25]. NDN [20] takes a more radical approach by eliminating source addresses altogether; data finds the sender by following "breadcrumbs" left by the request. The drawback to all of these approaches is a complete lack of accountability; there is no easy way to link malicious traffic with senders.

Raghavan et al. [30] describe ISPs offering NAT for privacy as a service but using a single source address. LAP [19] is similar to (but more secure than) our "NAT-at-every-hop" approach but does not consider accountability.

#### Accountability

Techniques like ingress/egress filtering [16, 24] aim to provide some degree of accountability by reducing the prevalence of source address spoofing; more sophisticated variants exist [29, 14, 21]. This class of approaches has limitations: (1) source addresses are only protected on a domain granularity, (2) filtering by itself provides no "shutoff" mechanism for misbehaving hosts who do not send spoofed packets, and (3) it is not compatible with schemes for hiding return addresses for the sake of anonymity.

As described in §3.1, our verify() and shutoff() mechanisms borrow heavily from AIP [4], which in turn based its mechanisms on ideas presented by Shaw [34] and in AITF [5]. By modifying these mechanisms to work with delegates, we make them privacy-preserving, enable long-term resolution, and avoid relying on self-certifying IDs.

Accountability delegates are described in [7], but the protocol is costly and not evaluated; privacy receives only passing mention.

#### Balancing Accountability and Privacy

The idea of identity escrow is not new (e.g., [10]). Our notion of delegated accountability is similar in flavor to the contractual anonymity described in RECAP [33], in which a service provider (e.g., an online forum) offers its users anonymity, which can be broken only if they violate a pre-arranged contract. The key difference is that RECAP provides contractual anonymity at the application layer, while we balance anonymity and accountability at the network layer, which poses unique constraints (like requiring source addresses to be both routable and anonymizable).

#### Addressing

The use of addresses that consist of separate network, host, and socket IDs, creating separate identifiers and locators, has been widely proposed [15, 26, 22]. [11, 9] discuss the meaning of source addresses, though without our focus on privacy and accountability.

### Conclusion

This paper demonstrates that a balance between accountability and privacy in the network is possible. By decoupling source addresses' roles as accountability addresses and return addresses, APIP strikes a balance between the two seemingly incompatible goals. Delegated accountability allows routers to verify that each packet they forward is vouched for and allows attack victims to report abuse while permitting senders to hide their return addresses. Furthermore, the changes to traditional thinking about source addresses required to implement APIP are not radical; though more exploration is clearly required, we think the ideas presented here could be applied to the current Internet.

### Acknowledgments

We thank the reviewers and our shepherd, John Wroclawski, for their insightful suggestions. This research was funded in part by NSF under award number CNS-1040801 and by DoD, Air Force Office of Scientific Research, National Defense Science and Engineering Graduate (NDSEG) Fellowship, 32 CFR 168a.

### References

[References remain unchanged as they are already well-formatted and accurate.]