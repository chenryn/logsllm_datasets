# 八、操作框架和 Helm
使用 Helm 的优势之一是能够同步本地状态和活动状态。使用 Helm，本地状态由值文件管理，当使用`install`或`upgrade`命令提供时，这些值将应用于 Kubernetes 集群中的实时状态同步。在前面的章节中，这是通过在需要更改应用时调用这些命令来实现的。
同步这些更改的另一种方法是在集群中创建一个应用，定期检查所需的状态是否与环境中的当前配置相匹配。如果状态不匹配，应用可以自动修改环境以匹配所需的状态。这个应用被称为 Kubernetes 操作符。在本章中，我们将创建一个基于 Helm 的操作符，帮助确保本地定义的状态始终与集群的活动状态相匹配。如果没有，操作员将执行适当的 Helm 命令来更新环境。
我们将在本章中讨论以下主题:
*   理解库伯内特算子
*   创建掌舵操作员
*   使用 Helm 管理操作员和**定制资源** ( **CRs** )
*   清理你的 Kubernetes 环境
# 技术要求
对于本章，您需要在本地计算机上安装以下技术:
*   `minikube`
*   `helm`
*   `kubectl`
除了这些工具之外，您应该可以在 https://github.com/PacktPublishing/-Learn-Helm 的找到包含与 GitHub 上的示例相关的资源的 Packt 存储库。本章将引用该存储库。
# 理解库伯内特算子
自动化是 Kubernetes 平台的核心。正如 [*第 1 章*](01.html#_idTextAnchor017)*中所述，理解 Kubernetes 和 Helm*，Kubernetes 资源可以通过运行`kubectl`命令隐式管理，也可以通过应用 **YAML** 格式的表示声明性管理。一旦使用 Kubernetes**命令行界面** ( **CLI** )应用了资源，Kubernetes 的基本原则之一就是将集群内资源的当前状态匹配到所需状态，这一过程被称为**控制循环**。这种持续、不终止的集群状态监控模式是通过使用控制器来实现的。Kubernetes 包括许多平台本地的控制器，例如拦截请求的准入控制器、Kubernetes **应用编程接口** ( **应用编程接口)**以及管理正在运行的 Pod 副本数量的复制控制器。
随着人们对 Kubernetes 的兴趣开始增长，为用户提供扩展基础平台功能的能力，以及围绕管理应用生命周期提供更多智能的方式，这两者的结合导致了几个重要概念的产生，这些概念定义了第二波 Kubernetes 开发。首先，**自定义资源定义** ( **CRDs** )的引入使用户能够扩展默认的 Kubernetes API(与 Kubernetes 平台交互的机制)，以便创建和注册新类型的资源。注册一个新的 CRD 会在 Kubernetes API 服务器上创建一个新的表示状态转移 ( **REST** **ful** )资源路径。因此，类似于如何使用 Kubernetes CLI 执行`kubectl get pods`来检索所有 Pod 对象，为名为**留言簿**的对象类型注册一个新的 CRD，例如，允许调用`kubectl get guestbook`来查看之前创建的所有留言簿对象。随着这一新功能的实现，开发人员现在可以创建自己的控制器来监控这些类型的 CRs，以管理可以通过使用 CRD 来描述的应用的生命周期。
第二个主要趋势是部署在 Kubernetes 上的应用类型的进步。越来越频繁地部署更复杂和有状态的应用，而不是小而简单的应用。这些类型的高级应用通常需要更高级别的管理和维护，例如处理多个组件的部署，以及围绕“第二天”活动的考虑，例如备份和恢复。这些任务超出了 Kubernetes 中常见的控制器类型，因为与它们所管理的应用相关的深厚知识必须嵌入其中。这种使用 CR 管理应用及其组件的模式被称为“T2”操作员模式。由软件公司 CoreOS 于 2016 年首次创造的“操作员”旨在获取操作员管理应用生命周期所需的知识。运营商被打包成普通的容器化应用——部署在 Pod 中——对应用接口的变化作出反应，而不依赖于客户关系管理系统。
运算符通常使用名为“运算符框架”的工具包编写，并基于以下三种不同技术之一:
*   去
*   Ansible
*   舵
基于 Go 的运算符利用 Go 编程语言来实现控制循环逻辑。基于 Ansible 的操作员利用 Ansible 命令行界面工具和 Ansible 行动手册。Ansible 是一个自动化工具，它的逻辑写在 YAML 文件中，叫做剧本。
在这一章中，我们将集中讨论基于头盔的操作器。舵手操作员基于舵手图表和由舵手命令行界面提供的功能子集来进行他们的控制回路逻辑。因此，它们代表了 Helm 用户实现其运营商的一种简单方式。
了解了操作符之后，让我们创建一个自己的操作符，u 唱 Helm。
# 创建掌舵操作员
在本节中，我们将编写一个基于掌舵的操作器，用于安装在 [*第 5 章*](05.html#_idTextAnchor265)*中创建的留言簿 Helm 图表*。这个图表可以在 Pack [t 资源库的`guestbook/`文件夹下看到(https://github . com/PacktPublishing/-Learn-Helm/tree/master/Helm-charts/ch](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook)arts/guest book)。
操作符被构建为一个容器映像，其中包含维护应用的控制循环逻辑。下图演示了留言簿操作器部署后的工作方式:
![Figure 8.1 – Guestbook Operator workflow ](img/Figure_8.1.jpg)
图 8.1–留言簿操作员工作流程
留言簿操作员将持续观察留言簿 CRs 的变化。创建留言簿 CR 时，留言簿操作员将安装您在 [*第 5 章*](05.html#_idTextAnchor265)*创建的留言簿图表*。相反，如果留言簿 CR 被删除，留言簿操作员将删除留言簿 Helm 图表。
了解了留言簿操作员将如何工作，让我们建立一个可以构建和部署操作员的环境。
## 设置环境
首先，由于操作员将被部署到 Kubernetes，您应该通过运行以下命令来启动您的 Minikube 环境:
```
$ minikube start
```
启动 Minikube 后，创建一个名为`chapter8`的命名空间，如下所示:
```
$ kubectl create ns chapter8
```
由于留言簿操作符是作为容器映像构建的，因此您需要创建一个可以存储它的映像存储库，以便以后可以引用它。为了存储这个映像，我们将在 Quay (quay.io)中创建一个新的存储库，这是一个公共的容器登记处(尽管如果您在其他地方有一个帐户，这也足够了)。我们还将准备一个本地开发环境，其中包含构建操作员形象所需的必要工具。
让我们从在 Docker 创建一个新的映像库开始。
### 创建 Docker 仓库
在 Docker 创建一个新的仓库需要你有一个 Docker 账户。按照以下步骤创建 Docker accou [nt:](https://quay.io/signin/)
1.  [Navigate to https:/](https://quay.io/signin/)/quay.io/signin/ in your browser. You will be prompted by a screen to enter your Quay credentials, as illustrated in the following screenshot:
    ![Figure 8.2 – Red Hat Quay sign-in page ](img/Figure_8.2.jpg)
    图 8.2–红帽 Docker 签到页面
2.  At the bottom of the page, click the **Create Account** link. You will be prompted with a set of dialog boxes to create a new Quay account, as illustrated in the following screenshot:
    ![Figure 8.3 – Red Hat Quay Create new account page  ](img/Figure_8.3.jpg)
    图 8.3–红帽 Docker**创建新账户**页面
3.  输入您需要的凭证，然后选择**创建免费账户**。
4.  You will soon be sent an email confirmation. Click the link on the confirmation email to verify your account and continue using Quay with your new account.
    创建新的 Quay 帐户后，您可以继续为操作员映像创建新的映像存储库。
    要创建新的映像库，请选择 Docker 页面右上角的 **+** 加号图标，然后选择**新库**，如下图所示:
    ![Figure 8.4 – Selecting “New Repository” to create a new image repository ](img/Figure_8.4.jpg)
    图 8.4–选择“新存储库”以创建新的映像存储库
5.  You will then be taken to the **Create New Repository** page, where you should enter the following details:
    对于**存储库名称**，输入`guestbook-operator.`
    选择**公共**单选按钮，表示对存储库的未经验证的访问。这一更改将简化 Kubernetes 访问映像的方式。
    其余选项可以保持默认值。完成后，将出现**创建新存储库**页面，如下图所示:
    ![Figure 8.5 – The “Create New Repository” page in Quay ](img/Figure_8.5.jpg)
    图 8.5–Docker 的“创建新仓库”页面
6.  选择**创建公共仓库**按钮创建 Docker 仓库。
现在已经创建了一个存储库来存储留言簿操作员映像，让我们准备一个环境，其中包含构建 Helm 操作员所需的工具。
### 准备本地发展环境
为了创建 Helm 操作符，您至少需要以下 CLI 工具:
*   `operator-sdk`
*   `docker`、`podman`或`buildah`
`operator-sdk` CLI 是用于帮助开发 Kubernetes 操作员的工具包。它包含简化操作员开发流程的内在逻辑。在引擎盖下，`operator-sdk`需要一个容器管理工具，可以用来构建操作员形象。`operator-sdk` CLI 支持`docker`、`podman`和`buildah`作为底层容器管理工具。
要安装`operator-sdk`命令行界面，您只需从他们位于 https://github.com/operator-framework/运营商-sdk/releases 的 [GitHub 存储库中下载一个版本。但是，根据您的操作系统，安装`docker`、`podman`或`buildah`的过程可能会有很大不同；更不用说，Windows 用户将无法在本地使用`operator-sdk`](https://github.com/operator-framework/operator-sdk/releases)lkit。
幸运的是，Minikube **虚拟机** ( **虚拟机**)可以作为许多不同操作系统的开发人员的工作环境，因为它是一个 Linux 虚拟机，并且还包含 Docker CLI。在本节中，我们将把`operator-sdk`安装到 Minikube VM 中，并将使用这个环境来创建操作员。请注意，虽然提供的步骤是为在虚拟机中运行而设计的，但这些步骤中的大多数也将适用于所有 Linux 和 Mac 机器。
按照以下步骤将安装到迷你库贝虚拟机的上:
1.  通过运行`minikube ssh`命令来访问虚拟机，如下所示:
    ```
    $ minikube ssh
    ```
2.  Once inside the VM, you need to download the `operator-sdk` CLI. This can be accomplished using the `curl` command. Note that the `operator-sdk` version used at the time of writing was version `0.15.2`.
    要下载此版本的`operator-sdk`命令行界面，请运行以下命令:
    ```
    $ cu**rl -o operator-sdk -L https://github.com/operator-framework/operator-sdk/releases/download/v0.15.2/operator-sdk-v0**.15.2-x86_64-linux-gnu 
    ```
3.  下载后，您需要将`operator-sdk`二进制文件的权限更改为用户可执行。运行`chmod`命令进行修改，如下所示:
    ```
    $ chmod u+x operator-sdk
    ```
4.  接下来，将`operator-sdk`二进制文件移动到由虚拟机的`PATH`变量管理的位置，例如`/usr/bin`。由于该操作需要根权限，您将需要使用`sudo`运行命令，如下所示:
    ```
    $ sudo mv operator-sdk /usr/bin
    ```
5.  Finally, verify your `operator-sdk` installation by running the `operator-sdk version` command, like this:
    ```
    $ operator-sdk version
    operator-sdk version: 'v0.15.2', commit: 'ffaf278993c8fcb00c6f527c9f20091eb8dd3352', go version: 'go1.13.3 linux/amd64'
    ```
    如果此命令执行无误，则说明您已经成功安装了`operator-sdk` CLI。
6.  作为额外的步骤，您还应该在您的 Minikube 虚拟机中克隆 Packt 存储库，因为我们稍后将利用`guestbook` Helm 图表来构建 Helm 操作符。在虚拟机中运行以下命令来克隆 r [档案:](https://github.com/PacktPublishing/-Learn-Helm.git)
    ```
    **$ git clone https://github.com/PacktPub**lishing/-Learn-Helm.git Learn-Helm