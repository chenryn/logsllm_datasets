,
,
,i
1
next  assertion.  Since  the  AI  program  is  loop-free,  each 
assertion will be checked exactly once. 
3.3.3. Counterexample Analysis 
that  perform 
inserts  guards 
For  any  instance  of  unsafe  code  reported  by  BMC, 
WebSSARI 
run-time 
inspections  as  part  of  an  automated  patching  process—
specifically, it inserts routines that sanitize untrusted input 
before  they  are  used  by  SOCs.  Several  combinations  of 
patching  locations  may  fix  the  same  section  of  insecure 
code. In this section, we will describe how our algorithm 
takes  advantage  of  BMC-produced  counterexamples  to 
identify  an  optimal  patching  combination  with  a 
minimum  number  of  insertions.  Our  definition  of  an 
effective fix is as follows. 
Definition  1: Given  a  error  trace r,  a  Fix(V)  is  said  to 
effective  if,  after  sanitizing  all  variables  v V(cid:143) ,  the  error 
trace is removed (fixed). 
For an error trace r, we refer to the set of variables that 
directly  caused  assertion  violations  (i.e.,  variables  that 
appeared in assertion commands and caused violations) as 
violating  variables,  and  a  variable  set  that  yields  an 
effective fix when sanitized as a fixing set. Given an error 
trace  set  R,  we  aim  to  find  a  minimal  fixing  set  VR  such 
that  for  every  trace  r R(cid:143) ,  Fix(VR)  serves  as  an  effective 
fix  of  r.  For  an  error  trace  r R(cid:143) ,  let  Vr  denote  the 
violating  variables  of  r.  A  naïve  method  of  finding  a 
fixing  set  for  R  is  nV
(cid:32)
R
(cid:42) .  Obviously,  fixing  all 
V
r
(cid:5) (cid:143)
r R
violating  variables  in  R  removes  all  error  traces  (for  all 
r R(cid:143) ,  Fix( n
n
V R )  is  an  effective  fix),  but  in  many  cases, 
V R  is  not  the  minimum  set.  Figure  7  presents  a 
simplified  version  of  a  vulnerable  file  we  found  in  PHP
Surveyor. In this example, the tainted variable $sid taints 
$iquery, $i2query, and $fnquery, causing lines 2, 3, and 4 
to  become  vulnerable.  A  naïve  fixing  set  would  be 
{$iquery,  $i2query,  $fnquery}—as  was  adopted  by  our 
TS  algorithm.  However,  the  optimal  fixing  set  is  clearly 
{$sid}, and so sanitizing $sid is by itself an effective fix. 
In  a  source  code  of  PHP  Surveyor,  $sid  was  the  root 
cause  of  16  vulnerable  program  locations;  our  TS 
algorithm  made  16  instrumentations,  whereas  a  single 
instrumentation  would  have  been  sufficient  to  secure  the 
code.
1: $sid = $_GET['sid']; if (!$sid) {$sid = $_POST['sid'];}
2: $iq = "SELECT * FROM groups WHERE sid=$sid”;DoSQL($iq);
3: $i2q = "SELECT * FROM ans WHERE sid=$sid; DoSQL($i2q); 
4: $fnquery = "SELECT * FROM questions, surveys WHERE 
questions.sid=surveys.sid AND questions.sid='$sid'"; 
DoSQL($fnquery);
Figure 7. Multiple vulnerabilities arising from the same root 
cause in PHP Surveyor. 
To achieve this, for each violating variable 
V(cid:68) (cid:143) , a 
v
 is  built  by  tracing  back  from  the 
r
replacement  set  vs
violation  point  along  the  error  trace  r  while  recursively 
(cid:68)
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:16 UTC from IEEE Xplore.  Restrictions apply. 
Note  that  if  v(cid:302)  is  tainted,  then  vs
(cid:68)
 presents  a  tainted 
such that 
(cid:68)(cid:143)(cid:5)
v V s
v
(cid:68)
R
n
m
(cid:136)
V
R
adding  variables  that  serve  as  unique  r-values  of  single 
assignments. That is,
i
f  the single assignment is
,
(cid:137)
s
v
(cid:69)
(cid:32)
s
v
(cid:68)
(cid:173)(cid:176)
{
}
v
(cid:68)
(cid:174)
(cid:176)(cid:175)
{
v
(cid:68)
},  
.
otherwise
of  the  form v
(cid:32)
(cid:68) (cid:69)
v
flow path along which subsequent assignments cause v(cid:302) to 
become  tainted.  While  tracing  back  along  the  error  trace 
 is  expanded  with  variables  that  can  be  sanitized 
r,
vs
(cid:68)
instead of v(cid:302), yet achieve the same effect as sanitizing v(cid:302).
Lemma  1: If  a  Fix( rV ),
then for any 
r
V(cid:68) (cid:143) ,  is  an  effective  fix  for  r,
v
v(cid:69) (cid:68) ) is also an effective 
[
rV v
]
/
s
v
(cid:68)
, Fix(
(cid:69)(cid:143)
v
v(cid:69) (cid:68)  denotes  (
]
/
fix, where 
[
rV v
rV
(cid:16)
{
v
(cid:68)
})
(cid:137)
{
}
v
(cid:69)
.
Proof:  Initially, 
vs
(cid:68)
is  expanded  only  with  single 
assignments of the form v(cid:302)=v(cid:533), meaning that the value of 
v(cid:302) is solely dependent upon v(cid:533). After expanding  vs
 with
v(cid:533), this process is repeated to add variables (if any) whose 
value v(cid:533) depends on. Therefore, sanitizing any variable in 
vs
 has  the  same  effect  as  sanitizing  the  initial  variable 
(cid:68)
v(cid:302).
(cid:68)
To identify the root errors, we calculate an error trace 
set  R’s  minimum  fixing  set.  First,  for  each  r R(cid:143) ,  we 
identify  the  violating  variable  set  Vr  and  then  apply  the 
naïve method to derive 
n
RV
, where 
V
n
R
(cid:32) (cid:42) .
V
r
(cid:5) (cid:143)
r R
Second, 
for  each 
V(cid:68) (cid:143)
v
n
R
,  we  calculate 
its 
replacement  set 
vs
(cid:68)
.  Finally,  the  minimum  effective 
fixing  set 
 can  be  obtained  by  solving  min  |
m
RV
|
m
RV
(cid:68)(cid:143)(cid:5)
v V s
v
(cid:68)
R
n
such that 
m
(cid:136)
V
R
(cid:122) (cid:135) .
Lemma  2:  Given  an  error  trace  set  R,  for  all  r R(cid:143) ,
Fix( m
RV
) is an effective fix for r. 
Proof:  Obviously,  fixing  all  violating  variables  in  R 
removes all error traces. That is, if 
V
n
R
(cid:32) (cid:42) , then for 
V
r
(cid:5) (cid:143)
r R
all r R(cid:143) ,  Fix(
)  is  an  effective  fix.  From  Lemma  1, 
substituting
n
RV
V(cid:68) (cid:143)  with  variable 
v
r
(cid:143)
v
s
v
(cid:68)
 still  yields  an 
effective  fix.  Since  for  all
V(cid:68) (cid:143)
v
n
R
,  for  all  vs
(cid:68)
 of  R, 
m
(cid:136)
V
R
(cid:122) (cid:135) ,  Fix( m
RV
s
v
(cid:68)
)  remains  an  effective  fix  for 
all r R(cid:143) .
3.3.4. Minimal Fixing Set 
The  only  remaining  problem  is  solving  min  |
|
(cid:122) (cid:135) . In the following, we 
m
RV
offer a formal definition and prove it to be a NP-complete 
problem.  Finally,  we  describe 
the  heuristic  search 
procedure that WebSSARI incorporates. 
Definition  2:  Given  a  variable  set  V  and  a  collection  of 
the  MINIMUM-
subsets  of  V,
(cid:32) (cid:34)
, 
S
S
,
1{ ,
S
}n
INTERSECTING-SET  problem  is  to  find  a  minimum  set 
M V(cid:136) , such that for  1
(cid:136) (cid:122) (cid:135) .
n S M
(cid:100) (cid:100)
i
,
i
Theorem: The MINIMUM-INTERSECTING-SET problem 
is NP-complete. 
iS
Proof: The  MINIMUM-INTERSECTING-SET  (MIS) 
problem is in NP since we can guess a subset S’ of S and 
check in polynomial time whether a) S’ shares at least one 
S(cid:143) , and b)  S’  has 
common element with every set in 
an  appropriate  size.  To  prove  that  it  is  NP-complete,  we 
reduce the VERTEX-COVER problem to MIS. If G is an 
undirected  graph,  a  vertex  cover  of  G  is  a  subset  of  the 
nodes where every edge of G touches one of those nodes. 
The vertex cover problem asks for the size of the smallest 
vertex  cover.  Our  reduction  maps  each  edge  ei  in  G  to  a 
,  where  v  and  v’ denote  the  two  vertices 
set
connected by ei. Then the undirected graph G with edges 
en(cid:34)  can  be  represented  as  a  set  of  vertex  sets 
,
1e
(cid:32) (cid:34)
. The size of the smallest vertex cover is |M|
{ ,
S
S
1
where
Si
(cid:5) (cid:143) , Si M(cid:136) (cid:122) (cid:135)  . 
{ ,
v v
Sn
iS
(cid:32)
'}
S
}
,
,
The MIS problem can be reduced to the SET-COVER 
problem  where  all  sets  have  an  equal  cost.  Therefore,  in 
WebSSARI, we adopted the greedy heuristic algorithm in 
[5],  which  gives  a  1+ln(|S|)  approximation  ratio  in 
polynomial time. The reduction procedure is described as 
follows. Given a universe U of n elements, a collection of 
subsets  of  U,
,  and  a  cost  function 
(cid:34)
,
(cid:32)
S
S
S
{
}
,
v
v
1
v
k
(cid:14)(cid:111)
Q
v
:c S
,  the  SET-COVER  problem  asks  to  find  a 
minimum-cost  subcollection  of  Sv  whose  set  union  is  U.
The  reduction  takes  each  Si  as  an  element  of  U.  Let 
(cid:32)
S
v
S
|
v
i
v
i
(cid:143)
V
,  where 
S
v
i
(cid:32)
{
S
|
v
i
j
(cid:143)
S S
,
j
(cid:143)
U
}
j
 ,  and 
(cid:11)
c Sv be  a  constant.  The  MIS  problem  can  be  solved  by 
(cid:94)
(cid:12)i
(cid:96)
first  solving 
replacing each selected 
Sv  with  vi .8
i
this  SET-COVER  problem  and 
then 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:16 UTC from IEEE Xplore.  Restrictions apply. 
Code Walker
Inside BMC Engine
SableCC
Lexer
Parser
AST
LALR(1)
Grammar
Grammar
Generation
Command
Flow
Information
Flow
AST
Generator
Program
Abstractor
Abstract Interpretation 
BMC Engine 
Prelude
Prelude
Prelude
Renamer
Constraint
Generator
SAT Solver 
Counterexample
Analyzer
Instrumentor
PHP
Filter
(Code 