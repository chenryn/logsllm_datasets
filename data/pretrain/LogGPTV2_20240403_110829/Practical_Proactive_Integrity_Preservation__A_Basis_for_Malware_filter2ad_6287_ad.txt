if the subject is at the highest possible integrity level.
Finally, the invul sub as well as log sub attributes are
set from the executable (cid:12)le.
Handling Devices, IPC, and File Renaming.
Devices typically need special treatment since they are
not persistent in the same sense as (cid:12)les. The integrity
and down obj labels of devices such as /dev/kmem,
/dev/mem, and /dev/sda* are set to be 111 to en-
sure that only the highest integrity subjects can modify
them. Devices such as /dev/null and /dev/zero are
treated as having low-integrity for writes, and high in-
tegrity for reads. The integrity labels of devices such
as /dev/tty* and /dev/pty/* are derived from that
of the associated login processes, in a manner similar
to that of SELinux.
IPC and socket communication are treated as com-
munication channels between subjects. As such, they
inherit labels from the subjects that they connect.
Moreover, since most of these communication mech-
anisms are bidirectional, subjects interconnected using
them have identical security attributes5. The kernel
enforcement component keeps track of \groups" of sub-
jects interconnected using IPC and socket communica-
tion so that operations such as downgrading can be
performed safely.
Finally, (cid:12)le renaming operations are deemed as a
write operation on the (cid:12)le object.
Implementing Subject Downgrading. Subjects
are downgraded at runtime only if doing so will not
result in revocation of privileges. Speci(cid:12)cally, the user-
level component indicates, at the time of opening a (cid:12)le
for read, whether a higher integrity subject is willing
to downgrade to a lower level. The kernel component
permits the downgrade if (a) the (cid:12)le can be successfully
opened, (b) the subject does not have higher integrity
(cid:12)les that it is writing into, and (c) all other subjects
with which this subject has IPC can also be down-
graded.
User-Level Component. The user-level component
is implemented by intercepting system calls in glibc.
Since the policies themselves are application-speci(cid:12)c,
their implementation is kept in a separate library. The
user-level communicates with the kernel
level using
ioctl’s to implement complex policies. We already
described how \downgrade subject" policy is imple-
mented through such coordination.
It also supports
context-aware trust policies: the user level determines
whether a trusted application is invulnerable (or (cid:13)ow-
aware) in a certain context, and if so requests an open
without downgrading its integrity. For (cid:13)ow-aware ap-
plications, the user-layer communicates to the kernel
layer if (cid:12)les should be opened with a lower integrity
level than that of the subject. The user level is also re-
sponsible for implementing the redirection policy. The
kernel layer is unaware of this policy, and simply treats
it as a combination of a read operation on the original
(cid:12)le, and a write operation on a new (cid:12)le.
5An exception occurs in the case of trusted subjects that are
invulnerable to inputs on a communication channel: in this case,
the trusted process can continue to maintain its integrity level
and other security attributes regardless of the security attributes
of the subject on the other end of the communication channel.
257
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:10:00 UTC from IEEE Xplore.  Restrictions apply. 
6. Evaluation
We initially implemented PPI on CentOS and subse-
quently migrated to a Ubuntu system. Due to time
limitations, some of our evaluations were performed on
CentOS while others were performed on Ubuntu. The
speci(cid:12)cs of these two systems are as follows:
(cid:15) CentOS 4.4 distribution of Linux with kernel version
2.6.9. The test machine has 693 rpm packages and
205k (cid:12)les in total.
(cid:15) Ubuntu 7.10 distribution of Linux with kernel version
2.6.22-14. The test machine has 1164 dpkg packages
and 159k (cid:12)les in total.
6.1. Experience
Policy Generation on Ubuntu. For generating
policies, we used an access log collected over a period
of 4 days on a personal laptop computer. We also car-
ried out administrative tasks such as installing soft-
ware, running backups, etc. The log (cid:12)le we obtained
was around 1GB.
The set of initial integrity-critical (cid:12)le objects in-
clude (cid:12)les within /boot, /etc/init.d/, /dev/sda and
/dev/kmem. We identi(cid:12)ed 26 untrusted application
packages, which include:
(cid:15) Media players: mplayer and mpglen
(cid:15) Games: gnome-games, crafty and angband
(cid:15) Instant messengers: pidgin
(cid:15) Emulators: apple2 and dosemu
(cid:15) File utilities: rar, unrar and glimpse
(cid:15) X utilities: axe
(cid:15) Java applications: jta, sun-java6-bin and sun-java-jre
Based on the above initial con(cid:12)gurations to log anal-
ysis, we performed the procedures described in Sec-
tion 3 for label computation and policy generation.
Among all the (cid:12)les (159K) and dpkg packages (1164)
on the system, the initial labels of 783 (cid:12)les (including
(cid:12)les that belong to 26 untrusted packages and those
written by them) were set to low integrity, while all
the others are labeled high integrity initially.
Then we moved on to the policy generation phase.
The number of subjects and objects that were assigned
to di(cid:11)erent policy choices across di(cid:11)erent phases are
summarized in Figure 3.
In Phase I, the log anal-
ysis determined 73305 (cid:12)les (934 packages) that need
to be marked \preserve-high." In Phase II, the anal-
ysis identi(cid:12)ed which of the six policy choices should
be applied to each con(cid:13)icting accesses. As a result,
168 programs that are exclusively run in system con-
text were assigned \subject-deny" policy, and they
won’t be allowed to read untrusted input. 4 programs
(Xorg, dbus-daemon, gconftool-2, gnome-session) were
marked \trusted," and they would retain high integrity
level even when exposed to low-integrity input in cer-
tain channels, for instance, /tmp/.X11-unix/X0 in the
case of Xorg. The rest programs (6905) can be down-
graded when reading low-integrity input. Correspond-
ingly, for (cid:12)le objects, deny policies were applied to
73305 integrity critical objects, while the others can
be downgraded6. Finally, the analysis identi(cid:12)ed 15 (cid:12)le
objects for redirection policy, including (cid:12)les such as the
preferences (cid:12)les for gedit editor.
Phase III used the initial policy con(cid:12)guration
from Phase II. It reported 66 violations due to ob-
ject and subject labels being downgraded in a run-
ning system.
(A few thousand object and sub-
ject downgrades were observed.) Of all the viola-
tions, trackerd accounted for 51 con(cid:13)icts. Another
ten con(cid:13)icts were due to nautilus, gconfd-2, and
bonono-activation-server. After an analysis of the
con(cid:13)ict report, it was determined that these four appli-
cations needed to be classi(cid:12)ed as trusted. Finally, four
con(cid:13)icts arose because bash could not write to the his-
tory (cid:12)le. This was resolved by using the redirect policy.
In addition, as described earlier, Mozilla and pine
were also identi(cid:12)ed to be trusted applications. (One
could of course avoid this for a browser by running two
instances, one operating in high-integrity and used to
access high-integrity web sites, and the other in low-
integrity to access untrusted web sites.) Most of the
trusted applications listed above should be made (cid:13)ow-
aware, so they label their outputs appropriately, based
on the integrity of their inputs.
PPI Experience during Runtime. After we
plugged in the policies generated in the previous step,
we ran PPI in normal enforcing mode for several days.
The system booted up without problems, which indi-
cated that none of the init related programs were af-
fected by low integrity input. We (cid:12)rst ran all the nor-
mal administration type of tasks using root privilege,
such as checking disk space, con(cid:12)guring network in-
terfaces, etc. Then we logged in as normal user, and
worked on the system as a typical user would. We also
used all of the untrusted applications installed on the
system. None of these activities raised any security vio-
lations. (We were able to create violations on purpose,
e.g., by trying to edit a high and low integrity (cid:12)le at
the same time using a benign editor.)
One slight problem is the side-e(cid:11)ect of redirection
6It should be noted that one of the main reasons for so many
(cid:12)les being labeled downgradable is that the log was collected over
a relatively short period of time, during which many of the appli-
cations were not exercised. Thus, we should view the policies on
these remaining (cid:12)les as \initial" policies that would be further
re(cid:12)ned in Phase IV of policy development. (Implementation of
Phase IV is ongoing work.)
258
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:10:00 UTC from IEEE Xplore.  Restrictions apply. 
subject-deny
subject-downgrade
subject-trust
object-deny
object-downgrade
object-redirect
Phase I
Phase II
Phase III
subject
object
subject
object
subject
object
168
6905
4
168
6905
8
73305
86185
73305
86185
15
73305
86185
16
Figure 3. PPI Policy Generation in Different Phases.
policies: a duplicate copy of many of the preference (cid:12)les
will be created as a result. One option is to periodically
delete the low-integrity version of these (cid:12)les.
6.2. E(cid:11)ectiveness Against Malicious Applica-
tions
Our integrity policy described in Section 3 provides
e(cid:11)ective defense against malware attacks.
(cid:15) Linux rootkits. In this experiment, we downloaded
around 10 up-to-date rootkits from [1]. Since our
browser is (cid:13)ow-aware, it checked the source of the
downloaded software, and marked them as untrusted.
User level rootkits such as bobkit, tuxkit, and lrk5
required an explicit installation phase.
PPI re-
ported permission violations such as deletion of
/etc/rc.sysinit and /bin/ps, and hence their instal-
lation failed.
Kernel level rootkits in the form of kernel modules
are prevalent nowadays and are more di(cid:14)cult to de-
tect. We downloaded, compiled, and installed one
such rootkit, adore-ng. Since the initial download
was low-integrity, the kernel module was also labeled
with low-integrity. Since PPI does not permit load-
ing of kernel modules with low integrity, this rootkit
failed. Since only high integrity subjects are allowed
to write to /dev/kmem, another kernel rootkit mood-
nt failed with the error message \.D’ho! Impossible
aprire kmem."
(cid:15) Installation of \Malicious" rpm package. The Fedora
package buildsystem [11] suggest three possible at-
tack scenarios from the malicious package writer. Of
these, a malicious rpm-scriptlet is a serious threat.
To test the e(cid:11)ectiveness of PPI under this threat,
we crafted a \malicious" rpm package. This pack-
age is named glibsys.rpm. During the installation
phase, the package tried to overwrite system (cid:12)les
/lib/libc.so and /bin/gcc. These violations are
captured by our system, and the installation aborted
cleanly.
(cid:15) Race condition attack. We crafted a piece of mal-
ware which employed a typical race condition at-
tack. The attack we created is the classic TOCTTOU
race condition [8], allowing a malicious process racing
against a benign process in writing a high-integrity
(cid:12)le (/etc/passwd) using a race condition by creating
a symbolic link. This attack was successful on an un-
protected system, but it was defeated by PPI, since
the follow link operation on the low-integrity sym-
link downgraded the benign process and the write
was disallowed.
(cid:15) Indirect attack.
In this attack, we created another
piece of malware that (cid:12)rst created an executable with
an enticing name and waited for users on the system
to run it. The attack did not work as PPI automat-
ically downgraded the process running the low in-
tegrity executable, and as a result, it could not over-
write any of the (cid:12)les in the system that can damage
system integrity.
(cid:15) Malformed data input. Similar to the above exam-
ple, a malformed jpeg (cid:12)le was downloaded from some
unknown source, so PPI marked it as low-integrity.
When an image viewer opened it, although it was
compromised, it was running in low-integrity mode,
and hence its subsequent malicious actions failed.
6.3. Usability of PPI Versus Low Watermark
In order to better understand how PPI provides im-
proved usability, we implemented a prototype version
of Low watermark model using LSM, and applied the
prototype to exactly the same host environment with
the same initial labeling and policy con(cid:12)gurations (in-
cluding invulnerable applications). We used the test
environment for a period of one day and observed the
violations in the following several types:
(cid:15) Because of lack of object downgrade policy, in Low
watermark model, gzip and ggv had di(cid:14)culty in com-
pleting their jobs when handling low integrity (cid:12)les. In
the case of gzip, it (cid:12)rst ran with high integrity, cre-
ated an output (cid:12)le, then downgraded on reading low-
integrity input. Subsequently, gzip tried to change
permissions on the output (cid:12)le, which was denied due
to the fact that the (cid:12)le was at high integrity while
259
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:10:00 UTC from IEEE Xplore.  Restrictions apply. 
simple syscall
Orignal
PPI
1.6936
1.6862
read
2.1882
2.3541
write
1.8670
1.9899
stat
open/close
select(100)
pipe latency
7.9352
15.0348
11.4859
15.0348
27.2026
28.5309
37.4196
38.5261
Figure 4. Microbechmark Result using LMbench. All numbers are in microseconds.
the subject had been downgraded.
(cid:15) With PPI, editors such as vi, gedit and gimp could
be used to edit low-integrity as well as high-integrity
(cid:12)les. With Low-watermark policy, the applications
experienced a runtime error, if the (cid:12)rst run of the
application was performed with high-integrity input.
In this case, the preference (cid:12)les were marked high-
integrity. When the editor was subsequently used
on a low-integrity (cid:12)le, it was downgraded, and its
subsequent access to update the preference (cid:12)le was
denied. If the the (cid:12)rst run was performed with low-
integrity input, then the preference (cid:12)le was created
with low integrity, which meant that every future run
of the editor will be downgraded. In contrast, the use
of log-based analysis in PPI enables these editors to
work properly in both scenarios.
(cid:15) As mentioned earlier, shell redirections typically
cause problems due to self-revocation with Low-
watermark model. For instance, when executing a