### Subject Integrity Levels and Device Handling

If the subject is at the highest possible integrity level, the `invul` and `log` sub-attributes are set from the executable file. 

#### Device, IPC, and File Renaming Handling

Devices often require special treatment as they are not persistent in the same way as files. The integrity and down object labels for devices such as `/dev/kmem`, `/dev/mem`, and `/dev/sda*` are set to 111 to ensure that only the highest integrity subjects can modify them. Devices like `/dev/null` and `/dev/zero` are treated as having low integrity for writes and high integrity for reads. The integrity labels of devices such as `/dev/tty*` and `/dev/pty/*` are derived from the associated login processes, similar to SELinux.

IPC (Inter-Process Communication) and socket communication are treated as communication channels between subjects. They inherit labels from the subjects they connect. Since most of these communication mechanisms are bidirectional, interconnected subjects have identical security attributes. The kernel enforcement component tracks groups of subjects interconnected via IPC and socket communication to safely perform operations such as downgrading.

File renaming operations are considered a write operation on the file object.

### Implementing Subject Downgrading

Subjects are downgraded at runtime only if it does not result in the revocation of privileges. Specifically, when a file is opened for reading, the user-level component indicates whether a higher integrity subject is willing to downgrade to a lower level. The kernel component permits the downgrade if:
1. The file can be successfully opened.
2. The subject does not have higher integrity files that it is writing into.
3. All other subjects with which this subject has IPC can also be downgraded.

### User-Level Component

The user-level component is implemented by intercepting system calls in glibc. Policies are application-specific and are kept in a separate library. The user-level communicates with the kernel using `ioctl` to implement complex policies. For example, the "downgrade subject" policy is implemented through this coordination.

The user-level also supports context-aware trust policies. It determines whether a trusted application is invulnerable or flow-aware in a certain context. If so, it requests an open without downgrading its integrity. For flow-aware applications, the user-level communicates to the kernel if files should be opened with a lower integrity level than that of the subject. The user-level is also responsible for implementing the redirection policy, which the kernel treats as a combination of a read operation on the original file and a write operation on a new file.

### Exception: Trusted Subjects

An exception occurs for trusted subjects that are invulnerable to inputs on a communication channel. In this case, the trusted process can maintain its integrity level and other security attributes regardless of the security attributes of the subject on the other end of the communication channel.

---

### Evaluation

We initially implemented PPI on CentOS and subsequently migrated to Ubuntu. Due to time limitations, some evaluations were performed on CentOS, while others were on Ubuntu. The specifications of these systems are as follows:

- **CentOS 4.4**:
  - Linux kernel version 2.6.9
  - 693 RPM packages
  - 205k files in total

- **Ubuntu 7.10**:
  - Linux kernel version 2.6.22-14
  - 1164 dpkg packages
  - 159k files in total

#### Experience

**Policy Generation on Ubuntu**:
For generating policies, we used an access log collected over four days on a personal laptop. We also performed administrative tasks such as software installation and backups. The log file was around 1GB.

The initial integrity-critical file objects include files within `/boot`, `/etc/init.d/`, `/dev/sda`, and `/dev/kmem`. We identified 26 untrusted application packages, including media players, games, instant messengers, emulators, file utilities, X utilities, and Java applications.

Based on the initial configurations, we performed label computation and policy generation. Among all the files (159K) and dpkg packages (1164), the initial labels of 783 files (including files that belong to 26 untrusted packages and those written by them) were set to low integrity, while all others were labeled high integrity.

**Policy Generation Phases**:
- **Phase I**: Log analysis determined 73305 files (934 packages) that need to be marked "preserve-high."
- **Phase II**: Analysis identified which of the six policy choices should be applied to each conflicting access. As a result, 168 programs were assigned "subject-deny" policy, 4 programs (Xorg, dbus-daemon, gconftool-2, gnome-session) were marked "trusted," and the rest (6905) can be downgraded when reading low-integrity input. For file objects, deny policies were applied to 73305 integrity-critical objects, while the others can be downgraded. Finally, 15 file objects were identified for the redirection policy, including preference files for the gedit editor.
- **Phase III**: Used the initial policy configuration from Phase II. It reported 66 violations due to object and subject labels being downgraded in a running system. After analysis, four applications (trackerd, nautilus, gconfd-2, bonono-activation-server) needed to be classified as trusted. Four conflicts arose because bash could not write to the history file, resolved by using the redirect policy. Mozilla and pine were also identified as trusted applications.

**PPI Experience during Runtime**:
After plugging in the generated policies, we ran PPI in normal enforcing mode for several days. The system booted up without issues, indicating no init-related programs were affected by low-integrity input. We performed normal administrative tasks and logged in as a regular user. No security violations were raised during these activities.

**Redirection Policy Side-Effect**:
A slight problem is the side-effect of redirection policies, where duplicate copies of many preference files are created. One option is to periodically delete the low-integrity versions of these files.

#### Effectiveness Against Malicious Applications

Our integrity policy provides effective defense against malware attacks, including:
- **Linux rootkits**: Downloaded rootkits were marked as untrusted. User-level rootkits failed due to permission violations. Kernel-level rootkits, such as adore-ng, failed because the kernel module was labeled with low integrity.
- **Malicious RPM package**: A crafted "malicious" rpm package (glibsys.rpm) tried to overwrite system files but was captured and installation aborted.
- **Race condition attack**: A TOCTTOU race condition attack was defeated by PPI, as the follow link operation on the low-integrity symlink downgraded the benign process.
- **Indirect attack**: A piece of malware that created an enticing executable was downgraded and could not overwrite any system files.
- **Malformed data input**: A malformed JPEG file was marked as low-integrity, and although the image viewer was compromised, it ran in low-integrity mode, preventing malicious actions.

#### Usability of PPI Versus Low Watermark

To understand how PPI provides improved usability, we implemented a prototype version of the Low watermark model using LSM and applied it to the same host environment. We observed the following violations:
- **Gzip and ggv**: Had difficulty completing their jobs due to lack of object downgrade policy.
- **Editors (vi, gedit, gimp)**: Experienced runtime errors with Low-watermark policy, whereas PPI enabled them to work properly.
- **Shell redirections**: Caused self-revocation problems with Low-watermark, but PPI handled them correctly.

---

### Microbenchmark Results Using LMbench

| Operation        | Original (µs) | PPI (µs) |
|------------------|---------------|----------|
| Simple syscall   | 1.6936        | 1.6862   |
| Read             | 2.1882        | 2.3541   |
| Write            | 1.8670        | 1.9899   |
| Stat             |               |          |
| Open/Close       |               |          |
| Select(100)      | 7.9352        | 15.0348  |
| Pipe Latency     | 11.4859       | 27.2026  |
|                  | 15.0348       | 28.5309  |
|                  | 37.4196       | 38.5261  |

All numbers are in microseconds.