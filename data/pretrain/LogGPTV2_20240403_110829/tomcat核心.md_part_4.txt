![截图_20200307022422](media/image18.png){width="7.254166666666666in"
height="2.725in"}
#### 错误页面配置
Web应用中难免出现网络、BUG等问题，如果将这些问题直接暴露给用户是不合适的，
1.  用户体验性差
2.  报错给用户系统不安全，详细的类调用和使用什么开发技术都暴露
    解决办法：系统如果出现错误，统一跳转到一个优美的错误页面
    error-page用于配置Web应用访问异常时定向到的页面，支持HTTP响应码和异常类两种形式。
    \
    \404\ \--响应码404的跳转指定页面配置
    \/404. html\
    \
    \
    \500\ \--响应码500的跳转指定页面配置
    \/500. html\
    \
    \
    \java. lang.Exception\
    \--根据异常信息跳转到指定页面
    \/error. jsp\
    \
## Tomcat管理配置
从早期的
Tomcat版本开始，就提供了web版的管理控制台，他们是两个独立的Web应用，位于
webapps目录下。Tomcat提供的管理应用有用于管理的Host的host-
manage.和用于管理Web应用的 manager。
host- manage：管理虚拟主机 manage：管理web应用
![](media/image19.png){width="5.6618055555555555in"
height="2.0409722222222224in"}
![](media/image20.png){width="5.376388888888889in"
height="2.372916666666667in"}
### Server-Status、Manager APP
Server-Status、Manager APP两个按钮和manager相关，具体角色名为
-   manager-gui \-\-\-\-\-\-- allows access to the HTML GUI and the
    status pages
    管理器gui-允许访问HTML gui和状态页
-   manager-script \-\-\-\-\-- allows access to the text interface and
    the status pages
    管理器脚本-允许访问文本界面和状态页
-   manager-jmx \-\-\-\-\-\-\-- allows access to the JMX proxy and the
    status pages
    管理器jmx-允许访问jmx代理和状态页
-   manager-status \-\-\-\-\-\-- allows access to the status pages only
    管理器状态-仅允许访问状态页
### host-manager 
-   Tomcat启动之后，通过http://localhost:8080/host-manager/html访问该Web应用
-   host-manager默认添加了访问权限控制，当打开网址时，需要输入用户名和密码（conf/
    tomcat- users.xm中配置）。
-   要想访问该页面，需要在conf/ tomcat-
    users,xm1中配置，并分配对应的角色
-   tomcat- users,xml中配置：admin-gui：用于控制页面访问权限
-   tomcat- users,xml中配置：admin-
    script：用于控制以简单文本的形式进行访问
-   第三个按钮和admin相关，具体角色名为
```{=html}
```
-   admin-gui - allows access to the HTML GUI and the status pages
    管理图形用户界面-允许访问HTML图形用户界面和状态页
-   admin-script - allows access to the text interface and the status
    > pages
    管理脚本-允许访问文本界面和状态页
    tomcat- users.xml原配置如下：
    \
    \
    \\"
    roles=\"tomcat\"/\>
    \\"
    roles=\"tomcat,role1\"/\>
    \\"
    roles=\"role1\"/\>
    \--\>
### 添加案例配置如下：
\
\...\....
\
\
\
\
该案例配置了两个角色：
admin-gui：拥有该角色用户允许HTML页面
manager-gui：拥有该角色用户允许访问文本接口
配置一个用户：role1，登录密码为：123456，拥有admin-gui和manager-gui两个角色
访问：localhost:8080点击Server-Status、Manager
APP、HostManager三个按钮可
![](media/image20.png){width="5.376388888888889in"
height="2.372916666666667in"}
登录验证：
部署了两个应用项目www.test01.com、www.test02.com
Engine的defultHost="www.test01.com"
![](media/image21.png){width="7.253472222222222in"
height="3.6305555555555555in"}
# JVM配置：
## JVM内存模型图
![](media/image22.png){width="6.010416666666667in" height="3.775in"}
堆内存中 Eden称为伊甸园区 from与to都称为幸存区
## JVM配置选项
**winndows平台**（bin\\catalina.bat）
set JAVA_OPTS=-server -Xms2048m -Xmx2048m -XX:MetaspaceSize=256m
-XX:MaxMetaspaceSize=256m -XX:SurvivorRatio=8
**linux平台**（bin/catalina.sh）
JAVA_OPTS="-server -Xms2048m -Xmx2048m -XX:MetaspaceSize=256m
-XX:MaxMetaspaceSize=256m -XX:SurvivorRatio=8"
-   -server：表示以服务端运行
-   -Xms：堆内存的初始大小
-   -Xmx：堆内存的最大大小，-Xms与-XmX一般设置一样不会开辟新的内存空间，节省资源消耗
-   -Xmn：新生代的内存大小，官方建议是整个堆得3/8
-   -XX:Metaspacesize元空间内存初始大小，在JDK1.8版本之前配置为-xx:Permsize（永久代）
-   -XX:MaxMetaspaceSize元空间内存最大大小，在JDK1.8版本之前配置为-XX:Maxpermsize（永久代）
-   -XX:Initialcodecachesize 代码缓存区大小
    -XX:Reservedcodecachesize
-   -XX:NewRatio设置新生代和老年代的相对大小比例。这种方式的优点是新生代大小会随着整个堆大小动态扩展。如-XX:NewRatio=3指定老年代/新生代为3/1。老年代占堆大小的3/4，新生代占1/4。
-   -XX:SurvivorRatio指定伊甸园区（Eden）与幸存区大小比例。如-xx:SurvivorRatlo=8表示伊甸园区（Eden）是幸存区To大小的8倍（也是幸存区From的8倍）。所以，伊甸园区（Eden）占新生代大小的8/10，幸存区From和幸存区To每个占新生代的1/10。注意，两个幸存区永远是一样大的。（可查看上面"JVM内存模型图"）
    **配置案例：**![截图_2020030914233523SS](media/image23.png){width="7.263194444444444in"
    height="1.14375in"}
    set JAVA_OPTS=-server -Xms2048m -Xmx2048m -XX:MetaspaceSize=256m
    -XX:MaxMetaspaceSize=256m -XX:SurvivorRatio=8
    ![截图_2020030914182918SS](media/image24.png){width="7.254166666666666in"
    height="5.238888888888889in"}
    此图可看出：
    伊甸园区PS Eden Space 大小为546.5M 68M x 8 = 544M
    老年代PS Old Gen：大小为：1365.5M 1365.5 + 546.8 + 68 + 68 = 2048
    幸存区PS Survivor Space：大小为68M，这里是From与To都是68M
# Tomcat集群
负载均衡
session共享
session复制
SSO单点登录
# Tomcat安全
## 配置安全
1.  删除 webapps目录下的所有文件，禁用 tomcat管理界面；
2.  注释或删除 tomcat- users.xml文件内的所有用户权限；
3.  更改关闭 tomcat指令或禁用；
    tomcat的 server,xml中定义了可以直接关闭
    Tomcat实例的管理端口（默认8005）。可以通过
    telnet连接上该端口之后，输入SHUTDOWN（此为默认关闭指令）即可关闭
    Tomcat实例（注意，此时虽然实例关闭了，但是进程还是存在的）。由于默认关闭
    Tomcat的端口和指令都很简单。默认端口为8005，指令为 SHUTDOWN。
    方案一更改端口号和指令：
    \
    方案二禁用8005端口：
    \
4.  定义错误页面在 webapps/R目录下定义错误页面404.htm1,500.htm1然后在
    tomcat/conf/web.xm中进行配置，配置错误页面
    \
> \404\
>
> \/404. html\
\
\
> \500\
>
> \/500.html\
\
这样配置之后，用户在访问资源时出现404,500这样的异常，就能看到我们自定义的错误页面，而不会看到异常的堆栈信息，提高了用户体验，也保障了服务的安全性
## 应用安全
在大部分的web应用中，特别是一些后台应用系统，都会实现自己的安全管理模块（权限模块），用于控制应用系统的安全访问，基本包含两个部分：认证（登录/单点登录）和授权（功能权限、数据权限）两个部分。
对于当前的业务系统，可以自己做一套适用于自己业务系统的权限模块，
也有很多的应用系统直接使用一些功能完善的安全框架，将其集成到我们的web应用中，如：SpringSecurity、
Apache Shiro等
## 传输安全
在HTTP的基础上加入SSL/TLS来进行数据加密，保护交换数据不被泄露、窃取。
SSL和TLS是用于网络通信安全的加密协议，它允许客户端和服务器之间通过安全链接通信。SSL协议的3个特性：
1.  保密：通过ss链接传输的数据时加密的
2.  鉴别：通信双方的身份鉴别，通常是可选的，单至少有一方需要验证
3.  完整性：传输数据的完整性检查
    从性能角度考虑，加解密是一项计算昂贵的处理，因为尽量不要将整个web应用采用SSL链接，实际部署过程中，选择有必要进行安全加密的页面（存在敏感信息传输的页面）采用SSL通信
    HTTPS和HTTP的区别主要为以下四点
    1）HTPS协议需要到证书颁发机构CA申请SSL证书，然后与域名进行绑定，HTTP不用申请证书；
    2）HTTP是超文本传输协议，属于应用层信息传输，HTTPS则是具有SSL加密传安全性传输协议，对数据的传输进行加密，相当于HTP的升级
    3）HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是8080，后者是8443
    4）HTTP的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP协议安全。
    HTTPS协议优势
```{=html}
```
1.  提高网站排名，有利于SEO(搜索引擎优化)。谷歌已经公开声明两个网站在搜索结果方面相同，如果一个网站启用了SSL，它可能会获得略高于没有SSL网站的等级，而且百度也表明对安装了SSL的网站表示友好。因此，网站上的内容中启用SSL都有明显的SEO优势
    2）隐私信息加密，防止流量劫持。特别是涉及到隐私信息的网站，互联网大型的数据泄露的事件频频发生，网站进行信息加密势在必行。
    3）浏览器受信任。自从各大主流浏览器大力支持HTTPS协议之后，访问HTTP的网站都会提示不安全的警告信息。
### Tomcat配置HTTPS：
1、本地生成秘钥库文件:
命令：keytool -genkey -alias tomcat -keyalg RSA -keystore
tomcatkey.keystore
keytool：keytool命令在JDK环境中就有，如果正确的安装了JDK，配置了环境变量即可
-genkey：生成证书
-alias tomcat：别名为tomcat
-keyalg RSA：加密算法为RSA
-keystore
tomcatkey.keystore：生成的秘钥文件，会在当前文件夹中出现---个秘钥库文件：tomcatkey.κeystore
![](media/image25.png){width="5.107638888888889in"
height="2.527083333333333in"}
2、将秘钥文件复制到tomcat/conf目录下
3、配置 tomcat/conf/server.xml
\
\
\
\
\
\
\
\
配置说明：
port=\"8443\" 端口号
protocol=\"org.apache.coyote.http11.Http11NioProtocol\" 使用Nio模型
maxThreads=\"150\" 线程数
schema=\"https\" 使用的协议
secure=\"true\" 是否安全
SSLEnabled=\"true\" SSL证书是否开启
Certificate certificateKeystoreFile=\"conf/tomcatkey.keystore\"
证书文件地址
certificateKeystorePassword=\"itcast\" 证书访问密码
type=\"RSA\" 加密算法