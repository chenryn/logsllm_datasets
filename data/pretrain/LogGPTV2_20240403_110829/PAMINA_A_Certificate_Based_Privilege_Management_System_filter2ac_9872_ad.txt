RC
controls
controls
PMA1
PMA1
PMA2
PMA2
delegates
delegates
PMA3
PMA3
updated I-CVT
updated I-CVT
P-DB
P-DB
AC download
AC download
C
C
Request {f(RC), ID}
Request {f(RC), ID}
Response {f(RC), ID, Y/N}
Response {f(RC), ID, Y/N}
VPMA2
VPMA2
PMA: Privilege Management Authority
PMA: Privilege Management Authority
R: Resource owned by a PMA
R: Resource owned by a PMA
P-DB: Privilege Database
P-DB: Privilege Database
C: Client
C: Client
ID: User-ID
ID: User-ID
f(R): Operation on resource R
f(R): Operation on resource R
VPMAx: Verifier owned by PMAx
VPMAx: Verifier owned by PMAx
Figure 3: Architecture scheme of PAMINA 
In  this  case,  the  verifier  downloads  the  delegation 
chain, which states the privileges of the user that are 
needed to execute the requested action, then it verifies 
the chain, and finally, it allows or denies the access to 
RC.  
•  Administrators:  Administrators,  who  are  typically 
employed by a particular PMA, do daily management 
work.  A  framework  consisting  of  management  tools 
supports the two main types of administration related 
tasks,  namely  privilege  management  and  certificate 
management. Only administrators of a PMA have ac-
cess to the private (signing) key of this PMA. 
5.1 Managing certificates based on X.509 with 
PAMINA 
Theoretically,  any  type  of  (standardized)  ACs  can  be 
managed using I-CVTs, because the construction of these 
trees  is  independent  from  the  information  stored  in  the 
leaves. However, due to the fact that single ACs need not 
to  be  signed,  certificate  fields  holding  signature  specific 
information become needless when using PAMINA. Since 
certificate  formats  often  reflect  special  authorization 
mechanisms,  like  delegation,  access  control  model  and 
properties  of  the  revocation  scheme,  other  changes  could 
also be needed in some cases. The first practical scenario 
for PAMINA was to manage access control on the basis of 
ACs as defined in the X.509 standard [4], in order to sup-
port compatibility with existing X.509 PKI products. The 
“Attribute  Certificate  Framework”  of  X.509  basically 
specifies an AC format and recommends the (optional) use 
of  CRLs  for  revocation  purposes.  This  standard  also  de-
fines a delegation scheme and deals with major aspects of 
role  based  access  control  management.  Unfortunately, 
practical aspects of the realization of a privilege manage-
ment infrastructure, like confidential management of ACs, 
are out of the scope of this framework.  
In  the  following  we  describe  how  ACs  as  defined  in 
X.509  can  be  modified  in  order  to  manage  them  with  I-
CVTs. An X.509 based certificate statement stored in the 
leaf of an I-CVT can consist of the following fields (com-
pared to AttributeCertificateInfo in [4], the signature field 
is missing):  
version,  holder,  issuer,  serialNumber,  attrCertValid-
ityPeriod, attributes, issuerUniqueID, extensions 
The type, format and meaning of these fields remain ba-
sically  unchanged.  Assuming  that  an  I-CVT  stored  in the 
P-DB  consists  only  of  valid  (not  yet  revoked)  ACs,  one 
could think that the field attrCertValidityPeriod is unnec-
essary. This could be true from the verifier’s point of view, 
but this would make the administration of the system very 
complicated,  because  administrators  would  not  know 
when  they  had  to  delete  an  expired  AC  from  the  I-CVT. 
The  field  serialNumber  must  uniquely  identify  an  AC 
within the I-CVT signed by the issuer. The attributes field 
contains  the  privileges  associated  with  the  holder  of  the 
authorization certificate.  
X.509  supports  privilege  management  on  the  basis  of 
role-based access control policies. There are several other 
known  approaches  competing  with  role-based  models,  in 
which  users  or  privileges  can  be  grouped  according  to 
other strategies. From the certificate managements point of 
view,  there  is  no  significant  difference  between  these 
models  (see  also  [14]).  A  privilege  management  system 
has to be able to handle ACs that hold privilege collections 
that  are  not  issued  for  a  single  subject.  PAMINA  also 
supports  this  mechanism;  the  management  of  role  certifi-
cates with I-CVTs and their verification do not present any 
additional difficulty. 
As mentioned before, each verifier holds so-called pol-
icy certificates issued by its owner PMA. A policy certifi-
cate is a special AC that is mainly used for the configura-
tion of verifiers. The attributes field of a PC can consist of 
information  about  the  caching  or  access  control  strategy 
which the verifier has to follow. A PC also has a field that 
lists each PMA known to the issuer that has ever delegated 
any  of  its  privileges.  This  way  the  verifier  knows  from 
which I-CVTs he needs either the certificates for the given 
user or a proof for the non-existence of any certificates of 
this  user.  The  issuer  PMA  of  a  policy  certificate  states 
with  its  signature  that  it  owns  the  given  verifier.  This 
statement  is  used  by the P-DB to control access to the I-
CVTs. See section 5.3 for more details. 
5.2 Supporting delegation 
As mentioned earlier, an important feature of PAMINA 
is the support of privilege delegation. The basic properties 
of the delegation model provided by the system are listed 
here: 
•  Multiple ACs and therefore multiple delegation chains 
can exist for each subject (user or PMA).  
•  PMAs  are  autonomous,  that  means  that  each  PMA 
may delegate all of its privileges to each other subject. 
•  PMAs  can  delegate  privileges  in  one  certificate  that 
were  assigned  to  them  by  several  certificates.  This 
implies that delegation chains are paths of a directed 
tree, a delegation tree. 
•  PMAs  that  delegated  privileges  must  inform  the  re-
source owners about this act. Resource owners are al-
ways known since each AC consists of its delegation 
history (see below). This supports billing in commer-
cial application scenarios. 
•  PMAs that delegated privileges must have at least the 
same  privilege  at  the  time  of  verification. PMAs can 
delegate privileges for a specific period of time. The 
beginning of this period can be in the future. 
•  A  PMA  can  determine  whether  all  privileges  con-
tained  in  a  particular  AC  can  be  delegated  to  other 
subjects or not. The model does not allow the prohibi-
tion  of  the  delegation  of  single  privileges.  If  a  PMA 
wants to allow the delegation of a subset of privileges, 
it  should  issue  a  separate  AC  containing  only  these 
privileges. 
If a PMA allows the delegation of the privileges listed 
in an AC, it can define the maximal length of delega-
tion chains starting with this AC. 
•  PAMINA  does  not  support  ACs  issued  by  multiple 
PMAs. When multiple privileges controlled by differ-
ent PMAs are needed to perform a particular action on 
a  resource,  separate  ACs  must  be  issued  by  each  of 
these PMAs.  
There  are  two  important technical problems with privi-
lege  delegation,  namely  to  find  and  to  verify  ACs  that 
build a delegation tree. Each AC that belongs to a delega-
tion  tree  must  include  back  pointers  to the ACs in which 
the  issuer  was  assigned  the  corresponding  privileges. 
• 
These pointers can be used during the verification process 
to ensure that the grantor has sufficient privileges. For this 
purpose [4] recommends the use of the optional field au-
thorityAttributeIdentifier, which is a sequence of IssuerSe-
rial  fields.  The  IssuerSerial  field  is  specified  as  a  pair 
. An AC that contains authorityAt-
tributeIdentifier may include multiple privileges delegated 
to  the  certificate  holder  by  multiple  authorities.  The  au-
thorityAttributeIdentifier  field  can  include  more  than  one 
IssuerSerial field if the assignment of the delegated privi-
leges  to  the  issuer  authority  was  done  in  more  than  one 
AC.  
Assume  that  a  user  has  more  than  one  ACs  issued  by 
different PMAs. In order to answer the requests of a veri-
fier  for  the  certificates  of  this  user,  the  P-DB  has  to find 
those  certificates  that  include  privileges  that  origin  from 
the  verifier’s  owner  PMA.  Before  responding,  the  P-DB 
had  to  compose  all  possible  delegation  trees  ending  with 
the user’s ACs, in order to find those that contain an AC 
issued by a PMA that owns the verifier. This could lead to 
performance  problems  in  systems  where  delegation  is 
practiced frequently and delegation chains are long. Natu-
rally,  the  P-DB  could  just  send  all  certificates  issued  for 
the  user  inclusive  delegation  trees  to  the  verifier.  In  this 
case the verifier would also get ACs that have been issued 
for the user by other PMAs and therefore should be hidden 
from this verifier. 
In  order  to  make  the  search  for  certificates  that  should 
be  delivered  to  a  verifier  more  efficient,  each  AC  that 
belongs  to  a  delegation  tree  stores  information  about  all 
ACs in the same tree down to the resource owner. In con-
trast to X.509 the complete delegation tree is stored in the 
certificates,  instead  of  inserting  only  the  IssuerSerials  of 
the direct predecessor certificates. The root of such a dele-
gation tree is the AC itself and the leaves are ACs issued 
by  resource  owners.  This  way  the  database  can  easier 
decide which certificates should be made available to the 
verifier  in  a  given  situation.  Note  that  this  structure  also 
supports  the  verification  of  parts  of  a  delegation  tree  by 
verifiers that are not owned by a PMA which issued one of 
the ACs in a leaf of this tree. One drawback of this solu-
tion  is  that  the  size  of  ACs  depends  on  the  height  of  the 
delegation trees.  
Fig.  4  shows  an  example  situation,  where  user  UA gets 
the  privilege  P4  through  delegation.  Role1  holding  privi-
lege P4 has originally been associated with C. As you can 
see the certificate issued for C by A consists of an empty 
delegation tree. Then C delegated privilege P2 (that it got 
from  B)  together  with  privilege  P4  to  D.  Therefore,  the 
delegation  tree  of  D’s  certificate  consists  of two  pairs. Finally, D delegates privilege P4 to 
user UA by issuing the certificate with the serial number 4. 
As shown in Fig. 4., the included delegation tree has two 
leaves. Leaf A,1 points to the originator (A) of the privi-
lege P4.  
P1, Role1(P3, P4)
P1, Role1(P3, P4)
P2
P2
A
A
B
B
C
C
P2, P4
P2, P4
P5
P5
D
D
P4
P4
UA
UA
holder: Role1
holder: Role1
issuer: A
issuer: A
ser.no: 5
ser.no: 5
privileges: 
privileges: 
P3, P4
P3, P4
del. tree: 
del. tree: 
[]
[]
holder: C
holder: C
issuer: A
issuer: A
ser.no: 1
ser.no: 1
privileges: 
privileges: 
P1, Role1 
P1, Role1 
del. tree: 
del. tree: 
[]
[]
holder: C
holder: C
issuer: B
issuer: B
ser.no: 2
ser.no: 2
privileges:
privileges:
P2
P2
del. tree: 
del. tree: 
[]
[]
holder: D
holder: D
issuer: C
issuer: C
ser.no: 3