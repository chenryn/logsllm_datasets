(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172) .
˜E11 =
1√2
0
(√1 + µ − √1 − µ)/√2
√1 − µ)/√2
(√1 + µ +
0
0
(√1 − µ − √1 + µ)/√2
√1 − µ)/√2
(√1 + µ +
0
0
0
0
(cid:113)1 + |µ|2
(cid:113)1 + |µ|2
0
0
0
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172)
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172)
(94)
(95)
(96)
(97)
D.6 Classical communication
D.6.1 Optical Link Error Model. We claimed that we highly inflated losses in the simulation to stress test our protocol. We
now consider more realistic values for such errors by considering a realistic packet-level error model for the non-quantum optical
link. For this we have assumed that two quantum internet end nodes are connected by a legacy 1000BASE-ZX single-mode
1550 nm wavelength Gigabit Ethernet link. The reason for choosing 1000BASE-ZX interface is (i) its achievable long-distance
transmission at least up to 70 km with no dependency on optical repeaters and (ii) decades of its successful deployment within
magnitude of networks worldwide.
45
Dahlberg, Skrzypczyk, et al.
To be conservative, our optical Gigabit Ethernet model assumes a typical worst-case optical link budget (0.5 dB/km attenua-
tion5, 0.7 dB/connector loss, 0.1 dB/splice/(joint) loss, and 3 dB safety margin) [27]. We also assume a typical worst-case −1 dBm
optical transmission power and −24 dB receiver sensitivity of a 1000BASE-ZX small form-factor hot pluggable transceiver, see
e.g. [61]. For a maximum realism of link error over an optical link we model a IEEE 802.3 frame errors, instead of modeling
individual bit errors of every message sent across the network. The latter would require a software implementation of a
complete modulation and coding layer of IEEE 802.3 which is beyond the scope of this work. Using measurement trace-driven
packet-level Gigabit Ethernet frame error data from [56, Table 6.1] we have mapped the received SNR per transmitter/receiver
distance to the respective frame error probability, which was then applied to every classical message sent over an optical
link between quantum end nodes. SNR values that were not represented in the measurements of [56] have been linearly
interpolated. We have not distinguished between the lengths of each classical message as the model of [56] has aggregated
over all messages captured over a measured campus Ethernet link (cf. [56, Fig. 6.1]). We note that our modeling approach is
equivalent to the frame error models applied in e.g. NS-3 [28] for WiFi frame errors.
For two example long-distance Quantum Internet typologies (node-to-node distance of 15 km and 20 km, respectively) we
have ended up in a perfect frame error probability, with the assumption that amount of splices is zero6 (we only start to
observe frame errors only at transmitter/receiver distance exceeding 40 km for the above model variables, with a very narrow
transition error between no frame error rate and disconnected interface, i.e. frame error rate of one). Even when we increase
the number of splices to an exaggerated level, say 30 splices for a 15 km interface (with 0.3 dB loss/splice), we still observe a
very low frame error probability of 4×10-8. Therefore, to test the effect of frame errors on the non-quantum optical link on the
Quantum Internet protocol stack—in the cases of extreme frame loss—we have increased the value of frame error to 10-4 (and
tested frame error rate to up to 10-10—an error rate level of a 20 km link with 21 splices—in steps of 10-1). If our protocol would
work in such a high (but unrealistic) condition then it would also work on a realistic low-error optical link.
D.6.2 Optical Link CRC Error Model. Additionally, we have investigated a non-zero probability of CRC not being able
to detect a frame error. Assuming the same optical link type (e.g. 1000BASE-ZX) we have used a model of [44] to calculate
the respective probability of not detecting a CRC frame error within a IEEE 802.3 frame. For this we have mapped the
transmitter/receiver distance to the respective SNR (the same way as described in Section D.6.1). Then we mapped the SNR to
the respective BER using [56, Table 6.3] (performing the same process of interpolating SNR between the points not measured
by [56] as for the optical link error model, see again Section D.6.1) and then using [44, Fig. 1] mapped this resulting SNR to
the respective probability of undetected error. We have assumed a worst case scenario of the longest IEEE 802.3 frame (i.e.
n = 12144 bits, that is a maximum MTU). Again, for any of the two Quantum Internet lengths mentioned above, we do not find
any CRC errors. At the highly-spliced case, considered in Section D.6.1, we obtain an extremely low CRC error rate of 1.4×10-23.
Therefore such errors were decided to be ignored in our implementation. Another reason for not considering these errors: it
would require a full implementation of en- and decoding of classical frames which outside the scope of this work.
E PROTOCOLS
Here we give details of the implementation of the physical and link layer protocols in our simulations. Python implementation
is available upon request.
E.1 Distributed Queue Protocol
In order to track the individual applications that the entangled qubits belong to, the EGP makes use of a distributed queue
which shares request information between peers. Management of the distributed queue is performed by the Distributed Queue
Protocol (DQP). In addition to storing the parameters supplied with a CREATE request generated by the layers above the link
layer7, DQP will keep additional information about each entanglement request including its create_time, min_time at which
the request may be executed and MHP timeout cycle by which the entanglement request will time out. We proceed with the
introduction of the DQP by describing the structure of priority queues, followed by the queue establishment process, DQP
message sequence diagram and DQP associated messages.
E.1.1 Priority Queues. Priorities are necessary to fulfill the use case requirements outlined in section 3. This is accomplished
by adding requests to different types of queues Q = {Q1, . . . , QL}, where L is the total number of queues in the distributed
5Fibers measured for QL2020 have been found to have this loss level.
6Which is consistent with the measurements, e.g. in [30, Section 4].
7Refer to Section 4 of the main paper for the details of the CREATE request.
46
A Link Layer Protocol for Quantum Networks
queue. Each queue can contain a maximum of x items simultaneously (in other words x is the maximum size of each individual
queue), where an item is an individual entanglement request with its associated metadata, e.g. create_time, min_time, MHP
timeout cycle. Each CREATE request is assigned a queue number by the scheduler (see Section E.3.1 below), and receives an
absolute queue ID which is a tuple (j, ij) where j indicates the designated queue Qj (or, more abstractly, the queue ID of the
entanglement request) and ij is a unique ID within Qj. Equivalently, for a finite number of queues we will denote (j, ij) as the
absolute queue ID or aI D, and use (j, ij) ∈ Q to indicate the ID of the request.
The queue ID must obey the following properties:
• Total order: Items on each queue follow a total order of items waiting in the queue determined by ij.
• Arrival time: ID of an entanglement (CREATE) request is a function of its arrival time. Let t1 and t2 denote the create_time
of entanglement requests 1 and 2, respectively. Then, let i1 and i2 denote their respective queue ID’s. If both requests are
added to the same queue Qj, and t1  0. That is, if a CREATE request arrives earlier, it will
also receive a lower queue ID.
We will now outline the distributed queue establishment within DQP. For simplicity of exposition, we now assume there is
only one queue, i.e., L = 1.
satisfied:
E.1.2 DQP Queue Establishment. The core objective of DQP is to obtain shared queues at both nodes, i.e. the items and
the order of the elements in the queues are agreed upon. That is, both controllable end nodes A and B hold local queues
QA = {QA1 , . . . , QA
L } respectively, which are synchronized using the DQP. CREATE request additions
to the queue Qj can be made by either A or B invoking the DQP by the function ADD(j, cr), where cr is the entanglement
request by CREATE message. ADD returns a tuple (ij , R) where R indicated success or failure. Failure can occur if
L } and QB = {Q B1 , . . . , Q B
• no acknowledgments are received within a certain time frame, i.e. a timeout occurs,
• the remote node rejects addition to the queue, or
• the queue is full.
Success means that the request to create entanglement is placed into QA and QB such that the following properties are
• Equal queue number: If a request is added by A as (j, ij) ∈ QA, then it will (eventually) be added at B with the same
absolute queue ID (j, ij) ∈ QB (and vice versa);
• Uniqueness of queue ID: If a request is placed into the queue by either A or B, then it is assigned a unique queue number.
That is, if (j, a) ∈ QA and (j, a′) ∈ QA reference two distinct CREATE requests, then a (cid:44) a′;
• Consistency: If (j, ij) ∈ QA and (j, ij) ∈ QB then both absolute queue IDs refer to the same request8;
• Fairness: If A (or B) is issuing requests continuously, then also the other node B (or A) will get to add items to the
queue after A (or B) in a “fair manner“ as determined by the window size, denoted as WA (WB). More precisely, if
a1, . . . , aN are CREATE requests submitted at A, and b1, . . . , bM are CREATE requests submitted at B with N > WA and
M > WB—all assigned to the same queue Qj but not yet added—then the final ordering of the requests on the queue
obeys a1, . . . , am, b1, . . . , bk , am+1, . . . with m ≤ WA and k ≤ WB.
Recall that each request receives a minimum to be executed time—a time buffer before the request may begin processing
which takes into account the processing time to add it into the queue (denoted by the min_time)—which we will choose to
be the expected propagation delay between A and B. The purpose of this minimum time is to decrease the likelihood A or B
wants to produce an entanglement before the other node is ready. If either A or B begins processing early, no penalty other
than reduced performance due to increased decoherence of the quantum memory results. Refer to Section E.1.4 on how this
minimum time is passed between nodes.
We recall that in the current implementation of quantum network we have two nodes only. This implies that the queue
establishment can be realized by one node being the master controller of the queue marshaling access to the queue, and the other
the slave controller. Extensions to multiple nodes are more complex, and a motivation to consider heralding station-centric
protocols in the future versions of the protocol. Also, as we have two nodes only, there is no need for the introduction of leader
election or a network discovery mechanism. We leave this as future work.
E.1.3 DQP Sequence Diagrams. Figure 23 shows a DQP sequence diagram of adding an item to the queue containing a
request to the distributed queue. Specifically, an item is an entanglement create request with its associated properties that is
passed inside an ADD message within its REQ field, refer to Figure 24 for details.
8This is implied by the previous two conditions, but added for clarity.
47
Distributed Queue M
Distributed Queue S
Dahlberg, Skrzypczyk, et al.
ADD
ACK/REJ
Figure 23: DQP operation timeline. User M (master) adds an item to the distributed queue by sending an ADD mes-
sage to peer node S (slave). S either acknowledges or rejects the request using ACK and REJ messages, respectively.
Note that this process is symmetric when S attempts to add an item to the queue. For a definition of all messages
refer to Figure 24.
Upon receiving an ADD message from master M, a slave S may choose to acknowledge the item with an ACK message,
should validation pass, or reject it with the REJ message for any of the previously mentioned reasons. In the case that master
M never receives an acknowledgment (ACK) or rejection (REJ) message after a timeout, the item will be removed from the
queue and no processing will occur on the request. Loss of ADD, REJ, and ACK messages in the distributed queue protocol
result in retransmissions of the original ADD to guarantee the receipt of rejection and acknowledgement messages.
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
OPT (reserved)
FT
CSEQ
QID
QSEQ
Schedule Cycle
Timeout
Minimum Fidelity
Purpose ID
Create ID
Number of Pairs
Priority
(reserved)
Initial Virtual Finish
Estimated Cycles/Pair
(reserved)
R
T
S
M
T
A
D
M
R
M
Figure 24: Packet format for ADD, ACK, and REJ. Explanation of the message fields—OPT: field reserved for fu-
ture options, FT: frame type (00: ADD, 01: ACK, 10: REJ), CSEQ: the communication sequence number of the
transmitted message; QID: the ID of the queue to add the request to; QSEQ: the sequence number within the spec-
ified queue to assign the request; Schedule Cycle: the first MHP cycle when the request may begin (equivalent to
min_time); Timeout: The MHP cycle when the request will time out; Initial Virtual Finish: Scheduling informa-
tion for weighted fair queuing; STR: store flag, ATM: atomic flag, MD: measure directly flag, MR: master request
flag.
When the slave S wishes to add an item to the queue, a message containing the request information and desired queue is
included within the messages. Because the master controller has the final say on the state of the queue, a sequence number
within the specified queue will be transmitted in return to the slave such that absolute queue IDs are consistent between the
nodes.
48
A Link Layer Protocol for Quantum Networks
E.1.4 DQP Packet Formats. Figure 24 presents the packet format for messages exchanged in the DQP. Schedule Cycle and
Timeout Cycle of 64 bits is governed by the maximum number of MHP cycles in the scheduler. Purpose ID of 16 bits enables
pointing to 216 different applications and the total number of uniquely addressed applications and follows from the number
chosen for IPv4. Create ID defines the identifier of locally created request. Number of pairs enables to request up to 216 pairs.
Priority field of 4 bits is used as we enable 16 local queues composing the distributed queue and each one represents a priority
lane. Initial Virtual Finish is used for weighted fair queuing.
E.2 Midpoint Heralding Protocol
The purpose of MHP is to create entanglement using a midpoint heralding protocol. The operation of the MHP is defined by
Protocol E.2.
Protocol 1 MHP for use with the Node-Centric EGP
Definition of functions and variables.
• POLLEGP: process to poll for entanglement parameters from EGP; it returns:
– flag: true/false indicating whether entanglement should be attempted or not;
– PSEQ: The pulse sequence identifier that should be issued to the hardware to initialize communication qubit and
produce spin-photon entanglement. May also instruct the hardware to store the spin state within a storage qubit.
– aID: Absolute queue ID, i.e. (j, ij), of the request entanglement is being attempted for (aID,A and aID,B for nodes A and B,
respectively);
– params: parameters to use for the entanglement attempt such as bright state population α;
• mhperr: error in MHP reported to EGP through REPLY message (REPLYA and REPLYB sent to nodes A and B, respectively),
which can take the following values:
– GEN_FAIL: general failure that occurs locally at the MHP (failed qubit initialization; other errors). Note: this error
message is passed to EGP locally and not included in the REPLY message (see Figure 28);
in frame from B;
– QUEUE_MISMATCH: an error sent by the midpoint when aID included in frame from A does not match aID included
– TIME_MISMATCH: when messages from A and B does not arrive at midpoint within the same time interval;
– NO_MESSAGE_OTHER: when the midpoint receives a message from only one of A or B;
• GEN: the frame sent by A and B to the midpoint requesting entanglement. The contents include:
– aID: same as aID above;
• REPLYA and REPLYB: the REPLY frames sent to A and B respectively. The contents include:
– outcome: the outcome of the attempted entanglement at the midpoint, also encodes the error that occurred for the
– seqMHP: the sequence number from the MHP;
– aID,receiver: The absolute queue ID that was submitted by the node receiving the REPLY.
– aID,peer: The absolute queue ID that was submitted by peer node.
attempt at entanglement (see errors listed above); stored locally at mid-point.
Initialization. Initialize sequence numbers (set initial seqMHP = 0 at H). Start timer using a global synchronized clock.
The protocol, executed at each time step:
(1) Executed at Node A or Node B:
(a) Poll EGP, i.e. POLLEGP= (flag, PSEQ, aID, params)
(b) If flag=true, i.e., we want to make entanglement:
(i) Issue PSEQ to hardware to initialize communication qubit and produce spin-photon entanglement. PSEQ may also
instruct the hardware to store spin state in a storage qubit. If any failures occur, send mhperr= GEN_FAIL back to
the EGP and skip to next time step.
(ii) Use GEN = (aID) and transmit to midpoint upon photon emission.
49
Protocol 1 (cont.) MHP for use with the Node-Centric EGP
Dahlberg, Skrzypczyk, et al.
(2) Heralding station H:
(a) Perform the following upon receipt of GEN messages:
only
from A,
set mhperr = NO_MESSAGE_OTHER and
(i) If messages from A and B do not arrive within the same time interval, let mhperr = TIME_MISMATCH and send
(ii) If aID,A (cid:44) aID,B, then set mhperr = QUEUE_MISMATCH and send REPLYA =(mhperr, seqMHP, aID,A,aID,B) to A and
(iii) If GEN arrives
REPLYA =(mhperr, seqMHP, aID,A, ID,B) to A and REPLYB =(mhperr, seqMHP, aID,B, aID,A) to B.
REPLYB =(mhperr, seqMHP, aID,B,aID,A) to B.
(mhperr, seqMHP, aID,A, aID,B=null) to A, where aID,B=null indicates leaving the field as the zero string. Per-
form vice versa if GEN arrives only from B.
(iv) If no errors occurred then execute quantum swap. Inspect detection result within corresponding time window with
r ∈ {0, 1, 2} where 0 denotes failure and 1 and 2 denote the creation of states one and two respectively. If r ∈ {1, 2},
a unique and increasing sequence number seqMHP is chosen by the heralding station (incrementing a counter) to be
sent to both A and B. Midpoint sends REPLY = (outcome, seqMHP, aID, aID) to A and B.
(3) Executed at Node A or Node B(here aID,local=aID,A, aID,peer=aID,B in A and vice versa in B):
(a) If REPLY = (outcome, seqMHP, aID,local, aID,peer) returns from midpoint:
(i) Set RESULT=(outcome, seqMHP, aID,local, err=000, aID,peer) and pass to EGP.
(b) Else if REPLY=(mhperr, seqMHP, aID,local, aID,peer) returns from the midpoint:
(i) Set RESULT=(outcome=0, seqMHP, aID,local, mhperr, aID,peer) and pass to EGP.
send REPLY
=
E.2.1 MHP Sequence Diagrams. The MHP sequence diagram is defined by two cases: the successful —see Figure 25, and
unsuccessful one—see Figure 26. Specifically, there are two failure scenarios that may occur in the MHP protocol: queue
mismatch error (Figure 26a)—where the message consistency check fails at the midpoint—and single-sided transmission error
(Figure 26b).
Station A
Heralding Station M
Station B
GEN,p
REPLY
GEN,p
REPLY
Figure 25: Timeline of the MHP message exchange with a successful reply by the heralding station; p is a photon
associated with the GEN message. For a definition of GEN and REPLY message refer to Figure 27 and Figure 28,
respectively.
and Figure 26: GEN and REPLY.
E.2.2 MHP Packet Formats. MHP relies on the exchange of the packets listed in the MHP sequence diagrams, see Figure 25
GEN packet (Figure 27) is used by the midpoint to determine whether the nodes are consistent in their local information
regarding their knowledge of the attempt at entanglement.
REPLY packet (Figure 28) is sent by the midpoint in the case of no error. It will include the senders’ submitted absolute
queue ID (i.e. QID and QSEQ) and additionally pass on the submitted queue ID of the peer node (i.e. QIDP and QSEQP).
The sequence number, SEQ, denotes the number of successful heralded entanglement generations that have occurred at the
50
A Link Layer Protocol for Quantum Networks
Station A
Heralding Station M
Station B
Station A
Heralding Station M
Station B
GEN,p
GEN,p
ERR(QM)
ERR(QM)
GEN,p
ERR(NCO)
(a) Queue mismatch error
(b) Single-sided transmission error
Figure 26: Timeline of two types of errors within MHP. For a definition of GEN and REPLY message refer to
Figure 27 and Figure 28, respectively. QM and NCO refer to specific fields of the REPLY message (i.e. OT field), i.e.
QUEUE_MISMATCH and NO_MESSAGE_OTHER, respectively; both error types are explained in Protocol E.2.
midpoint heralding station and allows the end nodes to keep track of the number of entangled pairs that have been generated.
OT encodes the heralding signal from the midpoint upon successful operation and encodes errors in case of failures.