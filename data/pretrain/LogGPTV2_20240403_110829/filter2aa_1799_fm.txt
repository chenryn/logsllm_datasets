### Loader and System Initialization Phases

**Phase 1: Initial Setup**
- The loader block, along with ACPI tables, code integrity data, the complete system physical memory map, and the hypercall code page, are initialized.
- The second phase constructs the protected page table hierarchy for the VTL1 (Virtualization Technology Level 1) memory space using the `Oslpsuleles` function. It also builds the necessary Global Descriptor Table (GDT).

**Phase 2: Hypervisor Launch**
- The hypervisor is launched.
- Final checks are performed, including verifying the presence of an IOMMU (Input-Output Memory Management Unit) and ensuring that the root partition has VSM (Virtual Secure Mode) privileges. The IOMMU is crucial for VSM; for more details, refer to Chapter 9.
- An encrypted hypervisor crash dump area is set up, VSM encryption keys are copied, and execution is transferred to the Secure Kernel entry point (`yserup`). The Secure Kernel runs in VTL0, and VTL1 is started later through the `llnlernl` hypercall. For more information, see Chapter 9.

### VSM Startup Policy

**VSM Configuration Sealing**
- At startup, the Windows loader determines whether to launch Virtual Secure Mode (VSM).
- To prevent malware from disabling this protection layer, the system uses a specific policy to seal the VSM startup settings.
- In the default configuration, after the first boot (following the completion of the Windows Setup), the Windows Loader uses the `Oslesly` routine to read and seal the VSM configuration, which is stored in the `urrennrlenrleeur` registry key.

**VSM Activation Sources**
- **Device Guard Scenarios:** Each scenario is stored as a subkey in the VSM root key. The `nle` DWORD registry value controls whether a scenario is enabled. If one or more scenarios are active, VSM is enabled.
- **Local Settings:** Stored in the `nlerulnseeury` registry value.
- **Code Integrity Policies:** Stored in the code integrity policy file (Policy.p7b).

**Default VSM Enablement**
- By default, VSM is automatically enabled when the hypervisor is enabled, unless the `yperrulnseeuryOpOu` registry value exists.

**Locking Policy**
- If the locking mode is enabled, the Windows loader creates a Secure Boot variable called `sly`, which stores the VSM activation mode and platform configuration.
- Part of the VSM platform configuration is dynamically generated based on the detected system hardware, while another part is read from the `equrelreuryeures` registry value.
- The Secure Boot variable is read at every subsequent boot, and its configuration always overrides the Windows registry. This ensures that even if malware modifies the Windows Registry to disable VSM, the system will ignore the change and maintain a secure environment.
- Only a new variable signed by a trusted digital signature can modify or delete the original `sly` variable. Microsoft provides a special signed tool to disable VSM, which sets another signed Secure Boot variable called `slysle`.

### Experiment: Understanding the VSM Policy

**Objective:**
- Examine how the Secure Kernel startup resists external tampering.

**Steps:**
1. **Enable VBS:**
   - Enable Virtualization Based Security (VBS) in a compatible edition of Windows (Pro and Business editions work well).
   - Verify VBS is enabled by checking for the "Secure System" process in Task Manager.
   - Ensure the UEFI lock is enabled by navigating to `Computer Configuration > Administrative Templates > System > Device Guard` and setting the `Turn On Virtualization Based Security` policy to `Enabled`.

2. **Disable VBS:**
   - Disable VBS through the Group Policy Editor and delete all related registry keys and values in `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard`.
   - Disable the hypervisor by running `bcdedit /set {current} hypervisorlaunchtype off` from an elevated command prompt.
   - Restart the system and observe that the Secure System and LsaIso processes are still present in Task Manager due to the `sly` Secure Boot variable.

3. **Examine the `sly` Variable:**
   - Use the Efi Shell to examine the `sly` variable content. Copy the Efi Shell to a FAT32 USB stick and boot from it.
   - Run the command `dmpstore VbsPolicy -guid 77FA9ABD-0359-4D32-BD60-28F4E78F784B` to view the `sly` variable.

### Secure Launch

**Trusted Execution:**
- If Trusted Execution is enabled, Winload follows a different boot path called Secure Launch.
- Secure Launch implements Intel Trusted Boot (TXT) technology or SKINIT for AMD64 machines.
- The Boot library detects Trusted Boot and registers a boot callback to intercept events like boot application starting, hash calculation, and boot application ending.
- The TCB (Trusted Computing Base) setup replaces the standard hypervisor loading sequence.

**Secure Launch Process:**
- A RAM disk formatted with the FAT file system is created, containing Winload, the hypervisor, the VSM module, and other boot OS components.
- The TcbLaunch.exe file is read into memory, and the TCB boot callback prepares the Measured Launch Environment (MLE).
- The MLE launch routine executes the GETSEC(SENTER) instruction, which measures the TcbLaunch.exe executable in memory.
- If the measurement succeeds, the MLE transfers execution to the real boot application entry point.
- The Tcbloader.dll module loads, verifies, and starts the hypervisor, sets up the hypercall page, and launches the Secure Kernel.
- The Secure Launch ends as the hypervisor and Secure Kernel handle the verification of the NT kernel and other modules, providing a chain of trust.

**AMD Secure Launch:**
- AMD supports SKINIT, a similar technology to Intel TXT.
- The SKINIT instruction reinitializes the processor and starts the secure loader (SL) in a way that cannot be tampered with.
- The SL validates the system state, extends measurements into the PCR, and transfers execution to the AMD MLE launch routine.
- The MLE initializes the IDT and GDT, builds the page table, and jumps back to TcbLaunch, which continues the boot flow as in Intel systems.

### Initializing the Kernel and Executive Subsystems

**Loader Parameter Block:**
- When Winload calls Ntoskrnl, it passes a `Loader Parameter Block` containing:
  - System and boot partition paths.
  - Memory tables describing the system's physical memory.
  - A physical hardware tree used to build the volatile `HARDWARE` registry hive.
  - An in-memory copy of the `SYSTEM` registry hive.
  - A list of boot drivers loaded by Winload.
  - Other information related to the boot processing.

**Experiment: Loader Parameter Block**

**Objective:**
- View the contents of the Loader Parameter block.

**Steps:**
1. Attach a kernel debugger before booting and break at the initial kernel debugger breakpoint.
2. Use the `dt` command to dump the block:
   ```kd> dt poi(nt!KeLoaderBlock) nt!LOADER_PARAMETER_BLOCK```
3. Use the `!loadermemorylist` command to dump the physical memory ranges:
   ```kd> !loadermemorylist 0xfffff800`22949000```

This optimized text provides a clear and professional overview of the system initialization phases, VSM startup policy, and the Secure Launch process, along with detailed steps for experiments.