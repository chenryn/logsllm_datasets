## Page 443
15.4.1
15.4
代码清单15-4
列出的是加入了线程调度机制的PyEval_Eva1FrameEx的框架结构（见代码清单15-4）。
pyEval_EvalFrameEx的框架结构，但是在那里，并没有给出线程调度机制的实现，下面
PyEvai_EvalFrameEx中的。在分析Python字节码解释器的框架时，我们曾给出过一个
Python 的线程调度机制掌控。Python的线程调度机制是内建在Python的解释器核心
[ceval.c]
当主线程和子线程都进入了Python解释器之后，Pyhon的线程之间的切换就完全由
for）（
Python线程的调度
标准调度
i（--_Py_Tickerpython thread1.py
图15-9标准调度下的线程切换
sec1000.0
---
## Page 447
开始，Python的两个线程都可能被操作系统的线程调度机制选中，直到子线程通过
注意，在子线程调用了Py_BEGIN_ALLOW_THREAD之后，它就不再受GIL的约束。从这时
待GIL的主线程；而在PY_END_ALLOW_THREADS宏所定义的代码中，子线程重新申请GIL。
之后，还有一个Py_END_ALLOW_THREADS，正是这两个宏完成了触发Python进行线程调
注意到在调用SLeep之前，有一个Py_BEGIN_ALLOW_THREADS，与之对应的，在调用SIeep
的机制。那么在调用sleep之前，子线程肯定需要将GIL释放。在Eloatsleep中，我们
相关代码。我们看到，Python实际上是通过调用Win32的系统API：sleep来实现了阻塞
的实现，而是阻塞调度机制是如何实现的，所以我们只列出了子线程调用sleep时涉及的
度的工作。
同时，由于Win32平台下的sleep实现也比较复杂，我们关注的焦点并不是timemoduie
void PyEval_RestoreThread(PyThreadstate tetate)
#define Py_END_ALLOW_THREADS
#define Py_BEGIN ALLOW_THREADS(
[ceval.h]
[ceval.c]
yThreadState* PyEval_Savethread(void)
在PY_BEGIN_ALLOW_THREADS这个宏定义的代码中，子线程释放了GIL，这将唤醒等
实际上，Sleep机制也是平台相关的，这里我们只展示了Win32平台下的seep实现。
PyThreadstate_Swap(tstate);
return tstate;
PyThreadstate *tstate PyThreadState_Swap(NULL)；
PyThread_acquire_lock(interpreter_iock,1):
(interpreter
PyThread_release_lock(interpreter_lock);
errno =erm;
PY_END_ALLOW_THREADS
interr
ul_millis
Allow sleep(o) to maintain win32 semanties,and as decreed
by Guido,only the main thread can be interrupted.
Sleep(ul_miIlis);
errmo;
lock)
PyEval_Restorethread(_save):\
Python源码剖析
PyThread_get_thread_ident()
15.4Python线程的调度
深度探索动态语言核心技术
417
---
## Page 448
Python源码剖析
418
以便激发阻塞调度。
清晰地显示了这一结果。注意，这时需要将threadl.py中的两条time.sleep语句打开，
持，并不会被重置为100，只有标准调度才会重置这个Python的模拟时钟。在图15-10中，
影。Pyhon正是通过这两个宏实现了阻塞调度机制
RyOS_Readline中发现Py_BEGIN_ALLOW_THREAD和Py_END_ALLOW_THREADS联决的身
种线程互斥机制中的一种而已。
释器级的互斥线程的机制，只要能保护共享资源即可，而当前Pyhon采用的GIL只是多
然是线程安全的。开始的时候我们就说过，在理论上，Python并不是一定要GIL这样的解
Pyhon的CAPL，只是调用了操作系统的APL，这不会导致共享资源的访问冲突，所以依
PY_BEGIN_ALLOW_THREAD和PY_END_ALLOW_THREADS之间，子线程并没有调用任何
程调度机制选中。
Py_END_ALLOW_THREADS申请GIL为止，Python又恢复为只能有一个线程被操作系统的线
有趣的是，在线程通过阻塞调度切换时，Pyon内部的那个_ey_Ticker依然会被保
同样，对于raw_inpuE 而言，其最终将由 pyos_Readline实现，我们最终也会在
第15章Python多线程机制
这意味着Pyhon的线程在某种情况下可以脱离GIL的控制，然而我们看到，在
Hello from sub thread 4000
Hello from main thread 4012
Hello from mainthread 4012
Hello from sub thread 4000
Hello from sub thread 4000
Hello from main thread 4012
PyEval_EvalFrameEx:switch thread after 139 vm opcodes
Hello from sub thread 4000
Hello from main thread 4012
F\PythonBookiSrc\thread>python thread1.py
+.++
深度探索动态语言核心技术
图15-10阻塞调度与标准调度结合下的线程切换
---
## Page 449
15.5Python子线程的销毁
Python释放GIL，释放GIL的操作是在PyThreadstate_DeleteCurrent 中完成的。
谓清理，实际上比较简单，就是对线程状态对象中维护的东西进行引用计数的维护。随后，
而子线程的销毁则不需要进行这些动作。在本节中，我们只剖析Pyhon子线程的销毁过
毁与子线程的销毁是不同的，因为主线程的销毁动作必须要销毁Pyhon的运行时环境，
来的10几条正是Python执行time.sleep（）时所消耗的指令数。
[pystate.a]
程。
的例子中我们只使用了标准调度，图15-10中则混合使用了标准调度和阻塞调度，这多出
void PyThreadstate_Deletecurrent ()
需要注意的，图15-10和图15-9中的输出从120多增长到了130多，是因为图15-9对应
调度确实没有重置_Py_Tcker，否则Python显示出来的值决不会是137这样小的值了。
static void t_bootstrap(void +boot_raw))
Python首先会通过EyThreaastate_Clear清理当前线程所对应的线程状态对象。所
通过前面的分析我们知道，线程的主体框架是在tbootstrap中的：
在线程的全部计算完成之后，Python将销毁线程。需要注意的是，Pyhon主线程的销
PyEval_Releasebock();
PyThreadstate*tstate
PyThread exit_thread():
res=PyEval_CallobjectWithKeywords(boot->func,boot->arge,boot->keyw);
PyEval
tstate= PyThreadstate_New(boot->interp);
Pyobiect
PyThreadstate
struct bootstate *boot =(struot bootstate t) boot_raw
从图15-10中我们看到阻塞调度确实是独立于标准调度另一种线程调度机制。而阻塞
PyThreadState_Current=NuLl;
PyThreadudelete
AcquireThread(
*tstater
key_value(autoTL,Skey):
_PyThreadsLate_Current;
Python源码剖析
15.5Python子线程的销毁
一深度探索动态语言核心技术
419
---
## Page 450
Python源码剖析
15.6.1
15.6
420
享资源。考虑下面的例子：
级通过GL实现的互斥保护了内核的共享资源，同样，用户级互斥保护了用户程序中的共
def threadProc():
是这种互斥是我们不能控制的，我们还需要另一种可控的互厅机制一用户级互斤：内核
Python提供的CAPI的访问，都是互斥的，这可以看作是Python内核级的互斥机制。
程的工作。在Win32下，实际上就是调用_endthread。
thmead.start
下的pyThreadLexit_thread是一个平台相关的操作，完成各个平台上不同的销毁原生线
lock=threadallocate_lock()
inpueNone
import
[thread2.py]
LImDOLE
Python在函数PyThreadState_DeleteCurrernt完成了绝大部分线程的销毁动作，剩
time,sleep(1)
peint
我们知道，Pyton的线程在GIL的控制之下，线程之间，对整个Python解释器，
Python线程的用户级互尿与同步
在pyThreadState_DeleteCurrent中，首先会删除当前的线程状态对象，然后通过
第15章Python多线程机制
print
input
orint
while rrue:
用户级互斥与同步
main thread id ：
time.sleep(1)
lock.relea:
prine
print
pelnt