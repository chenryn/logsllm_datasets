To facilitate meaningful comparisons between different software packages, we introduce the concept of the "honeymoon ratio." This ratio is defined as the time between a software release and the discovery of the first exploit, divided by the time between the discovery of the first and second exploits. Since the second vulnerability is discovered in the same software, this ratio can provide more insightful comparisons.

In our dataset, which includes 700 releases, the median honeymoon period (the time before the first exploit is discovered) is 110 days. The median honeymoon ratio across all releases is 1.54.

The honeymoon ratio remains positive for virtually all software packages and types, although the effect is weaker when comparing the intervals between the first and second, and second and third reported vulnerabilities. Figures 4, 5, and 6 illustrate the median honeymoon ratios for operating systems, server applications, and end-user applications, respectively.

### Open-Source vs. Closed-Source Software

Both open-source and closed-source software exhibit a strong honeymoon effect, but it manifests differently in each. Out of the 38 software systems analyzed, 13 are open-source and 25 are closed-source. However, in our dataset of 700 software releases, 171 were for closed-source systems and 508 were for open-source systems. Open-source packages tend to issue new release versions at a much faster rate than their closed-source counterparts.

| Honeymoon Days | Ratios |
|-----------------|--------|
| **Type**        |        |
| Open Source     | 115    |
| Closed Source   | 98     |
| Open Source     | 1.23   |
| Closed Source   | 1.48   |

Despite the more rapid release cycle, open-source software enjoys a significantly longer median honeymoon period before the first publicly exploitable vulnerability is discovered: 115 days, compared to 98 days for closed-source releases. However, the median honeymoon ratio is shorter in open-source (1.23) than in closed-source (1.48). Figures 7 and 8 show the median honeymoon ratios for various open-source and closed-source systems, respectively.

### The Honeymoon Effect and Primal Vulnerabilities

To better understand the factors contributing to the honeymoon effect, we examined the attributes of primal vulnerabilities. In this section, we compare the honeymoon periods of these vulnerabilities and show that they are not simply a result of "low-hanging fruit," suggesting that other extrinsic properties play a role.

As complex software evolves, new features are added, old ones deprecated, and changes are made. However, much of the standard code base remains the same, primarily to maintain backward compatibility and adhere to the principle of code re-use [18, 5]. In "Milk or Wine" [25], Ozment et al. measured the portion of legacy code in several versions of OpenBSD and found that 61% of legacy (or "foundational") code was still present after 15 releases and 7.5 years. This legacy code accounted for 62% of the total vulnerabilities found.

While it is challenging to measure the amounts of legacy code in closed-source products, major vendors strongly encourage code re-use among their developers [19]. It is possible to measure the number of legacy vulnerabilities by comparing the disclosure date of a vulnerability with the release dates and affected product versions. For example, if a vulnerability V affects versions (k,...N) (0 < k < N) but not versions (1,...,k-1) and was disclosed after the release date of version N, it indicates that the vulnerability was introduced in version k and remained hidden until its discovery after the release of version N. We call these "regressive vulnerabilities," which are not found through normal regression testing and may lie dormant through multiple releases. For this paper, a regressive vulnerability is defined as a primal vulnerability that affects not only version N in which it was found but also one or more earlier versions (N-1, N-2,...,1.0).

Figures 4, 5, and 6 illustrate the median honeymoon ratios for operating systems, server applications, and end-user applications, respectively.