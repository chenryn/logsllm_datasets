Check the definitions of the remote system, as previously described, and check that triggering is
activated in the remote system. Also check that the LU 6.2 connection between the two systems is not
single session (if it is, you cannot receive reply messages).
Check that the queue on the remote queue manager exists, is not full, and accepts the message
length. If any of these criteria are not fulfilled, the remote queue manager tries to put the message
on the dead-letter queue. If the message length is longer than the maximum length that the channel
permits, the sending queue manager tries to put the message on its dead-letter queue.
Is the queue already full?
This could mean that an application could not put the required message on to the queue. If this is so,
check if the message has been put on to the dead-letter queue.
The dead-letter queue message header (dead-letter header structure) contains a reason or feedback
code explaining why the message could not be put on to the target queue. See MQDLH - Dead-letter
header for more information about the dead-letter header structure.
Is there a mismatch between the sending and receiving queue managers?
For example, the message length could be longer than the receiving queue manager can handle.
Check the console log for error messages.
Are the channel definitions of the sending and receiving channels compatible?
For example, a mismatch in the wrap value of the sequence number stops the channel. See
Distributed queuing and clusters.
Has data conversion been performed correctly?
If a message has come from a different queue manager, are the CCSIDs and encoding the same, or
does data conversion need to be performed.
Has your channel been defined for fast delivery of nonpersistent messages?
If your channel has been defined with the NPMSPEED attribute set to FAST (the default), and the
channel has stopped for some reason and then been restarted, nonpersistent messages might have
been lost. See Nonpersistent message speed (NPMSPEED) for more information about fast messages.
IBM MQ troubleshooting and support 297
Is a channel exit causing the messages to be processed in an unexpected way?
For example, a security exit might prevent a channel from starting, or an ExitResponse of
MQXCC_CLOSE_CHANNEL might terminate a channel.
Problems with getting messages when using message grouping on z/OS
Use this topic to understand some of the issues with getting messages when using message grouping on
IBM MQ for z/OS.
Is the application waiting for a complete group of messages?
Ensure all the messages in the group are on the queue. If you are using distributed queuing, see
“Problems with missing messages when using distributed queuing on z/OS” on page 296. Ensure the
last message in the group has the appropriate MsgFlags set in the message descriptor to indicate that
it is the last message. Ensure the message expiry of the messages in the group is set to a long enough
interval that they do not expire before they are retrieved.
If messages from the group have already been retrieved, and the get request is not in logical order,
turn off the option to wait for a complete group when retrieving the other group messages.
If the application issues a get request in logical order for a complete group, and midway through
retrieving the group it cannot find a message:
Ensure that no other applications are running against the queue and getting messages. Ensure that
the message expiry of the messages in the group is set to a long enough interval that they do not
expire before they are retrieved. Ensure that no one has issued the CLEAR QUEUE command. You can
retrieve incomplete groups from a queue by getting the messages by group ID, without specifying the
logical order option.
Finding messages sent to a cluster queue on z/OS
Use this topic to understand some of the issues involved with finding messages sent to a cluster queue on
IBM MQ for z/OS.
Before you can use the techniques described in these topics to find a message that did not arrive at a
cluster queue, you need to determine the queue managers that host the queue to which the message was
sent. You can determine this in the following ways:
• You can use the DISPLAY QUEUE command to request information about cluster queues.
• You can use the name of the queue and queue manager that is returned in the MQPMO structure.
If you specified the MQOO_BIND_ON_OPEN option for the message, these fields give the destination of
the message. If the message was not bound to a particular queue and queue manager, these fields give
the name of the first queue and queue manager to which the message was sent. In this case, it might
not be the ultimate destination of the message.
Finding messages sent to the IBM MQ - IMS bridge
Use this topic to understand possible causes for missing messages sent to the IBM MQ - IMS bridge.
If you are using the IBM MQ - IMS bridge, and your message has not arrived as expected, consider the
following:
Is the IBM MQ - IMS bridge running?
Issue the following command for the bridge queue:
DISPLAY QSTATUS(qname) IPPROCS CURDEPTH
The value of IPPROCS should be 1; if it is 0, check the following:
• Is the queue a bridge queue?
• Is IMS running?
• Has OTMA been started?
• Is IBM MQ connected to OTMA?
298 Troubleshooting and Support for IBM MQ
Note: There are two IBM MQ messages that you can use to establish whether you have a connection
to OTMA. If message CSQ2010I is present in the job log of the task, but message CSQ2011I is not
present, IBM MQ is connected to OTMA. This message also tells you to which IBM MQ system OTMA
is connected. For more information about the content of these messages, see IBM MQ for z/OS
messages, completion, and reason codes.
Within the queue manager there is a task processing each IMS bridge queue. This task gets from the
queue, sends the request to IMS, and then does a commit. If persistent messages are used, then the
commit requires disk I/O and so the process takes longer than for non-persistent messages. The time
to process the get, send, and commit, limits the rate at which the task can process messages. If the
task can keep up with the workload then the current depth is close to zero. If you find that the current
depth is often greater than zero you might be able to increase throughput by using two queues instead
of one.
Use the IMS command /DIS OTMA to check that OTMA is active.
If your messages are flowing to IMS, check the following:
• Use the IMS command /DIS TMEMBER client TPIPE ALL to display information about IMS
Tpipes. From this you can determine the number of messages enqueued on, and dequeued from,
each Tpipe. (Commit mode 1 messages are not usually queued on a Tpipe.)
• Use the IMS command /DIS A to show whether there is a dependent region available for the IMS
transaction to run in.
• Use the IMS command /DIS TRAN trancode to show the number of messages queued for a
transaction.
• Use the IMS command /DIS PROG progname to show if a program has been stopped.
Was the reply message sent to the correct place?
Issue the following command:
DISPLAY QSTATUS(*) CURDEPTH
Does the CURDEPTH indicate that there is a reply on a queue that you are not expecting?
Messages contain unexpected or corrupted information on z/OS
Use this topic to understand some of the issues that can cause unexpected or corrupted output on z/OS.
If the information contained in the message is not what your application was expecting, or has been
corrupted in some way, consider the following points:
Has your application, or the application that put the message on to the queue changed?
Ensure that all changes are simultaneously reflected on all systems that need to be aware of the
change.
For example, a copybook formatting the message might have been changed, in which case, both
applications have to be recompiled to pick up the changes. If one application has not been
recompiled, the data will appear corrupt to the other.
Check that no external source of data, such as a VSAM data set, has changed. This could also
invalidate your data if any necessary recompilations have not been done. Also check that any CICS
maps and TSO panels that you are using for input of message data have not changed.
Is an application sending messages to the wrong queue?
Check that the messages your application is receiving are not intended for an application servicing a
different queue. If necessary, change your security definitions to prevent unauthorized applications
from putting messages on to the wrong queues.
If your application has used an alias queue, check that the alias points to the correct queue.
IBM MQ troubleshooting and support 299
If you altered the queue to make it a cluster queue, it might now contain messages from different
application sources.
Has the trigger information been specified correctly for this queue?
Check that your application should have been started, or should a different application have been
started?
Has data conversion been performed correctly?
If a message has come from a different queue manager, are the CCSIDs and encoding the same, or
does data conversion need to be performed.
Check that the Format field of the MQMD structure corresponds with the content of the message. If
not, the data conversion process might not have been able to deal with the message correctly.
If these checks do not enable you to solve the problem, check your application logic, both for the program
sending the message, and for the program receiving it.
Dealing with issues when capturing SMF data for the channel
initiator (CHINIT)
Channel accounting and CHINIT statistics SMF data might not be captured for various reasons.
For more information, see:
Related concepts
Layout of SMF records for the channel initiator
Troubleshooting channel accounting data
Checks to carry out if channel accounting SMF data is not being produced for channels.
Procedure
1.Check that you have STATCHL set, either at the queue manager or the channel level.
• A value of OFF at channel level means that data is not collected for this channel.
• A value of OFF at queue manager level means data is not collected for channels with
STATCHL(QMGR).
• A value of NONE (only applicable at queue manager level) means data is not collected for all
channels, regardless of their STATCHL setting.
2.For client channels, check that STATCHL is set at the queue manager level.
3.For automatically defined cluster sender channels, check that the STATACLS queue manager attribute
is set.
4.Issue the DISPLAY TRACE command. You need TRACE(A) CLASS(4) enabled for channel
accounting data to be collected.
5.If the trace is enabled, data is written to SMF when any of the following conditions occur:
• From IBM MQ for z/OS 9.3.0, a timed interval, depending on the values of the STATIME
and ACCTIME queue manager system parameters. Use the DISPLAY SYSTEM command to display
the value of STATIME and ACCTIME.
• From IBM MQ for z/OS 9.3.0, the SET SYSTEM command is issued to change the value
of the STATIME or ACCTIME system parameters.
• The channel initiator is shut down.
• The STOP TRACE(A) CLASS(4) command is issued.
• From IBM MQ 9.3.0, if you specify a value between 0 and 1440 for the ACCTIME
parameter, that value is used instead of STATIME.
300 Troubleshooting and Support for IBM MQ
6.SMF might hold the data in memory before writing it out to the SMF data sets or the SMF structure.
Issue the MVS™ command D SMF,O and note the MAXDORM value. The MAXDORM value is displayed
in the format mmss, where mm is the time in minutes and ss is seconds. SMF can keep the data in
memory for the MAXDORM period before writing it out.
Related tasks
Planning for channel initiator SMF data
Interpreting IBM MQ performance statistics
Troubleshooting CHINIT statistics data
Checks to carry out if CHINIT statistics SMF data is not being produced.
Procedure
1.Issue the DISPLAY TRACE command. You need TRACE(S) CLASS(4) enabled to gather channel
initiator statistics SMF data.
2.If the trace is enabled, data is written to SMF when any of the following conditions occur:
• On a timed interval, depending on the value of the STATIME queue manager system parameter. A
value of zero means that the SMF statistics broadcast is used. Use the DISPLAY SYSTEM command
to display the value of STATIME.
• The SET SYSTEM command is issued to change the value of the STATIME system parameter.
• The channel initiator is shut down.
• The STOP TRACE(S) CLASS(4) command is issued.
3.SMF can hold the data in memory before writing it out to the SMF data sets or the SMF structure. Issue
the MVS command D SMF,O and note the MAXDORM value. The MAXDORM value is displayed in the
format mmss, where mm is the time in minutes and ss is seconds. SMF can keep the data in memory
for the MAXDORM period before writing it out.
Contacting IBM Support
If you need help with a problem that you are having with IBM MQ, you can contact IBM Support through
the IBM Support Site. You can also subscribe to notifications about IBM MQ fixes, troubleshooting, and
other news.
About this task
The IBM MQ Support pages within the IBM Support Site are:
• IBM MQ for Multiplatforms Support web page
• IBM MQ for z/OS Support web page
To receive notifications about IBM MQ fixes, troubleshooting, and other news, you can subscribe to
notifications.
If you are unable to resolve an issue yourself and need help from IBM Support, you can open a case (see
https://www.ibm.com/mysupport/s/createrecord/NewCase).
For more information about IBM Support, including how to register for support, see the IBM Support
Guide.
Note: Running the runmqras command will help you in collecting troubleshooting information before
you send it to IBM Support. For more information, see runmqras (collect IBM MQ troubleshooting
information).
IBM MQ troubleshooting and support 301
Collecting troubleshooting information for IBM Support
When you open a case with IBM, you can include additional IBM MQ troubleshooting information
(MustGather data) that you have collected to help with investigating the problem. In addition to the
information described in this section, IBM Support might request further information on a case by case
basis.
About this task
This section explains how to collect troubleshooting information for a number of different types of
problem that you might encounter with IBM MQ for Multiplatforms or IBM MQ for z/OS.
Collecting troubleshooting information on Multiplatforms
An overview of how to collect troubleshooting information for IBM MQ on Multiplatforms.
About this task
Note: In addition to the information described in this section, IBM Support might request further
information on a case by case basis.
Procedure
• For general information on how to collect troubleshooting information and send it to IBM, see:
– “Collecting troubleshooting information automatically with runmqras” on page 303
– “Collecting troubleshooting information manually” on page 306
– “Sending troubleshooting information to IBM” on page 353
• For information on how to collect troubleshooting and diagnostic information for a specific problem
area for IBM MQ for Multiplatforms, see:
– Advanced Message Security (AMS)
– C, C++, COBOL, .NET, pTAL, RPG and Visual Basic client applications
– Channels
– IBM MQ Clustering
– Data conversion
– Dead-letter queue messages
– Error Messages and FFST Files
– IBM WebSphere MQ File Transfer Edition (FTE): see Managed File Transfer (MFT)
– Hang and high CPU problems
– IBM MQ Explorer
– “Collecting information for MQIPT problems” on page 339
– Installation and uninstallation
– Java and JMS
– Logging and recovery
– Managed File Transfer
– Microsoft Cluster Service
– Performance
– Publish/subscribe
– Replicated data queue manager (RDQM)
302 Troubleshooting and Support for IBM MQ
– Security
– TLS channels (formerly SSL)
– Triggering
•
For IBM MQ Appliance, see Collect IBM MQ Appliance MustGather data to solve problems.
•
For IBM MQ in containers, see Collecting troubleshooting information for queue managers deployed
with the IBM MQ Operator.
• For all other problems see Collect IBM MQ MustGather data to solve all other problems on Linux,
UNIX, Windows, and IBM i.
Related tasks
“Collecting troubleshooting information on z/OS” on page 346
An overview of how to collect troubleshooting information for IBM MQ for z/OS.
Collecting troubleshooting information automatically with runmqras
If you need to send IBM MQ troubleshooting information to IBM Support, you can use the runmqras
command to gather the information together into a single archive.
Before you begin
The runmqras command is a Java application for collecting IBM MQ troubleshooting information. If your
IBM MQ installation includes the Java JRE component, runmqras will use it, otherwise make sure a
recent Java runtime environment (JRE) is in your PATH to avoid the following error:
AMQ8599E: The runmqras command was unable to locate a JRE
Ensure that your environment is set up for your IBM MQ installation before starting runmqras. For
example,:
• On UNIX and Linux:
sh> PATH="$PATH":/path/to/java/bin (only if needed)
sh> . /opt/mqm/bin/setmqenv ‑n Installation1
• On Windows:
C:\> SET PATH=%PATH%;C:\path\to\java\bin; (only if needed)
C:\> C:\Program Files\IBM\MQ\bin\setmqenv ‑n Installation2
• On IBM i (Qshell):
PATH="$PATH":/QOpenSys/QIBM/ProdData/JavaVM/jdk80/64bit (only if needed)
Optionally, you can add the /QIBM/ProdData/mqm/bin directory to your PATH so you can use
runmqras without typing its full path. To do so, enter one of the following commands in the Qshell
or add it to the .profile file in your home directory so it will run automatically every time you start the
Qshell:
===> . /QIBM/ProdData/mqm/bin/setmqenv -s
If you are unable to use the runmqras tool to collect the information automatically, for example if you are
running an older version of IBM MQ or cannot use runmqras for any other reason, you can instead collect
the information manually as described in “Collecting troubleshooting information manually” on page 306.
Tip: Before using runmqras, you might wish to clean up IBM MQ files to reduce the amount of data
collected. For more information, see Cleaning up IBM MQ files.
IBM MQ troubleshooting and support 303
About this task
You can use the runmqras command to gather troubleshooting information about an application or IBM
MQ failure into a single archive that you can submit to IBM when you report a problem.
By default, runmqras gathers information such as:
• IBM MQ FDC files.
• Error logs (from all queue managers as well as the machine-wide IBM MQ error logs).