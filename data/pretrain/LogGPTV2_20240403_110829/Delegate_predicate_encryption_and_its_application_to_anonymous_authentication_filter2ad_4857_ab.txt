(p, q, r, s, G, GT , e) R← G(1λ), N ← pqrs, gp
R← Gs
a, b, c
Q1, Q2
¯Z ← ((N, G, GT , e), gp, gr, gs, gqR1, gb
R← Zq, T ← gb2c
β
Output( ¯Z, T )
R← Gp, gq
R← Zp
p, gb2
p , ga
R← Gq, R1, R2, R3
R← Gr, gs
R← Gq, gr
R← Gr,
p Q1, gc
p Q2R2)
pgq, gab
p, gbc
p gβ
q R3
Delegation in Predicate Encryption Supporting Disjunctive Queries
235
For an algorithm A, deﬁne A’s advantage in the above experiment for G as:
A1AdvG,A(1λ) := |P r[A( ¯Z, gb2c
p R3) = 1] − P r[A( ¯Z, gb2c
p gβ
q R3) = 1]|
Deﬁnition 4. We say that G satisﬁes the assumption 1 if for any polynomial
time algorithm A, its advantage A1AdvG,A(1λ) is negligible in the security pa-
rameter λ.
Assumption 2. For a given generator G deﬁne the following distribution P (1λ):
(p, q, r, s, G, GT , e) R← G(1λ), N ← pqrs, gp
R← Gs
R← Zq
R← Gp, Q1, Q2
h
¯Z ← ((N, G, GT , e), gp, gq, gr, gs, h, gc
Output( ¯Z, T )
For an algorithm A, deﬁne A’s advantage in the above experiment for G as:
R← Gp, gq
p Q2, e(gp, h)γ), T ← e(gp, h)γc
R← Gq, c, γ
R← Gr, gs
R← Gq, gr
p, hcQ1, gγ
A2AdvG,A(1λ) := |P r[A( ¯Z, T ) = 1] − P r[A( ¯Z, R) = 1]|
where ( ¯Z, T ) R← P (1λ) and R
Deﬁnition 5. We say that G satisﬁes the assumption 2 if for any polynomial
time algorithm A, its advantage A2AdvG,A(1λ) is negligible in the security pa-
rameter λ.
R← GT .
The above two assumptions imply the hardness of ﬁnding any non-trivial factor
of N. They are proven to hold in the generic group by Katz et al [4].
4 Our Scheme
We construct our delegatable predicate encryption scheme by extending the
KSW system [4]. Our scheme possesses all the properties of the KSW system.
In our construction, we require that the ﬁxed attributes associated with the
disjunctive predicate cannot be modiﬁed by anyone. Only the delegatable ﬁelds
can be ﬁlled in. More speciﬁcally, it is hard to obtain the parent key by carrying
out computations on the child keys. On the technical level, our construction is
based on the following observations. Assume that we have a key for the predicate
((x = a) ∨ (x = b) ∨ ? ), where ? is a delegatable ﬁeld. The predicate can be
rewritten in polynomial equation p(x) = (x − a) · (x − b). If we ﬁll in x = c
(cid:4)(x) = (x − a) · (x − b) · (x − c) =
in the third ﬁeld, then the equation is p
p(x) · x + p(x) · (−c). As speciﬁed in Section 2, we know that the coeﬃcients
of the above polynomials will be encoded into secret keys. Our secret key SK
consists of two components, a decryption key component DK and a delegation
component DL. Assume coeﬃcients of p(x) is encoded in secret key SKZ. We
can shift elements in DKZ to obtain the elements associated with p(x) · x and
raise elements in DLZ to the power of (−c) to obtain the elements associated
with p(x) · (−c). We combine DLZ and DKZ to obtain keys corresponding to
(cid:4)(x). More details can be found in the following scheme.
p
236
D. Sun, C. Boyd, and J.M. Gonz´alez Nieto
Setup(1λ). The setup algorithm ﬁrst picks random large primes p, q, r, s and
creates groups G and GT of composite order N = pqrs. It then computes
gp, gq, gr and gs as generators of group Gp, Gq, Gr and Gs, respectively. Next,
it randomly chooses R1,i, R2,i ∈ Gr and h1, h2 ∈ Gp, where i = 1 to n. It also
chooses R0 ∈ Gr, γ ∈ Zp and h ∈ Gp at random, and sets l = n − 1, which
is the size of the attribute vector. It publishes (N = pqrs, G, GT ) and the
values P K = ( gp, gr, gs, Q = gq·R0, P = e(gp, h)γ,
l, {H1,i = h1·R1,i,
H2,i = h2·R2,i}n
−γ, h1, h2).
Encrypt(P K, w ∈ Ω, M ∈ M ⊆ GT ). Assume that Ω ⊆ ZN . M is some
eﬃciently-recognizable subgroup of GT . To encrypt a message M for the
attribute w, the algorithm computes (w1 = w0 mod N, . . . , wn = wn−1
mod N). Then, it chooses random δ, α, β ∈ ZN and R3,i, R4,i ∈ Gr for i = 1
to n. The ciphertext is
i=1 ). The master secret key MSK is (p, q, r, s, gq, h
(cid:3)
C =
C
(cid:2)
= M·P
δ
, C0 = g
δ
p, {C1,i = H
δ
1,i·Q
α·wi·R3,i, C2,i = H
δ
2,i·Q
β·wi·R4,i}n
i=1
(cid:4)
.
GenKey(MSK , X ∈ Ωl
?). Assume Ω? = Ω ∪ {?}, where ? is a delegatable
ﬁeld. Let X = (x1, . . . , xl) ∈ Ωl
?. I(X) denotes the set of all indices u
where xu ∈ Ω. This algorithm encodes X as a univariate polynomial p(x) =
(cid:2)
u∈I(X)(x − xu) mod N, and then extends the equation to obtain p(x) =
aI+1xI + ··· + a1x0 mod N, where aI+1, . . . , a1 are the coeﬃcients of the
resulting polynomial and I is the number of all ﬁxed ﬁelds. We set ai = 0
for i > I + 1. The secret key for X consists of two parts: a decryption key
component DK and a delegation component DL.
– DK: Choose random r1,i, r2,i ∈ Zp and Y, Y1,i, Y2,i ∈ Gs for i = 1 to n
(n = l + 1), random R5 ∈ Gr, random f1, f2 ∈ Zq and random Q6 ∈ Gq.
The decryption key is
(cid:5)
DK =
K = R5 · Q6 · h
{K1,i = g
r1,i
p
· gf1·ai
q
−γ · (cid:2)n
−r1,i
1
· h
· Y1,i, K2,i = g
i=1 h
−r2,i
2
r2,i
p
· Y,
· gf2·ai
q
(cid:6)
· Y2,i}n
i=1
– DL: Let w denotes the number of delegatable ﬁelds. The algorithm com-
putes w parallel components. They have similar structures with the de-
cryption key component. The main diﬀerence is that only the decryption
−γ. Let W = {1, . . . , w}.
key component contains the master secret h
For each v ∈ W, for i = 1 to n, choose random r1,i,v, r2,i,v ∈ Zp and
Y1,i,v, Y2,i,v ∈ Gs. For each v ∈ W, choose random R5,v ∈ Gr, random
Yv ∈ Gs and random Q6,v ∈ Gq. The delegation component is
· h
−r1,i,v
−r2,i,v
· Y1,i,v, L2,i,v = g
1
2
· Yv,
r2,i,v
p
(cid:6)
· gf2·ai
q
· Y2,i,v}n
i=1
(cid:5)
Lv = R5,v · Q6,v · (cid:2)n
{L1,i,v = g
· gf1·ai
r1,i,v
p
q
i=1 h
DLv =
where v ∈ W.
Delegation in Predicate Encryption Supporting Disjunctive Queries
237
Delegate(SKX∈Ωl
?, ˆx ∈ Ω). Given a secret key for X and an attribute ˆx, this
(cid:4), and
algorithm ﬁxes one of the delegatable ﬁelds of X with ˆx to obtain X
(cid:4). Clearly, if we can perform delegation on
computes the secret key for X
one ﬁeld, then we can perform delegation on multiple ﬁelds. If there is no
delegatable ﬁeld, the algorithm simply aborts.
Step 1: Let (DK, DL) denote the secret key for X with w delegatable ﬁelds.
Pick a random μ ∈ ZN and rerandomize the wth delegation component
DLw by raising every element in DLw to μ:
(cid:7)
ˆDL =
ˆL = Lμ
w, { ˆL1,i = L
μ
1,i,w, ˆL2,i = L
μ
2,i,w}n
i=1
(cid:8)
Step 2: Multiply the decryption key component DK by ˆDL:
(cid:7)
ˆDK =
ˆK = K · ˆL, { ˆK1,i = K1,i · ˆL1,i, ˆK2,i = K2,i · ˆL2,i}n
i=1
(cid:8)
Step 3: Multiply the delegation component DLv by ˆDL for all v ∈ W
(cid:4),
(cid:4) = {1, . . . , w − 1}. For all v ∈ W(cid:4), we compute following:
(cid:7)
ˆLv = Lv · ˆL, { ˆL1,i,v = L1,i,v · ˆL1,i, ˆL2,i,v = L2,i,v · ˆL2,i}n
(cid:8)
i=1
where W
ˆDLv =
Step 4: Perform a circular shift on the randomized decryption key compo-
nent ˆDK:
(cid:5)
pDK =
pK = ˆK, pK1,1 = ˆK1,n, pK2,1 = ˆK2,n,
{pK1,i = ˆK1,i−1, pK2,i = ˆK2,i−1}n
(cid:4) for X
(cid:4). DK
i=2
(cid:6)
Step 5: Compute decryption key component DK
(cid:4) is computed
from two components: 1) pDK, the shifted decryption key component of
secret key for X. 2) ˆDL1, the randomized delegation component for X.
2,i ∈ Gs for i = 1 to n, then raise every
(cid:4)
First randomly select Y
element in ˆDL1 to −ˆx, output the following DK
(cid:4)
1,i, Y
, Y
(cid:4):
(cid:4)
(cid:10)
(cid:9)
(cid:4)
−ˆx
(cid:4) = ˆL
K
{K
1
(cid:4)
1,i = ˆL
· pK · Y
−ˆx
1,i,1
(cid:4)
,
=
Step 6: Compute delegation component DL
DK
−ˆx
2,i,1
2,i}n
(cid:4)
(cid:4)
1,i, K
· pK1,i · Y
(cid:4)
2,i = ˆL
(cid:4) of X
· pK2,i · Y
(cid:4) is computed from
the randomized delegation component ˆDLv for all v ∈ W
(cid:4) =