the odds of inducing the desired fault. We summarize the
fault injection parameters required in Table 1.
Fθ|T anchor = {Fvolt, Fpdelay, Ffreq_hi, Fdur, Ffreq_lo}
Isolation-Agnostic DVFS
3.6
To support execution of trusted code isolated from un-
trusted one, two leading industry technologies, ARM
Trustzone [11] and Intel SGX [9], are widely deployed.
They share a common characteristic in that they can
execute both trusted and untrusted code on the same
physical core, while relying on architectural features
such as specialized instructions to support isolated exe-
cution. It is noteworthy that on such architectures, the
voltage and frequency regulators typically operate on
domains that apply to cores as a whole (regardless of
the security-sensitive processor execution modes), as de-
picted in Figure 7. With this design, any frequency or
voltage change initiated by untrusted code inadvertently
affects the trusted code execution, despite the hardware-
enforced isolation. This, as we show in subsequent sec-
tions, poses a critical security risk.
ATTACK ENABLER (GENERAL) #4: Hardware regula-
tors operate across security boundaries with no physical
isolation.
4 TZ Attack #1: Inferring AES Keys
In this section, we show how AES [43] keys stored
within Trustzone (TZ) can be inferred by lower-
privileged code from outside Trustzone, based on the
faulty ciphertexts derived from the erroneous AES en-
cryption operations. Speciﬁcally, it shows how lower-
privileged code can subvert the isolation guarantee by
ARM Trustzone, by inﬂuencing the computation of
higher-privileged code using the energy management
USENIX Association
26th USENIX Security Symposium    1063
Voltage and Frequency RegulatorsTrusted modeNormal mode (Insecure)Core0Trusted codeUntrusted codeHardware-enforced isolationRegulator HW-SW interfacevoltage/frequency changesShared power domainmechanisms. The attack shows that the conﬁdentiality
of the AES keys that should have been kept secure in
Trustzone can be broken.
Threat model. In our victim setup, we assume that there
is a Trustzone app that provisions AES keys and stores
these keys within Trustzone, inaccessible from the non-
Trustzone (non-secure) environment. The attacker can
repeatedly invoke the Trustzone app from the non-secure
environment to decrypt any given ciphertext, but is re-
stricted from reading the AES keys directly from Trust-
zone memory due to hardware-enforced isolation. The
attacker’s goal is to infer the AES keys stored.
4.1 Trustzone AES Decryption App
For this case study, since we do not have access to a
real-world AES app within Trustzone, we rely on a text-
book implementation of AES as the victim app. We
implement a AES decryption app that can be loaded
within Trustzone. Without loss of generality, we re-
strict the decryption to 128-bit keys, operating on 16-
bit plaintext and ciphertext. A single 128-bit encryp-
tion/decryption operation comprises 10 AES rounds,
each of which is a composition of the four canon-
ical sub-operations, named SubBytes, ShiftRows,
MixColumns and AddRoundKey [43].
To load this app into Trustzone as our victim pro-
gram, we use a publicly known Trustzone vulnerabil-
ity [17] to overwrite an existing Trustzone syscall han-
dler, tzbsp_es_is_activated, on our Nexus 6 device
running an old ﬁrmware8. A non-secure app can then ex-
ecute this syscall via an ARM Secure Monitor Call [26]
instruction to invoke our decryption Trustzone app. This
vulnerability serves the sole purpose of allowing us to
load the victim app within Trustzone to simulate a AES
decryption app in Trustzone. It plays no part in the at-
tacker’s task of interest – extracting the cryptographic
keys stored within Trustzone. Having the victim app ex-
ecute within Trustzone on a commodity device allows us
to evaluate CLKSCREW across Trustzone-enforced se-
curity boundaries in a practical and realistic manner.
4.2 Timing Proﬁling
As described in § 3.5, one of the crucial attack steps to
ensure reliable delivery of the fault to a victim code ex-
ecution is ﬁnding ideal values of Fpdelay. To guide this
parameter discovery process, we need the timing proﬁle
of the Trustzone app performing a single AES encryp-
tion/decryption operation. ARM allows the use of hard-
ware cycle counter (CCNT) to track the execution dura-
tion (in clock cycles) of Trustzone applications [10]. We
8Firmware version is shamu MMB29Q (Feb, 2016)
Figure 8: Execution duration (in clock cycles) of the vic-
tim and attack threads.
enable this cycle counting feature within our custom ker-
nel driver. With this feature, we can now measure how
long it takes for our Trustzone app to decrypt a single
ciphertext, even from the non-secure world.
ATTACK ENABLER (TZ-SPECIFIC) #5: Execution tim-
ing of code running in Trustzone can be proﬁled with
hardware counters that are accessible outside Trustzone.
Using the hardware cycle counter, we track the dura-
tion of each AES decryption operation over about 13k in-
vocations in total. Figure 8 (left) shows the distribution
of the execution length of an AES operation. Each op-
eration takes an average of 840k clock cycles with more
than 80% of the invocations taking between 812k to 920k
cycles. This shows that the victim thread does not exhibit
too much variability in terms of its execution time.
Recall that we want to deliver a fault to speciﬁc region
of the victim code execution and that the faulting param-
eter Fpdelay allows us to ﬁne-tune this timing. Here, we
evaluate the degree to which the use of no-op loops is
useful in controlling the timing of the fault delivery. Us-
ing a ﬁxed duration for the fault Fdur, we measure how
long the attack thread takes in clock cycles for different
values of the pre-fault delays Fpdelay. Figure 8 (right)
illustrates a distinct linear relationship between Fpdelay
and the length of the attack thread. This demonstrates
that number of loops used in Fpdelay is a reasonably good
proxy for controlling the execution timing of threads, and
thus the timing of our fault delivery.
4.3 Fault Model
To detect if a fault is induced in the AES decryption, we
add a check after the app invocation to verify that the de-
crypted plaintext is as expected. Moreover, to know ex-
actly which AES round got corrupted, we add minimal
code to track the intermediate states of the AES round
and return this as a buffer back to the non-secure environ-
ment. A comparison of the intermediate states and their
expected values will indicate the speciﬁc AES round that
1064    26th USENIX Security Symposium
USENIX Association
0.00.51.01.52.02.53.0CCNTtarget (in clock cycles)1e60123456Normalized frequency1e−5Target thread1.01.52.02.53.03.54.0# of pre-fault delay loops, Fpdelay1e523456789CCNTattack (in clock cycles)1e5Attack threadFigure 9: Fault model: Characteristics of observed faults
induced by CLKSCREW on AES operation.
is faulted and the corrupted value. With these validation
checks in place, we perform a grid search for the param-
eters for the faulting frequency, Ffreq_hi and the duration
of the fault, Fdur that can induce erroneous AES decryp-
tion results. From our empirical trials, we found that the
parameters Ffreq_hi = 3.69GHz and Fdur = 680 can most
reliably induce faults to the AES operation.
For the rest of this attack, we assume the use of these
two parameter values. By varying Fpdelay, we investigate
the characteristics of the observed faults. A total of about
360 faults is observed. More than 60% of the faults are
precise enough to affect exactly one AES round, as de-
picted in Figure 9 (left). Furthermore, out of these faults
that induce corruption in one AES round, more than half
are sufﬁciently transient to cause random corruptions of
exactly one byte, shown in Figure 9 (right). Being able to
induce a one-byte random corruption to the intermediate
state of an AES round is often used as a fault model in
several physical fault injection works [18, 56].
4.4 Putting it together
Removing use of time anchor. Recall from § 3.5 that
CLKSCREW may require proﬁling for a time anchor to
improve faulting precision. In this attack, we choose not
to do so, because (1) the algorithm of the AES operation
is fairly straightforward (one KeyExpansion round, fol-
lowed by 10 AES rounds [43]) to estimate Fpdelay, and
(2) the execution duration of the victim thread does not
exhibit too much variability. The small degree of vari-
ability in the execution timing of both the attack and vic-
tim threads allows us to reasonably target speciﬁc AES
rounds with a maximum error margin of one round.
Differential fault attack. Tunstall et al. present a dif-
ferential fault attack (DFA) that infers AES keys based
on pairs of correct and faulty ciphertext [56]. Since AES
encryption is symmetric, we leverage their attack to infer
AES keys based on pairs of correct and faulty plaintext.
Assuming a fault can be injected during the seventh AES
round to cause a single-byte random corruption to the
Figure 10: Controlling pre-fault delay, Fpdelay, allows us
to control which AES round the fault affects.
intermediate state in that round, with a corrupted input
to the eighth AES round, this DFA can reduce the num-
ber of AES-128 key hypotheses from the original 2128 to
212, in which case the key can be brute-forced in a trivial
exhaustive search. We refer readers to Tunstall et al.’s
work [56] for a full cryptanalysis for this fault model.
Degree of control of attack. To evaluate the degree of
control we have over the speciﬁc round we seek to in-
ject the fault in, we induce the faults using a range of
Fpdelay and track which AES rounds the faults occur in.
In Figure 10, each point represents a fault occurring in
a speciﬁc AES round and when that fault occurs during
the entire execution of the victim thread. We use the ratio
of CCNT attack/CCNT target as an approximation of latter.
There are ten distinct clusters of faults corresponding to
each AES round. Since CCNT target can be proﬁled be-
forehand and CCNT attack is controllable via the use of
Fpdelay, an attacker is able to control which AES round
to deliver the fault to for this attack.
Actual attack.
Given the faulting parameters,
Fθ , AES-128 = {Fvolt = 1.055V, Fpdelay = 200k, Ffreq_hi =
3.69GHz, Fdur = 680, Ffreq_lo = 2.61GHz}, it took, on
average, 20 faulting attempts to induce a one-byte fault to
the input to the eighth AES round. Given the pair of this
faulty plaintext and the expected one, it took Tunstall et
al.’s DFA algorithm about 12 minutes on a 2.7GHz quad-
core CPU to generate 3650 key hypotheses, one out of
which is the AES key stored within Trustzone.
5 TZ Attack #2: Loading Self-Signed Apps
In this case study, we show how CLKSCREW can sub-
vert the RSA signature chain veriﬁcation – the primary
public-key cryptographic method used for authenticating
the loading of ﬁrmware images into Trustzone. ARM-
based SoC processors use the ARM Trustzone to provide
a secure and isolated environment to execute security-
critical applications like DRM widevine [28] trustlet9 and
9Apps within Trustzone are sometimes referred to as trustlets.
USENIX Association
26th USENIX Security Symposium    1065
12345678# of faulted AES rounds0.00.10.20.30.40.50.60.7Normalized frequency13579111315# of faulted bytes within one round0.00.10.20.30.40.50.6Normalized frequency0.00.20.40.60.81.0Cycle length ratio: CCNTattack=CCNTtarget012345678910Corrupted AES roundx ← MONTMULT(x, x, Nrev, r−1)
if e[i] == 1 then
x ← MONTMULT(x, a, Nrev, r−1)
if f ound_ f irst_one_bit then
r ← 22048
R ← r2 mod N
Nrev ← FLIPENDIANNESS(N)
r−1 ← MODINVERSE(r, Nrev)
f ound_ f irst_one_bit ← f alse
for i ∈ {bitlen(e)− 1 .. 0} do
Algorithm 1 Given public key modulus N and exponent
e, decrypt a RSA signature S. Return plaintext hash, H.
1: procedure DECRYPTSIG(S, e, N)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23: end procedure
end if
Srev ← FLIPENDIANNESS(S)
x ← MONTMULT(Srev, R, Nrev, r−1)
a ← x
f ound_ f irst_one_bit ← true
end for
x ← MONTMULT(x, 1, Nrev, r−1)
H ← FLIPENDIANNESS(x)
return H
else if e[i] == 1 then
end if
key management keymaster [27] trustlet. These vendor-
speciﬁc ﬁrmware are subject to regular updates. These
ﬁrmware update ﬁles consist of the updated code, a sig-
nature protecting the hash of the code, and a certiﬁcate
chain. Before loading these signed code updates into
Trustzone, the Trusted Execution Environment (TEE)
authenticates the certiﬁcate chain and veriﬁes the in-
tegrity of the code updates [49].
RSA Signature Validation.
In the RSA cryptosystem
[51], let N denote the modulus, d denote the private ex-
ponent and e denote the public exponent.
In addition,
we also denote the SHA-256 hash of code C as H(C)
for the rest of the section. To ensure the integrity and
authenticity of a given code blob C, the code originator
creates a signature Sig with its RSA private key: Sig ←
(H(C))d mod N. The code blob is then distributed to-
gether with the signature and a certiﬁcate containing the
signing modulus N. Subsequently, the code blob C can
be authenticated by verifying that the hash of the code
blob matches the plaintext decrypted from the signature
using the public modulus N: Sige mod N == H(C). The
public exponent is typically hard-coded to 0x10001; only
the modulus N is of interest here.
Threat model. The goal of the attacker is to provide
an arbitrary attack app with a self-signed signature and
have the TEE successfully authenticate and load this
self-signed app within Trustzone. To load apps into
Trustzone, the attackers can invoke the TEE to authen-
ticate and load a given app into Trustzone using the
QSEOS_APP_START_COMMAND [4] Secure Channel Man-
ager10 command. The attacker can repeatedly invoke this
operation, but only from the non-secure environment.
5.1 Trustzone Signature Authentication
To formulate a CLKSCREW attack strategy, we ﬁrst ex-
amine how the veriﬁcation of RSA signatures is im-
plemented within the TEE. This veriﬁcation mechanism
is implemented within the bootloader ﬁrmware. For
the Nexus 6 in particular, we use the shamu-speciﬁc
ﬁrmware image (MOB31S, dated Jan 2017 [1]), down-
loaded from the Google ﬁrmware update repository.
The RSA decryption function used in the signature