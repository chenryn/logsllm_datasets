code for potential defects, poor coding practices and styles, overly complex code, and so on. Typical
rules include “Constant If Expression,” “Empty Else Block,” “GString As Map Key,” and “Grails
Stateless Service.”
For Ant or Maven-based projects, the CodeNarc Ant plugin is the simplest option (a Maven plugin is
under development at the time of writing). A typical Ant configuration for use with Jenkins would look
like this:
You can integrate CodeNarc into a Grails project simply by installing the CodeNarc plugin:
$ grails install-plugin codenarc
This will configure CodeNarc to analyse the Groovy files in your Grails application code, as well as in
the src/groovy and test directories.
Gradle 0.8 also provides support for CodeNarc in the code-quality plugin, that you can configure in
your builds as shown here:
apply plugin: 'code-quality'
238
This will use the CodeNarc configuration file in config/codenarc/codenarc.xml by default. You
can override this with the codeNarcConfigFileName property.
You can generate the CodeNarc reports here by running gradle codenarcMain or, more simply,
gradle check.
9.4. Reporting on Code Quality Issues with the Violations
Plugin
One of the most useful code quality plugins for Jenkins is the Violations plugin. This plugin will not
analyse your project source code (you need to configure your build to do that), but it does a great job on
reporting on the code quality metrics generated for individual builds and trends over time. The plugin
caters for reports on code quality metrics coming from a large range of static analysis tools, including:
For Java
Checkstyle, CPD, PMD, FindBugs, and jcreport
For Groovy
codenarc
For JavaScript
jslint
For .Net
gendarme and stylecop
Installing the plugin is straightforward. Just go to the Plugin Manager screen and select the Jenkins
Violations plugin. Once you have installed the plugin and restarted Jenkins, you will be able to use it
for your projects.
The Violations plugin does not generate the code quality metrics data itself—you need to configure
your built to do that, as shown in the previous section. An example of doing this for a Maven build
job is illustrated in Figure 9.3, “Generating code quality reports in a Maven build”. Notice that here we
are invoking the Maven plugin goals directly. We could also just run mvn site, but if we are only
interested in the code quality metrics, and not the other elements of the Maven-generated site, calling
the plugins directly will result in faster builds.
Figure 9.3. Generating code quality reports in a Maven build
239
Once you have set this up, you can configure the violations plugin to generate reports and, if required,
trigger notifications, based on the report results. Just go to the Post-build Actions and check the Report
Violations checkbox. The details of the configuration vary depending on the project type. Lets look at
Freestyle build jobs first.
9.4.1. Working with Freestyle Build Jobs
Freestyle build jobs allow you the most configuration flexibility, and are your only option for non-Java
projects.
When you use the Violations plugin with a Freestyle build job, you need to specify the paths to each of
the XML reports generated by the static analysis tools you have used (see Figure 9.4, “Configuring the
violations plugin for a Freestyle project”). The plugin can cater for several reports from the same tool,
which is useful for Maven multimodule projects—just use a wildcard expression to identify the reports
you want (for example, **/target/checkstyle.xml).
Figure 9.4. Configuring the violations plugin for a Freestyle project
The Violations plugin will generate a graph tracking the number of each type of issue over time
(see Figure 9.5, “Violations over time”). The graph displays a different-colored line for each type of
violations your are tracking, as well as a summary of the latest results.
240
Figure 9.5. Violations over time
You can also click on this graph to drill down into a particular build. Here, you can see the number
of issues raised for that particular build (see Figure 9.6, “Violations for a given build”), with various
breakdowns by violation type, severity, and file.
Figure 9.6. Violations for a given build
Finally, you can drill down into a particular class, to display the detailed list of issues, along with where
they appear in the source code.
But the Violations plugin also allows for a more proactive management of code quality. You can use the
results of the code quality analysis reports to influence the weather icon on the Jenkins dashboard. This
241
weather icon is normally related to the number of failing builds in the previous five builds, but Jenkins
can also take into account other factors, such as code quality results. Displaying a cloudy or stormy icon
for a project on the dashboard is a much better way of raising awareness about code quality issues that
simply relying on graphs and reports on the build job page.
To set this up, you need to go back to the Report Violations section in the Post-build Actions. The first
three columns in Figure 9.4, “Configuring the violations plugin for a Freestyle project” show a sunny
icon, a stormy icon, and a yellow ball. The one with the sunny icon is the maximum number of violations
tolerated in order to keep the sunny weather icon on the dashboard page. The second column, with the
stormy weather icon, is the number of violations that will cause a stormy icon to appear on the dashboard.
If you have a number of violations between these two extremes, you will get one of the cloudy icons.
You can set different values for different tools. The exact thresholds will vary between teams and
between projects, and also between tools. For example, Checkstyle will typically raise a lot more issues
than FindBugs or CPD, with PMD being somewhere in between. You need to adjust the values you use
to reflect how these tools work on your code base, and your expectations.
You can take this even further with the third column (the one with the yellow ball). This column lets you
set a number of violations that will cause the build to be declared unstable. Remember, when a build
becomes unstable Jenkins will send out notification messages, so this is an even more proactive strategy.
For example, in Figure 9.4, “Configuring the violations plugin for a Freestyle project”, we have
configured the minimum number of Checkstyle violations to 10, which means that the sunny weather
icon will only appear if there are 10 or fewer Checkstyle violations. If there are more than 10, the weather
will degrade progressively, until at the 200 violations mark, it will become stormy. And if there are 500
or more Checkstyle violations, the project will be flagged as unstable.
Now look at the configuration for CPD, the duplicated code detector that comes with PMD. In this
project, we have adopted a zero-tolerance policy for duplicated code, so the sunny icon value is set to
zero. The stormy icon is set to 10, so if there are 10 or more copy-paste violations, the project weather
indicator will appear as stormy. And if the project has 15 or more copy-paste violations, it will be
declared unstable.
Now, on the Dashboard page, this project will appear both with a stormy weather icon and as unstable,
even though there are no test failures (see Figure 9.7, “Configuring the violations plugin for a Freestyle
project”). This particular build is unstable because there are 16 CPD violations. In addition, if you place
your mouse over the weather icon, Jenkins will display some more details about how it calculated this
particular status.
242
Figure 9.7. Configuring the violations plugin for a Freestyle project
9.4.2. Working with Maven Build Jobs
Maven build jobs in Jenkins use the Maven conventions and information in the project pom.xml file
to make configuration easier and more lightweight. When you use the Violations plugin with a Maven
build job, Jenkins uses these conventions to reduce the amount of work you need to do to configure the
plugin. You don’t need to tell Jenkins where to find the XML reports for many of the static analysis
tools (for example, Checkstyle, PMD, FindBugs, and CPD), as Jenkins can figure this out based from
the Maven conventions and plugin configurations (see Figure 9.8, “Configuring the violations plugin
for a Maven project”). If you do need to override these conventions, you can choose the Pattern option
in the “XML filename pattern” drop-down list, and enter a path as you do for freestyle build jobs.
Figure 9.8. Configuring the violations plugin for a Maven project
243
The Violations plugin works well with multimodule Maven projects, but at the time of writing it needs a
little tweaking to obtain best results. Maven build jobs understand the structure of multimodule projects
(see Figure 9.9, “Jenkins Maven build jobs understand Maven multimodule structures”); furthermore,
you can drill down into any module and get a detailed view of the build results for that build job.
Figure 9.9. Jenkins Maven build jobs understand Maven multimodule structures
This is a very useful feature, but it means you need to do a little extra work to get all of the benefits out
of the Violations plugins for the individual modules. By default, the violations plugin will display an
aggregated view of the code quality metrics like the one in Figure 9.5, “Violations over time”. You can
also click on the violations graph, and view the detailed reports for each module.
However, for this to work correctly, you need to activate the violations plugin individually for each
module in addition to the main project. To do this, click on the module you want to configure in the
Modules screen, and then click on the “Configure” menu. Here, you will see a small subset of the usual
configuration options (see Figure 9.10, “Activating the Violations plugin for an individual module”).
Here, you just need to activate the Violations option, and configure the thresholds if required. On the
positive side, this means that you can define different threshold values for different modules.
244
Figure 9.10. Activating the Violations plugin for an individual module
Once you have done this, when you click on the violations aggregate graph on the project build job
home page, Jenkins will list the individual violations graphs for each module.
9.5. Using the Checkstyle, PMD, and FindBugs Reports
You can also report individually on results from Checkstyle, PMD, and FindBugs. In addition to the
Violations plugin, there are also Jenkins plugins that produce trend graphs and detailed reports for each
of these tools individually. We will look at how to do this for Checkstyle, but the same approach also
applies for PMD and FindBugs. You can even use the Analysis Collector Plugin to display the combined
results in a graph similar to the one produced by the Violations plugin.
You can install these plugins through the Plugin Manager in the usual way. The plugins in question are
called, unsurprisingly, Checkstyle plugin, PMD plugin, and FindBugs plugin. All of these plugins use
the Static Analysis Utilities plugin, which you need to install as well (see Figure 9.11, “Installing the
Checkstyle and Static Analysis Utilities plugins”).
245
Figure 9.11. Installing the Checkstyle and Static Analysis Utilities plugins
Once you have installed these plugins, you can set up the reporting in your project configuration. Tick
the “Publish Checkstyle analysis results” checkbox. In a freestyle build, you will need to specify a path
pattern to find the Checkstyle XML reports; in a Maven 2 build, Jenkins will figure out where to look
for them by itself.
This will provide basic Checkstyle reporting, but as usual you can fine-tune things further by clicking
on the Advanced button. In a Maven 2 build, you can configure the health threshold values (how many
violations will cause the build to go from sunny to stormy), and also filter the priority violations you
want to include in this calculation. For example, you may only want high priority issues to be taken into
account for the weather icon status.
The Freestyle builds have a few more options you can configure: in particular, you can cause the build
to become unstable (yellow ball) or even to fail (red ball) if there are more than a given number of
violations, or if there are more than a given number of new violations (see Figure 9.12, “Configuring the
Checkstyle plugin”). So, in the configuration in the illustration, if there are more than 50 new checkstyle
violations of any priority in a build, the build will be flagged as unstable. This certainly has its uses for
Checkstyle, but it can also come in very handy with FindBugs, where high priority issues often represent
dangerous and potentially show-stopping bugs.
246
Figure 9.12. Configuring the Checkstyle plugin
Now, when the build runs, Jenkins will now generate a trend graph and detailed reports for the
Checkstyle violations (see Figure 9.13, “Displaying Checkstyle trends”). From here, you can drill down
to see violations per priority, per category, per run type, per package, and so on.
Figure 9.13. Displaying Checkstyle trends
247
As we mentioned earlier, the same approach also works with the PMD plugin and the FindBugs plugin.
These plugins are a great way to provide more focused reporting on the results of a particular tool, and
also give you more control over the impact that these violations will have on the build results.
9.6. Reporting on Code Complexity
Code complexity is another important aspect of code quality. Code complexity is measured in a
number of ways, but one commonly used (and easy-to-understand) complexity metric is Cyclometric
Complexity, which involves measuring the number of different paths through a method. Using this
metric, complex code typically has large numbers of nested conditional statements and loops, which
make the code harder to understand and to debug.
There is also a code quality theory that correlates code complexity and code coverage, to give a general
idea of how reliable a particular piece of code is. This is based on the (very understandable) idea that
code that is both complex and poorly tested is more likely to contain bugs than simple, well-tested code.
The Coverage Complexity Scatter Plot plugin is designed to let you visualize this information in your
Jenkins builds (see Figure 9.14, “A coverage/complexity scatter plot”). Dangerously complex and/or
untested methods will appear high on the graph, where as the more well-written and well-tested methods
will appear lower down.
Figure 9.14. A coverage/complexity scatter plot
The scatter graph gives you a good overview of the state of your code in terms of complexity and test
coverage, but you can also drill down to investigate further. If you click on any point in the graph, you
can see the corresponding methods, with their test coverage and complexity (see Figure 9.15, “You can
click on any point in the graph to investigate further”).
248
Figure 9.15. You can click on any point in the graph to investigate further
At the time of writing, this plugin requires Clover, so your build needs to have generated a Clover
XML coverage report, and you need to have installed and configured the Clover Jenkins plugin (see
Section 6.6.2, “Measuring Code Coverage with Clover”). However support for Cobertura and other
tools is planned.
9.7. Reporting on Open Tasks
When it comes to code quality, static analysis is not the only tool you can use. Another indicator of the
general health of your project can be found in the number of FIXME, TODO, @deprecated, and similar
tags scattered through the source code. If there are a lot of these, it can be a sign that your code base has
a lot of unfinished work, and is therefore not in a very finalized state.
The Jenkins Task Scanners plugin lets you keep track of these sorts of tags in your source code, and
optionally flag a build with a bad weather icon on the dashboard if there are too many open tasks.
To set this up, you need to install both the Static Analysis Utilities plugin and the Task Scanner plugin.
Once installed, you can activate the plugin in your project by checking the “Scan workspace for open
tasks” checkbox in the Build Settings section of your project job configuration.
Configuring the Task Scanner plugin is pretty straightforward (see Figure 9.16, “Configuring the Task
Scanner plugin is straightforward”). You simply enter the tags you want to track, with different priorities
if you consider certain tags to be more important than others. By default, the plugin will scan all the
Java source code in the project, but you can redefine this behavior by entering the Files to scan field.
In Figure 9.16, “Configuring the Task Scanner plugin is straightforward”, for example, we also check
XML and JSP files for tags.
249
Figure 9.16. Configuring the Task Scanner plugin is straightforward
The Advanced button gives you access to a few more sophisticated options. Probably the most useful
are the Health thresholds, which let you define the maximum number of issues tolerated before the
build can no longer be considered “sunny,” and the minimum number of issues required for “stormy
weather” status.
The plugin generates a graph that shows tag trends by priority (see Figure 9.17, “The Open Tasks Trend
graph”). If you click on the Open Tasks report, you can also see a breakdown of tasks by Maven module,
package or file, or even list the open tasks.
Figure 9.17. The Open Tasks Trend graph
250
9.8. Integrating with Sonar
Sonar4 is a tool that centralizes a range of code quality metrics into a single website (see Figure 9.18,
“Code quality reporting by Sonar”). It uses several Maven plugins (Checkstyle, PMD, FindBugs,
Cobertura or Clover, and others) to analyse Maven projects and generate a comprehensive set of code
quality metrics reports. Sonar reports on code coverage, rule compliance, and documentation, but also
on more high-level metrics such as complexity, maintainability and even technical debt. You can use
plugins to extend its features and add support for other languages (such as support for CodeNarc for
Groovy source code). The rules used by the various tools are managed and configured centrally on the
Sonar website, and the Maven projects being analyzed don’t require any particular configuration. This
makes Sonar a great fit for working on Maven projects where you have limited control over the pom files.
Figure 9.18. Code quality reporting by Sonar
In one of the most common usages of Sonar, Sonar automatically runs a set of Maven code quality
related plugins against your Maven project, and stores the results into a relational database. The Sonar
server, which you run separately, then analyzes and displays the results as shown in Figure 9.18, “Code
quality reporting by Sonar”.
Jenkins integrates well with Sonar. The Jenkins Sonar Plugin lets you define Sonar instances for all of
your projects, and then activate Sonar in particular builds. You can run your Sonar server on a different
4 http://www.sonarsource.org
251
machine to your Jenkins instance, or on the same. The only constraint is that the Jenkins instance must
have JDBC access to the Sonar database, as it injects code quality metrics directly into the database,
without going through the Sonar website (see Figure 9.19, “Jenkins and Sonar”).
Jenkins Sonar database
Figure 9.19. Jenkins and Sonar
Sonar also has an Ant bootstrap (with a Gradle bootstrap in the making at the time of writing) for non-
Maven users.