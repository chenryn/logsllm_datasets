### Code Quality Analysis with CodeNarc

CodeNarc is a static analysis tool for Groovy that helps identify potential defects, poor coding practices, and overly complex code. Common rules include “Constant If Expression,” “Empty Else Block,” “GString As Map Key,” and “Grails Stateless Service.”

#### Integration with Build Tools

**For Ant or Maven-based Projects:**
- The CodeNarc Ant plugin is the simplest option. A Maven plugin is currently under development.
- A typical Ant configuration for Jenkins would look like this:

```xml
<target name="codenarc">
    <taskdef resource="codenarc/codenarc-tasks.properties" classpathref="project.class.path"/>
    <codenarc>
        <fileset dir="${basedir}/src/main/groovy" includes="**/*.groovy"/>
    </codenarc>
</target>
```

**For Grails Projects:**
- You can integrate CodeNarc by installing the CodeNarc plugin:
  ```sh
  $ grails install-plugin codenarc
  ```
- This will configure CodeNarc to analyze Groovy files in your Grails application, as well as in the `src/groovy` and `test` directories.

**For Gradle Projects:**
- Gradle 0.8 provides support for CodeNarc in the `code-quality` plugin. Configure it in your `build.gradle` file:
  ```groovy
  apply plugin: 'code-quality'
  ```
- By default, it uses the CodeNarc configuration file located at `config/codenarc/codenarc.xml`. You can override this with the `codeNarcConfigFileName` property.
- Generate CodeNarc reports by running:
  ```sh
  $ gradle codenarcMain
  ```
  or
  ```sh
  $ gradle check
  ```

### Reporting on Code Quality Issues with the Violations Plugin

The Violations plugin is one of the most useful code quality plugins for Jenkins. It does not analyze your project source code directly but provides comprehensive reporting on code quality metrics generated by various static analysis tools.

#### Supported Static Analysis Tools

- **Java:** Checkstyle, CPD, PMD, FindBugs, jcreport
- **Groovy:** CodeNarc
- **JavaScript:** JSLint
- **.Net:** Gendarme, StyleCop

#### Installation and Configuration

1. **Install the Violations Plugin:**
   - Go to the Plugin Manager screen in Jenkins and select the Violations plugin.
   - Restart Jenkins after installation.

2. **Configure Your Build:**
   - Ensure your build is configured to generate code quality metrics. For example, in a Maven build, you can run:
     ```sh
     $ mvn site
     ```
   - Alternatively, for faster builds, you can call the plugins directly if only interested in code quality metrics.

3. **Set Up Post-build Actions:**
   - In the Post-build Actions, check the "Report Violations" checkbox.
   - Specify the paths to the XML reports generated by the static analysis tools.

#### Working with Freestyle Build Jobs

Freestyle build jobs offer the most configuration flexibility and are suitable for non-Java projects.

1. **Specify Report Paths:**
   - Use wildcard expressions to identify the reports (e.g., `**/target/checkstyle.xml`).

2. **Generate Reports:**
   - The Violations plugin generates a graph tracking the number of each type of issue over time.
   - Click on the graph to drill down into specific builds and view detailed breakdowns by violation type, severity, and file.

3. **Proactive Management:**
   - Use the results to influence the weather icon on the Jenkins dashboard.
   - Set thresholds for different tools to reflect your team's expectations and code base characteristics.

#### Working with Maven Build Jobs

Maven build jobs use Maven conventions to simplify configuration.

1. **Automatic Configuration:**
   - Jenkins can automatically determine the location of XML reports based on Maven conventions.
   - Override these conventions if needed by specifying a custom path pattern.

2. **Multimodule Projects:**
   - The Violations plugin works well with multimodule projects but may require additional configuration for individual modules.
   - Activate the Violations plugin for each module to get detailed reports and aggregated views.

### Using the Checkstyle, PMD, and FindBugs Reports

Jenkins also provides plugins for individual reporting on Checkstyle, PMD, and FindBugs.

#### Installation and Setup

1. **Install Plugins:**
   - Install the Checkstyle, PMD, and FindBugs plugins, along with the Static Analysis Utilities plugin.

2. **Configure Reporting:**
   - In the project configuration, tick the "Publish Checkstyle analysis results" checkbox.
   - For freestyle builds, specify the path pattern to find the Checkstyle XML reports.
   - For Maven 2 builds, Jenkins will automatically determine the report locations.

3. **Advanced Configuration:**
   - Fine-tune the health threshold values and filter priority violations.
   - Set conditions for the build to become unstable or fail based on the number of violations.

### Reporting on Code Complexity

Code complexity is a crucial aspect of code quality. Cyclomatic Complexity is a common metric that measures the number of different paths through a method.

#### Coverage Complexity Scatter Plot Plugin

- This plugin visualizes code complexity and test coverage in Jenkins builds.
- High-complexity and low-coverage methods appear higher on the graph, indicating potential issues.
- Drill down to investigate specific methods and their corresponding test coverage and complexity.

### Reporting on Open Tasks

Open tasks in the form of FIXME, TODO, and @deprecated tags can indicate unfinished work in your code base.

#### Task Scanner Plugin

1. **Installation:**
   - Install the Static Analysis Utilities and Task Scanner plugins.

2. **Configuration:**
   - Activate the plugin in your project and specify the tags to track.
   - Set health thresholds to flag builds with a bad weather icon if there are too many open tasks.

### Integrating with Sonar

Sonar is a tool that centralizes code quality metrics into a single website, providing comprehensive reports on code coverage, rule compliance, and more.

#### Integration with Jenkins

1. **Install the Jenkins Sonar Plugin:**
   - Define Sonar instances for your projects and activate Sonar in specific builds.
   - Ensure the Jenkins instance has JDBC access to the Sonar database.

2. **Ant and Gradle Bootstraps:**
   - Sonar also supports Ant and Gradle bootstraps for non-Maven users.

By following these steps, you can effectively integrate and manage code quality in your projects using Jenkins and various static analysis tools.