271
---
## Page 286
SQL注入攻击与防御（第2版）
●在 Oracle 中,可以通过 EXTPROC、Java、DBMS_SCHEDULER、PL/SQL、Oracle Text
或oradebug功能来执行命令。即使数据库用户没有足够的权限来执行代码，当数据库
漏掉了安全补丁时，也可以使用提升权限攻击来获得权限。
3.巩固访问
·可以使用数据库rootkit来保证能重复访间受侵害的服务器。
·不同的数据库rootkit拥有不同的复杂性，从向数据库服务器添加功能到只向系统添加
用户（使用常规检测不容易发现）均存在差异。
6.7常见问题解答
问题：对于SQL注入攻击而言，是否所有数据库后台均不存在差异？
解答：使用常规知识已经足以对不同的RDBMS平等地发动致命攻击，但我认为链接代码
或堆叠查询（像SQLServer支持的那样）的能力将使潜在攻击者更容易将Microsoft SQL
Server注入攻击作为目标。
问题：向主机操作系统读写文件是否需要专门的许可以及是否所有人均可执行该操作？
解答：一般来说，不同的系统情况会稍有差异，但通常假设需要某种提升验证会比较安
全些。
问题：为什么我要关心是否能够读写文件？
解答：近几年来，攻击者一直试图将读写受影响主机文件的能力转换为对主机的完全影
响，并且展示出了他们杰出的创造性。从远程数据库服务器的文件系统读取任意
络中其他深层次的主机。
问题：保证数据库配置的安全能否解决这些问题？
解答：加强数据库配置很难防止这些攻击。从理论上讲，可以通过牢固的配置和编写良好
的代码来防止所有SQL注入攻击。但实际上做比说要难得多。安全是个令人头疼
的间题，因为它因人面异：有些人选择花费大量时间来推测安全配置方面的方法。
272
---
## Page 287
第7章高级话题
本章目标
·避开输入过滤器
·利用二阶SQL注入
·利用客户端SQL注入
·使用混合攻击
7.1概述
通过前面章节的学习，我们已经掌握了多种在典型场景中寻找、确认、利用SQL注入漏
洞的技术。但有时我们还会遇到更具挑战性的情况，这时便需要对所学的技术进行扩展以便应
对应用中一些不常见的特性，或者需要将这些技术与其他利用结合起来以便发动成功的攻击。
的障碍。我们将讨论避开输入验证过滤器的方法，并学习几种绕开防御（比如Web应用防火墙）
的方法。本章会引入一种微妙的漏洞一二阶SQL注入，当前面介绍的攻击方法失效时可以使
用该方法。我们还将介绍客户端SQL注入漏洞，在HTML5中引入了新的客户端数据库特性，
因此可能会导致这种类型的漏洞。最后讨论混合攻击，可以将SQL注入利用与其他攻击技术
结合起来以发动更复杂的攻击并侵害防御上相对更好的应用。
7.2避开输入过滤器
Web应用通常会使用输入过滤器，设计这些过滤器的目的是防御包括SQL注入在内的常
见攻击。这些过滤器可能位于应用的代码中（自定义输入验证方式），也可能在应用外部实现，
形式为Web应用防火墙(WAF）或入侵防御系统（IPS)。
在SQL注入攻击语境中，遇到的最有趣的过滤器是试图阻止包含下列一种或多种内容的
输入：
·SQL关键字，比如 SELECT、AND、INSERT等
·特定的单个字符，比如引号标记或连字符
空白符
我们还可能会遇到尝试将输入修改为安全内容的过滤器（而不是阻止包含上述列表中的项
的输入），这些过滤器使用的方法包括编码、消除有问题的字符或者从输入中剥去带攻击性的
项并按正常方式处理剩下的内容。
---
## Page 288
SQL注入攻击与防御（第2版）
通常，由这些过滤器保护的应用程序代码易受到SQL注入攻击。如果想利用漏洞，就需
要寻找一种能避开过滤器的方法以使将恶意输入传递给易受攻击的代码。我们将在接下来的内
容中介绍一些用于实现该目标的技术。
7.2.1使用大小写变种
如果用关键字阻塞过滤器显得不够聪明，可以通过变换攻击字符串中字符的大小写来避开
它们，因为数据库使用不区分大小写的方式处理SQL关键字。例如，如果下列输入被阻止：
可以通过下列方法绕开过滤器：
*uNiOn SeLeCt password FrOm tblUsers WhErE username=′admin'--
7.2.2使用SQL注释
可以使用内联注释序列来创建SQL代码段。这些代码段显然在语法上有些怪异，但实际
上却非常有效，能够避开多种输入过滤器。
可以使用这种方法来避开多种简单的模式匹配过滤器。例如，phpShop应用程序中最新的
一个漏洞试图使用下列输入过滤器来阻止SQL注入攻击：
stristr ($value, 'WHERE ') 11
stristr($value, 'ALTER ') 11
stristr($value, 'SELECT *) 11
stristr ($value, 'DROP *) 11
stristr($value, 'script') 11
stristr($value, '<>') 11
stristr($value, '=′) 11
stristr($value, *SET *)) die (*Please provide a pezmitted value fox'.$key) /
请注意，上述代码对每个SQL关键字后面紧跟的空格进行了检查。可以在不需要空白符
的情况下使用内联注释来分隔每个关键字，这样就能很容易避开这种过滤。例如：
/**/3H/../xnTq/../WO/../PxOSsed../3TS/../NOIN/**
username/** /LIKE/**/ *admin*--
（请注意，过滤器将等号字符（-）也过滤掉了。上述避开攻击使用LIKE关键字替换等号，
在本例中可以得到相同的结果）
当然，也可以使用该技术避开那些只是阻止各种空白符的过滤器。许多开发人员错误地认
为，将输入限制为单个标记就可以防止SQL注入攻击，但是他们忘记了内联注释允许攻击者
不使用任何空格即可构造任意复杂的SQL。
在MySQL中，甚至可以在SQL关键字内部使用内联注释来避开很多常见的关键字阻塞
过滤器。例如，如果将有缺陷的pbpShop过滤器修改成只检查关键字面不检查附加的空白符（假
设后台数据库为MySQL)，下列攻击依然有效：
274
---
## Page 289
第7章高级话题
/**/s1asnTq/**/WO/**/&3/**/pxoxssed/ */L3/**/T3S/**/NOI/**/N/**/ 
WHE/ **/RE/**/username/ **/LIKE/ ** / *admin '=*
7.2.3使用URL编码
URL编码是一种用途广泛的技术，可以通过它来战胜多种类型的输入过滤器。URL编码
的最基本表示方式是使用问题字符的十六进制ASCII码来替换它们，并在ASCII码前加%。例
如，单引号字符的ASCII码为0x27，其URL编码的表示方式为%27。
2007年在 PHP-Nuke 应用程序中发现的个漏洞(http:/secunia.com/advisories/24949/)所使
用的过滤器能够阻止空白符和内联注释序列/*，但无法阻止以注释序列表示的URL编码。对
于这种情况，可以使用下列攻击来避开过滤器：
*$2f$2a*/UNION2f$2a*/SELECT2f2a*/passord%2f2a*/FROMt2f2a*/
tb1Users$2f$2a*/WHERE$2f$2a*/useIname2f&2a*/LIKE%2f%2a*/ 'admin*--
这种基本的URL编码攻击对其他情况不起作用，不过仍然可以通过对被阻止的字符进行
双URL编码来避开过滤器。在双编码攻击中，原有攻击中的%字符按正常方式进行URL编码
（即%25）。所以，单引号字符在双URL编码中的形式是%2527。如果将上述攻击修改成双URL
编码，那么其格式将如下所示：
*$252f$252a*/UNION%252f252a*/SELECT8252f252a*/passwordt252ft252a*/
FROM8252f$252a*/tb1User83252E$252a*/HHERE$252f8252a*/
usernamet252f$252a*/LIKEt252f$252a*/*adm1n′--
双URL编码有时会起作用，因为Web应用有时会多次解码用户输入并在最后解码之前应
用其输入过滤器。在上面的例子中，涉及的步骤如下所示：
（1）攻击者提供输入%252f%252a*/UNION.
(2）应用程序的URL将输入解码为%2/%2a*/UNION.
(3）应用程序验证输入中不包含/*（这里确实未包含)。
(4）应用程序的URL将输入解码为/**/UNION..
(5）应用程序在SQL查询中处理输入，攻击成功。
要对URL编码技术做进一步修改，可使用Unicode来编码被阻止的字符。就像使用两位
十六进制的ASCII码来表示%字符一样，也可以使用字符的各种Unicode码来表示URL编码。
进一步讲，考虑到Unicode规范的复杂性，解码器通常会容忍非法编码并按照“最接近匹配
（closest fit)”原则进行解码。如果应用的输入验证对特定的字母和采用Unicode编码的字符串
进行检查，就可以提交被阻止字符的非法编码。输入过滤器会接收这些非法编码，不过它们会
被正确解码，从而发动成功的攻击。
表7-1列出了一些常用字符的各种标准的和非标准的Unicode编码，执行SQL注入攻击时
它们会非常有用。
表7-1一些常用字符的标准的和非标准的Unicode编码
编码前的字符
编码后的等价形式
L200n%
%u02b9
%u02bc
275
---
## Page 290
SQL注入攻击与防御（第2版）
（续表）
编码前的字符
编码后的等价形式
%uu02c8
%u2032
%uff07
%c0%27
%00%
%e0%80%a7
%u005f
%ufff
PZ%00%
%c0%ad
pP%08%00%
%u2215
%u2044
%ufff
%c0%2f
%c0%af
%e0%80%af
%u0028
%uff08
%00%28
%0%a8
%e0%80%a8
%u0029
%uff19
%0%29
%c0%a9
%e0%80%a9
%u002a
%uffta
%0%2a
%c0%aa
%0%80%aa
[空格]
%u0020
%uff
%0%20
%c0%a0
%0%80%0
7.2.4使用动态查询执行
许多数据库都允许动态执行SQL查询，只须向执行查询的数据库函数传递一个包含SQL
查询的字符串即可，如果找到了一个有效的SQL注入点，但后来却发现应用过滤器阻止了想
276
---
## Page 291
第7章高级话题
注入的查询，那么可以使用动态执行来避开该过滤器。
不同数据库中动态查询执行的实现会有所不同。在MicrosofSQLServer 中，可以使用
EXEC函数执行一个字符串格式的查询。例如：
在Oracle中，可以使用EXECUTEIMMEDIATE命令执行一个字符串格式的查询。例如：
DECLARE pW VARCHAR2 (1000) :
NIS38
DBMS_OUTPUT , PUT_LINE (p) /
END;
数据库提供了多种操作字符串的方法。要想使用动态执行战胜输入过滤器，关键是使用字
符甲操作函数将过滤器允许的输人转换成一个包含所需查询的字符中。
对于最简单的情况，可以使用字符申连接技术将较小的部分构造成一个字符申。不同数据
库使用不同的语法来连接字符串。例如，如果SQL关键词SELECT被阻止，就可以按下列方
式构造它：
Oracle: *SEL*Il*ECT*
MSSQL: *SEL*+*ECT*
MySQL: *SEL**ECT*
请注意，SQLServer使用“+”（加号）作为连接符，MySQL使用空格作为连接符。在HTTP
请求中提交这些字符时，需要在URL中分别将它们编码成%2b和%20。
进一步讲，可以使用CHAR函数（Oracle中为 CHR）来构造单独的字符。CHAR函数可以接
收每个字符的ASCII码。例如，要想在SQLServer中构造SELECT关键词，可以使用：
CHAR (83) +CHAR (69) +CHAR (76) +CHAR (69) +CHAR (67) +CHAR (84)
请注意，按照这种方式构造字符串时不需要使用任何引号字符。如果所拥有的SQL注入
入口点阻止了引号标记，就可以使用CHAR函数来向利用中放置字符串（例如admin)。