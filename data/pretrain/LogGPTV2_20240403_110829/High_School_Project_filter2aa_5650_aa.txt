# High School Project
Category: Web Exploitation
## Description
> Here's my high school project, an online forum. It's so good that people actually use it. You can join, too. Since I'm the admin, I can also post secret stuff that only I can read. How cool is that!
## Solution
Visiting the attached website, we arrive to a forum with many categories and posts. The first category is called "Secrets" and is described as the "Admin's secret place".
In the "Secrets" category, there's a topic titled "Flag". However, if we try to view it, we get an error: "Only an admin can view this topic".
The forum allows users to sign up by selecting a username / password combination and entering their email. Later, they can sign in with their username and password.
Another feature that the forum has is the ability to view the implementation sources (implemented in PHP). This is available via a link at the bottom of each page: `Source`. It's possible to append `"?src"` to any public PHP file and view its sources (including files which are included from within other files).
We won't go over all the sources, let's just cover the logic related to signing up and logging in.
In `signup.php`, after verifying various things about the username and password, we have:
```php
        $sql = "INSERT INTO
                    users(user_name, user_pass, user_email ,user_date, user_level)
                VALUES('" . mysqli_real_escape_string($conn, $_POST['user_name']) . "',
                       '" . sha1($_POST['user_pass']) . "',
                       '" . mysqli_real_escape_string($conn, $_POST['user_email']) . "',
                        NOW(),
                        0)";
        $result = mysqli_query($conn ,$sql);
        if(!$result)
        {
            //something went wrong, display the error
            echo 'Something went wrong while registering. Please try again later.';
            echo mysqli_error($conn); //debugging purposes, uncomment when needed
        }
        else
        {
            echo 'Successfully registered. You can now sign in and start posting! :-)';
        }
```
The main point here is that the password is saved as a SHA1 hash in the database.
In `signin.php`, after performing basic checks for the username and password, the application performs the following:
```php
//the form has been posted without errors, so save it
//notice the use of mysql_real_escape_string, keep everything safe!
//also notice the sha1 function which hashes the password
$sql = "SELECT
            user_id,
            user_name,
            user_pass,
            user_level
        FROM
            users
        WHERE
            user_name = '" . mysqli_real_escape_string($conn, $_POST['user_name']) . "'
        AND
            user_pass = '" . sha1($_POST['user_pass']) . "'";
$result = mysqli_query($conn, $sql);
if(!$result)
{
    //something went wrong, display the error
    echo 'Something went wrong while signing in. Please try again later.';
    //echo mysql_error(); //debugging purposes, uncomment when needed
}
else
{
    //the query was successfully executed, there are 2 possibilities
    //1. the query returned data, the user can be signed in
    //2. the query returned an empty result set, the credentials were wrong
    if(mysqli_num_rows($result) == 0)
    {
        echo 'You have supplied a wrong user/password combination. Please try again.';
    }
    else
    {
        //we put the user_id, user_name and user_pass values in cookies, so we can use it at various pages
        while($row = mysqli_fetch_assoc($result))
        {
            setcookie('user_id', $row['user_id']);
            setcookie('user_name', $row['user_name']);
            setcookie('user_pass', $row['user_pass']);
            echo 'Welcome, ' . $row['user_name'] . '. Proceed to the forum overview.';
        }
    }
}
```
It searches for a user with a matching username and password, and if found - saves the user ID, username and hash of the password to a cookie.
Later, when accessing any page, `header.php` decides if the user is logged in by comparing the cookies to the DB:
```php
    $user = null;
    if(isset($_COOKIE['user_id'], $_COOKIE['user_name'], $_COOKIE['user_pass']))
    {
    $sql = "SELECT
                user_id,
                user_name,
                user_level
            FROM
                users
            WHERE
                user_id = " . mysqli_real_escape_string($conn, $_COOKIE['user_id']) . "
            AND
                user_name = '" . mysqli_real_escape_string($conn, $_COOKIE['user_name']) . "'
            AND
                user_pass = '" . mysqli_real_escape_string($conn, $_COOKIE['user_pass']) . "'";
    $result = mysqli_query($conn, $sql);
    if($result)
    {
        //we also put the user_id and user_name values in the $user, so we can use it at various pages
        while($row = mysqli_fetch_assoc($result))
        {
            $user = array();
            $user['user_id']    = $row['user_id'];
            $user['user_name']  = $row['user_name'];
            $user['user_level'] = $row['user_level'];
        }
    }
    }
    if($user)
    {
        echo 'Hello ' . $user['user_name'] . '! Not you? Sign out';
    }
    else
    {
        echo 'Sign in or create an account.';
    }
```
We can see that all DB access is sanitized using `mysqli_real_escape_string` (or `sha1`), and yet an injection is still possible! The faulty code is:
```sql
SELECT
    user_id,
    user_name,
    user_level
FROM
    users
WHERE
    user_id = " . mysqli_real_escape_string($conn, $_COOKIE['user_id']) . "
AND
    user_name = '" . mysqli_real_escape_string($conn, $_COOKIE['user_name']) . "'
AND
    user_pass = '" . mysqli_real_escape_string($conn, $_COOKIE['user_pass']) . "'";
```
Notice how the user id (which is expected to be an integer) is not surrounded by quotes. `mysqli_real_escape_string` just sanitizes `NUL (ASCII 0), \n, \r, \, ', ", Control-Z`, meaning we can enter anything else and refactor the SQL query without being detected. 
The first thing that came to mind was to comment out the rest of the query by setting the `user_id` cookie value to `"100 --"`. This should produce the following query:
```sql