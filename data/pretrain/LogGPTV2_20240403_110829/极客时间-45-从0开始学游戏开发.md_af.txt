## 如何直接使用绘图接口进行游戏开发？ {#05.html#-}通过上面的介绍，你是否对 Windows下几大流行的绘图接口有了大致的了解呢？接下来你或许会问，那我了解这些图形接口的编程接口后，是不是就可以直接用这些接口进行游戏的开发呢？答案当然是可以的。由于 SDL 的开发便利性和通用性，所以我拿 SDL编程接口作为例子，来阐述一下究竟怎样通过图形接口直接进行游戏的开发。从最基础的开始，我们先要从 SDL 的网站下载 SDL 的最新版本，下载网址是：（写作这篇文章的时候，最新的版本是 2.0.8 稳定版）。![](Images/7ed21b2e4ccf428d2082b3745cf20686.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/1e/7c/1e5e2f488c67643776858f564214787c.jpg"}在下载的网站页面，我们可以看到 Source Code 一栏，这是 SDL的源代码。有一定编程基础的同学可以下载源代码，直接使用 VC++、MinGW等编译器进行编译，编译完的头文件和库文件直接就可以使用。如果你对编译不熟悉，可以选择下载 DevelopmentLibraries，也就是编译完成后的开发包。网站已经将 Windows 下的开发环境分为VC++32 位版和 64 位版、MinGW32 位版和 64位版。为了教学方面和统一，也照顾各种平台的用户，我建议使用 MinGW 的 32位版。因为 64 位 Windows 可以兼容 32 位的应用。至于 MinGW 编译器和 IDE的下载安装细节，我将会在后续的专栏文章中介绍。下载完成后，将压缩包解压缩到任意目录，头文件和库文件使用解压缩出来的"i686-w64-mingw32"这个目录下的"include"和"lib"。接下来，我们在 IDE 中设置 include 路径和 lib 路径，链接程序的时候需要在IDE 设置包含库文件 libsdl.a、libsdlmain.a，就可以开始在 IDE中编写代码了。在开始开发的时候，首先使用 SDL_Init 来进行初始化。用这个方法传入一个unsigned int 类型的参数，参数列表就像这样：![](Images/175e3d188969c12857676f77d39b9af1.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/7b/6d/7b0370e14ed1121d8c37c546888c9e6d.jpg"}其中"初始化所有系统"这个选项，除了"忽略任意错误"外，包含了以上所有不同的初始化系统，一般使用SDL_INIT_EVERYTHING 即可。随后，我们要使用 SDL_CreateWindows 来创建一个窗体。SDL_CreateWindows支持六个参数，分别是：窗体名称、在 Windows 屏幕显示的 x 坐标、在 Windows屏幕显示的 y 坐标、宽、长、显示方式。然后将使用 SDL_CreateRenderer 创建一个 SDL的渲染器（SDL_Renderer）。渲染器的参数是：![](Images/0f9e8572b51a5aeb5d6567c33be5ead3.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/bb/6e/bbc37419239a0c9d32d5676acbc6b96e.jpg"}随后可以使用 SDL_RenderClear 来清空 SDL 渲染器、使用 SDL_RenderPresent方法将渲染的结果显示出来。然后我们需要建立一个大循环，在这个循环内，你可以把SDL支持的图形图像函数或者其他逻辑代码往里面填写，完成游戏的程序内容，具体的操作我会在之后的文章详细介绍。在这个大循环内，我们要用到 SDL_Event事件系统。在循环内捕捉用户事件，比如要退出这个循环就必须点击右上角的 X关闭按钮才行。如果你点击了 X 按钮，就会被 while 内的 event事件捕捉到，并且匹配是不是退出事件，如果是退出事件就退出程序。最终退出程序的时候，使用 SDL_Quit 清除资源退出程序。![](Images/225e1d991fd6cb66aebdaef793519130.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/fd/b6/fd59a32a4b01a53581cee54a16f2f9b6.jpg"}我们结合这张流程图来看一下将这些内容串联起来的代码：    #include  int main(int argc,char *args[]){    SDL_Window* window;    SDL_Renderer* render;    SDL_Event e;    bool q = 0;    int sdl=SDL_Init(SDL_INIT_EVERYTHING);初始化完成后，我们要建立窗体，并编写后续的步骤：    if(0 `{=html}1.**编写地图编辑器的过程，能让你更好地了解游戏引擎。**从编写地图编辑器开始，就是对游戏引擎的一次全面应用。为什么这么说呢，因为在编写地图编辑器的过程中，除了音乐模块或许暂时不会被用到外，利用引擎编写的地图编辑器、地图资源的载入代码、保存代码等等，都会被用在正式的游戏中。2.**编写地图编辑器的过程，可以优化游戏开发流程。**程序员之间会讨论关于资源载入、游戏内容加载和读取这些基础问题，并将最基础的流程完整地梳理一遍。在游戏正式开始开发之前，把这些流程梳理一遍，能极大提升开发过程中的流畅性。3.**编写地图编辑器的过程，涉及UI、按钮和键盘事件的使用。**地图编辑器开发完毕后，主要是给美术人员使用，所以UI 的点击、鼠标键盘事件是必不可少的。在地图编辑器中运用UI、按钮、键盘事件后，在正式游戏开发中，这些代码可以直接移植到游戏代码中使用。4.**编写地图编辑器的过程，能起到团队磨合的作用。**在编写的过程中，你会接触到策划、美术等很多人的意见，程序员之间也会对引擎的应用有很多的讨论。
## 地图编辑器与关卡编辑器 {#06.html#-}说到地图编辑器，不得不提到关卡编辑器。**关卡编辑器是一种主要给策划使用的编辑器，它涉及地图中的关卡内容。**一般情况下，关卡编辑器不涉及具体的地图细节，但是它涉及总体的游戏地图和游戏流程。简单来说，地图编辑器的功能就相当于房屋的结构朝向图。我们可以从这张图里，看到每个房间的俯视图。里面包括门的位置、阳台的位置，甚至厕所的位置。而装修公司设计家居，就相当于关卡编辑器的功能。设计师会在你已有房间的结构内，摆放各种桌子、椅子、床、柜子、灯泡等具体的家居用品。在实际开发过程中，很多时候，只有一些成体系的大游戏才会把关卡编辑器单独分出来。很多时候，对一些小游戏来说，关卡编辑器和地图编辑器经常是在一起的，你可以在地图编辑器里面直接来编写关卡。这张《坦克大战》的地图编辑器中就包含了关卡编辑器的内容。![](Images/2a8650535039e11aa6ad5381fac3b184.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/07/31/0751315e5a271167ebfc8f7253073831.jpg"}这里有一个 3D游戏的关卡编辑器的界面。我们常见的关卡编辑器的界面一般都是这样的。这个界面最左侧的对话框，是物件的选择界面，具体包括关卡内物件的选择和摆放；界面右侧的对话框是属性选择界面，定义这个物件的属性，比如这个物件是否可以弹跳、爆炸等等；界面右下角是物件X、Y、Z 轴的编辑，可以自定义物件的拉伸和缩放。![](Images/58fc395bcfeb54fc0b0e347eb31a0cee.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/4f/95/4f55227b8c3e5abd0fc67d3224413895.jpg"}我们拿 FPS枪战游戏来举例。我们可以先在编辑器内画完所有俯视角的**地图通路**，然后在这个地方**放上某种武器**，在那个地方**放上某种升级包**。这就是一个关卡的总体架构。随后，你需要在编辑器里编写一些简单的脚本程序。这些脚本程序会涉及玩家在进入游戏后总体的游戏进程和逻辑。比如，你可能会写"分数达到多少之后，等级+1""击杀敌人达到多少之后，分数 +10""失血达到多少出现什么情况"等等。总之，关卡编辑器和地图编辑器的功能，就好比家装设计图和房屋结构朝向图，一个是在地图内设置物件的摆放位置和具体的表现形式；一个是设计地图本身。
## 为什么要做游戏 Demo？ {#06.html#-demo-}按照传统的标准游戏开发流程，在编写完地图编辑器之后，就要开发游戏了。事实上，开发游戏的初期，我们必须要制作这款游戏的Demo。很多商业游戏制作之前都是要先做游戏 Demo的。你或许会问，为什么不立刻开发一个正式的游戏呢？我总结了一下，有以下几方面的原因：1.**游戏 Demo 可以完成游戏核心框架。**绝大部分情况下，最终完成的游戏成品，都会和游戏 Demo有较大的差异。这些差异体现在美术画面的优化细节、操作的优化细节、网络优化上等等。**游戏Demo 所肩负的任务，就是完成该游戏总体的核心内容框架。]{.orange}**在这个框架内，我们可以一窥游戏的总体逻辑、想呈现给玩家的是什么内容。比如，《三国志》题材的游戏，游戏 Demo就会呈现在大地图上进行城市内政的管理、军队的管理，以及战斗画面这些游戏的核心内容；比如FPS 射击游戏，游戏 Demo呈现出的就是，主角在一个有限的空间内进行射击和击杀敌人的操作，因为这些就是游戏的核心。至于游戏是不是好玩，画面是不是炫酷，音乐是不是好听，并不在游戏Demo 中呈现。2.**游戏 Demo 可以测试 bug。**在游戏开发中，地图编辑器做完之后，会载入经地图编辑器制作的地图，这些地图在游戏中是否有bug，是否需要调整，游戏体验好不好。这些内容在游戏 Demo中将被测试出来，并且在正式开发中进行调整。3.**游戏 Demo 可以磨合开发团队。**前面我们提到，有一些引擎自带地图编辑器，所以大多数情况下，地图编辑器不需要你自己编写。这个时候，你敲下的第一行代码就是游戏Demo 的代码，所以游戏 Demo就肩负另一个使命，就是团队人员的磨合。和地图编辑器一样，第一次编写游戏Demo，会有来自策划、美术、程序等各方面的意见和讨论，而制作游戏 Demo的过程对磨合团队是非常有利的。4.**游戏 Demo 最终会被舍弃。** 在开发过程中，Demo 版本是不稳定的，是有bug 的。只要不是特别严重的，一般不会去进行特别的修正。但是一般来说，bug会在正式版本中被修正。所以，游戏 Demo肩负的另一个任务，就是"试水"。程序代码在游戏中跑起来是不是有瓶颈，bug出现在哪里，哪些部分可以从 Demo中提取出来，在正式开发中使用，哪些部分可以在正式版本中优化，这些都是游戏Demo 所背负的"使命"。很多开发团队为了节省时间，很多公司老板为了节省成本，在地图编辑器完成之后，就跳过了游戏Demo 开发这个步骤，或者有些开发 leader 根本就不知道要做 Demo这个流程，所以一开始就去做正式版。这是个很危险的动作。因为按照流程，**如果一上来就开始编写正式版本的游戏，很有可能会出现无法预估的bug 和无法修正的问题。**比如，地图编辑器中保存的地图，在正式游戏中就出现极大的错误，连修正的时间都没有，最终修修补补急急忙忙地上线，玩家一片怨声载道。游戏死亡。当然，由于游戏类型不同，地图编辑器、关卡编辑器和游戏Demo，并非是必须要做的内容，就像我们要做的"打飞机"这样简单的游戏，甚至贪吃蛇、俄罗斯方块、象棋、围棋等等，这些都不需要任何编辑器，这些单一简单的游戏，开发流程简单，如果出现问题直接重新编写就可以了。
## 小结 {#06.html#-}这一节，我讲了地图编辑器、关卡编辑器和游戏 Demo相关的内容，你只需要记住这些重点：-   开发地图编辑器的过程可以帮助开发人员了解引擎、优化开发流程、测试    bug、磨合团队；-   关卡编辑器之于地图编辑器，就好比装修设计图和房屋朝向图之间的关系；-   游戏 Demo 的使命是完成游戏核心框架，测试地图编辑器等问题，Demo    最终会被舍弃；-   在游戏开发的正规流程中，我们要经历地图编辑器、关卡编辑器、游戏    Demo、正式开发等几个流程，每一个流程都肩负不一样的任务。但简单如贪吃蛇类的游戏，我们可以直接上手编写代码。最后，给你留一道小思考题吧。用地图编辑器制作出来的地图有没有取巧的保存方法，让游戏程序读取地图时更方便？欢迎留言说出你的看法，我在下一节的挑战中等你！![](Images/687aa95b3803eb0079b384dbad39d165.png){savepage-src="https://static001.geekbang.org/resource/image/1d/cf/1dddc22b262072c5c2e8b4937907f7cf.jpg"}
# 第6讲 \| 从0开始整理开发流程在第一模块的基础知识中，我已经讲过开发一款游戏需要的一些背景知识。对于2D 游戏和 3D 游戏的区别、从程序到美术、从 2D、伪 3D 到 3D等方面，我都进行了逐一地阐述。除此之外，对于任何类型的游戏开发都非常重要的三个概念：游戏引擎、底层绘图接口、地图编辑器，我也进行了一些我个人的解读。有了这些背景知识，这一节，我来带你整理一下整个游戏开发流程以及流程中所需要的工具。
## 1. 选择开发环境 {#07.html#1-}我们默认是在 Windows 环境下进行开发，至于是什么版本的 Windows不需要做更多地阐述，你愿意用什么版本就用什么版本，因为几乎所有流行的Windows 环境都能进行编程工作。至于我为什么选择 Windows环境进行开发，那是因为：-   首先，在 Windows 环境下，拥有比较方便的**调试工具**。不管是 Python    脚本语言还是 C/C++ 语言，都可以使用图形界面进行调试；-   其次，Windows 下的**IDE    开发环境**也比其他平台更多，你拥有更多的工具可供选择。另外，在开发游戏的时候，你可以选择    OpenGL、DirectX 或者 SDL 等图形库进行编程。作为游戏开发，DirectX    几乎是不可或缺的标准，而我在第四节讲述底层绘图接口的时候说过，它是由微软提供的游戏编程接口，在    Windows 下提供了更为方便的底层调用。-   除了 Windows 外，Linux    平台的**图形显卡驱动**几乎是不完善的，无法发挥显卡的最大优势。苹果平台又一家独大，开发人员只能为其定制专一的代码，开发难度比之    Windows 就大了不少。
## 2. 下载脚本工具 {#07.html#2-}在开发过程中，我们需要用到 Python、Lua 或者 Ruby等脚本工具。我们可以直接用 Python 或者 Ruby 开发简单的游戏模块的Demo。**由于脚本语言代码的简单和高可读性，所以由脚本语言入手，进行早期示例的代码剖析，是一个不错的选择。**Python 我们可以从 python.org 下载，Lua 我们可以从 lua.org下载，相应地，Ruby 也可以在 ruby-lang.org 下载。为了考虑兼容性，Python建议使用 2.7.x 版本。Lua 下载最新的版本即可。Windows 下 Python的源代码编译并不方便，所以建议下载 MSI安装包，直接安装即可。因为之后我要使用 Pygame 进行示范，所以建议你使用32 位的 Python 版本。