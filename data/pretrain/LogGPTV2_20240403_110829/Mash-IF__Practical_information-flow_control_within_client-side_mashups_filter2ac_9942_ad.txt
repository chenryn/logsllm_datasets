The 
the label of id, which is 
name [x l, where x is an index variable 
ment in the array name is known to be sensitive. 
question 
sensitive 
tive otherwise. 
of x can only be observed 
a static analysis 
label should be propagated 
"black-box" 
the statement, 
as a single element of name is sensitive, 
Similar treatments 
expressions: 
deem that all its attributes 
statically 
on; for a complex expression, 
sensitive, 
sensitive 
operation 
Inevitably, 
This is acceptable, 
rule generated 
legitimate 
often true according 
impair the 
which we found was 
study (Section 
4). 
Problems happen, however, when statements 
like 
once one of its sub-expressions 
and the static 
on the expression 
thereby does not significantly 
for an object with a sensitive 
to our experimental 
we label all its outputs as 
does not know whether an 
functionality 
which attribute 
if the DRG cannot 
are sensitive 
a statement 
of a script, 
determine 
is found to be 
analysis 
involves 
however, 
labels. 
The function 
eval () runs a 
Since the input of eval may not be 
eval () are encountered. 
string as code, which can read or write any variables 
that 
carry sensitive 
observed 
is rolling 
sensitive 
executes 
and prior work [26] found that most legitimate 
not include 
approach 
without running a script, 
back to the BLP model, treating 
once a JavaScript 
such a statement. 
scripts 
do 
eval (). This ensures that in most cases, our 
the only option we have 
all its outputs 
object and also 
reads a sensitive 
Fortunately, 
can still do much better than the BLP. 
as 
both our research 
such an approach will cause false positives. 
as long as the declassification 
that sub-expression. 
information, 
paths 
individ­
the execution 
or highly sensitive 
of function 
are actually 
calls and DOM op­
recorded 
Once a data-leaking 
Rule generation. After discovering 
that could leak sensitive 
the DRG moves to build a tree that fingerprints 
ual paths with sequences 
erations. 
Such sequences 
script is being analyzed. 
found, the DRG dumps its sequence 
sequence 
through 
sensitive 
which sensitive 
for example, 
XMLHt t pRe que st . open ( ) . The program location, 
gether with the hash value of a script, 
from the database 
while the 
path has been 
to the database. 
Each 
where 
is also annotated 
data are read, and an output function 
data flows get out of the script, 
by the program location 
with the script. 
the sequences 
associated 
to­
is used to retrieve 
4. Evaluation 
The purpose of our experimental 
study is to understand 
the efficacy of our techniques 
flows within mashups. To this end, we ran our proto-
in controlling 
information 
mashups. Half of them came 
Google Gmail Gad­
[5], Facebook Gad­
type on 10 real client-side 
from iGoogle Gadget [9], including 
get [6], Google Finance Portfolios 
get [2], Google Search eBay [8] and Google Latitude 
Those mashups are all very popular, 
or even millions 
integrators, 
including 
AuctionReminder 
Following 
tiveness 
techniques. 
of users. The other half were from other 
[16], ImageLoop [10], 
[14] and Pingfm [11] . .  
the effec­
4.2) of our 
the study that evaluated 
4.1) and performance 
[1], Twitterfall 
we elaborate 
WalkJogRun 
(Section 
(Section 
[7]. 
with tens of thousands 
4.1. Effectiveness 
each 
objects 
in different 
web domains, 
our prototype 
accommodating 
account information. 
login 
user input and the text 
against 
tool to mark a set of 
including 
The experiment. To evaluate 
mashup, we first used our labeling 
sensitive 
boxes, the entries 
items including 
the operations 
scribed 
cept the APIs whose models were known to our prototypes, 
were analyzed 
ated in this way were utilized 
control 
Then, we performed 
such as login, as de­
ex­
by the DRG. The declassification 
in these operations, 
rules cre­
the two 
by the RM to enforce 
in Table 1. Scripts 
rules of our model. 
on the labeled 
involved 
objects, 
To evaluate 
the effectiveness 
of the enforcement, 
we per­
in which each mashup was 
object: 
analysis 
as sensitive. 
by the browser, 
with different  contents 
add-on that intercepts 
including 
in a labeled 
in these two runs, it 
was based upon Fire­
and records 
all the 
formed a differential 
executed  twice, 
if an output was found to be different 
was treated 
This analysis 
bug [34], a Firefox 
traffic generated 
(including 
In the experiment, 
we checked the Firebug log to find out the party to receive 
data. If the recipient 
beled object, 
totype blocked an attempt 
the log to determine 
a false positive 
was not in a same domain as the la­
Once our pro­
GET, POST and PUT) and XMLHt tpRequest. 
whether the data was sensitive. 
If not, 
whenever a sensitive 
data, we also checked 
output was found, 
a false negative 
was recorded. 
to transfer 
was logged. 
HTML requests 
mediated 
analysis 
sensitive 
discovered 
its sensitive 
information 
Among them, seven actually 
Findings. For each mashup, we found that our prototype 
successfully 
differential 
those mashups. 
data to the same domains. Only one was found to leak in­
formation 
all of them, but only blocked the last one. As a result, 
experiment 
The detailed 
flows. Our 
in eight of 
the 
reported 
outcomes 
domain. Our prototype 
zero false positive 
transferred 
and false negative. 
are described 
to a different 
identified 
outputs 
in Table 1. 
the 
Twitterfall 
and Pingfrn are the two mash ups that were 
not found to export any sensitive 
data. All their informa­
tion flows derived from user data were kept local, within 
the browser. Google Finance Portfolios 
seven that transferred 
information 
sensitive 
mains. What it did was delivery 
to the same do­
of the stock code we en-
is among the 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
257 
DSN 2010: Li et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:05:29 UTC from IEEE Xplore.  Restrictions apply. 
20lO IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
Mashup 
API 
Providers 
Operation 
Table 1 Effectiveness 
Labeled 
Test 
Result 
Objects 
API 
Model 
Log 
Output 
Input and 
Result Objects  Output Origins 
WalklogRun  GoogleMap 
IrnageLoop 
Facebook  Upload photo  Function 
dolmport  No Block No Leak 
Login 
Input box 
_trackPage 
View  Block  Leak 
User ID 
Different 
User  Photo Same 
Same 
Facebook Gadget  Facebook  Search friends Input box 
_gel 
No Block No Leak  Friends Name 
Gmail Google 
Gadget 
Gmail 
Open one mail 
Div 
No Block No Leak  Mail  Subject Same 
Google  Finance 
Portfolios 
Google Financial Add one stock  Input box 
No Block No Leak  Stock ID 
Same 
AuctionReminder Google Calendar Add one event Select Option 
No Block No Leak  Event Type 
Same 
Google Search 
eBay 
Twitterfall 
Pingfm 
eBay 
Search Goods  Input box 
No Block No Leak 
Item Name 
Same 
TWitter 
GoogleMap 
Facebook 
Twitter 
Search twitter Input box 
getLatLng No Block No Leak 
Type message Textarea 
No Block No Leak 
Google Latitude 
Set Location  Input box 
Google Contact 
GoogleMap 
getLatLng No Block No Leak 
User 
Address 
Same 
Case  Operation 
Overhead Only  Overhead 
Table 2 Performance 
AnalySIs 
Native and 
(/ls)  Monitor 
(Ils) 
Monitor 
(/ls) 
I 
2 
3 
4 
5 
6 
7 
8 
9 
Login 
66 
108 
63.64%  74.9  13.48% 
Upload  photo 575.8 II 18 
94.16%  687.6  19.42% 
Search friends 127 
221 
74.02%  162.7  28.11% 
Open one mail 99.2  154 
55.24%  110.2  11.09% 
Add one stock 9.5 
55 
478.95%  10.6  11.58% 
Add one event 14.7  39 
165.31%  17 
15.65% 
Search Goods  14.6  44 
201.37%  20.7  41.78% 
Search twitter 43.6  74 
69.72%  60.3  38.30% 
Type message 4.4 
12 
172.73%  6.1  38.64% 
10 
Set Location 4.1 
8 
95.12%  4.4  7.32% 
It required 
[16] is the one 
WalkJogRun 
user information. 
we found that a function 
tered to Google Financial. 
that leaked out sensitive 
use rid and password to log in. Once the login button 
was clicked, 
from the integra­
tor, accoutLogin, was triggered. 
authenticated 
the user input and sent the data to its web­
site, but also passed userid to _trackPageView, an 
API provided 
API showed that it would deliver 
(Urchin Collector Front-end) 
cross-domain operation 
was captured 
blocked according 
[4]. Our model for the 
the input to the UCFE 
domain. This 
by our prototype 
by Google Analytics 
[15], a different 
The function 
to the control 
not only 
rule. 
and 
sensitive 
we used included 
of DOM ac­
with it (sequences 
this case, the rule associated 
cess and function calls) 
labels across the script. 
ations, 
as illustrated 
mashup, and delays incurred 
experimental 
reported 
tiple runs and the computation 
a 2.00 GHz AMD Turion-PC 
Windows Vista and Firefox 
to propagate 
was applied 
In all three scenarios, 
in Table 2, were performed 
a set of oper­
within each 
by them were recorded. 
here were averaged 
The 
over mul­
platforms 
with 3 GB RAM, on which 
3.0.8 was installed. 
From Table 2, we can observe that a significant 
results 
overhead 
had to analyze a script: 
or 
the behavior 
we observed 
for "monitor 
the overhead 
used repeatedly 
when the prototype 
is first encountered, 
happens only when a script 
here ranges from 50% to 500%. This, 
never seen before. Mashups 
by users and their code rarely 
was incurred 
the delays reported 
however, 
when it exhibits 
are typically 
only" is 
changes. As a result, 
more likely to reflect the delay those users expe­
actually 
below 
the latencies 
rience. In this scenario, 
20% in six mashups, 30% in one and around 40% in the 
other three. Such an overhead 
is often completely 
over­
shadowed by other operation 
time. For example, 
book for 5 times, and found the delay the user experienced 
was only 2.9%, though the overhead 
alone was 13.48%. We also found that API models could 
greatly 
complicated 
ing its behaviors 
is that our prototype 
at all when no sensitive 
browser equipped 
sites with no sensitive 
any noticeable 
which is understandable, 
and monitor­
were avoided in this case. Another finding 
did not affect the operation 
were labeled: 
reduce the delays, 
operations 
of a browser 
we used the 
with Mash-IF to surf hundreds 
and did not experience 
for the login operation 
delays such as communication 
information, 
the login process 
for analyzing 
we measured 
objects 
scripts 
delay. 
of Face­
as many 
of web­
4.2. Performance 
The performance 
In the first one, which we call "native", 
of our prototype 
was evaluated 
the 
in a browser that did not include 
our 
under 
The second scenario, 
"analysis 
and mon­
three scenarios. 
mashup was executed 
implementation. 
itor", 
declassification 
flows. The third one, "monitor 
tion when a script analyzed 
statically 
rules generated 
involved 
analyzing 
scripts 
and utilizing 
the 
thereby 
to track information 
5. Related Work 
only", emulated 
before was executed 
the situa­
again. In 
Access  control 
domain access, 
in mashup. Mashups are built upon cross­
which runs contradictory 
to the Same Ori-
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
258 
DSN 20lO: Li et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:05:29 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
ports. The event hub here is a publish/subscribe 
recently. 
using a predefined 
a new ab­
studied 
that treats 
systems to protect 
and integrators. 
web pages as objects, 
Those relationships 
can also 
four trust relationships 
which has been intensively 
in our model. OMash [22] suggests 
the security 
A solution 
examples include MashupOS [39], OMash [22] 
the resources 
between con­
policy widely used in today's 
web 
to the problem is mediated cross­
gin Policy, 
browsers. 
domain access, 
Prominent 
and Smash [31]. MashupOS [39] applied the abstrac­
tions from operating 
within 
mashups and proposes 
tent providers 
be described 
straction 
method "getPubliclnterface ( )"  to expose its pub­
lic data. SMash [31] adopts an abstraction 
and communication 