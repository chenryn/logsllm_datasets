title:Finding User/Kernel Pointer Bugs with Type Inference
author:Robert Johnson and
David A. Wagner
USENIX Association
Proceedings of the
13th USENIX Security Symposium
San Diego, CA, USA
August 9–13, 2004
© 2004 by The USENIX Association
Phone: 1 510 528 8649
All Rights Reserved
FAX: 1 510 548 5738
Rights to individual papers remain with the author or the author's employer.
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Finding User/Kernel Pointer Bugs With Type Inference
Rob Johnson
David Wagner
University of California at Berkeley
Abstract
Today’s operating systems struggle with vulnerabil-
ities from careless handling of user space pointers.
User/kernel pointer bugs have serious consequences for
security: a malicious user could exploit a user/kernel
pointer bug to gain elevated privileges, read sensitive
data, or crash the system. We show how to detect
user/kernel pointer bugs using type-qualiﬁer inference,
and we apply this method to the Linux kernel using
CQUAL, a type-qualiﬁer inference tool. We extend the
basic type-inference capabilities of CQUAL to support
context-sensitivity and greater precision when analyz-
ing structures so that CQUAL requires fewer annota-
tions and generates fewer false positives. With these
enhancements, we were able to use CQUAL to ﬁnd 17
exploitable user/kernel pointer bugs in the Linux kernel.
Several of the bugs we found were missed by careful
hand audits, other program analysis tools, or both.
1 Introduction
Security critical programs must handle data from un-
trusted sources, and mishandling of this data can lead
to security vulnerabilities. Safe data-management is par-
ticularly crucial in operating systems, where a single bug
can expose the entire system to attack. Pointers passed
as arguments to system calls are a common type of un-
trusted data in OS kernels and have been the cause of
many security vulnerabilities. Such user pointers oc-
cur in many system calls, including, for example, read,
write, ioctl, and statfs. These user pointers must
be handled very carefully: since the user program and
operating system kernel reside in conceptually differ-
ent address spaces, the kernel must not directly derefer-
ence pointers passed from user space, otherwise security
holes can result. By exploiting a user/kernel bug, a ma-
licious user could take control of the operating system
by overwriting kernel data structures, read sensitive data
out of kernel memory, or simply crash the machine by
corrupting kernel data.
Kernel version Bugs found
Linux 2.4.20
Linux 2.4.23
11
10
Table 1: User/kernel bugs found by CQUAL. Each of
these bugs represents an exploitable security vulnerabil-
ity. Four bugs were common to both 2.4.20 and 2.4.23,
for a total of 17 unique bugs. Eight of the bugs in Linux
2.4.23 were also in Linux 2.5.63.
User/kernel pointer bugs are unfortunately all too com-
mon. In an attempt to avoid these bugs, the Linux pro-
grammers have created several easy-to-use functions for
accessing user pointers. As long as programmers use
these functions correctly, the kernel is safe. Unfortu-
nately, almost every device driver must use these func-
tions, creating thousands of opportunities for error, and
as a result, user/kernel pointer bugs are endemic. This
class of bugs is not unique to Linux. Every version of
Unix and Windows must deal with user pointers inside
the OS kernel, so a method for automatically checking
an OS kernel for correct user pointer handling would be
a big step in developing a provably secure and depend-
able operating system.
We introduce type-based analyses to detect and elimi-
nate user/kernel pointer bugs. In particular, we augment
the C type system with type qualiﬁers to track the prove-
nance of all pointers, and then we use type inference to
automatically ﬁnd unsafe uses of user pointers. Type
qualiﬁer inference provides a principled and semanti-
cally sound way of reasoning about user/kernel pointer
bugs.
We implemented our analyses by extending CQUAL[7],
a program veriﬁcation tool that performs type qualiﬁer
inference. With our tool, we discovered several pre-
viously unknown user/kernel pointer bugs in the Linux
kernel. In our experiments, we discovered 11 user/kernel
pointer bugs in Linux kernel 2.4.20 and 10 such bugs in
Linux 2.4.23. Four bugs were common to 2.4.20 and
2.4.23, for a total of 17 different bugs, and eight of these
17 were still present in the 2.5 development series. We
have conﬁrmed all but two of the bugs with kernel de-
velopers. All the bugs were exploitable.
We needed to make several signiﬁcant improvements to
CQUAL in order to reduce the number of false positives
it reports. First, we added a context-sensitive analysis
to CQUAL, which has reduced the number of false pos-
itives and the number of annotations required from the
programmer. Second, we improved CQUAL’s handling
of C structures by allowing ﬁelds of different instances
of a structure to have different types. Finally, we im-
proved CQUAL’s analysis of casts between pointers and
integers. Without these improvements, CQUAL reported
far too many false positives. These two improvements
reduce the number of warnings 20-fold and make the
task of using CQUAL on the Linux kernel manageable.
Our principled approach to ﬁnding user/kernel pointer
bugs contrasts with the ad-hoc methods used in
MECA[15], a prior tool that has also been used to ﬁnd
user/kernel pointer bugs. MECA aims for a very low
false positive rate, possibly at the cost of missing bugs;
in contrast, CQUAL aims to catch all bugs, at the cost of
more false positives. CQUAL’s semantic analysis pro-
vides a solid foundation that may, with further research,
enable the possibility of formal veriﬁcation of the ab-
sence of user/kernel pointer bugs in real OS’s.
All program analysis tools have false positives, but we
show that programmers can substantially reduce the
number of false positives in their programs by making
a few small stylistic changes to their coding style. By
following a few simple rules, programmers can write
code that is efﬁcient and easy to read, but can be au-
tomatically checked for security violations. These rules
reduce the likelihood of getting spurious warnings from
program veriﬁcation or bug-ﬁnding tools like CQUAL.
These rules are not speciﬁc to CQUAL and almost al-
ways have the beneﬁt of making programs simpler and
easier for the programmer to understand.
In summary, our main contributions are
• We introduce a semantically sound method for an-
alyzing user/kernel security bugs.
• We identify 17 new user/kernel bugs in several dif-
ferent versions of the Linux kernel.
• We show how to reduce false positives by an order
of magnitude, and thereby make type-based analy-
sis of user/kernel bugs practical, by enhancing ex-
isting type inference algorithms in several ways.
These improvements are applicable to any data-
ﬂow oriented program analysis tool.
Figure 1: The Linux virtual memory layout on 32-bit
architectures.
• We develop guidelines that programmers can fol-
low to further reduce the number of false positives
when using program veriﬁcation tools.
An extended version of this paper is available from the
authors’ web pages.
We begin by describing user/kernel pointer bugs in Sec-
tion 2. We then describe type qualiﬁer inference, and
our reﬁnements to this technique, in Section 3. Our ex-
perimental setup and results are presented in Sections 4
and 5, respectively. Section 6 discusses our false posi-
tive analysis and programming guidelines. We consider
other approaches in Section 7. Finally, we summarize
our results and give several directions for future work in
Section 8.
2 User/kernel Pointer Bugs
All Unix and Windows operating systems are suscepti-
ble to user pointer bugs, but we’ll explain them in the
context of Linux. On 32-bit computers, Linux divides
the virtual address space seen by user processes into two
sections, as illustrated in Figure 1. The virtual memory
space from 0 to 3GB is available to the user process. The
kernel executable code and data structures are mapped
into the upper 1GB of the process’ address space.
In
order to protect the integrity and secrecy of the kernel
code and data, the user process is not permitted to read
or write the top 1GB of its virtual memory. When a user
process makes a system call, the kernel doesn’t need to
change VM mappings, it just needs to enable read and
write access to the top 1GB of virtual memory. It dis-
ables access to the top 1GB before returning control to
the user process.
KernelUserUserUnmapped3GB04GBThis provides a conceptually clean way to prevent user
processes from accessing kernel memory directly, but
it imposes certain obligations on kernel programmers.
We will illustrate this with a toy example: suppose we
want to implement two new system calls, setint and
getint: 1
int x;
void sys_setint(int *p)
{
memcpy(&x, p, sizeof(x)); // BAD!
}
void sys_getint(int *p)
{
memcpy(p, &x, sizeof(x)); // BAD!
}
Imagine a user program which makes the system call
getint(buf);
In a well-behaved program, the pointer, buf, points to
a valid region of memory in the user process’ address
space and the kernel ﬁlls the memory pointed to by buf
with the value of x.
However, this toy example is insecure. The problem is
that a malicious process may try to pass an invalid buf
to the kernel. There are two ways buf can be invalid.
First, buf may point to unmapped memory in the user
process’ address space. In this case, the virtual address,
buf, has no corresponding physical address. If the ker-
nel attempts to copy x to the location pointed to by buf,
then the processor will generate a page fault. In some
circumstances, the kernel might recover. However, if the
kernel has disabled interrupts, then the page fault han-
dler will not run and, at this point, the whole computer
locks up. Hence the toy kernel code shown above is sus-
ceptible to denial-of-service attacks.
Alternatively, an attacker may attempt to pass a buf that
points into the kernel’s region of memory. The user pro-
cess cannot read or write to this region of memory, but
the kernel can. If the kernel blindly copies data to buf,
then several different attacks are possible:
• By setting buf to point to the kernel executable
code, the attacker can make the kernel overwrite
its own code with the contents of x. Since the user
can also set the value of x via legitimate calls to
setint, she can use this to overwrite the kernel
code with any new code of her choice. For exam-
ple, she could eliminate permission checking code
in order to elevate her privileges.
• The attacker can set buf to point to kernel data
structures that store her user id. By overwriting
these with all 0s, the attacker can gain root privi-
leges.
• By passing in random values for buf the attacker
can cause the kernel to crash.
The above examples show the importance of validating
a buffer pointer passed from user space before copying
data into that buffer. If the kernel forgets to perform this
check, then a malicious user gains control of the sys-
tem. In most cases, an attacker can exploit reads from
unchecked pointers, too.
Imagine an attacker making
the system call
setint(buf);
The kernel will copy 4 bytes from buf into x. An at-
tacker could point buf at kernel ﬁle buffers, and the ker-
nel would copy the contents of those ﬁle buffers into x.
At this point, the attacker can read the contents of the
ﬁle buffer out of x via a legitimate call to getint. With
a little luck, the user can use this attack to learn the con-
tents of /etc/shadow, or even the secret TLS key of the
local web server.
User/kernel pointer bugs are hard to detect during testing
because, in most cases, they succeed silently. As long
as user programs pass valid pointers to system calls, a
buggy system call implementation will work correctly.
Only a malicious program will uncover the bug.
The setint and getint functions shown above may
seem contrived, but two of the bugs we found effectively
implemented these two system calls (albeit not under
these names).
In order to avoid these errors, the Linux kernel con-
tains several user pointer access functions that kernel
developers are supposed to use instead of memcpy or
dereferencing user pointers directly. The two most
prominent of these functions are copy from user and
copy to user, which behave like memcpy but perform
the required safety checks on their user pointer argu-
ments. Correct implementations of setint and getint
would look like
int x;
void sys_setint(int *p)
{
copy_from_user(&x, p, sizeof(x));
}
void sys_getint(int *p)
{
copy_to_user(p, &x, sizeof(x));
}
As long as the user pointer access functions like
copy from user and copy to user are used correctly,
the kernel is safe. Unfortunately, Linux 2.4.20 has 129
system calls accepting pointers from user space as ar-
guments. Making matters worse, the design of some
system calls, like ioctl, require every device driver to
handle user pointers directly, as opposed to having the
system call interface sanitize the user pointers as soon
as they enter the kernel. Thus the Linux kernel has hun-
dreds of sources of user pointers and thousands of con-
sumers, all of which must be checked for correctness,
making manual auditing impossible.
This problem is not unique to Linux. For example,
FreeBSD has similar user buffer access functions. Even
though we have presented the problem in the context of
the Linux kernel VM setup, the same problem would
arise in other VM architectures, e.g. if the kernel was
direct mapped and processes lived in virtual memory.
The above discussion makes it clear that there are essen-
tially two disjoint kinds of pointers in the kernel:
User pointers: A pointer variable whose value is under
user control and hence untrustworthy.
Kernel pointers: A pointer variable whose value is un-
der kernel control and guaranteed by the kernel to
always point into the kernel’s memory space, and
hence is trustworthy.
User pointers should always be veriﬁed to refer to user-
level memory before being dereferenced.
In contrast,
kernel pointers do not need to be veriﬁed before being
dereferenced.
It is easy for programmers to make user pointer errors
because user pointers look just like kernel pointers—
they’re both of type “void *”. If user pointers had a
completely different type from kernel pointers, say
typedef struct {
void *p;
} user_pointer_t;
then it would be much easier for programmers to dis-
tinguish user and kernel pointers. Even better, if this
type were opaque, then the compiler could check that
the programmer never accidentally dereferenced a user
pointer. We could thus think of user pointers as an ab-
stract data type (ADT) where the only permitted op-
erations are copy {to,from} user, and then the type
system would enforce that user pointers must never be
dereferenced. This would prevent user/kernel pointer
bugs in a clean and principled way. The downside of
such an approach is that programmers can no longer do
simple, safe operations, like p++, on user pointers.
Fortunately, we can have all the advantages of typed
pointers without the inﬂexibility if we tweak the con-
cept slightly. All that’s really needed is a qualiﬁer on
pointer types to indicate whether they were passed from
user space or not. Consider, for example, the following
code:
int copy_from_user(void * kernel to,
void * user from,
int len);
int memcpy(void * kernel to,
void * kernel from,
int len);
int x;
void sys_setint(int * user p)
{
copy_from_user(&x, p, sizeof(x));
}
void sys_getint(int * user p)
{
memcpy(p, &x, sizeof(x));
}
In this example, kernel and user modify the basic
void * type to make explicit whether the pointer is
from user or kernel space. Notice that in the function