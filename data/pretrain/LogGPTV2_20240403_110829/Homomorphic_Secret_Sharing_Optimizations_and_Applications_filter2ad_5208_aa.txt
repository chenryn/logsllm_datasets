# Title: Homomorphic Secret Sharing: Optimizations and Applications

## Authors:
- Elette Boyle, IDC, Israel
- Geoffroy Couteau, DI ENS, CNRS, PSL Research University, Paris, France; INRIA
- Niv Gilboa, Ben Gurion University, Israel
- Yuval Ishai, Technion, Israel, and UCLA, USA
- Michele Orr√π, DI ENS, CNRS, PSL Research University, Paris, France; INRIA

## Abstract
We continue the study of Homomorphic Secret Sharing (HSS), recently introduced by Boyle et al. (Crypto 2016, Eurocrypt 2017). A (2-party) HSS scheme splits an input \( x \) into shares \( (x_0, x_1) \) such that:
1. Each share computationally hides \( x \).
2. There exists an efficient homomorphic evaluation algorithm \( \text{Eval} \) such that for any function \( P \) from a given class, it holds that \( \text{Eval}(x_0, P) + \text{Eval}(x_1, P) = P(x) \).

Boyle et al. show how to construct an HSS scheme for branching programs with inverse polynomial error using discrete-log type assumptions such as DDH. We make two types of contributions:

### Optimizations
- **Speed and Size Reductions**: We introduce new optimizations that speed up the previous implementation by more than a factor of 30, significantly reduce the share size, and decrease the rate of leakage induced by selective failure.
- **Key Generation and Ciphertext Size**: We describe a new protocol for distributing key generation in public-key HSS, eliminating a factor-2 computational overhead. We also suggest methods to reduce ciphertext size by approximately half, relying on a new entropic discrete-log type assumption.
- **Leakage Mitigation**: We propose several new methods to address input-dependent and key-dependent failures, reducing the effective leakage probability at a lower cost.

### Applications
- **Practical Feasibility**: Our optimizations are motivated by natural application scenarios where HSS is useful even for simple computations on short inputs. We demonstrate the practical feasibility of our HSS implementation in these contexts.
- **Secure MPC with Minimal Interaction**: Using public-key HSS, clients can outsource secure computations to two non-colluding servers with minimal interaction, making it particularly attractive for many simple computations on the same inputs.
- **Secure Data Access**: We use HSS to construct a 2-server variant of attribute-based encryption, a 2-server private RSS feed, and 2-server PIR schemes with general boolean queries. These applications benefit from the optimal output compactness of HSS, minimizing communication and computation.

## Keywords
Homomorphic Secret Sharing, Homomorphic Encryption, Private Information Retrieval, Secure Computation

## Introduction
Fully homomorphic encryption (FHE) [26, 42] is often viewed as a "dream tool" in cryptography, enabling arbitrary computations on encrypted inputs. In the context of secure multiparty computation (MPC) [6, 17, 31, 45], FHE can minimize communication and round complexity, shifting the bulk of the computational work to any subset of participants. However, despite recent progress, current FHE implementations [18, 24, 32] are still slow and require large ciphertexts and keys, making them less competitive with classical secure computation techniques like garbled circuits when considering both communication and computation costs.

### Homomorphic Secret Sharing
An alternative approach, Homomorphic Secret Sharing (HSS), was introduced by Boyle et al. [11] and further studied in [13]. HSS relaxes the traditional notion of FHE by allowing homomorphic evaluation to be distributed among two non-interactive parties. A (2-party) HSS scheme randomly splits an input \( x \) into shares \( (x_0, x_1) \) such that:
1. Each share computationally hides \( x \).
2. There exists a polynomial-time local evaluation algorithm \( \text{Eval} \) such that for any program \( P \), the output \( P(x) \) can be efficiently reconstructed from \( \text{Eval}(x_0, P) \) and \( \text{Eval}(x_1, P) \).

Unlike FHE, HSS allows for additive output representation, enabling ultimate compactness and efficiency in reconstruction. The main result of [11] is an HSS scheme for branching programs under the Decisional Diffie-Hellman (DDH) assumption. This scheme can be extended to a public-key variant, enabling homomorphic computations on inputs from multiple clients. The optimized variants from [13] rely on other discrete-log style assumptions, including a circular security assumption for ElGamal encryption.

### Key Advantages of HSS
- **Optimally Compact Output**: HSS enables applications where communication and computation costs need to be minimized, such as real-time notifications for mobile clients or generating correlated randomness for secure computation protocols.
- **Minimal Interaction**: HSS supports secure computation protocols with minimal interaction and collusion resistance, which cannot be achieved using classical MPC techniques.
- **Efficiency and Security**: HSS offers smaller keys and ciphertexts, lower startup costs, and better protection against traffic analysis attacks.

### Our Contribution
- **Optimizations**:
  - **Computational Optimizations**: A modified share conversion procedure reduces the expected computational cost by a factor of 16 or more.
  - **Improved Key Generation**: A new protocol eliminates a factor-2 computational overhead in key generation.
  - **Ciphertext Size Reduction**: Methods to reduce ciphertext size by approximately half, using a new entropic discrete-log type assumption.
  - **Leakage Mitigation**: New methods to address input-dependent and key-dependent failures, reducing the effective leakage probability.
- **Applications**:
  - **Secure MPC with Minimal Interaction**: Clients can outsource secure computations to two non-colluding servers with minimal interaction.
  - **Secure Data Access**: Applications include 2-server attribute-based encryption, private RSS feeds, and PIR schemes, benefiting from the optimal output compactness of HSS.

## Conclusion
Our work extends the efficiency and applicability of group-based HSS, demonstrating its practical feasibility in various natural application scenarios. We provide concrete efficiency estimates and highlight the unique advantages of HSS over existing FHE and classical MPC techniques.

## Acknowledgments
We thank the reviewers for their valuable feedback and suggestions.

## References
[References to be included here]

---

This revised version aims to enhance clarity, coherence, and professionalism while maintaining the original content and structure.