counters createdby users. After its creation, asequencecan be assignedto a table asa column
DEFAULT. Usingsequences,uniquenumberscanbeautomaticallyassignedduringINSERT.
82 CHAPTER7. NUMBERINGROWS
Function Action
nextval(’name’) Returnsthenextavailablesequencenumber,andupdatesthecounter
currval(’name’) Returnsthesequencenumberfromthepreviousnextval()call
setval(’name’,newval) Setsthesequencenumbercountertothespecifiedvalue
Table7.1: Sequencenumberaccessfunctions
The advantageof sequencesis that they avoid gaps in numeric assignment, as happens with
OIDs.5 Sequences are ideal for use as user-visible identification numbers. If one customer is
created today, and another is created tomorrow, then the two customers will have sequential
numbersbecausenoothertablesharesthesequencecounter.6
Sequencenumbersaregenerallyuniqueonlywithinasingletable. Forexample,ifatablehas
auniquerownumbered937,anothertablemighthavearownumbered937aswell,assignedbya
differentsequencecounter.
7.4 Creating Sequences
Sequencesarenot createdautomatically,likeOIDs. Instead,youmustusetheCREATESEQUENCE
command. Threefunctionscontrolthesequencecounter,asshowninTable7.1.
Figure 7.3 shows an example of sequence creation and sequence function usage. The first
commandcreatesthesequence,thenvarioussequencefunctionsarecalled. NotethattheSELECTs
do not include a FROM clause. Sequence function calls are not directly tied to any table. In the
figure:
• nextval()returnsever-increasingvalues.
• currval()returnstheprevioussequencevaluewithoutincrementing.
• setval()setsthesequencecountertoanewvalue.
Currval() returns the sequence number assignedby a prior nextval() call in the current session.
It is not affected by the nextval() calls of other users, which allows reliable retrieval of nextval()
assignedvaluesinlaterqueries.
7.5 Using Sequences to Number Rows
Configuringasequencetouniquelynumberrowsinvolvesseveralsteps:
5Thisisnotcompletelyaccurate. Gapscanoccurifaqueryisassignedasequencenumberaspartofanabortedtransaction.
SeeSection10.2foradescriptionofabortedtransactions.
6Tablescanbeconfiguredtosharesequencecounters,ifdesired.
7.5. USINGSEQUENCESTONUMBERROWS 83
test=> CREATE SEQUENCE functest_seq;
CREATE
test=> SELECT nextval(’functest_seq’);
nextval
---------
1
(1 row)
test=> SELECT nextval(’functest_seq’);
nextval
---------
2
(1 row)
test=> SELECT currval(’functest_seq’);
currval
---------
2
(1 row)
test=> SELECT setval(’functest_seq’, 100);
setval
--------
100
(1 row)
test=> SELECT nextval(’functest_seq’);
nextval
---------
101
(1 row)
Figure7.3: Examplesofsequencefunctionuse
84 CHAPTER7. NUMBERINGROWS
test=> CREATE SEQUENCE customer_seq;
CREATE
test=> CREATE TABLE customer (
test(> customer_id INTEGER DEFAULT nextval(’customer_seq’),
test(> name CHAR(30)
test(> );
CREATE
test=> INSERT INTO customer VALUES (nextval(’customer_seq’), ’Bread Makers’);
INSERT 19004 1
test=> INSERT INTO customer (name) VALUES (’Wax Carvers’);
INSERT 19005 1
test=> INSERT INTO customer (name) VALUES (’Pipe Fitters’);
INSERT 19008 1
test=> SELECT * FROM customer;
customer_id | name
-------------+--------------------------------
1 | Bread Makers
2 | Wax Carvers
3 | Pipe Fitters
(3 rows)
Figure7.4: Numberingcustomerrowsusingasequence
1. Createthesequence.
2. Createthetable,definingnextval()asthecolumndefault.
3. DuringtheINSERT,donotsupplyavalueforthesequencedcolumn,orusenextval().
Figure 7.4 shows the use of a sequence for unique row numbering in the customer table. The
first statement creates a sequence counter named customer_seq. The second command creates
the customer table, and definesnextval(’customer_seq’) asthe defaultfor the customer_idcolumn.
The first INSERT manually supplies the sequence value for the column. The nextval(’customer_-
seq’) function call will return the next available sequence number, and increment the sequence
counter. The second and third INSERTs allow the nextval(’customer_seq’) DEFAULT to be used for
the customer_id column. Remember, acolumn’s DEFAULTvalueis usedonly when avalueis not
supplied by an INSERT statement. (This is covered in Section 4.4.) The SELECTshows that the
customerrowshavebeensequentiallynumbered.
7.6. SERIALCOLUMNTYPE 85
test=> CREATE TABLE customer (
test(> customer_id SERIAL,
test(> name CHAR(30)
test(> );
NOTICE: CREATE TABLE will create implicit sequence ’customer_customer_id_-
seq’ for SERIAL column ’customer.customer_id’
NOTICE: CREATE TABLE/UNIQUE will create implicit index ’customer_customer_id_-
key’ for table ’customer’
CREATE
test=> \d customer
Table "customer"
Attribute | Type | Extra
-------------+----------+------------------------------------------------------------
customer_id | int4 | not null default nextval(’customer_customer_id_seq’::text)
name | char(30) |
Index: customer_customer_id_key
test=> INSERT INTO customer (name) VALUES (’Car Wash’);
INSERT 19152 1
test=> SELECT * FROM customer;
customer_id | name
-------------+--------------------------------
1 | Car Wash
(1 row)
Figure7.5: ThecustomertableusingSERIAL
7.6 Serial Column Type
An eveneasier way to use sequencesexists. If you define a column of type SERIAL, a sequence
will be automatically created, and a proper DEFAULT will be assigned to the column. Figure 7.5
shows an example. The first NOTICE line indicates that a sequence was created for the SERIAL
column. DonotbeconcernedaboutthesecondNOTICElineinthefigure. (Indexesarecoveredin
Section11.1.)
7.7 Manually Numbering Rows
Some people wonder why OIDs and sequencesare neededat all. Why can’t a databaseuser just
find the highest number in use, add one, and use the result as the new unique row number? In
reality,OIDsandsequencesarepreferredforseveralreasons:
86 CHAPTER7. NUMBERINGROWS
• Performance
• Concurrency
• Standardization
First, it is usually a slow process to scan all numbers currently in use to find the next available
number. Referringtoacounterinaseparatelocationisfaster. Second,ifoneusergetsthehighest
number,andanotheruserislookingforthehighestnumberatthesametime,thetwousersmight
choosethesamenext-availablehighestnumber. Ofcourse,inthiscase,thenumberwouldnotbe
unique. SuchconcurrencyproblemsdonotoccurwhenusingOIDsorsequences. Third,itismore
reliable to use database-supplied unique number generation than to generate unique numbers
manually.
7.8 Summary
BothOIDsandsequencesallowtheautomaticuniquenumberingofrows. OIDsarealwayscreated
and numbered, while sequences require more work to configure. Both are valuable tools for
uniquelynumberingrows.
Chapter 8
Combining S s
ELECT
So far, this book has covered topics such as regular expressions, aggregates, and joins. These
powerfulSQL features allowthe construction of complex queries. In some cases,however, even
thesetools may prove inadequate. This chaptershows how SELECTscan be combined to create
evenmorepowerfulqueries.
8.1 UNION, EXCEPT, and INTERSECT Clauses
Sometimes a single SELECT statement cannot produce the desired result. UNION, EXCEPT, and
INTERSECT allow SELECT statements to be chained together, enabling the construction of more
complexqueries.
Forexample,supposewewanttooutputthefriendtable’sfirstnameandlastnameinthesame
column. Normally, two queries would be required, one for each column.With UNION, however,
theoutput oftwoSELECTscanbecombinedinasinglequery,asshowninFigure 8.1. Thequery
combinestwocolumnsintoasingleoutputcolumn.
UNION allowsanunlimitednumber of SELECTstatementsto be combinedto produceasingle
result. Each SELECTmust return the same number of columns. If the first SELECTreturns two
columns, the other SELECTsmust return two columns as well. The column types must also be
similar. IfthefirstSELECTreturnsanINTEGERvalueinthefirstcolumn,theotherSELECTsmust
returnanINTEGERintheirfirstcolumns,too.
WithUNION,anORDERBYclausecanbeusedonlyattheendofthelastSELECT. Theordering
appliestotheoutputoftheentirequery. InFigure8.1,theORDERBYclausespecifiestheordering
columnbynumber. Insteadofanumber,wecoulduseORDER BY firstnamebecauseUNION’soutput
labelsarethesameasthecolumnlabelsofthefirstSELECT.
Asanotherexample,supposewehavetwotablesthatholdinformationaboutvariousanimals.
One table holds information about aquatic animals, and the other contains data about terrestrial
animals. Two tables are used because each records information specific to one class of animal.
The aquatic_animal table holds information meaningful only for aquatic animals, like preferred
87
88 CHAPTER8. COMBININGSELECTS
test=> SELECT firstname
test-> FROM friend
test-> UNION
test-> SELECT lastname
test-> FROM friend
test-> ORDER BY 1;
firstname
----------------------
Dean
Dick
Gleason
Millstone
Ned
Sandy
Tabor
Victor
Weber
Yeager
(10 rows)
Figure8.1: CombiningtwocolumnswithUNION
water temperature. The terrestrial_animal table holds information meaningfulonly for terrestrial
animals, like running speed. We could have included the animals in the same table, but keeping
themseparatewasclearer. Inmostcases,wewilldealwiththeanimaltypesseparately.
Suppose we needto list allof the animals, both aquaticand terrestrial. No singleSELECTcan
showtheanimalsfrombothtables. Wecannotjointhetablesbecausenojoinkeyexists;joiningis
notdesired. Instead,wewantrowsfromtheterrestrial_animaltableandtheaquatic_animaltable
outputtogetherinasinglecolumn. Figure8.2showshowthesetwotablescanbecombinedwith
UNION.
Bydefault,UNIONpreventsduplicaterowsfrombeingdisplayed. Forexample,Figure8.3inserts
penguinintobothtables,butpenguinisnotduplicatedintheoutput. Topreserveduplicates,you
mustuseUNIONALL,asshowninFigure8.4.
YoucanperformmorecomplexoperationsbychainingSELECTs. EXCEPTallowsallrowstobe
returnedfrom the firstSELECTexceptrows that appearin the secondSELECT. Figure 8.5 shows
anEXCEPTquery. Althoughtheaquatic_animaltablecontainsswordfishandpenguin,thequeryin
Figure8.5returnsonlyswordfish. Thepenguinisexcludedfromtheoutputbecauseitisreturned
bythesecondquery. WhileUNIONaddsrowstothefirstSELECT,EXCEPTsubtractsrowsfromit.
INTERSECTreturnsonlyrowsgeneratedbyallSELECTs. Figure8.6usesINTERSECTtodisplay
onlypenguin. WhileseveralanimalsarereturnedbythetwoSELECTs,onlypenguinisreturnedby
bothSELECTs.
You can link any number of SELECTs using these methods. The previous examples allowed
8.1. UNION,EXCEPT,ANDINTERSECTCLAUSES 89
test=> INSERT INTO terrestrial_animal (name) VALUES (’tiger’);
INSERT 19122 1
test=> INSERT INTO aquatic_animal (name) VALUES (’swordfish’);
INSERT 19123 1
test=> SELECT name
test-> FROM aquatic_animal
test-> UNION
test-> SELECT name
test-> FROM terrestrial_animal;
name
--------------------------------
swordfish
tiger
(2 rows)
Figure8.2: CombiningtwotableswithUNION
test=> INSERT INTO aquatic_animal (name) VALUES (’penguin’);
INSERT 19124 1
test=> INSERT INTO terrestrial_animal (name) VALUES (’penguin’);
INSERT 19125 1
test=> SELECT name
test-> FROM aquatic_animal
test-> UNION
test-> SELECT name
test-> FROM terrestrial_animal;
name
--------------------------------
penguin
swordfish
tiger
(3 rows)
Figure8.3: UNIONwithduplicates
90 CHAPTER8. COMBININGSELECTS
test=> SELECT name
test-> FROM aquatic_animal
test-> UNION ALL
test-> SELECT name
test-> FROM terrestrial_animal;
name
--------------------------------
swordfish
penguin
tiger
penguin
(4 rows)
Figure8.4: UNIONALLwithduplicates
test=> SELECT name
test-> FROM aquatic_animal
test-> EXCEPT
test-> SELECT name
test-> FROM terrestrial_animal;
name
--------------------------------
swordfish
(1 row)
Figure8.5: EXCEPTrestrictsoutputfromthefirstSELECT
8.2. SUBQUERIES 91
test=> SELECT name
test-> FROM aquatic_animal
test-> INTERSECT
test-> SELECT name
test-> FROM terrestrial_animal;
name
--------------------------------
penguin
(1 row)
Figure8.6: INTERSECTreturnsonlyduplicatedrows
multiple columns to occupy a single result column. Without the ability to chain SELECTs using
UNION,EXCEPT,andINTERSECT,itwouldbeimpossibletogeneratesomeoftheseresults. SELECT
chaining can enable other sophisticated operations, such as joining a column to one table in the
firstSELECT,thenjoiningthesamecolumntoanothertableinthesecondSELECT.
8.2 Subqueries
SubqueriesaresimilartoSELECTchaining. WhileSELECTchainingcombinesSELECTsonthesame
levelina query,however, subqueriesallowSELECTsto beembeddedinsideother queries. They
canperformseveralfunctions:
• Theycantaketheplaceofaconstant.
• Theycantaketheplaceofaconstantyetvarybasedontherowbeingprocessed.
• Theycanreturnalistofvaluesforuseinacomparison.
Subqueriescanbequitecomplicated. Ifyouhavetroubleunderstandingthissection,skipoverit
andreturntoitlater.
Subqueries as Constants
A subquery, also called a subselect, can replace a constant in a query. While a constant never
changes,asubquery’svalueiscomputedeverytimethequeryisexecuted.
Asanexample,let’susethefriendtablefromthepreviouschapters. Supposewewanttofind
friendswhoarenotinthesamestateasDickGleason. Wecouldplacehisstateinthequeryusing