### 3.5.9 PRAGMA EXCEPTION_INIT

The `PRAGMA EXCEPTION_INIT` associates a user-defined error code with an exception. This declaration can be included in any block, sub-block, or package. You can only assign an error code to an exception after declaring the exception. The format of a `PRAGMA EXCEPTION_INIT` declaration is:

```sql
PRAGMA EXCEPTION_INIT(exception_name, {exception_number | exception_code});
```

- **exception_name**: The name of the associated exception.
- **exception_number**: A user-defined error code associated with the pragma. If you specify an unmapped `exception_number`, the server will return a warning.
- **exception_code**: The name of a pre-defined exception. For a complete list of valid exceptions, see the Postgres core documentation available at: [PostgreSQL Error Codes](https://www.postgresql.org/docs/11/static/errcodes-appendix.html).

#### Example: User-Defined Exception with PRAGMA EXCEPTION_INIT

The following example demonstrates declaring a user-defined exception in a package and associating it with a specific error code using `PRAGMA EXCEPTION_INIT`.

```sql
CREATE OR REPLACE PACKAGE ar AS
    overdrawn EXCEPTION;
    PRAGMA EXCEPTION_INIT (overdrawn, -20100);
    
    PROCEDURE check_balance(p_balance NUMBER, p_amount NUMBER);
END;

CREATE OR REPLACE PACKAGE BODY ar AS
    PROCEDURE check_balance(p_balance NUMBER, p_amount NUMBER) IS
    BEGIN
        IF (p_amount > p_balance) THEN
            RAISE overdrawn;
        END IF;
    END;
END;
```

#### Example: Handling Overdrawn Exception

The following procedure (`purchase`) calls the `check_balance` procedure. If `p_amount` is greater than `p_balance`, `check_balance` raises an exception, and `purchase` catches the `ar.overdrawn` exception.

```sql
CREATE PROCEDURE purchase(customerID INT, amount NUMERIC) AS
BEGIN
    ar.check_balance(getcustomerbalance(customerID), amount);
    record_purchase(customerID, amount);
EXCEPTION
    WHEN ar.overdrawn THEN
        DBMS_OUTPUT.PUT_LINE('This account is overdrawn.');
        DBMS_OUTPUT.PUT_LINE('SQLCode :' || SQLCODE || ' ' || SQLERRM);
END;
```

When `ar.check_balance` raises an exception, execution jumps to the exception handler defined in `purchase`. The exception handler returns an error message, followed by `SQLCODE` information:

```
This account is overdrawn.
SQLCode: -20100 User-Defined Exception
```

#### Example: Using Pre-Defined Exception

The following example demonstrates using a pre-defined exception. The code creates a more meaningful name for the `no_data_found` exception. If the given customer does not exist, the code catches the exception, reports the error, and then re-raises the original exception.

```sql
CREATE OR REPLACE PACKAGE ar AS
    unknown_customer EXCEPTION;
    PRAGMA EXCEPTION_INIT (unknown_customer, no_data_found);
    
    PROCEDURE check_balance(p_customer_id NUMBER);
END;

CREATE OR REPLACE PACKAGE BODY ar AS
    PROCEDURE check_balance(p_customer_id NUMBER) IS
        v_balance NUMBER;
    BEGIN
        SELECT balance INTO v_balance FROM customer WHERE cust_id = p_customer_id;
    EXCEPTION
        WHEN unknown_customer THEN
            DBMS_OUTPUT.PUT_LINE('Invalid customer id');
            RAISE;
    END;
END;
```

### 3.5.10 RAISE_APPLICATION_ERROR

The `RAISE_APPLICATION_ERROR` procedure allows a developer to intentionally abort processing within an SPL program by causing an exception. The exception is handled in the same manner as described in Section 3.5.7. Additionally, `RAISE_APPLICATION_ERROR` makes a user-defined code and error message available to the program, which can then be used to identify the exception.

```sql
RAISE_APPLICATION_ERROR(error_number, message);
```

- **error_number**: An integer value or expression that is returned in a variable named `SQLCODE` when the procedure is executed. `error_number` must be a value between -20000 and -20999.
- **message**: A string literal or expression that is returned in a variable named `SQLERRM`.

#### Example: Using RAISE_APPLICATION_ERROR

The following example uses the `RAISE_APPLICATION_ERROR` procedure to display a different code and message depending on the missing information from an employee.

```sql
CREATE OR REPLACE PROCEDURE verify_emp(p_empno NUMBER) AS
    v_ename emp.ename%TYPE;
    v_job emp.job%TYPE;
    v_mgr emp.mgr%TYPE;
    v_hiredate emp.hiredate%TYPE;
BEGIN
    SELECT ename, job, mgr, hiredate
    INTO v_ename, v_job, v_mgr, v_hiredate
    FROM emp
    WHERE empno = p_empno;

    IF v_ename IS NULL THEN
        RAISE_APPLICATION_ERROR(-20010, 'No name for ' || p_empno);
    END IF;

    IF v_job IS NULL THEN
        RAISE_APPLICATION_ERROR(-20020, 'No job for ' || p_empno);
    END IF;

    IF v_mgr IS NULL THEN
        RAISE_APPLICATION_ERROR(-20030, 'No manager for ' || p_empno);
    END IF;

    IF v_hiredate IS NULL THEN
        RAISE_APPLICATION_ERROR(-20040, 'No hire date for ' || p_empno);
    END IF;

    DBMS_OUTPUT.PUT_LINE('Employee ' || p_empno || ' validated without errors');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
END;
```

The following shows the output in a case where the manager number is missing from an employee record.

```sql
EXEC verify_emp(7839);
```

Output:
```
SQLCODE: -20030
SQLERRM: EDB-20030: No manager for 7839
```

### 3.6 Transaction Control

In some scenarios, it is necessary to ensure that all updates to a database occur successfully, or none at all if any error occurs. A set of database updates that are to all occur successfully as a single unit, or not at all, is called a transaction.

#### Example: Banking Transaction

A common example in banking is a funds transfer between two accounts. The two parts of the transaction are the withdrawal of funds from one account and the deposit of the funds into another account. Both parts of this transaction must occur; otherwise, the bankâ€™s books will be out of balance. The deposit and withdrawal are one transaction.

An SPL application can be created that uses a style of transaction control compatible with Oracle databases if the following conditions are met:
- The `edb_stmt_level_tx` parameter must be set to `TRUE`. This prevents the action of unconditionally rolling back all database updates within the `BEGIN/END` block if any exception occurs.
- The application must not be running in autocommit mode. If autocommit mode is on, each successful database update is immediately committed and cannot be undone.

#### Transaction Control in SPL

A transaction begins when the first SQL command is encountered in the SPL program. All subsequent SQL commands are included as part of that transaction. The transaction ends when one of the following occurs:
- An unhandled exception occurs, and the effects of all database updates made during the transaction are rolled back.
- A `COMMIT` command is encountered, and the effect of all database updates made during the transaction becomes permanent.
- A `ROLLBACK` command is encountered, and the effects of all database updates made during the transaction are rolled back.
- Control returns to the calling application, and the action of the application determines whether the transaction is committed or rolled back unless the transaction is within a block in which `PRAGMA AUTONOMOUS_TRANSACTION` has been declared.

Note: Unlike Oracle, DDL commands such as `CREATE TABLE` do not implicitly occur within their own transaction. Therefore, DDL commands do not automatically cause an immediate database commit, and DDL commands may be rolled back just like DML commands.

A transaction may span one or more `BEGIN/END` blocks, or a single `BEGIN/END` block may contain one or more transactions.

### 3.6.1 COMMIT

The `COMMIT` command makes all database updates made during the current transaction permanent and ends the current transaction.

```sql
COMMIT [ WORK ];
```

The `COMMIT` command may be used within anonymous blocks, stored procedures, or functions. It may appear in the executable section and/or the exception section.

#### Example: Committing Transactions

In the following example, the third `INSERT` command in the anonymous block results in an error. The effect of the first two `INSERT` commands is retained, even after issuing a `ROLLBACK` command.

```sql
\set AUTOCOMMIT off
SET edb_stmt_level_tx TO on;

BEGIN
    INSERT INTO dept VALUES (50, 'FINANCE', 'DALLAS');
    INSERT INTO dept VALUES (60, 'MARKETING', 'CHICAGO');
    COMMIT;
    INSERT INTO dept VALUES (70, 'HUMAN RESOURCES', 'CHICAGO');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;

-- Output
SQLERRM: value too long for type character varying(14)
SQLCODE: 22001

SELECT * FROM dept;
-- Output
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | FINANCE | DALLAS
60 | MARKETING | CHICAGO
(6 rows)

ROLLBACK;

SELECT * FROM dept;
-- Output
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | FINANCE | DALLAS
60 | MARKETING | CHICAGO
(6 rows)
```

### 3.6.2 ROLLBACK

The `ROLLBACK` command undoes all database updates made during the current transaction and ends the current transaction.

```sql
ROLLBACK [ WORK ];
```

The `ROLLBACK` command may be used within anonymous blocks, stored procedures, or functions. It may appear in the executable section and/or the exception section.

#### Example: Rolling Back Transactions

In the following example, the exception section contains a `ROLLBACK` command. Even though the first two `INSERT` commands are executed successfully, the third results in an exception that causes the rollback of all the `INSERT` commands in the anonymous block.

```sql
\set AUTOCOMMIT off
SET edb_stmt_level_tx TO on;

BEGIN
    INSERT INTO dept VALUES (50, 'FINANCE', 'DALLAS');
    INSERT INTO dept VALUES (60, 'MARKETING', 'CHICAGO');
    INSERT INTO dept VALUES (70, 'HUMAN RESOURCES', 'CHICAGO');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;

-- Output
SQLERRM: value too long for type character varying(14)
SQLCODE: 22001

SELECT * FROM dept;
-- Output
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
(4 rows)
```

#### Example: Complex Transaction with COMMIT and ROLLBACK

The following stored procedure inserts a new employee.

```sql
\set AUTOCOMMIT off
SET edb_stmt_level_tx TO on;

CREATE OR REPLACE PROCEDURE emp_insert (
    p_empno IN emp.empno%TYPE,
    p_ename IN emp.ename%TYPE,
    p_job IN emp.job%TYPE,
    p_mgr IN emp.mgr%TYPE,
    p_hiredate IN emp.hiredate%TYPE,
    p_sal IN emp.sal%TYPE,
    p_comm IN emp.comm%TYPE,
    p_deptno IN emp.deptno%TYPE
) IS
BEGIN
    INSERT INTO emp VALUES (
        p_empno,
        p_ename,
        p_job,
        p_mgr,
        p_hiredate,
        p_sal,
        p_comm,
        p_deptno
    );
    DBMS_OUTPUT.PUT_LINE('Added employee...');
    DBMS_OUTPUT.PUT_LINE('Employee # : ' || p_empno);
    DBMS_OUTPUT.PUT_LINE('Name : ' || p_ename);
    DBMS_OUTPUT.PUT_LINE('Job : ' || p_job);
    DBMS_OUTPUT.PUT_LINE('Manager : ' || p_mgr);
    DBMS_OUTPUT.PUT_LINE('Hire Date : ' || p_hiredate);
    DBMS_OUTPUT.PUT_LINE('Salary : ' || p_sal);
    DBMS_OUTPUT.PUT_LINE('Commission : ' || p_comm);
    DBMS_OUTPUT.PUT_LINE('Dept # : ' || p_deptno);
    DBMS_OUTPUT.PUT_LINE('----------------------');
END;
```

Note that this procedure has no exception section, so any error that may occur is propagated up to the calling program.

The following anonymous block is run. Note the use of the `COMMIT` command after all calls to the `emp_insert` procedure and the `ROLLBACK` command in the exception section.

```sql
BEGIN
    emp_insert(9601, 'FARRELL', 'ANALYST', 7902, '03-MAR-08', 5000, NULL, 40);
    emp_insert(9602, 'TYLER', 'ANALYST', 7900, '25-JAN-08', 4800, NULL, 40);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('An error occurred - roll back inserts');
        ROLLBACK;
END;

-- Output
Added employee...
Employee # : 9601
Name : FARRELL
Job : ANALYST
Manager : 7902
Hire Date : 03-MAR-08
Salary : 5000
Commission : 
Dept # : 40
----------------------
Added employee...
Employee # : 9602
Name : TYLER
Job : ANALYST
Manager : 7900
Hire Date : 25-JAN-08
Salary : 4800
Commission : 
Dept # : 40
----------------------
```

---

Copyright Â© 2007 - 2018 EnterpriseDB Corporation. All rights reserved.