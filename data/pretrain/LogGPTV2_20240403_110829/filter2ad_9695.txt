# 漏洞描述
GitLab 是一个开源的仓库管理系统，使用 Git 作为代码管理工具，并通过 Web 界面提供对公开或私人项目的访问。在 GitLab 社区版（CE）和企业版（EE）的特定版本中（14.7 至 14.7.7、14.8 至 14.8.5 和 14.9 至 14.9.2），当使用 OmniAuth 提供商（如 OAuth、LDAP 或 SAML）进行账户注册时，系统为这些账户设置了硬编码密码。这可能导致攻击者能够控制相关账户。

# 受影响版本
- GitLab CE/EE: 14.7 到 14.7.7
- GitLab CE/EE: 14.8 到 14.8.5
- GitLab CE/EE: 14.9 到 14.9.2

# 攻击过程概述
1. **初始化请求**：向 GitHub 发送 POST 请求以获取授权码。
   - `client_id`：在 `gitlab.rb` 中配置的应用 ID。
   - `redirect_uri`：用户授权后重定向的目标 URL，必须与在 GitHub OAuth 应用设置中的回调 URL 匹配。
   - `response_type`：固定值 "code"，指示所需的响应类型。
   - `scope`：权限范围，例如 "user:email"。
   - `state`：用于防止 CSRF 攻击的一个不可预测的随机字符串。

2. **遇到的问题**：如果 GitLab 的 `redirect_uri` 与 GitHub 上设置的回调 URL 不一致，则会引发错误。
   - GitHub 回调 URL 示例：`http://127.0.0.1:8080/users/auth/github/callback`
   - 实际使用的 `redirect_uri`：`http://gitlab/users/auth/github/callback`

3. **尝试解决方案**：将 GitHub 的回调 URL 修改为与 GitLab 中实际使用的 `redirect_uri` 相同，尽管这种方法看似不合理。

4. **继续测试**：
   - 返回 GitLab 登录页面并选择 GitHub 登录选项，跳转至授权界面。
   - 完成授权后，GitHub 将重定向回指定的 `redirect_uri` 并附带 `code` 和 `state` 参数。
   - 遇到 502 错误，但成功接收到了必要的参数 (`code` 和 `state`)。

5. **最终步骤**：手动调整请求以模拟 OAuth2 流程中的后续步骤，特别是访问令牌交换阶段。此过程中发现需要管理员审批的新用户账号，并通过激活该账号完成整个流程。

# 修复建议
官方已经针对上述漏洞发布了补丁。建议所有受影响的 GitLab 用户在确保数据安全备份的前提下尽快升级至最新版本。

# 注意事项
- 新注册用户的默认用户名基于其 GitHub 账户名。
- 默认密码为 "123qweQWE!@#000000000"。强烈建议立即更改此密码。

# 参考资料
[此处添加具体的参考链接或文档]