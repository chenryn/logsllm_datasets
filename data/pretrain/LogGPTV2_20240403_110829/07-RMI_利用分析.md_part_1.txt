2020/7/27 RMI 利⽤分析
RMI 利⽤分析
原创 队员编号007 酒仙桥六号部队 5⽉16⽇
这是 酒仙桥六号部队 的第 7 篇⽂章。
全⽂共计4888个字，预计阅读时⻓14分钟。
前提了解
01
JNDI
JNDI(Java Naming and Directory Interface,Java命名和⽬录接⼝)是SUN公
司提供的⼀种标准的Java命名系统接⼝，JNDI提供统⼀的客户端API，通过不同的
访问提供者接⼝JNDI服务供应接⼝(SPI)的实现，由管理者将JNDI API映射为特定
的命名服务和⽬录系统，使得Java应⽤程序可以和这些命名服务和⽬录服务之间进
⾏交互。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 1/34
2020/7/27 RMI 利⽤分析
02
JRMP
Java远程⽅法协议（英语：Java Remote Method Protocol，JRMP）是特定于Java
技术的、⽤于查找和引⽤远程对象的协议。这是运⾏在Java远程⽅法调⽤（RMI）之下、
TCP/IP之上的线路层协议。
03
RMI
Java远程⽅法调⽤，即Java RMI（Java Remote Method Invocation）是Java编程语
⾔⾥，⼀种⽤于实现远程过程调⽤的应⽤程序编程接⼝。它使客户机上运⾏的程序可以调
⽤远程服务器上的对象。远程⽅法调⽤特性使Java编程⼈员能够在⽹络环境中分布操作。
RMI全部的宗旨就是尽可能简化远程接⼝对象的使⽤。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 2/34
2020/7/27 RMI 利⽤分析
04
JDK关键版本
RMI攻击向量
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 3/34
2020/7/27 RMI 利⽤分析
01
RMI Serialization Attack
注意：此Demo没有版本限制，但部分逻辑会由于版本原因造成出⼊。
Demo
with JDK 1.8.0_151
with java-rmi-server/ rmi.RMIServer、Services、PublicKnown
with java-rmi-client/ rmi.RMIClient 、 Services 、 ServicesImpl 、
PublicKnown
PS：低版本⽆法在RegistryImpl_Skel下有效断点。
分析
两种 bind 区别
Server  RMI Registry  Client
server 通 过 bind 注 册 服 务 时 会 进 ⾏ 序 列 化 传 输 服 务 名 &Ref ， 因 此 会 进 ⼊
RegistryImpl_Skel.dispatch先经过反序列化获取。
Server(RMI Registry)  Client
这种模式下，由于 server 与 Registry 是同⼀台机器，在 bind 注册时由于 server 上
已有其 Ref，因此不需要序列化传输，只需要在 bindings list 中添加对应键值即可。
注册、请求流程
RMI Registry 的核⼼在于 RegistryImpl_Skel。当Server执⾏bind、Client执⾏
lookup时候，均会通过sun.rmi.registry.RegistryImpl_Skel#dispatch进⾏处理。
bind
⾸ 先 注 意 到 ServiceImpl 继 承 了 UnicastRemoteObject ， 在 实 例 化 时 会 通 过
exportObject创建返回此服务的stub。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 4/34
2020/7/27 RMI 利⽤分析
1 public class ServiceImpl extends UnicastRemoteObject implemen
2
3 /**
4 * Exports the specified object using the specified server re
5 */
6 private static Remote exportObject(Remote obj, UnicastServerR
7 throws RemoteException
8 {
9 // if obj extends UnicastRemoteObject, set its ref.
10 if (obj instanceof UnicastRemoteObject) {
11 ((UnicastRemoteObject) obj).ref = sref;
12 }
13 return sref.exportObject(obj, null, false);
14 }
再 通 过 bind 向 RMI Registry 服 务 器 申 请 注 册 绑 定 服 务 名 &stub 跟 ⼊ 到
sun.rmi.registry.RegistryImpl_Stub#bind，注意观察到向RMI Registry申请时，第
三个参数对应 operations ⾥的操作。
这⾥尤其注意的两个 writeObject，分别向 var3 的输出流中写⼊序列化后的服务名
&stub。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 5/34
2020/7/27 RMI 利⽤分析
RMI Registry收到申请时会进⾏会通过传⼊的操作值进⼊相关流程，0时进⼊bind，注意
到两次 readObject 分别反序列化获取服务名&stub后，再向 bindings List 中写⼊键
值。
这⾥就引出来了⼀个点：Server 通过向 RMI Registry 申请 bind 操作进⾏序列化攻
击。
lookup
再 看 Client 向 RMI Registry 申 请 lookup 查 找 时 候
(sun.rmi.registry.RegistryImpl_Stub#lookup)传递的操作数为 2，且反序列化了⽬标
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 6/34
2020/7/27 RMI 利⽤分析
服务名。
RMI Registry(sun.rmi.registry.RegistryImpl_Skel#dispatch)这边同样会先反序列化
获取查询服务名，再从 bindings list 中进⾏查询。
这⾥就引出来了另⼀个点：Client 通过向 RMI Registry 申请 lookup 操作进⾏序列化
攻击。
但是就完了么？
我们再往下看，注意到 86 ⾏出现的 writeObject，这⾥是将查询到的stub序列化传输给
Client。
回到 Client 的代码中，可以看到104 ⾏的 readObject。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 7/34
2020/7/27 RMI 利⽤分析
这⾥就引出来了第三个点：RMI Registry 通过 lookup 操作被动式攻击 Client。
调⽤时序列化
现在我们理清了bind、lookup的部分内容，那么 client 是如何实现远程调⽤呢？
通过跟进后可以看到由
java.rmi.server.RemoteObjectInvocationHandler 实 现 的 动 态 代 理 ， 并 最 终 由
sun.rmi.server.UnicastRef#invoke实现调⽤。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 8/34
2020/7/27 RMI 利⽤分析
在调⽤中我们注意到通过marshalValue打包参数，由unmarshalValue对传回的内容进⾏
反序列化。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 9/34
2020/7/27 RMI 利⽤分析
限制
这 ⾥ 的 Demo 实 际 情 况 中 很 难 遇 到 ， 因 为 evil 是 我 们 根 据 已 知 的 Services 、
PublicKnown(含已知漏洞)⽣成的，在攻击时更多都是采⽤本地 gadget。
攻击⽅向
注意到我们上⾯提出了三个攻击向。
1.Server 通过向 RMI Registry 申请 bind 操作进⾏序列化攻击；
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 10/34
2020/7/27 RMI 利⽤分析
2.Client 通过向 RMI Registry 申请 lookup 操作进⾏序列化攻击；
3.RMI Registry 通过 lookup 操作被动式攻击 Client。
其实注意到第⼀个点⾥提到的 Server 并不是要求⼀定要由⽬标服务器发起，⽐如任意⼀
台(包括攻击者)均可以向注册中⼼发起注册请求进⽽通过 bind 在 RMI Registry 上进⾏
攻击，例如：
Client -- bind --> RMI Registry(Server)
同理第⼆点、第三点⾥也是，所以我们更新⼀下：
1.向 RMI Registry 申请 bind 操作进⾏序列化攻击；
2.向 RMI Registry 申请 lookup 操作进⾏序列化攻击；
3.RMI Registry通过lookup操作被动式序列化攻击请求者。
bind - RMIRegistryExploit
with JDK 1.7.0_17
with java-rmi-server/ rmi.RMIServer2
with ysoserial.exploit.RMIRegistryExploit
ysoserial.exploit.RMIRegistryExploit实际对应bind攻击⽅向，我们来简单看下它的代
码。
核⼼在于两点，对于第⼀点可以看看 cc1 分析以及Java动态代理-实战这篇。
sun.reflect.annotation.AnnotationInvocationHandler动态代理Remote.class
bind 操作
这 ⾥ 提 ⼀ 下 为 什 么 需 要 动 态 代 理 ， 是 由 于 在
sun.rmi.registry.RegistryImpl_Skel#dispatch ， 执 ⾏ bind 时 会 通 过
Remote.readObject反序列化，导致调⽤
AnnotationInvocationHandler.invoke。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 11/34
2020/7/27 RMI 利⽤分析
02
RMI Remote Object
codebase传递以及useCodebaseOnly
RMI有⼀个重要的特性是动态类加载机制，当本地CLASSPATH中⽆法找到相应的
类时，会在指定的codebase⾥加载class，
需要
java.rmi.server.useCodebaseOnly=false，但是这个特性是⼀直开启的，直
到6u45、7u21修改默认为 true 以防御攻击。
这⾥引⽤官⽅⽂档 Enhancements in JDK 7：
如果RMI连接⼀端的JVM在其java.rmi.server.codebase系统属性中指定了⼀个
或 多 个 URL ， 则 该 信 息 将 通 过 RMI 连 接 传 递 到 另 ⼀ 端 。 如 果 接 收 ⽅ JVM 的
java.rmi.server.useCodebaseOnly系统属性设置为false，则它将尝试使⽤这
些URL来加载RMI请求流中引⽤的Java类。
从由RMI连接的远程端指定位置加载类的⾏为，当被禁⽤
java.rmi.server.useCodebaseOnly被设定为true。在这种情况下，仅从预配置
的位置（例如本地指定的
java.rmi.server.codebase 属 性 或 本 地 CLASSPATH ） 加 载 类 ， ⽽ 不 从
codebase通过RMI请求流传递的信息中加载类。
demo
Client 攻击 Server
with JDK 1.7.0_17
with java-rmi-server/rmi.RMIServer2
with java-rmi-client/rmi.RMIClient2、remote.RemoteObject
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 12/34
2020/7/27 RMI 利⽤分析
若 Client 指 定 了 codebase 地 址 ， Server 加 载 ⽬ 标 类 时 会 现 在 本 地
classpath 中进⾏查找，在没有找到的情况下会通过 codebase 对指定地址再次
查找。
为了能够远程加载⽬标类，需要Server加载并配置RMISecurityManager，并同
时设置：
java.rmi.server.useCodebaseOnly=false
在传输了 codebase 之后是如何调⽤的呢？
也是由动态代理类
java.rmi.server.RemoteObjectInvocationHandler#invokeRemoteMetho
d实现远程调⽤。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 13/34
2020/7/27 RMI 利⽤分析
Server 接收到调⽤指令后，进⼊
sun.rmi.server.MarshalInputStream#resolveClass，
由于 useCodebaseOnly 为 false，从客户端指定地址远程读取⽬标类。
全部读取完毕后回到
java.io.ObjectInputStream#readOrdinaryObject，
调⽤
java.io.ObjectStreamClass#initNonProxy进⾏实例化。
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 14/34
2020/7/27 RMI 利⽤分析
Server 攻击 Client
with JDK 1.7.0_17
with java-rmi-server/rmi.RMIServer3、remote.RemoteObject2
with java-rmi-client/rmi.RMIClient3
可以对⽐看到，从
sun.rmi.server.UnicastRef#invoke起是⼀致的逻辑，只是上层调⽤来源不⼀
样，不再赘述。
区别攻击⽅向
⽅法调⽤请求均来⾃ Client。
但区别的产⽣在于
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA 15/34
2020/7/27 RMI 利⽤分析
sun.rmi.server.UnicastRef#invoke(java.rmi.Remote,java.lang.reflect.
Method,java.lang.Object[], long)处的逻辑代码。
line 79: Client 攻击 Server，在于让 Server 请求远程 Class 产⽣结果，
由于本地同名恶意类安全所以不会对本地造成攻击。
line 89: Server 攻击 Clinet，在于 Client 获取到安全结果后需要获取远程
Class 进⾏本地反序列化导致被攻击。
03