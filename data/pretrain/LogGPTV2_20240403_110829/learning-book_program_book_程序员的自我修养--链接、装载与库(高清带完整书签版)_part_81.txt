delete[l pbuf;
pbuf = 0;
string& string::operator= (const string& s)
if (&s == this)
this->=string();
return *this;
pbuf = strcpy (new char[len + 1], s.pbuf};
len = 8.len:
return *this:
string& string::operator= (const char* s)
this->-string();
pbuf = strcpy (new char[len + 1], s);
Len = strlen(s) ;
return *this;
程序员的自我修养一链接、装载与库
---
## Page 467
444
第13章
运行库实现
const char& string:1operator [] (unsigned idx) con8t
return pbuf[idx};
char& string::operator [] (unsigned idx)
return pbuf[idx]:
const char*
string::c_str() const
return pbuf;
unsigned string::length() const
return len;
unsigned string::size() const
return len;
return o 
#ifdef WIN32
#endif
namespace std (
stdout_stream: :stdout_stream() : ofstream()
fp = stdout;
stdout_stream cout;
ofstream::ofstream() : fp(0)
1
ofstream::ofstrean(const char *filename, ofstreani:openmode md) : fp(0)
open(fi1ename, md) ;
1
ofstrean: :~ofstream()
1
close (1 ;
C
fputc(c, fp);
return *this;
ofstrean& ofstream: :operato
fprintf(fp. *ed*, n);
return *this;
程序员的自我修养一链接、装载与库
---
## Page 469
446
第13章运行库实现
fprintf(fp, *s*, str):
return *this;
ofstreams ofstream::operatorc< (ofstrean& (*manip) (ofstreams))
return manip(*chis) :
* Filena
node md)
char node[4]:
gwitch (md)
close (1 ;
case out 1 trunc:
strcpy (mode, *w*) ;
case out I in I trunc:
break1
case out I trunc 1 binary:
strcpy (mode, *w+*) ;
strcpy (mode, *wb*):
case out 1in Itrunc 1 binary:
break;
strcpy (mode, *wb+*)
fp = fopen (fi lename, mode) :
void ofstream::close()
if (fp)
fclose (fp) ;
fp = 0;
ofstreans ofstream::write(const char *buf, unsigned size)
fwrite (buf, 1, size, fp) ;
return *thi8;
13.4
如何使用MiniCRT++
我们的Mini CRT终于完成了对C++的支持，同时它也升级为了Mini CRT++。与12.3
节一样，在这一节中将介绍如何编译并且在自己的程序中使用它。首先展示在Windows下
编译的方法：
程序员的自我修养一链接、装载与库
---
## Page 470
13.4如阿使用Mini CRT++
447
$c1 /c/DwIN32 /G8-entry.c malloc.c printf.c stdio.c string.c atexit.c
$c1 /c /DwIN32/GS- /GR- crtbegin.cpp crtend.cpp ctor.cpp nev_delete.cpp
Lostream.cpp
$1ib entry.obj
mal1oc.ob5printf.obj stdio.oby etring.oby ctor.obj
new_delete.obj atexit.obj iostream.oby /our:minicrt.1ib
这里新增的一个编译参数为/GR-，它的意思是关闭RTTI功能，否则编译器会为有虚
函数的类产生RTTi 相关代码，在最终链接时会看到*const type_info:：vftable”符号
未定义的错误。
而Mini CRT++为了能够在Linux下正需运行，还须要建立一个新的源代码文件叫做
sysdep.cpp，用于定义Linux平台相关的一个函数：
extern *c*(
void* _dso_handle = 0;
这个函数是用于处理共享库的全局对象构造与析构的。我们知道共享库也可以拥有全
局对象，这些对象在共享库被装载和卸载时必须被正确地构造和析构。而共享库有可
能在进程退出之前被卸载，比如使用dlopen/ciclose 就可能导致这种情况。那么一个
问题就产生了，如何使得属于某个共享库的全局对象析构函数在共享库被卸载时运行
呢？GCC的做法是向_cxa_atexitly传递一个参数，这个参数用于标示这个析构函数属
于哪个共享对象。我们在前面实现_cxa_atexit0时忽略了第三个参数，实际上这第三
个参数就是用于标示共享对象的，它就是_dso_handle这个符号。由于在MiniCRT++
中并不考虑对共享库的支持，于是我们就仅仅定义这个符号为0，以防止链接时出现
符号未定义错误。
Mini CRT++在Linux平台下编译的方法如下：
$gcc -c -fno-builtin -nostdlib -fno-atack-protector entry.c malloc.c atdio.c
string.c printf.c atexit.c
-fno-atack-protector crtbegin.cpp crtend.cpp ctor.opp new_delete.cpp
sar -re minicrt.a malloc.o printf.o atdio.o string.o ctor.o atexit.o
ddo.depeeddoueexasoy ddodops.e
Lostream.o nev_delete.o syadep.o
-fnortti 的作用与cl的/GR-作用一样，用于关闭 RTTl。
-fno-exceptions的作用用于关闭异常支持，否则GCC会产生异常支持代码，可能导
致链接错误。
在Windows下使用 Mini CRT++的方法如下：
程序员的自我修养一—链接、装载与库
---
## Page 471
448
第13章运行库实现
$1ink test.obj minicrt.1ib kernel32.1ib /NoDEPAUL/rLIB /entry:mini_crt_entry
$c1/c/DWIN32/GR-teat.cpp
在 Linux下使用 Mini CRT++的方法如下：
$g++ -c -nostdinc++ -fno-rtt1 -fno-exceptions -fno-bui1tin -nostdlib
$1d -atatic -e mini_crt_entry entry.o crtbegin.o test.o minicrt.a crtend.o
-fno-stack-protector test.cpp
-o test
注
crtbegin.o和crtend.o在Id链接时位于用户目标文件的最开始和最后端，以保
意
证链接的正确性。
13.5本章小结
在这一章中，我们首先尝试实现了一个支持C运行的简易CRT：MiniCRT。接着又为
它加上了一些C++语言特性的支持，并且将它称为MiniCRT++。在实现C语言运行库的时
候，介绍了入口函数entry、堆分配算法malloc/free、IO和文件操作fopen/fread/fwrite/fclose、
字符串函数strlen/strcmp/atoi和格式化字符串printf/fprintf。在实现C++运行库时，着眼于实
现C++的儿个特性：new/delete、全局构造和析构、stream和 string类。
因此在实现MiniCRT++的过程中，我们得以详细了解并且亲自动手实现运行库的各个
细节，得到一个可编译运行的瘦身运行库版本。当然，MiniCRT++所包含的仅仅是真正的
运行库的一个很小子集，它并不追求完整，也不在运行性能上做优化，它仅仅是一个CRT
的维形，虽说很小，但能够通过MiniCRT++窥视真正的CRT和C++运行库的全貌，抛砖引
玉、举反三正是Mini CRT+→的目的。
程序员的自我修养一链接、装载与库
---
## Page 472
A.1字节序（ByteOrder）
A.2ELF常见段
A.3常用开发工具命令行参考
程序员的自我修养—链接、装载与库
---
## Page 473
450
附录A
A.1字节序（ByteOrder）
（Gulliver'sTravels），小人国的内战就源于吃水煮鸡蛋时究竞是从大头
（Big-Endian）敲开还是从小头（Litle-Endian）敲开，由此曾发生过6次叛乱，
其中一个皇帝送了命，另一个丢了王位。
在不同的计算机体系结构中，对于数据（比特、字节、字）等的存储和传输机制有所不
同，因而引发了计算机领域中一个潜在但是又很重要的问题，即通信双方交流的信息单元应
该以什么样的顺序进行传送。如果达不成一致的规则，计算机的通信与存储将会无法进行。
日前在各种体系的计算机中通常采用的字节存储机制主要有两种：大端（Big-endian）和小
端(Little-endian),
首先让我们来定义两个概念：
MSB是Most Significant Biv/Byte的首字母缩写，通常译为最重要的位或最重要的字节。
它通常用来表明在一个bit序列（如一个byte是8个bit组成的一个序列）或一个byte序列
（如 word是两个byte组成的一个序列）中对整个序列取值影响最大的那个bit/byte。
LSB是Least Significant Bi/Byte 的首字母缩写，通常译为最不重要的位或最不重要的
字节。它通常用来表明在一个 bit序列（如一个byte 是8个bit 组成的一个序列）或一个 byte
序列（如 word是两个byte组成的一个序列）中对整个序列取值影响最小的那个bi/byte。
比如—个十六进制的整数0x12345678里面：
0x120x340x560x78
0x12 就是 MSB (Most Significant Byte), 0x78 就是 LSB (Least Significant Byte)。 面对于 0x78
这个字节而言，它的二进制是01111000，那么最左边的那个0就是MSB（Most Significant
Bit），最右边的那个0就是LSB（Least Significant）。
Big-endian 和 litle-endian的区别就是 bit-endian 规定 MSB 在存储时放在低地址，在传
输时MSB放在流的开始：LSB存储时放在高地址，在传输时放在流的末尾。litle-endian则
相反。例如：0x12345678h这个数据在不同机器中的存储是不同，如表A-1所示。
表A-1
Big-Endian
Little-Endian
0字节
0x12
0x78