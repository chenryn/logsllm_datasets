title:Goshawk: Hunting Memory Corruptions via Structure-Aware and Object-Centric
Memory Operation Synopsis
author:Yunlong Lyu and
Yi Fang and
Yiwei Zhang and
Qibin Sun and
Siqi Ma and
Elisa Bertino and
Kangjie Lu and
Juanru Li
2022 IEEE Symposium on Security and Privacy (SP)
Goshawk: Hunting Memory Corruptions via
Structure-Aware and Object-Centric Memory
Operation Synopsis
Yunlong Lyu1 , Yi Fang2, Yiwei Zhang7, Qibin Sun1, Siqi Ma4, Elisa Bertino3, Kangjie Lu5, and Juanru Li2,6,7 
1University of Science and Technology of China, 2Feiyu Security, 3Purdue University,
4The University of New South Wales, 5University of Minnesota, 6Shanghai Qi Zhi Institute,
7G.O.S.S.I.P, Shanghai Jiao Tong University
3
1
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
Abstract—Existing tools for the automated detection of mem-
ory corruption bugs are not very effective in practice. They
typically recognize only standard memory management (MM)
APIs (e.g., malloc and free) and assume a naive paired-use
model—an allocator is followed by a specific deallocator. How-
ever, we observe that programmers very often design their own
MM functions and that these functions often manifest two major
characteristics: (1) Custom allocator functions perform multi-
object or nested allocation which then requires structure-aware
deallocation functions. (2) Custom allocators and deallocators
follow an unpaired-use model. A more effective detection thus
needs to adapt those characteristics and capture memory bugs
related to non-standard MM behaviors.
In this paper, we present a MM function aware memory bug
detection technique by introducing the concept of structure-aware
and object-centric Memory Operation Synopsis (MOS). A MOS
abstractly describes the memory objects of a given MM function,
how they are managed by the function, and their structural
relations. By utilizing MOS, a bug detection could explore much
less code but is still capable of handling multi-object or nested
allocations and does not rely on the paired-use model. In addition,
to extensively find MM functions and automatically generate
MOS for them, we propose a new identification approach that
combines natural language processing (NLP) and data flow anal-
ysis, which enables the efficient and comprehensive identification
of MM functions, even in very large code bases.
We implement a MOS-enhanced memory bug detection system,
GOSHAWK, to discover memory bugs caused by complex and
custom MM behaviors. We applied GOSHAWK to well-tested
and widely-used open source projects including OS kernels,
server applications, and IoT SDKs. GOSHAWK outperforms the
state-of-the-art data flow analysis driven bug detection tools
by an order of magnitude in analysis speed and the number
of accurately identified MM functions, reports the discovered
bugs with a developer-friendly, MOS based description, and
successfully detects 92 new double-free and use-after-free bugs.
2
2
0
2
I. INTRODUCTION
Replacing the painstaking and meticulous manual code
review with automated bug detection is promising [1], but a
major limitation of most current bug detection tools is that
their underlying program analysis techniques are not aware
of the high-level semantics of certain functions. Because of
such a limitation, existing tools are either time-consuming
to use and unable to scale for large code bases, such as
the Linux kernel, or suffer from imprecise program analysis
results when the code structure is very complex. An important
case is the detection of memory bugs (e.g., use-after-free and
double-free). Ideally, a simple static analysis could be applied
to track the lifetime of dynamic memory objects allocated
and deallocated by memory management (MM) functions
(e.g., malloc and free) and detect those bugs. In practice,
however, such a straightforward approach would not work
due to scalability issues, especially when analyzing code bases
with billions of code lines and complex structures. In addition,
the bug reports, returned by static analysis tools, typically
contain very complicated data flows, which are difficult for
code reviewers to read and confirm [2]. In response, recent
efforts have enhanced bug detection by identifying more non-
standard MM functions and simplifying their related data
flow. NLP-EYE [3] and Susi [4] leverage a MM function
summary based data flow analysis to tackle scalability. They
use either a manual or a machine learning based custom
MM functions identification to find MM behaviors in source
code, and abstract them to obtain a more concise data flow.
SinkFinder [5] adopts an alternative bug detection model that
only tracks the data flow between pairs of interested functions;
K-MELD [6] and HERO [7] also capture the pair relationship
between memory allocation and deallocation to avoid a heavy
data flow analysis of the function implementation.
Unfortunately, those approaches are still unable to provide
extensive and yet precise analyses of MM functions especially
the custom ones, and thus miss many critical memory bugs.
❶ The techniques used by those approaches for detecting MM
functions in the code are either not general enough to deal with
different kinds of source code projects, as implementations
of MM functions in different projects vary significantly, or
not accurate and suffer from high false positives. ❷ The MM
summarization strategies used by those approaches fall short
of describing the behaviors of MM functions precisely. To
support sophisticated management of dynamic memory objects
with complex structures, many custom MM functions perform
multi-object or nested allocation. A custom MM function may
allocate/release multiple memory objects in one invocation
that may relate to each other according to a specific struc-
ture, whereas a standard memory allocator/de-allocator only
© 2022, Yunlong Lyu. Under license to IEEE.
DOI 10.1109/SP46214.2022.00137
2096
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:43 UTC from IEEE Xplore.  Restrictions apply. 
handles one memory object (a consecutive memory buffer) at
a time. Moreover, while most existing bug detection models
assume that an allocation only matches one deallocation, in
real-world source code such an assumption is often violated.
A compound structure containing multiple dynamic memory
objects allocated by a custom memory allocator could be
released either by invoking the corresponding custom deal-
locator, or by invoking a standard deallocator to release each
object separately.
To implement an effective memory bug detection, we need
an approach not only scalable to handle millions of lines
of code but also precise enough to capture the complicated
structure of memory objects, and the semantics and unique
usage of MM functions. Custom MM functions “conceal” the
complicated structure of memory objects and the operations
on them, which makes it difficult for developers to understand
their correct use. In this paper, we propose a new concept—
structure-aware and object-centric Memory Operation Synop-
sis (MOS)—to address the fundamental problems when en-
countering MM functions. In brief, a MOS is a tuple that com-
prises a primary function name, a primary property (allocation
or deallocation) and a list of dynamically managed memory
objects occurring in either a return value or parameters of
the function. It summarizes the structural relations of memory
objects in MM functions. Because how a memory object
should be operated on by an MM function depends on its
structure, a MOS focuses on the object (hence object-centric)
and its structure (hence structure-aware). Moreover, a MOS
not only captures the structure of memory objects, but also
describes the function property (allocation or deallocation)
against each object.
For each MM function, we can generate an associated MOS
to describe its MM behaviors. By integrating MOS, a bug
detection process does not need to explore the internal imple-
mentation of all MM functions but can still precisely model the
dynamically managed memory objects. In addition, a MOS-
based bug detection allows one to remove the assumption
that the paired-use model is used and to instead focus on the
actual memory objects summarized by MOS. Therefore, the
bug detection can analyze unpaired uses of MM functions and
thus find more bugs.
A significant requirement for our MOS-enhanced bug de-
tection is, however, to first identify all MM functions, as these
functions are the basis of MOS. To address such requirement
despite MM functions following various implementation styles
in different kinds of source code projects, we design an
accurate and yet very efficient
identification technique by
combining natural language processing (NLP) and data flow
analysis. Our identification technique is organized according
to two main steps. The first step uses an NLP-assisted classifi-
cation against function prototypes in source code to categorize
functions as MM-relevant or MM-irrelevant. Our insight here
is that a function prototype is often human readable, and the
natural language semantics of the prototype usually reflects
the functionality. By using this semantic information, we
have been able to approximately classify MM functions in
a short time even out of millions of functions. The second
step applies a data flow analysis against the implementation
of each MM-relevant function identified by the first step.
The data flow analysis checks whether the function does
indeed perform memory allocation/deallocation using known
memory allocators/deallocators (which are previously defined
by us manually). The combination of those two steps achieves
both efficiency and accuracy. Efficiency is achieved because
the NLP analysis prunes irrelevant functions (i.e., functions
not related to MM), for which a detailed analysis is thus
not required. Accuracy is achieved because the MM-relevant
functions are analyzed in details by using a static analysis.
Based on our design, we develop a MOS-enhanced memory
bug detection system, GOSHAWK, that annotates the source
code with MOS and conducts bug detection by leveraging
MOS. We have implemented a prototype of GOSHAWK based
on the Clang Static Analyzer (CSA) [8], and applied it to well-
tested open source projects including two OS Kernels (Linux
and FreeBSD), two user programs (OpenSSL and Redis), and
three IoT SDKs (provided by Microsoft and Tencent). The
experimental results show that our approach is able to identify
MM functions in projects of different styles, and the generated
MOS information helps GOSHAWK find 92 new use-after-free
and double-free bugs in less than 10 hours. Moreover, the
use of MOS provides developer-friendly bug detection results.
Compared to traditional bug reports that typically describe
MM bugs with a very complex data flow, a bug report with
MOS is much more concise since the used MM functions in
data flow are simplified. Developers can hence more easily
confirm the reported bugs. We have reported the discovered
bugs to developers using our MOS description, and helped
them to quickly confirm the root causes of detected bugs.
Contributions:
• A novel abstraction structure to summarize MM
functions in data flow analysis. We introduce the MOS
concept
to summarize MM behaviors and enable an
object-centric and structure-aware memory bug detection
approach. The use of MOS enhances standard data flow
analysis by abstracting used MM functions but still pre-
serving their detailed behaviors, and it helps eliminate the
paired-use model adopted in existing detection tools.
• A new approach to identify MM functions. We com-
bine NLP and data flow analysis to comprehensively iden-
tify MM functions in source code. Both the analysis speed
and the number of accurately identified MM functions
outperform the results of the state of the art tools by an
order of magnitude.
• GOSHAWK, a MOS-enhanced tool able to detect non-
trivial memory bugs. With GOSHAWK, we discovered
92 new memory corruption bugs in OS kernels, server
applications and libraries, and IoT SDKs. We have made
available the source code of GOSHAWK and details of our
detection results at https://goshawk.code-analysis.org.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:43 UTC from IEEE Xplore.  Restrictions apply. 
2097
Fig. 1. A double-free bug caused by improper use of MM functions. It would be missed by existing detection because it follows the paired-use model. An
effective detection should be aware of the object structure and MM functions.
II. PROBLEM AND SOLUTION
In this paper, we focus on detecting memory corruption
issues related to the use of different MM functions. An MM
function is either a memory allocator or a memory deallocator.
In real-world projects, MM functions are implemented in
a highly diverse way. In general, an MM function can be
classified as either a primitive one or an extended one. A
primitive MM function only handles a single object, while an
extended MM function allocates/deallocates nested or multiple
objects. For instance, the standard libc functions malloc and
free are primitive MM functions, whereas an extended MM
function is one that repeatedly invokes malloc to allocate
multiple memory objects in one execution.
Both primitive and extended MM functions can be improp-
erly used and lead to memory corruption. It is important to
note that memory bugs caused by extended MM functions
are often more difficult to detect than bugs resulting from the
improper use of primitive MM functions. In what follows, we
first introduce a real-world example of a custom MM code
resulting in a bug and discuss the challenges in implementing
a precise detection. We then introduce our solution.
A. Motivating Example
The example in Figure 1 demonstrates the complexity of
using MM functions in Linux kernel. At a glance, a dy-
namic memory object info of struct fb_info type is al-
located by a framebuffer_alloc function (❶), and is re-
leased using the corresponding framebuffer_release func-
tion (❷). However, the info object contains an apertures
sub-object, which also involves a dynamic memory al-
location by invoking the alloc_apertures function (❸).
In this case,
the two allocators (framebuffer_alloc and
alloc_apertures) are primitive MM functions, but the deallo-
cator (framebuffer_release) is an extended MM function. It
indicates that the pairwise use of framebuffer_alloc (as the
allocator) and framebuffer_release (as the deallocator) is not
proper. Actually, due to a previous memory deallocation in the
error handling of hvfb_getmem (❹), the memory deallocation
using framebuffer_release suffers from a double-free bug
when the pointer of apertures is freed twice (❺).
We have observed many cases where such a problem leads
to critical memory bugs. Such bugs are often “stealthy”
because the code pattern is seemingly “correct” — developers
tried hard to properly pair allocation and deallocation for mem-
ory objects with MM functions; unfortunately, the standard
models (i.e., assuming that they handle a single memory object
at a time, and follow the paired uses) in these cases are no
longer applicable.
B. Challenges
in
detecting memory
like
challenge
core
by MM functions,
issues
The
framebuffer_alloc,
caused
is how to