```
**配置 VSftpd 服务**
```bash
yum install -y vsftpd
systemctl restart vsftpd
systemctl enable vsftpd
ln -s '/usr/lib/systemd/system/vsftpd.service' '/etc/systemd/system/multi-user.target.wants/vsftpd.service'
cp -rvf /media/cdrom/* /var/ftp
firewall-cmd --permanent --add-service=ftp
firewall-cmd --reload
setsebool -P ftpd_connect_all_unreserved=on
```
**创建 KickStart 应答文件**
```bash
cp ~/anaconda-ks.cfg /var/ftp/pub/ks.cfg
chmod +r /var/ftp/pub/ks.cfg
```
```vim
# 修改第 7、27、35 行
vim /var/ftp/pub/ks.cfg
url --url=ftp://192.168.0.105
timezone Asia/Shanghai --isUtc
clearpart --all --initlabel
# 如果觉得系统默认自带的应答文件参数较少,不能满足生产环境的需求,则可以通过 Yum 软件仓库来安装 system-config-kickstart 软件包.这是一款图形化的 Kickstart 应答文件生成工具,可以根据自己的需求生成自定义的应答文件,然后将生成的文件放到 /var/ftp/pub 目录中并将名字修改为 ks.cfg 即可.
```
**Source & Reference**
- [第19章 使用 PXE+Kickstart 无人值守安装服务.](https://www.linuxprobe.com/chapter-19.html)
---
### nps
> 、一款轻量级、高性能、功能强大的内网穿透代理服务器。支持tcp、udp、socks5、http等几乎所有流量转发，可用来访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析、内网socks5代理等等……，并带有功能强大的web管理端。
**项目地址**
- https://github.com/cnlh/nps
**服务端安装**
```bash
mkdir nps
cd nps
wget https://github.com/ehang-io/nps/releases/download/v0.26.10/linux_amd64_server.tar.gz
tar -zxvf linux_amd64_server.tar.gz
./nps install
nps start
# 关闭防火墙
systemctl stop firewalld
```
访问 ip:8080 ,默认用户名和密码 admin/123
**客户端安装**
在服务器端新增客户端,点击客户端列表前的+号，复制启动命令
执行启动命令，linux 直接执行即可，windows 将 ./npc 换成 npc.exe 用 cmd 执行
**使用示例**
- https://ehang-io.github.io/nps/#/example
---
### OpenVPN
> OpenVPN 是一个用于创建虚拟专用网络加密通道的软件包
**官网**
- https://openvpn.net/
**快速安装脚本**
- [Nyr/openvpn-install](https://github.com/Nyr/openvpn-install)
  ```bash
  wget https://git.io/vpn -O openvpn-install.sh && bash openvpn-install.sh
  ```
**centos 下安装 OpenVPN**
- **前期准备**
  ```bash
  echo "net.ipv4.ip_forward = 1" >>/etc/sysctl.conf
  sysctl -p
  service firewalld stop
  setenforce 0
  cp  /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
  date
  ```
  **安装 OpenVPN**
  ```bash
  curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
  yum clean all && yum makecache
  yum install -y openvpn
  ```
  **安装 easyrsa**
  ```bash
  cd /root
  wget https://github.com/OpenVPN/easy-rsa/archive/v3.0.7.tar.gz
  mv v3.0.7.tar.gz easy-rsa-3.0.7.tar
  tar xf easy-rsa-3.0.7.tar
  cd easy-rsa-3.0.7/easyrsa3
  cp -a vars.example vars
  ```
  ```diff
  vim vars
  # 国家
  ++ set_var EASYRSA_REQ_COUNTRY     "CN"
  # 省
  ++ set_var EASYRSA_REQ_PROVINCE    "BJ"
  # 城市
  ++ set_var EASYRSA_REQ_CITY        "BeiJing"
  # 组织
  ++ set_var EASYRSA_REQ_ORG         "zhang"
  # 邮箱
  ++ set_var EASYRSA_REQ_EMAIL       "PI:EMAIL"
  # 拥有者
  ++ set_var EASYRSA_REQ_OU          "ZJ"
  # 长度
  ++ set_var EASYRSA_KEY_SIZE        2048
  # 算法
  ++ set_var EASYRSA_ALGO            rsa
  # CA证书过期时间，单位天
  ++ set_var EASYRSA_CA_EXPIRE      36500
  # 签发证书的有效期是多少天，单位天
  ++ set_var EASYRSA_CERT_EXPIRE    36500
  ```
  **初始化与创建CA根证书**
  ```bash
  ./easyrsa init-pki
  ./easyrsa build-ca
  # 在这部分需要输入PEM密码 PEM pass phrase，输入两次，此密码必须记住，不然以后不能为证书签名。
  # 还需要输入common name 通用名，如：openvpen，这个你自己随便设置个独一无二的。
  ```
  **生成服务端证书**
  ```bash
  ./easyrsa build-server-full server nopass
  # 为服务端生成证书对并在本地签名。nopass参数生成一个无密码的证书；在此过程中会让你确认ca密码
  ./easyrsa gen-dh
  # 创建Diffie-Hellman
  ```
  **生成ta.key**
  ```bash
  openvpn --genkey --secret ta.key
  cp -a pki/ca.crt /etc/openvpn/
  cp -a pki/private/server.key /etc/openvpn/
  cp -a pki/issued/server.crt /etc/openvpn/
  cp -a pki/dh.pem /etc/openvpn/
  cp -a ta.key /etc/openvpn/
  ```
  **制作 Client 端证书**
  每一个登录的VPN客户端需要有一个证书，每个证书在同一时刻只能供一个客户端连接
  ```bash
  ./easyrsa gen-req zhangsan nopass
  ./easyrsa sign-req client zhangsan
  ```
  **配置 OpenVPN 服务端**
  拷贝 OpenVPN 配置文件
  ```bash
  cp /usr/share/doc/openvpn-*/sample/sample-config-files/server.conf /etc/openvpn/
  ```
  配置服务端的配置文件
  ```diff
  vim /etc/openvpn/server.conf
  ++ local 0.0.0.0
  # 表示openvpn服务端的监听地址
  -- proto udp
  ++ proto tcp
  -- ca ca.crt
  -- cert server.crt
  -- key server.key
  -- dh dh2048.pem
  ++ ca /etc/openvpn/ca.crt
  ++ cert /etc/openvpn/server.crt
  ++ key /etc/openvpn/server.key
  ++ dh /etc/openvpn/dh.pem
  -- tls-auth ta.key 0
  ++ tls-auth /etc/openvpn/ta.key 0
  # 服务端第二个参数为0；同时客户端也要有此文件，且client.conf中此指令的第二个参数需要为1。
  ++ compress lz4-v2
  ++ push "compress lz4-v2"
  # openvpn 2.4版本的vpn才能设置此选项。表示服务端启用lz4的压缩功能，传输数据给客户端时会压缩数据包。
  # Push后在客户端也配置启用lz4的压缩功能，向服务端发数据时也会压缩。如果是2.4版本以下的老版本，则使用用comp-lzo指令
  ++ status openvpn-status.log
  # 在文件中输出当前的连接信息，每分钟截断并重写一次该文件
  -- explicit-exit-notify 1
  # 当服务器重新启动时，通知客户端，以便它可以自动重新连接。仅在UDP协议是可用
  ```
  **开启 openvpn 服务**
  ```bash
  systemctl start openvpn@server
  ss -tnlp
  ```
  **测试连接**
  ```bash
  sz /root/easy-rsa-3.0.7/easyrsa3/pki/private/zhangsan.key
  sz /root/easy-rsa-3.0.7/easyrsa3/pki/issued/zhangsan.crt
  sz /etc/openvpn/ca.crt
  sz /etc/openvpn/ta.key
  ```
  ```bash
  vim zhangsan.ovpn
  client
  dev tun
  proto tcp
  remote x.x.x.x 1194
  resolv-retry infinite
  nobind
  ;user nobody
  ;group nobody
  persist-key
  persist-tun
  ca ca.crt
  cert zhangsan.crt
  key zhangsan.key
  remote-cert-tls server
  tls-auth ta.key 1
  cipher AES-256-CBC
  compress lz4-v2
  verb 3
  ;mute 20
  ```
  ```
  sz zhangsan.ovpn
  ```
  管理员身份运行 openvpn.exe
  将指定配置文件放入文件夹，连接
- **docker 搭建 OpenVPN**
  **docker 安装**
  ```bash
  systemctl start docker
  docker pull kylemanna/openvpn:2.4
  mkdir -p /data/openvpn
  docker run -v /data/openvpn:/etc/openvpn --rm kylemanna/openvpn:2.4 ovpn_genconfig -u udp://
  ```
  **生成密钥文件**
  ```bash
  docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn:2.4 ovpn_initpki
  输入私钥密码 (输入时是看不见的) :
  Enter PEM pass phrase:12345678
  再输入一遍
  Verifying - Enter PEM pass phrase:12345678
  输入一个 CA 名称 (我这里直接回车)
  Common Name (eg: your user, host, or server name) [Easy-RSA CA]:
  输入刚才设置的私钥密码 (输入完成后会再让输入一次)
  Enter pass phrase for /etc/openvpn/pki/private/ca.key:12345678
  ```
  > 注意 : 此处只是为了方便演示,生产环境下请不要使用类似 12345678 这类弱口令
  **生成客户端证书 (这里的 user 改成你想要的名字)**
  ```bash
  docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn:2.4 easyrsa build-client-full user nopass
  输入刚才设置的密码
  Enter pass phrase for /etc/openvpn/pki/private/ca.key:12345678
  ```
  **导出客户端配置**
  ```bash
  mkdir -p /data/openvpn/conf
  docker run -v /data/openvpn:/etc/openvpn --rm kylemanna/openvpn:2.4 ovpn_getclient user > /data/openvpn/conf/user.ovpn
  ```
  **启动 OpenVPN 服务**
  ```bash
  docker run --name openvpn -v /data/openvpn:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn:2.4
  service firewalld stop
  ```
  **将登录的证书下载到本地**
  ```bash
  yum install -y lrzsz
  sz /data/openvpn/conf/whsir.ovpn
  ```
  在 openvpn 的安装目录下,有个 config 目录,将服务器上的 user.ovpn,放在该目录下,运行 OpenVPN GUI,右键 whsir 连接 connect
  **Source & Reference**
  - [通过 docker 搭建 openvpn](https://blog.whsir.com/post-2809.html)
---
### PowerDNS
> 一种 DNS 服务器, 优点, 支持 PHP 网页管理, 支持直接在数据库中添加 DNS 地址记录, 比较灵活, 方便
**项目地址**
- https://github.com/PowerDNS/pdns
**安装**
以 Ubuntu16.04 为例
先配置好 mysql
```bash
apt -y install mariadb-server mariadb-client
service mariadb start
mysql_secure_installation   # 初始化下 Mysql,此时配置密码,这里举例为 123456
```
为 PowerDNS 创建一个数据库,并创建一个数据库用户 powerdns,密码 123456
```sql
mysql -u root -p
CREATE DATABASE powerdns;
GRANT ALL ON powerdns.* TO 'powerdns'@'localhost' IDENTIFIED BY '123456';
GRANT ALL ON powerdns.* TO 'powerdns'@'localhost.localdomain' IDENTIFIED BY '123456';
FLUSH PRIVILEGES;
```
> 注意 : 此处只是为了方便演示,生产环境下请不要使用类似 123456 这类弱口令
创建 PowerDNS 所需的表
```sql
CREATE DATABASE IF NOT EXISTS powerdns;
USE powerdns;
CREATE TABLE domains (
  id                    INT AUTO_INCREMENT,
  name                  VARCHAR(255) NOT NULL,
  master                VARCHAR(128) DEFAULT NULL,
  last_check            INT DEFAULT NULL,
  type                  VARCHAR(6) NOT NULL,
  notified_serial       INT DEFAULT NULL,
  account               VARCHAR(40) CHARACTER SET 'utf8' DEFAULT NULL,
  PRIMARY KEY (id)
) Engine=InnoDB CHARACTER SET 'latin1';
CREATE UNIQUE INDEX name_index ON domains(name);
CREATE TABLE records (
  id                    BIGINT AUTO_INCREMENT,
  domain_id             INT DEFAULT NULL,
  name                  VARCHAR(255) DEFAULT NULL,
  type                  VARCHAR(10) DEFAULT NULL,
  content               VARCHAR(64000) DEFAULT NULL,
  ttl                   INT DEFAULT NULL,
  prio                  INT DEFAULT NULL,
  change_date           INT DEFAULT NULL,
  disabled              TINYINT(1) DEFAULT 0,
  ordername             VARCHAR(255) BINARY DEFAULT NULL,
  auth                  TINYINT(1) DEFAULT 1,
  PRIMARY KEY (id)
) Engine=InnoDB CHARACTER SET 'latin1';
CREATE INDEX nametype_index ON records(name,type);
CREATE INDEX domain_id ON records(domain_id);
CREATE INDEX ordername ON records (ordername);
CREATE TABLE supermasters (
  ip                    VARCHAR(64) NOT NULL,
  nameserver            VARCHAR(255) NOT NULL,
  account               VARCHAR(40) CHARACTER SET 'utf8' NOT NULL,
  PRIMARY KEY (ip, nameserver)
) Engine=InnoDB CHARACTER SET 'latin1';
CREATE TABLE comments (
  id                    INT AUTO_INCREMENT,
  domain_id             INT NOT NULL,
  name                  VARCHAR(255) NOT NULL,
  type                  VARCHAR(10) NOT NULL,
  modified_at           INT NOT NULL,
  account               VARCHAR(40) CHARACTER SET 'utf8' DEFAULT NULL,
  comment               TEXT CHARACTER SET 'utf8' NOT NULL,
  PRIMARY KEY (id)
) Engine=InnoDB CHARACTER SET 'latin1';
CREATE INDEX comments_name_type_idx ON comments (name, type);
CREATE INDEX comments_order_idx ON comments (domain_id, modified_at);
CREATE TABLE domainmetadata (
  id                    INT AUTO_INCREMENT,
  domain_id             INT NOT NULL,
  kind                  VARCHAR(32),
  content               TEXT,
  PRIMARY KEY (id)
) Engine=InnoDB CHARACTER SET 'latin1';
CREATE INDEX domainmetadata_idx ON domainmetadata (domain_id, kind);
CREATE TABLE cryptokeys (
  id                    INT AUTO_INCREMENT,
  domain_id             INT NOT NULL,
  flags                 INT NOT NULL,
  active                BOOL,
  content               TEXT,
  PRIMARY KEY(id)
) Engine=InnoDB CHARACTER SET 'latin1';
CREATE INDEX domainidindex ON cryptokeys(domain_id);
CREATE TABLE tsigkeys (
  id                    INT AUTO_INCREMENT,