### 优化后的文本

尽管一台或多台机器在某些条件下可能显得复杂，但其环境远不及现实世界那么复杂。如果认为现实世界的复杂性需要人工轮值应对，那么这一观点并不适用于数据中心。然而，我们仍然让运维工程师和产品开发工程师轮流值班。这是为什么呢？

让我直截了当地说：运维工程师有时因为错误的原因被调来轮值。一个常见原因是**成本问题**：手动修复问题比开发自动化软件更便宜。另一个原因是**轮值工作被认为令人不悦**，因此没有受过培训的产品工程师不愿意承担这项任务，这导致越来越多的人希望将这项工作推给较低级别的运维工程师。还有一个假设是，任务关键性、"保持系统运行"的心态以及围绕生产状态培养的紧迫感都需要随时待命。然而，这些都只是一种教条，不一定有效。

我采取了一种不同的方法，使用风险管理的语言来列出我们依然坚持轮值的合理理由。这使我们能够专注于对系统运维有实际影响的事项，而不是那些可能真实或不可能改变的信念。我们将原因分为以下几类：

1. **已知的有解问题**
   - 考虑一个带有已知错误的系统，错误触发条件、效果及修复方法都是已知的。许多专业的轮值人员都熟悉这种类型的报警。显而易见的问题是，为什么解决这个问题需要人的参与？通常是因为决策层认为修复系统的特定指令应部分地运行在员工的大脑中，而不是由系统的CPU完成。因此，在这个思维定式中，工程师因为成本而被安排轮值；实际上，这个问题完全可以通过软件解决。

2. **未知的有解问题**
   - 许多软件故障是由外部操作或某种交互引起的，例如变更管理、资源使用超出配额限制、访问控制违规等。这些问题原则上是可以预见的，尤其是在你有一些经验之后。虽然你不一定能提前预测具体原因，但从统计学上来说，每年都会有一些非常高的峰值。因此，工程师处于待命状态，因为目前无法正确实现自动化的资源扩展处理；这再次证明问题完全可以自动解决。

3. **未知的无解问题**
   - 尽管从理论上无法证明，但我认为失败并非不可避免。有大批软件系统运行多年都没有问题。事实上，我们可以提出墨菲第一定律：除非受外力影响，否则在生产中稳产运行的系统将继续稳定运行。对于许多与互联网断开连接的嵌入式系统来说，情况也是如此。但对于非嵌入式的联网系统，情况则不同。复杂性确实是答案的一部分，但有些东西我们忽略了。系统和软件确实会出现故障，但某些类型的失败可以自动恢复或做出其他反应。然而，有些大类的失败不能，这些系统故障通常随着系统本身的变化而变化，或者随着时间引入更多依赖条件。在工程风险管理的语言中，这些是*未知的无解问题*。因此，工程师被迫轮值，因为系统可能以事先无法预见的方式出现故障，需要人类根据环境趋势做出判断。

4. **产生智慧**
   - 这个原因与前两个相似，但意图不同。我们选择让工程师轮值，目的是了解系统在实际情况下如何行为。我们可能会学到让自己不愉快的东西，也可能会学到愉快的东西，但我们这样做是为了明确地收集信息，并决定改进的方向。

从我的角度来看，反对取消轮值的主要原因是第三类：未知的无解问题。

### 轮值是急诊医学，而不是病房医学

但实际上，让工程师轮值的唯一正当理由是最后一个：产生智慧。其他理由最终只是托辞。

- **已知的有解问题**涉及人类启动某个流程来完全用机器完成预定的修复。这类问题的取舍是关于代价的权衡、成本控制和优先次序，而不是工程上的可行性。完全自动化的运维在这个范围内是完全可行的。
- **已知无解问题**可以通过投入更多资源或以受控方式暂停正常处理来避免人力操作。应用程序层问题，如导致崩溃的请求或资源大量消耗的请求，也可以通过程序化方法来保持系统运行。
- **未知的无解问题**是系统中潜藏着哪些不可预知的问题，阻止我们把紧急情况变成普通的病房医学。我们需要一个人来观察整个系统并采取正确的反应。

### 反驳意见

一个重要的反对意见是，虽然以上的观点都很好，但在当前现实世界中，定制软件太多且预算有限，无法避免未知的无解问题。这很可能是真的，但几乎所有地方的每一个软件都会在某个时候经历改写周期。采用关键且可靠的框架是一个趋势，这并不像想象中那样遥远。

另一个反对意见是，这将妨碍轮值工程师了解问题并有效地解决问题。然而，进行轮值的一个合理原因确实是为了产生智慧，自愿这样做是完全正确的。如果他们反对的是SRE从业者在轮值经验上变得生疏，那么本文的想法只是为了将轮值从救命药物转变为一种病房医学，即在更多双眼睛的审视下来进行。

最后，尽管有一些现存的广泛使用的模块，如HTTP服务器和存储，但这些模块的可靠性和安全性仍需进一步提高。我们需要一个安全的云堆栈，或者至少是以可靠的方式运作的云组件。