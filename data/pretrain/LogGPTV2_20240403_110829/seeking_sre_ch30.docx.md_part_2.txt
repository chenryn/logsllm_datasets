然而，不论怎么说，一台或多台机器作为高度受限的环境，虽然在某些条件下很复杂，但并不会像现实世界那么复杂。如果认为现实世界实在复杂，需要一个人来轮值应对的话，那么对用于数据中心来说，这个观点并不那么适用。
然而，我们还是继续让工程师不只是运维工程师，有时也让产品开发工程师轮值。为什么？
让我说的更直白，运维工程师们：我们有时因为错误的理由被调来轮值。一个众所周知的原因就是*因为这比解决真正的问题便宜*；也就是说，在出现问题时，只需手动做出反应和修复问题，而不是开发软件来解决问题，这样做的成本就更低了。另一个错误的原因就是*因为轮值工作被认为是可怕的*。因此，没有受过培训的产品工程师非常不愿意这样做，并且人们越来越希望把这项工作传给一个较低的阶层，那就是运维工程师。还有一个假设是，任务关键性（无论怎样的关键程度），"保持系统运行"的心态，以及围绕生产状态培养紧迫感，都需要随时待命。然而，归根到底，这些不过是一种教条：坚定和长期坚持的信念，这些信念可能有用，也可能没有用。
我采取了不同的方法，并使用风险管理的语言，目的是为了列出我们现今仍然坚持轮值的合理理由。这使我们能够专注于对系统运维有影响的事项，而不是可能真实或不可能改变的信念。
因此，让我们将原因分为以下几类：
已知的有解问题
:    考虑一个带有已知错误的系统，不但错误被触发的条件是已知的，触发它们的效果也是已知的，并且修复也是已知的。如今，许多专业的轮值人员都很熟悉这种类型的报警被触发的感受。当然，显而易见的问题是，为什么解决这个问题需要人的参与呢？正如前面所讨论的，有时候只是因为人力更便宜，有时候却不是这样。通常是因为决策层认为修复系统的特定指令应该（部分地）运行在员工的大脑中，而不是由系统的
    CPU 完成。（我认为这篇文章谈论的[externalizing your call
    stack](https：//queue.acm.org/detail.cfm?id=2956643)就是这个意思）因此，在这个思维定式中，工程师因为*成本*而被安排轮值；实际上，这个问题完全可以通过软件解决。
未知的有解问题
:    许多软件故障都是由外部操作或某种交互引起的，无论是变更管理，超出配额限制的过度资源使用，访问控制的违规还是其他类似的问题。一般来说，这种类型的失败原则上是可以预见的，特别是在你有一些经验之后，即使特定方式（例如）配额耗尽发挥作用还不是事先明确的。例如，这些问题有时可能与流量快速增长或其他异常事件有关。虽然你不一定能提前预测原因，但通常情况下，从统计学上来说，你每年都会有一些非常高的峰值。因此，工程师处于待命状态，因为目前无法正确实现自动化的资源扩展处理；再一次证明问题完全可以自动解决。
未知的无解问题
:    尽管理论上是无法证明的，但为了本脚注的目的，我想反驳一种观点，即失败是不可避免的，似乎计算中的一切都是在不可预知的潮湿沼泽之上的摇摇欲坠的堆砌。事实并非如此。有大批软件系统运行多年却没有问题。事实上，我们可能会提出（比如说）墨菲第一定律：除非受外力影响，否则在生产中稳产运行的系统将继续在生产中稳稳地运行。对于许多与互联网断开连接的嵌入式系统来说，情况也是如此。对于非嵌入式的联网系统来说，情况并非如此。复杂性肯定是答案的一部分，但有些东西我们忽略了。系统和软件确实会出现故障。今天，某些类型的失败可以自动恢复，或者在没有人工干预的情况下做出其他反应（如果不是自我修复，那么至少不会自我毁灭）。但是，有一些大类的失败不是，更糟糕的是，这些系统故障通常随着系统本身的变化而变化，或者随着时间变化而不断引入更多依赖条件，等等。在工程风险管理的语言中，这些是*未知的无解问题*：见[这个短语的定义](https：//academic.oup.com/jxb/article/60/3/712/453685)。你不知道的事情肯定很多，而且你知道你肯定不能知道一切，所以你可以预见这些未知是理论存在的。因此，工程师被迫轮值，因为系统可能以事先无法看到的方式出现故障，因此似乎*需要*只有人类才能合理的根据环境趋势做出判断；所以正是因为可能出错的复杂性，使得自动响应在这种情况不适用。
产生智慧
:   这在概念上与我们的前两个原因非常相似。区别主要是在意图上。我们选择让工程师对系统进行轮值，目的在于了解*真实的东西*，了解*在实际情况下*的系统行为。我们可能会学到让自己不愉快的东西，也可能会学到愉快的东西，但我们这样做是为了明确地收集信息，并决定把我们的努力放在如何改进的地方。
从我的角度看来，反对取消轮值这个 SRE
工作责任，主要是因为第三类原因：未知的无解问题。 
## 轮值是急诊医学，而不是病房医学
 但实际上，让工程师轮值的唯一正当理由是最后一个：产生智慧。其他的理由其实说到底不过是托辞。
第一类，已知的有解问题，涉及人类启动某个流程来完全用机器完成预定的修复；对于某些特定人类而言，执行这个流程恰好在某个时刻更便宜或更简单。
这一类的取舍是关于代价的权衡、成本控制和优先次序，而不是工程上的可行性。
除了金钱和时间之外，完全自动化的运维在这个范围内是完全可行的。虽然时间和金钱是至关重要的事情，但原则上是可以不断尝试的。然而，这一类别问题仍然是目前故障的源头，也许是因为行业中广泛存在将运维视为一种资源消耗，这意味着没有投资者会重视运维。因为对于企业而言，运维没有被当成是可以产生收入的东西，只是被看作日常花费的一种渠道。这里可以参考[一篇精彩的论述](http：//www.leanessays.com/2017/11/the-cost-center-trap.html)。
对于已知无解问题，避免人力操作的路径通常是投入更多资源或以受控方式暂停正常处理，在需要更详细的修复工作之前可能还需要使用一些正常操作的平滑过渡。实际上，通常是因为这类更高层的系统缺陷，导致需要轮值工程师来专门解决这种已知的无解问题。应用程序层问题，例如导致崩溃的请求请参考[这里的定义。](http：//www.doublecloud.org/2010/11/what-lessons-you-can-learn-from-google-on-building-infrastructure/)，或导致资源大量消耗的请求开始随输入超线性增长，同样可以通过程序化方法（自动阻止导致问题的请求，或平滑的将请求转到另一个没有问题的冗余数据中心，等等）来保持系统运行。那么，重要的问题是查出高层系统问题的根源在哪里，以及是否有一种有意义的解决方法。
例如，系统级更改控制问题的情况更加令人沮丧：可能有问题的访问控制列表（ACL）会阻止对关键依赖项的访问；或者运行时标志将启动服务器归入不再存在或速度大大减慢的分类；或者可能一个
GRANT 命令意外删除了对执行 GRANT
的实体的系统访问。虽然这些可能看起来超出了自动响应的领域，但这些是 所谓的试错机制请注意，我正小心翼翼选择自己的措辞。试错机制有自己局限性：例如，在非事务性环境中，每个操作都"重要"（与简单的可重试
Web
请求相反），就不应使用试错机制；操作将不可撤销地改变状态（比如涉及了一些交易额度），但无法回滚。如果个别访问请求无法安全地路由到处理器子集的环境中，也不能使用试错机制。运行批量试错也更昂贵，除非你正在测试的是生产服务能力，而且那样做这本身是有问题的，因为云服务供应商或虚拟服务器供应商可能不会为批量试错提供简单的接口。但注意我没有说过，"试错可以解决一切"。我说，"很难想象一种情况，试错机制不能达到好的效果"。我预计试错系统可以解决非常广泛的问题，倘若它目前不能解决问题，主要是因为我们让人们待命，而不是花时间和费用设置试错基础设施。最擅长的领域：这允许我们尝试各种难以推理的变化，并系统地观察影响，它不需要在核心系统中进行根本重写，只需要分区活动的能力。然而，相反，我们通常为人类付出改变和观察过程；也许推理，如果我们必须有一个人来处理未知的未知，我们不妨让他们做其他的。
 所以，它确实归结为未知的无解问题：系统中潜藏着哪些不可预知的问题，阻止我们把紧急情况变成普通的病房医学？当然，运行的论点，我们不能提前知道这些，因此我们需要一个人周围，以便能够观察整个系统，并采取正确的反应？
然而，情况比这更微妙。并非所有可能导致中断的问题都发生在系统：只有部分问题会发生在系统中。并非所有潜伏的困难都可以预估，但这实际上没有问题，因为我们不需要提前解决所有可能的问题。相反，我们需要将系统有问题的状态（需要紧急药物）转化为需要工作时间干预（病房药物）的状态。解决所有不可预想的普通问题是个伪命题，与构建软件以更适应已知的意外问题则是可行的，两个目标之间存在很大差异。比如像[停顿问题](https：//en.wikipedia.org/wiki/Halting_problem)，想要解决一般情况肯定是棘手的，因为需要根据编程模型来预测停顿是太大的工程；但预测一个简单的
FOR
循环何时停止则是微不足道的。确实，发生了许多重大事件，其中极其微妙的影响在重大事故中发挥了作用。然而，大多数人不问自己，为什么这些微妙的影响首先出现，这部分是因为行业的现状是不打算建立可靠的系统（使用众所周知的模块构建，也就是得到良好测试的模块）；相反，不幸的是，无论是初创公司还是大型跨国公司，都一次又一次地从头构造他们的应用架构。在这种情况下，所谓的共同"基础"通常意味着
POSIX libc，这其实是个大笑话。
这会导致一种情况，即许多构建基块确实组合在一起，但通常是在某种微服务体系结构中。而且由于每个组织每次都从最基础的架构作为出发点，因此在全行业范围内无法将有意义的内容在单个服务平台（或数据处理平台）上进行协作，从而无法产生弹性和经过良好测试的软件单元。就好像建筑行业每次建房时都从头造出砖块，而街上相邻的房子之所以会共用砖块，只是因为团队成员在午餐时碰巧坐在一起。
换句话说，我们之所以看到未知的无解因素对系统产生不良影响，首要的原因在于：对系统和代码交互方式的细节知之甚少。之所以这方面的知识缺乏，并不是因为人太蠢或软件太复杂（其实两者往往*都不那么*差)，而是因为每个团队都需要从头开始理解问题。如果我们有一组以广为人知的方式运作的整合组件，我们可以显著降低这些风险，甚至在某些情况下完全规避风险。或者，用供应商的语言（而不是用户的语言）来说，*我们需要一个安全的云堆栈*------或者至少是以可靠的方式运作的云组件。
思考这个问题的另一种方法是：回头检查多年来编写的服务故障检查报告。当你在足够长的时间内查看一组根本原因和促成因素时，可以问自己一些问题：这些故障中，哪些是真正无法预见的，如果持续引入非常简单的保护机制，故障的出现几率会降低多少？我的经验显示，根据
ER 的早期分析，80% 的故障是由 20%
的根本原因引起的；其余的才是未知的无解问题。我们可以通过构建更具弹性的系统来改进系统，从而可以让系统的故障更加可控，更加支持试错机制，并将应用程序逻辑与实体系统层分开。 
## 反驳意见
 一个重要的反对意见是，虽然以上的观点都很好，但在目前的现实世界中，定制软件太多且预算有限，所以无法避免未知的无解问题的出现，所以我们仍然会始终需要有人轮值。
这很可能是真的，软件确实太多，且没有足够的资金来改写，但几乎所有地方的每一个软件都会在某个时候经历一个改写周期。为云消费者采用关键且可靠的框架，这个趋势并不像您想象的那样遥远，特别是如果这些框架易于使用并广为人知（HTTP
服务器、存储等），就会有难以替代性。当然，这需要时间，但并非不可能。
另一个反对意见是，这将妨碍轮值工程师了解问题并有效地解决问题；因此，我们应该继续坚持全行业范围的轮值。嗯，正如前面所概述的，进行轮值一个合理原因确实是为了产生智慧，而自愿这样做是完全正确的。然而，如果他们反对的是
SRE
从业者在轮值经验上变得生疏，那么本文的想法只不过是不要继续将轮值作为救命药物，而是将它转变成为一种病房医学，也就是在更多双眼睛的审视下来进行。我不认为我们会从每一个软件中删除每一个故障，只是想说明我们能剔除足够的问题，而不必继续为目前的轮值模式付出更大的代价。
 一些评论指出比如，Hannah Foxwell
的[这个开发运维讲座](https://www.devopsdays.org/events/2017-oslo/program/hannah-foxwell/)。一个有效的替代人类轮值的方法。我介绍这个尝试只能算是投石问路。虽然我很乐观的盼望一个能够应付任何事情的软件，但我必须指出，一个任意复杂的未知故障情况指望通过机器学习软件能完全理解，并正确操控正在使用的技术组件，这不仅在现在不现实，可能永远都不会成就。
最后还要指出，虽然有一些现存的广泛使用的模块，比如工程师们都在用的