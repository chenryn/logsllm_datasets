title:Proxy Re-Encryption Based on Homomorphic Encryption
author:Reda Bellafqira and
Gouenou Coatrieux and
Dalel Bouslimi and
Gw&apos;enol&apos;e Quellec and
Michel Cozic
Proxy Re-Encryption Based on Homomorphic Encryption
Reda Bellafqira
IMT Atlantique
Brest, Cedex, France
PI:EMAIL
Gouenou Coatrieux
IMT Atlantique
Brest, Cedex, France
PI:EMAIL
Dalel Bouslimi
IMT Atlantique
Brest, Cedex, France
PI:EMAIL
Gwénolé Quellec
PI:EMAIL
Inserm
Brest, France
Michel Cozic
MED.e.COM
Plougastel Daoulas, France
PI:EMAIL
ABSTRACT
In this paper, we propose an homomorphic proxy re-encryption
scheme (HPRE) that allows different users to share data they out-
sourced homomorphically encrypted using their respective public
keys with the possibility by next to process such data remotely.
Its originality stands on a solution we propose so as to compute
the difference of data encrypted with Damgard-Jurik cryptosystem.
It takes also advantage of a secure combined linear congruential
generator that we implemented in the Damgard-Jurik encrypted
domain. Basically, in our HPRE scheme, the two users, the delegator
and the delegate, ask the cloud server to generate an encrypted noise
based on a secret key, both users previously agreed on. Based on
our solution to compute the difference in Damgard-Jurik encrypted
domain, the cloud computes in clear the differences in-between the
encrypted noise and the encrypted data of the delegator, obtaining
thus blinded data. In order the delegate gets access to the data,
the cloud just has to encrypt these differences using the delegate’s
public key and then removes the noise. This solution doesn’t need
extra communication between the cloud and the delegator. Our
HPRE was implemented in the case of the sharing of uncompressed
images stored in the cloud showing good time computation perfor-
mance, it is unidirectional and collusion-resistant. Nevertheless, it
is not limited to images and can be used with any kinds of data.
CCS CONCEPTS
• Security and privacy → Security services; Database and stor-
age security; Software and application security;
KEYWORDS
Security confidentiality, Processing of encrypted data, Homomor-
phic proxy re-encryption.
Permission to make digital or hard copies of all or part of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage and that copies bear this notice and the full citation 
on the first page. Copyrights for components of this work owned by others than ACM 
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, 
to post on servers or to redistribute to lists, requires prior specific permission and/or a 
fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12. . . $15.00
https://doi.org/10.1145/3134600.3134616
ACM Reference Format:
Reda Bellafqira, Gouenou Coatrieux, Dalel Bouslimi, Gwénolé Quellec,
and Michel Cozic. 2017. Proxy Re-Encryption Based on Homomorphic En-
cryption. In Proceedings of ACSAC 2017. ACM, New York, NY, USA, 8 pages.
https://doi.org/10.1145/3134600.3134616
1 INTRODUCTION
If cloud computing allows data owners to use massive data storage
and large computation capabilities at a very low costs, it also intro-
duces important security challenges. Indeed, data owners lose the
control over the pieces of information they outsource. To protect
data in terms of confidentiality and privacy from unauthorized
users, one common solution consists in encrypting data; solution
which may limit the possible sharing, reuse or processing of data.
In this work, we focus on the sharing of data between different
users that have already outsourced their data encrypted with their
own public keys, with by next the capacity to process these en-
crypted data. The sharing of encrypted data usually refers to proxy
re-encryption (PRE) [5], where Alice (the delegator or the emitter)
wants to share with Bob (the delegate or recipient) some data she
previously outsourced encrypted into the cloud (the proxy). When
asymmetric encryption is used, the objective of the proxy is to
re-encrypt Alice’s cipher-text, encrypted with her public key, into
a cipher-text that can be decrypted with Bob’s private key. To do
so, one simple PRE solution consists in providing the users’ private
keys to the proxy. However, this strategy is only valid if the proxy
is completely trusted. It does not work in the case the cloud is con-
sidered as semi-honest (i.e., it will not disclose the data but will be
curious). Blaze et al [5] proposed the first PRE scheme in such semi-
honest framework. It is based on the ElGamal cryptosystem and a
secret re-encryption key, a set of secret pieces of information, Alice
has to send to the proxy so as to make possible the re-encryption
of data with Bob’s public key. One main issue of this proposal [1]
is that it is inherently bidirectional. More clearly, the re-encryption
key which allows transferring cipher-texts from Alice to Bob, en-
ables the proxy to convert all Bob’s cipher-texts under Alice’s public
key. An unacceptable situation for Bob. The main reason of this
is that the re-encryption key depends on the delegate (Bob) pri-
vate key. Different approaches have been proposed to overcome
this issue. The first class of methods relies on classical asymmetric
encryption cryptosystems. For instance, [15] take advantage of a
quorum-based protocol which stands on distributed proxies, each
of them possesses a part of the data of Alice but receive a different
re-encryption key independent of Bob private key. The security of
154Alice private key is safe as long as some proxies are honest. An
alternative, proposed in [12], works with only one proxy where the
re-encryption key provided by Alice is split into two parts, one for
the proxy and the other for Bob. Unfortunately, with [12], the data
Alice encrypted with her public-key, are turned into symmetrically
encrypted data and not asymmetrically. The second class regroups
identity-based proxy re-encryption (IBPRE) schemes [13]. They
mix PRE with identity-based cryptography (IBC). In IBC, the public
encryption key of one user is derived from his identity (e.g., his
email address); by combining it with PRE, the emitter and the proxy
just need to know the delegates’ identities instead of verifying their
certificates. Basically, the unidirectional propriety is achieves due
to the fact the re-encryption key depends on the identity of the
delegate. However, it must be known that IB-PRE suffers of the
key-escrow issue (see [12] for more details). Most of these schemes
also rely on cryptosystems which are based on bilinear pairing
[8, 14, 20, 22, 26], an application considered as a very expensive in
terms of computation complexity compared to modular multiplica-
tion or exponentiation [2]. To overcome this issue, Deng et al. [10]
proposed an asymmetric cross-cryptosystem re-encryption scheme
instead of pairing. Beyond, if the above approaches allow one user
to share data with another one, they do not make possible the pro-
cessing of encrypted data by the cloud or proxy. This capacity is
usually achieved with the help of homomorphic cryptosystems.
With these ones, one can perform operations onto encrypted data
with the guarantee that the decrypted result equals the one carried
out onto un-encrypted data [24]. Homomorphic encryption has
been proposed so as to secure many applications in outsourced
frameworks, like biometric face recognition [21], diagnosis aid sup-
port [3, 4] and digital watermarking [6]. The first homomorphic
based PRE attempt has been proposed by Bresson et al. in [7] using
the Paillier cryptosystem [23]. However, even though their solution
makes possible data sharing, data are not re-encrypted with the
public key of the delegate. If this latter wants to ask the cloud to
process the data he receives from Alice, he has: i) first to download
the data, ii) decrypt them based on some secret pieces of informa-
tion provided by Alice; iii) re-encrypt them with his public key
and send them back to the cloud. There is thus still a need for a
homomorphic based PRE.
In this work, we propose a novel homomorphic proxy re-encryption
scheme which does not require the delegate to re-upload the data
another user has shared with him. Based on the Damgard-Jurik cryp-
tosystem, it can be roughly summarized as follows. Bob and Alice
agree on a secret key; key Alice sends Damgard-Jurik encrypted to
the cloud. The cloud uses this key so as to generate a Damgard-Jurik
encrypted random sequence with the help of a secure combined
linear congruential generator (SCLCG) we propose in the Damgard-
Jurik encrypted domain. All computations are conducted by the
cloud server. This SCLCG provides a sequence of Damgard-Jurik
encrypted random numbers. Based on a fast and new solution we
propose so as to compute the difference in-between Damgard-Jurik
encrypted data, the cloud: i) computes the difference in clear be-
tween this encrypted random sequence and the encrypted data of
Alice and, ii) encrypts this sequence of differences with the public
key of Bob. Then, Bob has to request the cloud to remove the noise
from the encrypted data in order to get access to the data Alice
wants to share with him and process them in an outsourced manner
if he wants.
The rest of this paper is organized as follow. In Section 2, we
come back on the Damgard-Jurik cryptosystem definition and show
how to: i) quickly compute the difference between Damgard-Jurik
encrypted data; ii) implement a secure combined linear congru-
ential generator in the Damgard-Jurik encrypted domain. Section
3 describes the overall architecture of our Homomorphic PRE so-
lution (HPRE) in the case of the sharing of images. Performance
of the proposed solution are provided and discussed in Section 4.
Conclusions are given in Section 5.
2 PROCESSING DAMGARD-JURIK
ENCRYPTED DATA
2.1 Damgard-Jurik cryptosystem
In this work, we opted for the asymmetric Damgard-Jurik cryp-
tosystem which is defined as follows [9]. Let ((д, Kp), Ks) be the
public/private key pair
Kp = pq
and Ks = LCM((p − 1),(q − 1))
(1)
where LCM is the least common multiple function and p and q are
p − 1} and Z∗
two large prime integers. ZK n
denotes
K n
p
the integers that have multiplicative inverses modulo Kn
p where n
is a natural number. We select д ∈ Z∗
K 2
p
= {0, 1, ..., Kn
p
such as:
д = (1 + Kp)jx mod Kn+1
.
p
p into the
(2)
where j is a known variable that relatively prime with Kp and
x ∈ Z∗
K n
p
The Damgard-Jurik encryption of a plain-text m ∈ ZK n
using the public key Kp is given by
cipher-text c ∈ Z∗
p mod Kn+1
K n+1
p
c = E[m, r] = дmr K n
(3)
where, r ∈ Z∗
is a random integer associated to m making the
Kp
Damgard-Jurik cryptosystem probabilistic or semantically secure.
More clearly, depending on the value of r, the encryption of the
same plain-text message will yield to different cipher-texts with the
same encryption key. A fast implementation of this crypotsystem
can be achieved by choosing д = 1 +Kp, this choice does not reduce
the algorithm security [9] . By doing so, the encryption of m into c
is given by
p
p
c = E[m, r] = (1 + Kp)mr Kp mod Kn+1
(4)
Based on the assumption д = 1 + Kp, the decryption of c using the
private Key Ks stands into two steps. In a first time, the decoder
computes:
cKs = (1 + Kp)Ksm mod Kn+1
(5)
To get access to the message m from cKs , the decoder has to calculate
Ksm. To do so, Damgard-Jurik propose an iterative procedure to find
m from (1 + Kp)m mod Kn+1
[9]. This procedure takes advantage
of the the Binomial theorem and a function L(.) defined such as
L(b) = b−1
, function that is applied repeatedly as follows. Taking
Kp
as input the quantity a = (1 + Kp)m mod Kn+1
, this algorithm
first computes L(a) which gives access to m1 = L(a mod K2
p) = m
p
p
p
155mod Kp (using Binomial theorem). Then by iteratively calculating
mj up to j = n, such as :
mj = L(a mod K
j+1
p
Kp + ... + C
) − (C
j−1
p
mj−1
j
mj−1
2
K
the algorithm achieves mn = m mod kn
procedures we note as the function F(.) is given in algorithm 1.
p ( C
=
j
k
) mod K
j
p
(6)
(j−k)!k! ). This
j!
Algorithm 1 Damgard-Jurik algorithm
m ← 0
for j ← 1, n do
1: procedure F(a)
2:
3:
4:
5:
6:
7:
8:
t1 ← L(a mod K
t2 ← m
for k ← 2, j do
m ← m − 1