3.3. wait和waitpid函数
3.2.exec函数
3.1.fork函数
3.2.dup和dup2函数
3.1.内核数据结构
2.4.文件和目录操作的系统函数
2.3.数据块寻址
2.2.实例剖析
2.1.总体存储布局
部分IⅢl.Linux系统编程
全国嵌入式人才培训基地
513
---
## Page 514
32.正则表达式
31.Shell脚本
5.练习：在C语言中使用正则表达式
4. awk
3. sed
2.基本语法
6.Shell脚本的调试方法
5.Shell脚本语法
4.bash启动脚本
3.Shell的基本
5.练习：
1. 引言
1.Shell的历史
进程间通信
5.7.函数
5.1.
4.4.以sh命令启动
4.3.非交互启动
4.2.以交互非登录Shell启动
3.7. 双引
3.6.单引号
3.5.转义字符
3.3.命令代换：或$()
3.1.变量
2.2.执行脚本
2.1.执行交互式命令
5
5
4.2.其它IPC机制
4.1.管道
5l
5.6.位置参数和特殊变量
.5. while/do/done
.2. f/then/elif/else/fi
1.条件测试：test[
实现简单的Shell
语法
$(0)
或者使用--login参数启动
---
## Page 515
35.线程
34.终端、作业控制与守护进程
33.信号
3.线程间同步
1.线程的概念
3.守护进程
2.作业控制
4.捕捉信号
3.阻塞信号
7
1.终端
2.产生信号
1.信号的基本概念
线程控制
3.1. mutex
2.2.终止线程
2.2.与作业控制有关的信号
1.1.终端的基本概念
4.7.关于SIGCHLD信号
4.5. sig_atomic t类型与volatile限定符
4.3. pause
4.2. sigaction
4.1.内核如何实现信号的捕捉
3l
3.1.信号在内核中的表示
2
1.2.终端登录过程
3.2.信号集操作函数
2.2.调用系统函数向进程发信号
1.通过终端按键产生信号
5
---
## Page 516
37. socket编程
36.TCP/IP协议基础
第27章 本阶段总结
页
5.练习：实现简单的Web服务器
3.基于UDP协议的网络程序
2.基于TCP协议的网络程序
1.预备知识
7. TCP协议
6.UDP段格式
5.IP地址与路由
4.IP数据报格式
3.ARP数据报格式
2.以太网(RFC 894)帧格式
1.TCP/IP协议栈与数据包封装
4.编程练习
5.2.执行CGI程序
5.1.基本HTTP协议
2.6.使用select
2.4.使用fork并发处理多个client的请求
2.3.把client改为交互式输
2.2.错误处理与读写控制
2.1.最简单的TCP网络程序
1.2.socket地址的数据类型及相关函数
L
7.2.通讯时序
7.1
3.4.其它线程间同步机制
3.2. Condition Variable
1.1.网络字节序
.3.流量控制
段格式
全国嵌入式人才培训基地
起始页
第 28章文件与I/O
---
## Page 517
涉及体系结构时只讲x86平台，
统的内核都不一样。而本书的侧重点则不同,
作原理涉及得不够深入
读者可以结合[APUE2e]学习本书的第三部分,
统各部分的工作原理,
绍C标准库时并不试图把所有库函数讲一遍,
组织语言
还有一点非常不适合初学者，
的第三部分也并不试图把所有的系统函数进一遍，
本用法，在掌握了方法之后，书上没讲的库函数读者应该自已查ManPage学会使用。
作原理。
系统函数正是内核提供给应用程序的接口
从本章开始学习各种Linux系统函数.
8. mmap
7. ioctl
6. fcntl
5. lseek
3. open/close 
2.C标准I/O库函数与Unbuffered V/O函数
1. 汇编程序的Hello world
目录
第 28 章 文件与IVO 请点评
部分I.Linux系统编程
植的应用程序,
码，
上一页
了。也正因为该书要兼顾各种UNIX系统,
么统一的，
上二
，到4.4BSD又改成怎么样了
贝
，读者看到这里应该已经熟练掌握了C语言了，
就像只有掌握了英语才能看
还有哪些系统没有完全遵守POSIX标准）只会一
一定爱死他了
在有
而且假定读者具有-
我们在描述内核
作者不辞劳苦，
了这个基础之
，对于初学者来说，绑定到一
但初学者看了
 在SVR4上怎么样，
这些函数的用法必须结合Linux内核的工作原理来理解，因为
部分II. Linux系统编程
全国嵌入式人才培训基地
懂英文书
全国嵌入式人才培训基地
第28章文件与VO
后就应该能够看懂ManPage学习其它系统函数的用法。
工作原理时必然要用“指针"
所以没法深入讲解内核的工作原理，因为每种UNIX系
而要理解内核的工作原理，
，只讲Linux平台的特性，
7大段大段的这种描述（某某函数在4.2BSD上怎么
而是通过介绍一部分常用函数让读者把握库函数的基
在N多种UNIX系统上做了实验，分析了它们的内核
一定的操作系统基础知识,
起始页
上一级
该书在讲解系统函数方面更加全面,
而是通过介绍一部分系统函数让读者理解操作系
到Solaris又改成怎么样
所以应该有一个很好的起点了。
一个明确的平台上学习就不会觉得太抽象
一头雾水,
只讲Linux内核的工作原理,
所以并不适合初学者。该
“结构体"
不看倒还明白，
必须熟练掌握C语言，
很多开发者需要编写可移
1. 汇编程序的Hello world
才能看懂我描述的内核工
“链表"这些名词来
 但对于内核工
，同样.
，越看越不明
我们在介
65
下二
因为
本书
代
贝
---
## Page 518
看
空间传给内核，然后让内核去做VO操作,
作最终都是在内核中做的、
之前我们学习了如何用C标准IVO库读写
1.汇编程序的Hello world 点评
上一页
一个打印Hello world的汇编
例 28.1.汇编程序的Hello world
code
# and exit
(sys_exit)
(sys_write)
handle (stdout)
to message to write
length
# write our string to stdout
override the default.
recognize 
to the ELF linker or
declaration
dear string
msg:
declaration
_start:
.text 
:data
·global
int
 movl
movl
 movl
movl
int
moyl
movl
.ascii
_start as their
以前我们用的C标准IVO库函数最终也是通过系统调用把I/O操作从用户
_start
程户
 $1,%ebx
 $len,%edx
"Hello, world!\n"
$0x80
$l,%eax
$0,%ebx
$0x80
$4,%eax
$msg,%ecx
1.汇编程序的Hello world
解I/O
全国嵌入式人才培训基地
第 28章文件与VO
 # entry point. Use ld -e foo to
 # we must export the entry point
本章和下-
# loader. They conventionally
操
单作是怎样通过系统调用传给内核的。
本章详细讲解这些I/O操作
# call kernel
# system call number
# first argument: exit
# call kernel
# system call number
#
# second argument: pointer
# third argument: message
first argument: file
章会介绍内核中VO子系统的工作原理。首先
# section
 # section
 our dear string
实现的。
所有IO操
518
下二
贝
---
## Page 519
C代码中的write函数是系统调用的包装函数，
缓冲区的首地址。edx保存着输出的字节数。write系统调用把从msg开始的1en个字节写到标准输
第 28章文件与I/O
如此，我们讲过这些系统调用的包装函数位于Man Page的第2个Section。
出。
标识，称为文件描述符，
着write系统调用需要的三个参数。ebx保存着文件描述符，
调write系统调用时，
在_start中调了两个系统调用，
把汇编代码转换成目标文件，
话说就是字
这段汇编相当于以下C代码：
像以前一样，汇编、链接、运行:
也可能是用C内联汇编写的、
用C代码来写
计数器置成0，
主意在C语言中字符串的末尾隐含有一个"\0'
一页
"可以取出当前地址计数器的值，
int main(void)
#define ien 14
char msg[14] =
#include 
'S
'S
S
汇编程序中的1en代表一个常量，
因为任何C代码都不会编译生成int指令、
然后每处理-
write(1
exit(0);
 hello hello.0
 文件描述符1表示标准输出，
代表字符串"Hello，
= "Hello, world!\n";
一条汇编指示或指令就把地址计数器增加相应的字节数，在汇编程序中
msg;
甚至可能是-
 在这个过程中维护一个地址计数器，
，第一个是write系统调用，
len);
该值是-
全国嵌入式人才培训基地
它的值由当前地址减去符号msg所代表的地址得到，
一个宏定义
其内部实现就是把传进来的三个参数分别赋
world!\n"的首地址，
起始页
上一级
个常量。
而汇编指示.ascii
（省了参数入栈出栈的步骤）
一下这行代码中的"
所以这个函数有可能是完全用汇编写的
 第二个是以前讲过的_exit系统调用。在
 进程中每个打开的文件都用一个编号来
当处理到每个段的开头时把地
i定义的字符串末尾没有隐含
2. C标准I/O库函数与Unbuffered
相当于C程序的一个全局变量。
这个函数不可能完
汇编器总是从前到后
exit函数也是
I/O函数
换句
---
## Page 520
系如下图所示。
以写文件为例，
fclose(3)
fputc(3)
fgetc(3)
fopen(3)
现在看看C标准I/O库函数是如何用系统调用实现的。
2.C标准IVO库函数与UnbufferedVO函数请点评
上一页
如果IO缓冲区中还有数据没写回文件，
件，释放FILE结构体和I/O缓冲区。
判断该文件的I/O缓冲区是否有空间再存放
描述符从open系统调用获得，
返回，如果I/O缓冲区已满就调用write(2），让内核把I/O缓冲区的内容写回文件。
说，
区中读到
个FILE结构体的地址。
图28.1.
个FILE结构体
，打开的文件由FILE*指针标识，而对于内核来说，打开的文件由文件描述符标识，
让内核读取该文件的数据到IV/O缓冲区，然后返回下一个字符。注意，
，C标准I/O库函数（printf(3）、I
库函数与系统调用的层次关系
其中包含该文件的描述符、VO缓冲区和当前读写位置等信息，返回这
如果能读到就直接返回该字符,
2.C标准VO库函数与Unbuffered VO函数
，在使用read、write、close系统调用时都需要传文件描述符。
件的描达
全国嵌入式人才培训基地
第 28 章文件与VO
就调用write(2)写回文件，
术符
putchar(3)、
IO缓冲区和当
如果有空间则直接保存在I/O缓冲区中并
否则调用read(2)
前读写位置
与系统调用write(2)的关
然后调用close(2)关闭文
对于C标准I/O库来
把文件描述符传进
判断能否从VO缓冲
分配-
520
文件
下二
---
## Page 521
函数是ReadFile、WriteFile。
底层可能由另外一组系统函数支持，
在UNIx平台上才能使用Unbuffered I/O函数,
平台上应该都可以用C标准库函数（除了有些平台的C编译器没有完全符合C标准之外）
C标准库函数是C标准的一部分，
底层的Unbuffered I/O函数，那么用哪一组函数好呢？
open>
管理IVO缓冲区的麻烦。
多
用Unbuffered I/O函数每次读写都要进内核，调一个系统调用比调-
用Unbuffered I/O函数。
网络设备接收到数据时应用程序也希望第一时间被通知到，所以网络编程通常直接调