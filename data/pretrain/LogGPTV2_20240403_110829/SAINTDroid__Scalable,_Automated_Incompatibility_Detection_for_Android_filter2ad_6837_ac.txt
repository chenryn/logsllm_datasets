### Iterating Over API Levels and Querying the API

To iterate over the API levels that an application declares to support, you can query the API as follows:

```java
text.setTextColor(resources.getColorStateList(R.color.colorAccent, context.getTheme()));
```

#### Method: `setText`

```java
private void setText(TextView text) {
    // Implementation details
}
```

#### Method: `onCreate`

```java
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    TextView text = findViewById(R.id.text);

    if (Build.VERSION.SDK_INT >= 23) {
        setText(text);
    } else {
        // Handle older API levels
    }
}
```

### Code Exploring Context-Sensitive, Path-Sensitive, and Inter-Procedural Analysis

The code in Listing 3.1 demonstrates how our approach explores context-sensitive, path-sensitive, and inter-procedural analysis. The key difference from prior research, such as Cider [68], is that we consider all API callbacks in Android without any manual modeling of callbacks. This makes our approach easier to scale and more capable of detecting APIs with minimal manual work.

Jitana, our static analyzer framework, already provides a special flag for API callback methods. GAINDroid loops through these nodes in the graph, performing decoding and API database search from `minSdkVersion` to `maxSdkVersion`, which is 28.

### Mismatch Detection Component

#### Algorithm 2: Finding APC Mismatches

```plaintext
procedure IsApcMismatch(method, app)
    if IsApiOverride(method) then
        for each lvl in (app.minSdk..app.maxSdk) do
            if ¬apidb.Contains(method, lvl) then
                mismatches ← mismatches ∪ {method}
    return mismatches
```

#### Algorithm 3: Finding PRM Mismatches

```plaintext
procedure DetectPermissionMismatch(app, graph, permMap)
    dangerousPerms ← GetDangerousPermsFromManifest(app)
    if dangerousPerms = ∅ then
        return ∅
    callGraph ← BuildCallGraph(app)
    if app.targetSdkVersion ≥ 23 then
        for each method in callGraph do
            if OverridesOnRequestPermissionsResult(method) then
                return ∅
    for each method in callGraph do
        dataFlowGraph ← GetDataFlowGraph(graph, method)
        for each block in dataFlowGraph do
            for each perm in dangerousPerms do
                if permMap.IsUsingPermission(perm, block) then
                    mismatches ← mismatches ∪ {perm}
    return mismatches
```

This component detects incompatibilities related to the new run-time permissions system introduced in API level 23. The algorithm checks for permission-induced compatibility issues by first extracting dangerous permissions from the app’s manifest. If there are no dangerous permissions, there is no risk of mismatches. For apps targeting API level 23 or higher, it checks if the call graph contains a method overriding `onRequestPermissionsResult`. If not, it returns an error message indicating that developers should implement this functionality to avoid run-time crashes.

### Empirical Evaluation

This section evaluates GAINDroid, implemented on top of the Jitana framework [66]. Jitana is a high-performance hybrid analysis tool for Android, working directly on Dalvik executable (dex) files contained in APKs. We use APKTool [28] to decompile APKs, accessing their manifest files and binaries. Thus, our approach does not require source code, only the executables (APKs).

We modified Jitana to decode dex files using Android version 6.0.0, which introduced the new runtime permissions system. We also extended Jitana to perform inter-procedural data flow analysis, enabling detection of more API-related issues within different methods of an Android app.

#### Research Questions

- **RQ1: Accuracy** - What is the overall accuracy of GAINDroid in detecting compatibility issues compared to other state-of-the-art techniques?
- **RQ2: Applicability** - How well does GAINDroid perform in practice? Can it find compatibility issues in real-world applications?
- **RQ3: Performance** - What is the performance of GAINDroid’s analysis to identify sources of compatibility issues?

#### Objects of Analysis

To evaluate GAINDroid, we used 7 benchmark apps (CiD-Bench) from [51] and 20 apps (Cider-Bench) from [46]. Out of the 27 benchmark apps, eight could not be built, leaving 19 apps for our comparative study. The benchmark apps vary in size and target a variety of API levels.

| No. | App Name | Downloads | Rating | KLoC | Number of Methods | minSdkVersion | targetSdkVersion |
|-----|----------|-----------|--------|------|------------------|---------------|------------------|
| 1   | AFWall   | 500K+     | 4.3    | 21.8 | 46184            | 15            | 23               |
| 2   | DuckDuckGo | 1M+      | 4.4    | 10.4 | 45049            | 21            | 27               |
| 3   | FOSS Browser | 5K+     | 4.2    | 18.0 | 10946            | 21            | 27               |
| 4   | Kolab notes | 1K+     | 4.1    | 73.4 | 34969            | 16            | 26               |
| 5   | MaterialFBook | 10K+    | 4.3    | 68.0 | 34526            | 17            | 27               |
| 6   | Network monitor | 50K+  | 4.3    | 20.8 | 43942            | 14            | 27               |
| 7   | NyaaPantsu | -        | -      | 14.1 | 66249            | 21            | 27               |
| 8   | Padland   | -        | -      | 58.9 | 8713             | 14            | 26               |
| 9   | PassAndroid | 1M+     | 4.2    | 85.0 | 52696            | 14            | 25               |
| 10  | Simple Solitaire | 10K+  | 4.5    | 294.4 | 27782          | 11            | 25               |
| 11  | SurvivalManual | 10K+   | 4.7    | 49.4 | 35832            | 10            | 25               |
| 12  | Uber ride | 100M+    | 4.2    | 12.7 | 25610            | 14            | 26               |
| 13  | Basic     | -        | -      | 10.1 | 5099             | 10            | 26               |
| 14  | Forward   | -        | -      | 10.2 | 6201             | 10            | 26               |
| 15  | GenericType | -       | -      | 12.4 | 5564             | 10            | 26               |
| 16  | Inheritance | -       | -      | 11.2 | 6039             | 10            | 26               |
| 17  | Protection | -       | -      | 10.9 | 5198             | 10            | 26               |
| 18  | Protection2 | -       | -      | 10.8 | 5988             | 10            | 26               |
| 19  | Varargs   | -        | -      | 12.7 | 5876             | 10            | 26               |

We used Android Studio version 3.1.3 to load and build the benchmark apps. Eight apps from CiD-Bench could not be built due to Gradle plugin and toolchain errors.