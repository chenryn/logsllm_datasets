two subsets: the history period comprising the data from
the interval 1994 to 2005 (2/3 of the valid vulnerabilities),
and the observed period for the years between 2006 and
2010 (1/3 of the valid vulnerabilities). The objective is to
employ the history period to pick groups of OSes to deploy
in an hypothetical intrusion-tolerant system (e.g., BFS [3]
or DepSpace [7]), and then use the data on the observed
period to verify if the number of shared vulnerabilities is
as small as expected. Table V presents the result of the
analysis for groups of Isolated Thin Servers. The experiment
does not consider Ubuntu, OpenSolaris and Windows 2008
due to lack of meaningful data during the history period.
In the table, values above the diagonal
line and to the
right correspond to common vulnerabilities in pairs of OSes
during the history period. Values to the left and below the
diagonal line represent the observed period results.
For the base case consider that one wants to tolerate a
single intrusion, i.e., f = 1, in a set of four identical (non-
diverse) replicas (e.g., because one wants to keep admin-
istrative tasks simple). The best strategy for this scenario
would be to pick the OS with the least vulnerabilities
during the history period. Debian would be the best choice
because it only had 16 vulnerabilities that could be remotely
exploited either in the drivers, kernel or system programs.
Over the observed period, this system would have 9 shared
vulnerabilities (i.e., the ones that were reported for Debian
between 2006 and 2010) that could compromise the four
replicas of the hypothetical system (see Figure 3).
If one had chosen to employ the “most diverse” oper-
ating system group based on what was reported on the
history period, then the selected OSes would be Set1 of
Figure 3, which is composed by {Windows 2003, Solaris,
Debian and OpenBSD}. During the observed period, this
set would only have one vulnerability affecting two of the
replicas – OpenBSD and Windows 2003. Alternatively, if we
had chosen the second “most diverse” conﬁguration, where
NetBSD would substitute OpenBSD, then one would add
3 extra common vulnerabilities during the history period.
However, during the observed period, one would still only
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:50 UTC from IEEE Xplore.  Restrictions apply. 
390distinctions are made between OS releases. Newer releases
of an OS can contain important code changes, and therefore,
current vulnerabilities may not appear in previous versions.
As a result, if we consider (OS, release) pairs, one may
augment the number of different systems that do not share
vulnerabilities.
This section presents some preliminary results about
exploring diversity across OS releases. We looked for se-
curity advisories (or trackers) available in the various OS
websites to determine if they correlate the vulnerabilities
patched in each release with the information in NVD. This
correlation was found in a meaningful way in four of
the OSes under study: NetBSD,6 Debian,7 Ubuntu,8 and
RedHat.9 From all combinations of pairs of these OSes
in an Isolated Thin Server conﬁguration,
the pair with
highest number of common vulnerabilities is Debian-RedHat
(see Tables III and IV). Table VI presents the number of
common vulnerabilities for three releases of Debian and
RedHat, spread along the following years: Debian2.1, 1999;
Debian3.0, 2002; Debian4.0, 2007; RedHat6.2*, 2000; Red-
Hat4.0, 2005; RedHat5.0, 2007. One can observe that even
though Debian-RedHat shared a total eleven vulnerabilities,
the (OS, release) pairs are mostly without common ﬂaws,
both in the case of the same OS but distinct releases (left
side of the table) and between different operating systems
(right side of the table). These same kind of beneﬁts were
also reported in a previous work related with non-security
bugs for database management systems [18].
OS Versions
Debian2.1-Debian3.0
Debian2.1-Debian4.0
Debian3.0-Debian4.0
RedHat6.2*-RedHat4.0
RedHat6.2*-RedHat5.0
RedHat4.0-RedHat5.0
Total
0
0
1
0
0
1
OS Versions
Debian3.0-RedHat6.2*
Debian3.0-RedHat4.0
Debian3.0-RedHat5.0
Debian4.0-RedHat6.2*
Debian4.0-RedHat4.0
Debian4.0-RedHat5.0
Debian2.1-RedHat6.2*
Debian2.1-RedHat4.0
Debian2.1-RedHat5.0
Total
0
0
0
0
1
1
0
0
0
COMMON VULNERABILITIES BETWEEN OS RELEASES.
Table VI
E. Summary of the Results of our Study
The main ﬁndings of the study can be summarized as:
1) The number of common vulnerabilities on the studied
operating system pairs was reduced by 56% on average
if the application and locally-exploitable vulnerabili-
ties are ﬁltered out;
2) More than 50% of the 55 OS pairs studied have at most
one non-application, remotely exploitable common
vulnerability;
3) The top-3 diverse setups for a four-replica system
(tolerating a single failure in typical intrusion-tolerant
6http://www.netbsd.org/support/security/release.html
7http://security-tracker.debian.org/tracker/
8http://people.canonical.com/ ubuntu-security/cve/
9https://www.redhat.com/security/data/cve/
Figure 3. Several conﬁgurations of OSes: Debian - only Debian;
Set1 is {Win2003, Solaris, Debian, OpenBSD}; Set2 is {Win2003,
Solaris, Debian, NetBSD}; Set3 is {Win2003, Solaris, RedHat,
NetBSD}; Set4 is {OpenBSD, NetBSD, Debian, Redhat}.
have a single common vulnerability (between NetBSD and
Windows 2003). Therefore, in both conﬁgurations of the
intrusion-tolerant system, the number of common vulner-
abilities would be extremely small, and lower than in the
base case.
The results also point out that one can deploy an intrusion-
tolerant system with few common vulnerabilities, which is
based only on Linux distributions and BSD ﬂavors (Set4
in Figure 3). Since these four OSes can be managed in
a relatively similar way, this type of conﬁguration can be
extremely useful for organizations that need to operate with
tight budgets – e.g.,
it would not be necessary to hire
personnel that knows how to administer Solaris or Windows
machines.
it
Table V shows that
is possible to build a set of
six operating systems with few vulnerabilities: two from
the BSD family (OpenBSD and NetBSD), one from the
Windows family (Windows 2003), the two Linux (Debian
and RedHat) and Solaris. By adding one extra operating
system, either FreeBSD or OpenSolaris (which only had 6
common vulnerabilities with Solaris in the observed period),
we would have seven options available, making it possible
to deploy diverse systems with f = 2 and f = 3, for 3 f + 1
and 2 f + 1 replicas, respectively.
D. Exploring Diversity Across OS Releases
The results from the previous section are encouraging
if one wants to build systems capable of tolerating a few
intrusions, since it is possible to select OSes for the replicas
with a small collection of common vulnerabilities. It is hard,
however, to support critical services that need to remain
correct with higher numbers of compromised replicas or
to use some Byzantine fault-tolerant algorithms that trade
performance by extra replicas (e.g., [6], [8]). The number
of available operating systems is limited, and consequently,
one rapidly runs out of different OSes (e.g., it is necessary
13 distinct OSes to tolerate f = 4 in a 3 f + 1 system). On
the other hand, our experiments are relatively pessimistic in
the sense that they are based in long periods of time and no
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:50 UTC from IEEE Xplore.  Restrictions apply. 
 0 10 20 30DebianSet1Set2Set3Set4# of vulnerabilitiesHistoryObserved16911122691122391system) are: {Windows 2003, Solaris, Debian and
OpenBSD}, {Windows 2003, Solaris, Debian and
NetBSD} and {Windows 2003, Solaris, RedHat and
NetBSD};
4) A preliminary analysis of the diversity among different
versions of Debian and RedHat distributions suggests
that there are possible setups with the same OS that
have a disjoint set of vulnerabilities.
5) There are two vulnerabilities from 2007 and 2008 that
affect six OSes, and one vulnerability from 2008 that
affected nine OSes;
6) Driver vulnerabilities accounts only for a very small
set (less than 1.5%) of all reported OS vulnerabilities.
V. DISCUSSION
A. Limitations of NVD and its Implications on the Study
The numbers we have presented are intriguing and point
to a potential for serious security gains from assembling a
intrusion-tolerant system using different operating systems.
But they are not deﬁnitive evidence. Even though the NVD
is arguably the most complete and referenced database for
security vulnerabilities and it
is regularly updated with
contributions from several sources, there are several uncer-
tainties that remain about the data, which limit the claims we
can make about the beneﬁts of diversity to increase security.
Ozment [31] points out some problems with the NVD
(chronological inconsistency, inclusion, separation of events
and documentation); for our purposes, the ﬁrst two and the
last one are the most relevant. “Chronological inconsistency”
means that the NVD data has inherent inaccuracies about the
dates when vulnerabilities were discovered and when the
vulnerable code was released, which not only complicates
reasoning about the lifetime of vulnerabilities but also affects
the versions that are vulnerable (for instance, sometimes
obsolete versions of a product are vulnerable but are not
listed in the NVD as such). “Inclusion” refers to the fact that
not all vulnerabilities are included in the NVD, only those
with a CVE number; as CVE and NVD have gained traction,
this has become less of an issue. Finally, there is little
documentation about the NVD, and, in the past, the meaning
of some ﬁelds has occasionally changed without prior notice,
which might make comparisons less meaningful. In what
follows, we will discuss some other limitations and the
implications that they have on the claims we can make about
the beneﬁts of diversity:
1) The NVD does not provide “reproducible scripts” or
exploits – probably wisely – which would allow one to
check whether the vulnerability can be exploited. From
our past experience of working with non-security
related bugs [18], a bug report usually contains a
script that reproduces the failure that the reporter has
observed. Relying solely on the data available in the
NVD, it is not possible to conﬁrm that a reported
vulnerability is actually exploitable.
Implication: The lack of exploitability information
makes it harder to adequately assess the risk posed by
a vulnerability. Caution forces us to consider that all
vulnerabilities are exploitable, and must be remediated
in due time, a strategy that has obvious implications
both in terms of cost and in terms of complexity of
management.
2) When a vulnerability is reported for more than one
operating system, it is not clear whether the reporter
has checked that it has been conﬁrmed to exist in the
OSes, or it is just an indication that the vulnerability
may exist in each of the operating systems listed.
Implication: The implications of the previous item
apply here as well. Additionally, we have the implica-
tion that we cannot claim with certainty whether our
estimates of the beneﬁts of diversity, given earlier in
the paper, are conservative or optimistic. If a vulnera-
bility has been reported for operating systems A and
B but in fact only exists in A, then our estimates are
conservative. On the other hand, if the vulnerability
has been reported for operating systems A and B only,
but in fact it exists additionally in operating systems
C and D, then our estimates are optimistic.
3) Although more than 70 organizations (including many
important OS vendors) use CVE to identify vulner-
abilities, it is not clear if all products are equally
represented in the NVD. Another related issue is that
the vulnerability reporting process is inherently biased,
both in timing and in coverage, although not necessar-
ily in an intentional manner. For instance, when a new
class of vulnerabilities is discovered or disseminated,
there is often a surge of new reports involving this
class, as it has happened with format string bugs [38]
and integer overﬂows [39]. Finally, not all targets are
given the same attention by vulnerability researchers.
Software with smaller user bases tend to attract less
scrutiny than popular ones, vulnerabilities with higher
impact usually receive more attention, and there is
even the case when speciﬁc vendors are targeted for
some reason, as when Oracle claimed their database
was “unbreakable” only to have several vulnerabilities
disclosed within 24 hours [40], and the rise in exploita-
tion of Adobe software in the last 15–20 months [41].
Implication: With any analysis of bug or vulnerability
reports from an open database, there is uncertainty
about how many of the vulnerabilities are actually
reported. This fraction is certainly less than 100%. If
all vulnerabilities had the same probability of being
reported, the ratio between our predicted vulnerability
counts for AB (mAB – those that affect both products
A and B) and A or B (mA or mB – those that
affect only one of the products) would still be the
ratio mAB/mA or mAB/mB respectively. But, in fact,
we do not know whether the vulnerabilities of some
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:50 UTC from IEEE Xplore.  Restrictions apply. 
392operating systems are less likely to be reported in
NVD than others (or conversely). It is not clear if
the vulnerabilities of some operating systems are re-
ported to the vendors only (or some other vulnerability
database) and do not appear in NVD. This again has
implications about the claims that we can make about
the beneﬁts of diversity, as data entries may be missing
which overestimate the beneﬁts of diversity for some
products.
B. Decisions about deploying diversity
We have underscored that these results are only prima
facie evidence for the usefulness of diversity. On average,
we would expect our estimates to be conservative as we
analyzed aggregated vulnerabilities across releases: common
vulnerabilities could be much smaller in a “speciﬁc set” of
diverse OS releases. But, there are limitations on what can
be claimed from the analysis of the NVD data alone without
further manual analysis (other than what we have done, e.g.,
developing/ﬁnding and running exploit scripts on every OS
for each vulnerability). A better analysis would be obtained
if the NVD vulnerability reports were combined with the
exploit reports (including exploit counts), and even better
if they also had indications about the users’ usage proﬁle.
However, vendors are often wary of sharing such detailed
dependability and security information with their customers.
There are partial exploit reports available from other sites
(e.g., [36]), but they are incomplete and a signiﬁcant amount
of manual analysis is required to match the vulnerabilities
with exploits for each operating system.
Given these limitations, how can individual user organiza-
tions decide whether diversity is a suitable option for them,
with their speciﬁc requirements and usage proﬁles? The cost
is reasonably easy to assess: costs of the software products,
the required middleware (if any), added complexity of
management, difﬁculties with client applications that require
vendor-speciﬁc features, hardware costs, run-time cost of the
synchronization and consistency enforcing mechanisms, and
possibly more complex recovery after some failures. The
gains in improved security (from some tolerance to 0-day
vulnerabilities and easier recovery from some exploits, set
against possible extra vulnerabilities due to the increased
complexity of the system) are difﬁcult to predict except
empirically. This uncertainty will be compounded, for many
user organizations, by the lack of trustworthy estimates of
their baseline security. We note that, for some users, the
evidence we have presented would already indicate that
diversity to be a reasonable and relatively cheap precau-
tionary choice, even without highly accurate predictions
of its effects. These are users who have serious concerns
about security (e.g., high costs for interruptions of service
or undetected exploits), and applications which can run on
multiple operating systems.
VI. CONCLUSIONS
One way to decrease the probability of common vul-
nerabilities on the replicas of intrusion-tolerant systems is
by using diverse OTS software components. In this paper
we analyzed the likelihood of common vulnerabilities on
an important class of OTS components used in intrusion-
tolerant systems: operating systems. We analyzed more than
15 years of vulnerability reports from NVD totaling 2120
vulnerabilities of eleven operating system distributions. The
results suggests substantial security gains by using diverse
operating systems for intrusion tolerance. We also discussed
in detail the limits on the claims we can make about the
beneﬁts of diversity from NVD data alone, and discussed
what additional data, analysis and clariﬁcations may be
needed to increase our conﬁdence about the claims on the
beneﬁts of diversity. Despite these limitations, we argue that
on average our estimates may be seen as conservative as we
analyzed aggregated vulnerabilities across releases – hence
common vulnerabilities could be smaller in a “speciﬁc set”
of diverse OS releases.
VII. ACKNOWLEDGMENTS
We would like to thank Paulo Sousa for his early work
on this research effort and Peter Bishop for commenting
on earlier drafts. This work was partially supported by
the EC through project FP7-257475 (MASSIF) and by
the FCT through the Multiannual and the CMU-Portugal
Programmes, and the project PTDC/EIA-EIA/100894/2008
(DIVERSE). Ilir Gashi is supported by a Strategic Develop-
ment Fund (SDF) grant from City University London.
REFERENCES
[1] L. Lamport, R. Shostak, and M. Pease, “The Byzantine
generals problem,” ACM Trans. on Programing Languages
and Systems, vol. 4, no. 3, 1982.
[2] P. Verissimo, N. F. Neves, and M. P. Correia, “Intrusion-
tolerant architectures: Concepts and design,” in Architecting
Dependable Systems, ser. LNCS, 2003, vol. 2677.
[3] M. Castro and B. Liskov, “Practical Byzantine fault-tolerance
and proactive recovery,” ACM Trans. on Computer Systems,
vol. 20, no. 4, 2002.
[4] J. Yin, J.-P. Martin, A. Venkataramani, L. Alvisi, and
M. Dahlin, “Separating agreement form execution for Byzan-
tine fault tolerant services,” in Proc. of the ACM Symp. on
Operating Systems Principles, 2003.
[5] M. Correia, N. F. Neves, and P. Veríssimo, “How to tolerate
half less one Byzantine nodes in practical distributed sys-
tems,” in Proc. of the IEEE Symp. on Reliable Distributed
Systems, 2004.
[6] M. Abd-El-Malek, G. Ganger, G. Goodson, M. Reiter, and
J. Wylie, “Fault-scalable Byzantine fault-tolerant services,”
in Proc. of the ACM Symp. on Operating Systems Principles,
2005.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:50 UTC from IEEE Xplore.  Restrictions apply. 
393[7] A. N. Bessani, E. P. Alchieri, M. Correia, and J. S. Fraga,
“DepSpace: a Byzantine fault-tolerant coordination service,”
in Proc. of the ACM/EuroSys Conference on Computer Sys-
tems, 2008.
[8] M. Seraﬁni, P. Bokor, D. Dobre, M. Majuntke, and N. Suri,
“Scrooge: Reducing the costs of fast Byzantine replication in
presence of unresponsive replicas,” in Proc. of the IEEE/IFIP
Dependable Systems and Networks, 2010.
[9] H. Moniz, N. F. Neves, M. Correia, and P. Verissimo, “RITAS:
Services for randomized intrusion tolerance,” IEEE Trans. on
Dependable and Secure Computing, vol. 8, no. 1, 2011.
[10] “National Vulnerability Database,” http://nvd.nist.gov/.
[11] B. Randell, “System structure for software fault tolerance,”
IEEE Trans. on Software Engineering, vol. 1, no. 2, 1975.
[12] A. Avizienis and L. Chen, “On the implementation of N-
version programming for software fault
tolerance during
execution,” in Proc. of the IEEE Computer Software and
Applications Conf., 1977.
[13] M. K. Joseph and A. Avizienis, “A fault-tolerant approach to
computer viruses,” in Proc. of the IEEE Symp. on Research
in Security and Privacy, 1988.
[14] S. Forrest, A. Somayaji, and D. H. Ackley, “Building diverse
computer systems,” in Proc. of the Workshop on Hot Topics
in Operating Systems, 1997.
[15] S. A. Hofmeyr and S. Forrest, “Architecture for an artiﬁcial
immune system,” Evolutionary Computation, vol. 8, no. 4,
2000.
[16] Y. Deswarte, K. Kanoun, and J.-C. Laprie, “Diversity against
accidental and deliberate faults,” in Computer Security, De-
pendability, and Assurance: From Needs to Solutions, 1998.
[17] R. R. Obelheiro, A. N. Bessani, L. C. Lung, and M. Correia,
“How practical are intrusion-tolerant distributed systems?”
Department of Informatics, University of Lisbon, DI/FCUL
TR 06–15, 2006.
[18] I. Gashi, P. Popov, and L. Strigini, “Fault tolerance via diver-
sity for off-the-shelf products: A study with SQL database
servers,” IEEE Trans. on Dependable and Secure Computing,
vol. 4, no. 4, 2007.
[19] B. P. Miller, L. Fredriksen, and B. So, “An empirical study
of the reliability of UNIX utilities,” Communications of the
ACM, vol. 33, no. 12, 1990.
[20] B. Miller, D. Koski, C. Lee, V. Maganty, R. Murthy,
A. Natarajan, and J. Steidl, “Fuzz revisited: A re-examination
of the reliability of UNIX utilities and services,” University.
of Wisconsin-Madison, CS-TR 1995–1268, 1995.
[21] A. Chou, J.-F. Yang, B. Chelf, S. Hallem, and D. Engler, “An
empirical study of operating systems errors,” in Proc. of the
ACM Symp. on Operating Systems Principles, 2001.
[22] A. Ozment and S. E. Schechter, “Milk or wine: Does software
security improve with age?” in Proc. of the USENIX Security
Symp., 2006.
[23] P. Anbalagan and M. Vouk, “Towards a unifying approach in
understanding security problems,” in Proc. of the IEEE Int.
Symp. on Software Reliability Engineering, 2009.
[24] P. Koopman and J. DeVale, “Comparing the robustness of
POSIX operating systems,” in Proc. of the IEEE Int. Symp.
on Fault-Tolerant Computing, 1999.
[25] R. J. Anderson, “Security in open versus closed systems—the
dance of Boltzmann, Coase and Moore,” in Conf. on Open
Source Software: Economics, Law and Policy, 2002.
[26] E. Rescorla, “Is ﬁnding security holes a good idea?” IEEE
Security & Privacy, vol. 3, no. 1, 2005.
[27] O. H. Alhazmi and Y. K. Malayia, “Quantitative vulnerability
the Annual
assessment of systems software,” in Proc. of
Reliability and Maintainability Symp., 2005.
[28] ——, “Application of vulnerability discovery models to major
operating systems,” IEEE Trans. on Reliability, vol. 57, no. 1,
2008.
[29] M. R. Lyu, Ed., Handbook of Software Reliability Engineer-
ing. McGraw-Hill, 1995.
[30] G. Schryen, “Security of open source and closed source soft-
ware: An empirical comparison of published vulnerabilities,”
in Proc. of the Americas Conf. on Information Systems, 2009.
[31] A. Ozment, “Vulnerability discovery & software security,”
Ph.D. dissertation, University of Cambridge, 2007.
[32] B. Littlewood, P. Popov, and L. Strigini, “Modeling software
design diversity: A review,” ACM Computing Surveys, vol. 33,
no. 2, 2001.
[33] B. Littlewood and L. Strigini, “Redundancy and diversity
in security,” in Proc. of the European Symp. on Research
Computer Security, 2004.
[34] “CVE terminology,” http://cve.mitre.org/about/terminology.
html.
[35] “Common platform enumeration,” http://cpe.mitre.org/.
[36] “CVE details website,” http://www.cvedetails.com/.
[37] A. Ganapathi, V. Ganapathi, and D. Patterson, “Windows
XP kernel crash analysis,” in Proc. of the Large Installation
System Administration Conference, 2006.
[38] T. Newsham, “Format
Inc.,
Tech. Rep., 2000, available from http://www.thenewsh.com/
~newsham/format-string-attacks.pdf.
string attacks,” Guardent,
[39] D. Ahmad, “The rising threat of vulnerabilities due to integer
errors,” IEEE Security & Privacy, vol. 1, no. 4, 2003.
[40] D. Litchﬁeld, “Hackprooﬁng Oracle Application Server,”
NGSSoftware Insight, Whitepaper, 2002.
[41] M. Labs, “2010 threat predictions,” Whitepaper, 2009, avail-
from http://www.mcafee.com/us/local_content/white_
able
papers/7985rpt_labs_threat_predict_1209_v2.pdf.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:50 UTC from IEEE Xplore.  Restrictions apply. 
394