.fi
 这里 \fIselect_statement\fR 是任意没有 ORDER BY，LIMIT，或者 FOR UPDATE 子句的 SELECT语句。 （如果用圆括弧包围，ORDER BY 和 LIMIT 可以附着在子表达式里。 如果没有圆括弧，这些子句将交给 UNION 的结果使用， 而不是给它们右手边的输入表达式。）
.PP
UNION 操作符计算那些涉及到的所有 SELECT 语句返回的行的结果联合。 一个行如果至少在两个结果集中的一个里面出现，那么它就会在这两个结果集的集合联合中。 两个做为 UNION 直接操作数的SELECT必须生成相同数目的字段， 并且对应的字段必须有兼容的数据类型。
.PP
 缺省地，UNION 的结果不包含任何重复的行，除非声明了 ALL 子句。 ALL 制止了消除重复的动作。
.PP
 同一SELECT语句中的多个 UNION 操作符是从左向右计算的， 除非用圆括弧进行了标识。
.PP
 目前，FOR UPDATE 不能在 UNION 的结果或输入中声明。
.SS "INTERSECT 子句"
.PP
INTERSECT 子句的一般形式是：
.sp
.nf
\fIselect_statement\fR INTERSECT [ ALL ] \fIselect_statement\fR
.sp
.fi
\fIselect_statement\fR 是任何不带 ORDER BY， LIMIT，或者 FOR UPDATE 子句的 SELECT 语句。
.PP
 INTERSECT 计算涉及的 SELECT 语句返回的行的集合交集。 如果一个行在两个结果集中都出现，那么它就在两个结果集的交集中。
.PP
 NTERSECT 的结果不包含任何重复行，除非你声明了 ALL 选项。 用了 ALL 以后，一个在左手边的表里有 m 个重复而在右手边表里有 n 个重复的行将出现 min(m,n) 次。
.PP
 除非用圆括号指明顺序， 同一 SELECT 语句中的多个 INTERSECT 操作符是从左向右计算的。 INTERSECT 比 UNION 绑定得更紧 --- 也就是说 A UNION B INTERSECT C 将读做 A UNION (B INTERSECT C)，除非你用圆括弧声明。
.SS "EXCEPT 子句"
.PP
EXCEPT 子句有如下的通用形式：
.sp
.nf
\fIselect_statement\fR EXCEPT [ ALL ] \fIselect_statement\fR
.sp
.fi
 这里 fIselect_statement\fR 是任何没有 ORDER BY，LIMIT，或者 FOR UPDATE  子句的 SELECT 表达式。
.PP
EXCEPT 操作符计算存在于左边SELECT  语句的输出而不存在于右边语句输出的行。
.PP
EXCEPT 的结果不包含任何重复的行，除非声明了 ALL 选项。 使用 ALL 时，一个在左手边表中有 m 个重复而在右手边表中有 n 个重复的行将出现 max(m-n,0) 次。
.PP
 除非用圆括弧指明顺序，同一 SELECT 语句中的多个 EXCEPT 操作符是从左向右计算的。 EXCEPT 和 UNION 绑定级别相同。
.SS "SELECT 列表"
.PP
\fBSELECT\fR 列表（在关键字 SELECT 和 FROM) 之间的东西）声明一个表达式，这个表达式形成 SELECT 语句的输出行。这个表达式可以（通常也的确是）引用那些在 FROM 子句里计算的字段。 通过使用 AS output_name， 我们可以为一个输出行声明另外一个名字。这个名字主要用做显示该行的标签。 它也可以在 ORDER BY 和 GROUP BY 子句里当作字段值的引用， 但是不能在 WHERE 或者 HAVING 子句里这么用；在那里，你必须写出表达式。
.PP
 除了表达式之外，我们也可以在输出列表上写一个 * 表示选出的行的所有字段的缩写。同样，我们可以写 \fItable_name.\fR*  作为来自某个特定表的字段的缩写。
.SS "ORDER BY 子句"
.PP
 可选的 ORDER BY 子句有下面的一般形式：
.sp
.nf
ORDER BY \fIexpression\fR [ ASC | DESC | USING \fIoperator\fR ] [, ...]
.sp
.fi
\fIexpression\fR 可以是一个输出字段（SELECT 列表）的名字或者序号， 或者也可以是用输入字段的数值组成的任意表达式。
.PP
ORDER BY 子句导致结果行根据指定的表达式进行排序。 如果根据最左边的表达式，两行的结果相同，那么就根据下一个表达式进行比较， 依此类推。如果对于所有声明的表达式他们都相同，那么以随机顺序返回。
.PP
 序数指的是列/字段按顺序（从左到右）的位置。 这个特性让我们可以对没有唯一名称的列/字段进行排序。 这一点从来不是必须的， 因为总是可以通过 AS 子句给一个要计算的列/字段赋予一个名称。
.PP
 在 ORDER BY 里还可以使用任意表达式， 包括那些没有出现在SELECT结果列表里面的字段。 因此下面的语句现在是合法的：
.sp
.nf
SELECT name FROM distributors ORDER BY code;
.sp
.fi
 这个特性的一个局限就是应用于 UNION，INTERSECT， 或者 EXCEPT 查询的 ORDER BY 子句只能在一个输出字段名或者数字上声明，而不能在一个表达式上声明。
.PP
 请注意如果一个 ORDER BY 表达式是一个简单名称， 同时匹配结果字段和输入字段， ORDER BY 将把它解释成结果字段名称。 这和 GROUP BY 在同样情况下做的选择正相反。 这样的不一致是由 SQL 标准强制的。
.PP
 我们可以给 ORDER BY 子句里每个列/字段加一个关键字 DESC （降序）或 ASC（升序）。如果不声明， ASC 是缺省。 我们还可以在 USING 子句里声明一个排序操作符来实现排序。 ASC 等效于使用 USING 。
(But the creator of a user-defined data type can define exactly what the
default sort ordering is, and it might correspond to operators with other
names.)
.PP
 在一个域里，空值排序时排在其它数值前面。换句话说，升序排序时， 空值排在末尾，而降序排序时空值排在开头。
.PP
 字符类型的数据是按照区域相关的字符集顺序排序的，这个区域是在数据库集群初始化的时候建立的。
.SS "LIMIT 子句"
.PP
LIMIT 子句由两个独立的子句组成：
.sp
.nf
LIMIT { \fIcount\fR | ALL }
OFFSET \fIstart\fR
.sp
.fi
 这里 \fIcount\fR 声明返回的最大行数，而 \fIstart\fR 声明开始返回行之前忽略的行数。
 .PP
  LIMIT 允许你检索由查询其他部分生成的行的某一部分。 如果给出了限制计数，那么返回的行数不会超过哪个限制。 如果给出了一个偏移量，那么开始返回行之前会忽略那个数量的行。
.PP
 在使用 LIMIT 时， 一个好习惯是使用一个 ORDER BY 子句把结果行限制成一个唯一的顺序。 否则你会得到无法预料的查询返回的子集 --- 你可能想要第十行到第二十行， 但以什么顺序？除非你声明 ORDER BY，否则你不知道什么顺序。
.PP
 查询优化器在生成查询规划时把 LIMIT 考虑进去了， 所以你很有可能因给出的 LIMIT 和 OFFSET 值不同而得到不同的规划（生成不同的行序）。 因此用不同的 LIMIT/OFFSET 值选择不同的查询结果的子集将不会产生一致的结果， 除非你用 ORDER BY 强制生成一个可预计的结果顺序。 这可不是毛病；这是 SQL 生来的特点，因为除非用了 ORDER BY 约束顺序， SQL 不保证查询生成的结果有任何特定的顺序。
.SS "DISTINCT 子句"
.PP
 如果声明了 DISTINCT，那么就从结果集中删除所有重复的行（每个有重复的组都保留一行）。 ALL 声明相反的作用：所有行都被保留；这个是缺省。
.PP
DISTINCT ON ( \fIexpression\fR [, ...] )
只保留那些在给出的表达式上运算出相同结果的行集合中的第一行。 DISTINCT ON 表达式是使用与 ORDER BY （见上文） 相同的规则进行解释的。请注意，除非我们使用了 ORDER BY 来保证我们需要的行首先出现，否则，每个 "第一行" 是不可预测的。 比如，
.sp
.nf
SELECT DISTINCT ON (location) location, time, report
    FROM weather_reports
    ORDER BY location, time DESC;
.sp
.fi
 为每个地点检索最近的天气报告。但是如果我们没有使用 ORDER BY  来强制对每个地点的时间值进行降序排序，那么我们就会得到每个地点的不知道什么时候的报告。
.PP
 DISTINCT ON 表达式必须匹配最左边的 ORDER BY 表达式。 ORDER BY 子句将通常包含额外的表达式来判断每个 DISTINCT ON 组里面需要的行的优先级。
.SS "FOR UPDATE 子句"
.PP
FOR UPDATE 子句有下面的形式
.sp
.nf
FOR UPDATE [ OF \fItable_name\fR [, ...] ]
.sp
.fi
.PP
FOR UPDATE 令那些被 SELECT 语句检索出来的行被锁住，就像要更新一样。 这样就避免它们在当前事务结束前被其它事务修改或者删除； 也就是说，其它视图 UPDATE，DELETE， 或者 SELECT FOR UPDATE 这些行的事务将被阻塞， 直到当前事务结束。同样，如果一个来自其它事务的 UPDATE， DELETE，或者 SELECT FOR UPDATE  已经锁住了某个或某些选定的行，SELECT FOR UPDATE 将等到那些事务结束， 并且将随后锁住并返回更新的行（或者不返回行，如果行已经被删除）。更多的讨论参阅 Chapter 12 ``Concurrency Control'' 。
.PP
 如果特定的表在 FOR UPDATE 中，那么只有来自这些表中的行才被锁住； 任何在 SELECT 中使用的其它表都只是和平常一样读取。
.PP
FOR UPDATE 不能在那些无法使用独立的表数据行清晰标识返回行的环境里； 比如，它不能和聚集一起使用。
.PP
FOR UPDATE 可以在 LIMIT 前面出现， 主要是为了和 7.3 之前的 PostgreSQL 兼容。 不过，它在 LIMIT 后面执行更高效，因此我们建议放在 LIMIT 后面。
.SH "EXAMPLES 例子"
.PP
 将表 films 和表 distributors 连接在一起：
.sp
.nf
SELECT f.title, f.did, d.name, f.date_prod, f.kind
    FROM distributors d, films f
    WHERE f.did = d.did
       title       | did |     name     | date_prod  |   kind
-------------------+-----+--------------+------------+----------
 The Third Man     | 101 | British Lion | 1949-12-23 | Drama
 The African Queen | 101 | British Lion | 1951-08-11 | Romantic
 ...
.sp
.fi
.PP
 统计用kind 分组的所有电影和组的列/字段的 len（长度）的和：
.sp
.nf
SELECT kind, sum(len) AS total FROM films GROUP BY kind;
   kind   | total
----------+-------
 Action   | 07:34
 Comedy   | 02:58
 Drama    | 14:28
 Musical  | 06:42
 Romantic | 04:38
.sp
.fi