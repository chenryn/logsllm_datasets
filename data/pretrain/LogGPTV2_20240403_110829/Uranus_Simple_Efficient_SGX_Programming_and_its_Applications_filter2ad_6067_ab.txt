JOCall is invoked in CodeT, the application execution transits out
of the enclave until the function returns.
Figure 1 shows a key-value server program, simplified from
ZooKeeper [13]; the partition of this program is based on the parti-
tion from SecureKeeper [28]. In the program, handle_request and
its callees (e.g., decrypt) are in CodeT, while the other functions are
in CodeU. Initially, the program runs outside enclaves, and Uranus
creates one enclave for it. When the program receives an encrypted
client request r_en, it calls handle_request to decrypt r_en to
r and conducts a get or put operation. Since handle_request is
annotated as JECall, the execution transits into an enclave. All
functions called by handle_request (e.g., decrypt) run in en-
claves, except the store function annotated as JOCall. store
stores encrypted key-value pairs outside enclaves, maintaining a
small TCB and low enclave memory footprint.
3.3 Architecture
Figure 2 shows Uranus’s architecture. Uranus consists of five
trusted components: a code integrity verifier, an JIT compiler, an
enclave adaptor, a garbage collector, and an exception handler. For a
server application, Uranus creates one enclave in the local machine
and loads these components into the enclave.
JECallvoid main(args)While (running)r=recv_request()re=handle_requ(r)send_respone(re)byte[] handle_request(r_en)Request r = decrypt(r_en)return encrypt(OK)if (r.type == Request.PUT)store(enc(r.key), enc(r.value))returnRequest decrypt(r_en)return r// decrypt and parse r_enfunctioncalltrusted code (code_T)untrusted code (code_U)void store(key, value)return// Store kv pair in hashtableJOCallreturnFigure 2: The architecture of Uranus. Uranus’s components are shaded.
Code Verifier (§4.1) loads only the classes executed in the en-
clave and verifies the hashes of the classes for their integrity, main-
taining a small TCB. Uranus’s JIT Compiler (§4.2) executes Java
bytecode in an enclave. It also handles JECall/JOCall transi-
tions with adaptors. Utility libraries (e.g., math) are included in
the enclave to provide necessary functionalities. Garbage Collec-
tor (§4.4) manages the enclave’s heap memory efficiently.
These components do not incur extra threats for confidential-
ity and integrity compared with the low-level SGX programming
model. For confidentiality, Uranus’s communication channels (i.e.,
Code Verifier and ECall Adaptor) between an enclave and untrusted
world do not leak secret data (§4). For integrity, Uranus provides
a protocol (§4.1) for clients to attest the integrity of the code dy-
namically loaded into server applications’ enclaves. Uranus’s GC,
JIT and Exception Handler run entirely in enclaves do not incur
additional threats as they do not communicate with outside.
4 URANUS RUNTIME
The existing SGX programming approach in C/C++ takes a static
way to guarantee code integrity [41]. It generates a digest using
the initial state of all server applications’ statically compiled code
that may be used in enclaves and exchanges the digest with clients
for attesting the integrity of the code (i.e., attestation).
However, this static compilation approach is unsuitable for lan-
guages (e.g., Java and JavaScript) that run code in a dynamically
loading manner, because the dynamically loaded code is not in-
cluded in the initial state. To fix this issue, SecureWorker [9] stat-
ically compiles the JavaScript language runtime with application
code and all its dependent libraries, leading to a huge TCB. For
instance, the SpiderMonkey libraries are 521k LoC [12]. Moreover,
this approach cannot support dynamically loading code determined
at runtime (e.g., through Java Reflection).
A key requirement for Uranus’s code loading protocol is that it
must not expose attack surface to attackers outside an enclave. For
instance, Java’s default code loading method is to load each class
on demand (when it is needed for executions), but doing so in an
enclave will require loading each class from outside the enclave,
which exposes control flow to attackers.
Uranus’s code loading protocol is inspired by a static loading
protocol of dependent libraries, developed in Graphene-SGX [67].
Graphene-SGX loads executable and a manifest containing hashes
of dependent dynamic libraries during an enclave initialization, and
computes a hash of the executable and the manifest for clients to
verify. Uranus extends this static protocol in two aspects, leading
to a new runtime loading protocol. First, Uranus loads code in
the class level instead of the library level in order to minimize the
code size loaded into enclaves. Our analysis of one of our appli-
cations, Spark-Uranus, shows that loading only JECall’s depen-
dent classes consumes over 90% less enclave memory than loading
JECall’s dependent libraries (Appendix A). Second, Uranus sup-
ports loading classes provided at runtime (e.g., Spark UDF).
Given a version of application code, developers first compute
SHA256 hashes for all classes in a jar using jarsigner in OpenJDK.
Then, they use Uranus-dep provided by Uranus to automatically
find all dependent classes of all JECall (for the integrity of enclave
code, in §4.1) and all static invocation sequences of these JECall
(for the execution integrity of a sequence of JECall invocations, in
§4.3). Note that Uranus-dep’s class dependency is deterministic:
each version of application code has only one dependency. It also
generates a manifest of all JECall, JOCall, the static JECall invo-
cation sequences and package version. During the initialization of
an application enclave, Uranus loads all dependent classes into the
enclave and generates a measurement (hash) of both these classes’
hash and the manifest. This measurement serves as proof of the
integrity of loaded Java bytecode.
4.1 Integrity of Code Loading
Figure 3 shows the workflow of this protocol with six steps. (1)
Uranus creates an enclave using standard SGX API for each server
application. The enclave contains all Uranus’s trusted components
but does not contain any application code. (2) When a server ap-
plication launches, the (untrusted) Uranus loader computes the
dependent classes of all JECalls and invokes the trusted Uranus
loader in the enclave to copy all these classes’ content, their hashes
and the manifest into the enclave. (3) Uranus’s trusted loader first
verifies each class’s content with its hash, and then computes a
hash H′
0 from both all classes’ hash and the manifest file. Note that
the content of these classes is not parsed at this moment.
(4) When a remote client (trusted) tries to connect to the server,
the client attests Uranus’s trusted components following SGX’s
standard attestation protocol and establishes a secure communica-
tion channel using Diffie–Hellman [31]. (5) The enclave reveals H′
0
to the client. The client computes an H0 locally using Uranus-dep
for each version of an application’s code and caches H0. The client
compares H′
0 with H0, rejects the enclave if they are different. Note
that this key-exchange process only happens once when the client
byte[] handle_request(byte[]) {void main(String[] args) {Java CompilerJava Class LoaderECall AdaptorUranus JIT CompilerUranus GCJava InterpreterGarbage CollectorJIT CompilerJVM@JECall}}// handle request in enclave// main functionCodeVeriﬁerJarssignatureHeap Memory…Heap MemoryEncrypted MemoryEnclaveEnclave CallCode LoadingUtility LibsNormal CallHotspot?YesNoException HandlerTrusted ECall Adaptormethod’s bytecode to assembly code using the interpreter’s bytecode-
to-assembly template. Uranus’s JIT excludes the IR and its optimiza-
tions, because they contain a large TCB and are hard to verify [44].
Appendix B shows the assembly code generated by the JIT.
Uranus’s enclave adaptor handles transitions of JECall/JOCall.
In such a transition, an Iago attack may incur: an attacker can ma-
nipulate an object reference passed to JECall’s parameters, and
make the reference point to an arbitrary memory address within
the enclave. If such manipulations are not detected, the trusted code
within enclaves may write to this arbitrary memory address, easily
leading to various attacks (e.g., ROP attacks [24, 48]).
To eliminate Iago attacks from breaking type-safety of enclave
code during enclave transitions, when a thread calls a function
annotated as JECall, Uranus’s adaptor copies stack elements into
an enclave, verifies if it is a valid JECall by checking the function’s
metadata in the manifest, parses the corresponding loaded class file
and compiles the code (if the class has not been parsed in step (6) in
Figure 3). Then, the thread starts executing the JECall within the
enclave. Since stack elements are copied from outside, the adaptor
scans the stack content to ensure that no object reference in the
stack points to enclave memory. Uranus’s adaptor does the same
check for the returned value of JOCall.
Security Analysis: Uranus’s JIT does not incur any new attack
surface as it is completely isolated from outside the enclave. It takes
only verified class files from the dynamic code loader and compiles
them to native code, which does not require help from OS or leaving
enclaves. Therefore, attackers outside enclaves cannot infer the
execution flow of the trusted bytecode by observing OS signals or
AEX. Uranus’s enclave transitions eliminate Iago attacks. Overall,
Uranus’s JIT compiler supports all 203 bytecode instructions of
Java, achieves good performance on applications (§6.3), yet adds
only 2.1k LoC to the interpreter’s TCB.
4.3 Ensuring Enclave Confidentiality and
Integrity at Runtime
This paper requires the developers of an application to make efforts
to partition the trusted code and untrusted code. Developers should
have sufficient knowledge to include all or most sensitive functions
in the trusted code partition, or they can use static analysis tools
(e.g., Glamdring [51], Civet [16]) to infer the trusted partition. De-
velopers then use Uranus’s JECall and JOCall annotations to
realize the trusted and untrusted code partition. Specifically, they
add decryption functions to decrypt data passed into the entry
points of the partition, and add encryption functions to encrypt
computation results or updated data passed through the exit points
of the partition. This paper assumes that the entry and exit points
of the partition are correctly identified by developers, which is also
required by Glamdring.
To prevent code running within enclave from leaking secret
within enclaves to outside, Uranus enforces a tight boundary be-
tween trusted bytecode and untrusted bytecode at runtime by lever-
aging the type-safety of Java. Specifically, Uranus forbids enclave
code from accessing untrusted memory, unless these accesses use
Uranus’s untrust-memory-access API. To ease discussion, CodeT
denotes trusted application code running in an enclave. OT denotes
Figure 3: Uranus’s Attestation Protocol.
connects. (6) When a function (JECall or its callees) is called for
the first time, Uranus parses the content of the function’s class to
Uranus’s JIT compiler for executions.
In addition to JECall and dependent classes, Uranus also pre-
serves integrity of dynamically loaded code using Reflection (e.g.,
Spark’s UDF). Uranus provides an API (i.e., loadClass (className))
for the trusted code to load a class C and its dependent classes into
an enclave. This API runs step (2) ∼ (3) of the code loading proto-
col, except that class dependencies are computed at runtime using
Uranus-dep (§5). loadClass returns a hash H′
c of all the classes’
hashes, and H′
c is compared with a client provided Hc for integrity.
Since Uranus-dep is ran outside the enclave, an attacker can forge
the dependencies, but clients can detect this attack by comparing
H′
c and Hc.
Security Analysis: Uranus guarantees the integrity of byte-
code being loaded and runs within an enclave, as all JECalls’
dependent classes’ hashes are kept in an enclave. If an attacker
alters the content of a class before it is loaded, Uranus’s verifica-
tion of class content (Step 3) fails, and the enclave exits. When the
attacker provides a fake Java class and its corresponding hash, or
incorrect dependent classes to the enclave, clients will reject the
enclave (Step 5) as H′
4.2 Executing Java Bytecode in Enclaves
Java bytecode can be executed by an interpreter or a JIT compiler.
The interpreter in Hotspot (JVM) fetches a bytecode before jump-
ing to its assembly code snippet, generated by the interpreter. This
fetch-and-dispatch process adds many branch instructions to the
assembly code and often causes time-consuming missed branch pre-
dictions (§6.3). The JIT compiler in Hotspot is much faster than the
interpreter because it translates multiple Java bytecode to assembly
code, greatly reducing the branches of fetch-and-dispatch. This JIT
also contains an intermediate representation (IR) process with com-
plex optimizations during the translation to improve performance.
The IR and its optimizations have a large TCB (210k LoC).
0 is different from H0.
To maintain a small TCB, we first built a simple interpreter
based on OpenJDK’s interpreter [6]. Unfortunately, the interpreter
was too slow for diverse workload with loops (§6.3). To improve
performance, we built a simple JIT compiler for Uranus based
on Hotspot’s interpreter. Uranus’s JIT directly compiles each Java
Uranus EnclaveCode VerifierJIT CompilerClient (has H₀)Create Uranus Encalve Jars@JECallString[ ] map(..){..}Signaturevoid print(..){..}…Standard Attestation & Create Secure ChannelUntrusted CodeCopy bytecode & Manifest1243SignatureManifest & depdencyVerify per-class hash & compute H₀’H₀Reveal H₀’56   Parse class contentabort;
Algorithm 1: SafeGetfield(obj, field_name, type)
1 offset = field_metadata(obj, field_name);
2 if (obj + offset) ∈ [Enclavestart, Enclaveend) then
3
4 else
5
6
7
8
9
val = *(obj + offset);
if type == Object and val ∈ [Enclavestart, Enclaveend) then
else
abort;
return val;
objects located in an enclave’s heap, and OU denotes objects located
in the outside heap.
This boundary is enforced by two properties using runtime
checks injected in compiled code generated by Uranus’s JIT. The
first property is read-integrity: CodeT (trusted code) does not read
fields from OU (objects created by untrusted code). This prevents
CodeT reading a value from outside enclaves and changing CodeT’s
control flow.
The second property is write-confidentiality: CodeT does not
write any data in enclave memory to fields of OU. When the data is
written to untrusted memory, it is possible that the value is com-
puted from sensitive input data and thus also sensitive. Writing
this value to untrusted memory will probably break enclave confi-
dentiality. By enforcing this property, even if developers carelessly
omit to annotate some sensitive functions, the bytecode running
inside enclaves is forbidden to write any data to these functions
running outside enclaves via memory access.
Read-integrity and write-confidentiality are enforced by sim-
ply checking if a bytecode accesses objects in an enclave. These
checks compare an object pointer with the constant bound of en-
clave memory (i.e., [Enclavestart, Enclaveend)), throwing an error
if the object is out of bound . The bound is cached in two global vari-
ables and located in CPU registers for efficiency. As JVM provides
an Unsafe API to access raw memory of an object, Uranus also
includes bound checks in Unsafe. Uranus also prevents trusted
code invoking OU’s member functions in enclaves, as JVM decides
the entry point of an object’s member function according to its
class at runtime due to polymorphism. If such function calls are
allowed, attackers outside enclaves can tamper with OU’s classes to
inject arbitrary code.
In practice, some accesses to untrusted memory (e.g., reading en-
crypted data from outside enclave) are intended by developers and
should be allowed. In such cases, developers can use Uranus’s four
untrust-memory-access API: SafePutfield (obj, fieldname, val),
SafeGetfield(obj, fieldname, type) and SafeArrayCopy (src,
dest, len). This API disables runtime checks of read-integrity and
write-confidentiality as in the compiled enclave code.
Similar to enclave transitions, the untrusted memory accessed
by this API must not contain a reference to any memory address
within an enclave to avoid Iago attacks. Uranus does sanity checks
on these objects references. Algorithm 1 shows the pseudo-code
of SafeGetfield in Uranus, and SafeGetfield ensures the ob-
ject references returned are not pointing to enclave memory. The
checks in SafePutfield are similar to SafeGetfield’s, except
that SafePutfield uses val’s type in line 6 instead of the one pro-
vided by developers in SafeGetfield. SafeArrayCopy ensures
1
2
3
4
5
6
7
8
9
10
11
@JEcall
public void udf_process(char[] secrets) {
char[] plaintext = decrypt(secrets);
Record record = deserialize(plaintext);
if (record.disease == "cancer") {
// CanerCheck is 10KB and incurs GC
ret = new CancerCheck(record).analyze();
// an attacker can observe GC and
// infer the disease is cancer
}
}