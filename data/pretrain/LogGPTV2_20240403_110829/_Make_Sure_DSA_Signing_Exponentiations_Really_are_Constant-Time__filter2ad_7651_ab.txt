to be of extreme importance when we later collect our side-
channel information in Section 4.
2.4 Sliding Window Exponentiation
Sliding window exponentiation (SWE) is a widely imple-
mented software method to perform integer exponentiations,
e.g. featured alongside other methods in the OpenSSL code-
base. SWE is fairly popular due to its performance since it
reduces the amount of pre-computation needed and, more-
over, reduces the average amount of multiplications per-
formed during the exponentiation.
An exponent e is represented and processed as a sequence
of windows ei, each of length L(ei) bits. Processing the
exponent in windows reduces the amount of multiplications
at the cost of increased memory utilization since a table of
pre-computed values is used.
A window ei can be a zero window represented as a string
of “0”s or non-zero window represented as a string starting
and ending with “1”s and such window is of width w (de-
termined in OpenSSL by the size in bits of the exponent e).
The length of non-zero windows satisfy 1 ≤ L(ei) ≤ w, thus
the value of any given non-zero window is an odd number
between 1 and 2w − 1.
As mentioned before, the algorithm pre-computes values
and stores them in a table to be used later during multipli-
cation operations. The multipliers computed are bv mod m
for each odd value of v where 1 ≤ v ≤ 2w − 1 and these
values are stored in table index g[i] where i = (v− 1)/2. For
example, with the standard 160-bit q size, OpenSSL uses a
window width w = 4, the algorithm pre-computes multipli-
ers b1, b3, b5, ..., b15 mod m and stores them in g[0], g[1], g[2],
..., g[7], respectively.
Using the SWE representation of the exponent e, Algo-
rithm 2 computes the corresponding exponentiation through
a combination of squares and multiplications in a left-to-
right approach. The algorithm scans every window ei from
1https://tools.ietf.org/html/rfc4253
2http://www.openssh.com/legacy.html
Algorithm 2: Sliding window exponentiation.
Input: Window size w, base b, modulo m, N-bit
exponent e represented as n windows ei, each of
length L(ei).
Output: be mod m.
// Pre-computation
g[0] ← b mod m;
s ← MULT(g[0], g[0]) mod m;
for j ← 1 to 2w−1 − 1 do
g[j] ←MULT(g[j − 1], s) mod m;
// Exponentiation
r ← 1;
for i ← n to 1 do
for j ← 1 to L(ei) do
r ←MULT(r, r) mod m;
if ei (cid:54)= 0 then r ←MULT(r, g[(ei − 1)/2]) mod m;
return r;
the most signiﬁcant bit (MSB) to the least signiﬁcant bit
(LSB).
For any window, a square operation is executed for each
bit and additionally for a non-zero window, the algorithm
executes an extra multiplication when it reaches the LSB of
the window.
For novel reasons explained later in Section 3, the side-
channel part of our attack focuses on this algorithm. Specif-
ically, in getting the sequence of squares and multiplies per-
formed during its execution. Then we extract partial infor-
mation from the sequence for later use in the lattice attack.
2.5 Partial key disclosure
Recall that the nonce k and the secret key α satisfy the
following linear congruence.
s = k
−1(h(m) + αr) mod q
The constants of the linear combination are speciﬁed by
s, h(m), and r, which, typically for a signed message, are all
public. Hence, knowing the nonce k reveals the secret key
α.
Typically, side-channel leakage from SWE only recovers
partial information about the nonce. The adversary, there-
fore, has to use that partial information to recover the key.
The usual technique for recovering the secret key from the
partial information is to express the problem as a hidden
number problem [12] which is solved using a lattice tech-
nique.
2.5.1 The hidden number problem
In the hidden number problem (HNP) the task is to ﬁnd a
hidden number given some of the MSBs of several modular
linear combinations of the hidden number. More speciﬁcally,
the problem is to ﬁnd a secret number α given a number of
triples (ti, ui, (cid:96)i) such that for vi = |α · ti − ui|q we have
|vi| ≤ q/2(cid:96)i+1, where |·|q is the reduction modulo q into the
range (−q/2, . . . , q/2).
Boneh and Venkatesan [12] initially investigate HNP with
a constant (cid:96)i = (cid:96). They show that for (cid:96) < log1/2 q + log log q
and random ti, the hidden number α can be recovered given
a number of triples linear in log q.
Howgrave-Graham and Smart [21] extend the work of
Boneh and Venkatesan [12] showing how to construct an
HNP instance from leaked LSBs and MSBs of DSA nonces.
Nguyen and Shparlinski [27] prove that for a good enough
hash function and for a linear number of randomly chosen
nonces, knowing the (cid:96) LSBs of a certain number of nonces,
the (cid:96) + 1 MSBs or 2 · (cid:96) consecutive bits anywhere in the
nonces is enough for recovering the long term key α. They
further demonstrate that a DSA-160 key can be broken if
only the 3 LSBs of a certain number of nonces are known.
Nguyen and Shparlinski [28] extend the results to ECDSA,
and Liu and Nguyen [26] demonstrate that only 2 LSBs are
required for breaking a DSA-160 key. Benger et al. [9] ex-
tend the technique to use a diﬀerent number of leaked LSBs
for each signature.
2.5.2 Lattice attack
To ﬁnd the hidden number from the triples we solve a
lattice problem. The construction of the lattice problem
presented here is due to Benger et al. [9], and is based on
the constructions in earlier publications [12, 27].
Given d triples, we construct a d + 1-dimensional lattice
using the rows of the matrix
B =
2(cid:96)1+1 · q
2(cid:96)1+1 · t1
. . .
. . .
2(cid:96)d+1 · q
2(cid:96)d+1 · td
1
 .
√
By the deﬁnition of vi, there are integers λi such that
vi = λi · q + α · ti − ui. Consequently, for the vectors x =
(λ1, . . . , λd, α), y = (2(cid:96)1+1 · v1, . . . , 2(cid:96)d+1 · vd, α) and u =
(2(cid:96)1+1 · u1, . . . , 2(cid:96)d+1 · ud, 0) we have
x · B − u = y.
The 2-norm of the vector y is about
the determinant of the lattice L(B) is 2d+(cid:80) li · qd. Hence y
d + 1 · q whereas
is a short vector in the lattice and the vector u is close to
the lattice vector x· B. We can now solve the Closest Vector
Problem (CVP) with inputs B and u to ﬁnd x, revealing the
value of the hidden number α.
2.5.3 Related Work
Several authors describe attacks on cryptographic systems
that exploit partial nonce disclosure to recover long-term
private keys.
Brumley and Hakala [14] use an L1 data cache-timing at-
tack to recover the LSBs of ECDSA nonces from the dgst
command line tool in OpenSSL 0.9.8k. They collect 2,600
signatures (8K with noise) and use the Howgrave-Graham
and Smart [21] attack to recover a 160-bit ECDSA private
key. In a similar vein, Acıi¸cmez et al. [3] use an L1 instruc-
tion cache-timing attack to recover the LSBs of DSA nonces
from the same tool in OpenSSL 0.9.8l, requiring 2,400 sig-
natures (17K with noise) to recover a 160-bit DSA private
key. Both attacks require HyperThreading architectures.
Brumley and Tuveri [15] mount a remote timing attack on
the implementation of ECDSA with binary curves in Open-
SSL 0.9.8o. They show that the timing leaks information on
the MSBs of the nonce used and that after collecting that
information over 8,000 TLS handshakes the private key can
be recovered.
Benger et al. [9] recover the secret key of OpenSSL’s EC-
DSA implementation for the curve secp256k1 using less than
256 signatures. They use the Flush+Reload technique to
ﬁnd some LSBs of the nonces and extend the lattice tech-
nique of Howgrave-Graham and Smart [21] to use all of the
leaked bits rather than limiting to a ﬁxed number.
Van de Pol et al. [32] exploit the structure of the modulus
in some elliptic curves to use all of the information leaked
in consecutive sequences of bits anywhere in the top half of
the nonces, allowing them to recover the secret key after ob-
serving only a handful of signatures. Allan et al. [4] improve
on these results by using a performance-degradation attack
to amplify the side-channel. The ampliﬁcation allows them
to observe the sign bit in the wNAF representation used in
OpenSSL 1.0.2a and to recover a 256 bit key after observing
only 6 signatures.
Genkin et al. [19] perform electromagnetic and power anal-
ysis attacks on mobile phones. They show how to construct
HNP triples when the signature uses the low s-value [38].
3. A NEW SOFTWARE DEFECT
Percival [31] demonstrated that the SWE implementation
of modular exponentiation in OpenSSL version 0.9.7g is vul-
nerable to cache-timing attacks, applied to recover RSA pri-
vate keys. Following the issue, the OpenSSL team com-
mitted two code changes relevant to this work. The ﬁrst3
adds a “constant-time” implementation of modular exponen-
tiation, with a ﬁxed-window implementation and using the
scatter-gather method [13, 41] of masking table access to the
multipliers.
The new implementation is slower than the original SWE
implementation. To avoid using the slower new code when
the exponent is not secret, OpenSSL added a ﬂag (BN_FLG_-
CONSTTIME) to its representation of big integers. When the
exponent should remain secret (e.g. in decryption and sign-
ing) the ﬂag is set (e.g. in the case of DSA nonces, Figure 1,
Line 252) at runtime and the exponentiation code takes the
“constant-time” execution path (Figure 2, Line 413). Oth-
erwise, the original SWE implementation is used.
The execution time of the “constant-time” implementation
still depends on the bit length of the exponent, which in the
case of DSA should be kept secret [12, 15, 27]. The second
commit4 aims to “make sure DSA signing exponentiations
really are constant-time” by ensuring that the bit length of
the exponent is ﬁxed. This safe default behavior can be dis-
abled by applications enabling the DSA_FLAG_NO_EXP_CON-
STTIME ﬂag at runtime within the DSA structure, although
we are not aware of any such cases.
To get a ﬁxed bit length, the DSA implementation adds γq
to the randomly chosen nonce, where γ ∈ {1, 2}, such that
the bit length of the sum is one more than the bit length of
q. More precisely, the implementation creates a copy of the
nonce k (Figure 1, Line 264), adds q to it (Line 274), checks
if the bit length of the sum is one more than that of q (Line
276), otherwise it adds q again to the sum (Line 277). If q
is n bits, then k + q is either n or n + 1 bits. In the former
case, indeed k + 2q is n + 1 bits. As an aside, we note the
code in question is not constant-time and potentially leaks
the value of γ. Such a leak would create a bias that can be
exploited to mount the Bleichenbacher attack [5, 11, 18].
3https://github.com/openssl/openssl/commit/
46a643763de6d8e39ecf6f76fa79b4d04885aa59
4https://github.com/openssl/openssl/commit/
0ebfcc8f92736c900bae4066040b67f6e5db8edb
While the procedure in this commit ensures that the bit
length of the sum kq is ﬁxed, unfortunately it introduces a
software defect. The function BN_copy is not designed to
propagate ﬂags from the source to the destination. In fact,
OpenSSL exposes a distinct API BN_with_flags for that
functionality—quoting the documentation:
BN_with_flags creates a temporary shallow copy
of b in dest . . . Any ﬂags provided in flags will
be set in dest in addition to any ﬂags already set
in b. For example this might commonly be used
to create a temporary copy of a BIGNUM with
the BN_FLG_CONSTTIME ﬂag set for constant time
operations.
In contrast, with BN_copy the BN_FLG_CONSTTIME ﬂag does
not propagate to kq. Consequently, the sum is not treated
as secret, reverting the change made in the ﬁrst commit—
when the exponentiation wrapper subsequently gets called
(Figure 1, Line 285), it fails the security-critical branch. Fol-
lowing a debug session in Figure 2, indeed the ﬂag (explicit
value 0x4) is not set, and the execution skips the call to BN_-
mod_exp_mont_consttime and instead continues with the in-
secure SWE code path for DSA exponentiation.
In addition to testing our attack against OpenSSL (1.0.2h),
we reviewed the code of two popular OpenSSL forks: Li-
breSSL5 and BoringSSL6. Using builds with debugging sym-
bols, we conﬁrm both LibreSSL7 and BoringSSL8 share the
same defect. It is worth noting that BoringSSL stripped out
TLS DSA cipher suites in late 20149.
4. EXPLOITING THE DEFECT
In this section we describe how we use and combine the
Flush+Reload technique with a performance degradation
technique [4] to attack the OpenSSL implementation of DSA.
We tested our attack on an Intel Core i5-4570 Haswell
Quad-Core 3.2GHz (22nm) with 16GB of memory running
64-bit Ubuntu 14.04 LTS “Trusty”. Each core has an 8-way
32KB L1 data cache, an 8-way 32KB L1 instruction cache,
an 8-way 256KB L2 uniﬁed cache, and all the cores share a
12-way 6MB uniﬁed LLC (all with 64B lines). It does not
feature HyperThreading.
We used our own build of OpenSSL 1.0.2h which is the
same default build of OpenSSL but with debugging symbols
on the executable. Debugging symbols facilitate mapping
source code to memory addresses but they are not loaded
during run time, thus the victim’s performance is not af-
fected. Debugging symbols are, typically, not available to
attackers but using reverse engineering techniques [16] is
possible to map source code to memory addresses.
As previously discussed in Section 2.5, for DSA-type sig-
natures, knowing a few bits of suﬃciently many signature
nonces allows an attacker to recover the secret key. This
is the goal of our attack: we trace and recover side-channel
information of the SWE algorithm that reveals the sequence
5https://www.libressl.org
6https://boringssl.googlesource.com/boringssl
7https://github.com/libressl-portable/openbsd/blob/
master/src/lib/libssl/src/crypto/dsa/dsa ossl.c
8https://boringssl.googlesource.com/boringssl/+/master/
crypto/dsa/dsa.c
9https://boringssl.googlesource.com/boringssl/+/
ef2116d33c3c1b38005eb59caa2aaa6300a9b450
246
247
248
249
250
251
252
253
...
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286