from each of the 13 categories in the “recommended” sec-
tion of the Firefox Add-on directory. (See Appendix A for
a list.) We excluded one of the selected extensions because
it was distributed only as a binary. We veriﬁed that the 25
subject extensions were also highly ranked in the “popu-
lar” directory. To determine the extensions’ functionality,
we ran each extension and manually exercised its user in-
terface. We also located usage of the extension system API
by searching for explicit interface names in the extensions’
source code. (This methodology under-approximates the set
of interfaces.) We then manually correlated the interfaces
with the extensions’ functionality. This process could not
be automated because understanding high-level functional-
ity requires human judgement.
To compare the set of interfaces with extension func-
tionality, we assigned one of ﬁve ratings (critical, high,
medium, low, and none) to each interface and functional-
ity. These ratings are based on the Firefox Security Severity
Ratings [8]:
• Critical: Can run arbitrary code on the user’s system
(e.g., arbitrary ﬁle access)
• High: Can access site-speciﬁc conﬁdential informa-
tion (e.g., cookies and password) or the Document Ob-
ject Model (DOM) of all web pages
• Medium: Can access private user data (e.g., recent his-
tory) or the DOM of speciﬁc web pages
• Low: Can annoy the user
• None: No security privileges (e.g., a string) or privi-
leges limited to the extension itself
Results. Of the 25 subject extensions, only 3 require criti-
cal privileges (see Figure 2(a)). Therefore, 22 of the subject
extensions are over-privileged because all extensions have
the privilege to perform critical tasks. Despite the fact that
only 3 need critical privileges, 19 use a critical-rated in-
terface (see Figure 2(b)). An additional 3 use high-rated
interfaces despite needing only medium or less privileges,
meaning that a total of 19 extensions use interfaces that have
broader privileges than they require. Figure 3 shows the de-
tailed results. We summarize these results below:
• Three extensions, all download managers, require the
(These are the only
ability to create new processes.
4
!"#$%&’()(*#+,(-.(/012()(345()(6470(8(!"#$%&’()*+#,-*.*/012*3*Interface
Process launching (C)
Arbitrary ﬁle access (C)
Arbitrary ﬁle access (C)
Behavior
Process launching (C)
User chooses a ﬁle (N)
Extension-speciﬁc ﬁles (N)
Extension-speciﬁc SQLite (N) Arbitrary SQLite access (H)
Arbitrary network access (H)
Arbitrary network access (H)
Arbitrary network access (H)
Speciﬁc domain access (M)
Arbitrary DOM access (H)
Arbitrary DOM access (H)
Arbitrary DOM access (H)
Page for display only (L)
DOM of speciﬁc sites (M)
Arbitrary DOM access (H)
Arbitrary DOM access (H)
Highlighted text/images (L)
Password, login managers (H)
Password, login managers (H)
Cookie manager (H)
Cookie manager (H)
Same-extension prefs (N)
Browser & all ext prefs (H)
Browser & all ext prefs (H)
Language preferences (M)
Disparity?
No
Yes
Yes
Yes
No
Yes
No
Yes
Yes
Yes
No
No
Yes
Yes
Frequency
(12%)
3
(44%)
11
(40%)
10
3
(12%)
(40%)
8
(8%)
2
(36%)
9
(12%)
3
2
(8%)
(8%)
2
(12%)
3
(8%)
2
21
(84%)
(4%)
1
Figure 3. The frequency of security-relevant behaviors. The security rating of each behavior is ab-
breviated in parentheses. If the interface’s privilege is greater than the required behavioral privilege,
there is a disparity.
three extensions that actually require critical privi-
leges.) One extension converts ﬁle types using system
utilities, another runs a user-supplied virus scanner on
downloaded ﬁles, and the third launches a new process
to use the operating system’s shutdown command.
• None of the extensions we studied require arbitrary ﬁle
access. Several extensions access ﬁles selected by a
ﬁle open dialog, and most use ﬁles to store extension-
local data. The download managers interact with ﬁles
as they are downloaded.
• 17 extensions require network access (e.g., observing
network data) and/or web page access (e.g., manipu-
lating a page’s DOM). 10 require network access and
11 require access to web pages. Of the 10 extensions
that require network access, 2 require access only to a
speciﬁc set of origins.
• Nearly all of the extensions require access to an
extension-local preference store to persist their own
preferences, but only one changes global browser pref-
erences (to switch languages).
Discussion. Although every Firefox extension runs with
the user’s full privileges, only three of the extensions we an-
alyze actually require such a high level of privilege. The re-
maining 22 extensions exhibit a privilege gap: they run with
more privileges than required. Moreover, none of the sub-
ject extensions require arbitrary ﬁle access and only 70%
require network or web page access. The extension system
can reduce the privileges of these extensions without im-
pacting functionality.
Unfortunately, reducing the privileges of extensions in
the Firefox extensions system is difﬁcult because the Fire-
fox extension API bundles many privileges into a single
interface. This is evidenced by the 19 extensions that use
excessively powerful interfaces: 16 use critical-rated in-
terfaces and 3 use high-rated interfaces without needing
that level of privilege. For example, most extensions use
the preference service to store extension-local preferences.
This service can also change browser-wide preferences and
preferences belonging to other extensions.
We identiﬁed the ﬁle system interface as a common point
of excessive privileges. Most extensions use the ﬁle system
interface, which can read and write arbitrary ﬁles. These
extensions could make use of lower-privilege ﬁle storage
interfaces if such interfaces existed. For example, 11 of the
extensions could be limited to ﬁles selected by the user via
a ﬁle open dialog (analogous to the HTML ﬁle upload con-
trol), and 10 extensions could be limited to an extension-
local persistent store (like the HTML 5 localStorage
API) or an extension-speciﬁc directory. The download man-
agers could also be limited to the downloads folder.
3.2 The Security Lattice
Even if a developer explicitly requests only a small num-
ber of interfaces, other interfaces could be reachable from
that set. For example, a developer might request access
to a low-type object with a method that returns a critical-
type object; even though the developer has not asked for the
5
(cid:96) ρ (cid:44)→η α
(cid:13) α.subtype(β)
(cid:96) ρ (cid:44)→η β
SUBTYPING
(cid:96) ρ (cid:44)→η α
(cid:13) α.method(β)
(cid:96) ρ (cid:44)→η β
METHOD
(cid:13) α.getter(β)
(cid:13) α.method(1 → β)
GETTER
(cid:13) α.setter(β)
(cid:13) α.method(β → 1)
SETTER
(cid:96) ρ (cid:44)→ρ α
TYPE FORGERY
(cid:96) ρ (cid:44)→η α → β
(cid:96) ρ (cid:44)→η α → β
(cid:96) ρ (cid:44)→γ α
(cid:96) ρ (cid:44)→δ β
(cid:96) ρ (cid:44)→γ α
(cid:96) η (cid:44)→γ α
(cid:96) η (cid:44)→δ β
RETURN
(cid:96) η (cid:44)→δ β
PARAMETER
Figure 4. Inference rules for reachability in a type system with type forgery, such as the Firefox
extension API.
critical-type object, it is available. We consider this a form
of privilege escalation. To fully limit the privilege levels of
extensions, we must control these escalation points, either
by adding a reference monitor (e.g., to implement an access
control approach) or by taming the interface (e.g., to imple-
ment an object-capability approach). We analyze a subset
of the Firefox extension API to ﬁnd these escalation points.
In Firefox, extensions and internal browser components
use the same interfaces (known as XPCOM interfaces).
These strictly typed interfaces are deﬁned in a CORBA-
like Interface Description Language (IDL). We analyzed
the XPCOM interfaces from Firefox 3.5 by adding a Dat-
alog back-end to the Firefox IDL compiler. By default,
these interfaces are implemented internally by the browser.
However, extensions can (and do) replace these implemen-
tations. For example, the SafeCache [21] browser extension
replaces the HTTP cache. Regardless of the implementation
of an XPCOM interface, the browser enforces the return and
parameter types declared in the interface description.
We analyze the API for escalation points by organizing
the XPCOM interfaces into a security lattice. We manu-
ally label the severity of 613 interfaces (of 1582 total), in-
cluding all the interfaces used by the subject extensions.
We then automatically compute when an extension with a
reference to one interface might be able to obtain a ref-
erence to another interface by deductive inference on the
types used in the interfaces. Our deductive system is an
over-approximation because we do not consider the actual
implementation of the interfaces. Deductions based on the
handling of input parameters might be overly conservative
because it is not known which methods are called on the
input parameters in the implementation. For example, type
foo has a method that accepts type bar as a parameter.
Type bar has a method getFile that returns a ﬁle type.
We do not know whether an implementation of foo actu-
ally ever calls bar.getFile, but we know it is possible.
interfaces a principal
Deductive System. Our deductive system (see Figure 4)
computes which additional
(the
browser or an extension) can obtain from one interface.
Along with the interface name, the rules track which princi-
pal implements each concrete instance of the interface. We
write ρ (cid:44)→η α when principal ρ has a reference to an in-
terface α implemented by principal η. The deduction rules
then describe various ways a reference to one interface can
lead to a reference to another interface. For example, if ρ
possesses both a method of type α → β implemented by
η and an object with interface α implemented by γ, then
ρ can give the α object to η by calling the method. After-
wards, η will have a reference to an object with interface α
implemented by δ.
One subtle rule in the deductive system is the type
forgery rule. This rule states that every principal can cre-
ate an object that implements an arbitrary interface. This
rule is appropriate for XPCOM (and, in fact, most CORBA-
like component systems) because an extension can create a
JavaScript object that implements an XPCOM interface by
implementing the requisite methods and announcing sup-
port in its queryInterface method. This technique is
useful to attacks because an attacker can use a “forged” ob-
ject to call a method the attacker could not call otherwise.
6
the extension system is based on least privilege, privilege
separation, and strong isolation.
4.1 Least Privilege
Instead of running with the user’s full privileges, exten-
sions run with a restricted set of privileges. The browser
grants an extension access only to those privileges explic-
itly requested in the extension’s manifest. By requiring ex-
tensions to declare their privileges at install time, an attacker
who compromises an extension is limited to these privileges
at runtime. For example, consider the manifest for the sam-
ple Gmail Checker extension [13]:
Figure 5. The Firefox extension API reacha-
bility graph, from our deductive system. Up-
ward edges could lead to privilege escalation.
{
"name": "Google Mail Checker",
"description": "Displays the number of unread
messages...",