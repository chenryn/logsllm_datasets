先获取用户输人的信用卡号码并把它保存到一个变量中。在执行合法号码检查之前，
先执行查找和替换来去掉其中的空白和连字符。这可以通过把下面这个正则表达式全
局替换为空白的替换文本来完成：
[●-]
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
实例3.14中讲解了如何来用这个正则式执行替换。
检查号码
在从输人中去掉空格和连字符之后，下面这个正则表达式会检查该信用卡号码是否使
用了6个主要信用卡公司使用的任意一种格式。它同时还使用了命名捕获来检查该客
户使用的是哪个品牌的信用卡：
^(？:
1（（}6-0]:)）6-0]<>)
(?5[1-5][0-9](14}) 1
(?6(?:01115[0-9][0-9])[0-9](12}) 1
(?3[47][0-9](13))1
(?3(?:0[0-5]1[68][0-9])[0-9]{11}) 1
(？(?:213111800|35\d{3))\d{11})
$（
合法性验证和格式化
259
www.TopSage.com
---
## Page 276
正则选项：宽松排列
正则流派：.NET、PCRE7、Per15.10、Ruby 1.9
(？：
(?P5[1-5][0-9]{14})1
(?P6(?:01115[0-9][0-9])[0-9](12})1
(?P3[47][0-9]{13})|
(?P3(?:0[0-5]1[68][0-9])[0-9]{11}) 1
(?P(?: 213111800135\d{3})\d(11})
S（
正则选项：宽松排列
正则流派：PCRE、Python
Java、Perl5.6、Perl5.8和Ruby1.8不支持命名捕获。因此你可以使用编号捕获作为替
代。分组1中会捕获Visa信用卡号，分组2中捕获MasterCard，以此类推，分组6会
捕获JCB信用卡：
(？：
1（（[6-0]:)}[6-0])
#Visa
(5[1-5][0-9](14})1
MasterCard
(6(?: 01115[0-9][0-9]) [0-9]{12}) 1
Discover
(3[47][0-9](13})1
#
(3(?:0[0-5]1[68][0-9])[0-9]{11}) 1
Diners Club
JCB
正则选项：宽松排列
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
JavaScript不支持宽松排列。在把空白和注释去掉之后，我们会得到如下的正则表达式：
1（[6-0]-])1(（[6-0]:){)[6-0]):）
(6(? : 01115[09][09]) [09](12})1(3[47][0-9]{13})1
(3(?:0[0-5]1[68][0-9])[0-9]{11})1((?:21311180035\d{3))\d{11)))$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
如果你不需要决定使用的是哪种信用卡，那么可以去掉不必要的捕获分组：
^(？：
4[0-9]{12}(?:[0-9]{3})? 1
#Visa
5 [1-5][0-9]{14} 1
#MasterCard
6(?: 01115[0-9][0-9]) [0-9]{12} 1
Discover
3[47][0-9]{13}1
3(?:0[0-5]1[68][0-9])[0-9]{11} 1
#Diners Club
(?:213111800135\d{3))\d{11}
#JCB
S(
正则选项：宽松排列
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
这个是JavaScript的版本：
260
第4章
www.TopSage.com
---
## Page 277
16-0]（6-0]6-0]10)916-0]-16-0])6-0
3[47][0-9] {13}13(?:0[0-5]1[68][0-9]) [0-9](11}1(?:2131|1800135\d{3})\d{11}) $
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
按照实例3.6中所给的代码示例，可以把这个正则表达式添加到你的订购表单中来验证
信用卡号码。如果你对于不同卡会使用不同的处理中心，或者只是想记录一些统计数
据，那么可以使用实例3.9来检查匹配位于哪个命名或编号的捕获分组中。这会告诉
你客户使用的是哪种品牌的信用卡。
使用JavaScript的网页示例
Credit Card Test
Credit Card Test
Pleaseenter your credit cardnumber:
onkeyup="validatecardnumber(this.value)">
(no card number entered)
function validatecardnumber(cardnumber){
//Strip spaces and dashes
cardnumber =cardnumber.replace(/[-]/g,'');
// See if the card is valid
//The regex will capture the number in one of the capturing groups
1（}6-0]-])1（（6-0]:）6-1):）/
（[6-0][9]1-0]0:))1(}6-0]1)1(([6-01（6-0][6-0110)9)
[0-9]{11})1((?:213111800135\d(3})\d{11}))$/.exec(cardnumber) ;
if （match)(
//List of card types,in the same order as the regex capturing groups
var types =['visa','MasterCard','Discover'，'American Express',
'Diners Club','JCB'];
//Find the capturing group that matched
//Skip the zeroth element of the match array(the overallmatch)
for(var i=1;i
讨论
去掉空格和连字符
在一张实际的信用卡之上，突出的卡号通常会按照4个一组来进行排列。这样可以使
人可以在读卡号的时候更加容易。很自然的，许多人就会试图在订购表单中按照相同
的方式来输人卡号，并且把空格也包含进来。
构造一个正则表达式来检查支持空白、连字符和不知道什么奇怪符号的信用卡号码，
比构造一个正则表达式来检查只包含数字的卡号要复杂很多倍。因此，除非你想要反
复提醒用户重新输入不含空格和连字符的卡号，那么应该先用一个快速的查找和替换
来去掉这些字符，然后再检查卡号并把它送到信用卡处理中心。
正则表达式·-会匹配一个空格或连字符。把这个正则表达式的所有匹配都替换为
空，实际上就会删除所有的空白和连字符。
信用卡号码中只可以包含数字。除了使用-小去掉空格和连字符之外，你也可以使
用简写字符类D>来去掉所有的非数字。
检查号码
每个信用卡公司都会使用不同的号码格式。我们可以利用这种区别来允许用户直接输
人号码，而不必指定一个公司：公司可以通过号码来确定。下面列出了每个公司的号
码格式：
Visa
13位或16位数字，以4开头。
MasterCard
16位数字，以51～55开头。
Discover
16位数字，以6011或者65开头。
American Express
15位数字，以34或37开头。
262第4章
www.TopSage.com
---
## Page 279
DinersClub
14位数字，以300~305、36或38开头。
JCB
15位数字，以2131或1800开头；或者16位数字，以35开头。
如果你只接受某些种类的信用卡，那么你可以从正则表达式中删除你不接受的信用卡
种类。当删除JCB的时候，一定要同时删掉正则表达式最后剩下的。如果在正则表
达式中包含了<或者<，那么你就会把空串作为合法卡号接受。
举例来说，如果只接受Visa、MasterCard和AMEX，那么你可以使用：
(？：
4 [ 0 9] (12} (? : [0 9](3)) ? 1
#Visa
5 [1-5][09]{14}1
# MasterCard
3 [47][0 9]{13}
#AMEX
) $
正则选项：宽松排列
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
或者：
（6-0]]16-0]-]1（)6-0]:)6-0])
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
如果你需要在一个更大的文本中查找信用卡号码，那么就需要把定位符替换为单词边
界b。
在网页中使用本实例
前面“使用JavaScript的网页示例”小节中的代码展示了如何把这两个正则表达式添加
到你的订购表单中。信用卡号码输人框拥有一个onkeyup事件处理器，它会调用
validatecardnumberO函数。这个函数会从输入框中获取卡号，去掉空白和连字符，然后
使用包含编号捕获分组的正则表达式来对它进行检查。检查的结果会通过替换网页上
最后一个段落中的文本来显示给用户。
如果正则表达式没有产生匹配，regexp.exec(会返回null，并且显示（invalidcardnumber)。
如果正则表达式匹配成功，regexp.execO会返回一个字符串数组。其中第0个元素中保
存的是整个匹配。元素1～6会分别保存6个捕获分组匹配到的文本。
我们的正则表达式中包含6个捕获分组，它们之间由多选操作符分开。这意味着只有
一个捕获分组会参与匹配，并且会包含匹配的卡号。其他分组都是空的（根据你的浏
览器不同，或者是undefined，或者是空字符串）。这个函数会逐个检查6个捕获分组。
当它找到非空的分组的时候，就识别到了卡号，并且会将它显示给用户。
合法性验证和格式化263
www.TopSage.com
---
## Page 280
使用Luhn算法做进一步验证
在处理订单之前，你还可以对信用卡号码做进一步的合法性验证。信用卡号的最后一
个数字是根据Luhn算法来计算的校验和。因为该算法需要基本的算术运算，所以你无
法在正则表达式中实现它。
你可以把Luhn检查添加到这个实例中的网页示例中，在validatecardnumberO函数之前
调用luhn（cardnumber)。这样，就只有在正则表达式找到合法匹配，并且确定了信用卡
类型之后，才会执行Luhn检查。然而，在做Luhn检查的时候并不一定非要知道信用
卡的类型。所有信用卡都会使用相同的方法来计算。
在JavaScript中，你可以按照下面的方式来实现Luhn函数：
function luhn(cardnumber){
// Build an array with the digits in the card number
var getdigits=/\d/g;
var digits = [];
while (match = getdigits.exec(cardnumber)){
digits.push(parseInt(match[0], 10));
// Run the Luhn algorithm on the array