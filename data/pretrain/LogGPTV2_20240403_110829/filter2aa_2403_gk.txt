;; LISTING.INC 
;; 
;; This file contains assembler macros and is included by the files created 
;; with the -FA compiler switch to be assembled by MASM (Microsoft Macro 
;; Assembler). 
;; 
;; Copyright (c) 1993-2003, Microsoft Corporation. All rights reserved. 
;; non destructivenops 
npad macro size 
if size eq 1 
   nop 
else 
  if size eq 2 
    mov edi, edi 
  else 
  if size eq 3 
     ; lea ecx, [ecx+00] 
     DB 8DH, 49H, 00H 
  else 
    if size eq 4 
     ; lea esp, [esp+00] 
     DB 8DH, 64H, 24H, 00H 
   else 
     if size eq 5 
       add eax, DWORD PTR 0 
     else 
      if size eq 6 
        ; lea ebx, [ebx+00000000] 
       DB 8DH, 9BH, 00H, 00H, 00H, 00H 
      else 
        if size eq 7 
          ; lea esp, [esp+00000000] 
          DB 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H 
         else 
           if size eq 8 
            ; jmp .+8; .npad 6 
            DB 0EBH, 06H, 8DH, 9BH, 00H, 00H, 00H, 00H 
           else 
           if size eq 9 
            ; jmp .+9; .npad 7 
            DB 0EBH, 07H, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H 
           else 
            if size eq 10 
             ; jmp .+A; .npad 7; .npad 1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
850 
逆向工程权威指南（下册） 
            DB 0EBH, 08H, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 90H 
           else 
            if size eq 11 
             ; jmp .+B; .npad 7; .npad 2 
             DB 0EBH, 09H, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 8BH, 0FFH 
            else 
             if size eq 12 
              ; jmp .+C; .npad 7; .npad 3 
              DB 0EBH, 0AH, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 8DH, 49H, 00H 
             else 
              if size eq 13 
               ; jmp .+D; .npad 7; .npad 4 
               DB 0EBH, 0BH, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 8DH, 64H, 24H, 00H 
              else 
               if size eq 14 
               ; jmp .+E; .npad 7; .npad 5 
               DB 0EBH, 0CH, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 05H, 00H, 00H, 00H, 00H 
              else 
               if size eq 15 
                ; jmp .+F; .npad 7; .npad 6 
                DB 0EBH, 0DH, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 8DH, 9BH, 00H, 00H, 00H, 00H 
               else 
                %out error: unsupported npad size 
                .err 
               endif 
              endif 
             endif 
            endif 
           endif 
          endif 
         endif 
        endif 
       endif 
      endif 
     endif 
    endif 
   endif 
  endif 
 endif 
endm 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 8899 章
章    修
修改
改可
可执
执行
行文
文件
件  
89.1  文本字符串 
除了那些经过加密存储的字符串以外，我们可以使用任何一款的 hex editor 直接编辑 C 字符串。即使
那些不了解机器码和可执行文件具体格式的人，也可以使用这项技术直接编辑可执行程序中的字符串。修
改后的字符串，其长度不得大于原来字符串的长度，否则可能覆盖其他的数据甚至是其他指令。在 MS-DOS
盛行的时代，人们普遍使用这种方式直接用译文替换软件中的外文文字。至少在 20 世纪 80 年代和 90 年代
的前苏联，这种技术十分流行。所以，那个时代也出现了各种古灵精怪的超短缩写：预定长度的字符串存
储空间可能容纳不下完整的译文，所以软件翻译人员不得不绞尽脑汁压缩译文的长度。 
在修改 Delphi 程序的字符串时，有时还要调整字符串的长度。 
89.2  x86 指令 
修改可执行文件中汇编指令的方式有以下几种： 
 禁用某些指令。此时只要使用 0x90（NOP）替换相应的汇编指令即可。 
 禁用条件转移指令。在修改 74 xx（JZ）这样的条件转移指令时，我们可以直接把转移指令的 2
个字节替换为两个 0x90（NOP），也可以把第二个字节（jump offset）替换为 0，即把偏移量固定
为 0。 
 强制程序进行跳转。有些时候，我们需要把条件转移指令替换为跳转指令，强制其进行跳转。此
时，把 opcde 的第一个字节替换为 JMP 的 0xEB 即可。 
 禁用某函数。只要把函数的第一个指令替换为 RETN（0xC3），那么它就不会运行。只要程序的
调用约定不是 stdcall（第 64 章第 2 节），那么这种修改方法都不会有问题。在修改遵循 stdcall 约
定的函数时，修改人员首先要注意函数参数的数量（可查阅原函数的 RETN 指令），然后使用带
有 16 位参数的 RETN（0xC2）指令替换函数的第一条指令。 
 某些情况下，被禁用的函数必须返回 0 或 1。此时可使用“MOV EAX，0”或“MOV EAX，1”
进行处理。直接使用这两条指令的 opcode 进行替换时，您会发现其 opcode 较长。这种情况下就
可以使用“XOR EAX，EAX”（0x31 0xC0 两个字节）或 XOR EAX，EAX /INC EAX （0x31 0xC0 
0x40 三个字节）进行替换。 
很多软件采用了防范修改的技术。这种功能通常都由“读取可执行文件代码”和“校验和（checksum）
检验”两个步骤分步实现。即是说，要实现防修改机制，程序首先要读取（加载到内存里的）程序文件。
我们可设置断点，解析其读取内存函数的具体地址。 
tracer 工具可以满足这种调试需求。它具有 BPM（内存断点）功能。 
在修改程序时，不得修改 PE 可执行文件的 relocs（参见本书的 68.2.6 节）。Windows 的加载程序会使
用新的代码覆盖这部分代码。如果使用 Hiew 打开可执行程序，会发现这部分代码以灰色显示（请参考
图 7.12）。万不得已的时候，您可使用跳转指令绕过 reclos，否则就要编辑 relocs 的数据表。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 9900 章
章    编
编译
译器
器内
内部
部函
函数
数  
编译器内部函数（compiler intrinsic）是与特定编译器有关的函数，并非寻常的库函数。在编译库函数
时，编译器会调用（call）这个函数；而在编译内部函数时，编译器会使用对应的机器码进行直译。内部函
数通常是与特定 CPU 特定指令集有关的伪函数。 
例如，C/C++语言里没有循环移位运算指令，而多数 CPU 硬件支持这种指令。为了便于编程人员使用
这种指令，MSVC 推出了有关的伪函数_rotl() 和_rotr()。在编译这两个函数时，编译器会直接使用 x86 指令
集中 ROL/ROR 指令的 opcode 进行替换。 
此外，为了方便程序代码调用 SSE 指令，MSVC 还推出了一些内部函数。 
如需查询所有的 MSVC 内部函数，请查阅 MSDN 网站：http://msdn.microsoft.com/en-us/library/26td21ds.aspx。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 9911 章
章    编
编译
译器
器的
的智
智能
能短
短板
板  
Intel C++ 10.1（在 Linux x86 平台上编译 Oracle RDBMS 11.2 的编译器）有时候会生成两个连续的 JZ
指令。实际上第二条 JZ 指令不会被执行、没有实际意义。 
指令清单 91.1  kdli.o from libserver11.a 
.text:08114CF1                      loc_8114CF1: ; CODE XREF: __PGOSF539_kdlimemSer+89A 
.text:08114CF1                                      ; __PGOSF539_kdlimemSer+3994 
.text:08114CF1 8B 45 08                mov      eax, [ebp+arg_0] 
.text:08114CF4 0F B6 50 14             movzx    edx, byte ptr [eax+14h] 
.text:08114CF8 F6 C2 01                test     dl, 1 
.text:08114CFB 0F 85 17 08 00 00     jnz       loc_8115518 
.text:08114D01 85 C9                    test     ecx, ecx 
.text:08114D03 0F 84 8A 00 00 00     jz        loc_8114D93 
.text:08114D09 0F 84 09 08 00 00     jz        loc_8115518 
.text:08114D0F 8B 53 08                mov       edx, [ebx+8] 
.text:08114D12 89 55 FC                mov       [ebp+var_4], edx 
.text:08114D15 31 C0                    xor       eax, eax 
.text:08114D17 89 45 F4                mov       [ebp+var_C], eax 
.text:08114D1A 50                       push      eax 
.text:08114D1B 52                       push      edx 
.text:08114D1C E8 03 54 00 00         call      esp, 8 
.text:08114D21 83 C4 08                add        esp, 8 
上述文件中，另有一处也存在这种问题。 
指令清单 91.2  from the same code 
.text:0811A2A5                      loc_811A2A5: ; CODE XREF: kdliSerLengths+11C 
.text:0811A2A5                                      ; kdliSerLengths+1C1 
.text:0811A2A5 8B 7D 08                mov      edi, [ebp+arg_0] 
.text:0811A2A8 8B 7F 10                mov      edi, [edi+10h] 
.text:0811A2AB 0F B6 57 14             movzx    edx, byte ptr [edi+14h] 
.text:0811A2AF F6 C2 01                test     dl, 1 
.text:0811A2B2 75 3E                    jnz      short loc_811A2F2 
.text:0811A2B4 83 E0 01                and      eax, 1 
.text:0811A2B7 74 1F                    jz        short loc_811A2D8 
.text:0811A2B9 74 37                    jz        short loc_811A2F2 
.text:0811A2BB 6A 00                    push     0 
.text:0811A2BD FF 71 08                push     dwordptr [ecx+8] 
.text:0811A2C0 E8 5F FE FF FF         call     len2nbytes 
这些问题可能属于编译器的 bug。但是它们生成的程序不会受到该 bug 的影响，所以可能被测试人员
遗漏了下来。本书的 19.2.4 节、39.3 节、47.7 节、18.7 节、12.4.1 节、19.5.2 节中都演示了这种问题。 
本文演示了这些编译器问题，以证明编译器确实可能出现匪夷所思的奇怪行为。如果遇到了这种现象，
读者不必绞尽脑汁地去琢磨“编译器为什么生成这种诡异代码”。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 9922 章
章    O
OppeennM
MPP  
OpenMP 是一种相对简单的、实现多线程并发功能的编程 API。 
本章将以加密学意义上的非重复随机数 nonce 为例，演示 OpenMP 的应用方法。下面这段代码把 nonce
和不加密的明文进行串联（即添加），以进行非可逆加密，从而增加截获、破解密文的难度。此外，Bitcion
协议约定，在某个阶段中通过 nonce 使消息块的 hash 包含特定长度的、连续的零。这种机制又叫作“prove 
of system”（系统验证）（https://en.wikipedia.org/wiki/Proof-of-work_system），即参与通信的系统通过这种机
制证明它已经采取了精密而耗时的计算。 
虽然下面这段代码和 Bitcoin 没有直接关系，但是功能颇为类似。它会向字符串“hello，word!_”添加
一个数字，使得“hello，word!_”的 SHA512 hash 包含三个或三个以上的 0 字节。 
假设穷举的区间为［0，INT32 最大数−1］（即 0～0x7FFFFFFE/2147483646)。 
整个算法并不复杂： 
#include  
#include  
#include  
#include  
#include "sha512.h" 
int found=0; 
int32_t checked=0; 
int32_t* __min; 
int32_t* __max; 
time_t start; 
#ifdef __GNUC__ 
#define min(X,Y) ((X)  (Y) ? (X) : (Y)) 
#endif 
void check_nonce (int32_t nonce) 
{ 
          uint8_t buf[32]; 
          struct sha512_ctx ctx; 
          uint8_t res[64]; 
          // update statistics 
          int t=omp_get_thread_num(); 
          if (__min[t]==-1) 
                    __min[t]=nonce; 
          if (__max[t]==-1) 
                    __max[t]=nonce; 
          __min[t]=min(__min[t], nonce); 
          __max[t]=max(__max[t], nonce); 
          // idle if valid nonce found 
          if (found) 
                    return; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 92 章  OpenMP 
855 
          memset (buf, 0, sizeof(buf)); 
          sprintf (buf, "hello, world!_%d", nonce); 
          sha512_init_ctx (&ctx); 
          sha512_process_bytes (buf, strlen(buf), &ctx); 
          sha512_finish_ctx (&ctx, &res); 
          if (res[0]==0 && res[1]==0 && res[2]==0) 
          { 
                    printf ("found (thread %d): [%s]. seconds spent=%d\n", t, buf, time(NULL)-start); 
                    found=1; 
          }; 
          #pragma omp atomic 
          checked++; 
          #pragma omp critical 
          if ((checked % 100000)==0) 
                    printf ("checked=%d\n", checked); 
}; 
int main() 
{ 
          int32_t i; 
          int threads=omp_get_max_threads(); 
          printf ("threads=%d\n", threads); 
          __min=(int32_t*)malloc(threads*sizeof(int32_t)); 
          __max=(int32_t*)malloc(threads*sizeof(int32_t)); 
          for (i=0; i<threads; i++) 
                    __min[i]=__max[i]=-1; 
          start=time(NULL); 
          #pragma omp parallel for 
          for (i=0; i<INT32_MAX; i++) 
                    check_nonce (i); 
          for (i=0; i<threads; i++) 
                    printf ("__min[%d]=0x%08x __max[%d]=0x%08x\n", i, __min[i], i, __max[i]); 
          free(__min); free(__max); 
}; 
函数 check_nonce() 有 3 个作用：向字符串添加数字、使用 SHA512 算法计算新字符串的 hash、检查
hash 中是否有 3 个为 0 的字节。 
这段代码中较为重要的部分是： 
          #pragma omp parallel for 
          for (i=0; i<INT32_MAX; i++) 
                   check_nonce (i); 
这个程序确实不复杂。如果没有#pragma，程序会从0 依次穷举到INT32 的最大值（0x7fffffff，即2147483647），
依次用check_nonce() 函数验证。加上#pragma之后，编译器会添加特定的代码把整个区间划分为若干子区
间，充分利用CPU的多核进行并行运算。
①
我们可以通过下述指令，使用MSVC 2012 进行编译
②
① 本例仅为示范性说明。在实际情况下，使用 OpenMP 技术往往更为困难、复杂。 
② sha512.（c|h）和 u64.h 的源文件可照搬 OpenSSL 的库文件：http://www.openssl.org/source/。 
： 
cl openmp_example.c sha512.obj /openmp /O1 /Zi /Faopenmp_example.asm 
GCC 对应的编译指令为： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
856 
逆向工程权威指南（下册） 
gcc -fopenmp 2.c sha512.c -S -masm=intel 
92.1  MSVC 
MSVC 2012 生成的主循环的指令如下所示。 
指令清单 92.1  MSVC 2012 
          push    OFFSET _main$omp$1 
          push    0 
          push    1 
          call    __vcomp_fork 
          add     esp, 16                              ; 00000010H 
所有以 vcomp 开头的函数都是与 OpenMP 有关的函数，通过 vcomp*.dll 进行加载。它将发起一组线程
进行并行计算。 
具体来说，_main$omp$1 的汇编代码如下所示。 
指令清单 92.2  MSVC 2012 
$T1 = -8                                                          ; size = 4 
$T2 = -4                                                          ; size = 4 
_main$omp$1 PROC                                                 ; COMDAT 
          push 
ebp 