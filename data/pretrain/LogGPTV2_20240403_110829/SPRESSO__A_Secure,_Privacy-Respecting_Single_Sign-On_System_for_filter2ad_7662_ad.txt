attacker may listen to and spoof all addresses (and therefore is
the maximally powerful attacker). Attackers may corrupt other
parties. In the analysis of a concrete web system, we typically
have one network attacker only and no web attackers (as they are
subsumed by the network attacker), or one or more web attack-
ers but then no network attacker. Honest processes can either
be web browsers, web servers, or DNS servers. The modeling
of web servers heavily depends on the speciﬁc application. The
web browser model, which is independent of a speciﬁc web ap-
plication, is outlined below.
• The second component, S, is a ﬁnite set of scripts, including the
attacker script Ratt. In a concrete model, such as our SPRESSO
model, the set S \{Ratt} describes the set of honest scripts used in
the web application under consideration while malicious scripts
are modeled by the “worst-case” malicious script, Ratt.
• The third component, script, is an injective mapping from a
script in S to its string representation script(s) (a constant in Σ)
so that it can be part of a messages, e.g., an HTTP response.
• Finally, E0 is a sequence of events, which always contains an
inﬁnite number of events of the form (cid:104)a,a, TRIGGER(cid:105) for every
IP address a in the web system.
A run of the web system is a run of W initiated by E0.
3.3 Web Browsers
We now sketch the model of the web browser, with full details
provided in [12]. A web browser is modeled as a DY process
(I p,Z p,Rp,sp
0 ).
An honest browser is thought to be used by one honest user, who
is modeled as part of the browser. User actions are modeled as non-
deterministic actions of the web browser. For example, the browser
itself non-deterministically follows the links in a web page. User
data (i.e., passwords and identities) is stored in the initial state of
the browser and is given to a web page when needed, similar to the
AutoFill feature in browsers.
Besides the user identities and passwords, the state of a web
browser (modeled as a term) contains a tree of open windows and
documents, lists of cookies, localStorage and sessionStorage data,
a DNS server address, and other data.
In the browser state, the windows subterm is the most complex
It contains a window subterm for every open window (of
one.
which there may be many at a time), and inside each window, a list
of documents, which represent the history of documents that have
been opened in that window, with one of these documents being
active, i.e., this document is presented to the user and ready for
interaction. A document contains a script loaded from a web server
and represents one loaded HTML page. A document also contains a
list of windows itself, modeling iframes. Scripts may, for example,
navigate or create windows, send XHRs and postMessages, submit
forms, set/change cookies, localStorage, and sessionStorage data,
and create iframes. When activated, the browser provides a script
with all data it has access to, such as a (limited) view on other
documents and windows, certain cookies as well as localStorage
and sessionStorage.
Figure 2 shows a brief overview of the browser relation Rp which
deﬁnes how browsers behave. For example, when a TRIGGER mes-
sage is delivered to the browser, the browser non-deterministically
choses an action. If, for instance, this action is 1, then an active doc-
ument is selected non-deterministically, and its script is triggered.
The script (with inputs as outlined above), can now output a com-
mand, for example, to follow a hyperlink (HREF). In this case, the
browser will follow this link by ﬁrst creating a new DNS request.
Once a response to that DNS request arrives, the actual HTTP re-
quest (for the URL deﬁned by the script) will be sent out. After a
response to that HTTP request arrives, the browser creates a new
document from the contents of the response. Complex navigation
and security rules ensure that scripts can only manipulate speciﬁc
aspects of the browser’s state. Browsers can become corrupted, i.e.,
be taken over by web and network attackers. The browser model
comprises two types of corruption: close-corruption, modeling that
a browser is closed by the user, and hence, certain data is removed
(e.g., session cookies and opened windows), before it is taken over
by the attacker, and full corruption, where no data is removed in
advance. Once corrupted, the browser behaves like an attacker pro-
cess.
4.
INDISTINGUISHABILITY OF
WEB SYSTEMS
We now deﬁne the indistinguishability of web systems. This
deﬁnition is not tailored towards a speciﬁc web application, and
hence, is of independent interest.
Our deﬁnition follows the idea of trace equivalence in Dolev-
Yao models (see, e.g., [9]), which in turn is an abstract version of
cryptographic indistinguishability.
Intuitively, two web systems are indistinguishable if the follow-
ing is true: whenever the attacker performs the same actions in both
1365PROCESSING INPUT MESSAGE m
m = FULLCORRUPT: isCorrupted := FULLCORRUPT
m = CLOSECORRUPT: isCorrupted := CLOSECORRUPT
m = TRIGGER: non-deterministically choose action from {1,2,3}
action = 1: Call script of some active document.
Outputs new state and command.
command = HREF: → Initiate request
command = IFRAME: Create subwindow, → Initiate request
command = FORM: → Initiate request
command = SETSCRIPT: Change script in given document.
command = SETSCRIPTSTATE: Change state of script
in given document.
command = XMLHTTPREQUEST: → Initiate request
command = BACK or FORWARD: Navigate given window.
command = CLOSE: Close given window.
command = POSTMESSAGE: Send postMessage to
speciﬁed document.
action = 2: → Initiate request to some URL in new window
action = 3: → Reload some document
m = DNS response: send corresponding HTTP request
m = HTTP(S) response: (decrypt,) ﬁnd reference.
reference to window: create document in window
reference to document: add response body to document’s
script input
Figure 2: The basic structure of the web browser relation Rp
with an extract of the most important processing steps, in the
case that the browser is not already corrupted.
systems, then the sequence of messages he obtains in both runs look
the same from the attacker’s point of view, where, as usual in Dolev-
Yao models, two sequences are said to “look the same” when they
are statically equivalent [1] (see below). More speciﬁcally, since, in
general, web systems allow for non-deterministic actions (also of
honest parties), the sequence of actions of the attacker might induce
a set of runs. Then indistinguishability says that for all actions of
the attacker and for every run induced by such actions in one system,
there exists a run in the other system, induced by the same attacker
actions, such that the sequences of messages the attacker obtains in
both runs look the same to the attacker.
Deﬁning the actions of attackers in web systems requires care
because the attacker can control different components of such a
system, but some only partially: A web attacker (unlike a net-
work attacker) controls only part of the network. Also an attacker
might control certain servers (web servers and DNS servers) and
browsers. Moreover, he might control certain scripts running in hon-
est browsers, namely all attacker scripts Ratt running in browsers;
dishonest browsers are completely controlled by the attacker any-
way.
We model a single action of the attacker by what we call a (web
system) command; not to be confused with commands output by a
script to the browser. A command is of the form
(cid:104)i, j, τprocess,cmdswitch,cmdwindow, τscript,url(cid:105) .
The ﬁrst component i ∈ N determines which event from the pool
of events is processed. If this event could be delivered to several
processes (recall that a network attacker, if present, can listen to
all addresses), then j determines the process which actually gets
to process the event. Now, there are different cases depending on
the process to which the event is delivered and depending on the
event itself. We denote the process by p and the event by e: i) If p
is corrupted (it is a web attacker, network attacker, some corrupted
browser or server), then the new state of this process and its output
are determined by the term τprocess, i.e., this term is evaluated with
the current state of the process and the input e. ii) If p is an honest
browser and e is not a trigger message (e.g., a DNS or HTTP(S)
response), then the browser processes e as usual (in a deterministic
way). iii) If p is an honest browser and e is a trigger message, then
there are three actions a browser can (non-deterministically) choose
from: open a new window, reload a document, or run a script. The
term cmdswitch ∈ {1,2,3} selects one of these actions. If it chooses
to open a new window, a document will be loaded from the URL
url. In the remaining two cases, cmdwindow determines the win-
dow which should be reloaded or in which a script is executed. If
a script is executed and this script is the attacker script, then the
output of this script is derived (deterministically) by the term τscript,
i.e., this term is evaluated with the data provided by the browser.
The resulting command, if any, is processed (deterministically) by
the browser. If the script to be executed is an honest script (i.e.,
not Ratt), then this script is evaluated and the resulting command
is processed by the browser. (Note that the script might perform
non-deterministic actions.) iv) If p is an honest process (but not a
browser), then the process evaluates e as usual. (Again, the com-
putation might be non-deterministic, as honest processes might be
non-deterministic.)
We call a ﬁnite sequence of commands a schedule. Given a
web system WS = (W ,S , script,E0), a schedule σ induces a set
of (ﬁnite) runs in the obvious way. We denote this set by σ(WS ).
Intuitively, a schedule models the attacker actions in a run. Note
that we consider a very strong attacker. He not only determines
the actions of all dishonest processes and all attacker scripts, but
also schedules all events, not only events intended for the attacker;
clearly, the attacker does not get to see explicitly events not intended
for him.
Before we can deﬁne indistinguishability of two web systems,
we need to, as mentioned above, recall the deﬁnition of static equiv-
alence of two messages t1 and t2. We say that the messages t1 and
t2 are statically equivalent, written t1 ≈ t2, if and only if, for all
terms M(x) and N(x) which contain one variable x and do not use
nonces, we have that M(t1) ≡ N(t1) iff M(t2) ≡ N(t2). That is, ev-
ery test performed by the attacker yields the same result for t1 and
t2, respectively. For example, if k and k(cid:48) are nonces, and r and r(cid:48)
are different constants, then
enca((cid:104)r,k(cid:48)(cid:105), pub(k)) ≈ enca((cid:104)r(cid:48),k(cid:48)(cid:105), pub(k)) .
Intuitively, this is the case because the attacker does not know the
private key k.
We also need the following terminology. If (W ,S , script,E0) is
a web system and p is an attacker process in W , then we say that
(W ,S , script,E0, p) is a web system with a distinguished attacker
process p. If ρ is a ﬁnite run of this system, we denote by ρ(p)
the state of p at the end of this run.
In our indistinguishability
deﬁnition, we will consider the state of the distinguished attacker
process only. This is sufﬁcient since the attacker can send all its
data to this process.
Now, we are ready to deﬁne indistinguishability of web systems
in a natural way.
DEFINITION 1. Let WS 0 and WS 1 be two web system each
with a distinguished attacker process p0 and p1, respectively. We
say that these systems are indistinguishable, written WS 0 ≈ WS 1,
iff for every schedule σ and every i ∈ {0,1}, we have that for every
run ρ ∈ σ(WS i) there exists a run ρ(cid:48) ∈ σ(WS 1−i) such that ρ(pi) ≈
ρ(cid:48)(p1−i).
13665. FORMAL MODEL OF SPRESSO
We now present the formal model of SPRESSO, which closely
follows the description in Section 2 and the implementation of the
system. This model is the basis for our formal analysis of privacy
and authentication properties presented in Sections 6 and 7.
We model SPRESSO as a web system (in the sense of Sec-
tion 3.2). We call SWS = (W ,S , script,E0) an SPRESSO web sys-
tem if it is of the form described in what follows.
The set W = Hon∪ Web∪ Net consists of a ﬁnite set of web at-
tacker processes (in Web), at most one network attacker process (in
Net), a ﬁnite set FWD of forwarders, a ﬁnite set B of web browsers,
a ﬁnite set RP of web servers for the relying parties, a ﬁnite set IDP
of web servers for the identity providers, and a ﬁnite set DNS of
DNS servers, with Hon := B∪ RP∪ IDP∪ FWD∪ DNS. The set of
scripts S is {Ratt,script_rp,script_rp_redir,script_idp,script_fwd}.
Their respective string representations are deﬁned by the mapping
script. The set E0 contains only the trigger events as speciﬁed in
Section 3.2.
We now sketch the processes and the scripts in W and S (see [12]
for full details). As mentioned, our modeling closely follows the
description in Section 2 and the implementation of the system:
• Browsers (in B) are deﬁned as described in Section 3.3.
• A relying party (in RP) is a web server. RP knows four dis-
tinct paths: /, where it serves the index web page (script_rp),
/startLogin, where it only accepts POST requests and mainly
issues a fresh RP nonce, /redir, where it only accepts requests
with a valid login session token and serves script_rp_redir
to redirect the browser to the IdP, and /login, where it also only
accepts POST requests with login data obtained during the login
process by script_rp running in the browser. It checks this
data and, if the data is considered to be valid, it issues a service
token. The RP keeps a list of such tokens in its state. Intuitively,
a client having such a token can use the service of the RP.
• Each IdP (in IDP) is a web server. It knows three distinct paths:
/.well-known/spresso-login, where it serves the login dia-
log web page (script_idp), /sign, where it issues a (signed)
identity assertion, and the path /.well-known/spresso-info,
where it serves the support document containing its public key.
Users can authenticate to the IdP with their credentials and IdP
tracks the state of the users with sessions. Only authenticated
users can receive IAs from the IdP.
• Forwarders (in FWD) are web servers that have only one state
(i.e., they are stateless) and serve only the script script_fwd,
except if they become corrupted.
• Each DNS server (in DNS) contains the assignment of domain
names to IP addresses and answers DNS requests accordingly.
Besides the browser, RPs, IdPs, and FWDs can become corrupted:
If they receive the message CORRUPT, they start collecting all in-
coming messages in their state and when triggered send out some
message that is derivable from their state and collected input mes-
sages, just like an attacker process.
6. PRIVACY OF SPRESSO
In our privacy analysis, we show that an identity provider in
SPRESSO cannot learn where its users log in. We formalize this
property as an indistinguishability property: an identity provider
(modeled as a web attacker) cannot distinguish between a user log-
ging in at one relying party and the same user logging in at a differ-
ent relying party.
Deﬁnition of Privacy of SPRESSO. The web systems considered
for the privacy of SPRESSO are the web systems SWS deﬁned
in Section 5 which now contain one or more web attackers, no
network attackers, one honest DNS server, one honest forwarder,
one browser, and two honest relying parties r1 and r2. All honest
parties may not become corrupted and use the honest DNS server for
address resolving. Identity providers are assumed to be dishonest,
and hence, are subsumed by the web attackers (which govern all
identities). The web attacker subsumes also potentially dishonest
forwarders, DNS servers, relying parties, and other servers. The
honest relying parties are set up such that they already contain the
public signing keys (used to verify identity assertions) for each
domain registered at the DNS server, modeling that these have been
cached by the relying parties, as discussed in Section 2.2.
In order to state the privacy property, we replace the (only) honest
browser in the above described web systems by a slightly extended
browser, which we call a challenge browser: This browser may not
become corrupted and is parameterized by a domain r of a relying
party. When it is to assemble an HTTP(S) request for the special
domain CHALLENGE, then instead of putting together and sending