子系统则是用来为各种不同平台的应用程序创建与它们兼容的运行环境。
当然，子系统要实现二进制级别的兼容性是十分困难的，于是它的目标就是源代码级别
的兼容。也就是说每个子系统必须实现目标操作系统的所有接口，比如WindowsNT要创建
一个能够运行UNIX应用程序的子系统，它必须实现UNIX的所有系统调用在C语言源代
码层面的接口。
在Windows里，最开始支持3种子系统：Win32子系统、POSIX子系统和OS/2子系统，
面OS/2子系统在Windows2000里已经被去除。DOS程序和16位Windows程序也是通过
类似于子系统的模式实现在32位Windows下运行的。16位的Windows 程序运行在32位
Windows 下被称为WoW（Windows OnWindows），这使我们联想到现在32位Windows
程序运行于64位的Windows操作系统，也是通过WoW技术实现的。
和内核直接打交道的只有Win32子系统，其他的子系统如Posix子系统和OS/2子系统
都是直接将请求发送给Win32子系统处理。Win32子系统在系统运行的时候始终是运行的，
而其他的子系统则是在需要的时候才启动。
后来随着Windows的市场地位逐渐巩固，它对于兼容其他操作系统和早期的
DOS/Windows 3.1及Windows 9x的应用程序的需求已经极大地减嘉，现在运行于Windows
系统上的应用软件基本上都是使用Win32子系统的程序，所以子系统的概念已经逐渐地被
弱化，除了Win32子系统之外，其他的子系统基本上形同虚设。我们在本书中提及子系统
这一概念，也仅仅是为了帮助读者了解一些背景，以便于在Windows系统下碰到相关内容
封不至于困惑，但并不打算深入介绍它，因为Windows子系统在实际上已经被抛弃了。
程序员的自我修养一链接、装载与库
---
## Page 433
410
第12章系统调用与API
12.4本章小结
在这一章中，我们详细回顾了进程与操作系统打交道的途径：系统调用和API。在介绍
系统调用的部分中，主要介绍了特权级、中断等系统调用的实现原理，然后还详细介绍了
Linux的系统调用的内容和实现细节。
在介绍API的过程中，我们回顾了API的历史与成因、API的组织形式、实现原理。
同时还提到了与API伴生的子系统，介绍了子系统的存在意义、组织形式等。
程序员的自我修养一链接、装载与库
---
## Page 434
运行库实现
13.1C语言运行库
13.2如何使用MiniCRT
13.3C++运行库实现
13.4如何使用MiniCRT++
13.5本章小结
程序员的自我修养一—键接、装载与库
---
## Page 435
412
第13章运行库实现
在本书的第4章，为了能够减小可执行文件的尺寸，摆脱对Glibc的依赖，实际上已经
实现了一个超小型的CRT，尽管这个CRT只拥有两个函数：exitO和printO，分别用于退出
进程和输出一个字符串。但无论如何它给我们带来了一个信息，那就是CRT也并不是那么
神秘、不可替代的。这一章将是激动人心的一章，我们将带领读者一步步实现一个迷你的
CRT。
当然真正实用的CRT是庞大到无法在一章之内完全呈现出来的，所以在这一章我们仅
实现CRT几个关键的部分。虽然这个迷你CRT仅仅实现了为数不多的功能，但是它已经具
备了CRT的关键功能：入口函数、初始化、堆管理、基本IO，甚至还将实现堆C++的
new/delete、stream 和l string 的支持。
本章主要分为两个部分，首先实现一个仅仅支持C语言的运行库，即传统意义上的CRT。
其次，将为这个CRT加入一部分以支持C++语言的运行时特性。
13.1C语言运行库
在开始实现MiniCRT之前，首先要对它进行基本的规划。“麻雀虽小五脏俱全”，虽然
MiniCRT很小，但它应该具备CRT的基本功能以及遵循儿个基本设计原则，这些我们归结
为如下几个方面：
首先Mini CRT应该以ANIS C的标准库为目标，尽量做到与其接口相一致。
具有自已的入口函数（mini_crt_entry）。
基本的进程相关操作（exit）。
支持堆操作（malloc、free）。
支持基本的文件操作（fopen、fread、fwrite、fclose、Iseek）。
·
支持基本的字符串操作（strcpy、strlen、strcmp）。
支持格式化字符串和输出操作（printf、sprintf）。
支持atexitO函数。
最后，MiniCRT应该是跨平台的。我们计划让Mini CRT能够同时支持Windows和Linux
两个操作系统。
Mini CRT的实现应该尽量简单，以展示CRT的实现为目的，并不追求功能和性能，
基本上是“点到为止”
为了使CRT能够同时支持Linux和Windows两个平台，必须针对这两个操作系统环境
的不同进行条件编译，在Mini CRT中，我们使用宏WIN32为标准来决定是Windows 还是
程序员的自我修养一链接、装载与库
---
## Page 436
13.1C语言运行库
413
Linux。因此实际的代码常常呈现这样的结构：
//Windows部分实现代码
#ifdef WIN32
//Linux部分实现代码
telse
fendif
在本章中，#ifdef#else#endif这个条件编译指令会加租显示，以方使读者区分
Windows 和 Linux 的代码。
通常我们会把CRT的各个函数的声明放在不同的头文件中，比如IO相关的位于stdio.h
字符申和堆相关的放在stdlib.h中。为了简单起见，将Mini CRT 中所有函数的声明都放在
minicrt.h 中
13.1.1开始
那么MiniCRT首先该从哪儿入手呢？诚然，从入口函数开始入手应该是个不错的选择。
在本书的第10章中，已对Glibc和MSVCCRT的入口函数进行了分析，下面我们再对入口
函数相关的内容进行概括。
·程序运行的最初入口点不是main函数，面是由运行库为其提供的入口函数。它主要负
责三部分工作：准备好程序运行环境及初始化运行库，调用main函数执行程序主体，
清理程序运行后的各种资源。
·运行库为所有程序提供的入口函数应该相同，在链接程序时须要指定该入口函数名，
在本章节里，将为MiniCRT编写白已的入口函数。为了保证运行库的兼容性，CRT入
口函数同样必须具有以上特性。
入口函数
首先，须要确定入口函数的函数原型，包括函数名、输入参数及返同值，在这里，入口
函数命名为mini_cr_entry，为了简单起见，它没有输入参数，同时没有返回值，其实
mini_cr_entry的返回值没有意义，因为它永远不会返回，在它返回之前就会调用进程退出
函数结束进程。这样，入口函数具有如下形式：
void mini_crt_entry (void)
参照上面所描述的入口函数的三部分工作，以下代码为一个基本框架。
() Aaum 
//初始化部分
程序员的自我修养一链接、装载与库
---
## Page 437
414
第13章运行库实现
int ret - main()
//结来部分
exit (ret) :
这里的初始化主要负资准备好程字运行的环境，包括准备main函数的参数、初始化运
行库，包括堆、1O等，结束部分主要负责清理程序运行资源。在以下内容中，围绕这个基
本框架，我们将逐步扩展补充入口函数。
main参数
我们知道main函数的原型为：
int main(int argc, char* argv[1) ;
其中argc和 argv分别是main的数的两个参数，它们分别表示运行程序时的参数个数和指向
参数的字符串指针数组。在第6章中己经介绍过在Linux系统下，当进程被初始化时，它的
堆栈结构中就保存着环境变最和传递给main函数的参数，我们可以通过ESP寄存器获得这
两个参数。但是一且进入mini_cr_entry之后，ESP寄存器会随若函数的执行而被改变，通
过第9章中关丁函数对于堆栈顿的知识，可以知道EBP的内容就是进入函数后ESP+4（4
是因为函数第·条指令足pushebp）。那么可以推断出EBP-4所指向的内容应该就是argc+
面 EBP-8则就是argv。整个堆栈的分布可以如图13-1所示。
High Address
0
0xBF801FDE
argv[1]
0xBF801FD8
arqv [0]
Esp before mini_crt_entry =>
2
argc
EBP
Low Address
Process Stack
图13-1main函数参数
对于Windows 系统米说，它提供了相应的 API用于取得进程的命令行参数，这个API
叫做GerCommandLine，它会返回整个命令行参数字符串。由于main 所数所需要的参数是
命令行参数列表，所以我们将整个命令行字符串分割成若十个参数，以符合argc和argv的
格式。
程序员的自我修养—链接、装载与库
---
## Page 438
13.1C语言运行库
415
在这里暂时不列出实现的代码，在章节的最后将列出这一节所实现的MiniCRT源代
码。以后所有与MiniCRT实现相关的章节都遵循这一规则。
CRT初始化
完成了获取main函数参数的代码后，还应该在入口函数里对CRT进行初始化。由于
MiniCRT所实现的功能较少，所以初始化部分十分简单。需要初始化的主要是堆和1O部分。
在堆被初始化之前，malloc/free函数是没有办法使用的。我们定义堆的初始化函数为
mini_cr_heap_init()：IO部分的初始化函数为mini_crt_io_initO.这两个函数的返回值都是整
数类型的，返回非0即表示初始化成功，否则表示失败。这两个函数的实现将在后面介绍堆
实现和IO实现时详细介绍。
结束部分
Mini CRT结束部分很简单，它要完成两项任务：一个就是调用由atexitO注册的退出回调
函数：另外一个就是实现结束进程。这两项任务都由exitO函数完成，这个函数在Linux的实
现已经在第4章中碰到过了，它调用Linux的1号系统调用实现进程结束，cbx表示进程退出
码：而 Windows 则提供了一个叫做ExitProcess的 APl，直接调用该API 即可结束进程。
不过在进行系统调用或API之前，exit(还有一个任务就是调用由atexit(注册的退出回
调函数，这个任务通过调用mini_crt_exit_routine0实现，我们在第10章中已经了解到，atexitO
注册回调函数的机制主要是用来实现全局对象的析构的，在这一节中暂时不打算让Mini
CRT支持C++，所以暂时将调用mini_crt_exit_routine(这个函数的那行代码去掉。
最终Mini CRT的入口函数mini_er_entry的代码如清单13-1所示。
清单13-1entry.c
#include *minicrt .h*
//entry-c
inc1ude 
ifdef WIN32
endif
extern int main(int argc, char* argv[1);
void exit (int) 
static void crt_fatal_error (const char* msg)
// printf(*fatal error: 8s*, msg):
exit (1) ;
void nini_crt_entry (void)
程序员的自我修养-链接、装载与库
---
## Page 439
416
第13章运行库实现
int ret;
#ifdef WIN32
int flag = 0;
char*argv[16]://最多16个参数
int argc = 0;
char* cl × GetCommandLineA(1 ;
1/解析命令行
argv[0] = cl;
argc++;
while(*c1) (
if(*c1 == *\*·)
if(flag s 0) flag - 1;
else flag =0;
else if(*cl =
.&& flag == 0) (
if(*(cl+1)) {
argv[argc] - cl • 1;
argc++:
,0\. = [
c1++ ;
#else
char** argv;
int argc;
char* ebp_reg = 0;
//ebp_reg =$ebp
asm(*mov] tebp, &0 \n*:*=r*(ebp_reg) ):
( + 5a.xdqa) (+au)+ = 56.1e
argv = (char**) (ebp_reg + 8):
#endif
if (!mini_crt_heap_init (1)
crt_fatal_error *heap 1nitialize failed*1
if (!mini_crt_io_init ())
crt_fatal_error(*Io initialize failed*);
ret = main (argc,argv) :
exit (ret):
void exit (int exitCode)
//mini_crt_call_exit_routine1) ;
#ifdef WIN32
ExitProcess (exitCode) :
telse
asm( *movl $0, $sebx \n\t*
程序员的自我修养——链接、装载与库
---
## Page 440
13.1C语言运行库
417