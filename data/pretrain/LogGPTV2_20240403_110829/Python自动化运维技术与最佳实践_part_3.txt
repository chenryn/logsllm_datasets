10.7.4配置 state
·180
10.7.5校验结果
 183
第11章统一网络控制器Fune详解
·185
11.1Func 的安装
186
11.1.1业务环境说明
·186
11.1.2安装 Func
186
11.2Func 常用模块及APl
·189
11.2.1选择目标主机
061
11.2.2常用模块详解
·190
11.3自定义Func模块
·194
11.4非 Python API 接口支持
861
11.5Func 的 Facts 支持
199
第12章Python大数据应用详解
202
12.1环境说明
·202
12.2 Hadoop 部署
203
12.3使用 Python 编写MapReduce
-207
12.3.1用原生 Python 编写 MapReduce 详解
208
12.3.2用 Mrjob 枢架编写MapReduce 详解
212
12.4实战分析
216
---
## Page 19
XVII
12.4.1示例场景
216
12.4.2网站访间流量统计
-217
12.4.3
网站HTTP 状态码统计
219
12.4.4网站分钟级请求数统计
-220
12.4.5网站访间来源IP统计
221
12.4.6网站文件访问统计
222
第三部分
案例篇
第13章从零开始打造B/S自动化运维平台
226
13.1平台功能介绍
226
13.2系统构架设计
227
13.3数据库结构设计
228
13.3.1数据库分析
-228
13.3.2数据字典
228
13.3.3数据库模型
229
13.4系统环境部署
230
13.4.1系统环境说明
230
13.4.2系统平台搭建
230
13.4.3开发环境优化
·233
13.5系统功能模块设计
·235
13.5.1前端数据加载模块
·235
13.5.2数据传输模块设计
·237
13.5.3平台功能模块扩展
·240
第14章打造Linux系统安全审计功能
·245
14.1平台功能介绍
·245
14.2系统构架设计
·246
14.3数据库结构设计
---
## Page 20
XVIII
14.3.1数据库分析
247
14.3.2数据字典
247
14.4系统环境部署
·248
14.4.1系统环境说明
248
14.4.2上报主机配置-
248
14.5服务器端功能设计
252
14.5.1 Django 配置
252
14.5.2 功能实现方法
253
第15章构建分布式质量监控平台
256
15.1平台功能介绍
256
15.2系统构架设计
257
15.3数据库结构设计
258
15.3.1数据库分析
258
15.3.2数据字典
-258
15.3.3数据库模型
259
15.4系统环境部署
-260
15.4.1系统环境说明
260
15.4.2数据采集角色
260
15.4.3  mdtool f作业
261
15.5服务器端功能设计
263
15.5.1 Django 配置
263
15.5.2业务增加功能
264
15.5.3业务报表功能
266
第16章构建桌面版C/S自动化运维平台
-269
16.1平台功能介绍
-269
16.2系统构架设计
270
16.3数据库结构设计
271
16.3.1数据库分析
16.3.2数据字典
272
---
## Page 21
XIX
16.3.3数据库模型
272
16.4系统环境部署
273
16.4.1系统环境说明
273
16.4.2系统环境搭建
273
16.5系统功能模块设计
·274
16.5.1用户登录模块
274
16.5.2系统配置功能
·275
16.5.3服务器分类模块
·277
16.5.4系统升级功能
·280
16.5.5客户端模块编写
16.5.6执行功能模块
·287
16.5.7平台程序发布
·289
---
## Page 22
第一部分7
基础篇
·第1章系统基础信息模块详解
·第2章业务服务监控详解
■第3章定制业务质量报表详解
·第4章Python与系统安全
*.....................
---
## Page 23
Clnyder
第1章
系统基础信息模块详解
系统基础信息采集模块作为监控模块的重要组成部分，能够帮助运维人员了解当前系统
的健康程度，同时也是衡量业务的服务质量的依据，比如系统资源吃紧，会直接影响业务的
服务质量及用户体验，另外获取设备的流量信息，也可以让运维人员更好地评估带宽、设备
资源是否应该扩容。本章通过运用Python第三方系统基础模块，可以轻松获取服务关键运营
指标数据，包括Linux基本性能、块设备、网卡接口、系统信息、网络地址库等信息。在采
集到这些数据后，我们就可以全方位了解系统服务的状态，再结合告警机制，可以在第一时
间响应，将异常出现在苗头时就得以处理。
本章通过具体的示例来帮助读者学习、理解并掌握。在本章接下来的内容当中，我们的
示例将在一个连续的Python交互环境中进行。
进人Python终端，执行python命令进人交互式的Python环境，像这样：
Python 2.6.6 (r266:84292, Nov 22 2013, 12:16:22)
python
[GCC 4.4.7 20120313(Red Hat 4.4.7-4)1on 1inux2
Type "help*,“copyright*, *credits" or “license* for more information,
>>>
1.1系统性能信息模块psutil
psutil是一个跨平台库（http://code.google.com/p/psutil/)，能够轻松实现获取系统运行的
---
## Page 24
第1章系统基础信息模块详解3
进程和系统利用率（包括CPU、内存、磁盘、网络等）信息。它主要应用于系统监控，分
析和限制系统资源及进程的管理。它实现了同等命令行工具提供的功能，如ps、top、Isof、
netstat、ifconfig、who、df、kill、free、nice、ionice、iostat、iotop、uptime、pidof、tty 、
tasksel、pmap 等。目前支持32位和 64位的 Linux、Windows、OS X、FreeBSD 和 Sun
Solaris等操作系统，支持从2.4到3.4的Python版本，目前最新版本为2.0.0。通常我们获取
操作系统信息往往采用编写shell来实现，如获取当前物理内存总大小及已使用大小，shell
命令如下：
物里内存 total值 ：[ree-m1grep Mem 1awk *(printS2)*
物理内存 used值：free-m 1grep Mem 1awk *(print $3)*
相比较面言，使用psutil库实现则更加简单明了。psutil大小单位一般都采用字节，如下：
>>> import psutil
(） AzouauTenaxra*Tnsd =weuccc
(5062778881, 500367360L)
>>>nem. tota1,nen,used
psutil 的源码安装步骤如下：
twget https1//pypi-python.org/packages/source/p/psuti1/psuti1-2.0.0.tar.gz
 tar -xzvf pautil-2.0.o.tar,gz
--no-check-certificate
 cd psuti1-2.0.0
 python setup-py insta11
1.1.1获取系统性能信息
采集系统的基本性能信息包括CPU、内存、磁盘、网络等，可以完整描述当前系统的运
行状态及质量。psutil模块已经封装了这些方法，用户可以根据自身的应用场景，调用相应
的方法来满足需求，非常简单实用。
(1) CPU 信息
Limux操作系统的CPU利用率有以下几个部分：
口UserTime，执行用户进程的时间百分比；
SystemTime，执行内核进程和中断的时间百分比；
口WaitIO，由于1O等待而使CPU处于idle（空闲）状态的时间百分比；
ldle，CPU处于idle状态的时间百分比。
我们使用Python的psutil.cpu_timesO方法可以非常简单地得到这些信息，同时也可以获
取CPU的硬件相关信息，比如CPU的物理个数与逻辑个数，具体见下面的操作例子：
---
## Page 25
4第一部分基础篇
>>>psuti1.cpu_cimes（）使用cpu_times 方法获取cPU完整信息，雷要显示所有逻辑cPU售息，
>>> inport psuti1
>>># 指定方法变量 percpu=True 即可。如psuti1.cpu_times (percpu=True)
scputimes (user=38.039999999999999, nice=0.01, system=110.88,
id1e=177062.59,
iowai.t=53. 399999999999999, irg=2.9100000000000001, softirq=79.579999999999998,
>>>psuti1.cpu_cimes（），usez获取单项数据信惠，如用户user 的CPU 时间比
stea1=0.0, guest=0.0)
0 *8C
>>>psuti1.cpu_count()获取cPu的逻算个数，默认 1ogica1=True4
>>>psut11.cpu_count (1og1ca1=Fa1se)获取cPu 的物理个数
>>>
（2）内存信息
Linux系统的内存利用率信息涉及total（内存总数）、used（已使用的内存数）、free（空
闲内存数）、buffers（缓冲使用数）、cache（缓存使用数）、swap（交换分区使用数）等，分别
使用 psutil.virtual_memoryO与psutil.swap_memoryO方法获取这些信息，具体见下面的操作
例子：
>>> import psuti1
>>>nem = psuti1,virtua1_menory (1)
使用psuti1,virtual_menory方法获取内存完整信息
>>>nem
svmem (tota1=506277888L, ava11able=204951552L, percent=59,5, used=499867648L,
free=64102401,
active=245858304, inactive=163733504, buffers=1170350081,
>>>mem, tota1
获取内存总数
506277888L
>>>mem, free
获取空闲内存数
6410240L
>>>psuti1. swap_menory ()
获率 sWAP分区息 ssvap (tota1=1073733632L,used=01,
free=1073733632L, percent=0.0, sin=0, sout=0)
>>>
（3）磁盘信息
在系统的所有磁盘信息中，我们更加关注磁盘的利用率及IO信息，其中磁盘利用率使
用psutil.disk_usage方法获取。磁盘IO信息包括read_count（读IO数）、write_count（写
IO数）、read_bytes（IO读字节数）、write_bytes（IO写字节数）、read_time（磁盘读时间）、
write_time（磁盘写时间）等。这些IO信息可以使用psutil.disk_io_counters()获取，具体见
下面的操作例子：
>>>psuti1. disk_partitions ()
使用psuti1.disk_partitions 方法获取磁盘光整信息
[sdiskpart (device=*/dev/sda1', mountpoint-'/*, fstype=*ext4*, opts=*rv*),
sdiskpart (device=*/dev/sda3*, mountpoint=*/data*, fstype=*ext4′, opts=′zw*))
>>>psuti1.disk_usage (* /*）使用 pauti1.d1sk_usage 方法获取分区（参数）的使用情况
>>>