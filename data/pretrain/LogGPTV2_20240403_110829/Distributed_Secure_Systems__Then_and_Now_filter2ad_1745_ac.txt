and 
structure  of 
conventional  centralized  systems is antithetical to this 
approach;  centralized  systems  constitute  a  single 
resource that must be shared by a number of users and 
functions.  For  secure  operation,  a  security  kernel  is 
needed  to  synthesize  separate  virtual  resources  from 
the shared resources actually available. This is not only 
the 
a 
of 
inimical to the efficiency of the system, but it requires 
complex  mechanisms  whose  own  correctness 
is 
difficult to guarantee. 
number 
physically 
In  contrast  with  traditional  centralized  systems, 
modern  distributed  systems  are  well  suited  to  the 
provision  of  physical  separation.  They  necessarily 
comprise 
separated 
components, each with the potential for dedication to a 
single  security  level  or  a  single  function.  To  achieve 
security,  then,  we  must  provide  trustworthy  reference 
monitors  to  control  communications  between  the 
distributed  components  and to perform other security- 
critical  operations.  The  real  challenge  is  to  find  ways 
of  structuring  the  system  so  that  the  separation 
provided  by  physical  distribution  is  fully  exploited  to 
simplify  the  mechanisms  of  security  enforcement 
without destroying the coherence of the overall system. 
Because  it  is  costly  to  provide  physically  separate 
systems  for  each  security  partition  and  reference 
monitor,  we  use  physical  separation  only  for  the 
untrusted  computing  resources  (hosts)  of  our  system 
and  for  the  security  processors  that  house  its  trusted 
components. Temporal separation allows the untrusted 
host  machines  to  be  used  for  activities  in  different 
security  partitions  by  separating  those  activities  in 
time.  The  system  state 
is  reinitialized  between 
activities belonging to different security partitions. 
The real challenge is to find ways of structuring the 
system so that the separation provided by physical 
distribution is fully exploited to simplify the 
mechanisms of security enforcement without 
destroying the coherence of the overall system. 
The  security  processors  can  each  support  a  number 
of different separation and reference monitor functions, 
and also some untrusted support functions, by using a 
separation kernel to provide logical separation between 
those  functions.  Experience  indicates  that  separation 
kernels (simple security kernels whose only function is 
to  provide  separation)  can  be 
relatively  small, 
uncomplicated,  and  fast,  and  verification  seems 
simpler and potentially more complete for them than it 
does for general-purpose security kernels[3]. 
Our fourth technique, cryptographic separation, uses 
encryption  and  related  (checksum) 
to 
separate  different  uses  of  shared  communications  and 
storage media. 
techniques 
The four separation techniques provide the basis for 
our distributed secure system. This is a heterogeneous 
system  comprising  both  untrusted  general-purpose 
systems and trusted specialized components, and to be 
useful it must operate as a coherent whole. To this end, 
our  mechanisms  for  providing  security  are  built  on  a 
distributed  system  called  Unix  United,  developed  in 
182182
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:38:24 UTC from IEEE Xplore.  Restrictions apply. 
the  University  of 
the  Computing  Laboratory  at 
Newcastle  upon  Tyne[6].  A  Unix  United  system  is 
composed  of  a  (possibly  large)  set  of  interlinked 
standard Unix systems, or systems that can masquerade 
as Unix at the kernel interface level, each with its own 
storage and peripheral devices, accredited set of users, 
and  system  administrator.  The  naming  structures  (for 
files,  devices,  commands,  and  directories)  of  each 
component  Unix  system  are  joined  into  a  single 
naming structure in which each Unix system is, to  all 
intents and purposes, just a directory. The result is that, 
subject  to  proper  accreditation  and  appropriate  access 
control,  each  user  on  each  Unix  system  can  read  or 
write any file, use any device,  execute  any command, 
or inspect any directory regardless of which system it 
belongs  to.  The  directory  naming  structure  of  a  Unix 
United  system  is  set  up  to  reflect  the  desired  logical 
relationships between its various machines and is quite 
independent  of 
their  physical 
interconnections. 
routing  of 
the 
Figure 1: The naming structure of a simple 
Unix United system. 
The  simplest  possible  case  of  such  a  structure, 
incorporating just two Unix systems, named unix1 and 
unix2, is shown in Figure 1. From unixl, and with the 
root (“/”)and current working directory (“.”) as shown, 
one  could  copy  the  file  “a”  into  the  corresponding 
directory  on  the  other  machine  with  the  Unix  shell 
command 
cp a /../unix2/user/brian/a 
(For  those  unfamiliar  with  Unix,  the  initial  “/” 
symbol  indicates  that  a  path  name  starts  at  the  root 
directory  rather  than  at  the  current  working  directory, 
and  the  “..”  symbol  is  used  to  indicate  a  parent 
directory.)  
This command is in fact a perfectly conventional use 
of  the  standard  Unix  shell  command  interpreter  and 
would  have  exactly  the  same  effect  if  the  naming 
structure  shown  had  been  set  up  on  a  single  machine 
and unix I and unix2 had been conventional directories. 
All the standard Unix facilities, whether invoked by 
shell  commands  or  by  system  calls  within  user 
programs,  apply  unchanged  to  Unix  United,  causing 
intermachine communication as necessary. A user can 
therefore  specify  a  directory  on  a  remote  machine  as 
his  current  working  directory,  request  execution  of  a 
program  held  in  a  file  on  a  remote  machine,  redirect 
input and/or output, use files and peripheral devices on 
a  remote  machine,  and  set  up  pipelines  that  cause 
parallel  execution  of  communicating  processes  on 
different  machines.  Since 
these  are  completely 
standard Unix facilities, a user need not be concerned 
that several machines are involved. 
Figure 2: The Newcastle Connection. 
requires 
that  we  call 
Unix  United  conforms  to  a  design  principle  for 
the  “recursive 
distributed  systems 
structuring  principle”.  This 
that  each 
component  of  a  distributed  system  be  functionally 
equivalent to the entire system. Applying this principle 
results in a system that automatically provides network 
transparency  and  can  be  extended  (or  contracted) 
without requiring any change to its user interface or to 
its  external  or 
interfaces.  The 
principle  may  seem  to  preclude  systems  containing 
specialized components such as servers, but this is not 
so.  Any  system  interface  must  contain  provisions  for 
exception  conditions  to  be  returned  when  a  requested 
operation  cannot  be  carried  out.  Just  as  the  operating 
system  of  an  ordinary  host  machine  can  return  an 
exception when asked to operate on a nonexistent file, 
so a specialized server that provides no file storage can 
always  return  exceptions  when  asked  to  perform  file 
operations. 
internal  program 
Unix  United  has  been 
implemented  without 
changing  the  standard  Unix  software  in  any  way; 
neither the Unix kernel nor any of its utility programs – 
not  even  the  shell  command  interpreter  –  have  been 
reprogrammed.  This  has  been  accomplished  by 
incorporating an additional layer of software called the 
Newcastle Connection in each of the component Unix 
systems.  This  layer  of  software  sits  on  top  of  the 
resident  Unix  kernel;  from  above  it  is  functionally 
indistinguishable from the kernel, while from below it 
looks like a normal user process. Its role is to filter out 
system calls that have to be redirected to another Unix 
system  and  to  accept  system  calls  that  have  been 
directed  to  it  from  other  systems.  Communication 
between  the  Newcastle  Connection  layers  on  the 
various  systems  is  based  on  the  use  of  a  remote 
procedure call protocol and is shown schematically in 
Figure 2. 
183183
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:38:24 UTC from IEEE Xplore.  Restrictions apply. 
All  requests  for  system-supported  objects  such  as 
files  ultimately  result  in  procedure  calls  on  the  Unix 
kernel  interface.  If  the  service  or  object  required  is 
remote  rather  than  local,  the  local  procedure  call  is 
simply  intercepted  by  the  Newcastle  Connection  and 
replaced  with  a  remote  one.  This  substitution  is 
completely  invisible  at  the  user  or  program  level, 
providing  a  powerful  yet  simple  way  of  putting 
systems  together.  Equally  important,  it  provides  a 
means  of  partitioning  what  appears  to  be  a  single 
system into a number of distributed components. From 
our perspective, this partitioning is the crucial property 
of Unix United, since it enables a large, insecure Unix 
system  to  be  broken  into  a  number  of  physically 
separate components with no visible change at the user 
level.  The  following  sections  will  explain  how  we 
exploit  this  physical  separation  to  construct  a  secure 
system.  We  begin  with  a  very  simple  system  that 
merely  isolates  different  security  partitions  from  one 
another. 
A securely partitioned distributed system 
We  will  describe  a  secure  Unix  United  system 
composed  of  standard  Unix  systems  (and  possibly 
some specialized servers that can masquerade as Unix) 
interconnected  by  a  local  area  network,  or  LAN.  We 
assume  that  all  the  component  Unix  systems  are 
untrustworthy  and  that  the  security  of  the  overall 
system  must  not  depend  on  assumptions  concerning 
their  behavior  –  except  that  the  LAN  provides  their 
only means of intercommunication. 
The  consequence  of  not  trusting  the  individual 
systems  is  that  the  unit  of  protection  must  be  those 
systems  themselves;  thus,  we  will  dedicate  each  to  a 
fixed security partition. We might allocate two systems 
to the Secret level, one to the Top Secret level, and the 
rest 
to  Unclassified  use.  Limited  need-to-know 
controls  can  be  provided  by  dedicating  individual 
machines  to  different  compartments  within  a  single 
security level; thus, one of the Secret systems could be 
dedicated  to  the  Atomic  compartment  and  another  to 
NATO.  In  a  commercial  environment,  some  systems 
could be dedicated to Finance and others to Personnel 
and Management. Users are assigned to hosts with the 
knowledge that no security is guaranteed within those 
individual  systems.  Note  also  that  since  the  hosts  are 
not trusted, they cannot be relied upon to authenticate 
their users correctly. Therefore, access to each system 
must  be  controlled  by  physical  or  other  external 
mechanisms. 
Although  there  is  no  security  within  an  individual 
Unix  system,  the  key  to  our  proposal  is  to  enforce 
security on the communication of information between 
in 
of 
the 
systems. To this end, we place a trustworthy mediation 
device  between  each  system  and 
its  network 
connection; we call  it a trustworthy network  interface 
unit, or TNIU (see Figure 3). 
The initial and very restrictive purpose of TNIUs is 
to  permit  communication  only  between  machines 
belonging  to  the  same  security  partition.  The  single 
Unix United system is therefore divided into a number 
of disjoint subsystems. We will describe later how our 
system can be  extended to move information between 
partitions  securely,  thereby  providing  true  multilevel 
security. 
Controlling which hosts  can communicate with one 
another is a reference monitor function, but because the 
LAN can be subverted or tapped, the TNIUs must also 
provide a separation function to isolate and protect the 
legitimate host-to-host communications channels. This 
separation function is provided cryptographically, with 
TNIUs  encrypting  all  communications  sent  over  the 
LAN.  Encryption  is  traditionally  used  to  protect 
communications between parties who share a common 
interest 
that 
communication,  but  this  is  not  the  case  here.  Host 
machines are untrusted and may attempt to thwart the 
cryptographic protection provided by their TNIUs. For 
this  reason,  the  encryption  must  be  managed  very 
carefully 
to  prevent  clandestine  communication 
between host machines, or between a host machine and 
a wiretapping accomplice. 
preserving 
secrecy 
Although 
the  basic  principles  of  encryption 
management  are well established[8],  a  tutorial outline 
of the issues and techniques as they affect our system 
may benefit readers to whom this material is new. 
Encryption  and  the  protection  of  commun-
ications.  Trustworthy  network  interface  units  use  the 
Data  Encryption  Standard,  or  DES[8]  to  protect 
information  sent  over  the  LAN.  However,  since  host 
machines are untrusted and the LAN can be tapped, the 
simplest  form  of  DES  encryption  –  the  so-called 
electronic code book mode – is ruled out. In this mode, 
each  64-bit  block  of  data  is  encrypted  as  a  separate 