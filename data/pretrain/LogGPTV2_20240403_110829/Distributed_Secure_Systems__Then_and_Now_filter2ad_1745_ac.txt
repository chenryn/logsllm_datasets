The structure of conventional centralized systems is fundamentally at odds with a distributed approach. In such centralized systems, a single resource must be shared among multiple users and functions. To ensure secure operation, a security kernel is required to create separate virtual resources from the shared physical ones. This not only hampers the system's efficiency but also necessitates complex mechanisms whose correctness is challenging to verify.

In contrast, modern distributed systems are well-suited for providing physical separation. They consist of physically separated components, each potentially dedicated to a single security level or function. To achieve security in these systems, we need to implement trustworthy reference monitors that control communications between the distributed components and perform other critical security operations. The key challenge is to design the system in a way that fully exploits the separation provided by physical distribution, simplifying security enforcement without compromising the overall system's coherence.

Given the high cost of providing physically separate systems for each security partition and reference monitor, we use physical separation only for untrusted computing resources (hosts) and for the security processors that house trusted components. Temporal separation allows untrusted host machines to be used for different security partitions by separating activities in time. The system state is reinitialized between activities belonging to different security partitions.

Security processors can support various separation and reference monitor functions, as well as some untrusted support functions, by using a separation kernel to provide logical separation between these functions. Experience suggests that separation kernels, which are simple security kernels designed solely to provide separation, can be relatively small, uncomplicated, and fast. Verification for these kernels appears simpler and more complete compared to general-purpose security kernels.

Our fourth technique, cryptographic separation, uses encryption and related techniques (such as checksums) to separate different uses of shared communication and storage media.

These four separation techniques form the foundation of our distributed secure system, which is a heterogeneous system comprising both untrusted general-purpose systems and trusted specialized components. To function effectively, the system must operate as a coherent whole. Our security mechanisms are built on a distributed system called Unix United, developed at the Computing Laboratory at Newcastle upon Tyne. A Unix United system consists of a set of interlinked standard Unix systems, each with its own storage, peripheral devices, accredited set of users, and system administrator. The naming structures of each component Unix system are joined into a single naming structure, where each Unix system is, in effect, just a directory.

This setup allows, subject to proper accreditation and access control, any user on any Unix system to read or write any file, use any device, execute any command, or inspect any directory, regardless of which system it belongs to. The directory naming structure of a Unix United system reflects the desired logical relationships between its various machines and is independent of their physical interconnections.

Figure 1 illustrates the naming structure of a simple Unix United system incorporating two Unix systems, named unix1 and unix2. From unix1, with the root ("/") and current working directory ("."), one could copy the file "a" into the corresponding directory on the other machine using the Unix shell command:

```sh
cp a /../unix2/user/brian/a
```

This command is a standard use of the Unix shell command interpreter and would have the same effect if the naming structure had been set up on a single machine, with unix1 and unix2 being conventional directories. All standard Unix facilities, whether invoked by shell commands or system calls within user programs, apply unchanged to Unix United, causing inter-machine communication as necessary. Users can specify a directory on a remote machine as their current working directory, request execution of a program held on a remote machine, redirect input and/or output, use files and peripheral devices on a remote machine, and set up pipelines that cause parallel execution of communicating processes on different machines. Since these are standard Unix facilities, users do not need to be concerned about the involvement of multiple machines.

Unix United adheres to the "recursive distributed systems structuring principle," which requires that each component of a distributed system be functionally equivalent to the entire system. This principle results in a system that provides network transparency and can be extended or contracted without changing its user interface or external interfaces. Specialized components, such as servers, can still be included, as the system interface can handle exception conditions when requested operations cannot be carried out.

Unix United has been implemented without altering the standard Unix software. An additional layer of software, called the Newcastle Connection, is incorporated into each component Unix system. This layer sits on top of the resident Unix kernel, functioning indistinguishably from the kernel above and like a normal user process below. It filters out system calls that need to be redirected to another Unix system and accepts system calls directed to it from other systems. Communication between the Newcastle Connection layers on various systems is based on a remote procedure call protocol, as shown in Figure 2.

All requests for system-supported objects, such as files, ultimately result in procedure calls on the Unix kernel interface. If the required service or object is remote rather than local, the local procedure call is intercepted by the Newcastle Connection and replaced with a remote one. This substitution is invisible at the user or program level, providing a powerful yet simple way to integrate systems. It also enables the partitioning of what appears to be a single system into distributed components, a crucial property for constructing a secure system.

In the following sections, we will explain how we exploit this physical separation to construct a secure system, starting with a simple system that isolates different security partitions from one another.

**A Securely Partitioned Distributed System**

We will describe a secure Unix United system composed of standard Unix systems (and possibly some specialized servers that can masquerade as Unix) interconnected by a local area network (LAN). We assume that all the component Unix systems are untrustworthy and that the security of the overall system must not depend on assumptions about their behavior, except that the LAN is their only means of intercommunication.

Since individual systems are not trusted, the unit of protection must be the systems themselves. Each system is dedicated to a fixed security partition. For example, we might allocate two systems to the Secret level, one to the Top Secret level, and the rest to Unclassified use. Limited need-to-know controls can be provided by dedicating individual machines to different compartments within a single security level. In a commercial environment, some systems could be dedicated to Finance, while others to Personnel and Management. Users are assigned to hosts with the understanding that no security is guaranteed within those individual systems. Additionally, since the hosts are not trusted, they cannot be relied upon to authenticate their users correctly. Therefore, access to each system must be controlled by physical or other external mechanisms.

Although there is no security within an individual Unix system, the key to our proposal is to enforce security on the communication of information between systems. To this end, we place a trustworthy mediation device, called a Trustworthy Network Interface Unit (TNIU), between each system and its network connection (see Figure 3).

The initial and restrictive purpose of TNIUs is to permit communication only between machines belonging to the same security partition. The single Unix United system is thus divided into several disjoint subsystems. We will later describe how our system can be extended to securely move information between partitions, providing true multilevel security.

Controlling which hosts can communicate with one another is a reference monitor function. However, because the LAN can be subverted or tapped, the TNIUs must also provide a separation function to isolate and protect legitimate host-to-host communication channels. This separation function is provided cryptographically, with TNIUs encrypting all communications sent over the LAN.

Encryption is traditionally used to protect communications between parties who share a common interest in preserving secrecy. However, in our case, host machines are untrusted and may attempt to thwart the cryptographic protection provided by their TNIUs. Therefore, encryption must be managed carefully to prevent clandestine communication between host machines or between a host machine and a wiretapping accomplice.

While the basic principles of encryption management are well established, a tutorial outline of the issues and techniques as they affect our system may benefit readers new to this material.

**Encryption and the Protection of Communications**

Trustworthy Network Interface Units use the Data Encryption Standard (DES) to protect information sent over the LAN. However, since host machines are untrusted and the LAN can be tapped, the simplest form of DES encryption, the so-called electronic code book mode, is not suitable. In this mode, each 64-bit block of data is encrypted separately, making it vulnerable to certain types of attacks.