![alt](images/00168.jpeg){.calibre3}
图4.37 Audacious界面
【非常OK的Amarok】
若说功能和外观，音频软件里，当属Amarok了，看图4.38就能看出他的强大。Rhythmbox的那些功能Amarok自然都有。并且，Amarok英姿飒爽，不免更加惹人喜爱。于是有国人为他开发了插件，其中，便有下载歌词和封面的，这回自然是中文的了。只不过他身为一个K派，在Gnome环境下似乎总是难免有些碍手碍脚，不得施展。
![alt](images/00169.jpeg){.calibre3}
图4.38 Amarok界面
【Gnome下的Amarok------Exaile】
Gnome的用户也别急，G帮同样不乏精英，那就是有"G帮的Amarok"之称的Exaile，就是图4.39里这位，是不是跟Amarok有些类似之处？Exaile追求着Amarok的追求，感悟着Amarok的感悟，同样的精美，同样的能力，让他们虽不在同一个门派，却有着同一个梦想。
![alt](images/00170.jpeg){.calibre3}
图4.39 Exaile界面
【梦幻的SongBird】
说到梦，图4.40中的这位SongBird似乎是播放器里面最梦幻得了。梦幻得让人都不知道是不是该把他叫做播放器。他很苹果，很iTune，很不像一个音乐播放器。但是他却真真切切地如一只青翠的小鸟般在吟唱着清脆的音流。他还集成一个浏览器，让你伴随着袅袅之音徜徉在浩浩网际。当看到网页上有优秀的音乐时，他还可以帮你将它收入囊中，伴你左右。
![alt](images/00171.jpeg){.calibre3}
图4.40 SongBird界面
除此之外，还有Banshee、Juk、LMP、Minirok、Xnosie......太多太多了，一时介绍不完。不知道今天是不是受懒蜗牛同学和MM的气氛传染，我的程序似乎跑得有些缠绵，哎，大约该把自己重启一下了吧。
4.3.4 扩展阅读：解码器与硬解码
本节提到了视频文件有编码，播放器要用解码器。这个视频文件都是有一定的编码方式的。比如大家都听说过MPEG吧，就是Moving
Picture Experts
Group，动态图像专家组，听这名字本来是用来指代一小撮明白真相的群众的，不过后来这一小撮群众发布的标准被广泛使用，于是MPEG就成了指代这一小撮群众定义出的那一大撮标准的名词了。
【编码，从MPEG-1到MPEG-4】
MPEG-1是小撮群众在1992年定义出的一个标准，是一种视频和音频的编码方式。大家记得以前的VCD不？VCD光盘上的视频和音频用的就是MPEG-1这种编码标准。而MPEG-1标准中关于音频的部分------MPEG-1
Layer3，更是成为互联网上及大家口袋里最常见的音频标准------MP3。
后来，1994年，这一小撮明白真相的群众又发布了MPEG-2标准。MPEG-2向下兼容MPEG-1，并增加对隔行扫描的支持，被应用于有线电视，还有DVD的音频视频编码。
再后来，这一小撮群众又开发了MPEG-3，注意MPEG-3跟我们的MP3没有任何关系，而且，MPEG3最终没有得到很好的应用，因为当时人们发现MPEG-2足够了，MPEG-3并没有提供足够好的改进。
而1998发布的MPEG-4就不一样了，它可以让视频文件的体积更小，压缩率更高，因此得到了广泛的使用。现在市场上卖的MP4播放器，就是用来播放MPEG-4压缩的视频文件的设备。所以，MP4跟MPEG-4有关，而MP3跟MPEG-3无关。
【软件解码】
说了这么多，回过头来说说解码。
视频文件都进行了一定的编码，比如MPEG-2，或者MPEG-4。就是说这个视频文件里面的东西都是一大堆乱七八糟的数字，要想看这个视频文件，就得解码，也就是根据这一大堆数字算出应该显示的一帧一帧的图像，并且把这些图像连续播放起来，从而还原成视频。那么这个解码的过程就要靠Mplayer老先生了。
老先生有很多的解码器，也就是有很多的说明手册，上面写了每种编码格式的文件应该怎么计算，怎么解码。那么以前没有硬件解码的时候，Mplayer老先生是怎么做的呢？首先，拿到一个视频文件，然后看看是什么编码的，对着自己的手册，开始解码。解码的过程就是计算的过程，计算需要用什么？那位同学回答了，得用CPU啊。于是Mplayer一手拿着手册，一手拎着数据找到我，请求使用CPU（我是操作系统嘛，软件要用CPU得跟我申请）。我说，好的，你就排在GIMP的后面，等他用完了你用。过一会儿GIMP用完了CPU，Mplayer过去开始拿CPU按照手册上写的算法算他那堆数据。最后算出来，得到了几张图片，就转身把图片给图形部门，让他们去显示。然后再从那个视频文件里拿一些数据，再来排队等着用CPU。
由于视频文件的计算量都很大，尤其是高清视频尤其大，因此为了保证蜗牛看的电影不变成带旁白的幻灯片，我就要尽可能地让Mplayer多用CPU，来保证他能顺利地解码。于是，每次Mplayer一播高清视频，CPU就总被他占着，搞得别的程序都抱怨。
【硬件解码】
如果他终于学会硬解码了，情况就好多了。当然，光他学会硬解码也不行，关键是显卡也得支持，而且驱动还得装好才行，不过这些咱现在不讨论，先说Mplayer。
会了硬解码之后怎么样呢？在播放视频的时候一手拿着手册，一手拎着数据找到我，跟我说要用用显卡。可不是CPU了啊，改用显卡了。于是我就很乐意地让他去用了，反正别人也用不着，让他自个玩去吧。于是他就去用显卡算去了。用显卡算和用CPU算不一样，CPU虽然强大，虽然啥都能算，但是要自己手动算。就是说自己要知道算法（对于Mplayer来说，算法都在解码器上写着呢），比如要算出一帧的视频来，要先用第1个数加上第2个数，再用结果乘以第3个数之类的。这里加啊，乘啊，都是用CPU算的，但是中间的过程是要软件（也就是Mplayer）自己控制的。可是用显卡解码就不一样了，人家那东西是专门解视频的啊，所以你只要把数据放在里面，直接就能给你算出一帧帧的画面来。全自动啊！于是Mplayer不但不用跟别的软件抢CPU了，而且解码的速度还快了不少。
![alt](images/00011.jpeg){.tpzz}**提示：**[显卡上的GPU在计算并行计算方面比CPU更加强大，因此硬解码可以获得更快的速度。]{.kai1}
[4.4 我的生活色彩]{.kai}
今天一起床就接到了一个任务，听起来还挺轻松，一般胡同里大妈大婶的，经常做这项工作，并且乐此不疲，那就是------串门。不过我去串门可不是聊天去的，我是去做搬运工，要把一些图片复制到我们Ubuntu系统的硬盘里。估计懒蜗牛同学是想处理照片了，这回，图像处理部的那几个软件有事干了。
4.4.1 从复制照片开始
能够有机会去隔壁Windows 7那屋里，看看他和他的同志们，我还是很高兴的。
【从邻居家复制照片】
推门进入Windows
7的房间，里面所有的软件都在睡觉。我看了一下，这个房间是NTFS格式的。想想也是，Windows
7只能装在NTFS格式的硬盘上。要说以前，我们Linux是不太能读懂NTFS格式的磁盘的，毕竟是微软私有的格式，我的前辈们基本上只能勉强自NTFS的磁盘上读取东西，往里写是不行的。不过自从Canonical学校为我们增加了一本ntfs-3g教材以后，读写NTFS就都不在话下了。
![alt](images/00011.jpeg){.tpzz}**提示：**[目前Linux虽然能够读写NTFS分区，但如果NTFS分区中设置了加密或压缩属性，则可能会发生异常。]{.kai1}
不过虽然能够读懂，但是我自己是不会用这个文件系统的，我会用很多其他的文件格式，比如ext2、ext3、xfs、jfs、reiserfs、ufs、zfs等，各有优势，我现在的屋里使用的是非常强大的xfs格式，至于怎么强大，以后慢慢细聊，现在我要干活了。
来到Windows
7的屋里后才发现，满地都是碎片啊。别误会，这碎片并不是打架摔的，而是磁盘碎片。是这样，Windows
7使用的文件系统比较容易产生磁盘碎片，隔三差五地就需要整理，可能是我们的蜗牛同志比较懒吧（要不怎么叫懒蜗牛呢），所以这屋里有很多碎片没有整理。不管这些了，赶紧干活，搬东西。按照懒蜗牛的指示，我找到了那些照片文件的目录，里面还有很多的子目录，叫什么bizhi、美女、风景等，还有个目录，叫做".隐藏"，这里面是啥呢？打开一看，还有一个目录，叫做XX门......
![alt](images/00011.jpeg){.tpzz}**提示：**[Linux读取NTFS分区时的速度可能比Windows慢一些。]{.kai1}
【从移动存储设备复制照片】
总算把所有照片搬回来了，还没喘口气呢，我们屋里那扇USB门上的灯又亮了。
这扇USB门是我们与外界交流的一个接口，每次门上的红灯亮起，就说明有东西接到USB上了，我就得去打开门看看。有时候门外是一个小集装箱似的屋子，很小，一般只有几百个MB到几个GB大小，里面也像我的屋子里一样放着一些文件。这个时候一般用户就是要让我搬东西，不是把小屋子里的往大屋里搬，就是从大屋往小屋挪。有时候一开门，外面不是一个屋子，而是一台设备，比如是一个鼠标啊，或者是个摄像头什么的，那就是让我去操作这些设备了。不过总的来说，还是往USB门外接小集装箱屋子的情况多，这种小集装箱式的屋子叫做U盘，也有更大一点的，叫做移动硬盘。每当U盘接进来的时候，我就把它当作我屋子的一部分来用。
![alt](images/00011.jpeg){.tpzz}**提示：**[插入USB设备后可以通过lsusb命令查看是否正确识别到该设备。]{.kai1}
【挂载的概念】
这回懒蜗牛同学接到USB上的又是一个集装箱式的空间，还比较大，4
GB。我仔细看了看，结果没有发现这个设备的名字，于是我就直接给他起个名字，并在门上挂上了牌子：/media/4.1G。
就像我屋里的/home分区一样，我屋里的所有分区，都必须有个牌子。这个挂牌子的过程，用我们的专业话说，叫做挂载，大家装系统的时候应该都听说过。挂载，就是挂牌，就是在某一间屋子的门口挂个牌子，起个名字，干活的时候就好说话了。直接说屋子的名字就可以了。
名字，或者说牌子，就是个标志，是可以随便换的。比如有个分区被挂载到了/home/目录，也就是说，有个屋子A，被挂上了/home/的牌子。那么用户说要看看/home/下都有什么，我就会把那个屋子A里面的东西列出一个单子来给用户看。回头可能又把别的分区挂载到/home/下了，很简单，就是把/home/那个牌子从A房间门口摘下来挂在B房间门口而已。用户再说要看看/home/下都有什么，我就该把屋子B里面的东西列表来给用户看了。没啥经验的用户可能会大跌眼镜：哇塞，怎么我的/home/下原来那些东西都没了啊？都哪去了啊？殊不知，其实原来那些东西还在A屋子里好好地放着，只是现在B房间改叫/home/了而已。
![alt](images/00011.jpeg){.tpzz}**提示：**[移动存储设备插入系统后，系统会自动挂载。如果挂载失败可以手动运行命令挂载：]{.kai1}
![alt](images/00172.jpeg){.calibre3}
其中，设备名即为sdb1之类的设备文件，可以通过fdisk --l查看。
4.4.2 管理照片的F-spot
扯远了，不好意思。回来说这回接上的这个4
GB的屋子。接上之后，还没等用户发话，我先去里面查看了一下，一看全都是些JPG格式的文件，我是看不懂这些文件的，但是我知道有人能懂，于是赶快通过图形界面那哥儿几个报告用户：您插进来的这个里面貌似全是照片，是不是要我给您找来F-Spot处理呢？提示如图4.41所示。
![alt](images/00173.jpeg){.calibre3}
图4.41 插入存有照片的存储设备时的提示
F-Spot是我们这里的一个管理照片的程序，他可以帮用户把移动设备（就是那种集装箱似的小空间）里的照片导到硬盘里，并且按时间分门别类地管理好。用户想要去年3月的照片，他马上能够给找到；要前年5.1假期的，没问题；要看宋朝的......给把铲子自己挖去吧。
除此之外，他还能够汇报照片的信息，比如用什么相机照的，照的时候用的光圈，快门，ISO都是多少等信息。这例不是F-Spot厉害，能够光看照片就知道是用什么相机照的，而是因为相机在照这张照片的时候就把各种参数写进照片文件里了。
![alt](images/00011.jpeg){.tpzz}**提示：**[数码相机拍摄的照片包含EXIF信息，记录了拍摄时的情况。除F-Spot这样专门管理照片的软件外，在Gnome中直接查看照片文件的属性，选择图像标签就可以看到。如图4.42所示。]{.kai1}
![alt](images/00174.jpeg){.calibre3}
图4.42 查看照片EXIF
懒蜗牛似乎对F-Spot的能力还不大熟悉，于是没有让我去叫醒F-Spot来导入照片，而是自己手动把U盘里面的照片复制到了那个放照片的目录。复制完之后，懒蜗牛看了看图片目录的文件夹：bizhi、美女、风景，还有从U盘复制过来的"静物"，嗯......都齐了。接着，就下达了卸载U盘的命令。
![alt](images/00011.jpeg){.tpzz}**提示：**[卸载U盘可右击桌面上U盘的图标，选择"卸载"或"安全移除驱动器"。"卸载"只卸载U盘上的文件系统，并不断电，处理方式类似Windows
7。"安全移除驱动器"包括卸载和断电两个动作，处理方式类似Windows
XP。]{.kai1}