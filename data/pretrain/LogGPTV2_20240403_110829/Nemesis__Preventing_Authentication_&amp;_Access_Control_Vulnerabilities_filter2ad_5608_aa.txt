title:Nemesis: Preventing Authentication &amp; Access Control Vulnerabilities
in Web Applications
author:Michael Dalton and
Christos Kozyrakis and
Nickolai Zeldovich
Nemesis: Preventing Authentication & Access
Control Vulnerabilities in Web Applications
Michael Dalton, Christos Kozyrakis, and Nickolai Zeldovich
Computer Systems Laboratory
Stanford University
{mwdalton, kozyraki}@stanford.edu
CSAIL
MIT
PI:EMAIL
Abstract
This paper presents Nemesis, a novel methodology for
mitigating authentication bypass and access control vul-
nerabilities in existing web applications. Authentication
attacks occur when a web application authenticates users
unsafely, granting access to web clients that lack the ap-
propriate credentials. Access control attacks occur when
an access control check in the web application is incor-
rect or missing, allowing users unauthorized access to
privileged resources such as databases and ﬁles. Such
attacks are becoming increasingly common, and have oc-
curred in many high-proﬁle applications, such as IIS [10]
and WordPress [31], as well as 14% of surveyed web
sites [30]. Nevertheless, none of the currently available
tools can fully mitigate these attacks.
Nemesis automatically determines when an application
safely and correctly authenticates users, by using Dy-
namic Information Flow Tracking (DIFT) techniques to
track the ﬂow of user credentials through the application’s
language runtime. Nemesis combines authentication in-
formation with programmer-supplied access control rules
on ﬁles and database entries to automatically ensure that
only properly authenticated users are granted access to
any privileged resources or data. A study of seven pop-
ular web applications demonstrates that a prototype of
Nemesis is effective at mitigating attacks, requires little
programmer effort, and imposes minimal runtime over-
head. Finally, we show that Nemesis can also improve the
precision of existing security tools, such as DIFT analy-
ses for SQL injection prevention, by providing runtime
information about user authentication.
1
Introduction
Web applications are becoming increasingly prevalent
because they allow users to access their data from any
computer and to interact and collaborate with each other.
However, exposing these rich interfaces to anyone on the
internet makes web applications an appealing target for
attackers who want to gain access to other users’ data or
resources. Web applications typically address this prob-
lem through access control, which involves authenticating
users that want to gain access to the system, and ensuring
that a user is properly authorized to perform any operation
the server executes on her behalf. In theory, this approach
should ensure that unauthorized attackers cannot subvert
the application.
Unfortunately, experience has shown that many web
applications fail to follow these seemingly simple steps,
with disastrous results. Each web application typically
deploys its own authentication and access control frame-
work.
If any ﬂaw exists in the authentication system,
an authentication bypass attack may occur, allowing at-
tackers to become authenticated as a valid user without
having to present that user’s credentials, such as a pass-
word. Similarly, a single missing or incomplete access
control check can allow unauthorized users to access priv-
ileged resources. These attacks can result in the complete
compromise of a web application.
Designing a secure authentication and access control
system in a web application is difﬁcult. Part of the reason
is that the underlying ﬁle system and database layers per-
form operations with the privileges of the web application,
rather than with privileges of a speciﬁc web application
user. As a result, the web application must have the super-
set of privileges of all of its users. However, much like a
Unix setuid application, it must explicitly check if the
requesting user is authorized to perform each operation
that the application performs on her behalf; otherwise, an
attacker could exploit the web application’s privileges to
access unauthorized resources. This approach is ad-hoc
and brittle, since these checks must be sprinkled through-
out the application code whenever a resource is accessed,
spanning code in multiple modules written by different
developers over a long period of time. It is hard for devel-
opers to keep track of all the security policies that have to
be checked. Worse yet, code written for other applications
1
or third-party libraries with different security assumptions
is often reused without considering the security implica-
tions. In each case, the result is that it’s difﬁcult to ensure
the correct checks are always performed.
It is not surprising, then, that authentication and ac-
cess control vulnerabilities are listed among the top ten
vulnerabilities in 2007 [17], and have been discovered
in high-proﬁle applications such as IIS [10] and Word-
Press [31]. In 2008 alone, 168 authentication and access
control vulnerabilities were reported [28]. A recent survey
of real-world web sites found that over 14% of surveyed
sites were vulnerable to an authentication or access con-
trol bypass attack [30].
Despite the severity of authentication or authorization
bypass attacks, no defensive tools currently exist to au-
tomatically detect or prevent them. The difﬁculty in ad-
dressing these attacks stems from the fact that most web
applications implement their own user authentication and
authorization systems. Hence, it is hard for an automatic
tool to ensure that the application properly authenticates
all users and only performs operations for which users
have the appropriate authorization.
This paper presents Nemesis,1 a security methodology
that addresses these problems by automatically tracking
when user authentication is performed in web applications
without relying on the safety or correctness of the existing
code. Nemesis can then use this information to automat-
ically enforce access control rules and ensure that only
authorized web application users can access resources
such as ﬁles or databases. We can also use the authentica-
tion information to improve the precision of other security
analyses, such as DIFT-based SQL injection protection,
to reduce their false positive rate.
To determine how a web application authenticates
users, Nemesis uses Dynamic Information Flow Tracking
(DIFT) to track the ﬂow of user credentials, such as a user-
name and password, through the application code. The
key insight is that most applications share a similar high-
level design, such as storing usernames and passwords
in a database table. While the details of the authentica-
tion system, such as function names, password hashing
algorithms, and session management vary widely, we can
nonetheless determine when an application authenticates
a user by keeping track of what happens to user creden-
tials at runtime. Once Nemesis detects that a user has
provided appropriate credentials, it creates an additional
HTTP cookie to track subsequent requests issued by the
authenticated user’s browser. Our approach does not re-
quire the behavior of the application to be modiﬁed, and
does not require any modiﬁcations to the application’s
existing authentication and access control system. Instead,
1Nemesis is the Greek goddess of divine indignation and retribution,
who punishes excessive pride, evil deeds, undeserved happiness, and
the absence of moderation.
Nemesis is designed to secure legacy applications without
requiring them to be rewritten.
To prevent unauthorized access in web applications,
Nemesis combines user authentication information with
authorization policies provided by the application devel-
oper or administrator in the form of access control rules
for various resources in the application, such as ﬁles,
directories, and database entries. Nemesis then automati-
cally ensures that these access control rules are enforced
at runtime whenever the resource is accessed by an (au-
thenticated) user. Our approach requires only a small
amount of work from the programmer to specify these
rules—in most applications, less than 100 lines of code.
We expect that explicitly specifying access control rules
per-resource is less error-prone than having to invoke the
access control check each time the resource is accessed,
and having to enumerate all possible avenues of attack.
Furthermore, in applications that support third-party plug-
ins, these access control rules need only be speciﬁed once,
and they will automatically apply to code written by all
plugin developers.
By allowing programmers to explicitly specify access
control policies in their applications, and by tying the au-
thentication information to runtime authorization checks,
Nemesis prevents a wide range of authentication and ac-
cess control vulnerabilities seen in today’s applications.
The speciﬁc contributions of this paper are as follows:
• We present Nemesis, a methodology for inferring au-
thentication and enforcing access control in existing
web applications, while requiring minimal annota-
tions from the application developers.
• We demonstrate that Nemesis can be used to prevent
authentication and access control vulnerabilities in
modern web applications. Furthermore, we show
that Nemesis can be used to prevent false positives
and improve precision in real-world security tools,
such as SQL injection prevention using DIFT.
• We implement a prototype of Nemesis by modifying
the PHP interpreter. The prototype is used to collect
performance measurements and to evaluate our secu-
rity claims by preventing authentication and access
control attacks on real-world PHP applications.
The remainder of the paper is organized as follows.
Section 2 reviews the security architecture of modern web
applications, and how it relates to common vulnerabilities
and defense mechanisms. We describe our authentication
inference algorithm in Section 3, and discuss our access
control methodology in Section 4. Our PHP-based pro-
totype is discussed in Section 5. Section 6 presents our
experimental results, and Section 7 discusses future work.
Finally, Section 8 discusses related work and Section 9
concludes the paper.
2
2 Web Application Security Architecture
A key problem underlying many security vulnerabilities
is that web application code executes with full privileges
while handling requests on behalf of users that only have
limited privileges, violating the principle of least priv-
ilege [11]. Figure 1 provides a simpliﬁed view of the
security architecture of typical web applications today.
As can be seen from the ﬁgure, the web application is
performing ﬁle and database operations on behalf of users
using its own credentials, and if attackers can trick the
application into performing the wrong operation, they
can subvert the application’s security. Web application
security can thus be viewed as an instance of the confused
deputy problem [9]. The rest of this section discusses this
architecture and its security ramiﬁcations in more detail.
2.1 Authentication Overview
When clients ﬁrst connect to a typical web application,
they supply an application-speciﬁc username and pass-
word. The web application then performs an authenti-
cation check, ensuring that the username and password
are valid. Once a user’s credentials have been validated,
the web application creates a login session for the user.
This allows the user to access the web application without
having to log in each time a new page is accessed. Lo-
gin sessions are created either by placing authentication
information directly in a cookie that is returned to the
user, or by storing authentication information in a ses-
sion ﬁle stored on the server and returning a cookie to
the user containing a random, unique session identiﬁer.
Thus, a user request is deemed to be authenticated if the
request includes a cookie with valid authentication infor-
mation or session identiﬁer, or if it directly includes a
valid username and password.
Once the application establishes a login session for a
user, it allows the user to issue requests, such as posting
comments on a blog, which might insert a row into a
database table, or uploading a picture, which might re-
quire a ﬁle to be written on the server. However, there is
a semantic gap between the user authentication mecha-
nism implemented by the web application, and the access
control or authorization mechanism implemented by the
lower layers, such as a SQL database or the ﬁle system.
The lower layers in the system usually have no notion
of application-level users; instead, database and ﬁle op-
erations are usually performed with the privileges and
credentials of the web application itself.
Consider the example shown in Figure 1, where the
web application writes the ﬁle uploaded by user Bob to
the local ﬁle system and inserts a row into the database
to keep track of the ﬁle. The ﬁle system is not aware
of any authentication performed by the web application
or web server, and treats all operations as coming from
the web application itself (e.g. running as the Apache
user in Unix). Since the web application has access to
every user’s ﬁle, it must perform internal checks to en-
sure that Bob hasn’t tricked it into overwriting some other
user’s ﬁle, or otherwise performing an unauthorized oper-
ation. Likewise, database operations are performed using
a per-web application database username and password
provided by the system administrator, which authenticates
the web application as user webdb to MySQL. Much like
the ﬁlesystem layer, MySQL has no knowledge of any
authentication performed by the web application, inter-
preting all actions sent by the web application as coming
from the highly-privileged webdb user.
2.2 Authentication & Access Control At-
tacks
The fragile security architecture in today’s web appli-
cations leads to two common problems, authentication
bypass and access control check vulnerabilities.
Authentication bypass attacks occur when an attacker
can fool the application into treating his or her requests
as coming from an authenticated user, without having to
present that user’s credentials, such as a password. A
typical example of an authentication bypass vulnerability
involves storing authentication state in an HTTP cookie
without performing any server-side validation to ensure
that the client-supplied cookie is valid. For example,
many vulnerable web applications store only the user-
name in the client’s cookie when creating a new login
session. A malicious user can then edit this cookie to
change the username to the administrator, obtaining full
administrator access. Even this seemingly simple problem
affects many applications, including PHP iCalendar [20]
and phpFastNews [19], both of which are discussed in
more detail in the evaluation section.
Access control check vulnerabilities occur when an
access check is missing or incorrectly performed in the
application code, allowing an attacker to execute server-
side operations that she might not be otherwise autho-
rized to perform. For example, a web application may
be compromised by an invalid access control check if an
administrative control panel script does not verify that the
web client is authenticated as the admin user. A malicious
user can then use this script to reset other passwords, or
even perform arbitrary SQL queries, depending on the
contents of the script. These problems have been found
in numerous applications, such as PhpStat [21].
Authentication and access control attacks often result in
the same unfettered ﬁle and database access as traditional
input validation vulnerabilities such as SQL injection and
directory traversal. However, authentication and access
control bugs are more difﬁcult to detect, because their
3
Figure 1: The security architecture of typical web applications. Here, user Bob uploads a picture to a web application, which in turn inserts data into
a database and creates a ﬁle. The user annotation above each arrow indicates the credentials or privileges used to issue each operation or request.
logic is application-speciﬁc, and they do not follow simple
patterns that can be detected by simple analysis tools.
the SQL query. Thus, to properly judge whether a SQL
injection attack is occurring, the security system must
know which user is currently authenticated.
2.3 Other Web Application Attacks
Authentication and access control also play an important,
but less direct role, in SQL injection [27], command in-
jection, and directory traversal attacks. For example, the
PHP code in Figure 2 places user-supplied search parame-
ters into a SQL query without performing any sanitization
checks. This can result in a SQL injection vulnerability;
a malicious user could exploit it to execute arbitrary SQL
statements on the database. The general approach to ad-
dressing these attacks is to validate all user input before
it is used in any ﬁlesystem or database operations, and to
disallow users from directly supplying SQL statements.