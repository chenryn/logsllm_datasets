✗/✓ ✓ ✓
(d) 𝐻𝑜𝑠𝑡𝑠(𝑒𝑛𝑡, 𝑟𝑒𝑠)
Resources
Entity
secret keysu
secret keys
-
metadata
encrypted data
proxyu
proxy
RM
MS
DS
(f) 𝐼𝑛ℎ𝑒𝑟𝑖𝑡𝑠(𝑒𝑛𝑡, 𝑝𝑟𝑜, 𝑟𝑒𝑠)
Entity
C
Property
I
proxyu secret keysu, metadatau secret keysu
proxy
secret keys
secret keys, metadata
metadata𝑎
RM
MS
DS
metadata𝑏
-
(c) 𝑃𝑟𝑒𝑠𝑒𝑟 𝑣𝑒𝑠(𝑑𝑜𝑚, 𝑝𝑟𝑜, 𝑟𝑒𝑠)
Domain
clientu
on-premise
CSP
secret keysu, metadatau
Property
I
★
★
A
★
★
C
★
-
(e) 𝑈 𝑠𝑒𝑠(𝑒𝑛𝑡, 𝑟𝑒𝑠)
Entity
Resources
proxyu metadatau, encrypted data
metadata, encrypted data
proxy
metadata, encrypted data
RM
-
MS
-
DS
(g) 𝐶𝑎𝑛𝐶𝑜𝑛𝑡𝑎𝑖𝑛(𝑑𝑜𝑚, 𝑒𝑛𝑡)
Domain
clientu
on-premise
CSP
Entities
𝑐
𝑑
𝑒
A
secret keysu
secret keys
-
-
metadata
metadata
encrypted data encrypted data
(h) Sets
(cid:16)
𝑎 If 𝑅𝑒𝑞𝑢𝑖𝑟𝑒𝑠(metadata, C); 𝑏 See Footnote 𝑎; 𝑐 proxyu
𝑑 If not 𝑅𝑒𝑞𝑢𝑖𝑟𝑒𝑠(metadata, C); 𝑒 See Footnote 𝑑
𝐼𝑛ℎ𝑒𝑟𝑖𝑡𝑠(𝑒𝑛𝑡, 𝑝𝑟𝑜, 𝑟𝑒𝑠) iff
∀𝑝𝑟𝑜, 𝑟𝑒𝑠. ∃𝑟𝑒𝑠′ (cid:16)
𝐶𝑎𝑛𝐶𝑜𝑛𝑡𝑎𝑖𝑛(𝑑𝑜𝑚, 𝑒𝑛𝑡) iff
(𝐻𝑜𝑠𝑡𝑠(𝑒𝑛𝑡, 𝑟𝑒𝑠) ∧ 𝑅𝑒𝑞𝑢𝑖𝑟𝑒𝑠(𝑟𝑒𝑠, 𝑝𝑟𝑜))
∨(𝑈 𝑠𝑒𝑠(𝑒𝑛𝑡, 𝑟𝑒𝑠) ∧ 𝑅𝑒𝑞𝑢𝑖𝑟𝑒𝑠(𝑟𝑒𝑠, 𝐶))
(𝐼𝑛ℎ𝑒𝑟𝑖𝑡𝑠(𝑒𝑛𝑡, 𝑝𝑟𝑜, 𝑟𝑒𝑠) =⇒
𝑃𝑟𝑒𝑠𝑒𝑟 𝑣𝑒𝑠(𝑑𝑜𝑚, 𝑝𝑟𝑜, 𝑟𝑒𝑠′)) ∧ 𝑟𝑒𝑠 ⊑ 𝑟𝑒𝑠′
(cid:17)
(cid:17)
(1)
(2)
Figure 1: Summary of Basic Notions of CAC Schemes
𝑟 , kp
𝑢) and (ks
• encrypted data: by definition, the architecture of a CAC
scheme involves data (e.g., files encrypted with ksym, as
introduced in Section 2.2) encrypted under an AC policy;
• secret keys: a CAC scheme expects a set of secret crypto-
graphic keys (e.g., the asymmetric keys of users and roles,
(ks
𝑟 ), and the symmetric keys of files, ksym,
𝑢, kp
as introduced in Section 2.2);
• metadata: intuitively, a CAC scheme needs also metadata
(e.g., the AC policy, public cryptographic keys, files version
numbers and digital signatures, as introduced in Section 2.2).
Since CAC schemes rely on these resources to properly func-
tion, we require to preserve the integrity (i.e., prevent unauthorized
modifications) and availability (i.e., guarantee access when needed)
of these resources. However, a resource may be sensitive or not
(e.g., public cryptographic keys are not sensitive). Therefore, we
may require or not to preserve the Confidentiality of a (crypto-
graphic) resource. Table 1b in Figure 1 defines the relation Requires,
i.e., it identifies the CIA properties pro required by each resource
res: Requires(res, pro) when the cell at the row res and column res
DomainsCanContainEntitiesUsesResourcesHostsRequiresPreservesInheritsPropertiescontains the symbol ✓ whereas ⟨⟩ ∉ Requires when it contains the
symbol ✗.
We assume perfect encryption over data (i.e., the confidentiality
of the encrypted data cannot be compromised by attacking the
available cryptographic primitives) so that confidentiality of en-
crypted data is implied. On the contrary, the confidentiality of the
secret keys is crucial for the overall security of CAC schemes; we
add this as a requirement. Therefore, we require to preserve the
confidentiality of the keys. Finally, the sensitivity of the metadata
depends on the organization and the scenario. For instance, the
name of files can potentially disclose on what projects the organiza-
tion is working, while the AC policy can reveal the organization’s
internal hierarchy [41]. Depending on the organization’s judgment,
metadata confidentiality can be either required or not (✓/✗). We
note that sensitive metadata can be encrypted and turned into non-
sensitive metadata at the cost of additional overhead on the CAC
scheme. However, not all CAC schemes expect to encrypt metadata,
and some entities may need to access plain-text metadata anyway.
Therefore, we consider as optional the possibility to have sensitive
metadata.
4.2 Domains and Trust
Following [10] and [40], we identify three domains defined from
the organization’s point of view. Domains are containers for other
elements (e.g., a CSP hosting a database) and are grouped together
in the set Domains (see the column Domain in Table (c) of Figure 1):
• clientu is the domain in which the user u operates. We define
the clientu domain as the user’s u personal devices (e.g., his
laptop and smartphone). We assume that personal devices
are not shared among users and that access is protected
through passwords or similar authentication techniques. In
this way, each user operates independently from the other
users;
• on-premise is the domain in which the administrators operate.
Usually, the on-premise domain lies within the organization
as an area to which only authorized personnel can access
(e.g., a data centre to which only administrators can access,
either physically or virtually);
• CSP is the domain of a third-party offering cloud services,
like computing and storage of files. It is a logical area and is
geographically distributed [6].
The fact that a domain dom is assumed to preserve (or not)
a CIA property pro of a resource res it contains is formalized as
Preserves(dom, pro, res). We show in Table 1c the definition of the
relation Preserves, where the symbol “★” is a wildcard for any re-
source and the symbol “-” stands for no resource. We consider
administrators and thus the on-premise domain to be fully trusted.
As a consequence, the on-premise domain preserves the CIA prop-
erties of all the resources it contains— formally, for res in Resources,
Preserves(on − premise, 𝐶, res), Preserves(on − premise, 𝐼, res) as well
as Preserves(on − premise, 𝐴, res). As discussed in Section 3, we as-
sume the CSP to be partially trusted; this means that the CSP
preserves the integrity and availability of the resources it con-
tains but not the confidentiality—formally, Preserves(CSP, 𝐼, res),
𝑢′, kp
Preserves(CSP, 𝐴, res), and (CSP, 𝐶, res) ∉ Preserves for res in Re-
sources. Users are not trusted to operate on (i.e., they do not pre-
serve the CIA properties of) resources the AC policy does not grant
them access to. However, users are trusted to operate on resources
the AC policy grants them access to (e.g., the user’s own secret keys).
To refer to the portion of a resource to which the user u has access to,
we use the subscript u. For instance, secret keysu indicates the secret
keys to which the user u has access to based on the AC policy (e.g.,
(ks
𝑢)) and not the whole set of secret keys (e.g., the keys of an-
𝑢, kp
other user u′ (ks
𝑢′)). Similarly, metadatau refers to the portion
of metadata the user u can access to based on the AC policy. There-
fore, each clientu domain preserves the CIA properties of the subset
of resources the AC policy grants the user u access to (i.e., secret
keysu and metadatau). Formally, Preserves(clientu, pro, secretkeysu)
and Preserves(clientu, pro, metadatau) for pro in Properties.
4.3 Entities and Relationships with Resources
The set Entities contains elements that actively perform tasks in
CAC schemes (see the columns marked with Entities in Tables (d)
and (e) of Figure 1):6
• proxy: Domingo-Ferrer et al. [7] argued that the architectures
of CAC schemes usually involve a local proxy to interface
users with encrypted data. The proxy takes care of encrypt-
ing the data before uploading them to the storage service
and decrypting data before showing them to the user.
• reference monitor (RM): Garrison et al. [10] discussed the
presence of a minimal reference monitor to check modifi-
cations to encrypted data. This entity checks the integrity
and compliance with the AC policy of the users’ actions (e.g.,
write on an encrypted file). Possibly, the RM also performs
cryptographic operations (e.g., verifying digital signatures);
• data storage (DS): this entity is the storage (e.g., a database)
• metadata storage (MS): this entity is the storage (e.g., a data-
containing the data;
base) containing the metadata.
To accomplish its tasks, an entity must be located in at least
one domain (e.g., a software needs to run on a machine); for this,
an entity may host and use resources (e.g., a proxy using a secret
cryptographic key to decrypt an encrypted file). Tables (d) and (e)
define the relations Hosts and Uses, respectively, i.e., they identify
the entity ent that hosts or uses a resource res. The proxy trans-
forms high-level requests (e.g., read a file) into the sequence of
low-level cryptographic operations necessary to accomplish them
(e.g., obtain the decrypting key, download the encrypted file and
decrypt the file, as presented in Section 2.2). Therefore, the proxy
hosts the secret keys and uses metadata and encrypted data. We
note that the proxy can be installed on each of the users’ personal
devices (i.e., multiple instances) or in a unique trusted location (i.e.,
single instance) like a server within the organization. In the former
case, expressed as “proxyu”, each proxy hosts the secret keys of the
user u and accesses metadata to which u has access to. In the latter
case, expressed as “proxy”, the proxy hosts the whole set of se-
cret keys and accesses the whole set of metadata. Formally, we
specify these as Hosts(proxy, secret keys), Uses(proxy, metadata),
Hosts(proxy𝑢, secret keys𝑢), and Uses(proxy𝑢, metadata𝑢). Finally,
6Entities’ icons made by Freepik from www.flaticon.com
the RM uses both metadata and encrypted data to verify the com-
pliance with the AC policy of the users’ actions; the DS and the
MS stores encrypted data and metadata, respectively. Formally,
this is written as Hosts(MS, metadata), Hosts(DS, encrypted data),
Uses(RM, metadata), and Uses(RM, encrypted data).
4.4 Putting Things Together
We are now ready to define the notion of a CAC scheme architec-
ture by identifying which CIA properties each entity inherits on
which resources and then inferring in which domains an entity
can stay by checking whether the domain preserves the properties
inherited by the entity. To do this, we define two relations Inherits
and CanContain, respectively. The intuition is that an architecture
will be formed by those pairs ⟨ent, res⟩ that satisfies both relations
for ent an element of Entities and res an element of Resources.
The formal definition of the relation Inherits is (1) in Table 1h. A
tuple ⟨𝑒𝑛𝑡, 𝑝𝑟𝑜, 𝑟𝑒𝑠⟩ ∈ 𝐼𝑛ℎ𝑒𝑟𝑖𝑡𝑠 if the entity 𝑒𝑛𝑡 hosts the resource
𝑟𝑒𝑠 and 𝑟𝑒𝑠 requires 𝑝𝑟𝑜, or the entity 𝑒𝑛𝑡 uses the resource 𝑟𝑒𝑠
and 𝑟𝑒𝑠 requires 𝑝𝑟𝑜 having that 𝑝𝑟𝑜 is the confidentiality property.
Table 1f in Figure 1 is extensionally equivalent to (1) in Table 1h.
The formal definition of the relation CanContain is (2) in Table 1h.
A tuple ⟨𝑑𝑜𝑚, 𝑒𝑛𝑡⟩ ∈ 𝐶𝑎𝑛𝐶𝑜𝑛𝑡𝑎𝑖𝑛 if for all properties 𝑝𝑟𝑜 inherited
by 𝑒𝑛𝑡 on 𝑟𝑒𝑠, 𝑑𝑜𝑚 preserves 𝑝𝑟𝑜 on 𝑟𝑒𝑠′ with 𝑟𝑒𝑠 ⊑ 𝑟𝑒𝑠′ where
⊑ models a hierarchy on resources; the hierarchy refers to secret
keysu ⊑ secret keys since secret keysu is a portion of secret keys
and similarly metadatau ⊑ metadata as metadatau is a portion of
metadata. Table 1g in Figure 1 is extensionally equivalent to (2) in
Table 1h and can be interpreted as follows. If we consider multiple
instances proxyu of the proxy for each user u, the proxy would
host a portion of the secret keys (i.e., secret keysu) and access
a portion of the metadata (i.e., metadatau) only. In this case, the
clientu domain can contain the proxyu. Then, being fully trusted by
definition, the on-premise domain preserves the CIA properties of
all resources and therefore can contain all entities. Finally, the CSP
can contain the DS entity since the DS inherits the integrity and
availability properties of the encrypted data only. Then, depending
on the sensitivity of metadata, the RM and MS could inherit the
confidentiality property. If the organization deems metadata not
to be sensitive, the CSP can contain both the RM and MS. As a
final note, since the RM provides security and compliance checks
on users’ actions, we assume that the RM cannot run in the users’
computer. Therefore, we assume that ⟨clientu, RM⟩ ∉ 𝐶𝑎𝑛𝐶𝑜𝑛𝑡𝑎𝑖𝑛.
As we can see from Table 1g, different domains can contain
the same entity (e.g., both the on-premise and the CSP domain
can contain the DS entity). It is important to notice that two or
more domains can contain an entity at the same time. These hybrid
architectures may be useful for entities hosting data (i.e., proxy, MS,
DS). For instance, important encrypted files (e.g., with a sensitive
name) can be hosted in a DS on-premise, while other files can stay
in a DS in the cloud (e.g., [32]). The proxy can be installed in the
computer of each user so to split the set of secret keys and also in
an on-premise server to allow temporary users or light devices (e.g.,
smartphones) to access the architecture (e.g., [39]). The MS can be
split so to host sensitive metadata (e.g., the list of users’ names)
on-premise and non-sensitive metadata (e.g., public cryptographic
keys) in the CSP domain (e.g., [41]). In these hybrid architectures,
Table 2: Considered CAC Scheme Architectures
CAC
Scheme clientu on-premise
Architecture
CSP
[10]
[40]
[41]
[39]
[28]
[32]
arc
⟨proxyu, clientu⟩, ⟨MS, CSP⟩, ⟨RM, CSP⟩, ⟨DS, CSP⟩
⟨proxyu, clientu⟩, ⟨MS, CSP⟩, ⟨DS, CSP⟩
⟨proxyu, clientu⟩, ⟨MS, on-premise⟩, ⟨MS, CSP⟩, ⟨DS, CSP⟩
⟨proxyu, clientu⟩, ⟨proxy, on-premise⟩,
⟨MS, on-premise⟩, ⟨RM, on-premise⟩, ⟨MS, CSP⟩, ⟨DS, CSP⟩
⟨proxy, on-premise⟩, ⟨DS, on-premise⟩, ⟨DS, CSP⟩
⟨proxyu, clientu⟩, ⟨MS, on-premise⟩,
⟨RM, on-premise⟩, ⟨DS, on-premise⟩, ⟨MS, CSP⟩, ⟨DS, CSP⟩
to avoid synchronization and update issues, we assume that each
resource is hosted by one entity only. Of course, it is possible to
have offline backups of the resources. Finally, we do not consider a
hybrid architecture for the RM since it does not host any resource.
Architectural Model. By considering all possible entity-domain
pairs that satisfies the constraints imposed by the CanContain rela-
tion, we identify 81 possible architectures for CAC schemes (see
appendix A for the complete list). Each entity must be deployed
in at least one of the domains that can contain it but the RM, that
can be absent from the architecture as this happens in the architec-
tures of some CAC schemes [3, 8, 12, 13, 24, 40]. In this case, after
a write request, the old file is not replaced but a new version is
added that is validated by the next user attempting to read the file.
If the new version is not valid (i.e., the writer user did not have
write permission), the reader fetches the old versions of the file
until finding a valid version. Formally, we define the set ARC of
all possible architectures 𝑎𝑟𝑐 as follows:
ARC = {arc ⊆ (Entities × Domains) | ( ∀⟨𝑑𝑜𝑚, 𝑒𝑛𝑡⟩ ∈ arc : 𝐶𝑎𝑛𝐶𝑜𝑛𝑡𝑎𝑖𝑛(𝑑𝑜𝑚,
𝑒𝑛𝑦) ) ∧ ( ∀𝑒𝑛𝑡 ∈ Entities \ {𝑅𝑀} ∃𝑑𝑜𝑚 ∈ Domains : ⟨𝑑𝑜𝑚, 𝑒𝑛𝑡⟩ ∈ arc )};
(3)
4.5 Instances of our Architectural Model
Table 2 shows the architectures of some CAC schemes in the lit-
erature and how they are specified in our architectural model as
elements of ARC. We depict a hybrid architecture by duplicating
the icon of the entity under multiple domains. We discuss how
our model allows us to capture the most important aspects of the
various CAC schemes in the following.
Garrison et al. [10] designed a CAC scheme for a dynamic RBAC
policy with a focus on computational efficiency (e.g., hybrid encryp-
tion). The architecture comprehends the same three domains that
we presented. A proxy for each user contains the user’s secret keys.
The (non-sensitive) metadata related to the AC policy are in the
MS and the encrypted files in the DS entity. Both of these entities,
together with the RM checking digital signatures on encrypted data,
stay in the CSP domain.
In [40], the authors discussed the same three domains that we
presented. The architecture of the CAC scheme expects a proxy
for each user containing the user’s secret keys (what the authors
call “Key-store” module). Non-sensitive metadata (i.e., hierarchies
and cryptographic public parameters) are kept in the MS (“Meta-
data Directory” module) in the CSP domain. The DS (“Data Store”
module) stores encrypted data in the CSP domain. As in [8], the
authors proposed a CAC scheme without the RM, relying therefore
on the users to validate write operations.
In [41], the authors employ Role-Based Encryption (RBE) to
enforce RBAC policies in the CSP. In their architecture, the DS
stores encrypted data in the CSP domain. Non-sensitive metadata
(i.e., public parameters of RBE) are in the MS in the CSP domain,
while sensitive metadata (i.e., role hierarchy and user memberships)
stay in an MS within the organization. The architecture of the CAC
scheme expects a proxy for each user. This CAC scheme does not
support the write operation, thus the architecture does not expect
the RM entity.
In [39], the authors proposed a CAC scheme along with a proof
of concept prototype named “FADE”. Users interact with a proxy
(“FADE client”) that can be deployed locally in each user’s com-
puter or as in a server within the organization. The architecture
comprehends a quorum of key managers deployed as a centralized
trusted entity within the organization. These key managers store
sensitive metadata (e.g., cryptographic parameters) through thresh-
old secret sharing [37]. The key managers perform blind decryption
on cryptographic keys [27] and interact with the users to execute
cryptographic operations during file uploads and downloads. Thus,
the key managers act both as MS and RM. Encrypted files are stored
by the DS in the CSP domain. Each file is associated with an AC
policy (i.e., non-sensitive metadata) that is stored in the CSP.
Premarathne et al. [28] studied how to securely store medical
big data in the cloud. They designed a role-based CAC scheme
making use also of steganography. The architecture comprehends
the “User” (i.e., clientu), “Health Authority” (i.e., on-premise), and
“Cloud Storage” (i.e., CSP) domains. Users authenticate to a trusted
health authority server. This server is responsible for extracting
users’ data (i.e., proxy) from files stored by the DS in the CSP domain.
Metadata related to steganography (e.g., indexes and lengths) are
stored in the health authority server (i.e., metadata storage). In this
CAC scheme, the RM entity is missing. Indeed, since the proxy runs
in the trusted on-premise domain, no one can tamper with it and
proxy’s actions are assumed to be legitimate.
In [32], the authors propose a CAC scheme based on a hybrid
architecture. A private DS (i.e., on-premise domain) stores confi-
dential patients’ data (e.g., chronic diseases, mental health issues)
and it can be accessed by authorized personnel only. A public DS
(i.e., CSP domain) handles patient’s data that are shared with other
parties like medical researchers and government authorities. Access
to the DSs is regulated by an RBAC policy. Therefore, each cloud
has part of the metadata needed by the CAC scheme. Each user
(e.g., doctors and nurses) is given secret keys.
5 ARCHITECTURE EVALUATION AND
OPTIMIZATION
Once defined the set ARC of the possible architectures for CAC
schemes, we formalize the problem (introduced in Section 3.3) of se-
lecting the architecture that maximizes the achievement of multiple
goals of a scenario as a MOOP [22]. Below, we first identify security
and usability goals that may be desirable in different scenarios (as
described in Section 3.1 and Section 3.2). The set of goals is not
meant to be exhaustive or representative, it is only given as an ex-
ample to illustrate the optimization problem; other goals may easily
be added. Then, we discuss the effect on the security and usability
goals of different architectural choices. Finally, we show how to
reduce the problem of selecting the architecture that maximizes
the achievement of the desired goals into an optimization problem
that considers the simultaneous maximization of a collection of
objective functions that measure how much goals are achieved.
5.1 Identifying Goals