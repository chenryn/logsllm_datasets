    /%2e%2e
    /%2e%2e/
### 漏洞修复
在[Commit](https://github.com/apache/shiro/commit/6acaaee9bb3a27927b599c37fabaeb7dd6109403)中发现`org.apache.shiro.spring.web`下新增了`ShiroUrlPathHelper`类，属于`UrlPathHelper`的子类，重写了`getPathWithinApplication`和`getPathWithinServletMapping`两个方法  
通过相关配置后，`Spring`就会使用`Shiro的UrlPathHelper`，这样两者判断逻辑一致，就不存在因差异性问题而导致的绕过了。
其实我认为`1.7.1`才算真正的更新，因为它是依次对原`uri`和去除`uri`尾部斜线的`uri`进行验证，这样就可以避免因直接去除尾部`uri`导致`/hello`和`/hello/*`不匹配而导致的绕过问题。
### 补丁问题
#### 问题一
根据官方发布的公告，发现其实需要配置`shiro-spring-boot-web-starter`才有效
    if you are NOT using Shiro’s Spring Boot Starter
    (`shiro-spring-boot-web-starter`), you must configure add the
    ShiroRequestMappingConfig auto configuration[1] to your application or
    configure the equivalent manually[2].
    [1] https://shiro.apache.org/spring-framework.html#SpringFramework-WebConfig
    [2]https://github.com/apache/shiro/blob/shiro-root-1.7.0/support/spring/src/main/java/org/apache/shiro/spring/web/config/ShiroRequestMappingConfig.java#L28-L30
由于我导入的`dependency`如下
        org.apache.shiro
        shiro-web
        1.6.0
        org.apache.shiro
        shiro-spring
        1.6.0
如果直接将版本升为`1.7.0`的话，其实并没有触发更新，原`payload`还是可以绕过。  
只有按照上面官网所述的两种配置方式修改后，才能防御成功
#### 问题二
在旧版的SpringBoot 中，当我们需要获取当前请求地址的时候，直接通过如下方式获取：
    //org.springframework.web.servlet.handler#getHandlerInternal
    String lookupPath = this.getUrlPathHelper().getLookupPathForRequest(request);
但是在新版Spring里边，通过如下方式获取
    String lookupPath = this.initLookupPath(request);
initLookupPath()代码如下：
    protected String initLookupPath(HttpServletRequest request) {
        if (this.usesPathPatterns()) {
            request.removeAttribute(UrlPathHelper.PATH_ATTRIBUTE);
            RequestPath requestPath = ServletRequestPathUtils.getParsedRequestPath(request);
            String lookupPath = requestPath.pathWithinApplication().value();
            return UrlPathHelper.defaultInstance.removeSemicolonContent(lookupPath);
        } else {
            return this.getUrlPathHelper().resolveAndCacheLookupPath(request);
        }
    }
如果`this.usesPathPatterns() == true`的话，就可以绕开问题一中我们配置的`ShiroUrlPathHelper`  
此时也成功绕过。  
所以这就存在一个矛盾：只有`Spring Boot` 版本在大于
`2.3.0.RELEASE`才能触发这个漏洞，修复之后由于版本问题，`SpringBoot`又不走那条语句。  
另外在配置的时候，当`Spring Boot` 版本在小于等于
`2.3.0.RELEASE`，如`2.1.5.RELEASE`，时，`this.getUrlPathHelper()`并不是`ShiroUrlPathHelper`，不清楚是不是配置问题还是版本兼容问题。  
## CVE-2020-17523
### 漏洞信息
漏洞编号：[CVE-2020-17523](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-17523) /
[CNVD-2021-09492](https://www.cnvd.org.cn/flaw/show/CNVD-2021-09492)  
影响版本：`shiro  `pathMatcher.matches(pattern,
path)` -> `match(pattern, source)` -> `doMatch(pattern, path, true)`
来到了主要的判断方法`doMatch()`。  
其中`StringUtils.tokenizeToStringArray()`方法是将它的参数，也就是传进来的两个路径拆解成字符串数组，然后进行比较。  
进入方法，可以看到当对空格进行转换时，直接`trim`为空  
这样就导致与`shiro`中的配置本意想违背，导致绕过。  
然后在`Spring`中的处理时，`uri`又包含空格，这样就能访问到`/hello/%20`页面  
### 漏洞修复
在[Commit](https://github.com/apache/shiro/commit/ab1ea4a2006f6bd6a2b5f72740b7135662f8f160#diff-ce9ba3462f7d76e68c79bec5b9a3aea9bbd0d22ffb5e738f1b621cae49037b92)中，主要修复点`AntPathMatcher.java`，在`tokenizeToStringArray`方法中加了`false`和`true`两个参数  
可以看到，当第三个参数为`false`时，即`trimTokens`为`false`，此时就不会对`token`进行`trim`。  
## CVE-2021-41303
### 漏洞信息
漏洞编号：[CVE-2021-41303](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41303) /
[SHIRO-825](https://issues.apache.org/jira/browse/SHIRO-825)  
影响版本：`shiro < 1.8.0`  
漏洞描述：`1.8.0` 之前的 `Apache Shiro`，在 `Spring Boot` 中使用 `Apache Shiro` 时，特制的
`HTTP` 请求可能会导致身份验证绕过。用户应该更新到 `Apache Shiro 1.8.0`。  
漏洞补丁：[Commit](https://github.com/apache/shiro/commit/4a20bf0e995909d8fda58f9c0485ea9eb2d43f0e)  
参考：[threedr3am师傅](https://threedr3am.github.io/2021/09/22/%E4%BB%8E%E6%BA%90%E7%A0%81diff%E5%88%86%E6%9E%90Apache-Shiro%201.7.1%E7%89%88%E6%9C%AC%E7%9A%84auth%20bypass%EF%BC%88CVE-2021-41303%EF%BC%89/)
## 漏洞分析
根据[threedr3am师傅](https://threedr3am.github.io/2021/09/22/%E4%BB%8E%E6%BA%90%E7%A0%81diff%E5%88%86%E6%9E%90Apache-Shiro%201.7.1%E7%89%88%E6%9C%AC%E7%9A%84auth%20bypass%EF%BC%88CVE-2021-41303%EF%BC%89/)博客提供的方向，看了一下Shiro
1.7.1前后`PathMatchingFilterChainResolver#getChain`的对比  
发现在`1.7.1`版本中，先是对pathPattern和requestURI进行比较，比较成功，返回：
    filterChainManager.proxy(originalChain, pathPattern);
否则对删除尾部斜线的pathPattern和requestURI进行比较，比较成功，跳出循环，返回：
    filterChainManager.proxy(originalChain, requestURINoTrailingSlash);
但是正常访问，都会返回第一个`proxy`，什么时候才能绕过第一个比较并符合第二个比较呢？  
可以看到，两者差别是对`uri`尾部斜线的处理，所以当在`uri`尾部加一个`/`，就会进入第二种比较方式。  
结合之前的多次调试再根据`threedr3am师傅`博客中的认证，可以知道`shiro`的认证鉴权会根据配置的先后顺序去依次实施  
所以当我有如下配置时：
    map.put("/admin/*", "authc");
    map.put("/admin/page", "anon");
循环中先匹配到`/admin/*`（这里是通过`while`语句对去除尾部斜线的`uri`进行匹配）,然后跳出循环，进入到`filterChainManager.proxy(originalChain,
requestURINoTrailingSlash);`，注意，这里真正的参数就是去除尾部斜线的`uri`，也就是`/admin/page`，所以在`DefaultFilterChainManager#getChain`中得到的权限是`anon`，这样就达到绕过目的。  
## 漏洞修复
直接将`filterChainManager.proxy`的第二个参数改为`pathPattern`，直接传配置中的`uri`了  
## CVE-2022-32532
### 漏洞信息
漏洞编号：[CVE-2022-32532](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-32532)  
影响版本：`shiro < 1.9.1`  
漏洞描述：在`1.9.1`之前的`Apache
Shiro`中，`RegexRequestMatcher`可能会被错误配置，从而在某些`servlet`容器上被绕过。应用程序使用`RegExPatternMatcher`与`.`的正则表达式可能容易被授权绕过。  
漏洞补丁：[Commit](https://github.com/apache/shiro/commit/6bcb92e06fa588b9c7790dd01bc02135d58d3f5b)  
参考：[4ra1n师傅](https://xz.aliyun.com/t/11501)
### 漏洞分析
这是最新的一个洞，看`Shiro`发布的[公告](https://lists.apache.org/thread/y8260dw8vbm99oq7zv6y3mzn5ovk90xh)显示，是由于`RegexRequestMatcher`的错误配置导致的问题。  
简单了解了一下，`RegexRequestMatcher`和`AntPathMatcher`类似，都是`Shiro`用于路径匹配的配置，只是`RegexRequestMatcher`需要用户自己配置。  
根据[4ra1n师傅](https://xz.aliyun.com/t/11501)的分析，可以知道，正常正则表达式`.`并不包含`\r`和`\n`字符  
修改成如下代码就可修复问题
    // flag为Pattern.DOTALL时，表达式 .可以匹配任何字符，包括行结束符。
    Pattern pattern = Pattern.compile(regex,Pattern.DOTALL);
那么回头看一下`RegexRequestMatcher`用于匹配的代码
    public boolean matches(String pattern, String source) {
        if (pattern == null) {
            throw new IllegalArgumentException("pattern argument cannot be null.");
        } else {
            Pattern p = Pattern.compile(pattern);
            Matcher m = p.matcher(source);
            return m.matches();
        }
    }
可以发现，当`pattern`存在带`.`的正则表达式并且`source`中存在`\r`或`\n`字时，此时判断错误。  
此时我们在配置完`RegexRequestMatcher`之后增加如下`Controller`
    @RequestMapping(path = "/alter/{value}")
    public String alter(@PathVariable String value) {
        System.out.println("绕过成功");
        return "绕过成功"+value;
    }
增加如下配置
    //myFilter.java中设置成需要权限
    manager.addToChain("/alter/.*", "myFilter");
这样正常访问`/alter/aaa`是被拒绝的，但是当访问`/alter/a%0aaa`或`/alter/a%0daa`时就会绕成验证，访问成功  
这个洞限制还是比较多的，既要服务器配置了`RegExPatternMatcher`，又要设置带有`.`的正则表达式
### 漏洞修复
在[Commit](https://github.com/apache/shiro/commit/6bcb92e06fa588b9c7790dd01bc02135d58d3f5b)可以看到，对`compile`方法设置了`flag`