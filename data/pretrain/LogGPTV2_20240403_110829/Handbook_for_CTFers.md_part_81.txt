catch (Exception e) (
e -printStackTrace (1 ;
("cinfo”, cinfol ;
( (HttpServletRequest) request) . getSession () setAttribute
else {
Base64 .Encoder encoder = Base64 .getEncoder [1 :
try 
[ (HttpServletRequest) request) getRequestedSessionId (11 : 
ClientInfo cinfo = nev ClientInfo ("Anonymous", *normal", \\ DID)
byte [] bytes = Tools.create [cinfo) ;
cookie = new Cookie(*cinfo* , encoder,encodeToString (bytes) 1 :
cookie .setMaxAge (60*60*24) ;
( (HttpServletResponse) reeponse) . addCookie [cookie) :
( (HttpServletRequest) request) getSession (1 setAttribute
("cinfo", cinfo) ;
catch (Exception e) {
e . printStackTrace () ;
chain. doFilter (request, response) ;
The above code roughly means to poll the cookie and find out which cookie has
the key value cinfo, otherwise it initializes.
ClientInfo ("Anonymousa, "nozmal", ( (HttpServletRequest) request) 
getRequestedSessionId()) ;
restored by a decoding operation.
Returms a cookie named cinfo after encoding, otherwise the Clientlnfo object is
(3) Tools object for serialization and deserialization.
public class Tools (
static public Object parse (byte [] bytes) throws Exception 
ObjectInputStream ois = new ObjectInputStream (new
: ( (saq) weaxa9ndtAexxyag
return ois.readobject () ;
static public byte [] create (0bject obj) throws Exception {
ByteArrayOutputStream bos = new ByteArrayOutputStream () :
---
## Page 714
702
10 Code Auditing
ObjectOutputStream output.Stream = nev ObjectOutputStream (bos) ;
return bos , toByteArray () :
output.Stream writeObject (obj) :
Now there is an upload point, but the user identity is checked against ClientInfo
with the following code.
(uxog ordpeoTdn/-)6uddewsonbogs
public String upload (MultipartFile file, HttpServletRequest request,
HttpServletResponse response) throws Exception [
ClientInfo cinfo = (ClientInfo) request .getSession () getAttribute
if (Icinfo.getGroup () -equals (*webmanager))
("cinfo") ;
return "notaccess";
if (file == nul1)
// original tile name
return "uploadpic";
file) - getFi1eItem ( getName () ;
String originalFilename = ( (DiskFileItem) ( (CommonsMultipartFi1e)
String realPath = request getSession() -getServletContext () .
getRea1Path (*/Web- INF/resource/") ;
String path = realPath + originalFilename ;
file. transfezTo (new File (path) ) :
request . getSession () setAttribute ("newpicfile", path) ;
return *uploadpic*;
If the user has webmanager privileges, he/she will be able to perform file
uploading operations , so we need to construct the ClientInfo property.
The process of forging Clientinfo is simle: create a new projct, copy the Tools
and Clientinfo code into Tools.java and Clientinfo.java files, and then write and run
the Main.java main function to get the cookies with webmanager privileges.
System, out println (*vebmanager : * + encoder encodeToString (Too1s,
create (new
encoder.encodeToString (Tools .create (new ClientInfo ("test",
vebmanager*, "1")))) ;
Finally, browse the Upload.form page with forged cookie to upload a file to get
server permissions.
We can learn from this example of the deserialization vulnerability to exploit the
way and process. But for the actual operations, you need to construct your own EXP
compatible with the program structure. Third party libraries affectted by
deserialization vulnerabilities are the same, the only difference is between the
process of triggering the vulnerability.
---
## Page 715
10.2 Java Code Audliting
703
whitelist
-org.ajax4jsf.resource.InternetResource,
8
org.ajax4jsf.resource.SerializableResource,
javax.faces.el.MethodBinding,
javax.el.Expression,
10
9
javax.faces.component.StateHolderSaver,
11
java.avt.color
Fig, 10.49 The whitelist of deserialized classes in RichFaces 3.4
2. Serializable Vulnerability Exploit Form Example: CVE-2018-14667
The vulnerability number is issued to the RichFaces framework. JBOSS RichFaces
and Apache myfaces are two well-known JSF implementation projects. The vulner-
ability is caused by accepting untrustworthy serialized data from a client and
deserializing it, and although a whitelist-based filter is applied among the malicious
data, it is eventually bypassed and RCE'd due to a design flaw.
Some security researchers have done an analysis of their historical vulnerabilities
and concluded that with the addition of whitelisting, it was not possible to construct
an exploit chain through the first form of exploitation, so they concluded that there
was no longer an exploit chain, but in 2018 there is a whitelisted exploit chain again.
The whitelist of deserialized classes in RichFaces 3.4 is shown in Fig. 10.49, and
it is known that none of the Gadgets in the dependency package works, and the
deserialized class must be the class or a subclass of the class in the diagram. Note that
the javax.el.Expresion class is one of the main interfaces to EL expressions, and EL
expressions can execute arbitrary code. Now the idea is that if the deserialized class
is a subclass of Expression and the expression is called in the subsequent program
execution flow, it can trigger an RCE vulnerability. This CVE uses a subclass of
Expression and finds the function calls MathodExpressioninvoke
ValueExpression#getValue to bypass the whitelist restriction and cause RCE.
pue
The
deserialization
data is checked
in
org.ajax4jsf.resource.
LookAheadObjectInputStreamaresolveClass with the following code.
/ **
• Cnly deserialize pzimitive or whitelisted classes
** /
protected Class resolveClass (objectStreamClass desc) throws
gOverr1de
IOException, ClassNotFoundException (
Class primitiveType = PR.IMITIVE_TYPES get (desc getName [1 1 :
if (primitiveType != null) {
return primitiveType :
if (1isClassValid (desc-getName ())) (
throv new InvalidClassException ("Unauthorized deserialization
attempt*, desc.getName ()) ;
return super. resolveClass (desc) :
---
## Page 716
704
10 Code Auditing
The above code first calls desc.getName to get the name of the class to be
deserialized, and then uses the isClassValid function to perform a white list check,
code as follows.
boolean isClassValid (String requestedClassName) {
if (vhitelistClassNameCache,containsKey (requestedClassName) 1 
return true;
} 人x1
Class requestedClass = Class. forNane (requestedClassName) :
for (Class baseClass : vhitelistBaseClasses ){
if (baseClass isAssignableFrom (requestedClass) ) {
vhitelistClassNameCache put (requestedClassNane, Boolean.
TRUE) ;
return true;
catch (ClassNotFoundException e) (
return false;
return false;
whitelistClassNameCache contains some base class, such as String, Boolean,
Byte, etc. If a class is not one of the base classes, and it is not one of whitelisted
classes or its subclass, then the function returns false, and an exception is thrown to
stop the deserialization.
The CVE-2018-14667 vulnerability ultimately finds function calls to the javax.el.
Expression
subclass in
org.ajax4jsf.resource.UserResource, defined
UserResource#send and UserResource#, respectively. in the getLastModified
in
function.
public void send (ResourceContext context) throvs IoException {
UriData data = (UriData) restoreData (context) ;
if (nu11 1 = data ss nul1 1 = facesContext 1 {
// Send headers
ELContext elContext = facesContext . getELContext () ;
// Send content
OutputStrean out = context . getOutputStream() ;
MethodExpression send = (MethodExpression) UIComponentBase.
restoreAttachedState (facesContext, data.
send. invoke [e1Context, new Object [] (out, data. value)) ;
createContent) ;
)x
// https : //jira jboss org/jira/browse/F-8064
out .flush () ;
out .close () ;
---
## Page 717
10.2 Java Code Auditing
SOL
catch (IOExceptlon e) 
// Ignore it, stream would be already closed by user bean.
As the above code calls MethodExpressionfinvoke, where data is the result of
user-controlled deserialization and represents an EL expression statement that is
passed in at the time the invoke function is called, thereby an RCE vulnerability is
triggered.
public Date getLastModified (ResourceContext resourceContext) {
sOverr1de
UriData data = (UriData) restoreData (sourceContext) ;
FacesContext facesContext = FacesContext . getCurrent Instance (1 ;
if (null ! = data && null ! = facesContext) {
ELContext elContext = facesContext . getELContext () :
/ / Send
if (data.nodified ! = null) {
ValueExpression binding - (ValueExpression) UIConponentBase . 
Date nodified = (Date) binding getValue (e1Context) ;
restoreAttachedState (facesContext, data.modified) ;
if (nu11 ! = modified) (
return modified;
return super getLastModified (resourceContext) :
The above code calls ValueExpression#getValue, which also triggers the execu-
tion of EL expressions.
More detailed analysis and EXP scripts can be found at https://xz.aliyun.com/t/
3264 for those interested. EL will be described and analyzed in detail later.
10.2.7ExpressionInjection
10.2.7.1Expression Injection Overview
For the Java Web, there are two common types of vulnerabilities that can cause
command execution: deserialization and Expression Language Injection, which are
essentially remote command execution or remote code execution vulnerabilities.
However, these RCE vulnerabilities all share a common feature  they are the result 
of poor filtering or abuse of features that allows an attacker to construct a
corresponding expression to trigger a command or code execution vulnerability.
---
## Page 718
90L
10  Code Auditing
The most famous one among these vulnerabilities is the OGNL vulnerabilities in
Struts2.
Jo asesn sadodu no rood Kq pasneo ane soqeaaun togafu uonssndxg
application filtering of external inputs, which allows an attacker to control the
parameters used the EL's (Expresion Language) interpreter, which ultimately
results in expression injection.
EL's function is to allow developers to obtain objects and call Java methods in the
context, so if an expression injection vulnerability exists, an attacker can exploit the
features of the expression language itself to execute arbitrary code, resulting in
command execution. In the case of the Java Web framework, the framework is
usually one expression for one framework, which means that an expression injection
vulnerability in the framework will “kilr" all Web applications based on that
framework. That’s why Struts2 has been a “bloody hell" every time an OGNL
RCE vulnerability has been discovered.
In addition to expressions *bound to frameworks (e.g., Struts2 vs. OGNL), there
are many other cases of expression injection, such as Groovy code injection, SSTI
(server-side template injection), etc., where the vulnerability is due to an attacker
having control over the data entering the expression parser.
10.2.7.2  Expression Injection Vulnerability Characteristies
There are a variety of expression languages in Java that perform different functions
in their respective domains, and here are two that are closely related to popular java
web framework. At the same time, these two expression languages cause the greatest
harm when expression injection occurs.
Struts2-OGNL: The *King of Vulnerabilities", due to Stuts2’s horific coverage,
1 qeu uou osdxo mu e s a   ed nqe se
also the most thoroughly understood expression language by both atackers and
Spring-SPEL: SPEL, or Spring EL, is an EL expression proprietary to the Spring
Framework. Compared to other expression languages, its use is relatively narrow,
but it is still worth studying in view of the wide use of the Spring Framework.
In both OGNL and SPEL, the key to triggering a vulnerability is the parsing part
of the expression.
For example, the following is an example of using OGNL's code to execute a
system command.
import ogn1 . 0gn1 ;
import ogn1 Ogn1Context ;
import ogn1 0gn1&xception;
public class Test (
public static void main (String [] azgs) throws OgnlException 
Ogn1Context context = new Ogn1Context (1 ;
/ /  [class fu11 name (1ncluding package path) 9[method value name] ]
---
## Page 719
10.2 Java Code Auditing
707
// Execute command
Object obj = Ognl , getValue (*ajava.lang-Runt imesgetRuntime () . \
exec (open /Applications/Calculator app′1 *, context) ;
System out printin (obj) ;
上
Running the sample code will launch the calculator application (since we are
using MacOS, the system commands are executed differently than on Windows).
The three elements of expression parsing are: the expression, the context (context in
the example above), and getValue( ) to make the execution to begin. These are also
the three main factors that are essential for an expression injection vulnerability.
Controllable expression, way to bypass the filtering mechanism in the context and a
statement to execute the expression itself, all three of these strung together to become
an Expression Injection Gadget.
10.2.7.3 Overview of Expression Structures
s uo sasnoo adood Jop Kenb ueμodu Aian t s! Sqm pue moq puesapu
domain of information security. The following is a brief explanation of the compo-
sition of the expression parsing structure using OGNL as an example, which is very
helpful for understanding expression injection vulnerabilities.
1. root and context
The two most important parts in OGNL are the root object and the contexL.
root: It can be considered that root is a Java object. All the operations specified by the
expression are performed to the root object.
context: The context where the object is running. context is a MAP structure that
uses key-value pairs to describe the properties and values of the object.
The top-level object that handles OGNL is a Map object, often called a context map
or a context, which contains the root object. The atributes of the root object can be
referenced directly in the expression, and if you need to refer to another object, then
3e1 #, aq asn o1 poau nof
Struts2 turns the OGNL context into an ActionContext and turn both root and
other object (including application, session, request context) into a ValueStack. See
Fig. 10.50.
2. ActionContext
ActionContext is the context of the action, which is essentially a Map object that can
be considered as a small database that belongs to the action, in which the data used in
the entire lifecycle of action (thread) is stored. ActionContext in ognl acts as context,
see Fig. 10.51
---
## Page 720
708
10  Code Audiing
applieat.ion
session
value stack(root)
attr (searches
page, request, sersion, ther
applicatie
Fig, 10.50 Quoted from the offcial Apache OGNL documentation
Fig, 10.51ActionContext
ActionContext(map)
in ognl acts as context
key
value
request
dew
session
map
application
map
attr
map
paramters
map
VALUE_STA
CK
valueStack
---
## Page 721
10.2 Java Code Auditing
60L
Fig, 10.52 The value stack
acts as the root of OGNL.
itself is an ArrayList that
CompoundRoot
Context
Ref to
ActionContext
The three common scopes in an ActionContext are request, session, and
application.
▪The aftr scope holds all the attributes of the three scopes above, and if there is
duplication, the attributes in the request field are used.
The paramters scope holds the parameters submited by the HTTP form.
VALUE_STACK is often referred to as the ValueStack, whose values can be
accessed through the ActionContext.
3. value stacks
The value stack itself is an ArrayList that acts as the root of OGNL, see Fig. 10.52
The root, called CompoundRoot in the source code, is also a stack. Every
Spdsano e Sene si ysnd pue dod oq oes onea o uo uoao
operation on the CompoundRoot. When an action is accessed, the action is added
to the top of the stack, and the submitted form parameters are assigned values by
looking up the corresponding properties from top to bottom of the value stack. The
context here is a reference to the ActionContext, which makes it easier to find the
action’s properties in the value stack.
4. The relationship between ActionContext and the value stack.
In fact, ActionContext and the value stack is a “mutually inclusive” relationship,
precisely, the value stack is part of the ActionContext, and ActionContext describes
more than just a replacement for OGNLcontext, after all, it is more for building a
separate runtime environment (a new thread) for the action, so that properties in the
ActionContext can be accessed through the value stack, and vice versa.
---
## Page 722
710
10  Code Auditing
In fact, a non-standard expression can be used to describe such a relationship: the
value stack can be treated as the index of the ActionContext, either by finding the
data in the table directly through the index, or by finding the index of all the data in
the table, like the relationship between a book and a table of contents.
5. Summary
After understanding the expression structure, let's review the expression injection
vulnerability. You can find that the key to the expression injection vulnerability is
the use of expressions to manipulate the content of the context. We need to pay
particular attention to the relationship between the ActionContext and the value
stack, where the expression could manipulate the context of the thread, which could
result in a serious RCE.
10.2.7.4  Summary Analysis of S2-045
S2-045 is a very classic expression injection vulnerability. We will show you a
complete expression injection process with this vulnerability. The overall trigger
flow is as follows.
MultiPartRequestMrapperSMultiPartRequestWrapper :86
# Handles
requests requests
JakartaMultiPartRequestSparse : 67
# Process upload requests
and catch upload exceptions