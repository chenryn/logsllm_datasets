# 漏洞描述
内核模块`win32kfull.sys`的`win32kfull!xxxClientAllocWindowClassExtraBytes`函数中存在Type
Confusion漏洞，利用此漏洞进行越界读写，最终可实现本地提权
官方通报影响的windows版本:
Windows 10 Version 1803/1809/1909/2004/20h2
Windows Server, version 1909/20H2(Server Core installation)
Windows 10 Version for 32-bit Systems
Windows Server 2019
# 漏洞分析
分析Windows版本：win10 20h2 19042.508
Type Confusion漏洞存在于`win32kfull!xxxCreateWindowEx`函数中，函数中漏洞点的伪代码如下：
漏洞是怎么出现的呢？这得从窗口创建说起
创建一个自定义的窗口前需要注册自定义的窗口类，窗口类的结构体如下：
    typedef struct tagWNDCLASSA {
      UINT      style;
      WNDPROC   lpfnWndProc;
      int       cbClsExtra;
      int       cbWndExtra;
      HINSTANCE hInstance;
      HICON     hIcon;
      HCURSOR   hCursor;
      HBRUSH    hbrBackground;
      LPCSTR    lpszMenuName;
      LPCSTR    lpszClassName;
    } WNDCLASSA, *PWNDCLASSA, *NPWNDCLASSA, *LPWNDCLASSA;
填写好窗口类的结构体的成员，紧接着就可以调用`CreateWindow(EXA/W)`创建窗口，R0到R3的执行总体流程如下：
    00 fffffe82`32d3f848 fffff467`52aa51a9     win32kfull!xxxCreateWindowEx
    01 fffffe82`32d3f850 fffff467`5285519e     win32kfull!NtUserCreateWindowEx+0x679
    02 fffffe82`32d3f9f0 fffff802`36e058b5     win32k!NtUserCreateWindowEx+0xc2
    03 fffffe82`32d3fa90 00007ffe`d86e1ec4     nt!KiSystemServiceCopyEnd+0x25
    04 00000062`2ad9f7d8 00007ffe`d8ca7d8b     win32u!NtUserCreateWindowEx+0x14
    05 00000062`2ad9f7e0 00007ffe`d8ca7958     USER32!VerNtUserCreateWindowEx+0x20f
    06 00000062`2ad9fb70 00007ffe`d8ca3c92     USER32!CreateWindowInternal+0x1a4
    07 00000062`2ad9fcd0 00007ff7`9418144d     USER32!CreateWindowExA+0x82
可以看到创建窗口的时候最终会进入漏洞存在的函数`win32kfull!xxxCreateWindowEx`，那么怎样才能在win32kfull!xxxCreateWindowEx内调用`win32kfull!xxxClientAllocWindowClassExtraBytes`(即到达上图中line:
974)呢？
当`tagWNDCLASSA`类设置`cbWndExtra`成员(为窗口实例分配的额外的字节大小)不为0时，就会调用到win32kfull!xxxClientAllocWindowClassExtraBytes函数，问题就出在这个函数中
`v50`是一个tagWND结构体指针，tagWND在win10的版本中相比win7的版本发生了一些变化，tagWND结构体的关键成员如下(图片来源于红雨滴团队)，`(_QWORD
*)(*((_QWORD *)v50 + 5) +
0x128i64)`即为下图的`pExtraBytes`，在当前正常的执行流程中，赋值为win32kfull!xxxClientAllocWindowClassExtraBytes申请到的堆地址，怎么知道是堆地址呢？且看下文
对函数win32kfull!xxxClientAllocWindowClassExtraBytes进行反编译，得到以下结果：
    volatile void *__fastcall xxxClientAllocWindowClassExtraBytes(SIZE_T Length)
    {
      SIZE_T v1; // rdi
      int v2; // ebx
      __int64 *v3; // rcx
      volatile void *v4; // rbx
      __int64 CurrentProcessWow64Process; // rax
      unsigned __int64 v7; // [rsp+30h] [rbp-38h] BYREF
      volatile void *v8; // [rsp+38h] [rbp-30h]
      char v9; // [rsp+70h] [rbp+8h] BYREF
      char v10; // [rsp+78h] [rbp+10h] BYREF
      int v11; // [rsp+80h] [rbp+18h] BYREF
      int v12; // [rsp+88h] [rbp+20h] BYREF
      v1 = (unsigned int)Length;
      v7 = 0i64;
      v11 = 0;
      v8 = 0i64;
      v12 = Length;
      if ( gdwInAtomicOperation && (gdwExtraInstrumentations & 1) != 0 )
        KeBugCheckEx(0x160u, gdwInAtomicOperation, 0i64, 0i64, 0i64);
      ReleaseAndReacquirePerObjectLocks::ReleaseAndReacquirePerObjectLocks((ReleaseAndReacquirePerObjectLocks *)&v10);
      LeaveEnterCritProperDisposition::LeaveEnterCritProperDisposition((LeaveEnterCritProperDisposition *)&v9);
      EtwTraceBeginCallback(0x7Bi64);
      v2 = KeUserModeCallback(0x7Bi64, &v12, 4i64, &v7, &v11);
      EtwTraceEndCallback(0x7Bi64);
      LeaveEnterCritProperDisposition::~LeaveEnterCritProperDisposition((LeaveEnterCritProperDisposition *)&v9);
      ReleaseAndReacquirePerObjectLocks::~ReleaseAndReacquirePerObjectLocks((ReleaseAndReacquirePerObjectLocks *)&v10);
      if ( v2  MmUserProbeAddress )
        v3 = (__int64 *)MmUserProbeAddress;
      v8 = (volatile void *)*v3;
      v4 = v8;
      CurrentProcessWow64Process = PsGetCurrentProcessWow64Process();
      ProbeForRead(v4, v1, CurrentProcessWow64Process != 0 ? 1 : 4);
      return v4;
    }
函数中调用KeUserModeCallback返回到用户态执行回调函数，KeUserModeCallback函数原型如下：
    NTSTATUS KeUserModeCallback (
           IN ULONG ApiNumber,
           IN PVOID   InputBuffer,
           IN ULONG InputLength,
           OUT PVOID *OutputBuffer,
           IN PULONG OutputLength
           );
首先根据API号0x7b可确定回调函数为`user32!_xxxClientAllocWindowClassExtraBytes`
    0: kd> dt ntdll!_PEB @$peb Ke*
       +0x058 KernelCallbackTable : 0x00007fff`4e1e1070 Void
    0: kd> u poi(0x00007fff`4e1e1070 + 7b * 8)
    user32!_xxxClientAllocWindowClassExtraBytes:
    00007fff`4e177840 4883ec48        sub     rsp,48h
    00007fff`4e177844 8364242800      and     dword ptr [rsp+28h],0
    00007fff`4e177849 488364243000    and     qword ptr [rsp+30h],0
    00007fff`4e17784f 448b01          mov     r8d,dword ptr [rcx]
    00007fff`4e177852 ba08000000      mov     edx,8
    00007fff`4e177857 488b0dd2b70800  mov     rcx,qword ptr [user32!pUserHeap (00007fff`4e203030)]
    00007fff`4e17785e 48ff154bb20600  call    qword ptr [user32!_imp_RtlAllocateHeap (00007fff`4e1e2ab0)]
    00007fff`4e177865 0f1f440000      nop     dword ptr [rax+rax]
对`user32!_xxxClientAllocWindowClassExtraBytes`进行反汇编，得到以下结果：
    NTSTATUS __fastcall _xxxClientAllocWindowClassExtraBytes(unsigned int *a1)
    {
      PVOID Result; // [rsp+20h] [rbp-28h] BYREF
      int v3; // [rsp+28h] [rbp-20h]
      __int64 v4; // [rsp+30h] [rbp-18h]
      v3 = 0;
      v4 = 0i64;
      Result = RtlAllocateHeap(pUserHeap, 8u, *a1);
      return NtCallbackReturn(&Result, 0x18u, 0);
    }
函数内调用`RtlAllocateHeap`从pUserHeap所指的用户堆空间申请`*a1`(Length)字节的空间，并通过`NtCallbackReturn`携带堆地址返回到内核态，NtCallbackReturn函数原型如下：
因此我们可以获得这样的执行流程
    xxxClientAllocWindowClassExtraBytes > KeUserModeCallback > _xxxClientAllocWindowClassExtraBytes > NtCallbackReturn
以上都属于正常的执行流程，接下来讲一下漏洞的产生过程
`pExtraBytes(offset: 0x128)`与`ExtraFlag(offset: 0xe8)`标志相关：当`ExtraFlag & 0x800
== 0`时，pExtraBytes表示的是内存指针，即上述的堆地址；当`ExtraFlag & 0x800 != 0`时，pExtraBytes表示的是
**内存偏移**
因为执行完`win32kfull!xxxClientAllocWindowClassExtraBytes`函数，没有对tagWND的ExtraFlag
进行校验，所以恶意攻击者可以在回调函数内将tagWNDExtraFlag 进行ExtraFlag |
0x800，就会使pExtraBytes表示的是内存偏移，不再表示为内存地址，再恶意控制pExtraBytes的偏移，同样调用NtCallbackReturn将偏移值返回给内核，就可以发生越界读写，通过越界读写进而获取读写原语，最终导致本地权限提升
# 漏洞验证
漏洞验证关键的两点：
  * 抵达漏洞的路径
  * 触发漏洞的环境
抵达漏洞的路径：设置tagWNDCLASSA的cbWndExtra，调用CreateWindow创建窗口
触发漏洞的环境：回调函数内修改tagWND的ExtraFlag并且返回指定的偏移值
## POC编写
在编写POC前，还需要搞清楚一些问题：