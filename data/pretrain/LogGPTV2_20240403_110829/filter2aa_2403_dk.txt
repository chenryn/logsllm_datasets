理常数。 
细心的读者可能会问：既然 ARM 模式的单条指令不能把 32 位立即数赋值给寄存器，那么这个程序又
是怎样做到单条 MOV 指令赋值的呢？实际上，原始指令并非是 IDA 显示的那种单条 MOV 指令。仔细观
察您就会发现，那“条”指令占用了 8 个字节，而标准的 ARM 指令只有 4 个字节。原始的指令分两步进
行 32 位赋值：首先用 MOV 指令将低 16 位（本例是常量 0x8E39）复制到寄存器的低 16 位，再用 MOVT
指令把立即数的高 16 位复制到寄存器的高 16 位。IDA 能够识别出这种指令组合，为了便于读者理解，把
两条指令“排版”为一条“伪指令”。这 8 字节的 MOV 指令实际上是 2 条指令。 
SMMUL 是 Signed Most Significant Word Multiply 的简称。它是 2 个 32 位有符号数的乘法运算指令，
会把 64 位结果的高 32 位保存在寄存器 R0 中，舍弃结果中的低 32 位。 
MOV R1,R0,ASR#1 是算术右移 1 位的运算指令。 
而指令 ADD R0,R1,R0,LSR#31 的执行结果相当于将 R0 的值右移 31 位，并与 R1 的值相加，其结果保
存在 R0 中。也就是：R0=R1+R0>>31。 
在ARM模式的指令中没有单独的位移指令。不过，它可以在MOV、ADD、SUB以及RSB
①
41.2.2  Thumb-2 模式下的 Xcode 4.6.3 优化（LLVM） 
指令中，使用
“后缀”形式的参数调节符对第二个操作数进行位移运算。在使用位移调节符的时候，应当指定位移的确切
位数。 
ASR 是算术右移 Arithmetic Shift Right 的简称。算术右移需要考虑符号位。 
LSR 是逻辑右移 Logical Shift Right 的简称。逻辑右移不考虑符号位。 
MOV   
R1, 0x38E38E39 
SMMUL.W  
R0, R0, R1 
ASRS   
R1, R0, #1 
ADD.W   
R0, R1, R0,LSR#31 
BX  
LR 
Thumb 模式的指令集里有单独的位移运算指令。本例中的 ASRS 就是算术右移指令。 
41.2.3  非优化的 Xcode 4.6.3(LLVM) 以及 Keil 6/2013 
在没有启用优化选项的情况下，LLVM 编译器不会生成上面那种混合运算指令，它会调用仿真库里的
模拟运算函数__divsi3。 
然而，无论是否启用优化选项，Keil 编译器都只会调用库函数__aeabi_idivmod。 
41.3  MIPS 
出于某些原因，优化的 GCC 4.4.5 有除法指令。 
指令清单 41.4  优化的 GCC 4.4.5（IDA） 
f: 
li     $v0, 9 
bnez    $v0, loc_10 
div     $a0, $v0 ; branch delay slot 
break    0x1C00    ; "break 7" in assembly output and objdump 
loc_10: 
mflo    $v0 
jr 
   $ra 
or 
   $at, $zero ; branch delay slot, NOP 
① 这些指令也称为“数据处理指令”。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 41 章  除以 9 
455 
本例出现了新指令 BREAK。它是由编译器产生的异常处理指令，会在除数为零的情况下抛出错误信
息。毕竟在正规的数学概念里，除数不可以是零。即使在启用优化选项的情况下，GCC 也未能判断出本例
“除数$V0 用于不会是零”的切实情况，机械性地分派了异常处理的检测指令。BREAK 指令只是一个在除
数为零的情况下通知操作系统进行异常处理的指令。只要除数不是零，程序将会执行 MFLO 指令，把 LO
寄存器里的商复制到$V0 寄存器。 
这里顺便说明一下，乘法指令 MUL 会把积的高 32 位保存在 HI 寄存器中，把积的低 32 位保存在 LO
寄存器中。而除法指令 DIV 则会把商保存在 LO 寄存器，把余数在保存在 HI 寄存器中。 
如果把源程序的除法指令修改为“a % 9”、计算余数，那么编译之后的程序就会用 MFHI 指令替换本
例中的 MFLO 指令。 
41.4  它是如何工作的 
在引入 2 的 n 次方之后，除法运算可转换为乘法运算： 
2
input
input
input
divisor
result = divisor
2
2
n
n
n
M
⋅
⋅
=
=
这里的 M 是魔术因子（Magic coefficient）。其 计算公式是 
2
divisor
n
M =
最终，除法运算就转换成了 
result= input
2n
•M
“除以 2 的 n 次方”的运算可以直接通过右移操作实现。如果 n 小于 32，那么中间运算的积的低 n 位
（通常位于 EAX 或者 RAX 寄存器）就会被位移运算直接抹去；如果 n 大于或等于 32，那么积的高半部分
（通常位于 EDX 或者 RDX 寄存器）的数值都会受到影响。 
可见，参数 n 的取值直接决定了转换运算的计算精度。 
在进行有符号数的除法运算时，符号位也对计算精度及 n 的取值产生了显著影响。 
下面这个例子将验证符号位的影响。 
int f3_32_signed(int a) 
{ 
         return a/3; 
}; 
unsigned int f3_32_unsigned(unsigned int a) 
{ 
         return a/3; 
}; 
在无符号数的计算过程中，魔术因子是 0xaaaaaaab。乘法的中间结果要除以 2 的 33 次方。 
而在有符号数的计算过程中，魔术因子则是 0x55555556，乘法的中间结果要除以 2 的 32 次方。虽然
这里没有进行除法运算，但是根据前面的讨论可知：商的有效位取自于 EDX 寄存器。 
请别忘记中间一步的乘法计算同样存在符号位的问题：积的高 32 位右移 31 位，将在 EAX 寄存器的
最低数权位保留有符号数的符号位（正数为 0，负数为 1）。将符号位加入积的高 32 位值，可实现负数补码
的“＋1”修正 
指令清单 41.5  带优化的 MSVC 2012  
_f3_32_unsigned PROC 
         mov      eax, -1431655765  
   ; aaaaaaabH 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
456 
逆向工程权威指南（上册） 
         mul      DWORD PTR _a$[esp-4] ; unsigned multiply 
; EDX=(input*0xaaaaaaab)/2^32 
         shr      edx, 1 
; EDX=(input*0xaaaaaaab)/2^33 
         mov      eax, edx 
         ret      0 
_f3_32_unsigned ENDP 
_f3_32_signed PROC 
         mov      eax, 1431655766   
   ; 55555556H 
         imul     DWORD PTR _a$[esp-4] ; signed multiply 
; take high part of product 
; it is just the same as if to shift product by 32 bits right or to divide it by 2^32 
         mov      eax, edx      
; EAX=EDX=(input*0x55555556)/2^32 
         shr      eax, 31  
; 0000001fH 
         add      eax, edx   
; add 1 if sign is negative 
         ret      0 
_f3_32_signed ENDP 
41.4.1  更多的理论 
其实，我们都知道，乘法和除法互为逆运算。因此下面的除法可以用乘法来代替。我们可以表述为 
1
x
x
c
c
=
1/c 可以称为乘法的逆运算，是 c 的倒数。可以用编译器来做提前运算。 
但是这是为浮点计算用的，有没有整数呢？在模算术计算环境下，是可能会有的。CPU 寄存器的长度
是很规整的，要么 32 位要么 64 位，因此几乎所有的寄存器的算术操作都是对 2 的 32 次方或者 2 的 64 次
方进行操作。 
可以查阅 War02 的第 10 章第 3 节。 
41.5  计算除数 
41.5.1  变位系数#1 
通常我们看到的代码可能就像这样： 
        mov  
   eax, MAGICAL CONSTANT 
        imul  
   input value 
        sar  
   edx, SHIFTING COEFFICIENT ; signed division by 2x using arithmetic shift right 
        mov  
   eax, edx 
        shr  
   eax, 31 
        add  
   eax, edx 
我们这里用大写字母 M 来代表 32 位的魔术因子，把变位系数记为 C，把除数记为 D。 
因此除数可以表示为 
232
C
D
M
+
=
指令清单 41.6  优化的 MSVC 2012 代码 
        mov  
   eax, 2021161081   
; 78787879H 
        imul  
   DWORD PTR _a$[esp-4] 
        sar  
   edx, 3 
        mov  
   eax, edx 
        shr  
   eax, 31  
; 0000001fH 
        add  
   eax, edx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 41 章  除以 9 
457 
用公式可以表示为 
232 3
2021161081
D
+
=
这个数字超过了 32 位的表达范围。我们可使用 Mathematica 程序计算除数： 
指令清单 41.7  Wolfram Mathematica 的计算结果 
In[1]:=N[2^(32+3)/2021161081] 
Out[1]:=17. 
它可算出本例采用的除数是 17。 
在 64 位数据的除法运算中，计算除数的方法完全相同。只是不再采用 2 的 32 次方，而采用了 2 的 64
次方。 
uint64_t f1234(uint64_t a) 
{ 
         return a/1234; 
}; 
指令清单 41.8  64 位下的优化 MSVC2012 
f1234    PROC 
        mov     rax, 7653754429286296943   
; 6a37991a23aead6fH 
        mul     rcx 
        shr     rdx, 9 
        mov     rax, rdx 
        ret     0 
f1234    ENDP 
指令清单 41.9  WolframMathematica 的计算结果 
In[1]:=N[2^(64+9)/16^^6a37991a23aead6f] 
Out[1]:=1234. 
41.5.2  变位系数#2 
变位系数确实可能为零： 
                mov     eax, 55555556h ; 1431655766 
                imul     ecx 
                mov     eax, edx 
                shr     eax, 1Fh 
这样，计算除数的方法就更简单一些了： 
232
D
= M
就本例而言，除数的计算方法是： 
232
D = 1431655766
再次使用 Mathematica 程序计算除数 
指令清单 41.10  Wolfram Mathematica 的计算结果 
In[1]:=N[2^32/16^^55555556] 
Out[1]:=3. 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
458 
逆向工程权威指南（上册） 
最终求得除数为 3。 
41.6  练习题 
请描述下述代码的功能。 
指令清单 41.11  采用 MSVC 2010 优化的代码 
_a$ = 8 
_f      
   PROC 
           mov     ecx, DWORD PTR _a$[esp-4] 
           mov    eax, -968154503 ; c64b2279H 
           imul  
ecx 
           add  
edx, ecx 
           sar  
edx, 9 
           mov  
eax, edx 
           shr  
eax, 31  
 ; 0000001fH 
           add  
eax, edx 
           ret  
0 
_f         ENDP 
指令清单 41.12  ARM64 位下采用 GCC 4.9 优化 
f: 
           mov  
w1, 8825 
           movk  w1, 0xc64b, lsl 16 
           smull  x1, w0, w1 
           lsr  
x1, x1, 32 
           add  
w1, w0, w1 
           asr  
w1, w1, 9 
           sub  
w0, w1, w0, asr 31 
           ret 
答案请参见 G.1.14。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 4422 章
章    字
字符
符串
串转
转换
换成
成数
数字
字，
，函
函数
数 aattooii(())  
我们来重新实现一下标准的 C 函数 atoi()。这是一个将字符串转换成整数的函数。 
42.1  例 1 
本例可按照 ASCII 表把数字字符转换为数字。代码 没有做容错处理，因此当输入值为非数字型字符时，
返回值也就不会正确。 
#include  
int my_atoi (char *s) 
{ 
         int rt=0; 
         while (*s) 
         { 
                  rt=rt*10 + (*s-'0'); 
                  s++; 
         }; 
         return rt; 
}; 
         int main() 
         { 
                  printf ("%d\n", my_atoi ("1234")); 
                  printf ("%d\n", my_atoi ("1234567890")); 
}; 
这个算法实现的是从左到右读取数字，并将每个读取的字符减去数字 0 的 ASCII 值。我们知道，在 ASCII
表中，数字 0～9 是按照递增顺序连续存放的。因此无论字符“0”对应的数值是多少，“0”的值减去“0”的值
为 0，“9”的值减去“0”的值为 9。按照这种模式，函数就可把单字节字符转换为相应数值。因此，如果函数