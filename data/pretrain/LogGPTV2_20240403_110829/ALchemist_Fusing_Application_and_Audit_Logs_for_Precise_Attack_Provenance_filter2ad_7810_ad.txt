(R11) sameU nitL(LR1, LR2)
sameU nitH(HR1, HR2) & project(HR1, LR1) & project(HR2, LR2)
project(HR1, LR1) & ¬project(HR2, LR2) & sameU nitL(LR1, LR3) & inSeqL(LR3, LR2)
:-
:-
/* HR2 reads some data (denoted by URI) updated by HR1 */
(R12) depH(HR1, HR2)
/* two low level records have dependence as long as the corresponding high level records have dependence */
(R13) depL(LR1, LR2)
depH(HR1, HR2) & project(HR1, LR1) & project(HR2, LR2)
/* in the same unit, a record of the output type depends on preceding records of the input type, regardless of the resources they access */
(R14) depL(LR1, LR2)
writeURI(HR1, URI) & readURI(HR2, URI) & HR1.IDX < HR2.IDX
sameU nitL(LR1, LR2) & LR1.IDX < LR2.IDX & inputAction(LR1.ActionL) &
outputAction(LR2.ActionL)
:-
:-
:-
/* for read/write of regular ﬁle, a ﬁle read depends on preceding writes to the same ﬁle regardless of their units */
(R15) depL(LR1, LR2)
LR1.F ile = LR2.F ile & LR1.IDX < LR2.IDX & outputAction(LR1.ActionL) & inputAction(LR2.ActionL)
:-
Fig. 9: Log Fusion Rules
··· , Bn leads to the introduction of H. The ultimate goal
of these inference rules is to derive four types of critical
relations sameU nitH(HR1, HR2), sameU nitL(LR1, LR2),
depH(HR1, HR2), and depL(LR1, LR2) that assert two high-
level application log entries belong to the same execution unit,
two low-level audit log entries belong to the same unit, two
application log entries have (direct) dependence, and two audit
log entries have (direct) dependence, respectively. They denote
the two kinds of information derived by fusion: execution
units and dependences between events, from which the attack
provenance graph can be precisely constructed. An execution
unit denotes an autonomous task (e.g., a tab in ﬁrefox). As
shown by existing works [53], [33], unit partitioning is the
key to high precision in dependence analysis. In particular,
dependences may be induced between an input event and an
output event through computation in memory. For example, a
ﬁle write may be dependent on a socket read if part of the
socket buffer is appended to the ﬁle. However, such depen-
dences are invisible for syscall level analysis (as the I/O events
operate on different system resources). Although instruction
level tracing can detect them, it is too expensive in practice.
With unit partitioning, an output event is considered to have
dependences on all the preceding input events within the same
unit, even when they operate on different system resources. In
8
addition, dependences across units can be directly derived from
operations on common resources. Many of them are invisible
without fusion. For example, reads/writes of different emails
are recorded as reads/writes to the same INBOX ﬁle in the
audit log and hence not distinguishable. However, through log
fusion, dependences induced by reads and writes of the same
email across units can be precisely derived (through the email
URI in the corresponding application log entries).
The ﬁrst two rules (R1) and (R2) of correlated(HR, LR)
correlate a high level event and a low level event through
their shared ﬁelds, indicating that they may denote the same
resource access. Note that the two rules have different pre-
conditions (i.e., different right-hand-sides), denoting the dif-
ferent scenarios (i.e., through network connection or ﬁle) that
correlate an HR and an LR. However,
two events being
correlated may not mean they correspond to each other. For
example, assume a ﬁle is read twice at two distant timestamps.
Each read gives rise to an HR and an LR. The HR of the
ﬁrst access is correlated to the LR of both accesses while
it only corresponds to the ﬁrst LR. Hence, we introduce a
relation project(HR, LR) to derive precise correspondence.
The ﬁrst project(HR, LR) rule (R3) projects an HR to a
low level LR if they are correlated and their timestamps have
negligible differences; and the second rule (R4) projects HR
to LR if there has been another low level event LR1 such
that LR and LR1 belong to the same atomic operation, and
there has been projection from HR to LR1. Note that it is
common that an atomic operation at the application level (e.g.,
establishing a network connection) corresponds to multiple
low-level audit events (e.g., socket creation and connection).
Such atomic relations are captured by the aforementioned atom
(A2) atomicL.
The next rule (R5) sameT ran(HR1, HR2) identiﬁes two
HR’s with the same transaction id belong to the same transac-
tion. The next three rules (R6)-(R8) sameU nitH(HR1, HR2)
infer the high level events that belong to the same unit. Recall
that a unit may have many transactions. For example, a tab’s
execution may consist of requesting a page, downloading a ﬁle,
and executing a piece of JS code. In the ﬁrst rule (R6), there
are some log entries that contain explicit unit id. For example,
a switch to tab t event and all the URL request events from
tab t share the same tab id t and hence belong to the same
tab. The second rule (R7) dictates that all the events in the
same transaction must belong to the same tab. The last rule
(R8) includes all the transitive transactions into the same tab.
Note that it is very common a sub-task in ﬁrefox spawns its
own sub-tasks, and so on, leading to a chain of transactions.
two sameU nitL(LR1, LR2) rules (R10) and
(R11) group audit log entries to the same unit. The ﬁrst rule
(R10) dictates that the audit events that have the same HR
projection belong to the same unit. The second rule (R11)
says that if LR1 is projected to HR1, LR2 does not have
any projection, but it is right after another audit event LR3
that has been determined to be in the same unit as LR1, then
LR2 is considered to be in the same unit as LR1. This rule
essentially renders forward attribution, which means that if
there are low level (audit) events that are not projected to
any high level (application) event in between two low level
events that have projection to high level, these un-projected
low event events are considered to be in the same unit as the
The next
Fig. 10: Firefox Asynchronous Download
Fig. 11: Log for Firefox Asynchronous Download (read-
URI(A,#0,...) means a HR in tab A with transcation id 0 reads
some URI)
preceding projected low level event. As we will demonstrate
with examples, this rule is particularly important for proper
attribution of background activities.
The last four rules (R12)-(R15) derive dependencies be-
tween events. The ﬁrst depH rule (R12) speciﬁes that read and
write on the same URI induces dependence. This rule allows
us to infer high level semantic dependences invisible in the
audit log. Besides the email dependence example mentioned
earlier, another example is that ﬁrefox stores cookies (of
all websites) to the same ﬁle cookies.sqlite. Without
the URIs identifying individual cookies and only considering
syscall information, reading the cookie for a website would
be dependent on all the preceding writes to cookie from any
website. The ﬁrst depL rule (R13) inherits dependence from
high level log entries. The second depL rule (R14) speciﬁes
that any output event is dependent on all the preceding input
events in the same unit. Note that a preceding input event
(e.g., a socket read) may be on an object different from the
output event (e.g., a ﬁle write). This approximation is critical
for capturing invisible data-ﬂow (e.g., through memory). The
third depL rule (R15) derives cross-unit and even cross-process
dependence by the common resource that is operated on. In
ALchemist, we have 135 fusion rules in total and we only
present the ones that are necessary to illustrate the idea.
Example 1: Fusing Firefox Log and Audit Log. Fig. 10
shows a sample execution of ﬁrefox accessing CNN.com. In
this execution, the user ﬁrst loads the CNN.com main page
(step 1(cid:13)). As part of the page loading, a JS ﬁle tp.js
is requested. However, before the ﬁle is downloaded and
executed, the user clicks a page link on the main page, which
loads a news page about measles (step 2(cid:13)). The downloading
and the execution of the JS ﬁle are hence happening in the
9
12    tp.js3    news.img4ForegroundBackgroundThreadLine#Firefox LogsAudit Logs1socket(fd0)2readURI(A, #0, cnn.com/index.html)connect(151.101.129.67, fd0)3...Tab BMain4initUnit(B)5resolve(-, #1, a.com, 192.168.143.1)connect(127.0.0.1, fd1)6open(TRRBlacklist.txt, fd2)7write(TRRBlacklist.txt, fd2)8initTran(-, #1, #2)9readURI(A, #2, a.com/tp.js)connect(192.168.143.1, fd3)10readURI(B, #3, cnn.com/news.img)connect(151.101.129.67, fd4)11......12readURI(-, #3, 151,101.129.67)recvfrom(151.101.129.67, fd4)13readURI(-, #2, 192,168,143,1)recvfrom(192.168.143.1, fd3)14initTran(-, #2, #4)15readURI(-, #4, cache/tp.js)open(cache/tp.js, fd5)16writeURI(-, #4, cache/tp.js)write(cache/tp.js, fd5)17initTran(-, #4, #5)18readURI(-, #5, cache/tp.js)open(cache/tp.js, fd6)19......20initTran(#5, #6)21readURI(-, #6, secret.txt)open(secret.txt, fd7)22read(secret.txt, fd7)Tab ASocketTab ATab BResolver JS     Helper FS BrokerTab ATab ATab BCacheSocketbackground (step 3(cid:13)), interleaved with the loading process
of the news page (e.g., loading news.img in step 4(cid:13)). The
resulting syscall interleaving makes causality inference very
difﬁcult for existing techniques. We will use this example to
demonstrate how log fusion allows dis-entangling the complex
interleaving.
Fig. 11 shows the runtime information of the example
execution in Fig. 10 that accesses CNN.com. The ﬁrst column
shows that in the foreground, there are two tabs, with tab
B displayed after tab A. The second column shows that
in the background, the execution of the two tabs interleave
(with B’s execution shaded). The third column shows the
list of threads that execute in the temporal order. There are
multiple worker threads with the Socket thread managing
network communication, Resolver resolving host names,
Cache maintaining the ﬁle cache, JS Helper compiling
and executing JS code blob, and FS Broker performing ﬁle
system operations. Observe that a thread may serve multiple
tabs (e.g., lines 9-14 in column four). Columns ﬁve and six
show the application log atoms and audit log atoms.
From the application log, we can see that the Socket
thread ﬁrst requests the main page of CNN.com (line 2) in
transaction #0 in tab A, which is normalized to a readURI
atom. Then the Main thread switches to tab B (normalized to
initUnit at line 4). In the background, the Resolver thread
resolves the host of the JS ﬁle, a.com, in transaction #1 (line
5). Observe that the unit id is unknown in the atom as the
raw log does not have such information. We will see log
fusion can recover such information later. It then initializes
a child transaction #2 (line 8) that will download the JS ﬁle.
In lines 9-14, the Socket thread ﬁrst requests the JS ﬁle
in transaction #2 and then requests and reads news.img for
tab B (lines 10-12). Observe that the readURI at line 13 is
directly from the IP (without unit information). At the end,
it switches back to serve tab A by receiving the JS ﬁle (line
13) and starting a new transaction #4 (line 14) to cache the
JS ﬁle (lines 15-16). Transaction #4 initiates #5 to compile
and execute the JS ﬁle (lines 18-20), which opens and reads
a ﬁle “secret.txt” through the FS Broker thread (lines
21-22). From the audit log (in the last column), we observe
the corresponding syscalls for many of the application level
operations. For example, the ﬁrst request of the main page at
the application level corresponds to a socket creation syscall
(line 1) and a connect syscall (line 2). There are also syscalls
that are invisible at the application level, such as the open and
write of ﬁle “TRRBlacklist.txt” (lines 6-7) that contains
a list of websites that are blocked.
Observe that many high level atoms miss the unit informa-
tion and none of the low level atoms have any unit information.
In addition, dependences are invisible. In the following, we
show how the two logs are fused to derive such missing
information. We use Ft and At to denote the ﬁrefox event
and the audit event at line t in Fig. 11.
According to rule (R5)
in Fig. 9, we can derive
sameT ran(F5, F8) and sameT ran(F13, F14). By rule (R7),
these pairs are in the same unit. By rule (R8), we have
sameU nitH(F8, F9) and sameU nitH(F14, F15). By rule
(R6), we have sameU nitH(F2, F9) due to the same tab id
A. At the end of inference, we can determine that all the plain
TABLE III: Apache execution
Thread Line Apache Logs Audit Logs
r
e
k
r
o
W
1
2
3
4
5
6
7
8
9
10
11
12
socket(fd0)
accept4(172.16.163.1, fd0)
read(172.16.163.1, fd0)
...
REQ(. . . )* open(/var/www/html/payload.php, fd1)
...
open(/var/www/html/secret.txt, fd2)
...
writev(172.16.163.1, fd0)
shutdown(172.16.163.1, fd0)
...
accept4(168.128.16.1, fd3)
* requestFrom(-,-,172.16.163.1, payload.php)
ﬁrefox log entries in Fig. 11 belong to the same unit. The
shaded entries belong to another unit.
and
(R3),
we
an
rules
is
resolved
Following
although F2 has
it
to
have
(R1)
an URI
project(F2, A2). Note
that
“CNN.com/index.html”,
IP
151.101.129.67, which allows (R1) to apply. Similarly, we
have project (F5, A5), project(F9, A9), project(F10, A10),
project(F12, A12), and so on. We also have atomicL(A1, A2)
due to the atomicity of the two operations, by (A2). As such,
we have project(F2, A1) by rule (R4). By (R10), we have
sameU nitL(A2, A5), which further entails sameU nitL
(A2, A6) by (R11), i.e., the forward attribution rule. Similarly,
the end, we correctly
we have sameU nitL(A2, A7). At
the plain
partition the audit events to two units, namely,
events and the shaded events. Furthermore,
through rules
(R14), we get depL(A16, A13), which correctly captures
the dependence that the JS ﬁle was received from network
and written to a ﬁle. And due to execution partitioning, the
false dependence from A16 to A12 is avoided. In contrast,
NoDoze [31] cannot distinguish the true dependence between
A16 and A13 from the false dependence between A16 and
A12. OmegaLog [33] cannot identify the false dependence
either as it cannot distinguish the subtasks from different units
in a worker thread. In fact, as shown by our results in Section
V-E, they do not work well when asynchronous behaviors are
intensive.
Example 2: Request Serving in Apache. To show the gen-
erality of log fusion, we use another example in which apache
serves a request. Recall that it has a class IV thread pool
execution model, in which a thread from the pool is being
reused to serve multiple requests. In Table III, an attacker from
IP 172.16.163.1 requests a ﬁle payload.php from the
apache server. The request is recorded in the apache log at line
5. The audit log column shows the low level events invisible
at the application level. They all belong to a same thread
(from the pool). Note that audit log entries contain thread id,
allowing us to separate them by threads. Lines 1-10 belong
to the request and lines 11-12 belong to another later request
served by the same thread. Lines 1 and 2 are atomic. Lines 2,
3, 9, and 10 (in the audit log) share the common IP ﬁeld with
the application log entry (at line 5). As such, rules (R1), (R3),
and (R4) allow us to project lines 2, 3, 9, and 10 in audit to line
5 in the application log. They hence belong to the same unit.
According to rule (R11), lines 4-8 are attributed to the same
unit too although they are not projected to any application log.
This precisely reﬂects that tasks within a thread are processed
sequentially.
10
We use the above two examples to show how the fusion
rules can be applied in real scenarios to remove false de-
pendence. However, it is possible that the attackers can craft
special application workloads to attack our rules. We will
explore this in our future work.
Apply to New Programs. ALchemist is designed in a way
that aims to minimize the efforts of extending the technique
to a new application. The canonical form, atoms, and fusion
rules are all general and shared by all applications which
can be expressed by our execution models. For such a new
application, the analyst only needs to provide the parser to
parse its built-in log to the canonical form. Note that it is
completely ﬁne if certain ﬁelds of the canonical form are
vacant when the raw log does not have such information
explicitly. ALchemist will infer it by log fusion if the raw log
has sufﬁcient (implicit) information to reﬂect the underlying