title:Protecting Privacy in Key-Value Search Systems
author:Yinglian Xie and
Michael K. Reiter and
David R. O'Hallaron
Protecting Privacy in Key-Value Search Systems
Yinglian Xie Michael K. Reiter
David O’Hallaron
Carnegie Mellon University
Email:{ylxie, reiter, droh}@cs.cmu.edu
Abstract
respect to the servers, which may belong to different orga-
nizations and be untrusted to expose either data or queries.
This paper investigates the general problem of efﬁciently
performing key-value search at untrusted servers without
loss of user privacy. Given key-value pairs from multiple
owners that are stored across untrusted servers, how can a
client efﬁciently search these pairs such that no server, on
its own, can reconstruct the key-value pairs?
We propose a system, called Peekaboo, that is applica-
ble and practical to any type of key-value search while pro-
tecting both data owner privacy and client privacy. The
main idea is to separate the key-value pairs across different
servers. Supported by access control and user authentica-
tion, Peekaboo allows search to be performed by only au-
thorized clients without reducing the level of user privacy.
1
Introduction
Wide area distributed systems often assume that hosts
from different administrative domains will collaborate with
each other (e.g., [20, 33]). With user data exposed to het-
erogeneous, third-party servers, one major challenge is to
store and ﬁnd information without loss of privacy.
Consider a distributed service discovery system with
multiple independent service providers [7]. Each provider
stores service attributes, prices, and locations at one or
more directory servers. Clients submit service attributes
as queries to the directory servers, and obtain price and lo-
cation information as query results. This poses a signiﬁ-
cant risk to the privacy of both the clients and the service
providers. A curious directory server could not only follow
a client’s queries and infer the client’s activities, but also
exploit the information stored by a service provider to in-
fer sensitive information such as the provider’s marketing
strategies and ﬁnancial status.
As another example, consider a people location service
for ubiquitous computing environments (e.g., [13]). Al-
though there are many solutions (e.g.,
[17, 23]) to pre-
vent unauthorized access to user location information, few
of them tackle the problem of protecting user privacy with
Server pool
n
u
o
l
t i
a
a
v
)
e
t r
−
s
y
i
e
g
k
R e
(
Data owner
Query(key)
Result (value)
Client
Figure 1. A typical key-value search system
The question then is how can we efﬁciently search in-
formation while protecting the privacy of both data own-
ers and clients? Without loss of generality, in a key-value
search system illustrated in Figure 1, there are data owners,
clients, and a pool of servers. Data owners register their
data represented as key-value pairs at one or more servers.
Clients submit keys as queries and would like to retrieve all
the values that match the keys. In such a scenario, given
key-value pairs from multiple data owners that are stored
across untrusted servers, how can a client search keys for
values in such a way that no server, in isolation, can infer
what the client has queried and retrieved? Meanwhile, we
would like no server to be able to determine the key-value
bindings stored by any data owner. Figure 2 lists some con-
crete example key-value pairs in our everyday life.
Prior research on privacy-preserving search has largely
focused on providing strong security guarantees. They usu-
ally incur high overhead, or provide limited search func-
tionality or privacy that limits their real-world adoptabil-
ity. For example, PIR approaches (e.g., [5, 14]) can theo-
retically support key-value search under strong privacy, but
with high overhead that has precluded their use in prac-
tice. Encryption-based solutions (e.g., [30, 3]) allow clients
to search over encrypted data, but limit search to be per-
formed by either clients who hold the same encryption keys
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:41 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Key
Product names
Keywords
Stock names
Patient names
Subscriber names
Application
Online shopping
Value
Providers, prices
File owners, ﬁle names Keyword search, ﬁle sharing
Stock quotes
SSN, medical histories
Phone numbers
Stock quote dissemination
Online medical directories
Yellow-page service
Figure 2. Example applications of key-value search
as the data owners, or on a small number of keywords pre-
speciﬁed by clients.
In addition, they often require a se-
quential scan through the encrypted data and are not efﬁ-
cient. Anonymity-based approaches (e.g., [6, 27]) can also
achieve client privacy by routing queries through an anony-
mous overlay toward servers. These approaches focus on
providing anonymity to the clients, but do not protect the
privacy for the generalized key-value search.
In this paper, we present the Peekaboo system for per-
forming key-value search at untrusted servers without loss
of user privacy. We explicitly consider the tradeoffs be-
tween privacy, usability, and efﬁciency. Although there are
solutions that achieve strong security properties, we inten-
tionally favor an efﬁcient and practical approach that offers
only weaker security properties. Our main idea is to split
the key-value pairs across multiple non-colluding servers
that do not share inputs with each other. All the servers then
jointly perform search to return query results. In summary,
the Peekaboo system has the following features:
• Secure: Given a client query expressed as a key, Peek-
aboo servers return a list of values matching the key
while no server, on its own, can determine either the
values retrieved, or the key-value bindings. Therefore,
Peekaboo protects both data owner privacy and client
privacy. Furthermore, the Peekaboo access control and
user authentication mechanisms prevent unauthorized
users from searching the data.
• Flexible: Peekaboo is applicable to any type of key-
value search using user deﬁned match criteria (e.g.,
exact match [10], range search [12]). It can be easily
extended to support advance queries where not only
matched values but also matched keys will be returned
in query results (e.g., fuzzy match [11]).
• Efﬁcient: Peekaboo requires neither expensive rout-
ing mechanisms to send data (or queries), nor special-
ized encryption algorithms on stored data. Our perfor-
mance evaluation shows that the storage costs of Peek-
aboo servers are comparable to or even less than legacy
servers, whereas the search latency is on the order of
tens to hundreds of milliseconds, acceptable to most
clients.
2 Model and Deﬁnitions
In this section, we describe our system model and the
privacy properties that Peekaboo is trying to achieve.
2.1 System Model
The system has three types of entities: data owners (own-
ers hereafter), clients, and Peekaboo servers. We view the
data as a list of key-value pairs. Without loss of general-
ity, we assume keys alone do not release useful information
about the key-value pairs that are to be searched (i.e., we
should not be able to infer a key-value pair from just the
key for the purpose of search to be meaningful). Peekaboo
servers can store key-value pairs provided by multiple inde-
pendent owners. A query consists of a single key and the
client is interested in retrieving all the values that match the
key in the key-value pairs using application speciﬁc match
criteria (e.g., exact match, range match).
The Peekaboo search protocol consists of two stages:
a registration stage and a query stage. In the registration
stage, owners publish key-value pairs at Peekaboo servers.
In the query stage, clients interact with servers to resolve
queries.
The system has two types of Peekaboo servers: K-
servers and V-servers. K-servers store keys only, whereas
V-servers store encodings of values that can be used to re-
cover values in the key-value pairs after search. Data own-
ers and clients talk only to the V-servers. Both types of
servers jointly perform search to resolve queries. Without
loss of generality, we assume: (1) Peekaboo servers are
“honest but curious”. They follow protocol speciﬁcations
exactly, and passively observe the information stored lo-
cally and the messages they received. (2) Peekaboo servers
do not collude to learn data and queries. This does not pre-
vent the servers from communicating with each other in
order to follow the protocol. In particular, each K-server
authenticates the V-servers, and interacts with only the V-
servers that it has authenticated through a protected channel
such as TLS [32].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:41 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20062.2 Privacy Properties
Privacy is a guarantee that certain information about an
entity is hidden from other entities. The privacy property is
the deﬁnition of what types of information are hidden from
which entity. In a Peekaboo search system, there are two
types of entities whose privacy we would like to protect:
data owners and clients.
Throughout both registration and query stages, we strive
to prevent K-servers from learning values or user identities.
Although K-servers have access to keys, we protect the pri-
vacy of data owners and clients by providing anonymity to
both of them against the K-servers. Meanwhile, we strive to
leak no information about keys or values to V-servers, thus
providing conﬁdentiality of both the key-value pairs pub-
lished by the owners and the key-value pairs retrieved by
the clients from the V-servers. Each server, on its own (i.e.,
without any input from other servers), cannot determine the
key-value bindings either stored or queried. Accordingly,
we deﬁne the following privacy properties for data owners
and clients, respectively:
• Owner privacy: During both the registration and query
stages, a K-server, on its own, should not learn the
owner identity and the list of values in the key-value
pairs. A V-server, on its own, should not learn either
the keys or the values in the key-value pairs.
• Client privacy: During the query stage, a K-server, on
its own, should not learn the client identity and the list
of values returned in the query results. A V-server, on
its own, should not learn the client’s queried keys or
the values retrieved.
Given such privacy deﬁnitions, we ﬁrst describe in Sec-
tion 3 a basic protocol for performing registration and query
with a single K-server and a single V-server. We use this ba-
sic protocol as a building block, and present in Section 4 the
Peekaboo search system for an open environment, where
any client interested in retrieving key-value pairs can per-
form search. In such a scenario, while we assume servers
do not collude with each other, they could actively partici-
pate in search as well, performing on-line dictionary attacks
by enumerating all possible keys as queries. However, we
limit such dictionary attacks to be on-line so that they can
be detected and stopped. To prevent such dictionary attacks,
we further present in Section 5 an enhanced protocol that
limits search to only authorized clients using access control
and user authentication mechanisms.
In our model, we achieve a tradeoff between the level of
privacy and the usability and efﬁciency obtained in the pro-
tocols. For this purpose, we believe our privacy deﬁnitions
in an honest-but-curious model is sufﬁcient. We discuss de-
ployment issues and solutions to mitigate server collusion
V−Server
1
Alice    V
a
2
V
a
1
Bob      V
b
2
b
. . .       . . . 
V
Owner
Client
K−Server
K
K
1
a
2
a
1
K
b
2
Kb
. . .
R1
R2
R3
R4
. . . 
Figure 3. Using rendezvous numbers to bind
the keys and the values
in Section 6. However, if strong privacy is a concern, then
more secure protocols such as [19] can be used in the con-
text of keyword-based PIR.
3 The Basic Protocol
In this section, we describe a basic protocol as a build-
ing block for our system. This basic protocol involves a
single K-server and a single V-server, and is based on pub-
lic key cryptography. For the moment, we assume owners
and clients use this basic protocol to publish key-value pairs
and to perform search. Since this protocol has only a lim-
ited privacy guarantee, we present in the next section how
we can construct search systems based on this protocol to
provide the desired privacy properties. For clarity, we use
upper case K1, K2, . . . to denote keys in the key-value pairs,
and use lower case k1, k2, . . . to denote encryption keys that
will be needed.
For the speciﬁc application of key-value search, keys
alone do not release useful information about the pairs for
the search to be meaningful. Thus our idea is to split the
pairs and store them at different servers by introducing a
layer of indirection in between. Figure 3 shows the high
level concept of the basic protocol, where owners store the
keys at only the K-server and the values at only the V-server.
To bind the keys and the corresponding values, we generate
a list of rendezvous numbers to serve as an indirection layer.
Each key-value pair is associated with a unique rendezvous
number generated randomly by the V-server, and forwarded
to the K-server.
Owners and clients both communicate with only the V-
server to publish data and to perform search. Given a client
query, both servers work jointly to look up query results us-
ing rendezvous numbers. During the communication, keys
will be forwarded to the K-server without being exposed to
the V-server, whereas the values are stored and returned by
the V-server. To simplify our description, we assume the
system has a single owner Alice who wants to register a
list of key-value pairs (cid:1)K1, V1(cid:2), . . . ,(cid:1)Kn, Vn(cid:2), and a single
client Charlie who wants to retrieve the value correspond-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:41 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006ing to a key Ks. The K-server’s public key is pk. The basic
protocol works as follows (illustrated in Fig. 4):
Alice: Registration stage
α
i
← Epk(Ki) 
V-Server
K-Server
α
i
, Vi
Store (cid:1)Alice,Vi,Ri
(cid:2)
α
i
, Ri
← Dpk(α
i)
(cid:127) Ki
(cid:2)
• Store (cid:1)Ki, Ri
Charlie: Query stage
α
s
← Epk(Ks)
α
s
γ
(cid:1)Alice, Vi
(cid:2) ← γ
Store (cid:1)Charlie,Rs
(cid:2)
(cid:127) (cid:1)Ri, Rs
(cid:2) ← r
(cid:127) γ ← (cid:1)Alice, Vi
(cid:2)
α
s
, Rs
r
←Dpk(α