Fig. 1. A simpliﬁed communication example in ZooKeeper. Blue blocks indicate the message data. Solid arrows show the taint ﬂows within one node, and
the dashed arrow shows the taint ﬂows between two nodes through OS.
tion protocols. DisTA can precisely track all taints in these
test scenarios. We further apply DisTA on ﬁve real-world
distributed systems, i.e., ZooKeeper [12], MapReduce/Yarn
[25], ActiveMQ [26], RocketMQ [27] and HBase [10]. To run
DisTA on these systems, we only modify 10 LOC in the launch
script of these distributed systems on average. The experi-
mental results show that DisTA can successfully perform taint
tracking for these distributed systems without over-tainting or
losing any taints. The whole taint tracking process, including
the intra-node and inter-node tracking, causes 4.23X overhead,
while the pure intra-node tracking causes 3.92X overhead,
meaning that it is not expensive in inter-node tracking. We
have made DisTA and its experimental benchmarks publicly
available at https://github.com/tcse-iscas/DisTA.
In summary, this paper makes the following contributions.
• We design and implement DisTA, a generic taint tracking
tool for distributed systems. DisTA can be easily applied
on different distributed systems with small manual efforts
and be used in multiple taint tracking scenarios.
• We evaluate DisTA on the micro benchmark and real-
world distributed systems, and the experimental results
show that DisTA can effectively and efﬁciently perform
inter-node taint tracking in diverse distributed systems.
II. BACKGROUND AND MOTIVATION
In this section, we use a simpliﬁed example in ZooKeeper
[12] to illustrate the network communication process in dis-
tributed systems (Section II-A). We further introduce intra-
node taint
tracking (Section II-B) and its limitation (Sec-
tion II-C). Finally, we discuss and compare existing DTA tools
for distributed systems (Section II-D).
A. Motivating Example
Figure 1 shows ZooKeeper’s communication that N ode1
votes for N ode2. N ode1 ﬁrst constructs a Vote data (Line 1),
and then passes it to the SendWorker (Line 2). In SendWorker,
1.   int a, b;
2. + Taint a_t = new Taint(“a_tag”);
3. + Taint b_t = new Taint(“b_tag”);
4.   int c = a + b;
5. + Taint c_t = a_t.combine(b_t);
Fig. 2. Phosphor assigns a taint to every variable.
write method is called (Line 5) for writing data into the
output stream. The implementation of write method (Line
8 - 10) is located in SocketOutputStream.java, which is a
JRE class. In the method body, a JNI method socketWrite0
is called. The corresponding native method (Line 13 - 15)
of socketWrite0 is implemented in C language, and it calls
the method NET SEND (Line 14). NET SEND is a Linux
system call method which can deliver the data buf
to OS
to send out of the node. Line 16 - 30 shows the code
executed on N ode2. It follows a similar process as N ode1.
We follow the taint ﬂow and state the process from the lowest
code level to the highest. The native method (Line 28 - 30)
in SocketInputStream.c ﬁrst invokes the system call method
NET READ to read data and store it in data (Line 29). Then
the data is passed to the JNI method socketRead0 and further
to read in SocketInputStream.java. Finally, the data is passed
to the RecvWorker (Line 16 - 20). RecvWorker reads the data
from the input stream and stores it in an object Notiﬁcation
(Line 21).
B. Taint Tracking for Standalone Programs
The example in Figure 1 shows two standalone programs:
the program executed on N ode1 (Line 1 - 15) and the other
one executed on N ode2 (Line 16 - 30). The solid arrows show
the taint ﬂows within the single node. Existing DTA tools can
track these ﬂows with good soundness and precision. We take
Phosphor [22], the state-of-the-art DTA tool, as the example
to state how these tools perform intra-node taint tracking.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:27 UTC from IEEE Xplore.  Restrictions apply. 
548
root
a_t
b_t
c_t
Fig. 3. Phosphor uses a singleton tree to store all taint tags.
1.   public int native socketRead0(byte[] data);
2.   
3. + public ReturnTaint socketRead0(byte[] data, 
+    Taint data_t) {
4. +        ReturnTaint ret = new ReturnTaint();
5. +        ret.value = socketRead0(data);
6. +        ret.taint = data_t;
7. +        return ret;
8. + }
Fig. 4. Phosphor surrounds the native method with a wrapper.
Phosphor adds a shadow variable as the taint of every
variable, and utilizes ASM [28] to instrument Java bytecode
so that taints can propagate with data. We illustrate its designs
in two aspects, i.e., taint storage and taint propagation.
Taint storage. Phosphor assigns a taint to each variable
in the program. A taint is a set composed of multiple tags.
Once developers set a variable as a taint source point, the
corresponding taint is assigned with a unique tag. The code
snippet in Figure 2 shows an example. The original code
declares three variables a, b (Line 1) and c (Line 4). Phosphor
assigns each variable with a shadow variable as its taint, i.e.,
a t (Line 2) for a, b t (Line 3) for b, and c t (Line 5) for
c, respectively. These taints are initialized as empty, i.e., no
tags. In Figure 2 a and b are set as taint source points. Thus,
their taints are assigned by two String tags a tag and b tag,
respectively. Note that the value of the tag is set by developers.
It can be a String as the example, or any other object.
Phosphor maintains a singleton tree to store all taint tags.
As Figure 3 shows, when a new tag is assigned, a new node
is added as the child of the root node. Every node is a tuple
, where ID is the unique rank of the tag in the
tree, and T ag is the value of the tag. The taint can refer to a
tag in the tree, which implies that the taint is assigned with the
tag. Related to the code snippet in Figure 2, there are two tags
 and  as children of root. a t refers
to  and b t refers to , implying that
a t has the tag a tag (i.e., a t = {a tag}) and b t has the
tag b tag (i.e., b t = {b tag}).
By utilizing the above taint storage strategy, Phosphor can
save much memory usage. If two variables have the same taint
tag, their taints can refer to the same node in the tree, thus
avoiding storing the same tags repeatedly.
Taint propagation. Phosphor uses the combination of taints
to represent
the taint propagation process. Every variable
assignment is a taint propagation process. In Figure 2, variable
c is assigned by the result of a plus b. So its taint combines
taint a t and b t (i.e., c t = a t
b t). Correspondingly, in
Figure 3, the singleton tree adds a new node  as
the child of , which implies that the tag of taint
a t is combined with the tag of taint b t. This new node is
referred by c t. c t has all tags on the path from the root to
the node it refers to. Thus, c t has both a tag and b tag (i.e.,
c t = {a tag, b tag}).
(cid:2)
C. Limitations in Intra-node Taint Tracking
Phosphor performs taint
tracking by instrumenting Java
bytecode. Thus, it can track taint ﬂows in Java code, but
cannot handle with ﬂows in the native code. Taking Figure 1
as an example, Phosphor cannot track taints in Line 12 - 15
and Line 28 - 30. To solve this problem, Phosphor surrounds
JNI methods (e.g., SocketWrite0) with a wrapper, and directly
assigns taints of parameters to the return value. As shown in
Figure 4, for the original native method socketRead0 (Line
1), Phosphor adds a wrapper method (Line 3 - 8). When the
original method is called, this wrapper is called instead. In
the wrapper body, a ReturnTaint object which can wrap the
return value and its taint is created (Line 4). Then, the original
native method is called to receive the message and store it in
data object. However, the taint of the message is lost. Instead,
Phosphor directly assigns the taint of the parameter data t
to the message. Obviously, it tracks a wrong taint ﬂow, and
makes the taint tracking unsound and imprecise.
D. Inter-node Taint Tracking
In general, building the inter-node taint tracking tool must
focus on challenges of three factors:
1) Soundness: If a tool is not sound, then it may incorrectly
drop taint information of the data. This usually happens
when data in some network communication APIs are not
tracked. Thus taints cannot propagate through these APIs.
2) Precision: If a tool is not precise, it may incorrectly add
additional taint information to the data, i.e., over-tainting.
In inter-node taint tracking, low precision is usually due
to the coarse granularity in tracking message.
3) Usability: If a tool can only track taints in some speciﬁc
systems or some speciﬁc scenarios, or requires lots of
manual efforts when applied to different systems, we say
it has poor usability.
Some tools have been developed for tracking taints in
distributed systems, e.g., Taint-Exchange [23], Kakute [14],
and FlowDist [24]. We explain them as follows.
Taint-Exchange [23] is a generic inter-node taint tracking
tool for x86 binaries. It utilizes libdft [29] to perform intra-
node taint tracking. To make taints propagate between nodes,
Taint-Exchange intercepts Linux system calls such as write(),
send(), socket() and accept() to wrap the taint information
with the data and transfer them together through network.
Since the system call level instrumentation does not require
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:27 UTC from IEEE Xplore.  Restrictions apply. 
549
modifying the upper applications, Taint-Exchange can be ap-
plied in different programs. However, Taint-Exchange applies
a bit for every data to mark whether it
is tainted. Thus,
it cannot taint different data by different taints and cannot
be applied in some scenarios, e.g., program debugging [5].
Besides, Taint-Exchange is specially designed for C-based x86
programs, so that it cannot track taints in Java programs.
Kakute [14] works for Spark [9] applications, and aims to
track RDDs in Spark. It leverages Phosphor [22] to track intra-
node taint propagation. To perform inter-node taint tracking,
it modiﬁes shufﬂe APIs, which are speciﬁc to RDD transfer
in Apache Spark. Thus, Kakute cannot be applied in other
distributed systems that do not have shufﬂe APIs. Further,
Kakute cannot track other data that do not relate to RDDs in
Apache Spark, e.g., the password to login the Spark system.
Thus, Kakute is unsound in some taint tracking scenarios.
Through instrumenting the data structure of RDD, Kakute can
easily mark ﬁelds in RDDs as tainted, and further tracks them
at runtime. It is precise in RDD dependency analysis. However,
it cannot be precise enough for all tracking scenarios.
FlowDist [24], [30] can support different distributed sys-
tems. It requires developers to provide the message-passing
APIs used in distributed systems, so that FlowDist can
map the message sending and receiving statements at run-
time. After that, FlowDist performs ofﬂine static analysis
to track statement-level data ﬂows in the program, and
merges intra-node data ﬂows into a whole data ﬂow graph
based on message-passing APIs mapping information. By
default, FlowDist only modiﬁes 6 JRE APIs for network
communication, including two APIs for socket communication
(i.e., Socket.getInputStream/getOutputStream), two APIs for
object serialization I/O (i.e., ObjectInputStream.readObject/
ObjectOutputStream.writeObject), and two APIs for NIO (i.e.,
SocketChannel.read/write). However, there are over 100 APIs
for network communication in JRE. FlowDist can drop the
data ﬂow information within these unmonitored APIs. Thus, it
is unsound. FlowDist performs statement-level static analysis,
which means it cannot distinguish different variables with
runtime values, thus introducing imprecision issues. Besides,
the combination of the static and dynamic analysis builds a
barrier for users to easily use it.
In comparison, our approach DisTA can perform sound and
precise taint tracking for different Java-based distributed sys-
tems. The architecture of DisTA is similar to Taint-Exchange.
We utilize Phosphor to perform intra-node taint tracking, and
instrument speciﬁc network communication APIs to make
taints propagate between nodes. The differences between
DisTA and Taint-Exchange locates at that we have instrumen-
tation designs, e.g., byte level tracking, to make DisTA sound
and precise, and runtime designs to solve practical problems
in scenarios requiring multiple taints. All these designs make
DisTA be a generic and easy-to-use taint tracking tool for
different distributed systems.
TaintMap
Node 1
Instrumented DS code
Instrumented JRE
JNI
Unmodified native library
Node 2
Instrumented DS code
Instrumented JRE
JNI
Unmodified native library
Fig. 5. The overview of DisTA.
III. DISTA DESIGN
Figure 5 shows an overview of DisTA. First, DisTA in-
struments all Java bytecode. The distributed system code and
part of JRE code are instrumented by Phosphor (Grey dashed
box areas), while DisTA further instruments the network
communication JNI methods (Blue solid box areas). Then,
at runtime, the instrumented system code is executed with
the instrumented JRE. The taints of messages are sent out by
the instrumented JNI methods, and stored in an intermediate
component named Taint Map. The other node receives taints
from Taint Map and reassigns them to the received messages.
The following sections illustrate how we design DisTA,
including the instrumentation level and tracking granularity
(Section III-A), the selection of methods for instrumentation
(Section III-B), and the instrumentation implementation de-
tails (Section III-C). At last, we introduce DisTA’s runtime
execution (Section III-D).
A. Instrumentation Level and Tracking Granularity
To perform inter-node taint tracking in distributed systems,
we need to instrument network communication methods. As
shown in Figure 1, we can instrument
these methods at
different levels, e.g., distributed system code and JRE methods.
Instrumenting at the distributed system code level (e.g., Send-
Worker and RecvWorker in Figure 1) can make our approach
not applied for other systems, since different systems usually
use different network communication methods. Instrumenting
at JRE level can solve the problem. However,
there are
hundreds of network communication methods in JRE. These
methods can adopt TCP and UDP communication, and TCP
communication can use different I/O stream classes, e.g.,
pure byte I/O, object I/O, buffered I/O, NIO and AIO. Every
I/O class has several even dozens of different I/O methods.
Instrumenting all these methods is an enormous task.
In DisTA, we instrument JNI methods, which are at the
bottom level among all JRE methods. All network communi-
cation methods in JRE must send / receive message to / from
OS through JNI methods, so DisTA can track taint ﬂows in
different JRE methods by instrumenting limited JNI methods.
Moreover, the message data in most JNI methods are in the
type of the byte array, which gives us the opportunity to track
taint in the single byte level granularity.
B. Instrumented Methods
To ﬁnd out which methods should be instrumented, we
inspect all JNI methods in Java source code (HotSpot Open-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:27 UTC from IEEE Xplore.  Restrictions apply. 
550
1.   native send(Data d);
2.   native receive(Data d);
3. + send(Data d, Taint d_t) {
4. +    Data wrappedData = serialize(d, d_t);
5. +    send(wrappedPacket);
6. + }
7. + receive(Data d, Taint d_t){
8. +    Data wrappedData = Data.emptyData();
9. +    int ret = receive(wrappedData);
10. +    deseralize(wrappedData, d, d_t);
11. + }
Fig. 6. A simpliﬁed illustration of instrumenting JNI method.
JDK 1.8), and further judge if they are used in network
communication. Generally, a network communication method
should have the word read / write or receive / send in its
name. Among these methods, some are specially designed for
ﬁle I/O, which are not our focus. We further check the method
information on Javadoc and exclude these methods.
As a result, we get 13 JNI methods in 5 classes. Two
methods in SocketInputStream and SocketOutputStream are
used for TCP communication. Three methods in PlainData-
gramSocketImpl are used for UDP communication. Eight
methods in FileDispacherImpl and DatagramDispatcherImpl
are used to implement NIO and AIO communication. Note
that, although FileDispatcherImpl looks like a ﬁle I/O speciﬁc
class, it is actually extended by SocketDispatcherImpl which
is used in NIO and AIO communication in Linux. Thus,
FileDispatcherImpl’s four methods are included.
C. Instrumentation Details
Our basic idea for instrumentation is simple and intuitive.
We add a wrapper method for each method. When it is called,
the wrapper is called instead. For senders, we combine the
message with its taint and send them out by the original
method. For receivers, we invoke the original method to
receive the message and then divide it into the data and taint.
Figure 6 shows a simpliﬁed example of the instrumentation.
send (Line 1) and receive (Line 2) are a pair of JNI methods.
Method send can send data d out of the node, and receive
can receive data and store it
in the parameter d. When
these two methods are called, we replace them by our two
modiﬁed methods (Line 3 - 11). In the wrapper method
send, we serialize data d and its taint d t and wrap them
in wrappedData (Line 4). Then we send them out by the
original JNI method (Line 5). In receive, we ﬁrst construct an
empty Data object wrappedData (Line 8). Then we call the
original JNI method receive to receive the message and store
it in wrappedData (Line 9). At last, we deserialize it and
assign the data and taint to the parameter d and d t.
Ideally, the type of message data in network communication
should be a byte or a byte array, so that we can track the
distinct
taint of every single byte and make the tracking
precise. However, not all data types in JNI methods are as we
expected. Depending on the data type of the method parameter,
we categorize these methods into three types: stream oriented
1.   class DatagramPacket {
2.      byte[] data;
3. +    Taints[] taints;
4.   }
5.   native send(DatagramPacket packet);