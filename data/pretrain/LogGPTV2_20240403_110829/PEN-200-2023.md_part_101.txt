# Penetration Testing with Kali Linux

## Using PsLoggedon to Enumerate User Logons

### Enumerating Users on FILES04
```powershell
PS C:\Tools\PSTools> .\PsLoggedon.exe \\files04
```
**Output:**
```
PsLoggedon v1.35 - See who's logged on
Copyright (C) 2000-2016 Mark Russinovich
Sysinternals - www.sysinternals.com
Users logged on locally:
 CORP\jeff
Unable to query resource logons
```
**Listing 761 - Using PsLoggedOn to see user logons at FILES04**

In this case, we discover that `CORP\jeff` is logged in on `FILES04` with his domain user account. This information suggests a potential attack vector, and we will document it for further analysis.

### Enumerating Users on WEB04
```powershell
PS C:\Tools\PSTools> .\PsLoggedon.exe \\web04
```
**Output:**
```
PsLoggedon v1.35 - See who's logged on
Copyright (C) 2000-2016 Mark Russinovich
Sysinternals - www.sysinternals.com
No one is logged on locally.
Unable to query resource logons
```
**Listing 762 - Using PsLoggedOn to see user logons at WEB04**

According to the output, there are no users logged in on `WEB04`. This may be a false positive since we cannot confirm if the Remote Registry service is running, but the lack of error messages suggests the output is accurate. For now, we will accept that no users are logged in on this server.

### Enumerating Users on CLIENT74
```powershell
PS C:\Tools\PSTools> .\PsLoggedon.exe \\client74
```
**Output:**
```
PsLoggedon v1.35 - See who's logged on
Copyright (C) 2000-2016 Mark Russinovich
Sysinternals - www.sysinternals.com
Users logged on locally:
 CORP\jeffadmin
Users logged on via resource shares:
10/5/2022 1:33:32 AM CORP\stephanie
```
**Listing 763 - Using PsLoggedOn to see user logons at CLIENT74**

It appears that `CORP\jeffadmin` has an open session on `CLIENT74`, and `CORP\stephanie` is logged on via resource shares. This information is valuable, especially if we have administrative privileges on `CLIENT74`, as we could potentially steal `jeffadmin`'s credentials. However, it is best practice to continue our enumeration and provide a thorough analysis rather than pursuing a quick win.

## Enumeration Through Service Principal Names (SPNs)

So far, we have gathered significant information and are starting to see how things are connected within the domain. To wrap up our discussion on user enumeration, we will focus on Service Accounts, which may also be members of high-privileged groups.

### Understanding Service Accounts
Applications must be executed in the context of an operating system user. If a user launches an application, that user account defines the context. However, services launched by the system itself run in the context of a Service Account. Isolated applications can use predefined service accounts such as `LocalSystem`, `LocalService`, and `NetworkService`. For more complex applications, a domain user account may be used to provide the needed context while maintaining access to domain resources.

When applications like Exchange, MS SQL, or IIS are integrated into Active Directory (AD), a unique service instance identifier known as a Service Principal Name (SPN) associates a service with a specific service account in AD.

### Enumerating SPNs
We can obtain the IP address and port number of applications running on servers integrated with AD by enumerating all SPNs in the domain. This information is stored on the domain controller, and we can query it using tools like `setspn.exe`.

#### Example: Enumerating SPNs for `iis_service`
```powershell
c:\Tools>setspn -L iis_service
```
**Output:**
```
Registered ServicePrincipalNames for CN=iis_service,CN=Users,DC=corp,DC=com:
HTTP/web04.corp.com
HTTP/web04
HTTP/web04.corp.com:80
```
**Listing 764 - Listing SPN linked to a certain user account**

Another way to enumerate SPNs is to use PowerView to list all accounts in the domain and select the `samaccountname` and `serviceprincipalname` attributes.
```powershell
PS C:\Tools> Get-NetUser -SPN | select samaccountname,serviceprincipalname
```
**Output:**
```
samaccountname serviceprincipalname
-------------- --------------------
krbtgt kadmin/changepw
iis_service {HTTP/web04.corp.com, HTTP/web04, HTTP/web04.corp.com:80}
```
**Listing 765 - Listing the SPN accounts in the domain**

The `iis_service` account has an SPN set to `HTTP/web04.corp.com, HTTP/web04, HTTP/web04.corp.com:80`, indicating a web server. We can resolve `web04.corp.com` using `nslookup`.
```powershell
PS C:\Tools\> nslookup.exe web04.corp.com
```
**Output:**
```
Server: UnKnown
Address: 192.168.50.70
Name: web04.corp.com
Address: 192.168.50.72
```
**Listing 766 - Resolving the web04.corp.com name**

Browsing to this IP address reveals a website that requires a login. Since these types of accounts are used to run services, they typically have more privileges than regular domain user accounts. We will document that `iis_service` has a linked SPN for future reference.

## Enumerating Object Permissions

In this section, we will enumerate specific permissions associated with Active Directory objects. Each object in AD may have a set of permissions applied to it, defined by Access Control Entries (ACEs) that make up the Access Control List (ACL). Each ACE determines whether access to the object is allowed or denied.

### Key Permission Types
- **GenericAll**: Full permissions on the object.
- **GenericWrite**: Edit certain attributes on the object.
- **WriteOwner**: Change ownership of the object.
- **WriteDACL**: Edit ACEs applied to the object.
- **AllExtendedRights**: Change password, reset password, etc.
- **ForceChangePassword**: Password change for the object.
- **Self (Self-Membership)**: Add ourselves to a group.

**Listing 767 - AD permission types**

### Enumerating ACEs with PowerView
We can use `Get-ObjectAcl` to enumerate ACEs. Let's start by enumerating our own user to determine which ACEs are applied to it.
```powershell
PS C:\Tools> Get-ObjectAcl -Identity stephanie
```
**Output:**
```
ObjectDN : CN=stephanie,CN=Users,DC=corp,DC=com
ObjectSID : S-1-5-21-1987370270-658905905-1781884369-1104
ActiveDirectoryRights : ReadProperty
ObjectAceFlags : ObjectAceTypePresent
ObjectAceType : 4c164200-20c0-11d0-a768-00aa006e0529
InheritedObjectAceType : D00000000-0000-0000-0000-000000000000
BinaryLength : 56
AceQualifier : AccessAllowed
IsCallback : False
OpaqueLength : 0
AccessMask : 16
SecurityIdentifier : S-1-5-21-1987370270-658905905-1781884369-553
AceType : AccessAllowedObject
AceFlags : None
IsInherited : False
InheritanceFlags : None
PropagationFlags : None
AuditFlags : None
...
```
**Listing 768 - Running Get-ObjectAcl specifying our user**

To make sense of the SIDs, we can use `Convert-SidToName` to convert them to actual domain object names.
```powershell
PS C:\Tools> Convert-SidToName S-1-5-21-1987370270-658905905-1781884369-1104
CORP\stephanie
```
**Listing 769 - Converting the ObjectSID into name**

```powershell
PS C:\Tools> Convert-SidToName S-1-5-21-1987370270-658905905-1781884369-553
CORP\RAS and IAS Servers
```
**Listing 770 - Converting the SecurityIdentifier into name**

The `RAS and IAS Servers` group has `ReadProperty` access rights to our user, which is a common configuration in AD and likely won't provide an attack vector.

### Enumerating ACLs for the Management Department Group
Let's check if any users have `GenericAll` permissions on the `Management Department` group.
```powershell
PS C:\Tools> Get-ObjectAcl -Identity "Management Department" | ?{$_.ActiveDirectoryRights -eq "GenericAll"} | select SecurityIdentifier,ActiveDirectoryRights
```
**Output:**
```
SecurityIdentifier ActiveDirectoryRights
------------------ ---------------------
S-1-5-21-1987370270-658905905-1781884369-512 GenericAll
S-1-5-21-1987370270-658905905-1781884369-1104 GenericAll
S-1-5-32-548 GenericAll
S-1-5-18 GenericAll
S-1-5-21-1987370270-658905905-1781884369-519 GenericAll
```
**Listing 771 - Enumerating ACLs for the Management Group**

Converting the SIDs to actual names:
```powershell
PS C:\Tools> "S-1-5-21-1987370270-658905905-1781884369-512","S-1-5-21-1987370270-658905905-1781884369-1104","S-1-5-32-548","S-1-5-18","S-1-5-21-1987370270-658905905-1781884369-519" | Convert-SidToName
```
**Output:**
```
CORP\Domain Admins
CORP\stephanie
BUILTIN\Account Operators
Local System
CORP\Enterprise Admins
```
**Listing 772 - Converting all SIDs that have GenericAll permission on the Management Group**

The `Domain Admins` and `Enterprise Admins` groups having `GenericAll` permissions is expected. However, finding `stephanie` in this list is unusual, as a regular domain user should not have such high permissions. This may indicate a misconfiguration and provides a potential attack vector.

---

**PWK - Copyright Â© 2023 OffSec Services Limited. All rights reserved.**
**Made in Morocco**