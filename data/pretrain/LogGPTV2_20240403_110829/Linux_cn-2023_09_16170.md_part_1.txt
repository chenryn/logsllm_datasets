---
author: James Farrell
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2008
date: '2023-09-07 23:17:46'
editorchoice: false
excerpt: 以下是一个简单的编程项目，能够帮助你开始学习 Tcl/Tk。
fromurl: https://opensource.com/article/23/4/learn-tcltk-wish-simple-game
id: 16170
islctt: true
largepic: /data/attachment/album/202309/07/231710i7u72ttuzlt4thhr.jpg
permalink: /article-16170-1.html
pic: /data/attachment/album/202309/07/231710i7u72ttuzlt4thhr.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 以下是一个简单的编程项目，能够帮助你开始学习 Tcl/Tk。
tags:
- Tcl
- Tcl/Tk
- 猜数字
thumb: false
title: 通过这个简单的游戏学习 Tcl/Tk 和 Wish
titlepic: true
translator: ChatGPT
updated: '2023-09-07 23:17:46'
---
![](/data/attachment/album/202309/07/231710i7u72ttuzlt4thhr.jpg)
> 
> 以下是一个简单的编程项目，能够帮助你开始学习 Tcl/Tk。
> 
> 
> 
探索 Tcl/Tk 的基础构造，包括用户输入、输出、变量、条件评估、简单函数和基础事件驱动编程。
我写这篇文章的初衷源于我想更深入地利用基于 Tcl 的 Expect。这让我写下了以下两篇文章：[通过编写一个简单的游戏学习 Tcl](https://opensource.com/article/23/2/learn-tcl-writing-simple-game) 和 [通过编写一个简单的游戏学习 Expect](https://opensource.com/article/23/2/learn-expect-automate-simple-game)。
我进行了一些 [Ansible](https://www.redhat.com/en/technologies/management/ansible/what-is-ansible?intcmp=7013a000002qLH8AAM) 自动化工作，逐渐积累了一些本地脚本。有些脚本我频繁使用，以至于以下循环操作变得有些烦人：
* 打开终端
* 使用 `cd` 命令跳转至合适的目录
* 输入一条带有若干选项的长命令启动所需的自动化流程
我日常使用的是 macOS。实际上我更希望有一个菜单项或者一个图标，能够弹出一个简单的界面接受参数并执行我需要的操作，[这就像在 Linux 的 KDE 中一样](https://opensource.com/article/23/2/linux-kde-desktop-ansible)。
经典的 Tcl 类书籍都包含了关于流行的 Tk 扩展的文档。既然我已经深入研究了这个主题，我尝试着对其（即 `wish`）进行编程。
虽然我并非一名 GUI 或者前端开发者，但我发现 Tcl/Tk 脚本编写的方式相当直接易懂。我很高兴能重新审视这个 UNIX 历史的古老且稳定的部分，这种技术在现代平台上依然有用且可用。
### 安装 Tcl/Tk
对于 Linux 系统，你可以按照下面的方式安装：
```
$ sudo dnf install tcl
$ which wish
/bin/wish
```
而在 macOS 上，你可以通过 [Homebrew](https://opensource.com/article/20/6/homebrew-mac) 来安装最新版的 Tcl/Tk：
```
$ brew install tcl-tk
$ which wish
/usr/local/bin/wish
```
### 编程理念
许多编写游戏的教程都会介绍到典型的编程语言结构，如循环、条件判断、变量、函数和过程等等。
在此篇文章中，我想要介绍的是 [事件驱动编程](https://developers.redhat.com/topics/event-driven/all?intcmp=7013a000002qLH8AAM)。当你的程序使用事件驱动编程，它会进入一个特殊的内置循环，等待特定的事件发生。当这个特定的事件发生时，相应的代码就会被触发，产生预期的结果。
这些事件可以包括键盘输入、鼠标移动、点击按钮、定时器触发，甚至是任何你的电脑硬件能够识别的事件（可能来自特殊的设备）。你的程序中的代码决定了用户看到了什么，以及程序需要监听什么输入，当这些输入被接收后程序会怎么做，然后进入事件循环等待输入。
这篇文章的理念并没有脱离我之前的 Tcl 文章太远。这里最大的不同在于用 GUI 设置和用于处理用户输入的事件循环替代了循环结构。其他的不同则是 GUI 开发需要采取的各种方式来制作一个可用的用户界面。在采用 Tk GUI 开发的时候，你需要了解两个基础的概念： 部件   widget 和 几何管理器   geometry manager 。
部件是构成可视化元素的 UI 元素，通过这些元素用户可以与程序进行交互。这其中包括了按钮、文本区域、标签和文本输入框。部件还包括了一些选项选择，如菜单、复选框、单选按钮等。最后，部件也包括了其他的可视化元素，如边框和线性分隔符。
几何管理器在放置部件在显示窗口中的位置上扮演着至关重要的角色。有一些不同的几何管理器可以供你使用。在这篇文章中，我主要使用了 `grid` 几何来让部件在整齐的行中进行布局。我会在这篇文章的结尾地方解释一些几何管理器的不同之处。
### 用 wish 进行猜数字游戏
这个示例游戏代码与我其他文章中的示例有所不同，我将它分解为若干部分以方便解释。
首先创建一个基本的可执行脚本 `numgame.wish` ：
```
$ touch numgame.wish
$ chmod 755 numgame.wish
```
使用你喜欢的文本编辑器打开此文件，输入下列代码的第一部分：
```
#!/usr/bin/env wish
set LOW 1
set HIGH 100
set STATUS ""
set GUESS ""
set num [expr round(rand()*100)]
```
第一行定义了该脚本将通过 `wish` 执行。接下来，创建了几个全局变量。这里我使用全部大写字母定义全局变量，这些变量将绑定到跟踪这些值的窗口小部件（`LOW`、`HIGH`等等）。
全局变量 `num` 是游戏玩家要猜测的随机数值，这个值是通过 Tcl 的命令执行得到并保存到变量中的：
```
proc Validate {var} {
    if { [string is integer $var] } {
        return 1
    }