端口`2377`用于 Swarm v2 节点发现集群中的其他节点。
## 配置 Docker 主机
为了了解 TLS 配置在哪里，我们将通过关闭所有 Docker 主机的 TLS 来做一些练习。在这里关闭它也是为了激励读者通过自己调用来学习`swarm manage`命令是如何工作的。
我们有四个主机在端口`tcp/2376`上运行 Docker，并带有 TLS，因为 Docker 机器默认创建它们。我们必须重新配置它们，将守护端口更改为`tls/2375`并删除 TLS。因此，我们使用以下命令登录到它们中的每一个:
```
$ docker-machine ssh node0
```
然后，我们获得根权限:
```
$ sudo su -
```
并配置`boot2docker`，通过修改文件`/var/lib/boot2docker/profile`:
```
# cp /var/lib/boot2docker/profile /var/lib/boot2docker/profile-bak
# vi /var/lib/boot2docker/profile
```
我们删除带有 CACERT、SERVERKEY 和 SERVERCERT 的行，并将守护程序端口配置为`tcp/2375`和`DOCKER_TLS`到`no`。实际上，这将是我们的配置:
![Configuring the Docker hosts](img/image_01_016.jpg)
从 SSH 会话注销后，重新启动机器:
```
$ docker-machine restart node0
```
Docker 现在在港口`tcp/2375`上运行，没有安全保障。您可以使用以下命令检查这一点:
```
$ docker-machine ssh node0 ps aux | grep docker
 1127 root  /usr/local/bin/docker daemon -D -g /var/lib/docker -H 
     unix:// -H tcp://0.0.0.0:2375 --label provider=virtualbox -s aufs
```
最后，在您的本地桌面计算机上，取消设置`DOCKER_TLS_VERIFY`并重新导出`DOCKER_HOST`，以便在没有 TLS 的情况下使用监听`tcp/2375`的守护程序:
```
$ unset DOCKER_TLS_VERIFY
$ export DOCKER_HOST="tcp://192.168.99.103:2375" 
```
我们必须为第一个 Swarm 中的四个节点重复这些步骤。
## 启动 DockerSwarm
要开始使用 Swarm v1(毫不奇怪)，您必须从 Docker 集线器中拉出`swarm`映像。打开四个终端，在第一个终端、源节点 0 ( `docker-machine env node0`)和第二个终端`node1`中为每台机器的环境变量添加源，并将`env`变量复制并粘贴到外壳中，以此类推，在完成上述更改标准端口和禁用 TLS 的步骤后，在每台终端上执行以下操作:
```
$ docker pull swarm
```
![Starting Docker Swarm](img/image_01_017.jpg)
对于第一个例子，我们将不使用发现服务，而是使用最简单的机制，例如`nodes://`。借助`nodes://`，人工连接 Swarm 集群节点，形成一个节点网格。操作员只需定义一个节点 IP 列表和守护程序端口，用逗号分隔，如图所示:
```
nodes://192.168.99.101:2375,192.168.99.102:2375,192.168.99.103:2375,192.168.99.107:2375
```
要使用 swarm，只需运行带有一些参数的 Swarm 容器。要在线显示帮助，请键入:
```
$ docker run swarm --help
```
![Starting Docker Swarm](img/image_01_018.jpg)
如您所见，Swarm 基本上有四个命令:
*   **创建**用于创建具有发现服务的集群，例如`token://`
*   **列表**显示集群节点列表
*   **管理**允许您操作群集群
*   **Join** 结合发现服务，用于将新节点加入现有集群
现在，我们将使用`manage`命令。这是带有大部分选项的命令(可以通过发出`docker run swarm manage --help`来调查)。我们现在仅限于连接节点。以下是每个节点上的策略:
1.  通过 swarm 容器公开 Swarm 服务。
2.  在`daemon` ( `-d`)模式下运行该容器。
3.  将标准 Swarm 端口`tcp/3376`转发到内部(容器上)端口`tcp/2375`。
4.  指定集群的主机列表部分，用`nodes://` -每个主机必须是一对`IP:port`，其中端口是 Docker 引擎端口(`tcp/2375`)。
因此，在连接到每台机器的每个终端中，执行以下操作:
```
$ docker run \
-d \
-p 3376:2375 \
swarm manage \ 
 nodes://192.168.99.101:2375,192.168.99.102:2375,
    192.168.99.103:2375,192.168.99.107:2375
```
### 类型
使用`nodes://`机制时，您可以使用类似 Ansible 的主机范围模式，因此请压缩三个连续 IP 的语法，如节点:`//192.168.99.101:2375,192.168.99.102:2375,192.168.99.103:2375` In nodes: `//192.168.99.[101:103]:2375`
现在，作为下一步，我们将在开始使用运行容器之前连接到它并检查它的信息。为了方便，打开一个新的终端。我们现在不再连接到其中一个节点上的 Docker 引擎，而是连接到 Docker Swarm。所以我们将连接到`tcp/3376`而不再连接到`tcp/2375`。为了详细展示我们正在做的事情，让我们从寻找`node0`变量开始:
```
$ docker-machine env node0
```
如您所知，复制并粘贴评估行，并使用以下命令检查导出了哪些 shell 变量:
```
$ export | grep DOCKER_
```
我们现在需要做以下工作:
1.  将`DOCKER_HOST`改为连接到 Swarm 端口`tcp/3376`，而不是发动机`tcp/2375`
2.  禁用`DOCKER_TLS_VERIFY`。
3.  Disable `DOCKER_CERT_PATH`.
    ![Starting Docker Swarm](img/image_01_019.jpg)
您应该有一个类似这样的配置:
![Starting Docker Swarm](img/image_01_020.jpg)
如果我们现在在`3376`连接到 Docker 群，并显示一些信息，我们会看到我们正在运行 swarm:
![Starting Docker Swarm](img/image_01_021.jpg)
恭喜你！你刚刚用 Swarm 启动了你的第一个 Docker 集群。我们可以看到，除了四个群之外，我们的集群上仍然没有运行容器，但是服务器版本是 swarm/1.2.3，调度策略是分散的，最重要的是，我们的群中有四个健康的节点(每个 swarm 节点的详细信息如下)。
此外，您还可以获得一些关于此 Swarm 集群的调度程序行为的额外信息:
```
Strategy: spread
Filters: health, port, containerslots, dependency, affinity, 
    constraint
```
分散调度策略意味着 Swarm 将尝试在利用率较低的主机上放置容器，并且在创建容器时列出的过滤器可用，因此您可以决定手动建议一些选项。例如，您可能希望让您的 Galera 集群容器在地理上靠近但在不同的主机上。
但是，这个蜂群有多大？您可以在输出的最后看到:
![Starting Docker Swarm](img/image_01_022.jpg)
这意味着在这个小小的 Swarm 上，您拥有这些资源的全部可用性:四个 CPU 和 4GB 内存。这正是我们所期望的，通过合并 4 个 VirtualBox 主机的计算资源，每个主机有一个 CPU 和 1GB 的内存。
# 测试你的蜂群
现在我们有了 Swarm 集群，是时候开始使用它了。我们将展示传播策略算法将决定将容器放置到负载较低的主机上。在这个例子中，这非常简单，因为我们从四个空节点开始。因此，我们连接到 Swarm，Swarm 会在主机上放置容器。我们启动一个 nginx 容器，将其端口 tcp/80 映射到主机(机器)端口`tcp/80`。
```
$ docker run -d -p 80:80 nginx
2c049db55f9b093d19d575704c28ff57c4a7a1fb1937bd1c20a40cb538d7b75c
```
在这个例子中，我们看到 Swarm 调度器决定将这个容器放在`node1`上:
![Test your Swarm cluster](img/image_01_023.jpg)
因为我们必须将一个端口`tcp/80`绑定到任何主机，所以我们只有四次机会，四个不同主机上的四个容器。让我们创建新的 nginx 容器，看看会发生什么:
```
$ docker run -d -p 80:80 nginx
577b06d592196c34ebff76072642135266f773010402ad3c1c724a0908a6997f
$ docker run -d -p 80:80 nginx
9fabe94b05f59d01dd1b6b417f48155fc2aab66d278a722855d3facc5fd7f831
$ docker run -d -p 80:80 nginx
38b44d8df70f4375eb6b76a37096f207986f325cc7a4577109ed59a771e6a66d
```
现在，我们在 4 台 Swarm 主机上放置了 4 个 nginx 容器:
![Test your Swarm cluster](img/image_01_024.jpg)
现在我们尝试创建一个新的 nginx: