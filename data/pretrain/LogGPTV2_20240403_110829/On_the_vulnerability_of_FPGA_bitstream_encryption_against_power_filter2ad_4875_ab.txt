high computational power. Obviously, the vast complexity
of this conﬁguration process cannot be managed manually,
thus software tools are required for the design of an ap-
plication. The tools ultimately generate the conﬁguration
information, i.e., the bitstream, for the FPGA.
The design ﬂow for reconﬁgurable hardware starts with
expressing the function to be realized by means of a high-
level hardware description language (HDL) such as VHDL or
Verilog. The FPGA manufacturers provide integrated devel-
opment environments for their products, e.g., the Xilinx ISE
Design Suite [3]. They allow HDL descriptions to be synthe-
sized into a schematic representing the internal wiring of the
corresponding FPGA, commonly called netlist. The synthe-
sized netlist can be simulated on the development PC for
debugging the implementation. Finally, the netlist is trans-
lated into a low-level circuit description, the bitstream, that
speciﬁes the exact content of each slice, each programmable
switch, and every other conﬁgurable component inside the
FPGA. Conﬁguring the target device with this bitstream
uniquely sets the initial state of the whole circuitry to real-
ize the designed function.
2.2 Device Under Attack: Virtex-II Pro
As the target for our analysis we opted for a Virtex-II
Pro XC2VP7 FPGA. According to the data sheet [33] its
silicon die consists of nine metal layers manufactured in a
130 nm process with 90 nm high-speed transistors, allowing
for designs with clock frequencies up to 600 MHz for inter-
nal components. Amongst others, the FPGA provides more
than 11, 000 internal registers and LUTs and an embedded
PowerPC 401 processor core, wired to the fabric, in case
a general purpose processor is needed alongside application
speciﬁc hardware. For conﬁguring all of its internal circuitry
the FPGA requires a bitstream consisting of 560, 700 bytes.
During our analysis, the power supply pins of the FPGA
are of special interest, as they form the entry point for the
side channel. The pins are divided in three main groups
according to the parts of the device they are providing en-
ergy to:V CCIN T for a 1.5 V supply of the internal core logic,
V CCAU X for a 3.3 V supply of auxiliary circuits, and V CCO
for a 3.3 V supply of the input and output buﬀers. Note,
that the 1.5 V of the core voltage V CCIN T can be distin-
guished from the other 3.3 V supply voltages and can hence
be easily identiﬁed on the unknown printed circuit board of
a real-world product.
Both Xilinx and Altera FPGAs rely on volatile static ran-
dom access memory (SRAM) for holding the conﬁguration
information and, as a consequence, lose it when the power is
switched oﬀ. In order to keep the crucial cryptographic key,
in Xilinx products a lithium battery providing 1.0–3.6 V has
to be connected to the V CCBatt pin. The battery supplies
the SRAM-based secret key storage used to decrypt the en-
crypted bitstream and provides the basis to use Virtex-II Pro
devices in FIPS 140-2 Level 4 security devices, the highest
security standard indicated by NIST. The standard man-
dates that all cryptographic keys must be instantly zeroed
if physical tamper actions are detected on the secure device.
113In case the battery is disconnected and the FPGA is not
powered up the keys are instantly ﬂushed away, forcing the
customer to return the device to the producer for re-keying.
While power is applied to the V CCAU X pin of a Virtex-II
Pro, the battery is not required to buﬀer the key storage
and can be replaced [31].
2.2.1 Conﬁguration Process and Protocols
As stated above, the conﬁguration of the FPGA is com-
pletely erased every time the FPGA is powered oﬀ. It is thus
necessary to reprogram the device after every boot, even
when it is deployed in the ﬁeld. Xilinx provides ﬁve diﬀerent
conﬁguration protocols to conﬁgure the device, namely Mas-
ter or Slave Serial mode, Master or Slave SelectMAP mode
and IEEE-1149.1-2001 standard JTAG boundary scanning
mode [4]. The ﬁrst two modes input the bitstream into the
device, one bit per clock cycle, through a speciﬁc pin which
serves as a data-in line. The SelectMAP modes represent an
evolution of the simple serial mode as they are able to send a
byte of the bitstream at a time, thus decreasing signiﬁcantly
the time needed for conﬁguration. The JTAG mode allows
to input the whole bitstream into the device considering the
internal conﬁguration memory as one of the data registers
of a standard JTAG chain. It is thus possible to insert the
conﬁguration information one bit at a time via JTAG, tak-
ing proper care of setting all the other devices on the JTAG
chain into bypass mode.
Due to the widespread adoption and standardization of
the JTAG protocol, we chose the JTAG interface of the
FPGA for supplying the bitstream during our attack. The
vast majority of commercial products retain the JTAG line
contacts for post-production testing, hence this port is also
the most suitable for real-world attacks. The JTAG interface
is based on four lines: two for data input and output (TDI
and TDO), one to supply the clock to the whole JTAG chain
(TCK) and one to supply commands to the ﬁnite state ma-
chine implementing the JTAG port on every device (TMS).
All the modules belonging to a JTAG chain, e.g., the conﬁg-
uration memory and the FPGA itself, have their TDI and
TDO port daisy chained together and form a single loop.
The number of devices connected to the JTAG testing chain
and the order in which they are linked to the JTAG loop
can be easily reverse-engineered [26].
2.2.2 Bitstream Encryption in the Virtex-II
The bitstream encryption feature [19] enables to conﬁgure
the Virtex-II Pro FPGA with a bitstream that is encrypted
by means of the symmetric-key cipher triple DES [32]. Triple
DES is a block cipher constructed by chaining three sub-
sequent executions of the Data Encryption Standard [23]
(DES) by using either two or three diﬀerent DES keys. In or-
der to provide backwards compatibility, the three executions
of DES are actually an encryption-decryption-encryption pat-
tern: in this way, if a the same key is employed for all three
cipher instances, the triple DES is eﬀectively reduced to a
single DES. The DES cipher encrypts blocks of 64 bits em-
ploying a 56-bit key, hence the possible key lengths of triple
DES are 112 or 168 bits. Whilst single DES is vulnerable
to brute-force attacks due to its short key length, e.g., us-
ing the COPACOBANA code breaking machine [17] or with
commodity hardware such as GPUs [6], there are no theo-
retical or brute-force attacks against triple DES known with
any realistic chance of success. Hence, neither mathemati-
cal cryptanalysis nor an exhaustive search can endanger the
secrecy of a design protected by the bitstream encryption.
Since the bitstream is processed by the cipher in blocks of
64 bits, Cipher Block Chaining (CBC) [22] is implemented
to combine subsequent blocks of the bitstream. During a
decryption, this mode of operation deﬁnes that the cipher-
text of one block should be added via a bitwise XOR to
the output of the following triple DES decryption to obtain
the plaintext. Since the ﬁrst block to be decrypted does
not have a predecessor, a 64-bit initialization vector (IV) is
used to mask it. This IV may be publicly known and can
hence be transmitted in plain without loss of security. The
analyzed FPGA can store up to six single DES encryption
keys, which can be independently marked for use in either
the ﬁrst, the second or the third DES run of the triple DES.
This feature allows for either 3 key sets (for 2-key standard
triple DES) or 2 key sets (for use with 3-key triple DES)
and enables the manufacturer to update the bitstream even
if a key set has been compromised. Xilinx states that there
is no read port for the key storage, except for the one inter-
nally employed by the decryption engine [32]. The only way
to program the keys into the device is through the JTAG
programming mode, although no details of the key entering
mode are provided by Xilinx in the technical speciﬁcation.
In order to avoid incorrect conﬁguration of the FPGA due
to a faulty decrypted bitstream and the subsequent possible
damage to the device, Xilinx states that the FPGA performs
a CRC check on the decrypted bitstream. For this purpose,
a CRC16 standard checksum embedded in the conﬁguration
ﬁle is being used. In fact, there is no other authentication
scheme implemented in the bitstream (encryption) mecha-
nism of Virtex-II.
2.3 Power Analysis and Power Models
The power consumption of modern CMOS-based devices
mostly depends on the ongoing switching activity. It is pos-
sible to exploit this relation in order to gain insights into
the values being involved in a computation. For power anal-
ysis, the power dissipation is measured during the regular
functioning of a secure device in order to infer the secret
keys. The literature divides this class of attacks into two
general families, “simple” (SPA) and “diﬀerential” (DPA) at-
tacks [18]. SPA attacks involve visually interpreting power
consumption measurements as a function of time in order
to detect data-dependent properties between the computed
value and the power consumption, in precise intervals of
time. This methodology assumes that it is possible to dis-
cern a subset of keys thanks to their peculiar consumption
behavior, e.g., to distinguish a square and multiply step in a
modular exponentiation from a simple squaring. In public-
key algorithms such as RSA this can lead to a complete
leakage of the secret key. SPA is rarely applicable against
symmetric ciphers, as the one used in our target device.
DPA attacks rely on building a power model of a computing
circuit, employing the input values to the circuit as inputs
to the model, and a set of possible values of the unknown
key as a parameter. To verify a correct key hypothesis, the
attacker correlates the predicted values with the actual mea-
surements from the device under attack through a statistical
tool of her choice. Commonly, for a DPA it is assumed that
the values of the measurement set and the hypothesis set
are normally distributed random variables with mean µ and
standard deviation σ, where µ is the mean consumption of
114the circuit for a precise key value at a speciﬁc time instant.
Since the dynamic power consumption of a device is caused
by the switching activity of the logic gates [16], a proper
dynamic consumption model tries to express the power con-
sumption depending on the intensity of the switching activ-
ity. This switching activity may be caused, e.g., by the com-
binational logic computing the result of a Boolean function,
or by a latch storing a single bit value. A ﬁrst order approxi-
mation of the switching activity of many circuits is provided
by the Hamming weight (HW) of the input value. This re-
sults in a quite approximate model and has the advantage
of requiring no precise knowledge about the implementation,
since only the data processed at one instant in time has to be
predicted. The switching activity induced by a latch storing
a value is often better modeled by the Hamming distance
(HD) between the former value stored by the latch and the
new one. A latch toggles internally (and thereby consumes
a noticeable amounts of energy) only if the previous value
being held is diﬀerent from the new one to be memorized,
i.e., when their HD is 1 [11]. Consequentially, the model re-
quires to predict two intermediate values, i.e., those stored
in a register before and after the targeted operation. This
requires some additional knowledge about the implementa-
tion, compared to a HW model.
Once a power model has been chosen, the attacker pre-
dicts an intermediate value depending on both a known in-
put value and a part of the secret key. She then computes a
set of hypothetical power consumption values, one for each
of the possible values taken by the part of the secret key.
The size of the part of the secret key hypothesized during
one step of the attack is a trade-oﬀ between building an ac-
curate model of the power consumption, which requires more
key bits to be considered in a single time, and the computa-
tional complexity involved in computing a power hypothesis
for every possible value which may be taken by the key por-
tion. However, since attacking one key portion is performed
independently from attacking the others, the attacker is free
to divide the whole key in portions that are small enough
to be processed. To recover the whole key, multiple attacks
are performed (on the same set of measurements). After
collecting a large number of measurements during the cryp-
tographic operation to be attacked, the adversary employs
a statistical tool to compare the hypothesized power values
with those that have been measured, in order to infer the
correct value of the key part. The typical methodology to
correlate the predicted and actual power consumption of the
circuit is to employ Pearson’s linear correlation coeﬃcient:
if the model correctly predicts the consumption of the cir-
cuit, the linear correlation among the synthetic values and
the recorded ones will be close to 1, while it is expected for a
wrong model to have negligible correlation values. Conduct-
ing the correlation analysis time-wise, i.e., for each time in-
stance of the consumption values recorded from the circuit,
gives the attacker additional information about the exact
moment when a side-channel leakage occurs in the power
traces: the values of the correlation coeﬃcient of the correct
key hypothesis spike only in the time interval in which the
operation is executed.
2.3.1 Processing the Measurements
For a successful power analysis attack the collected power
traces need to fulﬁll a number of requirements. The ﬁrst
and foremost, due to the time-wise nature of the analysis, it
is fundamental for obtaining correct results in the analysis,
that the traces are perfectly synchronized. Due to either
instrumental issues or the fact that the instant of the be-
ginning of a sensitive operation is not always in full control
of the attacker, it can be necessary to process the obtained
traces in order to compensate for the possible phase shifts.
The problem of realignment can be solved through choosing
a single trace as a reference and detecting the most likely
time delay that needs to be applied to each other measure-
ment in order to achieve correct synchronization. Since the
measurements are taken in very comparable situations (i.e.,
encryptions of diﬀerent plaintexts with the same algorithm),
the most natural ﬁgure of merit to detect the appropriate
time delays is cross-correlation. Cross-correlation is a mea-
sure of the similarity of two signals as a function of a time-
lag applied to one of them. The time delay maximizing the
cross-correlation between the reference and the current trace
is taken as the optimal time delay to achieve alignment.
A further key point for a successful power analysis is min-
imizing the amount of noise in the traces. Regardless of the
quality of the measurement setup the measurements always
contain noise, since the traces represent an aggregate mea-
surement of the power consumption of the entire chip and
its environment. Digital signal processing techniques can
be employed to separate the side-channel leakage from the
unwanted signals and thereby extract only the relevant in-
formation. Their usage turns out to be of crucial importance
when dealing with large digital components as in [9]. Proper
signal ﬁltering can also be useful to evict any components of
the measured trace which are not pertaining to the hardware
under attack, provided they pertain to diﬀerent harmonic
components [10], removing even large amounts of unrelated
signal.
3. ATTACKING A BLACK BOX
This section will provide a detailed description of the steps
performed to successfully reverse engineer and break the pro-
tection scheme of Xilinx’s Virtex-II Pro. The ﬁrst subsec-
tion illustrates the implementation details of the encrypted