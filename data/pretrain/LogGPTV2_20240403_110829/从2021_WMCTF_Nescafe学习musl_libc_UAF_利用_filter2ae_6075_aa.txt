# 从2021 WMCTF Nescafe学习musl libc UAF 利用
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
musl libc是一种轻量级的C标准动态链接库，用来替代日益臃肿的glibc，Alpine Linux，Openwrt以及Gentoo等都是用musl
libc作为默认的libc库。目前基于musl libc出的pwn题目也是越来越多。这几天参加了2021 WMCTF就遇到了一个基于musl libc
1.1.24的堆UAF漏洞利用的题目。
## 分析
首先我们看一下给出的libc.so文件
    musl libc (x86_64)
    Version 1.1.24
    Dynamic Program Loader
    Usage: ./libc.so [options] [--] pathname [args]
可以看到这里的这个程序是基于musl libc 1.1.24版本运行的。musl libc 的源代码可以从官网上下载。
我们首先分析一下给出的二进制程序。这里的程序逻辑很简单就是一个简单的菜单题目
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      init();
      welcome(argc, argv);
      while ( 1 )
      {
        menu();
        switch ( (unsigned int)get_int() )
        {
          case 1u:
            create();
            break;
          case 2u:
            del();
            break;
          case 3u:
            show();
            break;
          case 4u:
            edit();
            break;
          case 5u:
            exit(0);
          default:
            puts("Invalid choice");
            break;
        }
      }
    }
在init函数中开启了沙箱。
    line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x05 0xc000003e  if (A != ARCH_X86_64) goto 0007
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x00 0x01 0x40000000  if (A  5 )
      {
        puts("Invalid idx");
        exit(0);
      }
      v0 = noteList[v2];
      if ( v0 )
      {
        free((void *)noteList[v2]);
        LODWORD(v0) = puts("Done");
      }
      return v0;
    }
也就是根据我们给出的index的值来释放对应的堆块，可以看到这里在释放堆块之后并没有清空数组中的堆块指针导致这里存在一个UAF漏洞。show函数就是根据我们指定的index的值来进行堆块的内容输出，但是这里的show函数只能使用一次。edit函数则是根据我们指定的index向对应的堆块中写入最多0x200大小的内容。
## 漏洞利用
我们现在拥有了一个UAF的漏洞，那么这个漏洞应该怎么利用呢，这里首先我们需要想了解一下musl
libc中堆空间的分配机制，可以参考下面这篇文章讲的很是详细。
[从一次 CTF 出题谈 musl libc 堆漏洞利用](https://www.anquanke.com/post/id/202253#h2-4)
这里简单的说一下，64位下musl
libc中堆块的大小是0x20对齐的，也就是最小的堆块是0x20，然后是0x40。并且所有的空闲堆块都是通过类似于small
bin的双向链表来进行组织的。并且和glibc不同的是，musl
libc中存在一个静态堆内存，也就是将程序和libc库的空闲内存划分为堆内存，这两块的内存空间是一开始就加入到双向链表之中的。如下
    pwndbg> vmmap
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x555555400000     0x555555402000 r-xp     2000 0      /root/work/ques/2021WMCTF/work/Nescafe/pwn_debug
        0x555555601000     0x555555602000 r--p     1000 1000   /root/work/ques/2021WMCTF/work/Nescafe/pwn_debug
        0x555555602000     0x555555603000 rw-p     1000 2000   /root/work/ques/2021WMCTF/work/Nescafe/pwn_debug
        0x7ffff7d69000     0x7ffff7dfb000 r-xp    92000 0      /usr/lib/x86_64-linux-musl/libc.so
        0x7ffff7ff4000     0x7ffff7ff8000 r--p     4000 0      [vvar]
        0x7ffff7ff8000     0x7ffff7ffa000 r-xp     2000 0      [vdso]
        0x7ffff7ffa000     0x7ffff7ffb000 r--p     1000 91000  /usr/lib/x86_64-linux-musl/libc.so
        0x7ffff7ffb000     0x7ffff7ffc000 rw-p     1000 92000  /usr/lib/x86_64-linux-musl/libc.so
        0x7ffff7ffc000     0x7ffff7fff000 rw-p     3000 0
        0x7ffffffde000     0x7ffffffff000 rw-p    21000 0      [stack]
            0xffffffffff600000 0xffffffffff601000 r-xp     1000 0      [vsyscall]
    pwndbg> p mal.bins
    $1 = {{
        lock = {0, 0},
        head = 0x0,
        tail = 0x0
      } , {
        lock = {0, 0},
        head = 0x7ffff7ffe3b0,
        tail = 0x7ffff7ffe3b0
      }, {
        lock = {0, 0},
        head = 0x555555602070,
        tail = 0x555555602070
      }, {
        lock = {0, 0},
        head = 0x0,
        tail = 0x0
      } }
也就是说如果我们知道了起始的一个堆块的地址，那么我们就有可能知道libc的基地址或者是程序的基地址，如果我们知道了程序的基地址或者libc的基地址，那么我们也能计算出堆块的地址。从堆块的组织结构上来看，我们也能猜测的到，当进行内存分配的时候libc肯定是将堆块从链表中卸下，也就是一个类似于unlink的操作，不过在musl
libc中这个函数是unbin函数，我们看一下这个函数。
    static void unbin(struct chunk *c, int i)
    {
        if (c->prev == c->next)
            a_and_64(&mal.binmap, ~(1ULLprev->next = c->next;
        c->next->prev = c->prev;
        c->csize |= C_INUSE;
        NEXT_CHUNK(c)->psize |= C_INUSE;
    }
这里的这个bitmap就是用来表示所有的bins链表是否为空的位图，这里可以看到如果prev和next指针相同的话，那么就会清空位图，表示这个链表中没有数据了。并且为了提高执行速度，在进行unlink的时候没有对next和prev指针进行检查。
## 漏洞利用
前面我们说到，程序存在一个UAF的漏洞，并且通过堆malloc的源码进行分析，这里在unlink的时候没有对next和prev指针进行检查，导致我们可以覆写这两个指针，在进行unlink的时候实现一个任意地址写的操作。由于在musl
libc中没有像glibc中那样的malloc_hook这种方便的函数指针的改写，一般在这里用到的是FSOP即覆写FILE结构体中的某些指针来劫持控制流。我们看一下这里的exit函数
    _Noreturn void exit(int code)
    {
        __funcs_on_exit();
        __libc_exit_fini();
        __stdio_exit();
        _Exit(code);
    }
    void __stdio_exit(void)
    {
        FILE *f;
        for (f=*__ofl_lock(); f; f=f->next) close_file(f);
        close_file(__stdin_used);
        close_file(__stdout_used);
        close_file(__stderr_used);
    }
可以看到这里存在一个`__stdio_exit`