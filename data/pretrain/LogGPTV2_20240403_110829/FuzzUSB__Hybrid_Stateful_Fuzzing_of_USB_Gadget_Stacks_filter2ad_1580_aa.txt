title:FuzzUSB: Hybrid Stateful Fuzzing of USB Gadget Stacks
author:Kyungtae Kim and
Taegyu Kim and
Ertza Warraich and
Byoungyoung Lee and
Kevin R. B. Butler and
Antonio Bianchi and
Dave Jing Tian
3
9
5
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
FUZZUSB: Hybrid Stateful Fuzzing of USB Gadget
Stacks
Kyungtae Kim†, Taegyu Kim§, Ertza Warraich†, Byoungyoung Lee¶,
Kevin R. B. Butler‡, Antonio Bianchi†, Dave (Jing) Tian†
†Purdue University, §The Pennsylvania State University, ¶Seoul National University, ‡University of Florida
†{kim1798,ewarraic,antoniob,daveti}@purdue.edu, §PI:EMAIL, ¶PI:EMAIL, ‡PI:EMAIL
Abstract—
Universal Serial Bus (USB) is the de facto protocol supported
by peripherals and mobile devices, such as USB thumb drives
and smart phones. For many devices, USB Type-C ports are
the primary interface for charging, file transfer, audio, video,
etc. Accordingly, attackers have exploited different vulnerabilities
within USB stacks, compromising host machines via BadUSB
attacks or jailbreaking iPhones from USB connections. While
there exist fuzzing frameworks dedicated to USB vulnerability
discovery, all of them focus on USB host stacks and ignore
USB gadget stacks, which enable all the features within modern
peripherals and smart devices.
In this paper, we propose FUZZUSB, the first fuzzing frame-
work for the USB gadget stack within commodity OS kernels,
leveraging static analysis, symbolic execution, and stateful fuzzing.
FUZZUSB combines static analysis and symbolic execution to
extract internal state machines from USB gadget drivers, and uses
them to achieve state-guided fuzzing through multi-channel in-
puts. We have implemented FUZZUSB upon the syzkaller kernel
fuzzer and applied it to the most recent mainline Linux, Android,
and FreeBSD kernels. As a result, we have found 34 previously
unknown bugs within the Linux and Android kernels, and opened
8 CVEs. Furthermore, compared to the baseline, FUZZUSB has
also demonstrated different improvements, including 3× higher
code coverage, 50× improved bug-finding efficiency for Linux
USB gadget stacks, 2× higher code coverage for FreeBSD USB
gadget stacks, and reproducing known bugs that could not be
detected by the baseline fuzzers. We believe FUZZUSB provides
developers a powerful tool to thwart USB-related vulnerabilities
within modern devices and complete the current USB fuzzing
scope.
I. INTRODUCTION
Universal Serial Bus (USB) [1] is the de facto protocol for
a wide range of peripheral devices and smart devices such
as mice, keyboards, external Flash/SSD storages, GPU docks,
smart phones, tablets, etc. With the increasing adoption of
USB Type-C [2], we have seen laptops, smart phones, and
watches with only USB Type-C ports equipped for charging,
file transfer, audio, video, etc. While the prevalence and
versatility of USB have made our daily life convenient, it
has also attracted attackers seeking to exploit vulnerabilities
within the USB ecosystem. Traditional USB attacks use USB
storage devices to carry malware and break into the air-gap
environment, e.g., Stuxnet [3]. Modern USB attacks target
flaws within the USB specifications and stack implementations,
including injecting malicious USB functionality into USB
device firmware to compromise host machines in BadUSB
attacks [4] and exploiting USB connections to unlock screens
in Android [5] or jailbreak iPhones [6].
Meanwhile, fuzzing has become a popular runtime testing
method, given its effective bug-finding capabilities. Fuzzing
has been used successfully in various domains [7–13] to reveal
large numbers of bugs. For instance, a number of fuzzers have
been proposed for the USB domain, ranging from hardware
fuzzers to pure software-based fuzzers [14–19]. These tools
have already helped detect real-world USB vulnerabilities. For
example, the state-of-the-art kernel fuzzer syzkaller has been
extended to support USB fuzzing, and found over 100 bugs
within the Linux kernel USB subsystem [20].
Currently, all existing USB fuzzing efforts assume that threats
stem from malicious USB peripherals, and therefore focus on
defending host machines from peripheral-based attacks by
fuzzing the USB host stack. However, modern devices such
as smart phones and tablets often contain another USB stack –
the USB gadget stack, which is used to support well-known
functionalities including charging, mass storage, tethering,
MIDI, PTP/MTP, etc. For instance, the Linux USB gadget
stack is used to support billions of embedded systems and
Android devices. Unfortunately, no existing fuzzing framework
is able to detect vulnerabilities within the USB gadget stack.
In addition, existing works do not fully consider the state-
fulness and limit input space of the USB protocol (i.e., single-
channel fuzzing for USB host stacks). As a result, existing
works either suffer from detecting only shallow bugs without
being able to find deeper bugs (e.g., data communication only
occurring after USB enumeration) [17, 18] or require significant
manual efforts to enable stateful fuzzing [16]. For this reason,
most of the USB bugs (e.g., reported by syzkaller) are within
driver initialization functions rather than getting into the core
USB logic [14, 20]. While syzkaller can fuzz many different
USB host drivers (by testing different vendor IDs and product
IDs), it does not try to explore the different states a specific
driver can reach. Consequently, the inputs it produces are
unlikely to reach deep code locations related to a driver’s core
logic.
To address the limitations of existing USB fuzzing ap-
proaches, in this paper, we propose FUZZUSB, the first stateful
USB fuzzer targeting the Linux and FreeBSD USB gadget
© 2022, Kyungtae Kim. Under license to IEEE.
DOI 10.1109/SP46214.2022.00037
2212
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:18 UTC from IEEE Xplore.  Restrictions apply. 
stacks. Unlike typical USB host fuzzers that mainly accept
mutation inputs from USB peripherals, FUZZUSB enables
multi-channel input mutations to reach different parts of USB
gadget code based on the statefulness of USB communications.
Furthermore, we consider the stateful behavior of different
USB gadget functionality, For that, FUZZUSB leverages
static analysis and symbolic execution to extract internal state
machines of each USB gadget driver and uses them to guide
fuzzing, unlike the previous work which simply relies on
selective symbolic execution to guide fuzzing [12]. Furthermore,
FUZZUSB allows for state coverage and transition coverage as
feedback, in addition to the classic code coverage, as well as
different mutation rules to support different fuzzing strategies.
We have implemented FUZZUSB by rearchitecting and
customizing syzkaller [16], evaluated it on the latest Linux,
Android, and FreeBSD kernels, and discovered 34 previously
unknown vulnerabilities with 8 CVEs assigned. Compared
to the baseline gadget fuzzer we implemented following a
straw-man approach without multi-channel input mutation or
state awareness, FUZZUSB exhibits multiple improvements
of USB fuzzing, including 3× higher code coverage, 50×
improved bug-finding efficiency for Linux gadget stacks, 2×
improved bug-finding efficiency for FreeBSD gadget stacks,
and reproducing known bugs that could not be detected by
the baseline fuzzers. We have reported all our findings to the
corresponding parties, and open-source FUZZUSB to facilitate
USB security research in the community [21].
The key contributions of this paper are as follows.
• Unlike exiting USB fuzzing tools, FUZZUSB is the first
USB fuzzing framework targeting the USB gadget stack,
supporting both multi-channel input mutations and state-
guided fuzzing.
• We combine both static analysis and symbolic execution
to design an algorithm to extract internal state machines
from different USB gadget drivers automatically, which
are used by FUZZUSB to achieve stateful fuzzing.
• We have applied FUZZUSB to the most recent Linux
kernel and Android kernels and discovered 34 previously
unknown vulnerabilities with 8 CVEs assigned. Compared
with the baseline, FUZZUSB has demonstrated multiple
improvements of USB fuzzing, including 3× higher code
coverage, 50× improved bug-finding efficiency for Linux
gadget stacks, 2× improved bug-finding efficiency for
FreeBSD gadget stacks, and reproducing known bugs that
could not be detected by the baseline fuzzers.
II. BACKGROUND
USB is a master-slave protocol where a USB host connects
with at least one USB peripheral. A host usually refers to a
desktop or a laptop in the master role and controlling connected
peripherals. A peripheral could be a USB keyboard, a USB
thumb drive, or even an Android phone, acting in the slave
role within the USB communication and accepting a host’s
commands. Although supporting the same USB specifications,
a USB stack implementation within a host is different from
the one within a peripheral. The former is called the USB host
stack, and the latter is named the USB gadget stack.1
Compared to the typical USB peripherals, USB smart
devices (such as smartphones and tablets) are usually equipped
with USB device controllers having either the On-The-Go
(OTG) [22] or the Dual-Role-Device (DRD) [23] capabilities.
These features enable them to behave as both a USB host
and a USB peripheral depending on different usage scenarios.
For instance, when a USB keyboard is connected to an
Android phone,
the Android phone acts as a USB host.
However, when the same Android phone connects to a laptop
to transfers pictures, the phone acts as a USB peripheral.
Accordingly, these USB smart devices contain two different
USB stack implementations to achieve different roles during
USB communication.
Fig. 1: USB gadget stack within a USB smart device, e.g., Android
phones, connected with a USB host machine, e.g., a desktop. The
USB gadget stack includes the gadget core, different USB gadget
drivers such as CDC, HID, MSC, etc., and the corresponding ConfigFS
filesystem.
A. USB Gadget Stack
Figure 1 shows an example of a smart device using the USB
gadget stack within the Linux kernel. At the bottom is the
USB device controller (UDC) providing the USB physical layer
supporting either OTG or DRD. A corresponding UDC kernel
driver, e.g., fsl_usb2, is usually needed to communicate
with UDC, e.g., Freescale Highspeed USB Dual-Role Device
Controller. The gadget core sits right above the UDC driver
exposing APIs to a variety of USB gadget drivers, which im-
plements different USB functionality instantiated via the UDC
hardware. Example gadget drivers include Communication
Data Class (CDC) [24] (for data communication functionality,
like a modem), Human Interface Device (HID) [25] (for
input functionality, like a keyboard), and Mass Storage Class
(MSC) [26] (for storage functionality, like a USB thumb drive).
The ConfigFS [27] filesystem lies above all the USB gadget
drivers allowing specific user-space applications to configure
the USB smart device with one or more classes of USB
functionality. For Android devices, this usually refers to the
USB configuration menu to change the setting of the phone,
e.g., charging or Media Transfer Protocol (MTP).
In general, between a USB host machine and a USB smart
device using the USB gadget stack, the USB connection and
communication workflow includes three phases. In the first
1It is also called as USB peripheral stack or USB device stack in certain
documentations.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:18 UTC from IEEE Xplore.  Restrictions apply. 
22213
Kernel spaceUSB Device Controller (UDC)User spaceUDC DriverGadget CoreCDCHID…MSCConﬁgFSGadget ApplicationsUSB Host MachineUSB Smart Devicephase, the configuration phase, an owner of the USB smart
device decides what USB functionality will be exposed to
the host machine by running the corresponding user-space
gadget application, setting the expected device information
(e.g., VID/PID) by writing into ConfigFS, and triggering the
corresponding gadget driver (e.g., HID) to instantiate the
functionality using the UDC hardware. For instance, USB
tethering will activate the CDC USB gadget driver and turn
smart phone into a USB modem.
Once the USB smart device is plugged into the USB host
machine, the second phase, the enumeration phase, starts.
This phase consists of a standard procedure defined by the
USB specification to retrieve the device information from the
remote device in the format of “descriptors”. Following the
previous example, the USB host machine sends out different
“GetDescriptor” USB requests to the USB smart device, which
in turn responds with all the information needed for the USB
host to recognize a connected USB modem.
Finally, the USB host loads the matching device driver within
the host operating system to enable the USB smart device’s
specific USB gadget functionality in the communication phase.
Continuing the example, the host might load the CDC USB host
driver to serve the USB modem as a typical USB peripheral,
allowing the host to connect to the Internet using the USB
smart device.
Bugs in either USB host stacks or USB gadget stacks could
have critical security implications. Since USB stacks usually
run in the kernel space, any vulnerabilities within these stacks
could lead to privilege escalation or arbitrary code execution,
compromising the whole system. Meanwhile, USB gadget
stacks expose larger attack surfaces compared to USB host
stacks. For instance, USB host stacks usually only need to
consider malicious inputs from USB peripherals. In contrast,
a malicious app with USB permissions could reconfigure the
USB gadget functionality at any time from the user space; an
untrusted host machine could send out malformed USB packets
to USB gadget stacks from the kernel space. The local app
and the remote host could even conspire together against the
USB gadget stack, as we will show later in the paper. Due to
the wide adoption of mobile and IoT devices, a vulnerability
within USB gadget stacks could impact the security of billions
of devices in use, and thus it is usually rated as “high” severity.
B. Security Model
In this paper, we assume that all hardware within a USB
smart device is trusted including the UDC. We also trust the
code running in the kernel space (or privileged mode) within
the USB smart device, where a USB gadget stack usually
resides, such as the Linux kernel USB gadget stack. Taking an
Android device as a concrete example, we trust the System-
on-Chip (SoC) device and the Linux kernel running within
Android.
We assume two different forms of adversaries. First, a
malicious gadget application running in the user space of
the USB smart device may exploit the ConfigFS interface to
reach any internal vulnerabilities within the USB gadget stack
Technique
FaceDancer [19]
POTUS [15]
vUSBf [17]
umap2 [18]
syzkaller [16]
USBFuzz [14]
FUZZUSB
Fuzz
Target
host
host
host
host
host
host
gadget
Fuzz
Scope
E only
C only
E only
E only
E (C partially)
E (C partially)
E+C+CC
Fuzz
Chan
device
host