### Stages of SynchroTrap’s Pipeline under Different Parameter Settings

#### Daily Jobs
In daily operations, the action-matching window \( T_{\text{sim}} \) determines the size of the sliding comparison windows (§ 4.5.2). To examine its impact, we varied the value of \( T_{\text{sim}} \) from 10 minutes to 5 hours. Figure 13 illustrates that the execution time of daily jobs increases as \( T_{\text{sim}} \) is set to higher values. This is because a larger comparison window causes more user pairs to be compared. As we partition data using overlapping sliding windows, each daily job in an application completes within a few hours.

**Figure 13: Execution Time of SynchroTrap’s Daily Jobs**
- **X-Axis:** Applications (Photo Upload, Instagram Follow, Page Like, Application Install, Login)
- **Y-Axis:** Execution Time (minutes)
- **T_{\text{sim}} Values:** 10 mins, 1 hour, 5 hours
- **Error Bars:** 95% confidence intervals

#### Aggregation Jobs
Figure 14 shows the execution time of aggregation jobs in each application with different \( T_{\text{sim}} \) values. The input data volume varies as we generate daily user pairs using different \( T_{\text{sim}} \) values (10 mins, 1 hour, and 5 hours).

**Figure 14: Execution Time of Aggregation Jobs**
- **X-Axis:** Applications (Photo Upload, Instagram Follow, Page Like, Application Install, Login)
- **Y-Axis:** Execution Time (minutes)
- **T_{\text{sim}} Values:** 10 mins, 1 hour, 5 hours
- **Error Bars:** 95% confidence intervals

As can be seen, an aggregation job takes longer when \( T_{\text{sim}} \) is increased in the daily jobs. This is because a daily job with a larger \( T_{\text{sim}} \) value generates more user pairs with matched actions, thus increasing the aggregation time. In all applications, each set of aggregation jobs completes execution within approximately 15 hours.

#### Single-Linkage Hierarchical Clustering on Giraph
SynchroTrap’s user-pair filtering function (§ 4.4) allows distinct similarity thresholds at different granularities. We used a one-week dataset to examine the execution time of clustering under varying similarity thresholds. For simplicity, we assigned the same value to all similarity thresholds and set this value to 0.2, 0.4, 0.6, and 0.8, respectively. Figure 15 shows that the execution time in each application increases as the thresholds are set to lower values. This is because a smaller threshold value leads to fewer user pairs being filtered, making the user similarity graph denser. A SynchroTrap clustering job finishes within approximately 100 minutes, thanks to the high efficiency of Giraph [11].

**Figure 15: Execution Time of Finding Connected Components**
- **X-Axis:** Applications (Photo Upload, Instagram Follow, Page Like, Application Install, Login)
- **Y-Axis:** Execution Time (minutes)
- **Threshold Values:** 0.2, 0.4, 0.6, 0.8
- **Error Bars:** 95% confidence intervals

### Related Work
This section briefly describes previous OSN defense proposals and compares them with our work. Prior work is classified into three broad categories: social-graph-based approaches, feature-based account classification, and aggregate behavior clustering. Our work falls into the category of aggregate behavior clustering.

#### Social-Graph-Based Approaches
Social-graph-based approaches [19, 46] use social connectivity to infer fake accounts with limited social connections to legitimate users. They can detect a significant fraction of bulk-created fake accounts but may miss well-maintained fake accounts and compromised accounts.

#### Feature-Based Account Classification
Feature-based account classification uses various account features to train classifiers for detecting malicious accounts [20, 35, 42, 44]. For example, the Facebook Immune System provides system support to manage many Facebook attack classifiers [35]. COMPA [20] identifies compromised accounts using statistical models that catch sudden changes in a user’s behavior, such as message sending.

#### Aggregate Behavior Clustering
Clickstream [42] and CopyCatch [16] pioneered aggregate behavior clustering for online social network users. Clickstream compares the pairwise similarity of HTTP requests from social network accounts and clusters accounts with similar request patterns. It uses pre-labeled data to classify clusters as fake or legitimate. Although Clickstream achieved good detection results on a dataset of 16K RenRen network users, it is challenging to deploy at large-scale networks due to the need to compare all clicks and obtain large volumes of training data.

CopyCatch [16], a Facebook internal system, detects fake likes cast in loose synchrony. SynchroTrap’s design is based on a similar insight that malicious accounts tend to act together. However, CopyCatch assumes a user can perform a malicious action only once, modeling the detection problem as a co-clustering problem [31]. When a user can repeat the same malicious action multiple times, the computational complexity of CopyCatch grows exponentially with the number of repeated actions.

In contrast, SynchroTrap assumes malicious accounts can repeat any action many times and adopts a clustering algorithm whose computational complexity grows linearly with the number of actions an account performs (§ 4.7). Additionally, SynchroTrap uses source IP addresses and campaign targets to further reduce computational complexity, making it deployable at large-scale social networks like Facebook.

### Conclusion
This work aims to detect large groups of active malicious accounts in OSNs, including both fake accounts and compromised real user accounts. We designed a generic and scalable detection system, SynchroTrap, which uses clustering analysis to detect large groups of malicious users acting in loose synchrony. To handle the enormous volume of user activity data in a large OSN, we implemented SynchroTrap as an incremental processing system on top of Hadoop and Giraph. We further optimized it by partitioning user activity data by time and comparing pairwise user actions that fall into overlapping sliding windows. We deployed SynchroTrap in five applications at Facebook and Instagram. During one month of deployment, SynchroTrap uncovered 1156 large campaigns and more than two million malicious accounts involved in these campaigns.

Although SynchroTrap was designed for OSNs, the approach of detecting loosely synchronized actions can also uncover large attacks in other online services, such as web email and electronic commerce. Furthermore, the incremental processing and data partitioning techniques we explored may benefit other applications that analyze large volumes of time-independent data by reducing the requirements on their computing infrastructure.

Finally, SynchroTrap’s design uses unsupervised learning and does not detect malicious actions in real-time. In the future, we can extract attack signatures from the detected malicious campaigns and accounts and use supervised learning to develop fast classifiers that can detect attacks in real-time.

### Acknowledgments
We thank Yuchun Tang and the anonymous reviewers for their valuable suggestions. We are grateful to Matt Jones, Benjamin Yang, Abe Land, Ioannis Papagiannis, and many other members of the Facebook Site Integrity team for their help during this project. We are particularly thankful to Michael Sirivianos for his extensive feedback. We also thank the Facebook Digraph team for providing the graph processing infrastructure. This work was supported in part by NSF Awards CNS-0845858 and CNS-1017858.

### References
[1] Better Security through Software. http://www.facebook.com/notes/facebook/better-security-through-software/248766257130, 2010.
[2] Staying in Control of Your Facebook Logins. http://www.facebook.com/notes/facebook/staying-in-control-of-your-facebook-logins/389991097130, 2010.
...
[48] C. C. Zou, W. Gong, and D. Towsley. Worm Propagation Modeling and Analysis Under Dynamic Quarantine Defense. In Proceedings of the 2003 ACM Workshop on Rapid Malcode (WORM), 2003.