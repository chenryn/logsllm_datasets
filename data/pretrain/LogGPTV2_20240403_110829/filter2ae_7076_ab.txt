    ? ? ? ? logger.warning("[%s] Invalid task ID provided to scan_stop()" % taskid)
    ? ? ? ? return jsonize({"success": False, "message": "Invalid task ID"})
    ? ? DataStore.tasks[taskid].engine_stop()
    ? ? logger.debug("(%s) Stopped scan" % taskid)
    ? ? return jsonize({"success": True})
下图是调用该接口的截图：
#### @get("/scan//kill")
该接口可杀死特定任务，需要指定 taskid，不然会出现问题。 具体代码如下：
    def scan_kill(taskid):
    ? ? """
    ? ? Kill a scan
    ? ? """
    ? ? if (taskid not in DataStore.tasks or DataStore.tasks[taskid].engine_process() is None or DataStore.tasks[taskid].engine_has_terminated()):
    ? ? ? ? logger.warning("[%s] Invalid task ID provided to scan_kill()" % taskid)
    ? ? ? ? return jsonize({"success": False, "message": "Invalid task ID"})
    ? ? DataStore.tasks[taskid].engine_kill()
    ? ? logger.debug("(%s) Killed scan" % taskid)
    ? ? return jsonize({"success": True})
#### @get("/scan//status")
该接口可查询扫描状态，调用时请指定 taskid，不然会出现问题。 具体代码如下：
    def scan_status(taskid):
    ? ? """
    ? ? Returns status of a scan
    ? ? """
    ? ? if taskid not in DataStore.tasks:
    ? ? ? ? logger.warning("[%s] Invalid task ID provided to scan_status()" % taskid)
    ? ? ? ? return jsonize({"success": False, "message": "Invalid task ID"})
    ? ? if DataStore.tasks[taskid].engine_process() is None:
    ? ? ? ? status = "not running"
    ? ? else:
    ? ? ? ? status = "terminated" if DataStore.tasks[taskid].engine_has_terminated() is True else "running"
    ? ? logger.debug("(%s) Retrieved scan status" % taskid)
    ? ? return jsonize({
    ? ? ? ? "success": True,
    ? ? ? ? "status": status,
    ? ? ? ? "returncode": DataStore.tasks[taskid].engine_get_returncode()
    ? ? })
下图是调用该接口的截图：
#### @get("/scan//data")
该接口可获得到扫描结果，调用时请指定 taskid，不然会出现问题。 具体代码如下：
    def scan_data(taskid):
    ? ? """
    ? ? Retrieve the data of a scan
    ? ? """
    ? ? json_data_message = list()
    ? ? json_errors_message = list()
    ? ? if taskid not in DataStore.tasks:
    ? ? ? ? logger.warning("[%s] Invalid task ID provided to scan_data()" % taskid)
    ? ? ? ? return jsonize({"success": False, "message": "Invalid task ID"})
    ? ? # Read all data from the IPC database for the taskid
    ? ? for status, content_type, value in DataStore.current_db.execute("SELECT status, content_type, value FROM data WHERE taskid = ? ORDER BY id ASC", (taskid,)):
    ? ? ? ? json_data_message.append({"status": status, "type": content_type, "value": dejsonize(value)})
    ? ? # Read all error messages from the IPC database
    ? ? for error in DataStore.current_db.execute("SELECT error FROM errors WHERE taskid = ? ORDER BY id ASC", (taskid,)):
    ? ? ? ? json_errors_message.append(error)
    ? ? logger.debug("(%s) Retrieved scan data and error messages" % taskid)
    ? ? return jsonize({"success": True, "data": json_data_message, "error": json_errors_message})
下图是调用该接口的截图：
存在 SQL 注入的返回结果，返回的内容包括 payload、数据库类型等等。
不存在注入的返回结果
#### @get("/scan//log")
/@get("/scan//log//")
该接口可查询特定任务的扫描的日志，调用时请指定 taskid，不然会出现问题。 具体代码如下：
    def scan_log(taskid):
    ? ? """
    ? ? Retrieve the log messages
    ? ? """
    ? ? json_log_messages = list()
    ? ? if taskid not in DataStore.tasks:
    ? ? ? ? logger.warning("[%s] Invalid task ID provided to scan_log()" % taskid)
    ? ? ? ? return jsonize({"success": False, "message": "Invalid task ID"})
    ? ? # Read all log messages from the IPC database
    ? ? for time_, level, message in DataStore.current_db.execute("SELECT time, level, message FROM logs WHERE taskid = ? ORDER BY id ASC", (taskid,)):
    ? ? ? ? json_log_messages.append({"time": time_, "level": level, "message": message})
    ? ? logger.debug("(%s) Retrieved scan log messages" % taskid)
    ? ? return jsonize({"success": True, "log": json_log_messages})
    def scan_log_limited(taskid, start, end):
    ? ? """
    ? ? Retrieve a subset of log messages
    ? ? """
    ? ? json_log_messages = list()
    ? ? if taskid not in DataStore.tasks:
    ? ? ? ? logger.warning("[%s] Invalid task ID provided to scan_log_limited()" % taskid)
    ? ? ? ? return jsonize({"success": False, "message": "Invalid task ID"})
    ? ? if not start.isdigit() or not end.isdigit() or end = ? AND id >> r = requests.get("http://127.0.0.1:8775/task/new")  创建一个新的扫描任务
    >>> r.json()
    {'taskid': 'c87dbb00644ed7b7', 'success': True} 获取响应的返回内容
    >>> r = requests.post('http://127.0.0.1:8775/scan/c87dbb00644ed7b7/start', data=json.dumps({'url':'http://192.168.1.104/sql-labs/Less-2/?id=1'}), headers={'Content-Type':'application/json'})  开启一个扫描任务
    >>> r = requests.get("http://127.0.0.1:8775/scan/c87dbb00644ed7b7/status")  查询任务的扫描状态
    >>> r.json()
    {'status': 'terminated', 'returncode': 0, 'success': True}
    >>> r = requests.get("http://127.0.0.1:8775/scan/c87dbb00644ed7b7/data")  
    获取扫描的结果
    >>> r.json()
    {'data': [{'status': 1, 'type': 0, 'value': {'url': 'http://192.168.1.104:80/sql-labs/Less-2/', 'query': 'id=1', 'data': None}}, {'status': 1, 'type': 1, 'value': [{'dbms': 'MySQL', 'suffix': '', 'clause': [1, 8, 9], 'notes': [], 'ptype': 1, 'dbms_version': ['>= 5.0'], 'prefix': '', 'place': 'GET', 'data': {'1': {'comment': '', 'matchRatio': 0.957, 'title': 'AND boolean-based blind - WHERE or HAVING clause', 'trueCode': 200, 'templatePayload': None, 'vector': 'AND [INFERENCE]', 'falseCode': 200, 'where': 1, 'payload': 'id=1 AND 8693=8693'}..., 'success': True, 'error': []}
可能您会被最后返回的结果好奇，ptype、suffix、clause等等都是什么意思呢？ 下面我给出部分字段的含义：
#### 检测 POST注入、COOKIE、UA等注入
检测 POST 注入和检测 GET 注入类似，但是还是有一定区别的，与 GET 注入检测区别如下，流程上是一样的，不同的是开启扫描任务的时候，多提交一个
data 字段。
    requests.post('http://127.0.0.1:8775/scan/cb9c4b4e4f1996b5/start', data=json.dumps({'url':'http://192.168.1.104/sql/sql/post.php','data':'keyword=1'}), headers={'Content-Type':'application/json'})
下面是一次完整的 POST 注入检测过程
具体输入输出代码如下：
    >>> r = requests.get("http://127.0.0.1:8775/task/new")
    >>> r.json()
    {'taskid': 'cb9c4b4e4f1996b5', 'success': True}
    >>> r = requests.post('http://127.0.0.1:8775/scan/cb9c4b4e4f1996b5/start', data=json.dumps({'url':'http://192.168.1.104/sql/sql/post.php','data':'keyword=1'}), headers={'Content-Type':'application/json'})
    >>> r.json()
    {'engineid': 9682, 'success': True}
    >>> r = requests.get("http://127.0.0.1:8775/scan/cb9c4b4e4f1996b5/status")
    >>> r.json()
    {'status': 'terminated', 'returncode': 0, 'success': True}
    >>> r = requests.get("http://127.0.0.1:8775/scan/cb9c4b4e4f1996b5/data")
    >>> r.json()
    {'data': [{'status': 1, 'type': 0, 'value': {'url': 'http://192.168.1.104:80/sql/sql/post.php', 'query': None, 'data': 'keyword=1'}}, {'status': 1, 'type': 1, 'value': [{'dbms': 'MySQL', 'suffix': '', 'clause': [1, 8, 9], 'notes': [], 'ptype': 1, 'dbms_version': ['>= 5.0.12'], 'prefix': '', 'place': 'POST', 'os': None, 'conf': {'code': None, 'string': 'Title=FiveAourThe??', 'notString': None, 'titles': None, 'regexp': None, 'textOnly': None, 'optimize': None}, 'parameter': 'keyword', 'data': {'1': {'comment': '', 'matchRatio': 0.863, 'trueCode': 200, 'title': 'AND boolean-based blind - WHERE or HAVING clause', 'templatePayload': None, 'vector': 'AND [INFERENCE]', 'falseCode': 200, 'where': 1, 'payload': 'keyword=1 AND 3424=3424'}...], 'success': True, 'error': []}
那么如何检测 COOKIE 注入、UA 注入这些呢？下面笔者将列出 api 接口可接收的所有字段，若要检测 COOKIE
注入的话，我们只要在`@post("/scan//start")`接口中，传入 cookie 字段；若要检测 referer
注入的话，我们只要在`@post("/scan//start")`接口中，传入 referer 字段。
若要从注入点中获取数据库的版本、数据库的用户名这些，只要在`@post("/scan//start")`接口中，传入 getBanner
字段，并设置为 True，传入 getUsers 字段，并设置为 True。
    crawlDepth: None
    osShell: False
    getUsers: False
    getPasswordHashes: False
    excludeSysDbs: True
    ignoreTimeouts: False
    regData: None
    fileDest: None
    prefix: None
    code: None
    googlePage: 1
    skip: None
    query: None
    randomAgent: False
    osPwn: False
    authType: None
    safeUrl: None
    requestFile: None
    predictOutput: False
    wizard: False
    stopFail: False
    forms: False
    uChar: None
    secondReq: None
    taskid: 630f50607ebf91dc
    pivotColumn: None
    preprocess: None
    dropSetCookie: False
    smart: False
    paramExclude: None
    risk: 1
    sqlFile: None
    rParam: None
    getCurrentUser: False
    notString: None
    getRoles: False
    getPrivileges: False
    testParameter: None
    tbl: None
    charset: None
    trafficFile: None
    osSmb: False
    level: 1
    dnsDomain: None
    outputDir: None
    skipWaf: False
    timeout: 30
    firstChar: None
    torPort: None
    getComments: False
    binaryFields: None
    checkTor: False
    commonTables: False
    direct: None
    tmpPath: None
    titles: False
    getSchema: False
    identifyWaf: False
    paramDel: None
    safeReqFile: None
    regKey: None
    murphyRate: None
    limitStart: None
    crawlExclude: None
    flushSession: False
    loadCookies: None
    csvDel: ,
    offline: False
    method: None
    tmpDir: None
    fileWrite: None
    disablePrecon: False
    osBof: False
    testSkip: None
    invalidLogical: False
    getCurrentDb: False
    hexConvert: False
    proxyFile: None
    answers: None
    host: None
    dependencies: False
    cookie: None
    proxy: None
    updateAll: False
    regType: None
    repair: False
    optimize: False
    limitStop: None
    search: False
    shLib: None
    uFrom: None
    noCast: False
    testFilter: None
    ignoreCode: None
    eta: False
    csrfToken: None
    threads: 1