protection level set on each. If an attacker is in a position to install any package, he will be able to reliably access
anything that a third-party application developer would. This provides access to the device and its resources as
specified by its permissions.
ADB Shell Access
An ADB shell provides powerful access on a device. It provides the ability to install additional packages, interact
with applications as a developer, and gain access to a multitude of additional attack vectors that installed
applications cannot.
System User Access
System user access on a device means that an attacker's code is running as the “system” user. This is the same
user that is used for very sensitive OS functionality. The system user can install new packages, manipulate
device configuration settings, and access data from any application's private data directory. An attacker who has
gained this level of access can compromise almost all aspects of the device and its security.
Root User Access
Root access is the ultimate access that can be gained on a UNIX-based system. An attacker who has root access
can manipulate absolutely any aspect of the device. This includes installing additional packages, reading and
writing to device memory, and manipulating absolutely any other aspect of the device.
Practical Physical Attacks
This section focuses on gaining access to a device that you have in your possession. This section also assumes
no prior knowledge of the lock screen password or PIN. If you have the password or PIN of the lock screen then
you have unfettered access to the device and should skip to the “Infiltrating User Data” section after installing
your remote administration tool of choice.
Getting ADB Shell Access
Getting an ADB shell on a device is the easiest way to gain access to information on the device or launch further
attacks against it. Two predominant ways exist to get an ADB shell when you have not gotten past the lock
screen of a device.
USB Debugging
Android devices have a feature called USB debugging that allows ADB access from a computer to a connected
device. Most Android devices come with USB debugging turned off by default. Enabling USB debugging opens a
device to attack from physical access. Simply using the following command allows access to a connected device
that has USB debugging enabled:
$ adb shell
shell@android:/ $
ADB access to a device allows the exposure of data on the device as well as the installation of new packages.
Therefore, in versions of Android including 4.2.2 and newer, a security feature was added that helped secure
against an attacker having physical access to a device with USB debugging enabled. A prompt appears to the user
when he connects his computer to a device that has USB debugging enabled. Figure 8.1 shows an example of
this prompt.
Figure 8.1 The prompt shown to the user when a device with USB debugging is connected to his computer
Attempting to use adb shell when a device is locked results in the following error on the terminal:
error: device unauthorized. Please check the confirmation dialog on your
device
This means that it is not possible to connect a phone and interact with ADB without first getting past the lock
screen.
However, on February 26, 2014, Henry Hoggard from MWR InfoSecurity reported a bug to Google revealing a
way to bypass this prompt on versions of Android including 4.2.2 up until 4.4.2. By navigating to the emergency
dialer or lock screen camera and then initiating the connection with ADB, the authorization prompt still showed,
even though the screen was locked. Sometimes to kickstart the authorization prompt you need to perform an
adb kill-server and then adb shell again. This issue is documented at
https://labs.mwrinfosecurity.com/advisories/2014/07/03/android-4-4-2-secure-usb-debugging-bypass/.
This means that this method of exploiting devices works on all Android versions up to and including 4.4.2.
NOTE
The privilege level associated with an ADB shell is controlled by a configuration value named ro.secure.
On devices prior to Android 4.2, this was present in /data/local.prop and on newer devices it has shifted
to /default.prop. Setting this value to 0 will result in adbd running as root. On a production build of a
device, the default value is set to 1, which makes adbd run as the shell user. An interesting technique for
escalating privileges from the system user to root prior to Android 4.2 is writing ro.secure=0 into
/data/local.prop. This is because /data/local.prop was owned by the system user. Since Android 4.2,
/data/local.prop has been removed, and /default.prop is owned by the root user. However, further
improvements have been made and modifying /default.prop will not work from Android 4.3 onwards.
This is because now a compile-time flag named ALLOW_ADBD_ROOT indicates whether ADB can be run as
root. If the version of the adbd binary running on the device is compiled with this flag, it will disregard the
ro.secure value set. The fix for this is to compile a custom version of adbd that does not contain this check
and overwrite the version of this binary on the device. These techniques are useful for maintaining
persistent root access after it has been obtained on a device.
Unlocked Bootloaders
Some device manufacturers allow users to unlock their bootloaders and flash or boot into custom images on the
device. To unlock the bootloader on a Nexus device, you can use the following command when the device is
displaying the bootloader:
$ fastboot oem unlock
...
(bootloader) erasing userdata...
(bootloader) erasing userdata done
(bootloader) erasing cache...
(bootloader) erasing cache done
(bootloader) unlocking...
(bootloader) Bootloader is unlocked now.
OKAY [ 40.691s]
finished. total time: 40.691s
When unlocking a bootloader, the Android OS forces a factory reset and all user data is wiped. This prevents
attackers from simply booting into custom system images that provide access to the device's data. However,
some users may forget to lock their bootloader again after they have flashed a custom image, which leaves it
wide open for an attacker who has physical access to the device. Booting into a custom recovery ROM and
gaining an ADB shell running as root is possible. The following list explains this attack for a Nexus 7 device.
1. If the device is still powered on, turn it off.
2. Hold down the volume down key and power at the same time to boot into the bootloader.
3. The bootloader appears, with a screen displaying Start.
4. If you see LOCK STATE - UNLOCKED, the device has an unlocked bootloader and is vulnerable to attack. A
device with an unlocked bootloader will also display an unlocked padlock on the screen when booting up.
5. Download the correct ClockworkMod Recovery ROM (see https://www .clockworkmod.com/rommanager)
image for the device.
6. Boot into the image by performing the following:
$ fastboot boot recovery-clockwork-touch-6.0.4.3-grouper.img
downloading 'boot.img'...
OKAY [ 0.875s]
booting...
OKAY [ 0.019s]
finished. total time: 0.895s
If the bootloader is locked, this step will fail with a “Bootloader is locked” error message.
7. You should now see the ClockworkMod Recovery screen. At this point you are able to invoke a root ADB
shell.
$ adb devices
List of devices attached
015d25687830060c recovery
$ adb shell
~ # id
uid=0(root) gid=0(root)
Performing this technique can be cumbersome depending on the device manufacturer. Some device
manufacturers make use of their own bootloaders and proprietary tools to interact with them. You would have
to investigate this possibility for the device in question.
Bypassing Lock Screens
If the intent is not to compromise the device long term and maintain access but merely to get access to it, then
use the information in this section, which delves into some ways to bypass the lock screen on a device. No
forensic techniques involving observing smudges on a device to determine touches will be discussed.
Using the DISABLE_KEYGUARD Permission
Android contains a permission called DISABLE_KEYGUARD that allows applications holding this permission to
remove the lock screen temporarily. You can do this inside an application by implementing the following code:
KeyguardManager kgm = ((KeyguardManager)getSystemService("keyguard"));
KeyGuardManager.KeyguardLock kgl = kgm.newKeyguardLock("mahh");
kgl.disableKeyguard();
Even though the KeyguardManager.KeyguardLock class was deprecated in API 13 (Android 3.2), this technique
continues to work on the latest Android devices. By using a post-exploitation module in drozer with
KeyguardManager .KeyguardLock, a hacker can disable the lock screen. The rogue drozer agent by default assigns
the DISABLE_KEYGUARD permission, but the person using the rogue agent must have somewhere to host a server
for the agent to connect to. Rather, to do this on a device with USB debugging enabled and a standard drozer
agent, you can compile a new agent with the DISABLE_KEYGUARD permission as follows:
$ drozer agent build --permission android.permission.DISABLE_KEYGUARD
Done: /tmp/tmpW5TSbA/agent.apk
Install the agent and start the embedded server, which opens a listening port on the device:
$ adb install /tmp/tmpW5TSbA/agent.apk
3498 KB/s (653640 bytes in 0.182s)
pkg: /data/local/tmp/agent.apk
Success
$ adb shell am broadcast -n com.mwr.dz/.receivers.Receiver -c
com.mwr.dz.START_EMBEDDED
Broadcasting: Intent { cat=[com.mwr.dz.START_EMBEDDED]
cmp=com.mwr.dz/.receivers.Receiver }
Broadcast completed: result=0
The listening embedded server port must be forwarded to the connected computer:
$ adb forward tcp:31415 tcp:31415
Running the post.perform.disablelockscreen module disables the device's lock screen:
$ drozer console connect -c "run post.perform.disablelockscreen"
Selecting 4f804a5a07bbb229 (unknown sdk 4.4.2)
[*] Attempting to disableKeyguard()
[*] Done. Check device.
The last step assumes that the relevant post module is already installed in drozer by doing module install
disablelockscreen. The lock screen can be re-enabled by pressing the home button on the device. This
technique was tested on an Android 4.4.2 emulator and multiple devices running versions up to 5.0 Lollipop and
proves to reliably remove the lock screen.
Removing Key Files
If a pattern lock screen is set on a device, a file located at /data/system/gesture .key stores a representation of
this pattern. In the same way, a device using a PIN or password lock screen stores a salted hash of it in
/data/system/password .key. Removing these files will disable the lock screen entirely. The file permissions set
on these files are as follows:
-rw------- system system 20 2014-11-03 15:10 gesture.key
...
-rw------- system system 72 2014-11-03 15:10 password.key
Observing the owner, group, and permissions set on these files reveals only the system or root user will be able
to delete them. This means a hacker has to find a way on the device to escalate privileges from the shell user to
either system or root. The target for this exercise is a Sony Xperia Z2 running Android 4.4.2. This device is not
vulnerable to any of the Master Key vulnerabilities; otherwise, Cydia Impactor could be used to escalate
privileges to the system user.
Instead take a look at the kernel version in use on this device:
shell@D6503:/ $ cat /proc/version
Linux version 3.4.0-perf-g46a79a0 (BuildUser@BuildHost) (gcc version 4.7
(GCC) ) #1 SMP PREEMPT Wed Mar 5 20:49:56 2014
Chapter 6 covered a kernel exploit dubbed Towelroot that claims to be able to exploit all kernel versions
compiled prior to June 16, 2014. However, the official version of Towelroot is inside an application without any
clear paths to executing it from an ADB shell. An alternate standalone version of this exploit that is based on an
early version of Towelroot is available at https://gist.github.com/fi01/a838dea63323c7c003cd. It requires
slight alterations to the following line:
ret = system("/system/bin/touch /data/local/tmp/foo");
This line should rather execute /system/bin/sh to provide a root shell. After making this change you can
compile this code by creating a standard NDK folder structure and running ndk-build from the root. You can
upload the resulting binary (named exploit in this instance) to the device to the /data/local/tmp directory,
marked as executable and then run to obtain a root shell:
$ adb push exploit /data/local/tmp
342 KB/s (17792 bytes in 0.050s)
$ adb shell
shell@D6503:/ $ cd /data/local/tmp
shell@D6503:/data/local/tmp $ chmod 775 exploit
shell@D6503:/data/local/tmp $ ./exploit
************************
native towelroot running with pid 4335
got kernel version Linux version 3.4.0-perf-g46a79a0 (BuildUser@BuildHos
t) (gcc version 4.7 (GCC) ) #1 SMP PREEMPT Wed Mar 5 20:49:56 2014
got kernel number 0
no matching phone found, trying default
i have a client like hookers
starting the dangerous things
0xf1d78000 is a good number
cpid1 resumed
0xf1d7ddcc is also a good number
0xf1d8a000 is a good number
cpid1 resumed
0xf1d8ddcc is also a good number
GOING
cpid3 resumed
WOOT
YOU ARE A SCARY PHONE
shell@D6503:/data/local/tmp # id
uid=0(root) gid=0(root) groups=1004(input),1007(log),1009(mount),1011(ad
b),1015(sdcard_rw),1028(sdcard_r),2991(removable_rw),3001(net_bt_admin),
3002(net_bt),3003(inet),3006(net_bw_stats) context=u:r:kernel:s0
At this point, a root shell is more than sufficient to remove the lock screen:
shell@D6503:/data/local/tmp # rm /data/system/password.key
Figure 8.2 shows a screenshot of the device before and after executing this command.
Figure 8.2 A screenshot of a Sony Xperia Z2 before and after having the password lock screen removed
On older devices, making use of Cydia Impactor offers an excellent option that reliably provides system user
access with physical access. This tool and family of vulnerabilities it exploits was discussed in the Chapter 6
section, “Rooting Explained.” The particular option in Cydia Impactor that provides system user access is Start
Telnetd as System on Port 2222. This option initiates a shell on TCP/2222 that is running as the system user.
This port can be forwarded to the local computer using ADB and then connected to with a telnet client to obtain
system user access. Another example of a trivial vulnerability that would allow system user access is if any
debuggable application on the device were running as the system user. Chapter 7's section, “Exploiting
Misconfigured Package Attributes” covered exploitation of this issue.
Gaining root access and removing a key file is possible if the victim has unlocked her bootloader and forgotten
to lock it again. If you use the method shown earlier of loading ClockworkMod (CWM) on a Nexus device and
getting a root ADB shell, the key file can be removed. Make sure that you have mounted the /data partition by
navigating to Mounts and Storage and clicking mount /data. Using an ADB shell from CWM, you can remove all
key files as follows:
~ # rm /data/system/*.key
~ # reboot
The device will now reboot and still show the lock screen. However, it will accept any pin, password, or pattern
you use and log you into the device.
Abusing Android Application Issues
As mentioned in “Exploiting Activities” in Chapter 7, Curesec discovered a vulnerability in the
com.android.settings package that can be used to remove the device lock screen. This affects all devices
running Android 4.3 or earlier. To find the vulnerability details, search for CVE-2013-6271 or get more
information from the authors on their blog at https://cureblog.de/2013/11/cve-2013-6271- remove-device-
locks-from-android-phone/. To abuse this vulnerability and remove the lock screen of a device, perform the
following in an ADB shell:
shell@android:/ $ am start -n com.android.settings/com.android.settings.
ChooseLockGeneric --ez confirm_credentials false --ei
lockscreen.password_type 0 --activity-clear-task
Starting: Intent { flg=0x8000 cmp=com.android.settings/
.ChooseLockGeneric (has extras) }
This works from any context and can also be invoked using an installed drozer agent by making use of the
module provided by Curesec for this issue. You can install it by performing module install curesec.cve-2013-
6271. Note that this will not work from an ADB shell provided from abusing an unlocked bootloader because it
relies on the Android system being operational and able to receive intents.
Using Logic Flaws that Don't Require Shell Access
If you consider it, a lock screen is a complicated piece of software. It has to take into consideration when a user
is allowed to interact with the device. Especially when you consider that a user is able to do some actions on the
device from the lock screen, such as place emergency phone calls, receive phone calls, and allow third-party
applications to temporarily disable the lock screen or show another activity in front of it. Complicated logic is
often prone to flaws that can be used to do something that is not intended by the developer. For instance, on a
Motorola Droid device bypassing the lock screen was possible by phoning the locked device and answering the
call. Then while the call was active, you simply pressed the back button and you were able to access the device.
This occurred because the phone application disabled the keyguard when receiving a call and the user could
back out of it like any other application on the device. This was found and documented at
https://theassurer.com/p/756.html. You can find many similar issues on the Internet documenting logic flaws
in the lock screen on certain devices. The way that third-party applications handle being displayed over the lock
screen can also introduce lock screen bypass vulnerabilities. For example, in 2013 a vulnerability was reported
in a free messaging and calling application named Viber (see http://www.viber.com/) that worked in exactly the
same way as the Motorola vulnerability. Sending a Viber message to a locked device causes Viber to display the
message over the lock screen. It was then possible to bypass the lock screen completely by tapping the back
button multiple times. To see a video of this exploit in action by BkavCorp visit http://www
.youtube.com/watch?v=tb4y_1cz8WY.
Using Legitimate Lock Screen Reset Functionality
Android has its own built-in mechanisms to help users who have forgotten their lock screen password. However,
this requires some form of authentication. Two general techniques work on Android devices and both of them
require the user's Google username and password:
Entering the password, PIN, or pattern incorrectly five times on the lock screen causes a new button to
appear on the lock screen that says something like “Forgot pattern?” This button opens a screen for entering
the credentials for a linked Google account and changing the lock screen. Figure 8.3 shows the Forgot
pattern? button and the screen that asks for Google credentials.
If the user has enabled the Android Device Manager on their device then the user could visit
https://www.google.com/android/devicemanager and control aspects of the device. Using the user's Google
credentials to log in to this interface shows a list of connected devices and allows the user or attacker that