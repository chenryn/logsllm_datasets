### Function Parameters, Function Inlining, and Calling Convention: Robustness Analysis

**Table 4: Robustness Analysis**

| Feature              | Strength |
|----------------------|----------|
| Function Parameters  | Yes      |
| Function Inlining    | Yes      |
| Calling Convention   | Maybe    |

### 8. Related Work

#### Code Search in Binary and Its Applications
Recent advancements in code search techniques have garnered significant attention. Most prior research has focused on improving the performance of searching for semantically equivalent code in large code databases [6, 10, 11, 15, 22â€“24, 27, 29, 33, 34, 36]. These algorithms have been applied to various domains, such as:

- **Bug Search:** Utilizing code search to quickly identify program bugs [33, 34].
- **Patch Generation:** Applying code similarity techniques to discover semantic code.
- **Program Lineage:** Inferring evolutionary relationships among software versions using code similarity methods.
- **Software Plagiarism and Repackage Detection:** Adopting code search techniques to detect plagiarism and repackaging [20].

This paper introduces the concept of cross-version memory analysis by leveraging code search techniques. Experimental results demonstrate the potential of these techniques for across-version memory analysis.

#### Memory Forensics
Several tools [1, 14, 26, 32, 35, 38] have been developed to assist in automatic memory forensics. These tools aim to analyze and retrieve sensitive information from memory dumps. A key aspect is encoding semantic information into data structure profiles, which are predefined for specific versions of the image being analyzed and updated according to the target software version.

State-of-the-art techniques rely on reverse engineering to reconstruct the profile of semantic information. This often requires manual effort or the use of non-trivial scripts [2] operating on the source code. Our proposed method, cross-version memory analysis, transfers knowledge from a trained model for an older version to generate a profile for a new version, thereby reducing the need for version-by-version reverse engineering.

#### Virtual Machine Introspection (VMI)
VMI extracts semantic knowledge from a running virtual machine to monitor and inspect the guest machine's behavior. Due to its isolation, VMI has been widely used in security applications, such as intrusion detection [16, 30, 31] and malware analysis [8, 21]. VMI techniques are also employed in memory forensics and process monitoring [17].

The main challenge in VMI is bridging the semantic gap between the guest OS and external analysis tools. Tools like DECAF [18] address this by retrieving key semantic information from the guest OS. However, constructing a profile of key semantic values and their interpretations within the guest OS still requires significant effort. While VMST can reuse OS code pieces for introspection, it is not general enough to support automatic introspection for internal and close-sourced data structures.

#### Data Structure Reverse Engineering
Reverse engineering data structures from binary executables is crucial for many security tasks. Techniques like Howard [37] and REWARDS [25] use dynamic binary analysis to recover types and data structure definitions during execution. They infer and propagate the types of instruction operands and recognize memory access patterns to discover specific data structures. For binaries without well-defined documentation, these tools can only infer primitive data types, requiring manual effort for higher semantic data type inference. ORIGEN, introduced in this paper, alleviates this by utilizing knowledge from older versions to assist in profile generation for new versions.

### 9. Conclusion
In this paper, we introduced the concept of "cross-version memory analysis" and detailed a solution implemented in a prototype called ORIGEN. ORIGEN searches for code in one binary and locates Offsets of Reference Instructions (ORIs) in another version. Experimental results verified the efficacy of our method, successfully recovering offsets for key semantic fields across different versions of OpenSSH, Windows, Linux, and a loadable kernel module for Linux. It achieved 90% precision on 40 versions of OpenSSH and took half a minute to identify all chosen semantic fields on Windows and Linux. We also integrated ORIGEN into DECAF to demonstrate its effectiveness in VMI.

### Acknowledgment
We thank anonymous reviewers for their feedback. This research was supported in part by the National Science Foundation Grant #1054605, Air Force Research Lab Grant #FA8750-15-2-0106, and DARPA CGC Grant #FA8750-14-C-0118. The opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### 10. References
[References listed as provided, with proper formatting and citation.]

---

This revised text aims to be more clear, coherent, and professional, with improved structure and readability.