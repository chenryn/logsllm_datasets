Function Parameters
Function Inlining
Calling Convention
Strength
Yes
Yes
Yes
Yes
Yes
Maybe
Partial
Table 4: Robustness Analysis
8. RELATED WORK
Code Search in Binary and Its application.
The code search technique recently has attracted much at-
tentions. Most previous work put their eﬀorts on the perfor-
mance improvement for searching semantic equivalent codes
in code database [6, 10, 11, 15, 22–24, 27, 29, 33, 34, 36, 36].
Many researchers also applied these promising code search
algorithms into diﬀerent applications [5,19]. Bug search uti-
lizes the search techniques to quickly identify the program
bugs [33, 34]. Patch generation applies the code similarity
techniques to the semantic code discovery. Program lineage
exercises the code similarity methods to infer the evolution-
ary relationship among a collection of software. Software
plagiarism and repackage discovery also adopts the code
search techniques [20], and so on. This paper is the ﬁrst
attempt at the cross-version memory analysis by leverag-
ing the code search techniques. The experiments also shows
it is promising to apply the code search techniques for the
across-version memory analysis.
Memory Forensics.
Several memory analysis tools [1,14,26,32,35,38] etc. have
been proposed to aid the automatic memory forensics. They
aim at analyzing and retrieve sensitive information from a
memory dump. A key aspect of memory forensics is to en-
code the semantic related information into the data struc-
ture proﬁle and follow the proﬁle to conduct the speciﬁc
analysis. The proﬁle is predeﬁned to the speciﬁc version of
the image being analyzed, and update the proﬁle according
to versions of the target software.
State-of-the-art techniques rely on reverse engineering to
reconstruct the proﬁle of semantic information. The reverse
engineering most often requires the manual eﬀort or use non-
trivial scripts [2] that operate on the source code. In this
paper, we propose the idea of cross-version memory analysis.
Instead of reverse engineering version by version, it transfers
the knowledge from the trained model for the older version
to generate the proﬁle for the new version.
Virtual Machine Introspection (VMI).
VMI extracts semantic knowledge from a running virtual
machine to monitor and inspect semantic behaviors of the
guest machine. Due to the nature of isolation, VMI has been
applied for many security applications. For example, many
intrusion detection applications utilize the VMI technique
to conduct more accurate detections [16, 30, 31]. Some mal-
ware analysis approaches also relies on the VMI to capture
the detail malware behaviors which cannot be captured by
previous work [8,21]. Furthermore, VMI techniques are also
well used in memory forensics and process monitoring [17].
The main challenge in the VMI technique is to bridge the
semantic gap between the guest OS and outside analysis
tools. Many existing works have already made a great step
on this problem [9,13]. A recent tool, DECAF [18] performs
VMI to retrieve key semantic information from a guest OS.
In each of the above eﬀorts, similar to memory forensics,
non-trivial eﬀort is required to construct a proﬁle) of key se-
mantic values and their concrete interpretations within the
guest OS. Although VMST can reuse the OS code pieces of
the introspection property to achieve the automatic VMI.
However, the approach used in VMST could not be general
enough to support the automatic introspection for some in-
ternal and close-sourced data structures.
Data Structure Reverse Engineering.
Reverse engineering data structures from binary executa-
bles is very valuable for many security problems. Partic-
ularly, Howard [37] and REWARDS [25] makes use of dy-
namic binary analysis to recover the types and data struc-
ture deﬁnitions from the execution of a binary program. For
each instruction during the execution, they infer and propa-
gate the types of the instruction operands. Certain memory
access patterns also need to be recognized to discover speciﬁc
data structures like arrays, linked lists, and embedded data
structures. For most COTS binaries without well deﬁned
documentation about their function prototypes, Howard [37]
and REWARDS [25] can only infer the primitive data types
such as integer, string or pointers. The manual eﬀorts are
still required for higher semantic data type inference. In our
paper, ORIGEN is proposed to alleviate the manual eﬀorts.
Instead of inferencing the data types for new version of a bi-
nary from the scratch, ORIGEN can utilize the knowledge
from data types in the older version which has been analyzed
to assist the proﬁle generation for the new version.
9. CONCLUSION
In this paper, we presented the notion of “cross-version
memory analysis”. We detailed a solution and implemented
a prototype called ORIGEN that is able to search the code
in one binary, and locate the ORIs in another version of
the code. The experimental results veriﬁed the eﬃcacy of
the proposed method. Speciﬁcally, our method successfully
recovers the oﬀsets for key semantic ﬁelds across diﬀerent
versions of OpenSSH, Windows, Linux, a loadable kernel
module for Linux. In addition, it achieved a precision of 90%
on 40 versions of OpenSSH. The experiments also demon-
strated the eﬃciency of our method, where it took half a
minute to identify all the chosen semantic ﬁelds on Windows
and Linux respectively. Finally, we integrate ORIGEN into
DECAF to demonstrate its eﬀectiveness in VMI.
Acknowledgment
We would like to thank anonymous reviewers for their feed-
back. This research was supported in part by National
Science Foundation Grant #1054605, Air Force Research
Lab Grant #FA8750-15-2-0106, and DARPA CGC Grant
#FA8750-14-C-0118. Any opinions, ﬁndings, and conclu-
sions in this paper are those of the authors and do not nec-
essarily reﬂect the views of the funding agencies.
10. REFERENCES
[1] Insight-VMI, A semantic bridge for virtual machine
introspection and forensic applications. https://code.
google.com/p/insight-vmi/wiki/LinuxDebugSymbols.
[2] Linux memory forensics using Volatility –
Prerequisites. https://code.google.com/p/volatility/
wiki/LinuxMemoryForensics.
[3] E. Bursztein, M. Hamburg, J. Lagarenne, and
D. Boneh. Openconﬂict: Preventing real time map
hacks in online games. In Proceedings of the 2011
IEEE Symposium on Security and
Privacy(Oakland’11), pages 506–520, 2011.
[4] F. Chagnon. IDA Decompiler.
https://github.com/EiNSTeiN-/ida-decompiler.
[5] P. Comparetti, G. Salvaneschi, C. Kolbitsch,
C. Kruegel, E. Kirda, and S. Zanero. Identifying
dormant functionality in malware programs. In
Proceedings of 2010 IEEE Symposium on Security and
Privacy(Oakland’10), pages 61–76. IEEE, 2010.
[6] Y. David and E. Yahav. Tracelet-based code search in
executables. In Proceedings of the 35th ACM
SIGPLAN Conference on Programming Language
Design and Implementation(PLDI’14), volume 49,
pages 349–360. ACM, 2014.
[7] Y. David and E. Yahav. Tracelet-based code search in
executables. In ACM SIGPLAN Notices, volume 49,
pages 349–360. ACM, 2014.
[8] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether:
malware analysis via hardware virtualization
extensions. In Proceedings of the 15th ACM conference
on Computer and communications security(CCS’08),
pages 51–62. ACM, 2008.
[9] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Giﬃn, and
W. Lee. Virtuoso: Narrowing the semantic gap in
virtual machine introspection. In Proceedings of the
IEEE Symposium on Security and
Privacy(Oakland’11), pages 297–312. IEEE, 2011.
[10] T. Dullien and R. Rolles. Graph-based comparison of
executable objects (english version). SSTIC, 5:1–3,
2005.
[11] M. Egele, M. Woo, P. Chapman, and D. Brumley.
Blanket execution: Dynamic similarity testing for
program binaries and components. In 23rd USENIX
Security Symposium (USENIX Security 14), pages
303–317. USENIX Association, Aug. 2014.
[12] Q. Feng, A. Prakash, H. Yin, and Z. Lin. Mace:
high-coverage and robust memory analysis for
commodity operating systems. In Proceedings of the
30th Annual Computer Security Applications
Conference(ACSAC’14), pages 196–205. ACM, 2014.
[13] Y. Fu and Z. Lin. Space traveling across vm:
Automatically bridging the semantic-gap in virtual
machine introspection via online kernel data
redirection. In Proceedings of the 2012 IEEE
Symposium on Security and Privacy(Oakland’12),
pages 586–600. IEEE, May 2012.
[14] Y. Fu, Z. Lin, and D. Brumley. Automatically deriving
pointer reference expressions from executions for
memory dump analysis. In Proceedings of the 2015
ACM SIGSOFT International Symposium on
Foundations of Software Engineering(FSE’15), 2015.
[15] D. Gao, M. K. Reiter, and D. Song. Binhunt:
Automatically ﬁnding semantic diﬀerences in binary
programs. In Information and Communications
Security, pages 238–255. Springer, 2008.
[16] T. Garﬁnkel and M. Rosenblum. A virtual machine
introspection based architecture for intrusion
detection. In Proceedings of Network and Distributed
Systems Security Symposium(NDSS’03), volume 3,
pages 191–206, 2003.
[17] B. Hay and K. Nance. Forensics examination of
volatile system data using virtual introspection. ACM
SIGOPS Operating Systems Review, 42(3):74–82, 2008.
[18] A. Henderson, A. Prakash, L. K. Yan, X. Hu,
X. Wang, R. Zhou, and H. Yin. Make it work, make it
right, make it fast: Building a platform-neutral
whole-system dynamic binary analysis platform. In
International Symposium on Software Testing and
Analysis(ISSTA’14), pages 248–258. ACM, July 2014.
[19] X. Hu, T.-c. Chiueh, and K. G. Shin. Large-scale
malware indexing using function-call graphs. In
Proceedings of the 16th ACM conference on Computer
and communications security(CCS’09), pages 611–620.
ACM, 2009.
[20] J. Jang, M. Woo, and D. Brumley. Towards automatic
software lineage inference. In Proceedings of the 22nd
USENIX conference on Security(USENIX’13), pages
81–96. USENIX Association, 2013.
[21] X. Jiang, X. Wang, and D. Xu. Stealthy malware
detection through VMM-based ”out-of-the-box”
semantic view reconstruction. In Proceedings of the
14th ACM conference on Computer and
Communications Security(CCS’07), pages 128–138.
ACM, October 2007.
[22] W. M. Khoo, A. Mycroft, and R. Anderson.
Rendezvous: A search engine for binary code. In
Proceedings of the 10th Working Conference on Mining
Software Repositories, pages 329–338. IEEE, 2013.
[23] C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and
G. Vigna. Polymorphic worm detection using
structural information of executables. In Recent
Advances in Intrusion Detection, pages 207–226.
Springer, 2006.
[28] S. S. Muchnick. Advanced Compiler Design and
Implementation. Morgan Kaufmann, 1997.
[29] B. H. Ng and A. Prakash. Expose: Discovering
potential binary code re-use. In Computer Software
and Applications Conference (COMPSAC’13), 2013
IEEE 37th Annual, pages 492–501, July 2013.
[30] B. D. Payne, M. Carbone, M. Sharif, and W. Lee.
Lares: An architecture for secure active monitoring
using virtualization. In Proceedings of the 2008 IEEE
Symposium on Security and Privacy(Oakland’08),
pages 233–247. IEEE, 2008.
[31] B. D. Payne, M. De Carbone, and W. Lee. Secure and
ﬂexible monitoring of virtual machines. In Proceedings
of the Twenty-Third Annual Computer Security
Applications Conference(ACSAC’07), pages 385–397.
IEEE, 2007.
[32] N. L. Petroni, Jr., A. Walters, T. Fraser, and W. A.
Arbaugh. FATKit: A framework for the extraction and
analysis of digital forensic data from volatile system
memory. Digital Investigation, 3(4):197 – 210, 2006.
[33] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and
T. Holz. Cross-architecture bug search in binary
executables. In IEEE Symposium on Security and
Privacy (Oakland’15). IEEE, 2015.
[34] J. Pewny, F. S. C. Rossow, and T. Holz. Leveraging
semantic signatures for bug search in binary programs.
In Proceedings of the 30th Annual Computer Security
Applications Conference(ACSAC’14), pages 406–415.
ACM, 2014.
[35] B. Saltaformaggio, R. Bhatia, Z. Gu, X. Zhang, and
D. Xu. Vcr: App-agnostic recovery of photographic
evidence from android device memory images. In
Proceedings of the 22th ACM SIGSAC Conference on
Computer and Communications Security(CCS’15),
pages 146–157. ACM, 2015.
[36] R. Sharma, E. Schkufza, B. Churchill, and A. Aiken.
Data-driven equivalence checking. In Proceedings of
the 2013 ACM SIGPLAN international conference on
Object oriented programming systems languages and
applications, volume 48, pages 391–406. ACM, 2013.
[37] A. Slowinska, T. Stancescu, and H. Bos. Howard: a
dynamic excavator for reverse engineering data
structures. In Proceedings of the 18th Annual Network
and Distributed System Security Symposium
(NDSS’11), 2011.
[24] A. Lakhotia, M. D. Preda, and R. Giacobazzi. Fast
[38] Volatility: Memory Forencis System.
https://www.volatilesystems.com/default/volatility/.
location of similar code fragments using semantic
juice. In Proceedings of the 2nd ACM SIGPLAN
Program Protection and Reverse Engineering
Workshop, page 5. ACM, 2013.
[25] Z. Lin, X. Zhang, and D. Xu. Automatic reverse
engineering of data structures from binary execution.
In Proceedings of the 17th Annual Network and
Distributed System Security Symposium(NDSS’10),
February 2010.
[26] MANDIANT Memoryze. http://www.mandiant.com/
resources/download/memoryze.
[27] J. Ming, M. Pan, and D. Gao. ibinhunt: Binary
hunting with interprocedural control ﬂow. In In
International Conference on Information Security and
Cryptology, pages 92–109. Springer, 2013.