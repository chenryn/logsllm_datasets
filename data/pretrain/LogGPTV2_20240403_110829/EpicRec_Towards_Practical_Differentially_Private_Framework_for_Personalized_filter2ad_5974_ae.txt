# Data Collection and System Overview

The dataset was collected in the Phoenix, AZ metropolitan area and includes 21 business categories. The training dataset comprises 229,907 reviews from 43,873 users on 11,537 businesses.

# Evaluation of S-EpicRec and M-EpicRec Systems

## Metrics
We evaluate the perturbation quality of S-EpicRec using the following metrics:

- **Perturbed Category Aggregates Quality**: We use the expected Mean Absolute Error (MAE) metric, as discussed in Section 4.1.2, with its mathematical definition provided in Section 4.3.4.
- **Recommendation Accuracy**: We consider the MAE loss between the recommendation results using raw and perturbed data, defined as:
  \[
  \text{MAE Loss} = \frac{1}{nU} \sum_{u=1}^{U} \sum_{i=1}^{n} | \text{Rec}_{ui}^r - \text{GT}_{ui} | - | \text{Rec}_{ui}^p - \text{GT}_{ui} | - 1
  \]
  where \( n \) is the number of items, \( U \) is the number of all users, and \(\text{Rec}_{ui}^r\) and \(\text{Rec}_{ui}^p\) are the elements in the \(i\)-th column and \(u\)-th row (item \(i\) for user \(u\)) in the predicted recommendation matrices using raw data (\(d_r\)) and perturbed data (\(d_p\)), respectively.

Additionally, we demonstrate the scalability of our EpicRec system through running time analysis.

## (Pseudo) Competitors
As this paper is the first attempt to design a privacy-preserving system that enables user-understandable privacy control, there are no existing works for a fair comparison. Therefore, we embed existing approaches into our system, referred to as pseudo-competitors. Specifically, we integrate them into the S-DPDP/M-DPDP algorithms, replacing phase 1 for noise calibration only. These methods use our quantified privacy budget \(\epsilon\) from S-PBQ/M-PBQ algorithms and then sanitize the data by phase 2 in S-DPDP/M-DPDP algorithms.

### Pseudo-Competitors
- **Pseudo-LPA (Pseudo Laplace Mechanism)**: A baseline method that injects Laplace perturbation noise to each count using domain-specific global sensitivity \(\Delta f\).
- **Pseudo-GS (Pseudo Grouping & Smoothing Mechanism)**: The best method for aggregate release with grouping and smoothing, as proposed in [14].

Note that we do not compare with the approach in [24] because it only supports larger \(\epsilon\) (\(\epsilon > 1\)), while our proposed EpicRec focuses on stronger privacy protection with \(\epsilon \leq 1\).

## Experimental Settings
We conduct experiments using the classic collaborative filtering algorithm [25] implemented in GraphLab3. The parameter \(\delta\) is set to 0.02 according to differential privacy literature. Experiments are run on a personal computer equipped with a 1.9GHz CPU and 8GB RAM. Each experiment is repeated 10 times, and the average result is reported. For evaluating recommendation accuracy, we use 10-fold cross-validation and stochastic gradient descent. In the M-EpicRec case, we randomly select privacy levels for each category for each user.

## Evaluation Results

### Perturbation Quality
Figure 5 reports the results of the S-EpicRec system. As shown in Figure 5(a), the perturbed category aggregates quality of the S-DPDP algorithm in the S-EpicRec system consistently outperforms other competitors by up to 10% in both the MovieLens and Yelp datasets. This is because S-EpicRec determines calibrated noises based on the underlying data properties via the correlation between categories, capturing the minimum noise magnitude sufficient to ensure privacy guarantees. Data sanitization (phase 2 in Algorithm 1) also leverages category correlations to minimize errors during data sanitization. On the other hand, Pseudo-GS loses a lot of correlation information between categories due to grouping and averaging, leading to larger errors. Pseudo-LPA uses global sensitivity to determine noise magnitude, which only captures the maximum number of categories an item can belong to and largely ignores category correlations. The recommendation loss in Figure 5(b) is up to 5% and 3% in the MovieLens and Yelp datasets, respectively, with strong privacy guarantees (\(\epsilon = 0.2\) in MovieLens and \(\epsilon = 0.3\) in Yelp).

Figure 6 shows similar performance results for the M-EpicRec system, where the M-DPDP algorithm outperforms other competitors from both aspects. The recommendation quality of the M-DPDP algorithm (in Figure 6(b)) is slightly worse than that of the S-DPDP algorithm in S-EpicRec due to constraints from items in "No Release" categories.

### Privacy Budget Quantification
In Figure 5, the blue shadows show the range of quantified optimal privacy budget \(\epsilon\) across our 10 testings. It is interesting to note that the quantified \(\epsilon\) values fall within the range of approximately \(\epsilon = 0.23\) for the MovieLens dataset and \(\epsilon = 0.25\) for the Yelp dataset, after which the recommendation loss does not reduce significantly and remains relatively stable. Similar observations are made in Figure 6 for category-based privacy control, with \(\epsilon = 0.29\) for the MovieLens dataset and \(\epsilon = 0.33\) for the Yelp dataset.

### Scalability
Figure 7 shows that the running time of both S-EpicRec and M-EpicRec systems is no longer than 0.7 and 1.5 seconds, respectively. The running time is slightly longer for the Yelp dataset due to the larger number of public items. M-EpicRec takes longer than S-EpicRec due to its more complex optimization process (with more constraints). Since the perturbation process is typically conducted offline, the running time of our proposed framework is considered acceptable.

# Implementation

## Proof-of-Concept EpicRec System
We present the implementation of a proof-of-concept EpicRec system. As shown in Figure 8, we implement a web-based EpicRec client for movie recommendations, integrated with a standard recommender server using classic recommendation approaches. The rest of this section briefly discusses the server-side implementation and then focuses on the implementation of each component in the EpicRec client. We implement the EpicRec client on a laptop with Ubuntu Desktop OS and the recommender server on a workstation with Ubuntu Server OS.

### Movie Recommendation Service Provider
In our PoC system, we use a workstation with Ubuntu Server OS as the recommender system. We perform personalized recommendations using collaborative filtering (stochastic gradient descent algorithm) via GraphLab3. Recommendations are ranked overall and in each category. All transmissions between the client and server are secured via SSL/TLS protocol.

### EpicRec for Movie Recommendation
On the device side, we maintain a local database to store input from the public data input (C-1) and user private data input (C-2) components. We design and implement user interfaces for the user privacy control (C-3) component and read data from user input.

#### Public Data Input (C-1)
We crawl approximately 6,000 recent movies' metadata from the public "My API Films" website, including movie title, genre, plot description, and poster image. This data is stored in the "allMovies" table in the local database. Additionally, the physical files of poster images are stored locally with corresponding names as in the allMovies table. Each movie/record in this table is associated with an additional boolean attribute "watched," initialized as 0 (indicating that no movies have been watched).

#### User Private Data Input (C-2)
To obtain user private history of watched movies, we implement a simplified method by scanning the history files of popular web browsers, Google Chrome and Mozilla Firefox. We download the history files and search for each movie title, updating the "watched" attribute to 1 if a movie's title exists in the history file.

#### User Privacy Control Input (C-3)
We designed the user interface for user privacy control input, allowing users to select their overall privacy concern level from "no release," "perturbed release," or "all release." If "perturbed release" is selected, users can further specify different privacy concern levels for different categories of movies.

#### Privacy Quantification (C-5) & Data Perturbation (C-4)
If a user selects "perturbed release" without setting category-based privacy concern levels, we call C-4 and C-5 components in the S-EpicRec system. Otherwise, we call C-4 and C-5 components in the M-EpicRec system to support user-specified category-based multiple privacy concern levels.

#### Recommendation Output (C-6)
We provide users with a Netflix-style output for overall and per-category top movie recommendations. Categories are ranked on the client side by the number of movies the user has actually watched to capture user preferences.

# Conclusion and Future Work

## Conclusion
In this paper, we designed a novel practical privacy-preserving system, EpicRec, for personalized recommendations using state-of-the-art differential privacy. EpicRec provides users with a privacy control interface, allowing them to manage their privacy concerns in a way they understand, either overall or category-based. EpicRec quantifies these layman privacy concern levels to privacy budget, which is used as input for data perturbation via differential privacy. With these key components, EpicRec can work with other data collection and output components, representing an important step towards designing a practical privacy-preserving system for personalized recommendations.

## Future Work
- Improve the implementation of C-1 and C-2 components in our PoC system by potentially developing browser extensions.
- Conduct a large-scale field study to observe and understand users' natural behaviors, in-situ attitudes, and perceptions when using our browser extensions to interact with the EpicRec system.
- Continue to develop data perturbation techniques to support user streaming private data, different types of user private data, and allow users to iteratively adjust their privacy levels for trading off privacy and recommendation quality.

# References
[References listed here, formatted as per the original text.]

---

This optimized version of the text aims to be more coherent, clear, and professional, with improved structure and readability.