# Windows内存破坏漏洞的现代探索，Part I：堆栈溢出（二）
|
##### 译文声明
本文是翻译文章，文章原作者 forrest-orr，文章来源：forrest-orr.net
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
在上一篇文章中，我们为读者介绍了堆栈溢出漏洞，以及当前系统提供的针对该类漏洞的缓解措施，在本文中，我们将继续为读者详细介绍SEH劫持技术。
## SEH劫持技术
进程中的每个线程都可以注册handler函数（默认情况下也是如此），以便在触发异常时进行调用。这些handler函数的指针通常存储在堆栈上的EXCEPTION_REGISTRATION_RECORD结构体中。在任何版本的Windows上启动一个32位应用程序时，都至少会注册一个这样的handler，并将相关数据存储在堆栈中，具体如下图所示：
图6 在线程初始化过程中，NTDLL默认注册的一个SEH帧
上面高亮显示的EXCEPTION_REGISTRATION_RECORD结构体包含一个指向下一个SEH记录的指针（也存储在堆栈上），后面是指向handler函数的指针（在本例中是NTDLL.DLL库中的函数）。
    typedef struct _EXCEPTION_REGISTRATION_RECORD {
    PEXCEPTION_REGISTRATION_RECORD Next;
    PEXCEPTION_DISPOSITION Handler;
    } EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD;
在内部，指向SEH
handler列表的指针都存储在每个线程的TEB的偏移量0处，并且每个EXCEPTION_REGISTION_RECORD都链接到下一个。如果handler不能正确处理抛出的异常，它会将执行权移交给下一个handler，以此类推。
图7 SEH链的堆栈布局
因此，SEH实际上为攻击者提供了绕过堆栈Cookie的理想方法。我们可以利用堆栈溢出，覆盖现有的SHE
handler(肯定至少会有一个)，然后让应用程序崩溃(考虑到我们有能力破坏堆栈内存，这肯定不在话下)。这将导致在易受攻击函数最后调用__SECURITY_CHECK_COOKIE之前，EIP被重定向到EXCEPTION_REGISTION_RECORD结构体中被覆盖后的handler地址。因此，在执行shellcode之前，应用程序根本没有机会发现其堆栈已被破坏。
    #include
    #include
    #include
    void Overflow(uint8_t* pInputBuf, uint32_t dwInputBufSize) {
    char Buf[16] = { 0 };
    memcpy(Buf, pInputBuf, dwInputBufSize);
    }
    EXCEPTION_DISPOSITION __cdecl FakeHandler(EXCEPTION_RECORD* pExceptionRecord, void* pEstablisherFrame, CONTEXT* pContextRecord, void* pDispatcherContext) {
    printf("... fake exception handler executed at 0x%p\r\n", FakeHandler);
    system("pause");
    return ExceptionContinueExecution;
    }
    int32_t wmain(int32_t nArgc, const wchar_t* pArgv[]) {
    uint32_t dwOverflowSize = 0x20000;
    uint8_t* pOverflowBuf = (uint8_t*)HeapAlloc(GetProcessHeap(), 0, dwOverflowSize);
    printf("... spraying %d copies of fake exception handler at 0x%p to the stack...\r\n", dwOverflowSize / 4, FakeHandler);
    for (uint32_t dwOffset = 0; dwOffset  Properties -> Linker -> Advanced -> Image Has Safe Exception Handlers中进行相应的设置。
  2. SafeSEH编译的PE文件含有一个有效的SEH handler地址列表，位于名为SEHandlerTable的表中，我们可以在其IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG数据目录中指定。
  3. 每当触发异常时，在执行EXCEPTION_REGISTRATION_RECORD链表中的每个handler的地址之前，Windows会检查该handler是否位于映像内存的范围内（表明它与加载的模块有关），如果是的话，就会用它的SEHandlerTable检查这个handler地址对有关模块是否有效。
在图8中，我们是通过堆栈溢出的方式来注册handler的，通过这种方式创建的handler是无法被编译器所识别的（因此，也不会添加到SEHandlerTable中）。通常情况下，编译器会将作为__try
__except语句的副作用而创建的handler添加到这个表中。在禁用SafeSEH后，再次运行这段代码会导致堆栈溢出，执行被喷入的handler。
图10 堆栈溢出，导致执行了伪造的SEH handler，该handler被编译为PE EXE映像的主映像
当然，虽然自2005年以来Visual
Studio就默认启用了SafeSEH，但是，在现代应用程序中是否仍然存在禁用了SafeSEH的已加载PE代码呢？在自己探索这个问题的时候，我写了一个PE文件扫描工具，以便在系统范围内检测每个文件是否存在（或缺乏）漏洞缓解措施。当我使用这个扫描工具处理我的Windows
10虚拟机上的SysWOW64文件夹（并对非SafeSEH PEs进行过滤）后，结果令人大跌眼镜。
图11Windows 10 VM上的SysWOW64文件夹中的SafeSEH的PE缓解措施的扫描统计信息
看来，微软本身也有相当多的非SafeSEH PE，特别是至今仍在随Windows10一起提供的DLL。扫描我的Program
Files文件夹后，得到的结果则更有说服力，大约有7%的PE文件缺乏SafeSEH保护。事实上，尽管我的虚拟机上安装的第三方应用程序很少，但从7-zip、Sublime