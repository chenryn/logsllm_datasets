    alert(x.password)//Clobbered-password
## Exploit Example
PostWigger 提供了两个实验环境 
### Lab: Exploiting DOM clobbering to enable XSS
> ​ This lab contains a DOM-clobbering vulnerability. The comment
> functionality allows "safe" HTML. To solve this lab, construct an HTML
> injection that clobbers a variable and uses
> [XSS](https://portswigger.net/web-security/cross-site-scripting) to call the
> alert() function.
这个实验我们可以在`resources/js/loadCommentsWithDomPurify.js`路由找到这个 JS
文件，在`displayComments()`函数中我们又可以发现
    let defaultAvatar = window.defaultAvatar || {avatar: '/resources/images/avatarDefault.svg'}
    let avatarImgHTML = '';
    let divImgContainer = document.createElement("div");
    divImgContainer.innerHTML = avatarImgHTML
这里很明显我们可以用 Dom Clobbering 来控制
`window.defaultAvatar`，只要我们原来没有头像就可以用一个构造一个`defaultAvatar.avatar`进行 XSS 了。
根据前面的知识，这是一个两层的层级关系，我们可以用 HTMLCollection 来操作
这里注意`"`需要进行 HTML实体编码，用 URL 编码的话浏览器会报错`1:%22onerror=alert(1)//
net::ERR_FILE_NOT_FOUND`。
这样评论以后我们可以在自己的评论处看到：
我们再随便评论一下就好了，就可以触发我们构造的 XSS 了。
### Lab:Clobbering DOM attributes to bypass HTML filters
> ​ This lab uses the HTMLJanitor library, which is vulnerable to [DOM
> clobbering](https://portswigger.net/web-security/dom-based/dom-clobbering).
> To solve this lab, construct a vector that bypasses the filter and uses DOM
> clobbering to inject a vector that alerts document.cookie. You may need to
> use the exploit server in order to make your vector auto-execute in the
> victim's browser.
>
> Note: The intended solution to this lab will not work in Firefox. We
> recommend using Chrome to complete this lab.
这个题目也比较有意思，在`resources/js/loadCommentsWithHtmlJanitor.js`文件中，我们可以发现代码安全多了，没有明显的直接用`Window.x`这种代码了
    let janitor = new HTMLJanitor({tags: {input:{name:true,type:true,value:true},form:{id:true},i:{},b:{},p:{}}});
一开始就初始化了`HTMLJanitor`，只能使用初始化内的标签及其属性，对于重要的输入输出地方都使用了`janitor.clean`进行过滤。看起来我们没办法很简单地进行
XSS ，那我们就只能来看看`resources/js/htmlJanitor.js`这个过滤文件了。
    HTMLJanitor.prototype.clean = function(html) {
      const sandbox = document.implementation.createHTMLDocument("");
      const root = sandbox.createElement("div");
      root.innerHTML = html;
      this._sanitize(sandbox, root);
      return root.innerHTML;
    };
首先用`document.implementation.createHTMLDocument`创建了一个新的 HTML 文档用作 sandbox ，然后对于
sandbox 内的元素进行`_sanitize`过滤。
    HTMLJanitor.prototype._sanitize = function(document, parentNode) {
            var treeWalker = createTreeWalker(document, parentNode);
      //...
    }
在`_sanitize`函数一开始调用了`createTreeWalker`函数创建一个`TreeWalker`，这个类表示一个当前文档的子树中的所有节点及其位置。
    function createTreeWalker(document, node) {
      return document.createTreeWalker(
        node,
        NodeFilter.SHOW_TEXT |
        NodeFilter.SHOW_ELEMENT |
        NodeFilter.SHOW_COMMENT,
        null,
        false
      );
    }
这里的`node`即为一开始的`root`，也就是我们构造的`html`会在传入到`node`参数，`document`即为一开始的`sandbox`，接着进入循环进行判断，对于文本呢绒以及注释进行处理
    if (node.nodeType === Node.TEXT_NODE) {
        //如果此文本节点只是空白，并且上一个或下一个元素同级是`blockElement`，则将其删除
    }
    // 移除所有的注释
    if (node.nodeType === Node.COMMENT_NODE) {
      //...
    }
    //检查`inlineElement`中是否还有`BlockElement`
    var isInline = isInlineElement(node);
    var containsBlockElement;
    if (isInline) {
      containsBlockElement = Array.prototype.some.call(
        node.childNodes,
        isBlockElement
      );
    }
    //检查`BlockElement`是否嵌套
    var isNotTopContainer = !!parentNode.parentNode;
    var isNestedBlockElement =
        isBlockElement(parentNode) &&
        isBlockElement(node) &&
        isNotTopContainer;
    var nodeName = node.nodeName.toLowerCase();
    //获取允许使用的属性
    var allowedAttrs = getAllowedAttrs(this.config, nodeName, node);
    var isInvalid = isInline && containsBlockElement;
    //根据白名单删除标签
    if (
      isInvalid ||
      shouldRejectNode(node, allowedAttrs) ||
      (!this.config.keepNestedBlockElements && isNestedBlockElement)
    ) {
      // Do not keep the inner text of SCRIPT/STYLE elements.
      if (
        !(node.nodeName === "SCRIPT" || node.nodeName === "STYLE")
      ) {
        while (node.childNodes.length > 0) {
          parentNode.insertBefore(node.childNodes[0], node);
        }
      }
      parentNode.removeChild(node);
      this._sanitize(document, parentNode);
      break;
    }
最后看到值得我们关注的点：
    // Sanitize attributes
    for (var a = 0; a 
      var node = document.getElementById('x');
      console.log(node.attributes);
      for (let a = 0; a 
以上这段代码会输出一个`NamedNodeMap`对象，`id='x'`以及 finished
      var node = document.getElementById('x');
      console.log(node.attributes);
      for (let a = 0; a 
以上这段代码会输出``以及 finished
，我们可以看到我们使用`name=attributes`成功地覆盖了原来的`node.attributes`，所以`node.attributes.length`在这里的值为`undefined`，并且也没有影响
JS 代码的继续运行。
所以明白了这个简单的例子，我们可以构造一个包含有`name=attributes`的子节点的 payload 绕过属性的 check
，这里给定的白名单标签也比较明显，我们可以通过 HTML Relationships 来构造我们的 payload
接着就是构造 XSS 了，根据题目要求，需要用户访问触发，所以我们可以利用`tabindex`属性，配合`form`的`onfocus`时间来 XSS 。
把它当作评论提交
但是如果直接交给用户点击的话是不会触发的，因为评论是由 aJax 请求拿到的，直接访问的话，Dom 树是还没有评论的，得需要等待 JS
执行完成才会有评论，所以这里我们需要一个延时或者阻塞的操作。比较简单的是利用`iframe`进行`setTimeout`
    this.src=this.src+'#x',500)">
这里要注意一定要得等评论加载完毕再用`#x`选择`form`，所以这里的 500ms 需要根据自己的网络情况适当调整。
### CVE-2017-0928 Bypassing sanitization using DOM clobbering
[html-janitor](https://github.com/guardian/html-janitor/) 也就是我们上文用到的 HTML
filters，在 v2.0.2 当中，janitor 在循环中有这么几行代码：
    do {
      // Ignore nodes that have already been sanitized
      if (node._sanitized) {
        continue;
      }
      //...
      // Sanitize children
      this._sanitize(node);
      // Mark node as sanitized so it's ignored in future runs
      node._sanitized = true;
    } while ((node = treeWalker.nextSibling()));
用`_sanitized`作为标志位来标志是否已经进行标准化，但是这里，由我们上个例子可以得出，我们可以利用与上个例子类似的 payload 绕过第一个
if 就可以绕过标准化过滤了。
修复方案是删除了这些判断，对子树利用递归形式进行标准化过滤。
### XSS in GMail’s AMP4Email via DOM Clobbering
终于到了我们开头提到的 OWASP Top 10 提名的攻击实例了，作者首先通过直接在控制台输入 window 进行 fuzz
这里他首先利用了`AMP`，尝试插入``，但是这个`AMP`被 ban 了
接着找到下一个`AMP_MODE`，这个没有被 ban ，反而让作者发现了这里加载失败的 URL 当中有一个`undefined`
这就是作者插入了``导致产生的`undefined`，主要产生这个问题的代码经作者简化后是这样的：
    var script = window.document.createElement("script");