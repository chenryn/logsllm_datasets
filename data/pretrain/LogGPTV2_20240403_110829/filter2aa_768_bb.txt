### 2. WMI 内置的调试类

WMI 包含了多个专门用于调试的类，其中包括：
- `Msft_WmiProvider_Counters` 类：用于对各种操作进行计数。
- `MSFT_WmiSelfEvent` 类及其数十个派生类：专门用于生成调试事件。

### 3. WMI 调试的基础模块和类

尽管 WMI 自身包含了许多基础模块和类，并且微软文档中并未详细介绍这些内部类，但通过调试符号的帮助，我们仍然可以较为容易地理解每个类的功能及它们之间的关系。函数和属性的名称通常能够帮助推测其含义，从而设置断点或跟踪执行，这为解决某些复杂的 WMI 问题提供了条件。

接下来，我们将详细讨论 WMI 日志文件、计数器类以及故障诊断类。

### 31.6.1 WMI 日志文件

默认情况下，WMI 的日志文件保存在 `%windir%\system32\wbem\logs` 目录下。由于不同功能的 WMI 模块使用不同的日志文件，因此该目录中通常会看到十几个文件。表 31-10 列出了这些文件的名称和用途。

**表 31-10 WMI 日志文件的名称和简要介绍**

| 文件名 | 描述 |
| --- | --- |
| Dsprovider.log | 目录服务提供程序的跟踪信息和错误消息。 |
| Framework.log | 提供程序框架和 Win32 提供程序的跟踪信息和错误消息。 |
| Mofcomp.log | MOF 编译器的编译详情。 |
| Ntevt.log | 事件日志提供程序的跟踪消息。 |
| Setup.log | 报告在设置过程中未能加载的 MOF 文件。需要查看 Mofcomp.log 文件以确定失败原因。更正错误后，可以使用 mofcomp 和 -autorecover 开关重新编译 MOF 文件。 |
| Viewprovider.log | 视图提供程序的跟踪信息。需要在注册表中设置日志级别。 |
| Wbemcore.log | 大范围的跟踪消息。 |
| Wbemess.log | 与事件相关的日志条目。 |
| Wbemprox.log | WMI 代理服务器的跟踪信息。 |
| Winmgmt.log | 通常不用于诊断的跟踪信息。 |
| Wmiadap.log | 与 AutoDiscoveryAutoPurge (ADAP) 过程相关的错误消息。 |
| Wmiprov.log | 来自启用 WMI 的 Windows 驱动模型 (WDM) 驱动程序的管理数据和事件。 |

WMI 的日志功能是可配置的。WMI 核心模块的日志选项保存在以下注册表键下：

```
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM\CIMOM\
```

**表 31-11 WMI 核心模块的日志选项**

| 键值名称 | 类型 | 功能和默认值 |
| --- | --- | --- |
| Logging | REG_SZ | 记录级别，可以设为 0（不记录）、1（仅记录错误）或 2（详细记录）。默认为 2。 |
| Logging Directory | REG_SZ | 日志文件路径，默认为 `%windir%\system32\wbem\logs`。 |
| Log File Max Size | REG_SZ | 日志文件最大长度（字节数），默认为 65536 字节。 |

各个 WMI 提供程序的日志选项保存在 `PROVIDERS\Logging` 子键下的以提供程序名称命名的键中。例如，NTEVT 提供程序的日志配置选项存储在以下位置：

```
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM\PROVIDERS\Logging\NTEVT
```

**表 31-12 WMI 提供程序的配置选项**

| 键值名称 | 类型 | 功能 |
| --- | --- | --- |
| File | REG_SZ | 日志文件的完整路径和文件名。例如 `C:\WINDOWS\system32\WBEM\Logs\NTEVT.log`。 |
| Level | REG_DWORD | 定义调试信息输出的 32 位掩码（bit mask），具体取决于提供程序的实现。 |
| MaxFileSize | REG_DWORD | 日志文件最大长度（字节数），默认为 65536 字节。 |
| Type | REG_SZ | 日志输出类型，可以设为“File”（写入文件）或“Debugger”（输出到调试器）。 |

### 31.6.2 WMI 的计数器类

WMI 内部设计了一些类来收集状态和调试信息。首先来看用于对各种操作进行计数的 `Msft_WmiProvider_Counters` 类。

**Msft_WmiProvider_Counters 类** 用于对常见的函数调用进行计数。该类没有方法，只有 24 个属性，全都是 64 位无符号整数（uint64），用作计数器（Counter）。表 31-13 列出了这些属性的名称及其对应的函数调用。

**表 31-13 WMI 的计数器（Msft_WmiProvider_Counters 类的成员）**

| 属性 | 记录的调用 |
| --- | --- |
| ProviderOperation_AccessCheck | IWbemEventProviderSecurity::AccessCheck |
| ProviderOperation_CancelQuery | IWbemEventProviderQuerySink::CancelQuery |
| ProviderOperation_CreateClassEnumAsync | IWbemServices::CreateClassEnumAsync |
| ProviderOperation_CreateInstanceEnumAsync | IWbemServices::CreateInstanceEnumAsync |
| ProviderOperation_CreateRefreshableEnum | IWbemHiPerfProvider::CreateRefreshableEnum |
| ProviderOperation_CreateRefreshableObject | IWbemHiPerfProvider::CreateRefreshableObject |
| ProviderOperation_CreateRefresher | IWbemHiPerfProvider::CreateRefresher |
| ProviderOperation_DeleteClassAsync | IWbemServices::DeleteClassAsync |
| ProviderOperation_DeleteInstanceAsync | IWbemServices::DeleteInstanceAsync |
| ProviderOperation_ExecMethodAsync | IWbemServices::ExecMethodAsync |
| ProviderOperation_ExecQueryAsync | IWbemServices::ExecQueryAsync |
| ProviderOperation_FindConsumer | IWbemEventConsumerProvider::FindConsumer |
| ProviderOperation_GetObjectAsync | IWbemServices::GetObjectAsync |
| ProviderOperation_GetObjects | IWbemHiPerfProvider::GetObjects |
| ProviderOperation_GetProperty | IWbemPropertyProvider::GetProperty |
| ProviderOperation_NewQuery | IWbemEventProviderQuerySink::NewQuery |
| ProviderOperation_ProvideEvents | IWbemEventProvider::ProvideEvents |
| ProviderOperation_PutClassAsync | IWbemServices::PutClassAsync |
| ProviderOperation_PutInstanceAsync | IWbemServices::PutInstanceAsync |
| ProviderOperation_PutProperty | IWbemPropertyProvider::PutProperty |
| ProviderOperation_QueryInstances | IWbemHiPerfProvider::QueryInstances |
| ProviderOperation_SetRegistrationObject | 未实现 |
| ProviderOperation_StopRefreshing | IWbemHiPerfProvider::StopRefreshing |
| ProviderOperation_ValidateSubscription | IWbemEventProviderSecurity::AccessCheck |

WMI 已经在 `\root\CIMV2` 命名空间中定义了一个 `Msft_WmiProvider_Counters` 类的实例。使用清单 31-15 所示的 VBScript 可以获取各个计数器的值。

**清单 31-15 列出所有 WMI 计数器值的脚本**

```vbscript
strComputer = "."  
Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\CIMV2")  
Set colItems = objWMIService.ExecQuery( _ 
    "SELECT * FROM Msft_WmiProvider_Counters",,48)  
For Each objItem in colItems  
    Wscript.Echo "-----------------------------------" 
    Wscript.Echo "Msft_WmiProvider_Counters instance" 
    Wscript.Echo "-----------------------------------" 
    Wscript.Echo "ProviderOperation_AccessCheck: " & objItem.ProviderOperation_AccessCheck 
    ' 排版时省略多行，完整脚本位于 chap31\script\counters.vbs 
Next
```

### 31.6.3 WMI 的故障诊断类

WMI 定义了许多用于报告重要 WMI 事件的事件类，这些类统称为故障诊断类（troubleshooting class），并都派生自一个共同的基类 `MSFT_WmiSelfEvent`。根据事件来源，这些类被划分为三个组：WMI 服务事件诊断类、提供器事件诊断类和事件消耗器提供器诊断类。

#### WMI 服务事件诊断类

WMI 服务事件诊断类用于报告 WMI 内部服务模块中的重要事件，如创建线程池（`MSFT_WmiThreadPoolCreated`）、激活和解除事件过滤器（`MSFT_WmiFilterActivated` 和 `MSFT_WmiFilterDeactivated`）、订阅事件和取消订阅（`MSFT_WmiRegisterNotificationEvent` 和 `MSFT_WmiCancelNotificationSink`）等。所有服务事件诊断类都派生自 `MSFT_WmiEssEvent` 类，ESS 表示事件子系统（Event Sub-system）。因此，可以通过订阅 `MSFT_WmiEssEvent` 类来接收所有服务诊断类事件。

#### 提供器事件诊断类

WMI 调试中最常见的任务之一是调试 WMI 提供器，许多 WMI 故障都与某个（些）提供器有关。因此，WMI 内建了 30 多个事件类来报告各种与提供器相关的操作，包括安全检查、执行和取消查询、加载 COM 服务器、存取对象等。对于大多数操作，都设计了两个事件类，分别报告该操作执行前和执行后的状态。例如，对于取消查询操作，有两个事件类 `MSFT_WmiProvider_CancelQuery_Pre` 和 `MSFT_WmiProvider_CancelQuery_Post`。前者在提供器的 `IWbemEventProviderQuerySink::CancelQuery` 被调用前报告，后者在提供器的方法被执行后报告。

由于篇幅有限，无法一一介绍每个提供器事件类。在使用时，请参阅 SDK 文档。下面通过一个实验来介绍 `MSFT_WmiProvider_LoadOperationFailureEvent` 类。

**MSFT_WmiProvider_LoadOperationFailureEvent 类** 定义了激活或初始化提供器失败的事件。可以使用清单 31-16 所示的脚本订阅并监听此事件。

**清单 31-16 订阅并监听加载提供器失败事件（LoadFailure.vbs）**

```vbscript
strComputer = "."  
Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\CIMV2")  
Set objEvents = objWMIService.ExecNotificationQuery _ 
("SELECT * FROM Msft_WmiProvider_LoadOperationFailureEvent") 
Wscript.Echo "Waiting for events ..." 
Do While(True) 
    Set objReceivedEvent = objEvents.NextEvent 
    ' 报告事件
    Wscript.Echo "-----------------------------------------------------------" 
    Wscript.Echo "Msft_WmiProvider_LoadOperationFailureEvent event has occurred." 
    Wscript.Echo "ServerName: " & objReceivedEvent.ServerName  
    Wscript.Echo "InProcServer: " & objReceivedEvent.InProcServer 
    Wscript.Echo "InProcServerPath: " & objReceivedEvent.InProcServerPath 
    Wscript.Echo "ThreadingModel: " & objReceivedEvent.ThreadingModel 
    Wscript.Echo "ResultCode: " & objReceivedEvent.ResultCode
End Do
```

希望以上内容能帮助您更好地理解和使用 WMI 的调试功能。