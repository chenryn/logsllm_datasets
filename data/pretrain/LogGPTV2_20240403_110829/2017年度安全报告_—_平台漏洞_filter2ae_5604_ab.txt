可以被刷新初始化新的四次握手。在密钥重载的过程中，所有的四次握手
消息都是使用 PTK 完成数据机密性加密的。
### 技术细节
802.11i协议（即：WPA2协议）通过两种独立的机制来保证数据传输的机密性。
第一个是在记录层通过加密WiFi帧的方式，保证明文无法被读取或嗅探。该加密机制通常是通过AES-CCM的方式，当然也有部分启动GCM模式，还有部分老的RC4-TKIP方式。需要认真考虑的是AES-CCM(还包括GCM,
TKIP)是一种流加密，这意味着在重用加密参数key和nonce(即:初始向量)的情况下是可以被攻击的。802.11i是基于包计数(packet
number
number)的方式，其在会话建立后的初始值为0，且会不停递增（当然到了2^48的时候，会触发更新key操作）。这样一来，假设在包计数不被重置的情况下，就可以成功防范key+nonce的重用攻击。第二个机制是AP和客户端（supplicant）之间的4次握手流程，主要用于协商加密key。KRACK漏洞会直接利用到4次握手中的#3包，#3包可作用于客户端新key安装使用。
KRACK的主要漏洞在于
#3包可以被恶意阻断。当这个情况发生时，AP端会重发这个消息，会导致同样的一个key在客户端中被重装。带来的副作用是也会导致包计数会被重置为0（部分客户端，如Android6，会把key重置为0)，最终，就会触发key+nonce的重用攻击了。攻击者可以利用它来全流量解密，TCP劫持等。
此外，还有如下2种攻击:
  * 包括针对客户端的基于GTK的攻击；
  * 针对AP端的11 RFT握手攻击；
目前公开poc都是只针对客户端，和服务器进行安全检测，但不排除已经有一键傻瓜式工具利用。
### 总结
针对客户端的攻击类似中间人的形式，需要迫使无线客户端从AP连接到攻击者伪造的AP上，所以漏洞利用需要在一个有限地域范围内进行攻击，漏洞利用需要有针对性；不需要与被攻击者产生任何交互，漏洞利用触发难度小，对于针对性的实战利用是很有意义的。
漏洞存在于linux，Android到windows各种终端，可以对一些明文传输或者不正确配置的https网站进行嗅探，数据捕获，考虑到现阶段安全状况，利用效果较好。同时，WPA2
KRACK（密钥重载攻击）并没有从根本上打破WPA系列密钥体系基本的安全特性，暂时不存在更换加密方式，只需要针对特定客户端和AP进行修复。考虑到无线设备更新修复难度，建议在需要高安全性环境时，进行无线连接时采取vpn等方式加密进行连接。
360CERT建议广大用户：
  * 及时更新无线路由器、手机，智能硬件等所有使用WPA2无线认证客户端的软件版本。
  * 合理部署WIPS（无线入侵防御系统），及时监测合法WiFi区域内的恶意钓鱼WiFi，并加以阻断干扰，使其恶意WiFi无法正常工作。
  * 无线通信连接使用VPN加密隧道及强制SSL规避流量劫持与中间人攻击造成的信息泄漏。
  * 在不使用WiFi时关闭手机WiFi功能，公共WiFi下不要登录有关支付、财产等账号、密码。如需登录、支付，将手机切换至数据流量网络。
  * 及时更新官方补丁：
Linux的hostapd和wpa_supplicant 补丁地址：https://w1.fi/security/2017-1/微软在Windows 10
操作系统中发布补丁 KB4041676苹果在最新的 beta 版本iOS、macOS、 tvOS和 watchOS中修复了无线网络安全漏洞。
## BlueBorne蓝牙漏洞
上述的三个漏洞和攻击方法分别分别属于引擎，固件，协议三个方面平台安全。此外，今年还有另外一些值得我们注意漏洞。
9月12日，armis披露了一系列蓝牙的漏洞，手机开启了蓝牙，就可能被远程控制。无接触无感知接管系统的能力有点可怕，而且基本上影响所有的蓝牙设备，危害不可估量。
所有Android智能机，平板，可穿戴设备均受到4个高危漏洞的影响，其中有两个是远程代码执行漏洞(CVE-2017-0781 和
CVE-2017-0782)，有一个可被利用来进行MITM攻击（CVE-2017-0783），还有一个会导致信息泄露（CVE-2017-0785）。
Windos设备中Windows Vista以外所有版本系统均受“Bluetooth Pineapple”
攻击（CVE-2017-8628）影响，可使攻击者进行MITM攻击。微软已在今年7月11日发布安全更新，并在9月12日发布了相应的通知。iOS设备中iPhone,
iPad, iPod在iOS 9.3.5及以下版本，AppleTV7.2.2及以下版本均受RCE(远程代码执行漏洞)影响。
### 背景及相关知识
首先给出armis的披露漏洞时，整理的蓝牙架构图：
图上把蓝牙的各个层次关系描述得很详尽，不过我们这里暂时只需要关心这么几层：HCI，L2CAP，BNEP，SDP。BNEP和SDP是比较上层的服务，HCI在最底层，直接和蓝牙设备打交道，而承载在蓝牙服务和底层设备之间的桥梁，也就是L2CAP层了。每一层都有它协议规定的数据组织结构，所有层的数据包组合在一起，就是一个完整的蓝牙包（一个SDP包为例）：
虽然协议在各个平台的架构一样，但具体实现方式有所不同，Linux用的BlueZ，而Android用的BlueDroid。
  * 在Linux里，用的是BlueZ架构，c 通过注册sock协议的方式提供了针对userspace的接口。
L2CAP的数据是由HCI层传过来的，在hci_core.c的hci_rx_work函数里处理，当L2CAP层有SDP数据后，通过sdp-server.c中的io_session_event来获取这个数据包，递交给sdp-request.c的handle_request。
  * 在Android里用的时BlueDroid架构。这个和BlueZ架构很大不同的一点是：BlueDroid将L2CAP层放在了userspace。
SDP连接建立起来后，在收到SDP数据包之后呢，会触发回调函数sdp_data_ind，这个函数会把数据包交个sdp-server.c的sdp_server_handle_client_req函数进行处理。BNEP连接建立起来后，再收到BNEP的包，和SDP类似，会触发回调函数bnep_data_ind，这个函数包含了所有对BNEP请求的处理。
### 漏洞分析
Armis披露漏洞时，介绍了细节。360VulpeckerTeam对这几个漏洞进行了深入分析，这里引用借鉴下。
#### CVE-2017-1000251
这个漏洞触发的思路如下：
  * 建立和目标机器的L2CAP 连接，这里sock_type的选择应该是SOCK_RAW，如果不是，内核会自动帮我们完成sent_infomation_request , send_connection_request, send_configure_request这些操作，也就无法触发目标机器的漏洞了。
  * 建立SOCK_RAW连接，connect的时候，会自动完成sent_infomation_request的操作，不过这个不影响。
  * 接下来我们需要完成send_connection_request操作，来确定SCID,DCID。完成这个操作的过程是发送合法的 L2CAP_CONN_REQ数据包。
  * 接下来需要发送包含有L2CAP_CONF_EFS类型的数据，而且L2CAP_CONF_EFS数据的stype == L2CAP_SERV_NOTRAFIC的L2CAP_CONF_REQ包，这一步是为了让目标机器的conf_state变成CONF_LOC_CONF_PEND。
  * 这里就到了发送cmd_len很长的L2CAP_CONN_RSP包了。这个包的result字段需要是L2CAP_CONF_PENDING。这个包发过去之后，目标机器内核就会栈溢出，要么重启了，要么死机了。
我们的漏洞发生在对L2CAP_CONFIG_RSP（config response）的处理上。那么来看l2cap_config_rsp:
    staticinline int l2cap_config_rsp(struct l2cap_conn *conn,  
    struct l2cap_cmd_hdr *cmd, u16 cmd_len,  
    u8 *data)  
    {  
    struct l2cap_conf_rsp *rsp = (struct l2cap_conf_rsp *)data;  
    ...  
    scid   = __le16_to_cpu(rsp->scid);   //从包中剥离出scid  
    flags  = __le16_to_cpu(rsp->flags);  //从包中剥离出flag  
    result = __le16_to_cpu(rsp->result); //从包中剥离出result
    switch(result) {  
    caseL2CAP_CONF_SUCCESS:  
    l2cap_conf_rfc_get(chan, rsp->data, len);  
    clear_bit(CONF_REM_CONF_PEND, &chan->conf_state);  
    break;  
    caseL2CAP_CONF_PENDING:  
    set_bit(CONF_REM_CONF_PEND, &chan->conf_state);  
    if(test_bit(CONF_LOC_CONF_PEND, &chan->conf_state)) {  
    charbuf[64]; //buf数组大小64字节 
    len = l2cap_parse_conf_rsp(chan, rsp->data, len,  
    buf, &result);   
    ...  
    }  
    gotodone;  
    ...  
当收到的数据包里，满足result == L2CAP_CONF_PENDING，且自身的连接状态conf_state ==
CONF_LOC_CONF_PEND的时候，会走到 l2cap_parse_conf_rsp函数里，而且传过去的buf是个长度为64的数据，参数len
，参数rsp->data都是由包中的内容来任意确定。那么在l2cap_parse_conf_rsp函数里：
仔细阅读这个函数的代码可以知道，这个函数的功能就是根据传进来的包，来构造将要发出去的包。而数据的出口就是传进去的64字节大小的buf。但是对传入的包的数据的长度并没有做检验，那么当len很大时，就会一直往出口buf里写数据，比如有64个L2CAP_CONF_MTU类型的opt，那么就会往buf里写上64*(L2CAP_CONF_OPT_SIZE
+ 2)个字节，那么显然这里就发生了溢出。由于buf是栈上定义的数据结构，那么这里就是一个栈溢出。
#### CVE-2017-1000250
这个漏洞是BlueZ的SDP服务里的信息泄露漏洞。这个不像L2CAP层的连接那么复杂，主要就是上层服务，收到数据就
进行处理。那么我们也只需要关注处理的函数。BlueZ的SDP收到数据是从io_session_event开始。之后，数据的流向是：
io_session_event–>handle_request–>process_request。
SDP协议它有一个sdp_pud_hdr的头部，头部数据里定义了PUD命令的类型，tid，以及pdu
parameter的长度，然后就是具体的parameter。最后一个字段是continuation
state，当一个包发不完所要发送的数据的时候，这个字段就会有效。对于这个字段，BlueZ给了它一个定义：
    typedefstruct {  
    uint32_t timestamp;  
    union {  
    uint16_t maxBytesSent;  
    uint16_t lastIndexSent;  
    } cStateValue;  
    } sdp_cont_state_t;  
对于远程的连接，PDU命令类型只能是这三个:SDP_SVC_SEARCH_REQ, SDP_SVC_ATTR_REQ,
SDP_SVC_SEARCH_ATTR_REQ。这个漏洞出现在对SDP_SVC_SEARCH_ATTR_REQ命令的处理函数service_search_attr_req里面
,其功能有这几点：