# 从一道CTF题目中学习新的无字母webshell构造
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
前几天的RCTF2020中，有一道web题calc考察的是构造无字母的shell，非常有学习意义，这里跟各位师傅分享一下。本人菜鸟一枚，文章中如有不对的地方，望各位师傅指出，勿喷~~~
## 题目分析
题目只允许使用以下字符：
    ! # % & ( ) * + - / 0 1 2 3 4 5 6 7 8 9 : ;  ? @   { | } ~
如何仅仅通过数字和一些可见字符，实现任意的php代码执行呢？这里运用到的，是关于 **`.`运算符的自动类型转换**。
## 关于点运算符的自动类型转换
我们来看下面的例子：
在第2行，如果我们没有对数字加括号，`php解析器`就会将其视为`float`类型数值。  
在第3行，如果对数字加上括号，由于`运算符优先级规则`，此时就变成两个数字进行`.`运算，`php解析器`会把两个数字自动转换成`string`类型，效果相当于使用`strval`函数。
而且，该自动类型转换不仅仅限于数字，看下面的例子：
可以看到，只要不是`php`中有特定功能的字符，都可以通过这种方法将其转换成`string`。显然，这是我们需要在解题中利用的点。  
但问题又来了，题目过滤了字母和常用字符，我们应该如何构造它们呢？看下面的例子：
我们这里利用`NAN`、`INF`等特殊的数值表示，通过`.`运算符将其转换成`string`。至于元素的提取，虽然题目过滤了`[]`，但是`php`还支持使用`{}`获取`Array`和`String`的元素。  
通过这些特殊的数值表示，我们就有了一些`初始字符`，接下来就利用`& |
~`等没有被过滤的运算符，将需要的字符构造出来即可，这也是题目名`calc`的含义所在。
现在思路有了，接下来就愉快地拿flag吧！
## 做题过程
实现任意命令执行的方式有很多，我这里使用的是`system(end(getallheaders()))`，然后在http包首部的最后添加任意键值，即可实现任意命令执行。（该思路借鉴于Y1ng师傅，已征得同意进行分享）
运行根目录的`/readflag`，发现又是一道计算题，跟`*ctf2019-mywebsql`的一模一样，直接上脚本：
     array("pipe", "r"),
        1 => array("pipe", "w"),
        2 => array("file", "/tmp/error.log", "a")
    );
    $cwd = "/";
    $env = array();
    $process = proc_open("/readflag", $d, $pipes, $cwd, $env);
    if (is_resource($process))
    {
        $d = fread($pipes[1], 1024);
        $d = fread($pipes[1], 1024);
        $d = explode("n", $d);
        eval("$result = $d[0];");
        eval("$result = $d[0];");
        fwrite($pipes[0] , "$resultn");