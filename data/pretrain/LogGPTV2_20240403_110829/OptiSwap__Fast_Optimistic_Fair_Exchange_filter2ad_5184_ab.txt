S2 Security against malicious Sellers: Honest Buyers will either learn the correct witness x
or will get their coins back (cf. Receiver fairness of [14]).
S3 Security against grieving: In case of a dispute, the cheating party must always com-
pensate the cheated party for any transaction fees paid during the dispute process (fee
fairness).
Additionally to the security properties, we also need our protocol to be ecient. Therefore,
we dene the three following eciency requirements:
E1 Circuit independent communication: The size of all messages sent by Seller and Buyer
in the optimistic case must be O(|x|).
E2 Constant round complexity in the honest case: If the correct witness is transferred with-
out dispute, the protocol must run at most 5 rounds.
E3 Upper bounded round complexity in the pessimistic case: Even in case of dispute, the
protocol terminates after nitely many rounds where the exact number of rounds is
upper bounded by O(min(Œ¥ ‚àó (cid:96), log(n) ‚àó œâ)).2
In Section 5 we will argue why our protocol achieves all desired eciency and secu-
rity properties. A formal proof in the Universal Composability model can be found in Ap-
pendix E.
3.2 OptiSwap Protocol
At the core of the fair exchange protocol, Buyer and Seller use a smart contract, which has
the authority over the payment and is used as a judge if the two parties disagree. Similarly
to the FairSwap protocol of [14] the smart contract will evaluate a Proof of Misbehavior
(PoM) in this case. This short proof is used to show that the Seller sent a wrong witness
2 There are dierent dispute resolution procedures which are more or less ecient depending on
the circuit parameters. The procedures are described in Section 3.5. In particular, the round
complexity for the le sale application is O(log(n)).
6
(cf. Section 2.1). In contrast to the FairSwap protocol, the Buyer does not already have the
data to generate a PoM. Instead he needs to interactively challenge it from the Seller.
In the following we describe all steps on the protocol informally. A formal description for
every party as well as a formal model for ledger and contracts can be found in Appendix C
and B, respectively.
Round 1 The Seller starts the protocol by encrypting the witness x element by element,
i.e., ‚àÄi ‚àà [n] : zi = Enc(k, xi). Then he commits to both, the encryption (by computing
rz ‚Üê MTHash(z1, . . . , zn)) and the used encryption key (c, d) ‚Üê Commit(k). Now, the judge
contract can be initialized by the Seller. It is parameterized by the addresses of Seller and
Buyer, the price p, public auxiliary information aux of the witness exchange, including fee
and timing parameters (cf. Section 5). Additionally, both commitments rz and c are stored
in the contract, while the encrypted data z is sent to the Buyer directly.
Round 2 In the second round, the Buyer needs to conrm that he received the rst message
from the Seller and that he agrees with the parameters in the contract. In particular, he
recomputes the Merkle tree root rz of the ciphertext and checks all contract parameters
including the price and auxiliary information. If he does not agree with any of them, he
aborts the protocol. Otherwise, he sends a transaction to the judge contract which signals
his acceptance and transfers the agreed upon payment to the contract. Note, that the Buyer
cannot decrypt the witness at this point, because he does not know the key k and neither
the encryption z nor the commitment c reveal any information about x or k.
Round 3 Now that the coins are locked in the contract, the Seller can reveal the encryption
key. In order to make this action publicly veriable he stores the key in the smart contract,
which veries its correctness (Open(c, k, d) = true).
Round 4 Since the key is stored publicly, the Buyer can now decrypt the witness: ‚àÄzi ‚àà z :
Dec(k, zi) = xi. At this point we distinguish two cases. In the optimistic case the witness
was correct, which the Buyer veries by running œÜ(x) = 1. In this case he conrms the
successful transfer to the contract, which triggers the payment to the Seller. Even when the
Buyer does not send this message, the Seller can collect the coins after some timeout has
passed in the next round. This timeout is necessary for the second case which we call the
dispute or pessimistic case, in which the Buyer nds that the received witness is incorrect,
i.e., œÜ(x) = 0. In this case the Buyer will start the interactive dispute protocol, which will
eectively freeze the coins in the contract until a malicious party is found.
3.3
Interactive Dispute Handling
The dispute protocol is based on an interactive challenge-response procedure between Seller
S and Buyer B. The goal is to identify a single gate within the circuit in which the evaluations
of both parties dier. Then the Buyer can use this information to prove that he received a
false witness using a Proof of Misbehavior (PoM). Recall that for evaluating the PoM about
the i-th gate, the judge requires as input the gate œÜi, its inputs in1
i and the gate
output computed by S: outpi. The Buyer will query these information from S by repeatedly
asking for outputs of circuit gates. All queries and responses will be recorded by the judge
contract.
The Buyer starts by querying the result for the last gate œÜm, which is the overall output
of the evaluation of œÜ(x). If the Seller replies with outpm = 0 B can immediately prove that
S misbehaved. If the Seller cheats, he could claim that outpm = 1, which means both parties
have dierent results on the output of the gate. Now, B challenges the outputs of all input
gates of œÜm and obtains inm = (in1
m) which he can compare to his own computed
values. Again the Seller can either send the values which correctly evaluated to his alleged
result (œÜm(inm) = outpm), or he could send mismatched values, such that œÜm(inm) (cid:54)= outpm.
m, . . . , in(cid:96)
i , . . . , in(cid:96)
7
If the second case happens, again the Buyer triggers the PoM evaluation of the contract,
which will verify that the Seller is cheating.
During this dispute resolution, the contract veries the alternating participation of Seller
and Buyer. In every repetition j, the Buyer challenges the input gates inj to one or more
of the challenged gate of the previous round outpj ‚àà in(j‚àí1). The Seller has to respond by
sending all corresponding output values to the challenged gates. This way the Buyer can
evaluate œÜi(inj) = outpj. Seller and Buyer repeat this challenge-response procedure until
one of the following cases happens:
(i) The Seller does not respond to the challenge (in time). In this case the Buyer can request
the money back from the contract.
request the payment.
(ii) The Buyer does not send a new challenge or a PoM (in time). In this case the Seller can
(iii) The Seller responds incorrectly to a challenge, i.e., œÜi(inj) (cid:54)= outpj. In this case the Buyer
reveals the instruction of the gate œÜi and proves with a Merkle tree proof that this gate
is part of the circuit œÜ. Now the judge contract can verify that the Seller misbehaved
and sends the coins back to the Buyer.
(iv) The Seller sends a wrong witness. This case can happen, when one of the requested
inputs is an element of the witness but the Seller responds with a dierent element xi
than the Buyer decrypted x(cid:48)
i. In this case the Buyer will send the ciphertext value zi to
the contract and includes a Merkle tree proof that zi is the i-th element of z (using rz).
Again the contract will be able to verify this cheating and reward the coins back to the
Buyer.
(v) The last case occurs when the Buyer exhausts allowed challenge limit aœÜ. This means
the Buyer could not prove cheating of the Seller in time and the contract will send the
payment to the Seller. The challenge limit aœÜ is xed for every circuit before the protocol
start and denotes the maximum number of gates that the Buyer needs to challenge in
order to prove cheating.
Challenge limit parameter. As mentioned before, the judge is responsible for limiting the
number of possible challenges. To this end, the judge is initialized with a challenge limit
parameter aœÜ during the rst protocol round as part of the auxiliary information aux. This
parameter denes the maximal number of challenged circuit gates and it is important that
both parties agree on it. The value must be large enough such that the Buyer is able to
prove misbehavior for any possible gate or input value. At the same time it should be as
small as possible to reduce the runtime and cost of a dispute.
3.4 Formal Description
In this section, we give a formal denition of the judge smart contract and the two protocol
parties named Seller and Buyer. We formally prove the security of our construction within
the universal composability framework in Appendix E.
In order to shorten the formal description of the judge smart contract and the proto-
col parties, parts of the computations are extracted to small algorithms. We denote these
algorithms by expressive names such that the reader is able to follow our description. See
Appendix D for some explanation of them.
We start the formal protocol description with the denition of the judge given below.
It models a smart contract that interacts with both protocol parties, S and B, as well as
the global ledger L and a global random oracle H. We present details about L and H in
Appendix B. In comparison to the judge functionality used by FairSwap, GL,H
as dened
below additionally contains functions for handling the challenge-response procedure as well
as timeouts.
jc
8
Judge hybrid functionality GL,H
jc
The judge stores two addresses pkS and pkB, a commitment c, a decryption key k,
Merkle tree root hashes rz, re, and rœÜ, the maximum number of challenged gates
aœÜ ‚àà N, a price p ‚àà N, and the fee parameters fS , fB ‚àà N. Moreover, it contains
a state s which is initially set to s = start and it stores the most recent challenge
query Qr and the most recent response Rr. Additionally, GL,H
contains two timeout
parameters T1, T2 ‚àà N and corresponding variables t1, t2 ‚àà N, respectively.
All stored values depend on the session identier id corresponding to one protocol
execution. Hence, the values are functions evaluating on the session identier, e.g.,
the state s on input id is initially set to s(id) = start. For the sake of simplicity, the
input parameter id is omitted in the following description.
jc
Initialization
On receiving (initialize, id, c, rz, re, rœÜ, aœÜ, p, fS , fB) from S when s = start, store
pkS , c, rz, re, rœÜ, aœÜ, p, fS , and fB. Output (active, id, c, rz, re, rœÜ, aœÜ, p, fS , fB) and
set s = active.
On receiving (accept, id) from B when s = active, store pkB and send
(f reeze, id,B, p) to L. If the response is (f rozen, id,B, p), set s = initialized
and output (initialized, id).
Abort
On receiving (abort, id) from S when s = active, set s = f inalized, and output
On receiving (abort, id) from B when s = initialized, send (unf reeze, id,B) to L,
(aborted, id).
set s = f inalized, and output (aborted, id).
Revealing
On receiving (reveal, id, k, d) from S when s = initialized and Open(c, k, d) = true,
output (revealed, id, k, d), set t1 = now, and s = revealed.
Challenge-Response
On receiving (challenge, id, Q) from B when s = revealed or s = responded, |Q| ‚â§
aœÜ, and ‚àÄi ‚àà Q : 1 ‚â§ i ‚â§ m send (f reeze, id,B, fB ‚àó |Q|) to L. If it responds
with (f rozen, id,B, fB ‚àó |Q|), set Qr = Q, aœÜ = aœÜ ‚àí |Q|, t2 = now, output
(challenged, id, Q) and set s = challenged.
On receiving (respond, id, Rq) from B when s = challenged, send (f reeze, id,S, fS ‚àó
|Qr|) to L. If it responds with (f rozen, id,S, fS ‚àó |Qr|), set Rr = Rq, t2 = now,
output (responded, id, Rq) and set s = responded.
9
Timeouts
On receiving (challenge timeout, id) from S when s = responded and t2 +T2 ‚â§ now,
On receiving (response timeout, id) from S when s = challenged and t2 +T2 ‚â§ now,
set s = f inalized, send (unf reeze, id,S) to L, and send (sold, id) to S.
set s = f inalized, send (unf reeze, id,B) to L, and send (cancelled, id) to B.
Finalizing
(valid, id) to B and (not sold, id) to S.
to S.
On receiving (complain, id) from B when s = responded, set s = f inalized and do
one of the following:
 If ValidateResponse(Qr, Rr, re) = false send (unf reeze, id,B) to L, send
 Otherwise, send (unf reeze, id,S) to L, send (invalid, id) to B and (sold, id)
On receiving (prove, id, œÄ) from B when s = responded, set s = f inalized and do
one of the following:
 If Judge(k, rz, re, rœÜ, œÄ) = 1 send (unf reeze, id,B) to L, send (valid, id) to B
 Otherwise, send (unf reeze, id,S) to L, send (invalid, id) to B and (sold, id)
On receiving (f inalize, id) from B when s = revealed, send (unf reeze, id,S) to L,
On receiving (f inalize, id) from B when s = revealed and t1 + T1 ‚â§ now, send
set s = f inalized and send (sold, id) to S.
(unf reeze, id,S) to L, set s = f inalized, and send (sold, id) to S.
and (not sold, id) to S.
to S.
We continue with the denition of an honest Seller and Buyer in the OptiSwap protocol.
Both protocol parties are formally dened below.
Honest Seller and Buyer Description
The protocol description comprises a denition of the behavior of the honest Seller S
and Buyer B. Within the protocol, two timeouts T1, T2 ‚àà N are used. These timeouts
are dened and handled by the judge smart contract functionality GL,H
.
jc
Initialization
S: On receiving (sell, id, x, œÜ, p, fS , fB), where x = (x1, . . . , xn) ‚àà ({0, 1}Œª)n, œÜ be-
ing a circuit with challenge limit property aœÜ, œÜ(x) = 1, and p, fS , fB ‚àà N,
S samples a key k ‚Üê Gen(1Œ∫), computes a commitment (c, d) ‚Üê Commit(k),
and executes the presetup algorithm (z, rz, re, rœÜ) ‚Üê Presetup(œÜ, x, k). He sends
(initialize, id, c, rz, re, rœÜ, aœÜ, p, fS , fB) to GL,H
and (sell, id, z, œÜ) to B. He con-
tinues in the Revealing-phase.
B: On receiving (buy, id, œÜ), where œÜ being a circuit with challenge limit property
aœÜ, B checks if he received a message (sell, id, z, œÜ) from S beforehand. Then,
he computes rz = MTHash(z) and rœÜ = MTHashM tree(œÜ). Upon receiving
(active, id, c, rz, re, rœÜ, aœÜ, p, fS , fB) from GL,H
, B responds with (accept, id) to
GL,H
jc
and continues in the Revealing-phase.
jc
jc
10
Revealing
jc
jc
S: On receiving (initialized, id) from GL,H
, S reveals his key generated in the Ini-
. He continues in the Fin-
B: On receiving (revealed, id, k, d) from GL,H
tialization-phase by sending (reveal, id, k, d) to GL,H
ish-phase.
On receiving (abort, id), S sends (abort, id) to GL,H
and continues in the Finish-
phase.
, B decrypts the witness x(cid:48) = Dec(k, z),
outputs (revealed, id, x(cid:48)), and evaluates œÜ(x(cid:48)). If the output is 1, he sends a
(f inalize, id) message to GL,H
, outputs (bought, id, x(cid:48)), and terminates the pro-
tocol. Otherwise, he sets the set of obtained responses R := ‚àÖ, creates a chal-
lenge query by executing (Q, H(cid:48)) ‚Üê NextChallenge(œÜ, R, H), updates the most
recent query Qr = Q, and sends (challenge, id, Q) to GL,H
. B continues in the
Challenge-Response-phase.
On receiving (abort, id), B sends (abort, id) to GL,H
phase.
and continues in the Finish-
jc
jc
jc
jc
jc
Challenge-Response
B: On receiving
from GL,H
, B computes
jc
jc
If
sends
check
(responded, id, Rq)
check = false, he
=
ValidateResponse(Qr, Rq, re).
(complain, id)
to GL,H
and continues in the Finish-Phase. Otherwise, B adds the re-
ceived responses to the set of all responses R = R ‚à™ Rq and computes
œÄ = GenerateProof(k, œÜ, R). If œÄ (cid:54)= false, he sends (prove, id, œÄ) to GL,H
and
continues in the Finish-phase. Otherwise if œÄ = false, B generates the next
challenge (Q, H(cid:48)) ‚Üê NextChallenge(œÜ, R, H) and sends (challenge, id, Q) to
GL,H
If no (responded, id,¬∑) message was received after timeout T2, B sends a
(response timeout, id) message to GL,H
, he generates the corre-
sponding response by computing Rq ‚Üê GenerateResponse(œÜ, x, k, Q) and sends
(respond, id, Rq) to GL,H
If no (challenged, id,¬∑) message was received after timeout T2, S sends a
(challenge timeout, id) message to GL,H
and continues in the Finish-phase.
and continues in the Finish-phase.