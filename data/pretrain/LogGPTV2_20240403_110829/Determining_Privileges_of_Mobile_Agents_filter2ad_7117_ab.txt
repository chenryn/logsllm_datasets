the certificate to the entity issued the certificate.  While an 
attribute certificate has a clear and singular subject – the 
agent  assigned  the  privileges  –  a  policy  certificate,  in 
general, may apply to a broader range of subjects than an 
individual  platform.    For  example,  having  a  policy 
certificate  issued  by  a  domain  authority  apply  to  many 
agent  platforms    (i.e.,  those  comprising  the  domain) 
would  be  desirable  in  some  situations.    Such  multi-
platform  policy  allocation  can  be  accomplished  through 
an appropriate choice of an entity name for the owner of 
the certificate (e.g., a DNS domain name).  As with most 
security policy information, the platform administrator or 
security officer is relied upon to apply the relevant policy 
certificates  for  the  platform  by  setting  configuration 
parameters.    Policy  certificates  may  reside  elsewhere, 
other  than  the  platform  itself,  if  the  location  does  not 
provide  an  avenue  for  attack.    Policy  certificates  are 
validated by an agent platform during its initialization and 
the policy content can be applied at that time or later, on 
demand.  
Privilege management certificates can be represented 
in a variety of ways – typically using the Abstract Syntax 
Notation  1  (ASN.1)  Distinguished  Encoding  Rules.  
While an ASN.1 encoding does work sufficiently, it has a 
serious  drawback 
in  not  being  a  human  readable 
representation.  Moreover, ASN.1 parser tools are neither 
widely available nor platform independent.  To overcome 
these limitations,  we elected to use an eXtended Markup 
Language 
privilege 
management certificates.   
The  XML  certificate  representation  closely  follows 
the  basic  certificate  structure  in  Figure  2.    Although  the 
structure  of  a  privilege  management  certificate  is  fixed, 
portions of it were purposely left open to refinement and 
substitution. 
  The  “attributes”  and  the  “extensions” 
elements  are  intended  to  convey  policy  represented  in 
various  types  of  specification  languages  and  certificate 
handling  information,  respectively.    The  contents  of  the 
“attributes” element are determined by a syntax identifier, 
making it easy to select among different forms of policy 
representation.    The  “extensions”  element  by  its  very 
nature supports adding additional elements to a privilege 
management  certificate  to  meet  the  needs  of  an  agent 
system  or  an  application  running  over  it.    Convention 
dictates that each extension element contains a criticality 
flag and that the processing platform, upon encountering a 
critical  extension  it  does  not  recognize,  rejects  the 
certificate.  
Consider the types of policy expression that might be 
conveyed  within  privilege  management  certificates  by 
examining 
system 
management.    Matchmaker  [3]  uses  a  complex  form  of 
in  distributed 
representation 
(XML) 
for 
related 
efforts 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:44 UTC from IEEE Xplore.  Restrictions apply. 
policy expression to broker between service providers and 
consumers  via  a  classified  advertisement  (or  classads) 
data  model.    A  classad  allows  logical  expressions  to  be 
used  within  attributes  to  qualify  the  service  offered  or 
required  and  also  supports  arithmetic  expressions  and 
computations  involving  real  numbers  in  determining  a 
match.    A  more  general  scheme  devised  by  Koch  et  ali. 
entails the use of a Policy Definition Language (PDL) to 
specify  executable  rules  suitable  for  automation  of 
management  policy  [4].    The  PDL  supports  logical 
expressions  used  as  the  precondition  for  triggering 
management  actions. 
  The  IETF’s  Security  Policy 
Specification  Language  [5],  although  specialized  for 
security  and  Internet  communications,  generally  follows 
the PDL in terms of functionality.  Here the management 
actions involve the form of protection to be applied to the 
communications. 
2.2  Policy-Setting Principals 
for 
example, 
could  be, 
The  types  of  policy-setting  principals  supported 
among  existing  agent  systems  vary  in  both  number  and 
definition.    We  discovered,  however,  that  these  policy-
setting  principals  could  be  mapped  into  one  of  three 
distinct  classes  of  principals:  branding,  using,  or  hosting 
classes.  Branding principals are those entities involved in 
attesting  for  characteristics  of  the  agent’s  code.    A 
branding  principal 
the 
manufacturer  who  develops  the  code,  an  evaluator  who 
reviews  the  code,  or  an  owner  who  purchases  the  code.  
Using  principals  represent  the  individual  or  organization 
on whose behalf the agent operates, and cause the agent to 
be launched.  Typically, a single using principal exists for 
each agent, the user of the agent, but multiple users could 
be  involved  in  situations  where  concurrence  of  other 
individuals is required, such as in some military command 
and  control  operations  where  a  two-person  rule  applies.  
Hosting  principals  are  those  entities  having  resource 
authorization control over the agent platform.  A hosting 
principal could be, for example, the system administrator, 
the system security officer, the owner of the platform, or 
an  authorization  authority  for  the  domain  in  which  the 
platform operates.   
  With  our  method,  a  policy-setting  principal  is,  in 
effect,  any  entity  that  issues  privilege  management 
certificates.    Therefore,  the  relationship  between  policy-
setting  principals  of  existing  agent  systems  and  those 
represented  under  our  method  must  be  established 
through  the  types  of  certificates  a  principal  can  issue.  
Specifically,  hosting  principals  issue  policy  certificates, 
while  branding  and  using  principals  issue  attribute 
certificates,  which  differ  only  insofar  as  those  issued  by 
the  latter  convey  additional  information  peculiar  to  a 
specific  instance  of  an  agent.    Certificate  assignment  is 
illustrated  in  Figure  3.    Joint  signing  and  issuing  of 
certificates  by  multiple  policy-setting  principals  is  an 
option not explored here.   
Branding
Using
Hosting
Attribute
Certificates
Attribute
Certificates
Policy
Certificates
Agent
Agent
Platform
Figure 3: Certificate assignment 
to  other  entities 
As  with  identity  certificates,  privilege  management 
certificates may involve chains of delegation, whereby the 
privileges of an issued certificate are derived from those 
held by the issuer in the form of a privilege management 
certificate.    That  is,  besides  agents  and  agent  platforms, 
privilege  management  certificates  can  be  issued  to 
designated individuals, if needed, who in turn redelegate 
their  assigned  privileges 
through 
certificate 
issuance,  forming  verifiable  authorization 
chains.    Thus,  the  scheme  can  support  many  different 
styles  of  privilege  authorization  and  delegation,  from  a 
push-style,  where  a  policy-setting  principal  first  gains 
privileges 
from  an  authorization  authority  before 
allocating  them  to  an  agent,  to  a  pull  style  where  the 
visited  platforms  contact  an  authorization  authority  to 
confirm the legitimacy of privileges allocated to an agent 
by  a  policy-setting  principal.    Agent  systems,  which 
typically  have  fixed  principals,  cannot  match 
the 
flexibility  afforded 
through  privilege  management 
certificates and the ability to chain authorizations. 
This is not meant to imply that privilege management 
certificates  should  be  applied  unconditionally.    On  the 
contrary,  policy-setting  principals  should  be  designated 
judiciously and their certificate issuing applied selectively 
to  minimize  policy-processing  overhead,  yet  meet  the 
intended  security  policy  requirements.    For  example,  not 
all  agents  need  to  carry  issued  certificates,  only  those 
needing special privileges for their actions.  Similarly, not 
all  three  classes  of  policy-setting  principals  need  be 
involved in an application, only those having relevance. 
2.3  Policy Processing 
An  agent  moves  among  agent  platforms  carrying 
along  any  issued  attribute  certificate(s).    To  simplify 
processing  at  a  platform,  an  agent  may  optionally  carry 
information  about 
its  attribute 
certificate(s) 
(e.g.,  a  user  or  other  policy-setting 
principal), such as any attribute certificate(s) and identity 
issuer(s)  of 
the 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:44 UTC from IEEE Xplore.  Restrictions apply. 
The 
agent 
through 
provides 
platform,  which 
certificate(s)  held.  The policy certificates  for a platform 
must  be  validated  when  the  platform  is  initialized  and 
used  to  establish  the  platform  policy.    A  platform 
receiving the agent determines the validity and relevancy 
of the agent’s certificate(s),  verifies the issuer’s identity, 
perhaps  with  the  assistance  of  a  PKI,  and  determines 
whether  the  agent’s  privileges  conveyed  in  its  attribute 
the  platform’s  prevailing  policy 
certificates  and 
established 
the  policy  certificates  form  a 
compatible security context for the agent. 
the 
computational environment of an agent system, inherently 
shoulders responsibility for the processing of policy.  This 
is  quite  reasonable,  given  the  design  goals  for  an  agent 
system  regarding  security  (e.g.,  perform  the  requisite 
authentication  and  access  control  of  other  entities).  
Policy computation is a security-relevant mechanism and, 
in  classical  security  terms,  must  be  part  of  the  trusted 
computing base.  Therefore, policy computation  must be 
implemented  as  a  trusted  component  of  the  agent 
platform,  and  its  results,  the  privilege  set  computed  for 
the  agent,  must  be  enforced  by  the  platform  security 
mechanisms  within  the  computing  base.    Most  agent 
systems  have  a  means  for  extending  the  agent  platform 
with additional program components, for example, in the 
form  of  static  agents,  which  is  needed  for  flexible 
implementation of the policy computation.   
Policy  computation  can  be  characterized  as  a  policy 
engine  component  that  in  turn  is  divided  into  two  parts: 
an  outer  and  an  inner  policy  engine.    The  operations  of 
the  outer  policy  engine  are  generic,  while  those  of  the 
inner engine can be tailored to the specific contents of the 
privilege  management  certificates.    Figure  4  illustrates 
this characterization.   
Outer
Policy Engine
Attribute
Certificates
Policy
Certificates
Ordered Set of
Validated Attribute
Certificate Objects
Policy Object
Inner
Policy
Engine
Security
Context
for Agent
Figure 4: Policy engine organization 
The outer policy engine is responsible for parsing and 
those  certificates 
verifying 
associated  with  an  agent,  validating  the  certificates’ 
contents  including  the  signature  and  any  certificate 
the  well-formedness  of 
chains,  eliminating  any  certificates  not  applicable  at  the 
platform,  and  ordering  the  validated  attribute  certificates 
according  to  the  policy  precedence  hierarchy  among 
issuers.  It also fetches the platform policy regarding the 
agent,  established  from  the  policy  certificates  of  the 
platform at initialization.  Validation of certificate chains 
can be a complicated process involving the possibility of 
expired  or  revoked  certificates  and  the  necessity  to 
retrieve  supporting  information.    In  ordering  attribute 
certificates, the outer engine must ascertain the principals 
involved,  their  role  in  the  process  (i.e.,  as  an  issuer  of 
specific certificate types and variants) and the precedence 
relationships existing among principals.   
The  job  of  the  inner  engine  is  to  determine  the 
security  context  for  an  agent  at  a  platform  using  the 
information provided by the outer engine.  It does this by, 
processing  the  contents  of  validated  attribute  certificates 
against  the  platform  policy  and  rendering  a  verdict  on 
whether to allow processing by the agent and under what 
set  of  privileges  to  do  so.    The  two-part  organization 
allows  the  inner  engine  to  be  relatively  simple  and 
tailorable to the needs of the application, while the outer 
engine  handles  the  complex  yet  common  interpretation 
and validation work. 
From this overview, we see that the scheme relies on 
the placement of policy rules within certificates bound to 
agents  and  agent  platforms,  and  on  the  placement  of 
policy  processing  capability  at  an  agent  platform.    This 
approach  provides  sufficient  flexibility  to  encompass  a 
very  broad  range  of  policies,  suitable  for  most  agent-
based  applications.    The  benefits  of  this  approach  are 
derived from the kinds of certificates supported and their 
form and content.   
3.  Java-Based Agent Systems 
for 
and 
runtime 
environment 
  Many  agent  systems  rely  on  the  Java  programming 
language 
their 
implementation.    While  not  an  agent  system  itself,  Java 
supports  code  mobility,  dynamic  code  downloading, 
digitally  signed  code,  remote  method  invocation,  object 
serialization,  platform  heterogeneity,  and  other  features 