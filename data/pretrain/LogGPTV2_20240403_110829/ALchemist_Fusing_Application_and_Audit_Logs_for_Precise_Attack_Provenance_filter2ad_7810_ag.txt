0
114/40 181K/1463
155K/680
112/37
307/26
697K/297
73/19 154K/5349
4
98.9%
95.6%
69.3%
56.5%
71.9%
86.4%
87.1%
92.5%
94.8%
69.6%
98.6%
90.9%
98.1%
100%
-
-
-
-
-
-
-
-
-
-
-
-
100% 92/4 37/2 91.9%/71.4% 96.6%/83.3%
100% 16/0 0/0 80.2%/100% 100%/100%
-
77.4%
-
64.5%
84.7%
-
100% 12/0 0/0 90.4%/100% 100%/100%
-
78.6%
87.9%
-
100% 14/0 0/0 83.9%/100% 100%/100%
81.3%
-
99.3% 20/0 4/1 93.4%/100% 98.6%/97.2%
100% 13/0 0/0 94.2%/100% 100%/100%
98.1% 9/0 0/0 91.8%/100% 100%/100%
100% 0/0 0/0 100%/100% 100%/100%
-
-
-
-
-
-
132 6 132 0
0
820/216 987K/13K 73/13 2/0 92.8%/97.7% 99.6%/100% 286 166
86.4%
90.8% 22/1 5/1 90.7%/96.4% 99.4%/97.6%
columns are the same information for OmegaLog that uses
both application and audit logs. Our experiments show that
ALchemist can precisely identify all the attack-related units in
the 14 attacks. At the individual event level, ALchemist can
achieve 92.8% precision and 99.6% recall for audit records,
whereas NoDoze can achieve 86.4% precision and 90.8%
recall and OmegaLog achieves 90.7% precision and 99.4%
recall (for the subset of attacks it supports). ALchemist has
some false positives for attacks 4 and 7 that involve ﬁrefox and
rootkit Azazel with highly asynchronous execution and sophis-
ticated process injection techniques. As such, some of the low
level events are attributed to the wrong unit by the forward
attribution rule. These events do not have clear projection to
the application log. In contrast, NoDoze does not have good
accuracy for attacks 3, 4, 5, and 10 that involve ﬁrefox and
libreofﬁce with a lot of background behaviors. As illustrated
by the example in Fig. 11, NoDoze cannot prevent bogus
dependencies caused by asynchronous background behaviors.
It mistakenly introduces dependencies between foreground unit
and the completely unrelated background unit as it cannot
distinguish them. NoDoze misses important events in 6 out
of 10 attacks and the recall for attacks 3, 4, 5 are low. This is
because the attacks leveraged frequently executed apps and
dependencies, which are mistakenly excluded by NoDoze.
These events are critical in understanding attack provenance.
We also want to point out that NoDoze requires collecting
execution proﬁle and training whereas ALchemist does not.
Omega does not handle applications that have background
Fig. 15: Causal graph of attack #4 by ALchemist
behaviors and hence the provenance graphs for attacks 3, 4,
5, 7, 8 and 10 explode (and hence the ‘-’ values). It works
well for the other attacks. Observe that ALchemist consistently
outperforms.
VI. CASE STUDIES
We use two representative attacks: Exﬁltration (attack #
4) and Azazel Injection (attack # 7) to demonstrate the
effectiveness of ALchemist in comparison with NoDoze. They
demonstrate how NoDoze misses critical attack steps such as
those related to commonly visited mail.yahoo.com and the
/home/user folder.
A. Attack #4: Exﬁltration
Attack Scenario. The attacker sends an email with a malicious
attachment to the victim. The victim downloads the malicious
HTML ﬁle to “file:///home/user/poc.html”. Then
the victim opens the HTML ﬁle in ﬁrefox. Based on the same
origin policy [12] by ﬁrefox, poc.html has the access to all
ﬁles in a folder if one of its DOM objects has access to these
14
… mail.yahoo.com poc.htmlanonymous.comﬁle 1 ﬁle nz.z.z.z poc.htmlABTab 1Tab 269.147.64.33CTABLE VIII: Comparison with closely related works that aim
to solve the dependency explosion problem
[ 4
5 ]
M P I [ 5
3 ]
M C I [ 4
3 ]
U I S
e
p
o
c
P
E
E
B
[ 7
3 ]
O
g
o
L
a
g
e
m
3 ]
[ 3
D
o
N
[ 3
e
z
o
1 ]
A
e
h
c
L
m is t






























Instrumentation 
Training Run

Server App.

GUI App.

App. Semantics

port 4444. As such, selinux.so is injected to the newly launched
process. By hooking the commonly used function accept(),
selinux.so enables the attacker to drop a shell remotely from
IP z.z.z.z. Then the attacker can execute multiple recon
commands to collect and send back credential information a
few times.
Threat Symptom. The suspicious connection to z.z.z.z is
subsequently detected by a local network monitoring software
(e.g. Nogios), which leads to the attack investigation.
Attack Investigation. To investigate this attack, the inspector
ﬁrst obtains the logs (including both app and audit logs),
apply Datalog inference and construct the graph from the
symptom event (i.e., the connection to z.z.z.z). The graph
is shown in Fig. 16. Note that in this attack, the daemon forks a
monitor process for each external connection. For the purpose
of avoiding privilege escalation, the monitor further forks child
processes to handle individual tasks (e.g., network authentica-
tion/communication). The application log helps ALchemist to
group sshd processes into sessions (one for each connection
request). In this way, starting from the symptom z.z.z.z,
ALchemist ﬁrst back-traces to a sshd session n. NoDoze
can also achieve this due to the rarely visited IP. However,
setting LD P RELOAD is invisible at the audit log level
while it is recorded by applications (e.g., bash and ﬁrefox). As
a result, NoDoze misses this attack step due to the missing
dependence in A whereas ALchemist precisely captures it
and then the root cause. Furthermore, since loading selinux.so
is considered a normal activity by NoDoze according to the
execution proﬁle, it misses the root cause as well.
VII. RELATED WORK
ALchemist is related to data provenance [65], [17], [62],
[21], [15], [64], [37], [55], [30] [69], audit logging [57], [41],
[40], [62], [18], [61], [36], [75], [74], log parsing [79], [70],
[58], [34], [66], [26] and causality analysis
[80], [42], [41],
[40], [35], [45], [52], [53], [54], [43] [77], [78]. Some of them
suffer from the dependency explosion problem [41], [42]. Some
require instrumentation [53], [45], [54], which is not practical
for deployment in enterprises. Many techniques utilize learn-
ing/proﬁling to derive a reference model to detect abnormal
events [49], [31], [59], [70], [22], [31], [32], [47], [68], [67],
[71], [35], [23], [63], [72], [60], [76], [48]. As discussed in
Section I, these methods may be bypassed if the attacker
uses spooﬁng techniques to hide their activities. UIScope [73]
intercepts UI events and correlates them with audit events to
construct attack graphs. It focuses on UI apps and does not
leverage application speciﬁc semantics. It is Windows based
and hence cannot be empirically compared with ALchemist.
In contrast, ALchemist does not require instrumentation or
pre-trained models. It performs log fusion on application logs
Fig. 16: Causal graph for the Azazel attack by ALchemist
ﬁles. Then attacker uses ClickJacking [5] to deceive the victim
into clicking a button on the malicious HTML. The victim
believes he clicks on a link to a remote page, but in fact he is
clicking on the iframe’s directory “file://home/user/”,
allowing poc.html to gain access to all the ﬁles in the
directory. Finally, the malicious page sends requests with the
stolen information and navigates to the attacker’s website
anonymous.com (with IP z.z.z.z).
Threat Alert. The suspicious connection to z.z.z.z is
subsequently detected by a local network monitoring software
Nogios, which leads to the investigation of the attack.
Attack Investigation. Fig. 15 presents the causal graph by
ALchemist. Observe that
it precisely captures the attack
provenance with tab 1 downloading the attachment from
mail.yahoo.com (IP 69.147.64.33) and tab 2 exﬁltrating
ﬁles. In contrast, NoDoze misses the root cause C and
the exﬁltration of ﬁles (e.g., A and B ).
In particular,
the IP of mail.yahoo.com is
frequently visited by
ﬁrefox and hence the network connection is precluded.
Furthermore, the exﬁltration happens on preference ﬁles in
the /home/user folder frequently visited by ﬁrefox during
normal operation. As such, they are precluded as well. Hence,
from NoDoze’s graph,
the inspector may not understand
the damages caused by the attack, nor does he understand
where the attack was from.
the navigation
from poc.html to anonymous.com is also unclear
from NoDoze’s graph. In ALchemist, rules (R1) is used
during the Datalog inference phase to correlate ﬁrefox event
“GET anonymous.com/index.html*?data=...”
with
“connect(z.z.z.z)”.
Through
the
navigation relation from /home/user/poc.html to
anonymous.com. The accesses to “file 1” and “file
n” are invisible at the application log level. But they can be
seen at the audit level. Our forward attribution rule (R11)
allows attributing these audit events to the appropriate tab.
events, ALchemist
In addition,
reconstructs
system
ﬁrefox
event
the
B. Attack #7: Azazel Attack
Attack Scenario. The attacker connects to a host via SSH
using stolen credentials. Then an open-source rootkit Azazel
and its shared object package selinux.so were uploaded using
scp. In order to avoid creating a large number of events
during a short period, the attacker terminates the current sshd
session. Sometime later, the attacker uses other stolen creden-
tials to start a new sshd session and executes command line
“export LD_PRELOD = selinux.so” in bash to set the
LD P RELOAD environment variable to the downloaded
selinux.so. Then the attacker starts a server process listening on
15
 deamonSession 1 monitor user child… networkSession n monitor user child networkx.x.x.xy.y.y.y bash bash selinux.so serverz.z.z.z bash netcat ps…z.z.z.zA azazeland audit log to address the dependency explosion problem.
Table VIII summarizes the differences between ALchemist
and a few closely related works that address the dependence
explosion problem. Some works propose to support better
forensics analysis using graph queries [61], [25], [24] and ef-
ﬁcient storage [29]. Forensic analysis can be extended to other
tasks [56]. Such techniques are complementary to ALchemist.
Zhang et al. [77], [78] use rule- and learning-based methods
to infer causal relationship between network events. Then
they devise user-intention based security policies to pinpoint
stealthy malware activities based on the relations. These rules
can potentially be rewritten in datalog to enhance ALchemist’s
capabilities. Xu et al. [69] propose an efﬁcient cryptographic
protocol that ensures the correct origin or provenance of criti-