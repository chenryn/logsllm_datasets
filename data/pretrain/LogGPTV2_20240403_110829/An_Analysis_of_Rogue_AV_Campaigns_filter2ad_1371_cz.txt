number of anomalous dimensions for the S-Vector is a parameter that can be
used for ranking potential query anomalies (i.e., queries with more anomalous S-
Vector dimensions rank high as likely candidates for possible attacks). We utilize
this approach for testing the custom-developed anomaly set – normal Chair and
Faculty queries are used to compute the mean values of S-Vector attributes;
three times the standard-deviation is again used as an anomaly separator.
A typical performance result with two user roles (Chair and Faculty) and
corresponding anomalous query set is shown in Table 4.
With respect to the performance of the cluster-based outlier detection algo-
rithm, a few points are worth noticing. As expected, the syntax-based schemes
A Data-Centric Approach to Insider Attack Detection in Database Systems
397
show poor performance (since they are essentially ‘blind’ by design to the Type
2b anomalies). The detection rate for the S-Vector (all) is reasonable (83.87%).
However, the Initial-k approximation’s accuracy suﬀers signiﬁcantly. Upon care-
ful inspection, we ﬁnd that many of the user queries make extensive use of the
SQL ORDER-BY clause, which makes the Initial-k statistics unrepresentative
of the overall result set statistics. This is ameliorated to some extent by the
Random-k variation (e.g., for random k = 20, the detection rate improves to
67.7%); however, there is still a marked decline in performance indicating that
the clustering scheme is sensitive to the approximation schemes and is aﬀected
negatively by them. Further analysis into the clustering reveals that this might
not be a good choice for this type of anomaly detection. Although anomalies with
signiﬁcant variations in multiple dimensions are easily detected by clustering (as
is the case with type-1 and type-2a anomalies), this may not be true with type-
2b anomalies. Euclidean distances in high-dimensional space may be misleading
indicators of anomalies because of the curse of dimensionality. For example, it is
possible to have a highly anomalous value along a single dimension, which may
not translate to a signiﬁcant Euclidean cluster-distance (and vice-versa).
The results for Attrib-Deviation are much better. The syntax based schemes
still perform poorly as expected. The data-centric schemes are much better,
with detection rates close to 87%, better than the cluster-based schemes. The
more important ﬁnding is that the attribute-deviation schemes are remarkably
resilient to the approximation method. Both Initial-k and Random-k perform as
well as the full vector representation; and the Initial-k performs unexpectedly
well even with queries generating speciﬁc ordering of results.
The resiliency and accuracy of Attrib-Deviation can partially explained as
follows. First, note that a single anomalous attribute in the result corresponds
to variations in multiple dimensions of the S-Vector, each of which represents
a statistical measurement. Also the extent of the anomaly may vary between
result attributes (e.g., some attributes may have more atypical values). While
a selective ordering (e.g., by SQL ORDER-BY clauses) may oﬀer a skewed
view of overall result statistics, the Attrib-Deviation technique operates on a
per-attribute basis and is thus still able to identify anomalies. Secondly, many
queries have more than one anomalous attribute; hence selective ordering may
mask anomalies in some attributes, but not all of them. Thirdly, the selective
ordering may not aﬀect all statistical measurements of a single attribute equally
(e.g., it may aﬀect Max, but not Median). It is only when k is very low (k =
5) that initial-k performance drops, however Random-k as expected still oﬀers
reasonable performance.
We believe that the good performance of the Initial-k approximation with
this detection technique has several practical implications. First, it indicates
that a fast online anomaly detector can perform well by considering just a few
(as long as it is not too few) initial output tuples. Randomized sampling of
query results may not be feasible in general, especially for queries generating
hundreds or thousands of output tuples (e.g., due to performance constraints),
but our results here indicate that accuracy may not have to be sacriﬁced always
398
S. Mathew et al.
in the process of giving up random sampling. Further, we also believe that the S-
Vector representation scheme and attribute-deviation based anomaly detection
algorithm are quite resilient to attacks designed to mislead or bypass detection.
It is very diﬃcult for an attacker to craft queries so that multiple statistical
measurements are controlled. A theoretical explanation of this intuition is an
interesting research problem.
On the minus side, the false positive rates are still too high for the Attrib-
Deviation schemes. Reducing the false-positive rates while maintaining/increasing
the accuracy (true positive rates) is an important research question, which we
plan to address in future work.
7 Concluding Remarks and Future Work
Queries: We construct the S-vectors by expressing the schema of each query
result in terms of the attributes of the base schema. For select-project-join
(SPJ) queries on base relations, the base schema is easily determined. When
SPJ queries are also expressed on top of views, then we employed the view un-
folding technique [33] to determine the base schema. View unfolding recursively
replaces references to a view in a query expression with its corresponding view
deﬁnition. For a class of queries larger than SPJ queries on base relations and
views, it is not clear if the base schema can be determined. For example, union
queries can map two diﬀerent attributes in base relations into a single one in the
query result, as the following example shows:
SELECT g.name, g.gpa
FROM GRADS g
UNION
SELECT u.name, u.gpa
FROM UGRADS u;
Here, there is no dimension in the S-vector to accommodate the ﬁrst attribute
of the query result. The same is true for computed attributes in results of com-
plex (aggregation, group-by) queries. To accommodate such cases, we plan to
investigate data provenance techniques [9] and revise the deﬁnition and the use
of the S-vector accordingly.
Databases: The framework proposed in this paper assumes that the underlying
database is static, i.e., there are no updates. Although this assumption is ad-
equate for certain classes of databases (e.g., US census database), we plan to
extend our work to dynamic databases. The ﬁrst challenge is to determine if
and when updates shift the boundary between normal and abnormal queries. If
the database instance is updated signiﬁcantly, then the classiﬁers become obso-
lete and two things need to be done: (a) detect when a phase shift occurs and
re-train, and (b) adopt some form of re-enforcement and/or online learning.
For relatively less dynamic databases where updates are less frequent, such
as OLAP databases that are heavily used for business intelligence and hence
are good targets for insider attacks, it is possible to still apply the data-centric
A Data-Centric Approach to Insider Attack Detection in Database Systems
399
approach, depending on the relative frequency between re-training and data
updates. For instance, one can keep a history of legitimate user queries, re-
execute them on the new data when the data changes are suﬃciently heavy, and
use the new result sets to re-train the machine learning model.
Another approach is to separate parts of the schema where data does not
change very often and the part that does. Then, the data-centric approach can
be applied to the ”projection” of the data space which is static, and the syntax-
centric approach can be applied to the dynamic part of the data. This separation
can also be done automatically as one can keep track of the statistics of various
attributes in the universal table. For example, attributes with high variation
over time are more dynamic than others (e.g., Social Security numbers, bank
accounts of existing customers, dates of births, addresses, and similar ﬁelds are
mostly static attributes).
Activity context: In our approach, the context of a user’s activity is a set of query
results generated in the past by the same user or the group in which she belongs.
We plan to investigate richer activity contexts and examine their eﬀectiveness
in detecting sophisticated attacks. Such contexts might include statistics of a
user’s session with the database, temporal and spatial correlations of the query
results, and so on.
Performance: In cases where user queries return a signiﬁcantly large number of
results, computing statistics over the entire query result for anomaly detection
is unacceptable from a performance standpoint. The initial-k approximation
proposed in Section 6 can help improve performance without sacriﬁcing too
much accuracy. One potential drawback of this approach is that the queries in
the training set might sort the results by a diﬀerent attribute or in diﬀerent
order (ascending, descending) than an otherwise normal user query, thus leading
to false positives. A possible solution to this problem is to choose one attribute
of each base relation as the default order by attribute. Then, for every query in
the training set add a designated ORDER BY clause that orders the result by
the chosen attribute of the ﬁrst base relation (alphabetically) used in the query.
When a user query is submitted, the system submits a “shadow query” with the
designated ORDER BY clause and uses this query result for detection.
Another source of performance improvement might be to design a new statis-
tical model based on both the syntax-based and the data-centric approaches. In
cases where we are relatively conﬁdent that the syntax-based approach gives a
true positive, we may want to skip the data-centric engine altogether to avoid
the database execution. In terms of accuracy, a good combined classiﬁer might
perform better too.
Although random-k does not markedly outperform initial-k in our experi-
ments, we expect random-k to perform consistently for a wider range of datasets
and queries. Of course, a problem that arises then is how to sample a query
result without computing the complete result, given that RDBMSs follow the
pipelined query execution model. For this hard problem, we plan to leverage
400
S. Mathew et al.
prior work on both SPJ queries [25,12] and queries for data analytics in the area
of approximate query answering [16,3,5].
In conclusion, the techniques that we have presented and analyzed in this
paper show signiﬁcant potential as practical solutions for anomaly detection
and insider threat mitigation in database systems.
References
1. Owasp top 10 2007 (2007), http://www.owasp.org/index.php/Top_10_2007
2. Owasp-sql injection prevention cheat sheet (2008),
http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
3. Acharya, S., Gibbons, P.B., Poosala, V., Ramaswamy, S.: Join synopses for ap-
proximate query answering. In: SIGMOD Conference, pp. 275–286 (1999)
4. Agrawal, R., Srikant, R.: Privacy-preserving data mining. In: Proc. of the ACM
SIGMOD Conference on Management of Data (SIGMOD 2000), pp. 439–450 (2000)
5. Babcock, B., Chaudhuri, S., Das, G.: Dynamic sample selection for approximate
query processing. In: SIGMOD Conference, pp. 539–550 (2003)
6. Bishop, C.M.: Pattern Recognition and Machine Learning. Springer, Heidelberg
(October 2007)
7. Bishop, M.: The insider problem revisited. In: Proc. of the 2005 Workshop on New
Security Paradigms (NSPW 2005), pp. 75–76 (2005)
8. Brackney, R., Anderson, R.: Understanding the Insider Threat: Proceedings of a
March 2004 Workshop. RAND Corp. (2004)
9. Buneman, P., Khanna, S., Tan, W.C.: Why and where: A characterization of data
provenance. In: ICDT, pp. 316–330 (2001)
10. Calvanese, D., Giacomo, G.D., Lenzerini, M.: On the decidability of query con-
tainment under constraints. In: Proc. of the ACM SIGMOD-SIGACT-SIGART
Symposium on Principles of Database Systems (PODS 1998), pp. 149–158 (1998)
11. Cappelli, D.: Preventing insider sabotage: Lessons learned from actual attacks
(2005),
http://www.cert.org/archive/pdf/InsiderThreatCSI.pdf
12. Chaudhuri, S., Motwani, R., Narasayya, V.R.: On random sampling over joins. In:
SIGMOD Conference, pp. 263–274 (1999)
13. Chung, C.Y., Gertz, M., Levitt, K.: Demids: a misuse detection system for database
systems. In: Integrity and Internal Control Information Systems: Strategic Views
on the Need for Control, pp. 159–178. Kluwer Academic Publishers, Norwell (2000)
14. CSO Magazine, US Secret Service, CERT, Microsoft: 2007 E-Crime Watch Survey
(2007), http://www.sei.cmu.edu/about/press/releases/2007ecrime.html
15. Fonseca, J., Vieira, M., Madeira, H.: Online detection of malicious data access using
dbms auditing. In: Proc. of the 2008 ACM Symposium on Applied Computing
(SAC 2008), pp. 1013–1020 (2008)
16. Haas, P.J., Hellerstein, J.M.: Ripple joins for online aggregation. In: SIGMOD
Conference, pp. 287–298 (1999)
17. Hu, Y., Panda, B.: Identiﬁcation of malicious transactions in database systems. In:
Proc. of the 7th International Database Engineering and Applications Symposium,
pp. 329–335 (2003)
18. Kamra, A., Terzi, E., Bertino, E.: Detecting anomalous access patterns in relational
databases. The VLDB Journal 17(5), 1063–1077 (2008)
A Data-Centric Approach to Insider Attack Detection in Database Systems
401
19. Kenthapadi, K., Mishra, N., Nissim, K.: Simulatable auditing. In: Proc. of the
ACM Symposium on Principles of Database Systems (PODS 2005), pp. 118–127
(2005)
20. Kruegel, C., Vigna, G.: Anomaly detection of web-based attacks. In: Proc. of the
10th ACM Conference on Computers and Communications Security (CCS 2003),
pp. 251–261 (2003)
21. Lee, S.Y., Low, W.L., Wong, P.Y.: Learning ﬁngerprints for a database intrusion
detection system. In: Gollmann, D., Karjoth, G., Waidner, M. (eds.) ESORICS
2002. LNCS, vol. 2502, pp. 264–280. Springer, Heidelberg (2002)
22. Lee, V.C., Stankovic, J., Son, S.H.: Intrusion detection in real-time database sys-
tems via time signatures. In: Proc. of the Sixth IEEE Real Time Technology and
Applications Symposium (RTAS 2000), p. 124 (2000)
23. Liu, P.: Architectures for intrusion tolerant database systems. In: Proc. of the 18th
Annual Computer Security Applications Conference (ACSAC 2002), p. 311 (2002)
24. Maier, D., Ullman, J.D., Vardi, M.Y.: On the foundations of the universal relation
model. ACM Trans. on Database Syst. 9(2), 283–308 (1984)
25. Olken, F., Rotem, D.: Simple random sampling from relational databases. In:
VLDB, pp. 160–169 (1986)
26. Ramasubramanian, P., Kannan, A.: Intelligent multi-agent based database hybrid
intrusion prevention system. In: Bencz´ur, A.A., Demetrovics, J., Gottlob, G. (eds.)
ADBIS 2004. LNCS, vol. 3255, pp. 393–408. Springer, Heidelberg (2004)
27. Roichman, A., Gudes, E.: Diweda – detecting intrusions in web databases. In: Proc.
of the 22nd Annual IFIP WG 11.3 Working Conference on Data and Applications
Security, pp. 313–329 (2008)
28. Sandhu, R., Ferraiolo, D., Kuhn, R.: The nist model for role based access control.
In: Proc. of the 5th ACM Workshop on Role Based Access Control (2000)
29. Schneier, B.: Secrets and Lies: Digital Security in a Networked World. John Wiley
and Sons, New York (2000)
30. Schonlau, M., DuMouchel, W., Ju, W., Karr, A., Theus, M., Vardi, Y.: Computer
intrusion: Detecting masquerades. Statistical Science 16(1), 58–74 (2001)
31. Spalka, A., Lehnhardt, J.: A comprehensive approach to anomaly detection in
relational databases. In: DBSec, pp. 207–221 (2005)
32. Srivastava, A., Sural, S., Majumdar, A.K.: Database intrusion detection using
weighted sequence mining. Journal of Computers 1(4), 8–17 (2006)
33. Stonebraker, M.: Implementation of integrity constraints and views by query mod-
iﬁcation. In: SIGMOD Conference, pp. 65–78 (1975)
34. Valeur, F., Mutz, D., Vigna, G.: A learning-based approach to the detection of
sql attacks. In: Julisch, K., Kr¨ugel, C. (eds.) DIMVA 2005. LNCS, vol. 3548, pp.
123–140. Springer, Heidelberg (2005)
35. Wenhui, S., Tan, D.: A novel intrusion detection system model for securing web-
based database systems. In: Proc. of the 25th International Computer Software
and Applications Conference on Invigorating Software Development (COMPSAC
2001), p. 249 (2001)
36. Yao, Q., An, A., Huang, X.: Finding and analyzing database user sessions. In: Proc.
of Database Systems for Advanced Applications, pp. 283–308 (2005)
Privilege States Based Access Control for Fine-Grained
Intrusion Response
Ashish Kamra1 and Elisa Bertino2
1 School of Electrical and Computer Engineering, Purdue University, West Lafayette, IN, USA
2 School of Computer Science, Purdue University, West Lafayette, IN, USA
PI:EMAIL
PI:EMAIL
Abstract. We propose an access control model speciﬁcally developed to support
ﬁne-grained response actions, such as request suspension and request tainting, in
the context of an anomaly detection system for databases. To achieve such re-
sponse semantics, the model introduces the concept of privilege states and orien-
tation modes in the context of a role-based access control system. The central idea
in our model is that privileges, assigned to a user or role, have a state attached to
them, thereby resulting in a privilege states based access control (PSAC) system.
In this paper, we present the design details and a formal model of PSAC tailored
to database management systems (DBMSs). PSAC has been designed to also take
into account role hierarchies that are often present in the access control models of
current DBMSs. We have implemented PSAC in the PostgreSQL DBMS and in
the paper, we discuss relevant implementation issues. We also report experimen-
tal results concerning the overhead of the access control enforcement in PSAC.
Such results conﬁrm that our design and algorithms are very efﬁcient.
1 Motivation
An access control mechanism is typically based on the notion of authorizations.
An authorization is traditionally characterized by a three-element tuple of the form
 where A is the set of permissible actions, R is the set of protected re-
sources, and P is the set of principals. When a principal tries to access a protected
resource, the access control mechanism checks the rights (or privileges) of the principal
against the set of authorizations in order to decide whether to allow or deny the access
request.
The main goal of this work is to extend the decision semantics of an access con-
trol system beyond the all-or-nothing allow or deny decisions. Speciﬁcally, we provide
support for more ﬁne-grained decisions of the following two forms: suspend, wherein
further negotiation (such as a second factor of authentication) occurs with the princi-
pal before deciding to allow or deny the request, and taint, that allows one to audit the
request in-progress, thus resulting in further monitoring of the principal, and possibly
in the suspension or dropping of subsequent requests by the same principal. The main
motivation for proposing such ﬁne-grained access check decisions is to provide system
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 402–421, 2010.
© Springer-Verlag Berlin Heidelberg 2010
Privilege States Based Access Control for Fine-Grained Intrusion Response
403
Query
Features
Assessment
User
Feature Selector
Detection Engine
Response Engine
Log
Alert
Drop
No Action, Update  
Profiles
i
T i
Training 
Queries
Audit 
Log
Profile Creator
Profiles
Response
Policy Base
TRAINING  PHASE
Fig. 1. Anomaly Detection and Response System Architecture
support for extending the response action semantics of an application level anomaly
detection (AD) system that detects the anomalous patterns of requests submitted to it.
Consider the architecture of a database speciﬁc AD mechanism using ﬁne-grained
response actions as shown in Figure 1 [8,15,14]. The system consists of three main
components: the traditional database server that handles the query execution, the pro-
ﬁle creator module for creating user proﬁles from the training data, and the anomaly
detection and response mechanisms integrated with the core database functionality. The
ﬂow of interactions for the anomaly detection and response process is as follows: Dur-
ing the training phase, the SQL commands submitted to the database (or read from the
audit log) are analyzed by the proﬁle creator module to create the initial proﬁles of the
database users. In the detection phase, for every SQL command under detection, the
feature selector module extracts the features from the queries in the format expected
by the detection engine. The detection engine then runs the extracted features through
the detection algorithm. If an anomaly detected, the detection mechanism submits its
assessment of the SQL command to the response engine according to a pre-deﬁned in-
terface; otherwise the command information is sent to the proﬁle creator process for
updating the proﬁles.
The response engine consults a base of response policies to issue a suitable re-
sponse action depending on the assessment of the anomalous query submitted by the
detection engine. The system supports three types of response actions, that we refer
to respectively as conservative actions, ﬁne-grained actions, and aggressive actions.
The conservative actions, such as sending an alert, allow the anomalous request to go
through, whereas the aggressive actions can effectively block the anomalous request.
404
A. Kamra and E. Bertino
Fine-grained response actions, supported by the extended decision semantics of our
access control mechanism, are neither conservative nor aggressive. Such actions may
result in either request suspension (supported by the suspend decision semantics) and
request tainting (supported by the taint decision semantics).
Why do we need to extend the access control mechanism to support such response