state. You can authorize access for these snapshots through IAM as well. These EBS
snapshots are AWS objects to which you can assign permissions for your IAM identities
such as users, groups, and roles.
Encryption
You can encrypt data in your EBS volumes using AWS native encryption features such as
AWS KMS. When you create an snapshot of an encrypted volume, you get an encrypted
snapshot. You can use these encrypted EBS volume to store your data securely at rest and
attach these to your EC2 instances.
The Input Output Per Second (IOPS) performance of an encrypted volume is similar to an 
unencrypted volume, with negligible effect on latency. Moreover, an encrypted volume can
be accessed in a similar way as an unencrypted volume. One of the best parts about
encrypting EBS volume is that both encryption and decryption require no additional action
from the user, EC2 instance, or the user's application, and they are handled transparently.
Snapshots of encrypted volumes are automatically encrypted. Volumes created using these
encrypted snapshots are also automatically encrypted.
Amazon RDS
Amazon RDS enables you to encrypt your data for EBS volumes, snapshots, read replicas
and automated backups of your RDS instances. One of the benefits of working with RDS is
that you do not have to write any decryption algorithm to decrypt your encrypted data
stored in RDS. This process of decryption is handled by Amazon RDS.
Data Security in AWS
[ 116 ]
Amazon Glacier
AWS uses AES-256 for encrypting each Amazon Glacier archive and generates separate
unique encryption keys for each of these archives. By default, all data stored on Amazon
Glacier is protected using the server-side encryption. The encryption key is then encrypted
itself by using the AES-256 with a master key. This master key is rotated regularly and
stored in a secure location.
Additionally, you can encrypt data prior to uploading it to the Amazon Glacier if you want
more security for your data at rest.
Amazon DynamoDB
Amazon DynamoDB can be used without adding protection. However, for additional
protection, you can also implement a data encryption layer over the standard DynamoDB
service. DynamoDB supports number, string, and raw binary data type formats. When
storing encrypted fields in DynamoDB, it is a best practice to use raw binary fields or
Base64-encoded string fields.
Amazon EMR
Amazon EMR is a managed Hadoop Framework service in the cloud. AWS provides the
AMIs for Amazon EMR, and you can’t use custom AMIs or your own EBS volumes.
Amazon EMR automatically configures Amazon EC2 firewall settings such as network
access control list (ACL) and security groups for controlling network access for instances.
These EMR clusters are launched in an Amazon Virtual Private Cloud (VPC).
By default, Amazon EMR instances do not encrypt data at rest. Usually, EMR clusters store
data in S3 or in DynamoDB for persistent data. This data can be secured using the security
options for these Amazon services as mentioned in the earlier sections.
Securing data in transit
Most of the web applications that are hosted on AWS will be sending data over the internet
and it is imperative to protect data in transit. This transit will involve network traffic
between clients and servers, and network traffic between servers. So data in transit needs to
be protected at the network layer and the session layer.
Data Security in AWS
[ 117 ]
AWS services provide IPSec and SSL/TLS support for securing data in transit. An IPSec
protocol extends the IP protocol stack primarily for the network layer and allows
applications on the upper layers to communicate securely without modification. The
SSL/TLS, however, operates at the session layer.
The Transport Layer Security (TLS) is a standard set of protocols for securing 
communications over a network. TLS has evolved from Secure Sockets Layer (SSL) and is 
considered to be a more refined system.
Let us look at options to secure network traffic in AWS for various AWS services.
Amazon S3
The AWS S3 supports the SSL/TLS protocol for encrypting data in transit by default. All
data requests in AWS S3 is accessed using HTTPS. This includes AWS S3 service
management requests such as saving an object to an S3 bucket, user payload such as content
and the metadata of objects saved, modified, or fetched from S3 buckets.
You can access S3 using either the AWS Management Console or through S3 APIs.
When you access S3 through AWS Management Console, a secure SSL/TLS connection is
established between the service console endpoint and the client browser. This connection
secures all subsequent traffic for this session.
When you access S3 through S3 APIs that is through programs, an SSL/TLS connection is
established between the AWS S3 endpoint and client. This secure connection then
encapsulates all requests and responses within this session.
Amazon RDS
You have an option to connect to the AWS RDS service through your AWS EC2 instance
within the same region. If you use this option, you can use the existing security of the AWS
network and rely on it. However, if you are connecting to AWS RDS using the internet,
you'll need additional protection in the form of TLS/SSL.
As of now SSL/TLS is currently supported by AWS RDS MySQL and Microsoft SQL
instance connections only.
AWS RDS for Oracle native network encryption encrypts the data in transit. It helps you to
encrypt network traffic traveling over Oracle Net services.
Data Security in AWS
[ 118 ]
Amazon DynamoDB
You can connect to AWS DynamoDB using other AWS services in the same region and
while doing so, you can use the existing security of AWS network and rely on it. However,
while accessing AWS DynamoDB from the internet, you might want to use HTTP over
SSL/TLS (HTTPS) for enhanced security. AWS advises users to avoid HTTP access for all
connections over the internet for AWS DynamoDB and other AWS services.
Amazon EMR
Amazon EMR offers several encryption options for securing data in transit. These options
are open source features, application specific, and vary by EMR version.
For traffic between Hadoop nodes, no additional security is usually required as all nodes
reside in the same availability zone for Amazon EMR. These nodes are secured by the AWS
standard security measures at the physical and infrastructure layer.
For traffic between Hadoop cluster and Amazon S3, Amazon EMR uses HTTPS for sending
data between EC2 and S3. It uses HTTPS by default for sending data between the Hadoop
cluster and the Amazon DynamoDB as well.
For traffic between users or applications interacting with the Hadoop cluster, it is advisable
to use SSH or REST protocols for interactive access to applications. You can also use Thrift
or Avro protocols along with SSL/TLS.
For managing a Hadoop cluster, you would need to access the EMR master node. You
should use SSH to access the EMR master node for administrative tasks and for managing
the Hadoop cluster.
AWS KMS
AWS KMS is a fully managed service that supports encryption for your data at rest and
data in transit while working with AWS services. AWS KMS lets you create and manage
keys that are used to encrypt your data. It provides a fully managed and highly available
key storage, management and auditing solution that can be used to encrypt data across
AWS services as well as to encrypt data within your applications. It is low cost as default
keys are stored in your account at no charge – you pay for key usage and for creating any
additional master keys.
Data Security in AWS
[ 119 ]
KMS benefits
AWS KMS has various benefits such as importing your own keys in KMS and creating keys
with aliases and description. You can disable keys temporarily and re-enable them. You can
also delete keys that are no longer required or used. You can rotate your keys periodically
or let AWS rotate them annually. Let us look at some major benefits of KMS in detail:
Fully managed
AWS KMS is a fully managed service, where AWS takes care of underlying infrastructure to
support high availability as it is deployed in multiple availability zones within a region,
automatic scalability, security, and zero maintenance for the user. This allows the user to
focus on the encryption requirement for their workload. AWS KMS provides
99.999999999% durability for your encrypted keys by storing multiple copies of these keys.
Centralized Key Management
AWS KMS gives you centralized control of all of your encryption keys. You can access KMS
through the AWS Management Console, CLI, and AWS SDK for creating, importing, and
rotating keys. You can also set up usage policies and audit KMS for key usage from any of
these options for accessing AWS KMS.
Integration with AWS services
AWS KMS integrates seamlessly with multiple AWS services to enable encryption of data
stored in these AWS services such as S3, RDS, EMR, and so on. AWS KMS also integrates
with management services, such as AWS CloudTrail, to log usage of each key, every single
time it is used for audit purpose. It also integrates with IAM to provide access control.
Secure and compliant
The AWS KMS is a secure service that ensures your master keys are not shared with anyone
else. It uses hardened systems and hardening techniques to protect your unencrypted
master keys. KMS keys are never transmitted outside of the AWS regions in which they
were created. You can define which users can use keys and have granular permissions for
accessing KMS.
Data Security in AWS
[ 120 ]
The AWS KMS is compliant with many leading regulatory compliance schemes such as
PCI-DSS Level 1, SOC1, SOC2, SOC3, ISO 9001, and so on.
KMS components
Let us look at the important components of AWS KMS and understand how they work
together to secure data in AWS. The envelope encryption is one of the key components of
KMS that we discussed earlier in this chapter.
Customer master key (CMK)
The CMK is a primary component of KMS. These keys could be managed either by the
customer or by AWS. You would usually need CMKs to protect your data keys (keys used
for encrypting data). Each of these keys can be used to protect 4 KB of data directly. These
CMKs are always encrypted when they leave AWS. For every AWS service that integrates
with AWS KMS, AWS provides a CMK that is managed by AWS. This CMK is unique to
your AWS account and region in which it is used.
Data keys
Data keys are used to encrypt data. This data could be in your application outside of AWS.
AWS KMS can be used to generate, encrypt, and decrypt data keys. However, AWS KMS
does not store, manage, or track your data keys. These functions should be performed by
you in your application.
Key policies
A key policy is a document that contains permission for accessing CMK. You can decide
who can use and manage CMK for all CMK that you create, and you can add this
information to the key policy. This key policy can be edited to add, modify, or delete
permissions for a customer managed CMK; however, a key policy for an AWS managed
CMK cannot be edited.
Data Security in AWS
[ 121 ]
Auditing CMK usage
AWS KMS integrates with AWS CloudTrail to provide an audit trail of your key usage. You
can save this trail that is generated as a log file in a S3 bucket. These log files contain
information about all AWS KMS API requests made in the AWS Management Console,
AWS SDKs, command line tools such as AWS CLI and all requests made through other
AWS services that are integrated with AWS KMS. These log files will tell you about KMS
operation, the identity of a requester along with the IP address, time of usage, and so on.
You can monitor, control, and investigate your key usage through AWS CloudTrail.
Key Management Infrastructure (KMI)
AWS KMS provides a secure KMI as a service to you. While encrypting and decrypting
data, it is the responsibility of the KMI provider to keep your keys secure, and AWS KMS
helps you keep your keys secure. The KMS is a managed service so you don't have to worry
about scaling your infrastructure when your encryption requirement is increasing.
AWS CloudHSM
AWS and AWS partners offer various options such as AWS KMS to protect your data in
AWS. However, due to contractual, regulatory compliance, or corporate requirements for
security of an application or sensitive data, you might need additional protection. AWS
CloudHSM is a cloud-based dedicated, single-tenant HSM allowing you to include secure
key storage and high-performance crypto operations to your applications on the AWS
platform. It enables you to securely generate, store, manage, and protect encryption keys in
a way that these keys are accessible only by you or authorized users that only you specify
and no one else.
AWS CloudHSM is a fully managed service that takes care of administrative, time-
consuming tasks such as backups, software updates, hardware provisioning, and high
availability by automating these tasks. However, AWS does not have any access to
configure, create, manage, or use your CloudHSM. You can quickly scale by adding or
removing HSM capacity on-demand with no upfront costs.
An HSM is a hardware device providing secure key storage and cryptographic operations
inside a tamper-proof hardware appliance.
Data Security in AWS
[ 122 ]
AWS CloudHSM runs in your VPC, as shown in the following figure, so it is secure by
design as all VPC security features are available to secure your CloudHSM:
Figure 4 - AWS CloudHSM
CloudHSM features
Let us look at some features of the AWS CloudHSM service:
Generate and use encryption keys using HSMs
AWS CloudHSM provides FIPS 140-2 level 3 compliant HSM for using and generating your
encryption keys. It protects your encryption keys with a single tenant, exclusive access, and
dedicated tamper-proof device in your own AWS VPC.
Pay as you go model
AWS CloudHSM offers a utility pricing model like many other AWS services. You pay only
for what you use and there are no upfront costs whatsoever. You are billed for every
running hour (or partial hour) for every HSM you provision within a CloudHSM cluster.
Data Security in AWS
[ 123 ]
Easy To manage
AWS CloudHSM is a fully managed service, so you need not worry about scalability, high
availability, hardware provisioning, or software patching. These tasks are taken care by of
AWS. The AWS also takes automated encrypted backups of your HSM on a daily basis.
AWS monitors health and network availability of HSMs. It does not have access to keys
stored inside these HSMs. This access is available only to you and users authorized by you.
You are responsible for keys and cryptography operations. This separation of duties and
role-based access control is inherent to CloudHSM design, as shown in the following figure:
Figure 5 - AWS CloudHSM separation of duties
AWS CloudHSM use cases
A CloudHSM cluster can store up to 3,500 keys of any type or size. It integrates with AWS
CloudTrail so all activities related to CloudHSM are logged and you can get a history of all
AWS API calls made to CloudHSM.
With so many features and benefits, AWS CloudHSM has many use cases when it comes to
securing your data. Let us look at some of the most popular use cases for this service:
Offload SSL/TLS processing for web servers
Web servers and web browsers often use SSL or TLS for a secure connection to transfer data
over the internet. This connection requires the web server to use a public-private key pair
along with a public key certificate in order to establish an HTTPS session with each client.
This activity acts as an overhead for the web server in terms of additional computation.
CloudHSM can help you offload this overhead by storing the web server's private key in
HSM as it is designed for this purpose. This process is often known as SSL acceleration.
Data Security in AWS
[ 124 ]
Protect private keys for an issuing certificate authority
A certificate authority is an entity entrusted for issuing digital certificates for a public key
infrastructure. These digital certificates are used by an individual or an organization for
various scenarios by binding public keys to an identity. You need to protect private keys
that are used to sign the certificates used by your certificate authority. CloudHSM can
perform these cryptographic operations and store these private keys issued by your
certificate authority.
Enable transparent data encryption for Oracle
databases
Oracle databases offer a feature called transfer data encryption for encrypting data before
storing it on disk. This feature is available in some versions of Oracle. It uses a two-tier key
structure for securing encryption keys. Data is encrypted using the table key and this table
key is encrypted by using the master key. CloudHSM can be used to store this master
encryption key.
Amazon Macie
Amazon Macie is the newest security service powered by Artificial Intelligence launched by
AWS that uses machine learning to identify, categorize, and secure your sensitive data that
is stored in S3 buckets. It continuously monitors your data and sends alerts when it detects
an anomaly in the usage or access patterns. It uses templated Lambda functions for either
sending alerts, revoking unauthorized access, or resetting password policies upon detecting
suspicious behavior.
As of now, Amazon Macie supports S3 and CloudTrail with the support for more services
such as EC2, DynamoDB, RDS, Glue is planned in the near future. Let us look at two
important features of Amazon Macie.
Data discovery and classification
Amazon Macie allows you to discover and classify sensitive data along with analyzing
usage patterns and user behavior. It continuously monitors newly added data to your
existing data storage.
Data Security in AWS
[ 125 ]
It uses artificial intelligence to understand and analyze usage patterns of existing data in the
AWS environment. It understands data by using the Natural Language Processing (NLP)
method.
It will classify sensitive data and prioritize it according to your unique organizational
data access patterns. You can use it to create your own alerts and policy definitions for
securing your data.
Data security
Amazon Macie allows you to be proactively compliant with security and achieve preventive
security. It enables you to discover, classify, and secure multiple data types such as
personally identifiable information, protected health information, compliance documents,
audit reports, encryption keys, API keys, and so on.
You can audit instantly by verifying compliance with logs that are automated. All the
changes to ACL and security policies can be identified easily. You can configure actionable
alerts to detect changes in user behavior.
You can also configure notifications when your protected data leaves the secured zone. You
can detect events when an unusual amount of sensitive data is shared either internally or
externally.
Summary
Data security is one of the major requirements for most of the AWS users. The AWS
platform provides multiple options to secure data in their data storage services for data at
rest and data in transit. We learned about securing data for most popular storage services
such as AWS S3, AWS RDS, and so on.
We learned the fundamentals of data encryption and how AWS KMS provides a fully
managed solution for creating encryption keys, managing, controlling, and auditing usage
of these encryption keys.
We also learned about AWS CloudHSM, a dedicated hardware appliance to store your
encryption keys for corporate or regulatory compliance. We went through various features
of CloudHSM and the most popular use cases for this service.
Data Security in AWS
[ 126 ]
Lastly, we went through Amazon Macie, a newly launched data security service that uses
machine learning for protecting your critical data by automatically detecting and classifying
it.
The AWS EC2 service provides compute or servers in AWS for purposes such as web
servers, database servers, application servers, monitoring servers, and so on. The EC2 is
offered as IaaS in AWS. In the next chapter, Securing Servers in AWS, we will look at options
to protect your infrastructure in an AWS environment from various internal and external
threats. There are host of AWS services dedicated to secure your servers; we will dive deep
into these services.
5
Securing Servers in AWS
The Amazon Elastic Compute Cloud (EC2) web service provides secure, elastic, scalable
computing capacity in the form of virtual computing environments known as instances in
the AWS cloud. EC2 is the backbone of AWS, in a way, so that it drives a majority of the
revenue for AWS. This service enables users to run their web applications on a cloud by
renting servers. EC2 is part of the Infrastructure as a Service (IaaS) offering from AWS, and
it provides complete control over the instance provided to the user.
These servers or instances are used for a variety of use cases, such as running web
applications, installing various software, running databases, and file storage. EC2 has
various benefits that make it quite popular:
Secured service offering multiple options for securing servers
Elastic web scale computing; no need to guess the computing capacity
Complete control over your EC2 instance
Multiple instance types for various scenarios
Integration with other AWS services
Reliable service, offering 99.95% availability for each region
Inexpensive, offering pay-what-you-use and pay-as-you-use models
Since most of the workloads in AWS run or use EC2 one way or another, it is critical to
secure your servers. AWS provides multiple options to secure your servers from numerous
threats and gives you the ability to test these security measures as well. Securing servers is
essentially securing your infrastructure in AWS. It involves accessing your EC2 instances,
monitoring activities on your EC2 instances, and protecting them from external threats such
as hacking, Distributed Denial of Service (DDoS) attacks, and so on.
Securing Servers in AWS
[ 128 ]
With the Amazon EC2 service, users can launch virtual machines with various
configurations in the AWS cloud. AWS users have full control over these elastic and