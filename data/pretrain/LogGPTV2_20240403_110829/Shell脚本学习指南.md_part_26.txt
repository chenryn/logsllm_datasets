for 1
循环通过命令行参数
do
case $i in
-f)
11
esac
done
6.4.2while与until循环
Shell的while与unti1循环，与传统程序语言的循环类似。语法为：
while condition
until condition
do
statements
db
statements
done
done
至于if语句，condition可以是简单的命令列表，或者是包含&&与ll的命令。
while与until唯一的不同之处在于，如何对待condition的退出状态。只要
condition是成功退出，while会继续循环。只要condition来成功结束，unti1则
执行循环。例如：
pattern....
模式会控制字符串的维简
while [ -n *$string" ]
当字符审不是空的时
do
处理Sstring的当前值
string=$(atringaSpattern)
截去部分字符串
Gone.
实际上，until循环比while用得少，不过如果你在等待某个事件发生，它就很有用
了.见例6-2
www.TopSage.com
---
## Page 158
146
第6章
例6-2：使用until，等待某个用户登录
等待特定用户登录，每30秒确认一次
printf *Enter username: *
ttnu/Aap/  /dev/nu11
then
break
f1
done
8leep 30
true命令什么事也不必做，只是成功地退出。这用于编写无限循环，即会永久执行的
循环。在编写无限循环时，必须放置一个退出条件在循环体内，正如同这里所做的。另
有一个falBe命令和它有点相似，只是较少用到，它也不做任何事，仅表示不成功的状
态，false命令常见于无限的untilfalse..，循环中。
www.TopSage.com
---
## Page 159
变量、判断、重复动作
147
continue命令则用于提早开始下一段重复的循环操作，也就是在到达循环体的底部之
前。
break与continue命令都接受可选的数值参数，可分别用来指出要中断（break）或继
续多少个被包含的循环（如果循环计数需要的是一个在运行时可被计算的表达式时，可
以使用s（（..)））。举例如下：
while condition1
外部循环
op
while condition2
内部循环
do
break 2
- - -
外部指环的中联
done
Gone
在中断之后，继续执行这里的程序
break与continue特别具备中断或继续多个循环层级的能力，从而以简洁的形式弥补
了Shell语言里缺乏goto关键字的不足。
6.4.4.
shift与选项的处理
我们在6.1.2.2节中曾简短提及shift命令，它用来处理命令行参数的时候，一次向左位
移一位（或更多位）。在执行shift之后，原来的S1就会消失，以S2的旧值取代，S2
的新值即为S3的旧值，以此类推，而$的值也会逐次减少。shift还接受一个可选
的参数，也就是可以指定一次要移动几位：默认为1。
通过结合while、caBe、break以及shift，可以微些简单的选项处理，如下所示：
将标志变量设置为空值
verbose=
qulet=
1ong=
while [ $# -gt 0 ]
执行环直到没有参数为止
op
case $1 in
检查第一个参数
f)
file=$2
shift
移位退出“-"，使得结尾的shift得到在$2里的值
verbose=true
ff
-V)
quiet=
-q)
quiet=true
verbose=
-1)
1ong=true
ff
=-)
shift
传统上，以--结束选项
break
 7
www.TopSage.com
---
## Page 160
148
第6章
-*)
echo. $0:$1:unrecognized option >&2
com
*)
break
无选项参数，在循环中跳出
esac
shift
设置下一个重复
done
在此循环结束之后，不同的标志变量都会设置，且可以使用test或case测试。任何剩
下的无选项参数都仍然是可利用的，以便在$9中微进一步的处理。
getopts命令简化了选项处理。它能理解POSIX选项中将多个选项字母组织到一起的用
法，也可以用来遍历整个命令行参数，一次一个参数。
getopts的第一个参数是列出合法选项字母的一个字符串。如果选项字母后面跟着冒
号，则表示该选项需要一个参数，此参数是必须提供的。一旦遇到这样的选项，getopts
会放置参数值到变量OPTARG中。另一个变量OPTIND包含下一个要处理的参数的索引
值。Shell会把该变量初始化为1。
getopts的第二个参数为变量名称，在每次getopts调用时，该变量会被更新：它的值
是找到的选项字母。当getopts找到不合法的选项时，它会将此变量设置为一个问号字
符。我们以getopts重写前面的例子：
设置标志变量为空
file=
verbose=
quiet=
Long*
while getopts f:vg] opt
do
case Sopt in
检查选项字母
f)
file=SOPTARG
v)
verbose=true
quiet=
q)
quiet=true
verbose=
11
long=true
esac
done
shift S((OPTIND - 1))
别除选项，留下参数
你会发现三个明显差异。首先，在case里的测试只是用在选项字母上，开头的减号被
副除了。再者，针对--的情况（case）也不见了：因为getopts已自动处理。最后也
消失的就是针对不合法选项的默认情况：getopts会自动显示错误信息。
www.TopSage.com
---
## Page 161
变量、判断、重复动作
149
getopts
语法
getopts option_spec variable [ arguments ... ]
用途
简化参数处理，并且让Shell脚本可以轻松地匹配于POSIX参数处理惯例。
主要选项
无
行为模式
当它重复调用时（例如在while循环中），会依次通过给定的命令行参数，
或者未提供则是·S8"，在--或第一个非选项参数处，或是碰到链误时，会
以非零值退出，option_spec用来描逃选项及它们的参数，见内文，
对每个合法的选项，设置variable为选项字母。如果选项有一个参数，到参
数值会置于OPTARG里，在处理的结尾处，OPTIND会设置为第一个非选项
参数的编号。见内文说明。
警告
ksh93版本的getopts会遵摘POSIX，但还提供许多额外的功能。可参考
ksh93 文格，成是{Learning the Korn Shell)（O'Reilly）。
不过一般来说，在脚本里处理错误会比使用getopts的默认处理要容易：将冒号（：）
置于选项字符串中作为第一个字符，可以使得getopts以两种方式改变它的行为：首
先，它不会显示任何错误信息：第二，除了将变量设置为问号之外，OPTARG还包含了
给定的不合法选项字母。以下便是选项处理循环的最后版本：
设置标志变量为空
file=
verbose=
=fuo =qanb
开头的管号，是我们处理错误的方式
while getopts:f:vqlopt
do
case $opt in
检查选项字母
f)
file=$OFTARG
1,1
verbose=true
quiet=
quiet=true
q)
verbose=
11
1ongetrue
www.TopSage.com
---
## Page 162
150
第6章
(.&.
2- .
echo *Usage: $0 [-f,fi1e] [=vql][files ...)* >62
exit 1
esac
done
shift $((OPTIND - 1)1
删除选项，留下参数
警告：OPTIND变量是父屏本与其引用的任何函数所共享的，要使用getopts来解析自己的参数
的函数，应将OPTIND重设为1，我们不建议在父脚本的选项处理循环中调用这样的函数
（基于此，ksh93给每个函数它自已私有的OPTIND版本，再次提醒留意这点）。
6.5
5函数
就像其他的程序语言一样，函数（function）是指一段单独的程序代码：用以执行一些
定义完整的单项工作。在大型程序里，函数可以在程序的多个地方使用（调用）。
函数在使用之前必须先定义。这可通过在脚本的起始处，或是将它们放在另一个独立文
件里且以点号（、）命令来取用（source）它们（，命令在稍后7.9节中会作说明）。定义