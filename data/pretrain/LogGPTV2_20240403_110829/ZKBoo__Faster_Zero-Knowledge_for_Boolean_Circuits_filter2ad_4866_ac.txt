4.1
Given an arbitrary function φ : X → Y and an input value
x ∈ X we want to compute the value φ (x) splitting the
computation in 3 branches such that the values com-
puted in 2 branches reveals no information about the
input x.
In order to achieve this, we start by “split-
ting” the value x in three values x1,x2,x3 (called input
shares) using a surjective function that we indicate with
Share. These input shares as well as all the interme-
diate values are stored in 3 string w1,w2,w3 called the
views. More precisely, wi contains the values computed
in the computation branch i. In order to achieve the goal
and compute the value y = φ (x), we use a ﬁnite fam-
ily of efﬁciently computable functions that we indicate
with F =(cid:29)N
m takes
as inputs speciﬁc values from the views wm,wm+1 with
m ={1,2,3} and where 3+1 = 1. The functions are used
in the following way: we use functions φ ( j)
to
compute the next value to be stored in each view wm:
The function φ (1)
m takes as input wm,wm+1 (which at this
point contain only the shares xm,xm+1) and outputs one
value which is saved in position 1 of the views wm. We
continue like this for all N functions, with the difference
that in step j > 1, the function φ ( j)
m can receive as in-
put (any subset of) the current views wm,wm+1. The
initial function Share and all subfunctions φ ( j)
m are al-
lowed to be randomized, and they get their coins from
k1,k2,k3, three random tapes which correspond to the
three branches. Finally, after the N steps described, the 3
functions Output1, Output2, Output3 are used to com-
pute the values yi = Outputi(wi) that we call output
shares. From these three values we compute the ﬁnal
output y = φ (x) using the function Rec. The entire pro-
cedure is described in detail in Figure 4 (Protocol Π∗φ ).
Deﬁnition 4.1. A (2,3)-decomposition for the function
φ is the set of functions
D = {Share, Output1, Output2, Output3, Rec}∪F
such that Share is a surjective function and φ ( j)
m , Outputi
and Rec are functions as described before. Let Π∗φ be the
algorithm described in Figure 4, we have the following
deﬁnitions.
• (Correctness) We say that D is correct if Pr[φ (x) =
Π∗φ (x) ] = 1 for all x ∈ X. The probability is over
the choice of the random tapes ki.
• (Privacy) We say that D has 2-privacy if it is correct
and for all e ∈ [3] there exists a PPT simulator Se
such that
({ki,wi}i∈{e,e+1},ye+2) and Se(φ ,y)
have the same probability distribution for all x ∈ X.
USENIX Association  
25th USENIX Security Symposium  1075
samples
random x1,x2,x3
cation gates8. The total number of gates in the circuit is
N, the gates are labelled with indices in [N]. The linear
(2,3)-decomposition of φ is deﬁned as follows:
• ShareZ(x;k1,k2,k3)
such that x = x1 + x2 + x3;
• The family F Z =(cid:31)N
3 } is deﬁned
in the following way. Assume that the c-th gate has
input wires coming from the gate number a and the
gate number b (or only gate number a in the case
of a unary gate), then the function φ (c)
is deﬁned as
follows: If the c-th gate is a (∀α ∈ Z)
− unary “add α” gate, then ∀i ∈ [3]:
c=1{φ (c)
1 ,φ (c)
2 ,φ (c)
i
(wi[a]) =(cid:30)wi[a] +α if i = 1
wi[a] else
x
Share
x1
x2
x3
w1[0] = x1
w2[0] = x2
w3[0] = x3
φ (1)
1
φ (1)
2
φ (1)
3
wi[c] = φ (c)
i
w1[1]
w2[1]
w3[1]
φ (2)
1
φ (2)
2
φ (2)
3
w1[2]
w2[2]
w3[2]
...
w1
...
w2
...
w3
Output1
Output2
Output3
y1
y2
y3
Rec
y
Pictorial
Figure 5:
(2,3)-
decomposition of the computation y = φ (x) showing the
three branches.
representation of
a
4.1.1 The Linear Decomposition
We present here an explicit example of a convenient
(2,3)-decomposition. Let Z be an arbitrary ﬁnite ring
such that φ : Zk → Z(cid:31) can be expressed by an arithmetic
circuit over the ring using addition by constant, multipli-
cation by constant, binary addition and binary multipli-
− unary “mult. α” gate, then ∀i ∈ [3]:
wi[c] = φ (c)
i
(wi[a]) = α · wi[a]
− binary addition gate, then ∀i ∈ [3]:
wi[c] = φ (c)
i
(wi[a],wi[b]) = (wi[a] +w i[b])
wi[c] = φ (c)
− binary multiplication gate, then ∀i ∈ [3]:
i (cid:29)wi[a,b],wi+1[a,b])(cid:28)
= wi[a]· wi[b] +w i+1[a]· wi[b]
+ wi[a]· wi+1[b] +R i(c)− Ri+1(c)
i (wi,ki) simply selects all the
where Ri(c) is a uniformly random function sam-
pled using ki.
• For all i ∈ [3], OutputZ
shares of the output wires of the circuit;
• Finally, RecZ(y1,y2,y3) outputs y = y1 + y2 + y3
decomposition DZ =
Proposition
The
{ShareZ, RecZ, OutputZ
1 , OutputZ
3} ∪F Z
deﬁned above is a (2,3)-decomposition. Moreover, the
length of each view in DZ is (k + N + (cid:31))log|Z| + κ bits.
Correctness of the decomposition follows from in-
spection. Privacy can be shown by constructing an ap-
propriate simulator as shown in Appendix A
2 , OutputZ
4.1.
In the linear decomposition just presented, the param-
eter N is equal to the total number of gates (unary and
binary) in the circuit computing φ. It is easy to slightly
modify the deﬁnition of the functions φ (c)
in DZ in such
i
8Note that Boolean circuits are a special case of this, with the XOR,
AND and NOT gate.
1076  25th USENIX Security Symposium 
USENIX Association
a way that N results equal to the number of multiplica-
tion gates only.
In particular, note that the evaluation
of addition gates (both unary and binary) only requires
computation on values from the same branch, thus they
can be embedded in a generalized multiplication gates
which take as input arbitrary subsets of wires A, B, con-
tains constants α,β ,γ and computes the value:
w[c] =(cid:31)∑
a∈A
α[a]w[a](cid:30)·(cid:31)∑
b∈B
β [b]w[b](cid:30) + γ
4.2 ZKBoo Protocol
Following the idea of
[19], we turn a (2,3)-
decomposition of a function φ into a zero-knowledge
protocol for statements of the form “I know x such
that φ (x) = y”. We indicate with Lφ the language
{y|∃x s.t. φ (x) =y}.
Assume that a (2,3)-decomposition of the function φ
is known (see Section 4.1). The structure of the result-
ing protocol (Figure 6) is very similar to the structure of
the IKOS protocol. If y ∈ Lφ is the public input of the
proof, then the prover P uses his private input x (with
φ (x) =y) to run “in his head” the protocol Π∗φ . After
the emulation of the protocol, P commits to each of the 3
produced views w1,w2,w3. Now the veriﬁer challenges
the prover to open 2 of the commitments. Finally, the
veriﬁer accepts if the opened views are consistent with
the decomposition used and with output y.
Proposition 4.2. The ZKBoo protocol (Figure 6) is a Σ-
protocol for the relation Rφ with 3-special soundness.
Proof. Clearly, the ZKBoo protocol has the right com-
munication pattern and it is complete given that the de-
composition D is correct. Moreover, the protocol satis-
ﬁes the 3-special soundness property: consider 3 accept-
ing conversations (a,i,zi), i ∈ [3]: ﬁrst note that thanks
to the binding property of the commitment, the view w1
contained in z1 and the one contained in z3 are identi-
cal, and the same holds for the other views w2,w3 and
random tapes k1,k2,k3. Then, we can traverse the de-
composition of φ backwards from the output to the input
shares: since the three conversations are accepting, we
have that Rec(y1,y2,y3) = y, that yi = Outputi(wi) ∀i,
and ﬁnally that every entry in all of wi was computed
correctly. Therefore, since the Share function is surjec-
tive, we can compute x(cid:23) = Share−1(w1[0],w2[0],w3[0]).
Thanks to the correctness of the decomposition we thus
have that φ (x(cid:23)) = y, which is what we wanted to prove.
Note that the protocol does not satisfy 2-special sound-
ness, even if two accepting conversation actually contain
all three views: in this case, since one of the branches of
ZKBoo Protocol
The veriﬁer and the prover have input y ∈ Lφ .
The prover knows x such that y = φ (x). A (2,3)-
decomposition of φ is given. Let Π∗φ be the protocol
related to this decomposition.
Commit: The prover does the following:
1. Sample random tapes k1,k2,k3;
2. Run Π∗φ (x)
and obtain the views
shares
output
w1,w2,w3
y1,y2,y3;
and
the
3. Commit to ci = Com(ki,wi) for all i∈ [3];
4. Send a = (y1,y2,y3,c1,c2,c3).
Prove: The veriﬁer choose an index e ∈ [3] and
sends it to the prover. The prover answers
to the veriﬁer’s challenge sending opening
ce,ce+1 thus revealing z = (ke,we,ke+1,we+1).
Verify: The veriﬁer runs the following checks:
1. If Rec(y1,y2,y3) (cid:21)= y, output reject;
2. If ∃i ∈ {e,e + 1} s.t. yi (cid:21)= Outputi(wi),
output reject;
3. If ∃ j such that
we[ j] (cid:21)= φ ( j)
output reject;
e (cid:29)we,we+1,ke,ke+1(cid:28)
4. Output accept;
Figure 6: ZKBoo protocol for the language Lφ in the
commitment-hybrid model.
the computation has not been checked, ∃ i s.t. wi might
i (cid:29)wi,wi+1,ki,ki+1(cid:28).
not be equal to φ ( j)
To prove the special honest-veriﬁer ZK property, we
consider the simulator S deﬁned by the following steps.
The input are y ∈ Lφ and e ∈ [3]:
run the 2-privacy
simulator (which is guaranteed to exist thanks to the
2-privacy property of the decomposition D as in Deﬁ-
nition 4.1), which returns ({ki,wi}i∈{e,e+1},ye+2), sets
we+2 = 0|w|,ke+2 = 0|k| and then constructs a by com-
mitting to the three views and tapes.
Efﬁciency. Let φ : Zk → Z(cid:30) be a function that can be
expressed by a circuit over the ﬁnite ring Z with N mul-
USENIX Association  
25th USENIX Security Symposium  1077
tiplication gates. If we repeat σ (log2 3− 1)−1 copies of
the ZKBoo protocol instantiated with the linear decom-
position described in Section 4.1.1, and where we gener-
ate the random tapes pseudo-randomly with security pa-
rameter κ, we get a Σ-protocol with soundness 2−σ and
bit-size
σ (log2 3− 1)−1 · 2· [log2(|Z|)(k + N + (cid:31)) +κ ]
5 Zero-Knowledge for SHA-1/SHA-256
In this section we describe our case study, in which
we implemented the protocol described in Section 4 for
proving knowledge of preimages of SHA-1 and SHA-
256. We start describing the choices we made in our
implementation, describe the result of our empirical val-
idation and ﬁnally compare with state-of-the-art proto-
cols for the same task. Our implementation is available
at https://github.com/Sobuno/ZKBoo.
5.1 Circuits For SHA-1/SHA-256
The linear-decomposition protocol described in Sec-
tion 4 can be used with arithmetic circuits over arbi-
trary rings. Our ﬁrst choice is picking a ring in which to
express the computation of SHA-1/SHA-256. The two
functions are quite similar, and they both use vectors of
32 bits for internal representation of values. Three kind
of operations are performed over these bit-vectors: bit-
wise XORs, bitwise ANDs, and additions modulo 232.
Implementing the two algorithms (after some simple op-
timization to reduce the number of bitwise ANDs) re-
quires the following number of operations9:
SHA-1
SHA-256
AND XOR ADD
325
40
192
600
372
704
Hence, the two natural choices for the ring are Z2
(where XOR gates are for free but AND/ADD require
32 multiplication gates) and Z232 (where ADD is free but
bitwise operations require a linear number of multiplica-
tion gates). Since the number of XORs dominates in both
algorithms, we opted for an implementation over the ring
Z2.
Implementation of Building Blocks
5.2
We wrote our software in C, using the OpenSSL10 li-
brary. We instantiated the building blocks in our protocol
in the following way:
9Note that the AND complexity of our circuits is approximately 1/3
of the “standard MPC circuit” from https://www.cs.bris.ac.uk/
Research/CryptographySecurity/MPC/.
10https://www.openssl.org
RNG: We generate the random tapes pseudorandomly
using AES in counter mode, where the keys are gener-
ated via the OpenSSL secure random number generator.
In the linear decomposition of multiplication gates, we
use a random function R : [N] → Z2. We implement this
function by picking a bit from the stream generated using
AES. In particular, we compute