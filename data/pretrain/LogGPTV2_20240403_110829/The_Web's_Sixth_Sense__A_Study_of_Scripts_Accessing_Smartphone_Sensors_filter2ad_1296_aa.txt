title:The Web's Sixth Sense: A Study of Scripts Accessing Smartphone Sensors
author:Anupam Das and
Gunes Acar and
Nikita Borisov and
Amogh Pradeep
The Web’s Sixth Sense:
A Study of Scripts Accessing Smartphone Sensors
Anupam Das
North Carolina State University
PI:EMAIL
University of Illinois at Urbana-Champaign
Nikita Borisov
PI:EMAIL
Gunes Acar
Princeton University
PI:EMAIL
Amogh Pradeep
Northeastern University
PI:EMAIL
ABSTRACT
We present the first large-scale measurement of smartphone sensor
API usage and stateless tracking on the mobile web. We extend the
OpenWPM web privacy measurement tool to develop OpenWPM-
Mobile, adding the ability to emulate plausible sensor values for
different smartphone sensors such as motion, orientation, proximity
and light. Using OpenWPM-Mobile we find that one or more sensor
APIs are accessed on 3 695 of the top 100K websites by scripts orig-
inating from 603 distinct domains. We also detect fingerprinting
attempts on mobile platforms, using techniques previously applied
in the desktop setting. We find significant overlap between finger-
printing scripts and scripts accessing sensor data. For example, 63%
of the scripts that access motion sensors also engage in browser
fingerprinting.
To better understand the real-world uses of sensor APIs, we
cluster JavaScript programs that access device sensors and then
perform automated code comparison and manual analysis. We find
a significant disparity between the actual and intended use cases of
device sensor as drafted by W3C. While some scripts access sensor
data to enhance user experience, such as orientation detection and
gesture recognition, tracking and analytics are the most common
use cases among the scripts we analyzed. We automated the detec-
tion of sensor data exfiltration and observed that the raw readings
are frequently sent to remote servers for further analysis.
Finally, we evaluate available countermeasures against the mis-
use of sensor APIs. We find that popular tracking protection lists
such as EasyList and Disconnect commonly fail to block most
tracking scripts that misuse sensors. Studying nine popular mobile
browsers we find that even privacy-focused browsers, such as Brave
and Firefox Focus, fail to implement mitigations suggested by W3C,
which includes limiting sensor access from insecure contexts and
cross-origin iframes. We have reported these issues to the browser
vendors.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243860
CCS CONCEPTS
• Security and privacy → Web application security; Privacy pro-
tections;
KEYWORDS
Sensors; Mobile browser; On-line tracking; Fingerprinting
ACM Reference Format:
Anupam Das, Gunes Acar, Nikita Borisov, and Amogh Pradeep. 2018. The
Web’s Sixth Sense: A Study of Scripts Accessing Smartphone Sensors. In
2018 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY,
USA, 18 pages. https://doi.org/10.1145/3243734.3243860
1 INTRODUCTION
The dominant mode of web browsing has shifted towards mobile
platforms—2016 saw mobile web usage overtake desktop [74]. To-
day’s smartphones come equipped with a multitude of sensors
including accelerometers, gyroscopes, barometers, proximity and
light sensors [67]. Augmented reality, indoor navigation and immer-
sive gaming are some of the emerging web applications possible
due to the introduction of sensors. The Web’s standardization body,
the W3C, has thus introduced standards to define how to make
sensor data accessible to web applications [80].
Access to the sensors, however, can also create new security
and privacy vulnerabilities. For example, motion sensors can be
exploited to infer keystrokes or PIN codes [14, 51]. Ambient light
level readings can be exploited for sniffing users’ browsing history
and stealing data from cross-origin iframes [61]. Motion sensors
have also shown to be uniquely traceable across websites, allowing
stateless tracking of users [9, 19, 23]. While the W3C’s sensor speci-
fications list these and other security and privacy concerns, they do
not mandate countermeasures. In practice, mobile browsers allow
access to these sensors without explicit user permission, allowing
surreptitious access from JavaScript.
In order to better understand the risks of sensor access, we con-
duct an in-depth analysis of real-world uses and misuses of the
sensor APIs. In particular, we seek to answer the following ques-
tions: 1) what is the prevalence of scripts that make use of sensors?
2) what are the common use cases for accessing sensors? 3) are
sensors used by third-party tracking scripts, specifically those script
which engage in fingerprinting? 4) how effective are existing pri-
vacy countermeasures in thwarting the use of sensors by untrusted
scripts?
To answer these questions, we perform the first large-scale mea-
surement study of the mobile web with a focus on sensor APIs.
We extend the OpenWPM [31] measurement platform to study the
mobile web, adding emulation of mobile browsing behavior and
browser APIs. We call this extension OpenWPM-Mobile and have
released its source code publicly. Using the JavaScript and HTTP in-
strumentation data provided by OpenWPM-Mobile, we survey the
Alexa top 100K sites. We measure the sensor API access patterns, in
combination with stateless tracking techniques including canvas,
battery, WebRTC and AudioContext fingerprinting. To understand
how sensors are being used in the wild, we develop a clustering
scheme to group similar scripts and then perform manual analysis
to identify use cases. Furthermore, we measure how popular track-
ing protection lists perform against tracking scripts that make use
of sensors.
Below we present a summary of our findings:
Large-scale measurement of sensor API usage (§4). We find
that on 3 695 of the Alexa top 100K sites at least one of motion, ori-
entation, proximity, or light sensor APIs is accessed. By emulating
real sensor data, we were able to determine that many third-party
scripts send raw sensor data to remote servers.
Study of sensor API use through clustering (§5). By clustering
scripts based on features extracted from JavaScript instrumentation
data, we find a significant disparity between the intended use cases
of sensors (as drafted by the W3C) and real-world uses. Sensor
data are commonly used for tracking and analytics, verifying ad
impressions, and distinguishing real devices from bots.
Measurement of fingerprinting on the mobile web (§6.1). We
present the first mobile web measurement of the various finger-
printing techniques including canvas, WebRTC, AudioContext, and
battery fingerprinting. We find a significant overlap between the
fingerprinting scripts and the scripts accessing sensor APIs, indi-
cating that sensor data is used for tracking purposes. For example,
we found that 63% of the scripts that access motion sensors also
perform canvas fingerprinting.
Evaluation of existing countermeasures (§6.2 and §6.3). We
evaluate the efficacy of existing countermeasures against track-
ing scripts that use sensor APIs. We measure the rate of blocking
by three popular tracking protection lists: EasyList, EasyPrivacy,
and Disconnect. We find that these lists block the most prevalent
scripts that access sensor; however, they only block 2.5–3.3% of
the scripts overall. We also study the sensor access behavior of
nine popular browsers, and find that browsers, including more pri-
vacy oriented ones such as Firefox Focus and Brave, fail to follow
the W3C recommendation of disallowing access from insecure ori-
gins and cross-origin iframes. We have reported these issues to the
specific browser vendors.
2 BACKGROUND AND RELATED WORK
2.1 Mobile Sensor APIs
Our study focuses on the following sensor APIs for device motion,
orientation, proximity, and ambient light. Other sensors commonly
present on modern mobile devices such as magnetometer, barome-
ters, and infrared sensors are left out as they are not supported by
browsers. We provide a brief description of the sensors below:
Motion. (devicemotion [68]) Provides acceleration and rotation
rate along three axes using MEMS accelerometers and gyroscopes.
Data type is double-precision floating-point with acceleration val-
ues expressed in ms−2 unit and rotation rates expressed in rads−1
or deдs−1 unit.
Orientation. (deviceorientation [80]) Provides alpha, beta and
gamma components which correspond to orientation along the Z,
X and Y axes, respectively. Data type is double-precision floating-
point, specified in deд unit.
Proximity. (deviceproximity [72]) Detects if the phone is close
to ear during a call based on light and infrared sensors. Provides
double-precision floating-point readings in cm units.
Ambient Light. (devicelight [71]) Provides the ambient light
level readings in lux units.
To access sensor data, a script registers an event handler by call-
ing the addEventListener function with the specific sensor event
and event handler functions as arguments. The event handler func-
tion is then called whenever new sensor data is available. A sample
code snippet for registering and accessing motion sensor is given
below:
window.addEventListener("devicemotion", motionHandler);
function motionHandler(evt){
// Access Accelerometer Data
ax = evt.accelerationIncludingGravity.x;
ay = evt.accelerationIncludingGravity.y;
az = evt.accelerationIncludingGravity.z;
// Access Gyroscope Data
rR = evt.rotationRate;
if (rR != null){
gx = rR.alpha;
gy = rR.beta ;
gz = rR.gamma;
}
}
Note that proximity and ambient light sensors were only sup-
ported by Firefox and their support has been deprecated. Never-
theless, our study finds some usage of theses sensors across the
web.
2.2 Different Uses of Sensor Data
W3C has listed the following use cases for device sensors [87]:
• Light: controlling smart home lighting, checking sufficient
light level at work space, calculating camera settings (apper-
ture, shutter speed, ISO) and light-based gesturing.
• Proximity: detecting when device is held close to the mouth
or ear (e.g., WebRTC-based voice call application).
• Motion and Orientation: virtual and augmented reality (head
movement tracking), immersive gaming, activity and gesture
recognition, fitness monitoring, 3D scanning and indoor
navigation.
The potential uses of sensor APIs are not limited to the cases listed
above. In section 5.4, we will summarize the different uses of the
sensor APIs found in the wild.
2.3 Related Work
Sensor Exploitation. Prior studies have shown a multitude of
creative ways to exploit sensor data: inferring keystrokes and PIN
codes using motion sensors [14, 51, 63, 88]; capturing and recon-
structing audio signals using gyroscopes [53]; inferring whether
you are walking, driving, or taking the subway using motion sen-
sors [73, 79]; tracking the metro ride or inferring the route that
was driven using motion data [39, 40]; sniffing users’ browsing
history and stealing data from cross-origin frames using ambient
light level readings [61]; extracting a spatial fingerprint of the sur-
roundings using a combination of acoustic and motion sensors [6];
linking users’ incognito browsing sessions to their normal browsing
sessions using the timing of the devicemotion event firings [82].
Browser Fingerprinting. Mayer [49] first explored the idea of
using browser “quirks” to fingerprint users; the the Panopticlick
project was the first to show that browser fingerprinting can be done
effectively at scale [29]. In 2012, Mowery and Shacham introduced
canvas fingerprinting, which uses HTML5 canvas elements and
WebGL API to fingerprint the fonts and graphic rendering engine
of browsers [56]. Finally, several measurement studies have shown
the existence of these advanced tracking techniques in the wild [1,
2, 31, 58, 60]. Recently, browser extensions have been shown to be
fingerprintable [78]. Cao et al. recently proposed ways in which it
is possible to identify users across different browsers [15]. Vastel et
al. have also shown that in spite of browser fingerprints evolving
over time they can still be linked to enable long-term tracking [85].
As mobile browsing became more common, researchers explored
different ways to fingerprint mobile devices and browsers. Hard-
ware and software constraints on mobile platforms often lower
the fingerprinting precision for mobile browsers [29, 41, 76]. In
2016, however, Laperdrix et al. showed that fingerprinting mobile
devices can be effective, mainly thanks to user agent strings, and
emojis, which are rendered differently across mobile devices [48].
Others have looked at uniquely identifying users by exploiting the
mobile configuration settings, which are often accessible to mobile
apps [46].
Researchers have also studied ways to mitigate browser finger-
printing. Privaricator [59] and FPRandom [47] are two approaches
that add randomness to browser attributes to break linkability
across multiple visits. Besson et al. formalized randomization de-
fense using quantitative information flow [8]. FP-Block [81] is an-
other countermeasure that defends against cross-domain tracking
while still allowing first-party tracking to improve usability. Some
browsers such as Tor browser and Brave by default protect against
various fingerprinting techniques [11, 65].
Device Fingerprinting. It is also possible to use unique charac-
teristics of the user’s hardware instead of, or in addition to, browser
software properties for fingerprinting purposes. One of the early
and well-known results showed that computers can be uniquely
fingerprinted by their clock skew rate [55]. Later on, researchers
were able to show that such tracking can be done on the Internet
using TCP and ICMP timestamps [44].
In recent years, researchers have looked into fingerprinting
smartphones through embedded sensors. Multiple studies have
looked at uniquely characterizing the microphones and speakers
embedded in smartphones [9, 18, 89]. Motion sensors such as ac-
celerometers and gyroscopes have also shown to exhibit unique
properties, enabling apps and websites to uniquely track users on-
line [9, 19, 20, 23]. The HTML5 battery status API has also been
shown to be exploitable; specially old and used batteries with re-
duced capacities have been shown to potentially serve as tracking
identifiers [62].
Taking a counter perspective, researchers have also explored the
potential of using browser and device fingerprinting techniques to
augment web authentication [4, 66, 83]. In this setting, fingerprints
collected using the sensor or other APIs serve as an additional factor
for authentication. Device fingerprinting has also been proposed
as a way to distinguish users browsing real devices from bots or
other emulated browsers [13].
In this paper we focus on the tracking-related use of sensors
embedded in smartphones. Our goal is not to introduce new fin-
gerprinting schemes or evaluate the efficacy of existing techniques.
Rather we identify the real-world uses of sensors APIs by analyzing
data from the first large-scale mobile-focused web privacy measure-
ment. Moreover, we highlight the substantial disparity between the
intended and actual use of smartphone sensors.
3 DATA COLLECTION AND METHODOLOGY
3.1 OpenWPM-Mobile
Our data collection is based on OpenWPM-Mobile, a mobile-focused
measurement tool we built by modifying OpenWPM web measure-
ment framework [31].1 OpenWPM has been developed to measure
web tracking for desktop browsers and hence it uses the desktop
version of Firefox browser as a part of its platform. To capture
the behavior for mobile websites, we heavily modified OpenWPM
platform to imitate a mobile browser. This was essential for per-
forming large-scale crawls of websites, as mobile browsers have
more limited instrumentation capability. We specifically emulate
Firefox on Android, as it uses the same Gecko layout engine as the
desktop Firefox used in the crawls; it is also the only browser that
supports all four of the sensor APIs that we study.2
We extended OpenWPM’s JavaScript instrumentation to inter-
cept access to sensor APIs. In particular, we logged calls to the add-
EventListener function, along with the function arguments and
stack frames. We also used OpenWPM’s standard instrumenta-
tion that allowed us to detect fingerprinting attempts including
canvas fingerprinting, canvas-font fingerprinting, audio-context
fingerprinting, battery fingerprinting and WebRTC local IP discov-
ery [31].
Sites are known to produce different pages and scripts for mo-
bile browsers; to ensure that we would see the mobile versions,
we took several steps to realistically imitate Firefox for Android.
This involved overriding navigator object’s user agent, platform,
appVersion and appCodeName strings; matching the screen resolu-
tion, screen dimensions, pixel depth, color depth; enabling touch
status; removing plugins and supported MIME types that may in-
dicate a desktop browser. We also adjusted the preferences used
1The source code for OpenWPM-Mobile can be found at: https://github.com/sensor-js/
OpenWPM-mobile
2Firefox released a version that disables devicelight and deviceproximity events on
May 9th, 2018 [43].
to configure Firefox for Android such as hiding the scroll bars
and disabling popup windows. We relied on the values provided
in the mobile.js3 script found in the Firefox for Android source
code repository. To mitigate detection by font-based fingerprint-
ing [2, 31], we uninstalled all fonts present on crawler machines
and installed fonts extracted from a real smartphone (Moto G5 Plus)
with an up-to-date Android 7 operating system.
To make sure that our instrumented browser looked realistic, we
used fingerprintjs2 [84] library and EFF’s Panopticlick test suite [30]
to compare OpenWPM-Mobile’s fingerprint to the fingerprint of a
Firefox for Android running on a real smartphone (Moto G5 Plus).
We found that OpenWPM-Mobile’s fingerprint matched the real
browser’s fingerprint except Canvas and WebGL fingerprints. Since
these two fingerprints depend on the underlying graphics hardware
and exhibit a high diversity even among the mobile browsers [48],
we expect that sites are unlikely to disable mobile features solely
based on these fingerprints.