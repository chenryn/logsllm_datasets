data [12, 13, 14].
7.4 Driver Code Modiﬁcation
For open source drivers such as the Madwiﬁ drivers, the
driver code could be modiﬁed to change the transmission
rate of probe request frames. This alteration would fool
our ﬁngerprinting technique. However, this is only pos-
sible for open source drivers and would require a skilled
programmer to alter the driver code. This would not be
possible for many windows drivers, since most do not
provide source code.
7.5 MAC Address Masquerading
Earlier, we made the assumption of a one-to-one map-
ping of MAC addresses to wireless devices. One method
to prevent driver ﬁngerprinting is to change the device’s
MAC address to match the MAC address of another de-
vice within transmission range. This would fool our ﬁn-
gerprinting technique into believing probe requests from
two different wireless drivers are originating from the
same wireless driver. There are a number of problems
USENIX Association
Security ’06: 15th USENIX Security Symposium
175
with this solution. First, the wireless device must make
certain that the ﬁngerprinter is within transmission range
of both wireless devices.
If the ﬁngerprinter only ob-
serves probe request frames from one of the two de-
vices, it will not be deceived. Also, since our method
uses statistical methods to ﬁlter noise, the wireless device
needs to make certain that the other device is transmitting
enough probe request frames to mask its signature.
7.6 Driver Patching
While driver patching is not a full solution, we feel the
creation of well thought out driver patching schemes
would improve the overall security of device drivers as
new driver exploits are found. Current research is be-
ing conducted to improve the process of patching secu-
rity vulnerabilities [15, 16]. The device driver commu-
nity should leverage this research to create more robust
patching methods, and improve the overall level of driver
security.
8 Related Work
Various techniques for system and device level ﬁnger-
printing have been used for both legitimate uses, such
as forensics and intrusion detection, as well as mali-
cious uses, such as attack reconnaissance and user pro-
ﬁling. The most common techniques take advantage of
explicit content differences between system and applica-
tion responses. Nmap [17], p0f [18], and Xprobe [19]
are all open source, widely distributed tools that can re-
motely ﬁngerprint an operating system by identifying
unique responses from the TCP/IP networking stack. As
the TCP/IP stack is tightly coupled to the operating sys-
tem kernel, these tools match the content of machine re-
sponses to a database of OS speciﬁc response signatures.
Nmap and Xprobe actively query the target system to in-
voke these potentially identifying responses. In addition
to this active probing, p0f can passively ﬁngerprint an
operating system by monitoring network trafﬁc from a
target machine to some third party and matching char-
acteristics of that trafﬁc to a signature database. Data
link layer content matching can also be used to identify
wireless LAN discovery applications [20], which can be
useful for wireless intrusion detection.
While datagram content identiﬁcation methods are ar-
guably the most simple, they are also limited to situa-
tions where datagram characteristics are uniquely iden-
tiﬁable across systems, as well as accessible to an out-
side party. Except for a few unique instances, 802.11
MAC-layer frame formatting and content is generally in-
distinguishable across wireless devices; because of this,
more sophisticated methods are often required. In [21],
the authors present a technique to identify network de-
vices based on their unique analog signal characteristics.
This ﬁngerprinting technique is based on the premise that
subtle differences in manufacturing and hardware com-
ponents create unique signaling characteristics in digital
devices. While the results of analog signal ﬁngerprinting
are signiﬁcant, this method requires expensive hardware
such as an analog to digital converter, IEEE 488 inter-
face card, and digital sampling oscilloscope. Also, it is
not clear from their analysis of wired Ethernet devices
whether this method would be feasible in a typical wire-
less network setting where noise from both the environ-
ment and other devices is a more pressing consideration.
A device’s clock skew is also a target for ﬁngerprint-
ing. A technique presented in [22] uses slight drifts in a
device’s TCP option clock to identify a network device
over the Internet via its unique clock skew. Whereas our
technique ﬁngerprints which driver a wireless device is
running, time skew ﬁngerprinting is used to identify dis-
tinct devices on the Internet. Concerning security, unique
device ﬁngerprinting is often not as useful as driver and
other types of software ﬁngerprinting. As opposed to
content based ﬁngerprinting, both analog signal and time
skew ﬁngerprinting exploit characteristics of the under-
lying system hardware, making these techniques much
more difﬁcult to spoof.
Identiﬁcation via statistical timing analysis in the con-
text of communication patterns and data content has been
especially studied in the area of privacy enhancing tech-
nologies. While network security mechanisms such as
encryption are often utilized to protect user privacy, traf-
ﬁc analysis of encrypted trafﬁc has proven successful
in linking communication initiators and recipients par-
ticipating in anonymous networking systems [23, 24].
Trafﬁc analysis has also been applied to Web page ﬁn-
gerprinting.
In [25], the authors demonstrate a tech-
nique that characterizes the inter-arrival time and data-
gram sizes of web requests for certain popular web sites.
Using these web page characterizations, one can identify
which sites users on wireless LANs are visiting despite
these users browsing the Internet via encrypted HTTP
trafﬁc streams.
The techniques described above serve as only a sur-
vey of existing ﬁngerprinting techniques for systems,
devices, and even static content. The approaches vary
from exploiting content anomalies in the TCP/IP stack
to characterizing time-based system behavior at both the
physical and software layers of a system. While the
approaches vary, these contributions bring to light the
true feasibility of ﬁngerprinting via avenues otherwise
assumed to be uniformly implemented across systems.
9 Conclusion
We designed, implemented, and evaluated a technique
for passive wireless device driver ﬁngerprinting that
exploits the fact that most IEEE 802.11a/b/g wireless
drivers have implemented different active scanning algo-
176
Security ’06: 15th USENIX Security Symposium
USENIX Association
rithms. We evaluated our technique and demonstrated
that it is capable of accurately identifying the wire-
less driver used by 802.11 wireless devices without spe-
cialized equipment and in realistic network conditions.
Through an extensive evaluation including 17 wireless
drivers, we demonstrated that our method is effective in
ﬁngerprinting a wide variety of wireless drivers currently
on the market. Finally, we discussed ways to prevent ﬁn-
gerprinting that we hope will aid in improving the secu-
rity of wireless communication for devices that employ
802.11 networking.
10 Acknowledgments
Some of this work was performed while the authors were
at Sandia National Laboratories - California. Sandia is
a multiprogram laboratory operated by Sandia Corpora-
tion, a Lockheed Martin Company, for the United States
Department of Energy’s National Nuclear Security Ad-
ministration under Contract DE-AC04-94AL85000. The
authors greatly appreciate the staff of Sandia National
Laboratories for their assistance. The authors would like
to thank John Bethencourt, Nikita Borisov, Frank Hem-
ingway, Adam Lee, Kristen Pelon, Amanda Stephano,
and the anonymous reviewers for their useful sugges-
tions. This work was partially supported by NSF Grant
ITR-0428887 (Spectrum Management Toward Spectrum
Plenty) and the University of Colorado. Jason Franklin
performed this research while on appointment as a U.S.
Department of Homeland Security (DHS) Fellow. The
views expressed in this paper do not necessarily reﬂect
the policies and views of DHS, DOE, or afﬁliated orga-
nizations.
References
[1] Ken Ashcraft and Dawson R. Engler. Using Programmer-Written
Compiler Extensions to Catch Security Holes. In Proceedings of
IEEE Symposium on Security and Privacy, May 2002.
[2] Andy Chou, Junfeng Yang, Benjamin Chelf, Seth Hallem, and
Dawson R. Engler. An Empirical Study of Operating System Er-
rors. In Proceedings of Symposium on Operating Systems Princi-
ples (SOSP 2001), October 2001.
[3] Tal Garﬁnkel, Ben Pfaff, Jim Chow, Mendel Rosenblum, and Dan
Boneh. Terra: A Virtual Machine-Based Platform for Trusted
Computing. In Proceedings of Symposium on Operating Systems
Principles (SOSP 2003), October 2003.
[4] IEEE-SA Standards Board.
IEEE Std IEEE 802.11-1999 In-
formation Technology - Wireless LAN Medium Access Control
(MAC) And Physical Layer (PHY) Speciﬁcations. IEEE Com-
puter Society, 1999.
[5] IEEE-SA Standards Board. Amendment 6: Medium Access Con-
IEEE Computer Society,
trol (MAC) Security Enhancements.
April 2004.
[6] Ethereal: A network protocol analyzer. Web site, 2006. hhttp:
//www.ethereal.comi.
[7] Matthew S. Gast. 802.11 Wireless Networks: The Deﬁnitive
Guide. O’Reilly & Associates, Inc., Sebastopol, CA, USA, 2nd
edition, 2005.
[8] Nir Friedman, Dan Geiger, and Moises Goldszmidt. Bayesian
Network Classiﬁers. Machine Learning, 29(2-3):131–163, 1997.
[9] T. Hastie, R. Tibshirani, and J. H. Friedman. The Elements of
Statistical Learning. Springer, 2001.
[10] Snort Intrusion Detection and Prevention system. Web site, 2006.
hhttp://www.snort.org/i.
[11] Madwiﬁ: Atheros chip set drivers. Web site, 2006. hhttp:
//sourceforge.net/projects/madwifi/i.
[12] D. Agrawal and C. C. Aggarwal. On the Design and Quantiﬁca-
tion of Privacy Preserving Data Mining Algorithms. In Proceed-
ings of Symposium on Principles of Database Systems, 2001.
[13] R. Agrawal and R. Srikant. Privacy-preserving data mining. In
Proceedings of ACM SIGMOD, May 2000.
[14] B. Hoh and M. Gruteser. Location Privacy Through Path Con-
fusion. In Proceedings of IEEE/CreateNet International Confer-
ence on Security and Privacy for Emerging Areas in Communi-
cation Networks (SecureComm 2005), 2005.
[15] Gautam Altekar, Ilya Bagrak, Paul Burstein, and Andrew Schultz.
OPUS: Online Patches and Updates for Security. In Proceedings
of 14th USENIX Security Symposium, Aug 2005.
[16] John Dunagan, Roussi Roussev, Brad Daniels, Aaron Johnson,
Chad Verbowski, and Yi-Min Wang. Towards a Self-Managing
Software Patching Process Using Black-Box Persistent-State
Manifests. In First International Conference on Autonomic Com-
puting (ICAC’04), 2004.
[17] Nmap: a free network mapping and security scanning tool. Web
site, 2006. hhttp://www.insecure.org/nmap/i.
[18] Project details for p0f. Web site, 2004. hhttp://freshmeat.
net/projects/p0f/i.
[19] Arkin and Yarochkin.
Xprobe project page. Web site,
August 2002. hhttp://sourceforge.net/projects/
xprobei.
[20] Joshua Wright. Layer 2 Analysis of WLAN Discovery Ap-
plications for Intrusion Detection. Web site, 2002.
hhttp:
//www.polarcove.com/whitepapers/layer2.pdfi.
[21] Ryan Gerdes, Thomas Daniels, Mani Mina, and Steve Rus-
sell. Device Identiﬁcation via Analog Signal Fingerprinting:
A Matched Filter Approach.
In Proceedings of the Network
and Distributed System Security Symposium Conference (NDSS
2006), 2006.
[22] Tadayoshi Kohno, Andre Broido, and K. C. Claffy. Remote Phys-
ical Device Fingerprinting.
In Proceedings of the 2005 IEEE
Symposium on Security and Privacy (SP 2005), Washington, DC,
USA, 2005.
[23] Jean-Franc¸ois Raymond. Trafﬁc Analysis: Protocols, Attacks,
Design Issues, and Open Problems. In Proceedings of Privacy
Enhancing Technologies Workshop (PET 2000), May 2000.
[24] Mathewson and Dingledine. Practical Trafﬁc Analysis: Extend-
ing and Resisting Statistical Disclosure. In Proceedings of Pri-
vacy Enhancing Technologies Workshop (PET 2004), May 2004.
[25] George Dean Bissias, Marc Liberatore, and Brian Neil Levine.
Privacy Vulnerabilities in Encrypted HTTP Streams. In Proceed-
ings of Privacy Enhancing Technologies Workshop (PET 2005),
May 2005.
[26] Mike Kershaw. Kismet. Web site, 2006.
kismetwireless.net/i.
hhttp://www.
USENIX Association
Security ’06: 15th USENIX Security Symposium
177
netgear-unassoc-win (0,0.560,0.061)(0.8,0.135,0.652)
(1.6,0.077,1.532)(2.4,0.018,2.340)(3.2,0.023,3.125)
(4,0.106,4.035)(4.8,0.071,4.566)
osx-airportb-unassoc (0,0.639,0.022)(10.4,0.361,10.295)
proxim-assoc-native (0,0.035,0.396)(0.8,0.377,0.585)
(1.6,0.133,1.376)(2.4,0.016,2.078)(4.8,0.168,4.523)
(5.6,0.035,5.535)(55.2,0.087,55.400)(56,0.024,56.017)
(56.8,0.084,56.836)(57.6,0.022,57.435)
proxim-assoc-win (0,0.039,0.385)(0.8,0.329,0.585)
(1.6,0.118,1.385)(2.4,0.020,2.055)(4.8,0.089,4.681)
(5.6,0.089,5.500)(6.4,0.032,6.242)(7.2,0.013,7.167)
(55.2,0.122,55.402)(56,0.036,56.037)
(56.8,0.068,56.773)(57.6,0.012,57.466)
proxim-unassoc-win (0,0.540,0.052)(0.8,0.229,0.660)
(1.6,0.090,1.555)(2.4,0.012,2.328)(4.8,0.055,5.011)
(6.4,0.040,6.479)
smc-2532w-assoc-native (0,0.619,0.140)(0.8,0.028,0.477)
(1.6,0.013,1.812)(60.8,0.013,60.907)(62.4,0.183,62.595)
(63.2,0.118,62.899)
smc-2532w-unassoc-win (0,0.065,0.140)(0.8,0.047,0.727)
(1.6,0.880,1.681)
smc-2632w-unassoc-native (0,0.511,0.083)(10.4,0.470,10.555)
smc-wpci-assoc-native (0,0.461,0.001)(0.8,0.117,0.588)
(1.6,0.139,1.678)(2.4,0.020,2.185)(4,0.021,3.915)
(4.8,0.093,5.028)(56,0.127,55.708)
smc-wpci-unassoc-native (0,0.563,0.038)(0.8,0.144,0.689)
(1.6,0.014,1.790)(4,0.093,3.857)(4.8,0.079,4.952)
(5.6,0.057,5.935)(6.4,0.026,6.178)
wpc54g-assoc-win (0,0.633,0.038)(0.8,0.114,0.437)
(62.4,0.148,62.550)(63.2,0.105,62.981)
wpc54g-unassoc-native (0,0.623,0.054)(0.8,0.151,0.633)
(62.4,0.172,62.299)(63.2,0.055,62.960)
Notes
1Carnegie Mellon University,PI:EMAIL
2University
Colorado,
of
Boulder,
PI:EMAIL
3University of Illinois, Urbana-Champaign, PI:EMAIL
4University of California, Davis,PI:EMAIL
5Sandia National Laboratories,PI:EMAIL
6University
Colorado,
Boul-
of
der,PI:EMAIL
7It is important to note that some attackers will sniff the MAC ad-
dresses of other users on a wireless network to use as their own, giving
them the ability to steal a connection or hide their malicious actions.
Although we acknowledge that this scenario would bring about dupli-
cate MAC addresses on a network, we believe it is far from the common
case in most network settings.
8This is in contrast to disabling the SSID broadcast function. Dis-
abling SSID broadcast simply forces an AP to send a string of spaces or
a null string in the SSID ﬁeld of the beacon frame. Kismet [26] reports
this SSID as .
Appendix A
This appendix includes the entire master signature database from our
evaluation section. It is organized with the name of the wireless driver,
if the driver was associated (assoc) or unassociated (unassoc), and if
Windows (win) was conﬁguring the wireless device, or a standalone
program (native). The values after the driver name and conﬁguration
are a set of tuples ordered as follows: (Bin Value, Percentage, Bin Mean
Value).
cisco-abg-assoc-native (0.8,0.101,0.677)(1.6,0.108,1.450)
(2.4,0.168,2.377)(3.2,0.021,2.928)(4,0.024,3.798)
(4.8,0.028,4.691)(5.6,0.048,5.536)(6.4,0.034,6.303)
(7.2,0.080,7.132)(8,0.032,7.830)(8.8,0.017,8.473)
(9.6,0.044,9.607)(53.6,0.288,53.399)
cisco-abg-unassoc-native (0,0.514,0.048)(0.8,0.285,0.749)
(1.6,0.037,1.656)(2.4,0.028,2.373)(3.2,0.067,3.264)
(4.8,0.041,4.981)(5.6,0.025,5.521)
cisco-abg-unassoc-win (0,0.466,0.072)(0.8,0.126,0.720)
(1.6,0.115,1.479)(2.4,0.056,2.345)(3.2,0.040,3.089)
(4,0.025,3.843)(4.8,0.020,4.592)(5.6,0.019,5.415)
(6.4,0.012,6.129)(8.8,0.013,8.554)(49.6,0.063,49.639)
(50.4,0.026,50.146)
dwl-ag530-assoc-native (0,0.420,0.032)(0.8,0.108,0.590)
(1.6,0.043,1.358)(2.4,0.011,2.067)(4.8,0.113,4.470)
(5.6,0.060,5.477)(6.4,0.039,6.192)(7.2,0.030,7.206)
(8,0.011,7.630)(12,0.010,11.829)(51.2,0.144,50.995)
dwl-ag530-unassoc-native (0,0.544,0.034)(0.8,0.052,0.597)
(1.6,0.198,1.670)(6.4,0.053,6.659)(7.2,0.129,7.248)
(8,0.012,7.806)
dwl-ag650-assoc-win (0,0.392,0.008)(0.8,0.231,0.549)
(1.6,0.049,1.481)(2.4,0.030,2.416)(3.2,0.045,3.250)
(4,0.067,4.092)(4.8,0.021,4.687)(58.4,0.164,58.198)
dwl-ag650-unassoc-win (0,0.606,0.084)(0.8,0.233,0.621)
(1.6,0.090,1.689)(2.4,0.068,2.322)
dwl-g520-unassoc-native (0,0.533,0.054)(0.8,0.246,0.674)
(1.6,0.072,1.541)(2.4,0.035,2.539)(3.2,0.079,2.989)
(4,0.026,3.706)
dwl-g520-unassoc-win (0,0.527,0.055)(0.8,0.236,0.666)
(1.6,0.134,1.523)(2.4,0.039,2.401)(3.2,0.044,3.109)
(4,0.015,3.791)
engenuis-unassoc-win (0,0.193,0.059)(0.8,0.104,1.188)
(1.6,0.609,1.271)(2.4,0.082,2.529)(4,0.011,3.814)
intel2100-assoc-win (0,0.766,0.019)(63.2,0.234,62.949)
intel2100-unassoc-win (0,0.927,0.055)(30.4,0.073,30.132)
intel-2200-assoc-native (0,0.591,0.107)(0.8,0.071,0.955)
(1.6,0.079,1.495)(2.4,0.107,2.182)(120,0.050,120.254)
(120.8,0.091,120.698)
intel-2200-unassoc-native (0,0.659,0.078)(0.8,0.015,0.882)
(32.8,0.031,33.063)(34.4,0.139,34.765) (35.2,0.142,34.853)
intel-2915-assoc-native (0,0.659,0.080)(0.8,0.032,0.938)
(1.6,0.037,1.426)(118.4,0.171,118.155) (119.2,0.076,119.193)
intel-2915-unassoc-native (0,0.668,0.083)(32.8,0.331,32.868)
linksys-pci-unassoc-win (0,0.348,0.165)(0.8,0.273,0.923)
(1.6,0.032,1.262)(61.6,0.262,61.787)
(62.4,0.027,62.270)(63.2,0.054,62.953)
madwiﬁ-unassoc (72.8,0.881,72.988)(133.6,0.119,133.978)
netgear-assoc-win (0,0.423,0.001)(0.8,0.203,0.611)
(1.6,0.038,1.552)(2.4,0.058,2.240)(3.2,0.037,3.206)
(4,0.016,4.006)(4.8,0.060,4.731)(5.6,0.010,5.505)
(57.6,0.149,57.498)
178
Security ’06: 15th USENIX Security Symposium
USENIX Association