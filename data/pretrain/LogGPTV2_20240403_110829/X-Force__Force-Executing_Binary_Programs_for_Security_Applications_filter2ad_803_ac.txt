ecution without switching any predicate. Note that the
work list is not empty initially. At the end of a forced ex-
ecution, we update the ﬁtness function that indicates the
remaining space to explore (line 6), e.g., coverage. Then
in lines 7-16, we try to determine if it would be of inter-
est to further switch more predicate instances. Lines 7-9
compute the sequence of predicate instances eligible for
switching. Note that it cannot be a predicate before the
last switched predicate speciﬁed in switches as switching
such a predicate may change the control ﬂow such that
the speciﬁcation in switches becomes invalid.
In lines
10-16, for each eligible predicate and its current branch
outcome, we query the ﬁtness function to determine if
we should further switch it to generate a new forced ex-
ecution. If so, we add it to the work list and update the
ﬁtness function. Note that in each new forced execution,
we essentially switch one more predicate.
Different Fitness Functions. The search space of all
possible paths is usually prohibitively large for real-
world binaries. Different applications may deﬁne differ-
ent ﬁtness functions to control the scope they want to ex-
plore. In the following, we introduce three ﬁtness func-
tions that we use. Other more complex functions can be
similarly developed.
• Linear Search.
In certain applications, such as
constructing control ﬂow graphs and dynamic type
reverse engineering (Section 5), the goal may be
just to cover each instruction. The ﬁtness func-
tion F could be deﬁned as a mapping covered :
Predicate × boolean (cid:29)→ boolean that determines
if a branch of a predicate has been covered. The
evaluation in the box in line 11 of Algorithm 1 is
hence deﬁned as !covered(p,¬b), which means we
will switch the predicate if the other branch has not
been covered. Once we decide to switch an addi-
tional predicate, the ﬁtness function is updated to
reﬂect the new coverage (line 12). The number of
executions needed is hence O(n) with n the number
instructions in the binary.
• Quadratic Search. In applications such as identify-
ing indirect call targets, which is a very important
challenge in binary analysis, simply covering all in-
structions may not be sufﬁcient, we may need to
cover paths that may lead to indirect calls or gener-
ate different indirect call targets. We hence deﬁne F
as a set icalls to keep the set of the indirect call sites
and potential indirect call targets that have been dis-
covered by all the explored paths. The evaluation in
line 11 is hence to test if cardinality of icall grows
with the currently explored path. If so, the execu-
tion is considered important and all eligible unique
predicates (not instances) in the execution are fur-
ther explored. The complexity is O(n2) with n the
number of instructions. X-Force can also limit the
834  23rd USENIX Security Symposium 
USENIX Association
quadratic search within a function.
• Exponential Search. If we simply set the evaluation
in the line 12 to true, the algorithm performs ex-
ponential search because it will explore each possi-
ble combination. In practice, we cannot afford such
search. However, X-Force provides the capability
for the user to limit such exponential search within
a sub-range of the binary.
Taint Analysis to Reduce Search Space. An observa-
tion is that we do not have to force-set predicates in low-
level utility methods, because their branch outcomes are
usually not affected by any input. Hence in X-Force, we
use taint analysis to track if a predicate is related to pro-
gram input. X-Force will only force branch outcomes of
those tainted predicates. Since this is a standard tech-
nique, we omit its details.
4 Practical Challenges
In this section, we discuss how we address some promi-
nent challenges in handling real world executables.
Jump Tables.
In our previous discussion, we assume
control transfer is only through simple predicates. In re-
ality, jump tables allow a jump instruction to have more
than two branches. Jump tables are widely used. They
are usually generated from switch statements in the
source code level. In X-Force, we leverage existing jump
table reverse engineering techniques [21] to recover the
jump table for each indirect jump. Our exploration al-
gorithm then tries to explore all possible targets in the
table.
Handling Loops and Recursions. Since X-Force may
corrupt variables, if a loop bound or loop index is cor-
rupted, an (incorrect) inﬁnite loop may result. Similarly,
if X-Force forces the predicate that guards the termina-
tion of some recursive function call, inﬁnite recursion
may result. To handle inﬁnite loops, X-Force leverages
taint analysis to determine if a loop bound or loop in-
dex is computed from input.
If so, it resets the loop
bound/index value to a pre-deﬁned constant. To handle
inﬁnite recursion, X-Force constantly monitors the call
stack.
If the stack becomes too deep, X-Force further
checks if there are cyclic call paths within the call stack.
If cyclic paths are detected, X-Force skips calling into
that function by simulating a ”ret” instruction.
Protecting Stack Memory. Our early discussion on
memory safety focused on protecting heap memory.
However, it is equally important to protect stack memory.
Particularly, the return address of a function invocation
and the stack frame base address of the caller are stored
on stack upon the invocation. They are restored when the
callee returns. Since X-Force may corrupt variable val-
ues that affect stack accesses, such critical data could be
undesirably over-written. We hence need to protect stack
memory as well. However, we cannot simply prevent
any stack write beyond the current frame. The strategy
of X-Force is to prevent any stack writes that originate in
the current stack-frame to go beyond the current frame.
Speciﬁcally, when a stack write attempts to over-write
the return address, the write is skipped. Furthermore,
the instruction is ﬂagged. Any later instances of the in-
struction that access a stack address beyond the current
stack-frame are also skipped. The ﬂags are cleared when
the callee returns.
Handling Library Function Calls. The default strategy
of X-Force is to avoid switching predicates inside library
calls as our interest falls in user code. X-Force handles
the following library functions in some special ways.
• I/O functions. X-Force skips all output calls and
most input calls except ﬁle inputs. X-Force provides
wrappers for ﬁle opens and ﬁle reads. If the ﬁle to
open does not exist, X-Force skips calling the real
ﬁle open and returns a special ﬁle handler. Upon
ﬁle reads, if the ﬁle handler has the special value,
it returns without reading the ﬁle such that the in-
put buffer contains random values. Supporting ﬁle
reads allows X-Force to avoid unnecessary failure
recovery and path exploration if the demanded ﬁles
are available.
• Memory manipulation functions. To support mem-
ory safety, X-Force wraps memory allocation and
de-allocation. For memory copy functions such as
memcpy() and strcpy(), the X-Force wrappers
ﬁrst determine the validity of the copy operation,
e.g., the source and target address ranges must have
been allocated, must not overlap with any critical
stack addresses.
If necessary, on-demand alloca-
tion is performed before calling the real function.
This eliminates the need of memory safety monitor-
ing, linear set tracing, and memory error recovery
inside these functions, which could be quite heavy-
weight due to the special structure of these func-
tions. For example, memcpy() copies individual ad-
dresses one by one and these addresses are linearly
correlated as they are computed through pointer ma-
nipulation, leading to very large linear sets.
For statically linked executables, X-Force relies on IDA-
Pro to recognize library functions in a pre-processing
step. IDA leverages a large signature dictionary to rec-
ognize library functions with very good accuracy. For
functions that are not recognized by IDA, X-Force exe-
cutes them as user code.
Handling Threads. Some programs spawn additional
threads during their execution. It is difﬁcult for X-Force
to model multiple threads into a single execution since
the order of their execution is nondeterministic.
If we
USENIX Association  
23rd USENIX Security Symposium  835
simply skip the thread creation library functions such as
CreateThread() and beginthread(), the functions in the
thread could not be covered. To solve this problem, we
adopt a simple yet effective approach of serializing the
execution of threads. The calls to thread creation library
functions are replaced with direct function calls to the
starting functions of threads, which avoid creating mul-
tiple threads and guarantees code coverage at the same
time. Note that as a result, X-Force is incapable of an-
alyzing behavior that is sensitive to schedules. We will
leave it to our future work.
5 Evaluation
X-Force is implemented in PIN. It supports WIN32 ex-
ecutables. In this section, we use three application case
studies to demonstrate the power of X-Force.
Table 4: Detailed Coverage Comparison with Dynamic Analysis
164.gzip
175.vpr
176.gcc
181.mcf
186.crafty
197.parser
252.eon
253.perlbmk
254.gap
255.vortex
256.bzip2
300.twolf
Input Union X-Force
3601
19398
157451
1622
27811
17339
15580
55964
37564
53798
3612
19996
5075
29218
227546
1935
42763
23135
27224
33643
110066
101207
4830
41935
Input Union
∩ X-Force
3601
19398
157451
1622
27811
17339
15580
27003
37564
53798
3612
19996
Input Union
\ X-Force
0
0
0
0
0
0
0
28961
0
0
0
0
X-Force
\ Input Union
1474
9820
70095
313
14952
5796
11644
6640
72502
47409
1218
21939
5.1 Control Flow Graph (CFG) and Call
Graph (CG) Construction
Construction of CFG and CG is a basic but highly chal-
lenging task for binary analysis, especially the identiﬁ-
cation of indirect call targets. In the ﬁrst case study, we
apply X-Force to construct CFGs and CGs for stripped
SPECINT 2000 binaries. We also evaluate the perfor-
mance of X-Force in this study. To construct CFGs and
CGs, we use X-Force to explore execution paths and
record all the instructions, control ﬂow edges, and call
edges, including indirect jump and indirect call edges.
The exploration algorithm is a combination of linear
search and quadratic search (Section 3.2). Quadratic
search is limited to functions that contain indirect calls
or encounter values that look like function pointers.
We compare X-Force results with four other ap-
proaches: (1) IDA-Pro; (2) Execute all the test cases pro-
vided in SPEC and union the CFGs and CGs observed
for each program (i.e., dynamic analysis); (3) Static CG
construction using LLVM on SPEC source code (i.e.,
static analysis) 3. (4) Dynamic CFG construction using
3We cannot compare LLVM CFGs with X-Force CFGs as LLVM
CFGs are not represented at the instruction level.
a symbolic execution system S2E [10]. We could not
compare with CodeSurfer-X86 [2], which can also gen-
erate CFG/CG for executables based on static analysis,
because it is not available through commercial or aca-
demic license.
Part of the results is presented in Table 3. Columns 2-
4 present the instructions that are covered by the differ-
ent approaches. Particularly, the second column shows
the number of instructions recognized by IDA. The third
column shows those that are executed by concrete input
runs. Columns 5-8 show the indirect call edges recog-
nized by the different approaches4. The last ﬁve columns
show internal data of X-Force.
From the coverage data, we observe that X-Force
could cover a lot more instructions than dynamic analysis
except 253.perlbmk. Note that the dynamic analysis re-
sults are acquired using all the test, training and reference
inputs in SPEC, which are supposed to provide good cov-
erage. Table 4 presents more detailed coverage compari-