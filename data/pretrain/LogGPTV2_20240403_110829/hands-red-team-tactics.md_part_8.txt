>
> ![](media/image201.jpeg)
# Disconnecting from the team server
> By clicking on the minus (--) sign, you will be disconnected from the
> current instance of the team server:
>
> ![](media/image202.jpeg)
You will also see a box just above the server switchbar that says
Disconnected from team server. Once you disconnect from the instance,
you can close it and continue the operations on the other instance.
However, be sure to bear in mind that once you close the tab after
disconnection, you will lose all display tabs that were open on that
particular instance. What\'s wrong with that?
> This may cause some issues. This is because in a red-team operation
> you do not always have the specific script that will execute certain
> commands and save the information in the database.
>
> In this case, it would be better to execute the command on a shell and
> then save the output on Notepad or Sublime. However, not many people
> follow this practice, and hence they lose a lot of valuable
> information.
You can now imagine how heart-breaking it can be to close the instance
in case of a disconnection and find that all of your shell output (which
was not even copied to Notepad) is gone!
> ![](media/image203.jpeg)
# Configure listeners
> For a team server to function properly, you need to configure a
> listener. But before we can do this, we need to know what a listener
> actually is.
>
> ![](media/image204.jpeg)Just like the handler used in Metasploit (that
> is, exploit/multi/handler), the Cobalt Strike team server also needs a
> handler for handling the bind/reverse connections to and from the
> target/victim\'s system/server. You can configure a listener by
> clicking on the headphones-like icon:
After clicking the headphones icon, you\'ll open the Listeners tab in
the bottom section. Click on the Add button to add a new listener:
> ![](media/image205.jpeg)
>
> You can choose the type of payload you want to listen for with the
> Host IP address and the port to listen on for the team server or the
> redirector: In this case, we have used a beacon payload, which will be
> communicating over SSL. Beacon payloads are a special kind of payload
> in Cobalt Strike that may look like a generic meterpreter but actually
> have much more functionality than that.
>
> Beacons will be discussed in more detail in further chapters.
>
> ![](media/image206.jpeg)
>
> ![](media/image207.jpeg)As a beacon uses HTTP/S as the communication
> channel to check for the tasking allotted to it, you\'ll be asked to
> give the IP address for the team server and domain name in case any
> redirector is configured (Redirectors will be discussed in more
> details in further chapters):
Once you\'re done with the previous step, you have now successfully
configured your listener. Your listener is now ready for the incoming
connection:
> ![](media/image208.jpeg)
# Session graphs
> To see the sessions in a graph view, you can click the button shown in
> the following screenshot:
>
> ![](media/image209.jpeg)
![](media/image210.jpeg)Session graphs will show a graphical
representation of the systems that have been compromised and injected
with the payloads. In the following screenshot, the system displayed on
the screen has been compromised. PT is the user, PT-PC is the computer
name (hostname), and the numbers just after the @ are the PIDs of the
processes that have the payload injected into them:
> When you escalate the privileges from a normal user to NT
> AUTHORITY\\SYSTEM
(vertical privilege escalation), the session graph will show the system
in red and
> ![](media/image211.jpeg)surrounded by lightning bolts. There is also
> another thing to notice here: the \* (asterisk) just after the
> username. This means that the system with PID 1784 is escalated to NT
> AUTHORITY\\SYSTEM:
# Session table
> ![](media/image212.jpeg)To see the open sessions in a tabular view,
> click on the button shown in the following screenshot:
![](media/image213.jpeg)All the sessions that are opened in Cobalt
Strike will be shown along with the sessions\' details. For example,
this may include external IP, internal IP, user, computer name, PID into
which the session is injected, or last. Last is an element of Cobalt
Strike that is similar to WhatsApp\'s Last Seen feature, showing the
last time that the compromised system contacted the team server (in
seconds). This is generally used to check when the session was last
active:
> Right-clicking on one of the sessions gives the user multiple options
> to interact with, as demonstrated in the following screenshot:
>
> ![](media/image214.jpeg)
These options will be discussed later in the book.
# Targets list
> To view the targets, click on the button shown in the following
> screenshot:
>
> ![](media/image215.jpeg)
>
> Targets will only show the IP address and the computer name, as
> follows:
>
> ![](media/image216.jpeg)
For further options, you can right-click on the target:
> ![](media/image217.jpeg)
>
> From here, you can interact with the sessions opened on the target
> system. As you can see in the preceding screenshot, PT@2908 is the
> session opened on the given IP and the beacon payload resides in the
> PID 2908. Consequently, we can interact with this session directly
> from here:
>
> address
>
> name note
![](media/image218.jpeg)![](media/image221.jpeg)![](media/image222.jpeg)
> %ºººº apoe PT©2456
>
> Services
>
> Host
# Credentials
> ![](media/image223.jpeg)Credentials such as web login passwords,
> password hashes extracted from the SAM file, plain-text passwords
> extracted using mimikatz, etc. are retrieved from the compromised
> system and are saved in the database. They can be displayed by
> clicking on the icon shown in the following screenshot:
>
> ![](media/image224.jpeg)When you perform a hashdump in Metasploit (a
> post-exploitation module that dumps all NTLM password hashes from the
> SAM database), the credentials are saved in the database. With this,
> when you dump hashes in Cobalt Strike or when you use valid
> credentials to log in, the credentials are saved and can be viewed
> from here:
# Downloaded files
> To view all the exfiltrated data from the target system, you can click
> on the button shown in the following screenshot:
>
> ![](media/image225.jpeg)
>
> This will show the files (exfiltration) that were downloaded from the
> target system:
>
> ![](media/image226.jpeg)
# Keystrokes
> This option is generally used when you have enabled a keylogger in the
> beacon. The keylogger will then log the keystrokes and send it to the
> beacon. To use this option, click the button shown in the following
> screenshot:
>
> ![](media/image227.jpeg)
When a user logs into the system, the keylogger will log all the
keystrokes of that user (explorer.exe is a good candidate for
keylogging). So, before you enable the keylogger from the beacon,
migrate or inject a new beacon into the explorer.exe process and then
start the keylogger. Once you do this, you can see that there\'s a new
entry in the **Keystrokes** tab:
> ![](media/image228.jpeg)
>
> The left side of the tab will show the information related to the
> beacon. This may include the user, the computer name, the PID in which
> the keylogger is injected, and the timestamp when the keylogger sends
> the saved keystrokes to the beacon. In contrast, the right side of the
> tab will show you the keystrokes that were logged.
# Screenshots
> ![](media/image229.jpeg)To view the screenshots from the target
> system, click on the button shown in the following screenshot:
>
> This will open up the tab for screenshots. Here, you will get to know
> what\'s happening on the system\'s screen at that moment itself. This
> is quite helpful when a server administrator is logged in to the
> system and works on **Active Directory** (**AD**) and **Domain
> Controller** (**DC**) settings. When monitoring the screen, we can
> find crucial information that can lead to DC compromise:
>
> ![](media/image230.jpeg)
# Payload generation -- stageless Windows executable
> ![](media/image231.jpeg)The *stageless Windows executable payload
> generation* feature is available at the click of a button. You can
> generate a Windows executable, and to do this you start by clicking on
> the button shown in the following screenshot:
Once clicked, a new window will open where you will input the details
for the team server and the payload that will be generated by it:
> ![](media/image232.jpeg)
>
> The Stage will show the available listeners that can be used to send
> the second stage payload. You need to select the listener of your
> choice for this. In this case, we already have a listener set up on
> port 443, which has been named
>
> ![](media/image233.jpeg)\_RevHttpsBeacon\_. This listener is a beacon
> payload. If you have proxy server set up with authentication already,
> you can provide the details in Proxy. To do this, you need to click on
> the options button besides the Proxy textbox:
Cobalt Strike supports HTTP and SOCKS (4a) proxies. You can set up the
proxy details that the payload will use while connecting to the team
server via your desired authenticated proxy.
> The output payload that will be generated through this can be in
> multiple formats
>
> --- PowerShell (this will create a .ps1 file with the payload in it;
> you need to execute this PowerShell script with the executionpolicy
> bypass argument in order to get the shell), Raw (which can be used for
> further *FUD-ing* of the payload), Windows EXE (a basic EXE that works
> on both x86 and x64 Windows OS), Windows service EXE (for persistence,
> the payload will be set up as a Windows service), 32-bit DLL and
> 64-bit DLL (DLLs are better options when customized for bypassing AV,
> and they are also smaller in size; you can generate a DLL and then
> inject it directly into the memory, and this would bypass the static
> file AV detection/on-disk-write detection):
>
> ![](media/image234.jpeg)
# Payload generation -- Java signed applet
> ![](media/image235.jpeg)A Java signed applet attack is a very famous
> drive-by attack used by the attacker to exploit the applets loaded on
> a web page. The Java applets are self-signed, and they can be used to
> get permission from the visitor (victim) for execution. Click on the
> button shown in the following screenshot for payload generation:
>
> Once the visitor allows the applet to be executed, the payload will be
> executed and the beacon will be calling back to the team server.
>
> You can also change the applet settings, including the Local URI, the
> Local Host, and Local Port (you can also give the redirector\'s
> information here), and the Listener:
>
> ![](media/image236.jpeg)
>
> If you do not wish to use the listeners available in the drop-down
> list, you can always add a new one by clicking the Add button:
>
> ![](media/image237.jpeg)
>
> ![](media/image238.jpeg)When everything is ready, you need to click
> the Launch button for executing the drive-by attack. Cobalt Strike
> will host the applet and give you the confirmation:
>
> A lot of pentesters use this social engineering technique to get
> access to the target system by using an applet signed with a
> self-signed code signing certificate. However, this does not work with
> most of the browsers now as they have policies in place to prevent it.
> Starting with Java version 1.7 (update 51), the self-signed Java
> applet will not run by default. A better option would be
>
> either to use a valid certificate or to go for macros.
# Payload generation -- MS Office macros
> ![](media/image239.jpeg)Payload execution via Office macros is the new
> *black*. If you have heard about the uproar of ransomware, then you
> must know about macros as well. For the past few years, macros have
> been used to execute the payload embedded in it. However, for a
> successful execution, the victim needs to be convinced to click on
> Enable Content in the malicious document. To start generating macros-
> enabled payload embedded in the document, click the button shown in
> the following screenshot:
>
> At this point, you will get a listener window where you will have to
> select the listener to use once the payload is executed over the
> target system. Of course, you also have the option to add a new
> listener if you desire to do so:
>
> ![](media/image240.jpeg)
![](media/image241.jpeg)Once you generate the macros for the given
listener, you will get an instruction window that you can follow in
order to embed the macros in a document:
> This document can be saved as a macro-enabled document (.docm) or a
> word 97- 2003 document (.doc).
>
> The document can be then delivered to the victim via any method, and
> once the victim opens up the document and enables the content, the
> macros will be executed and the beacon will call back to home (team
> server).
# Scripted web delivery
> ![](media/image242.jpeg)This technique is used to deliver the payload
> via the web. To continue, click on the button shown in the following
> screenshot:
![](media/image243.jpeg)A scripted web delivery will deliver the payload
to the target system when the generated command/script is executed on
the system. A new window will open where you can select the type of
script/command that will be used for payload delivery. Here, you also
have the option to add the listener accordingly:
# File hosting
> ![](media/image244.jpeg)Files that you want to host on a web server
> can also be hosted through the Cobalt Strike team server. To host a
> file through the team server, click on the button shown in the
> following screenshot:
>
> This will bring up the window where you can set the URI, the file you
> want to host, the web server\'s IP address and port, and the MIME
> type. Once done, you can download the same file from the Cobalt Strike
> team server\'s web server. You can also provide the IP and port
> information of your favorite web redirector. This method is generally
> used for payload delivery:
>
> ![](media/image245.jpeg)
# Managing the web server
> ![](media/image246.jpeg)The web server running on the team server,
> which is generally used for file hosting and beacons, can be managed
> as well. To manage the web server, click on the button shown in the
> following screenshot:
>
> ![](media/image247.jpeg)This will open the Sites tab where you can
> find all web services, the beacons, and the jobs assigned to those
> running beacons. You can manage the jobs here:
# Server switchbar
> ![](media/image248.jpeg)The Cobalt Strike client can connect to
> multiple team servers at the same time and you can manage all the
> existing connections through the server switchbar. The switchbar
> allows you to switch between the server instances:
>
> You can also rename the instances according to the role of the server.
> To do this, simply right-click on the Instance tab and you\'ll get two
> options: Rename and
![](media/image249.jpeg)Disconnect:
> ![](media/image250.jpeg)You need to click on the Rename button to
> rename the instance of your choice. Once you click this button,
> you\'ll be prompted for the new name that you want to give to your
> instance:
>
> For now, we have changed this to EspionageServer:
>
> ![](media/image251.jpeg)
>
> Renaming the switchbar helps a lot when it comes to managing multiple
> sessions from multiple team servers at the same time.
# Customizing the team server
> The team server is just a bash script that executes the
> cobaltstrike.jar file for starting the server. By default, the
> Armitage team server runs on port 55553/tcp and the Cobalt Strike team
> server runs on port 50050/tcp (both use SSL for communication
> initiation). Being the default port, it\'s easy for someone else to
> find your team server on the internet and try to connect to it in
> order to get access to your compromised hosts. Consequently, to
> protect your team server from attacks, you need to think of a few ways
> to protect it from other attackers. These may include the following:
>
> Use a strong password for team server authentication \[EASY\]
>
> Whitelist your IP from the team server firewall and deny all other IPs
> (this could be messy if your IP is dynamic) \[MEDIUM\]
>
> Block the 55553/tcp port from the firewall on the team server and
> tunnel this port to your system (reverse SSH tunnel) \[HARD\]
>
> Customize the team server and change the port \[EASY\]
>
> To customize the script, first you need to look for the teamserver
> file in your
>
> cobaltstrike directory. You can do this by executing ls -alh:
>
> ![](media/image252.jpeg)
>
> Next, open the file with an editor of your choice. This may include
> nano, pico, vim, vi, leafpad, or gedit, but I prefer to use nano:
> **nano teamserver**
>
> ![](media/image253.jpeg)