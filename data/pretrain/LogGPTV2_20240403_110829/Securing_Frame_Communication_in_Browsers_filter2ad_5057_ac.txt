or destroying its JavaScript context. The frame can ob-
serve the value of the fragment by periodically polling
window.location.hash to see if the fragment
identiﬁer has changed. This technique can be used to
send short string messages entirely within the browser,
avoiding network latency. However, the communication
channel is somewhat unreliable because, if two naviga-
tions occur between polls, the ﬁrst message will be lost.
Security Properties. Because it was “found” and not
designed, the fragment identiﬁer channel has less-than-
ideal security properties. The browser’s scripting policy
prevents security origins other than the one preceding the
# from eavesdropping on messages because they are un-
able to read the frame’s location (even though the nav-
igation policy permits them to write to the frame’s lo-
cation). Browsers also prevent arbitrary security origins
from tampering with portions of messages. Other secu-
rity origins can, however, overwrite the fragment iden-
tiﬁer in its entirety, leaving the recipient to guess the
sender of each message.
To understand these security properties, we develop
an analogy with well-known properties of network chan-
nels. We view the browser as guaranteeing that the frag-
ment identiﬁer channel has conﬁdentiality: a message
can be read only by its intended recipient. The fragment
identiﬁer channel fails to be a secure channel because it
lacks authentication, the ability of the recipient to un-
ambiguously determine the sender of a message. The
channel also fails to be reliable because messages might
not be delivered, and the attacker might be able to replay
previous messages using the browser’s history API.
The security properties of the fragment identiﬁer chan-
nel are analogous to a channel on an untrusted network
secured by a public-key cryptosystem in which each
message is encrypted with the public key of its intended
recipient. In both cases, if Alice sends a message to Bob,
no one except Bob learns the contents of the message
(unless Bob forwards the message). In both settings, the
channel does not provide a reliable procedure for deter-
mining who sent a given message. There are two inter-
esting differences between the fragment identiﬁer chan-
nel and the public-key channel:
1. The public-key channel is susceptible to trafﬁc anal-
ysis, but an attacker cannot determine the length of
a message sent over the fragment identiﬁer channel.
An attacker can extract timing information by fre-
quently polling the browser’s clock, but obtaining a
high-resolution timing signal signiﬁcantly degrades
the browser’s performance.
2. The fragment identiﬁer channel is constrained by
the browser’s frame navigation policy. In principle,
this could be used to construct protocols secure for
the fragment identiﬁer channel that are insecure for
the public-key channel (by preventing the attacker
from navigating the recipient), but in practice this
restriction has not prevented us from constructing
attacks on existing protocol implementations.
Despite these differences, we ﬁnd the network analogy
useful in analyzing inter-frame communication.
identiﬁer channel
Windows Live Channels. Microsoft uses the frag-
ment
in its Windows Live plat-
form library to implement a higher-level channel API,
Microsoft.Live.Channels [36]. The Windows
Live Contacts gadget uses this API to communicate with
its integrator. The integrator can instruct the gadget to
add or remove contacts from the user’s contacts list, and
the gadget can send the integrator details about the user’s
contacts. Whenever the integrator asks the gadget to per-
form a sensitive action, the gadget asks the user to con-
ﬁrm the operation and displays the integrator’s host name
to aid the user in making trust decisions.
Microsoft.Live.Channels attempts to build a
secure channel over the fragment identiﬁer channel. By
reverse engineering the implementation, we determined
that it uses two sessions of the following protocol (one in
each direction) to establish a secure channel:
A → B : NA, URIA
B → A : NA, NB
A → B : NB, Message1
In this notation, A and B are frames, NA and NB are
fresh nonces (numbers chosen at random during each
run of the protocol), and URIA is the location of A’s
frame. Under the network analogy described above,
this protocol is analogous to a variant of the classic
Needham-Schroeder key-establishment protocol [29].
17th USENIX Security Symposium 
USENIX Association


SMash and OpenAjax 1.1. A recent paper [22] from
IBM proposed another protocol for establishing a secure
channel over the fragment identiﬁer channel. They de-
scribe their protocol as follows:
The SMash library in the mashup applica-
tion creates the secret, an unguessable random
value. When creating the component, it in-
cludes the secret in the fragment of the com-
ponent URL. When the component creates the
tunnel iframe it passes the secret in the same
manner.
The SMash developers have contributed their code to the
OpenAjax project, which plans to include their fragment
identiﬁer protocol in version 1.1. The SMash protocol
can be understood as follows:
A → B : N, URIA
B → A : N
A → B : N, Message1
This protocol admits the following simple attack:
Attacker → Gadget : N, URII
Gadget → Integrator : N
Attacker → Gadget : N, Message
We have conﬁrmed this attack by implementing the at-
tack against the SMash implementation. Additionally,
the attacker is able to conduct this attack covertly by
blocking the message from the gadget to the integrator
because the message waits for the load event to ﬁre.
Secure Fragment Messaging. The fragment identiﬁer
channel can be secured using a variant of the Needham-
Schroeder-Lowe protocol [23]. The main idea in Lowe’s
improvement of the Needham-Schroeder protocol is that
the responder must include his identity in the second
message of the protocol, letting the honest initiator deter-
mine that an attack is in progress and abort the protocol.
A → B : NA, URIA
B → A : NA, NB, URIB
A → B : NB
. . .
A → B : NA, NB, Messagei
B → A : NA, NB, Messagej
We contacted Microsoft,
IBM, and the OpenA-
JAX Alliance about the vulnerabilities in their frag-
ment
identiﬁer messaging protocols and suggested
the above protocol improvement. Microsoft adopted
our suggestions and deployed a patched version of
Figure 3: Lowe Anomaly: This Windows Live Contacts
gadget received a message that appeared to come from
integrator.com, but in reality the request was made
by attacker.com.
The Needham-Schroeder protocol was designed to estab-
lish a shared secret between two parties over an insecure
channel. In the Needham-Schroeder protocol, each mes-
sage is encrypted with the public key of its intended re-
cipient. The Windows Live protocol does not employ en-
cryption because the fragment identiﬁer channel already
provides the required conﬁdentiality.
The Needham-Schroeder protocol has a well-known
anomaly, due to Lowe [23], which leads to an attack in
the browser setting. In the Lowe scenario, an honest prin-
cipal, Alice, initiates the protocol with a dishonest party,
Eve. Eve then convinces honest Bob that she is Alice. In
order to exploit the Lowe anomaly, an honest principal
must be willing to initiate the protocol with a dishonest
principal. This requirement is met in mashups because
the integrator initiates the protocol with the gadget at-
tacker’s gadget in order to establish a channel. The Lowe
anomaly can be exploited to impersonate the integrator to
the Windows Live Contacts gadget as follows:
Integrator → Attacker : NI , URII
Attacker → Gadget : NI , URII
Gadget → Integrator : NI , NG
Integrator → Attacker : NG, Message1
After these four messages, the attacker possesses NI and
NG and can impersonate the integrator to the gadget.
We have successfully implemented this attack against the
Windows Live Contacts gadget. The issue is easily ob-
servable for the Contacts gadget because the gadget dis-
plays the integrator’s host name to the user in its security
user interface; see Figure 3.
USENIX Association  
17th USENIX Security Symposium 


Integrator
AAacker
source.postMessage(secret)
Integrator
AAacker
source.postMessage(secret)
AAacker
Integrator
postMessage(secret)
AAacker
Integrator
postMessage(secret)
Gadget top.postMessage(msg)
AAacker
Gadget
Gadget top.postMessage(msg)
AAacker
Gadget
AAacker
(a) Integrator sends secret messages to child
(b) Attacker hijacks integrator’s child
Figure 4: Recursive Mashup Attack
Microsoft.Live.Channels and of the Windows
Live Contacts gadget. IBM adopted our suggestions and
revised their SMash paper. The OpenAJAX Alliance
adopted our suggestions and updated their codebase. All
three now use the above protocol to establish a secure
channel using fragment identiﬁers.
4.2 The postMessage Channel
HTML 5 [19] speciﬁes a new browser API for asyn-
chronous communication between frames. Unlike the
fragment identiﬁer channel, the postMessage chan-
nel was designed for cross-site communication. The
postMessage API was originally implemented in
Opera 8 and is now supported by Internet Explorer 8,
Firefox 3 [37], and Safari [24].
the origin property accurately identiﬁes the sender;
with cryptographic signatures, verifying the signature
on a message accurately identiﬁes the signer of the
message. One difference between the channels is that
cryptographic signatures can be easily replayed, but the
postMessage channel is resistant to replay attacks. In
some cases, however, an attacker might be able to mount
a replay attack by reloading honest frames.
Attacks. Although postMessage is widely believed
to provide a secure channel between frames, we show
an attack on the conﬁdentiality of the channel. A mes-
sage sent with postMessage is directed at a frame, but
if the attacker navigates that frame to attacker.com
before the message event is generated, the attacker will
receive the message instead of the intended recipient.
Mechanism. To send a message to another frame, the
sender calls the postMessage method:
frames[0].postMessage("Hello world.");
The browser then generates a message event in the
recipient’s frame that contains the message,
the ori-
gin (scheme, port, and domain) of the sender, and a
JavaScript pointer to the frame that sent the message.
Security Properties. The postMessage channel
guarantees authentication, messages accurately identify
their senders, but the channel lacks conﬁdentiality. Thus,
postMessage has almost the “opposite” security prop-
erties as the fragment identiﬁer channel. Where the frag-
ment identiﬁer channel has conﬁdentiality without au-
thentication, the postMessage channel has authenti-
cation without conﬁdentiality. The security properties
of the postMessage channel are analogous to a chan-
nel on a untrusted network secured by an existentially
unforgeable signature scheme.
In both cases, if Alice
sends a message to Bob, Bob can determine unambigu-
ously that Alice sent the message. With postMessage,
• Recursive Mashup Attack. Suppose, for exam-
ple, that an integrator embeds a frame to a gadget
and then calls postMessage on that frame. The
attacker can load the integrator inside a frame and
carry out an attack without violating the descendant
frame navigation policy. After the attacker loads the
integrator inside a frame, the attacker navigates the
gadget frame to attacker.com. Then, when the
integrator calls postMessage on the “gadget’s”
frame, the browser delivers the message to the at-
tacker whose content now occupies the “gadget’s”
frame; see Figure 4. The integrator can prevent this
attack by “frame busting,” i.e., by refusing to render
the mashup if top !== self, indicating that the
integrator is contained in a frame.
• Reply Attack. Another postMessage idiom is
also vulnerable to interception, even under the child
frame navigation policy:
window.onmessage = function(e) {
if (e.origin == "https://b.com")
e.source.postMessage(secret);
};
17th USENIX Security Symposium 
USENIX Association


Integrator
AAacker
Integrator
AAacker
e.source.postMessage(secret)
Gadget top.postMessage(msg)
Gadget top.postMessage(msg)
AAacker
(a) Gadget requests secret from integrator
(b) Integrator’s reply is delivered to attacker
Figure 5: Reply Attack
The source attribute of the MessageEvent is
a JavaScript reference to the frame that sent the
message.
It is tempting to conclude that the re-
ply will be sent
to https://b.com. How-
ever, an attacker might be able to intercept the
message.
Suppose that the honest gadget calls
top.postMessage("Hello"). The gadget
attacker can intercept the message by embedding
the honest gadget in a frame, as depicted in Fig-
ure 5. After the gadget posts its message to the
integrator, the attacker navigates the honest gad-
get to https://attacker.com. (This naviga-
tion is permitted under both the child and descen-
dant frame navigation policies.) When the integra-
tor replies to the source of the message, the mes-
sage will be delivered to the attacker instead of to
the honest gadget.
Securing postMessage.
It might be feasible for sites
to build a secure channel using postMessage as an
underlying communication primitive, but we would pre-
fer that postMessage provide a secure channel na-
tively. In MashupOS [39], we proposed a new browser
API, CommRequest, to send messages between ori-
gins. When sending a message using CommRequest,
the sender addresses the message to a principal:
var req = new CommRequest();
req.open("INVOKE",
"local:https://b.com//inc");
req.send("Hello");
Using this interface, CommRequest protects the conﬁ-
dentiality of messages because the CommServer will
deliver messages only to the speciﬁed principal. Al-
though CommRequest provides adequate security, the
postMessage API is further along in the standard-
ization and deployment process. We therefore propose
extending the postMessage API to provide the addi-
tional security beneﬁts of CommRequest by including
a second parameter:
the origin of the intended recipi-
ent. If the sender speciﬁes a target origin, the browser
will deliver the message to the targeted frame only if that
frame’s current security origin matches the argument.