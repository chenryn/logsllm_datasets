[18] A. Fiat and A. Shamir. How to Prove Yourself: Practical Solutions to Identiﬁcation and Signature Problems.
Proceedings of CRYPTO 1986, LNCS 263 (1987), 186-194.
[19] M. Fischlin. Communication-Eﬃcient Non-Interactive Proofs of Knowledge with Online Extractors. Proceedings of
CRYPTO 2005, LNCS 3621 (2005), 152–168.
[20] M. Gerbush, A. Lewko, A. O’Neill, and B. Waters Dual Form Signatures: An Approach for Proving Security from
Static Assumptions. Proceedings of ASIACRYPT 2012, LNCS 7658 (2012), 25–42.
[21] O. Goldreich. The Foundations of Cryptography - Volume 2 Basic Applications. Cambridge University Press, New
York, 2004.
[22] IBM. Speciﬁcation of the Identity Mixer Cryptographic Library (Revised version 2.3.0). IBM Research Report RZ
3730, April 2010.
[23] M. Jakobsson, K.Sako, and R. Impagliazzo. Designated Veriﬁer Proofs and Their Applications. Proceedings of
EUROCRYPT96, LNCS 1070 (1996) 143–154.
[24] NIST. FIPS 186-3: Digital Signature Standard (DSS), Federal Information Processing Standards Publication (2009).
[25] C. Paquin and G. Zaverucha. U-Prove Cryptographic Speciﬁcation V1.1 (Revision 2). April 2013. Available online:
www.microsoft.com/uprove.
[26] C. Schnorr. Eﬃcient Signature Generation by Smart Cards. Journal of Cryptology 4 (1991), 161-174.
[27] C. Schnorr. Security of Blind Discrete Log Signatures Against Interactive Attacks. ICICS 2001, LNCS 2229 (2001),
1–12.
[28] V. Shoup. Lower Bounds for Discrete Logarithms and Related Problems. Proceedings of EUROCRYPT’97, LNCS
1233 (1997), 256–266.
[29] Y. Tsiounis and M. Yung On the security of ElGamal based encryption. Proceedings of PKC 1998, LNCS 1431
(1998), 117–134.
[30] N. Smart. The Exact Security of ECIES in the Generic Group Model. Proceedings of Cryptography and Coding,
IMA Int. Conf., LNCS 2260 (2001), 73–84.
[31] R. Steinfeld, J. Pieprzyk and H. Wang. How to strengthen any weakly unforgeable signature into a strongly
unforgeable signature. Proceedings of CT-RSA 2007, LNCS 4377 (2007), 357–371.
[32] B. Waters. Dual System Encryption: Realizing Fully Secure IBE and HIBE under Simple Assumptions. Proceedings
of CRYPTO 2009, LNCS 5677 (2009), 619–636.
14
A MAC Security
A.1 Security of MACGGM
In this section we give the proof of Theorem 2, that MACGGM is uf-cmva secure in the generic group
model. The proof is for the message space Fp, however it may easily be generalized to the message space
Fn
p . To simplify notation, we will deﬁne the secret key as sk = (y, x, ˜y), and the issuer parameters as
iparams = (Cy, hx), so that a tag for message m is of the form (u, uy+xm). Since the system parameter
Cy hides y perfectly and unconditionally, we omit it from this analysis.
Proof. Let g be a ﬁxed generator of a generic group G, and let G be written multiplicatively. We
then represent elements a ∈ G as logg a ∈ Fp. We encode elements of G as random strings in a set
S ∈ {0, 1}∗ with the function ζ : Fp → S (i.e., ζ(logg a) gives the encoding of a ∈ G as an element of
S). The choice of S is not important, provided |S| ≥ q.
Let A denote a uf-cmva attacker. A refers to elements of G only using their representation as
elements of S. The attacker refers to elements in the message space directly.
We describe an algorithm B, which interacts with A, implementing oracles for group operations,
as well as MAC and veriﬁcation queries. B chooses the secret values (x, y, h) ∈R F3
p. The inputs B
gives A are the system parameters: g, H = gh, and X = H x = ghx, encoded as ζ(1), ζ(h), and ζ(xh).
B maintains a list L of polynomials in Fp[x, y, h, z1, . . . , zqt], where qt is the number of tag queries
made by A. The indeterminates (x, y, h, z1, . . . , zqt) correspond to the secrets (x, y, h) and the random
values zi used to create tags. Each polynomial in L corresponds to a group element at each step of A’s
computation. The list contains pairs (Fi, ζi) ∈ Fp[x, y, h, z1, . . . , zqt] × S. A second list Q maintains
the set of queried messages. Both lists are initially empty.
B counts the number of group oracle queries by qG, and the number of tag queries with qt, both
initialized to zero. The number of veriﬁcation queries are not counted (but is assumed to be polynomial
in the security parameter). The total number of group operations is q = qG + 2qt, since each tag query
requires two group operations to answer.
Group operation. A provides input (ζi, ζj,±) where ± corresponds to multiply/divide, and i, j  0 requires Ω(
A.2 Security of MACDDH
p) operations in G.
uf-cmva(k) that makes qm Mac queries and qv Verify
Proof. Let A be a PT adversary playing game GA
queries, where qm = qm(k) and qv = qv(k) for polynomials qm(·) and qv(·). We provide a PT adversary
B and negligible functions ν0(·) and ν(·) such that
Advuf-cmva
mac,A (k) ≤ qvν0(k) + qmAdvddh
B (k) + ν(k)
16
Therefore A’s success probability after q queries is at most
(cid:19)
(cid:18)q
(cid:18)q
2
· 4
p
(cid:19)
· 4
p
 =
2
≤ 4q2
p
1
0 (k) / GA
uf-cmva(k) / GA
main GA
(p, G, g, h) $←− Setup(1k); Q ← ∅; x0, y0, . . . , xn, yn, z $←− Fp, s, t, v0, . . . , vn
sk ← ((p, G, g, h), s, t, (cid:126)v, (cid:126)x, (cid:126)y, z), sk ← ((p, G, g, h), (cid:126)x, (cid:126)y, z)
1 (k)
$←− Fp
2
3 Xi = gxihvi, Yi = gyiX−s
4
5
i Xi = hxi, Yi = hyi
( (cid:126)m∗, σ) $←− AMac,Verify((p, G, g, h), iparams)
−Hv( (cid:126)m∗)
b ← ((σyσs
x)z = (σzσt
w
b ← ((σx = σHx( (cid:126)m∗)
) ∧ (σz = σz
return (( (cid:126)m∗ /∈ Q) ∧ b)
w)Hy( (cid:126)m∗)) ∧ ((σ
) ∧ (σy = σHy( (cid:126)m∗)
6
w
w
for i ∈ 1, . . . , n; iparams ← ( (cid:126)X, (cid:126)Y ),
σx)Hy( (cid:126)m∗) = (σs
xσy)Hx( (cid:126)m∗)) ∧ (σw (cid:54)= 1),
w) ∧ (σw (cid:54)= 1))
Procedure Macsk ( (cid:126)m)
// GA
uf-cmva(k) / GA
0 (k)
7 Q ← Q ∪ { (cid:126)m}
8
r $←− Fp; σw ← gr, σw ← hr ; σx ← grHx( (cid:126)m), σx ← (gHx( (cid:126)m)hHv( (cid:126)m))r ;
σy ← grHy( (cid:126)m), σy ← grHy( (cid:126)m)σ−s
return (σw, σx, σy, σz)
; σz ← gzr, σz ← (gzh−t)r
x
// GA
Procedure Macsk ( (cid:126)m)
r $←− Fp, ω, χ $←− Fp ; σw ← hr, σw ← hω ; σx ← (gHx( (cid:126)m)hHv( (cid:126)m))r, σx ← hχ ;
σy ← grHy( (cid:126)m)σ−s
x ; σz ← (gzh−t)r, σz ← gzrh−ωt
0 (k) / GA
1 (k)
Procedure Verifysk ( (cid:126)m, σ)
// GA
return ((σx = σHx( (cid:126)m)
return ((σyσs
x)z = (σzσt
w
) ∧ (σy = σHy( (cid:126)m)
w)Hy( (cid:126)m)) ∧ (σw (cid:54)= 1)
w
uf-cmva(k) / GA
) ∧ (σz = σz
0 (k) / GA
w) ∧ (σw (cid:54)= 1)) ,
1 (k)
9
8
10
Figure 1: Games for the proof of Theorem 3. The boxed game uses the boxed code and the other games do not.
for all k ∈ N, from which the theorem follows. To do this, we build B , ν0(·), and ν(·) such that for all
k ∈ N we have
Pr[GA
uf-cmva(k)] − Pr[GA
0 (k)] − Pr[GA
Pr[GA
Pr[GA
0 (k)] ≤ qvν0(k)
1 (k)] ≤ qmAdvddh
1 (k)] ≤ ν(k).
B (k)
(3)
(4)
(5)
We then have
Advuf-cmva
mac,A (k) = Pr[GA
= (Pr[GA
≤ qvν0(k) + qmAdvddh
uf-cmva(k)]
uf-cmva(k)] − Pr[GA
B (k) + ν(k).
0 (k)]) + (Pr[GA
0 (k)] − Pr[GA
1 (k)]) + Pr[GA
1 (k)]
Equation 3.
17
i/β + vi and yi := y(cid:48)
To ﬁrst prove Equation 3, we consider a modiﬁed version of GA
uf-cmva(k) as an intermediate game:
$←− Fp and set
Let β = logg(h). Rather than pick (cid:126)x and (cid:126)y randomly, pick x(cid:48)
i, y(cid:48)
i/β − sxi for all i, 0 ≤ i ≤ n; furthermore, rather than pick z $←− Fp, pick
xi := x(cid:48)
z(cid:48) $←− Fp and set z := z(cid:48)/β − t. Construct iparams as Xi = hxi = gx(cid:48)
. In the
Mac oracle, use r := r(cid:48)β for r(cid:48) $←− Fp rather than r $←− Fp. These values are distributed identically to
the values used in GA
uf-cmva(k), so the distribution in this modiﬁed game is identical. Furthermore, we
have
ihvi and Yi = hyi = gy(cid:48)
$←− Fp and s, t
iX−s