ECDSA nonces, Zhang et al. [76] extend the analysis to SM2DSA.
With their own implementation of ECC including traditional wNAF
scalar multiplication paired with SM2DSA, they demonstrate it is
possible to reliably capture the sequence of ECC doubles and adds
through SPA on an Atmega128. Subsequently modeling the filtered
nonces with sufficient zeros in the LSDs and constructing lattice
problem instances, they recover private keys with high probability.
Since they target least significant zeros in the wNAF expansion,
their attack is largely independent of the scalar representation—for
example, it immediately applies to binary, sliding window, and fixed
window expansions. Their work provides even further evidence
that ECDSA-type leaks are similarly detrimental to SM2DSA.
While no English version is available, the abstract of [68] sug-
gests a CPA attack to recover the SM2PKE session key exploiting
potential leakage from the SM3 compression function execution.
That is, the target is not the ECC but the subsequent KDF.
3 SM2 IN OPENSSL
Refer to Section 1 for the detailed timeline of the SM2 feature
within OpenSSL. With the narrow review window induced by the
release milestone shift, several security (and functionality) issues
were mainlined into the OpenSSL codebase. We give an overview
of these issue in this section. Listing 1 includes an extract of the
SM2DSA signature generation implementation and Listing 2 for
SM2PKE public key decryption, as of OpenSSL 1.1.1-pre5 (beta 3).
Code review. Due to the hasty review process, the code implement-
ing SM2 in the beta releases is evidently not in line with the quality
standards of analogous components of libcrypto,10 lacking test
coverage, including critical bugs (e.g. double frees and wrong return
values), a lack of return values checking and poor error handling.
These defects are particularly evident in the integration with the
EVP_PKEY (and EVP_DigestSign) API, which is the main entry
point for libssl and internal and external applications for using
the cryptographic functionality included in libcrypto.
SCA review. Beyond these traditional software issues, we preformed
an SCA evaluation of both SM2DSA and SM2PKE in OpenSSL.
This integration provides a rare opportunity to see how a straight-
forward implementation of an EC cryptosystem mixes with the
underlying EC module for arithmetic. Our review resulted in the
following observations, leveraging existing SCA results (Section 2)
on the OpenSSL EC module.
(1) For SM2DSA, in Listing 1 there is no scalar padding before
calling EC_POINT_mul, suggesting an SM2DSA analogue of
CVE-2011-1945 for remote timing attacks; see Section 4 for
our empirical evaluation.
(2) For SM2DSA, since there is no custom EC_METHOD for the
SM2 curve, EC_POINT_mul is a wrapper to ec_wNAF_mul,
suggesting an SM2DSA analogue for cache timing attacks
10The OpenSSL binaries can be roughly split in three blocks: libcrypto, providing the
cryptographic and abstraction layer; libssl, providing the networking layer; apps,
consisting in a CLI toolkit using the two libraries to perform various tasks.
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
k = BN_CTX_get(ctx);
rk = BN_CTX_get(ctx);
x1 = BN_CTX_get(ctx);
tmp = BN_CTX_get(ctx);
if (tmp == NULL)
goto done;
/* These values are returned and so should not be allocated out of the
(cid:44)→
context */
r = BN_new();
s = BN_new();
if (r == NULL || s == NULL)
goto done;
for (;;) {
BN_priv_rand_range(k, order);
if (EC_POINT_mul(group, kG, k, NULL, NULL, ctx) == 0)
goto done;
if (EC_POINT_get_affine_coordinates_GFp(group, kG, x1, NULL, ctx) == 0)
goto done;
if (BN_mod_add(r, e, x1, order, ctx) == 0)
goto done;
/* try again if r == 0 or r+k == n */
if (BN_is_zero(r))
continue;
BN_add(rk, r, k);
if (BN_cmp(rk, order) == 0)
continue;
BN_add(s, dA, BN_value_one());
BN_mod_inverse(s, s, order, ctx);
BN_mod_mul(tmp, dA, r, order, ctx);
BN_sub(tmp, k, tmp);
BN_mod_mul(s, s, tmp, order, ctx);
sig = ECDSA_SIG_new();
if (sig == NULL)
goto done;
/* takes ownership of r and s */
ECDSA_SIG_set0(sig, r, s);
break;
}
Listing 1: Source code from crypto/sm2/sm2_sign.c in
OpenSSL 1.1.1-pre5 for SM2DSA signature generation.
270
271
272
273
274
275
276
277
278
279
280
281
282
283
C1 = EC_POINT_new(group);
if (C1 == NULL)
goto done;
if (EC_POINT_set_affine_coordinates_GFp
(group, C1, sm2_ctext->C1x, sm2_ctext->C1y, ctx) == 0)
goto done;
if (EC_POINT_mul(group, C1, NULL, C1, EC_KEY_get0_private_key(key), ctx) ==
0)
goto done;
if (EC_POINT_get_affine_coordinates_GFp(group, C1, x2, y2, ctx) == 0)
goto done;
Listing 2: Source code from crypto/sm2/sm2_crypt.c in
OpenSSL 1.1.1-pre5 for SM2PKE decryption.
151ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Nicola Tuveri, Sohaib ul Hassan, Cesar Pereida García, and Billy Bob Brumley
1:
clflush (%rdi)
clflush (%rsi)
clflush (%rdx)
clflush (%rcx)
jmp 1b
lfence
rdtsc
lfence
mov %rax, %r10
shr $31, %rdx
mov (%rsi, %rdx), %rax
lfence
rdtsc
shl $32, %rax
or %r10, %rax
mov %rax, (%rdi)
shr $31, %rdx
clflush (%rsi, %rdx)
Listing 3: Flush+Reload (left) and performance degrada-
tion (right) implemented for our cache-timing attacks.
SpeedStep Technology and Intel Turbo Boost Technology disabled.
Figure 1 shows cumulative distribution functions (CDF) for differ-
ent nonce bit-lengths for the two curves, collating 4 million samples
for each curve. Both plots show a strong correlation between the
bit-length of the nonce and the execution time of the signature
generation, which in turn is distinctly dominated by the execution
time of the underlying EC_POINT_mul operation. For no correla-
tion, these curves should essentially be on top of each other, i.e.
indistinguishable; see Section 7.3.
Generic binary curves. The top plot of Figure 1 shows that, using a
generic binary curve as the underlying elliptic curve for SM2DSA,
the timing correlation appears easily exploitable to mount a remote
timing attack similar to [21]. For generic binary curves, OpenSSL
implements the EC_POINT_mul operation through a Montgomery
ladder algorithm, which due to its extreme regularity in the se-
quence of EC additions and doublings, results in an overall execu-
tion time directly proportional to the binary logarithm of the secret
EC_POINT_mul scalar (i.e. the SM2DSA nonce). As a result, each
nonce bit-length exhibits a clearly distinct CDF, and suggests simple
thresholding on the execution time to filter signatures associated
with a specific nonce length with high probability.
Recommended SM2 curve. When using the recommended SM2 prime
curve, OpenSSL 1.1.1-pre3 implements the EC_POINT_mul operation
using the generic prime curve codepath, using a wNAF algorithm
(see Section 5.1). The bottom plot of Figure 1 shows that, similarly
to the previous case, there is a strong correlation between the exe-
cution time of SM2DSA and the associated nonce length. We note
that in this case, mounting a practical attack poses more challenges
due to a less distinct separation between the different CDFs, likely
compensated by collecting more samples.
5 SM2DSA: CACHE TIMINGS
As mentioned in Section 2.5, several previous works show SM2DSA