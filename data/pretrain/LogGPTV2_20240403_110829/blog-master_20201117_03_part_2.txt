    reloptions=0, use_user_acl=true, allow_system_table_mods=false, is_internal=false, relrewrite=0, typaddress=0x0)  
    at heap.c:1294  
#6  0x000055ba81e3782a in DefineRelation (stmt=stmt@entry=0x55ba82876658, relkind=relkind@entry=114 'r', ownerId=16385,  
    ownerId@entry=0, typaddress=typaddress@entry=0x0,  
    queryString=queryString@entry=0x55ba82855648 "create table test (a int, b char(10)) using heap;") at tablecmds.c:885  
#7  0x000055ba81fd5b2f in ProcessUtilitySlow (pstate=pstate@entry=0x55ba82876548, pstmt=pstmt@entry=0x55ba828565a0,  
    queryString=queryString@entry=0x55ba82855648 "create table test (a int, b char(10)) using heap;",  
    context=context@entry=PROCESS_UTILITY_TOPLEVEL, params=params@entry=0x0, queryEnv=queryEnv@entry=0x0, qc=0x7ffcf56efe50,  
    dest=0x55ba82856860) at utility.c:1161  
#8  0x000055ba81fd4120 in standard_ProcessUtility (pstmt=0x55ba828565a0,  
    queryString=0x55ba82855648 "create table test (a int, b char(10)) using heap;", context=PROCESS_UTILITY_TOPLEVEL,  
    params=0x0, queryEnv=0x0, dest=0x55ba82856860, qc=0x7ffcf56efe50) at utility.c:1069  
#9  0x000055ba81fd1962 in PortalRunUtility (portal=0x55ba828b7dd8, pstmt=0x55ba828565a0, isTopLevel=,  
    setHoldSnapshot=, dest=, qc=0x7ffcf56efe50) at pquery.c:1157  
#10 0x000055ba81fd23e3 in PortalRunMulti (portal=portal@entry=0x55ba828b7dd8, isTopLevel=isTopLevel@entry=true,  
    setHoldSnapshot=setHoldSnapshot@entry=false, dest=dest@entry=0x55ba82856860, altdest=altdest@entry=0x55ba82856860,  
    qc=qc@entry=0x7ffcf56efe50) at pquery.c:1310  
#11 0x000055ba81fd2f51 in PortalRun (portal=portal@entry=0x55ba828b7dd8, count=count@entry=9223372036854775807,  
    isTopLevel=isTopLevel@entry=true, run_once=run_once@entry=true, dest=dest@entry=0x55ba82856860,  
    altdest=altdest@entry=0x55ba82856860, qc=0x7ffcf56efe50) at pquery.c:779  
#12 0x000055ba81fce967 in exec_simple_query (query_string=0x55ba82855648 "create table test (a int, b char(10)) using heap;")  
    at postgres.c:1239  
#13 0x000055ba81fd0d7e in PostgresMain (argc=, argv=argv@entry=0x55ba8287fdb0, dbname=,  
    username=) at postgres.c:4315  
#14 0x000055ba81f4f52a in BackendRun (port=0x55ba82877110, port=0x55ba82877110) at postmaster.c:4536  
#15 BackendStartup (port=0x55ba82877110) at postmaster.c:4220  
#16 ServerLoop () at postmaster.c:1739  
#17 0x000055ba81f5063f in PostmasterMain (argc=3, argv=0x55ba8284fee0) at postmaster.c:1412  
#18 0x000055ba81c91c04 in main (argc=3, argv=0x55ba8284fee0) at main.c:210  
(gdb)  
```  
### 5.2 The ```f``` (Fly) command  
The ```f``` command followed by a stack number allows gdb to jump to a particular call stack listed by the ```bt``` command and allows you to print other variable in that particular stack. For example:  
```  
(gdb) f 3  
#3  0x000055ba81d946ea in TypeCreate (newTypeOid=newTypeOid@entry=0, typeName=typeName@entry=0x7ffcf56ef820 "test",  
    typeNamespace=typeNamespace@entry=2200, relationOid=relationOid@entry=16392, relationKind=relationKind@entry=114 'r',  
    ownerId=ownerId@entry=16385, internalSize=-1, typeType=99 'c', typeCategory=67 'C', typePreferred=false,  
    typDelim=44 ',', inputProcedure=2290, outputProcedure=2291, receiveProcedure=2402, sendProcedure=2403,  
    typmodinProcedure=0, typmodoutProcedure=0, analyzeProcedure=0, elementType=0, isImplicitArray=false, arrayType=16393,  
    baseType=0, defaultTypeValue=0x0, defaultTypeBin=0x0, passedByValue=false, alignment=100 'd', storage=120 'x',  
    typeMod=-1, typNDims=0, typeNotNull=false, typeCollation=0) at pg_type.c:484  
484                     CatalogTupleInsert(pg_type_desc, tup);  
(gdb)  
```  
This forces ```gdb``` to jump to stack number 3, which is at ```pg_type.c:484```. In here, you can examine all other variables in this frame (in function ```TypeCreate```).  
### 5.3 The ```p``` (Print) command  
The most popular command in ```gdb```, which can be used to print variable addresses and values  
```  
(gdb) p tup  
$1 = (HeapTuple) 0x55ba8290f778  
(gdb) p pg_type_desc  
$2 = (Relation) 0x7f872f532228  
(gdb)  p * tup  
$3 = {t_len = 176, t_self = {ip_blkid = {bi_hi = 65535, bi_lo = 65535}, ip_posid = 0}, t_tableOid = 0,  
  t_data = 0x55ba8290f790}  
(gdb) p * pg_type_desc  
$4 = {rd_node = {spcNode = 1663, dbNode = 16384, relNode = 1247}, rd_smgr = 0x55ba828e2a38, rd_refcnt = 2, rd_backend = -1,  
  rd_islocaltemp = false, rd_isnailed = true, rd_isvalid = true, rd_indexvalid = true, rd_statvalid = false,  
  rd_createSubid = 0, rd_newRelfilenodeSubid = 0, rd_firstRelfilenodeSubid = 0, rd_droppedSubid = 0,  
  rd_rel = 0x7f872f532438, rd_att = 0x7f872f532548, rd_id = 1247, rd_lockInfo = {lockRelId = {relId = 1247, dbId = 16384}},  
  rd_rules = 0x0, rd_rulescxt = 0x0, trigdesc = 0x0, rd_rsdesc = 0x0, rd_fkeylist = 0x0, rd_fkeyvalid = false,  
  rd_partkey = 0x0, rd_partkeycxt = 0x0, rd_partdesc = 0x0, rd_pdcxt = 0x0, rd_partcheck = 0x0, rd_partcheckvalid = false,  
  rd_partcheckcxt = 0x0, rd_indexlist = 0x7f872f477d00, rd_pkindex = 0, rd_replidindex = 0, rd_statlist = 0x0,  
  rd_indexattr = 0x0, rd_keyattr = 0x0, rd_pkattr = 0x0, rd_idattr = 0x0, rd_pubactions = 0x0, rd_options = 0x0,  
  rd_amhandler = 0, rd_tableam = 0x55ba82562c20 , rd_index = 0x0, rd_indextuple = 0x0, rd_indexcxt = 0x0,  
  rd_indam = 0x0, rd_opfamily = 0x0, rd_opcintype = 0x0, rd_support = 0x0, rd_supportinfo = 0x0, rd_indoption = 0x0,  
  rd_indexprs = 0x0, rd_indpred = 0x0, rd_exclops = 0x0, rd_exclprocs = 0x0, rd_exclstrats = 0x0, rd_indcollation = 0x0,  
  rd_opcoptions = 0x0, rd_amcache = 0x0, rd_fdwroutine = 0x0, rd_toastoid = 0, pgstat_info = 0x55ba828d5cb0}  
(gdb)  
```  
With the asteroid, you can tell the ```p``` command to either print the address of a pointer or the values pointed by the pointer.  
### 5.4 The ```x``` (examine) command  
The ```x``` command is used to examine a memory block contents with specified size and format. The following example tries to examine the ```t_data``` values inside a ```HeapTuple``` structure. Note that we first print the ```*tup``` pointer to learn the size of ```t_data``` is 176, then we use the ```x``` command to examine the first 176 bytes pointed by ```t_data```  
```  
(gdb)  p *tup  
$6 = {t_len = 176, t_self = {ip_blkid = {bi_hi = 65535, bi_lo = 65535}, ip_posid = 0}, t_tableOid = 0,  
  t_data = 0x55ba8290f790}  
(gdb)  p tup->t_data  
$7 = (HeapTupleHeader) 0x55ba8290f790  
(gdb) x/176bx  tup->t_data  
0x55ba8290f790: 0xc0    0x02    0x00    0x00    0xff    0xff    0xff    0xff  
0x55ba8290f798: 0x47    0x00    0x00    0x00    0xff    0xff    0xff    0xff  
0x55ba8290f7a0: 0x00    0x00    0x1f    0x00    0x01    0x00    0x20    0xff  
0x55ba8290f7a8: 0xff    0xff    0x0f    0x00    0x00    0x00    0x00    0x00  
0x55ba8290f7b0: 0x0a    0x40    0x00    0x00    0x74    0x65    0x73    0x74  
0x55ba8290f7b8: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00  
0x55ba8290f7c0: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00  
0x55ba8290f7c8: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00  
0x55ba8290f7d0: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00  
0x55ba8290f7d8: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00  
0x55ba8290f7e0: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00  
0x55ba8290f7e8: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00  
0x55ba8290f7f0: 0x00    0x00    0x00    0x00    0x98    0x08    0x00    0x00  
0x55ba8290f7f8: 0x01    0x40    0x00    0x00    0xff    0xff    0x00    0x63  
0x55ba8290f800: 0x43    0x00    0x01    0x2c    0x08    0x40    0x00    0x00  
0x55ba8290f808: 0x00    0x00    0x00    0x00    0x09    0x40    0x00    0x00  
0x55ba8290f810: 0xf2    0x08    0x00    0x00    0xf3    0x08    0x00    0x00  
0x55ba8290f818: 0x62    0x09    0x00    0x00    0x63    0x09    0x00    0x00  
0x55ba8290f820: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00  
0x55ba8290f828: 0x00    0x00    0x00    0x00    0x64    0x78    0x00    0x00  
0x55ba8290f830: 0x00    0x00    0x00    0x00    0xff    0xff    0xff    0xff  
0x55ba8290f838: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00  
(gdb)  
```  
## 6. Conclusion  
In this blog, we have discussed about how to generate a useful crash dump file with sufficient debug symbols to help developers troubleshoot a crash issue in PostgreSQL and also in other applications. We have also discussed about a very powerful and useful debugger ```gdb``` and shared some of the most common commands that can be utilized to troubleshoot a crash issue from a core file. I hope the information here can help some developers out there to troubleshoot issues better.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")