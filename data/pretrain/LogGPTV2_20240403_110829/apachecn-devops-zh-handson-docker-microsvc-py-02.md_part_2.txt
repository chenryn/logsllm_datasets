5.  `thought`对象正在返回。`marshal_with`装饰器描述了 Python 对象应该如何序列化为 JSON 结构。我们将在后面看到如何配置它:
```
@api_namespace.marshal_with(thought_model)
def get(self, thought_id):
    ...
    return thought
```
6.  最后，我们有一些文档，包括将由自动生成的斯瓦格应用编程接口呈现的文档字符串:
```
class ThoughtsRetrieve(Resource):
    @api_namespace.doc('retrieve_thought')
    def get(self, thought_id):
        '''
        Retrieve a thought
        '''
        ...
```
如您所见，大多数操作都是通过 Flask-RESTPlus 进行配置和执行的，作为开发人员的大部分工作是内容丰富的*第 4 步*。不过，还有一些工作要做，配置预期的输入参数并验证它们，以及如何将返回的对象序列化为适当的 JSON。我们将看看 Flask-RESTPlus 如何帮助我们。
# 解析输入参数
输入参数可以采用不同的形状。当我们谈论输入参数时，我们主要谈论两种:
*   编码到网址中的字符串查询参数。这些通常用于`GET`请求，如下所示:
```
http://test.com/some/path?param1=X&param2=Y
```
它们是网址的一部分，将存储在沿途的任何日志中。参数被编码成自己的格式，称为**网址编码**([https://www.urlencoder.io/learn/](https://www.urlencoder.io/learn/))。你可能已经注意到了，例如，一个空白空间被转换成`%20`。
Normally, we won't have to decode query parameters manually, as frameworks such as Flask do it for us, but the Python standard library has utilities to do so ([https://docs.python.org/3/library/urllib.parse.html](https://docs.python.org/3/library/urllib.parse.html)). 
*   让我们看看 HTTP 请求的主体。这通常用于`POST`和`PUT`请求。具体格式可使用`Content-Type`标题指定。默认情况下，`Content-Type`头被定义为`application/x-www-form-urlencoded`，它以网址编码进行编码。在现代应用中，这被`application/json`代替，以在 JSON 中编码它们。
The body of the requests is not stored in a log. The expectation is that a `GET` request produce the same result when called multiple times, that means they are idempotent. Therefore, it can be cached by some proxies or other elements. That's the reason why your browser asks for confirmation before sending a `POST` request again, as this operation may generate different results.
但是还有另外两个可以传递参数的地方可以使用:
*   **作为 URL 的一部分**:像`thought id`这样的东西都是参数。尽量遵循 RESTful 原则，将你的网址定义为资源，以避免混淆。查询参数最好保留为可选参数。
*   **头**:通常情况下，头给出关于元数据的信息，比如请求的格式、期望的格式或者认证数据。但是它们也需要被视为输入参数。
所有这些元素都由 Flask-RESTPlus 自动解码，因此我们不需要处理编码和低级访问。
让我们看看这个例子是如何工作的。这段代码是从 GitHub 中的代码中提取的，并被缩短以描述解析参数:
```
authentication_parser = api_namespace.parser()
authentication_parser.add_argument('Authorization', 
location='headers', type=str, help='Bearer Access 
Token')
thought_parser = authentication_parser.copy()
thought_parser.add_argument('text', type=str, required=True, help='Text of the thought')
@api_namespace.route('/me/thoughts/')
class MeThoughtListCreate(Resource):
    @api_namespace.expect(thought_parser)
    def post(self):
        args = thought_parser.parse_args()
        username = authentication_header_parser(args['Authorization'])
        text=args['text']
        ...
```
我们用以下几行定义一个解析器:
```
authentication_parser = api_namespace.parser()
authentication_parser.add_argument('Authorization', 
location='headers', type=str, help='Bearer Access Token')
thought_parser = authentication_parser.copy()
thought_parser.add_argument('text', type=str, required=True, help='Text of the thought')
```
`authentication_parser`由`thought_parser`继承，以扩展功能并结合两者。每个参数都是根据类型以及是否需要来定义的。如果一个必需的参数丢失或另一个元素不正确，Flask-RESTPlus 将会产生一个`400 BAD_REQUEST`错误，给出出错原因的反馈。
因为我们希望以稍微不同的方式处理认证，所以我们将其标记为不需要，并允许其使用`None`的默认值(为框架创建)。请注意，我们指定`Authorization`参数应该在标题中。
`post`方法让装饰器显示它需要`thought_parser`参数，我们用`parse_args`解析它:
```
@api_namespace.route('/me/thoughts/')
class MeThoughtListCreate(Resource):
    @api_namespace.expect(thought_parser)
    def post(self):
        args = thought_parser.parse_args()
        ...
```
此外，`args`现在是一个字典，所有参数都被正确解析并在接下来的几行中使用。
在认证头的特殊情况下，有一个特定的函数可以使用它，它通过使用`abort`返回一个`401 UNAUTHORIZED`状态代码。此呼叫会立即停止请求:
```
def authentication_header_parser(value):
    username = validate_token_header(value, config.PUBLIC_KEY)
    if username is None:
        abort(401)
    return username
class MeThoughtListCreate(Resource):
    @api_namespace.expect(thought_parser)
    def post(self):
       args = thought_parser.parse_args()
       username = authentication_header_parser(args['Authentication'])
       ...
```
我们将暂时搁置要执行的操作(在数据库中存储新的想法)，并专注于其他框架配置，将结果序列化为 JSON 对象。
# 序列化结果
我们需要返回我们的结果。最简单的方法是通过序列化程序或编组模型([https://flask-rest plus . read the docs . io/en/stable/编组. html](https://flask-restplus.readthedocs.io/en/stable/marshalling.html) )定义 JSON 结果应该具有的形状。
序列化程序模型被定义为具有预期字段和字段类型的字典:
```
from flask_restplus import fields
model = {
    'id': fields.Integer(),
    'username': fields.String(),
    'text': fields.String(),
    'timestamp': fields.DateTime(),
}
thought_model = api_namespace.model('Thought', model)
```
该模型将采用一个 Python 对象，并将每个属性转换为相应的 JSON 元素，如字段中所定义:
```
@api_namespace.route('/me/thoughts/')
class MeThoughtListCreate(Resource):
    @api_namespace.marshal_with(thought_model)
    def post(self):
        ...
        new_thought = ThoughtModel(...)
        return new_thought
```
请注意`new_thought`是一个`ThoughtModel`对象，由 SQLAlchemy 检索。接下来我们将详细了解它，但就目前而言，只需说它具有模型中定义的所有属性即可:`id`、`username`、`text`和`timestamp`。
默认情况下，内存对象中不存在的任何属性的值都为`None`。您可以将此默认值更改为将返回的值。您可以指定一个函数，以便在生成响应时调用它来检索值。这是向对象添加动态信息的一种方式:
```
model = {
    'timestamp': fields.DateTime(default=datetime.utcnow),
}
```
您也可以添加要序列化的属性的名称，以防它不同于预期的结果，或者添加一个将被调用来检索值的`lambda`函数:
```
model = {
    'thought_text': fields.String(attribute='text'),
    'thought_username': fields.String(attribute=lambda x: x.username),
 }
```
对于更复杂的对象，可以像这样嵌套值。请注意，这从文档的角度定义了两个模型，并且每个`Nested`元素创建了一个新的范围。也可以使用`List`添加多个同类实例:
```
extra = {
   'info': fields.String(),
}
extra_info = api_namespace.model('ExtraInfo', extra)
model = {
    'extra': fields.Nested(extra),
    'extra_list': fields.List(fields.Nested(extra)),
 }
```
一些可用字段有更多选项，例如`DateTime`字段的日期格式。有关更多详细信息，请查看完整字段的文档。
如果返回元素列表，在`marshal_with`装饰器中添加`as_list=True`参数:
```
@api_namespace.route('/me/thoughts/')
class MeThoughtListCreate(Resource):
    @api_namespace.marshal_with(thought_model, as_list=True)
    def get(self):
        ...
        thoughts = (
            ThoughtModel.query.filter(
                ThoughtModel.username == username
            )
            .order_by('id').all()
        )
        return thoughts
```
`marshal_with`装饰器将把`result`对象从 Python 对象转换成相应的 JSON 数据对象。
默认情况下，它会返回一个`http.client.OK (200)`状态代码，但是我们可以返回一个不同的状态代码，返回两个值:第一个是对象到`marshal`，第二个是状态代码。`marshal_with`装饰器中的代码参数用于文档目的。注意，在这种情况下，我们需要添加具体的`marshal`调用:
```
@api_namespace.route('/me/thoughts/')
class MeThoughtListCreate(Resource):
    @api_namespace.marshal_with(thought_model, 
         code=http.client.CREATED)
    def post(self):
        ...
        result = api_namespace.marshal(new_thought, thought_model)
        return result, http.client.CREATED
```
斯瓦格文档将显示您所有使用过的定义的`marshal`对象:
![](img/1a40a02d-6154-4ae0-877e-48163872898f.png)
The end of the Swagger page One inconvenience of Flask-RESTPlus is that to input and output the same objects, they need to be defined twice, as the modules for input and output are different. This is not the case in some other RESTful frameworks, for example, in the Django REST framework ([https://www.django-rest-framework.org/](https://www.django-rest-framework.org/)). The maintainers of Flask-RESTPlus are aware of this, and, according to them, they'll be integrating an external module, probably `marshmallow` ([https://marshmallow.readthedocs.io/en/stable/](https://marshmallow.readthedocs.io/en/stable/)). You can integrate it manually if you like, as Flask is flexible enough to do so, take a look at this example ([https://marshmallow.readthedocs.io/en/stable/examples.html#quotes-api-flask-sqlalchemy](https://marshmallow.readthedocs.io/en/stable/examples.html#quotes-api-flask-sqlalchemy)).
更多详细信息，可以在 flask-restplus 的[https://Flask-rest plus . read the docs . io/en/stable/编组. html](https://flask-restplus.readthedocs.io/en/stable/marshalling.html) 查看完整的编组文档。
# 执行操作
最后，我们到达输入数据干净且可以使用的特定部分，我们知道如何返回结果。这一部分可能包括执行一些数据库查询和合成结果。让我们看下面这个例子:
```
@api_namespace.route('/thoughts/')
class ThoughtList(Resource):
    @api_namespace.doc('list_thoughts')
    @api_namespace.marshal_with(thought_model, as_list=True)
    @api_namespace.expect(search_parser)
    def get(self):
        '''
        Retrieves all the thoughts
        '''
        args = search_parser.parse_args()
        search_param = args['search']
        # Action
        query = ThoughtModel.query
        if search_param:
            query =(query.filter(
                ThoughtModel.text.contains(search_param)))
        query = query.order_by('id')
        thoughts = query.all()
        # Return the result
        return thoughts
```
您可以在这里看到，在解析参数之后，我们使用 SQLAlchemy 来检索一个查询，如果`search`参数存在，将应用一个过滤器。我们用`all()`获取所有结果，返回所有`ThoughtModel`对象。