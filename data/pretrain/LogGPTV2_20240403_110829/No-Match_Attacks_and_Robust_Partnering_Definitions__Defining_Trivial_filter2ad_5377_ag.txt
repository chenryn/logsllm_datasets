weak robust composition covers not only security models formal-
izing key indistinguishability but also those that define explicit
authentication. Solely the mechanism to exploit the security model
is different. In contrast to weak robust composition, our next defi-
nition also allows the additional messages to be derived from the
public messages of protocol π.
Definition C.4 (Strong Robust Composition). We say that a security
model S supports strong robust composition if for all protocols π
and every robust augmentation π ′ of π we have that
• the additional messages π ′ − π can be efficiently computed
from the messages of the subprotocol π (that have already
been sent)
• if π secure under S then π ′ is secure under S.
Theorem C.5. Let S be a security model for key exchange protocols
that defines security via key indistinguishability and partnering via
original key partnering. Then S supports strong robust composition.
Proof. We can simply reduce security of π ′ to the protocol π.
To this end we assume a simulator that is given protocol π as a
black-box. It simulates the protocol π ′ by efficiently computing all
necessary messages in π ′ − π from the subprotocol π which by
definition is possible. Observe that the definition of partnering in π ′
corresponds to the definition of partnering in π, i.e. whenever two
oracles are partnered with respect to π ′, they are also partnered
with respect to the (black-box) subprotocol π and vice versa. Now,
any successful adversary against π ′ can by definition distinguish
the session key of π ′ from a random value. Since the session key
of π ′ is essentially that of π and since the partnering definition in
π ′ corresponds to that of π we can directly use the the adversary’s
guess to break the security of π. We note that we can simulate all
queries made by the adversary against π ′ by using the queries for π
and since the additional messages can all be computed solely from
π.
□
As a result, no adversary can augment the protocol with ad-
ditional messages in a way that makes it insecure. From another
perspective, the protocol remains secure in contexts where not only
the protocol messages but also other messages are exchanged as
long as the additional messages do not rely on the secret informa-
tion of the protocol.
We can also provide a positive result for key exchange models
based on explicit authentication.
Theorem C.6. Let S be a security model for key exchange proto-
cols that defines security via explicit authentication in the sense of
Definition 5.2. Then S supports strong robust composition.
We can almost re-use the proof of Theorem C.5 and therefore
omit it.
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1358D EXAMPLE PROTOCOL AND PROOF
SKETCH
To get a better understanding of what impact our new partnering
definition has on security proofs that are usually based on matching
conversations let us consider an example. In particular consider a
protocol where Alice and Bob have long-term signature keys for
signature scheme SIG. Alice sends the ephemeral public key дa,
Bob responds with дb , sB where sB = SIG.Sign(skB ,(дa|дb)) and
the symbol | indicates a special separator symbol. Alice checks if
it holds that SIG.Vfy(pkB ,(дa|дb), sB) = 1. On success it computes
kA = (дb)a and sends sA with sA = SIG.Sign(skA,(дa|дb)) to Bob
who in turn checks whether SIG.Vfy(pkA,(дa|дb), sA) = 1. In case
the verification of the received signature is positive, Bob computes
kB = (дb)a.
Let us now sketch a security proof that relies on original key
partnering and contrast it with matching conversations. To this
end we dive into the Test-session. After excluding collisions when
choosing ephemeral public keys we can distinguish several cases:
1) First, we consider the case that the attacker does not make
any modifications to the exchanged messages. In this case security
follows form the security of the DDH assumption. Namely in one
session, the challenger embeds a DDH challenge in дa and дb. The
key is indistinguishable from random by the DDH assumption
which says that given д, дa, дb, the value дab is indistinguishable
from дt for a random t.
2) In the second case we always (only) consider (active) attacks
that make Alice or Bob not compute their original key. For the
protocol at hand, we consider either a) attackers that modify any
of the messages дa or дb on transit such that one of the computed
keys is distinct from the original key or b) we consider attacks
that modify the signatures so that any of them becomes invalid
(resulting in no computation of a session key of the receiving oracle
at all.). In case a) we can use such an attacker to break the security
of the signature schemes. This is because any attacker that modifies
any of those two message has to produce a valid signature on the
message (which includes fresh ephemeral public keys) as well to
make the receiver accept it and generate a key. Using the signature
oracle in the security game we can easily simulate all other sessions.
In contrast, analyzing case b) is actually not necessary in a formal
proof and we include it only for illustrative purposes. In fact, the
security definition requires that the Test-oracle has computed a key.
Moreover if Bob’s oracle does not compute a key at all, this only
increases the security for Alice’s oracle: Bob’s oracle does not store
any information that may help to distinguish Alice’s key.
3) The third case is also only considered as an illustrative argu-
ment for the purpose of this paper. In actual security proofs using
original key partnering it would not appear. In this case the attacker
modifies any message such that as a result Alice and Bob compute
their original key. One attack is to modify the signatures sA or sB
such that as a result, the verification is still positive. (Another way
would be to change the representation of the ephemeral public key
for example to send дa −p instead of дa in case  is a subgroup
of Z∗
p. This works if the signature scheme works on messages in
 but does not apply an interval test, see Section E.1.) Here
the difference of our security notion with respect to matching con-
versations comes into play: with matching conversations the two
oracles would not be partnered although they both compute the
same session key. That would allow for an exploitable no-match
attack – revealing Bob’s session key would trivially help to dis-
tinguish Alice’s key from random. Using original key partnering
the two oracles remain to be partnered even if the signatures are
modified since both oracles compute their original key. Importantly,
observe that this is crucial when analyzing KCI attacks and perfect
forward secrecy. In these cases the attacker has access to skA before
Alice’s last message arrives at Bob and the attacker can thus easily
compute a new signature s′
= SIG.Sign(skA,(дa|дb)) that Bob will
A
accept. So in sum security defined under matching conversations
would fail to reason about this protocol under these strong AKE
definitions. Even worse, the protocol could not be proven secure
unless the signature scheme fulfills the notion of strong unforge-
ability even when not considering KCI attacks or perfect forward
secrecy, i.e. when proving classical key indistinguishability. How-
ever, under our new notion, the protocol can be proven secure in
even this strong model. Intuitively, this is legitimate since Alice
and Bob compute the same key that would be computed in case of
no modification at all (case 1).
E DESIGN SOLUTIONS
In the following, we propose two approaches to armor protocols
against no-match attacks.
E.1 Uniqueness
Having ruled out the usefulness of deterministically computed
values v to prevent no-match attacks in general and strong security
for no-match attacks with advice in particular, the open question
is what properties of the algorithms that compute v are required
to actually thwart no-match attacks. What we want is that the
adversary may not present a distinct v′ that behaves like the original
v independent of whether the adversary has access to the secret key or
not. This can be captured by the notion of uniqueness. For example,
in a unique signature scheme, for every public key, there is only
one signature per message that passes the signature verification.
Our definition captures general verification functions.
Definition E.1 (Unique Verification). A verification algorithm VRF
defined over (K, M, V, Xaux ) is an efficient algorithm VRF: K
× M × V × Xaux → {0, 1} described as a deterministic Turing
Machine. The set K is called the key space, M is called the message
space, V = {0, 1}∗ is called the verification space and Xaux is called
the auxiliary information space (which may possibly be empty).
We say that VRF provides unique verification if for all k ∈ K, all
messages m ∈ M and all aux ∈ Xaux we always have that
|{v ∈ V|VRF(k, m, v, aux) = 1}| ≤ 1.
In the above definition we generally consider algorithms that
are keyed with some key k. Depending on the primitive this key
can be a symmetric, public, or secret key.
We clarify that the definitions of deterministic signatures and
unique signatures concentrate on properties of distinct algorithms.
Whereas a deterministic signature scheme refers to a signature
scheme with a deterministic signing algorithm, unique signatures
refer to signature schemes whose verification algorithm meets the
uniqueness property.
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1359In the next step, we may explore ways to substitute crypto-
graphic primitives with unique versions. This has the advantage
that protocol implementations where the primitives can be agreed
upon by the communication partners can remain secure under
matching conversations without any protocol modification just
via a suitable instantiation of the primitive. Important results on
common building blocks for security protocols show that while it is
relative simple to obtain unique MACs (and unique symmetric en-
cryption).15, it is much more difficult to construct unique signatures
(than non-unique ones)16. For public key encryption in contrast, it
is impossible to do so since even mere IND-CPA encryption requires
the scheme to be probabilistic [26].
E.2 Unique Message Representations and
Group Membership Testing.
We observe that, as a consequence of our no-match attacks and
unless other means do not protect protocols against them, parties
should generally use unique representations of all messages. Of
course, not only need the protocol participants use a unique set of
representations but they also have to check whether the received
values actually belong to this set. This is particularly important
for group membership tests that are implemented as simple ex-
ponentiation. Popular ways for Bob to check if Alice’s message a
is in a subgroup of prime order q is to check if aq = 1 mod p or
ar (cid:44) 1 mod p where r = |Z∗
p|/q is the co-factor. These checks are
often called ephemeral public key validation.
We remark that mere ephemeral public key validation is not
sufficient to protect the protocol against no-match attacks since any
adversary can easily sent a′ = a + p (cid:44) a (over the integers) instead
of a to Bob and Bob will accept both values since a′ = a mod p.
The problem is that ephemeral public key validation as sketched
above does not check for uniqueness. However, if Bob always checks
if 0 ≤ a ≤ p−1 then it would not accept a′ and our no-match attack
is thwarted. We call this additional check interval test.
Also observe that in case a = дx mod p is Alice’s ephemeral key
that Bob combines with his ephemeral secret key y ∈ Zq to compute
a common secret ay mod p, we have that a′y mod p = ay mod p
although a (cid:44) a′. So the common secrets computed from a, y and
a′, y are equal. The substitution of a by a′ can be combined with a
no-match attack with advice which helps the adversary to substi-
tute a signature on a with one of a′. Note that the resulting attack
would still work if the signature scheme offers unique verification!
(We believe that such a combination is very hard to spot in a secu-
rity proof. At the same time it further exemplifies the diversity of
no-match attacks.) The resulting attack can be used to break the
NAXOS protocol [37] or the KEA+ protocol that was published at
PKC’06 [38] if these protocols do not apply an interval test because
the final session key is not derived from a but only from ay mod p.
Finally, a similar attack can be launched against a proposal to in-
stantiate the symmetric encryption system in [5] by encrypting
15If necessary use a PRF on the message and some secret symmetric key to derive the
input randomness and make the scheme deterministic. To make the scheme unique,
modify the verification procedure to just re-run the tagging (or encryption) algorithm
and check for equality with the received value. In this way only a single value will be
accepted.
16While plain digital signatures can be constructed from one-way functions only,
unique signatures require even more than ideal trapdoor permutations [23, 28].
message m with password pw as c = h(pw) · m, where h is a hash
function that is modeled as a random oracle and the arithmetic is
in the underlying group. When for example implemented over a
subgroup of Z∗
p and not applying an interval test it is easy to come
up with a second string that when decrypted maps to the same
message using the above technique.
We emphasize that these papers, like most papers on key ex-
change protocols, are unclear on how they implement group mem-
bership tests exactly. Our no-match attacks convincingly show that
mere ephemeral key validation is in some scenarios not sufficient.
(i)
j
E.3 Protocol Compiler
As a third solution we propose the following efficient transforma-
tion that makes the computation of the session key critically depend
on any message bit of the transcript. Assume we have a t-move key
exchange protocol π that is executed between Alice and Bob. Let us
now describe a new key exchange protocol π ′ that is constructed
for i ∈ N, t ≥ i ≥ 1 be
from π and a hash function H. Let m
the i-th message sent or received by party j ∈ {A, B}. Suppose
H : {0, 1}∗ → {0, 1}l is a hash function which is modeled as a ran-
dom oracle in the security proof. Let Kj be the final session key that
is output by j ∈ {A, B}. In our compiler, each party j will maintain
a (small) state variable cj that is updated after each protocol move.
We now describe how each party j can recursively compute the
that in turn is used to compute the session key Kj.
final state c
(0)
j
(t)
j
• Define c
to some global constant c.
(i)
• For each sent or received message m
j
c
• The session key is computed as K∗
j
The advantage of our compiler is its generality. In particular, it
does not require the protocol to fulfill any security requirements
and excludes no-match attacks – even for insecure protocols (with
overwhelming probability). This is because any modification made
to the messages exchanged between two oracles results in distinct
inputs to the final random oracle call. The following lemma captures
this intuition.
computes the value
(t)
, Kj).
j
= H(c
(i)
j
= H(c
(i−1)
j
, m
(i)
j ).
Lemma E.2. Assume that in the run of a key exchange protocol
the adversary launches an active attack on the modified protocol π ′
executed between two oracles. Then, with overwhelming probability
1 − 2−l , the two oracles do not compute the same session key K∗.
Proof. Each modification will make Bob’s oracle receive at least
one message that is distinct from what Alice’s oracle has sent (or
vice versa). Now the output of the corresponding random oracle
call is random and independent from the output produced by Alice.
Because of the continual feedback of previous values into the next
call of the random oracle the session keys are independent and
random as well. So they differ with all but negligible probability
1 − 2−l .
□
As an advantage, the above compiler is computationally very
efficient. However, it does modify the key derivation function of
the protocol.
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1360