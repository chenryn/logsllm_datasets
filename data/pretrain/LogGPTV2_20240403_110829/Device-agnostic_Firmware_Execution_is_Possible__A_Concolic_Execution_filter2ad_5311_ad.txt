Branches
FW #12
FW #22
3
5
3
5
36
37
84
87
Infinite Loop
Elimination
6 (16.7%)
6 (16.2%)
78 (92.8%)
79 (90.8%)
Similarity
Fall-back
Time
23 (63.9%)
24 (64.9%)
1 (1.2%)
1 (1.1%)
7 (19.4%)
7 (18.9%)
5 (6.0%)
7 (8.0%)
16m07s
16m16s
17m26s
28m50s
needed for successful emulations, can be found in the pro-
vided anonymous URL,
6.1.3 Dissecting the CPSA Algorithm. The CPSA algorithm
selects an optimal branch by going through three heuris-
tic rules. They are infinite-loop-elimination, similarity,
and fall-back. If anyone of them can determine a single
path, the rest of steps are skipped. To show how each rule
influences the decision making, we counted the number of
each rule that uniquely determined a branch. We also tuned
Forward_Depth, which influences the capability to foresee
an infinite loop. In Table 2, we show the results of the two
most significant cases (firmware images #12 and #22) that
all of these heuristic rules work. As shown in the table, the
proportion of each rule highly depends on the firmware im-
age and the value of Forward_Depth. This clearly signifies
the diversity nature of firmware, in particular, the peripheral
behaviors. However, when accumulating the rules together,
good results can be obtained (see §6.2). As Forward_Depth
increases, we also observed an increase in execution time,
meaning that more time is spent on inefficient symbolic ex-
ecution. Note that although the time required to complete
a firmware execution appears to be long, we argue that we
can save the fully booted instant as a snapshot and perform
analyses based on the snapshots at any time.
6.2 Fidelity Analysis
Although our experiments shows that Laelaps is able to
boot a variety of firmware images and reach a point suitable
for dynamic analysis, we have no idea as to whether the
execution traces in Laelaps resemble ones in real device
execution. Therefore, we collected two firmware execution
traces of the same firmware image on both Laelaps and real
devices, and compared the similarity between them. This
firmware simply boots the FreeRTOS kernel and prints out a
“hello world” message through the UART interface.
6.2.1 Trace Collection. We collected the firmware execution
trace on a real NXP FRDM-K66F development board using
the built-in hardware-based trace collection unit called Em-
bedded Trace Macrocel (ETM) [2]. ETM is an optional debug
component to trace instructions, and it enables the transpar-
ent reconstruction of program execution. We directly lever-
aged the on-board OpenSDA interface to enable the ETM and
Device-agnostic Firmware Execution
Anonymous Submission to MobiCom, 2020
Table 3: Jaccard indexes between the traces collected
on Laelaps and real devices when applying only the
fall-back path heuristic and all the heuristics.
fall-back path
all
fall-back path
all
FW #1
37.43
96.54
FW #8
35.85
96.54
FW #2
39.17
92.02
FW #9
45.34
92.02
FW #3
92.96
94.26
FW #10
46.26
94.26
FW #4
56.67
79.78
FW #11
51.79
79.78
FW #5
48.41
95.40
FW #12
40.54
95.40
FW #6
44.02
95.42
FW #13
32.74
95.42
FW #7
87.80
92.15
FW #14
45.47
92.15
Table 4: Jaccard indexes of a FreeRTOS trace broken
down by the bootstrap phases when only applying the
fall-back path heuristic and applying all the heuris-
tics.
fall-back path
all
Phase 1
26.77
99.39
Phase 2
00.00
96.31
Phase 3
00.00
100.0
Phase 4
00.00
91.12
a signal, while Laelaps can directly pass through the loop,
leading to different execution paths but the same coverage.
However, many of these deviations are not important. In
fact, our emulation does not need to faithfully honor the real
execution path in this case.
Coverage similarity measurement visualized in Figure 4 is
only an intuitive demonstration of the fidelity achieved by
Laelaps. To be able to quantitatively measure the similarity
of collected traces, we also calculated Jaccard index (i.e., the
number of common instructions between two traces divided
by the number of total instructions in the union of the two
traces) to measure the common instructions between the
collected traces. Since we cannot control the interrupts to
be delivered at exactly the same pace on two targets, we did
an alignment to the raw traces so that the comparison starts
from the same address. In particular, interrupt processing
intrusions are extracted and compared separately. Then the
results were combined together. Table 3 shows the Jaccard
indexes when only applying the fall-back path heuristic and
applying all the heuristics. We compare them because the
fall-back path heuristic is the most straightforward rule that
can be easily developed, while combining them all is only
possible with the proposed sophisticated symbolic guidance.
We only list the results of 14 firmware images out of 22
because these are the images that Laelaps is able to emulate
without any human interventions. When all the heuristics
are applied, the calculated Jaccard indexes are higher than
90% in most cases, which agrees with the visualized result.
We further compared a trace of a FreeRTOS firmware
image. The Jaccard indexes were calculated for each of the
four bootstrap phases, with the fall-back path heuristic and
all the heuristics applied respectively. As shown in Table 4,
when all the heuristics were applied, Laelaps achieved a
Figure 4: Bitmap of instruction traces collected on
Laelaps and the real device. Purple color represents
overlapped trace segments. • marks the end of device
setup (phase 1). ■ marks the end of base system setup
(phase 2). ▲ marks the end of RTOS initialization and
the start of the first task (phase 3).
access the traced data in a buffer called ETB. We do not have
the ETM component in Laelaps to collect traces. However,
QEMU provides us with great logging facility which allows
us to transparently print out execution traces. In particular,
we passed the option "-d exec,nochain" to QEMU so that
it printed out the firmware address before each executed
translation block (a translation block is a basic block variant
used in QEMU). When mapping the start of each translation
block to the firmware code, we can recover the full execution
trace.
6.2.2 Execution Trace Comparison. Figure 4 shows a visual-
ized comparison between the traces of the same firmware
image collected on Laelaps and real device. We showed the
traces collected from system power-on to the start of the
first task, corresponding to a full system execution described
in §2.2. Figure 4 is a bitmap for the two instruction traces.
The top of the figure represents low addresses of the code,
while bottom represents high addresses. When an instruc-
tion is executed, the corresponding pixel is highlighted. In
the figure, the trace collected on Laelaps is in red, and the
trace collected on real device is in blue. We observed a large
number of overlapped regions labeled in purple, implying
that the two traces have similar path coverage. In the figure,
we also marked the end of the first three execution phases,
which are essential milestones during firmware execution.
The figure clearly shows that both traces reach all of them.
Note that having even exactly the same path coverage does
not mean the two execution traces are the same. For example,
a real device execution may encounter a long loop waiting for
11
Anonymous Submission to MobiCom, 2020
Anon.
Table 5: Corruption detection under different proba-
bilities for corrupting inputs.
# of Test-cases
# of Corruptions Detection Ratio
88
47
9
10.48%
5.02%
0.96%
Pc
0.10
0.05
0.01
Test 1
Test 2
Test 3
840
936
939
high level of similarity with the real device in all the phases.
However, if only heuristic 3 (fall-back path) was enabled,
the firmware image failed to boot, which is indicated by a
low similarity in phase 1 (26.77%) and zero similarity in the
following phases.
6.3 Application to Dynamic Analysis
Based on the positive results we got in firmware emulation,
we further explored the possibility of using Laelaps to per-
form actual dynamic analysis.
Fuzzing Mbed OS Firmware. Muench et al. observed
6.3.1
that the effectiveness of traditional dynamic testing tech-
niques on embedded devices is greatly jeopardized due to
the invisibility of memory bugs on embedded devices [33].
They came up with an idea that leverages six live analysis
heuristics to aid fuzzing test in QEMU. These heuristics help
make “silent” memory bugs to be easily observable. In their
proof-of-concept prototype, they used PANDA [16] which
is a dynamic analysis platform built on top of QEMU. Its
plug-in system facilitates efficient hooking of various system
events. To do the experiments, their approach relied on a real
device to initialize the memory and then used Avatar [44] to
transfer the initialized state from a real device to PANDA.
To demonstrate Laelaps’s device-agnostic property, we
ported Laelaps to PANDA and tested the same firmware
image used in the paper [33]. In addition, we reproduced the
same fuzzing experiments. We did not use the real device but
were still able to emulate the firmware. After the device was
booted, we took a snapshot. During fuzzing, if the device
crashed, the fuzzer instructed the emulator to restart from
the snapshot.
The firmware image is empowered by the Mbed OS and
integrates the Expat [13] library for parsing incoming XML
files. The used Expat library has five types of common mem-
ory corruption vulnerabilities. The firmware image took in-
put from the UART interface. As in the paper [33], we instru-
mented the fuzzer to forcefully generate inputs which trigger
one of the five kinds of memory corruption vulnerabilities
with a given probability Pc. We ran the experiment for 1 hour
under probabilities Pc = 0.1, Pc = 0.05 and Pc = 0.01, respec-
tively. The result is shown in Table 5. We can see that there
is roughly a linear relationship between Pc and detection
ratio. Also, the less corrupting inputs were given, the more
test-cases could be tested within one hour. This is because
the PANDA instance can persist on multiple valid inputs,
but it has to take time to restore when receiving malformed
inputs. This experiment proves that Laelaps is capable of
booting firmware to an analyzable state for repeatable dy-
namic analysis without relying on a real device.
6.3.2 Analyzing FreeRTOS Firmware. We also tested the ca-
pability of Laelaps in helping analyze real-world vulnera-
bilities in FreeRTOS-powered firmware. These vulnerabil-
ities locate in the FreeRTOS+TCP network stack, which
were reported in AWS FreeRTOS with version 1.3.1. With-
out Laelaps, the traditional dynamic analysis of these vul-
nerabilities is very expensive, as it has to rely on real de-
vices and hardware debuggers. We prepared our testing
in two steps. First, since the reported vulnerabilities occur
in the FreeRTOS+TCP TCP/IP stack, we replaced lwip, the
default TCP/IP implementation shipped with the SDK of
NXP FRDM-K66F, with FreeRTOS+TCP. Second, we iden-
tified the location of the network input buffer and wrote a
PANDA plugin to redirect the memory read operations from
the buffer to a file. We began our testing from the function
prvHandleEthernetPacket, which is the gateway function
processing incoming network packets. In the end, we suc-
ceeded in triggering four TCP and IP layer vulnerabilities
(CVE-2018-16601, CVE-2018-16603, CVE-2018-16523, and
CVE-2018-16524). Note that these vulnerabilities were all
caused by improper implementation at IP or TCP/UDP lay-
ers. We had not been able to identify vulnerabilities residing
at higher levels of network stack because triggering them
needs highly structured inputs.
7 RELATED WORK
Several approaches have applied symbolic execution to ad-
dressing security problems in firmware [14, 15, 22]. Like
Laelaps, Inception [14] aims at testing a complete firmware
image. It builds an Inception Symbolic Virtual Machine on
top of KLEE [7], which symbolically executes LLVM-IR merged
from source code, assembly, and binary libraries. To handle
peripherals, it either models read from peripheral as uncon-
strained symbolic values or redirects the read operation to a
real device. However, this approach relies on the availabilities
of source code to retain semantic information during LLVM
merging. FIE [15] modifies KLEE to target a specific kind
of device (MSP430). It requires source code and ignores the
interactions with peripheral. S2E is a concolic testing plat-
form based on full system emulation [12]. Combining QEMU
and KLEE, S2E enables symbolic variable tracking across
privilege boundary. Both S2E and Laelaps are concolic ex-
ecution platforms. However, “selective symbolic execution”
proposed by S2E only applies to applications that run on
top of a standard OS (e.g., Windows and Linux). By contrast,