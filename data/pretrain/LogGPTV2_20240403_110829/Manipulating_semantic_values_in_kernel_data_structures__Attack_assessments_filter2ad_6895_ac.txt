We consider a semantic ﬁeld to be immutable only if all of
the mutation attempts on it cause system or program instability.
If some of the mutations do not cause critical failures, then
attackers may potentially make similar modiﬁcations and thus
mislead the security tools. Based on this standard, we have
listed the results in the last column of Table IV and Table V.
A ’p’ in the mutability column indicates that the semantic
ﬁeld showed no system or program instabilities for certain
mutations, while it did for some others.
From the mutability column in Table IV and Table V, we
can see that most of the semantic ﬁelds, including process
name, ﬁle name, module name and many others can be
changed by an attacker without adverse effects on the system
or a program. This observation immediately raises a question
about the trust issue for all the security applications (such
as memory forensics and virtual machine introspection) that
critically rely on the correctness of these semantic ﬁelds.
For both operating systems, network related semantic ﬁelds
tend to be reliable. Mutations to source and destination IP
addresses and port numbers immediately cause failures to
subsequent operations on the network connection. This is good
news, which means network security tools that make security
decisions based on the network connections can be trusted, as
long as these connection objects can be reliably located.
For Windows XP, the UniqueProcessId in ETHREAD
tends to be reliable. A mutation will either crash the entire
system or the test program. The Pid in the TCP connec-
tion object (TCPT_OBJECT) can also be relied upon. A
mutation on it will
immediately drop this connection. It
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply. 
is worth noting that security tools usually read Pid from
EPROCESS.UniqueProcessId, which turns out
to be
not reliable at all, because none of the mutations on it
causes severe failures. This ﬁnding suggests to retrieve the
UniqueProcessId in the ETHREAD objects or Pid in the
TCPT_OBJECT objects (if available) instead.
Interestingly, strings are completely mutable (that is, all
occurrences of the string can be mutated without adverse
effect on the system) for both the operating systems we tested.
OS kernels usually rely on pointers and integers (such as
handles and IDs) for operations as opposed to strings. String
mappings for resources (e.g., ﬁle handle to ﬁle name) are often
maintained in instances that involve interpretation by a human.
This observation is particularly worrisome since strings like
process name, ﬁle name, registry key name, etc., have severe
security relevance and are fully mutable.
Similarly, it turns out that all the time related information
(such as, process creation time, exit time, etc.) are also fully
mutable and therefore not reliable. This observation has far
reaching impacts. For instance, time information is crucial in
a memory forensic context. One may need to use the time
stamps of certain malicious activites as crime evidence. With
DKOM as a possibility, such time stamps cannot be assumed
correct.
B. Duplicate Field Mutation
In addition to mutating the selected semantic ﬁelds individ-
ually, we also identiﬁed their duplicate ﬁelds and mutated these
duplicates both separately and simultaneously. We present
these results in Table VI and Table VII for Windows XP
and Linux, respectively. For each primary semantic ﬁeld that
has at least one duplicate, we list the number of duplicates
(including the primary) identiﬁed through MOSS, the types
of these duplicates,
the immutable duplicates if any, and
whether the entire duplicate set is mutable. Due to the dynamic
nature of our analysis,
the number of duplicates depends
on the start execution point, the end execution point, and
the particular execution path. In our experiment, duplicate
values were identiﬁed by dynamic duplicate value analysis
from the start of the test program to a predetermined test
point. Therefore, these duplicates may not always hold true
for different test cases. For each duplicate value, we further
identify in which data structure and which ﬁeld the value
is located whenever possible. Again, we use Volatility for
locating kernel data structures. Due to the limited coverage
of Volatility, we may not always be able to recognize the
corresponding data structures. In such cases, we list only the
virtual addresses in the third column.
The immutable duplicates, if any, indicate which duplicate
ﬁelds (other than the primary) may be reliable. The knowledge
about immutable duplicates is valuable, because it means that
security tools could examine these alternative ﬁelds instead of
the primary ones to obtain more reliable OS semantics.
The last column indicates if the entire duplicate set is
simultaneously mutable. If not, security tools may be able to
perform a consistency check on the entire set to obtain more
reliable outputs. Of course, the underlying assumption is that
the security tool is smart enough to locate all the duplicate
ﬁelds, which in practice may be difﬁcult, especially for closed-
source operating systems like Windows.
identify at
From the results in Table VI and Table VII, we can see
that information redundancy does exist for some important
OS semantics. This is the case for both operating systems. For
in Windows, EPROCESS.UniqueProcessId
example,
appears as the UniqueProcess in all
the ETHREAD
objects belonging to that process, and also appears in the
HANDLE_TABLE. For a process which has established at
least one TCP connection,
the pid should also appear
in the TCPT_OBJECT.pid [19], which MOSS could
not
test point 1. This is because the network
operations happened after test point 1 in our experiment
and the corresponding TCPT_OBJECT was not created
at
test point 5, we conﬁrmed that
TCPT_OBJECT.pid indeed is one of the duplicates. For the
process name EPROCESS.ImageFileName, we also found
duplicates in OBJECT_NAME_INFORMATION.Name and
RTL_USER_PROCESS_PARAMETERS.ImagePathName.
As the main module, the process name also appears in the
base module name BaseDllName and full module name
FullDllName in LDR_DATA_TABLE_ENTRY. These
results are also consistent with publicly available Windows
documentation [19].
that point. In fact, at
For Linux, we found that the pid of the test program
replicates in the group id task_struct.t_gid, and also
the light-weight process (lwp)’s group id, which speciﬁes the
pid of the hosting process of a thread in Linux. Similarly, the
process name in task_struct.comm also share the same
value with its light-wight processes. vma.vm_start has a
duplicate in vma.vm_end of the preceding vma structure,
and vma.vm_end has a duplicate in vma.vm_start of the
subsequent vma structure. We also found that the source IP
address and the destination IP address are duplicate to each
other. This is because in our test, both the server and the
client programs are running in the localhost, so both source
and destination IP addresses are 127.0.0.1. These ﬁndings are
in agreement with the source code of the OS kernel.
Unfortunately, our results show that most of these du-
plicate are mutable both individually and simultaneously.
In very limited cases, the information redundancy can help
improve the integrity of semantic information. As discussed
earlier, though UniqueProcessId in EPROCESS is mu-
table, its duplicate, UniqueProcess in ETHREAD is im-
mutable. ETHREAD.StartAddress in Windows is an-
other such case. The primary ETHREAD.StartAddress
can be manipulated, but
its duplicate StartingVa in
_SECTION_OBJECT is more sensitive to mutations.
Table VI and Table VII also show that the result of mutating
the entire duplicate set is the same as mutating the individual
duplicate ﬁelds. This indicates that
the operating systems
process these semantic ﬁelds separately, and perform no cross
checking on these duplicates. From the defender’s perspective,
if one can reliably locate one immutable ﬁeld (either the
primary or a duplicate), checking the entire duplicate set is
not necessary.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply. 
TABLE VI.
DUPLICATE FIELDS FOR WINDOWS XP AND THEIR MUTABILITY
Immutable
Duplicates
ETHREAD.Cid.UniqueProcess
Primary Field
EPROCESS.UniqueProcessId
# of
Dups
36
EPROCESS.ImageFileName
EPROCESS.CreateTime
EPROCESS.ActiveThreads
HANDLE TABLE.HandleCount
FILE OBJECT.FileName (Data ﬁle)
LDR DATA TABLE ENTRY.FullDllName
LDR DATA TABLE ENTRY.BaseDllName
CM KEY NODE.LastWriteTime
CM KEY NODE.Parent
CM KEY NODE.Security
ETHREAD.StartAddress
4
2
2
2
7
3
3
2
4
2
2
Type of
Duplicates
ETHREAD.Cid.UniqueProcess,
HANDLE TABLE.UniqueProcessId,
CM KEY BODY.ProcessId,
EPROCESS.InheritedFromUniqueProcessId,
ETIMER.Lock,
TEB.ClientId,
TEB.RealClientId, 0x9b57b6d0, 0x9ccdaef0,
0x9cce697c...
OBJECT NAME INFORMATION.Name,
RTL USER PROC PARAMS.ImagePathName,
SE AUDIT PROCESS INFO.ImageFileName
None
ETHREAD.CreateTime
EPROCESS.ActiveThreadsHighWatermark
None
HANDLE TABLE.HandleCountHighWatermark None
None
0x003a948e, 0x822df33a, 0x822df35c, ...
LDR DATA TABLE ENTRY.BaseDllName,
None
FILE OBJECT.FileName
LDR DATA TABLE ENTRY.FullDllName,
FILE OBJECT.FileName
0x9b43ea60
0x94d20a20, 0x9adc7940, 0x9adc7948
0x822c7880
SECTION OBJECT.StartingVa
None
None
DUPLICATE FIELDS FOR LINUX AND THEIR MUTABILITY
Primary Field
task struct.pid
task struct.comm
task struct.static prio
task struct.exit code
task struct.fds
module.name
module.num syms
vma.vm start
vma.vm end
dentry.d name
inet sock.saddr
inet sock.daddr
# of
Dups
4
2
3
3
3
2
12
2
2
2
24
24
TABLE VII.
Type of
Duplicates
task struct.t gid, task struct.t gid(lwp), 0xf63916dc
task struct.comm(lwp)
task.parent.static prio, task.static prio (lwp)
task.parent.exit code, task.exit code (lwp)
0xf7179080, 0xf61bae84
0xd93c524c
module.num kp, 0xe086c15c, 0xe086c170...
vma.vm end
vma.vm start
0xf583f0d8
inet sock.rcv saddr
0xde49148c ...
inet sock.daddr
0xde49147c
inet sock.rcv saddr
0xde49148c ...
inet sock.saddr
0xde49147c
Set
Mutability
7
X
X
X
X
X
X
X
X
X
7
7
None
None
CM KEY NODE.Security
SECTION OBJECT.StartingVa
Immutable
Duplicates
None
None
None
None
0xf7179080, task.fds
None
None
vma.vm start
vma.vm end
None
inet sock.rcv saddr
inet sock.daddr
0xde49148c ...
inet sock.rcv saddr
inet sock.daddr
0xde49148c ...
0xde49147c
0xde49147c
Set
Mutability
X
X
X
X
7
X
X
7
7
X
7
7
C. Interesting Observations
In these mutation tests, we also observed some interesting
behaviors, of which attackers may take advantage. In Windows
XP, changing the test program’s pid to 0 will effectively hide
the test program from the process list in the Task Manager.
Attackers can use this technique to effectively hide a process.
Another interesting observation was when the ﬁle name
in the ﬁle object was changed to an empty string. In both
operating systems we experimented on, the ﬁle name shows
up as empty. If all the duplicate ﬁle names are also changed
to empty, then this ﬁle becomes completely inaccessible. The
ﬁle cannot be opened using either the original ﬁle name or the
empty string. This is another technique an attacker might use to
hide certain ﬁles. Also, once the ﬁle name and its duplicates are
set to empty string, an administrator (or an anti-virus software)
would not be able to delete the ﬁle, which is very concerning.
in Windows when the EPROCESS.Flags
value is changed to 0xF F F F F F F F , the system perceives
the process as being a system process. Upon attempting to
Furthermore,
terminate the process, a dialog pops up and says that the
process is a system process and terminating it would result
in a restart. Force quitting it abruptly restarts the OS. We feel
that this behavior is not only abnormal, but it has dangerous
security implications. For example, an attacker may use this
trick to prevent her malicious process from being killed.
D. Impact on Security Tools
To further conﬁrm the results from fuzz testing based ﬁnd-
ings in Table VII and Table VI, we implemented a proof-of-
concept SVM rootkit for Windows. Given a speciﬁc malware
process, this SVM rootkit manipulates all the mutable semantic
ﬁelds associated with this process, and their duplicates that
can be identiﬁed. The SVM rootkit changes the integer values
to 0 and string values to empty string. The rootkit changes
the pool tags to ”None” to indicate that the object is asso-
ciated with the default pool. To demonstrate the power of
this rootkit, we ran a bot named TDSS [6] in Windows XP
SP3 in a controlled environment. We evaluated a variety of
security tools, including Process Explorer [19], Task Manager,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply. 
Category
Process
Thread
Kernel
Module &
User DLL
TABLE VIII.
Primary Fields Mutated
Task
Mgr
H
EPROCESS.UniqueProcessId
-
EPROCESS.InheritedFromUniqueProcessId
-
EPROCESS.POOL HEADER.PoolTag
EPROCESS.POOL HEADER.BlockSize
-
EPROCESS.CreateTime
-
EPROCESS.ExitTime
-
EPROCESS.ImageFileName
H
EPROCESS.ExitStatus
-
-
ETHREAD.CreateTime
-
ETHREAD.ExitTime
-
ETHREAD.Cid.UniqueThread
-
ETHREAD.StartAddress
ETHREAD.POOL HEADER.PoolTag
-
ETHREAD.POOL HEADER.ObjectSize
-
-
LDR DATA TABLE ENTRY.DllBase
-
LDR DATA TABLE ENTRY.EntryPoint
-
LDR DATA TABLE ENTRY.SizeOfImage
-
LDR DATA TABLE ENTRY.FullDllName
-
LDR DATA TABLE ENTRY.BaseDllName
-
LDR DATA TABLE ENTRY.Flags
-
LDR DATA TABLE ENTRY.PatchInformation
-
LDR DATA TABLE ENTRY.LoadCount
IMPACT OF SVM ROOTKIT ON SECURITY TOOLS
Volatility
(traversal)
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N