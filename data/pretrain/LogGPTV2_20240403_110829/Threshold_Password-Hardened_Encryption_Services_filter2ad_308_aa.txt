title:Threshold Password-Hardened Encryption Services
author:Julian Brost and
Christoph Egger and
Russell W. F. Lai and
Fritz Schmid and
Dominique Schr&quot;oder and
Markus Zoppelt
Threshold Password-Hardened Encryption Services
Julian Brost
Russell W. F. Lai
Christoph Egger
Friedrich-Alexander University
Friedrich-Alexander University
Friedrich-Alexander University
Erlangen-Nuremberg
Fritz Schmid
Friedrich-Alexander University
Erlangen-Nuremberg
Erlangen-Nuremberg
Dominique Schr√∂der
Friedrich-Alexander University
Erlangen-Nuremberg
Erlangen-Nuremberg
Markus Zoppelt
Nuremberg Institute of Technology
ABSTRACT
Password-hardened encryption (PHE) was introduced by Lai et
al. at USENIX 2018 and immediately productized by VirgilSecurity.
PHE is a password-based key derivation protocol that involves an
oblivious external crypto service for key derivation. The security
of PHE protects against offline brute-force attacks, even when the
attacker is given the entire database. Furthermore, the crypto ser-
vice neither learns the derived key nor the password. PHE supports
key-rotation meaning that both the server and crypto service can
update their keys without involving the user. While PHE signif-
icantly strengthens data security, it introduces a single point of
failure because key-derivation always requires access to the crypto
service. In this work, we address this issue and simultaneously
increase security by introducing threshold password-hardened en-
cryption. Our formalization of this primitive revealed shortcomings
of the original PHE definition that we also address in this work.
Following the spirit of prior works, we give a simple and efficient
construction using lightweight tools only. We also implement our
construction and evaluate its efficiency. Our experiments confirm
the practical efficiency of our scheme and show that it is more effi-
cient than common memory-hard functions, such as scrypt. From a
practical perspective this means that threshold PHE can be used as
an alternative to scrypt for password protection and key-derivation,
offering better security in terms of offline brute force attacks.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Cryptography.
ACM Reference Format:
Julian Brost, Christoph Egger, Russell W. F. Lai, Fritz Schmid, Dominique
Schr√∂der, and Markus Zoppelt. 2020. Threshold Password-Hardened En-
cryption Services. In Proceedings of the 2020 ACM SIGSAC Conference on
Computer and Communications Security (CCS ‚Äô20), November 9‚Äì13, 2020, Vir-
tual Event, USA. ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/
3372297.3417266
1 INTRODUCTION
An increasing amount of sensitive information is collected, pro-
cessed, and made accessible by online services. For several years
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ‚Äô20, November 9‚Äì13, 2020, Virtual Event, USA
¬© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-7089-9/20/11.
https://doi.org/10.1145/3372297.3417266
1
we witness a significant increase of data breaches and prominent
victims in 2019 include Capital One, Facebook, and Canva1, just to
name a few. Common encryption techniques to protect data acces-
sible on the Internet seem to be ineffective to prevent data breaches,
especially against insider attackers that have stolen the databases.
Not only can the attacker break the passwords of individual users
using offline brute-force attacks, but it can also directly learn the
master key and hence all user data.
Lai et al. [12] recently introduced password-hardened encryption
(PHE) as a password-based key-derivation protocol that involves
an external party, called rate-limiter, in addition to the server for
key derivation. Intuitively, PHE allows the server to derive a data
key that depends on the password of the user, the server key, and
the rate-limiter key, while the rate-limiter remains oblivious to the
password and the data key. The security of PHE states that neither
an active adversary having stolen the database nor the rate-limiter
alone should learn anything about the encoded password and the
data key. To recover the data key, a corrupt party must communicate
with the other party, who rate-limits decryption attempts. Finally,
PHE supports key-rotation, which allows rotating the keys of the
server and rate-limiter with succinct communication. Thereafter,the
server can locally update all ciphertexts without further interaction
with the rate-limiter or end-users. This property of key-rotation
is demanded by the payment card industry data security standard
(PCI DSS) [15]. PHE was directly productized by VirgilSecurity 2.
While PHE significantly improves security, it also introduces a
single point of failure. If the rate-limiter is unreachable, e.g., due
to network failure or malicious attacks, the data would become
unavailable to the end-users as the server cannot provide decryption
service alone. Even worse, if the rate-limiter key is lost, then all
user data is effectively lost permanently. These potential issues may
discourage service providers from deploying PHE, as they may not
want to ultimately depend on third parties for emergency access to
their data. The na√Øve solution of duplicating the rate-limiter into
multiple instances increases availability, but at a cost of security. If
anyone of the instances of the rate-limiter is corrupt, any benefit
brought by PHE would be nullified.
1.1 Our Contribution
Our main contributions are the invention, construction, and imple-
mentation of threshold password-hardened encryption with the
overall goal to address the availability and trust issues of PHE. The
1https://en.wikipedia.org/wiki/List_of_data_breaches
2https://developer.virgilsecurity.com/docs/use-cases/v1/passwords-and-data-
protection?_ga=2.168638369.1056320515.1579507576-2040416527.1579507576, https:
//virgilsecurity.com/wp-content/uploads/2019/04/PHE-Service-Technical-Paper.pdf
basic idea is to remove the single point of failure by spreading the
responsibility of a single rate-limiter to ùëö independent rate-limiters.
We increase the availability by setting a threshold number ùë° that
are necessary and sufficient for successful en/decryption. The secu-
rity of ((ùë°, ùëö)-PHE) guarantees that as long as the adversary does
not control both the server and at least ùë° rate-limiters, (ùë°, ùëö)-PHE
schemes provide the same security guarantees like those of PHE
schemes. We stress that the rate-limiters are not aware of each
other and primarily interact with the server. Practically speaking,
this allows services to make use of rate-limiters hosted by differ-
ent providers, or even have some of them ‚Äúin cold storage‚Äù locally
where they can be reactivated in emergency situations to avoid data
loss. Additionally, this allows strengthening security by requiring
more than one honest rate-limiter for successful decryption. In the
following, we discuss our contributions:
Formalization. We formalize (ùë°, ùëö)-PHE and define two security
properties, hiding and soundness, which consolidate und unify the
definitions of message hiding, partial obliviousness, (strong) sound-
ness, and forward security of PHE [12]. Note that since (ùë°, ùëö)-PHE
is a generalization of PHE (where ùë° = ùëö = 1), we obtain also con-
solidated security definitions for PHE. In our model we assume
semi-adaptive corruptions, where the adversary must declare the
set of corrupt parties for the next time epoch when instructing a
key-rotation. Note that security under semi-adaptive corruption is
already stronger than the static security defined in [12], where the
corrupt party is fixed for the entire duration of the experiments.
Hiding. Hiding refers to the property that the adversary cannot
do better than performing online password guessing attacks to learn
an encrypted message, as long as it does not corrupt the server and
at least ùë° rate-limiters at the same time. Our hiding definition con-
solidates the previous hiding, obliviousness, and forward security
definitions of PHE [12]. In particular, the new hiding definition
captures attack strategies in which the adversary corrupts different
parties at different points in time.
Soundness. Soundness refers to the property that the server can-
not be fooled to make wrong decisions during decryption. More
precisely, it means that, for any fixed server secret key, a ciphertext
cannot encode two different valid password-message pairs at the
same time. Our soundness definition consolidates the previous ones
by capturing all attack strategies in a single security experiment.
Construction and Impossibility Result. We present a simple
and efficient construction that relies on lightweight cryptographic
components only. On a very high-level, our construction exploits
the linearity of the Shamir secret sharing scheme [18] and the El-
Gamal encryption scheme [6]. Assuming a communication model
where the rate-limiters are not allowed to communicate with each
other, the resulting encryption protocol consists of 3 rounds, while
the decryption protocol consists of 6 rounds. It has the nice property
that rate-limiters cannot tell whether the same incorrect password
was used in two failed decryption attempts of the same user. Re-
garding security, we prove that the construction is secure under
the DDH assumption in the random oracle model assuming semi-
adaptive corruption. Via a meta-reduction, we show that this result
is optimal and that the construction does not achieve our stronger
2
notion of full adaptivity. We also give evidence that an efficient yet
fully adaptively secure construction is unlikely to exist.
Implementation and Evaluation. Our prototypical implementa-
tion in Python confirms the practical efficiency of our construction.
We evaluated the latency and throughput of (ùë°, ùëö)-PHE for multiple
threshold levels ùë° and number of cores. The experimental evalu-
ation (see Section 4) shows that our (ùë°, ùëö)-PHE can process up
to 1045 encryption and up to 394 decryption requests per second.
Scaling (ùë°, ùëö)-PHE can easily be achieved by increasing the num-
ber of cores. Additionally, throughput performance increases faster
with the number of cores than it is slowed down by the number of
rate-limiters. Considering current recommendations for best prac-
tice [19] on password hashing and password-based key-derivation,
we note that algorithms like scrypt or Argon2 [5] are usually con-
figured to limit login throughput to tens of requests per second
which is significantly slower than using (ùë°, ùëö)-PHE.
1.2 Related Work
The original concept of password-hardening (PH) is due to Face-
book [14]. Everspaugh et al. [7] made the first step towards formal-
izing PH and identified key-rotation as the key property to make
such schemes useful in practice, which is also the key challenge
when designing PH and PHE schemes. The notion of PH has been
subsequently refined by Schneider et al. [16] and Lai et al. [13]. In
addition to password verification, Lai et al. [12] later introduced
the concept of password-hardened encryption (PHE) that allows
associated data to be encrypted under a per-user key that is inac-
cessible without the user‚Äôs password and provides strong security
guarantees analogous to those of PH.
The construction of (ùë°, ùëö)-PHE in this work is based on the
PHE scheme in [12], which in turn is based on the PH scheme
in [13]. As observed in [12], it is unclear how the PH scheme in [7]
(formalized as a partially oblivious pseudorandom function) can be
extended to a PHE scheme. Therefore, although the scheme in [7]
has a natural threshold variant, it is not helpful for constructing
(ùë°, ùëö)-PHE schemes.
A closely related notion is password-protected secret sharing
(PPSS) [4], which provides similar functionality as that of (ùë°, ùëö)-
PHE, with different formulations in syntax and security definitions.
The key feature separating (ùë°, ùëö)-PHE from PPSS is key-rotation. In-
deed, a (ùë°, ùëö)-PHE can be seen as a PPSS scheme with key-rotation.
Password-based threshold authentication (PbTA) [1] is a recent
related notion where, instead of recovering a data key, the goal
is to produce an authentication token which can be verified by
the service provider. Moreover, the PbTA scheme in [1] does not
support key-rotation.
2 DEFINITIONS
Preliminaries. Let ùúÜ ‚àà N be the security parameter and ùëö ‚àà N.
The set {1, . . . , ùëö} is denoted by [ùëö], and the set {ùëé, ùëé + 1, . . . , ùëè} is
denoted by [ùëé, ùëè]. We denote by
((ùë¶1; view1), . . . , (ùë¶ùëö; viewùëö))
‚Üê Œ†‚ü®P1(ùë•1; ùëü1), . . . , Pùëö(ùë•ùëö; ùëüùëö)‚ü©
the protocol Œ† between the interactive algorithms P1, . . . , Pùëö,
where Pùëñ has input ùë•ùëñ,randomness ùëüùëñ,outputùë¶ùëñ,and view viewùëñ. The
view viewùëñ consists of the input ùë•ùëñ, the input randomness ùëüùëñ, and all
messages received by Pùëñ during the protocol execution. Let ùêº ‚äÜ [ùëö].
We use the shorthand viewùêº to denote the set {(ùëñ, viewùëñ)}ùëñ‚ààùêº . In case
that the output Pùëñ is not explicitly needed, we write ‚àó instead of ùë¶ùëñ.
For ease of readability, we omit the randomness ùëüùëñ and/or the view
viewùëñ of Pùëñ if they are not explicitly needed. When the randomness
ùëüùëñ is omitted, it means that ùëüùëñ is chosen uniformly from the appro-
priate domain. We use the special and distinct symbols ùúñ and ‚ä• to
denote the empty string and an error (e.g., protocol abortion), re-
spectively. Unless specified, the symbols ùúñ and ‚ä• are by default not
a member of any set considered. Let ùëè be a Boolean value. We use
the shorthand ‚Äúensure ùëè‚Äù to denote the procedure which outputs
‚ä• (prematurely) if ùëè ‚â† 1.
Definition of (ùë°, ùëö)-PHE. Let ùë°, ùëö ‚àà N with ùë° ‚â§ ùëö. Let PW and
M be the password space and the message space, respectively. Let
S and Rùëñ refer to the server and the ùëñ-th rate-limiter respectively
for ùëñ ‚àà [ùëö].
A ùë°-out-of-ùëö threshold password-hardened encryption, or
((ùë°, ùëö)-PHE) scheme, for PW and M consists of the efficient al-
gorithms and protocols (Setup, Enc, Dec, Rotate, Udt), which we
define as follows:
(crs, sk0, . . . , skùëö) ‚Üê Setup(1ùúÜ, 1ùëö, 1ùë°):
The setup algorithm inputs the security parameter ùúÜ, the number of
rate-limiters ùëö, and the threshold ùë° in unary. It outputs the common
reference string crs, the secret key sk0 for the server and the secret
key skùëñ for the ùëñ-th rate-limiter, for all ùëñ ‚àà [ùëö]. The common refer-
ence string is an implicit input to all other algorithms and protocols
for all parties.
((ùëõ, ùê∂), ùúñ, . . . , ùúñ) ‚Üê Enc
(cid:43)
(cid:42)S(‚Äúenc‚Äù, sk0, pw, ùëÄ),
R1(‚Äúenc‚Äù, sk1),
Rùëö(‚Äúenc‚Äù, skùëö)
. . . ,
:
The encryption protocol is run between the server and (possibly
a subset of) the ùëö rate-limiters. The server inputs its secret key,
a password pw ‚àà PW, and a message ùëÄ ‚àà M. The rate-limiters
input their respective secret keys. The server outputs a nonce ùëõ and
a ciphertext ùê∂, while each rate-limiter outputs an empty string ùúñ.
(cid:42)S(‚Äúdec‚Äù, sk0, pw, ùëõ0, ùê∂),
(cid:43)
(ùëÄ, ùëõ1, . . . , ùëõùëö) ‚Üê Dec
R1(‚Äúdec‚Äù, sk1),
Rùëö(‚Äúdec‚Äù, skùëö)
. . . ,
:
The decryption protocol is run between the server and (possibly
a subset of) the ùëö rate-limiters. The server inputs its secret key, a
candidate password pw ‚àà PW, a nonce ùëõ0, and a ciphertext ùê∂. The
rate-limiters input their respective secret keys. The server outputs
a message ùëÄ. Each rate-limiter outputs a nonce ùëõùëñ which can be
interpreted as the identifier of the ciphertext ùê∂ in the view of Rùëñ.
((sk‚Ä≤