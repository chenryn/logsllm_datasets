public inputs are the (prepared) blocklist chunks, and the
common input element is the user’s identity.
In addition, HICIAP can link aggregate proofs: it can
prove in zero-knowledge that the proofs in a set of
HICIAP proofs all share the same common input element.
In the case of (unbuffered) SNARKBLOCK, there are three
aggregate proofs that are linked: chunk non-membership,
issuance, and tag well-formedness.
In this section, we provide intuition for the design
of HICIAP and then describe each of its components in
detail.
A. Intution
To explain HICIAP, we start with a na¨ıve veriﬁer who
takes a full (non-succinct and non-hiding) set of Groth16
proofs πi = (Ai,Bi,Ci) and checks that they verify with
respect to a common public input. We transform this into
a succinct zero-knowledge proof that vector commitments
to A, B and C contain proofs that verify with respect to a
hidden input. For simplicity, we omit the blinding factors
from discussion, and leave their detailed accounting to the
proof of honest veriﬁer zero-knowledge in Appendix B.
The HICIAP veriﬁer must be convinced that there is
some hidden wire value a0 ∈ F for which a set Groth16
?
proofs {(Ai,Bi,Ci)}n−2
public inputs ˆS, i.e., for all i = 1 . . . ,n− 2,
e (Ai,Bi)
= e ([α]1 , [β ]2)· e (Ci, [δ ]2)· e(cid:0)a0W0 + ˆSi, [γ]2
i=1 verify given a set of prepared
(cid:1) .
Our ﬁrst step is to combine the above n− 2 equations
into a single polynomial equation. Verifying this would
still require the veriﬁer to do linearly many equality
checks, so the veriﬁer picks a random r ← F and evaluates
the polynomial “in the exponent” at the random point.
Combining these two steps, the new veriﬁer equation is
?
∏e (Ai,Bi)ri
= ∏e ([α]1 , [β ]2)ri ·∏e (Ci, [δ ]2)ri
·∏e(cid:0)a0W0 + ˆSi, [γ]2
(cid:1)ri
.
By the Schwartz-Zippel lemma, equality here implies the
equality of the initial n− 2 equations with overwhelming
probability. We now have one equality check.
The next step is to make the veriﬁer oblivious to
a0. To do that, we split the e(a0W0 + ˆSi, [γ]2)ri term in
two. The prover sends W , a blinded version of ∑ria0W0,
to the veriﬁer. It proves that W is computed correctly
using an instance of the Σ-protocol HWW (described in
Section VI-B). The veriﬁer equation is now
∏e (Ai,Bi)ri
= ∏e ([α]1 , [β ]2)ri ·∏e (Ci, [δ ]2)ri · e (W, [γ]2)
?
·∏e(cid:0) ˆSi, [γ]2
(cid:1)ri
.
For both succinctness and privacy, the prover cannot
give the veriﬁer every Groth16 proof. Instead, the prover
gives only succinct commitments, comA, comB, comC to
the proof vectors A, B, C, respectively. This requires the
prover to calculate aggAB := ∏e (Ai,Bi)ri and aggC :=
∏e (Ci, [δ ]2)ri itself and send them to the veriﬁer. Since
these calculations can be expressed as inner product
operations, the prover shows they are correct using
instances of TIPP and HMIPP, respectively. The veriﬁer
equation is now
= ∏e ([α]1 , [β ]2)ri · aggC · e (W, [γ]2)·∏e(cid:0) ˆSi, [γ]2
aggAB
?
(cid:1)ri
.
This equation is now veriﬁable by the HICIAP veriﬁer,
but it is not fully succinct—the veriﬁer must still do
linear work in order to compute the products containing
the ri exponents. The veriﬁer can avoid this for the
term ∏e ([α]1 , [β ]2)ri by simply using the geometric
i=0 ri = (rn+1 − 1)/(r − 1). The second
sum formula: ∑n
optimization, due to B¨unz et al. [BMM+20], moves the
aggregation of the prepared inputs aggin := ∑ri ˆSi to
the prover. The prover sends aggin and proves it was
constructed correctly using an instance of MIPP. The
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
955
(cid:18) (ck, crs), ˆS,
(a0,A(cid:48),B(cid:48),C(cid:48))
(cid:19)
HICIAP.Prove
HICIAP.Vfy((srs, crs), comin)
M(cid:48)
1
(A(cid:48),B(cid:48),C(cid:48)) ← Groth16.Rerand
z1,z2,z3,z4 ← F
A := A(cid:48)(cid:107) [z1]1 (cid:107) [z2]1 ∈ Gn
B := B(cid:48)(cid:107) [γ]2 (cid:107) [δ ]2 ∈ Gn
C := C(cid:48)(cid:107) [1]1 (cid:107) [z2]1 ∈ Gn
coma0 := a0P1 + z1P2 + z3P3
comA := A∗ ck1
comB := ck2 ∗ B
comC := e ([z4]1 , ck3)· (C∗ ck1)
2
1
r := (r,r2, . . . ,rn)
r(cid:48) := r[:n−2]
aggin := ˆSr(cid:48)
aggC := Cr
W :=(cid:2)z1rn−1(cid:3)
1 + ∑n−2
i=1 ria0W0
(A(cid:48),B(cid:48),C(cid:48))
−−−−−−−−−−−−−−→
coma0 ,comA,comB,comC
r←−−
r ← F
−−−−−−−−→
aggin,aggC,W
i=1 riW0, G2 :=(cid:2)rn−1(cid:3)
1
G1 := ∑n−2
aggAB := Ar ∗ B
return o := (z1,z3)
MIPPk(ck,(comin,aggin,r(cid:48)),ˆS)
←−−−−−−−−−−−−−−−→
(cid:19)
(cid:18) (coma0 ,W,P1,P2,P3,G1,G2),
←−−−−−−−−−−−−−−−−−→
HMIPP(ck,(comC,aggC,r),(C,z4))
HWW
(a0,z1,z3)
←−−−−−−−−−−−−−−−−−−−→ G1 := ∑n−2
←−−−−−−−−−−−−−−−−−−−−→ aggAB := ∏n
TIPP(ck,(comA,comB,aggAB,r),(A,B))
J := e(aggin, [γ]2)
i=1 riW0, G2 :=(cid:2)rn−1(cid:3)
1
i=1 e([α]1 , [β ]2)ri · J
·e (W, [γ]2)· e (aggC, [δ ]2)
Fig. 4: The (interactive) HICIAP protocol. Vfy accepts iff all subprotocols MIPP, HMIPP, HWW, and TIPP accept. The group
elements W0, [α]1 , [β ]2 , [δ ]2 , [γ]2 are supplied by crs. The values P1,P2,P3 used to compute coma0 is a Pedersen commitment
basis. The Rerand procedure is only executed on the indices in the (log-sized) masking set M(cid:48) = M∪{n− 2}, where M is
deﬁned in the proof of Lemma 4. It is the identity function everywhere else.
veriﬁer checks this with respect to comin, which it can
compute from public inputs independently of the proof-
speciﬁc r values. With these two optimizations, the ﬁnal
veriﬁer equation is
aggAB
?
= e ([α]1 , [β ]2)
rn+1−1
r−1
· aggC · e (W, [γ]2)· e (aggin, [γ]2) .
It is important to reiterate that, while this resembles
HICIAP’s veriﬁcation equation,3 the protocol outlined
above is not zero-knowledge. W leaks a0; aggAB, comA,
and comB leak parts of A and B; and aggC and comC leak
parts of C. In order to achieve zero-knowledge, we blind
all of these values using the explicit blinders z1, . . . ,z4 ∈ F
and the implicit blinders in the Groth16.Rerand sub-
procedure.
3For clarity’s sake, however, the Vfy algorithm in Figure 4 does
include the geometric sum formula, or any other arithmetic
not
optimizations.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
956
B. HICIAP details
We now give the formal deﬁnitions of the HICIAP
relations and procedures. The HICIAP relation for a ﬁxed
n, where n is a power of two, is deﬁned to be
(cid:32)
n−2(cid:94)
i=1
ck, crs, comin,{ ˆS}n−2
i=1 ;
a0,{πi}n−2
comin = ˆS∗ ck1
i=1
Groth16.Vfy(crs,πi, (a0, ˆSi))
(cid:33)
:
 .
RHICIAP =
The associated protocol is given in Figure 4, and is made
non-interactive by applying the Fiat-Shamir transform
[FS87].
Note that Prove outputs an opening o = (z1,z3) of
coma0. This opening is used for linkage proofs, which
show that multiple HICIAP proofs share the same a0.
Formally, this relation is
(cid:0){ ˆπi}t
t(cid:94)
i=1
Rlink =
i=1;a0,{oi}t
a0 = a0P1 + z(i)
i=1
1 P2 + z(i)
3 P3
com(i)
(cid:1) :
 ,
1 ,z(i)
a0 comes from ˆπi, (z(i)
where com(i)
3 ) come from oi, and
P1,P2,P3 ∈ G1 is a Pedersen basis shared by all HICIAP
instances. The LinkProve and LinkVfy algorithms are
constructed using the generic Σ-protocol framework
deﬁned by Camenisch and Stadler [CS97]. We defer
their full description and security analysis to the extended
version of this paper [RMM21].
For the last relation, recall from the intuition that the
value W in HICIAP proofs must be proven to represent
the value a0 on the wire W0 and no more (i.e., it must
not allow the prover to cancel other wire values). We call
this the hidden wire well-formedness (HWW) relation:
(cid:86)
(cid:18) (U,V,{Gi}5
i=1 ∈ G1;
U = wG1 + xG2 + yG3
w,x,y ∈ F
V = wG4 + xG5
(cid:19)
:
RHWW :=
the HWW proof system is a Σ-protocol
Like Link,
constructed using the Camenisch-Stadler framework. The
protocol is described and proven secure in the extended
version of this paper.
We claim that HICIAP is a zkSNARK for the RHICIAP
relation. The proofs of the below theorems can be found
in Appendix B. Lastly, we note that the requirement that
n is a power of 2 greater than or equal to 16 is not a
barrier to usage, since proofs (and their prepared public
inputs) can be duplicated arbitrarily many times to pad
the input of the HICIAP algorithms.
Theorem 2 (HICIAP Soundness). HICIAP on n − 2
proofs has witness-extended emulation against algebraic
adversaries under the DL, n-ASDBP, and 2n-SDH
assumptions.
Theorem 3 (HICIAP Perfect Honest Veriﬁer Zero Knowl-
dege). The HICIAP protocol is perfect HVZK, provided
that n ≥ 16.
VII. IMPLEMENTATION AND EVALUATION
We now detail the design and evaluation of SNARK-
BLOCK.
A. Implementation and setup
Hardware. All benchmarks were performed on a
desktop computer with a 2021 Intel i9-11900KB CPU
with 8 physical cores and 64GiB RAM running Ubuntu
20.04 with kernel 5.11.0-40-generic.
Code. SNARKBLOCK consists of 4.3k lines of Rust
code4 using the Arkworks [Ar21] zkSNARK crates and
Rayon for parallelization where possible. The Criterion-rs
crate was used for all benchmarks and statistics.
Statistics. Performance measurements are for medians
and include error bars indicating the 95% conﬁdence
interval. These are not visible: over all benchmarks, the
maximum relative standard error of the median is 1.6%.
Instantiating cryptographic primitives. We set λ =
128. We use BLS12-381 [Bow17] for our Groth16
and HICIAP proofs, and Jubjub [ZCa19] for Schnorr
signatures. We use hash functions H1, H2, H3 for identity
registration, tag computation, and Schnorr signatures,
respectively. Speciﬁcally, the commitment scheme used
for Risu is Com(m,r) := H1(r(cid:107)m) and the PRF scheme
used for Rchunk is Prfk(m) := H2(k(cid:107)m). Each Hi is a
domain-separated instantiation of the Poseidon family
[GKK+19], conﬁgured to be compatible with BLS12-
381 and a 128-bit security level (i.e., α = 5 and capacity
= 1).
B. Evaluation
Benchmarks are given in Figures 5 and 6. Lines marked
buf were benchmarked using a size-14 buffer of 16-
element chunks. Lines marked nobuf used no buffer. The
cs parameter refers to chunk size.
Figure 5a gives the time clients take to attest to non-
membership on a blocklist that has recently changed.
Speciﬁcally, this is the time it takes for a user to re-
compute the last Groth16 chunk proof; compute HICIAP
proofs over the blocklist, buffer (if the buffer exists),
issuance, and tag well-formedness proofs;5 and compute
4The HICIAP crate source code can be found at https://github.com
/rozbb/hiciap and the SNARKBLOCK crate source code can be found
at https://github.com/rozbb/snarkblock.
5For speed, we combine Risu and Rtag into a single circuit in our
implementation. Thus there are only 2 proofs to link in an unbuffered
SNARKBLOCK attestation.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
957
(a) Online costs for proving non-membership vs. blocklist size
(b) Precomputation cost vs. additions/removals to the blocklist
Fig. 5: Client-side performance for SNARKBLOCK
(a) SNARKBLOCK attestation veriﬁcations per second vs. blocklist
size.
(b) SNARKBLOCK attestation proof size vs. blocklist size. Varying
chunk size only shifts the x-axis.
Fig. 6: Server-side performance for SNARKBLOCK
the link proof over those. Separately, Figure 5b gives the
ofﬂine computation a client must do as a function of the
number of additions/removals to the blocklist (e.g. per
day). This includes syncing chunks and precomputing its
Groth16 issuance and tag well-formedness proofs for the
next attestation.
Figure 6 gives proof sizes and throughput for server
veriﬁcation. These graphs, which are semi-log scale,