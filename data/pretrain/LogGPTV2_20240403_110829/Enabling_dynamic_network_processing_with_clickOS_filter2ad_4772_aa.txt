title:Enabling dynamic network processing with clickOS
author:Mohamed Ahmed and
Felipe Huici and
Armin Jahanpanah
Enabling Fast, Dynamic Network Processing with ClickOS
Joao Martins†, Mohamed Ahmed†, Costin Raiciu‡, Felipe Huici†
† NEC Europe Ltd. ‡ University Politehnica of Bucharest
ﬁPI:EMAIL, PI:EMAIL
ABSTRACT
Middleboxes are both crucial to today’s networks and ubiq-
uitous, but embed knowledge of today’s protocols and appli-
cations to the detriment of those of tomorrow, making the
network harder to evolve. SDNs seek to make it easier to
extend the network with new functionality, but most of the
research eﬀort has focused on the network’s control plane,
that is, how packets are switched are routed through a SDN.
Given the pervasiveness and importance of middleboxes,
we believe that a fully programmable network should also be
able to dynamically instantiate and quickly move middlebox
functionality. In this paper we shift focus towards making
the data plane more programmable by introducing ClickOS,
a tiny, Xen-based virtual machine that can run a wide range
of middleboxes. ClickOS is small (5MB when running), can
be instantiated in very small times (roughly 30 milliseconds)
and can ﬁll up a 10Gb pipe while concurrently running 128
vms on a low-cost commodity server.
Categories and Subject Descriptors
D.4.4 [Operating Systems]: Communications Management
Keywords
Virtualization, Xen, middleboxes, SDN, NFV, ClickOS
1.
INTRODUCTION
We are witnessing a revival of Internet architecture re-
search that leverages software deﬁned networking (SDN) to
overcome the limitations of the current network, the biggest
of which is ossiﬁcation. To create an evolvable network, SDN
proposes centralization of the control plane and commodi-
tization of the data plane, thus removing the long-standing
“you can’t touch the core” deployment barrier. By creat-
ing an easily changeable software control plane, SDN allows
ﬂexible packet switching and routing, promising to acceler-
ate the adoption of new Internet protocols (e.g., IPv6) or
changes to existing ones.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from permissions@acm.org.
HotSDN’13, August 16, 2013, Hong Kong, China.
Copyright 20XX ACM 978-1-4503-2178-5/13/08 ...$15.00.
Unfortunately, changing the way packets are switched may
not be enough to evolve the Internet: there is a lot more
functionality embedded in the network today—in the form
of middleboxes—that also needs updating. Middleboxes are
crucial to today’s operational networks, performing a diverse
set of functions ranging from security (ﬁrewalls, IDSes, traf-
ﬁc scrubbers), traﬃc shaping (rate limiters, load balancers),
dealing with address space exhaustion (NATs) or improv-
ing the performance of network applications (traﬃc accel-
erators, caches, proxies). Middleboxes are almost ubiqui-
tous: one recent study [6] found that a third of access net-
works maintain TCP connection state, performing various
ﬂow processing functionality. Another study of enterprise
networks concludes that there are as many middleboxes de-
ployed in networks as routers and switches [23].
Given the pervasiveness and importance of middleboxes,
an evolvable Internet must be able to dynamically instanti-
ate, upgrade and quickly shift middlebox functionality. In
this paper we switch focus towards making the data plane
of SDNs more programmable, that is, the actual processing
that packets go through as they pass through networks.
Middleboxes are, for the most part, costly, purpose-built
hardware devices that are diﬃcult to conﬁgure or upgrade,
much like routers. The obvious solution to evolvable middle-
boxes is to instantiate them as software on commodity hard-
ware, perhaps in the cloud [26, 23]. For cost-eﬀectiveness
and scalability reasons, software middleboxes will run inside
virtual machines, allowing them to be consolidated on a sin-
gle physical machine when traﬃc is low, and migrated to
idle machines when traﬃc ramps up.
What is the right programming interface for software mid-
dleboxes? Before we jump to an answer, let’s consider the
requirements of a good solution:
• Fast instantiation:
the system should be able to
instantiate middlebox processing quickly and where
needed, in order to match (possibly rapidly) chang-
ing SDNs.
• Small Footprint: ideally the system should be able
to host a large number of middleboxes on the same
server in order to reduce purchasing and operational
costs.
• Isolation:
in a world where slices of networks are
given to diﬀerent entities and users, it becomes increas-
ingly important that users’ middleboxes that happen
to run on common hardware do not aﬀect each other,
67both from a security and performance point of view.
• Performance: in order to have a chance at competing
with hardware oﬀerings, the system should provide a
high-performance data plane, including driver support
for the latest network devices.
• Flexibility: the system should be able to easily per-
form a wide range of middlebox functionality and be
extensible.
The default solution is to run middleboxes inside Linux
VMs (or other commodity OSes). This solution provides iso-
lation and performance, but has a large memory footprint
and relatively slow instantiation times (roughly 5 seconds
in some of our Linux-based tests). Typically, such software
middleboxes are developed using general purpose program-
ming languages, e.g. C or python.
Can we do better? We observe that middlebox process-
ing is not general purpose computation: it works at packet-
level and applies a relatively small menu of changes to pack-
ets. The Click modular router [8] is a good way to program
middlebox functionality: users can combine existing stock
elements or write new ones to quickly create complex pro-
cessing conﬁgurations. To date, a wide range of networking
processing has been implemented in Click [3].
Click oﬀers ﬂexibility and performance—but it lacks iso-
lation, and has a large memory footprint as it runs in the
Linux kernel. The coupling of Click with the Linux kernel
is not fundamental: we propose to break it and run Click as
a standalone virtual machine.
In this paper we introduce ClickOS, a Xen-based tiny vir-
tual machine that runs Click. Through optimizations to the
virtual machine itself and Xen’s underlying networking sys-
tem, ClickOS achieves the criteria above: it can be quickly
instantiated (boot times are in the ballpark of as little as
30 milliseconds), it has a small footprint (the compressed
image is 1.4MB and 5MB when running), and can process
a 10Gb pipe worth of traﬃc. In addition, it beneﬁts from
the inherent isolation provided by Xen and the ﬂexibility
aﬀorded by the Click modular software.
The rest of this paper is dedicated to explaining ClickOS
and providing a performance evaluation of it. It is organized
as follows. Section 2 gives an overview of ClickOS. Sec-
tion 3 presents results concerning ClickOS’ fast boot times
and small footprint, as well as an evaluation of the system’s
data plane performance. Section 4 discusses related work.
Finally, section 5 discusses the wider implications of ClickOS
on middlebox processing.
2. CLICKOS ARCHITECTURE
We use Xen to create a scalable and easily programmable
architecture. The system runs a set of ClickOS virtual ma-
chines (vms), each composed of Click version 2.0.1 running
on top of MiniOS, a minimalistic OS provided with the Xen
sources (ﬁgure 1). Xen was chosen because it uses par-
avirtualization to run slightly modiﬁed operating-systems
as guests, oﬀering better performance compared to full vir-
tualization solutions (where the guest OS is unmodiﬁed) [1].
We motivate using MiniOS in section 2.1.
To run Click, users provide a conﬁguration, essentially
a text ﬁle specifying a graph of inter-connected elements.
Once running, they can access read/write handlers, internal
Figure 1: ClickOS architecture overview.
variables that can change the state of an element at run-
time (e.g., the AverageCounter element has a read handler
to get the number of packets seen so far, and a write handler
to reset that count). Click relies on the /proc ﬁlesystem
or sockets to provide these mechanisms; because these do
not exist in ClickOS, we must provide an equivalent way of
implementing them.
The ClickOS control plane in charge of handling all of
these operations consists of three parts. First, a C-based
CLI takes care of, among other tasks, creating and destroy-
ing ClickOS guest domains. When a guest domain boots,
a MiniOS control thread is created (the second part of the
control plane). This thread adds an entry to the Xen store,
a /proc-like database shared between dom0 and all running
guest domains (ﬁgure 1). The control thread then watches
for changes to the entry. When a Click conﬁguration string is
written to it, it takes care of creating a new thread and run-
ning a Click instance within it, meaning that several Click
instances can run within a single ClickOS domain.
The third part of the control plane consists of a new Click
element called ClickOSControl. It talks, on one end, to all
elements in a given conﬁguration and to the Xen store on the
other end. The CLI then provides users with an interface
to read and write to element handlers via the Xen store and
ClickOSControl. All these operations on the ClickOS side of
things are executed in the control thread mentioned above.
2.1 Building ClickOS
Xen is split into a privileged domain called dom0 that
(among other tasks) controls the hypervisor and hosts de-
vice drivers1; and guest domains, the users’ virtual machines
(also knows as domUs).
To achieve good performance, Click should run in the op-
erating system kernel, but this makes crashing the whole
system very easy - so Click must necessarily run inside a
virtual machine. Using a full blown Linux virtual machine
to run Click, as done today, is rather heavyweight, leading
to large memory footprints and long boot-up times.
We observe that many of the services provided by a Linux
kernel 2 are not needed to run Click, and neither is the
userspace API. First, a ClickOS instance will run a single
conﬁguration belonging to a single user: there is no need for
multiple user support. In fact, there is no need for user-space
1Strictly speaking, the device drivers are hosted in the driver
domain, but in practice dom0 frequently also acts as the
driver domain.
2The same observations apply for other commodity operat-
ing systems, not just Linux.
68Figure 2: Basic ClickOS networking in Xen.
programs; removing the user-space/kernel space separation
increases performance (e.g., no system calls) and simpliﬁes
the kernel considerably.
In addition, Click does not need multiple memory ad-
dress spaces: a single conﬁguration runs in the same address
space, as elements pass pointers to each other to perform
their functionality; this implies that support for multiple
processes is not needed either. Threads are needed, though,
as diﬀerent processing chains may need to run in parallel.
On the I/O side, Click needs access to network interfaces.
These can be easily supported with a generic driver, leaving
the complexity of providing drivers for diﬀerent hardware in
dom0. Filesystems are rarely used, and other I/O devices
(e.g., usb, video output) even less. In fact, removing most
of the I/O supports deprecates a big part of the Linux ker-
nel. Finally, a networking stack may be needed for TCP/IP
connectivity.
As it turns out, the Xen sources come with MiniOS, a min-
imalistic, para-virtualized OS that provides all the function-
ality needed by Click without any of the additional ”clutter”
included in traditional operating systems. As a result, we
build ClickOS as a combination of Click and MiniOS.
MiniOS implements the basics needed to operate in a Xen