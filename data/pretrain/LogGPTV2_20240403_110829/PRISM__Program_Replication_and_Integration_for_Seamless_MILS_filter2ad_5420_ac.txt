Maintains the total editing time.
o:Characters
When the number of non-space characters in the
document changes.
o:CharactersWithSpaces
When the number of characters including spaces
in the document changes.
o:Words
When the number of words in the document
changes.
o:Paragraphs
When the number of paragraphs changes.
o:Lines
When the number of lines changes.
o:Pages
When the number of pages changes.
Solution: The o:Created tag should be created at the
lowest security level of the document. The o:LastSaved,
o:LastPrinted and o:TotalTime tags must be
deleted, or copied from the old version in all but the lowest
security-level copy of the document. The o:Revision tag
must be deleted prior to storage inthe MLSDoc container, but
the tag can be generated prior to loading the MLSDoc into
Word by substituting the revision numbers for each security
level in the MLSDoc ﬁle.
The other statistical properties tags are recalculated when
Word loads the document and may be safely removed for
storage in the MLSDoc container.
fonts
that
are
to
are
or
added
Problem: When editing text at a higher
new styles
level,
the
any
document
/w:wordDocument/-
and
w:lists/w:listDef/w:lvl/w:pStyle
/w:wordDocument/w:fonts/w:font.
the same
document is edited at a lower level and a new style added,
there is the possibility of a style name being used more
than once, possibly confusing Word and/or the user.
added
as
If
Solution: Add all styles at the lowest security level of
the document to ensure that they are available at all security
levels and avoid name clashes, for example using a template
as already discussed.
Problem: When Word loads and saves an XML docu-
ment, it sometimes alters the order of tags for some XML
entities. For example, as shown in Table I, we observed
a document containing a number of o:SmartTagType
entities as the ﬁrst children of the w:wordDocument entity
being reordered when loading and immediately saving the
document using the “save as” option.
Solution: Deﬁne a canonical order for these elements,
and to transform the document into this order. XSLT code to
do this using alphanumerical ordering of SmartTag elements
according to their name attributes is included in Listing 1.
287
REORDERING OF SmartTagType TAGS DURING AN EDIT SESSION
Table I
o:name attribute
original order
saved order
PlaceName
PlaceType
Street
City
State
country-region
place
address
1
2
3
4
5
6
7
8
2
3
7
4
1
6
5
8
Problem: New metadata entity tags appear and disap-
pear from time to time when editing documents.
Solution: Optional
such as w:rsid and
w:proofState, should be deleted prior to MLSDiff gen-
eration for storage in an MLSDoc container.
tags,
Problem: The aml:annotation element represents
a tracked insertion, deletion, formatting change, comment, or
bookmark in a document. It contains the attribute aml:id
which is numbered sequentially in the document. Any in-
sertion or deletion of an aml:annotation element will
alter the numbering of all subsequent aml:annotation
elements, causing BLP policy violations and TCB patch
rejection.
Solution: The aml:annotation element’s aml:id
attribute can be stripped from these tags prior
to in-
sertion into or diff against the MLSDoc ﬁle. When the
ﬁle is subsequently loaded and saved by Word, some
of these elements may be lost. For example,
insertions
have a w:type attribute of "Word.Insertion" and
are retained by Word when the document is loaded and
saved again. A new aml:id attribute is generated if it
is missing from the source document. Bookmark tags with
a w:type attribute of "Word.Bookmark.Start" or
"Word.Bookmark.End", however, are not subsequently
saved by Word. These elements need to be removed from
the document prior to storage in an MLSDoc container.
Problem: Third party applications such as OpenOfﬁce,
and even different versions of Word, typically write ﬁles
using different detailed representations of the information in
a ﬁle. For example, the order of entity and attribute tags is
not typically maintained, numerical values may be formatted
differently, and even XML structures may vary. Listing 2
shows three common ways that we have encountered for
representing empty XML tags.
Listing 2. Three common representations for empty XML tags
While these alternate representations are still semantically
valid and should be understandable by Microsoft Ofﬁce and
288
other applications, the syntactic differences foil MLSDoc’s
strict byte based BLP policy checks.
Solution 1: If transitioning to new application software
at all security levels, a one-off reconstruction of the docu-
ment can be achieved by transferring to the new application
at the lowest security level and migrating upwards through
each level, manually importing higher-level content.
Solution 2: An alternate approach would be to have
a much tighter canonical form that the document is trans-
formed to. This could be achieved by improving ﬁle format
standards, or with more extensive XML pre-processing.
Problem: High-level cross references to low-level ob-
jects will break if the low-level objects are renamed or
removed, which would be particularly problematic if low-
level labels were reused.
Solution 1: Similar to the discussion about orphaned
fragments in Section IV, the untrusted add-in could draw
any broken references to the user’s attention and assist them
to repair any broken associations.
Solution 2: A better solution would be for the low-level
add-in to encode remapping information into the document
for transmission to the high-level add-in which would enact
any necessary substitutions. This could perhaps be achieved
by an intelligent low-level differ, but a more powerful option
is canvassed in Section X on Future Work.
C. PRISM Add-in
We have developed a .NET based PRISM add-in for
Word using Microsoft VisualStudio Tools for Ofﬁce (VSTO)
to automate MLSDoc processing within a standard “cre-
ation/load; edit; save” workﬂow. While the use of Mi-
crosoft’s COM XSLT processor appeared to be a natural ﬁt
for our needs, in practise it interfered with XML formatting
so we instead used XMLStarlet for our XSLT processor.
The PRISM Word add-in provides a “create new doc-
ument” dialog box that allows the user to create a new
MLSDoc. It also provides an “open existing document”
dialog box that allows the user to open an existing MLSDoc
container. In this case, the MLSDoc is assembled into a
Word 2003 WordprocessingML ﬁle and loaded. The add-
in then makes use of Word’s standard document protection
mechanisms to insert read-only tags throughout the docu-
ment to prevent accidental alteration of lower-level data,
which would be subsequently rejected by the TCB.
A “save document as” dialog box is also provided, which
intercepts document save operations to ﬁrst carry out the
following transformations: deletion of any problematic XML
entities; re-ordering attributes into a canonical alphanumeric
ordering; XDL diffgram generation by comparison with the
original assembled document; and MLSDiff patch genera-
tion from this XDL diffgram.
Following this the xferd process described in Section V
sends the MLSDiff patch to the TCB for veriﬁcation, patch-
ing and redistribution. The Word add-in meanwhile monitors
the ﬁle system so that it can reload the updated MLSDoc
when it is received from the TCB in response to this, or
changes from another security level.
VII. A SEAMLESS USER EXPERIENCE
By judiciously restricting how the user can interact with
the system it is possible to make multiple SLS instantiations
of a COTS application appear to behave as a single MLS
instantiation,
thus delivering a seamless user experience
almost indistinguishable from native MLS. Although we
demonstrate this in the context of using Microsoft Word to
edit an MLSDoc on an Annex Minisec platform, our method
is also suitable for integrating other COTS applications
that have been replicated inside a separation kernel or
virtualisation based isolation environment.
As introduced in Section II,
the Minisec’s TCB me-
diates each MILS partition’s access to a display, mouse
and keyboard. In its current version, Minisec3, the TCB
instantiates three minimal VNC [17] clients in separate An-
nex OCRM objects, each connecting through the Minisec’s
labelled networking mechanism to a VNC server running
in a different hardware isolated MILS partition. Each VNC
client interacts with a separate, dedicated TCB-virtualised
frame-buffer, mouse and keyboard, only one set of which
is synced through to the real underlying hardware at any
point in time, depending on the state of the Minisec’s trusted
buttons. These LED-lit push-button switches, one per MILS
partition, provide a simple and secure means for the user to
unambiguously identify and/or alter the active partition with
which they wish to interact.
Coupled with our PRISM architecture,
the Minisec’s
secure KVM-like functionality provides an excellent basis
for providing a seamless, MLS-like user experience. Figure 6
demonstrates this seamlessness in the context of editing a
Microsoft Word document in a national security classiﬁed
environment; the three separate sub-ﬁgures show the view of
a single document being edited at Unclassiﬁed, Secret and
Top Secret respectively.
A. Automatic sync-and-switch
We have extended a Minisec user’s ability to switch be-
tween partitions using a trusted button by ﬁrst performing a
synchronisation step when they “double-press”. This causes
the the TCB to send a message initiating a document-save
in the original partition; switch the keyboard, mouse and
video as normal; and – when in convenience mode or when
changing to a higher level in paranoid mode – send another
message causing the document to be reloaded in the newly
active partition. Ideally the cursor would be repositioned so
that the user can continue editing either at or near where
they left off, although we have not yet implemented this
additional functionality.
Furthermore, by carefully pre-arranging a consistent win-
dow geometry between partitions – for example by using
Figure 6. Unclassiﬁed, Secret and Top Secret views of an MLS Word
document being edited in paranoid mode.
full-screen operation – switching security levels appears to
simply refresh which data is currently visible to the user. All
other user interface elements remain essentially intact and
consistent. In addition, though, our untrusted PRISM add-in
also applies thematic window colourisations (in sync with
289
the TCB lighting the appropriate trusted button) to help the
user quickly identify the new security level at which they
are now operating.
Our untrusted add-in also makes use of Word’s built-
in document protection methods to mark any text at the
current classiﬁcation read/write, while other sections are
marked read-only. Word highlights the read/write sections in
yellow, which clearly identiﬁes the at-level sections to the
user and helps them only edit those parts of the document
that the TCB-enforced BLP security policy veriﬁcation step
will allow them to change.
These various indicators greatly decrease the cognitive
load placed on a user when switching domains, allowing
them to ﬂit effortlessly between security levels with simply
the (double) press of a button.
B. MLS copy-and-paste
The VNC protocol’s cuttext message type [17] provides
a simple mechanism for sharing clipboard buffer contents
between an untrusted VNC server and its corresponding
VNC client. We used this to provide MLS copy-and-paste
between MILS partitions by developing an OCRM-protected
communication channel that permits BLP information ﬂow
between each VNC instance’s clipboard.
After an object is copied into a VNC server’s clipboard
and received by the corresponding VNC client, the TCB
automatically copies the clipboard contents to all higher-
level VNC clients and hence to the VNC servers in the
corresponding MILS partitions. The user can then switch to
any higher-level partition and paste the updated clipboard
contents into any supported application. This provides a
highly convenient and intuitive mechanism for regrading
content and sharing it between unmodiﬁed COTS applica-
tions running at different security levels.
We have also developed an OCRM based downgrade
application, shown in Figure 7, that allows a user to view text
based clipboard contents in a trusted, TCB-hosted viewer
and manually regrade the content to a lower level.
This ﬁgure shows a user downgrading a fragment of secret
text (from Figure 6) to unclassiﬁed, so that it may be pasted
from the MLS clipboard into an unclassiﬁed document.
C. MLS Filing System
To help the users organise their MLS ﬁles, the mlsfs
module introduced in Section V manages several names-
paces to provide users with a secure and intuitive view of
where ﬁles originated and what higher levels of data have
been added to them.
To minimise user confusion, we aimed to provide a syn-
chronised namespace for all ﬁles across all levels. However,
in order to prevent ﬁlenames from being used as a covert
channel our TCB-enforced security policy insists that ﬁle
creation (or renaming) may only take place at the lowest
security level at which that ﬁle will exist. Lower levels
Figure 7. A trusted application facillitating user review and downgrade
of textual copy-and-paste information.
should remain oblivious of such a ﬁle’s existence, and
higher-level partitions may only embed further data content
within the ﬁle. These conditions resonate well with a BLP
security model with strong tranquillity and our requirement
that “the root object be at the lowest security level of the
document” from Section III.
With these restrictions in mind, mlsfs polyinstantiates
lower-level directory trees upwards to higher levels. For an
unclassiﬁed partition this results in a single directory tree,
tree1 rooted like this:
/mls/unclassified/ (data:rw, namespace:rw)
The view from a secret-level partition contains two trees:
/mls/unclassified..secret/ (data:rw, namespace:ro)
/mls/secret/ (data:rw, namespace:rw)
where tree1 is a polyinstantiation of the unclassiﬁed
tree. The root path unclassified..secret indicates
that the namespace is maintained by the unclassified
partition (and is hence read-only at this level), but that the
ﬁles may contain additional content ranging up to secret.
This arrangement permits MLS documents containing un-
classiﬁed information to include secret-level content. The
second tree, tree2 provides a mechanism for creating ﬁles
containing a minimum of secret-level data, and whose very
existence is even kept secret from lower levels.
The view from a top secret partition is similarly con-
structed:
/mls/unclassified..topsecret/ (data:rw, ns:ro)
/mls/secret..topsecret/ (data:rw, ns:ro)