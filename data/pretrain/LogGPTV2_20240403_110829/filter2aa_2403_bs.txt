jalr     
$t9 
; increment "i":                 
addiu    
$s0, 1 
lw       
$gp, 0x80+var_70($sp) 
; jump to loop body if end is not reached: 
bne      
$s0, $s2, loc_54 
; move memory pointer to the next 32-bit word: 
addiu    
$s1, 4 
; function epilogue 
lw       
$ra, 0x80+var_4($sp) 
move     
$v0, $zero 
lw       
$s3, 0x80+var_8($sp) 
lw       
$s2, 0x80+var_C($sp) 
lw       
$s1, 0x80+var_10($sp) 
lw       
$s0, 0x80+var_14($sp) 
jr       
$ra 
addiu    
$sp, 0x80 
$LC0:            .ascii "a[%d]=%d\n"   # DATA XREF: main+44 
编译器对第一个循环使用了代入的技术对变量之进行了等效处理。在第一个循环的循环体中，数组元
素的值（$V0 的值）是控制变量 i 的 2 倍，即 i×2，所以在每次迭代后控制变量的增量都是 2。另外，数组
元素的地址增量为 4，编译器单独分配了$V1 寄存器给这个指针使用，也令其增量为 4。 
第二个循环体根据数组索引值 i、通过 printf()函数依次输出数组元素。编译器首先使用$S0 寄存器存储
索引值，$S0 在每次迭代中的增量为 1。与前一个循环体相似，它单独使用$S1 寄存器存储内存地址，并使
其在迭代间的增量为 4。 
这便是本书第 39 章中会提到的循环优化技术。通过这种技术，编译器可尽量避免效率较低的乘法
运算。 
18.2 缓冲区溢出 
18.2.1 读取数组边界以外的内容 
综上所述，编译器借助索引 index、以 array[index]的形式表示数组。若仔细审查二进制程序的代码，
那么您可能会发现程序并没有对数组进行边界检查、没有判断索引是否在 20 以内。那么，如果程序访问数
组边界以外的数据，又会发生什么情况？C/C++编译器确实不会进行边界检查，这也是它备受争议之处。 
编译、并运行下面的程序，会发现整个过程中不会遇到错误提示。 
#include  
int main()  
{ 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
230 
逆向工程权威指南（上册） 
  int a[20]; 
  int i; 
  for (i=0; i 
int main()  
{ 
  int a[20]; 
  int i; 
  for (i=0; i // GCC 
#else 
#include  // MSVC 
#endif 
#include  
void f() 
{ 
    char *buf=(char*)alloca (600); 
#ifdef __GNUC__ 
    snprintf (buf, 600, "hi! %d, %d, %d\n", 1, 2, 3); // GCC 
#else 
    _snprintf (buf, 600, "hi! %d, %d, %d\n", 1, 2, 3); // MSVC 
#endif 
    puts (buf); 
}; 
即使不指定任何参数，默认情况下 GCC 4.7.3 也会在代码里加入百灵鸟。 
经 GCC 4.7.3 编译前面的程序可得到如下所示的指令。 
指令清单 18.7  GCC4.7.3 
.LC0: 
  .string "hi! %d, %d, %d\n" 
f: 
  push    ebp 
  mov     ebp, esp 
  push    ebx 
  sub     esp, 676 
  lea     ebx, [esp+39] 