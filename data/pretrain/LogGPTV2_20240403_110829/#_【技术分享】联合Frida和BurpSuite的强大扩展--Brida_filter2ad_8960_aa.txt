# 【技术分享】联合Frida和BurpSuite的强大扩展--Brida
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：[for_while](http://bobao.360.cn/member/contribute?uid=2553709124)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**插件介绍**
在测试一些应用的时候（以移动端为例），会经常发现客户端和服务端的通讯数据是加密过的，在这种情况下，我们如果想继续测试下去，就得去逆向程序中使用的加密算法，然后写程序实现它，然后在后续测试中使用它。这种方式需要耗费大量的时间和精力。而
[Brida ](https://github.com/federicodotta/Brida)这款插件的出现简直天降神器。Frida 是一款多平台的
hook框架， 其具体功能请看官网： 。
Brida使用了 frida的功能，并且和 BurpSuite结合，可以在 BurpSuite中 **直接调用目标应用程序中的加/解密函数**
，而不用去逆向它，节省精力。
**插件安装**
安装 python 2.7 和 Pyro4 模块（可以使用 pip安装：pip install pyro4 ）
下载
[Brida_01.jar](https://github.com/federicodotta/Brida/releases/download/v0.1/Brida_01.jar),
并在 BurpSuite 中手动安装该 jar 包
Tips： **插件安装，使用过程中出现了问题请查看插件的错误日志**
**插件测试**
为了测试该插件，写了个安卓的apk, 使用 Java实现了一个 Encryption类用于对数据进行 AES加密和解密。该类的代码如下：
    import java.security.SecureRandom;
    import javax.crypto.Cipher;
    import javax.crypto.KeyGenerator;
    import javax.crypto.SecretKey;
    import javax.crypto.spec.IvParameterSpec;
    import javax.crypto.spec.SecretKeySpec;
    /**
     * Created by Administrator on 2017/7/30.
     */
    public class Encryption {
        private final static String HEX = "0123456789ABCDEF";
        private  static final String CBC_PKCS5_PADDING = "AES/CBC/PKCS5Padding";//AES是加密方式 CBC是工作模式 PKCS5Padding是填充模式
        private  static final String AES = "AES";//AES 加密
        private  static final String  SHA1PRNG="SHA1PRNG";//// SHA1PRNG 强随机种子算法, 要区别4.2以上版本的调用方法
        /*
         * 加密
         */
        public static String encrypt(String key, String cleartext) {
            if (cleartext.isEmpty()) {
                return cleartext;
            }
            try {
                byte[] result = encrypt(key, cleartext.getBytes());
                return bytesToHexString(result);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
       /*
        * 加密
        */
        private static byte[] encrypt(String key, byte[] clear) throws Exception {
            byte[] raw = getRawKey(key.getBytes());
            SecretKeySpec skeySpec = new SecretKeySpec(raw, AES);
            Cipher cipher = Cipher.getInstance(CBC_PKCS5_PADDING);
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, new IvParameterSpec(new byte[cipher.getBlockSize()]));
            byte[] encrypted = cipher.doFinal(clear);
            return encrypted;
        }
        /*
         * 解密
         */
        public static String decrypt(String key, String encrypted) {
            if (encrypted.isEmpty()) {
                return encrypted;
            }
            try {
                byte[] enc = hexStringToBytes(encrypted);
                byte[] result = decrypt(key, enc);
                return new String(result);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
         /*
         * 解密
         */
        private static byte[] decrypt(String key, byte[] encrypted) throws Exception {
            byte[] raw = getRawKey(key.getBytes());
            SecretKeySpec skeySpec = new SecretKeySpec(raw, AES);
            Cipher cipher = Cipher.getInstance(CBC_PKCS5_PADDING);
            cipher.init(Cipher.DECRYPT_MODE, skeySpec, new IvParameterSpec(new byte[cipher.getBlockSize()]));
            byte[] decrypted = cipher.doFinal(encrypted);
            return decrypted;
        }
        /**
         * Convert byte[] to hex string.这里我们可以将byte转换成int，然后利用Integer.toHexString(int)来转换成16进制字符串。
         * @param src byte[] data
         * @return hex string
         */
        public static String bytesToHexString(byte[] src){
            StringBuilder stringBuilder = new StringBuilder("");
            if (src == null || src.length = 17) {
                sr = SecureRandom.getInstance(SHA1PRNG, "Crypto");
            } else {
                sr = SecureRandom.getInstance(SHA1PRNG);
            }
            // for Java
            // secureRandom = SecureRandom.getInstance(SHA1PRNG);
            sr.setSeed(seed);
            kgen.init(128, sr); //256 bits or 128 bits,192bits
            //AES中128位密钥版本有10个加密循环，192比特密钥版本有12个加密循环，256比特密钥版本则有14个加密循环。
            SecretKey skey = kgen.generateKey();
            byte[] raw = skey.getEncoded();
            return raw;
        }
    }
Encryption.encrypt(key, str) 用于对str, 使用 key进行 aes加密，Encryption.decrypt(key,
str)则用于解密。他们均返回处理后的字符串。为了模拟在安全测试中的场景，我会在burp中使用 Brida插件 调用 Encryption.encrypt
进行加密， 调用Encryption.decrypt 进行解密。
正常情况下，进入插件的界面如下：
其实最重要的就是 Frida
js文件的内容了。下面给一个官方的[例子](https://github.com/federicodotta/Brida/blob/master/jsSkeleton/scriptBrida.js)
    'use strict';
    // 1 - FRIDA EXPORTS
    rpc.exports = {
    	// BE CAREFUL: Do not use uppercase characters in exported function name (automatically converted lowercase by Pyro)
    	exportedfunction: function() {
    		// Do stuff...	
    		// This functions can be called from custom plugins or from Brida "Execute method" dedicated tab
    	},
    	// Function executed when executed Brida contextual menu option 1.
    	// Input is passed from Brida encoded in ASCII HEX and must be returned in ASCII HEX (because Brida will decode the output
    	// from ASCII HEX). Use auxiliary functions for the conversions.
    	contextcustom1: function(message) {
    		return "6566";
    	},
    	// Function executed when executed Brida contextual menu option 2.
    	// Input is passed from Brida encoded in ASCII HEX and must be returned in ASCII HEX (because Brida will decode the output
    	// from ASCII HEX). Use auxiliary functions for the conversions.
    	contextcustom2: function(message) {
    		return "6768";
    	},
    	// Function executed when executed Brida contextual menu option 3.
    	// Input is passed from Brida encoded in ASCII HEX and must be returned in ASCII HEX (because Brida will decode the output