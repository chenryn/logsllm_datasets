目前PG已支持大多数NODE的多核并行，例如SEQ SCAN，INDEX SCAN，HASH AGG，SORT等。将来会支持更多的NODE。  
比如将要支持 APPEND 并行，那么多个分区表(或者多个继承表、多个外部表、以及union查询)都可以并行扫描，理论上这个FEATURE加上后，性能和开源版本Greenplum应该可以对齐。    
同时还需要提供一种绕过OS PAGE CACHE的数据扫描方法，比如DIO，在OLAP场景会非常有用。（例如突然发起一个大量数据的查询请求，不至于把CACHE打乱。）     
#### 4、列存储  
目前PG内置的是行存储，要支持列存储，可以安装列存储插件，例如IMCS插件，CSTORE插件。  
使用列存储，可以提升数据压缩比，同时降低列统计时的数据扫描量和deform开销，提升列统计性能，以及更好的支持向量计算（目前VOPS向量计算通过新增数据类型，批量瓦片式存储来实现，比较别扭）等。  
列存插件如下：  
https://github.com/knizhnik/imcs  
https://github.com/citusdata/cstore_fdw  
期待未来的PG版本可以支持列存储。  
#### 5、hll  
通过hhl插件，可以支持一些估值统计的问题，在用户允许一些误差的情况下，高效率的实现实时的PV,UV等查询需求。例如实时查询APP的uv TOP 10。  
hll的插件如下：  
https://github.com/citusdata/cstore_fdw  
#### 6、GPU  
CPU的计算能力有限，通过GPU可以大幅提升OLAP的性能。pg-strom是一个利用PostgreSQL scan api和GPU实现的OLAP加速插件。  
https://github.com/pg-strom/devel  
![pic](../201705/20170526_01_pic_029.png)  
JOIN几十张大表毫无压力。  
#### 7、读写分离  
通过流复制，可以创建PostgreSQL的备库，WAL延迟接近于0。提升数据库集群整体的处理能力。  
#### 8、流计算  
pipelinedb是基于PostgreSQL开发的一个流计算数据库，正在进行插件化，将来可以作为插件安装到PostgreSQL数据库中。  
使用流计算，可以将大量的计算任务分摊到全天，从而减少集中计算的运力需求。集中计算就好像春节放假，大量的人群流动。而流计算就好比城镇化崛起，大家都不外出打工，都在家附近发展，杜绝了节假日的大迁徙。  
[《流计算风云再起 - PostgreSQL携PipelineDB力挺IoT》](../201612/20161220_01.md)    
#### 9、冷热存储分离  
阿里云的RDS PG与云对象存储OSS无缝结合，实现了数据的分层存储。  
https://help.aliyun.com/document_detail/44461.html  
存放于OSS的数据，通过OSS_FDW插件，使用外部表进行访问，用户访问PG外部表和访问本地表的SQL语法完全一样，无需修改应用。  
存放于OSS的数据，用户不需要对其进行备份因为OSS本身就是多副本存储。从而减轻了数据库备份的开销和成本。  
使用OSS，PG实际上相当于实现了无限容量的存储，拓展了单个数据库的存储边界。  
存放于OSS的数据，不仅可以给一个PG实例使用，同时还可以给多个实例同时使用，例如可以创建一个RDS实例，对接OSS上的数据，分析师就可以在上面进行分析而不需要消耗在线数据库的资源。  
#### 10、类rac架构  
这个架构最早由亚马逊Aurora提出，目前已经推出了PG的Aurora版本。  
和Oracle RAC一样，都使用共享存储的架构，差别仅仅在于一写多读，Oracle是多写多读。  
存储为多副本的设计，可以实现跨可用区的多副本一致性，从而解决了HA、容灾层面的问题，使用一写多读，还解决了读性能扩展的问题。  
结合PostgreSQL本身的功能、性能等特性，aurora架构让PG可以覆盖更多的企业场景。  
相信会有更多的公司会跟进这样的架构。  
#### 11、mpp或sharding  
不推荐sharding，因为要牺牲一些功能层面的特性。但是不妨碍社区为了某些特定场景而推出的一些sharding插件。  
例如citus插件，自带节点间数据传输，JOIN，透明的数据重分布功能。可以很好的支撑OLAP的横向扩展能力。  
https://github.com/citusdata/citus  
例如TP方面的sharding，基于fdw的sharding，可以解决TP的横向扩展需求。  
[《PostgreSQL 10.0 preview sharding增强 - 支持分布式事务》](../201703/20170331_03.md)    
[《PostgreSQL 10.0 preview sharding增强 - pushdown 增强》](../201703/20170312_20.md)    
[《PostgreSQL 10.0 preview sharding增强 - 支持Append节点并行》](../201703/20170312_11.md)    
[《PostgreSQL 10.0 preview sharding增强 - postgres_fdw 多节点异步并行执行》](../201703/20170312_07.md)    
[《PostgreSQL 9.6 sharding based on FDW & pg_pathman》](../201610/20161027_01.md)    
[《PostgreSQL 9.6 sharding + 单元化 (based on postgres_fdw) 最佳实践 - 通用水平分库场景设计与实践》](../201610/20161005_01.md)    
[《PostgreSQL 9.6 单元化,sharding (based on postgres_fdw) - 内核层支持前传》](../201610/20161004_01.md)    
#### 12、OLAP SQL兼容性
PostgreSQL在OLAP SQL兼容性方面的支持是非常完备的，包括多维分析(grouping sets,cube,rollup,grouping等)，递归查询，窗口查询，多表JOIN，科学计算，机器学习函数 等等。    
## PostgreSQL vs Oracle 架构对比  
### 比Oracle强的点  
开源软件强大之处在于发展非常的迅速，非常的开放。同时PostgreSQL这个产品本身的开源许可、设计很契合开发者，开放了大量的可扩展接口，因此我们可以看到PostgreSQL生态中有特别多的插件，满足各种场景的需求。  
相比Oracle，PG有哪些优势？  
1、云生态融合，例如OSS_FDW，就是一个数据库和对象存储融合的例子。  
2、软件生态融合，例如PL语言，用户可以通过plpython, plR, plCUDA等语言开发存储过程，融合开发者的软件生态。  
3、硬件生态融合，例如与GPU结合，让PG拥有更加强大的计算能力。  
4、可扩展，通过开放的数据、索引、扫描、操作符、UDF等接口，可以支持更多的用户场景。  
比如图像特征值的存储和搜索，通过扩展就能支持，imgsmlr这个插件就是一个代表。  
比如基因数据的存储和搜索，通过扩展就能支持，PostBIS这个插件就是一个代表。  
比如化学数据的存储和搜索，rdkit。  
机器学习插件，madlib。  
GIS插件，PostGIS。  
时序数据插件，timescaledb。  
hll估值插件。  
5、流计算，通过pipelineDB(正在插件化，将来可以作为PG的插件使用)，可以实现流式计算。  
6、MPP，通过citus插件，可以实现MPP，多机并行计算。   
(未来如果实现单实例内部的MPP架构，单实例的OLAP性能可能会更好。)     
7、llvm, 向量计算等优化手段，在OLAP方面有非常大的性能提升。  
### 需要向Oracle学习的点  
1、类RAC架构，(Aurora PostgreSQL和这种形态非常类似，而且存储层做得更加强大)。  
2、类AWR的性能诊断工具。   
3、内置的任务调度功能，目前通过pgagent插件来实现。  
## 未来的发展方向  
[《数据库的未来 - HTAP，软件、硬件、云生态的融合》](../201705/20170526_01.md)    
## 小结  
现如今已不是商业数据库独舞，越来越多的开源产品在崛起，从稳定性、性能、功能各个方面包围商业产品，PostgreSQL 是一个非常典型的代表。  
扛起100TB，日增量1TB 级别这个市场的OLTP+OLAP混合场景HTAP的大旗，PostgreSQL 值得拥有。  
同时，在云上，用户不再需要担心运维、高可用、备份、扩容、迁移、诊断、监控等问题，用户只管用，云为用户提供贴身服务。云上的PG提供了更多的扩展（包括 与对象存储的无缝结合，内核的优化，增值服务，类RAC架构(越来越多的厂商会跟进aurora形态)等）。    
![pic](20170703_01_pic_006.jpg)     
如果用户不想使用云服务，没有关系，在不改内核的情况下，你依旧可以使用目前社区版本提供的这些特性，来满足你的需求（包括流计算、HLL、读写分离、JIT、向量计算、列存储等）。    
## 参考  
[《数据库界的华山论剑 tpc.org》](../201701/20170125_01.md)    
[《数据库的未来 - HTAP，软件、硬件、云生态的融合》](../201705/20170526_01.md)    
[《PostgreSQL 向量化执行插件(瓦片式实现) 10x提速OLAP》](../201702/20170225_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")