that make them particularly difficult to harden in order to gain
insight into how to harden/improve existing defenses. Note that
with these 6 CFI policies we still can successfully generate exploits
in 77% (60 out a total of 78 of the cases whereas with no CFI policy
deployed the exploit construction succeeds in 100% of the cases
(see the second column of Table 6).
A higher success rate is, of course, possible by using a larger
timeout. We support this statement with our experimental obser-
vations, which confirm that the payload generation success rate
improves by increasing the imposed analysis timeout. Further, with-
out applying any policy, all payloads could be generated. In case
no payload was generated, this was mainly due to the fact that the
required gadgets were not available. Further note that, in case iTOP
times out, a valid payload might still exist, while, when a required
gadget is not available, no payload exists.
Important to note is that IFCC and IFCC-safe (introduced by
Tice et al. [47]) are policies enforcing correct parameter counts for
calltargets. We found that most payloads could still be built under
these CFI policies, since both arbitrary memory reads/writes and
6Video: spawning a system shell, VTint [52] in-place: https://tinyurl.com/yyrso75k
calling of arbitrary functions are still possible. VTint allows only
calltargets in any virtual table, eliminating all non-virtual calltar-
gets. While VTint offers more protection than IFCC, some realistic
payloads could not be eliminated, and spawning a shell remains pos-
sible. The VTV, Marx and ShrinkWrap policies enforce class hierar-
chies, allowing almost exclusively intended calltargets to be reached
from a dispatcher. iTOP could not generate a payload under VTV in
4 cases, Marx in 3 cases and ShrinkWrap in 3 cases given the preset
time limit as these are very strong CFI policies. Note that this is not
a strong limitation of our approach and we think that on other pro-
grams and by increasing the timeout new attacks can be generated.
6.3 Stopping Attacks: NodeJS Case Study
In this section, we investigate attack probabilities under various
calltarget reduction and gadget usability scenarios.
PA(fr ed) = 1 − (1 − PG)(|F |∗fr ed)
(2)
To understand how we calculated the attack probability, we
use Equation 2 to calculate the probability PA of whether an attack
exists under the assumption of independence. This is a reasonable
assumption as all CFI defenses target calltargets that can be only
functions. The attack surface reduction factor fr ed refers to the
reduction of calltargets for the dispatcher with the highest remain-
ing calltarget count. Using the values from the analysis of NodeJS
and gadget usability probability of PG = 0.001, we determine that
a 85% attack surface reduction has a 50% probability of stopping
attacks, and 99.98% reduction resulting in a less than 1% probability
of an attack still existing. This does not prove that the defenses are
bullet-proof but rather that the attack crafting likelihood is greatly
reduced. This estimation matches our evaluation results: for IFCC,
a policy providing 85% attack surface reduction, two payload gen-
eration timed out, while for ShrinkWrap, a policy providing 99.4%
reduction, in 3 cases no payloads were generated.
Figure 6: Probability of attack PA with attack surface fr ed .
To show how the attack probabilities vary depending on the
probability of gadget usability we introduce Figure 6 which shows
the estimated probability of an attack still being possible w.r.t. attack
surface reduction for different values of PG. We can estimate how
11
Table 7: Results for several vulnerable programs. Time: Time needed to load the binary and to analyze all its dispatchers.
Dispatchers: Number of usable dispatchers found per category. Gadgets: Number of candidate gadgets found for each category;
ML: Mainloop dispatcher gadget, LS: LinkedList dispatcher gadget, REC: Recursive dispatcher gadget.
Vulnerable Application
Vulnerability
Program
Nginx
CVE-2013-2028
Apache Httpd CVE-2006-3747
LibTorrent
Redis
NodeJS
Chromium
Firefox
library
CVE-2018-11218
CVE-2014-5256
CVE-2017-7000
CVE-2018-5150
Functions
1,192
1,917
2,002
1,996
41,189
145,206
201,741
Gadgets
COOP Gadget
Time
(m:s) ML LS REC READ LOAD WRITE EXECUTE
743
00:13
730
00:08
00:11
1,123
1,511
00:12
23,309
03:27
89,956
11:53
10:36
118,764
256
399
340
647
11,249
33,515
120,702
176
210
272
266
6,730
17,009
57,936
107
66
55
137
3,804
16,100
43,649
0
0
0
0
7
25
1
3
0
0
0
24
67
59
3
3
27
2
1,025
1,137
1,653
Table 8: ESL payloads applied to a variety of programs. ✓: iTOP generated one or more payloads; no payload was be generated,
due to (a)(cid:28): timeout or (b) ✗: gadget was not available. Note that within this experiment no CFI policy was used, as we wanted
to find out how iTOP performs under real-world scenarios where most of the time programs are not protected by CFI policies.
Program
regset
Nginx
✓
Apache Httpd ✓
LibTorrent
✓
Redis
✓
NodeJS
✓
Chromium
✓
Firefox
✓
memrd
✓
✓
✗
✗
✓
✓
✓
memwrt
✗
✗
✗
✗
✓
✓
✓
regadd
✓
✗
✗
✗
✓
✓
✓
printf
✓
✓
✓
✓
✓
✓
✓
shell
✓
✓
✓
✓
✓
✓
✓
iloop
✓
✗
✗
✗
✓
✓
✓
cond
✗
✗
✗
✗
✓
✓
✓
for
✗
✗
✗
✗
✓
✓
✓
cshell
✗
✗
✗
✗
✓
✓
✓
count
✗
✗
✗
✗
✓
✓
✓
mprt
✓
(cid:28)
(cid:28)
(cid:28)
✓
✓
✓
env
✓
✓
✓
✓
✓
✓
✓
much attack surface reduction a CFI policy has to provide to effec-
tively prevent CRA. The data gathered by iTOP indicates that, with
no CFI policy applied, 25 functions out of the 41,189 targets were us-
able to call arbitrary functions with arbitrary values in the first argu-
ment register, without depending on any prior register initialization.
With, for example, the IFCC CFI policy deployed, 7 out of the 5,588
were usable out of the box, while with the VTint policy 4 out of 5,852
functions were usable. While these figures fluctuate and strongly
depend on the applied policy, the ratio of usable gadgets to all calltar-
gets usually ends up between 0.2% and 0.05%. Reducing the number
of usable gadgets to zero stops all attacks on the target application,
as no valid gadget chain can be built without any gadget available.
Lastly, to reproduce how we derived Equation 2 used in this
section note that by using the previously mentioned information,
a probability of 0.0005 ≤ PG ≤ 0.002 of a usable gadget exist-
ing is estimated, which, combined with the number of calltargets,
|F| = 41, 189, and the attack surface reduction factor, fr ed.
6.4 General Results
In this section, rather then looking for successful exploitation under
different CFI policies, we want to find out the time and number of
gadgets needed to generate different payloads when using iTOP as
these are the first steps towards successful exploit generation. Note
that the aim of this section is not to confirm/show that exploits
can be built for known vulnerable programs but rather to present
a fully new and automated way to generate new exploits based on
existing documented vulnerable programs. To achieve this goal, we
12
evaluated iTOP by targeting six widely used programs. Most of the
evaluated programs contain a CVE corresponding to an arbitrary
memory write, fulfilling the requirements specified in our threat
model. Lastly, note that we had access to a program information
leakage which provided us with an arbitrary read as required in
our threat model.
To illustrate how many COOP gadgets and ESL primitives were
found for different vulnerable programs we use Table 7 which de-
picts the results for each of the six target applications. Further, Ta-
ble 7 includes the total number of potential target functions the ap-
plication contains and detailed statistics on the availability of each
gadget and dispatcher type. Note that the LibTorrent program is
the only program without a CVE listed as it is a library used in a
variety of other potentially vulnerable applications. Further, note
that generating the candidate dispatcher and gadget sets is a time-
consuming process, but the results can be reused to generate multi-
ple attacks. iTOP caches these results to a file and reloads them for
further searches, eliminating the startup overhead listed in Table 7.
In order to show how successful iTOP is in generating exploits
based on the ESL’s 13 attack primitives we use Table 8 which depicts
the attempts of iTOP to generate an exploits for the payloads listed
in Table 4 for each vulnerable application. Thus, iTOP was able, for
example, to generate a payload in 60/91 cases (66% success rate,
60/91). Note that the most interesting payload to an attacker, shell,
could be generated in seven out of seven cases. When excluding all
payloads which rely on control flow manipulation, iTOP generated
payloads in 44 out of 56 cases (79%). The main reasons for the failing
cases are either timeouts or the specific gadget is not available.
Along the successful and unsuccessfully attempts to generate
exploits for the ESL’s 13 primitives, Table 8 also shows that applica-
tions with larger target-sets yield significantly higher success rates,
because the variety of functions is much higher and thus the prob-
ability to find a function exactly matching the constraints is higher.
Payloads including conditionals and loops require a LINKEDLIST-
type dispatcher to function, because the control flow is modified by
rewriting the next item fields in linked lists. While other approaches
to dynamically alter exploit control flow are possible, we focus on
this approach because it can easily generate Turing complete ex-
ploits. Further, most of the C programs did not contain any usable
LINKEDLIST dispatchers, while all of the C++ programs did. In some
cases, iTOP was unable to find a payload. Generally, there are several