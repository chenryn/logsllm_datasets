tially  contaminated or not, respectively,  at the moment of 
timer expiration. Accordingly, we formulate the length of a 
blocking period as r ( b )  = b+2p4+Tm(b),  where b denotes 
the v a l u e o f d i r t y b i t ,  andT,(b)  = btmax-(1-b)t,in. 
Hence, with the adapted algorithm, the blocking period 
Table  1  contrasts  the  original  TB  protocol  with  the 
adapted version, in terms of the length of blocking periods, 
checkpoint contents,  types  of  messages blocked  during  a 
blocking period, and purpose of blocking. 
To  evaluate the advantages of the protocol-coordination 
approach  over  straight  extension  of  a  software  fault  tol- 
era.nce protocol  for handling  both  software and  hardware 
faults,  we  have  conducted  a  model-based  comparative 
study.  The  study  focuses  on  the  rollback  distance,  i.e., 
the: amount of  computation  quantified  in  time  units  (sec- 
onds), that  a  process  must  undo  due to  a  hardware  fault. 
In  particular,  we contrast the mean rollback distance  of  a 
process when the protocol-coordination scheme is applied 
(E[D,,]) with that when the write-through approach is used 
(E[D,,]). Figure 7 shows the quantitative results from one 
of the studies, which reveal that E[D,,] is significantly  less 
than  E[D,,].  The significant reduction is  due to  the fact 
that the protocol-coordination approach maximizes the like- 
lihood  that  a process will  roll  back  to  its most recent non- 
contaminated state when a hardware fault  occurs.  In con- 
trast,  with  the write-through approach, a process must roll 
back  to  the  checkpoint  that  is  equivalent to  the process’s 
most  recent Type-2 checkpoint which does not reflect  the 
376 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:44 UTC from IEEE Xplore.  Restrictions apply. 
most recent non-contaminated state.  Due to space limita- 
tions, we omit detailed discussion of the comparative study. 
1 0 0 0 0  
0 U 
ld 
U Ul 2  1000 
100 
10 
6 0  
KO 
100 
120 
140 
160 
180 
200 
Internal Message Rate 
Figure 7: Improvement of Rollback Distance 
‘ 
It  is  worth  noting  that  the  coordination  between  the 
MDCD  and  TB  protocols  can  be  enabled  or  disabled  in 
a  seamless fashion.  For  example,  when  this  approach is 
used  for  guarded  software upgrading,  after the  successful 
completion  of  an  onboard software  upgrade,  all  the  soft- 
ware components will be considered high-confidence com- 
ponents; accordingly, the MDCD protocol will go on leave, 
and each process’s d i r t y b i t  will have a constant value of 
zero.  This, in  turn, leads the adapted TB algorithm  shown 
in Figure 5 to become equivalent to its original version [4]. 
5  Concluding Remarks 
While research  efforts  often  focus  on  one technical  is- 
sue at a time,  a critical  application  in  real  life  usually  in- 
volves multiple  technical challenges in  fault tolerance and 
calls for effective and efficient approaches that tackle  var- 
ious problems with  a cohesive formulation.  Among other 
enabling-technology  integration issues,  simultaneous soft- 
ware and hardware fault tolerance in a distributed comput- 
ing environment poses a major challenge.  The effort pre- 
sented  in  this  paper  demonstrates  that  synergistic  coordi- 
nation between software and hardware fault tolerance tech- 
niques is a viable way to respond to this challenge. 
In  particular,  by  carrying  out  algorithm  modifications 
that  are  conducive  to  synergistic  coordination  between 
volatile-storage  and  stable-storage  checkpoint  establish- 
ments, we are able to circumvent potential interference be- 
tween the MDCD and TB protocols, and allow them to ef- 
fectively complement each other to extend a system’s fault 
tolerance  capability.  Moreover,  the  protocol-coordination 
approach preserves  and  enhances  the  features and  advan- 
tages of the individual protocols that participate in the coor- 
dination, keeping the performance cost low. 
Another  important  contribution  of  this  effort  is  that  it 
fosters the utilization of various state-of-the-art fault toler- 
ance techniques that are available to us for building afford- 
able,  highly  dependable distributed  systems.  Our current 
work is  directed  toward formally  validating  the  protocol- 
coordination approach, quantifying its benefits with respect 
to  both  dependability  enhancement and  performance cost 
reduction,  and  investigating  general  guidelines  for syner- 
gistic  coordination  between differing fault  tolerance tech- 
niques. 
Recently,  we  have  completed  the  first  version  of  the 
middleware (GSU Middleware) that implements the proto- 
type MDCD protocol. We plan to incorporate the protocol- 
coordination scheme described in this paper  into the GSU 
Middleware, to experimentally  assess  the  effectiveness  of 
the approach. 
References 
[ I ]   K. H. Kim, “The distributed recovery block scheme,” 
in Sofivare Fault Tolerance (M. R. Lyu, ed.), pp. 189- 
209, West Sussex, England: John Wiley & Sons, 1995. 
[2] M. Hecht, J. Agron, H. Hecht, and K. H. Kim, “A  dis- 
tributed  fault tolerant architecture for nuclear reactor 
and other critical process control applications,” in Di- 
gest  of  the  21st Annual International Symposium on 
Fault-Tolerant Computing, (Montreal, Canada), pp. 3- 
9, June 1991. 
[3]  A. T. Tai, K. S. Tso, L. Alkalai, S. N. Chau, and W. H. 
Sanders, “On low-cost  error containment and recov- 
ery methods for guarded software upgrading,” in Pro- 
ceedings of  the 20th International Conference on Dis- 
tributed  Computing Systenzs  (ICDCS 2000), (Taipei, 
Taiwan), pp. 548-555,  Apr. 2000. 
[4]  N. Neves and W. K. Fuchs, “Coordinated checkpoint- 
ing without direct coordination,” in Proceedings of  the 
3rd  IEEE  International Coniputer Performance  and 
Dependability Symposium, (Durham, NC), pp. 23-3  1, 
Sept. 1998. 
[5]  A. T. Tai, K. S. Tso, L. Alkalai, S. N. Chau, and W. H. 
Sanders,  “Low-cost error  containment  and  recovery 
for onboard guarded software upgrading and beyond,” 
(submitted for publication). 
[6]  J.-C.  Laprie,  J. Arlat,  C .  BCounes,  and  K.  Kanoun, 
“Definition  and  analysis  of  hardware-and-software 
fault-tolerant architectures,” IEEE Computer, vol. 23, 
pp. 39-5  1, July  1990. 
[7]  K.  M.  Chandy  and  L.  Lamport,  “Distributed  snap- 
shots:  Determining global  states  of  distributed  sys- 
tems,”  ACM  Transactions  on  Computer  Systems, 
vol. 3, pp. 63-75,  Feb.  1985. 
377 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:44 UTC from IEEE Xplore.  Restrictions apply. 
Y.-M. Wang, "Consistent global checkpoints that con- 
tain  a  given  set  of  local  checkpoints,"  IEEE  Trans. 
Computers, vol. 46, pp. 456468, Apr. 1997. 
A. T. Tai, K. S. Tso, L. Alkalai, S. N. Chau, and W. H. 
Sanders,  "On  the  effectiveness  of  a  message-driven 
confidence-driven  protocol  for  guarded  software up- 
grading," Performance  Evaluation, vol. 44, pp. 21 1- 
236, Apr. 2001. 
N. Neves and W. K. Fuchs, "Using time to improve the 
performance  of  coordinated checkpointing,"  in  Pro- 
the  IEEE  International  Computer  Per- 
ceedings  of 
formance. and  Dependability  Symposium,  (Urbana- 
Champaign, IL), pp. 282-29  1, Sept. 1996. 
[ 113  G. P.  Kavanaugh  and  W.  H.  Sanders,  "Performance 
analysis  of  two  time-based  coordinated  checkpoint- 
ing protocols," in Proceedings of  Pacijc Rim Interna- 
tional Symposium on Fault-Tolerant Systems, (Taipei, 
Taiwan), pp. 194-201,  Dec.  1997. 
A  Modified MDCD Algorithms 
if  (outgoing-message-m-ready) ( 
/ /  maintaining message SN 
rsg-SN-PTdW++; 
/ /   suppress and log the outgoing message 
rrisg-logging(m, msg-SN-PSdw, msg-log); 
1 
if  (incoming-message-queue-nonempty) { 
or ~2  reports a successful AT 
/ /   P ; ~ ~  
if  (m.body ==  "passed-AT") ( 
if  (m.Ndc ==  Ndc) ( 
VR;Ct  =  m.msg-SN;  / /   last valid msg of Pyct 
memory-reclamation(msg-log); 
dirty-bit  =  0; 
1 
j  else if  (not-in-blockingqeriod) ( 
/ /   application-purpose message from Pz 
if  (m.dirty-bit ==  1 & &   dirty-bit ==  0 )  ( 
checkpointing (Psd") ; 
dirty-bit =  1; 
} 
application-msg-reception(m); 
I 
Figure 9: Modified Error Containment Algorithm for Pid"" 
if  (outgoing-message-m-ready) { 
if  (external(m)) ( 
if  (dirty-bit ==  1 )  { 
if  (AT(m) ==  success) ( 
if  (outgoing-message-m-ready)  ( 
if  (external(m)) { 
if  (AT(m) ==  success) { 
pseudo-dirty-bit  =  0; 
/ /   maintaining message SN 
msg-SN-Pyt++ ; 
msg-sending(m, null, null, device); 
/ /   prior messages are valid 
msg-sending (  "passed-AT" ,  msg-SN-P:Ct,  Ndc , 
(P;dw, P2)); 
)  else ( 
error-recovery ( P;~", ~2 )  ; 
exit (error) ; 
1 
1  else (  / /   m is an internal message 
/ /   P y t r s  dirty bit always equals 1 
m =  append(m, dirty-bit); 
msg-SN-Pyt++ ; 
if  (pseudo-dirty-bit ==  0) ( 
checkpointing (PYct) ; 
pseudo-dirty-bit =  1; 
1 
msg-sending (m, msg-SN-P;Ct, Ndc, ~ 2 )  ; 
1 
if  (incoming-message-queue-nonempty) { 
if  (m.body ==  "passed-AT") 
if  (m.Ndc ==  Ndc) 
pseudo-dirty-bit  =  0; 
else if  (not-in-blockinggeriod) 
application-msg-reception(m)  ; 
1 
1 
dirty-bit =  0; 
msg-sending(m, null, null, device); 
msg-sending ( "passed-AT" ,  msg-SN-Pyt, Ndc , 
IPyt, PTd")) ; 
error-recovery ( psdw,  ~2 )  ; 
/ /   outgoing  m s g   f r o m   a  c l e a n   s t a t e  
msg-sending(m, null, device); 
)  else 
)  else { 
1 
}  else { 
/ /   piggyback dirty-bit on internal message 
m =  append(m, dirty-bit); 
msg-sending (m, null, N d c ,   {P:Ct,  PTd") )  ; 
1 
if  (incoming-message-queue-nonempty) ( 
/ /   must be from P7ct 
if  (m.body ==  "passed-AT") { 
if  (m.Ndc ==  Ndc) ( 
msg-SN-PTCt =  m.msg-SN; 
dirty-bit =  0; 
1 
1 
1  else if  (not-in-blocking-period)  i 
msg-SN-Pyt  =  m.msg-SN; 
if  (dirty-bit ==  0 )  { 
checkpointing (P2  ; 
dirty-bit =  1; 
1 
application-msg-reception(m); 
Figure 8: Modified Error Containment Algorithm for PTt 
} 
1 
Figure 10: Modified Error Containment Algorithm for P2 
378 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:44 UTC from IEEE Xplore.  Restrictions apply.