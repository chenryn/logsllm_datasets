(3) Take a snapshot of guest in this state.
(4) Reset the VM.
(5) Navigate browser to server1.
(6) Reset the VM.
(7) Navigate browser to server2.
For each VM manager OS combination, steps (1-3) were
performed once followed by 3 iterations of steps (4-7) for
each browser. For Chrome on Linux, we also ran a separate
test sequence where step (2) was changed to
(2a) Load the browser, navigate to an HTTPS url, and then
navigate to a blank page.
The results were consistent between the two VM man-
agers, meaning the VMM used had no impact on client be-
havior. For Firefox on Windows or Linux, the same PMS
was sent to both servers in all 3 trials. If the user caused 100
mouse events (e.g., moved the mouse 100 pixels) between
steps (4) and (5) or (6) and (7) then distinct PMS values
were sent to the servers. This is because Firefox folds new
entropy into the RNG every 100 mouse events. For Chrome
on Linux, when step (2a) was used then the same PMS was
sent to both servers in all 3 trials. When step (2) was used,
distinct PMS values were sent to the two servers.
On Windows, all browsers except Firefox always sent
distinct PMS values to both servers. We note however that
on Windows, the same PMS value was sent to the same
server in many of the trials. While this does not admit an ob-
vious attack, it violates the TLS speciﬁcation. For example,
on IE 6.0 and VMWare, 2 out of the 3 PMS values sent to
server1 were the same and 2 out of the 3 PMS values sent to
server2 were the same. We note that all the browser/VMM
combinations showed this problem; for Chrome in Win-
dows, it did not even matter whether or not step (2a) or (2)
was used.
3.2. TLS Server Vulnerabilities
We turn our attention to TLS servers. We target TLS
servers using authenticated Difﬁe-Hellman key exchange
when the digital signature scheme used is DSA. Ignor-
ing numerous (but not really relevant) details, the protocol
works as follows. The client sends a nonce of its choos-
ing to the server. The server chooses a random y, computes
gy, and uses DSA to sign gy together with session state in-
cluding the client nonce. Now, if the server uses the same
randomness to sign in two different sessions, an attacker
who knows the messages signed and sees the resulting sig-
natures can extract the server’s DSA signing key. This at-
tack is well-known; see Appendix A for details.
A VM reset vulnerability could therefore arise if running
a server multiple times from a snapshot led to the same ran-
domness being used by DSA. This situation would occur,
for example, if an HTTP server seeds its RNG at startup
and uses the RNG (without new seeding) to generate ran-
domness when handling a new connection. If a snapshot of
the server is taken after startup, then the RNG’s state would
be captured. Reuse of the snapshot could lead to the same
randomness being consumed by DSA.
If real, such attacks would be particularly threatening
TLS Client Guest OS
Firefox 3.5 Windows
Chrome 3.0 Windows
Windows
Safari 4.0 Windows
Ubuntu
Firefox 3.0
Chrome 4.0
Ubuntu
IE 6.0
Same PMS to diff. sites?
Same PMS to same site?
Comments
Always
Never
Never
Never
Always
Always
Always
Sometimes
Sometimes
Sometimes
Always
Always
Mouse moves < 100 pixels
-
-
-
Mouse moves < 100 pixels
Visit one HTTPS site before snapshot
Figure 1. Summary of our TLS client attacks. We performed all of the experiments on both VMWare
Server version 1.0.10 and VirtualBox version 3.0.12 and observed the same behavior. Ubuntu refers
to version 8.04 (Hardy) Desktop, Windows refers to XP Professional with Service Pack 2.
due to the ever-increasing use of virtualization to man-
age servers. For example, cloud computing services such
as EC2 (popular for hosting HTTP servers) utilize volume
snapshots to store customer server conﬁgurations for rapid
deployment. Progressing to full snapshots that include ac-
tive memory could make provisioning of VMs even faster.
In other settings, snapshots are often suggested as a simple
mechanism for fast server crash recovery.
We therefore investigate whether servers are vulnera-
ble. We focus on Apache using mod ssl, the most widely-
used HTTPS web server software. Below we describe how
Apache generates randomness and then experimentally val-
idate that, in fact, VM reset vulnerabilities can be exploited
by an attacker to extract a server’s DSA secret key.
The Apache + mod ssl RNG. Apache uses the OpenSSL
cryptographic library for its RNG and TLS implementation.
On Apache startup, the main process seeds the OpenSSL
RNG from various entropy sources. Which sources to use
can be speciﬁed in the Apache conﬁguration ﬁle. By de-
fault, Apache only uses time (seconds since the Epoch),
process ID, and a portion of the runtime stack to seed the
RNG; this is referred to as “built-in” in the conﬁguration
ﬁle. The OpenSSL RNG will also seed itself from a variety
of sources depending on how it is conﬁgured; these sources
usually include /dev/random or /dev/urandom on
Unix-based systems. Apache then forks off into child pro-
cesses that will actually handle the incoming HTTP and
HTTPS requests. At this point each child process has its
own copy of the now-initialized RNG state.
When an HTTPS request comes in, Apache assigns a
child process to handle it. Before handling the process, the
child adds more entropy to its RNG. Here what is added
again depends on the Apache conﬁguration, which by de-
fault is set to “built-in”, meaning only the time, process ID,
and some of the runtime stack are added to the RNG before
the request is handled. The nature of our attack is such that
only these new additions affect whether randomness will be
repeated between two reverts.
In other words, if we can
connect to a server twice run from the same snapshot and
the time, pid, and runtime stack are the same in both cases,
the server will use the same randomness for both sessions.
Experiments without Clock Synchronization. Because
time is added to the RNG, it is clear that the server’s clock
plays a crucial role in whether an attack could be success-
ful. Speciﬁcally, if the server resynchronizes its clock after
starting execution from a snapshot but before an adversary
can connect to it, then the RNG will never supply the same
value twice. Thus, as a ﬁrst step, we experiment with VMs
that do not perform guest clock synchronization.
We set up a default installation of an Ubuntu 8.04 Hardy
desktop guest OS inside VMWare Server. Here the guest
does not synchronize its clock.
(If one additionally in-
stalls VMWare Tools, which are guest utilities supplied
by VMWare, then the guest defaults to synchronizing its
clock.) On the guest, we also set up OpenSSL 0.9.8k and
the latest version of Apache web server with mpm-prefork
(i.e., unthreaded) and using the default conﬁguration. The
only changes we made to the conﬁguration ﬁle were to point
the server at a DSA key and certiﬁcate.
We then performed the following steps. We rebooted the
guest VM, started the web server, paused the VM, and took
a snapshot. Then we repeatedly attempted to start the VM
from the snapshot and have a client connect to the server
at exactly the same time (as read on the guest’s clock). We
did this by setting a client machine physically next to the
server’s host machine, and having one person watch for the
clock on the guest VM to tick to the next minute after the
snapshot was taken. Immediately, that person executed the
openssl s_client command on the client machine to
initiate a DSA-authenticated key exchange with the server.
Somewhat surprisingly, this worked. The randomness
used by the server was repeated. We observed repeated ses-
sion IDs (generated using the RNG), and repetitions of the
randomness used to sign with DSA. We tried many more
times with similar success. Apparently the same child PID
and stack contents were used each time to generate the ran-
domness, and it was easy for the single operator to get the
timing right.
VMM
Time Sync Restart?
# Session ID pairs
# DSA extract pairs
1 VMWare
2 VMWare
3
4
5 VMWare
6 VMWare
VBox
VBox
no
no
yes
yes
yes
yes
no
yes
no
yes
no
yes
6/10
3/10
10/10
10/10
0/10
4/10
6/10
1/10
10/10
10/10
0/10
3/10
Figure 2. Summary of Server attacks. Each row corresponds to ﬁve trials. The second(cid:173)to(cid:173)last
column reﬂects how many pairs of trials (out of a possible ten) contained sessions using the same
session IDs. The last column reﬂects how many pairs of trials contained sessions using the same
randomness for DSA signing.
Our next step was to try to automate the attack to see if
it would work remotely. We worked under the assumption
that after a reset, the VM would usually take about the same
amount of time to start servicing HTTPS requests. Thus,
our attack strategy was to repeatedly attempt to connect to
the server (starting around the time we knew the reset oc-
curred) with the hope of achieving a successful connection
at the very moment the server started answering requests.
If after two different resets the server takes the same num-
ber of seconds to start answering, then the attack should
succeed. To test this, we created a script that attempted to
connect to the server once every 0.1 seconds and recorded
any session data. We then performed ﬁve trials consisting
of the following steps using VMWare 1.0.10 as our VMM,
Ubuntu 8.04 Desktop as our host and guest OS, and Apache
2.2.14 mpm-prefork with OpenSSL 0.9.8k:
(1) Start the VM from the snapshot.
(2) Start the attack script.
(3) Stop the script after a few seconds of successful con-
nections.
We did this both when restarting the host physical machine
before each trial and restarting before only the ﬁrst trial.
We call trials executed immediately after a reboot “cold”
trials, while we call trials executed after other trials (without
a reboot in between) “hot” trials.
The results are summarized in the ﬁrst two rows of Fig-
ure 2; the ﬁrst row represents hot trials (except the ﬁrst of
the ﬁve, which is cold), while the second row represents
cold trials. Now, we are interested in whether or not ran-
domness is reused across resets. Thus, for each set of ﬁve
trials, we count how many pairs of trials contain sessions
using the same randomness. We particularly record if a pair
had the same session ID (chosen using the RNG) or used
the same randomness for DSA signing.
As can be seen randomness repetition occurred in both
sets of 5 trials. We noticed that during cold trials, resum-
ing from a snapshot is signiﬁcantly slower than in hot tri-
als. This affected timing. For example, row 1 in the table
did not have 4 randomness collisions because the ﬁrst trial
there was cold while the others were hot, leading to timing
differences. Also, we believe the timing variability of cold
trials accounts for the lower success rate seen in row 2.
Experiments with Clock Synchronization. We would like
our automated attack to work even if the guest is synchro-
nizing its clock. Though synchronization would seem to bar
any chance of attack, it turns out that there is often a win-
dow of opportunity for an attacker. Once a VM is loaded
from a snapshot, everything needs to be reinitialized; this
includes re-loading values into memory, re-enabling net-
working, synchronizing the clock, and more. We observed
that VMs running on both VirtualBox and VMWare VMMs
would, after starting from a snapshot, often enable network-
ing and service HTTPS requests before synchronizing the
clock.
We experimented with VMWare 1.0.10 and VirtualBox
3.1.0 using the same conﬁguration, automated script, and
steps as above. For VMWare, we tested our attack with
VMWare tools installed to ensure clock synchronization.
As before and for each VMM, we performed ﬁve trials re-
booting the host machine between trials and ﬁve trials re-
booting only before the ﬁrst trial. The results are shown in
Figure 2, rows 3 through 6. Again, sessions used the same
randomness across multiple TLS sessions. VirtualBox had
very consistent resumption timing. The higher variability
of VMWare leads to lower success rates. In particular, as
seen in row 5 of the table, when doing hot trials VMWare
actually synchronized the guest clock before Apache started
servicing the attack connections.
Discussion. One might wonder why session IDs repeat
more often than DSA randomness; while we do not have a
deﬁnitive answer for this, we suspect it is because OpenSSL
mixes in an additional time value immediately before DSA
signing, and for some sessions this time ends up being time
X while for others it ends up as time X+1.
In these experiments, we also observed repeat Server-
Randoms and Difﬁe-Hellman key exchange values. These
values should all be unique in a proper TLS handshake. We
do not know how to exploit this repetition, but nevertheless
believe care should be taken to avoid it.
4. On Fixing the Vulnerabilities
In this section we provide a brief discussion about ﬁx-
ing the VM reset vulnerabilities uncovered.
In the TLS
clients and servers we described above, we saw that good
randomness was sampled at some point (such as starting
the program or launching a child process) and buffered un-
til it was needed at some much later time. This allowed
a large window in which snapshots would capture to-be-
used randomness. In the browser client vulnerabilities, the
randomness was used directly in a cryptographic operation
after the snapshot. On the other hand, with Apache, new en-
tropy was added to the RNG right before its output was used
in the cryptographic operation — unfortunately the sources
had little to no entropy conditioned on their being used al-
ready by a previous snapshot.
In abstract, ﬁxing these vulnerabilities requires ensur-
ing that RNGs get access to sufﬁcient entropy after a snap-
shot and ensuring that applications take randomness from
an RNG at the time of the cryptographic operation. For
example, one approach would be to mandate using a guest
OS source such as /dev/random or /dev/urandom to
generate randomness right before a cryptographic operation
is performed.
Unfortunately, the state of these sources is also reset by
snapshots, and so it is unclear whether sufﬁcient entropy is
generated between a snapshot resumption and randomness
consumption by the cryptographic operation. In general, a
better option would likely be linking guest RNG services
with hardware-based RNGs or other external sources.
This is a large topic, and we leave ﬁnding the best solu-
tions to future work. Instead, we turn our attention to strate-
gies for mitigating the threat of all types of RNG failures to
better protect against future problems.
5. A General Framework for Hedging against
Randomness Failures
As mentioned in the introduction, there is a long his-
tory of RNG failures [13, 17, 28, 32, 35, 36, 51] stemming
from a variety of issues. The VM reset attacks discussed
in Section 3 show yet another manner by which RNG’s fail.
Additionally, the reset attacks, among other attacks [16, 53],
target routine cryptographic operations that are fragile in
the face of bad randomness. For example, most construc-