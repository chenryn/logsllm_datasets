程“不要wait了”
识设置成 tue，线程也不会退出等待区。所以我们必须使用 interput 方法，要求线
变差了。所以如果使用intermupt 方法，就可以把 sleep 中断掉。
处理。或许过了sleep 的时间后，就会开始执行终止处理，但这样程序的响应性就
正在 sleep，就算将 shutdownRequested 标识设置成 true，线程也不会开始进行终止
是说，为什么只把 shutdownRequested 标识设置成 trne 是不够的呢？
只检查标识是不够周全的
程刚进行
但是，如果线程会执行到任何一个会忽视InterruptedException 的地方，这样做
提出这样的问题是很合理的。像范例程序，程序员如果可以掌握整个线程时，
理由很简单，当想要结束掉线程的时候，说不定线程现在正在 sleep。如果线程
接下来要思考的是，shutdownRequest方法为什么需要调用 interrupt方法。也就
}catch (InterruptedException e)I
“调用interrupt方法后，如果线程正在sleep或wait，
或许细心的读者已经想到下面的问题。
但是：使用 stop 方法强制停止线程，就可能丧失安全性。因为说不定刚好在线
于是，stop 方法是不应该使用的
的时候，调用到 stop 方法。
y = newY;
的指定操作，还没执行到
x = newx;
//忽略 InterruptedException
Thread.sleep(l00);
则会抛出
---
## Page 271
约3 秒钟，以 System.exit 强制结束程序。结果如图10-6 所示。
用这个方法，可以编写整个程序的终止处理。
结束时），调用指定Thread 的 start 方法（这时候的Thread 称为 shutdown hook），使
会在 Java 执行坏境全部结束时（调用 System.exit 方法时，或所有非Daemon 线程都
处理的．·个方法。就是java.lang.Runtime 的实例方法 addShutdownHook。这个方法
程序的结束与addShutdownHook方法
方法。若返同值是tmue，该线程还活着。如果是false，袁示线程已经结束了。
join方法与isAlive方法
法。
补充说明：NIO与多线程
问题。
来，可使程序的响应性提高：本章末的练习问题10-7，就会以具体的程序讨论这个
应该先检查shutdownRequested标识，或是调用isShutdownRequested方法。这样一
进行繁重的处理前，先检查终止请求
个问题。
识是用来记录终止请求的标识。本章末的练习问题10-2会具体的以程序来讨论这
（参图5-4）。也就是说，不使用 shutdownRequested标识，而用上述的做法，可能
这时，这个阻挡I/O 的线程，会收到ClosedByInterruptException异常。
简单的范例程序如下所示。在下面的程序中1，设置 shutdown hook 以后，sleep
掉。这时，这个阻挡I/O 的线程，会收到AsynchronousCloseException异常。
另外，检查指定的线程现在是否结束了，可以使用java.lang.Thread 的isAlive
程考虑进去了。
虽然与Two-Phase Termination Pattern 没有直接关系，在这里顺带介绍有关终止
另外，线程对Channel阻挡住IO时，其他线程也可以 interrupt掉这个线程。
例如，当线程对Channcl阻挡住I/O时，其他线程可以把这个 Channel给close
等待指定的线程结束时，如范例程序 java.lang.Thread 所示，要使用 join 方
为了使收到终止请求后，能尽快开始终止处理，故每当要开始繁重的处理前，
当 wait、sleep、join一抛出 InterruptedException 后，线程就不是中断状态
Two-Phase Termination-
一快把玩具收拾好，去睡觉吧
第10章
---
## Page 272
KNA移线程设讲模式
public class Main l
+*+**
Thread-O: SHUTOowN HOOK!
main:EXIT
main:SLEEP...
main:BEGIN
List 10-3
System.out.println("main:END");
/！不会执行到这里
System.exit(0);
/！在这里强制结束
System.out.println("main:ExiT");
try f
11约3秒后强制结束程序
Runtime.getRuntime().addshutdownHook(
System.out.println("main:BEGIN"):
：
 catch (InterruptedException e)
//设置 shutdown hook
Thread.sleep(3000);
new Thread(} {
使用 shutdown hook 的 Main 类(Mainjava)
pcblic void run()(
System.out.println("***");
getName() + ": SHUTDOWN HOOK!");
图10-6执行结果
－执行 shutdown hook
←因为执行exit了，所以不会显示main:END
---
## Page 273
有结束，则会不断送出更强的终止请求，
Multiphase Cancellation Pattern（参考附录 E[Lea])
Before/After Pattern（参考附录 E[Lea])
shutdownRequest方法中调用了interrupt 方法。
shutdownRequest 方法里，调用了interrupt 方法，
使用了Before/After Patterm
shutdownRequested 标识。以对象不会被破坏为前提，进行终止处理。
安全地终止（安全性）
键（安全性、生命性、响应性）。
事宜处理好，再真正结束。Two-Phase Termination Patterm 能够将线程 graceful 地结
子。表示不是把做到一半的事情搁着，就草率地结束掉，而是仔细地将需要刷新的
优雅终止的线程
相关Pattern
送出绛止请求后，要尽快进入终止处理（响应性）
一定会进行终止处理（生命性）
Multiphase Cancellation Pattern 会在要求线程终止后，如果执行一定时间后还没
即使收到终止请求，也不马上结束线程。而是竖立表示收到终止请求的
在英文里，使用graceful（优雅的：得体的）来形容确实执行完终止处理的样
Two-Phase Termination Pattern 为了确实进行终止处理，使用了finally 块。这是
当收到终止请求后，会中断掉可以中断的 sleep，尽快前进到终止处理。于是在
另外，为了在抛出异常结束的时候，也会执行到终止处理，故使用了try...finally块。
当收到终止请求时，会中断掉可以中断的 wait，前往终止处理。所以在
就像妈妈说了“去睡觉吧”，也不该慌张地整理玩具，而把玩具弄坏一样。
像这样，优雅地结束掉线程，就像管教调皮的孩子一样。
就像妈妈说了“快把玩具收拾好”后，应该尽快开始整理一样。
另外，在繁重的处理前，应该检查 shutdownRequested 标识。
就像不可以把玩具散落-地，就跑去睡觉了的意思一样。
Two-Phase Termination--
一快把玩具收拾好：去睡觉吧
第10章
---
## Page 274
其中 interrupted 方法，是 java.lang.Thread 类的类方法。
中断状态→InterruptedException异常的转换
中断的事实一一而加以变化。
也可以把（2）变为（1）。配合程序的需要一
成中断状态）。
当的操件，
Balking Pattern（第4章）
→调用 init 方法→调月 start 方法等3阶段）。
个系统的 Pattern。系统拥有一个整数的 mun level值，表示现在正在启动的 rur
260
evel。
止处理中】的阶段，安全地结束线程。
-种结果。
然而，状态（I)，（2）是可以互相转换的。也就是说，可以把（1）变为（2），
中断状态与InterruptedException异常的相互转换
进阶说明：
Java 的Applet 就使用了退化到3阶段的 Multi-Phase Startup Pattern（产生实例
http://objectelub.esm.co.jp/jplop/startup-2.0.html
下面是具体的说明：
通常会是（1）。只有在线程是 sleep、wait、join 时会是（2）（这个时候不会变
调用 intemupt 方法后，可以中断掉线程。这里所说中断抑线程，是指下面其中
在Two-Phase Termination Patern 中，为了防止终止处理进行的时候，进行不恰
Two-Phase Termination Pattern收到终i止请求后，不会马上结束，而会先经过【终
“若线程是中断状态，就抛出InteruptedException异常”，可以像下面这样写。
（1）线程变成“中断状态”对“状态”的反应；
（2）抛出“异常lnterruptedException"
，可使用 Balking Pattem。
”对“控制”的反应。
一大致上就是为了让程序不至于忘记被
---
## Page 275
他线程 interrupt 时，“被中断”这个事实会消失。
Thread.sleep 会抛出 InterruptedException异常，所以可能我们经常会这样写：
InterruptedException异常→转换为中断状态
实例方法。使用方式如下；
不想清除中断状志的时候
哪个线程来检查 interrupted 方法
一次。
免不知道自己已经被中断，还开始进行花时间的处理。
态。
-次Thread.interrputed方法斤，中断状态就会被清除。
若当我们不希望被中断这个事实消失时，就像下面这样，
想要让线程只有在指定的时间才停止时，可以使川 Thread.,sleep 方法。因为
如果不想清除中断状态，而要检查现在线程是否被中断，要使用 inInterrupted
try 
调用 Thread.interputed 方泓后，线程就不是中断状态了。也就是说，只要调用
Thread.interrupted方法，会检查Thread.currentThread(的中断状态。也就是说，
反倒是，这个f语句乍看之下很简单，要完全了解倒比想象中复杂许多。
不过，这样写的话，抛出的 InteruptedException 异常会被忽略。当 sleep 被其
try  
if (Thread.curre:itThread().isInterrupted())
在花时间的处理前，先加上这个f语句，可提高程序对中断的响应性。可以避
catch (InterruptedException e) I
if (Thread.irterrupted()) {
catch (InterruptedException e){
Thread.sleep(10o0);
 Thread.sleep(l0c0);
1/若为中断状态时需要进行的处理（中断状态不会清除
thrcw new Trlerruptedexceplionil:
Two-Phase Termination-
快把玩具收拾好，去睡觉吧
：自己再重新中断自己
第10喜
---
## Page 276
...
Hv华线程装研模式
检查终止请求。
interrupt 方法。因为调用 Thread.interrupted 方法后，中断状态会被清除，所以必须
这个标识。当收到终止请求时，就开始进行终止处理。是否要前往终止处理，是线
收到终止请求的标识设置为tue。而线程要在可以安全地进行终止处理的地方检查
并且进入终止处理时，对象也不能丧失安全性。
面才throw出去。
如下：
InterruptedException异常→转换为 InterruptedException异常
（Terminator参与者）自己判断的。
重点回顾
为了使程序执行时，就算发生异常，也会确实进行终止处理，所以使用了finally。
假设现在有一个想要结束掉的线程。在结束前，又必须进行特定的终止处理。
这·章我们学习了Two-Phase Termination Pattem。
收到的 InterruptedException异常，也可以不马上抛出去，而离下来晚点再抛。
在这里，
这样可以将收到的 InteruptedException，转换为中断状态的形式。
那么，就进入练习问题吧，
这就是Two-Phase Termination Pattern。
if
 catch (InterruptedExcepticn e) {
tryf
InterruptedException savedException = null:
(savedException != null)
Thread.sleep(1000);
throw savedexception;
savedException = e:
Thread.currentThread().interrupt();
，先将收到的 InteruptedException 存在变量 savedException 里，留到后
---
## Page 277
[ List 10-4从范例程序的 CountupThread类删除了 shutdownRequested 标识，将程
请就您对范例程序的了解，仔细阅读下列语句，正确的请回答○，不正确的请
练习问题
public class CountupThread extends Thread (
接下来是问题，请只改写doWork 方法，
的简化方式，碰到某些doWork 的内容，
序简单化。这个程序如同我们预期的，正常地结束了（图10-7）。但是，这样
问题10-2（中断状态的变化）
回答×。
问题10-1（基础知识的确认）
解答请见附录A
(4） shutdownRequest 方法中的 interrupt()也可以写成 Thread.currentThread()
（3）doWork 方法将异常 IntermuptedException 抛出时，doShutdown 方法会被调
（2）doWork方法只会被调川一次。
（1）调川出 shutdownRequest方法的是主线程。
List 10-4
public
/！动作
public void shutdownRequest() f
1/终止请求
private long counter = 0;
//计数器的值
interrupt()，意思一样。
用出来。
ry {
interrupt();
finaliy 1 
Cat.ch (InterruptedException e)
:void runl} 
doshutdewn();
while (!isInterruptedt)) [
CountupThread 类( CountupThread.java)
doWork（）;
Two-Phase Termination-—
使这个程序无法正常结束。
，可能会无法正常结束。
一快把玩具收拾好，去睡觉吧
10
---
## Page 278
264
private void doShutdown()
//终止处理
Private void doWork()
//操作
 System.out.println("doshutdown: counter - 
Thread.sieep(500) ;
 System.out.println("dowork: counter = " + counter);
counter++;
maia:_END
main: join
doShutdown: counter =
main: shutdownRequest
dowork: counter
dowork:
dowork:
dowork:
doWerk:
dowork:
dowork:
dowork:
doWork:
doWork:
doWork:
doWork:
dcWork:
dowork:
dowork:
doWork:
doWprk:
doWork:
doWork:
doWork: counter
main: BEGIN
counter
counter
counter
counter
counter
counter
counter
counter
counter
counter
counter
counter
counter
counter
counter
counter
 counter
counter
图10-7
throws InterruptedException 
11
=-
I
!
1
2C
执行范例
6
6
16
G
10
6
5
20
如预期般结束
"+ counter);
---
## Page 279
avList 10-5是优雅地进行终止处理的GracefulThread 类。请改写范例程疗的
请改写范例程序 CountupThread类（List 10-1）定义的 doShutdown 方法，将调
public class GracefuiThread exrends Thread f
CountupThread类（List 10-1），作为GracefulThread 类的了类。
问题 10-4（Template Method Pattern）
川 doShutdown 方法的时刻时，counter 字段的值存到文件 counter.txt 里。
问题10-3（编写终止处理）
tist 10-5
//终止处理
protected void dowork() throws InterruptedException
//操作
public final void runi) {
//动作
public fsnal boclean isShctdownRequested() [
//判断终止请求是否已经送出
pubiic final void shutdow:iRequesr() {
//终止请求
private volatile boolean shutdownRequested = faise;
//已经送出终止请求则为true
retur: shutaownRequested;