GetTestId
//*** undocumented, returns internal testId
GetThreadId
return getn_thread(idx);
GetThreadQty
return get_thread_qty();
GetTinfo
//no comparable return type in SDK, generally uses get_tinfo
GetTrueName
//macro, see GetTrueNameEx
GetTrueNameEx
return qstrdup(get_true_name(from, ea, buf, sizeof(buf)));
GetType
get_ti(ea, tbuf, sizeof(tbuf), plist, sizeof(plist));
print_type_to_one_line(buf, sizeof(buf), idati,
                       tbuf, NULL, NULL, plist, NULL);
return qstrdup(buf); 
GetnEnum
return getn_enum(idx);
GetVxdFuncName
//*** undocumented function
get_vxd_func_name(vxdnum, funcnum, buf, sizeof(buf)); 
return qstrdup(buf); 
GetXML
 valut_t res;
get_xml(path, &res);
return res; 
GuessType
guess_type(ea, tbuf, sizeof(tbuf), plist, sizeof(plist));
print_type_to_one_line(buf, sizeof(buf), idati, tbuf,
                       NULL, NULL, plist, NULL);
return qstrdup(buf); 
HideArea
add_hidden_area(start, end, description, header, footer, color);
HighVoids
//macro, see SetLongPrm
IdbByte
return get_db_byte(ea);
Indent
//macro, see SetCharPrm
IsBitfield
return is_bf(enum_id);
IsEventHandled
return get_debug_event()->handled;
IsFloat
//IDC variable type query, n/a for SDK
IsLong
//IDC variable type query, n/a for SDK
IsObject
//IDC variable type query, n/a for SDK
IsString
//IDC variable type query, n/a for SDK
IsUnion
return get_struc(id)->is_union();
ItemEnd
return get_item_end(ea);
ItemHead
return get_item_head(ea);
ItemSize
return get_item_end(ea) - ea;
Jump
jumpto(ea);
LineA
netnode n(ea).supstr(1000 + num, buf, sizeof(buf));
return qstrdup(buf); 
LineB
netnode n(ea).supstr(2000 + num, buf, sizeof(buf));
return qstrdup(buf); 
LoadDebugger
load_debugger(dbgname, use_remote);
LoadTil
return add_til2(name, 0);
LocByName
return get_name_ea(-1, name);
LocByNameEx
return get_name_ea(from, name);
LowVoids
//macro, see SetLongPrm
MK_FP
return ((seg
MakeAlign
doAlign(ea, count, align);
MakeArray
 typeinfo_t  ti;
flags_t f = get_flags_novalue(ea);
get_typeinfo(ea, 0, f, &ti);
asize_t sz = get_data_elsize(ea, f, &ti);
do_data_ex (ea, f, sz *  nitems, ti.tid); 
MakeByte
//macro, see MakeData
MakeCod
ua_code(ea);
MakeComm
set_cmt(ea, cmt, false);
MakeData
do_data_ex(ea, flags, size, tid);
MakeDouble
//macro, see MakeData
MakeDword
//macro, see MakeData
MakeFloat
//macro, see MakeData
MakeFrame
func_t  * f = get_func(ea);
set_frame_size(f, lvsize, frregs, argsize);
return f->frame; 
MakeFunction
add_func(start, end);
MakeLocal
func_t  * f = get_func(ea);
if (* location != '[')
   add_regvar(f, start, end, location, name, NULL);
else
   struc_t  * fr = get_frame(f);
   int start = f->frsize + offset;
   if (get_member(fr, start))
      set_member_name(fr, start, name);
   else
      add_struc_member(fr, name, start, 0x400, 0, 1); 
MakeNameEx
set_name(ea, name, flags);
MakeOword
//macro, see MakeData
MakePackRea
//macro, see MakeData
MakeQword
//macro, see MakeData
MakeRptCmt
set_cmt(ea, cmt, true);
MakeStr
int len = endea == -1 ? 0 : endea - ea;
make_ascii_string(ea, len, current_string_type); 
MakeStructEx
 netnode n(strname);
nodeidx_t idx = (nodeidx_t)n;
if (size != -1)
   do_data_ex(ea, FF_STRU, size, idx);
else
   size_t sz = get_struc_size(get_struc(idx));