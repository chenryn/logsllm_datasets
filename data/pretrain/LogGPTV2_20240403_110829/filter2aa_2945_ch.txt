of threads you explicitly create, and the operating system will schedule only
that number of threads. This can lead to overloading and poor response time
if the number of threads greatly exceeds the number of available processors,
or to inefficiency and poor throughput if the number of threads is less than
the number of processors.
WinRT optimizes the number of threads required to implement a set of
concurrent tasks and schedules them efficiently according to the number of
available processors. It implements a queuing mechanism to distribute the
workload across a set of threads allocated to a thread pool (implemented by
using a ThreadPool object). When a program creates a Task object, the task is
added to a global queue. When a thread becomes available, the task is
removed from the global queue and is executed by that thread. The
ThreadPool class implements a number of optimizations and uses a work-
stealing algorithm to ensure that threads are scheduled efficiently.
Note The ThreadPool class was available in previous editions of the
.NET Framework, but it was enhanced significantly in .NET
Download from finelybook PI:EMAIL
768
Framework 4.0 to support Tasks.
You should note that the number of threads created to handle your tasks is
not necessarily the same as the number of processors. Depending on the
nature of the workload, one or more processors might be busy performing
high-priority work for other applications and services. Consequently, the
optimal number of threads for your application might be less than the number
of processors in the machine. Alternatively, one or more threads in an
application might be waiting for long-running memory access, I/O, or
network operation to complete, leaving the corresponding processors free. In
this case, the optimal number of threads might be more than the number of
available processors. WinRT follows an iterative strategy, known as a hill-
climbing algorithm, to dynamically determine the ideal number of threads for
the current workload.
The important point is that all you have to do in your code is divide, or
partition, your application into tasks that can be run in parallel. WinRT takes
responsibility for creating the appropriate number of threads based on the
processor architecture and workload of your computer, associating your tasks
with these threads and arranging for them to be run efficiently. It does not
matter if you partition your work into too many tasks because WinRT will
attempt to run only as many concurrent threads as is practical; in fact, you are
encouraged to overpartition your work because this will help ensure that your
application scales if you move it to a computer that has more processors
available.
Creating, running, and controlling tasks
You can create Task objects by using the Task constructor. The Task
constructor is overloaded, but all versions expect you to provide an Action
delegate as a parameter. Chapter 20, “Decoupling application logic and
handling events,” illustrates that an Action delegate references a method that
does not return a value. A Task object invokes this delegate when it is
scheduled to run. The following example creates a Task object that uses a
delegate to run the method called doWork:
Click here to view code image
Download from finelybook PI:EMAIL
769
Task task = new Task(doWork);
...
private void doWork()
{
    // The task runs this code when it is started
    ...
}
Tip The default Action type references a method that takes no
parameters. Other overloads of the Task constructor take an
Action parameter representing a delegate that refers to a
method that takes a single object parameter. With these overloads, you
can pass data into the method run by the task. The following code
shows an example:
Click here to view code image
Action action;
action = doWorkWithObject;
object parameterData = ...;
Task task = new Task(action, parameterData);
...
private void doWorkWithObject(object o)
{
    ...
}
After you create a Task object, you can set it running by using the Start
method, like this:
Task task = new Task(...);
task.Start();
The Start method is overloaded, and you can optionally specify a
TaskCreationOptions object to provide hints about how to schedule and run
the task.
More Info
Download from finelybook PI:EMAIL
770
For more information about the TaskCreationOptions enumeration,
consult the documentation describing the .NET Framework class library
that is provided with Visual Studio.
Creating and running a task is a very common process, and the Task class
provides the static Run method with which you can combine these operations.
The Run method takes an Action delegate specifying the operation to perform
(like the Task constructor) but starts the task running immediately. It returns a
reference to the Task object. You can use it like this:
Click here to view code image
Task task = Task.Run(() => doWork());
When the method run by the task completes, the task finishes and the thread
used to run the task can be recycled to execute another task.
When a task completes, you can arrange for another task to be scheduled
immediately by creating a continuation. To do this, call the ContinueWith
method of a Task object. When the action performed by the Task object
completes, the scheduler automatically creates a new Task object to run the
action specified by the ContinueWith method. The method specified by the
continuation expects a Task parameter, and the scheduler passes into the
method a reference to the task that completed. The value returned by
ContinueWith is a reference to the new Task object. The following code
example creates a Task object that runs the doWork method and specifies a
continuation that runs the doMoreWork method in a new task when the first
task completes:
Click here to view code image
Task task = new Task(doWork);
task.Start();
Task newTask = task.ContinueWith(doMoreWork);
...
private void doWork()
{
    // The task runs this code when it is started
    ...
}
...
private void doMoreWork(Task task)
Download from finelybook PI:EMAIL
771
{
    // The continuation runs this code when doWork completes
    ...
}
The ContinueWith method is heavily overloaded, and you can provide
some parameters that specify additional items, including a
TaskContinuationOptions value. The TaskContinuationOptions type is an
enumeration that contains a superset of the values in the
TaskCreationOptions enumeration.  The additional values available include
the following:
NotOnCanceled and OnlyOnCanceled The NotOnCanceled option
specifies that the continuation should run only if the previous action
completes and is not canceled, and the OnlyOnCanceled option
specifies that the continuation should run only if the previous action is
canceled. The section “Canceling tasks and handling exceptions” later
in this chapter describes how to cancel a task.
NotOnFaulted and OnlyOnFaulted The NotOnFaulted option
indicates that the continuation should run only if the previous action
completes and does not throw an unhandled exception. The
OnlyOnFaulted option causes the continuation to run only if the
previous action throws an unhandled exception. The section
“Canceling tasks and handling exceptions” provides more information
on how to manage exceptions in a task.
NotOnRanToCompletion and OnlyOnRanToCompletion  The
NotOnRanToCompletion option specifies that the continuation should
run only if the previous action does not complete successfully; it must
either be canceled or throw an exception. OnlyOnRanToCompletion
causes the continuation to run only if the previous action completes
successfully.
The following code example shows how to add a continuation to a task that
runs only if the initial action does not throw an unhandled exception:
Click here to view code image
Task task2 = ...
task2.Start();
...
task2.Wait(); // Wait at this point until task2 completes
Download from finelybook PI:EMAIL
772
A common requirement of applications that invoke operations in parallel
is to synchronize tasks. The Task class provides the Wait method, which
implements a simple task coordination mechanism. Using this method, you
can suspend execution of the current thread until the specified task
completes, like this:
Click here to view code image
Task task2 = ... task2.Start(); ... task2.Wait(); // Wait at this
point until task2 completes
You can wait for a set of tasks by using the static WaitAll and WaitAny
methods of the Task class. Both methods take a params array containing a set
of Task objects. The WaitAll method waits until all specified tasks have
completed, and WaitAny stops until at least one of the specified tasks has
finished. You use them like this:
Click here to view code image
Task.WaitAll(task, task2); // Wait for both task and task2 to
complete Task.WaitAny(task, task2);
// Wait for either task or task2 to complete
Using the Task class to implement parallelism
In the next exercise, you will use the Task class to parallelize processor-
intensive code in an application, and you will see how this parallelization
reduces the time taken for the application to run by spreading the
computations across multiple processor cores.
The application, called GraphDemo, consists of a page that uses an Image
control to display a graph. The application plots the points for the graph by
performing a complex calculation.
Note The exercises in this chapter are intended to be run on a computer
with a multicore processor. If you have only a single-core CPU, you
will not observe the same effects. Also, you should not start any
additional programs or services between exercises because these might
affect the results that you see.
Download from finelybook PI:EMAIL
773
Examine and run the GraphDemo single-threaded application
1. Start Microsoft Visual Studio 2017 if it is not already running.
2. Open the GraphDemo solution, which is located in the \Microsoft
Press\VCSBS\Chapter 23\GraphDemo folder in your Documents folder.
This is a Universal Windows Platform app.
3. In Solution Explorer, in the GraphDemo project, double-click the file
MainPage.xaml to display the form in the Design View window.
Apart from the Grid control defining the layout, the form contains the
following important controls:
• An Image control called graphImage. This image control displays the
graph rendered by the application.
• A Button control called plotButton. The user clicks this button to
generate the data for the graph and display it in the graphImage
control.
Note In the interest of keeping the operation of the application in
this exercise simple, it displays the button on the page. In a
production UWP app, buttons such as this should be located on a
command bar.
• A TextBlock control called duration. The application displays the time
taken to generate and render the data for the graph in this label.
4. In Solution Explorer, expand the MainPage.xaml file and then double-
click MainPage.xaml.cs to display the code for the form in the Code and
Text Editor window.
The form uses a WriteableBitmap object (defined in the
Windows.UI.Xaml.Media.Imaging namespace) called graphBitmap to
Download from finelybook PI:EMAIL
774
render the graph. The code in the plotButton_Click method creates this
object, but the class instance variables pixelWidth and pixelHeight
specify the horizontal and vertical resolution, respectively, for the
WriteableBitmap object:
Click here to view code image
public partial class MainPage : Window
{
    // Reduce pixelWidth and pixelHeight if there is
insufficient memory available
    private int pixelWidth = 10000;
    private int pixelHeight = 7500;
    ...
}
Note This application was developed and tested on a desktop
computer with 8 GB of memory (it was also tested on a 4 GB
machine). If your computer has less memory than this available,
you might need to reduce the values in the pixelWidth and
pixelHeight variables, otherwise, the application might generate
OutOfMemoryException exceptions, causing the application to
terminate without warning.
Don’t try and increase these values if you have a bigger
machine; the UWP model has a limit on the amount of memory
that an application can use (currently around 2 GB, even on a
desktop computer), and if you exceed this value your application
might be terminated without warning. The rationale behind this
limitation is that many devices on which UWP applications run are
memory constrained, and a single app should not be allowed to
consume all of the memory resources available to the detriment of
other apps.
5. Examine the code for the plotButton_Click method:
Click here to view code image
Download from finelybook PI:EMAIL
775
private void plotButton_Click(object sender, RoutedEventArgs e)
{
    ...
    Random rand = new Random();
    redValue = (byte)rand.Next(0xFF);
    greenValue = (byte)rand.Next(0xFF);
    blueValue = (byte)rand.Next(0xFF);
    int dataSize = bytesPerPixel * pixelWidth * pixelHeight;
    byte data[] = new byte[dataSize];
    Stopwatch watch = Stopwatch.StartNew();
    generateGraphData(data);
    duration.Text = $"Duration (ms):
{watch.ElapsedMilliseconds}";
    WriteableBitmap graphBitmap = new
WriteableBitmap(pixelWidth, pixelHeight);
    using (Stream pixelStream =
graphBitmap.PixelBuffer.AsStream())
    {
        pixelStream.Seek(0, SeekOrigin.Begin);
        pixelStream.Write(data, 0, data.Length);
        graphBitmap.Invalidate();
        graphImage.Source = graphBitmap;
    }
    ...
}
This method runs when the user clicks the plotButton button.
You will click this button several times later in the exercise, which will
let you see that a new version of the graph has been drawn each time this
method generates a random set of values for the red, green, and blue
intensity of the points that are plotted. (The graph will be a different
color each time you click this button.)
The next two lines instantiate a byte array that will hold the data for the
graph. The size of this array depends on the resolution of the
WriteableBitmap object, determined by the pixelWidth and pixelHeight
fields. Additionally, this size has to be scaled by the amount of memory
required to render each pixel; the WriteableBitmap class uses 4 bytes for
each pixel, which specify the relative red, green, and blue intensity of
each pixel and the alpha blending value of the pixel. (The alpha blending
value determines the transparency and brightness of the pixel.)
Download from finelybook PI:EMAIL
776
The watch variable is a System.Diagnostics.Stopwatch object. The
StopWatch type is useful for timing operations. The static StartNew
method of the StopWatch type creates a new instance of a StopWatch
object and starts it running. You can query the running time of a
StopWatch object by examining the ElapsedMilliseconds property.
The generateGraphData method populates the data array with the data
for the graph to be displayed by the WriteableBitmap object. You will
examine this method in the next step.
When the generateGraphData method has completed, the elapsed time
(in milliseconds) appears in the duration TextBox control.
The final block of code creates the graphBitMap WriteableBitMap
object. The information held in the data array is copied into this object
for rendering. The simplest technique is to create an in-memory stream
that can be used to populate the PixelBuffer property of the
WriteableBitmap object. You can then use the Write method of this
stream to copy the contents of the data array into this buffer. The
Invalidate method of the WriteableBitmap class requests that the
operating system redraws the bitmap by using the information held in
the buffer. The Source property of an Image control specifies the data
that the Image control should display. The final statement sets the
Source property to the WriteableBitmap object.
6. Examine the code for the generateGraphData method, shown here:
Click here to view code image
private void generateGraphData(byte[] data)
{
    double a = pixelWidth / 2;
    double b = a * a;
    double c = pixelHeight / 2;
    for (double x = 0; x < a; x++)
    {
        double s = x * x;
        double p = Math.Sqrt(b - s);
        for (double i = -p; i < p; i += 3)
        {
            double r = Math.Sqrt(s + i * i) / a;
            double q = (r - 1) * Math.Sin(24 * r);
            double y = i / 3 + (q * c);
            plotXY(data, (int)(-x + (pixelWidth / 2)), (int)(y +
Download from finelybook PI:EMAIL
777
(pixelHeight / 2)));
            plotXY(data, (int)(x + (pixelWidth / 2)), (int)(y +
(pixelHeight / 2)));
        }
    }
}
This method performs a series of calculations to plot the points for a
rather complex graph. (The actual calculation is unimportant; it just
generates a graph that looks attractive.) As it calculates each point, it
calls the plotXY method to set the appropriate bytes in the data array that
correspond to these points. The points for the graph are reflected around
the x-axis, so the plotXY method is called twice for each calculation:
once for the positive value of the x-coordinate, and once for the negative
value.
7. Examine the plotXY method:
Click here to view code image
private void plotXY(byte[] data, int x, int y)
{
    int pixelIndex = (x + y * pixelWidth) * bytesPerPixel;
    data[pixelIndex] = blueValue;
    data[pixelIndex + 1] = greenValue;
    data[pixelIndex + 2] = redValue;
    data[pixelIndex + 3] = 0xBF;
}
This method sets the appropriate bytes in the data array that corresponds
to x- and y-coordinates passed in as parameters. Each point plotted
corresponds to a pixel, and each pixel consists of 4 bytes, as described
earlier. Any pixels left unset are displayed as black.  The value 0xBF for
the alpha blend byte indicates that the corresponding pixel should be
displayed with a moderate intensity; if you decrease this value, the pixel
will become fainter, while setting the value to 0xFF (the maximum
value for a byte) will display the pixel at its brightest intensity.
8. On the Debug menu, click Start Without Debugging to build and run the
application.
9. When the GraphDemo window appears, click Plot Graph, and then wait.
Please be patient. The application typically takes a couple of seconds to
generate and display the graph, and the application is unresponsive
Download from finelybook PI:EMAIL
778
while this occurs. (Chapter 24 explains why this is, and also explains
how you can avoid this behavior.) The following image shows the
graph. Note the value in the Duration (ms) label in the following figure.
In this case, the application took 1206 milliseconds (ms) to generate the
data. Note that this duration does not include the time to actually render
the graph, which might be another few seconds.
Note The application was run on a computer with a multicore
processor running at  3.10 GHz. Your times might vary if you are
using a slower or faster processor with a different number of cores.
10. Click Plot Graph again and take note of the time required to redraw the
graph. Repeat this action several times to obtain an average value.
Download from finelybook PI:EMAIL
779
Note You might find that occasionally the graph takes an extended
time to appear. This tends to occur if you are running close to the
memory capacity of your computer and Windows has to page data
between memory and disk. If you encounter this phenomenon,
discard this time and do not include it when calculating your
average.
11. Leave the application running and right-click an empty area of the
Windows taskbar. On the shortcut menu that appears, click Task
Manager.
Note An alternative way to launch Task Manager is to type Task
Manager into the Windows Search box in the taskbar, and then
press Enter.
12. In the Task Manager window, click the Performance tab and display the
CPU utilization. If the Performance tab is not visible, click More
Details. Right-click the CPU Utilization graph, point to Change Graph
To, and then click Overall Utilization. This action causes Task Manager
to display the utilization of all the processor cores running on your
computer in a single chart. Wait for a minute or so for the CPU
performance to settle down. The following image shows the
Performance tab of Task Manager configured in this way:
Download from finelybook PI:EMAIL
780
13. Return to the GraphDemo application and adjust the size and position of
the application window and the Task Manager window so that both are
visible.
14. Wait for the CPU utilization to level off, and then, in the GraphDemo
window, click Plot Graph.
15. Wait for the CPU utilization to level off again, and then click Plot Graph
again.
16. Repeat step 16 several times, waiting for the CPU utilization to level off
between clicks.
17. In the Task Manager window, observe the CPU utilization. Your results
will vary, but on a dual-core processor, the CPU utilization will
probably be somewhere around 50–55 percent while the graph was
Download from finelybook PI:EMAIL
781
being generated. On a quad-core machine, the CPU utilization will
likely be somewhere between 25 and 30 percent, as shown in the image
that follows. Note that other factors, such as the type of graphics card in
your computer, can also impact the performance:
18. Close the application and return to Visual Studio 2017.
You now have a baseline for the time the application takes to perform its