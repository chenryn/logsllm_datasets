如果WAF对获取到的数据存储和处理不当，那么 %00 解码后会将后面的数据截断，造成后面的数据没有经过检测。
解析：WAF在获取到参数id的值并解码后，参数值将被截断成 1/* ，后面的攻击语句将没有被WAF拿去进行检测。
2、&字符处理
这些WAF会使用&符号分割 par1 、 par2 和 par3 ，然后对其参数值进行检测。但是，如果遇到这种构造：
waf会将上传的参数分解成3部分:
如果将这3个参数分别进行检测，某些WAF是匹配不到攻击特征的。
这里的 %26 是 & 字符
/%26/->/&/ 其实只是一个SQL的注释而已
## WAF自身的问题 – 4
数据清洗不恰当
当攻击者提交的参数值中存在大量干扰数据时，如大量空格、TAB、换行、%0c、注释等，WAF需要对其进行清
洗，筛选出真实的攻击数据进行检测，以提高检查性能，节省资源。
如果WAF对数据的清洗不恰当，会导致真实的攻击数据被清洗，剩余的数据无法被检测出攻击行为。
## WAF自身的问题 – 5
规则通用性问题
通用型的WAF，一般无法获知后端使用的是哪些WEB容器、什么数据库、以及使用的什么脚本语言。
每一种WEB容器、数据库以及编程语言，它们都有自己的特性，想使用通用的WAF规则去匹配和拦截，是非常难 的。
通用型WAF在考虑到它们一些共性的同时，也必须兼顾它们的特性，否则就很容易被一些特性给Bypass！
## WAF自身的问题 – 6
为性能和业务妥协
要全面兼容各类Web Server及各类数据库的WAF是非常难的，为了普适性，需要放宽一些检查条件，暴力的过滤 方式会影响业务。
对于通用性较强的软WAF来说，不得不考虑到各种机器和系系统的性能，故对于一些超大数据包、超长数据可能会 跳过不检测。
以上就是WAF自身的一些问题，接下来我们会针对这些问题进行讲解，看看WAF是怎么受这些问题影响的。
然后是数据库的一些特性，不同的数据库有一些属于自己的特性，WAF如果不能处理好这些特性，就会出很大的问 题。
总结一下，WAF自身的问题有：总结一下，WAF自身的问题有：
  1. 白名单机制
  2. 数据获取方式存在缺陷
  3. 数据处理不恰当
  4. 数据清洗不恰当
  5. 规则通用性问题
  6. 为性能和业务妥协
## 实例讲解WAF绕过的思路和方法
###  一、数据提取方式存在缺陷，导致WAF被绕过
某些WAF从数据包中提取检测特征的方式存在缺陷，如正则表达式不完善，某些攻击数据因为某些干扰字符的存在而无法被提取。
####  示例:
    http://localhost/test/Article. php?type= 1&x=/&id=-2 union all select 1,2,3,4,5 from dual&y=/
某WAF在后端会将删除线部分当作注释清洗掉:
####  Request:
    http://localhost/Article.php?type= 1&x=/&id=-2 union all select 1,2,3,4,5 from dual&y=/
####  WAF:
    http://localhost/Article.php?type=1&x=+8id- 2 union ol seleet 1.23,45 from etual8y +
###  二、数据清洗方式不正确，导致WAF被绕过
当攻击者提交的参数值中存在大量干扰数据时，如大量空格、TAB、 换行、%0C、 注释等，WAF需要对其进行清洗:
(为提升性能和降低规则复杂性)，筛选出真实的攻击数据进行检测，但是，如果清洗方式不正确，会导致真正的攻击部分被清洗，然后拿去检测的是不含有攻击向量的数据，从而被Bypass!
实例：
    htp://localhostest/Article .php?id9999-“/*“ union all select 1,2,3,4,5 as “*/“from mysql.user
某些WAF会将9999-“/*“ union all select 1 ,2,3, 4,5 as “/*” from mysql.user清洗为:
9999-“”from mysql.user
然后去检测是否有攻击特征,如果没有,执行原始语句:
    9999-“/*“ union all select 1,2,3,4,5 as “*/“ from mysql.user
如：
    http://abcd.com?id=9999-"/*“ union a11 select 1,2,3,4,5 as “*/“ frommysq1. user
某些WAF会将9999-“/*“ union a11 select 1,2,3,4,5 as “*/“ from mysq1. user清洗为:
9999-“” from mysq1.user然后去检测是否有攻击特征,如果没有，执行原始语句:9999”/*“ union all select
1,2,3,4,5 as “*/“ from mysq1 .user
其实，对于 /*来说，它只是一个字符串
对于 */ 来说，它也是一个字符串，在这里还充当一个别名
但是对于WAF来说，它会认为这是多行注释符，把中间的内容清洗掉去进行检测，当然检测不到什么东西。
###  三、规则通用性问题，导致WAF被绕过
比如对SQL注入数据进行清洗时，WAF一般不能知道后端数据库是MySQL还是SQL Server，那么对于MySQL 的 /*!50001Select*/
来说，这是一个Select的命令，而对于SQL Server来说，这只不过是一个注释而已，注释 的内容为 !50001Select 。
尤其是对于通用性WAF，这一点相当难做，很难去处理不同数据库的特性之间的问题。
大家可以发现，很多WAF对错误的SQL语句是不拦截的。
同样的，在Mysql中 # 是注释，但是在SQL Server中 # 只是一个字符串。
那么如下语句： 9999’ and 1=(select top 1 name as # from master..sysdatabases)— 会被当作为：
9999’ and 1=(select top 1 name as 注释
其实，这里的 # 只是一个字符，充当一个别名的角色而已。
如果后端数据库是SQL Server，这样的语句是没问题的。 但是通用型WAF怎么能知道后端是SQL Server呢？
## WAF对上传的检测和处理
####  一、为性能和业务妥协
对于通用性较强的软WAF来说，不得不考虑到各种机器和系统的性能，故对于一些超大数据包、超长数据可能会跳 过不检测。
在上传数据包部分，强行添加5万个字符，有些WAF会直接不检测放行，或者，检测其中的一部分。 比如，检测最前面5w个字符有没有攻击特征，如果没有，放行。
针对这种，不能光靠WAF，我们应该在我们的WEB容器层面或应用程序层面来限定上传数据的大小。 所以，我们不能过度依赖于WAF。
还有很多如绕过D盾木马拦截waf的方法:
其实万变不离其踪，绕过的关键在于构建灵巧的payload
一下是我了解的一个木马绕过方法，win10的防护不会对其进行拦截
    //变量$a的值我是利用异或赋值的，$a = “~+d()”^”!{+{}”;，而字符串”~+d()”^”!{+{}”异或的结果为_POST,然后$b = ${$a}[a];与$b = $_POST[a]等价，在将其传入eval()中
但是单纯的一句话木马：是绝对不可能在对方电脑上正常执行的 所以我们还是要不断与时俱进的
文笔拙劣 各位见谅哦~