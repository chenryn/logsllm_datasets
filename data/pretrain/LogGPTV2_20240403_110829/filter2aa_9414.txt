--------------------------------------
[Python Exploitation] Secret Accounts - 80 Points
--------------------------------------

**Challenge Overview:**

After several months of monitoring, we discovered a server running a software used by the Club to manage information about secret bank accounts abroad. We managed to obtain the source code and need to gain access to the system to uncover the real name of the owner of the account with the largest balance, the bank where it is held, and the exact amount. The Club has implemented strict security measures, ensuring that only authorized personnel who are well-versed in the system can operate and interpret the data. There are rumors that the Mentor himself manages this system, despite his advanced age.

**Objective:**
- Obtain the real name of the account holder with the highest balance.
- Identify the bank where the account is held.
- Determine the exact amount in the account.
- Submit the flag in the following format: `CTF-BR{info1_info2_info3}`.

**Hint:**
- Consider the identity of Fideleeto (Cuba!) in real life.

**Solution:**

In this challenge, we were provided with an obfuscated Python script and a server running it. Unfortunately, I no longer have the original code, as I overwrote it during the deobfuscation process. The code contained numerous octal numbers and arithmetic operations designed to hide constants.

**Steps to Solve:**

1. **Password Input:**
   - We needed to input a password. By connecting the dots, we deduced that the variable `master` in the code corresponds to Fideleeto from the description. According to Wikipedia, Fideleeto's birth year is 1926. The source code also required us to add some 'z' characters to the input.
   - Password: `1926zz`

2. **Menu Interaction:**
   - After entering the correct password, we were prompted to select an option (1-4). However, the input was manipulated through subtraction, multiplication, and other operations. We brute-forced the correct input values to proceed.
   - Once the correct number was chosen, we were presented with a menu.

3. **Arbitrary Code Execution:**
   - The most interesting part of the menu was that our input was handled via `input()`. In Python, `input()` is equivalent to `eval(raw_input())`, which allowed us to execute arbitrary code.
   - We leveraged this vulnerability to write the flag to the standard output (stdout).

**Exploit Code:**
- The full exploit code is available in the file `doit.py`.

By following these steps, we successfully gained access to the system and retrieved the required information.