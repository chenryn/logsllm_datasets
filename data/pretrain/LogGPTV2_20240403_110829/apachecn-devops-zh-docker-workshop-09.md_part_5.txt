    4i1cwxst1j9qoh2e6uq5fjb8c   pg_password    51 seconds ago
      51 seconds ago
    ```
24.  现在，对您的`docker-compose.yml`文件进行相关更改。以前，您只需为`postgres`用户输入您想要的密码。正如您在下面的代码中所看到的，在这里，您将把环境变量指向您之前创建的机密`/run/secrets/pg_password`。这意味着它将在你的群中搜索可用的机密，并分配存储在`pg_password`中的机密。您还需要参考`db`服务中的机密以允许其访问。用文本编辑器打开文件，并对文件进行以下更改:
    ```
    4   db:
    5     image: postgres
    6     ports:
    7       - 5432:5432
    8     environment:
    9       - POSTGRES_PASSWORD=/run/secrets/pg_password
    10    secrets:
    11      - pg_password
    ```
25.  `web`服务使用相同的机密来访问 PostgreSQL 数据库。进入`docker-compose.yml`的`web`服务区，将*第 21 行*更改为类似以下内容，因为它现在将使用您创建的机密:
    ```
    20    environment:
    21       - PGPASSWORD=/run/secrets/pg_password
    22    deploy:
    ```
26.  最后，就像你已经完成了你的配置一样，在`docker-compose.yml`的末尾定义这个机密。在你的`compose`文件末尾加上以下几行:
    ```
    41 secrets:
    42  pg_password:
    43    external: true
    ```
27.  Before deploying your changes, you have made a lot of changes to the `compose` file, so your `docker-compose.yml` file should look similar to what is shown in the following code block. You have three services running with the `db`, `web`, and `nginx` services set up, and we now have one `config` instance and one `secret` instance:
    Docker-组合. yml
    ```
    version: '3.3'
    services:
      db:
        image: postgres
        ports:
          - 5432:5432
        environment:
          - POSTGRES_PASSWORD=/run/secrets/pg_password
        secrets:
          - pg_password
      web:
        build: .
        image: swarm_web:latest
        command: gunicorn chapter_nine.wsgi:application --bind       0.0.0.0:8000
        volumes:
          - .:/application
        ports:
          - 8000:8000
    ```
    这一步的完整代码可以在[https://packt.live/3miUJD8](https://packt.live/3miUJD8)找到。
    注意
    我们的服务有一些更改，如果在将更改部署到 Swarm 时出现任何问题，可能值得删除这些服务，然后重新部署，以确保所有更改正确生效。
    这是本练习中 Swarm 部署的最后一次运行:
    ```
    docker stack deploy --compose-file docker-compose.yml test_swarm
    ```
28.  运行部署，确保服务运行并成功部署:
    ```
    Creating network test_swarm_default
    Creating config test_swarm_nginx_conf
    Creating service test_swarm_db
    Creating service test_swarm_web
    Creating service test_swarm_nginx
    ```
在本练习中，您已经练习了使用 Swarm 使用您的`docker-compose.yml`文件部署一整套服务，并在几分钟内运行它们。本章的这一部分还演示了 Swarm 的一些额外功能，使用`config`和`secret`实例来帮助我们减少将服务移动到不同环境所需的工作量。现在您已经知道如何从命令行管理 Swarm，您可以在下一节中使用 Swarmpit 的 web 界面进一步探索 Swarm 集群管理。
# 用蜂群管理蜂群
命令行为用户控制他们的 Swarm 提供了一种有效且有用的方法。如果您的服务和节点随着需求的增加而增加，这可能会让一些用户感到有些困惑。帮助管理和监控您的 Swarm 的一种方法是使用 web 界面，如 Swarmpit 提供的界面，来帮助您管理不同的环境。
正如您将很快看到的，Swarmpit 提供了一个易于使用的网络界面，允许您管理 Docker Swarm 实例的大多数方面，包括栈、机密、服务、卷网络和配置。
注意
这一章只涉及到 Swarmpit 的使用，但是如果你想了解更多关于这个应用的信息，下面的网站应该会为你提供更多的细节: [https://swarmpit.io](https://swarmpit.io) 。
Swarmpit 是一个简单易用的安装 Docker 映像，当在您的系统上运行时，它会创建部署在您的环境中的服务群，以运行管理和 web 界面。安装后，可从`http://0.0.0.0:888`访问网络界面。
要在您的系统上运行安装程序来运行 Swarm，请执行以下`docker run`命令。这样，您可以命名容器`swampit-installer`并将容器卷安装在`/var/run/docker.sock`上，这样它就可以使用`swarmpit/install:1.8`映像管理我们系统上的其他容器:
```
docker run -it --rm   --name swarmpit-installer   --volume /var/run/docker.sock:/var/run/docker.sock   swarmpit/install:1.8
```
安装程序将建立一个由数据库、代理、网络应用和网络组成的集群，将它们连接在一起。它还将指导您设置一个管理用户首次登录该界面。登录到 web 应用后，界面直观且易于导航。
下面的练习将向您展示如何在您运行的系统上安装和运行 Swarmpit，并开始管理您安装的服务。
## 练习 9.04:安装群坑和管理栈
在本练习中，您将安装并运行 Swarmpit，简要浏览 web 界面，并开始从 web 浏览器管理您的服务:
1.  It's not completely necessary to do so, but if you have stopped your `test_swarm` stack from running, start it up again. This will provide you with some extra services to monitor from Swarmpit:
    ```
    docker stack deploy --compose-file docker-compose.yml test_swarm
    ```
    注意
    如果您担心您的系统上一次运行的服务太多，请随意跳过这个`test_swarm`栈重启。该练习可以在作为安装过程的一部分创建的群坑栈上按如下方式执行。
2.  Run the following `docker run` command:
    ```
    docker run -it --rm   --name swarmpit-installer   --volume /var/run/docker.sock:/var/run/docker.sock   swarmpit/install:1.8
    ```
    它从`swarmpit`存储库中提取`install:1.8`映像，然后运行设置环境详细信息的过程，允许用户更改栈名称、端口、管理员用户名和密码。然后，它会创建运行应用所需的相关服务:
    ```
    _____      ____ _ _ __ _ __ ___  _ __ (_) |_ 
    / __\ \ /\ / / _` | '__| '_ ` _ \| '_ \| | __|
    \__ \\ V  V / (_| | |  | | | | | | |_) | | |_ 
    |___/ \_/\_/ \__,_|_|  |_| |_| |_| .__/|_|\__|
                                     |_|          
    Welcome to Swarmpit
    Version: 1.8
    Branch: 1.8
    …
    Application setup
    Enter stack name [swarmpit]: 
    Enter application port [888]: 
    Enter database volume driver [local]: 
    Enter admin username [admin]: 
    Enter admin password (min 8 characters long): ******
    DONE.
    Application deployment
    Creating network swarmpit_net
    Creating service swarmpit_influxdb
    Creating service swarmpit_agent
    Creating service swarmpit_app
    Creating service swarmpit_db
    DONE.
    ```
3.  On the command line, run the `stack ls` command to ensure that you have the Swarmpit swarm deployed to your node:
    ```
    docker stack ls
    ```
    以下输出确认了群坑已部署到我们的节点:
    ```
    NAME               SERVICES         ORCHESTRATOR
    swarmpit           4                Swarm
    test_swarm         3                Swarm
    ```
4.  Use the `service ls` command to verify that the services needed by Swarmpit are running:
    ```
    docker service ls | grep swarmpit
    ```
    为清晰起见，此处显示的输出仅显示前四列。输出还显示每个服务的`REPLICAS`值为`1/1`:
    ```
    ID              NAME                 MODE          REPLICAS
    vi2qbwq5y9c6    swarmpit_agent       global        1/1
    4tpomyfw93wy    swarmpit_app         replicated    1/1
    nuxi5egfa3my    swarmpit_db          replicated    1/1
    do77ey8wz49a    swarmpit_influxdb    replicated    1/1
    ```
    是时候登录到 Swarmpit 网络界面了。打开您的网络浏览器，使用`http://0.0.0.0:888`打开群坑登录页面，输入您在安装过程中设置的管理员用户名和密码:
    ![Figure 9.3: The Swarmpit login screen ](img/B15021_09_03.jpg)
    图 9.3:群坑登录屏幕
5.  Once you log in, you're presented with the Swarmpit welcome screen, showing your dashboard of all your services running on the node, as well as details of the resources being used on the node. The left of the screen provides a menu of all the different aspects of the Swarm stack you can monitor and manage, including the stacks themselves, `Services`, `Tasks`, `Networks`, `Nodes`, `Volumes`, `Secrets`, `Configs`, and `Users`. Click on the `Stacks` option in the left-hand menu and select the `test_swarm` stack:
    ![Figure 9.4: The Swarmpit welcome dashboard ](img/B15021_09_04.jpg)
    图 9.4:群坑欢迎面板
6.  You should be presented with a screen similar to the following. The size of the screen has been reduced for clarity, but as you can see, it provides all the details of the interacting components of the stack—including the services available and the secrets and configs being used. If you click on the menu next to the stack name, as shown here, you can edit the stack. Click `Edit Stack` now:
    ![Figure 9.5: Managing your swarm with Swarmpit ](img/B15021_09_05.jpg)
    图 9.5:用群坑管理你的群
7.  Editing the stack brings up a page where you can make changes directly to the stack as if you were making changes to `docker-compose.yml`. Move down to the file, find the replicas entry for the web service, and change it to `3` from `2`:
    ![Figure 9.6: Editing your swarm with Swarmpit ](img/B15021_09_06.jpg)
    图 9.6:用群坑编辑你的群
8.  Click on the `Deploy` button at the bottom of the screen. This will deploy the changes to your `test_swarm` stack into the environment and return you to the `test_swarm` stack screen, where you should now see `3/3` replicas of the web service running:
    ![Figure 9.7: Increased number of web services in Swarmpit  ](img/B15021_09_07.jpg)
    图 9.7:群坑中的网络服务数量增加
9.  Notice that most of the options in Swarmpit are linked. On the `test_swarm` stack page, if you click on the web service from the `services` panel, you will open the `Service` page for the `test_swarm_web` service. If you click the menu, you should see the following page:
    ![Figure 9.8: Managing services with Swarmpit ](img/B15021_09_08.jpg)
    图 9.8:使用群坑管理服务
10.  从菜单中选择`Rollback Service`，您将看到`test_swarm_web`服务的副本数量回滚到两个副本。
11.  Finally, return to the `Stacks` menu and select the `test_swarm` again. With the `test_swarm` stack open, you have the option to delete the stack by clicking on the trash can icon toward the top of the screen. Confirm that you would like to delete the stack, and this will bring `test_swarm` down again and it will no longer be running on your node:
    ![Figure 9.9: Deleting a web service in Swarmpit ](img/B15021_09_09.jpg)
图 9.9:删除群坑中的网络服务
注意
请注意，群坑将允许您删除`swarmpit`栈。您将看到一个错误，但是当您尝试重新加载页面时，它将不会再次出现，因为所有服务都将停止运行。
虽然这只是对 Swarmpit 的快速介绍，但是使用本章中的知识，界面将允许您直观地部署和更改您的服务和栈。几乎所有你可以从命令行完成的事情，你也可以从 Swarmpit 网络界面完成。这就把我们带到了本练习的结尾和本章的结尾。本章下一节的活动旨在帮助您进一步扩展知识。
## 活动 9.01:将全景徒步应用部署到单节点 DockerSwarm
您需要使用 Docker Swarm 在全景徒步应用中部署网络和数据库服务。您将收集配置，为应用创建一个合成文件，并使用`docker-compose.yml`文件将它们部署到单个节点 Swarm。
完成本活动需要采取的步骤如下:
1.  收集所有的应用，构建集群服务所需的 Docker 映像。
2.  创建一个`docker-compose.yml`文件，允许将服务部署到 Docker Swarm。
3.  创建服务部署后需要使用的任何支持映像。
4.  将您的服务部署到 Swarm 上，并验证所有服务都能够成功运行。
您运行的服务应该类似于这里显示的输出:
```
ID       NAME                MODE         REPLICAS
  IMAGE
k6kh…    activity_swarm_db   replicated   1/1
  postgres:latest
copa…    activity_swarm_web  replicated   1/1
  activity_web:latest  
```
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor342)找到。
继续下一个活动，因为这将巩固您在本章中已经学习的一些信息。
## 活动 9.02:在群运行时执行应用更新
在本活动中，您需要对全景徒步应用进行一个小的更改，这将允许您构建一个新的映像，并将该映像部署到正在运行的 Swarm 中。在本练习中，您将执行滚动更新，将这些更改部署到您的 Swarm 集群中。
完成本活动所需的步骤如下:
1.  如果您在*活动 9.01 中没有群，将全景徒步应用部署到仍在运行的单节点 DockerSwarm*，请再次部署群。
2.  对全景徒步应用中的代码做一个小的更改——一些可以测试的小东西，以验证您已经对您的环境进行了更改。您正在进行的更改并不重要，因此它可能是与配置更改一样基本的事情。本活动的主要重点是对服务执行滚动更新。
3.  构建要部署到运行环境中的新映像。
4.  Perform an update to the environment and verify that the changes were successful.
    注意
    此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor343)找到。
# 总结
本章做了大量工作，将我们的 Docker 环境从手动启动单映像服务转移到使用 Docker Swarm 的更加生产就绪和完整的环境。本章开始时，我们深入讨论了 Docker Swarm 以及如何从命令行管理服务和节点，提供了一个命令列表及其用法，随后将它们实现为运行测试 Django web 应用的新环境的一部分。
然后，我们使用 NGINX 代理进一步扩展了该应用，并利用 Swarm 功能来存储配置和机密数据，因此它们不再需要作为 Docker 映像的一部分，而是可以包含在我们正在部署的 Swarm 中。然后，我们向您展示了如何使用带有 Swarmpit 的网络浏览器来管理您的 swarm，提供了我们之前在命令行上所做的工作的概要，并从网络浏览器中进行了许多这样的更改。使用 Docker 时，Swarm 并不是唯一可以编排环境的方法。
在下一章中，我们将介绍 Kubernetes，这是另一个用于管理 Docker 环境和应用的编排工具。在这里，您将看到如何将 Kubernetes 用作项目的一部分，以帮助减少管理服务的时间并改进应用的更新。