receivers when all the ﬁelds (e.g., action, data and etc.) in the re-
ceivers are given non-null values. All these heuristics that helped
us conﬁrm the ﬁnal exploitability of ASVs are not very straightfor-
ward. Therefore, how to further guide the API testing for vulnera-
bility analysis is an interesting but challenging task for our future
work. We note that recently, similar observations have appeared in
the UI vulnerability analysis [25].
4. PROOF-OF-CONCEPT ATTACKS
In this section, we perform threat analyses by engineering several
proof-of-concept attacks (PoCs) exploiting the discovered ASVs
under various application contexts. With a thorough understand-
ing on the consequences of the ASVs and their easily-exploitable
nature, we design the PoCs to cause various user impacts. The
recorded videos of some PoCs can be found in the following link:
https://sites.google.com/site/heartstrokevulnerability/.
4.1 Attack Design Overview
In our current design, we implement the PoCs in a third party
app, which can be installed on the victim device through repack-
aging popular apps [27, 57, 41] or other social engineering ap-
proaches. This is a common requirement for Android-based at-
tacks [38, 51]. Remote exploitations through other code injection
channels (e.g., vulnerable HTML-5-based Android apps [42]) are
also applicable, due to the easily-exploitable nature of the ASVs.
Exploiting ASV #1 and #2 requires no permission, and exploiting
ASV #3 and #4 requires only one normal permission to add win-
dow. The design of some speciﬁc attacks might need one/two com-
mon permissions (e.g., the internet or boot_complete permission).
4.2 Attack Design and Implementation
4.2.1 Hindering Critical Application Patching
Attack Scenario. Due to the evolving nature of mobile systems,
mobile apps (e.g., antivirus, banking and other apps) have to patch
vulnerabilities [7, 3, 16, 19]) very frequently. We show that by
exploiting some of the ASVs, the app-update task for the vulner-
ability patching can be manipulated (either being delayed or com-
pletely failed). Suppose that two banking apps need to be updated
(patched) in an Android device: one is the Citi bank client side app
(not vulnerable) and the other is the Bank of America app (BoA-
app). Also assuming that only the BoA-app has a serious vulner-
ability, which can be leveraged to steal users’ account credentials.
Also, the adversary only wants to cause the patching failure in the
targeted BoA app, so that the vulnerability in the BoA app can be
continuously leveraged without effecting the patching process of
other apps. Next we show how this can be achieved.
Design and Implementation. The app-update task performed
by the packagemanager service (PMS) has three sequential sub-
tasks, including removing the old package, adding a new app pack-
It needs to grab the AMS.this
age and conﬁguring the new app.
lock three times to send three broadcast intents sequentially to other
components (e.g., installd) with action strings package_removed,
package_added and package_updated, respectively.
In this way,
other system components can collaborate in this atomic process to
help in various sub-tasks. Through triggering the ASV#1 or ASV#2
of the AMS, one can block the following sub-tasks (adding pack-
age or conﬁguring package). We test different timings to trigger the
exploit and ﬁnd the best moment is right after the removal of the
old package. Therefore, we implement our PoC-App by registering
one receiver with the package_removed action.
Note that this attack is highly targeted, as it only performs the ex-
ploitation for the system that has installed the targeted vulnerable
app (here the BoA-app), but not the other apps. This can be done
by obtaining a list of vulnerable apps’ version codes and package
names through ofﬂine reverse-engineering. Our app will only plan
the ASV (i.e., register enough receivers according to the results in
Figures 3 and 4) when the installed package name (boa.app) and
version number are matched with that of the targeting app. This
can be veriﬁed by calling packagemanager.getInstalledPackages().
Also, the planned ASV will only be triggered by receiving the
broadcast with the package_removed action and the updated pack-
age is boa.app.
Result. When the AMS.this monitor lock is being held over one
minute, the system reboots. The PMS of Android has a failure-
recovery mechanism, which rolls back the unﬁnished app-update
task to ensure its atomicity. This mechanism provides a consistent
state for the whole system; however, it unexpectedly leaves the vul-
nerable app unpatched. Therefore, the malware can keep leveraging
the known loophole in the app (e.g., keep on stealing users’ banking
credits). By exploiting the similar scenario for less than a minute
(the watchdog bite will not be triggered), attackers can control the
exploit to only delay the update of critical apps. Based on this ob-
servation, we implemented a PoC that extend the null-protection
window length described in the engine-update attack against the
mobile antivirus apps discovered in a previous work [38]. Both
PoCs are tested for 10 times on four Android devices listed in Ta-
ble 2 with 100% success rate with no Android permission needed.
4.2.2 Anti-Removal Techniques
Attack Scenario.
In this scenario, any malicious app can be
potentially equipped with an anti-removal technique by naturally
exploiting the ASV#2. By checking the control ﬂow of the AMS,
we ﬁnd that an app removal operation includes two tasks. First, the
system needs to kill the relevant active processes of the target app
and deregister its running status through activitymanager. Second,
the package-removal task is then executed.
Design and Implementation. In the ﬁrst task, to clean up the
dynamic app record, the system has to invoke the risky method
AMS.cleanUpApplicationRecordLocked() of ASV#2. Now, if the
malicious app manages to exploit the risky method of ASV#2 (reg-
istered certain amount of receivers), its package can never be re-
moved. Because the whole removal process is guaranteed to be
blocked at the ﬁrst task, it cannot proceed to the second package-
removal task. We design a PoC app for this case. Our app regis-
ters 150 receivers, which blocks the removal operation at the ﬁrst
task for over a minute and eventually cause a watchdog bite on the
SS, followed by a soft reboot. When the system reboots, the PoC
app listens on the system boot-up broadcast message and exploits
ASV#2 again.
Result. When testing the anti-removal technique, we use a third-
party removal app as well as the system setting (removal) app to
perform the removal operation for ﬁve times on four various de-
vices. The test result is quite consistent. All the 40 trials are
blocked for one minute and followed by a soft reboot, and our PoC
app package remains untouched after the soft reboots. Note that
Google remote uninstall mechanism will not help on this either, as
it still needs to kill the running PoC process(es) on the device lo-
1243cally before actually removing the malicious package. Therefore,
an average person will have a hard time dealing with malware that
is equipped with this technique.
4.2.3 Repeated DoS Attacks
Attack Scenario. Many ransomware families [4, 10, 13, 5, 12]
are now attacking the mobile devices. We ﬁnd that the discovered
ASVs can serve as ideal building blocks to construct ransomware.
One straightforward way is to exploit these ASVs to cause con-
tinuous DoS effects on the Android devices and then ransomware
writers can request for a ransom to remove the consequences.
Design and Implementation. We design two PoCs. One PoC
is to cause soft reboots continuously. When the system performs
a soft reboot or a complete restart, Android broadcasts a message
with action.boot_complete. Our PoC app registers the boot_complete
receivers to get notiﬁed and then plans the next exploitation. The
ransomware writers can add an activity view on top of other views
right before triggering the exploits to present information for re-
questing a ransom. After receiving the ransom, he/she can remotely
command the ransomware to stop triggering these ASVs. Basically,
before triggering the next exploit, the ransomware will try to con-
nect to a remote server for a command to release the attacks. The
other PoC will continuously freeze the device using the discovered
ASVs (each freezing period is less than 50 seconds). Both PoCs
will not allow the user to interact with the screen.
Result. The result shows that the designed PoC apps are quite
effective at causing ss_freezing with a ransom view presented on
the screen. Also, when combined with the anti-removal technique,
it becomes more difﬁcult to clean up.
4.2.4 Remote Exploits via HTML-5 Code Injection.
Remote-code-injection attack [42] on HTML-5-based Android
apps is a well studied problem. Since most of the plugins (e.g.,
Apache Cordova plugins) for these apps can retrieve the context
object, the injected malicious code can invoke the Android APIs
directly. For example, one can call sendBroadcast(intent) through
((CordovaActivity)this.cordova.getActivity()).sendBroadcast(intent).
Thus, one can inject JavaScript code to construct the ASV exploits
remotely. We use an Apache Cordova plugin and write relevant
payload (20 lines) in JavaScript to exploit ASVs.
4.2.5 Attack at Mission Critical Moments
Android OS is widely used in various mission critical scenarios,
for instance, serving medical devices [1, 11, 21], aircraft naviga-
tion [14, 15], Android-auto navigation [2] and embedded in nano-
satellites [18]. To be more stealthy, the ASVs may be exploited
only at some critical moments (e.g., aircraft navigation [48], moni-
toring patient and etc.) when the above apps are running. Here crit-
ical moments can be inferred from the running status of the mobile
devices/apps based on various side channels discovered in previous
works [38, 48].
5. POSSIBLE DEFENSE MECHANISMS
We reported all the identiﬁed ASVs to Google’s security team,
who conﬁrmed our ﬁndings and acknowledged our contributions.
CVE IDs for the ASVs will be generated after fully patching. Based
on the understanding of the root cause of this general design ﬂaw,
we are now proposing mitigation to end users and defenses to An-
droid framework developers.
5.1 Apply User Side Remediations
If a vigilant user identiﬁes the suspicious app, he/she can learn
to boot the system into the “safe mode” to remove it. However, a
user can hardly identify the remote exploits launched via HTML5-
based vulnerability in trusted apps. A more knowledgeable and
determined user can perform a factory reset of the phone through
fast-boot. This, however, requires that most of the important data
have already been backed up somewhere else (e.g., in the cloud).
Note that an app can still repackage/disguise itself as benign and
only exploit the system at a few mission critical moments to cause
deadly damages. Thus, we need system-level defense solutions.
5.2 Use Access Control Mechanisms
In the system level defense, one may easily think of leveraging
Android permissions and access control mechanisms. However,
they may only help partially mitigate the problem. First, not all the
critical resources or APIs are currently protected by permissions.
For example, two of the discovered ASVs can be exploited with-
out any permission. Second, users must have a good understand-
ing of the added Android permissions. This, however, has been
shown to be very ineffective according to a study [34] (only 3%
of the surveyed users have a good comprehension of permissions).
Third, the general access control mechanisms (e.g., ASM [36],
SEAndroid [52] and etc.) are insufﬁcient either to prevent the
DoS attacks because they are mostly stateless. Once the permis-
sions/capabilities are granted to a vulnerable trusted/malicious app,
it is difﬁcult to prevent them from being misused.
5.3 Deﬁne Resource Usage Thresholds
One stateful approach is to use thresholds to restrict the number
of resources that each app (component) can register. For instance,
one may limit the number of receivers an app can register or con-
trol the number of view add/update operations allowed for a normal
app. However, the appropriate thresholds are not easy to deﬁne for
market-level malware detection. The static analysis can hardly be
precise to determine the number of resource registrations. Dynamic
testing may not trigger all the execution scenarios well enough.
Hence, inappropriate thresholds can cause lots of false alarms on
legitimate apps that need to use the resources frequently. Also, the
market-level malware detection cannot prevent remote exploits that
are loaded dynamically.
5.4 Retroﬁt the Concurrency Control Design
One crucial observation from our research is that every system
service (in Table 1) uses only one primary monitor lock for most
of the critical sections that manipulate different variables in differ-
ent services (e.g., AMS.this lock in the activitymanager). Thus, one
approach to retroﬁt the SS design is to provide a ﬁne-grained con-
currency control design in system services. The high level design
principle is similar to that on the Big Kernel Lock reﬁnement [45].
Based on our observation, the requests for startActivity(), start-
Service() and sendBroadcast() should not compete for the same
AMS.this lock; otherwise, it can easily cause the freezing of the
whole activitymanager. Hence, instead of using the AMS.this lock,
we use the AMS.mRegisteredReceivers object (which contains all
the dynamically registered receivers) as a ﬁne-grained lock. Ac-
cordingly, only the threads that dynamically resolve or manipulate
the receivers have to compete for the AMS.mRegisteredReceivers
object lock before entering relevant critical sections. This prevents
the blocking of other types of requests in the activitymanager (e.g.,
startActivity()). Our experiments show that other tasks now become
responsive even when the ASVs #1 and #2 are exploited. For in-
stance, activities and services can still be started, so the user is able
to handle the ransomware cases through the launcher app and kill
the suspicious apps.
1244However, lock contention for AMS.mRegisteredReceivers still ex-
ists. For instance, multiple broadcast threads (readers) still need to
wait for the ﬁrst broadcast thread (reader) to ﬁnish its work. We ob-
serve that currently there is no such optimization based on readers-
writer lock (RWL) [46] (e.g., the Java ReentrantReadWriteLock) in
system services to allow concurrent access among readers (broad-
cast threads). We further propose a ﬁne-grained design to lever-
age the read-copy update [31] (RCU) mechanism whenever pos-
sible. The RCU is an improvement over the RWL, which ensures
the coherence among readers by copying a new version of objects
for the single writer. Comparing to RWL, RCU further ensures
that the updating of the AMS.mRegisteredReceivers object can no
longer block the message broadcasting jobs. Hence, it can be used
here to further boost the throughput and prevent some relevant at-
tack scenarios (e.g., the anti-patching attack). This, however, can-
not cope with the scenarios when several writers (e.g., the watch-
dog thread8) are starved due to a malicious writer thread (e.g.,
a binder thread that executes cleanUpApplicationRecordLocked).
This means some ASVs can still cause some damages in the sys-
tem, e.g., the anti-removal attack.
5.5 Design a Smart Watchdog Mechanism
To avoid the writer-writer starvation and other failure situations
(e.g., the deadlocks), one on-device protection is to set thresholds
to monitor and detect a burst of resource usages (e.g., view manipu-
lations). Therefore, a lightweight but smarter watchdog is designed
help recover the system from failures. One problem with the cur-
rent watchdog design is that it simply kills the whole SS process
whenever it fails to grab the lock after about 60s. To better resolve
this problem, the watchdog thread needs to quickly identify the
problematic thread(s) and gracefully resolve the failure situations
by only removing those problematic threads.
We observe that when a malicious app exploits the ASV, one
binder thread in the SS is assigned to fulﬁll the actual RPC by ac-
cessing the critical sections and blocking all the other SS writer
threads for the same lock. In our design, once the watchdog thread
ﬁnds that the monitor lock(s) is not available (e.g., in 20 seconds),
it will quickly diagnose the problem by calling Thread.holdsLock()
and Thread.getAllStackTraces() to identify whether it is the binder
thread(s)9 that holds the monitor lock. Also, instead of killing the
whole SS, it only helps exit the problematic threads. Since binder
threads loop on the commands delivered from the kernel binder
driver to execute various RPC calls, one may want to send the
BR_FINISHED command10 to deliver a TIMED_OUT to the prob-
lematic binder thread. However, we ﬁnd that the busy (problematic)
binder thread cannot take the command. Thus, we choose to let the
watchdog thread use a JNI call to invoke the tgkill() syscall to send
inter-thread signals (i.e., SIGTERM) speciﬁcally to the problem-
atic binder thread(s). During our test we ﬁnd that, the binder thread
has to add a signal handler using the sigaction() syscall to handle
the SIGTERM signal and gracefully exit itself to resolve the star-
vation (or deadlocks). Otherwise, the whole SS will still be killed.
The other beneﬁt of exiting the problematic binder thread(s) is that
by default, the kernel binder driver will spawn new binder threads
(via the BR_SPAWN_LOOPER command) and add them into the
thread pool whenever the number of binder threads is not enough.
8With the RCU setup, we need to modify the watchdog to always