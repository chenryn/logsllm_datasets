title:EncDBDB: Searchable Encrypted, Fast, Compressed, In-Memory Database
Using Enclaves
author:Benny Fuhry and
Jayanth Jain H. A and
Florian Kerschbaum
4
5
0
0
0
.
1
2
0
2
.
7
8
9
8
4
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
7
-
2
7
5
3
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
t
s
1
5
1
2
0
2
2021 51st Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
EncDBDB: Searchable Encrypted, Fast,
Compressed, In-Memory Database Using Enclaves
Benny Fuhry
SAP Security Research
Karlsruhe, Germany
Jayanth Jain H A
SAP Security Research
Karlsruhe, Germany
Florian Kerschbaum
University of Waterloo
Waterloo, Canada
Abstract—Data conﬁdentiality is an important requirement
for clients when outsourcing databases to the cloud. Trusted
execution environments, such as Intel SGX, offer an efﬁcient
solution to this conﬁdentiality problem. However, existing TEE-
based solutions are not optimized for column-oriented,
in-
memory databases and pose impractical memory requirements
on the enclave. We present EncDBDB, a novel approach for
client-controlled encryption of a column-oriented,
in-memory
databases allowing range searches using an enclave. EncDB-
DB offers nine encrypted dictionaries, which provide different
security, performance, and storage efﬁciency tradeoffs for the
data. It is especially suited for complex, read-oriented, analytic
queries as present, e.g., in data warehouses. The computational
overhead compared to plaintext processing is within a millisecond
even for databases with millions of entries and the leakage is
limited. Compressed encrypted data requires less space than
a corresponding plaintext column. Furthermore, EncDBDB’s
enclave is very small reducing the potential for security-relevant
implementation errors and side-channel leakages.
I. INTRODUCTION
Data warehouses are used by companies for business
intelligence and decision support. They contain large datasets
and the underlying database management systems (DBMS)
are optimized for complex, read-oriented, analytic queries.
Outsourcing the data and query processing to a cloud provider
can reduce costs, minimize maintenance efforts, and increase
availability. However, companies are reluctant to outsource their
sensitive data to an untrusted cloud provider due to possible
data leakage, government access, and legal liability.
Cryptographic approaches can be a building block for an
encrypted cloud database. For instance, fully homomorphic
encryption [1] supports arbitrary computations on encrypted
data, but is still too slow for practical deployability [2], [3].
Other approaches use multiple encryption schemes to perform
different database functionalities [4], [5]. The encryption
schemes are layered and/or stored in parallel, introducing
storage overhead, and careful query rewriting is necessary.
Encrypted database can also be based on a trusted execu-
tion environment (TEE), which provides an isolated, trusted
environment for application code and data. However, current
TEE-based approaches do not support persistency [6], leak
the result of every primitive operation [7], or assume a not
available trusted environment size [8], [9]. Also, these solutions
do not consider data compression to reduce the size of large
databases.
We propose and implement EncDBDB, a concept for an
encrypted, column-oriented, dictionary-encoding–based, in-
memory database supporting analytic queries on large datasets.
Column-oriented data storage optimizes the processing of
analytic workloads [10], [11], [12], in-memory processing
boosts the overall performance [13], [14], [15], and dictionary
encoding reduces the storage space overhead of large (en-
crypted) datasets [16], [17]. We focus on a complex, required
query type: range queries. Obviously, equality queries are
also possible as they can be expressed as range queries.
Additionally, we explain how EncDBDB can handle joins,
insertions, deletions, updates, counts, aggregations, and average
calculations. Table I compares enclave code size, performance,
and storage overhead of our approach to the most relevant
alternative design approaches from the literature. We emphasize
that security is a multi-faceted property and while we focus on
conﬁdentiality and the smallest enclave code, other approaches
provide other security properties, which we detail in Section VII.
We leave integrity as future work. The main contributions of
EncDBDB are:
• A new architecture for search over encrypted data suitable
for column-oriented, in-memory databases.
• Nine different encrypted dictionaries from which data
owners can freely select per column according to their
requirements. The encrypted dictionaries provide different
security (order and frequency leakage), performance, and
storage efﬁciency tradeoffs. The security ranges from the
equivalent of deterministic order-revealing encryption to
range predicate encryption.
• Integration into MonetDB [18], an open source DBMS.
The TEE protects only 1129 lines of code, reducing the
potential for security-relevant implementation errors and
side-channel leakages. Query optimization and auxiliary
database functionalities operate without code changes.
• Sub-millisecond overhead for encrypted range queries
compared to plaintext range queries, on a real-world SAP
customer database containing millions of entries.
• Less storage space required for a compressed, encrypted
column with the appropriate encrypted dictionary than for
a plaintext column with the same data.
II. BACKGROUND
In this section, we discuss the beneﬁts of combining in-
memory processing, column-orientated storage, and dictionar-
978-1-6654-3572-7/21/$31.00 ©2021 IEEE
DOI 10.1109/DSN48987.2021.00054
438
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:24:56 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Comparison of related TEE-based, encrypted databases and EncDBDB. The overheads compare the respective approach with a plaintext database.
We present lower bounds of the overheads to the advantage of the approaches, taken from the corresponding papers where available. The last column presents
the lines of code (LOC) of the used enclaves. Our related work section gives more details and discusses the provided security.
Approach
EnclaveDB [9]
ObliDB [6]
StealthDB [7]
EncDBDB
Optimized for
Workload
OLTP
OLTP & OLAP
OLTP
OLAP
Protection Object
Compression
in-memory storage and query engine
data structure (array or B+-tree)
primitive operators (e.g., ≤ , ≥ , +, ∗)
data structure (dictionary)




Overhead
Performance
Storage
> 20 %
N/A
> 100 % > 200 %
> 300 % > 20 %
< 100 % ∼ 8.9 %
Enclave Code
Size in LOC
∼ 235,000
∼ 10,000
∼ 1500
1129
ies; formally introduce dictionaries; examine the TEE used
in this work—Intel SGX; and present the used encryption
scheme—authenticated encryption
A. In-memory, Column-oriented, Dictionary-encoding–based
Databases
Many commercial and open source DBMS vendors offer
in-memory databases for analytical data processing, e.g., SAP
HANA [19], Oracle RDBMS [20], and MonetDB [21]. In-
memory databases permanently store the primary data in main
memory and use the disk as secondary storage. The major
beneﬁt of in-memory databases is the lower access time of
main memory compared to disk storage [15].
One possible database storage concept is column-oriented
storage, i.e., successive values of each column are stored con-
secutively, and surrogate identiﬁers are (implicitly) introduced
to connect the rows [11], [12], [22]. The combination of in-
memory databases and column-oriented storage reduces the
number of cache misses, which strongly inﬂuences the in-
memory performance. All in-memory databases mentioned
above support column-oriented storage.
Additionally, these databases and many others use data
compression mechanisms to exploit redundancy within data.
Abadi et al. [16] study multiple database compression schemes
and show how they can be applied to column-oriented databases.
According to the authors, column-oriented databases particu-
larly proﬁt from compression. We only consider a compression
scheme called dictionary encoding, because it is the most
prevalent compression used in column-oriented databases [16].
Throughout this paper, we say a tuple T contains |T| values,
i.e., T = (T0, . . . , T|T |−1). We use v ∈ T as a shorthand for a
value v that is contained in the tuple T . The idea of dictionary