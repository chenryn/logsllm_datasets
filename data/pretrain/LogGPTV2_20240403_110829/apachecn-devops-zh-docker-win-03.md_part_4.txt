微软的 SQL Server 映像通过允许您在运行时附加数据库和日志文件来处理这个问题，因此它是在主机上已经有了数据库文件的基础上工作的。在这种情况下，您可以直接使用映像，装载您的数据文件夹，并运行一个带有参数的 SQL Server 容器，告诉它要附加哪个(哪些)数据库。这是一种非常有限的方法——这意味着您需要首先在不同的 SQL Server 实例上创建数据库，然后在运行容器时附加它。这不符合自动发布流程。
对于我的自定义映像，我想做一些不同的事情。该映像包含 Dacpac，因此它拥有部署数据库所需的一切。当容器启动时，我希望它检查数据目录，如果它是空的，那么我就通过部署 Dacpac 模型来创建一个新的数据库。如果容器启动时数据库文件已经存在，那么首先附加数据库文件，并使用 Dacpac 模型升级数据库。
这种方法意味着您可以使用相同的映像为新环境运行新的数据库容器，或者升级现有的数据库容器而不会丢失任何数据。无论您是否从主机装载数据库目录，这都同样有效，因此您可以让用户选择如何管理容器存储，因此该映像支持许多不同的场景。
这样做的逻辑都在`Initialize-Database.ps1` PowerShell 脚本中，Dockerfile 将其设置为容器的入口点。在 Dockerfile 中，我将数据目录传递给`data_path`变量中的 PowerShell 脚本，该脚本检查 NerdDinner 数据(`mdf`)和 log ( `ldf`)文件是否在该目录中:
```
$mdfPath = "$data_path\NerdDinner_Primary.mdf"
$ldfPath = "$data_path\NerdDinner_Primary.ldf"
# attach data files if they exist: 
if ((Test-Path $mdfPath) -eq $true) {
   $sqlcmd = "IF DB_ID('NerdDinner') IS NULL BEGIN CREATE DATABASE NerdDinner ON (FILENAME = N'$mdfPath')"   
   if ((Test-Path $ldfPath) -eq $true) {
   $sqlcmd = "$sqlcmd, (FILENAME = N'$ldfPath')"
   }
   $sqlcmd = "$sqlcmd FOR ATTACH; END"
   Invoke-Sqlcmd -Query $sqlcmd -ServerInstance ".\SQLEXPRESS"
}
```
This script looks complex, but actually, it's just building a `CREATE DATABASE...FOR ATTACH` statement, filling in the paths of the MDF data file and LDF log files if they exist. Then it invokes the SQL statement, which attaches the database files from the external volume as a new database in the SQL Server container.
这包括用户运行带有卷装载的容器，并且主机目录已经包含来自先前容器的数据文件的场景。这些文件是附加的，数据库在新容器中可用。接下来，脚本使用`SqlPackage`工具从 Dacpac 生成部署脚本。我知道`SqlPackage`工具的存在，我知道它的路径，因为它在构建器阶段被打包到我的映像中:
```
$SqlPackagePath = 'C:\Program Files\Microsoft SQL Server\140\DAC\bin\SqlPackage.exe'
& $SqlPackagePath `
    /sf:NerdDinner.Database.dacpac `
    /a:Script /op:deploy.sql /p:CommentOutSetVarDeclarations=true `
    /tsn:.\SQLEXPRESS /tdn:NerdDinner /tu:sa /tp:$sa_password  
```
如果容器启动时数据库目录为空，则容器上没有`NerdDinner`数据库，`SqlPackage`将生成一个带有一组`CREATE`语句的脚本来部署新的数据库。如果数据库目录确实包含文件，那么将附加现有的数据库。在这种情况下`SqlPackage`将生成一个包含一组`ALTER`和`CREATE`语句的脚本，以使数据库符合 Dacpac。
这一步生成的`deploy.sql`脚本将创建新的模式，或者对旧的模式应用更改来升级它。在这两种情况下，最终的数据库模式都是相同的。
最后，PowerShell 脚本执行 SQL 脚本，传入数据库名称、文件前缀和数据路径的变量:
```
$SqlCmdVars = "DatabaseName=NerdDinner", "DefaultFilePrefix=NerdDinner"...
Invoke-Sqlcmd -InputFile deploy.sql -Variable $SqlCmdVars -Verbose
```
在运行 SQL 脚本后，数据库存在于容器中，模式在 Dacpac 中建模，它是在 Dockerfile 的构建器阶段从 SQL 项目构建的。数据库文件位于具有预期名称的预期位置，因此如果此容器被来自同一映像的另一个容器替换，新容器将找到现有数据库并附加它。
# 在容器中运行数据库
现在我有了一个可以用于新部署和升级的数据库映像。开发人员可以使用该映像，他们在处理某个功能时可能无需装载卷即可运行该映像，因此每次运行容器时都可以从一个新的数据库开始。在需要通过运行包含数据库文件的卷的容器来保留现有数据库的环境中，也可以使用相同的映像。
这就是如何在 Docker 中运行 NerdDinner 数据库，使用默认的管理员密码、数据库文件的主机目录，并命名容器，以便我可以从其他容器访问它:
```
mkdir -p C:\databases\nd
docker container run -d -p 1433:1433 ` --name nerd-dinner-db ` -v C:\databases\nd:C:\data ` dockeronwindows/ch03-nerd-dinner-db:2e
```
第一次运行该容器时，Dacpac 将运行以创建数据库，并将数据和日志文件保存在主机上的装载目录中。您可以用`ls`检查文件是否存在于您的主机上，`docker container logs`的输出显示生成的 SQL 脚本正在运行，并正在创建资源:
```
> docker container logs nerd-dinner-db
VERBOSE: Starting SQL Server
VERBOSE: Changing SA login credentials
VERBOSE: No data files - will create new database
Generating publish script for database 'NerdDinner' on server '.\SQLEXPRESS'.
Successfully generated script to file C:\init\deploy.sql.
VERBOSE: Changed database context to 'master'.
VERBOSE: Creating NerdDinner...
VERBOSE: Changed database context to 'NerdDinner'.
VERBOSE: Creating [dbo].[Dinners]...
...
VERBOSE: Deployed NerdDinner database, data files at: C:\data
```
我使用的`docker container run`命令也发布了标准的 SQL Server 端口`1433`，所以您可以通过. NET 连接远程连接到容器内部运行的数据库，或者使用 **SQL Server 管理工作室** ( **SSMS** )。如果您的主机上已经运行了一个 SQL Server 实例，您可以将容器的端口`1433`映射到主机上的不同端口。
要使用 SSMS、Visual Studio 或 Visual Studio 代码连接到容器中运行的 SQL Server 实例，请使用`localhost`作为服务器名称，选择“SQL Server 认证”，并使用`sa`凭据。我使用的是 **SqlElectron** ，这是一个非常轻量级的 SQL 数据库客户端:
![](img/6fb1e102-ad53-4aca-a138-a1de00d35260.png)
然后，您可以像使用任何其他 SQL Server 数据库一样使用 Dockerized 数据库，查询表和插入数据。在 Docker 主机上，您使用`localhost`作为数据库服务器名称。通过发布端口，您可以使用主机名称作为服务器名称，在主机之外访问容器化数据库。Docker 会将端口`1433`上的任何流量路由到容器上运行的 SQL Server。
# 从应用容器连接到数据库容器
Docker 在平台中内置了一个 DNS 服务器，由容器用于服务发现。我用一个显式名称启动了 NerdDinner 数据库容器，在同一个 Docker 网络中运行的任何其他容器都可以通过其名称访问该容器，就像 web 服务器通过其 DNS 主机名访问远程数据库服务器一样:
![](img/57115c85-6752-43a3-9e3e-9f7c07780995.png)
这使得应用配置比传统的分布式解决方案简单得多。每个环境看起来都一样。在开发、集成测试、质量保证和生产中，网络容器总是使用`nerd-dinner-db`主机名连接到数据库，该主机名实际上在容器内运行。容器可以在同一个 Docker 主机上，也可以在 Docker Swarm 集群中的单独机器上，这对应用是透明的。
Service discovery in Docker isn't for containers only. A container can access another server on the network using its hostname. You could run your web application in a container, but still have it connected to SQL Server running on a physical machine rather than using a database container.
对于每个环境，有一项配置可能不同，那就是 SQL Server 登录凭据。在 NerdDinner 数据库映像中，我使用了与本章前面`dockeronwindows/ch03-aspnet-config`相同的配置方法。我已经将`Web.config`中的`appSettings`和`connectionStrings`部分分割成单独的文件，Docker 映像将这些配置文件与默认值捆绑在一起。
开发人员只需从映像中运行一个容器，它将使用默认的数据库凭据，这些凭据与 NerdDinner 数据库 Docker 映像中内置的默认凭据相匹配。在其他环境中，容器可以通过卷装载运行，使用主机服务器上的配置文件，这些文件指定不同的应用设置和数据库连接字符串。
这是一种简化的安全凭证方法，我用它来展示如何在不改变代码的情况下使我们的应用对 Docker 更加友好。将凭据保存在服务器上的纯文本文件中并不是管理机密的好方法，当我在 Docker 中介绍安全性时，我将在[第 9 章](03.html)、*了解 Docker 的安全风险和优势、*中再次讨论这一点。
本章对 NerdDinner 的 Dockerfile 进行了一些更新。我添加了运行状况检查和从 IIS 中回显日志的设置。我仍然没有对 NerdDinner 代码库做任何功能上的更改，只是拆分`Web.config`文件，设置默认的数据库连接字符串使用 SQL Server 数据库容器。当我现在运行 web 应用容器时，它将能够通过名称连接到数据库容器，并使用在 Docker:
```
docker container run -d -P dockeronwindows/ch03-nerd-dinner-web:2e
```
You can explicitly specify the Docker network a container should join when it's created, but on Windows, all containers default to joining the system-created Docker network called `nat`. The database container and web container are both connected to the `nat` network, so they can reach each other by the container name.
当容器启动时，我现在可以使用容器的端口打开网站，单击注册链接，并创建一个帐户:
![](img/3a32ee44-2cc1-4d04-9244-6d2dd9139dad.png)
“注册”页查询在 SQL Server 容器中运行的 ASP.NET 成员资格数据库。如果注册页面正在运行，那么 web 应用与数据库有一个工作连接。我可以在 Sqlectron 中验证这一点，查询`UserProfile`表，看到新的用户行:
![](img/d293f55f-0ad4-4806-b9a6-f5e771799b2e.png)
我现在已经将 SQL Server 数据库从 web 应用中分离出来，每个组件都在一个轻量级 Docker 容器中运行。在我的开发笔记本电脑上，每个容器在空闲时使用不到 1%的主机 CPU，数据库使用 250 MB 内存，web 服务器使用 70 MB 内存。
`docker container top` shows you information on the processes running inside a container, including memory and CPU.
容器对资源要求不高，因此将功能单元拆分成不同的容器是没有坏处的，然后您可以分别扩展、部署和升级这些组件。
# 分解单片应用
传统。依赖于 SQL Server 数据库的. NET web 应用可以以最少的工作量迁移到 Docker，而无需重写任何应用代码。在我的 NerdDinner 迁移的这个阶段，我有一个应用 Docker 映像和一个数据库 Docker 映像，我可以可靠地重复部署和维护它们。我也有一些有益的副作用。
将数据库定义封装在 Visual Studio 项目中可能是一种新的方法，但它为数据库脚本增加了质量保证，并将模式带入代码库中，因此可以与系统的其他部分一起进行源代码控制和管理。Dacpacs、PowerShell 脚本和 Dockerfiles 为不同的 IT 功能提供了新的共同点。开发、操作和数据库管理团队可以使用相同的语言在相同的工件上一起工作。
Docker 是 DevOps 过渡的推动者，但是不管 DevOps 是否在您的路线图上，Docker 都为快速、可靠的发布提供了基础。为了最好地利用这一点，您需要考虑将单一应用分解成更小的部分，这样您就可以频繁地发布高价值的组件，而不必对整个大型应用进行回归测试。
从现有应用中提取核心组件可以让您将现代的轻量级技术引入系统，而无需进行大型复杂的重写。您可以将微服务架构原则应用到现有的解决方案中，在那里您已经了解了值得提取到自己的服务中的领域。