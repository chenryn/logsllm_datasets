# From System Services Freezing to System Server Shutdown in Android: All You Need Is a Loop in an App

**Authors:**
- Heqing Huang†
- Sencun Zhu†
- Kai Chen‡
- Peng Liu†

**Affiliations:**
- †The Pennsylvania State University, University Park, PA, USA
- ‡Institute of Information Engineering, Chinese Academy of Sciences, China

**Emails:**
- {hhuang, szhu}@cse.psu.edu
- chenkai@iie.ac.cn
- PI:EMAIL

## Abstract

Android not only dominated 78.6% of the global smartphone market in 2014 but is also widely used in mission-critical applications such as medical devices, automotive and aircraft navigation systems, and satellite projects. The core of Android, the System Server (SS), is a multi-threaded process that provides essential system services and functionalities for applications. Given the complex design of the SS and its easily accessible system services via Android APIs, we hypothesize that the SS may be vulnerable to Denial of Service (DoS) attacks. Such attacks could lead to a single point of failure in the phone system.

By analyzing the source code, we identified a general design flaw in the concurrency control mechanism of the SS that makes it susceptible to DoS attacks. To validate our hypothesis, we developed a tool, ASV-Hunter, to efficiently explore high-risk methods in the SS. Our systematic analysis of 2,154 candidate methods revealed four previously unknown vulnerabilities in critical services, such as the ActivityManager and WindowManager, which we named Android Stroke Vulnerabilities (ASVs).

Exploiting these ASVs can continuously block all other requests for system services, leading to the shutdown of the SS and a soft reboot of the OS. Further threat analysis shows that an attacker can write a loop in an app to invoke Android APIs, causing the device to freeze or reboot at critical moments, such as during the patching of vulnerable apps. Additionally, ASVs can be exploited to enhance malware with anti-removal capabilities or to create ransomware by putting devices into continuous DoS loops.

Google promptly confirmed our findings and accepted several of our proposed improvements to the concurrency control design and failure recovery mechanisms in the SS.

## Categories and Subject Descriptors

- D.4.1 [Operating Systems]: Process Management–Concurrency; Synchronization
- D.4.6 [Operating Systems]: Security and Protection–Access controls; Invasive software
- C.4 [Performance of Systems]: Reliability, availability, and serviceability

## Keywords

- Mobile Security
- Denial of Service
- Vulnerability Detection
- Risk Measurement

## 1. Introduction

Android is an open-source operating system based on a modified Linux kernel, tailored for mobile devices. It holds a significant share of the current mobile market and is widely used in mission-critical scenarios, including medical devices, aircraft navigation, and satellite projects. The popularity of Android among users and developers is largely due to its unique middleware design, which provides a rich set of system services and APIs for application development.

The System Server (SS) is a crucial multi-threaded process in the Android middleware that contains most of the core Java-based system services. These services, such as the ActivityManager and PackageManager, provide essential functionalities to Android applications through Binder IPC/RPC. The SS is the backbone of the Android system, and without it, the system cannot run any applications in a user-acceptable manner.

Given the importance of the SS, one would expect its code to be robust and resilient to attacks. However, the complexity of the SS and the ease of access to its system services make it potentially vulnerable to DoS attacks. In this study, we examine the attack resilience of the SS from the perspective of DoS. While previous research has explored malware samples and vulnerabilities that cause DoS in the SS, a systematic analysis of its attack resilience is still lacking.

Through a detailed analysis of the SS design, we identified common traits in the Java-based system services. Most of these services use basic Java concurrency control mechanisms, such as synchronized blocks, and often rely on a few coarse-grained monitor locks to protect many critical sections. This design can lead to vulnerable scenarios that facilitate DoS attacks. We characterized these scenarios and built a tool, ASV-Hunter, to identify relevant vulnerabilities. Using this tool, we discovered four highly exploitable and previously unknown vulnerabilities in the ActivityManager and WindowManager services.

Exploiting these vulnerabilities causes the relevant system services to freeze, followed by a soft reboot of the Android middleware layer. We named these vulnerabilities Android Stroke Vulnerabilities (ASVs). We designed several proof-of-concept (PoC) attacks to demonstrate the potential damage, including turning a phone into a continuous freezing/rebooting loop at critical moments and preventing the removal of malware. Google's security team quickly responded to our findings and accepted some of our proposed improvements.

Our contributions include:
- New Understanding and Discovery: We identified a general type of design flaw in the SS that opens the door for various DoS attacks.
- Identifying New Vulnerabilities: We characterized the problem and developed ASV-Hunter to assist in identifying ASVs. Our tool processed all methods in the Android framework, enabling us to analyze 2,154 high-risk candidate methods and confirm four unknown ASVs.
- Performing Threat Analyses: We designed and implemented several PoC attacks on Android using the discovered ASVs.
- Defenses: We proposed short-term remediation for normal users and designed several improvements for the concurrency control mechanism and failure recovery scheme in the SS.

## 2. Android System Server

### 2.1. Android Overview

Android is a mobile operating system built on top of the Linux kernel. During boot-up, the bootloader performs low-level system initialization and loads the Linux kernel. The kernel initializes drivers and the file system, starts kernel daemons, and launches the first userspace process, /init. /init then starts the Zygote process, which preloads libraries, classes, and resources for VM-based processes. Zygote subsequently starts the System Server (SS) process, which contains most critical system services. Finally, various applications are started to serve users.

An Android application typically consists of four components: activities (user interface), services (background tasks), broadcast receivers (mailbox for broadcasts), and content providers (local database servers). Components communicate via Binder IPC by exchanging intent messages. Applications also call APIs to perform RPCs to system services via the Binder mechanism. The SS maintains a binder thread pool to handle multiple RPC-based requests simultaneously. Unlike applications, the SS does not have a user interface. It starts critical services like the ActivityManager and WindowManager, which manage the running status and life-cycle of all applications and window states, respectively.

The ActivityManager manages the life cycle of Android app components and maintains the complete running context for each app. The PackageManager manages the installation and uninstallation of app packages, parses manifest files, and registers app permissions and other static metadata. The SS is essential for the operation of Android, as it maintains most of the running contexts of applications and supports access control mechanisms. However, the security and reliability of the SS itself have not been thoroughly scrutinized.

### 2.2. System Server Concurrency Control

System services in the SS are usually started as Java threads and maintain system-wide states for various aspects, such as app life-cycles, window states, and registered app permissions. To ensure the correctness of program logic, the SS enforces concurrency control (CC) among threads handling concurrent IPC requests. Since no detailed study has been conducted on its CC design, we analyzed the source code to understand its mechanism.

#### Synchronized Code Blocks in the SS

The most frequently used CC mechanism in the SS is the synchronized block mechanism from the Java library. For example, `synchronized(monitorlock){...access/modify(data)...}` is a typical synchronized block. This built-in locking mechanism ensures that only one thread can execute the block of code at a time, and each thread entering a synchronized block sees the effects of all previous modifications guarded by the same lock.

Table 1 summarizes the statistics of synchronized critical sections (CSs) with watchdog-monitored locks in different system services across various Android versions. The overall ratio of monitored CSs to total CSs is 80%.

| **System Services** | **Watchdog Monitored CS Ratio (v5.1)** |
|---------------------|----------------------------------------|
| ActivityManagerService (v1.5-v5.1) | 279/345 = 81% |
| WindowManagerService (v1.5-v5.1) | 185/198 = 94% |
| PowerManagerService (v1.5-v5.1) | 49/60 = 82% |
| MountService (v4.0-v5.1) | 41/41 = 100% |
| InputManagerService (v4.0-v5.1) | 4/26 = 16% |
| NetworkManagementService (v4.0-v5.1) | 4/7 = 57% |
| PackageManagerService (v4.4-v5.1) | 171/243 = 70% |
| MediaRouterService (v5.0-v5.1) | 13/13 = 100% |
| MediaSessionService (v5.0-v5.1) | 21/21 = 100% |
| MediaProjectionManagerService (v5.0-v5.1) | 16/16 = 100% |
| **Total** | **783/970 = 80%** |

In Android 5.0.0, there are 1,917 synchronized code blocks across approximately 20 system services, indicating the extensive use of this mechanism.