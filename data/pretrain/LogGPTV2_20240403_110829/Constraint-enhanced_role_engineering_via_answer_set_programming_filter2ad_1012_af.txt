359-2004, Feb. 2004.
[3] C. Baral. Knowledge Representation, Reasoning and
Declarative Problem Solving. Cambridge University Press,
2003. http://www.baral.us/bookone/.
[4] D. A. Basin, S. J. Burri, and G. Karjoth. Dynamic
enforcement of abstract separation of duty constraints. In
ESORICS, pages 250–267, 2009.
[5] A. Colantonio, R. D. Pietro, A. Ocello, and N. V. Verde. A
formal framework to elicit roles with business meaning in
rbac systems. In ACM Symposium on Access Control Models
and Technologies, pages 85–94, 2009.
[6] E. J. Coyne. Role engineering. In ACM Workshop on
Role-Based Access Control, page 4, 1995.
[7] J. Crampton. Specifying and enforcing constraints in
role-based access control. In ACM Symposium on Access
Control Models and Technologies, pages 43–50, 2003.
[8] A. Ene, W. G. Horne, N. Milosavljevic, P. Rao, R. Schreiber,
and R. E. Tarjan. Fast exact and heuristic methods for role
minimization problems. In ACM Symposium on Access
Control Models and Technologies, pages 1–10, 2008.
[9] D. F. Ferraiolo, R. S. Sandhu, S. I. Gavrila, D. R. Kuhn, and
R. Chandramouli. Proposed NIST standard for role-based
access control. ACM Trans. Inf. Syst. Secur., 4(3):224–274,
2001.
[10] M. Frank, J. M. Buhmann, and D. A. Basin. On the deﬁnition
of role mining. In ACM Symposium on Access Control
Models and Technologies, pages 35–44, 2010.
[11] M. Frank, A. P. Streich, D. A. Basin, and J. M. Buhmann. A
probabilistic approach to hybrid role mining. In ACM
Conference on Computer and Communications Security,
pages 101–111, 2009.
[12] M. R. Garey and D. J. Johnson. Computers And
Intractability: A Guide to the Theory of NP-Completeness.
W.H. Freeman and Company, 1979.
[13] M. Gebser, R. Kaminski, B. Kaufmann, M. Ostrowski,
T. Schaub, and S. Thiele. A User’s Guide to gringo, clasp,
clingo, and iclingo.
[14] C. Giblin, M. Graf, G. Karjoth, A. Wespi, I. Molloy, J. Lobo,
and S. Calo. Towards an integrated approach to role
engineering. In 2nd ACM Workshop on Assurable & Usable
Security Conﬁguration (SafeConﬁg), 2010.
[15] IBM. Tivoli security role modeling assistant. https:
//www14.software.ibm.com/iwm/web/cc/
earlyprograms/tivoli/tivrole/index.shtml,
2011.
[16] R. Kumar, S. Sural, and A. Gupta. Mining rbac roles under
cardinality constraint. In Proceedings of the 6th international
conference on Information systems security, ICISS’10, pages
171–185, Berlin, Heidelberg, 2010. Springer-Verlag.
[17] N. Li, Z. Bizri, and M. V. Tripunitara. On mutually-exclusive
roles and separation of duty. In ACM Conference on
Computer and Communications Security, pages 42–51, 2004.
[18] N. Li and M. V. Tripunitara. Security analysis in role-based
access control. ACM Trans. Inf. Syst. Secur., 9(4):391–420,
2006.
[19] N. Li, Q. Wang, and M. Tripunitara. Resiliency policies in
access control. ACM Trans. Inf. Syst. Secur., 12:20:1–20:34,
April 2009.
[20] H. Lu, J. Vaidya, V. Atluri, and Y. Hong. Constraint-aware
role mining via extended boolean matrix decomposition.
IEEE Transactions on Dependable and Secure Computing,
2012.
[21] I. Molloy, H. Chen, T. Li, Q. Wang, N. Li, E. Bertino,
S. Calo, and J. Lobo. Mining roles with multiple objectives.
ACM Transactions on Information and System Security
(TISSEC), 13(4):36, Dec 2010.
[22] I. Molloy, N. Li, Y. A. Qi, J. Lobo, and L. Dickens. Mining
roles with noisy data. In SACMAT, pages 45–54, 2010.
[23] A. C. O’Connor and R. J. Loomis. 2010 economic analysis
of role-based access control. Technical report, RTI
International, 2010.
[24] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E.
Youman. Role-based access control models. IEEE Computer,
29(2):38–47, February 1996.
[25] D. Shin, G.-J. Ahn, S. Cho, and S. Jin. On modeling
system-centric information for role engineering. In ACM
Symposium on Access Control Models and Technologies,
pages 169–178, 2003.
[26] S. Sinclair and S. W. Smith. What’s wrong with access
control in the real world? IEEE Security & Privacy,
8(4):70–73, 2010.
[27] Y. Sun, Q. Wang, N. Li, E. Bertino, and M. Atallah. On the
complexity of authorization in rbac under qualiﬁcation and
security constraints. IEEE Transactions on Dependable and
Secure Computing, 8(6):883–897, 2011.
[28] J. Vaidya, V. Atluri, and Q. Guo. The role mining problem:
Finding a minimal descriptive set of roles. In ACM
Symposium on Access Control Models and Technologies,
pages 175–184, 2007.
[29] J. Vaidya, V. Atluri, Q. Guo, and N. Adam. Migrating to
optimal rbac with minimal perturbation. In ACM Symposium
on Access Control Models and Technologies, June 2008.
[30] J. Vaidya, V. Atluri, and J. Warner. Roleminer: mining roles
using subset enumeration. In ACM Conference on Computer
and Communications Security, pages 144–153, 2006.
APPENDIX
A. PROOF OF THEOREM 9
A non-deterministic Turing machine can guess a conﬁguration
in space(U,R,P), compute its distance from Γ, and verify if it
satisﬁes C; all can be done in polynomial time. Hence, the problem
is in NP.
To show its NP-hardness, we reduce the NP-complete problem
satisﬁability (SAT) to problems of this sub-class. An SAT problem
asks, given a set X of Boolean variables and a collection H of
clauses over X, whether there is a satisfying truth assignment for
H [12].
The idea is to use user-role assignments to model truth assign-
ments of variables, and quantity constraints to model clauses in H.
First, we let Γ = {γ} and construct γ as follows: let U = {u},
R = {rx, rx | x ∈ X, and P = {p}; further let UA =
{(rx, u), (rx, u) | x ∈ X} and PA = {(rx, p), (rx, p) | x ∈ X}.
The assignments (rx, u) and (rx, u) are meant to represent the
truth-assignment and false-assignment to x, respectively. Second,
we construct the set C of constraints. For each x ∈ X, we put con-
straint (24). This constrain requires that u take either rx or rx but
not both, thus modeling the fact that x is either true or false. For
each clause {l1,··· , ln} where li is either xi or xi, we put con-
straint (25). This constraint requires that u have at least one role
which corresponds to li. Finally, we let K = |X|.
|role[u] ∩ {rx, rx}| = 1
(role[u] ∩ {rli})
(24)
(25)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) n(cid:91)
i=1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) ≥ 1
Suppose that τ : X (cid:55)→ {T, F} is a solution to the SAT problem.
We deﬁne γ0 as (rx, u) ∈ UA0 and (rx, u) (cid:54)∈ UA0 if τ (x) = T
and (rx, u) (cid:54)∈ UA0 and (rx, u) ∈ UA0 if τ (x) = F . It can be
veriﬁed that dist(Γ, γ0) ≤ K. We now show constraints are also
satisﬁed by γ0. Since only one of x and x is true, constraints of the
form (24) are satisﬁed. For a clause {l1,··· , ln}, at least one literal
li is true. Hence the assignment (rli , u) holds in γ0; it follows that
constraints of the form (25) are satisﬁed.
On the other hand, suppose γ0 is a solution. Then we let
τ (x) = T if (rx, u) ∈ UA0 and τ (x) = F otherwise. For any
clause {l1,··· , ln}, there is a constraint of the form (25), which is
satisﬁed by γ0. Hence, roleγ0 [u] ∩ {rli} (cid:54)= ∅ for at least one li;
that is, li is true under τ. Therefore the clause is also true.
B. PROOF SKETCH OF THEOREM 13
We ﬁrst prove the soundness. Denote Π(RCP(cid:104)C, Γ(cid:105)) as Π and
suppose that A is an answer set of Π. Then, from the deﬁnition of
answer sets, A is a ⊆-minimal model of G(Π)A. We deﬁne γ0 as
follows.
UA0 = {(r, u) | hold (asg(r, u, ua), γ0) ∈ A}
PA0 = {(r, p) | hold (asg(r, p, pa), γ0) ∈ A}
We need to show γ0 is a solution of RCP(cid:104)C, Γ(cid:105). According to
Deﬁnition 6, this sufﬁces to prove that γ0 satisﬁes C and that
dist(Γ, γ0) is minimized. The latter is guaranteed by the statement
(11). We prove the former below.
Consider a structural constraint s ⊆ s(cid:48) and suppose that x ∈
s/γ0. We show that x ∈ s(cid:48)/γ0 also holds. First, from (13) and
rules (14) and (15), it follows that s(x) ∈ A. Second, by rule (12),
we have s(cid:48)(x) ∈ A as well; because otherwise there arises a con-
ﬂict and thus A is not a model of G(Π)A. Further, notice that facts
like s(cid:48)(x) ∈ A can only be derived via rules (14) and (15). Since A
A = {hold(asg(r, u, ua), γ0) | (r, u) ∈ UA0} ∪ {hold(asg(r, p, pa), γ0) | (r, p) ∈ PA0} ∪ {hold(asg(u, p, upa), γ0) | (u, p) ∈ UPA0}
∪ {change(add(asg(r, u, ua))), change(add(asg(r, p, pa))) | (r, u) (cid:54)∈ UA1, (r, p) (cid:54)∈ PA1}
∪ {change(del(asg(r, u, ua))), change(del(asg(r, p, pa))) | (r, u) ∈ UA1, | (r, p) ∈ PA1}
∪ {dif (asg(r, u, ua), γi) | (r, u) ∈ (UAi\UA0) ∪ (UA0\UAi), γi ∈ Γ} ∪ {dif (asg(r, p, pa), γi) | (r, p) ∈ (PAi\PA0) ∪ (PA0\PAi), γi ∈ Γ}
∪ {dif (asg(u, p, upa), γi) | (u, p) ∈ (UPAi\UPA0) ∪ (UPA0\UPAi), γi ∈ Γ}
∪ {applied(change(add(r, u, ua))), applied(change(add(r, p, pa))) | (r, u) ∈ UA0\UA1, (r, p) ∈ PA0\PA1}
∪ {applied(change(del(r, u, ua))), applied(change(del(r, p, pa))) | (r, u) ∈ UA1\UA0, (r, p) ∈ PA1\PA0}
∪ {not_applied(change(add(r, u, ua))), not_applied(change(add(r, p, pa))) | (r, u) (cid:54)∈ UA0 ∪ UA1, (r, p) (cid:54)∈ PA0 ∪ PA1}
∪ {not_applied(change(del(r, u, ua))), not_applied(change(del(r, p, pa))) | (r, u) ∈ UA1 ∩ UA0, (r, p) ∈ PA1 ∩ PA0}
∪ {s(x) | x ∈ s/γ0, s is a set expression in C}
Figure 6: The set A of facts constructed from γ0.
is a ⊆-minimal model of G(Π)A, A must contain a combination of
facts of the form hold (asg(r, u, ua), γ0), hold (asg(r, p, pa), γ0),
and hold (asg(u, p, upa), γ0), which derives s(cid:48)(x) by rules (14)
and (15). Suppose otherwise that this combination does not exist
but s(cid:48)(x) ∈ A. In this case, A is not ⊆-minimal among the mod-
els of G(Π)A, because, informally, no evidence supports s(cid:48)(x).
Therefore, A contains such facts and γ0 contains the correspond-
ing assignments; these assignments together lead to x ∈ s(cid:48)/γ0.
Similarly, we can prove the case for a quantity constraint.
We now prove the completeness. Suppose that γ0 is a solution of
RCP(cid:104)C, Γ(cid:105). Consider the set A of facts in Figure 6. To show that
A is an answer set of Π, we need to prove that A is a ⊆-minimal
model of G(Π)A. To this end, we need to (1) enumerate each rule
in G(Π)A and verify that A satisﬁes the rule, and to (2) assure that
any proper subset of A is not a model of G(Π)A. It is not hard to
verify (1); we now show (2).
First, suppose that a proper subset of A excludes a fact
of the form hold (asg(r, u, ua), γ0) or hold (asg(r, p, pa), γ0);
denote the subset as B. Note that only rules (6) and (7)
take hold (asg(r, u, ua), γ0) or hold (asg(r, p, pa), γ0) as the
heads.
If B contains all A’s facts of the form applied (G) and
not_applied (G), then B does not satisfy the ground instances of
one of these two rules. On the other hand, if B lacks facts of the
form applied (G) and not_applied (G), it is likely that B satisﬁes
the ground instances of rules (6) and (7). However, a proper subset
of A lacking at least one of the ground instances of applied (G)
and not_applied (G) does not satisfy one of the ground instances
of rules (4) and (5).
for
Second,
hold (asg(u, p, upa), γi),
the rules with change(add (asg(r, u, ua))),
change(del (asg(r, u, ua))),
and
dif (asg(r, u, ua), γi),
their bodies contain facts from Π(Γ)
and/or facts hold (asg(r, u, ua), γ0) or hold (asg(r, p, pa), γ0).
Therefore, a proper subset of A not containing any of these facts
does not satisfy ground instances of the rules (3), (4), or (8)-(10).
Finally, for rules in Π(C), consider a constraint c : s ⊆ s(cid:48);
notice that x ∈ s/γ0 (respectively, x ∈ s(cid:48)/γ0) if and only if
s(x) ∈ A (respectively, s(cid:48)(x) ∈ A). Further, since γ0 satis-
ﬁes c, A satisﬁes the rules in G(Π)A which originally belong to
Π(c). Suppose that B is a proper subset of A excluding at least
s(x). Since the rule with s(x) as the head includes only pos-
itive atoms in the body, B does not contain si (x) either, if we
assume the rule takes the form (14) for some i. From rule (15),
we know that some sij (x) (cid:54)∈ B. Recall that sij (x) is a fact
of the form hold (asg(r, u, ua), γ0), hold (asg(r, u, pa), γ0), or
hold (asg(u, p, upa), γ0). Lacking one of them, B fails to satisfy
some rule in G(Π)A, as shown above.
C. TRANSFORMATION IN PRACTICE
Domain knowledge may be used to simplify the program
Π(RCP(cid:104)C, Γ(cid:105)). For example, if alice is a student (according to
her proﬁle), she can neither be a faculty nor a dean. In this case,
we may exclude these assignments from γ0; thus the facts for these
assignments are not needed. For another example, it appears un-
likely for the role stu to acquire the permission of changing grades.
Put formally, conﬁgurations often comply with constraints of the
following form:
• R1 ⊆ role[u] ⊆ R2 for u ∈ U,
• P1 ⊆ perm[r] ⊆ P2 for r ∈ R, and
• P3 ⊆ perm[u] ⊆ P4 for u ∈ U.
In other words,
there are ranges in which proper assignments
should reside. A conﬁguration determines exactly what a user/-
role can and cannot do. In contrast, these ranges are bounds, corre-
sponding to what a user/role must be able to do and what a user/role
is forbidden from, respectively. It is relatively easy and practical to
deﬁne ranges.
With these constraints, we can deﬁne rules which hopefully ac-
celerate ASP solving. Take R1 ⊆ role[u] ⊆ R2 for instance. Rules
like (26) and (27) interpret this pair of constraints, where r1 ∈ R1
and r3 (cid:54)∈ R2; ASP solvers can use them to reduce search space.
⊥ ← not hold (asg(r1, u, ua), γ0).
⊥ ← hold (asg(r3, u, ua), γ0).
(26)
(27)
One may notice that these ranges depend on extra information
beyond C and Γ. This information is arguably available. For ex-
ample, from users’ positions, titles, and jobs, one can infer their
role ranges. To estimate permission ranges for users and roles, sev-
eral sources can be exploited, including access logs, project spec-
iﬁcations, and organizational information (e.g., departments and
groups) [21]. For example, if access logs show that u never used or
even requested a permission p, p should be out of u’s reach; on the
other hand, if u performs p regularly, u shall obtain p. Although
it is difﬁcult to make an accurate estimate, a rough one would be
practical and helpful.
Moreover, domain knowledge enables us to characterize those
constraints most likely to be used in practice, and hence to identify
a number of strategies for optimizing the transformation. For ex-
ample, among the constraints we examined, most set expressions
take the following forms
s = s1 ,1 ∩ ··· ∩ sm,1
s = s1 ,1 ∪ ··· ∪ s1 ,k1 .
We have a more concise representation of s as follows.
s(X) ← s_11 (X),··· , s_m1 (X).
s(X) ← 1 {s_11 (X),··· , s_1 k1 (X)}, urp(X).