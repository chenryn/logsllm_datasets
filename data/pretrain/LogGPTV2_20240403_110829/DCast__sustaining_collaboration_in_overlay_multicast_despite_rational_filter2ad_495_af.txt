0
300 600 900 1200 1500 1800
)
s
t
i
b
t
s
a
c
i
t
l
u
m
/
s
t
i
b
t
s
o
c
#
(
ψ
 3.5
 3
 2.5
 2
 1.5
 1
D
root
max ψ
average ψ
0
0.2n 0.4n 0.6n 0.8n
n-1
# of rounds
# of deviators
Figure 3: Average number of debt-links
created by a peer.
Figure 4: Average number of times that
a debt-link is used.
Figure 5: Example of safety-net guaran-
tee.
debt-links. Then the curve grows rather slowly, and remains be-
low 1,200 in the end.8 On average each peer establishes 0.67 debt-
links in each round. Such overhead is rather small and involves
only 0.67×Dlink junk blocks, as compared to 50 multicast blocks
sent/received by an average peer in each round. Thus the relative
overhead incurred by the junk blocks is roughly 0.67×Dlink/50,
or between 3.35% and 6.03% under our experimental parameters.
No deviators: Number of times a debt-link is used. Next we
examine the number of times that a debt-link is used9 (denoted as
times_used) and payment success rate (deﬁned below) in DCast.
These two quantities capture two key assumptions behind Theo-
rem 2. The proof for Theorem 2 assumes that a debt-link is used
inﬁnite number of times, as long as the two peers incidental to the
debt-link are willing to use it whenever opportunities arise. How-
ever, since the total number of rounds is not actually inﬁnite, the
usage time will not be inﬁnite either. If times_used is overly small,
the accumulated proﬁt of issuing/relaying doins might not be able
to offset the debt-link establishment cost. Figure 4 shows that an av-
erage debt-link is used over 20 times during the one-hour multicast
session. This value is far larger than what is needed to offset the ini-
tial debt-link establishment cost: Establishing a debt-link from A to
B involves Dpay+0.5 junk blocks, while every time the debt-link
is used, A sends one multicast block and in return either receives
Dpay multicast blocks (if A issues a doin) or eliminates Dpay
blocks of debt (if A relays a doin). Thus, times_used only needs
to satisfy the following inequality in order for Theorem 2’s proof
(see Appendix) to hold: (times_used + Dlink) × max(1, σ) <
times_used × Dpay. As a numerical example, for σ = 1 and
Dpay= 2, times_used only needs to reach 2.5 to offset the debt-
link establishment cost.
No deviators: Payment success rate. Payment success rate (de-
noted as pay_succ_rate) is the fraction of expired doins that are
paid by the time that the multicast session ends. While a rational
peer always has the incentive to pay, pay_succ_rate may still be
below 100% if it has no multicast blocks to offer to the doin is-
suer. If pay_succ_rate is so low such that pay_succ_rate × Dpay <
max(1, σ), then the peers may no longer have incentive to issue
doins. We observe a pay_succ_rate of above 99.95% in all our ex-
periments, which is clearly large enough as long as we include a
small extra gap between Dpay and max(1, σ).
So far our results on links_established,
Effect of deviators.
times_used, and pay_succ_rate are only for scenarios where no
8With the simultaneous exchange optimization, the number of debt-
links needed by a peer can be smaller than the number of multicast
blocks received during an interval (which is 50 × 30 = 1500).
9We exclude debt-link utilization in simultaneous exchanges,
which only makes our results more pessimistic.
peer deviates. For times_used and pay_succ_rate, notice that larger
times_used and pay_succ_rate beneﬁt all peers. Thus the deviators
actually have the incentive to further increase these two quantities,
if possible. So at the very least, we do not expect that the deviators
will behave in such a way to signiﬁcantly decrease them, as com-
pared to what we have observed in our earlier experiments. On the
other hand with deviators, links_established and the corresponding
social cost may increase, as in our later experiments on the safety-
net guarantee.
In those experiments, the debt link establishment
cost will be directly captured in (i.e., deducted from) the utility
achieved by the non-deviators.
Having 0 through n−1 deviators: Safety-net utility under an ex-
ample collusion strategy. We next aim to illustrate the safety-net
guarantee offered by DCast under an example collusion strategy,
with Dpay= 2. We do not intend to be exhaustive here — ex-
perimental methods by deﬁnition cannot cover all collusion strate-
gies.
It is not meaningful to consider “representative” collusion
strategies either, because the human attacker is intelligent and may
devise novel collusion strategies that we do not expect today. Ul-
timately, the safety-net guarantee has to be proved, as we did in
Theorem 2. Our experiments here purely serve as an example.
In this example collusion strategy, a deviator never pulls data
from a non-deviator, to avoid establishing debt-links, receiving doins,
and paying for doins. The deviators collude by pulling data from
each other, without the constraints of debt-links and doins. Doing
so enables them to disseminate the multicast blocks faster and with
lower overheads. Since issuing doins is proﬁtable, a deviator will
still issue doins to non-deviators and still accept doin payments.
Our experiments vary the number of deviators from 0 to n − 1,
where n is the total number of peers. For each non-deviator, we
record the ratio between the total number of cost bits sent/received
and the total number of multicast bits received — this ratio is essen-
tially the Ψ parameter in the safety-net utility. Note that since the
delivery_rate we observe is close to 100%, the non-deviators almost
always receive enough multicast blocks to decode the video frames
in each round. Figure 5 plots both the average and the maximum
Ψ across the non-deviators, which is always below Droot and thus
consistent with Theorem 2. Even with the extreme case of n − 1
deviators, by running DCast, the single non-deviator still enjoys a
delivery_rate of above 99.95%, while paying about 2 cost bits for
each multicast bit received. Recall that in multicast, it is usually far
more important to obtain the data (e.g., to watch the movie) than
reducing bandwidth consumption (i.e., to incur fewer cost bits).
As expected, Ψ increases with the number of deviators in Fig-
ure 5. Such increase is the combined result of paying for more
doins, issuing fewer doins, and establishing more debt-links. But
even when there is no deviator, Ψ is still around 1.5. Here debt-link
establishment and sending junk blocks to the root only contribute
577metric
delivery_rate
links_established
times_used
pay_succ_rate
prototype
99.93%
simulation
99.996%
1114
13.5
99.97%
890
12.7
1.0
Table 1: Validating the simulator using the prototype.
about 0.056 and 0.0012 to Ψ, respectively. The remaining part is
for sending multicast blocks to other peers. This part is larger than
1.0 because with simultaneous exchange, sometime multiple peers
may send redundant blocks to the same target peer. Our simulator
is particularly pessimistic in this aspect — the multicast blocks re-
ceived by the target peer will only be visible in the next round (i.e.,
2 seconds later). This causes a relatively large number of redundant
blocks. Further simulation conﬁrms that if the multicast blocks re-
ceived are immediately visible, then Ψ will drop from 1.5 to 1.077
as expected.
Validating the simulator using the prototype. To validate the
accuracy of our simulator, we run our DCast prototype on the Emu-
lab testbed, with 180 peers and Dpay= 2. While our protocol is an
overlay multicast protocol, it is infeasible for us to emulate a net-
work topology, which would require us to emulate all the routers
between each pair of the peers. Instead, we artiﬁcially add realis-
tic wide-area communication delays for the messages, by mapping
each peer to a random node in the King Internet latency dataset [7]
and using the latency there as the delay values.
Table 1 compares the results from a half-hour multicast session
using our prototype versus the results from our simulator under
the same setting. The value of times_used is rather similar in the
two cases. While delivery_rate and pay_succ_rate on Emulab are
slight lower than in the simulation, their absolute values remain
rather high. The difference is mainly caused by unexpected delays
on some Emulab nodes, which our simulator is unable to capture.
Finally, the Emulab experiment establishes about 25% more debt-
links than the simulation experiment. This is due to the processing
delay on some Emulab nodes, which causes peers to establish more
debt-links to ensure that they can get the multicast blocks in time.
Since debt-link establishment contributes to a rather small compo-
nent of Ψ (e.g., 0.056 out of 1.077), we believe that the safety-net
utility observed in the simulation is still quite accurate.
8. CONCLUSION
The state of the art in overlay multicast is rather weak when it
comes to security. This paper aims to address one of the key vul-
nerabilities in all prior overlay multicast protocols — the vulner-
ability against the collusion and sybil/whitewashing attacks by ra-
tional users. To this end, we ﬁrst introduced the novel notion of a
safety-net guarantee in a game theoretic context, which focuses on
protecting the utility of the non-deviators. We then presented the
DCast multicast protocol that uses a novel mechanism with debts
circulating on pre-established debt-links. This mechanism enabled
us to overcome two fundamental challenges introduced by rational
collusion. We formally proved that the protocol offers a safety-net
guarantee, and further demonstrated via prototyping and simulation
the feasibility and safety-net guarantee of our design in practice.
9. ACKNOWLEDGMENTS
We thank Binbin Chen and the CCS anonymous reviewers for
helpful feedbacks. This work is partly supported by National Uni-
versity of Singapore FRC grant R-252-000-406-112, and partly sup-
ported by the Intel Science and Technology Center for Cloud Com-
puting (ISTC-CC).
10. REFERENCES
[1] E. Adar and B. Huberman. Free riding on Gnutella. First Monday,
5(10), 2000.
[2] C. Aperjis, M. Freedman, and R. Johari. Peer-assisted content
distribution with prices. In CoNext, 2008.
[3] L. P. Cox and B. D. Noble. Samsara: Honor among thieves in
peer-to-peer storage. In SOSP, 2003.
[4] J. Douceur. The Sybil attack. In IPTPS, 2002.
[5] J. Feigenbaum and S. Shenker. Distributed algorithmic mechanism
design: Recent results and future directions. In DIALM, 2002.
[6] Y. Fu, J. Chase, B. Chun, S. Schwab, and A. Vahdat. SHARP: An
architecture for secure resource peering. In SOSP, 2003.
[7] K. Gummadi, S. Saroiu, and S. Gribble. King: Estimating latency
between arbitrary internet end hosts. In SIGCOMM, 2002.
[8] A. Hayrapetyan, E. Tardos, and T. Wexler. The effect of collusion in
congestion games. In STOC, 2006.
[9] I. Keidar, R. Melamed, and A. Orda. EquiCast: Scalable multicast
with selﬁsh users. In PODC, 2006.
[10] S. Kremer, O. Markowitch, and J. Zhou. An Intensive Survey of Fair
Non-Repudiation Protocols. Computer Comm., 25(17), 2002.
[11] R. Landa, D. Grifﬁn, R. Clegg, E. Mykoniati, and M. Rio. A
sybilproof indirect reciprocity mechanism for peer-to-peer networks.
In INFOCOM, 2009.
[12] D. Levin, K. LaCurts, N. Spring, and B. Bhattacharjee. BitTorrent is
an Auction: Analyzing and Improving BitTorrent’s Incentives. In
SIGCOMM, 2008.
[13] D. Levin, R. Sherwood, and B. Bhattacharjee. Fair File Swarming
with FOX. In IPTPS, 2006.
[14] H. C. Li, A. Clement, M. Marchetti, M. Kapritsos, L. Robison,
L. Alvisi, and M. Dahlin. Flightpath: Obedience vs. choice in
cooperative services. In OSDI, 2008.
[15] H. C. Li, A. Clement, E. L. Wong, J. Napper, I. Roy, L. Alvisi, and
M. Dahlin. BAR Gossip. In OSDI, 2006.
[16] G. J. Mailath and L. Samuelson. Repeated Games and Reputations.
Oxford University Press, 2006.
[17] A. Nandi, T.-W. J. Ngan, A. Singh, P. Druschel, and D. S. Wallach.
Scrivener: Providing incentives in cooperative content distribution
systems. In Middleware, 2005.
[18] T.-W. J. Ngan, D. S. Wallach, and P. Druschel. Incentives-compatible
peer-to-peer multicast. In P2P Econ, 2004.
[19] N. Nisan, T. Roughgarden, E. Tardos, and V. V. Vazirani. Algorithmic
Game Theory. Cambridge University Press, 2007.
[20] M. Piatek, T. Isdal, T. Anderson, A. Krishnamurthy, and
A. Venkataramani. Do incentives build robustness in BitTorrent. In
NSDI, 2007.
[21] M. Piatek, T. Isdal, A. Krishnamurthy, and T. Anderson. One hop
reputations for peer to peer ﬁle sharing workloads. In NSDI, 2008.