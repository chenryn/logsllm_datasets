extends the idea of Strider to correct miscon(cid:2)gurations through dif-
ferential analysis and statistical approaches. Other important re-
search includes Validation [20] and Chronus [30]. More recent
work is focused on automatic generation of correct con(cid:2)guration
(cid:2)les for a system using custom declared speci(cid:2)cations. Examples
include the approach proposed by Zheng, et al [33], Cfengine [6],
LCFG and SmartFrog [4]. Besides the efforts from the research
community, software manufacturers also offer tools for checking
con(cid:2)gurations through retrieving a database of known miscon(cid:2)g-
urations. A prominent example is the Microsoft Baseline Security
Analyzer [3]. Most of these approaches assume a priori knowledge
about system con(cid:2)gurations in some forms, for example, correct
registries [29, 27], con(cid:2)guration templates [33] and the database of
known miscon(cid:2)gurations. Our approach aims at automatically dis-
covering such knowledge from an application’s executables. This is
of particular importance for checking the applications whose con-
(cid:2)guration speci(cid:2)cations are not well documented or even close.
Closely related to our research is the problem of protocol reverse
engineering, which has been intensively studied recently [11, 7,
17, 31]. Most of existing approaches are for automatic extraction
of protocol (cid:2)elds. For example, Discover [11] employs clustering
algorithms to recover (cid:2)elds from network traf(cid:2)c; Polyglot [7], Aut-
oformat [17] and the approach proposed by Wondracek et al [31]
all utilize dynamic taint analysis to detect protocol (cid:2)elds from the
applications knowing how to parse the protocol. Different from
these approaches, Con(cid:2)gRE is designed for automatic reverse en-
gineering of program con(cid:2)gurations, which requires semantically
understanding the roles played by individual (cid:2)elds in de(cid:2)ning an
access-control policy. Wondracek et al [31] also discussed using
the parameters of API functions to understand the semantic mean-
ing of some protocol (cid:2)elds such as (cid:2)le name. However, this is
insuf(cid:2)cient for our purpose because we also need to recognize the
semantic relations among individual (cid:2)elds, for example, the context
(such as the (cid:2)eld hFiles) under which the (cid:2)le name is speci(cid:2)ed.
In addition, our approach bridges the syntax-semantic gap to auto-
matically generate a language for miscon(cid:2)guration detection. On
the other hand, those existing techniques can be used in con(cid:2)gu-
ration reverse engineering for partitioning con(cid:2)guration (cid:2)les into
(cid:2)elds, as we did in our research.
Techniques for instruction-level taint tracking have been inten-
sively studied in these years. Numerous approaches have been
proposed. Prominent examples include TaintCheck [22], Taint-
Trace [8], Memcheck [25], RIFLE [26] and LIFT [24]. These tech-
niques are widely applied to analyze software vulnerabilities [5,
10], study malware [32], reverse engineer protocols [7, 31] and
generate protocol replayer [21]. While most of existing approaches
are based upon data(cid:3)ow analysis, techniques for control-(cid:3)ow based
taint analysis have also been proposed. Examples include Dytan [9]
and the technique for dynamic spyware analysis [13]. These exist-
ing techniques can serve to improve the taint analyzer used in our
approach.
6. DISCUSSION
Our research on Con(cid:2)gRE made the (cid:2)rst step towards automatic
extraction of con(cid:2)guration knowledge from an application. In this
section, we discuss its limitations and the future research our work
could inspire.
The basic idea behind Con(cid:2)gRE is general:
it can be used to
handle not only text-based con(cid:2)guration (cid:2)les but also binary-based
(cid:2)les. However, our current implementation is oriented towards
text-based con(cid:2)gurations for two reasons: (cid:2)rst, the (cid:2)eld extrac-
tion technique is for processing text-based input streams, as most
Linux-based applications adopt text-based con(cid:2)guration formats;
second, language generation does not consider the delimiters spe-
ci(cid:2)c to binary con(cid:2)gurations such as length (cid:2)elds. Research on the
(cid:2)rst problem can bene(cid:2)t from the existing approaches for parsing
binary protocols [7, 31] though more work is expected to improve
their effectiveness. We will also improve our design for language
generation to accommodate the features of binary con(cid:2)guration,
which can lead to the solution to the second problem.
Con(cid:2)gRE relies on control-(cid:3)ow based taint analysis to detect
con(cid:2)guration (cid:2)elds’ semantic relations. Control-(cid:3)ow taint analysis
is well-known to be hard, as it could cause a large amount of irrel-
evant data to be mistakenly tainted. Our current mitigation of the
problem is empirical, and could cause false positives, i.e., taint of
unrelated data, or false negatives, missing of the data that should be
tainted. Note that the false positives can be mitigated in the third
step of our approach, where candidate permission (cid:2)elds undergo a
rerun test. An improvement can be achieved through incorporating
into our approach existing control-(cid:3)ow taint analysis techniques,
such as Dytan [9].
In the presence of a large number of alternative values, the tech-
nique based upon rerun can become problematic, as far as perfor-
mance is concerned. A potential solution is to utilize static analysis
to check whether a (cid:2)eld indeed affects the accomplishment of a
transaction, and rerunning an application only in the cases static
analysis fails.
An important problem worth intensive effort is the coverage of
an analysis: if some authorization settings do not appear in the con-
(cid:2)guration (cid:2)les used in the analysis, their speci(cid:2)cations may not be
discovered by our current approach. A technique that extracts an
entire authorization speci(cid:2)cation will be a step forward. Efforts
on this direction can be assisted by the existing techniques for ex-
ploring multiple executions [19]. However, these techniques are
pretty heavyweight, very time-consuming even for the programs of
moderate sizes. How to take advantage of con(cid:2)guration features to
improve their ef(cid:2)ciency can be a nontrivial problem.
The current design of Con(cid:2)gRE only considers the interactions
between the remote client and the local (cid:2)le system. There are many
other security-related con(cid:2)guration issues the follow-up research
could embark on: an example is discovery of the security settings
for downloading and executing a remote script. Another interesting
question is how to automatically detect the hidden con(cid:2)gurations
of less than innocent programs such as Trojan horses. This can be
a very challenging problem, because these programs may contain
obfuscated code to discourage a binary analysis.
The prototype we implemented is not fully automatic. Human
intervention is needed to check the con(cid:2)guration (cid:2)elds it extracts.
This problem comes from the fact that existing (cid:2)eld-extraction tech-
niques [7, 17, 31], which we built our prototype upon, cannot guar-
antee to correctly identify all con(cid:2)guration (cid:2)elds: occasionally,
they could miss some delimiters necessary for (cid:2)eld identi(cid:2)cation.
As a result, we had to manually examine the (cid:2)elds discovered by
our prototype to eliminate the problems such as merger of two
(cid:2)elds into one. Moreover, the test request used in our research
was also manually adjusted to explore the security con(cid:2)gurations
for multiple subject/object pairs. Such an adjustment is based upon
the information automatically discovered during an analysis, and
can be fully automated, as discussed in Section 3.2.
7. CONCLUSION
Knowledge of con(cid:2)guration (cid:2)le formats can have signi(cid:2)cantly
security implication. For example, it lays the foundation for au-
tomatic detection of security miscon(cid:2)gurations. However, such
knowledge is not well-documented for many applications, and be-
comes increasingly inaccessible due to the use of graphic user inter-
faces for indirect con(cid:2)gurations. Effective solution to this problem
relies on automatic analysis of an application to reverse engineer
its con(cid:2)guration speci(cid:2)cation. As a (cid:2)rst step toward this end, we
present in this paper a new technique called Con(cid:2)gRE. Our ap-
proach (cid:2)rst identi(cid:2)es individual con(cid:2)guration (cid:2)elds and their se-
mantic relations, and then detects the (cid:2)elds related to access control
components such as subjects, objects and permissions. Using such
information, Con(cid:2)gRE automatically generates a speci(cid:2)cation lan-
guage for access control con(cid:2)gurations. The language is further
converted into a scanner to check con(cid:2)guration (cid:2)les for the security
policies speci(cid:2)ed in an application. We evaluated Con(cid:2)gRE using
real applications, which demonstrates the ef(cid:2)cacy of our technique.
The future research includes extending our current design to handle
binary-based con(cid:2)gurations and the policy speci(cid:2)cations for more
complicated activities such as executing a script.
8. ACKNOWLEDGEMENTS
We thank our Shepherd Anil Somayaji and anonymous reviewers
for their comments on the paper. This work was supported in part
by the National Science Foundation the Cyber Trust program under
Grant No. CNS-0716292.
9. REFERENCES
[1] (cid:3)ex: The Fast Lexical Analyzer.
http://flex.sourceforge.net/, as of 2008.
[2] bftpd. http://freshmeat.net/projects/bftpd/, as of
April, 2008.
[3] Microsoft baseline security analyzer. http://www.microsoft.
com/technet/security/tools/MBSAHome.mspx, as of
April, 2008.
[4] P. Anderson, P. Goldsack, and J. Paterson. Smartfrog meets lcfg:
Autonomous recon(cid:2)guration with central policy control. In LISA ’03:
Proceedings of the 17th USENIX conference on System
administration, pages 213(cid:150)222, 2003.
[5] D. Brumley, J. Newsome, D. X. Song, H. Wang, and S. Jha. Towards
automatic generation of vulnerability-based signatures. In S&P,
pages 2(cid:150)16, 2006.
[6] M. Burgess. Cfengine: A site con(cid:2)guration engine. USENIX
Computing systems, 8(3):309(cid:150)337, Summer 1995.
[7] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot: automatic
extraction of protocol message format using dynamic binary analysis.
In CCS ’07: Proceedings of the 14th ACM conference on Computer
and communications security, pages 317(cid:150)329, 2007.
[8] W. Cheng, Q. Zhao, B. Yu, and S. Hiroshige. Tainttrace: Ef(cid:2)cient
(cid:3)ow tracing with dynamic binary rewriting. In ISCC, pages 749(cid:150)754,
2006.
[9] J. Clause, W. Li, and A. Orso. Dytan: a generic dynamic taint
analysis framework. In ISSTA ’07: Proceedings of the 2007
international symposium on Software testing and analysis, pages
196(cid:150)206, 2007.
[10] J. R. Crandall, Z. Su, and S. F. Wu. On deriving unknown
vulnerabilities from zero-day polymorphic and metamorphic worm
exploits. In CCS ’05: Proceedings of the 12th ACM conference on
Computer and communications security, pages 235(cid:150)248, New York,
NY, USA, 2005. ACM Press.
[11] W. Cui, J. Kannan, and H. J. Wang. Discoverer: Automatic protocol
reverse engineering from network traces. In Proceedings of the 16th
USENIX Security Symposium, August 2007.
[12] C. Donnelly and R. Stallman. Bison: The Yacc-Compatible Parser
Generator. Luniverse Inc, Bloomington, Indiana, 2000.
[13] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dynamic
spyware analysis. In Proceedings of the 2007 USENIX Annual
Technical Conference (Usenix’07), June 2007.
[14] J. C. King. Symbolic execution and program testing. Commun. ACM,
19(7):385(cid:150)394, 1976.
[15] E. Kycyman and Y.-M. Wang. Discovering correctness constraints
for self-management of system con(cid:2)guration. In ICAC ’04:
Proceedings of the First International Conference on Autonomic
Computing, pages 28(cid:150)35, 2004.
[16] T. Lengauer and R. E. Tarjan. A fast algorithm for (cid:2)nding dominators
in a (cid:3)owgraph. ACM Trans. Program. Lang. Syst., 1(1):121(cid:150)141,
1979.
[17] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic protocol format
reverse engineering through context-aware monitored execution. In
NDSS, 2008.
[18] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,
S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: building customized
program analysis tools with dynamic instrumentation. In PLDI ’05:
Proceedings of the 2005 ACM SIGPLAN conference on Programming
language design and implementation, pages 190(cid:150)200, 2005.
[19] A. Moser, C. Kr¤ugel, and E. Kirda. Exploring multiple execution
paths for malware analysis. In IEEE Symposium on Security and
Privacy, pages 231(cid:150)245, 2007.
[20] K. Nagaraja, F. Oliveira, R. Bianchini, R. P. Martin, and T. D.
Nguyen. Understanding and dealing with operator mistakes in
internet services. In OSDI’04: Proceedings of the 6th conference on
Symposium on Opearting Systems Design & Implementation, pages
5(cid:150)5, 2004.
[21] J. Newsome, D. Brumley, J. Franklin, and D. X. Song. Replayer:
automatic protocol replay by binary analysis. In ACM Conference on
Computer and Communications Security, pages 311(cid:150)321, 2006.
[22] J. Newsome and D. X. Song. Dynamic taint analysis for automatic
detection, analysis, and signature generation of exploits on
commodity software. In NDSS, 2005.
[23] D. Oppenheimer, A. Ganapathi, and D. Patterson. Why do internet
services fail, and what can be done about it? In Proceedings of the
4th USENIX Symposium on Internet Technologies and System
(USITS ’03), 2003.
[24] F. Qin, C. Wang, Z. Li, H.-S. Kim, Y. Zhou, and Y. Wu. Lift: A
low-overhead practical information (cid:3)ow tracking system for
detecting security attacks. In MICRO, pages 135(cid:150)148, 2006.
[25] J. Seward and N. Nethercote. Using valgrind to detect unde(cid:2)ned
value errors with bit-precision. In USENIX Annual Technical
Conference, General Track, pages 17(cid:150)30, 2005.
[26] N. Vachharajani, M. J. Bridges, J. Chang, R. Rangan, G. Ottoni, J. A.
Blome, G. A. Reis, M. Vachharajani, and D. I. August. RIFLE: An
architectural framework for user-centric information-(cid:3)ow security. In
MICRO, pages 243(cid:150)254. IEEE Computer Society, 2004.
[27] H. J. Wang, J. C. Platt, Y. Chen, R. Zhang, and Y.-M. Wang.
Automatic miscon(cid:2)guration troubleshooting with peerpressure. In
OSDI, pages 245(cid:150)258, 2004.
[28] R. Wang, X. Wang, K. Zhang, and Z. Li. Towards automatics reverse
engineering of software security con(cid:2)gurations. Technical Report
IUCS-TR667, Indiana University, 2008.
[29] Y.-M. Wang, C. Verbowski, J. Dunagan, Y. Chen, H. J. Wang,
C. Yuan, and Z. Zhang. Strider: A black-box, state-based approach to
change and con(cid:2)guration management and support. In LISA, pages
159(cid:150)172, 2003.
[30] A. Whitaker, R. S. Cox, and S. D. Gribble. Con(cid:2)guration debugging
as search: (cid:2)nding the needle in the haystack. In OSDI’04:
Proceedings of the 6th conference on Symposium on Opearting
Systems Design & Implementation, pages 6(cid:150)6, 2004.
[31] G. Wondracek, P. M. Comparetti, C. Kruegel, and E. Kirda.
Automatic network protocol analysis. In NDSS, 2008.
[32] H. Yin, D. Song, E. Manuel, C. Kruegel, and E. Kirda. Panorama:
Capturing system-wide information (cid:3)ow for malware detection and
analysis. In Proceedings of the 14th ACM Conferences on Computer
and Communication Security (CCS’07), October 2007.
[33] W. Zheng, R. Bianchini, and T. D. Nguyen. Automatic con(cid:2)guration
of internet services. In EuroSys ’07: Proceedings of the 2nd ACM
SIGOPS/EuroSys European Conference on Computer Systems 2007,
pages 219(cid:150)229, New York, NY, USA, 2007. ACM.