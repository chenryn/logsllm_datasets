unsigned int code1 : 2;
unsigned int code2 : 2;
unsigned int code3 : 8;
} prcode;
以上代码创建了两个2位的字段和一个8位的字段。可以这样赋值：
prcode.code1 = 0;
prcode.code2 = 3;
prcode.code3 = 102;
但是，要确保所赋的值不超出字段可容纳的范围。
如果声明的总位数超过了一个unsigned int类型的大小会怎样？会用到下
一个unsigned int类型的存储位置。一个字段不允许跨越两个unsigned int之间
的边界。编译器会自动移动跨界的字段，保持unsigned int的边界对齐。一旦
发生这种情况，第1个unsigned int中会留下一个未命名的“洞”。
可以用未命名的字段宽度“填充”未命名的“洞”。使用一个宽度为0的未
命名字段迫使下一个字段与下一个整数对齐：
struct {
unsigned int field1  : 1 ;
unsigned int      : 2 ;
1160
unsigned int field2  : 1 ;
unsigned int      : 0 ;
unsigned int field3  : 1 ;
} stuff;
这里，在stuff.field1和stuff.field2之间，有一个2位的空隙；stuff.field3将
储存在下一个unsigned int中。
字段储存在一个int中的顺序取决于机器。在有些机器上，存储的顺序是
从左往右，而在另一些机器上，是从右往左。另外，不同的机器中两个字段
边界的位置也有区别。由于这些原因，位字段通常都不容易移植。尽管如
此，有些情况却要用到这种不可移植的特性。例如，以特定硬件设备所用的
形式储存数据。
15.4.1 位字段示例
通常，把位字段作为一种更紧凑储存数据的方式。例如，假设要在屏幕
上表示一个方框的属性。为简化问题，我们假设方框具有如下属性：
方框是透明的或不透明的；
方框的填充色选自以下调色板：黑色、红色、绿色、黄色、蓝色、紫
色、青色或白色；
边框可见或隐藏；
边框颜色与填充色使用相同的调色板；
边框可以使用实线、点线或虚线样式。
可以使用单独的变量或全长（full-sized）结构成员来表示每个属性，但
是这样做有些浪费位。例如，只需1位即可表示方框是透明还是不透明；只
1161
需1位即可表示边框是显示还是隐藏。8种颜色可以用3位单元的8个可能的值
来表示，而3种边框样式也只需2位单元即可表示。总共10位就足够表示方框
的5个属性设置。
一种方案是：一个字节储存方框内部（透明和填充色）的属性，一个字
节储存方框边框的属性，每个字节中的空隙用未命名字段填充。struct
box_props声明如下：
struct box_props {
bool opaque         : 1 ;
unsigned int fill_color  : 3 ;
unsigned int        : 4 ;
bool show_border      : 1 ;
unsigned int border_color : 3 ;
unsigned int border_style : 2 ;
unsigned int        : 2 ;
};
加上未命名的字段，该结构共占用 16 位。如果不使用填充，该结构占
用 10 位。但是要记住，C 以unsigned int作为位字段结构的基本布局单元。
因此，即使一个结构唯一的成员是1位字段，该结构的大小也是一个unsigned
int类型的大小，unsigned 
int在我们的系统中是32位。另外，以上代码假设
C99新增的_Bool类型可用，在stdbool.h中，bool是_Bool的别名。
对于opaque成员，1表示方框不透明，0表示透明。show_border成员也
用类似的方法。对于颜色，可以用简单的RGB（即red-green-blue的缩写）表
示。这些颜色都是三原色的混合。显示器通过混合红、绿、蓝像素来产生不
1162
同的颜色。在早期的计算机色彩中，每个像素都可以打开或关闭，所以可以
使用用 1 位来表示三原色中每个二进制颜色的亮度。常用的顺序是，左侧位
表示蓝色亮度、中间位表示绿色亮度、右侧位表示红色亮度。表15.3列出了
这8种可能的组合。fill_color成员和border_color成员可以使用这些组合。最
后，border_style成员可以使用0、1、2来表示实线、点线和虚线样式。
表15.3 简单的颜色表示
程序清单15.3中的程序使用box_props结构，该程序用#define创建供结构
成员使用的符号常量。注意，只打开一位即可表示三原色之一。其他颜色用
三原色的组合来表示。例如，紫色由打开的蓝色位和红色位组成，所以，紫
色可表示为BLUE|RED。
程序清单15.3 fields.c程序
/* fields.c -- 定义并使用字段 */
#include 
#include   // C99定义了bool、true、false
/* 线的样式 */
#define SOLID  0
#define DOTTED 1
#define DASHED 2
1163
/* 三原色 */
#define BLUE  4
#define GREEN  2
#define RED  1
/* 混合色 */
#define BLACK  0
#define YELLOW (RED | GREEN)
#define MAGENTA (RED | BLUE)
#define CYAN  (GREEN | BLUE)
#define WHITE  (RED | GREEN | BLUE)
const char * colors[8] = { "black", "red", "green", "yellow",
"blue", "magenta", "cyan", "white" };
struct box_props {
bool opaque : 1;    // 或者 unsigned int （C99以前）
unsigned int fill_color : 3;
unsigned int : 4;
bool show_border : 1; // 或者 unsigned int （C99以前）
unsigned int border_color : 3;
unsigned int border_style : 2;
1164
unsigned int : 2;
};
void show_settings(const struct box_props * pb);
int main(void)
{
/* 创建并初始化 box_props 结构 */
struct box_props box = { true, YELLOW, true, GREEN, DASHED };
printf("Original box settings:\n");
show_settings(&box);
box.opaque = false;
box.fill_color = WHITE;
box.border_color = MAGENTA;
box.border_style = SOLID;
printf("\nModified box settings:\n");
show_settings(&box);
return 0;
}
void show_settings(const struct box_props * pb)
{
1165
printf("Box is %s.\n",
pb->opaque == true ? "opaque" : "transparent");
printf("The fill color is %s.\n", colors[pb->fill_color]);
printf("Border %s.\n",
pb->show_border == true ? "shown" : "not shown");
printf("The border color is %s.\n", colors[pb->border_color]);
printf("The border style is ");
switch (pb->border_style)
{
case SOLID: printf("solid.\n"); break;
case DOTTED: printf("dotted.\n"); break;
case DASHED: printf("dashed.\n"); break;
default:   printf("unknown type.\n");
}
}
下面是该程序的输出：
Original box settings:
Box is opaque.
The fill color is yellow.
1166
Border shown.
The border color is green.
The border style is dashed.
Modified box settings:
Box is transparent.
The fill color is white.
Border shown.
The border color is magenta.
The border style is solid.
该程序要注意几个要点。首先，初始化位字段结构与初始化普通结构的
语法相同：
struct box_props box = {YES, YELLOW , YES, GREEN, DASHED};
类似地，也可以给位字段成员赋值：
box.fill_color = WHITE;
另外，switch语句中也可以使用位字段成员，甚至还可以把位字段成员
用作数组的下标：
printf("The fill color is %s.\n", colors[pb->fill_color]);
注意，根据 colors 数组的定义，每个索引对应一个表示颜色的字符串，
而每种颜色都把索引值作为该颜色的数值。例如，索引1对应字符串"red"，
枚举常量red的值是1。
1167
15.4.2 位字段和按位运算符
在同类型的编程问题中，位字段和按位运算符是两种可替换的方法，用
哪种方法都可以。例如，前面的例子中，使用和unsigned int类型大小相同的
结构储存图形框的信息。也可使用unsigned int变量储存相同的信息。如果不
想用结构成员表示法来访问不同的部分，也可以使用按位运算符来操作。一
般而言，这种方法比较麻烦。接下来，我们来研究这两种方法（程序中使用
了这两种方法，仅为了解释它们的区别，我们并不鼓励这样做）。
可以通过一个联合把结构方法和位方法放在一起。假定声明了 
struct
box_props 类型，然后这样声明联合：
union Views /* 把数据看作结构或unsigned short类型的变量 */
{
struct box_props st_view;
unsigned short us_view;
};
在某些系统中，unsigned int和box_props类型的结构都占用16 位内存。
但是，在其他系统中（例如我们使用的系统），unsigned int和box_props都是
32位。无论哪种情况，通过联合，都可以使用 st_view 成员把一块内存看作
是一个结构，或者使用 
us_view 
成员把相同的内存块看作是一个unsigned
short。结构的哪一个位字段与unsigned short中的哪一位对应？这取决于实现
和硬件。下面的程序示例假设从字节的低阶位端到高阶位端载入结构。也就
是说，结构中的第 1 个位字段对应计算机字的0号位（为简化起见，图15.3
以16位单元演示了这种情况）。
1168
图15.3 作为整数和结构的联合
程序清单15.4使用Views联合来比较位字段和按位运算符这两种方法。
在该程序中，box是View联合，所以box.st_view是一个使用位字段的
box_props类型的结构，box.us_view把相同的数据看作是一个unsigned 
short
类型的变量。联合只允许初始化第1 个成员，所以初始化值必须与结构相匹
配。该程序分别通过两个函数显示 box 的属性，一个函数接受一个结构，一
个函数接受一个 unsigned short 类型的值。这两种方法都能访问数据，但是
所用的技术不同。该程序还使用了本章前面定义的itobs()函数，以二进制字
符串形式显示数据，以便读者查看每个位的开闭情况。
程序清单15.4 dualview.c程序
/* dualview.c -- 位字段和按位运算符 */
#include 
#include 
1169
#include 
/* 位字段符号常量 */
/* 边框线样式  */
#define SOLID   0
#define DOTTED  1
#define DASHED  2
/* 三原色 */
#define BLUE   4
#define GREEN   2
#define RED    1
/* 混合颜色 */
#define BLACK   0
#define YELLOW  (RED | GREEN)
#define MAGENTA  (RED | BLUE)
#define CYAN   (GREEN | BLUE)
#define WHITE   (RED | GREEN | BLUE)
/* 按位方法中用到的符号常量 */
#define OPAQUE     0x1
#define FILL_BLUE   0x8
1170
#define FILL_GREEN   0x4
#define FILL_RED    0x2
#define FILL_MASK   0xE
#define BORDER     0x100
#define BORDER_BLUE  0x800
#define BORDER_GREEN  0x400
#define BORDER_RED0x 200
#define BORDER_MASK  0xE00
#define B_SOLID    0
#define B_DOTTED    0x1000
#define B_DASHED    0x2000
#define STYLE_MASK0x 3000
const char * colors[8] = { "black", "red", "green", "yellow", "blue",
"magenta",
"cyan", "white" };
struct box_props {
bool opaque         : 1;
unsigned int fill_color  : 3;
unsigned int        : 4;
1171
bool show_border      : 1;
unsigned int border_color : 3;
unsigned int border_style : 2;
unsigned int        : 2;
};
union Views /* 把数据看作结构或unsigned short类型的变量 */
{