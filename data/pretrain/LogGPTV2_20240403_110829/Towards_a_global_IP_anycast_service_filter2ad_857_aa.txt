title:Towards a global IP anycast service
author:Hitesh Ballani and
Paul Francis
Towards a Global IP Anycast Service
Hitesh Ballani
Cornell University
Ithaca, NY
PI:EMAIL
Paul Francis
Cornell University
Ithaca, NY
PI:EMAIL
ABSTRACT
IP anycast, with its innate ability to ﬁnd nearby resources
in a robust and eﬃcient fashion, has long been considered an
important means of service discovery. The growth of P2P
applications presents appealing new uses for IP anycast. Un-
fortunately, IP anycast suﬀers from serious problems:
it is
very hard to deploy globally, it scales poorly by the num-
ber of anycast groups, and it lacks important features like
load-balancing. As a result, its use is limited to a few crit-
ical infrastructure services such as DNS root servers. The
primary contribution of this paper is a new IP anycast archi-
tecture, PIAS, that overcomes these problems while largely
maintaining the strengths of IP anycast. PIAS makes use of a
proxy overlay that advertises IP anycast addresses on behalf
of group members and tunnels anycast packets to those mem-
bers. The paper presents a detailed design of PIAS and evalu-
ates its scalability and eﬃciency through simulation. We also
present preliminary measurement results on anycasted DNS
root servers that suggest that IP anycast provides good aﬃn-
ity. Finally, we describe how PIAS supports two important
P2P and overlay applications.
Categories and Subject Descriptors: C.2.1 [Network Ar-
chitecture and Design]: Network communications
General Terms: Design, Measurement.
Keywords: Anycast, Proxy, Overlay, Routing, Architecture.
1.
INTRODUCTION
Ever since it was proposed in 1993, IP anycast[1]1 has been
viewed as a powerful IP packet addressing and delivery mode.
Because IP anycast typically routes packets to the nearest of
a group of hosts, it has been seen as a way to obtain eﬃcient,
transparent and robust service discovery . In cases where
the service itself is a connectionless query/reply service, IP
1IP anycast is an IP addressing and delivery mode whereby
an IP packet is sent to one of a group of hosts identiﬁed by
the IP anycast address. Where IP unicast is one-to-one, and
IP multicast is one-to-many, IP anycast is one-to-any.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’05, August 22–26,  , 2005, Philadelphia, Pennsylvania, USA.
Copyright 2005 ACM 1-59593-009-4/05/0008 ...$5.00.
anycast supports the complete service, not just discovery of
the service. The best working example of the latter is the
use of IP anycast to replicate root DNS servers [2][3] without
modifying DNS clients. Other proposed uses include host
auto-conﬁguration[1] and using anycast to reach a routing
substrate, such as rendezvous points for a multicast tree[4][5]
or a IPv6 to IPv4 (6to4) transition device[6].
In spite of its beneﬁts, there has been very little IP anycast
deployment to date, especially on a global scale. The only
global scale use of IP anycast in a production environment
that we are aware of is the anycasting of DNS root servers
and AS-112 servers[7]2.
The reason for this is that IP anycast has serious limita-
tions. Foremost among these is IP anycast’s poor scalability.
As with IP multicast, routes for IP anycast groups cannot
be aggregated—the routing infrastructure must support one
route per IP anycast group. It is also very hard to deploy IP
anycast globally. The network administrator must obtain an
address block of adequate size (i.e. a /24), and arrange to
advertise it into the BGP substrate of its upstream ISPs. Fi-
nally, the use of IP routing as the host selection mechanism
means that important selection metrics such as server load
cannot be used. It is important to note that while IPv6 has
deﬁned anycast as part of its addressing architecture[8], it is
also aﬄicted by the same set of problems.
By contrast, application layer anycast provides a one-
to-any service by mapping a higher-level name, such as a
DNS name, into one of a group of hosts, and then inform-
ing the client of the selected host’s IP address, for instance
through DNS or some redirect mechanism. This approach is
much easier to deploy globally, and is in some ways superior
in functionality to IP anycast. For example, the ﬁne grained
control over the load across group members and the ability
to incorporate other selection criteria makes DNS-based any-
cast the method of choice for Content Distribution Networks
(CDNs) today.
In spite of this, we believe that IP anycast has compelling
advantages, and its appeal increases as overlay and P2P ap-
plications increase. First, IP anycast operates at a low level.
This makes it potentially useable by, and transparent to, any
application that runs over IP. It also makes IP anycast the
only form of anycast suitable for low-level protocols, such
as DNS. Second, it automatically discovers nearby resources,
eliminating the need for complex proximity discovery mecha-
nisms [9]. Finally, packets are delivered directly to the target
destination without the need for a redirect (frequently re-
2anycasted servers that answer PTR queries for the RFC 1918
private addresses
301quired by application-layer anycast approaches). This saves
at least one packet round trip, which can be important for
short lived exchanges. It is these advantages that have led to
increased use of IP anycast within the operational commu-
nity, both for providing useful services (DNS root servers),
and increasingly for protecting services from unwanted pack-
ets (AS112 and DDoS sinkholes [10]).
The primary contribution of this paper is the detailed de-
scription of a deployment architecture for an IP anycast ser-
vice that overcomes the limitations of today’s “native” IP
anycast while adding new features, some typically associated
with application-level anycast, and some completely new. This
architecture, called PIAS (Proxy IP Anycast Service),
is composed as an overlay, and utilizes but does not impact
the IP routing infrastructure. The fact that PIAS is an IP
anycast service means that clients use the service completely
transparently—that is, with their existing IP stacks and ap-
plications.
PIAS allows an endhost in an anycast group (anycast group
member, or anycast target) to receive anycast packets for
that group via its normal unicast address (and normal proto-
col stack). The anycast target joins the anycast group simply
by transmitting a request packet to an anycast address (again,
via its unicast interface). The target may likewise leave the
group through a request packet, or by simply becoming silent.
PIAS utilizes the IP address space eﬃciently: thousands
of IP anycast groups may be identiﬁed through a single IP
address. It scales well by the number of groups, group size
and group churn with virtually no impact on the IP routing
infrastructure. It provides fast failover in response to failures
of both target hosts and PIAS infrastructure nodes.
PIAS can select targets based on criteria other than prox-
imity to the sending host, notably including the ability to
load balance among targets. PIAS has the unique feature
that an anycast group member can also transmit packets to
other members of the same anycast group. This is in contrast
to native IP anycast, where a group member would receive
its own packet if it transmitted to the group. This feature
makes IP anycast available to P2P applications, something
not possible if a host can’t both send to and receive from the
anycast group.
The remainder of the paper is organized as follows: Section
2 identiﬁes the features of an ideal anycast service. Section
3 spells out the system design together with the goals sat-
isﬁed by each design feature. Section 4 presents simulations
and measurements meant to evaluate various features of the
PIAS design. Section 5 discusses related work and section 6
describes a few applications made possible by PIAS. Section
7 discusses other important goals that PIAS must fulﬁll and
section 8 presents our conclusions.
transparent to clients and routers , and we believe that
this transparency is critical to the success of a new IP
anycast service. Because PIAS is an overlay technology
that uses native IP anycast, it does not change clients
and routers.
2. Scale by group size: By virtue of being totally dis-
tributed among routers, native IP anycast scales well
by group size. PIAS has no inherent group size limi-
tation. PIAS is deployed as an overlay infrastructure,
and can scale arbitrarily according to the size of that
infrastructure.
3. Eﬃcient packet transfer : Because native IP anycast
uses IP routing, its paths are naturally eﬃcient. As
an overlay, PIAS imposes some stretch penalty on the
paths packets take. The penalty imposed by PIAS is
small (section 4.3), and shrinks as the PIAS infrastruc-
ture grows.
4. Robustness: Native IP anycast’s robustness properties
(including packet loss) are similar to IP unicast. PIAS
is engineered to be similarly robust.
5. Fast failover : Failover speed in Native IP anycast de-
pends on the convergence speed of the underlying rout-
ing algorithms, and can be fast (OSPF) or somewhat
slow (BGP). PIAS can be engineered to almost always
rely on OSPF for certain types of failover (section 3.6).
The PIAS overlay exposes additional failover situations
that go beyond IP routing, and these are handled ac-
cordingly (Section 3.6).
The following are the goals that native IP anycast does not
satisfy.
6. Ease of
joining and leaving: Target hosts must not
have to interact with IP routing to join and leave.
7. Scale by the number of groups: In addition to scaling
by the usual metrics of memory and bandwidth, we re-
quire that PIAS also make eﬃcient use of the IP ad-
dress space. PIAS is able to accommodate thousands
of groups within a single address by incorporating TCP
and UDP port numbers as part of the group address.
8. Scale by group dynamics: Globally, IP routing behaves
very badly when routes are frequently added and with-
drawn. The PIAS overlay hides member dynamics from
IP routing, and can handle dynamics caused both by
continuous member churn and ﬂash crowds (including
those caused by DDoS attacks).
9. Target Selection criteria:
IP anycast can only select
targets based on proximity. At a minimum, we wish to
add load and connection aﬃnity as criteria.
2. DESIGN GOALS
This section speciﬁcally lays out the design goals of PIAS,
and brieﬂy comments on how well PIAS meets those goals.
The subsequent design description section refers back to these
goals as needed. The goals are listed here in two parts. The
ﬁrst part lists those goals that are accomplished by native IP
anycast, and that we wish to retain. The second part lists
those goals that are not accomplished by native IP anycast.
In this way, we eﬀectively highlight the weaknesses of IP any-
cast, and the contributions of PIAS.
1. Backwards Compatible: Native IP anycast is completely
3. DESIGN DESCRIPTION
This section gives a detailed description of PIAS. We take
a “layered” approach to the description—we start with the
core concepts and basic design and then step-by-step describe
additional functionality that satisﬁes speciﬁc goals listed in
section 2.
PIAS is deployed as an overlay infrastructure. It may be
deployed by a CDN company like Akamai, by multiple coop-
erating ISPs, or even by a single ISP (though the eﬃcacy of
proximity discovery would be limited by the ISP’s geographic
coverage). Multiple distinct PIAS infrastructures may be de-
ployed. In this case, each operates using distinct blocks of IP
AP Anycast Proxy
Unicast (Tunnel/NAT)
Native IP Anycast
Anycast
Client
AP
AP
AP
AP
Anycast
Target
Anycast
Target
Anycast
Client
Figure 1: Proxy Architecture:
the client packets
reaching the proxies through native IP anycast are
tunnelled to the targets
anycast addresses, and they do not interact with each other3.
In the remainder of this document, for simplicity of exposi-
tion, we assume a single PIAS infrastructure.
The basic idea of PIAS, illustrated in Figure 1, is very sim-
ple. Router-like boxes, hereon referred to as anycast proxies
(AP or simply proxies), are deployed at various locations in
the Internet, for example at POPs (Point of Presence) of dif-
ferent ISPs. These proxies advertise the same block of IP
addresses, referred to as the anycast preﬁx , into the rout-
ing fabric (BGP, IGP). As such, the proxies are reachable by
native IP anycast—a packet transmitted to the anycast preﬁx
will reach the closest proxy. However, these proxies are not
the actual anycast target destinations(AT)4. Rather, true
to their name, they proxy packets that reach them via na-
tive IP anycast to the true target destinations using unicast
IP. This proxying can take the form of lightweight tunnels
or NAT. NAT allows for backwards compatibility with the
protocol stack at target hosts, but increases processing at the
proxy.
This novel combination of native IP anycast with tunnelling
to the unicast addresses of the targets allows PIAS to fulﬁll
three critical design goals and drives the rest of the system
design. First, it allows for eﬃcient use of the address space as
all the IP addresses in the preﬁx advertised by the proxies can
be used by diﬀerent anycast groups. In fact, PIAS does one
better. It identiﬁes an anycast group by the full transport
address (TA), i.e. IP address and TCP/UDP port, thus al-
lowing thousands of anycast groups per IP address. Second, it
solves the IP routing scaling problem by allowing many any-
cast groups to share a single address preﬁx and hence, fulﬁlls
goal 7. Finally, it relieves targets from the burden of inter-
acting with the routing substrate. They can join an anycast
group by registering with a nearby proxy that is discovered
using native IP anycast. This fulﬁlls goal 6.
The reader may notice two suspicious claims in the last
paragraph. First, we claim to ease deployment by running
unicast at the target instead of anycast, and yet the proxies
still must run anycast. So, how is this an improvement? The
beneﬁt is that the diﬃcult work of deploying IP anycast is
borne by the anycast provider once, and amortized across
many anycast groups. Second, we claim to improve scaling
by allowing thousands of IP anycast groups to share a single
IP address preﬁx. All we’ve really done, however, is to move
the scaling problem from the IP routing domain to the PIAS
infrastructure domain. This is quite intentional. As we argue
3Indeed, a single operator could deploy multiple distinct
PIAS infrastructures as a way to scale.
4the members of the anycast group; hereon referred to as
anycast targets or simply targets
later on, the scaling issues are much easier to deal with in the
overlay than in IP routing.
PIAS oﬀers two primitives to the members of an anycast
group, which involve sending messages to a nearby proxy:
• join(IPA:portA,IPT :portT ,options): this message instructs
the proxy to forward packets addressed to the anycast
group identiﬁed by the TA IPA:portA to the joining
node’s unicast TA IPT :portT . The options may spec-
ify additional information such as the selection criteria
(load balance etc.), delivery semantics (scoping etc.), or
security parameters needed to authenticate the target
host. These are discussed later.
• leave(IPA:portA,IPT :portT ,options): this message in-
forms the proxy that the target identiﬁed by TA IPT :portT
has left the group IPA:portA. options are the security
parameters.
The join and leave messages are transmitted to the anycast
address IPA(that belongs to the anycast preﬁx) at some well-
known port that is dedicated to receiving registration mes-
sages. This means that no extra conﬁguration is required for
a target to discover a nearby proxy.
Note that we don’t specify a “create group” primitive. For
the purpose of this paper, we assume that the ﬁrst join essen-
tially results in the creation of the group. In practice, a sub-
scriber to the service would presumably have entered into a
contract with the anycast service provider, which would have
resulted in the assignment of anycast TAs to that subscriber.
The subscriber would also have obtained authentication in-
formation using which targets may join the group. While the
issues surrounding this sort of group creation are important,
they are not central to the PIAS architecture, and we don’t
discuss them further.
3.1 The Join Anycast Proxy (JAP)
A target may leave a group either through the leave prim-
itive, or by simply falling silent (for instance, because the
target is abruptly shut oﬀ or loses its attachment to the In-
ternet). This means that the Join AP (JAP—the nearby
proxy with which the target registers; shown in ﬁgure 2) must
monitor the health of its targets, determine when they are no
longer available, and treat them as having left the group. The
proximity of the JAP to the target makes it ideal for this.
The JAP must also inform zero or more other anycast prox-
ies (APs) of the target(s) that have registered with it. This is
because not all APs may be JAPs for a given group (that is,
no target joined through them), but anycast clients (ACs)
may nevertheless send them packets destined for the group.
A proxy that receives packets directly from a client is referred
to as the Ingress AP (IAP)5 for the client. Note that the
client-IAP relation is established using native IP anycast. As
an IAP, the proxy must know how to forward packets towards
a target; even though the IAP may not explicitly know of the
target.
One possible way to achieve this would have the JAP spread
information about targets associated with it to all proxies.
This allows the IAP to tunnel packets directly to clients (as in
Figure 1). However, such an approach would hamper PIAS’s
ability to support a large number of groups. In fact, Figure 1
is conceptual—PIAS’s approach for spreading group infor-
mation is described in the next section and the actual paths
taken by packets are shown in Figure 2.
5in ﬁgure 1 the proxies in the client-target path are IAPs
IP Tunnel
Anycast
Unicast
5
4
AT
JAP
Reverse Path
AC
1
IAP
JAP address
 (Cached)
2
RAP
6
3
No.
1
2
3
4
5
6