### Microsoft's Zeus Detection and Removal Efforts

In October 2010, Microsoft added detections for the Zeus malware to the Malicious Software Removal Tool (MSRT), which is automatically distributed via the Windows Update service for operating systems including Windows XP, Vista, and 7. Following this update, Microsoft released statistics on the removal of Zeus infections. In the first month alone, MSRT removed 444,292 infections worldwide, a significant number. However, MSRT relies on traditional antivirus signatures to detect Zeus variants, with updates occurring only once a month. Notably, 34% of these infections were detected using old signatures dating back to at least May 2010. This monthly update schedule allowed botnets that regularly updated their Zeus executable files to evade Microsoft's detection efforts.

### Successor: SpyEye

The self-proclaimed successor to Zeus is a trojan horse named SpyEye, which shares many similarities with Zeus in terms of its construction kit, marketing in underground forums, and technical implementation. The SpyEye toolkit entered the underground market in late 2009, priced lower than Zeus but offering comparable features. In the competition for market share in the crimeware business, SpyEye introduced a routine to remove Zeus, allowing it to take over machines infected by both trojans and ensuring that only the SpyEye botnet operator could exploit the victim.

To estimate the popularity of SpyEye and Zeus, we evaluated data from two services operated by Swiss security researchers who track command & control servers for these trojans. From November 2010 to February 2011, SpyEye-Tracker monitored 179 domains, while Zeus Tracker listed 303 domains hosting control infrastructure.

In late 2010, a surprising development occurred when the Zeus developer announced he would no longer maintain the project and hand over the source code to his competitor. Security researchers at RSA analyzed a newly discovered SpyEye sample in February 2011 and found code pieces identical to those in Zeus, suggesting that the SpyEye developer had incorporated key functionalities from Zeus into his creation.

### Other Information Stealers

Beyond Zeus and SpyEye, several other crimeware families with information-stealing capabilities have been observed. These include Carberp, Patcher, Gozi, Silentbanker, Bebloh, and Katusha, all of which were identified during our research for the Banksafe project.

### Detection of Browser Manipulations

On Microsoft Windows systems, information stealers use techniques known as userland rootkits to intercept and manipulate web traffic. When the web browser is started, the malware injects code into the browser process and installs hooks for API functions in system libraries. For example, Zeus version 2 hooks the following API functions in the Wininet.dll library within Microsoft Internet Explorer:

- HttpQueryInfoA
- HttpSendRequestA
- HttpSendRequestExA
- HttpSendRequestExW
- HttpSendRequestW
- InternetCloseHandle
- InternetQueryDataAvailable
- InternetReadFile
- InternetReadFileExA

By hooking high-level API communication functions, information stealers can intercept web form data before it is encrypted in HTTPS sessions, which are commonly used to secure online transactions and user logins. Staying in user-mode code allows the trojan to more conveniently intercept data compared to traditional kernel-rootkits with keyloggers.

Some trojans, such as SpyEye and Zeus, also inject control code into every user process, including the Windows Explorer, and hook API functions in system libraries like ntdll.dll, kernel32.dll, and advapi32.dll. This enables them to hide their processes and files by intercepting API calls to filesystem, registry, and process control functions. The unique set of API function hooks for each trojan family can be used to detect and identify the presence of an information stealer in a Windows system.

### Methods of API Function Hooking

Information stealers use various methods to manipulate API functions in the web browser on Windows operating systems. These include inline hooks, import address table (IAT) hooks, export address table (EAT) hooks, and hooks that manipulate the Windows loader mechanism. We detect all these methods and compute a fingerprint for identification and classification.

#### Inline Hooks

Inline hooking is the most common method used by information stealers on 32-bit Windows systems. The malware overwrites the first few bytes of an API function with a jump instruction, redirecting the code flow to a section controlled by the trojan. Modern operating systems use a compiler option to enable hotpatch functionality, reserving 5 bytes filled with NOP instructions at the start of each function. Trojans like Zeus and SpyEye overwrite these bytes with a long jump to their injected code.

To detect inline hooks, we compare the code section of system libraries in memory with a corresponding copy loaded from the filesystem. We implemented an emulated Windows loader to perform base relocations, enabling byte-to-byte comparisons and the creation of a list of modified API functions.

#### IAT Hooks

IAT hooks modify the import address table, which specifies the location of imported functions in virtual memory. By overwriting the original destination of an imported API function, the malware redirects the call to its own code. This can be detected by checking the entries in the IAT. Some variants use trampolines to avoid detection, but our approach can still identify these by comparing the code section with the unmodified original.

#### EAT Hooks

EAT hooks involve overwriting the addresses of exported API functions in the export address table. This method handles dynamic imports automatically but does not affect imports made before the hook. To propagate changes to the IATs of importing modules, the EAT write must occur before the module is loaded. EAT hooks can be detected similarly to inline hooks by comparing in-memory and filesystem copies.

#### Other Methods

Other hooking methods include altering the creation flags of child processes to create them in a suspended state, allowing the master process to inject watch threads or change the loading routine. Combinations of these methods can also be used, such as starting child processes in a suspended state and injecting inline hooks into the loader.

### False Positive Evasion

Legitimate software may also use hooking techniques, such as Microsoft's hotpatching. To prevent false positives, Banksafe inspects the destination of each hook. If a hook points to code inside a signed and trusted module, it is ignored in the detection mechanism.

### Experimental Evaluation

To evaluate the performance of our approach, we conducted several experiments. First, we analyzed a wide range of Zeus and SpyEye samples to assess detection capabilities and the number of different fingerprints. Second, we compared our approach against the detection capabilities of different antivirus scanners. Finally, we demonstrated that our approach can be applied to other information stealer families.

#### Classification of Zeus and SpyEye

In the first experiment, we analyzed 1,045 samples from Zeus-Tracker and SpyEye-Tracker. Each sample was used to attempt an infection on a clean Windows XP SP2 system running in a VirtualBox virtual machine. The VM was reset to a clean state after each experiment.

### Conclusion

Our approach effectively detects and classifies information stealers by analyzing API function hooks and computing fingerprints. This method provides a robust and reliable way to identify and mitigate the threat posed by these malicious programs.