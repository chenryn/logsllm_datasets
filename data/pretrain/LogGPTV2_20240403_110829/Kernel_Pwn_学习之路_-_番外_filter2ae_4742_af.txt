        return 0;
    }
`uevent_helper`定义于`/v4.6-rc1/source/lib/kobject_uevent.c#L32`
        #ifdef CONFIG_UEVENT_HELPER
    char uevent_helper[UEVENT_HELPER_PATH_LEN] = CONFIG_UEVENT_HELPER_PATH;
    #endif
在`CONFIG_UEVENT_HELPER`被设置的情况下，我们只需要劫持`uevent_helper`然后执行`kobject_uevent_env`即可
  3. `ocfs2_leave_group`函数函数实现于`/v4.6-rc1/source/fs/ocfs2/stackglue.c#L426`
        /*
     * Leave the group for this filesystem.  This is executed by a userspace
     * program (stored in ocfs2_hb_ctl_path).
     */
    static void ocfs2_leave_group(const char *group)
    {
        int ret;
        char *argv[5], *envp[3];
        argv[0] = ocfs2_hb_ctl_path;
        argv[1] = "-K";
        argv[2] = "-u";
        argv[3] = (char *)group;
        argv[4] = NULL;
        /* minimal command environment taken from cpu_run_sbin_hotplug */
        envp[0] = "HOME=/";
        envp[1] = "PATH=/sbin:/bin:/usr/sbin:/usr/bin";
        envp[2] = NULL;
        ret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_PROC);
        if (ret name,
            entry_name,
            NULL
        };
        int ret = -EACCES;
        if (nfs_cache_getent_prog[0] == '')
            goto out;
        ret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);
        /*
         * Disable the upcall mechanism if we're getting an ENOENT or
         * EACCES error. The admin can re-enable it on the fly by using
         * sysfs to set the 'cache_getent' parameter once the problem
         * has been fixed.
         */
        if (ret == -ENOENT || ret == -EACCES)
            nfs_cache_getent_prog[0] = '';
    out:
        return ret > 0 ? 0 : ret;
    }
`nfs_cache_getent_prog`定义于`/v4.6-rc1/source/fs/nfs/cache_lib.c#L23`
        static char nfs_cache_getent_prog[NFS_CACHE_UPCALL_PATHLEN] = "/sbin/nfs_cache_getent";
我们只需要劫持`nfs_cache_getent_prog`然后执行`nfs_cache_upcall`即可
  5. `nfsd4_umh_cltrack_upcall`函数函数实现于`/v4.6-rc1/source/fs/nfsd/nfs4recover.c#L1198`
        static int nfsd4_umh_cltrack_upcall(char *cmd, char *arg, char *env0, char *env1)
    {
        char *envp[3];
        char *argv[4];
        int ret;
        if (unlikely(!cltrack_prog[0])) {
            dprintk("%s: cltrack_prog is disabledn", __func__);
            return -EACCES;
        }
        dprintk("%s: cmd: %sn", __func__, cmd);
        dprintk("%s: arg: %sn", __func__, arg ? arg : "(null)");
        dprintk("%s: env0: %sn", __func__, env0 ? env0 : "(null)");
        dprintk("%s: env1: %sn", __func__, env1 ? env1 : "(null)");
        envp[0] = env0;
        envp[1] = env1;
        envp[2] = NULL;
        argv[0] = (char *)cltrack_prog;
        argv[1] = cmd;
        argv[2] = arg;
        argv[3] = NULL;
        ret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_PROC);
        /*
         * Disable the upcall mechanism if we're getting an ENOENT or EACCES
         * error. The admin can re-enable it on the fly by using sysfs
         * once the problem has been fixed.
         */
        if (ret == -ENOENT || ret == -EACCES) {
            dprintk("NFSD: %s was not found or isn't executable (%d). "
                "Setting cltrack_prog to blank string!",
                cltrack_prog, ret);
            cltrack_prog[0] = '';
        }
        dprintk("%s: %s return value: %dn", __func__, cltrack_prog, ret);
        return ret;
    }
`cltrack_prog`定义于`/v4.6-rc1/source/fs/nfsd/nfs4recover.c#L1069`
        static char cltrack_prog[PATH_MAX] = "/sbin/nfsdcltrack";
我们只需要劫持`cltrack_prog`然后执行`nfsd4_umh_cltrack_upcall`即可
  6. `mce_do_trigger`函数函数实现于`/v4.6-rc1/source/arch/x86/kernel/cpu/mcheck/mce.c#L1328`
        static void mce_do_trigger(struct work_struct *work)
    {
        call_usermodehelper(mce_helper, mce_helper_argv, NULL, UMH_NO_WAIT);
    }
`mce_helper`定义于`/source/arch/x86/kernel/cpu/mcheck/mce.c#L88`
        static char            mce_helper[128];
    static char            *mce_helper_argv[2] = { mce_helper, NULL };
我们只需要劫持`mce_helper`然后执行`mce_do_trigger`即可。
### 第三种提权姿势-劫持`tty_struct`结构体
#### 关于`tty_struct`结构体
当我们在用户空间执行`open("/dev/ptmx", O_RDWR)`时，内核就会在内存中创建一个`tty`结构体
`tty`结构体在`/v4.6-rc1/source/include/linux/tty.h#L259`处定义
    struct tty_struct {
        int    magic;
        struct kref kref;
        struct device *dev;
        struct tty_driver *driver;
        const struct tty_operations *ops;
        int index;
        /* Protects ldisc changes: Lock tty not pty */
        struct ld_semaphore ldisc_sem;
        struct tty_ldisc *ldisc;
        struct mutex atomic_write_lock;
        struct mutex legacy_mutex;
        struct mutex throttle_mutex;
        struct rw_semaphore termios_rwsem;
        struct mutex winsize_mutex;
        spinlock_t ctrl_lock;
        spinlock_t flow_lock;
        /* Termios values are protected by the termios rwsem */
        struct ktermios termios, termios_locked;
        struct termiox *termiox;    /* May be NULL for unsupported */
        char name[64];
        struct pid *pgrp;        /* Protected by ctrl lock */
        struct pid *session;
        unsigned long flags;
        int count;
        struct winsize winsize;        /* winsize_mutex */
        unsigned long stopped:1,    /* flow_lock */
                  flow_stopped:1,
                  unused:BITS_PER_LONG - 2;
        int hw_stopped;
        unsigned long ctrl_status:8,    /* ctrl_lock */
                  packet:1,
                  unused_ctrl:BITS_PER_LONG - 9;
        unsigned int receive_room;    /* Bytes free for queue */
        int flow_change;
        struct tty_struct *link;
        struct fasync_struct *fasync;
        int alt_speed;        /* For magic substitution of 38400 bps */
        wait_queue_head_t write_wait;
        wait_queue_head_t read_wait;
        struct work_struct hangup_work;
        void *disc_data;
        void *driver_data;
        spinlock_t files_lock;        /* protects tty_files list */
        struct list_head tty_files;
    #define N_TTY_BUF_SIZE 4096
        int closing;
        unsigned char *write_buf;
        int write_cnt;
        /* If the tty has a pending do_SAK, queue it here - akpm */
        struct work_struct SAK_work;
        struct tty_port *port;
    };
这里比较重要的是其中的`tty_operations`结构体，里面有大量的函数指针
    struct tty_operations {
        struct tty_struct * (*lookup)(struct tty_driver *driver, struct inode *inode, int idx);
        int  (*install)(struct tty_driver *driver, struct tty_struct *tty);
        void (*remove)(struct tty_driver *driver, struct tty_struct *tty);
        int  (*open)(struct tty_struct * tty, struct file * filp);
        void (*close)(struct tty_struct * tty, struct file * filp);
        void (*shutdown)(struct tty_struct *tty);
        void (*cleanup)(struct tty_struct *tty);
        int  (*write)(struct tty_struct * tty, const unsigned char *buf, int count);
        int  (*put_char)(struct tty_struct *tty, unsigned char ch);
        void (*flush_chars)(struct tty_struct *tty);
        int  (*write_room)(struct tty_struct *tty);
        int  (*chars_in_buffer)(struct tty_struct *tty);
        int  (*ioctl)(struct tty_struct *tty, unsigned int cmd, unsigned long arg);
        long (*compat_ioctl)(struct tty_struct *tty, unsigned int cmd, unsigned long arg);
        void (*set_termios)(struct tty_struct *tty, struct ktermios * old);
        void (*throttle)(struct tty_struct * tty);
        void (*unthrottle)(struct tty_struct * tty);
        void (*stop)(struct tty_struct *tty);
        void (*start)(struct tty_struct *tty);
        void (*hangup)(struct tty_struct *tty);
        int (*break_ctl)(struct tty_struct *tty, int state);
        void (*flush_buffer)(struct tty_struct *tty);
        void (*set_ldisc)(struct tty_struct *tty);
        void (*wait_until_sent)(struct tty_struct *tty, int timeout);
        void (*send_xchar)(struct tty_struct *tty, char ch);
        int (*tiocmget)(struct tty_struct *tty);
        int (*tiocmset)(struct tty_struct *tty, unsigned int set, unsigned int clear);
        int (*resize)(struct tty_struct *tty, struct winsize *ws);
        int (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);
        int (*get_icount)(struct tty_struct *tty, struct serial_icounter_struct *icount);
    #ifdef CONFIG_CONSOLE_POLL
        int (*poll_init)(struct tty_driver *driver, int line, char *options);
        int (*poll_get_char)(struct tty_driver *driver, int line);
        void (*poll_put_char)(struct tty_driver *driver, int line, char ch);
    #endif
        const struct file_operations *proc_fops;
    };
如果我们能够劫持其中的指针，我们就可以执行任意指令了。
由于此种方法其实是将任意地址读写转换为了任意地址执行，并没有真正进行提权，因此可以参考第二种姿势完成后续利用。
### 第四种提权姿势-劫持`VDSO`内存区
🚫：此利用路径已被修复，仅能在`Linux Kernel 2.x`及以下版本利用，故此处仅阐述原理，不做利用演示。
#### 关于`VDSO`内存映射
`VDSO(Virtual Dynamic Shared
Object)`内存映射是用户态的一块内存映射，这使得内核空间将可以和用户态程序共享一块物理内存，从而加快执行效率，这个内存映射也叫影子内存。当在内核态修改此部分内存时，用户态所访问到的数据同样会改变，这样的数据区在用户态有两块，分别是`vdso`和`vsyscall`。
`vsyscall`和`VDSO`都是为了避免产生传统系统调用模式`INT
0x80/SYSCALL`造成的内核空间和用户空间的上下文切换行为。`vsyscall`只允许`4`个系统调用，且在每个进程中静态分配了相同的地址；`VDSO`是动态分配的，地址随机，可提供超过`4`个系统调用，`VDSO`是`glibc`库提供的功能。
`VDSO`本质就是映射到内存中的`.so`文件，对应的程序可以当普通的`.so`来使用其中的函数。
**在`Kernel 2.x`中，`VDSO`所在的页，在内核态是可读、可写的，在用户态是可读、可执行的。**
`VDSO`在每个程序启动时加载，核心调用的是`init_vdso_vars`函数，在`/v2.6.39.4/source/arch/x86/vdso/vma.c#L38`处实现。
    static int __init init_vdso_vars(void)
    {
        int npages = (vdso_end - vdso_start + PAGE_SIZE - 1) / PAGE_SIZE;
        int i;
        char *vbase;
        vdso_size = npages << PAGE_SHIFT;
        vdso_pages = kmalloc(sizeof(struct page *) * npages, GFP_KERNEL);
        if (!vdso_pages)
            goto oom;
        for (i = 0; i < npages; i++) {
            struct page *p;
            p = alloc_page(GFP_KERNEL);
            if (!p)
                goto oom;
            vdso_pages[i] = p;
            copy_page(page_address(p), vdso_start + i*PAGE_SIZE);
        }
        vbase = vmap(vdso_pages, npages, 0, PAGE_KERNEL);
        if (!vbase)
            goto oom;
        if (memcmp(vbase, "177ELF", 4)) {
            printk("VDSO: I'm broken; not ELFn");
            vdso_enabled = 0;
        }
    #define VEXTERN(x) 
        *(typeof(__ ## x) **) var_ref(VDSO64_SYMBOL(vbase, x), #x) = &__ ## x;
    #include "vextern.h"
    #undef VEXTERN
        vunmap(vbase);
        return 0;
     oom:
        printk("Cannot allocate vdson");
        vdso_enabled = 0;
        return -ENOMEM;
    }
    subsys_initcall(init_vdso_vars);
在`VDSO`空间初始化时，`VDSO`同时映射在内核空间以及每一个进程的虚拟内存中，向进程映射时，内核将首先查找到一块用户态地址，然后将该块地址的权限设置为VM_READ|VM_EXEC|VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC，然后利用`remap_pfn_range`将内核页映射过去。
若我们能覆盖`VDSO`的相应利用区，就能执行我们自定义的`shellcode`。
此处利用可参考[Bypassing SMEP Using vDSO
Overwrites(使用vDSO重写来绕过SMEP防护)](https://hardenedlinux.github.io/translation/2015/11/25/Translation-Bypassing-SMEP-Using-vDSO-Overwrites.html)
## 参考链接
[【原】Heap Spray原理浅析 –
magictong](https://blog.csdn.net/magictong/article/details/7391397)
[【原】linux内核提权系列教程（1）：堆喷射函数sendmsg与msgsend利用 –
bsauce](https://xz.aliyun.com/t/6286)
[【原】linux内核提权系列教程（2）：任意地址读写到提权的4种方法 – bsauce](https://xz.aliyun.com/t/6296)