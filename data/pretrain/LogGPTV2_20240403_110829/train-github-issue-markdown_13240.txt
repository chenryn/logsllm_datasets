Recently, I have been working with DataFrames that contain duplicate column names. I have observed that if the DataFrame has duplicate column names and these columns contain different data types, attempting to retrieve the values from the DataFrame using `df.values` results in an error. This issue also extends to other operations, such as using `iloc`.

Here are some examples to illustrate this behavior:

### Example 1: No Duplicate Column Names
When there are no duplicate column names, the DataFrame can be created and its values can be accessed without any issues.

```python
import pandas as pd

# No duplicates - works fine
df = pd.DataFrame([range(2) + ['x'], range(2) + ['c']], columns=['a', 'b', 'c'])
print(df)
# Output:
#    a  b  c
# 0  0  1  x
# 1  0  1  c

print(df.values)
# Output:
# array([[0, 1, 'x'],
#        [0, 1, 'c']], dtype=object)
```

### Example 2: Duplicate Column Names with Same Data Type
When there are duplicate column names but all the columns contain the same data type, the DataFrame can still be created and its values can be accessed without any issues.

```python
# Duplicate columns, same type - works fine
df = pd.DataFrame([range(3), range(3)], columns=['a', 'b', 'b'])
print(df)
# Output:
#    a  b  b
# 0  0  1  2
# 1  0  1  2

print(df.values)
# Output:
# array([[0, 1, 2],
#        [0, 1, 2]], dtype=int64)
```

### Example 3: Duplicate Column Names with Different Data Types
When there are duplicate column names and the columns contain different data types, attempting to access the values of the DataFrame results in an error.

```python
# Duplicate columns, different types - results in an error
df = pd.DataFrame([range(2) + ['x'], range(2) + ['c']], columns=['a', 'b', 'b'])
print(df)
# Output:
#    a  b  b
# 0  0  1  x
# 1  0  1  c

print(df.values)
# Traceback (most recent call last):
#   File "", line 1, in 
#   File "C:\Python27\lib\site-packages\pandas-0.12.0-py2.7-win32.egg\pandas\core\frame.py", line 1748, in as_matrix
#     return self._data.as_matrix(columns).T
#   File "C:\Python27\lib\site-packages\pandas-0.12.0-py2.7-win32.egg\pandas\core\internals.py", line 1517, in as_matrix
#     mat = self._interleave(self.items)
#   File "C:\Python27\lib\site-packages\pandas-0.12.0-py2.7-win32.egg\pandas\core\internals.py", line 1548, in _interleave
#     raise AssertionError('All items must be in block items')
# AssertionError: All items must be in block items
```

In summary, when working with DataFrames, it is important to ensure that column names are unique, especially if the columns contain different data types, to avoid errors when accessing the DataFrame's values.