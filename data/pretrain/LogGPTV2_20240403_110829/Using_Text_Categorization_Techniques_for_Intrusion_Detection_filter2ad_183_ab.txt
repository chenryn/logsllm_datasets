The primary computation in this context involves sorting the training documents to identify the k nearest neighbors for a given test document. This process is analogous to comparing a text document with the sequence of all system calls generated by a process during its execution. The frequency and pattern of these system calls can effectively characterize the behavior of a program, allowing each process to be represented as a vector. It is assumed that processes within the same class will share similar characteristics.

In our analogy, if the weight \( w \) of a particular feature (or system call) is 1.0, we proceed to find the highest scores among the k-nearest neighbors. We then calculate the distance or similarity score between the test process and its k-nearest neighbors. If this score exceeds a predefined threshold \( T \), the process is deemed normal; otherwise, it is flagged as abnormal. This approach forms the basis of the k-Nearest Neighbors (kNN) classifier algorithm for anomaly detection, as illustrated in the following pseudo code:

```
Figure 1: Pseudo code for the kNN classifier algorithm for anomaly detection.
if w = 1.0 then
    find the k biggest scores of the test process;
    calculate the distance/similarity score for the k-nearest neighbors;
    if the score is greater than T then
        the process is normal; exit;
    else
        the process is abnormal;
```

To evaluate the performance of the kNN classifier, we constructed a test data set. Specifically, we used the BSM (Basic Security Module) data from the third day of the seventh week of training, which included 412 sessions and 5,285 normal processes. None of the training processes were from this day, and no attacks occurred on this day. Additionally, the test data set incorporated 55 intrusive sessions selected from the seven-week DARPA training data, encompassing 35 distinct attack instances. These attacks covered a range of types and intrusion scenarios, including both clear and stealthy attacks. Stealthy attacks are designed to evade detection by the monitoring system or the intrusion detection system. Some duplicate attack sessions, such as those involving "eject" and "warezclient," were excluded from the test data set.

When a process is classified as abnormal, the session associated with that process is flagged as an attack session. The intrusion detection accuracy is determined by the rate of detected attacks, where each unique attack is counted as one detection, regardless of the number of sessions involved. 

The relationship between intrusion detection accuracy and the false positive probability can be adjusted by varying the detection threshold. This allows for a trade-off between accurately detecting attacks and minimizing false alarms.