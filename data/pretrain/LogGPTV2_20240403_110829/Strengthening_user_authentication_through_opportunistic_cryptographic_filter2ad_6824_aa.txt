# Title: Strengthening User Authentication through Opportunistic Cryptographic Identity Assertions

## Authors:
- Alexei Czeskis, University of Washington, Seattle, WA
- Michael Dietz, Rice University, Houston, TX
- Tadayoshi Kohno, University of Washington, Seattle, WA
- Dan S. Wallach, Rice University, Houston, TX
- Dirk Balfanz, Google, Mountain View, CA

## Abstract
User authentication systems are at a critical juncture. The most common method, the password, is fraught with issues such as susceptibility to phishing and cross-site password reuse. Second-factor authentication schemes, while more secure, face significant usability and deployment challenges. For example, conventional second-factor schemes alter the user authentication experience and still fail to provide adequate protection against single-use phishing attacks.

We present PhoneAuth, a system designed to offer security assurances comparable to or greater than those of traditional two-factor authentication systems, while maintaining the same user experience as passwords. Our approach leverages the following key insights: 
1. A user's personal device (e.g., a phone) can communicate directly with the user's computer and the remote web server without any user interaction.
2. A layered security approach allows the web server to apply different policies based on the presence of the user's personal device.

We describe and evaluate our server-side, Chromium web browser, and Android phone implementations of PhoneAuth.

## Categories and Subject Descriptors
D.m [Software]: Miscellaneous

## General Terms
Design, Human Factors, Security

## Keywords
Authentication, Login, Second Factor, Web

## Permission to Use
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.

CCS'12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.

## 1. Introduction
The most common mechanism for users to log into websites is with usernames and passwords. These are simple to implement and allow websites to interact easily with users. However, they come with significant problems. Many users reuse passwords across different sites, leading to widespread compromise when one site is breached. Additionally, phishing attacks frequently trick users into giving up their credentials, resulting in unauthorized access to online accounts, causing minor annoyances to severe financial and personal harm.

Despite the known security weaknesses of passwords, they remain the primary authentication method. A recent study by Bonneau et al. [5] highlights that none of the 35 studied password-replacement mechanisms are sufficiently usable or deployable to be considered a serious alternative. This includes public-key cryptography-based methods like CardSpace [7] or TLS client certificates [11], which, while more secure, have not gained widespread adoption due to usability and deployment challenges.

In this paper, we propose PhoneAuth, a system that uses public-key cryptography to enhance user authentication on the web. PhoneAuth aims to maintain the user experience of traditional password-based authentication while providing additional security. The key features of PhoneAuth include:
- Invariant user experience: Users enter a username and password directly into a web page, with no additional steps.
- Cryptographic second factor: Provides an additional layer of security against strong attackers.
- Opportunistic second factor: Provided only when compatible conditions are met (e.g., presence of a personal device), with fallback mechanisms for when the second factor is unavailable.

We believe that the operational requirements of PhoneAuth are reasonable given current technical trends and do not hinder its deployability.

## 2. Related Work
### TLS Client Certificates
TLS Client Authentication [12] is a password-less system where a TLS client certificate is used to authenticate a user. While it ensures that the private key remains on the client and prevents phishing, it has several drawbacks:
- **Poor User Experience:** Users must approve the use of the certificate before interacting with the website, often leading to a confusing interface.
- **Privacy Concerns:** Any site can request TLS client authentication, potentially allowing colluding sites to track a user’s browsing habits.
- **Portability Issues:** Private keys cannot be easily moved between devices, complicating the process.

### CardSpace
Microsoft's CardSpace [7] replaced passwords with a public-key-based protocol. Users managed their identities through virtual "cards" and selected which identity to use when logging in. Despite its advantages, CardSpace was not widely adopted due to its complexity and the unfamiliar user interface.

### Federated Login
Federated login systems like OpenID [22], Facebook Connect [3], and SAML allow users to authenticate with a single identity provider. While this reduces the number of passwords users need to manage, it introduces new challenges:
- **Trust Issues:** Users may not trust the identity provider, and relying parties may not want to depend on a single provider.
- **Phishing Risks:** Users can still be phished for their identity provider password.

### Traditional Two-Factor Authentication
Two-factor authentication (2FA) adds a second layer of security, but it also introduces usability issues:
- **Usability:** Users must carry and manage a second device, and some legacy applications may not support 2FA.
- **Security Limitations:** A sophisticated attacker could still phish both the password and the second factor.

### Advanced Password Managers
Tools like PwdHash [23], Password Multiplier [16], and PassPet [29] prevent phishing and reduce password sharing by generating different passwords for different sites. However, they also introduce usability issues, such as users no longer knowing their actual passwords.

### Other Related Work
TLS-SA [19] shares many of our insights but does not provide long-lived TLS sessions, limiting its effectiveness. The Bonneau et al. [5] study provides a framework of 25 usability, deployability, and security benefits that authentication mechanisms should provide. We rate PhoneAuth against this framework and discuss potential future directions.

## 3. Goals and Assumptions
### Design Goals
- **Public-Key Cryptography:** The authentication process must involve public-key cryptography to protect the private key on the client device and prevent phishing.
- **Identity Establishment:** The user's identity must be established above the transport layer to avoid context and privacy issues.
- **Invariant User Experience:** The login process should remain the same as traditional username and password entry.
- **Flexibility:** The design should work in environments with few or many identity providers.
- **Fallback Mechanism:** Provide a fallback for users to log in with just a password if the public-key mechanism is unavailable.

### Threat Model
- **Password Compromise:** Adversaries can obtain the user’s password through phishing or by compromising weaker sites.
- **Man-in-the-Middle Attacks:** Adversaries can perform man-in-the-middle attacks on the connection between the user and the server, even with a valid TLS certificate.
- **Malware:** Adversaries can deploy certain types of malware on the user’s machine, but not simultaneously attack both the network and the physical radio environment.

## 4. Architecture
### 4.1 Architectural Overview
PhoneAuth provides cryptographic identity assertions from a user’s mobile phone during the authentication process. The steps are as follows:

1. **User Input:** The user enters their username and password into a regular login page, which is sent to the server.
2. **Login Ticket:** Instead of logging in, the server responds with a login ticket, requesting an additional identity assertion.
3. **Ticket Forwarding:** The browser forwards the login ticket to the user’s phone, along with information about the key material used to communicate with the server.
4. **Signature Generation:** The phone performs checks and, if successful, signs the login ticket with the user’s private key.
5. **Assertion Verification:** The browser forwards the signed login ticket (identity assertion) to the server, which verifies the signature and logs in the user by setting a cookie bound to the browser’s key pair.

### Opportunistic Identity Assertions
PhoneAuth does not assume that every user will have a suitable mobile phone or use a compatible browser. If the cryptographic identity assertion is unavailable, the user can still log in using a traditional password. The server can treat sessions with and without the identity assertion differently, such as notifying the user or restricting access to critical functions.

### User Experience
The user does not need to approve the login from the phone. The phone automatically signs the login ticket upon receiving it, assuming the user has already entered their username and password. This maintains a seamless user experience, requiring no additional interaction beyond entering the credentials.

### Protected Logins
Czeskis et al. [10] introduced the concept of protected and unprotected logins. Protected logins use strong, unphishable credentials (e.g., cookies or identity assertions), while unprotected logins rely on weaker schemes (e.g., just a password). PhoneAuth enhances the security of protected logins by adding a cryptographic second factor.