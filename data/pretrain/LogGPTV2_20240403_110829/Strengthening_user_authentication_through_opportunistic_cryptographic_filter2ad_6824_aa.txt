title:Strengthening user authentication through opportunistic cryptographic
identity assertions
author:Alexei Czeskis and
Michael Dietz and
Tadayoshi Kohno and
Dan S. Wallach and
Dirk Balfanz
Strengthening User Authentication through Opportunistic
Cryptographic Identity Assertions
Alexei Czeskis
University of Washington
PI:EMAIL
Seattle, WA
Michael Dietz
Rice University
Houston, Texas
PI:EMAIL
Tadayoshi Kohno
University of Washington
Seattle, WA
PI:EMAIL
Dan Wallach
Rice University
Houston, Texas
PI:EMAIL
Dirk Balfanz
Google
Mountain View, CA
PI:EMAIL
ABSTRACT
User authentication systems are at an impasse. The most ubiquitous
method – the password – has numerous problems,
including
susceptibility to unintentional exposure via phishing and cross-site
password reuse. Second-factor authentication schemes have the
potential to increase security but face usability and deployability
challenges.
For example, conventional second-factor schemes
change the user authentication experience. Furthermore, while
more secure than passwords, second-factor schemes still fail to
provide sufﬁcient protection against (single-use) phishing attacks.
We present PhoneAuth, a system intended to provide security
assurances comparable to or greater than that of conventional two-
factor authentication systems while offering the same authentica-
tion experience as traditional passwords alone. Our work leverages
the following key insights. First, a user’s personal device (e.g., a
phone) can communicate directly with the user’s computer (and
hence the remote web server) without any interaction with the user.
Second, it is possible to provide a layered approach to security,
whereby a web server can enact different policies depending on
whether or not the user’s personal device is present. We describe
and evaluate our server-side, Chromium web browser, and Android
phone implementations of PhoneAuth.
Categories and Subject Descriptors
D.m [Software]: Miscellaneous
General Terms
Design, Human Factors, Security
Keywords
Authentication, Login, Second Factor, Web
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
1.
INTRODUCTION
The most common mechanism for users to log into web sites is
with usernames and passwords. They’re simple to implement on
a server and they allow web sites to easily interact with users in a
variety of ways.
There are a variety of problems with these simple approaches,
not least of which is that many users will reuse passwords across
different web sites [4, 14], at which point the compromise of one
web site leads to compromise of others [6, 26]. For users who might
want to remember distinct passwords, the cognitive burden makes
it impossible at scale. Furthermore, users faced with impostor web
sites or forms of phishing attacks often give up their credentials.
It should then come as no surprise that large numbers of users see
their online accounts accessed by illegitimate parties every day [9,
25], causing anywhere from minor annoyances, to ﬁnancial harm,
to very real threats to life and well-being [15, 21].
As practitioners of computer science we know that passwords
offer poor security, yet here we are, four decades after the invention
of public-key cryptography and two decades into the history of the
web, and we still use passwords. A recent study by Bonneau et
al. [5] sheds some light onto why that is the case: none of the 35
studied password-replacement mechanisms are sufﬁciently usable
or deployable in practice to be considered a serious alternative or
augmentation to passwords, which is unfortunate since many of
the proposals are arguably more “secure” than passwords. This
includes mechanisms that employ public-key cryptography (such
as CardSpace [7] or TLS client certiﬁcates [11]). Public-key
cryptography would otherwise be an elegant solution to the security
problems with passwords outlined above: it would allow us to keep
the authentication secret (a private key) secret, and to not send it
to, and store it at, the parties to which users authenticate (or their
impostors).
We have set out to take a fresh look at the use of public-key
cryptography for user authentication on the web. We are cognizant
of the shortcomings of previous attempts, and of the presence of
public-key-based mechanisms in the list of failed authentication
proposals in the Bonneau et al. study. Yet we argue that public-key-
based authentication mechanisms can be usable if they are carefully
designed. Our main contribution in this paper is one such design
we call PhoneAuth, which has the following properties:
• It keeps the user experience of authentication invariant: users
enter a username and password directly into a web page, and
do not do anything else.
404• It provides a cryptographic second factor in addition to the
password, thus securing the login against strong attackers.
• This second factor is provided opportunistically, i.e., only
if and when circumstances allow (compatible browser, pres-
ence of second factor device, and so on). We provide fallback
mechanisms for when the second factor is unavailable.
Though PhoneAuth does have several operational requirements,
we belive that they are reasonable based on current technical trends
and do not hinder the deployability of PhoneAuth.
In Section 2 we evaluate previous efforts at strengthening user
authentication and establish the threat model and goals for our
system in Section 3. Section 4 outlines the system at a high level
while Section 5 delves into practical implementation details.
The Bonneau et al.
study [5] presents a framework of 25
different usability, deployability, and security “beneﬁts” that au-
thentication mechanisms should provide. We rate our system
against this framework and provide other evaluations in Section 6,
and discuss potential future directions in Section 7.
2. RELATED WORK
We examine some related work and how it attempts to address
the security issues with passwords, and then use the lessons learned
to motivate and inform our design goals in Section 3.
TLS CLIENT CERTIFICATES. One example of a password-less
authentication system is TLS Client Authentication [12], where a
TLS client certiﬁcate is used to authenticate a user. Using client
certiﬁcates means that the client does not send the authentication
secret (a private key) to the server, and that users cannot get
phished (since there is no password to be entered). There are,
however, several problems with TLS Client Authentication, which
have impeded its widespread adoption across the Web:
• Poor User Experience. Since the certiﬁcate is needed during
the TLS handshake, users must approve or reject its use
before they can interact with the website. This leads to a
user interface in which the browser asks the user to select an
identity (usually in terms of having to select a “distinguished
name” or an “X.509 certiﬁcate”) without presenting any
context about where and how that identity will be used.
• Privacy. Once a certiﬁcate has been installed on a user’s
machine, any site on the web can request TLS client authen-
tication with that certiﬁcate. The user now has two options,
do not log in at all or choose to log into more than one
site with the same certiﬁcate. Logging into more than one
website with the same certiﬁcate is possible, but creates the
potential for colluding sites to track a user’s browsing habits
by observing the certiﬁcate used to authenticate.
Another approach is for the user to create a different certiﬁ-
cate for each site he authenticates to, but this leads to even
worse user experience: Now the user is presented with an
ever growing list of certiﬁcates every time he/she attempts to
authenticate to a site requiring TLS client authentication.
• Portability. Certiﬁcates ideally are related to a private
key that cannot be extracted from the underlying platform.
Therefore, they cannot be easily moved from one device
to another. Hence, any solution that involves TLS Client
Authentication also must address and solve the problem of
user credential portability. Potential solutions include re-
obtaining certiﬁcates for different devices (which can be a
difﬁcult process by itself), extracting private keys (against
best security practices) and copying them from one device
to another, or cross-certifying certiﬁcates from different
devices.
We belive that the hassle of obtaining TLS client certiﬁcates and
the unfamiliar user interface leads users towards using less secure
(but more usable) password mechanisms when given the choice.
CARDSPACE. Microsoft developed the CardSpace [7] authentica-
tion system that had several features relevant to our work. Most
notably, it replaced passwords with a public-key based protocol.
Users would manage their digital identities through virtual identity
“cards.” When visiting a website that supported CardSpace, users
would be presented with a UI that allowed them to choose which
card, and thus which identity, to use with the site. Under the
hood, CardSpace authenticated users by creating cryptographic
attestations of the user’s identity that could be communicated to
the verifying website. This approach had the advantage of not
revealing the authentication secret (typically a private key) to the
verifying site. Furthermore, because users logged in by selecting a
“card” rather than typing a password they could not be phished.
Unfortunately, CardSpace was not widely adopted and was
eventually discontinued altogether. We believe that CardSpace’s
attempt to provide many new features increased its overall com-
plexity and contributed to its demise by unnecessarily complicating
the user interface, interaction, and development models. We strive
to learn from CardSpace’s failure and have carefully designed
our system to minimally alter the user experience (and burden on
developers) from what users (and developers) are already used to.
FEDERATED LOGIN. The general approach behind federated login
allows users to have only one account – at an identity provider
– to which they directly authenticate (or perhaps have a limited
number of such accounts). All other websites (usually called
relying parties) do not ask the user to authenticate directly – instead
they consume identity assertions from the identity provider.
OpenID [22], Facebook Connect [3], OpenID Connect [24], and
Security Assertion Markup Language (SAML) are examples of this
approach: after the user logs into the identity provider and approves
the issuance of the identity assertion, the identity provider sends the
identity assertion to the user’s browser, which then sends it to the
relying party. BrowserID [2] works in a slightly different manner:
here the browser, and not the identity provider, issues the identity
assertion (although the identity assertion includes a certiﬁcate from
the identity provider, which the user has to obtain ahead of time).
Federated login carries the promise of fewer passwords that users
need to manage. Of course, this promise can only be met when
most sites on the web are relying parties to at most a handful of
identity providers. The value proposition for a website to become a
relying party to an identity provider however, is not always a given:
what if the identity provider is insecure, or goes out of business,
or does not effectively block accounts that have been taken over by
attackers? Similarly, users may not be comfortable with the identity
provider knowing which sites the users frequent or relying parties
learning so much about users’ identities from the identity provider
– they might want to choose to have a new identity at a relying party
site instead of “reusing” their identity from the identity provider.
Finally, federated login really just reduces one problem (that of
securely authenticating to relying parties) to a previously unsolved
one (that of securely authenticating to an identity provider). It does
not, by itself, address the issue of users getting phished for their
password at the identity provider, or sharing that password with
such sites that decide not to work with a user’s identity provider.
TRADITIONAL TWO-FACTOR AUTHENTICATION. Some websites
use a variety of two-factor authentication schemes. In some cases,
the user has to enter, in addition to the password (“something that
405they know”), some other code that they obtain from a device they
In other cases (e.g., smart
carry (“something that they have”).
cards/tokens), users must actually plug the device into the PC on
which they’re authenticating.
Apart from the immediately obvious usability issues (the user
has to learn about the second factor and not forget to carry the
device with them), there are some more subtle ones:
If a user
opts into, say, Google’s 2-Step Veriﬁcation system, then some
of their legacy apps or devices might stop working, since they
use protocols (such as IMAP, SMTP or XMPP) that assume a
single-factor authentication mechanism. This in turns leads to
further complications that the user has to deal with. In Google’s
case there are machine-generated passwords (called “Application-
Speciﬁc Passwords”) that the user has to learn about, backup
options that need to be conﬁgured in case the second-factor device
goes missing, etc. As a result, users that sign up for two-factor
authentication are more likely to be locked out of their account than
those users that use only passwords.
Apart from raising the cognitive load on the user, two-factor
authentication does not completely solve the security issues of
passwords: while it does address the issue of re-using passwords
across websites, a clever attacker could theoretically phish a victim
both for their password and second factor.
ADVANCED PASSWORD MANAGERS. PwdHash [23], Password
Multiplier [16], and PassPet [29] are examples of advanced kinds
of password managers that are built into browsers:
they prevent
phishing attacks and reduce password sharing by enforcing that
different sites will receive different passwords (in particular, the
legitimate site and the impostor site will receive different pass-
words). These advanced password managers, however, come with
their own set of usability issues [8], ranging from the fact that users
no longer know the passwords for certain sites to problems with
the interaction model (users sometimes have to press certain key
combinations to invoke the password manager, or be careful to only
type the password into the browser chrome).
OTHER RELATED WORK. The TLS-SA [19] work by Oppliger
et al.
shares many of our insights. Unfortunately, it does not
provide long-lived TLS sessions and hence will not allow credential
binding in the same manner as our system. Additionally, the TLS-
SA papers do not take a ﬁrm stance on what the user experience
(UX) should be, instead enumerating a number of possible UXs,
none of which score well in the Usability section of the Bonneau et
al. [5] matrix.
The previously mentioned study by Bonneau et al.
lists more
“non-standard” authentication mechanisms and critically analyzes
them. We agree with most of that analysis and refer the interested
reader to that work.
One take-away of the Bonneau et al. work is that authentication
schemes where the user experiences strays from the traditional
“username + password” model have difﬁculty overcoming the
barrier for adoption. What’s more, much of the previous work in
this area dramatically shifts the user experience of login (e.g., by
requiring a second factor or redirecting the user to an identity
provider) while falling prey to some of the same attacks as pass-
words do – e.g., phishing.
3. GOALS AND ASSUMPTIONS
DESIGN GOALS. Given the lessons from previous work, we take a
fresh look at strong user authentication on the web. The goals we
have set for our work are outlined below:
• Some form of public-key cryptography needs to be involved
in the authentication process. Not only does this allow for the
authentication secret (the private key) to remain protected on
the client device, it also means that this secret is unknown to
the user and therefore cannot be stolen through phishing.
• The identity of the user must be established and proven above
the transport layer. Otherwise, the inability of users to see
the context in which they are authenticating leads to poor
user experience and privacy problems as we observed in TLS
client authentication.
• The action of logging into a website should remain invariant:
users type a username and password into a web page (not the
browser chrome or other trusted device), and then are logged
in. Apart from helping with learnability for the user, this
also helps with deployability: websites do not have to re-
design their login ﬂows and can gradually “onboard” those
users that possess the necessary client software into the new
authentication mechanism.
• The design should work well both in a world with very few
identity providers, or in a world where every website runs its
own authentication services.
• Users need a fallback mechanism that allows them to log in
just with something “that they know” in case the public-key
mechanism does not work (e.g., they are on a device that does
not support the new mechanism, or the device responsible for
doing the public-key operation is not available), or in case
they do have a legitimate need to hand over their credential
to a third party (for example, someone asking their more
tech-savvy friend/child/parent to debug a problem with their
account).
THREAT MODEL. Another goal of our work is to protect users
in the face of a strong adversary.
In particular, we assume the
following threat model: We allow adversaries to obtain the user’s
password – either through phishing or by compromising weaker
sites (for which the user has reused a password).
We assume that the attacker can perform a man-in-the-middle
attack on the connection between the user and the server to which
user is authenticating. For TLS based connections, this attack
assumes that the attacker has a valid TLS certiﬁcate for the site to
which the user is authenticating, thus allowing him to perform TLS
man-in-the-middle attacks. We even allow an attacker to obtain
the correct certiﬁcate for the victim site (presumably by stealing
the site’s private key). This capability is extremely powerful and
would even cause browser certiﬁcate pinning [20] to fall prey to a
TLS man-in-the-middle attack. Though we have not seen reports
of such attacks in the wild, security practitioners do believe such
attacks are possible [17].
Finally, we allow the attacker to deploy certain types of malware
on the user’s machine – for example those that perform keylogging.
However, we assume the attacker is not able to simultaneously
perform an attack on both the network connection and the physical
radio environment near the user. For example, these constraints
make malware that is able to control (and potentially man-in-the-
middle or denial of service) both the LAN NIC and the Bluetooth
chip out-of-scope, but leave in-scope malware that rides in the
browser session. Finally, we assume the attacker is not able to
simultaneously compromise the same user’s PC and user’s personal
device.
4064. ARCHITECTURE
4.1 Architectural Overview
Our PhoneAuth authentication framework meets the goals above
by opportunistically providing cryptographic identity assertions
from a user’s mobile phone while the user authentications on
another device. Figure 1 explains this process:
• In step 1, the user enters their username and password into a
regular login page, which is then sent (in step 2) to the server
as part of an HTML form.
• Instead of logging in the user, the server responds with a
login ticket, which is as a request for an additional identity
assertion (more details below).
• In step 3, the browser forwards the login ticket to the user’s
phone, together with some additional information about key
material the browser uses to talk to the server.
• The phone performs a number of checks, and if they succeed,
signs the login ticket with a private key that is known to
the server as belonging to the user. The signed login ticket
constitutes the identity assertion. It’s cryptographic because
we use public-key signatures to sign the browser’s public key
with the user’s private key.
• In step 4, the browser forwards the identity assertion to the
server. The server checks that the login ticket is signed with
a key belonging to the user identiﬁed in step 2, and if so,
logs in the user by setting a cookie that is channel-bound to
the browser’s key pair (see below). As a result, the phone
certiﬁed the browser’s key pair as speaking for the user, and
the server records this fact by setting the respective cookie.
We now provide additional notes about the overall architecture:
OPPORTUNISTIC IDENTITY ASSERTIONS. We do not assume that
every user will have a suitable mobile phone with them, or attempt
logins from a browser that supports this protocol. That is why
in step 4 the browser can also return an error to the server.
If
this is the case, the user has performed a traditional login (using
username + password), and in the usual manner (by typing it into
a login form), which means that the protocol essentially reduces
to a traditional password-based login. The cryptographic identity
assertion is opportunistic, i.e., provided when circumstances allow,
and omitted if they do not.
The server may decide to treat login sessions that carried a
cryptographic identity assertion differently from login sessions
that did not (and were only authenticated with a password). For
example, the server could decide to notify the user through back
channels (SMS, email, etc.), similar to Facebook’s Login Notiﬁca-
tions mechanism. The server could also restrict access to critical
account functions (e.g., changing security settings) to sessions that
did carry the identity assertion. We call this mode of PhoneAuth
opportunistic mode.
An alternative mode of PhoneAuth is strict mode, in which the
server rejects login attempts that did not carry a cryptographic
identity assertion. This is more secure, but comes at the cost of
disabling legacy devices that can’t produce identity assertions. The
decision whether to run in strict or opportunistic mode can either be
made by the server, or it can be made on a per-user basis: Security-
conscious users could opt into strict mode, while all other users run
in opportunistic mode. A user who has opted into strict mode would
not be able to log in when his phone was unavailable, while a user
has not opted in (i.e., runs in opportunistic mode) would simply see
a login notiﬁcation or a restricted-access session when logging in
without his phone.
USER EXPERIENCE. The user does not need to approve the login
from the phone. The server will only issue a login ticket if the
user has indicated his intent to log in by typing a username and
password. When the phone sees a login ticket, it therefore knows
that user consent was given, and can sign the login ticket without
further user approval.
This means that there is no user interaction necessary during a
PhoneAuth login, other than typing the username and password. If
the phone and browser can communicate over a sufﬁciently long-
range wireless channel, the user can leave the phone in their pocket
or purse, and will not even need to touch it.
PROTECTED LOGINS. Recently, Czeskis et al. [10] introduced the
concept of Protected Login whereby they group logins into two
categories – protected and unprotected. Protected logins are those
that are a result of strong, unphishable credentials (e.g., a cookie or
an identity assertion in our case). Unprotected logins are logins that
result from weaker authentication schemes (e.g., just a password or