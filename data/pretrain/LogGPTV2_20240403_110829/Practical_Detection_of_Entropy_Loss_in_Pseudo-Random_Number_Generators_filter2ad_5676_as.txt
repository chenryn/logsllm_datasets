attacks, then for any adversary/distinguisher A,D running in time t0 ≈ t, we have | Pr[Gi =
1] − Pr[Gi+ 1
Proof. Observe that if the (i + 1)th uncompromised next-query of (A,D) is recovering, games
Gi and Gi+ 1
are identical, therefore we suppose that this is not the case and that the (i + 1)th
uncompromised next-query of (A,D) is preserving.
We construct an adversary (A0,D) with advantage εp in game MPRES.
Its challenger calls
setup procedure to generate a parameter seed, a random state S0 and a random bit b0. Then it
generates the successive outputs of D : (σk, Ik, γk, zk)k=1,...,qr, sends seed and (γk, zk)k=1,...,qr to
(A0,D). Finally it sets the counter k to 0.
Attacker (A0,D) uses the previously generated parameter seed, sets the sampler state σ to 0,
picks a state S at random, sets a counter c to n and ﬁnally generates a random challenge bit b.
Then (A0,D) transfers seed to (A,D) and responds to the oracle queries from (A,D) in Gi, until
the ith uncompromised next-query. To answer these queries, (A0,D) uses procedure D-refresh,
M-get-state and M-set-state from game MPRES:
= 1]| ≤ εp.
2
2
2
2
• To answer (A,D)’s D-refresh queries, (A0,D) updates S with algorithm refresh and sends
the couple (γk, zk) to (A,D). Finally (A0,D) updates the counter c with γk.
• To answer (A,D)’s M-get-state queries, on input J, (A0,D) computes M-get(S, J) and
sends the result to (A,D). To answer (A,D)’s M-set-state queries, on input (M, J), (A0,D)
updates S with function M-get. Finally (A0,D) updates the counter c ← c − λ, where
λ = |J|, and if c  m, ‘, γ∗, λ be integers. Assume that G : {0, 1}m → {0, 1}n+‘ is a standard
(t, εG)-secure pseudo-random generator. Let G = (setup, refresh, next) be the pseudo-random
number generator with input deﬁned as above. Then G is ((t0, qr, qn, qs), λ, γ∗, qn(2εG + q2
r · (1 +
qs)εext))-robust against memory attacks, where t0 ≈ t, as soon as γ∗ ≥ m+ qsλ+2 log(1/εext)−1
and n ≥ m + qsλ + log(qr) + 2 log(1/εext) − 1.
Proof of Theorem 13. The proof has two parts, as in Section 4.3, we prove that the construction
is preserving and recovering, both against memory attacks. Note that here, contrary to the
Section 4.3, the strong extractor is used for the preserving and the recovering security.
Lemma 7. Let G = (setup, refresh, next) be deﬁned as above. Then G has (t, qr, qs, λ, γ∗, εG +
r εext)-Preserving security as soon as γ∗ ≥ m + 2 log(1/εext) − 1 and n ≥ m + qsλ + log(d) +
q2
2 log(1/εext) − 1.
Proof of Lemma 7. Consider games G0, G1 and G2 as follows:
• G0 is the original game MPRES applied to G.
• G1 is game G0 in which the challenger computes U
inside the next-ror procedure.
$← {0, 1}m instead of U = [Sd · X0]m1
• G2 is game G1 in which the challenger computes (S0, R0) $← {0, 1}n+‘ instead of (S0, R0) ←
G(U) inside the next-ror procedure, when challenge bit b = 0.
Distance between G0 and G1. Recall that in the security game MPRES, adversary can ask
as many queries as it wants to the oracle D-refresh, interleaved with queries to the oracles
M-set-state, and M-get-state, where each oracle D-refresh query increases the counter (c ←
c+γk) and each M-set-state or M-get-state query decreases it (c ← c−λ). Then as the adversary
makes at most qs M-set-state / M-get-state queries, by Lemma 6, the complete sequence of calls
before the call to next-ror followed by the m-truncation leads to a (γ, εext)-randomness extractor
as soon as :
γ ≥ m + 2 log(1/εext) − 1 and n ≥ m + qsλ + 2 log(1/εext) + log(d) − 1. (∗)
Finally, as adversary A has qr possibilities to choose when to start and stop the D-refresh queries,
there is a loss of q2
Distance between G1 and G2. Since G is a (t, εG)-secure standard pseudo-random number
r. With conditions above, | Pr[G1 = 1] − Pr[G0 = 1]| ≤ q2
r εext.
— 86 —
5.4. A Secure Construction
r · εext + εG, and as Pr[G2 = 1] = 1
generator, we can replace both the output and the random state by truly random values. Then
we have | Pr[G2 = 1] − Pr[G1 = 1]| ≤ εG.
Distance between G0 and 1
qs· q2
on n, m, γ and λ are satisﬁed.
Lemma 8. Let G = (setup, refresh, next) be deﬁned as above. Then G has (t, qr, γ∗, εG + q2
r εext)-
Recovering security as soon as γ∗ ≥ m+qsλ+2 log(1/εext)−1 and n ≥ m+log(d)+2 log(1/εext)−
1.
2. From the above games, one gets, | Pr[G2 = 1] − Pr[G0 = 1]| ≤
r εext + εG, as soon as conditions (∗)
2, | Pr[G0 = 1]− 1
2| ≤ q2
Proof. Consider games G0, G1 and G2 as follows:
• G0 is the original game MRECOV applied to G.
• G1 is game G0 in which the challenger computes U
inside the next-output-ror procedure.
$← {0, 1}m instead of U = [Sd · X0]m1
• G2 is game G1 in which the challenger computes (S0, R0) $← {0, 1}n+‘ instead of (S0, R0) ←
G(U) inside the next-ror procedure, when challenge bit b = 0.
Distance between G0 and G1. Recall that in the security game MRECOV, adversary sets a
chosen state, then is allowed to make a sequence of calls to D-refresh (the recovery sequence), fol-
lowed by one sequence of D-refresh interleaved with calls to M-set-state or M-get-state, followed
by one call to next-ror. where each oracle D-refresh query increase the counter c ← c + γk, and
each M-set-state or M-get-state query decrease it c ← c − λ. Then as the adversary makes at
most qs M-set-state / M-get-state queries, by Lemma 6, the complete sequence of calls before
the call to next-ror followed by the m-truncation leads to a (γ, εext)-randomness extractor as
soon as :
γ ≥ m + qsλ + 2 log(1/εext) − 1 and n ≥ m + 2 log(1/εext) + log(d) − 1. (∗∗)
r εext.
Finally, as adversary A has qr possibilities to choose when to start and stop the D-refresh
queries and has qs possibilities to choose q, there is a loss of qsq2
r. With conditions above,
| Pr[G1 = 1] − Pr[G0 = 1]| ≤ qsq2
Distance between G1 and G2. Since G is a (t, εG)-secure standard pseudo-random generator,
we can replace both the output and the random state by truly random values. And we have
| Pr[G2 = 1] − Pr[G1 = 1]| ≤ εG.
Distance between G0 and 1
r · εext + εG, and as Pr[G2 = 1] = 1
q2
(∗∗) are satisﬁed.
Let now ﬁnalize the proof of Theorem 13. We can divide the set of next calls done by A between
recovering and preserving. From Lemma 7 and 8, G has:
2. From the above games, one gets, | Pr[G2 = 1] − Pr[G0 = 1]| ≤
r εext + εG, as soon as conditions
2, | Pr[G0 = 1] − 1
2| ≤ qsq2
• (t, qr, qs, λ, γ∗, εG + q2
r εext)-Preserving security as soon as γ∗ ≥ m + 2 log(1/εext) − 1 and
n ≥ m + qsλ + log(qr) + 2 log(1/εext) − 1.
• (t, qr, qs, λ, γ∗, εG + q2
r εext)-Recovering security as soon as γ∗ ≥ m + qsλ + 2 log(1/εext) −
1, and n ≥ m + log(qr) + 2 log(1/εext) − 1.
— 87 —
Chapter 5. Robustness Against Memory Attacks
By Theorem 12, we get that G is ((t0, qr, qn, qs), λ, γ∗, qn(1 + qs)(εG + q2
r εext))-robust against
memory attacks, where t0 ≈ t, as soon as γ∗ ≥ m + qsλ + 2 log(1/εext) − 1 and n ≥ m + qsλ +
log(qr) + 2 log(1/εext) − 1.
As in Section 4.3, to slightly reduce the number of parameters in Theorem 13, we can let
k be our “security parameter” and set qr = qn = 2k and εext = 2−6k. Then we can set
n = m+qsλ+log(qr)+2 log(1/εext)−1 = m+qsλ+11k−1 and γ∗ ≥ m+qsλ+2 log(1/εext)−1 =
m + qsλ + 10k − 1. Summarizing all of these, we get Theorem 14.
Theorem 14. Let k, m, ‘, n be integers, where n ≥ m+qsλ+11k−1. Assume that G : {0, 1}m →
{0, 1}n+‘ is a standard (t, εG)-secure pseudo-random generator. Then G is a ((t0, 2k, 2k, qs), m +
qsλ+10k−1, λ, 2k(1+2k)· εG +2−k +2−2k)-robust pseudo-random number generator with input