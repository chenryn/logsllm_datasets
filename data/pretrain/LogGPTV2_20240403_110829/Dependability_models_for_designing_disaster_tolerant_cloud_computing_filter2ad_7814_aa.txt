title:Dependability models for designing disaster tolerant cloud computing
systems
author:Bruno Silva and
Paulo Romero Martins Maciel and
Eduardo Tavares and
Armin Zimmermann
Dependability Models for Designing Disaster Tolerant Cloud Computing Systems
Bruno Silva, Paulo Maciel, Eduardo Tavares
Armin Zimmermann
Center for Informatics (CIn)
Federal University of Pernambuco (UFPE)
Recife, Pernambuco
{bs,prmm,eagt}@cin.ufpe.br
System & Software Engineering
Ilmenau University of Technology
Ilmenau, Germany
PI:EMAIL
Abstract—Hundreds of natural disasters occur in many parts
of the world every year, causing billions of dollars in damages.
This fact contrasts with the high availability requirement of
cloud computing systems, and, to protect such systems from
unforeseen catastrophe, a recovery plan requires the utilization
of different data centers located far enough apart. However, the
time to migrate a VM from a data center to another increases
due to distance. This work presents dependability models
for evaluating distributed cloud computing systems deployed
into multiple data centers considering disaster occurrence.
Additionally, we present a case study which evaluates several
scenarios with different VM migration times and distances
between data centers.
Keywords-cloud
computing;
dependability
evaluation;
stochastic Petri nets;
I. INTRODUCTION
Cloud computing has driven the new wave of Internet-
based applications by providing computing as a service [1].
Nowadays, usual business applications (e.g., spreadsheets,
text editors) are provided as cloud computing services, in
the sense that they are often accessed using a web browser,
and, their respective software/data reside on remote servers.
This approach has affected all ﬁelds of the computational
system, from users to hardware manufacturers [2].
Such paradigm is attractive for a number of reasons: (i)
it frees users from installing, conﬁguring and updating the
software applications; (ii) it offers advantages in terms of
mobility as well as collaboration; and (iii) updates and bug
ﬁxes can be deployed in minutes, simultaneously affecting
all users around the globe [3]. Just like traditional utilities
such as telephone, water, electricity and gas, cloud com-
puting service can be adopted in accordance with customer
needs, such that he does not have to worry about how and
where the service is located. Moreover, the adoption of cloud
services enables the adoption of computing resources in
a scalable fashion, i.e., as new services and resources are
needed, the infrastructure is available on demand [3].
An important type of cloud service is the Infrastructure as
a Service (IaaS), such as Amazon EC2 [4] and IBM Smart
Business Cloud [5]. IaaS delivers, on-demand, computing
resources in the form of virtual machines (VMs) deployed
into the cloud provider’s data center (i.e., IaaS provider),
satisfying user needs [6].
In this context, availability is a prominent metric to
assess provider’s quality-of-service (QoS). For prominent
IaaS providers, the availability level is regulated by adopting
a Service Level Agreement (SLA), which speciﬁes, for
instance, the maximum downtime per year. Penalties may be
applied if the deﬁned availability level is not satisﬁed. Thus,
to meet SLA requirements, IaaS providers need to evaluate
the dependability level of its environment, contemplating,
also, the possibility of disasters.
A disaster recovery plan requires the utilization of differ-
ent data centers located far enough apart to mitigate the
effects of unforeseen disasters (e.g., earthquakes) [7]. If
multiple data centers are located in different geographical
locations, it is expected an availability improvement for the
whole system. On the other hand, VM migration time in-
creases due to distance between data centers. Consequently,
dependability evaluation considering VM migration time
is of utmost importance when considering the analysis of
distributed cloud systems.
This work presents an approach to evaluate dependability
metrics in cloud computing systems deployed into geograph-
ically distributed data centers as well as taking into account
disaster occurrence. The proposed approach contemplates
combinatorial (RBD - Reliability Block Diagrams) and
state-based models (SPN - Stochastic Petri Nets) to allow
dependability evaluation using a hierarchical modeling [8].
Using the proposed approach, IaaS providers can evaluate
the system distributed in different data centers and the
impact of VM migration on dependability metrics.
The paper is organized as follows. Section II highlights
the related works. Section III describes the cloud computing
system considered. Then, the formal dependability models
are introduced in Section IV, and Section V presents a
case study. Finally, Section VI concludes this paper and
introduces future works.
II. RELATED WORKS
Over the last years, some authors have been devoting
efforts to study dependability issues on cloud computing
systems. Longo et al. [6] proposed an approach for availabil-
ity analysis of cloud computing systems taking into account
Petri nets and Markov chains. The authors also developed
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:53 UTC from IEEE Xplore.  Restrictions apply. 
closed-form equations and demonstrated their approach can
scale for large systems.
In [9], a performability analysis for cloud systems is
presented. The authors quantify the effects of variations
in workload, failure rate and system capacity on service
quality. In [10], the authors investigate the aging effects on
Eucalyptus framework, and they also propose a strategy to
mitigate such issues during system execution. [11] describes
a system design approach for supporting transparent migra-
tion of virtual machines that adopt local storage for their
persistent state. The approach is transparent to the migrated
VM, and it does not interrupt open network connections
during VM migration.
In [12], the authors present a case study that quantiﬁes
the effect of VM live migrations in the performance of an
Internet application. Such study helps data center designers
to plan environments in which metrics, such as service
availability and responsiveness, are driven by Service Level
Agreements. Dantas et al. [13] presents a study of warm-
standby mechanisms in Eucalyptus framework. Their results
demonstrate that replacing machines by more reliable coun-
terparts would not produce improvements in system avail-
ability, whereas some fault-tolerant techniques can indeed
increase dependability levels.
Unlike previous works, this paper proposes dependability
models for evaluating cloud computing systems deployed
into geographically distributed data centers, considering VM
migration and the occurrence of disasters.
III. SYSTEM ARCHITECTURE
This section presents an overview of the cloud computing
system considered in this work, which contemplates a set of
components, distributed over distinct data centers (Figure 1).
The system is composed of d data centers, each with two
set of machines, namely, hot and warm pools. The hot pool
is composed of n physical machines (PM), which are active
and running virtual machines (VM). The warm pool takes
into account m PMs that are active, but without running
VMs. Thus, the number of PMs in a data center is t = m+n.
Depending on the capacity of each PM, it is possible to
run multiple VMs in the same host. In this study, we assume
all physical machines are identical, in the sense that they
adopt the same services and hardware/software components.
PMs may share a common network attached storage (NAS)
or they may adopt a storage area network (SAN) to provide
distributed storage and, also, to allow the migration of a
virtual machine from one server to another in the same data
center [14]. In case of failure, a VM must be instantiated in
another physical machine. If there is no available PM, the
VM image is migrated to another data center.
Furthermore, a Backup Server (BS) is considered to
provide backup of VM data. This component receives a
copy of each VM image during data center operation. Hence,
whenever a disaster makes one data center unavailable, BS
Figure 1. Distributed Cloud System Example
sends VM copies to an operational data center. In this
work, the number of running VMs (w) is compared with a
threshold (k) to evaluate the availability of cloud computing
system. Hence, if w ≥ k the system is operational.
IV. MODELING
This section presents the adopted hierarchical modeling
to evaluate system dependability. Firstly, the basic models
are presented, and, then, the modeling approach is detailed.
Lastly, the approach is demonstrated for representing a cloud
computing conﬁguration.
Henceforth, the following operators are adopted for as-
sessing dependability metrics: P {exp} estimates the prob-
ability of the inner expression (exp); and #p denotes the
number of tokens in place p.
A. SPN block: SIMPLE COMPONENT
The ﬁrst component to be represented is named as “SIM-
PLE COMPONENT”. This component is characterized by
the absence of redundancy, that is, the component might
be in two states, either functioning or failed. In order to
compute its availability, mean time to failure (MTTF) and
mean time to repair (MTTR) are the only parameters needed
for computing its availability.
The
of
the
respective
SPN model
“SIM-
PLE COMPONENT” is shown in Figure 2. Both transitions
are exponentially distributed (exp) and have single server
(ss) semantic [15]. Table I depicts the attributes related to
transitions of the SIMPLE COMPONENT model.
Places X ON and X OFF are the model component’s
activity and inactivity states, respectively. Label “X” is
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:53 UTC from IEEE Xplore.  Restrictions apply. 
X_ON
X_Repair
X_Failure
X_OFF
Figure 2.
SIMPLE COMPONENT model
SIMPLE COMPONENT TRANSITION ATTRIBUTES.
Table I
Transition Type Delay Markup Concurrency
X Failure exp MTTF constant
exp MTTR constant
X Repair
ss
ss
instantiated according to the component name, for instance,
DC UP and DC DOWN (Figure 6). A component is oper-
ational only if the number of tokens (#) in place X ON
is greater than 0. P{#X ON>0} means the component’s
availability (steady state evaluation).
B. SPN block: VM BEHAVIOR Component
VM BEHAVIOR component represents the behavior of
N VMs running on a physical machine. This basic block
interacts with 3 SIMPLE COMPONENT models: (i) one
representing the occurrence of disasters (DC); (ii) the phys-
ical machine (OSPM); and (iii) the network (NAS NET).
Figure 3 presents the model, in which places VM UP1,
VM DOWN1, VM RDY1 and VM STRTD1 denote the
amount of VMs in states operational, failure, repairing, and
starting, respectively. Place FailedVMS represents VMs that
are failed and can be started in another PMs.
Transitions VM F1, VM R1 and VM STRT1 represent
the failure, repair and starting activities associated with
the virtual machines. The connections with the SIM-
PLE COMPONENT models are carried out by immediate
transitions FPM UP1, FPM DW1, FPM ST1, FPM Subs1
and the respective guard conditions (Table II).
More speciﬁcally, these immediate transitions verify dis-
aster occurrence as well as the failures on the physical
machine and network devices. As the reader should note,
a VM fails whenever the respective infrastructure is not
capable to provide the service. Transition VM Subs1 denotes
the opposite idea, in the sense that, virtual machines start
only if the required infrastructure is operational.
Figure 3. VM BEHAVIOR Component
X VM MTTR and X VM STRT TIME denote the mean
time to failure, repair and start a VM, respectively.
VM BEHAVIOR COMPONENT TRANSITION ATTRIBUTES.
Table III
Delay
Markup Concurrency
Transition Type
constant
exp
VM F1
constant
exp
VM R1
VM STRT1 exp X VM STRT TIME constant
X VM MTTF
X VM MTTR
is
is
ss
Availability
is
estimated
in which j
P{#VM UP1 ≥ j},
of virtual machines required to provide the service.
using
the
expression
represents the number
C. SPN block: TRANSMISSION COMPONENT
Figure 4 presents TRANSMISSION COMPONENT, which
represents the transmission of a virtual machine from one
data center to another. A VM should migrate to another
data center whenever the number of operational physical
machines in the data center is less than a given number
l. The constant l depends on the service provided and the
capacity of each environment. Moreover, Backup Server is
responsible for migrating the VM image in case of disaster
or network error.
TRE_21
TRF_P1 TRI_21
TRI_12
TRE_12
TBE_21
TBI_21
GUARD EXPRESSIONS FOR VM BEHAVIOR COMPONENT OF FIGURE 3.
Table II
TBI_12
TBE_12
Transition
FPM UP1
FPM DW1
FPM ST1
VM Subs1
Condition
Description
(#OSPM UPx=0) OR (#NAS NET UPy=0)
Failure of physical
OR (#DC UPz=0)
machine or infrastructure
(#OSPM UPx=0) OR (#NAS NET UPy=0)
Failure of physical
OR (#DC UPz=0)
machine or infrastructure
(#OSPM UPx=0) OR (#NAS NET UPy=0)
Failure of physical
OR (#DC UPz=0)
machine or infrastructure
(#OSPM UPx>0) AND (#NAS NET UPy>0)
Physical machine
AND (#DC UPz>0)
and infrastructure working
Table III depicts the attributes related to VM BEHAVIOR
X VM MTTF,
transitions,
which
component
in
Figure 4. TRANSMISSION COMPONENT SPN model
TRANSMISSION COMPONENT has eight
transitions:
four exponentially distributed transitions that represent the
VM data transfer and four immediate transitions that depict
the enabling of the VM migration. TRE 21 represents the
data transfer from Data Center 2 to Data Center 1; TRE 12
characterizes the migration from Data Center 1 to Data
Center 2; TBK 21 corresponds to data transfer from Backup
Server to Data Center 1, and TBK 12 characterizes the data
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:53 UTC from IEEE Xplore.  Restrictions apply. 
transfer from Backup Server to Data Center 2. Table IV