# Dependability Models for Designing Disaster-Tolerant Cloud Computing Systems

## Authors
- Bruno Silva
- Paulo Romero Martins Maciel
- Eduardo Tavares
- Armin Zimmermann

### Affiliations
- **Center for Informatics (CIn)**
  - Federal University of Pernambuco (UFPE)
  - Recife, Pernambuco, Brazil
  - Email: {bs, prmm, eagt}@cin.ufpe.br
- **System & Software Engineering**
  - Ilmenau University of Technology
  - Ilmenau, Germany
  - Email: PI:EMAIL

## Abstract
Hundreds of natural disasters occur annually worldwide, causing billions of dollars in damages. This contrasts with the high availability requirements of cloud computing systems. To protect such systems from unforeseen catastrophes, a recovery plan often involves using multiple data centers located far apart. However, the time to migrate a virtual machine (VM) between data centers increases with distance. This work presents dependability models for evaluating distributed cloud computing systems deployed across multiple data centers, considering disaster occurrences. Additionally, we present a case study that evaluates various scenarios with different VM migration times and distances between data centers.

**Keywords:** Cloud computing, dependability evaluation, stochastic Petri nets, disaster tolerance

## 1. Introduction
Cloud computing has driven the new wave of Internet-based applications by providing computing as a service [1]. Today, common business applications (e.g., spreadsheets, text editors) are often provided as cloud services, accessible via web browsers, with software and data residing on remote servers. This paradigm shift affects all aspects of computational systems, from users to hardware manufacturers [2].

The cloud computing model is attractive for several reasons:
1. It frees users from installing, configuring, and updating software.
2. It offers advantages in terms of mobility and collaboration.
3. Updates and bug fixes can be deployed quickly, affecting all users globally [3].

Like traditional utilities (e.g., telephone, water, electricity, gas), cloud computing services can be adopted based on customer needs, without worrying about the underlying infrastructure. Additionally, cloud services enable scalable adoption of computing resources, available on demand [3].

A significant type of cloud service is Infrastructure as a Service (IaaS), such as Amazon EC2 [4] and IBM Smart Business Cloud [5]. IaaS provides on-demand computing resources in the form of virtual machines (VMs) deployed in the provider's data center, meeting user needs [6].

In this context, availability is a key metric for assessing the quality-of-service (QoS). For leading IaaS providers, availability is regulated by Service Level Agreements (SLAs), which specify, for example, the maximum downtime per year. Penalties may apply if the defined availability level is not met. Therefore, to meet SLA requirements, IaaS providers must evaluate the dependability of their environment, including the possibility of disasters.

A disaster recovery plan typically involves using multiple geographically dispersed data centers to mitigate the effects of unforeseen disasters (e.g., earthquakes) [7]. While this improves overall system availability, it also increases VM migration time due to the distance between data centers. Consequently, dependability evaluation considering VM migration time is crucial for analyzing distributed cloud systems.

This work presents an approach to evaluate dependability metrics in cloud computing systems deployed across geographically distributed data centers, taking into account disaster occurrences. The proposed approach uses both combinatorial (Reliability Block Diagrams, RBD) and state-based models (Stochastic Petri Nets, SPN) for hierarchical modeling [8]. Using this approach, IaaS providers can evaluate the system's distribution across different data centers and the impact of VM migration on dependability metrics.

## 2. Related Works
Over the past few years, several authors have studied dependability issues in cloud computing systems. Longo et al. [6] proposed an approach for availability analysis using Petri nets and Markov chains, developing closed-form equations that scale well for large systems.

In [9], a performability analysis for cloud systems is presented, quantifying the effects of variations in workload, failure rate, and system capacity on service quality. In [10], the authors investigate aging effects on the Eucalyptus framework and propose strategies to mitigate these issues during system execution. [11] describes a system design approach for transparent VM migration that uses local storage for persistent state, ensuring no interruption of open network connections during migration.

[12] presents a case study quantifying the effect of VM live migrations on the performance of an Internet application, helping data center designers plan environments where service availability and responsiveness are driven by SLAs. Dantas et al. [13] study warm-standby mechanisms in the Eucalyptus framework, showing that replacing machines with more reliable ones does not significantly improve availability, but fault-tolerant techniques can enhance dependability levels.

Unlike previous works, this paper proposes dependability models for evaluating cloud computing systems deployed across geographically distributed data centers, considering VM migration and disaster occurrences.

## 3. System Architecture
This section provides an overview of the cloud computing system considered in this work, which includes components distributed across distinct data centers (Figure 1).

The system consists of \(d\) data centers, each with two sets of machines: hot and warm pools. The hot pool contains \(n\) physical machines (PMs) running VMs, while the warm pool includes \(m\) PMs that are active but do not run VMs. Thus, the total number of PMs in a data center is \(t = m + n\). Depending on the PM capacity, multiple VMs can run on the same host. We assume all PMs are identical, using the same services and hardware/software components.

PMs may share a common network-attached storage (NAS) or use a storage area network (SAN) for distributed storage and VM migration within the same data center [14]. In case of failure, a VM is instantiated on another PM. If no PM is available, the VM image is migrated to another data center.

A Backup Server (BS) is included to provide VM data backup. This component receives a copy of each VM image during data center operation. If a disaster makes a data center unavailable, the BS sends VM copies to an operational data center. The number of running VMs (\(w\)) is compared with a threshold (\(k\)) to evaluate system availability. If \(w \geq k\), the system is operational.

## 4. Modeling
This section presents the hierarchical modeling approach for evaluating system dependability. We first introduce the basic models and then detail the modeling approach. Finally, we demonstrate the approach for representing a cloud computing configuration.

### 4.1. SPN Block: SIMPLE COMPONENT
The "SIMPLE COMPONENT" represents a component without redundancy, which can be in one of two states: functioning or failed. Its availability is computed using mean time to failure (MTTF) and mean time to repair (MTTR).

The SPN model for the "SIMPLE COMPONENT" is shown in Figure 2. Both transitions are exponentially distributed and have single-server (ss) semantics [15]. Table I lists the attributes related to the transitions of the SIMPLE COMPONENT model.

Places \(X_{ON}\) and \(X_{OFF}\) represent the component's active and inactive states, respectively. The label "X" is instantiated according to the component name, such as \(DC_{UP}\) and \(DC_{DOWN}\) (Figure 6). A component is operational if the number of tokens in place \(X_{ON}\) is greater than 0. \(P\{X_{ON} > 0\}\) denotes the component's availability (steady-state evaluation).

### 4.2. SPN Block: VM BEHAVIOR Component
The "VM BEHAVIOR" component represents the behavior of \(N\) VMs running on a physical machine. This block interacts with three SIMPLE COMPONENT models: (i) one representing disaster occurrence (DC), (ii) the physical machine (OSPM), and (iii) the network (NAS NET).

Figure 3 shows the model, where places \(VM_{UP1}\), \(VM_{DOWN1}\), \(VM_{RDY1}\), and \(VM_{STRTD1}\) denote the number of VMs in operational, failure, repairing, and starting states, respectively. Place \(FailedVMS\) represents VMs that are failed and can be started on other PMs.

Transitions \(VM_{F1}\), \(VM_{R1}\), and \(VM_{STRT1}\) represent the failure, repair, and starting activities associated with the VMs. Connections with the SIMPLE COMPONENT models are made through immediate transitions \(FPM_{UP1}\), \(FPM_{DW1}\), \(FPM_{ST1}\), \(FPM_{Subs1}\), and their respective guard conditions (Table II).

These immediate transitions verify disaster occurrence and failures in the physical machine and network devices. A VM fails if the infrastructure cannot provide the service. Transition \(VM_{Subs1}\) represents the opposite, indicating that VMs start only if the required infrastructure is operational.

### 4.3. SPN Block: TRANSMISSION COMPONENT
Figure 4 shows the TRANSMISSION COMPONENT, which represents VM migration between data centers. A VM migrates to another data center if the number of operational PMs in the current data center is less than a given number \(l\). The constant \(l\) depends on the service and the capacity of each environment. The Backup Server is responsible for migrating the VM image in case of a disaster or network error.

The TRANSMISSION COMPONENT has eight transitions: four exponentially distributed transitions representing VM data transfer and four immediate transitions enabling VM migration. \(TRE_{21}\) represents data transfer from Data Center 2 to Data Center 1; \(TRE_{12}\) represents migration from Data Center 1 to Data Center 2; \(TBK_{21}\) represents data transfer from the Backup Server to Data Center 1, and \(TBK_{12}\) represents data transfer from the Backup Server to Data Center 2. Table IV lists the attributes related to the TRANSMISSION COMPONENT transitions.

## 5. Case Study
This section presents a case study that evaluates various scenarios with different VM migration times and distances between data centers. The results provide insights into the impact of these factors on the dependability of the cloud computing system.

## 6. Conclusion and Future Work
This paper presents dependability models for evaluating distributed cloud computing systems deployed across multiple data centers, considering disaster occurrences. The proposed approach uses both RBD and SPN models for hierarchical modeling, allowing IaaS providers to evaluate the system's distribution and the impact of VM migration on dependability metrics.

Future work will focus on extending the models to include more complex scenarios and incorporating additional factors that affect system dependability.