Intuitively, when two senders deviate from the equilibrium send-
ing rate, they will either change towards fair share if they are in
the same modes, or the sender in scavenger mode will yield, both
of which drive them back to equilibrium. In an ideal situation, then,
when two Proteus-H senders with switching threshold ùëü1 and ùëü2
(a) RTT Deviation
(b) RTT Gradient
Figure 2: PDF of RTT deviation/gradient under Poisson ar-
rival CUBIC flows
To show its advantage as a competition indicator, we compare
RTT deviation with RTT gradient, a metric used by Proteus-P and
Vivace for latency-awareness. More specifically, we will compare
whether RTT deviation and absolute value of RTT gradient2 in-
deed increase as flow competition increases. Considering that RTT
gradient is a metric used by the primary protocol, the scavenger‚Äôs
dedicated performance metric should be something that produces
an earlier signal of impending congestion than RTT gradient, so
that the scavenger can also yield to latency-sensitive senders.
For this comparison, we set up a 100 Mbps, 60 ms RTT bottleneck
with 1500 KB (2 BDP) buffer on Emulab. To emulate impending
congestion, we generate short CUBIC flows with uniform flow sizes
ranging from [20, 100] KB and Poisson interarrival time. To measure
the two metrics, we use a fix-rate UDP flow at 20 Mbps and analyze
the RTT gradient and deviation it observes in consecutive 1.5 RTT
intervals across a 2-minute run. We test flow arrival rates ranging
from 0-9 flows/sec, resulting in average link utilization in the range
of 20-24%. This gives an indication of how the metrics perform
as an early signal of congestion: congestion is not persistent, but
random arrivals will cause occasional brief periods of congestion.
Fig. 2 presents the probability distribution function (PDF) of
the two metrics. RTT deviation closely captures the extent of con-
gestion, with its most significant probability peak getting further
from the non-congestion peak as the arrival rate of CUBIC flows
increases. Specifically, because the arrival rate of 3 flows/sec can-
not introduce continuous congestion, RTT deviation shows two
peaks, corresponding to non-congestion and congestion cases, re-
spectively. In comparison, RTT gradient has more similar peaks
in all cases. To quantify this, we calculate a confusion probability
from the observed RTT samples, defined as the probability, across
uniform-randomly-chosen pairs of (0 flow/sec, 9 flow/sec) samples,
that a metric has smaller value in the congested (9 flow/sec) sample
than in the non-congested (0 flow/sec) sample. RTT deviation has
a confusion probability of 0.6%, significantly lower than 8.0% for
RTT gradient. This validates that RTT deviation provides a more
sensitive, early signal of RTT fluctuation dynamics, confirming our
intuition in ¬ß2.2 that the averaging effect of RTT gradient delays or
hides important information.
Nevertheless, latency noise (i.e., non-congestion RTT variability)
may also cause deviation in some networks, like rapidly chang-
ing wireless networks. Proteus‚Äôs rate controller (from [17]) helps
2We use the absolute value of RTT gradient since either significantly positive or
significantly negative gradients could indicate flow competition. RTT deviation, of
course, is never negative.
619
048121600.20.40.60.81.01.21.4Probability Density (%)RTT Deviation (ms)0 Ô¨Çows/sec3 Ô¨Çows/sec6 Ô¨Çows/sec9 Ô¨Çows/sec01020304050 0 0.005 0.01 0.015 0.02Probability Density (%)Absolute Value of RTT Gradient0 Ô¨Çows/sec3 Ô¨Çows/sec6 Ô¨Çows/sec9 Ô¨Çows/secSIGCOMM ‚Äô20, August 10‚Äì14, 2020, Virtual Event, USA
Tong Meng, Neta R. Schiff, Brighten Godfrey, and Michael Schapira
(ùëü1 < ùëü2) compete on a bottleneck with capacity C, we would expect
them to converge towards the rate pair (ùë•‚àó
C/2, C/2
ùëü1, (C ‚àí ùëü1)
(C ‚àí ùëü2), ùëü2
C/2, C/2
1, ùë•‚àó
2) where:
if C ‚àà [0, 2ùëü1),
if C ‚àà [2ùëü1, ùëü1 + ùëü2),
if C ‚àà [ùëü1 + ùëü2, 2ùëü2),
if C ‚àà [2ùëü2, ‚àû).
(ùë•‚àó
1, ùë•‚àó
2) =
Cross-Layer Design for Switching Threshold. The thresh-
old in ùë¢ùêª (ùë•ùëñ) should be set adaptively by the application. We de-
velop a threshold policy for video streaming. We start with three
observations of video bitrate adaptation:
(1) Users are oblivious to transport throughput as long as the
highest video quality is rendered smoothly.
(2) The client will only request the next video chunk if there is
enough space in the local playback buffer.
(3) When the video stalls upon rebuffering, the client wants as
large throughput as possible to recover.
With this in mind, for bitrate adaptation, we can dynamically set
the threshold to the maximum value which satisfies the following
two rules:
(2) Buffer limit rule: threshold ‚â§ 1
2‚àíùëì
(1) Sufficient rate rule: threshold ‚â§ ùê∫ ¬∑ bitratemax. We set
ùê∫ = 1.5 so there is a sufficient margin of safety to avoid
rebuffering.
¬∑ bitratecurrent, where ùëì
is the (possibly fractional) number of chunks of free space in
the buffer. This rule applies when ùëì < 2, and is checked upon
requesting a new chunk. The effect is that the threshold will
decrease as the buffer approaches full (and therefore loading
chunks quickly is not necessary, since anyway, the ABR
algorithm will pause transmission if the buffer is full).
Then, whenever rebuffering happens, the following rule will over-
ride the switching threshold, until the video resumes.
(3) Emergency rule: threshold = ‚àû.
As our experiments show, when a buffer-based adaptation algo-
rithm such as BOLA [35] is used, the above rules effectively increase
network-wide efficiency. We should note that we present this as a
representative solution for benchmarking; it may not be suitable for
bitrate adaptation that uses throughput for control. We leave the
incorporation of Proteus-H into other video streaming algorithms,
and other types of applications, to future work.
5 HANDLING LATENCY NOISE
Inherent network dynamics, e.g., wireless channel noise, raise chal-
lenges for latency-aware congestion control. In Proteus, a noisy
utility calculation, which is based on RTT gradient and deviation,
can result in incorrect rate change decisions during ramping up,
and thus, capacity under-utilization.
For the purpose of noise tolerance, a fixed tolerance threshold for
RTT gradient is used by PCC Vivace [17] (any RTT gradient with a
smaller magnitude is ignored). But a fixed threshold is ineffective
with rapid fluctuations that can occur on the Internet. We therefore
design more robust mechanisms.
Per-ACK: RTT Sample Filtering. We found that in dynamic
environments such as wireless networks, ACK reception can be
bursty even on a non-congested link, possibly due to irregular MAC
620
scheduling. This leads to excessive penalty from both RTT gradient
and deviation, and can mislead a Proteus sender into slowing down.
To mitigate this, we use the ‚ÄúACK interval‚Äù (the time between
reception of two consecutive ACKs) to filter out abnormal RTT
samples, when the ratio between two consecutive ACK intervals
exceeds a threshold (set to 50 in our implementation). All RTT
samples are then ignored until an RTT is observed that is below
the exponentially weighted moving RTT average.
Per-MI: Regression Error Tolerance. In RTT gradient calcu-
lation, the error in linear regression also reflects the accuracy of
calculated RTT gradient. Specifically, for the ùëñ-th packet sent in the
MI whose sent time is ùë†ùëíùëõùë°_ùë°ùëñùëöùëíùëñ and RTT is ùëÖùëáùëáùëñ, we calculate its
estimated regression RTT as:
ùëÖùëáùëá‚àó
ùëñ = ùëéùë£ùëî(ùëÖùëáùëáùëñ)+ùëüùë°ùë°_ùëîùëüùëéùëëùëñùëíùëõùë° ¬∑(ùë†ùëíùëõùë°_ùë°ùëñùëöùëíùëñ ‚àíùëéùë£ùëî(ùë†ùëíùëõùë°_ùë°ùëñùëöùëíùëñ)) ,
where ùëéùë£ùëî(ùëÖùëáùëáùëñ) and ùëéùë£ùëî(ùë†ùëíùëõùë°_ùë°ùëñùëöùëíùëñ) are the average RTT and sent
time for all acknowledged packets in the MI, respectively. Then, we
calculate regression error based on the residual in linear regression:
ùëüùëíùëîùëüùëíùë†ùë†ùëñùëúùëõ_ùëíùëüùëüùëúùëü =
(ùëÖùëáùëáùëñ ‚àí ùëÖùëáùëá‚àó
ùëñ )2 ¬∑
1
ùëÄùêº_ùëëùë¢ùëüùëéùë°ùëñùëúùëõ
,
(cid:115) 1
ùëõ
¬∑
ùëñ
where ùëõ is the number of acknowledged packets in the MI and the
final factor simply normalizes by MI duration to produce a relative
error. Then, for each MI, if the calculated RTT gradient‚Äôs magnitude
is less than ùëüùëíùëîùëüùëíùë†ùë†ùëñùëúùëõ_ùëíùëüùëüùëúùëü, we treat both the RTT gradient and
the RTT deviation as 0.
MI History: Trending Tolerance. The above per-MI error tol-
erance may hide a slow but persistent RTT increase, which stays
within tolerance for several consecutive MIs, leading to late reaction
against inflation. Since RTT deviation is ignored too, a Proteus-S
sender may stop behaving as a scavenger until it sees more sig-
nificant inflation. To avoid such late reaction, Proteus keeps track
of latency-related metrics for a longer time period. Specifically, a
sender maintains the RTT deviation and average RTT of the most
recent ùëò MIs (e.g., ùëò = 6 in our experiments for a reasonable trade-
off between noise-vulnerability and slow responsiveness), based
on which it computes two trending metrics: trending gradient and
trending deviation. Specifically, using linear regression based on the
stored MIs‚Äô average RTTs, trending gradient is calculated as:
¬∑ ùëò
ùëó=1
ùêæ =
1
ùëò
ùëò
ùëó ,
ùëÖùëáùëá =
ùëÄùêº ùëó (ùëÖùëáùëá) ,
1
ùëò
¬∑ ùëò
ùëñ( ùëó ‚àí ùêæ)2
ùëó=1
ùëÄùêº ùëó (ùê∑ùê∏ùëâ) ,
ùë°ùëüùëíùëõùëëùëñùëõùëî_ùëîùëüùëéùëëùëñùëíùëõùë° =
ùëó=1( ùëó ‚àí ùêæ)(ùëÄùêº ùëó (ùëÖùëáùëá) ‚àí ùëÖùëáùëá))
,
and by taking standard deviation of stored RTT deviations, trending
deviation is calculated as:
ùê∑ùê∏ùëâ =
ùë°ùëüùëíùëõùëëùëñùëõùëî_ùëëùëíùë£ùëñùëéùë°ùëñùëúùëõ =
1
ùëò
¬∑ ùëò
(cid:118)(cid:117)(cid:117)(cid:116) 1
¬∑ ùëò
ùëó=1
ùëò
ùëó=1
(ùëÄùêº ùëó (ùê∑ùê∏ùëâ) ‚àí ùê∑ùê∏ùëâ)2 .
In the above expressions, ùëÄùêº ùëó (ùëÖùëáùëá) and ùëÄùêº ùëó (ùê∑ùê∏ùëâ) represent the
ùëó-th stored MI‚Äôs average RTT and deviation, respectively.
PCC Proteus: Scavenger Transport And Beyond
SIGCOMM ‚Äô20, August 10‚Äì14, 2020, Virtual Event, USA
In addition, we also maintain the exponentially weighted mov-
ing average and per-sample deviation for both trending metrics
(similar to how smoothed RTT and RTT deviation are updated in
the Linux kernel). Then, for each new sample of the two metrics,
we compare it with the corresponding average. Our insight is that,
when the calculated trending metric sample is several deviations
away from its average, it is statistically unlikely to be caused by
non-congested noise, and thus, cannot be ignored. We illustrate
with the pseudocode below.
1 if |trending_gradient - avg_trend_grad| < G1 * dev_trend_grad :
2
3
4
rtt_gradient ‚Üê 0
if trending_deviation - avg_trend_dev < G2 * dev_trend_dev :
rtt_deviation ‚Üê 0
Specifically, the new RTT gradient sample will be ignored if the
difference between the updated trending gradient and its moving
average (avg_trend_grad) is smaller than ùê∫1 times the deviation
of trending gradient (dev_trend_grad). In that case, RTT deviation
is also ignored if the difference between trending deviation and
its moving average (avg_trend_dev) is smaller than ùê∫2 times its
deviation (dev_trend_dev). In our implementation, we conserva-
tively select ùê∫1 = 2 and ùê∫2 = 4 to approximately achieve above
95% confidence with normally-distributed latency noise.
Control Algorithm: Majority Rule. For each rate control de-
cision in its ‚Äúprobing‚Äù state, Vivace tries a pair of sending rates
(in random order) twice, and changes sending rate only if they
imply a consistent rate change direction [16]. That may cause slow
rate ramp-up and under-utilization in highly noisy environments,
where the sender sees more inconsistent rate change indicators
and has to repeatedly test the same pair of sending rates before
increasing rate correctly. To improve on that, we let Proteus senders
try each pair of sending rates three times (instead of twice), and
change the sending rate based on the majority decision from the
three pairs of trials. By adding the additional pair, the sender can
generally determine the direction of rate change more quickly in
noisy networks, while the majority rule effectively avoids frequent
false rate change direction.
Note. We do not have enough space to show how each tolerance
mechanism contributes to Proteus‚Äôs performance. Briefly, per-MI
regression error tolerance is necessary for Proteus senders to satu-
rate bandwidth even on relatively stable bottleneck, while trending
tolerance helps enhance latency sensitivity. The RTT sample fil-
tering mechanism and the usage of majority rule in rate control
mainly benefit Proteus in highly dynamic networks, which can be
demonstrated to some extent by the performance improvement
of Proteus over Vivace on the live Internet (¬ß6.2.1). However, we
emphasize that the above tolerance mechanisms are heuristics, and
do not have theoretical performance guarantees. Performance may
still be impacted when network latency noise appears very bursty