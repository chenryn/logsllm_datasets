factory methods. This ensures that C can only be sub-
classed by the bounded set of classes in its own pack-
age, permitting reasoning about the behavior of objects
with declared type C, even if their origin is not trusted.
If the programmer adopts a particular style of program-
ming, called capability discipline, Joe-E supports reason-
ing about the privileges granted by an object based upon
that object’s declared type. Capability discipline proposes
that the documentation for each type should specify the au-
thority that may be granted by instances of that type. For
instance, Joe-E’s File object conveys authority to a single
ﬁle on the ﬁlesystem (or, in the case of directories, a sub-
tree of the directory hierarchy); passing a File to another
party will enable them to access the speciﬁed ﬁle, but not
(say) send network packets or erase the entire hard drive.
When a type T is non-ﬁnal, the documentation for the type
T should specify an upper bound on the authority granted
by instances of T or any of its subtypes. If code reviewers
check that subclasses of T never yield more authority than
this, then we can use the type system to upper-bound the au-
thority passed across an interface: if a method m() accepts
a parameter of declared type T , we can conclude that this
parameter will not yield more authority than that speciﬁed
in T ’s documentation. Similarly, if a method has return type
T , we can conclude that this method’s return value will not
yield more authority than that speciﬁed in T ’s documenta-
tion. We follow this pattern in the Waterken server and have
found that it is helpful for reasoning about the authority that
a type can convey.
5.3 Defensive Consistency
Reasoning about the security of a program is difﬁcult if
understanding its security properties requires comprehend-
ing the entire program all at once. The task is greatly sim-
pliﬁed if it is possible to analyze the program in a modular
fashion, one piece at a time. The easiest way to do this is to
decompose the program into a number of trust domains, and
for each domain determine what invariants it aims to main-
tain, and which invariants it relies on from other classes.
In Joe-E, a trust domain would normally correspond to a
single object, or perhaps a small collection of objects. Nor-
mally, domains interact following a client-server metaphor:
domain D might provide service to clients C1, . . . , Cn. The
standard approach to modular analysis in the program ver-
iﬁcation literature suggests we verify that (1) D provides
correct service to its clients, assuming that all its clients
meet D’s documented preconditions; (2) each client Ci es-
tablishes D’s documented preconditions. This allows us
to analyze the code of D on its own, then separately an-
alyze the code of each client Ci on its own, without hav-
ing to mentally consider all possible interactions between
them. However, this approach requires us to verify that ev-
ery client Ci meets D’s preconditions, which may not be
possible in an open world or where some clients may be
malicious.
Defensive consistency is a relaxation of this concept [11,
§5.6]. To show that D is defensively consistent, we must
show that D provides correct service to every client that
meets D’s documented preconditions. Note that if one of
D’s clients, say C1, fails to meet D’s preconditions, then
D is under no obligation to provide correct or useful ser-
vice to C1, but D must still provide correct and consistent
service to its other clients C2, . . . , Cn (assuming they do
meet D’s preconditions). Thus, D must maintain its own
invariants, even if one of its clients behaves maliciously. A
defensively consistent domain can be safely used in con-
texts where some of its clients may be malicious: its non-
malicious clients will be protected from the misbehavior of
malicious clients.
Defensive consistency conﬁnes the malign inﬂuence that
a single malicious or compromised component can have.
Without defensive consistency, verifying security becomes
harder: if domain C acts as a client of a non-defensively
consistent abstraction A, then verifying the correctness of
C requires us to verify that no other client of A is mali-
cious, which may be difﬁcult and may require reviewing a
great deal of additional code. Thus, defensively consistent
components support least privilege and reasoning about se-
curity.
5.4 Immutability
Joe-E’s support for immutable types (§ 4.2) facilitates
defensively consistent programming. When immutable ob-
jects are passed between trust domains, immutability pro-
vides guarantees both to the sender and recipient domains.
The sender is assured that the recipient cannot modify the
passed object, and thus the sender can continue to use the
same object internally without having to make a defensive
copy to guard against corruption of its internal state. Also,
passing an immutable object conveys no capabilities aside
from the data contained in the passed object, which helps
the sender avoid inadvertent capability leakage. The recipi-
ent is also protected from unexpected mutation: it can store
the immutable object as part of its internal state without
fear of interference from modiﬁcations performed by any
other code that has access to the same object. Thus, Joe-E’s
immutable types eliminate the need for defensive copying
at the sender or the receiver. For instance, Fig. 8 shows a
classic Java vulnerability and how Joe-E’s immutable types
eliminate the vulnerability pattern.
5.5 Attenuation of Authority
In order to achieve least privilege, it is helpful to be able
to easily attenuate the authority provided by a capability.
This refers to being able to take a capability to a resource
and derive from it a less-powerful capability to the resource
that has only a subset of the privileges of the initial capabil-
ity. One example of this would be a new object that wraps
the old object and acts as a reference monitor on operations
class C {
private Object signers[];
public Object[] getSigners() {
return signers;
}
}
class C {
private ImmutableArray signers;
public ImmutableArray getSigners() {
return signers;
}
}
Figure 8. Above, an example of a clas-
sic Java vulnerability: a malicious caller to
getSigners() could mutate the internal state
of the class, due to the failure to make a de-
fensive copy of its signers array. Below, a
natural way to write this code in Joe-E is se-
cure without defensive copies, thanks to the
use of immutable types.
performed on the encapsulated object. While this is sup-
ported in a general-purpose and ﬂexible way by deﬁning
classes that act as reference monitors, we suggest that class
libraries and type hierarchies be designed to facilitate easier
use of common attenuation patterns.
For example, in Joe-E a ﬁle object represents the ability
to access a particular ﬁle, or if it is a directory, any of its sub-
directories and their ﬁles. Joe-E directory objects provide a
method to obtain a capability to any of the ﬁles or directo-
ries contained within them. This allows one to create an at-
tenuated capability that allows access to a smaller part of the
ﬁlesystem; a program can be given a capability to a large di-
rectory, but have the ability to delegate only a portion of this
authority to other, less trusted parts of the program. This
makes it easy to follow the principle of least privilege. An
important requirement to correctly implementing attenuable
authority in tree structures like the ﬁle system is to avoid
methods that retrieve the parent of a node, as such methods
would make any node actually give the authority to access
the entire tree.
5.6 Facets
A client can always create an attenuated version of a ca-
pability by deﬁning a wrapper object; however, this places
an implementation burden on the author of the client code
that discourages the practice of the principle of least privi-
lege. Where the author of an interface can anticipate a use-
ful attenuation of authority, providing it as part of the inter-
face encourages better capability hygiene by all clients.
For instance, Fig. 9 shows a typical Java queue interface,
followed by a Joe-E queue interface that predeﬁnes the at-
class Queue {
public Object dequeue() {
...
}
public void enqueue(Object o) {
...
}
}
class Queue {
public Object dequeue() {
...
}
public void enqueue(Object o) {
...
}
public Receiver enqueuer() {
return new Receiver() {
public void receive(Object x) {
enqueue(x);
}
};
}
}
Figure 9. Above, an example of a typical Java
queue interface. Below, a Joe-E queue inter-
face that deﬁnes an attenuated facet that only
supports adding elements to the queue. Easy
access to this facet encourages clients to
practice the principle of least privilege by del-
egating only the permission to enqueue, not
the permission to dequeue, to those objects
that do not need full access to the queue.
tenuated authority to add elements to the queue. The imple-
mentation technique for this attenuated authority is called a
“facet”. A facet deﬁnes an additional interface for manipu-
lating state that can also be manipulated via another inter-
face. Whereas a typical object has a single public interface
that governs access to its state, an object with facets has
many such interfaces. Each of these facets is designed to
provide a least privilege interface for a particular kind of
client. In this case, the enqueue facet provides permission
to add elements to the queue, without the permission to re-
move elements or to access elements added by other clients
of the queue.
Using the facet technique, the author of an object can im-
plement an attenuated capability more economically than
a client could, since the state protected by the facet is al-
ready within the lexical scope where the facet is deﬁned.
This economy of expression makes the facet technique use-
ful even in cases where the attenuation is only of use to one
client.
Figure 10. The Joe-E Veriﬁer for Eclipse
6
Implementation
We implemented a source-code veriﬁer for Joe-E as a
plugin for Eclipse 3.x. The plug-in supports the develop-
ment of Joe-E code alongside the use of unrestricted Java.
A Java package annotation @IsJoeE is used to indicate that
a package is written in Joe-E. The plug-in checks every
class belonging to such packages and ﬂags any violations
of Joe-E restrictions in a manner similar to compilation er-
rors. This package annotation, which is retained at runtime,
allows our system to recognize Joe-E code during veriﬁca-
tion and at runtime via the reﬂection API.
We perform checks on the Java source code rather than
on Java class ﬁles since the Java runtime subjects bytecode
to only a limited set of validation checks, allowing bytecode
to do a number of things that Java programs cannot. The
expanded semantics afforded to bytecode but not speciﬁed
by the Java language are unfamiliar and not clearly deﬁned,
and thus much harder for a programmer or auditor to reason
about.
Working with source code has disadvantages. Since Java
source code is higher level than Java bytecode, the veri-
ﬁer must correctly handle a larger number of features, rais-
ing the likelihood that an implementation bug in the Joe-
E veriﬁer could allow an attacker to sneak something by
the veriﬁer. For example, the Joe-E veriﬁer must reason
about code implicitly generated by the Java compiler, such
as default constructors, string conversions, and enhanced
for loops. Our veriﬁer infers the presence of these implicit
calls, and checks that only permitted methods and construc-
tors are called. Another complication is that generic type
parameters are not type-safe. This complicates inference
of which toString() method will be invoked by implicit
string conversions. While the Joe-E language permits full
use of Java generics, our veriﬁer implements a more con-
servative type check than the Java compiler to ensure that
tamed-away toString() methods will not be invoked [10,
§ 4.10].
We have tamed a subset of the Java libraries that is small,
but sufﬁcient for writing useful programs. It would be use-
ful to increase the set of tamed classes, as much of Java’s
utility derives from its rich class library. While it is possible
for Joe-E application developers to add additional classes
and enabled methods to the taming database, determining
whether classes are capability-safe is unfortunately a high-
risk process that requires careful attention and awareness of
possible pitfalls. There is an opportunity for future work in
tools that simplify and improve the safety of this process.
As mentioned above (§ 4.2), some important functional-
ity cannot be made safe by taming alone. Joe-E provides
safe wrappers for the ﬁlesystem, for Java reﬂection and
proxying APIs, and for locale-independent character encod-
ing and decoding routines.
The Java language only includes mutable arrays. Joe-E
also provides read-only array types for use as collections
of data: ConstArray is a read-only array of possibly-
mutable objects, and ImmutableArray is a read-only
array of immutable objects. We need multiple classes be-
cause generic type parameters are not type-safe in Java:
for instance, an object of type ConstArray isn’t
guaranteed to actually contain strings, and thus might not
really be immutable. A runtime check at creation ensures
that all elements in an ImmutableArray are in fact im-
mutable. One alternative we considered was to use a type
annotation to distinguish between mutable and immutable
arrays in Joe-E source code, and enforce the annotation in
the Joe-E veriﬁer. While this approach might work for sim-
ple cases, the lack of runtime information would greatly
complicate serialization and probably make reﬂection in-
feasible for immutable arrays.
The Joe-E veriﬁer and libraries are released as an open-
source project, available at http://www.joe-e.org. To
increase our assurance in the implementation’s correctness,
we have implemented a suite of over 300 unit tests, includ-
ing several for each of the Joe-E language restrictions, cov-
ering as many corner cases as we could devise.
7 Evaluation
The greatest challenge in using Joe-E is that attaining
many of the security beneﬁts requires architecting systems
following capability design principles, which are unlikely
to be familiar to most programmers. Consequently, using
Joe-E effectively will likely require training in capability
concepts. Where it is not practical for every programmer to
have these skills, it may be possible for someone with such
expertise to carefully architect a system being designed as a
collection of modules whose interfaces enforce least privi-
lege and thus minimize trust in the modules. Modules that
are no longer critical to the application’s security properties
can then be implemented by programmers with less special-
ized training, who must just ensure that their code passes the
veriﬁer. For those familiar with capability design principles,
Joe-E appears to be usable; we did not ﬁnd the restrictions
that Joe-E imposes a serious problem in the programs we
have implemented.
We have used Joe-E to build two interesting applications.
In previous work, we ported an open-source HTML pars-
ing library, originally comprising over 10K lines of Java
code, to Joe-E, providing deterministic and side-effect free
HTML parsing [4]. Here, we describe the Waterken server,
which provides secure isolation and cooperation between
mutually distrustful web applications written in Joe-E.
7.1 Waterken
In its standard distribution, Joe-E supports design and re-
view of code that is single-threaded, transient and local. The
Waterken software extends this scope to code that is multi-
threaded, persistent and networked. Waterken follows the
asynchronously communicating event loop model [11]. An
event loop is a loop that repeatedly extracts the next event
off a queue and processes it. Each application object is cre-
ated within a single event loop, which services all invoca-
tions on the object. An event loop and the collection of
objects it services is called a vat. The vat is the unit of
concurrency in Waterken: separate vats may process their
events concurrently, but each vat is single-threaded, so two
events handled by the same vat cannot be processed con-
currently. The vat is also the unit of persistence: after pro-
cessing of an event has completed, all changes to the vat’s
objects are written to persistent storage. Vats may commu-
nicate through exported references. When a new vat is cre-
ated, a reference to one of its objects is exported. The object
that created the new vat receives the exported reference, en-
abling it to send asynchronous invocations to the referenced
object. An asynchronous invocation is processed by the ref-
erenced object’s vat as an event, and the return value sent to
the caller’s vat as an event. The invocation event and return
event may also transport exported references, introducing
the callee or caller to objects in either’s vat, or in another
vat.
An instance of the Waterken server can host many vats
within a single JVM. An application running on the Wa-
terken software consists of application-speciﬁc Joe-E code,
running in one or more vats, which may be hosted on
a single Waterken server instance or spread across multi-
ple Waterken instances. The implementation of the Wa-
terken server is crafted to ensure that security review tech-
niques for single-threaded, transient, local Joe-E code re-
main sound when applied to Joe-E application code running
on the Waterken platform. To assist veriﬁcation of its imple-
mentation, the Waterken software itself uses Joe-E to prove
certain properties of its own implementation and to ensure
that assumptions about hosted application code are valid.
The following sections examine some of these properties to