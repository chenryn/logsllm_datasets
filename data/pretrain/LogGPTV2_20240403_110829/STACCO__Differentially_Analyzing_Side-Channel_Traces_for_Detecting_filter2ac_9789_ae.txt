### Patching Sensitive Control-Flow Vulnerabilities

An alternative solution to mitigating sensitive control-flow vulnerabilities is to patch the SSL/TLS implementations directly. Constant-time cryptography is widely regarded as the best practice for addressing side-channel issues. However, our study reveals that the oracles enabling these attacks are not always the cryptographic operations themselves but can also be error handling and reporting functions (see Appendix A). Therefore, although some previous work has focused on verifying constant-time implementations in OpenSSL [15, 16], our findings suggest that the entire software package needs to be analyzed holistically rather than focusing on individual algorithms.

Stacco, a dynamic analysis tool, can be used to analyze the entire software program and identify vulnerabilities that violate the constant-time programming paradigm. However, it is important to note that patching these vulnerabilities remains a manual task. For example, as shown in Listing 4 and Listing 5, the oracle can be removed by eliminating the `RSAerr()` call in `RSA_padding_check_PKCS1_type_2()` and its caller function, `RSA_eay_private_decrypt()`. This is because errors will be reported again after the `PreMasterSecret` is recognized as invalid. If different error types need to be reported, different return values can be used to distinguish them. After manually applying the patches, the SSL/TLS libraries can be retested using Stacco to identify any remaining vulnerabilities. Future work should focus on automating the process of program analysis and patching.

### Avoiding Vulnerable Ciphersuites

The root cause of Bleichenbacher attacks is the use of the RSA algorithm for key exchanges, which provides opportunities for man-in-the-middle adversaries to query oracles and decrypt key materials. Both PKCS#1 v1.5 and PKCS#1 v2 (i.e., RSAES-OAEP) [47] have been shown to be vulnerable to such attacks. To completely mitigate Bleichenbacher attacks, RSA-based key exchange must be prohibited, and the use of Diffie-Hellman (DH) key exchanges must be enforced. To mitigate CBC padding oracle attacks, it is recommended to replace MAC-Then-Encrypt with Authenticated Encryption with Associated Data (AEAD) modes, such as AES-GCM. The draft version of TLS v1.3 [11] recommends ciphersuites that employ DH for key exchanges and AEAD modes for symmetric encryption. However, due to the need for backward compatibility, it may take years before RSA-based key exchanges and CBC mode symmetric encryptions are fully phased out. Given the severity of the demonstrated attacks, we recommend enforcing the use of secure ciphersuites for enclave programs. This also means that any entities communicating with secure enclaves must design special security policies to disallow the use of these vulnerable ciphersuites.

### Related Work

#### 7.1 SSL/TLS Oracle Attacks

**CBC Padding Oracle Attacks:**
The first discussion of CBC padding oracle attacks was by Vaudenay [71]. It was shown that plaintext recovery is possible without decryption keys if an oracle that differentiates correct padding from incorrect padding is available to the adversary. The implications for TLS v1.0 and SSL v3.0 were discussed, suggesting that TLS v1.0 was potentially exploitable by such attacks due to observable padding error messages, while SSL v3.0, with its unified error message, was more challenging to exploit. The Vaudenay attack was subsequently mitigated by eliminating the error-message oracles.

Several studies followed up on Vaudenay's work. Canvel et al. [25] exploited timing differences in the SSL/TLS message decryption process as a padding oracle. The timing differences were caused by the absence of MAC checks when the padding format was incorrect. The countermeasure implemented in popular SSL/TLS libraries, such as OpenSSL, was to compute MAC regardless of padding correctness. However, almost a decade later, this defense mechanism was circumvented by more sophisticated timing analysis attacks. AlFardan et al. [12] described a new padding oracle attack, dubbed the Lucky Thirteen Attack, where the adversary could distinguish the latency of the returned SSL error message based on the number of hash function calls. Although the Lucky Thirteen Attack was soon patched by adding dummy hash operations to enforce constant-time execution, new vulnerabilities were later discovered by Albrecht et al. [13], who proposed new variants of the Lucky Thirteen attacks against Amazon’s s2n. Möller et al. [52] performed a downgrade attack against SSL/TLS by forcing the use of SSL v3.0 during the negotiation of cipher suites in the SSL handshake protocol. This attack, known as the POODLE attack, led to the deprecation of SSL v3.0 due to its inherent vulnerability to padding oracle attacks.

Closer to our study, Irazoqui et al. [38] demonstrated padding oracle attacks enabled by Flush-Reload cache side channels. Our work extends their study in two dimensions: first, we systematically model various types of control-flow inference attacks under the scenarios of secure enclaves, rather than focusing only on cache side-channel attacks. Second, while they manually studied the source code of SSL/TLS implementations, we proposed a differential analysis framework to detect vulnerabilities in a wide range of SSL/TLS implementations, enabling automated and black-box examination of future implementations.

**Bleichenbacher Attacks:**
Oracle attacks due to format errors in asymmetric encryption, specifically RSA algorithms, date back to 1998 when Bleichenbacher [22] introduced the first attack against PKCS#1. These attacks rely on oracles that correctly format plaintext messages conforming to the PKCS#1 v1.5 standard (i.e., plaintext messages must start with 0x0002). PKCS#1 v2 introduced RSAES-OAEP, which employs Optimal Asymmetric Encryption Padding (OAEP) to mitigate the original Bleichenbacher attack. A few years later, Manger [47] discovered that in RSAES-OAEP, the length limitation of the plaintext to be encrypted renders its first byte to be 0x00; failure to conform to this standard produces an error message, which can serve as a new Bleichenbacher oracle. Klima et al. [42] discovered a new "bad-version" oracle by checking error messages regarding incorrect SSL/TLS version numbers in formatted messages. Bardou et al. [19] improved the efficiency of the original Bleichenbacher attack, which was also the basis of our attacks. The solution to these attacks was to unify the error messages so that the adversary could not distinguish specific format errors. TLS v1.0, v1.1, and v1.2 specifications all prescribe generating a random number to be used as the `PreMasterSecret` to enforce approximately equal processing time for both compliant and non-compliant `ClientKeyExchange` messages.

In 2014, Meyer et al. [51] found that SSL/TLS was vulnerable to timing-based Bleichenbacher attacks. Their attack was enabled by a timing oracle due to the extra time used to generate pseudo-random numbers for non-compliant messages. More recently, Aviram [18] leveraged Bleichenbacher attacks to break TLS 1.2 if the private key was shared with an SSL/TLS server supporting the legacy SSL v2.0 protocol, which is still vulnerable to simple Bleichenbacher attacks. This so-called DROWN attack affected a large number of servers. In non-TLS settings, Bleichenbacher attacks have been used to break XML encryption [39, 79].

Our work suggests that even the latest SSL/TLS implementations are vulnerable to Bleichenbacher attacks in the context of secure enclaves, as the oracles due to sensitive control-flow vulnerabilities are difficult to conceal even in shielded enclaves.

#### 7.2 Intel SGX: Applications and Attacks

Intel SGX is a revolutionary technology for applications requiring shielded execution—execution isolated from interference or inspection by any other software components, including privileged system software. It also offers remote attestation and sealed storage primitives for trusted computations. Previous studies have proposed applications utilizing these new SGX features [17, 20, 36, 50, 59, 69, 76]. Others have worked on facilitating the development and security protection of SGX enclaves [48, 61, 64].

Side-channel attacks against SGX enclaves have been described in several studies. For example, Xu et al. [73] and Shinde et al. [63] explored leakage of page-level memory access patterns due to induced page-fault traces. Lee et al. [43] exploited processor Branch Target Buffers (BTB) to target sensitive control-flow vulnerabilities in secure enclaves. Additionally, existing cache attacks are applicable against SGX enclaves [23, 60], as SGX provides no additional protection against such attacks. Defenses against these attacks are implemented at the hardware level [32] or as compiler extensions [27, 62, 63]. These defenses primarily address page-fault attacks [27, 32, 62, 63] or interrupt-based side-channel attacks [27, 62]. Therefore, they only remove a portion of the attack surface. Completely eliminating control-flow inference attacks, as modeled in Section 3, is extremely challenging. Thus, our study of SSL/TLS implementations' sensitive control-flow vulnerabilities is not fully addressed by any of these specific defense techniques.

#### 7.3 Security Analysis of TLS Implementations

Previous work has focused on verifying constant-time implementations for SSL/TLS libraries [15, 16]. However, our findings indicate that control-flow leakages still exist even when constant-time mechanisms are employed, especially when the constant-time implementation is enforced by making dummy function calls that may include control flows dependent on error types. We also found that internal error logging and reporting functions can reveal the reasons for errors, leading to leakage.

Differential analysis has been applied to examine the implementation of certificate validation in TLS libraries [24, 29]. Other studies focus on determining whether a TLS implementation correctly follows the TLS protocol [21, 34, 66]. Our work differs from these in both design goals and methodologies.

### Conclusion

In this paper, we studied oracle attacks against SSL/TLS implementations in SGX. These attacks are enabled by sensitive control-flow vulnerabilities in SSL/TLS libraries and are exploitable through branch-level, cacheline-level, and page-level control-flow inference attacks. Our implementation of man-in-the-kernel attacks empirically demonstrated that the resulting oracle attacks are highly efficient. We also designed a differential analysis framework to help detect these vulnerabilities automatically. We found that all the open-source SSL/TLS libraries we examined are exploitable, raising questions about the secure development and deployment of SSL/TLS in SGX enclaves.

### Acknowledgement

We are grateful to the anonymous reviewers for their constructive comments. This work was supported in part by NSF 1566444.

### References

[References remain unchanged]