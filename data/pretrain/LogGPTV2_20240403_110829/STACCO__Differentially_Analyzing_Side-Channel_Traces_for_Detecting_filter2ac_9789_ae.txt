Patching sensitive control-flow vulnerabilities. An alterna-
tive solution is to patch the vulnerabilities in the SSL/TLS implemen-
tations. Constant-time cryptography has been regarded the best
practice to address side-channel issues. But as shown in our study,
what create the oracles are not always the cryptographic opera-
tions themselves, but sometimes the error handling and reporting
functions (see Appendix A). Therefore, although some previous
work has attempted to verify the constant-time implementation in
OpenSSL [15, 16], our attacks suggest that the entire software pack-
age needs to be analyzed together rather than individual algorithms.
By contrast, Stacco can be used to dynamically analyze the whole
software program and pinpoint the vulnerabilities that violate the
constant-time programming paradigm. However, we admit that
patching the vulnerability is still a manual work. For instance, as
shown in Listing 4 and Listing 5, the oracle can be removed by elimi-
nating the RSAerr() call in RSA_padding_check_PKCS1_type_2()
as well as that in its caller function, RSA_eay_private_decrypt(),
since errors will be reported again after the PreMasterSecret is
recognized as invalid. If different error types are to be reported,
different return values could be used to tell them apart. After ap-
plying the patches manually, the SSL/TLS libraries can be tested
again using Stacco to identify the remaining vulnerabilities. Future
work should emphasize the automation of program analysis and
patching.
Avoiding using the vulnerable ciphersuites. The root cause of
the Bleichenbacher attacks is the use of the RSA algorithm for
key exchanges, which gives the man-in-the-middle adversary op-
portunities to query oracles and decrypt the key materials. It has
been shown that both PKCS#1 v1.5 and PKCS#1 v2 (i.e., RSAES-
OAEP) [47] are vulnerable to such attacks. Therefore, to completely
mitigate Bleichenbacher attacks, RSA-based key exchange must
be prohibited and the use of DH key exchanges must be enforced.
To mitigate CBC padding oracle attacks, it is recommended to re-
place MAC-Then-Encrypt with the Authenticated Encryption with
Associated Data (AEAD) mode, e.g., AES-GCM. In the draft ver-
sion of TLS v1.3 [11], it is recommended to use ciphersuites that
employ DH for key exchanges and AEAD modes for symmetric
encryption. However, because most SSL/TLS implementations need
to be backward compatible, it may take years before RSA-based key
exchanges and CBC mode symmetric encryptions completely phase
out. Given the severity of the demonstrated attacks in this paper,
we recommend enforcing the use of secure ciphersuites for enclave
programs, but it also means that any entities communicating with
the secure enclaves must design special security policies to disallow
the use of these vulnerable ciphersuites also.
7 RELATED WORK
7.1 SSL/TLS Oracle Attacks
CBC padding oracle attacks. The first discussion of the CBC
padding oracle attacks was by Vaudenay in this seminal paper [71].
It was shown that plaintext recovery is possible without decryption
keys if an oracle that differentiates correct padding from incorrect
padding is available to the adversary. Implication on TLS v1.0 and
SSL v3.0 was discussed in the paper, which suggested TLS v1.0 was
potentially exploitable by such attacks because the padding error
message is observable as a reply, but SSL v3.0, due to its unified
error message, is more challenging to exploit. The Vaudenay attack
has been mitigated thereafter by eliminating the error-message
oracles.
The work of Vaudenay was followed up by several studies. Can-
vel et al. [25] exploited the timing differences in the SSL/TLS mes-
sage decryption process as a padding oracle. The timing differences
are caused by the absence of MAC checks when the format of the
padding is incorrect. The countermeasure implemented in popular
SSL/TLS libraries, e.g., OpenSSL, is to compute MAC regardless of
the padding correctness. However, almost 10 years later, this de-
fense mechanism was circumvented by more sophisticated timing
analysis attacks. AlFardan et al. [12] describe a new padding oracle
attack, dubbed Lucky Thirteen Attack, in which the adversary is
able to distinguish the latency of the returned SSL error message
when the number of hash function calls is different. The nuance can
serve as a padding oracle because the correctness of the padding
also dictates the number of hash function calls. Although the Lucky
Thirteen Attack was soon patched by adding dummy hash opera-
tions to enforce constant-time execution, new vulnerabilities were
later discovered by Albrecht et al. [13], who proposed new variants
of Lucky Thirteen attacks against the SSL/TLS implementation in
Amazon’s s2n. Möller et al. [52] performed a downgrade attack
against SSL/TLS, by forcing the use of SSL v3.0 during the nego-
tiation of cipher suite in the SSL handshake protocol. This attack
is also called POODLE attacks. SSL v3.0 is inherently vulnerable
to padding oracle attack because its the MAC does not protect the
padding and also padding is nondeterministic except for the last
byte. Due to POODLE attacks, SSL v3.0 has been deprecated.
Closer to our study is Irazoqui et al. [38], who demonstrated
padding oracle attacks enabled by Flush-Reload cache side chan-
nels. Our work goes beyond their study in two dimensions: first,
we systematically model various types of control-flow inference at-
tacks under the scenarios of secure enclaves, instead of considering
only cache side-channel attacks. Second, they only manually stud-
ied the source code of SSL/TLS implementations. In contrast, we
proposed a differential analysis framework to detect vulnerabilities
in a wide range of SSL/TLS implementations, enabling examination
of future implementations in an automated and black-box fashion.
Bleichenbacher attacks. Oracle attacks due to format errors in
asymmetric encryption, i.e., RSA algorithms, can date back to 1998
when Bleichenbacher [22] brought forward the first attack against
PKCS#1. These attacks rely on oracles of correctly formatted plain-
text message conforming to PKCS#1 v1.5 standard (i.e., plaintext
message must start with 0x0002). PKCS#1 v2 introduced RSAES-
OAEP which employs Optimal Asymmetric Encryption Padding
(OAEP) to mitigate this original Bleichenbacher attack. A few years
later, it was discovered by Manger [47] that in RSAES-OAEP, the
length limitation of the plaintext to be encrypted renders its first
byte to be 0x00; failure of conformant to this standard will produce
an error message, which can serve as a new Bleichenbacher oracle.
Two years later, a new, so-called bad-version oracle, was discovered
by Klima et al. [42] by checking error message regarding incorrect
SSL/TLS version number in the formatted message. The efficiency
of the original Bleichenbacher attack was improved by Bardou et
al. [19], which was also the basis of our attacks. The solution to
these attacks was to unify the error messages so that the adversary
is not able to distinguish this particular format error. To achieve
this, TLS v1.0, v1.1, and v1.2 specification all prescribe that a ran-
dom number is generated and used as the PreMasterSecret to
enforce approximately equal processing time for both compliant
and non-compliant ClientKeyExchange messages.
In 2014, Meyer et al. [51] found that SSL/TLS was vulnerable to
timing-based Bleichenbacher attacks. Their attack was enabled by a
timing oracle due to the extra time used to generate pseudo-random
numbers when messages were non-compliant. Most recently, Avi-
ram [18] managed to leverage Bleichenbacher attacks to break
TLS 1.2, if the private key is shared with an SSL/TLS server that
supports the legacy SSL v2.0 protocol, which is still vulnerable to
simple Bleichenbacher attacks. A large number of servers were
vulnerable to this so-called DROWN attack. In the non-TLS set-
ting, Bleichenbacher attacks have been employed to break XML
encryption [39, 79].
Our work suggests that under the scenario of secure enclaves,
even the latest SSL/TLS implementations are vulnerable to Bleichen-
bacher attacks because the oracles due to sensitive control-flow
vulnerabilities are difficult to conceal even in shielded enclaves.
7.2 Intel SGX: Applications and Attacks
Intel SGX is a revolutionary technology for applications that re-
quire shielded execution—execution that is isolated from interfer-
ence or inspection by any other software components including
the privileged system software. It also offers remote attestation and
sealed storage primitives for trusted computations. Applications
that utilize these new SGX features have been proposed in previ-
ous studies [17, 20, 36, 50, 59, 69, 76]. Others have been working
on facilitating the development and security protection of SGX
enclaves [48, 61, 64].
Side-channel attacks against SGX enclaves have been described
in a few studies. For example, Xu et al. [73] and Shinde et al. [63] ex-
plored leakage of page-level memory access pattern due to induced
page-fault traces. Lee et al. [43] explored processor Branch Target
Buffers (BTB) to exploit sensitive control-flow vulnerabilities in
secure enclaves. Besides these new attacks in SGX contexts, exist-
ing cache attacks are also applicable against SGX enclaves [23, 60],
since SGX provides no additional protection against such attacks.
Defenses against these attacks are implemented on the hardware
level [32] or as compiler extensions [27, 62, 63]. These defenses pri-
marily work on page-fault attacks [27, 32, 62, 63] or interrupt-based
side-channel attacks [27, 62]. Therefore, they only remove a portion
of the entire attack surface. Completely eliminating control-flow
inference attacks that we model in Section 3 is extremely challeng-
ing. Therefore, our study of SSL/TLS implementations’ sensitive
control-flow vulnerabilities is not completely addressed by any of
these specific defense techniques.
7.3 Security Analysis of TLS Implementations
There has been work on verifying constant-time implementation
for SSL/TLS libraries [15, 16]. However, our findings suggest that
control-flow leakages still exist even when constant-time mech-
anisms are employed, especially when the constant-time imple-
mentation is enforced by making dummy function calls which may
include control flows that depend on the error types. We also find
leakage occurs when the internal error logging and reporting func-
tions reveal the reasons for the errors.
Differential analysis has been applied to examine the implemen-
tation of certificate validation in TLS libraries [24, 29]. Others focus
on determining whether a TLS implementation correctly follows
the TLS protocol [21, 34, 66]. Our work is different from them both
in the design goals and the methodologies.
8 CONCLUSION
In this paper, we studied oracle attacks against SSL/TLS implemen-
tations in SGX. These attacks are enabled by sensitive control-flow
vulnerabilities in SSL/TLS libraries and are exploitable by branch-
level, cacheline-level, and page-level control-flow inference attacks.
Our implementation of man-in-the-kernel attacks empirical demon-
strated that the resulting oracle attacks are highly efficient. We
also designed a differential analysis framework to help detect these
vulnerabilities automatically. We show that all the open-source
SSL/TLS libraries we examined are exploitable, thus raising the
questions of secure development and deployment of SSL/TLS in
SGX enclaves.
ACKNOWLEDGEMENT
We are grateful to the anonymous reviewers for their constructive
comments. This work was supported in part by NSF 1566444.
REFERENCES
[1] 2014. Intel 64 and IA-32 Architectures Software Developer’s Manual, Combined
Volumes:1,2A,2B,2C,3A,3B and 3C. http://www.intel.com/content/www/us/en/
processors/architectures-software-developer-manuals.html. (2014). version 052,
retrieved on Dec 25, 2014.
[2] 2014. Intel Software Guard Extensions Programming Reference. https://software.
intel.com/sites/default/files/managed/48/88/329298-002.pdf. (2014). October
2014.
[3] 2017. GnuTLS Release News. http://www.gnutls.org/news.html. (2017). [Online;
[4] 2017. GnuTLS Security Advisories. https://www.gnutls.org/security.html. (2017).
[5] 2017. Graphene-SGX. https://github.com/oscarlab/graphene. (2017). [Online;
accessed February-2017].
[Online; accessed February-2017].
accessed February-2017].
Intel Software Guard Extensions, Enclave Writer’s Guide, revision:
[6] 2017.
1.02.
(2017).
https://software.intel.com/sites/default/files/managed/ae/48/
Software-Guard-Extensions-Enclave-Writers-Guide.pdf, retrieved on May, 2017.
https://github.com/01org/
Intel Software Guard Extensions SSL.
[7] 2017.
intel-sgx-ssl. (2017). [Online; accessed August-2017].
[8] 2017. mbedTLS-SGX. https://github.com/bl4ck5un/mbedtls-SGX. (2017). [Online;
[9] 2017. OpenSSL 1.0.2 Changes. https://www.openssl.org/news/cl102.txt. (2017).
accessed February-2017].
[Online; accessed February-2017].
[10] 2017. OpenSSL Vulnerabilities. https://www.openssl.org/news/vulnerabilities.
html. (2017). [Online; accessed February-2017].
[11] 2017. The Transport Layer Security (TLS) Protocol Version 1.3, draft-ietf-tls-
tls13-latest. (2017). https://tlswg.github.io/tls13-spec/, retrieved on May, 2017.
[12] Nadhem Al Fardan and Kenneth Paterson. 2013. Lucky thirteen: Breaking the
TLS and DTLS record protocols. In 2013 IEEE Symposium on Security and Privacy.
IEEE.
[13] Martin Albrecht and Kenneth Paterson. 2016. Lucky microseconds: A timing
attack on Amazon’s s2n implementation of TLS. In Annual International Con-
ference on the Theory and Applications of Cryptographic Techniques. Springer,
622–643.
[14] Frances Allen. 1970. Control flow analysis. In ACM Sigplan Notices, Vol. 5. ACM,
[15]
[16]
[17]
1–19.
José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, and François" Dupres-
soir. 2016. Verifiable Side-Channel Security of Cryptographic Implementations:
Constant-Time MEE-CBC. In 23rd International Conference on Fast Software En-
cryption. Springer Berlin Heidelberg, 163–184.
José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, François Dupressoir, and
Michael Emmi. 2016. Verifying Constant-Time Implementations. In USENIX
Security Symposium. 53–70.
Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. 2013. Innovative
technology for CPU based attestation and sealing. In 2nd international workshop
on hardware and architectural support for security and privacy, Vol. 13.
[18] Nimrod Aviram, Sebastian Schinzel, Juraj Somorovsky, Nadia Heninger, Maik
Dankel, Jens Steube, Luke Valenta, David Adrian, J Alex Halderman, Viktor
Dukhovni, et al. 2016. DROWN: breaking TLS using SSLv2. In 25th USENIX
Security Symposium (USENIX Security 16).
[19] Romain Bardou, Riccardo Focardi, Yusuke Kawamoto, Lorenzo Simionato, Gra-
ham Steel, and Joe-Kai Tsay. 2012. Efficient padding oracle attacks on crypto-
graphic hardware. Advances in Cryptology–CRYPTO 2012 (2012), 608–625.
[20] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2015. Shielding applications
from an untrusted cloud with haven. ACM Transactions on Computer Systems
(TOCS) 33, 3 (2015), 8.
[21] Benjamin Beurdouche, Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric
Fournet, Markulf Kohlweiss, Alfredo Pironti, Pierre-Yves Strub, and Jean Karim
Zinzindohoue. 2015. A messy state of the union: Taming the composite state
machines of TLS. In 2015 IEEE Symposium on Security and Privacy. IEEE, 535–552.
[22] Daniel Bleichenbacher. 1998. Chosen ciphertext attacks against protocols based
on the RSA encryption standard PKCS# 1. In Annual International Cryptology
Conference. Springer.
[23] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan
Capkun, and Ahmad-Reza Sadeghi. 2017. Software Grand Exposure: SGX Cache
Attacks Are Practical. In 11th USENIX Workshop on Offensive Technologies (WOOT
17). USENIX Association, Vancouver, BC.
[24] Chad Brubaker, Suman Jana, Baishakhi Ray, Sarfraz Khurshid, and Vitaly
Shmatikov. 2014. Using Frankencerts for Automated Adversarial Testing of
Certificate Validation in SSL/TLS Implementations. In 2014 IEEE Symposium on
Security and Privacy. IEEE Computer Society, 114–129.
[25] Brice Canvel, Alain Hiltgen, Serge Vaudenay, and Martin Vuagnoux. 2003. Pass-
word Interception in a SSL/TLS Channel. In 23rd Annual International Cryptology
Conference on Advances in Cryptology - CRYPTO. Springer Berlin Heidelberg.
[26] Haibo Chen, Fengzhe Zhang, Cheng Chen, Ziye Yang, Rong Chen, Binyu Zang,
and Wenbo Mao. 2007. Tamper-resistant execution in an untrusted operating
system using a virtual machine monitor. (2007).
[33]
[34]
[31]
[27] Sanchuan Chen, Xiaokuan Zhang, Michael Reiter, and Yinqian Zhang. 2017.
Detecting privileged side-channel attacks in shielded execution with Déjá Vu. In
2017 ACM on Asia Conference on Computer and Communications Security. ACM,
7–18.
[28] Xiaoxin Chen, Tal Garfinkel, E Christopher Lewis, Pratap Subrahmanyam, Carl
Waldspurger, Dan Boneh, Jeffrey Dwoskin, and Dan R. K. Ports. 2008. Over-
shadow: a virtualization-based approach to retrofitting protection in commodity
operating systems. In ACM SIGARCH Computer Architecture News, Vol. 36. ACM,
2–13.
[29] Yuting Chen and Zhendong Su. 2015. Guided Differential Testing of Certificate
Validation in SSL/TLS Implementations. In 10th Joint Meeting on Foundations of
Software Engineering. ACM, 793–804.
[30] Yueqiang Cheng, Xuhua Ding, and R Deng. 2013. Appshield: Protecting appli-
cations against untrusted operating system. Singaport Management University
Technical Report, SMU-SIS-13 101 (2013).
Jeremy Clark and Paul van Oorschot. 2013. SoK: SSL and HTTPS: Revisiting
Past Challenges and Evaluating Certificate Trust Model Enhancements. In 2013
IEEE Symposium on Security and Privacy. IEEE Computer Society.
[32] Victor Costan, Ilia A Lebedev, and Srinivas Devadas. 2016. Sanctum: Minimal
Hardware Extensions for Strong Software Isolation. In USENIX Security Sympo-
sium. 857–874.
John Criswell, Nathan Dautenhahn, and Vikram Adve. 2014. Virtual Ghost:
Protecting Applications from Hostile Operating Systems. In 19th International
Conference on Architectural Support for Programming Languages and Operating
Systems. ACM.
Joeri De Ruiter and Erik Poll. 2015. Protocol State Fuzzing of TLS Implementa-
tions. In USENIX Security, Vol. 15. 193–206.
[35] Tim Dierks. 2008. The transport layer security (TLS) protocol version 1.2. (2008).
[36] Matthew Hoekstra, Reshma Lal, Pradeep Pappachan, Vinay Phegade, and Juan
Del Cuvillo. 2013. Using Innovative Instructions to Create Trustworthy Software
Solutions. In 2nd International Workshop on Hardware and Architectural Support
for Security and Privacy. ACM.
[37] Owen Hofmann, Sangman Kim, Alan Dunn, Michael Lee, and Emmett Witchel.
2013. Inktag: Secure applications on an untrusted operating system. In ACM
SIGARCH Computer Architecture News, Vol. 41. ACM, 265–278.
[38] Gorka Irazoqui, Mehmet Sinan Inci, Thomas Eisenbarth, and Berk Sunar. 2015.
Lucky 13 strikes back. In 10th ACM Symposium on Information, Computer and
Communications Security. ACM, 85–96.
[39] Tibor Jager, Sebastian Schinzel, and Juraj Somorovsky. 2012. Bleichenbacher’s
Attack Strikes again: Breaking PKCS#1 v1.5 in XML Encryption. In 17th European
Symposium on Research in Computer Security. Springer Berlin Heidelberg.
[40] Suman Jana and Vitaly Shmatikov. 2012. Memento: Learning secrets from process
footprints. In 2012 IEEE Symposium on Security and Privacy. IEEE, 143–157.
[41] Leo Kelion. 2016. ‘Thousands of popular sites’ at risk of DROWN hack attacks.
[Online; accessed
http://www.bbc.com/news/technology-35706730. (2016).
February-2017].
[42] Vlastimil Klima, Ondrej Pokorn`y, and Tomáš Rosa. 2003. Attacking RSA-based
sessions in SSL/TLS. In International Workshop on Cryptographic Hardware and
Embedded Systems. Springer, 426–440.
[43] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus
Peinado. 2016. Inferring fine-grained control flow inside SGX enclaves with
branch shadowing. arXiv preprint arXiv:1611.06952 (2016).
[44] Yanlin Li, Jonathan McCune, James Newsome, Adrian Perrig, Brandon Baker,
and Will Drewry. 2014. MiniBox: A Two-way Sandbox for x86 Native Code. In
2014 USENIX Annual Technical Conference.
[45] David Lie, Chandramohan Thekkath, and Mark Horowitz. 2003. Implementing