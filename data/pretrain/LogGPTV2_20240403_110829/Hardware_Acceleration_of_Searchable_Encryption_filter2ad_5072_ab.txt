5:
6:
7:
8:
9:
11:
12:
13:
15:
5
9:
3:
6:
8:
else
2:
3:
4:
5:
6:
Scheme 1 IM-DSSE Scheme (continued)
(ë,)← IM-DSSE.(,): Given search token and encrypted index, return sets of (cid:27)le identi(cid:27)ers
ë and encrypted (cid:27)les⊆  matching with
1: for=1,…, do
←[].
if(=(,)∨[,].=1) then
[,]←[,]⊕(||||) and set[,].←0
[,]←[,]⊕(||||) and set[,]←[,]⊕(||||)
7:←0
8: for each∈{1,…,} satisfying[,]=1 do
←+1 and←
10: ë←{1,…,}
11:←(,),←{(1,1),…,(,)}
12: return(ë,)
(,)← IM-DSSE.(í,): Given keyí and a (cid:27)le, generate add token and ciphertext of
1:←2(),←(),[].←[].+1 and←[].
2: for=1,…, do
←3(||), where←[].
4: Extract(1,…,) from and set[∗,]←0
5: for=1,…, do
←2(),←(),[,]←1
7: for=1,…, do
[,]←[,]⊕(||||)
9:←(,), where← ç.1(,||)
10: return(,) where←(,)
(,)← IM-DSSE.(,,,): Add token and ciphertext to encrypted index and set, resp.
1: Set[,]←[,] and[,].←1, for1≤≤
2:[].←[].+1
3: return(,), where←(,) and← ∪{(,)}
← IM-DSSE.(í,): Given keyí and deleted (cid:27)le, generate deletion token
1: Execute steps (1-3) of Algorithm that produces(,,1,…,) and increases[]. to 1
2: for=1,…, do
[]←(|||)
4: return , where←(,)
(,)← IM-DSSE.(,,): Update token in encrypted index and delete a (cid:27)le from set
1: Set[,]←[,] and[,].←1, for1≤≤
2:[].←[].+1
3: return(,), where←(,),← {(,)}
scheme as follows: Assume the client wants to update (cid:27)le by adding (or removing) some keywords,
Keyword update for existing (cid:27)les. Some existing schemes (e.g., [24]) only permit adding or deleting a
(cid:27)le, but do not permit updating keywords in an existing (cid:27)le directly. It is easy to achieve this in our
3:
6
of the algorithm remains the same.
overall end-to-end search delay which is dominated by the network communication latency between
client and server. Moreover, notice that all sub-linear DSSE schemes [27, 5] are less secure and some-
cally less e(cid:28)cient than other DSSE schemes (e.g., [5, 3]), we show in the experiment that, this impact is
insigni(cid:27)cant in practice for personal cloud usage with moderate database size where all optimizations
she will prepare a new column[,]← for1≤≤, where=1 if is added and=0 if
otherwise and←() with←2() as in IM-DSSE. algorithm (steps 4-6). The rest
Analytical analysis. For keyword search, IM-DSSE incurs invocations of hash function and
XOR operations. Despites the fact that IM-DSSE has linear search complexity which is asymptoti-
computation times can be reduced to/ and/, respectively, where is the number of processors in
are taken into account. Speci(cid:27)cally, since IM-DSSE is fully parallelizable, the search and update
the system. Therefore, cryptographic operations in IM-DSSE only contribute a small portion to the
times incur more costly updates than IM-DSSE. For (cid:27)le update operation, IM-DSSE incurs
invocations of and XOR operations along with bits of transmission.
Regarding to storage overhead, IM-DSSE costs2⋅+⋅+|| bits at the server for
encrypted index and (cid:27)le hash table . At the client side, IM-DSSE requires(+)+|| +3
bits for two hash tables, and secret keyí.
We now present e(cid:28)cient extended schemes derived from IM-DSSE scheme in Section 2 that our
In IM-DSSE, we encrypt each cell of with a unique key-counter pair, which requires invocations
of during keyword search. This might not be ideal for some applications that require extremely
ing the index bit-by-bit as in IM-DSSE scheme, IM-DSSEI leverages-bit block cipher encryption
to encrypt successive cells with the same key-counter pair. This is achieved by interpreting columns
of as=ऄअ blocks, each being IND-CPA encrypted using counter (CTR) mode with block cipher
size. The counter will be stored via a block counter array (denoted) instead of[⋅]. as in the
main scheme. The update state is maintained for each block rather than each cell of[,]. Hence, is
decomposed into two matrices with di(cid:29)erent sizes:.∈{0,1}× and.∈{0,1}×.
cally, we substitute encryption and decryption using(||||) withç.(⋅,||) andç.(⋅,||),
respectively, where is a block counter stored in. Since is encrypted by blocks, the client needs to
modi(cid:27)cations for (cid:27)le deletion follow the same principle. The and algorithms of IM-DSSEI are
retrieve a whole block and the states (cid:27)rst before being able to update a column residing in the block
during (cid:27)le update. Therefore, the reduction of search cost increases the cost of communication over-
head for the update as a trade-o(cid:29). We present modi(cid:27)ed algorithms for (cid:27)le addition in Scheme 2. The
3 Extended IM-DSSE Schemes
IM-DSSE framework also supports.
3.1 IM-DSSEI: Minimized search latency
prompt search delay. Hence, we introduce an extended scheme called IM-DSSEI, which aims at achiev-
ing a very low search latency with the cost of increasing update delay. Speci(cid:27)cally, instead of encrypt-
IM-DSSEI requires some straightforward algorithmic modi(cid:27)cations from the main scheme. Speci(cid:27)-
identical to those of the main scheme.
7
5:
8:
9:
10:
11:
12:
16:
17:
18:
Scheme 2 IM-DSSEI Scheme
(,)←(í,): Given keyí and a (cid:27)le, generate addition token and ciphertext of
1:←2(),←(),←æ−1æ,←[]
2:←(⋅)+1,←⋅(+1)
3: Extract(1,…,) from
4: for=1,…, do
←2(),←()
6: Get from server([∗,…]) and[∗,].
7: for=1,…, do
←[].
if (>1∧[,].=0) then
←−1
←3(||)†
[,…,]← ç.([,…],||)
13:[,]←0 for1≤≤ and[,]←1 for1≤≤
14:[]←[]+1,←[]
15: for=1,…, do
if (>1∧[,].=0) then
←3(||+1)
[,…]← ç.([,…],||)
19:[].←[].+1 and←[].
20:←(,) where← ç.1(,||)
21: return(,) where←(,)
(,)←(,,,): Add token and ciphertext to encrypted index and ciphertext set, resp.
1:←æ−1æ,←(⋅)+1,←(+1)
2:[,]←[,], for1≤≤ and≤≤
3:[]←[]+1 and[∗,].←1
4: return(,), where←(,) and← ∪{}
† should generate a suitable key forç (e.g.,128-bit key for AES-CTR)
Analytical analysis. For keyword search, IM-DSSEI requires/ invocations of ç, which is theoret-
ically times faster than the main scheme. Given the CTR mode, the search time can be reduced to
/(⋅), where is the number of processors in the system. For update, IM-DSSEI requires transmis-
sion of(2+1)⋅ bits along with decryption and encryption operations at the client side, compared
with non-interactive transmission and encryption-only in the main scheme. Thus, IM-DSSEI o(cid:29)ers a
trade-o(cid:29) where the search speed is increased by a factor of (e.g.,=128) with the cost of transmitting
(2+1)⋅ bits in update operation. IM-DSSEI reduces the server storage overhead to⋅||+⋅⋅(+1)


bits, while the client storage remains the same as in IM-DSSE.
3.2 IM-DSSEII: Achieving cloud SaaS infrastructure with backward privacy
All DSSE schemes introduced so far require the server to perform some computation (i.e., encryp-
tion/decryption) during keyword search, which might not be fully compatible with typical cloud sys-
tems (e.g., Dropbox, Google Drive, Amazon S3) that generally only o(cid:29)ers storage-only services. Hence,
8
Scheme 3 IM-DSSEII Scheme
(ë,)←(í,): Given keyword and key í, return sets of (cid:27)le identi(cid:27)ers ë and encrypted (cid:27)les
⊆  matching with
1:←2(),←(),←3(),←0
2: Fetch the’th row data[,∗] from server
3: for=1,…, do
←[].
[,]←[,]⊕(||||)
6: for each∈{1,…,} satisfying[,]=1 do
←+1 and←
8: ë←{1,…,}
9: Sendë to server and receive={(1,1),…,(,)}
10:←í() for1≤≤
11: return(ë,è), whereè←{1,…,}
we propose another extended scheme derived from IM-DSSE scheme called IM-DSSEII, where all
4:
5:
7:
forward-privacy during update. The detail is as follows.
computations during keyword search are performed at the client side while the server does nothing
rather than serving as a storage service. This simple trick makes IM-DSSEII not only compatible with
the current infrastructure of SaaS clouds, but also more importantly, achieve the backward-privacy
property. This is because the server is no longer able to decrypt any part of encrypted index to keep
track of historical update operations. Additionally, IM-DSSEII also reduces the storage overhead at
both client and server sides by eliminating the need of state matrix and keywords counters, which is
used in IM-DSSE and IM-DSSEI schemes to perform correct decryption during keyword search and
To search a keyword, the client sends to the server the’s row index and receives the corre-
sponding row. The client decrypts row, obtains the column indexes, where[,]=1. The client
then fetches and decrypts encrypted (cid:27)les indexed at to obtain the search result. We present the key-
word search of IM-DSSEII in Scheme 3, which is a protocol combined from IM-DSSE. and
IM-DSSE. algorithms in IM-DSSE scheme. Since everything is computed by the client, it is
not required to derive new keys for forward-privacy and therefore, state matrix[∗,∗]. as well as (cid:27)le
hash table at the server and keyword counters. at the client are not needed in IM-DSSEII.
Therefore, the modi(cid:27)cations of IM-DSSE., IM-DSSE., IM-DSSE., IM-DSSE.,
IM-DSSE. algorithms are straightforward by (i) substituting row key generation ←
3(,) by←3(), (ii) omitting all keyword counters, block states[∗,∗]., at the server
(e.g., step 2, IM-DSSE. algorithm) and all operations involved.
Analytical analysis. The computation cost of IM-DSSEII is identical to the main scheme (i.e., and
 invocations of for search and update resp.), except that the decryption is performed at the client,
instead of the server during keyword search. However, IM-DSSEII requires bits of transmission and a
two-round communication. IM-DSSEII reduces the client and sever storage costs to+||+⋅+3
and⋅ bits, respectively.
IM-DSSEI and IM-DSSEII schemes. Speci(cid:27)cally in IM-DSSEI+II, the incidence matrix is encrypted
with-bit block cipher encryption, and the decryption is performed by the client during search. Since
Our IM-DSSE also supports IM-DSSEI+II, an extended DSSE scheme which is the combination between
3.3 IM-DSSEI+II: Low search latency, backward-privacy and compatible with cloud
SaaS infrastructure
9
IM-DSSEI+II inherits all properties of IM-DSSEI and IM-DSSEII schemes, IM-DSSEI+II is highly desirable
for cloud SaaS infrastructure that requires a very low search latency and backward-privacy with the
costs of more delayed update and an extra communication round during search.
4 Security Analysis
In this section, we analyze the security and update privacy of all DSSE schemes provided in our IM-DSSE
framework.
the same keyword has been searched in the past or not.
We consider the following leakage functions, in the line of [16] that captures dynamic (cid:27)le addi-
tion/deletion in its security model as we do, but we leak much less information compared to [16].
4.1 Security Model
Most known e(cid:28)cient SSE schemes (e.g., [27, 5, 24]) reveal the search and (cid:27)le-access patterns de(cid:27)ned as
follows:
• Given search query at time, the search pattern(, Query,) is a binary vector of length with a 1
at location if the search time≤ was for, and 0 otherwise. The search pattern indicates whether
• Given search query at time, the (cid:27)le-access patternƊ(,è,,) is identi(cid:27)ersë of (cid:27)les having.