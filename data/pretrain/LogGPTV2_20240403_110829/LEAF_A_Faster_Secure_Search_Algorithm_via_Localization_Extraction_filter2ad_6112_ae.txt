𝑋
?
×
0
0
?
×
0
0
Add Together:
𝑋
Figure 8: Our Retrieval Process, we don’t apply Akavia’s
method since it will add 1 additional depth.
Lemma 4.1. (1 − 𝜀
holds if and only if 𝑛 = 1.
𝑛)𝑛 ≥ 1 − 𝜀, ∀𝑛 ∈ N+, 𝜀  4, we have 2√
𝑃𝑟LEAF =(cid:0)1 − 𝜀
𝑛  1 − 𝜀
𝑛 > (1 − 𝜀
𝑛
𝑛
□
Here, 𝜀 is the parameter that can be selected by the client, nor-
mally we will choose 𝜀 = 2−80, the above equation illustrates that
when 𝑛 > 4, our algorithm’s output is correct with overwhelming
probability.
4.4 Retrieving Matches
Here we show how to retrieve the matched item given the en-
crypted pluse array without further interaction with clients. For the
convenience of description, we describe the process of retrieving
1-bit content. For arbitrary long content, we can retrieve each bit
in the same way.
Once we get the encrypted index of the target item, PIR would
be a feasible solution to retrieve the desired item without further
interactions at the cost of an extra degree of 𝑂(log 𝑛). Akavia et
al. [2] proposed a depth-preserving method to retrieve matched
item using 𝑂(𝑛) multiplications and increasing the depth by 1.
In this paper, by rearranging the multiplication order, we can
complete the retrieval of matching items without increasing the
calculation depth, and ensure that the required number of multipli-
cation is the same as Akavia’s algorithm required, both of which
are 𝑂(𝑛), as shown in Figure 8.
It is worth pointing out that the Step 1 in the figure is very
similar to the Step 3 we mentioned in our Extraction step, which
is to extract non-zero intervals in an array by adding them, to be
specific, define 𝑡𝑒𝑚𝑝2 ∈ {0, 1}𝑘, ∀𝑗 ∈ [𝑘]:
𝑡𝑒𝑚𝑝2[ 𝑗] ← 𝑡𝑒𝑚𝑝1[ 𝑗] + 𝑡𝑒𝑚𝑝1[𝑘 + 𝑗] + · · · + 𝑡𝑒𝑚𝑝1[(𝑡 − 1) · 𝑘 + 𝑗]
Instead of manipulating the final output in the searching part, we
utilize location information obtained from the intermediate process,
which enables us to retrieve the target item without adding depth.
5 EFFICIENCY ANALYSIS
5.1 Efficiency Estimate
Since multiplication takes much more time than addition, so in our
analysis, we only consider multiplication. Assuming each multipli-
cation operation costs 𝑇MUL1.
First, we use RS-OR 𝑡 times to calculate the OR results. In Sec-
tion 3.3, we know that each RS-OR is actually equivalent to doing
normal OR operations on log( 𝑛
𝜀 ) elements, so each operation costs
log 𝑛
𝜀 times multiplication, thus this step costs:
𝑡 · log( 𝑛
𝜀
) × 𝑇MUL1
Then we calculate the inner product of 𝑣 and 𝑠ℎ𝑖𝑒𝑙𝑑, because
𝑣 and 𝑠ℎ𝑖𝑒𝑙𝑑 have 𝑛 elements, this step involves multiplying each
pair of elements in the two arrays, so it contains 𝑛 multiplication
operations, this step costs:
𝑛 × 𝑇MUL1
Then we apply AGHL_Step algorithm to calculate the stepped
𝜀 ) times multiplication (AGHL_Step
𝜀 ) times of multi-
array 𝑓 𝑖𝑛, it contains 𝑘 · log( 𝑛
needs 𝑘 times of RS-OR which requires 𝑘 · log( 𝑛
plication), so this step costs:
After obtaining two position information, we use Reconstruction
method to reconstruct the output, it contains 𝑛 times of multiplica-
tion, so this step costs:
𝑘 · log( 𝑛
𝜀
) × 𝑇MUL1
𝑛 × 𝑇MUL1
And we have to add the time match procedure costs, assume it
contains MOPN times of multiplication, so it costs:
MOPN × 𝑇MUL1
so, the overall time costs is:
𝑇LEAF =(cid:0)𝑡 · log( 𝑛
) + 2𝑛 + 𝑘 · log( 𝑛
𝜀
𝜀
) + MOPN(cid:1) × 𝑇MUL1
5.2 Concrete Parameters
To find the optimal parameters, we take the partial differential of
the total time expression 𝑇LEAF with respect to 𝑡, since MOPN, 𝑇
and 𝑛 is not a function of 𝑡, 𝑘 = 𝑛
𝑡 , so the target expression is equal
to:
𝑡 · log( 𝑛
𝜀 ) + 𝑛
𝜕𝑡
𝜕(cid:0)𝑡 · log( 𝑛
𝜀 )(cid:1)
= 0
we have:
√
𝑛
𝑡 =
So we get that the number of multiplications required by the
algorithm, it should be noted that since the matching algorithm
needs to check every element in the database, the MOPN term is
linearly dependent with the amount of data (𝑛), that is, MOPN =
𝜇𝑛 = 𝑂(𝑛), as stated in Section 3.6.1. Define OPN as total number
of multiplications required by the protocol:
) + 2𝑛 + 𝑘 · log( 𝑛
𝜀
) + 2𝑛 + √
𝑛 · log(
) + MOPN
√
𝑛
𝜀
OPN = 𝑡 · log( 𝑛
𝜀
√
𝑛 · log( 𝑛
=
𝜀
= 𝑂(𝑛)
) + MOPN
The above formula indicates that the number of multiplications
required by our algorithm has reached the optimal theoretical
bound in the asymptotic sense, because even if we retrieve in plain-
text case, at least 𝑂(𝑛) operations are still needed.
The depth of this algorithm is:
𝑑LEAF = log 𝑑 + log log( 𝑛
= 𝑂(log log 𝑛)
) + 1 + log log( 𝑛
𝜀
) + 1
𝜀
The first term in the above formula is required by matching step,
the second one is attributed to Localization step, and the third is
due to Extraction step. The last two terms are the depths required
to operate on the extracted interval. To be specific, the fifth term
is corresponding to Reconstruction, while the fourth term is equiv-
alent to replacing the 𝑛 in the first term with 𝑡 and removing the
log 𝑑, because the depth required by the matching algorithm is not
required when operating on the target interval.
We recall the depth of AGHL algorithm for comparison:
𝑑AGHL = log 𝑑 + log log( 𝑛
) = 𝑂(log log 𝑛)
𝜀
It’s shown that the algorithm does not increase the computa-
tional depth in the asymptotic sense, therefore, when 𝑛 is large, the
time required for the single multiplication of the two algorithms
(𝑇MUL2 for AGHL and 𝑇MUL1 for LEAF) becomes a constant ratio,
according to the estimation formula in Gentry et al.’s work[17]:
𝜀 ) + 2)𝜔
= ( 𝑑AGHL
𝑑LEAF
)𝜔 = (
log(cid:0)𝑑 log( 𝑛
𝜀 )(cid:1)
𝜀 )(cid:1) + log log( 𝑛
𝜀 )(cid:1)
log(cid:0)𝑑 log( 𝑛
𝜀 )(cid:1) + log log( 𝑛
log(cid:0)𝑑 log( 𝑛
log(cid:0)𝑑 log( 𝑛
𝑇MUL2
𝑇MUL1
observe that:
𝑇MUL2
𝑇MUL1
lim
𝑛→+∞
𝜀 ) + 2)𝜔
𝑛→+∞(
= lim
= ( 1
2)𝜔 = 𝑂(1)
where 𝜔 < 2.3727 is the matrix multiplication exponent, there-
fore, by combining the multiplication number required by AGHL
algorithm: 𝑛 · log( 𝑛
𝜀 ), we can get the time required by AGHL algo-
rithm:
𝑇AGHL = 𝑛 · log( 𝑛
) × 𝑇MUL2 = 𝑂(𝑛 log 𝑛) × 𝑇MUL2
𝜀
=
𝑂(𝑛)
𝑂(𝑛 log 𝑛)
× 𝑇MUL2
𝑇MUL1
thus we have:
𝑇AGHL
𝑇LEAF
It turns out that our algorithm LEAF reduced the AGHL algo-
rithm by a log order of magnitude, mainly because we reduced the
number of multiplications from 𝑂(𝑛 log 𝑛) to 𝑂(𝑛) while keeping
the required computational depth asymptotically constant.
= 𝑂(log 𝑛) × 𝑂(1) = 𝑂(log 𝑛)
6 PROTOCOL WITH BOOTSTRAPPING
LAZILY(LEAF+)
Compared with our algorithm LEAF, LEAF+ applies bootstrapping
only to the elements in the extracted interval, so as to control the
growth of the depth of computation, which leads to different effects:
• Pros: The bootstrapping step can control the computational
depth required by the algorithm, and the optimization effect
of the algorithm will be better when 𝑛 is large;
• Cons: The introduction of bootstrapping step will bring
about a large number of extra multiplication operations and
computation depth, which will even make the efficiency of
the algorithm lower than before when 𝑛 is small.
After bootstrapping was introduced, although the computation
depth of the algorithm did not change, the hidden constant in
𝑂(log log 𝑛) became smaller, so when 𝑛 is very large, the single
multiplication time costs in this algorithm will be the same as in
AGHL, which was different from LEAF algorithm.
At the same time, since we only need to do the bootstrapping
step once for the extracted interval elements rather than for all the
elements, this significantly reduces the extra time cost brought by
the bootstrapping step.
With proper parameter analysis and selection, we could use the
bootstrapping technology to bring benefits and lower down the
consequent disadvantages.
6.1 Efficiency Estimate
Similar to the analysis in the previous section and consider the
extra time bootstrapping takes, we could get the time that LEAF+ al-
gorithm takes:
) + MOPN(cid:1) · 𝑇MUL3 + 𝑡 · 𝑇BOO
𝑇LEAF+ =(cid:0)𝑡 · log( 𝑛
) + 2𝑛 + 𝑘 · log( 𝑛
𝜀
𝜀
where 𝑇MUL3 represents the time taken for each homomorphic
multiplication, 𝑇BOO is the time required for single bootstrapping,
define:
which means the number of multiplication operations boostrap-
ping procedure needs, we have:
𝑡 , 𝑇MUL3 is not a function of 𝑡, according to Jung
Hee Cheon et.al.’s work [8]: 𝛼 = 𝑂(log2 𝜆), where 𝜆 is security
parameter, independent of 𝑛, we take the partial with respect to 𝑡
to get the optimal solution:
) + MOPN) + 𝛼𝑡(cid:1) × 𝑇MUL3
𝜀 ) + MOPN) + 𝛼𝑡(cid:1)
𝜀 ) + 𝛼𝑡(cid:1)
= 0
= 0
𝛼 =
𝑇BOO
𝑇MUL3
) + 2𝑛 + 𝑘 · log( 𝑛
𝜀
𝜀
𝑇LEAF+ =(cid:0)(𝑡 · log( 𝑛
𝜕(cid:0)(𝑡 · log( 𝑛
where 𝑘 = 𝑛
Since MOPN and 𝑛 are not functions of 𝑡, we have:
𝜀 ) + 2𝑛 + 𝑘 · log( 𝑛
𝜕𝑡
𝜕(cid:0)𝑡 · log( 𝑛
𝜀 ) + 𝑛
𝑡 · log( 𝑛
𝜕𝑡
(cid:114) 𝑛
then we get the solution:
thus we have:
𝑇LEAF+ =(cid:0)(2
√
+ 𝛼
𝑡 =
1 + 𝛼
(cid:114) 𝑛
𝑛(cid:1) × 𝑇MUL3 = 𝑂(𝑛) × 𝑇MUL3
· log( 𝑛
𝜀
1 + 𝛼
) + 2𝑛 + MOPN)
According to Chen et al.’s [6], bootstrapping requires depth
𝑑BOO = log(𝑧)+log(ℎ) for BGV [4] and 𝑑BOO = log log(𝑧)+log(ℎ)
for FV [15], where ℎ = ||𝑠||1 is the 1-norm of the secret key, and
𝑧 = 𝑝𝑟 is the plaintext modulus. Thus, the depth of our protocol is :
𝑑LEAF+ = log 𝑑 + log log( 𝑛
𝜀
) + 1 + 𝑑BOO = 𝑂(log log 𝑛) ,
where the 1 term accounts for the depth of retrieval. Similarly,
𝜀 )(cid:1) + 1
log(cid:0)𝑑 log( 𝑛
𝑑𝐵𝑂𝑂 + log(cid:0)𝑑 log( 𝑛
𝜀 )(cid:1) + 1)𝜔 ,
𝜀 )(cid:1) + 1
log(cid:0)𝑑 log( 𝑛
𝜀 )(cid:1) + 1)𝜔 = 1
𝑑BOO + log(cid:0)𝑑 log( 𝑛
𝑇MUL2
𝑇MUL3
= ( 𝑑AGHL
𝑑LEAF+
)𝜔 = (
lim
𝑛→+∞
𝑇MUL2
𝑇MUL3
𝑛→+∞(
= lim
where 𝜔 < 2.3727 is the matrix multiplication exponent. After
initializing the parameters, 𝑑BOO does not change with 𝑛, therefore:
that is, when 𝑛 gets larger, the time multiplication needed of two