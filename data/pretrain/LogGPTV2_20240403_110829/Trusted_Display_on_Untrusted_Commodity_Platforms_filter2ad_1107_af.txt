### 6.2 GPU Data Leakage

Recent research [12, 29] has highlighted that GPU data leakage can occur when security-sensitive applications fail to zero out their freed GPU memory in a timely manner. This allows malicious applications to exploit native GPU drivers (including user-level libraries) on commodity GPUs to access the GPU data of other applications. Another recent study [34] focuses on GPU data leakage in virtualized environments, demonstrating that an untrusted operating system can manipulate GPU configuration registers to leak GPU data. An earlier work [46] suggests that full GPU virtualization approaches could, in principle, solve this problem by mediating access to GPU data, configuration registers, commands, and page tables. However, the GPU address space separation attack discussed in Section 2 shows that even with full GPU virtualization, malicious GPU instructions can still compromise the confidentiality and authenticity of GPU data. Our system mitigates these attacks by using the GPU Security Kernel (GSK) to mediate access to sensitive GPU objects and emulate unsafe accesses.

### 7. Discussion

#### Direct GPU Access by SecApps

This paper proposes a trusted display design that is compatible with the vast majority of security-critical applications (SecApps) and has minimal GPU requirements. Most SecApps can render their display content on the CPU and then submit it to the trusted display kernel for output. For SecApps that require direct GPU access, we recommend using either GPU pass-through mechanisms [48, 51] or GPUs with added hardware isolation features [37]. Full GPU virtualization [46, 45] does not provide sufficient security for SecApps that need direct GPU access.

#### Recommendations for GPU Hardware Enhancement

To reduce the trap-and-mediate overhead in commodity operating systems and improve runtime performance, separating sensitive and insensitive GPU registers and memory into different aligned pages is recommended. GPU hardware overlays [23] provide dedicated memory buffers within the GPU for programs, enabling independent rendering of images and videos on top of the main display screen. Our system, as well as other trusted display solutions, can leverage these features to further reduce the size of the trusted code base. The address-space separation attacks described in Section 2.2, which are enabled by unintended side effects of a GPU optimization, should serve as a warning to GPU designers that thorough security analyses are necessary when introducing new performance-enhancing features in GPUs.

#### Uniprocessor Support

On uniprocessor platforms, our trusted display service pauses the untrusted OS and applications when executing a SecApp. This simplifies the design of GPU isolation since SecApps cannot run concurrently with untrusted commodity software.

### 8. Conclusion

Modern commodity GPUs offer increasingly rich functionality and higher performance but lack adequate hardware isolation mechanisms for trusted display. Full GPU virtualization techniques, designed to optimize performance, often violate existing rudimentary isolation mechanisms, exposing user output to significant vulnerabilities. We have designed and implemented a trusted display service that is compatible with commodity hardware, applications, operating systems, and GPU drivers. Our system has a trusted code base that is orders of magnitude smaller than previous systems and maintains relatively high OS graphics performance. Additionally, our design identifies key areas where added hardware protection mechanisms would enhance GPU object and resource isolation.

### Acknowledgment

We are grateful to Yueqiang Cheng, Kun Tian, Yusuke Suzuki, the members of intel-gfx, radeon, and nouveau IRC channels, and the CCS reviewers for their valuable comments and suggestions. This research was supported in part by CMU CyLab under the National Science Foundation grant CCF-0424422 to the Berkeley TRUST STC. The views and conclusions contained in this paper are solely those of the authors and do not represent the official policies, either expressed or implied, of any sponsoring institution, the U.S. government, or any other entity.

### 9. References

[References listed here, formatted as in the original text.]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.