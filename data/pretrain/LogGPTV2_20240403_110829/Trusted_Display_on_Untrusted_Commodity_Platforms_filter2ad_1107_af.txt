Other cryptography-based approaches [52, 36] decode con-
cealed display images via optical methods; e.g., by placing a
transparency, which serves as the secret key, over concealed
images to decode them. These approaches are similar in
spirit to the use of one time pads, and hence need physical
monitor modiﬁcation for eﬃcient, frequent re-keying. Other
systems [38] add decryption circuitry to displays, and hence
also require commodity hardware modiﬁcation, which fails
to satisfy our design goals.
6.2 GPU Data Leakage
Recent research [12, 29] shows that GPU data leakage may
occur because security-sensitive applications may not zero
their freed GPU data memory in a timely manner. Thus,
malicious applications can probe GPU data of other appli-
cations by using native GPU drivers (including user-level
libraries) on commodity GPU. Other recent work [34] also
focuses on GPU data leakage in virtualized environments
and shows that the untrusted OS can manipulate GPU con-
ﬁguration registers to leak GPU data. An early instance
of the data leakage problem [46] shows that full GPU vir-
tualization approaches could solve the problem in principle
by mediating access to GPU data, conﬁguration registers,
commands and page tables. Nevertheless the GPU address
space separation attack of Section 2 shows that malicious
GPU instructions can still break GPU data conﬁdentiality
and authenticity of full GPU virtualization. Our system
prevents these attacks since the GSK mediates accesses to
sensitive GPU objects and emulates unsafe accesses.
7. DISCUSSION
Direct GPU Access by SecApps.
This paper pro-
poses a trusted display design that can be used by the vast
majority of SecApps, and has few basic GPU requirements.
Most SecApps can render their display content on the CPU
and then submit it to the trusted display kernel for output.
To support SecApps that require GPU commands and in-
structions, we suggest the use of either GPU pass-through
mechanisms [48, 51], or GPUs that have added hardware
isolation features [37]. Full GPU virtualization [46, 45] does
not provide suﬃcient security for SecApps that require di-
rect GPU access.
Recommendations for GPU Hardware Enhancement.
Separating sensitive and insensitive GPU registers and mem-
ory into diﬀerent aligned pages would help reduce the trap-
and-mediate overhead in commodity OSes and improve OS’s
run-time performance. GPU hardware overlays [23] provide
dedicated memory buﬀers inside the GPU for programs to
enable independent rendering of images and videos on top
of the main display screen. Our system – and other trusted
display solutions – could leverage these features to further
reduce the size of the trusted code base. The address-space
separation attacks described in Section 2.2, which are en-
abled by inadvertent side-eﬀects of a GPU optimization,
should serve as a warning to GPU designers that serious se-
curity analyses are required when introducing new features
that are intended to enhance performance in GPUs.
Uniprocessor Support. On uniprocessor platforms, our
trusted display service pauses the untrusted OS/Apps when
executing the SecApp. This simpliﬁes the design of GPU
isolation since SecApps cannot run concurrently with un-
trusted commodity software.
8. CONCLUSION
Modern commodity GPUs have increasingly rich functions
and higher performance, and yet lack adequate hardware iso-
lation mechanisms for trusted display. Worse yet, full GPU
virtualization techniques intended to optimize performance
violate the existing rudimentary isolation mechanisms and
expose user output to signiﬁcant vulnerabilities. We design
and implement a trusted display service that is compati-
ble with commodity hardware, applications, OSes and GPU
drivers, has a trusted code base that is orders of magnitude
smaller than previous systems, and preserves relatively high
OS graphics performance. Our design also helps identify key
areas where added hardware protection mechanisms would
enhance GPU object and resource isolation.
Acknowledgment
We are grateful to Yueqiang Cheng, Kun Tian, Yusuke Suzuki,
the members of intel-gfx, radeon, nouveau IRC channels,
and the CCS reviewers for their useful comments and sugges-
tions. This research was supported in part by CMU CyLab
under the National Science Foundation grant CCF-0424422
to the Berkeley TRUST STC. The views and conclusions
contained in this paper are solely those of the authors and
should not be interpreted as representing the oﬃcial policies,
either expressed or implied, of any sponsoring institution,
the U.S. government or any other entity.
9. REFERENCES
[1] Cairo-perf-trace. http://www.cairographics.org/.
[2] Intel graphics driver.
https://01.org/linuxgraphics/.
[3] Lima graphics driver for ARM Mali GPUs.
http://limadriver.org/.
4060801001200201126251376501626751876100111261251137615011626175118762001212622512376250126262751287630013126325112080100406002097539753975397539753971109217325433541649757865973108111891297140515131621172918371945205321612269237724852593270128092917120801004060020173951739517395173951739517311072133194255316377438499551061116712731379148515911697180319092015212122272333243925452651275728631001[4] Nouveau graphics driver.
http://nouveau.freedesktop.org/.
[5] Phoronix Test Suite.
http://ipt.intel.com/Libraries/Documents/
Deeper_Levels_of_Security_with_Intel%C2%AE_
Identity_Protection_Technology.pdf.
http://www.phoronix-test-suite.com/.
[23] Intel. Intel processor graphics programmer’s reference
[6] Radeon graphics driver.
http://www.x.org/wiki/radeon/.
[7] AMD. AMD Radeon documentation.
http://www.x.org/wiki/RadeonFeature/#index10h2.
[8] AMD. AMD I/O virtualization technology (IOMMU)
speciﬁcation. AMD Pub. no. 34434 rev. 1.26, 2009.
[9] AMD. AMD 64 Architecture Programmer’s Manual:
Volume 2: System Programming. Pub. no. 24593 rev.
3.23, 2013.
[10] ARM. Open source Mali-200/300/400/450 GPU
kernel device drivers. http://malideveloper.arm.
com/develop-for-mali/drivers/
open-source-mali-gpus-linux-kernel-device-drivers.
[11] Y. Cheng and X. Ding. Virtualization based password
protection against malware in untrusted operating
systems. In Proceedings of the 5th International
Conference on Trust and Trustworthy Computing,
TRUST’12, pages 201–218, Berlin, Heidelberg, 2012.
Springer-Verlag.
[12] R. Di Pietro, F. Lombardi, and A. Villani. CUDA
leaks: information leakage in GPU architectures.
arXiv preprint arXiv:1305.7383, 2013.
[13] M. Dowty and J. Sugerman. Gpu virtualization on
vmware’s hosted i/o architecture. SIGOPS Oper. Syst.
Rev., 43(3):73–82, July 2009.
manual. https://01.org/linuxgraphics/
documentation/driver-documentation-prms.
[24] Intel. Intel virtualization technology for directed I/O
architecture speciﬁcation. Intel Pub. no. D51397-006
rev. 2.2, 2013.
[25] Intel Corporation. Intel 64 and IA-32 architectures
software developer’s manual: Volume 3: System
programming guide. Pub. no. 253668-048US, 2013.
[26] S. Kato. Implementing open-source CUDA runtime. In
Proc. of the 54the Programming Symposium, 2013.
[27] G. Klein, K. Elphinstone, G. Heiser, J. Andronick,
D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt,
R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and
S. Winwood. seL4: formal veriﬁcation of an OS kernel.
In Proc. ACM Symposium on Operating Systems
Principles, 2009.
[28] I. T. Lab. Qubes OS. https://qubes-os.org/.
[29] S. Lee, Y. Kim, J. Kim, and J. Kim. Stealing
webpages rendered on your browser by exploiting
GPU vulnerabilities. In 2014 IEEE Symposium on
Security and Privacy, SP 2014, Berkeley, CA, USA,
May 18-21, 2014, pages 19–33, 2014.
[30] S. Lipner, T. Jaeger, and M. E. Zurko. Lessons from
VAX/SVS for high assurance VM systems. IEEE
Security and Privacy, 10(6):26–35, 2012.
[14] J. Epstein, C. Inc, J. McHugh, H. Orman, R. Pascale,
[31] D. C. P. LLC. High-bandwidth digital content
A. Marmor-Squires, B. Danner, C. R. Martin,
M. Branstad, G. Benson, and D. Rothnie. A high
assurance window system prototype. Journal of
Computer Security, 2(2):159–190, 1993.
[15] J. Epstein, J. McHugh, R. Pascale, H. Orman,
G. Benson, C. Martin, A. Marmor-Squires, B. Danner,
and M. Branstad. A prototype b3 trusted x window
system. In Computer Security Applications
Conference, 1991. Proceedings., Seventh Annual, pages
44–55, Dec 1991.
[16] K. Fatahalian and M. Houston. A closer look at
GPUs. Commun. ACM, 51(10):50–57, Oct. 2008.
[17] N. Feske and C. Helmuth. A nitpicker’s guide to a
minimal-complexity secure GUI. In Proc. Annual
Computer Security Applications Conference, 2005.
[18] M. Gasser. Building a secure computer system. In Van
Nostrand Reinhold, New York, 1988.
[19] V. D. Gligor. Security limitations of virtualization and
how to overcome them. In Proc. International
Workshop on Security Protocols, Cambridge
University, 2010.
[20] B. Hoanca and K. J. Mock. Screen oriented technique
for reducing the incidence of shoulder surﬁng. In
Security and Management, pages 334–340, 2005.
[21] M. Hoekstra, R. Lal, P. Pappachan, V. Phegade, and
J. Del Cuvillo. Using innovative instructions to create
trustworthy software solutions. In Proc. International
Workshop on Hardware and Architectural Support for
Security and Privacy, 2013.
[22] Intel. Deeper levels of security with intel(r) identity
protection technology.
protection system.
www.digital-cp.com/files/static_page_files/
8006F925-129D-4C12-C87899B5A76EF5C3/HDCP_
Specification%20Rev1_3.pdf.
[32] D. Luebke. CUDA: Scalable parallel programming for
high-performance scientiﬁc computing. In Biomedical
Imaging: From Nano to Macro, 2008. ISBI 2008. 5th
IEEE International Symposium on, pages 836–838,
May 2008.
[33] L. Martignoni, P. Poosankam, M. Zaharia, J. Han,
S. McCamant, D. Song, V. Paxson, A. Perrig,
S. Shenker, and I. Stoica. Cloud terminal: Secure
access to sensitive applications from untrusted
systems. In Proceedings of the 2012 USENIX
Conference on Annual Technical Conference, USENIX
ATC’12, pages 14–14, Berkeley, CA, USA, 2012.
USENIX Association.
[34] C. Maurice, C. Neumann, O. Heen, and A. Francillon.
Conﬁdentiality issues on a GPU in a virtualized
environment. In N. Christin and R. Safavi-Naini,
editors, Financial Cryptography and Data Security -
18th International Conference, FC 2014, Christ
Church, Barbados, March 3-7, 2014, Revised Selected
Papers, volume 8437 of Lecture Notes in Computer
Science, pages 119–135. Springer, 2014.
[35] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta,
V. Gligor, and A. Perrig. TrustVisor: Eﬃcient TCB
reduction and attestation. In Proc. IEEE Symposium
on Security and Privacy, 2010.
[36] M. Naor and A. Shamir. Visual cryptography. In
Advances in Cryptology–EUROCRYPT’94, pages
1–12. Springer, 1995.
1002[37] Nvidia. Virtual GPU technology.
[47] A. Vasudevan, S. Chaki, L. Jia, J. McCune,
http://www.nvidia.com/object/virtual-gpus.html.
[38] P. Oikonomakos, J. Fournier, and S. Moore.
Implementing cryptography on TFT technology for
secure display applications. In Smart Card Research
and Advanced Applications, pages 32–47. Springer,
2006.
[39] J. Owens, M. Houston, D. Luebke, S. Green, J. Stone,
and J. Phillips. GPU computing. Proceedings of the
IEEE, 96(5):879–899, May 2008.
J. Newsome, and A. Datta. Design, implementation
and veriﬁcation of an extensible and modular
hypervisor framework. In Proc. IEEE Symposium on
Security and Privacy, 2013.
[48] VMWare. Graphics acceleration in view virtual
desktops.
http://www.vmware.com/files/pdf/techpaper/
vmware-horizon-view-graphics-acceleration-deployment.
pdf.
[40] X. Ruan. Platform Embedded Security Technology
[49] Wikipedia. Screen tearing.
Revealed: Safeguarding the Future of Computing with
Intel Embedded Security and Management Engine.
Apress, Berkely, CA, USA, 1st edition, 2014.
[41] A. A. Sani, L. Zhong, and D. S. Wallach. Glider: A
GPU library driver for improved system security.
CoRR, abs/1411.3777, 2014.
[42] J. S. Shapiro, J. Vanderburgh, E. Northup, and
D. Chizmadia. Design of the EROS trusted window
system. In Proceedings of the 13th Conference on
USENIX Security Symposium - Volume 13, SSYM’04,
pages 12–12, Berkeley, CA, USA, 2004. USENIX
Association.
[43] C. Smowton. Secure 3D graphics for virtual machines.
In Proceedings of the Second European Workshop on
System Security, EUROSEC ’09, pages 36–43, New
York, NY, USA, 2009. ACM.
[44] U. Steinberg and B. Kauer. NOVA: a
microhypervisor-based secure virtualization
architecture. In Proc. European Conference on
Computer Systems, 2010.
[45] Y. Suzuki, S. Kato, H. Yamada, and K. Kono.
GPUvm: Why not virtualizing GPUs at the
hypervisor? In 2014 USENIX Annual Technical
Conference (USENIX ATC 14), pages 109–120,
Philadelphia, PA, June 2014. USENIX Association.
[46] K. Tian, Y. Dong, and D. Cowperthwaite. A full GPU
virtualization solution with mediated pass-through. In
2014 USENIX Annual Technical Conference (USENIX
ATC 14), pages 121–132, Philadelphia, PA, June 2014.
USENIX Association.
http://en.wikipedia.org/wiki/Screen_tearing.
[50] N. Wilt. The CUDA Handbook: A Comprehensive
Guide to GPU Programming. Pearson Education,
2013.
[51] Xen. Xen VGA passthrough fetched on 2015-01-19).
http://wiki.xen.org/wiki/Xen_VGA_Passthrough.
[52] H. Yamamoto, Y. Hayasaki, and N. Nishida. Secure
information display with limited viewing zone by use
of multi-color visual cryptography. Optics express,
12(7):1258–1270, 2004.
[53] M. Yu, C. Zhang, Z. Qi, J. Yao, Y. Wang, and
H. Guan. VGRIS: Virtualized gpu resource isolation
and scheduling in cloud gaming. In Proceedings of the
22nd International Symposium on High-performance
Parallel and Distributed Computing, HPDC ’13, pages
203–214, New York, NY, USA, 2013. ACM.
[54] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and
D. Mazi`eres. Making information ﬂow explicit in
HiStar. In Proceedings of the 7th USENIX Symposium
on Operating Systems Design and Implementation -
Volume 7, OSDI ’06, pages 19–19, Berkeley, CA, USA,
2006. USENIX Association.
[55] Z. Zhou, V. D. Gligor, J. Newsome, and J. M.
McCune. Building veriﬁable trusted path on
commodity x86 computers. In Proc. IEEE Symposium
on Security and Privacy, 2012.
[56] Z. Zhou, M. Yu, and V. Gligor. Dancing with giants:
Wimpy kernels for on-demand isolated I/O. In
Security and Privacy (SP), 2014 IEEE Symposium on,
pages 308–323, May 2014.
1003