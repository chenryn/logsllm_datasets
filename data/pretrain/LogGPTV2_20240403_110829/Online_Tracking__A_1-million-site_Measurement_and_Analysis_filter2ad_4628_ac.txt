3.	 The  task manager creates new command execution threads 
for  all  browsers  and  sends  the  command  and  command 
parameters over a pipe to the browser manager process. 
4.	 The  browser manager interprets this command and runs 
the  necessary Selenium  code to execute the command in 
the browser. 
5.	 If  the  command  is  a “Get” command,  which  causes  the 
browser  to  visit  a  new  URL,  the  browser  manager  dis­
tributes  the  browser  ID  and  top-level  page  being  visited 
to all enabled instrumentation modules (extension, proxy, 
or disk monitor). 
6.	 Each  instrumentation  module  uses  this  information  to 
properly key data for the new page visit. 
7.	 The  browser  manager  can  send  returned  data  (e.g.  the 
parsed contents of a page) to the SQLite aggregator. 
8.	 Simultaneously,  instrumentation  modules  send  data  to 
the  respective  aggregators  from  separate  threads  or  pro­
cesses. 
9.	 Finally,  the  browser  manager  notiﬁes  the  task  manager 
that it is ready for a new command. 
3.3  Evaluation 
Stability.  We  tested  the  stability  of  vanilla  Selenium 
without our infrastructure in a variety of settings.  The best 
average we were able to obtain was roughly 800 pages with­
out a freeze or crash.  Even in small-scale studies, the lack of 
recovery led to loss or corruption of measurement data.  Us­
ing the isolation provided by our browser manager and task 
manager,  we  recover  from  all  browser  crashes  and  have  ob­
served  no  data  corruption  during  stateful  measurements  of 
100,000 sites.  During the course of our stateless 1 million site 
measurement  in  January  2016  (Section  5),  we  observe  over 
90  million  requests  and  nearly  300  million  Javascript  calls. 
A  single  instrumented  browser  can  visit  around  3500  sites 
per  day,  requiring  no  manual  interaction  during  that  time. 
The scale and speed of the overall measurement depends on 
the hardware used and the measurement conﬁguration (See 
“Resource Usage” below). 
Completeness.  OpenWPM  reproduces  a  human  user’s 
web browsing experience since it uses a full-ﬂedged browser. 
However, researchers have used stripped-down browsers such 
as PhantomJS for studies, trading oﬀ ﬁdelity for speed. 
To  test  the  importance  of  using  a  full-ﬂedged  browser, 
we examined the diﬀerences between OpenWPM and Phan­
tomJS  (version  2.1.1)  on  the  top  100  Alexa  sites.  We  av­
eraged  our  results  over  6  measurements  of  each  site  with 
each tool.  Both tools were conﬁgured with a time-out of 10 
seconds and we excluded a small number of sites that didn’t 
complete loading.  Unsurprisingly, PhantomJS does not load 
Flash,  HTML5  Video,  or  HTML5  Audio  objects  (which  it 
does not support); OpenWPM loads nearly 300 instances of 
those  across  all  sites.  More  interestingly,  PhantomJS  loads 
about 30% fewer HTML ﬁles, and about 50% fewer resources 
with plain text and stream content types.  Upon further ex­
amination, one major reason for this is that many sites don’t 
serve ads to PhantomJS. This makes tracking measurements 
using PhantomJS problematic. 
We also tested PhantomJS with the user-agent string spoofed 
to look like Firefox, so as to try to prevent sites from treat­
ing  PhantomJS  diﬀerently.  Here  the  diﬀerences  were  less 
extreme,  but  still  present  (10%  fewer  requests  of  html  re­
sources, 15% for plain text, and 30% for stream).  However, 
several  sites  (such  as  dropbox.com)  seem  to  break  when 
PhantomJS  presents  the  incorrect  user-agent  string.  This 
is  because  sites  may  expect  certain  capabilities  that  Phan­
tomJS  does  not  have  or  may  attempt  to  access  APIs  us­
ing  Firefox-speciﬁc  names.  One  site,  weibo.com,  redirected 
PhantomJS  (with  either  user-agent  string)  to  an  entirely 
diﬀerent landing page than OpenWPM. These ﬁndings sup­
port  our  view  that  OpenWPM  enables  signiﬁcantly  more 
complete  and  realistic  web  and  tracking  measurement  than 
stripped-down browsers. 
Resource  usage.  When  using  the  headless  conﬁgura­
tion, we are able to run up to 10 stateful browser instances on 
an Amazon EC2 “c4.2xlarge” virtual machine9 .  This virtual 
machine costs around $300 per month using price estimates 
from  May  2016.  Due  to  Firefox’s  memory  consumption, 
stateful parallel measurements are memory-limited while state­
less  parallel  measurements  are  typically  CPU-limited  and 
can  support  a  higher  number  of  instances.  On  the  same 
machine  we  can  run  20  browser  instances  in  parallel  if  the 
browser state is cleared after each page load. 
Generality.  The  platform  minimizes  code  duplication 
both  across  studies  and  across  conﬁgurations  of  a  speciﬁc 
study.  For example, the Javascript monitoring instrumenta­
tion  is  about  340  lines  of  Javascript  code.  Each  additional 
API monitored takes only a few additional lines of code.  The 
8https://github.com/EFForg/privacybadgerﬁrefox 
9https://aws.amazon.com/ec2/instance-types/ 
Year 
Study 
2014 
Persistent tracking mechanisms [1] 
FB Connect login permissions [47] 
2014 
Surveillance implications of web tracking [14]  2015 
HSTS and key pinning misconﬁgurations [21]  2015 
The Web Privacy Census [4] 
2015 
2015 
Geographic Variations in Tracking [17] 
2016 
Analysis of Malicious Web Shells [55] 
This study (Sections 5 & 6) 
2016 
Instru m entation 
support
cookies 
changes 
proﬁles
auto m ation 
extraction 
proﬁles
A uto m ated login 
plugin
tracking
Statefulcra wls 
state
Fine-grained
Javascript
Persistent
A dvanced
M onitor
Bro w ser
C ontent
D etect
• 
• 
• 
• 
◦ 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
◦ 
• 
• 
• 
• 
• 
• 
• 
• 
• 
Table 1:  Seven published studies which utilize our Platform.
An unﬁlled circle indicates that the feature was useful but application-speciﬁc programming or manual eﬀort was still required.
instrumentation necessary to measure canvas ﬁngerprinting 
(Section 6.1) is three additional lines of code, while the We­
bRTC measurement (Section 6.3) is just a single line of code. 
Similarly,  the  code  to  add  support  for  new  extensions 
or  privacy  settings  is  relatively  low:  7  lines  of  code  were 
required  to  support  Ghostery,  8  lines  of  code  to  support 
HTTPS  Everywhere,  and  7  lines  of  codes  to  control  Fire­
fox’s cookie blocking policy. 
Even  measurements  themselves  require  very  little  addi­
tional code on top of the platform.  Each conﬁguration listed 
in  Table  2  requires  between  70  and  108  lines  of  code.  By 
comparison,  the  core  infrastructure  code  and  included  in­
strumentation  is  over  4000  lines  of  code,  showing  that  the 
platform saves a signiﬁcant amount of engineering eﬀort. 
3.4  Applications of OpenWPM 
Seven  academic  studies  have  been  published  in  journals, 
conferences, and workshops, utilizing OpenWPM to perform 
a  variety  of  web  privacy  and  security  measurements.10  Ta­
ble 1 summarizes the advanced features of the platform that 
each research group utilized in their measurements. 
In addition to browser automation and HTTP data dumps, 
the platform has several advanced capabilities used by both 
our  own  measurements  and  those  in  other  groups.  Mea­
surements  can  keep  state,  such  as  cookies  and  localStor­
age, within each session via stateful measurements, or persist 
this  state  across  sessions with persistent  proﬁles.  Persisting 
state across measurements has been used to measure cookie 
respawning  [1]  and  to  provide  seed  proﬁles  for  larger  mea­
surements (Section 5).  In general, stateful measurements are 
useful to replicate the cookie proﬁle of a real user for track­
ing  [4,  14]  and  cookie  syncing  analysis  [1]  (Section  5.6).  In 
addition to recording state, the platform can detect tracking 
cookies. 
The platform also provides programmatic control over in­
dividual components of this state such as Flash cookies through 
ﬁne-grained  proﬁles  as well as plug-ins via advanced  plug-in 
support.  Applications built on top of the platform can mon­
itor  state  changes  on  disk  to  record  access  to  Flash  cookies 
and browser state.  These features are useful in studies which 
wish to simulate the experience of users with Flash enabled 
[4, 17] or examine cookie respawning with Flash [1]. 
10We are aware of several other studies in progress. 
Beyond just monitoring and manipulating state, the plat­
form provides the ability to capture any Javascript API call 
with  the  included  Javascript  instrumentation.  This  is  used 
to measure device ﬁngerprinting (Section 6). 
Finally,  the  platform  also  has  a  limited  ability  to  extract 
content from web pages through the content extraction mod­
ule,  and  a  limited  ability  to  automatically  log  into  web­
sites  using  the  Facebook  Connect  automated  login  capabil­
ity.  Logging in with Facebook has been used to study login 
permissions [47]. 
4.  WEB CENSUS METHODOLOGY 
We run measurements on the homepages of the top 1 mil­
lion  sites  to  provide  a  comprehensive  view  of  web  tracking 
and web privacy.  These measurements provide updated met­
rics  on  the  use  of  tracking  and  ﬁngerprinting  technologies, 
allowing  us  to  shine  a  light  onto  the  practices  of  third  par­
ties and trackers across a large portion of the web.  We also 
explore the eﬀectiveness of consumer privacy tools at giving 
users control over their online privacy. 
Measurement  Conﬁguration.  We  run  our  measure­
ments  on  a “c4.2xlarge” Amazon  EC2  instance,  which  cur­
rently  allocates  8  vCPUs  and  15  GiB  of  memory  per  ma­
chine.  With this conﬁguration we are able to run 20 browser 
instances  in  parallel.  All  measurements  collect  HTTP  Re­
quests  and  Responses,  Javascript  calls,  and  Javascript  ﬁles 
using  the  instrumentation  detailed  in  Section  3.  Table  2 
summarizes  the  measurement  instance  conﬁgurations.  The 
data used in this paper were collected during January 2016. 
All  of  our  measurements  use  the  Alexa  top  1  million  site 
list (http://www.alexa.com), which ranks sites based on their 
global  popularity  with  Alexa  Toolbar  users.  Before  each 
measurement,  OpenWPM  retrieves  an  updated  copy  of  the 
list.  When  a  measurement  conﬁguration  calls  for  less  than 
1 million sites, we simply truncate the list as necessary.  For 
eash site, the browser will visit the homepage and wait until 
the  site  has  ﬁnished  loading  or  until  the  90  second  timeout 
is  reached.  The  browser  does  not  interact  with  the  site  or 
visit  any  other  pages  within  the  site.  If  there  is  a  timeout 
we kill the process and restart the browser for the next page 
visit, as described in Section 3.2. 
Stateful  measurements.  To  obtain  a  complete  picture 
Conﬁguration 
Default Stateless 