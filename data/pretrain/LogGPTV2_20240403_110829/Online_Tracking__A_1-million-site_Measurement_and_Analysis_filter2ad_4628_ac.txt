### 3. Task and Browser Manager Workflow

1. The task manager initiates new command execution threads for all browsers and transmits the command and its parameters to the browser manager process via a pipe.
2. The browser manager interprets the received command and executes the necessary Selenium code to perform the action in the browser.
3. If the command is a "Get" command, which directs the browser to visit a new URL, the browser manager distributes the browser ID and the top-level page being visited to all enabled instrumentation modules (e.g., extension, proxy, or disk monitor).
4. Each instrumentation module uses this information to properly key data for the new page visit.
5. The browser manager can send returned data (e.g., the parsed contents of a page) to the SQLite aggregator.
6. Simultaneously, instrumentation modules send data to their respective aggregators from separate threads or processes.
7. Finally, the browser manager notifies the task manager that it is ready for a new command.

### 3.3 Evaluation

#### Stability
We tested the stability of vanilla Selenium without our infrastructure in various settings. The best average we achieved was approximately 800 pages without a freeze or crash. Even in small-scale studies, the lack of recovery led to loss or corruption of measurement data. Using the isolation provided by our browser manager and task manager, we recover from all browser crashes and have observed no data corruption during stateful measurements of 100,000 sites. During our stateless 1 million site measurement in January 2016 (Section 5), we observed over 90 million requests and nearly 300 million JavaScript calls. A single instrumented browser can visit around 3,500 sites per day, requiring no manual interaction during that time. The scale and speed of the overall measurement depend on the hardware used and the measurement configuration (see "Resource Usage" below).

#### Completeness
OpenWPM reproduces a human user's web browsing experience using a full-fledged browser. However, researchers often use stripped-down browsers like PhantomJS for studies, trading fidelity for speed.

To test the importance of using a full-fledged browser, we compared OpenWPM and PhantomJS (version 2.1.1) on the top 100 Alexa sites. We averaged our results over six measurements of each site with each tool. Both tools were configured with a 10-second timeout, and we excluded a few sites that did not complete loading. Unsurprisingly, PhantomJS does not load Flash, HTML5 Video, or HTML5 Audio objects (which it does not support); OpenWPM loads nearly 300 instances of these across all sites. More interestingly, PhantomJS loads about 30% fewer HTML files and about 50% fewer resources with plain text and stream content types. Upon further examination, one major reason for this is that many sites do not serve ads to PhantomJS, making tracking measurements problematic.

We also tested PhantomJS with the user-agent string spoofed to look like Firefox, to try to prevent sites from treating PhantomJS differently. Here, the differences were less extreme but still present (10% fewer requests of HTML resources, 15% for plain text, and 30% for stream). However, several sites (such as dropbox.com) break when PhantomJS presents an incorrect user-agent string. This is because sites may expect certain capabilities that PhantomJS does not have or may attempt to access APIs using Firefox-specific names. One site, weibo.com, redirected PhantomJS (with either user-agent string) to a different landing page than OpenWPM. These findings support our view that OpenWPM enables significantly more complete and realistic web and tracking measurements than stripped-down browsers.

#### Resource Usage
In headless configuration, we can run up to 10 stateful browser instances on an Amazon EC2 "c4.2xlarge" virtual machine. This virtual machine costs around $300 per month based on May 2016 price estimates. Due to Firefox's memory consumption, stateful parallel measurements are memory-limited, while stateless parallel measurements are typically CPU-limited and can support a higher number of instances. On the same machine, we can run 20 browser instances in parallel if the browser state is cleared after each page load.

#### Generality
The platform minimizes code duplication across studies and configurations. For example, the JavaScript monitoring instrumentation is about 340 lines of JavaScript code. Each additional API monitored takes only a few additional lines of code. The instrumentation necessary to measure canvas fingerprinting (Section 6.1) is three additional lines of code, while the WebRTC measurement (Section 6.3) is just a single line of code. Similarly, the code to add support for new extensions or privacy settings is relatively low: 7 lines of code were required to support Ghostery, 8 lines of code to support HTTPS Everywhere, and 7 lines of code to control Firefoxâ€™s cookie blocking policy.

Even measurements themselves require very little additional code on top of the platform. Each configuration listed in Table 2 requires between 70 and 108 lines of code. By comparison, the core infrastructure code and included instrumentation is over 4,000 lines of code, showing that the platform saves a significant amount of engineering effort.

### 3.4 Applications of OpenWPM

Seven academic studies have been published in journals, conferences, and workshops, utilizing OpenWPM to perform a variety of web privacy and security measurements. Table 1 summarizes the advanced features of the platform that each research group utilized in their measurements.

In addition to browser automation and HTTP data dumps, the platform has several advanced capabilities used by both our own measurements and those in other groups. Measurements can keep state, such as cookies and localStorage, within each session via stateful measurements, or persist this state across sessions with persistent profiles. Persisting state across measurements has been used to measure cookie respawning [1] and to provide seed profiles for larger measurements (Section 5). In general, stateful measurements are useful to replicate the cookie profile of a real user for tracking [4, 14] and cookie syncing analysis [1] (Section 5.6). In addition to recording state, the platform can detect tracking cookies.

The platform also provides programmatic control over individual components of this state, such as Flash cookies through fine-grained profiles, as well as plug-ins via advanced plugin support. Applications built on top of the platform can monitor state changes on disk to record access to Flash cookies and browser state. These features are useful in studies that wish to simulate the experience of users with Flash enabled [4, 17] or examine cookie respawning with Flash [1].

Beyond just monitoring and manipulating state, the platform provides the ability to capture any JavaScript API call with the included JavaScript instrumentation. This is used to measure device fingerprinting (Section 6).

Finally, the platform also has a limited ability to extract content from web pages through the content extraction module and a limited ability to automatically log into websites using the Facebook Connect automated login capability. Logging in with Facebook has been used to study login permissions [47].

### 4. Web Census Methodology

We run measurements on the homepages of the top 1 million sites to provide a comprehensive view of web tracking and web privacy. These measurements provide updated metrics on the use of tracking and fingerprinting technologies, allowing us to shed light on the practices of third parties and trackers across a large portion of the web. We also explore the effectiveness of consumer privacy tools at giving users control over their online privacy.

#### Measurement Configuration
We run our measurements on a "c4.2xlarge" Amazon EC2 instance, which currently allocates 8 vCPUs and 15 GiB of memory per machine. With this configuration, we can run 20 browser instances in parallel. All measurements collect HTTP Requests and Responses, JavaScript calls, and JavaScript files using the instrumentation detailed in Section 3. Table 2 summarizes the measurement instance configurations. The data used in this paper were collected during January 2016.

All of our measurements use the Alexa top 1 million site list (http://www.alexa.com), which ranks sites based on their global popularity with Alexa Toolbar users. Before each measurement, OpenWPM retrieves an updated copy of the list. When a measurement configuration calls for less than 1 million sites, we simply truncate the list as necessary. For each site, the browser will visit the homepage and wait until the site has finished loading or until the 90-second timeout is reached. The browser does not interact with the site or visit any other pages within the site. If there is a timeout, we kill the process and restart the browser for the next page visit, as described in Section 3.2.

#### Stateful Measurements
To obtain a complete picture, stateful measurements are essential.