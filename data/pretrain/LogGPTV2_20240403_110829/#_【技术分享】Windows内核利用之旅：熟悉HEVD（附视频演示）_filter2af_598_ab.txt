    #define HACKSYS_EVD_IOCTL_INTEGER_OVERFLOW                CTL_CODE(FILE_DEVICE_UNKNOWN, 0x809, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE        CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80A, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80B, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_UNINITIALIZED_HEAP_VARIABLE     CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80C, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HACKSYS_EVD_IOCTL_DOUBLE_FETCH                    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80D, METHOD_NEITHER, FILE_ANY_ACCESS)
每个IOCTL的编号由一个宏确定，这个宏位于标准的Windows头文件winioctl.h中：
如果你在程序中包含了windows.h头文件，上面这个宏就会被自动添加到代码中。现在，我们不要被这些常量的具体含义所困扰，我们可以直接使用已定义好的这些元素。
我们准备写个简单的用户态程序，来与驱动交流。首先，我们使用CreateFile函数打开设备。然后，我们使用DeviceControl函数向设备发送IOCTL。
简单的示例程序如下所示。这个程序会向驱动发送STACK_OVERFLOW IOCTL，程序源码为send_ioctl.cpp：
    #include 
    #include 
    #define HACKSYS_EVD_IOCTL_STACK_OVERFLOW    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS)
    const char kDevName[] = "\\.\HackSysExtremeVulnerableDriver";
    HANDLE open_device(const char* device_name)
    {
        HANDLE device = CreateFileA(device_name,
            GENERIC_READ | GENERIC_WRITE,
            NULL,
            NULL,
            OPEN_EXISTING,
            NULL,
            NULL
        );
        return device;
    }
    void close_device(HANDLE device)
    {
        CloseHandle(device);
    }
    BOOL send_ioctl(HANDLE device, DWORD ioctl_code)
    {
        //prepare input buffer:
        DWORD bufSize = 0x4;
        BYTE* inBuffer = (BYTE*) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, bufSize);
        //fill the buffer with some content:
        RtlFillMemory(inBuffer, bufSize, 'A');
        DWORD size_returned = 0;
        BOOL is_ok = DeviceIoControl(device,
            ioctl_code,
            inBuffer,
            bufSize,
            NULL, //outBuffer -> None
            0, //outBuffer size -> 0
            &size_returned,
            NULL
        );
        //release the input bufffer:
        HeapFree(GetProcessHeap(), 0, (LPVOID)inBuffer);
        return is_ok;
    }
    int main()
    {
        HANDLE dev = open_device(kDevName);
        if (dev == INVALID_HANDLE_VALUE) {
            printf("Failed!n");
            system("pause");
            return -1;
        }
        send_ioctl(dev, HACKSYS_EVD_IOCTL_STACK_OVERFLOW);
        close_device(dev);
        system("pause");
        return 0;
    }
编译这个代码，然后将其部署到被调试主机上。运行DebugView，观察驱动打印的调试信息。
如果你在调试主机上启动了调试字符串打印功能，你应该可以看到类似输出：
正如你在输出信息中看到的那样，驱动的确收到了我们的输入，然后输出了对应的信息。
**3.3 练习时间：引起系统崩溃**
作为一个练习，我为HEVD创建了一个小型客户端，客户端可以根据所需的输入缓冲区长度向HEVD发送许多不同的IOCTL。读者可以阅读相关源码以及编译好的32位程序了解更多信息。
你可以尝试使用各种不同的IOCTL，直到系统崩溃为止。由于被调试主机运行在调试主机的控制之下，因此不会出现系统蓝屏，相反，崩溃点会触发WinDbg。让我们尝试对每种情况都做个简单的崩溃分析。首先从打印信息开始：
    !analyze -v
其他一些有用的命令：
k – 栈跟踪
kb – 带有参数的栈跟踪
r – 寄存器
dd [address]- 从address处开始以DWORD形式显示数据
你可以参考WinDbg的帮助文件查看更多命令：
.hh
在我们的示例程序中，用户缓冲区被字符“A”（即ASCII 0x41）填满。
    RtlFillMemory(inBuffer, bufSize, 'A');
因此，不论我们在崩溃分析的哪个地方看到这个特征，都意味着这段特定的数据可以被用户填充。
示例 #1：
示例 #2：
需要注意的是，你在触发同样的漏洞时可能会得到不同的输出，这取决于崩溃点的实时来源，这些来源包括溢出点的大小、当前内存的布局等等。
**四、附录**
1\. ：
Sam Brown开发的一个IDA Pro插件，在处理IOCTL控制码或者逆向Windows驱动时非常有用。