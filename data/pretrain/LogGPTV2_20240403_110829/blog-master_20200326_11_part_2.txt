```sql  
$ psql  
postgres=# create extension pgtokdb;  
CREATE EXTENSION  
```  
This command will fail if the files have not be placed in the correct directories. Also, in the case of Windows, if `c.dll` wasn't placed in the PATH.  
A smoke test is provided as part of the installation, which includes a few functions in the Postgres PGTOKDB schema. You will need to start q on the same host as Postgres listening on Port 5000 (this can be changed in postgres.config -- see configuration below).  
```q  
q pgtokdb.q -P 5000  
q)   
```  
In another session, start psql and run the following select statement. If you get information similar to below, the extension is installed correctly.  
```sql  
$ psql  
postgres=# select * from pgtokdb.getstatus('.pgtokdb.status[]');  
 os  | version |  release   |          timenow             
-----+---------+------------+----------------------------  
 m64 |     3.6 | 2018-11-09 | 2019-11-05 00:05:30.281957  
```  
## Configuration  
The postgres.config file can be modified to add the following configuration settings.  
Setting | Description | Default  
:-- | :-- | :--   
pgtokdb.host | host name or IP address | localhost  
pgtokdb.port | TCP/IP port | 5000  
pgtokdb.userpass | user:pass | None provided  
Note that configuration settings are read initially when a Postgres process loads the extension. To reread the settings, the process will need to restart.  
## Utilities  
Writing wrapper Postgres function and types to specific kdb+ queries is cumbersome, so convenenient utility functions (both kdb+ and Postgres) are provided with the installation.  
The kdb+ utilities (`genddl` and `genddle`) are found in the installations `pgtokdb.q` script and are placed in the `.pgtokdb` namespace.   
The example below uses a function (`qfn`) that takes an integer argument, and returns a kdb+ table with three columns: a long (j), float (f), and timestamp (p). We want to build the necessary Postgres function that can call this function.  
```q  
q) qfn:{[n] ([] id:til n; val:n?9999.99; ts:2019.10.01D0+1D*til n)}  
```  
The `genddl` function (Generate Data Definition Language), takes three arguments: the name of the Postgres function to be created, the kdb+ data type codes of the kdb+ functon arguments, and the meta of the function result.  
```  
q) ddl:.pgtokdb.genddl["call_qfn"; "i"; meta qfn[1]]  
q) ddl  
script  
-----------------------------------------------------------------------------------------------------------------------  
"drop function if exists call_qfn;"  
"drop type if exists _call_qfn_t;"  
"create type call_qfn_t as (id bigint, val float8, ts timestamp);"  
"create function call_qfn(varchar, integer) returns setof _call_qfn_t as 'pgtokdb','getset' language c;"  
```  
The result is a table containing the necessary DDL scripts. The table's contents can be stored in a text file for execution using psql. Note that the first argument to `call_qfn` above is the kdb+ function (or script) to be invoked.  
```  
q) `:/tmp/gen.sql 0: ddl[;`script]  
`:/tmp/gen.sql  
```  
```sql  
$ psql  
postgres=# \i /tmp/gen.sql  
```  
We can invoke a variant of `genddl` (i.e., `genddle`) from within a psql session by using the `pgtokdb.gendll` Postgres function. The difference is that the (string) expression that generates the meta is provided.  
```  
postgres=# select * from pgtokdb.genddl('.pgtokdb.genddle', 'call_qfn','i','metaqfn[1]');  
script                                                           
-----------------------------------------------------------------------------------------------------  
drop function if exists call_qfn;  
drop type if exists call_qfn_t;  
create type call_qfn_t as (id bigint, val float8, ts timestamp);  
create function call_qfn(varchar, integer) returns setof call_qfn_t as 'pgtokdb','getset' language c;  
```  
One can write this to a text file for execution as follows.  
```  
postgres=# copy (select * from pgtokdb.genddl(...)) to '/tmp/f.sql';  
```  
## Building the Extension  
In order to build the extension, download the Postgres source from [postgres.org](https://www.postgresql.org/) and perform build and install. The Mac and Linux builds are quite straightforward using standard toolsets, however Windows required using Visual Studio and following the instructions on the Postgres site: [Building with Visual C++ or the Microsoft Windows SDK](https://www.postgresql.org/docs/12/install-windows-full.html).  
I built the Windows version of Postgres by using Visual Studio 2019 Community Edition, with [ActiveState Perl](https://www.activestate.com/).   
Once you have built and installed Postgres, the `pgtokdb` extension can be built. Two makefiles are provided: `makefile` (using make) for Linux and Mac builds, and `makefile.win` (using nmake) for Windows builds.   
The makefiles have three targets: clean, all, and install. It is important to have pg_config in the path, since the Linux and Mac makefiles invoke it in order to determine necessary directories (e.g., include, libs, etc.). The Windows makefile has to be provided the value for PGROOT, which is the root directory of Postgres.  
* make [clean | **all** | install] [DEBUG=0 | **1**]  
* nmake -f makefile.win [clean | **all** | install] [PGROOT=dir] [DEBUG=0 | **1**]  
The Windows build requires you to the build inside of the command shell entitled *x64 Native Tools Command Prompt for VS2019*. Furthermore, you should have clang installed, since this is the compiler used. When debugging under Windows, you can use the debugger in Visual Studio, however the pgtokdb.pdb (debug symbols) file should be moved to the same directory as pgtokdb.dll.  
## Regression Tests  
The project has a test directory that contains a lengthy PGSQL script (and matching kdb+ script) that runs through both happy and exception paths of the extension. To run these tests, first start a local instance of kdb+ that loads its script file and listens on port 5000.  
```  
$ q pgtokdb/test/pgtokdb_test.q -p 5000  
"Ready to run tests."  
q)   
```  
Then start psql and invoke its test script.  
```  
$ psql --quiet --file pgtokdb/test/pgtokdb_test.sql  
Creating test schema: pgtokdb_test  
************** Happy Path Testing **************  
** Test01: Simple connectivity  
 j   
---  
 0  
(1 row)  
...  
************** Exception Path Testing **************  
** Testxx: Error on kdb+ not returning unkeyed table  
psql:dev/pgtokdb/test/pgtokdb_test.sql:xx: ERROR:  Result from kdb+ must be unkeyed table  
** Testxx: Unsupported argument types  
psql:dev/pgtokdb/test/pgtokdb_test.sql:xx: ERROR:  Argument 1 uses an unsupported type  
...  
```  
The Happy Path Testing should not produce any errors, while the Exception Path Testing should only produce those errors that are emited from the extension.  
## Acknowledgements  
Aside from the excellent documentation on the Postgres site, there is a lot of good material written by software engineers on various technical aspects of writing Postgres extensions, as follows.  
[Writing PostgreSQL Extensions is Fun – C Language](https://www.percona.com/blog/2019/04/05/writing-postgresql-extensions-is-fun-c-language/)  
[Set Returning Functions and PostgreSQL 10](https://tapoueh.org/blog/2017/10/set-returning-functions-and-postgresql-10/)  
[Introduction to MemoryContexts](https://blog.pgaddict.com/posts/introduction-to-memory-contexts)  
[Project of UDF and its realization at C for PostgreSQL](https://postgres.cz/wiki/Project_of_UDF_and_its_realization_at_C_for_PostgreSQL)  
[Porting a PostgreSQL Extension from Unix to Windows 10](http://www.myrkraverk.com/blog/2019/08/porting-a-postgresql-extension-from-unix-to-windows-10/)  
[Writing Postgres Extensions Code Organization and Versioning](http://big-elephants.com/2015-11/writing-postgres-extensions-part-v/)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")