# Leveraging Randomness in Cybersecurity

## Presenter
- **Name:** Frank Tse
- **Organization:** Nexusguard

## Agenda
1. What is randomness?
2. Applications of randomness
3. Detecting anomalies from randomness
4. Mitigating 'random' attacks
5. Visualizing randomness

## About the Presenter
- **Origin:** Hong Kong
- **Expertise:** DDoS Research
- **Interests:** RFCs, IT Security

## Identifying and Acting on Threats
- **Identify correctly:**
  - Good Human: Adult, Kid, Infant
  - Bad Human: Smart, Not-So-Smart
  - Good Bot (Inhuman)
  - Bad Bot (Inhuman)
- **Take actions accordingly:**
  - Block known bad actors
  - Verify known good actors
  - Track uncertain entities
  - Challenge suspicious activities

## General IT Security vs. DDoS
- **/dev/random:**
  - **Entropy:** Initial seeds for random number generation
  - **kern.random.sys.seeded:** Non-blocking while reading
  - **kern.random.sys.harvest.ethernet:** LAN traffic
  - **kern.random.sys.harvest.point_to_point:** P2P interface
  - **kern.random.sys.harvest.interrupt:** Hardware interrupt (Mouse, keyboard)
  - **kern.random.sys.harvest.swi:** Software interrupt (exceptions)

### Initializing Seed for Random During Boot Up (Hardware)
- **Entropy:** Initial seeds for random number generation
- **Virtual Machines:**
  - `virtio-rng:` A driver for feeding entropy between VM guest and host
  - **Problem:** Lack of trust in `virtio-rng`
  - **Solution:** Entropy from a remote server (e.g., `entropy.ubuntu.com`)

## Historical Examples
- **Angers Bridge Collapse (April 16, 1850):** Soldiers marching in synchronization caused the bridge to collapse.
- **Storm Codec (May 19, 2009):** Lack of random back-off and sleep mechanisms led to the collapse of DNSpod.

## Routing Protocol Randomization
- **RFC4271 – Border Gateway Protocol v4:**
  - To minimize peaks in BGP message distribution, jitter should be applied to timers.
  - **Default Jitter:** Multiply the base value of the timer by a random factor uniformly distributed between 0.75 and 1.0.

## C&C Communication and Software Updates
- **Randomart Generation from SSH Host Key Fingerprint:**
  ```bash
  $ ssh root@myhost -o VisualHostKey=yes
  Host key fingerprint is ce:7f:ee:de:c0:87:bb:63:8b:ae:d3:6d:08:4d:d4:8f
  +--[ RSA 2048]----+
  |           .     |
  |          . .    |
  |         .   o   |
  |          . E .  |
  |        So       |
  |       o. .. .   |
  |        oo o+ .  |
  |        ..o.*=   |
  |        .++BB+.  |
  +-----------------+
  ```

## Importance of Randomness
- **CVE-2008-1447: DNS Cache Poisoning Issue:**
  - Insufficient randomness in DNS transaction IDs and source ports allowed cache poisoning.
- **TCP Reset Attacks:**
  - Predictable TCP source ports can be exploited. Implementing random TCP source ports (e.g., `counter++`) can mitigate this.

## Online Services and Password Policies
- **Ideal Random Password:**
  - Alphanumeric + limited special characters + password policy
  - Variants by languages and site owners
  - Lazy administrators may use simpler policies
  - Totally insane randomness policy

## DDoS Attacks and Evasion
- **Evasion Techniques:**
  - Making as many false positives as possible
  - Avoiding detection and mitigation filters
  - Convincing the real server that the traffic is legitimate

### DDoS Attack Levels
- **Level 0.0 – Bandwidth Attacks:**
  - 100% stateless, even initiated in TCP
  - High chance of being blocked if the port is not open
- **Level 0.1 – Bandwidth Attacks:**
  - 100% stateless, mostly works with UDP
  - Relies on intermediate victim servers and amplification factors
- **Level 1.0 – TCP SYN Flood:**
  - 100% stateless, using spoofed IP addresses
  - Complies with RFC but not realistic
  - Example: `hping3` tool
- **Level 2.0 – HTTP GET Flood (Static):**
  - Legitimate but static and lacking headers
  - Distribution of requests is not random
- **Level 2.1 – HTTP GET Flood (Static Random):**
  - More sophisticated with varied user agents and headers
  - Example: `Hulk.py` script

## Conclusion
- **Randomness is crucial** in cybersecurity for both defensive and offensive purposes.
- Proper implementation of randomness can significantly enhance security measures and help in detecting and mitigating attacks.