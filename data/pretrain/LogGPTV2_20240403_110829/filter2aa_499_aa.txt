Take advantage of randomness  
Frank Tse 
Nexusguard 
Agenda 
What is random 
Some applications of random 
Detecting anomalies from randomness 
Mitigating ‘random’ attacks 
1 
2 
3 
4 
Visualizing randomness 
5 
About::me 
From Hong Kong 
Researcher in DDoS 
I like RFC 
IT Security 
Identify them correctly 
Take actions accordingly 
Block the known bad 
Verify the known good 
Track the uncertain 
Challenge the suspicious 
DDoS: 
Good Human 
 > Adult, Kid, Infant   
Bad Human 
 > Smart, not-so-smart 
Good Bot (inhuman)  
Bad bot (inhuman) 
General IT security vs DDoS 
/dev/random 
Entropy: initial seeds for random number generation   
kern.random.sys.seeded
 non-blocking while reading 
kern.random.sys.harvest.ethernet
 LAN traffic 
kern.random.sys.harvest.point_to_point  P2P interface 
kern.random.sys.harvest.interrupt
 HW interrupt (Mouse, keyboard) 
kern.random.sys.harvest.swi
 SW interrupt  (exceptions) 
Initializing seed for random during boot up (HW) 
Entropy: initial seeds for random number generation   
If I’m running on VM 
[ 0.000000] Booting paravirtualized kernel on KVM 
virtio-rng: a driver for feeding entropy between VM guest and host  
Problem: I don’t trust virto-rng 
Solution: entropy from remote server 
entropy.ubuntu.com 
Angers Bridge, collapsed on Apr-16, 1850, due to soldiers marching across it. 
aka. “Stuck in synchronization” 
2009 MAY 19, Storm Codec [ Baofeng] (暴风影音) brings down DNSpod. 
Due to lack of random back-off and sleep mechanism  
Routing protocol randomized hello timers to avoid ‘stuck in synchronization”  
RFC4271 – Border Gateway Protocol v4 
To minimize the likelihood that the distribution of BGP messages by a given BGP speaker will contain 
peaks, jitter SHOULD be applied to the timers associated with MinASOriginationIntervalTimer, 
KeepaliveTimer, MinRouteAdvertisementIntervalTimer, and ConnectRetryTimer. A given BGP speaker 
MAY apply the same jitter to each of these quantities, regardless of the destinations to which the 
updates are being sent; that is, jitter need not be configured on a per-peer basis.  
The suggested default amount of jitter SHALL be determined by multiplying the base value of the 
appropriate timer by a random factor, which is uniformly distributed in the range from 0.75 to 1.0. 
A new random value SHOULD be picked each time the timer is set. The range of the jitter's random 
value MAY be configurable. 
C&C Communication 
Software update check 
Generating Randomart from SSH host key fingerprint 
$ ssh root@myhost -o VisualHostKey=yes 
Host key fingerprint is ce:7f:ee:de:c0:87:bb:63:8b:ae:d3:6d:08:4d:d4:8f 
+--[ RSA 2048]----+ 
|           .     | 
|          . .    | 
|         .   o   | 
|          . E .  | 
|        So       | 
|       o. .. .   | 
|        oo o+ .  | 
|        ..o.*=   | 
|        .++BB+.  | 
+-----------------+ 
Without randomness 
CVE-2008-1447: DNS Cache Poisoning Issue 
allow remote attackers to spoof DNS traffic via a birthday attack that 
uses in-bailiwick referrals to conduct cache poisoning against 
recursive resolvers, related to insufficient randomness of DNS 
transaction IDs and source ports, aka "DNS Insufficient Socket 
Entropy Vulnerability" or "the Kaminsky bug." 
Without randomness 
TCP Reset attacks / predictable TCP source port 
The easiest way to implement ‘random TCP src port’ is counter++ 
OSX keep TCP source port++ for each new request, same as Windows 
How online services support random password 
Ideal Random password 
Alphanumeric + limited special 
chars + Password policy 
Alphanumeric + limited special 
chars 
Alphanumeric 
Numeric only 
Phone compatible services 
Variants by languages 
 & site owners  
Lazy administrators 
Variants by languages 
 & site owners, +  
Totally insane RANDOM 
randomness policy 
DDoS attacks – the art of evasion  
Attack goes undetected is getting harder 
 0-days on protocol are getting harder to dig out 
 Detections are implementing closer to bots 
 Security awareness increased by site owners 
 DDoS tools are mostly open sources 
 Signatures of DDoS tools can be easily implemented 
 Websites are behind mitigation filters or CDNs 
A successful DDoS attacks is 
 Make as many false possible as possible 
 Detection and mitigation filter never trigger 
 Real server believes it is from a legitimate user 
Level 0.0 – Bandwidth attacks 
100% stateless, even initiated in TCP 
99.99% chance of being block since the port is not open 
99% chance of being block from source 
Your botnet may disconnect from command updates 
Level 0.1 – Bandwidth attacks  
100% stateless, mostly works with UDP 
Attack power relies on intermediate victim servers  
Attack efficiency relies on amplification factor 
It’s easy to detect, and it’s from fixed source port J 
Reflected 
Normal Traffic 
Attack traffic 
Src port 
Src port 
Dst port 
Dst port 
Level 1.0 – TCP SYN Flood  
100% stateless 
99.99% using spoof IP 
99% complies with RFC but not exists in real world 
RFC 793 (TCP) is 33 years old 
Ø  it didn’t say what you should not spoof 
Ø  it didn’t say what TCP ACK you should pick 
during TCP handshake 
Ø  It didn’t say how many TCP Options you 
should include during handshake 
Level 1.0 – TCP SYN Flood  
Sendtcp.c (hping3-20051105) 
/* sequence number and ack are random if not set */ 
tcp->th_seq = (set_seqnum) ? htonl(tcp_seqnum) : htonl(rand()); 
tcp->th_ack = (set_ack) ? htonl(tcp_ack) : htonl(rand()); 
sequence++;
 /* next sequence number */ 
 if (!opt_keepstill) 
 src_port = (sequence + initsport) % 65536; 
Main.c 
/* set initial source port */ 
 if (initsport == -1) 
 initsport = src_port = 1024 + (rand() % 2000); 
It’s  easy to spot HPING from source port and non-zero tcp_ack # 
Level 1.0 – TCP SYN Flood  
Randomness detection can be based on COMBINATION of fields 
Insane packet can be dropped: tcp.flags == 0x02 && (ip.len – 40)%4 !=0 
Level 2.0 – HTTP GET Flood - static 
for ((i=0;i<100;i++)) do `wget target.com &`; done  
It’s is legitimate but 
 it’s dummy and static 
 it’s HTTP/1.0 
 lack of HTTP headers 
Distribution of requests are 
 spectrum like 
 not as random as expected 
How to  mitigate 
 block tcp.flags == 0x18 and ip.len < 100 and tcp.dstport == 80 
Level 2.1 – HTTP GET Flood – static random 
GET / HTTP/1.1 
Host: www.nexusguard.com 
Connection: keep-alive 
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)  
AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.65 Safari/537.31 
Referer: https://www.facebook.com/ 
Accept-Encoding: gzip,deflate,sdch 
Accept-Language: en-US,en;q=0.8 
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3 
This is legitimate request 
Level 2.1 – HTTP GET Flood – static random 
GET / HTTP/1.1 
Host: www.nexusguard.com 
Connection: keep-alive 
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 
User-Agent: $VARIABLE 
Referer: https://www.facebook.com/ 
Accept-Encoding: gzip,deflate,sdch 
Accept-Language: en-US,en;q=0.8 
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3 
This is how attacker try to variety   
Hulk.py 
#builds random ascii string 
def buildblock(size): 
 out_str = ’’ 
 for i in range(0, size): 
 a = random.randint(65, 90) 
 out_str += chr(a) 
 return(out_str) 
Level 2.1 – HTTP GET Flood – static random 
Hulk.py 
# generates a user agent array 
def useragent_list(): 
 global headers_useragents 
 headers_useragents.append('Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.1.3) Gecko/
20090913 Firefox/3.5.3’) 
 headers_useragents.append('Mozilla/5.0 (Windows; U; Windows NT 6.1; en; rv:1.9.1.3) 
Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)’) 
 headers_useragents.append('Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.1.3) 
Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)’) 
 headers_useragents.append('Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.1) 