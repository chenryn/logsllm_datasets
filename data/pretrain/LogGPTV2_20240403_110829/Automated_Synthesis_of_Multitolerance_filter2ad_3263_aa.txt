title:Automated Synthesis of Multitolerance
author:Sandeep S. Kulkarni and
Ali Ebnenasir
Automated Synthesis of Multitolerance (cid:0)
Sandeep S. Kulkarni
Ali Ebnenasir
Software Engineering and Network Systems Laboratory
Department of Computer Science and Engineering
Michigan State University
East Lansing MI 48824 USA
Abstract
We concentrate on automated synthesis of multitolerant pro-
grams, i.e., programs that tolerate multiple classes of faults
and provide a (possibly) different level of fault-tolerance to
each class. We consider three levels of fault-tolerance: (1)
failsafe, where in the presence of faults, the synthesized pro-
gram guarantees safety, (2) nonmasking, where in the pres-
ence of faults, the synthesized program recovers to states from
where its safety and liveness are satisﬁed, and (3) masking
where in the presence of faults the synthesized program sat-
isﬁes safety and recovers to states from where its safety and
liveness are satisﬁed.
We focus on the automated synthesis of ﬁnite-state multitol-
erant programs in high atomicity model where the program
can read and write all its variables in an atomic step. We
show that if one needs to add failsafe (respectively, nonmask-
ing) fault-tolerance to one class of faults and masking fault-
tolerance to another class of faults then such addition can
be done in polynomial time in the state space of the fault-
intolerant program. However, if one needs to add failsafe
fault-tolerance to one class of faults and nonmasking fault-
tolerance to another class of faults then the resulting prob-
lem is NP-complete. We ﬁnd this result to be counterintuitive
since adding failsafe and nonmasking fault-tolerance to the
same class of faults (which is equivalent to adding masking
fault-tolerance to that class of faults) can be done in poly-
nomial time, whereas adding failsafe fault-tolerance to one
class of faults and nonmasking fault-tolerance to a different
class of faults is NP-complete.
Keywords: Fault-tolerance, Automatic addition of fault-
tolerance, Formal methods, Program synthesis,
Distributed programs
1 Introduction
Today’s systems are often subject to multiple classes of faults
and, hence, these systems need to provide appropriate level
of fault-tolerance to each fault-class. Often it is undesirable
1Email: PI:EMAIL, PI:EMAIL
Web: http://www.cse.msu.edu/˜{sandeep,ebnenasi}
Tel: +1-517-355-2387, Fax: +1-517-432-1061
This work was partially sponsored by NSF CAREER CCR-0092724,
DARPA Grant OSURS01-C-1901, ONR Grant N00014-01-1-0744, NSF
grant EIA-0130724, and a grant from Michigan State University.
or impractical to provide the same level of fault-tolerance to
each class of faults. Hence, these systems need to tolerate
multiple classes of faults, and (possibly) provide a different
level of fault-tolerance to each class. To characterize such
systems, the notion of multitolerance was introduced in [1].
The importance of such multitolerant systems can be easily
observed from the fact that several methods for designing
multitolerant programs as well as several instances of mul-
titolerant programs can be readily found (e.g., [1–4]) in the
literature.
In this paper, we focus on automated synthesis of multitoler-
ant programs. Such automated synthesis has the advantage of
generating fault-tolerant programs that (i) are correct by con-
struction, and (ii) tolerate multiple classes of faults. Since the
synthesized programs are correct by construction, there is no
need for their proof of correctness.
One of the problems in automated synthesis of multitoler-
ant programs is the complexity of such synthesis. Speciﬁ-
cally, there exist situations where satisfying a speciﬁc fault-
tolerance requirement for one class of faults conﬂicts with
providing a different level of fault-tolerance to another fault-
class. Hence, it is necessary to identify situations where syn-
thesis of multitolerant programs can be performed efﬁciently
and where heuristics need to be developed for adding multi-
tolerance.
In our algorithms, we begin with a fault-intolerant program,
i.e., a program that ensures that its speciﬁcation is satisﬁed in
the absence of faults although no guarantees are provided in
the presence of faults. Subsequently, we add fault-tolerance
to the given classes of faults while providing the required
level of fault-tolerance to each of those classes. We consider
three levels of fault-tolerance requirements, failsafe, non-
masking, and masking. Intuitively, in the presence of faults,
a failsafe fault-tolerant program ensures that the safety is sat-
isﬁed. In the presence of faults, a nonmasking fault-tolerant
program recovers to states from where its safety and liveness
speciﬁcation is satisﬁed. And, a masking program satisﬁes
both these properties (cf. Section 2 for precise deﬁnitions.)
Our algorithms are based on the algorithms in [5] where
Kulkarni and Arora have presented algorithms for adding a
single level of fault-tolerance to one class of faults. Specif-
ically, in [5], the authors present sound and complete algo-
rithms for adding failsafe, nonmasking, or masking fault-
tolerance in the high atomicity model where a process can
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:33 UTC from IEEE Xplore.  Restrictions apply. 
read and write all program variables in an atomic step. The
complexity of these algorithms is polynomial in the state
space of the fault-intolerant program.
Contributions of the paper. We focus on automated syn-
thesis of high atomicity multitolerant programs in a stepwise
fashion. The main results of the paper are as follows:
1. We present a sound and complete stepwise algorithm
for the case where we add nonmasking fault-tolerance
to one class of faults and masking fault-tolerance to an-
other class of faults. The complexity of this algorithm
is polynomial in the state space of the fault-intolerant
program.
2. We present a sound and complete stepwise algorithm for
the case where we add failsafe fault-tolerance to one
class of faults and masking fault-tolerance to another
class of faults. The complexity of this algorithm is also
polynomial in the state space of the fault-intolerant pro-
gram.
3. We ﬁnd a somewhat surprising result for the case where
failsafe fault-tolerance is added to one fault-class and
nonmasking fault-tolerance is added to another fault-
class. We ﬁnd that this problem is NP-complete. This
result is surprising in that automating the addition of
failsafe and nonmasking fault-tolerance to the same
class of faults can be performed in polynomial time.
However, addition of failsafe fault-tolerance to one class
of faults and nonmasking fault-tolerance to a different
class of faults is NP-complete.
Organization of the paper. The rest of the paper is orga-
nized as follows: In Section 2, we present preliminary con-
cepts where we recall the deﬁnitions of programs, speciﬁ-
cations, faults and fault-tolerance. Then, in Section 3, we
present the formal deﬁnition of multitolerant programs and
the problem of synthesizing a multitolerant program from a
fault-intolerant program. Subsequently, in Section 4, we re-
call the relevant properties of algorithms in [5] that we use
in automated addition of multitolerance.
In Section 5, we
present a sound and complete algorithm for the synthesis of
multitolerant programs that provide nonmasking-masking
multitolerance. Then, in Section 6, we present a sound and
complete algorithm for the synthesis of multitolerant pro-
grams that provide failsafe-masking multitolerance. In Sec-
tion 7, we present the NP-completeness proof for the case
where failsafe-nonmasking multitolerance is added to fault-
intolerant programs. Finally, in Section 8, we make conclud-
ing remarks and discuss future work.
2 Preliminaries
In this section, we give formal deﬁnitions of programs, prob-
lem speciﬁcations, faults, and fault-tolerance. The programs
are speciﬁed in terms of their state space and their transitions.
The deﬁnition of speciﬁcations is adapted from Alpern and
Schneider [6]. The deﬁnition of faults and fault-tolerance is
adapted from Arora and Gouda [7] and Kulkarni [8].
2.1 Program
A program  is speciﬁed by a ﬁnite state space, (cid:1), and a set
of transitions, Æ, where Æ is a subset of (cid:1)  (cid:1). Hence, we
use (cid:1)(cid:1)(cid:2) Æ(cid:2) to denote a program .
A state predicate of  is any subset of (cid:1). A state
predicate (cid:1) is closed in the program  (respectively, Æ)
iff (cid:3)(cid:0)(cid:2) (cid:1) (cid:1)(cid:1) (cid:0)(cid:2) (cid:1) (cid:4) Æ  (cid:0) (cid:4) (cid:1)  (cid:1) (cid:4) (cid:1). A se-
quence of states, (cid:1)(cid:0)(cid:2) (cid:1)(cid:2) (cid:4)(cid:4)(cid:4)(cid:2), is a computation of  iff the
following two conditions are satisﬁed: (1) (cid:3)(cid:5) (cid:1) (cid:5) (cid:6) (cid:3) (cid:1)
(cid:1) (cid:1)(cid:2) (cid:1) (cid:4) Æ, and (2) if (cid:1)(cid:0)(cid:2) (cid:1)(cid:2) (cid:4)(cid:4)(cid:4)(cid:2) is ﬁnite and terminates in
state   then there does not exist state  such that  (cid:2)  (cid:4) Æ.
A sequence of states, (cid:1)(cid:0)(cid:2) (cid:1)(cid:2) (cid:4)(cid:4)(cid:4)(cid:2) (cid:2), is a computation pre-
ﬁx of  iff (cid:3)(cid:5) (cid:1) (cid:3) (cid:7) (cid:5) (cid:6)  (cid:1) (cid:1) (cid:1)(cid:2) (cid:1) (cid:4) Æ, i.e., a computation
preﬁx need not be maximal.
The projection of program  on state predicate (cid:1), denoted as
(cid:7)(cid:1), is the program (cid:1)(cid:1)(cid:2) (cid:8)(cid:0)(cid:2) (cid:1) (cid:1) (cid:0)(cid:2) (cid:1) (cid:4) Æ (cid:9) (cid:0)(cid:2) (cid:1) (cid:4)
(cid:1)(cid:10)(cid:2). In other words, (cid:7)(cid:1) consists of transitions of  that start
in (cid:1) and end in (cid:1). Given two programs,  (cid:4) (cid:1)(cid:1)(cid:2) Æ(cid:2) and
(cid:1) (cid:4) (cid:1)(cid:1) (cid:1)
Notation. When it is clear from context, we use  and Æ
interchangeably. Also, we say that a state predicate (cid:1) is true
in a state  iff  (cid:4) (cid:1).
(cid:2), we say (cid:1) (cid:11)  iff (cid:1) (cid:1)
(cid:2) Æ(cid:1)
 (cid:4) (cid:1) and Æ (cid:1)