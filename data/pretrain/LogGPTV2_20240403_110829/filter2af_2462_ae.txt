        /* In persistent mode, the child stops itself with SIGSTOP to indicate
           a successful run. In this case, we want to wake it up without forking
           again. */
        if (WIFSTOPPED(status)) child_stopped = 1;
        /* Relay wait status to pipe, then loop back. */
        if (write(FORKSRV_FD + 1, &status, 4) != 4) _exit(1);
      }
    }
上述逻辑可以概括如下：
  * 首先，设置 `child_stopped?= 0`，写入4字节到状态管道，通知fuzzer已准备完成；
  * 进入 `while` ，开启fuzz循环：
  * 调用 `read` 从控制管道读取4字节，判断子进程是否超时。如果管道内读取失败，发生阻塞，读取成功则表示AFL指示forkserver执行fuzz；
  * 如果 `child_stopped` 为0，则fork出一个子进程执行fuzz，关闭和控制管道和状态管道相关的fd，跳出fuzz循环；
  * 如果 `child_stopped` 为1，在 `persistent mode` 下进行的特殊处理，此时子进程还活着，只是被暂停了，可以通过`kill(child_pid, SIGCONT)`来简单的重启，然后设置`child_stopped`为0；
  * forkserver向状态管道 `FORKSRV_FD + 1` 写入子进程的pid，然后等待子进程结束；
  * `WIFSTOPPED(status)` 宏确定返回值是否对应于一个暂停子进程，因为在 `persistent mode` 里子进程会通过 `SIGSTOP` 信号来暂停自己，并以此指示运行成功，我们需要通过 `SIGCONT`信号来唤醒子进程继续执行，不需要再进行一次fuzz，设置`child_stopped`为1；
  * 子进程结束后，向状态管道 `FORKSRV_FD + 1` 写入4个字节，通知AFL本次执行结束。
###### 2\. persistent mode
`persistent?mode`
并没有通过fork子进程的方式来执行fuzz。一些库中提供的API是无状态的，或者可以在处理不同输入文件之间进行重置，恢复到之前的状态。执行此类重置时，可以使用一个长期存活的进程来测试多个用例，以这种方式来减少重复的
`fork()` 调用和操作系统的开销。不得不说，这种思路真的很优秀。
一个基础的框架大概如下：
    while (__AFL_LOOP(1000)) {
      /* Read input data. */
      /* Call library code to be fuzzed. */
      /* Reset state. */
    }
    /* Exit normally */
设置一个 `while` 循环，并指定循环次数。在每次循环内，首先读取数据，然后调用想fuzz的库代码，然后重置状态，继续循环。（本质上也是一种快照。）
对于循环次数的设置，循环次数控制了AFL从头重新启动过程之前的最大迭代次数，较小的循环次数可以降低内存泄漏类故障的影响，官方建议的数值为1000。（循环次数设置过高可能出现较多意料之外的问题，并不建议设置过高。）
一个 `persistent?mode` 的样例程序如下：
    #include 
    #include 
    #include 
    #include 
    #include 
    /* Main entry point. */
    int main(int argc, char** argv) {
      char buf[100]; /* Example-only buffer, you'd replace it with other global or
                        local variables appropriate for your use case. */
      while (__AFL_LOOP(1000)) {
        /*** PLACEHOLDER CODE ***/
        /* STEP 1: 初始化所有变量 */
        memset(buf, 0, 100);
        /* STEP 2: 读取输入数据，从文件读入时需要先关闭旧的fd然后重新打开文件*/
        read(0, buf, 100);
        /* STEP 3: 调用待fuzz的code*/
        if (buf[0] == 'f') {
          printf("one\n");
          if (buf[1] == 'o') {
            printf("two\n");
            if (buf[2] == 'o') {
              printf("three\n");
              if (buf[3] == '!') {
                printf("four\n");
                abort();
              }
            }
          }
        }
        /*** END PLACEHOLDER CODE ***/
      }
      /* 循环结束，正常结束。AFL会重启进程，并清理内存、剩余fd等 */
      return 0;
    }
宏定义 `__AFL_LOOP` 内部调用 `__afl_persistent_loop` 函数：
      cc_params[cc_par_cnt++] = "-D__AFL_LOOP(_A)="
        "({ static volatile char *_B __attribute__((used)); "
        " _B = (char*)\"" PERSIST_SIG "\"; "
    #ifdef __APPLE__
        "__attribute__((visibility(\"default\"))) "
        "int _L(unsigned int) __asm__(\"___afl_persistent_loop\"); "
    #else
        "__attribute__((visibility(\"default\"))) "
        "int _L(unsigned int) __asm__(\"__afl_persistent_loop\"); "
    #endif /* ^__APPLE__ */
        "_L(_A); })";
`__afl_persistent_loop(unsigned int max_cnt)` 的逻辑如下：
结合源码梳理一下其逻辑：
    /* A simplified persistent mode handler, used as explained in README.llvm. */
    int __afl_persistent_loop(unsigned int max_cnt) {
      static u8  first_pass = 1;
      static u32 cycle_cnt;
      if (first_pass) {
        if (is_persistent) {
          memset(__afl_area_ptr, 0, MAP_SIZE);
          __afl_area_ptr[0] = 1;
          __afl_prev_loc = 0;
        }
        cycle_cnt  = max_cnt;
        first_pass = 0;
        return 1;
      }
      if (is_persistent) {
        if (--cycle_cnt) {
          raise(SIGSTOP);
          __afl_area_ptr[0] = 1;
          __afl_prev_loc = 0;
          return 1;
        } else {
          __afl_area_ptr = __afl_area_initial;
        }
      }
      return 0;
    }
  * 首先判读是否为第一次执行循环，如果是第一次：
  * 如果 `is_persistent` 为1，清空 `__afl_area_ptr`，设置 `__afl_area_ptr[0]` 为1，`__afl_prev_loc` 为0；
  * 设置 `cycle_cnt` 的值为传入的 `max_cnt` 参数，然后设置 `first_pass=0` 表示初次循环结束，返回1；
  * 如果不是第一次执行循环，在 persistent mode 下，且 `--cycle_cnt` 大于1：
  * 发出信号 `SIGSTOP` 让当前进程暂停
  * 设置 `__afl_area_ptr[0]` 为1，`__afl_prev_loc` 为0，然后直接返回1
  * 如果 `cycle_cnt` 为0，设置`__afl_area_ptr`指向数组 `__afl_area_initial`。
  * 最后返回0
重新总结一下上面的逻辑：
  * 第一次执行loop循环，进行初始化，然后返回1，此时满足 `while(__AFL_LOOP(1000)`， 于是执行一次fuzz，计数器cnt减1，抛出SIGSTOP信号暂停子进程；
  * 第二次执行loop循环，恢复之前暂停的子进程继续执行，并设置 `child_stopped` 为0。此时相当于重新执行了一次程序，重新对 `__afl_prev_loc` 进行设置，随后返回1，再次进入 `while(_AFL_LOOP(1000))` ，执行一次fuzz，计数器cnt减1，抛出SIGSTOP信号暂停子进程；
  * 第1000次执行，计数器cnt此时为0，不再暂停子进程，令 `__afl_area_ptr` 指向无关数组 `__afl_area_initial` ，随后子进程结束。
###### 3\. trace-pc-guard mode
该功能的使用需要设置宏 `AFL_TRACE_PC=1` ，然后再执行 `afl-clang-fast` 时传入参数 `-fsanitize-coverage=trace-pc-guard` 。
该功能的主要特点是会在每个edge插入桩代码，函数 `__sanitizer_cov_trace_pc_guard`
会在每个edge进行调用，该函数利用函数参数 `guard` 指针所指向的 `uint32` 值来确定共享内存上所对应的地址：
    void __sanitizer_cov_trace_pc_guard(uint32_t* guard) {
      __afl_area_ptr[*guard]++;
    }
`guard` 的初始化位于函数 `__sanitizer_cov_trace_pc_guard_init` 中：
    void __sanitizer_cov_trace_pc_guard_init(uint32_t* start, uint32_t* stop) {
      u32 inst_ratio = 100;
      u8* x;
      if (start == stop || *start) return;
      x = getenv("AFL_INST_RATIO");
      if (x) inst_ratio = atoi(x);
      if (!inst_ratio || inst_ratio > 100) {
        fprintf(stderr, "[-] ERROR: Invalid AFL_INST_RATIO (must be 1-100).\n");
        abort();
      }
      *(start++) = R(MAP_SIZE - 1) + 1;
      while (start  0)
      ... ...
该循环主要通过 `getopt` 获取各种环境配置、选项参数等。
##### 1.2 setup_signal_handlers 函数
调用 `sigaction` ，注册信号处理函数，设置信号句柄。具体的信号内容如下：
信号 | 作用  
---|---  
SIGHUP/SIGINT/SIGTERM | 处理各种“stop”情况  
SIGALRM | 处理超时的情况  
SIGWINCH | 处理窗口大小  
SIGUSER1 | 用户自定义信号，这里定义为skip request  
SIGSTP/SIGPIPE | 不是很重要的一些信号，可以不用关心  
##### 1.3 check_asan_opts 函数
读取环境变量 `ASAN_OPTIONS` 和 `MSAN_OPTIONS`，做一些必要性检查。
##### 1.4 fix_up_sync 函数
如果通过 `-M`或者`-S`指定了 `sync_id`，则更新 `out_dir` 和 `sync_dir` 的值：设置 `sync_dir` 的值为
`out_dir`，设置 `out_dir` 的值为`out_dir/sync_id`。
##### 1.5 save_cmdline 函数
copy当前命令行参数，保存。
##### 1.6 check_if_tty 函数
检查是否在tty终端上面运行：读取环境变量 `AFL_NO_UI` ，如果存在，设置 `not_on_tty` 为1，并返回；通过 `ioctl`
读取window size，如果报错为 `ENOTTY`，表示当前不在一个tty终端运行，设置 `not_on_tty`。
##### 1.7 几个CPU检查相关的函数
  * `static void get_core_count(void)get_core_count()`：获取核心数量
  * `check_crash_handling()`：确保核心转储不会进入程序
  * `check_cpu_governor()`：检查CPU管理者
##### 1.8 **setup_shm** 函数
该函数用于设置共享内存和 `virgin_bits`，属于比较重要的函数，这里我们结合源码来解析一下：
    /* Configure shared memory and virgin_bits. This is called at startup. */
    EXP_ST void setup_shm(void) {
      u8* shm_str;
      if (!in_bitmap) memset(virgin_bits, 255, MAP_SIZE); 
      // 如果 in_bitmap 为空，调用 memset 初始化数组 virgin_bits[MAP_SIZE] 的每个元素的值为 ‘255’。
      memset(virgin_tmout, 255, MAP_SIZE); // 调用 memset 初始化数组 virgin_tmout[MAP_SIZE] 的每个元素的值为 ‘255’。
      memset(virgin_crash, 255, MAP_SIZE); // 调用 memset 初始化数组 virgin_crash[MAP_SIZE] 的每个元素的值为 ‘255’。
      shm_id = shmget(IPC_PRIVATE, MAP_SIZE, IPC_CREAT | IPC_EXCL | 0600);
      // 调用 shmget 函数分配一块共享内存，并将返回的共享内存标识符保存到 shm_id
      if (shm_id < 0) PFATAL("shmget() failed");
      atexit(remove_shm); // 注册 atexit handler 为 remove_shm
      shm_str = alloc_printf("%d", shm_id); // 创建字符串 shm_str
      /* If somebody is asking us to fuzz instrumented binaries in dumb mode,
         we don't want them to detect instrumentation, since we won't be sending
         fork server commands. This should be replaced with better auto-detection
         later on, perhaps? */
      if (!dumb_mode) setenv(SHM_ENV_VAR, shm_str, 1); 
      // 如果不是dumb_mode，设置环境变量 SHM_ENV_VAR 的值为 shm_str
      ck_free(shm_str);
      trace_bits = shmat(shm_id, NULL, 0);
      // 设置 trace_bits 并初始化为0