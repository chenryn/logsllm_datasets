title:RAMBleed: Reading Bits in Memory Without Accessing Them
author:Andrew Kwong and
Daniel Genkin and
Daniel Gruss and
Yuval Yarom
2020 IEEE Symposium on Security and Privacy
RAMBleed: Reading Bits in Memory Without
Accessing Them
Andrew Kwong
University of Michigan
PI:EMAIL
Daniel Genkin
Daniel Gruss
Yuval Yarom
University of Michigan
Graz University of Technology
University of Adelaide and Data61
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—The Rowhammer bug is a reliability issue in DRAM
cells that can enable an unprivileged adversary to ﬂip the values
of bits in neighboring rows on the memory module. Previous
work has exploited this for various types of fault attacks across
security boundaries, where the attacker ﬂips inaccessible bits,
often resulting in privilege escalation. It is widely assumed
however, that bit ﬂips within the adversary’s own private memory
have no security implications, as the attacker can already modify
its private memory via regular write operations.
We demonstrate that this assumption is incorrect, by em-
ploying Rowhammer as a read side channel. More speciﬁcally,
we show how an unprivileged attacker can exploit the data
dependence between Rowhammer induced bit ﬂips and the bits
in nearby rows to deduce these bits, including values belonging to
other processes and the kernel. Thus, the primary contribution
of this work is to show that Rowhammer is a threat to not only
integrity, but to conﬁdentiality as well.
Furthermore, in contrast to Rowhammer write side channels,
which require persistent bit ﬂips, our read channel succeeds even
when ECC memory detects and corrects every bit ﬂip. Thus,
we demonstrate the ﬁrst security implication of successfully-
corrected bit ﬂips, which were previously considered benign.
To demonstrate the implications of this read side channel, we
present an end-to-end attack on OpenSSH 7.9 that extracts an
RSA-2048 key from the root level SSH daemon. To accomplish
this, we develop novel techniques for massaging memory from
user space into an exploitable state, and use the DRAM row-
buffer timing side channel to locate physically contiguous mem-
ory necessary for double-sided Rowhammering. Unlike previous
Rowhammer attacks, our attack does not require the use of
huge pages, and it works on Ubuntu Linux under its default
conﬁguration settings.
Index Terms—Side channels, Rowhammer, OpenSSH
I. INTRODUCTION
In recent years, the discrepancy between the abstract model
used to reason about computers and their actual hardware
implementation has lead to a myriad of security issues. These
range from microarchitectural attacks [15] that exploit con-
tention on internal components to leak information such as
cryptographic keys or keystroke timing [18, 45, 65], through
transient execution attacks [10, 35, 39, 60, 63] that break down
fundamental OS isolation guarantees,
to memory integrity
attacks [9, 32, 34, 36] that exploit hardware limitations to
change the contents of data stored in the device.
Rowhammer [19, 34, 55] is a fault attack, in which the
attacker uses a speciﬁc sequence of memory accesses that
results in bit ﬂips, i.e., changes in bit values, in locations
other than those accessed. Because the attacker does not
directly access the changed memory location, the change is
not visible to the processor or the operating system, and is
not subject to any permission checks. Thus far, this ability to
reliably ﬂip bits across security boundaries has been exploited
for sandbox escapes [19, 55], privilege escalation attacks on
operating systems and hypervisors [19, 21, 51, 55, 61, 64],
denial-of-service attacks [21, 28], and even for fault injection
in cryptographic protocols [6].
A common theme for all past Rowhammer attacks is
that they break memory integrity. Namely, the attacker uses
Rowhammer to obtain a (limited) write primitive into oth-
erwise inaccessible memory, and subsequently modiﬁes the
contents of that memory in a way that aligns with the attacker’s
goals. This observation has led to various mitigation proposals
designed to secure the target’s memory by using integrity
checks [62], or by employing ECC (error-correcting code)
memory to ensure memory integrity. The latter, in particular,
has long been touted as a defense against Rowhammer-based
attacks. Even when an attacker ﬂips a bit in memory, the
ECC mechanism corrects the error, halting the attack. While
recent work has demonstrated that an attacker can defeat the
ECC mechanism, resulting in observable bit-ﬂips after error
correction [13], successfully corrected ﬂips are still considered
benign, without any security implications. Thus, in this paper
we pose the following questions:
• Is the threat posed by Rowhammer limited only to memory
integrity and, in particular, can the Rowhammer effect be
exploited for breaching conﬁdentiality?
• What are the security implications of corrected bit ﬂips?
Can an attacker use Rowhammer to breach conﬁdentiality
even when ECC memory corrects all ﬂipped bits?
A. Our Contributions
In this paper, we answer these questions in the afﬁrmative.
More speciﬁcally, we present RAMBleed, a new Rowhammer-
based attack that breaks memory conﬁdentiality guarantees
by acquiring secret information from other processes running
on the same hardware. Remarkably, RAMBleed can break
memory conﬁdentiality of ECC memory, even if all bit ﬂips are
successfully corrected by the ECC mechanism. After proﬁling
the target’s memory, we show how RAMBleed can leak secrets
stored within the target’s physical memory, achieving a read
speed of about 3–4 bits per second. Finally, we demonstrate
© 2020, Daniel Genkin. Under license to IEEE.
DOI 10.1109/SP40000.2020.00020
695
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:51 UTC from IEEE Xplore.  Restrictions apply. 
the threat posed by RAMBleed by recovering an RSA 2048-
bit signing key from an OpenSSH server using only user level
permissions.
Data-Dependent Bit Flips.
The main observation behind
RAMBleed is that bit ﬂips depend not only on the bit’s
orientation, i.e., whether it ﬂips from 1 to 0 or from 0 to 1, but
also on the values of neighboring bits [34]. Speciﬁcally, true
bits tend to ﬂip from 1 to 0 when the bits above and below
them are 0, but not when the bits above and below them are
1. Similarly, anti bits tend to ﬂip from 0 to 1 when the bits
above and below them are 1, but not when the bits above and
below them are 0. While this observation dates back to the
very ﬁrst Rowhammer paper [34], we show how attackers can
use it to obtain a read primitive, thereby learning the values
of nearby bits which they might not be allowed to access.
RAMBleed Overview.
Suppose an attacker wants to
determine the value of a bit in a victim’s secret. The attacker
ﬁrst templates the computer memory to ﬁnd a ﬂippable bit
at the same offset in a memory page as the secret bit. (For
the rest of the discussion we assume a true bit, i.e., one that
ﬂips from 1 to 0.) The attacker then manipulates the memory
layout to achieve the arrangement depicted below:
Row Activation Page
Unused
Row Activation Page
Secret
Sampling Page
Secret
Here, each memory row spans two memory pages of size
4 KiB. The attacker uses the Row Activation pages for ham-
mering, the Sampling page contains the ﬂippable bit, which
is initialized to 1, and Secret pages contain the secret victim
data that the attacker aims to learn. If the value of the secret
bit is 0, the layout results in a ﬂippable 0-1-0 conﬁguration,
i.e., the ﬂippable bit is set to 1, and the bits directly above
and below it are 0. Otherwise, the secret bit is 1, resulting in
a 1-1-1 conﬁguration, which is not ﬂippable.
Next, the attacker repeatedly accesses the two activation
pages she controls (left top and bottom rows), thereby ham-
mering the middle row. Because the Rowhammer effects are
data dependent,
this hammering induces a bit ﬂip in the
sampling page in the case that the secret bit is 0. The attacker
then accesses the sampling page directly, checking for a bit
ﬂip. If the bit has ﬂipped, the attacker deduces that the value
of the secret bit is 0. Otherwise, the attacker deduces that
the value is 1. Repeating the procedure with ﬂippable bits at
different offsets in the page allows the attacker to recover all
of the bits of the victim’s secret.
We note here that neither the victim nor the attacker access
the secrets in any way. Instead, by accessing the attacker-
controlled row activation pages, the attacker uses the victim’s
data to inﬂuence Rowhammer-induced bit ﬂips in her own
private pages. Finally, the attacker directly checks the sampling
page for bit ﬂips, thereby deducing the victim’s bits. As such,
RAMBleed is a cross address space attack.
ECC Memory. ECC memory has traditionally been consid-
ered an effective defense against Rowhammer-based attacks.
Even when an attacker ﬂips a bit
the hard-
in memory,
ware’s ECC mechanisms simply revert back any Rowhammer-
induced bit ﬂips. However, recent work has demonstrated
that an attacker can defeat the ECC mechanism by inducing
enough carefully-placed ﬂips in a single codeword, resulting
in observable bit-ﬂips after error correction [13].
In this paper, however, we show that even ECC-corrected
bit ﬂips may have security implications. This is because
RAMBleed does not necessarily require the attacker to read
the bit to determine if it has ﬂipped. Instead, all the attacker
requires for mounting RAMBleed is an indication that a bit in
the sampling page has ﬂipped (and subsequently corrected).
Unfortunately, as Cojocar et al. [13] show, the synchronous
nature of the ECC correction algorithm typically exposes such
information through a timing channel, where memory accesses
that require error correction are measurably slower than normal
accesses.
Thus, we can exploit Rowhammer-induced timing variation
to read data even from ECC memory. In particular, our work is
the ﬁrst to highlight the security implications of successfully
corrected ﬂips, hitherto considered to be benign.
Memory Massaging. One of the main challenges for mount-
ing RAMBleed, and Rowhammer-based attacks in general, is
achieving the required data layout in memory. Past approaches
rely on one or more mechanisms which we now describe. The
ﬁrst practical Rowhammer attack relied on operating system
interfaces (e.g., /proc/pid/pagemap in Linux) to perform
virtual-to-physical address translation for user processes [55].
Later attacks leveraged huge pages, which give access to
large chunks of consecutive physical memory [19], thereby
providing sufﬁcient information about the physical addresses
to mount an attack. Other attacks utilized memory grooming or
massaging techniques [61], which prepare memory allocators
such that the target page is placed at the attacker-chosen phys-
ical memory location with a high probability. An alternative
approach is exploiting memory deduplication [7, 51], which
merges physical pages with the same contents. The attacker
then hammers its shared read-only page, which is mapped to
the same physical memory location as the target page.
However, many of these mechanisms are no longer available
for security reasons [42, 52, 57, 61]. Thus, as a secondary
contribution of this paper, we present a new approach for
massaging memory to achieve the desired placement. Our
approach builds on past works that exploit the Linux buddy
allocator to allocate blocks of consecutive physical mem-
ory [11, 61]. We extend these works by demonstrating how
an attacker can acquire some physical address bits from the
allocated memory. We further show how to place secret-
containing pages at desired locations in the physical memory.
Finally, we note that this method may have independent
value for mounting Prime+Probe last-level cache attacks [40].
This is since it allows the attacker to deduce physical addresses
of memory regions, thereby aiding eviction set construction.
Extracting Cryptographic Keys.
To demonstrate the
effectiveness of RAMBleed, we use it to leak secrets across
process boundaries. Speciﬁcally, we use RAMBleed against
an OpenSSH 7.9 server (newest version at
time of writ-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:51 UTC from IEEE Xplore.  Restrictions apply. 
696
ing), and successfully read the bits of an RSA-2048 key
at a rate of 0.3 bits per second, with 82% accuracy. We
combine the attack with a variant of the Heninger-Shacham
algorithm [23, 24, 46] designed to recover RSA keys from
partial information, achieving complete key recovery.
Summary of Contributions.
following contributions:
• We demonstrate the ﬁrst Rowhammer attack that breaches
In this paper we make the
conﬁdentiality, rather than integrity (Section IV).
• We abuse the Linux buddy allocator to allocate a large block
of consecutive physical addresses, and show how to recover
some of the physical address bits (Section V-A).
• We design a new mechanism, which we call Frame Feng
Shui, for placing victim program pages at a desired location
in the physical memory (Section V-C).
• We demonstrate a Rowhammer-based attack that leaks keys
from OpenSSH while only ﬂipping bits in memory locations
the attacker is allowed to modify (Section VII).
• Finally, we demonstrate RAMBleed against ECC memory,
highlighting security implications of successfully-corrected
Rowhammer-induced bit ﬂips (Section VIII).
B. Responsible Disclosure
Following the practice of responsible disclosure, we have
notiﬁed Intel, AMD, OpenSSH, Microsoft, Apple, and Red
Hat about our ﬁndings. The results contained in this paper (and
in particular our memory massaging technique) were assigned
CVE-2019-0174 by Intel.
C. Related Works
Security Implications of Rowhammer.
The potential for
sporadic bit ﬂips was well known in the DRAM manufacturing
industry, but was considered a reliability issue rather than a
security threat. Kim et al. [34] were the ﬁrst to demonstrate a
reliable method for inducing bit ﬂips by repeatedly accessing
pairs of rows in the same bank. Subsequently, Seaborn and
Dullien [55] showed that Rowhammer is a security concern
by using Rowhammer-induced ﬂips to break out of Chrome’s
Native Client sandbox [67] and obtain root privileges.
Since the initial Rowhammer-based exploit of [55], re-
searchers have demonstrated numerous other avenues for
Rowhammer exploitation. Gruss et al. [19] demonstrated