        String body = WebUtils.getRequestBody(request);
        logger.info(body);
        Digester digester = new Digester();
        digester.parse(new StringReader(body));  // parse xml
    } catch (Exception e) {
        logger.error(e.toString());
        return EXCEPT;
    }
修复代码：
    try {
        String body = WebUtils.getRequestBody(request);
        logger.info(body);
        Digester digester = new Digester();
         // fix code start
        digester.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        digester.setFeature("http://xml.org/sax/features/external-general-entities", false);
        digester.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
         // fix code end
        digester.parse(new StringReader(body));  // parse xml
        return "Digester xxe security code";
    } catch (Exception e) {
        logger.error(e.toString());
        return EXCEPT;
    }
**DocumentBuilderFactory**
**代码1：**
    try {
        String body = WebUtils.getRequestBody(request);
        logger.info(body);
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        StringReader sr = new StringReader(body);
        InputSource is = new InputSource(sr);
        Document document = db.parse(is);  // parse xml
        // 遍历xml节点name和value
        StringBuilder buf = new StringBuilder();
        NodeList rootNodeList = document.getChildNodes();
        for (int i = 0; i < rootNodeList.getLength(); i++) {
            Node rootNode = rootNodeList.item(i);
            NodeList child = rootNode.getChildNodes();
            for (int j = 0; j < child.getLength(); j++) {
                Node node = child.item(j);
                buf.append(String.format("%s: %s\n", node.getNodeName(), node.getTextContent()));
            }
        }
        sr.close();
        return buf.toString();
    } catch (Exception e) {
        logger.error(e.toString());
        return EXCEPT;
    }
**代码2：**
    try {
        String body = WebUtils.getRequestBody(request);
        logger.info(body);
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        StringReader sr = new StringReader(body);
        InputSource is = new InputSource(sr);
        Document document = db.parse(is);  // parse xml
        // 遍历xml节点name和value
        StringBuilder result = new StringBuilder();
        NodeList rootNodeList = document.getChildNodes();
        for (int i = 0; i < rootNodeList.getLength(); i++) {
            Node rootNode = rootNodeList.item(i);
            NodeList child = rootNode.getChildNodes();
            for (int j = 0; j < child.getLength(); j++) {
                Node node = child.item(j);
                // 正常解析XML，需要判断是否是ELEMENT_NODE类型。否则会出现多余的的节点。
                if (child.item(j).getNodeType() == Node.ELEMENT_NODE) {
                    result.append(String.format("%s: %s\n", node.getNodeName(), node.getFirstChild()));
                }
            }
        }
        sr.close();
        return result.toString();
    } catch (Exception e) {
        logger.error(e.toString());
        return EXCEPT;
    }
**修复代码：**
    try {
        String body = WebUtils.getRequestBody(request);
        logger.info(body);
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        dbf.setFeature("http://xml.org/sax/features/external-general-entities", false);
        dbf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        DocumentBuilder db = dbf.newDocumentBuilder();
        StringReader sr = new StringReader(body);
        InputSource is = new InputSource(sr);
        db.parse(is);  // parse xml
        sr.close();
    } catch (Exception e) {
        logger.error(e.toString());
        return EXCEPT;
    }
**代码3，支持XInclude：**
**何为XInclude**
Xinclude即为XML
Include，其实就是文件包含，其作用很大时候可以使得代码更加简洁，当需要使用其中的内容的时候再把文件包含进来，可以参考php的include
    try {
        String body = WebUtils.getRequestBody(request);
        logger.info(body);
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setXIncludeAware(true);   // 支持XInclude
        dbf.setNamespaceAware(true);  // 支持XInclude
        DocumentBuilder db = dbf.newDocumentBuilder();
        StringReader sr = new StringReader(body);
        InputSource is = new InputSource(sr);
        Document document = db.parse(is);  // parse xml
        NodeList rootNodeList = document.getChildNodes();
        response(rootNodeList);
        sr.close();
        return "DocumentBuilder xinclude xxe vuln code";
    } catch (Exception e) {
        logger.error(e.toString());
        return EXCEPT;
    }
修复代码;
    try {
        String body = WebUtils.getRequestBody(request);
        logger.info(body);
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setXIncludeAware(true);   // 支持XInclude
        dbf.setNamespaceAware(true);  // 支持XInclude
        dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        dbf.setFeature("http://xml.org/sax/features/external-general-entities", false);
        dbf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        DocumentBuilder db = dbf.newDocumentBuilder();
        StringReader sr = new StringReader(body);
        InputSource is = new InputSource(sr);
        Document document = db.parse(is);  // parse xml
        NodeList rootNodeList = document.getChildNodes();
        response(rootNodeList);
        sr.close();
    } catch (Exception e) {
        logger.error(e.toString());
        return EXCEPT;
    }
**XMLReader &SAXParserFactory**
    try {
        String body = WebUtils.getRequestBody(request);
        logger.info(body);
        SAXParserFactory spf = SAXParserFactory.newInstance();
        SAXParser saxParser = spf.newSAXParser();
        XMLReader xmlReader = saxParser.getXMLReader();
        xmlReader.parse(new InputSource(new StringReader(body)));
    } catch (Exception e) {
        logger.error(e.toString());
        return EXCEPT;
    }
修复代码：
    try {
        String body = WebUtils.getRequestBody(request);
        logger.info(body);
        SAXParserFactory spf = SAXParserFactory.newInstance();
        SAXParser saxParser = spf.newSAXParser();
        XMLReader xmlReader = saxParser.getXMLReader();
        xmlReader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        xmlReader.setFeature("http://xml.org/sax/features/external-general-entities", false);
        xmlReader.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        xmlReader.parse(new InputSource(new StringReader(body)));
    } catch (Exception e) {
        logger.error(e.toString());
        return EXCEPT;
    }
**DocumentHelper**
    try {
        String body = WebUtils.getRequestBody(req);
        DocumentHelper.parseText(body); // parse xml
    } catch (Exception e) {
        logger.error(e.toString());
        return EXCEPT;
    }
修复该漏洞只需升级dom4j到2.1.1及以上，该版本及以上禁用了ENTITY；
不带ENTITY的PoC不能利用，所以禁用ENTITY即可完成修复。
参考文章&代码：
[JoyChou93/java-sec-code: Java web common vulnerabilities and security code
which is base on springboot and spring security
(github.com)](https://github.com/JoyChou93/java-sec-code%22%20/h)
《网络安全java代码审计》
[Java XXE测试用例详解
(qq.com)](https://mp.weixin.qq.com/s/B3ToaH8D7WfZYhIN2xrTDA%22%20/h)
[XXE漏洞原理以及防御方式 - Ruilin (rui0.cn)](http://rui0.cn/archives/993%22%20/h)