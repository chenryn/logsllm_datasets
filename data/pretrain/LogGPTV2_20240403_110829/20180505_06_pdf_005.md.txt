Migrations to PostgreSQL
(from Oracle)
I am : Venkata B Nagothi
A PostgreSQL consultant for the past 6+ years
Why migrate to PostgreSQL ?
• Cost-effective and feature-rich open-source database
• PostgreSQL Community
• Integration capabilities
• Can replace any commercial database
• Cloud adoption
Migration process - overview
Preliminary
Migration Analysis
Perform
Migration
Functionality
Testing
Performance
Testing
Preliminary Migration Analysis
Database Environment
Application Environment
Evaluate Application
Evaluate Database
Schema
Source Code
Infrastructure
Application
Architecture
Data
Preliminary Migration Analysis
Major roadblocks for migration
• Heavy PL/SQL usage
• Heavy usage of Large Objects
• Propriety application with its own schema
• Application compatibility issues
• No application source code
Evaluate database migration effort
• Amount of manual migration effort needed
Evaluate application migration effort
• This is critical as the Application code is change is mostly manual
Migration challenges
Database Design / Architecture challenges
High Availability challenges
Development Challenges
Data Migration challenges
Database Design / Architectural challenges
Database Design / Architecture
Transaction Log Files
• Database will hang if
the pg_xlog Disk
space is full
• Each WAL file size is
Oracle PostgreSQL
16 MB
• No multiplexing
Redo Log Files (Multiplexing) WAL Files (No Multiplexing)
• No hard limit on the
number of files
$PGDATA/pg_xlog
• I/O balancing is
Group 1 Group 2
needed
00000001000000010000007B
/disk1 redo1a redo2a 000000010000000100000077
000000010000000100000078
/disk2 redo1b redo2b 000000010000000100000072
000000010000000100000079
Database Design / Architecture
Archived Log files
Compression
Oracle PostgreSQL needed
Redo Log Files WAL Files
$PGDATA/pg_xlog
Group 1
00000001000000010000007B (16
MB)
redo 1a 500 MB 000000010000000100000077 (16
MB)
WAL Archived File
Archived Log File
000000010000000100000077 (16 MB)
redo_100.arc (1 MB)
Database Design / Architecture
Data files
• Storage is Directory
Bound
• Data files are auto
generated
• DBA has no control
Oracle PostgreSQL
over data file
management
Data Files Data Files
(directory)
/disk1/datafile1
13157_fsm 13172_fsm 13189
/disk2/datafile2 13157_vm 13172_vm 13191
13159 13174 1417
/disk3/datafile3
13161 13176 1417_vm
/disk4/datafile4
13162 13177 1418
Database Design / Architecture
Data File structure I/O Balancing is a
challenge
Table-1 = 30 GB
Table-2 = 10 GB
PostgreSQL
Oracle
Tablespace-1 Tablespace
Tablespace
Table-1
Table-1 Table-2
Table-1, Table-2
/disk1/tbs01 30GB
RAID
/disk1/datafile1 10GB
Tablespace-2 /disk1
/disk2/datafile2 10GB
(OR)
/disk2
/disk3/datafile3 10GB Table-2 /data/tbs
/disk3
/disk4/datafile4 10GB
/disk4
/disk2/tbs02 10GB
Database Design / Architecture
Control File
Oracle PostgreSQL
• Loosing
pg_control file
will result in
incomplete
recovery
Control File (Multiplexing) pg_control file ( No Multiplexing)
/disk1/oradata/control01.ctl $PGDATA/global/pg_control
/disk2/oradata/control02.ctl
Database Design / Architecture
bg-writer
Oracle
PostgreSQL
It would be good to have
Database Buffer Cache Shared Buffers multiple bg-writers for
better write performance
and scalability in an high-
transaction multi-CPU
environment
bgwriter
DBWR 1 DBWR 2 DBWR 3
Data files Data files
High Availability challenges
High Availability
Oracle PostgreSQL
Dataguard Streaming Replication
Migration Impact (Streaming Replication)
• More simpler to implement
• Supports all the protection modes in Oracle
• Supports cascading replication with some limitations
High Availability
Role reversal (for disaster recovery) – Limitations in PostgreSQL
Standby can be
promoted to
Standalone
after the master
Standby is shutdown
Master
(new master)
Streaming Replication
Limitation
Old master can
be made standby.
Role reversal cannot be
performed without an
Outage to the master.
High Availability
PostgreSQL Streaming Replication – Limitations
 Standby can be built on a different filesystem using pg_basebackup
Master Standby
/data/tbs01 Streaming Replication /disk2/tbs01
v
/data/tbs02 /disk2/tbs02
/data/tbs03 /disk2/tbs03
Create Tablespace..
Location “/data/tbs04”…
Development challenges
(database)
Database migration
ora2pg
ora2pg is the most open-source tool used for migrating the Oracle database to
PostgreSQL.
Database migration time and cost can be evaluated by identifying the manual
migration effort needed
Database migration can be in three phases
Schema migration
PL/SQL migration
Data migration
Database migration
Schema Migration
 Most of the Schema migration can be done automatically using ora2pg.
 The Oracle database objects not supported by PostgreSQL must be identified and
must be migrated manually.
Database migration
Schema Migration
Unsupported Object PostgreSQL Alternative solution
Materialized Views Auto refresh and query re-writing is not supported
Index-Organized-Tables This requirement can be partially fulfilled by Clustering a Table.
Public Synonyms Public Synonyms are not supported in PostgreSQL. “search_path” can be used as an alternative
Global Temporary Tables There is no support for Global Temporary Tables. Unlogged Tables can be used instead.
Partitioned tables Partitioned Tables in PostgreSQL are not quite similar to Oracle style partitioning and cannot be
used as an alternative.
• Child tables are more like individual tables
• Constraints are not inherited to child tables
• No support for Global and Local indexes
Database migration
PL/SQL Migration
Ora2pg partially migrated PL/SQL objects
As PostgreSQL does not support objects like Packages, most of the PL/SQL objects
must be migrated manually
Database migration
PL/SQL Migration
Unsupported PL/SQL Alternative PostgreSQL Solution
Object
Packages Packages are unsupported in PostgreSQL.
DBMS* Packages Some of the DBMS packages are supported by orafce external contrib
module. The unsupported packages cannot be migrated. A custom
function must be built if required.
PACKAGES PostgreSQL Alternative
• Application functionality testing is
PACKAGE DEFINITION SCHEMA must be used as an alternative critical and can poses challenges
for Package definitions • Reaching the expected Performance
benchmark can be a challenge too.
GLOBAL VARIABLES TEMP TABLES must be used as an
• There could be a need to re-write the
alternative for GLOBAL VARIABLES
whole business logic to full fill the
PACKAGE BODY Package Body must be converted to
application requirements.
FUNCTION(S)
Database migration
PL/SQL Cursors
PostgreSQL Cursors Limitations
ROWCOUNT attribute is not supported MOVE LAST must be used to fetch the count of the rows in
a cursor. This could be a significant performance penalty
when cursor has millions of rows.
Cursor position
1
2
3
4 Cursor position must be moved to last row of the
5 >‘value' FROM table;
SELECT UTL_RAW.CAST_TO_VARCHAR2
Migration Impact
• BLOB migration to JSONB cannot be done directly and no ETL can make this
possible
• Can result in an heavy Application design and code change
• Migration effort and time can be a challenge
• Heavy development can be on the cards
Database migration
Migrating JSON Data
Oracle PostgreSQL
AUTOMATIC (Ora2pg)
CLOB with JSON data TEXT
Manual
PostgreSQL
JSONB
Migration Impact
• Can result in an heavy Application design and code change
• Migration effort and time can be a challenge
Development challenges
(Migrating Oracle SQLs for Application)
SQLs Migration for application
 Application migration is the most critical and challenge episode of
whole migration project
 Migration SQLs in the Application source code is very critical and can
take up majority of the migration time.
 Application source code must be analysed to identify the SQLs that
needs to be changed which is not an straight forward way
unfortunately.
 A single SQL syntax change can trigger a change at hundreds of
places in the application source code files
SQLs Migration for application
Hierarchical queries
Oracle PostgreSQL
CONNECTBY • WITH RECURSIVE is a straight alternative for migrating
START WITH Hierarchical queries
SYS_CONNECT_BY_PATH • Depending on the complexity of the query logic, connectby()
CONNECT_BY_ROOT function part of tablefunc contrib module can be of use
• pl-pgsql functions is another alternative if the Hierarchical
queries cannot be converted using WITH RECURSIVE alone
SQLs Migration for application
PostgreSQL
Oracle JDBC Driver
JDBC Driver
Migration Impact
AUTOCOMMIT OFF
• Application behaviour is different inautocommit offmode
• Multiple transactions will be automatically part of a transaction block, which means COMMIT ALL or
NONE
• Heavy application code change may be required
• Functionality testing
• Performance testing
• Changing legacy code might impose further more challenges
SQLs Migration for application
 Implicit type casting can be highly beneficial and can help reduced the need
to change the application code to a greater extent
 Increases the possibility usage of Indexes
 Avoids the need to create function-based Indexes
Table PostgreSQL
varchar varchar select * from table where col1::int > 2;
2 Sydney
create cast(varchar as integer) with inout as implicit;
3 London
select * from table where col1 > 2;
4 Singapore
3 London
Oracle
4 Singapore
select * from table where col1 > 2;
3 London
4 Singapore
Questions ?