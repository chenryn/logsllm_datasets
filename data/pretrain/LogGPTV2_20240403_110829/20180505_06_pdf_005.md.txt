# Migrations to PostgreSQL (from Oracle)

## Introduction
My name is Venkata B Nagothi, and I have been a PostgreSQL consultant for over 6 years. In this document, I will provide an overview of the migration process from Oracle to PostgreSQL, highlighting the reasons for migrating, the steps involved, and the challenges that may arise.

## Why Migrate to PostgreSQL?
- **Cost-Effective and Feature-Rich Open-Source Database**: PostgreSQL offers a robust set of features at a lower cost compared to commercial databases.
- **Active Community Support**: A vibrant community contributes to continuous improvements and provides support.
- **Integration Capabilities**: PostgreSQL integrates well with various tools and technologies.
- **Commercial Database Replacement**: It can replace any commercial database, including Oracle.
- **Cloud Adoption**: PostgreSQL is widely supported in cloud environments, making it a preferred choice for cloud migrations.

## Migration Process Overview
1. **Preliminary Analysis**
2. **Migration Execution**
3. **Functionality Testing**
4. **Performance Testing**

### Preliminary Migration Analysis
#### Database Environment
- **Evaluate Database Schema**
- **Evaluate Data Files**
- **Evaluate Transaction Log Files**
- **Evaluate Control File**
- **Evaluate Background Writer (bg-writer)**

#### Application Environment
- **Evaluate Application Architecture**
- **Evaluate Source Code**
- **Evaluate Infrastructure**

### Major Roadblocks for Migration
- **Heavy PL/SQL Usage**
- **Heavy Usage of Large Objects**
- **Proprietary Applications with Custom Schemas**
- **Application Compatibility Issues**
- **Lack of Application Source Code**

### Evaluate Migration Effort
- **Database Migration Effort**: Assess the amount of manual effort required.
- **Application Migration Effort**: This is critical as most application code changes are manual.

## Migration Challenges
### Database Design and Architecture
- **Transaction Log Files**:
  - **Oracle**: Redo Log Files (Multiplexing)
  - **PostgreSQL**: Write-Ahead Log (WAL) Files (No Multiplexing)
  - **Challenges**: Disk space management and I/O balancing.
- **Archived Log Files**:
  - **Oracle**: Redo Log Files
  - **PostgreSQL**: WAL Archived Files
  - **Challenges**: Compression and storage management.
- **Data Files**:
  - **Oracle**: DBA-managed data files
  - **PostgreSQL**: Auto-generated data files
  - **Challenges**: Directory-bound storage and lack of DBA control.
- **Control File**:
  - **Oracle**: Multiplexed Control Files
  - **PostgreSQL**: Single `pg_control` file
  - **Challenges**: Recovery issues if `pg_control` file is lost.
- **Background Writer (bg-writer)**:
  - **Oracle**: Multiple DBWR processes
  - **PostgreSQL**: Single bgwriter process
  - **Challenges**: Performance and scalability in high-transaction environments.

### High Availability
- **Oracle**: Data Guard
- **PostgreSQL**: Streaming Replication
- **Challenges**:
  - Role reversal limitations in PostgreSQL.
  - Standby promotion and master shutdown.
  - Cascading replication with some limitations.

### Development Challenges
- **Database Migration**:
  - **Tool**: `ora2pg`
  - **Phases**:
    - **Schema Migration**: Most can be automated, but unsupported objects must be manually migrated.
    - **PL/SQL Migration**: Partially automated, but most PL/SQL objects require manual migration.
    - **Data Migration**: Automated with `ora2pg`.

### SQLs Migration for Application
- **Hierarchical Queries**:
  - **Oracle**: `CONNECT BY`, `START WITH`, `SYS_CONNECT_BY_PATH`
  - **PostgreSQL**: `WITH RECURSIVE`, `tablefunc` module, pl-pgsql functions
- **JDBC Driver**:
  - **Autocommit Behavior**: Differences in autocommit behavior between Oracle and PostgreSQL.
  - **Type Casting**: Implicit type casting in PostgreSQL can reduce the need for application code changes.

### Migration Impact
- **BLOB to JSONB**: Direct migration is not possible, requiring significant application design and code changes.
- **JSON Data**:
  - **Oracle**: CLOB with JSON data
  - **PostgreSQL**: TEXT or JSONB
  - **Challenges**: Heavy application design and code changes.

## Conclusion
Migrating from Oracle to PostgreSQL involves several steps and challenges. By carefully planning and addressing these challenges, organizations can successfully transition to a more cost-effective and feature-rich database solution.

## Questions?
Feel free to ask any questions or seek further clarification on any aspect of the migration process.