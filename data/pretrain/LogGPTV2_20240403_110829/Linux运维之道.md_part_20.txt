2.多行操作Print
fff
eee
ddd
CCC
bbb
aaa
[root@centos6~]#cat test.txt
222\n333$
222\n222$
[root@centos6 ~]# sed -f sed.sh test.txt
/222/
#n
[root@centos6~]#cat sed.sh
。
#
cccddd
aaabbb
sed'/.*/N;L'test.txt
fff
，它与打印p稍有不同，前者仅输出多行模式空间中的第一部分，
9
sed"/N;P'test.txt
aaa
#运行脚本结果如下
sedV*N;ptest.txt
---
## Page 151
到模式空间，有一组Sed命令用于在两者之间移动数据。
（hold space）的缓冲区。模式空间的内容可以复制到保持空间，保持空间的内容同样可以复制
读入新的输入行，并返回sed脚本的顶端，使得剩余指令继续应用于模式空间中剩余的内容。
而多行删除指令D 将删除模式空间中直到第一个插入的换行符（\n）前的这部分内容，它不会
指令后还有多条指令，则余下的指令将不再执行，而是返回第一条指令对新读入行进行处理。
印出来的是 aaa回车 bbb。
加至行尾，P打印\n前的内容，同时sed命令也将自动输出。
能输出 aaa，bbb（sed 自动输出会将\n 输出为换行）。依此类推，读取第三行ccc，N将 ddd 追
令的作用是打印模式空间中的第一部分内容直到n结尾，即仅打印aaa，这时sed的自动输出功
动输出后再把源文件内容显示出来。
ccc，并使用N将 ddd 追加至行尾，使用L显示模式空间的内容（不显示非打印字符），sed 自
第四个 sed 命令的原理类似于第三个 sed 命令，但 p 打印时，In 看作是回车换行，所以打
命令的自动输出功能会把源文件内容显示出来，即aaa，bbb。依此类推，sed 继续读取第三行
读取下一行后没有任何后续指令，所以 sed自动输出，即输出源文件的所有内容。
第三个 sed命令使用N将下一行追加至行尾，现在模式空间中的内容为 aaa\nbbb，而P指
第二个 sed命令使用了N读取下一行，L表示显示模式空间的内容，即 aaa bbb，同时 sed
Hold(h|H)
我们知道，模式空间是存放当前输入行的缓冲区。除此之外，Sed还有一个称为保持空间
Get(glG)
4.Hold （h,H), Get(g,G)
d指令为删除命令，其作用是删除模式空间中的内容并读入新的输入行，而如果sed在d
保留空间范例所使用的样本文件如下：
Exchange(x)
3.多行删除操作Delete（D）
bbb
[root@centos6~]#cattest.txt
第一个 sed 命令使用了 N读取下一行，新读取的内容与原有内容直接使用in 分隔。但 sed
aaa
交换保持空间与模式空间的内容
将保持空间的内容复制或追加到模式空间
将模式空间的内容复制或追加到保持空间
第3章
自动化运维
135
---
## Page 152
即默认处理动作是print 打印行；如果没有指定模式匹配，则默认匹配所有的数据。
处理过程，否则对该行不做任何处理。如果没有指定处理脚本，则把匹配的行显示到标准输出，
这些行上进行用户想要的操作。Awk基本结构由模式匹配和处理过程（即处理动作）组成。
6.3系统自带的 gawk 作为讲解工具。
为代表使用的是mawk。gawk是GNU Project 的awk解释器的开源代码实现。本书将以CentOS
中常用的 awk 编译器版本有 mawk、gawk，其中以 RedHat 为代表使用的是 gawk，以Ubuntu
分别是Alfred Aho、Peter Weinberger、BrianKermighan。实际上，awk有很多种版本，如：awk、
自标准输入、文件、管道。Awk分别代表其作者姓氏的第一个字母，因为它的作者是三个人，
3.8
Linux运维之道
3.8.2Awk工作流程
3.8.1Awk简介
136
Awk读取文件内容的每一行时，将对比该行是否与给定的模式相匹配，如果匹配，则执行
pattern{action}
Awk的工作流程是：逐行扫描文件，从第一行到最后一行，寻找匹配特定模式的行，并在
Awk是一种编程语言，
ddd
aaa
CCC
bbb
[root@centos6~]# sed -f sed.sh test.txt
G
/ccc/1
Q
5
/aaa/1
[root@centos6~]#cat
Awk
，用于在Linux/UNIX下对文本和数据进行扫描与处理，数据可以来
sed.sh
---
## Page 153
后面的动作指令，最后执行END 模式命令，并输出文档处理后的结果。
指令将被执行，然后读取文件内容并判断是否与特定的模式匹配，如果匹配，则执行正常模式
有的数据读取完成以后执行。
3.8.3
图3-2展示了Awk工作的整体流程，从图中可以看出，在读取文件内容前，BEGIN后面的
输出简短的GNU版权信息。
-W copyleft,-W copyright,--copyleft,--copyright
使用兼容模式运行Awk，GNU扩展选项将被忽略。
从脚本文件中读取Awk指令，以取代在命令参数中输入处理脚本。
在执行处理过程以前，设置一个变量var值为val。
指定以fs作为输入行的分隔符（默认分隔符为空格或制表符)。
@ -F fs, --field-separator fs
选项如下：
gawk [选项] -f program-file [ --] file ..
Awk的基本语法格式如下：
Awk有两个特殊的模式：
-V var=val,--assign var=val
Awk基本语法格式
am
：BEGIN和END，它们被放置在没有读取任何数据之前以及在所
逐行读取文档每一行
Awk工作流程图
图3-2
个
模式
BEGIN
END
动作指令
动作指令
动作指令
1
输出
第3章
自动化运维
137
---
## Page 154
储在$1,S2,,SNF中（默认使用空格或制表符为分隔符)。内建变量NF为记录的字段个数。
awk将在屏幕打印N个Blankline。
引起来。
可以是BEGIN、END、表达式，用来限定操作对象的多个表达式使用逗号分隔；动作指令需要以
dump-variables的文件中。
Linux运维之道
3.8.4Awk操作指令
138
读取输入行并输出第一个字段、第二个字段、第三个字段。
示例：
Awk一次从文件中读取一条记录，并将记录存储在字段变量$O中。记录被分割为字段并存
（1）通过正则表达式/^$/匹配空白行，动作为打印 Blank line，即文件如果有N个空白行，
简单示例：
awk程序的语法结构是：
1．记录与字段
（3）提前编辑一个awk脚本，再通过-f选项调用该脚本。
[root@centos6~]#awk'/HosTNAME/'/etc/sysconfig/network
（2）打印包含主机名的行，没有指定动作指令，默认动作为打印。
x) .  #9]
显示各个选项的简短描述。
类似于-f选项，但脚本文件需要以#!开头。另外，命令行的变量将不再生效。
示例如下：
打印全局变量（变量名、类型、值）到文件中，如果没有提供文件名，则自动输出至名为
[root@centos6~]# awk -f awk.sh test.txt
[root@centos6 ~]# cat awk.sh
-W exec file，
x xx#]
-W dump-variables[=file],--dump-variables[=file]
iprint
--exec file
Iinel
一个awk程序包含一系列的模式{动作指令}或是函数定义，模式
---
## Page 155
ORS
OFS
NR
FILENAME
表3-11
第一行前，就需要改变字段分隔符。
的第一个字段（账号名称)。如果使用FS 改变分隔符，需要在BEGIN处定义FS，因为在读取
来改变分隔符。
FNR
ARGC
表3-11为Awk内置变量列表。
3.内置变量
进阶：指定多个字段分隔符(文档内容为：hellothe:word,!)
注意，以上两个示例均将字段的分隔符改为冒号（：)，即以冒号为分隔符打印passwd文件
默认Awk读取数据以空格或制表符作为分隔符，但可以通过-F或FS（field separator）变量
[root@centos6 ~]# echo ‘hello the:word,!| awk BEGIN {Fs="[:, ]"} {print $1,$2,$3,$4)
[root@centos6
2.字段分隔符
[root@centos6
[root@centos6~]#echohello the worldlawk
读取输入行并输出该行最后一个字段。
[root@centos6~]#echohello the worldIawk
读取输入行并输出该行的字段个数。
[root@centos6~]#echohello the worldIawk
读取输入行并输出该行。
[root@centos6~]#echohello the world1awk
变量名称
]#aWk'BEGIN (FS=
~]#awk-F:(print$1}'
输入记录分隔符，默认为换行符in
输出记录分隔符，默认为换行符Vn
输出字段分隔符，默认为空格
字段分隔符
当前记录的字段个数
输入流的当前记录编号
当前输入文档的当前记录编号，尤其是当有多个输入文档时有用
当前输入文档的名称
命令行参数个数
":"}(print $1}'
/etc/passwd
描述
(print NF}
'{print $NF}
'(print
/etc/passwd
os
第3章自动化运维
139
---
## Page 156
说明
分隔符为"-"，结果如下：
Linux运维之道
140
mailfrom:PI:EMAIL
下面通过OFS 将输出分隔符设置为"-"，这个 print 在输出第一、二、三个字段时，中间的
Welcome to Jacob's
This isa
默认print输出时，各参数将输出分隔符默认为空格，所以输出内容如下：
Welcome-to-Jacob's
This-is-a
[root@centos6~]# awk
#文档的第一行有5个字段，第二行有4个字段
[root@centos6~]# awk '{print NR}' test1.txt test2.txt
Awk将两个文档作为一个整体的输入流，通过NR输入当前行编号：
[root@centos6 ~]# cat test3.txt
[root@centos6~]# awk(print NF}' testl.txt
[root@centos6~]# awk'(print FNR}' test1.txt test2.txt
输出当前文档的当前行编号，第一个文件两行，第二个文件三行：
[root@centos6
Ask for more.
Wow!I'm overwhelmed.
Hellothewrold.
[root@centos6~]# cat test2.txt
Welcometo Jacob'sClass.
This is a test file.
[root@centos6~]#cat test1.txt
示例：
~]#awk
)=SN
testl.txt
/etc/passwd
---
## Page 157
住需要加引号。
量。如果在Awk中定义的变量没有初始化，则初始值为空字串或0。注意，字符操作时一定记
记录中字段分隔符为换行符：
变量定义示例：
读取输入数据，以空白行为记录分隔符，即第一个空白行前的内容为第一个记录，第一个
十
十
操作符（awk操作符与C语言类似）如下。
b=12
a="welcome to beijing"
表达式由变量、常量、函数、正则表达式、操作符组成，Awk中变量有字符变量和数字变
4.表达式与操作符
以上Awk实现打印所有的邮件时间，即每个记录的第三个字段。
[root@centos6~]# awk 'BEGIN {FS="\n";RS=""} {print $3}'test3.txt
content:Thisisatestmail
mail from:PI:EMAIL
content:Congregation to you.
data:2012-07-12 08:31
mailfrom:PI:EMAIL
content:Hello, The world.
data:2012-07-12 17:00
subject:hello
相加后赋值给变量(x+=9等同于x=x+9)
自减1
自加1
幂运算
取余
除
乘
减
第3章自动化运维
---
## Page 158
Linux运维之道
3.8.5Awk高级应用
142
如果表达式的判断结果为真，则执行动作1，否则执行动作2。
if（表达式）动作1；else动作2
If语法格式2：
动作2
else
动作1
if（表达式）
If语法格式1：
1.IF条件判断
[root@centos6
操作符简单示例：
&&
[root@centos6
[root@centos6
root@centos6
root@centos6
root@centos6
>=
V
V
Ⅱ
成
与
不匹配
匹配
不等于
等于
小于或等于
大于或等于
小于
大于
相除后赋值给变量(x/=9等同于x=x/9)
相乘后赋值给变量(x*=9等同于x=x*9)
相减后赋值给变量(x-=9等同于x=x-9)
5~]#echo"test"
~]#echo"test"
awk
x=2{printx+3}
test.txt
#列出计算机中ID号大于500的用户名
/etc/passwd
#统计所有的空白行
---
## Page 159
将BEGIN代码执行完毕，所以输入文档可以为任意文档。
print"oK"}'
因为以上循环语句使用的awk均使用BEGIN模式，
[root@centos6 ~]# awk
[root@centos6~]# awk
示例：
for(变量；条件；计数器)
3.for循环
示例：
while (条件)
动
do
While语法格式2：
[root@centos6~]# awk'i=1 {) BEGIN{while (i<=10) (++i; print i)}' test.txt
示例：