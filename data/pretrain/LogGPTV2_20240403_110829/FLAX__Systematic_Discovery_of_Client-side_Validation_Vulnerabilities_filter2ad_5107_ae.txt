permitted by browser’s same-origin policy because the at-
tacker’s payload and the gadget’s iframe principal are the
same.
We point out that Google/IG is designed such that each
iGoogle gadget runs as a separate security principal hosted
at a subdomain of http://gmodules.com. This mitigation
prevents an attacker who compromises a gadget from hav-
Figure 11. A gadget overwriting attack layered on a CSV vulnerability. The user clicks on an untrusted
link which shows the iGoogle web page with an overwritten iGoogle gadget. The URL bar continues
to point to the iGoogle web page.
ing any access to the sensitive data of the google.com do-
main. In the past, Barth et al. described a related attack,
called a gadget hijacking attack, which allows attackers6 to
steal sensitive data by navigating the gadget frame to a mali-
cious site [7]. Barth et al. proposed new browser frame nav-
igation policies to prevent these attacks. Gadget overwrit-
ing attacks resulting from CSV vulnerabilities in vulnerable
gadgets can also allow attacker to achieve the same attack
objectives as those remedied by the defenses proposed by
Barth et al. [7].
Cookie-sink Vulnerabilities. FLAX reported a cookie cor-
ruption vulnerability in one of AskAWord iGoogle gad-
gets which provide the AskAWord.com dictionary and spell
checker service. FLAX reported that the cookie data could
be corrupted with arbitrary data and additional cookie at-
tributes could be injected, which is a low severity vulnera-
bility. However, on further analysis, we found that the gad-
get used the cookie to store the user’s history of previous
searches which was echoed back on the server’s HTML re-
6A gadget attacker described by Barth et al. requires the privilege that
the integrator embeds a gadget of the attacker choice, which is different
from the attacker model in a gadget overwriting attack
sponse without any client-side or server-side validation. We
subsequently informed the developers about the cookie at-
tribute injection and the reﬂected XSS vulnerability through
the cookie channel, and the developers patched the vulner-
ability on the same day.
Application Command Injection. One vulnerability re-
ported by FLAX for AjaxIM chat application indicated that
such bugs can result in practice. FLAX reported that un-
trusted data from an input text box could be used to inject
application commands. AjaxIM uses untrusted data to con-
struct a URL that directs application-speciﬁc commands to
its backend server using XMLHttpRequest. These com-
mands include adding/deleting chat rooms, adding/deleting
friends and changing the user’s proﬁles.
FLAX dis-
covered a vulnerability where an unsanitized input from
an input-box is used to construct the URL that sends a
GET request command to join a chat room. An attacker
can exploit this vulnerability by injecting new parame-
ters (key-value pairs) to the URL. A benign command re-
quest URL to join a chat room named ‘friends’ in AjaxIM
is of the form ajaxim.php?call=joinroom&room=friends.
We conﬁrmed that by providing a room name as
‘friends&call=addbuddy&buddy=evil’ results in overrid-
ing the value of the call command from ‘joinroom’ to a
command that adds an untrusted user (called “evil”) to the
victim’s friend list.
The severity of this vulnerability is very limited as it does
not allow a remote attacker to exploit the bug without addi-
tional social engineering. However, we informed the devel-
opers and they acknowledged the concern agreeing to ﬁx
the vulnerability.
6 Related Work
CSV vulnerabilities constitute attack categories that have
similar counterparts in server-side application logic — this
has driven a majority of the research on web vulnerabilities
to analysis of server-side logic written in languages such
as PHP. First, we discuss the techniques employed in these
and compare it our taint enhanced blackbox fuzzing. Next,
we compare the beneﬁts of our approach with purely taint-
based analysis approaches, and other semi-random testing
based approaches. Finally, we discuss the recent frame-
works proposed for analysis of JavaScript applications.
Server-side vulnerabilities. XSS, SQL injection, directory
traversal, cross-site request forgery and command injection
have been the most important kind of web vulnerabilities in
the last few years [36]. Techniques including static anal-
yses [22, 24], model checking [28], mixed static-dynamic
analyses [4], as well as decision procedure based automated
analyses [21, 25] have been developed for server-side appli-
cations written in PHP and Java. Of these techniques, only
a few works have aimed to precisely analyze custom valida-
tion routines. Balzarotti et al. were the ﬁrst to identify that
the use of custom sanitization could be an important source
of both false positives and negatives for analysis tools in
their work on Saner [4]. The proposed approach used static
techniques for reasoning about multiple paths effectively.
However, the sanitization analysis was limited to a subset of
string functions and ignored validation checks that manifest
as conditional constraints on the execution path. Though an
area of active research, the more recent string decision pro-
cedures do not yet support the full generality of constraints
we practically observed in our JavaScript subject applica-
tions [9, 21, 25].
Dynamic taint analysis approaches. Vogt et al. have de-
veloped taint-analysis techniques for JavaScript to study the
problem of conﬁdentiality attacks resulting from XSS vul-
nerabilities [39].
In addition to the features provided by
their work, our taint-tracking techniques are character-level
precise and accurately model the semantics of string oper-
ations as our application domain requires such precision.
Purely dynamic taint-based approaches have been used for
runtime defense against web attacks [18, 29, 32, 35, 37, 38,
43]. However, applying these to discover attacks is difﬁcult
because reasoning about validation checks is important for
precision. Certain tools such as PHPTaint [38] approximate
this by implicitly clearing the taint when data is sanitized
using a built-in sanitization routine.
Directed random testing. Our taint enhanced blackbox
fuzzing technique shares some of the beneﬁts of a related
technique called taint-based directed whitebox fuzzing [15].
Both techniques use taint information to narrow down the
space of inputs that are relevant; however, our technique
uses the knowledge of the sink to perform a directed black-
box analysis for the vulnerability as opposed to their white-
box analysis due to the limitation of current decision proce-
dures in our application domain. Techniques developed in
this paper are related to dynamic symbolic execution based
approaches [11,12,16,21] which use decision procedures to
explore the program space of the application. As discussed
earlier, automated decision procedures for theory of strings
today do not support the expressiveness to directly solve
practical constraints we observe in real JavaScript applica-
tions. In comparison, our taint enhanced blackbox fuzzing
algorithm is a lighter-weight mechanism which, in prac-
tice, efﬁciently combines the beneﬁts of taint-based anal-
yses with randomized testing to overcome the limitations of
decision-procedure based tools.
JavaScript analysis frameworks. Several works have re-
cently applied static analysis on JavaScript applications [14,
17]. In contrast, we demonstrate the practical effectiveness
of a complimentary dynamic analysis technique and we ex-
plain the beneﬁts of our analyses over their static counter-
parts. GateKeeper enforces a different set of policies us-
ing static techniques which may lead to false positives. Re-
cent frameworks for dynamic analyses [44] have been pro-
posed for source-level instrumentation for JavaScript; how-
ever, source-level transformations are much harder to rea-
son about in practice due to the complexity of the JavaScript
language.
Browser vulnerabilities. CSV vulnerabilities are related
to, but signiﬁcantly different from browser vulnerabili-
ties [5, 7, 13, 41]. Research on these vulnerabilities has
largely focused on better designs of interfaces that could be
used securely by mutually untrusted principals. In this pa-
per, we showed how web application developers use these
abstractions, such as inter-frame communication interfaces,
in an insecure way.
7 Conclusion
This paper presents a new class of vulnerabilities, which
we call CSV vulnerabilities. We proposed a hybrid ap-
proach to automatically test JavaScript applications for the
presence of these vulnerabilities. We implemented our ap-
proach in a prototype tool called FLAX. FLAX has discov-
ered several real-world bugs in the wild, which suggests that
such tools are valuable resources for security analysts and
developers of rich web applications today. Results from
running FLAX provide key insight into the prevalence of
this class of CSV vulnerabilities with empirical examples,
and point out several implicit assumptions and program-
ming errors that JavaScript developers today make.
8 Acknowledgments
We thank Adam Barth, Stephen McCamant, Adrian Met-
tler, Joel Weinberger, Matthew Finifter, Devdatta Akhawe,
Juan Caballero and Min Gyung Kang for helpful feedback
on the paper at various stages. We are also thankful to our
anonymous reviewers for suggesting improvements to our
work. This work is being done while Pongsin Poosankam
is a visiting student researcher at University of California,
Berkeley. This material is based upon work partially sup-
ported by the National Science Foundation under Grants
No. 0311808, No. 0448452, No. 0627511, and CCF-
0424422, by the Air Force Ofﬁce of Scientiﬁc Research
under Grant No. 22178970-4170, and by the Army Re-
search Ofﬁce under Grant No. DAAD19-02-1-0389. Any
opinions, ﬁndings, and conclusions or recommendations ex-
pressed in this material are those of the authors and do not
necessarily reﬂect the views of the National Science Foun-
dation, the Air Force Ofﬁce of Scientiﬁc Research, or the
Army Research Ofﬁce.
References
[1] Ecmascript
language
speciﬁcation,
3rd
edition.
http://www.ecma-international.org/
publications/standards/Ecma-262.htm.
[2] iGoogle Gadget Directory. http://www.google.com/
ig/.
[3] Introducing JSON. http://www.json.org/.
[4] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic,
E. Kirda, C. Kruegel, and G. Vigna. Saner: Composing
Static and Dynamic Analysis to Validate Sanitization in Web
Applications. In Proceedings of the IEEE Symposium on Se-
curity and Privacy, Oakland, CA, May 2008.
[5] A. Barth, J. Caballero, and D. Song. Secure content sniff-
ing for web browsers or how to stop papers from reviewing
themselves. In Proceedings of the 30th IEEE Symposium on
Security and Privacy, Oakland, CA, May 2009.
[6] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses
for cross-site request forgery. In CCS, 2008.
[7] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame
communication in browsers.
In Proceedings of the 17th
USENIX Security Symposium (USENIX Security 2008),
2008.
[8] P. Bisht and V. N. Venkatakrishnan. XSS-GUARD: precise
In 5th
dynamic prevention of cross-site scripting attacks.
GI International Conference on Detection of Intrusions &
Malware, and Vulnerability Assessment, 2008.
[9] N. Bjorner, N. Tillmann, and A. Voronkov. Path feasibility
analysis for string-manipulating programs. In TACAS ’09:
Proceedings of the 15th International Conference on Tools
and Algorithms for the Construction and Analysis of Sys-
tems, 2009.
[10] S. W. Boyd and A. D. Keromytis. SQLrand: Preventing SQL
injection attacks. In Proceedings of the 2nd Applied Cryp-
tography and Network Security (ACNS) Conference, pages
292–302, 2004.
[11] C. Cadar, D. Dunbar, and D. R. Engler. Klee: Unassisted
and automatic generation of high-coverage tests for complex
systems programs. In OSDI, 2008.
[12] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R.
Engler. EXE: Automatically generating inputs of death. In
CCS, 2006.
[13] S. Chen, D. Ross, and Y.-M. Wang. An analysis of browser
domain-isolation bugs and a light-weight transparent de-
fense mechanism.
In Proceedings of the 14th ACM con-
ference on Computer and Communications Security, pages
2–11, New York, NY, USA, 2007. ACM.
[14] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner. Staged
information ﬂow for JavaScript. In PLDI, 2009.
[15] V. Ganesh, T. Leek, and M. Rinard. Taint-based directed
In Proceedings of the 2009 IEEE 31st
whitebox fuzzing.
International Conference on Software Engineering, 2009.
[16] P. Godefroid, N. Klarlund, and K. Sen. DART: directed au-
tomated random testing. In PLDI, 2005.
[17] S. Guarnieri and B. Livshits. Gatekeeper: mostly static en-
forcement of security and reliability policies for JavaScript
code.
In Proceedings of the Usenix Security Symposium,
Aug. 2009.
[18] M. V. Gundy and H. Chen. Noncespaces: Using randomiza-
tion to enforce information ﬂow tracking and thwart cross-
site scripting attacks. In NDSS, 2009.
[19] R. Hansen. XSS cheat sheet. http://ha.ckers.org/
xss.html.
[20] P. Hooimeijer and W. Weimer. A decision procedure for sub-
set constraints over regular languages.
In ACM SIGPLAN
Conference on Programming Language Design and Imple-
mentation (PLDI), pages 188–198, June 2009.
[21] P. Hooimeijer and W. Weimer. A decision procedure for
subset constraints over regular languages. In PLDI, 2009.
[22] Y. Huang, F. Yu, C. Hang, C. Tsai, D. Lee, and S. Kuo. Se-
curing web application code by static analysis and runtime
protection. The 13th International Conference on World
Wide Web, 2004.
[23] S. Jha, S. A. Seshia, and R. Limaye. On the computa-
tional complexity of satisﬁability solving for string theories.
CoRR, abs/0903.2825, 2009.
[24] N. Jovanovic, C. Kr¨ugel, and E. Kirda. Pixy: A static anal-
ysis tool for detecting web application vulnerabilities (short
paper). In IEEE Symposium on Security and Privacy, 2006.
[25] A. Kie˙zun, V. Ganesh, P. J. Guo, P. Hooimeijer, and M. D.
Ernst. HAMPI: A solver for string constraints. In Proceed-
ings of the International Symposium on Software Testing and
Analysis, 2009.
[43] W. Xu, S. Bhatkar, and R. Sekar. Taint-enhanced policy en-
forcement: A practical approach to defeat a wide range of
attacks. In Proceedings of the USENIX Security Symposium,
2006.
[44] D. Yu, A. Chander, N. Islam, and I. Serikov. JavaScript in-
strumentation for browser security.
In Proceedings of the
ACM SIGPLAN-SIGACT symposium on Principles of pro-
gramming languages, 2007.
[26] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes:
a client-side solution for mitigating cross-site scripting at-
tacks.
In Proceedings of the ACM Symposium on Applied
Computing, 2006.
[27] A. Klein. DOM based cross site scripting or XSS of the
third kind. Technical report, Web Application Security Con-
sortium, 2005.
[28] M. Martin and M. S. Lam. Automatic generation of XSS and
SQL injection attacks with goal-directed model checking. In
17th USENIX Security Symposium, 2008.
[29] Y. Nadji, P. Saxena, and D. Song. Document structure in-
In
tegrity: A robust basis for cross-site scripting defense.
NDSS, 2009.
[30] S. Nanda, L.-C. Lam, and T. Chiueh. Dynamic multi-
process information ﬂow tracking for web application se-
curity. In Proceedings of the 8th ACM/IFIP/USENIX inter-
national conference on Middleware companion, 2007.
[31] J. Newsome and D. Song. Dynamic taint analysis for au-
tomatic detection, analysis, and signature generation of ex-
ploits on commodity software. In Proceedings of the Net-
work and Distributed System Security Symposium (NDSS),
2005.
[32] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and
D. Evans. Automatically hardening web applications using
precise tainting. 20th IFIP International Information Secu-
rity Conference, 2005.
[33] R. Sekar. An efﬁcient black-box technique for defeating web
application attacks. In NDSS, 2009.
[34] E. Stinson and J. C. Mitchell. Characterizing bots’ remote
control behavior. In Botnet Detection, volume 36, pages 45–
64. 2008.
[35] Z. Su and G. Wassermann. The essence of command in-
jection attacks in web applications.
In Proceedings of the
ACM SIGPLAN-SIGACT symposium on Principles of Pro-
gramming Languages, 2006.
[36] Symantec Corp. Symantec internet security threat report.
Technical report, Apr. 2008.
[37] M. Ter Louw and V. N. Venkatakrishnan. BluePrint: Ro-
bust Prevention of Cross-site Scripting Attacks for Existing
Browsers. In Proceedings of the IEEE Symposium on Secu-
rity and Privacy, 2009.
[38] W. Venema. Taint support for PHP. http://wiki.php.
net/rfc/taint, 2007.
[39] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel,
and G. Vigna. Cross-Site Scripting Prevention with Dy-
namic Data Tainting and Static Analysis.
In Proceeding
of the Network and Distributed System Security Symposium
(NDSS), Feb. 2007.
[40] W3C. HTML 5 speciﬁcation. http://www.w3.org/
TR/html5/.
[41] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection
and communication abstractions for web browsers in mashu-
pos. In SOSP, 2007.
[42] G. Wassermann, D. Yu, A. Chander, D. Dhurjati, H. Ina-
mura, and Z. Su. Dynamic test input generation for web
applications. In ISSTA ’08: Proceedings of the 2008 inter-
national symposium on Software testing and analysis, 2008.