# NativeX: Native Executioner Freezes Android

## Authors
- Qinsheng Hou, QI-ANXIN Technology Research, Legendsec Information Technology Institute (Beijing) Inc., Beijing, China. Email: [EMAIL]
- Yao Cheng, Huawei International, Singapore, Singapore. Email: [EMAIL]
- Lingyun Ying\*, QI-ANXIN Technology Research, University of Chinese Academy of Sciences, Beijing, China. Email: [EMAIL]

## Abstract
Android, a Linux-based, multi-threaded, open-source operating system, dominates 85% of the global smartphone market. While Android has robust management for its framework layer processes, we have discovered that weak management of native processes poses significant threats to Android systems from version 4.2 to 9.0. As a result, any third-party application, without requiring any special permissions, can freeze the system or force a reboot by starving or significantly delaying critical system services using Android commands in its native processes. We designed NativeX to systematically analyze the Android source code and identify risky Android commands. For each identified command, NativeX automatically generates a Proof-of-Concept (PoC) application and verifies its effectiveness. Our manual vulnerability analysis revealed two root causes behind these superficial attack consequences. We conducted quantitative experiments to demonstrate the attack consequences, including device temperature surges, battery degradation, and decreased computing performance. Based on our findings, we engineered three representative PoC attacks. Finally, we discuss potential defense approaches to improve the management of Android native processes.

### CCS Concepts
- Security and privacy → Mobile platform security; Denial-of-service attacks.

### Keywords
Android security, mobile system security, denial-of-service attacks, Android native processes, Android commands

### ACM Reference Format
Qinsheng Hou, Yao Cheng, and Lingyun Ying. 2020. NativeX: Native Executioner Freezes Android. In Proceedings of the 15th ACM Asia Conference on Computer and Communications Security (ASIA CCS '20), June 1–5, 2020, Taipei, Taiwan. ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3320269.3384713

## 1. Introduction
Android is a Linux-based, multi-threaded, open-source operating system for mobile devices. It has gained immense popularity among mobile users and is also used in IoT devices and various mission-critical tasks, such as point-of-sale devices, medical devices, on-vehicle systems, and even aircraft and satellite devices. One reason for Android's widespread adoption is its support for both framework and native layer programming, allowing developers to leverage transparent access to resources and low-latency, high-protection environments.

The fundamental resources, including system and device computing resources, are shared across the Android system for both framework and native layer processes. To avoid conflicts, access to these resources is coordinated through a synchronization mechanism, which uses exclusive locks. However, if a process monopolizes a resource, other processes are blocked until the resource is freed. Similarly, if a process consumes a large portion of computing resources, other processes may run slowly due to resource scarcity.

To address such issues, Android provides mechanisms like Application Not Responding (ANR), Low Memory Killer (LMK), and the Android watchdog. These mechanisms ensure proper system functioning under various conditions, assuming all processes can be managed (e.g., killed or restarted).

Unfortunately, this assumption does not always hold. Our work reveals that an Android native process can exhaustively monopolize system or computing resources, leading to unresponsive systems within seconds. This is the first exploration of exploiting Android commands as attack vectors. With improved security mechanisms, it is increasingly difficult to exploit APIs. Using legitimate commands as attack vectors is a valuable, yet understudied, direction.

We quantitatively evaluate the attack consequences, including device temperature surges, battery degradation, and decreased computing performance. We also design and present three representative PoC attacks: DoS against the Android system, DoS against an Android app, and physical harm to users due to device overheating.

This work highlights the urgent need to amend the weak management of Android native processes. We also discuss potential defense approaches.

## 2. Background and Vulnerability Overview

### 2.1. Android Process Management
Android employs four main mechanisms to manage running processes:

- **ANR (Application Not Responding)**: Ensures smooth user experience by setting time thresholds for operations. If an operation exceeds the threshold, ANR prompts the user to wait or force quit the unresponsive app.
- **LMK (Low Memory Killer)**: Manages system memory usage by killing the least essential processes during high memory pressure. The importance of processes is determined by the `oom_adj` value, with native processes having the lowest priority.
- **Android Watchdog**: Monitors critical system services and triggers a recovery process if any service fails. It is the last line of defense, designed to recover from deadlocks and other failures by restarting the system.
- **JVM Garbage Collector**: Frees unreferenced space in the JVM heap memory to prevent instability and unresponsiveness in JVM applications. Native processes spawned from native code are not managed by JVM mechanisms.

These mechanisms focus on framework processes, and while they can terminate app processes, there is no specific management for native processes, posing a risk to the Android system.

### 2.2. Vulnerability Overview
We reveal a new type of vulnerability due to weak management of native processes, which can be understood from two perspectives: system resources and device computing resources. An app without any permission can use legitimate Android commands to monopolize shared resources, leading to system freezes or reboots. We designed NativeX to identify risky commands, generate PoC exploits, and verify their effectiveness. Our findings show that this vulnerability exists in a wide range of Android versions from 4.2 to 9.0, affecting over 2 billion real-world Android devices.

### Main Contributions
- **Revealing a New Vulnerability**: We uncover a vulnerability in Android versions 4.2 to 9.0, where an app can cause a system freeze/reboot within 5 seconds by monopolizing shared resources using legitimate commands.
- **Automatic Analysis Tool**: We design and implement NativeX, an automatic static analysis tool that identifies risky commands, constructs PoC exploit apps, and verifies their effectiveness.
- **Quantitative Evaluation**: We conduct experiments to demonstrate the attack consequences, including temperature surges, battery degradation, and decreased computing performance. We showcase three representative attacks: DoS against the Android system, DoS against a target app, and physical harm to users.
- **Vulnerability Analysis and Defense Approaches**: We conduct a detailed vulnerability analysis, revealing the root causes, and discuss potential defense approaches. We provide mitigation analysis to the Android security team for their reference.