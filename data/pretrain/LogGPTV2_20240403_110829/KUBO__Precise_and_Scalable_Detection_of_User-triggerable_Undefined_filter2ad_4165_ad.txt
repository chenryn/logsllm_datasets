shift
u+-
s+
shift
shift
shift
u+
s+
block
drivers:inﬁniband
drivers:media
drivers:rapidio
drivers:rapidio
drivers:staging:gasket
drivers:misc
drivers:soc
drivers:message
drivers:usb
drivers:usb
drivers:usb
drivers:usb
drivers:usb
drivers:usb
drivers:usb
drivers:video
fs
drivers:video
drivers:video
sound
sound
kernel
blk_ioctl_discard
uverbs_request_next_ptr
ccdc_data_size_max_bit
rio_mport_maint_rd
rio_mport_maint_wr
gasket_partition_page_table
genwqe_unpin_mem
aspeed_p2a_region_acquire
mptctl_gettargetinfo
sisusb_setreg
sisusb_setidxregor
sisusb_setidxreg
sisusb_getidxreg
sisusb_setidxregandor
sisusb_setidxregmask
sisusb_write_mem_bulk
kern_select
lcd_cfg_vertical_sync
lcd_cfg_horizontal_sync
snd_hwdep_dsp_load
snd_emux_hwdep_ioctl
panic
kyro_dev_overlay_viewport_set
acknowledged
patched
submitted
submitted
submitted
submitted
submitted
patched
patched
patched
patched
patched
patched
patched
will not ﬁx
submitted
acknowledged
acknowledged
patched
submitted
acknowledged
0
3
2
0
0
2
1
1
0
1
3
3
3
3
3
0
1
0
1
1
0
1
0
DoS
OOB Read
OOB Write
OOB Read
OOB Write
Arbitrary Write
OOB Write
Logical Error
Logical Error
OOB Write
OOB Read
OOB Write
OOB Write
Logical Error
DoS
N/A
DoS
DoS
Data Confusion
OOB Read
Zero Delay Panic
TABLE V: New UB detected by KUBO and reported to the kernel developers. Each line is a reported bug. For each bug, we list its error
operation with the bug (s+ stands for signed integer overﬂow etc.), the corresponding module, the function name where the bug resides, its
current status, how many hops it requires to trace the bug and its security implication, specially we shade the bugs that are evaluated to have
security implication.
language [6]. However, if not handled with care, it still can lead
to security breach such as CVE-2018-5848, bug #1 and #8 in
Table V, mainly because such a wrap-around is not anticipated
by the developer.
One example of a detected, purely benign wrap-around is
shown below, where the name array from the userspace is
hashed by (ab)using unsigned integer overﬂows.
We use 2 typical examples to demonstrate the exploitability
of the found bugs. In one example shown in the ﬁgure above,
maint_io.length and maint_io.offset are fetched directly from
userspace, and the sum of these 2 variables are compared with
a constant RIO_MAINT_SPACE_SZ which is 16MB. However,
since this sum can wrap-around, an arbitrary kernel buffer
can be allocated. Such a buffer will subsequently be used to
communicate and iterate data from/to userspace to/from device,
possibly leading to either memory leak or arbitrary write which
can be used as primitive for further exploitation.
Only two out of the 23 bugs we reported were rejected
(will not be ﬁxed) by the kernel developers, namely Bug #2
and #17 in Table V. For Bug #2, the developer acknowledged
that the overﬂow can happen and may cause userspace faults
but failed to see any harm to the kernel thus chose not to ﬁx it.
For Bug #17, the developer stated that although the UB bug is
valid, the code is for legacy hardware. Without access to the
hardware, it’s hard to evaluate the impact of this overﬂow.
We manually evaluate the security implication by observing
how the detected UB is used and impact the system. 17 out of
the 23 reported bugs (74%) are considered to be critical with
obvious security implications (shaded rows in Table V).
Another example, as shown in the snippet above, a wrap-
around could happen for the addition of the start and length
of a piece of memory, as they are coming from userspace.
However, a wrap-around check is missing, thus one can
bypass the check at
line 9 and the overﬂowed value is
passed into truncate_bdev_range which is a wrapper of trun-
cate_inode_pages_range, possibly truncating a wrong piece of
memory and causes memory corruption issues.
In summary, the results from the two experiments reported
in this sub-section (§ V-A) show that KUBO detects critical user-
space triggerable UB bugs in Linux kernels with signiﬁcantly
9
1staticvoidwarn_on_bintable(constint*name,intnlen),→2{3inti;4u32hash=FNV32_OFFSET;5for(i=0;iRIO_MAINT_SPACE_SZ),→7return-EINVAL;8buffer=vmalloc(maint_io.length);1uint64_trange[2],start,len;2if(copy_from_user(range,(void__user*)arg,sizeof(range))),→3return-EFAULT;4start=range[0];5len=range[1];6...7//start+lencanwrap-aroundandbypass8//thischeck9if(start+len>i_size_read(bdev->bd_inode))10return-EINVAL;11...12//afterpassedintotruncate_bdev_range13//wrongmemorycanbetruncated14err=truncate_bdev_range(bdev,mode,start,15start+len-1);lower false negative and false detection rates than previous
works.
B. Component-wise evaluation
In this section, we evaluate and justify each design choice
in KUBO based on the collected statistics of analyzing the latest
kernel.
Fig. 6: The percentage of the UBs ﬁltered out by each technique
among the all UB instrumentations. If solely using SMT solver, only
8.55% UB instrumentation can be deemed false. In the meantime, a
large portion of UB instrumentation can be removed because they are
not related to userspace input.
Fig. 7: Distribution of number of dependent under-constrained values
for instrumented UB. 98% of the instrumented UB depend on at least
one under-constrained values. 83% of them depends on 3 or less
under-constrailed values.
1) User-input centric detection: To evaluate the effective-
ness of each technique, we summarized how many instrumented
UBs are ﬁltered out in each stage in Figure 6. As shown in
the ﬁgure, SMT solver can only remove 8.55% UB instrumen-
tations i.e., 91.45% of the UBs will be deemed satisﬁable thus
being kept. This high satisﬁability rate is the major evidence of
the signiﬁcant gap between the theoretically satisﬁable UB and
the real UB in reality which makes previous works struggle
with FP. KUBO bridges this gap by searching for userspace input.
As Figure 6 shows, generally only 10.2% (8.55%+1.65%) UBs
are caused directly by userspace input, yet, according to our
survey, they account for the majority of the exploitable real-
world vulnerabilities.
hop
0
1
2
3
4
5
6
7+
# of UB
instrumentation
# of bugs
detected
FDR
320937
106240
29256
27451
24794
13176
7003
4557
15
27
32
38
40
40
40
20.0%
22.2%
28.1%
23.7%
27.5%
27.5%
27.5%
NA
NA
(a) Per-hop evaluation for detected bugs and false alarms
hop
# of bugs
missed
FNR
0
14
1
11
2
9
3
7
4
7
5
7
73.3%
57.9%
47.4%
36.8%
36.8%
36.8%
(b) Per-hop evaluation for false negatives.
TABLE VI: Per-hop evaluation for FDR and FNR. For FDR (sub-
table VIa), we report how many UB instrumentations are processed
by this hop (row 2). How many bugs are detected up to this hop
(row 3) and the corresponding false detection rate (row 4). For FNR
(subtable VIb), we report how many bugs are missed out of the 19
bugs ground truth for each hop (row 2) and the corresponding false
negative rate (row 3).
of hop limit may affect the effectiveness of incremental call
chain upwalk.
Effect on scalability: As shown in Figure 7 where we survey
the number of under-constrained values for each instrumented
UBs, 98% UBs depends on at least one under-constrained value,
this high percentage of dependency on under-constrained values
makes it necessary to trace back to the callers to gain more
visibility. When we trace back the callers, instead of blindly
scaling up to each possible caller, we only select the callers that
can taint all UB-dependent under-constrained values. During
this selection, 46.07% of callers are ﬁltered out because they
cannot taint all under-constrained values, this big reduction is
the key factor for KUBO to scale up.
Per-hop evaluation: To better understand how the conﬁgura-
tion of different hop limits affects the result for false detection
rate (FDR) and false negatives rate (FNR), we ﬁrst measured
how many UB instrumentations are processed by each hop
in the lastest kernel experiment. As shown in Table VI, the
number of hops dropped dramatically at the ﬁrst 3 hops. This
largely alleviates the path explosion problem that most symbolic
execution tools have. As for false positive rates, with the
number of hops getting larger, the FDR remains consistent
around 25% and plateaued after 5 hops. This suggested that
increasing hops does not effectively detect more bugs mainly
because a fairly large portion of UB instrumentations e.g., about
91%, has been processed in the ﬁrst 3 hops.
In the experiment of different hops for false negative
evaluation, as shown in Figure VIb. False negatives beneﬁt
a lot from the increasing number of hops as it dropped by
half from hop 0 to hop 3, and also plateaued afterward. This
indicates the intrinsic limitation of KUBO which is being unable
to handle other sources of input and loops. And this cannot be
simply solved by increasing the hops.
2) Incremental call chain upwalk: In this subsection, we
evaluate how incremental call chain upwalk affects the scalabil-
ity and detection result of KUBO. We further present the results
based on different hop limits to study how the conﬁguration
3) Post-bug analysis: As the kernel grows more and more
sophisticated over time, an increasing number of UB is being
noted and properly handled. Unlike other types of bugs that
can be eliminated completely, the UB is usually sanitized after
10
42.76%8.55%47.04%0.96%0.68%1.65%Callchain UpwalkSMT Solver UnsatUser Input UnrelatedPost-Bug AnalysisReported2%34%29%18%7%5%3%2%1%0%0%0%5%10%15%20%25%30%35%40%01234567891011Percentage of each number in total casesNumber of dependent under-constrained values for each UBid
1
2
3
4
5