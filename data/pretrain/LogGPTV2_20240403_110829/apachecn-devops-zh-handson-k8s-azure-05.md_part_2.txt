    kubectl 规模部署/redis-副本-副本=10
2.  This will cause a couple of new pods to be created. We can check our pods using the following:
    忽必烈得到 pods
    这将产生如图 5.10 所示的输出:
    ![The Redis replica pod in a Pending state due to a shortage of resources](img/B17338_05_10.jpg)
    图 5.10:一些 Pod 处于挂起状态
    此处突出显示的是处于“待定”状态的一个 Pod 。如果群集资源不足，就会出现这种情况。
3.  We can get more information about these pending pods using the following command:
    忽必烈描述 pod redis-replica-
    这将向您展示更多细节。在**描述**命令的底部，您应该会看到类似于*图 5.11* 所示的内容:
    ![Fetching more details about the pending pod using the kubectl describe pod command](img/B17338_05_11.jpg)
    图 5.11: Kubernetes 无法安排这个 pod
    它解释了两件事:
    *   其中一个节点的 CPU 资源不足。
    *   其中一个节点有 PODS 不能容忍的污点(node.kubernetes.io/unreachable)。这意味着**未就绪的节点**不能接受 PODS。
4.  We can solve this capacity issue by starting up node 2 as shown in *Figure 5.12*. This can be done in a way similar to the shutdown process:
    ![Starting node 2 again from the Instances pane of the selected VMSS](img/B17338_05_12.jpg)
    图 5.12:再次启动节点 2
5.  It will take a couple of minutes for the other node to become available again in Kubernetes. You can monitor the progress on the pods by executing the following command:
    忽必烈得到 pods -w
    这将在几分钟后向您显示一个输出，类似于图 5.13 :
    ![Monitoring the transition of the pods from the Pending state to the Running state](img/B17338_05_13.jpg)
    图 5.13:pod 从挂起状态移动到包含创建到运行
    在这里，您再次看到容器状态从“挂起”变为“正在创建”，最后变为“正在运行”。
6.  如果您重新执行上一个窗格中的**描述**命令，您将看到类似于*图 5.14* 所示的输出:
![Output showing that the Kubernetes scheduler assigned the redis replica pod to node 2](img/B17338_05_14.jpg)
图 5.14:当该节点再次可用时，挂起的荚被分配给该节点
这表明在节点 2 可用后，Kubernetes 在该节点上调度 pod，然后启动容器。
在本节中，您学习了如何诊断资源不足的错误。您可以通过向群集添加另一个节点来解决该错误。在进入最终故障模式之前，清理留言簿部署。
#### 注意
在*第 4 章，构建可扩展的应用*中，介绍了**集群自动缩放器**。群集自动缩放器将监控资源不足错误，并自动向群集添加新节点。
让我们通过运行以下**删除**命令来清理留言簿部署:
kubectl delete -f 留言簿一体机. yaml
现在，关闭之前打开的另一个 Cloud Shell 窗口也是安全的。
到目前为止，您已经了解了如何从 Kubernetes 集群中节点的两种故障模式中恢复。首先，您看到了 Kubernetes 如何处理离线的节点，以及系统如何将 pods 重新调度到工作节点。之后，您看到了 Kubernetes 如何使用请求来管理节点上 pods 的调度，以及当集群资源不足时会发生什么。在下一节中，您将了解 Kubernetes 中的另一种故障模式，即当 Kubernetes 遇到存储装载问题时会发生什么。
## 修复存储安装问题
在本章的前面，您注意到了当 Redis 主节点移动到另一个节点时，留言簿应用是如何丢失数据的。这是因为该示例应用不使用任何持久存储。在本节中，您将看到一个示例，说明当 Kubernetes 将 pod 移动到另一个节点时，如何使用 PVCs 来防止数据丢失。你会看到一个常见的错误，当 Kubernetes 移动附有 PVC 的 PODS 时，你会学到如何解决这个问题。
为此，您将重用上一章中的 WordPress 示例。在开始之前，让我们确保集群处于干净状态:
kubectl get all
这应该只显示一个 Kubernetes 服务，如*图 5.15* :
![Checking the status of the cluster using the kubectl get all command](img/B17338_05_15.jpg)
图 5.15:您现在应该只运行一个 Kubernetes 服务
让我们也确保两个节点都在运行并且就绪:
kubectl 获取节点
这将向我们显示两个节点都处于就绪状态，如图 5.16 所示:
![Checking the status of both nodes using the kubectl get nodes command](img/B17338_05_16.jpg)
图 5.16:集群中应该有两个可用的节点
在前面的示例中，在*处理节点故障*部分，您看到如果 pod 重新启动，存储在 **redis-master** 中的消息会丢失。其原因是 **redis-master** 将所有数据存储在其容器中，每当重新启动时，它都会使用没有数据的干净映像。为了在重启后存活，数据必须存储在外部。Kubernetes 使用 PVCs 来抽象底层存储提供者，以提供这种外部存储。
要开始这个例子，设置 WordPress 安装。
### 开始 WordPress 安装
让我们从安装 WordPress 开始。我们将演示其工作原理，然后验证存储在重新启动后是否仍然存在。
如果在上一章中还没有这样做，请为 Bitnami 添加 Helm 存储库:
helm repo add bitnami https://charts . bitnami . com/bitnami
使用以下命令开始重新安装:
头盔安装 wp bitnami/wordpress
这将需要几分钟来处理。您可以通过执行以下命令来跟踪此安装的状态:
忽必烈得到 pods -w
几分钟后，这将向您显示两个状态为“正在运行”的 PODS，两个 PODS 的就绪状态均为 1/1，如图 5.17 所示:
![Using kubectl get pods -w to follow the progress of WordPress installation](img/B17338_05_17.jpg)
图 5.17:几分钟后，所有 Pod 都将处于运行状态
您可能会注意到 **wp-wordpress** pod 经历了一个错误状态，然后重新启动。这是因为 **wp-mariadb** Pod 没有及时准备好， **wp-wordpress** 经历了重启。您将在*第 7 章监控 AKS 集群和应用*中了解更多关于就绪性以及这如何影响 pod 重启的信息。
在本节中，您看到了如何安装 WordPress。现在，您将看到如何使用持久卷来避免数据丢失。
### 使用持久卷避免数据丢失
一个**持久卷** ( **PV** )是用 Kubernetes 在集群中存储持久数据的方式。在*第 3 章，AKS* 上的应用部署中更详细地讨论了 PVs。让我们探索一下为 WordPress 部署创建的 PVs:
1.  You can get the PersistentVolumeClaims using the following command:
    立方结构得到 pvc
    这将产生如图 5.18 所示的输出:
    ![Fetching the details of the PersistentVolumeClaims using the kubectl get pvc command](img/B17338_05_18.jpg)
    图 5.18:WordPress 部署创建了两个 PVC
    持久卷声明将导致持久卷的创建。PersistentVolume 是所创建的物理资源的链接，在本例中是一个 Azure 磁盘。以下命令显示了实际创建的 PVs:
    忽必烈得到 pv
    这将向您展示两个持久卷:
    ![Using the kubectl get pv command to check the created PersistentVolumes](img/B17338_05_19.jpg)
    图 5.19:创建了两个物理卷来存储物理卷的数据
    您可以获得有关创建的特定持久卷的更多详细信息。复制其中一个 PVs 的名称，并运行以下命令:
    忽必烈描写 pv
    这将向您显示该卷的详细信息，如*图 5.20* :
    ![Using the kubectl describe pv command to get details of specific PersistentVolumes](img/B17338_05_20.jpg)
    图 5.20:其中一个 PVs 的细节
    在这里，您可以看到哪个聚氯乙烯声明了这个卷，以及 Azure 中的磁盘名称是什么。
2.  Verify that your site is working:
    忽必烈得到服务
    这将向我们显示我们的 WordPress 站点的公共 IP，如*图 5.21* 所示:
    ![Obtaining the public IP of our WordPress site](img/B17338_05_21.jpg)
    图 5.21:WordPress 站点的公共 IP
3.  If you remember from *Chapter 3, Application deployment of AKS*, Helm showed you the commands you need to get the admin credentials for our WordPress site. Let's grab those commands and execute them to log on to the site as follows: