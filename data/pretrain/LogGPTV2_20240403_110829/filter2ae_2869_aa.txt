原文：[hexdetective](http://hexdetective.blogspot.tw/)
作者：Nitay Artenstein ([@nitayart](https://twitter.com/nitayart)) and Gilad
Goldman ([@gnull00](https://twitter.com/gnull00))
译： **Holic (知道创宇404安全实验室)**
三星的 Android 安全引导程序（ **S-Boot** ）是其[信任链概念](https://kp-cdn.samsungknox.com/bb91024cad9080904523821f727b9593.pdf)的核心。 攻击者利用 S-Boot
可能会加载不受信任的内核和系统映像这点，以此绕过大多数手机的安全机制。
这是众所周知的攻击思路。它经常被 Android rooting 和 mod 社区使用，而我猜它大概更受执法和政府机构喜爱。
更有意思的是，S-boot 启动时存在几个内存破坏漏洞，其中一个可用于在引导加载程序中实现完整的代码执行。
我们目前在 Exynos 芯片上确认存在该漏洞。貌似在三星S5，S6，S7 上有 90% 使用了 Exynos 的 ROM。最新的 S7 的 ROM
似乎修复了这个漏洞，而我们会在这几天内确认这一点。
漏洞覆盖面很大，那么我们将把它分成两篇文章。在本文中，我们将重点介绍一些 S-Boot
内部机制，然后探索加载程序的攻击面并获得基本的调试功能。我们以发现一个有趣的攻击面作为结束。在下一篇文章中，我们将公开真正的漏洞并利用它得以在 S-boot
中代码执行。
我们不会深入太多逆向 S-Boot 的基础知识，比如 IDA 加载或查找基址。Fernand Lone Sang (@_kamino_)
会放出一篇关于本文的精彩文章，当它发表之时，我会提供链接。如果你需要其他帮助，私信我即可，我很乐意提供帮助。
### 理解 S-Boot
三星的 Android 启动过程开始于 Boot ROM 中运行的代码，使用了 OEM
公钥（在三星设备中被称为三星安全启动密钥（SSBK））验证下一阶段引导加载程序的完整性。然后它将两个独立进程加载到内存中：一个是 S-Boot
本身，另一个是在 TrustZone TEE （可信执行环境）中运行的 “安全世界”。
这两个进程协同工作。TEE 操作系统，在Exynos 处理器的情况下对应 Trustonic（之前的 MoboCore），由 S-Boot
调用，以验证镜像在加载之前的签名。因此 S-Boot 或 TEE 中的任何一个都可能成为整个系统的潜在风险。
S-Boot本身分为两部分：第一阶段 Bootloader BL1 由 Boot ROM 调用并初始化低级系统原语。BL1 在验证其签名后跳入
BL2，这是自身已经是最小的操作系统，完成了对 USB，显示器和 I/O 的驱动支持。
既然我们有兴趣找到
bug，那么让我们破坏启动的引导过程吧，我们决定找到它尽可能接近实际的内核启动方式。这是因为我们知道已经有了一个初始化的系统，，进一步的操作，比如磁盘
I/O - 我们需要做的是刷入自定义的镜像 - 做一点微小的工作。因此，我们决定在此阶段跳入 BL2 并忽略 BL1 （虽然我们确定此后会破坏这一阶段）。
此阶段下，没有任何调试功能，只是 sboot.bin 与三星 Exynos 标准镜像合并在了一起。那么我们在 IDA 中打开它，对 BL2 进行研究。
A typical function in BL2. Notice the quantity of strings
其实挺简单的：知道了 BL1 主要负责底层初始化，而 BL2 几乎是一个全功能的操作系统，我们可以由此得出结论，属于 BL2
的功能肯定更多，而且具有更多的调试字符串和其他函数引用。一旦我们确定 BL2 的位置，我们使用经典的逆向技巧即可确定内存中映像的基址。
在更高的层次上，BL2 有几个有趣的任务，包括且不仅限于：
  1. 启动内核
  2. 闪存刷入新的固件镜像
  3. 在固件更新期间显示基本的用户界面
  4. 调试（运气好的话）
BootLoader 阶段，加载新固件映像的机制通常是最好的攻击面，因为它涉及到与攻击者的输入直接交互以及各种复杂的逻辑。那么下面就是我们首先看到的。
### Into Odin
对三星 Android 手机有过研究的人都知道 Odin，这是个可敬但有些笨重的软件，它的功能是将固件 ROM 刷入设备存储器中。
在设备端，刷入新的固件要先把手机切换到下载模式，这个在 S-Boot 中得以实现，然后通过 USB 连接到运行 Odin 客户端的主机。然后 Odin
客户端将选中的固件镜像发送到设备上运行的 Odin 服务器。当然，你不能刷入任何镜像，在有锁的三星设备上，BootLoader 将拒绝未签名的三星固件。
Download mode. Locked bootloaders reject unsigned images
在 BootLoader 一端，Odin 引导 BootLoader使用了相当全面的协议，通过 USB 接收传输数据。这就是我们率先发力之处。
如果想继续跟进分析，我们使用的 ROM 版本是 **G930FXXU1APF2** 。这是三星 Galaxy S7 的 ROM，可以直接从 [Sam
Mobile](https://www.sammobile.com/firmwares/download/77386/G930FXXU1APF2_G930FH3G1APF1_H3G/)
下载。
Odin 处理程序代码中有个关键函数是 `process_packet`（位于地址 0x8F00A0A4 处），它几乎处理了所有的 Odin
协议。刚读到函数代码我们就遇到一个问题：
The beginning of process_packet
如你所见，Odin 协议查找数据包 ID，并选择代码分支。数据包 ID 0x65 告诉 Odin 要进行一个 PIT 文件相关的操作（PIT
包含分区信息，可参考[此 XDA 串](https://forum.xda-developers.com/showthread.php?t=999097)）。
当代码运行至 ID 0x65，它会将当前 PIT 文件读取到缓冲区，或者写入一个新的 PIT 文件到保存 PIT 数据的特殊分区。如果第二个字节是
1，Odin 继续将当前 PIT 复制到缓冲区，然后传递至 Odin 客户端。客户端需要它来确认新的固件是否适合当前分区方案。
但是 PIT 被复制的目标缓冲区（xfer_data.pit_buf）在哪里被初始化呢？显然，它在这种情况下被分配：
 The
allocated of pit_buf
这意味着你必须在缓冲区分配之前发送初始化数据包（ID 0x64）。如果没有的话，缓冲区是指向 0 地址的。如果你试图在缓冲区分配之前复制 PIT
，代码会继续向 0 地址空间复制：经典的空指针解引用漏洞。
这个类似于我们在 Odin 中发现的其他漏洞，它能使 BootLoader 崩溃，但不一定能利用。这种情况下，鉴于 ARM64 架构，0
地址空间没有映射，任何尝试复制到这儿的操作都会使它马上崩溃，而在 ARM32
体系上就不是那么糟糕了，因为0地址可能包含被覆盖的异常向量表（EVT）。那么问题来了，我们写入的数据依然是不可控的，因为我们无法控制 PIT 数据。
但是这个漏洞确实给了我们很多额外的东西。当我们触发漏洞并崩溃 BootLoader 时，屏幕上会显示什么？
Inside Upload Mode
### Dumping Memory
代码表明 BootLoader 处理的异常输出到了屏幕上面，然后输入参考引用为“上传模式”的东西。这个方面的开发就有意思了：上传模式是一个半密码引导的
BootLoader 模式，且已经[困惑了mod社区多年](https://forum.xda-developers.com/showthread.php?t=858233)。有些用户报告内核恐慌后得以触发，也有人说，它是由于 PMIC
问题。现在我们知道了可以在 BootLoader 异常的时候进入该模式。
观察对应代码，我们看到上传模式位于 `usbd3_rdx_process`（对应地址
0x8F028C1C），属于内联函数。我对代码进行了一些修改简化，以便观察。
    mode_switch = p_board_info->mode_switch;
    if ( mode_switch & UPLOAD_MODE )
    {
      if ( !transaction_data.response_buffer )
      {
        transaction_data.response_buffer = (char *)malloc(0x80000);
        if ( !transaction_data.response_buffer )
        {
          printf("%s: buffer allocation failed.\n", "usbd3_rdx_process");