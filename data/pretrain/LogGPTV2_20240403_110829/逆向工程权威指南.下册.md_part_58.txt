 from 0x1402e9794 (disp+vork,exe1chngpass+0xe4))
PID=2744 (TID=360[e modify return value (EAx/RAX) of this functLon to 0
此后我们就可以进行登录了。
顺便提一下，如果忘记密码的话，可以把chckpassO函数的返回值强制改为0，那样它就不会进行密码
验证了：
tracer64,exe -a:disp+vork,exe bpf=disp+vork,exe1chckpass, args:3, unicode, rt:0
PID=2744/TID=3601(0) disp+work,exe1chckpass (0x202c770, L“bogus *, 0x41) (ca1led fron 0x1402f1060 
↓(disp+work.exe?usrexist+0x3c0))
PID=2744/TID=360|We nodify return value (EAX/RAX) of this function to 0
在分析password_atemp_limit_exccededO函数时，我们可以看到函数的前儿行指令是：
Lea
rcx, aLoginFailed_us :*login/fa1led_user_auto_unlock*
ca11
test
sapgparas
jz
short 1oc_1402E190E
rax, rax
hovzx
eax, word ptz [rax]
cnp
ax, *s
short 1oc_140251904
cnp
short 1oc_140281904
ax, 'n*
cnp
ax, '0*
jnz
short 1oc_1402E190E
很显然，sapgparam0函数的作用是获取配置参数。整个程序有1768处指令调用这个函数。据此推测，
只要追踪这个函数的调用关系，就可以分析特定参数对整个程序的影响。
不得不说，SAP要比Oracle RDBMS亲切得多。前者提供的函数名等信息远比后者清晰。不过disp+work
程序具有C++程序的特征，莫非官方最近重新编写了它的源程序？
---
## Page 321
第81章
OracleRDBMS
81.1V$VERSION表
Oracle RDBMS 11.2是个规模庞大的数据库系统。其主程序oracle.exe包含近124000个函数。相比之
下，Windows 7 x86的内核ntoskmlexe只有近 11000 函数：Linux 3.9.8的内核（默认编译/带有默认驱动程
序）包含的函数也不过31000个左右。
本章首先演示一个最简单的Oracle查询指令。我们可通过下述指令查询OracleRDBMS数据库的版本信息：
SQt> select * fron VsveRSI0s;
上述指令的返回结果如下：
BAZIER
Oracle Database 11g Enterprise Bdition Release 11.2.0.1.0 - Production
PL/SgL Release 11.2.0.1.0 - Product1on
TRs for 32-bit Windows: Version 11.2,0.1.0 - Prodseticn
3800
Production
LSRTL Version 11.2.0.1.0 - Product1on
在Win32版本的oracle.cxe程序里不难发现这个字符串。但是在Linux平台的文件里，函数名称和全
局变量名都会走样。因此，即使在Linux版的Oracle RDBMS里找到了正确的对象（o）文件，挖掘相应
的处理函数也会花费更多的时间。
在Limux版程序的文件里，包含字符串“VSVERSION”的文件是kqfo。这个文件在Oracle的库文件目录
liblibserverll.a 之中。
kqfo文件在定义数据表kqfviw的时候，调用了字符申“VSVERSION”
指令清单81.1kgf.o
-rodata:0800c4A0 kqfviv
dd0Bh
 DATA XREF: kgfchk:1oc_8003A60
rodata:0800c4A0
rodata:0800c4A4
dd offset _2_STRIBG_10102_0 ; "GVSHAITSTAT*
PE+uqb;bx 
-rodata:0800C4AB
dd  4
-rodata:0800C430
-rodata:0800c4B4
d 0
dd
3
dd
195h
-rodata:0800c4c0
-rodata:0800C4BC
dd  4
dd  0
-rodata:0800c4c4
dd 0FFFFC1CBh
dd
dd
-rodata:0800c400
dd
0
OAh
-rodata:0800c4D4
dd
-rodata:0800c408
dd off8et _2_STRISG_10103_0 : *NULL*
dd
-rodata:0800c40c
4
.redata:0800c4E0
rodata:0800c484
dd
dd
3
4Eh
0
-rodata:0800c488
.rodata:0800c48c
dd
CPP
---
## Page 322
798
逆向工程权威指南（下册）
rodata:0800C4F0
rodata:0800c4F4
orTrC003h
rodata: 0800C4F8
rodata:0800C4FC
dd 0
dd
4
-rodata:0800c500
dd 5
rodata:0800C504
offset _2_STRING_10105_0 : *GV$88*
80so0080:e3epox*
00so0080:esepox
Pp
dd
offset _2_STRING_10103_0 : *sULL*
4
rodata:0800c510
rodata:0800c514
CPP
-rodata:0800c518
dd
dd
269h
rodata:0800c51c
dd
15h
rodata:0800C524
dd
dd
OFFPFC1S0h
rodata:0800C528
dd
rodata:0800C530
1odata:0800C520
Gd 0
rodata:0800c534
dd
rodata10$00c53c
8000801esepox
dd
dd
rodata:0800c540
 rodata : 0800C544
dd
rodata:0800C548
dd
-rodata:0800c54C
dd
14h
0F5t
 rodata:0800c550
rodata:0800c554
dd
PP
OFFFFC1EEh
0
rodata:0800c55c
85550080:esepox
dd 0
dd
在分析OracleRDBMS的内部文件时，很多人都会奇怪“为什么函数名称和全局变量名称都那么论异？”这
大概是因为Oracle是20世纪 80年代的古典作品吧。那个时代C语言编译器都遵循的ANSI标准：函数名
称和变量名称不得超出6个字符（linker的局限），即“外部标识符以前6个字符为准”的规则。
名字以VS-开头的数据视图，多数（很有可能是全部）都由这个文件的kqfviw表定义。这些VS视图
都是内容固定视图（fixedViews）。从表面看来，这些数据具有显著的循环周期。因此，我们可以初步判断，
kqfviw表的每个元素都由12个32位字段构成。借助IDA程序，我们可以轻易地再现出这种12字段的数
据结构，套用到整个数据表。在OracleRDBMSv11.2里，总共有1023个固定视图。即，这个文件可能描述
了1023个预定义的视图。本章稍后讨论这个数字。
关于视图中的各字段、及各字段对应的数据，并没有多少资料可寻。虽然我们发现第一个数字就是数
据库图的名称（没有最末的那个零字节）、而且这个规律适用于全部的数据元素，但是这种信息的作用不大。
我们还查到了一个叫作“VSFIXED_VIEW_DEFINITION”的固定视图°，它能够检案所有周定视图的
信息，顺便提一下，这个表有1023个元素，正好对应预定义视图的总数，
SQL> select * fron VSFIXED_VIEx_EFINTTIOs vhere viev_nase=*VSVERSIoN*;
VIEW_NAME
VIEW_DEFINITI08
V$VERSION
select BA&NER fron GVsVERSIo where inst_id = USEREsV(′Instance*)
可见，对于GVSVERSION而言，VSVERSION是thunk view（形实转换视图）；
SQL> select * fron VSFIXED_VIEX_DEFINITIOS vhere viev_nane='GVSVERSION′:
① 1988 年的 ANSI 标准请可参见笔者的情录: htp:/yuriche.cemirefFDra%20ANSI%20C%20Standand%20(ANSI%20X3J1-8-090)%20
(May%2013,%201988）.xt。作为对比，微软的标识符标准可参阅hps:/msdn.microsofL.com/m-us/ibrary/e7ly25b.aspx
②笔者通过挖据kqfviw和kqvip表里的数据。最终发现了这个现图的信息。
---
## Page 323
第81章Oracle RDBMS
799
VIDX_ANE
NOIAINIE3O KGTA
select inst_id, banner from xfversion
GVSVERSION
另外，在Oracle数据库里，那些官方文档没有介绍的、以XS开头的数据表同样是记载系统信息的服
务表。因为这些以XS开头的表由Oracle程序控制并动态更新的数据表，所以数据库用户不能修改它们。
如果我在文件 kqfo 里搜索文本 “select BANNER from GVSVERSION where inst_idUSERENV(Instance)”,
那么就会发现它在kqfvip表里。
指令清单81.2kqf.o
,rodata:080185A0 kqfvip
dd offset _2_STRI3G_11126_0 ; DATA XREF: kgfgvcn+18
-rodata: 080185A0
: rodata:080185A0
:kqfgvt+F
; "select Inst_1d, decode (1ndx, 1, *data 
 b1oc*
.rodata:080185A4
dd offset kgfvi59_c_0
-rodata:080185A8
DVS81080:*$*po3*
d 0
dd 0
-- -
-rodata: 08019570
dd offset _2_STRINS_113T8_0 : *select BAsNER from GV$VERSI0% 
 where in *...
-rodata: 08019574
ddoffset kgfv133_c_0
-rodata: 08019578
-rodata: 0801957c
dd  0
dd 0
-rodata:08019580
dd offset _2_StRISG_11379_o : *select inst_id, decode (bitand(
-rodata:08019584
↓ efflg,1), 0*...
0">"cosagbx 1osggo pp
-rodata:0801958c
rodata:08019588
0pp
-rodata:08019590
dd offset _2_STRIBG_11380_0 : *select STATUS , NAME, 
dd 0
↓ IS_RBCOVERY_DEST*...
rodata:08019594,
dd offset kgfv199_c_0
这个表的每个元素由4个字段构成。而且它同样包含了1023个元素。第二个字段指向了另一个表一也就
是与表名称相对应的固定视图。VSVERSION的表格只有2个元素，第一个是6（后面字符串的长度），第二
个是BANNER字符串。此后是终止符—零字节和C语言字符null。
指令清单81.3kqf.o
rodata:08088AC4 kqfv133_c_0
dd  6
: DATA XREF: -rodata: 08019574
.rodata:080BBACB
dd offset _2_STRING_5017_0 : *BAER*
- rodata:080BBACC
-rodata:080BBAD0
dd offset _2_STRING_0_0
0PP
因此可见，综合kqfviw和kqfvip表的各项信息，我们可以获悉某个固定视图都含有哪些可被查询的
字段。
基于上述分析结果，笔者编写了一个专门导出LinmuxOracle 数据库系统表的小程序—oracle_tables。
用它导出VSVERSION时，可得到如下所示的各项信息。
指令清单 81.4Result of oracle tables
kqfvip_element,statement: [select BANNER fron GVsvERstoN wbere Inst_id - Us&RENV(*Instance′1]
kqfviv_element,viexname: [v$vgRsIom] 7: 0x3 0x43 0x1 0xffffc085 0x4
① http/yurichey.com/oracle_ables.btml,
---
## Page 324
800
逆向工程权威指南（下册）
kqfvip_olenent.,parans:
[BANNER]
指令清单 81.5Result of oracle tables
kqfviw_element,viesmame: [GVsvERSIoN] ?: Dx3 0x26 0x2 0xffffc192 0x1
kqfvip_element.statenent: [select inst_id, banner from xSversion]
kqfvip_element -.parans:
[INST_ID][BANNER]
固定视图GVSVERSION比VSVERSION多出了一个“instance”字段，除此以外两者相同。因此，我们
只要专心研究数据表XSVERSION就可举一反三地理解另一个表。与其他名字以XS-开头的数据表一样，
这个表也没有资料可查。但是，我们可以直接对其进行检索：
SQL> select * fros xfversion,
A0DR
INDK
0I"ISNI
BANNER
0DBAF574
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Prodoction
这个表的字段名里有ADDR和INDX。
继续使用IDA分析kqf.o的时候，我们会发现在kqftab表里有一个指向XSVERSION字符申的指针。
指令清单 81.6kqf.o
rodata:0803CAC0
dd 9
1 element nunber 0x1f6
 rodata:0803CAC4
rodata:0803CAC8
dd
-rodata:0803CACC
offset _2_STRING_13114_0 : *kqvt*
PP
 rodata10803CADO
rodata:0803CAD4
dd
dd
4
 rodata: 0803CAD8
dd
0
-rodata:0803CADC
rodata: 0803CAE0
dd
0Ch
-rodata:0803CAE3
rodata: 0803CAE4
dd.
OFFFFC075h
rodata: 0803CABC
dd0
dd
-rodata10803CAF4
rodata:0803CAF0
-rodata: 0803CAF8
-rodata: 0803CAFC
dd 5
dly
-rodata:0803c800
rodata: 0803cB04
dd
dd
38h
rodata: 0803cB08
dd
dd
0
7
-rodata:0803c810
dd
dd
0FFFFC090h
-rodata:0803c818
-rodata:0803c81c
dd 0
dd2
上述指令中有很多处数据都引I用了以XS-开头的数据表名称。很显然，这些名字都是Oracle数据库的
数据表名称。签于公开资料没有这些信息，笔者还不能理解字符串“kqvt”的实际含义，“kq”前级的指
令，多数是与Kemel（内核）和query（查询）有关的指令。不过，至于“v是否是version的缩写”、“t是
否是type的缩写”，这些猜测都无法证明。
另外，kqfo文件里还记录了类似的数据表名称。
---
## Page 325
第81章Oracle RDBMS
801
指令清单81.7kqf.o
.rodata:0808c360 xkqvt_c_0
kqftap_pazan 
1 DATA XREF: -rodata:08042680
-rodata:0808c360
: “ADDR"
-rodata:0808c384
kgftap.paran *BANNER*
kqftap_param 
这些信息可以解释XSVERSION表中的所有字段。在kqftap表中，唯一一个引用这个表的指令如下所示。
指令清单81.8kqf.o
-rodata:08042680
↓ element 0x1f6
kqftap_elenent c0, offset kqrt_c_0, offset kqvrox, 0> : /
的指针一般。数据表kqftap和kqftab 之间的关系，很可能像kqfvip 和 kqfviw 之间的关系那样是某种互补
关系。我们还在其中找到了指向kqvrowO函数的函数指针。我们最终挖掘到了有价值的信息！
笔者把上述各表的有关信息也添加到了自制的oracle系统表查询工具—oracle_ables里°。用它检索
XSVERSION后，可得如下所示的各项信息。
指令清单 81.9Result of oracle tables
kqftab_element.nane: [xsveksIom]71 [kqvt]0x4 0x4 0x4 0xc 0xffffc075 0x3
0x0 0x0x 0x00x00x0t6x[oowru*se2ddrb
0x00x0x00x00x00x020x01[xoN1=owu*8e2ddeb
kgftap_param,name=[BANNsk] 7: 0x601 0x0 0x0 0x0 Ox50 0x0 0x0
0x0 0x0 xg 0x0 0x0 0x0 2ox0 [aIsN1wru*u2edde1bx
kqftap_element.fn1=kqvrow
kqgftap_element. fn2=NULL
借助笔者自创的tracer程序，我们不难发现：在查询XSVERSION表时，这个函数被连续调用了6次
(由 qerfxFetch( 函数)。
为了查看具体执行了哪些指令，我们以cc模式运行tracer程序：
_kqrrox_proc near
var_7C
= byte ptr -7Ch
var_18
- dword ptr -14h
8t- x1d pzoap =
var_14
Dest
= dvord ptr 
-10h
var_C
SO0- 11d p2oxp =
var_8
var_4
g- 11d proxp =
}- 1d pzoxp ×
arg_8
arg.C
= dvord ptr
10h
UT 11d pzoAp =
arg_14
R0Z 3d p3oxp =
= dxord ptr 10h
arg_18
: FUNCTION CHUNK AT -teXt1:056C11A0 SIZE 00000049 BYTES
① htp:/yurichev.com/oracle_ables.heml,
---
## Page 326
802
逆向工程权威指南（下册）
push
ebp
sub
mOV
ebp,
esp
esp.
[ebp+arg_14]:[E8P+1Ch]1
7Ch
nov
eax,
mOV
eCx,
TisIndex
Large fs:2Ch
0=[48083V69]