part of the protocol, we assume that each user will be involved in
only one protocol run at any given moment.
Wireless channelDevice BDevice AUser AUser BVisual channelA's hologramB's hologram(a) Users as seen outside of AR.
(b) View of User A.
(c) View of User B.
Figure 3: Views of both users as they are using the HoloPair system to pair their devices. UB needs to follow the generated
object with their hand, while UA observes the hand movements and confirms that they indeed correspond to the holographic
object generated on his DA from the value HW (K|PKA|PKB).
Role of human protocol participants. In order to prevent man-
in-the-middle attacks, the system relies on device owners to es-
tablish an out-of-band communication channel and authenticate
the exchanged keys. During this manual process, they are aided
by their AR headsets, thus allowing them to seamlessly confirm
relatively high entropy in comparison to previous approaches.
weak-hash commitment and visual acknowledgment in the security
analysis in Section 5.
4.2 Pairing Protocol
At the end of a successful protocol run, two previously unfamiliar
devices (DA and DB) should have exchanged and authenticated a
pair of public keys, which can subsequently be used to bootstrap
secure communication, for instance by deriving a shared symmetric
key. The protocol, shown in Figure 4, consists of the initial device
discovery and parameter agreement, followed by the three main
steps:
0. Prerequisites. UA initiates the protocol by broadcasting the
willingness to pair and distributing the public parameters of the
underlying cryptographic functions, together with the location of
the WorldAnchor. Any other device that receives the broadcast will
assume the role of DB as soon as their user confirms the willingness
to pair.
1. Public key exchange. UA sends their public key PKA and DB
responds by sending the public key PKB over the wireless channel.
2. Weak-Hash Commitment. Since the out-of-band visual chan-
nel has low bandwidth, using it to directly compare and authenticate
the exchanged keys would require unusably long time. Therefore,
human participants are usually required to compare values (strings,
images, colors, shapes) generated from different weak-hash func-
tions, which have significantly smaller output entropy, and thus a
larger probability of hash collision.
In order to prevent a man-in-the middle attacker from perform-
ing an off-line collision attack on the weak-hash by finding a suit-
able pair (PKA’, PKB’), UA commits to a specific instance of the weak-
hash, defined by randomly chosen value K and sends its hash to
UB. After DB receives the commitment H(K), UB is instructed to
acknowledge the receipt over the visual channel (for instance by
waving to UA), after which UA opens his commitment by sending
the encrypted value of K to UB. We further discuss the need for
The encrypted message also includes the WorldAnchor, which
specifies the origins of the shared coordinate system and the trans-
formations between two devices.
3. Shared Secret Confirmation. After exchanging the value K,
both devices can now independently compute the weak-hashes
from the received public keys, HW (K|PKA|PKB), which will be iden-
tical only if the exchanged keys are indeed authentic.
The reason for user participation in the protocol is to confirm
that the exchanged public keys are authentic, and consequently,
that the weak-hashes independently computed from their values
indeed match. By relying on the unique capabilities of AR head-
sets, we increase the usability of the comparison by guiding users
with holographic objects shown in space between them, which are
generated to uniquely encode the value of the weak-hash values
computed on their headsets.
Depending on the characteristics of the generated hologram, UB
is required to perform a specific gesture, while UA confirms that the
observed gesture matches his expectation. Finally, if UA concludes
that the shared key confirmation was successful, DA sends the full
hash H(K|PKA|PKB), which DB uses to confirm that the pairing was
indeed successful and displays the message to UB.
4.3 Gesture for Shared Secret Confirmation
We emphasize here that our protocol does not depend on the specific
gesture (or some other procedure) that users use to confirm that they
indeed share the same secret value K|PKA|PKB. Consequently, while
designing and developing the HoloPair system, we implemented and
tested several different versions of the shared secret confirmation,
which we fully describe in Appendix B.
We base the remainder of this paper on the shared secret con-
firmation scheme that was shown to be the best performing, both
in terms of theoretical security guarantees and subjective usability
in our pilot user study (Section 7.1). As depicted in Figure 2 and
visible in Figure 3, each independently computed weak-hash is used
to construct a holographic shape that consists of N positions on a
plane in the physical space between users. Given the exchanged
WorldAnchor and the precise positioning, both AR headsets show
guarantees in a short security sketch in Section 5.1 and then dis-
cuss the likelihood of a successful random hash collision attack in
Section 5.2.
5.1 Security Sketch
The attacker succeeds if he is able to eavesdrop on the communica-
tion between A and B after the protocol execution. Given that we
base out protocol on existing proposals for establishing secure com-
munication that are based on comparison of short secrets, we refer
to earlier work for an extensive security proof [25] and provide an
overview of the arguments in several claims:
Claim 1. In order to successfully eavesdrop on subsequence com-
munication, the adversary must force legitimate users UA and UB
to agree on a different set of public keys than they originally envi-
sioned, PKA’, PKB’ without aborting the protocol execution. Other-
wise, protocol participants would assume that the exchanged keys
are not safe to use and likely repeat the protocol.
Claim 2. Since the attacker can not remain undetected if he tries
intruding the out-of-band holographic channel in the last step, he
must ensure that the out-of-band shared secret confirmation fin-
ishes successfully from both participants’ point of view. Assuming
attentive users (we discuss this assumption later), this can happen
only if the weak hashes computed by both DA and DB are equal,
namely that HWA(K|PKA|P′
Claim 3. Even though the entropy of HW is not large, the attacker
who tries impersonating UA to UB is required to commit to some
value K’ in Step 2, before discovering the value K (actually chosen
by UA) in Step 3. This prevents the attacker from being able to
perform an extensive off-line search for some suitable K’ in the
smaller output space of potential values of HW that would result in
a weak-hash collision. As a result, the likelihood of choosing such
K’ that results in exactly the right combination of PKA’, PKB’, and K’
is inversely proportional to the output space of HW . We emphasize
that the MITM attacker could only learn the plaintext value of K
send by UA after already committing to some values PKA’ and K’
towards UB. Consequently, the attacker has no means of finding
alternative values PKA’ and PKB’ whose resulting holograms appear
more similar to human participants than any randomly chosen pair
of weak-hashes.
Claim 4. Despite the initial exchange of the WorldAnchor over
the insecure channel, its modification does not help the attacker
since it can only cause a linear translation of UB’s holograms in
the physical space. This would result in a mismatch between the
positioning of holograms shown to UA and UB, and cause one of
the participants to abort the protocol.
KB) = HWB(K′|P′
KA|PKB).
Figure 4: The protocol consists of three main steps. (1) Us-
ing the insecure channel, the devices exchange their pub-
lic keys. (2) Next, device A commits to a specific instance of
the weak-hash HW and privately opens it after UB acknowl-
edges receipt. (3) Finally, UB uses the low-bandwidth visual
channel (dashed lines) to communicate the weak-hash HWB ,
which UA verifies and confirms/aborts the execution in the
last message.
the holographic shapes at exactly the same location. In order to
verify that the constructed shapes match, UA observes (on the vi-
sual channel) as UB moves their finger along the generated shape
and thus confirms that the weak-hashes generated on both devices
indeed match, which is only possible if the exchanged public keys
and the value K are authentic.
5 SECURITY ANALYSIS
We now evaluate the design of the HoloPair system according to
the security goals from Section 3.3. First, we analyze the protocol’s
In conclusion, the attacker whose goal is to position himself
as a passive man-in-the-middle between DA and DB during their
initial pairing has no better choice than trying to randomly guess
a pair of replacement keys PKA’, PKB’ that would yield the same
hashes HW on both devices. Consequently, his chance of success
is inversely proportional to the entropy of the output space of the
weak-hash HW , which directly depends on the chosen variant of the
holographic shared secret confirmation. We analyze this probability
in the next section.
UserAUAUserBUBPKAPKB1)PublicKeyExchangeGenerateRandomKH(K)”(1)WaveatUA”ACK”(1)ConﬁrmthatUBhaswaved”{K}PKB2)Weak-hashCommitment”(2)PerformgesturebasedonHW”Gesture(cid:2)HW(K|PKA|PKB)(cid:3)”(2)ConﬁrmthatUB’sgesturesmatchHW”H(K|PKA|PKB)/”Abort”3)SharedSecretConﬁrmationARHeadsetPairingProtocol5.2 Probability of a Weak-hash Collision
We now analyze the likelihood that a different pair of keys still re-
sults in a weak-hash collision HWA(K|PKA|P′
KB) = HWB(K′|P′
KA|PKB),
for the shared secret version of the confirmation step described in
Section 4.3. We analyze the other two variants of the shared secret
confirmation in Appendix B.
The shape of each possible instance of the shared hologram
is uniquely determined by its N coordinate pairs (Xi , Yi). In our
implementation, we use a total of 10 different values for both Xi and
Yi, which results in a probability that another pair of keys results
in exactly the same shared hologram to be:
P(N) =
1
(10 × 10)N
=
1
100N
We note here that due to headsets’ holographic guidance, the
theoretical entropy of the shared secret confirmation step is sig-
nificantly larger than, for instance if users would be required to
reading a sequence of strings or digits of a given number, as has
been proposed in previous work. This additionally confirms the us-
ability benefits that mixed reality devices can offer to many existing
systems and security schemes.
Finally, by adapting the length of the sequence (defined by N )
each of the variants of the confirmation step can be adapted based
on the security needs and expectations of a specific scenario.
5.3 User Inattentiveness
Given the high output entropy of the used gestures for shared secret
confirmation, it is likely that the most probable reason of attack
success is user inattentiveness, which results in users not verifying
the sequence carefully, or even immediately clicking"Accept Gesture"
before any gesture was made by UB.
The problem of user attentiveness is a challenging one, both in
terms of performance evaluation, and in terms of designing inter-
faces that would encourage one to pay attention that has received
wide interest from the research community [24].
In order to give an estimate of the ability of HoloPair users to
detect potential attacks, in the next section describe a working
prototype of the HoloPair system. We use the prototype to run a
user study with 22 participants in which we simulate a man-in-the-
middle attack in 20% of pairing attempts to experimentally evaluate
the security guarantees of the HoloPair system.
6 SYSTEM PROTOTYPE
In order to experimentally evaluate the feasibility, security guaran-
tees, and performance of the proposed HoloPair system, we build
a working prototype using two Microsoft’s HoloLens devices and
we make the source code and the implementation available to the
public.
6.1 Source Code and Development
The prototype is written in the C# programming language, using
the Unity framework [13]. When building the functionality spe-
cific to HoloLens, we rely the components from Microsoft’s official
HoloToolkit-Unity repository, which provides functionality such
as spatial mapping, world anchors and gesture recognition.
HoloToolkit-Unity is a public repository on GitHub, with many
contributions (merged pull-requests) coming from the wider devel-
oper community. We thus created a fork of the official repository,
and packaged our prototype as one of the provided examples ac-
cording to Microsoft’s instructions. Excluding external references,
our prototype consists of 1731 lines of C# code, which are located
in the Assets/HoloToolkit-Examples/HoloPair folder.
The source code is available online. Since the motivation be-
hind our work was not only to suggest a suitable pairing protocol,
but also to improve the current security practices of the Windows
Mixed Reality platform, we have started the process to have our
code included into the official HoloToolkit-Unity repository. Fur-
thermore, the source code of the prototype implementation is pub-
licly available at:
https://tinyurl.com/holopair
Building and Contributing. In order to build and run HoloPair,
one should clone the repository, load the main HoloToolkit project
in Unity, and open the HoloPair scene. After creating a Visual
Studio solution from Unity, the solution should be deployed on two
HoloLens devices connected on the same wireless network. The
first device that loads the application will assume the role of DA,
while the other will assume the role of DB.
We have made our best-effort to make the code readable and
easily extensible for further development. Since we plan to continue
actively developing the HoloPair prototype, we will gladly accept
any comments, suggestions, or pull requests.
6.2 Main Implementation Components
We now briefly discuss the implementation of the main components.
Networking and device discovery. We use Unity’s High-Level
Networking API to discover other devices that are running the
HoloPair prototype by broadcasting/listening to a specific message
on a dedicated port. While our current prototype assumes that
devices share the same wireless network, there is no limitation to
extend the prototype and support direct ad-hoc wireless connec-
tions in the future.
Cryptographic functions. We use the standard Microsoft’s im-
plementations of the 2048-bit RSA PKCS1 for asymmetric cryptog-
raphy and 256-bit SHA2 for hashing.
Constructing the shared hologram from the weak-hash. The
shapes that represent weak-hashes are generated by extracting bits
from the base-64 string representation of the full hash in order to
generate N coordinates that define them. In our implementation,
for each of N points that comprise the shape, we extract sufficient
number of binary bits to generate one of 10 different X coordinates
and one of 10 different Y coordinates.
Hologram sharing - establishing the shared world anchor. In
order for multiple devices to show the identically located content to
their users, they must first agree on a shared coordinate system that
will be used as a frame of reference regardless of users’ subsequent
movements. In our prototype, we use HoloToolkit’s implementation
of "World Anchoring", which in most cases achieves positioning
errors smaller than a few centimeters.
Positioning of the shared holograms. In our current implemen-
tation, the shared hologram is shown on a line between users,
initially 1.5 m from UB, and then moves towards the UB during a
period of 3 seconds, to finish at a distance of 0.85 m. We’ve made
the design decision to implement such movement in order to ame-
liorate the slightly limited field of view of the current version of
HoloLens (30° × 17.5°). This allows UB to first get the full view of
the shape, and then to be close enough so that they can reach it
with their hands.
Confirming protocol success & aborting. In the current proto-
type, UA confirms that the observed gesture was correct by gaz-
ing at UB’s head and performing a click gesture, for which we
use HoloLens’ gesture recognition module. We deliberately use a
gesture instead of voice commands to prevent the attacker from
making an attack successful by simply generating, potentially even
inconspicuously [6], a confirmation voice command.
However, we believed that it would be more convenient to use
voice recognition for the case when users suspect to have detected
an attack attempt. In such cases, we asked users to say "Abort",
expecting to increase usability over the gaze and click gesture. We
discuss this (false) intuition in further detail in Section 8.
6.3 User Experience
As shown in Figure 3, despite the seemingly large number of proto-
col steps, HoloPair users are required to perform only two manual
steps in order to securely pair their AR headsets.