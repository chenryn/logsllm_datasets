regard this as experimental error, as the differences
within the tests exceeded the differences between the
tests. We believe this is because the cost of creating a
non-existent file is dominated by the state of the file
system on disk.
Fork: measure the overhead of copying the RaceGuard
cache. This test exhibited significant variances, and
so  we  enhanced  measurement  to  run  the  test  100
times and took the average. The variance was present
in both the RaceGuard and non-RaceGuard tests, so
it was not induced by RaceGuard.
Thus there is substantial overhead only in stat’ing non-
existent files, and that cost is dwarfed by the cost of cre-
ating  files.  This  operation  does  not  represent  a  large
amount of time in a real workload, as we show in our
macrobenchmarks in Section 6.2.
6.2 Macrobenchmarks
To stress-test RaceGuard at the macro level, we sought
an application that incurred a substantial amount of run
time, used many temporary files, and did a lot of fork-
ing. Our first selected test is what we call the Khernel-
stone1: the time to build the SRPM of the Linux kernel,
which  builds  the  kernel  from  its  1800  C  and  assorted
assembly  source  files,  several  times.  Thus  this  test
incorporates several thousand forks and temporary files.
The test was run on a single-processor 700 MHz Athlon
machine with 128 MB of RAM.
We ran this test four times each with and without Race-
Guard.  The  results  showed  very  little  variation.  The
averages  of  the  four  runs  are  shown  in  Table  2.  In  all
cases (real time, user time, and system time) the over-
head due to RaceGuard was always below 0.5%.
Our  second  macrobenchmark  was  the  Apache  web
server  [3]  measured  by  the  Webstone  benchmark  tool
[16]. Webstone simulates various web server workloads,
varying the number of concurrent clients and the size of
the  requests.  Webstone  measures  a  variety  of  factors,
including connection  latency, and server  throughput  in
terms of both connections per second and bytes per sec-
ond.  Webstone  only  stresses  the  web  server  machine,
which in this case was a dual processor 700 MHz Pen-
1. After the venerable Dhrystone integer performance 
benchmark [20], which in turn is a reference to the 
Whetstone floating point benchmark.
Table 2: Khernelstone Macrobenchmark, in Seconds
Without RaceGuard
With RaceGuard
%Overhead
Real Time
10,700
10,742
0.4%
User Time System Time
901
904
0.3%
8838
8858
0.2%
tium III, 256 KB of cache, 256 MB of RAM, and a 100
Mbit network to the client.
this  range, 
We ran the Webstone test through a range from 25 con-
current clients to 200 concurrent clients. While perfor-
mance  varies  substantially  across 
the
difference between the RaceGuard and non-RaceGuard
cases was always in the noise. WebStone runs each test
case three times, and when ever one test run showed one
of  the  cases to be ahead,  another test case showed the
opposite. In almost all cases, the RaceGuard average is
within the non-raceguard average +/- the non-raceguard
standard deviation. There are only three cases in which
the RaceGuard  average  is  outside the  deviation  and  in
each of those three instances we’re outside because we
do slightly better.1
We  draw  two  conclusions  from  these  tests.  First,  they
are apparently not particularly effective at highlighting
the costs of RaceGuard. Second, and more importantly,
it shows that the performance overhead of RaceGuard is
imperceptible for common, heavy workloads.
7  Related Work
The  study of temporary file  race  vulnerabilities is old:
Abbott  et  al  [1]  and  then  Bisbey  &  Hollingsworth  [5]
described them as a subclass of timing or synchroniza-
tion  flaws.  Yet  despite  the  depth  of  past  study  of  this
problem, a practical solution is apparently still needed:
temporary  file  race  vulnerabilities  were  found  in  core
Internet  infrastructure  tools  such  as  Apache  in  2001
[13].
Bishop’s seminal paper [6] formally defined the notion
of a TOCTTOU (Time Of Check To Time Of Use) error
as  being  two  sequential  events  in  which  the  second
depends on the first, and that there is a faulty assump-
tion  that  results  from  the  first operation  will  persist  to
the second operation. Bishop presents a partial solution
to TOCTTOU vulnerabilities in the form of a program
scanning program to detect some potential TOCTTOU
1. We do not claim that RaceGuard is a performance 
enhancement, only that performance cost is smaller 
than experimental error.
vulnerabilities  in  C  code,  but  also  presents  theorems
showing  that  detecting  statically  TOCTTOU  flaws  is
undecidable.
Bishop  discusses  the  possibility  of  a  run-time  TOCT-
TOU  detector  that  modifies  system  call  interfaces  to
track the arguments to system calls, and the association
of file descriptors and names, abstractly similar to Race-
Guard.  Bishop  does  not  elaborate  this  proposal  due  to
performance concerns. RaceGuard overcomes these per-
formance difficulties by narrowing the scope and dura-
tion of the information to be tracked, showing that near
precise  file  system  race  attacks  can  be  detected  at  run
time with very low performance costs.
“Solar Designer” [10] takes a different approach to com-
bating  temporary  file  race  vulnerabilities.  Rather  than
attacking  the  “race”  aspect,  this  enhancement  to  the
Linux kernel attacks the propensity for privileged pro-
grams  to  create  and  follow  links.  Two  restrictions  are
imposed:  processes  will  not  follow  links  in  directories
with the +t (“sticky”) bit set unless the owner is trusted
(same UID as the process, or owns the directory), and
processes  are  not  allowed  to  create  hard  links  to  files
that they do not own.
While  effective  in  many  cases,  this  approach  unfortu-
nately  gets  mixed  results.  Some  programs  (wrongly)
create temporary files in other file systems, e.g. the cur-
rent working directory. We have also observed real pro-
grams that insist on linking to files that they do not own,
e.g.  the  Courier  mail  server  [19]  which  uses  links  to
optimize the order of mail delivery, and makes links to
files with a different UID but a shared GID.
8  Conclusions
Temporary  file  race  vulnerabilities  have  been  a  perva-
sive security problem for over a decade. There are safe
methods to create temporary files, but they are not por-
table, and thus common programs continue to use vul-
nerable-but-portable  temporary  file  methods  such  as
mktemp.  RaceGuard  protects  vulnerable  programs
against  this  problem,  even  if  the  program  insists  on
using unsafe means, and regardless of whether the pro-
gram  is  using  an  unsafe  library,  or  “rolled  their  own”
[10]  “Solar  Designer”.  Root  Programs  and  Links.
http://www.openwall.com/linux/.
[11]  Mendel Rosenblum 
VMWare.
http://www.vmware.com/ , February 1998.
et al. 
[12]  Tomasz 
Kloczko. 
Utilities.
http://freshmeat.net/projects/sha
dow/ , October 2000.
Shadow 
[13]  Greg  Kroah-Hartman.  Immunix  OS  Security
update  for  lots  of  temp  file  problems.  Bugtraq
mailing 
list,
http://www.securityfocus.com/arch
ive/1/155417, January 10 2001.
[14]  MagniComp. 
RDist.
http://www.magnicomp.com/rdist/  ,
July 1999.
[15]  RCS Maintainers. RCS: Revision Control System.
http://www.cs.purdue.edu/homes/tr
inkle/RCS/ , December 2000.
[16]  Mindcraft.  WebStone  Standard  Web  Server
Benchmark.
http://www.mindcraft.com/webstone
/.
[17]  Jerome H. Saltzer and Michael D. Schroeder. The
Protection  of  Information  in  Computer  Systems.
Proceedings of the IEEE, 63(9), November 1975.
[18]  Securityfocus.com. 
Search.
http://search.securityfocus.com/s
earch.html, 1997-2001.
Vulnerability 
[19]  Sam  Varshavchik.  Courier  Mail  Transfer  Agent.
http://www.courier-mta.org/, 1999.
[20]  Reinhold P.  Weicker.  Dhrystone:  A  Synthetic
Systems 
Benchmark.
Communications  of  the  ACM,  27(10):1013–1030,
October 1984.
Programming 
unsafe temporary file creation method. We have shown
that  RaceGuard  is  effective  in  stopping  attacks,  and
imposes  minimal  compatibility  and  performance  over-
head.  RaceGuard  is  available  as  a  GPL’d  patch  to  the
Linux kernel,  and  is  incorporated  into  WireX’s  Immu-
nix server products.
References
[1]  R.P.  Abbott,  J.S.  Chin,  J.E.  Donnelley,  W.L.
Konigsford, S. Tokubo, and D.A. Webb. Security
Analysis 
and  Enhancements  of  Computer
Operating  Systems.  NSBIR  76-1041,  National
Bureau of Standards, April 1976.
[2]  Assorted. 
Diffutils.
http://www.gnu.org/software/diffu
tils/ , June 2000.
GNU 
[3]  Brian  Behlendorf,  Roy T.  Fielding,  Rob  Hartill,
David  Robinson,  Cliff  Skolnick,  Randy  Terbush,
Robert S.  Thau,  and  Andrew  Wilson.  Apache
HTTP 
Project.
http://www.apache.org.
Server 
[4]  Brian Berliner, david d ‘zoo’ zuhn, Jeff Polk, and
System.
et al. 
http://www.cyclic.com/, 1999.
Concurrent 
Versions 
[5]  R. Bisbey 
and  D. Hollingsworth.  Protection
Analysis  Project  Final  Report.  Technical  Report
ISI/RR–78-13, 
Sciences
Institute, May 1978. DTICAD A 056816.
USC/Information 
[6]  M. Bishop  and  M. Digler.  Checking  for  Race
Conditions  in  File Accesses.  Computing  Systems,
9(2):131–152,  Spring  1996.  Also  available  at
http://olympus.cs.ucdavis.edu/ bi
shop/scriv/index.html.
[7]  Crispin  Cowan,  Matt  Barringer,  Steve  Beattie,
Greg  Kroah-Hartman,  Mike  Frantzen,  and  Jamie
Lokier. FormatGuard: Automatic Protection From
printf  Format  String  Vulnerabilities.  In  USENIX
Security  Symposium,  Washington,  DC,  August
2001.
[8]  Crispin  Cowan,  Steve  Beattie,  Calton  Pu,  Perry
Wagle, 
SubDomain:
Parsimonious  Server  Security.  In  USENIX  14th
Systems  Administration  Conference  (LISA),  New
Orleans, LA, December 2000.
and  Virgil  Gligor. 
[9]  Crispin  Cowan,  Perry  Wagle,  Calton  Pu,  Steve
Beattie, and Jonathan Walpole. Buffer Overflows:
Attacks and Defenses for the Vulnerability of the
Decade.  In  DARPA  Information  Survivability
Conference  and  Expo  (DISCEX),  January  2000.
Also  presented  as  an  invited  talk  at  SANS  2000,
2000, 
March 
FL,
http://schafercorp-
ballston.com/discex.
Orlando, 
23-26,