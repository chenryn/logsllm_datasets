5. Output VK.
6. While Mj ∈ Q is received:
$← K2,i : i ∈ [1, λ]. Let K1{τ} ← PunctureF1(K1, τ). Let y = F1(K1, τ). Let
i=1F1(K1, tj(cid:107)i(cid:107)M(i)) and s2j = ⊕λ
(a) Let s1j = ⊕l
(b) Compute sj = s1j ⊕ s2j. Let σj = (tj, sj).
(c) Output σj.
7. Receive (M∗, σ∗).
i=1F2,i(K2,i, t(i)
j ).
SigCheckA :
Inputs : M, σ
Constants : Punctured PRF key K1{τ}, keys (K2,i)λ
(t, s) ← σ
s2 ← ⊕λ
if t(cid:107)ˆi(cid:107)M(ˆi) = τ then
i=1F2,i(K2,i, t(i))
i=1. Strings ˆi, τ, z.
else
if f(s ⊕ s2 ⊕i(cid:54)=ˆi F1(K1{τ}, t(cid:107)i(cid:107)M(i))) = z then output 1 else output ⊥
if s ⊕ s2 = ⊕l
i=1F1(K1{τ}, t(cid:107)i(cid:107)M(i)) then output 1 else output ⊥
end if
A succeeds if M∗ (cid:54)∈ Q and VK(M∗, σ∗) = 1 and if t∗ = tˆj and M∗(ˆi) = ˆb and ˆb (cid:54)= Mˆj(ˆi).
Game 4 In this game the constant y, used to create z in SigCheckA, is replaced with a random λ-bit string.
The other parts of the game do not change.
$← {0, 1}λ for all j ∈ [1, n].
$← K1 and K2,i
1. Let tj
2. Choose (ˆi, ˆj) in [1, l] × [1, n] and ˆb in {0, 1} at random. Let τ = tˆj(cid:107)ˆi(cid:107)ˆb.
3. Pick K1
4. Let VK = iO(λ, SigCheckA).
5. Output VK.
6. While Mj ∈ Q is received:
{0, 1}λ. Let z = f(y).
$← K2,i : i ∈ [1, λ]. Let K1{τ} ← PunctureF1(K1, τ). Choose y at random in
i=1F1(K1, tj(cid:107)i(cid:107)M(i)) and s2j = ⊕λ
(a) Let s1j = ⊕l
(b) Compute sj = s1j ⊕ s2j. Let σj = (tj, sj).
(c) Output σj.
7. Receive (M∗, σ∗).
i=1F2,i(K2,i, t(i)
j ).
A succeeds if M∗ (cid:54)∈ Q and VK(M∗, σ∗) = 1 and if t∗ = tˆj and M∗(ˆi) = ˆb and ˆb (cid:54)= Mˆj(ˆi).
Claim 1. Suppose there exists a PPT adversary A making a type I forgery such that AdvGame1A,Π = . Then
the advantage of A in Game 2, i.e. AdvGame2A,Π , is bounded below by /(2nl).
8
Proof. For any message M∗ submitted by A, since σ∗ is a type I forgery, there exists Mj ∈ Q such that the
signature σj satisﬁes tj = t∗. On the other hand, since M∗ (cid:54)= Mj, there exists some bit position i ∈ [1, l]
for which M∗(i) (cid:54)= Mj(i). Since the challenger chooses (ˆi, ˆj, ˆb) randomly in [1, l] × [1, n] × {0, 1}, the event
(ˆi, ˆj, ˆb) ?= (i, j, M∗(i)) occurs with probability 1/(2nl). The claim then follows from the fact the view of A
in Game 1 is identical to its view in Game 2.
Claim 2. Suppose there exists a PPT adversary A for which AdvGame2A,Π − AdvGame3A,Π =  is non-negligible.
Then we can construct an attacker B with advantage  in distinguishing the output of the indistinguishability
obfuscator.
i=1, K1, (K2,i)λ
i=1F1(K1, t(cid:107)i(cid:107)M(i)) ⊕ s2 ⇔ s ⊕ s2 = ⊕l
Proof. We ﬁrst demonstrate the functional equivalence of circuits SigCheck and SigCheckA. Consider a
claimed signature (M, σ) which is input to the latter circuit. If it holds that t(cid:107)ˆi(cid:107)M(ˆi) (cid:54)= τ, then since the
2nd component of τ is ˆi, t(cid:107)i(cid:107)M(i) (cid:54)= τ for all i ∈ [1, l]. Therefore F1(K1{τ}, t(cid:107)i(cid:107)M(i)) = F1(K1, t(cid:107)i(cid:107)M(i))
for all i ∈ [1, l], since the punctured PRF key preserves functionality outside the punctured point. Thus
s = ⊕l
i=1F1(K1{τ}, t(cid:107)i(cid:107)M(i)). On the other hand, if t(cid:107)ˆi(cid:107)M(ˆi) =
i=1F1(K1, t(cid:107)i(cid:107)M(i)) ⇔ s ⊕ s2 ⊕i(cid:54)=ˆi F1(K1{τ}, t(cid:107)i(cid:107)M(i)) = F1(K1, τ) ⇔ f(s ⊕ s2 ⊕i(cid:54)=ˆi
τ, then s = ⊕l
F1(K1{τ}, t(cid:107)i(cid:107)M(i))) = f(y), since f is injective. Consider the adversary B = (Samp, D). The algorithm
$← {0, 1}λ for j ∈ [1, n]. Next it picks random (ˆi, ˆj, ˆb) in [1, l]×[1, n]×{0, 1}, computes
Samp on 1λ chooses tj
i=1,ˆi, ˆj, b).
string τ and outputs C0 = SigCheck and C1 = SigCheckA. It sets state δ = ((tj)n
Now the distingisher D on input (δ, iO(λ, Cz)) sends VK = iO(λ, Cz) as well as a signature σj on each mes-
sage Mj received from A. If A outputs a pair (M∗, σ∗) for which M∗ (cid:54)∈ Q, VK(M∗, σ∗) = 1 and M∗(ˆi) = ˆb
and ˆb (cid:54)= Mˆj(ˆi) then D outputs 1, otherwise ⊥. If z = 0 then B simulates Game 2. Otherwise B simulates
Game 3. The claim follows.
Claim 3. Suppose there exists a PPT adversary A for which AdvGame3A,Π − AdvGame4A,Π =  is non-negligible.
Then we can construct an attacker B with advatange  in distinguishing the output of the puncturable PRF
F1(K1,·).
Proof. Simulator B interacts with the puncturable PRF challenger while acting as a challenger to A. First
B chooses tj
$← {0, 1}λ for j ∈ [1, n]. Next it chooses (ˆi, ˆj, ˆb) at random from [1, l] × [1, n] × {0, 1} and
computes string τ. B submits point τ to the PRF challenger and receives punctured key K1{τ} and PRF
challenge y(cid:48) in return. B then computes z = f(y(cid:48)) and computes an obfuscation of SigCheckA. It sends
VK = iO(λ, SigCheckA) and a signature σ on every received message Mj.
If A submits (M∗, σ∗) which
meets the winning condition, then B outputs 1, otherwise ⊥. If y(cid:48) = F1(K1, τ) then B simulates Game 3.
Otherwise y(cid:48) is a random w-bit string and B simulates Game 4. The claim follows.
Claim 4. Suppose there exists a PPT adversary A such that AdvGame4A,Π =  is non-negligible. Then we can
construct an adversary B with advantage  in inverting the one way function.
Proof. Simulator B interacts with the one way function challenger while acting as a challenger to A. First B
$← {0, 1}λ
receives the challenge z(cid:48) = f(a) as an input, where a is a w-bit random string. Then it chooses tj
for j ∈ [1, n]. Next it chooses (ˆi, ˆj, ˆb) at random from [1, l] × [1, n] × {0, 1} and computes string τ.
It
computes punctured key K1{τ} and an obfuscation of SigCheckA with z(cid:48) hardwired in place of z. Since
z(cid:48) is identically distributed to z, the view of A is identical to its view in Game 4.
It sends VK and
signatures on every received message Mj. Then with probability , A outputs (M∗, σ∗) such that M∗ (cid:54)∈ Q,
2 ⊕i(cid:54)=ˆi F1(K1{τ}, t(cid:107)i(cid:107)M∗(i)) which
VK(M∗, σ∗) = 1 and t∗(cid:107)ˆi(cid:107)M∗(ˆi) = τ. Thus B can compute a∗ = s∗ ⊕ s∗
satisﬁes a∗ = f−1(z(cid:48)).
Suppose that there exists a PPT adversary A with non-negligible advantage  in breaking the adaptive
security of the signature scheme, i.e.
in winning Game 1. Let the maximal advantage of any adversary
in distinguishing the output of the indistinguishability obfuscator and in distinguishing the output of the
puncturable PRF be iO and P RF respectively. Claims 1 - 4 then imply that A has probability atleast
9
/(nl) − iO − P RF in inverting the one way function f. Since n and l are polynomially bounded, the ﬁrst
term is non-negligible and since iO is a secure indistinguishability obfuscator and F1 is a secure puncturable
PRF the second and third terms are negligible. This contradicts the non-invertibility of f. It follows that
the advantage of A in Game 1 must be negligible. This concludes the proof of Lemma 1.
Lemma 2. Suppose that adversary A in the adaptive security game makes a type II forgery with probability
II. Then we can construct B that inverts the one way function f with probability II /(nλ) − negl(λ).
Proof. Similar to the proof of Lemma 1, we proves this result by a hybrid argument.
Game 1 This is the original security game in which the attacker receives the veriﬁcation key, and then
queries for signatures on messages adaptively. Let Q be the set of queried messages. In the ﬁnal step an
attacker outputs (M∗, σ∗). Here σ∗ = (t∗, s∗) and t∗ (cid:54)= tj for all signatures σj on Mj ∈ Q.
$← {0, 1}λ for all j ∈ [1, n].
1. Let tj
2. Pick K1
3. Let VK = iO(λ, SigCheck). Here the circuit SigCheck is padded if necessary, such that its size is equal
$← K1 and K2
$← K2.
to that of later inputs to the obfuscator.
4. Output VK.
5. While Mj ∈ Q is received:
i=1F1(K1, tj(cid:107)i(cid:107)M(i)) and s2j = ⊕λ
(a) Let s1j = ⊕l
(b) Compute sj = s1j ⊕ s2j. Let σj = (tj, sj).
(c) Output σj.
6. Receive (M∗, σ∗).
i=1F2,i(K2,i, t(i)
j ).
A succeeds if M∗ (cid:54)∈ Q and VK(M∗, σ∗) = 1.
Game 2 In this hybrid we change the winning condition. First the challenger choose indices (i(cid:48), j(cid:48)) in
[1, λ] × [1, n] at random. Suppose an attacker in the ﬁnal step outputs (M∗, σ∗). The winning condition
enforces an additional check that t∗ and tj(cid:48) have shortest diﬀering preﬁx of length i(cid:48).
$← {0, 1}λ for all j ∈ [1, n].
1. Let tj
2. Choose (i(cid:48), j(cid:48)) in [1, λ] × [1, n] at random. Let p = t(i(cid:48))
3. Pick K1
4. Let VK = iO(λ, SigCheck). Here the circuit SigCheck is padded if necessary, such that its size is equal
$← K2,i : i ∈ [1, λ].
$← K1 and K2,i
j(cid:48) ⊕ ei(cid:48).
to that of later inputs to the obfuscator.
5. Output VK.
6. While Mj ∈ Q is received:
i=1F1(K1, tj(cid:107)i(cid:107)M(i)) and s2j = ⊕λ
(a) Let s1j = ⊕l
(b) Compute sj = s1j ⊕ s2j. Let σj = (tj, sj).
(c) Output σj.
7. Receive (M∗, σ∗).
i=1F2,i(K2,i, t(i)
j ).
A succeeds if M∗ (cid:54)∈ Q and VK(M∗, σ∗) = 1 and if t∗(i(cid:48)) = p.
10
Game 3 In this game the challenger creates the veriﬁcation key as an obfuscation of an alternate veriﬁcation
circuit SigCheckB. First the challenger computes a puncturing of the secret key K2,i(cid:48) at string p. Let
y = F2,i(K2,i, p). The challenger uses the punctured key K2,i(cid:48){p}, punctured value y and the injective OWF
f to generate SigCheckB.
$← K2,i : i ∈ [1, λ]. Let K2,i(cid:48){p} ← PunctureF2,i(cid:48) (K2,i(cid:48), p). Let y = F2,i(cid:48)(K2,i(cid:48), p).
j(cid:48) ⊕ ei(cid:48).
$← {0, 1}λ for all j ∈ [1, n].
$← K1 and K2,i
1. Let tj
2. Choose (i(cid:48), j(cid:48)) in [1, λ] × [1, n] at random. Let p = t(i(cid:48))
3. Pick K1
4. Let VK = iO(λ, SigCheckB).
5. Output VK.
6. While Mj ∈ Q is received:
Let z = f(y).
i=1F1(K1, tj(cid:107)i(cid:107)M(i)) and s2j = ⊕λ
(a) Let s1j = ⊕l
(b) Compute sj = s1j ⊕ s2j. Let σj = (tj, sj).
(c) Output σj.
7. Receive (M∗, σ∗).
i=1F2,i(K2,i, t(i)
j ).
SigCheckB :
Inputs : M, σ
Constants : PRF keys K1, (K2,i)i(cid:54)=i(cid:48), punctured key K2,i(cid:48){p}. Strings i(cid:48), p, z.
(t, s) ← σ
s1 ← ⊕λ
if t(i(cid:48)) = p then
i=1F1(K1, t(cid:107)i(cid:107)M(i))
else
if f(s ⊕ s1 ⊕i(cid:54)=i(cid:48) F2,i(K2,i, t(i))) = z then output 1 else output ⊥