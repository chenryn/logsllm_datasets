            (node1) Copying /Users/vkohli/.docker/machine/cache/
            boot2docker.iso to /Users/vkohli/.docker/machine/
            machines/node1/boot2docker.iso... 
            (node1) Creating VirtualBox VM... 
            (node1) Creating SSH key... 
            (node1) Starting the VM... 
            (node1) Check network to re-create if needed... 
            (node1) Waiting for an IP... 
            Waiting for machine to be running, this may take a few minutes... 
            Detecting operating system of created instance... 
            Waiting for SSH to be available... 
            Detecting the provisioner... 
            Provisioning with boot2docker... 
            Copying certs to the local machine directory... 
            Copying certs to the remote machine... 
            Setting Docker configuration on the remote daemon... 
            Checking connection to Docker... 
            Docker is up and running! 
            To see how to connect your Docker Client to the 
            Docker Engine running on this virtual machine, run: 
            docker-machine env node1
    ```
3.  同样创建一个`node2`虚拟机，稍后将配置为 UCP 节点:
    ```
            $ docker-machine create -d virtualbox --virtualbox-memory 
            "2000" node2 
            Running pre-create checks... 
            Creating machine... 
            (node2) Copying /Users/vkohli/.docker/machine/cache/boot2docker.iso 
            to /Users/vkohli/.docker/machine/machines/node2/
            boot2docker.iso... 
            (node2) Creating VirtualBox VM... 
            (node2) Creating SSH key... 
            (node2) Starting the VM... 
            (node2) Check network to re-create if needed... 
            (node2) Waiting for an IP... 
            Waiting for machine to be running, this may take a few minutes... 
            Detecting operating system of created instance... 
            Waiting for SSH to be available... 
            Detecting the provisioner... 
            Provisioning with boot2docker... 
            Copying certs to the local machine directory... 
            Copying certs to the remote machine... 
            Setting Docker configuration on the remote daemon... 
            Checking connection to Docker... 
            Docker is up and running! 
            To see how to connect your Docker Client to the 
            Docker Engine running on this virtual machine, 
            run: docker-machine env node2
    ```
4.  将`node1`配置为 UCP 控制器，负责为 UCP 应用提供服务，并运行管理 Docker 对象安装的流程。在此之前，设置环境将`node1`配置为 UCP 控制器:
    ```
            $ docker-machine env node1
            export DOCKER_TLS_VERIFY="1"
            export DOCKER_HOST="tcp://192.168.99.100:2376"
            export DOCKER_CERT_PATH="/Users/vkohli/.docker/machine/machines/node1"
            export DOCKER_MACHINE_NAME="node1"
            # Run this command to configure your shell:
            # eval $(docker-machine env node1)
            $ eval $(docker-machine env node1)
            $ docker-machine ls
    NAME    ACTIVE   DRIVER       STATE    URL            SWARM 
            DOCKER  ERRORS
    node1   *        virtualbox   Running  tcp://192.168.99.100:2376 
            1.11.1  
            node2   -        virtualbox   Running  tcp://192.168.99.101:2376                   v1.11.1  
    ```
5.  将`node1`设置为 UCP 控制器时，它将询问 UCP 管理员帐户的密码，并询问其他别名，可以使用 enter 命令添加或跳过这些别名:
    ```
    $ docker run --rm -it -v /var/run/docker.sock:/var/run
            /docker.sock --name ucp docker/ucp install -i --swarm-port 
            3376 --host-address $(docker-machine ip node1) 
            Unable to find image 'docker/ucp:latest' locally 
            latest: Pulling from docker/ucp 
            ... 
            Please choose your initial UCP admin password:  
            Confirm your initial password:  
            INFO[0023] Pulling required images... (this may take a while)  
            WARN[0646] None of the hostnames we'll be using in the UCP 
            certificates [node1 127.0.0.1 172.17.0.1 192.168.99.100] 
            contain a domain component.  Your generated certs may fail 
            TLS validation unless you only use one of these shortnames 
            or IPs to connect.  You can use the --san flag to add more aliases  
            You may enter additional aliases (SANs) now or press enter to 
            proceed with the above list. 
            Additional aliases: INFO[0646] Installing UCP with host address 
            192.168.99.100 - If this is incorrect, please specify an 
            alternative address with the '--host-address' flag  
            INFO[0000] Checking that required ports are available and accessible  
            INFO[0002] Generating UCP Cluster Root CA                
            INFO[0039] Generating UCP Client Root CA                 
            INFO[0043] Deploying UCP Containers                      
            INFO[0052] New configuration established.  Signalling the daemon
            to load it...  
            INFO[0053] Successfully delivered signal to daemon       
            INFO[0053] UCP instance ID:            
            KLIE:IHVL:PIDW:ZMVJ:Z4AC:JWEX:RZL5:U56Y:GRMM:FAOI:PPV7:5TZZ  
            INFO[0053] UCP Server SSL: SHA-256       
            Fingerprint=17:39:13:4A:B0:D9:E8:CC:31:AD:65:5D:
            52:1F:ED:72:F0:81:51:CF:07:74:85:F3:4A:66:F1:C0:A1:CC:7E:C6  
            INFO[0053] Login as "admin"/(your admin password) to UCP at         
            https://192.168.99.100:443 
    ```
6.  The UCP console can be accessed using the URL provided at the end of installation; log in with `admin` as the username and the password that you set previously while installing.
    ![Docker Universal Control Plane](img/image_05_010.jpg)
    UCP 许可证页 Docker
7.  After logging in, the trail license can be added or skipped. The trail license can be downloaded by following the link on the UCP dashboard on the Docker website. The UCP console with multiple options such as listing application, container, and nodes:
    ![Docker Universal Control Plane](img/image_05_011.jpg)
    UCP 管理控制面板 Docker
8.  首先通过设置环境将 UCP `node2`加入控制器:
    ```
            $ docker-machine env node2 
            export DOCKER_TLS_VERIFY="1" 
            export DOCKER_HOST="tcp://192.168.99.102:2376" 
            export DOCKER_CERT_PATH="/Users/vkohli/.docker/machine/machines/node2" 
            export DOCKER_MACHINE_NAME="node2" 
            # Run this command to configure your shell:  
            # eval $(docker-machine env node2) 
            $ eval $(docker-machine env node2)
    ```
9.  使用以下命令将节点添加到 UCP 控制器。将询问 UCP 控制器的网址、用户名和密码，如图所示:
    ```
    $ docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock
             --name ucp docker/ucp join -i --host-address 
            $(docker-machine ip node2) 
            Unable to find image 'docker/ucp:latest' locally 
            latest: Pulling from docker/ucp 
            ... 
            Please enter the URL to your UCP server: https://192.168.99.101:443 
            UCP server https://192.168.99.101:443 
            CA Subject: UCP Client Root CA 
            Serial Number: 4c826182c994a42f 
            SHA-256 Fingerprint=F3:15:5C:DF:D9:78:61:5B:DF:5F:39:1C:D6:
            CF:93:E4:3E:78:58:AC:43:B9:CE:53:43:76:50:
            00:F8:D7:22:37 
            Do you want to trust this server and proceed with the join? 
            (y/n): y 
            Please enter your UCP Admin username: admin 
            Please enter your UCP Admin password:  
            INFO[0028] Pulling required images... (this may take a while)  
            WARN[0176] None of the hostnames we'll be using in the UCP 
            certificates [node2 127.0.0.1 172.17.0.1 192.168.99.102] 
            contain a domain component.  Your generated certs may fail 
            TLS validation unless you only use one of these shortnames 
            or IPs to connect.  You can use the --san flag to add more aliases  
            You may enter additional aliases (SANs) now or press enter 
            to proceed with the above list. 
            Additional aliases:  
            INFO[0000] This engine will join UCP and advertise itself
            with host address 192.168.99.102 - If this is incorrect, 
            please specify an alternative address with the '--host-address' flag  
            INFO[0000] Verifying your system is compatible with UCP  
            INFO[0007] Starting local swarm containers               
            INFO[0007] New configuration established.  Signalling the 
            daemon to load it...  
            INFO[0008] Successfully delivered signal to daemon 
    ```
10.  UCP 的安装已经完成；现在，通过从 Docker Hub 中拉出官方的 DTR 映像，DTR 可以安装在`node2`上。完成 DTR 安装还需要 UCP 网址、用户名、密码和证书:
    ```
            $ curl -k https://192.168.99.101:443/ca > ucp-ca.pem 
            $ docker run -it --rm docker/dtr install --ucp-url https://
            192.168.99.101:443/ --ucp-node node2 --dtr-load-balancer 
            192.168.99.102 --ucp-username admin --ucp-password 123456 
            --ucp-ca "$(cat ucp-ca.pem)" 
            INFO[0000] Beginning Docker Trusted Registry installation  
            INFO[0000] Connecting to network: node2/dtr-br           
            INFO[0000] Waiting for phase2 container to be known to the 
            Docker daemon  
            INFO[0000] Connecting to network: dtr-ol                 
            ... 
            INFO[0011] Installation is complete                      
            INFO[0011] Replica ID is set to: 7a9b6eb67065            
            INFO[0011] You can use flag '--existing-replica-id 7a9b6eb67065' 
            when joining other replicas to your Docker Trusted Registry Cluster
    ```
11.  After the successful installation, DTR can be listed as an application in the UCP UI:
    ![Docker Universal Control Plane](img/image_05_012.jpg)
    Docker UCP 列出了所有的应用
12.  The DTR UI can be accessed using the `http://node2` URL. The new repository can be created by clicking on the **New repository** button:
    ![Docker Universal Control Plane](img/image_05_013.jpg)
    在 DTR 创建一个新的私人登记处
13.  The images can be pushed and pulled from the secured DTR created previously and the repository can be made private as well in order to keep the internal company-wide containers secured.
    ![Docker Universal Control Plane](img/image_05_014.jpg)
    在 DTR 创建一个新的私人登记处
14.  DTR can be configured using the **Settings** option from the menu that allows to set the domain name, TLS certificate, and storage backend for Docker images.
    ![Docker Universal Control Plane](img/image_05_015.jpg)
    DTR 的设置选项
# 总结
在这一章中，我们深入探讨了 Docker 注册表。我们从使用 Docker Hub 的 Docker 公共存储库的基本概念和与更多受众共享容器的用例开始。Docker 还提供了部署私有 Docker 注册中心的选项，我们研究了该注册中心，该注册中心可用于在组织内部推送、拉取和共享 Docker 容器。然后，我们研究了标记和确保 Docker 容器的完整性，方法是在公证服务器的帮助下对它们进行签名，公证服务器可以与 Docker Engine 集成。在 DTR 的帮助下，提供了一个更强大的解决方案，该解决方案在内部和虚拟私有云中提供企业级 Docker 映像存储，以提供安全性并满足法规遵从性。它运行在 Docker UCP 之上，如前面详细的安装步骤所示。我希望这一章已经帮助您排除故障，并了解 Docker 注册表的最新趋势。在下一章中，我们将研究在特权容器及其资源共享的帮助下使容器工作。*