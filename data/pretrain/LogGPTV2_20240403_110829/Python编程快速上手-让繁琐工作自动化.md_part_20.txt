如果有一个字符串列表，需要将它们连接起来，成为一个单独的字符串，join()
方法就很有用。join()方法在一个字符串上调用，参数是一个字符串列表，返回一个
字符串。返回的字符串由传入的列表中每个字符串连接而成。例如，在交互式环境
中输入以下代码：
>>> ', '.join(['cats', 'rats', 'bats'])
'cats, rats, bats'
>>> ' '.join(['My', 'name', 'is', 'Simon'])
'My name is Simon'
>>> 'ABC'.join(['My', 'name', 'is', 'Simon'])
'MyABCnameABCisABCSimon'
请注意，调用join()方法的字符串，被插入到列表参数中每个字符串的中间。例如，
如果在', '字符串上调用join(['cats', 'rats', 'bats'])，返回的字符串就是'cats, rats, bats'。
要记住，join()方法是针对一个字符串而调用的，并且传入一个列表值（很容易
不小心用其他的方式调用它）。split()方法做的事情正好相反：它针对一个字符串调
用，返回一个字符串列表。在交互式环境中输入以下代码：
>>> 'My name is Simon'.split()
['My', 'name', 'is', 'Simon']
默认情况下，字符串'My name is Simon'按照各种空白字符分割，诸如空格、制表
符或换行符。这些空白字符不包含在返回列表的字符串中。也可以向split()方法传入一
个分割字符串，指定它按照不同的字符串分割。例如，在交互式环境中输入以下代码：
Python编程快速上手——让繁琐工作自动化
>>> 'MyABCnameABCisABCSimon'.split('ABC')
['My', 'name', 'is', 'Simon']
>>> 'My name is Simon'.split('m')
['My na', 'e is Si', 'on']
一个常见的 split()用法，是按照换行符分割多行字符串。在交互式环境中输入
以下代码：
>>> spam = '''Dear Alice,
How have you been? I am fine.
There is a container in the fridge
that is labeled "Milk Experiment".
Please do not drink it.
Sincerely,
Bob'''
>>> spam.split('\n')
['Dear Alice,', 'How have you been? I am fine.', 'There is a container in the
fridge', 'that is labeled "Milk Experiment".', '', 'Please do not drink it.',
'Sincerely,', 'Bob']
向split()方法传入参数’\n’，我们按照换行符分割变量中存储的多行字符串，返
回列表中的每个表项，对应于字符串中的一行。
6.2.5 用rjust()、ljust()和center()方法对齐文本
rjust()和ljust()字符串方法返回调用它们的字符串的填充版本，通过插入空格来
对齐文本。这两个方法的第一个参数是一个整数长度，用于对齐字符串。在交互式
环境中输入以下代码：
>>> 'Hello'.rjust(10)
' Hello'
>>> 'Hello'.rjust(20)
' Hello'
>>> 'Hello World'.rjust(20)
' Hello World'
>>> 'Hello'.ljust(10)
'Hello '
'Hello'.rjust(10)是说我们希望右对齐，将'Hello'放在一个长度为10的字符串中。
'Hello'有5个字符，所以左边会加上5个空格，得到一个10个字符的字符串，实现
'Hello'右对齐。
rjust()和ljust()方法的第二个可选参数将指定一个填充字符，取代空格字符。在
交互式环境中输入以下代码：
>>> 'Hello'.rjust(20, '*')
'***************Hello'
>>> 'Hello'.ljust(20, '-')
'Hello---------------'
center()字符串方法与 ljust()与 rjust()类似，但它让文本居中，而不是左对齐或
右对齐。在交互式环境中输入以下代码：
第6章 字符串操作
>>> 'Hello'.center(20)
' Hello '
>>> 'Hello'.center(20, '=')
'=======Hello========'
如果需要打印表格式数据，留出正确的空格，这些方法就特别有用。打开一个
新的文件编辑器窗口，输入以下代码，并保存为picnicTable.py：
def printPicnic(itemsDict, leftWidth, rightWidth):
print('PICNIC ITEMS'.center(leftWidth + rightWidth, '-'))
for k, v in itemsDict.items():
print(k.ljust(leftWidth, '.') + str(v).rjust(rightWidth))
picnicItems = {'sandwiches': 4, 'apples': 12, 'cups': 4, 'cookies': 8000}
printPicnic(picnicItems, 12, 5)
printPicnic(picnicItems, 20, 6)
在这个程序中，我们定义了printPicnic()方法，它接受一个信息的字典，并利用
center()、ljust()和rjust()，以一种干净对齐的表格形式显示这些信息。
我们传递给printPicnic()的字典是picnicItems。在picnicItems中，我们有4个三
明治、12 个苹果、4 个杯子和 8000 块饼干。我们希望将这些信息组织成两行，表
项的名字在左边，数量在右边。
要做到这一点，就需要决定左列和右列的宽度。与字典一起，我们将这些值传
递给printPicnic()。
printPicnic()接受一个字典，一个leftWidth表示表的左列宽度，一个rightWidth
表示表的右列宽度。它打印出标题PICNIC ITEMS，在表上方居中。然后它遍历字
典，每行打印一个键-值对。键左对齐，填充句号。值右对齐，填充空格。
在定义printPicnic()后，我们定义了字典picnicItems，并调用printPicnic()两次，
传入不同的表左右列宽度。
运行该程序，野餐用品就会显示两次。第一次左列宽度是 12 个字符，右列宽
度是5个字符。第二次它们分别是20个和6个字符。
---PICNIC ITEMS--
sandwiches.. 4
apples...... 12
cups........ 4
cookies..... 8000
-------PICNIC ITEMS-------
sandwiches.......... 4
apples.............. 12
cups................ 4
cookies............. 8000
利用 rjust()、ljust()和 center()让你确保字符串整齐对齐，即使你不清楚字符串
有多少字符。
6.2.6 用strip()、rstrip()和lstrip()删除空白字符
有时候你希望删除字符串左边、右边或两边的空白字符（空格、制表符和换行
Python编程快速上手——让繁琐工作自动化
符）。strip()字符串方法将返回一个新的字符串，它的开头或末尾都没有空白字符。
lstrip()和rstrip()方法将相应删除左边或右边的空白字符。
在交互式环境中输入以下代码：
>>> spam = ' Hello World '
>>> spam.strip()
'Hello World'
>>> spam.lstrip()
'Hello World '
>>> spam.rstrip()
' Hello World'
有一个可选的字符串参数，指定两边的哪些字符应该删除。在交互式环境中输
入以下代码：
>>> spam = 'SpamSpamBaconSpamEggsSpamSpam'
>>> spam.strip('ampS')
'BaconSpamEggs'
向strip()方法传入参数'ampS'，告诉它在变量中存储的字符串两端，删除出现的
a、m、p和大写的S。传入strip()方法的字符串中，字符的顺序并不重要：strip('ampS')
做的事情和strip('mapS')或strip('Spam')一样。
6.2.7 用pyperclip 模块拷贝粘贴字符串
pyperclip模块有copy()和paste()函数，可以向计算机的剪贴板发送文本，或从
它接收文本。将程序的输出发送到剪贴板，使它很容易粘贴到邮件、文字处理程序
或其他软件中。pyperclip 模块不是 Python 自带的。要安装它，请遵从附录 A 中安
装第三方模块的指南。安装pyperclip模块后，在交互式环境中输入以下代码：
>>> import pyperclip
>>> pyperclip.copy('Hello world!')
>>> pyperclip.paste()
'Hello world!'
当然，如果你的程序之外的某个程序改变了剪贴板的内容，paste()函数就会返
回它。例如，如果我将这句话复制到剪贴板，然后调用paste()，看起来就会像这样：
>>> pyperclip.paste()
'For example, if I copied this sentence to the clipboard and then called
paste(), it would look like this:'
在IDLE之外运行Python脚本
到目前为止，你一直在使用 IDLE 中的交互式环境和文件编辑器来运行
Python脚本。但是，你不想每次运行一个脚本时，都打开IDLE和Python脚本，
这样不方便。好在，有一些快捷方式，让你更容易地建立和运行 Python 脚本。
这些步骤在Windows、OS X和Linux上稍有不同，但每一种都在附录B中描述。
请翻到附录B，学习如何方便地运行Python脚本，并能够向它们传递命令行参数。
第6章 字符串操作
（使用IDLE时，不能向程序传递命令行参数。）
6.3 项目：口令保管箱
你可能在许多不同网站上拥有账号，每个账号使用相同的口令是个坏习惯。如
果这些网站中任何一个有安全漏洞，黑客就会知道你所有的其他账号的口令。最好
是在你的计算机上，使用口令管理器软件，利用一个主控口令，解锁口令管理器。
然后将某个账户口令拷贝到剪贴板，再将它粘贴到网站的口令输入框。
你在这个例子中创建的口令管理器程序并不安全，但它基本展示了这种程序的
工作原理。
本章项目
这是本书的第一个章内项目。以后，每章都会有一些项目，展示该章介绍的
一些概念。这些项目的编写方式，让你从一个空白的文件编辑器窗口开始，得到
一个完整的、能工作的程序。就像交互式环境的例子一样，不要只看项目的部分，
要注意计算机的提示！
第 1步：程序设计和数据结构
你希望用一个命令行参数来运行这个程序，该参数是账号的名称。例如，账号
的口令将拷贝到剪贴板，这样用户就能将它粘贴到口令输入框。通过这种方式，用
户可以有很长而复杂的口令，又不需要记住它们。
打开一个新的文件编辑器窗口，将该程序保存为 pw.py。程序开始时需要有一
行#!（参见附录B），并且应该写一些注释，简单描述该程序。因为你希望关联每个
账号的名称及其口令，所以可以将这些作为字符串保存在字典中。字典将是组织你
的账号和口令数据的数据结构。让你的程序看起来像下面这样：
#! python3
# pw.py - An insecure password locker program.
PASSWORDS = {'email': 'F7minlBDDuvMJuxESSKHFhTxFtjVB6',
'blog': 'VmALvQyKAxiVH5G8v01if1MLZF3sdt',
'luggage': '12345'}
第 2步：处理命令行参数
命令行参数将存储在变量 sys.argv 中（关于如何在程序中使用命令行参数，更多
信息请参见附录 B）。sys.argv 列表中的第一项总是一个字符串，它包含程序的文件名
（'pw.py'）。第二项应该是第一个命令行参数。对于这个程序，这个参数就是账户名称，
你希望获取它的口令。因为命令行参数是必须的，所以如果用户忘记添加参数（也就
是说，如果列表中少于两个值），你就显示用法信息。让你的程序看起来像下面这样：
Python编程快速上手——让繁琐工作自动化
#! python3
# pw.py - An insecure password locker program.
PASSWORDS = {'email': 'F7minlBDDuvMJuxESSKHFhTxFtjVB6',
'blog': 'VmALvQyKAxiVH5G8v01if1MLZF3sdt',
'luggage': '12345'}
import sys
if len(sys.argv) < 2:
print('Usage: python pw.py [account] - copy account password')
sys.exit()
account = sys.argv[1] # first command line arg is the account name
第 3步：复制正确的口令
既然账户名称已经作为字符串保存在变量 account 中，你就需要看看它是不是
PASSWORDS字典中的键。如果是，你希望利用pyperclip.copy()，将该键的值复制
到剪贴板（既然用到了pyperclip模块，就需要导入它）。请注意，实际上不需要account
变量，你可以在程序中所有使用account的地方，直接使用sys.argv[1]。但名为account
的变量更可读，不像是神秘的sys.argv[1]。
让你的程序看起来像这样：
#! python3
# pw.py - An insecure password locker program.
PASSWORDS = {'email': 'F7minlBDDuvMJuxESSKHFhTxFtjVB6',
'blog': 'VmALvQyKAxiVH5G8v01if1MLZF3sdt',
'luggage': '12345'}
import sys, pyperclip
if len(sys.argv) < 2:
print('Usage: py pw.py [account] - copy account password')
sys.exit()
account = sys.argv[1] # first command line arg is the account name
if account in PASSWORDS:
pyperclip.copy(PASSWORDS[account])
print('Password for ' + account + ' copied to clipboard.')
else:
print('There is no account named ' + account)
这段新代码在PASSWORDS字典中查找账户名称。如果该账号名称是字典中的
键，我们就取得该键对应的值，将它复制到剪贴板，然后打印一条消息，说我们已