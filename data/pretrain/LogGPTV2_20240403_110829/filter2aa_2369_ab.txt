执行效果
3.3 aggressor脚本中常用的内置事件和函数
2.3 指定颜色
如果你想给Cobalt Strike的控制台添加一些色彩，通过\c，\U和\o转义即可告诉Cobalt Strike如何格式化文本。 值得
提醒的是这些转义仅在双引号字符串内有效。\cX就是告诉Cobalt Strike你想输出什么颜色，X是颜色的值。U是告诉控
制台添加下划线，\o则是重置这些花里胡哨的东西。
示例代码
3.3 aggressor脚本中常用的内置事件和函数
2.4 bind 关键字
bind 关键字用于绑定快捷键，快捷键可以是任何ASCII字符或特殊键，快捷方式可能会应用一个或多个修饰符，修饰符
修饰符仅为以下几个特定按键：Ctrl，Shift，Alt，Meta。脚本可以指定修饰符+键(注意中间不要加空格)。
3.3 aggressor脚本中常用的内置事件和函数
2.5 Popup Hooks -- 事件一览
Cobalt Strike 提供了众多的hook来让你可以自定义或
者重定义你想要的功能。
3.3 aggressor脚本中常用的内置事件和函数
2.5 Popup Hooks --顶部菜单栏布局
比如这里我们给help菜单加一些功能选项进去
3.3 aggressor脚本中常用的内置事件和函数
2.5 Popup Hooks --顶部菜单栏布局
如果我们想要在顶栏增加新的菜单栏进去，就要用到 menubar，通常我会把bypass AV的相关功能写到顶栏中去。
menu 是用于新加菜单。separator()函数则是新加分割线。
3.3 aggressor脚本中常用的内置事件和函数
2.5 Popup Hooks --右键菜单栏布局
如果是想在对应session位置的右键菜单上添加功能，可以使用 beacon_bottom hook。AuskaKit套件的入口文
件 AuskaKit.cna 就是一个很好的例子。include 函数是用于包含脚本文件，但是脚本文件需要通过 script_resource 函
数来进行读取。AuskaKit套件所有功能实现都包含在对应的modules下面的cna脚本文件中。
3.3 aggressor脚本中常用的内置事件和函数
2.5 Popup Hooks -- filebrowser hook 的使用示例
我在这里想要将常见的隐藏文件和显示文件加入到文件浏览器功能中去，那么我就可以 hook filebrowser 来完成这个功
能。
3.3 aggressor脚本中常用的内置事件和函数
2.5 Popup Hooks -- beacon_output hook 输出格式控制
我们这里可以使用 beacon_output 来对输出的内容做一些格式化或者输出控制
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- bshell && brun 执行Windows系统命令
bshell 是常用的实现系统命令执行的函数之一，毕竟能用系统命令执行的功能就不要引入第三方工具来实现了。与之相
类似的还有 brun，区别在于 brun 是基于 bpowershell 和 bshell 构建的，是一个(稍微)更安全的opsec方式，用于运
行命令并从它们接收输出。
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- bshell && brun 执行Windows系统命令
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- bpowershell 与 bpowershell_import 执行PowerShell相关操作
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- bpowershell 与 bpowershell_import 执行PowerShell相关操作
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- bpowershell 与 bpowershell_import 执行PowerShell相关操作
利用powershell我们可以做更多的事情，比如让对方的主机弹出一个聊天框，内容就可以自己定了，哈哈哈。
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- bpowershell 与 bpowershell_import 执行PowerShell相关操作
利用powershell我们可以做更多的事情，比如让对方的主机弹出一个聊天框，内容就可以自己定了，哈哈哈。
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- bpowershell 与 bpowershell_import 执行PowerShell相关操作
当然因为 bpowershell 执行的命令长度有限制，所以我们往往使用 bpowershell_import 来远程加载一个 powershell 
脚本，之后借助 bpowerpick 来执行powershell脚本中对应的功能。比如在域渗透中最常用的一个脚本 PowerView.ps1，
我们导入这个脚本来实现获取域信息的功能。
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- bpowershell 与 bpowershell_import 执行PowerShell相关操作
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- bpowershell 与 bpowershell_import 执行PowerShell相关操作
beacon_host_script 在Beacon中本地托管一个PowerShell脚本，并返回一个简短的脚本，下载并调用这个脚本。当你
的PowerShell单行代码的长度受到限制时，这个函数是运行大型脚本的一种方式。（其实就是可以远程下载并调用一个
PowerShell脚本）。因为 Auskakit的具体功能都是在本地，远程加载要根据具体情况来，所以这个我并没有用到，如果
大家有需要可以自己选用。
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- bexecute_assembly 内存加载执行.NET程序
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- bexecute_assembly 内存加载执行.NET程序
例如我们内存加载 SharpOXID-Find来实现一个 OXID 扫描多网卡主机的功能。
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- BOF 程序的加载
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- BOF 程序的加载
BOF的调用常常会写成终端命令的方式来进行调用，这种方式也更加的快捷和方便，缺点就是功能增多之后，输入 help 
就会发现有一堆命令。下一步有时间的话会对 helpx 进行进一步的改改造，使其更为美观和加入命令分组。
基本的执行流程中需要的重点函数就是下面这些了
beacon_command_register 进行命令的注册（主要是执行说明信息的补充）。
alias 来声明（or 定义）一个命令。
bof_pack 以适合BOF api解包的方式打包参数。
$handle = openf(script_resource("test.o")) 导入 BOF 脚本
readb($handle, -1) 从 $handle 中读取全部字节的内容
beacon_inline_execute 执行 BOF 文件
这里就用 bof-rdphijack 做一个示例，基本的流程和使用就如下述所示。
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions -- BOF 程序的加载
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions --其他类型语言的加载方式
除了 powershell、.NET和BOF三种类型的程序可以通过内存加载等方式加载执行外，现在还有诸如 NIM 、 Go等语言
编写的工具也是十分常见的（例如 fscan、frp 等）。但是没有很直接的方法来让这些程序不落地执行，对于这种情况就
需要我们将对应的程序上传（使用 bupload）到目标系统中，然后去执行（使用 bshell 或者 brun）。
PS: Go语言是可以嵌入到 C# ，从而再去搞内存加载执行的。这个超出了本主题所探讨的范围，所以暂时不考虑。
3.3 aggressor脚本中常用的内置事件和函数
2.6 Functions --其他类型语言的加载方式
3.3 aggressor脚本中常用的内置事件和函数
总
结
04
aggressor 脚本基于的 sleep 语言其实并不复杂，我个人感觉其实写Cobalt Strike插件其实都是在做粘结剂或者更像是
在写笔记，将那些好的工具或者技术思路便捷的带入到后渗透过程中去。
Asukakit 自从诞生以来，在多次 RedTeam 仿真中均取得了不错的效果，多次迭代之后功能得到了进一步的完善，BUG
也基本修复的差不多了。希望大家可以继续踊跃的贡献思路或者代码，做一个看得过去的后渗透测试工具套件并不难，
难得是将每一个操作都尽量的OPSEC化，并将攻击的反制方式也考虑进去，带着被反制的思路去完善后渗透测试工具套
件才是正确之路。
Asukakit 的最新版本会更新在OverSpace团队内部和【安全技能补完计划】知识星球内部，【Awesome-CobaltStrike】
将会在Github上给出最近一年内的更新。
04 总结
THANK YOU！