Security at Kernel Level
Philippe Biondi
—
Defcon 10
August 2,3,4th, 2002
Outline
1
■ Why ?
▶ Context
▶ A new security model
▶ Conclusion
■ How ?
▶ Taxonomy of action paths
▶ Defending kernel space
▶ Filtering in kernel space
■ Implementations
▶ Existing projects
▶ LSM
CARTEL SÉCURITÉ — Philippe Biondi
Outline
Why ?
2
■ Why ?
▶ Context
▶ A new security model
▶ Conclusion
■ How ?
▶ Taxonomy of action paths
▶ Defending kernel space
▶ Filtering in kernel space
■ Implementations
▶ Existing projects
▶ LSM
CARTEL SÉCURITÉ — Philippe Biondi
Why ?
Context | New model | Conclusion
3
We would like to be protected from
▶ Fun/hack/defacing
▶ Tampering
▶ Resources stealing
▶ Data stealing
▶ Destroying
▶ DoS
▶ . . .
CARTEL SÉCURITÉ — Philippe Biondi
Why ?
Context | New model | Conclusion
4
■ Thus we must ensure
▶ Conﬁdentiality
▶ Integrity
▶ Availability
■ What do we do to ensure that ?
▶ We deﬁne a set of rules describing the way we handle,
protect and distribute information
¯ This is called a security policy
CARTEL SÉCURITÉ — Philippe Biondi
Why ?
Context | New model | Conclusion
5
To enforce our security policy, we will use some security software
▶ Tripwire, AIDE, bsign, . . . for integrity checks
▶ SSH, SSL, IP-SEC, PGP, . . . for conﬁdentiality
▶ Passwords, secure badges, biometric access controls, . . . for
authentication
▶ . . .
Can we trust them ? Do they work in a trusted place ?
CARTEL SÉCURITÉ — Philippe Biondi
Why ?
Context | New model | Conclusion
6
The mice and the cookies
■ Facts :
▶ We have some cookies in a house
▶ We want to prevent the mice from eating the cookies
CARTEL SÉCURITÉ — Philippe Biondi
Why ?
Context | New model | Conclusion
7
The mice and the cookies
■ Solution 1 : we protect the house
▶ too many variables to cope with (lots of windows, holes, . . . )
▶ we can’t know all the holes to lock them.
▶ we can’t be sure there weren’t any mice before we closed the
holes
I won’t bet I’ll eat cookies tomorrow.
■ Solution 2 : we put the cookies in a metal box
▶ we can grasp the entire problem
▶ we can “audit” the box
▶ the cookies don’t care whether mice can break into the house
I’ll bet I’ll eat cookies tomorrow.
CARTEL SÉCURITÉ — Philippe Biondi
Why ?
Context | New model | Conclusion
8
Usual security model
trusted
hardware
kernel space
space
user
sendmail
tripwire
ssh
CARTEL SÉCURITÉ — Philippe Biondi
Why ?
Context | New model | Conclusion
8
Usual security model
trusted
hardware
kernel space
space
user
sendmail
tripwire
ssh
CARTEL SÉCURITÉ — Philippe Biondi
Why ?
Context | New model | Conclusion
9
Kernel security model
trusted
hardware
kernel space
space
user
sendmail
tripwire
ssh
untrusted
CARTEL SÉCURITÉ — Philippe Biondi
Why ?
Context | New model | Conclusion
9
Kernel security model
trusted
hardware
kernel space
space
user
sendmail
tripwire
ssh
untrusted
CARTEL SÉCURITÉ — Philippe Biondi
Why ?
Context | New model | Conclusion
10
To use this model, we must patch the kernel for it to
▶ protect itself
¯ trusted kernel space
▶ protect other programs/data related to/involved in the security
policy
CARTEL SÉCURITÉ — Philippe Biondi
Outline
How ?
11
■ Why ?
▶ Context
▶ A new security model
▶ Conclusion
■ How ?
▶ Taxonomy of action paths
▶ Defending kernel space
▶ Filtering in kernel space
■ Implementations
▶ Existing projects
▶ LSM
CARTEL SÉCURITÉ — Philippe Biondi
How ?
Taxonomy | Defence | Filtering
12
Targets
physical security
physical security
action vehicle
storage
PROM, FPGA,...
kernel
application
application
application
MMU
human
CARTEL SÉCURITÉ — Philippe Biondi
How ?
Taxonomy | Defence | Filtering
13
Targeting storage or PROM with direct access to the box
physical security
physical security
action vehicle
storage
PROM, FPGA,...
kernel
application
application
application
MMU
human
1
2
CARTEL SÉCURITÉ — Philippe Biondi
How ?
Taxonomy | Defence | Filtering
14
Targeting an application accessible with keyboard, network, . . .
physical security
physical security
action vehicle
storage
PROM, FPGA,...
kernel
application
application
application
MMU
human
4
3
5
CARTEL SÉCURITÉ — Philippe Biondi
How ?
Taxonomy | Defence | Filtering
15
Targeting storage or PROM through an accessible application
physical security
physical security
action vehicle
storage
PROM, FPGA,...
kernel
application
application
application
MMU
human
9
4
6 8
7
3
5
CARTEL SÉCURITÉ — Philippe Biondi
How ?
Taxonomy | Defence | Filtering
16
Targeting an unaccessible application through an accessible one
physical security
physical security
action vehicle
storage
PROM, FPGA,...
kernel
application
application
application
MMU
human
11
4
10
12
3
5
CARTEL SÉCURITÉ — Philippe Biondi
How ?
Taxonomy | Defence | Filtering
17
Targeting kernel directly or through an accessible application
physical security
physical security
action vehicle
storage
PROM, FPGA,...
kernel
application
application
application
MMU
human
4
13
3
5
CARTEL SÉCURITÉ — Philippe Biondi
How ?
Taxonomy | Defence | Filtering
18
■ Bugless interfaces
▶ network stack, kbd input, . . .
▶ kernel calls
■ Defence
▶ /dev/mem, /dev/kmem . . .
▶ create_module(),
init_module(), . . .
■ Filtering
▶ Queries to reach a storage de-
vice or PROMs, FPGAs, . . .
▶ Queries to reach another pro-
cess’ memory
physical security
physical security
action vehicle
storage
PROM, FPGA,...
kernel
application
application
application
MMU
human
11
1
9
4
6 8
13
10
7
12
3
2
5
CARTEL SÉCURITÉ — Philippe Biondi
How ?
Taxonomy | Defence | Filtering
19
Is the bugless interface hypothesis ok ?
▶ Protected mode mechanisms =⇒ harder to do programming
faults (IMHO) (bugs are still possible, race conditions for ex.)
linux/drivers/char/rtc.c
static int rtc_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
unsigned long arg)
{
unsigned long flags;
struct rtc_time wtime;
switch (cmd) {
[...]
case RTC_ALM_SET:
/* Store a time into the alarm */
{
unsigned char hrs, min, sec;
struct rtc_time alm_tm;
if (copy_from_user(&alm_tm, (struct rtc_time*)arg,
sizeof(struct rtc_time)))
return -EFAULT;
CARTEL SÉCURITÉ — Philippe Biondi
How ?
Taxonomy | Defence | Filtering
20
How to protect kernel space against a user space intruder ?
Block everything from user space that can affect kernel space.
■ Attacks can come through :
▶ system calls
▶ devices ﬁles
▶ procfs
■ Few entry points, opened by the kernel
▶ /dev/mem, /dev/kmem
▶ /dev/port, ioperm and iopl
▶ create_module(), init_module(), . . .
▶ reboot()
CARTEL SÉCURITÉ — Philippe Biondi
How ?
Taxonomy | Defence | Filtering
21
▶ /dev/mem, /dev/kmem and /dev/port protection :