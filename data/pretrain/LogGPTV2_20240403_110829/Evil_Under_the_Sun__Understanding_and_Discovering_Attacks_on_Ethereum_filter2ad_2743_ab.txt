million in 2018 [42]. In the game, a player has a chance to win
a prize from the airdrop pot airDropPot_ when purchasing
keys through buyX id(). More speciﬁcally, when buyX id() is
being called, the Dapp ﬁrst runs isHuman() to ensure that
the caller is an EOA, not a contract, and then produces a ran-
dom number through the pseudo-random number generator
(PRNG) airdrop() to determine whether the player wins. The
airdrop() method utilizes the parameters airDropTracker_,
message sender address and block information (e.g., times-
tamp, difﬁculty, gaslimit, number, etc.) for generating pseudo-
random number. During the attack, as shown in the execution
traces of the exploit transaction in Figure 1, the attacker cre-
ates multiple contracts, e.g., 0xf7*(➎), from different message
sender addresses. Since these contracts can get all parame-
ters of the PRNG, they can implement their own airdrop()
to ﬁnd out whether they will win, and only the winning con-
tract, e.g., 0xf7* (➑), purchases a key (➏). After that, the
contract runs suicide() to transfer the prize to the attacker
0x73* (➒). Note that this attack circumvents the protection
of isHuman(), buying a key through a contract instead of an
EOA. This is because the implementation of isHuman() de-
termines whether an address is an EOA or a contract from the
size of the code associated with the address. This is unreliable
since the contract under construction [40] could bypass the
restriction (➍➎). We elaborate on this attack in Section 3.
2.3 Threat Model
In our research, we consider miscreants who launch attacks
on Ethereum Dapps for proﬁt. For this purpose, the miscre-
ants could conduct several types of attacks on Dapps’ con-
tract vulnerabilities, such as exploiting weak randomness of
a pseudo-random number generator (PRNG) in a gambling
Dapp to win a prize, or performing integer overﬂow/underﬂow
to manipulate money transfer, etc. We did not consider the
attack in which the miscreants utilize a single EOA address to
generate a single exploit transaction during the attack, which
though possible, is rare in the wild (see Section 3).
3 Understanding Dapp Attacks in the Wild
In our analysis of Dapp attacks, we leveraged a variety of
vantage points, including historical transactions and transac-
tion execution traces, to reconstruct real-world Dapp attack
incidents. Given the comprehensive transactions and their ex-
ecution traces for each attack incident, we aim at identifying
adversaries’ end-to-end footprints and understanding their
operational intents. Below we ﬁrst describe the methodology
we used to reconstruct the attack, and then elaborate on our
ﬁndings and their security implications.
3.1 Data Collection and Derivation
Here we elaborate the design and implementation of a method-
ology that extends limited information collected from tech-
nical blogs and reports to tens of thousands of transactions
related to Ethereum Dapp attack incidents (i.e., exploit trans-
actions), and further analyzes the attack operations from these
transactions. More speciﬁcally, our approach ﬁrst reconstructs
real-world Ethereum Dapp attack incidents, as documented
by technical blogs, news posts, and the security reports from
blockchain security companies, by recovering all transactions
issued by attacker EOAs or exploit contracts, even when the
transactions are not publicly disclosed. Then, to understand
attack operations related to the exploit transactions, we model
their ﬁne-grained execution behaviors using their execution
traces, and further determine their coarse-grained operational
semantics by clustering the exploit transactions based upon
the similarity and timings of their execution traces.
Exploit transaction collection. We ﬁrst searched the Inter-
net to collect real-world Ethereum Dapp attack incidents. In
particular, we investigate three types of incident reporting
sources, including technical blogs, news posts, and annual
security reports from blockchain security companies. From
these sources, we further manually picked out those related
to Ethereum Dapp attacks. Details of these incident reports
are presented in Table 14 in Appendix. Then, we reviewed
these incident reports to identify immutable attack-related
information (in the following called the seed attack set Ds),
including victim Dapp addresses, exploit contract addresses,
attacker EOAs, and exploit transaction hashes. In this way, we
Attack type
Bad randomness
Denial of service
Integer overﬂow and underﬂow
Reentrancy attack
Improper authentication
Table 1: Real-world Dapp attacks
Deﬁnition
# attack incidents
adversary predicts the random value produced by the Dapp running a weak
pseudo-random number generator (PRNG) to gain advantage (e.g., in a game)
adversary seeks to prevent legitimate invocations of a smart contract, through
exhaustion of gas (constrained by block gas limit [41]) or improper check of
exceptional conditions [47]
an incorrect arithmetic operation that causes its result to exceed the maximum
size of the integer type or go below its minimum value that can be represented
a contract calls an external contract that unexpectedly calls back to the calling
contract, rendering it operate in an inconsistent internal state [37]
adversary exploits the authentication process that a Dapp uses to verify the
ownership of resources, to enforce a behavioral workﬂow or to access a variable.
It could be caused by typographical errors in contract implementation or missing
protection on critical variables
6
4
26
2
15
Table 2: Known Dapp attacks. Ds is the set of data collected from the reports, and De includes those derived.
Attack type
Bad randomness
DoS
Integer overﬂow/underﬂow
Reentrancy
Improper authentication
# of Dapps
De
Ds
14
4
4
6
32
13
2
2
12
18
# of exploit contracts
Ds
9
3
1
2
6
De
19
3
2
3
18
# of attacker EOAs
Ds
9
5
28
2
17
De
27
88
53
4
60
# of attack transactions
Ds
14
4
47
2
34
40,766
17,088
De
591
30
575
Unique total
25
56
20
45
48
227
77
58,555
identiﬁed 42 Dapp attack incidents from 2016 to 2018, which
consist of 25 victim Dapps, 20 exploit contract addresses, 48
attacker EOAs, and 77 exploit transaction hashes. Table 2
summarizes attack information we collected from the reports.
To reconstruct the reported incidents, we will look into all
transactions, which were issued by attacker EOAs or exploit
contracts to interact with the victim Dapps. However, such
EOAs and exploit contracts may not be fully documented by
the reports (see Table 2). Here we elaborate a methodology
for ﬁnding the missing EOAs and exploit contracts.
First, to identify other EOAs in an attack incident, we in-
clude in the attack set all the EOAs that have created, called or
transferred fund into known exploit contracts, or have trans-
ferred fund to known attacker EOAs. More speciﬁcally, we
examine the transactions, whose to or from ﬁelds contain
reported attacker EOAs or exploit contracts. Here we con-
sider an address to be an EOA but not a contract if no code
is associated with it. For this purpose, we use the function
w3.eth.getCode() in python to get the size of the associated
EVM code. A problem is that a self-destructed contract also
reports a zero code size. In this case, to determine whether an
address belongs to a self-destructed contract, we search for its
creation transaction, the one whose contractAddress ﬁeld
contains that address (see Section 2).
Further we expand the seed attack set Ds by adding the con-
tracts that are similar to the exploit one and have been called
by attacker EOAs. More speciﬁcally, we extract the contract
addresses, which were called by attacker EOAs, within a time
window (1 day in our study) before and after the exploit
transactions. Then we analyze the similarity of the extracted
contracts and the exploit contract. In particular, we convert
Figure 2: Workﬂow of the measurement approach.
the bytecodes into opcodes using Octopus [6], and then cal-
culate their Jaccard similarity [29]. When they come close
(Jaccard similarity ≥ 0.9), we consider them to be similar
and the extracted one to be an exploit contract. Note that
the adversary can use suicide operations or self-destructive
operations to conceal his exploit contracts. In this case we
recover the runtime code of a self-destructed contract from
the contract’s creation transaction (see Section 2).
In this way, we built an expanded dataset De, which con-
tains 45 exploit contract addresses, and 227 attacker EOAs.
We consider the exploit transactions to be (1) all those re-
lated to exploit contracts, and (2) those related to attack EOAs
and issued within a 1-day window of a known exploit trans-
action. Altogether, we gathered 58,555 exploit transactions
from 2016/01/29 to 2019/01/07, which involve in 56 victim
Dapps (29 have never been reported before). To the best of
our knowledge, this is the largest dataset for on-chain victim
Dapp attack incidents that have ever been reported. We will
release it on publishing this paper.
Transaction execution modeling. To understand attack op-
u Data Collectionv MeasurementAnalyzing Exploit TransactionsAnalyzing Dapp InterventionAnalyzing Attacker EOAsIncident reportsMissing EOAs and exploit contracts findingDsDeTransaction tracesEthereumTransactionsTransaction execution modelingExploit transaction clusteringerations, we analyzed the executions triggered by the exploit
transactions. In particular, we model a transaction’s execution
traces using a execution trace graph T G.
A transaction’s execution trace graph T G is a directed and
weighted graph as illustrated in Figure 1, in which each node
is an account (i.e., EOA or contract address), and each directed
and weighted edge describes an operation from one account
to another.
Deﬁnition 1. A T G is a directed and attributed graph T G =
(V, E, W,t) in a node attribute space Ω, where:
1. V is a node set, with each node being an account (i.e.,
EOA or contract);
2. Each node is assigned one of ﬁve attribute labels in Ω:
Dapp, EOA, self-destructed contract, Dapp related con-
tract and other contract.
3. Directed and weighted edge set E ⊆ V × V × W is a set
of operations between accounts, where W is a set of call
functions and parameters, e.g., execute() in Figure 5.
4. Time t is the timestamp of the transaction (when it is
created).
Given a set of execution traces of a transaction e =
{(Ii , Oi , Bi , Ti)|i = 1...n} (see Section 2), an attribute graph
T G can be constructed: here, the node set V is the collection
of Ii and Oi, E is the set of edges from Ii to Oi if (Ii , Oi , Bi) ex-
ists with the edge weights of the call functions and parameters
related to Bi. In our research, we gathered 436,371 execution
traces for 58,555 transactions using Bloxy API [13] .
Exploit transaction clustering. To understand the semantics
of the exploit transactions, for each attack incident, we clus-
tered transactions based upon their execution traces’ similarity
and timings (within a given time window). This is essentially
a between-graph clustering problem [9], which we solved
using a k-Means algorithm and a T G distance.
Deﬁnition 2. A T G distance D(g1 , g2) is a distance between
two transaction graphs g1 and g2 that measures both their
structure similarity and timing closeness, as follows:
D(g1 , g2) = α
min
(o1 ,...,ok)∈O(g1 ,g2)
k
∑
i=1
c(oi) + β∆t
(1)
where, O(g1 , g2) is a set of graph edits (e.g., vertex or edge’s
insertion, deletion and substitution) that transform g1 to g2,
c(oi) is the cost for each edit, ∆t is the time difference (with
the unit of hour) between two graphs and α, β are the weights.
In our implementation, we used α = 0.9, β = 0.1, c() = 1,
adapted a python library GMatch4py [5] to compute D, and
set the number of iterations for k-Means to 3. In Appendix 7.2,
we present an analysis of the clustering performance and the
discussion on the rationale for threshold selection. In this way,
we gathered 126 transaction clusters related to 42 real-world
Dapp attack incidents from 2016 to 2019.
Table 3: Reported contracts under different parameter settings
(s: Jaccard Similarity; t: time window; TP: true positive)
Parameter
s=0.9
s=0.7
s=0.5
# reported
contracts (TP)
45 (45)
86 (50)
126 (54)
Parameter
# reported
contracts (TP)
t=1
t=3
t=5
45 (45)
58 (46)
77 (48)
Discussion. The aforementioned methodology can only serve
as a measurement tool to derive exploit transactions and
gain insight into the Dapp attack footprints, instead of a full-
ﬂedged detection system. Hence, to construct the expanded
dataset De, we set the thresholds (i.e., time window, the Jac-
card similarity of opcodes) for achieving a high precision,
which might however miss some exploit transactions. To esti-
mate the coverage, we lower down the threshold to improve
the recall at the expense of precision to compare the ﬁndings
with those reported with the original threshold.
Table 3 lists the number of reported contracts under differ-
ent parameter settings of opcode Jaccard similarity and time
windows. For the threshold of the similarity, when it is 0.9,
we observe that all 45 reported contracts are indeed exploit
contracts; when it becomes 0.5, our approach report 81 new
contracts. We manually investigate all those newly-reported
contracts and found only 9 exploit contracts (false negative),
while the remaining 72 were all false positives, associated
with 1,174 wrongly-reported transactions. Taking a close look
at these 15 missing cases, we ﬁnd that all of them are the
evolved exploit contracts of the reported ones to optimize the
functionality (Section 3.2).
Similarly, with the threshold of time windows increasing
from 1 to 5, our approach report 32 more contracts associated
with 127 transactions. After manually analyzing all newly-
reported contracts, we found that only three are the exploit
contracts (false negative), where the attacker took a long time
interval (5 days) before using the same exploit contract to