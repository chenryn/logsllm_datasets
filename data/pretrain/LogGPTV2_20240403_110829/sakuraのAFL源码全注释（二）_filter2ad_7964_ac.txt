  * queue计数器queued_paths和待fuzz的样例计数器pending_not_fuzzed加一
  * cycles_wo_finds设置为0 
    * Cycles without any new paths
  * 如果`queued_paths % 100`得到0，则设置`q_prev100->next_100 = q; q_prev100 = q;`
  * 设置last_path_time为当前时间。
####  load_auto
load自动生成的提取出来的词典token
  * 遍历循环从i等于0到USE_AUTO_EXTRAS，默认50 
    * 以只读模式尝试打开文件名为`alloc_printf("%s/.state/auto_extras/auto_%06u", in_dir, i)`的文件
    * 如果打开失败，则结束
    * 如果打开成功，则从fd读取最多`MAX_AUTO_EXTRA+1`个字节到tmp数组里，默认MAX_AUTO_EXTRA为32，这是单个auto extra文件的最大大小，读取出的长度保存到len里。
    * maybe_add_auto(tmp, len);  
};
####  maybe_add_auto(u8 *mem, u32 len)
  * 如果用户设置了MAX_AUTO_EXTRAS或者USE_AUTO_EXTRAS为0，则直接返回。
  * 循环遍历i从1到len，将tmp[0]和mem[i]异或，如果相同，则结束循环。
  * 如果结束时i=0，即tmp[0]和tmp[1]就相同，就直接返回。这里我推断tmp应该是从小到大排序的字节流。
  * 如果len的长度为2，就和interesting_16数组里的元素比较，如果和其中某一个相同，就直接return。
  * 如果len的长度为4，就和interesting_32数组里的元素比较，如果和其中某一个相同，就直接return。
  * 将tmp和现有的extras数组里的元素比较，利用extras数组里保存的元素是按照size大小，从小到大排序这个特性，来优化代码。 
    * 遍历extras数组，比较`memcmp_nocase(extras[i].data, mem, len)`,如果有一个相同，就直接return。
    * static struct extra_data _extras; /_ Extra tokens to fuzz with */
  * 设置auto_changed为1
  * 遍历a_extras数组，比较`memcmp_nocase(a_extras[i].data, mem, len)`,如果相同，就将其hit_cnt值加一，这是代表在语料中被use的次数,然后跳转到`sort_a_extras`
    * static struct extra_data _a_extras; /_ Automatically selected extras */ 
                struct extra_data {
        u8 *data;                           /* Dictionary token data            */
        u32 len;                            /* Dictionary token length          */
        u32 hit_cnt;                        /* Use count in the corpus          */
  * 此时我们可能在处理一个不在之前的任何a_extras或者extras数组里的新entry了，处理逻辑是 
    * 先比较a_extras_cnt和MAX_AUTO_EXTRAS，如果小于就代表a_extras数组没有填满，直接拷贝tmp和len，来构造出一个新项，加入到a_extras数组里
    * 否则的话，就从a_extras数组的后半部分里，随机替换掉一个元素的a_extras[i].data为ck_memdup(mem, len)，并将len设置为len，hit_cnt设置为0。
####  pivot_inputs
逻辑上说这个函数就是为inputdir里的testcase，在output dir里创建hard link
  * 初始化id=0
  * 依次遍历queue里的queue_entry 
    * 在q->fname里找到最后一个’/‘所在的位置，如果找不到，则`rsl = q->fname`,否则rsl指向’/‘后的第一个字符,其实也就是最后一个`/`后面的字符串
    * 将rsl的前三个字节和`id_`进行比较 
      * 如果相等，则设置`resuming_fuzz`为1,然后做一些恢复操作，不叙述。
      * 如果不相等 
        * 在rsl里寻找`,orig:`子串，如果找到了，将use_name指向该子串的冒号后的名字；如果没找到，就另`use_name = rsl`
        * `nfn = alloc_printf("%s/queue/id:%06u,orig:%s", out_dir, id, use_name);`
        * 尝试创建从input file到`alloc_printf("%s/queue/id:%06u,orig:%s", out_dir, id, use_name)`的硬链接
    * 修改q的fname指向这个硬链接
    * 如果q的passed_det为1，则mark_as_det_done(q),这主要是对应上面的resuming_fuzz的情况。 
      * mark_as_det_done简单的说就是打开`out_dir/queue/.state/deterministic_done/use_name`这个文件，如果不存在就创建这个文件，然后设置q的passed_det为1。
      * 这里的`use_name就是orig:后面的字符串`
  * 如果设置了in_place_resume为1，则nuke_resume_dir() 
    * nuke_resume_dir() 
      * 删除`out_dir/_resume/.state/deterministic_done`文件夹下所有`id:`前缀的文件
      * 删除`out_dir/_resume/.state/auto_extras`文件夹下所有`auto_`前缀的文件
      * 删除`out_dir/_resume/.state/redundant_edges`文件夹下所有`id:`前缀的文件
      * 删除`out_dir/_resume/.state/variable_behavior`文件夹下所有`id:`前缀的文件
      * 删除文件夹`out_dir/_resume/.state`
      * 删除`out_dir/_resume`文件夹下所有`id:`前缀的文件
      * 如果全部删除成功就正常返回，如果有某一个删除失败就抛出异常。
####  load_extras
如果定义了extras_dir，则从extras_dir读取extras到extras数组里，并按size排序。
####  find_timeout
如果timeout_given没有被设置，则进入find_timeout  
这个想法是，在不指定-t的情况下resuming sessions时，我们不希望一遍又一遍地自动调整超时时间，以防止超时值因随机波动而增长
  * 如果resuming_fuzz为0，则直接return
  * 如果in_place_resume为1，则`fn = alloc_printf("%s/fuzzer_stats", out_dir);`，否则`fn = alloc_printf("%s/../fuzzer_stats", in_dir);`
  * 以只读方式打开fd，读取内容到tmp[4096]里，并在里面搜索”exec_timeout : “，如果搜索不到就直接返回，如果搜索到了，就读取这个timeout的数值，如果大于4就设置为exec_tmout的值。 
    * EXP_ST u32 exec_tmout = EXEC_TIMEOUT; / _Configurable exec timeout (ms)_ /
  * timeout_given = 3; 
    * timeout_given, / _Specific timeout given?_ /
####  detect_file_args
这个函数其实就是识别参数里面有没有`@@`，如果有就替换为`out_dir/.cur_input`，如果没有就返回
####  setup_stdio_file
如果out_file为NULL，如果没有使用-f，就删除原本的`out_dir/.cur_input`，创建一个新的`out_dir/.cur_input`，保存其文件描述符在out_fd中
####  check_binary
check指定路径处要执行的程序是否存在，且它不能是一个shell script
####  perform_dry_run
执行所有的测试用例，以检查是否按预期工作
  * 读取环境变量AFL_SKIP_CRASHES到skip_crashes，设置cal_failures为0
  * 遍历queue 
    * 打开q->fname，并读取到分配的内存use_mem里
    * res = calibrate_case(argv, q, use_mem, 0, 1); 
      * 校准测试用例，见下文
    * 如果stop_soon被置为1，就直接return
    * 如果res的结果为crash_mode或者FAULT_NOBITS 
      * 打印`SAYF("len = %u, map size = %u, exec speed = %llu us\n", q->len, q->bitmap_size, q->exec_us);`
    * 依据res的结果查看是哪种错误并进行判断。一共有以下几种错误类型 
      * FAULT_NONE 
        * 如果q是头结点，即第一个测试用例，则`check_map_coverage`，用以评估map coverage 
          * 计数trace_bits发现的路径数，如果小于100，就直接返回
          * 在trace_bits的数组后半段，如果有值就直接返回。
          * 抛出警告`WARNF("Recompile binary with newer version of afl to improve coverage!")`
        * 如果是crash_mode，则抛出异常，`FATAL("Test case '%s' does *NOT* crash", fn);`，该文件不崩溃
      * FAULT_TMOUT 
        * 如果指定了-t参数，则timeout_given值为2 
          * 抛出警告`WARNF("Test case results in a timeout (skipping)");`，并设置q的cal_failed为CAL_CHANCES，cal_failures计数器加一。
      * FAULT_CRASH 
        * 如果没有指定mem_limit，则可能抛出建议增加内存的建议
        * 但不管指定了还是没有，都会抛出异常`FATAL("Test case '%s' results in a crash", fn);`
      * FAULT_ERROR 
        * 抛出异常`Unable to execute target application`
      * FAULT_NOINST 
        * 这个样例运行没有出现任何路径信息，抛出异常`No instrumentation detected`
      * FAULT_NOBITS 
        * 如果这个样例有出现路径信息，但是没有任何新路径，抛出警告`WARNF("No new instrumentation output, test case may be useless.")`，认为这是无用路径。useless_at_start计数器加一
    * 如果这个样例q的var_behavior为真，则代表它多次运行，同样的输入条件下，却出现不同的覆盖信息。 
      * 抛出警告`WARNF("Instrumentation output varies across runs.");`，代表这个样例的路径输出可变
    * 然后读取下一个queue，继续测试，直到结束。 
                enum {
        /* 00 */ FAULT_NONE,
        /* 01 */ FAULT_TMOUT,
        /* 02 */ FAULT_CRASH,
        /* 03 */ FAULT_ERROR,
        /* 04 */ FAULT_NOINST,
        /* 05 */ FAULT_NOBITS };
#### u8 calibrate_case(char _*argv, struct queue_entry_ q, u8 *use_mem, u32
handicap, u8 from_queue)
这个函数评估input文件夹下的case，来发现这些testcase的行为是否异常；以及在发现新的路径时，用以评估这个新发现的testcase的行为是否是可变（这里的可变是指多次执行这个case，发现的路径不同）等等
  * 这个函数的参数为`char **argv, struct queue_entry *q, u8 *use_mem, u32 handicap, u8 from_queue`
  * 创建first_trace[MAP_SIZE]
  * 如果q->exec_cksum为0，代表这是这个case第一次运行，即来自input文件夹下，所以将first_run置为1。
  * 保存原有的stage_cur、stage_max、stage_name
  * 设置use_tmout为exec_tmout,如果from_queue是0或者resuming_fuzz被置为1，即代表不来自于queue中或者在resuming sessions的时候，则use_tmout的值被设置的更大。
  * q->cal_failed++
  * 设置stage_name为”calibration”,以及根据是否fast_cal为1，来设置stage_max的值为3还是CAL_CYCLES(默认为8)，含义是每个新测试用例（以及显示出可变行为的测试用例）的校准周期数，也就是说这个stage要执行几次的意思。
  * 如果当前不是以dumb mode运行，且no_forkserver（禁用forkserver）为0，且forksrv_pid为0，则init_forkserver(argv)启动fork server，见后文。
  * 如果 **这个queue不是来自input文件夹，而是评估新case** ，则此时`q->exec_cksum`不为空，拷贝trace_bits到first_trace里，然后计算`has_new_bits`的值，赋值给new_bits。
  * 开始执行calibration stage，共执行stage_max轮 
    * 如果 **这个queue不是来自input文件夹，而是评估新case** ，且第一轮calibration stage执行结束时，刷新一次展示界面`show_stats`，用来展示这次执行的结果，此后不再展示。
    * write_to_testcase(use_mem, q->len) 
      * 将从`q->fname`中读取的内容写入到`.cur_input`中
    * `u8 run_target(argv, use_tmout)`,结果保存在fault中
    * 如果这是`calibration stage`第一次运行，且不在dumb_mode，且共享内存里没有任何路径（即没有任何byte被置位），设置fault为`FAULT_NOINST`,然后goto abort_calibration。 
      * 计算共享内存里有多少字节被置位了,通过count_bytes函数 
        * `u32 count_bytes(u8 *mem)`
    * 计算`hash32(trace_bits, MAP_SIZE, HASH_CONST)`的结果，其值为一个32位uint值，保存到cksum中
    * 如果`q->exec_cksum`不等于cksum，即代表 **这是第一次运行，或者在相同的参数下，每次执行，cksum却不同，是一个路径可变的queue**
      * `hnb = has_new_bits(virgin_bits)`
      * 如果hnb大于new_bits，设置new_bits的值为hnb
      * 如果`q->exec_cksum`不等于0，即代表这是判断是否是可变queue 
        * i从0到MAP_SIZE遍历，如果first_trace[i]不等于trace_bits[i]， **代表发现了可变queue** ，且var_bytes为空，则将该字节设置为1，并将stage_max设置为`CAL_CYCLES_LONG`，即需要执行40次。
        * 将var_detected设置为1
      * 否则，即q->exec_cksum等于0，即代表这是第一次执行这个queue 
        * 设置q->exec_cksum的值为之前计算出来的本次执行的cksum
        * 拷贝trace_bits到first_trace中。
  * 保存所有轮次总的执行时间，加到total_cal_us里，总的执行轮次，加到total_cal_cycles里
  * 计算出一些统计信息，包括 
    * 计算出单次执行时间的平均值保存到q->exec_us里
    * 将最后一次执行所覆盖到的路径数保存到q->bitmap_size里
    * `q->handicap = handicap;`
    * `q->cal_failed = 0;`
    * total_bitmap_size里加上这个queue所覆盖到的路径数
    * total_bitmap_entries++
    * update_bitmap_score(struct queue_entry *q)
  * 如果fault为`FAULT_NONE`，且该queue是第一次执行，且不属于dumb_mode，而且new_bits为0，代表在这个样例所有轮次的执行里，都没有发现任何新路径和出现异常，设置fault为`FAULT_NOBITS`
  * 如果new_bits为2，且`q->has_new_cov`为0，设置其值为1，并将queued_with_cov加一，代表有一个queue发现了新路径。
  * 如果这个queue是可变路径，即var_detected为1，则计算var_bytes里被置位的tuple个数，保存到var_byte_count里，代表这些tuple具有可变的行为。
  * 将这个queue标记为一个variable 
    * `mark_as_variable(struct queue_entry *q)`
      * 创建符号链接`out_dir/queue/.state/variable_behavior/fname`
      * 设置queue的var_behavior为1
    * 计数variable behavior的计数器`queued_variable`的值加一
  * 恢复之前的stage值
  * 如果不是第一次运行这个queue，展示`show_stats`
  * 返回fault的值
####  init_forkserver
  * 建立管道st_pipe和ctl_pipe，在父子进程之间，是通过管道进行通信，一个用于传递状态，另一个用于传递命令。 
    * 在继续往下读之前需要仔细阅读这篇文章
    * [Linux 的进程间通信：管道](https://zhuanlan.zhihu.com/p/58489873)  
  * fork出一个子进程，fork函数执行完毕后，如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的进程ID。我们可以通过fork返回的值来判断当前进程是子进程还是父进程。 