title:SKEE: A lightweight Secure Kernel-level Execution Environment
for ARM
author:Ahmed M. Azab and
Kirk Swidowski and
Rohan Bhutkar and
Jia Ma and
Wenbo Shen and
Ruowen Wang and
Peng Ning
SKEE: A Lightweight Secure Kernel-level Execution
Environment for ARM
Ahmed M. Azab,1 Kirk Swidowski,1Rohan Bhutkar, Jia Ma, Wenbo Shen, Ruowen Wang, and Peng Ning
{a.azab, r1.bhutkar, jia.ma, wenbo.s, ruowen.wang, peng.ning}@samsung.com, PI:EMAIL
Samsung KNOX R&D, Samsung Research America
Abstract—Previous research on kernel monitoring and protec-
tion widely relies on higher privileged system components, such
as hardware virtualization extensions, to isolate security tools
from potential kernel attacks. These approaches increase both the
maintenance effort and the code base size of privileged system
components, which consequently increases the risk of having
security vulnerabilities. SKEE, which stands for Secure Kernel-
level Execution Environment, solves this fundamental problem.
SKEE is a novel system that provides an isolated lightweight
execution environment at the same privilege level of the kernel.
SKEE is designed for commodity ARM platforms. Its main goal
is to allow secure monitoring and protection of the kernel without
active involvement of higher privileged software.
SKEE provides a set of novel techniques to guarantee isola-
tion. It creates a protected address space that is not accessible
to the kernel, which is challenging to achieve when both the
kernel and the isolated environment share the same privilege
level. SKEE solves this challenge by preventing the kernel from
managing its own memory translation tables. Hence, the kernel is
forced to switch to SKEE to modify the system’s memory layout.
In turn, SKEE veriﬁes that the requested modiﬁcation does not
compromise the isolation of the protected address space. Switch-
ing from the OS kernel to SKEE exclusively passes through a
well-controlled switch gate. This switch gate is carefully designed
so that its execution sequence is atomic and deterministic. These
properties combined guarantee that a potentially compromised
kernel cannot exploit the switching sequence to compromise the
isolation. If the kernel attempts to violate these properties, it
will only cause the system to fail without exposing the protected
address space.
SKEE exclusively controls access permissions of the entire
OS memory. Hence, it prevents attacks that attempt to inject
unveriﬁed code into the kernel. Moreover,
it can be easily
extended to intercept other system events in order to support
various intrusion detection and integrity veriﬁcation tools. This
paper presents a SKEE prototype that runs on both 32-bit
ARMv7 and 64-bit ARMv8 architectures. Performance evaluation
results demonstrate that SKEE is a practical solution for real
world systems.
1These authors contributed equally to this work
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23009
I.
INTRODUCTION
Many of the current commodity operating systems, like
Linux, Windows, and FreeBSD, rely on monolithic kernels,
which store security and access control policies in memory
regions that are accessible to their whole code base. Hence,
the security of the whole system relies on a large Trusted
Computing Base (TCB) that includes the base kernel code in
addition to potentially buggy device drivers.
An exploit of a monolithic kernel would allow complete
access to the entire system memory and resources. In addition,
it can effectively bypass kernel level security protection mech-
anisms. Recent incidents [1], [2], [5], [28], [32], [53] show that
exploiting the OS kernel is a real threat. Hence, there is a need
for security tools that provide monitoring and protection of the
kernel. These tools have to be properly isolated so that they
are protected from potential kernel exploitation.
A. Previous Attempts
Virtualization-based Approaches: A large body of research,
such as [8], [14], [23], [24], [30], [31], [34], [37], [43]–[46],
uses virtualization to provide the required isolation for security
tools that monitor and protect the OS kernel. Nevertheless,
virtualization is primarily designed to allow multiple OSes
to share the same hardware platform. It
is not practical,
particularly in real world systems,
to exclusively use the
virtualization layer for OS kernel monitoring. Hence, the target
security tools are in practice running alongside a hypervisor.
The TCB of a typical hypervisor has to be big enough to
handle resource allocation and hardware peripheral virtualiza-
tion. Therefore, commodity hypervisors are already struggling
with their security problems. For example, there are 225 and
164 reported vulnerabilities for VMware [16] and Xen [17]
respectively by December 2015. Security monitoring and pro-
tection requires a sizable code base to intercept OS events and
introspect the current OS state. This code base should also be
extendable to support various intrusion detection and integrity
measurement mechanisms. As a result, hosting security tools
inside the hypervisor increases the size of its TCB, which
causes fundamental security concerns.
To achieve isolation without relying on the hypervisor, re-
cent research efforts have been mainly exploring three alterna-
tives: Microhypervisors, sandboxing and hardware protection.
Microhypervisor Approaches: A microhypervisor is a thin
hypervisor that only focuses on providing isolation. Trustvi-
sor [39] uses a microhypervisor to provide isolation to veriﬁed
security sensitive workloads. Nova [49] uses microhypervisors
to provide memory protection of the virtualization layer. The
basic idea of using microhypervisors is to minimize the TCB to
host sensitive code that requires escalated protection. Hence,
microhypervisors do not provide a good ﬁt to host security
tools that require a relatively large code base. A good solution
is needed to provide an extra layer of isolation to host
OS kernel security tools without adding more code to the
microhypervisor environment.
Sandboxing Approaches: Fides [50], Inktag [27] and App-
Shield [13] are examples of systems that use sandboxes to
isolate security sensitive code from the OS kernel. A sandbox
can be used to host kernel monitoring and protection tools.
However, these techniques use virtualization to provide the
isolation. Hence, they require the hypervisor to be actively
involved in managing and scheduling the sandbox, which
would also include monitoring and managing some kernel
operations. Therefore, these approaches suffer from the same
fundamental problem of virtualization, which is increasing the
TCB size of the hypervisor.
Hardware Protection Approaches: Intel introduced Software
Guard Extensions (SGX) [4], [26], [42], which allows the exe-
cution of veriﬁed code inside secure enclaves. These enclaves
are isolated from the OS kernel. They also run in isolation
from each other. SGX enclaves can be used to host security
tools without increasing the TCB of higher privileged layers.
Nevertheless, there is no similar protection for ARM. Instead,
ARM provides TrustZone [6], which is a monolithic secure
world that is isolated from the high level OS. Although TZ-
RKP [11] and SPROBES [25] proved that TrustZone can
be used to monitor the kernel, these approaches suffer from
the fundamental problem of increasing the code base and
maintenance effort of the high privileged TrustZone layer.
This brief review of previous work testiﬁes that
there
is a problem in hosting OS kernel security monitoring and
protection tools. Using the hypervisor to directly host
the
security tool or to manage a sandbox adds risk to the hy-
pervisor security. On the other hand, no adequate hardware-
based solution is available on ARM. Hence, ARM, which is
the most widely used architecture in mobile devices, lacks a
proper technique that provides isolation without adding risk to
its higher privileged hardware components.
B. Introducing SKEE
This paper presents SKEE, which stands for Secure Kernel-
level Execution Environment. SKEE is a lightweight frame-
work that provides a secure isolated execution environment
without relying on active involvement of a higher privileged
layer. Nonetheless, SKEE achieves the same level of security
and isolation required to host security tools that provide
monitoring and protection for commodity OS kernels.
SKEE relies on a time sharing model where a CPU is
either running in the OS kernel or in the isolated environment
at any point of time. For convenience, we refer to this new
isolated execution environment as SKEE and to the OS kernel
being monitored as “the kernel.” We also use the term “context
switch” to exclusively refer to the operation of switching back
and forth between the kernel and SKEE.
SKEE is designed to run on ARM. It bridges a critical gap
in the security solutions available for ARM. SKEE raises the
bar of OS security monitoring and protection without adding
potential security risks and heavy maintenance cost to secure
subsystems like TrustZone or virtualization extensions.
SKEE addresses an intuitive and straightforward security
requirement of real world systems. It solves multiple technical
challenges to achieve these goals. First of all, SKEE has to
be perfectly isolated from the kernel. If an attack succeeds in
compromising the kernel, it must not be able to compromise
the security tool hosted by SKEE. This isolation is non-trivial
to achieve given that both SKEE and the kernel are required
to run at the same privilege level.
Second, SKEE is required to expose an interface that
switches to the isolated environment so that security critical
events are trapped into SKEE for inspection. This requirement
adds extra challenge to the isolation mechanism because the
context switching entry point is exposed to the potentially
compromises kernel. Hence, the switch mechanism must be
secure against all software attacks that aim to breach the
isolation provided by SKEE.
Finally, SKEE is required to allow the security tool to
inspect the kernel state to detect potential attacks. Hence,
SKEE must provide a one-way isolation that allows security
tools to access kernel memory. It also should prevent the kernel
from handling certain events so that they are only handled by
the security tool. This requirement is hard to achieve because
modern OS kernels are designed to run at the highest privilege
level of the system and control the entire system resources.
SKEE solves all these challenges. It provides a unique
solution that is compatible with existing hardware platforms
without using any special hardware extensions. Moreover,
it does not
interfere with the operation of other security
mechanisms that run in TrustZone, virtualization extensions
or even inside the OS kernel itself.
C. SKEE Overview
SKEE uses a set of novel techniques to achieve three key
objectives: isolation, secure context switching, and the ability
to monitor and protect the kernel, without involving a higher
privileged layer.
Isolation: To achieve the required isolation, SKEE uses a two-
step solution: create a protected virtual address space for
SKEE and restrict the kernel access to the MMU.
The ﬁrst step is to create a separate protected virtual
address space for SKEE. The memory layout of the whole
system is modiﬁed so that the memory regions used by SKEE
are carved out of the memory ranges accessible to the kernel.
This is done by modifying the memory translation tables used
by the kernel so that none of the translation entries point to the
physical memory regions used by SKEE. To protect this new
address space, all memory translation tables must be part of
this new protected address space so that they are exclusively
accessible to SKEE. Therefore, the kernel cannot modify any
of the memory translation tables to tamper the virtual memory
access permissions.
The second step is depriving the kernel from controlling
certain MMU functions so that it cannot direct the CPU to
use alternative memory translation tables other than the ones
2
protected by SKEE. SKEE adopts a technique similar to the
one presented in TZ-RKP [11]. It starts by instrumenting the
kernel code to remove certain MMU control instructions, such
as the ones that change the location of memory translation ta-
bles. SKEE also monitors memory layout changes to guarantee
that no other unveriﬁed privileged code is allowed to execute.
By enforcing these two steps, the kernel is neither allowed
to modify the existing memory translation tables nor change
the MMU conﬁgurations to use unveriﬁed translation tables.
As a result, it cannot violate the isolation provided to SKEE,
which retains the exclusive access to control the MMU and
memory translation tables in its own address space.
Secure Context Switching: SKEE context switching relies on
the primitives of switching memory translation tables, which
are commonly used in switching the execution between user
processes. These operations were designed assuming that the
context switch occurs in a higher privilege level, like the
kernel to user processes, before the execution jumps to the
new context. This is not the case of SKEE because context
switching happens at the same privilege level.
To maintain the isolation, SKEE uses novel techniques that
force the kernel to go through a designated switch gate to jump
to the isolated environment. This gate is designed to enforce a
strict execution ﬂow that is both atomic and deterministic. The
former is required to prevent the kernel from gaining control
while the protected address space is accessible, while the
latter is required to guarantee that switching to SKEE always
passes through a designated entry point that contains all proper
security checks. As a result, these two properties combined
prevent exposing SKEE’s address space to the kernel.
Instructions that control the MMU and switch the virtual
address space are different between the 32-bit ARMv7 and
the 64-bit ARMv8 architectures. Hence, SKEE has different
switching mechanisms for each of these architectures.
Kernel Monitoring and Protection: SKEE provides the re-
quired capabilities to do effective monitoring and protection
of the kernel. SKEE is allowed to access the entire system
memory range. It can modify the kernel code to place hooks on
certain operations. Moreover, SKEE controls virtual memory
access permission so it can selectively protect certain data
areas from the kernel. Therefore, the monitoring and protec-
tion provided by SKEE is comparable to that provided by
virtualization-based isolation.
Prototype Overview: A prototype of SKEE is implemented on
two commercial smartphones. The ﬁrst is the Samsung Galaxy
Note4, which uses the Snapdragon APQ8084 32-bit ARMv7
processor by Qualcomm. The second is Samsung Galaxy
S6, which uses the Exynos 7420 64-bit ARMv8 processor
by Samsung’s System LSI. SKEE was subject to rigorous
evaluation. The results show it is feasible to implement and
it has an acceptable performance overhead.
The performance evaluation also shows that the number of
CPU cycles required for switching to and from the isolated
environment is in the range of few hundred cycles. This range
is comparable to those required to switch the execution from
one user process to the other. Hence, a security tool using
SKEE can be always extended to support additional monitoring
and protection mechanisms. Switching time to and from SKEE
Figure 1. Selecting a TTBR on ARMv7 architecture
is much faster than switching time to and from the ARM
TrustZone environment, which may reach up to thousands of
CPU cycles [11]. Hence, SKEE is not only lightweight, but it
can be also faster than TrustZone based systems, such as the
ones presented in TZ-RKP [11] and SPROBES [25].
It is worth noting that SKEE is not designed to replace
higher privileged layers, such as TrustZone or virtualization
extensions. Although it is technically feasible to use SKEE
to load custom secure applications or host security sensitive
data, both TrustZone and virtualization extensions are more
suited to achieve these objectives using their hardware-based
protection. SKEE aims at keeping these layers more secure
through reducing their code base and maintenance effort.
D. Summary of Contributions
This paper makes the following technical contributions:
•
A lightweight practical solution for ARM platforms
to provide kernel monitoring and protection without
relying on higher privileged system components.
Novel techniques to create a protected address space
that is isolated from the kernel despite running at the
same privilege level.
Techniques to provide a secure, atomic and determin-