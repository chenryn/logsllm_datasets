AsDroid detects four intents or actions, while StateDroid can de-
tect another ten additional actions. (2) AsDroid detects SendSMS
action in 7 samples whereas StateDroid reports in 8 samples. The
additional one deteced by StateDroid is implemented in onClick()
method in ZSone malware, while AsDroid does not report it. (3)
PhoneCall action is detected in two samples by both Statedroid and
AsDroid. (4) StateDroid reports information leakage warnings in 36
samples, while AsDroid reports in 43 samples. Additional numbers
in AsDroid are because it reports a warning by just detecting pre-
sence of an HttpAccess action API (e.g., URL.openConnection())
invoked from a non-UI callback method.
In addition, we also compare StateDroid with FlowDroid [7] and
Dexteroid [30] with these 49 samples. Both of them represent tradi-
tional control-flow/data-flow detection models. FlowDroid, Dexte-
roid, and StateDroid report 28, 112 and 114 warnings, respectively.
Our manual verification reveals that all FlowDroid warnings are
true positives and are part of Dexteroid’s 112 warnings. We, howe-
ver, found 11 false positives in Dexteroid output, leaving behind
101 true warnings. StateDroid finds out six new attacks that obtain
private data from sensitive databases using many API calls on mul-
tiple objects. In contrast, Dexteroid and FlowDroid did not detect
any of these newly discovered warnings. We wish to reiterate that
FlowDroid and Dexteroid are only limited to detecting information
leakage attacks. They cannot detect many other stealthy attacks
that StateDroid can detect, such as those shown in Table 2.
7.4 RQ4: StateDroid’s Performance
All of our experiments run on AMD Phonom II quad core processor
running Ubuntu 14.04 OS with 16 GB of memory. The maximum
time of StateDroid to complete the analysis for an app is 1, 770
seconds, and the minimum time is 120 seconds. On average, State-
Droid takes 214 seconds. Most of this time (195 seconds) is con-
sumed by API Call Detector, which is responsible for heavy-duty
tasks of the framework, such as decompiling an app to bytecode,
deriving callback sequences, retrieving reverse-post-order traversal
of each method, analyzing bytecode instructions, storing and re-
trieving objects with lookup table entries, detecting API calls, and
sending API call events to Action Detector. Action Detector takes
13 seconds to process API-call events and state transitions, and bro-
adcast action events to Attack Detector. And 6 seconds are taken by
Attack Detector to process state transitions in ASMs and detecting
attacks. We leave optimizing StateDroid for better performance as
our future work.
8 RELATED WORK
Security Analysis via FSM: Finite state machine (FSM) provides
a useful computational model to represent complicated security
events. The efficacy of FSM based security analysis depends on
correctly representing domain-specific security problems as a set
of states and transitions. The previous FSM based security analysis
approaches are mainly employed for network environments and
desktop-based operating systems. Therefore, StateDroid advances
the use of FSM in Android security analysis. To detect web-based
attacks, WebSTAT [54] models the multi-step attacks to web server
in terms of states and transitions. Sheyner et al. [48] use FSM to
automatically construct attack graphs in a networked environment.
Shuo et al. [12] present a data-driven FSM model to reason about
software vulnerabilities. Michael et al. [37] construct an FSM to
detect anomaly in a host-based intrusion detection system (IDS).
Lorenzo et al. [34] manually create a layered FSM model to represent
Windows malware behaviors. However, most of the previous work
suffers from the manual construction of FSM model. StateDroid
bridges this gap via Horn-clause verification.
Android Malicious Behavior Detection: To the best of our kno-
wledge, our work is the first stateful detection model to detect
multi-action sequence based malicious behaviors in Android appli-
cations. Most of the existing work [10, 29, 49] focuses on detecting
actions. Sufatrio et al. [49] represent a malicious behavioral action
as a pattern of security sensitive operations (or APIs), and their
static analyzer detects trivial actions such as aborting notifications.
AsDroid [29] utilizes the contradiction between implemented app
207StateDroid
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
actions and user’s expected behaviors to detect stealthy behaviors.
AsDroid relies on API-based detection of 6 actions such as start a
phone call, sendSMS, and insert data into sensitive database (all
of them are modeled and detected by StateDroid). It then analyzes
user-interface components (for identifying user expectations) to
detect mismatched or stealthy app behaviors. Pegasus [10] incor-
porates model checking to verify existence or absence of various
temporal properties of an Android application. It abstracts an app
as a Permission Event Graph (PEG) and verifies app dependent pro-
perties and app independent properties. For the former properties,
Pegasus, however, requires source code and prior knowledge of
the application behavior whereas the latter are very simple actions
(e.g., reading an IMEI).
There is a large body of work on detecting privacy leaks in An-
droid apps. Static taint analysis frameworks such as FlowDroid [7]
and Dexteroid [30], which detect information leakage attacks, have
been discussed in detail in Section 3.2. DroidSafe [27] performs a
precise static taint analysis to detect information flows based on
analysis stubs and accurate modeling of Android runtime environ-
ment. AGRIGENTO [15] discovers privacy leaks by performing
differential analysis on network traffic of Android apps. CHEX [32]
defines app split as the app functionality reachable from an entry
point and performs data flow analysis on different orderings of app
splits to detect component hijacking vulnerabilities.
9 DISCUSSION
StateDroid bears with the similar limitations like other static ana-
lyzers. It may miss some attacks, for which input values are not
available in the bytecode, or cannot be obtained statically. For ex-
ample, if malware stealthy behaviors involve dynamically-available
operations such as decrypting data, loading classes, and compu-
ting data, StateDroid is unable to recognize. Dataset of attacks and
actions used in StateDroid is very helpful in detecting specified
malicious behaviors in Android apps, but this set may not be suffi-
ciently comprehensive to detect all actions and attacks. We plan to
implement more actions and attack state machines to overcome this
issue. Moreover, Android provides many overloaded APIs to achieve
the same functionality (e.g., Intent class has 6 constructors), API
Call Detector may not have included all available APIs to detect
actions. This issue could be resolved by incorporating missed APIs
from the Android documentation. In addition, StateDroid does not
handle inter-component communication (ICC) analysis, which we
plan to include in the framework by using ICC mapping output
from Epicc tool [41].
10 CONCLUSION
Cyber-criminals are motivated to prolong Android malware's li-
fetime by hiding malicious behaviors from raising suspicion. To
achieve stealth, a quiet malware attack typically involves multiple
actions in a specific order. These heterogeneous characteristics of
stealthy attacks make automatic detection of stealthy behavior a
challenging work. This paper proposes a two-layer, attack-action-
driven finite state machine model to reason about stealthy attacks in
Android applications. We present novel techniques to automatically
construct accurate detection models by Horn-clause verification
and formal reasoning. We have developed our prototype, StateDroid,
as an open source static analysis framework. Our sizeable scale and
comparative evaluation demonstrates StateDroid is a compelling
formal methods solution to Andorid security analysis.
11 ACKNOWLEDGMENTS
We thank the ACSAC 2018 anonymous reviewers for their valuable
feedback. Jiang Ming was supported by UT System STARs Program.
REFERENCES
[1] 2016. Cotagio Mobile Malware Dump. http://contagiominidump.blogspot.com.
(July 2016).
[2] Last reviewed, 03/09/2018. VirusTotal - Free Online Virus, Malware and URL
Scanne. www.virustotal.com. (Last reviewed, 03/09/2018).
[3] Android Developers. Last reviewed, 03/09/2018. Application Fundamentals. https:
//developer.android.com/guide/components/fundamentals.html. (Last reviewed,
03/09/2018).
[4] Android Developers. Last reviewed, 03/09/2018. Starting an Activity. http:
//developer.android.com/training/basics/activity-lifecycle/starting.html. (Last re-
viewed, 03/09/2018).
[5] Nicoló Andronio, Stefano Zanero, and Federico Maggi. 2015. HelDroid: Dissecting
and Detecting Mobile Ransomware. In Proceedings of the 18th International Sym-
posium on Research in Attacks, Intrusions, and Defenses (RAID’15).
[6] Steven Arzt and Eric Bodden. 2016. StubDroid: Automatic Inference of Precise
Data-Flow Summaries for the Android Framework. In Proceedings of the 38th
International Conference on Software Engineering (ICSE’16).
[7] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014. Flow-
Droid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint
Analysis for Android Apps. In Proceedings of the 35th ACM SIGPLAN Conference
on Programming Language Design and Implementation (PLDI’14).
[8] Nikolaj Bjørner, Arie Gurfinkel, Ken McMillan, and Andrey Rybalchenko. 2015.
Horn Clause Solvers for Program Verification. Springer International Publishing,
24–51.
[9] Daniel Brand and Pitro Zafiropulo. 1983. On Communicating Finite-State Machi-
nes. J. ACM 30, 2 (1983), 323–342.
[10] Kevin Zhijie Chen, Noah Johnson, Shuaifu Dai, Kyle Macnamara, Tom Magrino,
Edward Wu, Martin Rinard, and Dawn Song. 2013. Contextual Policy Enforcement
in Android Applications with Permission Event Graphs. In Proceedings of the
20th Annual Network and Distributed System Security Symposium (NDSS’13).
[11] Michael Chen and Kunle Olukotun. 2002. Targeting Dynamic Compilation for
Embedded Environments. In Proceedings of the 2nd Java Virtual Machine Research
and Technology Symposium.
[12] Shuo Chen, Zbigniew Kalbarczyk, Jun Xu, and Ravishankar K. Iyer. 2003. A
data-driven finite state machine model for analyzing security vulnerabilities.
In Processings of the 2003 International Conference on Dependable Systems and
Networks (DSN’03).
[13] T S Chow. 1978. Testing Software Design Modeled by Finite-State Machines.
IEEE Transactions on Software Engineering 4, 3 (1978), 178–187.
Unlock Code.
android-ransomware-asks-victims-to-speak-unlock-code/. (February 2017).
Android Ransomware Asks Victims to Speak
https://www.bleepingcomputer.com/news/security/
[14] Catalin Cimpanu. 2017.
[15] Andrea Continella, Yanick Fratantonio, Martina Lindorfer, Alessandro Puccetti,
Ali Zand, Christopher Kruegel, and Giovanni Vigna. 2017. Obfuscation-Resilient
Privacy Leak Detection for Mobile Apps Through Differential Analysis. In Pro-
ceedings of the 24th Annual Network and Distributed System Security Symposium
(NDSS’17).
[16] James C. Corbett, Matthew B. Dwyer, John Hatcliff, Shawn Laubach, Corina
S. Păsăreanu Robby, and Hongjun Zheng. 2000. Bandera: extracting finite-state
models from Java source code. In Proceedings of the 22nd International Conference
on Software Engineering (ICSE’00).
[17] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein.
2009. Introduction to Algorithms, Third Edition.
[18] Anthony Desnos. Last reviewed, 03/09/2018. Android Malware List. https://code.
google.com/archive/p/androguard/wikis/DatabaseAndroidMalwares.wiki. (Last
reviewed, 03/09/2018).
[19] Anthony Desnos and Geoffroy Gueguen. 2011. Android: From Reversing to
[20] Hitesh Dharmdasani. 2014. Android.HeHe: Malware Now Disconnects Phone
Decompilation. In Black Hat Abu Dhabi.
Calls. FireEye Threat Research Blog Posts. (2014).
[21] William Enck, Peter Gilbert, Byung-Gon Chun, Landon P. Cox, Jaeyeon Jung,
Patrick McDaniel, and Anmol N. Sheth. 2010. TaintDroid: An Information-flow
Tracking System for Realtime Privacy Monitoring on Smartphones. In Proceedings
of the 9th USENIX Conference on Operating Systems Design and Implementation
(OSDI’10).
208ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Mohsin Junaid, Jiang Ming, and David Kung
[47] Roman Schlegel, Kehuan Zhang, Xiaoyong Zhou, Mehool Intwala, Apu Kapadia,
and XiaoFeng Wang. 2011. Soundcomber: A Stealthy and Context-Aware Sound
Trojan for Smartphones. In Proceedings of the 18th Annual Network & Distributed
System Security Symposium (NDSS’11).
[48] Oleg Sheyner, Joshua Haines, Somesh Jha, Richard Lippmann, and Jeannette M.
Wing. 2002. Automated Generation and Analysis of Attack Graphs. In Proceedings
of the 2002 IEEE Symposium on Security and Privacy (S&P’02).
[49] Sufatrio, Tong-Wei Chua, Darell J. J. Tan, and Vrizlynn L. L. Thing. 2015. Accurate
Specification for Robust Detection of Malicious Behavior in Mobile Environments.
In Proceedings of the 20th European Symposium on Research in Computer Security
(ESORICS’15).
[52] M. H. Van Emden and R. A. Kowalski. 1976. The Semantics of Predicate Logic As
[50] Symantec. 2016. 2016 Internet Security Threat Report. 21 (April 2016).
[51] Kimberly Tam, Ali Feizollah, Nor Badrul Anuar, Rosli Salleh, and Lorenzo Caval-
laro. 2017. The Evolution of Android Malware and Android Analysis Techniques.
ACM Computing Surveys (CSUR) 49, 4 (2017).
a Programming Language. Journal of the ACM (JACM) 23, 4 (1976).
Ransomware Is Attacking Android Smartphones.
wannalocker-ransomware-wannacry-android/. (June 2017).
[53] Adarsh Verma. 2017. WannaLocker âĂŤ A New WannaCry-inspired
https://fossbytes.com/
[54] Giovanni Vigna, William Robertson, Vishal Kher, and Richard A. Kemmerer. 2003.
A Stateful Intrusion Detection System for World-Wide Web Servers. In Proceedings
of the 19th Annual Computer Security Applications Conference (ACSAC’03).
[55] Ferdinand Wagner, Ruedi Schmuki, Thomas Wagner, and Peter Wolstenholme.
2006. Modeling Software with Finite State Machines: A Practical Approach. CRC
Press.
[56] Pei Wang, Qinkun Bao, Li Wang, Shuai Wang, Zhaofeng Chen, Tao Wei, and
Dinghao Wu. 2018. Software Protection on the Go: A Large-Scale Empirical Study
on Mobile App Obfuscation. In Proceedings of the 40th International Conference
on Software Engineering (ICSE’18).
[57] Wikipedia. Last reviewed, 03/09/2018. WannaCry ransomware attack. https://en.
wikipedia.org/wiki/WannaCry_ransomware_attack. (Last reviewed, 03/09/2018).
[58] Lei Xue, Xiapu Luo, Le Yu, Shuai Wang, and Dinghao Wu. 2017. Adaptive
Unpacking of Android Apps. In Proceedings of the 39th International Conference
on Software Engineering (ICSE’17).
[59] Zhemin Yang, Min Yang, Yuan Zhang, Guofei Gu, Peng Ning, and X. Sean Wang.
2013. AppIntent: analyzing sensitive data transmission in android for privacy
leakage detection. In Proceedings of the 2013 ACM SIGSAC Conference on Computer
and Communications Security (CCS’13).
[60] Zhicheng Zeng. 2014. Android.HeHe Malware Report. Symantec Security Re-
sponse Posts. (2014).
[61] Yajin Zhou and Xuxian Jiang. 2012. Dissecting Android Malware: Characteriza-
tion and Evolution. In Proceedings of the 2012 IEEE Symposium on Security and
Privacy (S&P’12).
[22] William Enck, Damien Octeau, Patrick McDaniel, and Swarat Chaudhuri. 2011.
A Study of Android Application Security. In Proceedings of the 20th USENIX
Conference on Security.
[23] Yu Feng, Saswat Anand, Isil Dillig, and Alex Aiken. 2014. Apposcopy: Semantics-
based Detection of Android Malware Through Static Analysis. In Proceedings
of the 22nd ACM SIGSOFT International Symposium on Foundations of Software
Engineering (FSE’14).
[24] Susumu Fujiwara, Gregor v. Bochmann, Ferhat Khendek, Mokhtar Amalou, and
Abderrazak Ghedamsi. 1991. Test selection based on finite state models. IEEE
Transactions on Software Engineering 17, 6 (1991).
[25] Clint Gibler, Jonathan Crussell, Jeremy Erickson, and Hao Chen. 2012. Android-
Leaks: Automatically Detecting Potential Privacy Leaks in Android Applications
on a Large Scale. In Proceedings of the 5th International Conference on Trust and
Trustworthy Computing (TRUST’12).
[26] Hassan Gomaa. 2001. Designing concurrent, distributed, and real-time applica-
tions with UML. In Proceedings of the 23rd International Conference on Software
Engineering (ICSE’01).
[27] Michael I. Gordon, Deokhwan Kim, Jeff Perkins, Limei Gilham, Nguyen Nguyen,
and Martin Rinard. 2015. Information-Flow Analysis of Android Applications
in DroidSafe. In Proceedings of the 22nd Annual Network and Distributed System
Security Symposium (NDSS’15).
[28] Josh Grunzweig. 2011. NickiSpy.C - Android Malware Analysis & Demo. Spider-
Labs Blog. (2011).
[29] Jianjun Huang, Xiangyu Zhang, Lin Tan, Peng Wang, and Bin Liang. 2014. As-
Droid: Detecting Stealthy Behaviors in Android Applications by User Interface
and Program Behavior Contradiction. In Proceedings of the 36th International
Conference on Software Engineering (ICSE’14).
[30] Mohsin Junaid, Donggang Liu, and David Kung. 2016. Dexteroid: Detecting
malicious behaviors in Android apps using reverse-engineered life cycle models.
Computers & Security 59 (2016), 92 – 117.
com/2012/02/android-and-security.html. (2012).
[31] Hiroshi Lockheimer. 2012. Android and Security. http://googlemobile.blogspot.
[32] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. 2012. CHEX:
Statically Vetting Android Apps for Component Hijacking Vulnerabilities. In
Proceedings of the 2012 ACM Conference on Computer and Communications Security
(CCS’12).
[33] Davide Maiorca, Davide Ariu, Igino Corona, Marco Aresu, and Giorgio Giacinto.
2015. Stealth attacks: An extended insight into the obfuscation effects on Android
malware. Computers & Security 51 (2015), 16 – 31.
[34] Lorenzo Martignoni, Elizabeth Stinson, Matt Fredrikson, Somesh Jha, and John C.
Mitchell. 2008. A Layered Architecture for Detecting Malicious Behaviors. In
Proceedings of the 10th International Symposium on Recent Advances in Intrusion
Detection (RAID’08).
[35] John McCarthy and Patrick J. Hayes. 1969. Some Philosophical Problems from
the Standpoint of Artificial Intelligence. In Machine Intelligence 4, B. Meltzer and
D. Michie (Eds.). Edinburgh University Press, 463–502.
[36] William McCune. Last reviewed, 08/25/2017. Prover9 is an automated theorem
prover for first-order and equational logic, and Mace4 searches for finite models
and counterexamples. http://www.cs.unm.edu/~mccune/prover9/. (Last reviewed,
08/25/2017).
[37] C. C. Michael and Anup Ghosh. 2002. Simple, State-based Approaches to Program-
based Anomaly Detection. ACM Transactions on Information and System Security
(TISSEC’02) (2002).
[38] Rene Millman. 2015. Updated: 97% of malicious mobile malware targets Android.
SC Media UK News. (2015).
[39] Yisroel Mirsky, Asaf Shabtai, Lior Rokach, Bracha Shapira, and Yuval Elovici.
2016. SherLock vs Moriarty: A Smartphone Dataset for Cybersecurity Research.
In Proceedings of the 2016 ACM Workshop on Artificial Intelligence and Security
(AISec’16).
[40] Jon Oberheide and Charlie Miller. 2012. Dissecting Android’s Bouncer. In Sum-
merCon 2012.
[41] Damien Octeau, Patrick McDaniel, Somesh Jha, Alexandre Bartel, Eric Bodden,
Jacques Klein, and Yves Le Traon. 2013. Effective Inter-Component Communica-
tion Mapping in Android: An Essential Step Towards Holistic Security Analysis.
In Proceedings of the 22nd USENIX Security Symposium (USENIX Security 13).
[42] Vaibhav Rastogi, Yan Chen, and Xuxian Jiang. 2013. DroidChameleon: Evaluating
Android Anti-malware Against Transformation Attacks. In Proceedings of the 8th
ACM SIGSAC Symposium on Information, Computer and Communications Security
(ASIA CCS’13).
[43] IDC Research. 2016. Smartphone OS Market Share, 2016 Q3. http://www.idc.
com/prodserv/smartphone-os-market-share.jsp. (2016).
[44] Ethan Rudd, Andras Rozsa, Manuel Gunther, and Terrance Boult. 2016. A Survey
of Stealth Malware: Attacks, Mitigation Measures, and Steps Toward Autonomous
Open World Solutions. IEEE Communications Surveys & Tutorials PP, 99 (2016).
[45] Stuart Russell and Peter Norvig. 2009. Artificial Intelligence: A Modern Approach
(3rd Edition). Pearson.
[46] Kevin Savage, Peter Coogan, and Hon Lau. 2017. The evolution of ransomware.
Symantec Security Response White Paper. (2017).
209