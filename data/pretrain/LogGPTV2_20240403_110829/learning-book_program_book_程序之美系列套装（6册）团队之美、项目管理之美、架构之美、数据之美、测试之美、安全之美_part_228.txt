玛通过了编译就保证它是正确的。如果你的代码似乎能运行，那也
不能保证其正确性。
正确性的唯一保证，不论你使用的语言是强类型的或弱类型的，就
是它是否能通过保证程序正确性的所有测试。
(http://www.mindview.net/WebLog/log-0025)
但是，有时候谨慎一些是有好处的。我们可以向某个集合添加一些
对象，并期望这些对象满足特定的接口；我们不喜欢在运行时才看
到其中的某些对象实际上并未满足特定的接口。我们可以利用
Smalltalk的元编程机制来确保避免这样的问题。
元编程对潜在类型是一种补充，我们能够检查特定的接口是否真正
提供，我们有机会在没有提供特定的接口时作出反应。例如，将未
实现的调用代理给我们已知实现了该调用的对象，或只是优雅地处
1287
---
## Page 1289
理失败，避免程序崩溃。所以在鹤嘴锄书（pickaxebook）中
（Thomas等2005），我们看到了下面的Ruby示例，试图向一个字符
串中添加一些歌曲信息：
def append _song (result, song)
#test we're given the right parameters
unless result.kind_of? (String)
fail TypeError.new ("String expected")
end
unless song.kind_of? (Song)
fail TypeError.new ("Song expected")
end
result<<song.title
end
这是我们在采用Java或C#编程风格时会做的事。在Ruby风格的鸭子
类型中，可能就是：
def append_song (result, song)
result<<song.title
end
这段代码适用于所有可以通过<<操作符连接的对象，对于不支持
<<的对象，我们会得到一个异常。如果我们真希望采用防御式编
程，我们可以检查该对象的能力，而不是检查它的类型：
def append_song (result, song)
1288
---
## Page 1290
#test we're given the right parameters
unless result.respond_to? (: <<)
fail TypeError.new ("'result'needs<<'capability")
end
unless song.respond_to?(: artist) &&song.respond_to?(:
title)
fail TypeError.new ("*song'needs'artist'and'title'")
end
result<
sonq.title
end
Smalltalk提供了respondsTo方法，在Object中定义，我们可以用它在
运行时判断特定的消息接收者是否具有特定的选择器。
respondsTo: aSymbol
"Answer whether the method dictionary of the receiver's
class contains
aSymbol as a message selector.
^self class canUnderstand: aSymbol
实现很简单，将检查代理给Behavior中定义的canUnderstand选择
器：
canUnderstand: selector
"Answer whether the receiver can respond to the message
whose selector
is the argument.The selector can be in the method
dictionary of the
1289
---
## Page 1291
receiver's class or any of its superclasses."
(self includesSelector: selector) ifTrue: [^true].
superclass==nil ifTrue: [^false].
^superclass canUnderstand: selector
最后，includesSelector：也定义在Behavior中，它最终检查该类的方
法字典：
includesSelector: aSymbol
"Answer whether the message whose selector is the argument
is in the
method dictionary of the receiver's class."
^self methodDict includesKey: aSymbol
当消息接收者收到一条它不理解的消息时，它的标准反应是向系统
发出doesNotUnderstand：消息。如果我们愿意自已处理这种情况，
只需要重载这条消息，做类似下面的事情：
doesNotUnderstand: aMessage
 butadueae Aq pooasxapun butaq aou sabessaw satpueg
proxy to a target"
target perform: aMessage selector withArguments: aMessage
arguments].
我们假定target指向一个代理对象，我们希望它能够处理发错的消
息。
潜在类型不是粗心编程的借口。我们模糊了类型，但并没有模糊责
任。
1290
---
## Page 1292
14.3问题
公有继承意味着“是一种"关系。程序员需要仔细思考，才能够得到
符合这种模式的类继承关系。如果你有一个类，它包含某一个方
法，而在子类中实现这个方法没有什么意义，那么这就超出了公有
继承的范畴，应该是不良设计的标志。
在C++中，你可以创建一个无意义的方法，它要么返回一个错误，
要么抛出一个异常，从而避免这种情况出现。典型的例子如下
(Meyers2005，item 32）:
clas s  Bird {
public:
virtual void fly (): //birds can fly
 . ...
:
class Penguin: public Bird{//penguins are birds
public:
virtual void fly () {error ("Attempt to make a penguin
fly! ") ; }
 / /...
}：
C++程序员也可以选择隐藏这个令人不快的方法：
class Basef
public:
virtual void f () =0;
}：
1291
---
## Page 1293
class Derived: public Base{
private:
virtual void f () {
：
这样，Derived不再是一个抽象类，但它仍然没有可供使用的函数
f（）。这样的诡计应该避免。
在Java中，可以通过返回一条错误或抛出一个异常来避免这一点，
也可以在子类中创建一个无意义的方法抽象，这样就使得类层次从
那一点开始抽象，向下直到你将该方法标识为具体为止。同样，这
样的诡计应该避免。
要处理类层次结构中不合适的或不相关的方法，正确的做法是重新
设计这个层次结构。为了更好地反映类鸟类世界的奇特性，类层次
结构将为Bird类引入一个FlyingBird子类，让Penguin成为Bird的直接
子类，而不是FlyingBird的子类。
在Squeak中，我们发现只有45个方法发出shouldNotlmplement消息，
该消息在某个继承自超类的方法在当前类中不适用的时候使用。这
在Smalltalk的所有对象和方法之中只占了很少一部分，所以这门语
言并没有充满设计不佳的类层次结构。然而，即使是
shouldNotlmplement消息实际上也是一种实现。这暗示了Smalltalk中
的一个更深层次的问题，即我们没有真正的抽象类或方法。方法在
惯例上是抽象的，根本不存在无实现的方法。除了使用
shouldNotlmplement消息之外，我们也可以规定某个方法是子类的职
责，这就是我们看到的subclassResponsibility消息的用途。发出
subclassResponsi-bility消息的类按惯例就是抽象类。例如，
Collection类给出了一个通用的接口来添加和删除对象，但并没有提
供实现，因为实现取决于我们所面对的子类（它可以是字典、数
组、链表等）。方法add：将在子类中实现：
add: newobject
1292
---
## Page 1294
"Include newObject as one of the receiver's
elements.Answer newObject.
ArrayedCollections cannot respond to this message."
self subclassResponsibility
这个“抽象的"add：定义甚至允许我们在使用它的Collection方法中
定义，如add：withOccurences：，是这样定义的：
add: newObject withoccurrences: anInteger
"Add newObject anInteger times to the receiver.Answer
newObject. "
anInteger timesRepeat: [self add: newObject].
^newObject
我们甚至可以在根本没有定义add：时这样做，add：
withOccurrences：还是像刚才那样定义，只要运行时接收该消息的
对象定义了add：，Smalltalk就不会中止。（顺便说一句，add：
withOccurences是Strategy模式的一小段漂亮实现。）同时，add：中
的注释指出，Collection的某些子类，即以ArrayedCollection子类为
根的那些子类，根本不应该实现该消息。同样，这只能在运行时使
用shouldNotImplement强制实现：
add: newObject
self shouldNotImplement
在编程时运用惯例不是什么根本性的错误，这门艺术的一部分就是
要掌握惯例。但可能出现问题的是，只依赖集合来得到要求的结
果。如果我们在ArrayedCollection中忘记了实现add：，Smalltalk不
会给出警告。我们只会在运行时失败。
我们在前面曾看到，在Smalltallk中实现一个代理类有多么容易。但
是实际情况却是，如果我们确实想要一个代理类，让它只作为少数
1293
---
## Page 1295
方法的代理，那么事情只会变得更复杂。原因与缺少真正的抽象类