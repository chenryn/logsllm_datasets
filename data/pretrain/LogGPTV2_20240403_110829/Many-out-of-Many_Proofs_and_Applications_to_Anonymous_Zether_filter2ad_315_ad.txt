2) Efﬁciency analysis of many-out-of-many proofs: We turn
to the main protocol above. Its communication complexity is
clearly O(log N ), and in fact is identical to that of [10] (in its
radix n = 2 variant).
Its runtime, however, is somewhat delicate, and depends in
particular on how the map Ξ grows with N. Indeed—even
assuming that the image dimension s ≤ o (which doesn’t
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:00 UTC from IEEE Xplore.  Restrictions apply. 
1805
impact generality)—Ξ could take as much as Θ(N 2) space
to represent; the evaluation of (cid:2)1, v, . . . vs−1(cid:3) · Ξ could also
that the expression(cid:2)1, v, . . . vs−1(cid:3)·Ξ can be evaluated in linear
take Θ(N 2) time in the worst case. To eliminate these cases
(which are perhaps of theoretical interest only), we insist that
Ξ has only O(N ) nonzero entries as N grows. This ensures
time.
This condition holds in particular if the number of rows
s = O(1). Importantly, it also holds in signiﬁcant applications
(like in Anonymous Zether) for which s = Θ(N ); this latter
fact makes the “linear combination” trick non-vacuous.
Even assuming this condition on Ξ, a na¨ıve implementation
of many-out-of-many proofs uses Θ(N 2 log N ) time for the
prover and Θ(N 2) time for the veriﬁer (in the worst case
o = Θ(N )). It is therefore surprising that, imposing only the
aforementioned assumption on Ξ, we nonetheless attain:
Theorem III.12. Suppose that the number of nonzero entries
of Ξ grows as O(N ). Then many-out-of-many proofs can
be implemented in O(N log2 N ) time for the prover and
O(N log N ) time for the veriﬁer.
0
1
N−1
, cκ(cid:48)
0, κ(cid:48)
, . . . , cκ(cid:48)
1, . . . , κ(cid:48)
Proof. We ﬁrst argue that it sufﬁces to consider only the
“canonical” case κ = (0, 1, . . . , N − 1). To this end, we ﬁx a
κ(cid:48) ∈ SN , not necessarily equal to κ; we assume ﬁrst that κ(cid:48)
is an N-cycle, say with cycle structure (κ(cid:48)
N−1).
Given desired common inputs (σ, (c0, c1, . . . , cN−1), κ(cid:48), Ξ),
and private inputs (l(cid:48), (r0, . . . , rs−1)), we observe that the
prover and veriﬁer’s purposes are equally served by using
), κ, Ξ) and
instead the common inputs (σ, (cκ(cid:48)
private inputs (l, (r0, . . . , rs−1)), where l is such that κ(cid:48)
l = l(cid:48).
Any arbitrary free permutation κ(cid:48)(cid:48) ∈ SN (with order o, say),
now, is easily seen to be an iterate (with exponent N/o) of some
N-cycle κ(cid:48); in fact, one such κ(cid:48) can easily be constructed
in linear time by “collating” through the cycles of κ(cid:48)(cid:48). On
desired inputs (σ, (c0, c1, . . . , cN−1), κ(cid:48)(cid:48), Ξ; l(cid:48), (r0, . . . , rs−1)),
then, the prover and veriﬁer may use the above reduction to
execute (σ, (c0, c1, . . . , cN−1), κ(cid:48), Ξ; l(cid:48), (r0, . . . , rs−1));
they
may then discard all “rows” except those corresponding to
indices j ∈ {0, . . . , N − 1} for which N/o | j.
We therefore turn now to the case κ = (0, 1, . . . , N − 1),
whose analysis, by the above, sufﬁces for arbitrary κ. The
veriﬁer’s bottleneck is the evaluation of the matrix action
(cid:2) ej
(cid:3)N−1
j=0
:=(cid:2) pκ−j (i)
(cid:3)N−1
·(cid:2) ci
(cid:3)N−1
the matrix (cid:2) pκ−j (i)
(cid:3)N−1
j,i=0
i=0
.
j,i=0
Yet by hypothesis on κ,
is a
circulant matrix (see e.g. [17, (6.5)]), and the above equation’s
right-hand side is a circular convolution in the sense of [17,
p. 103]. (We assume here that N is a power of 2 and that
N | (q − 1), so that the number-theoretic transform can be
applied; see [13, Thm. 8.2].) The veriﬁer may thus evaluate
this product in O(N log N ) time using the standard Cooley–
Tukey algorithm [17, Thm. 4.2] and the convolution theorem
[17, Thm. 6.1].
We turn to the prover, who must compute the m matrix
evaluations:
(cid:2) Pκ−j (i),k
(cid:3)N−1
j,i=0
·(cid:2) ci
(cid:3)N−1
i=0
,
for each k ∈ {0, . . . , m − 1} (in the process of computing
the Gk). Using identical reasoning, we see that these can be
computed with the aid of m parallel NTT-aided convolutions;
the prover’s complexity is therefore O(N log2 N ).
amounts to evaluating [ξ0, . . . , ξo−1] := (cid:2)1, v, . . . , vs−1(cid:3) · Ξ.
The remaining work, for both the prover and veriﬁer,
By hypothesis on Ξ, this can be done in linear time.
E. Applications
Our main application is described in Section V. In the
remainder of this section, we sketch additional possible ap-
plications of many-out-of-many proofs.
1) Ring multisignatures: Through a construction analogous
to that of [9, §4.2], Example III.7 straightforwardly yields a
scheme whereby a user may demonstrate possession of mul-
tiple distinct public keys from a ﬁxed ring. Surprisingly, the
resulting “signature” is no larger than a standard ring signature
on the same ring. This protocol thus yields something akin to
a multisignature, which in addition conceals the signing keys.
2) An application to Monero: We roughly sketch how this
idea could in principle improve the efﬁciency of the Monero
[4] cryptocurrency. While Monero’s proofs grow logarithmi-
cally in the number of mix-ins per UTXO spent (typically
10,
in recent versions of Monero), a distinct proof must
nonetheless be attached for each UTXO spent. This leads to
transaction sizes which effectively grow linearly in the number
of UTXOs spent, and (occasionally) to large transactions in
practice, as well as to unspendable “dust”.
We sketch an improved strategy rooted in “ring multisigna-
tures”. A user who wishes to spend o UTXOs (let’s say) can
situate these UTXOs into a random list of size N := 11 · o
(containing 10·o mix-ins). Finally, the user may attach a many-
out-of-many proof which demonstrates spend authority over a
secret subset consisting of o among the N total TXOs. The
resulting proof size will grow as O(log(o · 11)) = O(log(o))
(i.e., logarithmically in the number o of UTXOs spent). We
leave further development of this idea for future work.
IV. AN ALTERNATIVE RING SIGNATURE
In this section, we mention an additional ring signature-
based construction, distinct from that of the previous section.
This section generalizes one-out-of-many proofs in a different
direction. It demonstrates that a re-encryption protocol—
targeting the same secret index—can be carried out concur-
rently over multiple rings, and moreover that proofs of knowl-
edge concerning re-encrypted elements obtained in this way
imply analogous knowledge regarding the original elements.
Essentially, we show that the Schnorr protocol remains sound,
even when it is conducted over re-encryptions.
This technique is essential in making rigorous the use of
basic Zether on re-encrypted ciphertexts, and will be used in
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:00 UTC from IEEE Xplore.  Restrictions apply. 
1806
Section V. Indeed, Anonymous Zether combines many-out-of-
many proofs with the techniques of this section.
The clearest way to express this idea is to present an alter-
nate ring signature construction. This alternate construction,
informally, uses a one-out-of-many proof to anonymize and
a Schnorr proof to authenticate. Importantly, the resulting
construction admits ﬂexibility not offered by the original
approach of [9, §4]; in particular, it can be run concurrently
over multiple rings, while ensuring that the same secret key
is used throughout.
ﬁrst the standard relation below, adapted from [9, §3]:
We sketch this ﬂexibility through a basic example. Consider
R3 =(cid:8)(σ, (y0, . . . , yN−1); l, sk) | yl = gsk(cid:9) .
3 =(cid:8)(σ, (y0,0, . . . , y0,N−1), (y1,0, . . . , y1,N−1); l, sk) |
While [9, Fig. 2] easily handles R3, it’s less straightforward
to see how it might adapt into a proof for, say, the relation:
R∗
y0,l = gsk
0 ∧ y1,l = gsk
1
(cid:9),
for bases g0 and g1 implicit in the reference string σ, and
where, crucially, the same secret key sk must be used in both
discrete logarithms. (In another closely related variant, the
index l is allowed to be different in both places.) Signiﬁcantly,
our protocol easily adapts to this setting.
A. Security deﬁnitions
We recall certain security deﬁnitions for ring signature
schemes (Setup, Gen, Sign, Verify), as presented in the arti-
cle of Bender, Katz, and Morselli [18]. Given parameters
σ ← Setup(1λ), Gen(1λ) outputs a keypair (y, sk), whereas
π ← Signi,sk(m, R) signs the message m on behalf of the ring
R = (y0, . . . , yN−1) (where (yi, sk) is a valid keypair); ﬁnally,
VrfyR(m, π) veriﬁes the purported signature π on m on behalf
of R. We ﬁnally have the notions of unforgeability with respect
to insider corruption (see Deﬁnition C.1) and anonymity with
respect to adversarially chosen keys (see Deﬁnition C.2).
B. Ring signature protocol
We now give our protocol for the simple relation R3 above.
rB, rK , ρ0, . . . , ρm−1 ←$ Fq
B := Com(l0, . . . , lm−1; rB) (cid:46) l0, . . . , lm−1 the bits of l
(A, C, D) ← P1(σ, B; (l0, . . . , lm−1, rB))
for k ∈ {0, . . . , m − 1} do
· yρk
Pi,k
i
i=0 y
end for
Gk := gρk
Yk :=(cid:81)N−1
Protocol Flexible ring signature
1: P3 computes...
2:
3:
4:
5:
6:
7:
8:
9: end P3
10: P3 → V3 : A, B, C, D, (Yk, Gk)m−1
11: V3 : x ←$ Fq
12: V3 → P3 : x
13: P3 computes...
14:
15:
16:
17: end P3
18: P3 → V3 : f0, . . . , fm−1, zA, zC , K
g := gxm−(cid:80)m−1
(f0, . . . , fm−1, zA, zC ) ← P1(x)
k=0 ρk·xk
K := grK
k=0
l
s := c · sk + rK
19: V3 : c ←$ Fq
20: V3 → P3 : c
21: P3 computes...
22:
23: end P3
24: P3 → V3 : s
25: V3 requires...
26:
27:
28:
29:
30: end V3
k=0 , zA, zC )
?
= 1
V1(σ, B, x, A, C, D, (fk)m−1
where g := gxm ·(cid:81)m−1
gs · y−c ?
and y :=(cid:81)N−1
·(cid:81)m−1
k=0 G−xk
k=0 Y −xk
i=0 ypi
= K
k
k
i
We deﬁne a ring signature Π = (Gen, Sign, Verify) by
applying the Fiat–Shamir transform to this protocol (see [19,
Cons. 12.9]).
We have the following results. We defer proof sketches
to the appendixes; rigorous proofs are also given in the full
version of this paper.
Theorem IV.1. If the discrete logarithm problem is hard with
respect to G, then Π is unforgeable with respect to insider
corruption.
Proof. Deferred to Appendix C.
Theorem IV.2. If the DDH problem is hard relative to G, then
Π is anonymous with respect to adversarially chosen keys.
Proof. Deferred to Appendix C.
V. APPLICATION: ANONYMOUS ZETHER
We turn to our main application, Anonymous Zether.
A. Review of basic and anonymous Zether
We summarize both basic and anonymous Zether; we refer
to [6] for further details.
Zether’s global state consists of a mapping acc from El
Gamal public keys to El Gamal ciphertexts; each y’s table
entry contains an encryption of y’s balance b (in the exponent).
In other words:
y (cid:55)→ acc[y] = Ency(b, r) =(cid:0)gbyr, gr(cid:1) ,
acc : G → G2,
for some randomness r which y in general does not know. (For
details on the synchronization issues surrounding “epochs”, we
refer to [6].)
1) Basic Zether:
In “basic” (non-anonymous) Zether, a
non-anonymous sender y may transfer
funds to a non-
anonymous recipient y. To do this, y should publish the
public keys y and y, as well as a pair of ciphertexts (C, D)
and (C, D) (i.e., with the same randomness). These should
encrypt, under y and y’s keys, the quantities g−b∗
and gb∗
,
respectively, for some integer b∗ ∈ {0, . . . MAX} (MAX is
a ﬁxed constant of the form 2n − 1). To apply the transfer,
the administering system (e.g., smart contract) should group-
add (C, D) and (C, D) to y and y’s account balances (re-
spectively). We denote by (CLn, CRn) y’s balance after the
homomorphic deduction is performed.
Finally, the prover should prove knowledge of:
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:00 UTC from IEEE Xplore.  Restrictions apply. 
1807
• sk for which gsk = y (knowledge of secret key),
• r for which:
– gr = D (knowledge of randomness),
– (y · y)r = (C · C) (ciphertexts encrypt opposite
• b∗ and b(cid:48) in {0, . . . , MAX} for which C = g−b∗ · D and
CLn = gb(cid:48) · CRn (overﬂow and overdraft protection).
balances),
Formally, we have the relation below, which essentially repro-
duces [6, (2)]:(cid:110)
(y, y, CLn, CRn, C, C, D; sk, b∗, b(cid:48), r) |
gsk = y ∧ C = g−b∗ · Dsk ∧ CLn = gb(cid:48) · C sk
b∗ ∈ {0, . . . , MAX} ∧ b(cid:48) ∈ {0, . . . , MAX}(cid:111)