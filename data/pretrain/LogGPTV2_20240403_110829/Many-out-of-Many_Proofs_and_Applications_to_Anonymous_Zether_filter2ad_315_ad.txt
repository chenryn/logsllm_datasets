### 2) Efficiency Analysis of Many-Out-of-Many Proofs

We now turn to the main protocol and analyze its efficiency. The communication complexity of the protocol is clearly \(O(\log N)\), which is identical to that of [10] (in its radix \(n = 2\) variant).

The runtime, however, is more nuanced and depends on how the map \(\Xi\) grows with \(N\). Even if we assume that the image dimension \(s \leq o\) (which does not impact generality), \(\Xi\) could require \(\Theta(N^2)\) space for representation. Evaluating the expression \((1, v, \ldots, v^{s-1}) \cdot \Xi\) could also take \(\Theta(N^2)\) time in the worst case. To eliminate these cases, which are perhaps of theoretical interest only, we insist that \(\Xi\) has only \(O(N)\) nonzero entries as \(N\) grows. This ensures that the expression can be evaluated in linear time.

This condition holds particularly if the number of rows \(s = O(1)\). Importantly, it also holds in significant applications (such as in Anonymous Zether) where \(s = \Theta(N)\); this fact makes the "linear combination" trick non-trivial.

Even with this condition on \(\Xi\), a naive implementation of many-out-of-many proofs uses \(\Theta(N^2 \log N)\) time for the prover and \(\Theta(N^2)\) time for the verifier (in the worst case where \(o = \Theta(N)\)). Surprisingly, under the aforementioned assumption on \(\Xi\), we achieve:

**Theorem III.12.** Suppose the number of nonzero entries of \(\Xi\) grows as \(O(N)\). Then many-out-of-many proofs can be implemented in \(O(N \log^2 N)\) time for the prover and \(O(N \log N)\) time for the verifier.

**Proof.** We first argue that it suffices to consider only the "canonical" case \(\kappa = (0, 1, \ldots, N-1)\). To this end, we fix a \(\kappa' \in S_N\), not necessarily equal to \(\kappa\); we assume first that \(\kappa'\) is an \(N\)-cycle, say with cycle structure \((\kappa'_0, \kappa'_1, \ldots, \kappa'_{N-1})\).

Given desired common inputs \((\sigma, (c_0, c_1, \ldots, c_{N-1}), \kappa', \Xi)\) and private inputs \((l', (r_0, \ldots, r_{s-1}))\), we observe that the prover and verifier's purposes are equally served by using instead the common inputs \((\sigma, (c_{\kappa'_0}, c_{\kappa'_1}, \ldots, c_{\kappa'_{N-1}}), \kappa, \Xi)\) and private inputs \((l, (r_0, \ldots, r_{s-1}))\), where \(l\) is such that \(\kappa'^l = l'\).

Any arbitrary free permutation \(\kappa'' \in S_N\) (with order \(o\), say) is easily seen to be an iterate (with exponent \(N/o\)) of some \(N\)-cycle \(\kappa'\). In fact, one such \(\kappa'\) can be constructed in linear time by "collating" through the cycles of \(\kappa''\). On desired inputs \((\sigma, (c_0, c_1, \ldots, c_{N-1}), \kappa'', \Xi; l', (r_0, \ldots, r_{s-1}))\), the prover and verifier may use the above reduction to execute \((\sigma, (c_0, c_1, \ldots, c_{N-1}), \kappa', \Xi; l', (r_0, \ldots, r_{s-1}))\); they may then discard all "rows" except those corresponding to indices \(j \in \{0, \ldots, N-1\}\) for which \(N/o \mid j\).

We therefore turn now to the case \(\kappa = (0, 1, \ldots, N-1)\), whose analysis, by the above, suffices for arbitrary \(\kappa\). The verifier's bottleneck is the evaluation of the matrix action:
\[
(e_j)_{j=0}^{N-1} := (p_{\kappa-j}(i))_{j,i=0}^{N-1} \cdot (c_i)_{i=0}^{N-1}.
\]
By hypothesis on \(\kappa\), \((p_{\kappa-j}(i))_{j,i=0}^{N-1}\) is a circulant matrix (see e.g., [17, (6.5)]), and the right-hand side is a circular convolution in the sense of [17, p. 103]. (We assume here that \(N\) is a power of 2 and that \(N \mid (q-1)\), so that the number-theoretic transform can be applied; see [13, Thm. 8.2].) The verifier may thus evaluate this product in \(O(N \log N)\) time using the standard Cooley–Tukey algorithm [17, Thm. 4.2] and the convolution theorem [17, Thm. 6.1].

We turn to the prover, who must compute the \(m\) matrix evaluations:
\[
(P_{\kappa-j}(i,k))_{j,i=0}^{N-1} \cdot (c_i)_{i=0}^{N-1},
\]
for each \(k \in \{0, \ldots, m-1\}\) (in the process of computing the \(G_k\)). Using identical reasoning, we see that these can be computed with the aid of \(m\) parallel NTT-aided convolutions; the prover's complexity is therefore \(O(N \log^2 N)\).

The remaining work, for both the prover and verifier, amounts to evaluating \([\xi_0, \ldots, \xi_{o-1}] := (1, v, \ldots, v^{s-1}) \cdot \Xi\). By hypothesis on \(\Xi\), this can be done in linear time.

### E. Applications

Our main application is described in Section V. In the remainder of this section, we sketch additional possible applications of many-out-of-many proofs.

#### 1) Ring Multisignatures
Through a construction analogous to that of [9, §4.2], Example III.7 straightforwardly yields a scheme whereby a user may demonstrate possession of multiple distinct public keys from a fixed ring. Surprisingly, the resulting "signature" is no larger than a standard ring signature on the same ring. This protocol thus yields something akin to a multisignature, which in addition conceals the signing keys.

#### 2) An Application to Monero
We roughly sketch how this idea could in principle improve the efficiency of the Monero [4] cryptocurrency. While Monero’s proofs grow logarithmically in the number of mix-ins per UTXO spent (typically 10 in recent versions of Monero), a distinct proof must nonetheless be attached for each UTXO spent. This leads to transaction sizes that effectively grow linearly in the number of UTXOs spent, and (occasionally) to large transactions in practice, as well as to unspendable "dust".

We sketch an improved strategy rooted in "ring multisignatures". A user who wishes to spend \(o\) UTXOs can situate these UTXOs into a random list of size \(N := 11 \cdot o\) (containing \(10 \cdot o\) mix-ins). Finally, the user may attach a many-out-of-many proof which demonstrates spend authority over a secret subset consisting of \(o\) among the \(N\) total TXOs. The resulting proof size will grow as \(O(\log(o \cdot 11)) = O(\log(o))\) (i.e., logarithmically in the number \(o\) of UTXOs spent). We leave further development of this idea for future work.

### IV. An Alternative Ring Signature

In this section, we mention an additional ring signature-based construction, distinct from that of the previous section. This section generalizes one-out-of-many proofs in a different direction. It demonstrates that a re-encryption protocol—targeting the same secret index—can be carried out concurrently over multiple rings, and moreover that proofs of knowledge concerning re-encrypted elements obtained in this way imply analogous knowledge regarding the original elements. Essentially, we show that the Schnorr protocol remains sound, even when it is conducted over re-encryptions.

This technique is essential in making rigorous the use of basic Zether on re-encrypted ciphertexts and will be used in Section V. Indeed, Anonymous Zether combines many-out-of-many proofs with the techniques of this section.

The clearest way to express this idea is to present an alternate ring signature construction. This alternate construction, informally, uses a one-out-of-many proof to anonymize and a Schnorr proof to authenticate. Importantly, the resulting construction admits flexibility not offered by the original approach of [9, §4]; in particular, it can be run concurrently over multiple rings, while ensuring that the same secret key is used throughout.

We sketch this flexibility through a basic example. Consider the standard relation below, adapted from [9, §3]:
\[
R_3 = \{(σ, (y_0, \ldots, y_{N-1}); l, sk) \mid y_l = g^{sk}\}.
\]
While [9, Fig. 2] easily handles \(R_3\), it is less straightforward to see how it might adapt into a proof for, say, the relation:
\[
R^* = \{(σ, (y_{0,0}, \ldots, y_{0,N-1}), (y_{1,0}, \ldots, y_{1,N-1}); l, sk) \mid y_{0,l} = g_0^{sk} \land y_{1,l} = g_1^{sk}\},
\]
for bases \(g_0\) and \(g_1\) implicit in the reference string \(\sigma\), and where, crucially, the same secret key \(sk\) must be used in both discrete logarithms. (In another closely related variant, the index \(l\) is allowed to be different in both places.) Significantly, our protocol easily adapts to this setting.

#### A. Security Definitions
We recall certain security definitions for ring signature schemes (Setup, Gen, Sign, Verify), as presented in the article of Bender, Katz, and Morselli [18]. Given parameters \(\sigma \leftarrow \text{Setup}(1^\lambda)\), \(\text{Gen}(1^\lambda)\) outputs a keypair \((y, sk)\), whereas \(\pi \leftarrow \text{Sign}_i,sk(m, R)\) signs the message \(m\) on behalf of the ring \(R = (y_0, \ldots, y_{N-1})\) (where \((y_i, sk)\) is a valid keypair); finally, \(\text{Vrfy}_R(m, \pi)\) verifies the purported signature \(\pi\) on \(m\) on behalf of \(R\). We have the notions of unforgeability with respect to insider corruption (see Definition C.1) and anonymity with respect to adversarially chosen keys (see Definition C.2).

#### B. Ring Signature Protocol
We now give our protocol for the simple relation \(R_3\) above.

```plaintext
Flexible Ring Signature Protocol

1. P3 computes...
2. ...
3. ...
4. ...
5. ...
6. ...
7. ...
8. ...
9. end P3
10. P3 → V3: A, B, C, D, (Y_k, G_k)_{k=0}^{m-1}
11. V3: x ←$ F_q
12. V3 → P3: x
13. P3 computes...
14. ...
15. ...
16. ...
17. end P3
18. P3 → V3: f_0, ..., f_{m-1}, z_A, z_C, K
19. V3: c ←$ F_q
20. V3 → P3: c
21. P3 computes...
22. ...
23. end P3
24. P3 → V3: s
25. V3 requires...
26. ...
27. ...
28. ...
29. end V3
```

We define a ring signature \(\Pi = (\text{Gen}, \text{Sign}, \text{Verify})\) by applying the Fiat–Shamir transform to this protocol (see [19, Cons. 12.9]).

We have the following results. We defer proof sketches to the appendixes; rigorous proofs are also given in the full version of this paper.

**Theorem IV.1.** If the discrete logarithm problem is hard with respect to \(G\), then \(\Pi\) is unforgeable with respect to insider corruption.

**Proof.** Deferred to Appendix C.

**Theorem IV.2.** If the DDH problem is hard relative to \(G\), then \(\Pi\) is anonymous with respect to adversarially chosen keys.

**Proof.** Deferred to Appendix C.

### V. Application: Anonymous Zether

We turn to our main application, Anonymous Zether.

#### A. Review of Basic and Anonymous Zether
We summarize both basic and anonymous Zether; we refer to [6] for further details.

Zether’s global state consists of a mapping \(\text{acc}\) from El Gamal public keys to El Gamal ciphertexts; each \(y\)'s table entry contains an encryption of \(y\)'s balance \(b\) (in the exponent):
\[
y \mapsto \text{acc}[y] = \text{Enc}_y(b, r) = (g^b y^r, g^r),
\]
for some randomness \(r\) which \(y\) in general does not know. (For details on the synchronization issues surrounding "epochs", we refer to [6].)

1. **Basic Zether:**
   In "basic" (non-anonymous) Zether, a non-anonymous sender \(y\) may transfer funds to a non-anonymous recipient \(y'\). To do this, \(y\) should publish the public keys \(y\) and \(y'\), as well as a pair of ciphertexts \((C, D)\) and \((C', D')\) (i.e., with the same randomness). These should encrypt, under \(y\) and \(y'\)'s keys, the quantities \(g^{-b^*}\) and \(g^{b^*}\), respectively, for some integer \(b^* \in \{0, \ldots, \text{MAX}\}\) (where MAX is a fixed constant of the form \(2^n - 1\)). To apply the transfer, the administering system (e.g., smart contract) should group-add \((C, D)\) and \((C', D')\) to \(y\) and \(y'\)'s account balances (respectively). We denote by \((\text{CL}_n, \text{CR}_n)\) \(y\)'s balance after the homomorphic deduction is performed.

   Finally, the prover should prove knowledge of:
   - \(sk\) for which \(g^{sk} = y\) (knowledge of secret key),
   - \(r\) for which:
     - \(g^r = D\) (knowledge of randomness),
     - \((y \cdot y')^r = (C \cdot C')\) (ciphertexts encrypt opposite balances),
   - \(b^*\) and \(b'\) in \(\{0, \ldots, \text{MAX}\}\) for which \(C = g^{-b^*} \cdot D\) and \(\text{CL}_n = g^{b'} \cdot \text{CR}_n\) (overflow and overdraft protection).

Formally, we have the relation below, which essentially reproduces [6, (2)]:
\[
\{(y, y', \text{CL}_n, \text{CR}_n, C, C', D; sk, b^*, b', r) \mid g^{sk} = y \land C = g^{-b^*} \cdot D^{sk} \land \text{CL}_n = g^{b'} \cdot C^{sk} \land b^* \in \{0, \ldots, \text{MAX}\} \land b' \in \{0, \ldots, \text{MAX}\}\}
\]