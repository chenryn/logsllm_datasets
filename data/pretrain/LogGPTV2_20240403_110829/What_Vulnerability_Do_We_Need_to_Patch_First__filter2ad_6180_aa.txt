title:What Vulnerability Do We Need to Patch First?
author:Jin B. Hong and
Dong Seong Kim and
Abdelkrim Haqiq
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
What Vulnerability Do We Need to Patch First?
Jin B. Hong ∗, Dong Seong Kim ∗
∗Computer Science and Software Engineering
University of Canterbury
Christchurch, New Zealand
PI:EMAIL, PI:EMAIL
Abdelkrim Haqiq†
†Faculty of Sciences and Techniques
Hassan 1st University
Settat, Morocco
PI:EMAIL
Abstract—Computing a prioritized set of vulnerabilities to
patch is important for system administrators. This set deter-
mines the order of vulnerabilities to be patched, which is based
on their damaging effects in a networked system. One way to
ﬁnd the order of vulnerabilities to patch is to use an attack
representation model (ARM). However, security solutions com-
puted via ARMs are optimized for only the current state of
the networked system. As a result, the ARM must reanalyze
the network security, causing multiple iterations of the same
task to obtain the prioritized set of vulnerabilities. To address
this problem, we propose to use importance measures (IMs)
to rank network hosts and vulnerabilities, then combine these
measures to prioritize the order of vulnerabilities. We show that
an equivalent prioritized set of vulnerabilities can be computed
using the IMs compared to an exhaustive search method. We
show via simulation that the performance of computing the
set is dramatically improved, while equivalent solutions are
computed in various network scenarios.
Keywords-Attack Representation Model, Network Centrality,
Security Analysis, Security Management, Security Metrics,
Vulnerability Patch
I. INTRODUCTION
Managing what vulnerabilities to patch is one of critical
tasks to secure assets in an organisation, where untreated
vulnerabilities can cause a severe damage and a loss of
assets. So it is important to patch vulnerabilities and update
the networked system regularly while minimizing the cost
[1]. Patching all vulnerabilities becomes infeasible to satisfy
time and cost requirements due to a rapid growth of number
of vulnerabilities found [2]. A study shows that up to a 95%
of security breaches could have been prevented if the sys-
tems were up-to-date [3]. National Institute of Standards and
Technology (NIST) also provided vulnerability management
program for security managers and system administrators
with a guidance to managing vulnerabilities and patching
them [4], [5]. Section 2.4 in [4] states that it is essential
to set priorities on patching vulnerabilities for an effective
patch process due to the complexity and difﬁculty to perform
all remediation in a timely manner.
We assess the security of the networked system to com-
pute a prioritized set of vulnerabilities (PSV). The PSV is
deﬁned as a set of vulnerabilities which are most important
to enhance security (e.g., to minimize the system risk). One
can use an attack representation model (ARM) to analyze the
security [6]–[8]. ARMs can compute various security metrics
(e.g., probability of an attack success, impact, risk, return on
investment) [9], [10], where using different security metrics
will result in different PSV. A naive approach is to compute
all possible attack scenarios using the exhaustive search (ES)
method. However, computing all possible attack scenarios
has an exponential computational complexity due to ex-
ponentially growing number of attack paths with different
node combinations [11]. Therefore, it becomes infeasible to
compute the PSV in a large sized networked system (e.g.,
an enterprise system) using the ES method.
Various solutions are proposed to address the scalability
problem, such as structural changes and heuristic methods.
New structures of ARMs are proposed to improve scal-
ability [6]–[8], but the scalability problem remains when
the number of hosts becomes very large. Heuristic methods
are widely used to improve the scalability when evaluating
the ARM. Using only a subset of the ARM components,
also known as pruning, removes redundant components from
the ARM to reduce the amount of computations [12]–[16].
However, pruning may remove signiﬁcant components in
relevance to other security metrics that may be considered.
Moreover, heuristic methods only consider the current state
of the networked system, such that
the effectiveness of
patching a set of vulnerabilities is unknown when the state
of the networked system changes.
To overcome the aforementioned problems, we propose
to use combined importance measures (IMs) to compute
the PSV in the networked system. We extend the work in
[17] and compute the PSV, combined IMs, and conduct a
performance comparisons via simulation for various network
scenarios. The contributions of this paper are:
• To compute the combined IMs of hosts and vulnerabil-
ities;
• To compute the PSV using the combined IMs;
• To compare the performance of using the combined IMs
and the ES method to compute the PSV.
The rest of the paper is organized as follows. In Section 2,
related work is given. In Section 3, prioritized vulnerability
patch using combined IMs is described. Simulation results
are given in Section 4, discussion in Section 5, and Section
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.68
684
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:24:27 UTC from IEEE Xplore.  Restrictions apply. 
6 concludes this paper.
ZĞĚŚĂƚ ŶƚĞƌƉƌŝƐĞ
ƚƚĂĐŬĞƌůŽĐĂƚĞĚŽƵƚƐŝĚĞ
,
ϭ
ƚŚĞŝŶƚĞƌŶĂůŶĞƚǁŽƌŬ
tŝŶĚŽǁƐyW^Wϯ
dĂƌŐĞƚ
II. RELATED WORK
ŶǇ ї ,
͕ ,
ϭ
Ϯ
,
ϰ
ϯ
ї ,
ϰ
,
͕ ,
ϭ
,
ϭ
͕ ,
Ϯ
ї ŶǇ
,
ϰ
ї ,
ϭ
͕ ,
ϯ
,
ї,
,
ї,
ϰ
ϱ
ϱ
ϰ
There are difﬁculties of computing the PSV in practice
due to the scalability problem. Two major approaches are
made to improve this problem; (i) improving the ARM
structure, and (ii) using heuristic methods. Ou et al. [6]
presented Logical Attack Graph (LAG) and they showed that
the generation of the LAG is in a polynomial computational
complexity. However, the performance of security analysis
is not given. Ingols et al. [7] presented Multiple Prerequisite
Graph (MPG), a graph-based ARM generated by clustering
the reachability information. Their evaluation used graph
simpliﬁcation (i.e., pruning). However, it depends on the
security metric used (e.g., the initial MPG is regenerated
for all security metrics before simpliﬁcation). Hong et al.
[8] presented Hierarchical Attack Representation Models
(HARMs) that that reduced the overall computational com-
plexity. However, the security evaluation still suffers from
the scalability problem when the number of hosts is large.
Another approach is to use heuristic methods. Poolsappa-
sit et al. [16] used Genetic Algorithm (GA) in Attack Graphs
(AGs) to analyze the security. However, when considering
a PSV, the changes in the networked system after patching
a vulnerability is not captured. As a result, the process of
security analysis is repeated to ﬁnd the next vulnerability
to patch after updating the AG, which is similar to the ES
method. Sawilla et al. [15], [18] used AssetRank to rank
vulnerabilities using a dependency AG. They proposed to
analyze the security based on partial cuts (i.e., pruning), but
it also requires reconstruction of the AG for each security
metric used because different paths may be pruned for
different security metrics.
In this paper, we propose a scalable method to compute
the PSV using the combined IMs, an extension to work
[17]. Network centrality measures (NCMs) (e.g., degree,
closeness, betweenness [19]) are used to rank important
hosts in the network, and security metrics (e.g., common
vulnerability scoring system (CVSS) [20]) are used to rank
important vulnerabilities in a host. These values are nor-
malized and combined using weights to give a value that
reﬂects both network and vulnerability information. Details
of using the combined IMs and the ES method are described
in section III.

/ŶƚĞƌŶĞƚ
&
t
ϭ
ZŽƵƚĞƌ
Ϯ
ZŽƵƚĞƌ
ϭ
&
t
Ϯ
ZŽƵƚĞƌ
ϯ
&
t
ϯ
,
ϱ
tŝŶĚŽǁƐyW^Wϯ
tŝŶĚŽǁƐϳ
tŝŶĚŽǁƐϳ
,
Ϯ
,
ϯ
Figure 1. An Example Networked System
A. Assumptions
The ﬁrewall rule allows the attacker (A) to reach hosts H1
and H2. Hosts H1 and H3 can reach H4, which is connected
to the target host H5. We assume vulnerabilities of H4 and
H5 cannot be patched to maintain service requirements (i.e.,
delay in service is prohibited). The list of vulnerabilities is
shown in Table I for Windows 7 (W 7) and Redhat Enterprise
Linux (RE) operating systems. The details of vulnerabilities
(e.g., CVE ID) can be found in [4]. We selected a few
vulnerabilities for simplicity, but all vulnerabilities can be
incorporated. Values of vulnerability risks (impact
times
exploitability) is denoted as V R, and values of the attack
cost (relative to the CVSS base score) is denoted as VC.
Details of these security metrics can be found in [20]. We
assume the atomic attack is successful when any one of
listed vulnerabilities on the host is successfully exploited.
We assume that all events (e.g., attacks) are equiprobable
and all edges (e.g., path) are given equal preference to the
attacker.
Table I
LIST OF VULNERABILITIES
ID
W 71
W 72
W 73
W 74
RE1
RE2
RE3
RE4
RE5
CVE ID
CVE-2013-2556
CVE-2013-0013
CVE-2012-0001
CVE-2010-0494
CVE-2013-2051
CVE-2012-4546
CVE-2005-2700
CVE-2005-0337
CVE-2004-1145
VR
0.64
0.4214
0.86
0.2494
0.1421
0.2494
1
0.64
0.29
VC
7.5
5.8
9.3
4.3
2.6
4.3
10
7.5
5
III. COMPUTING A PRIORITIZED SET OF
VULNERABILITIES
B. The HARM
We use an example networked system (as shown in Figure
1) to show the process of computing a PSV using the ES
method and using the combined IMs via the HARM. First,
assumptions and settings of the example networked system
are described.
We use the HARM [8], [17] to model and analyze the
security, where an AG is used in the upper layer (by means
of using a tool, such as MulVAL [21]), and an Attack Tree
(AT) in the lower layer, respectively. The HARM of the
example networked system is shown in Figure 2.
685
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:24:27 UTC from IEEE Xplore.  Restrictions apply. 
hƉƉĞƌůĂǇĞƌ;'Ϳ
,
Ϯ

,
ϭ
,
ϰ
,
ϱ
,
ϯ
>ŽǁĞƌůĂǇĞƌ;dͿ
ŽŵƉƌŽŵŝƐĞtϳ
ŽŵƉƌŽŵŝƐĞZ
KZϭ
KZϭ
tϳϭ
tϳϮ tϳϯ tϳϰ
Zϭ
ZϮ
Zϯ
Zϰ
Zϱ
Figure 2. HARM of the Example Networked System
C. Security Analysis using the Exhaustive Search Method
First, we use the ES method to ﬁnd the PSV with two
security metrics, system risk (R) and attack cost (C). These
calculations are described in [10].
1) Risk Analysis: We deﬁne the system risk R as in
equation (1), and the path risk PR as in equation (2). The
host risk HR is calculated by evaluating the lower layer, and
the detailed description can be found in [17]. The system
risk calculation of the example networked system is shown
in equation (3), where MAX is the maximum value from
PRi and SUM is the sum of HR j. The system risk value is
relative to the system and it is comparable to other systems
if the same metric is used. We do not consider interpreting
the meaning of these values (e.g., is this risk value high?)
due to the limited space. One can compute the maximum
risk (e.g., assume all hosts have the maximum risk) and ﬁnd
the proportion of risk in the system to determine the level
of risk. We assume HR4 = HR5 = 1, which is the maximum
normalized risk value. The algorithm to compute the system
risk is shown in Figure 3. Table II shows the PSV for the
example networked system based on the risk metric.
R = MAX(PRi,i ∈ {All possible attack paths})
PRi = SUM(HR j, j ∈ {Hosts in attack path i})
R =MAX(PRi,i ∈ {All possible attack paths})
Rexample =MAX(PRH1H4H5
,PRH2H3H4H5
)
=MAX(SUM(HRH1
,HRH3
SUM(HRH2
,HRH4
,HRH4
),
,HRH5
,HRH5
))
=MAX(SUM(1,1,1),SUM(0.86,0.86,1,1))
=3.72
(1)
(2)
(3)
686
initialize system risk (R) → 0
compute R
solution set (S) → {}
while R > 0 do
current risk (CR) → 0
solution → none
for all vulnerability ∈ network do
1: procedure EXHAUSTIVESEARCHRISK
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
end while
18:
19: end procedure
end for
R = CR