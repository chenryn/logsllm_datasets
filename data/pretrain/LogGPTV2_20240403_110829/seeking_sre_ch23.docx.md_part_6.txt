通过互联网向客户提供 API
服务（也就是由内而外的提交服务级别协议/SLA，承诺服务响应速度，兑现这个承诺，并相应客户不可避免的支持请求，这也是一种反模式。让人想到十年前开发者还要向运维团队提交代码或者二进制文件，等待他们发布的流程。
在你反对这种说法之前，请记住：在十年前，将要求和代码提交给运维团队是一种认真、有纪律和被接受的业务实践，就像想在仅仅根据自己公司的系统来定义
SLI 和 SLO 一样让人无奈。
我要在这里借用一点算术知识，2017 年在 SRECon 美洲大会，Dave Rensin
做了一个绝佳的演讲，阐述了这个计算背后的所有技术原则。如果你还没有看过，可以参考
[视频和幻灯片](https://www.usenix.org/conference/srecon17americas/program/presentation/rensin)。要知道对于
30 天的时间来说，达到 99.99% 的可靠性目标意味着可以错过的 SLO 时间只有
4.32 分钟。如果你想达到 99.999%，对应的时间只有 26 秒。
这个计算意味着，如果没有共享指标和警报，那么即使你的系统本身达到了
99.99% 阈值，你的客户也不可能始终如一地满足他们的用户所需的 99.99%
的SLO。因为你仅仅关注自己的客户，而没有在意客户还有自己的客户。
哪怕只是他们获得警报、调查、向你来提交支持请求所需的时间，加上你来检查（哪怕不算修复时间）就足以让他们超过当月的错误预算，没准一次故障就能用掉整个季度的预算。
在你自己的系统恢复次序后，没准你可以达到 99.99%
或更高的在线率，但你仍然应该进一步超越自己。请自己查看你的流量，与你的
PM 交谈，了解关键客户是谁，提前整合并建立合作。
决定共享指标。如果你不用客户的角度来思考，就不可能有真正的对话。确保每个人都了解
SLO 的真正含义，并且轮值的响应机制能促成 SLO
达成。在出现问题之前，请制定共享通信和事件响应程序，以便对关键客户的问题响应采用（响应）组织内其他团队问题相同的模式。
当我拜访重要的外部客户时，我们会坐下来，看看他们在测量什么和我们测量什么。以及整个系统（无论是我们的组件还是他们的组件）需要提供给他们的客户怎样的服务（而不仅关注我们的客户）。我们一起确定优雅地成长需要的改进，并共同服务于客户的客户。
为此，我们需要承诺立即发出警报，而要不首先确定问题在这一端还是那一端，我们必须为共享集成测试和生产/试错环境提供远程访问机制。当然，始终牢记，SRE
的客户必须成为良好的合作伙伴，无论他们是内部客户还是外部客户，未解决的技术债务和不可持续的运维负担将成为这种服务模式的障碍。
*不仅仅*谷歌和亚马逊需要思考这种事情。随着对无处不在服务的需求增长，以及越来越多的公司构建相互依赖的产品，我们将必须与我们最有价值的客户和合作伙伴进行更深入的协作。谷歌的客户可靠性工程师Dave
Rensin，[介绍谷歌的客户可靠性工程](https://cloudplatform.googleblog.com/2016/10/introducing-a-new-era-of-customer-support-Google-Customer-Reliability-Engineering.html)正在这样做，其水平可能超出了目前大多数组织需要的范围，但这些想法很容易适用于许多服务。
# 反模式 18：修复运维团队
> *组织产生他们重视的结果，而不是某个部门追求的结果。*
>
> 修复运营团队：错误地认为，通过将 SRE 工程师聘用到公司来执行 SRE
> 任务（而不必在全公司进行革新），就可以改进服务交付。
>
>  
这是另一个广泛的谬误：人们第一次拥抱 SRE
这个词的时候，并不总是理解其含义。这个问题基本上是站点可靠性操作
（反模式 1）的另一种极端，也就是组织认为 SRE
只是一个流行语，可以作为一个热词来套用，从而赶上其他公司的招聘趋势。
在这一端，人们认为他们的问题很简单，关键在于他们的运维团队，如果他们把运维工程师换成自带秘籍的
SRE 工程师，谷歌和 Facebook
这类公司的超强实践在他们的公司就不难达成。但问题不在于运维团队，其实是系统结构使得他们的运维任务无法大规模完成。
SRE 不是修复运维的一个方法，甚至不能算是一种运维方法论。成功的 SRE
需要从根本上重新整理整个公司（或机构）开展业务的方式：如何确定优先级、如何进行规划、如何作出决定、如何设计和构建系统，以及团队如何相互影响。
SRE 是一种特定的模式，用于帮助组织更高效、更可持续的方式执行
DevOps，并更侧重于生产服务质量。这不仅仅是一份工作或一个团队，而是一个全公司的文化转变。旨在摆脱看门人、不明运维成本和体制化的辛劳，并创建一个健康的反馈系统，以更有效地平衡工程资源的分配，减少冲突。
其核心是承诺适当的可靠性，以此作为组织创建（或依赖）的任何系统的核心功能。以系统的方法（和软件工程理念）来避免运维的辛劳、延迟和人为错误，也提倡整体的责任共享。
与精益管理和 DevOps 一样，SRE 的理念与他们有许多共同的特点。SRE
是一个持续的过程，不仅需要负责协调工作的专家团队，还需要来自所有其他关键业务单位的专注。
因此，如果没有组织最高管理层首席执行官的支持是最好的，总监级是最起码的。至少，你的产品开发和生产工程团队的负责人应该就预算、人员配备、轮值、辛劳、变革控制达成一致。来推动这种模式，你从这个
SRE
的实施种获得的好处将是有限的。当然你仍然可以对团队流程和系统进行重大改进。而且倘若获得其他团队的足够支持，你甚至可能最终实现一个相当实用的
DevOps 模型。
但是，如果你希望保证工程优先且避免辛劳，从而可靠地保证生产力的良性循环，哪怕不时导致
SLO
不能达成的代价。在整个组织中建立协调良好的优先事项，这些优先事项不会反复被抛弃或经常陷入*冲突*之中；建立和维护能吸引和留住顶尖人才所需的可持续工作平衡机制；组织对
SRE
原则的理解和认同越深入，离实现目标也就越近。做你必须做的任何事情，以确保整个组织都支持同样的策略。
# 那么，这就足够了吗？
> *就是这些？我们搞清了吗？*
>
> 那么，这一切意味着什么呢？我们如何处理这些信息，这些来之不易的教训带来了意想不到的后果？只是一些坑需要注意避开，只要我们保持警惕，就永远不会有问题，对不对？
>
>  
可悲的是
No。因为每个不愉快的技术或企业都有自己的特色，而且我接触的公司哪怕一小部分都算不上，我们不得不看到这些坑随这行业的发展而增长和变化。
这里最重要的事情是过程（最根本的 SRE
过程）：持续审视我们和同行遇到麻烦的地方，然后不仅为我们自己的组织创造学习机会，而且把那些失败的目录编成故事，可以分享到整个行业。
事实上，我认为建立一个反模式存储库的时机可能已经成熟，同行们可以在这里分享、讨论和分类潜在的新模式或变体。如果你意识到有什么我们没有提到的，请帮忙分享出来，免得更多人走弯路。所以可以在推特上
\@BlakeBisset 找我，用 #SREantipatterns
标签来归类。即使我们没有发现任何新东西，至少我们也会觉得谈话很愉快？
叶公好龙！希望不如计划！  
# 编者介绍
Blake Bisset
在16岁时得到了他的第一份合法的技术工作。他建立了三个初创公司（一个生物化学、一个制药公司，这一次建立公司是因为：一群孩子围坐在一起，想知道为什么他们不能在互联网上看电影），然后成为
YouTube 和 Chrome 的 SRE
经理，在那里他最有成就感的就是连续多年保持书写最佳故障报告。他目前担任
USENIX SRECon 计划委员会成员，并担任 Dropbox 的可靠性工程主管。