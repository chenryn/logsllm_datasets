for all IoT devices are stored in SERENIoT’s blockchain. Through
the use of blockchain, SERENIoT is fully decentralized and can
be bootstrapped with a small number of Sentinels. It allows the
system to be fully independent from trusted third parties, device
manufacturers, and to support a large set of diverse IoT devices.
We discuss additional motivation for building SERENIoT on top of
544ACSAC 2020, December 7–11, 2020, Austin, USA
Corentin Thomasset and David Barrera
a blockchain in Section 3.5. SERENIoT is fully backward compatible
with many existing IP-based IoT devices, requiring no changes to
their hardware, firmware, or apps. The system is also designed to
be forward compatible with devices that don’t yet exist, as long
as they use IP-based communication and can connect to the local
Sentinel.
devices of the same type to change the specification and allow the
attack to go through (see Section 4.5).
3.3 Sentinel architecture
Figure 2: Supported devices for SERENIoT. Devices toward
the left have simpler network behavior and tend to have a
similar network footprint shared across devices of the same
type. Devices toward the right have unique network foot-
prints determined by their users.
We built SERENIoT with a focus on consumer IoT, noting high ac-
curacy and performance when working with feature-limited devices
such as smart bulbs, smart switches, smart locks, smart thermostats,
etc. (see Figure 2). These devices typically only interact with a small
set of cloud services through well-defined APIs, thus their network
footprint can be accurately determined (see Section 4.3). According
to a 2019 study [21], this targets approximately 41% of devices de-
ployed in North American homes, and 28.4% of devices in Western
Europe5. SERENIoT cannot support systems with variable (typically
human-dependent) network behavior, since each system may create
a unique set of network connections.
3.2 Threat model
SERENIoT protects devices against attackers trying to change their
behavior, as widely used by botnets [1, 5]. SERENIoT has been
designed to defend against the two following attack scenarios:
• An IoT device has been compromised locally by a malware
trying to change its behavior to accomplish malicious actions.
The attack vector can vary; the IoT device can be infected
by another device on the local network (for example by an
infected computer or IoT device), or the infection can be the
result of a physical action on the device (for example a mem-
ory card swap). In this situation SERENIoT would protect the
IoT device from attacking targets on the internet by blocking
all the outgoing traffic deviating from the specification.
• An IoT device is directly exposed on the internet. SERE-
NIoT would protect the IoT device from incoming attacks by
blocking all incoming traffic differing from the specification.
Most IoT devices don’t normally receive incoming connec-
tions from the internet and SERENIoT will then behave as a
firewall blocking all incoming connections.
Once an allow list has been populated for a device, an attacker
would need to change the behavior of more than 50% of the IoT
5We include all IoT devices in the study by Kumar et al. [21] except media boxes, game
consoles, and file storage appliances which are functionally as complex as general
purpose computers
Figure 3: Main components of a Sentinel. Description inline.
Sentinels use a modular architecture with 4 main components
(see Figure 3): The network filter component (1) is in charge of
enforcing the policy by dropping network packets that are not
allowed and forwarding acceptable traffic. The network filter relies
on the packet signature module (2) to serialize the raw IP packet
into a textual signature and on the policy module (3) that lists all
the allowed packet signatures. Finally, the blockchain module (4)
keeps the policy updated by synchronizing the ledger with the other
Sentinels and by reporting the newly recorded packet signatures.
3.4 Computing packet signatures
Packet signatures allow Sentinels to characterize recorded pack-
ets. An effective signature algorithm should be precise enough to
differentiate packets from different network connections but flex-
ible enough to produce the same signature across devices of the
same model. Unlike general purpose computers whose behavior
changes depending on their usage, IoT devices of a same model
behave similarly (often identically in terms of traffic transmitted
and destination) and produce similar network traces. We have veri-
fied this hypothesis during our evaluation in Section 4. Our proof
of concept uses packet signatures at the IP level and focuses on
the fields that remain constant across devices. While other packet
signatures and connection fingerprinting techniques exist, we use
a NetFlow6 like representation to strike a balance between unique-
ness and consistency across devices. SERENIoT’s packet signature
aggregates sequences of packets sharing the following values:
• Protocol of the IP payload
• Endpoint (domain name or IP address if domain is unavail-
• Service port
able)
6https://www.cisco.com/c/en/us/products/collateral/ios-nx-os-software/ios-
netflow/prod_white_paper0900aecd80406232.html
545SERENIoT
ACSAC 2020, December 7–11, 2020, Austin, USA
The endpoint identifies the remote host with which the IoT de-
vice is interacting. To resolve potential domains, we perform reverse
DNS lookups. The service port identifies the well-known port num-
ber used by the connection7. Packets of a same flow will share the
same signature that will be used by SERENIoT to identify anoma-
lous flows and packets. Signatures are computed by serializing and
hashing the following values:
Siдnature = H(protocol, endpoint, service port)
Packet signatures don’t include device-specific identifiers such
as Media Access Control Organizational Unique Identifiers (OUI).
Indeed, it is unclear whether all devices of a same model will share
a single OUI as many manufacturers are allocated more than one.
Two identical devices with different OUIs would be assigned to
different chains weakening the security of both chains. Moreover,
malicious code running on an IoT device may be capable of manip-
ulating the MAC address. Our choice of packet signatures allows
to differentiate packets going to untrusted hosts from those going
to the manufacturer’s API. It also allows to differentiate packets
initiated by the monitored device from those initiated by a remote
entity in the case of IPv6 network or networks without NAT where
devices are directly exposed on the internet.
Note that SERENIoT does not precisely identify devices. Devices
that produce the same set of packet signatures are grouped and the
system assumes they are of the same type. Devices are characterized
by their packets signatures and device types are fingerprinted by
hashing their sorted set of packet signatures.
3.5 SERENIoT’s blockchain
The blockchain is the key behind SERENIoT’s collaborative policy
generation mechanism. It ensures that all the packet signatures
written to the policy are agreed upon through a distributed consen-
sus protocol. This provides robustness and trust by making sure
malicious signatures are not added to the allow list as long as a ma-
jority of Sentinels participating in the network observe legitimate
behaviors on their local IoT devices.
Our choice of building SERENIoT on blockchain stems from 3
core design requirements: (1) To allow SERENIoT to operate in-
dependently. Blockchain distributes the data hosting across users
allowing SERENIoT to be independent from any third party. (2) To
deploy a highly available system providing security policy updates
at very low cost. (3) To make the system available without restric-
tion of use to certain brands of devices. We evaluate our blockchain-
based system in Section 4.
To implement SERENIoT, we have designed a custom public
blockchain based on Bitcoin’s blockchain principles but with no
inherent cryptocurrency. We elected to build a custom blockchain
because current blockchain frameworks are either strongly tied
to token economics (e.g., Ethereum8) or designed to build permis-
sioned blockchains (e.g., Hyperledger fabric9). Designing our own
chain gives us the flexibility to include only features specific to our
7The service port generally refers to the remote endpoint’s port. However, some IoT
devices (e.g., cameras) host certain services locally, in which case the service port
refers to the local port hosting the service. To differentiate between local and remote
services, we append a direction identifier (L for local or R for remote) to the service
port.
8https://ethereum.org/
9https://www.hyperledger.org/projects/fabric
requirements while avoiding compatibility challenges arising from
trying to retrofit another framework to our use case.
3.5.1 Ledger. SERENIoT’s ledger contains packet signatures re-
ported by the Sentinels. It is based on a distributed timestamp server
chaining data blocks together. The linked timestamping mechanism
ensures that blocks cannot be rearranged or modified without in-
validating subsequent blocks in the chain. As the blockchain grows,
Sentinels converge on the chain with the most blocks. Figure 4
illustrates a sample chain for a specific device.
Figure 4: Device chain: The Sentinels add packet signatures
into blocks. The chain grows and only signatures listed into
the longest chain are trusted.
In our implementation, blocks store a list of packet signatures
reported by the Sentinels instead of a Merkle root of transactions
as in Bitcoin (see Figure 5). The complete list of reported signatures
is indeed necessary to build the policy and there is thus no need
for selective reveal.
Figure 5: SERENIoT’s Block architecture. The Sentinel Ad-
dress is a unique identifier generated at Sentinels start up us-
ing the same algorithm used to generate Bitcoin’s addresses.
To extend the chain and report new packet signatures to the
system, Sentinels only work on top of blocks that contain signa-
tures that they have previously observed. That is, Sentinels avoid
appending to chains that include unknown signatures. These packet
signatures may be malicious or reflect previously unseen connec-
tions for a device. Thus, the fastest growing chain always contains
the most common packet signatures that have been observed by
a majority of Sentinels. This mechanism is described in detail in
Section 3.5.3.
The policy is a cumulative set of allowed packet signatures that
have been included in confirmed blocks since the chain genesis.
546ACSAC 2020, December 7–11, 2020, Austin, USA
Corentin Thomasset and David Barrera
Note that this policy may allow behavior that is no longer necessary
to the device to operate (e.g. a feature that was removed through
a software update). Future work will explore removing outdated
signatures.
SERENIoT extends this concept and uses a multichain architec-
ture with one device chain / allow list to track the behavior of each
protected IoT model (see 3.5.5).
3.5.2 Consensus. SERENIoT’s consensus algorithm ensures that
the allow list is kept synchronized between Sentinels so that they all
converge to an identical copy of the blockchain. It is also responsible
for making sure that the fastest growing chain gathers the most
Sentinels. To facilitate the development of our proof of concept, we
implement a proof of work consensus algorithm [28]. We discuss
alternative consensus algorithms in Section 6.1.
With proof of work, blocks are produced by nodes racing to solve
computational puzzles. The node that solves the puzzle appends
its block to the chain. Each additional block increases the effort
required to rewrite the longest chain, since changing a past block
would require every subsequent proof of work to be recomputed.
As long as the computational power distribution remains balanced
across Sentinels, the fastest growing chain will gather the most
Sentinels.
Sentinels workflow. Sentinels participate in maintaining and
3.5.3
updating the policies by serving as blockchain nodes. Sentinels only
subscribe to the policies corresponding to the devices they locally
monitor. A Sentinel’s blockchain node process can be described as
follows.
(1) The Sentinel monitors IoT devices that are connected to
it and collects new packet signatures into allow list block
candidates. One allow list block candidate is created per
subscribed allow list. If a device is inactive or no new packet
signatures have been recorded, the Sentinel builds an empty
block.
(2) The Sentinel computes the hashes of the allow list block can-
didates’ headers and adds them to a control block candidate.
(3) The Sentinel works on solving the proof of work for the
control block candidate.
(4) The first Sentinel to produce a control block is selected to
append its allow list block candidates to the corresponding
list. To do so, it broadcasts the control block along with all
the allow list blocks listed within.
(5) Sentinels always accept broadcasted control blocks. Sentinels
only accept a broadcasted allow list block if they are regis-
tered to the corresponding allow list and if they recognize
all its packet signatures. When accepting a block, Sentinels
work on extending the chain on top of that block. An allow
list block is only valid if its block header is listed in a control
block. Sentinels always converge on the longest chain and
forks are resolved when a branch becomes longer than the
others.
3.5.4 Adding incentive for open networks. We designed SERENIoT’s
blockchain to work with no inherent cryptocurrency. Thus, Sen-
tinels that contribute to the network by providing computational
power cannot be rewarded with some cryptocurrency. To encourage
Sentinels to stay active and contribute to the blockchain, inactive
Sentinels are isolated by their neighbors and do not receive the
latest allow list updates. To signal their activity and contribution to
the network, Sentinels use a mechanism inspired by mining pools
and broadcast partial proof of work solutions to the problem they
are trying to solve. This proves to their neighbors that they are
active and contributing to the system. Isolated Sentinels gradually
become less useful since they are no longer able to verify newly
recorded packet signatures. This in turn prevents them from differ-
entiating between normal and abnormal behavior as observed by a
majority of Sentinels.
3.5.5 Multichain. The logic described thus far works well for one
specific IoT device. Indeed, every IoT device protected by SERENIoT
needs its own blockchain as Sentinels cannot adjudicate on blocks
containing packet signatures for unknown devices. SERENIoT uses
a multichain solution allowing Sentinels to subscribe to the allow
lists concerning the devices they protect. Thus, each device type
uses a separate blockchain to track its behavior. When a new device
is connected to a Sentinel, the Sentinel profiles it and assigns it to a
chain aggregating similar devices. To profile a device and subscribe
to the right chain, Sentinels observe device behavior during a short
profiling phase upon its connection. Once the profiling phase is
complete, Sentinels compute the allow list identifier corresponding
to the device. This identifier is computed by hashing the sorted list
of packet signatures collected during the profiling phase. Note that
SERENIoT does not identify devices precisely. Instead, devices that
produce the same set of packet signatures are grouped together
and the system assumes they are the same type. Thus, devices are
characterized by their packets signatures and device models are
fingerprinted by hashing their sorted set of packet signatures.
To support multiple IoT devices, SERENIoT’s Blockchain is com-
posed of one control chain and multiple device-specific chains (also
referred to as allow lists), one for each device model protected by
the Sentinels. In our implementation, the control chain stores the
block headers of valid allow list blocks and uses the proof of work
consensus mechanism. Device-specific chains do not have an inde-
pendent consensus mechanism, they instead leverage the control
chain’s proof of work.
The control chain improves robustness by requiring all Sentinels
(regardless of their locally monitored IoT devices) to ultimately
contribute to a single global chain while building on device-specific
blockchains. This increases the effort required for an attacker to
target a specific unpopular allow list to rewrite it. Indeed, all blocks
in device-specific chains are validated in the control chain that
gathers all the Sentinels of the network.
3.6 Detecting behavior changes
SERENIoT is designed to protect IoT devices with limited function-
alities such as smart bulbs, smart outlets or smart cameras. These
devices typically establish a small set of network connections so we
can characterize their expected behavior by observing the network
traffic of a large number of devices of a specific model. Sentinels
use the most common behavior observed by nodes in the system
to create a specification of what the observed device should be
allowed to do. Specification-based intrusion detection systems raise
alarms when behavior deviates (even slightly) from a narrowly
547SERENIoT
ACSAC 2020, December 7–11, 2020, Austin, USA
Theses cases, however, can be better addressed by treating the de-
vice itself as untrusted and taking action against the manufacturer.
3.6.2 Transparency & auditing . In addition to Sentinels network
filtering capabilities, the open and public nature of SERENIoT’s
blockchain introduces a new data source for cyber security experts,
allowing them to follow and audit in real time the behavioral evolu-
tions of IoT devices. This can be used to monitor emerging threats,
update adoption rates, etc. For example, it is possible to measure
the spread of a growing botnet by monitoring rejected forks. Trans-
parency and privacy concerns are discussed in Section 6.2.
3.7 Device onboarding
When a new IoT device is added to a local network protected by
SERENIoT, the Sentinel first goes through a profiling phase to fin-
gerprint the device before enforcing network filtering. This process
is detailed below:
Figure 7: Device onboarding flow-chart.
(1) Onboarding: The user buys a new device and connects it
to the Sentinel. To connect the device to the Sentinel, the
user uses the dedicated WiFi network broadcasted by the
Sentinel.