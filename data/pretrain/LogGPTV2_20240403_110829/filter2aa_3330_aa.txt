GadgetInspector源码分析
前置废话
我不想搞介绍，就这样吧，写这个主要是⽹上的对我很晦涩，很多别⼈觉得简单的我不会，
包括⼀些汇编指令等，当然本篇也是站在很多前辈的肩膀上进⾏学习，属实是少花了很多功
夫
在分析gadgetinspector源码的时候，⼤概会对各个核⼼类讲解，并简单分析ASM部分，btw本
篇基于jdk8进⾏分析
当然既然是学习，那么我们肯定是需要跟踪代码的，⽽GI这款⼯具属实头疼，本⾝不仅引⼊
了jdk的⼀些依赖如rt.jar，在调试的过程当中也出现了gadgetinspector当中的类，属实不适合学
习时使⽤，为了解决这个问题，我
在 gadgetinspector.ClassResourceEnumerator#getAllClasses 当中将源码修改如
此，这样我便能⾃⾏写代码逻辑，并展开学习，我个⼈认为化繁为简也是⼀个很重要的过
程，如下我剔除了jdk原本的类，并且要求全类名包含特定字符，因此解决了这个问题，当然
在具体使⽤的时候还是要替换回来
可以看到经过简单的优化，过程也更加清晰，但是在后⾯有些地⽅需要改回来不然得不到正
确结果，这⾥是为了分析所以暂时改⼀下
在学习的时候配合反汇编代码会更容易理解，Java也⾃带了查看的⽅法 javap -c 类名
lol，多逼逼⼀句⼀定要在熟悉jvm stack和本地变量表，不然很多逻辑会是懵的
ASM部分
这部分不建议直接看，建议在后⾯看到具体部分再来看看
public Collection getAllClasses() throws IOException {
  //        Collection result = new ArrayList<>
(getRuntimeClasses());
  Collection result = new ArrayList<>();
  if (ConfigHelper.onlyJDK)
    return result;
  for (ClassPath.ClassInfo classInfo : 
ClassPath.from(classLoader).getAllClasses()) {
    if (classInfo.getName().contains("yyds")){
      result.add(new ClassLoaderClassResource(classLoader, 
classInfo.getResourceName()));
    }
  }
  return result;
}
模拟JVM栈帧变化
这部分很重要如果搞不明⽩后⾯在看GI代码的时候会很懵逼
在程序运⾏的过程中，每⼀个线程都对应⼀个属于⾃⼰的JVM Stack。当⼀个新线程开始时会
在内存上分配⼀个属于⾃⼰的JVM Stack；当该线程执⾏结束后，相应的JVM Stack内存空间
也就被回收了。
在JVM Stack当中，是栈的结构，⾥⾯存储的是frames；每⼀个frame空间可以称之为Stack 
Frame。当调⽤⼀个新⽅法的时候，就会在JVM Stack上分配⼀个frame空间；当⽅法退出时，
相应的frame空间也会JVM Stack上进⾏清除掉（出栈操作）。在frame空间当中，有两个重要
的结构，即local variables（⼀个索引从0开始的数组）和operand stack（栈的结构）。对于每
⼀个⽅法来说，它都是在⾃⼰的Stack Frame上来运⾏的，在编译的时候，就决定了local 
variables和operand stack的⼤⼩。
这⾥特别要注意在⽅法刚开始的时候，operand stack是空，不需要存储任何的数据，⽽local 
variables的初始状态，则需要考虑三个因素：
当前⽅法是否为static⽅法。如果当前⽅法是non-static⽅法，则需要在local variables索引为
0的位置存在⼀个this变量；如果当前⽅法是static⽅法，则不需要存储this。
当前⽅法是否接收参数。⽅法接收的参数，会按照参数的声明顺序放到local variables当
中。
⽅法参数是否包含long或double类型。如果⽅法的参数是long或double类型，那么它在local 
variables当中占⽤两个位置。
这⾥推荐⼀个IDEA的插件 ASM Bytecode Viewer ，可以很⽅便配合学习理解，同时如果需
要查当中的汇编指令的含义也很简单，去官⽹看看就好https://docs.oracle.com/javase/specs/jvms
/se15/html/jvms-6.html
ClassVisitor
我们只要知道在ClassVisitor类当中，定义的visitXxx()⽅法中的参数与ClassFile结构密切相关就
很关键了
⾸先看看⾥⾯的字段
ClassVisitor当中许多的visitXxx()⽅法，这些visitXxx()⽅法与 ClassFile 的结构密切相关，⽽
这下⾯四个才是我们关注的主体
public abstract class ClassVisitor {
    //指出了当前使⽤的ASM API版本
    protected final int api;
    //⼀个ClassVisitor类型的数据，可以将多个ClassVisitor串连起来
    protected ClassVisitor cv;
}
其中signature为类签名（⾮泛型为NUll），同时visitXxx()⽅法，也有调⽤顺序，了解下就好，
结合这个调⽤顺序，GI的这部分代码就很好懂了
public abstract class ClassVisitor {
    public void visit(
        final int version,
        final int access,
        final String name,
        final String signature,
        final String superName,
        final String[] interfaces);
    public FieldVisitor visitField( // 访问字段
        final int access,
        final String name,
        final String descriptor,
        final String signature,
        final Object value);
    public MethodVisitor visitMethod( // 访问⽅法
        final int access,
        final String name,
        final String descriptor,
        final String signature,
        final String[] exceptions);
    public void visitEnd();
}
visit
[visitSource][visitModule][visitNestHost][visitPermittedSubclass]
[visitOuterClass]
(
 visitAnnotation |
 visitTypeAnnotation |
 visitAttribute
)*
(
 visitNestMember |
 visitInnerClass |
 visitRecordComponent |
MethodVisitor
和上⾯很多部分相似，我们直接⼊正⽂，也是有很多关键的visitxxx⽅法，对⼀些我们需要的
做个精简的调⽤，看英⽂名称就能知道意思就不多说每个部分了
这⾥主要记录下visitxxxInsn
 visitField |
 visitMethod
)* 
visitEnd
(visitParameter)*
[visitAnnotationDefault]
(visitAnnotation | visitAnnotableParameterCount | visitParameterAnnotation 
| visitTypeAnnotation | visitAttribute)*
[
    visitCode
    (
        visitFrame//访问当前局部变量表和操作数栈中元素的状态，参数就是局部变量表和操
作数栈的内容 |
        visitXxxInsn |
        visitLabel |
        visitInsnAnnotation |
        visitTryCatchBlock |
        visitTryCatchAnnotation |
        visitLocalVariable |
        visitLocalVariableAnnotation |
        visitLineNumber
    )*
    visitMaxs
]
在GI当中我们主要关⼼visitMethodInsn，顺便说⼀些相关指令其中invokestatic⽤来调⽤静态⽅
法；invokespecial⽤来调⽤私有⽅法，⽗类⽅法(super.)，类构造器⽅法；invokeinterface调⽤接
⼜⽅法；invokedynamic⽅法动态执⾏；invokevirtual调⽤所有虚⽅法，即除了以上的⽅法外全
⽤invokevirtual调⽤。
分析
下⾯根据流程分析具体的类当中的操作
MethodDiscovery
这个⽅法主要是获得类以及⽅法的信息
其中在methods.dat⾥⾯按照指定格式记录：类名、⽅法名、参数以及返回值、是否为静态⽅法
在classes.dat⾥⾯按照指定格式记录：类名、⽗类名、实现的接⼜名、是否为接⼜、类的所有
字段、注解名
看了下main函数的主体
visitFieldInsn ： 访问某个成员变量的指令，⽀持GETSTATIC, PUTSTATIC, GETFIELD or 
PUTFIELD.
visitIincInsn ： 访问⾃增指令
visitVarInsn ：访问局部变量指令，就是取局部变量变的值放⼊操作数栈
visitMethodInsn ：访问⽅法指令，就是调⽤某个⽅法，⽀持INVOKEVIRTUAL, 
INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.
visitInsn ： 访问⽆操作数的指令，例如nop，duo等等
visitTypeInsn：访问type指令，即将⼀个类的全限定名作为参数然后new⼀个对象压⼊操作数栈
中
ClassLoader classLoader = 
Util.getWarClassLoader(Paths.get("/Users/y4tacker/Desktop/test/shorter-
0.0.1-SNAPSHOT.jar"));
MethodDiscovery methodDiscovery = new MethodDiscovery();
methodDiscovery.discover(new ClassResourceEnumerator(classLoader));
methodDiscovery.save();
⾸先第⼀⾏的 gadgetinspector.Util#getWarClassLoader 不是很难不贴代码了，⾸先
创建了⼀个临时⽂件夹，通过addShutdownHook在jvm shutdown⾃动删除，之后将jar/war的⽂
件解压到临时⽂件夹，并配置/资源⽂件的路径，并返回URLClassLoader
之后调⽤ gadgetinspector.MethodDiscovery#discover ，可以看出通过foreach遍历，
之后使⽤asm的ClassVisitor、MethodVisitor，利⽤观察模式去扫描所有的class和method并记录
调⽤ gadgetinspector.ClassResourceEnumerator#getAllClasses ，⾸先⾥⾯调⽤了
getRuntimeClasses()函数
可以看到核⼼代码
public void discover(final ClassResourceEnumerator 
classResourceEnumerator) throws Exception {
  for (ClassResourceEnumerator.ClassResource classResource : 
classResourceEnumerator.getAllClasses()) {
    try (InputStream in = classResource.getInputStream()) {
      ClassReader cr = new ClassReader(in);
      try {
        //使⽤asm的ClassVisitor、MethodVisitor，利⽤观察模式去扫描所有的class和
method并记录
        cr.accept(new MethodDiscoveryClassVisitor(), 
ClassReader.EXPAND_FRAMES);
      } catch (Exception e) {
        LOGGER.error("Exception analyzing: " + classResource.getName(), 
e);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
他先获取JDK内部的String类的路径，加载String类的同时，类加载器还会将rt.jar的全部类⼀起
加载，最后将rt.jar当中的所有类加⼊到ClassResource类型的result并且返回
之后也就是⼀个继承了ClassVisitor的MethodDiscoveryClassVisitor分别在visitMethod和visitEnd
依次添加⽅法和类到缓存
之后就是调⽤save⽅法保存到⽂件
URL stringClassUrl = Object.class.getResource("String.class");
URLConnection connection = stringClassUrl.openConnection();
Collection result = new ArrayList<>();
if (connection instanceof JarURLConnection) {
  URL runtimeUrl = ((JarURLConnection) connection).getJarFileURL();
  URLClassLoader classLoader = new URLClassLoader(new URL[]{runtimeUrl});
  for (ClassPath.ClassInfo classInfo : 
ClassPath.from(classLoader).getAllClasses()) {
    result.add(new ClassLoaderClassResource(classLoader, 
classInfo.getResourceName()));
  }
}
    public void save() throws IOException {
        //保存和读取使⽤Factory实现
        //classes.dat数据格式：
        //类名(例：java/lang/String) ⽗类 接⼝A,接⼝B,接⼝C 是否接⼝ 字段1!字段
1access!字段1类型!字段2!字段2access!字段1类型
        DataLoader.saveData(Paths.get("classes.dat"), new 
ClassReference.Factory(), discoveredClasses);
        //methods.dat数据格式：
        //类名 ⽅法名 ⽅法描述 是否静态⽅法
        DataLoader.saveData(Paths.get("methods.dat"), new 
MethodReference.Factory(), discoveredMethods);
        //形成 类名(ClassReference.Handle)->类(ClassReference) 的映射关系
PassthroughDiscovery
这个类⽤来寻找函数的第⼏个参数能控制返回值：
0代表this、1-n分别代表第⼏个函数当中的形参
我们主要来关注gadgetinspector.PassthroughDiscovery#discover，先简单看看逻辑
        Map classMap = new 
HashMap<>();
        for (ClassReference clazz : discoveredClasses) {
            classMap.put(clazz.getHandle(), clazz);
        }
        //保存classes.dat和methods.dat的同时，对所有的class进⾏递归整合，得到集合
{class:[subclass]}，
        // 递归寻找class的⽗类、超类或实现的接⼝类，保存⾄inheritanceMap.dat
        InheritanceDeriver.derive(classMap).save();
    }
public void discover(final ClassResourceEnumerator 
classResourceEnumerator, final GIConfig config) throws IOException {
  //加载⽂件记录的所有⽅法信息
  Map methodMap = 
DataLoader.loadMethods();
  //加载⽂件记录的所有类信息
  Map classMap = 
DataLoader.loadClasses();
  //加载⽂件记录的所有类继承、实现关联信息
  InheritanceMap inheritanceMap = InheritanceMap.load();
  //搜索⽅法间的调⽤关系，缓存⾄methodCalls集合，返回 类名->类资源 映射集合
  Map classResourceByName = 
discoverMethodCalls(classResourceEnumerator);
  //对⽅法调⽤关系进⾏字典排序
  List sortedMethods = 
topologicallySortMethodCalls();
  /**
         * classResourceByName：类资源集合
跳过加载⽂件的部分，我们来看gadgetinspector.PassthroughDiscovery#discoverMethodCalls