    update pg_database set datallowconn = FALSE where datname = 'template0';
    \q
    EOF
    sudo -u postgres psql -f $HOME/pg-utf8.sql &&
    sudo -u postgres createuser msfdev -dRS &&
    sudo -u postgres psql -c \
      "ALTER USER msfdev with ENCRYPTED PASSWORD 'YOUR_PASSWORD_FOR_PGSQL';" &&
    sudo -u postgres createdb --owner msfdev msf_dev_db &&
    sudo -u postgres createdb --owner msfdev msf_test_db &&
    cat  $HOME/.msf4/database.yml
    # Development Database
    development: &pgsql
      adapter: postgresql
      database: msf_dev_db
      username: msfdev
      password: YOUR_PASSWORD_FOR_PGSQL
      host: localhost
      port: 5432
      pool: 5
      timeout: 5
    # Production database -- same as dev
    production: &production
       对 rapid7/master 进行强制 Push 是绝对不可以的。但是可以在别的正在开发的分支，重写一些历史并不会构成联邦犯罪。
### Msftidy 工具
为了对任何你正在编写的新模块进行检查，你需要在 Commit 之前，以及 Merge 之后进行 HOOK 以使用我们的代码检查工具 `msftity.rb`
进行检查，所以按照如下命令配置 Git HOOK：
    cd $HOME/git/metasploit-framework
    ln -sf ../../tools/dev/pre-commit-hook.rb .git/hooks/pre-commit
    ln -sf ../../tools/dev/pre-commit-hook.rb .git/hooks/post-merge
### 配置你的身份
最后，如果你想为 Metasploit 做贡献的话（译者注：事实上所有开源项目都应该这样做），你至少需要按照如下命令配置你的名字与邮箱：
    git config --global user.name   "YOUR_USERNAME_FOR_REAL_LIFE"
    git config --global user.email  "YOUR_USERNAME_FOR_EMAIL"
    git config --global github.user "YOUR_USERNAME_FOR_GITHUB"
注意你的邮箱地址必须和你的 GitHub 注册的邮箱相互匹配。
### 对 Commits 签名
我们热爱对 Commits 进行签名，主要是因为我们 [害怕另一种选择（译者注：原文 we're terrified of the
alternative）](http://mikegerwitz.com/papers/git-horror-story)。关于如何签名的详细信息可以[在此获取](https://github.com/rapid7/metasploit-framework/wiki/Committer-Keys#signing-howto)。请注意姓名和邮件地址必须完全匹配上签名密钥上的信息。我们鼓励贡献者签名自己的 Commits，因为 Metasploit 的
Committers 在 [合并 Pull Request（译者注：Land Pull
Request）](https://github.com/rapid7/metasploit-framework/wiki/Landing-Pull-Requests) 的时候也需要进行签名。
# 有用的别名
如果不再配置一些有用的让生活变得更美好的别名的话，那么配置开发环境就不能算完成。
## 覆盖已经安装过的 `msfconsole`
作为一个开发者，你可能会一不小心使用到已经安装过的 Metasploit `msfconsole`，由于 RVM 会处理不同的 Ruby 版本和
gemsets 包的原因，可能会出现一些非预期的问题，所以你可以配置一下 Shell 的别名：
    echo 'alias msfconsole="pushd $HOME/git/metasploit-framework && ./msfconsole && popd"' >> ~/.bash_aliases
如果你既想使用开发版的 Metasploit 也想使用安装包，那么使用两个不同的用户可能是一个更好的选择（译者注：感觉这样很麻烦，还不如使用
`./msfconsole` 和 `msfconsole` 来的方便）
## 修改命令提示符使其支持显示 Ruby/Gemset/Branch
下面的脚本可以很容易让你知道你目前所在的位置/环境（译者注：例如 Ruby 版本，Git 仓库的分支等），你可以将如下脚本放在
`~/.bash_aliases`
    function git-current-branch {
        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1) /'
    }
    export PS1="[ruby-\$(~/.rvm/bin/rvm-prompt v p g)]\$(git-current-branch)\n$PS1"
## Git 命令别名
与传统 Shell 别名很相似，Git 自己本身也有别名功能，既可以在 `$HOME/.gitconfig` 中被配置，也可以在 `repo-name/.git/config` 中被配置。  
如下为一些很有用的别名配置：
    [alias]
    # 一个简单，带颜色的单行日志格式化命令，并且会显示当前是否签名的状态。
    nicelog = log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cr) %C(bold blue)%Creset [%G?]'
    # 快捷方式：
    # 在 merge 和 commit 的时候自动签名，并且编辑 commit message
    m = merge -S --no-ff --edit
    c = commit -S --edit
    # 为快速运行 Git Blame 设置快捷方式，并且忽略空白字符的修改
    #（译者注：git blame 命令本身是在开发中出现问题的时候，用来定位某一个文件被谁修改了，这也是为啥叫 blame，当然也可以查看谁修复了 BUG 进行表扬。） 
    b= blame -w
    # 快速创建一个临时分支，因为 Git Stash 命令太吓人了（译者注：估计是大部分人不太会用）
    temp = !"git branch -D temp; git checkout -b temp"
    # 在命令行中打开浏览器并创建一个 Pull Request，其中第一个参数为用户名，第二个参数为分支名。
    # 感谢 @kernelsmith 对命令的修正！
    pr-url =!"xdg-open https://github.com/$(git config github.user)/$(basename $(git rev-parse --show-toplevel))/pull/new/$1:$2...$(git branch-current) #"
以上就是全部内容啦！如果你比较关心 Pull Request 的话，那么你看还需要配置
[Aliases](https://github.com/rapid7/metasploit-framework/wiki/Setting-Up-a-Metasploit-Development-Environment#handy-aliases) 和 PGP key 来 [签名你的
Commits](https://github.com/rapid7/metasploit-framework/wiki/Setting-Up-a-Metasploit-Development-Environment#signing-commits)。  
但是除此之外，你已经准备好啦！
如果您在操作的时候遇到任何错误，遗漏，或者发现了更好的方法，无论如何，请开启一个 [GitHub
Issue](\(https://github.com/rapid7/metasploit-framework/issues))，我们将会看到您的反馈并更新
HOWTO 文档。
特别鸣谢 [@kernelsmith](https://github.com/kernelsmith) 与
[@corelanc0d3r](https://github.com/corelanc0d3r) ，感谢他们对此开发环境文档指南的宝贵帮助和反馈！