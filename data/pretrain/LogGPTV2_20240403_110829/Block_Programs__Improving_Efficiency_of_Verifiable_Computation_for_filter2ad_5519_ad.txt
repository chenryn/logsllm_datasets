ear proofs, he should re-generate the queries for each proof.
If so, the cost of issuing queries will be prohibitive. Our idea
is to reuse (cid:28) and corresponding divisibility query for all lin-
ear proofs. We achieve this by making our protocol work in
a batching style, which implies two levels: (1) same queries
work over many computation instances, namely V veriﬁes
computation in batches; (2) for one computation instance,
V uses the same (cid:28) and corresponding queries for all proofs
in the same layer.
This batching technique was ﬁrstly proposed in [25], where
V generates one single commitment query Enc(r)(the query
to get the commitment information) and one single set of
In the commitment phase, P
PCP queries for (cid:12) proofs.
replies to V with (cid:12) pieces of commitment information Enc(s1),
Enc(s2), ··· , Enc(s(cid:12)), one for each of the (cid:12) proofs. In the de-
commitment phase, V issues the decommitment query based
on the commitment query Enc(r) and the set of PCP queries
and receives (cid:12) answers, one for each of the (cid:12) proofs. V will
perform the decommitment check separately.
It is proved
that this batching technique will not impair the soundness
of the veriﬁcation protocol ([25], Appendix C, Theorem C.1).
This immediately implies the correctness and soundness of
our ﬁrst level “batching”, as that in [24].
For the second level of “batching”, we are targeting to
use one single commitment query and one single set of PCP
queries for all these proofs. Firstly, we notice that the bot-
tom line of batching is that P is not allowed to output the
answer for one proof after he learns whether V accepts or re-
jects another proof (the so-called Veriﬁer Rejection Problem
[15]) Thus, we move all the decommitment tests to the last
step in our protocol, which is performed after all veriﬁcation
is done. Secondly, since our protocol is an interactive proto-
col, the soundness holds only under the restriction that V’s
(cid:28) and his verdict in each layer does not help P deviate from
the protocol and generate proofs in the next layer to cheat
V. Thus, if we use Zaatar [24] to verify one loop iteration,
we need to guarantee that the randomly generated number
for the divisibility test in Zaatar should be diﬀerent from
our (cid:28) .
6. PERFORMANCE EVALUATION
In this section, we analyze the performance of our design
and compare it with existing work. We ﬁrstly compare the
complexity of the algorithms. Then, we compare the “exper-
imental results” of our design with all existing work. How-
ever, we model, rather than measure, their performance. For
our design, we built a model of its performance based on the
latest performance results for [24], while for the others, we
used previously published models [24, 23]. Analysis shows
the eﬃciency of our design.
6.1 Performance Analysis and Comparison
We are targeting at reducing the amortized part of cost
(for the veriﬁer) and the proof generation cost (for the prover).
Now, in the context of loop circuits, we compare the cost of
our protocol with Zaatar and Pinocchio as in Figure 6. We
use the published performance models of Zaatar [24] and
Pinocchio [23]. For Pinocchio, we only list the most burden-
some part in Figure 6; for Zaatar, given that Zaatar’s circuit
411EX
(1)
i
, EX
(1)
: IN
i
  Zu+M;k, where u = 1; 2 (cid:1) (cid:1) (cid:1) Q and k = 1; 2; (cid:1) (cid:1) (cid:1) ; K; OUT
(1)
(1)
(k−1)·Q+u, and OUT
j
Setup
Step 1: V randomly generates (cid:28) 2 F and qH = (1; (cid:28); (cid:28) 2; (cid:1) (cid:1) (cid:1) ; (cid:28) V ), qG = (A1((cid:28) ); A2((cid:28) ) (cid:1) (cid:1) (cid:1) ; AK−1((cid:28) )), qIN = (A2((cid:28) ); A3((cid:28) ) (cid:1) (cid:1) (cid:1) ; AK ((cid:28) ))
Step 2: V generates the commitment query according to the commitment protocol as in Pepper [25], and sends it to P;
Step 3: V generates (cid:27)1; (cid:1) (cid:1) (cid:1) ; (cid:27)K and constructs the BP for the circuit.
Veri(cid:12)cation
Step 4: Both P and V computes IN
(1)
(k−1)·Q+u
Step 5: P computes intermediate results Zw1 ;w2 , linear functions (cid:25)Hj , (cid:25)Gj , (cid:25)INi for all i; j, replies the commitment information for all proofs.
Step 6: V sends P these queries: qH , qG, qIN ,P replies: (cid:25)Hj (qH ), (cid:25)Gj (qG), (cid:25)INi (qIN ) (i; j 2 f1; 2; (cid:1) (cid:1) (cid:1) ; Mg)
Step 7: V checks the linearity of these proofs. If any fails, reject;
Step 8: P sends OUT
Step 9: V updates IN
Step 10: P convinces V that OUT
Step 11: V performs the decommitment check for every proofs. If any fails, V rejects.
Step 12: If the running of our protocol goes here, accept.
j = D((cid:28) ) (cid:1) (cid:25)Hj (qH ) + (cid:25)Gj (qG) + AK ((cid:28) ) (cid:1) OUT
(cid:1) A1((cid:28) ); and updates EX(2)
(1)
(2)
i = (cid:25)INi (qIN ) + IN
1 ; (cid:1) (cid:1) (cid:1) ; IN
i
(2)
; V checks whether OUT
, i = 1; 2; (cid:1) (cid:1) (cid:1) ; M : IN
j =  (2)
(IN
  Zi;1, (i = 1; 2; (cid:1) (cid:1) (cid:1) ; M ) ;
  Zj;K+1, (j = 1; 2; (cid:1) (cid:1) (cid:1) ; M )
, where j = 1; (cid:1) (cid:1) (cid:1) ; M . If not, reject.
  fEXu ((cid:28) ) (u = 1; 2; (cid:1) (cid:1) (cid:1) ; Q).
1 ; (cid:1) (cid:1) (cid:1) ; EX
u by computing: EX(2)
u
(2)
M ; EX
(2)
j
(2)
i
(2)
(2)
(2)
Q )
(2)
j
(1)
j
(1)
j
Figure 5: Our Veri(cid:12)cation Protocol
is formulated into constraints, we view the number of con-
straints in Zaatar as the number of multiplication gates (cir-
cuit size). Then, the number of variables in the constraints
(excluding inputs and outputs) in Zaatar equals the circuit
size minus the number of input/output wires.
Remember that our veriﬁcation design has two layers, the
ﬁrst layer proves that the wire values between repeated sub-
structures are calculated correctly, and then the second layer
proves that the blocks themselves are computed correctly.
At the second layer in our protocol, the result of a single
loop iteration needs to be veriﬁed. We use existing methods
as a building block to perform the veriﬁcation. In Figure 6,
the last terms in the column of our design’s cost model (e.g.,
C Z
na(1); 1
a (K), etc.) represent the cost for the veriﬁca-
tion of one loop iteration in our protocol. In our protocol,
if V adopts Zaatar or Pinocchio as the veriﬁcation block for
one loop iteration, this part of cost will usually be only 1
of the total cost that V pays if V uses Zaatar or Pinocchio
K
to verify the whole loop.
In particular, the second layer
veriﬁcation(veriﬁcation of one loop iteration) also contains
amortized cost, which is linear in the size of the circuit asso-
ciated with the loop body. For simplicity, We choose Zaatar
to show our cost model.
K C Z
Now we show why the amortized cost in our protocol is
much less that its counterparts in all existing protocols: our
design has the following properties: First, it has more ﬂex-
ibility in amortizing. Our protocol has a beneﬁt that the
∗
ﬁrst part of amortized cost, denoted by C
a , can be amor-
tized over instances which have the same loop structure and
the same degree of the polynomial that the circuit of the loop
body computes. (Notice: these instances can have diﬀerent
circuits for the loop body, as long as the circuit the loop bod-
ies compute have the same degree.) This property renders
our protocol superior to existing works, in which costs can
only be amortized to instances that share the same circuit.
Namely, even if our amortized cost is the same as its coun-
terparts, our protocol can be amortized to more instances
than other protocols. Second, it has smaller costs. Even if
the amortized part for verifying the one exection of the loop
†
a, counteracts a part of cost, the total
body, denoted by C
amortized cost in our protocol is still far less than that of
Zaatar in the loop circuit. Notice the total amortized cost
in our protocol is [C
amortized cost which is linear in the size of the whole circuit,
denoted by C Z
loop iterations (executions of the loop body) and D is the
a] ∼ [O(K · D) + O(C)]. Zaatar has
†
a ∼ O(K · C). Recall that K is the number of
∗
a + C
∗
a and C Z
degree of the polynomial that the circuit of the loop body
computes. (The loop body is equivalent to an arithmetic
circuit and the arithmetic circuit computes a polynomial.)
C is the size of the circuit that the loop body is equivalent
to. We can prove that the amortized cost in our protocol is
usually far less than the amortized cost in existing work.
Although C
a seems similar, in general, they are
largely diﬀerent. We know arithmetic circuits are the stan-
dard model for computing polynomials. In other words, an
output of an arithmetic circuit is a polynomial in the in-
put variables. The arithmetic complexity is characterized
by the size of the arithmetic circuit. From the theory of
arithmetic circuit complexity, we know most polynomials
have high arithmetic complexity ([13], Section 4). More
speciﬁcally, a detailed analysis using a counting argument
shows that most polynomials in n variables and degree d re-
√(
)
n+d
quire circuits of size at least Ω(
) ([27], Section 3.1).
Here most means that the number of polynomials that have
small circuits (i.e.
smaller than the lower bound above)
is much smaller than the total number of polynomials. In
most cases, to compute an n-variate polynomial of degree
d
√(
)
d requires a circuit of size at least Ω(
). In our con-
text, n = M + Q and d = D. Then, by this lower bound,
d
n+d
C is at least Ω(
M +Q+D
) which is much more than D,
)
(M +Q+D)
(M +Q)M +Q+ 1
M +Q+D+ 1
2
2 ·DD+ 1
2
by
√(
)
∼ Ω
))
D
(√
(√(
since Ω
M +Q+D
D
Stirling’s approximation. For Given M and Q, this is an
exponential function of D.
Similarly, we improve the prover’s cost of proof generation
from quasilinear in the size of the circuit of the loop body
(like in Zaatar) to quasilinear in the degree of the circuit
of the loop body, with an additional cost for generating the
proof of one loop iteration. This is also a big improvement
according to the analysis above.
6.2 An Example for Performance Comparison
To have a clear picture of these costs and how powerful our
method is in veriﬁcation of real-world iterative computation,
we look at a real loop. We look at an example of successive
matrix multiplication, which is widely used in communica-
tions, signal processing, and control systems. The code to
compute: xA0 ··· AK , where x is a 1 × K vector and Ai,
(i = 0;··· K) are M × M matrices. It is easy to write this
into a “for” loop. Let A be a 1000 × 1000 matrix and the
412Total
V’s
non-
amortized cost
V’s Total amortized
cost
Task Computing
P : Construct proof
vector
P : Issue PCP re-
sponses
Zaatar (Loop ver. )
na(K) = 2Dec + (cid:26) (cid:1) (6M + 3Q (cid:1) K +
CZ
6(cid:26)lin + 4) (cid:1) Mult
a (K) = (2K (cid:1) C) (cid:1) Enc + (cid:26) (cid:1) (cid:26)lin (cid:1) 2 (cid:1)
CZ
(2K (cid:1) C) (cid:1) Rand + (cid:26) (cid:1) [Rand + (Div) (cid:1) K (cid:1)
C] + ((cid:26)lin (cid:1) 3 (cid:1) (2K (cid:1) C) + (3K (cid:1) C +
6K (cid:1) C + K1 + 3K2)) (cid:1) (cid:26) (cid:1) Mult
Comp
p (K) = 3Mult (cid:1) (K (cid:1) C) (cid:1) log2(K (cid:1) C) CP
CZ
i (K) = (Oper + ((cid:26) (cid:1) (6(cid:26)lin + 4) +
CZ
1) (cid:1) Mult) (cid:1) (2K (cid:1) C)
Comp
Map: cost of bilinear map in G (cid:2) G 7! GT
Div: cost of division over F
Rand: cost of pseudorandomly generating an element in F
Dec: cost of decryption over F
Comp: cost of evaluating the whole circuit
Muex: cost of multiplication over exponent
D: degree of the polynomial that the circuit of the loop body
computes
K1: number of additive terms in the constraints of Ginger,
Zaatar’s underlying protocol
K: number of loop iterations
Our Algm
Pinocchio (Loop ver.)
Cna(K) = 3M (cid:1) Dec + (cid:26) (cid:1) (6M + Q (cid:1)
CP
na = 11Map
K + 9M (cid:26)lin) (cid:1) Mult + CZ
a (K) = [10(K(cid:1)C)](cid:1)Exp Ca(K) = (K (cid:1) D) (cid:1) [Enc + 2(cid:26) (cid:1) (cid:26)lin (cid:1)
CP
(Rand + Mult) + 2(cid:26) (cid:1) Mult] + (cid:26) (cid:1) (Div +
3 (cid:1) Mult) (cid:1) K + 1
na(1)
K CZ
a (K)
Comp
p (K) = 8Muex (cid:1) (K (cid:1) C) Cp(K) = 3Mult(cid:1) (K (cid:1) D(cid:0) K)(cid:1) log 2(K (cid:1)
D (cid:0) K) + CZ
Ci(K) = [Oper + ((cid:26)(cid:1) (3(cid:26)lin + 2)(cid:1) M +
1) (cid:1) Mult] (cid:1) (K (cid:1) D) + CZ
p (1)
N/A
i (1)
Exp: cost of exponential operation in G
Mult: cost of multiplication over F
Q: number of the extra input of one loop iteration
Enc: cost of encryption over F
Oper: cost of ciphertext add plus multiply
(cid:26): number of iteration of veriﬁcation for one instance
(cid:26)lin: number of iterations of linearity tests in one itera-
tion of veriﬁcation.
K2: number of distinct additive degree-2 terms in the
constraints of Ginger, Zaatar’s underlying protocol