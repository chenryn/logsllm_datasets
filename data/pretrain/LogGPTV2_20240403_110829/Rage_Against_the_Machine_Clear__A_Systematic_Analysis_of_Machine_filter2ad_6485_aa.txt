title:Rage Against the Machine Clear: A Systematic Analysis of Machine
Clears and Their Implications for Transient Execution Attacks
author:Hany Ragab and
Enrico Barberis and
Herbert Bos and
Cristiano Giuffrida
Rage Against the Machine Clear: A Systematic 
Analysis of Machine Clears and Their Implications 
for Transient Execution Attacks
Hany Ragab, Enrico Barberis, Herbert Bos, and Cristiano Giuffrida, 
Vrije Universiteit Amsterdam
https://www.usenix.org/conference/usenixsecurity21/presentation/ragab
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Rage Against the Machine Clear: A Systematic Analysis of Machine Clears
and Their Implications for Transient Execution Attacks
Hany Ragab∗
PI:EMAIL
Enrico Barberis∗
PI:EMAIL
Herbert Bos
PI:EMAIL
Cristiano Giuffrida
PI:EMAIL
Vrije Universiteit Amsterdam
Amsterdam, The Netherlands
∗Equal contribution joint ﬁrst authors
Abstract
Since the discovery of the Spectre and Meltdown vulnera-
bilities, transient execution attacks have increasingly gained
momentum. However, while the community has investigated
several variants to trigger attacks during transient execution,
much less attention has been devoted to the analysis of the
root causes of transient execution itself. Most attack vari-
ants simply build on well-known root causes, such as branch
misprediction and aborts of Intel TSX—which are no longer
supported on many recent processors.
In this paper, we tackle the problem from a new perspective,
closely examining the different root causes of transient exe-
cution rather than focusing on new attacks based on known
transient windows. Our analysis speciﬁcally focuses on the
class of transient execution based on machine clears (MC),
reverse engineering previously unexplored root causes such
as Floating Point MC, Self-Modifying Code MC, Memory
Ordering MC, and Memory Disambiguation MC. We show
these events not only originate new transient execution win-
dows that widen the horizon for known attacks, but also yield
entirely new attack primitives to inject transient values (Float-
ing Point Value Injection or FPVI) and executing stale code
(Speculative Code Store Bypass or SCSB). We present an
end-to-end FPVI exploit on the latest Mozilla SpiderMonkey
JavaScript engine with all the mitigations enabled, disclosing
arbitrary memory in the browser through attacker-controlled
and transiently-injected ﬂoating-point results. We also pro-
pose mitigations for both attack primitives and evaluate their
performance impact. Finally, as a by-product of our analysis,
we present a new root cause-based classiﬁcation of all known
transient execution paths.
1 Introduction
Since the public disclosure of the Meltdown and Spectre vul-
nerabilities in 2018, researchers have investigated ways to use
transient execution windows for crafting several new attack
variants [6–11, 28, 40, 43, 48, 59, 63, 65, 67, 68, 71, 74–76, 78,
79, 82]. Building mostly on well-known causes of transient
execution, such as branch mispredictions or aborting Intel
TSX transactions, such variants violate many security bound-
aries, allowing attackers to obtain access to unauthorized data,
divert control ﬂow, or inject values in transiently executed
code. Nonetheless, little effort has been made to systemat-
ically investigate the root causes of what Intel refers to as
bad speculation [36]—the conditions that cause the CPU to
discard already issued micro-operations (µOps) and render
them transient. As a result, our understanding of these root
causes, as well as their security implications, is still limited.
In this paper, we systematically examine such causes with a
focus on a major, largely unexplored class of bad speculation.
In particular, Intel [36] identiﬁes two general causes of bad
speculation (and transient execution)—branch misprediction
and machine clears. Upon detecting branch mispredictions,
the CPU needs to squash all the µOps executed in the the
mispredicted branches. Such occurrences, in a wide variety
of forms and manifestations, have been extensively examined
in the existing literature on transient execution attacks [10,11,
31,40,41,43,48]. The same cannot be said for machine clears,
a class of bad speculation that relies on a full ﬂush of the
processor pipeline to restart from the last retired instruction.
In this paper, we therefore focus on the systematic exploration
of machine clears, their behavior, and security implications.
Speciﬁcally, by reverse engineering this undocumented
class of bad speculation, we closely examine four previously
unexplored sources of machine clears (and thus transient exe-
cution), related to ﬂoating points, self-modifying code, mem-
ory ordering, and memory disambiguation. We show attackers
can exploit such causes to originate new transient execution
windows with unique characteristics. For instance, attackers
can exploit Floating Point Machine Clear events to embed
attacks in transient execution windows that require no train-
ing or special (in many cases disabled) features such as Intel
TSX. Besides providing a general framework to run existing
and future attacks in a variety of transient execution windows
with different constraints and leakage rates, our analysis also
uncovered new attack primitives based on machine clears.
USENIX Association
30th USENIX Security Symposium    1451
In particular, we show that Self-Modifying Code Machine
Clear events allow attackers to transiently execute stale code,
while Floating Point Machine Clear events allow them to in-
ject transient values in victim code. We term these primitives
Speculative Code Store Bypass (SCSB) and Floating Point
Value Injection (FPVI), respectively. The former is loosely
related to Speculative Store Bypass (SSB) [55, 82], but al-
lows attackers to transiently reference stale code rather than
data. The latter is loosely related to Load Value Injection
(LVI) [71], but allows attackers to inject transient values by
controlling operands of ﬂoating-point operations rather than
triggering victim page faults or microcode assists. We also
discuss possible gadgets for exploitation in applications such
as JIT engines. For instance, we found that developers follow-
ing instructions detailed in the Intel optimization manual [36]
ad litteram could easily introduce SCSB gadgets in their ap-
plications. In addition, we show that attackers controlling
JIT’ed code can easily inject FPVI gadgets and craft arbitrary
memory reads, even from JavaScript in a modern browser
using NaN-boxing such as Mozilla Firefox [53].
Moreover, since existing mitigations cannot hinder our
primitives, we implement new mitigations to eliminate the
uncovered attack surface. As shown in our evaluation, SCSB
can be efﬁciently mitigated with serializing instructions in the
practical cases of interest such as JavaScript engines. FPVI
can be mitigated using transient execution barriers between
the source of injection and its transmit gadgets, either inserted
by the programmer or by the compiler. We implemented the
general compiler-based mitigation in LLVM [45], measuring
an overhead of 32% / 53% on SPECfp 2006/2017 (geomean).
While not limited to Intel, our analysis does build on a vari-
ety of performance counters available in different generations
of Intel CPUs but not on other architectures. Nevertheless,
we show that our insights into the root causes of bad specu-
lation also generalize to other architectures, by successfully
repeating our transient execution leakage experiments (we
originally designed for Intel) on AMD.
Finally, armed with a deeper understanding of the root
causes of transient execution, we also present a new classi-
ﬁcation for the resulting paths. Existing classiﬁcations [10]
are entirely attack-centric, focusing on classes of Spectre-
or Meltdown-like attacks and blending together (common)
causes of transient execution with their uses (i.e., what at-
tackers can do with them). Such classiﬁcations cannot easily
accommodate the new transient execution paths presented in
this paper. For this reason, we propose a new orthogonal, root
cause-centric classiﬁcation, much closer to the sources of bad
speculation identiﬁed by the chip vendors themselves.
Summarizing, we make the following contributions:
• We systematically explore the root causes of transient
execution and closely examine the major, largely unex-
plored machine clear-based class. To this end, we present
the reverse engineering and security analysis of causes
such as Floating Point Machine Clear (FP MC), Self-
Modifying Code Machine Clear (SMC MC), Memory
Ordering Machine Clear (MO MC), and Memory Dis-
ambiguation Machine Clear (MD MC).
• We present two novel machine clear-based transient exe-
cution attack primitives (FPVI and SCSB) and an end-to-
end FPVI exploit disclosing arbitrary memory in Firefox.
• We propose and evaluate possible mitigations.
• We propose a new root-cause based classiﬁcation of all
the known transient execution paths.
Code, exploit demo, and additional information are avail-
able at https://www.vusec.net/projects/fpvi-scsb.
2 Background
IEEE-754 Denormal Numbers
2.1
Modern processors implement a Floating Point Unit (FPU).
To represent ﬂoating point numbers, the IEEE-754 stan-
dard [1] distinguishes three components (Fig. 1). First, the
most signiﬁcant bit serves as the sign bit s. The next w bits
contain a biased exponent e. For instance, for double precision
64-bit ﬂoating point numbers, e is 11 bits long and the bias
is 211−1 − 1 = 1023 (i.e., 2w−1 − 1). The value e is computed
by adding the real exponent ereal to the bias, which ensures
that e is a positive number even if the real exponent is neg-
ative. The remaining bits are used for the mantissa m. The
combination of these components represents the value. As
an example, suppose the sign bit s = 1, the biased exponent
e = 100000000112 = 102710 so that ereal = 1027−1023 = 4,
and the mantissa m = 0111000...0. In that case,the corre-
sponding decimal value is −1· 24 · (1 + 0.01112). We refer to
such numbers as normal numbers, as they are in the normal-
ized form with an implicit leading 1 present in the mantissa.
Figure 1: Fields of a 64 bits IEEE 754 double
If e = 0 and m (cid:54)= 0, the CPU treats the value as a denormal
value. In this case, the leading 1 becomes a leading 0 instead,
while the exponent becomes the minimal value of 2− 2w−1,
so that, with s = 1, e = 0 and m = 0111000...0, the result-
ing value for a double precision number is −1· 2−1022 · (0 +
0.01112). This additional representation is intended to allow a
gradual underﬂow when values get closer to 0. In 64-bits ﬂoat-
ing point numbers, the smallest unbiased exponent is -1022,
making it impossible to represent a number with an exponent
of -1023 or lower. In contrast, a denormal number can repre-
sent this number by appending enough leading zeroes to the
1452    30th USENIX Security Symposium
USENIX Association
mantissa until the minimal exponent is obtained. The denor-
mal representation trades precision for the ability to represent
a larger set of numbers. Generating such a representation is
called denormalization or gradual underﬂow.
x86 Cache Coherence
2.2
On multicore processors, L1 and L2 caches are usually per
core, while the L3 is shared among all cores. Much complexity
arises due to the cache coherence problem, when the same
memory location is cached by multiple cores. To ensure the
correctness, the memory must behave as a single coherent
source of data, even if data is spread across a cache hierarchy.
Informally, a memory system is coherent if any read of a data
item returns the most recently written value [30]. To obtain
coherence, memory operations that affect shared data must
propagate to other cores’ private caches. This propagation is
the responsibility of the cache coherence protocol, such as
MESIF on Intel processors [37] and MOESI on AMD [3].
Cache controllers implementing these protocols snoop and
exchange coherence requests on the shared bus. For example,
when a core writes in a shared memory location, it signals all
other cores to invalidate their now stale local copy.
The cache coherence policy also maintains the illusion of
a uniﬁed memory model for backward compatibility. The
original Intel 8086, released in 1978, operated in real-address
mode to implement what is essentially a pure Von Neumann
architecture with no separation between data and code. Mod-
ern processors have more sophisticated memory architectures
with separate L1 caches for code (L1d) and data (L1i). The
need for backward compatibility with the simple 8086 mem-
ory model, has led modern CPUs to a split-cache Harvard
architecture whereby the cache coherence protocol ensures
that the (L1) data and instruction caches are always coherent.
2.3 Memory Ordering
A Memory Consistency Model, or Memory Ordering Model,
is a contract between the microarchitecture and the program-
mer regarding the permissible order of memory operations in
parallel programs. Memory consistency is often confused with
memory coherence, but where coherence hides the complex
memory hierarchy in multicore systems, consistency deals
with the order of read/write operations.
Consider the program in Figure 2. In the simplest consis-
tency model, ‘Sequential Consistency’ (SC), all cores see all
operations in the same order as speciﬁed by the program. In
other words, A0 always execute before A1, and B0 always be-
fore B1. Thus, a valid memory order would be A0-B0-A1-B1,
while A1-B1-A0-B0 would be invalid.
Intel and AMD CPUs implement Total-Store-Order (TSO),
which is equivalent to SC, apart from one case: a store fol-
lowed by a load on a different address may be reordered. This
allows cores to use a private store buffer to hide the latency of
Figure 2: Memory Ordering Example
store operations. In the example of Figure 2, the store opera-
tions A0 and B0 write their values initially only in their private
store buffers. The subsequent loads, A1 and B1, will now read
the stale value 0, until the stores are globally visible. Thus,
the order A1-B1-A0-B0 (r1=0, r2=0) is also valid.
2.4 Memory Disambiguation
Loads must normally be executed only after all the preceding
stores to the same memory locations. However, modern pro-
cessors rely on speculative optimizations based on memory
disambiguation to allow loads to be executed before the ad-
dresses of all preceding stores are computed. In particular, if a
load is predicted not to alias a preceding store, the CPU hoists
the load and speculatively executes it before the preceding
store address is known. Otherwise, the load is stalled until the
preceding store is completed. In case of a no-alias (or hoist)
misprediction, the load reads a stale value and the CPU needs
to re-issue it after ﬂushing the pipeline [36, 37].
3 Threat Model
We consider unprivileged attackers who aim to disclose conﬁ-
dential information, such as private keys, passwords, or ran-
domized pointers. We assume an x86-64 based victim ma-
chine running the latest microcode and operating system ver-
sion, with all state-of-the-art mitigations against transient exe-
cution attacks enabled. We also consider a victim system with
no exploitable vulnerabilities apart from the ones described
hereafter. Finally, we assume attackers can run (only) unprivi-
leged code on the victim (e.g., in JavaScript, user processes,
or VMs), but seek to leak data across security boundaries.
4 Machine Clears
The Intel Architectures Optimization Reference Manual [36]
refers to the root cause of discarding issued µOp as Bad Spec-
ulation. Bad speculation consists of two subcategories:
• Branch Mispredict. A misprediction of the direction or
target of a branch by the branch predictor will squash all
µOps executed within a mispeculated branch.
• Machine Clear (or Nuke). A machine clear condition
will ﬂush the entire processor pipeline and restart the
execution from the last retired instruction.
USENIX Association
30th USENIX Security Symposium    1453
Table 1: Machine clear performance counters
Name
Description
Number of machine clears of any type
Number of machine clears caused by a self/cross-modifying code
Number of machine clears caused by a memory disambiguation unit misprediction
MACHINE_CLEARS.COUNT
MACHINE_CLEARS.SMC
MACHINE_CLEARS.DISAMBIGUATION
MACHINE_CLEARS.MEMORY_ORDERING Number of machine clears caused by a memory ordering principle violation
MACHINE_CLEARS.FP_ASSIST
MACHINE_CLEARS.PAGE_FAULT
MACHINE_CLEARS.MASKMOV
Number of machine clears caused by an assisted ﬂoating point operation
Number of machine clears caused by a page fault
Number of machine clears caused by an AVX maskmov on an illegal address with a mask set to 0
Bad speculation not only causes performance degradation
but also security concerns [6–8,31,41,43,47,55,59,63,71,74–
76, 79, 82]. In contrast to branch misprediction, extensively
studied by security researchers [10, 11, 31, 40, 41, 43, 48],
machine clears have undergone little scrutiny. In this paper,
we perform the ﬁrst deep analysis of machine clears and the
corresponding root causes of transient execution.