== 搜索命令函数
[options="header" ]
|=====
|函数|描述|示例
|abs(X)
|此函数获取一个数字X，并返回其绝对值
|以下示例返回absv，该变量的值为数值字段value的绝对值：
... \| eval absv = abs(value)
|exp(X)
|此函数获取一个数字X，并返回e的X次方
|以下示例返回y，该变量的值为e的3次方：
... \| eval y = exp(3)
|ln(X)
|此函数获取一个数字X，并返回X的自然对数（以e为底）
|以下示例返回y，该变量的值为bytes的自然对数：
... \| eval lnBytes = ln(bytes)
|empty(x)
|判断某个field是否为空。也可写作isempty(X)
|empty(field)
如果存在返回false，否则返回true。也可写作isempty(field)
比如：
empty(apache.status)
|case(X, "Y", ...， [default, Z])
|此函数会获取X, Y的参数对，X参数必须为布尔表达式，如果结果为true，则返回响应的Y的值，如果计算结果均为false, 则返回default对应的值，default部分为可选，不指定default，则default的返回为空值
|以下示例返回http状态代码的描述
... \| eval desc = case(error == 200, "OK", error == 500, "Internal Server Error ", default, "Unexpected error")
|ceil(X)
|函数返回X向上取整的整数值
|以下示例返回n = 5
... \| eval n = ceil(4.1)
|cidrmatch(X, Y)
|字段X必须是无分类和子网地址扩展(CIDR)，字段Y为一个IP地址，判断IP地址Y的子网地址是否和X匹配
|示例：
...\| eval matched = cidrmatch("192.168.1.130/25", "192.168.1.129")'
将192.168.1.130转换为二进制并保留高位的25位，低位设为0得到下限（不包括），对应的ip为192.168.1.128
将192.168.1.130转换为二进制保留高位的25位，低位全部设置为1得到上限（不包括），对应的ip地址为192.168.1.255
因此ip的范围是(192.168.1.128, 192.168.1.255)
凡落在此范围的ip地址均match成功，因此matched的值为true
|coalesce(X, ...)
|此函数接受任意数量的并返回第一个不为空值的值，如果所有参数都是空值，则返回空值
|假设有一部分日志，用户名字段放在user_name或者user字段里，以下示例定义名为username的字段，该字段值为user_name和user字段不是空值的那一个：
... \| eval username = coalesce(user_name, user)
|floor(X)
|函数向下取整为最接近的整数
|以下示例返回 n = 4
... \| eval n = floor(4.1)
|format(FORMAT, [X...])
|格式化字符串, 提供类似printf的功能
FORMAT，为printf函数的format字符串
|示例：
format("%.1fMB", rate)输出速率，rate保留小数点后一位
format("%s => %s", "aa", "bb")输入"aa => bb"
NOTE: 变量类型和format中%x需要对应正确，否则可能导致计算失败，而输出空值
|formatdate(X[, Y])
|该函数对X对应UTC时间值格式化为Y具体的时间格式
Y的时间格式字符串遵循java.text.SimpleDateFormat支持的格式，如果不指定Y，则默认的时间格式为"yyyy-MM-dd HH:mm:ss.SSS"，暂不支持时区的自定义
|以下示例将返回timestamp所表示的时间的小时和分钟
... \| eval v = formatdate(timestamp, "HH:mm")
|datetime_diff(X, Y[, Z])
|该函数接受两个时间戳，返回两个时间戳之间的时间差，单位为毫秒。可以指定返回的时间单位，d=天,h=小时,m=分钟,s=秒,默认为ms
|以下示例将返回1655870082000-1655870081000的时间差，单位为毫秒
... \| eval v = datetime_diff(1655870081000, 1655870082000)
|if(X, Y, Z)
|函数接受3个参数，第一个X为布尔表达式，如果X的计算结果为true，则结果为第二个参数Y的值，否则返回第三个参数Z值
|以下示例将检查status的值，如果status==200，则返回”OK”，否则返回Error
... \| eval desc = if (status == 200, "OK", "Error")
|in(field, X, ...)
|给定一个字段和若干指定值，判断字段中的值是否在指定值中存在。存在返回true，不存在返回false
|示例：... \| eval field = 'appname' \| where in(field, 'appname', 'hostname')
|isnum(X)
|判断字段X是否为数值类型，对于整数类型或者浮点型结果都会返回true，其它返回false
|示例：
... \| eval a = isnum(apache.status)
|isstr(X)
|判断字段X是否为字符串类型
|示例:
...\| eval a = isstr(apache.method)
|len(X)
|函数接收一个字符串类型的参数，返回字符串的长度
|如果method的字段值为GET，以下示例n的值为3
... \| eval n = len(method)
|log(X [,Y])
|此函数接受一个或两个数值类型的值，返回以Y为底X的对数，Y默认为10
|以下示例将返回以2为底，number的对数
... \| eval num=log(number,2)
|pi()
|此函数返回pi的值
|以下示例将返回圆的面积
... \| eval area_circle=pi()*pow(radius,2)
|pow(X, Y)
|此函数接受两个数值类型的参数，返回X的Y次方
|假设number的值为2，以下示例将返回8
... \| eval n=pow(number,3)
|sqrt(X)
|此函数接受一个数值类型的参数，返回X的平方根
|假设number的值为4，以下示例将返回2
... \| eval n=sqrt(number)
|acos(X)
|此函数接受一个范围在(-1,1)之间的数值类型的参数，返回以弧度表示的X的反余弦值
|以下示例返回0的反余弦值
... \| eval result = acos(0)
|acosh(X)
|此函数接受一个大于等于1的数值类型的参数，返回以弧度表示的X的反双曲余弦值
|以下示例返回1的反双曲余弦值
... \| eval result = acosh(1)
|asin(X)
|此函数接受一个范围在[-1,1]之间的数值类型的参数，返回以弧度表示的X的反正弦值
|以下示例返回0的反正弦值
... \| eval result = asin(0)
|asinh(X)
|此函数接受一个数值类型的参数，返回以弧度表示的X的反双曲正弦值
|以下示例返回5的反双曲正弦值
... \| eval result = asinh(5)
|atan(X)
|此函数接受一个范围在 [-pi/2,+pi/2] 之间的数值类型的参数，返回以弧度表示的X的反正切值
|以下示例返回0.5的反正切值
... \| eval result = atan(0.5)
|atan2(Y, X)
|此函数接受两个数值类型的参数，返回以弧度表示的 Y/X 的反正切值，X的取值范围在 [-pi,+pi]之间
|以下示例返回0.5，0.75的反正切值
... \| eval result = atan2(0.5, 0.75)
|atanh(X)
|此函数接受一个范围为(-1,1)之间的数值类型的参数，返回以弧度表示的X的反双曲正切值
|以下示例返回0.5的反双曲正切值
... \| eval result = atanh(0.5)
|cos(X)
|此函数接受一个数值类型的参数，返回以弧度表示的X的余弦值
|以下示例返回0的余弦值
... \| eval result = cos(0)
|cosh(X)
|此函数接受一个数值类型的参数，返回以弧度表示的X的双曲余弦值
|以下示例返回0的双曲余弦值
... \| eval result = cosh(0)
|hypot(X, Y)
|此函数接受两个数值类型的参数，返回欧几里得范数，即sqrt(X^2 + Y^2)
|以下示例返回2，2的欧几里得范数
... \| eval result = hypot(2,2)
|sin(X)
|此函数接受一个数值类型的参数，返回以弧度表示的X的正弦值
|以下示例返回0的正弦值
... \| eval result = sin(0)
|sinh(X)
|此函数接受一个数值类型的参数，返回以弧度表示的X的双曲正弦值
|以下示例返回0的双曲正弦值
... \| eval result = sinh(0)
|tan(X)
|此函数接受一个数值类型的参数，返回以弧度表示的X的正切值
|以下示例返回0的正切值
... \| eval result = tan(0)
|tanh(X)
|此函数接受一个数值类型的参数，返回以弧度表示的X的双曲正切值
|以下示例返回0的双曲正切值
... \| eval result = tanh(0)
|entropy(field)
|此函数计算指定字段的熵值
|以下示例返回json.name的熵值
... \| eval e = entropy(json.name)
|lower(X)
|此函数接受一个字符串类型的参数，返回其小写形式
|假设method的值为GET，以下示例将返回”get”
... \| eval lowerstr = lower(method)
|match(X, Y)
|此函数将使用正则表达式Y对X进行匹配，返回是否匹配成功
|当且仅当字段于IP地址的基本形式匹配时，则返回true，否则返回false，这里使用了^和$表示执行完全匹配
... \| eval matched = match(ip, "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$")
|contains(X,Y)
|此函数会判断字符串X的值与字符串Y进行匹配，返回是否匹配成功,Y可以是多值字符串，Y是多值的情况下，包含Y中的任意一个则返回true，否则返回false
|以下实例将返回 true ...\|eval a = split("a,b,c,e",",")\|eval b = "Hello,world!" \|eval c = contains(b,a)
|max(X,...)
|此函数接受至少一个数值类型的参数，返回值较大的那个值
|以下示例将返回101
... \| eval maxv = max(101, 100.0)
|min(X,...)
|此函数接受至少一个数值类型的参数，返回较小的那个值
|以下示例将返回 100.0
... \| eval minv = min(101, 100.0)
|=====