title:AppIntent: analyzing sensitive data transmission in android for privacy
leakage detection
author:Zhemin Yang and
Min Yang and
Yuan Zhang and
Guofei Gu and
Peng Ning and
Xiaoyang Sean Wang
AppIntent: Analyzing Sensitive Data Transmission in Android for
Privacy Leakage Detection
Zhemin Yang
Fudan University
PI:EMAIL
Guofei Gu
Texas A&M University
PI:EMAIL
Min Yang
Fudan University
PI:EMAIL
Yuan Zhang
Fudan University
PI:EMAIL
Peng Ning
NC State University
PI:EMAIL
X. Sean Wang
Fudan University
PI:EMAIL
Abstract
Android phones often carry personal information, attracting
malicious developers to embed code in Android applications
to steal sensitive data. With known techniques in the lit-
erature, one may easily determine if sensitive data is being
transmitted out of an Android phone. However, transmis-
sion of sensitive data in itself does not necessarily indicate
privacy leakage; a better indicator may be whether the trans-
mission is by user intention or not. When transmission is
not intended by the user, it is more likely a privacy leak-
age. The problem is how to determine if transmission is
user intended. As a (cid:12)rst solution in this space, we present
a new analysis framework called AppIntent. For each data
transmission, AppIntent can eﬃciently provide a sequence of
GUI manipulations corresponding to the sequence of events
that lead to the data transmission, thus helping an analyst
to determine if the data transmission is user intended or
not. The basic idea is to use symbolic execution to gener-
ate the aforementioned event sequence, but straightforward
symbolic execution proves to be too time-consuming to be
practical. A major innovation in AppIntent is to leverage
the unique Android execution model to reduce the search
space without sacri(cid:12)cing code coverage. We also present an
evaluation of AppIntent with a set of 750 malicious apps, as
well as 1,000 top free apps from Google Play. The results
show that AppIntent can eﬀectively help separate the apps
that truly leak user privacy from those that do not.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection; D.2.5
[Software Engineering]: Testing and Debugging|Sym-
bolic execution
Keywords
Android security; privacy leakage detection; symbolic exe-
cution
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516676 .
1.
INTRODUCTION
With the growing popularity of Android, millions of ap-
plications (or apps for short) are available to users from a
variety of Internet sites (called app markets). While users
enjoy the rich features of the apps, their sensitive personal
data, such as phone numbers, current locations, and con-
tact information, may be stealthily collected and misused
by the ill-intended developers of some apps. A recent study
has showed that Android apps frequently transmit private
data to unknown destinations without user consent [46]. To
protect users, there is a great need for strong analysis tools
that Android app markets can use to identify and remove
malicious apps.
State-of-the-art approaches of privacy leakage detection
on smartphones focus on detecting sensitive data transmis-
sion, i.e., whether personal data leaves the device [21, 22, 26,
30, 40, 29]. However, in this era of mobile apps with cloud
computing, what constitutes a privacy leakage by mobile
apps is a subject that needs reconsideration. Many benign
apps provide services from the cloud to end users. These
apps normally need to collect sensitive data such as loca-
tion, contact, to send out to the cloud. Malicious apps that
steal user data may also exhibit the same behavior, namely
transmitting private information to the cloud (or via other
means). Therefore, transmission of sensitive data by itself
may not indicate true privacy leakage; a better indicator
should be whether the transmission is user intended or not.
(cid:15) User-intended data transmission. To use the func-
tion provided by an app, a user often tolerates his/her
private data being sent out via some communication
channels. For example, when using SMS management
apps [3], a user can forward an SMS message to a third
party, by several button clicking on the touchscreen.
As another example, when using a location-based ser-
vice [7], a user usually knows his/her location is sent
out to get interesting contents tailored to the location.
Since this kind of functional use of sensitive data is
consistent with user intention, we should not treat this
kind of transmission as a privacy leakage.
(cid:15) Unintended data transmission. The irregular transmis-
sion of sensitive data performed by an app, which is
unknown to users and irrelevant to the function user
enjoys, is de(cid:12)ned as unintended data transmission, or
privacy leakage. In most cases, users are unaware of
this kind of transmission because the malicious apps
always do that in a stealthy manner.
The above shows that whether sensitive data transmission
is a privacy leakage or not actually depends on whether the
transmission is user intended or not. Unfortunately, due to
the complex nature of user intention and diﬀerent/unpredictable
settings of diﬀerent apps, it is almost impossible to have an
automated method to determine user intentions. Alterna-
tively, it is more practical to design an automated tool to
provide a human analyst with the context information in
which the data transmission occurs.
Intuitively presented
context information will make the task of the human an-
alyst easier in determining if the transmission is user in-
tended. This motivates our work on the AppIntent frame-
work. Given sensitive data transmission, AppIntent derives
the input data and user interaction inputs that lead to the
transmission. The context information of the transmission
shown to the analyst is in the form of a sequence of UI
manipulations (i.e., GUI screens along with the highlighted
GUI controls that indicate the supposed user operations)
that is captured from a controlled execution of the app with
the derived input data and user interaction. By looking at
the displayed UI manipulations, a human analyst can then
make a judgement.
Symbolic execution is an eﬀective technique to extract fea-
sible inputs that can trigger speci(cid:12)c behaviors of a program
such as particular transmission of sensitive data. The key
idea of symbolic execution is to systematically explore fea-
sible paths of the program under analysis by reducing the
search space from an in(cid:12)nite number of possible data inputs
to a (cid:12)nite number of data scopes (represented by symbolic
inputs). However, existing symbolic execution techniques
mainly focus on non-interactive programs [10, 16, 28, 39].
Dealing with events triggered by user actions in GUI apps is
challenging because the possibly large number of combina-
tions of input events can severely worsen the path explosion
problem during symbolic execution. However, in AppIntent,
user interactions cannot be abstracted away from apps for
symbolic execution because user interaction is an essential
part to judge whether the transmission is intended by the
user or not.
To deal with the path explosion problem, we have devel-
oped a new symbolic execution technique called event-space
constraint guided symbolic execution for Android apps. We
(cid:12)rst apply static analysis to the target app to identify the
possible execution paths leading to the sensitive data trans-
mission under analysis (such as sending SMS). We then use
these paths as the basis to generate our event-space con-
straints, which represent all the possible event sequences for
the given execution paths by considering the call graph and
the Android execution model. Our guided symbolic execu-
tion then considers only the paths that satisfy the event-
space constraints. Our experiments show that these con-
straints restrict the search space very eﬀectively since the
number of execution paths to be explored during the guided
symbolic execution is usually small.
To evaluate the eﬀectiveness of AppIntent, we perform an
extensive experimental evaluation using real-world apps in-
cluding 750 malicious apps reported in [46] and 1,000 top
free apps from Google Play, to detect whether they trans-
mit user’s private data and to distinguish whether the trans-
mission is user intended or not. In our experimental results,
252 apps have sensitive data transmission, among which 224
apps contain user unintended transmission while other 28
apps contain only user-intended data transmission.
The contribution of this paper is fourfold. First, we note
that sensitive data transmission does not always indicate pri-
vacy leakage; rather, user-intended data transmission should
be discriminated from user-unintended. Second, we develop
an event-space constraint guided symbolic execution tech-
nique, which eﬀectively reduces the event search space in
symbolic execution for Android apps. As a result, event in-
puts as well as data inputs related to each propagation path
of data transmission can be eﬀectively extracted. Third, we
develop a dynamic program analysis platform to execute the
app driven by the discovered event and data inputs, so that
we can display the sequence of UI manipulations, emulating
the entire process leading to the data transmission. Finally,
we evaluate our approach by using 750 reported malicious
apps, as well as 1,000 top free apps from Google Play. Some
interesting (cid:12)ndings are also provided together with the eval-
uation results.
The rest of this paper is organized as follows. Section 2
introduces the challenge of symbolic execution for Android,
and Section 3 gives an overview of the AppIntent frame-
work. Section 4 presents the details of event-space constraint
guided symbolic execution. The dynamic analysis platform
of AppIntent is depicted in Section 5. Section 6 presents
the evaluation of AppIntent using real-world Android apps.
Section 7 discusses the related work, and Section 8 concludes
this paper and points out some future research directions.
2. BACKGROUND: SYMBOLIC EXECUTION
FOR ANDROID APPS
Symbolic execution is a program analysis technique that
has been used in a wide range of applications such as test
case generation [14, 17, 27, 28, 34, 39], fuzz testing [35], and
security (cid:13)aws detection [13, 15, 20, 26, 31, 42]. It is a traver-
sal process, which explores a search space during the analysis
process. The general idea of symbolic execution is to limit
the search space because its execution time and practica-
bility depend on this scope. For those non-interactive pro-
grams, symbolic execution can eﬃciently explore the search
space of data inputs through a well-de(cid:12)ned classi(cid:12)cation of
these inputs. However, symbolic execution faces unresolved
challenges when it is applied to GUI apps.
GUI apps, which are widely used in computers and hand-
held devices, are driven by not only data inputs, but also
event inputs. Users can interact with apps by triggering
runtime events such as clicking a certain button. Event in-
puts, which introduce highly variable program behaviors and
hard to be classi(cid:12)ed into input scopes, greatly increase the
search space of GUI apps. To the best of our knowledge,
there are no eﬃcient solutions to this problem, and most
of the existing symbolic execution approaches for GUI apps
sacri(cid:12)ce code coverage for performance by applying random
scheduling strategy [38], exhaustively searching possibilities
(to an upper bound of event sequences) [25], or assuming
that event handlers will not cooperate with each other [24].
Recently, Contest [9] reduces the symbolic execution time of
smartphone apps to 5%-36% of the original running time by
utilizing pro(cid:12)ling results, but the cost of this analysis is still
too high.
When modeling the space of runtime event inputs, the
most important characteristic of the space is the possible
orders of events. In most cases, the behavior of a GUI app
can be represented by the events triggered by the user along
with the order of these events.
2.1 Android Basis
Similar to Java GUI apps, Android apps are usually driven
by runtime events and callbacks. The non-determinism in-
troduced by arbitrarily and distinctively triggered events in-
creases the complexity when exploring the search space and
severely challenges the symbolic execution of GUI apps. The
search space of events is decided by Android programming
and execution model, which needs a careful consideration in
analysis.
Figure 1: Android application model. This (cid:12)gure depicts
the lifecycle of Android activities. The lifecycle of other
components are similar.
There are two major kinds of events in Android: callbacks
to manipulate the state transition of an app, and listeners to
handle system events and user interactions with GUI com-
ponents:
Android Events: Callbacks of Lifecycle States. Un-
like in the common Java world, Android app does not have
a unique program entry such as main(). Instead, it is com-
posed of one or more components which work together to
ful(cid:12)ll the functionality. The major type of components in
Android is activity. An activity represents a single screen
with a user interface. The other components, e.g., services,
content providers, and BroadcastReceivers, are background
tasks that perform long-running operations or respond to
other threads. For each component, app developers override
callback functions, which are commonly used to maintain
its lifecycle, as depicted in Figure 1. These callbacks are ex-
pected to be automatically invoked by Android application
manager. Therefore, symbolic execution faces a severe chal-
lenge because of the non-deterministic and unbounded trig-
gering order of callbacks. For example, a possible execution
could be (OnStart ) OnPause ) OnResume ) OnPause
) OnResume )...). It will further worsen the already noto-
rious search space explosion problem of traditional symbolic
execution. Actually, symbolic execution may never (cid:12)nish
because the search space is in(cid:12)nite. We propose a guided
symbolic execution mechanism which can eﬀectively solve
this problem with static analysis.
Android Events: GUI Events and System Events.
An app running on Android is commonly GUI based, and
its execution is typically driven by events from the speci(cid:12)c
GUI controls (represented as a View object) that the user
interacts with. An app contains a collection of nested in-
terfaces, called event listeners. These listeners capture user
interactions with the app GUI. When respective interactions
occurs on the GUI controls, for example, if a button is clicked
by a user, the pre-de(cid:12)ned event handlers are triggered cor-
respondingly. System events are handled in the same way.
Like callbacks, runtime events are also non-deterministic.
They can be triggered in any order and at any time, thus
exhaustively executing all possible sequences of events is a
task that will never end. Fortunately, events in an Android
app are commonly invoked when the state of the app is
RUNNING. In this state, the main thread is hung to wait
for incoming events. Thus, the event triggering behavior
commonly depends on the order, not the exact triggering
time.
3. GOAL AND OVERALL ARCHITECTURE
AppIntent is not an automated method to detect unin-
tended data transmission, which is probably a mission im-
possible. Instead, as a (cid:12)rst step in this space, AppIntent is
designed to be an automated tool to present to a human an-
alyst the sequence of UI manipulations that corresponds to
the sequence of events that leads to the sensitive data trans-
mission, thereby facilitating the discrimination of whether
sensitive data transmission is user intended or not.
three goals:
Our Goal. To achieve our vision, we have the following
(cid:15) Produce the critical app inputs that lead to sensitive
data transmission. Speci(cid:12)c to Android GUI apps, in-
puts are always composed of: a) Data inputs which
contain text inputs from outside; b) Event inputs from
user interactions through GUI interface and from sys-
tem through IPC. In addition, we need to track down
the root-cause that gives rise to the transmission and
(cid:12)lter out the massive set of irrelevant inputs.
(cid:15) Guarantee a good code coverage. To (cid:12)nd all feasible
paths, we need to thoroughly traverse diverse program
paths that may lead to a leakage, and at the same
time, we want to ensure low false positive as well as low
false negative rate during this analysis. In addition, to
enable large-scale validation tasks, we do not want too