entry is created (line 3) and added to the docdst. Since the algorithm for
creating a new attribute is very similar the one for creating a new element,
we refrain from presenting it.
Algorithm 3: Create Element
Input : docdst, elemdst, subj, role, timecurr
Output:
elemnew ← create new element at elemdst in docdst
create element history for elemnew
create hist entry(“Create elem.”, subj, role, timecurr)
1
2
3
The DP performs Algorithm 4 to add new text to the element elemdst of
the document docdst at the position posinsert. First, Algorithm 5 is invoked
to split elemdst at posinsert. After that, a new text block is created to which
the new content is added (line 2). In line 3, the corresponding history entry
is created.
Algorithm 4: Create Text Content
Input : docdst, elemdst, subj, role, timecurr, content, posinsert
Output:
split block(docdst, elemdst, posinsert)
blockdst ← create block(docdst, elemdst, posinsert, content)
create hist entry(“Create text”, blockdst, subj, role, timecurr)
1
2
3
Algorithm 5 performs the splitting of text blocks, which is needed when
text is created, transferred or deleted.
If the position possplit at which the new text blockold should be added is
not within an existing text block, then the algorithm returns immediately.
In the other case, the existing text block blockold has to be split at possplit.
Therefore, we remove the content after possplit from blockold (line 5). This
removed content is added to the new text block blocknew which is positioned
after blockold (lines 6 and 7). Next, blocknew gets a copy of the history
of blockold (lines 9 and 10). If the split block was in a is-copy-of relation
with other blocks, the eﬀect of the splitting has to be captured. For this
purpose, the DP copies all edges which either point to blockold (line 11) or
originate from it (line 13) and modiﬁes them to point (line 12) or originate
from blocknew (line 14). The DP stores these edges in its internal memory
until the document is checked-in.
72
CHAPTER 5. SYSTEM ARCHITECTURE
Algorithm 5: Split Text Block
Input : docdst, elemdst, possplit
Output:
if possplit does not point within a block then
return
blockold ← text block where (docdst, elemdst, possplit) point into
content ← text content of blockold from possplit to end
delete text content of blockold from possplit to end
posnew ← end of blockold
blocknew ← create block(docdst, elemdst, posnew, content)
get subj, role, time from history entry of blockold
entries ← copy of history entries for blockold
modify entries to reference blocknew
edgesto ← copy of edges of Copy DB that point to blockold
modify all edges in edgesto to point to blocknew
edgesfrom ← copy of edges of Copy DB that originate from blockold
modify all edges in edgesfrom to originate from blocknew
add edgesto, edgesfrom to global set of temp. edges
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Copy
The copy operation can be used to copy elements or text. The ﬁrst task is
carried out by Algorithm 6. We ﬁrst create a new element at the destination
document docdest by applying Algorithm 3 (line 1). After that, the DP cap-
tures this transfer by adding a corresponding edge into its internal memory
(lines 2 and 3). The transferred element elemdst gets all attributes including
their values of its source element elemsrc (lines 4 to 6).
Algorithm 7 performs the copying of text. Since this operation has to be
captured, the DP splits both the text blocks at the source document (lines 1
and 2) and the text blocks at the destination document (line 3). In line 6, we
create a new block (blockdst) at the destination document (docdest) for each
of the transferred blocks (blocksrc). We create and store the corresponding
edge reﬂecting the transfer of blockdst. The new block gets its ﬁrst history
entry describing its creation context in line 9.
Change Attribute and Delete
Changing an attribute value is also logged with an entry in the history. The
corresponding algorithm is similar to Algorithm 3. The delete operation can
be applied to elements, attributes and text. Since the required algorithms
5.2. WORKFLOW
73
Algorithm 6: Copy Element
Input : docsrc, elemsrc, docdst, elemdst, subj, role, timecurr
Output:
create element(docdst, elemdst, subj, role, timecurr)
edgenew ← create edge(docsrc, elemsrc, docdst, elemdst)
add edgenew to global set of temp. edges
for each attri of elemsrc do
create attribute(docdst, elemdst, subj, role, timecurr, name of
attri)
change attribute(docdst, elemdst, subj, role, timecurr, name of
attri, value of attri)
1
2
3
4
5
6
Algorithm 7: Copy Text Content
Input : docsrc, elemsrc, textstart, textend, docdst, elemdst, posinsert,
subj, role, timecurr
Output:
split block(docsrc, elemsrc, textstart)
split block(docsrc, elemsrc, textend)
split block(docdst, elemdst, posinsert)
for each blocksrc within textstart and textend of elemsrc do
content ← text content of blocksrc
blockdst ← create block(docdst, elemdst, posinsert, content)
edgenew ← create edge(docsrc, elemsrc, blocksrc, docdst, elemdst,
blockdst)
add edgenew to global set of temp. edges
create hist entry(“Create text”, docdst, elemdst, blockdst, subj,
role, timecurr)
posinsert ← end of blockdst
1
2
3
4
5
6
7
8
9
10
74
CHAPTER 5. SYSTEM ARCHITECTURE
are similar, we explain only one of them. Algorithm 8 is used to delete text.
Since start or end of the text to be deleted can point into a block, the aﬀected
blocks have to be split (lines 1 and 2) to keep track of the deleted parts. Each
deleted text block gets a ﬁnal history entry to indicate its deletion (line 4).
Finally, the text block is deleted (line 5).
Algorithm 8: Delete Text Content
Input : docsrc, elemsrc, textstart, textend, docdst, elemdst, subj, role,
timecurr
Output:
split block(docsrc, elemsrc, textstart)
split block(docsrc, elemsrc, textend)
for each blocksrc within textstart and textend of elemsrc do
create hist entry(“Delete text”, docdst, elemdst, blockdst, subj,
role, timecurr)
delete text block(docdst, elemdst, blockdst)
1
2
3
4
5
5.2.3 Check-in
A user can activate the check-in command of the UI to save his changes to an
opened document doca, which are currently stored only within the DP, to the
Doc DB. As a result of this, the checked-in version of the document becomes
relevant for the access decisions of other documents, which also includes
concurrently opened versions of doca. For both kinds of aﬀected documents
the permissions must be recalculated, which possibly revokes permissions of
currently edited documents. The concurrent editing of a document can also
lead to conﬂicts, where the editing of one user to doca is incompatible to
the editing of another user, who also has edited doca. For this reasons, we
have to perform two steps when a document is checked-in. In step one, we
have to resolve conﬂicts between the concurrent versions of a document. In
step two, we must update the permissions of other aﬀected documents whose
permissions depend on the saved document.
To perform step one, we ﬁrst retrieve the list of concurrently edited ver-
sions of doca, which is maintained by the Doc DB for each opened document.
Next, we must merge all concurrently edited versions of doca to one consis-
tent version. We must do this before we can evaluate the permissions for the
document, because the permissions of an edited document can also depend
on the content of the document itself. We apply a conﬂict resolution strat-
egy to solve conﬂicts between concurrently edited documents. It depends on
5.3. DISTRIBUTED SYSTEM ARCHITECTURE
75
the scenario to deﬁne a speciﬁc strategy. One possible strategy is to resolve
conﬂicts manually. An automatic strategy can accept or reject changes de-
pending on the role of the subject that performed the changes or depending
on the time the changes were performed, since this information is available
in the corresponding history. After the conﬂicts are solved, the temporarily
stored edges, which correspond to the accepted operations, are saved to the
Copy DB.
To perform step two, we ﬁrst inspect the Copy DB to retrieve the opened
documents that might depend on doca. These documents have at least one
node, that is in is-copy-of relation with a node of doca. Then, we recalculate
the permissions of these documents for their current users. In some cases,
permissions of nodes that were edited in this moment are revoked. In these
cases, the UI asks the user whether he wants to reject the current changes
or keep them and accept being unable to make further changes.
5.3 Distributed System Architecture
So far, we have made no assumptions how the components of our system,
which we have described in Section 5.1, are distributed across several physical
machines. Since our system should be able to be used by a large number
of users this assumption is not acceptable, since we must give a speciﬁc
design how components are distributed to actually make the system usable.
Moreover, we must deﬁne which components are executed on the machine
of the user. We refer to this machine as the client machine or short as the
client. As a consequence, we need to design a distributed system [CDK01]
for the architecture that we have presented so far. In a distributed system,
the components of the system are executed on physically diﬀerent machines
and communicate over a network with each other.
We will specify a distributed system architecture for three reasons. First,
we want to illustrate that our model can be applied as a distributed system.
Second, we will specify security mechanisms for our system architecture,
which depend on the speciﬁc design of the system architecture as a dis-
tributed system, e.g., these mechanisms depend on whether components are
implemented on a server or on a client and on whether components commu-
nicate with each other over a communication network or directly. Therefore,
we need the design of our model as a distributed system as input for the
speciﬁcation of the security mechanisms. Third, we ﬁnally will implement
our model as a distributed system, which requires the speciﬁcation of the
model as a distributed system as well. We will use the implementation for a
performance evaluation.
76
CHAPTER 5. SYSTEM ARCHITECTURE
We believe that our model can be implemented as a distributed system
in many diﬀerent ways and with diﬀerent properties, e.g., diﬀerent levels
of security, complexity and eﬃciency. The way of implementing the model
depends on the requirements of the scenario. In the following, we will inves-
tigate a possible approach to implement our model as a distributed system
for scenarios with high requirements on security, e.g., a business scenario.
In the following sections, we will ﬁrst decide which overall approach we
will choose and then will we show diﬀerent alternatives within that approach.
We will argue which of these alternatives is best suited for the type of sce-
narios we described above.
5.3.1 Overall Approach
There are several diﬀerent approaches to design a distributed system, such
as the service oriented approach, the distributed shared memory approach,
the computing grid or cluster approach, the peer-to-peer approach [Wal03,
ATS04] and the client-server approach. The latter approach is also referred
to as the classical approach for designing a distributed system. We need
to choose one of these approaches for our distributed system architecture.
We will focus on the peer-to-peer approach and the client-server approach,
because we believe these approaches are best suited for our system. To decide
which of these two approaches we will use, we ﬁrst describe these approaches
and their properties in terms of security, eﬃciency and availability.
Client-Server Approach
In the client-server approach, there are two diﬀerent types of machines,
namely clients and servers.
Servers are dedicated machines that perform services for the clients.
These services either store data, e.g., a database, or perform computations,
e.g., the evaluation of access control rules. Servers are dedicated machines on
which no user is working. As a consequence, they can be placed in a secured
area, e.g., a server room. Therefore servers are not physically exposed to
the users of the system. Being less exposed makes servers a better choice for
critical data or critical services.
The second type of machine is the client client machine, which is the
type of machine on which users are working. The data, which is sent to
a client or stored on a client, has a much higher risk of being accessed in
an unauthorized way, e.g., being manipulated, since the user of a client has
more options to manipulate his machine compared to manipulating a remote
server in a server room.
5.3. DISTRIBUTED SYSTEM ARCHITECTURE
77
In addition to this, as servers can be used for only one dedicated purpose,
their set of software can be much smaller compared to the set of software for
a client, which usually must run a lot of diﬀerent programs. A smaller set
of software helps to make a system less prone to errors and less vulnerable
to intentional attacks. Due to their smaller set of software and to being less
exposed to the users of the system, servers oﬀer a higher level of security for
the software that is executed on them compared to software running on a
client machine.
Nevertheless there are also drawbacks of using servers. If a service is im-
plemented on a single physical server machine, the risk of loosing the systems
functionality is high. The crashing of this single server machine can render
the complete system useless, if the services executes a function which is essen-
tial for the system. To increase the availability of the system, such services
can be replicated over diﬀerent physical servers. As a result, a service is exe-
cuted on more than one physical server in a redundant way. The replication
helps to increase the availability of the system, since in case that one server
crashes there is a backup server for the functionality of the crashed server.
Moreover, the replication of one service across multiple servers increases the
maximum number of users the system can handle, since the total load of the
service can be distributed to several physical machines.
Peer-to-Peer Approach
In the peer-to-peer approach, each client also acts as the server for other
clients. These types of machines are referred to as peers. Some functionality,
e.g., data storage or computation, is performed by peers instead of using a
dedicated servers as described above. These peers have several drawbacks.