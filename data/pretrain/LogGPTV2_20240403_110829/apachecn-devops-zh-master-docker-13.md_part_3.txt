```
$ docker-compose pull
$ docker-compose up -d 
```
这将创建网络和卷，并从 Docker Hub 中提取映像。然后，它将着手推出四项服务:
![](img/9f337042-8244-4838-bff2-40c8d518ba0c.png)
你可能会想立即去你的格拉夫纳仪表板。如果您这样做了，您将看不到任何东西，因为 Grafana 需要几分钟来初始化自己。您可以通过跟踪日志来跟踪其进度:
```
$ docker-compose logs -f grafana
```
该命令的输出如下所示:
![](img/385e8580-5b68-48c3-b69e-abd387fb61b6.png)
一旦您看到`HTTP Server Listen`信息，Grafana 将可用。借助 Grafana 5，您现在可以导入数据源和仪表板，这就是我们将`./grafana/provisioning/`安装到`/etc/grafana/provisioning/`的原因。该文件夹包含自动配置格拉夫纳与我们的普罗米修斯服务对话的配置，并且还导入仪表板，该仪表板将显示普罗米修斯从 cadvisor 中抓取的数据。
打开浏览器进入`http://localhost:3000/`，应该会出现登录画面:
![](img/649978eb-8e40-4a14-9f29-58f31272ae83.png)
输入**用户**为`admin`，输入**密码**为`password`。登录后，如果您已经配置了数据源，您应该会看到以下页面:
![](img/ddac6a6f-0e09-439a-a2cb-9cf553af9050.png)
如您所见，安装 Grafana |创建您的第一个数据源|创建您的第一个仪表板的初始步骤已经全部执行，只剩下剩下两个。目前，我们将忽略这些。单击左上角的主页按钮将弹出一个菜单，列出可用的仪表板:
![](img/ed39f3be-0f1b-4fd7-9dac-6a257b5ff551.png)
如您所见，我们有一个名为 Docker Monitoring 的。点击它将带您进入以下页面:
![](img/e4442959-0f79-4cf4-a8c0-7a057e461f22.png)
从屏幕右上角的计时信息中可以看到，默认情况下，它会显示最后五分钟的数据。点击它将允许您更改时间框架显示。例如，下面的屏幕显示了最后 15 分钟，这显然比 cadvisor 记录的 5 分钟多:
![](img/461543ed-904b-47f9-a747-8fcd743f3e3f.png)
我已经提到，这是一个复杂的解决方案；最终，Docker 将扩展最近发布的内置端点，该端点目前只公开关于 Docker Engine 的信息，而不公开容器本身。有关内置端点的更多信息，请查看官方 Docker 文档，该文档可在[https://docs.docker.com/config/thirdparty/prometheus/](https://docs.docker.com/config/thirdparty/prometheus/)找到。
还有其他监控解决方案；大部分采取第三方**软件即服务** ( **SaaS** )的形式。正如您在*进一步阅读*部分的服务列表中所看到的，这里列出了一些成熟的监控解决方案。事实上，您可能已经在使用它们了，所以在扩展配置时，您很容易在监控容器时考虑到它们。
完成 Prometheus 安装探索后，不要忘记运行以下命令将其删除:
```
$ docker-compose down --volumes --rmi all
```
这将删除所有容器、卷、映像和网络。
# 扩展到外部平台
我们已经研究了如何使用 Docker Machine、Docker Swarm、Docker for Amazon Web Services 和 Rancher 等工具扩展到其他一些外部平台，以推出集群以及来自公共云服务的集群和容器服务，如 Amazon Web Services、Microsoft Azure 和 DigitalOcean。
# 英雄库
**Heroku** 与其他云服务略有不同，因为它被认为是一个**平台即服务** ( **PaaS** )。不是在其上部署容器，而是将容器链接到 Heroku 平台，从该平台运行服务，如 PHP、Java、Node.js 或 Python。因此，您可以在 Heroku 上运行您的 Rails 应用，然后将您的 Docker 容器附加到该平台。
We will not be covering installing Heroku here as it is a little off topic. Please see the *Further readin*g section of the chapter for more details on Heroku.
您可以一起使用 Docker 和 Heroku 的方法是在 Heroku 平台上创建您的应用，然后在您的代码中，您将拥有类似于以下内容的内容:
```
{
 "name": “Application Name",
 "description": “Application to run code in a Docker container",
 "image": “:”,
 "addons": [ "heroku-postgresql" ]
}
```
退一步来说，我们首先需要安装插件，以便让这个功能正常工作。只需运行以下命令:
```
$ heroku plugins:install heroku-docker
```
现在，如果您想知道可以或应该从 Docker Hub 使用什么映像，Heroku 维护了许多可以在前面代码中使用的映像:
*   `heroku/nodejs`
*   `heroku/ruby`
*   `heroku/jruby`
*   `heroku/python`
*   `heroku/scala`
*   `heroku/clojure`
*   `heroku/gradle`
*   `heroku/java`
*   `heroku/go`
*   `heroku/go-gb`
# 生产是什么样子的？
在本章的最后一节，我们将讨论产品应该是什么样的。这部分不会像你想象的那么长。这是因为可供选择的方案非常多，所以不可能涵盖所有方案。此外，根据前面的章节，您应该已经有了一个最适合您的好主意。
相反，我们将关注在规划环境时您应该问自己的一些问题。
# Docker 主机
Docker 主机是您环境的关键组件。没有这些，你将没有地方运行你的容器。正如我们在前面几章中已经看到的，在运行 Docker 主机时有一些注意事项。您需要考虑的第一件事是，如果您的主机正在运行 Docker，它们不应该运行任何其他服务。
# 过程混合
您应该抵制在现有主机上快速安装 Docker 并启动容器的诱惑。这不仅会对您在单个主机上混合使用隔离和非隔离进程带来安全隐患，还会导致性能问题，因为您无法向非容器化的应用添加资源限制，这意味着它们还可能对您正在运行的容器产生负面影响。
# 多个隔离的 Docker 主机
如果你有几台以上的 Docker 主机，你打算如何管理它们？运行 Portainer 这样的工具很棒，但是当试图管理多个主机时会很麻烦。此外，如果运行多个独立的 Docker 主机，则不能选择在主机之间移动容器。
当然，您可以使用诸如 Weave Net 之类的工具来跨越多个单独的 Docker 主机的容器网络。根据您的托管环境，您也可以选择在外部存储上创建卷，并根据需要将其呈现给 Docker 主机，但您实际上是在创建一个手动过程来管理主机之间的容器迁移。
# 发送到您的容器
如果您有多个主机，您需要考虑如何在容器之间路由请求。
例如，如果您有一个外部负载平衡器，例如 AWS 中的 ELB，或者一个内部集群前面的专用设备，您是否有能力动态地将到达负载平衡器上的`port x`的流量添加到 Docker 主机上的`port y`的路由，然后流量通过该路由到达您的容器？
如果您有多个容器都需要在同一个外部端口上访问，您将如何处理？
您是否需要安装一个代理(如 Traefik、HAProxy 或 nginx)来接受请求，然后基于域或子域基于虚拟主机路由您的请求，而不仅仅是使用基于端口的路由？
例如，您可以只使用网站的端口，从端口`80`和`443`到 Docker 配置的容器的所有内容，来接受这些端口上的流量。使用虚拟主机路由意味着您可以将`domain-a.com`路由到`container a`，然后将[domainb.com](https://www.domain-b.com/)路由到`container b`。`domain-a.com`和`domain-b.com`都可以指向同一个 IP 地址和端口。
# 使聚集
我们在上一节中讨论的许多问题都可以通过引入集群工具来解决，例如 Docker Swarm 和 Kubernetes
# 和睦相处
即使应用在开发人员的本地 Docker 安装中运行良好，您也需要能够保证，如果您将应用部署到例如 Kubernetes 集群中，它也能以同样的方式运行。
十有八九，您不会有问题，但是您确实需要考虑应用如何与同一应用集中的其他容器进行内部通信。
# 参考架构
您选择的集群技术是否有参考体系结构？部署集群时，最好总是进行检查。有一些最佳实践指南接近或符合您建议的环境。毕竟，没有人想制造一个大的单点故障。
还有，有哪些推荐的资源？部署一个具有五个管理节点和一台 Docker 主机的集群没有意义，就像部署五台 Docker 主机和一台管理服务器没有意义一样，因为您有相当大的单点故障。
您的集群技术支持哪些支持技术(例如，远程存储、负载平衡器和防火墙)？
# 集群通信
当集群与管理主机或 Docker 主机通信时，有什么要求？您需要内部网络还是独立网络来隔离集群流量？
您可以轻松地将集群成员锁定到您的集群吗？集群通信是否加密？您的集群可能会暴露哪些信息？这是否使其成为黑客的目标？
集群需要什么外部访问 API，例如您的公共云提供商？任何应用编程接口/访问凭证的存储有多安全？
# 映像注册表
您的应用是如何打包的？你把代码烤成映像了吗？如果是，您是否需要托管一个私有的本地映像注册中心，或者您是否可以使用外部服务，如 Docker Hub、Docker 可信注册中心(DTR)或 Quay？
如果您需要托管自己的私有注册表，它应该在您的环境中的什么位置？谁拥有或需要访问权限？它能连接到您的目录提供商吗，比如活动目录安装？
# 摘要
在本章中，我们看了 Docker 的一些不同的工作流，以及如何对您的容器和 Docker 主机进行一些监控。
当涉及到您自己的环境时，您能做的最好的事情是构建一个概念证明，并尽可能努力覆盖您能想到的每一个灾难场景。您可以通过使用云提供商提供的容器服务或寻找一个好的参考体系结构来获得领先，这都应该会限制您的试错。
在下一章中，我们将看看你在容器世界的下一步会是什么。
# 问题
1.  哪个容器为我们的 WordPress 网站服务？
2.  `wp`容器为什么不保持运行？
3.  以分钟为单位，cadvisor 将指标保留多长时间？
4.  什么 Docker Compose 命令可以用来删除与应用相关的所有内容？
# 进一步阅读
您可以在以下网站找到我们在本章中使用的软件的详细信息:
*   http://wordpress.org/
*   WP-CLI:[https://WP-CLI . org/](https://wp-cli.org/)
*   PHP-fpm:https://PHP-fpm . org/
*   蒸发器:[https://github . com/Google/cadvisor/](https://github.com/google/cadvisor/)
*   普罗米修斯:https://prometheus.io/
*   grafana:[https://grafana . com/](https://grafana.com/)
*   普罗米修斯数据模型:[https://prometheus.io/docs/concepts/data_model/](https://prometheus.io/docs/concepts/data_model/)
*   Traefik： [https://traefik.io/](https://traefik.io/)
*   haproxy:[https://www . haproxy . org/](https://www.haproxy.org/)
*   基尼系数:[https://基尼系数. org/](https://nginx.org/)
*   heroku:[https://www . heroku . com](https://www.heroku.com)
其他外部托管的 Docker 监控平台包括:
*   sys dig cloud:[https://sys dig . com/](https://sysdig.com/)
*   数据犬:[http://docs.datadoghq.com/integrations/docker/](http://docs.datadoghq.com/integrations/docker/)
*   CoScale:[http://www.coscale.com/docker-monitoring](http://www.coscale.com/docker-monitoring)
*   dyna trace:[https://www . dyna trace . com/capabilities/microservice-and-container-monitoring/](https://www.dynatrace.com/capabilities/microservices-and-container-monitoring/)
*   signal FX:https://signal FX . com/dock-monitoring/
*   新遗迹:[https://newrelic.com/partner/docker](https://newrelic.com/partner/docker)
*   sematext:https://sematext . com/dock/
还有其他自托管选项，例如:
*   弹性节拍:[https://www.elastic.co/products/beats](https://www.elastic.co/products/beats)
*   系统： [https://www.sysdig.org](https://www.sysdig.org)
*   zabix:https://github . com/monitoringartist/zabix Docker 监控