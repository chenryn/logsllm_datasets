list is 2−16. The probability of ﬁnding a solution can again
be modelled as a geometric distribution. We get
i1 and L(cid:48)
i2.
Pr[Z ≤ 232] = 1 −(cid:0)1 − 2
−16(cid:1)232 ≈ 1 − 7, 2 · 10
−28463 (12)
where X follows a geometric distribution with a success
probability of 2−64. Such a low chance of ﬁnding a solu-
tion is unusable.
where Z follows a geometric distribution with a success prob-
ability of p = 2−16. Practically this shows that a solu-
tion will always be found. The average number of required
guesses for the second word is E[Z] = 1/p = 216. As an ex-
periment we ran 50000 runs where random states had to be
connecting using three magic words. In all runs a solution
was found. It took on average 65814 = 216.017... guesses for
M2 until a solution was found, with a standard deviation
of 66407 guesses. On our 3,10 GHz Intel Core i5-2400 this
corresponded to an average running time of 2,96 millisec-
onds. Though requiring more magic words, these results are
signiﬁcantly better than the previous two cases.
5.3 Decryption Attack
Our goal is to decrypt arbitrary packets sent towards the
client. We will accomplish this by appending the targeted
packet to a specially crafted preﬁx. The preﬁx will simu-
late the behaviour of a ping request, making the client echo
back the appended data. We construct the preﬁx such that
the reply is send to an IP under our control, meaning we
will receive the plaintext content of the targeted packet, ef-
fectively decrypting it. To assure that the MIC value of
the constructed packet is correct we will apply the Michael
state reset attack to the ping-like preﬁx. This allows us to
append the targeted packet without invalidating the MIC
value. The resulting frame is sent to the client using the
fragmentation attack.
Contrary to the suggestion by Beck [1] we cannot use an
ICMP ping request as the preﬁx. This is because it includes
a checksum calculated over the header and the data section.
But since we do not know the plaintext data of the full
packet, we cannot calculate a correct checksum. Instead we
will construct a UDP preﬁx, where specifying a checksum is
optional. Sending a UDP packet to a closed port results in
an ICMP destination unreachable reply containing the ﬁrst 8
bytes of the UDP packet. However, on Windows, Linux, and
Android the ICMP unreachable reply contains a full copy of
the original UDP packet. So when targeting these operating
systems the client will reply with the complete content of our
constructed packet. In particular this includes the plaintext
content of the targeted packet. Even large packets can be
quickly decrypted using this method.
Again we created a proof of concept tool in Linux. It lis-
tens for packets sent towards the client. Once a vulnerable
packet has been captured, the UDP preﬁx is constructed
and the Michael state reset attack is applied. The resulting
UDP preﬁx is transmitted using the fragmentation attack,
followed by the targeted packet (which is marked as the ﬁ-
nal fragment of the MSDU). In practice this means the ﬁnal
fragment will usually be bigger than all previous fragments.
Though this is not allowed by the 802.11 speciﬁcation, nearly
all devices will accept the packet (see Sect. 6). The ICMP
unreachable reply sent by the client will include the pre-
ﬁx, magic bytes, and the unencrypted data of the targeted
packet. Among other things, this allows an attacker to de-
crypt a TCP packet, learn the sequence number, and hijack
the TCP stream to inject arbitrary data [12]. As a con-
sequence, malicious data could be injected when the client
opens a website. Again the attack can be mitigated by pre-
venting the Beck and Tews attack.
6. EXPERIMENTS
In this section we begin by investigating whether TKIP is
still supported in practice. Then we evaluate how much de-
vices adhere to the relevant aspects of the 802.11 standard,
we report on implementation vulnerabilities discovered in
Table 1: Number of WiFi networks supporting the
given encryption schemes for several regions. Note
that one network can support multiple schemes.
Region Open WEP TKIP CCMP #Networks
Leuven
Heverlee
3307
1212
3143
1149
381
121
618
288
5023
1886
some wireless devices, and we discuss how our ﬁndings im-
pact the attacks. Finally our attacks are tested in realistic
settings.
6.1 Networks Supporting TKIP
Some new routers (for instance the Belkin N300 router)
do not support TKIP anymore, in accordance with the se-
curity roadmap of the WiFi Alliance. The WiFi Alliance
tests products and hands out certiﬁcations if they conform
to certain standards. Their new roadmap speciﬁes that, as
of 2011, new APs are no longer allowed to support a TKIP
only option [7]. Even mixed mode, which simultaneously
allows TKIP and CCMP in the same network, is no longer a
requirement. Finally, in 2014 TKIP is disallowed completely.
Based on this one would think that TKIP is no longer widely
supported. Surprisingly, we found the opposite to be true.
To investigate whether TKIP is still supported in practice
we surveyed wireless networks in two Belgian municipalities
(Leuven and Heverlee). Detecting networks was done using
passive scanning, consisting of monitoring wireless traﬃc for
beacon frames. These frames contain all information neces-
sary to connect to a wireless network. In particular it in-
cludes the name of the network, the MAC address of the AP,
and the encryption schemes supported by the network. Dur-
ing an initial tests we found that active scanning detected
few additional networks (less than 6%), so in an attempt to
prolong battery life only passive scanning was used.
Several trips, of around an hour long, were made on foot
while scanning for networks. The raw capture was written
to ﬁle and later analysed for beacon frames using a custom
tool. This approach allowed us to make improvements to our
tool after collecting the raw captures. We uniquely identi-
ﬁed networks by their name. This is necessary because one
network can be advertised by multiple APs. However we
also encountered several APs advertising a network named
after a vendor or product. These are default network names
used by a particular device and do not represent the same
network. Therefore we treated each of these APs as a unique
network. Similarly there were several APs advertising a net-
work with an empty name. These APs were also treated as
an unique network.
In total we detected 6803 unique networks. The num-
ber of networks supporting a particular encryption scheme
is shown in Table 1. Note that a handful of networks were
present both in Leuven and Heverlee. We found that 93%
of the networks used encryption, and that 66% supported
TKIP. When considering only encrypted networks, 71% of
them supported TKIP. Additionally, 19% of networks using
encryption only allow TKIP. We believe the reason so many
networks still support TKIP is because most routers, when
conﬁgured to use WPA2, by default use mixed mode (allow-
ing both TKIP and CCMP). We even observed that WEP
is still used by 14% of encrypted networks.
Table 2: Results of various tests on diﬀerent wireless adapters. For laptop and USB adapters, L and W
denote it only works on Linux or Windows, respectively. Yes means it works on both, no means it works on
neither. Open Source router ﬁrmware was tested on the Asus RT-N10.
Laptop and USB:
Mobile Devices:
Access Points:
Intel 4965AG
Belkin F7D1102AZ
Belkin F5D7053
Alfa AWUS036h
Ralink WA-U150BB
iPod MC086LL
iPad MC980NF
Linksys WAG320N
WRT54G 4.21.5
Scarlet VDSL Box
Cisco Aironet 1130 AG
Asus RT-N10 1.0.2.4
Tomato 1.28
DD-WRT v24-sp2
DoS
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
Fragmentation
diﬀ. size
eﬀ. frag.
skip TSC any MIC
Replay Unenc.
yes
yes
L
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
no
yes
L
yes
yes
no
no
yes
yes
no
yes
yes
yes
yes
L
yes
L
yes
yes
yes
yes
yes
yes
no
yes
yes
yes
yes
no
W
L
W
L
no
no
no
no
yes
no
no
no
no
no
yes
yes
W
yes
no
no
no
no
no
no
no
yes
no
no
L
yes
W
W
no
no
no
no
yes
no
no
no
no
6.2 Adherence to the 802.11 Speciﬁcation
The wireless adapters in Table 2 were tested for imple-
mentation details impacting our attacks. While doing this
we encountered several vulnerabilities present in some wire-
less devices, and decided to test for their presence on all
devices. Wireless routers and mobile devices were tested us-
ing their default conﬁgurations, with open source wireless
router ﬁrmware was tested on the Asus RT-N10. Laptops
and USB wireless adapters were tested on Linux using the
compat-wireless 3.6.2-1-snp drivers, and on Windows using
the default installed drivers.
For the DoS attack to work a client must send a MIC fail-
ure report when an invalid MIC has been detected, and the
AP must shut down the network after two MIC failures. We
found that all wireless adapters, in all conﬁgurations, imple-
ment this properly. As a result our DoS attack is applicable
to all tested devices (see Table 2 column DoS). Additionally
we tested the DoS on a network not using QoS, making our
tool forge the QoS header. Again all adapters were vulner-
able to the attack, conﬁrming results by Todo et al. [21].
Fragmentation support has been tested for several prop-
erties. We found that the Belkin F5D7053 adapter on Win-
dows incorrectly implemented fragmentation. Sending a frag-
ment to this adapter always resulted in a MIC failure, though
it worked ﬁne under Linux. All other devices supported frag-
mentation.