title:Enhancing byte-level network intrusion detection signatures with context
author:Robin Sommer and
Vern Paxson
Network Intrusion Detection Signatures with Context
Enhancing Byte-Level
Robin Sommer
TU M¨unchen
Germany
PI:EMAIL
ABSTRACT
Many network intrusion detection systems (NIDS) use byte sequen-
ces as signatures to detect malicious activity. While being highly
efﬁcient, they tend to suffer from a high false-positive rate. We
develop the concept of contextual signatures as an improvement of
string-based signature-matching. Rather than matching ﬁxed strings
in isolation, we augment the matching process with additional con-
text. When designing an efﬁcient signature engine for the NIDS
Bro, we provide low-level context by using regular expressions for
matching, and high-level context by taking advantage of the se-
mantic information made available by Bro’s protocol analysis and
scripting language. Therewith, we greatly enhance the signature’s
expressiveness and hence the ability to reduce false positives. We
present several examples such as matching requests with replies,
using knowledge of the environment, deﬁning dependencies be-
tween signatures to model step-wise attacks, and recognizing ex-
ploit scans.
To leverage existing efforts, we convert the comprehensive sig-
nature set of the popular freeware NIDS Snort into Bro’s language.
While this does not provide us with improved signatures by itself,
we reap an established base to build upon. Consequently, we evalu-
ate our work by comparing to Snort, discussing in the process sev-
eral general problems of comparing different NIDSs.
Categories and Subject Descriptors: C.2.0 [Computer-Communi-
cation Networks]: General - Security and protection.
General Terms: Performance, Security.
Keywords: Bro, Network Intrusion Detection, Pattern Matching,
Security, Signatures, Snort, Evaluation
1.
INTRODUCTION
Several different approaches are employed in attempting to detect
computer attacks. Anomaly-based systems derive (usually in an au-
tomated fashion) a notion of “normal” system behavior, and report
divergences from this proﬁle, an approach premised on the notion
that attacks tend to look different in some fashion from legitimate
computer use. Misuse detection systems look for particular, explicit
indications of attacks (Host-based IDSs inspect audit logs for this
while network-based IDSs, or NIDSs, inspect the network trafﬁc).
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
Vern Paxson
International Computer Science Institute and
Lawrence Berkeley National Laboratory
Berkeley, CA, USA
PI:EMAIL
In this paper, we concentrate on one popular form of misuse de-
tection, network-based signature matching in which the system in-
spects network trafﬁc for matches against exact, precisely-described
patterns. While NIDSs use different abstractions for deﬁning such
patterns, most of the time the term signature refers to raw byte se-
quences. Typically, a site deploys a NIDS where it can see network
trafﬁc between the trusted hosts it protects and the untrusted exterior
world, and the signature-matching NIDS inspects the passing pack-
ets for these sequences. It generates an alert as soon as it encounters
one. Most commercial NIDSs follow this approach [19], and also
the most well-known freeware NIDS, Snort [29]. As an example,
to detect the buffer overﬂow described in CAN-2002-0392 [9],
Snort’s signature #1808 looks for the byte pattern 0xC0505289-
E150515250B83B000000CD80 [2] in Web requests. Keeping
in mind that there are more general forms of signatures used in in-
trusion detection as well—some of which we brieﬂy discuss in §2—
in this paper we adopt this common use of the term signature.
Signature-matching in this sense has several appealing proper-
ties. First, the underlying conceptual notion is simple: it is easy
to explain what the matcher is looking for and why, and what sort
of total coverage it provides. Second, because of this simplicity,
signatures can be easy to share, and to accumulate into large “at-
tack libraries.” Third, for some signatures, the matching can be
quite tight: a match indicates with high conﬁdence that an attack
occurred.
On the other hand, signature-matching also has signiﬁcant lim-
itations.
In general, especially when using tight signatures, the
matcher has no capability to detect attacks other than those for
which it has explicit signatures; the matcher will in general com-
pletely miss novel attacks, which, unfortunately, continue to be de-
veloped at a brisk pace. In addition, often signatures are not in fact
“tight.” For example, the Snort signature #1042 to detect an exploit
of CVE-2000-0778 [9] searches for “Translate: F” in Web
requests; but it turns out that this header is regularly used by certain
applications. Loose signatures immediately raise the major problem
of false positives: alerts that in fact do not reﬂect an actual attack.
A second form of false positive, which signature matchers likewise
often fail to address, is that of failed attacks. Since at many sites
attacks occur at nearly-continuous rates, failed attacks are often of
little interest. At a minimum, it is important to distinguish between
them and successful attacks.
A key point here is that the problem of false positives can po-
tentially be greatly reduced if the matcher has additional context at
its disposal: either additional particulars regarding the exact activ-
ity and its semantics, in order to weed out false positives due to
overly general “loose” signatures; or the additional information of
how the attacked system responded to the attack, which often indi-
cates whether the attack succeeded.
262In this paper, we develop the concept of contextual signatures,
in which the traditional form of string-based signature matching is
augmented by incorporating additional context on different levels
when evaluating the signatures. First of all, we design and imple-
ment an efﬁcient pattern matcher similar in spirit to traditional sig-
nature engines used in other NIDS. But already on this low-level
we enable the use of additional context by (i) providing full regu-
lar expressions instead of ﬁxed strings, and (ii) giving the signature
engine a notion of full connection state, which allows it to corre-
late multiple interdependent matches in both directions of a user
session. Then, if the signature engine reports the match of a sig-
nature, we use this event as the start of a decision process, instead
of an alert by itself as is done by most signature-matching NIDSs.
Again, we use additional context to judge whether something alert-
worthy has indeed occurred. This time the context is located on a
higher-level, containing our knowledge about the network that we
have either explicitly deﬁned or already learned during operation.
In §3.5, we will show several examples to demonstrate how the
concept of contextual signatures can help to eliminate most of the
limitations of traditional signatures discussed above. We will see
that regular expressions, interdependent signatures, and knowledge
about the particular environment have signiﬁcant potential to reduce
the false positive rate and to identify failed attack attempts. For
example, we can consider the server’s response to an attack and
the set of software it is actually running—its vulnerability proﬁle—
to decide whether an attack has succeeded.
In addition, treating
signature matches as events rather than alerts enables us to analyze
them on a meta-level as well, which we demonstrate by identifying
exploit scans (scanning multiple hosts for a known vulnerability).
Instrumenting signatures to consider additional context has to be
performed manually. For each signature, we need to determine what
context might actually help to increase its performance. While this
is tedious for large sets of already-existing signatures, it is not an
extra problem when developing new ones, as such signatures have
to be similarly adjusted to the speciﬁcs of particular attacks anyway.
Contextual signatures serve as a building block for increasing the
expressivess of signatures; not as a stand-alone solution.
We implemented the concept of contextual signatures in the
framework already provided by the freeware NIDS Bro [25].
In
contrast to most NIDSs, Bro is fundamentally neither an anomaly-
based system nor a signature-based system. It is instead partitioned
into a protocol analysis component and a policy script component.
The former feeds the latter via generating a stream of events that
reﬂect different types of activity detected by the protocol analy-
sis; consequently, the analyzer is also referred to as the event en-
gine. For example, when the analyzer sees the establishment of
a TCP connection, it generates a connection established
event; when it sees an HTTP request it generates http request
and for the corresponding reply http reply; and when the event
engine’s heuristics determine that a user has successfully authenti-
cated during a Telnet or Rlogin session, it generates login suc-
cess (likewise, each failed attempt results in a login failure
event).
Bro’s event engine is policy-neutral:
it does not consider any
particular events as reﬂecting trouble. It simply makes the events
available to the policy script interpreter. The interpreter then ex-
ecutes scripts written in Bro’s custom scripting language in order
to deﬁne the response to the stream of events. Because the lan-
guage includes rich data types, persistent state, and access to timers
and external programs, the response can incorporate a great deal of
context in addition to the event itself. The script’s reaction to a par-
ticular event can range from updating arbitrary state (for example,
tracking types of activity by address or address pair, or grouping re-
lated connections into higher-level “sessions”) to generating alerts
(e.g., via syslog) or invoking programs for a reactive response.
More generally, a Bro policy script can implement signature-style
matching—for example, inspecting the URIs in Web requests, the
MIME-encoded contents of email (which the event engine will ﬁrst
unpack), the user names and keystrokes in login sessions, or the
ﬁlenames in FTP sessions—but at a higher semantic level than as
just individual packets or generic TCP byte streams.
Bro’s layered approach is very powerful as it allows a wide range
of different applications. But it has a signiﬁcant shortcoming:
while, as discussed above, the policy script is capable of perform-
ing traditional signature-matching, doing so can be cumbersome for
large sets of signatures, because each signature has to be coded as
part of a script function. This is in contrast to the concise, low-level
languages used by most traditional signature-based systems. In ad-
dition, if the signatures are matched sequentially, then the overhead
of the matching can become prohibitive. Finally, a great deal of
community effort is already expended on developing and dissemi-
nating packet-based and byte-stream-based signatures. For exam-
ple, the 1.9.0 release of Snort comes with a library of 1,715 signa-
tures [2]. It would be a major advantage if we could leverage these
efforts by incorporating such libraries.
Therefore, one motivation for this work is to combine Bro’s ﬂexi-
bility with the capabilities of other NIDSs by implementing a signa-
ture engine. But in contrast to traditional systems, which use their
signature matcher more or less on its own, we tightly integrate it
into Bro’s architecture in order to provide contextual signatures. As
discussed above, there are two main levels on which we use addi-
tional context for signature matching. First, at a detailed level, we
extend the expressiveness of signatures. Although byte-level pattern
matching is a central part of NIDSs, most only allow signatures to
be expressed in terms of ﬁxed strings. Bro, on the other hand, al-
ready provides regular expressions for use in policy scripts, and we
use them for signatures as well. The expressiveness of such patterns
provides us with an immediate way to express syntactic context.
For example, with regular expressions it is easy to express the no-
tion “string XYZ but only if preceded at some point earlier by string
ABC”. An important point to keep in mind regarding regular expres-
sion matching is that, once we have fully constructed the matcher,
which is expressed as a Deterministic Finite Automaton (DFA), the
matching can be done in O(n) time for n characters in the input,
and also Ω(n) time. (That is, the matching always takes time linear
in the size of the input, regardless of the speciﬁcs of the input.) The
“parallel Boyer-Moore” approaches that have been explored in the
literature for fast matching of multiple ﬁxed strings for Snort [12, 8]
have a wide range of running times—potentially sublinear in n, but
also potentially superlinear in n. So, depending on the particulars
of the strings we want to match and the input against which we do
the matching, regular expressions might prove fundamentally more
efﬁcient, or might not; we need empirical evaluations to determine
the relative performance in practice. In addition, the construction of
a regular expression matcher requires time potentially exponential
in the length of the expression, clearly prohibitive, a point to which
we return in §3.1.
Second, on a higher level, we use Bro’s rich contextual state to
implement our improvements to plain matching described above.
Making use of Bro’s architecture, our engine sends events to the
policy layer. There, the policy script can use all of Bro’s already
existing mechanisms to decide how to react. We show several such
examples in §3.5.
Due to Snort’s large user base, it enjoys a comprehensive and
up-to-date set of signatures. Therefore, although for ﬂexibility we
have designed a custom signature language for Bro, we make use
of the Snort libraries via a conversion program. This program takes
an unmodiﬁed Snort conﬁguration and creates a corresponding Bro
signature set. Of course, by just using the same signatures in Bro as
in Snort, we are not able to improve the resulting alerts in terms of
quality. But even if we do not accompany them with additional
context, they immediately give us a baseline of already widely-
deployed signatures. Consequently, Snort serves us as a reference.
Throughout the paper we compare with Snort both in terms of qual-
ity and performance. But while doing so, we encountered several
general problems for evaluating and comparing NIDSs. We be-
lieve these arise independently of our work with Bro and Snort, and
therefore describe them in some detail. Keeping these limitations
in mind, we then evaluate the performance of our signature engine
and ﬁnd that it performs well.
§2 brieﬂy summarizes related work. In §3 we present the main
design ideas behind implementing contextual signatures: regular
expressions, integration into Bro’s architecture, some difﬁculties
with using Snort signatures, and examples of the power of the Bro
signature language. In §4 we discuss general problems of evaluating
NIDSs, and then compare Bro’s signature matching with Snort’s. §5
summarizes our conclusions.
2. RELATED WORK
[4] gives an introduction to intrusion detection in general, deﬁn-
ing basic concepts and terminology.