leading to the most serious PKI security exposure of the last decade.
Microsoft, Apple, and Mozilla swiftly removed DigiNotar’s root cer-
tificate from their root stores. The observed differences in removal
time reflect the nature of our data sources: we detect immediate
Microsoft updates, but only detect removal from Apple/NSS in
the next published root store snapshot. In reality, Mozilla pushed
an update on August 29, 2011 [102], and Apple followed suit on
September 9 [77]. Although the up-to-the-hour response delay in
such incidents is important, our dataset lacks the resolution (see
Section 3.1) to provide more fine-grained analysis.
CNNIC In 2015, Google discovered a Mideast Communication
Systems (MCS) intermediate issued by China Internet Network In-
formation Center (CNNIC) issuing forged TLS certificates. Beyond
the questionable ethics of the incident, the intermediate certificate’s
private keys were installed on a firewall device, exposing it to poten-
tial compromise. In response to this situation, Chrome, Mozilla, and
Microsoft immediately revoked the MCS intermediate certificate,
and Mozilla implemented partial distrust of CNNIC roots in code,
only trusting certificates issued before April 1, 2015 [42]. Apple
took an alternate approach—they removed the CNNIC root in 2015,
significantly before other root programs, but whitelisted 1,429 leaf
certificates [1]. This accounts for Apple’s preemptive removal of
CNNIC roots. Microsoft took the most permissive approach and
continued to trust CNNIC roots until 2020.
In 2016, Mozilla discovered that the CA
StartCom / WoSign
WoSign was secretly backdating SSL certificates to circumvent
Mozilla’s deadline for halting SHA1 certificate issuance [113]. Fur-
ther, Mozilla discovered that WoSign had stealthily acquired an-
other CA StartCom and found evidence that StartCom was utilizing
WoSign’s CA infrastructure. In response, Mozilla (and Chrome)
implemented code changes to partially distrust WoSign/StartCom
certificates in late 2016, eventually removing the seven roots in
2017. Microsoft only began to partially distrust StartCom / WoSign
nearly a year later. Apple never included WoSign roots directly, but
revoked their trusted cross-signed intermediates. Surprisingly, Ap-
ple still trusts one of the three StartCom roots6, despite knowledge
of WoSign ownership and evidence of shared issuance.
Procert was never included in Apple, Microsoft, or Java
Procert
root stores, and not subject to removal.
Certinomis Amongst other transgressions, Certinomis cross-
signed a StartCom root after StartCom had been distrusted, effec-
tively creating a new valid trust path for StartCom. Furthermore,
Certinomis delayed disclosure of these cross-signs by 111 days. Ap-
ple has revoked this root but has not removed it, while Microsoft
continues to trust this root certificate.
6Two StartCom roots were revoked via valid.apple.com, but not removed.
8
186
Takeaways Although root programs make independent root trust
decisions based on their own contexts, we expect them to remove
trust in high severity root CA removals. We observe a range of dif-
ferent response times, response mechanisms (e.g., remove root and
whitelist leaves, revoke root, partially distrust root, etc.), and even
a lack of response for some root programs. The heterogeneity of re-
sponses suggests room for improvements such as the convergence
of trust mechanisms or more prompt removal procedures.
6 NSS DERIVATIVES
In NSS documentation, Mozilla states: “Mozilla does not promise to
take into account the needs of other users of its root store when mak-
ing such [CA] decisions...Therefore, anyone considering bundling
Mozilla’s root store with other software needs to...maintain security
for their users by carefully observing Mozilla’s actions and taking
appropriate steps of their own” [57]. Despite the prevalence of NSS-
derivative root stores, Mozilla’s root store is explicitly not intended
to be a one-size-fits-all solution for TLS authentication trust. In this
section, we seek to understand the root management practices of
NSS derivatives and how they influence overall security. We first
examine the frequency and delay of updates to understand the risks
that different NSS derivatives expose their users to. We then look at
the fidelity with which root stores copy NSS, including the degree
to which trust purpose restrictions are applied. We ultimately detail
the custom modifications that individual root store providers make
to best serve their users.
6.1 Update Dynamics
To understand the update dynamics of NSS derivatives, we first
need to link specific derivative root store snapshots to the NSS
version that they copy. Because NSS derivatives don’t always make
exact copies of the NSS root stores, we cannot look for exact root
store matches. Instead, we use Jaccard set distance and find the
closest NSS version match for each derivative root store snapshot.
Figure 3 depicts the evolution of NSS and its derivatives over time,
only including substantial versions that introduce changes to TLS
trusted roots. Because software development often runs in parallel
(e.g., maintenance support for v1, and new development for v2), we
only consider mainline versions of each derivative that reflect the
highest version at a given point in time.
To quantify derivative staleness, we integrate the area between
NSS and each NSS derivative root store. This yields a “substantial
version-days” measure where versions are not sequential. We then
normalize these version-days over time to determine the average
substantial version staleness for each root store. The data suggests
that Alpine Linux, which has the shortest and most recent data
collection range, adheres closest to NSS updates. On the other hand,
Amazon Linux exhibits an average staleness of more than four
substantial versions. Furthermore, Amazon Linux and Android are
always stale—even when they update, the updated root store is
already several months behind. This hints at prolonged deploy-
ment cycles that exceed NSS’s relatively frequent updates. Each
tick in Figure 3 represents a mainline version update for each deriv-
ative, which suggests that some derivative version updates ignore
potential NSS updates, especially for Amazon Linux and Alpine.
6.2 Derivative Differences
Figure 4 depicts the root store differences between NSS and NSS
derivatives (mainline versions) over time. We find that all deriva-
tives in our dataset make bespoke modifications to the NSS root
store, and we categorize and describe the reasons for these changes
below.
In addition to poor update adherence to
Symantec distrust
NSS’s root store, one shortcoming of NSS derivatives is their trust
store design, which lacks a mechanism for external restrictions
on root certificates. Such a mechanism could provide the ability to
trust roots for specific purposes (e.g., TLS server auth, email signing,
code signing) or provide gradual distrust, rather than a single on-
or-off toggle. To present the practical implications of these issues,
we look at the distrust of Symantec, which required nuanced trust
mechanisms to handle correctly. Symantec’s distrust also amplified
existing pain points due to its scope—Symantec was the largest CA
by issuance volume at the time of its distrust.
Beginning in late 2018, Firefox, independent of NSS, implemented
a gradual distrust of Symantec by adding custom validation code [80]
to distrust subscriber certificates issued after a certain date. In
2020 [72], NSS version 53 implemented partial distrust of twelve
Symantec (now owned by DigiCert) roots through the new restric-
tion server-distrust-after in certdata.txt. This had the effect of
partitioning Symantec subscriber certificates into two parts: cer-
tificates that were still trusted until expiration, and certificates
that were no longer trusted. However, none of the NSS derivatives
had such a mechanism and were forced to choose between pre-
maturely removing all trust in Symantec roots, or retaining full
trust in Symantec roots. From our dataset, Alpine and Android
have not yet upgraded beyond NSS version 48 and have postponed
Symantec distrust. NodeJS skipped the Symantec distrust update in
NSS version 53 and has continued to apply subsequent NSS updates.
Unfortunately, version 53 also included the immediate removal of
two other roots: TWCA due to Mozilla policy violations and SK ID
Solutions due to CA request. These roots are preserved in NodeJS.
Ubuntu/Debian took the alternate approach and—just a few days
after NSS implemented partial distrust in version 53—removed
the Symantec roots. Surprisingly, they did not apply all changes
introduced in version 53, and only removed eleven out of twelve
Symantec roots, curiously retaining GeoTrust Universal CA 2 [32].
Unfortunately, this premature full distrust led to so many user
complaints [31] that Debian re-added Symantec distrusted roots.
This incident not only broke applications using the system root
store for TLS server authentication, it also broke (and provided
anecdotal evidence of) applications that relied on these roots for
code-signing and timestamping purposes, such as Microsoft’s .NET
package manager NuGet [88]. This is a clear example of root store
misuse, since the source of Debian/Ubuntu’s root store is NSS,
which only trusts CAs for TLS auth and email signing purposes.
Further, Ubuntu/Debian now only include NSS roots that are trusted
for TLS authentication (see Email signing below).
Non-NSS roots Ubuntu, Debian, and Amazon Linux include
roots that have never been in NSS. Amazon Linux includes a single
non-NSS root (3f9f27d: Thawte Premium Server CA) that it trusts
from October 2016 until December 2020, just before its expiry. This
root is part of the Thawte CA (acquired by Symantec, then DigiCert),
9
187
Figure 3: NSS derivative staleness—No derivative root stores match NSS’s update regularity. Alpine Linux maintains closest
parity to NSS, while AmazonLinux, on average, lags more than four substantial versions behind.
Figure 4: NSS derivative diffs—The number of added/removed root certificates for each NSS derivative indicates that all deviate
from strict NSS adherence.
which was included in NSS through other roots, and does not alter
the CA makeup of the Amazon Linux root store. Ubuntu/Debian,
on the other hand, trusted a total of 19 non-NSS roots, starting
from its first snapshot in 2005 and up until 2015. These roots belong
to a variety of organizations: the Brazilian National Institute of
Information Technology (1), Debian (2), Government of France
DCSSI (1), TP Internet Sp. (9), Software in the Public Interest (3), and
CAcert(3). Of these CAs, only DCSSI has ever had a root included
in NSS. While we cannot trace the inclusion reasons for all these
historic roots, we highlight a few interesting cases. The Debian
and Software in the Public Interest roots were included to support
Debian-specific infrastructure. CAcert, a distributed community
CA, was rejected from NSS [35] and other Linux distributions [65]
for lack of audits. These practices are a significant departure from
NSS inclusion policies and potentially put Ubuntu/Debian users at
greater risk.
10
188
2015201620172018201920202021Date3.16.33.16.43.17.33.183.18.13.19.33.213.22.23.253.263.273.28.13.30.23.323.343.353.373.393.403.413.433.453.463.483.533.543.573.593.603.633.63.13.64NSS versionNSSAlpine (0.73 versions behind)Debian/Ubuntu (1.96 versions behind)NodeJS (2.1 versions behind)Android (3.22 versions behind)AmazonLinux (4.83 versions behind)❖010AlSine020AmDzon−50AndUoid−3031odeJ62004200620082010201220142016201820202022020DebiDn/8buntu010AlSine020AmDzon−50AndUoid−3031odeJ62004200620082010201220142016201820202022020DebiDn/8buntuSources of DiﬀerenceAdded RootsRemoved Roots✱ Symantec Distrust010AlSine020AmDzon−50AndUoid−3031odeJ62004200620082010201220142016201820202022020DebiDn/8buntuSources of DiﬀerenceAdded RootsRemoved Roots✕(cid:803)✱ ❖Symantec DistrustNon-NSS RootsEmail SigningCustom Trust010AlSine020AmDzon−50AndUoid−3031odeJ62004200620082010201220142016201820202022020DebiDn/8buntu❖(cid:803)✕✱ ❖✱ ❖❖❖✱ ❖✕(cid:803)❖Email signing One of the fundamental differences between
NSS and its derivatives is NSS’s ability to specify trust purposes
for each root, as well as gradual distrust. Unfortunately, due to
their trust store format (single file/directory of root certificates for
all purposes), NSS derivatives conflate CAs trusted for TLS with
CAs trusted for code signing or email signatures, even though the
processes and policies and trust decisions for the three should vary
substantially. To quantify a lower bound on the issue, we look
at all NSS certificates that have never been trusted for TLS and
find the derivative root stores that misplace TLS trust in those
certificates. We find that Debian/Ubuntu (19 roots) and Alpine (4
roots) all express TLS trust in CA certificates that have never been
trusted by NSS for TLS. While Debian/Ubuntu have not trusted such
certificates since 2016, Alpine Linux trusted several until 2020. More
broadly, we can see that both Debian/Ubuntu in 2017 and Alpine
in 2020 shifted from including both TLS server authentication and
email signing NSS roots to just include TLS roots.
Several derivatives perform customized trust
Customized trust
removals. Android never included PSPProcert, which was later
removed from NSS, and also preemptively removed the problematic
CNNIC root. Both Android and Ubuntu/Debian manually removed
WoSign roots, without updating to the latest NSS version which had
already removed them. Similarly, Alpine Linux manually removed
trust in an expired AddTrust root without updating its NSS version.
These instances of manual root store modification in response to
CA issues reflect responsible root store management, especially for
Android which proactively removes problematic CAs.
Customized trust additions are less easily justified. From 2016–
2018, Amazon Linux continually re-added sixteen 1024-bit RSA
roots after they had been removed in NSS, and for a brief pe-
riod in 2018 added thirteen additional expired certificates and CA-
requested removals. We could not find a definitive reason for this be-
havior. NodeJS re-added a deprecated ValiCert root due to OpenSSL
chain building issues [44]. These additions are likely necessitated
by impact to end users of the derivative root store, which differ
from NSS’s users and risk calculus.
Takeaways The majority of root providers in our study derive
their root stores from NSS, but nearly all derivative root stores
demonstrate concerning update and customized trust practices that
increase security risk. The root causes for customized trust are a
combination of root store design incompatibility, misapplication of
NSS roots, proactive removals, and additions to patch downstream
bugs. The root causes for update delay are less transparent, but
exploring the possible reasons (e.g., operational laxness, rigid de-
ployment timelines, deployment impact to users, etc.) can lead to
more efficient and secure NSS copying.
7 DISCUSSION
Even though TLS deployment has blossomed in recent years, the
root store ecosystem for TLS sever authentication remains relatively
condensed, with essentially three major root programs (Apple, Mi-
crosoft, Mozilla) that support a majority of popular user agents. As
more devices (i.e., Internet of Things) and applications (e.g., DNS-
over-HTTPS) employ TLS in the coming years, existing pain points
in the TLS root store ecosystem will become more pronounced.
Below, we highlight a few issues and potential solutions.
NSS derivative formats NSS acts as the de facto foundation
for root store providers that do not wish to operate their own root
store program. Even ignoring update staleness issues (Section 6.1),
the derivative root stores in our dataset have struggled to copy
NSS with high fidelity due to their inability to indicate partial
trust. While it may seem that there is significant inertia behind
the simple root certificate file/directory design, since applications
expect that interface, Microsoft and Apple already provide TLS
interfaces [70, 81] that account for more nuanced root store trust.
Given that multitudes more root stores likely already rely on NSS7,
we hope that future work will transition derivatives and new root
stores to more modern formats, while maintaining ease of use for
developers.
Single purpose root stores Multi-purpose root stores can lead
to trust in roots for unintended purposes. As seen with Apple and
NSS derivatives, many email signing roots were trusted for TLS
server authentication, even though the trusted roots may not have
had sufficiently compliant and secure operations for TLS server
authentication. More broadly, trust in a root for TLS server authen-
tication does not transfer to other PKI purposes. Multi-purpose root
stores can also confuse application developers. In the most egre-
gious case, anecdotal evidence showed that NuGet relied on NSS-
copied roots for code signing and timestamping, even though NSS
no longer trusts roots for code signing, and has never trusted roots
for timestamping. NSS inclusion is a gateway to a wide range of de-
rivative systems that use multi-purpose root stores, and any CA in
NSS can issue trusted code-signing certificates in these derivatives
without supervision or transparency checks. Moving forward, we
recommend a short-term push towards single purpose root stores,
such as those recently implemented by RHEL distributions and Ama-
zonLinux (i.e., separate tls/email/objsign-ca-bundle.pem). In
the long term, we may need a more scalable, cross-platform de-
sign for arbitrary trust purposes if the Web PKI expands into an
internet-wide permissions system.
This study identifies which root pro-
Data-informed root trust
grams trust which root CAs but has limited insight into why specific
CAs are trusted. Anecdotal evidence points to a range of reasons:
business relationships between CAs (especially government CAs)
and root programs, access to a wider set of subscribers, or simply be-
cause a compliant CA requested inclusion. These varied reasons for
root inclusion highlight the subjectivity of historical root program
policies, which can deviate from the core properties of the Web
PKI: scale and security. NSS and other root programs have started
increasing objectivity by enforcing the BRs (thereby increasing
operational security) and enumerating how new CAs might benefit
Mozilla’s users (by increasing scale or security) [112]. Prior work
such as ZLint [96] is a step towards more objective evaluation, and
future work around CA performance and root provider performance
is needed. Furthermore, transparency efforts for root program and
CA policies/behavior [97, 98] will facilitate the transition towards
data-informed root store trust.
7Searching certdata.txt in Github yields over 200K code results.
11
189
8 RELATED WORK
The research community has studied the certificate ecosystem
in great depth, with an emphasis on CA behavior and processes.
Initial work focused on collecting large certificate datasets [110],
evaluating the security of certificate chains [89, 92] (even invalid
chains [86]), and issues with the certificate issuance process [83, 84,
96]. More recent work has explored the impacts of CA certificate
cross-signing [91] and examined the operational control of CA cer-
tificates [98]. This work borrows certificate security metrics used
in these prior studies and applies them towards understanding the
behavior and processes of root store providers.
Investigations of root store providers are scattered. Some have
involved proposals to reduce the large attack surface of root stores,
where every root is a single point of failure that can authenticate
all domains. Braun et al. performed a user study (n=22) and found
that 90% of roots went unused [85]. Smith et al. explored a wide
range of root stores and attempted to quantify the minimum set
of roots to handle 99% of certificates collected by IPv4 scans [105],
but VanderSloot et al. later demonstrated that such scans miss a
majority of certificates due to the absence of SNI [110]. Other studies
have proposed automatically inferring TLD name constraints on
root CAs [93]. Ma et al. helped link CA certificates (roots and
intermediates) trusted by Apple, Microsoft, and Mozilla to the CAs
that operate them [98]. Our study expands on the set of root stores
examined by previous works and focuses on their provenance, CA
composition, and security behavior over time.
Several works have examined specific slices of TLS root stores.
Vallina-Rodriguez [109] et al. found that 39% of Android root stores
included certificates beyond the default Android root store. De-
vice manufacturers and mobile carriers installed a majority of