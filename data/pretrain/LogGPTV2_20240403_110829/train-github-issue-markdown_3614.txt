In many threads / meetings I mentioned that we are not satisfied with today's
container runtime interface due to many reasons. Here are the top reasons off
my head:
  * Duplicated code for supporting SyncPod for all container runtime implementations, especially with Kubernetes defined policy: StartPolicy, PullPolicy, etc. We talked about changing today's declarative API to imperative API at this lowest extensible point.
  * Tight coupled with image format: docker runtime supports docker image, while rkt support appc image by converting docker image to its own format. In a long run, we want to add support for other image format without changing each runtime. There is no easy way to achieve that goal with today's API.
  * Logging management is very different on different os distro and with different runtime implementation. We should make this pluggable with runtime.
  * Part of resource isolation is handled by runtime today, while another part is handled by Kubelet. The decision is ad-hoc without much thinking. We need to decide if we want runtime interface to handle resource management or completely hand over to ResourceManager module in Kubelet since qos policy is defined by Kubernetes, and it might be redefined over releases.
  * ...
In my mind, we should separate image management, resource / cgroup management,
logging management from today's runtime interface. After this effort, we
effectively make today's runtime interface as pod / container lifecycle
management interface.
cc/ @kubernetes/sig-node, @bgrant0607  
cc/ @philips and @jonboulle @yifan-gu from coreos  
cc/ @smarterclayton @derekwaynecarr from redhat