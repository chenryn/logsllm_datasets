# Uncovering Dynamic Fault Trees

**Authors:**
- Sebastian Junges
- Dennis Guck
- Joost-Pieter Katoen
- Mariëlle Stoelinga

**Affiliations:**
- *Software Modeling and Verification, RWTH Aachen University, Germany*
- *Formal Methods and Tools, University of Twente, The Netherlands*

**Abstract:**
Fault tree analysis (FTA) is a widely adopted industry standard for assessing system reliability. Traditional static fault trees (SFTs) model the failure behavior of systems based on component failures. However, their limited expressive power has led to the development of dynamic fault trees (DFTs), which incorporate common dependability patterns such as spare management, functional dependencies, and sequencing. Various DFT variants have been proposed in the literature, differing in aspects like gate types, meaning, expressive power, failure propagation, element activation, and spare race resolution. This paper systematically uncovers these differences and categorizes existing DFT variants. Understanding these differences is crucial for accurate reliability assessment using DFT modeling and analysis.

## 1. Introduction

The rapid advancement of IT systems, including robots, the Internet of Things, autonomous vehicles, and 3D printing, has increased our reliance on computer-based systems. Reliability engineering plays a vital role in evaluating and mitigating risks associated with complex systems. Fault tree analysis (FTA) is a key technique in this field, widely used in industries ranging from railway and aerospace engineering to nuclear power plants. A fault tree (FT) describes how failures propagate through a system and how component failures lead to system failures. Standard FTs (SFTs) are directed acyclic graphs where leaves represent component failures and gates model failure propagation. While SFTs are easy to use and analyze, they have limited expressivity. To address more complex dependability patterns, several extensions to FTs have been proposed, with dynamic fault trees (DFTs) being the most common.

Since the original proposal by Dugan et al., numerous DFT variants have been introduced. These variants differ in supported gate types, failure propagation mechanisms, and other features. Table I provides an overview of the various features of existing DFT dialects. These differences can significantly impact reliability assessments, making it essential to be aware of them when using DFTs.

| **Feature** | **FTA** | **CTBN** | **DBN** | **SWN** | **GSPN** | **IMC** | **AE** |
|-------------|---------|----------|---------|---------|----------|---------|--------|
| Spare modules | - | - | - | Cold spares | - | - | - |
| Dep. events | - | - | - | - | - | - | - |
| PAND | ≤ | - | - | - | - | - | - |
| POR | - | - | - | - | - | - | - |
| SEQ | - | - | - | - | - | - | - |
| PDEP | - | - | - | - | - | - | - |
| Replication | - | - | - | - | - | - | - |
| Evidence | - | - | - | - | - | - | - |
| BEs | - | - | - | - | - | - | - |

*Legend:*
- **Spare modules:** Type of spare modules supported by a SPARE gate.
- **Dep. events:** Type of events that an FDEP gate can trigger.
- **PAND:** Whether the interpretation of priority-AND is inclusive (≤) or exclusive (<).
- **POR:** Whether priority-ORs are supported.
- **SEQ:** Whether sequence enforcers are supported or can be modeled via a cold spare.
- **PDEP:** Whether PDEPs are supported.
- **Replication:** What subtrees are allowed to be replicated.

Understanding these semantic issues is crucial for accurate and reliable DFT modeling and analysis. This paper systematically uncovers the semantic differences and subtleties of DFT variants, discusses potential pitfalls, and categorizes existing DFT variants for systematic comparison. Our study focuses on the following issues:

1. **Minimal Cut Sets (MCSs):** Can MCSs be applied to DFTs? MCSs are sets of basic events whose failure causes the failure of the DFT. We show that they are insufficient for DFT analysis.
2. **Causal or Temporal Ordering:** Does failure propagation in DFTs involve causal or temporal ordering? DFTs allow for failure forwarding, complicating understanding and requiring causality.
3. **Expressive Power:** Do sequence enforcers add expressivity? We investigate the interplay between simultaneous failures and priority-gates, and whether constantly failed elements can be expressed by existing gates.
4. **Spare Races:** How should spare races be resolved? We study the phenomenon of simultaneously failed gates claiming the same redundant part and provide solutions.
5. **Activation and Claiming:** What is the difference between activation and claiming in SPARE gates? We examine the interplay between these mechanisms.

We discuss the possible choices in DFT semantics and the issues that arise if these choices are not carefully accounted for. We omit the concept of repairs, which introduces additional open questions.

## 2. Organization of the Paper

- **Section II:** Introduces DFTs and their common interpretation.
- **Section III:** Extensively discusses the five issues with DFTs.
- **Section IV:** Discusses existing DFT semantics.
- **Section V:** Presents a case study collection and indicates which intricacies occur in them.

## 3. DFTs: The General Recipe

### 3.1 Static Fault Trees

Static fault trees (SFTs) are directed acyclic graphs (DAGs) that model how component failures propagate to system failures. The leaves of the tree (or sinks of the DAG) represent component failures, called basic events (BEs). BEs are typically equipped with a failure rate, often modeled by an exponential probability distribution. Other distributions, like Weibull, are also supported.

SFTs feature three types of gates:
- **AND-gate:** Fails if all children fail.
- **OR-gate:** Fails if at least one child fails.
- **VOT(k)-gate:** Fails if k out of n children fail.

SFTs are appealing due to their simplicity but cannot model order-dependent failures, feedback loops, sequencing, spare management, and mutual exclusion.

### 3.2 Dynamic Fault Trees

DFTs extend SFTs with additional element types, such as:
- **Priority-AND (PAND) gate:** An AND-gate that fails only if its children fail from left to right.
- **SPARE gate:** Models the usage of spare components.
- **Functional Dependency (FDEP) gate:** Models functional dependencies.
- **Sequence Enforcer (SEQ):** Ensures a specific order of failures.

Each BE in DFTs has two failure rates: active and passive. DFTs support coherent models even with these additional gates.

**Example 1:**
Consider a system with two pumps (PA and PB) and a valve (V). Pump PB can replace PA after valve V opens the pipe to PB. The DFT in Fig. 3a shows two conditions leading to system failure (SF):
- V fails before PA, making it impossible to switch to PB.
- Both PA and PB fail (in any order).

Extending SFTs with PAND gates makes the CONST(⊥) element syntactic sugar. In Fig. 3b, either A or B fails before both A and B have failed, ensuring D always fails before C, so T never fails.

**Figure 1.** Fault Tree

**Figure 2.** Common Elements in SFTs and DFTs

**Figure 3.** Example DFT

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.