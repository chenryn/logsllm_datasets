Includes READ_CONTROL, which is the right to read 
information in the file or directory object's security 
descriptor. 
STANDARD_RIGHTS_WRITE 
Includes WRITE_CONTROL, which is the right to write to the 
directory object's security descriptor. 
These file permissions can be applied when creating the file with the CreateFile() 
function. When you're auditing code that creates new files, it's important to correlate 
the permissions applied to the new file with what entities should have permission to 
read and/or modify that file. The lack of correct permissions can result in 
unintentional disclosure of information and possibly rogue users modifying sensitive 
files that alter how the program works. As an example, a program is generating 
sensitive information about employees, including salary summaries and so forth. If 
relaxed permissions are applied to the file object when it's created, any other 
employee might be able to discover their coworkers' salaries. 
The File I/O API 
The Windows File I/O API provides access to files through object handles, so all 
file-manipulation functions use handles to perform operations on a file. The API 
provides a basic set of functionality for creating, opening, reading, and writing to files 
as well as performing more advanced operations. This functionality is exposed 
through a large number of functions; however, the main ones you'll deal with daily 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
677 
are just CreateFile(), ReadFile(), WriteFile(), and CloseHandle(). These functions 
are responsible for the basic operations performed on files in most applications. As a 
code auditor, your primary focus is the CreateFile() routine because it's the most 
likely place for things to go awry, so this section primarily covers this function. 
Note 
There's also an OpenFile() function just for opening files, but it's for 16-bit Windows 
applications and is no longer used. 
The CreateFile() function is used for both creating and opening files and has the 
following prototype: 
HANDLE CreateFile(LPCSTR lpFileName, DWORD dwDesiredAccess, 
                  DWORD dwSharedMode, 
                  LPSECURITY_ATTRIBUTES 
                  lpSecurityAttributes, 
                  DWORD dwCreationDisposition, 
                  DWORD dwFlagsAndAttributes, 
                  HANDLE hTemplateFile) 
As you can see, this function takes quite a few parameters. These parameters are 
briefly described in the following list: 
lpFileName This parameter is the name of the file to open or create. 
dwDesiredAccess This parameter is the access the application requires to the 
file: read access, write access, or both. 
dwSharedMode This parameter describes what access is allowed by other 
processes while the returned handle remains open. 
lpSecurityAttributes This parameter describes the object access rights for 
the file if a new one is being created. It also describes whether the file handle 
is inheritable. 
dwCreationDisposition This flag affects whether to create a new file and what 
to do if a file of the same name already exists. A value of CREATE_ALWAYS always 
creates a new file, overwriting another file if it already exists. A value of 
CREATE_NEW creates a new file or causes the function to fail if a file with the 
same name exists. A value of OPEN_ALWAYS causes the function to open an 
existing file if one exists; otherwise, it creates a new one. A value of 
OPEN_EXISTING causes the function to fail if none exist, and a value of 
trUNCATE_EXISTING causes the function to fail if the file doesn't exist but 
truncates the file to 0 bytes if it does exist. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
678 
dwFlagsAndAttributes This parameter describes certain attributes of the file 
being created. Relevant values are described as they come up in the following 
sections. 
hTemplateFile This parameter provides a handle to a template file; its file 
attributes and extended attributes are used to establish the attributes of a 
new file being created. If an existing file is being opened, this parameter is 
ignored. 
You can see there are a lot of possibilities for determining how files are created or 
opened. 
File Squatting 
In the discussion on objects, you learned about object namespace squatting. It's 
applicable to files as well, if the CreateFile() function is used incorrectly. Sometimes 
it's possible to cause an application to act as if it has created a file when it has actually 
opened an existing file. This error causes several parameters to be ignored, thus 
potentially tricking the application into exposing sensitive data or allowing users to 
control data in a file they shouldn't be able to control. A file-squatting vulnerability 
occurs when these conditions are met: 
An application should create a new file, not open an existing file, but the 
dwCreationDisposition parameter is set incorrectly. Incorrect settings are any 
setting except CREATE_NEW. 
The location where the file is being created is writeable by potentially 
malicious users. 
If both conditions are met, a vulnerability exists in the application whereby attackers 
would be able to create a file of the same name first and give the file arbitrary security 
attributes, ignoring the ones that have been supplied. In addition, because this file 
squatting also causes the supplied file attributes to be ignored, it might be possible to 
make the application function incorrectly by creating a file with different attributes. 
For example, consider the following call: 
BOOL CreateWeeklyReport(PREPORT_DATA rData, LPCSTR filename) 
{ 
    HANDLE hFile; 
    hFile = CreateFile(filename, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 
        FILE_ATTRIBUTE_ARCHIVE, NULL); 
    if(hFile == INVALID_HANDLE_VALUE) 
        return FALSE; 
    ... write report data ... 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
679 
} 
This code is meant to mark the report it generates for archiving, presumably so that 
it can be backed up periodically. However, if attackers create a file with the same 
name before the application, this file attribute is ignored. Therefore, attackers can 
read potentially sensitive data that gets written to the report file and omit 
FILE_ATTRIBUTE_ARCHIVE from the file's attributes, resulting in the report not being 
backed up as intended. 
Note 
It may seem that the CREATE_ALWAYS parameter would prevent file squatting attacks 
because it will overwrite an existing file. However, if a file already exits, the 
CREATE_ALWAYS parameter will cause CreateFile() to retain the DACL and attributes of 
the overwritten file and ignore the DACL supplied in the security descriptor. 
Canonicalization 
Canonicalization is the process of turning a pathname from one of several different 
relative forms into its simplest absolute form. It was covered in depth in Chapter 8(? 
[????.]), "Strings and Metacharacters," but is discussed again here because it holds 
special significance in Windows. Generally, it's risky to use untrusted data to 
construct relative pathnames. Why? Because it gives attackers the opportunity to 
specify an absolute path, if they are able to control the initial part of the filename 
argument. A simple example of a vulnerable call is shown: 
char *ProfileDirectory = "c:\\profiles"; 
BOOL LoadProfile(LPCSTR UserName) 
{ 
    HANDLE hFile; 
    if(strstr(UserName, "..")) 
        die("invalid username: %s\n", UserName); 
    SetCurrentDirectory(ProfileDirectory); 
    hFile = CreateFile(UserName, GENERIC_READ, 0, NULL, 
        OPEN_EXISTING, 0, NULL); 
    if(hFile == INVALID_HANDLE_VALUE) 
        return FALSE; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
680 
    ... load profile data ... 
} 
When auditing code, it's important to train yourself to spot bad use of canonical 
pathnames, as in this example. The developer assumes that by setting the current 
working directory and ensuring that no directory traversal double-dot combinations 
exist, any file access can only be for a file in the specified profile directory. Of course, 
because UserName is given as the initial part of the path segment, attackers could 
simply select a username that's an absolute path and access any file outside the 
current directory. 
In addition, CreateFile() canonicalizes any directory traversal components before 
validating whether each path segment exists. So you can supply nonexistent paths in 
the filename argument as long as they are eliminated during canonicalization. For 
example, CreateFile() will open C:\blah.txt if you specify a filename such as 
C:\nonexistent\path\..\..\blah.txt; it doesn't matter that C:\nonexistant\path\ 
does not exist. This canonicalization issue might be relevant when a path is 
prepended to user input. Here's a modified version of the previous example that 
demonstrates this issue. 
char *ProfileDirectory = "c:\profiles"; 
BOOL LoadProfile(LPCSTR UserName) 
{ 
    HANDLE hFile; 
    char buf[MAX_PATH]; 
    if(strlen(UserName) > 
       MAX_PATH  strlen(ProfileDirectory)  12) 
        return FALSE; 
    _snprintf(buf, sizeof(buf), "%s\\prof_%s.txt", 
              ProfileDirectory, UserName); 
    hFile = CreateFile(buf, GENERIC_READ, 0, NULL, 
        OPEN_EXISTING, 0, NULL); 
    if(hFile == INVALID_HANDLE_VALUE) 
        return FALSE; 
    ... load profile data ... 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
681 
This example doesn't check for directory traversal, although it allows you to control 
only part of the filename. It makes no difference, however, because you can specify 
nonexistent path components. Therefore, you can still perform a directory traversal 
attack by using \..\..\..\test or another similar pathname. 
Filelike Objects 
Several other types of objects can be opened via CreateFile() and treated as regular 
files. They aren't files that appear in the file system hierarchy but objects that appear 
in the object namespace. These objects have a special filename format to indicate 
that they aren't regular files: 
\\host\object 
The host component is any host that can be reached from the target machine; the 
local host is indicated by using a period (.). The object component should be familiar 
if you've ever opened a file on a remote Windows share. In that case, the object is 
just the share name and fully qualified path to the file. However, the format of the 
object component actually depends on which type of object is being opened. 
CreateFile() can open several different types of objects: pipes, mailslots, volumes, 
and tape drives. 
Pipes and mailslots are IPC mechanisms that you explore more in Chapter 12(? 
[????.]), but for now, it's necessary to know how they can be opened as files. 
For these object types, the object component of the name uses the following format: 
type\name 
The type component is the class of object, such as pipe or mailslot. The name 
component is the name of the object. So you can open the stuff pipe on myserver by 
using the following string: 
\\myserver\pipe\stuff 
In Chapter 12(? [????.]), you see that Windows authentication and impersonation can 
make the capability to open one of these IPC mechanisms a vulnerability in and of 
itself because this capability gives attackers the opportunity to steal client privileges. 
Tape and volume accesses can also be achieved; however, a volume can't be read 
from and written to with the regular File API. So an incorrect open will likely become 
apparent to the application when it tries to perform operations on the file handle. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
682 
To access these objects, attackers must control the first segment of the pathname. 
Being able to achieve this control isn't common, but it happens from time to time. For 
instance, the example from the previous section would be able to specify some of 
these objects, which might afford attackers the opportunity to perform an 
impersonation-style attack. 
Device Files 
Device files are special entities that reside in the file hierarchy and allow a program to 
have access to virtual or physical devices. In UNIX, this access is typically handled by 
storing special device files in a common directory (usually /dev). In Windows, it's 
handled a bit differently. Device files in Windows don't have inode entries on the file 
system volume, as they do in UNIX; in fact, Windows devices don't exist on the file 
system at all! Instead, they're represented by file objects in the object namespace. 
The CreateFile() function checks when a file access is made to see whether a special 
device file is requested; if so, it returns a handle to the device object rather than a 
handle to a regular file. This process happens transparently to the application. The 
following special device names can be opened by applications: 
COM1-9 
LPT1-9 
CON 
CONIN$ 
CONOUT$ 
PRN 
AUX 
CLOCK$ 
NUL 
The CreateFile() function searches the filename argument for these devices by 
looking at the filename component and ignoring the pathname components. 
Therefore, a device name can be appended to any file path, and it opens a device 
rather than a regular file. This behavior is somewhat hard to combat in applications 
because it introduces unexpected attack vectors. Specifically, if part of the filename 
parameter is user supplied, a device can be accessed by using any of the listed 
filenames. 
Note 
There's an exception: Console devices are treated specially by CreateFile(), so 
CONIN$, CONOUT$, and CON can't be appended to arbitrary paths to access a console 
device. Any of the other listed devices, however, exhibit the described behavior. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
683 
Accessing devices in this way might cause an application to unexpectedly hang or 
read and write data to and from devices that it didn't intend to. Consider the following 
example: 
HANDLE OpenProfile(LPCSTR UserName) 
{ 
    HANDLE hFile; 
    char path[MAX_PATH]; 
    if(strstr(UserName, "..")) 
        die("Error! Username %s, contains illegal characters\n", 
            UserName); 
    _snprintf(path, sizeof(path), "%s\\profiles\\%s", 
              ConfigDir, UserName); 
    hFile = CreateFile(path, GENERIC_READ, 
FILE_SHARE_READ, 
                       NULL, OPEN_EXISTING, 0, NULL); 
    if(hFile == INVALID_HANDLE_VALUE) 
        die("opening file: %s\n", path); 
    return hFile; 
} 
Assume that UserName contains untrusted data. Although path traversal attacks have 
been taken into account, there is no provision for the username specifying a device 
file. 
Another point about reserved device names is that they can also have any file 
extension appended, and they are still considered a device. For example, the file 
c:\COM1.txt still opens the COM1 device. Therefore, any code that appends a file 
extension to a filename might still be vulnerable to attacks, resulting in the 
application unwittingly opening a device rather than a regular file. 
File Types 
No parameter can be passed to CreateFile() to ensure that the file being opened is a 
regular file, so you might be wondering how any call to CreateFile() can be secure 
from attack without a lot of messy string-matching code to test for device names. The 
answer is that several functions can be used to determine whether the file in question 
is a regular file. Specifically, application developers can use GetFileAttributes() and 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
684 
GetFileAttributesEx() to retrieve file attributes and GetFileType() to get the type of 
a file. 
In addition, you can do something in the CreateFile() call to prevent it from opening 
device files and special files: Use the Universal Naming Convention (UNC) form and 
prefix the filename with \\?\. Putting this sequence at the beginning of a filename has 
several effects on how CreateFile() parses the filename; essentially, it minimizes the 
amount of parsing performed on the filename, which causes it to skip certain checks, 
including whether the file is a DOS device or a special file. 
The caveat of the UNC form is that it changes the way the filename is handled and 
might create pathnames that are inaccessible via the traditional DOS-style path. This 
happens because the DOS naming convention is limited to 260 characters for a fully 
qualified path. However, NTFS supports a maximum path length of 32,767, but these 
names can be accessed only by using a UNC pathname provided to the Unicode 
version of the CreateFile() function. 
File Streams 
NTFS supports the notion of file streams, also known as alternate data streams 
(ADSs). A file stream is simply a named unit of data associated with a file. Each file 
is composed of one or more file streams. The default file stream is nameless, and any 
operations performed on a file are implicitly assumed to be dealing with the unnamed 
file stream, unless another file stream is specified. A fully qualified file stream name 
has the following format: 
filename:file stream name:file stream type 
You're no doubt already familiar with the format of filenames, so you can move on to 
file stream names. The file stream name has the same format as a filename (without 
the pathname component). It can contain nearly any character, including spaces. 
Finally, the file stream type member (which is often omitted) specifies a file stream 
attribute. Although several attributes exist, the only valid choice is $DATA. 
For code auditors, file streams can introduce vulnerabilities in certain contexts, 
particularly when filenames are being constructed based on user input, and those 
filenames are expected to be of a certain format and have a specific extension. For 
example, a Web application has a user profiles directory in the Web root where each 
user's profile is kept in a text file. The following code opens the user profiles directory: 
BOOL OpenUserProfile(LPCSTR UserName) 
{ 
    HANDLE hProfile; 
    char buf[MAX_PATH]; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 