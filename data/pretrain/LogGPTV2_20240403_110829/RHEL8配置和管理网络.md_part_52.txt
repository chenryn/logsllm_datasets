在创建命名映射时，您必须指定元素类型：
::: itemizedlist
-   对于匹配部分包含 IPv4 地址的映射的 `ipv4_addr`{.literal}，比如
    `192.0.2.1`{.literal}。
-   对于匹配部分包含 IPv6 地址的映射的 `ipv6_addr`{.literal}，比如
    `2001:db8:1::1`{.literal}。
-   对于匹配部分包含介质访问控制（MAC）地址的映射的
    `ether_addr`{.literal}，比如 `52:54:00:6b:66:42`{.literal}。
-   对于匹配部分包含互联网协议类型的映射的 `inet_proto`{.literal}，比如
    `tcp`{.literal}。
-   对于匹配部分包含互联网服务名称端口号的映射的
    `inet_service`{.literal}，比如 `ssh`{.literal} 或者 `22`{.literal}。
-   对于匹配部分包含数据包标记的映射的
    `mark`{.literal}。数据包标记可以是任意正 32 位整数值（`0`{.literal}
    到 `2147483647`{.literal}）。
-   对于匹配部分包含计数器值的映射的
    `counter`{.literal}。计数器值可以是任意正 64 位整数值。
-   对于部分匹配包含配额值的映射的 `quota`{.literal}。配额值可以是任意正
    64 位整数值。
:::
这个示例论述了如何根据源 IP
地址允许或丢弃传入的数据包。使用命名映射时，您只需要一条规则来配置这种情况，同时
IP
地址和操作会动态存储在映射中。此流程还描述了如何从映射中添加和删除条目。
::: orderedlist
**流程**
1.  创建表。例如，要创建一个名为 `example_table`{.literal}
    的表，用于处理 IPv4 数据包：
    ``` literallayout
    # nft add table ip example_table
    ```
2.  创建链。例如，要在 `example_table`{.literal} 中创建一个名为
    `example_chain`{.literal} 的链：
    ``` literallayout
    # nft add chain ip example_table example_chain { type filter hook input priority 0 \; }
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    要避免 shell 认为分号作为命令结尾，您必须用反斜杠转义分号。
    :::
3.  创建一个空的映射。例如，要为 IPv4 地址创建映射：
    ``` literallayout
    # nft add map ip example_table example_map { type ipv4_addr : verdict \; }
    ```
4.  创建使用该映射的规则。例如，以下命令为 `example_table`{.literal} 的
    `example_chain`{.literal} 中添加了一个规则，它被应用于
    `example_map`{.literal} 中定义的 IPv4 地址的操作：
    ``` literallayout
    # nft add rule example_table example_chain ip saddr vmap @example_map
    ```
5.  为 `example_map`{.literal}添加 IPv4 地址和对应操作：
    ``` literallayout
    # nft add element ip example_table example_map { 192.0.2.1 : accept, 192.0.2.2 : drop }
    ```
    这个示例定义了 IPv4 地址到操作的映射。根据以上规则，防火墙接受来自
    `192.0.2.1`{.literal} 的数据包并丢弃来自 `192.0.2.2`{.literal}
    的数据包。
6.  另外，还可添加另一个 IP 地址和 action 语句来增强映射：
    ``` literallayout
    # nft add element ip example_table example_map { 192.0.2.3 : accept }
    ```
7.  （可选）从映射中删除条目：
    ``` literallayout
    # nft delete element ip example_table example_map { 192.0.2.1 }
    ```
8.  另外，还可显示规则集：
    ``` literallayout
    # nft list ruleset
    table ip example_table {
      map example_map {
        type ipv4_addr : verdict
        elements = { 192.0.2.2 : drop, 192.0.2.3 : accept }
      }
      chain example_chain {
        type filter hook input priority filter; policy accept;
        ip saddr vmap @example_map
      }
    }
    ```
:::
::: itemizedlist
**其它资源**
-   有关验证映射的详情，请查看 `Maps`{.literal} man page 中的
    `nft(8)`{.literal} 部分。
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_configuring-and-managing-networking.html#configuring-port-forwarding-using-nftables_getting-started-with-nftables}使用 nftables 配置端口转发 {.title}
:::
端口转发可让管理员将发送到特定目的端口的数据包转发到不同的本地或者远程端口。
例如，如果您的 Web 服务器没有公共 IP
地址，您可以在防火墙上设置端口转发规则，该规则在防火墙的端口
`80`{.literal} 和 `443`{.literal} 上转发传入的数据包到 web
服务器。使用这个防火墙规则，互联网中的用户可以使用防火墙的 IP
或主机名访问网页服务器。
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#forwarding-incoming-packets-to-a-different-local-port_configuring-port-forwarding-using-nftables}将传入的数据包转发到不同的本地端口 {.title}
:::
这部分论述了如何在端口 `8022`{.literal} 中转发进入的 IPv4
数据包到本地系统的端口 `22`{.literal} 的示例。
::: orderedlist
**流程**
1.  使用 `ip`{.literal} 地址系列创建一个名为 `nat`{.literal} 的表：
    ``` literallayout
    # nft add table ip nat
    ```
2.  在表中添加 `prerouting`{.literal} 和 `postrouting`{.literal} 链：
    ``` literallayout
    # nft -- add chain ip nat prerouting { type nat hook prerouting priority -100 \; }
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    将 `--`{.literal} 选项传递给 `nft`{.literal} 命令，以避免 shell
    将负优先级值解析为 `nft`{.literal} 命令的选项。
    :::
3.  为 `prerouting`{.literal} 链添加一条规则，将端口 `8022`{.literal}
    中传入的数据包重新指向本地端口 `22`{.literal}：
    ``` literallayout
    # nft add rule ip nat prerouting tcp dport 8022 redirect to :22
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#forwarding-incoming-packets-on-a-specific-local-port-to-a-different-host_configuring-port-forwarding-using-nftables}将特定本地端口上传入的数据包转发到不同主机 {.title}
:::
您可以使用目标网络地址转换（DNAT）规则将本地端口上传入的数据包转发到远程主机。这可让互联网中的用户访问使用专用
IP 地址在主机上运行的服务。
这个步骤描述了如何在本地端口 `443`{.literal} 中转发传入的 IPv4
数据包到使用 `192.0.2.1`{.literal} IP 地址的远程系统中的同一端口号。
::: itemizedlist
**先决条件**
-   您以 `root`{.literal} 用户身份登录登陆到应该转发数据包的系统。
:::
::: orderedlist
**流程**
1.  使用 `ip`{.literal} 地址系列创建一个名为 `nat`{.literal} 的表：
    ``` literallayout
    # nft add table ip nat
    ```
2.  在表中添加 `prerouting`{.literal} 和 `postrouting`{.literal} 链：
    ``` literallayout
    # nft -- add chain ip nat prerouting { type nat hook prerouting priority -100 \; }
    # nft add chain ip nat postrouting { type nat hook postrouting priority 100 \; }
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    将 `--`{.literal} 选项传递给 `nft`{.literal} 命令，以避免 shell
    将负优先级值解析为 `nft`{.literal} 命令的选项。
    :::
3.  为 `prerouting`{.literal} 链添加一条规则，该规则将端口
    `443`{.literal} 中传入的数据包重新指向
    `192.0.2.1`{.literal}上的同一端口：
    ``` literallayout
    # nft add rule ip nat prerouting tcp dport 443 dnat to 192.0.2.1
    ```
4.  为 `postrouting`{.literal} 链添加一条规则伪装出站流量：
    ``` literallayout
    # nft add rule ip daddr 192.0.2.1 masquerade
    ```
5.  启用数据包转发：
    ``` literallayout
    # echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/95-IPv4-forwarding.conf
    # sysctl -p /etc/sysctl.d/95-IPv4-forwarding.conf
    ```
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_configuring-and-managing-networking.html#assembly_using-nftables-to-limit-the-amount-of-connections_getting-started-with-nftables}使用 nftables 来限制连接数量 {.title}
:::
您可以使用 `nftables`{.literal} 来限制连接数量或阻止建立给定连接量的 IP
地址，以防止它们使用过多的系统资源。
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#limiting-the-number-of-connections-using-nftables_assembly_using-nftables-to-limit-the-amount-of-connections}使用 nftables 限制连接数量 {.title}
:::
`ct count`{.literal} 实用程序中的 `nft`{.literal}
参数可让管理员限制连接数量。这个步骤描述了如何限制进入的连接的基本示例。
::: itemizedlist
**先决条件**
-   存在 `example_table`{.literal} 中的基础 `example_chain`{.literal}。
:::
::: orderedlist
**流程**
1.  添加一条规则，该规则只允许从 IPv4 地址同时连接到 SSH
    端口（22），并从同一 IP 拒绝所有后续连接：
    ``` literallayout
    # nft add rule ip example_table example_chain tcp dport ssh meter example_meter { ip saddr ct count over 2 } counter reject
    ```
2.  另外，还可以显示上一步中创建的 meter：
    ``` literallayout
    # nft list meter ip example_table example_meter
    table ip example_table {
      meter example_meter {
        type ipv4_addr
        size 65535
        elements = { 192.0.2.1 : ct count over 2 , 192.0.2.2 : ct count over 2  }
      }
    }
    ```
    `elements`{.literal}
    条目显示目前与该规则匹配的地址。在这个示例中，`elements`{.literal}
    列出了已连接到 SSH 端口的 IP
    地址。请注意，输出不会显示活跃连接的数量，或者连接是否被拒绝。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#blocking-ip-addresses-that-attempt-more-than-ten-new-incoming-tcp-connections-within-one-minute_assembly_using-nftables-to-limit-the-amount-of-connections}在一分钟内尝试超过十个进入的 TCP 连接的 IP 地址 {.title}
:::
`nftables`{.literal}
框架可让管理员动态更新设置。本节解释了如何使用这个功能临时阻止在一分钟内建立十个
IPv4 TCP 连接的主机。五分钟后，`nftables`{.literal}
会自动从拒绝列表中删除 IP 地址。
::: orderedlist
**流程**
1.  使用 `ip`{.literal} 地址系列创建 `filter`{.literal} 表：
    ``` literallayout
    # nft add table ip filter
    ```
2.  将 `input`{.literal} 链添加到 `filter`{.literal} 表：
    ``` literallayout
    # nft add chain ip filter input { type filter hook input priority 0 \; }
    ```
3.  在 `denylist`{.literal} 表中添加名为 `filter`{.literal} 的集合：
    ``` literallayout
    # nft add set ip filter denylist { type ipv4_addr \; flags dynamic, timeout \; timeout 5m \; }
    ```
    这个命令为 IPv4 地址创建动态设置。`timeout 5m`{.literal} 参数定义
    `nftables`{.literal} 在 5 分钟后自动删除条目。
4.  添加一条规则，将在一分钟内试图建立十个新的 TCP 连接的主机源 IP
    地址添加到 `denylist`{.literal} 集：
    ``` literallayout
    # nft add rule ip filter input ip protocol tcp ct state new, untracked limit rate over 10/minute add @denylist { ip saddr }
    ```
5.  添加一条规则，丢弃来自在 `denylist`{.literal} 集中列出的 IP
    地址的所有连接：
    ``` literallayout
    # nft add rule ip filter input ip saddr @denylist drop
    ```
:::
::: itemizedlist
**其它资源**
-   如需更多信息，请参阅在 [nftables
    中使用命名集](#getting-started-with-nftables_configuring-and-managing-networking.html#using-named-sets-in-nftables_using-sets-in-nftables-commands "在 nftables 中使用命名集"){.link}
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_configuring-and-managing-networking.html#debugging-nftables-rules_getting-started-with-nftables}调试 nftables 规则 {.title}
:::
`nftables`{.literal}