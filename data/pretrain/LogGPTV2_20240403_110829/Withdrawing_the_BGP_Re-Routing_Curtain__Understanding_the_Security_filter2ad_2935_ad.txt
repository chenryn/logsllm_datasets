performance of the Nyx Routing Around Congestion (RAC)
system [52] with active measurements. Using the open source
simulator from Smith et al. [53], we ﬁnd 98% routing success
(ability to steer an AS around a congested link) for the same
1,460 samples we measured in our previous experiment. We
perform an exact comparison between simulated results and
those measured actively. We ﬁnd that in practice these ASes
perform approximately 30% worse. We show these ﬁndings in
Figure 4c using the same metric from the Nyx paper for the
simulation and in practice comparison.
This apples-to-apples comparison illustrates that in most
cases return path steering functions in practice, but the extent
of that functionality is not necessarily as substantial as simu-
lations based purely on AS-relationship models [61] imply.
In Nyx simulation, CAIDA AS-Relationship models were
used to show that ASes have tens to hundreds of available
paths based on paths observed via advertisements. This is
signiﬁcantly larger than what we found in practice ( 2-3 unique
paths). This is due to the CAIDA AS-relationships dataset only
attempting to show connectivity, not policy. In other words,
an AS-to-AS link observed in BGP advertisements does not
indicate real-world willingness to send trafﬁc over such links.
While CAIDA’s data represents the best possible model for
simulation, it is clear that simulations relying on the routing in-
frastructure should be validated by active measurement. While
Anwar et al. [1] ﬁnd connectivity that CAIDA does not, we
ﬁnd that when considering only a single poisoning AS steering
a single remote AS, the poisoning AS can not achieve the full
spectrum of return paths shown by AS connectivity alone. We
also ﬁnd that a poisoning/steered AS pair in simulation often
had a longer original path length than was measured in the real
world. The simulator found no original paths where the length
was 3 AS hops. For the same sample set actively measured,
we found paths with an original path lengths of 3 hops in
165/1,460 successful steering cases.
Clearly, assumptions from the simulation of Nyx did not
match what was discovered in reality. First, as stated before,
inferred policies of Internet routes do not match what is found
in practice. Thus, both simulation of the inferred topology, and
passive measurement of all paths seen, cannot directly justify
individual policies that will actually be taken by a poisoning
AS, which may contribute to the 30% difference in success.
Second, Nyx did not factor in the effects of ASes that ﬁlter
poisons on the success of routing around congestion. While the
simulation allowed paths to propagate without ﬁltering, this is
not true in practice for certain cases, as we discuss in the next
Section. Third, Nyx did not limit the amount of new paths that
could be used to re-route during simulation, while in practice
this is restricted to 2.5 available alternate paths. Therefore,
the success from simulation will appear higher due to the lack
of this restriction.
2) Graph Theoretic Analysis of Return Path Diversity:
Here we analyze characteristics of the directed aclycic graph
formed by combining the original and alternate return paths
from the steered AS to the poisoning AS across all steering
experiments (1,888 instances). We call this the return path
graph.
One ﬁrst concern is AS-level path diversity of the return
path graph; how different are potential return paths are in terms
of the AS-level hops they contain? This is relevant because
security systems built on return path steering may seek to avoid
speciﬁc links (e.g., to route around congestion). In this case,
the availability of alternate return paths alone is not sufﬁcient.
The poisoning AS requires a return path that does not contain
the congested link. Here we quantify the diversity of return
paths by calculating the average betweenness for AS nodes
on the return path graph. For each AS in the graph, we count
how many paths the AS appears on, and divide by the number
of total return paths (original and all discovered alternates).
This yields a normalized betweenness for each AS between
0 (exclusive) and 1. The average betweenness for ASes on
the return path graph, which we call steering betweenness, is
designed to explore the diversity of ASes along the original
and alternate return paths. A steering betweenness approaching
1 implies that the set of possible return paths differ in AS hops
very little, while a number close to 0 implies that there are few
ASes found in multiple return paths.
Figure 5a shows steering betweenness for each poison-
ing/steered AS pair in our experiments. We see that on average,
a transited AS from the return path graph has a betweenness
centrality of roughly 0.667. This indicates that some ASes
appear on the majority of return paths. However, these paths
are not essentially identical.
Next, We also compute the unweighted and weighted
minimum cut of the return path graph. Here we seek to explore
the prevalence of bottlenecks, or links that can not be steered
around, in the set of return paths. This metric is especially
meaningful for systems like Nyx that use BGP poisoning to
maintain connectivity between a selected AS (the steered AS
in the context of this experiment) and a Nyx deployer (the
poisoning AS) in the presence of a DDoS attack, since a low
minimum cut reﬂects an unavoidable bottleneck for DDoS
to target. Figure 5b demonstrates that in just under half of
cases a single bottleneck exists, and for more than 90% of
steered/poisoning AS pairs, a bottleneck of at most two links
exists in this graph.
To explore where in the topology these bottlenecks occur,
we constructed different methods for weighting the graph, seen
in Figure 5c. First, we assign inﬁnite weight to all Tier-1 to
Tier-1 links to effectively remove them from consideration in
the minimum cut, as the real-world capacity of links between
large providers is, intuitively, much greater than links between
other ASes. Consequently, we expect they are more difﬁcult to
degrade. Tier-1 ASes are those ASes who have no providers,
and can therefore transit
trafﬁc to any other AS without
incurring monetary costs [41]. Interestingly, this did not change
the minimum cut for any graph, meaning that the bottlenecks
did not occur as a result of single unavoidable Tier-1 provider.
To account for the difference in link bandwidth that likely
exists between links serving larger ASes compared to smaller
ones, we also assigned weights based on CAIDA’s AS rank [9].
This rank orders ASes by their customer cone size. An AS’s
customer cone is the set of ASes that are reachable by customer
links from the AS [28]. While CAIDA’s AS rank is in de-
scending order (rank 1 having largest customer cone) we invert
the order for weighting purposes so that higher link weights
indicate larger endpoint AS customer cones. To capture link
capacity as a function of AS endpoint customer cone size,
we use both the average and maximum rank (of link AS
endpoints) as edge weights. The results demonstrate that within
the set of graphs with the same unweighted minimum cut there
exists widely different difﬁculties for attackers attempting to
disconnect an AS. In fact, a large plurality of steered/poisoning
AS pairs require a cut equivalent to one link between ASes
with an average AS rank double that of the average AS rank (or
two links between ASes of average rank). A majority require
a cut at least twice as large, implying that bottlenecks reside
on edges touching large ASes.
3) Return Path Diversity and Security Impact: For Nyx, our
ﬁndings agree that return path steering can reach alternative
paths. While our betweenness results show the same ASes
appear often on multiple steered paths, our reproduction of
Nyx shows that in more than 60% of cases there exists at
least one steered path that avoids an arbitrary AS from the
original return path. Therefore, Nyx may help the poisoning
AS when it is an impacted bystander or when the adversary is
targeting the Internet as a whole. Our min. cut measurements
reveal that bottlenecks occur in these steered paths, but it is
9
(a) Average Normalized Steering Betweenness
(b) Unweighted Min Cut
(c) Weighted Min Cuts
Fig. 5: Centrality measures of the importance of individual ASes in the directed acyclic graph formed by the original path and steered paths.
Figure 5a shows the average vertex betweenness for ASes in each of the graphs, normalized by the number of distinct paths between steered
and poisoning AS. Figure 5b and 5c show the unweighted and weighted min cuts of these graphs
unlikely they are on the weakest links. This means that an
adversary strategically targeting the poisoning AS could target
the min. cuts, but must work harder to disconnect a Nyx AS
over others. In a similar manner, operators can leverage our
insights to gain insight into the types of available paths to use
after a set of real-world link failures.
For censorship tools such as Waterfall [36], the success
shown for return path steering presents issues. These systems
now must consider attacks similar to Schuchard et al.’s RAD
attack [50]. However, our centrality results reveal a signiﬁ-
cant betweenness, demonstrating that while alternative return
paths exist, on average these paths transit a particular set of
ASes that can not be steered around. The min. cut results
further buttress this result, and indicate strategic locations
where censorship circumventors could place decoy routes to
prevent a routing-capable adversary from routing around them
with poisoning. Some work already approaches ﬁnding more
diverse paths [35], [6], [15], but these systems also do not
consider adversaries which can steer trafﬁc around decoys on
the return path. We suggest future studies examine poisoning
from routers in censoring nations (e.g. China or Iran).
C. Predicting Successful Steering
To understand which ASes can execute return path steering
most successfully, we constructed a set of statistical models.
These models 1) predict which ASes can successfully steer
trafﬁc with poisoning and 2) determine the most important
predictors for success of return path steering. Using the entire
1,460 sample dataset, we extract the following features from
the real world active measurement data: distance on original
path from poisoning AS to steered AS, poisoning AS’s next-
hop AS Rank, the steered next-hop AS rank, original path
average edge betweenness, steered AS Rank, and original
path average latency (over all hops). We selected these fea-
tures based on properties that can be easily determined using
standard traceroutes and by referencing open datasets such as
CAIDA’s AS Rank [9].
We ﬁrst split the data into a 70/30 train-test-split. Then
we scale the data by removing the mean and scaling to
unit variance. In total, we employ 4 models: 4-layer fully-
connected neural network, decision tree classiﬁer, random
forest ensemble classiﬁer, and support vector machine. After
ﬁtting the data, we test
the models with a 10-fold cross-
validation. Then, we plot Receiver Operating Characteristic
curves in Figure 6a, which show the success of a given AS
at return path steering. Speciﬁcally, the curves show the true
positive rate vs. false positive rate distribution across models.
Overall, the models perform strongly. At 80.80% accuracy,
the decision tree classiﬁer both trains and tests new samples
the quickest at < 1 second and is the most explainable.
Explainability of machine learning models is critical here,
since operators must inform their network administrators why
or why not their network is ﬁt for employing return path
steering. Using only the feature vectors and their distribution,
we now examine the features that express the most variance.
Figure 6b shows a Principal Component Analysis (PCA)
algorithm used to rank all features by their mean and variance.
The features with higher means indicate more important prop-
erties of the poisoning AS, steered AS, and pre-steering AS
path. We ﬁnd the most important predictor is the next-hop AS
rank of the poisoning AS. As the number of available links to
steer onto increases, the poisoning AS ﬁnds more unique paths.
We can see this by examining Figure 6b Feature Index 2. The
successful cases evolve from inﬂuential ASes as the poisoning
ASes’ next-hop provider or peer. By drilling down further
into the distribution, we see in Figure 6c unsuccessful cases
clustered around much smaller ASes. Note that path lengths
average around 4 hops on the current Internet. In cases where
a poisoning AS can not steer through the available paths at
its next-hop, other diverse AS choices should exist at the later
hops. Perhaps counter-intuitively, the least important predictor
is the AS rank of the steered AS. This indicates that the relative
inﬂuence, or size, of the steered AS does not affect a poisoning
ASes’ ability to steer them.
D. Security Ramiﬁcations and Takeaways
Our ﬁndings on the feasibility of steering return paths im-
pact all security systems mentioned in Section II-C, including
Nyx, LIFEGUARD, RAD, Waterfall of Liberty, and Feasible
Nyx [52], [23], [50], [36], [60]. Notably, the claims made by
systems that leverage BGP poisoning are more in line, but
not an exact match, with the behavior of the live Internet. Nyx
can successfully execute its re-routing defense using poisoning,
though with 30% less success than simulations show. In partic-
ular, poisoning-enabled victim ASes can defeat link-ﬂooding
10
(a) ROC curves for different models predicting
ASes that can execute return path steering
(b) Features analyzed with Principal Component
Analysis, where Index 2 is the Poisoning AS’s
Next-Hop AS Rank
(c) Distribution of the Poisoning AS Next-Hop AS
Rank vs the outcome of the return path steering
Fig. 6: Predicting successful return path steering with both public and experimentally-derived path-based features: 1) Distance on original
path from poisoning AS to steered AS, 2) poisoning AS’s next-hop AS Rank, 3) steered next-hop AS rank, 4) original path average edge
betweenness, 5) steered AS Rank, and 6) original path average latency (over all hops)
adversaries that target the victim’s provider links by executing
Nyx to re-route onto alternate, uncongested ASes. Besides
demonstrating that BGP poisoning does function in practice for
many cases, these experiments also help underscore the need
for real-world experiments when validating system design.
From the perspective of censorship, the feasibility of BGP
poisoning allows censors to leverage RAD [50] to thwart the
efforts of those wishing to avoid censorship with decoys or
advanced defenses like Waterfall [36]. However, as we saw
with Nyx, we do see that BGP poisoning functions less often
than simulations would lead us to believe in speciﬁc cases. In
the next section, we explore policies such as AS-level ﬁltering
which hamper the effectiveness of BGP poisoning, yet open
the door for systems such as Waterfall to function effectively.
VI. EXTENT AND IMPACT OF FILTERING
In this section we present experiments that uncover ASes
throughout the Internet which refuse to propagate BGP paths
with poisoned ASes prepended. We term this effect poison
ﬁltering. We present evidence for how often ASes conduct
poison ﬁltering, a behavior that impacts the success of BGP
poisoning. We explore how many ASes propagate poisoned
routes, how long of poisoned paths can be propagated, and
additionally conduct a rigorous graph-theoretical analysis of
the speciﬁc ASes by size inferred to be ﬁltering long poisoned
paths. We also attempt to reproduce recent work by Tran &
Kang et al. [60] who used a dataset gathered through passive
measurement (as opposed to active BGP measurements). In
this analysis, we yet again demonstrate that simulation or
passive measurement is not enough to empirically determine
the behavior of the Internet.
A. Filtering of Poisoned Advertisements
Systems which depend on return path steering need the
ability to avoid ASes of a variety of sizes. Since a poison is
essentially a lie about the AS level path, it is natural to ask
if ASes disregard lies about large ASes. This type of poison
ﬁltering would prevent systems using return path steering from
avoiding key ASes in the topology. In order to explore this, we
measured the ability to propagate poisoned routes containing
various sizes of poisoned ASes.
1) Experimental Design: First, we randomly sampled 5%
of ASes seen in BGP updates from January 2018 by their
degree of connectivity. In cases (like Cogent) where an AS
has a unique degree of connectivity, we sample just
that
AS. However, when many ASes share a degree (e.g., 3), we
sample 5% of those ASes uniform at random. With these
ASes, we proceeded to advertise poisoned paths with one
sampled AS prepended as the poison per advertisement. This
announcement would appear as ASP , ASF , ASP , where ASP
is our poisoning AS or measurement point, ASF is the AS
being tested for poison ﬁltering. Prior work has found that the
relative connectivity of an AS often determines its reaction
to anomalous Internet events [41], [8] due to larger ASes
necessarily enforcing certain policies based on the customers
it serves. For each iteration, we initially announce the normal,
non-poisoned preﬁx to all providers and peers connected to
the university’s AS. After waiting 40 minutes for BGPStream
to continuously pull from update collectors in batches, we
then fetch all observed updates from the prior 40 minutes,
though our updates actually propagated within 30 seconds
when observed from the actual collector based on update
timestamps. We then measured how many unique ASes were
observed advertising the original announcement. 3
With a baseline taken for the non-poisoned announcement