使包装箱里的所有素材都占据与箱里最大的那个素材同样的空间
spacing
gint
确定邻接素材之间的间隔
expand
gboolean
允许包装箱延展到填满剩余的空间。如果设置了homogtncus标志，这个标志的设
置情况将被忽略
Fi11
gboolean
允许每个特定的素材延展到填满剩余的空间
padding
gint
确定素材框的宽度
加入jaVa编程群：524621833
---
## Page 584
566
Linux程序设计
从现在起，我们将在所有的例子里使用包装箱，就从下面这个介绍更多按钮素材的程序开
始吧。
5.按钮
GTK+提供了四种按钮，它们是：简单的下压按钮、开关按钮、复选框和单选按钮
GNOME里的按钮与其他GUI里的按钮在基本功能方面都是样的。下压按钮用来实现一个
点击动作；开关按钮和复选框是带有一个关联状态的按钮一—开或关，选中或没有被选中；而单
选按钮构成了一组选项，每次只能有其中的一个按钮被选中。
我们用下面的例子介绍一下复选框和单选按钮的用法。
动手试试：更多选择
1）先定义素材，并用GSList创建一个空着的单选按钮组。如下所示：
 apnou
int main (int argc, char *argv(1)
Gtkwidget*app:
Gtkwidget *buttonl，*button2;
Gtkwidget *hbox;
GSList *group = NULL;
gnome_init (*example*,*0.1*, argc. argv);
app = gnone_app_new (*example*, *Music choices*):
2）我们给窗口设置一个边界，并创建出我们的包装箱。如下所示：
gtk_container_border_width (GTK_cONTAINER (app).20):
vbox1 = gtk_vbox_new (FALSE. 0);
vbox2 =gtk_vbox_new 1FALSE.
hbox =gtk_hbox_new (FALSE, 0);
01：
3）我们在第一个竖直包装箱里放上两个复选框，如下所示：
buttonl = gtk_check_button_new_with_label(*Orchestra°);
gtk_box_pack_start (GTK_BOX (vbox1),button1.FALSE, FALSE,0):
button2= gtk_cheek_button_new_with_label (*Conductor*);
gtk_box_pack_start (GTK_BOX (vbox1). button2,FALSE. FALSE. 0);
4）然后在第二个包装箱里放上四个单选按钮，把按钮逐个地添加到组里去。如下所示：
radio1 = gtk_radio_button_new_with_label (group,*Strings*);
gtk_box_pack_start {GTK_BOX (vbox2)， radioi，FALSE,FALSE,0);
group = gtk_radio_button_group (GTK_RADIO_BUTroN (radiol)):
rad102 a gtk_radio_button_new_with_1abel (gzoup,*wind*);
gtk_box_pack_start (GTK_BOx （vbox2),radio2,FALSE,FALSE.
group = gtk_radio_button_group {GTK_RADIo_BUrTCN (radio2)):
01：
加入jaVa编程群：524621833
---
## Page 585
第17章使用GTK+进行GNOME程序设计
567
gtk_box_pack_start IGTK_BOX (vbox2),_radio4.FALSE,FALSE,0};
5）最后，我们增加一个退出事件的处理器，并把包装箱放到一起。如下所示：
gtk_signal_connect (GTK_OBJECT （app).*delete_event",
GTK_SIGNAL_PUNC 1gtk_nain_quit),
NULL):
gtk_container_add (GTK_coNTAINER (hbox),vbox1);
gtk_container_add (GTK_CONrAINER (hbox), vbox2) ;
gnome_app_set_contents (GNOHE_APP (app), hbox);
gtk_widget_shou_a1l (app) ;
gtk_main() :
return 0;
包装箱的布局结构如图17-5所示。
复窗廿
hbox
vbox1
vbox2
按钮
单选按钮
按钮
单选按钮
单选按钮
单选按钮
图17-5
运行这个程序的时候，我们将看到一个如图17-6所示的窗口。
Orchestra
Stings
mConductor
~Wind
Brass
Percusslon
图17-6
加入jaVa编程群：524621833
---
## Page 586
568
Linux程序设计
操作注释：
我们可以毫不脸红地说这是个创造性的程序示例，它演示了新素材的用法和嵌套式包装
箱结构，通过它们我们创建了一个窗口布局。我们创建了两个复选框并把它们添加到第一个竖
直包装箱vbox1里。它们的当前状态可以通过调用gtk_toggle_get_state(buttonl）函数读取，该函
数返回个gboolean值，TRUE表示按钮被按下。
单选按纽们的创建工作与复选框的情况很相似。我们把单选按纽归到一个组里，在每创建
--个新按钮之后就调用gtk_radio_button_group函数剧新这个组。在第一个按钮被添加到这个组
里之前，它应该是空的（即它的值必须是NULL），因为这个组当时还不存在。
单选按钮是从复选框推导出来的，而复选框又是从开关按钮推导出来的、所以我们可以使
用同一组函数来读取和修改它们的状态，还可以使用同样的事件。与这些按钮有关的函数的完
整定义旷以在www.gtk.org站点上的GTK+参考文档里查到。
（1）输入框素材
输入框是-个用gtk_entry_new函数创建的单行文本素材，一般用在需要输入少量信息的情
况、下面这个简单的程序创建了一个登录窗Li，把输入框的可见性标志设置为不可见（FALSE），
然后在按下回车键产生activate信号的时候输出口令字城里的内容。
动手试试：GNOME风格的登录窗口
1)我们先定义enter_pressed回调函数，它会在每次按下回车键时被调用。如下所示：
#1nclude 
static void enter_pressed(Gtkwidget *button, gpointer data)
Gtkwidget *text_entry = data:
char *string_ gtk_entry_get_text (GTK_ENrRY (text_entry)):
g_print(string):
2）接下来我们定义变量、初始化GNOME、再创建一个水平包装箱。如下所示：
int main (int argc. char *argv[11
Gtkwidget*app:
Gtkwidget*text_entry;
Gtkwidget *label;
gchar *text;
gnome_init(*exarple*,*0.1°,argc.argv):
app = gnome_app_new (*exanple*,*entry widget*);
gtk_container_border_width 1GTK_coNTAINER (app).5):
hbox = gtk_hbox_new IFALse, 0);
3）现在创建一个标题签，调整好它的位置并把它放到包装箱里去。如下所示：
gtk_misc_set_alignment (GTK_MIsC （label).0.1.0）;
gtk_box_Pack_start {GTK_BOX (hbox), label. FALSE, FALSE, 0);
加入jaVa编程群：524621833
---
## Page 587
第17章使用GTK+进行GNOME程序设计
569
4）接下来，创建输人框并把它的可见性设置为不可见，这会使其中的内容显示为星号。如
下所示：
text_entry = gtk_entry_new():
gtk_entry_set_visibiiity (GTK_ENTRY (text_entry).FALSE);
gtx_box_pack_start (GTK_BOx (hbox). text_entry. PALSE, FALSE, 0);
5）最后，我们设置好信号处理器，再把包装箱放置到窗口里去。如下所示：
gtk_signal_connect (GTK_OBJECT （app)，*delete_event*,
GTK_SIGNAL_FUNC (gtk_main_quit),
NULL) :
gtk_signal_connect (GTK_oBJECT (text_entry),
GTK_SIGNAL_FUNC
'activate",
text_entry):
(enter_pressed),
gnone_app_set_contents( GNOME_APP (app). hbox):
gtk_nain ():
return 0:
编译并运行这个程序，我们将看到一个如图17-7所示的窗口。
entryaw
Password:
图17-7
（2）列表框和列表输人框
列表框素材可以容纳一个字符串列表，根据该列表框的配置情况，用户可以在其中选择一
个或者多个字符串。列表输人框是列表框的一种，它增加了一个下拉菜单，用户可以在这个菜
单里进行选择：同样地，根据该素材的配置情况、用户能够进行的选择可能会局限于列表中的
某几项（如图17-8所示）。
下面这个代码段演示了这两种素材的用法。完整的代码清单包括在Wrox出版社Web站点上
的源代码包里。
listbox = gtk_list_new (1:
gtk_list_set_selection_mode (GrK_LIST (listbox),
GTX_SELECTION_MULTIPLE) :
item = gtk_1ist_item_new_with_label (*Seethoven*);
gtk_container_add (GTK_cONTAINER (listbox).item);
item = gtk_list_item_new_with_label （*Brahms*):
gtk_container_add (GTK_CONTAINER (1istbox),item):
iten= gtk_list_item_new_with_label (*Bach*);
gtk_container_add （GTK_coWrAINER (listbox),item):
gtk_box_pack_start (GTK_BOx (vbox).listbox,FALSg.FALSE,0):
/* add items ad intintum */
label = gtk_label_new(*Choose an era:*):
gtk_misc_set_aligmment （GTK_MISC （1abel),0.1.0）;
gtk_box_pack_start (GTK_BOX (vbox)，1abel,FALSE, FALSE,0):
加入jaVa编程群：524621833
---
## Page 588
570
Linux程序设计
conbolist = NULL;
combolist = g_list_append [coebol1st, “Renaissance*1;
combolist = g_list_append (conbolist.
combolist = g_1ist_append [conbolist,
"Class1ral*);
"Baroque'}:
combolist = g_list_append [coebolist, "Inpressionism*!:
“Ronantic′);
:t)xau²oquo>x16=cquo
gtk_box_pack_start IGTK_BOx (vbox). combo, FALSE. FALSE, D):
gtk_combo_set_popdowm_strings (GTK_CoMBo(combo), combolist]:
c0g1
esodeooasooup
Beethoven
Brahas
Copland
Ger schwin
Haydn
Hozart
Rochmaninov
Choose an era:
Classical
图17-8
下面开始对GNOME的专用库进行介绍，它们包含着更为复杂的素材，这些素材会使程序员
的日子好过许多。如果单纯使用GTK+，通常会有大量的重复性代码；同时，即使是创建菜单、
工具条和对话框等普通的工作，GTK+里也提供了各种不同的方法。但这并不意味着GTK+的效
率低下：正是这种灵活性保证了它对计算机平台的不依赖性。我们将会看到，如果我们使用了
GNOME库，它将给我们的应用程序增添大量的附加功能，但因此而增加的编码工作却是很小的。
(3）菜单和工具条
GNOME使我们能够为GnomcApp素材创建出菜单和工具条来，而它们又都可以在窗口里被
最小化或从最小化状态还源。需要我们微的只是把必要的信息填写到一个数组里，然后再调用
gnome_app_create_menu或gnome_app_create_toolbar函数就可以了。
菜单或工具条里通常都会有不止一个的数据项，每一个这样的数据项其属性（类型、字符
串、回调函数指针、快捷键等等）都要在相应的菜单数组或工具条数组里用一个结构来进行定
义。这个结构的细节请查阅libgnomeui的API参考手册。在大多数情况下，菜单项都是非常简单
的，因此我们通常可以通过GNOME提供的一组宏定义来简化这个结构的创建工作。每一种常见
的菜单和工具条选项都有一个对应的宏定义。下面就是它们的简单介绍。
首先是一些用来创建顶层菜单的顶层宏定义，传递给它们的数组可以包含一个或者全部表
17-4中的GnomeUIlnfo结构。
加入jaVa编程群：524621833
---
## Page 589
第17章使用GTK+进行GNOME程序设计
571
表17-4
菜单
宏定义
File
CNONEUIINFO_MENU_FILE_TREE (tree)
Edit
GNONEUIINFO_ MENU_EDIT_TRE& (tree)
View
GNOMEUIINFO_XENU_VIEW_TRES (tree)
Settings
GNOMEUEINFO_MENU_SETTINGS_TREE (tree)
windows
GNOMEUIINFO_MENU_WINDOWS_TREE (tree)
Help
GNOMEUIINFO_XENU_GAME_TREE (tree)