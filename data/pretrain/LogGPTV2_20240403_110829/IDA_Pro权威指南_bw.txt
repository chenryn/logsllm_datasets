 在一个示例插件中的用法。
代码清单 17-3 choose2
 函数的用法
#include   
//The sample data to be displayed  
int data[] = {0xdeafbeef, 0xcafebabe, 0xfeedface, 0};  
//The width of each column  
int widths[] = {16, 16, 16};  
//The headers for each column  
char *headers[] = {"Decimal", "Hexadecimal", "Octal"};  
//The format strings for each column  
char *formats[] = {"%d", "0x%x", "0%o"};  
//this function expects obj to point to a zero terminated array  
//of non-zero integers.  
ulong idaapi idabook_sizer(void *obj) {  
   int *p = (int*)obj;  
   int count = 0;  
   while (*p++) count++;  
   return count;  
}  
/*  
 * obj In this function obj is expected to point to an array of integers  
 * n indicates which line (1..n) of the display is being formatted.  
 *   if n is zero, the header line is being requested.  
 * cells is a pointer to an array of character pointers. This array  
 *       contains one pointer for each column in the chooser.  The output  
 *       for each column should not exceed MAXSTR (1024) characters.*/  
void idaapi idabook_getline_2(void *obj, ulong n, char* const *cells) {  
   int *p = (int*)obj;  
   if (n == 0) {  
      for (int i = 0; i  3; i++) {  
         qstrncpy(cells[i], headers[i], widths[i]);  
      }  
   }  
   else {  
      for (int i = 0; i  3; i++) {  
         qsnprintf(cells[i], widths[i], formats[i], p[n - 1]);  
      }  
   }  
}  
void run(int arg) {  
   int choice = choose2(data, 3, widths, idabook_sizer, idabook_getline_2,  
                        "Idabook Choose2");  
   msg("The choice was %d\n", choice);  
}
使用代码清单 17-3 中的代码生成的多列“选择器”对话框如图 17-5 所示。
图17-5 choose2
 对话框示例
还可以通过 choose
 和choose2
 函数实现更加复杂的用法。每个函数都可以创建模式对话框1
 和非模式对话框，每个函数都能够生成允许选择多个项目的对话框。而且，这两个函数还接受其他几个参数，你能得知在对话框中发生的各种事件。如果使用这些函数创建非模式对话框，你将得到一个新的标签式窗口，它的标签将添加到其他 IDA 显示窗口（如 Imports窗口）的标签旁边。实际上，IDA 的Imports窗口使用choose2
 界面实现。有关 choose
 和choose2
 功能的更多信息，请参阅kernwin.hpp文件。
1. 你必须关闭模式对话框，才能继续与该对话框的父应用程序交互。“打开文件”和“保存文件”对话框就是典型的模式对话框。通常，在继续运行之前，如果应用程序需要用户提供信息，就会用到模式对话框。另一方面，非模式或无模式对话框可让用户在打开对话框的同时继续与父应用程序交互。
17.6.2 使用SDK创建自定义表单
SDK 还提供了 AskUsingForm_c
 函数，用于创建更加复杂的用户界面元素。这个函数的原型如下所示：
int AskUsingForm_c(const char *form,...);
这个函数看似非常简单，却是 SDK 中最为复杂的用户界面函数之一。这种复杂性源于 form
 参数，它用于指定自定义对话框中各种用户界面元素的布局。form
 参数本质上是一个描述各种输入元素布局的格式字符串，所以 AskUsingForm_c
 与printf
 类似。printf
 格式字符串利用被格式化数据替代的输出格式符，而 AskUsingForm_c
 格式字符串则由输出说明符和表单字段说明符组成，在显示表单时，后者由输入元素实例替代。与 printf
 相比，AskUsingForm_c
 使用一组截然不同的输出字段说明符。kernwin.hpp及说明AskUsingForm_c
 用法的所有文档都详细介绍了这些说明符。表单字段说明符的基本格式如下所示：
〈#hint text#label:type:width:swidth:@hlp[]〉
下面介绍表单字段说明符中的每一个组件。
#hint text#
 。这个元素可选。如果选择这个元素，当把光标悬停在相关输入字段上面时，提示文本（不包括#字符）将以工具提示的形式显示。
label
 。作为标签在相关输入字段左侧显示的静态文本。对于按钮字段，它是按钮文本。
type
 。一个字符，说明被指定的表单字段的类型。后面将介绍表单字段类型。
width
 。相关输入字段接受的最大输入字符数。对于按钮字段，这个字段指定一个整数按钮识别码，用于区分不同的按钮。
swidth
 。输入字段的显示宽度。
@hlp[]
 。在 kernwin.hpp文件中，这个字段被描述为“IDA.HLP 文件提供的帮助窗口的数量”。由于这个文件的内容由Hex-Rays 指定，因此，绝大部分情况下，这个字段都没有多大用处。我们用一个冒号代替这个字段，表示忽略它。
在运行时实现对话框时将生成哪些类型的输入字段，取决于 type
 字段所使用的字符。每种类型的表单字段都需要 AskUsingForm_c
 参数列表的可变参数部分中的一个参数。表单字段类型说明符及其相关的参数类型如下所示（摘自 kernwin.hpp文件）。
  Input field types                       va_list parameter
  -----------------                       -----------------
  A - ascii string                        char* at least MAXSTR size
  S - segment                             sel_t*
  N - hex number, C notation              uval_t*
  n - signed hex number, C notation       sval_t*
  L - default base (usually hex) number,  ulonglong*
      C notation
  l - default base (usually hex) number,  longlong*
      signed C notation
  M - hex number, no "0x" prefix          uval_t*
  D - decimal number                      sval_t*
  O - octal number, C notation            sval_t*
  Y - binary number, "0b" prefix          sval_t*
  H - char value, C notation              sval_t*
  $ - address                             ea_t*
  I - ident                               char* at least MAXNAMELEN size
  B - button                              formcb_t button callback function
  K - color button                        bgcolor_t*
  C - checkbox                            ushort* bit mask of checked boxes
  R - radiobutton                         ushort* number of selected radiobutton
所有数字字段将用户提交的输入解释成一个 IDC 表达式，当用户单击对话框的 OK按钮时，IDA 将解析这个表达式并估算它的值。所有字段都需要一个用于输入和输出的指针参数。第一次生成表单时，所有表单字段的初值通过取消相关指针的引用获得。返回后，用户提交的表单字段值被写入到相关内存位置。与按钮（B）字段关联的指针参数是在按下该按钮时被调用的函数的地址。formcb_t
 函数的定义如下：
// callback for buttons  
typedef void (idaapi *formcb_t)(TView *fields[],int code);
这个按钮回调函数的 code
 参数表示与被单击的按钮关联的代码（宽度）值。通过一个switch
 语句测试这段代码，你可以使用一个函数处理许多不同的按钮。
指定单选按钮和复选框的语法与其他类型的表单字段的格式略有不同。这些字段使用的格式如下所示：
要对单选按钮和复选框分组，可以按顺序列出它们的说明符，并使用下面的特殊格式（注意末尾的另一个>）表示列表的结尾部分。
#item hint#label:type
你可以将一个单选按钮（或复选框）组用框框住，以突出显示。在指定组中的第一个元素时，你可以通过一个特殊的格式为框提供标题，如下所示：
#item hint#title#box hint#label:type
如果想要一个框标题，但不需要任何提示，可以省略提示，最终的格式说明符如下所示：
现在看一下使用 AskUsingForm_c
 创建对话框的一个例子。我们在这整个例子中使用的对话框如图17-6 所示。
图17-6 AskUsingForm_c示例对话框
用于创建 AskUsingForm_c
 对话框的格式字符串由许多代码行组成，它们指定该对话框的每一个元素。除了表单字段说明符以外，格式字符串可能还包含在生成的对话框中逐字显示的静态文本。此外，格式字符串还包含一个对话框标题（后面必须带两个换行符）、一个或几个行为指令（如 STARTITEM ，它指定对话框第一次显示时最初处于活动状态的表单字段的索引）。用于创建图17-6所示对话框的格式字符串如下所示：
char *dialog =  
 "STARTITEM 0\n"          //The first item gets the input focus  
 "This is the title\n\n"  //followed by 2 new lines  
 "This is static text\n"  
 "&ltString:A:32:32::>\n"   //An ASCII input field, need char[MAXSTR]  
 "&ltDecimal:D:10:10::>\n"  //A decimal input field, sval_t*  
 "&lt#No leading 0x#Hex:M:8:10::>\n"  //A Hex input field with hint, uval_t*  
 "&ltButton:B::::>\n"                 //A button field with no code, formcb_t  
 "&lt##Radio Buttons##Radio 1:R>\n"   //A radio button with box title  
 "&ltRadio 2:R>>\n"                   //Last radio button in group  
                                    //ushort* number of selected radio  