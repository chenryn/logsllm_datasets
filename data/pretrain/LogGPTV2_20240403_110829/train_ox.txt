.sh files
/dev/* \(em device files
.sh notes
.ss authors and copyright conditions
look at the header of the manual page source for the author(s) and copyright
conditions.
note that these can be different from page to page!
.sh see also
.br mknod (1),
.br mknod (2),
.br standards (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/finite.3
.\" copyright (c) 2014 red hat, inc. all rights reserved.
.\" written by david howells (PI:EMAIL)
.\"
.\" %%%license_start(gplv2+_sw_onepara)
.\" this program is free software; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license
.\" as published by the free software foundation; either version
.\" 2 of the license, or (at your option) any later version.
.\" %%%license_end
.\"
.th user-session-keyring 7 2020-08-13 linux "linux programmer's manual"
.sh name
user-session-keyring \- per-user default session keyring
.sh description
the user session keyring is a keyring used to anchor keys on behalf of a user.
each uid the kernel deals with has its own user session keyring that
is shared by all processes with that uid.
the user session keyring has a name (description) of the form
.i _uid_ses.
where
.i 
is the user id of the corresponding user.
.pp
the user session keyring is associated with the record that
the kernel maintains for the uid.
it comes into existence upon the first attempt to access either the
user session keyring, the
.br user\-keyring (7),
or the
.br session\-keyring (7).
.\" davis howells: the user and user-session keyrings are managed as a pair.
the keyring remains pinned in existence so long as there are processes
running with that real uid or files opened by those processes remain open.
(the keyring can also be pinned indefinitely by linking it
into another keyring.)
.pp
the user session keyring is created on demand when a thread requests it
or when a thread asks for its
.br session\-keyring (7)
and that keyring doesn't exist.
in the latter case, a user session keyring will be created and,
if the session keyring wasn't to be created,
the user session keyring will be set as the process's actual session keyring.
.pp
the user session keyring is searched by
.br request_key (2)
if the actual session keyring does not exist and is ignored otherwise.
.pp
a special serial number value,
.br key_spec_user_session_keyring ,
is defined
that can be used in lieu of the actual serial number of
the calling process's user session keyring.
.pp
from the
.br keyctl (1)
utility, '\fb@us\fp' can be used instead of a numeric key id in
much the same way.
.pp
user session keyrings are independent of
.br clone (2),
.br fork (2),
.br vfork (2),
.br execve (2),
and
.br _exit (2)
excepting that the keyring is destroyed when the uid record is destroyed
when the last process pinning it exits.
.pp
if a user session keyring does not exist when it is accessed,
it will be created.
.pp
rather than relying on the user session keyring,
it is strongly recommended\(emespecially if the process
is running as root\(emthat a
.br session\-keyring (7)
be set explicitly, for example by
.br pam_keyinit (8).
.sh notes
the user session keyring was added to support situations where
a process doesn't have a session keyring,
perhaps because it was created via a pathway that didn't involve pam
(e.g., perhaps it was a daemon started by
.br inetd (8)).
in such a scenario, the user session keyring acts as a substitute for the
.br session\-keyring (7).
.sh see also
.ad l
.nh
.br keyctl (1),
.br keyctl (3),
.br keyrings (7),
.br persistent\-keyring (7),
.br process\-keyring (7),
.br session\-keyring (7),
.br thread\-keyring (7),
.br user\-keyring (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/gethostbyname.3
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   dinkumware c library reference http://www.dinkumware.com/
.\"   opengroup's single unix specification
.\"      http://www.unix-systems.org/online.html
.\"   iso/iec 9899:1999
.\"
.th mbrtowc 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
mbrtowc \- convert a multibyte sequence to a wide character
.sh synopsis
.nf
.b #include 
.pp
.bi "size_t mbrtowc(wchar_t *restrict " pwc ", const char *restrict " s \
", size_t " n ,
.bi "               mbstate_t *restrict " ps );
.fi
.sh description
the main case for this function is when
.ir s
is not null and
.i pwc
is
not null.
in this case, the
.br mbrtowc ()
function inspects at most
.i n
bytes of the multibyte string starting at
.ir s ,
extracts the next complete
multibyte character, converts it to a wide character and stores it at
.ir *pwc .
it updates the shift state
.ir *ps .
if the converted wide
character is not l\(aq\e0\(aq (the null wide character),
it returns the number of bytes that were consumed
from
.ir s .
if the converted wide character is l\(aq\e0\(aq, it resets the shift
state
.i *ps
to the initial state and returns 0.
.pp
if the
.ir n
bytes starting at
.i s
do not contain a complete multibyte
character,
.br mbrtowc ()
returns
.ir "(size_t)\ \-2" .
this can happen even if
.i n
>=
.ir mb_cur_max ,
if the multibyte string contains redundant shift
sequences.
.pp
if the multibyte string starting at
.i s
contains an invalid multibyte
sequence before the next complete character,
.br mbrtowc ()
returns
.ir "(size_t)\ \-1"
and sets
.i errno
to
.br eilseq .
in this case,
the effects on
.i *ps
are undefined.
.pp
a different case is when
.ir s
is not null but
.i pwc
is null.
in this case, the
.br mbrtowc ()
function behaves as above, except that it does not
store the converted wide character in memory.
.pp
a third case is when
.i s
is null.
in this case,
.ir pwc
and
.i n
are
ignored.
if the conversion state represented by
.i *ps
denotes an
incomplete multibyte character conversion, the
.br mbrtowc ()
function
returns
.ir "(size_t)\ \-1" ,
sets
.i errno
to
.br eilseq ,
and
leaves
.i *ps
in an undefined state.
otherwise, the
.br mbrtowc ()
function
puts
.i *ps
in the initial state and returns 0.
.pp
in all of the above cases, if
.i ps
is null, a static anonymous
state known only to the
.br mbrtowc ()
function is used instead.
otherwise,
.ir *ps
must be a valid
.i mbstate_t
object.
an
.ir mbstate_t
object
.i a
can be initialized to the initial state
by zeroing it, for example using
.pp
.in +4n
.ex
memset(&a, 0, sizeof(a));
.ee
.in
.sh return value
the
.br mbrtowc ()
function returns the number of bytes parsed from the
multibyte sequence starting at
.ir s ,
if a non-l\(aq\e0\(aq wide character
was recognized.
it returns 0, if a l\(aq\e0\(aq wide character was recognized.
it returns
.i (size_t)\ \-1
and sets
.i errno
to
.br eilseq ,
if an invalid multibyte sequence was
encountered.
it returns
.i "(size_t)\ \-2"
if it couldn't parse a complete multibyte
character, meaning that
.i n
should be increased.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br mbrtowc ()
t}	thread safety	mt-unsafe race:mbrtowc/!ps
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c99.
.sh notes
the behavior of
.br mbrtowc ()
depends on the
.b lc_ctype
category of the
current locale.
.sh see also
.br mbsinit (3),
.br mbsrtowcs (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/err.3
.so man3/slist.3
.\" copyright (c) 1992 drew eckhardt (PI:EMAIL), march 28, 1992
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified by michael haardt (PI:EMAIL)
.\" modified 1993-07-23 by rik faith (PI:EMAIL)
.\" modified 1994-08-21 by michael chastain (PI:EMAIL):
.\"   fixed necessary '#include' lines.
.\" modified 1995-04-15 by michael chastain (PI:EMAIL):
.\"   added reference to adjtimex.
.\" removed some nonsense lines pointed out by urs thuermann,
.\"   (PI:EMAIL), aeb, 950722.
.\" modified 1997-01-14 by austin donnelly (PI:EMAIL):
.\"   added return values section, and bit on efault
.\" added clarification on timezone, aeb, 971210.
.\" removed "#include ", aeb, 010316.
.\" modified, 2004-05-27 by michael kerrisk 
.\"   added notes on capability requirement.
.\"
.th gettimeofday 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
gettimeofday, settimeofday \- get / set time
.sh synopsis
.nf
.b #include 
.pp
.bi "int gettimeofday(struct timeval *restrict " tv ,
.bi "                 struct timezone *restrict " tz );
.bi "int settimeofday(const struct timeval *" tv ,
.bi "                 const struct timezone *" tz );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br settimeofday ():
.nf
    since glibc 2.19:
        _default_source
    glibc 2.19 and earlier:
        _bsd_source
.fi
.sh description
the functions
.br gettimeofday ()
and
.br settimeofday ()
can get and set the time as well as a timezone.
.pp
the
.i tv
argument is a
.i struct timeval
(as specified in
.ir  ):
.pp
.in +4n
.ex
struct timeval {
    time_t      tv_sec;     /* seconds */
    suseconds_t tv_usec;    /* microseconds */
};
.ee
.in
.pp
and gives the number of seconds and microseconds since the epoch (see
.br time (2)).
.pp
the
.i tz
argument is a
.ir "struct timezone" :
.pp
.in +4n
.ex
struct timezone {
    int tz_minuteswest;     /* minutes west of greenwich */
    int tz_dsttime;         /* type of dst correction */
};
.ee
.in
.pp
if either
.i tv
or
.i tz
is null, the corresponding structure is not set or returned.
.\" fixme . the compilation warning looks to be going away in 2.17
.\" see glibc commit 4b7634a5e03b0da6f8875de9d3f74c1cf6f2a6e8
(however, compilation warnings will result if
.i tv
is null.)
.\" the following is covered under eperm below:
.\" .pp
.\" only the superuser may use
.\" .br settimeofday ().
.pp
the use of the
.i timezone
structure is obsolete; the
.i tz
argument should normally be specified as null.
(see notes below.)
.pp
under linux, there are some peculiar "warp clock" semantics associated
with the
.br settimeofday ()
system call if on the very first call (after booting)
that has a non-null
.i tz
argument, the
.i tv
argument is null and the
.i tz_minuteswest
field is nonzero.
(the
.i tz_dsttime
field should be zero for this case.)
in such a case it is assumed that the cmos clock
is on local time, and that it has to be incremented by this amount
to get utc system time.
no doubt it is a bad idea to use this feature.
.sh return value
.br gettimeofday ()
and
.br settimeofday ()
return 0 for success.
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b efault
one of
.i tv
or
.i tz
pointed outside the accessible address space.
.tp
.b einval
.rb ( settimeofday ()):
.i timezone
is invalid.
.tp
.b einval
.rb ( settimeofday ()):
.i tv.tv_sec
is negative or
.i tv.tv_usec
is outside the range [0..999,999].
.tp
.br einval " (since linux 4.3)"
.\" commit e1d7ba8735551ed79c7a0463a042353574b96da3
.rb ( settimeofday ()):
an attempt was made to set the time to a value less than
the current value of the
.b clock_monotonic
clock (see
.br clock_gettime (2)).
.tp
.b eperm
the calling process has insufficient privilege to call
.br settimeofday ();
under linux the
.b cap_sys_time
capability is required.
.sh conforming to
svr4, 4.3bsd.
posix.1-2001 describes
.br gettimeofday ()
but not
.br settimeofday ().
posix.1-2008 marks
.br gettimeofday ()
as obsolete, recommending the use of
.br clock_gettime (2)
instead.
.sh notes
the time returned by
.br gettimeofday ()
.i is
affected by discontinuous jumps in the system time
(e.g., if the system administrator manually changes the system time).