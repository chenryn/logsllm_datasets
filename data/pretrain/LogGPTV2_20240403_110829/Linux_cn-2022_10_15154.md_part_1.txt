---
author: Krishna Mohan Koyya
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2931
date: '2022-10-19 12:44:58'
editorchoice: false
excerpt: 微服务遵循领域驱动设计（DDD），与开发平台无关。Python 微服务也不例外。Python3 的面向对象特性使得按照 DDD 对服务进行建模变得更加容易。
fromurl: https://www.opensourceforu.com/2022/09/python-microservices-using-flask-on-kubernetes/
id: 15154
islctt: true
largepic: /data/attachment/album/202210/19/124429nmw0xmfz3x3mrrf2.jpg
permalink: /article-15154-1.html
pic: /data/attachment/album/202210/19/124429nmw0xmfz3x3mrrf2.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 微服务遵循领域驱动设计（DDD），与开发平台无关。Python 微服务也不例外。Python3 的面向对象特性使得按照 DDD 对服务进行建模变得更加容易。
tags:
- 微服务
- Python
- Flask
thumb: false
title: 在 Kubernetes 上使用 Flask 搭建 Python 微服务
titlepic: true
translator: MjSeven
updated: '2022-10-19 12:44:58'
---
![](/data/attachment/album/202210/19/124429nmw0xmfz3x3mrrf2.jpg)
*微服务遵循领域驱动设计（DDD），与开发平台无关。Python 微服务也不例外。Python3 的面向对象特性使得按照 DDD 对服务进行建模变得更加容易。本系列的第 10 部分演示了如何将用户管理系统的查找服务作为 Python 微服务部署在 Kubernetes 上。*
微服务架构的强大之处在于它的多语言性。企业将其功能分解为一组微服务，每个团队自由选择一个平台。
我们的用户管理系统已经分解为四个微服务，分别是添加、查找、搜索和日志服务。添加服务在 Java 平台上开发并部署在 Kubernetes 集群上，以实现弹性和可扩展性。这并不意味着其余的服务也要使用 Java 开发，我们可以自由选择适合个人服务的平台。
让我们选择 Python 作为开发查找服务的平台。查找服务的模型已经设计好了（参考 2022 年 3 月份的文章），我们只需要将这个模型转换为代码和配置。
### Pythonic 方法
Python 是一种通用编程语言，已经存在了大约 30 年。早期，它是自动化脚本的首选。然而，随着 Django 和 Flask 等框架的出现，它的受欢迎程度越来越高，现在各种领域中都在应用它，如企业应用程序开发。数据科学和机器学习进一步推动了它的发展，Python 现在是三大编程语言之一。
许多人将 Python 的成功归功于它容易编码。这只是一部分原因。只要你的目标是开发小型脚本，Python 就像一个玩具，你会非常喜欢它。然而，当你进入严肃的大规模应用程序开发领域时，你将不得不处理大量的 `if` 和 `else`，Python 变得与任何其他平台一样好或一样坏。例如，采用一种面向对象的方法！许多 Python 开发人员甚至可能没意识到 Python 支持类、继承等功能。Python 确实支持成熟的面向对象开发，但是有它自己的方式 -- Pythonic！让我们探索一下！
### 领域模型
`AddService` 通过将数据保存到一个 MySQL 数据库中来将用户添加到系统中。`FindService` 的目标是提供一个 REST API 按用户名查找用户。域模型如图 1 所示。它主要由一些值对象组成，如 `User` 实体的`Name`、`PhoneNumber` 以及 `UserRepository`。
![图 1: 查找服务的域模型](/data/attachment/album/202210/19/124459ozaec7k784oqk6c5.png)
让我们从 `Name` 开始。由于它是一个值对象，因此必须在创建时进行验证，并且必须保持不可变。基本结构如所示：
```
class Name:
    value: str
    def __post_init__(self):
        if self.value is None or len(self.value.strip())  32:
            raise ValueError("Invalid Name")
```
如你所见，`Name` 包含一个字符串类型的值。作为后期初始化的一部分，我们会验证它。
Python 3.7 提供了 `@dataclass` 装饰器，它提供了许多开箱即用的数据承载类的功能，如构造函数、比较运算符等。如下是装饰后的 `Name` 类：
```
from dataclasses import dataclass
@dataclass
class Name:
    value: str
    def __post_init__(self):
        if self.value is None or len(self.value.strip())  32:
            raise ValueError("Invalid Name")
```
以下代码可以创建一个 `Name` 对象：
```
name = Name("Krishna")
```
`value` 属性可以按照如下方式读取或写入：
```
name.value = "Mohan"
print(name.value)
```
可以很容易地与另一个 `Name` 对象比较，如下所示：
```
other = Name("Mohan")
if name == other:
    print("same")
```
如你所见，对象比较的是值而不是引用。这一切都是开箱即用的。我们还可以通过冻结对象使对象不可变。这是 `Name` 值对象的最终版本：
```
from dataclasses import dataclass
@dataclass(frozen=True)
class Name:
    value: str
    def __post_init__(self):
        if self.value is None or len(self.value.strip())  32:
            raise ValueError("Invalid Name")
```
`PhoneNumber` 也遵循类似的方法，因为它也是一个值对象：
```
@dataclass(frozen=True)
class PhoneNumber:
    value: int
    def __post_init__(self):
        if self.value  Name:
    return self._name
@property
def phone(self) -> PhoneNumber:
    return self._phone
@property
def since(self) -> datetime.datetime:
    return self._since
```
`phone` 字段的 setter 可以使用 `@.setter` 来装饰：
```
@phone.setter
def phone(self, phone: PhoneNumber) -> None:
    if phone is None:
        raise ValueError("Invalid phone")
    self._phone = phone
```
通过重写 `__str__()` 函数，也可以为 `User` 提供一个简单的打印方法：
```
def __str__(self):
    return self.name.value + " [" + str(self.phone.value) + "] since " + str(self.since)
```
这样，域模型的实体和值对象就准备好了。创建异常类如下所示：
```
class UserNotFoundException(Exception):
    pass
```
域模型现在只剩下 `UserRepository` 了。Python 提供了一个名为 `abc` 的有用模块来创建抽象方法和抽象类。因为 `UserRepository` 只是一个接口，所以我们可以使用 `abc` 模块。
任何继承自 `abc.ABC` 的类都将变为抽象类，任何带有 `@abc.abstractmethod` 装饰器的函数都会变为一个抽象函数。下面是 `UserRepository` 的结构：
```
from abc import ABC, abstractmethod
class UserRepository(ABC):
    @abstractmethod
    def fetch(self, name:Name) -> User:
        pass
```
`UserRepository` 遵循仓储模式。换句话说，它在 `User` 实体上提供适当的 CRUD 操作，而不会暴露底层数据存储语义。在本例中，我们只需要 `fetch()` 操作，因为 `FindService` 只查找用户。
因为 `UserRepository` 是一个抽象类，我们不能从抽象类创建实例对象。创建对象必须依赖于一个具体类实现这个抽象类。数据层 `UserRepositoryImpl` 提供了 `UserRepository` 的具体实现：
```
class UserRepositoryImpl(UserRepository):
    def fetch(self, name:Name) -> User:
        pass
```
由于 `AddService` 将用户数据存储在一个 MySQL 数据库中，因此 `UserRepositoryImpl` 也必须连接到相同的数据库去检索数据。下面是连接到数据库的代码。注意，我们正在使用 MySQL 的连接库。
```
from mysql.connector import connect, Error
class UserRepositoryImpl(UserRepository):
    def fetch(self, name:Name) -> User:
        try:
            with connect(
                    host="mysqldb",
                    user="root",
                    password="admin",
                    database="glarimy",
                ) as connection:
                with connection.cursor() as cursor:
                    cursor.execute("SELECT * FROM ums_users where name=%s", (name.value,))
                    row = cursor.fetchone()
                    if cursor.rowcount == -1:
                        raise UserNotFoundException()
                    else:
                        return User(Name(row[0]), PhoneNumber(row[1]), row[2])
        except Error as e:
            raise e
```
在上面的片段中，我们使用用户 `root` / 密码 `admin` 连接到一个名为 `mysqldb` 的数据库服务器，使用名为 `glarimy` 的数据库（模式）。在演示代码中是可以包含这些信息的，但在生产中不建议这么做，因为这会暴露敏感信息。
`fetch()` 操作的逻辑非常直观，它对 `ums_users` 表执行 SELECT 查询。回想一下，`AddService` 正在将用户数据写入同一个表中。如果 SELECT 查询没有返回记录，`fetch()` 函数将抛出 `UserNotFoundException` 异常。否则，它会从记录中构造 `User` 实体并将其返回给调用者。这没有什么特殊的。
### 应用层
最终，我们需要创建应用层。此模型如图 2 所示。它只包含两个类：控制器和一个 DTO。
![图 2: 添加服务的应用层](/data/attachment/album/202210/19/124500ns7pem96lottcc0p.png)
众所周知，一个 DTO 只是一个没有任何业务逻辑的数据容器。它主要用于在 `FindService` 和外部之间传输数据。我们只是提供了在 REST 层中将 `UserRecord` 转换为字典以便用于 JSON 传输：
```
class UserRecord:
    def toJSON(self):
        return {
            "name": self.name,
            "phone": self.phone,
            "since": self.since
        }
```
控制器的工作是将 DTO 转换为用于域服务的域对象，反之亦然。可以从 `find()` 操作中观察到这一点。
```
class UserController:
    def __init__(self):
        self._repo = UserRepositoryImpl()
    def find(self, name: str):
        try:
            user: User = self._repo.fetch(Name(name))
            record: UserRecord = UserRecord()
            record.name = user.name.value
            record.phone = user.phone.value
            record.since = user.since
            return record
        except UserNotFoundException as e: