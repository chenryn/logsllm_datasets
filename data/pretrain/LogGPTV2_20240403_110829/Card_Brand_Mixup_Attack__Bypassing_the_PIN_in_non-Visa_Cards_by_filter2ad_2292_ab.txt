(ODA) and uses one of the three methods:
1. Static Data Authentication (SDA): the card transmits
a signature by the card issuer on the card’s static data
USENIX Association
30th USENIX Security Symposium    181
Figure 3: Overview of the Mastercard contactless transaction using the most common card authentication method, called
Combined Dynamic Data Authentication (CDA). There are other two authentication methods, which we omit here for sim-
plicity. Notation: ⊕ is exclusive-OR; f is a key derivation function; (privC,pubC), (privI,pubI), and (privCA,pubCA) are the
private/public key pairs of the card, the issuer, and the Certiﬁcate Authority, respectively; certk(cont) is the PKI certiﬁcate on
cont signed with the private key k; signk(m) is the signature on m with the key k; aenck(m) is the asymmetric encryption of m
with the key k; MACk(m) and MAC(cid:48)k(m) are cipher-based Message Authentication Codes (MAC) on m with the key k; pb(m)
is the right-padding of m with b zero bytes. Note that there is some overlap between the Ofﬂine Data Authentication and the
Transaction Authorization phases. This occurs when the terminal and the card agree on using the Combined Dynamic Data
Authentication (CDA) method. For the sake of simplicity, we have omitted the middle entities (acquirer and payment network)
that participate in the terminal-issuer exchanges before they reach their recipient.
182    30th USENIX Security Symposium
USENIX Association
IssuerTerminalCards=f(mk,ATC)randomNCrandomUNs=f(mk,ATC)SELECT,2PAY.SYS.DDF01ApplicationSelectionAIDMastercard,AIDMaestro,...SELECT,AIDxtags&lengthsofPDOLGETPROCESSINGOPTIONS,PDOLOfﬂineDataAuthenticationAIP,AFLREADRECORD,AFLPAN,expDate,...,certprivCA(I,pubI),certprivI(PAN,pubC,CVMlist,AIP),tags&lengthsofCDOLs,CVMlistGENERATEAC,CDOL1TransactionAuthorizationstartsX=(PDOL,CDOL1)AC=MACs(X,AIP,ATC,IAD)T=h(X,CID,ATC,AC,IAD)SDAD=signprivC(NC,CID,AC,[T,]UN)CID,ATC,SDAD,IADPAN,AIP,X,ATC,IAD,AC[,aencpubI(PIN)]Y=AC⊕p8(ARC)ARPC=MAC′s(Y)ARC,ARPCsuch as the Primary Account Number (PAN), the card’s
expiration date, and the AIP. This signature, called the
Signed Static Authentication Data (SSAD), is generated
and stored on the card during production.
2. Dynamic Data Authentication (DDA): in this method
the terminal sends the INTERNAL AUTHENTICATE
command with the Dynamic Data Object List (DDOL)
as payload. The DDOL is a data object that must include
the terminal’s fresh number, called the Unpredictable
Number (UN). The card replies with the Signed Dynamic
Authentication Data (SDAD): a signature on its own
fresh number NC and the DDOL.
3. Combined Dynamic Data Authentication (CDA): this
method also involves the SDAD, but includes additional
transaction data in the signature such as the amount. No
INTERNAL AUTHENTICATE command is used and
instead the SDAD is later supplied by the card, if re-
quested by the terminal’s GENERATE AC command.
This ODA method actually belongs, chronologically
speaking, to another phase of the transaction, called the
Transaction Authorization, which we describe later in
Section 2.2.4.
The ODA method chosen is typically the last one (which is
also the strongest one) in the above list that both the terminal
and the card support. The ODA methods that the card supports
are encoded within the AIP.
2.2.3 Cardholder Veriﬁcation
The Cardholder Veriﬁcation Methods (CVMs) are as follows:
1. Online PIN: the terminal sends to the card issuer the
encryption of the PIN entered on the terminal’s pad for
veriﬁcation.
2. Consumer Device CVM: the cardholder veriﬁcation is
performed on the consumer’s device. This method is
intended primarily for use with mobile payment apps
such as Google Pay and Apple Pay, where the cardholder
is veriﬁed through biometrics such as ﬁngerprint or face
recognition.
3. Paper Signature: the cardholder signs (with a pen) the
purchase receipt and the cashier checks it against the
physical signature on the card’s backside.
If applicable, typically when the amount is above the CVM-
required limit, the terminal veriﬁes the cardholder by choosing
one (or two) of the above three methods. The choice depends
on the card’s list of supported CVMs, if supplied by the card.
If this CVM list is not supplied (e.g., in Visa transactions),
then the terminal proposes online PIN veriﬁcation, and this
proposal is encoded within the Terminal Transaction Quali-
ﬁers (TTQ) or a similar data object, depending on the kernel.
The TTQ is typically part of the PDOL.
Notably relevant for our previous PIN bypass attack, and
therefore this new attack, is the Consumer Device CVM (CD-
CVM). With respect to how and whether the CDCVM is used,
the kernels can be divided into two groups:
The Visa group composed of the Visa, Discover, and Union-
Pay kernels, where the card’s support for the CDCVM is
announced to the terminal through the cryptographically
unprotected CTQ or similar data object, depending on
the speciﬁc kernel.
The Mastercard group composed of the Mastercard, Amer-
ican Express, and JCB kernels, where the card’s support
for the CDCVM is announced to the terminal through the
cryptographically protected AIP and possibly additional
data objects, depending on the speciﬁc kernel.
Our previous PIN bypass attack targets the cards within
the Visa group, which is weaker than the Mastercard group
in terms of the protection it offers. While the CDCVM is not
meant for physical cards, attackers can abuse it by tricking
the terminal into accepting this CVM for a purchase with a
victim’s physical card. The key point here is that, whenever
an attacker convinces the terminal that the CDCVM was suc-
cessfully performed, the latter wrongfully assumes that the
actual veriﬁcation was delegated to an external device and
thus does not ask for the PIN. This is the essence of the ﬂaw
that our previous attack exploits.
Our new attack also exploits the Consumer Device CVM,
but in combination with a ﬂaw on EMV’s application selec-
tion. This attack thereby targets the cards within the presum-
ably better protected Mastercard group.
2.2.4 Transaction Authorization
Transaction authorization is implemented by having the card
compute and transmit the Application Cryptogram (AC). This
is a MAC-based cryptographic proof of the transaction, com-
puted over the transaction details, the AIP, and the Application
Transaction Counter (ATC, which is incremented on every
transaction). Besides the AC and additional data that depends
on the kernel, the card transmits:
• the Cryptogram Information Data (CID), which encodes
the type of authorization being requested;
• the Application Transaction Counter (ATC);
• the Signed Dynamic Authentication Data (SDAD), if
CDA was requested in the command payload; and
• the Issuer Application Data (IAD), which contains pro-
prietary application data that is transmitted to the issuer.
The computation by the card (and veriﬁcation by the issuer)
of the AC uses a session key s, which is derived from the ATC
and a symmetric key mk only known to the issuer and the
card. The terminal therefore cannot verify the AC.
USENIX Association
30th USENIX Security Symposium    183
A transaction can be authorized ofﬂine by the terminal,
sent online for authorization by the issuer, or declined ofﬂine
by the card. The choice depends on factors including checks
made by both the terminal and the card on transaction details
such as the amount, the currency (transaction versus card’s),
the country (transaction versus issuer’s), and the limit number
of consecutive ofﬂine transactions. The most common type
of transaction authorization is online by the issuer.
For transactions performed with the kernels within the
Visa group, the AC is sent within the card’s response
to the GET PROCESSING OPTIONS. Typically, no Of-
ﬂine Data Authentication process is performed and no
GENERATE AC command is used. For those kernels within
the Mastercard group, the AC is transmitted in response to
the GENERATE AC command.
If the transaction is to be authorized online by the issuer,
then the AC is called the Authorization Request Cryptogram
(ARQC) and the CID equals 0x80. The actual authorization
follows from a request-response exchange between the termi-
nal and the issuer. The terminal’s request carries the ARQC
and the issuer’s response is encoded in the Authorization Re-
sponse Code (ARC). This exchange is not further speciﬁed
by EMV.
If the transaction is to be accepted ofﬂine by the terminal,
then the AC is called the Transaction Cryptogram (TC) and
the CID equals 0x40 in this case. Also, the terminal is as-
sumed to have already validated the transaction in the Ofﬂine
Data Authentication phase. The transaction can be also de-
clined ofﬂine, in which case the AC is called the Application
Authentication Cryptogram (AAC) and the CID equals 0x00.
Note that the AIDs are not authenticated by the card to the
terminal. That is, the terminal has no cryptographic proof that
the card supports the AIDs it advertised during the application
selection phase. This turns out to be the new, fundamental
security shortcoming that our attack exploits. Also note that
EMV does not specify any mechanisms to match up the card’s
PAN with the advertised AIDs.
3 PIN Bypass via Card Brand Mixup
We describe our attack in detail here. We start in Section 3.1
by describing the threat model considered for this attack. We
next give a step-by-step description in Section 3.2. After-
wards, in Section 3.3 we outline the hardware and software
infrastructure we used in our proof-of-concept implementa-
tion and present the results of our experiments.
3.1 Threat Model
The threat model considered for this attack and for our formal
analysis described in Section 4 is as follows:
1. The attacker has access to the victim’s card.
2. The attacker has the capabilities of an active (so-called
Dolev-Yao) attacker over the wireless channel between
cards and terminals. Namely, the attacker can read, block,
and inject messages on this channel.
3. The channel between the payment terminal and the bank-
ing infrastructure is secure in that it satisﬁes authenticity
and conﬁdentiality.
This models is realistic in practice. The attacker may ac-
cess a victim’s card that is lost or stolen. Indeed, in practice
it may sufﬁce simply to be physically close (within a few
centimeters) to the victim’s card. Moreover, as we will see in
Section 3.3, using standard NFC-enabled smart phones one
can carry out active man-in-the-middle attacks on the wireless
channel.
3.2 Description of the Attack
As stated in [6, 21], the PIN veriﬁcation cannot be bypassed
for transactions where the payment terminal executes the
Mastercard kernel (recall Figure 3). According to this kernel’s
speciﬁcation [16], the AIP (speciﬁcally bit 2 of byte 1) is the
only data object that indicates the card’s support for on-device
cardholder veriﬁcation. Thus, modifying the AIP would lead
to a declined transaction given that it is authenticated using
the card’s PK certiﬁcate, the Application Cryptogram (AC),
and the Signed Dynamic Authentication Data (SDAD). We
have validated this with several cards.
Unlike the AIP, the card’s Application Identiﬁers (AIDs)
are not protected. In fact, the AIDs are only used during
the SELECT command exchanges. After these exchanges
are completed, the terminal activates the corresponding ker-
nel based on the AIDs received from the card. For example,
if the preferred AID (or ﬁrst, depending on the terminal’s
selection method) is AIDVisa = 0xA0000000031010, then
the terminal activates the Visa kernel. If the AID is instead
AIDMastercard = 0xA0000000041010, then the terminal acti-
vates the Mastercard kernel.
Due to this lack of authentication of the AIDs, an attacker
can maliciously replace them and thereby activate a desired
kernel on the terminal. This is the fundamental security short-
coming that our attack exploits. An overview of the attack is
displayed in Figure 4 and a step-by-step description follows.
1. Activation of the Visa Kernel: The terminal ﬁrst acti-
vates the Visa kernel. For this, the attacker applies the
trick just described, namely the replacement of the card’s
legitimate AIDs with AIDVisa.
2. Request Processing Options: After the AID is negotiated,
the attacker receives from the card the request (i.e., tags
and lengths) for the Processing Data Object List (PDOL).
The attacker forwards this request to the terminal with
the addition of the request for the Terminal Transaction
184    30th USENIX Security Symposium
USENIX Association
Figure 4: Overview of our PIN bypass attack for Mastercard, exploiting the card brand mixup. The attacker poses as (a) a card to
the payment terminal and runs a Visa session with it, and (b) a payment terminal to the card with which it runs a Mastercard
session. For simplicity, we have omitted the messages between the terminal and the issuer, which are the same as in Figure 3 but
without the PIN block.
USENIX Association
30th USENIX Security Symposium    185
TerminalAttackerCards=f(mk,ATC),randomNCrandomUNSELECT,2PAY.SYS.DDF01SELECT,2PAY.SYS.DDF01AIDMastercard,AIDMaestro,...AIDVisaSELECT,AIDVisaSELECT,AIDMastercardtags&lengthsofPDOLMastercardtags&lengthsofPDOLVisaPDOLVisa=hTTQ,amount,country,TVR,currency,date,type,UN,...iGETPROCESSINGOPTIONS,PDOLVisabuildPDOLMastercardfromPDOLVisaGETPROCESSINGOPTIONS,PDOLMastercardAIP,AFLMastercardREADRECORD,AFLMastercardPAN,expDate,...,certprivCA(I,pubI),certprivI(PAN,pubC,CVMlist,AIP),tags&lengthsofCDOLs,CVMlistbuildCDOL1fromPDOLVisaGENERATEAC,CDOL1X=(PDOLMastercard,CDOL1)CID=0x80AC=MACs(X,AIP,ATC,IAD)T=h(X,CID,ATC,AC,IAD)SDAD=signprivC(NC,CID,AC,[T,]UN)CID,ATC,SDAD,IADextractACfromSDADCTQ=0x0280AFLVisa=0x18010100AIP,AFLVisa,IAD,AC,CID,ATC,CTQREADRECORDPAN,expDate,AUC,issuerCountryQualiﬁers (TTQ) and all other processing data objects
speciﬁed by the Visa kernel. The attacker’s request also
includes the data objects referenced by the First Card
Risk Management Data Object List (CDOL1) speciﬁed
by the Mastercard kernel, which usually are the Termi-
nal Type (TT) and the Cardholder Veriﬁcation Method
Results (CVMR).
3. Run the Mastercard Session: Once the attacker has re-
ceived the GET PROCESSING OPTIONS from the ter-
minal, the attacker runs a Mastercard session with the
card. The terminal is not involved during this step. The
sub-steps are as follows.
(a) The attacker builds and sends to the card the
GET PROCESSING OPTIONS command along
with the card’s requested PDOL data, which is
ﬁlled up from the terminal’s command payload.
The card responds to the attacker’s command with
the Application Interchange Proﬁle (AIP) and the
Application File Locator (AFL).
(b) The attacker proceeds to read the card’s records,
using the received AFL. The relevant records col-
lected are the PAN, the card’s expiration date, the
issuer country code, the Application Usage Control,
and the CDOL1 tags and lengths.
(c) The attacker builds and sends to the card
the GENERATE AC command, whose payload
is the CDOL1 data ﬁlled up with the PDOL
data parsed from the payload of terminal’s
GET PROCESSING OPTIONS command. The
CDOL1 typically is a superset of the PDOL. If
the card supports CDA (i.e., bit 1 of byte 1 of the
AIP is set), then the command should request CDA.
Also, the bits 7 and 8 of the command’s reference
control parameter (i.e., byte 3) must be cleared and
set, respectively. This tells the card that an ARQC
is being requested (see [15], pp. 54–55).
(d) From the card’s response to the GENERATE AC
command, the attacker collects the CID, the ATC,
the IAD, and the AC or SDAD, depending on
whether CDA was requested. If the SDAD is sent,
then the attacker must extract the AC, using the
card’s Public Key (PK) (see [14], pp. 68–69).
Using the received card’s records, the attacker re-
trieves the card’s PK using the following steps
(see [14], pp. 60–65):
i. retrieve the CA’s PK from the CA’s index,
ii. retrieve the issuer’s PK from the issuer’s PK
certiﬁcate, using the CA’s PK, and
iii. retrieve the card’s PK from the card’s PK cer-
tiﬁcate, using the issuer’s PK.
4. PIN Bypass: At this point, our PIN bypass attack on Visa
is applied. That is, the attacker injects a CTQ data object
valued 0x0280, which instructs the terminal that online
PIN veriﬁcation is not required and that the Consumer
Device CVM was performed (see [17], pp. 69–70).
Together with the CTQ, the attacker supplies the AIP, an
artiﬁcial AFL with value 0x18010100, the AC, the IAD,