### Optimization of Text

**Recovery of Exponent Bits in RSA Decryption**

When only errors are present, 85% of the instances had all bits of the exponent recovered correctly, except for the most significant 4 bits. These 4 bits are processed before entering the code in Figure 3 to ensure a whole number of 5-bit windows, and thus, we do not attempt to recover them, treating them as erasures.

Among the OLinuXino decryption instances that had any other reconstruction errors, nearly all had only one additional incorrectly recovered bit (error, not erasure), with a few having two.

**Samsung Phone Results**

The results for the Samsung phone were slightly worse. In addition to the 4 most significant bits, several decryption instances had one additional bit left unknown (erasure) due to an interrupt occurring between the derivative-of-moving-median peak and the end of the following snippet. This either obliterates the peak or prevents the snippet from being correctly categorized according to its control flow. Besides these unknown bits, the reconstruction also produced between 0 and 4 incorrectly recovered (error) bits.

**Alcatel Ideal Phone Results**

For the Alcatel Ideal phone, most instances of encryption had between 13 and 16 unknown bits in each of the two exponents, primarily due to interference from activity on the other three cores. A similar number of incorrectly recovered bits (errors) were also observed.

**Success Rate for Exponent Recovery**

Figure 10 shows the success rate for recovering the secret exponent `dp`'s bits during one instance of RSA-2048 decryption using training data from OLinuXino board #1. The figure displays the maximum, median, and minimum success rates among decryption instances, each with a different randomly generated key. The results indicate that training on a different device of the same kind does not substantially affect the accuracy of recovery.

**Full-Key Reconstruction**

For each RSA decryption instance, the recovered exponent bits, using both the recovered `dp` and `dq`, were supplied to our implementation of the full-key reconstruction algorithm. The correct full RSA private key was reconstructed within one second on a Core i7-based Surface Pro 4 tablet, including the time needed to find the `kp` and `kq` coefficients. This is expected given the worst bit recovery rates (for the Alcatel phone) correspond to an error rate of about 1.5%, combined with an erasure rate typically around 1.5% but sometimes as high as 3%.

**Sliding-Window Implementation Results**

To better understand the implications of this new attack approach, we applied it to RSA-2048 using OpenSSLâ€™s sliding-window exponentiation. In these experiments, we used 160 MHz of bandwidth and targeted the OLinuXino board. Our method can categorize the snippets according to their beginning/ending points to recover the sequence of zero-squaring (Z), window-squaring (S), and result update (M) occurrences. The fraction of the exponent's bits recovered by this sequence reconstruction (shown as "S-M-Z Sequence" in Figure 11) ranged from 51.2% to 57.7%, with a median of 54.5%. This sequence-based recovery produced no errors in most cases, and among the few encryptions that had any errors, none had more than one.

After sequence-based reconstruction, the U-S and Z-S snippets were further analyzed to recover the remaining bits of the window computed in each U-S and Z-S snippet. The overall fraction of the exponent's bits correctly recovered ("Overall" in Figure 11) ranged from 97.7% to 99.6%, with a median of 98.7%.

**Mitigation Strategies**

We focus our mitigation efforts on the fixed-window implementation, which is the current choice in OpenSSL and already mitigates the problem of exponent-dependent square-multiply sequences and timing variation. We identify three key enablers for this attack approach:

1. **Existence of Computational-Activity-Modulated EM Signals:**
   - Potential mitigations include circuit-level approaches to reduce the effect of computational differences on the signal, additional shielding to attenuate signals, and deliberate creation of RF noise or interference.
   - However, these mitigations increase the device's cost, weight, and power consumption, and may not protect against attacks through different physical side channels.

2. **Precise Location of Signal Snippets:**
   - A simple mitigation would be to insert random additional amounts of computation before, during, and after window computation. However, this could slow down the computation and might be adapted to by the attack.

3. **Distinguishing Between Signals with Different Exponent Bits:**
   - The attack benefits from the limited space of possibilities for the value returned by BN is bit set (0 or 1) and the fact that the computation considers each bit. Mitigating this requires more complex countermeasures, such as introducing randomness in the computation process.

By addressing at least one of these enablers, the effectiveness of the attack can be significantly reduced.