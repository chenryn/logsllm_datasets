# 【技术分享】HEVD内核漏洞训练之SMEP绕过
|
##### 译文声明
本文是翻译文章，文章来源：whereisk0shl.top
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
**传送门**
[**【技术分享】HEVD内核漏洞训练——陪Windows玩儿**](http://bobao.360.cn/learning/detail/3544.html)
**  
**
**0x00 前言**
这篇的内容比较基础，也比较好玩，当然，一直看到袁哥提到的DVE bypass mitigation的，关于DVE感觉非常神奇，不过我还是不太了解，非常想学。
前两天在安全客发了一篇HEVD内核漏洞训练的文章，其中主要和大家分享了一下我的偶像MJ0011在HITCON上提到的Windows
8之后的新防护机制。后来Cn33liz又更新了一个HEVD Kernel StackOverflow的exp，正好提到了SMEP Bypass。
Cn33liz exp地址：
而SMEP Bypass相关的show case有一个非常好的文章在：
https://www.coresecurity.com/system/files/publications/2016/05/Windows SMEP
bypass U-S.pdf
这里我尝试了文中提到的几种bypass SMEP的方法进行了尝试，和大家一起分享一下这个过程，在此之前想和大家说一下之前的一些误区。
首先在上一篇HEVD内核漏洞训练中，我提到关于NtAllocateVirtualMemory返回STATUS_SUCCESS之后仍然无法申请内存的问题，当时描述出了问题－－实际上，当NtAllocateVirtualMemory返回STATUS_SUCCESS之后内存已经是可以申请的了，只需要通过memset初始化内存即可。
经过和安全客小编的沟通，已经在文中修改了这处错误，实在抱歉！
第二点是关于Cn33liz的exploit中，在他构造rop chain的时候，覆盖的地址偏移是2072，我发现这个地址并非是ret
address，而是2088这个偏移才能够将rop chain的地址覆盖上。
上一篇在安全客的地址：
在本文中，我对一种常见的获取内核信息的函数NtQuerySystemInformation进行了跟踪分析，对几种绕过SMEP的方法也进行了一些跟踪，感觉与系统博弈的过程还是艰辛又好玩的，做了一些总结然后和大家一起分享。请师傅们多多交流指正。
**0x01 SMEP**
SMEP有点像DEP，是内核的一种缓解措施，我们可以将它简单的理解成禁止在内核态下执行用户空间的代码，下面我们来看一下SMEP的作用，首先通过VirtualAlloc申请用户态空间，并将shellcode拷贝至空间。
    kd> g
    Break instruction exception - code 80000003 (first chance)
    0033:00007ff7`fcde14d0 cc              int     3
    kd> p
    0033:00007ff7`fcde14d1 c3              ret
    kd> dd e50000//VirtualAlloc 申请e50000内存，并部署shellcode
    00000000`00e50000  148b4865 00018825 828b4c00 000000b8
    00000000`00e50010  e8888b4d 49000002 8b48098b 8348f851
    00000000`00e50020  057404fa eb098b48 418b48f1 49f02460
    d> g//memcpy的时候中断调试，rsi向rdi内存拷贝畸形字符串
    Breakpoint 0 hit
    HEVD!TriggerStackOverflow+0xdf:
    fffff800`02280bbf f3a4            rep movs byte ptr [rdi],byte ptr [rsi]
    kd> bp fffff80002280bc1
    kd> r rsi
    rsi=0000000000fe35d0
    kd> dd fe35d0//查看寄存器覆盖情况
    00000000`00fe35d0  90909090 90909090 90909090 90909090
可以看到，在HEVD中调用memcpy之后，会覆盖到内核栈中的返回地址，在ret返回的时候，会由于栈溢出，跳转到我们之前部署的shellcode的地址e50000位置，这是用户态空间，SMEP开始工作了。
    kd> !analyze -v//SMEP引发BSOD，ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY
    *******************************************************************************
    *                                                                             *
    *                        Bugcheck Analysis                                    *
    *                                                                             *
    *******************************************************************************
    ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY (fc)
SMEP会导致BSOD，报错内容是ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY。
**0x02 NtQuerySystemInformation的工作**
正如开始的时候我说SMEP有点像DEP，绕过DEP比较常见的方法就是ROP，因此对抗SMEP的常见方法也是比较简单的方法也是ROP，在DEP中构造ROP需要dll的基址，其实在SMEP中构造ROP需要动态链接库内核的地址，而获取内核地址的一种非常好用的方法就是NtQuerySystemInformation。
当然，这个函数在Medium Integrity下是可以工作的，但是在Low Integrity下是无法获取内核信息的，不过基本都是在Medium
Integrity下进行的，只有在微软的一些沙盒中是不能用的，要用其他方法来泄露内核地址。（还记得bitmap吗！也是GdiSharedHandleTable不能用之后改用了gsharedinfo）
首先来看一下NtQuerySystemInformation的工作，先从用户态进入内核态，在64位下通过syscall进入。
    ntdll!NtQuerySystemInformation:
    0033:00007ffe`33f17e30 4c8bd1          mov     r10,rcx
    0033:00007ffe`33f17e33 b835000000      mov     eax,35h
    0033:00007ffe`33f17e38 0f05            syscall//通过syscall进入内核态
    0033:00007ffe`33f17e3a c3              ret
在NtQuerySystemInformation传入参数中，第一个表示功能号，这里我们使用的是功能号为11。在NtQuerySystemInformation中会对功能号进行判断，当功能号为11的时候，会执行一些函数调用进行相应的逻辑处理。
    kd> g
    Breakpoint 1 hit
    nt!NtQuerySystemInformation://进入内核态 nt!NtQuerySystemInformation
    fffff801`dc7d1390 4053            push    rbx
    kd> r rcx//系统功能号 11
    rcx=000000000000000b
    kd> g
    Breakpoint 2 hit//采取ecx自减的方法，当ecx为0命中功能号
    nt!ExpQuerySystemInformation+0x541:
    fffff801`dc7d196d ffc9            dec     ecx
    kd> p
    nt!ExpQuerySystemInformation+0x543:
    fffff801`dc7d196f 0f85dc9f1700    jne     nt! ?? ::NNGAKEGL::`string'+0x1bd51 (fffff801`dc94b951)
    kd> r ecx//此时，ecx为0，进入功能号为11的逻辑处理
    ecx=0
    kd> p
    nt!ExpQuerySystemInformation+0x549:
    fffff801`dc7d1975 418acb          mov     cl,r11b
    kd> p
    nt!ExpQuerySystemInformation+0x54c:
    fffff801`dc7d1978 e863800d00      call    nt!ExIsRestrictedCaller (fffff801`dc8a99e0)//检查是否是受限调用
    kd> p
    nt!ExpQuerySystemInformation+0x551://返回值eax
    fffff801`dc7d197d 85c0            test    eax,eax
    kd> p
    nt!ExpQuerySystemInformation+0x553:
    fffff801`dc7d197f 0f8547a01700    jne     nt! ?? ::NNGAKEGL::`string'+0x1bdcc (fffff801`dc94b9cc)
    kd> r eax// eax为0，非受限调用，可以继续执行下面的获取nt的基址的逻辑
    eax=0
    kd> p
    nt!ExpQuerySystemInformation+0x559://gs指向_kpcr
    fffff801`dc7d1985 65488b042588010000 mov   rax,qword ptr gs:[188h]
    kd> dt nt!_KPCR
       +0x180 Prcb             : _KPRCB
    kd> dt nt!_KPRCB
       +0x008 CurrentThread    : Ptr64 _KTHREAD
在功能号为11的逻辑处理中，主要获取内核模块信息的函数是ExpQuerySystemInformation，这个函数中，首先会获得内核的KTHREAD信息，保存至rax中，gs指向kpcr，偏移180h的位置是kprcb，偏移再加8h则指向KTHREAD。接下来会将KernelApcDisable置true。然后会锁定获取资源。
    kd> p
    nt!ExpQuerySystemInformation+0x562://KTHREAD+1E4位置自减，就是KernelApcDisable自减
    fffff801`dc7d198e 66ff88e4010000  dec     word ptr [rax+1E4h]
    kd> r rax
    rax=ffffe00001cac880
    kd> !process
    PROCESS ffffe00001252900
            THREAD ffffe00001cac880 
    kd> dt nt!_KTHREAD KernelApcDisable
       +0x1e4 KernelApcDisable : Int2B
    kd> p
    nt!ExpQuerySystemInformation+0x569:
    fffff801`dc7d1995 418ad5          mov     dl,r13b
    kd> dt nt!_KTHREAD KernelApcDisable ffffe00001cac880
       +0x1e4 KernelApcDisable : 0n-1
       kd> p
    nt!ExpQuerySystemInformation+0x56c:
    fffff801`dc7d1998 488d0da18fefff  lea     rcx,[nt!PsLoadedModuleResource (fffff801`dc6ca940)]//指定资源
    kd> p
    nt!ExpQuerySystemInformation+0x573:
    fffff801`dc7d199f e8bc12c6ff      call    nt!ExAcquireResourceExclusiveLite (fffff801`dc432c60)//获取线程独占访问资源
    kd> r rdx//wait = true调用者进入等待状态，直到获取资源
    rdx=0000000000000001//
随后会进入核心的模块查询函数，这个ExpQueryModuleInformation会遍历kernel的psLoadedModuleList链来获取kernel信息，保存在buffer里，buffer的长度是RTL_PROCESS_MODULE_INFORMATION结构体的长度，然后恢复KernelApcDisable
    kd> p
    nt!ExpQuerySystemInformation+0x57d:
    fffff801`dc7d19a9 458bc6          mov     r8d,r14d
    kd> p
    nt!ExpQuerySystemInformation+0x580:
    fffff801`dc7d19ac 488bd3          mov     rdx,rbx
    kd> p
    nt!ExpQuerySystemInformation+0x583:
    fffff801`dc7d19af e8acb60800      call    nt!ExpQueryModuleInformation (fffff801`dc85d060)
    kd> p
    nt!ExpQuerySystemInformation+0x588:
    fffff801`dc7d19b4 89442430        mov     dword ptr [rsp+30h],eax//结构信息存入
    kd> dd ffffd00021bc7434
    ffffd000`21bc7434  0000ad78 dc444a01 fffff801 03b10000
    ffffd000`21bc7444  ffffe000 00000000 fffff801 00000000
    kd> p
    nt!ExpQuerySystemInformation+0x58c:
    fffff801`dc7d19b8 488d0d818fefff  lea     rcx,[nt!PsLoadedModuleResource (fffff801`dc6ca940)]
    kd> p
    nt!ExpQuerySystemInformation+0x593:
    fffff801`dc7d19bf e8cc1ac6ff      call    nt!ExReleaseResourceLite (fffff801`dc433490)//释放资源
    kd> p
    nt!ExpQuerySystemInformation+0x598://读取KTHREAD
    fffff801`dc7d19c4 65488b0c2588010000 mov   rcx,qword ptr gs:[188h]
    kd> p
    nt!ExpQuerySystemInformation+0x5a1://获得KernelApcDisable
    fffff801`dc7d19cd 0fbf81e4010000  movsx   eax,word ptr [rcx+1E4h]
    kd> p
    nt!ExpQuerySystemInformation+0x5a8://自加恢复
    fffff801`dc7d19d4 ffc0            inc     eax
    kd> p
    nt!ExpQuerySystemInformation+0x5aa:
    fffff801`dc7d19d6 668981e4010000  mov     word ptr [rcx+1E4h],ax
    kd> p