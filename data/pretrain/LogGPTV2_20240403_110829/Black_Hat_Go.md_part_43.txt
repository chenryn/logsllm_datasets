integrated development environments (IDEs), 3–6
interface{} type, 97
interface types, 13
io package, 32, 197
io.Pipe() function, 43
io.ReadCloser, 49
io.Reader, 32–35, 46
ioutil.ReadAll() function, 49
io.Writer, 32–35
J
Java, 118–120
JavaScript, 94–95
JBoss, 198
JetBrains GoLand, 5–6
jQuery package, 69
JS Bin, 94
JSON, 19, 50, 54, 139, 159
K
Kerberos, 133
Kernel32.dll, 275
Keyed-Hash Message Authentication Code (HMAC) standard,
240–241
keylogging, 93–98
Kozierok, Charles M., 22
L
lab environments, 118–121
len field tag, 140
libraries, 2
lightweight threads, 16–17
loadLibraryA() function, 275
Login() method, 66
Logout() method, 66, 68
loops, 15, 37
Lua plug-ins, 225–232
Luhn checks, 253–254
M
madvise() function, 205
magic bytes, 296
main() function, 17
main package, 6
make() function, 11
Mandatory Integrity Control, 271
mapping data, 71–73, 125
maps, 11
Marshal() method, 19
marshalData() method, 305
marshaling interfaces, 135
MD5 hashes, 236–237
memory, 273–274
message authentication, 239–241. See also authentication
message authentication codes (MACs), 234
MessagePack, 60
metadata, 69, 138–139
Metasploit Framework, 59–68, 213
Meterpreter, 61, 98–102
Microsoft API documentation, 263–265
Microsoft SQL (MSSQL) Server databases, 157–158,
160–161
Microsoft Visual Studio Code, 5
middleware, 80–81, 83–88
MinGW-w64, 290
mod tool, 9
MongoDB databases, 154–156, 158–160
MsfVenom, 213, 278
Msg struct, 106–107
MSYS2, 290
multichannel communication, 30–32
multiplexing, 98–102
mutex, 129
mutual authentication, 248–252
MySQL databases, 156–157, 160–161
N
named functions, 126
native plug-ins, 218–224
negroni package, 83–88
Nessus vulnerability scanner, 217
net package, 24–25, 197
Netcat, 40–44
net.Conn, 35
net/http standard package, 46, 48
New() helper function, 53–54
NewProperties() function, 72–73
NewRequest() function, 48
Nmap, 225
nonconcurrent scanning, 25–26
NoSQL databases, 154, 158
NT LAN Manager (NTLM) authentication, 150–151
NTLM Security Support Provider (NTLMSSP), 133–135
NTOWFv2, 148
num transform, 214
O
obfuscation, 307
Office Open XML documents, 69
offset field tag, 140
offset values, 300
omitempty, 62
open ports, 22
OPSEC, 329
Optional Header, 284–285
Oracle, 154
os package, 197
os/exec package, 41
P
packages, 2, 8–9
packet capturing and filtering, 175–180
panic() function, 107, 112
parseTags() function, 140–142
passive reconnaissance, 51, 59
pass-the-hash authentication, 147–150
passwords, 146–151, 222–224
PATCH requests, 47
payloads, 101, 302–307
pcap, 175
PDF files, 69
PE (Portable Executable) format, 279–289
PipeReader, 43
PipeWriter, 43
PKCS (Public Key Cryptography Standards), 242. See also
public-key cryptography
pkg directory, 2–3
placeholders, 83, 89
Plan 9 operating system, 216
plug-ins
Lua, 225–232
native, 218–224
plugin package, 219
PNG format, 296–307
pointers, 12
Portable Executable (PE) format, 279–289
Portable Network Graphics (PNG) images, 296–307
ports
availability, 24–25
handshake process, 22
port forwarding, 23, 39–40
port scanners, 180–185, 222–224
scanning, 23–32. See also scanners
Post() function, 46–47
PostForm() function, 47
Postgres databases, 156–157, 160–161
PostgreSQL databases, 156–157, 160–161
PreProcessImage() function, 298
primitive data types, 10–11
process() function, 72–73
Process Hacker, 278
process injection, 268–269
Process Monitor, 278
ProcessImage() method, 302–303
procselfmem() function, 205
project structure, 52–53, 60
promisc variable, 177
Protocol Buffers (Protobuf), 316
PsExec, 131
public-key cryptography, 242, 245. See also encryption
PUT requests, 47–48
Python, 197–201
Q
query parameters, 73–76
R
race condition functions, 206
Rapid7, 60
RATs (remote access Trojans), 315–329
raw transform, 215
RC2, 252–261
ReadString() function, 38
reconnaissance, 51, 59
redirectors, 98
referential fields, 138–139
reflect package, 139
reflection, 132, 139
regular expression (regex) values, 163
remote access Trojans (RATs), 315–329
remote procedure calls (RPCs), 59, 64–67, 316
request/response cycles, 46, 62–64
response handling, 48–51
Rivest, Ron, 252
RLock, 129
Roundcube, 90
routers, 79–80, 84–85
rst packets, 22
S
salts, 234
scanner package, 220, 223
scanners, 23–32, 180–185, 217, 222–224. See also ports
schema-less databases, 154
scraping metadata, 68–76
Search() function, 163
search query templates, 73–76
Section Table, 287–289
security tokens, 133–134
send() method, 65
serveFile() function, 97
Server Message Block (SMB), 132–147
server multiplexers, 78–79
ServerMux, 78–79
SessionList() method, 66, 68
set command, 3
SHA-256 hashes, 236–237
shellcode, 203–204, 213–216
Shodan, 51–59
signature validation, 245–248
site filter, 73
slices, 11, 106, 126, 144–145
SQL injection fuzzing, 192–196
SQLite databases, 328
src directory, 3
stateless protocols, 46
static files, 93
Status struct, 50–51
steganography
overview, 295
PNG format, 296–307
XOR, 307–312
strconv package, 25
strlen() function, 17
strToInt() method, 304
structs
APIInfo struct, 55
Client struct, 53–54
encoding, 135
Foo struct, 19
handling, 142–143
Msg struct, 106–107
Status struct, 50–51
types of, 12–13, 19, 133–135
structured data, 18–19, 50–51
Stub, 281
subdirectories, 2–3
subdomains, 107–117
switch statements, 14, 129, 143
switched networks, 178
symmetric algorithms, 234
symmetric-key encryption, 242–245. See also encryption
SYN cookies, 180–185
syn packets, 22
syn-acks, 22
SYN-flood protections, 180–185
syscall package, 197, 266–269
Syscall6() function, 210
T
tabwriter package, 113–114
Target breach, 154
TCP flags, 180–181
tcpdump, 102, 105, 175–178
TCP/IP Guide (Kozierok), 22
teamservers, 121
Telegram, 280
Telnet, 41
templates, 88–90
Tenable, 217
third-party packages, 8–9
tokens, 61–63, 271
“too fast” scanner, 26–27
Tour of Go tutorial, 10
Transmission Control Protocol (TCP)
handshake process, 22–23
port scanners, 23–32
proxies, 32–44
U
Ubuntu VM, 118–120
uint16 data types, 143–144
uintptr type, 266
unicode package, 197
unmarshal() function, 141–142
Unmarshal() method, 19
unmarshaling interfaces, 136
unsafe package, 197
unsafe.Pointer type, 266–267
USER property, 190
utility programs, 67–68
V
{{variable-name}} convention, 89
verbs, 47
Vim text editor, 3–4
vim-go plug-in, 3
virtual machines (VMs), 118–120
virtual memory, 273–274
VirtualAllocEx, 273–274
VirtualFreeEx() Windows function, 277–278
VMWare Workstation, 118–120
VS Code, 5
vulnerability fuzzers, 188–196
W
WaitforSingleObject() Windows function, 276–277
waitForWrite() function, 206
WaitGroup, 27–28
walkFn() function, 171
WebSocket API (WebSockets), 93–98
while loops, 15
Windows APIs, 263–265
Windows DLL, 218–219
Windows VM, 127
winmods files, 270
WINNT.H header, 285–286
Wireshark, 102, 225
worker functions, 28–30, 111–112
wrapper functions, 136–137
WriteData() function, 305–307, 311
WriteProcessMemory() function, 274–275
writer.Flush() function, 38
WriteString() function, 38
X
XML, 19–20, 69
XOR, 307–312
Black Hat Go is set in New Baskerville, Futura, Dogma, and
The Sans Mono Condensed.
UPDATES
Visit https://nostarch.com/blackhatgo/ for updates, errata,
and other information.
More no-nonsense books from NO STARCH
PRESS
REAL-WORLD BUG HUNTING
A Field Guide to Web Hacking
by PETER YAWORSKI
JULY 2019, 264 PP., $39.95
ISBN 978-1-59327-861-8
MALWARE DATA SCIENCE
Attack Detection and Attribution
by JOSHUA SAXE
with HILLARY SANDERS
SEPTEMBER 2018, 272 PP., $49.95
ISBN 978-1-59327-859-5
LINUX BASICS FOR HACKERS
Getting Started with Networking, Scripting, and
Security in Kali
by OCCUPYTHEWEB
DECEMBER 2018, 248 PP., $34.95
ISBN 978-1-59327-855-7
SERIOUS CRYPTOGRAPHY
A Practical Introduction to Modern Encryption
by JEAN-PHILIPPE AUMASSON
NOVEMBER 2017, 312 PP., $49.95
ISBN 978-1-59327-826-7
GRAY HAT C#
A Hacker’s Guide to Creating and Automating
Security Tools
by BRANDON PERRY
JUNE 2017, 304 PP., $39.95
ISBN 978-1-59327-759-8
PENTESTING AZURE APPLICATIONS
The Definitive Guide to Testing and Securing
Deployments
by MATT BURROUGH
JULY 2018, 216 PP., $39.95
ISBN 978-1-59327-863-2
PHONE:
1.800.420.7240 OR
1.415.863.9900
EMAIL:
PI:EMAIL
WEB:
WWW.NOSTARCH.COM
“Everything necessary to get started with
Go development in the security space”
— HD Moore, Founder of the Metasploit
Project and the Critical Research
Corporation
Black Hat Go explores the darker side of Go, the popular
programming language revered by hackers for its simplicity,
efficiency, and reliability. It provides an arsenal of practical
tactics from the perspective of security practitioners and
hackers to help you test your systems, build and automate
tools to fit your needs, and improve your offensive security
skillset, all using the power of Go.
You’ll begin your journey with a basic overview of Go’s
syntax and philosophy and start to explore examples that you
can leverage for tool development, including common network
protocols like HTTP, DNS, and SMB. You’ll then dig into
various tactics and problems that penetration testers encounter,
addressing things like data pilfering, packet sniffing, and
exploit development. You’ll create dynamic, pluggable tools
before diving into cryptography, attacking Microsoft
Windows, and implementing steganography.
You’ll learn how to:
Make performant tools that can be used for your own
security projects
Create usable tools that interact with remote APIs
Scrape arbitrary HTML data
Use Go’s standard package, net/http, for building HTTP
servers
Write your own DNS server and proxy
Use DNS tunneling to establish a C2 channel out of a
restrictive network
Create a vulnerability fuzzer to discover an application’s
security weaknesses
Use plug-ins and extensions to future-proof products
Build an RC2 symmetric-key brute-forcer
Implant data within a Portable Network Graphics (PNG)
image.
Are you ready to add to your arsenal of security tools? Then
let’s Go!
ABOUT THE AUTHORS
Tom Steele, Chris Patten, and Dan Kottmann share over 30
years in penetration testing and offensive security experience,
and have delivered multiple Go training and development
sessions. (See inside for more details.)
THE FINEST IN GEEK ENTERTAINMENT™
www.nostarch.com
FOOTNOTES
CHAPTER 2. TCP, SCANNERS, AND
PROXIES
1. This is a free service provided by Fyodor, the creator of Nmap, but when you’re scanning, be polite.
He requests, “Try not to hammer on the server too hard. A few scans in a day is fine, but don’t scan 100
times a day.”
CHAPTER 3. HTTP CLIENTS AND
REMOTE INTERACTION WITH
TOOLS
1. For assistance and practice with exploitation, consider downloading and running the Metasploitable
virtual image, which contains several exploitable flaws useful for training purposes.
CHAPTER 5. EXPLOITING DNS
1. Go versions 1.9 and newer contain a concurrent-safe type, sync.Map, that may be used to simplify
your code.
CHAPTER 9. WRITING AND
PORTING EXPLOIT CODE
1. For more detailed information about this vulnerability, refer to
https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-
application-have-in-common-this-vulnerability/#jboss.
CHAPTER 11. IMPLEMENTING AND
ATTACKING CRYPTOGRAPHY
1. Some operating modes, such as Galois/Counter Mode (GCM), provide integrity assurance.