原文：[Exploiting an Accidentally Discovered V8
RCE](https://zon8.re/posts/exploiting-an-accidentally-discovered-v8-rce/)  
作者：[0x4848](https://zon8.re/page/about/)
* * *
> 请从现在开始睁开你的双眼，不要忽略系统中发生的任何崩溃...
>
>
> 花些时间看看发生了什么，如果你在浏览网页时浏览器却突然消失了，再次访问该页面，浏览器又崩溃了，那么你一定想知道这个网页做了什么...打开调试器看看，找到发生了什么，不要忽略任何现象。
>
> 大多数人每天都会碰到漏洞，只是他们没有意识到，所以现在开始，观察...
>
> ——[Halvar and FX - Take it from here - Defcon
> 12](https://youtu.be/Jwot7S6NmLE?t=107)
## 前言
为了更好的了解浏览器的内部结构以及exploit的开发，查看旧的漏洞，尝试根据其PoC或者漏洞报告编写相应的exploit是很有帮助的。[Issue
744584: Fatal error in ../../v8/src/compiler/representation-change.cc](https://bugs.chromium.org/p/chromium/issues/detail?id=744584)这个问题很有意思。首先，目前还没有为这个漏洞写的exploit。其次，这个漏洞是偶然发现的，漏洞提交者是一个开发人员，他是为了修复崩溃的应用程序才向Chromium团队报告了这个问题，而不是因为他正在挖掘漏洞。事情恰好就这么发生了，他在Chrome中发现了一个潜在的0-day漏洞。考虑到这些因素，这个漏洞很值得深入研究。
这也说明Halver和FX在Defon 12上说的话是正确的。
## 漏洞报告
[漏洞报告](https://bugs.chromium.org/p/chromium/issues/detail?id=744584)中没有提供PoC，而且除了一个崩溃的跟踪记录外，几乎没有任何关于该漏洞的其他信息。
    UserAgent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0
    Steps to reproduce the problem:
    Unfortunately I could not isolate the problem for an easy repro.
    I have a JS app of around 3mb minified and the browser crashes at what seem to be random times (I suppose whenever it decides to optimize the problematic function)
    What is the expected behavior?
    not crash
    What went wrong?
    Fatal error in ../../v8/src/compiler/representation-change.cc, line 1055
    RepresentationChangerError: node #812:Phi of kRepFloat64 (Number) cannot be changed to kRepWord32
    STACK_TEXT:  
    0x0
    v8_libbase!v8::base::OS::Abort+0x11
    v8_libbase!V8_Fatal+0x91
    v8!v8::internal::compiler::RepresentationChanger::TypeError+0x1d9
    v8!v8::internal::compiler::RepresentationChanger::GetWord32RepresentationFor+0x18d
    v8!v8::internal::compiler::RepresentationChanger::GetRepresentationFor+0x28d
    v8!v8::internal::compiler::RepresentationSelector::ConvertInput+0x19d
    v8!v8::internal::compiler::RepresentationSelector::VisitPhi+0x12c
    v8!v8::internal::compiler::RepresentationSelector::VisitNode+0x31f
    v8!v8::internal::compiler::RepresentationSelector::Run+0x4ea
    v8!v8::internal::compiler::SimplifiedLowering::LowerAllNodes+0x4c
    v8!v8::internal::compiler::PipelineImpl::Run+0x70
    v8!v8::internal::compiler::PipelineImpl::OptimizeGraph+0x29f
    v8!v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl+0x20
    v8!v8::internal::CompilationJob::ExecuteJob+0x1a3
    v8!v8::internal::OptimizingCompileDispatcher::CompileTask::Run+0x110
    gin!base::internal::FunctorTraits::Invoke+0x1a
    gin!base::internal::InvokeHelper::MakeItSo+0x37
    gin!base::internal::Invoker >,void __cdecl(void)>::RunImpl > const & __ptr64,0>+0x49
    gin!base::internal::Invoker >,void __cdecl(void)>::Run+0x33
    base!base::Callback::Run+0x40
    base!base::debug::TaskAnnotator::RunTask+0x2fd
    base!base::internal::TaskTracker::PerformRunTask+0x74b
    base!base::internal::TaskTracker::RunNextTask+0x1ea
    base!base::internal::SchedulerWorker::Thread::ThreadMain+0x4b9
    base!base::`anonymous namespace'::ThreadFunc+0x131
    KERNEL32!BaseThreadInitThunk+0x14
    ntdll!RtlUserThreadStart+0x21
    Did this work before? N/A 
    Chrome version: 61.0.3158.0  Channel: canary
    OS Version: 10.0
    Flash Version: Shockwave Flash 25.0 r0
漏洞的提交者（Marco Giovannini）确实曾在评论中提供了PoC，但是后来又删除了，因为其中包含了部分他的应用程序中的代码。
因为这是一个已修复的n-day漏洞，我们可以直接查看修复漏洞过程中更改记录，以及相关的测试代码。
在更改记录中提供了两个测试代码：
    // Copyright 2017 the V8 project authors. All rights reserved.
    // Use of this source code is governed by a BSD-style license that can be
    // found in the LICENSE file.
    // Flags: --allow-natives-syntax --turbo-escape --turbo-experimental --no-turbo-loop-peeling
    function f(x) {
        var o = {a : 0};
        var l = [1,2,3,4];
        var res;
        for (var i = 0; i 
> “在编译器优化中，逃逸分析是一种确定指针动态范围的方法，即它可以确定程序中指针可以访问的区域。它与指针分析以及形状分析有关。——[维基百科](https://en.wikipedia.org/wiki/Escape_analysis)”
在V8中，Turbofan使用逃逸分析对绑定到函数上的对象进行优化。如果对象没有逃出函数的生存周期，那么就不需要在堆上分配它，V8可以将其视为函数的本地变量，从而存储在栈或者寄存器上，或者将它完全优化掉。
请参阅下面的V8 Turbofan条款，后面还会继续引用这些条款：
  * Branch是条件控制流，程序执行到这里分成两个节点；
  * Merge将分支两侧的两个控制节点合并；
  * Phi将分支两侧计算的值合并。
下面的merge函数根据之前在缓存中看到的类型创建了一个Phi。看起来漏洞存在的原因是因为函数错误地计算了类型，因此攻击者控制的值的类型与已编译函数期望的类型不同。
    bool VirtualObject::MergeFields(size_t i, Node* at, MergeCache* cache,
                                    Graph* graph, CommonOperatorBuilder* common) {
      bool changed = false;
      int value_input_count = static_cast(cache->fields().size());
      Node* rep = GetField(i);
      if (!rep || !IsCreatedPhi(i)) {
        Type* phi_type = Type::None();
        for (Node* input : cache->fields()) {
          CHECK_NOT_NULL(input);
          CHECK(!input->IsDead());
          Type* input_type = NodeProperties::GetType(input);
          phi_type = Type::Union(phi_type, input_type, graph->zone());
        }
        Node* control = NodeProperties::GetControlInput(at);
        cache->fields().push_back(control);
        Node* phi = graph->NewNode(
            common->Phi(MachineRepresentation::kTagged, value_input_count),
            value_input_count + 1, &cache->fields().front());
        NodeProperties::SetType(phi, phi_type);
        SetField(i, phi, true);
    #ifdef DEBUG
        if (FLAG_trace_turbo_escape) {
          PrintF("    Creating Phi #%d as merge of", phi->id());
          for (int i = 0; i fields()[i]->id(),
                   cache->fields()[i]->op()->mnemonic());
          }vp, n);
          if (old != cache->fields()[n]) {
            changed = true;
            NodeProperties::ReplaceValueInput(rep, cache->fields()[n], n);
          }
        }
      }
      return changed;