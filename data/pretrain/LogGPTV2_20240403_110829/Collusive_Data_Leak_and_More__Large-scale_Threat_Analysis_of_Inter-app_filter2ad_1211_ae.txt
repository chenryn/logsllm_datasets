http://jd.benow.ca/
https://github.com/dialdroid-android/dialdroid-bench/
key. There are three modes for SharedPreferences: private (i.e.,
accessible only by the owner app), world-read (i.e., others can read),
and world-write (i.e., others can read and write). In virtually all
taint analyses, SharedPreference is labeled sensitive. Even if it is
conﬁgured as private, other components of the same app can access
it resulting in sensitive data ﬂows.
The advantage of DIALDroid is that its database backend al-
lows security analysts to easily adjust and customize sensitivity
deﬁnitions to reﬁne query results. In Section 4.2, we show the
recomputed results with a much smaller sink set consisting of
java.net.URL, android.telephony.SmsManager, and
org.apache.http.HttpResponse.
App chain length. Three or more apps can possibly create a chain
with ICC links to leak data. For example, three apps, A, B, and C,
create an ICC chain, where app A transfers sensitive information to
app B via an ICC exit leak; app B then leaks that information to app
C. A chain of three or more apps is a special case of two app-based
ICC collusion, where the receiver app leaks data extracted from
an intent by initiating another ICC (i.e., ICC entry leak with ICC
initiation methods as sink). Therefore, DIALDroid reports A→B
link described above as an inter-app collusion.
Among the three benchmarks evaluated in Section 4, DIAL-
Droid identiﬁed following two scenarios in the ICC-Bench, where
three components work together to leak sensitive information.
1. implicit5.M ainActivity → implicit5.F ooActivity →
2. implicit6.M ainActivity → implicit5.F ooActivity →
implicit5.HookActivity
implicit5.HookActivity
Although we did not ﬁnd any chain of more than two components
among the 110K real-world apps, DIALDroid is capable of identify-
ing such chains.
Risk prioritization. Security analysts need usable tools to prioritize
the investigation of reported threats. Because of the quadratic growth
of possible inter-app ICCs in the number of apps, this prioritization
is a key to the usability. Relaxing the deﬁnitions of sensitive sources
and sinks (i.e., smaller sets) reduces the number of alerts generated.
In addition, quantitative metrics can be developed to prioritize the
risks based on the type of inter-app sensitive ICC ﬂows, through
machine learning methods. PRIMO [26] can also be utilized to
triage the ICC links detected by DIALDroid.
User applications. Although DIALDroid is for marketplace own-
ers, Android users can also beneﬁt from this tool. For example,
enterprise users can check possible inter-app collusions using DI-
ALDroid before allowing certain apps to be installed on the devices
of their employees. Moreover, a large-scale public database similar
to ours, when regularly updated, can be queried by users to ﬁnd out
possible inter-app communications to or from a particular app.
Limitations. Existing static analysis approaches are ineffective
against the unintended ICCs problem caused by mismatched data
(described in Section 4.7). The reason is that one needs to infer
the intended data type that an app sends or receives based on how
the code preceding or following an ICC. Such static semantic code
inference is challenging and remains an open problem.
Similar to most other approaches based on static analysis, our
approach shares some inherent limitations. For example, DIAL-
Droid can resolve reﬂective calls only if their arguments are string
constants. As mentioned in Section 3.3, since our strict intent
matching rules ignore overapproximated regular expressions, DIAL-
Droid may fail to compute some ICC links.
As we have mentioned in Section B.1, DIALDroid loses ﬁeld
sensitivity when intent objects carrying sensitive information goes
through ICC channels, which can result in false positive collusion
identiﬁcation. DIALDroid uses a regular expression string search
within the ICC entry leak path for the source data keys. As we en-
countered in startActivity6 test case, this search may return
false positives if the path contains any string that contains the key as
a substring. We manually inspected 30 taint paths from real-world
collusion pairs identiﬁed in our study and did not observe any such
occurrence.
To enable large scale analysis, we limited our analysis time per
app. Although DIALDroid failed to analyze only 5.7% of the appli-
cations within allocated time (i.e., 20 minutes), there is a possibility
that some of those applications could cause collusions.
6. RELATED WORK
Collusion and privilege escalation. Davi et al. were the to de-
scribe the possibility of privilege escalation attacks in Android [10]
and Marforio et al. gave a comprehensive description of possi-
ble collusion channels, including inter-app ICC [24]. Later Com-
Droid provided the ﬁrst comprehensive analysis of inter-app ICC
based threats, including broadcast theft and activity hijacking [9].
Since ComDroid analyzed individual apps, it’s results may over-
approximate the number of sensitive inter-app ICC ﬂows, regardless
of how the data is consumed by the receiver app. In comparison,
our pairwise analysis performs end-to-end data-ﬂow analysis, which
is more ﬁne-grained. Requiring the receiver app to have ICC entry
leaks (as deﬁned in Section 2) reduces the number of false positives
(i.e., false alarms) allowing security analysts to better prioritize their
investigation.
Elish et al. pointed out that collusion detection solutions may
suffer from high false positives without in-depth pairwise data-ﬂow
analysis [13]. Researchers pointed out a third type of inter-app
ICC attacks besides collusions and privilege escalation, called pri-
vate activity invocation due to the misconﬁguration of the intent
scopes [33]. A recent study also reported the presence of collu-
sive attacks to promote the rankings of apps in the Chinese Apple
marketplace [8].
Single-app security. For static analysis on single apps, many
general-purpose solutions such as DroidSafe [15] and Aman-
droid [35] can identify sensitive data ﬂows. Researches have also
proposed several other techniques for speciﬁc detection purposes.
For example, CHEX [23] is focused on detecting data ﬂows that
enable component hijacking within a single app. AppIntent uses
symbolic execution to determine whether a data transmission is
intended by the user through analyzing its compatibility with the
required GUI-operation sequences [39]. AAPL [22] utilizes peer
voting for privacy leakage detection together with data-ﬂow anal-
ysis. Wolfe et al. uses supervised learning to classify malware
families [36].
Several researchers have also used dynamic program analysis
for screening single apps. TaintDroid [14] dynamically tracks the
information ﬂows and detects privacy leaks through Android system
instrumentation. INTENTDROID [16] utilizes debug breakpoints to
dynamically detect the unsafe handling of incoming messages to
identify possible component hijacking. IntentFuzzer uses fuzzing
framework to identify exposed and vulnerable interfaces [38]. Intel-
liDroid aims to generate inputs for dynamic analysis [37].
App-pair security. Most of the dynamic analysis solutions modify
Android system to enforce security policies to prevent inter-app
threats. XmanDroid is the ﬁrst among such tools to demonstrate
runtime collusion detection by enforcing policies on the combined
permission set of app-pairs [5]. FlaskDroid enforces mandatory
access control policies to prevent privilege escalation and collusion
attacks [7]. IntentScope enforces security policies during dynamic
intent forwarding [17].
However, these dynamic analysis based solutions are designed
to analyze a small set of apps (e.g., ones that are installed on the
same phone). However, these approaches do not scale to hundreds
of thousands of apps. In comparison, our solution is designed for
security analysts who maintain large-scale app marketplaces or even
medium-scale proprietary marketplaces owned by an organization
for its employees, e.g., only approved apps from the internal app
marketplace are allowed to be installed.
Among the static analysis based solutions, IccTA+ApkCombiner
uses a straightforward approach by two apps into a single app (e.g.,
using ApkCombiner [20]) and then apply the existing single-app
static analysis (e.g., IccTA [21]) to identify inter-app threats. How-
ever, this approach performs a large number of redundant program
analyses, which signiﬁcantly slows down the computation as shown
in our experiments. Our evaluation also shows that the combination
mechanism of ApkCombiner is fragile and failed on majority of the
app-pairs. DidFail [19] and COVERT [4]) perform the data-ﬂow
analysis only once per app. COVERT uses formal methods (namely
model checking) to detect suspicious inter-app ICC ﬂows [4] but
we found COVERT’s formal model generation process fragile and
having low scalability. DidFail [19] uses an approach very similar
to us, however the intent resolution and intent-matching process of
DidFail performs poorly. Moreover, DidFail did not enforce security
policies to reduce the search space (e.g., we only match intents
that can potentially carry sensitive information), and therefore is
not scalable. Finally, DidFail does not limit dynamically adjust the
precision of static taint analysis, therefore often fails to complete
analysis of apps even after long time. In comparison, we implement
a pragmatic adaptive mechanism that dynamically determines the
accuracy-performance tradeoff during static taint analysis. FUSE
is aimed towards single-app analysis, but can be extended to build
a multi-app information-ﬂow graph [32]. FUSE’s intra-procedural
string analysis is limited and error-prone. Existing inter-app analysis
tools were evaluated on tens or hundred of apps and none of the
tools were evaluated on 110K apps like DIALDroid.
PRIMO estimates the likelihoods of inter-app ICC connections
using a probabilistic technique and provides ICC-link probabilities
computed based on empirical evidence [26]. Although PRIMO is
not designed to be a complete ICC security detection tool, it provides
useful complementary information to security analysts to focus on
the risky ICCs that are the most likely to occur in practice.
Others. Researchers proposed automatic patch generation for mit-
igating hijacking [41]. Similarly, applying third-party security
patches for privilege escalation and capability leaks was proposed
by Mulliner et al. [25]. Kantola et al. developed a heuristic policy to
guide developers in writing safer apps [18]. Zhang et al. proposed
monitoring network activities to identify stealth malwares [40].
7. CONCLUSIONS AND FUTURE WORK
We reported our ﬁndings in a large-scale inter-app ICC analy-
sis for detecting collusions and privilege escalations. Accuracy
and scalability are our key features, which we achieved through a
new general-purpose Android intent resolution tool, database query
systems, and pragmatic program-analysis execution management.
Besides superior accuracy and runtime compared with state-of-the-
art solutions, our analysis produces a number of real-world collusive
data leak and privilege escalation pairs and a myriad of interesting
statistics on ICC security. We have open-sourced our entire tool-
suite on GitHub19 and have made our database available20 for other
researchers.
19
20
https://github.com/dialdroid-android/
http://amiangshu.com/dialdroid/
Acknowledgments
This research is supported by the DARPA APAC award FA8750-15-
2-0076. The authors would like to thank Barbara Ryder, Xinming
(Simon) Ou, Timothy Fraser, Michael Gordon, Matthew Might, and
Michael Ernst for their helpful suggestions and feedback.
8. REFERENCES
[1] Y. Aafer, W. Du, and H. Yin. Droidapiminer: Mining
API-level features for robust malware detection in Android. In
Proc. of the Security and Privacy in Communication
Networks, pages 86–103. 2013.
[2] D. Arp, M. Spreitzenbarth, M. Hubner, H. Gascon, and
K. Rieck. DREBIN: Effective and explainable detection of
Android malware in your pocket. In Proc. of the Network and
Distributed System Security Symposium (NDSS), 2014.
[3] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise
context, ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint
analysis for android apps. In Proc. of the 35th ACM SIGPLAN
Conference on Programming Language Design and
Implementation, PLDI ’14, pages 259–269, 2014.
[4] H. Bagheri, A. Sadeghi, J. Garcia, and S. Malek. COVERT:
Compositional analysis of Android inter-app permission
leakage. IEEE Transactions in Software Engineering,
41(9):866–886, 2015.
[5] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, and A.-R.
Sadeghi. XManDroid: A new Android evolution to mitigate
privilege escalation attacks. Technische Universität Darmstadt,
Technical Report TR-2011-04, 2011.
[6] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi,
and B. Shastry. Towards taming privilege-escalation attacks
on Android. In Proc. of the Network and Distributed System
Security Symposium (NDSS), 2012.
[7] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and
ﬁne-grained mandatory access control on Android for diverse
security and privacy policies. In Proc. of the 22nd USENIX
Security Symposium, pages 131–146, 2013.
[8] H. Chen, D. He, S. Zhu, and J. Yang. Toward Detecting
Collusive Ranking Manipulation Attackers in Mobile App
Markets. In Proc. of the ACM Asia Conference on Computer
and Communications Security (ASIACCS’ 17), 2017.
[9] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing
inter-application communication in android. In Proc. of the
9th International Conference on Mobile systems, Applications,
and Services, pages 239–252, 2011.
[10] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy.
Privilege escalation attacks on Android. In Proc. of the
International Conference on Information Security, pages
346–360, 2011.
[11] E. Duan. DressCode and its potential impact for enterprise,
September 2016.
http://blog.trendmicro.com/trendlabs-security-intelligence/
dresscode-potential-impact-enterprises/.
[12] K. O. Elish, X. Shu, D. D. Yao, B. G. Ryder, and X. Jiang.
Proﬁling user-trigger dependence for Android malware
detection. Computers & Security, 49:255–273, 2015.
[13] K. O. Elish, D. Yao, and B. G. Ryder. On the need of precise
inter-app ICC classiﬁcation for detecting Android malware
collusions. In Proc. of the IEEE Mobile Security Technologies
(MoST), 2015.
[14] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P.
Cox, J. Jung, P. McDaniel, and A. N. Sheth. Taintdroid: an
information-ﬂow tracking system for realtime privacy
monitoring on smartphones. ACM Transactions on Computer
Systems (TOCS), 32(2):5, 2014.
[15] M. I. Gordon, D. Kim, J. H. Perkins, L. Gilham, N. Nguyen,
and M. C. Rinard. Information ﬂow analysis of Android
applications in DroidSafe. In Proc. of the Network and
Distributed System Security Symposium, 2015.
[16] R. Hay, O. Tripp, and M. Pistoia. Dynamic detection of
inter-application communication vulnerabilities in Android. In
Proc. of the ACM International Symposium on Software
Testing and Analysis, pages 118–128, 2015.
[17] Y. Jing, G.-J. Ahn, A. Doupé, and J. H. Yi. Checking
intent-based communication in Android with intent space
analysis. In Proc. of the ACM Asia Conference on Computer
and Communications Security, pages 735–746, 2016.
[18] D. Kantola, E. Chin, W. He, and D. Wagner. Reducing attack
surfaces for intra-application communication in android. In
Proc. of the second ACM workshop on Security and privacy in
smartphones and mobile devices, pages 69–80, 2012.
[19] W. Klieber, L. Flynn, A. Bhosale, L. Jia, and L. Bauer.
Android taint ﬂow analysis for app sets. In Proc. of the 3rd
ACM SIGPLAN International Workshop on the State of the Art
in Java Program Analysis, pages 1–6. ACM, 2014.
[20] L. Li, A. Bartel, T. F. Bissyandé, J. Klein, and Y. Le Traon.
Apkcombiner: combining multiple android apps to support
inter-app analysis. In IFIP International Information Security
Conference, pages 513–527. 2015.
[21] L. Li, A. Bartel, T. F. D. A. Bissyande, J. Klein, Y. Le Traon,
S. Arzt, S. Rasthofer, E. Bodden, D. Octeau, and P. McDaniel.
IccTA: detecting inter-component privacy leaks in Android
apps. In Proc. of the IEEE/ACM 37th IEEE International
Conference on Software Engineering, pages 280–291, 2015.
[22] K. Lu, Z. Li, V. P. Kemerlis, Z. Wu, L. Lu, C. Zheng, Z. Qian,
W. Lee, and G. Jiang. Checking more and alerting less:
Detecting privacy leakages via enhanced data-ﬂow analysis
and peer voting. In Proc. of the Network and Distributed
System Security Symposium (NDSS), 2015.
[23] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. CHEX: Statically
vetting Android apps for component hijacking vulnerabilities.
In Proc. of the 2012 ACM conference on Computer and
communications security, pages 229–240, 2012.
[24] C. Marforio, H. Ritzdorf, A. Francillon, and S. Capkun.
Analysis of the communication between colluding
applications on modern smartphones. In Proc. of the Annual
Computer Security Applications Conference, pages 51–60,
2012.
[25] C. Mulliner, J. Oberheide, W. Robertson, and E. Kirda.
PatchDroid: Scalable third-party security patches for Android
devices. In ACM Annual Computer Security Applications
Conference, pages 259–268, 2013.
[26] D. Octeau, S. Jha, M. Dering, P. McDaniel, A. Bartel, L. Li,
J. Klein, and Y. Le Traon. Combining static analysis with
probabilistic models to enable market-scale android
inter-component analysis. In Proc. of the 43rd Annual ACM
SIGPLAN-SIGACT Symposium on Principles of Programming
Languages, pages 469–484, 2016.
[27] D. Octeau, S. Jha, and P. McDaniel. Retargeting Android
applications to Java bytecode. In Proc. of the ACM SIGSOFT
20th International Symposium on the Foundations of Software
Engineering, pages 6:1–6:11, 2012.
[28] D. Octeau, D. Luchaup, M. Dering, S. Jha, and P. McDaniel.
Composite Constant Propagation: Application to Android
Inter-Component Communication Analysis. In Proc. of the
International Conference on Software Engineering (ICSE),
pages 77–88, 2015.
[29] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein,
and Y. Le Traon. Effective inter-component communication
mapping in Android: An essential step towards holistic
security analysis. In Proc. of the 22nd USENIX security
symposium, pages 543–558, 2013.
[30] H. Peng, C. Gates, B. Sarma, N. Li, Y. Qi, R. Potharaju,
C. Nita-Rotaru, and I. Molloy. Using probabilistic generative
models for ranking risks of Android apps. In Proc. of the
ACM conference on Computer and communications security,
pages 241–252, 2012.
[31] S. Rasthofer, S. Arzt, and E. Bodden. A machine-learning
approach for classifying and categorizing Android sources
and sinks. In Proc. of the Network and Distributed System
Security Symposium (NDSS), 2014.
[32] T. Ravitch, E. R. Creswick, A. Tomb, A. Foltzer, T. Elliott,
and L. Casburn. Multi-App security analysis with FUSE:
Statically detecting Android app collusion. In Proc. of the
ACM Program Protection and Reverse Engineering Workshop,
2014.
[33] D. Sbîrlea, M. G. Burke, S. Guarnieri, M. Pistoia, and
V. Sarkar. Automatic detection of inter-application permission
leaks in Android applications. IBM Journal of Research and
Development, 57(6):10–1, 2013.
[34] R. Vallée-Rai, E. Gagnon, L. Hendren, P. Lam, P. Pominville,
and V. Sundaresan. Optimizing java bytecode using the soot
framework: Is it feasible? In Proc. of the International
conference on compiler construction, pages 18–34, 2000.
[35] F. Wei, S. Roy, X. Ou, et al. Amandroid: A precise and
general inter-component data ﬂow analysis framework for
security vetting of Android apps. In Proc. of the ACM SIGSAC
Conference on Computer and Communications Security
(CCS), pages 1329–1341, 2014.
[36] B. Wolfe, K. Elish, and D. D. Yao. Comprehensive behavior
proﬁling for proactive android malware detection. In Proc. of
the International Conference on Information Security, pages
328–344. Springer, 2014.
[37] M. Y. Wong and D. Lie. IntelliDroid: A targeted input
generator for the dynamic analysis of Android malware. In
Proc. of the Network and Distributed System Security
Symposium (NDSS), 2016.
[38] K. Yang, J. Zhuge, Y. Wang, L. Zhou, and H. Duan.
IntentFuzzer: Detecting capability leaks of Android
applications. In ACM Symposium on Information, Computer
and Communications Security, pages 531–536, 2014.
[39] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang.
AppIntent: analyzing sensitive data transmission in Android
for privacy leakage detection. In Proc. of the ACM SIGSAC
conference on Computer and communications security, pages
1043–1054, 2013.
[40] H. Zhang, D. Yao, N. Ramakrishnan, and Z. Zhang. Causality
reasoning about network events for detecting stealthy malware
activities. Computers & Security, 58:180–198, 2016.
[41] M. Zhang and H. Yin. AppSealer: Automatic generation of
vulnerability-speciﬁc patches for preventing component
hijacking attacks in Android applications. In Proc. of the