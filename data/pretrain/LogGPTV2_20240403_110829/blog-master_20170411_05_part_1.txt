## 快速入门PostgreSQL应用开发与管理 - 5 数据定义  
##### [TAG 31](../class/31.md)
### 作者                                                                 
digoal                                                         
### 日期                                                                                                                             
2017-04-11                                                       
### 标签                                                          
PostgreSQL , Linux        
----                                                                                                                          
## 背景   
## 本章大纲
### 1. 数据类型  
### 2. 数据操作  
### 3. 表管理  
### 4. 视图  
### 5. 约束  
### 6. RLS（行安全策略）  
## 第三章：数据定义  
### 1. 数据类型  
https://www.postgresql.org/docs/9.6/static/datatype.html  
1、数值  
Name|   Storage Size|   Description|    Range  
---|---|---|---  
smallint|       2 bytes|        small-range integer|    -32768 to +32767  
integer|        4 bytes|        typical choice for integer|     -2147483648 to +2147483647  
bigint| 8 bytes|        large-range integer|    -9223372036854775808 to +9223372036854775807  
decimal|        variable|       user-specified precision, exact|        up to 131072 digits before the decimal point; up to 16383 digits after the decimal point  
numeric|        variable|       user-specified precision, exact|        up to 131072 digits before the decimal point; up to 16383 digits after the decimal point  
real|   4 bytes|        variable-precision, inexact|    6 decimal digits precision  
double precision|       8 bytes|        variable-precision, inexact|    15 decimal digits precision  
smallserial|    2 bytes|        small autoincrementing integer| 1 to 32767  
serial| 4 bytes|        autoincrementing integer|       1 to 2147483647  
bigserial|      8 bytes|        large autoincrementing integer| 1 to 9223372036854775807  
NUMERIC(precision, scale)  
精度够用时，建议float8，性能比numeric更好。  
扩展浮点精度  
```  
postgres=# set extra_float_digits=3;  
SET  
```  
2、货币（float8剪切的domain）  
Name|   Storage Size|   Description|    Range  
---|---|---|---  
money|  8 bytes|        currency amount|        -92233720368547758.08 to +92233720368547758.07  
3、字符串  
Name|   Description  
---|---  
character varying(n), varchar(n)|       variable-length with limit  
character(n), char(n)|  fixed-length, blank padded  
text|   variable unlimited length  
长度定义为字符长度，并非字节长度。  
4、字节流  
Name|   Storage Size|   Description  
---|---|---  
bytea|  1 or 4 bytes plus the actual binary string|     variable-length binary string  
输入格式  
Decimal Octet Value|    Description|    Escaped Input Representation|   Example|        Output Representation  
---|---|---|---|---  
0|      zero octet|     ```E'\\000'```| ```SELECT E'\\000'::bytea;```|  ```\000```  
39|     single quote|   ```'''' or E'\\047'```| ```SELECT E'\''::bytea;```|     ```'```  
92|     backslash|      ```E'\\\\' or E'\\134'```|      ```SELECT E'\\\\'::bytea;```|   ```\\```  
0 to 31 and 127 to 255| "non-printable" octets| ```E'\\xxx' (octal value)```|   ```SELECT E'\\001'::bytea;```|  ```\001```  
输出格式  
Decimal| Octet Value|   Description|    Escaped Output Representation|  Example Output Result  
---|---|---|---|---  
92|     backslash|      ```\\```|       ```SELECT E'\\134'::bytea;```|  ```\\```  
0 to 31 and 127 to 255| "non-printable" octets| ```\xxx (octal value)```|       ```SELECT E'\\001'::bytea;```|  ```\001```  
32 to 126|      "printable" octets|     ```client character set representation```|      ```SELECT E'\\176'::bytea;```|  ```~```  
5、日期、时间  
Name|   Storage Size|   Description|    Low Value|      High Value|     Resolution  
---|---|---|---|---|---  
timestamp [ (p) ] [ without time zone ]|        8 bytes|        both date and time (no time zone)|      4713 BC|        294276 AD|      1 microsecond / 14 digits  
timestamp [ (p) ] with time zone|       8 bytes|        both date and time, with time zone|     4713 BC|        294276 AD|      1 microsecond / 14 digits  
date|   4 bytes|        date (no time of day)|  4713 BC|        5874897 AD|     1 day  
time [ (p) ] [ without time zone ]|     8 bytes|        time of day (no date)|  ```00:00:00```| ```24:00:00```| 1 microsecond / 14 digits  
time [ (p) ] with time zone|    12 bytes|       times of day only, with time zone|      ```00:00:00+1459```|    ```24:00:00-1459```|    1 microsecond / 14 digits  
interval [ fields ] [ (p) ]|    16 bytes|       time interval|  -178000000 years|       178000000 years|1 microsecond / 14 digits  
6、布尔  
Name|   Storage Size|   Description  
---|---|---  
boolean|        1 byte| state of true or false  
7、枚举  
```  
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');  
CREATE TABLE person (  
    name text,  
    current_mood mood  
);  
INSERT INTO person VALUES ('Moe', 'happy');  
SELECT * FROM person WHERE current_mood = 'happy';  
 name | current_mood   
------+--------------  
 Moe  | happy  
(1 row)  
```  
枚举顺序，与插入顺序一致  
8、几何  
Name|   Storage Size|   Description|    Representation  
---|---|---|---  
point|  16 bytes|       Point on a plane|       (x,y)  
line|   32 bytes|       Infinite line|  {A,B,C}  
lseg|   32 bytes|       Finite line segment|    ((x1,y1),(x2,y2))  
box|    32 bytes|       Rectangular box|        ((x1,y1),(x2,y2))  
path|   16+16n bytes|   Closed path (similar to polygon)|       ((x1,y1),...)  
path|   16+16n bytes|   Open path|      [(x1,y1),...]  
polygon|        40+16n bytes|   Polygon (similar to closed path)|       ((x1,y1),...)  
circle| 24 bytes|       Circle|  (center point and radius)  
9、网络  
Name|   Storage Size|   Description  
---|---|---  
cidr|   7 or 19 bytes|  IPv4 and IPv6 networks  
inet|   7 or 19 bytes|  IPv4 and IPv6 hosts and networks  
macaddr|        6 bytes|        MAC addresses  
10、比特流  
```  
CREATE TABLE test (a BIT(3), b BIT VARYING(5));  
INSERT INTO test VALUES (B'101', B'00');  
INSERT INTO test VALUES (B'10', B'101');  
ERROR:  bit string length 2 does not match type bit(3)  
INSERT INTO test VALUES (B'10'::bit(3), B'101');  
SELECT * FROM test;  
  a  |  b  
-----+-----  
 101 | 00  
 100 | 101  
```  
11、全文检索  
tsvector  
```  
SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector;  
                      tsvector  
----------------------------------------------------  
 'a' 'and' 'ate' 'cat' 'fat' 'mat' 'on' 'rat' 'sat'  
```  
tsquery  
```  
SELECT 'fat & rat'::tsquery;  
    tsquery      
---------------  
 'fat' & 'rat'  
SELECT 'fat & (rat | cat)'::tsquery;  
          tsquery            
---------------------------  
 'fat' & ( 'rat' | 'cat' )  
SELECT 'fat & rat & ! cat'::tsquery;  
        tsquery           
------------------------  
 'fat' & 'rat' & !'cat'  
```  
全文检索例子  
```  
SELECT to_tsvector( 'postgraduate' ) @@ to_tsquery( 'postgres:*' );  
 ?column?  
----------  
 t  
```  
中文全文检索  
https://github.com/jaiminpan/pg_jieba     
```  
postgres=# select to_tsvector('jiebacfg','中华人民共和国万岁，如何加快PostgreSQL结巴分词加载速度');    
                                       to_tsvector                                            
------------------------------------------------------------------------------------------    
 'postgresql':6 '万岁':2 '中华人民共和国':1 '分词':8 '加快':5 '加载':9 '结巴':7 '速度':10    
(1 row)    
Time: 0.522 ms    
postgres=# select 8*1000000/14.175527;    
      ?column?           
---------------------    
 564352.916120860974    
(1 row)    
Time: 0.743 ms    
```  
12、UUID  
```  
create extension "uuid-ossp";  
```  
Function|       Description  
---|---  
uuid_generate_v1()|     This function generates a version 1 UUID. This involves the MAC address of the computer and a time stamp. Note that UUIDs of this kind reveal the identity of the computer that created the identifier and the time at which it did so, which might make it unsuitable for certain security-sensitive applications.  
uuid_generate_v1mc()|   This function generates a version 1 UUID but uses a random multicast MAC address instead of the real MAC address of the computer.  
uuid_generate_v3(namespace uuid, name text)|    This function generates a version 3 UUID in the given namespace using the specified input name. The namespace should be one of the special constants produced by the uuid_ns_*() functions shown in Table F-34. (It could be any UUID in theory.) The name is an identifier in the selected namespace. For example: SELECT uuid_generate_v3(uuid_ns_url(), 'http://www.postgresql.org'); The name parameter will be MD5-hashed, so the cleartext cannot be derived from the generated UUID. The generation of UUIDs by this method has no random or environment-dependent element and is therefore reproducible.  
uuid_generate_v4()|     This function generates a version 4 UUID, which is derived entirely from random numbers.  
uuid_generate_v5(namespace uuid, name text)|    This function generates a version 5 UUID, which works like a version 3 UUID except that SHA-1 is used as a hashing method. Version 5 should be preferred over version 3 because SHA-1 is thought to be more secure than MD5.  
13、XML  
```  
To produce a value of type xml from character data, use the function xmlparse:  
XMLPARSE ( { DOCUMENT | CONTENT } value)  
Examples:  
XMLPARSE (DOCUMENT 'Manual...')  
XMLPARSE (CONTENT 'abcbarfoo')  
```  
14、JSON  
json内部支持的类型  
JSON primitive type|    PostgreSQL type|        Notes  
---|---|---  
string| text|   \u0000 is disallowed, as are non-ASCII Unicode escapes if database encoding is not UTF8  
number| numeric|        NaN and infinity values are disallowed  
boolean|        boolean|        Only lowercase true and false spellings are accepted  
null|   (none)| SQL NULL is a different concept  
json和jsonb例子  
```  
SELECT '{"bar": "baz", "balance": 7.77, "active":false}'::json;  
                      json                         
-------------------------------------------------  
 {"bar": "baz", "balance": 7.77, "active":false}  
(1 row)  
SELECT '{"bar": "baz", "balance": 7.77, "active":false}'::jsonb;  
                      jsonb                         
--------------------------------------------------  
 {"bar": "baz", "active": false, "balance": 7.77}  
(1 row)  
SELECT '{"reading": 1.230e-5}'::json, '{"reading": 1.230e-5}'::jsonb;  
         json          |          jsonb            
-----------------------+-------------------------  
 {"reading": 1.230e-5} | {"reading": 0.00001230}  
(1 row)  
```  
15、数组  
```  
postgres=# select array(select generate_series(1,10));  
         array            
------------------------  
 {1,2,3,4,5,6,7,8,9,10}  
(1 row)  
postgres=# select array['a','b','c'];  
  array    
---------  
 {a,b,c}  
(1 row)  
postgres=# select array['a','b','c'] @> array['a'];  
 ?column?   
----------  
 t  
(1 row)  
```  
数组操作  
```  
                                                      List of functions  
   Schema   |          Name           | Result data type |                    Argument data types                    |  Type    
------------+-------------------------+------------------+-----------------------------------------------------------+--------  
 pg_catalog | array_agg               | anyarray         | anyarray                                                  | agg  
 pg_catalog | array_agg               | anyarray         | anynonarray                                               | agg  
 pg_catalog | array_agg_array_finalfn | anyarray         | internal, anyarray                                        | normal  
 pg_catalog | array_agg_array_transfn | internal         | internal, anyarray                                        | normal  
 pg_catalog | array_agg_finalfn       | anyarray         | internal, anynonarray                                     | normal  
 pg_catalog | array_agg_transfn       | internal         | internal, anynonarray                                     | normal  
 pg_catalog | array_append            | anyarray         | anyarray, anyelement                                      | normal  
 pg_catalog | array_cat               | anyarray         | anyarray, anyarray                                        | normal  
 pg_catalog | array_dims              | text             | anyarray                                                  | normal  
 pg_catalog | array_eq                | boolean          | anyarray, anyarray                                        | normal  
 pg_catalog | array_fill              | anyarray         | anyelement, integer[]                                     | normal  
 pg_catalog | array_fill              | anyarray         | anyelement, integer[], integer[]                          | normal  
 pg_catalog | array_ge                | boolean          | anyarray, anyarray                                        | normal  
 pg_catalog | array_gt                | boolean          | anyarray, anyarray                                        | normal  
 pg_catalog | array_in                | anyarray         | cstring, oid, integer                                     | normal  
 pg_catalog | array_larger            | anyarray         | anyarray, anyarray                                        | normal  
 pg_catalog | array_le                | boolean          | anyarray, anyarray                                        | normal  
 pg_catalog | array_length            | integer          | anyarray, integer                                         | normal  
 pg_catalog | array_lower             | integer          | anyarray, integer                                         | normal  
 pg_catalog | array_lt                | boolean          | anyarray, anyarray                                        | normal  
 pg_catalog | array_ndims             | integer          | anyarray                                                  | normal  
 pg_catalog | array_ne                | boolean          | anyarray, anyarray                                        | normal  
 pg_catalog | array_out               | cstring          | anyarray                                                  | normal  
 pg_catalog | array_position          | integer          | anyarray, anyelement                                      | normal  
 pg_catalog | array_position          | integer          | anyarray, anyelement, integer                             | normal  
 pg_catalog | array_positions         | integer[]        | anyarray, anyelement                                      | normal  
 pg_catalog | array_prepend           | anyarray         | anyelement, anyarray                                      | normal  
 pg_catalog | array_recv              | anyarray         | internal, oid, integer                                    | normal  
 pg_catalog | array_remove            | anyarray         | anyarray, anyelement                                      | normal  
 pg_catalog | array_replace           | anyarray         | anyarray, anyelement, anyelement                          | normal  
 pg_catalog | array_send              | bytea            | anyarray                                                  | normal  
 pg_catalog | array_smaller           | anyarray         | anyarray, anyarray                                        | normal  
 pg_catalog | array_to_json           | json             | anyarray                                                  | normal  
 pg_catalog | array_to_json           | json             | anyarray, boolean                                         | normal  
 pg_catalog | array_to_string         | text             | anyarray, text                                            | normal  
 pg_catalog | array_to_string         | text             | anyarray, text, text                                      | normal  
 pg_catalog | array_to_tsvector       | tsvector         | text[]                                                    | normal  
 pg_catalog | array_typanalyze        | boolean          | internal                                                  | normal  
 pg_catalog | array_upper             | integer          | anyarray, integer                                         | normal  
 pg_catalog | arraycontained          | boolean          | anyarray, anyarray                                        | normal  
 pg_catalog | arraycontains           | boolean          | anyarray, anyarray                                        | normal  
 pg_catalog | arraycontjoinsel        | double precision | internal, oid, internal, smallint, internal               | normal  