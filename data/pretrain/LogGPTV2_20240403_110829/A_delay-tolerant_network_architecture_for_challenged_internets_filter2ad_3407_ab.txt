check is performed.  The later problem has been (and remains)
a  problem  for  the  Internet,  but  in  that  case  the  issue  is
significantly worse because of the desire for small end-to-end
delays.
2.3 End System Characteristics
Limited  Longevity    In  some  challenged  networks,  end  nodes
are placed in hostile environments.  This is especially true for
sensor  networks,  military  networks,  and  networks  of  devices
used by emergency response personnel.  In such cases, network
nodes  may  not  last  long,  due  to  environmental  dangers  or
power exhaustion.  If such networks also remain disconnected
for long periods of time, it is entirely possible that the round-
trip or even one-way delivery time of a particular message may
exceed the sending node’s lifetime.  In such cases it is useless
to utilize conventional end-to-end acknowledgment schemes to
help  verify  delivery.    Rather,  the  responsibility  for  reliable
delivery  should  be  delegated  to  some  other  party,  and  any
notification of successful or unsuccessful delivery needs to be
delivered to a delegate that remains operational.  
Low Duty Cycle Operation. When nodes are deployed in areas
lacking power infrastructure, their communication patterns are
often scheduled a-priori.  In some cases (e.g. battery powered
sensors), duty cycles of well under 1% are desirable in order to
achieve  a  reasonable  longevity  of  the  entire  network.    Such
devices would typically collect data at some periodic rate, and
report it at some (perhaps less frequent) rate.  For these types
of  networks,  transmission  scheduling,  in  concert  with  path
selection, raises special considerations for routing.
Limited  Resources    In  several  of  the  challenged  network
examples  above,  nodes  with  limited  memory  and  processing
capability are used.  Consider, for example, an instrument with
limited memory tasked with acquiring sensor readings of  some
random physical phenomena.  It is undesirable to prohibit the
instrument from collecting further samples because its memory
is fully utilized with copies of in-transit data.  In addition, the
amount of time the end-nodes will need to keep retransmission
buffers  is  at  least  the  round-trip-time  times  the  expected
number of retransmissions (plus 1), which can be large for high
latency  and/or  lossy  paths.    While  the  node  may  be  able  to
implement  a  powered  down  mode  of  operation  during  this
interval,  provided 
it  has  nonvolatile  storage,  doing  so
considerably  complicates  the  system  design,  particularly  if
other  asynchronous  messages  may  have  to  be  received  or
unexpected  physical  events  of  interest  occur.    This  example
suggests  that  if  reliability  is  to  be  incorporated  into  the
network design, end nodes should be provided a way to empty
their retransmission buffers comparatively quickly, and to not
necessarily have to wait for an end-to-end acknowledgment.
they  are  necessary 
 FIX THE INTERNET PROTOCOLS?
3.
3.1 PEPs, Boosters and Proxies
To  combat  the  various  problems  with  the  Internet  protocols
over  challenged  networks  (or  to  enhance  their  performance
over  subnetworks  with  special  features),  several  types  of  in-
network  entities  (so-called  “middle  boxes”)  have  been
developed  that  modify  protocol  behavior.    Investigations  of
link  repair  approaches,  primarily  for  satellite  and  terrestrial
wireless  Internet  access  via  TCP/IP,  have  resulted  in  the
development  of  Performance  Enhancing  Proxies  (PEPs)  [2]
and  protocol  boosters  [9].    These  agents,  which  actively
modify  the  end-to-end  data  stream,  in  effect  “fool”  TCP/IP-
based  end  stations  into  operating  more  efficiently  over  paths
involving links with poor or unusual performance.
Use  of  PEPs  is  discouraged  (by  the  IETF  [2])  except  for
particular  environments  where 
for
‘‘reasonable’’  performance.    This  restriction  is  due  to  their
fragility.    In  particular,  they  may  contain  state  which  is
necessary  for  connection  operation  (thereby  violating  the
Internet  fate  sharing  principles  [7]  which  suggest  connection
state should reside only in end stations), they confound end-to-
end  diagnostics  and  reliability  by  (partially)  changing  the
communicating  endpoint,  they  significantly  increase  system
complexity if mobility is frequent (due to the need to migrate
state when end-nodes move), and many require both directions
of  data  to  flow  through  the  PEP  (a  problem  if  asymmetric
routing  is  used).    They  also  pose  a  significant  challenge  for
end-to-end  security  mechanisms 
the
transport  layer  such  as  IPSEC.    While  protocol  boosters  are
conceived  with  the  idea  that  they  are  entirely  transparent  to
end-protocols,  this  assumption  limits  their  overall  ability  to
improve  performance  when  subnet  conditions  are  especially
bad (e.g. disconnected).
An alternative to boosters and PEPs involves application-layer
proxies 
Internet-to-”special
network” name mapping and protocol translation.  Proxies are
generally used at the edge of such special networks, and allow
interoperability  with  the  Internet  without  requiring  IP  routers
to  exist  inside.    This  approach  is  important,  as  there  is  often
significant  reluctance  to  deploy  IP  protocols  inside  these
challenged  networks  due  to  concerns  of  overhead,  address
management, or protocol implementation difficulties.
The  disadvantage  of  proxies  are  in  their  specificity.    Proxies
usually  use  one  of  two  approaches:  they  respond  to  a
specialized set of commands specific to the special network, or
act as raw data conduits.  The first approach limits the ability
to  re-use  the  proxies  for  different  applications;  the  second
method  fails  to  take  advantage  of  any  special  resources  the
proxy  node  may  have  to  offer  (such  as  storage  or  processing
capabilities),  and  requires  applications  communicating  with
the proxy to employ specialized protocols that are compatible
with those of the special networks’. Finally, no general inter-
proxy routing capability is currently used, meaning that if any
dynamic routing is performed between proxies it is specific to
the  types  of  proxies  in  question.    It  would  be  generally  more
attractive to standardize on a set of proxy-based services which
provide I/O to and through the challenged network, if possible,
using a common set of methods.
implemented  below 
that  provide  a 
specialized 
3.2 Electronic Mail
Electronic  mail,  an  asynchronous  message  delivery  system,
provides an abstraction that comes close to addressing many of
the  problems  posed  by  challenged  networks.    In  particular,
flexible  naming,  asynchronous  message-based  operation,  and
in-band error reporting are particularly useful.  In addition,  it
has  been  shown  to  operate  over  a  rich  set  of  network
technologies  (an  especially  important  feature  prior  to  the
widespread use of the Internet standard electronic mail).  
Email  falls  short  due  to  its  lack  of  dynamic  routing,  weakly-
defined delivery semantics, and lack of consistent application
interface.  With respect to routing, existing approaches rely on
a  (statically  preconfigured)  set  of  mail  relays  which  provide
very  little  tolerance  to  network  outages. 
  The  delivery
semantics  of  electronic  mail  appear  to  be  mostly  reliable
delivery with  likely  failure  notification.    Messages  can  fail  to
be  delivered  due 
lack  of
intermediate  or  end-node  storage,  failure  of  underlying
transport protocols, or enforcement of policies on content (e.g.
content filtering or size restrictions).  When delivery succeeds,
end-to-end  acknowledgments  are  generally  not  provided
automatically. 
  Upon  failure,  the  original  message  and
accumulated  errors  are  generally  returned  to  the  sender,
possibly with additional information supplied to a third party.
While  this  diagnostic  information  is  extremely  useful,  the
typical end-user  has little direct ability to correct the problem.
to  mis-addressing,  persistent 
for 
is  problematic 
3.3 Motivation for an Additional Architecture 
While proxies, PEPs, and electronic mail can help to deal with
some of the problems posed by challenged internetworks, they
do  not  provide  a  complete  solution.    Disconnected  paths,
limited-capability/longevity  end  devices  with  potentially
specialized  protocol  stacks,  and  unusual  routing  (including
predictable or periodic connections) appears to preclude (or at
least  pose  serious  difficulties  for)  the  direct  use  of  IP’s
addressing  and  routing  features.    Furthermore,  its  forwarding
function  (which  drops  packets  if  a  next-hop  route  is  not
immediately  available) 
frequently-
disconnected  links.    With  respect  to  reliable  data  delivery,
Internet’s  idea  of  fate  sharing  suggests  that  per-connection
state  should  remain  only  in  end-stations,  because  a  failure  of
one  of  them  would  presumably  render  the  data  connection
essentially  useless.    In  many  challenged  environments,  this
assumption does not hold.  For example, it may be quite useful
to allow a node to “hand off” its end-node connection state if it
has  other  tasks  to  accomplish,  particularly  if  it  is  power  or
memory  limited.    Doing  so  would  not  violate  fate  sharing
entirely  (per  connection  state  would  not  be  required  in  all
intermediate nodes), but would represent a somewhat different
fate  sharing  behavior  than  is  implemented  in  the  current
Internet.
In addition to the problems associated with the network itself,
applications designed with assumptions of low delay can also
encounter problems when operated over challenged networks.
While it would be unfair to fault application designers for not
contemplating high delay and disconnection, some guidance as
to what APIs are appropriate for these situations is appropriate.
Indeed, it may be advantageous to provide applications with a
direct 
to  expect  ordinary  or
extraordinary  delays  and  allow  them  to  customize  their
behaviors accordingly [19].
Given  the  assumptions,  the  most  desirable  framework  for
supporting challenged internets would appear to be a network
service and API providing a sort of least common denominator
interface:    non-interactive  messaging.    Based  on  experience
with the Internet, we conclude such a system should combine
some  overlay  routing  capability  such  as  is  present  in  peer-to-
peer  systems  with  the  delay-tolerant  and  disconnection-
tolerant  properties  of  electronic  mail.    If  implemented  at  the
application layer (in the form of a proxy), such a system could
conceivably  provide  a  gateway  function  between  radically
dissimilar  networks.    These  considerations  together  motivate
the articulation of a new architecture, which we now describe.
indication  as 
to  whether 
R e g i o n
A
(In t e r n e t )
D a ta
{ A , R 2 }
D T N  G W
2
1
D a ta
{ B , R 3 }
{ A , R 3 }
D T N  G W
3
R e g i o n
B
B u s
T o u r
D T N  G W
4
D a ta
7
{ D , S a t e l l i t e }
R e g i o n
D
{ D ,R 6 }
D a ta
{ C ,R 6 }
D T N  G W
f
6
U s e r H o s t
{ A , U s e r H o s t }
B u s
{ B ,R 4 }
5
{ B , R 5 }
{ C ,R 5 }
D T N  G W
D a ta
R e g io n
C
(In tra n e t)
Figure 1.   DTN gateways interconnect regions running 
potentially dissimilar  protocol stacks.  By operating above the 
transport protocols in use on the incident networks, they provide virtual message switching, in-
network retransmission, and name mapping, allowing globally-interoperable names to be mapped 
4. A DELAY TOLERANT MESSAGE 
BASED OVERLAY ARCHITECTURE
the  existing  protocol  stacks 
The  architecture  proposed  here  for  interoperability  between
and  among  challenged  networks  is  called  the  delay  tolerant
networking architecture (DTN), and is based on an abstraction
of  message  switching.    Message  aggregates  are  known  as
“bundles”  and  are  adopted  from  [3].    The  routers  that  handle
them are called “bundle forwarders” or DTN gateways.
As  an  “overlay”  architecture,  DTN  is  intended  to  operate