R, v, aR, G, pk R, sign(sk R, hash1(nI | n
(cid:2)
R | G | gy)))
(cid:2)
(cid:2)
R, v, cfg I )
verifyVersion(n
uid = (nI , nR)
mode = (v, aR, pk R, G, hash 1)
check (cfg I , mode)
ms = kdf(gxy, nI | n
(cid:2)
R)
ms = kdf(gxy, nI | n
(cid:2)
R)
m3 = (gx, mac(ms, H(m1, m2, gx,−)))
(cid:2)(m1, m2, m3,−))
m4 = mac(ms, H
complete = true
complete = true
(a) A version downgrade ﬁx for TLS 1.3
(b) A version downgrade ﬁx for TLS 1.0–1.2
as good as supporting only TLS 1.3. Version 1.3 needs to be
always present as our version downgrade guarantees concern
downgrades from 1.3 to lower versions.
Corollary 1 (Downgrade security of TLS 1.0–1.3): Assume
DP ⊆ VDP and let VDP be such that VDP(cfg,·) implies that
cfg.role = I, that all public keys in the range of cfg.PKsR are
support at least TLS 1.3 and
honest and that cfg and cfg
activate the countermeasure. Given an adversary A against
the downgrade security of our sub-protocol, we construct
adversaries B and C running in about the same time as A
such that
(cid:2)
Advdowngrade
TLS1.0-1.3-sub, DP+VDP (A) ≤
Advversion
TLS1.0-1.3-sub, VDP(B) + Advdowngrade
TLS1.3-sub, DP
(C)
VIII. RELATED WORK
Downgrade as an attack vector: The role of downgrade
attacks in practical exploits against key exchange protocols
has been widely recognized [2, 10, 39, 43].
Moeller and Langley [38] propose the use of a Signaling
Cipher Suite Value (SCSV) in TLS that prevents version
downgrade attacks when all versions provide transcript au-
thentication. SSL 2.0 and 3.0 are being deprecated, partly to
prevent version downgrades as these versions do not support
TLS extensions [6, 41] and SSL 2.0 in any case does not pro-
vide transcript authentication. Similarly, ciphersuite hygiene is
frequently discussed in standard documents [32, 34].
Retroﬁtting countermeasures against downgrade attacks can
inadvertently introduce or amplify attack vectors. For instance,
as a countermeasure against version rollback in TLS-RSA,
clients incorporate the newest protocol version they support
in the PKCS#1-encrypted pre-master secret. Kl´ıma et al. [28]
showed that many server implementations revealed whether
the version in a decrypted secret matches the version adver-
tised in the ClientHello message, thus introducing a side-
channel that can be exploited to implement a decryption oracle.
Multi-ciphersuite security of SSH: Bergsma et al. [9] analyzed
SSH in a multi-ciphersuite setting. They split the protocol into
a negotiation phase NP and key-exchange phase SP, one for
each value of π.mode. They show that if each combination
NP(cid:13)SP is ACCE secure, then NP(cid:13) # »SP is multi-ciphersuite ACCE
secure. While they do not prove downgrade security per se,
the result of [21] adapted to SSH corresponds to a proof of
downgrade security for a DP predicate that guarantees that all
negotiable ciphersuites and versions provide ACCE security.
Sharing of public keys is admissible under the condition that
each sub-protocol is still secure in the presence of an auxiliary
oracle with long-term key functionality, e.g., signing, to simu-
late all other sub-protocols. In our terminology, the protocols
NP(cid:13)SP of Bergsma et al. [9] are single-mode restrictions of
NP(cid:13) # »SP. After their extension with auxiliary oracles providing
sufﬁcient access to long-term key functionalities, they are sub-
protocols in our sense. We prove downgrade protection for a
predicate DP that includes a much larger set of conﬁgurations.
Combined with the result of Bergsma et al. [9], our result
allows to prove multi-ciphersuite ACCE security when not all
sub-protocols in # »SP are ACCE secure, as long as we restrict
the protocol to conﬁgurations in DP that do not negotiate them
(cf. Theorem 1).
Previous downgrade security theorems about TLS 1.2: Dowl-
ing and Stebila [21] model ciphersuite and version negotiation
for TLS up to version 1.2 in the multi-ciphersuite setting
introduced by Bergsma et al. [9]. In our model, their result
corresponds to a proof of downgrade security for a DP
predicate that guarantees that all negotiable ciphersuites and
versions are strong enough to provide ACCE security and
that all public keys are honest and used at most by one
negotiable ciphersuite. Their optimality function ω is a more
limited variant of our Nego function and does not include
entity identiﬁers. Their main theorem, restated in §III-D, states
that under such conditions multi-mode authentication implies
downgrade security. This is a rather weak form of downgrade
security, but as shown by Logjam, TLS 1.2 does not provide
much stronger protection for clients. Servers that authenticate
clients can however obtain stronger guarantees.
523523
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
IX. CONCLUSION AND FUTURE WORK
REFERENCES
In this paper we put forward a methodology to analyze
the downgrade security of real-world key exchange protocols.
Our approach breaks down the complexity of analyzing a full
protocol by considering only a core sub-protocol that abstracts
away details that are irrelevant for negotiation of a protocol
mode. We showed that proving a simulatability property for
a sub-protocol is sufﬁcient for ensuring the soundness of our
methodology: proving the absence of downgrade attacks on the
sub-protocol is enough to guarantee the downgrade security
of the full protocol. In contrast, our methodology does not
provide completeness: it may very well be the case that a
particular choice of sub-protocol abstracts too much and ends
up allowing attacks that are impossible to turn into attacks
on the full protocol. Indeed, sometimes sieving through false
positives helped us to reﬁne our choice of sub-protocols.
Our analysis of exemplary protocols shows that many de-
signs fail to appropriately address downgrade security. We thus
advocate incorporating downgrade security as an integral part
of security models for key exchange protocols.
We believe that analyzing the downgrade security of typical
sub-protocols is within reach of automated tools. Symbolic
analysis tools like ProVerif [17] and Tamarin [37] seem par-
ticularly well suited to detect attacks on sub-protocols, helping
analysts to ﬁnd attacks against the full protocol or converge
toward a sub-protocol that rules out false positives. Computa-
tionally sound tools like CryptoVerif [16], on the other hand,
provide a means to prove the downgrade security of sub-
protocols and, provided the sub-protocol is a sound abstraction
of the full protocol, conclude that
the corresponding full
protocol also enjoys downgrade security. Finding a simulator
that witnesses the correctness of a sub-protocol appears to be a
more difﬁcult task that may require ingenuity. While this may
be out of reach of fully automated tools, interactive proofs
can be constructed and machine-checked with tools like e.g.
EasyCrypt [7]. Exploring the use of automated tools could
increase the conﬁdence in our proofs of downgrade security,
and perhaps ﬁnd other simpler or more practical attacks on
protocols for which we only showed negative results.
ACKNOWLEDGMENTS
We thank Cas Cremers, Travis Cross, and Antoine Delignat-
Lavaud for useful discussions, and the anonymous review-
ers for their valuable comments. The TLS 1.3 downgrade
countermeasures were formulated in collaboration with Eric
Rescorla, Martin Thomson, and the IETF TLS working group.
Karthikeyan Bhargavan is funded by the ERC grants CRYSP
and CIRCUS. Christina Brzuska is grateful to NXP for sup-
porting her chair for IT Security Analysis. This material is
based in part upon work supported by the U.S. National
Science Foundation under award EFRI-1441209; The Mozilla
Foundation; and the Ofﬁce of Naval Research under contract
N00014-11-1-0470.
[1] B. Aboba, L. Blunk, J. Vollbrecht, J. Carlson, and H. Lev-
(EAP),”
kowetz, “Extensible Authentication Protocol
IETF RFC 3748, 2004.
[2] D. Adrian, K. Bhargavan, Z. Durumeric, P. Gaudry,
M. Green, J. A. Halderman, N. Heninger, D. Springall,
E. Thom´e, L. Valenta, B. VanderSloot, E. Wustrow,
S. Zanella-B´eguelin, and P. Zimmermann, “Imperfect
forward secrecy: How Difﬁe-Hellman fails in practice,”
in 22nd ACM Conference on Computer and Communi-
cations Security, 2015, pp. 5–17.
[3] N. J. AlFardan and K. G. Paterson, “Lucky thirteen:
Breaking the TLS and DTLS record protocols,” in 2013
IEEE Symposium on Security and Privacy, 2013, pp.
526–540.
[4] N. J. AlFardan, D. J. Bernstein, K. G. Paterson, B. Po-
ettering, and J. C. N. Schuldt, “On the security of RC4
in TLS,” in 22th USENIX Security Symposium, 2013, pp.
305–320.
[5] N. Aviram, S. Schinzel, J. Somorovsky, N. Heninger,
M. Dankel, J. Steube, L. Valenta, D. Adrian, J. A. Hal-
derman, V. Dukhovni, E. K asper, S. Cohney, S. Engels,
C. Paar, and Y. Shavitt, “DROWN: Breaking TLS with
SSLv2,” https://drownattack.com/, Mar. 2016.
[6] R. Barnes, M. Thomson, A. Pironti, and A. Langley,
“Deprecating Secure Sockets Layer Version 3.0,” IETF
RFC 7568, 2015.
[7] G. Barthe, B. Gr´egoire, S. Heraud, and S. Zanella-
B´eguelin, “Computer-aided security proofs for the work-
ing cryptographer,” in Advances in Cryptology, CRYPTO
2011, 2011, pp. 71–90.
[8] M. Bellare and P. Rogaway, “Entity authentication and
key distribution,” in CRYPTO 1993, 1993, pp. 232–249.
[9] F. Bergsma, B. Dowling, F. Kohlar, J. Schwenk, and
D. Stebila, “Multi-ciphersuite security of the secure shell
(SSH) protocol,” in 21st ACM Conference on Computer
and Communications Security, 2014, pp. 369–381.
[10] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud,
C. Fournet, M. Kohlweiss, A. Pironti, P.-Y. Strub, and
J. Zinzindohoue, “A Messy State of the Union: Taming
the Composite State Machines of TLS,” in 2015 IEEE
Symposium on Security and Privacy, 2015, pp. 535–552.
[11] K. Bhargavan and G. Leurent, “Transcript collision at-
tacks: Breaking authentication in TLS, IKE, and SSH,”
in Network and Distributed System Security Symposium
(NDSS’16), 2016.
[12] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and
P. Strub, “Implementing TLS with veriﬁed cryptographic
security,” in 2013 IEEE Symposium on Security and
Privacy, 2013, pp. 445–459.
[13] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti,
P. Strub, and S. Zanella-B´eguelin, “Proving the TLS
handshake secure (as it is),” in CRYPTO 2014, 2014,
pp. 235–255.
[14] K. Bhargavan, C. Brzuska, C. Fournet, M. Green,
524524
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
M. Kohlweiss, and S. Zanella-Bguelin, “Downgrade re-
silience in key-exchange protocols,” Cryptology ePrint
Archive, Report 2016/072, 2016, http://eprint.iacr.org/.
[15] S. Blake-Wilson, M. Nystrom, D. Hopwood,
J. Mikkelsen, and T. Wright, “Transport Layer Security
(TLS) Extensions,” IETF RFC 3546, 2003.
[16] Blanchet, “A computationally sound mechanized prover
for security protocols,” Dependable and Secure Comput-
ing, IEEE Transactions on, vol. 5, no. 4, pp. 193–207,
2008.
[17] B. Blanchet, “An efﬁcient cryptographic protocol veriﬁer
based on prolog rules,” in 14th IEEE Computer Security
Foundations Workshop, CSFW 2014, 2001, pp. 82–96,.
[18] R. Canetti and H. Krawczyk, “Security analysis of IKE’s
signature-based key-exchange protocol,” in CRYPTO
2002, 2002, pp. 143–161.
[19] C. J. F. Cremers, “Key exchange in IPsec revisited:
Formal analysis of IKEv1 and IKEv2,” in 16th Euro-
pean Symposium on Research in Computer Security –
ESORICS 2011, 2011, pp. 315–334.
[20] A. Delignat-Lavaud and K. Bhargavan, “Network-based
origin confusion attacks against HTTPS virtual hosting,”
in 24th International Conference on World Wide Web,
WWW 2015, 2015, pp. 227–237.
[21] B. Dowling and D. Stebila, “Modelling ciphersuite and
version negotiation in the TLS protocol,” in 20th Aus-
tralasian Conference on Information Security and Pri-
vacy, ACISP 2015, 2015, pp. 270–288.
[22] B. Dowling, M. Fischlin, F. G¨unther, and D. Stebila, “A
cryptographic analysis of the TLS 1.3 handshake protocol
candidates,” in 22nd ACM Conference on Computer and
Communications Security, 2015, pp. 1197–1210.
[23] C. Garman, K. G. Paterson, and T. V. der Merwe, “At-
tacks only get better: Password recovery attacks against
RC4 in TLS,” in 24th USENIX Security Symposium,
2015, pp. 113–128.
[24] D. Harkins and D. Carrel, “The internet key exchange
(IKE),” IETF RFC 2409, 1998. [Online]. Available:
http://www.ietf.org/rfc/rfc2409.txt
[25] T. Jager, F. Kohlar, S. Sch¨age, and J. Schwenk, “On the
security of TLS-DHE in the standard model,” in CRYPTO
2012, 2012, pp. 273–293.
[26] M. Just and S. Vaudenay, “Authenticated multi-party key
agreement,” in ASIACRYPT 1996, 1996, pp. 36–49.
[27] C. Kaufman, P. Hoffman, Y. Nir, and P. Eronen, “Internet
Key Exchange Protocol Version 2 (IKEv2),” IETF RFC
5996, 2010.
[28] V. Kl´ıma, O. Pokorn´y, and T. Rosa, “Attacking RSA-
based sessions in SSL/TLS,” in 5th International Work-
shop on Cryptographic Hardware and Embedded Sys-
tems – CHES 2003. Springer, 2003, pp. 426–440.
[29] K. Kobara, S. Shin, and M. Streﬂer, “Partnership in
key exchange protocols,” in 2009 ACM Symposium on
Information, Computer and Communications Security,
ASIACCS 2009, 2009, pp. 161–170.
[30] H. Krawczyk, “SIGMA: the ’SIGn-and-MAc’ approach
to authenticated Difﬁe-Hellman and its use in the IKE
protocols,” in CRYPTO 2003, 2003, pp. 400–425.
[31] H. Krawczyk, K. G. Paterson, and H. Wee, “On the
security of the TLS protocol: A systematic analysis,” in
CRYPTO 2013, 2013, pp. 429–448.
[32] A. Langley, N. Modadugu, and B. Moeller, “Transport
Layer Security (TLS) False Start,” Internet Draft, 2010.
[33] G. Lowe, “A hierarchy of authentication speciﬁcation,” in
10th Computer Security Foundations Workshop (CSFW
’97).
IEEE Computer Society, 1997, pp. 31–44.
[34] R. H. M. Salter, E. Rescorla, “Suite B Proﬁle for Trans-
port Layer Security (TLS),” IETF RFC 5430, 2009.
[35] N. Mavrogiannopoulos, F. Vercauteren, V. Velichkov,
and B. Preneel, “A cross-protocol attack on the TLS
protocol,” in 19th ACM Conference on Computer and
Communications Security, 2012, pp. 62–72.
[36] C. Meadows, “Analysis of the internet key exchange
protocol using the NRL protocol analyzer,” in 1999 IEEE
Symposium on Security and Privacy, 1999, pp. 216–231.
[37] S. Meier, B. Schmidt, C. Cremers, and D. Basin, “The
tamarin prover for the symbolic analysis of security pro-
tocols,” in 25th International Conference on Computer
Aided Veriﬁcation, CAV 2013, 2013, pp. 696–701.
[38] B. Moeller and A. Langley, “TLS Fallback Signaling
Cipher Suite Value (SCSV) for Preventing Protocol
Downgrade Attacks,” IETF RFC 7507, 2015.
[39] B. M¨oller, T. Duong, and K. Kotowicz, “This POODLE
Bites: Exploiting The SSL 3.0 Fallback,” Available at
https://www.openssl.org/∼bodo/ssl-poodle.pdf, 2014.
[40] E. Rescorla, “The Transport Layer Security (TLS) Pro-
tocol Version 1.3, Draft 10,” Internet Draft, 2015.
[41] S. Turner and T. Polk, “Prohibiting Secure Sockets Layer
(SSL) Version 2.0,” IETF RFC 6176, 2011.
[42] University of Michigan, “Tracking the FREAK Attack,”
Available at https://freakattack.com/, November 2015.
[43] D. Wagner and B. Schneier, “Analysis of the SSL 3.0
protocol,” in 2nd USENIX Workshop on Electronic Com-
merce, WOEC 1996, 1996, pp. 29–40.
[44] T. Ylonen and C. Lonvick, “The secure shell (SSH)
authentication protocol,” IETF RFC 4252, 2006.
[45] ——, “The secure shell (SSH) transport layer protocol,”
IETF RFC 4253, 2006.
[46] P. Zimmermann, “RFC 6189bis: ZRTP: Media Path Key
Agreement for Unicast Secure RTP,” 2012.
525525
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply.