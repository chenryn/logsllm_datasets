具体原因是在导出 `RegistryImpl` 对象的时候，会传入 `permanent` 为 `true` :
就会导致 `new` `Target` 中会触发 `pinImpl` 方法：
然后在调用 `WeakRef.pin` 方法的时候，会触发 `DGCImpl` 的静态代码块。
也就是说在 `createRegistry` 的时候，会把 `DGCImpl` 和 `RegistryImpl` 封装的 `target` 都放到
`ObjectTable#objTable` 中。
##### 服务端处理请求过程
服务端处理 `DGCImpl`的请求过程和 `RegistryImpl` 非常类似，都是在`Transport#serviceCall`中处理，调用
`UnicastServerRef#dispatch`，再调用`UnicastServerRef#oldDispatch` 最后在
`UnicastServerRef#unmarshalCustomCallData` 中为之后进行`readObject` 操作的
`ConnectionInputStream.serialFilter` 赋值为 `DGCImpl::checkInput`。
`DGCImpl#checkInput`：
#### 通过 JVM 参数或者配置文件进行配置
##### 对于 RegistryImpl
在 `RegistryImpl` 中含有一个静态字段 `registryFilter` ，所以在 `new` `RegistryImpl`对象的时候，会调用
`initRegistryFilter` 方法进行赋值：
`initRegistryFilter`方法会先读取 JVM 的 `sun.rmi.registry.registryFilter` 的属性，或者是读取
`%JAVA_HOME%\conf\security\java.security` 配置文件中的
`sun.rmi.registry.registryFilter` 字段来得到 JEP 290 形式的 pattern ，再调用
`ObjectInputFilter.Config.createFilter2` 创建 `filter`并且返回。
`%JAVA_HOME\conf\security\java.security%` 文件：
`RegistryImpl#registryFilter`函数会先判断 `RegistryImpl#regstiryFilter` 字段是否为 null
来决定使用用户自定义的过滤规则，还是使用默认的白名单规则，如果不是 null 的话，会先调用用户自定义的过滤规则进行检查，接着判断检查结果，如果不是
`UNDECIDED` 就直接返回检查的结果，否则再使用默认的白名单检查。
##### 对于 DGCImpl
在 `DGCImpl` 中含有一个静态字段 `dgcFilter` ，所以在 `new` `DGCImpl`对象的时候，会调用
`initDgcFilter` 方法进行赋值：
`initDgcFilter`方法会先读取 JVM 的 `sun.rmi.transport.dgcFilter` 的属性，或者是读取
`%JAVA_HOME\conf\security\java.security%` 配置文件中的 `sun.rmi.transport.dgcFilter`
字段来得到 JEP 290 形式的 pattern ，再调用 `ObjectInputFilter.Config.createFilter` 创建
`filter`并且返回。
`%JAVA_HOME%\conf\security\java.security` 文件：
`DGCImpl#checkInput`和 `RegistryImpl#registryFilter`函数类似，会先判断
`DGCImpl#dgcFilter` 字段是否为 null 来决定使用用户自定义的过滤规则，还是使用默认的白名单规则，如果不是 null
的话，会先调用用户自定义的过滤规则进行检查，接着判断检查结果，如果不是 `UNDECIDED` 就直接返回检查的结果，否则再使用默认的白名单检查。
#### RMI 中 JEP 290 的绕过
网上公开资料广泛说的是：如果服务端"绑定"了一个对象，他的方法参数类型是`Object` 类型的方法时，则可以绕过 JEP 290。
其实剖析本质，是因为服务端 **导出** 的这个 ”普通的对象“ 对应的 `Target` 对象中的 `disp` （其实是
UnicastServerRef 对象) 的 `filter` 是 `null` 。
普通的对象导出的 `target` 如下：
下面我们来具体跟以下流程分析，首先准备客户端和服务端代码如下：
服务端和客户端共同包含接口的定义和实现：
服务端代码如下：
恶意客户端代码如下：
##### 普通对象的导出过程
普通对象的导出有两种方式，一种是继承 `UnicastRemoteObject` 对象，会在 `new` 这个对象的时候自动导出。第二种是如果没有继承
`UnicastRemoteObject` 对象，则需要调用`UnicastRemoteObject.export`进行手动导出。但其实第一种底层也是利用
`UnicastRemoteObject.export` 来导出对象的。
下面我们来讨论继承 `UnicastRemoteObject` 类的情况：
因为这个普通对象继承自 `UnicastRemoteObject`类，所以在 new 这个普通对象的时候会调用到 `UnicastRemoteObject`
的构造方法：
进而调用 `UnicastRemoteObject.exportObject` 方法：
`UnicastRemoteObject#exportObject` 方法中再使用 `UnicastServerRef#exportObject`
,这里可以看到在 `new` `UnicastRemoteObject` 的时候 **并没有传入 filter** ：
对比导出 `RegistryImpl` 对象的时候， `new` `UnicastRemoteObject` 对象传入了
`RegistryImpl::registryFilter`：
接着会调用 `UnicastServerRef.exportObject` 方法：
所以普通对象生成的 Target 对象的 disp 中 filter 就为 null ，另外这里的 skel 也为 null 。
后面导出 `Target` 的过程和 导出`RegistryImpl`对应的 `Target`是一样的，最后会将这个普通对象的 `Target` 放到
`objectTable#objTable`中。
绑定成功后的 `ObjectTable#objTable`:
##### 服务端处理请求的过程
同样处理请求的入口在 `Transport#serviceCall`，首先从输入流中读取 `id` , 匹配到 `RegistryImpl` 对象对应的
`Target` 。
然后取出 `disp` ,调用 `disp.dispatch` ：
首先由于 `skel` 为 `null` ，所以不会进入 `oldDispatch` , 像 `RegistryImpl` 和 `DGCImpl`
因为他们的 `skel` 不为 `null` ,所以会进入到 `oldDispatch`：
接着会匹配到方法，拿到方法的参数，接着进行反序列化：
`unmarshalCustomCallData` 方法:
`unmarshalValue` 方法对输入流中传入的参数进行反序列化：
执行 `in.readObject` 之后，成功弹出计算器：
##### 反制
利用上面这种方法绕过 JEP 290 去攻击 RMI 服务端，网上有一些工具，比如 rmitast 和 rmisout 。
但是对于使用 rmitast 或者 rmisout 这些工具，或者调用 `lookup()` 来试图攻击RMI 服务端 的时候，我们可以使用
如下的恶意服务端代码进行反制：
###### 反制 RegistryImpl_Stub.lookup
我们来看一下`RegistryImpl_Stub.lookup`对服务端返回的结果是怎么处理的，可以看见在
`RegistryImpl_Stub.lookup` 会直接对服务端返回的对象调用 `in.readObject` 方法，而 `in` 的
`serialFilter`在这里是为 `null` 的：
所以客户端在进行 `RegistryStub.lookup` 操作的时候会直接导致 RCE ：
同理 `RegistryStub.list` 也是如此：
但是用上面的服务端恶意代码并不能触发 RCE ，因为上面服务端恶意代码是利用 `Registry_skel` 来写入对象的，可以看到写入的是一个字符串数组：
###### 反制 rmitast
我们以 `rmitast` 中的 枚举模块为例：
步入 `enumerate.enumerate()` 里面是具体的实现原理：
首先 `Enumerate.connect(this.registry)` 返回的实际上是 `RegistryImpl_Stub` 对象，底层调用的是
`LocateRegistry.getRegistry` 方法。
然后调用 `this.registry.loadObjects()`, `this.list()` 实际调用的是
`RegistyImpl_Stub.list()` 方法，得到注册中心的所有绑定的对象名：
接着会调用 `this.loadObjects(names)`, 会调用 `this.lookup(name)` ，底层实际使用的是
`RegistryImpl_Stub.lookup()` 方法，上面分析过 `RegistryImpl_Stub.lookup`
会直接反序列化服务端传过来的恶意对象，并且 `readObject`时使用的`ObjectInputStream` 对象中的 `serialFilter`
是 `null`。
我们启动上面的恶意服务端，然后使用 RmiTaste 的 enum 模块：
运行之后会导致使用 RmiTast 的一端 RCE ：
# 总结
JEP 290 主要是在 `ObjectInputStream` 类中增加了一个`serialFilter`属性和一个 `filterChcek`
函数，其中 `serialFilter`就可以理解为过滤器。
在 `ObjectInputStream` 对象进行 `readObject` 的时候，内部会调用 `filterChcek`
方法进行检查，`filterCheck`方法中会对 ``serialFilter`属性进行判断，如果不是 `null` ,就会调用
`serialFilter.checkInput` 方法进行过滤。
设置过滤器本质就是设置 `ObjectInputStream` 的 `serialFilter` 字段值，设置过滤器可以分为设置全局过滤器和设置局部过滤器：
1.设置全局过滤器是指，通过修改 `Config.serialFilter`这个静态字段的值来达到设置所有 `ObjectInputStream`对象的
`serialFilter`值 。具体原因是因为 `ObjectInputStream`
的构造函数会读取`Config.serialFilter`的值赋值到自己的`serialFilter`字段上，所有就会导致所有 `new` 出来的
`ObjectInputStream`对象的 `serailFilter` 都为`Config.serialFilter`的值。
2.设置局部过滤器是指，在 `new` `ObjectInputStream` 的之后，再修改单个 `ObjectInputStream` 对象的
`serialFilter` 字段值。
# 参考
 JEP290的基本概念
 深入理解rmi原理
 JEP 290 官方文档
 Java序列化过滤器
 Java 8 函数式接口
 函数式接口和Lambda表达式深入理解
 “Java8系列”神奇的函数式接口