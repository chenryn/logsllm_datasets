接下来，你指定了 `--output file.gpg`。这可以是任何名字，不过惯例是给你要加密的文件的名称加上 `.gpg` 扩展名（所以 `message.txt` 会变成 `message.txt.gpg`）。
接下来，你输入 `—recipient PI:EMAIL`。这指定了一个相应的 GPG 密钥的电子邮件，这个密钥实际上在这个系统上还不存在。
有点迷惑？
工作原理是，你在这里指定的电子邮件必须与你本地系统中的公钥相联系。
通常情况下，这将是来自另外一个人的 GPG 公钥，你要用它来加密你的文件。之后，该文件将只能用该用户的私钥进行解密。
在这个例子中，我将使用我以前的与 `PI:EMAIL` 关联的 GPG 密钥。因此，其逻辑是，我用 `PI:EMAIL` 的 *公钥* 对文件进行加密，然后只能用 `PI:EMAIL` 的 *私钥* 进行解密。
如果你是为别人加密文件，你只有该公钥，但由于你是为自己加密文件，你的系统上有这两个密钥。
最后，你只需指定你要加密的文件。在这个例子中，让我们使用一个名为 `message.txt` 的文件，内容如下：
```
We're encrypting with GPG!
```
![文本文件样本](/data/attachment/album/202112/15/133647pd2yesr9y9kdqynm.png)
同样地，如果电子邮件是 `PI:EMAIL`，新的 GPG 命令将如下所示：
```
gpg --encrypt --output message.txt.gpg --recipient PI:EMAIL message.txt
```
![用 GPG 加密文件](/data/attachment/album/202112/15/133647gsnxq3nsgnsq3s3y.png)
如果你尝试阅读该文件，你会看到它看起来像乱码。这是预料之中的，因为该文件现在已经被加密了。
![读取加密文件会产生乱码](/data/attachment/album/202112/15/133647tjsiiijpfwpujiz1.png)
现在让我们删除未加密的 `message.txt` 文件，这样你就可以看到 `message.txt.gpg` 文件实际上在没有原始文件的情况下也能正常解密。
![](/data/attachment/album/202112/15/133647rjkcbjc5byj79cky.png)
#### 第四步：用 GPG 解密加密的文件
最后，让我们来实际解密加密的信息。你可以用下面的命令来做。
```
gpg --decrypt --output file file.gpg
```
通过这里的参数，我们首先指定 `—decrypt`，它告诉 GPG 你将会解密一个文件。
接下来，你输入 `—output` 文件，这只是告诉 GPG，在你解密后，你将把我们文件的解密形式保存到哪个文件。
最后，你输入 `file.gpg`，这是你的加密文件的路径。
按照这个例子，我使用的命令是这样的。
```
gpg --decrypt --output message.txt message.txt.gpg
```
![用GPG解密文件](/data/attachment/album/202112/15/133647z7tv3726ko9to9oq.png)
然后就完成了！当你想用 GPG 加密和解密文件时，这就是全部内容了。
剩下你可能想知道的是如何与他人分享你的公钥，以便他们在将文件发送给你之前对其进行加密。
### 发送和接收 GPG 密钥
要给别人发送一个 GPG 密钥，你首先需要从你的**钥匙链**中导出它，它包含了你所有的公钥和私钥。
要导出一个密钥，只需在你的钥匙链中找到密钥的 ID，然后运行以下命令，用密钥的 ID 替换 `id`，用你想保存的文件名替换 `key.gpg`。
```
gpg --output key.gpg --export id
```
![导出 GPG 公钥](/data/attachment/album/202112/15/133648q99nhi98a9ib8c91.png)
要导入一个密钥，只需把输出文件（来自前面的命令）给其他用户，然后让他们运行下面的命令。
```
gpg --import key.gpg
```
![](/data/attachment/album/202112/15/133648g7dubcrr3yfcocmu.png)
但要正常使用该密钥，你需要验证该密钥，以便 GPG 正确地信任它。
这可以通过在其他用户的系统上使用 `--edit-key` 参数来完成，然后对密钥进行签名。
首先运行 `gpg --edit-key id`：
![GPG 编辑密钥](/data/attachment/album/202112/15/133648vt6ucccq3tjdceuv.png)
接下来，使用 `—fpr` 参数，它将显示密钥的指纹。这个命令的输出应该与你自己机器上的输出进行验证，这可以通过在你的系统上运行同样的 `--edit-key` 参数来找到。
![GPG 密钥的指纹](/data/attachment/album/202112/15/133648bxss6p16zbssppg6.png)
如果一切吻合，只需使用 `—sign` 参数，一切就可以开始了。
![签署 GPG 密钥](/data/attachment/album/202112/15/133649hi1pv42s2iv2avsj.png)
就是这样！其他用户现在可以开始用你的公钥加密文件了，就像你之前做的那样，这可以确保它们只有在你用你的私钥解密时才能被你读取。
这就是使用 GPG 的所有基础知识！
### 总结
现在你已经了解了开始使用 GPG 所需要的一切，包括为自己和他人加密文件。正如我前面提到的，这只是为了了解 GPG 的加密和解密过程是如何工作的。你刚刚获得的基本 GPG 知识在应用于真实世界的场景中时可以更上一层楼。
还需要一些帮助来弄清楚一些东西，或者有一些不工作的东西？欢迎在下面的评论中留下任何内容。
---
via: 
作者：[Hunter Wittenborn](https://itsfoss.com/author/hunter/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出