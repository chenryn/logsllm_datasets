### Dynamic Instrumentation and Firmware Reverse Engineering

To intercept and modify the source requests generated within the app, we utilized the dynamic instrumentation tool Frida [2]. For forging device messages, firmware reverse engineering was necessary. As is well-known, firmware analysis is a challenging task [21], [27], [57] and is not always feasible. We were able to forge device messages for only three devices, using firmware downloaded from their official websites. For one of these devices, we performed dynamic analysis to emulate the firmware images, while for the other two, we conducted static analysis to identify and manually craft the device messages.

### Results

Table III summarizes the designs of the devices and the outcomes of our attacks. At least four of the devices use device IDs for authentication. 

| Vendor | Device Type | Status | Design | Bind: (DevId, UserToken) | Unbind: (DevId, UserToken) | Attacks |
|--------|-------------|--------|--------|-------------------------|----------------------------|----------|
| #1: Belkin | Smart Plug |  | Sent by the app | Ο |  | A1, A2, A3-2, A3-3, A4-2 |
| #2: BroadLink | IP Camera |  | Sent by the app | Ο |  | A1, A2, A3-2, A3-3, A4-2 |
| #3: KONKE | Smart Bulb |  | Sent by the app | N.A. |  | A1, A2, A3-2, A3-3, A4-2 |
| #4: Lightstory | Smart Bulb |  | Sent by the app | Ο |  | A1, A2, A3-2, A3-3, A4-2 |
| #5: Orvibo | Smart Plug |  | Sent by the app | Ο |  | A1, A2, A3-2, A3-3, A4-2 |
| #6: OZWI | Smart Socket |  | Sent by the app | Ο |  | A1, A2, A3-2, A3-3, A4-2 |
| #7: Philips Hue | Smart Bulb |  | Sent by the app | Ο |  | A1, A2, A3-2, A3-3, A4-2 |
| #8: TP-LINK | Smart Plug |  | Sent by the app | Ο |  | A1, A2, A3-2, A3-3, A4-2 |
| #9: E-Link Smart | Smart Plug |  | Sent by the app | Ο |  | A1, A2, A3-2, A3-3, A4-2 |
| #10: D-LINK | IP Camera |  | Sent by the app | Ο |  | A1, A2, A3-2, A3-3, A4-2 |

**Key:**
- : Attack successfully launched
- : Attack failed to launch
- Ο: Unable to confirm due to firmware challenges
- N.A.: Not Applicable

### Analysis of Attack Results

- **Data Injection and Stealing (A1):** Successfully launched on device #10. We reverse-engineered its firmware to identify and forge device messages. By reconstructing the messages and establishing an OpenSSL socket connection with the cloud, we simulated data injection by reporting fake power consumption and data stealing by setting up a schedule on the app.
  
- **Binding Denial-of-Service (A2):** Six devices suffered from this attack. For device #7, the binding process requires pressing a physical button within 30 seconds, and the cloud checks the source IP addresses. Device #3, however, does not suffer from this attack due to its broken unbinding mechanism, where new bindings replace previous ones.

- **Device Unbinding (A3):** Four devices were vulnerable. Device #3, which does not support binding revocation, allows the attacker to create a new binding, but the attacker cannot hijack the device due to the use of a device token. For device #8, we forged device status messages, causing unbinding with the user.

- **Device Hijacking (A4):** Successfully launched on three devices. Device #9 was hijacked by sending a new binding message to replace the user’s binding in the cloud. Device #6 was hijacked when it was online and not bound to any users. For device #8, we first sent an unbinding message, then forged a binding message to bind it with the attacker.

### Ethics and Responsible Disclosure

We designed our experiments to avoid ethical issues. We only exploited devices we purchased, ensuring that we only obtained data from our own devices and did not affect others. We reported our findings and suggestions to the vendors, and some have acknowledged and promised to improve their designs. Vulnerabilities that have been fixed are released as case studies on our project website [8].

### Lessons Learned

Our research revealed several design failures and implementation flaws in IoT remote binding. Vendors often use static, sequential, or predictable device IDs, which can be compromised. We suggest using dynamic device secrets for better security. Additionally, proper access control mechanisms should be enforced in both pre-binding and post-binding processes. Binding revocation must also be correctly implemented to prevent unauthorized replacements. Finally, sensitive user information should never be delivered to the device during remote binding.

### Discussion

Our study focused on a common communication architecture involving the device, user, and cloud. Future work could extend this to more complex architectures. While we could not confirm all attacks due to firmware limitations, our results are reliable. We plan to explore automatic detection methods to further assist IoT vendors in improving their security.

### Related Work

Prior studies have focused on authentication schemes in IoT, particularly in Wireless Sensor Networks (WSN). Our work differs by focusing on the specific vulnerabilities and attacks in remote binding, providing a systematic analysis and practical insights.