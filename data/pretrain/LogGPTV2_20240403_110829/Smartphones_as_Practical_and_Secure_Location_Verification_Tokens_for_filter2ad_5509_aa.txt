title:Smartphones as Practical and Secure Location Verification Tokens for
Payments
author:Claudio Marforio and
Nikolaos Karapanos and
Claudio Soriente and
Kari Kostiainen and
Srdjan Capkun
Smartphones as Practical and Secure Location
Veriﬁcation Tokens for Payments
Claudio Marforio, Nikolaos Karapanos, Claudio Soriente,
Kari Kostiainen and Srdjan ˇCapkun
Institute of Information Security
ETH Zurich
{ﬁrstname.lastname}@inf.ethz.ch
Abstract—We propose a novel location-based second-factor
authentication solution for modern smartphones. We demonstrate
our solution in the context of point of sale transactions and show
how it can be effectively used for the detection of fraudulent
transactions caused by card theft or counterfeiting. Our scheme
makes use of Trusted Execution Environments (TEEs), such as
ARM TrustZone, commonly available on modern smartphones,
and resists strong attackers, even those capable of compromising
the victim phone applications and OS. It does not require any
changes in the user behavior at the point of sale or to the deployed
terminals. In particular, we show that practical deployment of
smartphone-based second-factor authentication requires a secure
enrollment phase that binds the user to his smartphone TEE and
allows convenient device migration. We then propose two novel
enrollment schemes that resist targeted attacks and provide easy
migration. We implement our solution within available platforms
and show that it is indeed realizable, can be deployed with small
software changes, and does not hinder user experience.
I.
INTRODUCTION
Fraudulent transactions at points of sale made with stolen
or duplicated payment cards are a major problem. In 2010
alone,
these transactions constituted one third of the 1.26
billion EUR total fraud in the Single Euro Payments Area [1].
To improve the security of existing payment systems, compa-
nies and researchers have suggested usage of mobile devices
as a second-factor authentication mechanism [2], [3]. As
most users already have smartphones, deployment of such
second-factor authentication is practical. Many online service
providers already employ second-factor authentication using
smartphones. Examples of this approach are online banking
applications [4] and Google 2-Step Veriﬁcation [5]. In a typical
implementation, the user reads a one-time passcode off the
smartphone screen and enters it on the service’s web page
during login. Login operations to services like online banking
are typically performed when the user has time to interact
with his smartphone to complete the authentication process.
In addition, web services are easily modiﬁable. Thus, in most
cases, an extra authentication step can be added to the login
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1)is(cid:1)granted(cid:1)provided(cid:1)that(cid:1)copies(cid:1)bear(cid:1)this(cid:1)notice(cid:1)and(cid:1)the(cid:1)full(cid:1)citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1)Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:18)(cid:23)(cid:22)
procedure of a web service at little cost. This approach cannot
be, however, integrated in point of sale transactions, because
interactions, at a shop counter, with a smartphone are inconve-
nient and add undesirable transaction delay. Additionally, the
payment terminal infrastructure is hard to modify.
Recent proposals leverage location data from the user’s
phone as the second authentication factor for payments [2], [3].
During a transaction, either the card issuer [2] or the user [3]
can verify that the location of the user’s smartphone matches
the location of the point of sale terminal used for the trans-
action. Previous work, however, overlooks important usability
and security aspects, as it requires changes in both the point
of sale infrastructure and the user experience. Furthermore, it
assumes a trustworthy mobile OS, even though compromise of
mobile operating systems has become commonplace [6], [7].
To secure mobile services despite mobile OS compromise,
researchers have proposed using system-wide Trusted Execu-
tion Environments (TEEs), such as ARM TrustZone [8], which
provide isolated execution of applications and secure storage
of credentials [9], [10]. Integrating system-wide TEEs with
any second-factor authentication protocol, however, requires
the verifying party (e.g., the card issuer) to correctly bind a
user’s identity to the TEE running on his mobile device through
an enrollment scheme. How to establish this binding in the
presence of a compromised OS is an open problem [11].
In this paper we propose a smartphone-based second-factor
authentication solution for payments at points of sale that uses
location data to identify fraudulent transactions. In contrast
to previous work, our solution does not require changes to
established user interaction models and is compatible with the
existing point of sale infrastructure. We leverage system-wide
TEE architectures to provide a secure system, despite mobile
OS compromise. As part of our solution, we design two secure
enrollment schemes for smartphones to bootstrap second-factor
authentication for payments, which may also be used in other
application scenarios. To summarize, We make the following
contributions.
• We propose a smartphone-based second-factor authen-
tication solution for payments at points of sale, that
uses the phone’s location as the second authentication
factor. Our solution makes use of smartphone TEEs
to resist mobile OS compromise.
As part of our solution, we construct
two secure
enrollment schemes that allow a card issuer to bind
•
•
the identity of a user with the TEE running on his
device. The ﬁrst enrollment scheme leverages the
unique identity of the user’s SIM card and resists
adversaries that can remotely compromise the vic-
tim’s mobile OS. The second enrollment scheme uses
specially crafted SMS messages that are processed
within the device baseband OS. This scheme provides
protection against more powerful adversaries that can
additionally perform hardware attacks on devices to
which they have physical access.
Through prototype implementation using an open-
source baseband OS, Android devices, and an ARM
TrustZone development board, we show that our solu-
tion can be easily deployed. It requires small changes
to existing smartphones, and no changes to the point
of sale infrastructure and the user experience. Our
experiments show that, during a transaction, location
veriﬁcation takes less than 4 seconds on average,
which is a tolerable delay for most payment scenarios.
• We survey known approaches for second-factor au-
thentication using mobile phones and argue why they
cannot be deployed in the considered application sce-
nario. We also analyze commonly suggested enroll-
ment schemes and show why they do not withstand
strong attackers that we consider in this work.
The rest of the paper is structured as follows. Section II
deﬁnes the problem we address is more detail. In Section III,
we give background information on mobile device architec-
tures, and Section IV deﬁnes the adversarial model. Our
second-factor authentication solution, including the enrollment
schemes, is explained in Section V. We analyze the security
properties of our solution in Section VI and Section VII
provides implementation details. We provide performance eval-
uation in Section VIII, and in Section IX we discuss payment
system integration, privacy considerations, and applicability of
our solution to other related use cases. Section X discusses
alternative second-factor authentication mechanisms and en-
rollment schemes. Section XI surveys related work, and we
end the paper with a brief summary.
II. PROBLEM STATEMENT
Our goal is to design a smartphone-based second-factor
authentication mechanism that prevents fraudulent transactions
at points of sale. In the following we detail the requirements
for any deployable and secure solution to this problem.
We ﬁrst aim to design mechanisms that must not change
the user interaction model and the current point of sale
infrastructure. Previous work shows that introducing changes
to established user interaction models makes adoption of new
security mechanisms impractical [12]. Similarly, having to up-
date the deployed points of sale makes adoption of additional
security mechanisms hard [13].
Second, a solution must remain secure despite a targeted
adversary that may compromise the mobile OS on the vic-
tim’s device. Current systems [4], [5] and related research
proposals [14], [15], which use smartphones for second-factor
authentication, assume the mobile OS to be trustworthy. This
Mobile device 
Normal world (NW) 
App1'
App2'
Secure world 
(SW) 
Mobile'OS'
(e.g.,'Android)'
TA1'
TA2'
Trusted'OS'
'Applica;on'processor''
(TrustZone)'
SIM'
Baseband'OS'
'Baseband'
processor''
Peripherals'
(GPS)'
Fig. 1: Architecture overview of a TrustZone-enabled device.
assumption is too strong, as the complexity of smartphone plat-
forms has increased, mobile operating system vulnerabilities
have become commonplace [6], [7].
Third, any second-factor authentication mechanism that
replaces dedicated tokens with smartphones, must have an
enrollment scheme, where the verifying party binds the identity
of a user to his device. A dedicated security token is a user-
speciﬁc device, which the service provider binds to the user
identity before the token is shipped to the user. As smartphones
replace such tokens, the service provider can only bind the
user identity to his device after the user has already purchased
the smartphone. In addition to initial enrollment, a practical
solution must also support device migration. In applications
like payments at points of sale, it is realistic to assume a
one-time service registration performed, for example, when the
user visits a branch of his bank in person. Requiring a similar
operation every time the user starts using a new smartphone
becomes both expensive for the bank and inconvenient for the
user.
III. MOBILE DEVICE ARCHITECTURE
A standard mobile device architecture has two processors.
An application processor runs the mobile OS (e.g., Android)
and the applications on top of it. A baseband processor,
running the baseband OS, handles cellular communication and
mediates communication between the application processor
and the SIM card. Each SIM card has a unique identiﬁer called
IMSI (International Mobile Subscriber Identity).
Most mobile devices support system-wide TEEs, like ARM
TrustZone [8]. In a TrustZone-enabled device, the applica-
tion processor supports two execution states, namely, secure
world and normal world (or non-secure world). The processor
switches between these states in a time-slicing manner, so that
only one state is active at a time. The normal world runs the
mobile OS and regular applications on top of it. The secure
world runs trusted applications (TAs), which are executed on
top of a small layer of software called the trusted OS. The
architecture of a TrustZone-enabled mobile device is shown in
Figure 1.
Applications in the secure world are isolated from the
mobile OS in the normal world. In contrast
to dedicated
security elements like smart cards, system-wide TEEs like
TrustZone allow secure access to various device hardware
2
Victim’s device 
Adversary’s device 
Mobile device 
Normal 
world 
App'
Secure  
world 
TA'
Mobile'
OS'
Trusted 
OS 
Mobile device 
Normal 
world 
App'
Secure  
world 
TA'
Mobile'
OS'
Trusted 
OS 
Mobile device 
Normal 
world 
App'
Secure  
world 
TA'
Mobile'
OS'
Trusted 
OS 
Baseband'
OS'
Baseband'
OS'
Baseband'
OS'
Software attacker and 
hardware attacker 
Software attacker 
Hardware attacker 
Fig. 2: Adversarial model. Grey boxes show trusted components for each type of adversary. The victim’s device (on the left) can
be only targeted with remote attacks and the TCB is the same in both attacker models. Trusted components on the adversary’s
device (on the right) depend on the considered attacker model: a software attacker cannot tamper with the TCB on his device;
an hardware attacker has complete access to any component of his device.
resources from the TEE, and to conﬁguration of secure mobile
device event handling. Access to device peripherals and the
baseband processor environment is typically possible by both
the trusted OS in the secure world and the mobile OS in the
normal world. In addition, certain peripherals can be reserved
for secure world access only. Access to memory areas can be
conﬁgured in a similar manner, and in a mobile device a small
amount of memory is reserved for the secure world. Access
control to hardware resources is implemented through speciﬁc
control hardware and signals on the system communication
bus. Hardware interrupts can also be conﬁgured for secure
world processing if need be. For more details on TrustZone,
see [8].
A standard trusted OS only allows execution of code that
has been signed by a trusted authority, such as the device
manufacturer. Typically, the device manufacturer ships each
device with a device-speciﬁc key-pair (we refer to it as the
device key). The public part of the device key is certiﬁed by
the manufacturer, and the issued device certiﬁcate contains
an immutable device identiﬁer, such as the IMEI number
(International Mobile Equipment Identity). The corresponding
private key is only accessible by software that runs in the
secure world [16].
To limit the size of the TCB, a typical trusted application
handles only security-critical processing, such as user creden-
tial processing or data encryption. A companion application,
running in the normal world, handles the communication, the
UI rendering and other complex tasks. The rationale is that
inclusion of complex libraries in the trusted OS, like network
stacks or video drivers, considerably increases the size of the
device TCB, and with that the attack surface of the secure
world.
Device manufacturers have shipped their mobile devices
with system-wide TEEs like ARM TrustZone for almost a
decade. The usage of these environments, thus far, has been
primarily limited to a few manufacturer-speciﬁc use cases,
like implementation of subsidy locks and secure boot [16].
Deployment of third-party applications in system-wide TEEs
has been limited, because the installation of new trusted appli-
cations is subject to the approval of the device manufacturer.
Nevertheless, recent research shows that system-wide TEEs
can be safely opened up for third-party trusted application
development [17], and on-going TEE API standardization ac-
tivities [18] are likely to make trusted application deployment
more accessible to third-parties.
IV. ADVERSARIAL MODEL
We consider a targeted adversary who possesses the vic-
tim’s payment card (or a clone) and knows its PIN code (if
any). His goal is to perform a fraudulent transaction at a point
of sale. The adversary does not have physical access to the
victim’s smartphone. He does, however, have access to other
similar devices. We regard the device hardware, the trusted OS
and the baseband OS as the TCB on the victim’s device, and
distinguish between two types of adversary.
A software attacker can remotely compromise the mobile
OS on the victim’s smartphone, but cannot compromise its
TrustZone secure world nor the baseband OS execution. Like-
wise, he cannot compromise the TrustZone secure world nor
the baseband OS on any other device. Software attacks against
the mobile OS are a real threat [6], [7], while software attacks
against the TCB (i.e., the baseband OS and the TrustZone
secure world) are signiﬁcantly harder, due to its limited size
and attack surface.
A hardware attacker can additionally perform hardware
attacks against devices that he owns or has physical access
to. On such devices, he may compromise the baseband OS
execution, the TrustZone secure world and, ultimately, ex-
tract the TrustZone-protected secrets, such as the device key.
This adversarial model is justiﬁed by the fact that neither
a TrustZone-enabled processor nor the baseband processor
provide tamper resistance properties, commonly found in smart
cards or hardware security modules. Figure 2 illustrates trusted
software components (gray boxes) in these different scenarios.
Neither of the attackers controls the cellular network com-
munication. Furthermore, they cannot launch GPS spooﬁng
attacks on the victim’s device. Finally, we do not address
denial-of-service attacks.
3
User%
smartphone%
4. location 