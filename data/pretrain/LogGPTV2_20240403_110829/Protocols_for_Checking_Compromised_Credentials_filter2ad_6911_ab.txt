should monitor failed login a(cid:138)empts and lock an account a(cid:137)er too
2(cid:140)is is conservative because the C3 server need not, and should not, store passwords
in-the-clear, and it should instead obfuscate them using an oblivious PRF.
many incorrect password submissions. (cid:140)erefore, the a(cid:138)acker gets
only a small number of a(cid:138)empts. We use a variable q, called the
guessing budget, to represent the allowed number of a(cid:138)empts.
Should the adversary additionally have access to password hashes
stolen from the target web site, they can instead mount an o(cid:132)ine
cracking a(cid:138)ack. O(cid:132)ine cracking could be sped up by knowledge
of client C3 queries, and one can extend our results to consider the
o(cid:132)ine se(cid:138)ing by increasing q to re(cid:131)ect computational limits on ad-
versaries (e.g., q = 1010) rather than limits on remote login a(cid:138)empts.
Roughly speaking, we expect the leakage of HIBP and GPC to be
proportionally as damaging here, and that our new protocol FSB
will not provide as much bene(cid:128)t for very large q (see discussion in
Section 6). IDB will provide no bene(cid:128)t to o(cid:132)ine cracking a(cid:138)acks
(assuming they already know the username).
Finally, we focus in threat model (2) on honest-but-curious ad-
versaries, meaning that the malicious server does not deviate from
its protocol. Such actively malicious servers could lie to the client
about the contents of ˜S in order to encourage them to pick a weak
password. Monitoring techniques might be useful to catch such
misdeeds. For the protocols we consider, we do not know of any
other active a(cid:138)acks advantageous to the adversary, and do not
consider them further.
Potential approaches. A C3 protocol requires, at core, a secure
set membership query. Existing protocols for private set intersec-
tion (a generalization of set membership) [22, 31, 42, 43] cannot
currently scale to the set sizes required in C3 se(cid:138)ings, N ≈ 230. For
example, the basic PSI protocol that uses an oblivious pseudoran-
dom function (OPRF) [31] computes yi = Fκ(ui , wi) for (ui , wi) ∈ ˜S
where Fκ is the secure OPRF with secret key κ (held by the server). It
sends all y1, . . . , yN to the client, and the client obtains y = Fκ(u, w)
for its input (u, w) by obliviously computing it with the server. (cid:140)e
client can then check if y ∈ {y1, . . . , yN }. But clearly for large N
this is prohibitively expensive in terms of bandwidth. One can use
Bloom (cid:128)lters to more compactly represent the set y1, . . . , yN , but
the result is still too large. While more advanced PSI protocols exist
that improve on these results asymptotically, they are unfortunately
not yet practical for this C3 se(cid:138)ing [30, 31].
Practical C3 schemes therefore relax the security requirements,
allowing the protocol to leak some information about the client’s
queried (u, w) but hopefully not too much. To date no one has inves-
tigated how damaging the leakage of currently proposed schemes
is, so we turn to doing that next. In Figure 2, we show all the dif-
ferent se(cid:138)ings for C3 we discuss in the paper and compare their
security and performance. (cid:140)e security loss in Figure 2 is a com-
parison against an a(cid:138)acker that only has access to the username
corresponding to a C3 query (and not a bucket identi(cid:128)er).
3 BUCKETIZATION SCHEMES AND
SECURITY MODELS
In this section we formalize the security models for a class of C3
schemes that bucketize the breach dataset into smaller sets (buckets).
Intuitively, a straightforward approach for checking whether or not
a client’s credentials are present in a large set of leaked credentials
hosted by a server is to divide the leaked data into various buckets.
(cid:140)e client and server can then perform a private set intersection
between the user’s credentials and one of the buckets (potentially)
Credentials
checked
Password
(Username,
password)
Name
Bucket identi(cid:128)er
HIBP
FSB
GPC
IDB
20-bits of SHA1(w)
Figure 6, ¯q = 102
16-bits of Argon2(u (cid:107)w)
16-bits of Argon2(u)
B/w
(KB)
32
558
1,066
1,066
RTL
(ms)
220
527
489
517
Security
loss
12x
2x
10x
1x
Figure 2: Comparison of di(cid:130)erent C3 protocols and their
bandwidth usage, round-trip latency, and security loss (com-
pared to an attacker that has no bucket identi(cid:128)er informa-
tion). HIBP [6] and GPC [44] are two C3 services used in
practice. We introduce frequency-smoothing bucketization
(FSB) and identi(cid:128)er-based bucketization (IDB). Security loss
is computed assuming query budget q = 103 for users who
have not been compromised before.
Description
user identi(cid:128)er (e.g., email) / domain of users
Symbol
u / U
w / W password / domain of passwords
S
domain of credentials
set of leaked credentials, | ˜S| = N
˜S
distribution of username-password pairs over U × W
p
distribution of passwords over W
pw
ˆps
estimate of pw used by C3 server
query budget of an a(cid:138)acker
q
¯q
parameter to FSB, estimated query budget of an a(cid:138)ack
function that maps a credential to a set of buckets
β
function that maps a bucket to the set of credentials it contains
α
Figure 3: (cid:135)e notation used in this paper.
containing that credential. (cid:140)e bucketization makes private set
membership tractable, while only leaking to the server that the
password may lie in the set associated to a certain bucket.
We give a general framework to understand the security loss
and bandwidth overhead of di(cid:130)erent bucketization schemes, and
we will use this framework to evaluate existing C3 services.
Notation. To easily describe our constructions, we (cid:128)x some nota-
tion. Let W be the set of all passwords, and pw be the associated
probability distribution; let U be the set of all user identi(cid:128)ers, and
p be the joint distribution over U × W. We will use S to denote the
domain of credentials being checked, i.e., for password-only C3 ser-
vice, S = W, and for username-password C3 service, S = U × W.
Below we will use S to give a generic scheme, and specify the
se(cid:138)ing only if necessary to distinguish. Similarly, s ∈ S denotes a
password or a username-password pair, based on the se(cid:138)ing. Let ˜S
be the set of leaked credentials, and | ˜S| = N .
Let H be a cryptographic hash function from {0, 1}∗ (cid:55)→ {0, 1}(cid:96),
where (cid:96) is a parameter of the system. We use B to denote the set of
buckets, and we let β : S (cid:55)→ P (B) \ {∅} be a bucketizing function
which maps a credential to a set of buckets. A credential can be
mapped to multiple buckets, and every credential is assigned to
at least one bucket. An inverse function to β is α : B (cid:55)→ P (S),
which maps a bucket to the set of all credentials it contains; so,
α(b) = (cid:8)s ∈ S(cid:12)(cid:12) b ∈ β(s)(cid:9). Note, α(b) can be very large given it
considers all credentials in S. We let ˜α be the function that denotes
the credentials in the buckets held by the C3 server, ˜α(b) = α(b)∩ ˜S.
(cid:140)e client sends b to the server, and then the client and the server
engage in a set intersection protocol between {s} and ˜α(b).
GuessA(q)
(u, w) ←p U × W
{ ˜w1, . . . , ˜wq } ← A(u, q)
return w ∈ { ˜w1, . . . , ˜wq }
β (q)
BucketGuessA(cid:48)
(u, w) ←p U × W; s ← (u, w)
B ← β(s); b ←$ B
{ ˜w1, . . . , ˜wq } ← A(cid:48)(u, b, q)
return w ∈ { ˜w1, . . . , ˜wq }
Figure 4: (cid:135)e guessing games used to evaluate security.
Bucketization schemes. Bucketization divides the credentials
held by the server into smaller buckets. (cid:140)e client can use the
bucketizing function β to (cid:128)nd the set of buckets for a credential,
and then pick one randomly to query the server. (cid:140)ere are di(cid:130)erent
ways to bucketize the credentials.
In the (cid:128)rst method, which we call hash-pre(cid:128)x-based bucketiza-
tion (HPB), the credentials are partitioned based on the (cid:128)rst l bits
of a cryptographic hash of the credentials. GPC [44] and HIBP [6]
APIs use HPB. (cid:140)e distribution of the credentials is not considered
in HPB, which causes it to incur higher security loss, as we show
in Section 4.
We introduce a new bucketizing method, which we call frequency-
smoothing bucketization (FSB), that takes into account the distri-
bution of the credentials and replicates credentials into multiple
buckets if necessary. (cid:140)e replication “(cid:131)a(cid:138)ens” the conditional distri-
bution of passwords given a bucket identi(cid:128)er, and therefore vastly
reduces the security loss. We discuss FSB in more detail in Section 5.
In both HPB and FSB, the bucketization function depends on the
user’s password. We give another bucketization approach — the
most secure one — that bucketizes based only on the hash pre(cid:128)x
of the user identi(cid:128)er. We call this identi(cid:128)er-based bucketization
(IDB). (cid:140)is approach is only applicable for username-password C3
services. We discuss IDB in Section 4.
Security measure. (cid:140)e goal of an a(cid:138)acker is to learn the user’s
password. We will focus on online-guessing a(cid:138)acks, where an
a(cid:138)acker tries to guess a user’s password over the login interface
provided by a web service. An account might be locked a(cid:137)er too
many incorrect guesses (e.g., 10), in which case the a(cid:138)ack fails.
(cid:140)erefore, we will measure an a(cid:138)acker’s success given a certain
guessing budget q. We will always assume the a(cid:138)acker has access
to the username of the target user.
(cid:140)e security games are given in Figure 4. (cid:140)e game Guess mod-
els the situation in which no information besides the username
is revealed to the adversary about the password.
In the game
BucketGuess, the adversary also gets access to a bucket that is
chosen according to the credentials s = (u, w) and the bucketiza-
tion function β.
We de(cid:128)ne the advantage against a game as the maximum proba-
bility that the game outputs 1. (cid:140)erefore, we maximize the proba-
bility, over all adversaries, of the adversary winning the game in q
guesses.
Advgs(q) = max
A
Pr(cid:104)
GuessA(q) ⇒ 1(cid:105)
,
and
Advb-gs
β
(q) = max
A(cid:48)
Pr(cid:104)
β (q) ⇒ 1(cid:105)
BucketGuessA(cid:48)
.
(cid:140)e probabilities are taken over the choices of username-password
pairs and the selection of bucket via the bucketizing function β.
(cid:140)e security loss ∆β(q) of a bucketizing protocol β is de(cid:128)ned as
∆β(q) = Advb-gs
(q) − Advgs(q) .
Pr[w ∈ A(u, q) ∧ U = u] .
To maximize this probability, the a(cid:138)acker must pick the q most
probable passwords for each user. (cid:140)erefore,
max
w1, ...,wq
Pr[W = wi ∧ U = u] .
(1)
In BucketGuessβ , the a(cid:138)acker has access to the bucket identi(cid:128)er,
and therefore the advantage is computed as
Note,
GuessA(q) ⇒ 1(cid:105)
Pr(cid:104)
Advgs(q) =

(q) =

=
u
u
b
β
u
=
q
q
i =1
i =1
max
∈α(b)
Advb-gs
β
max
w1, ...,wq
Pr[W = wi ∧ U = u ∧ B = b]
Pr[W = wi ∧ U = u]
q
|β((u, wi))|
(u1,w1), ...,(uq,wq)
i =1
u
b
(2)
(cid:140)e second equation follows because for b ∈ β((u, w)), each bucket
in β(w) is equally likely to be chosen, so
Pr[B = b | W = w ∧ U = u] =
1
|β((u, w))| .
(cid:140)e joint distribution of usernames and passwords is hard to
model. To simplify the equations, we divide the users targeted by
the a(cid:138)acker into two groups: compromised (users whose previously
compromised accounts are available to the a(cid:138)acker) and uncompro-
mised (users for which the a(cid:138)acker has no information other than
their usernames).
We assume there is no direct correlation between the username
and password.3 (cid:140)erefore, an a(cid:138)acker cannot use the knowledge of
only the username to tailor guesses. (cid:140)is means that in the uncom-
promised se(cid:138)ing, we assume Pr[W = w | U = u] = Pr[W = w].
Assuming independence of usernames and passwords, we de(cid:128)ne in
the uncompromised se(cid:138)ing
λq = Advgs(q) = max
w1, ...,wq
Pr[W = wi] .
(3)
We give analytical (using Equations 2 and 3) and empirical anal-
ysis of security in this se(cid:138)ing, and show that the security of un-
compromised users is impacted by existing C3 schemes much more
than that of compromised users.
In the compromised se(cid:138)ing, the a(cid:138)acker can use the username to
(cid:128)nd other leaked passwords associated with that user, which then
can be used to tailor guesses [40, 47]. Analytical bounds on the
compromised se(cid:138)ing (using Equations 1 and 2) are less informative,
3(cid:140)ough prior work [33, 47] suggests knowledge of the username can improve e(cid:129)cacy
of guessing passwords, the improvement is minimal. See Appendix A for more on this.
q
i =1