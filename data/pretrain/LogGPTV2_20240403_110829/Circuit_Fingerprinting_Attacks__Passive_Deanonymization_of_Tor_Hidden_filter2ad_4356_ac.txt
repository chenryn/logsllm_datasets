3.3 Variability in Hidden Pages
Over a period of four weeks, we downloaded the pages of
more than 1000 hidden services once per week. We then
computed the edit distance, which is the number of inser-
tions, deletions, and substitutions of characters needed to
transform the page retrieved at time T with the ones re-
trieved at time T + k weeks (with k ∈ [1..8]). Table 1
shows the three quartiles and the mean for the distribu-
tion of edit distances computed, which demonstrates that
the pages remained almost identical. For comparison, we
also downloaded the pages of Alexa’s top 1000 URLs,
and computed the edit distances in Table 2. This is not
surprising since the sources of variations in the pages are
mostly due to dynamism, personalized advertisements,
or different locations. None of these sources is applica-
ble to hidden services since clients are anonymous when
they initiate the connections. Note that hidden services
may implement personalized pages for a user after he or
she logs into his or her account; however in the context
of this paper, we are mainly concerned with the retrieval
of the very ﬁrst page.
4 Threat Model
Alice’s anonymity is maintained in Tor as long as no
single entity can link her to her destination.
If an at-
tacker controls the entry and the exit of Alice’s circuit,
her anonymity can be compromised, as the attacker is
able to perform trafﬁc or timing analysis to link Alice’s
trafﬁc to the destination [5, 23, 25, 32]. For hidden ser-
vices, this implies that the attacker needs to control the
two entry guards used for the communication between
the client and the hidden service. This signiﬁcantly lim-
its the attacker, as the probability that both the client and
the hidden service select a malicious entry guard is much
lower than the probability that only one of them makes a
bad choice.
Figure 6: Our adversary can be a malicious entry guard that is
able to watch all circuits
Our goal is to show that it is possible for a local pas-
sive adversary to deanonymize users with hidden service
activities without the need to perform end-to-end trafﬁc
analysis. We assume that the attacker is able to monitor
the trafﬁc between the user and the Tor network. The at-
tacker’s goal is to identify that a user is either operating
or connected to a hidden service. In addition, the attacker
then aims to identify the hidden service associated with
the user.
In order for our attack to work effectively, the attacker
needs to be able to extract circuit-level details such as
the lifetime, number of incoming and outgoing cells, se-
quences of packets, and timing information. We note
that similar assumptions have been made in previous
works [10, 35, 36]. We discuss the conditions under
which our assumptions are true for the case of a network
admin/ISP and an entry guard.
Network administrator or ISP. A network administra-
tor (or ISP) may be interested in ﬁnding out who is ac-
cessing a speciﬁc hidden service, or if a hidden service
is being run from the network. Under some conditions,
such an attacker can extract circuit-level knowledge from
the TCP traces by monitoring all the TCP connections
between Alice and her entry guards. For example, if
only a single active circuit is used in every TCP con-
nection to the guards, the TCP segments will be easily
mapped to the corresponding Tor cells. While it is hard
to estimate how often this condition happens in the live
network, as users have different usage models, we argue
that the probability of observing this condition increases
over time.
Malicious entry guard. Controlling entry guards al-
lows the adversary to perform the attack more realisti-
cally and effectively. Entry guards are in a perfect po-
sition to perform our trafﬁc analysis attacks since they
have full visibility to Tor circuits.
In today’s Tor net-
work, each OP chooses 3 entry guards and uses them for
USENIX Association  
24th USENIX Security Symposium  293
7
abc.onionxyz.onionMalicious   Entry       Guard   Entry       GuardThe Tor Network45 days on average [16], after which it switches to other
guards. For circuit establishment, those entry guards are
chosen with equal probability. Every entry guard thus
relays on average 33.3% of a user’s trafﬁc, and relays
50% of a user’s trafﬁc if one entry guard is down. Note
that Tor is currently considering using a single fast entry
guard for each user [13]. This will provide the attacker
with even better circuit visibility which will exacerbate
the effectiveness of our attack. This adversary is shown
in Figure 6.
5 Circuit Fingerprinting Attack
In this section, we present our circuit ﬁngerprinting at-
tacks. Our attack allows an adversary to accurately and
efﬁciently identify the presence of hidden service activ-
ity of a client or a server, and the circuit used to com-
municate with or by the hidden service (i.e., RP circuit).
We ﬁrst present an attack feasible for a more traditional
attacker. Then, we describe a stronger attack for a more
powerful adversary who can see more of the circuits from
a user.
5.1 Classifying Special Circuits
Since the attacker is monitoring thousands of users, who
produce hundreds of thousands of circuits, it is impor-
tant to ﬁnd an easy and straightforward approach to ﬂag
potentially “interesting” circuits for further examination.
The attacker can exploit the simple and surprisingly dis-
tinctive features exhibited by IP and RP circuits (both
client and hidden service side) to identify those circuits.
In particular, we use the following features which are
based on our observations in Section 3:
• Incoming and outgoing cells: This category of fea-
tures will be useful in identifying IP circuits. For
example, if a circuit sends precisely 3 cells, but has
slightly more incoming cells (within a 1-hour dura-
tion), then this circuit is HS-IP with a high probabil-
ity. Furthermore, if a circuit sends more than 3 cells,
but has the exact same number of incoming and out-
going cells, then it is a client-IP with a high prob-
ability. This feature is also useful in distinguishing
Client-RP from HS-RP circuits since we expect that
HS-RP circuits to have more outgoing than incom-
ing cells, and vice-versa for Client-RP circuits.
• Duration of activity: This feature is useful in dis-
tinguishing three groups of circuits: Client-IP cir-
cuits, HS-IP circuits, and all other circuits consist-
ing of general, Client-, and HS-RP circuits. Recall
that HS-IP circuits are long lived by design in or-
der to be contacted by all interested clients, whereas
client-IP circuits are inactive after performing the
introduction process between the client and the hid-
den service, and have a median DoA of 1 second.
Active general, Client-RP and HS-RP circuits can
be alive and have a median of 600 seconds, which
is the default lifetime of a circuit in Tor.
• Circuit construction sequences: We represent
each of the ﬁrst 10 cells (enough cells to capture
the sequence of circuit establishment) either by the
string -1 or +1. Each string encodes the direction
of the corresponding cell. For example, the se-
quence “-1-1+1” corresponds to two outgoing cells
followed by one incoming cell. This feature is use-
ful in distinguishing Client-RP circuits from general
and HS-RP circuits. The reason is that the circuit
construction cell sequences in the case of Client-
RP circuits differs from HS-RP and general circuits.
This can be observed in Figures 1, 2, and 3. For
example, we noticed that the sequence -1+1-1+1-
1+1+1-1+1-1 is very common in Client-RP circuits,
which corresponds to the sequence between the OP
and G1 in Figure 3. However, HS-RP and general
circuits have similar sequences so this feature alone
cannot differentiate between those two circuit types.
Strategy. Different features are more indicative of cer-
tain circuit types. To best exploit those features, we per-
form our classiﬁcation in two steps. First, the adversary
looks for Client-IP and HS-IP circuits since those are the
easiest ones to classify. This also allows the adversary
to ﬁgure out if he is monitoring a HS or client of a HS.
In the second step, the adversary examines the non-IP
circuits to ﬁnd RP circuits among them.
We use decision-tree classiﬁcation algorithms, since
identifying IP and RP circuits is dependent on an if-
then-else conditional model as we discussed above.
Tree-based algorithms build decision trees whose inter-
nal nodes correspond to the tests of features, and the
branches correspond to the different outcomes of the
tests. The leaves of the tree correspond to the classes, and
the classiﬁcation of a test instance corresponds to select-
ing the path in the tree whose branch values best reﬂect
the new testing instance. Decisional trees have been used
previously in the trafﬁc classiﬁcation literature [27, 4, 26]
and are ideal for our problem.
Figures 7 and 8 depict decision trees which we use in
the ﬁrst step of this attack to identify the IP circuits. Note
that general and RP circuits are treated as “noise”. The
tree in Figure 7 uses all features described above, and
has a size of 15 nodes and 8 leaves, whereas the tree in
Figure 8 omits the sequences, and only relies on incom-
ing/outgoing packets and the DoA, which results in 10
leaves and a total size of 19 nodes. Both trees are very
294  24th USENIX Security Symposium 
USENIX Association
8
Figure 7: Decisional Tree (C4.5 algorithm) used in identifying
IP circuits when cell sequences are used.
small, which allows for efﬁcient classiﬁcation. We dis-
cuss their performance in Section 6.1.
Once the adversary succeeds in identifying IP circuits,
he is able to mark suspicious clients, and he can pro-
ceed to identifying their RP circuits. This can reduce his
classiﬁcation costs, and false positives. One challenge
in distinguishing RP circuits from general circuits is that
we cannot rely on DoA or the total number of incom-
ing and outgoing cells as we did for IP circuits: in the
case of general and RP circuits, those values are based
on the user activity and can be biased by our models.
To avoid such biases, we rely again on features that are
protocol-dependent rather than user-dependent. Using
our observation about sequences of Client-RP described
previously, we can classify the circuit. Finally, to distin-
guish between HS-RP and general circuits, we use the
ﬁrst 50 cells of each circuit, and count the number of its
incoming and outgoing cells. HS-RP circuits will gener-
ally have more outgoing than incoming, and the opposite
should be true for general browsing circuits.
Figure 9 depicts a decision tree for classifying Client-
RP, HS-RP and general circuits. It can be seen from the
tree that Client-RP circuits are completely distinguished
by their packet sequence ﬁngerprint. Recall that those
sequences represent the ﬁrst 10 cells from the circuit,
which is important as we want our sequences to be ap-
plication independent. Also, HS-RP and general circuits
are distinguished from each other by the fraction of in-
coming and outgoing cells of the ﬁrst 50 cells. The tree
contains a total of 17 nodes and only 9 leaves. We present
the performance of this tree in Section 6.1.
Figure 8: Decisional Tree (C4.5 algorithm) used in identifying
IP circuits when cell sequences are not used
Figure 9: Decisional Tree (C4.5 algorithm) used in identifying
RP circuits out of web browsing circuits.
fact that the process of establishing the connection with
the hidden service is ﬁngerprintable.
A client accessing a hidden service will exhibit a dif-
ferent circuit construction and data ﬂow pattern from that
of a client accessing a non-hidden service. For a client
accessing a hidden service, the OP ﬁrst builds the RP cir-
cuit, and simultaneously starts building a circuit to the IP.
In contrast, a client visiting a regular website only estab-
lishes one circuit. (Figures 1 and 4 in Section 2 illustrate
the exact ﬂow of cells.) Using this fact, the attacker can
classify behavior of pairwise circuits, and learn the RP
of a user. In particular, we show that the ﬁrst 20 cells of
a circuit pair, which include all the cells used to establish
connections with IP and RP, are enough to identify IP-RP
pairs.
6 Evaluation
5.2 Correlating Two Circuits
As mentioned in Section 4, Tor is considering using only
a single entry guard per user. This changes the adver-
sarial model: a malicious entry guard can now see all of
the circuits used by a connected user. In this scenario,
the attacker can see both IP and RP circuits. Even for a
traditional entry guard, it has at least 11-25% chance of
seeing both circuits. Such an attacker can leverage the
To evaluate our features with different machine learn-
ing algorithms, we used Weka [18], a free and open-
source suite which provides out-of-the-box implementa-
tion of various machine learning algorithms. We experi-
mented with the following algorithms: CART [8], which
builds binary regression trees based on the Gini impurity,
C4.5 [34], which uses information gain to rank possi-
ble outcomes, and k-nearest neighbors (k-NN for short),
which considers the neighbors that lie close to each other
USENIX Association  
24th USENIX Security Symposium  295
9
Table 3: Number of instances of different circuit types
Dataset HS-IP HS-RP Client-IP Client-RP general
3862
IP-Noise
76
RP-Noise N/A
3862
4514
4514
954
954
200
N/A
in the feature space. When the k-NN classiﬁer is used,
we set k = 2 with a weight that is inversely proportional
to the distance. For each algorithm, we study the true
positive rate (T PR = T P
T P+FN ) and the false positive rate
(FPR = FP
T N+FP). Speciﬁcally, TPR is the rate of cor-
rectly identiﬁed sensitive class, and FPR is the rate of
incorrectly identiﬁed non-sensitive class. We collected
network traces over the live Tor networks for our clients
and server, and we did not touch or log the trafﬁc of other
users. We used the latest stable release of the Tor source
code (tor-0.2.5.10) in all our experiments.
6.1 Accuracy of Circuit Classiﬁcation
Datasets. From our long-term experiments described
in Section 3, we extracted 5 types of circuits: Client-
IP, Client-RP, HS-IP, HS-RP and general circuits. From
every circuit, we created an instance consisting of its se-
quences (ﬁrst 10 cell), DoA, total incoming and outgoing
number of cells within the ﬁrst 50 cells in the circuit, and
a class label corresponding to the circuit type. Further-
more, since Tor is mainly used for web browsing [29],
we designed our datasets so that most of the instances
are “general” circuits to reﬂect realistically what an ad-
versary would face when attempting to classify circuits
of real users on the live network.
Recall
that our general circuits are generated by
browsing a random page from the top 1000 websites pub-
lished by Alexa [1]. This list contains very small web-
pages (such as localized versions of google.com), and
large websites (such as cnn.com). While it is not clear if
this set of websites represents what real Tor users visit,
we believe that this would not affect our approach since
our features are protocol-dependent rather than website-
or user-dependent. This is also true about our RP cir-
cuits. Therefore, we believe that the speciﬁc models and
websites should not have an impact on our classiﬁcation
approach. Table 3 shows the number of instances of ev-
ery class for both datasets.
Since we perform the classiﬁcation in two steps, we
created the following datasets:
• IP-Noise dataset: This dataset consists of 76 HS-
IP circuits, 200 Client-IP circuits, and 6593 “noise”
circuits. The 200 Client-IP circuits were selected
uniformly at random from a large collection of 4514
Client-IP circuits.2 The circuits labeled with the
class “noise” consist of 954 HS-RP, 4514 Client-RP,
and 3862 general browsing circuits.
• RP-Noise dataset: This dataset contains 200 Client-
RP, 200 HS-RP circuit, and 3862 “noise” circuits
(general browsing). The Client-RP and HS-RP cir-
cuits were selected uniformly at random from our
collection of 954 and 4514 HS-RP and Client-RP
circuits, respectively. Again, our goal is to imitate