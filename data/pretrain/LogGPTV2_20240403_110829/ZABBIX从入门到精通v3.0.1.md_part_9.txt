结束语
6 个触发器级别，名称随你修改，但是大多数情况下我们都不需要修改，默认的挺好的，不是吗？非要自定义，我
不拦你。
zabbix 触发器依赖关系详解
概述
zabbix触发器可以设置依赖性，例如我配置了两个触发器，一个触发器定义www.ttlsa.com这个HOST是否在运行
中，另一个是www.ttlsa.com的网络是否通畅。假如网络出现故障，但是ttlsa服务器并未出现故障，我们依旧会收
到这两个触发器给到的故障通知。
现在的问题很明显，HOST是正常的，肯定不希望收到他的故障信息，因为它正常工作。所以在配置HOST触发器
时，我们需要增加依赖关系，依赖网络是否畅通这个触发器。一旦网络出现故障，将不会出发 HOST 故障的通知。
单个触发器可以依赖于多个触发器。
触发器依赖要点
 一台HOST的触发器可以依赖其他HOST的触发器，但是注意不要有死循环依赖。比如A依赖B，B依赖C，C
又依赖A。一个圆圈，没完没了。如下是A依赖B，B又依赖A，根本依赖不了，有如下报错。
 一个模板的触发器可以依赖另外一个模板的触发器，例如模板A触发器依赖模板B触发器。一个HOST要链接
A模板，那么它同时要链接A模板（因为模板A中的触发器依赖了模板B中的触发器），但是HOST可以单独
链接模板B（B是被依赖）。在一个host单独链接template A，结果出现如下错误，所以别忘记了一起把template
B也链接到HOST中。
 模板中的触发器可以依赖HOST中的触发器。如果某个HOST链接这类模板，那么HOST创建的相应的触发器
也同样会依赖那个HOST的触发器。举个官方的例子，某个模板中的一些触发器依赖了route/主机的触发器，
凡事链接（理解为套用）了这个模板的机器都会依赖这些router/主机。说了那么多，其实就是继承了。
HOST中的触发器不能依赖模板中的触发器。
配置
编辑触发器，选择选项卡“dependencies”，点击Add，选择你需要依赖的触发器，如下图：
然后点击保存，可以看到触发器多了一个depend on
多个依赖实例
借用官方文档的示例，Host前面有个Router2，Router2前面有Router1，如下：
Zabbix - Router1 - Router2 – Host
如果Router1挂了，很明显Router2和Host连不上，我们不希望收到关于连不上Router2和HOST的通知，因此，
我们定义了如下依赖关系：
'Host is down' trigger depends on 'Router2 is down'
trigger'Router2 is down' trigger depends on 'Router1 is down' trigger
在触发器将Host的状态改变为’Host is down’之前，它会检查host相关的依赖，这时候如果发现它依赖的触发器
只要出现一个problem状态，那么当前触发器状态不会变化，这样一来action不会执行，报警通知sms/email自然
也不会发送了。
zabbix会递归执行检测，如果router1或者router2有一个出现连不上，那么Host的触发器不会有任何的改变。
zabbix 单位符号 Unit symbols
概述
在zabbix里面，我们不需要使用大数字来，例如我们可以不使用86400来表示一天，这个数字又不容易理解也容易
出错。用什么办法来解决大数字问题呢？我们可以使用单位来简化，例如简化zabbix触发器表达式或者item key。
所以，我们可以使用1d来渠道86400，‘d’就是单位后缀，表示天。
时间单位后缀
 s – 秒(一般来说来说不写s，就表示s了)
 m – 分
 h – 小时
 d – 天
 w – 周
时间单位后缀支持如下使用场景：
 触发器表达式
 zabbix internal item参数，如 zabbix[queue,,]
 last parameter of aggregate checks
单位符号
Zabbix server和zabbix后台都支持使用这些单位显示，触发器表达式也可以使用这些单位。
 K – kilo
 M – mega
 G – giga
 T – tera
如果 item 值的单位不是 B、Bps，那么 1000为基数，1000 将会别显示成 1k，2000 显示为 2k。如果单位是 B 或者
Bps，那么基数就是1024了，item值为1024将会被展示成1k。所以在单位上面，大家一定要切记。例如流量别忘
记单位改为B，访问量/次数不填写单位
除了以上单位，zabbix还支持如下单位（单位很大，基本很少用到）
 P – peta
 E – exa
 Z – zetta
 Y – yotta
使用例子
在编写触发器表达式中使用这些单位会显得好理解并且更好维护，如下
{host:zabbix[proxy,zabbix_proxy,lastaccess]}>120
{host:system.uptime[].last(0)}2m
{host:system.uptime.last(0)}:.()}
{主机：key.函数(参数)}常数，具体的例子，请接着往下走，很简单
Functions 函数
触发器functions可以引用检索到的值，当前时间或者其他元素。触发器表达式支持的function完整列表请点击官网
地址 supported functions
Function 参数
大多数数值functions可以使用秒来作为参数。你可以使用前缀“#”来表示它有不同的含义
函数 描述
sum(600) 600秒内的总和
sum(#5) 最新5个值的和
last 函数使用不同的参数将会得到不同的值，#2 表示倒数第二新的数据。例入从老到最新值为 1,2,3,4,5,6,7,8,9,10，
last(#2)得到的值为9，last(#9)得到的值为2。last函数必须包含参数。
AVG，count，last，min和max函数还支持额外的参数，以秒为单位的参数time_shif（t 时间偏移量）。例如avg(1h,1d)，
那么将会获取到昨天的1小时内的平均数据。
备注：触发器表达式需要使用history历史数据来计算，如果history不可用（time_shift时间偏移量参数无法使用），
因此history记录一定要保留长久一点，至少要保留需要用的记录。
触发器表达式可以使用单位符号来替代大数字，例如5m替代300，或者1d替代86400,1k替代1024字节等等。
操作符
优先级 操作 定义
1 / 除
2 * 乘
3 - 减
4 + 加
5  大于. 用法如下:
A>B ⇔ (A>=B+0.000001)
7 # 不等于.用法如下:
A#B ⇔ (A=B+0.000001)
8 = 等于. T用法如下:
A=B ⇔ (A>B-0.000001) & (A5
触发器说明：
参数 说明
www.zabbix.com host名称
system.cpu.load[all,avg1] item值,一分内cpu平均负载值
last(0) 最新值
>5 最新值大于5
如上所示，www.zabbix.com 这个主机的监控项，最新的 CPU 负载值如果大于 5，那么表达式会返回 true，这样一
来触发器状态就改变为“problem”了。
 示例二
触发器名称：www.zabbix.com is overloaded
{www.zabbix.com:system.cpu.load[all,avg1].last(0)}>5|{www.zabbix.com:system.cpu.load[all,avg1].min(10m)}>2
当前cpu负载大于5或者最近10分内的cpu负载大于2，那么表达式将会返回true.
 示例三
触发器名称：/etc/passwd has been changed
使用函数 diff():
{www.zabbix.com:vfs.file.cksum[/etc/passwd].diff(0)}>0
/etc/passwd最新的checksum与上一次获取到的checksum不同，表达式将会返回true. 我们可以使用同样的方法监
控系统重要的配置文件,例如/etc/passwd,/etc/inetd.conf等等。这些zabbix一般都会自带，没带的你自己加上吧。
 示例四
触发器名称：Someone is downloading a large file from the Internet
使用函数 min:
{www.zabbix.com:net.if.in[eth0,bytes].min(5m)}>100K
当前主机网卡eth0最后5分钟内接收到的流量超过100KB那么触发器表达式将会返回true
 示例五
触发器名称：Both nodes of clustered SMTP server are down
{smtp1.zabbix.com:net.tcp.service[smtp].last(0)}=0&{smtp2.zabbix.com:net.tcp.service[smtp].last(0)}=0
当smtp1.zabbix.com和smtp2.zabbix.com两台主机上的SMTP服务器都离线，表达式将会返回true.
 示例六
触发器名称：Zabbix agent needs to be upgraded
使用函数str():
{zabbix.zabbix.com:agent.version.str("beta8")}=1
如果当前zabbix agent版本包含beta8（假设当前版本为1.0beta8），这个表达式会返回true.
 示例七
触发器名称：Server is unreachable
{zabbix.zabbix.com:icmpping.count(30m,0)}>5
如上表达式表示最近30分钟zabbix.zabbix.com这个主机超过5次不可到达。
 示例八
触发器名称：No heartbeats within last 3 minutes
使用函数 nodata():
{zabbix.zabbix.com:tick.nodata(3m)}=1
tick为Zabbix trapper类型，首先我们要定义一个类型为Zabbix trapper，key为tick的item。我们使用zabbix_sender
定期发送数据给tick，如果在3分钟内还未收到zabbix_sender发送来的数据，那么表达式返回一个true，与此同时
触发器的值变为“PROBLEM”。
 示例九
触发器名称：CPU activity at night time
使用函数 time():
{zabbix:system.cpu.load[all,avg1].min(5m)}>2&{zabbix:system.cpu.load[all,avg1].time(0)}>000000&{zabbix:system.cpu.l
oad[all,avg1].time(0)}2
This expression will fire if the average load of the last hour tops the average load of the same hour yesterday more than
two times.
Hysteresis（迟滞,滞后）
简单的说触发器状态转变为problem需要一个条件，从problem转变回来还需要一个条件才行。一般触发器只需要
不满足触发器为problem条件即可恢复。明白了么？不明白就看例子吧。
有时候触发器需要使用不同的条件来表示不同的状态，举个官网很有趣的例子：机房温度正常稳定为 15-20°，当
温度超过20°，触发器值为problem，当问题到了15°与20°之间，异常会解除。别整这些没用的，我们看实例.
为了达到这个效果，我们需要使用如下触发器表达式:
 示例1
触发器名称：Temperature in server room is too high
({TRIGGER.VALUE}=0&{server:temp.last(0)}>20)|
({TRIGGER.VALUE}=1&{server:temp.last(0)}>15)
如上有两个小括号，前面一个表示触发异常的条件，后面一个表达式表示解除异常的条件。
注意：宏变量 {TRIGGER.VALUE}将会返回当前触发器的值
 示例2
触发器名称：Free disk space is too low
Problem: 最近5分钟剩余磁盘空间小于10GB。（异常）
Recovery: 最近10分钟磁盘空间大于40GB。（恢复）
简单说便是一旦剩余空间小于10G就触发异常，然后接下来剩余空间必须大于40G才能解除这个异常，就算你剩余
空间达到了39G（不在报警条件里）那也是没用的，有意思不！
({TRIGGER.VALUE}=0&{server:vfs.fs.size[/,free].max(5m)}<10G) |
({TRIGGER.VALUE}=1&{server:vfs.fs.size[/,free].min(10m)}<40G)
zabbix 事件通知
概述
我们前面花了大量时间去讲解 item、trigger、event 都是为发送报警做准备的，什么是事件通知呢？简单的说故障
发生了，zabbix会发邮件或者短信给你，告诉你服务器的一些状况。如果没有通知这块内容，你要盯着zabbix的事
件才知道服务器发生什么状况了。这和保安有什么区别？
通知条件
发送通知，需要有如下步骤
 定义一个通知介质
这个介质包含email、shell脚本、sms短信网关（用得比较少）。zabbix将需要发送的内容传递给这些介质，然后这
些介质把事件放到对应的终端。例如通知内容发给email，email介质将内容发送到报警邮箱中。
 配置action
Action由conditions（条件）和operations（操作）组成。当满足指定的条件，然后执行操作。这就是一个action。
事件通知配置
这么讲大家可能有点不理解，我举个例子吧。
 条件
 操作
看图大家就明白了，满足两个条件之后，于是执行后面的操作，操作内容便是通过某个介质发送通知，间隔多久发
送一次，发给谁，一共发送多少次。
Zabbix 事件来源
什么是 zabbix 事件
在trigger的文章内，我们已经有用到事件，这个事件要讲概念真心不知道怎么说，就拿trigger事件来说，如果trigger
从当前值ok转变为problem，那么我们称之为一个事件，这边便是trigger事件。
zabbix 事件有哪些
zabbix事件一共有三种，分别为：触发器事件、发现事件、内部事件、自动注册事件，接下来我们一一讲解这四种
事件类型。
zabbix 内部事件
 监控项item状态从normal变为unsupported，或者从unsupported变为normal
 low-level发现规则状态从normal变为unsupported，或者从unsupported变为normal
 触发器状态从normal变为unknown，或者从unknown转为normal
有些人用中文语言，并且英语很过不去的，如上单词解释如下：
属性 描述
normal 正常
unsupported 不支持
unknown 未知
备注:内部事件从zabbix 2.2版本才开始引入，主要目的是为了可以通知管理员zabbix的某些item不可用
zabbix 发现事件