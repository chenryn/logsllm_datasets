Web
Local
Scope of smart card attacks
Scope of cloud attacks
ATTACKER
Vicinity
Remote
Passive attacks
Active attacks
Fig. 7. Overview of side-channel attacks: (1) active vs passive, (2) logical properties vs physical properties, (3) local vs vicinity vs remote.
VII. TREND ANALYSIS
In Figure 7 we classify the attacks surveyed in Sections IV–
VI according to our new classiﬁcation system. We distinguish
between active and passive attackers along the (right) y-axis.
Passive attacks are classiﬁed above the x-axis and active
attacks are classiﬁed below the x-axis. The (left) y-axis dis-
tinguishes between the exploitation of physical properties and
logical properties. As both of these categories can be exploited
by passive as well as active attackers, these two categories
are mirrored along the x-axis. The x-axis categorizes side-
channel attacks according to the attacker’s proximity to the
targeted device. For instance, some attacks require an attacker
to have access to the targeted device or even to have access to
components within the device, e.g., the attacker might remove
the back cover in order to measure the EM emanation of the
chip. Stronger adversaries (with weaker assumptions) might
rely on wiretapping techniques. The strongest adversaries rely
on unprivileged applications being executed on the targeted
device or even only that the victim visits a malicious website.
Based on this classiﬁcation system we observe speciﬁc
trends in modern side-channel attacks that will be discussed
within the following paragraphs. This trend analysis also
includes pointers for possible research directions.
From Local to Remote Attacks. The ﬁrst trend that can be
observed is that, in contrast to the smart card era, the smart-
phone era faces a shift towards remote side-channel attacks
that focus on both hardware properties and software features.
The shift from local attacks (during the smart card era) towards
remote attacks (on mobile devices) can be addressed to the
fact
the attack scenario as well as the attacker have
changed signiﬁcantly. More speciﬁcally, side-channel attacks
against smart cards have been conducted to reveal sensitive
information that should be protected from being accessed by
benign users. For example, in case of pay-TV cards the secret
keys must be protected against benign users, i.e., users who
bought these pay-TV cards in the ﬁrst place. The attacker in
that
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
16
this case might be willing to invest in equipment in order to
reveal the secret key as this key could be sold later on.
In contrast,
today’s smartphones are used to store and
process sensitive information, and attackers interested in this
information are usually not the users themselves but rather
criminals, imposters, and other malicious entities that aim
to steal this sensitive information from users. Especially the
appiﬁcation of the mobile ecosystem provides tremendous op-
portunities for attackers to exploit identiﬁed side-channel leaks
via software-only attacks. Hence, this shift also signiﬁcantly
increases the scale at which attacks are conducted. While
local attacks only target a few devices, remote attacks can
be conducted on millions of devices at the same time by
distributing software via available app markets.
From Active to Passive Attacks. The second trend that
can be observed is that fault injection attacks have been quite
popular on smart cards, whereas such (local) fault attacks are
not that widely investigated on smartphones, at least at the
moment. Consequently, we also observe that the variety of
fault attacks conducted in the smart card era has decreased
signiﬁcantly in the smartphone era, which can be addressed
to the following observations. First, the targeted device itself,
e.g., a smartphone, is far more expensive than a smart card
and, hence, fault attacks that potentially permanently break
the device are only acceptable for very targeted attacks. Even
in case of highly targeted attacks (cf. Apple vs FBI dispute),
zero-day vulnerabilities might be chosen instead of local fault
attacks.4 Second, remote fault attacks seem to be harder to
conduct as such faults are harder to induce via software
execution. Currently, the only remote fault attack (also known
as software-induced fault attack) is the Rowhammer attack,
which however gets increasing attention among the scientiﬁc
community and has already been exploited to gain root access
on Android devices [140]. Although software-induced fault
attacks have not been investigated extensively in the past, we
expect further research to be conducted in this context.
Some microarchitectural attacks can also be considered as
active attacks because the attacker inﬂuences the behavior of
the targeted program (victim). For example, cache attacks can
be used to slow down the execution of the victim due to cache
contention. However, this does not introduce a fault in the
computation and, hence, Rowhammer currently represents the
only software-induced fault attack.
Exploiting Physical and Logical Properties. In contrast to
physical properties, logical properties (software features) do
not result from any physical interaction with the device, but
due to dedicated features provided via software. While tra-
ditional side-channel attacks mostly exploited physical prop-
erties and required dedicated equipment, more recent side-
channel attacks exploit physical properties as well as logical
properties. Interestingly, the immense number of sensors in
smartphones also allows to exploit physical properties by
means of software-only attacks, which was not possible on
smart cards. Although the majority of attacks on mobile
4However, in September 2016 Skorobogatov [80] demonstrated that NAND
mirroring allows to bypass the PIN entry limit on the iPhone 5c.
devices still exploits physical properties, the exploitation of
logical properties also receives increasing attention. Especially
the procfs seems to provide an almost inexhaustible source
for possible information leaks. For example,
the memory
footprint released via the procfs has been used to infer visited
websites [25], or the number of context switches has been used
to infer swipe input [11]. Besides, information that is available
via ofﬁcial APIs is in some cases also available via the procfs
such as the data-usage statistics that have been exploited to
infer a user’s identity [14] and to infer visited websites [26].
Empty Areas. As can be observed, a few areas in this cate-
gorization system (cf. Figure 7) are not (yet) covered or are not
covered that densely. For instance, there is currently no active
side-channel attack that can be executed remotely and that ex-
ploits logical properties (software features) to induce faults or
to actively inﬂuence the targeted program (victim). However,
by considering existing passive attacks, one could come up
with more advanced attacks by introducing an active attacker.
Such an active attacker might, for example, block/inﬂuence
a shared resource in order to cause malfunctioning of the
target. For instance, considering the passive attack exploiting
the speaker status (on/off) to infer a user’s driving routes [14],
one could easily inﬂuence the victim application by playing
inaudible sounds in the right moment in order to prevent
the turn-by-turn voice guidance from accessing the speaker.
Thereby, the active attacker prevents the target (victim) from
accessing the shared resource, i.e., the speaker, and based
on this induced behavior an active attacker might gain an
advantage compared to a passive attacker. We expect advances
in this (yet) uncovered area of active side-channel attacks that
target software features.
Tabular Summary of Surveyed Attacks. Table V provides
a tabular summary for the categorization of the surveyed
attacks. For some attacks we observe that active as well as
passive modes of attack have already been considered, e.g.,
differential computation analysis and network trafﬁc analysis
attacks. Some attacks can also be conducted by exploiting
physical properties as well as logical properties, e.g.,
the
ﬁngerprinting of devices and network trafﬁc analysis attacks.
VIII. DISCUSSION OF COUNTERMEASURES
In this section, we discuss existing countermeasures against
the most prominent attacks. Overall we aim to shed light onto
possible pitfalls of existing countermeasures and to stimulate
future research to come up with more generic countermeasures
against side-channel attacks.
A. Local Side-Channel Attacks
Protecting Cryptographic
Implementations. Crypto-
graphic implementations represent a prominent target of side-
channel attacks as a successful attack allows to recover sensi-
tive data and to break mechanisms building upon these prim-
itives. Therefore, countermeasures to protect cryptographic
implementations have already been proposed for the smart
card world. These countermeasures can be applied to protect
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
17
TABLE V
SUMMARY OF SURVEYED ATTACKS.
Attack
Power analysis
EM analysis
NAND mirroring
Laser/optical
Clock/power glitch
Temperature variation
EMFI
Differential computation analysis
Reﬂections/hands
Smudges
Network trafﬁc analysis
USB power analysis
Wi-Fi signal monitoring
Fingerprinting devices
Data-usage statistics
Page deduplication
procfs leaks
Microarchitectural attacks
Location inference
Speech recognition
Soundcomber
Sensor-based keyloggers
Rowhammer
Mode of attack
Active
Passive


























Physical properties
Logical properties
Local
Exploited information
Location of attacker
Vicinity
Remote



















































cryptographic implementations on smartphones as well. For
example, masking of sensitive values such as the randomiza-
tion of key-dependent values during cryptographic operations,
or execution randomization are countermeasures for hardening
the implementation against passive attacks such as power
analysis or EM analysis [4]. Executing critical calculations
twice allows to detect faults that are injected during an active
side-channel attack [148].
Protecting User Input. Mitigation techniques to prevent
attackers from inferring user input on touchscreens by means
of smudge attacks or shoulder surﬁng attacks are not that
thoroughly investigated yet. Nevertheless, proposed counter-
measures include, for example, randomly starting the vibrator
to prevent attacks that monitor the backside of the device [66],
or to randomize the layout of the soft keyboard each time the
user provides input to prevent smudge attacks [118] as well
as attacks that monitor the hand movement [65]. Aviv [118]
also proposed to align PIN digits in the middle of the screen
and after each authentication the user needs to swipe down
across all digits in order to hide smudges. Besides, Kwon and
Na [149] introduced a new authentication mechanism denoted
as TinyLock that should prevent smudge attacks against pattern
unlock mechanisms. Krombholz et al. [150] proposed an
authentication mechanism for devices with pressure-sensitive
screens that should prevent smudge attacks and shoulder
surﬁng attacks. Raguram et al. [62], [63] suggested to decrease
the screen brightness, to disable visual feedback (e.g., pop-up
characters) on soft keyboards, and to use anti-reﬂective coating
in eyeglasses to prevent attackers from exploiting reﬂections.
B. Vicinity Side-Channel Attacks
Preventing Network Trafﬁc Analysis. Countermeasures
to prevent attackers from applying trafﬁc analysis techniques
on wiretapped network connections have been extensively
considered in the context of website ﬁngerprinting attacks.
The main idea of these obfuscation techniques is to hide
information that allows attackers to uniquely identify com-
munication partners or transmitted content such as visited
websites. Proposed countermeasures [151]–[155], however,
require the application, e.g., the browser application, as well
as the remote server to cooperate. Furthermore, it has already
been pointed out
these countermeasures add
overhead in terms of bandwidth and data consumption which
might not be acceptable in case of mobile devices with limited
data plans.
in [26] that
C. Remote Side-Channel Attacks
Permissions. The most straight-forward approach always
discussed as a viable means to prevent speciﬁc types of
software-only side-channel attacks is to protect the exploited
information or resource by means of dedicated permissions.
However, there is a study [156] that showed that permission-
based approaches are not quite convincing. Some users do
not understand the exact meaning of speciﬁc permissions, and
others do not care about requested permissions. Acar et al. [15]
even attested that the Android permission system “has failed
in practice”. Despite these problems it seems to be nearly