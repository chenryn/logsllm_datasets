的质量标准时，分类就会在中盘阶段随时发生。然而，团队到了终
盘阶段时，分类就会变成最基本的任务，通常在PM或其他人的每
日工作中，占据了相当大的百分比。
分类的目标就是要以某种方式来管理工程管道（如同第14章所描述
的），这种方式要能使朝向里程碑退出标准所做的工作价值达到最
大化。成功做到这点，需要以下3件事：
清洁。新生成的Bug总是在重要程度上有所差距。要有人来查看
新Bug，从中取得质量水平的信息，这样才能分配给程序员，程序
员可以进一步调查和修正它们。有些Bug需要程序员调查，但是多
数过滤工作包括一些杂事：填写空白字段（严重性，优先级等），
改善再现的案例，确认不是已有Bug的复现等。这通常只是信息查
询工作：打电话，发邮件，以及花时间查找特定构建版本所追踪的
信息。
·调查。清洁完Bug之后，调查就开始了。我们必须修正这个Bug
造成这个问题，以及修正它时会牵扯到那些情况？妥善决定做出之
前，也许要有很多问题需要回答？某些考虑是有关技术的，某些则
不是。
·分出优先级。清洁和调查之后，Bug可以分出优先级，并按照合
理的重要程度置人管道中。
分类之所以困难，是因为要做好这3件事中的任何一件，所需的知
识都超过了任何个人的能力范围。项目越大，任何个人就越不可能
独自有效地完成分类工作。所以，就多数项目的多数团队而言，分
类是一项群体工作。刚并始时，也许个人分类自己的Bug还不错，
但是到了后期，焦点要移向小组和小团队。这就是Bug为什么要根
据特殊项目区域（参见前一部分“Bug/缺陷管理”）进行组织的原因
所在。负责该区域的小组成员一起分类，独立于团队中的其他成
员，这样就会比较容易开展工作。
接近终局阶段尾声时，当所有的Bug决策都仔细检查后，就应该对
整个项目进行一次分类，而且这必须由团队领导者的核心成员负责
（请参阅图15-8，我们将在下一部分“作战团队”中讨论）。到目前
为止，确定两种基本的分类非常重要：每日分类和指向分类。
777
---
## Page 779
个人分类
区域分类
时间
作战团队
图15-8：随着阶段的发展，分类变得集中化
每日/每周分类
每日分类是处理新生成Bug和活动中Bug的日常事务流程。根据时
限，这需要每周、每天或者每小时就要做一次。你越接近终局阶段
尾声，分类就必须经常进行。
每日分类的目标很简单：保持事情健全清晰。程序设计团队是项目
终局阶段的关键路径，分类是保证它们的管道通畅的唯一方法。最
好在Bug分配给每个程序员之前，进行清洁，和现有Bug池中的进行
对比。
有时，最好（出于团队效率因素）有人负责每个区域的每日分类。
假设程序员和测试员都同意分类标准，就可以有人来负责清洁新
Bug，标识出重复的Bug，调整新生成Bug的优先级。PM是做此事的
适当候选，假定他们技术能力足以理解问题和做出基本的Bug决
策。
否则，分类就应该在小型会议中进行，会上包括来自开发团队、测
试组和PM的代表。如果还要其他专业人士一—例如营销、设计或
者可用性方面的人一一必要时，也邀请他们参加。会议要简短。任
何无法再数分钟内解决的问题，都应该交给程序员去调查。
当Bug分类之后，Bug的字段就应该设定好。这可以给项目提供另外
一种Bug数据的观点，这样你可以把已经分类的Bug数量（已知的良
好的Bug），从活动中的Bug总数中分离出来（未知质量的Bug）。
778
---
## Page 780
指向分类
指向分类是一种集中的满足特定目标的努力。这是在每日分类之外
额外做的。指向分类是项目层次上的一种控制，帮助推进开展工
作，提高Bug表和趋势分析的价值。这就是指向分类的常见原因：
·当已分类Bug和活动中的Bug比率太低时。如果有500个活动中的
Bug，却只有200个已经完成分类，就无法知道剩余300个Bug的重要
程度。他们可能都是能让系统瘫痪的优先级1的Bug，或者可能都是
重复的Bug：你无法知道。指向分类有特定的目标，在特定的时间
（明天中午）内删除所有来分类的Bug。如果对于团队而言，这是
个持续很长时间的问题，就要有个目标，未分类的Bug不要持续超
过某个特定的时间（24小时）。
·当退出标准改变时。如果团队领导决定改变推出标准，分类是让
项目能够跟上这些变动的唯一方法。通常使用新的退出标准来改变
下降的角度，通过考虑提高下降角度的安全性，来删除某种类型的
Bug（但在过程中降低质量）。
·未关闭的数量很高。当修订完一个Bug时，状态就应该设定为已
经解决，然后分配回到发现Bug的人那里，确认是否真的已经修正
完成。有一定比率的这些Bug可能没有得到正确的修正。如果这些
Bug的状态是未关闭，就会有一堆必须要修正的Bug，但是却没有显
示在活动中的Bug数中。根据你的Bug追踪系统，可能还有其他地方
会隐藏Bug。你必须定期要求你的团队把它们清理出来。
作战团队
当团队接近完工时，分散的权限就要集中起来。不像功能设计和程
序设计那样，可以把权限合理地分散于团队内，朝向终点时充许你
犯错的空间变得很小。决策变得越来越敏感一—都是细节性的工
作，而非建设性的工作。微软对于集中控制的术语被称为作战团队
（warteam，我想，是从军事术语作战室（warroom）借用来的，
领导者在作战室里碰面决定重大问题）。一小组团队领导成为权力
的有统治地位的执行分支。在小团队中，权力正式移交的形式可能
并不需要，但是在大的团队中，这种移交就是非常重要的。这会为
所有决策建立基准，并提供推进功能使团队完成比赛。
779
---
## Page 781
实际的作战团队会议很简单。你所需要的就是一间会议室，以及来
自各组的资深代表（程序设计、测试、PM或者其他同级的领导，
也可能是该组的资深经理），以及一台连接了大屏幕的计算机，这
样，整个房间里的人就可以看到正在讨论的Bug或者问题。作战团
队通过某个问题，必须经过所有资深人员的同意（有些团队选择2/3
多数同意，或者给作战团队成员否决权）。作战团队日程每关早晨
决定，任何问题都可以提到日程中来。就像法庭那样，任何他们接
受或者否定的事情，都会为团队其他成员设定优先事项。作战团队
会议应该向整个团队公开，给那些展示特定DCR（参阅前一章）或
者提议需要查看的Bug提供优先级，
作战团队应该设立很高的标准。任何出席作战团队的人，如果没有
准备好或者对基本问题缺乏答案（这符合哪些退出标准？这会造成
哪些Bug回归？程序员和测试员是否都同意这个Bug需要修正？），
就应该让他们离开，等到准备好时再回来。作战团队的时间非常珍
贵，因为团队的时间很珍贵。每位PM和程序员都应该有高度的动
机，在请求作战团队同意时，明确其事项，并且让它如岩右般稳
固。这种压力会使团队产生自然的动力，让他们选择把问题带到作
战团队中以前，仔细思考这些问题。（要小心：作战团队会议的代
价可能很高，有很多机会使人因为哗众取宠以及自私自利而浪费掉
时间。小组经理要负责尽早遇制这种破坏性的行为。）
关于作战团队涉及什么内容以及何时运作，团队应该有明确的提
示。图15-9展示了作战团队在核准事情之前，需要进行的基本步
骤。目标是让权限逐渐集中，并伴有那些转变何时发生的公开日
期。DCR的核准通常是作战团队的首要作用，因为这些可能在中盘
阶段的早期发生。随后，当Bug数量紧紧地跟踪时，把程序置入程
序管道的核准权，就移交到作战团队手中（之前核准的Bug一般不
受此限）。最后，在结束的几周或者几天里，作战团队查看所有新
生成的Bug，同时项目控制也有效地集中化。
780
---
## Page 782
作战团队核准所有DCR
作战团队核准所有新的Bug
剩余工作
作战团队集中分类
时间
图15-9：作战团队的权限，随着终局阶段的进展而增加
作战团队会议在并始时，可以每周一次，但是，很快就应转成每天
半小时或者一个小时的会议。作战团队要负责保证这些会议可以按
时召并和结束（有人要在会议并始之前理清日程）。如果目标是针
对退出标准和目标做出良好决策，就有可能在60分钟内，假如不是
30分钟，查看很多DCR，以及对众多Bug进行分类。秘诀是避免终
局阶段的微控。
作战团队无需了解每个Bug或者每个问题的细节。相反，他们只需
确保决策满足项目的最大化利益，正确的问题已经提出并给出答
案，并且正确的基准也已设定，用以利用剩余的时间。当领导者不
信任他们的团队时，作战团队就无法顺利工作。如果某个问题真的
很让人头疼，就应该私下和作战团队成员之一进行讨论，隔关再以
改善的展示方式创新带回到团队中来。
在项目目标、退出标准、决定Bug优先级设定以及团队沟通之间，
有很多机会可以为团队做决策。有时团队的核准流程可以自动化，
有网站窗体充许作战团队成员在自已的时间范围内，远程核准工作
项目。要聪明一些。寻找方法使作战团队避免成为不必要或者无意
识的瓶颈。
一般来说，作战团队需要管理的问题越少，资深管理阶层在规划、
执行以及领导团队完成项目时，就会做得越好。如果作战团队会议
通常是残酷的3小时马拉松赛跑，那么领导阶层就在一方面，或者
多方面已经失败了，这就有经验教训可以吸取，以免下个项目中出
现同样的错误。
781
---
## Page 783
终局阶段的结束
工程项目的关闭时期是一个非常困难，且令人心智麻末的过程。
Jim McCarthy《Dynamics of Software Development》（Microsoff
Press，1995）一书中，将此过程称为和果冻一起工作。每次修正一
个Bug，你就得有力地多碰一次这个大方果冻，然后，这个果冻就
要花点时间停止晃动并稳定下来。你碰的次数越多，果冻晃动的变
数就越大，这些变动的波纹之间，相互作用得就越复杂。一个网站
或者软件产品在本质上，就是一大组相互高度连接的可移动组件，
每次你改变其中一个部分，就会道使其遭受各种可能的新的行为波
动。但是，这不像果冻，很难知道晃动什么时候会停止。程序不是
透明的。只有通过质量保证流程，仔细地手工检查构建版本，你才
能了解微小变动的作用结果[L2]。
这就是说，项目的真正结束通常就是一个伺机而动的策略。要花数
小时去查看新的Bug报告或者问题，仔细检查它们，看是否满足再
次晃动果冻的基准。在较大的团队中，是由作战团队担任此重任。
虽然团队中其他成员正在积极搜寻新的问题和使用最新的构建版
本，每个人都可以某种方式，对伺机而动的策略做出自己的贡献。
但是，每当有Bug值得去晃动果冻时，每件事又会再次进入全力准
备状态。作战团队带领团队通过这个过程，并且对问题了解得非常
透彻，足以进行精确的改变。然后，整组测试和条件必须再次运转
起来，以保证除了那件微小的需要改变的事情以外，所有事情就像
以往一样。这是压力非常大的一个过程。不同于中盘阶段的全力以
赴地工作，也不同于终盘阶段初期快乐地寻找Bug，最后几天的这
种压力无法通过沉浸在成堆的工作中得以缓解。每件事都很细微，
压力无处排解。
这个过程中，有不同的评价方法和重要的时刻，但是这些并不能改
变工作的本质。它们只是发布过程中的中间里程碑。至少，这些标
识打破了终局阶段后期工作那充满压力的单调。
·零Bug反弹。当活动中和已核准（由作战团队）的Bug数降到零