Set saddrj = F (KT , w1||j||0)
Set stokenList = stokenList ∪ {saddrj}
End For
Send stokenList to the server
Server: Round 1
1)
2)
3)
4)
5)
Parse EDB = (TSet, XSet)
Initialize sEOpList to an empty list
For j = 1 to stokenList.size:
a)
b)
Set svalj = TSet[stokenList[j]]
Set sEOpList = sEOpList ∪ {svalj}
End For
Send sEOpList to the client
Client: Round 2
1)
2)
3)
4)
5)
6)
7)
8)
a)
b)
c)
a)
b)
c)
Initialize sIdList to an empty list
For j = 1 to |Upd(w1)|:
Set (idj||opj ) = sEOpList[j] ⊕ F (KT , w1||j||1)
If opj is add then set sIdList = sIdList ∪ {idj}
Else set sIdList = sIdList \ {idj}
End For
Let m = sIdList.size (=|DB(w1)|).
Initialize xtagList1, . . . , xtagListm to empty lists
For j = 1 to m:
Let idj = sIdList[j]
For i = 2 to n:
i)
ii)
iii)
Set xtagi,j,add = F (KX , wi||idj||add)
Set xtagi,j,del = F (KX , wi||idj||del)
Set
=
{(xtagi,j,add, xtagi,j,del)}
xtagListj
xtagListj
Randomly permute the tuple-entries of xtagListj
End For
Send (xtagList1, . . . , xtagListm) to the server
Server: Round 2
1)
For j = 1 to m:
a)
b)
c)
Set bj = 1
For i = 2 to n:
i)
ii)
iii)
End For
Set (xtagi,j,add, xtagi,j,del) = xtagListj [i]
If XSet[xtagi,j,add] = ⊥, then set bj = 0
Else If XSet[xtagi,j,del] = 1, then set bj = 0
2)
3)
End For
Send (b1, . . . , bm) to the client
Client: Final Output Computation
1)
2)
3)
4)
Initialize IdList to an empty list
For j = 1 to m:
a)
b)
Let idj = sIdList[j]
If bj = 1, then set IdList = IdList ∪ {idj}
End For
Output IdList
Figure 6: BDXT. SEARCH (sk, st, q = (w1 ∧ . . . ∧ wn); EDB)
deletions in a symmetric manner by generating cross-tags for
them using the same PRF operation ensures that the adversary
also cannot infer additional information about the deletion
history of keywords (it is computationally indistinguishable
from the insertion history), which is the primary requirement
for backward privacy. Achieving simultaneously forward and
backward private dynamic cross-tags constitutes the key tech-
nical innovation of our work and has not, to our knowledge,
been achieved by prior works.
Handling Conjunctive Searches. The conjunctive search
procedure for BDXT is described in Figure 6. Let q =
(w1 ∧ w2 ∧ . . . ∧ wn) be a conjunctive query issued by the
client, and let w1 be the keyword with the least frequency.
In our simpliﬁed protocol, the search operation involves two
rounds of communication between the client and the server.
Round-1 allows the client to recover DB(w1) as mentioned
above. More concretely, the client ﬁrst efﬁciently generates all
relevant addresses in the TSet related to w1 and sends them
across to the server. The server then retrieves the encrypted
(id, op) pairs and transmits them back to the client. Finally,
the client locally decrypts and recovers DB(w1). This is very
similar to the search algorithm in MITRACONJ.
the following conditions hold simultaneously:
Round-2 is based on the following observation: at a given
point of time, an identiﬁer-keyword pair (idj, wi) ∈ DB
iff
the
“insertion-cross-tag” corresponding to (idj, wi) is currently set
to 1 (meaning that (idj, wi) has been inserted), and (b) the
“deletion-cross-tag” corresponding to (idj, wi) is currently set
to ⊥ (meaning that (idj, wi) is not yet deleted).
(a)
∪
Based on this observation, it is natural to execute Round-2
of the conjunctive search via the following steps:
1)
2)
3)
For each identiﬁer idj ∈ DB(w1), the client efﬁ-
ciently computes the cross-tag-pairs corresponding
to (idj, w2), . . . , (idj, wn), and sends these (n − 1)
cross-tag-pairs across to the server (in randomly
permuted order).
For each j ∈ |DB(w1)|, the server receives a set of
(n − 1) cross-tag-pairs from the client and retrieves
the corresponding XSet entries. If for each pair, the
ﬁrst entry is 1 and second entry is ⊥, the server
returns bj = 1, otherwise it returns bj = 0.
For each idj ∈ DB(w1), if the corresponding bit bj
received from the server is 1, the client includes the
identiﬁer idj in the ﬁnal list of identiﬁers to be output.
Otherwise, it discards the identiﬁer idj.
Correctness of the search protocol follows immediately
from the aforementioned observation.
Implementing XSet. The XSet dictionary is represented
equivalently using a set SXSet that is history-independent (i.e.,
it is independent of the order in which the elements of the
set were inserted), and supports: (a) efﬁcient element insertion
and (b) efﬁcient membership test for a random element. For
a dynamic cross-tag xtagi,j,op corresponding to an identiﬁer-
keyword pair (idj, wi) and an operation op ∈ {add, del}, we
interpret its corresponding value in the XSet dictionary as:
XSet[xtagi,j,op] =
if xtagi,j,op ∈ SXSet
⊥ otherwise
(cid:26)1
During an update operation, setting a XSet entry to 1 can be
realized by simply adding the corresponding cross-tag to the
set SXSet. As long as SXSet supports efﬁcient element insertion,
an update operation can thus be realized efﬁciently. Similarly,
as long as SXSet supports efﬁcient membership testing, the
XSet dictionary can be efﬁciently looked up by the server
during conjunctive searches.
7
Server Storage. The server stores the dictionaries TSet and
XSet. Note that during setup, the TSet and XSet dictionaries
are both initialized to empty. After N updates, the storage
requirement at the server grows linearly as O(N λ), since
each update operation adds a O(λ)-sized entry of the form
(addr, val) to TSet and a O(λ)-sized cross-tag entry of the
form (xtag, 1) to XSet. In other words, the storage require-
ment at the server grows linearly with the number of update
operations on the dataset.
Client Storage. The client locally stores the arrays UpdateCnt
and DBCnt. Note that during setup, both arrays are initialized
to empty. After N updates, the storage requirement at the
client grows as O(|W|· log N ), |W| is the size of the keyword
dictionary, which is typically upper-bounded by some large
pre-deﬁned constant. In other words, the storage requirement
at the client grows logarithmically with the number of update
operations on the dataset.
Search Performance. The computational overhead at both
the client and the server scales with (|Upd(w1)| + (n − 1) ·
|DB(w1)|). This is clearly a signiﬁcant
improvement over
the na¨ıve adaptation over MITRA whenever there is a query
term in the conjunction with relatively small frequency of
occurrence. The communication overhead also scales with
(|Upd(w1)| + (n− 1)·|DB(w1)|), which is again a signiﬁcant
improvement over the na¨ıve adaptation over MITRA whenever
DB(w1) is small. In particular, this matches our original goal
of reducing the computational and communication overheads
by tying these to the s-term w1 that has the lowest frequency
of occurrence.
An undesirable feature of BDXT from the point of view
of search performance is the extra round of communication
with consequent latency. For some applications, low latency
might be a more crucial requirement and having a single round
of communication during searches might be preferable, even
if at the cost of additional computation at the client and/or
server. Having multiple rounds of interaction during searches
also limits the applicability of BDXT to some settings, such as
the multi-client SSE setting. We expand on this subsequently.
Leakage. In terms of leakage, BDXT again improves sub-
stantially upon the na¨ıve adaptation of MITRA by tying the
leakage from conjunctive searches to the s-term w1 that has
the least frequency of occurrence. Recall that in MITRACONJ, a
search operation allows the server to learn partial information
about every update operation involving every keyword in the
conjunction. On the other hand, in BDXT, for each x-term
in {w2, . . . , wn}, the information gained by the adversary is
only restricted to update operations involving ﬁles in DB(w1).
To see this, observe that if a ﬁle with identiﬁer id contains
some x-term (say, w2) but does not contain the s-term w1,
then in BDXT, the server does not receive any cross-tag
corresponding to id, and hence learns no information about
the pair (id, w2).
However, BDXT still leaks more information than desir-
able. To begin with, BDXT allows the server to learn the fre-
quency of the s-term, i.e., |DB(w1)|, in addition to the number
of update operations involving the s-term, i.e., |Upd(w1)|. This
immediately leaks the exact number of insertion and deletion
operations involving w1. Note that the na¨ıve adaptation of
8
MITRA to the conjunctive setting does not suffer from this
leakage, as it only reveals |Upd(w1)| to the server.
BDXT also allows the server to learn cross-tag pairs in the
XSet dictionary that correspond to the same identiﬁer-keyword
pair, as well as the update history for this pair. Although
the server cannot immediately identify which keyword among
the x-terms w2, . . . , wn a given cross-tag pair corresponds
to (since the cross-tag pairs are uniformly randomly permuted
for each ﬁle identiﬁer in DB(w1)), it can test each cross-
tag pair for membership in the XSet dictionary to learn the
exact number of keywords among w2, . . . , wn that each ﬁle in
DB(w1) contains.
We present in the next subsection an improved version of
BDXT that achieves signiﬁcantly smaller leakage; hence, we
avoid a formal analysis of the leakage of BDXT.
C. Oblivious Dynamic Cross-Tags
We address the drawbacks of BDXT with respect to both
search performance and leakage by presenting an alternative
realization of dynamic cross-tags called Oblivious Dynamic
Cross-Tags, or ODXT in short. The corresponding algorithms
for setup, updates and search are described in Figures 7, 8
and 9 , respectively. The main changes from BDXT are
highlighted in red.
The key technical difference between ODXT and BDXT
is that ODXT uses an oblivious shared computation between
the client and the server to allow conjunctive searches with a
single round of communication. To enable this oblivious shared
computation, we resort to using blinded exponentiations (as in
the Difﬁe-Hellman based oblivious PRF) in a cyclic group
of prime order. ODXT also improves upon BDXT in terms
of search privacy by reducing the information leakage to the
server during conjunctive searches.
The Idea. In order to elucidate the core idea behind ODXT,
we focus on why our simpler scheme, namely BDXT, requires
two rounds of communication between the server and the
client. Note that in the ﬁrst round, the client executes a single
keyword search on the s-term to recover DB(w1). Conse-
quently, in the second round, it generates a pair of cross-tags
(xtagi,j,add, xtagi,j,del) for each keyword wi ∈ {w2, . . . , wn}
and each document identiﬁer idj ∈ DB(w1) recovered in the
ﬁrst round. If the client could allow the server to compute these
cross-tags without explicitly recovering DB(w1), the additional
round communication could be avoided.
Our goal
is to enable an oblivious evaluation of
the
cross-tag pair without explicitly recovering DB(w1), thereby
avoiding an additional round of interaction between the client
and the server.
Change Cross-Tags in XSet. The ﬁrst step in realizing this
goal is to change the manner in which the cross-tags are
generated. For a keyword wi, a document identiﬁer idj and
an operation op ∈ {add, del}, the client now generates the
corresponding cross-tag xtagi,j,op as
xtagi,j,op = gFp(KX ,wi)·Fp(KY ,idj||op),
where g is a generator for a cyclic group G of prime order p,
Fp is a PRF with range Z∗
p, and KX and KY are uniformly
sampled keys for the PRF Fp.
Client
1)
2)
3)
4)
5)
6)
Sample a uniformly random key KT for PRF F
Sample uniformly random keys KX , KY , KZ for PRF Fp
Initialize UpdateCnt, TSet, XSet to empty maps
Set sk = (KT , KX , KY , KZ ) and st = UpdateCnt
Set EDB = (TSet, XSet)
Send EDB to the server
Figure 7: ODXT. SETUP (λ)
Note that conceptually, the xtag is split into two parts, one
pertaining to wi and the other pertaining to the pair (idj, op),
which are combined multiplicatively in the exponent of g.
This is the key change from how the xtag was generated in
BDXT (in BDXT, these two parts were combined into a single
PRF evaluation). As we shall see, this is crucial to enabling
the oblivious computation.
Note: The tag calculation mechanism works even when a
given document is being updated with the same keyword(s)
multiple times. As stated earlier in footnote 3, we assume
that update operations involving the same ﬁle identiﬁer are
never repeated. In particular, when an existing ﬁle is to be
updated, it is deleted and re-inserted (in modiﬁed form) under a
fresh ﬁle identiﬁer. This assumption is made in several existing
forward and backward private SSE schemes for single keyword
search, most notably in the constructions of Bost et al. [6] and
Chamani et al. [10], including the original MITRA scheme.
Dynamic Blinding Factors in TSet. The client also computes
and stores in the TSet dictionary a dynamic blinding element
corresponding to each update operation. For example,
let
(op, (idj, wi)) be the cntth update operation involving the
keyword wi (the client can keep track of this count for each
keyword using the UpdateCnt data structure). In the TSet
address corresponding to this update operation,
the client
additionally stores the following blinding element:
αi,j,op = Fp(KY , idj||op) · (Fp(KZ, wi||cnt))−1,
where g, Fp and KY are as deﬁned before, and KZ is again
a uniformly sampled key for the PRF Fp.
Note again that conceptually, the blinding factor α is also
split into two parts, one pertaining to the keyword-count pair
(wi, cnt) and the other pertaining to the pair (idj, op), which
are combined multiplicatively in Z∗
p. Also note that the part
pertaining to the pair (idj, op) is the same in both the xtag
and the blinding factor α. This is an intentional design choice.
Looking ahead, during a search operation,
the server will
be provided with a “search token” that, when “obliviously”
combined with the blinding term α, will give rise to an
expression that matches the corresponding xtag. The presence
or absence of this xtag in the XSet will then determine the
outcome of the search. We present the details of this oblivious
combination mechanism next.
Differences with Static Cross-Tags and Static Blinding Fac-
tors. Once again, unlike previous works [9], [29], our cross-
tags are computed on-the-ﬂy with every update operation, and
not at setup. In the OXT scheme of et al. [9] and the HXT
Client
1)
2)
3)
4)
5)
6)
7)
8)
Server
Parse sk = (KT , KX , KY , KZ ) and st = UpdateCnt
If UpdateCnt[w] is NULL then set UpdateCnt[w] = 0
Set UpdateCnt[w] = UpdateCnt[w] + 1
Set addr = F (KT , w||UpdateCnt[w]||0)
Set val = (id||op) ⊕ F (KT , w||UpdateCnt[w]||1)
Set α = Fp(KY , id||op) · (Fp(KZ , w||UpdateCnt[w]))−1
Set xtag = gFp(KX ,w)·Fp (KY ,id||op)
Send (addr, val, α, xtag) to the server
1)
2)
3)
Parse EDB = (TSet, XSet)
Set TSet[addr] = (val, α)
Set XSet[xtag] = 1
Figure 8: ODXT. UPDATE (sk, st, op, (id, w); EDB)
scheme of Lai et al. [9], a static cross tag was conceptually di-
vided into two parts, one corresponding to the keyword wi and
the other corresponding to only the document identiﬁer idj. In
ODXT, we additionally involve the operation op ∈ {add, del}
in the generation of the cross-tag, and combine it with the
document identiﬁer idj. Similar to BDXT, this allows a cross-