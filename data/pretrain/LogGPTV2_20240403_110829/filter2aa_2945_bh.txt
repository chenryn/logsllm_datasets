### Explicit Interface Implementation in C#

When implementing an interface, you can specify which interface a method belongs to. This is particularly useful when a class implements multiple interfaces with methods that have the same name but different implementations. Here's an example:

```csharp
class Horse : ILandBound, IJourney
{
    int ILandBound.NumberOfLegs()
    {
        return 4;
    }

    int IJourney.NumberOfLegs()
    {
        return 3;
    }
}
```

In this example, `Horse` implements both `ILandBound` and `IJourney` interfaces, each with a `NumberOfLegs` method. The `Horse` has four legs, and it has pulled the coach for three legs of the journey.

#### Key Points:
- **Prefixing Method Names**: The method names are prefixed with the interface name to disambiguate them.
- **Access Modifiers**: Methods in an explicit interface implementation are not marked as `public`. They are implicitly private to the class.
- **Visibility**: These methods are not visible through the `Horse` class. To access them, you need to cast the `Horse` object to the appropriate interface type.

```csharp
Horse horse = new Horse();
IJourney journeyHorse = (IJourney)horse;
int legsInJourney = journeyHorse.NumberOfLegs();

ILandBound landBoundHorse = (ILandBound)horse;
int legsOnHorse = landBoundHorse.NumberOfLegs();
```

### Interface Restrictions

Interfaces in C# have several restrictions to ensure they do not contain any implementation details:

1. **No Fields**: Interfaces cannot define fields, even static ones.
2. **No Constructors or Destructors**: Interfaces cannot define constructors or destructors.
3. **No Access Modifiers**: All methods in an interface are implicitly public.
4. **No Nested Types**: Interfaces cannot contain nested types such as enumerations, structures, classes, or other interfaces.
5. **No Inheritance from Classes or Structures**: Interfaces can only inherit from other interfaces, not from classes or structures.

### Defining and Using Interfaces

In the following exercises, you will define and implement interfaces for a simple graphical drawing package. You will create two interfaces, `IDraw` and `IColor`, and then define classes that implement them.

#### IDraw Interface

The `IDraw` interface defines the following methods:
- `SetLocation(int xCoord, int yCoord)`: Sets the position of the shape on the canvas.
- `Draw(Canvas canvas)`: Draws the shape on the canvas at the specified location.

#### IColor Interface

The `IColor` interface defines the following method:
- `SetColor(Color color)`: Sets the color of the shape.

### Steps to Define and Implement the Interfaces

1. **Start Visual Studio** and open the `Drawing` solution located in `\Microsoft Press\VCSBS\Chapter 13\Drawing`.
2. **Add the IDraw Interface**:
   - Add a new item to the project and select the Interface template.
   - Name the file `IDraw.cs`.
   - Add the necessary using directives and define the `IDraw` interface.

```csharp
using Windows.UI.Xaml.Controls;

namespace Drawing
{
    interface IDraw
    {
        void SetLocation(int xCoord, int yCoord);
        void Draw(Canvas canvas);
    }
}
```

3. **Add the IColor Interface**:
   - Add a new item to the project and select the Interface template.
   - Name the file `IColor.cs`.
   - Add the necessary using directives and define the `IColor` interface.

```csharp
using Windows.UI;

namespace Drawing
{
    interface IColor
    {
        void SetColor(Color color);
    }
}
```

4. **Create the Square Class**:
   - Add a new class to the project and name it `Square`.
   - Modify the class to implement `IDraw` and `IColor`.
   - Add private variables to store the position and size of the square.
   - Add a constructor to initialize the side length.
   - Implement the `IDraw` and `IColor` methods.

```csharp
using Windows.UI;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Shapes;
using Windows.UI.Xaml.Controls;

namespace Drawing
{
    class Square : IDraw, IColor
    {
        private int sideLength;
        private int locX = 0, locY = 0;
        private Rectangle rect = null;

        public Square(int sideLength)
        {
            this.sideLength = sideLength;
        }

        void IDraw.SetLocation(int xCoord, int yCoord)
        {
            this.locX = xCoord;
            this.locY = yCoord;
        }

        void IDraw.Draw(Canvas canvas)
        {
            if (this.rect != null)
            {
                canvas.Children.Remove(this.rect);
            }
            else
            {
                this.rect = new Rectangle();
            }
            this.rect.Height = this.sideLength;
            this.rect.Width = this.sideLength;
            Canvas.SetTop(this.rect, this.locY);
            Canvas.SetLeft(this.rect, this.locX);
            canvas.Children.Add(this.rect);
        }

        void IColor.SetColor(Color color)
        {
            if (this.rect != null)
            {
                SolidColorBrush brush = new SolidColorBrush(color);
                this.rect.Fill = brush;
            }
        }
    }
}
```

5. **Create the Circle Class**:
   - Add a new class to the project and name it `Circle`.
   - Modify the class to implement `IDraw` and `IColor`.
   - Add private variables to store the position and size of the circle.
   - Add a constructor to initialize the diameter.
   - Implement the `IDraw` and `IColor` methods.

```csharp
using Windows.UI;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Shapes;
using Windows.UI.Xaml.Controls;

namespace Drawing
{
    class Circle : IDraw, IColor
    {
        private int diameter;
        private int locX = 0, locY = 0;
        private Ellipse circle = null;

        public Circle(int diameter)
        {
            this.diameter = diameter;
        }

        void IDraw.SetLocation(int xCoord, int yCoord)
        {
            this.locX = xCoord;
            this.locY = yCoord;
        }

        void IDraw.Draw(Canvas canvas)
        {
            if (this.circle != null)
            {
                canvas.Children.Remove(this.circle);
            }
            else
            {
                this.circle = new Ellipse();
            }
            this.circle.Height = this.diameter;
            this.circle.Width = this.diameter;
            Canvas.SetTop(this.circle, this.locY);
            Canvas.SetLeft(this.circle, this.locX);
            canvas.Children.Add(this.circle);
        }

        void IColor.SetColor(Color color)
        {
            if (this.circle != null)
            {
                SolidColorBrush brush = new SolidColorBrush(color);
                this.circle.Fill = brush;
            }
        }
    }
}
```

### Testing the Square and Circle Classes

1. **Open the `DrawingPad.xaml` file** in Design View.
2. **Click the large shaded area** on the form to set the focus to the `Canvas` object.
3. **Add an event handler** for the `Tapped` event of the `Canvas` control.
4. **Implement the event handler** to create and draw a `Square` object.

```csharp
using Windows.UI;
using Windows.UI.Xaml.Input;
using Windows.Foundation;

namespace Drawing
{
    public partial class DrawingPad : Page
    {
        public DrawingPad()
        {
            InitializeComponent();
        }

        private void drawingCanvas_Tapped(object sender, TappedRoutedEventArgs e)
        {
            Point mouseLocation = e.GetPosition(drawingCanvas);
            Square mySquare = new Square(100);

            if (mySquare is IDraw)
            {
                IDraw drawSquare = (IDraw)mySquare;
                drawSquare.SetLocation((int)mouseLocation.X, (int)mouseLocation.Y);
                drawSquare.Draw(drawingCanvas);
            }
        }
    }
}
```

This completes the implementation and testing of the `Square` and `Circle` classes. You can now use the form to test and interact with these shapes.