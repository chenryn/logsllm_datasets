### ETW Provider

#### 48. Driver and Errata Initialization
After the boot-start and system-start drivers are loaded, the errata manager loads the INF database with the driver errata and begins parsing it. This process includes applying registry PCI configuration workarounds.

#### 49. Safe Mode Detection
If the computer is booting in safe mode, this fact is recorded in the registry.

### Chapter 12: Startup and Shutdown

#### 50. Kernel-Mode Paging
Unless explicitly disabled in the registry, paging of kernel-mode code (in Ntoskrnl and drivers) is enabled.

#### 51. Power Manager Initialization
The power manager is called to finalize its initialization.

#### 52. Kernel Clock Timer Support
The kernel clock timer support is initialized.

#### 53. Licensing Information
Before the INIT section of Ntoskrnl is discarded, the rest of the licensing information for the system is copied into a private system section, including the current policy settings stored in the registry. The system expiration time is then set.

#### 54. Process Manager Setup
The process manager is called to set up rate limiting for jobs and the system process creation time. It initializes the static environment for protected processes and looks up various system-defined entry points in the user-mode system libraries previously mapped by the I/O manager (usually Ntdll.dll, Ntdll32.dll, and Vertdll.dll).

#### 55. Security Reference Monitor
The security reference monitor is called to create the Command Server thread that communicates with LSASS. This phase creates the Reference Monitor command port, used by LSA to send commands to the SRM. For more on how security is enforced in Windows, see the "Security system components" section in Chapter 7, Part 1.

#### 56. VSM and Secure System Process
If the VSM (Virtual Secure Mode) is enabled, the encrypted VSM keys are saved to disk. The system user-mode libraries are mapped into the Secure System Process. This ensures that the Secure Kernel receives all the necessary information about the VTL 0’s system DLLs.

#### 57. Session Manager (Smss) Process
The Session Manager (Smss) process, introduced in Chapter 2, System Architecture, Part 1, is started. Smss is responsible for creating the user-mode environment that provides the visible interface to Windows. Its initialization steps are covered in the next section.

#### 58. Bootvid Driver
The bootvid driver is enabled to allow the NT check disk tool to display the output strings.

#### 59. TPM Boot Entropy Values
The TPM boot entropy values are queried. These values can be queried only once per boot. If the TPM system driver has not queried them (e.g., if it was disabled), the kernel manually queries them to avoid this situation. In normal scenarios, the kernel’s own query should fail.

#### 60. Memory Cleanup
All the memory used by the loader parameter block and all its references (like the initialization code of Ntoskrnl and all boot drivers, which reside in the INIT sections) are now freed.

### Final Steps Before Executive and Kernel Initialization
As a final step before considering the executive and kernel initialization complete, the phase 1 initialization thread sets the critical break on termination flag to the new Smss process. If the Smss process exits or gets terminated, the kernel intercepts this, breaks into the attached debugger (if any), and crashes the system with a STOP code. If the five-second wait times out, the Session Manager is assumed to have started successfully, and the phase 1 initialization thread exits. The boot processor then executes one of the memory manager’s system threads created in step 22 or returns to the Idle loop.

### Smss, Csrss, and Wininit
Smss is a trusted part of the operating system and runs as a protected process light (PPL). It uses core executive APIs (Windows native API) rather than Win32 APIs because the Windows subsystem is not yet executing when Smss launches. One of Smss's first tasks is to start the Windows subsystem.

#### Smss Initialization
For detailed Smss initialization, refer to the Session Manager section in Chapter 2, Part 1. When the master Smss creates child Smss processes, it passes two section objects' handles as parameters. These section objects represent shared buffers for exchanging data between multiple Smss and Csrss instances. The master Smss spawns the child using the `NtCreateUserProcess` routine, specifying a flag to instruct the Process Manager to create a new session. The `PspAllocateProcess` kernel function calls the memory manager to create the new session address space.

#### Child Smss and Csrss
The executable name that the child Smss launches at the end of its initialization is stored in the shared section, usually Wininit.exe for session 0 and Winlogon.exe for interactive sessions. Before launching Wininit, the new session 0 Smss connects to the Master Smss (through the SmApiPort ALPC port) and loads and initializes all the subsystems.

#### Client-Server Subsystem (Csrss)
The session manager acquires the Load Driver privilege and asks the kernel to load and map the Win32k driver into the new session address space. It then launches the client-server subsystem process (Csrss.exe), specifying the root Windows Object directory name, shared section objects' handles, the subsystem name, and the subsystem’s DLLs:
- Basesrv.dll: The server side of the subsystem process.
- Sxssrv.dll: The side-by-side subsystem support extension module.
- Winsrv.dll: The multiuser subsystem support module.

Csrss performs some initialization, such as enabling process mitigation options, removing unneeded privileges from its token, starting its own ETW provider, and initializing a linked list of EPROCESS data structures to trace all the Win32 processes that will be started in the system. It then parses its command line, grabs the shared sections' handles, and creates two ALPC ports:
- CSR API command port (SessionsIDWindowsApiPort): Used by every Win32 process to communicate with the Csrss subsystem.
- Subsystem Session Manager Port (SessionsIDWindowsSbApiPort): Used by the session manager to send commands to Csrss.

Csrss creates the two threads used to dispatch the commands received by the ALPC ports and connects to the Session Manager through another ALPC port (SmApiPort), which was previously created in the Smss initialization process. After spawning the subsystem process, the child Smss launches the initial process (Wininit or Winlogon) and then exits. Only the master instance of Smss remains active.

### Pending File Rename Operations
Executable images and DLLs are memory-mapped, making it impossible to update core system files after Windows has finished booting unless hotpatching technology is used. The MoveFileEx API allows file moves to be delayed until the next boot. Service packs and hotfixes that must update in-use memory-mapped files install replacement files onto a system in temporary locations and use the MoveFileEx API to replace otherwise in-use files. These operations are recorded in the `PendingFileRenameOperations` and `PendingFileRenameOperations2` keys under `HKLM\SYSTEM\CurrentControlSet\Control\Session Manager`. You can use the Pendmoves utility from Windows Sysinternals to view registered delayed rename and delete commands.

### Wininit and Winlogon
Wininit performs its startup steps, such as creating the initial window station and desktop objects, setting up the user environment, starting the Shutdown RPC server and WSI interface, and creating the service control manager (SCM) process (Services.exe). It also checks for previous system crashes, carves the crash dump, and starts the Windows Error Reporting process (werfault.exe) if needed. Finally, it starts the Local Security Authentication Subsystem Service (Lsass.exe) and, if Credential Guard is enabled, the Isolated LSA Trustlet (Lsaiso.exe), and waits for a system shutdown request.

On session 1 and beyond, Winlogon runs instead. While Wininit creates the noninteractive session 0 windows station, Winlogon creates the default interactive-session Windows station (WinSta0) and two desktops: the Winlogon secure desktop and the default user desktop. Winlogon queries the system boot information using the `QuerySystemInformation` API and, if the boot configuration includes the volatile OS Selection menu flag, it starts the GDI system and launches the modern boot menu application (Bootim.exe).

### Modern Boot Menu
The modern boot menu application, spawned by Winlogon after Csrss is started, is a classical Win32 GUI application. To see the multiple entries in the Modern boot menu, you need a properly configured multiboot system. You can run the Bootim.exe from an administrative Command Prompt to see the real modern boot menu with all the boot options and tools.

### Logon Process
After launching the LogonUI process, Winlogon starts its internal finite-state machine to manage all possible states generated by different logon types. In standard interactive logon types, Winlogon shows a welcome screen and waits for an interactive logon notification from the credential provider. When the user inserts their credential, Winlogon creates a logon session LUID and validates the logon using the authentication packages registered in Lsass. If the authentication succeeds, Winlogon verifies the sequential logon scenario, loads the registry hive from the user's profile, and creates the user's environment variables. It then waits for the Sihost process and starts the shell by launching the executable specified in the `WinLogonUserinit` registry key.

### ReadyBoot
ReadyBoot optimizes the boot process by using an in-RAM cache if the system has 400 MB or more of free RAM. The cache is implemented by the Store Manager in the Rdyboost.sys driver, guided by the boot plan stored in the registry. The Sysmain service, started later in the boot process by the SCM, determines whether the cache needs to be enabled, checking the system configuration and the running Windows SKU. After each boot, the Sysmain service uses idle CPU time to calculate a boot-time caching plan for the next boot, storing the processed traces and calculating the new caching boot plan.

### Images That Start Automatically
In addition to the Userinit and Shell registry values in Winlogon’s key, there are many other registry locations and directories that default system components check and process for automatic process startup during the boot and logon processes. The Msconfig utility and the Autoruns tool from Sysinternals can be used to examine and display these configurations.

### Shutdown
The system shutdown process involves different components. Wininit, after performing all its initialization, waits for a system shutdown.