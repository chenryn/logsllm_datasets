        # Allocate a buffer and load a mutated input and put it into the right spot
        if args.input_file:
            print("Loading input content from {}".format(args.input_file))
            input_file = open(args.input_file, 'rb')
            input_content = input_file.read()
            input_file.close()
            # TODO: Apply constraints to mutated input here
            raise exceptions.NotImplementedError('No constraints on the mutated inputs have been set!')
            # Allocate a new buffer and put the input into it
            buf_addr = unicorn_heap.malloc(len(input_content))
            uc.mem_write(buf_addr, input_content)
            print("Allocated mutated input buffer @ 0x{0:016x}".format(buf_addr))
            # TODO: Set the input into the state so it will be handled
            raise exceptions.NotImplementedError('The mutated input was not loaded into the Unicorn state!')
        # Run the test
        print("Executing from 0x{0:016x} to 0x{1:016x}".format(START_ADDRESS, END_ADDRESS))
        try:
            result = uc.emu_start(START_ADDRESS, END_ADDRESS, timeout=0, count=0)
        except UcError as e:
            # If something went wrong during emulation a signal is raised to force this 
            # script to crash in a way that AFL can detect ('uc.force_crash()' should be
            # called for any condition that you want AFL to treat as a crash).
            print("Execution failed with error: {}".format(e))
            uc.dump_regs() 
            uc.force_crash(e)
        print("Final register state:")    
        uc.dump_regs()
        print("Done.")    
    if __name__ == "__main__":
        main()
整体浏览一下，TODO的地方不多，加载context之类的工作，比如之前我们学习unicorn时候要做的很多分配栈地址之类的，都已经在unicorn_loader里给通过load我们之前dump出的context来自动完成了，简单快捷。
那么把每处TODO大概看看
  1. TODO: Apply constraints to mutated input here  
我感觉没必要额外加什么约束，直接注释掉raise。
  2. TODO: Set the input into the state so it will be handled  
我们要fuzz的函数的参数此时都存在寄存器里，所以直接改掉寄存器的值就好。
  3. TODO: Set start/end address here  
这个就是我们刚刚断下来的地址就是起始地址，要fuzz的函数结束的地方就是终止地址。  
  4. TODO: Setup hooks and handle anything you need to here  
最麻烦的地方，和之前学习unicorn一样，有些指令还是要单独hook的。  
另外就是之前说的，这个函数要先检查crc校验和，这个参数我们没做控制，直接把那个检查hook了然后跳过。
hook crc校验和  
hook malloc，好处是我们可以自己实现自己的Guard Page，从而在越界读写的时候立刻crash。  
hook free  
hook printf  
hook cgc_transmit  
    import struct
    def read(name):
        with open(name,'rb') as f:
            return f.read()
    def u32(data):
        return struct.unpack("I", data)[0]
    def p32(num):
        return struct.pack("I", num)
    import argparse
    from unicorn import *
    from unicorn.x86_const import *  # TODO: Set correct architecture here as necessary
    import unicorn_loader 
    # Simple stand-in heap to prevent OS/kernel issues
    unicorn_heap = None
    # Start and end address of emulation
    START_ADDRESS = 0x0804D106 # TODO: Set start address here
    END_ADDRESS   = 0x0804D120 # TODO: Set end address here
    # Address where checksum is checked and where it goes if it is valid
    CHKSUM_CMP_ADDR    = 0x0804DA45
    CHKSUM_PASSED_ADDR = 0x0804DA52
    # Entry points of addresses of functions to hook
    MALLOC_ENTRY        = 0x08049C40
    FREE_ENTRY          = 0x08049980
    PRINTF_ENTRY        = 0x0804AA60
    CGC_TRANSMIT_ENTRY  = 0x0804A4C2
    CGC_TRANSMIT_PASSED = 0x0804A4DC
    """
        Implement target-specific hooks in here.
        Stub out, skip past, and re-implement necessary functionality as appropriate
    """
    def unicorn_hook_instruction(uc, address, size, user_data):
        if address == MALLOC_ENTRY:
            print("--- Rerouting call to malloc() @ 0x{0:08x} ---".format(address))
            size = struct.unpack(">> Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size))
            print(mu.mem_read(address,size))
        # TODO: Setup hooks and handle anything you need to here
        #    - For example, hook malloc/free/etc. and handle it internally
        pass
    #------------------------    #---- Main test function  
    def main():
        parser = argparse.ArgumentParser()
        parser.add_argument('context_dir', type=str, help="Directory containing process context")
        parser.add_argument('input_file', type=str, help="Path to the file containing the mutated input content")
        parser.add_argument('-d', '--debug', default=False, action="store_true", help="Dump trace info")
        args = parser.parse_args()
        print("Loading context from {}".format(args.context_dir))
        uc = unicorn_loader.AflUnicornEngine(args.context_dir, enable_trace=args.debug, debug_print=False)       
        # Instantiate the hook function to avoid emulation errors
        global unicorn_heap
        unicorn_heap = unicorn_loader.UnicornSimpleHeap(uc, debug_print=True)
        uc.hook_add(UC_HOOK_CODE, unicorn_hook_instruction)
        # Execute 1 instruction just to startup the forkserver
        # NOTE: This instruction will be executed again later, so be sure that
        #       there are no negative consequences to the overall execution state.
        #       If there are, change the later call to emu_start to no re-execute 
        #       the first instruction.
        print("Starting the forkserver by executing 1 instruction")
        try:
            uc.emu_start(START_ADDRESS, 0, 0, count=1)
        except UcError as e:
            print("ERROR: Failed to execute a single instruction (error: {})!".format(e))
            return
        # Allocate a buffer and load a mutated input and put it into the right spot
        if args.input_file:
            print("Loading input content from {}".format(args.input_file))
            input_file = open(args.input_file, 'rb')
            input_content = input_file.read()
            input_file.close()
            # TODO: Apply constraints to mutated input here
            if len(input_content) > 0xFF:
                return
            # raise exceptions.NotImplementedError('No constraints on the mutated inputs have been set!')
            # Allocate a new buffer and put the input into it
            buf_addr = unicorn_heap.malloc(len(input_content))
            uc.mem_write(buf_addr, input_content)
            print("Allocated mutated input buffer @ 0x{0:016x}".format(buf_addr))
            # TODO: Set the input into the state so it will be handled
            #raise exceptions.NotImplementedError('The mutated input was not loaded into the Unicorn state!')
            uc.reg_write(UC_X86_REG_EAX, buf_addr)
            uc.reg_write(UC_X86_REG_DL, len(input_content))
        # Run the test
        print("Executing from 0x{0:016x} to 0x{1:016x}".format(START_ADDRESS, END_ADDRESS))
        try:
            result = uc.emu_start(START_ADDRESS, END_ADDRESS, timeout=0, count=0)
        except UcError as e:
            # If something went wrong during emulation a signal is raised to force this 
            # script to crash in a way that AFL can detect ('uc.force_crash()' should be
            # called for any condition that you want AFL to treat as a crash).
            print("Execution failed with error: {}".format(e))
            uc.dump_regs() 
            uc.force_crash(e)
        print("Final register state:")    
        uc.dump_regs()
        print("Done.")    
    if __name__ == "__main__":
        main()
#### step4
运行fuzz  
需要唯一些输入进去。  
那就random一些就好了。
    # -*- coding: utf-8 -*-    
    import os, random
    def main():
        for i in range(50):
            size = random.randint(20, 50)
            os.system(f'dd if=/dev/urandom of=testcase/testcase_{i} count=2 bs={size}')
    if __name__ == '__main__':
        main()
    /home/sakura/unicorn/afl-unicorn/afl-fuzz -U -m none -i /home/sakura/unicorn/testcase/ -o /home/sakura/unicorn/fuzz_out/ -- python harness.py /home/sakura/unicorn/UnicornContext_20200405_045024/ @@
crash很多，跑了大概几秒钟，大概打开看看，定位一下漏洞点。  
但问题来了，没有栈回溯，我怎么定位到漏洞点。  
我简单的排查了一下，因为这道题的代码量并不大，尤其是我hook的代码并不多，所以我可以trace每条指令，和执行时它的一些关键信息。  
而这里比较简单的就是我review了一下memcpy的交叉引用，然后在new_packet里面找到了我要的。  
因为我是打印了执行流的，我看了一下地址  
在我检索之后发现log里有call cgc_memcpy，并且里没有trace到它的下一条指令0x000000000804db8e  
到这里基本上就可以知道漏洞点了。  
简单的思考一下，pNewPacket的buf大小是0x40，也就是64字节。  
但是很显然，在cgc_receive_packet里是根本没有对其进行dataLen的校验的。换而言之，  
这里cgc_g_packetHandlers是一个全局变量，用处大概是填充诸多类型的packetType用来进行check。  
而只需要在pData第一个字节构造好type类型，就可以进入add_new_packet函数里，并造成一个oob write了。
## 总结
afl-unicorn的局限性在于，它和unicorn一样，在你模拟执行的时候，必须hook一些函数来让它正常运行，为了尽可能简单的来模拟环境，你可能还需要去运行固件并dump内存上下文，这有时是困难的，起码我在刚开始研究afl-unicorn时候的初衷是因为我有一些东西不能直接跑起来。  
此外在trace
crash路径的时候，虽然我是逐指令hook的，但是事实上这样在遇到一些循环之类的时候会造成log爆炸的增长，我相信你不会想看到这种东西的。  
所以还需要根据实际情况去hook需要hook的代码。  
我已经很久没做任何逆向了，不过我有很多感兴趣的目标，我需要掌握的更多。
后续我可能还会再更新一篇关于afl-unicorn源码的笔记，不过可能会比较简单，因为我不是那种非常注意细节的人，我只关心我应该怎么改才能让我的工作跑起来。
这个系列不出意外我会长期更新，并会在适当的时候写一些我曾经使用过的，挖掘到了高质量浏览器漏洞的fuzz的内容，事实上都非常简单和有趣。
先知的代码缩进好像有点问题，不过所有使用到的代码都在[这里](https://github.com/eternalsakura/sakura_all_fuzz)可以找到
## Reference