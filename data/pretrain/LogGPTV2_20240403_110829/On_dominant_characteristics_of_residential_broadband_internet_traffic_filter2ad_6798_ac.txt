h
3
2
h
0
h
1
h
2
h
3
Figure 7: Relative application mix hour-by-hour. Same legend
as in Figure 6.
Protocol
HTTP
BitTorrent
eDonkey
SSL
NNTP
RTSP
VPD/VD
97.5%
4.8%
36.6%
75.2%
66.7%
92.6%
VPD/VP
98.1%
66.1%
55.9%
86.1%
95.3%
99.1%
Table 3: DPD vs. destination port. VD is the volume identiﬁed
by DPD for a given protocol P, VP is the volume observed on
the P’s default port(s), and VDP is the intersection of the two
(running on P’s default port and detected as P).
Non-P2P lines predominantly use HTTP, for which it contributes
72% of their trafﬁc volume, followed by NNTP with 6.5%, with
only 5.2% of the trafﬁc unclassiﬁed. Streaming services are also
more dominant in this group (6.7%).
4.3 Does port-based classiﬁcation work?
Very often in networking studies it is easier or more tenable to
acquire TCP/IP transport information rather than relying on deep
packet inspection systems. A signiﬁcant question concerning the
accuracy of such studies regards the degree to which one can
soundly infer application protocols based solely on the TCP/UDP
port numbers that connections use. Certainly, in adversarial set-
tings, classiﬁcation based on port numbers has quite limited power,
due to the ease by which end systems can vary the ports they use.
However, for non-adversarial situations, one might hope to lever-
age a predominant tendency for applications to indeed stick with
the port assigned for their use.
Our DPD-based analysis—which is highly accurate for those ap-
plications where we have a full protocol parser, and still potentially
quite accurate when we employ only a partial parser—presents an
opportunity to assess the accuracy of port-based classiﬁcation using
fairly solid ground truth.
Numerous previous studies have indicated that the advent of P2P
has rendered port-based approaches infeasible. Cho et al. [10]
found that on Japanese Internet backbone links, 79% of trafﬁc (by
bytes) uses unknown ports, and that TCP port 80 contributes only
14% of bytes. In 2004 Karagiannis et al. [26] found P2P trafﬁc
increasingly moving away from well-known ports to dynamically
negotiated ports. Kim et al. [23] found that port-based detection
quality is inversely proportional to the fraction of P2P trafﬁc.
We conﬁrm that for current residential trafﬁc a port-based ap-
proach works quite well. Table 3 shows how well a port-based ap-
proach would have performed for dominant application layer pro-
tocols. For each protocol P, column VPD/VD is the fraction of the
trafﬁc volume observed on P’s default port(s) that DPD identiﬁes
as P. Column VPD/VP shows the proportion of the trafﬁc on P’s
port that would be correctly identiﬁed by only inspecting the port
number.
We interpret the table as follows. Most of the HTTP trafﬁc
(97.5% of bytes) does indeed appear on port 80 (middle column),
and when looking at trafﬁc on port 80 we ﬁnd that 98.1% of those
bytes come from HTTP (righthand column). The largest non-HTTP
application on port 80 is SHOUTcast, a HTTP-like streaming pro-
tocol. We therefore conclude that for our trafﬁc, classifying port 80
trafﬁc as HTTP yields a good approximation for the total volume
of HTTP trafﬁc.
NNTP can only be partially identiﬁed by its default port (119).
About two-thirds of NNTP trafﬁc uses that port, and of the trafﬁc
appearing on that port, nearly all (95.3%) is indeed NNTP. From
DPD, we know that the remainder uses the well-known HTTP
proxy port, 3128. For SSL-based protocols (HTTPS, IMAPS,
POP3S, SSMTP, NNTPS) we ﬁnd roughly 75% using well-known
ports. More than 90% of RTSP bytes appear on its default
port (554).
The story is vastly different for P2P protocols, however. Since
many institutions try to block P2P trafﬁc with port-based ﬁlters,
most P2P protocols have evolved to use non-standard, dynamically
negotiated ports. Still, one third of the detected eDonkey trafﬁc
uses its well-known ports, and ﬁnding trafﬁc on either those ports
or on the BitTorrent ports generally means that the trafﬁc is indeed
caused by those protocols. (Interestingly, we ﬁnd that 3% of Bit-
Torrent trafﬁc appears on eDonkey ports.)
4.4 Trafﬁc symmetry
A common assumption regarding residential trafﬁc is that the
downstream dominates the upstream, i.e., most bytes are transfered
to the local side. Indeed, this assumption has shaped—and is in-
grained in—the bandwidth allocations of ADSL and cable broad-
band offerings. In addition, the prevalence of incoming connections
affects the feasibility of carrier-grade network-address-translation
(NAT).
In our datasets, we observe that most bytes appear in connections
originated locally, with only 10% due to connections originated re-
motely. The largest fraction of incoming trafﬁc is unclassiﬁed (33%
of bytes), signiﬁcantly higher than for outgoing connections, and
with P2P the most signiﬁcant contributor by volume (28% BitTor-
rent, 17% eDonkey). Voice-over-IP and streaming protocols also
contribute signiﬁcant volume to incoming connections (10%). In-
coming FTP data connections for active FTP sessions account for
just over 1% of bytes in incoming connections. Finally, we ﬁnd
that very few lines offer “classic” Internet services like SMTP or
HTTP, nor did they appear signiﬁcantly involved in DDoS or scan-
ning activity (according to Bro’s scan detector).
When looking at the number of bytes transfered upstream and
downstream, i.e., the symmetry of trafﬁc, we ﬁnd that 85% of all
bytes come downstream, i.e., the asymmetry assumption does hold
(though likely bandwidth asymmetry helped shape this). This pro-
portion is much higher than seen in the Japanese backbone stud-
ies [19, 9], which found only 55% of volume was downstream.
However, they found P2P dominated their trafﬁc mix, thus con-
tributing to symmetry. For our trafﬁc, we ﬁnd that for P2P ap-
95plications only 59% of bytes come downstream, yielding an up-
load/download “share-ratio” of 41/59 ≈ 0.7—still resulting in less
symmetry than seen in the Japanese studies.
5. HTTP USAGE
As HTTP dominates the trafﬁc in our datasets, we now examine
it more closely to characterize its usage. A basic question concerns
what has led to its resurgence in popularity versus P2P trafﬁc, with
two possible reasons being (i) HTTP offers popular high-volume
content, e.g., [8, 42], and/or (ii) HTTP serves as a transport protocol
for other application layer protocols, including possibly P2P [50,
3]. We ﬁnd that 25% of all HTTP bytes carry Flash Video, and
data exchanged via RAR archives contributes another 14%. Thus,
clearly much of HTTP’s predominance stems from its use in pro-
viding popular, high-volume content. We further ﬁnd that in terms
of volume, HTTP is not signiﬁcantly used for tunneling or P2P
downloads.
Many facets of HTTP usage have seen extensive study, as thor-
oughly surveyed by Krishnamurthy and Rexford [31]. Some stud-
ies have focused on understanding user behavior [4, 5, 11], while
others have examined changes in content [53] and the performance
of web caching [1, 5, 16]. Other work has looked at media server
workloads regarding ﬁle popularity and temporal properties, such
as in terms of live media streams collected from a large CDN [49],
and ﬁle reference characteristics and user behavior of a production
video-on-demand system in large-scale use [55].
More recently, various efforts have aimed at understanding from
passive measurements how the rapid advent of “Web 2.0” appli-
cations has changed HTTP trafﬁc patterns [44], as well as Web-
based applications such as YouTube [20, 57] and online social net-
works [21, 36]. Others have employed active probing to study spe-
ciﬁc features of such applications [8].
Sites like alexa.com employ user-installed toolbars to track the
popularity of various Web sites across demographic groups. They
ﬁnd that google.com, yahoo.com, youtube.com, and facebook.com
currently rank among the most popular sites in terms of number of
visits. In contrast, in this study we analyze popularity in terms of
trafﬁc volume.
5.1 Content Type Distribution
We use Bro’s HTTP analyzer to parse the anonymized HTTP
headers and compute the size of each HTTP request/response pair.
To identify the content types of objects, we both examine the HTTP
Content-Type header and analyze the initial part of the HTTP body
using libmagic. We ﬁnd more than 1,000 different content-types in
HTTP headers. Surprisingly, the results of these two approaches
often disagree: 43% of all HTTP bytes (28% of requests) exhibit
a mismatch. Some disagreements are minor and easy to resolve.
For example, in the absence of a standardized MIME type repre-
sentation we can ﬁnd several different strings used for the same
type. We also often see generic use of application/octet-stream as
Content-Type. In other cases, the sub-type differs: for example, the
Content-Type header may specify “image/gif,” while libmagic yields
“image/jpeg”.
When Content-Type and libmagic disagree, we try to identify the
most likely “true” content type by using heuristics. We start by nor-
malizing the content types and giving priority to libmagic for those
content types with well-known formats, e.g., most image and video
types. For other formats, we manually examine the mismatches and
pick the most likely resolution. We report mismatches we could not
resolve as “x/x” in our results, and generic or unidentiﬁed content
types, such as application/octet-stream, as “n/n”. All in all, our
image/* 11.5%
other 11.7%
video/* 7.6%
text/html 7.2%
n/n 12.7%
x/x 4.9%
text/javascript 2.4%
audio/* 2.2%
application/rar
14.7%
video/flv 25.2%
Figure 8: Top content-types for HTTP by bytes for trace SEP.
analysis illustrates the need for considerable caution when basing
an assessment of content types solely on the Content-Type header.
Figure 8 shows a pie chart of the distribution of bytes per con-
tent type from the SEP trace. The most common content-type by
volume is Flash Video (video/ﬂv)—the format used by sites such as
youtube.com and many news sites—which contributes 25% of the
bytes. This is followed by the archive format RAR (application/rar),
which accounts for 15% of HTTP trafﬁc.
The unknown or unidentiﬁable content-types together account
for 18% of the HTTP trafﬁc. We ﬁnd that a signiﬁcant portion
of this trafﬁc reﬂects automated software updates, as 14% of the
unidentiﬁable bytes come from a single software update site. Im-
age types (GIF, PNG, and JPEG) contribute 11.4% of bytes, while
video types other than Flash account for only 7.6%.
During the night we observe a higher fraction of RAR objects
and unknown objects, while the relative popularity of HTML and
image types decreases. This indicates that the former arise due to
bulk transfers rather than interactive browsing.
The general content-type distribution is essentially unchanged
when considering the APR trace. However, the fraction of non-
Flash Video (video/ﬂv) video content increases (to 9%), while au-
dio content decreases. Moreover, the fraction of unknown content
types from the automated software site falls to 7.5% in APR. We
also conﬁrmed that the presented results are not subject to day-of-
week effects by comparing them with results from WEEK trace.
Drawing upon recent data from a major US broadband provider,
Erman et al. [15] also report similar content type distributions.
They ﬁnd that video content corresponds to 32% of HTTP trafﬁc,
and compressed ﬁle downloads, e.g., RAR, for 16% of trafﬁc.
When separating lines with and without P2P protocol usage, we
ﬁnd that the content-type distribution for non-P2P lines closely
matches the overall one. However, lines that use P2P have a smaller
fraction of Flash Video (20%) and RAR archives (11%), and a
larger fraction of unidentiﬁed content-types (25%) We note that
28% of this unidentiﬁed trafﬁc is served from CDNs and 8% from
a Direct Download Provider.
5.2 Distribution Across Domains
Next we examine the distribution across domains, presenting the
results for the SEP trace in Table 4. We base our analysis on ex-
tracting the second-level domain from the HTTP Host header. We
ﬁnd that the byte distribution per domain fairly closely matches a
Zipf distribution, per Figure 9. The top 15 domains account for
43% of all HTTP bytes. Since Flash Video is the most voluminous
96Rank Domain
Software updates
1 Direct Download Provider
2 Video portal
3 Video portal
4 Video portal
5
6 CDN
7
8
9 Web portal
10 Video Portal
Search engine
Software company
Fraction of Trafﬁc
15.3%
6.1%
3.3%
3.2%
3.0%
2.1%
1.8%
1.7%
1.3%
1.2%
Rank User-agent
1
Firefox 3
2 MSIE 7
3 MSIE 6
4
Firefox 2
5 Unclassiﬁed
6
7 Network libraries
8 Opera
9
10 Download managers
Streaming clients
Safari
Fraction of Trafﬁc
24.6%
20.4%
13.6%
11.9%
5.5%
4.3%
4.0%
2.8%
2.5%
1.6%
Table 4: Top domains (anonymized) for trace SEP
Table 5: Top user-agents by volume
)
]
]
B
M
[
u
>
e
m
u
o
v
[
l
P
(
0
1
g
o
l
0
1
−
2
−
3
−
4
−
5
−
10
100
1000
10000
100000
u [MB]
Figure 9: CCDF of HTTP volume per domain, for domains
with >1 MB of total trafﬁc for trace SEP.
content-type, it is not surprising to ﬁnd sites offering videos among
the top domains, and indeed most of the trafﬁc to/from these video
portals has type video/ﬂv. A Direct Download (DDL) provider also
accounts for a signiﬁcant fraction of HTTP trafﬁc. These DDL
providers (also called “One-click providers”) host large ﬁles for
their customers. When a user uploads a ﬁle, they receive a (en-
coded) URL that provides subsequent access for downloading the
ﬁle. Users can then distribute the URLs to friends or share them
in online forums. About 16% of the HTTP trafﬁc involves Direct
Download providers, with one provider in particular heavily dom-
inating this trafﬁc (93% of DDL trafﬁc volume). Nighttime trafﬁc
exhibits a strong shift towards DDL sites; they account for 24% of
HTTP bytes during the 4 AM hour. DDL providers also originate
almost 90% of all application/rar bytes.
Similar results hold for the APR trace, with only some changes in
the lower ranks. Given the small difference in volume for these do-
mains, we attribute such changes to normal day-to-day differences
rather than long-term trends.
5.3 User-Agent Popularity
To assess the popularity of different types of web clients, we ex-
tract the User-Agent headers from the HTTP requests, group them
into broader categories, and then rank these categories by transfered
volume. We group user-agents that we cannot classify, and requests
lacking a User-Agent header, as “Unclassiﬁed”. Table 5 shows the
results. We can attribute more than 82% of HTTP trafﬁc to tradi-
tional Web browsers, with Firefox and Internet Explorer each hav-
ing a share of approximately 35% each, while Safari and Opera
only contribute 6% and 3% of HTTP trafﬁc. We also crosschecked