removes the task from the ready queue.
Task release mode: Blinder deﬁnes the task release mode
of partition Πi at time t, Mi(t): normal (Mnormal) or deferred
(Mdeffered) release modes. While a partition is in the normal
release mode, any newly-arriving task bypasses the arrival
queue and thus immediately becomes ready to execute. If the
partition is in the deferred release mode, the task is held in the
arrival queue until it is released by Blinder. Each partition is
initialized to the normal release mode. If a partition remains
in the normal release mode, its behavior is identical to what it
would be in a system without Blinder.
Entering into deferred release mode: A partition Πi enters
into the deferred release mode when a preemption on Πi by
another partition explicitly begins, as shown in Algorithm 5.
Πi is said to be implicitly preempted if it becomes active
(i.e., it has a non-zero remaining budget and tasks to run, as
deﬁned in Section 2.1) due to a new task arrival or a budget
replenishment, but it is not selected by the global scheduler.
Hence, the partition can also enter into the deferred release
mode by a task arrival (as shown in Algorithm 3) or a budget
replenishment. Note that a suspension due to budget depletion
does not change the task release mode.
5.2.2 Lag-based Task Release
As discussed in Section 5.1, task releases are deferred in or-
der to hide preemptions by other partitions from local tasks.
Hence, release times are affected by when and how long pre-
emptions occur. Let us consider Figure 12 again. Suppose that
Πi has not been preempted by any partition prior to t1. That is,
t1 is the time instant at which the local schedule of Πi starts
deviating from its canonical schedule shown in Figure 13.
From this moment, the progresses of the tasks in the actual
schedule (i.e., Figure 12) lag behind those in the canonical
schedule. Hence, when a new task arrives after t1, its release
should be deferred until the actual schedule has caught up to
Algorithm 5: SuspendPartition(Πi)
if Mi(t) == Mnormal and Preempted(Πi,t) == True then
EnterDeferredMode(Πi)
end
Algorithm 6: EnterDeferredMode(Πi)
Mi(t) ← Mdeffered
Usedi ← 0
tdef(Πi) ← t
Bdef(Πi) ← Bi(t)
/* Current time */
/* Remaining budget */
the progress that the partition would have made until the task
is released in the canonical counterpart.
Since the canonical schedule cannot be statically deter-
mined in advance, Blinder constructs an imaginary canonical
schedule on the ﬂy and updates it upon certain scheduling
events. For this, Blinder keeps track of the following per-
partition information to determine task release times:
Deﬁnition 5 (Available time). availablei(t) is the maxi-
mum amount of time that would have been available to the
tasks of Πi until time t since the latest time instant at which
Πi entered into the deferred release mode.
Deﬁnition 6 (Used time). usedi is the amount of time that
has actually been used by Πi since the latest time instant at
which Πi entered into the deferred release mode.
Note that usedi ≤ availablei(t) always hold as usedi
remains same as long as Πi is suspended due to a preemption.
usedi depends on the partition-level schedule and it can be
easily kept track of by counting the partition active times,
as done in Algorithm 2. For instance, in Figure 12, at time
t6, usedi = t6 − t3. On the other hand, the computation of
availablei(t) is not straightforward because it depends on
the budget constraints, as we will detail shortly. In the example
above, we simply assumed no limitation on partition budgets.
Hence, availablei(t) was always the relative offset of t
from the beginning of the current deferred release mode, e.g.,
availablei(t6) = t6 −t1.
Now, we deﬁne the lag as the difference between
availablei(t) and usedi:
Deﬁnition 7 (Lag). lagi(t) is the maximum amount of time
by which the current local schedule of Πi at time t lags behind
the canonical schedule. It is computed by
lagi(t) = availablei(t)− usedi.
A positive lagi(t), say l, when task τi, j arrives at time
t means that Πi would have executed up to the amount of
l until τi, j arrives if no preemptions on Πi have occurred.
Hence, the release of τi, j should be deferred until Πi will have
executed for l. This guarantees the tasks of Πi to make the
same amount of progresses that they would have made in the
canonical schedule until τi, j’s release. Therefore, when a new
task τi, j arrives (Algorithm 3), Blinder initializes the per-task
2424    30th USENIX Security Symposium
USENIX Association
Figure 15: Maximum available time for Πi from the beginning
of the deferred release mode until an arbitrary time t.
lag value, lagi, j. Then, it reduces the lag values of the tasks
in the arrival queue as long as the partition runs and releases
those tasks whose lag value become zero (Algorithm 2). Note
that lag is always zero in the normal release mode.
Budget constraint and available time: So far, it has been
assumed that partitions have unlimited budgets, and thus the
whole period of preemption on a partition was assumed to be
fully available to the partition if preemptions did not happen.
However, the budget constraint could have limited the avail-
able time to the partition. Suppose Πi enters into the deferred
release mode at time tdef. Then, the maximum amount of
time available to the partition from tdef to an arbitrary time
instant t in the canonical local schedule (i.e., when no pre-
emptions occur) is composed of the following terms (shown
in Figure 15):
• Remaining budget until the next replenishment or t:
a1 = min(cid:2)Bdef, (t − tdef) ,(cid:0)trep − tdef
(cid:1)(cid:3)
• Full-budget replenishments:
• Last replenishment:
a2 = (cid:98)(t − trep)/Ti(cid:99)Bi
a3 = min(cid:2)Bi,(cid:0)t − trep
(cid:1)−(cid:98)(t − trep)/Ti(cid:99)Ti
(cid:3)
Here, Bdef is the remaining budget at the time of entering
into the deferred release mode, and trep is when the next
replenishment is scheduled at, both of which are known at
tdef. Then, availablei(t) is computed as follows:
availablei(t) = a1 + a2 + a3,
where a2 = a3 = 0 if t  Pri(ΠL),
and Pri(τL,1) Pri(Πi)
(2)
i = Bi. If wn
where w0
i converges and is upper-bounded by the
replenishment period Ti, Πi is guaranteed to serve Bi to its
tasks over every period Ti, due to the critical instant theorem
[27]. As an example, Π4 in Table 1 in Section 6.2 takes up to
38 ms to execute for B4 = 10 ms. If we increase the budgets
for all partitions by 25%, Π4 becomes unschedulable.
Lemma 1. lagi ≤ Bi always holds if Πi is schedulable.
Proof. Suppose Πi is being replenished to its full budget Bi
at time t and all partitions that can preempt Πi are replenished
together and use up their budgets as frequently and maxi-
mally as possible. If there was no such preemption on Πi,
it could have served its tasks for up to Bi during [t,t + Ti).
Hence, availablei can reach up to Bi. On the other hand,
2426    30th USENIX Security Symposium
USENIX Association
𝝉𝒊,𝒋t$%&(()+used((𝒫*)+lag((𝑡,𝒫*)Π(-localPartition schedule = 𝒫*t$%&tt′PhysicalWorst-case Response Time of 𝜏!,#LastReplenishmentArrival of 𝜏!,#and higher-priority tasks in Π$All higher-priority partitions arrive at the same timeTime𝑡!Partition-levelPreemptionHigher-priorityPartitionsBudget depletedReplenishedPartition-levelPreemptionPartition-levelPreemption………Multiple Budget Replenishments…𝜏!,#𝑇!−𝐵!usedi remains 0 until Πi takes the CPU. Therefore, lagi can
reach up to Bi in the ﬁrst period. From then on, over each
replenishment period the partition is provided Bi of available
time that it can fully use during the period as it is schedulable.
Therefore, due to ∆lagi = ∆availablei−∆usedi = 0, lagi
cannot grow over Bi. In fact, lagi is always reduced to 0 by
the next-replenishment time.
Theorem 2. If partition Πi is schedulable, Blinder does not
increase the worst-case response times of its tasks.
Figure 19: Worst-case initial latency remains same.
Proof. This can be proved by showing that the worst-case
initial latency is same whether or not Blinder is used. Sup-
pose Πi is replenished to its full budget at time t, as shown in
Figure 19. The maximum lagi is achieved when Πi’s execu-
tion is delayed by higher-priority partitions at least until time
t + Bi, as shown in Case (a), at which lagi becomes Bi. Now,
due to Lemma 1, lagi returns to 0 by or earlier than the end of
the current period t + Ti. Hence, in the worst-case, a task τi, j
that arrives at time t +Bi can have the initial latency of Ti−Bi.
Without Blinder, the worst-case situation for τi, j occurs when
it arrives as soon as Πi’s budget is depleted, which can happen
as early as at time t +Bi. As shown in Case (b), the worst-case
initial latency is Ti − Bi. Therefore, τi, j can start its execution
at earliest at t + Ti. From then on, its execution is independent
from whether Blinder is used or not.
If Πi is not schedulable due to an ill-conﬁguration of par-
tition parameters, the lagi might not be bounded if, albeit
unlikely, Πi’s workload is inﬁnite, because ∆lagi over cer-
tain replenishment periods could be non-zero. In practice,
it is uncommon to assign parameters that make partitions
unschedulable. System integrator can use the exact analysis
presented in Eq. (2) for the test of partition schedulability.
Average-case response times: It is worth noting that, as will
be experimentally shown in Section 6.2, high-priority tasks
tend to experience longer average-case response times due to
the lag-based task release. However, because the use of lag
does not change both the demand from tasks and the supply
from partition, increases in the average-case response times
of high-priority tasks is compensated by decreases in low-