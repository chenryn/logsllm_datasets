getappendedtoit. Forthisreason,thestoredinthepagemayturnouttobe
smallerthantheonereturnedbythepg_current_wal_insert_lsnfunctionsometime
ago.Butifnothinghashappenedinthesystem,thesenumberswillbethesame.
Nowlet’scommitthetransaction:
=> COMMIT;
Thecommitoperationisalsologged,andtheinsertchangesagain:
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/3E7442D0
(1 row)
Acommit updates transaction status in  pages,which are kept in their own p.
cache.1 Thecacheusuallytakespagesinthesharedmemory.2 Tomake
sure that a  page is not flushed to disk before the corresponding  entry,
theofthelatestentryhastobetrackedforpagestoo. Butthisin-
formationisstoredin,notinthepageitself.
Atsomepointentrieswillmakeittodisk;thenitwillbepossibletoevict p.
anddatapagesfromthecache.Iftheyhadtobeevictedearlier,itwouldhavebeen
discovered,andentrieswouldhavebeenforcedtodiskfirst.3
Ifyouknowtwopositions,youcancalculatethesizeofentriesbetween
them(inbytes)bysimplysubtractingonepositionfromtheother. Youjusthave
tocastthemtothepg_lsntype:
=> SELECT '0/3E7442D0'::pg_lsn - '0/3E744260'::pg_lsn;
?column?
−−−−−−−−−−
112
(1 row)
1 backend/access/transam/slru.c
2 backend/access/transam/clog.c,CLOGShmemBuffersfunction
3 backend/storage/buffer/bufmgr.c,FlushBufferfunction
193
Chapter10 Write-AheadLog
Inthisparticularcase, entriesrelatedtoandoperationstook
aboutahundredofbytes.
Youcanusethesameapproachtoestimatethevolumeofentriesgenerated
byaparticularworkloadperunitoftime.Thisinformationwillberequiredforthe
checkpointsetup.
Physical Structure
Ondisk,theisstoredinthe/pg_waldirectoryasseparatefiles,orseg-
16MB ments.Theirsizeisshownbytheread-onlywal_segment_sizeparameter.
v. For high-load systems, it makes sense to increase the segment size since it may
reduce the overhead,but this setting can be modified only during cluster initial-
ization(initdb--wal-segsize).
W entries get into the current file until it runs out of space; then Postgre
startsanewfile.
Wecanlearninwhichfileaparticularentryislocated,andatwhatoffsetfromthe
startofthefile:
=> SELECT file_name, upper(to_hex(file_offset)) file_offset
FROM pg_walfile_name_offset('0/3E744260');
file_name | file_offset
−−−−−−−−−−−−−−−−−−−−−−−−−−+−−−−−−−−−−−−−
00000001000000000000003E | 744260
(1 row)
timeline logsequencenumber
The name of the file consists of two parts. The highest eight hexadecimal digits
define the timeline used for recovery from a backup,while the rest represent the
highestbits(thelowestbitsareshowninthefile_offsetfield).
v. Toviewthecurrentfiles,youcancallthefollowingfunction:
=> SELECT *
FROM pg_ls_waldir()
WHERE name = '00000001000000000000003E';
194
10.3 Checkpoint
name | size | modification
−−−−−−−−−−−−−−−−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−−−−
00000001000000000000003E | 16777216 | 2022−11−25 22:58:50+03
(1 row)
Now let’s take a look at the headers of the newly created  entries using the
pg_waldumputility,whichcanfilterentriesbothbytherange(likeinthis
example)andbyaparticulartransaction.
The pg_waldump utility should be started on behalf of the postgres  user,as it
needsaccesstofilesondisk.
postgres$ /usr/local/pgsql/bin/pg_waldump \
-p /usr/local/pgsql/data/pg_wal -s 0/3E744260 -e 0/3E7442D0#
rmgr: Heap len (rec/tot): 69/ 69, tx: 887, lsn:
0/3E744260, prev 0/3E744238, desc: HOT_UPDATE off 1 xmax 887 flags
0x40 ; new off 2 xmax 0, blkref #0: rel 1663/16391/16562 blk 0
rmgr: Transaction len (rec/tot): 34/ 34, tx: 887, lsn:
0/3E7442A8, prev 0/3E744260, desc: COMMIT 2022−11−25 22:58:50.041828
MSK
Herewecanseetheheadersoftwoentries.
Thefirstoneisthe_operationhandledbytheHeapresourcemanager. p.
Theblkreffieldshowsthefilenameandthepageoftheupdatedheappage:
=> SELECT pg_relation_filepath('wal');
pg_relation_filepath
−−−−−−−−−−−−−−−−−−−−−−
base/16391/16562
(1 row)
The second entry is the  operation supervised by theTransaction resource
manager.
10.3 Checkpoint
Torestoredataconsistencyafterafailure(thatis,toperformrecovery),Postgre
hastoreplaytheintheforwarddirectionandapplytheentriesthatrepresent
lostchangestothecorrespondingpages. Tofindoutwhathasbeenlost,the
195
Chapter10 Write-AheadLog
ofthepagestoredondiskiscomparedtotheoftheentry. Butatwhich
pointshouldwestarttherecovery? Ifwestarttoolate,thepageswrittentodisk
beforethispointwillfailtoreceiveallthechanges,whichwillleadtoirreversible
data corruption. Starting from the very beginning is unrealistic: it is impossible
tostoresuchapotentiallyhugevolumeofdata,andneitherisitpossibletoaccept
suchalongrecoverytime.Weneedacheckpointthatisgraduallymovingforward,
thusmakingitsafetostarttherecoveryfromthispointandremovealltheprevious
entries.
The most straightforward way to create a checkpoint is to periodically suspend
allsystemoperationsandforcealldirtypagestodisk. Thisapproachisofcourse
unacceptable,asthesystemwillhangforanindefinitebutquitesignificanttime.
For this reason,the checkpoint is spread out over time,virtually constituting an
interval.Checkpointexecutionisperformedbyaspecialbackgroundprocesscalled
checkpointer.1
Checkpointstart. The checkpointer process flushes to disk everything that can be
writteninstantaneously: transactionstatus,subtransactions’metadata,
andafewotherstructures.
Checkpointexecution. Mostofthecheckpointexecutiontimeisspentonflushing
dirtypagestodisk.2
First,aspecialtagissetintheheadersofallthebuffersthatweredirtyatthe
checkpointstart.Ithappensveryfastsinceno/operationsareinvolved.
Thencheckpointertraversesallthebuffersandwritesthetaggedonestodisk.
Theirpagesarenotevictedfromthecache: theyaresimplywrittendown,so
usageandpincountscanbeignored.
v.. Pages are processed in the order of their s to avoid random writing if pos-
sible. For better load balancing,Postgre alternates between different ta-
blespaces(astheymaybelocatedondifferentphysicaldevices).
1 backend/postmaster/checkpointer.c
backend/access/transam/xlog.c,CreateCheckPointfunction
2 backend/storage/buffer/bufmgr.c,BufferSyncfunction
196
10.3 Checkpoint
Backendscanalsowritetaggedbufferstodisk—iftheygettothemfirst.Inany
case,buffertagsareremovedatthisstage,soforthepurposeofthecheckpoint
eachbufferwillbewrittenonlyonce.
Naturally,pagescanstillbemodifiedinthebuffercachewhilethecheckpoint
is in progress. But since new dirty buffers are not tagged, checkpointer will
ignorethem.
Checkpointcompletion. When all the buffers that were dirty at the start of the
checkpoint are written to disk,the checkpoint is considered complete. From
now on (but not earlier!), the start of the checkpoint will be used as a new
starting point of recovery. All the  entries written before this point are
notrequiredanymore.
startof
recovery
requiredWALfiles
failure time
checkpoint
startof
recovery
requiredWALfiles
failure time
checkpoint checkpoint
Finally,checkpointercreatesaentrythatcorrespondstothecheckpoint
completion,specifyingthecheckpoint’sstart. Sincethecheckpointlogs
nothingwhenitstarts,thiscanbelongtoaentryofanytype.
The/global/pg_controlfilealsogetsupdatedtorefertothelatestcom-
pleted checkpoint. (Until this process is over, pg_control keeps the previous
checkpoint.)
197
Chapter10 Write-AheadLog
PGDATA/global/pg_control
Latestcheckpointlocation: 0/3EFC3190
Latestcheckpoint'sREDOlocation: 0/3EFC3158
checkpoint checkpoint
start finish
CHECKPOINT
To figure out once and for all what points where,let’s take a look at a simple ex-
ample.Wewillmakeseveralcachedpagesdirty:
=> UPDATE big SET s = 'FOO';
=> SELECT count(*) FROM pg_buffercache WHERE isdirty;
count
−−−−−−−
4119
(1 row)
Notethecurrentposition:
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/3EFC3158
(1 row)
Nowlet’scompletethecheckpointmanually.Allthedirtypageswillbeflushedto
disk;sincenothinghappensinthesystem,newdirtypageswillnotappear:
=> CHECKPOINT;
=> SELECT count(*) FROM pg_buffercache WHERE isdirty;
count
−−−−−−−
0
(1 row)
Let’sseehowthecheckpointisreflectedinthe:
198
10.4 Recovery
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/3EFC3208
(1 row)
postgres$ /usr/local/pgsql/bin/pg_waldump \
-p /usr/local/pgsql/data/pg_wal -s 0/3EFC3158 -e 0/3EFC3208
rmgr: Standby len (rec/tot): 50/ 50, tx: 0, lsn:
0/3EFC3158, prev 0/3EFC3130, desc: RUNNING_XACTS nextXid 889
latestCompletedXid 888 oldestRunningXid 889
rmgr: XLOG len (rec/tot): 114/ 114, tx: 0, lsn:
0/3EFC3190, prev 0/3EFC3158, desc: CHECKPOINT_ONLINE redo
0/3EFC3158; tli 1; prev tli 1; fpw true; xid 0:889; oid 24754; multi
1; offset 0; oldest xid 726 in DB 1; oldest multi 1 in DB 1;
oldest/newest commit timestamp xid: 0/0; oldest running xid 889;
online
Thelatestentryisrelatedtothecheckpointcompletion(_).
Thestartofthischeckpointisspecifiedafterthewordredo;thispositioncor-
respondstothelatestinsertedentryatthetimeofthecheckpointstart.
Thesameinformationcanalsobefoundinthepg_controlfile:
postgres$ /usr/local/pgsql/bin/pg_controldata \
-D /usr/local/pgsql/data | egrep 'Latest.*location'
Latest checkpoint location: 0/3EFC3190
Latest checkpoint's REDO location: 0/3EFC3158
10.4 Recovery
Thefirstprocesslaunchedattheserverstartispostmaster. Initsturn,postmaster
spawnsthestartupprocess,1 whichtakescareofdatarecoveryincaseofafailure.
Todeterminewhetherrecoveryisneeded,thestartupprocessreadsthepg_control
fileandcheckstheclusterstatus.Thepg_controldatautilityenablesustoviewthe
contentofthisfile:
1 backend/postmaster/startup.c
backend/access/transam/xlog.c,StartupXLOGfunction
199
Chapter10 Write-AheadLog
postgres$ /usr/local/pgsql/bin/pg_controldata \
-D /usr/local/pgsql/data | grep state
Database cluster state: in production
Aproperlystoppedserverhasthe“shutdown”status; the“inproduction”status
ofanon-runningserverindicatesafailure.Inthiscase,thestartupprocesswillau-
tomaticallyinitiaterecoveryfromthestartofthelatestcompletedcheckpoint
foundinthesamepg_controlfile.
Ifthedirectorycontainsabackup_labelfilerelatedtoabackup,thestartposi-
tionistakenfromthatfile.
Thestartupprocessreadsentriesonebyone,startingfromthedefinedposi-
tion,andappliesthemtodatapagesiftheofthepageissmallerthanthe
oftheentry. Ifthepagecontainsabigger,shouldnotbeapplied;in
fact,itmustnotbeappliedbecauseitsentriesaredesignedtobereplayedstrictly
sequentially.
However,someentriesconstituteafullpageimage,or.Entriesofthistype
canbeappliedtoanystateofthepagesinceallthepagecontentswillbeerased
anyway.Suchmodificationsarecalledidempotent.Anotherexampleofanidempo-
tentoperationisregisteringtransactionstatuschanges: eachtransactionstatusis
definedinbycertainbitsthataresetregardlessoftheirpreviousvalues,so
thereisnoneedtokeeptheofthelatestchangeinpages.
Wentriesareappliedtopagesinthebuffercache,justlikeregularpageupdates
duringnormaloperation.
Filesgetrestoredfrominasimilarmanner: forexample,ifaentryshows
thatthefilemustexit,butitismissingforsomereason,itwillbecreatedanew.
Oncetherecoveryisover,allunloggedrelationsareoverwrittenbythecorrespond-
p. inginitializationforks.
Finally,thecheckpointisexecutedtosecuretherecoveredstateondisk.
Thejobofthestartupprocessisnowcomplete.
Initsclassicform,therecoveryprocessconsistsoftwophases. Intheroll-forwardphase,
entriesarereplayed,repeatingthelostoperations. Intheroll-backphase,theserver
abortsthetransactionsthatwerenotyetcommittedatthetimeofthefailure.
200
10.4 Recovery
InPostgre,thesecondphaseisnotrequired. Aftertherecovery,thewillcontain
neither commit nor abort bits for an unfinished transaction (which technically denotes
an active transaction),but since it is known for sure that the transaction is not running
anymore,itwillbeconsideredaborted.1
Wecansimulateafailurebyforcingtheservertostopintheimmediatemode:
postgres$ pg_ctl stop -m immediate
Hereisthenewclusterstate:
postgres$ /usr/local/pgsql/bin/pg_controldata \
-D /usr/local/pgsql/data | grep 'state'
Database cluster state: in production
Whenwelaunchtheserver,thestartupprocessseesthatafailurehasoccurredand
enterstherecoverymode:
postgres$ pg_ctl start -l /home/postgres/logfile
postgres$ tail -n 6 /home/postgres/logfile
LOG: database system was interrupted; last known up at 2022−11−25
22:58:50 MSK
LOG: database system was not properly shut down; automatic recovery
in progress
LOG: redo starts at 0/3EFC3158
LOG: invalid record length at 0/3EFC3208: wanted 24, got 0
LOG: redo done at 0/3EFC3190 system usage: CPU: user: 0.00 s,
system: 0.00 s, elapsed: 0.00 s
LOG: database system is ready to accept connections
Iftheserverisbeingstoppednormally,postmasterdisconnectsallclientsandthen
executesthefinalcheckpointtoflushalldirtypagestodisk.
Notethecurrentposition:
=> SELECT pg_current_wal_insert_lsn();
pg_current_wal_insert_lsn
−−−−−−−−−−−−−−−−−−−−−−−−−−−
0/3EFC3280
(1 row)
1 backend/access/heap/heapam_visibility.c,HeapTupleSatisfiesMVCCfunction
201
Chapter10 Write-AheadLog
Nowlet’sstoptheserverproperly:
postgres$ pg_ctl stop
Hereisthenewclusterstate:
postgres$ /usr/local/pgsql/bin/pg_controldata \
-D /usr/local/pgsql/data | grep state
Database cluster state: shut down
Attheendofthe,wecanseethe_entry,whichdenotes
thefinalcheckpoint:
postgres$ /usr/local/pgsql/bin/pg_waldump \
-p /usr/local/pgsql/data/pg_wal -s 0/3EFC3280
rmgr: XLOG len (rec/tot): 114/ 114, tx: 0, lsn: