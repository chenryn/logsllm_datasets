### 索引接口的选择

- **RUM**
  - **多值类型**（数组、全文检索类型）：支持包含、相交和相似排序。
  - **普通类型**：与B-Tree索引类似。

- **BRIN**
  - **适用场景**：线性数据、时序数据或堆页间边界清晰的数据。
  - **普通类型**：与B-Tree索引类似。
  - **空间类型**：支持包含操作。

- **Bloom**
  - **多列**：支持任意列组合的等值查询。

- **表达式索引**
  - **适用场景**：当搜索条件为表达式时，例如 `where st_makepoint(x, y) op ?`。
  - **创建示例**：
    ```sql
    CREATE INDEX idx ON tbl USING gist ( (st_makepoint(x, y)) );
    ```

- **条件索引（定向索引）**
  - **适用场景**：在搜索时强制过滤某些条件，例如 `where status='active' and col=?`。
  - **创建示例**：
    ```sql
    CREATE INDEX idx ON tbl (col) WHERE status = 'active';
    ```
  - **应用场景**：假设激活用户占比70%，则只针对这些数据进行索引。例如，在监控系统中，`select x from tbl where temp > 60;` 可能只有1%的数据是异常数据。

### 思考与问题

- **多列复合索引如何设计字段顺序？**
  - 参考文档：[多列复合索引字段顺序原则](https://github.com/digoal/blog/blob/master/201803/20180314_02.md)
- **非驱动列查询如何使用索引扫描？**
  - 参考文档：[非驱动列查询的优化](https://github.com/digoal/blog/blob/master/201803/20180323_03.md)

### 数据库优化

- **擒贼先擒王（TOP SQL）**
- **SQL执行计划分析与优化**
- **数据库内核代码层瓶颈分析**
- **慢SQL定位与优化**
- **数据库活动信息跟踪参数**
- **锁等待问题定位**
- **等待事件透视**
- **全面健康报告**
- **9种索引接口的适应场景与选择**
- **复合索引顺序**
- **非驱动列扫描优化**
- **优化器开关介绍（因子、开关）**
  - 参考文档：[优化器开关与成本计算系数因子](https://www.postgresql.org/docs/devel/static/runtime-config-query.html)
  - 校准因子：[校准因子](https://github.com/digoal/blog/blob/master/201311/20131126_03.md)
- **HINT的使用**
  - HINT介绍：[HINT介绍](https://github.com/digoal/blog/blob/master/201607/20160723_02.md)
  - 阿里云 pg_hint_plan插件使用：[pg_hint_plan插件使用](https://github.com/digoal/blog/blob/master/201604/20160401_01.md)
- **函数与存储过程调用优化**
  - plpgsql性能诊断与优化
    - auto_explain插件：[plpgsql函数中每一个调用的详细执行计划](https://github.com/digoal/blog/blob/master/201611/20161121_02.md)
  - plpgsql调试
    - [pldebugger extension + pgadmin](https://github.com/digoal/blog/blob/master/201704/20170424_02.md)
    - raise notice
    - print stack
      - GET STACKED DIAGNOSTICS variable { = | := } item [ , ... ];
      - GET [ CURRENT ] DIAGNOSTICS variable { = | := } item [ , ... ];

- **判断有无满足条件记录**
  - 使用 `PERFORM` 语句：
    ```sql
    PERFORM 1 FROM tbl WHERE ... LIMIT 1;
    IF FOUND THEN
      ...
    ELSE
      ...
    END IF;
    ```
  - 不建议使用 `SELECT COUNT(*) INTO var FROM tbl WHERE ...;`

### 连接池优化

- **pgbouncer**
  - 参考文档：[pgbouncer](https://github.com/digoal/blog/blob/master/201005/20100511_03.md)
- **内置连接池**
  - 参考文档：[内置连接池](https://github.com/digoal/blog/blob/master/201805/20180521_03.md)
- **Greenplum连接池实践**
  - 参考文档：[Greenplum连接池实践](https://github.com/digoal/blog/blob/master/201801/20180128_04.md)
- **阿里云高并发版本**
  - 参考文档：[阿里云高并发版本](https://github.com/digoal/blog/blob/master/201805/20180505_07.md)

### 数据倾斜监测与优化

- 参考文档：
  - [HDB PG SQL数据倾斜监测与优化](https://github.com/digoal/blog/blob/master/201708/20170821_02.md)
  - [数据倾斜监测与优化](https://github.com/digoal/blog/blob/master/201711/20171123_01.md)
  - [数据倾斜监测与优化](https://github.com/digoal/blog/blob/master/201607/20160719_02.md)

### 文件结构

- **WAL (xlog)**
  - 参考文档：[WAL文件结构](https://github.com/digoal/blog/blob/master/201302/20130223_01.md)
- **CLOG (xact)**
  - 结构：
    - 每个事务对应2个BIT位
    - 定义：
      - TRANSACTION_STATUS_IN_PROGRESS: 0x00
      - TRANSACTION_STATUS_COMMITTED: 0x01
      - TRANSACTION_STATUS_ABORTED: 0x02
      - TRANSACTION_STATUS_SUB_COMMITTED: 0x03
  - 用途：
    - 识别事务状态
    - tuple header - hint bit（查询时可能被设置），避免访问clog bits
  - 参考文档：[CLOG文件结构](https://github.com/digoal/blog/blob/master/201509/20150905_01.md)

### MVCC

- **多版本**
  - tuple header (xid, 事务状态)
- **事务快照**
  - 当前未提交事务，已分配最大事务
- **可见性判断**
  - 判断要素：事务隔离级别、事务快照、TUPLE header、hint bit、clog

### 锁

- **原理**
- **HOT（Heap Only Tuples）**
- **事务隔离**
- **垃圾回收**
  - 计数器：track_counts = on
  - 扫描间隔：autovacuum_naptime = 1min
  - autovacuum worker process数：autovacuum_max_workers = 3
  - 垃圾回收worker process休息间隔：autovacuum_vacuum_cost_delay = 0ms
  - 扫描哪些PAGE？
    - Flags for bit map:
      - VISIBILITYMAP_ALL_VISIBLE: 0x01
      - VISIBILITYMAP_ALL_FROZEN: 0x02
      - VISIBILITYMAP_VALID_BITS: 0x03
  - 可回收哪些垃圾？
    - 比GetOldestXmin更老的垃圾
- **事务号冻结**
  - 当前已分配最大事务号
  - 可分配事务号区间
  - 最老事务号
  - UINT32 freeze xactid 循环使用

### 存储引擎

- **zheap**
  - 引擎扩展接口：[zheap引擎扩展接口](https://commitfest.postgresql.org/17/1283/)
  - datafile：inplace update，即刻回收
  - undo file：旧版本

### 压缩接口

- **内置压缩**
  - pg_lzcompress：src/common/pg_lzcompress.c
- **lz4**
  - 参考文档：[lz4压缩](https://github.com/digoal/blog/blob/master/201803/20180315_02.md)
- **zstd**
  - 参考文档：[zstd压缩](https://github.com/digoal/blog/blob/master/201803/20180315_01.md)

### 接口介绍

- **FDW (Foreign Data Wrapper)**
  - 参考文档：[FDW接口介绍](https://wiki.postgresql.org/wiki/Fdw)

### 数据库逻辑结构

- **数据库权限体系**
- **数据库认证管理**
  - 认证方法：password, ldap, ...
  - ACL
  - 认证配置：pg_hba.conf

### 数据库可靠性介绍

- **时间点恢复**
- **主备切换，激活，时间线**
  - 支持跨时间线恢复
- **异步流复制**
- **同步流复制**
- **多副本介绍**
  - 参数配置：
    - synchronous_commit
    - synchronous_standby_names
  - 多副本丢失、无脑裂切换流程
    - 参考文档：[多副本介绍](https://github.com/digoal/blog/blob/master/201803/20180326_01.md)
- **TPC-B性能**
- **HA架构**
  - 主库心跳异常处理流程
  - 控制N（同步备库数 - 同步副本数 + 1）个或以上备库、冻结接收新的REDO
  - 选出接收到最多REDO的备库
  - 修改其他备库配置，使用该备库为新主库
  - 激活该备库
  - 漂移VIP、修改DNS或中间件
  - 原主库恢复后，修改配置，切换为备库
- **逻辑订阅流程**
  - 初始化全量复制
  - 从offset开始解析，复制增量
  - 参考文档：[PG逻辑订阅原理](https://github.com/digoal/blog/blob/master/201506/20150616_02.md)