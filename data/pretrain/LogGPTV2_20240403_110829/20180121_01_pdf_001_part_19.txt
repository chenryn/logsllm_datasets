– 范围类型：与GiST类似
索引接口的选择
• RUM
– 多值类型(数组、全文检索类型)：包含、相交、相似排序
– 普通类型：与B-Tree类似
• BRIN
– 适合 线性数据、时序数据、（HEAP PAGE之间边界清晰的数据）。
– 普通类型：与B-Tree类似
– 空间类型：包含
• Bloom
– 多列：任意列组合，等值查询
• 表达式索引
– 搜索条件为表达式时。
– where st_makepoint(x,y) op ?
– create index idx on tbl USING gist ( (st_makepoint(x,y)) );
• 条件索引(定向索引)
– 搜索时，强制过滤某些条件时。
– where status='active' and col=? 。
– create index idx on tbl (col) where status='active'; --激活用户占比70%，只针对这些数据进行索引
– 监控系统例子 select x from tbl where temp>60; --99, 1% 异常数据
思考、问题
• 多列复合索引如何设计字段顺序
• 非驱动列查询，如何使用索引扫描
多列复合索引字段顺序原则
• https://github.com/digoal/blog/blob/master/201803/20180314_02.md
非驱动列查询的优化
• https://github.com/digoal/blog/blob/master/201803/20180323_03.md
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
优化器开关介绍（因子、开关）
• 优化器开关、成本计算系数因子
– https://www.postgresql.org/docs/devel/static/run
time-config-query.html
• 校准因子
– https://github.com/digoal/blog/blob/master/201
311/20131126_03.md
SQL HINT
• HINT介绍
– https://github.com/digoal/blog/blob/master/201
607/20160723_02.md
• 阿里云 pg_hint_plan插件使用
– https://github.com/digoal/blog/blob/master/201
604/20160401_01.md
sr_plan
• profile
• https://github.com/digoal/blog/blob/master/
201702/20170228_01.md
• 框架开发，无法修改 SQL，无法加 HINT。
– 内核层优化器修改
– PROFILE
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
• 函数、存储过程调用优化
函数 存储过程 性能诊断、优
plpgsql ( )
化
• auto_explain插件
• plpgsql函数中每一个调用的详细执行计划
– https://github.com/digoal/blog/blob/master/201
611/20161121_02.md
函数
plpgsql debug
• https://www.postgresql.org/docs/devel/static/plpgsql-control-structures.html
• https://www.postgresql.org/docs/devel/static/plpgsql-statements.html#PLPGSQL-
STATEMENTS-DIAGNOSTICS
• https://www.postgresql.org/docs/devel/static/plpgsql-errors-and-messages.html
• pldebugger extension + pgadmin
– https://github.com/digoal/blog/blob/master/201704/20170424_02.md
• raise notice
• print stack
– GET STACKED DIAGNOSTICS variable { = | := } item [ , ... ];
– GET [ CURRENT ] DIAGNOSTICS variable { = | := } item [ , ... ];
函数
plpgsql debug
• pldebugger extension + pgadmin
• raise notice
• print stack
– GET STACKED
判断有无满足条件记录
plpgsql
• perform 1 from tbl where .... limit 1;
• if FOUND then
• ...
• else
• ...
• end if;
• DON'T use
– select count(*) into var from tbl where ....;
– if var >= 1 then
– else
– end if;
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
• 函数、存储过程调用优化
• 连接池
连接池的优化
连接池的优化
连接池的优化
• pgbouncer
– https://github.com/digoal/blog/blob/master/201005/20100511_03.md
• 内置连接池
– https://github.com/digoal/blog/blob/master/201805/20180521_03.md
• Greenplum 连接池实践
– https://github.com/digoal/blog/blob/master/201801/20180128_04.md
• 阿里云高并发版本
– https://github.com/digoal/blog/blob/master/201805/20180505_07.md
数据倾斜、 倾斜
HDB PG SQL
监测、优化
• https://github.com/digoal/blog/blob/master/
201708/20170821_02.md
• https://github.com/digoal/blog/blob/master/
201711/20171123_01.md
• https://github.com/digoal/blog/blob/master/
201607/20160719_02.md
思考、问题
• Oracle PL/SQL函数如何调试
• 如何诊断函数内部执行 SQL的性能
函数性能诊断
plpgsql
• auto_explain
• plpgsql函数中每一个调用的详细执行计划
• https://github.com/digoal/blog/blob/master/
201611/20161121_02.md
文件结构
WAL(xlog)
• https://github.com/digoal/blog/blob/master/
201302/20130223_01.md
文件结构
CLOG(xact)
• 结构
– 每个事务对应2个BIT位
– #define TRANSACTION_STATUS_IN_PROGRESS 0x00
– #define TRANSACTION_STATUS_COMMITTED 0x01
– #define TRANSACTION_STATUS_ABORTED 0x02
– #define TRANSACTION_STATUS_SUB_COMMITTED 0x03
• 用途
– 识别事务状态
– tuple header - hint bit(查询是可能被设置) ，避免访问clog bits
• https://github.com/digoal/blog/blob/master/201509/20150905_01.m
d
MVCC
• 多版本
– tuple header(xid, 事务状态)
• 事务快照
– 当前未提交事务，已分配最大事务
• 可见性判断
– 判断要素
– 事务隔离级别，事务快照，TUPLE header, hint bit,
clog
锁
锁
原理
HOT
原理
HOT
事务隔离
垃圾回收
• 计数器
– track_counts = on
• 扫描间隔
– autovacuum_naptime = 1min
• autovacuum worker process数
– autovacuum_max_workers = 3
• 垃圾回收worker process休息间隔
– autovacuum_vacuum_cost_delay = 0ms
– #autovacuum_vacuum_cost_limit = -1
• 扫描哪些PAGE?
– /* Flags for bit map */
– #define VISIBILITYMAP_ALL_VISIBLE 0x01
– #define VISIBILITYMAP_ALL_FROZEN 0x02
– #define VISIBILITYMAP_VALID_BITS 0x03 /* OR of all valid visibilitymap
– * flags bits */
• 可回收哪些垃圾?
– 比GetOldestXmin更老的垃圾
事务号冻结
当前已分配
最大事务号 当前已分配
最大事务号
可分配事务
最老事 号区间
务号 可分配事务
号区间
最老事
务号
UINT32
freeze
xactid
循环使用
存储引擎
zheap
• 引擎扩展接口
– https://commitfest.postgresql.org/17/1283/
• datafile
– inplace update
– 即刻回收
• undo file
– 旧版本
压缩接口
• https://commitfest.postgresql.org/17/1294/
• 内置 pg_lzcompress
– src/common/pg_lzcompress.c
• lz4
– https://github.com/digoal/blog/blob/master/201803/2018
0315_02.md
• zstd
– https://github.com/digoal/blog/blob/master/201803/2018
0315_01.md
接口介绍
FDW
https://wiki.postgresql.org/wiki/Fdw
数据库逻辑结构
数据库权限体系
数据库认证管理
• 有哪些认证方法
– password, ldap, ......
– https://www.postgresql.org/docs/10/static/client-
authentication.html
• ACL
• 认证配置
– pg_hba.conf
数据库认证管理
数据库可靠性介绍
时间点恢复介绍
主备切换，激活，时间线
支持跨时间线恢复
异步流复制
同步流复制
DATA
多副本介绍
FILE
• #synchronous_commit = on applyer
– # synchronization level;
– # off, local, remote_write, remote_apply, or on
– 介绍每个参数的区别 remote
receiver1
WAL
• #synchronous_standby_names = ''
– # standby servers that provide sync rep
Client
– # method to choose sync standbys, number of sync standbys,
DATA
– # and comma-separated list of application_name
FILE
– # from standby(s); '*' = all
when
– [FIRST] num_sync ( standby_name [, ...] )
– ANY num_sync ( standby_name [, ...] )
backend
– standby_name [, ...] applyer
proc
sender1
local
wal wal remote
buffer writer WAL receiver2
WAL
sender2
多副本介绍
• https://github.com/digoal/blog/blob/master/201803/20180326_01.md
TPC-B
性能
多副本 丢失、无脑裂 切换流程
0 HA
• https://github.com/digoal/blog/blob/master/201803/20180326_01.md
• 1、主库心跳异常
• 2、控制N（同步备库数 - 同步副本数 + 1）个或以上备库、冻结接收
新的REDO
• 3、选出接收到最多REDO的备库
• 4、修改其他备库配置，使用该备库为新主库
• 5、激活该备库
• 6、漂移VIP、或修改DNS、或修改中间件（视现场HA架构而定）
• 7、原主库恢复后，修改配置，切换为备库，使用该备库为新主库
逻辑订阅流程
snapshot, wal offset(rec)
源表 目标表
初始化全量复制
从offset开始解析，复制增量
WAL
https://github.com/digoal/blog/blob/master/201506/20150616_02.md
(原理：PG逻辑订阅已封装)
逻辑订阅 增量复制
( )
(发布some tables) 订阅端 1