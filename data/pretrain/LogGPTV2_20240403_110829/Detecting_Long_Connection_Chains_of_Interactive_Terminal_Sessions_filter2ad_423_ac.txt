quan(E, 2α)
0.40
0.36
0.28
0.39
0.42
0.44
0.21
0.68
0.57
0.45
0.70
0.62
0.92
0.99
connection chain
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs→e7→xb→df→bs→e8
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs→e7→xb→df→bs
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs→e7→xb→df
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs→e7→xb
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs→e7
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs
ST→e2→zi→e3→cp→e4→ls→sp→e6
ST→e2→zi→e3→cp→e4→ls→sp
ST→e2→zi→e3→cp→e4→ls
ST→e2→zi→e3→cp→e4
ST→e2→zi→e3→cp
ST→e2→zi→e3
ST→e2→zi
ST→e2
Quantile versus Chain Length
e
l
i
t
n
a
u
q
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1
2
3
4
5
6
7
8
chain length
9
10
11
12
13
14
Fig. 4. Plot of quan(E, 2α) versus chain length.
Detecting Long Connection Chains of Interactive Terminal Sessions
13
ROC curves
d
e
t
c
e
t
e
d
i
s
n
a
h
c
g
n
o
l
f
o
n
o
i
t
c
a
r
f
:
r
e
w
o
p
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0
0.1
0.2
0.3
0.7
error:  fraction of short chains detected
0.4
0.5
0.6
2 hops allowed
5 hops allowed
9 hops allowed
0.8
0.9
1
Fig. 5. ROC curves for rejection region S(c).
for more than two hops downstream. As a test for more than ﬁve hops down-
stream or as a test for more than nine hops downstream, the performance of the
simple rejection region based on quan(E, 2α) alone deteriorates.
When there are many hops downstream, the variability introduced by the
machines downstream adds considerable complication. As expected, tolerance for
a big number of downstream hops is more diﬃcult to implement than tolerance
for a small of downstream hops. In practice, the low tolerance policy that rejects
sessions with more than two hops downstream is more useful and realistic.
6 Discussion
The rejection region in Equation 6 classiﬁes an outgoing connection as having
too many hops downstream if the outgoing connection has a packet sequence X
whose 2α(X) value is too small compared to the gaps in set E(X). To test for
an outgoing connection with more than two hops, experiments indicate that the
using cut-oﬀ parameter c = 0.9 would give reasonably accurate results without
high false alarms.
The experiments used a machine on the Stanford University network as the
logging machine. Although a wide range of experiments under diﬀerent settings
showed that the cut-oﬀ parameter c = 0.9 performed well, machine and network
properties can vary considerably. For best results, each deployment can train
on its own machines and networks to determine the optimal cut-oﬀ to meet
prescribed requirements for accuracy and precision.
14
K.H. Yung
6.1 Accuracy and Precision
Most intrusion-detection techniques suﬀer from too many false positives [4]. Be-
cause there is a wide range of network attacks, general intrusion-detection sys-
tems are diﬃcult to design. By narrowing the scope of detection to special types
of attacks, the number of false attacks can be lowered considerably, [2] for ex-
ample.
The problem of connection chains is well-deﬁned and narrow enough to be
considered as a speciﬁc attack. Yet, earlier techniques [8,10] for detecting step-
ping stones identify many harmless, short chains common in practice. Echo-delay
comparison proposed here speciﬁcally addresses these logical false positives and
detects only connection chains with many hops downstream.
On the other hand, echo-delay comparison does not detect the number of
upstream hops in connection chain. From the viewpoint of the recording machine,
only the nearest upstream client is known. If the recording machine is a stepping
stone in a long connection chain but is only one single hop away from the ﬁnal
victim, then the session will not trigger any warning because there are not many
hops downstream. This logical false negative will be addressed in future work.
Because delayed acknowledgments are sent in both directions, an extension of
the current work may prove useful in detecting many hops upstream.
6.2 Hacker Intervention
In the ever-raging battle between hackers and intrusion-detection systems, intel-
ligent hackers always search for new ways to elude detection. Echo-delay com-
parison and previous approaches [8,10] are all susceptible to hacker intervention.
In fact, in a theoretical sense [6], any intrusion detector relying solely on network
logs can be circumvented by carefully manipulating network signals.
The time gap between the client request and the delayed acknowledgment
of the nearest server provides an overestimate of the travel time for one hop
downstream. Since not all downstream hops are equally noisy, two problems
may arise. A fast connection between the client and the nearest server may
over-amplify the slow hops downstream. This conﬁguration does not beneﬁt the
hacker trying to avoid detection though.
Likewise, a slow connection between the client and the nearest server may
mask the fast hops downstream. If the detector is used at its optimal settings, to
detect more than two hops downstream, then there is minimal leeway for hiding
many hops behind the slow ﬁrst connection. Hiding many quick connections on
machines within close proximity would defeat the purpose of using a connection
chain.
A knowledgeable hacker can manipulate the network signals. To elude detec-
tion, the hacker may delay and suppress the delayed-acknowledgment signal and
the reply-echo signal. Because the analysis in this paper uses aggregate statistics,
targeting a few signals will not thwart the detector. Manipulating many signals
simultaneously without adversely aﬀecting the dynamics of the connection chain
would be diﬃcult even for the skilled hacker.
Detecting Long Connection Chains of Interactive Terminal Sessions
15
7 Summary
Echo-delay comparison monitors an outgoing connection to estimate two impor-
tant time gaps. First, the gap between the client request and the server delayed
acknowledgment estimates the round-trip travel time between the client and the
server. Second, the gap between the client request and the server reply echo
estimates the how far downstream the ﬁnal victim is away. Together these two
time gaps provide a simple test to identify a session whose ﬁnal victim is many
hops downstream.
Unlike previous approaches for detecting stepping stones, echo-delay compar-
ison works in isolation, without matching for similar sessions on the same con-
nection chain. Moreover, this new strategy will allow benign, short connection
chains common in practice. Echo-delay comparison makes use network signals
found in interactive terminal sessions, such as telnet, rlogin, and secure shell.
Experiments demonstrate that the technique is eﬀective under a wide range of
conditions and performs especially well in identifying sessions with more than
two hops downstream.
Acknowledgments. This research project was funded in part by the US De-
partment of Justice grant 2000-DT-CX-K001. Jeﬀrey D. Ullman of the Stanford
University Computer Science Department introduced the author to the ﬁeld
of intrusion detection and oﬀered invaluable advice throughout the past year.
Jerome H. Friedman of the Stanford University Statistics Department provided
important feedback in several discussions. The author is grateful for their help
and extends his delayed acknowledgment, long overdue.
References
1. Stefan Axelsson. “Intrusion Detection Systems: A Survey and Taxonomy.” Tech-
nical Report 99-15, Department of Computer Engineering, Chalmers University,
March 2000.
2. Robert K. Cunningham, et al. “Detecting and Deploying Novel Computer Attacks
with Macroscope.” Proceeding of the 2000 IEEE Workshop on Information Assur-
ance and Security. US Military Academy, West Point, NY, 6–7 June, 2001.
3. Harold S. Javitz and Alfonso Valdes. “The NIDES Statistical Component: De-
scription and Justiﬁcation.” Technical report, Computer Science Laboratory, SRI
International. Menlo Park, California, March 1993.
4. Richard P. Lippmann, et al. “Evaluating Intrusion Detection Systems: The 1998
ARPA Oﬀ-Line Intrusion Detection Evaluation.” Proceedings of DARPA Infor-
mation Survivability Conference and Exposition. DISCEX ’00, Jan 25–27, Hilton
Head, SC, 2000. http://www.ll.mit.edu/IST/ideval/index.html
5. Peter G. Neumann and Phillip A. Porras. “Experience with EMERALD to Date.”
1st USENIX Workshop on Intrusion Detection and Network Monitoring, pages
73-80. Santa Clara, California, USA, April 1999.
6. Thomas H. Ptacek and Timothy H. Newsham. “Insertion, Evasion, and Denial
of Service: Eluding Network Intrusion Detection.” Secure Networks, Inc., January
1998. http://www.aciri.org/vern/PtacekNewsham-Evasion-98.ps
16
K.H. Yung
7. Martin Roesch. “Snort: Lightweight intrusion detection for networks.” 13th Sys-
tems Administration Conference (LISA’99), pages 229–238. USENIX Associations,
1999.
8. Stuart Staniford-Chen and L. Todd Heberlein. “Holding Intruders Accountable on
the Internet.” Proceedings of the 1995 IEEE Symposium on Security and Privacy,
pages 39–49. Oakland, CA, May 1995.
9. W. Richard Stevens. TCP/IP Illustrated Volume 1: The Protocols. Addison-Wesley:
Reading, Massachusetts, 1994.
10. Yin Zhang and Vern Paxson. “Detecting stepping stones.” Proceedings of 9th
USENIX Security Symposium. August 2000.