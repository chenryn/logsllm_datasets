    Connection: close
最终在 .bash_history 中看到管理员指向性操作。
然后读取 /home/www-root/.ssh/id_rsa 复制到本地
登录clone该项目，拿到flag
随后官方又更新了两个patch修复该漏洞
期待大佬们的其他思路，这题很精彩。
**Web五（CloverSec Logos）**
Web500考察的点注入、文件包好和PHP反序列化漏洞。
Fuzz测试发现过滤or、and、/、–、#、空格、转移符
构造注入的PayLoad如下：
20位的密码应该比较熟悉dedecms的加密方法，去前3后1得到解密admin^g
Token需要被序列化，另外题目提示vim编辑会得到swp文件
可以看到需要够着几个参数secret和token的信息
反序列化后需要绕过对象过滤
修改如下
读取源码
读取inlcude.php泄露的看出flag在ssctf_flag文件
看到并没有读取到flag
使用php伪协议试试
**逆向**
**逆向一（加密勒索软件）**
1.打开app,界面提示需要设置密码，注意这里只允许输入数字，设置密码后提示文件已加密，按钮文字变成“解密”。点击解密提示“刷脸试试”，
没有提示成功，接下来逆向分析代码逻辑。
2.使用jadx打开后，按钮点击函数代码如下：
这段代码先从SharedPreferences中读取“ctf1”配置,如果是0表示没有加密，否则表示已加密。如果没加密，进入“if
(!isEncrypted)
”流程，把输入内容保存到key，要求key是6位长度。然后调用check函数参数就是输入内容，接着提示“文档已加密,请联系xxx解密.”并设置“ctf1”配置为1保存到SharedPreferences；如果已加密，进入“else
if (Main.this.check2(Main.this.flagView.getText().toString()))
”流程，调用check2函数，参数是输入内容。猜测check函数就是加密文档的函数，check2应该就是解密函数了。
3.先大概看一下check函数和check2函数，发现check函数有调用encode函数，该函数内有文件读写操作，那就可以确认，check函数是用来加密文档的；但check2函数调用却没有文件读写操作，这也就说明了check2函数就没有解密文档，按题目提示“这个app类似于一个无良勒索软件”，根据代码分析，这个勒索软件根本没有提供解密功能，需要分析加密算法，对文档进行解密。
4.分析check函数加密算法，对文件进行操作是在encode函数，
可以直接看encode代码，发现关键代码就是每隔0x100进行一个异或：
k1数组是之前运算结果，因为有对k1下标进行取余操作，所以是没法逆回来的，而且会有多解可能。由于是异或，输入密码只有6位数字，可以爆破。
5.直接爆破对ctf1_encode.xlsx进行再次异或即可，但生成文件太多验证起来很麻烦。这里有个技巧，先创建几个xlsx文件，输入内容后保存，再使用010editor打开16进制查看，发现中间会有大段0字节：
然后再看ctf1_encode.xlsx，可以发现大段0字节中间有个别是有内容的和异或位置对应:
0x100=0x57,0x200=0x28,0x400=0x75,0x500=0x67,结合0x00字节异或结果，可以编写爆破算法根据这些位置字符判断，能极大减少生成的xlsx文件样本。
6.完整代码如下：
运行后得到多个key和xslx文件，打开文件即可看到flag：SSCTF{G0odJo13!}
**逆向二（Login）**
1\. 打开app只有输入框和按钮，直接使用jadx反编译分析，发现有代码混淆而且有乱码，打开jadx的反混淆功能再看按钮点击代码：
可以发现输入长度必须是12位。关键代码在红框所示2行。如果C0233a.m17a返回true，则调用f15.m16，在m16函数中调用了Toast，这里很可能就是显示flag了。
传入的第一个参数是输入的内容，第二个参数是一个字符串常量。继续分析C0233a.m26，发现又调用了m28,而这个函数是用的AES算法，秘钥是输入内容的utf-8的bytes数组。
经过上面分析，必须让C0233a.m17a返回true，然后就能弹出Toast得到flag了。查看C0233a.m17a函数:
只有C0233a.m19b可能返回true。m19b是一个md5算法，根据在线md5破解查到"cfcd208495d565ef66e7dff9f98764da"是0，而这里i只有相加操作，m21函数最后调用的是AES加密，然后反推charAt必须等于0，再看传入的2个参数，经过的运算是一样的，所以参数str必须和str2相同，所以，m17a就是判断两个字符串是否相同。
**再返回onClick函数分析**
C0233a.m27(JniTest.getValue(editable.getBytes("utf-8"))
的结果应该和"01635e6c5f2378255f27356c11663165"相同。重点就在native的getValue函数了，对应在so库中是Java_com_seclover_ctf2_JniTest_getValue函数。该函数是一个base64变形算法，码表做了修改，另外对第一位、第二位做了异或。可以直接编写解码函数，完整代码如下：
运行后得到“VVe1lD0ne^-^”，进入app输入，得到flag: SSCTF{C0ngraTu1ationS!}。
**逆向三（伪勒索软件）**
文件的编码和时间有关系！ Flag文件被编码的时间实际为:2017/5/2 17:54:30至18点前，进行了多次编码。
题目编码分为4种:
1.简单xor。
2.Base64(结果替换)。
3.Md5(时间的小时值)，然后进行简单xor。
4.Rc4(时间:年月日)。
打开程序后，并不会直接去编码文件。而是等到退出时候才对后缀为SSCTF的文件进行编码(可重复叠加)。
编码规则:
1.读取文件。如果蜂鸣器音乐线程被关闭则，产生随机数参与编码，否则使用11。
2.根据时间（24小时制的小时数）决定模式。12Base64->Md5->Rc4。
2.Md5->Base64->Rc4->xor。
3.Rc4->Md5->xor->Base64。
写入模式:
1.Info->Base64->Rc4->Md5->Info->xor。
2.Info->Base64->xor->Info->Md5->Rc4。
3.Info->xor->Rc4->Md5->Info->Base64。
解码规则:（需要自行编写，EXE中无解码函数）
1.读取文件。
2.根据解码后的Info选择模式。
3.根据模式解码分段。
4.根据Info选择逆写模式。
5.写文件，结束。
写好解码器后填写相应的时间。然后进行解码，直到文件内容不再为乱码即可。可以发现解码后文件内容为DOC格式。使用WORD打开，即可看到FLAG。
**逆向四（魂斗罗）**
通关并没有什么用，游戏只是用来消遣。不会提供任何信息，担心有些人钻牛角尖，非要打通关，所以给提供内置外挂，将生命锁定为无限。并且将题目核心放在内置外挂的启动函数中。
可以看到会弹出对话框，提示不要关闭，但是不关闭就无法执行实际的代码。所以必须关闭对话框，来执行核心函数。
核心函数是2个Shellcode嵌套在一起。1级Shellocode目的是为了将2级shellcode(本身一部分被xor
0xcc编码过)注入到explorer.exe进程中，所以必须是32位系统才会真的执行二级Shellcode。所以在32位系统中，调试explorer.exe，中断于新线程启动。在2级解码自身后，即可看见真正的核心。
分析核心代码。发现是对c:flg文件进行编码。
编码分为2种：
1.多重xor，置换。
2.base24编码。
经过编码后，使用编码数据覆盖原始文件数据。所以根据编码算法，写出解码函数。
运行，直到文件内容不再为密文。可以发现文件内容为DOC文件格式，使用WORD打开。即可看见Flag。
**P WN**
**逆向一（Word2003）**
CVE-2010-3333。 因为Mso.dll里存在栈溢出，WORD2003无DEP，无ASLR。所以直接执行Shellcode即可。
很普通的栈溢出
漏洞函数位于mso.dll的0x30f4cc5d
当a7不为0时，会调用一个函数指针，动态跟踪可以发现这个函数指针指向的函数是将doc文档数据复制到栈中，并且没有检查边界，造成栈溢出。
跟进sub_30f4cb1d函数中：
会发现当第5个参数为0时会直接返回，而第五个参数刚好是漏洞函数的第七个参数，栈溢出时会将其覆盖，所以exploit时要保证a7处为0
因为这个word版本未开dep，所以直接jmp esp覆盖返回地址，然后执行就好了
剩下的就是shellcode的编写了
**逆向二（Pwn2）**
存在栈溢出。构造ROP链获得Shell即可。
逆向三（本地提权来自FlappyPig的思路）
win32k!bGetRealizedBrush空指针引用。所以在零页填写相应数据数据，然后替换token即可。
    kd> r
    eax=00000000 ebx=980b0af8 ecx=00000001 edx=00000000 esi=00000000 edi=fe9950d8
    eip=838b0560 esp=980b0928 ebp=980b09a0 iopl=0         nv up ei pl zr na pe nc
    cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010246
    win32k!bGetRealizedBrush+0x38:
    838b0560 f6402401        test    byte ptr [eax+24h],1       ds:0023:00000024=??
这个位置eax引用了0x0，需要跟踪这个eax由什么地方得到，首先分析win32k!bGetRealizedBrush函数。
    int __stdcall bGetRealizedBrush(struct BRUSH *a1, struct EBRUSHOBJ *a2, int (__stdcall *a3)(struct _BRUSHOBJ *, struct _SURFOBJ *, struct _SURFOBJ *, struct _SURFOBJ *, struct _XLATEOBJ *, unsigned __int32))
    {
函数定义了3个变量，其中a3是EngRealizeBrush函数，a1是一个BRUSH结构体，a2是一个EBRUSHOBJ结构体，而漏洞触发位置的eax就由EBRUSHOBJ结构体得来，跟踪分析一下这个过程。
    kd> p
    win32k!bGetRealizedBrush+0x1c://ebx由第二个参数得来
    969e0544 8b5d0c          mov     ebx,dword ptr [ebp+0Ch]
    ……
    kd> p
    win32k!bGetRealizedBrush+0x25://第二个参数+34h的位置的值交给eax
    969e054d 8b4334          mov     eax,dword ptr [ebx+34h]
    ……
    kd> p
    win32k!bGetRealizedBrush+0x32://eax+1c的值，交给eax，这个值为0
    969e055a 8b401c          mov     eax,dword ptr [eax+1Ch]
    kd> p
    win32k!bGetRealizedBrush+0x35:
    969e055d 89450c          mov     dword ptr [ebp+0Ch],eax
    kd> p
    win32k!bGetRealizedBrush+0x38://eax为0，引发无效内存访问