title:PICCO: a general-purpose compiler for private distributed computation
author:Yihua Zhang and
Aaron Steele and
Marina Blanton
PICCO: A General-Purpose Compiler for Private
Distributed Computation
Yihua Zhang, Aaron Steele, and Marina Blanton
Department of Computer Science and Engineering
University of Notre Dame, Notre Dame, IN, USA
{yzhang16,asteele2,mblanton}@nd.edu
for the development of secure data processing techniques suitable
for use in outsourced environments. This is because security and
privacy considerations are often cited as one of the top impediments
to harnessing the beneﬁts of cloud computing to the fullest extent.
Despite the sheer volume of research literature on privacy-preserving
ABSTRACT
Secure computation on private data has been an active area of re-
search for many years and has received a renewed interest with
the emergence of cloud computing.
In recent years, substantial
progress has been made with respect to the efﬁciency of the avail-
able techniques and several implementations have appeared. The
available tools, however, lacked a convenient mechanism for im-
plementing a general-purpose program in a secure computation
framework suitable for execution in not fully trusted environments.
This work fulﬁlls this gap and describes a system, called PICCO,
for converting a program written in an extension of C into its dis-
tributed secure implementation and running it in a distributed envi-
ronment. The C extension preserves all current features of the pro-
gramming language and allows variables to be marked as private
and be used in general-purpose computation. Secure distributed
implementation of compiled programs is based on linear secret
sharing, achieving efﬁciency and information-theoretical security.
Our experiments also indicate that many programs can be evaluated
very efﬁciently on private data using PICCO.
Categories and Subject Descriptors
K.6 [Management of Computing and Information Systems]: Se-
curity and Protection; C.2.4 [Computer-Communication Networks]:
Distributed Systems—distributed applications
Keywords
Secure multi-party computation; secure computation outsourcing;
general-purpose computation; compiler; source-to-source transla-
tor; linear secret sharing; parallel execution
1.
INTRODUCTION
This work is motivated by the broad goal of developing tech-
niques suitable for secure and general data processing and out-
sourcing. The desire to compute on sensitive data without having
to reveal more information about the data than necessary has led to
several decades of research in the area of secure multi-party compu-
tation (SMC). Today, cloud computing serves as a major motivation
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http:///dx.doi.org/10.1145/2508859.2516752.
computation and newly appearing secure outsourcing techniques,
most of the available techniques focus on a rather narrow domain,
namely, integer-based arithmetic. Little or no attention has been
paid to other types of computation, as well as to data structures and
algorithms suitable for secure data processing in not fully trusted
environments. With the recent progress in the performance of basic
secure computation techniques and the shift toward cloud comput-
ing, we believe that it is the prime time to enable privacy-preserving
execution of any functionality or program, or general-purpose se-
cure data processing.
Toward this goal, this work introduces PICCO (Private dIstributed
Computation COmpiler) — a system for translating a general-purpose
program for computing with private data into its secure implemen-
tation and executing the program in a distributed environment. The
main component of PICCO is a source-to-source compiler that trans-
lates a program written in an extension of the C programming lan-
guage with provisions for annotating private data to its secure dis-
tributed implementation in C. The resulting program can conse-
quently be compiled by the native compiler and securely run by
a number of computational nodes in the cloud or similar environ-
ment. Besides the compiler, PICCO includes programs that aid
secure execution of user programs in a distributed environment by
preprocessing private inputs and recovering outputs at the end of
the computation.
by two important aspects of this work:
Our desire to build as general of a tool as possible is supported
• We make a distinction between the participant(s) who hold
private inputs, participant(s) who receive the output, and com-
putational parties who conduct the computation. This al-
lows the framework to be used in many contexts including
privacy-preserving collaborative computation with multiple
participants and secure computation outsourcing by one or
multiple clients.
• The goal of this work is to support as wide of a range of
functionalities as possible, i.e., as long as the functionality
is known at the run-time, it can be securely evaluated in our
framework. Toward this goal, we supplement the functional-
ity of C with a number of private data types and operations
on them, and incorporate them in standard types of construc-
tions used in C. For example, unlike other compilers, PICCO
has support for ﬂoating point arithmetic on private data.
We hope that our system will aid accessibility and wider adoption
of general-purpose secure computation and outsourcing.
813Performance is a key factor for secure computation. For that rea-
son, PICCO utilizes lightweight information-theoretically secure
techniques based on secret sharing to build secure distributed im-
plementations of user programs. The resulting implementations
promise to be particularly efﬁcient and suitable for large-scale ap-
plications, as evidenced by our experiments.
The remainder of this work describes the design and implemen-
tation of our system as well as reports on the performance of a
number of programs compiled and executed using PICCO.
Tool/compiler
Fairplay
C compiler [29]
TASTY
FairplayMP
Sharemind
VIFF
This work
GC
GC
2
2
2
GC & HE
≥ 3 GC & SS
additive SS
3
≥ 3
linear SS
≥ 3
linear SS
√
√
√
√
√
No.
Varying Non-int
parties technique precision arithmetic
Basic
Type of
parallelism
√
√
√
N/A
N/A
N/A
N/A
arrays
each interactive op
loops, arrays, and
user-speciﬁed
2. RELATED WORK
Table 1: Summary of related work.
There are a number of existing tools and compilers for secure
two- and multi-party computation, which are relevant in the con-
text of this work. They include Fairplay [35], FairplayMP [8],
Sharemind [10], VIFF [19], SEPIA [14], TASTY [28], and a secure
two-party compiler for (a subset of) ANSI C [29]. While many of
them were designed to support a rather general types of compu-
tation (normally on integers) and some have attractive properties,
due to efﬁciency and ﬂexibility goals that we target to achieve we
choose to build our own compiler instead of directly extending one
of the existing tools. In particular, the features that we ﬁnd crucial
are: (i) support for multi-party computation, (ii) support for a vari-
able number of participants (including separation between compu-
tational, input, and output parties), (iii) the use of standard linear
secret sharing techniques, (iv) applicability of techniques for ma-
licious adversaries, (v) support for arithmetic of desired precision,
and (vi) efﬁciency. None of the above mentioned tools simultane-
ously achieve the desired properties (or can be modiﬁed to achieve
them at a relatively small cost).
In more detail, Fairplay [35] was the ﬁrst compiler for secure
two-party computation based on evaluation of garbled Boolean cir-
cuits. It allows a user to specify a function to be securely evalu-
ated in a high-level language SFDL, compile it, and run the corre-
sponding protocol. The circuit optimization part of compilation is
known to have large memory requirements [9]. FairplayMP [8] ex-
tends Fairplay with multi-party functionality. It uses several inter-
active operations on secret-shared values for the evaluation of each
Boolean gate, resulting in a performance disadvantage compared
to multi-party solutions that directly build on a linear secret shar-
ing scheme. TASTY [28] is a recent tool that combines two-party
garbled circuit evaluation with computation based on homomor-
phic encryption. The desired functionality is speciﬁed in a custom
language TASTYL, which is a subset of python. Another recent
two-party compiler [37] was developed with the goal of extensibil-
ity, which would permit different techniques to be used in a single
protocol. The most recent two-party compiler [29] allows a pro-
gram written in ANSI C to be compiled into a garbled circuit. The
current limitations of it include no coverage of real numbers, point-
ers, or variable-length numeric data types.
Sharemind [10] is the most developed and efﬁcient tool to date
with a built-in support of integer arithmetic, arrays, and matrices. It
has a number of operations written in the assembly language, which
results in an efﬁcient implementation. A C-like language SecreC
was developed for specifying the desired computation [31]. Unfor-
tunately, Sharemind uses non-standard secret-sharing techniques
with three parties, which do not automatically extend to other num-
bers of computational parties. In addition, the use of non-standard
arithmetic makes many existing techniques inapplicable, including
techniques for security against malicious adversaries. Sharemind
also supports only integers of ﬁxed 32-bit length.
SEPIA [14] is a library for secure distributed processing of net-
work data based on linear secret sharing techniques. It has an ex-
plicit separation between computational parties and the parties who
contribute inputs and obtain outputs. It was developed for the pur-
poses of privacy-preserving intrusion detection and has features in-
herent to this application which limit its applicability to a wider
range of collaborative computation.
VIFF [19] is a compiler based on standard multi-party linear se-
cret sharing techniques.
It was designed to be suitable, and has
support, for security in presence of malicious parties and uses spe-
cially designed for this purpose asynchronous techniques. VIFF
tries to parallelize as many operations as possible, with each in-
teractive operation implemented as a callback. This means that all
operations are scheduled when a protocol starts, but each operation
is executed when its inputs become available. Unfortunately, the
choice of the programming language in which it is implemented
and the way parallelism is handled (with a heavy-weight thread per
elementary operation) makes it unnecessarily slow in practice.
Lastly, the compiler described in [32] is complementary to our
work, and if computational parties coincide with output parties, it
can be used to optimize performance of user-speciﬁed programs.
The features of the available compilers and tools are summarized
in Table 1. Parallel execution optimizations are not applicable to
some tools where the computation can always be realized in a con-
stant number of rounds. In the table, GC stands for garbled circuits,
HE for homomorphic encryption, and SS for secret sharing.
3. FRAMEWORK
In this work, we utilize a threshold linear secret sharing scheme
for representation of and secure computation over private values.
We choose to concentrate on this setting due to its ﬂexibility and
speed. Throughout this work, we thus use the multi-party setting in
which n > 2 parties securely evaluate a function on private inputs
and output the result to the recipients of the computation. We divide
all participants into three groups: The input parties distribute their
inputs in the form of shares to the computational parties prior to the
computation. The computational parties carry out the computation
on secret-shared data. Upon completion of the computation, they
communicate their shares of the result to the output parties, who
reconstruct the values and learn the result. Note that there are no
constraints on how these three groups are formed, and a single en-
tity can be involved in a protocol taking on one or more of the above
roles. This formulation of secure computation is ﬂexible enough to
naturally ﬁt several broad categories of collaborative and individual
computing needs. In particular, a number of parties with a private
input each can engage in secure function evaluation themselves and
learn the result (or their respective results). Alternatively, they can
choose a subset of them, a number of outside parties, or a combi-
nation of the above to carry out the computation, while each input
owner distributes her private data to the parties who carry out the
computation. Another very important scenario consists of a single
entity outsourcing its computation to a number of computational
nodes. In this case, the data owner will be the only input and output
814party. Finally, the setup also allows two parties with private inputs
to seek help of one or more additional servers and proceed with
secure evaluation of their function using multi-party techniques.
We refer to computational parties as P1, . . ., Pn and assume that
they are connected by secure authenticated channels with each other.
Each input and output party also establishes secure channels with
P1 through Pn. With a (n, t)-secret sharing scheme, any private
value is secret-shared among n parties such that any t + 1 shares
can be used to reconstruct the secret, while t or fewer parties can-
not learn any information about the shared value, i.e., it is perfectly
protected in information-theoretic sense. Therefore, the value of n
and t should be chosen such that an adversary is unable to corrupt
more than t computational parties (for instance, data owners can
acquire nodes located at different cloud service providers).
In a linear secret sharing scheme, a linear combination of secret-
shared values can be performed by each computational party lo-
cally, without any interaction, but multiplication of secret-shared
values requires communication between all of them.
In particu-
lar, we utilize Shamir secret sharing scheme [38], in which a secret
value s is represented by a random polynomial of degree t with
the free coefﬁcient set to s. Each share of s corresponds to the
evaluation of the polynomial on a unique non-zero point. All op-
erations are performed in a ﬁeld F (normally Zp for a small prime
p larger than any value that needs to be represented). Then given
t + 1 or more shares, the parties can reconstruct the polynomial
using Lagrange interpolation and learn s. Possession of t or fewer
shares, however, information-theoretically reveals no information
about s. With this representation, any linear combination of secret-