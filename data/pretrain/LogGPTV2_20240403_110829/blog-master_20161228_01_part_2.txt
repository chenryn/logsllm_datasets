```      
2D->3D conversion/conformational analysis via distance geometry, including optional use of experimental torsion angle potentials      
UFF and MMFF94/MMFF94S implementations for cleaning up structures      
Pharmacophore embedding (generate a pose of a molecule that matches a 3D pharmacophore)      
Feature maps      
Shape-based similarity      
RMSD-based molecule-molecule alignment      
Shape-based alignment (subshape alignment)      
Unsupervised molecule-molecule alignment using the Open3DAlign algorithm      
Integration with PyMOL for 3D visualization      
Molecular descriptor library:      
Moments-of-inertia based descriptors: PMI, NPR, PBF, etc.      
Feature-map vectors      
Torsion Fingerprint Differences for comparing conformations      
```      
一些SQL例子  
```
chembl_14=# select * from rdk.mols where m @> 'NC(=O)[C@@H]1CCCN1C=O' limit 10;
 molregno |                                                                                        m
----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  1295889 | COc1ccc(C[C@@H](C(=O)NCC(N)=O)N(C)C(=O)[C@@H]2CCCN2C(=O)[C@H](CC(C)C)NC(=O)C(C)NC(=O)OCc2ccccc2)cc1
  1293815 | CN1C(=O)C23CC4=CC=CC(O)C4N2C(=O)C1(CO)SS3
  1293919 | CNC(=O)CNC(=O)C(NC(=O)CNC(=O)C1CCCN1C(=O)C(C)NC(=O)C(NC(=O)OC(C)(C)C)C(C)C)C(C)C
  1011887 | COC(=O)C(C)NC(=O)C1CCCN1C(=O)CNC(=O)OCc1ccccc1
  1293021 | CCC(C)C1NC(=O)C(NC(=O)C(CC(C)C)N(C)C(=O)[C@@H]2CC(O)CN2C(=O)[C@H](C)O)C(C)OC(=O)[C@H](Cc2ccc(OC)cc2)N(C)C(=O)[C@@H]2CCCN2C(=O)[C@H](CC(C)C)NC(=O)C(C)C(=O)[C@H](C(C)C)OC(=O)CC1O
  1287353 | CCC(C)C1NC(=O)C(NC(=O)C(CC(C)C)N(C)C(=O)C2CCCN2C(=O)C(C)O)C(C)OC(=O)C(Cc2ccc(OC)cc2)N(C)C(=O)C2CCCN2C(=O)C(CC(C)C)NC(=O)[C@H](C)C(=O)[C@H](C(C)C)OC(=O)CC1O
  1293647 | CCC(C)[C@@H]1NC(=O)[C@@H]2CCCN2C(=O)C(CC(O)CCl)OC(=O)CCNC(=O)[C@H](C)N(C)C(=O)[C@H](C(C)C)N(C)C1=O
  1290320 | C=CCOC(=O)[C@@H]1C[C@@H](OC(C)(C)C)CN1C(=O)[C@@H]1[C@H]2OC(C)(C)O[C@H]2CN1C(=O)OCC1c2ccccc2-c2ccccc21
  1281392 | COC1=CC2C(=O)N(C)[C@@H](C)C(=O)N3NCCC[C@@H]3C(=O)N3[C@@H](C[C@@]4(O)c5ccc(Cl)cc5N[C@@H]34)C(=O)N[C@H](C(C)C)C(=O)N3NCCC[C@@H]3C(=O)N2N=C1
  1014237 | CC(C)COC(=O)N1CC(O)CC1C(=O)Nc1ccc2c(c1)OCO2
(10 rows)
Time: 9.447 ms
New Types
mol : an rdkit molecule. Can be created from a SMILES via direct type conversion, for example: ‘c1ccccc1’::mol creates a molecule from the SMILES ‘c1ccccc1’
qmol : an rdkit molecule containing query features (i.e. constructed from SMARTS). Can be created from a SMARTS via direct type conversion, for example: ‘c1cccc[c,n]1’::qmol creates a query molecule from the SMARTS ‘c1cccc[c,n]1’
sfp : a sparse count vector fingerprint (SparseIntVect in C++ and Python)
bfp : a bit vector fingerprint (ExplicitBitVect in C++ and Python)
Similarity search
% : operator used for similarity searches using Tanimoto similarity. Returns whether or not the Tanimoto similarity between two fingerprints (either two sfp or two bfp values) exceeds rdkit.tanimoto_threshold.
# : operator used for similarity searches using Dice similarity. Returns whether or not the Dice similarity between two fingerprints (either two sfp or two bfp values) exceeds rdkit.dice_threshold.
 : used for Tanimoto KNN searches (to return ordered lists of neighbors).
 : used for Dice KNN searches (to return ordered lists of neighbors).
Substructure and exact structure search
@> : substructure search operator. Returns whether or not the mol or qmol on the right is a substructure of the mol on the left.
 : returns whether or not the left mol is greater than the right mol
= : returns whether or not the left mol is equal to the right mol
= : returns whether or not the left mol is greater than or equal to the right mol
http://www.rdkit.org/docs/Cartridge.html
```
小结一下，仓储环节依旧使用传感器、流计算、应急机制对仓管的产品进行实时的监管，而对于危化品本身，我们已经不能使用普通的数据类型来存储，很幸运的是在PostgreSQL的生态圈中，有专门支持化学行业的RDKit支持，支持存储化合物类型，以及基于化合物类型的数据处理（包括化学反应，分解等等）。         
## 运输环节      
运输环节的风险系数也是非常大的，包括司机的经验、运输过程的风险、汽车的安全状况、道路的安全、天气的影响等等。        
依次进行分析，看看如何应用IT手段来解决这些安全隐患。      
### 司机的管理      
G20大家应该很清楚吧，G20的司机、安保，据说都是三代以内所有关系网的背景干净的，目的就是防止正面人物的跳反。      
![pic](20161228_01_pic_010.png)      
对于危化品运输行业也一样，司机的背景很重要，除了在招聘时需要调查，平时也可以动态的分析司机们的关系网络，从而降低司机层面的安全隐患。         
用到的技术也是社会关系学分析，可以参考      
[《金融风控、公安刑侦、社会关系、人脉分析等需求分析与数据库实现 - PostgreSQL图数据库场景应用》](./20161213_01.md)         
### 运输过程中的危化品监管      
在集装箱、货车本身都有相应的传感器。      
比如货车的 速度、地理位置、胎压、轮胎温度、剩余燃料、集装箱本身针对危化品的各项指标数据（如液位、温度、压力、等）      
这里涉及的同样也是传感器、流式计算、应急机制（流规则）技术。以及地理位置信息的处理。        
参考      
[《流计算风云再起 - PostgreSQL携PipelineDB力挺IoT》](./20161220_01.md)         
[《PostGIS 在 O2O应用中的优势》](https://yq.aliyun.com/articles/50922)          
[《PostgreSQL 百亿地理位置数据 近邻查询性能》](https://yq.aliyun.com/articles/2999)       
http://www.osgeo.org/        
http://postgis.net/        
### 路径管理      
危化品的运输其实是受到严格的监管的，比如 不能进城，不能走某些禁行路段或桥梁等 ，又比如绕过道路拥堵等。        
这里涉及到的功能和导航的功能类似，只不过导航没有针对危化品运输的版本，它不会告诉你哪些是危化品禁行的路段。      
所以针对危化品运输，可能需要自建导航，那么自建导航还需要考虑什么呢，      
比如动态路径规划，开高速的朋友一定对堵车，车祸很惧怕，动态规划包括躲避拥堵，躲避禁行路段，提前对恶劣天气进行播报、接收交管部门的公告等。转换为动态的路径规划，实时的改变行程。       
![pic](20161228_01_pic_007.png)      
用什么产品才能支持这些功能呢？还是PostGIS，如下文档可以作为参考        
[《聊一聊双十一背后的技术 - 物流、动态路径规划》](../201611/20161114_01.md)          
http://pgrouting.org/        
### 应急响应      
如果危化品运输过程中出现了泄露、或者货车出现了事故，需要根据出事地点，快速的调配附近的应急救助资源（如交警、消防中队、医院、120）。      
同时需要根据危化品的属性，选择合理处理方案（绝对不要再出现天津爆炸类似的事件了），要达到这个目的，我们需要实时的追踪货车的位置，同时货车承载的货物属性需要被集中的监管。      
前面提到的开源流计算产品pipelineDB可以帮助对货车上传的数据进行流式处理，比如实时的聚合（生成轨迹等）；比如创建TRANSFORM，创建事件响应规则；      
小结一下，在危化品的运输环节，使用传感器对货车、集装箱内的危化品的指标进行实时的监控，使用流式数据库pipelineDB流式的处理传感器实时上报的数据；使用PostgreSQL+PostGIS+pgrouting 对于货车的形式路径进行管理，绕开禁行路段、拥堵路段。  
当出现事故时，使用PostgreSQL的GIS索引，快速的找出附近的应急救助资源（如交警、消防中队、医院、120）。  
同时对危化品的货物存储，使用化学物类型存储，可以对这些类型进行更多的约束和模拟的合成，例如可以发现化学反应，防止出现类似天津爆炸事件。  
## 消耗环节      
危化品最终用户，需要将危化品消耗掉，与仓管差不多的监管手段，同时我们可以增加剩余量的监控，在闭环中起到很好的作用，达到供需平衡，避免供不应求，或者供过于求的事情发生。      
## 危化品货物的动态数据监控        
![pic](20161228_01_pic_004.jpg)        
### 指挥中心dashboard      
以往我们可能只能看到一张静态的图        
![pic](20161228_01_pic_005.jpg)         
在给生产、仓库、物流配送、消耗环节添加了终端、传感器后，就建立了一个全面的危化品监管数据平台。       
我们可以在构建实时的监管全图。       
类似我们常用的DD打车，可以看到那里存放了什么，危化品的车辆在什么地方？。。。。等等       
![pic](20161228_01_pic_006.png)      
## 扩展思考      
### 公共场所危化品携带监管      
### 危化品原材料监管      
### 缉毒、化学合成、监管      
比如危化品的原材料，可能有不法分子有作坊可以买原材料加工成危化品，如炸弹。       
那么就需要对源头进行监管，还记得G20前，买菜刀都要登记身份证。其实道理类似，就是怕不法分子趁机搞事嘛。    
但是这种手段成本太高，而且效果不好，有什么好的手段呢？    
我们可以登记所有的买家信息，同时利用关系学分析，找到不法分子。（前面讲招聘危化品货车司机时有讲到）    
另一方面，对于原材料的数据存储，如果都是化学物质的话，我们需要一种可以存储并处理化学物质的数据库，这一方面我们可以使用RDKit + PostgreSQL来实现。     
![pic](20161228_01_pic_012.png)     
比如对购买了原材料的人进行关系推导，找出N级范围内同样购买了其他原材料的人，使用RDKit进行模拟化学反应，合成后看看是不是危化品？     
![pic](20161228_01_pic_011.png)    
## 小结    
1\. 生产环节  
将各个原来人工监控的环节数字化，使用 传感器、流计算、规则（可以设置为动态的规则） 代替人的监管和经验。  
2\. 销售环节  
利用社会关系分析，在销售环节挖掘不法分子，挖掘骗贷、骗保的虚假交易。利用地理位置跟踪，掌控整个交易的货物运输过程。  
3\. 仓储环节  