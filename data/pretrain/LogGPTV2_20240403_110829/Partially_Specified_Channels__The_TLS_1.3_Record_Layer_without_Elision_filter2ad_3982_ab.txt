any details. The strategy is to implement the record layer in a programming language that is amenable to
formal analysis (F∗), express their security goals as games in the same language, and ﬁnd a formal proof
that the scheme’s security (in a sense they deﬁne) reduces to standard computational assumptions (also
expressed in F∗). This methodology amounts to a formalization of code-based game-playing techniques now
common in cryptography [10]. Our work is technically diﬀerent from theirs on a couple fronts. First,
our analysis applies to a set of compliant implementations (corresponding to diﬀerent realizations of the
speciﬁcation details), whereas their work applies only to their implementation. Our notions are also more
ﬂexible: we capture the goal of hiding the message length as one of many possible privacy goals, whereas
this property is mandatory in their security notion. Second, our adversarial model is stronger in that it
permits fragmentation of the plaintext and ciphertext streams; neither capability is considered by DLFK+.
We elaborate on this and other points about their setting in Appendix B.
We do not mean to diminish the work of DLFK+ in pointing out these short comings. On the contrary,
the value of their contribution (and of the miTLS project overall) is hard to overstate. They provide a
reference implementation of the record layer in which we have a high degree of conﬁdence, both in terms
of security and, crucially, correctness. Practitioners are paying attention [32, Section 12.2], and using this
reference will ultimately facilitate the development of secure production code. As such, we view our work as
complimentary to DLFK+.
Other analyses of the record layer. In an analysis of TLS 1.2, a paper by Paterson, Ristenpart,
and Shrimpton [28] put forward a notion of stateful, length-hiding AE that admits schemes with associated
padding (to hide the plaintext length) and variable-length MACs, both features of TLS 1.2. Their formalism
necessarily elides a number of details of the protocol. Badertscher et al. [5] characterized the TLS 1.3 record
layer (draft 08) as an augmented secure channel (ASC), which allows for sending a message with two parts:
the ﬁrst being private, and both parts being authenticated. Bellare and Tackmann analyze the multi-user
security of the TLS 1.3 record layer [11]. They shed light on the following problem: if the same message is
encrypted in a number of sessions, then what information does this leak about the sessions? A popular TLS
endpoint might serve billions of client a day. Many of these ﬂows are identical (such as the initial GET);
thus, an adversary who observes these identical ﬂows can try to guess the key used for one of the clients.
Its odds are improved by the sheer number of clients encrypting an identical message. This attack vector
lead the designers of TLS 1.3 to “randomize” the IV used for generating the nonce; Bellare and Tackmann
analyze the exact security of this approach in the multi-user setting.
4 Partially speciﬁed channels
In this section we formalize PSCs and their attendant security notions. We begin with some notation and
conventions.
Notation. Let |X| denote the length of a string X ∈ {0, 1}∗ and let |X| denote the length of vector X.
We denote the i-th bit of string X by Xi or X[i], and the i-th element of vector X by X i or X[i]. Let
{0, 1}∗∗ = ({0, 1}∗)∗. We deﬁne X (cid:107) Y to be the concatenation of strings X and Y ; let cat : {0, 1}∗∗ → {0, 1}∗
denote the map X (cid:55)→ X 1 (cid:107) ··· (cid:107) X m, where |X| = m. Let X[i:j] denote the substring Xi (cid:107) ··· (cid:107) Xj of X. If
i (cid:54)∈ [1..j] or j (cid:54)∈ [i..|X|], then deﬁne X[i:j] = ε. Let X[i:] = X[i:|X|] and X[:j] = X[1:j]. We write X (cid:22) Y if
X is a preﬁx of Y (i.e., (∃ T ∈ {0, 1}∗) X (cid:107) T = Y ). Let X % Y denote “remainder” of X after removing the
5
preﬁx Y , e.g., 1011 % 10 = 11. (If Y (cid:54)(cid:22) X, then deﬁne X % Y = ε.) Let (cid:104)i(cid:105)n denote an invertible encoding
of integer 0 ≤ i ≤ 2n − 1 as an n-bit string.
Algorithms may have access to one or more oracles, written as superscripts (e.g., AO). The runtime of an
algorithm includes the time required to evaluate its oracle queries. If an algorithm A is deterministic, then
we write y ← A(x) to denote executing A on input of x and assigning its output to y; if A is randomized
or stateful, then we write y ←← A(x). If X is a set, then we write x ←← X to denote sampling x randomly
from X according to some distribution; if X is ﬁnite and the distribution is unspeciﬁed, then it is uniform.
If n ∈ N \ {0}, then let [n] = {x ∈ N : 1 ≤ x ≤ n}.
Pseudocode. Our pseudocode follows the conventions of RS with a few minor diﬀerences. (Refer to [33, Sec-
tion 2].) our pseudocode is statically typed. Available types are bool (called boolean in RS, an element of
{0, 1}), int (integer in RS, an element of Z), str (string in RS, an element of {0, 1}∗), and struct (record in
RS). New types may be deﬁned recursively from these: for example, type struct {str name, int age} person
declares a data structure with two ﬁelds, the ﬁrst a str and the second an int. Variables may be declared
with the word declare, e.g. declare person Alice. Variables need not be explicitly declared, in which
case their type must be inferable from their initialization (i.e., the ﬁrst use of the variable in an assignment
statement). There are also associative arrays that map arbitrary quantities to values of a speciﬁc type.
For example, declare str X[ ] declares an associative array X. We let X[k] and Xk denote the value in X
associated with k. We will ﬁnd it useful to explicitly deﬁne the “type” of a procedure (i.e., algorithm) by
its interface. For instance, the type A(str X, str Y ) (cid:55)→ (int i, int j) indicates that A takes as input a pair
of strings and outputs a pair of integers. Multiple variables of the same type may be compactly declared,
e.g., as declare str X, Y, int z rather than declare str X, str Y , int z. We also use this convention when
deﬁning procedure interfaces, e.g., A(str X, Y ) (cid:55)→ (int i, j).
If a variable of one type is set to a value of another type, then the variable takes the value (cid:5), read
“undeﬁned”. Uninitialized variables implicitly have the value (cid:5). The symbol (cid:5) is interpreted as 0 (i.e., false)
in a boolean expression, as 0 in an expression involving integers, and as ε in an expression involving strings.
We introduce the distinguished symbol ⊥, read “invalid”, which can be assigned to any variable regardless of
type. Unlike (cid:5), its interpretation in an expression is undeﬁned, except that (X = ⊥) should evaluate to true
just in case variable X was previously set to ⊥. We remark that ⊥ has the usual semantics in cryptographic
pseudocode; the symbol (cid:5) is useful for specifying protocols compactly.
A value of any type may be assigned to an anonymous variable ∗, e.g., ∗ ← x, but the value of ∗ is
undeﬁned in an expression. We let (cid:104)x1, . . . , xm(cid:105) denote an invertible encoding of arbitrary values x1, . . . , xm
as a string. Decoding is written as (cid:104)x1, . . . , xm(cid:105) ← X and works like this (slightly deviating from [33, Section
i has the same type as xi,
2]):
then set xi ← x(cid:48)
i for each i ∈ [m]. Otherwise, set xi ← (cid:5) for each i ∈ [m].
m(cid:48)(cid:105), m(cid:48) = m, and each x(cid:48)
if there exist x(cid:48)
1, . . . x(cid:48)
m(cid:48) such that X = (cid:104)x(cid:48)
1, . . . , x(cid:48)
Finally, it is customary in cryptographic pseudocode to pass all variables by value; for technical reasons,
which will become apparent later on, we also permit variables to be passed by reference. Speciﬁcally, variables
passed to procedures may be embellished with the keyword var. If the variable appears on the left hand
side of an assignment statement, then this immediately changes the value of the variable; when used in an
expression, the variable is treated as its value. A procedure’s interface makes explicit which inputs must be
passed by reference. For example, in a procedure A(int x, var int y) (cid:55)→ int z, variable x is passed by value,
while y is passed by reference.2
4.1 Syntax
Formally, a PSC is a 5-tuple of randomized algorithms CH = (Init , Mux , Write , Read , Demux ). All but the
ﬁrst expect access to an oracle, which we generically write as O in the following deﬁnitions:
• Init ( ) (cid:55)→ (str Mu, Wr , Re, De). The initialization algorithm models key agreement and initialization of
the sender state (Mu, Wr ) and receiver state (Re, De).
• Mux O(str M, sc, var str Mu) (cid:55)→ (str X, H, α). The multiplexing algorithm takes as input a plaintext
fragment M , stream context sc, state Mu, and returns a channel fragment X, its context H, and some
auxiliary output α.
2The keyword var as used by RS serves a similar purpose, but is semantically diﬀerent. In their setting, a variable embellished
with var has copy-in-copy-out semantics, which means its value is only changed when the procedure goes out of scope.
6
γ
C
Write
Sender
Mux X
H
α
M
sc
γ
Send
Receiver
Read Y
H
α
Demux
M
sc
A1
Recv
Mux
Write
Read
Demux
SD
A2
Figure 1: left: illustration of our syntax. Right: illustration of the execution model (who may call whom).
• Write O(str X, H, α, var str Wr ) (cid:55)→ (str C, γ). On input of a channel fragment X, context H, and
auxiliary information α, and state Wr , the channel writing algorithm produces a ciphertext fragment C
and status information γ.
• Read O(str C, var str Re) (cid:55)→ (str Y, H, α). On input of a ciphertext fragment C and state Re, the
channel reading algorithm returns a ciphertext fragment Y , its context H, and auxiliary output α.
• Demux O(str Y, H, α, var str De) (cid:55)→ (str M, sc, γ). The demultiplexing algorithm takes a ciphertext
fragment Y with channel context H, auxiliary information α, and state De, and returns a plaintext
fragment M with stream context sc, along with status information γ.
The oracle O provides the speciﬁcation details and may be invoked any number of times by the caller during
its execution. The SD-oracle may have its own state and coins; to be clear, the oracle and its caller do not
have joint state, and their coins are independent. We require that each of these procedures halts, regardless
of coin tosses or SD-oracle responses, in a bounded number of steps that depends only on the length of its
inputs.
Our convention will be that SD-oracle queries are of the form (cid:104)caller, instruction, x1, . . . , xm(cid:105), where caller
and instruction may be thought of as strings. When it is necessary to specify an SD-oracle query, we will
endeavor to make them suggestive of the intended semantics under correct operation. (See Figure 7 for
examples.) SD-oracle responses are also always strings, but we do not deﬁne conventions for them.
Status messages and auxiliary outputs.All algorithms may produce some auxiliary information along
with its outputs. This allows Mux and Read to convey state (denoted α) to Write and Demux (resp.), and
allows Write and Demux to surface status information (denoted γ) to applications. (See Figure 1 for an
illustration.) Among other things, this models distinguishable decryption errors [14], an attack vector that
has heavily inﬂuenced the development of secure channels [36, 17, 27, 3]. (FGMP model distinguishable
errors, too.) Our consideration of information leakage via auxiliary output is inspired by a paper by Barwell,
Page, and Stam [6]. Their subtle AE setting models decryption leakage in a manner general enough to
capture error indistinguishibility [14, 19], as well as other settings for authenticated encryption [4, 22].
Correctness.Conventionally, one would deﬁne a correctness condition as part of the syntax for this new
primitive. Following RS, however, we will not explicitly deﬁne correctness of PSCs, as our aim will be to
achieve security even for channels that are not correct: in particular, when the SD is realized by an adversary.
We elaborate on the consequences of this choice in Appendix A, but note that this means we will not be
able to assume correctness in our security proofs.
4.2 Privacy
We recast the privacy notions of FGMP to address the multiplexing of plaintext streams and expose the
speciﬁcation details. Our PRIV-SR notion gives the adversary access to a pair of oracles. The Send oracle
allows the adversary to provide the sender with arbitrary message fragments and stream contexts, where
streams are distinguished by their context sc. Analogously, the Recv oracle allows the adversary to deliver
arbitrary ciphertext fragments to the receiver. We deﬁne a PRIV-S notion from this game by removing the
7
CH,(cid:96),b(A)
Exppriv-sr
1 declare str S, Env , bool sync
2 (Mu, Wr , Re, De) ←← Init ( )
3 sync ← 1
4 b(cid:48) ←← A1
5 return b(cid:48)
Send,Recv (var Env )
Send(M0, sc0, M1, sc1)
6 L0 ← leak ((cid:96), M0, sc0)
7 L1 ← leak ((cid:96), M1, sc1)
8 if L0 (cid:54)= L1 then return (⊥,⊥)
9 (X, H, α) ←← Mux SD (Mb, scb, var Mu)
10 (C, γ) ←← Write SD (X, H, α, var Wr )
11 S ← S (cid:107) C
12 return (C, γ)
Recv(C)
13 (Y, H, α) ←← Read SD (C, var Re)
14 (M, sc, γ) ←← Demux SD (Y, H, α, var De)
15 if sync and Y (cid:22) S then
S ← S % Y ; M, sc ← ⊥
17 else sync ← 0
18 return (M, sc, γ)
16
SD(I)
19 O ←← A2(I, var Env ); return O
leak ((cid:96), M, sc)
20 switch ((cid:96))
21
case lensc: return (cid:104)|M|, sc(cid:105)
case len: return (cid:104)|M|,|sc|(cid:105)
case none: return ε
22
23
Figure 2: The PRIV-SR notion of security for a partially-speciﬁed channel CH. The PRIV-SR notion is parameterized
by the permitted leakage (cid:96) ∈ {lensc, len, none}.
Recv oracle. In both notions, whenever a query to Send or Recv induces an SD-oracle call, that call is
serviced by the adversary.
Following prior work [7, 13, 19] we keep track of whether the channel is in-sync at any given moment dur-
ing the adversary’s attack. Loosely, the channel is said to be in-sync if the stream of ciphertext “consumed”
by the receiver, so far, is a preﬁx of the stream of ciphertext output by the sender. In order to avoid trivial
distinguishing attacks in the PRIV-SR game, it is necessary to suppress the message fragments output by
the receiver while the channel is in-sync.
Channel synchronization. We say the channel is in-sync as long as the ciphertext fragments Y output
by Read —which models receiver-side buﬀering and defragmentation—remains a preﬁx of the ciphertext
stream transmitted by the sender.
In this way, the sequence of Y ’s output by the reader constitute the
ciphertext stream “consumed” by the receiver (i.e., by Demux ) so far. This restricts the behavior of the
sender-side code in a way not seen in FGMP, but the restriction appears to be minor; a natural division
of labor is to have Read buﬀer the ciphertext stream and output ciphertexts that are ready to decrypt;