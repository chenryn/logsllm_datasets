# Microsoft Windows Win32k本地提权漏洞分析

## 一、漏洞信息

### 1. 漏洞简述
- **漏洞名称**：Microsoft Windows Win32k Local Privilege Escalation Vulnerability
- **漏洞编号**：CVE-2015-0057
- **漏洞类型**：Use-After-Free (UAF)
- **漏洞影响**：本地提权
- **CVSS3.0**：N/A
- **CVSS2.0**：7.2

### 2. 组件和漏洞概述
`win32k.sys` 是 Windows 的多用户管理内核模式驱动程序。该组件中存在的特权提升漏洞是由于不当处理内存中的对象引起的。攻击者成功利用此漏洞后，可以获得更高的特权并读取任意数量的内核内存。此外，攻击者还可能安装程序、查看、更改或删除数据，甚至创建具有完全管理员权限的新账户。

### 3. 影响版本
- Windows Server 2003 Service Pack 2
- Windows Server 2008 Service Pack 2
- Windows Server 2008 R2 Service Pack 1
- Windows Vista Service Pack 2
- Windows Server 2012
- Windows Server 2012 R2
- Windows 7 Service Pack 1
- Windows 8
- Windows 8.1
- Windows RT
- Windows RT 8.1

### 4. 解决方案
（此处可添加具体的修复措施或建议）

## 二、漏洞复现

### 1. 环境搭建
- **操作系统**：Windows 7 SP1 x86, Windows 8.1 x64
- **win32k.sys 版本**：6.1.7601.17514, 6.3.9600.17393

### 2. 复现过程
在指定版本的操作系统上运行特定的漏洞利用代码 (EXP)。

## 三、漏洞分析

### 1. 基本信息
- **漏洞文件**：`win32k.sys`
- **漏洞函数**：`xxxEnableWndSBArrows`
- **漏洞对象**：`tagWND`

### 2. 背景知识
- **tagSBINFO (tagWND + 0xB0)**：大小为 0x24，是本次 UAF 的目标。
- **tagPROPLIST (tagWND + 0xA8)**
- **tagPROP**
- **_LARGE_UNICODE_STRING (tagWND + 0xD8)**：通过 `RtlInitLargeUnicodeString` 函数初始化缓冲区，`NtUserDefSetText` 可以设置 `tagWND` 的 `strName` 字段，并实现桌面堆大小的任意分配。
- **tagMENU (tagWND + 0xB8, tagWND + 0xC0)**
- **_HEAP_ENTRY**：表示堆头，大小为 0x10，前 8 字节用于存储上一个堆块的数据。具体结构如下：
  ```c
  struct _HEAP_ENTRY {
      UINT64 PreviousBlockPrivateData;
      UINT16 Size;
      UCHAR Flags;
      UCHAR SmallTagIndex;
      UINT16 PreviousSize;
      UCHAR SegmentOffset;
      UCHAR LFHFlags;
      UCHAR UnusedBytes;
      UINT64 CompactHeader;
      // 其他字段...
  };
  ```

### 3. 补丁对比
使用 Bindiff 工具进行比较，补丁主要是在代码中增加了对 `rbx` 和 `rsi + 0xB0` 值的比较。反编译后的补丁对比显示，在第 43 行增加了一层判断，如果不满足条件，则会跳转到错误处理函数。

### 4. 漏洞分析

#### 漏洞利用流程
1. **堆喷射**：首先通过堆喷射将一段堆空间覆盖成大量 `tagWND + tagPROPLIST` 结构，其中一部分是 `tagWND + tagSBINFO`。
2. **用户态回调**：通过用户态回调 (`xxxDrawScrollBar`) 钩住 `_ClientLoadLibrary` 函数。释放自定义回调回来的 `tagWND`，并通过 `setPROP` 再次申请回来。此时，原来的 `tagSBINFO` 结构 (0x28 + 0x8) 变成了 `tagPROPLIST + tagPROP` 结构 (0x18 + 0x10 + 0x8)。
3. **写入操作**：后续系统对该空间进行写入操作，将 `cEntries` 从 0x2 改为 0xe，从而可以覆盖 (0xe - 0x2) * 0x10 大小的缓冲区。这实现了 UAF，通过原 `tagSBINFO` 的指针改变第一个字节，导致 `tagPROPLIST` 中的缓冲区溢出。
4. **覆盖堆头**：在原 `tagSBINFO` 现 `tagPROPLIST + tagPROP` 位置后面放入 `strNAME + tagMENU` 结构，通过覆盖堆头修改堆块大小标识符，将后面的 `tagMENU` 空间也覆盖入这个堆块。释放该堆块后，再次分配，造成另一次 UAF 漏洞。通过 `SetMenuItemInfoA` 函数修改 `rgItems` 字段实现任意写，内容指向 shellcode 的地址。最终覆盖整块空间再分配，通过 ROP 执行到 shellcode 地址，完成提权。

#### 静态分析
- 查看漏洞函数 `xxxEnableWndSBArrows`，可以通过 Windbg 的 `dt` 命令查看 `tagWND` 的结构体：
  ```c
  kd> dt win32k!tagWND
  +0x000 head : _THRDESKHEAD
  +0x028 state : Uint4B
  +0x028 bHasMenu : Pos 0, 1 Bit
  +0x028 bHasVerticalScrollbar : Pos 1, 1 Bit
  +0x028 bHasHorizontalScrollbar : Pos 2, 1 Bit
  +0x028 bHasCaption : Pos 3, 1 Bit
  +0x028 bSendSizeMoveMsgs : Pos 4, 1 Bit
  +0x028 bMsgBox : Pos 5, 1 Bit
  +0x028 bActiveFrame : Pos 6, 1 Bit
  +0x028 bHasSPB : Pos 7, 1 Bit
  +0x028 bNoNCPaint : Pos 8, 1 Bit
  +0x028 bSendEraseBackground : Pos 9, 1 Bit
  +0x028 bEraseBackground : Pos 10, 1 Bit
  +0x028 bSendNCPaint : Pos 11, 1 Bit
  +0x028 bInternalPaint : Pos 12, 1 Bit
  +0x028 bUpdateDirty : Pos 13, 1 Bit
  +0x028 bHiddenPopup : Pos 14, 1 Bit
  +0x028 bForceMenuDraw : Pos 15, 1 Bit
  +0x028 bDialogWindow : Pos 16, 1 Bit
  +0x028 bHasCreatestructName : Pos 17, 1 Bit
  +0x028 bServerSideWindowProc : Pos 18, 1 Bit
  +0x028 bAnsiWindowProc : Pos 19, 1 Bit
  +0x028 bBeingActivated : Pos 20, 1 Bit
  +0x028 bHasPalette : Pos 21, 1 Bit
  +0x028 bPaintNotProcessed : Pos 22, 1 Bit
  +0x028 bSyncPaintPending : Pos 23, 1 Bit
  +0x028 bRecievedQuerySuspendMsg : Pos 24, 1 Bit
  +0x028 bRecievedSuspendMsg : Pos 25, 1 Bit
  +0x028 bToggleTopmost : Pos 26, 1 Bit
  +0x028 bRedrawIfHung : Pos 27, 1 Bit
  +0x028 bRedrawFrameIfHung : Pos 28, 1 Bit
  +0x028 bAnsiCreator : Pos 29, 1 Bit
  +0x028 bMaximizesToMonitor : Pos 30, 1 Bit
  +0x028 bDestroyed : Pos 31, 1 Bit
  +0x02c state2 : Uint4B
  +0x02c bWMPaintSent : Pos 0, 1 Bit
  +0x02c bEndPaintInvalidate : Pos 1, 1 Bit
  +0x02c bStartPaint : Pos 2, 1 Bit
  +0x02c bOldUI : Pos 3, 1 Bit
  +0x02c bHasClientEdge : Pos 4, 1 Bit
  +0x02c bBottomMost : Pos 5, 1 Bit
  +0x02c bFullScreen : Pos 6, 1 Bit
  +0x02c bInDestroy : Pos 7, 1 Bit
  +0x02c bWin31Compat : Pos 8, 1 Bit
  +0x02c bWin40Compat : Pos 9, 1 Bit
  +0x02c bWin50Compat : Pos 10, 1 Bit
  +0x02c bMaximizeMonitorRegion : Pos 11, 1 Bit
  +0x02c bCloseButtonDown : Pos 12, 1 Bit
  +0x02c bMaximizeButtonDown : Pos 13, 1 Bit
  +0x02c bMinimizeButtonDown : Pos 14, 1 Bit
  +0x02c bHelpButtonDown : Pos 15, 1 Bit
  +0x02c bScrollBarLineUpBtnDown : Pos 16, 1 Bit
  +0x02c bScrollBarPageUpBtnDown : Pos 17, 1 Bit
  +0x02c bScrollBarPageDownBtnDown : Pos 18, 1 Bit
  +0x02c bScrollBarLineDownBtnDown : Pos 19, 1 Bit
  ```

通过这些详细的信息，可以更好地理解漏洞的原理和利用方法。