这时消息会慢慢累计起来而不会引起注意，直到客户来抱怨他们的订单没有被处理。
记住这些，现在该来看看如何构造健康检测程序来检测你的消费者是否停止消费了。
10.2确保消费者正常工作
到目前为止，我们主要关心的是确保RabbitMQ服务器正常运行，能够路由消
息，并且正确地集群。但是我们没有讨论过使用消息通信会造成一个缺点：监控消
费者会变得更加困难。让我们拿遛狗网站作为示例。该网站的关键部分是幕后持续
---
## Page 229
10.2确保消费者正常工作
207
运行的守护进程，用来处理由面向用户的Web应用记录的订单。如果没有使用消息
通信的话，你很有可能将订单处理守护进程设计为通过HTTP通信的服务器应用程
序。从客户收集订单信息之后，Web应用将会连接到订单处理应用监听的服务器端
口。一旦连上之后，就会开始传送订单。我们曾经讨论过，该方法最大的缺陷在于，
直到订单处理应用确认接管订单之后，通常是在订单处理完之后，We6应用才能返回，
然后继续接收下一个订单。前端Web应用和后端订单处理器两者之间的解耦带来的
好处要归功于消息通信的使用。但随之而来的问题是你如何监控订单处理器是否正
常运作。当对它们进行监控时，这些接收TCP连接的服务器类型应用易于监控。一
旦你将该应用转换为使用消息通信的话，就无法再连接到服务器应用的监听端口来
确认其是否启动并能够正常处理订单了。因为根本没有可以连接的端口！
别怕！即便订单处理应用使用的是消息通信，你仍然可以对其进行监控。你要
做的只是换一种思维模式。如果消费者无法消费消息和处理消息的话，那么随之而
来的副作用就是消息会在供应给消费者的那个队列上堆积起来。你也许还记得在本
书前几章，我们曾鼓励在编写消费者时，尽量等到处理完消息之后才对收到的消息
进行确认。我们之所以鼓励这样的处理方法的原因之一（除了确保消息不会去失之
外）是，如果消费者在处理消息的时候持续处于崩溃状态，那么这些消息会在队列
中累积起来，而健康检测程序就检测到并触发告警。因此，你可能已经猜到了，监
控消费者是否正确运作的方式就是通过监控队列的消息总数，并在总数超过设定的
warning或者critical国值时触发告警。
如同你之前编写的ping健康检测一样，你可以用两种方式来监控队列消息总数：
（1）使用AMQP的queue_declare（）命令，设置passive=True参数来重
新声明一个已存在的队列。当你在AMQP中声明一个队列时，如果将passive设
置为True的话，那么该命令返回的结果中将包含队列消息的总数。
（2）利用我们的老朋友RabbitManagementAPI来从队列上拉取数据统计，其中
就有队列当前的消息总数。
在学习了如何构建队列消息总数检测（以及每个方法的优势）的每个版本之后，
我们将要看到的是如何分析消息通信量来为应用程序使用的每个队列找出合适的
warning和critical国值。事不宜迟，让我们动手使用AMQP来监控队列中的消息总
数吧。
---
## Page 230
208
第10章监控
10.2.1通过AMQP监控队列等级
你可能会问自己一个问题：“为什么我们要用AMQP呢？使用API的话不是能
提供更多细节吗？”简而言之，的确如此。API提供一揽子的消息数据，包括等待
消费的消息总数，以及已经投递给消费者但尚未被确认的消息总数。使用AMQP来
监控消息总数的话，你只能得到队列中消息的聚合数据，对未消费以及未确认消息
没有做区分。但是如果你使用的是不支持Management插件的RabbitMQ早期版本，
或者由于技术/安全的原因你无法安装Management插件的话，那么使用AMQP来
监控消息总数就是你的唯一出路了。要么不去监控队列，要么使用基于AMQP的检
测程序来监控，二者选其一，如果应用程序可靠性对你来说至关重要的话，就没什
么好犹豫的了。
和之前编写的基于AMQPping健康检测相同的是，AMQP消息总数检测程序需
要在命令行上获取服务器地址、端口、虚拟主机和凭证作为参数。它需要额外的参数，
以便清楚需要监控哪个队列，以及基于怎样的国值来划分warning或者critical状态：
server,port=sys.argv[l].split(":")
vhost = sys.argv[2]
username = sys.argv[3]
password = sys.argv[4]
queue_name = sys.argv[5]
max_critical = int(sys.argv[6])
max_warn = int(sys.argv[7])
新的健康检测程序也会建立到Rabbit的连接，和AMQPping检测程序完全一样。
在连接上之后，它会为指定的队列发送channel.queue_declare来获取当前的
消息总数：
creds_broker = pika.PlainCredentials(username, password)
conn_params = pika.ConnectionParameters(server;
virtual_host = vhost,
credentials = creds_broker)
try:
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()
except socket.timeout:
print "Unknown:Could not connect to %s:es!"%（server,port）
exit(EXIT_UNKNOWN)
try:
response = channel.queue_declare(queue=queue_name,
passive=True)
---
## Page 231
10.2确保消费者正常工作
209
except pika.exceptions.AMQPChannelError:
print "cRITICAL: Queue &s does not exist." % queue_name
exit(EXIT_CRITICAL)
被监控队列的当前消息总数包含在response对象内。但在我们访问消息总数
之前，值得注意的是传递给queue_declare的passive=True参数。passive
参数告诉RabbitMQ你并不想真正声明队列，而是想知道队列是否存在。通过将
passive 设置为True，如果队列不存在的话，queue_declare 会引发异常；否则，
返回队列当前的消息总数。确认在方法调用时传递了passive参数这一点至关重
要。这不仅是返回队列消息总数的唯一方法；同时也是因为，如果没有传递该参数
的话，检测程序会真实地尝试声明该队列。在被动（passive）queue_declare操
作完成之后，你将获得包含消息总数的response对象。为了获取消息总数，你引
用了.method.message_count属性，如下列清单所示。
清单10.8amqp_queue_count_check.py：验证队列消息总数
if response.method.message_count >= max_critical:
消息总数超过
print"CRITICAL:Queue&smessagecount:%d"\
①了critical限制
(queue_name, response.method.message_count)
exit(EXIT_CRITICAL)
if response.method.message_count >= max_warn:
消息总数超过
print"wARN:Queue %s message count:d"%\
②了warning限制
(queue_name, response.method.message_count)
exit(EXIT_WARNING)
3连接OK，
”返回OK
print "oK: Queue %s message count: %d" %\
(queue_name, response.method.message_count)
exit(EXIT_OK)
由于属性message_count是整型，因此很容易将它与检测程序的消息总数
国值进行比较。如果message_count大于critical国值的话，那么就以ExIT_
CRITICAL状态码退出；如果它低于critical阈值但是高于warning阈值的话，那
么就以 EXIT_WARNING状态码退出。另一方面，如果message_count没有超
过critical和warning国值的话，那么设置状态码为EXIT_OK③并退出。除了设置
AMQP连接Rabbit的代码外，该健康检测程序其实很简单。
为了测试这段检测代码，首先你将使用在第8章介绍的RabbitManagementWeb
UI来创建名为my_queue的队列，如图10.2所示。
---
## Page 232
210
第10章监控
localhost:55672/mgmt/#/queue5
RabbitMQ
User: guest
Overview
Connections
Channels
Exchanges
Users
Virtual Hosts
Queues
All queues
noqueues
Add a new queue
Name:my_queuel
Durability:Durable
Auto delete:No
：
Arguments:
(7)
Add quel
单击此处创建队列
Last update: 2011-08-05 20:17:03
Updateevery5 seconds
图10.2创建my_queue
创建完队列之后，下一步你将单击ManagementWebUI上的Exhange选项卡，
然后在结果清单页上单击（AMQPdefault）。使用（AMQPdefault）交换器的
原因在于测试消息使用my_queue作为路由键，并发布到该交换器的话，消息会自
动路由到my_queue，而不用显式地设置绑定。在Management Web UI上的（AMQP
default）页面使用Publish message按钮，发布一条带有Anypayloadwilldo
内容、路由键为my_queue 的消息。在收到Messagepublished 通知之后，再一
次单击Publish message按钮将消息的第二份拷贝发送到my_queue中,如图10.3所示。
现在你应该在my_queue队列上有两条等待的消息，那么让我们运行健康检测
程序来看看是否能观测到消息：
$ python amqp_queue_count_check.py localhost:5672 / guest \
guest my_queue 4 3
OK: Queue my_queue message count: 2
$ echo $?
0
---
## Page 233
10.2确保消费者正常工作
211
bRabbitMQ
User: guest
Overview
Connections
Channeis
Queues
Users
Virtual Hosts
Exchange:(AMQP default)
Overview
Typedirect
Parameters
durable:true
Message rates
Bindings
Publish message
Routingkey:my_queue
Deliverymode:
1-Non-persistent
Headers: (?)
Properties: (?)
Payload:
uypaylo
do
Publishmessage
Last update:2011-08-05 20:25:57
Update
everySseconds
图10.3将测试消息发布到my_queue
你告诉健康检测程序判定四条（含）以上的消息为critical状态，同时三条（含）
以上为 warning 状态。因此，该检测程序返回 OK 状态，因为队列 my_queue 中只
有两条消息，一切正常。让我们更改critical和warming国值分别为三条和两条消息，
并重新运行：
$ python amqp_queue_count_check.py localhost:5672 / guest \
guest my_queue 3 2
WARN: Queue my_queue message count: 2
$ echo $?
1
---
## Page 234
212
第10章监控
现在，健康检测程序理所当然地返回warming状态，因为两条消息达到了队列
消息总数的warning阈值，但是尚未超过三条消息的critical阈值。如果再次减少
critical和warning国值为两条和一条消息的话，该检测程序应该返回critical状态：
$ python amqp_queue_count_check.py localhost:5672 / guest \
guest my_queue2 1
CRITICAL: Queue my_queue message count: 2
$ echo $?
2
只不过50行代码，你就拥有了监控任何队列的消息总数的方法，并且能够在
队列消息总数增长到危险级别之前就未雨绸缪。有时，消息总数达到了惊人的高度，
不是因为消费者崩溃了，而是可能由于消费者在成功处理消息之后没有对消息进行
确认。如果能够知道过高的消息总数是由于未消费（崩溃了的消费者还是未确认（有
bug的消费者）的话，岂不是帮助很大？虽然基于AMQP的检测无法给予你这类信
息，但是RabbitAPI却可以。让我们看看你如何创建一个更强大的消息总数检测程序，
通过使用RabbitManagementAPI来解决上述问题。
10.2.2使用RESTAPI来监控队列级别
当你通过API来构建健康检测程序监控队列配置的时候，你可能会记得／api/
queues//返回的配置信息中散落着各种数据统计信息。
在其中就有队列当前消息总数：
"messages_ready":0,
"messages_unacknowledged":0,
"messages":0,
不过由/api/queues//产生的输出并不仅仅告诉
你队列上的消息总数（messages），它同时还将聚合消息计数分解为未消费消息
（messages_ready）和未确认消息（messages_unacknowledged）。这些都是
很有用的信息。举例来说，假设由于在TheDogWhisperer上投放了广告之后，你的
遛狗订单应用几乎每天都有一波高峰。在这期间，订单队列上的消息增长了10倍。
如果使用AMQP健康检测程序的话，这势必会超过critical国值，同时每天都会触
发误报。另一方面，如果使用AP检测消息总数的话，你会看到这里10倍的增长
仅限于messages_ready（未消费消息）通过使用API创建新的消息计数检测程序，
---
## Page 235
10.2确保消费者正常工作
213
你能够为未消费消息设置更高的值，同时为未确认的消息维持较低的国值。这样