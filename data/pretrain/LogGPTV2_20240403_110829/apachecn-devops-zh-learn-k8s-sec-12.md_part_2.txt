        8888, 8899, 9332, 9999, 14433, 14444,
        45560, 45700
    ]
- list: miner_domains
  items: [
      "Asia1.ethpool.org","ca.minexmr.com", "monero.crypto-pool.fr",
      ...
      "xmr-jp1.nanopool.org","xmr-us-east1.nanopool.org",
      "xmr-us-west1.nanopool.org","xmr.crypto-pool.fr",
      "xmr.pool.minergate.com"
      ]
```
然后，有一个预定义的宏，用于连接到前面的矿工端口和矿工域:
```
- macro: minerpool_other
  condition: (fd.sport in (miner_ports) and fd.sip.name in (miner_domains))
```
除了`minerpool_other`宏之外，还有另外两个用于 HTTP 和 HTTPS 连接的宏，分别是`minerpool_http`和`minerpool_https`，它们结合起来得到了主要的检测逻辑:
```
- macro: net_miner_pool
  condition: (evt.type in (sendto, sendmsg) and evt.dir=< and (fd.net != "127.0.0.0/8" and not fd.snet in (rfc_1918_addresses)) and ((minerpool_http) or (minerpool_https) or (minerpool_other)))
```
然后`Detect outbound connections to common miner pool ports`规则使用`net_miner_pool`宏来检测到矿工域的出站连接:
```
# The rule is disabled by default.
# Note: Falco will send DNS requests to resolve miner pool domains which may trigger alerts in your environment.
- rule: Detect outbound connections to common miner pool ports
  desc: Miners typically connect to miner pools on common ports.
  condition: net_miner_pool and not trusted_images_query_miner_domain_dns
  enabled: true
  output: Outbound connection to IP/Port flagged by cryptoioc.ch (command=%proc.cmdline port=%fd.rport ip=%fd.rip container=%container.info image=%container.image.repository)
  priority: CRITICAL
  tags: [network, mitre_execution]
```
如果有一个加密挖掘进程正在运行并与列表中定义的矿工域通信，将触发警报，如下所示:
```
19:46:37.939287649: Critical Outbound connection to IP/Port flagged by cryptoioc.ch (command=minerd2 -a cryptonight -o stratum+tcp://monero.crypto-pool.fr:3333 -u 49TfoHGd6apXxNQTSHrMBq891vH6JiHmZHbz5Vx36nLRbz6WgcJunTtgcxno G6snKFeGhAJB5LjyAEnvhBgCs5MtEgML3LU -p x port=37110 ip=100.97.244.198 container=k8s.ns=insecure-nginx k8s.pod=insecure-nginx-8455b6d49c-z6wb9 container=07dce07d5100 image=kaizheh/victim) k8s.ns=insecure-nginx k8s.pod=insecure-nginx-8455b6d49c-z6wb9 container=07dce07d5100 k8s.ns=insecure-nginx k8s.pod=insecure-nginx-8455b6d49c-z6wb9 container=07dce07d5100
```
`Detect outbound connections to common miner pool ports`规则很简单。如果此规则生成了警报，您应该将其作为高优先级处理。规则的局限性也很明显；您必须保持挖掘域和挖掘端口的更新。如果有新的可用挖掘域或使用了新的挖掘服务器端口，并且它们没有添加到 Falco 列表中，则该规则将无法检测到加密挖掘活动。请注意，默认情况下，该规则是禁用的。由于 Falco 需要发送 DNS 请求来解析矿工池域，这些 DNS 请求会被一些云提供商提醒。附带说明的是，开源工具，如 Cilium 的哈勃，可以帮助监控网络流量。
另一种方法是使用白名单方法。如果您知道微服务出站连接中的目标端口或 IP 块，您可以创建 Falco 规则来提醒任何不在白名单上的出站连接的目标 IP 或端口。以下是一个例子:
```
- list: trusted_server_addresses
  items: [...]
- list: trusted_server_ports
  items: [...]
- rule: Detect anomalous outbound connections 
  desc: Detect anomalous outbound connections
  condition: (evt.type in (sendto, sendmsg) and container and evt.dir=< and (fd.net != "127.0.0.0/8" and not fd.snet in (trusted_server_addresses) or not fd.sport in (trusted_server_ports))) 
  output: Outbound connection to anomalous IP/Port(command=%proc.cmdline port=%fd.rport ip=%fd.rip container=%container.info image=%container.image.repository)
  priority: CRITICAL
```
上述规则警告任何到`trusted_server_ports`或`trusted_server_addresses`之外的 IP 地址或端口的出站连接。鉴于攻击发生在特斯拉，法尔科将提醒有一个异常的连接，即使 IP 地址看起来很正常。接下来，让我们看看另一个基于命令行中的模式来检测潜在的加密挖掘活动的 Falco 规则。
## 检测已启动的加密挖掘进程
地层挖掘协议是挖掘过程与挖掘服务器通信最常用的协议。某些挖掘二进制文件允许用户在执行时指定与挖掘池服务器通信的协议。
在 Falco 的默认规则中，有一个规则可以根据命令行中的关键字来检测加密二进制文件的执行情况:
```
- rule: Detect crypto miners using the Stratum protocol
  desc: Miners typically specify the mining pool to connect to with a URI that begins with 'stratum+tcp'
  condition: spawned_process and proc.cmdline contains "stratum+tcp"
  output: Possible miner running (command=%proc.cmdline container=%container.info image=%container.image.repository)
  priority: CRITICAL
  tags: [process, mitre_execution]
```
如果法尔科检测到任何使用`stratum+tcp`启动的进程，并且该进程的命令行中指定了`Detect crypto miners using the Stratum protocol`规则，则该规则将发出警报。输出如下所示:
```
19:46:37.779784798: Critical Possible miner running (command=minerd2 -a cryptonight -o stratum+tcp://monero.crypto-pool.fr:3333 -u 49TfoHGd6apXxNQTSHrMBq891vH6JiHmZHbz5Vx36 nLRbz6WgcJunTtgcxnoG6snKFeGhAJB5LjyAEnvhBgCs5MtEgML3LU -p x container=k8s.ns=insecure-nginx k8s.pod=insecure-nginx-8455b6d49c-z6wb9 container=07dce07d5100 image=kaizheh/victim) k8s.ns=insecure-nginx k8s.pod=insecure-nginx-8455b6d49c-z6wb9 container=07dce07d5100 k8s.ns=insecure-nginx k8s.pod=insecure-nginx-8455b6d49c-z6wb9 container=07dce07d5100
```
执行的`minerd2 -a cryptonight -o stratum+tcp://monero.crypto-pool.fr:3333 -u 49TfoHGd6apXxNQTSHrMBq891vH6JiHmZHbz5Vx36nLRbz6Wgc JunTtgcxnoG6snKFeGhAJB5LjyAEnvhBgCs5MtEgML3LU -p x`命令行包含`stratum+tcp`关键字。这就是警报被触发的原因。
与其他基于名称的检测规则一样，该规则的局限性显而易见。如果加密二进制执行不包含`stratum+tcp`，则规则不会被触发。
前面的规则使用黑名单方法。另一种方法是使用白名单方法，如果您知道将在微服务中运行的进程。您可以定义一个 Falco 规则，以便在启动任何不在受信任列表中的进程时发出警报。下面是一个例子:
```
- list: trusted_nginx_processes
  items: ["nginx"]
- rule: Detect Anomalous Process Launched in Nginx Container
  desc: Anomalous process launched inside container.
  condition: spawned_process and container and not proc.name in (trusted_nginx_processes) and image.repository.name="nginx"
  output: Anomalous process running in Nginx container (command=%proc.cmdline container=%container.info image=%container.image.repository)
  priority: CRITICAL
  tags: [process]
```
前面的规则将警告在`nginx`容器中启动的任何异常进程，包括加密挖掘进程。最后但同样重要的是，让我们看看映像扫描工具如何通过与 ma lware feed 服务集成来帮助检测加密挖掘二进制文件的存在。
## 检查二进制签名
加密挖掘二进制文件有时可以被识别为恶意软件。像传统的反病毒软件一样，我们也可以根据恶意软件的反馈来检查运行二进制文件的哈希值。借助映像扫描工具，如 Anchore，我们可以获得文件的哈希值:
```
root@anchore-cli:/# anchore-cli --json image content kaizheh/victim:nginx files | jq '.content | .[] | select(.filename=="/tmp/minerd2")'
{
  "filename": "/tmp/minerd2",
  "gid": 0,
  "linkdest": null,
  "mode": "00755",
  "sha256": "e86db6abf96f5851ee476eeb8c847cd73aebd0bd903827a362 c07389d71bc728",
  "size": 183048,
  "type": "file",
  "uid": 0
}
```
`/tmp/minerd2`文件的哈希值为`e86db6abf96f5851ee476eeb8c847 cd73aebd0bd903827a362c07389d71bc728`。然后，我们可以对照提供恶意软件馈送服务的 VirusTotal 检查哈希值: