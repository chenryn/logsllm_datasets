图4-2 集中式病毒扫描程序运行结果
参考提示 4.1.1节pyClamad模块方法说明参考
http://xael.org/norman/python/pyclamd/pyclamd.html。
4.2 实现高效的端口扫描器
如今互联网安全形势日趋严峻，给系统管理员带来很大的挑战，网络的开放
性以及黑客的攻击是造成网络不安全的主因。稍有疏忽将给黑客带来可乘之
机，给企业带来无法弥补的损失。比如由于系统管理员误操作，导致核心业务
服务器的22、21、3389、3306等高危端口暴露在互联网上，大大提高了被入侵的
风险。因此，定制一种规避此安全事故的机制已经迫在眉睫。本节主要讲述通
过Python的第三方模块python-nmap来实现高效的端口扫描，达到发现异常时可
以在第一时间发现并处理，将安全风险降到最低的目的。python-nmap模块作为
nmap命令的Python封装，可以让Python很方便地操作nmap扫描器，它可以帮助
管理员完成自动扫描任务和生成报告。
python-nmap模块的安装方法如下：
# yum -y install nmap #安装nmap工具
# 模块源码安装
# wget http：//xael.org/norman/python/python-nmap/python-nmap-0.1.4.tar.gz
# tar -zxvf python-nmap-0.1.4.tar.gz
# cd python-nmap-0.1.4
# python setup.py install
4.2.1 模块常用方法说明
本节介绍python-nmap模块的两个常用类，一个为PortScanner（）类，实现
一个nmap工具的端口扫描功能封装；另一个为PortScannerHostDict（）类，实现
存储与访问主机的扫描结果，下面介绍PortScanner（）类的一些常用方法。
·scan（self，hosts='127.0.0.1'，ports=None，arguments='-sV'）方法，实现指
定主机、端口、nmap命令行参数的扫描。参数hosts为字符串类型，表示扫描的
主机地址，格式可以用“scanme.nmap.org”、“198.116.0-255.1-127”、
“216.163.128.20/20”表示；参数ports为字符串类型，表示扫描的端口，可以
用“22，53，110，143-4564”来表示；参数arguments为字符串类型，表示nmap命
令行参数，格式为“-sU-sX-sC”，例如：
nm = nmap.PortScanner（）
nm.scan（'192.168.1.21-22'，'22，80'）
·command_line（self）方法，返回的扫描方法映射到具体nmap命令行，如：
>>> nm.command_line（）
u'nmap -oX - -p 22，80 -sV 192.168.1.21-22'
·scaninfo（self）方法，返回nmap扫描信息，格式为字典类型，如：
>>> nm.scaninfo（）
{u'tcp'： {'services'： u'22，80'， 'method'： u'syn'}}
·all_hosts（self）方法，返回nmap扫描的主机清单，格式为列表类型，如：
[u'192.168.1.21'， u'192.168.1.22']
以下介绍PortScannerHostDict（）类的一些常用方法。
·hostname（self）方法，返回扫描对象的主机名，如：
>>> nm['192.168.1.22'].hostname（）
u'SN2013-08-022'
·state（self）方法，返回扫描对象的状态，包括4种状态（up、down、
unknown、skipped），如：
>>> nm['192.168.1.22'].state（）
u'up'
·all_protocols（self）方法，返回扫描的协议，如：
>>> nm['192.168.1.22'].all_protocols（）
[u'tcp']
·all_tcp（）（self）方法，返回TCP协议扫描的端口，如：
>>> nm['192.168.1.22'].all_tcp（）
[22， 80]
·tcp（self，port）方法，返回扫描TCP协议port（端口）的信息，如：
>>> nm['192.168.1.22'].tcp（22）
{'state'： u'open'， 'reason'： u'syn-ack'， 'name'： u'ssh'}
4.2.2 实践：实现高效的端口扫描
本次实践通过python-nmap实现一个高效的端口扫描工具，与定时作业
crontab及邮件告警结合，可以很好地帮助我们及时发现异常开放的高危端口。
当然，该工具也可以作为业务服务端口的可用性探测，例如扫描192.168.1.20-25
网段Web服务端口80是否处于open状态。实践所采用的scan（）方法的arguments
参数指定为“-v-PE-p'+端口”，-v表示启用细节模式，可以返回非up状态主机清
单；-PE表示采用TCP同步扫描（TCP SYN）方式；-p指定扫描端口范围。程序
输出部分采用了三个for循环体，第一层遍历扫描主机，第二层为遍历协议，第
三层为遍历端口，最后输出主机状态。具体实现代码如下：
【/home/test/python-nmap/simple1.py】
#！/usr/bin/env python
# -*- coding： utf-8 -*-
import sys
import nmap
scan_row=[]
input_data = raw_input（'Please input hosts and port： '）
scan_row = input_data.split（" "）
if len（scan_row）！=2：
print "Input errors，example \"192.168.1.0/24 80，443，22\""
sys.exit（0）
hosts=scan_row[0] #接收用户输入的主机
port=scan_row[1] #接收用户输入的端口
try：
nm = nmap.PortScanner（） #创建端口扫描对象
except nmap.PortScannerError：
print（'Nmap not found'， sys.exc_info（）[0]）
sys.exit（0）
except：
print（"Unexpected error："， sys.exc_info（）[0]）
sys.exit（0）
try：
#调用扫描方法，参数指定扫描主机hosts，nmap扫描命令行参数arguments
nm.scan（hosts=hosts， arguments=' -v -sS -p '+port）
except Exception，e：
print "Scan erro："+str（e）
for host in nm.all_hosts（）： #遍历扫描主机
print（'----------------------------------------------------'）
print（'Host ： %s （%s）' % （host， nm[host].hostname（））） #输出主机及
主机名
print（'State ： %s' % nm[host].state（）） #输出主机状态，如up、down
for proto in nm[host].all_protocols（）： #遍历扫描协议，如tcp、udp
print（'----------'）
print（'Protocol ： %s' % proto） #输入协议名
lport = nm[host][proto].keys（） #获取协议的所有扫描端口
lport.sort（） #端口列表排序
for port in lport： #遍历端口及输出端口与状态
print（'port ： %s\tstate ： %s' % （port， nm[host][proto][port]
['state']））
其中主机输入支持所有表达方式，如www.qq.com、192.168.1.*、192.168.1.1-
20、192.168.1.0/24等，端口输入格式也非常灵活，如80，443，22、80，22-443。
代码运行结果如图4-3所示。
图4-3 指定IP段与端口的扫描结果
参考提示 4.2.1节Python-nmap模块方法与参数说明参考
http://xael.org/norman/python/python-nmap/。示例源码参考官方源码包中的
example.py。
第二部分 高级篇
·第5章 系统批量运维管理器pexpect详解
·第6章 系统批量运维管理器paramiko详解
·第7章 系统批量运维管理器Fabric详解
·第8章 从“零”开发一个轻量级WebServer
·第9章 集中化管理平台Ansible详解
·第10章 集中化管理平台Saltstack详解
·第11章 统一网络控制器Func详解
·第12章 Python大数据应用详解
第5章 系统批量运维管理器pexpect详解
pexpect可以理解成Linux下的expect的Python封装，通过pexpect我们可以实现
对ssh、ftp、passwd、telnet等命令行进行自动交互，而无需人工干涉来达到自动
化的目的。比如我们可以模拟一个FTP登录时的所有交互，包括输入主机地址、
用户名、密码、上传文件等，待出现异常我们还可以进行尝试自动处理。
pexpect的官网地址：http://pexpect.readthedocs.org/en/latest/，目前最高版本为
3.0。
5.1 pexpect的安装
pexpect作为Python的一个普通模块，支持pip、easy_install或源码安装方式，
具体安装命令如下（根据用户环境，自行选择pip或easy_install）：
pip install pexpect
easy_install pexpect
关于源码安装，笔者采用了GitHub平台的项目托管源，安装步骤如下：
#wget https：//github.com/pexpect/pexpect/releases/download/3.0/pexpect-
3.0.tar.gz -O pexpect-3.0.tar.gz
#tar –zxvf pexpect-3.0.tar.gz
#cd pexpect-3.0
#python setup.py install
校验安装结果，导入模块没有提示异常则说明安装成功：
# python
Python 2.6.6 （r266：84292， Jul 10 2013， 22：48：45）
[GCC 4.4.7 20120313 （Red Hat 4.4.7-3）] on linux2
Type "help"， "copyright"， "credits" or "license" for more information.
>>> import pexpect
>>>
一个简单实现SSH自动登录的示例如下：
import pexpect
child = pexpect.spawn（'scp foo PI:EMAIL：.'） #spawn启动scp程序
child.expect（'Password：'） #expect方法等待子程序产生的输出，判断是否匹配定义的字符串
#'Password：'
child.sendline（mypassword） #匹配后则发送密码串进行回应
5.2 pexpect的核心组件
下面介绍pexpect的几个核心组件包括spawn类、run函数及派生类pxssh等的
定义及使用方法。
5.2.1 spawn类
spawn是pexpect的主要类接口，功能是启动和控制子应用程序，以下是它的
构造函数定义：
class pexpect.spawn（command， args=
[]， timeout=30， maxread=2000， searchwindowsize=None， logfile=None， cwd=None， env=None， ignore_sighup=True）
其中command参数可以是任意已知的系统命令，比如：
child = pexpect.spawn（'/usr/bin/ftp'） #启动ftp客户端命令
child = pexpect.spawn（'/usr/bin/ssh PI:EMAIL'） #启动ssh远程连接命令
child = pexpect.spawn（'ls -latr /tmp'） #运行ls显示/tmp目录内容命令
当子程序需要参数时，还可以使用Python列表来代替参数项，如：
child = pexpect.spawn （'/usr/bin/ftp'， []）
child = pexpect.spawn （'/usr/bin/ssh'， ['PI:EMAIL']）
child = pexpect.spawn （'ls'， ['-latr'， '/tmp']）
参数timeout为等待结果的超时时间；参数maxread为pexpect从终端控制台一
次读取的最大字节数，searchwindowsize参数为匹配缓冲区字符串的位置，默认
是从开始位置匹配。
需要注意的是，pexpect不会解析shell命令当中的元字符，包括重定向“>”、
管道“|”或通配符“*”，当然，我们可以通过一个技巧来解决这个问题，将存在这
三个特殊元字符的命令作为/bin/bash的参数进行调用，例如：
child = pexpect.spawn（'/bin/bash -c "ls -l | grep LOG > logs.txt"'）
child.expect（pexpect.EOF）
我们可以通过将命令的参数以Python列表的形式进行替换，从而使我们的语
法变成更加清晰，下面的代码等价于上面的。
shell_cmd = 'ls -l | grep LOG > logs.txt'
child = pexpect.spawn（'/bin/bash'， ['-c'， shell_cmd]）
child.expect（pexpect.EOF）
有时候调试代码时，希望获取pexpect的输入与输出信息，以便了解匹配的情
况。pexpect提供了两种途径，一种为写到日志文件，另一种为输出到标准输
出。写到日志文件的实现方法如下：
child = pexpect.spawn（'some_command'）
fout = file（'mylog.txt'，'w'）
child.logfile = fout
输出到标准输出的方法如下：
child = pexpect.spawn（'some_command'）
child.logfile = sys.stdout
下面为一个完整的示例，实现远程SSH登录，登录成功后显示/home目录文
件清单，并通过日志文件记录所有的输入与输出。
import pexpect
import sys
child = pexpect.spawn（'ssh PI:EMAIL'）
fout = file（'mylog.txt'，'w'）
child.logfile = fout
#child.logfile = sys.stdout
child.expect（"password："）
child.sendline（"U3497DT32t"）
child.expect（'#'）
child.sendline（'ls /home'）
child.expect（'#'）
以下为mylog.txt日志内容，可以看到pexpect产生的全部输入与输出信息。
# cat mylog.txt
PI:EMAIL's password： U3497DT32t
Last login： Tue Jan 7 23：05：30 2014 from 192.168.1.20
[root@SN2013-08-021 ~]# ls /home
ls /home
cc.py poster-0.8.1 tarfile.tar.gz zipfile.zip
default.tar.gz poster-0.8.1.tar.gz test.sh
dev pypa-setuptools-c508be8585ab zipfile1.zip
（1）expect方法
expect定义了一个子程序输出的匹配规则。
方法定义：expect（pattern，timeout=–1，searchwindowsize=–1）
其中，参数pattern表示字符串、pexpect.EOF（指向缓冲区尾部，无匹配
项）、pexpect.TIMEOUT（匹配等待超时）、正则表达式或者前面四种类型组成
的列表（List），当pattern为一个列表时，且不止一个表列元素被匹配，则返回
的结果是子程序输出最先出现的那个元素，或者是列表最左边的元素（最小索
引ID），如：
import pexpect
child = pexpect.spawn（"echo 'foobar'"）
print child.expect（['bar'， 'foo'， 'foobar']）
输出：1，即'foo'被匹配
参数timeout指定等待匹配结果的超时时间，单位为秒。当超时被触发
时，expect将匹配到pexpect.TIMEOUT；参数searchwindowsize为匹配缓冲区字符
串的位置，默认是从开始位置匹配。
当pexpect.EOF、pexpect.TIMEOUT作为expect的列表参数时，匹配时将返回
所处列表中的索引ID，例如：
index = p.expect（['good'， 'bad'， pexpect.EOF， pexpect.TIMEOUT]）
if index == 0：
do_something（）
elif index == 1：
do_something_else（）
elif index == 2：
do_some_other_thing（）
elif index == 3：
do_something_completely_different（）
以上代码等价于
try：
index = p.expect（['good'， 'bad']）
if index == 0：
do_something（）
elif index == 1：
do_something_else（）
except EOF：
do_some_other_thing（）
except TIMEOUT：