# Breaking the Chrome Sandbox with Mojo

### _tsuro@, 2022
**No memory was corrupted in the making of this presentation.**

## Overview
This presentation discusses a method to break the Chrome sandbox by exploiting the Mojo IPC (Inter-Process Communication) system. The focus is on the interaction between the browser process, renderer processes, and network services.

## Components
- **Kernel**: Manages system-level operations.
- **Browser Process**: Central process that manages the overall state of the browser.
- **Renderer Processes**: Handle rendering web pages.
- **Network Service**: Handles network requests and responses.

## Architecture
- **Browser Process**
  - Manages `RendererHost`, `BlobRegistry`, and `GpuHost`.
- **Renderer Processes**
  - Communicate with the `Browser Process` via `URLLoader`, `NetworkService`, and `NetworkContext`.
- **Network Service**
  - Manages network connections and handles `URLLoader` requests.

## Ports and Messages
- **Ports**: Communication channels between processes.
  - Example: `Port X`, `Port Y`, `Port Z`, `Port A`, `Port B`, `Port C`.
- **Messages**: Data exchanged between ports.
  - Example: `REQUEST_INTRODUCTION`, `INTRODUCE`, `BROADCAST_EVENT`, `ACCEPT_INVITATION`.

## Exploitation Steps
1. **Leak Port Name**
   - Leaking the name of a port can be a critical vulnerability.
2. **Spoof Message**
   - Send a spoofed message to the leaked port.
3. **Trigger Race Condition**
   - Exploit the race condition between the leak and the deletion of the peer node.

## Detailed Exploitation
1. **Leak Port Name**
   - Identify and leak the name of a critical port.
2. **Send Spoofed Message**
   - Craft and send a message to the leaked port.
3. **Handle Race Conditions**
   - Ensure the message is processed before the peer node is deleted.
   - Manage the race condition between the leak and the deletion of the peer node.

### Example Scenario
- **Browser Process**
  - Deletes the peer node.
  - Reuses the node name.
  - Destroys all ports with the peer.
- **Network Process**
  - Handles `OnError` events.
  - Sends `PortClosed` events.
  - Terminates child processes (`ChildProcessHost: kill(child)`).

### Issues
- **Tight Race Between Leak and Kill**
  - Ensuring the message is sent before the peer node is deleted.
- **Network Process Exit**
  - The network process may exit, complicating the exploitation.

## Mitigation
- **Target-Specific Knowledge**
  - Understanding the specific behavior and vulnerabilities of the target system.
- **Fuzzer-Resistant Bugs**
  - Find and exploit bugs that fuzzers are unlikely to trigger.
- **Turning Impossible Bugs Exploitable**
  - Use creative techniques to make seemingly impossible bugs exploitable.

## Conclusion
- **Takeaway**
  - Target-specific knowledge is crucial for successful exploitation.
  - Focus on finding and exploiting bugs that are not easily detected by automated tools.
  - Creative problem-solving can turn complex issues into exploitable vulnerabilities.

**Got stuck? Watch Hackers!**