电子邮件和其他系统。IAST 使用这个信息识别出架构缺陷和安全缺陷；
（8）配置
IAST 能访问应用、框架、应用服务器、和平台的配置，保证正确的安全配置。IAST 甚至
能查询应用组件的运行时配置，如 XML 解析器。注意某些平台，如 .NET，重度依赖配置来
实现安全；
基于 IAST 技术的特点，可以在以下场景使用：
（1）开发测试阶段及早发现漏洞
基于交互式应用安全测试的特点，可以在软件开发测试过程中，使用该技术及时发现源
代码或 API 中存在的漏洞，在开发过程早期就进行修复，其检测速度、精确度、流程上都比
传统的静态安全分析技术和动态应用安全测试技术有优势。
（2）运营阶段持续检测和阻止漏洞利用
由于其持续检测的特性，可以识别出之前未发现的漏洞，如 0 Day 漏洞、新发布的漏洞等；
基于其在应用程序内部插桩的实现方式，当检测到威胁时，可以自定义应急响应策略，如终
止用户会话、关闭应用程序、警告安全人员等方式，来阻止攻击。
软件供应链安全技术白皮书
053
当前某些交互式应用安全测试产品还具有软件组成分析的能力。基于其在应用程序内部
插桩的实现方式，采集应用程序运行过程中动态加载的第三方组件及依赖，自动化构建软件
物料清单（SBOM），传递给组件漏洞分析引擎，检测依赖组件存在的安全风险，从而避免
供应链上游软件被不安全的底层依赖所污染。
4.2.5 模糊测试 (FUZZ)
对于软件产品而言，健壮性是一个很重要的指标。尤其是在一些关键基础设施领域，
如医疗保健、电力、通信、金融等，软件产品的故障可能导致灾难性的事件或大规模的数
据泄露，甚至造成人身伤害或环境的破坏。故障本身的不可预见性，也很可能导致一些故
障如系统信息被泄露，从而被攻击者进一步利用。模糊测试是一种评估软件健壮性和安全
性的强大技术，其核心原理是将非预期的数据输入目标系统，查看目标系统是否发生故障，
如崩溃、无限循环、资源泄漏或短缺、意外行为等，并提供故障原因及修复建议，以便用
户进行修复。
模糊测试一般包括测试用例生成、测试用例输入、测试结果验证三个阶段
[28]。
（1）测试用例生成
每一个非预期的数据都是一个测试用例，理论上非预期数据是无限的，测试用例生成的
目标是如何设计出最有可能在目标系统中触发故障的测试用例，从本质上讲，测试用例应该
接近目标的期望输入，测试用例的质量对模糊测试的有效性至关重要。常用的测试用例生成
技术包括随机生成和基于模板生成两种：
● 
随机生成
最简单也是效率最低的生成技术。简单地使用随机数据作为测试用例。随机模糊测试通
常是无效的，因为测试用例与有效输入完全不同。目标系统检查并迅速拒绝测试用例。在大
多数情况下，测试用例无法渗透到目标代码中。
● 
基于模板生成
以有效数据作为模板，进行变异以创建测试用例。一般来说，模板测试用例比随机测试
用例更有效，因为它们大多是正确的。目标软件系统将处理测试用例，可以用来检验目标系
统处理非预期输入的能力。
[28] what is fuzz
054
软件供应链安全关键技术
（2）测试用例输入
根据目标系统或测试类型的不同，可以分为针对网络协议、文件、API、用户界面的模糊
测试等，不同的模糊测试类型，测试用例输入方式不同。如针对网络协议的，需要和网络服
务端或客户端建立端对端的连接，将测试用例传递给接收者；针对用户界面的，需要模拟鼠
标或键盘点击用户界面的操作等。大多数现代操作系统和编程环境都提供了一种编程方式来
传递输入，以便通过软件自动化地传递测试数据。
（3）测试结果验证
失败类型一般包括崩溃、无限循环、资源泄漏或短缺、意外行为几种，通常采用人工观
察或模糊测试工具自动判定两种方式。 
模糊测试可用于在软件供应链的开发和交付阶段，检测未知的漏洞。在开发阶段，可以
对源代码进行模糊测试，在早期快速地定位和解决漏洞；在软件交付运行阶段，可用来验证
软件的健壮性和可靠性。
近年来，由于开源组件、软件代码恶意注入引起的供应链安全事件层出不穷，供应链安
全检测技术以软件开发生命周期为主线，致力于解决各阶段存在的安全问题。
4.3 软件供应链数据安全技术
Garnter 公司在 2021 年供应链安全风险报告
[29] 中提到，机密或敏感信息的泄露是导致软
件供应链风险的另外一个主要问题。黑客通过窃取源代码、构建日志、基础设施等中存在的
硬编码凭证，如 API 密钥、加密密钥、令牌、密码等，或者通过泄露的 SBOM（软件物料清单）、
源代码，寻找其中存在的漏洞，对目标系统发起攻击，极大增加了安全风险。因此，这些敏
感信息在应用和管理过程中进行数据安全保护，针对不同场景可采用安全多方计算（MPC）
和零知识证明（ZKP）和可信执行环境（TEE）等安全技术。
软件供应链全生命周期内离不开上下游企业的数据协作，如 SBOM（软件物料清单）的
生成及维护阶段需要软件开发企业提供数据支持（软件成分清单及源代码）、软件供应链安
全检测阶段需要第三方安全企业 / 组织提供最新的漏洞数据支持等。由于此类数据属于各上
下游企业核心资产，并事关最终用户软件安全，一旦泄露将极大增加最终用户遭受黑客攻击
的风险，具有一定的敏感性。因此，上下游企业之间很难直接对接这些敏感数据。此时，需
要相应的数据安全技术，以便管理和保障这些敏感数据的对接和使用。针对不同场景，可采
[29] How Software Engineering Leaders Can Mitigate Software Supply Chain Security Risks
软件供应链安全技术白皮书
055
用安全多方计算（MPC）、零知识证明（ZKP）或可信执行环境（TEE）等数据安全技术予
以解决。
(1) 安全多方计算
安全多方计算（Secure Multi-party Computation，MPC），是一种基于密码学技术实现
的无需可信第三方的分布式计算协议与机制。具体地说，即在一个分布式的环境中，各参与
方在互不信任的情况下通过密码学协议进行协同计算，输出计算结果，并保证任何一方均无
法得到除应得的计算结果之外的其他任何信息（包括输入和计算过程的状态等信息）。MPC
模型如图 5-1 所示，它解决了不信任环境下多个参与方联合计算一个函数的问题。
图 4.12 安全多方计算模型
实现多方安全计算协议主要有基于混淆电路（Garbled Circuit，GC）、秘密分享（Secret 
Sharing，SS）和同态加密（Homomorphic Encryption，HE）等密码学的实现方式。根据支
持的计算任务 MPC 可分为通用 MPC 和专用 MPC：前者理论上可支持任何计算任务，具有
完备性；而后者特定计算任务需设计特定的 MPC 协议，如安全比较协议支持参与方无法获
知对方准确输入情况最后得到比较结果，隐私求交协议（Private Set Intersection，PSI）支
持参与双方仅能获取双方数据集的交集信息，而其他信息无法获取，隐私信息检索协议（Private 
information retrieval，PIR）支持检索方匿名匹配获取被检索方相关信息，而被检索方无法得
知检索方的查找条件和返回结果等。在实际应用中，由于通用 MPC 协议实现计算复杂度高，
而专用 MPC 协议效率较快，因此通常采用专用 MPC 协议实现。
基于 MPC 的隐私保护特性，它可以应用于软件供应链漏洞信息查询场景中。在传统的漏
洞查询场景，查询方向漏洞管理方提交软件名称和版本号，漏洞管理方将其与漏洞库进行匹
配和关联，从而返回漏洞信息；在软件供应链场景中，客户（查询方）希望了解自身的软件
产品以及相关的开源组件、引用库等中是否包含漏洞信息，客户不希望向漏洞管理方暴露这
些敏感信息，即可以看成 SBOM 信息，但希望自身能获取该产品是否包含漏洞，以及包含哪
些漏洞等信息。基于 PIR 协议，在客户端可对软件名称进行加密，将此加密软件名称提交给
056
软件供应链安全关键技术
服务端，它将其先对漏洞库进行加密处理，然后进行匿名匹配与检索，另外通过安全比较协议，
类似的原理可对软件版本号进行漏洞库进行比较，最终实现软件供应链产品的漏洞查询以及
数据的隐私保护。
(2) 零知识证明
零知识证明 (Zero-Knowledge Proof， ZKP)，也是一种基于密码学的安全技术，可应用
在身份认证、数据验证场景中。它指的是证明者（Prover， P）能够在不向验证者（Verifier， 
V）提供任何有效信息情形下，使得验证者相信他们拥有某一个信息 X，但在此过程中没有泄
露任何关于 X 的其他信息。实质上，ZKP 是一种涉及两方或多方的安全协议，即两方或多方
完成一项任务所需采取的一系列步骤。
根据零知识证明的定义，可归纳出 ZKP 有以下性质
[30]：(1) 正确性。P 无法欺骗 V。换言
之，若 P 不知道一个定理的证明方法，则 P 使 V 相信他会证明定理的概率很低。(2) 完备性。
V 无法欺骗 P。若 P 知道一个定理的证明方法，则 P 使 V 以绝对优势的概率相信他能证明。(3) 
零知识性。V 无法获取其他任何额外的知识。
零知识证明可以在区块链与数字货币系统实现身份认证或交易验证过程中，确保交易双
方的身份匿名化和隐私保护。同理，结合 ZKP 技术，可确保 SBOM、漏洞数据等敏感信息在
使用过程的数据安全。例如，在软件供应链安全监管场景中，监管方希望查看安装的软件的
SBOM 数据是否包含通报修复的软件版本。那么，通过结合零知识证明技术，监管方既得到
正确的结果（是或者否），同时也完全保护了软件安装厂商的敏感信息。
(3) 可信执行环境
可信执行环境（Trusted Execution Environment，TEE）是基于硬件隔离机制构建的一个
安全隔离区域，可保证在安全区域内部加载的代码和数据在机密性和完整性方面得到保护。
它将系统的硬件和软件资源划分为两个执行环境，分别是可信执行环境和普通执行环境（Rich 
Execution Environment， REE），两者是安全隔离的，分别有独立的计算和存储空间。REE
环境的应用程序无法访问 TEE，即使在 TEE 内部，各个应用程序的运行也是相互独立的，不
能未经授权的情况下相互访问。当外部的应用程序想要访问 TEE 时，需要对该应用程序或用
户身份进行验证，只有通过验证的应用程序才能进入，从而为 TEE 内部运行的代码和数据提
供了机密性和完整性保护。
[30] 曹天杰，张永平，汪楚娇．安全协议：北京邮电大学出版社，2009 年 08 月
软件供应链安全技术白皮书
057
当前业界主流的 TEE 技术路线包括 Intel SGX、AMD SEV 和 ARM TrustZone，以及国产
芯片鲲鹏处理器。其中，Intel SGX 适用于 PC 机和服务器，它仅支持最大构造 128M 的安全
区域；而 AMD SEV 仅适用于服务器，但它可以覆盖整个虚拟机的内存，即安全区域足够大；
ARM TrustZone 多用于适用于移动设备中。
与基于密码学的 MPC 和 ZKP 相比，TEE 的安全性来源于硬件隔离的安全能力，避免基
于密码算法及协议大量复杂计算和交互过程，从而避免了额外的计算开销和通信开销。因此，
在需要保护大量数据或性能要求高的计算场景中，可使用 TEE 技术进行安全防护。比如在软
件供应链的源代码和数据保护中，为了防止运行过程中被篡改和非法访问，可将源代码和数
据迁移至 TEE 中，实现安全等级高的数据安全防护。
5
软件供应链安全解决方案
软件供应链安全技术白皮书
059
5.1 供应链安全监督
在企业业务发展及能力生态的建设中，由于涉及到众多的供应链主体，为避免供应链