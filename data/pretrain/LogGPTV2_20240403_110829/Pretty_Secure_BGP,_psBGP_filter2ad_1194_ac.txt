ble for carrying out some level of due diligence ofﬂine:
for the safety of that AS and of the whole Internet, to
determine what IP preﬁxes are delegated to each of its
peers. We suggest the effort required for this is both
justiﬁable and practical, since two peering ASes usually
have a business relationship (e.g., a trafﬁc agreement)
with each other, allowing ofﬂine direct interactions. For
example, si may ask each of its peer sj to show the proof
that fj is in fact owned by sj. Publicly available infor-
mation about IP address delegation may also be helpful.
Two assertions (fi, si), (f(cid:1)
) made by two ASes are
comparable if they assert the preﬁx ownership of a given
AS, i.e., si = s(cid:1)
i and the asserted preﬁxes are non-
(cid:7)= φ; and are incomparable otherwise,
empty, i.e., fi, f(cid:1)
i.e., they assert the preﬁx ownership of different ASes or
one of the asserted preﬁxes is an empty set. Two com-
parable assertions (fi, si) and (f (cid:1)
, si) are consistent if
fi = f(cid:1)
Let n be the number of si’s peers. (fi, si) is k-proper
if there exist some ﬁxed number k (2 ≤ k ≤ n + 1)
of consistent assertions of (fi, si) made by si or si’s
peers. Requiring k = n + 1 means that the assertion
(fi, si) made by si and all of its peers must be consis-
tent for (fi, si) to be k-proper; this provides maximum
conﬁdence in the correctness of (f i, si) if the condi-
tion is met. However, it is subject to attacks by a sin-
gle misbehaving AS. For example, if ∃s j ∈ peer(si),
and sj makes a false assertion (f sj
, si) inconsistent with
(f si
, si) will not be veriﬁed as k-proper,
i
although it might indeed be proper. From the perspective
of assertion list management, the greater k is, the larger
preﬁx assertion lists will grow, and the more updates of
preﬁx assertion lists will be required since a change to
an AS number si or a preﬁx fi requires the update of
all PALs making an assertion about si or fi. Moreover,
i; and are inconsistent if fi (cid:7)= f(cid:1)
i.
, si), then (f si
i
i
i
i
i
i
i
i
there are a large number of ASes which might have only
one peer. For example, as of August 1, 2004, there
were 6619 ASes which have only one peer based on
one BGP routing table collected from the RouteViews
project [29]. Requiring k ≥ 3 will prevent these ASes
from originating authorized preﬁxes.
To begin with, we suggest k = 2 in psBGP, i.e.,
, si) is proper if there exists any single sj ∈
(f si
i
peer(si) such that sj make an assertion (f sj
, si) which
is consistent with (f si
, si),
an AS checks its consistency with the preﬁx assertion
related to si made by each of si’s peers until a consis-
tent one is found, or no consistent assertion is found af-
ter all relevant assertions made by si’s peers have been
, si) is veriﬁed as
checked.
proper; in the latter case, it is veriﬁed as improper. For
simplicity, the consistency among the preﬁx assertions
related to si made by si’s peers amongst themselves is
not checked. A non-aggregated route (f, [s i, . . . ]) origi-
nated by si is veriﬁed as proper if (f si
, si) is proper and
f ⊆ f si
i .
, si). When verifying (f si
In the former case, (f si
, sj), (f sj
We now discuss how psBGP reacts to erroneous preﬁx
assertions (e.g., resulting from human errors, lack of due
diligence, or collusion). An AS si erroneously asserting
the ownership of a preﬁx will not result in service dis-
ruption of the legitimate owner of that preﬁx as long as
none of si’s asserting peers endorses its assertion. si er-
roneously asserting the preﬁx ownership of a peer s j will
not result in service disruption of s j if there exists an-
other peer of sj which correctly asserts sj’s preﬁx own-
ership. If si is the only asserting peer for sj, or more
generally, ∀si ∈ peer(sj), si issues (f si
, sj) inconsis-
, sj) will be veriﬁed as improper
tent with (f sj
by other ASes, even if it might be actually proper. This
is the case when misbehaving ASes form a network cut
from sj to any part of the network. It appears difﬁcult, if
not impossible, to counter such an attack; however, we
note that even if such a denial of service attack could
be prevented, many other techniques beyond the control
of BGP can also be used to deny the routing service of
sj, e.g., link-cuts [6], ﬁltering, or packet dropping. Note
that a preﬁx assertion made by si about a remote AS sk,
i.e., si /∈ peer(sk), will not be checked when sk’s own
preﬁx assertion is veriﬁed. Thus, a misbehaving AS is
unable to mislead other ASes about the preﬁx ownership
of a non-peering AS.
j
j
j
psBGP assumes that no two ASes are in collusion.
Two ASes si and sj are to be in collusion if they as-
sert being a peer of each other, s i erroneously asserts
the ownership of a preﬁx, and s j endorses si’s erroneous
preﬁx assertion. If si and sj are owned and managed by
two different organizations, it is very likely that uncoor-
dinated erroneous assertions by s i and sj will be incon-
sistent. Here we discuss two cases where the assumption
of no collusion may not hold: 1) s i and sj are owned by
a common organization; and 2) s i and sj are owned by
two different organizations which are controlled by the
same attacker. In case 1), a multi-AS organization might
use a single centralized database to generate router con-
ﬁgurations for all of its owned ASes. Thus, it is possible
that preﬁx assertion lists for two peering ASes owned by
a common organization are also created from a single
centralized database. If a preﬁx is erroneously entered
into such a database, it might end up with two erroneous
yet consistent preﬁx assertion lists. We recommend that
an AS should obtain preﬁx assertion endorsement from
another AS owned by a different organization. As a local
policy, an AS might mandate to not trust a preﬁx asser-
tion by AS si if it is not endorsed by an AS sj where si
and sj are owned by different organizations. To facili-
tate the distribution of the knowledge of AS ownership
by a multi-AS organization, psBGP makes use of a new
certiﬁcate, namely MultiASCert, which binds a list of
ASes owned by a common organization to the name of
that organization, and is signed by an RIR. Preﬁx as-
sertions by two ASes owned by a common organization
(i.e., appearing on a MultiASCert) might not be accepted
even if they are consistent. In this way, human errors by
a multi-AS organization will not result in service disrup-
tion in psBGP. In case 2), if an attacker could set up two
organizations and manage to obtain an AS number from
an RIR for each of them, the psBGP security, even with
MultiASCerts, can be defeated.
3.4.2. Veriﬁcation of Aggregated Preﬁxes
Suppose si owns IP preﬁx fi. When receiving a set of
routes with a set of preﬁxes F = {fj}, the BGP speci-
ﬁcation [35] allows si to aggregate F into a preﬁx fg to
reduce routing information to be stored and transmitted.
We call fj a preﬁx to be aggregated, and f g an aggre-
gated preﬁx. si can aggregate F into fg if one of the
following conditions holds: 1) ∀f j ⊆ fg, fj ⊆ fi; or 2)
∀fj ⊆ fg, fj ⊆ F ∪ fi.
In case 1), si must own fi which is a superset of the
aggregated preﬁx fg. Most likely, fi will be the aggre-
gated preﬁx, i.e., fg = fi. This type of aggregation is
sometimes referred to as preﬁx re-origination. From a
routing perspective, preﬁx re-origination does not have
any effect since trafﬁc destined to a more speciﬁc preﬁx
will be forwarded to the re-originating AS and then be
forwarded to the ultimate destination from there. From
a policy enforcement perspective, preﬁx re-origination
does have an effect since the AS PATH of an aggre-
gated route is different from any of the AS PATHs of
the routes to be aggregated. Since AS PATH is used by
the route selection process, changing AS PATH has an
impact on route selections. From a security perspective,
preﬁx re-origination is no different than normal preﬁx
origination since the aggregated preﬁx is either the same
as, or a subset of, the preﬁx owned by the aggregating
AS. Therefore, the aggregated route f g can be veriﬁed
by cross-checking the consistency of s i’s preﬁx asser-
tion list with those of its peers (§3.4.1).
In case 2), si does not own the whole address space of
the aggregated preﬁx fg. Therefore, fg cannot be ver-
iﬁed in the same way as for preﬁx re-origination. To
facilitate veriﬁcation of the propriety of route aggrega-
tion by a receiving AS, psBGP requires that the routes to
be aggregated be supplied by the aggregating AS along
with the aggregated route. This approach is essentially
similar to that taken by S-BGP. Transmission of routes
to be aggregated incurs additional network overhead,
which is something BGP tries to reduce. However, we
view such additional overhead to be relatively insigniﬁ-
cant given that modern communication networks gener-
ally have high bandwidth and BGP control messages ac-
count for only a small fraction of subscriber trafﬁc. The
main purpose of route aggregation is to reduce the size
of routing tables, i.e., reducing storage requirements;
note that this is preserved by psBGP.
3.5. Veriﬁcation of AS PATH in psBGP
There is no consensus on the deﬁnition of “AS PATH
security”, and different security solutions of BGP deﬁne
it differently.
In S-BGP, the security of an AS PATH
is interpreted as follows: for every pair of ASes on the
path, the ﬁrst AS authorizes the second to further ad-
vertise the preﬁx associated with this path. In soBGP,
AS PATH security is deﬁned as the plausibility of an
AS PATH, i.e., if an AS PATH factually exists on the AS
graph (whether or not that path was actually traversed by
an update message in question is not considered).
Since AS PATH is used by the BGP route selection
process, great assurance of the integrity of an AS PATH
increases the probability that routes are selected based
on proper information. While the BGP speciﬁcation
[35] does not explicitly state that AS PATH is used for
route selection, it commonly is in practice (e.g., by Cisco
IOS). Without the guarantee of AS PATH integrity, an
attacker may be able to modify an AS PATH is a such
way that it is plausible in the AS graph and is also more
favored (e.g., with a shorter length) by recipient ASes
than the original path. In this way, a recipient AS may
be misled to favor the falsiﬁed route over any correct
routes. As a result, trafﬁc ﬂow might be inﬂuenced.
Thus, we suggest that it might not be sufﬁcient to verify
only the existence/non-existence of an AS PATH, and it
is desirable to obtain greater assurance of the integrity of
an AS PATH; we acknowledge that the cost of any solu-
tion should be taken into account as well. While psBGP
allows the veriﬁcation of AS PATH plausibility, in what
follows, we deﬁne AS PATH security according to the
original deﬁnition of AS PATH [35], as “an ordered set
of ASes a route in the update message has traversed”.
We choose the S-BGP approach with the improvement
of the bit-vector method by Nicol et al. [32] (see next
paragraph) for securing AS PATH in psBGP, since it ﬁts
into the design of psBGP and provides greater assurance
of AS PATH integrity with reasonable overhead. Hu
et al. [20] propose a secure path vector protocol (SPV)
for protecting AS PATH using authentication hash trees
with less overhead than S-BGP. psBGP does not use the
SPV approach since it has different assumptions than ps-
BGP. For example, SPV uses different public key certiﬁ-
cates than psBGP.
Let ni = |peers(si)| be the number of peers of s i.
Given mk = (f1, [s1, s2, . . . , sk]), a psBGP speaker
si (1 ≤ i ≤ k − 1) generates a digital signature
{f1, [s1, . . . , si], vi[ni]}si where vi[ni] is a bit vector
of bit-length ni, with one bit corresponding to each
peer in si’s preﬁx assertion list (§3.4.1).
in-
tends to send a routing update to a peer s j, it sets
the bit in vi[ ] corresponding to sj.
In this way,
a message sent to multiple peers by a BGP speaker
need be signed only once. For s k+1 to accept mk,
sk+1 must receive the following digital signatures:
{f1, [s1], v1[n1]}s1 ,{f1, [s1, s2], v2[n2]}s2, . . . , and
{f1, [s1, s2, . . . , sk], vk[nk]}sk.
If si
4. Security Analysis of psBGP
We analyze psBGP against the listed security goals
from §2.4. The analysis below clariﬁes how our pro-
posed mechanisms meet the speciﬁed goals, and by what
line of reasoning and assumptions. While we believe
that mathematical “proofs” of security may often be
based on ﬂawed assumptions that fail to guarantee “se-
curity” in any real-world sense, they are nevertheless
very useful, e.g., for ﬁnding security ﬂaws, for precisely
capturing protocol goals, and for reducing ambiguity, all
of which increase conﬁdence. We thus encourage such
formalized reasoning for lack of better alternatives.
Proposition 1 psBGP provides AS number authentica-
tion (G1).
Proof Outline: For an AS number s to be certiﬁed, ps-
BGP requires an ASNumCert (ks, s)T . Since T controls
s, and is the trusted guardian of AS numbers (by as-
sumption), any assertion made by T about s is proper.
Thus (ks, s)T is proper.
In other words, s is an AS
number certiﬁed by T , and ks is a public key associ-
ated with s certiﬁed by T . More formally2, (T controls
s) ∧ (ks, s)T ⇒ (ks, s) is proper.
Proposition 2 psBGP provides BGP speaker authenti-
cation (G2).
s
Proof Outline: For a BGP speaker r to be accepted as an
authorized representative of an AS s, psBGP requires an
ASNumCert (ks, s)T , a SpeakerCert (k(cid:1)
, s)ks, and ev-
idence that r possesses k(cid:1)
s. By Proposition 1, (ks, s)T
proves that s is an AS number certiﬁed by T and k s
is a public key associated with s certiﬁed by T . Simi-
larly, (k(cid:1)
s is a public key associated
with s certiﬁed by s. Evidence that r possesses k(cid:1)
s estab-
lishes that r is authorized by s to represent s. Thus, the
Proposition is proved. More formally, (T controls s) ∧
(ks, s)T ⇒ (ks, s) is proper; (ks, s) is proper ∧ (k(cid:1)
, s)ks
⇒ (k(cid:1)
⇒
, s) is proper ∧ r possesses k(cid:1)
r is authorized by s.
, s)ks proves that k(cid:1)