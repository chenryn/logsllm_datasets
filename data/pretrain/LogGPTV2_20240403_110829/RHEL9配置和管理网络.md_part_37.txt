    ``` literallayout
    [connection]
    id=example_connection
    type=ethernet
    autoconnect=true
    [ipv4]
    method=auto
    [ipv6]
    method=auto
    [ethernet]
    mac-address=00:53:00:8f:fa:66
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您可以使用带有 `.nmconnection`{.literal}
    后缀的任何文件名。但是，当您稍后使用 `nmcli`{.literal}
    命令来管理连接时，您必须在引用此连接时使用 `id`{.literal}
    变量中设置的连接名称。当省略 `id`{.literal} 变量时，请使用不带
    `.nmconnection`{.literal} 的文件名来引用此连接。
    :::
3.  设置配置文件的权限，以便只有 `root`{.literal} 用户可以读取和更新它：
    ``` literallayout
    # chown root:root /etc/NetworkManager/system-connections/example.nmconnection
    # chmod 600 /etc/NetworkManager/system-connections/example.nmconnection
    ```
4.  重新载入连接配置集：
    ``` literallayout
    # nmcli connection reload
    ```
5.  验证 NetworkManager 是否从配置文件读取配置集：
    ``` literallayout
    # nmcli -f NAME,UUID,FILENAME connection
    NAME                UUID                                  FILENAME
    example-connection  86da2486-068d-4d05-9ac7-957ec118afba  /etc/NetworkManager/system-connections/example.nmconnection
    ...
    ```
    如果命令不显示新添加的连接，请验证文件权限和您在文件中使用的语法是否正确。
6.  可选：如果您将配置集中的 `autoconnect`{.literal} 变量设置为
    `false`{.literal}，激活连接：
    ``` literallayout
    # nmcli connection up example_connection
    ```
:::
::: orderedlist
**验证**
1.  显示连接配置集：
    ``` literallayout
    # nmcli connection show example_connection
    ```
2.  显示接口的 IP 设置：
    ``` literallayout
    # ip address show enp1s0
    ```
:::
::: itemizedlist
**其他资源**
-   `nm-settings-keyfile(5)`{.literal}
:::
:::
:::
[]{#using-netconsole-to-log-kernel-messages-over-a-network_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#using-netconsole-to-log-kernel-messages-over-a-network_configuring-and-managing-networking.html#using-netconsole-to-log-kernel-messages-over-a-network_configuring-and-managing-networking}第 27 章 使用 netconsole 通过网络记录内核信息 {.title}
:::
使用 `netconsole`{.literal}
内核模块和同名的服务，您可以在登录到磁盘或者无法使用串口控制台时，通过网络记录内核信息来调试内核。
::: section
::: titlepage
# []{#using-netconsole-to-log-kernel-messages-over-a-network_configuring-and-managing-networking.html#configuring-the-netconsole-service-to-log-kernel-messages-to-a-remote-host_using-netconsole-to-log-kernel-messages-over-a-network}配置 netconsole 服务为将内核信息记录到远程主机 {.title}
:::
使用 `netconsole`{.literal}
内核模块，您可以将内核信息记录到远程系统日志服务。
::: itemizedlist
**先决条件**
-   远程主机上安装系统日志服务，如 `rsyslog`{.literal}。
-   远程系统日志服务被配置为接收来自此主机的日志条目。
:::
::: orderedlist
**步骤**
1.  安装 `netconsole-service`{.literal} 软件包：
    ``` literallayout
    # dnf install netconsole-service
    ```
2.  编辑 `/etc/sysconfig/netconsole`{.literal} 文件，并将
    `SYSLOGADDR`{.literal} 参数设置为远程主机的 IP 地址：
    ``` literallayout
    # SYSLOGADDR=192.0.2.1
    ```
3.  启用并启动 `netconsole`{.literal} 服务：
    ``` literallayout
    # systemctl enable --now netconsole
    ```
:::
::: itemizedlist
**验证步骤**
-   在远程系统日志服务器上显示 `/var/log/messages`{.literal} 文件。
:::
::: itemizedlist
**其他资源**
-   [配置远程日志记录解决方案](https://access.redhat.com/documentation/de-de/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_configuring-a-remote-logging-solution_configuring-basic-system-settings){.link}
:::
:::
:::
[]{#systemd-network-targets-and-services_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#systemd-network-targets-and-services_configuring-and-managing-networking.html#systemd-network-targets-and-services_configuring-and-managing-networking}第 28 章 systemd 网络目标和服务 {.title}
:::
NetworkManager
在系统引导过程中配置网络。但是，当使用远程根(/)引导时，比如，如果根目录存储在
iSCSI 设备中，则在启动 RHEL 之前，则会在初始 RAM
磁盘(`initrd`{.literal})中应用网络设置。例如，如果在内核命令行中使用
`rd.neednet=1`{.literal}
指定网络配置，或者指定配置来挂载远程文件系统，则在 `initrd`{.literal}
中应用网络设置。
这部分论述了应用网络设置时使用的不同目标，如 `network`{.literal},
`network-online`{.literal}, 和 `NetworkManager-wait-online`{.literal}
服务，以及在 `network-online`{.literal} 服务启动后，如何配置
`systemd`{.literal} 服务来启动。
::: section
::: titlepage
# []{#systemd-network-targets-and-services_configuring-and-managing-networking.html#differences-between-the-network-and-network-online-systemd-target_systemd-network-targets-and-services}network 和 network-online systemd target 的不同 {.title}
:::
systemd 维护 `network`{.literal} 和 `network-online`{.literal}
目标单元。特殊单元，如
`NetworkManager-wait-online.service`{.literal}，具有
`WantedBy=network-online.target`{.literal} 和
`Before=network-online.target`{.literal} 参数。如果启用，这些单元从
`network-online.target`{.literal}
开始，并延迟达到的目标，直到建立了某种形式的网络连接。它们会延迟
`网络在线`{.literal} 目标，直到网络连接。
`network-online`{.literal}
目标启动一个服务，这会增加更长的延迟来进一步执行。systemd
会自动将这个目标单元的 `Wants`{.literal} 和 `After`{.literal}
参数的依赖项添加到所有 System V(SysV) `init`{.literal}
脚本服务单元，并带有一个 Linux Standard Base(LSB)标头引用
`$network`{.literal} 工具。LSB 标头是 `初始化脚本`{.literal}
的元数据。您可以使用它指定依赖项。这与 `systemd`{.literal} 目标类似。
`网络`{.literal} 目标不会显著延迟引导过程的执行。到达 `网络`{.literal}
目标意味着，负责设置网络的服务已启动。但并不意味着已经配置了一个网络设备。这个目标在关闭系统的过程中非常重要。例如，如果您在引导过程中有一个
`在网络`{.literal}
目标后排序的服务，则在关闭过程中会取消这个依赖关系。在服务停止后，网络才会断开连接。远程网络文件系统的所有挂载单元都自动启动
`网络`{.literal} 目标单元，并在其后面执行顺序。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`网络在线`{.literal}
目标单元只在系统启动时有用。系统完成引导后，这个目标不会跟踪网络的在线状态。因此，您无法使用网络监控网络连接。``{.literal}这个目标提供了一个一次性系统启动概念。
:::
:::
::: section
::: titlepage
# []{#systemd-network-targets-and-services_configuring-and-managing-networking.html#overview-of-networkmanager-wait-online_systemd-network-targets-and-services}NetworkManager-wait-online 概述 {.title}
:::
`NetworkManager-wait-online`{.literal}
服务会等待网络配置网络超时。这个网络配置涉及插入以太网设备、扫描 Wi-Fi
设备等。NetworkManager 会自动激活配置为自动启动的适当配置集。因 DHCP
超时或类似事件导致自动激活失败，网络管理器（NetworkManager）可能会在一定时间内处于忙碌状态。根据配置，NetworkManager
会重新尝试激活同一配置集或不同的配置集。
当启动完成后，所有配置集都处于断开连接的状态，或被成功激活。您可以配置配置集来自动连接。以下是一些参数示例，这些参数设定超时或者在连接被视为活跃时定义：
::: itemizedlist
-   `connection.wait-device-timeout`{.literal} -
    设置驱动程序用于检测设备的超时时间
-   `ipv4.may-fail`{.literal} and `ipv6.may-fail`{.literal} - 使用一个
    IP 地址系列设置激活，或者一个特定的地址系列是否需要完成配置。
-   `ipv4.gateway-ping-timeout`{.literal} - delays activation.
:::
::: itemizedlist
**其他资源**
-   `nm-settings(5)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#systemd-network-targets-and-services_configuring-and-managing-networking.html#configuring-a-systemd-service-to-start-after-the-network-has-been-started_systemd-network-targets-and-services}将 systemd 服务配置为在网络已启动后再启动 {.title}
:::
Red Hat Enterprise Linux 在 `/usr/lib/ systemd`{.literal}
/system/``{=html} 目录中安装 systemd 服务文件。此流程为
`/etc/systemd/system/service_name. service.d/`{.literal}
中的服务文件创建一个置入片断，该文件与
`/usr/lib/systemd/system/`{.literal}
中的服务文件一起使用，以在网络在线后启动特定的服务。如果 drop-in
片断中的设置与 `/usr/lib/systemd/system/`{.literal}
中的服务文件中的设置重叠，它具有更高的优先级。
::: orderedlist
**步骤**
1.  要在编辑器中打开服务文件，请输入：
    \# [**systemctl edit service_name**]{.strong}
2.  输入以下内容并保存更改：
    ``` screen
    [Unit]
    After=network-online.target
    ```
3.  重新加载 `systemd`{.literal} 服务。
    \# [**systemctl daemon-reload**]{.strong}
:::
:::
:::
[]{#linux-traffic-control_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#linux-traffic-control_configuring-and-managing-networking.html#linux-traffic-control_configuring-and-managing-networking}第 29 章 Linux 流量控制 {.title}
:::
Linux 提供管理和操作数据包传输的工具。Linux
流量控制（TC）子系统帮助进行策略、分类、控制以及调度网络流量。TC
还可以通过使用过滤器和动作在分类过程中利用数据包内容分栏。TC
子系统使用排队规则(`qdisc`{.literal})（TC
架构的一个基本元素）来实现此目的。
调度机制在进入或退出不同的队列前确定或者重新安排数据包。最常见的调度程序是先入先出（FIFO）调度程序。您可以使用
`tc`{.literal} 实用程序或永久使用 NetworkManager 进行 `qdiscs`{.literal}
操作。
本节介绍排队规则，并描述了如何更新 RHEL 中的默认 `qdisc`{.literal}。
::: section
::: titlepage
# []{#linux-traffic-control_configuring-and-managing-networking.html#overview-of-queuing-disciplines_linux-traffic-control}排队规则概述 {.title}
:::
排队规则(`qdiscs`{.literal})帮助排队和之后，通过网络接口调度流量传输。`qdisc`{.literal}
有两个操作：
::: itemizedlist
-   排队请求，以便可以对数据包进行排队以进行稍后传输和
-   取消队列请求，以便可以选择其中一个已排队的数据包以便立即传输。
:::
每个 `qdisc`{.literal} 都有一个 16 位十六进制数字，称为
`句柄`{.literal}，带有附加的冒号，如 `1:`{.literal} 或
`abcd：`{.literal}这个数字被称为 `qdisc`{.literal} 主号码。如果
`qdisc`{.literal}
有类，则标识符为一个由两个数字组成的对，主号码为主号码，即 \
`::1`{.literal}，第二个地址为 & `lt;major>:2`{.literal} 等等。一些
`qdiscs`{.literal} 允许用户在创建类时随机设置类次要号码。
::: variablelist
[classful `qdiscs`{.literal}]{.term}
:   存在不同的
    `qdiscs`{.literal}，有助于将数据包传输到网络接口或从网络接口传输。您可以使用
    root、parent 或 child 类配置
    `qdiscs`{.literal}。子对象可以被附加的位置被称为
    class。`qdisc`{.literal} 中的类灵活，始终包含多个子类或一个子类
    `qdisc`{.literal}。对于包含类 `qdisc`{.literal}
    本身的类，这无法实现复杂的流量控制场景。
    classful `qdiscs`{.literal} 不存储任何数据包本身。相反，它们根据指向
    `qdisc`{.literal}
    的标准，把它们放队列和取消队列到其子进程之一。最后，这个递归数据包传递最终结束保存数据包的位置（在出现排队时从中提取）。
[`无类别`{.literal}]{.term}
:   有些 `qdiscs`{.literal} 不包含子类，它们名为无类别
    `qdiscs`{.literal}。与类 `qdiscs`{.literal} 相比，无类别
    `qdiscs`{.literal}
    需要较少的自定义。通常情况下，将它们附加到接口就足够了。
:::
::: itemizedlist
**其他资源**
-   `TC(8)`{.literal} 手册页
-   `TC-actions.8`{.literal} man page
:::
:::
::: section