Hello,

I'm not entirely convinced that an error should be thrown in the following scenario:

```typescript
interface Indexer {
  [x: string]: number;
}

class Base {
  foo(): Indexer {
    return undefined;
  }
}

/* Error:
   Class 'Foo' incorrectly extends base class 'Base'.
   Types of property 'foo' are incompatible.
   Type '() => { id: number; }' is not assignable to type '() => Indexer'.
   Type '{ id: number; }' is not assignable to type 'Indexer'.
   Index signature is missing in type '{ id: number; }'.
*/
class Foo extends Base {
  foo() {
    return { id: 10 };
  }
}
```

### Explanation

- **Interface `Indexer`**: This interface defines an object with a string index signature, where the value must be a number.
- **Class `Base`**: The `foo` method in this class returns an `Indexer`, but it currently returns `undefined`. While `undefined` is technically compatible with any type, it doesn't provide a meaningful implementation.
- **Class `Foo`**: This class extends `Base` and overrides the `foo` method. The new `foo` method returns an object with a single property `id` of type `number`.

### Issue

The error occurs because the return type of `foo` in `Foo` (`{ id: number }`) does not match the return type of `foo` in `Base` (`Indexer`). Specifically, `{ id: number }` does not have the required string index signature defined in `Indexer`.

### Suggested Solution

To resolve this, you can either:
1. Change the return type of `foo` in `Foo` to match `Indexer`:
   ```typescript
   class Foo extends Base {
     foo(): Indexer {
       return { id: 10, [Symbol.iterator]: () => ({}) }; // Example of adding a string index
     }
   }
   ```

2. Or, if the intention is to return a specific object, consider changing the return type in `Base` to be more flexible:
   ```typescript
   class Base {
     foo(): { id: number } | Indexer {
       return undefined;
     }
   }

   class Foo extends Base {
     foo(): { id: number } {
       return { id: 10 };
     }
   }
   ```

This way, the types will be compatible, and the error will be resolved.

Best regards,
[Your Name]