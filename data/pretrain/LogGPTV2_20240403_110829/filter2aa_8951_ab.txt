- **io.write(str)**
    输出参数 `str` 指定的字符串。参数为 `String` 以外的对象时会自动将其转换为字符串。方法返回值为输出的字节数。
    ```ruby
    size = $stdout.write("Hello.\n")    #=> Hello.
    p size                              #=> 6
    ```
- **io "Hello"
    p io.pos        #=> 5
    io.pos = 0
    p io.gets       #=> "Hello, Ruby.\n"
    end
    ```
- **io.seek(offset, whence)**
    移动文件指针的方法。参数 `offset` 为用于指定位置的整数，参数 `whence` 用于指定 `offset` 如何移动
    whence	| 意义
    - | -
    IO::SEEK_SET	| 将文件指针移动到 offset 指定的位置
    IO::SEEK_CUR	| 将 offset 视为相对于当前位置的偏移位置来移动文件指针
    IO::SEEK_END	| 将 offset 指定为相对于文件末尾的偏移位置
- **io.rewind**
    将文件指针返回到文件的开头。`lineno` 方法返回的行编号为 0。
    ```ruby
    # hello.txt 中的内容为"Hello, Ruby.\n"
    File.open("hello.txt")do |io|
    p io.gets    #=> "Hello,Ruby.\n"
    io.rewind
    p io.gets    #=> "Hello, Ruby.\n"
    end
    ```
- **io.truncate(size)**
    按照参数 `size` 指定的大小截断文件。
    ```ruby
    io.truncate(0)         # 将文件大小置为0
    io.truncate(io.pos)    # 删除当前文件指针以后的数据
    ```
# 二进制模式与文本模式
不同平台下的换行符也不同。
虽然各个平台的换行符不一样，但为了保证程序的兼容性，会将字符串中的 `"\n"` 转换为当前 OS 的换行符并输出。此外，在读取的时候也会将实际的换行符转换为 `"\n"`。
下图是 Windows 中转换换行符的情形
**Windows 环境中字符 "\n" 的转换**
当需要确定文件大小进行输入 `/` 输出处理时，或者直接使用从其他平台拷贝的文件时，如果进行换行符转换，就有可能会引发问题。
为了解决上述那样的问题，Ruby 中还提供了不进行换行符转换的方法。换行符处理的前提是以行为单位做输入 / 输出处理，需要转换时称为文本模式，反之不需要转换时则称为二进制模式。
- **io.binmode**
    新的 `IO` 对象默认是文本模式，使用 `binmode` 方法可将其变更为二进制模式。
    ```ruby
    File.open("foo.txt", "w") do |io|
    io.binmode
    io.write "Hello, world.\n"
    end
    ```
    这样就可以既不用转换换行符，又能得到与文件中一模一样的数据。
    > 转换为二进制模式的 IO 对象无法再次转换为文本模式。
# 缓冲
即使对 `IO` 对象输出数据，结果也并不一定马上就会反映在控制台或者文件中。在使用 `write`、`print` 等方法操作 `IO` 对象时，程序内部会开辟出一定的空间来保存临时生成的数据副本。这部分空间就称为缓冲（buffer）。缓冲里累积一定量的数据后，就会做实际的输出处理，然后清空缓冲。
像这样，使用临时缓冲进行数据处理称为缓冲处理（buffering）。
在向控制台输出的两种方式（标准输出与标准错误输出）中，标准错误输出完全不采用缓冲处理。因此，当两种方式混合使用时，程序实际输出的顺序可能会与程序代码中记录的顺序不一样。
```ruby
$stdout.print "out1 "
$stderr.print "err1 "
$stdout.print "out2 "
$stdout.print "out3 "
$stderr.print "err2\n"
$stdout.print "out4\n"
```
执行示例
```
> ruby test_buffering1.rb
err1 err2
out1 out2 out3 out4
```
标准错误输出的主要目的是输出如警告、错误等信息，因此执行结果必须马上反映出来。再次强调，建议在显示程序中正常信息以外的信息时使用标准错误输出。
虽然缓冲处理可以提高输出效率，但有时候我们会希望执行结果可以马上反映出来，这时我们就可以用下面的方法来同步数据的操作与输出。
- **io.flush**
    强制输出缓冲中的数据。在基础上追加 `$stdout.flush` 的调用。
    ```ruby
    $stdout.print "out1 "; $stdout.flush
    $stderr.print "err1 "
    $stdout.print "out2 "; $stdout.flush
    $stdout.print "out3 "; $stdout.flush
    $stderr.print "err2\n"
    $stdout.print "out4\n"
    ```
    执行示例
    ```
    > ruby test_buffering2.rb
    out1 err1 out2 out3 err2
    out4
    ```
- **io.sync**
- **io.sync=(state)**
    通过 `io.sync = true`，程序写入缓冲时 `flush` 方法就会被自动调用。
    ```ruby
    $stdout.sync = true  # 同步输出处理
    $stdout.print "out1 "
    $stderr.print "err1 "
    $stdout.print "out2 "
    $stdout.print "out3 "
    $stderr.print "err2\n"
    $stdout.print "out4\n"
    ```
    即使不逐次调用 flush 方法，也可以像下面那样按顺序输出：
    ```
    > ruby test_buffering3.rb
    out1 err1 out2 out3 err2
    out4
    ```
# 与命令进行交互
虽然 Ruby 是几乎什么都能实现的强大的语言，但是也会有与其他命令进行数据交换的时候。例如，读取使用 GUN zip 压缩的数据的时候，使用 gunzip 命令会很方便。在 Ruby 中，使用 `IO.popen` 方法可以与其他命令进行数据处理。
- **IO.popen(command, mode)**
    参数 `mode` 的使用方法与 `File.open` 方法是一样的，参数缺省时默认为 `"r"` 模式。
    用 `IO.popen` 方法生成的 `IO` 对象的输入 / 输出，会关联启动后的命令 command 的标准输入 / 输出。也就是说，`IO` 对象的输出会作为命令的输入，命令的输出则会作为 `IO` 对象的输入。
    利用 `gunzip` 命令解压处理扩展名为 `.gz` 的文件（`-c` 为将解压后的结果写入到标准输出时的选项）。
    ```ruby
    pattern = Regexp.new(ARGV[0])
    filename = ARGV[1]
    if /.gz$/ =~ filename
    file = IO.popen("gunzip -c #{filename}")
    else
    file = File.open(filename)
    end
    file.each_line do |text|
    if pattern =~ text
        print text
    end
    end
    ```
- **open("|command", mode)**
    将带有管道符号的命令传给 `open` 方法的效果与使用 `IO.popen` 方法是一样的。
    ```ruby
    filename = ARGV[0]
    open("|gunzip -c #{filename}") do |io|
    io.each_line do |line|
        print line
    end
    end
    ```
# open-uri 库
除了控制台、文件以外，进程间通信时使用的管道（pipe）、网络间通信时使用的套接字（socket）也都可以作为 `IO` 对象使用。
通过 `require` 引用 `open-uri` 库后，我们就可以像打开普通的文件一样打开 HTTP、FTP 的 URL。使用 `open-uri` 库的功能时，不要使用 `File.open` 方法，只使用 `open` 方法即可。
```ruby
require "open-uri"
# 通过HTTP 读取数据
open("http://www.ruby-lang.org") do |io|
  puts io.read  # 将Ruby 的官方网页输出到控制台
end
# 通过FTP 读取数据
url = "ftp://www.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p0.tar.gz"
open(url) do |io|
  open("ruby-2.0.0-p0.tar.gz", "w") do |f|  # 打开本地文件
    f.write(io.read)
  end
end
```
通过 HTTP 协议时，服务器会根据客户端的状态改变应答的内容，比如返回中文或英语的网页等。为了实现这个功能，请求时就需要向服务器发送元信息（meta information）。
例如，HTTP 头部信息 Accept-Language 就表示优先接收中文网页。指定 HTTP 头部信息时，会将其以散列的形式传递给 open 方法的第 2 个参数。
```ruby
require "open-uri"
options = {
  "Accept-Language" => "zh-cn, en;q=0.5",
}
open("http://www.ruby-lang.org", options){|io|
  puts io.read
}
```
# stringio 库
在测试程序时，虽然我们会希望知道向文件或控制台输出了什么，但程序实际执行的结果却往往很难知道。为此，我们可以通过向模拟 `IO` 对象的对象进行输出来确认执行结果。
`StringIO` 就是用于模拟 `IO` 对象的对象。通过 `require` 引用 `stringio` 库后，就可以使用 `StringIO` 对象了。
```ruby
require "stringio"
io = StringIO.new
io.puts("A")
io.puts("B")
io.puts("C")
io.rewind
p io.read  #=> "A\nB\nC\n"
```
实际上，向 `StringIO` 对象进行的输出并不会被输出到任何地方，而是会被保存在对象中，之后就可以使用 `read` 方法等来读取该输出。
`StringIO` 对象还有另外一种用法，那就是将字符串数据当作 `IO` 数据处理。将大数据保存在文件中，并将小数据直接传输给别的处理时，通过使用 `StringIO` 对象，程序就可以不区分对待 `IO` 对象和字符串了。实际上，之前介绍的用 `open-uri` 库打开 `URI` 时，也是有时候返回 IO 对象，有时候返回 `StringIO` 对象。不过一般情况下，我们不需要在意这两者的区别。通过将数据字符串传递给 `StringIO.new` 方法的参数，就可以由字符串创建 `StringIO` 对象。
```ruby
require "stringio"
io = StringIO.new("A\nB\nC\n")
p io.gets  #=> "A\n"
p io.gets  #=> "B\n"
p io.gets  #=> "C\n"
```