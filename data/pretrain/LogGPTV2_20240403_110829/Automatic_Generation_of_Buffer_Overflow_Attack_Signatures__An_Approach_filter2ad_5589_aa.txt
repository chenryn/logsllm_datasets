title:Automatic Generation of Buffer Overflow Attack Signatures: An Approach
Based on Program Behavior Models
author:Zhenkai Liang and
R. Sekar
Automatic Generation of Buffer Overﬂow Attack Signatures:
An Approach Based on Program Behavior Models(cid:3)
Zhenkai Liang and R. Sekar
Department of Computer Science,
Stony Brook University, Stony Brook, NY 11794
fzliang, PI:EMAIL
Abstract
Buffer overﬂows have become the most common target
for network-based attacks. They are also the primary mech-
anism used by worms and other forms of automated attacks.
Although many techniques have been developed to prevent
server compromises due to buffer overﬂows, these defenses
still lead to server crashes. When attacks occur repeat-
edly, as is common with automated attacks, these protec-
tion mechanisms lead to repeated restarts of the victim ap-
plication, rendering its service unavailable. To overcome
this problem, we develop a new approach that can learn
the characteristics of a particular attack, and ﬁlter out fu-
ture instances of the same attack or its variants. By doing
so, our approach signiﬁcantly increases the availability of
servers subjected to repeated attacks. The approach is fully
automatic, does not require source code, and has low run-
time overheads. In our experiments, it was effective against
most attacks, and did not produce any false positives.
1 Introduction
In the past few years, there has been an alarming increase
in automated attacks that are launched by worms or zom-
bies. A key characteristic of such automated attacks is that
they are repetitive, i.e., multiple instances of the same at-
tack may be launched against the same victim machine in
a quick succession. A vast majority of these automated at-
tacks are due to buffer overﬂows, which account for more
than three-quarters of the US CERT advisories in the last
few years. Current technology for defending against buffer
overﬂows uses some form of guarding [5, 7, 8] or ran-
domization [1, 2, 3, 4, 14]. Although these techniques can
detect attacks before system resources, such as ﬁles, are
compromised, they cannot protect the victim process itself,
whose integrity is compromised prior to the time of detec-
tion. For this reason, the safest approach for recovery is to
terminate the victim process. With repetitive attacks, such
an approach will cause repeated server restarts, effectively
(cid:3)This research is supported in part by an ONR grant N000140110967
and an NSF grant CCR-0208877.
rendering the service unavailable during periods of attack.
For instance, at a relatively low rate of 10 attacks per sec-
ond, services such as DNS and NTP became unavailable
in our experiments.
In contrast, we present an approach,
called ARBOR (Adaptive Response to Buffer OveRﬂows),
that ﬁlters out attacks before they compromise the integrity
of a server, thereby allowing the server to continue to run
without interruption. By doing so, ARBOR dramatically
increases the capacity of servers to withstand repetitive at-
tacks.
This paper builds on the core idea outlined in [17] of
using program behavior models to recognize those inputs
that carry buffer overﬂow attacks, and discarding them. As
compared to the earlier technique of automated patch gener-
ation [29], as well as subsequent works such as [26, 30, 32],
our approach predicts attacks at the earliest possible stage,
namely, at the point of network input. This enables reliable
recovery in our approach. In contrast, previous approaches
recognize buffer overﬂow attacks close to the point of mem-
ory corruption, and cannot always recover. Another impor-
tant beneﬁt of our approach is that it generates a general-
ized vulnerability-oriented signature from a single attack
instance, and this signature can be deployed at other sites
to block attacks exploiting the same vulnerability.
1.1 Overview of Approach
ARBOR is based on the observation that attacks on net-
work services arrive via inputs to server processes. It makes
use of an off-the-shelf buffer-overﬂow exploit prevention
technique, speciﬁcally, address-space randomization (ASR)
[1, 3]. (Other techniques such as StackGuard would work
as well.) ARBOR compares the characteristics of benign
inputs with those of inputs received around the time of an
attack, and synthesizes a signature that matches the attack
input but not the benign ones. Once generated, this sig-
nature can be deployed within the victim process to ﬁlter
out future instances of the same attack (or its variants). It
may also be distributed to other servers using the same ver-
sion of software, so that an entire community of cooperating
servers may be protected from an attack, based on a single
attack sample. The two main steps in our approach, namely,
signature generation and recovery after discarding input, are
described in more detail below.
I. Automatic signature generation proceeds in two steps.
Identifying characteristic features of attacks. Buffer
1.
overﬂow attacks are associated with excessively long in-
puts, and hence input length is one obvious criterion in sig-
natures. Moreover, buffer overﬂow attacks are based on
overwriting pointers and/or execution of attacker-provided
binary code. Thus, the presence of binary data in inputs is
a second useful criterion for signature generation.
We do not rely on other possible characteristics, such
as data or code sequences that repeat across attacks. Al-
though previous work on worm signature generation [15,
16, 22, 31, 33] has often relied on these characteristics, we
note that polymorphic worms, as well as intelligent attack-
ers, can easily modify these characteristics. In contrast, the
length and binary data characteristics are essential features
of buffer overﬂow attacks.
2. Using program context to improve signature accuracy.
Server programs accept inputs with different characteristics
in different contexts. For instance, only text data may be
acceptable during the authentication phase of a protocol,
while binary data may be accepted subsequently. A sim-
ple signature that is based on the presence of binary charac-
ters in input data will work correctly during authentication
phase, but will subsequently cause legitimate inputs to be
dropped. To increase the accuracy of signatures, we incor-
porate the context in which an input is processed into the
signature. Without the use of these contexts, ARBOR will
produce too many false positives to be useful.
II. Light-weight recovery after discarding input. After
discarding input, it is necessary for the server process to
take recovery actions, such as releasing resources that were
set aside for processing the (attack-bearing) request, and re-
turning control to the point where the program awaits the
next service request. Rather than trying to infer the exact set
of (application-speciﬁc) recovery actions, we observe that
networked servers expect and handle transient network er-
rors, which can cause their input operations to fail. ARBOR
leverages this error recovery code to perform the necessary
clean up actions. Speciﬁcally, whenever an input matches
an attack signature, this input is dropped, and an error code
signifying a network error is reported to the server.
1.2 Beneﬁts of Our Approach
(cid:15) Effectiveness against “real-world” attacks. We collected
11 remote buffer overﬂow attacks published by securi-
tyfocus.com. Since the development of exploit code is
a challenging task, we considered only those attacks for
which working exploit code was available on Red Hat
Linux (our experimental platform). ARBOR was effec-
tive in generating signatures for 10 of these 11 attacks.
(cid:15) Preserving service availability. Our experiments show
that the availability of key servers (such as httpd, ntpd
and named), when exposed to repeated attacks, is im-
proved by at least an order of magnitude by ARBOR.
(cid:15) Applicable to black-box COTS software. Our approach
does not require any modiﬁcations to the protected server,
or access to its source code.
(cid:15) Low runtime overheads. ARBOR introduces low runtime
overheads of under 10%.
(cid:15) High-quality signatures generated from a single attack
sample. These signatures are:
– general enough to capture attack variations that exploit
the same underlying vulnerability. Since our signatures
rely on essential characteristics of buffer overﬂow at-
tacks, attack variations that involve changes to exploit
code or other attack details will likely be captured.
– speciﬁc enough to avoid matches with benign inputs.
Attack inputs were usually many times larger than be-
nign inputs, and hence no false positives were observed
in our experiments.
The ability to generate a general signature from a single at-
tack sample distinguishes our approach from previous sig-
nature generation approaches [15, 16, 22, 31, 33, 40].
ARBOR signatures can be distributed over the Internet
to protect other servers running the same copy of software.
Such an approach can defend against fast-spreading worms.
Moreover, an entire community of servers can be immu-
nized from future instances of an attack, including servers
that lack buffer overﬂow exploit prevention capabilities.
Note that ARBOR signatures cannot be deployed on a
ﬁrewall (or an inline network ﬁlter), as they rely on program
context information available only within the address-space
of a server process. On the positive side, ARBOR is able to
handle end-to-end encryption because it can intercept in-
puts after decryption. For instance, ARBOR can handle
SSL encryption by intercepting SSL read, which returns
decrypted data, rather than read, which would return en-
crypted data. In contrast, a network layer ﬁltering approach
would not be able to access decrypted data.
1.3 Organization of the Paper
The rest of the paper is organized as follows. Section 2 pro-
vides a technical description of our approach. An evaluation
of our approach is presented in Section 3. Related work is
discussed in Section 4, followed by a summary in Section 5.
2 Approach Description
Figure 1 illustrates our approach. It is implemented using
inline and off-line components. Inline components reside
within the address space of the process being protected by
our approach (protected process), and are optimized for per-
formance, whereas the off-line components perform time-
consuming tasks such as signature generation.
S1;
if (...) S2;
else S3;
if (S4) ... ;
else S2;
S5;
1. S0;
2. while (..) f
3.
4.
5.
6.
7.
8.
9. g
10. S3;
11. S4;
S3
0>
S0
S1
1
3
S2
S
3
4
5
S4
S
4
S5
6
S2
S
1
S5
S3
4S
10
8
7
11
Figure 2. A sample program and its model.
The inline components “hook” themselves into the exe-
cution environment of the protected process by library in-
terception. The primary reason for using library intercep-
tion, as opposed to system call interception, is that it al-
lows interception of a richer class of events. For instance,
some server programs use buffered I/O using library func-
tions such as getc and scanf. In this case, many calls to
getc and scanf do not result in a read system call, as the
input may be returned from a buffer within the library. An
approach that relies on system call interception will conse-
quently miss many of the input operations made by a pro-
gram. A disadvantage of library interposition is that it can
be bypassed after a successful attack. However, ARBOR
relies only on the observations made before a successful at-
tack, so this drawback does not impact it.
The input ﬁlter intercepts all input actions of the pro-
tected process. The inputs returned by these actions are then
compared with the list of signatures currently deployed in
the ﬁlter. Inputs matching any of these signatures are dis-
carded, and an error code is returned to the protected pro-
cess. If the input is associated with a TCP connection, then
the input ﬁlter breaks the connection so as to preserve the
semantics of the TCP protocol.
The behavior model is a central component of ARBOR.
It enables our approach to leverage knowledge embedded
in the program for making ﬁltering decisions, rather than
requiring manual encoding of application-speciﬁc syntax or
semantics of input contents. Library interception is used to
learn the behavior model of a protected process. In princi-
Process
Library Interceptor
Behavior
Model
Program
Input
Input
Filter
Logger
Model
& Inputs
Detector
Alert
Analyzer
Inline Components
Off−line Components
New Signatures
Figure 1. Architecture of ARBOR.
ple, the model can incorporate all standard C library func-
tions. In practice, we incorporate calls to (a) all input oper-
ations, and (b) all system call wrappers.
The logger records inputs for ofﬂine analysis.
It also
saves the entire behavior model periodically (say, every 5
minutes) to the disk, so that the model does not have to
be rebuilt from scratch on process restarts. Any behavior
model that is saved very close to the time of an attack is not
reused. This ensures that actions associated with a success-
ful attack do not compromise the behavior model.
The off-line components include a detector and an ana-
lyzer. The detector is responsible for attack detection. It
promptly notiﬁes the analyzer, which begins the process of
generating an attack signature. The generated signature is
then deployed in the input ﬁlter. This enables future in-