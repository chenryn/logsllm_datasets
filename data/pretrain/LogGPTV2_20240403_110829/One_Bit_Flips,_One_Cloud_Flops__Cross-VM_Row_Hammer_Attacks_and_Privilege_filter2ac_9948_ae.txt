i3-2120, Machine C, Sandy Bridge i5-2500, and Ma-
chine D, Broadwell i5-5300U (memory conﬁgurations
are listed in Table 2).
We can see from the ﬁgure that our double-sided row
hammer is much more effective than the single-sided row
hammer attacks used in prior studies: Using single-sided
attacks, on machine A and machine B, no bit ﬂips could
be observed, whether or not mfence was used. In con-
trast, using our double-sided row hammer attacks with-
out mfence, 4 or 5 bits can be ﬂipped per hour. On the
most vulnerable machine C5, our double-sided row ham-
mer attacks can ﬁnd as many as over 600k bit ﬂips per
hour, while the best single-sided attacks can only ﬁnd 23
bit ﬂips per hour. We also ﬁnd that row hammer without
mfence is more effective than with it. The trend is appar-
ent on all the four machines we tested on. As such, we
conclude that although mfence ensures that all memory
accesses reach the memory, the slowdown to the program
execution it brings about reduces the effectiveness of row
5Some machines are expected to be more vulnerable than others (see
Table 3, [23]), possibly due to higher memory density or lower DRAM
refreshing frequency.
30  25th USENIX Security Symposium 
USENIX Association
12
hammer attacks. Our double-sided row hammer attacks
without mfence represent the most effective attack tech-
nique among the four.
While Figure 12 illustrates the rate of inducing bit
ﬂips, Table 2 demonstrates the overall effectiveness of
our double-sided row hammer attacks (without mfence).
Particularly, the total execution time of the experiments
above and the total number of induced bit ﬂips are shown
in Table 2. In each of the tests we stopped the row ham-
mer attacks once we have examined 50% of all DRAM
rows (all rows that are accessible by the VM without
reboot). We can see in the table the experiments took
about 10 to 20 hours on machine A, B, and C. The total
numbers of vulnerable bits found on machine A and B
were 63 and 91, respectively. In contrast to zero bit ﬂips
induced by single-sided attacks that ran for 30 hours,
our double-sided attacks make these machines vulner-
able. On machine C, 5,622,445 vulnerable bits were
found within 10 hours. Machine D is the least vulner-
able among the four: only 25 vulnerable bits were found
in about 43 hours. The results show that different ma-
chines are vulnerable to row hammer attacks to different
extent.
Machine
conﬁguration
(Machine A)
Sandy Bridge i3-2120 (4GB)
(Machine B)
Sandy Bridge i3-2120 (4GB)
(Machine C)
Sandy Bridge i5-2500 (4GB)
(Machine D)
Broadwell i5-5300U (8GB)
Execution
time (hours)
Vulnerable
bits found
18.37
15.85
9.08
42.88
63
91
5622445
25
Table 2: Execution time and detected vulnerable bits in
exhaustive row hammer attacks.
6.2.3 Vulnerable Bits Usability and Repeatability
We ﬁrst report the fraction of vulnerable bits we found
on the four machines, machine A, B, C and D (conﬁgu-
rations listed in Table 2), that are usable in the page table
replacement attacks we discussed in Section 5. The total
number of bits that are used for analysis on these four
machines are listed in Table 26. The results are shown in
Figure 13a: 36.5%, 31.9%, 32.8%, 40.0% of these bits
are in the PFN range of a page table entry, thus are us-
able in page table replacement attacks.
Prior studies [23] have shown that many of the bit ﬂips
are repeatable. We try to conﬁrm this claim in our own
6We selected a subset of vulnerable bits, 100031 vulnerable bits, on
machine C for analysis because the entire set was too large to handle.
experiments. Specially, on these four machines, we re-
peated the row hammer attacks (10 times) against the
rows in which vulnerable bits were found during the ﬁrst
sweep. We show, in Figure 13b, that 36.5%, 16.5%,
48.3%, and 12.0% of the vulnerable bits induced in the
ﬁrst run could be ﬂipped again (at least once) on these
four machines, respectively. These repeatable bit ﬂips
can be exploited in our cross-VM exploits.
In addition, on machine C, we have found more than
one bit ﬂippable within the same 64-bit memory block,
which are beyond correction even with ECC memory.
The distribution of vulnerable bits found in a 64-bit block
is shown in Figure 13c. Particularly, we found 95904
single-bit errors, 4013 two-bit errors, 112 three-bit errors
and 2 four-bit errors in the same 64-bit block.
6.3 Cross-VM Row Hammer Exploitation
We implemented our attack in a kernel module of Linux
operating system (kernel version 3.13.0) that ran on Xen
guest VMs. The hypervisor was Xen 4.5.1 (latest as of
January 2016). We conducted the attacks on machine
D, which is quipped with a Broadwell i5-5300U proces-
sor and 8GB of DRAM. However, we note that the at-
tacks should also work on other machines and software
versions as long as exploitable bits can be induced by
row hammer attacks. Particularly, we demonstrated the
power of the cross-VM row hammer attacks in two ex-
amples: In the ﬁrst example, we demonstrated a conﬁ-
dentiality attack where the adversary exploited the tech-
niques to steal TLS private keys from an Apache web
server; in the second example, we showed an integrity
attack, in which the attacker altered the program code of
an OpenSSH server to bypass the user authentication and
logged in the server without knowledge of credentials.
Arbitrary memory accesses. The ﬁrst step of both at-
tacks is to obtain arbitrary accesses to the target memory
page. To do so, the adversary controlling a guest VM ﬁrst
runs the bit detection algorithm described in Section 3 to
determine the row bits and bank bits of the machine, and
then performs row hammer attacks until he ﬁnds a ex-
ploitable and repeatable bit ﬂip at desired bit position—
the PFN range of a PDE. We repeated the row hammer
attacks 10 times and on average it took 2.13 hours to ﬁnd
the ﬁrst useable bit ﬂip. We emphasize machine D, the
one we experimented with, is the least vulnerable ma-
chine among all (see Figure 12). Then the adversary re-
places one of his own page tables with a forged one, us-
ing page table replacement attack techniques, and maps
512 of his virtual pages to 512 different physical pages.
The adversary scans all these pages directly because they
are mapped to his own address space. For each page, he
compares the content of the page with a speciﬁc pattern.
If the pattern is not found in these 512 pages, the ad-
USENIX Association  
25th USENIX Security Symposium  31
13
(a) Vulnerable bits that are usable in page
table replacement attacks.
(b) Vulnerable bits that are repeatable af-
ter the ﬁrst occurrence.
(c) Distribution of vulnerable bits within
the same 64-bit memory block.
Figure 13: Statistics of the induced ﬂippable bits.
versary modiﬁes the PTEs directly as he already has the
write privilege on the forged page table, and searches in
another 512 physical pages. The translation lookaside
buffer (TLB) is ﬂushed as needed to accommodate the
page table changes.
To speed up the searching, the adversary obtained a
list of machine page number (MFN) controlled by his
own VM from struct start info.mfn list and ex-
cluded them from the list of physical pages to scan. As
an extension of this implemented approach, the adver-
sary may also reboot the VM several times to increase the
physical memory space that is accessible to his own VM
(as done in Section 4), thus reducing the search space
of the victim. Alternatively, we also believe it is feasi-
ble to exploit cache-based side-channel analysis to learn
the cache sets (physical address modulus the number of
cache sets) of the targets [26] to narrow down the search
space. We leave this optimization as future work.
6.3.1 Conﬁdentiality Attacks
We show in this example that using the cross-VM row
hammer attacks, the adversary may learn the private key
of the Apache web servers of the neighboring VMs. Par-
ticularly, we set up two VMs on the same machine. The
victim ran an Apache web server in which an HTTPS
server was conﬁgured to support SSL/TLS using one
pair of public/private keys. The attacker VM conducted
the cross-VM row hammer attacks described above to
obtain read access to the physical memory owned by
the victim VM. When scanning each of the physical
pages belonging to another VM, the adversary checked
at each byte of the memory if it was the beginning of
a struct RSA, by ﬁrst checking if some of its member
variables, such as version and padding, are integers, and
others, such as p, q, n are pointers, and, if so, calling
the RSA check key() function provided by OpenSSL.
The function takes as argument a pointer to struct
RSA and validates (1) whether p and q are both prime
numbers, and (2) whether n = p × q and (3) whether
(xe)d ≡ x mod n. If the location passes the checks, it
is the beginning of an RSA structure, the private key
can be extracted. In fact, because at most memory lo-
cations, the basic checks will not pass, the expensive
RSA check key() will not be called. If the adversary is
lucky enough to successfully guess the machine address
of the target memory page in the ﬁrst trial, the average
time to complete the attack was 0.32s (including the time
to manipulate page tables, conduct row hammer attacks
to induce the desired bit ﬂip, read the memory page and
check the validity of the private key, and write the ex-
tracted key to ﬁles). The overall execution time of the
attack depends on the number of physical pages scanned
before ﬁnding the target one, but on average scanning
one additional memory pages took roughly 5ms.
6.3.2
Integrity Attacks
In this example, we show how to exploit row hammer
vulnerabilities to log in an OpenSSH server without pass-
words. Particularly, the victim was the management do-
main in Xen, the Dom0. In our testbed, Dom0 is con-
ﬁgured to use Pluggable Authentication Modules (PAM)
for password authentication. PAM offers Linux operat-
ing systems a common authentication scheme that can
be shared by different applications. Conﬁguring sshd to
use PAM is a common practice in Red Hat Linux [8].
We pre-conﬁgured one legitimate user on the OpenSSH
server, and enabled both public key authentication and
password authentication. The adversary controls a regu-
lar guest VM, a DomU, that ran on the machine. We as-
sume the adversary has knowledge of the username and
public key of the legitimate user, as such information is
easy to obtain in practice.
To initiate the attack, the adversary ﬁrst attempted to
log in as a legitimate user of the OpenSSH server from a
remote client using public/private keys. This step, how-
ever, is merely to create a window to conduct row ham-
mer attacks against the sshd process, which is created by
the sshd service daemon upon receiving login requests.
By receiving the correct public key for the legitimate
user, the server tries to locate the public key in the lo-
32  25th USENIX Security Symposium 
USENIX Association
14
callq pam authenticate
test %eax, %eax
jne 
mov $0, %eax
test %eax, %eax
jne 
(a) Code before attacks.
(b) Code after attacks.
Figure 14: Pseudo code to illustrate attacks against the
OpenSSH server.
cal ﬁle (∼/.ssh/authorized keys) and, if a match is
found, a challenge encrypted by the public key is sent to
the client. Then the OpenSSH server awaits the client
to decrypt his encrypted private key ﬁle and then use the
private key to decrypt the challenge and send a response
back to the server. In our attack, the adversary paused
on this step while he instructed the DomU attacker VM
to conduct the cross-VM row hammer attacks to obtain
access to the physical memory of Dom0. The steps to
conduct the row hammer attacks were the same as de-
scribed in the previous paragraphs. Particularly, here the
adversary searched for a piece of binary code of sshd—
a code snippet in the sshpam auth passwd() function.
The signature can be extracted from ofﬂine binary disas-
sembling as we assume the binary code of the OpenSSH
server is also available to the adversary.
found,
the adversary
immediately replaced a ﬁve-byte instruction “0xe8
0x1b 0x74 0xfd 0xff” (binary code for “callq
pam authenticate”) with another ﬁve-byte instruction
“0xb8 0x00 0x00 0x00 0x00” (binary code for “mov
$0 %eax”). Note here even though the memory page is
read-only in the victim VM, Dom0, the adversary may
have arbitrary read/write access to it without any re-
striction. Then the code snippet will be changed from
Figure 14a to Figure 14b. Upon successful authenti-
cation, pam authenticate() will return 0 in register
%eax. The modiﬁed code assigned %eax value 0 directly,
without calling pam authenticate(), so the authenti-
cation will be bypassed.
Once the signature was
memory. If additional memory pages need to be scanned,
the average time to complete the pattern recognition in a
4KB memory page was 58µs.
We note the two examples only illustrate some basic
uses of our presented cross-VM row hammer attacks as
attack vectors. Other innovative attacks can be enabled
by the same techniques. We leave the exploration of
other interesting attacks as future work.
6.4 Prevalence of Xen PVM in Public
Clouds
As shown in prior sections, Xen PVMs (paravirtualized
VMs) are very vulnerable to privilege escalation attacks
due to row hammer vulnerabilities. However, they are
still widely used in public clouds. Amazon EC27 as a
leading cloud provider still offer PV guests in many of
its instance types (see Table 3). Other popular cloud
providers such as Rackspace8 and IBM Softlayer9 are