ORET ctx
rip
rdi
CONT ctx
CONT ctx
CONT ctx
rsp
rip
n
r
u
t
e
R
rsp
rip
n
r
u
t
e
R
rsp
rip
n
r
u
t
e
R
Gadget 1
Gadget 2
Gadget 3
···
···
···
Fake stack frames
Fake exception
information structs
Payload chain
Figure 6: Workﬂow of the ORET+CONT loop.
Fake stack
&cont exec
&cont exec
&cont exec
···
Gadget 1
Gadget 2
Gadget 3
CONT ctx
rsp
rip
rdi
CONT ctx
rsp
rip
rdi
CONT ctx
rsp
rip
rdi
···
Figure 7: Simpliﬁed attack using only CONT primitives.
written to the real stack through a very large overﬂow.
It is still possible to pivot the stack with some additional
effort. For example, an attacker could use a single CONT
just to set rsp, and then proceed with chained ORETs.
Another strategy could be using the adjusted asm oret to
make a proper function call to the actual asm oret entry
point, which will restore the stack pointer from its ﬁrst
argument.
7 Case Study: Attacking SGX-Shield
In this section, we present an attack against an enclave
hardened with SGX-Shield [26].
7.1 Overview on SGX-Shield
SGX-Shield is a hardening solution for SGX enclaves,
which integrates multiple mitigation technologies:
• Fine-grained randomization. The enclave code
is split up in 32- or 64-byte chunks, called random-
ization units, and each randomization unit is placed
at an independent, randomized memory position
aligned to its size. Randomization units are chained
by tail jumps, since they are no longer spatially
contiguous after randomization. Data objects, the
heap, and the stack are also ﬁnely randomized.
• Software DEP. Control transfers are instrumented
to enforce a W⊕X policy, i.e., writable memory
areas are not executable.
• Software Fault Isolation. Memory accesses are
instrumented to enforce an execute-only policy on
code, i.e., code cannot be read or written, but only
executed.
• Coarse-grained Control Flow Integrity. Control
transfers are instrumented to force them to target the
beginning of a randomization unit, so that checks
cannot be circumvented by jumping in the middle of
a randomization unit.
SGX does not support changing memory permissions
for memory mappings after enclave initialization. This
limitation will be lifted in SGX2 [22]. Because SGX-
Shield needs writable code pages during loading, the
enclave code will stay writable for the whole enclave’s
lifecycle. To protect against code injection, a software
DEP policy is implemented by sandboxing data accesses
inside a ﬁxed boundary called NRW boundary.
7.2 Problems
Unfortunately, we identiﬁed signiﬁcant differences
between the SGX-Shield paper [26] and the open source
implementation [25] (commit 04b09dd, 2017-09-27).
Further, there are several subtle implementation issues
that we discuss below.
According to the paper’s description, SGX-Shield
removes the loader code from memory after loading the
1222    27th USENIX Security Symposium
USENIX Association
guest enclave. However, this is not done in the imple-
mentation. At ﬁrst sight, this problem could be dismissed
as trivial to solve.
In fact, removing the code of the
loader itself is not an issue, and we pretended the loader
was erased while designing our attack. However, in the
current design, the loader supplies the tRTS for the guest
enclave. Speciﬁcally, OCALLs from the guest enclave
are supported by routing them through the loader’s tRTS.
As such, one cannot simply eliminate the loader’s tRTS.
Moreover, since the tRTS code is part of the loader and
not of the enclave, it is not randomized. Randomizing
the tRTS would require signiﬁcant additional work (cf.
Section 8).
We also observed that the open source implementation
does not enforce backwards-edge CFI, i.e., the protection
of return instructions. The SGX-Shield paper describes
that backwards-edge CFI can be obtained by instrument-
ing return instructions and forcing the return address to
point to the beginning of a randomization unit. However,
without extra instrumentation, a call’s return address
will hardly be at a randomization unit boundary.
If a
call is not the last instruction of a randomization unit,
then the return address will point to the middle of the
unit. On the other hand, if a call is the last instruction in
a randomization unit, then the return address will point
to the instruction immediately after the call: there is no
guarantee that such an address marks the beginning of a
unit. To achieve correctness, SGX-Shield would have to
terminate randomization units after calls, and replace the
call with a push of the address of the next randomization
unit and a jump to the call target. However, the paper does
not describe such an instrumentation for calls. As such,
we assume that backwards-edge CFI is not present.
Hence, for our exploits explained in the remainder
of this section, we do not consider backward-edge CFI
protection or the absence of the tRTS.
7.3 Exploit
We now detail the steps of our attack following the
workﬂow presented in Section 6.1.2. We assume that the
attacker has discovered a stack overﬂow vulnerability in
the hardened enclave. Moreover, we assume the SDK
version is 1.6, as this is the version targeted by the public
implementation of SGX-Shield that we consider. Note
that our attack also applies to newer SDKs as explained
in Section 6.2.1. The general idea is to use a multi-stage
exploit, i.e., utilize our new code-reuse techniques to
initiate a code-injection attack. This is possible since
SGX-Shield enclaves feature writable code pages. As
such, the exploit will be divided in two stages: the ﬁrst
stage, based on code reuse,
injects the second-stage
code, also known as shellcode. Once arbitrary code is
injected and executed, the attacker has full control over
the enclave. To demonstrate a proof-of-concept attack,
our shellcode extracts secret cryptographic keys from the
enclave which are used for the remote attestation process.
Payload preparation. The
7.4 First Stage
Step 1:
attacker
starts by determining the offsets of asm oret and
continue execution. Since they are part of the loader,
which is not randomized (see Section 7.2), those offsets
will not change at runtime. Next, for the code-injection
attack, the attacker needs a gadget to write to memory.
In general, enclaves feature a function to copy memory
(e.g., memcpy). This can be abused to overwrite enclave
code with shellcode from untrusted memory. In the case
of SGX-Shield, such a function might be randomized, or
placed in SDK libraries that are not essential for the guest
enclave and could be erased. For this reason, we decided
to use a less convenient ROP gadget from tRTS, shown
in Listing 4, located in the do rdrand function. This
gadget writes the value in eax (32 lower bits of rax) to
the address in rcx, sets eax to 1, and returns. Our chain
repeatedly invokes this gadget to write the shellcode 4
bytes at a time, followed by invocation of the shellcode.
Since the only gadget we use preserves rdi, we can
use the simpliﬁcation described in Section 6.2.4 to only
chain CONTs. This is done only for simplicity: we have
tested the exploit with the full ORET+CONT loop and
conﬁrmed it works. The address to place the shellcode at
is taken from the writable SGX-Shield code pages. Since
the shellcode will be run from a CONT primitive, the
initial register values are controlled. Hence, the shellcode
can be simpliﬁed by omitting register initialization.
Step 2: Fake structures preparation. Before ex-
ploiting the stack overﬂow, the attacker needs to set up
the fake data structures that will be used in the exploit.
Since this exploit uses an optimized chain with only
CONTs, its data structure layout follows Figure 7. Those
structures can be within the enclave or in the untrusted
application, depending on what the attacker has control
over. The only requirement is that these addresses are
known. The attacker starts by creating a fake stack
that contains the address of continue execution
repeated n − 1 times, where n is the number of gadgets
in the chain. A sgx exception info t structure is
set up for the shellcode, with rip set to the shellcode’s
1
2
3
mov dword ptr [ rcx ] , eax
mov eax , 1
ret
Listing 4: Memory write ROP gadget from do rdrand in
tRTS.
USENIX Association
27th USENIX Security Symposium    1223
address and the other registers at the attacker’s discretion.
For each 4-byte shellcode write, the attacker sets up a
sgx exception info t structure such that:
• rax is set to the 4 code bytes that will be written.
• rcx points to the destination address for the current
4-byte code write.
• rdi points to the next sgx exception info t
structure in the write sequence; if this is the last one,
rdi points to the fake exception information for the
shellcode.
• rsp for the i-th structure points to the i-th address in
the fake stack.
• rip points to the write gadget.
Step 3: Attack execution. The attacker now trig-
gers the stack overﬂow vulnerability in the enclave.
She overwrites a return address with the address of
asm oret, and places a fake ocall context t structure
immediately after it. This structure has rdi set to the
address of the fake sgx exception info t structure
for the ﬁrst write gadget, and ocall ret set to the
address of continue execution. This will result in
continue execution being called on that ﬁrst excep-
tion information structure, which starts the chain. When
continue execution is called, it will restore the reg-
isters from the attacker’s fake exception information and
then transfer control to the address speciﬁed in the rip
ﬁeld. In this case, the write gadget will be executed with
the proper rax and rcx to place 4 bytes of the attacker’s
code at the proper location. The stack pointer in the excep-
tion information was pointed to one of the addresses in the
fake stack, which are all continue execution. There-
fore, when the write gadget returns, it will transfer control
back to continue execution. Since rdi was previ-
ously pointed to the next exception information structure,
the cycle will repeat and write the next 4 bytes of code.
Once all the writes are done, continue execution will
be called to execute the shellcode.
7.5 Second Stage
The shellcode has full control over the enclave.
In
our case, we extract the cryptographic keys used during
the remote attestation process through the shellcode in
Listing 5 in Appendix A. Once an attacker is in possession
of those keys, she can impersonate the enclave when
communicating with the remote server.
The keys are obtained with the EGETKEY leaf function.
This instruction takes a KEYREQUEST structure as input,
which speciﬁes which key has to be generated. While
most of the KEYREQUEST structure can be ﬁlled out by the
attacker, some ﬁelds are not known outside the enclave.
the shellcode has to retrieve those values
Therefore,
and complete the KEYREQUEST structure. This is done
by generating an enclave report via the EREPORT leaf.
This leaf requires two structures, which can be ﬁlled by
the attacker: TARGETINFO and REPORTDATA. Both the
EREPORT and the EGETKEY leafs only operate on enclave
memory, so the shellcode has to take care of copying data
in and out of the enclave. To simplify the shellcode, we
use the ﬁnal CONT to initialize various registers. The
shellcode workﬂow is as follows:
1. The ﬁlled TARGETINFO and REPORTDATA struc-
tures are copied from attacker-controlled memory
into enclave memory, along with a partially ﬁlled
KEYREQUEST.
2. A report is generated via the EREPORT leaf.
3. The KEYREQUEST structure is completed with the
information from the report.
4. The cryptographic key is generated with the
EGETKEY leaf.
5. The key is copied from enclave memory into
the attacker’s
attacker-controlled memory for
consumption.
6. The enclave exits back to the attacker’s code.
8 Discussion
We have shown that our attack based on the ORET
and CONT primitives is highly practical and poses a
severe threat to SGX enclave code. Further, our attack is
even able to undermine SGX-Shield, a strong hardening
scheme for SGX enclaves. Our exploitation technique
can be applied to a wide range of memory corruption vul-
nerabilities and signiﬁcantly eases SGX exploits develop-
ment. In addition, our attack is highly portable. Due to the
combination of the two exploitation primitives, our attack
is very modular and lends itself to various simpliﬁcations
and optimizations to better ﬁt into the concrete attack
situation. Consequently, we believe future mitigation
schemes must take into serious consideration the implica-
tions of leaving SDK code easily accessible to attackers.
Our attack also draws a parallel to Sigreturn Ori-
ented Programming (SROP) [4] in the SGX world.
SROP abuses the UNIX signal mechanism through the
sigreturn function, which restores the CPU context
after an exception. The attacker can control the CPU
context and chain together multiple sigreturn calls
to build more complex payloads. In a similar vein, our
attack abuses context-restoring mechanisms, but in the
context of SGX enclaves.
1224    27th USENIX Security Symposium
USENIX Association
8.1 SDK Versions and Platforms
Throughout this paper we focused on the Linux SDK
since the SDK is open source. However, we also analyzed
the Windows SDK and recognized that its low-level de-
tails are very similar to the Linux SDK. Our experiments
show that only a very small adjustment is required on
Windows: when chaining CONT to ORET, we require a
jump to the continue execution callsite rather than the
function itself. This is because the exception context is
passed in rcx on Windows - a register which is not directly
controllable through ORET. However, at the callsite, rcx
is set based on values that can be controlled via ORET.
While analyzing the low-level internals of our prim-
itives in the Linux SDK, we also noticed several differ-
ences between SDK versions that inﬂuence our exploits:
• Setting the instruction pointer in asm oret differs
before and after version 2.0. However, the ORET
primitive is still usable in both cases.
• In SDK version from 2.0 onwards, asm oret per-
forms some additional operations before restoring
the registers. Thus, the instructions that have to be
skipped differ.
• In SDKs prior to 1.6, continue execution suffers
from a bug that results in registers r8 to r15 not being