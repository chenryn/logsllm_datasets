时候，也是通过Docker提供的客户端进行了封装，并向服务端发起API请求。
使用示例
262
项目官方网站为https://coreos.com/，代码在https://github.com/coreos 维护。
可见，所提供的方法跟Docker提供的命令都十分类似。实际上，在执行Docker命令的
打开 Python的终端，首先创建一个 Docker客户端连接：
2第三部分高级话题
1.CoreOs
b41414af')
>>>c.start(container='a8439e4c8e64a94a287d408fdc3ff9a0b4a8577fe3b5e32975b790af
u'Warnings':None)
>>>print(container)
通过create_containerO方法来创建一个容器，之后启动它：
621e51ab795c9fd6')]
u'ubuntu:latest'
[{u'status':
>>>c.containers()
0ccbb7153d17f5',u'Size:01]
[u'ubuntu:latest'],u'Id':u'5506de2b643be1e6febbf3b8a240760c6843244c41e12aa2f6
c35d77bb609b9257ffb2640845ec05018e3d96cb939f68d0e19127f1723',u'RepoTags:
>>>c.images()
通过imagesO和containersO方法可以查看本地的镜像和容器的列表：
(u'Id':u'a8439e4c8e64a94a287d408fdc3ff9a0b4a8577fe3b5e32975b790afb41414af
[{u'Created':
u'IPv4Forwarding':1)
>>container=c.create_container（image=ubuntu:latest',command='bash')
u'Debug':O,u'NEventsListener':O,u'DriverStatus':[[u'Root Dir',u'/var/lib/
u'/usr/bin/docker',
(u'KernelVersion':u'3.13.0-24-generic',
>>>c.info()
通过infoO方法查看Docker系统信息：
>>>importdocker
$sudo python
其他项目
1414108439,
u'up5seconds
[u'Dirs',u'204*]]
u'SwapLimit:0,
u'Ports':[],
u'Containers':2,
u'VirtualSize':199257566,u'ParentId':u'22093
u'OperatingSystem':u'Ubuntu14.04.1LTS
u'Driver':
u'Created':
u'NFd':19,
u'aufs',
u'Images':200,u'InitPath
1415086513,
u'IndexServerAddress'
u'MemoryLimit':
u'native-0.2
u'Image
---
## Page 277
的一个例子，十分简单易懂。
的连接关系，通过一条简单的命令完成部署。
较多之后，通过手动写脚本来管理已经变得很不方便了。
和db服务容器，同时需要将它们连接起来。当容器数量
个容器并将它们联合的需求，比如部署一个web服务容器
12月发起，目前已经正式发布了1.0版本。
行使用。
工具，CoreOS也将适用于在大规模集群环境中进
键值数据库）feet（CoreOS集群的管理工具）等
稳定的无缝升级。配合etcd（一套分布式高可用的
间，系统分区是只读状态，利用主从分区支持更
隔离，从而提高了系统的安全性。此外，运行期
包管理工具，而将所有应用都进行容器化，彼此
复杂度。
灵活的应用部署能力来简化数据中心的维护成本和
量级容器化Linux发行版，通过轻量的系统架构和
起，
.Fig项目正是要解决这个问题，它在同一个配置文件中可以定义依赖的镜像和容器之间
用户在使用Docker的过程中往往会碰到同时部署多
CoreOS基于一套精简的Linux环境，不使用
例如，下面的Fig配置文件（YAML格式）给出了同时使用Web服务容器和db服务容器
Fig项目基于Python语言，由Docker公司在2013年
该项目目前得到了KPCB等多家基金的投资
CoreOS项目目标是提供一个基于Docker的轻
：目前已经正式发布首个稳定版本，如图21-10所示。
db:
web:
项目官方网站为http://www.fig.sh，代码在https://github.com/docker/fg维护。
2.Fig
CoreOS项目基于Python语言，遵循Apache2.0许可，由CoreOS团队在2013年7月发
image:postgres
ports:
links:
command:python app.py
build:
“0008:0008
第21章Docker相关项目263
图21-10CoreOS项目
etcd
CoreOs Host
docker
---
## Page 278
成配置文件；另外一个是将应用输出的日志信息重定向到STDOUT和STDERR。
面的管理成本，目前代码在https://github.com/jwilder/dockerize 维护。
息；另外一个是应用运行时候的输出日志信息。dockerize是一个Go程序，试图简化这两方
容器运行一个cirros镜像：
使用模板来管理Docker容器，如图21-11所示。
此外，还支持通过Stack管理引擎Heat子项目来
其计算服务（Nova）已经支持了对Docker的驱动
多子项目已经在业界产生了诸多影响。
主要基于Python语言实现。该项目孵化出来的众
Rackspace等众多企业的大力支持。
在http://www.openstack.org。项目遵循Apache许可，受到包括IBM、Cisco、AT&T、HP、
264第三部分高级话题
它主要可以提供两个功能，一是对于依赖于配置文件的应用，能自动提取环境变量并生
例如，下面的Heat模板定义了使用Docker
项目的目标是搭建一套开源的架构即服务（InfrastructureasaService，IaaS）实现方案
OpenStack目前除了可以管理众多虚机外
下面给出一个简单的例子，比如要创建一个Nginx镜像，标准的Dockerfile内容为：
一般来说，要将一个应用放到容器里，需要考虑两方面的因素，
4.dockerize
heat_template_version:2013-05-23
OpenStack是近些年Linux基金会发起的，最受欢迎的云开源项目。项目的官方网站
resources:
3.OpenStack支持
写好配置文件后，用户可以通过执行figup命令来自动启动相应容器，完成部署。
my_docker_container:
my_instance:
image: cirros
docker_endpoint: ( get_attr: [my_instance, first_address] }
type: DockerInc::Docker::Container
properties:
type:Os::Nova::Server
user_data:#include https://get.docker.io
flavor:ml.large
image:ubuntu-precise
key_name:ewindisch_key
Piugin API
图21-11OpenStack支持Docker
Heat
一是应用依赖的配置信
Nova
docker-rnegistry
ContainerB
---
## Page 279
应用配置文件，并重定向日志文件输出到标准输出。
首先，创建配置模板文件为default.tmpl，内容是：
RUN echo "deb-src http://ppa.launchpad.net/nginx/stable/ubuntu trusty main">>
RUN echo "deb http://ppa.launchpad.net/nginx/stable/ubuntu trusty main">/etc/
编辑新的Dockerfile内容为：
该模板将接收来自环境变量PROXY_URL的值。
使用dockerize，则需要在最后的CMD命令中利用dockerize进行封装，利用模板生成
/etc/apt/sources.list.d/nginx-stable-trusty.list
apt/sources.list.d/nginx-stable-trusty.list
#安装Nginx
FROMubuntu:14.04
server{
CMDnginx
EXPOSE 80
RUN echo "daemon off;">>/etc/nginx/nginx.conf
RUN apt-get install -y nginx
RUNapt-getupdate
/etc/apt/sources.list.d/nginx-stable-trusty.list
apt/sources.list.d/nginx-stable-trusty.list
RUN echo"deb http://ppa.launchpad.net/nginx/stable/ubuntu trusty main">/etc/
#安装Nginx
FROM ubuntu:14.04
location/
#Make site accessible from http://localhost/
root /usr/share/nginx/html;
listen [::]:80 default_server ipv6only=on;
listen 80 default_server;
server_name localhost;
index index.html index.htm;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set _header Host Shost;
proxy_set_header X-Real-IP Sremote_addr;
proxy_paSS(.Env.PROXY_URL };
access_log off;
第21章Docker相关项目265
---
## Page 280
lightweight）的网络服务库，并且支持In-memory Go channel、Unix socket、RawTCP、TLS、
似于已有的各种消息系统，
言里的一个概念，为实现并发情况下不同 goroutine之间交互数据。libchan所实现的功能类
能性，比如实现多种平台（包括Windows平台）之间容器的迁移。
步将依赖LXC的底层实现迁移到libcontainer上。该项目将为容器技术的发展带来更大的可
并得到了包括RedHat、Google、Canonical、Parallels等多家公司的支持。Docker也计划逐
libcontainer现在已经整合了Parallels公司所支持的libct项目（https://github.com/xemul/libct），
上。libcontainer项目则试图为应用提供统一的一套API，让它们无需关心具体的容器实现。
种容器技术可以有自己的实现，这就造成其中的应用需要关心是运行在哪种容器和平台
处于快速发展阶段。
件，并且日志重定向到了标准输出：
的位置。
266第三部分高级话题
libcontainer项目的目标是实现容器技术的统一API。2013年Linux内核3.12的推出，
libchan项目是试图在不同的网络服务之间打造一套“channel”系统。channel是Go语
libchan 和 libswarm 项目都是为了Docker 容器集群服务的。
这三个项目都是2014年6月Docker团队在DockerCon大会上正式宣布的项目，
5.libcontainer、libchan、libswarm
-dnginx
$ sudo docker run -p 80:80 -e PROxY_URL="http://jasonwilder.com" --name nginx
创建镜像后，通过如下的方式启动一个容器，整个过程无需手动添加Nginx的配置文
最后的CMD命令中利用-template参数指定了配置模板位置，以及生成的配置文件
nginx/error.lognginx
sites-available/default
CMD dockerize
EXPOSE80
ADDdefault.tmpl/etc/nginx/sites-available/default.tmpl
RUN tar-C/usr/local/bin-xvzf dockerize-linux-amd64-v0.0.1.tar.gz
RUN wget https://github.com/jwilder/dockerize/releases/download/v0.0.1/
RUN echo"daemon off;">>/etc/nginx/nginx.conf
RUN apt-get install-y wget nginx
RUN apt-get
update
-template/etc/nginx/sites-available/default.tmpl:/etc/nginx/
，但它宣称将打造适合现代各种微型并发服务的极轻量级（ultra-
-stdout /var/log/nginx/access.log -stderr /var/log/
目前还
---
## Page 281
这毫无疑问是整个信息技术产业发展的大好事！
支持，都证明了在某种意义上Docker在站稳脚跟之后，已经开始引导整个技术体系的变革，
外，众多编程开发上的技术支持，也将加速Docker应用的大量产生。
头支持的Kubermnetes 将在一定程度上缓解这个问题的难度，但仍不能说解决了这个挑战。此
大规模的容器管理，将是一个颇有挑战的难题。不断出现的各种方案，特别是有众多IT巨
Docker的技术优势。
手级应用”（killing apps）。这些项目充分结合了Docker 技术的特点，能够充分地发挥出使用
济体系往往更为关键。
容器管理和编程开发等方向。
21.6
篇幅所限，笔者不在此一
Kubernetes提供覆盖网络支持；SocketPlane试图将软件定义网络技术引人容器管理等。由于
com/zettio/weave）创建一个虚拟网络来连接部署在多台主机上的Docker容器；Flannel为
系统实现的项目的冲突，例如kubernetes等。
为一个功能模块与 libswarmn 对接。这是一个很宏达的目标，但是可能会引发与已有自己基础
务，包括服务发现、DNS。libswarm实际上是试图实现一套基础系统，其他各种集群服务作
可以在同一机器上同时管理运行在不同主机上的Docker容器，任意的替换集群中的各种服
OpenStackNova、GoogleCompute等能想到的各种服务（大部分还没有实现）。使用它，用户
件。其目标组件包括Docker Server、Docker Client、SSH tunnel、Etcd、SkyDNS、Mesos、
分布式系统中各种服务组件之间互相通信的标准接口，并且试图实现一整套的网络服务组
HTTP2/SPDY、Websocket等多种协议。
一项新兴技术能否成功，技术自身的设计、实现固然重要，但围绕技术的生态环境和经
在具体的生产环境中使用Docker，
·libswarm项目基于libchan项目，目标是一套组件网络服务的最小工具集。它定义了在
最后，包括CoreOS、Fig等特色项目的出现，以及OpenStack这类项目对Docker快速
基于Docker的平台即服务和持续集成这两大方面，是笔者认为Docker技术的所谓“杀
笔者很欣喜地看到，Docker无疑已经得到了大量的认同和支持。
本章介绍了围绕Docker生态环境的一些热门技术项目，包括云平台构建、持续集成、
除了这些项目外，还有一些项目专注于Docker周边的功能，例如Weave（https://github.
libswam项目网址为：https://github.com/docker/libswarm。
libchan项目网址为：https://github.com/docker/libchan。
libcontainer项目网址为：https://github.com/docker/libcontainer。
本章小结
一介绍，感兴趣的读者可以自行查阅相关资料。
，则无法绕开容器管理和编程开发这两种需求。特别是
第21章Docker相关项目
267
---
## Page 283
售
■附录DDocker资源链接
附录B
■附录A常见问题汇总
附
Docker命令查询
常见仓库
录
口
无
---
## Page 284
层文件。
container目录存放容器信息，graph目录存放镜像信息，aufs目录下存放具体的镜像
=true）命令。
A.1
chlia
口尽量选取满足需求但较小的基础系统镜像，例如大部分时候可以选择debian：wheezy
答：整体原则上，尽量保持镜像功能的明确和内容的精简，要点包括：
4.构建Docker镜像应该遵循哪些原则？
答：与Docker相关的本地资源都存放在/var/lib/docker/目录下，其中
3.本地的镜像文件都存放在哪里？
答：可以使用sudodockerrunIMAGEenv命令。
2.如何查看镜像支持的环境变量？
答：可以使用 sudo docker rmi $（sudo docker images -q -f dangling
1.如何批量清理临时镜像文件？
镜像，仅有85MB大小。
镜像相关
常见问题汇总
附录A
---
## Page 285
published fore7d817698b6f，是什么意思？
止容器。
所有数据。
的数据也不会丢失，还可以通过dockerstart 命令来启动它。只有删除掉容器才会清除
A.2
口创建镜像时 Dockerfile 要指定正确的 EXPOSE的端口。
7.使用“dockerport”命令映射容器的端口时，
答：
答：使用docker logs 命令，后面跟容器名称或ID 信息。
6.很多应用容器都是默认后台运行的，怎么查看它们的输出和日志信息？
答：按Ctrl-p Ctr1-a。如果按Ctrl-c往往会让容器内应用进程终止，进而会终
5.如何临时退出一个正在交互的容器的终端，而不终止它？
答：参考本书第21章中介绍的pipwork工具。
4.如何给容器指定一个固定IP地址，而不是每次重启容器IP地址都会变？
3.如何清理批量后台停止的容器？
答：可以使用 sudo docker kill $（sudo docker ps-q）命令。
2.如何停止所有正在运行的容器？
答：容器退出后会处于终止（exited）状态，此时可以通过dockerps-a查看。其中
1.容器退出后，通过docker ps命令查看不到，数据会丢失么？
口使用Dockerfile创建镜像时候要添加.dockerignore文件或使用干净的工作目录。
口如果安装应用时候需要配置一些特殊的环境变量，在安装后要还原不需要保持的变量值。
口从安全角度考虑，应用要尽量使用系统的库和依赖。
口安装各个软件时候要指定准确的版本号，并避免引人不需要的依赖。
口清理编译生成文件、安装包的缓存等临时文件。
容器相关
，系统报错Error:No public port"80*
附录A常见问题汇总
271
---
## Page 286
/etc/sysconfig/docker。Ubuntu下面的配置文件内容如下，读者可以参考配。（如果出
等的管理。因此，注册服务器利用注册索引来实现认证等管理。
服务器是存放实际的镜像文件的地方。注册索引则负责维护用户的账号、权限、搜索、标签
memory[=MEMORY]参数来调整容器使用内存的大小。
库的信任。
A.3
时候，可以使用-c|--cpu-shares[=0】参数来调整容器使用cPU的权重；使用-m|--
A.4
docker.com/articles/using_supervisord/。
些额外的进程管理机制，比如 supervisord来管理所运行的进程。可以参考https://docs.
272
答：Ubuntu系统的配置文件是/etc/default/docker，Centos系统的配置文件放在
编辑Docker配置文件，在其中添加：
答：Docker自1.3.0版本往后，加强了对镜像安全性的验证，
1.Docker的配置文件放在哪里，如何修改配置？
之后，重启Docker服务即可。
DOCKER_oPTs="--insecure-registry dl.dockerpool,com:5000"
2.从非官方仓库（例如dl.dockerpool.com）下载镜像时候，有时候会提示“Error：
答：首先，仓库是存放一组关联镜像的集合，比如同一个应用的不同版本的镜像。注册
1.仓库（Repository）、注册服务器（Registry）、注册索引（Index）有何关系？
答：在使用dockercreate命令创建容器或使用dockerrun创建并启动容器的
9.如何控制容器占用系统资源（CPU、内存）的份额？
答：一般并不推荐在同一个容器内运行多个应用进程。如果有类似需求，可以通过一