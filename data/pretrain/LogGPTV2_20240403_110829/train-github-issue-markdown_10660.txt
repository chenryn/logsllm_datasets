Is sortrows() running as fast as it should? I have no deep knowledge of the
theoretical performance possibilities for a "sortrows()" algorithm vs. a
traditional vector sort algorithm, but I'm finding that lexicographically
sorting an N-by-2 matrix is MUCH slower than sorting an N-by-1 vector.
For example, on my machine, sorting a random vector of 20 million Float64s
takes about 2 seconds. Sorting a 20 million by 2 matrix, using sortrows(),
takes about 250 seconds.
Is there any reason why lexicographic sorting should not have N * log(N)
performance? If its N * log(N), then sortrows() should take only about 2 *
log(2) more time than sort() on a vector.
For what its worth, @time reports that a meaningful chunk of the running time
(10%) is garbage collection .
For reference, here's my versioninfo()  
julia> versioninfo()  
Julia Version 0.3.4  
Commit `3392026`* (2014-12-26 10:42 UTC)  
Platform Info:  
System: Linux (x86_64-redhat-linux)  
CPU: Intel(R) Xeon(R) CPU E7-8891 v2 @ 3.20GHz  
WORD_SIZE: 64  
BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Sandybridge)  
LAPACK: libopenblas  
LIBM: libopenlibm  
LLVM: libLLVM-3.3