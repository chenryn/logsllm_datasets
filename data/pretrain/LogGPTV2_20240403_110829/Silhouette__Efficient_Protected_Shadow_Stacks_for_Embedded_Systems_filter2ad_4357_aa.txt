title:Silhouette: Efficient Protected Shadow Stacks for Embedded Systems
author:Jie Zhou and
Yufei Du and
Zhuojia Shen and
Lele Ma and
John Criswell and
Robert J. Walls
Silhouette: Efficient Protected Shadow Stacks 
for Embedded Systems
Jie Zhou, Yufei Du, and Zhuojia Shen, University of Rochester; Lele Ma, 
University of Rochester and College of William and Mary; John Criswell, 
University of Rochester; Robert J. Walls, Worcester Polytechnic Institute
https://www.usenix.org/conference/usenixsecurity20/presentation/zhou-jie
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Silhouette: Efﬁcient Protected Shadow Stacks for Embedded Systems
Jie Zhou1, Yufei Du1, Zhuojia Shen1, Lele Ma1,2∗
, John Criswell1, and Robert J. Walls3
1University of Rochester
2College of William & Mary
3Worcester Polytechnic Institute
Abstract
Microcontroller-based embedded systems are increasingly
used for applications that can have serious and immediate
consequences if compromised—including automobile con-
trol systems, smart locks, drones, and implantable medical
devices. Due to resource and execution-time constraints, C
is the primary language used for programming these devices.
Unfortunately, C is neither type-safe nor memory-safe, and
control-ﬂow hijacking remains a prevalent threat.
This paper presents Silhouette: a compiler-based defense
that efﬁciently guarantees the integrity of return addresses,
signiﬁcantly reducing the attack surface for control-ﬂow hi-
jacking. Silhouette combines an incorruptible shadow stack
for return addresses with checks on forward control ﬂow and
memory protection to ensure that all functions return to the
correct dynamic caller. To protect its shadow stack, Silhouette
uses store hardening, an efﬁcient intra-address space isolation
technique targeting various ARM architectures that leverages
special store instructions found on ARM processors.
We implemented Silhouette for the ARMv7-M architecture,
but our techniques are applicable to other common embed-
ded ARM architectures. Our evaluation shows that Silhouette
incurs a geometric mean of 1.3% and 3.4% performance over-
head on two benchmark suites. Furthermore, we prototyped
Silhouette-Invert, an alternative implementation of Silhouette,
which incurs just 0.3% and 1.9% performance overhead, at
the cost of a minor hardware change.
1 Introduction
Microcontroller-based embedded systems are typically de-
veloped in C, meaning they suffer from the same memory
errors that have plagued general-purpose systems [4, 59, 67].
Indeed, hundreds of vulnerabilities in embedded software
have been reported since 2017.1 Exploitation of such systems
∗Work done when the author was visiting the University of Rochester.
1Examples include CVE-2017-8410, CVE-2017-8412, CVE-2018-3898,
CVE-2018-16525, CVE-2018-16526, and CVE-2018-19417.
can directly lead to physical consequences in the real world.
For example, the control system of a car is crucial to pas-
senger safety; the security of programs running on a smart
lock is essential to the safety of people’s homes. As these
systems grow in importance,2 their vulnerabilities become
increasingly dangerous [40, 54, 61].
Past work on control-ﬂow hijacking attacks highlights the
need to protect return addresses, even when the software em-
ploys other techniques such as forward-edge control-ﬂow
integrity (CFI) [19, 20, 25, 29, 37]. Saving return addresses
on a separate shadow stack [18] is a promising approach, but
shadow stacks themselves reside in the same address space
as the exploitable program and must be protected from cor-
ruption [18, 25]. Traditional memory isolation that utilizes
hardware privilege levels can be adapted to protect the shadow
stack [70], but it incurs high overhead as there are frequent
crossings between protection domains (e.g., once for every
function call). Sometimes information hiding is used to ap-
proximate intra-address space isolation as it does not require
an expensive context switch. In information hiding, security-
critical data structures are placed at a random location in
memory to make it difﬁcult for adversaries to guess the ex-
act location [43]. Unfortunately, information hiding is poorly
suited to embedded systems as most devices have a limited
amount of memory that is directly mapped into the address
space—e.g., the board used in this work has just 384 KB of
SRAM and 16 MB of SDRAM [66].
This paper presents Silhouette: an efﬁcient write-protected
shadow stack [28] system that guarantees that a return in-
struction will always return to its dynamic legal destination.
To provide this guarantee, Silhouette combines a shadow
stack, an efﬁcient intra-address space isolation mechanism
that we call store hardening, a Control-Flow Integrity [1]
implementation to protect forward-edge control ﬂow, and a
corresponding Memory Protection Unit (MPU) conﬁguration
to enforce memory access rules. Utilizing the unprivileged
store instructions on modern embedded ARM architectures,
2Both Amazon and Microsoft have recently touted operating systems
targeting microcontroller-based embedded devices [16, 52]
USENIX Association
29th USENIX Security Symposium    1219
store hardening3 creates a logical separation between the
code and memory used for the shadow stack and that used
by application code. Unlike hardware privilege levels, store
hardening does not require expensive switches between pro-
tection domains. Also, unlike the probabilistic protections of
information hiding, protections based on store hardening are
hardware-enforced. Further, the forward-edge control-ﬂow
protection prevents unexpected instructions from being ex-
ecuted to corrupt the shadow stack or load return addresses
from illegal locations. Finally, the MPU conﬁguration en-
forces memory access rules required by Silhouette.
We focus on the ARMv7-M architecture [12] given the
architecture’s popularity and wide deployment; however,
our techniques are also applicable to a wide range of
ARM architectures, including ARMv7-A [11] and the new
ARMv8-M Main Extension [13]. We also explore an alterna-
tive, inverted version of Silhouette that promises signiﬁcant
performance improvements at the cost of minor hardware
changes; we call this version Silhouette-Invert. We summa-
rize our contributions as follows:
• We built a compiler and runtime system, Silhouette, that
leverages store hardening and coarse-grained CFI to pro-
vide embedded applications with efﬁcient intra-address
space isolation and a protected shadow stack.
• We have evaluated Silhouette’s performance and code
size overhead and found that Silhouette incurs a geo-
metric mean of 1.3% and 3.4% performance overhead,
and a geometric mean of 8.9% and 2.3% code size over-
head on the CoreMark-Pro and the BEEBS benchmark
suites, respectively. We also compare Silhouette to two
highly-related defenses: RECFISH [70] and µRAI [5].
• We prototyped and evaluated the Silhouette-Invert vari-
ant and saw additional improvements with an average
performance overhead measured at 0.3% and 1.9% by
geometric mean and code size overhead measured at
2.2% and 0.5%, again, on CoreMark-Pro and BEEBS.
In addition to the above contributions, we observe that store
hardening could be extended to protect other security-critical
data, making Silhouette more ﬂexible than other approaches.
For example, Silhouette could be extended to isolate the sen-
sitive pointer store for Code-Pointer Integrity (CPI) [43]. Sim-
ilarly, it could be used to protect kernel data structures within
an embedded operating system (OS) such as Amazon FreeR-
TOS [16].
2 ARMv7-M Architecture
Our work targets the ARMv7-M architecture [12]. We brieﬂy
summarize the privilege and execution modes, address space
3uXOM [44] independently developed a similar technique for imple-
menting execute-only memory. We compare the implementation differences
between store hardening and that of uXOM in Section 6.2.
layout, and memory protection features of the ARMv7-M.
Embedded Application Privilege Modes ARMv7-M sup-
ports the execution of both privileged and unprivileged code.
Traps, interrupts, and the execution of a supervisor call (SVC)
instruction switches the processor from unprivileged mode
to privileged mode. Unlike server systems, embedded appli-
cations often run in privileged mode. Such applications also
frequently use a Hardware Abstraction Layer (HAL) to pro-
vide a software interface to device-speciﬁc hardware. HAL
code is often generated by a manufacturer-provided tool (e.g.,
HALCOGEN [68]), is linked directly into an application, and
runs within its address space.
Address Space ARMv7-M is a memory-mapped architec-
ture, lacking support for virtual memory and using a 32-bit
address space. While the exact layout varies between hard-
ware, the address space is generally divided into 8 sections.
The Code section holds code and read-only data; it usually
maps to an internal ROM or ﬂash memory. An SRAM section
along with two RAM sections are used to store runtime muta-
ble data, e.g., the stack, heap, and globals. The Peripheral
and two Device regions map hardware timers and I/O device
registers. The System region maps system control registers
into the processor’s physical address space.
A security-critical subsection of System is the System Con-
trol Space, which is used for important tasks such as system
exception management. It also contains the address space for
the Memory Protection Unit (MPU) [12]. Since ARMv7-M is
a memory-mapped architecture, all of the security-critical reg-
isters, such as MPU conﬁguration registers, are also mapped
to the System region.
Memory Protection Unit An ARMv7-M-based device can
optionally have a Memory Protection Unit. The MPU is a
programmable memory protection component that enforces
memory access permissions [9, 12]. The MPU allows privi-
leged software to create a set of memory regions which cover
the physical address space; the permission bits on each region
dictate whether unprivileged and privileged memory accesses
can read or write the region. The number of conﬁgurable MPU
regions is implementation speciﬁc, e.g., the target device in
this paper supports 8 regions [65]. The memory regions con-
ﬁgured by the MPU do not need to exactly match the default
memory regions described in the Address Space paragraph.
The size of each MPU-conﬁgured region varies from 32 bytes
to 4 GB.
Currently, the MPU design makes several assumptions
about how memory access permissions are to be conﬁgured.
First, it assumes that privileged software should have as many
or more access rights to memory than unprivileged code. Con-
sequently, the MPU cannot be conﬁgured to give unprivileged
code more access to a memory region than privileged code.
1220    29th USENIX Security Symposium
USENIX Association
Second, the MPU assumes that certain memory regions—e.g.,
the System region—should not be executable, and it prevents
instruction fetches from these regions regardless of the MPU
conﬁguration. Third, the MPU design assumes that unprivi-
leged code should not be able to reconﬁgure security-critical
registers on the processor. Therefore, the MPU will prevent
unprivileged code from writing to memory regions that in-
clude memory-mapped device registers, such as those that
conﬁgure the MPU.
3 Threat Model and System Assumptions
While embedded code can be conceptually divided into appli-
cation code, libraries, kernel code, and the hardware abstrac-
tion layer, there is often little distinction at runtime between
these logical units. Due to performance, complexity, and real-
time considerations, it is quite common for all of this code
to run in the same address space, without isolation, and with
the same privilege level [24, 42, 44]. For example, under the
default conﬁguration of Amazon FreeRTOS (v1.4.7), all code
runs as privileged in ARMv7-M [16]. These embedded char-
acteristics heavily inform our threat model and the design
decisions for Silhouette.
Our threat model assumes a strong adversary that can ex-
ploit a memory error in the application code to create a
write-what-where style of vulnerability. That is, the adver-
sary can attempt to write to any location in memory at any
time. The adversary’s goal is to manipulate the control ﬂow
of a program by exploiting the aforementioned memory error
to overwrite memory (e.g., a return address). Non-control
data attacks [21, 39] are out of scope of this work. Further,
we assume the adversary has full knowledge of the memory
contents and layout; we do not rely on information hiding for
protection. Our threat model is consistent with past work on
defenses against control-ﬂow hijacking.
We assume the target system runs a single bare-metal appli-
cation statically linked with all the library code and the hard-
ware abstraction layer (HAL)—the latter provides a device-
speciﬁc interface to the hardware. We assume the HAL is part
of the Trusted Computing Base (TCB) and is either compiled
separately from the application code or annotated, allowing
Silhouette to forgo transformations on the HAL that might
preclude privileged hardware operations. Similarly, we as-
sume that exception handlers are part of the TCB. Further,
we assume the whole binary runs in privileged mode for the
reasons mentioned previously.
Finally, we assume the target device includes a memory
protection unit (or similar hardware mechanism) for conﬁg-
uring coarse-grained memory permissions, i.e., Silhouette is
able to conﬁgure read, write, and execute permissions for ﬁve
regions (summarized in Section 6.4) of the address space.
4
Intra-Address Space Isolation
Many security enforcement mechanisms rely on intra-address
space isolation to protect security-critical data; in other words,
the defenses are built on the assumption that application code,
under the inﬂuence of an attacker, cannot modify security-
critical regions of the address space. For example, defenses
with shadow stacks [18] need a safe region to store copies of
return addresses, and CPI [43] needs a protected region of the
address space to place its safe stack and sensitive pointer store.
Complicating matters, defenses often intersperse accesses to
the protected region with regular application code; the former
should be able to access the protected region while the lat-
ter should not. Consequently, existing mechanisms to switch
between protection domains—e.g., system calls between un-
privileged and privileged mode—are often too inefﬁcient for
implementing these security mechanisms for microcontroller-
based embedded systems. Rather than incur the performance
penalty of true memory isolation, some defenses hide the
security-critical data structures at random locations in the ad-
dress space [24, 43]. Embedded systems have limited entropy
sources for generating random numbers and only kilobytes or
megabytes of usable address space; we do not believe hiding
the shadow stack will be effective on such systems.
We devise a protection method, store hardening, for em-
bedded ARM systems utilizing unique features of a subset
of ARM architectures [11–13], including ARMv7-M. These
architectures provide special unprivileged store instructions
for storing 32-bit values (STRT), 16-bit values (STRHT), and
8-bit values (STRBT). When a program is running in the pro-
cessor’s privileged mode, these store instructions are treated
as though they are executed in unprivileged mode, i.e., the
processor always checks the unprivileged-mode permission
bits conﬁgured in the MPU when executing an STRT, STRHT,
or STRBT instruction regardless of whether the processor is ex-
ecuting in privileged or unprivileged mode. We leverage this
feature to create two protection domains. One unprivileged
domain contains regular application code and only uses the
unprivileged STRT, STRHT, and STRBT instructions for writing
to memory. The second privileged domain uses regular (i.e.,
privileged) store instructions. As code from both domains
runs in the same, privileged, processor mode, this method
allows us to enforce memory isolation without costly context
switching.
To completely isolate the data memory used by the un-
privileged and privileged domains, two additional features
are needed. First, there needs to be a mechanism to prevent
unprivileged code from jumping into the middle of privileged
code; doing so could allow unprivileged code to execute a
privileged store instruction with arbitrary inputs. We can use
forward-edge CFI checks to efﬁciently prevent such attacks.
Second, a trusted code scanner must ensure that the code
contains no system instructions that could be used to modify
important program state without the use of a store instruction.
USENIX Association
29th USENIX Security Symposium    1221
Figure 1: Architecture of Silhouette and the Silhouette-Invert Variant
For example, an adversary could use the MSR instruction [12]
to change the value of the main or process stack pointer reg-
isters (MSP and PSP, respectively), effectively changing the
location of the shadow stack and potentially moving it to
an unprotected memory region. We discuss a defense that
leverages these techniques in the next section.
5 Silhouette Design
Silhouette is a compiler and run-time system that leverages
our memory isolation scheme to efﬁciently protect embed-
ded systems from control-ﬂow hijacking attacks. As Figure 1
shows, Silhouette transforms application code with four new
compiler passes placed after native code generation but before
linking the hardened object code with the hardware abstrac-
tion layer (HAL). We also explore an alternative, inverted
version of these passes that promises signiﬁcant performance
improvements at the cost of minor hardware changes; we call
this version Silhouette-Invert (see Section 5.5). Silhouette’s
new compiler passes are as follows:
1. Shadow Stack Transformation: The shadow stack