private firal char[] buffer;
for (int i = O; i = filler.length()) {
index++; 
char c = filler.charAt(index);
try{
Lhis.filler = filler;
this.data = data; 
Read-Write Lock----
index = 0;
whzle (true) ↓
WriterThread 类(WriterThread.java)
Thread.sleep (random.nextInt (3000));
data.writelc);
char c = nextchar();
大家想看就看吧，
，不过看的时候不能写喔
6常
9
---
## Page 182
当线程想要获取读访问的锁定时··.
的条件。有下面（I）～（4）的情况：
需要行细地阅读。
访问锁定与写入剧锁定的类。这个类看上去很简单，但其中又蕴含了巧妙的玄机，
ReadWriteLock 类
6
那么，终于到真正的重头戏ReadWriteLock类（List 6-5）了。这是用来提供读
为了不要引起冲突，
“读取”与“读取”之间并不会冲突。
为了保护安全性，我们必须防止下面两种冲突：
+ String.valueof(readbuf));
Systen.out.println(Thread.currentThread I) .getName() + " reads
（1）已经有线程在进行写入时，等待。
public class ReaderThread extends lhread 1
（2）已经有线程在进行读取时，不等待。
-），，
List 6-4
理由：不等待的话，会引起read-write conflict。
“写入”和“写入”的冲突（write-write conflict)。
public void run() {
public Readerrhread(Data data)
private final Data data;
理由：read-read不会造成conflict。
try {
this.data = data;
}catch (Interruptedexception e)
while （true) l
ReaderThread 类(ReaderThread. java)
char[] readbuf = data.read();
所以我们首先要恩考的，是可以获取读取锁定、写入锁定
=
---
## Page 183
入的线程数量（也就是通过writeLock 后，还没有通过writeUnlock 的线程数量），
递增，而在 writeUnlock 方法的最前面递减。writingReaders 所表示的是实例正在写
面递增，并在finally块里递减。喔，这里出现Before/Aftcr Patterm 了。
readUnlock 方法的最前面递减。readingReaders 字段所表示的是实例正在读取的线程
就是1，绝不会是2以上（一瞬间都不会）。
writeLock 后，还没有通过 writeUnlock 的线程数量。writingWriters 字段的值不是0
字段的意义，我们会在本章末的练习问题6-6讨论。
表
还没有通过readUmlock 的线程数量。readingReaders 的值一定人于或等于0。
量（通过readLock后，还没有通过readUnlock 的线程数量），相信这样读者就很
示“读取优先”。这是为了使线程的生命性不会降低所作的功劳。关于这个字段的
写入
读取
易了解该进行递增与递减操作的位置。
当线程想要获取写入用的锁定时
接下来，请看waitingWriters 字段（B）。waitingWriters 在 writeLock 方法最前
preferWriter 字段为是个标识，当值为 tnue 时，表示“写入优先”，而 false 时则
Writing Writers 字段表示实际正在进行写入操作的线程数量，也就是通过
List 6-5中注释所写的（A）、（B）、（C)，是用来强调出字段递增（++）与递减
waitingWriters 字段表示调用writeLock时，就进入wait状态的线程。关于这个
例如请看readingReaders 字段（A）。在readLock 方法的最后面递增，南在
--）处的对应关系。
readingReaders 字段表示实例正在读取的线程数量，也就是通过readLock后
ReaderWriter 类就可以满足这些条件。首先，我们先来确认字段的意义。
，我们会在本章末的练习问题6-6讨论。
会引起冲突的情况，整理成表格如表6-2所示。
（4）已经有线程在进行读取时，等待。
（3）已经有线程在进行写入时，等待，
理由：不等待的话，会引起read-write confict。
理由：不等待的话，会引起 write-write conflict。
“读取”和“写入”的冲突
不会冲突
(read-write conflict )
Read-Write Lock-
读
表6-2什么情况下会发生冲突呢
一大家想看就看吧，不过看的时候不能写喔
（ write-write conflict )
“写入”和“写入”的冲突
(read-write conflict)
“读取”和“写入”的冲突
单6草
---
## Page 184
haa多线提设研模式
这样就确信程序没有问题了。
168
public final  class  Readwritelock (
List 6-5
public synchronized void writeunlock() {
public synchronized void writelock() throws InterruptedException
public synchronized void readUnlock(l
private
private
private
private irt readingReaders =
while(writingwriters>0ll(preferWriter && waitingWriters > O)) {
notifyAll();
preferWriter = false;
writingwriters--;
writingwriters++;
waitingwriters++;
notifyAll();
preferWriter = true;
try
readingReaders--;
readingReaders++;
finally {
waitingWriters--;
wait{);
ReadWriteLock 类 (ReadWriteLock java)
boolean preferWriter =true；//写入优先的语，值为true
 int waitingwriters
int
waiti};
writingwriters =
冏川
0：
0:
/！[C）实际正在写入的线程数量减
/！（B）正在等待写入的线程数量加
/（A）实际正在读取的线程数量减1
/！（A）实际正在读取的线程数量加1
（C）实际正在写入的线程数量加]
(B)正在等待写入的线程数量减1
/！（C）..实际正在写入的线程数量
/1（B)….正在等待写入的线程数量
//（A)..实际正在读取的线程数量
：
---
## Page 185
杂在…起了。
程的冲突，保障了程序的安全性。如果安全性不佳的话，
接下来显示出的数据可以观察到内容改变了。
显示出来的样子。当 WriterThread 在写入的时候，画面显示会忽然停下来－段时间，
执行结果
在这里，reads 右方的10个字符永远是一样的对吧。
关于这点将在练习问题6-2讨论。
执行范例程序后，会出现图6-2所示的结果。
Read-Write Lock-
Thread-5 reads
Thread-4 reads
Thread-0
Thread-l
Thread-3
Thread-2
Thread-4
rhread-5
Thread-2
Thread-3 reads
Thread-1
Thread-4
Thread-3
Thread-6
Thread-5
Thread-4
Thread-3
Thread-2
Thread-1
(CTRL+C结束程序）
Thread-5
Thread-0
Thread-1
Thread-4
Thread-3
Thread-0
（中略）
Thread-0
Thread-5
Thread-2
图6-2执行范例
reads
reads
 reads
reads
reads
 reads
reads
reads
reads
reads
一大家想看就看吧，不过看的时候不能写喔
reads
reads
reads
reads
reads
reads
reads
reads
reads
reads
reads
reads
reads
reads
reads
kkkkkkkkkk
I
MMMMMMMMMM
MMMMMMMMM
MMMMMMMMMM
LLLLLLLLLL
LLLLLLLLLL
LLLLLLLLLL
LLLLLLLLLL
LLLLLLLLLL
LLLLLLLLLL
LLLLLLLLLI
aaaaaaaaaa
aaaaaaaaaa
aaaaaaaaaa
aaaaaaaaaa
aaaaaaaaaa
aaaaaaaaaa
★★★女★★★★
kkkkkkkkkk
aaaaaaaaaa
★*★★★★★★★★
MMMMMMMMMM
MMMMMMMMMM
这是ReaderThread 将读到的内容
，可能就会有不同的字符混
这表示我们成功防止了线
鲜6草
---
## Page 186
或写入的操作”。以程序表达的话，就是下面的样子：
写入，则会发生 write-write conflict了。于是，警戒条件是“没有线程正在执行读取
警戒条件有·点不同。这里，无论有其他线程正在读取，或正在写入，都不可以放行。
就表示可以开始进行实际进行写入的操作了。
writeLock方法
有线程正在执行写入的操作”。以程序表达的话，就是下面的样子：
写入，而这里开始读取的话，就会发生read-write conflict了。丁是，警戒条件是“没
取并不会造成影响，但绝对不能有线程正在执行写入的操作。如果有其他线程正在
就表示可以开始进行实际进行读取的操作了。
readLock 方法
条件。我们马上米看看吧。
检验警戒条件
°(++)
（++）。
如果有其他线程正在读取，会发生read-write conflict；而如果有其他线程正在
那么，可以开始实际进行写入操作的警戒条件该是什么呢？与teadLock方法的
当线程实际进行写入的操作前，会调用writeLock方法。线程从这个方法退出
那么，可以止始实际进行读取操作的警戒条件该是什么呢？有其他线程也正读
从 writeLock 方法退出之前，要将实际进行写入的线程数量 writingWriters 递增
while条件式是警戒条件的逻辑否定，所以写成：
readingReaders <= O && writingWriters <=
从 readLock 方法退出之前，要将实际进行读取的线程数量readingReaders 递增
while 语句的条件式是警戒条件的逻辑否定，所以写成：
writingWriters <= 0
当线程实际进行读取的操作前，会调用readLock 方法。当线程从这个方法退出，
相信读者已经注意到，readLock方法与writeLock 方法都使用了Guarded
我们回过头来看 List 6-5的 ReadWriteLock 类。
writingWriter"》O.警戒条件的逻辑否定
注意：
于这两个字段的意义，将在本章末的练习问题66讨论。
以下的说明故意省略waitingWriters 字段与 preferWriter字段的解说。关
…警戒条件
.警戒条件的逻辑否定
警戒条件
---
## Page 187
是ReadWriteLock类（见图6-3～图6-5）。
write 操作，提供了writeLock与writeUnlock。范例程序中，ReadWriteLock 参与者
操作时需要的锁定。为了完成read操作，提供了readLock与readUnlock，为了完成
ReadWriteLock（读写用锁定）参易者
态的操作（write）。范例程序中，SharedResource参与者是Data类。
SharedResource 参与者会提供有不会改变内部状态的操作（read），与会改变内部状
SharedResource（共享资源）参岛者
者是WriterThread 类。
Writer（写入者）参乌者
者是ReaderThread 类。
Reader（读取者）参乌者
Read-Write Lock Pattern 的所有参与者
ReadWriteLock 参与者提供了对 SharedResource 参与者进行 read 操作与 write
SharedResource 参与者代表 Reader 参与者与 Writer 参与者所共享的资源。
Writer 参与者会对 SharedResource 参与者进行 write。范例程序中，Writer 参与
Reader 参与者会对 SharedResource 参与者进行 read。范例程序中，Reader 参与