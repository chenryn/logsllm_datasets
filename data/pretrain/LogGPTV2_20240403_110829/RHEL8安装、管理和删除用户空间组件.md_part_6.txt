                                                                 @rhel-8-for-x86_64-appstream-rpms 117 k
    Removing unused dependencies:
     autoconf               noarch 2.69-27.el8                   @rhel-8-for-x86_64-appstream-rpms 2.2 M
    ...
    Disabling module profiles:
     php/devel
    Transaction Summary
    =========================================================================
    Remove  64 Packages
    Freed space: 193 M
    Is this ok [y/N]: y
    ```
:::
:::
:::
:::
:::
::: section
::: titlepage
# []{#removing-rhel-8-content_using-appstream.html#resetting-module-streams_removing-rhel-8-content}重置模块流 {.title}
:::
重置模块是将所有流返回到初始状态（启用或禁用）的操作。如果模块具有默认流，则该流会因为重置模块而生效。
::: itemizedlist
**流程**
-   重置模块状态：
    ``` screen
    # yum module reset module-name
    ```
    模块返回到初始状态。已启用的流和安装的配置集的信息会被清除，但没有删除安装的内容。
:::
:::
::: section
::: titlepage
# []{#removing-rhel-8-content_using-appstream.html#commands-for-removing-content_removing-rhel-8-content}删除内容的命令 {.title}
:::
这部分列出了用于删除内容的常用命令。
::: variablelist
**命令列表**
[删除软件包]{.term}
:   ``` screen
    # yum remove package
    ```
[从安装的配置集中删除软件包]{.term}
:   ``` screen
    # yum module remove module-name:stream/profile
    ```
[从活动流中删除所有软件包]{.term}
:   ``` screen
    # yum module remove --all module-name:stream
    ```
[将模块重置为初始状态]{.term}
:   ``` screen
    # yum module reset module-name
    ```
[禁用一个模块及其所有流]{.term}
:   ``` screen
    # yum module disable module-name
    ```
:::
:::
:::
[]{#managing-versions-of-appstream-content_using-appstream.html}
::: chapter
::: titlepage
# []{#managing-versions-of-appstream-content_using-appstream.html#managing-versions-of-appstream-content_using-appstream}第 6 章 管理 Application Stream 内容的版本 {.title}
:::
AppStream
存储库中的内容可以在多个版本中提供，对应于模块流。本章论述了您在以其他方式更改启用的模块流时需要执行的操作，而不仅仅是启用新模块流。
::: itemizedlist
-   ["模块依赖关系和流更改"一节](#managing-versions-of-appstream-content_using-appstream.html#modular-dependencies-and-stream-changes_managing-versions-of-appstream-content "模块依赖关系和流更改"){.xref}
    描述模块依赖关系规则。
-   ["模块化和非模块化依赖关系的交互"一节](#managing-versions-of-appstream-content_using-appstream.html#interaction-of-modular-and-non-modular-dependencies_managing-versions-of-appstream-content "模块化和非模块化依赖关系的交互"){.xref}
    提供有关模块流依赖关系如何影响对软件包依赖项处理的详细信息。
-   ["重置模块流"一节](#managing-versions-of-appstream-content_using-appstream.html#resetting-module-streams_managing-versions-of-appstream-content "重置模块流"){.xref}
    提供将模块重置至其初始状态的步骤。
-   ["禁用一个模块的所有流"一节](#managing-versions-of-appstream-content_using-appstream.html#disabling-all-streams-of-a-module_managing-versions-of-appstream-content "禁用一个模块的所有流"){.xref}
    提供完全禁用模块及其流的步骤。
-   ["切换到更新的流"一节](#managing-versions-of-appstream-content_using-appstream.html#switching-to-a-later-stream_managing-versions-of-appstream-content "切换到更新的流"){.xref}
    提供更改为之后的模块流的步骤。
:::
::: section
::: titlepage
# []{#managing-versions-of-appstream-content_using-appstream.html#modular-dependencies-and-stream-changes_managing-versions-of-appstream-content}模块依赖关系和流更改 {.title}
:::
传统上，提供内容的软件包依赖于其他软件包，并且通常指定所需的依赖项版本。对于模块中包含的软件包，此机制同样适用，但软件包及其特定版本分组到模块和流中会提供进一步的限制。另外，模块流可以声明其他模块流的依赖关系，独立于它们包含和提供的软件包。
在使用软件包或模块执行任何操作后，所有底层安装的软件包的整个依赖项树都必须满足软件包声明的所有条件。另外，必须满足所有模块流依赖项。
因此：
::: itemizedlist
-   启用模块流可能需要启用更多模块的流。
-   安装模块流配置集或从流安装软件包需要启用更多模块的流并安装更多软件包。
-   禁用一个模块的流可能需要禁用其他模块流。不会自动删除任何软件包。
-   删除软件包可能需要删除其他软件包。如果这些软件包由模块提供，模块流会保持启用状态，以准备进一步安装，即使这些流中没有安装任何软件包。这会镜像未使用的
    yum 存储库的行为。
:::
当已启用同一模块的另一个流时，无法启用模块流。要切换流，请按照
["切换到更新的流"一节](#managing-versions-of-appstream-content_using-appstream.html#switching-to-a-later-stream_managing-versions-of-appstream-content "切换到更新的流"){.xref}
中的操作过程进行。另外，还可重置模块，然后启用新流。在切换到其他流前删除从流安装的所有软件包会阻止系统进入在没有提供它们的存储库或流的情况下安装软件包的状态。
从技术上讲，重置模块不会自动更改任何已安装的软件包。删除之前流提供的软件包以及依赖于它们的任何软件包都是一种明确的手动操作。
:::
::: section
::: titlepage
# []{#managing-versions-of-appstream-content_using-appstream.html#interaction-of-modular-and-non-modular-dependencies_managing-versions-of-appstream-content}模块化和非模块化依赖关系的交互 {.title}
:::
[模块依赖关系是常规](#managing-versions-of-appstream-content_using-appstream.html#modular-dependencies-and-stream-changes_managing-versions-of-appstream-content "模块依赖关系和流更改"){.link}
RPM
依赖关系之上的额外层。模块依赖关系与存储库间可能存在的依赖关系的行为相似。这意味着安装不同的软件包不仅需要解析
RPM 的依赖关系，还需要事先解决模块依赖关系。
系统将始终保留模块和流选择，除非明确指示要更改它们。模块软件包将接收目前启用的模块流中包含的提供此软件包的更新，但不会升级到另一流中包含的版本。
:::
::: section
::: titlepage
# []{#managing-versions-of-appstream-content_using-appstream.html#resetting-module-streams_managing-versions-of-appstream-content}重置模块流 {.title}
:::
重置模块是将所有流返回到初始状态（启用或禁用）的操作。如果模块具有默认流，则该流会因为重置模块而生效。
::: itemizedlist
**流程**
-   重置模块状态：
    ``` screen
    # yum module reset module-name
    ```
    模块返回到初始状态。已启用的流和安装的配置集的信息会被清除，但没有删除安装的内容。
:::
:::
::: section
::: titlepage
# []{#managing-versions-of-appstream-content_using-appstream.html#disabling-all-streams-of-a-module_managing-versions-of-appstream-content}禁用一个模块的所有流 {.title}
:::
具有默认流的模块始终会活跃一个流。当无法访问所有模块流中的内容时，可以禁用整个模块。
::: itemizedlist
**先决条件**
-   您必须了解
    [[*活跃模块流*]{.emphasis}的概念](#introduction-to-modules_using-appstream.html#module-streams_introduction-to-modules "模块流"){.link}。
:::
::: itemizedlist
**流程**
-   禁用模块：
    ``` screen
    # yum module disable module-name
    ```
    `yum`{.literal}
    请求确认，然后为所有流禁用该模块。所有模块流都不再活跃。没有安装的内容被删除。
:::
:::
::: section
::: titlepage
# []{#managing-versions-of-appstream-content_using-appstream.html#switching-to-a-later-stream_managing-versions-of-appstream-content}切换到更新的流 {.title}
:::
当您切换到更新的模块流时，该模块中的所有软件包都会被以后的版本替代。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
这个步骤只适用于以下条件。
:::
::: itemizedlist
**先决条件**
-   这个系统已被完全更新。
-   在系统中安装的软件包都比该程序库中可用软件包更新。
:::
::: orderedlist
**流程**
1.  运行以下命令，以确定您的系统是否准备切换到更新的流：
    ``` screen
    # yum distro-sync
    ```
    这个命令必须以以下信息结束：[*Nothing to
    doComplete!*]{.emphasis}如果它改为提议更改并要求确认，请仔细检查这些更改，并考虑是否要继续。如果需要，重复运行
    `yum distro-sync`{.literal}
    命令。另外，您可以拒绝推荐的修改，然后手动将您的系统改为命令返回
    [*Nothing to do.Complete!*]{.emphasis}
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在切换流前检查 `yum distro-sync`{.literal}
    结果，您可以防止更改与流切换无关的系统，因为这个过程的最后一步需要相同的命令。
    :::
2.  将活动流更改为后续流：
    ``` screen
    # yum module reset module-name
    # yum module enable module-name:new-stream
    ```
3.  同步安装的软件包以在流间进行更改：
    ``` screen
    # yum distro-sync
    ```
    如果此操作建议更改流外的内容，请仔细检查它们。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    ::: itemizedlist
    -   如果某些安装的软件包依赖于之前的流，且后续流中没有兼容的版本，[**yum**]{.strong}
        会报告依赖关系冲突。在这种情况下，使用
        `--allowerasing`{.literal}
        选项删除这些软件包，因为它们因为缺少依赖项而无法与后续流一起安装。
    -   在切换 [**Perl**]{.strong} 模块时，始终需要
        `--allowerasing`{.literal} 选项，因为基本 RHEL 8
        安装中的某些软件包依赖于 [**Perl 5.26**]{.strong}。
    -   用于解释语言的二进制扩展（通常使用 C 或
        C++）在启用新流后需要重新安装；例如，`gem`{.literal} 命令从
        `ruby`{.literal} 模块安装的某些软件包，以及 `nodejs`{.literal}
        模块中的 `npm`{.literal} 命令， `cpan`{.literal} 命令来自
        `perl`{.literal} 模块，或者来自 `php`{.literal} 模块的
        `pecl`{.literal} 命令。如需更多信息，请参阅[如何在 RHEL 8 中切换
        Ruby 流](https://access.redhat.com/articles/4422071){.link}。
    :::
    :::
:::
[或者，也可从当前流中删除安装的所有模块内容 ，重置模块
，然后安装新流](#removing-rhel-8-content_using-appstream.html#removing-installed-modular-content_removing-rhel-8-content "删除安装的模块内容"){.link}。
:::
:::