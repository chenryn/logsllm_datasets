### 1.2.3.2 Native Browser Filters

#### History
- **XSS Filter (Internet Explorer)**
  - Introduced in Internet Explorer 8, the XSS Filter is designed to block reflected cross-site scripting (XSS) attacks by applying regular expressions to response data.
  - For a detailed explanation of the architecture and implementation, refer to the following blog post:
    - [IE 8 XSS Filter Architecture/Implementation](http://blogs.technet.com/b/srd/archive/2008/08/18/ie-8-xss-filter-architecture-implementation.aspx)

- **XSS Auditor (Google Chrome)**
  - Following Microsoft, Google Chrome introduced its own cross-site scripting filter, known as XSS Auditor.
  - Unlike the IE XSS Filter, which is layered on top of the browser, XSS Auditor is integrated into the WebKit/Blink rendering engines.
  - The design of XSS Auditor aims to be both effective and highly precise, placing it between the HTML parser and the JavaScript engine.

#### Implementation Details
- **XSS Filter (Internet Explorer)**
  - The rules for the XSS Filter are hardcoded in the `c:\windows\system32\mshtml.dll` library.
  - These rules can be inspected using various tools such as hex editors (e.g., WinHex, Notepad++ with TextFX plugin), IDAPro, or MS-DOS commands.
  - A faster method to inspect the rules is by using the following command:
    ```sh
    findstr /C:"sc{r}" \WINDOWS\SYSTEM32\mshtml.dll | find "{"
    ```
  - For a more readable version, you can export the result to a file and use a text editor:
    ```sh
    findstr /C:"sc{r}" \WINDOWS\SYSTEM32\mshtml.dll | find "{" > savepath
    ```

- **Example Rules in Internet Explorer 11**
  - One of the extracted rules transforms:
    ```json
    {}
    {
    ```
    into:
    ```regex
    {[ /+\t\"\'`]{o}n\c\c\c+?[ +\t]*?=.}
    ```

- **XSS Filter Neutering in Action**
  - The XSS attack:
    ```json
    {]}
    ```
    is transformed to:
    ```regex
    {[ /+\t\"\'`]{o}n\c\c\c+?[ +\t]*?=.}
    ```

- **Strength and Bypasses**
  - The XSS Filter has 25 well-constructed rules, making it difficult to bypass. However, several bypasses have been discovered over the years.
  - The latest versions of the filter appear to be stronger than previous ones, although new vulnerabilities may still be found.

- **Disabling the XSS Filter**
  - The XSS Filter is enabled by default in the Internet, Trusted, and Restricted security zones.
  - Websites that need to opt out of this protection can use the HTTP response header:
    ```http
    X-XSS-Protection: 0
    ```
  - Additionally, the IE team introduced a new token in the `X-XSS-Protection` header:
    ```http
    X-XSS-Protection: 1; mode=block
    ```
    - With this token, if a potential reflected XSS attack is detected, the browser will render a simple `#` instead of attempting to sanitize the page.

#### Cross-Browser Support
- **XSSAuditor (WebKit/Blink)**
  - Developed in the footsteps of the IE XSS Filter, XSSAuditor is implemented for the Blink/WebKit rendering engines and is enabled by default in browsers like Google Chrome, Opera, and Safari.
  - XSSAuditor analyzes both inbound requests and outbound responses. If executable code is found within the parsed HTML data, it stops the script and generates a console alert.
  - Despite its effectiveness, multiple bypasses have been discovered over the years, with more information available on bypasses than on the filter itself.

#### References
- **RFCs and Standards**
  - [RFC 3986](http://tools.ietf.org/html/rfc3986#section-2.1)
  - [RFC 2616](https://tools.ietf.org/html/rfc2616)
  - [ISO/IEC 8859-1](http://en.wikipedia.org/wiki/ISO/IEC_8859-1)

- **HTML and Character Encoding**
  - [PHP header()](http://www.php.net/header)
  - [HTML Document Representation: 5.3 Character References](http://msdn.microsoft.com/en-us/library/system.web.httpresponse)
  - [HTML Standard: 12.1.4 Character References](http://www.w3.org/TR/html5/single-page.html#character-references)

- **Security Tools and Utilities**
  - [ModSecurity](http://www.modsecurity.org/)
  - [NoScript Security Suite](https://addons.mozilla.org/en-US/firefox/addon/noscript/)
  - [Event 1046 - Cross-Site Scripting Filter: Remediation](http://msdn.microsoft.com/en-us/library/dd565647(v=vs.85).aspx#remediation)
  - [Regular Expressions Considered Harmful in Client-Side XSS Filters](http://www.adambarth.com/papers/2010/bates-barth-jackson.pdf)

- **Unicode and Homoglyphs**
  - [The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)](http://www.joelonsoftware.com/articles/Unicode.html)
  - [Homoglyph Attack Generator](http://www.irongeek.com/homoglyph-attack-generator.php)
  - [Unicode Utilities: Confusables](http://unicode.org/cldr/utility/confusables.jsp)

- **Base64 and Transformation Tools**
  - [Base64: Implementations and History](http://en.wikipedia.org/wiki/Base64#Implementations_and_history)
  - [Unicode Text Converter](http://www.panix.com/~eli/unicode/convert.cgi)
  - [OWASP Enterprise Security API](https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API)

- **Additional Resources**
  - [Comparison of Regular Expression Engines](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines)
  - [Regular Expressions Reference Table of Contents](https://www.regular-expressions.info/refflavors.html)
  - [Base 36 as Senary Compression](http://tinyurl.com/jfvqr)

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. Â© 2020**

This document provides a comprehensive overview of native browser filters, their history, implementation details, and references for further reading.