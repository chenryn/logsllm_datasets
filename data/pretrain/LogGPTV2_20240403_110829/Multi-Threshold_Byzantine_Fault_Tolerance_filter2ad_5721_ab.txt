(3) We present a framework to convert existing partially synchro-
nous or asynchronous BFT SMR protocols to additionally enjoy
optimal synchronous safety fault tolerance (Section 5).
2 MULTI-THRESHOLD BFT
2.1 Preliminaries
Reliable broadcast (RBC). In reliable broadcast (RBC), a desig-
nated sender 𝑟𝑠 looks to broadcast an input value 𝑏𝑖𝑛 to a set of 𝑛
replicas, and each replica outputs a value. A RBC protocol needs to
achieve the following safety and liveness properties.
(1) Safety.
(a) Consistency. If two honest replicas output values 𝑏 and 𝑏′,
(b) Integrity. If the designated sender is honest, no honest replica
respectively, then 𝑏 = 𝑏′.
outputs a value 𝑏 ≠ 𝑏𝑖𝑛.
(2) Liveness.
(a) Validity. If the designated sender is honest, then all honest
replicas output some value.
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1687(b) Totality. If an honest replica commits a value, all honest repli-
cas output some value.
0, 𝑡𝑥′
We remark that the standard RBC validity property says “if the
designated sender is honest, all honest replicas output the sender’s
value”. It has both safety and liveness components, so we separate it
into integrity and validity following [17]. While this separation may
look verbose at first glance, it follows the convention that safety
captures “nothing bad happens” and liveness captures “something
happens”.
State machine replication (SMR). The problem we are more in-
terested in is the state machine replication (SMR) problem [14, 45].
A SMR protocol uses a number of servers, called replicas, to provide
an abstraction of a single non-faulty server . A SMR protocol or-
ders transactions from clients into a totally ordered list that grows
in length, called a log. Replicas and clients repeatedly output new
transactions at increasing positions of the log. Since a SMR protocol
ultimately services clients, it needs to provide public verifiability.
Namely, there is a predefined Boolean function Verify; a replica or a
client outputs a log of transactions log = [𝑡𝑥0, 𝑡𝑥1, ...𝑡𝑥 𝑗] if and only
if there is a publicly verifiable proof 𝜋 such that Verify(log, 𝜋) = 1.
A SMR protocol then provides the following safety and liveness:
(1) Safety. If [𝑡𝑥0, 𝑡𝑥1, ..., 𝑡𝑥 𝑗] and [𝑡𝑥′
𝑗′] are output by
two honest replicas or clients, then 𝑡𝑥𝑖 = 𝑡𝑥′
𝑖 for all 𝑖 ≤
min( 𝑗, 𝑗′).
(2) Liveness. If a transaction 𝑡𝑥 is input to at least one honest
replica, then every honest replica eventually outputs a log con-
taining 𝑡𝑥.
Although some prior works [2, 47] do not explicitly mention
the public verifiability property in their SMR definitions, they all
implicitly achieve it. A typical way to achieve it is to have a client
collect signatures on the log from 𝑓 + 1 replicas, which serve as a
publicly verifiable proof for the log.
1, ..., 𝑡𝑥′
It is easy to see that a SMR protocol solves RBC by outputting
a transaction signed by the sender that resides at the smallest log
height. We will elaborate on this in Section 4.1. Therefore, an im-
possibility result for RBC applies to SMR as well.
Timing model. The three most common network timing models
in distributed computing are synchrony, asynchrony, and partially
synchrony. In a synchronous network, every message sent by an
honest replica will be received by the recipient within a known up-
per bound Δ. If there is no such bound on the communication delay,
the network is said to be asynchronous. A partially synchronous
network has both synchronous and asynchronous periods. For con-
venience, it is usually assumed that the network is asynchronous
at first, but becomes synchronous after an unknown time called
global stabilization time (GST) denoted 𝑇𝑔 [22].
Even in the synchronous model, our protocols do not assume any
synchronized clocks across replicas, which is commonly assumed
in lock-step synchronous protocols such as Blum et al. where all
replicas do each operation at the same time. We only assume that
each replica’s locally measured Δ time is a correct upper bound for
the network delay.
Fault model. We assume Byzantine faults that can behave arbitrary.
All protocols presented in this paper tolerate adaptive corruption
that can happen anytime during the protocol execution. A replica
that is not faulty throughout the execution is said to be honest and
faithfully execute the protocol.
Other assumptions. We assume the use of digital signatures and
public-key infrastructure (PKI) for the set of replicas, i.e., the public-
keys of all replicas are known to all replicas and clients. We use the
notation ⟨𝑥⟩𝑟 to denote a message 𝑥 signed by a replica 𝑟. We also
assume a cryptographic hash function 𝐻. As is commonly done in
BFT protocols, we abstract away the details of cryptography and
assume they are ideal.
2.2 Multi-Threshold BFT
We introduce multi-threshold BFT (MT-BFT), a generalized defi-
nition of the BFT problem that separates the fault tolerance for
safety and liveness under synchrony and asynchrony (or partially
synchrony), and capture the trade-offs between them. To elaborate,
a multi-threshold BFT protocol is parameterized by four thresholds
0  𝛽 means replicas are allowed to
make progress in a unsafe manner (e.g., output conflicting values).
It may make sense if the protocol has some notion of “recovering”
capability where unsafe decisions are eventually resolved, but we
have not seen a clear formalization for such a notion and we leave
it as future work.
When we consider asynchrony together with synchrony, we
refer to the dual timing model as the async-sync model; likewise,
when we consider partial synchrony together with synchrony, we
refer to the dual timing model as the psync-sync model. Existing
asynchronous [26, 38] (or partially synchronous [14, 47]) BFT proto-
cols are already MT-BFT protocols in the async-sync (or psync-sync)
model with 𝛽𝑎 = 𝛾𝑎 = 𝛽𝑠 = 𝛾𝑠  0, its threshold parameters satisfy 𝛽𝑎 + 2𝛾𝑠 ≥ 𝑛.
Proof. Suppose for the sake of contradiction that there exists
a MT-BFT RBC protocol whose fault threshold parameters satisfy
𝛽𝑎 + 2𝛾𝑠 = 𝑛 (the proof can be easily extended to 𝛽𝑎 + 2𝛾𝑠 > 𝑛). We
consider a network with three partitions 𝑃, 𝑄, and 𝑅, with sizes
|𝑃| = |𝑅| = 𝛾𝑠 > 0 and |𝑄| = 𝛽𝑎 > 0. The designated sender 𝑟𝑠 is in
𝑄. Consider the three executions below.
In the first execution (W1), the network is synchronous and all
messages are instantly delivered. All replicas in 𝑃 crash, i.e., do
not send any message to other replicas. The sender 𝑟𝑠 has an input
value 𝑏1. Since the protocol achieves liveness in the presence of 𝛾𝑠
faults, all replicas in 𝑅 output 𝑏1 at some time 𝑇1.
The second execution (W2) is symmetric to the first one. The
network is synchronous, all messages are instantly delivered, and
all replicas in 𝑅 crash. The sender 𝑟𝑠 has an input value 𝑏2 ≠ 𝑏1.
Since the protocol achieves liveness in the presence of 𝛾𝑠 faults, all
replicas in 𝑃 output 𝑏2 at some time 𝑇2.
In the third execution (W3), the network is partially synchronous
and 𝑇𝑔 > max{𝑇1,𝑇2}. All replicas in 𝑄 are Byzantine. 𝑄 behave
towards 𝑅 and 𝑃 as in W1 and W2, respectively. All messages
between 𝑃 and 𝑅 are delayed by 𝑇𝑔, but all other messages are
instantly delivered. Then, replicas in 𝑅 cannot distinguish W1 and
W3 by 𝑇1 < 𝑇𝑔, and they output 𝑏1 as in W1. Similarly, replicas in
𝑃 cannot distinguish W2 and W3 by 𝑇2 < 𝑇𝑔, and they they output
𝑏2 ≠ 𝑏1 as in W2. This violates the supposition that the protocol
achieve consistency against |𝑄| = 𝛽𝑎 Byzantine faults.
□
As mentioned, the bound above is a straightforward general-
ization of the bound proven by Blum et al [7, 8], which shows
no protocol can tolerate 𝑓𝑎 Byzantine faults under asynchrony
(i.e., 𝑓𝑎 = 𝛽𝑎 = 𝛾𝑎) and 𝑓𝑠 Byzantine faults under synchrony (i.e.,
𝑓𝑠 = 𝛽𝑠 = 𝛾𝑠) if 𝑓𝑎 + 2𝑓𝑠 ≥ 𝑛. But once we separate fault tolerance
for safety and liveness, an interesting and crucial observation is
that 𝛽𝑎 and 𝛽𝑠 do not constrain each other. This means we may
achieve a higher synchronous safety tolerance independent of the
asynchronous safety tolerance.
3.2 A MT-BFT RBC Protocol with Optimal
Fault Tolerance
We present a MT-BFT RBC protocol with optimal fault tolerance
in the async-sync model. The protocol supports any parameter
choices within the feasible region. Namely, a protocol designer can
first pick 𝛾𝑠 < 𝑛/2. Then, other parameters are determined as
(1) 𝛽𝑎 = 𝑛 − 2𝛾𝑠 − 1
(2) 𝛽𝑠 = 𝑛 − 1
(3) 𝛾𝑎 = min{𝛽𝑎, 𝛾𝑠}
This is optimal given Theorem 3.1 and also establishes the tightness
of Theorem 3.1.
Protocol description and intuition. The protocol is given in Fig-
ure 1. The protocol follows the common quorum-based design. An
available quorum of honest replicas vote for a proposal 𝑏 from the
sender, forming a quorum-certificate C(𝑏). As our protocol requires
a quorum availability under both synchrony and asynchrony, we
naturally use a quorum of |C| = 𝑛 −𝛾𝑠 (note that 𝛾𝑠 ≥ 𝛾𝑎). This eas-
ily achieves validity property of the protocol. The integrity property
is also easily achieved by checking a sender’s signature on the value.
The core of the protocol combines respective techniques of purely
asynchronous and purely synchronous protocols and make them
work with the optimal thresholds above to achieve consistency and
totality. We elaborate more in detail below.
Asynchronous quorum intersection. Existing asynchronous
protocols rely on a quorum intersection argument to achieve con-
sistency. In short, two quorums of 2𝑓 + 1 replicas out of 𝑛 = 3𝑓 + 1
intersect at at least 𝑓 + 1 replicas. This rules out conflicting quorum
certificates. Then, totality is achieved by having replicas forward
certificates to make other replicas output the same value.
As can be expected from the proof, the quorum intersection
argument works in the optimal thresholds 𝛽𝑎 = 𝑛 − 2𝛾𝑠 − 1. Two
quorums of 𝑛−𝛾𝑠 replicas intersect at 2(𝑛−𝛾𝑠)−𝑛 = 𝛽𝑎 +1 replicas,
ruling out conflicting certificates. This guarantees both consistency
and totality under asynchrony.
Synchronous equivocation-checking. The common approach
for synchronous BFT protocols to achieve consistency under minor-
ity corruption is equivocation-checking. In short, replicas, before
outputting, forward the sender’s proposal and wait for Δ to rule out
sender equivocation [4]. Our protocol builds on this technique to
achieve consistency. But we need a little tweak for liveness. A sim-