 DELETE
 一个事务最大2^32条SQL(因为cmin,cmax的长度是4Bytes)
 PostgreSQL一个事务中可以包含DML, DDL, DCL.
 除了以下
 create tablespace
 create database
 使用concurrently并行创建索引
 其他未尽情况略
 (Oracle执行DDL前自动将前面的未提交的事务提交,所以Oracle不支持在事务中
执行DDL语句)
Query
 JOIN
 ALIAS
 Table as Function's Return data type
 GROUP BY [ HAVING ]
 DISTINCT
 COMBINING QUERY
 SORT
 LIMIT [ OFFSET ]
 WITH
JOIN
 T1 CROSS JOIN T2 ( T1 INNER JOIN T2 ON TRUE )
 T1 { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2 ON boolean_expression
 T1 { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2 USING ( join column list )
 T1 NATURAL { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2
 The words INNER and OUTER are optional in all forms. INNER is the default; LEFT, RIGHT,
and FULL imply an outer join.
JOIN
 CROSS JOIN 产生笛卡尔积
 当关联的两个表有两列同名同类型同长度, 以下三种写法等同
JOIN
 左或右连接, 不满足条件的右或左表的值  全关联,不满足条件的值都置空
置空
ALIAS
 table alias:
 FROM table_reference AS alias
 FROM table_reference alias
 colum alias:
 SELECT expression [ [ AS ] output_name ]
 subquery alias:
 FROM (SELECT * FROM table1) AS alias_name
Table as Function's Return data type
 return table's row type
 create table t1 (id int,name text,crt_time timestamp(0));
 create or replace function f_t1 (i_id int) returns setof t1 as $$
 declare
 begin
 return query select * from t1 where id=i_id;
 return;
 end;
 $$ language plpgsql;
 insert into t1 values(1,'digoal',now());
 insert into t1 values(1,'DIGOAL',now());
 select * from f_t1(1);
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
 1 | DIGOAL | 2012-04-26 08:15:15
Composite Type as Function's Return
data type
 return composite type
 create type type1 as (id int,name text,crt_time timestamp(0));
 create or replace function f_type1 (i_id int) returns setof type1 as $$
 declare
 begin
 return query select * from t1 where id=i_id;
 return;
 end;
 $$ language plpgsql;
 select * from f_type1(1);
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
 1 | DIGOAL | 2012-04-26 08:15:15
Record as Function's Return data type
 return record
 create or replace function f_record1 (i_id int) returns setof record as $$
 declare
 begin
 return query select * from t1 where id=i_id;
 return;
 end;
 $$ language plpgsql;
 select * from f_record1(1) as (id int,name text,crt_time timestamp(0));
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
 1 | DIGOAL | 2012-04-26 08:15:15
DISTINCT
 SELECT DISTINCT select_list ... (NULL在DISTINCT [ON] 中视为相等)
 postgres=# select * from t1 ;
 id | name | crt_time
 1 | digoal | 2012-04-26 08:15:09
 1 | DIGOAL | 2012-04-26 08:15:15
 postgres=# select distinct id from t1;
 id
 1
 SELECT DISTINCT ON (expression [, expression ...]) select_list ... -- ON()里面必须出现在
order by中作为前导列
 Here expression is an arbitrary value expression that is evaluated for all rows. A
set of rows for which all the expressions are equal are considered duplicates, and
only the first row of the set is kept in the output. Note that the "first row" of a set is
unpredictable unless the query is sorted on enough columns to guarantee a unique
ordering of the rows arriving at the DISTINCT filter. (DISTINCT ON processing
occurs after ORDER BY sorting.)
DISTINCT
 postgres=# select distinct on (id) id,name,crt_time from t1 ;
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
 postgres=# select distinct on (id) id,name,crt_time from t1 order by crt_time;
 ERROR: SELECT DISTINCT ON expressions must match initial ORDER BY expressions
 LINE 1: select distinct on (id) id,name,crt_time from t1 order by cr...
 ^
 postgres=# select distinct on (id) id,name,crt_time from t1 order by id;
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
DISTINCT
 postgres=# select distinct on (id) id,name,crt_time from t1 order by id,crt_time;
 id | name | crt_time
 ----+--------+---------------------
 1 | digoal | 2012-04-26 08:15:09
 postgres=# select distinct on (id) id,name,crt_time from t1 order by id,crt_time desc;
 id | name | crt_time
 ----+--------+---------------------
 1 | DIGOAL | 2012-04-26 08:15:15
DISTINCT
 postgres=# select distinct on (id,name) id,name,crt_time from t1 order by id,crt_time desc;
 ERROR: SELECT DISTINCT ON expressions must match initial ORDER BY expressions
 LINE 1: select distinct on (id,name) id,name,crt_time from t1 order ...
 ^
 postgres=# select distinct on (id,name) id,name,crt_time from t1 order by id,name,crt_time
desc;
 id | name | crt_time
 ----+--------+---------------------
 1 | DIGOAL | 2012-04-26 08:15:15
 1 | digoal | 2012-04-26 08:15:09
DISTINCT
 使用DISTINCT ON实现用窗口函数实现的取第一名的功能
 postgres=# CREATE TABLE window_test(id int, name text, subject text, score numeric);
 postgres=# INSERT INTO window_test VALUES (1,'digoal','数学',99.5), (2,'digoal','语文
',89.5),
 (3,'digoal','英语',79.5), (4,'digoal','物理',99.5), (5,'digoal','化学',98.5),
 (6,'刘德华','数学',89.5), (7,'刘德华','语文',99.5), (8,'刘德华','英语',79.5),
 (9,'刘德华','物理',89.5), (10,'刘德华','化学',69.5),
 (11,'张学友','数学',89.5), (12,'张学友','语文',91.5), (13,'张学友','英语',92.5),
 (14,'张学友','物理',93.5), (15,'张学友','化学',94.5);
 -- 取出每门课程的第一名.
 postgres=# select distinct on (subject) id,name,subject,score from window_test order by
subject,score desc;
DISTINCT
 id | name | subject | score
 ----+--------+---------+-------
 5 | digoal | 化学 | 98.5
 1 | digoal | 数学 | 99.5
 4 | digoal | 物理 | 99.5
 13 | 张学友 | 英语 | 92.5
 7 | 刘德华 | 语文 | 99.5
 (5 rows)
 与使用窗口函数得到的结果一致, 并且写法更简洁.
COMBINING QUERY
 query1 UNION [ALL] query2
 query1 INTERSECT [ALL] query2
 query1 EXCEPT [ALL] query2
 UNION effectively appends the result of query2 to the result of query1 (although there is no
guarantee that this is the order in which the rows are actually returned)
 INTERSECT returns all rows that are both in the result of query1 and in the result of query2.
 EXCEPT returns all rows that are in the result of query1 but not in the result of query2.
 Combining Query eliminates duplicate rows from its result, in the same way as DISTINCT,
unless ALL is used
 query1 and query2 must return the same number of columns and the corresponding columns
have compatible data types.
SORT
 SELECT select_list
 FROM table_expression
 ORDER BY sort_expression1 [ASC | DESC] [NULLS { FIRST | LAST }]
 [, sort_expression2 [ASC | DESC] [NULLS { FIRST | LAST }] ...]
LIMIT [ OFFSET ]
 SELECT select_list
 FROM table_expression
 [ ORDER BY ... ]
 [ LIMIT { number | ALL } ] [ OFFSET number ]
函数三态简介
 非常重要的函数三态
 Immutable
 Stable
 Volatile
 digoal=# create sequence seq;
 CREATE SEQUENCE
 digoal=# select provolatile from pg_proc where proname='nextval';
 provolatile
 -------------
 v
 (1 row)
 digoal=# select nextval('seq'::regclass) from generate_series(1,3);
 nextval
 ---------
 1
 2
 3
 (3 rows)
函数三态简介
 digoal=# alter function nextval(regclass) immutable;
 ALTER FUNCTION
 digoal=# select nextval('seq'::regclass) from generate_series(1,3);
 nextval
 ---------
 4
 4
 4
 (3 rows)
函数三态简介
 digoal=# alter function nextval(regclass) stable;
 ALTER FUNCTION
 digoal=# select nextval('seq'::regclass) from generate_series(1,3);
 nextval
 ---------
 5
 6
 7
 (3 rows)
函数三态简介
 A VOLATILE function can do anything, including modifying the database. It can return
different results on successive calls with the same arguments. The optimizer makes no
assumptions about the behavior of such functions. A query using a volatile function will re-
evaluate the function at every row where its value is needed.