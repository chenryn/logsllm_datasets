The `es6.forOf` transformer is enabled by default, yet code containing `for (x
of y) ...` will not function unless the "polyfill" runtime library is enabled.
This is due to the fact that for-of code generates use of Symbol, which is not
provided by babel helpers, thus is undefined. The documentation does not
mention this fact (http://babeljs.io/docs/learn-es6/#iterators-for-of) (no
"Support via polyfill" note.)
**Suggestion:** Make forOf optional and add "Support via polyfill" note to
documentation, or introduce "Symbol" inline helper to remove dependency on
"polyfill."
> Note: es6-transpiler does support for-of via inline helpers.
Example:
    for (x of y) {}
Generated: (note use of `Symbol.iterator`)
    "use strict";
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;
    try {
      for (var _iterator = y[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        x = _step.value;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"]) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  * Babel v 4.7.8
  * Tested with Nodejs v0.10.36