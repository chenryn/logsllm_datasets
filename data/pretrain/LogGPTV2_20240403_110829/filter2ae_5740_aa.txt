记录一下学习ret2dl-resolve的曲折历程。可能顺带回顾一下之前的内容。这篇文章会尽量讲清楚利用过程。
# 前置知识
首先需要了解构成elf文件的section header
table，在后面的分析中主要涉及到三个section：.dynsym，.rela.plt和.dynstr
.rela.plt节(JMPREL段)的[结构体](https://code.woboq.org/userspace/glibc/elf/elf.h.html#660)组成如下:
    typedef struct
    {
      Elf64_Addr        r_offset;                /* Address */
      Elf64_Xword        r_info;                 /* Relocation type and symbol index */
      Elf64_Sxword        r_addend;              /* Addend */
    } Elf64_Rela;
r_offset: 该函数在.got.plt中的地址  
**r_info** : 包含该函数在.dynsym节中的索引和重定位类型  
r_addend: 指定用于计算要存储到可重定位字段中的值的常量加数
.dynsym节(SYMTAB段)的[结构体](https://code.woboq.org/userspace/glibc/elf/elf.h.html#529)组成：
    typedef struct
    {
      Elf64_Word        st_name;                /* Symbol name (string tbl index) */
      unsigned char        st_info;                /* Symbol type and binding */
      unsigned char st_other;                /* Symbol visibility */
      Elf64_Section        st_shndx;                /* Section index */
      Elf64_Addr        st_value;                /* Symbol value */
      Elf64_Xword        st_size;                /* Symbol size */
    } Elf64_Sym;
**st_name** : 该值为此函数在.dynstr中的偏移，其中包含符号名称的字符表示形式。
.rel.plt内[结构体](https://code.woboq.org/userspace/glibc/elf/elf.h.html#634)组成：
    typedef struct
    {
      Elf32_Addr        r_offset;                /* Address */
      Elf32_Word        r_info;                  /* Relocation type and symbol index */
    } Elf32_Rel;
r_offset: 该函数在.got.plt中的地址  
**r_info** : 包含该函数在.dynsym节中的索引和重定位类型
.dynsym内[结构体](https://code.woboq.org/userspace/glibc/elf/elf.h.html#519)组成：
    typedef struct
    {
      Elf32_Word        st_name;                /* Symbol name (string tbl index) */
      Elf32_Addr        st_value;                /* Symbol value */
      Elf32_Word        st_size;                /* Symbol size */
      unsigned char        st_info;                /* Symbol type and binding */
      unsigned char        st_other;                /* Symbol visibility */
      Elf32_Section        st_shndx;                /* Section index */
    } Elf32_Sym;
**st_name** : 该值为此函数在.dynstr中的偏移，其中包含符号名称的字符表示形式。
以前做protostar的时候简单学习过一次plt和got，但当时仅限于plt和got表间的跳转
**[[传送门]](https://muirelle.com/2018/10/17/Liveoverflow-0x13-format4/ "传送门")**
，最后的分析止步于`dl_runtime_resolve`。这次的ret2dl-resolve就会涉及到`dl_runtime_resolve`这个函数内的具体实现，并加以利用。
要利用这个函数首先就要理清他的内部逻辑，以及涉及到的各种结构体。在学习了多个大佬的博客之后，终于慢慢理解了got表中函数的地址是怎么样一步一步从无到有的(我太菜了)。为了便于自己理解，我把整个过程称作
**三次跳跃** (三级跳是不是好听点:p)。
# 跟踪
观察`puts`函数从被调用，到完成其重定向的整个过程。(用例为64位elf)
这是调用`dl_runtime_resolve`前的流程，用一张图可以很直观的展示出来。可以看到，在 **0x4005c0** 和 **0x4005d6**
处push的分别是它的两个参数link_map和reloc_offset。
此时程序流程进入到`dl_runtime_resolve`中，开始重定向操作。而真正的重定向由`dl_runtime_resolve`中的`_dl_fixup`完成。
`_dl_fixup`的源码在[这里](https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html#59)：
    DL_FIXUP_VALUE_TYPE
    attribute_hidden __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE
    _dl_fixup (
    # ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS
               ELF_MACHINE_RUNTIME_FIXUP_ARGS,
    # endif
               struct link_map *l, ElfW(Word) reloc_arg)
    {
      const ElfW(Sym) *const symtab
        = (const void *) D_PTR (l, l_info[DT_SYMTAB]);
      const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);
      const PLTREL *const reloc
        = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);
      const ElfW(Sym) *sym = &symtab[ELFW(R_SYM) (reloc->r_info)];
      const ElfW(Sym) *refsym = sym;
      void *const rel_addr = (void *)(l->l_addr + reloc->r_offset);
      lookup_t result;
      DL_FIXUP_VALUE_TYPE value;
      /* Sanity check that we're really looking at a PLT relocation.  */
      assert (ELFW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT);
       /* Look up the target symbol.  If the normal lookup rules are not
          used don't look in the global scope.  */
      if (__builtin_expect (ELFW(ST_VISIBILITY) (sym->st_other), 0) == 0)
        {
          const struct r_found_version *version = NULL;
          if (l->l_info[VERSYMIDX (DT_VERSYM)] != NULL)
            {
              const ElfW(Half) *vernum =
                (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);
              ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc->r_info)] & 0x7fff;
              version = &l->l_versions[ndx];
              if (version->hash == 0)
                version = NULL;
            }
          /* We need to keep the scope around so do some locking.  This is
             not necessary for objects which cannot be unloaded or when
             we are not using any threads (yet).  */
          int flags = DL_LOOKUP_ADD_DEPENDENCY;
          if (!RTLD_SINGLE_THREAD_P)
            {
              THREAD_GSCOPE_SET_FLAG ();
              flags |= DL_LOOKUP_GSCOPE_LOCK;
            }
    #ifdef RTLD_ENABLE_FOREIGN_CALL
          RTLD_ENABLE_FOREIGN_CALL;
    #endif
          result = _dl_lookup_symbol_x (strtab + sym->st_name, l, &sym, l->l_scope,
                                        version, ELF_RTYPE_CLASS_PLT, flags, NULL);
          /* We are done with the global scope.  */
          if (!RTLD_SINGLE_THREAD_P)
            THREAD_GSCOPE_RESET_FLAG ();
    #ifdef RTLD_FINALIZE_FOREIGN_CALL
          RTLD_FINALIZE_FOREIGN_CALL;
    #endif
          /* Currently result contains the base load address (or link map)
             of the object that defines sym.  Now add in the symbol
             offset.  */
          value = DL_FIXUP_MAKE_VALUE (result,
                                       SYMBOL_ADDRESS (result, sym, false));
        }
      else
        {
          /* We already found the symbol.  The module (and therefore its load
             address) is also known.  */
          value = DL_FIXUP_MAKE_VALUE (l, SYMBOL_ADDRESS (l, sym, true));
          result = l;
        }
      /* And now perhaps the relocation addend.  */
      value = elf_machine_plt_value (l, reloc, value);
      if (sym != NULL
          && __builtin_expect (ELFW(ST_TYPE) (sym->st_info) == STT_GNU_IFUNC, 0))
        value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));
      /* Finally, fix up the plt itself.  */
      if (__glibc_unlikely (GLRO(dl_bind_not)))
        return value;
      return elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);
    }
`_dl_fixup`的参数由`dl_runtime_resolve`压栈传递，即link_map和reloc_offset(由前面宏定义可知reloc_offset和reloc_arg是一样的)
    const ElfW(Sym) *const symtab = (const void *) D_PTR (l, l_info[DT_SYMTAB]);
    const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);
    const PLTREL *const reloc = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);
`line9`到`line13`(后面简写为l)从link_map中获取.dynsym，.rela.plt，.dynstr等节的地址。
reloc_offset的 **值用于指示包含该函数某些信息的结构体在.rela.plt节中的位置**
.rela.plt段中能看到puts对应的结构体，其info的值为0x100000007,从中提取到的.dynsym索引为1，重定位类型为7(即R_386_JMP_SLOT)
    R_386_JMP_SLOT
        Created by the link-editor for dynamic objects to provide lazy binding.
        Its offset member gives the location of a procedure linkage table entry. 
        The runtime linker modifies the procedure linkage table entry to transfer control to the designated symbol address.
至此，通过reloc_offset进行的第一次跳跃完成，现在需要使用r_info进行第二次跳跃。已经从link_map获取了.dynsym的起始地址，所以puts在
**.dynsym**中的位置是.dynsym[1]。
**从puts在.dynsym中的Elf64_Sym结构体成员st_name找到了其名称的字符串在.dynstr中的偏移为0x10**
，至此完成了第二次跳跃。同前面一样，由 **.dynstr** 的起始地址加上偏移就能在.dynstr中找到该函数对应符号的字符串。现在进行第三次跳跃。
由起始地址(0x4003e8)加上偏移(0x10)得到的字符串则是预期中的`puts`(0x4003f8),最后一跳完成。
三次跳跃示意图
这个字符串作为`l47`的`_dl_lookup_symbol_x`函数的参数之一，返回值为libc基址，保存在result中。`l58`的`DL_FIXUP_MAKE_VALUE`宏从已装载的共享库中查找puts函数的地址，对其重定位后加上该程序的装载地址，得到puts函数的真实地址，结果保存在value中。最后调用`elf_machine_fixup_plt`，向puts函数对应got表中填写真实地址，其中参数rel_addr为之前算出的该函数got表地址(0x620018)。
到此为止puts函数已经完成重定向，利用的方式也很显然： **即首先构造fake
reloc_arg使得.rela.plt起始地址加上这个值后的地址落在我们可控的区域内，接着依次构造fake
.dynsym和.dynstr，形成一个完整的fake链，最后在.dynstr相应位置填写system就可以从动态库中将system的真实地址解析到puts的got表项中，最终调用puts实际调用的则是system。**
但是想要成功利用的话还有一个地方需要注意，在源码的`l26`到`l33`：
    if (l->l_info[VERSYMIDX (DT_VERSYM)] != NULL)
    {
      const ElfW(Half) *vernum =
        (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);
      ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc->r_info)] & 0x7fff;
      version = &l->l_versions[ndx];
      if (version->hash == 0)
        version = NULL;
    }
这段代码取r_info的高位作为vernum的下标，访问对应的值并赋给ndx，再从l_versions中找到对应的值赋给version。
问题在于，我们构造的fake链一般位于bss段(64位下，bss段一般位于0x600000之后)，.rela.plt一般在0x400000左右,所以我们构造的r_info的高位:reloc_arg一般会很大，又因为程序计算`&symtab[ELFW(R_SYM)
(reloc->r_info)]`和`vernum[ELFW(R_SYM)
(reloc->r_info)]`时使用下标的数据类型大小不同(symtab中的结构体大小为0x18字节，[vernum](https://code.woboq.org/userspace/glibc/elf/elf.h.html#Elf64_Half)的数据类型为uint16_t，大小为0x2字节)，这就导致`vernum[ELFW(R_SYM)
(reloc->r_info)]`大概率会访问到0x400000到0x600000之间的不可读区域(64位下，这个区间一般不可读)，使得程序报错。
如果使得`l->l_info[VERSYMIDX (DT_VERSYM)]`的值为0，就可以绕过这块if判断，而`l->l_info[VERSYMIDX
(DT_VERSYM)]`的位置就在link_map+0x1c8处，所以需要泄露位于0x620008处link_map的值，并将link_map+0x1c8置零。
这种攻击方式依赖源程序自带的输出函数。
# x64
[题目](https://pan.baidu.com/s/1ox8br4GyaffXj8WytG67-g)  
提取码：eo5z
之前第五空间比赛的一道题目，本身很简单，坑的是泄露libc之后无论如何都找不到对应的libc版本。这时就需要ret2dl-resolve(把所有libc
dump下来挨个找也行。。)
刚才分析的用例就是这道题中的puts函数，已经分析的差不多了，剩下的就是精确计算偏移。
首先泄露link_map地址：
    payload = p8(0)*(0x10)
    payload += p64(0)
    payload += p64(pop_rdi)
    payload += p64(link_map_ptr)