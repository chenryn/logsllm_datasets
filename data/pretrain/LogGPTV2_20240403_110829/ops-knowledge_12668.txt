User: 请回答以下安全问题Chrome生成的密码不是高熵的吗？在Chrome上，如果你打开一个注册页面，它会提供填写和记住密码字段的功能。我这样做了，得到了以下生成的密码序列：
密码密码密码0
LUnhefcer AnAcg2公司
it2俄罗斯埃韦奥
撤消AiHigcir0
AKDySwaybficMi5型
多尔援助最少5
米克拉德·戈斯多夫9
KasEsacHuhyflo4公司
OngouHemNikEyd0型
在所有这些中，只有一个数字，而在除第三个数字外的所有数字中，数字都在末尾。我用这种确切的模式获得这么多密码的几率非常低，而且我在Chrome生成的其他密码中也看到过这种情况，所以我相信如果我生成更多的密码，它会继续下去。
这看起来很奇怪，将密码生成为字母和数字的随机集合不是比强制执行一些奇怪的模式更容易吗；考虑到这些不应该被记住？为什么Chrome会做其他事情？

Assistant: Conor的答案是一个很好的起点，但如果你深入研究Chromium的来源，情况会开始看起来有点黯淡（但总比根本不使用密码管理器要好）。
Chrome 68（截至2018年8月1日的当前版本）
直到版本68，Chrome遵循FIPS 181生成一个15个字符的可发音密码，允许大写字母、小写字母和数字。如果结果不同时包含大写字母和数字，则会将第一个小写字母更改为大写，并将最后一个小写字符更改为随机数字。
不幸的是，FIPS 181密码的熵很难计算，因为它生成的是可变长度的音节而不是字符，而且有一系列规则决定是否允许使用一个音节。
这种不一致性具有严重的影响。1994年的一篇论文（第192页）估计，攻击者只需尝试160万个密码，就可以破解100个拥有8个字符密码的账户中的1个。即使长度从8增加到15使熵加倍，平均值1上的熵仍可能低于60位，尽管由于大写，这一点略有改善。
最初的标准似乎不支持大写字母或数字，而实现2仅以50%的几率将音节的第一个字母大写（有趣的是，在检查的字符数组中，y被替换为w，因此y永远不会大写）。这意味着，不是每个字母增加大约1位的熵，而是大写只增加每个音节1位。音节的数量不是恒定的，所以很难确定这实际上增加了多少熵，但考虑到单字母音节的稀缺性，它几乎肯定平均增加不到8位。
数字和符号是通过将每个单个字母音节交替转换为数字或符号来支持的，几率为50%（尽管没有使用符号功能）。不幸的是，正如您所注意到的，单字母音节是不常见的3，因此ForceFixPassword通常最终会将最后一个小写字母换成一个数字。
可能还有更多的问题，但我有点厌倦了看它。简而言之，这不是一个很好的生成密码的方法，而且熵明显小于人们对长度的预期。在实践中，这对普通用户来说可能仍然可以，因为这意味着他们不会在20个不同的地方使用他们最喜欢的低熵密码，但对于一个有决心、有资金的攻击者来说，用快速的密码哈希（即不是一个好的密码哈希）破解它肯定是可能的。
Chrome 69（计划于9月发布）
Chrome 69的情况看起来好多了。字符集是大小写字母、数字和符号-_.：！为了便于阅读，删除了以下内容：
l（小写字母l）
I（大写字母I）
1（数字一）
O（大写字母O）
0（数字0）
o（小写字母o）
生成的工作方式是从每个类中添加一个随机字符，直到满足所述类的最小计数。默认情况下，当前使用的是一个小写字符、一个大写字符和一个数字。
然后，密码的其余部分由从所有字符类中均匀选择的随机字符填充（考虑每个类的最大计数，当前未使用）。
最后，由于字符是从可预测类添加到密码的开头以满足要求的，所以字符串是随机打乱的。为了提高可读性，如果两个短划线或下划线相邻，则会发生多达5次的混洗，因此这将略微降低熵，但这种降低非常小，以至于不引人注意（从允许的符号中删除短划线或划线会更糟）。
对于61个可能的字符，一个完全随机的密码将具有log2（6115）=88.96比特的熵。使用包含-排除来解释所需的字符，我得出了88.77位的熵：
61^15所有可能的密码
-53^15个没有数字2-9的密码（0和1除外）
-37^15不带小写字母的密码（l和o除外）
-37^15个不带大写字母的密码（I/O除外）
+29^15由于缺少数字和小写字母而两次排除的加回密码
+29^15由于缺少数字和大写字母而两次排除的加回密码
+13^15由于缺少小写和大写而两次排除的加回密码
-5^15删除所有被排除的符号密码，然后重新添加
额外的洗牌也会减少一小部分，但我现在没有时间计算。最后，密码应该有超过88位的熵，这是非常好的。
旧的生成器在69版中仍然存在，但当我测试开发版本时，它使用的是新的生成器。我不知道是否有办法使用旧发电机。
1.平均熵不一定对非均匀分布有用，1975年的原始论文给出了一个生成器的例子（第29-30页），该生成器以50%的几率生成单个密码（例如“密码”），否则生成高熵密码。平均熵可能很高，但仍有50%的几率会立即猜到密码。即便如此，根据1994年的分析推断，我认为在最坏的情况下，它应该仍然有40多个比特。
2.这个实现实际上不是Chrome的，而是取自APG程序，为了兼容性做了一些小修改
3.apg测试显示，大约33%的密码中实际上出现了单字母音节，但其中70-75%的密码末尾只有一个单字母音节。