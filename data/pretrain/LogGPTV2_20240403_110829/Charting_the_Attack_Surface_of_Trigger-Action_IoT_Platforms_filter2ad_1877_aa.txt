# Charting the Attack Surface of Trigger-Action IoT Platforms

**Authors:**
- Qi Wang†∗
- Pubali Datta†∗
- Wei Yang‡
- Si Liu†
- Adam Bates†
- Carl A. Gunter†

**Affiliations:**
- † University of Illinois at Urbana-Champaign
- ‡ The University of Texas at Dallas

**Contact:**
- {qiwang11, pdatta2, siliu3, batesa, cgunter}@illinois.edu

## Abstract

The Internet of Things (IoT) is becoming increasingly automated and complex. Programming abstractions such as trigger-action rules allow end-users to create new functionalities by interconnecting devices and online services. However, when multiple rules are simultaneously enabled, complex system behaviors can arise that are difficult to understand or diagnose. These conditions are ripe for exploitation, but the security states of trigger-action IoT deployments remain largely unknown.

In this work, we conduct a comprehensive analysis of the interactions between trigger-action rules to identify their security risks. Using IFTTT as an exemplar platform, we enumerate the space of inter-rule vulnerabilities within trigger-action platforms. To assist users in identifying these risks, we present iRuler, a system that uses Satisfiability Modulo Theories (SMT) solving and model checking to discover inter-rule vulnerabilities in IoT deployments. iRuler operates over an abstracted information flow model representing the attack surface of an IoT deployment. However, obtaining such models is challenging due to the closed nature of IoT platforms. To address this, we develop methods to infer trigger-action information flows using Natural Language Processing (NLP).

We also develop a novel evaluative methodology to approximate plausible real-world IoT deployments based on the installation counts of 315,393 IFTTT applets. Our findings indicate that 66% of the synthetic deployments in the IFTTT ecosystem exhibit the potential for inter-rule vulnerabilities. These efforts provide insights into the real-world dangers of IoT deployment misconfigurations.

**CCS Concepts:**
- Security and privacy → Formal methods and theory of security; Vulnerability scanners; Software security engineering
- Computing methodologies → Natural language processing
- Computer systems organization → Embedded and cyber-physical systems

**Keywords:**
- Trigger-Action IoT Platform
- Inter-rule Vulnerability
- Formal Methods
- NLP
- Information Flow

**Permission to make digital or hard copies:**
This work is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

**Conference:**
CCS '19, November 11–15, 2019, London, United Kingdom

**Copyright:**
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11. . . $15.00
https://doi.org/10.1145/3319535.3345662

**ACM Reference Format:**
Qi Wang,†∗ Pubali Datta,†∗ Wei Yang,‡ Si Liu,† Adam Bates,† Carl A. Gunter†. 2019. Charting the Attack Surface of Trigger-Action IoT Platforms. In 2019 ACM SIGSAC Conference on Computer & Communications Security (CCS '19), November 11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3319535.3345662

## 1 Introduction

The Internet of Things (IoT) is rapidly growing, with predictions of 20 billion deployed IoT devices by 2020 [1]. IoT has evolved from isolated single devices to integrated platforms that facilitate interoperability between different devices and online services (e.g., Gmail). Examples include Samsung’s SmartThings [11], Apple’s HomeKit [4], IFTTT [5], and Zapier [17]. These platforms support end-user customizations, often providing programming frameworks for simple automation logic. Currently, trigger-action programming (TAP) is the most commonly used model for creating automations in IoT. Studies show that about 80% of typical user automation requirements can be represented by TAP, and even non-programmers can easily learn this paradigm [85].

As IoT deployments grow in complexity, so does their attack surface. Unexpected interactions between automation rules can give rise to new security issues [81]. For example, a user might have the rule "If temperature exceeds 30°C, then open my windows." While this may be innocuous in isolation, it could be exploited if the user also has the rule "If you say 'Alexa, trigger heater,' then turn the heater on." This combination could allow an attacker to gain physical entry to the house.

To reason about the security of trigger-action IoT platforms, a precise understanding of the interplay between trigger-action rules is required. It is not always clear when the interactions between two rules should be designated as a bug or vulnerability rather than a feature. Even among small rule sets, it is not immediately obvious whether a composition of rules could lead to a breach in the user's home security system. The challenge is compounded by the fact that trigger-action IoT ecosystems are closed-sourced and developed by various third parties, making existing program analysis techniques unusable.

In this work, we describe three distinct and inter-related efforts to enable precise reasoning about IoT security postures:
1. We exhaustively explore the space of inter-rule vulnerabilities within trigger-action IoT platforms, creating a taxonomy of inter-rule vulnerabilities.
2. We leverage formal methods to detect these bugs, presenting the design and implementation of iRuler, an IoT analysis framework that uses Satisfiability Modulo Theories (SMT) solving and model checking to discover inter-rule vulnerabilities.
3. We use Natural Language Processing (NLP) to infer inter-rule information flows, addressing the opacity of commodity IoT platforms.

We evaluate iRuler against a real-world dataset of 315,393 applets found on the IFTTT website. Our NLP tool eliminates 72% of false dependencies in the IFTTT ecosystem with minimal Type I error. We also develop a method for synthesizing plausible rulesets based on publicly visible install counts of IFTTT applets. Testing iRuler on these synthetic configurations, we find that 66% of the rulesets are associated with at least one inter-rule vulnerability.

## 2 Background

### 2.1 Trigger-Action IoT Platforms

Home automation IoT platforms commonly use the trigger-action programming paradigm, which provides an intuitive abstraction for non-technical users. A trigger-action (TA) program specifies that when a certain trigger event occurs (e.g., motion detected), one or more actions (e.g., turn on the light) should be executed. Emerging trigger-action models are becoming more expressive through advanced features. Table 1 compares the trigger-action models in popular smart home and task automation platforms. Our study considers a generalized trigger-action model where each rule can have one trigger, one or more actions, and a condition associated with each action.

**Table 1: Comparison of Popular Trigger-Action Platforms**

| Platform         | Conditions | Multiple Actions | Trigger Values in Actions | Rule Store |
|------------------|------------|------------------|---------------------------|------------|
| SmartThings [11] | ✓          | ✓                | ✓                         | ✓          |
| IFTTT [5]        | ✗          | ✗                | ✗                         | ✗          |
| openHAB [10]     | ✓          | ✓                | ✓                         | ✓          |
| Microsoft Flow [8] | ✓          | ✓                | ✓                         | ✓          |
| Zapier [17]      | ✗          | ✗                | ✗                         | ✗          |
| HomeKit [4]      | ✗          | ✗                | ✗                         | ✗          |
| Iris [7]         | ✗          | ✗                | ✗                         | ✗          |
| Wink [15]        | ✗          | ✗                | ✗                         | ✓          |

### 2.2 Model Checking and Rewriting Logic

Model checking [48] is a technique that checks if a system meets a given specification by systematically exploring the system's state. In an ideal case, a model checker exhaustively examines all possible system states to verify if there is any violation of specifications. Rewriting logic [61] is a logic of concurrent change that can naturally deal with state and concurrent computations. It offers a clean and highly expressive mathematical foundation to assign formal meaning to open system computation. In rewriting logic, concurrent computations are axiomatized by (possibly conditional) rewrite rules of the form \( l \rightarrow r \), meaning that any system state satisfying the pattern \( l \) will be transited to a system state satisfying \( r \).

**Figure 1: Interaction of Rules Between Popular Home Security Services**

![](figure1.png)

**Figure 2: Trigger-Action Graphs Depicting Explicit and Implicit Chaining**

![](figure2.png)

**Figure 3: Condition Bypass Vulnerability**

![](figure3.png)

This structured and detailed approach ensures that the text is clear, coherent, and professional, providing a comprehensive overview of the research and its significance.