title:Charting the Attack Surface of Trigger-Action IoT Platforms
author:Qi Wang and
Pubali Datta and
Wei Yang and
Si Liu and
Adam Bates and
Carl A. Gunter
Charting the Atack Surface of Trigger-Action IoT Platforms
Qi Wang,†∗ Pubali Datta,†∗ Wei Yang,‡ Si Liu,† Adam Bates,† Carl A. Gunter†
† University of Illinois at Urbana-Champaign, ‡The University of Texas at Dallas
{qiwang11,pdatta2,siliu3,batesa,cgunter}@illinois.edu,PI:EMAIL
ABSTRACT
Internet of Things (IoT) deployments are becoming increasingly
automated and vastly more complex. Facilitated by programming
abstractions such as trigger-action rules, end-users can now easily
create new functionalities by interconnecting their devices and
other online services. However, when multiple rules are simulta-
neously enabled, complex system behaviors arise that are diicult
to understand or diagnose. While history tells us that such con-
ditions are ripe for exploitation, at present the security states of
trigger-action IoT deployments are largely unknown.
In this work, we conduct a comprehensive analysis of the interac-
tions between trigger-action rules in order to identify their security
risks. Using IFTTT as an exemplar platform, we irst enumerate the
space of inter-rule vulnerabilities that exist within trigger-action
platforms. To aid users in the identiication of these dangers, we go
on to present iRuler, a system that performs Satisiability Modulo
Theories (SMT) solving and model checking to discover inter-rule
vulnerabilities within IoT deployments. iRuler operates over an ab-
stracted information low model that represents the attack surface
of an IoT deployment, but we discover in practice that such models
are diicult to obtain given the closed nature of IoT platforms. To
address this, we develop methods that assist in inferring trigger-
action information lows based on Natural Language Processing.
We develop a novel evaluative methodology for approximating plau-
sible real-world IoT deployments based on the installation counts
of 315,393 IFTTT applets, determining that 66% of the synthetic
deployments in the IFTTT ecosystem exhibit the potential for inter-
rule vulnerabilities. Combined, these eforts provide the insight
into the real-world dangers of IoT deployment misconigurations.
CCS CONCEPTS
· Security and privacy → Formal methods and theory of security;
Vulnerability scanners; Software security engineering; · Comput-
ing methodologies → Natural language processing; · Computer
systems organization → Embedded and cyber-physical systems.
KEYWORDS
Trigger-Action IoT Platform; Inter-rule Vulnerability; Formal Meth-
ods; NLP; Information Flow
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proit or commercial advantage and that copies bear this notice and the full citation
on the irst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciic permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11ś15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11. . . $15.00
https://doi.org/10.1145/3319535.3345662
ACM Reference Format:
Qi Wang,†∗ Pubali Datta,†∗ Wei Yang,‡ Si Liu,† Adam Bates,† Carl A. Gunter†.
2019. Charting the Attack Surface of Trigger-Action IoT Platforms. In 2019
ACM SIGSAC Conference on Computer& Communications Security (CCS ’19),
November 11ś15, 2019, London, United Kingdom. ACM, New York, NY, USA,
15 pages. https://doi.org/10.1145/3319535.3345662
1 INTRODUCTION
The Internet of Things (IoT) is growing rapidly. With predictions of
20 billion deployed IoT devices by 2020 [1], the IoT has evolved from
isolated single devices to integrated platforms that facilitate interop-
erability between diferent devices and online services (e.g., Gmail).
Samsung’s SmartThings[11], Apple’s HomeKit [4], IFTTT [5] and
Zapier [17] are just a few examples. IoT platforms support end-user
customizations, with many going so far as to provide programming
frameworks for the design of simple automation logic that enable
customized functionality. Currently, trigger-action programming
(TAP) is the most commonly-used model to create automations in
IoT. Studies have shown that about 80% of the automation require-
ments of typical users can be represented by TAP and that even
non-programmers can easily learn this paradigm [85].
Unfortunately, as IoT deployments grow in complexity, so do
their attack surface ś as users further automate their homes, un-
expected interactions between the automation rules may give rise
to alarming new classes of security issues [81]. Consider the pos-
sibility that a user has installed the rule If temperature exceeds 30
◦C, then open my windows; while this may be innocuous in isola-
tion, it could be leveraged by an attacker to gain physical entry to
the house if the user has also installed the rule (If you say) łAlexa,
trigger heaterž, then turn the heater on. While IoT presents a vari-
ety of novel security challenges, the threats created by the ease of
trigger-action automation are worthy of careful consideration.
Reasoning about the security of trigger-action IoT platforms
requires a precise understanding of the interplay between trigger-
action rules. The circumstances under which the interactions be-
tween two rules should be designated as a bug or vulnerability, as
opposed to a feature, are not presently clear. Even among small
rulesets, such as the real-world example shown in Figure 1, it is
not immediately obvious whether this composition of 5 rules could
lead to a breach in the user’s home security system; in fact, because
the three rules (r 2, r 4, r 5) all modify the security mode of the user’s
Somfy Home Security System, there is a legitimate risk that the sys-
tem could reach an unsafe state. What further frustrates analysis is
the fact that trigger-action IoT ecosystems are closed-sourced and
developed by a variety of third parties, rendering existing program
analysis techniques unusable.
In this work, we describe three distinct and inter-related ef-
forts to enable precise reasoning about IoT security postures. To
* Joint irst authors.
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1439Button 
Widget
Location 
Service
New 
Command
Exit 
Region
Enter 
Region
r1
r2
r3
r4
r5
Start 
Recording
Manything 
Camera
Change 
Security Mode
Somfy 
Security 
System
Figure 1: Interaction of rules between popular home security
services from real-world examples [6]. Rules are represented as
hexagon vertices, triggers using oval vertices, actions using rectan-
gle vertices, and services using cloud vertices.
better understand trigger-action rule bugs, we irst exhaustively ex-
plore the space of inter-rule vulnerabilities within trigger-action IoT
platforms. This taxonomy of inter-rule vulnerabilities attempts to
systematize problems identiied by other recent work in this space
[30, 32, 52, 70] and uncovers new subclasses of this vulnerability.
Second, we leverage formal methods to enable the detection of these
bugs; we present the design and implementation of iRuler, an IoT
analysis framework that leverages Satisiability Modulo Theories
(SMT) solving and model checking to discover inter-rule vulnera-
bilities. However, iRuler requires an information low graph of the
IoT deployment to operate, which at present is unavailable due to
the opacity of commodity IoT platforms. To overcome this obstacle
in the absence of viable program analysis techniques, the third
and inal element of our design is an approach to infer inter-rule
information lows by using Natural Language Processing (NLP)
to inspect the text descriptions of triggers and actions on the IoT
platform website.
We evaluate iRuler against a real-world dataset of 315,393 ap-
plets found on the IFTTT website. Testing against a manually-coded
ground truth of inter-rule lows, we ind that our NLP tool is able
to eliminate 72% of false dependencies in the IFTTT ecosystem
with minimal Type I error, the sources of which we characterize
in discussion. iRuler detects vulnerabilities in speciic conigura-
tions of IoT deployments, but at present robust data on realistic
conigurations is not publicly available. To address this, we develop
a method for synthesizing plausible rulesets based on publicly-
visible install counts of IFTTT applets. By testing iRuler on these
synthetic conigurations, we discover the widespread potential for
inter-rule vulnerabilities in the IFTTT platform, with 66% of the
rulesets being associated with at least one such vulnerability.
2 BACKGROUND
2.1 Trigger-action IoT Platforms
Home automation IoT platforms commonly use the trigger-action
programming paradigm, which provides an intuitive abstraction
for non-technical users wishing to automate their devices. Broadly,
Table 1: A comparison of several popular trigger-action platforms,
which vary in their support for conditions, rules with multiple ac-
tions, parameter passing from triggers to actions, and a rule store.
Platform
SmartThings [11]
IFTTT [5]
openHAB [10]
Microsoft Flow [8]
Zapier [17]
HomeKit [4]
Iris [7]
Wink [15]
Support
Conditions
Multiple
Actions
Trigger Values
used in Actions
Rule
Store
✓
✓
✓
✓
✗
✗
✗
✗
✓
✓
✓
✓
✓
✗
✗
✗
✓
✓
✓
✓
✓
✗
✗
✗
✓
✓
✓
✓
✓
✗
✓
✗
a trigger-action (TA) program speciies that when a certain trig-
ger event occurs (e.g., motion is detected), one or more actions
(e.g., turn on the light) should be subsequently executed. Emerging
trigger-action models are also becoming more expressive through
the introduction of advanced features. In Table 1, we compare the
trigger-action models in 5 popular smart home platforms and 3
popular task automation platforms. While we note the diferences
between these platforms, our study considers a generalized trigger-
action model in which each rule can have one trigger, one or more
actions, and a condition associated with each action.
The power of the trigger-action
Trigger-action Rule Chaining.
programming paradigm is that rules can be chained together [81];
the execution of an action can invoke another trigger event, causing
another rule to execute. There are two ways rules can be chained,
examples of which are given in Figure 2 in the form of trigger-
action graphs: rules A and B are Explicitly Chained if (1) A’s action
and B’s trigger belong to the same service and (2) executing A’s
action directly satisies B’s trigger event; rules A and B are Implicitly
Chained if (1) A’s action and B’s trigger connect to a global shared
medium or state and (2) executing A’s action manipulates the shared
medium such that B’s trigger is satisied.
If-this-then-that (IFTTT) [5] is a web-based
The IFTTT Platform.
task-automation platform which allows users to connect diferent
services to create automations using the trigger-action paradigm.
Services are typically published by third parties, facilitating inter-
operability with smart devices (e.g., Nest thermostat) or online
services (e.g., Gmail and Facebook). Each supported service pub-
lishes a set of triggers and actions that are akin to a service API. A
trigger is a source of events in a service. For example, a trigger in
the Nest thermostat service is łTemperature drops belowž, which
ires every time the temperature drops below a threshold. An action
is a task that a service can perform, e.g., sending an email. An applet
(i.e., a rule) is an automation program that consists of one trigger
and one or more actions. For example, a user can create an applet
to send an email if the temperature drops below a threshold. Most
triggers, like the one above, have trigger ields that determine under
what circumstances the trigger event should occur. Similarly, most
actions have action ields which are the parameters of the action.
Each trigger also has ingredients (i.e., parameters) which are basic
data available from the corresponding trigger event. For example,
the subject and the sender’s email address are two ingredients of an
email trigger. In an applet, trigger ingredients can be used as part of
a parameter by an action. An applet developer can also set further
conditions on the invocation of an action by using the ilter code
feature, which adds extra lexibility in the form of a TypeScript [14]
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1440R2
R1
C2
C1
T
· · ·
tb
ci
cb
A
ab
Service 2
Service 3
Rule 1
Unlock 
Door
Door
Unlocked
Rule 2
Send
SMS
Figure 3: The condition bypass vulnerability. Two paths exist from
tb to ab and ci , cb . The red line shows a rule chain to bypass cb .
Service 1
Motion
Detected
(a) Rule 1 and Rule 2 are explicitly linked through Service 2.
Service 1
Service 2
Service 3
Service 4
Temperature
User is  
Home 
Rule 1
Turn On
Heater
Temperature
High
Rule 2
Open
Window
(b) Rule 1 and Rule 2 are implicitly linked through the temperature.
Figure 2: Trigger-action graphs depicting (a) explicit chaining and
(b) implicit chaining. Solid and dotted-line edges represent explicit
and implicit chains, respectively.
code snippet. The ilter code has access to the data returned by the
trigger and metadata like the current time. It can use the informa-
tion to override action ield values or skip an action. An example
ilter code snippet is provided in Appendix A.
2.2 Model Checking and Rewriting Logic
Model checking [48] is a technique that checks if a system meets a
given speciication by systematically exploring the system’s state.
In an ideal case, a model checker exhaustively examines all possible
system states to verify if there is any violation of speciications.
Rewriting logic [61], a logic of concurrent change that can nat-
urally deal with state and with concurrent computations, ofers
a clean-yet highly expressive-mathematical foundation to assign
formal meaning to open system computation. In rewriting logic,
concurrent computations are axiomatized by (possibly conditional)
rewrite rules of the form l → r , meaning that any system state
satisfying the pattern l will be transited to a system state satisfying