      unsigned int v15; // eax
      __int64 v16; // rbx
      int v17; // r8d
      int v18; // r9d
      int v19; // r8d
      int v20; // r9d
      unsigned __int16 v21; // ax
      unsigned int v22; // eax
      char v24; // [rsp+0h] [rbp-80h]
      char v25; // [rsp+0h] [rbp-80h]
      char v26; // [rsp+0h] [rbp-80h]
      char v27; // [rsp+0h] [rbp-80h]
      __int64 v28; // [rsp+18h] [rbp-68h] BYREF
      __int64 v29[2]; // [rsp+20h] [rbp-60h] BYREF
      int v30; // [rsp+30h] [rbp-50h]
      int v31; // [rsp+34h] [rbp-4Ch]
      int v32; // [rsp+38h] [rbp-48h]
      int v33; // [rsp+3Ch] [rbp-44h]
      int v34; // [rsp+40h] [rbp-40h]
      v29[0] = 0LL;
      v29[1] = a1;
      v30 = a3;
      v31 = a3;
      v32 = 4;
      v33 = 22;
      LOBYTE(v34) = v34 & 0xE0;
      v34 = (32 * ASTR_NOT_REF_COUNTED) | v34 & 0x1F;
      v7 = astr_canonicalize(*(_QWORD *)(*((_QWORD *)cur_as_partition + 2) + 8LL), 5LL, v29, a5, 0LL, 0LL);
      v8 = v7;
      if ( v7 )
      {
        v15 = *(_DWORD *)(v7 + 16);
        if ( v15 :        
        callq  0x1c5e390 
    0xbec15f :        mov    0x10(%rbx),%r12d
    0xbec163 :        
        mov    27378486(%rip),%rax        # 0x26084a0 
    0xbec16a :        mov    0x10(%rax),%rax
    0xbec16e :        mov    0x8(%rax),%rdi
    0xbec172 :        mov    %rbx,%rdx
    0xbec175 :        mov    $0x5,%esi
    0xbec17a :        
        callq  0x1b4b2a0 
    0xbec17f :        
        jmp    0xbec187 
    0xbec181 :        mov    $0x0,%r12d
    (gdb) x/10gx $rdi
    0x1115fe018:    0x5057344157596753      0x356e674e66623269
    0x1115fe028:    0x7155336a5a465335      0x2f5a6c7272483653
    0x1115fe038:    0x544247674f624d77      0x337a446e39775850
    0x1115fe048:    0x654765743451734b      0x30756d4e5a536b4c
    0x1115fe058:    0x3461474947764668      0x5a38303835356d64
    (gdb) set print elements 0
    (gdb) x/s $rdi
    0x1115fe018:     "SgYWA4WPi2bfNgn55SFZj3UqS6HrrlZ/wMbOgGBTPXw9nDz3KsQ4teGeLkSZNmu0hFvGIGa4dm55808Zuikx4s1rIbTiuyw1z5VkZGuXLl31mObPvrbowtqoBgaeTfAwImtJrw4g2kQoe35b/Z0AgSlu9/LxKRKTaG1jYk6chGNJpKTBCmEqRWKFtJsPjnB9xkAiYspO1T2AsgR9KAq9+cV93X/ZtPkfutRj4IaI3LcMnDxQ+9Pb75HYBZ9LYVqOPGowGVf/Opz40VU6xyWzRlg45ouEHTFS45xCPCe/eQe3mPjsp/kMGsM2e6611stx3Isu+GMgwDGd5hlRp4lFdQ=="
复制的源数据是一串字符串，我们前往burp中看一下流量包刚好是``字段中的数据，因此很自然地想到构造超长字符串替换``标签的内容。
前面我们看到`v78`变量距离栈底部0x890字节，因此构造如下内容：`'A'*0x890+'B'*8+'C'*8`放入``标签中，然后在`ns_aaa_saml_verify_signature`函数最后一条`ret`指令打个断点
成功验证了栈溢出漏洞存在
### 漏洞利用
查看下`nsppe`进程的保护机制，没有canary，栈可执行，程序没有aslr无需泄露基址，可控栈空间很大，似乎是很容易利用。
但很快就发现事情似乎没那么简单，Citrix接收到html中的`SAMLResponse`响应后，将响应base64解码后转换为xml文本，而根据W3C的标准，以下`\x00-\x08?\x0b-\x0c?\x0e-\x1f`16进制的字符是不被允许出现在XML文件中的，即使放在``
中，也不能幸免。
也就是说，我们只能控制栈变量到返回地址之间的栈空间，且可控的栈内容不能包含以上字符，因此只能放入经过编码的shellcode。而我们的程序高地址都是`\x00`，也无法在栈中构造ROP链，只有一次覆盖返回地址低位3字节的机会。
可以寻找到合适的gadget将控制流转移到可控栈空间内实现RCE，也可以控制返回地址到大部分任意函数进行恶意操作。
### 参考文章
>   1. [进宫 SAML 2.0 安全](https://paper.seebug.org/2006/)
>
>   2. [How to Hunt Bugs in SAML; a Methodology - Part
> I](https://epi052.gitlab.io/notes-to-self/blog/2019-03-07-how-to-test-saml-> a-methodology/)
>
>   3. [CitrixADC
> 四种常见的拓扑模式以及MIP，SNIP的区别](https://blog.csdn.net/caizhih/article/details/121261670)
>
>   4. [How to Hunt Bugs in SAML; a Methodology - Part
> II](https://epi052.gitlab.io/notes-to-self/blog/2019-03-13-how-to-test-saml-> a-methodology-part-two/)
>
>   5. [APT5: Citrix ADC Threat Hunting
> Guidance](https://media.defense.gov/2022/Dec/13/2003131586/-1/-1/0/CSA-> APT5-CITRIXADC-V1.PDF)
>
>
* * *