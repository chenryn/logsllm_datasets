She then chooses a random vector −→v = (s, y2, . . . , yn) ∈
p . For i = 1, . . . , (cid:96) she computes λi = −→v · Mi, where
Zn
Mi is the vector corresponding to the i’th row of M .
She computes:
p
Ci = ga.λi h
−s
ρ(i), i = 1, . . . , (cid:96)
Finally, the output is ct = (C, C0, . . . , Cm) along with
a description of β, or ct = (C, C0, . . . , C(cid:96)) along with
a description of (M, ρ).
Then she recovers the plaintext as M = C · K−1.
Remark 1 In our scheme, to achieve the selective security,
all sets βi must be disjoint subsets, i = 1, . . . , m. That
means the attributes cannot be reused in the access formula.
To overcome this drawback, we allow each attribute to have
kmax copies of itself as in [18] (section 3.5). This means
that, as in [18], the key-size in our scheme will increase
by a factor of kmax, where kmax is the maximum number
of times an attribute can appear in the access formula. In
section 5.1, we show that in our scheme the user just needs
to keep one element du0 secret, the rest of the user’s secret
key can be made public.
3.3 Security
We will now prove the security of our construction in the
model deﬁned in section 2.1. We ﬁrst deﬁne a modiﬁed
BDHE assumption [7], and then prove the selective security
of our scheme under this assumption.
 OR AND AND FM AND FM AND WC FC 1 1 1 000-1 1001 0-1 11 0-11 0 0-1 000-11  0000-1  FM            11000                    10010 Crypto       0-1100 GC              00-100 WC             000-11  FC              0000-1  Crypto GC 234Deﬁnition 6 Modiﬁed-BDHE problem: Let (p, G, GT , e)
be a bilinear group system, choose a, t, s, q $← Zp, a genera-
tor g ∈ G. Given (cid:126)Y =
g, gs, ga, . . . , gaq
, gs(at+a), gat,
, . . . , ga2q
, gaq+2
ga2t, . . . , gaq t, gaq+2t, . . . , ga2q t
it must remain hard to distinguish between T = e(g, g)aq+1s
∈ GT and a random element T = R ∈ GT .
An adversary A that outputs b ∈ {0, 1} has advantage  in
solving Modiﬁed-BDHE problem in G if
(cid:104)A((cid:126)Y , T = e(g, g)aq+1s) = 0
(cid:104)A((cid:126)Y , T = R) = 0
(cid:105) − Pr
(cid:12)(cid:12)(cid:12)Pr
(cid:105)(cid:12)(cid:12)(cid:12) ≥ 
Deﬁnition 7 We say that the Modiﬁed-BDHE assumption
holds if no polytime adversary has a non-negligible advan-
tage in solving the Modiﬁed-BDHE problem.
Intuitively, to compute e(g, g)aq+1s one needs to know the
values gaq+1
or gaq+1t, but these elements are not provided
in (cid:126)Y . For completeness, we prove that this assumption holds
in the generic group model.
Proof. We ﬁrst rewrite the Modiﬁed-BDHE assumption
in the form of GDDHE assumption as follows:
P = {1, s, sa(t + 1), a, a2, . . . , aq, aq+2, . . . , a2q, at,
a2t, . . . , aqt, aq+2t, . . . , a2qt}
Q = {1}
f = {aq+1s}
Suppose that f is not independent to (P, Q), i.e., one can
ﬁnd bi,j, ci such that the following equation holds
(cid:88)
f =
{pi,pj}⊂P
bi,j · pi · pj + ci
We will use s to analyze f , so it is easy to deduce that one
needs to ﬁnd the constant b1, b2, b3, di, ej, 1 ≤ i ≤ 2q, 1 ≤
j ≤ 2q such that the following equation holds
aq+1s = (b1.s + b2.s.a(s + 1))(b3 + d1a + d2a2 + ··· + dqaq+
dq+2aq+2 + . . . d2qa2q + e1at + e2a2t + ··· + eqaqt+
eq+2aq+2t + ··· + e2qa2qt)
⇐⇒ aq+1 = (b1 + b2.a(t + 1))(b3 + d1a + d2a2 + ··· + dqaq+
dq+2aq+2 + . . . d2qa2q + e1at + e2a2t + ··· + eqaqt+
eq+2aq+2t + ··· + e2qa2qt)
We manage to put the term related to aq+1 in the left
equation, we have:
aq+1(1 − b2(dq + eq.t)(t + 1)) = L
(1)
where there is no term related to aq+1 appearing in L. Since
a, t, s are chosen at random, so to let the equation (1) hold,
one needs to choose b2, eq, dq such that (1− b2(dq + eq.t)(t +
1)) = t2b2eq + (b2dq + b2eq)t + b2dq − 1 = 0,∀t , this cannot
hold because one cannot ﬁnd b2, eq, dq such that simultane-
ously b2eq = 0 and b2dq + b2eq = 0 and b2dq − 1 = 0. That
means the equation (1) cannot hold or f is independent to
(P, Q).
1 ∨ ··· ∨ β∗
Theorem 1 Assume that β∗ is the challenge access policy
and from β∗ construct the corresponding challenge LSSS
matrix L’ of size (cid:96)(cid:48) × n(cid:48) and map function ρ(cid:48). Describe
β∗ = β∗
i , i = 1, . . . , m are disjoint sets
and then construct the corresponding challenge LSSS ma-
trix L∗ of size (cid:96)∗ × n∗ and map function ρ∗. If those LSSS
matrices satisfy (cid:96)(cid:48), n(cid:48), (cid:96)∗, n∗ ≤ q, our scheme is selectively
secure under the Modiﬁed-BDHE assumption.
m where β∗
Proof. The simulator S is ﬁrst given an instance of
Modiﬁed - BDHE assumption, it will simulate an adversary
A who attacks our scheme in the selective secure game with
non-negligible advantage and then use the output of A to
break the security of Modiﬁed-BDHE assumption.
Setup The simulator is ﬁrst given an instance of Modiﬁed-
BDHE assumption, and then receives challenge access
policy β∗ from A. Assume the size of β∗ is |β∗|.
1 ∨
She ﬁrst describes β∗ in the DNF form as β∗ = β∗
··· ∨ β∗
i , i = 1, . . . , m are disjoint sets (us-
ing the copies of attributes as needed as explained in
Remark 1). Then she compares between m and |β∗|
(the size of the original β∗). There are two cases:
m where β∗
First Case: m > |β∗|. Our scheme now is exactly the same
as the scheme in [18] (section 3.5). We thus refer the
reader to the proof of scheme in [18] (section 3.5).
Note that the instance of Modiﬁed-BDHE assumption
includes the instance of BDHE assumption.
Second Case: m ≤ |β∗|. The simulator ﬁrst constructs LSSS
1 ∨ ··· ∨ β∗
(cid:96)∗×n∗ , ρ∗) from β∗ = β∗
matrix (M∗
m where
both (cid:96)∗, n∗ ≤ q. To program the value e(g, g)α, the
simulator picks α(cid:48) $← Zp and implicitly sets α = α(cid:48) +
aq+1. She computes e(g, g)α = e(ga, gaq
The simulator ﬁnds disjoint sets of rows of matrix M∗:
I1, . . . , Im where {ρ(i), i ∈ Ij} = β∗
j .
β∗ is now described as: (∧ρ(i))i∈I1 ∨(∧ρ(i))i∈I2 ∨···∨
(∧ρ(i))i∈Im .
To program the group elements h1, . . . , hN , the simu-
lator implicitly deﬁnes the vector
)e(g, g)α(cid:48)
.
−→y = (t, ta, ta2, . . . , tan∗−1)
⊥ ∈ Zn∗
p
−→
λ = M∗ · −→y be the vector shares, thus for j =
Let
1, . . . , (cid:96)∗
(cid:88)
i∈[n∗]
λj =
∗
j,itai−1
M
She then ﬁnds the set {ωi}1≤i≤(cid:96)∗ such that for all
j = 1, . . . , m:
(cid:88)
i∈Ij
ωi · λi = t
For each hj, 1 ≤ j ≤ N, where there exists an indice
i ∈ [(cid:96)∗] such that j = ρ(i) (note that the function
$← Zp and
ρ is injective), the simulator chooses zj
computes: Note that the simulator knows matrix M∗
where k ∈ [n∗] from the instance of Modiﬁed-
and gtak
BDHE assumption.
hj = gzj · gωi
= gzj · gaωiλi
k∈[n∗ ] M∗
i,ktak
(cid:80)
235$← Zp and com-
Otherwise, the simulator chooses zj
putes hj = gzj . We note that {hj}j=1,...,N are dis-
tributed randomly due to choosing randomly zj. Fi-
nally, the simulator gives
param = (g, ga, e(g, g)α, h1, . . . , hN )
to A and ends the Setup phase.
Query phase 1 the simulator needs to answer the cor-
rupted queries. To this aim, A ﬁrst sends the set of
indices of attributes S ⊂ [N ] to simulator with the re-
quirement that the set of attributes associated with S
doesn’t satisfy M∗. The simulator ﬁrst ﬁnds a vector
−→x = (x1, . . . , xn∗ ) ∈ Zn∗
such that x1 = −1 and for
all i where ρ∗(i) ∈ S the product (cid:104)−→x · M∗
i (cid:105) = 0. Based
on the property of LSSS matrix, such vector −→x exists.
The simulator continues to pick r $← Zp and implictly
deﬁne the value su as:
p
su = r + x1aq + x2aq−1 + ··· + xn∗ aq−n∗+1
The simulator computes
du0 = gα(cid:48)
(gaq+1−i
)xi = gα · ga·su
gar (cid:89)
i=2,...,n∗
Note that x1 = −1 thus ga·su contains the term g−aq+1
which cancels out the unknown term gaq+1
in gα. With
the known vector −→x , she continues to compute:
u0 = gsu = gr (cid:89)
(cid:48)
d
i=1,...,n∗
(gaq+1−i
)xi
For j ∈ S such that there is no i ∈ [(cid:96)∗] satisfying
ρ∗(i) = j. The simulator knows values zj and com-
putes
j = (gsu )zj
hsu
For j ∈ S such that there is an indice i ∈ [(cid:96)∗] satisfying
ρ∗(i) = j. The simulator computes
(cid:80)
k∈[n∗ ] M∗
j = (gsu )zj ·
hsu
·g(r+x1aq +x2aq−1+···+xn∗ aq−n∗+1)ωi
i,ktak
Note that the product (cid:104)−→x ·M∗
i (cid:105) = 0 thus the simulator
doesn’t need to know the unknown term of form gaq+1t
to compute hsu
j , all other terms he knows from the
assumption. If j is outside the set S and there exists
i ∈ [(cid:96)∗] such that ρ∗(i) = j, the simulator cannot
i (cid:105) (cid:54)= 0 (this is exactly the
compute hsu
j
classical partition technique proof).
since (cid:104)−→x · M∗
Challenge The adversary gives two equal length message
1 to the simulator. The simulator picks a ran-
0,M∗
M∗
dom bit b, computes:
= M∗
C
and the other elements (C∗
gs(a+at)g
(cid:16)
(cid:32)
(ga · (cid:89)
∗
b · T · e(gs, gα(cid:48)
), C
1 , . . . , C∗
szρ(i) , . . . , gs(a+at)g
∗
0 = gs
(cid:80)
(cid:80)
gzρ(i) · gaωiλi )s, . . . , (ga · (cid:89)
m) =
i∈Im
i∈I1
i∈I1
(cid:17)
=
szρ(i)
gzρ(i) · gaωiλi )s
i∈Im
(cid:33)
(cid:32)
=
=
(ga (cid:89)
(ga (cid:89)
hρ(i))s, . . . , (ga (cid:89)
hi)s, . . . , (ga (cid:89)
i∈I1
i∈Im
hρ(i))s
hi)s
i∈β∗
i∈β∗
The disjoint sets {ρ(i), i ∈ Ij} is β∗
T = e(g, g)aq+1s then ct∗ is in valid form.
m
1
j . Note that if
Query phase 2 The same as Phase 1
Guess A sends his guess b(cid:48) to simulator, the simulator then
outputs 0 to guess that T = e(g, g)aq+1s if b(cid:48) = b;
otherwise, it outputs 1 to guess that T is a random
group element in GT .
When T = e(g, g)aq+1s the simulator S gives a perfect
simulation so we have that
(cid:104)S((cid:126)Y , T = e(g, g)aq+1s) = 0
(cid:105)