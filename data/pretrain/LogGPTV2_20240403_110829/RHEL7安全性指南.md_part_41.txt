:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    等级1 --- 安全等级 1
    提供了最低等级的安全性。基本的安全要求对于加密模块有详细规定（比如，至少需要使用一个
    Approved 算法或者 Approved
    安全性能）。没有具体的物理安全机制在安全等级 1
    的加密模块中必须超过生产等级组成的基本要求。一个安全等级为1的加密模块的例子就是
    PC（个人电脑）加密板。
    :::
-   ::: para
    等级2 ---
    安全等级2通过增加了篡改证据的要求，以加强安全等级1加密模块的物理安全机制，这包括了使用篡改争取的涂膜和封章，或模块中可移动覆盖或门的防盗锁。篡改证据的涂膜和印章被置于加密模块上因此涂膜或封印必须被破解以物理进入模块中的纯文本加密秘钥和
    CSP
    （重要安全参数）。篡改证据印章或防盗锁都被置于封面或者门上以防止未授权的物理访问。
    :::
-   ::: para
    等级3---
    除了安全等级2所要求的篡改证据安全机制外，安全等级3尝试阻止入侵者获得进入加密模块中
    CSP
    的权限。安全等级3所要求的物理安全机制目的是得到尝试物理访问探测和反应的高可能性，使用或者修改加密模块。当加密模块中可移动的封面/门被打开时，物理安全机制也许包括使用强大的附件和篡改检测器/响应电路中将所有的纯文本
    CSP 归零。
    :::
-   ::: para
    等级4---安全等级4
    提供了这一标准中最高的安全等级。在这一安全等级上，物理安全机制提供了在加密模块周围的完整保护套，目的是监测并对所有不授权的物理访问尝试作出回应。加密模块从任何方向渗透有非常高的几率会被探测出，导致了所有纯文本
    CSP
    的即刻归零。安全等级4的加密模块对于物理不受保护的环境中的运作十分有用。
    :::
:::
::: para
更多关于这些等级和 FIPS
标准的其他说明，请见完整
FIPS 140-2标准。
:::
::: section
::: titlepage
## [⁠]{#chap-Federal_Standards_and_Regulations.html#sec-Enabling-FIPS-Mode}7.1.1. 启动 FIPS 模式 {.title}
:::
::: para
为了让红帽 Linux 系统符合 FIPS （联邦信息处理标准）的 140-2
出版物，您需要作出一些修改以确保得到认可的加密模块得到使用。将您的系统（内核或者用户空间）切换到
FIPS 模式，请遵守以下步骤：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    为了适当核查操作插入式模块完整性，预链接不得不废止。这可以通过设置`/etc/sysconfig/prelink`{.filename}
    配置文件中的`PRELINKING=no`{.computeroutput}
    来完成。如有任何既存的预链接，应该使用
    `prelink -u -a`{.command}要求，在所有系统文件中解除。
    :::
2.  ::: para
    接下来，安装 [dracut-fips]{.package}包：
    :::
    ``` screen
    ~]# yum install dracut-fips
    ```
3.  ::: para
    重命名`initramfs`{.filename}文档：
    :::
    ``` screen
    ~]# dracut -f
    ```
    ::: warning
    ::: admonition_header
    **警告**
    :::
    ::: admonition
    ::: para
    这个操作会改写既存的`initramfs`{.filename}文档。
    :::
    :::
    :::
4.  ::: para
    修改在 `/boot/grub/grub.conf`{.filename}
    文档中当前内核的内核命令行，添加以下选项：
    :::
    ``` screen
                fips=1
    ```
    ::: note
    ::: admonition_header
    **注意**
    :::
    ::: admonition
    ::: para
    如果 `/boot`{.filename} 或者 `/boot/efi`{.filename}
    位于单独的分区，内核参数*`boot=`*
    必须被添加到内核命令行。你可以分别通过运行 `df /boot`{.command} 或者
    `df /boot/efi`{.command}这两个指令。
    :::
    ``` screen
    ~]$ df /boot
    Filesystem           1K-blocks      Used Available Use% Mounted on
    /dev/sda1               495844     53780    416464  12% /boot
    ```
    ::: para
    即使是在启动时设备名称改变，通过运行以下要求来辨认 UUID
    （通用唯一标准）以确保 the *`boot=`* 参数选择仍然运作。
    :::
    ``` screen
    ~]$ blkid /dev/sda1
    /dev/sda1: UUID="05c000f1-f899-467b-a4d9-d5ca4424c797" TYPE="ext4"
    ```
    ::: para
    根据上述例子，以下字符串需要被附到内核命令行上；
    :::
    ``` screen
    boot=UUID=05c000f1-f899-467b-a4d9-d5ca4424c797
    ```
    :::
    :::
5.  ::: para
    重启系统。
    :::
:::
::: para
您应该需要严格的 FIPS 合规性，`fips=1`{.option}
内核选项需要在系统安装时被添加到内核命令行，因此密码的生成是通过计算法则以及运作中持续的监控而完成的。用户应该同样通过移动鼠标以确保系统在安装过程中有足够的信息熵，或如果没有鼠标，也要确保可以多次按下按键。对于敲击键盘的次数应该多于
256 次。少于 256 次的键盘敲击次数会产生非唯一的钥匙。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Federal_Standards_and_Regulations.html#sec-National_Industrial_Security_Program_Operating_Manual}7.2. 国家工业安全计划操作手册 {.title}
:::
::: para
NISPOM（也称DoD 5220.22-M），作为 NISP
（国家行业安全项目）的构成部分，为所有的政府承包者关于分类信息而建立了一系列的程序和要求。当前的
NISPOM 于2006年2月28日更新，主要变化从2013年3月28日更改。 NISPOM
文档可以从以下链接中下载：。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Federal_Standards_and_Regulations.html#sec-Payment_Card_Industry_Data_Security_Standard}7.3. 支付卡行业数据安全标准 {.title}
:::
::: para
：[*PCI
安全标准委员会是一个开放的全球论坛，成立于 2006 年，它负责 PCI
安全标准的开发、管理、培训以及普及，其中包括数据安全标准（DSS）。*]{.emphasis}
:::
::: para
您可以在
下载 PCI DSS 标准 。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Federal_Standards_and_Regulations.html#sec-Security_Technical_Implementation_Guide}7.4. 安全技术实施指南 {.title}
:::
::: para
《安全技术实施指南》（或称 STIG，Security Technical Implementation
Guide）是计算机软件和硬件标准化安全安装的方法。
:::
::: para
更多关于 STIG
的信息请看以下链接：。
:::
:::
:::
[]{#chap-Encryption_Standards.html}
::: appendix
::: titlepage
# [⁠]{#chap-Encryption_Standards.html#chap-Encryption_Standards}附录 A. 加密标准 {.title}
:::
::: section
::: titlepage
# [⁠]{#chap-Encryption_Standards.html#sec-Synchronous_Encryption}A.1. 同步加密 {.title}
:::
::: section
::: titlepage
## [⁠]{#chap-Encryption_Standards.html#sec-AES}A.1.1. 高级加密标准 --- AES {.title}
:::
::: para
在加密中， AES
（高级加密标准）是被美国政府所采用的加密标准。这一标准包括三大块密码，AES-128,
AES-192 和 AES-256, 通过一个更大的合集并最初发表为 Rijindael。每个 AES
密码都有128个比特位大小，秘钥位大小分别是128、192和256比特。AES
密码被广泛分析，目前被全球使用，正如其前一代 DES （数据加密标准）一样。
[⁠]{#chap-Encryption_Standards.html#idm140694682843840}[^\[3\]^](#chap-Encryption_Standards.html#ftn.idm140694682843840){.footnote
xmlns:d="http://docbook.org/ns/docbook"}
:::
::: section
::: titlepage
### [⁠]{#chap-Encryption_Standards.html#sec-AES_History}A.1.1.1. AES 历史 {.title}
:::
::: para
AES 是由 NIST
（美国国家标准技术研究所）在经过5年标准化过程，于2001年11月26日在第197份出版物中发布的。在
Rijindael
的设计被选择之前，15个竞争设计会被展示和评选出最适合的一个。在2002年5月26日被作为一个标准而有效使用。这个设计在很多不同的加密包中被使用。
AES 是第一个被 NSA
（美国国家安全局）通过的作为顶级机密公开使用的密码。（详见下方 AES
安全体系）
[⁠]{#chap-Encryption_Standards.html#idm140694683795632}[^\[4\]^](#chap-Encryption_Standards.html#ftn.idm140694683795632){.footnote
xmlns:d="http://docbook.org/ns/docbook"}
:::
::: para
Rijindael 密码由两位比利时编码者 Joan Daemen （琼·德门）和 Vincent
Rijmen （文森特·瑞捷门）共同开发，并由他们递交到 AES 筛选过程。
Rijindael 是两个开发者姓名的混合。
[⁠]{#chap-Encryption_Standards.html#idm140694707614000}[^\[5\]^](#chap-Encryption_Standards.html#ftn.idm140694707614000){.footnote
xmlns:d="http://docbook.org/ns/docbook"}
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Encryption_Standards.html#sec-DES}A.1.2. 数据加密标准 --- DES {.title}
:::
::: para
数据加密标准（DES）是由国家标准局为美国在 1976
年选择作为联邦官方信息处理标准（FIPS）的块密码（共享秘密加密的形式），随后在国际上广为应用。它的依据是使用
56
位密钥的对称密钥算法。该算法最初与分类别的设计元素不符，密钥长度较短，并被怀疑是国家安全局的（NSA）的后门。DES
后经大量的学术研究，这些研究引发了对块加密以及加密分析的现代化理解。
[⁠]{#chap-Encryption_Standards.html#idm140694714114288}[^\[6\]^](#chap-Encryption_Standards.html#ftn.idm140694714114288){.footnote
xmlns:d="http://docbook.org/ns/docbook"}
:::
::: section
::: titlepage
### [⁠]{#chap-Encryption_Standards.html#idm140694643421344}A.1.2.1. DES 历史 {.title}
:::
::: para
DES
目前对于很多程序来说都不安全。主要是因为56比特秘钥长度太短。在1999年1月，distributed.net网站和电子前沿基金会联合在2小时15分钟内公开破解了一个
DES
秘钥。尽管它们在实际操作中不易被装载，也有一些同样的分析结果证实了密码的理论性弱点。尽管有很多理论攻击，但以三位DES
编码的计算被认为实际上很安全。在近些年，密码已经被
AES（高级加密标准）取代。
[⁠]{#chap-Encryption_Standards.html#idm140694706114656}[^\[7\]^](#chap-Encryption_Standards.html#ftn.idm140694706114656){.footnote
xmlns:d="http://docbook.org/ns/docbook"}
:::
::: para
在一些文档中，在作为标准的 DES 和被称为 DEA
（数据加密计算法则）的运算法则之间是有区别的。
[⁠]{#chap-Encryption_Standards.html#idm140694707429776}[^\[8\]^](#chap-Encryption_Standards.html#ftn.idm140694707429776){.footnote
xmlns:d="http://docbook.org/ns/docbook"}
:::
:::
:::
:::
::: section
::: titlepage