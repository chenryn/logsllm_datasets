In Table 2 we estimate the fees required to commit to the
blockchain our transactions, in addition to a typical deposit
transaction. Assuming all parties comply with the protocol,
each party (including Q) must pay between 0.05 USD and
Transaction
Size (Bytes)
Fees (BTC)
Fees (USD)
Deposit (typical)
Penalty (txp)
Challenge (txchal)
Response (txresp)
Output (txout)
250
504
293
266
1986
0.000007-0.000073
0.000015-0.000148
0.000009-0.000086
0.000008-0.000078
0.000058-0.000582
0.05-0.46
0.09-0.93
0.05-0.54
0.05-0.49
0.36-3.65
Table 2: Estimated fees for a typical deposit transaction and
the FASTKITTEN transactions, using data from CoinMarket-
Cap [2] and BlockCypher [1] retrieved on Nov. 14, 2018.
0.46 USD for the deposit. Additionally, the output transaction
txout requires between 0.36 USD and 3.65 USD in fees.
Other Well-known Contracts Certain well-known con-
tracts like ERC20 token and CryptoKitties inherently need
to be publicly available on the blockchain, since they are ac-
cessed frequently by participants which are not previously
known. In contrast, contracts resembling our examples above,
which rely on private data and where a ﬁxed set of participants
sends a large number of transactions, are highly efﬁcient when
moved off-chain using a system like FASTKITTEN. The na-
ture of off-chain solutions like FASTKITTEN or state channels
requires advance knowledge of the participants. Open con-
tracts like ERC20 and CryptoKitties that require continuous
synchronization with the blockchain and are meant to be pub-
licly accessible would eliminate the advantages of off-chain
solutions.
9 Discussion and Extensions
In order to explain and analyze the FASTKITTEN protocol, we
presented a simpliﬁed protocol version which only includes
the building blocks required to guarantee security. Depending
on the use case one might be interested in further properties.
Possible extensions discussed in this section include the op-
tion to pay the operator for his service, protect the operator
against TEE faults, hide the contract output from through a
layer of output encryption and allow cross-currency smart
contracts. In the following, we explain how to achieve these
features and at what cost they can be added to the simpliﬁed
protocol.
9.1 Fees for the Operator
The owner of the TEE provides a service to the users who
want to run a smart contract and, naturally, he wants to be
paid for it. In addition to the costs of buying, maintaining
and running the trusted hardware, he also needs to block the
security deposit q for the duration of the protocol. While the
security of FASTKITTEN ensures that he will never lose this
money, he still cannot use it for other purposes. The goal of
the operator-fees is to make both investments attractive for Q.
We assume that the operator will be paid ξ coins for each
protocol round for each party. Since the maximum number
of rounds m is ﬁxed at the protocol start, Q will receive ξ×
814    28th USENIX Security Symposium
USENIX Association
n × m coins if the protocol succeeds (even if the contract
terminated in less than m rounds). If the operator proves to
the TEE in round x that another party did not respond to the
round challenge, he will only receive a fee for the passed x
number of rounds (namely ξ × x × n). This pay-per-round
model ensures that the operator does not have any incentive
to end the protocol too early. If the protocol setup does not
succeed or the operator cheats, he will not receive any coins.
The extended protocol with operator fees requires each party
to lock ci + m× ξ coins and the operator needs to level this
investment with qci + m× ξ coins.
9.2 Fault Tolerance
In order to ensure that the execution of the smart contract
can proceed even in the presence of software or hardware
faults, the enclave can save a snapshot of the current state in
an encrypted format, e.g., after every round of inputs. This
encrypted state would be sent to the operator and stored on
redundant storage. If the enclave fails, the operator can instan-
tiate a new enclave which will restart the computation starting
from the encrypted snapshot. If the TEE uses SGX, snapshots
would leverage SGX’s sealing functionality [31] to protect
the data from the operator while making it available to future
enclave instances.
9.3 Privacy
As mentioned in the introduction, traditional smart contracts
cannot preserve privacy of user inputs and thus always leak
internal data to the public. In contrast to common smart con-
tract technologies, the FASTKITTEN protocol supports privacy
preserving smart contracts as proposed in Hawk [36]. This
requires private contract state to hide the internal execution
of the contract and input privacy, which means that no party
(including the operator) sees any other parties’ round input
before sending its own.
It is straightforward to see that FASTKITTEN has a secret
state, since it is stored and maintained inside the enclave.
Input privacy can easily be achieved by encrypting all inputs
with the public key of the enclave. This guarantees that only
the FASTKITTEN execution facility and the party itself knows
the inputs. If required, FASTKITTEN could also be extended
to support privacy of outputs from the contract to the parties,
by letting the enclave encrypt the individual outputs with the
parties’ public keys. But this additional layer should only be
used when the contract requires it, since in the worst case this
increases the output complexity of the challenge and output
transaction.
9.4 Multi-currency Contracts
FASTKITTEN requires from the underlying blockchain tech-
nology that transactions can contain additional data and can
be timelocked. Any blockchain like Bitcoin, Ethereum, Light-
coin and many others which allow these transaction types
can be used for the FASTKITTEN protocol. With some minor
modiﬁcations FASTKITTEN can even support contracts which
can be funded via multiple different currencies. This allows
parties that own coins in different currencies to still execute
a contract (play a game) together. The main modiﬁcation to
the FASTKITTEN protocol is that the operator and the enclave
need to simultaneously handle multiple blockchains in par-
allel. In particular, for each of the considered currencies, Q
needs to deposit the sum of all coins that were deposited by
parties in that currency. This is in order to guarantee that if the
operator cheats, players get back their invested coins in the
correct currency. In addition, the operator is obliged to chal-
lenge each party via its blockchain. If the execution completes
(or the operator proves to the enclave that one of the players
cheated), the enclave signs one output transaction for each
of the currencies. While this extension adds complexity to
the enclave program and leads to more transactions and thus
transaction-fees, the overall deposit amount stays identical to
the single blockchain use case.9 A complete design and proof
of correctness of a cross-ledger FASTKITTEN is left to future
work.
10 Conclusion
In this paper we have shown that efﬁcient smart contracts
are possible using only standard transactions by combining
blockchain technology with trusted hardware. We present
FASTKITTEN, our Bitcoin-based smart contract execution
framework that can be executed off-chain. Since FASTKIT-
TEN is the ﬁrst work that supports efﬁcient multi-round con-
tracts handling coins, for the ﬁrst time, this enables real-time
application scenarios, like interactive online gaming, with mil-
lisecond round latencies between participants. We formally
prove and thoroughly analyze the security of our general
framework, also extensively evaluating its performance in a
number of use cases and benchmarks.
Additionally, we discuss multiple extensions to our protocol,
such as adding output privacy or operator fees, which enrich
the set of features provided by our system.
Acknowledgments
We are grateful to our anonymous reviewers and our shepherd
Mihai Christodorescu for their constructive feedback.
This work has been supported by the German Research Foun-
dation (DFG) as part of projects HWSec, P3 and S7 within the
CRC 1119 CROSSING and the Emmy Noether Program FA
1320/1-1, by the German Federal Ministry of Education and
Research (BMBF) and the Hessen State Ministry for Higher
Education, Research and the Arts (HMWK) within CRISP,
by BMBF within the iBlockchain project, by the Intel Collab-
orative Research Institute for Collaborative Autonomous &
Resilient Systems (ICRI-CARS).
9This solution assumes that any party can receive coins in any of the
considered currencies.
USENIX Association
28th USENIX Security Symposium    815
Availability
An extended version of this paper, which includes the byte-
code of our sample Bitcoin transactions, will be publicly avail-
able at the Cryptology ePrint Archive at https://eprint.
iacr.org.
References
[1] BlockCypher, Nov 2018. https://live.blockcypher.com/btc/.
[2] CoinMarketCap, Nov 14 2018. https://coinmarketcap.com.
[3] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. Control-ﬂow in-
tegrity principles, implementations, and applications. ACM Transac-
tions on Information System Security, 13, 2009.
[4] I. Anati, S. Gueron, S. P. Johnson, and V. R. Scarlata.
Innovative
Technology for CPU Based Attestation and Sealing. In Workshop on
Hardware and Architectural Support for Security and Privacy (HASP).
ACM, 2013.
[5] M. Andrychowicz, S. Dziembowski, D. Malinowski, and L. Mazurek.
Secure multiparty computations on bitcoin. In 2014 IEEE Symposium
on Security and Privacy, 2014.
[6] ARM Limited.
Security technology: building a secure system
using TrustZone technology.
http://infocenter.arm.com/
help/topic/com.arm.doc.prd29- genc- 009492c/PRD29- GENC-
009492C_trustzone_security_whitepaper.pdf, 2008.
[7] C. Badertscher, U. Maurer, D. Tschudi, and V. Zikas. Bitcoin as a
transaction ledger: A composable treatment. In CRYPTO, 2017.
[8] J. Barbie. Why smart contracts are not feasible on plasma, Jul 2018.
https://ethresear.ch/t/why- smart- contracts- are- not-
feasible-on-plasma/2598.
[9] G. Belisle. A glimpse into the future of blockchain, 2018. Avail-
able at https://the-blockchain-journal.com/2018/03/29/a-
glimpse-into-the-future-of-blockchain/.
[10] I. Bentov, Y. Ji, F. Zhang, Y. Li, X. Zhao, L. Breidenbach, P. Daian, and
A. Juels. Tesseract: Real-time cryptocurrency exchange using trusted
hardware. IACR Cryptology ePrint Archive, 2017.
[11] A. Biondo, M. Conti, L. Davi, T. Frassetto, and A.-R. Sadeghi. The
guard’s dilemma: Efﬁcient code-reuse attacks against intel sgx. In
Proceedings of the 27th USENIX Conference on Security Symposium.
USENIX Association, 2018.
[12] F. Brasser, S. Capkun, A. Dmitrienko, T. Frassetto, K. Kostiainen,
U. Müller, and A. Sadeghi. DR.SGX: hardening SGX enclaves against
cache attacks with data location randomization. CoRR, abs/1709.09917,
2017.
[13] F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A.-
R. Sadeghi. Software grand exposure: SGX cache attacks are practical.
In USENIX Workshop on Offensive Technologies, 2017.
[14] Breadwallet. Breadwallet-core - spv bitcoin c library, 2018.
[15] N. Burow, S. A. Carr, S. Brunthaler, M. Payer, J. Nash, P. Larsen, and
M. Franz. Control-ﬂow integrity: Precision, security, and performance.
CoRR, 2016.
[16] V. Buterin et al. A next-generation smart contract and decentralized
application platform. white paper, 2014.
[17] C. che Tsai, D. E. Porter, and M. Vij. Graphene-sgx: A practical library
OS for unmodiﬁed applications on SGX. In 2017 USENIX Annual
Technical Conference, 2017.
[18] S. Chen, X. Zhang, M. K. Reiter, and Y. Zhang. Detecting privileged
In ACM
side-channel attacks in shielded execution with Déjá Vu.
Symposium on Information, Computer and Communications Security,
2017.
[19] R. Cheng, F. Zhang, J. Kos, W. He, N. Hynes, N. Johnson, A. Juels,
A. Miller, and D. Song. Ekiden: A platform for conﬁdentiality-
preserving, trustworthy, and performant smart contract execution. arXiv
preprint arXiv:1804.05141, 2018.
[20] J. Coleman, L. Horne, and L. Xuanji. Counterfactual: General-
https://l4.ventures/papers/
ized state channels, Jun 2018.
statechannels.pdf.
[21] M. Conti, S. Crane, T. Frassetto, A. Homescu, G. Koppen, P. Larsen,
C. Liebchen, M. Perry, and A.-R. Sadeghi. Selfrando: Securing the tor
browser against de-anonymization exploits. Proceedings on Privacy
Enhancing Technologies, 2016.
[22] V. Costan, I. A. Lebedev, and S. Devadas. Sanctum: Minimal Hard-
ware Extensions for Strong Software Isolation. In USENIX Security
Symposium, 2016.
[23] L. Davi, A. Dmitrienko, S. Nürnberger, and A. Sadeghi. Gadge me if
you can: secure and efﬁcient ad-hoc instruction-level randomization
for x86 and ARM. In 8th ACM Symposium on Information, Computer
and Communications Security, ASIACCS, 2013.
[24] S. Dziembowski, S. Faust, and K. Hostáková. General state chan-
nel networks. In Proceedings of the 2018 ACM SIGSAC Conference
on Computer and Communications Security, CCS 2018, Toronto, ON,
Canada, October 15-19, 2018, 2018.
[25] H. Galal and A. Youssef. Veriﬁable sealed-bid auction on the ethereum
blockchain. In International Conference on Financial Cryptography
and Data Security, Trusted Smart Contracts Workshop. Springer, 2018.
[26] J. A. Garay, A. Kiayias, and N. Leonardos. The bitcoin backbone
protocol with chains of variable difﬁculty. In CRYPTO. Springer, 2017.
[27] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and M. Costa.
Strong and Efﬁcient Cache Side-Channel Protection using Hardware
Transactional Memory. In 26th USENIX Security Symposium, 2017.
Intel’s plan to ﬁx meltdown in silicon raises
more questions than answers.
https://www.pcworld.com/