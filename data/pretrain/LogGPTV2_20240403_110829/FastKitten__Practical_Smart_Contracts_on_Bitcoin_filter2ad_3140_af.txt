### Table 2: Estimated Fees for a Typical Deposit Transaction and FASTKITTEN Transactions

In Table 2, we estimate the fees required to commit our transactions to the blockchain, in addition to a typical deposit transaction. Assuming all parties comply with the protocol, each party (including Q) must pay between $0.05 and $0.46 for the deposit. Additionally, the output transaction (txout) requires between $0.36 and $3.65 in fees.

| Transaction Type | Size (Bytes) | Fees (BTC) | Fees (USD) |
|------------------|--------------|------------|------------|
| Deposit (typical) | 250          | 0.000007-0.000073 | $0.05-0.46 |
| Penalty (txp)     | 504          | 0.000015-0.000148 | $0.09-0.93 |
| Challenge (txchal)| 293          | 0.000009-0.000086 | $0.05-0.54 |
| Response (txresp) | 266          | 0.000008-0.000078 | $0.05-0.49 |
| Output (txout)    | 1986         | 0.000058-0.000582 | $0.36-3.65 |

**Note:** The estimated fees are based on data from CoinMarketCap [2] and BlockCypher [1], retrieved on November 14, 2018.

### Other Well-known Contracts

Certain well-known contracts, such as ERC20 tokens and CryptoKitties, inherently need to be publicly available on the blockchain because they are frequently accessed by participants who are not previously known. In contrast, contracts that rely on private data and involve a fixed set of participants sending a large number of transactions, like those in our examples, are highly efficient when moved off-chain using a system like FASTKITTEN. Off-chain solutions, such as FASTKITTEN or state channels, require advance knowledge of the participants. Open contracts like ERC20 and CryptoKitties, which require continuous synchronization with the blockchain and are meant to be publicly accessible, would eliminate the advantages of off-chain solutions.

### 9. Discussion and Extensions

To explain and analyze the FASTKITTEN protocol, we presented a simplified version that includes only the building blocks necessary to ensure security. Depending on the use case, additional properties may be desired. Possible extensions include:

- **Fees for the Operator**
- **Fault Tolerance**
- **Privacy**
- **Multi-currency Contracts**

#### 9.1 Fees for the Operator

The owner of the Trusted Execution Environment (TEE) provides a service to users who want to run a smart contract and, naturally, expects compensation. In addition to the costs of buying, maintaining, and running the trusted hardware, the operator must also block the security deposit \( q \) for the duration of the protocol. While the security of FASTKITTEN ensures that the operator will not lose this money, it cannot be used for other purposes. The goal of the operator fees is to make both investments attractive for the operator.

We assume that the operator will be paid \( \xi \) coins for each protocol round for each party. Since the maximum number of rounds \( m \) is fixed at the start of the protocol, the operator will receive \( \xi \times n \times m \) coins if the protocol succeeds (even if the contract terminates in fewer than \( m \) rounds). If the operator proves to the TEE in round \( x \) that another party did not respond to the round challenge, they will only receive a fee for the \( x \) number of rounds (namely \( \xi \times x \times n \)). This pay-per-round model ensures that the operator does not have an incentive to end the protocol prematurely. If the protocol setup fails or the operator cheats, they will not receive any coins.

The extended protocol with operator fees requires each party to lock \( c_i + m \times \xi \) coins, and the operator needs to level this investment with \( q \times c_i + m \times \xi \) coins.

#### 9.2 Fault Tolerance

To ensure that the execution of the smart contract can proceed even in the presence of software or hardware faults, the enclave can save a snapshot of the current state in an encrypted format, e.g., after every round of inputs. This encrypted state would be sent to the operator and stored on redundant storage. If the enclave fails, the operator can instantiate a new enclave, which will restart the computation from the encrypted snapshot. If the TEE uses SGX, snapshots would leverage SGX’s sealing functionality [31] to protect the data from the operator while making it available to future enclave instances.

#### 9.3 Privacy

As mentioned in the introduction, traditional smart contracts cannot preserve the privacy of user inputs and thus always leak internal data to the public. In contrast, the FASTKITTEN protocol supports privacy-preserving smart contracts, as proposed in Hawk [36]. This requires private contract state to hide the internal execution of the contract and input privacy, meaning no party (including the operator) sees any other parties' round inputs before sending its own.

It is straightforward to see that FASTKITTEN has a secret state, as it is stored and maintained inside the enclave. Input privacy can easily be achieved by encrypting all inputs with the public key of the enclave. This guarantees that only the FASTKITTEN execution facility and the party itself know the inputs. If required, FASTKITTEN could also be extended to support the privacy of outputs from the contract to the parties by letting the enclave encrypt the individual outputs with the parties' public keys. However, this additional layer should only be used when the contract requires it, as it can increase the output complexity of the challenge and output transaction.

#### 9.4 Multi-currency Contracts

FASTKITTEN requires that the underlying blockchain technology allows transactions to contain additional data and be timelocked. Any blockchain, such as Bitcoin, Ethereum, Litecoin, and others, which allow these transaction types, can be used for the FASTKITTEN protocol. With minor modifications, FASTKITTEN can even support contracts funded via multiple different currencies. This allows parties that own coins in different currencies to still execute a contract (play a game) together.

The main modification to the FASTKITTEN protocol is that the operator and the enclave need to handle multiple blockchains in parallel. For each currency, the operator needs to deposit the sum of all coins that were deposited by parties in that currency. This ensures that if the operator cheats, players get back their invested coins in the correct currency. Additionally, the operator is obliged to challenge each party via its respective blockchain. If the execution completes (or the operator proves to the enclave that one of the players cheated), the enclave signs one output transaction for each currency. While this extension adds complexity to the enclave program and leads to more transactions and thus higher transaction fees, the overall deposit amount remains the same as in the single blockchain use case. A complete design and proof of correctness for a cross-ledger FASTKITTEN are left for future work.

### 10. Conclusion

In this paper, we have shown that efficient smart contracts are possible using only standard transactions by combining blockchain technology with trusted hardware. We present FASTKITTEN, a Bitcoin-based smart contract execution framework that can be executed off-chain. As the first work to support efficient multi-round contracts handling coins, FASTKITTEN enables real-time application scenarios, such as interactive online gaming, with millisecond round latencies between participants. We formally prove and thoroughly analyze the security of our general framework, also extensively evaluating its performance in various use cases and benchmarks.

Additionally, we discuss multiple extensions to our protocol, such as adding output privacy or operator fees, which enrich the set of features provided by our system.

### Acknowledgments

We are grateful to our anonymous reviewers and our shepherd Mihai Christodorescu for their constructive feedback.

This work has been supported by the German Research Foundation (DFG) as part of projects HWSec, P3, and S7 within the CRC 1119 CROSSING and the Emmy Noether Program FA 1320/1-1, by the German Federal Ministry of Education and Research (BMBF) and the Hessen State Ministry for Higher Education, Research, and the Arts (HMWK) within CRISP, by BMBF within the iBlockchain project, and by the Intel Collaborative Research Institute for Collaborative Autonomous & Resilient Systems (ICRI-CARS).

### Availability

An extended version of this paper, which includes the bytecode of our sample Bitcoin transactions, will be publicly available at the Cryptology ePrint Archive at https://eprint.iacr.org.

### References

[1] BlockCypher, Nov 2018. https://live.blockcypher.com/btc/.

[2] CoinMarketCap, Nov 14 2018. https://coinmarketcap.com.

[3] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. Control-flow integrity principles, implementations, and applications. ACM Transactions on Information System Security, 13, 2009.

[4] I. Anati, S. Gueron, S. P. Johnson, and V. R. Scarlata. Innovative Technology for CPU Based Attestation and Sealing. In Workshop on Hardware and Architectural Support for Security and Privacy (HASP). ACM, 2013.

[5] M. Andrychowicz, S. Dziembowski, D. Malinowski, and L. Mazurek. Secure multiparty computations on Bitcoin. In 2014 IEEE Symposium on Security and Privacy, 2014.

[6] ARM Limited. Security technology: building a secure system using TrustZone technology. http://infocenter.arm.com/help/topic/com.arm.doc.prd29-genc-009492c/PRD29-GENC-009492C_trustzone_security_whitepaper.pdf, 2008.

[7] C. Badertscher, U. Maurer, D. Tschudi, and V. Zikas. Bitcoin as a transaction ledger: A composable treatment. In CRYPTO, 2017.

[8] J. Barbie. Why smart contracts are not feasible on Plasma, Jul 2018. https://ethresear.ch/t/why-smart-contracts-are-not-feasible-on-plasma/2598.

[9] G. Belisle. A glimpse into the future of blockchain, 2018. Available at https://the-blockchain-journal.com/2018/03/29/a-glimpse-into-the-future-of-blockchain/.

[10] I. Bentov, Y. Ji, F. Zhang, Y. Li, X. Zhao, L. Breidenbach, P. Daian, and A. Juels. Tesseract: Real-time cryptocurrency exchange using trusted hardware. IACR Cryptology ePrint Archive, 2017.

[11] A. Biondo, M. Conti, L. Davi, T. Frassetto, and A.-R. Sadeghi. The guard’s dilemma: Efficient code-reuse attacks against Intel SGX. In Proceedings of the 27th USENIX Conference on Security Symposium. USENIX Association, 2018.

[12] F. Brasser, S. Capkun, A. Dmitrienko, T. Frassetto, K. Kostiainen, U. Müller, and A. Sadeghi. DR.SGX: hardening SGX enclaves against cache attacks with data location randomization. CoRR, abs/1709.09917, 2017.

[13] F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A.-R. Sadeghi. Software grand exposure: SGX cache attacks are practical. In USENIX Workshop on Offensive Technologies, 2017.

[14] Breadwallet. Breadwallet-core - SPV Bitcoin C library, 2018.

[15] N. Burow, S. A. Carr, S. Brunthaler, M. Payer, J. Nash, P. Larsen, and M. Franz. Control-flow integrity: Precision, security, and performance. CoRR, 2016.

[16] V. Buterin et al. A next-generation smart contract and decentralized application platform. White paper, 2014.

[17] C. che Tsai, D. E. Porter, and M. Vij. Graphene-SGX: A practical library OS for unmodified applications on SGX. In 2017 USENIX Annual Technical Conference, 2017.

[18] S. Chen, X. Zhang, M. K. Reiter, and Y. Zhang. Detecting privileged side-channel attacks in shielded execution with Déjá Vu. In ACM Symposium on Information, Computer and Communications Security, 2017.

[19] R. Cheng, F. Zhang, J. Kos, W. He, N. Hynes, N. Johnson, A. Juels, A. Miller, and D. Song. Ekiden: A platform for confidentiality-preserving, trustworthy, and performant smart contract execution. arXiv preprint arXiv:1804.05141, 2018.

[20] J. Coleman, L. Horne, and L. Xuanji. Counterfactual: Generalized state channels, Jun 2018. https://l4.ventures/papers/statechannels.pdf.

[21] M. Conti, S. Crane, T. Frassetto, A. Homescu, G. Koppen, P. Larsen, C. Liebchen, M. Perry, and A.-R. Sadeghi. Selfrando: Securing the Tor browser against de-anonymization exploits. Proceedings on Privacy Enhancing Technologies, 2016.

[22] V. Costan, I. A. Lebedev, and S. Devadas. Sanctum: Minimal Hardware Extensions for Strong Software Isolation. In USENIX Security Symposium, 2016.

[23] L. Davi, A. Dmitrienko, S. Nürnberger, and A. Sadeghi. Gadge me if you can: Secure and efficient ad-hoc instruction-level randomization for x86 and ARM. In 8th ACM Symposium on Information, Computer and Communications Security, ASIACCS, 2013.

[24] S. Dziembowski, S. Faust, and K. Hostáková. General state channel networks. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, CCS 2018, Toronto, ON, Canada, October 15-19, 2018.

[25] H. Galal and A. Youssef. Verifiable sealed-bid auction on the Ethereum blockchain. In International Conference on Financial Cryptography and Data Security, Trusted Smart Contracts Workshop. Springer, 2018.

[26] J. A. Garay, A. Kiayias, and N. Leonardos. The Bitcoin backbone protocol with chains of variable difficulty. In CRYPTO. Springer, 2017.

[27] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and M. Costa. Strong and efficient cache side-channel protection using hardware transactional memory. In 26th USENIX Security Symposium, 2017.

Intel’s plan to fix Meltdown in silicon raises more questions than answers. https://www.pcworld.com/