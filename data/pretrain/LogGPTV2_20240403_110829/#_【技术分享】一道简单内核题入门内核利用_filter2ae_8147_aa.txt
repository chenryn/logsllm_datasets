# 【技术分享】一道简单内核题入门内核利用
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
作者：[anciety](http://bobao.360.cn/member/contribute?uid=2806750221)
预估稿费：400 RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**前言**
对于学过用户空间pwn的同学来说，内核一直是向往但是却不知道如何下手的一个地方，最近的CISCN比赛中出现了一道内核的基础题目，我认为是一道非常适合内核入门的一道题目，所以我就这道题目，通过自己的分析，希望让大家学会如何去分析一道内核的题目，如何去完成内核的题目，如何通过阅读linux内核源码在内核漏洞利用中帮助自己理解细节，学会分析。
**调试环境**
内核的知识很多，我没有办法将所有知识都阐述详细，我在这里默认大家已经知道了以下内容的基本概念：
内核
特权等级
内核空间与用户空间
系统调用
slab/slub分配器
内核模块/驱动
这些都是内核的基础知识，我在这里不做详细的阐述，大家可以自己去找找资料，我在这里主要将这些基础概念给大家一个直观的印象。
**1\. 内核**
内核是操作系统的核心，目的是为上层提供一个接口，和CPU进行交互，方式就是通过设置各种CPU所需要的结构，让CPU能够提供相应的功能，比如设置虚拟内存所需要的一些结构，使得CPU能够顺利识别，从而提供虚拟内存功能。和操作系统进行交互可以通过系统调用等方式实现。
**2\. 特权等级**
CPU将指令分为各种特权等级，特权指令就是必须在特定特权下才能够执行的指令，否则会出现错误，intel将特权等级分为ring0到ring3，其中ring3特权最低，ring0最高，linux只使用了ring0和ring3，ring0为内核运行的等级，ring3为用户运行的等级。
**3\. 内核空间与用户空间**
内核空间就是操作系统自己运行的空间，运行在ring0特权等级，拥有自己的空间，位于内存的高地址，而用户空间则是我们平时应用程序运行的空间，运行在ring3特权等级，使用较低地址。内核拥有自己的栈，和用户空间的栈并不共用。
**4\. 系统调用**
系统调用是linux内核向用户空间提供功能的方式，通过调用特定的系统调用，用户空间可以获取内核提供的功能。比如read函数事实上就是一个系统调用，通过传入特定的参数，内核可以读取用户输入，并且输入到buf里。
通过使用系统调用，用户空间用户程序将会转入内核空间去执行，在执行完之后通过特殊方式回到用户空间，中间会涉及到用户空间与内核空间的切换。大致流程如下：
**1) 进入**
i. 通过swapgs切换GS段寄存器，是将GS寄存器值和一个特定位置的值进行交换，目的是保存GS值，同时将该位置的值作为内核执行时的GS值使用。
ii. 将当前栈顶（用户空间栈顶）记录在CPU独占变量区域里，将CPU独占区域里记录的内核栈顶放入rsp(esp)。
iii. 通过push保存各寄存器值，代码如下：
    1.  ENTRY(entry_SYSCALL_64)
    2.  /* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 */
    3.  SWAPGS_UNSAFE_STACK
    4. 
    5.  /* 保存栈值，并设置内核栈 */
    6.  movq %rsp, PER_CPU_VAR(rsp_scratch)
    7.  movq PER_CPU_VAR(cpu_current_top_of_stack), %rsp
    8. 
    9. 
    10./* 通过push保存寄存器值，形成一个pt_regs结构 */
    11./* Construct struct pt_regs on stack */
    12.pushq  $__USER_DS      /* pt_regs->ss */
    13.pushq  PER_CPU_VAR(rsp_scratch)  /* pt_regs->sp */
    14.pushq  %r11             /* pt_regs->flags */
    15.pushq  $__USER_CS      /* pt_regs->cs */
    16.pushq  %rcx             /* pt_regs->ip */
    17.pushq  %rax             /* pt_regs->orig_ax */
    18.pushq  %rdi             /* pt_regs->di */
    19.pushq  %rsi             /* pt_regs->si */
    20.pushq  %rdx             /* pt_regs->dx */
    21.pushq  %rcx tuichu    /* pt_regs->cx */
    22.pushq  $-ENOSYS        /* pt_regs->ax */
    23.pushq  %r8              /* pt_regs->r8 */
    24.pushq  %r9              /* pt_regs->r9 */
    25.pushq  %r10             /* pt_regs->r10 */
    26.pushq  %r11             /* pt_regs->r11 */
    27.sub $(6*8), %rsp      /* pt_regs->bp, bx, r12-15 not saved */
iv. 通过汇编指令判断是否是x32_abi（暂时可以忽略这个内容）。
v. 通过系统调用号，跳到全局变量sys_call_table相应位置继续执行相应系统调用。
**2) 退出**
i. 通过swapgs恢复GS值。
ii.
通过sysretq或者iretq恢复到用户空间进行执行，如果使用Iretq还需要给出用户空间的一些信息，比如CS值，eflags标志寄存器值，用户栈顶位置等等信息。
**5\. slab/slub分配器**
这是一个比较大的内容，内核中也需要使用到内存的分配，类似于用户空间malloc的功能。在内核中没有libc，所以没有malloc，但是需要这样的功能，所以有kmalloc，其实现是使用的slab/slub分配器，现在多见的是slub分配器。这个分配器通过一个多级的结构进行管理。首先有cache层，cache是一个结构，里边通过保存空对象，部分使用的对象和完全使用了对象来管理，对象就是指内存对象，也就是用来分配或者已经分配的一部分内核空间。kmalloc使用了多个cache，一个cache对应一个2的幂大小的一组内存对象。
slab分配器严格按照cache去区分，不同cache的无法分配在一页内，slub分配器则较为宽松，不同cache如果分配相同大小，可能会在一页内，这个点很重要，之后的exp会用到。
**6\. 内核模块/驱动**
这是linux拓展内核功能的一个功能，通过向内核插入内核模块可以动态的加载一些驱动代码，用来负责和硬件进行交互，或者在内核层提供一些软件功能。内核模块运行在内核空间，可以通过设备文件来进行交互，比如/dev/目录下的文件很多就是设备文件，打开设备文件，关闭设备文件等等就是使用open、close函数，这些函数在内核模块里进行定义，然后在加载的时候按照一定的规则进行设置，所以通过这些函数可以调用到内核里的模块的相应设置好的函数，最后在内核完成一系列操作，为用户空间提供功能。
SMEP是我需要稍微提一下的，这是一个内核的保护机制，目的是避免ret2usr利用方式，ret2usr即从内核空间劫持控制流，使得控制流回到用户空间，以ring
0执行用户空间代码来进行提权。开启了SMEP的时候，CPU将会阻止在ring
0执行用户空间代码。这是一个CPU功能，由CPU的CR4寄存器管理，用一个位来标志是否开启SMEP保护。不过，SMEP保护并没有阻止直接从用户空间获取数据，只是阻止执行用户空间代码。
**题目**
好了基础基本就提到这里，让我们来看一道题，这道题是ciscn-2017的babydriver，题目难度不大，很适合入门，让我们可以很直观的感受到完成一次内核pwn的整个过程。
**1\. 题目分析**
题目给出了3个文件，一个rootfs.cpio一个bzImage和一个boot.sh，boot.sh内容如下：
    1.#!/bin/bash
    2.
    3.qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append 'console=ttyS0 root=/dev/ram oops=panic panic=1' -enable-kvm -monitor /dev/null -m 64M --nographic -smp cores=1,threads=1 -cpu kvm64,+smep
很显然我们需要安装qemu，这个就自己去安装啦。
然后就是一个对qemu的调用，kernel使用了bzImage，然后用rootfs.cpio作为initrd，其实就是bzImage是内核的映像，然后rootfs.cpio是根文件的映像。在远程，也就是使用这个boot.sh打开的qemu环境，我们能接触到的就是在这个qemu环境里。
qemu环境里有flag，可是我们没有权限读取，必须是root才有权限读取，显然我们需要进行提权。
通过查看/lib/modules/目录，我们发现有一个babydriver.ko，通过查看/proc/modules我们可以看到babydriver.ko作为内核模块已经加载进了内核里，我们还可以看到其加载的地址，很好！
接下来的任务就很显然了，我们需要看懂babydriver.ko干了什么。
init和exit函数没有什么太大的意思，基本上就是设置参数，初始化设备等等工作，我们的重点是几个函数。不过需要注意，init中设置了/dev/babydev作为设备文件。
open函数：
    1.  __int64 __fastcall babyopen(inode *inode, file *filp,__int64 a3, __int64 a4)
    2.  {
    3.  char *v4; // rax@1
    4.  __int64 v5; // rdx@1
    5. 
    6.  _fentry__(inode, filp, a3, a4);
    7.  LODWORD(v4) = kmem_cache_alloc_trace(*((_QWORD*)&kmalloc_caches + 6),  0x24000C0LL, 64LL);
    8.  babydev_struct.device_buf = v4;
    9.  babydev_struct.device_buf_len = 64LL;
    10. printk("device openn", 0x24000C0LL, v5);
    11. return 0LL;
    12.}
close函数：
    1.__int64 __fastcall babyopen(inode *inode, file *filp, __int64a3, __int64 a4)
    2.  {
    3.   char *v4; // rax@1
    4.  __int64 v5; // rdx@1
    5. 
    6. _fentry__(inode, filp, a3, a4);
    7. LODWORD(v4) = kmem_cache_alloc_trace(*((_QWORD*)&kmalloc_caches + 6),  0x24000C0LL, 64LL);
    8. babydev_struct.device_buf = v4;
    9.  babydev_struct.device_buf_len = 64LL;
    10.  printk("device openn", 0x24000C0LL, v5);
    11. return 0LL;
    12.}
ioctl函数：
    1. __int64 __fastcall babyioctl(file *filp, __int64 command, unsigned __int64 arg, __int64 a4)
    2. {
    3. size_t v4; // rdx@1
    4. size_t v5; // rbx@1
    5. char *v6; // rax@2
    6. __int64 v7; // rdx@2
    7. __int64 result; // rax@2
    8. 
    9. _fentry__(filp, command, arg, a4);
    10. v5 = v4;silu
    11. if ( (_DWORD)command == 0x10001 )
    12. {
    13. kfree(babydev_struct.device_buf);
    14. LODWORD(v6) = _kmalloc(v5, 0x24000C0LL);
    15. babydev_struct.device_buf = v6;
    16. babydev_struct.device_buf_len = v5;
    17. printk("alloc donen", 0x24000C0LL, v7);
    18. result = 0LL;
    19. }
    20. else
    21. {
    22. printk(&default_arg_is_format_str, v4, v4);
    23. result = -22LL;
    24. }
    25. return result;
    26.}