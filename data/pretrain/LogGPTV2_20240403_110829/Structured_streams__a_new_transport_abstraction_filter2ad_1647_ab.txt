for example: an RTP stream for data and a parallel RTCP
stream for related out-of-band signaling [46]. With SST, an
application need not set up out-of-band control channels in
advance: the application can create a new substream at any
time in which to convey an out-of-band message relating
to the parent stream, without interfering with the normal
operation of the parent. Section 5 explores one experimental
use of out-of-band signaling in SST.
4. PROTOCOL DESIGN
SST consists of three related protocols, organized as shown
in Figure 1. The channel protocol is a connection-oriented
best-eﬀort delivery service that provides packet sequencing,
integrity and privacy protection, selective acknowledgment,
and congestion control. The negotiation protocol sets up the
channel protocol’s state, negotiating shared security keys
and optional features. Finally, the stream protocol builds
on the channel and negotiation protocols to implement the
reliable structured stream abstraction SST presents to the
application.
For space reasons this paper focuses on the
channel and stream protocols, which are of primary impor-
tance for implementing the structured stream abstraction.
4.1 Packets, Channels, and Streams
Figure 2 illustrates three key communication abstractions
that form the interfaces between SST’s layers—packets, chan-
nels, and streams—and how instances of these communica-
tion abstractions relate to each other over time.
At the lowest level, SST assumes that the underlying pro-
tocol (e.g., IP or UDP) provides only an unreliable, connec-
tionless, unicast packet delivery service, in which packets
are independent of each other and have ephemeral lifetimes.
Each packet carries some number of bytes, up to the network
path’s current maximum transfer unit (MTU), which may
change at any time. All communication within a channel or
stream ultimately reduces to a series of packets at this level.
On top of this connectionless service SST’s channel proto-
col builds a connection-oriented packet delivery service. Se-
mantically, the channel protocol’s most important functions
are to associate each transmitted packet with a particular
Figure 2: SST Communication Abstractions
connection instance or channel, and to assign monotonically
increasing packet sequence numbers to all packets transmit-
ted within a particular channel. The channel protocol also
attaches acknowledgment information to packets to deter-
mine when packets have arrived successfully, and uses this
acknowledgment information internally to implement con-
gestion control at channel granularity. Finally, the channel
protocol protects each packet with a message authenticator
and an optional encryption wrapper to provide end-to-end
security for all packets transmitted over the channel.
The stream protocol builds on this intermediate chan-
nel abstraction to provide TCP-like reliable byte streams to
the application. The stream protocol handles segmentation
and reassembly, retransmission of lost segments, receiver-
directed ﬂow control, and substream creation and manage-
ment. At any point in time, the stream protocol normally
multiplexes all streams between the same pair of hosts onto
a single channel. The fact that a channel’s sequence number
space does not wrap facilitates eﬃcient stream creation and
termination, but this property also implies that the stream
protocol must migrate long-lived streams from one channel
to another to give streams unlimited lifetimes as in TCP.
Figure 3 shows the layout of a typical SST packet. The
channel header is always eight bytes in the current version
of SST, and includes ﬁelds for channel identiﬁcation, packet
sequencing, and acknowledgment. The stream header is typ-
ically four or eight bytes depending on packet type, and con-
tains ﬁelds for stream identiﬁcation, receive window control,
and sequencing bytes within a stream. Following the appli-
cation payload, the channel protocol’s trailing message au-
thenticator is typically four bytes for lightweight TCP-grade
security, and 12 or more bytes for cryptographic security.
The next section details SST’s channel protocol, and Sec-
tion 4.3 describes the stream protocol. Finally, Section 4.4
brieﬂy outlines the negotiation protocol.
4.2 Channel Protocol
The channel protocol’s purpose is to provide transport ser-
vices that are independent of how the application “frames”
its communication into protocol data units [14], or streams
in SST. The communication state required to provide these
services is thus shareable across many application streams.
SST borrows its connection state, sequencing, and packet
security model from IPsec [31] instead of TCP. SST channels
are inspired by IPsec security associations, and SST packet
Figure 3: SST Packet Layout
sequence numbers work like those IPsec uses for replay pro-
tection in the AH and ESP [30]. While IPsec “hides” its
sequencing semantics from upper layers in the interest of
operating invisibly to existing transports, one of SST’s de-
sign insights is that this sequencing model provides a useful
building block for new, richer transport services.
The following sections detail the channel protocol’s iden-
tiﬁcation, sequencing, security, acknowledgment, and con-
gestion control services. While one packet submitted to
the channel protocol currently translates to one packet in
the underlying protocol (e.g., IP or UDP), the channel pro-
tocol could be extended to provide services such as chunk
bundling [49] or quality-of-service enhancement [50].
4.2.1 Channel Identiﬁcation
SST’s negotiation protocol sets up a channel’s initial state
when an application ﬁrst connects to a target host: each run
of the negotiation protocol yields a new channel. As part
of channel negotiation, each host assigns a channel ID for
each direction of ﬂow. Each transmitted packet includes the
receiver’s channel ID, enabling the receiver to ﬁnd the asso-
ciated channel instance state; channel IDs thus play the role
of IPsec’s security parameters index (SPI). A channel’s ID
may be reassigned immediately once the channel’s lifetime
ends: the packet authenticator described below rejects old
or replayed packets from prior channel instances. As SST’s
channel protocol is designed for use by the stream proto-
col, which needs at most a few active channels at once, the
channel ID ﬁeld may be relatively small (currently 8 bits).
Channel zero is reserved for the negotiation protocol.
4.2.2 Packet Sequencing and Replay Protection
TCP uses its byte sequence numbers for three diﬀerent
purposes: to distinguish and order data segments within
a connection instance, to distinguish segments belonging to
entirely diﬀerent connection instances [51,53], and to protect
against packet forgery [5]. SST uses its packet sequence
numbers for only the ﬁrst purpose, leaving the other two
functions to an explicit packet authenticator.
Each channel has a 64-bit packet sequence number space
for each direction of ﬂow, from which the channel proto-
col assigns sequence numbers consecutively to each packet
transmitted. As in IPsec or DCCP [32], every packet sent
gets a new sequence number, including acknowledgments
and retransmissions. The sequence number space does not
wrap, so if a host sends 264 packets on one channel, it nego-
tiates and switches to a new channel with a fresh space.
Like IPsec’s 64-bit sequence number extension [30], SST
authenticates packets using full sequence numbers but trans-
mits only the low bits explicitly in each packet. While the
size of the sequence number space limits a channel’s total
lifetime, the size of the sequence number ﬁeld in the packet
header limits the window of packets a host may transmit
within one round-trip. SST’s current 24-bit sequence num-
ber ﬁeld requires the sender to stay less than about 222
packets ahead of the receiver to ensure that the receiver
extrapolates sequence numbers correctly. To achieve max-
imum performance on fast links with long delay, SST may
need an optional header extension like DCCP’s long header
format [32], or a timestamp extension as in PAWS [29].
Also like IPsec, the channel protocol checks the sequence
number of each received packet against a bit mask of se-
quence numbers recently received, and discards without fur-
ther processing both duplicates and packets too old to be
covered by the bit mask. The width of this bit mask there-
fore limits how far out of order within a channel’s sequence
space a packet may be delivered to upper-layer protocols;
we call this value the channel’s mis-ordering limit (MOL).
4.2.3 Authentication and Encryption
SST’s packet security follows the design of IPsec’s ESP [30].
If strong security is not needed, the application can disable
encryption and request a lightweight 32-bit authenticator in
place of a cryptographic MAC. The lightweight authentica-
tor protects the channel against stale or replayed packets
sent in prior channel instances, and against attackers who
can inject forged packets but cannot monitor the communi-
cation stream, providing security comparable to other unse-
cured Internet transports like TCP. SST computes this au-
thenticator by calculating an ordinary 32-bit checksum over
the packet and a pseudo-header containing the full 64-bit
sequence number, then adding two values to the resulting
checksum: ﬁrst, the same 4-microsecond timer that TCP
uses to choose its initial sequence numbers [16, 53]; and sec-
ond, a hash of the connection identiﬁers and a random inter-
nal secret, as in Bellovin’s method of “keying” TCP ISNs [5].
SST’s keyed checksum oﬀers slightly better protection than
TCP’s keyed sequence numbers, because an SST attacker
must blindly guess exactly the correct checksum key, not
just any sequence number within some validity window.
4.2.4 Acknowledgments and Congestion Control
The channel protocol attaches acknowledgment informa-
tion to each transmitted packet, and uses this information
to implement congestion control. Each transmitted packet
acknowledges a contiguous range of received sequence num-
bers, indicated in the packet header’s Ack Sequence Num-
ber (ASN) and Ack Count (AckCt) ﬁelds. A host sends an
acknowledgment for every one or two upper-level data seg-
ments received as in TCP [2], but sets the AckCt ﬁeld as
large as possible reﬂecting the most recent contiguous run
of packets received. Successive acknowledgments therefore
usually cover overlapping sequence number ranges, minimiz-
ing the eﬀects of a lost acknowledgment. Figure 4 for ex-
ample illustrates the behavior of a host that acknowledges
every packet, upon receiving sequence numbers 1 through 7
in order except for a lost packet with sequence number 4.
Sending an acknowledgment range in each packet gives
SST the beneﬁts of selective acknowledgment without the
overhead or complexity of variable-length SACK headers [34].
Because SST assigns each packet a fresh sequence number,
including retransmissions of previously-transmitted data, its
acknowledgments provide more information than even TCP
with D-SACK [20]: the sender can tell exactly which copy
of a retransmitted segment arrived and detect false retrans-
Figure 4: Packet Acknowledgment Example
mits before the receiver has seen duplication. SST can thus
implement improvements to TCP congestion control [2] such
as forward acknowledgment [35], reordering tolerance [10],
and delay-sensitive schemes like TFRC [25]. As SST im-
plements congestion control at channel granularity, applica-
tions may use many concurrent streams without behaving
“antisocially” as with redundant TCP connections [19].
4.3 Stream Protocol
The stream layer multiplexes streams onto channels by di-
viding application data into segments according to the cur-
rent maximum transfer unit (MTU) of the network path,
and transmitting each segment as a separate packet on the
current channel. The receiving stream layer accepts these
potentially out-of-order segments and delivers them in or-
der to the application. The sender uses the channel layer’s
packet-oriented acknowledgments to determine when a seg-
ment has been successfully received, so the stream layer re-
quires no byte-oriented acknowledgments as in TCP.
The stream layer can attach a stream to a new channel
before detaching it from the old one, allowing the applica-
tion to continue using the stream without interruption while
transparently migrating the stream to the new channel. SST
does not treat channel failure due to loss of connectivity
as a “hard failure” like a TCP timeout. At the applica-
tion’s option, SST can retain stream state indeﬁnitely until
connectivity resumes and the negotiation protocol creates a
new channel. At this point SST migrates the application’s
streams to the new channel and the application resumes
where it left oﬀ. Stream migration also supports end-to-end
host mobility [47, 48]:
if a host’s IP address changes, SST
channels bound to that address fail, but if either endpoint
can ﬁnd the other’s new address (e.g., one host is non-mobile
or has a dynamic DNS name), SST can create a fresh chan-
nel between the new address pair and transparently migrate
the application’s streams to the new channel. Of course, if
one endpoint host reboots, then its stream state is normally
lost and the application must create new streams.
4.3.1 Stream Identiﬁcation and Attachment
When the stream layer creates a new stream on behalf
of an application, it assigns the stream a Unique Stream
Identiﬁer or USID. A stream’s USID is at least 128 bits,
remains ﬁxed through the stream’s lifetime, and identiﬁes
the stream as it migrates from one channel to another. The
stream layer must then attach the stream to a particular
channel before it can transmit application data. In the pro-
cess of attaching the stream to a channel, the stream layer
assigns a shorter, temporary 16-bit Local Stream Identiﬁer
(LSID) to identify the stream eﬃciently within the scope of
that particular channel. The stream layer uses this LSID in
place of the stream’s full USID in data segments it transmits
on this channel. The stream keeps its USID but gets a new
LSID each time SST attaches it to a diﬀerent channel. The
application is not normally aware of either USIDs or LSIDs.
While each stream has only one USID, LSIDs are speciﬁc
not only to a channel but to each direction of ﬂow within
that channel. Each endpoint has its own LSID space for each
channel, in which it assigns LSIDs to streams independently
of its peer. Each host tracks both its own and its peer’s
LSID space, using its own LSID space to identify the stream
for a data segment it transmits to its peer, and using its
peer’s LSID space to identify the stream for a data segment
it receives. For bidirectional use, a stream must have two
LSIDs, one assigned by each host for each direction of ﬂow.
4.3.2 Root and Top-Level Application Streams
When the stream protocol initiates negotiation of a new
channel, it creates and implicitly attaches a root stream to
the channel. SST uses this root stream only for internal sig-
naling: the application is unaware of its existence. When
an application opens a “top-level” application stream via
connect, SST ﬁrst opens a channel to the desired host if
none already exists, then creates a child of the channel’s in-
visible root stream for the application’s use. SST can reuse
the same channel and root stream to create many top-level
streams to the same target host, avoiding 3-way handshakes
for successive top-level streams in the same way that it does
for substreams the application creates via create_substream.
TCP uses its port numbers for two purposes: to distin-
guish among transport instances between the same pair of
hosts, and to name application rendezvous points via well-
known port numbers. SST splits these two functions, using
LSIDs exclusively for stream multiplexing, and using explicit
service negotiation for rendezvous. When the stream layer
creates a new top-level stream, before handing this stream to
the application, it ﬁrst sends a message on the new stream
to the responding host’s stream layer, indicating the ren-
dezvous point the initiating application wishes to connect
to. The responding stream layer intercepts this message and
replies indicating whether an application is listening at the
given rendezvous point. On success, both stream layers then
hand this top-level stream to the respective applications. An
SST rendezvous point is currently a pair of strings: a service
name (e.g., “www”) and a protocol name (e.g., “http”).
4.3.3 Creating Streams
To create a new child of a stream already attached to a
channel, the stream layer sends an Init packet, shown in Fig-
ure 5. The initiator speciﬁes the LSID it assigned the new
stream and the LSID of the existing parent, both in the ini-
tiator’s LSID space. The packet may also carry application
data for the new stream, as described below.
Although Init packets carry no USIDs, the hosts must