Figure 1: TrustZone software and hardware components. Soft-
ware can be executed in normal world or in secure world.
Isolation between these two worlds is enforced by the memory
controller (TZASC) that checks for each memory access which
world it originates from.
booting the Trusted OS (TOS),
it switches to the normal
world and boots the LOS. Most TrustZone-enabled devices
are conﬁgured to use secure boot, i.e., the boot loader cryp-
tographically checks the TOS prior to execution [5]. In fact,
many vendors lock their devices against end-user modiﬁcation
via secure boot, to ensure integrity of the secure world. This
allows them to make the secure world part of their TCB.
B. TrustZone Address Space Controller
With TrustZone, secure-world memory is isolated from the
untrusted normal-world memory through physical memory
partitioning. This is enforced in hardware by the TrustZone
Address Space Controller (TZASC) which resides between
the system bus and the memory chip (see Figure 1). It
supports multiple memory regions and access-control settings
based on several bus transaction characteristics. Originally,
this only included two types of memory accesses: non-secure
access (NS = 1), or secure access (NS = 0). A CPU core
in secure mode can perform accesses of the type secure
and non-secure, whereas CPU cores in normal mode can
only perform non-secure accesses. The ﬁrst TZASC reference
implementation from ARM, the TZC-380, was published in
2010 [6]. Its successor, the TZC-400 [8], was introduced 2013
and can utilize additional characteristics of a bus transaction
to separate the protected memory regions – this feature is
called identity-based ﬁltering. Thus, in current ARM reference
designs, every device that can act as a bus master (e.g.,
CPU, GPU, DMA controller) is assigned a bus-master ID in
hardware, which is appended to its memory bus transactions.
This can be used to assign memory regions to speciﬁc bus
masters for non-secure accesses. ARM advertises the identity-
based ﬁltering feature in context of their TrustZone Media
Protection Architecture (TZMP) [4], which is used for media
protection by exclusively assigning memory, e.g. the frame
buffer, to the GPU.
3
(Legacy)App(Legacy) AppTrusted AppTrusted App(Legacy) Operating SystemTrusted OSTrusted FirmwareSoftwarePhysical Memory PartitioningVirtual MemoryEL0EL1EL3NS = 0NS = 1Core 0Core 1TZASCSecure WorldNormal WorldHardwareCPURAMMem Bus&CtrlNormal WorldSecure World4)
7)
the secure world. This can be realized by an exclusive
shared memory, i.e., accessible only by the SA and
the secure world but not by untrusted normal-world
software.
Protection from malicious SAs. To enable unre-
stricted usage models for SAs, malicious SAs must
be tolerated. Protecting the platform from malicious
SAs can be achieved by limiting the access privileges
of SAs to a minimum (i.e., EL0) and preventing them
from accessing normal-world memory.
5) Hardware-enforced resource partitioning. To en-
sure strict isolation spatial and temporal isolation are
needed.
6) Minimal software changes. Leveraging existing in-
terfaces of the secure-world OS and the normal-world
OS prevents extensive modiﬁcation of the software
stack.
Positive user experience. Assigning a single CPU
core for limited time to SA execution leads to low
impact on the overall system performance for most
usage scenarios on todays commonly available multi-
core architectures. Latency can be kept low by min-
imizing the SA run-time environment.
IV. SANCTUARY DESIGN
The goal of the SANCTUARY architecture is to enable secure
and widespread use of Trusted Execution Environments (TEEs)
(e.g., through third-party developers) on ARM based devices.
SANCTUARY allows the creation of multiple parallel isolated
compartments on ARM devices in the normal world which are
strictly isolated from the LOS and Legacy Apps (LAs). The
isolated compartments, which we call SANCTUARY Instances,
run security-sensitive apps called Sanctuary Apps (SAs). Every
SANCTUARY Instance executes only one SA at a time. Since
all SANCTUARY instances are independent and separated from
each other, also the SAs become strongly isolated. Addition-
ally, all SANCTUARY instances are isolated from the existing
TrustZone secure world.
Spatial isolation of a SANCTUARY Instance is achieved by
(i) partitioning the physical memory using the TZC-400 mem-
ory controller, (ii) dedicating a CPU core to the SANCTU-
ARY Instance, and (iii) excluding the SANCTUARY Instance’s
memory from shared caches. Temporal isolation is ensured
by launching the SANCTUARY CPU core from a trustworthy
state (ARM Trusted Firmware (TF)) and erasing all sensitive
information from memory and caches before it exits.
We designed SANCTUARY in such a way that the required
changes to the existing software ecosystem are minimal: in
fact, SANCTUARY can extend existing TEE architectures with-
out affecting the functionality of already deployed software in
both the normal world and the secure world.
Figure 2 shows an abstract view of SANCTUARY’s design.
In the following, we describe SANCTUARY’s isolation mech-
anism, its initialization, and its security services.
A. SANCTUARY Isolation
In addition to the existing security boundary between Trust-
Zone’s secure world and normal world, SANCTUARY enables
isolation within the normal world. A dedicated memory region
4
Figure 2: SANCTUARY design overview. Within the normal
world, one core is reserved for SANCTUARY. The TCB,
marked in gray, includes the hardware and the secure-world
software that is involved in the initialization of an SA.
is made exclusively accessible by one CPU core by leveraging
ARM’s new memory access controller TZC-400. Details on
how the controller needs to be conﬁgured to achieve this
physical memory partitioning are given in Section V-E. As
a result, all software executing on that CPU core is protected
from untrusted software executing on the remaining CPU cores
of the system. In Figure 2, CPU core 2 running a SANCTUARY
Instance is conﬁgured to have exclusive access to the SANCTU-
ARY RAM partition, as depicted by the arrows. The untrusted
normal-world software – executing on CPU cores 0 and 1 – can
only access the normal world memory. Furthermore, the CPU
core assigned to the SANCTUARY Instance is not allowed to
access normal-world memory, achieving a two-way isolation
which allows SANCTUARY to tolerate potentially malicious
SAs. However, SANCTUARY does support shared memory
between normal world and SA for efﬁcient communication
as well as shared memory between secure world and SA to
establish a secure channel. This enables scenarios like secure
UI over TAs. SANCTUARY’s handling of shared memory is
explained in detail in Section V-E.
The secure-world software is trusted and therefore allowed to
access all memory, including normal-world memory, SANC-
TUARY memory, and secure-world memory (black arrows in
Figure 2).
Multi-SA isolation: SANCTUARY instances are either exe-
cuted consecutively on the same CPU core, or execute on sepa-
rate, mutually isolated cores with dedicated memory partitions.
After SA execution ﬁnished, the system returns to its original
state (see Section IV-B) and the next SANCTUARY instance
can be launched. This ensures strong isolation between SAs:
all SAs are executed completely independently of each other.
Privilege isolation: SAs are limited to execute in user-mode.
The privileged mode of a CPU core used by SANCTUARY is
occupied by the Sanctuary Library (SL). Important to note is
that the SL is not part of the TCB, but instead is only needed to
provide two main functionalities: (i) initializing an execution
environment for the SA, and (ii) providing service interfaces
to the SA, e.g., for accessing SANCTUARY’s security services.
B. SANCTUARY Initialization
SANCTUARY’s isolation does protect the integrity and conﬁ-
dentiality of an SA while it is executing on the dedicated CPU
TZASCLegacy OS (LOS)Sanctuary Lib (SL)Trusted OS (TOS)Trusted App (TA)Sanctuary App (SA)Legacy App (LA)Legacy App (LA)Normal WorldSecure WorldNormal World RAMSecure World RAMCPU Core 0CPU Core 1CPU Core 2CPU Core 3core. However, since the SA code is loaded by the untrusted
LOS, its integrity must be veriﬁed. The initialization process of
SANCTUARY provides the necessary veriﬁcation mechanism.
For better resource utilization, SANCTUARY does not dedicate
one CPU core for executing SAs permanently. If a new
SANCTUARY instance is created, one CPU core is shut down
and removed from the resources available to the LOS executing
in the normal world. All remaining CPU cores stay under
control of the LOS. Hence, the LOS can continue execution
of normal-world tasks preserving the system’s availability, i.e.,
the user does not notice negative effects from the creation of
a SANCTUARY Instance and the execution of an SA.
Next, the code to be executed on the SANCTUARY core, i.e.,
SL and SA, is loaded into a separate memory section. After
the memory isolation has been activated, the loaded code is
validated using digital signatures. The signature for the SL is
provided by the device vendor, whereas the signature for the
SA is provided by the SA developer. The detailed veriﬁcation
process is described in Section V. After a successful veriﬁca-
tion, the dedicated CPU core is restarted. The SANCTUARY
core starts from a deﬁned initial state, boots the SL and
executes the SA.
After an SA has ﬁnished,
the dedicated core removes all
information from the memory, invalidates all cached data, and
shuts down. The isolation for the wiped memory is deactivated,
making the memory available to the LOS again. The CPU core
is restarted and reassigned to the LOS.
C. SANCTUARY Security Services
The initial content of an SA is loaded from unprotected
memory, hence, it can be manipulated and cannot contain
conﬁdential data. Therefore, SANCTUARY needs to provide
a mechanism to provision conﬁdential data to an SA over a
secure channel after it has been created. However, to ensure
that secret data is not sent to a malicious (or maliciously
modiﬁed) SA, the integrity and authenticity of an SA needs to
be veriﬁed before provisioning secret data. To enable secure
provisioning of secret data to an SA and secure storage of
secret data, SANCTUARY provides a set of security services
implemented as TAs supplied by the device vendor (called
vendor TAs throughout the remaining paper). These TAs run
within the secure-world Trusted OS (TOS) (see Figure 2).
Remote attestation allows an SA to establish a secure channel
to an external entity. Through the platform identity feature of
TrustZone, the integrity measurement of SANCTUARY can be
authentically reported to a third party. Linking the authentic
integrity report with the establishment of a secure channel to
the SA creates a secure and authenticated channel through
which conﬁdential data can be provisioned.
Sealing allows SAs to store sensitive data such that only
instances of the originating SA can accesses the data. SANC-
TUARY provides each SA with a unique encryption key that
is derived from the hash value computed over the SA binary.
The key can be used to encrypt data, e.g., before writing it to
persistent storage.
Further security services,
like monotonic counters, secure
timers, secure randomness, etc. can be provided by TrustZone’s
secure world, as well. Similar security services are commonly
available in commercial TEE implementations, for instance
Intel SGX [31], [39], [25], [2] and can be implemented
similarly in SANCTUARY. In addition, secure user interfaces
for SAs can easily be provided by TAs, as secure I/O is already
provided by TrustZone.
D. SANCTUARY Software Model
With SANCTUARY, every application developer is able to
utilize TEE functionalities, i.e., every developer can deploy
an SA. Each SA belongs to an untrusted LA. This allows
straightforward deployment through existing app markets: SAs
come as part of LAs using the standard installation routine.
Additionally, by coupling each SA with an LA, the functional-
ities of the SL can be minimized. In particular, the LA acts as
a proxy and allows the SA to make use of all functionalities
provided by the LOS, like ﬁle system access. The LA and
SA can efﬁciently exchange information and interact with
each other via shared memory. When an SA wants to provide
sensitive data to the LA, e.g., for persistent storage, the SA
can use the sealing service (see Section IV-C) to encrypt the
data before sending it to the LA.
How to partition an application into security-critical and un-
critical parts is an orthogonal problem.
V.
IMPLEMENTATION
System Setup. We implemented SANCTUARY on a HiKey
960 development board, as it provides a recent ARMv8 SoC
design that is commonly used on modern mobile devices.
Moreover,
the HiKey 960 is one of the few development
boards which gives developers the possibility to deploy own
software in the secure world. The HiKey 960 is based on an
octa-core ARM big.LITTLE processor architecture with four
ARM Cortex-A73 and four Cortex-A53 cores.
SANCTUARY Software Components. An overview of our
SANCTUARY implementation is shown in Figure 3. For
the secure-world Trusted OS (TOS) we use OP-TEE [1]
which currently is the most developed open-source TOS. The
SANCTUARY design is not limited to a particular TOS and
can also be implemented using a TOS which provides a less
rich feature set. OP-TEE comes bundled with a recent Linux
distribution which we use as the normal-world Legacy OS
(LOS). We implement a custom kernel module (KM) as part of
the LOS which manages the SANCTUARY Instances from the
normal world. In OP-TEE, we implement two vendor Trusted
Apps (TAs), the Proxy TA and the Sealing TA. They provide
the basic security services for SANCTUARY, namely remote
attestation and sealing. A SANCTUARY Instance consists
of the Sanctuary Library (SL) and a SA. In our prototype
implementation, we use the Zircon micro kernel [24] as the
basis for our SL. Besides adding two vendor TAs, we only
make small one-time changes to the Trusted Computing Base
(TCB), i.e. OP-TEE and the ARM TF. The custom Static
Trusted App (STA) which we add to OP-TEE manages the
SANCTUARY Instances from the secure world. The Lines of
Code (LOC) added to the TCB add up to 1313. The two
vendor TAs make up more than half of the added lines. In
total however, the TCB gets reduced because all TAs from
third-party developers are removed from the secure world.
5
Figure 3: Implementation overview of SANCTUARY.
Since no source code of third-party TAs used on current
devices is publicly available, we refer to Huang et al. [29] for
average TA sizes. They implemented a mobile payment and
chat TA consisting of 900 LOC and 200 LOC, respectively,
which can be seen as a lower limit for implementing a useful
TA. This shows that removing all third-party TAs from the
secure world outweighs additions made to OP-TEE and the
Trusted Firmware (TF) by an order of magnitude in terms
of LOC. The number of added or modiﬁed LOC for all
components are shown in Table I.
SANCTUARY Hardware Components. In SANCTUARY, we
utilize the fact that unique master IDs can be assigned to every
CPU core and therefore also to every memory transaction
performed by a core. These transaction IDs can then be used
to ﬁlter memory accesses on a hardware level. As such,
memory regions can be made core-exclusive. The ﬁltering
and permission enforcement is performed by the TZC-400
memory controller. The TZC-400 allows or denies access to
memory regions depending on two properties: (i) the type of
the access transaction performed by the core running the code
(secure or non-secure), and (ii) the bus master ID of the core
which executes the SANCTUARY Instance. Enforced access
permissions are shown in Figure 3 in the Memory Permissions