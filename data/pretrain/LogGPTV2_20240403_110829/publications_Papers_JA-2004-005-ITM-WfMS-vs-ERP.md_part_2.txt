• Heterogeneous and autonomous
environments
System • Workflows are manually • Based on pre-written “off-the-
Implementation designed and the corresponding shelf ” components
code is automatically generated
• Require data conversions
• May require data conversions
Table 1 – WfMS vs. ERP Systems
2.1 Domain Scope
The domain scope defines the suitability of a system for a specific type of application or
organization. This characterization is important since organizations have different needs and
characteristics. For example, a multinational organization obviously has different needs
compared to an organization that has only a regional base, and a financial organization has
different requirements from a marketing organization.
Workflow systems have been installed and deployed successfully in a wide spectrum of
organizations. Muth et al. [19] observe, “most workflow management systems, both products
and research prototypes, are rather monolithic and aim at providing full-fledged support for the
6
widest possible application spectrum.” The same workflow infrastructure (e.g., METEOR [20])
can be deployed in various domains, such as bio-informatics [21], healthcare [22],
telecommunications [23], military [24], and school administration [25]. Leymann and Roller [26]
discuss the application of workflow to other areas, such as mobile computing, systems
management, multi-databases, the Internet, application development, object technology,
operating systems, and transaction management.
In figure 2, a workflow process from the field of genomics [27] exemplifies how workflow
systems can be used to design processes for a broad spectrum of domains.
Figure 2. Genomic Workflow Example
A major task in genomics is determining the complete set of instructions for making an
organism. Genome projects are very demanding, and incur high costs of skilled manpower.
There are many different types of tasks that must be performed, such as sequencing, sequence
finishing, sequence processing, data annotation, and data submission. A single genomic
workflow may be spread across multiple research centers, and the individual tasks in a workflow
may be carried out at one or more of the participating centers. Many of the challenges of building
an information system to manage a physically distributed genome project can be addressed by a
workflow system.
The workflow model for such a workflow graphically specifies the control and data flow
among tasks. For example, the workflow model in Figure 2 is composed of several tasks and
sub-workflows. The tasks illustrated with machine gears represent automatic tasks, while the
ones illustrated with boxes represent sub-workflows.
At runtime, the workflow system reads the model specifications and transparently schedules
task executions, providing the right data at the right time to the right worker. It manages
7
distributed genomic tasks located at different research centers, such as DNA sequencing
machines, matching algorithms, and human resources. Further, the workflow system provides a
framework to easily reengineer a genomic workflow when new technological, biological, and
chemical advances are made.
The ability to separate flow logic from function logic makes workflow technology suitable in a
large number of domains. Thus, WfMS constitute a generic tool that can be used to integrate
different types of data, applications and people in a broad spectrum of contexts.
While some workflow systems are generic, others are more oriented to particular domains.
The overall high degree of domain independence allows for customization, specialization, and a
high level of uniqueness for the workflows created. While it has been said that workflow systems
can be applied to many domains, no concrete solution has yet been proposed for workflow
deployment in an international setting. This is because WfMS do not yet include some
indispensable features, such as internationalization, multi-currencies, and multi-languages, which
are valuable when deploying workflows in worldwide markets.
On the other hand, ERP systems are domain specific due to the adoption of reference models
or process templates that embody the best practices in various business domains. ERP systems
include libraries of predefined business processes for various functional areas. Reference models
supposedly reflect preferred business models, including underlying data and process models. As
a result, ERP systems, via supplying a broad spectrum of dedicated applications, provide a
solution that satisfies many organizations.
ERP systems have developed industry best-practice solutions for most major industries, such
as aerospace and defense, automotive, consumer products, chemicals, engineering and
construction, retail, and health care. Implementing these ERP systems requires the setting of
thousands of parameters in order to customize applications to individual organizational contexts.
While the adoption of best-practices is a seductive approach, Kumar and Hillegersberg [28]
note considerable mismatches between the actual country, industry, and company specific
business practices and the reference models embedded in ERP systems. These mismatches have
led to many implementation problems and failures. One of the most notable failures is FoxMeyer
Drug, a $5 billion company that filed for bankruptcy in 1996, arguing that the primary cause of
problems was a failed ERP implementation [29, 30]. Mismatches between ERP systems and
organizational processes can be resolved through the configuration of parameters, adding
additional programs, or through the company adjusting to ERP processes. WfMS have had their
problems and failures as well [31]. However, these problems seem to be related to culture and
organizational dynamics associated with the implementation, not to domain specific process
models, which is the case in ERP failures.
Compared to WfMS, ERP systems do not supply an effective framework for dynamic domains
in which a process topology can constantly change due, for example, to new technological
advances. Additionally, ad hoc and heterogeneous processes are better managed using a WfMS,
mainly because they do not rely on predefined reference models. On the other hand, ERP
systems are well suited for multinational applications, since they offer features such as multi-
language support and multi-currency support. Additionally, ERPs provide dedicated solutions for
specific industries, allowing organizations not striving for differentiation to be more efficient and
competitive.
8
2.2 Technological Scope
The second dimension that we use to compare WfMS and ERP systems is the technological
scope. This dimension characterizes the systems based on their technological capabilities. Both
systems are similar in that their architectures have moved from mainframes to client server
architectures, and more recently to the Web. Although both systems manage business processes,
each one focuses on different types of business processes.
As an example, let us consider two business processes. The first one, a trading process, is used
to update customer orders, inventory, and financial databases in response to commercial
transactions between suppliers and customers. The workflow reflects the changes that are made
to the order database, to the inventory, and to the financial database. The second business process
manages the genetic sequencing procedure previously described (see Figure 2). The workflow is
responsible for coordinating the tasks of the lab assistants, controlling sequencing equipment,
and executing DNA matching algorithms against genetic databases. The two processes have a
different set of technological requirements; in the first case, the support is targeted toward
database access, data synchronization, and database interoperability, while the second process
requires human coordination, equipment control, and application execution.
WfMS and ERP systems have been developed with distinct sets of technological capabilities.
We can highlight these different capabilities by examining the different types of applications
each system supports. Business process technology focuses its attention and effort on supporting
three different types of applications [32]:
(1) Workflows involving humans (see the genome sequencing example above),
(2) Workflows involving systems and applications (see examples provided in Section 3), and
(3) Transactional workflows (see the trading process example above).
In Type 1 workflow systems, the workflow involves humans. The WfMS is responsible for
controlling and coordinating the human tasks. Such settings increase the complexity of WfMS
implementation because the system has to share responsibility to ensure the consistency of
documents and workflow data among its users.
In Type 2 systems, a WfMS is responsible for the control, coordination, and execution of
computation-intensive operations and specialized software tasks, with little or no human
intervention. In addition to being highly automated, this type of workflow system may require
access to distributed information systems (for example, relational databases, application servers,
and XML-repositories). This type of system must provide good mechanisms for integrating
applications.
Finally, Type 3 systems involve human intervention and system orientation that is transaction-
based. Such systems involve the coordinated execution of multiple tasks that may involve
humans, require access to heterogeneous, autonomous and distributed systems, and support
selective use of transactional properties (e.g., atomicity, consistency, isolation, and durability)
for individual tasks or for entire workflows. The support of such properties requires sophisticated
concurrency control and recovery techniques in order to ensure the consistency and reliability of
the system. The development of software that supports transactional workflows is a complex
task. Nevertheless, solutions have been investigated in the context of extended transaction
models by Rusinkiewicz and Sheth [33], Georgakopoulos et al. [32], Eder and Liebhart [34],
Alonso et al. [7], and Worah and Sheth [35].
9
ERP systems constitute applications that focus on the integration of data. The objective of
ERP applications is to provide an integrated solution to all business areas (financial, sales,
human resource, etc.). The underpinning of shared data structures across many applications
eliminates the need to pass data step-by-step among applications by accessing data from a
common structure. The focus of ERP systems is mainly on structured data transactions, i.e., Type
3 systems. ERP modules operate directly with common interoperable databases to ensure
consistent information for all purposes. This makes the manipulation of data easy.
The ERP concept makes the strong assumption that data infrastructures are homogeneous
across the organization, that is, the data is stored in interoperable databases, and in some cases,
the databases used are all from the same vendor. Some ERP systems (for example, Oracle 11i)
only support specific database management systems. Other ERP systems are more versatile,
supporting the most well-known database platforms. Such a strong assumption forces
organizations to migrate from existing systems to a standardized data environment. During
implementation, only data integration from interoperable databases needs to be considered. ERP
systems are data-centric, and thus they are well suited for modeling transactional processes for
which only data integration is needed as in the case of the first example above.
WfMSs can address all three types of workflows outlined above, however, they are most
suitable for modeling workflows involving humans and software systems (Types 1 and 2),
especially if the systems are autonomous and heterogeneous. On the other side, ERP systems are
more appropriate to model transactional workflows, which are data oriented. Nevertheless, when
transactional workflows involve heterogeneous systems, a more appropriate solution may be the
adoption of a WfMS.
For small organizations with heterogeneous infrastructures, the adoption of a WfMS to
integrate their systems may be a more adequate solution, since it does not require the time and
monetary investments associated with ERP implementations.
2.3 System Implementation
The third dimension of our analysis answers a question often raised by managers: “What are the
main differences between the implementation of a WfMS and that of an ERP system?” There are
many system implementation factors discussed in the literature (see Scott and Vessey [30] for a
summary.) Our focus is on technical differences that affect implementation. WfMS and ERP
systems differ in two main technical aspects that influence implementation: code generation and
data conversion.
2.3.1 Code Generation
Business information systems can be designed as custom applications, or they can be purchased
as standard “off-the-shelf” solutions (e.g., SAP and PeopleSoft applications). Since the
development of custom applications is generally expensive and is often plagued by uncertainties,
the second approach is often preferred when implementing information systems. ERP systems
are composed of prewritten software modules available “off-the-shelf”, often supplying
sufficient flexibility to match many organizations’ needs by configuring thousands of
parameters. When an ERP module is acquired, it is fully deployed for a functional area. In order
to link different functional areas, it is necessary to acquire different modules. For example, two
ERP modules need to be deployed to link human resource and financial departments, one for
10
each department. The infrastructure created allows for an automatic flow of information between
the two departments.
WfMS, on the other hand, are not module-oriented. There is no need to acquire and deploy
special modules for coordinating departments. Since the WfMS is usually generic (see Section
2.1), workflows can be designed with pan-Web cross-enterprise [36], cross-organizational [23]
and cross-departmental settings. The system controls the information flow from each department
and transfers it to the appropriate task to be processed according to a workflow map. Workflow
administrators or consultants define the workflows. Once workflows are designed, the
deployment of applications is accomplished with little programming, the system automatically
generates the necessary code for each application, but the code for individual tasks still has to be
written or acquired. A few workflow systems, such as METEOR [8], can automatically generate
the code for specific tasks.
In some cases, system integration expertise may be needed to manually code and integrate
with the WfMS special features such as to link the workflow engine to legacy applications, set
transactional properties, define recovery procedures, etc. Additionally, the integration of access
control and user rights on both the workflow as well as the applications requires additional effort
in a heterogeneous environment [37].
When business processes are represented as hard- or semi-hard-coded applications, as is the
case with ERP systems, an inherent flexibility is missing. The only flexibility in an ERP system
comes from the parameters that can be configured. In a WfMS, the idea is to be able to model
processes, typically by using visual tools, and then delegate the responsibility of ”designing” the
behavior of the software to the workflow system.