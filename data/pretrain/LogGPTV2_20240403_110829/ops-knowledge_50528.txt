I have developed a PyGTK application and need to release it to customers. I am using Python 2.7 and PyGTK 2.2 on Ubuntu. My question is, how can I bundle the required packages (Python, PyGTK, GObject) with my application so that it runs even if these packages are not installed on the client's machine?

I initially tried using PyInstaller, but the resulting executable depends on the glibc version. Specifically, an executable created with a higher glibc version will not work on a machine with a lower glibc version.

Is there a way to create a release directory that includes all the necessary packages, allowing my application to run on any system without requiring the installation of additional packages?

---

**Solution:**

As suggested in the comments, I downloaded the source code for the required packages and compiled them on a machine running glibc 2.5. I then used PyInstaller to create a binary executable of my PyGTK application.

Here are the detailed steps to configure and compile the required packages:

1. **Install Prerequisites:**
   - `sqlite-devel` (if SQLite is needed)
   - `libxext`
   - `librender`
   - `gettext`
   - `zlib`
   - `libgtk2-devel`

2. **Install Python:**
   - Version: 2.7

3. **Install GTK:**
   - Version: 2.24.0
   - Dependencies:
     - `glib` (Version: 2.27.3)
     - `atk` (Version: 1.29.2)
     - `cairo` (Version: 1.8.10)
     - `pango` (Version: 1.22.4)
     - `gdk-pixbuf` (Version: 2.21.3)

4. **Install PyGTK:**
   - Version: 2.24.0
   - Dependencies:
     - `pygobject` (Version: 2.28.3)
     - `pycairo` (Version: 1.8.10)

**Compilation Steps:**

1. **Compile and Install glib:**
   ```sh
   ./configure --prefix=/path/to/prefix
   make
   make install
   ```

2. **Compile and Install atk:**
   ```sh
   ./configure --prefix=/path/to/prefix
   make
   make install
   ```

3. **Compile and Install cairo:**
   ```sh
   ./configure --prefix=/path/to/prefix
   make
   make install
   ```

4. **Compile and Install pango:**
   ```sh
   ./configure --prefix=/path/to/prefix
   make
   make install
   ```

5. **Compile and Install gdk-pixbuf:**
   ```sh
   ./configure --prefix=/path/to/prefix
   make
   make install
   ```

6. **Compile and Install GTK:**
   ```sh
   ./configure --prefix=/path/to/prefix
   make
   make install
   ```

7. **Compile and Install pygobject:**
   ```sh
   ./configure --prefix=/path/to/prefix
   make
   make install
   ```

8. **Compile and Install pycairo:**
   ```sh
   ./configure --prefix=/path/to/prefix
   make
   make install
   ```

9. **Compile and Install PyGTK:**
   ```sh
   ./configure --prefix=/path/to/prefix
   make
   make install
   ```

**Environment Variables:**
- Set `PYTHON` and `PYTHONPATH` environment variables to point to the compiled Python and package directories.

**Using PyInstaller:**
- After compiling all the required packages, use PyInstaller to create a standalone executable:
  ```sh
  pyinstaller --onefile your_application.py
  ```

This approach ensures that the application and its dependencies are bundled together, making it possible to run the application on any system without needing to install additional packages.

Thank you for your help!