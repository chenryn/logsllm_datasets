To determine whether a Jupyter notebook kernel is busy or actively running a cell from an external source, you can connect to the IOPub channel, which broadcasts the kernel's status. This state is not stored in a persistent location due to its rapidly changing nature and the limited need for actions based on this information.

Hereâ€™s how you can monitor the kernel's busy/idle state:

1. **Connect to the Kernel:**
   - You can connect to the kernel using either ZeroMQ (zmq) or WebSockets.
   
2. **Initial State:**
   - Assume the initial state of the kernel is `busy`.

3. **Send a `kernel_info` Request:**
   - Send a `kernel_info` request to the kernel. This request is typically handled promptly if the kernel is idle.

4. **Monitor Status Messages:**
   - Monitor the IOPub channel for status messages that indicate whether the kernel is `busy` or `idle`.
   - If the kernel is idle, it will handle the `kernel_info` request quickly, and you will receive a `status:idle` message.

### Example Workflow

1. **Establish Connection:**
   - Connect to the kernel using the appropriate method (zmq or websocket).

2. **Send `kernel_info` Request:**
   - Use the Jupyter messaging protocol to send a `kernel_info` request.

3. **Listen for Status Messages:**
   - Subscribe to the IOPub channel to listen for status messages.
   - The `status` message will contain the current state (`busy` or `idle`).

### Example Code (Using Python and `jupyter_client`)

```python
from jupyter_client import BlockingKernelClient

# Create a kernel client
kc = BlockingKernelClient()
kc.load_connection_file('/path/to/kernel-connection-file.json')

# Connect to the kernel
kc.start_channels()

# Send a kernel_info request
msg_id = kc.kernel_info()

# Listen for status messages
while True:
    msg = kc.get_iopub_msg()
    if msg['msg_type'] == 'status':
        if msg['content']['execution_state'] == 'idle':
            print("Kernel is idle")
        elif msg['content']['execution_state'] == 'busy':
            print("Kernel is busy")
```

This approach allows you to programmatically determine the kernel's state and take appropriate actions based on whether it is busy or idle.