### Summary
The Microsoft Windows Installer, under certain conditions, allows a "standard user" to overwrite arbitrary permissions and content with SYSTEM privileges. This issue has been observed in Windows 10 Enterprise (1903) with the latest security update (November 2019 patch) and is likely present in other versions as well. The problem also affects Windows 10 Enterprise - INSIDER PREVIEW (Fast ring) 10.0.19033 - Build 19033.

### Affected Products
- Windows 10 Enterprise (1903) with the latest security update (November 2019 patch)
- Windows 10 Enterprise - INSIDER PREVIEW (Fast ring) 10.0.19033 - Build 19033

### Description
The Windows Installer service permits a "standard user" to install an MSI package. During my research, I observed that when a "standard user" installs an MSI package, the Windows Installer service performs certain operations with SYSTEM privileges. For example, a "standard user" can force a repair of the product using the `/f` command line parameter. The command `msiexec /qn /fa foo.msi` triggers the repair operation.

During this process, the Windows Installer service attempts to set the permissions of the package files and then reads and writes their content. Initially, the service tries to open the files impersonating the "standard user," but if it fails (e.g., due to a "PRIVILEGE NOT HELD" error), it reopens the file as SYSTEM without impersonation. This behavior creates a potential point of exploitation.

### Exploitation Details
To exploit this vulnerability, a race condition must be successfully triggered between the moment the Windows Installer service closes the file as a "standard user" and reopens it as SYSTEM, just before setting the DACLs and writing the content.

#### Steps to Reproduce
1. **Create the MSI Package**:
   - Build an MSI package (`foo.msi`) that can be installed by a "standard user." This package will install a file (`foo.txt`) into `C:\Users\[USER]\AppData\Local\fakemsi\`.
   - Use the following command to make the MSI package installable by a "standard user":
     ```sh
     "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\MsiInfo.exe" "C:\temp2\Setup1\Setup1\Debug\foo.msi" -w 10
     ```

2. **Exploit Setup**:
   - Remove any old temporary directories used for junctions.
   - Create an empty directory: `C:\Users\[USER]\foomsi`
   - Create an empty directory: `C:\Users\[USER]\AppData\Local\fakemsi`
   - Create a junction from `C:\Users\[USER]\AppData\Local\fakemsi` to `C:\Users\[USER]\foomsi`
   - Create a symbolic link in the `\RPC Control` object namespace named `foo.txt` that points to the target file (e.g., `c:\windows\win.ini`).

3. **Exploit Execution**:
   - Remove the MSI package (even if it doesn't exist): `msiexec /qn /i foo.msi`
   - Install the MSI package: `msiexec /qn /i foo.msi`
   - Start a thread to win the race condition and trigger the Windows Installer service with the command `msiexec /qn /fa foo.msi` to exploit the `setSecurity` operation.
   - Monitor for the existence of `C:\Users\[USER]\AppData\Local\fakemsi\foo.txt`.
   - As soon as `C:\Users\[USER]\AppData\Local\fakemsi\foo.txt` is renamed by the MSI service, set a reparse point (a junction) from `C:\Users\[USER]\AppData\Local\fakemsi\` to `\RPC Control`.
   - The MSI service will recreate `C:\Users\[USER]\AppData\Local\fakemsi\foo.txt`, which will reparse to `\RPC Control` where the `foo.txt` file is a link pointing to the target file. This exploits the `setSecurity` operation, giving FULL CONTROL to the "normal" user over the target file and allowing the content to be overwritten.

### Screenshot
Below is a screenshot (from Procmon) of a successful exploitation, showing the key operations:
1. The MSI service executes `CreateFile` successfully impersonating the "normal" user.
2. The exploit sets a mount point from `C:\Users\[USER]\AppData\Local\fakemsi\` to `\RPC Control`.
3. The MSI service does a REPARSE to the target file (e.g., `C:\windows\win.ini`) and executes `CreateFile` successfully as SYSTEM.
4. The MSI service sets the security DACL as SYSTEM, giving FULL CONTROL to the "normal" user.
5. The MSI service writes the content read from `foo.txt` inside the `foo.msi` package.

### Conclusion
This exploit can overwrite the DACL of files fully owned by SYSTEM. In most of my tests, the exploit works on the first attempt. If it fails, try running it again.

I have provided a full working Proof of Concept (PoC) along with the source code:
- **PoC**: All files in the `bin_MsiExploit` directory need to stay in the same directory. (Please read `readme.txt` inside the zipped file.)
- **Source Code**:
  - Exploit source code: VS 2017 C++ (in the `src_MsiExploit` directory)
  - MSI package source code: VS 2017 C# (already provided in previous emails)

### Screenshots
- Successful exploitation on Windows 10 Enterprise Insider Preview (Fast ring) 10.0.19033

### Final Thoughts
I believe this bug is due to an incorrect impersonation operation when writing the DACLs.

Best Regards,
Christian Danieli (@padovah4ck)