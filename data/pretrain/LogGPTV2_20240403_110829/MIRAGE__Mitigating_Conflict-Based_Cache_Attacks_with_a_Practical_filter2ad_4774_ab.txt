learn an eviction-set after observing just a single conﬂict.
2.5 Goal: A Practical Fully-Associative LLC
As a principled defense against conﬂict-based attacks, we
seek to design a cache that provides Global Eviction (GLE),
i.e. the eviction candidates are selected from among all of the
addresses resident in the cache when new addresses are in-
stalled. Such a defense would eliminate SAE and be immune
to eviction-set discovery, as evicted addresses are indepen-
dent of the addresses installed and leak no information about
installed addresses. While a fully-associative design provides
global evictions, it incurs prohibitive latency and power over-
heads when adopted for an LLC.2 The goal of our paper is to
develop an LLC design that guarantees global evictions while
retaining the practical lookup of a set-associative cache.
2Recent works propose fully-associative designs for a subset of the cache
(Hybcache [12]) or for L1-Caches (RPCache [54], NewCache [55]). These
approaches are impractical for LLCs (see Section 10.1).
3 Full Associativity via MIRAGE
To guarantee global evictions practically, we propose Mirage
(Multi-Index Randomized Cache with Global Evictions). Mi-
rage provides the abstraction of a fully associative cache with
random replacement, as shown in Figure 4(a), with the prop-
erty that on a cache miss, a random line is evicted from among
all resident lines in the cache. This ensures the evicted victim
is independent of the incoming line and no subset of lines in
the cache form an eviction set.
3.1 Overview of Mirage
Mirage has three key components, as shown in Figure 4(b).
First, it uses a cache organization that decouples tag and data
location and uses indirection to link tag and data entries ( 1
in Figure 4(b)). Provisioning extra invalid tags allows ac-
commodating new lines in indexed sets without tag-conﬂicts,
and indirection between tags and data-blocks allows victim-
selection from the data-store in a global manner. Second, Mi-
rage uses a tag-store design that splits the tag entries into two
structures (skews) and accesses each of them with a different
hashing function ( 2 in Figure 4(b)). Finally, to maximize the
likelihood of getting an invalid tag on cache-install, Mirage
uses a load-balancing policy for skew-selection leveraging the
"power of 2 choices" [43] ( 3 in Figure 4(b)), which ensures
no SAE occurs in the system lifetime and all evictions are
global. We describe each component next.
3.2 Tag-to-Data Indirection and Extra Tags
V-way Cache Substrate: Figure 5 shows the tag and data
store organization using pointer-based indirection in Mirage,
which is inspired by the V-way cache [41]. V-way originally
used this substrate to reduce LLC conﬂict-misses and im-
prove performance. Here, the tag-store is over-provisioned to
include extra invalid tags, which can accommodate the meta-
data of a new line without a set-associative eviction (SAE).
Each tag-store entry has a forward pointer (FPTR) to allow
it to map to an arbitrary data-store entry.3 On a cache-miss,
two types of evictions are possible: if the incoming line ﬁnds
3While indirection requires a cache lookup to serially access the tag and
data entries, commercial processors [1, 14, 56] since the last two decades
already employ such serial tag and data access for the LLC to save power
(this allows the design to only access the data-way corresponding to the hit).
1382    30th USENIX Security Symposium
USENIX Association
(a) Abstraction Mirage Provides(b) Overview of MirageTag-StoreLineInstallf1LineInstallMirageLLCAny Random LineFrom Entire CacheEvictionData-StoreGlobal RandomEviction}Extra-tags & IndirectionSkewed-IndexingLoad-Aware Skew Selectionf2inv=3inv=2123an invalid tag, a Global Eviction (GLE) is performed; else, an
SAE is performed to invalidate a tag (and its corresponding
data-entry) from the set where the new line is to be installed.
On a GLE, V-way cache evicts a data entry intelligently se-
lected from the entire data-store and also the corresponding
tag identiﬁed using a reverse pointer (RPTR) stored with each
data entry. In both cases, the RPTR of the invalidated data-
entry is reset to invalid. This data-entry and the invalid tag in
the original set are used by the incoming line.
Repurposing V-way Cache for Security: Mirage adopts
the V-way cache substrate with extra tags and indirection to
enable GLE, but with an important modiﬁcation: it ensures
the data-entry victim on a GLE is selected randomly from the
entire data-store (using a hardware PRNG) to ensure that it
leaks no information. Despite this addition, the V-way cache
substrate by itself is not secure, as it only reduces but does
not eliminate SAE. For example, if an adversary has arbitrary
control over the placement of new lines in speciﬁc sets, they
can map a large number of lines to a certain set and deplete
the extra invalid tags provisioned in that set. When a new
(victim) line is to be installed to this set, the cache is then
forced to evict a valid tag from the same set and incur an
SAE. Thus, an adversary who can discover the address to set
mapping can force an SAE on each miss, making a design that
naively adopts the V-way Cache approach vulnerable to the
same attacks present in conventional set-associative caches.
Figure 5: Overview of the cache substrate used by Mirage
with indirection and extra tags (inspired by V-Way Cache).
3.3 Skewed-Associative Tag-Store Design
To ensure GLE on each line install, Mirage reshapes the tag or-
ganization. To allow an address to map to multiple sets in the
tag store and increase the probability of obtaining an invalid
tag, Mirage architects the tag-store as a skewed-associative
structure [47]. The tag store is split into two partitions or
skews, and a different randomizing hash function is used to
map addresses to sets in each skew. The hash function4 to map
addresses to sets is constructed using a 12-round PRINCE
cipher [9], which is a low-latency 64-bit block-cipher using
128-bit keys. Note that prior work [8] used a reduced round
version of PRINCE cipher for randomized cache indexing.
4The hash-function construction is similar to Scatter-Cache (SCv1) [57],
where set-index bits are sliced from a cipher-text encrypted using a plaintext
of physical line-address concatenated with a Security-Domain-ID and the
set-index for each skew is computed using a different secret key.
Unlike prior defenses using skewed-associativity [40, 57],
each skew in Mirage contains invalid tags. Offering the ﬂexi-
bility for a new line to map to two sets (one in each skew) in
the presence of invalid tags signiﬁcantly increases the chance
of ﬁnding an invalid tag in which it can be installed and
avoiding an SAE. Moreover, the cryptographically generated
address-to-set mapping ensures that the adversary (without
knowing the secret key) cannot arbitrarily deplete these in-
valid tags within a set.
3.4 Load-Aware Skew Selection
Natural imbalance in usage of tags across sets can deplete
invalid tags across sets and cause an SAE. On a line-install, the
skew-selection policy, that decides the skew in which the line
is installed, determines the distribution of invalid tags across
sets. Prior works, including Scatter-Cache [57] and CEASER-
S [40], use random skew-selection, which randomly picks one
of the two skews on a line-install. With invalid tags, this policy
can result in imbalanced sets – some with many invalid tags
and others with none (that incur SAE). Our analysis, using a
buckets-and-balls model we describe in Section 4.1, indicates
such a random skew-selection policy results in an SAE every
few misses (every 2600 misses with 6 extra ways/skew), and
provides robustness only for microseconds.
To guarantee the availability of invalid tags across sets and
eliminate SAE, Mirage uses a load-aware skew selection pol-
icy inspired by "Power of 2 Choices" [4,43], a load-balancing
technique used in hash-tables. As indicated by 3 in Figure 4,
this policy makes an intelligent choice between the two skews,
installing the line in the skew where the indexed set has a
higher number of invalid tags. In the case of a tie between the
two sets, one of the two skews is randomly selected. With this
policy, an SAE occurs only if the indexed sets in both skews
do not have invalid tags, that is a rare occurrence as this policy
actively promotes balanced usage of tags across sets. Table 1
shows the rate of SAE for Mirage with load-aware skew selec-
tion policy, as the number of extra tags per skew is increased
from 0 to 6. Mirage with 14-ways per skew (75% extra tags)
encounters an SAE once in 1034 cache-installs, or equiva-
lently 1017 years, ensuring no SAE throughout the system
lifetime. We derive these bounds analytically in Section 4.3.
Table 1: Frequency of Set-Associative Eviction (SAE) in Mi-
rage as number of extra ways-per-skew is increased (assuming
16-MB LLC with 16-ways in the baseline and 1ns per install)
Ways in each Skew Installs per SAE Time per SAE
(Base + Extra)
8 + 0
8 + 1
8 + 2
8 + 3
8 + 4
8 + 5
8 + 6 (default Mirage)
1
4
60
8000
2× 108
7× 1016
1034
1 ns
4 ns
60 ns
8 us
0.16 s
2 years
1017 years
USENIX Association
30th USENIX Security Symposium    1383
Tag-StoreDataStoreSets extraWaysGlobalEviction}RPTRDataTagFPTRInstall in Invalid-Tag4 Security Analysis of Mirage
In this section, we analyze set-conﬂict-based attacks in a set-
ting where the attacker and the victim do not have shared mem-
ory (shared-memory attacks are analyzed in Section 5). All
existing set-conﬂict based attacks, such as Prime+Probe [35],
Prime+Abort [13], Evict+Time [35], etc. exploit eviction-sets
to surgically evict targeted victim-addresses, and all eviction-
set discovery algorithms require the attacker to observe evic-
tions dependent on the addresses accessed by the victim. In
Mirage, two types of evictions are possible – a global evic-
tion, where the eviction candidate is selected randomly from
all the lines in the data-store, that leak no information about
installed addresses; or a set-associative eviction (SAE), where
the eviction candidate is selected from the same set as the
installed line due to a tag-conﬂict, that leaks information. To
justify how Mirage eliminates conﬂict-based attacks, in this
section we estimate the rate of SAE and reason that even a
single SAE is unlikely to occur in system-lifetime.
Our security analysis makes the following assumptions:
1. Set-index derivation functions are perfectly random
and the keys are secret. This ensures the addresses are
uniformly mapped to cache-sets, in a manner unknown
to the adversary, so that they cannot directly induce SAE.
Also, the mappings in different skews (generated with
different keys) are assumed to be independent, as re-
quired for the power of 2-choices load-balancing.
2. Even a single SAE is sufﬁcient to break the security.
The number of accesses required to construct an eviction-
set has reduced due to recent advances, with the state-of-
the-art [29, 40, 52] requiring at least a few hundred SAE
to construct eviction-sets. To potentially mitigate even
future advances in eviction-set discovery, we consider
a powerful hypothetical adversary that can construct an
eviction-set with just a single SAE (the theoretical min-
imum), unlike previous defenses [39, 40, 57] that only
consider existing eviction-set discovery algorithms.
4.1 Bucket-And-Balls Model
To estimate the rate of SAE, we model the operation of Mi-
rage as a buckets-and-balls problem, as shown in Figure 6.
Here each bucket models a cache-set and each ball throw rep-
resents a new address installed into the cache. Each ball picks
from 2 randomly chosen buckets, one from each skew, and
is installed in the bucket with more free capacity, modeling
the skew-selection in Mirage. If both buckets have the same
number of balls, one of the two buckets is randomly picked.5
If both buckets are full, an insertion will cause a bucket spill,
5A biased tie-breaking policy [53] that always picks Skew-1 on ties
further reduces the frequency of bucket-spills by few orders of magnitude
compared to random tie-breaks. However, to keep our analysis simple, we
use a random tie-breaking policy.
equivalent to an SAE in Mirage. Otherwise, on every ball
throw, we randomly remove a ball from among all the balls
in buckets to model Global Eviction. The parameters of our
model are shown in Table 2. We initialize the buckets by in-
serting as many balls as cache capacity (in number of lines)
and then perform 10 trillion ball insertions and removals to
measure the frequency of bucket spills (equivalent to SAE).
Note that having fewer lines in the cache than the capacity is
detrimental to an attacker, as the probability of a spill would
be lower; so we model the best-case scenario for the attacker.
Table 2: Parameters for Buckets and Balls Modeling
Buckets and Balls Model Mirage Design
Balls - 256K
Buckets/Skew - 16K
Skews - 2
Avg Balls/Bucket - 8
Bucket Capacity - 8 to 14 Ways Per Skew - 8 to 14
Cache Size - 16 MB
Sets/Skew - 16K
Skews - 2
Avg Data-Lines Per Set - 8
Figure 6: Buckets-and-balls model for Mirage with 32K buck-
ets (divided into 2 skews), holding 256K balls in total to
model a 16MB cache. The bucket capacity is varied from
8-to-14 to model 8-to-14 ways per skew in Mirage.
4.2 Empirical Results for Frequency of Spills
Figure 7 shows the average number of balls thrown per bucket
spill, analogous to the number of line installs required to cause
an SAE on average. As bucket capacity increases from 8 to
14, there is a considerable reduction in the frequency of spills.
When the bucket capacity is 8, there is a spill on every throw
as each bucket has 8 balls on average. As bucket capacity
increases to 9 / 10 / 11 / 12, the spill frequency decreases to
once every 4 / 60 / 8000 / 160Mn balls. For bucket capacities
of 13 and 14, we observe no bucket spills even after 10 trillion
ball throws. These results show that as the number of extra
tags increases, the probability of an SAE in Mirage decreases
super-exponentially (better than squaring on every extra way).
With 12 ways/skew (50% extra tags), Mirage has an SAE
every 160 million installs (equivalent to every 0.16 seconds).
1384    30th USENIX Security Symposium
USENIX Association
Skew-1Skew-2B1 (i)B2 (i)Buckets}in B1 : if Balls[B1 ]  Balls[B2 ]in rand(B1 , B2 ) : if both equalrandom ball: from all balls in Buckets Insert-Ball (i) Remove-Ball (i)ith insertionith removalFigure 7: Frequency of bucket spills, as bucket capacity is var-
ied. As bucket-capacity increases from 8 to 14 (i.e. extra-tags
per set increase from 0% to 75%), bucket spills (equivalent to
SAE) become more infrequent.
While this empirical analysis is useful for estimating the
probability of an SAE with up to 12 ways/skew, increasing
the ways/skew further makes the frequency of SAE super-
exponentially less. Hence, it is impractical to empirically
compute the probability of SAE in a reasonable amount of
time beyond 12 ways/skew (an experiment with 10 trillion ball
throws already takes a few days to simulate). To estimate the
probability of SAE for a Mirage design with 14 ways/skew, we
develop an analytical model, as described in the next section.
Figure 8: Bucket state modeled as a Birth-Death chain, a
Markov Chain where the state variable N (number of balls
in a bucket) increases or decreases by one at a time, due to a
birth (insertion) or death (deletion) of a ball.
Pr (N → N + 1) = Pr (N + 1 → N)
(1)
To calculate Pr (N → N + 1), we note that a bucket with N
balls transitions to N+1 balls on a ball insertion if: (1) the
buckets chosen from both Skew-1 and Skew-2 have N balls;
or (2) bucket chosen from Skew-1 has N balls and from Skew-
2 has more than N balls; or (3) bucket chosen from Skew-2
has N balls and from Skew-1 has more than N balls. Thus,
if the probability of a bucket with N balls is Pr (n = N), the
probability it transitions to N+1 balls is given by Equation 2.
Table 3: Terminology used in the analytical model
Pr(N→N +1)=Pr(n=N)
2
+2∗Pr(n=N)∗Pr(n>N)
(2)
Symbol Meaning
Pr (n = N) Probability that a Bucket contains N balls
Pr (n ≤ N) Probability that a Bucket contains ≤ N balls
Pr (X → Y ) Probability that a Bucket with X balls transitions to Y balls
W
Btot
btot
Capacity of a Bucket (beyond which there is a spill)
Total number of Buckets (32K)
Total number of Balls (256K)