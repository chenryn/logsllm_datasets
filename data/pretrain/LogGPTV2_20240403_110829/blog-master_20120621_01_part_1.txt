## PostgreSQL 使用 nlpbamboo chinesecfg 中文分词  
### 作者                                                                                                                                        
digoal                                                                                                                                        
### 日期                                                                                                                                         
2012-06-21                                                                                                                             
### 标签                                                                                                                                        
PostgreSQL , 中文分词 , zhparser , 自定义词典          
----                                                                                                                                                    
## 背景        
环境 :   
```  
CentOS 5.x 64bit  
PostgreSQL 9.1.3  
nlpbamboo-1.1.2  
cmake-2.8.8  
CRF++-0.57  
```  
安装 :   
```  
-- cmake  
tar -zxvf cmake-2.8.8.tar.gz  
cd cmake-2.8.8  
./bootstrap --prefix=/opt/cmake2.8.8  
gmake  
gmake install  
vi ~/.bash_profile  
export PATH=/opt/cmake2.8.8/bin:$PATH  
. ~/.bash_profile  
-- crf  
tar -zxvf CRF++-0.57.tar.gz  
cd CRF++-0.57  
./configure  
gmake  
gmake install  
-- nlpbamboo  
vi ~/.bash_profile  
export PGHOME=/opt/pgsql  
export PATH=$PGHOME/bin:/opt/bamboo/bin:/opt/cmake2.8.8/bin:$PATH:.  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:.  
. ~/.bash_profile  
tar -jxvf nlpbamboo-1.1.2.tar.bz2  
cd nlpbamboo-1.1.2  
mkdir build  
cd build  
cmake .. -DCMAKE_BUILD_TYPE=release  
gmake all  
gmake install  
-- 加入lib库链接.  
echo "/usr/lib" >>/etc/ld.so.conf (这个命令是bamboo对应的动态链接库)  
echo "/usr/local/lib" >>/etc/ld.so.conf (这个命令是CRF对应的动态链接库)  
ldconfig -f /etc/ld.so.conf  
-- 测试是否加入正常  
ldconfig -p|grep bambo  
        libbamboo.so.2 (libc6,x86-64) => /usr/lib/libbamboo.so.2  
        libbamboo.so (libc6,x86-64) => /usr/lib/libbamboo.so  
ldconfig -p|grep crf  
        libcrfpp.so.0 (libc6,x86-64) => /usr/local/lib/libcrfpp.so.0  
        libcrfpp.so (libc6,x86-64) => /usr/local/lib/libcrfpp.so  
-- 加入索引  
cd /opt/bamboo  
wget http://nlpbamboo.googlecode.com/files/index.tar.bz2  
tar -jxvf index.tar.bz2  
-- 编译PostgreSQL支持模块.  
cd /opt/bamboo/exts/postgres/chinese_parser  
make  
make install  
touch $PGHOME/share/tsearch_data/chinese_utf8.stop  
cd /opt/bamboo/exts/postgres/pg_tokenize  
make  
make install  
-- 安装PostgreSQL支持模块  
su - postgres  
cd $PGHOME/share/contrib/  
psql -h 127.0.0.1 postgres postgres -f chinese_parser.sql  
psql -h 127.0.0.1 postgres postgres -f pg_tokenize.sql  
```  
查看全文检索配置中加入了chinesecfg的配置.  
```  
postgres=# select * from pg_ts_config;  
  cfgname   | cfgnamespace | cfgowner | cfgparser   
------------+--------------+----------+-----------  
 simple     |           11 |       10 |      3722  
 danish     |           11 |       10 |      3722  
 dutch      |           11 |       10 |      3722  
 english    |           11 |       10 |      3722  
 finnish    |           11 |       10 |      3722  
 french     |           11 |       10 |      3722  
 german     |           11 |       10 |      3722  
 hungarian  |           11 |       10 |      3722  
 italian    |           11 |       10 |      3722  
 norwegian  |           11 |       10 |      3722  
 portuguese |           11 |       10 |      3722  
 romanian   |           11 |       10 |      3722  
 russian    |           11 |       10 |      3722  
 spanish    |           11 |       10 |      3722  
 swedish    |           11 |       10 |      3722  
 turkish    |           11 |       10 |      3722  
 chinesecfg |           11 |       10 |     33463  
(17 rows)  
```  
测试tokenize分词函数  
```  
postgres=# select * from tokenize('你好我是中国人');  
      tokenize         
---------------------  
 你好 我 是 中国 人   
(1 row)  
postgres=# select * from tokenize('中华人民共和国');  
    tokenize       
-----------------  
 中华人民共和国   
(1 row)  
postgres=# select * from tokenize('百度');  
 tokenize   
----------  
 百度   
(1 row)  
postgres=# select * from tokenize('谷歌');  
 tokenize   
----------  
 谷歌   
(1 row)  
postgres=# select * from tokenize('今年是龙年');  
   tokenize      
---------------  
 今年 是 龙年   
(1 row)  
```  
测试全文检索类型转换函数  
```  
postgres=# select * from to_tsvector('chinesecfg','你好,我是中国人.目前在杭州斯凯做数据库相关的工作.');  
                                                                to_tsvector                                                           
------------------------------------------------------------------------------------------------------------------------------------  
-------  
 ',':2 '.':7,17 '中国':5 '人':6 '你好':1 '做':12 '在':9 '工作':16 '我':3 '数据库':13 '斯凯':11 '是':4 '杭州':10 '的':15 '目前':8 '相  
关':14  
(1 row)  
```  
全文检索类型适合场景, 大内容的模糊查询, 非精确的模糊匹配 :   
例如, title和content分别保存标题和正文的原始内容, ts_title和ts_content用来保存分词后的全文检索内容.  
```  
postgres=# create table blog (id serial primary key, user_id int8, title text, content text, ts_title tsvector, ts_content tsvector);  
NOTICE:  CREATE TABLE will create implicit sequence "blog_id_seq" for serial column "blog.id"  
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "blog_pkey" for table "blog"  
CREATE TABLE  
```  
在tsvector的字段上可以使用gist索引, 或者gin索引, 加速检索.  
```  
postgres=# create index idx_blog_ts1 on blog using gist(ts_title);  
CREATE INDEX  
postgres=# create index idx_blog_ts2 on blog using gist(ts_content);  
CREATE INDEX  
```  
插入测试内容 :   
```  
postgres=# insert into blog (user_id,title,content,ts_title,ts_content) values (1,'PostgreSQL QQ群 FAQ贴 - 1','QQ群里一些网友问到的 问题，收集如下 :   
目录 :   
1. PostgreSQL存储过程中自定义异常怎么弄?  
2. PostgreSQL9.1的同步事务在某些情况下用户主动cancel等待sync replication standby 的acknowledge,实际本地已提交.  
3. PostgreSQL如何满足已经存在则更新, 不存在则插入的需求.  
4. copy和insert哪个效率高?  