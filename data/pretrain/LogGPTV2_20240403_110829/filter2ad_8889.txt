# 如何在已关机的电脑上执行代码或在Intel ME中运行未签名代码
##### 译文声明
本文为翻译文章，原文作者为ptsecurity，来源：blog.ptsecurity.com
原文地址：
译文仅供参考，具体内容及含义以原文为准。

## 前言
在最近的欧洲黑帽黑客大会上，Positive Technologies公司的研究人员Mark Ermolov和Maxim Goryachy介绍了英特尔管理引擎（Intel Management Engine 11）中的安全漏洞。该漏洞允许攻击者访问目标主机中的大部分数据和进程。更重要的是，借助此漏洞，攻击者可以在绕过传统的基于软件的保护机制后，对已关机的电脑进行攻击。

## 一、介绍
英特尔管理引擎（Intel ME）是英特尔的一项专有技术，由集成平台控制器中心（PCH）和一系列内置外围设备的微控制器组成。PCH负责处理器与外部设备之间的通信流量传输。因此，Intel ME几乎可以访问计算机中的所有数据。如果攻击者能够在Intel ME上运行第三方代码，他们就可以完全入侵目标计算机。

越来越多的研究人员开始关注Intel ME的安全问题，其中一个原因是这个子系统正在向新的硬件架构（x86）和软件平台（修改后的MINIX[1]）过渡，这使得二进制代码分析工具得以充分利用。此前，固件分析相对困难，因为早期版本的Intel ME基于ARCompact微控制器实现，其指令集较为陌生。

在此之前，我们很难对Intel ME 11进行分析，因为可执行模块使用了Huffman编码（未知表）进行压缩。但我们的研究团队成功恢复了这些表，并创建了一个专门用于解包镜像的实用工具[2]。

解包可执行模块后，我们可以深入研究Intel ME的软件和硬件内部结构。通过分析发现，Intel ME并不像想象中那么复杂。

### 1.1 Intel ME 11概述
关于Intel ME内部结构和组件的信息可以从参考资料[1]、[3]、[4]中获取。实际上，从2015年开始，LMT处理器核心（x86指令集）已经被整合到PCH中，这种核心用于Quark SOC中。

许多现代技术都是围绕Intel ME开发的，例如英特尔主动管理技术（Intel Active Management Technology）、英特尔平台可信技术（Intel Platform Trust Technology）和英特尔软件保护扩展（Intel Software Guard Extensions）。Intel ME也是Intel启动防护功能信任机制的核心，防止UEFI注入恶意代码。Intel ME基本上可以无限制地访问计算机中的数据，甚至可以拦截并修改显卡图像信息。这意味着，如果攻击者能够在Intel ME中执行任意代码，他们就可以开发出无法被现有安全检测工具检测到的新恶意软件。幸运的是，在这项技术诞生至今的十七年里，只出现了三个公开的相关安全漏洞。

### 1.2 Intel ME公布的三个安全漏洞

#### 1.2.1 Ring-3 rootkits
第一个Intel ME安全漏洞于2009年在黑帽黑客大会上公布。Alexander Tereshkin和Rafal Wojtczuk介绍了“Ring-3 Rootkits”攻击方法，该方法需要向UMA内存的特定区域注入代码。此后，英特尔引入了UMA保护机制，现在这块内存区域采用AES加密，并且Intel ME会在每个内存页面中存储校验和，当页面返回到Intel ME主内存时进行验证。

#### 1.2.2 Zero-Touch
2010年，Vassilios Ververis演示了一种针对Intel ME的攻击技术[10]，使用Zero-Touch模式（ZTC）绕过AMT认证。

#### 1.2.3 Silent Bob
2017年5月，研究人员公布了存在于AMT认证系统中的安全漏洞（CVE-2017-5689）[11]，该漏洞允许未经授权的用户获取支持vPro技术的目标系统的完整访问权。总的来说，目前只有一个允许攻击者在Intel ME内部执行任意代码的安全漏洞。

## 二、潜在的攻击向量
Intel通常会对Intel ME使用的数据进行签名，但Intel ME仍需与用户进行一些交互：

- 本地通信接口 (HECI)
- 网络（仅限vPro）
- 主机内存 (UMA)
- 固件SPI布局
- 内部文件系统

### 2.1 HECI
HECI是一种独立的PCI设备，作为主系统与Intel ME之间数据交换的循环缓冲器。Intel ME中的应用程序可以注册自己的HECI处理器，从而提升安全漏洞(CVE-2017-5711)的危险系数。在苹果电脑中，默认禁用了HECI。

### 2.2 网络（仅限vPro）
AMT是一个大型模块，涉及多种网络协议，包含大量遗留代码，并广泛应用于商业系统。

### 2.3 针对SPI接口的硬件攻击
在研究Intel ME的过程中，我们考虑使用SPI闪存模拟器来绕过签名验证机制。这种特殊设备看起来像普通的SPI闪存，但在每次访问时发送不同的数据。这意味着，如果先进行签名检查再读写数据，攻击者可以尝试向Intel ME注入代码。

### 2.4 内部文件系统
Intel ME使用SPI闪存作为主文件存储，文件系统结构复杂[6]，许多特权进程将配置文件存储在这里。因此，文件系统将是攻击者的主要目标之一。接下来，我们需要选择一个代码模块来寻找安全漏洞。

### 2.5 选择模块进行分析
Intel ME操作系统实现了类Unix的访问控制模块，user-id、group-id、可访问硬件列表以及允许使用的系统调用都根据每个进程进行静态规则设置。分析发现，只有少数系统进程可以加载并运行这些模块。其中之一是BUP（BringUP），它能够生成子进程。经过逆向分析，我们在负责设备初始化的函数中发现了一个堆缓冲区溢出漏洞。文件/home/bup/ct没有签名，因此我们可以直接修改Intel ME固件的版本信息。现在，我们可以使BUP进程发生缓冲区溢出，但在利用此漏洞之前，还需要绕过堆缓冲区溢出保护机制。

### 2.6 绕过堆缓冲区溢出保护机制
Intel ME用于保护栈缓冲区溢出的实现如下：

1. 进程创建后，一个32位值从硬件随机数生成器复制到特定区域（只读）；
2. 在函数开头，这个值在返回地址前复制到栈中（实现保护）；
3. 在函数结尾，存储的值与已知正确值进行比较，如果不匹配，则软件崩溃并终止进程。

我们发现bup_dfs_read_file函数会间接调用memcpy，并返回TLS结构的目的地址。需要注意的是，BUP的读/写函数使用系统服务访问共享内容。换句话说，读取和写入功能可以通过共享内存机制获取和记录数据。

调用memcpy函数：
从TLS获取地址：

在缓冲区溢出的情况下，这部分TLS区域可以通过文件读取函数重写，从而使攻击者绕过缓冲区溢出保护。

### 2.7 线程本地存储
TLS的访问与gs段寄存器有关，结构如下所示：
其中，gs段不可写入，TLS结构本身位于栈底。为了实现缓冲区溢出，我们需要重写TLS中的指针（指向SYSLIB_CTX），并生成新的结构。根据bup_dfs_read_file函数的工作机制，这将允许我们写入任意数据。

### 2.8 使用读取函数获取任意写入原语
bup_dfs_read_file函数不仅可以从SPI闪存中读取数据，还可以在迭代过程中修改指针数据（指向SYSLIB_CTX）。在下一次迭代中，sys_write_shared_mem函数将提取我们创建的地址，并将其作为目的地址传递给memcpy。这样，我们就能够获取任意写入原语。

bup_dfs_read_file的部分代码如下：

### 2.9 可能的漏洞利用向量
为了成功利用该漏洞，我们需要通过特殊的HMR-FPO消息向Intel ME的特定区域写入访问数据[9]。攻击者可以利用BIOS漏洞发送此类消息，或者直接通过操作系统发送（Intel ME处于制造模式下），或者通过DMA攻击。

如果满足以下条件，攻击者甚至可以远程利用该漏洞：

- 目标平台激活了AMT；
- 攻击者知道AMT管理员密码，或利用漏洞绕过了验证机制；
- BIOS没有设置密码保护（或攻击者知道密码）；
- BIOS开启了ME区域的写入权限；

如果上述条件均满足，攻击者将能够远程利用该漏洞并访问Intel ME中的数据。

### 2.10 CVE-2017-5705,6,7概述
该漏洞编号为INTEL-SA-00086 (CVE-2017-5705, CVE-2017-5706, CVE-2017-5707)，相关描述如下：

#### CVSSv3向量
`8.2 High AV:L/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H`

#### 受影响的产品[12]
- 第六代、第七代和第八代Intel Core处理器家族
- Intel Xeon Processor E3-1200 v5 & v6产品家族
- Intel Xeon Processor Scalable Family
- Intel Xeon Processor W Family
- Intel Atom C3000 Processor Family
- Apollo Lake Intel Atom Processor E3900系列
- Apollo Lake Intel Pentium和Celeron N和J系列处理器

## 总结
本文介绍的漏洞允许攻击者在Intel ME中运行任意代码，威胁到多种英特尔技术的安全性。希望本文的研究成果能帮助更多感兴趣的研究人员了解Intel ME的安全现状。

## 参考资料
1. Dmitry Sklyarov, “Intel ME: The Way of the Static Analysis”, Troopers, 2017.
2. Intel ME 11.x Firmware Images Unpacker, github.com/ptresearch/unME11.
3. Xiaoyu Ruan, Platform Embedded Security Technology Revealed. Safeguarding the Future of Computing with Intel Embedded Security and Management Engine, Apress, ISBN 978-1-4302-6572-6, 2014.
4. Igor Skochinsky, “Intel ME Secrets. Hidden code in your chipset and how to discover what exactly it does”, RECON, 2014.
5. Alexander Tereshkin, Rafal Wojtczuk, “Introducing Ring-3 Rootkits”, Black Hat USA, 2009.
6. Dmitry Sklyarov, “Intel ME: flash file system explained”, Black Hat Europe, 2017.
7. Alex Matrosov, “Who Watch BIOS Watchers?”, 2017, medium.com/[@matrosov](https://github.com/matrosov "@matrosov")/bypass-intel-boot-guard-cc05edfca3a9.
8. Mark Ermolov, Maxim Goryachy, “How to Become the Sole Owner of Your PC”, PHDays VI, 2016, 2016.phdays.com/program/51879.
9. Vassilios Ververis, “Security Evaluation of Intel’s Active Management Technology”, Sweden, TRITA-ICT-EX-2010:37, 2010.
10. Dmitriy Evdokimov, Alexander Ermolov, Maksim Malyutin, “Intel AMT Stealth Breakthrough”, Black Hat USA, 2017.
11. Intel Management Engine Critical Firmware Update (Intel-SA-00086), intel.com/sa-00086-support.