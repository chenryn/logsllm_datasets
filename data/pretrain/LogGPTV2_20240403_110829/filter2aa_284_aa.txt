CODE 
REVIEW 
GUIDE
RELEASE
Creative Commons (CC) Attribution 
Free Version at: https://www.owasp.org        
Project leaders: Larry Conklin and Gary Robinson
2.0
1
Foreword
Acknowledgements
1
3
6
8
5
Introduction
How To Use The Code Review Guide
2
Code Review Do’s And Dont’s
Code Review Checklist
Threat Modeling Example
Code Crawling
192
196
200
206
3
A1 Injection
A2 Broken Authentication And Session Management
A3 Cross-Site Scripting (XSS)
A4 Insecure Direct Object Reference
A5 Security Misconfiguration
A6 Sensitive Data Exposure
A7 Missing Function Level Access Control
A8 Cross-Site Request Forgery (CSRF)
A9 Using Components With Know Vulnerabilities
A10 Unvalidated Redirects And Forwards
43
58
70
77
82
117
133
139
146
149
Technical Reference For Secure Code Review
Appendix
4
HTML5
Same Origin Policy
Reviewing Logging Code
Error Handling
Reviewing Security Alerts
Review For Active Defence
Race Conditions
Buffer Overruns
Client Side JavaScript
154
158
160
163
175
178
181
183
188
Secure Code Review 
Methodology
9
20
Introduction
2
1
3
Code Review Guide Foreword - By Eoin Keary
By Eoin Keary, 
Long Serving OWASP Global Board Member
The OWASP Code Review guide was originally born from the 
OWASP Testing Guide. Initially code review was covered in the 
Testing Guide, as it seemed like a good idea at the time. Howev-
er, the topic of security code review is too big and evolved into 
its own stand-alone guide.
I started the Code Review Project in 2006. This current edition 
was started in April 2013 via the OWASP Project Reboot initia-
tive and a grant from the United States Department of Home-
land Security.
The OWASP Code Review team consists of a small, but talented, 
group of volunteers who should really get out more often.  The 
volunteers have experience and a drive for the best practices 
in secure code review in a variety of organizations, from small 
start-ups to some of the largest software development organi-
zations in the world.
It is common knowledge that more secure software can be pro-
duced and developed in a more cost effective way when bugs 
are detected early on in the systems development lifecycle. Or-
ganizations with a proper code review function integrated into 
the software development lifecycle (SDLC) produced remark-
ably better code from a security standpoint. To put it simply “We 
can’t hack ourselves secure”. Attackers have more time to find 
vulnerabilities on a system than the time allocated to a defend-
er. Hacking our way secure amounts to an uneven battlefield, 
asymmetric warfare, and a losing battle.
By necessity, this guide does not cover all programming lan-
guages. It mainly focuses on C#/.NET and Java, but includes C/
C++, PHP and other languages where possible. However, the 
techniques advocated in the book can be easily adapted to al-
most any code environment. Fortunately (or unfortunately), the 
security flaws in web applications are remarkably consistent 
across programming languages.
Eoin Keary, June 2017
FOREWORD
1
4
Acknowledgements
APPRECIATION TO UNITED STATES DEPARTMENT OF 
HOMELAND SECURITY 
FEEDBACK
OWASP community and Code Review Guide project leaders wish to expresses its deep ap-
preciation to United States Department of Homeland Security for helping make this book 
possible by funds provided to OWASP thru a grant. OWASP continues be to the preeminent 
organization for free unbiased/unfretted application security. 
We have seen a disturbing rise in threats and attacks on community institutions thru appli-
cation vulnerabilities, only by joining forces, and with unfretted information can we help 
turn back the tide these threats. The world now runs on software and that software needs 
to be trust worthy. Our deepest appreciation and thanks to DHS for helping and in sharing 
in this goal.
If you have any feedback for the OWASP Code Review team, and/or find any mistakes or 
improvements in this Code Review Guide please contact us at:
PI:EMAIL
5
Acknowledgements
ACKNOWLEDGEMENTS
Content Contributors
Larry Conklin
Gary Robinson
Johanna Curiel
Eoin Keary
Islam Azeddine Mennouchi
Abbas Naderi
Carlos Pantelides
Michael Hidalgo
Reviewers
Alison Shubert
Fernando Galves
Sytze van Koningsveld
Carolyn Cohen
Helen Gao
Jan Masztal
David Li
Lawrence J Timmins
Kwok Cheng
Ken Prole
David D’Amico
Robert Ferris
Lenny Halseth
Kenneth F. Belva
VERSION 2.0, 2017
Project Leaders
Larry Conklin
Gary Robinson
Project Leader
Eoin Keary
Content Contributors
Jenelle Chapman
Andrew van der Stock
Paolo Perego
David Lowry
David Rook
Dinis Cruz
Jeff Williams
Reviewers
Jeff Williams
Rahin Jina
VERSION 1.0, 2007
6
Welcome to the second edition of the OWASP Code Review Guide Project. The second edition brings the 
successful OWASP Code Review Guide up to date with current threats and countermeasures. This ver-
sion also includes new content reflecting the OWASP communities’ experiences of secure code review 
best practices.
INTRODUCTION
CONTENTS
The Second Edition of the Code Review Guide has been developed to advise software developers and 
management on the best practices in secure code review, and how it can be used within a secure soft-
ware development life-cycle (S-SDLC).  The guide begins with sections that introduce the reader to 
secure code review and how it can be introduced into a company’s S-SDLC.  It then concentrates on 
specific technical subjects and provides examples of what a reviewer should look for when reviewing 
technical code.  Specifically the guide covers:
Overview
This section introduces the reader to secure code review and the advantages it can bring to a devel-
opment organization.  It gives an overview of secure code review techniques and describes how code 
review compares other techniques for analyzing secure code.
Methodology
The methodology section goes into more detail on how to integrate secure review techniques into de-
velopment organizations S-SDLC and how the personnel reviewing the code can ensure they have the 
correct context to conduct an effective review.  Topics include applying risk based intelligence to securi-
ty code reviews, using threat modelling to understand the application being reviewed, and understand-
ing how external business drivers can affect the need for secure code review.
Introduction - Contents
7
How to use
The contents and the structure of the book have been carefully designed. Further, all the contributed chapters have been judi-
ciously edited and integrated into a unifying framework that provides uniformity in structure and style.
This book is written to satisfy three different perspectives.
1. Management teams who wish to understand the reasons of why code reviews are needed and why they are included in best
practices in developing secure enterprise software for todays organizations. Senior management should thoroughly read sec-
tions one and two of this book.  Management needs to consider the following items if doing secure coding is going to be part of 
the organizations software development lifecycle:
• Does organization project estimation allot time for code reviews?
• Does management have the capability to track the relevant metrics of code review and static analysis for each project and
programmer?
• Management needs to decide when in the project life cycle will that code reviews should be done in the project lifecycle and
what changes to existing projects require review of previously completed code reviews.
2. Software leads who want to give manfully feedback to peers in code review with ample empirical artifacts as what to look for 
in helping create secure enterprise software for their organizations. They should consider:
•As a peer code reviewer, to use this book you first decided on the type of code review do you want to accomplish.  Lets spend a
few minutes going over each type of code review to help in deciding how this book can be assistance to you.
• API/design code reviews. Use this book to understand how architecture designs can lead to security vulnerabilities. Also if the 
API is a third party API what security controls are in place in the code to prevent security vulnerabilities. 
• Maintainability code reviews. These types of code reviews are more towards the organizations internal best coding practices. 
This book does cover code metrics, which can help the code reviewer, better understand what code to look at for security vul-
nerabilities if a section of code is overly complex.
• Integration code reviews. Again these types of code reviews are more towards the organizations internal coding policies.  Is 
the code being integrated into the project fully vetted by IT management and approved? Many security vulnerabilities are now 
being implemented by using open source libraries whichh may bring in dependencies that are not secure.
• Testing code reviews.  Agile and Test Driven design where programmer creates unit tests to prove code methods works as the 
programmer intended. This code is not a guide for testing software. The code reviewer may want to pay attention to unit test 
cases to make sure all methods have appropriate exceptions; code fails in a safe way. If possible each security control in code has 
the appropriate unit test cases.  
3. Secure code reviewer who wants an updated guide on how secure code reviews are integrated in to the organizations secure 
software development lifecycle. This book will also work as a reference guide for the code review as code is in the review process.
This book provides a complete source of information needed by the code reviewer. It should be read first as a story about code 
reviews and seconds as a desktop reference guide.
HOW TO USE THE CODE REVIEW GUIDE
8
2
9
SECURE CODE REVIEW
Technical Reference For Secure Code Review
Here the guide drills down into common vulnerabilities and technical controls, including XSS, SQL injection, 
session tracking, authentication, authorization, logging, and information leakage, giving code examples in 
various languages to guide the reviewer.
This section can be used to learn the important aspects of the various controls, and as an on-the-job reference 
when conducting secure code reviews.
We start with the OWASP Top 10 issues, describing technical aspects to consider for each of these issues.  We 
then move onto other common application security issues not specific to the OWASP Top 10
Secure code review is probably the single-most effective technique for identifying security bugs early in the 
system development lifecycle. When used together with automated and manual penetration testing, code 
review can significantly increase the cost effectiveness of an application security verification effort.
This guide does not prescribe a process for performing a security code review. Rather, it provides guidance on 
how the effort should be structured and executed. The guide also focuses on the mechanics of reviewing code 
for certain vulnerabilities.
Manual secure code review provides insight into the “real risk” associated with insecure code. This contextual, 
white-box approach is the single most important value. A human reviewer can understand the relevance of 
a bug or vulnerability in code. Context requires human understanding of what is being assessed. With ap-
propriate context we can make a serious risk estimate that accounts for both the likelihood of attack and the 
business impact of a breach. Correct categorization of vulnerabilities helps with priority of remediation and 
fixing the right things as opposed to wasting time fixing everything.
5.1 Why Does Code Have Vulnerabilities?
MITRE has catalogued circa 1000 different kinds of software weaknesses in the CWE project. These are all 
different ways that software developers can make mistakes that lead to insecurity. Every one of these weak-
nesses is subtle and many are seriously tricky. Software developers are not taught about these weaknesses in 
school and most do not receive any on the job training about these problems.
These problems have become so important in recent years because we continue to increase connectivity 
and add technologies and protocols at an extremely fast rate. The ability to invent technology has seriously 
outstripped the ability to secure it. Many of the technologies in use today simply have not received enough 
(or any) security scrutiny.
There are many reasons why businesses are not spending the appropriate amount of time on security. Ulti-
mately, these reasons stem from an underlying problem in the software market. Because software is essen-
tially a black box, it is extremely difficult for a customer to tell the difference between good code and insecure 
code. Without this visibility vendors are not encouraged to spend extra effort to produce secure code.  Nev-
ertheless, information security experts frequently get pushback when they advocate for security code review, 
with the following (unjustified) excuses for not putting more effort into security: 
“We never get hacked (that I know of), we don’t need security”
Secure Code Review
10
“We have a firewall that protects our applications”
“We trust our employees not to attack our applications”
Over the last 10 years, the team involved with the OWASP Code Review Project has performed thousands of 
application reviews, and found that every non-trivial application has had security vulnerabilities. If code has 
not been reviewed for security holes, the likelihood that the application has problems is virtually 100%.
Still, there are many organizations that choose not to know about the security of their code. To them, consider 
Rumsfeld’s cryptic explanation of what we actually know: 
“...we know, there are known knowns; there are things we know we know. We also know there are known un-
knowns; that is to say we know there are some things we do not know. But there are also unknown unknowns 
-- the ones we don’t know we don’t know.”- Donald Rumsfeld
If informed decisions are being made based on a measurement of risk in the enterprise, which will be fully 
supported. However, if risks are not being understood, the company is not being duly diligent, and is being 
irresponsible both to shareholders and customers.
5.2 What is Secure Code Review?
Code review aims to identify security flaws in the application related to its features and design, along with the 
exact root causes. With the increasing complexity of applications and the advent of new technologies, the 
traditional way of testing may fail to detect all the security flaws present in the applications. One must under-
stand the code of the application, external components, and configurations to have a better chance of finding 
the flaws. Such a deep dive into the application code also helps in determining exact mitigation techniques 
that can be used to avert the security flaws.
It is the process of auditing the source code of an application to verify that the proper security and logical 
controls are present, that they work as intended, and that they have been invoked in the right places. Code 
review is a way of helping ensure that the application has been developed so as to be “self-defending” in its 
given environment. 
Secure code review allows a company to assure application developers are following secure development 
techniques. A general rule of thumb is that a penetration test should not discover any additional application 
vulnerabilities relating to the developed code after the application has undergone a proper security code 
review. At the least very few issues should be discovered. 
All security code reviews are a combination of human effort and technology support. At one end of the spec-
trum is an inexperienced person with a text editor. At the other end of the scale is an expert security team with 
advanced static analysis (SAST) tools. Unfortunately, it takes a fairly serious level of expertise to use the current 
application security tools effectively. They also don’t understand dynamic data flow or business logic. SAST 
tools are great for coverage and setting a minimum baseline.
Tools can be used to perform this task but they always need human verification. They do not understand 
context, which is the keystone of security code review. Tools are good at assessing large amounts of code and 
pointing out possible issues, but a person needs to verify every result to determine if it is a real issue, if it is 
actually exploitable, and calculate the risk to the enterprise. Human reviewers are also necessary to fill in for 
the significant blind spots, which automated tools, simply cannot check.
Secure Code Review
11
Secure Code Review
5.3 What is the difference between Code Review and Secure Code Review?
The Capability Maturity Model (CMM) is a widely recognized process model for measuring the development 
processes of a software development organization.  It ranges from ‘level 1’ where development processes are 
ad hoc, unstable and not repeatable, to ‘level 5’ where the development processes are well organized, docu-
mented and continuously improving.  It is assumed that a company’s development processes would start out 
at level 1 when starting out (a.k.a start-up mode) and will become more defined, repeatable and generally 