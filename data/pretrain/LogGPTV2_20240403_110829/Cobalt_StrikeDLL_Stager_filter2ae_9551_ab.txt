调用后，该`XorDecodeAndCreateThread`函数首先使用[VirtualAlloc](https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc)分配另一个内存区域。分配的区域具有读/写权限([PAGE_READWRITE](https://docs.microsoft.com/en-us/windows/win32/memory/memory-protection-constants)),但不能执行。通过不同时具有可写和可执行权限，这个示例可能是尝试躲避一些只寻找[PAGE_EXECUTE_READWRITE](https://docs.microsoft.com/en-us/windows/win32/memory/memory-protection-constants)区域的安全解决方案。
一旦这个区域被分配,函数就会在Shellcode缓冲区上循环并使用简单的xor操作将每个字节解密
分配到新的内存区域中。
解密完成后，`GetModuleHandleAndGetProcAddressToArg`函数被调用。它的作用放置指向两个有用的函数指针到内存:`GetModuleHandleA`
and `GetProcAddress`。这些函数能够允许shellcode
解析其他过程，而不必依赖于它们的导入。在存储这些指针之前，该`GetModuleHandleAndGetProcAddressToArg`函数首先确保特定值不是`FALSE`（`0`）。令人惊讶的是，存储在全局变量（此处称为`zero`）中的该值始终为`FALSE`，因此指针从未被存储。
回到调用者函数，`XorDecodeAndCreateThread`使用`VirtualProtect`更改shellcode的存储区域为可执行权限（`PAGE_EXECUTE_READ`），最终创建一个新线程。该线程从`JumpToParameter`函数开始，该函数充当shellcode的简单包装，shellcode作为参数提供。
从这里开始，执行先前的加密Cobalt Strike shellcode stager
，解析[WinINet](https://docs.microsoft.com/en-us/windows/win32/wininet/about-wininet) 过程,下载最终的信标然后执行它。我们不会在这篇文章中介绍shellcode的分析，因为它应该用一篇专属的文章来分析。
尽管最后一个流程包含了更多的分支和逻辑，但总体流程图仍然非常简单。
## 内存流分析
在上述分析中，最令人惊讶的是存在一个众所周知的命名管道。通过在管道出口处解密shellcode或进行进程间通信，可以将管道用作防御逃避机制。
但在我们的案例中，它只是充当[memcpy](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/memcpy-wmemcpy?view=msvc-160)将加密的Shellcode从DLL移至另一个缓冲区的作用。
那么为什么要使用这种开销呢？ 正如另以为同事指出，答案在于Artifact Kit，这是Cobalt Strike的依赖项：
> Cobalt Strike uses the Artifact Kit to generate its executables and DLLs.
> The Artifact Kit is a source code framework to build executables and DLLs
> that evade some anti-virus products. […] One of the techniques [see: `src-> common/bypass-pipe.c` in the Artifact Kit] generates executables and DLLs
> that serve shellcode to themselves over a named pipe. If an anti-virus
> sandbox does not emulate named pipes, it will not find the known bad
> shellcode.
>
> [cobaltstrike.com/help-artifact-kit](https://www.cobaltstrike.com/help-> artifact-kit)
正如我们在上图中所看到的,在`malloc`缓冲区加密shellcode的stageing为了躲避检测会产生大量开销。`XorDecodeAndCreateThread`直接从初始加密的Shellcode中读取则可以避免这些操作。如下图所示，避免使用命名管道将进一步消除对循环`Sleep`调用的需求，因为数据将随时可用。
看来我们找到了一种减少得到shellcode时间的方法。但是流行的防病毒解决方案是否被命名管道所欺骗？
## 修补执行流程
为了检验该推测，
让我们改进恶意执行流程。对于初学者，我们可以跳过与管道毋庸的调用，而直接在`DllMainThread`函数调用`PipeDecryptExec`，从而绕过管道的创建和编写。汇编级的修补方式执行过程超出了本文的讨论范围，这里我们仅感兴趣于流程的抽象。
该`PipeDecryptExec`功能还需要打补丁以跳过`malloc`分配\读取管道，并确保它能够提供`XorDecodeAndCreateThread`需要的DLL的加密shellcode而不是现在不存在的重复区域。
修补我们的执行流程后，如果安全解决方案将这些未使用的指令作为检测基础，则我们可以将其都清空。
应用补丁后，
们最终得到了一条线性且较短，直到执行Shellcode的路径。下图专注于此修补路径，不包括下面的分支`WriteBufferToPipeThread.`
由于我们也弄清楚了shellcode如何进行加密（我们拥有`xor`密钥）一样，我们修改了两个示例以修改C2的地址，因为它可用于识别我们的目标客户。
为确保shellcode不依赖任何绕过的调用，我们启动了一个快速的Python
HTTPS服务器，并确保经过编辑的domain解析为`127.0.0.1`。然后，我们可以通过[rundll32.exe](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/rundll32)调用原始DLL和修补的DLL，并观察shellcode如何去试图检索Cobalt Strike
Beacon，以证明我们的补丁程序没有影响到shellcode。我们调用的导出的`StartW` 函数是在`Sleep`调用周围的简单包装。
## 防病毒审查
那么，命名管道实际上是否可以用作防御逃避机制？尽管有有效的方法来衡量补丁程序的影响（例如：比较多个沙盒解决方案），但VirusTotal确实提供了快速的初步评估。因此，我们向VirusTotal提交了以下版本重新编辑C2的样本：
  * `wpdshext.dll.custom.vir` 这是经过编辑的Cobalt Strike DLL。
  * `wpdshext.dll.custom.patched.vir` 这是我们未命名的补丁和编辑过的Cobalt Strike DLL。
由于原始的Cobalt Strike包含可识别的特征（命名管道），因此我们希望修补后的版本具有较低的检测率，即使Artifact Kit不这样认为。
正如我们预期的那样，Cobalt
Strike所利用的命名管道开销实际上是作为检测基础。从以上截图中可以看出，原始版本（左）仅获得[17次检测](https://www.virustotal.com/gui/file/a01ebc2be23ba973f5393059ea276c245e6cea1cd1dc3013548c059e810b83e6/detection)，而修补版本（右）获得的共[16次检测](https://www.virustotal.com/gui/file/e9dc6d7ac7659e99d2149f4ee5f6fb9fb5f873efd424d5f5572d93dee7958346/detection)少了一个。在给出的解决方案中，我们注意到ESET和Sophos未能检测到无管道版本，而ZoneAlarm无法识别原始版本。
一个值得注意的观察结果是，一个适配流程处于中间过程的补丁，但未对未使用的代码清0，结果发现它是检测到最多的版本，总共有[20个匹配](https://www.virustotal.com/gui/file/f2458d8d9c86a8cb4a5ef09ad4213419f70728f69f207464c4b3c423ba7ae3c4/detection)。出现更高检测率是因为此修补程序允许不认识管道的防病毒提供商也仍然可以使用与管道相关的操作签名去定位shellcode。
尽管这些测试针对的是默认的Cobalt
Strike缺乏命名管道的行为。但有人可能会争辩，定制的命名管道模式将具有最好的效果。尽管我们在最初的测试中没有想到这种变体，但我们在次日提交了一个版本(改变了管道名称为`NVISO-RULES-%d`而不是`MSSE-%d-server`),然后获得了[18个检测结果](https://www.virustotal.com/gui/file/5f2b3f855ffb78d91fc2e35377f50c579d31956bf0e39d97e36fbec968fdb7aa/detection)。作为比较，我们另外两个样本的检测率在一夜之间增加到30+。但是，我们必须考虑这18个检测结果受初始shellcode的影响。
## 结论
事实证明，逆向恶意的Cobalt Strike
DLL比预期的要有趣。总体而言，我们注意到存在嘈杂的操作，这些操作的使用不是功能要求，甚至可以充当检测基础。为了证实我们的假设，我们修补了执行流程，并观察了简化版本如何以较低的检测率（几乎未更改）到达C2服务器。
因此，这个分析为什么很重要？
## 蓝队
首先，最重要的是，这个载荷的分析突出显示了常见的Cobalt Strike
DLL特征，使我们可以进一步微调检测规则。虽然这个Stager是第一个被分析的DLL,但我们确实寻找了其他Cobalt
Strike格式，比如默认信标和可以用的[可延展的C2](https://www.cobaltstrike.com/help-malleable-c2)，包括动态链接库和可移植的可执行文件。出乎意料的是，所有格式都共享了这个常见的[文档记录的](https://blog.cobaltstrike.com/2021/02/09/learn-pipe-fitting-for-all-of-your-offense-projects/)`MSSE-%d-server`的管道名称，并且对[开源检测规则](https://grep.app/search?q=MSSE-&case=true)的快速[搜索](https://grep.app/search?q=MSSE-&case=true)显示了它被寻找的东西很少。
## 红队
除了对NVISO的防御行动有所帮助外，这项研究还使我们的进攻团队在选择使用定制交付机制方面感到更加安慰。更重要的是，遵循我们记录的设计选择。在针对成熟环境的操作中使用命名管道更有可能引发危险信号，并且到目前为止，至少在不更改生成方式的情况下，似乎仍无法提供任何可逃避的优势。
对于下一个针对我们客户的参与者: 我期待着修改您的样本并测试更改后的管道名称的有效性。
> 译者注: 修改管道名称还是蛮有用的...
>
> 本文未翻译文章，原文链接: stagers/>