  5. d = 17^(3120-1) mod 3120 = 2753（原文取d=413）。
在这里，n和d为私钥，n和e为公钥，通过n和e无法构造e。这里可能会引起一个误解：既然e和d两者对称，一个加密一个就能解密，一个签署一个就能验证，所以公开一个隐藏另一个就行，具体是哪个是都可以的，但是实践中，e经常取65537，是一个相对比较小的数，如果公开比较长的数d，那么通过猜测计算e(即使不是65537)将不会是一个太难的事，因此实践中总是固定并公开e，保留比较复杂的数d。
同时我们可以看到，一般来说，通过n和d也无法构造e。即通过私钥无法推导出公钥（e能够被猜出来是另一回事）。要构造e和d，正常方法就是使用p和q计算Eular
function。
### 加密解密算法
对于数据m，密文c的计算方法为：
c = (m^e) mod n
解密算法则为：
m = (c^d) mod n
由mod n可以看出，密文最大长度和n同数量级，因此modulus又被称为RSA算法的块长度，注意上面求d的时候用的是Euler
function，现在用的是Modulus，两者不一致。
实例还是用wiki，m=65。
c = 65^17 mod 3233 = 2790  
m = 2790^413 mod 3233 = 2790^2753 mod 3233 = 65
可以看到，d有多个合法值，而且使用Carmichael函数还是Euler函数并无关系。
### 签署验证算法
和加解密算法类似，对消息m，先使用私钥d进行运算的结果v，可以用公钥运算得到原始数据d。
例如m=65，我们来验证签署。
v = 65^413 mod 3233 = 588  
m = 588^17 mod 3233 = 65
注意，这个签署算法实际可以解出原始数据，这和普通的验证算法很不一样。一般而言，签署算法根本没必要，或者无法解出原始数据。
### 密钥协商算法
根据这里：[https://security.stackexchange.com/questions/8343/what-key-exchange-mechanism-should-be-used-in-tls，RSA为基础的交换算法有三种：](https://security.stackexchange.com/questions/8343/what-key-exchange-mechanism-should-be-used-in-tls%EF%BC%8CRSA%E4%B8%BA%E5%9F%BA%E7%A1%80%E7%9A%84%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95%E6%9C%89%E4%B8%89%E7%A7%8D%EF%BC%9A)
RSA: 客户端随机选择一个秘密s，用服务器的公钥加密，服务器用私钥解密；
DH_RSA: 服务器给出一个静态DH公钥，同时这个公钥使用服务器cert对应的私钥签署以防篡改；
DHE_RSA: 类似于DH_RSA，但是服务器动态生成一个DH公钥。E是ephemeral的意思。
由于服务器DH公钥被签署了，因此MITM的攻击者无法给用户一个自己控制了私钥的DH公钥。因而无法冒充服务器端。
当然，我们可以根据密码学常识推断出，DH_RSA和DHE_RSA是前向安全的，而RSA本身是前向非安全的。
### 最佳实践
RSA目前来看还是最经久耐用的非对称密码系统，他支持的能力极为全面，包含了加解密，签署，Kx等领域，相比起来，ECC的加解密就不是很强。有ECIES，但是很多地方没有实现。
正确使用RSA有一定的困难，因为数论领域(准确说是number field
sieve)的飞速发展，所以RSA长度也是飞速增加。目前1024位的RSA已经不安全了，建议值是2048，计算一下就知道，这需要256字节。虽然选用4096更有保证，但是在密集计算的时候选用4096，会导致消耗大量CPU，因此只建议在长期使用的密钥上使用4096位（例如gpg私钥）。
TODO: RSA-OAEP
还有就是RSA受量子计算机的威胁，量子计算机算法中最具备代表性的shor算法就是用来解决大质数分解问题的。
## ECC系列算法
ECC是非对称密码体系中的一个大类（其实总共就两个大类，一个RSA一个ECC），基本原理比较复杂，这里就不展开了，基本涉及的算法有：
ECDH: 密钥交换算法
ECIES: 加密算法，IES加密算法的ECC版本
ECDSA: 签署算法
EdDSA: 签署算法
ECMQV: 密钥交换算法
### ECDH
ECDH是基于ECC和DH的Kx算法。
首先确定曲线E(q)和基点G(注意这是一个数，但是使用大写)，这两个的选取过程是通过一定的设计得出的，不同的设计得出的被称为不同的曲线，而后，每个人确定自己的私钥k，并且计算p=k*G。
我们还是用Alice和Bob来分析，对Alice来说，pa=ka _G，对Bob来说，pb=kb_ G，最后双方运算p=ka _pb=kb_ pa=ka
_kb_ G，因此双方得到同样的p。
和DHE类似的，ECDH存在一个动态生成k的算法变形ECDHE。
### ECDSA
ECDSA（
）是基于ECC的签署算法，是一种非确定性算法。具体算法请看wiki，或者进一步找一本ECC密码学的书看。
### EdDSA
EdDSA（[https://en.wikipedia.org/wiki/EdDSA）也是一个基于ECC的签署算法，和ECDSA最大的区别是，EdDSA是一种确定性算法，不需要借助随机数。](https://en.wikipedia.org/wiki/EdDSA%EF%BC%89%E4%B9%9F%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EECC%E7%9A%84%E7%AD%BE%E7%BD%B2%E7%AE%97%E6%B3%95%EF%BC%8C%E5%92%8CECDSA%E6%9C%80%E5%A4%A7%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%EF%BC%8CEdDSA%E6%98%AF%E4%B8%80%E7%A7%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%AE%97%E6%B3%95%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E5%80%9F%E5%8A%A9%E9%9A%8F%E6%9C%BA%E6%95%B0%E3%80%82)
### 安全实践
ECC系列的密码长度非常短，同时，算法量要比RSA低非常多。一般来说ECC的密钥是攻击量的一倍。例如攻击量是2^80(这是一个常见的值)，那么密钥长度最低需要160。NIST的推荐值是用224，合28bytes。具体可以查看这里：
。
## 最佳实践
密码学里一个很反直觉的东西就是，千万不要因为标准库慢就自己实现，标准库中很多算法都是常数时间算法，具体可以看看时间攻击和侧信道攻击这两种脑洞大开的东西，包括安全界赫赫有名的Meltdown，也是一种侧信道攻击。请在理解原理的基础上，务必使用强大可靠的开源库(注意开源是一个必要条件)。
## random
随机数关系到整个系统的安全，请不要随意处理，尤其是不要拿time作为seed设定一下random然后就施施然用了。很多时候random被调用的时刻是固定的，可以被回朔到1-2秒的范围内，time的精度在10^-3到10^-6这个量级上。综合起来可以知道，对随机数进行穷举攻击的开销最高只有2E6而已，这个量级甚至不能作为有效的阻碍。
要获得随机数，比较合理的方法是使用/dev/random和/dev/urandom，以及getrandom调用。/dev/random和urandom的区别在于，random会返回随机数，而urandom返回伪随机数(准确的说，在新版内核上，生成函数是chacha20)，因此random会因为耗尽而阻塞，urandom不会。不知为何，这份指南（[https://www.cnblogs.com/windydays/p/2015_modern_crypto_practice.html）推荐大家避开random。](https://www.cnblogs.com/windydays/p/2015_modern_crypto_practice.html%EF%BC%89%E6%8E%A8%E8%8D%90%E5%A4%A7%E5%AE%B6%E9%81%BF%E5%BC%80random%E3%80%82)
无论如何，如果你觉得随机性不够，还可以加入random.org的数据来增强随机性。
* * *
【It works,why?】后期预告：
《openssl基本密码学操作》
《openssl证书相关》
作者介绍：Shell，一个普通程序员。有的时候写写程序，有的时候潜潜水，大部分时候，他都在发呆。
* * *
更多【技术分享】内容  
请至ESRC平台“博客”
审核人：yiwang 编辑：少爷