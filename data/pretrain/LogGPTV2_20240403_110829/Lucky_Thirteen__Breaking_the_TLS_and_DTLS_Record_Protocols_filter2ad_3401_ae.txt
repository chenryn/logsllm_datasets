(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5) (cid:5)
(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)(cid:4) (cid:4)
(cid:3)(cid:3)(cid:3)(cid:3) (cid:3)(cid:3)(cid:3) (cid:3) (cid:3) (cid:3)
(cid:2)(cid:2)(cid:2)(cid:2) (cid:2)(cid:2)(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)
(cid:7)
0
20
(cid:3)
(cid:3)
(cid:2) (cid:2)
40
(cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3)
(cid:4)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2)
(cid:3)
(cid:3)
(cid:3)
(cid:2)
60
80
Percentiles
(cid:6)
(cid:5)
(cid:4)
(cid:3)
(cid:4)
(cid:6)
(cid:2) (cid:2) (cid:2)
(cid:5)
(cid:3)
(cid:3)
(cid:7) (cid:7)
(cid:4)
(cid:6)
(cid:5)
100
(cid:2) 212 Trials L(cid:2)24
(cid:3) 213 Trials L(cid:2)25
(cid:4) 214 Trials L(cid:2)26
(cid:5) 215 Trials L(cid:2)27
(cid:6) 216 Trials L(cid:2)28
(cid:7) 217 Trials L(cid:2)29
to discover which mask value triggers Case 2. In the case
of TLS, this takes a considerable amount of time due to the
underlying TCP and TLS connection set-up and tear-down
times. For example, with L = 27 we estimate that the 223
sessions would take around 64 hours in our setup. However,
once the last two bytes of a block have been successfully
recovered, then the remaining bytes in that block can be
recovered in a much shorter time. We have not implemented
the full plaintext recovery attack for TLS. Our results below
for DTLS strongly indicate that the full attack would work
for TLS with L = 27, albeit slowly.
E. Plaintext Recovery Attacks for OpenSSL DTLS
As explained in Section IV-D, we can use the timing
and ampliﬁcation techniques from [1] in combination with
the previously described attacks to attack DTLS. Now the
attacker sends a number (n) of crafted packets, followed by
a DTLS Heartbeat request and waits for the corresponding
Heartbeat reply. This process is repeated L times for each
mask value. The attacker selects n and L in order to trade-
off the attack success probability and the total number of
packets injected. We have found experimentally that n = 10
is a good choice for achieving stable timing values. On the
other hand, n = 1 is indicative of what might be expected
to happen with TLS but without enduring the overhead of
TCP and TLS connection setups (note that the noise levels
for DTLS are generally somewhat higher since we depend
on an application-layer error message rather than a native
TLS error message). Higher values of n could be used if
the attacker is remote from the server.
Figure 6 shows the percentile-based success probabilities
for recovering P ∗
15 assuming that P ∗
14 is known, for n =
10. It can be seen that the attack is very effective, reliably
recovering the unknown plaintext byte with only 211 trials
(L = 23). Even for 28 trials (L = 1), the success probability
is 0.266.
We also conducted a 2-byte recovery attack against
OpenSSL DTLS; this attack is effectively the ﬁrst step of
the full plaintext recovery attack described in Section IV.
Figure 7 shows the success probabilities for recovering P ∗
14
and P ∗
15 when n = 10. Again, the attack is very effective,
536
0.0
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)
(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)
(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)
0
20
40
60
80
Percentiles
Figure 7.
probabilities for recovering P ∗
14 and P ∗
OpenSSL DTLS 2-byte recovery: percentile-based success
15, n = 10.
recovering both bytes with success probability 0.93 for 219
trials (L = 23). The quality of these results is evidence that
the attack should extend easily to a full plaintext recovery
attack. Figure 8 shows our results for n = 1, which we
recall serves as an experimental model for TLS. We see that
2-byte recovery is reliable given 223 trials (L = 27); we
already reach more than 80% success rate using 222 trials.
F. More Challenging Network Environments
We have not conducted experiments where the attacker
is not situated in the same LAN as the server. Given
the small
timing differences involved, we would expect
the attacks to fail when the attacker is remote, i.e. more
than a couple of hops away from the server, or that very
large numbers of sessions would be needed to get reliable
results. Nevertheless, there are realistic scenarios where the
1.0
0.8
0.6
0.4
0.2
0.0
s
e
i
t
i
l
i
b
a
b
o
r
P
s
s
e
c
c
u
S
(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)
(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)
(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)
(cid:5)(cid:5)
(cid:6)
(cid:7)
(cid:5)(cid:5)
(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)
(cid:4)
(cid:4)(cid:4)
(cid:5)
(cid:5)
(cid:7)(cid:7)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:6)
(cid:3) (cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)(cid:3)(cid:3)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2)
(cid:2) (cid:2)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)
(cid:4)(cid:4)(cid:4)(cid:4)
(cid:5)(cid:5)(cid:5)(cid:5)
(cid:6)(cid:6)
(cid:7)(cid:7)
(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)
0
20
(cid:4)(cid:4)
(cid:4)
(cid:4)(cid:4)
(cid:3) (cid:3) (cid:3)
(cid:3) (cid:3) (cid:3)
(cid:3)
(cid:5)
(cid:6)
(cid:5)
(cid:5)(cid:5)
(cid:4)(cid:4)
(cid:4)
(cid:4)(cid:4)
(cid:4)
(cid:7)
(cid:6)
(cid:3)
(cid:3) (cid:3) (cid:3)
(cid:7)
(cid:5)
(cid:4)
(cid:4)(cid:4)
(cid:5)
(cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2) (cid:2)(cid:2)
(cid:3) (cid:3) (cid:3)
(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)(cid:4)
(cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3) (cid:3)(cid:3)
(cid:6)(cid:6)(cid:6)(cid:6)
(cid:5)(cid:5)(cid:5)(cid:5)
(cid:7)(cid:7)(cid:7)(cid:7)
80
100
(cid:3) (cid:3)
(cid:6)
(cid:5)
(cid:6)
(cid:7)
(cid:5)
40
60
(cid:2) 220 Trials L(cid:2)24
(cid:3) 221 Trials L(cid:2)25
(cid:4) 222 Trials L(cid:2)26
(cid:5) 223 Trials L(cid:2)27
(cid:6) 224 Trials L(cid:2)28
(cid:7) 225 Trials L(cid:2)29
Percentiles
Figure 8.
probabilities for recovering P ∗
14 and P ∗
15, n = 1.
OpenSSL DTLS 2-byte recovery: percentile-based success
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:50 UTC from IEEE Xplore.  Restrictions apply. 
proximity requirement can be met, for example when a
hostile network service provider attacks its customers, or
in cloud computing environments. For DTLS, the timing
signals can be ampliﬁed, effectively by an arbitrary amount,
and so we would expect to be able to mount the attacks
remotely.
VI. OTHER IMPLEMENTATIONS OF TLS
1) GnuTLS: The GnuTLS5 implementation of MEE-
TLS-CBC deals with bad padding in a different way to that
recommended in the RFCs: instead of assuming zero-length
padding, it uses the last byte of plaintext to determine how
many plaintext bytes to remove (whether or not those bytes
are correctly formatted padding). Since this approach is a
natural alternative to the RFCs’ advice for handling bad
padding we analyse it here; for full details of the analysis,
see the full version [2].
Firstly, we point out that GnuTLS-style processing is just
as vulnerable to distinguishing attacks as RFC-compliant
processing. Indeed, the attack described in Section III will
work just as before6. We next present an attack that recovers
the rightmost byte of plaintext
in any target block for
GnuTLS-style padding processing. Let C∗ denoting the
target ciphertext block, C(cid:2) denote the previous ciphertext
block and Δ denote a mask block of 16 bytes. We consider
the decryption of a ciphertext Catt(Δ) of the form:
Catt(Δ) = HDR||C0||C1||C2|| . . .||C18||C(cid:2) ⊕ Δ||C∗
in which there are 20 non-IV ciphertext blocks, the penul-
timate block is an XOR-masked version of C(cid:2) and the last
block is C∗, the target ciphertext block. The corresponding
320-byte plaintext is P = P1||P2|| . . .||P19||P20 in which
(C∗) ⊕ (C(cid:2) ⊕ Δ)
P20 = DKe
= P ∗ ⊕ Δ.
Now we need consider only two distinct cases, which
between them cover all possibilities:
1) P20 ends with a 0x00 byte: in this case, a single byte of
padding is removed, the next 20 bytes are interpreted
as a MAC tag T , and the remaining 320 − 21 = 299
bytes of plaintext are taken as the record R. MAC
veriﬁcation is then performed on a 13 + 299 = 312-
byte message SQN||HDR||R.
2) P20 ends with any other byte value: in this case, at
least two bytes of “padding” are removed, the next
20 bytes are interpreted as a MAC tag T , and the
remaining bytes of plaintext are taken as the record
R. Because the starting message length, at 320 bytes,
is long enough to allow for the removal of 256 bytes
of padding and a 20-byte MAC whilst still leaving
5www.gnu.org/software/gnutls/
6In fact, since the attack only involves plaintexts which are correctly
padded, it will work for any correct decryption algorithm.
537
a non-null record, no length sanity tests will fail.
MAC veriﬁcation is then performed on a message
SQN||HDR||R that contains at most 311 bytes.
In both cases, the MAC veriﬁcation will fail (with over-
whelming probability) and an error message produced. No-
tice that, in accordance with the discussion in Section II-A,
in Case 1, the MAC veriﬁcation will involve 9 evaluations of
the compression function for SHA-1, while Case 2 requires
at most 8 evaluations. Therefore, we can hope to distinguish
the two cases by careful timing, as previously.
Now the single-byte plaintext recovery attack is straight-
forward:
the attacker injects a sequence of ciphertexts
Catt(Δ) with values of Δ that vary over all possible values
then (in the worst case) after 28
in the last byte Δ15,
trials, the attacker will surely select a value for Δ such that
Catt(Δ) triggers Case 1. When this is detected, he knows
that P20 ends with a 0x00 byte and can infer the value of the
last byte of P ∗ via the blockwise equation P20 = P ∗ ⊕ Δ.
For further improvements to this attack and analysis for
HMAC-MD5 and HMAC-SHA-256, see [2]
We note that we have not found attacks for GnuTLS-style
processing that can extract more than the last byte of the
target block. This is not surprising in view of the fact that
the decryption time for GnuTLS-style processing depends
only on the last byte of plaintext.
We worked with version 3.0.21 of GnuTLS to implement
the above attacks. We found that
the network timings
for error messages were much noisier than for OpenSSL.
We also identiﬁed some coding errors in GnuTLS which
hampered our attack. Nevertheless, we were still able to
reliably recover up to 4 bits of the last byte of each block.
For details, see the full version [2]. Whilst extracting less
plaintext than our OpenSSL attack, far fewer TLS sessions
were required for GnuTLS. This indicates that
ignoring
the recommendations of the RFCs can have severe security
consequences.
2) NSS: Network Security Services (NSS)7 is an open-
source set of libraries implementing, amongst other things,
TLS. It is widely used, including in Mozilla client prod-
ucts and Google Chrome. The NSS code8 takes the same
approach as in GnuTLS, potentially rendering the code
vulnerable to an attack recovering a single byte of plaintext
per block.
3) PolarSSL: We also examined the PolarSSL9 imple-
mentation of TLS. The code10 behaves in much the same
way as OpenSSL, setting a variable padlen to 0 if the
padding check fails, and then verifying the MAC on a
record stripped of padlen bytes. This would render it
7http://www.mozilla.org/projects/security/pki/nss
8We worked with version 3.13.6 available at https://ftp.mozilla.org/pub/
mozilla.org/security/nss/releases/NSS 3 13 6 RTM/src/.
9polarssl.org/
10We worked with version 1.1.4 available at polarssl.org/trac/browser/
trunk/library/ssl tls.c.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:50 UTC from IEEE Xplore.  Restrictions apply. 
vulnerable to the attacks described in Section IV. However,
in its default conﬁguration, PolarSSL does not send any TLS
alert messages when decryption errors are encountered. This
protects PolarSSL against our attack but also means that it
is not RFC-compliant in this aspect.
4) yaSSL: The yaSSL11 embedded SSL library, CyaSSL,