by the tuple (E, h) consisting of the environment and the heap.
Figure 7 presents the algorithm for our summary-based
inter-procedural analysis of a call graph. We handle the follow-
ing cases: (a) calls to methods with summaries already present
in the cache K (rule S-CALLK); (b) calls to external/native
method with no implementation available (rule S-CALLEXT);
S-CALLK
P (pc) = call pc0
K(sigpc0 )↓
(cid:104)pc, cs, σ, K(cid:105) → (cid:104)pc + 1, cs, σ
(cid:48)
, K(cid:105)
(cid:48)
σ
= apply(K(sigpc0 ), σ)
S-CALL
(cid:104)pc, cs, σ, K(cid:105) → (cid:104)pc0, cs :: (σ, pc),⊥, K(cid:105)
P (pc) = call pc0
K(sigpc0 )↑
S-CALLEXT
(cid:104)pc, cs,(cid:104)_, _, s, _(cid:105)_, K(cid:105) → (cid:104)pc + 1, cs,(cid:104)_, _, s :: l, _, _(cid:105), K(cid:105)
l ∈ Loc fresh
P (pc) = call pc0
P (pc0)↑
S-END
sum = cmptSum(σ)
(cid:104)pc, cs :: (σ
(cid:48)(cid:48)
), σ, K(cid:105) → (cid:104)pc
, pc
σ
(cid:48)
(cid:48)
= apply(sum, σ
(cid:48)
(cid:48)(cid:48)
+ 1, cs, σ
(cid:48)
)
P (pc)↑
, K[sig (cid:55)→ sum](cid:105)
Fig. 7: Abstract interpretation of call graph
(c) calls to (non-recursive) methods with no summaries in the
cache K (rule S-CALL) ; and (d) updates of the cache K upon
termination of the analysis of a method (rule S-END).
Rule S-CALLK applies the cached summary of the method
with signature sigpc0 (at index pc0) to the current symbolic
state σ of the caller, using a function apply : Sum × State (cid:55)→
State. In a nutshell, apply takes the root variables Var of
the summary consisting of the formal parameter arg and a
predeﬁned variable rv ∈ Var storing the return value of the
method. Then, it pops off the top value from the stack in σ and
merges it with arg using the function update described in Sec-
tion IV-B. The merging process may affect other components
of σ that contain references to merged locations, resulting in
an updated state σ(cid:48). Rule S-CALLEXT handles external/native
method calls by pushing a fresh symbolic location onto the
stack whenever a method lacks implementation, i.e., P (pc0)↑.
Rule S-CALL triggers the intra-procedural analysis of a new
method by transferring control to its code at index pc0 and
storing the context of the caller in the symbolic stack cs. The
caller’s context contains the caller’s state and program counter
index pc. Observe that the analysis of the callee method is
performed in a context independent manner, i.e, σ(cid:48) = ⊥.
Rule S-CALL matches rule S-END to compute the summary
upon termination of the method’s intra-procedural analysis
(denoted by P (pc)↑). Subsequently, it applies the summary
to the caller’s context σ(cid:48) and caches it in K, and continues the
analysis with the caller’s next instruction at index pc(cid:48) + 1.
Example: Method calls. We illustrate the abstract inter-
pretation of non-recursive calls in Listing 8. The analysis starts
from the method EPoint and calls SSink which is an external
method, hence P (pc0)↑. Rule S-CALLEXT allocates a fresh
location and pushes it onto the stack to emulate the return
value. Because the method signature is deﬁned as sensitive
sink, we mark the fresh variable as tainted. Subsequently, the
assignment stores the tainted value to the location in b.f oo.
Next, we call the method CreateAlias which triggers an
intra-procedural analysis of its body via rule S-CALL after
storing the current σ and pc to the call stack. The analysis
applies rule S-STFLD to create an alias between arg.bar and
arg.f oo. Finally, rule S-END builds a summary from the
9
void EPoint(ClassA arg) {
var b = new ClassB();
b.foo = SSink(arg);
CreateAlias(b);
Foo(b.bar);
}
void CreateAlias(ClassB arg){
arg.bar = arg.foo;
}
void Foo(ClassB arg) {
ExternalMethod(arg);
}
b
lb
T
foo
bar
(b) Heap
(a) Code
Fig. 8: Method calls
current symbolic state and stores it in the cache. The summary
generation algorithm traverses the heap graph h starting from
root variables V ar in E and stores visited nodes and references
to the summary. This is the only information that may affect
the context of the caller. Subsequently, the algorithm applies
the summary to the caller’s state to create a new state that
accounts for the effects of the method call, and proceeds with
executing the next instruction of the method EPoint. Figure 8b
depicts the effects of the summary applications, which add the
edge labeled with bar to the heap graph, thus causing the two
ﬁelds to point to the tainted node.
Finally, we analyze method Foo via rule S-CALL. Foo
contains an external method call (as analyzed by rule S-
CALLEXT) with argument arg as parameter. Since external
methods can be used as attack trigger, we store information
about the ExternalMethod in the node of the arg location.
The rule S-END builds and stores the summary, and applies it
to the EPoint context when reaching the end of the method.
Hence, we merge two locations (b.bar which is passed to Foo,
and arg from the summary), and detect the call to an attack
trigger with a taint mark. Finally, we store the chain from
EPoint to SSink and ExternalMethod as an OIV pattern.
V.
IMPLEMENTATION
This section provides implementation details and limita-
tions of SerialDetector. Figure 2 overviews the architecture.
A. Anatomy of SerialDetector
SerialDetector [41] is written in C# and runs on the .NET
platform using the dnlib library [1] for parsing assemblies.
Pattern detection. The distinguishing feature of SerialDe-
tector is that it implements the framework-agnostic paradigm
and does not use any heuristics based on method or class names
to detect OIV patterns. The input consists of a set of .NET
assemblies and rules for sensitive sinks and attack triggers.
The sensitive sinks are initially described as a native method
that return an object of type System.Object. Thereby, we
assume that an attacker can manipulate either the parameter
of the sensitive sink or the runtime state to get an object
10
of arbitrary type. SerialDetector analyzes only CIL code in
.NET assemblies and does not support binary code as in native
methods. Therefore, we take a conservative approach that every
native method returns an object of any derived type as the
return type. We then mark the return object of the sensitive
sink as tainted. The attack trigger is described as either a native
(external) method that takes a tainted object as parameter or a
virtual method with the ﬁrst argument marked as tainted.
The pipeline of the detection phase consists of four steps:
(1) SerialDetector builds an index of method call’s graph
for the whole .NET assembly dataset; (2) It ﬁlters all native
method signatures using the criteria deﬁning the sensitive
sinks. This step yields the signatures of sensitive sinks, which
we use to build the slices of the call graph in the backward
direction, from the sensitive sinks to entry point methods;
(3) SerialDetector performs a summary-based inter-procedural
dataﬂow analysis as described in Section IV; (4) It outputs a
sequence of patterns containing calls to attack triggers for each
sensitive sink as well as traces from entry points to sensitive
sinks. We collect these patterns in a knowledge base and use
them as input to the exploitation phase.
Exploit generation and validation. Drawing on the
knowledge base from the previous stage, we manually identify
usages of vulnerable patterns in frameworks and libraries. To
this end, we leverage the YSoSerial.Net project [3] to create
templates that can be used to exploit vulnerabilities in a target
application. We do this by declaring a signature of each public
vulnerable method directly in C# code using DSL-like API.
Listing 9 shows the template for the vulnerable YamlDotNet
library from Section II-B.
var deserializer = new Deserializer();
Template.AssemblyVersionOlderThan(5, 0)
.CreateBySignature(it =>
deserializer.Deserialize(
it.IsPayloadFrom("payload.yaml").Cast(),
typeof(object)));
Listing 9: Object Injection Template
We designed a DSL as custom LINQ expressions. LINQ
is a uniform programming model for managing data in C#.
Each method in the DSL call sequence reﬁnes the template
model. For example, we start with the Template static
class and call the method AssemblyVersionOlderThan to
specify a vulnerable version of the library. The next method
call CreateBySignature creates a template for the method
Deserialize of the YamlDotNet serializer and deﬁnes
as the ﬁrst parameter the untrusted input with a payload
from payload.yaml. The DSL facilitates the description
of payloads and it allows to apply one payload to many
templates. The key feature of the DSL is usage the expression
tree as parameter to the method CreateBySignature. The
expression tree represents code in an abstract syntax tree
(AST), where each node is an expression. The method can
extract a signature of the calling method from the expression
tree, e.g., deserializer.Deserialize, to detect any usage
in a target application. Moreover, it can also compile and
the payload. A main
run the expression tree code to test
advantage of template generation with our DSL is that
it
facilitates modiﬁcation and testing of different payloads, which
is essential during exploitation, when SerialDetector sends
a signal upon successful execution of a malicious action.
SerialDetector comprises following steps for exploit generation
and validation:
of the method and apply all generated summaries. To reuse
merged summaries of all virtual method implementations,
we introduce fake methods that include concrete calls of all
implementations of a certain virtual method. We cache the
summary of such method for future use.
1. Matching (Manual): To validate the results of the detection
phase, we match the generated patterns with actual sensitive
sinks and attack triggers of an exploit with a known gadget.
We generate a payload for the known gadgets and reproduce
the exploit of each target serializer. We attach a debugger
to our reproduced case and set breakpoints to the detected
sensitive sink and attack trigger calls. If the breakpoints are
triggered and the attack trigger performs a call chain to the
malicious action of our payload, then we conclude that the
pattern is exploitable.
2. Populating Knowledge Base (Manual): We use the results
of the matching to populate a knowledge base. We describe
the code of a gadget to create and transform to various
formats to generate the payload. We also describe signatures
of vulnerable entry points from the matched patterns in
templates as well as additional restrictions, e.g., the version
of a vulnerable library.
3. Payload and Template generation (Automated). SerialDetec-
tor automatically generates payloads and templates based on
described knowledge base rules.
4. Call Graph Analysis (Automated). We use the templates
as input for Call Graph Analysis to detect potentially
vulnerable templates in a target application. SerialDetector
generates the Call Graph from the application entry points
to the vulnerable calls described in the templates.
5. Template validation (Automated). SerialDetector automati-
cally generates and run tests for templates. It validates that
a given payload can exploit an entry point in the templates.
It also validates Call Graph Analysis step using template
description as a source for compiling the .NET assembly
with vulnerable code and it runs the analysis against this
sample. All information required for testing is extracted
from the knowledge base.
6. Exploit Generation (Manual). SerialDetector relies on the
human-in-the-loop model for exploit generation. It provides
an automatically generated call graph targeting a vulnerable
template and an input payload that exploits the template. A
security analyst explores the entry points of the call graph
subject to attacker-controlled data, and exploits them using
the original payload. The analyst may need to combine OIVs
with other vulnerabilities (e.g., XSS - see Section VII-C)
to execute a malicious payload for a target entry point.
If an exploit fails, the analyst investigates the root cause
using other tools (e.g., a debugger) and modiﬁes the payload
according to application-speciﬁc requirements.
B. Challenges and Limitations
Virtual method calls. Static analysis for large code is very
challenging. We ﬁnd that modularity and ﬂow insensitivity are
essential for analyzing millions of LOC. One of the challenges
we faced was the analysis of virtual method calls. When per-
forming a call graph analysis, we assume that a virtual method
call may transfer control to a method of any instantiated type
that implements this virtual method. For a modular data ﬂow
analysis, this means that we must analyze all implementations
11
We implement a lightweight form of context-sensitive
analysis. The analyzer collects types of all created objects in a
global context and then resolves the virtual method calls only
for the implementations of the collected types. Because we use
the modular approach we need to track summaries that have
virtual calls. When a new type is instantiated, we invalidate
the summaries that have the virtual calls that may be resolved
to methods of the new type.
Some virtual methods of .NET Framework have hundreds
of implementations. Thereby, the analysis of all implementa-
tions is a very expensive operation that often does not give us
beneﬁts. We implement several optimizations for virtual calls.
Whenever possible, the analyzer infers the type of virtual calls
in the intra-procedural analysis. Thereby, we can reduce the
number of implementations for data ﬂow analysis. Otherwise,
we limit a count of implementations of virtual methods calls
for data ﬂow analysis and track all cases where the analyzer
skips the implementations. We then perform a manual analysis
of such cases and pick the ones of interest for the next run of
the analysis.
Recursion. Another challenge is the modular analysis of
recursion calls. The analysis must ignore caching summaries
of intermediate methods in a chain of recursive methods.
The reason for this is that the summaries of intermediate
methods do not contain full data-ﬂow information until we
complete the analysis of the ﬁrst recursive method. However,
a program may have many calls of the same intermediate
method, hence we must reanalyze such method, although we
get the same incomplete summary. We use temporary caches
for the summaries of intermediate recursive methods to analyze
such methods only once within a recursion call. We then
invalidate the temporary cache when the analysis of the ﬁrst
recursive method is completed.
Static ﬁelds. The CLI speciﬁcation allows types to declare
locations that are associated with those types. Such locations
correspond to static ﬁelds of the type, hence any method has
access to the static ﬁelds and can change their value. While our
abstract semantics does not address static ﬁeld, SerialDetector
does. We enrich the summaries with an additional root variable
storing the names of types with static ﬁelds. Thus, we can
access any location of the static ﬁeld by using such variable
and the full access path. Then, we merge such root variable
as we do with other arguments of the method when applying
a summary to the calling method’s context.
Arrays. The CLI speciﬁcation deﬁnes a special type for
in CIL (newarr, stelem,
arrays, providing direct support
ldelem, and ldelema). Array instructions may perform integer
arithmetics when accessing an array element by taking its array
index from the evaluation stack. We do not support integer
arithmetics for primitive types in the current version of the
analyzer. Thereby, we overapproximate the array semantics
by assuming that all elements of an array point to the single
abstract location containing all possible values.
Unsupported instructions. The CLI speciﬁcation supports
method pointers and delegates [2]. A method pointer is a type
for variables that store the address of the entry point to a
method. A method can be called by using a method pointer
with the calli instruction. Delegates are the object-oriented
equivalent of function pointers. Unlike function pointers, dele-
gates are object-oriented, type-safe, and secure. Each delegate
type provides a method named Invoke with appropriate pa-
rameters, and each instance of a delegate forwards calls to its
Invoke method to one or more static or instance methods on
particular objects. SerialDetector does not track values for the
delegates and the method pointers, however it issues a warning
whenever such features are used.
Both CLI and the .NET Framework support reﬂection.
Reﬂection provides the ability to examine the structure of
types, create instances of types, and invoke methods on types,
all based on a description of the type. The current version
of the analyzer does not reconstruct the call graph based on
information of method invocations via the reﬂection.
VI. EVALUATION
This section presents our experiments to validate the efﬁ-
ciency and effectiveness of SerialDetector. We leverage known
vulnerabilities in the .NET Framework and third-party libraries
as ground truth for checking the soundness and permissiveness
of the detection phase, as well as for evaluating the scalability
of analysis on a large codebase. To evaluate the exploitation
phase, we perform an in-breadth study of deserialization vul-
nerabilities on real-world applications over the past two years,
and report of the effort to exploit these vulnerabilities with
SerialDetector. We perform the experiments on an Intel Core