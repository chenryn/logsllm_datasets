        Subject Public Key Info:    
            Public Key Algorithm: rsaEncryption    
....    
```    
盖章后的证书client.crt发给server e(客户端服务器)    
```    
client.crt和client.key 都放到客户端home/.postgresql目录中  , 设置为600权限    
```    
```    
[root@iZbp1bc0dctm6mkipmqz9eZ ~]# cp client.crt  client.key /var/lib/pgsql/.postgresql/    
[root@iZbp1bc0dctm6mkipmqz9eZ ~]# chown postgres:postgres /var/lib/pgsql/.postgresql/*    
[root@iZbp1bc0dctm6mkipmqz9eZ ~]# chmod 600 /var/lib/pgsql/.postgresql/*    
```    
## 这样就够了吗? 还不够, 有证书, 对方怎么校验证书真伪呢? 还需要把办证机构的公钥分发下去, 让他们可以辨别真伪.      
### server d, 数据库服务器    
需要校验客户端证书真伪, 所以需要给客户端颁发证书的机构的公钥    
```server a : certs/ca1.crt``` 内容写入 ```server d: $PGDATA/ca1.crt```     
```    
ll -rth    
total 140K    
drwx------ 2 postgres postgres 4.0K Jun 19 15:19 pg_twophase    
drwx------ 2 postgres postgres 4.0K Jun 19 15:19 pg_tblspc    
drwx------ 2 postgres postgres 4.0K Jun 19 15:19 pg_snapshots    
drwx------ 2 postgres postgres 4.0K Jun 19 15:19 pg_serial    
drwx------ 2 postgres postgres 4.0K Jun 19 15:19 pg_replslot    
drwx------ 4 postgres postgres 4.0K Jun 19 15:19 pg_multixact    
drwx------ 2 postgres postgres 4.0K Jun 19 15:19 pg_dynshmem    
drwx------ 2 postgres postgres 4.0K Jun 19 15:19 pg_commit_ts    
-rw------- 1 postgres postgres    3 Jun 19 15:19 PG_VERSION    
-rw------- 1 postgres postgres   88 Jun 19 15:19 postgresql.auto.conf    
-rw------- 1 postgres postgres 1.6K Jun 19 15:19 pg_ident.conf    
-rw------- 1 postgres postgres 4.5K Jun 19 15:19 pg_hba.conf    
drwx------ 2 postgres postgres 4.0K Jun 19 15:19 pg_xact    
drwx------ 3 postgres postgres 4.0K Jun 19 15:19 pg_wal    
drwx------ 2 postgres postgres 4.0K Jun 19 15:19 pg_subtrans    
drwx------ 2 postgres postgres 4.0K Jun 19 15:19 global    
drwx------ 5 postgres postgres 4.0K Jun 19 15:19 base    
drwx------ 2 postgres postgres 4.0K Jun 19 15:21 pg_notify    
-rw------- 1 postgres postgres   27 Jun 19 15:21 postmaster.opts    
drwx------ 2 postgres postgres 4.0K Jun 19 15:21 log    
-rw------- 1 postgres postgres   30 Jun 19 15:21 current_logfiles    
-rw------- 1 postgres postgres  27K Jun 19 15:21 postgresql.conf    
drwx------ 4 postgres postgres 4.0K Jun 19 15:21 pg_logical    
drwx------ 2 postgres postgres 4.0K Jun 19 15:21 pg_stat_tmp    
drwx------ 2 postgres postgres 4.0K Jun 19 15:21 pg_stat    
-rw------- 1 postgres postgres 1.7K Jun 19 17:14 server.key    
-rw------- 1 postgres postgres 1.1K Jun 19 17:14 server.crt    
-rw------- 1 postgres postgres 1.1K Jun 19 17:15 ca1.crt    
```    
配置数据库参数, 重启数据库.     
```    
postgresql.conf    
# - SSL -    
ssl = on    
ssl_ca_file = 'ca1.crt'    
ssl_cert_file = 'server.crt'    
ssl_crl_file = ''    
ssl_key_file = 'server.key'    
```    
```    
postgres=# create user digoal login superuser encrypted password 'digoal123';    
CREATE ROLE    
postgres=# create user dbuser1 login superuser encrypted password 'digoal123';    
CREATE ROLE    
```    
### server e, 客户端    
需要校验数据库服务器证书真伪, 所以需要给数据库服务器颁发证书的机构的公钥    
```    
server b :  certs/ca2.crt       第一    
server c :  intermediate.crt    第二    
```    
ca2.crt 和 intermediate.crt 内容 cat 后 写入 ```server e: ~/.postgresql/ca2_int.crt```    
```    
chmod 600 ~/.postgresql/ca2_int.crt     
```    
## 连接测试1:    
密码认证    
1、校验数据库是不是伪造的(例如攻击者利用dns劫持, 伪造数据库), 即检查数据库证书真伪.      
```    
vi pg_hba.conf    
hostnossl all all 0.0.0.0/0 reject    
hostssl all all 0.0.0.0/0 md5    
pg_ctl reload    
```    
```    
postgres@iZbp1bc0dctm6mkipmqz9eZ-> export PGSSLMODE="verify-ca"    
postgres@iZbp1bc0dctm6mkipmqz9eZ-> export PGSSLROOTCERT="/var/lib/pgsql/.postgresql/ca2_int.crt"    
postgres@iZbp1bc0dctm6mkipmqz9eZ-> psql -h  192.168.0.245 -p 1921 -U digoal postgres    
Password for user digoal:     
psql (12.3)    
SSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)    
Type "help" for help.    
postgres=# \q    
```    
2、校验数据库证书的cn是否与连接的目标一致(cn == psql -h hostname).       
```    
postgres@iZbp1bc0dctm6mkipmqz9eZ-> export PGSSLMODE="verify-full"    
postgres@iZbp1bc0dctm6mkipmqz9eZ-> export PGSSLROOTCERT="/var/lib/pgsql/.postgresql/ca2_int.crt"    
postgres@iZbp1bc0dctm6mkipmqz9eZ-> psql -h  192.168.0.245 -p 1921 -U digoal postgres    
psql: error: could not connect to server: server certificate for "dbhost.domain.name.or.ipaddress" does not match host name "192.168.0.245"    
```    
因为数据库证书里面的CN=dbhost.domain.name.or.ipaddress, 而客户连接的是192.168.0.245.    
如何解决?    
方法1: 用户有自己的dns, 可以配置dns解析dbhost.domain.name.or.ipaddress到192.168.0.245    
方法2: 配置客户端的hosts    
```    
# vi /etc/hosts    
::1     localhost       localhost.localdomain   localhost6      localhost6.localdomain6    
127.0.0.1       localhost       localhost.localdomain   localhost4      localhost4.localdomain4    
192.168.0.244   iZbp1bc0dctm6mkipmqz9eZ iZbp1bc0dctm6mkipmqz9eZ    
192.168.0.245 dbhost.domain.name.or.ipaddress    
```    
如下:     
```    
postgres@iZbp1bc0dctm6mkipmqz9eZ-> psql -h  dbhost.domain.name.or.ipaddress -p 1921 -U digoal postgres    
Password for user digoal:     
psql (12.3)    
SSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)    
Type "help" for help.    
postgres=#     
```    
## 连接测试1.2  
如果想在server.crt中加入多个Hostname, 需要采用如下方法.   
参考:   
https://my.oschina.net/sskxyz/blog/1554093  
https://blog.csdn.net/u013066244/article/details/78725842  
[《PostgreSQL openssl - multi cn 给SSL证书绑定多个CN hostname - 公网 HOSTNAME + 私网 HSOTNAME》](../202103/20210319_02.md)    
下面是苹果机器的测试, 如果是centos请拷贝```/etc/pki/tls/openssl.cnf```  
```  
cd ~  
cp /System/Library/OpenSSL/openssl.cnf ./  
vi ./openssl.cnf  
# 此文件的格式是类似 ini 的配置文件格式，找到 [ req ] 段落，加上下面的配置：  
req_extensions = v3_req  
# 这段配置表示在生成 CSR 文件时读取名叫 v3_req 的段落的配置信息，  
# 因此我们再在此配置文件中加入一段名为 v3_req 的配置：  
[ v3_req ]  
# Extensions to add to a certificate request  
basicConstraints = CA:FALSE  
keyUsage = nonRepudiation, digitalSignature, keyEncipherment  
subjectAltName = @alt_names  
# 这段配置中最重要的是在最后导入名为 alt_names 的配置段，  
# 因此我们还需要添加一个名为 [ alt_names ] 的配置段：  
[ alt_names ]  
DNS.1 = pgm-bp116zpg87qr8rx0.pg.rds.aliyuncs.com  
DNS.2 = pgm-bp116zpg87qr8rx0no.pg.rds.aliyuncs.com  
```  
接着使用这个临时配置生成证书：  
```  
openssl req -new -nodes -text -out server.csr -keyout server.key -subj "/C=CN" -config ./openssl.cnf  
# 一路全部使用默认, 特别注意: CN 一定要设置为空.     
```  
查看证书请求文件的内容, 已经包含了2个hostname：  
```  
openssl req -text -noout -in server.csr  
        Requested Extensions:  
            X509v3 Basic Constraints:   
                CA:FALSE  
            X509v3 Key Usage:   
                Digital Signature, Non Repudiation, Key Encipherment  
            X509v3 Subject Alternative Name:   
                DNS:pgm-bp116zpg87qr8rx0.pg.rds.aliyuncs.com, DNS:pgm-bp116zpg87qr8rx0no.pg.rds.aliyuncs.com  
```  
接着使用这个临时配置以及根服务器证书生成签名:   
```  
openssl x509 -req -in server.csr -text -days 365  -CA certs/ca2.crt -CAkey keys/ca2.key -CAcreateserial  -out server.crt -extensions v3_req -extfile ./openssl.cnf  
```  
然后就可以把server.key, server.crt拷贝到数据库服务器使用了.    
## 连接测试2:    
密码认证    
1、校验客户端是不是伪造的, 客户的证书真伪.      
数据库:     
```    
vi pg_hba.conf    