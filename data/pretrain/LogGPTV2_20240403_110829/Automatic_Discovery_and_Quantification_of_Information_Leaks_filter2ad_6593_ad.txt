Proposition 3,
this gives rise to push-button technology
for computing a variety of information-theoretic measures
beyond those oﬀered by existing approaches.
4.4. Scope of our method
We brieﬂy discuss the scope of our method. In particular,
we identify the languages for which D can be easily
implemented, discuss the impact of nontermination, and
present initial ideas for scaling-up.
Soundness and language features. In principle, D
can be implemented for any programming language for
which model-checkers are available, including those with
arrays [22] and heap structures [8]. When implementing
D using a model-checker that is sound but not complete,
spurious leaks may be detected. In this case, the equivalence
relation computed by D will be ﬁner than ≈E, which
corresponds to an over-approximation of the maximal infor-
mation leakage, and can be used for certifying the security
of a program.
Similarly, Q can in principle be implemented for
any logical theory for which the number of models of an
assertion can be counted, however, we are not aware of
practical solutions for this task that go beyond Boolean
propositional logic and Presburger Arithmetic.
In Section 5 we present an implementation of DQ
for a subset of C with expressions in linear arithmetic.
(Non)termination of DQ. The algorithm D is
initialized with the coarsest equivalence relation on the set of
secret inputs, which claims absence of leaks in the analyzed
program. This equivalence relation is reﬁned during the
execution of D. A longer execution time of D cor-
responds to a ﬁner equivalence relation, which corresponds
to more information leakage. D can be interrupted at
any time, and will return an equivalence relation that is
coarser than ≈E, i.e., an under-approximation of the maximal
information that
the analyzed program can leak. If this
under-approximation already violates a given security policy,
the insecurity of the analyzed program is certiﬁed.
For Q, a longer execution time corresponds to a larger
number of equivalence classes, which corresponds to more
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:15:53 UTC from IEEE Xplore.  Restrictions apply. 
information leakage. Q can be interrupted at any time.
In the worst-case, all equivalence classes that have not been
determined at this point are singleton sets. Together with
the sizes of the equivalence classes that have already been
enumerated and the size of the set of secret inputs, this
can be used for computing an over-approximation of the
maximal information that is leaked. In this way, the output of
an interrupted execution of Q can be used for certifying
the security of the analyzed program.
Scaling up. The computation of DQ relies on the
enumeration of the leaks of a program. The number of leaks
can be quadratic in the number of program paths. Hence,
when applied in a vanilla fashion, our method works well on
programs with few paths, e.g, programs without branching
statements inside of loops. For programs with branching
statements inside of loops, the number of leaks may be large.
For example, in the electronic auction program given in
Section 2, the number of paths is exponential in the number
of bids n, which does not scale.
A number of speed-up techniques, such as predicate
abstraction [19] and widening [15], can be used to analyze
multiple program paths in Line 2 of D. Applying such
techniques will improve the eﬃciency of our method, how-
ever, these speed-up techniques may lead to incompleteness,
i.e., their application may report spurious leaks. In this case,
the equivalence relation computed by D will be ﬁner
than ≈E, which corresponds to an over-approximation of the
maximal information leakage.
Out method applies self-composition, which doubles the
program size. It is possible to avoid duplication of some
parts of the program by making related statements share the
same control-ﬂow constructions, as proposed in [38].
5. Implementing DQ
In this section, we outline the implementation of a push-
button tool for the quantitative information ﬂow analysis of
C programs, based on the algorithm DQ presented
in this paper. We show how all of the building blocks on
which DQ is based can be instantiated and combined.
In Section 6, we report on experimental results obtained by
using our tool to analyze a number of example programs.
5.1. Language
We use a subset of C as the programming language.
In particular, we allow programs to contain all control
ﬂow statements and assignments to scalar variables. As the
expression language, we use linear arithmetic, i.e. integer
variables with addition and comparison operators. We use
propositional logic with propositions in linear arithmetic to
represent the equivalence relations R and the set E.
As a convention, we assume that the high and low input
states of a program (i.e. Ihi and Ilo) are stored in variables
named h1, . . . , hn and l1, . . . , lm, respectively. We sometimes
use single input variables h and l to comprise all of the
high and low input to a program, respectively, and we write
P(h, l) to emphasize that variables h and l occur in P.
5.2. Implementing D
The building blocks for D are methods for checking
Conﬁne, for computing Reﬁne, and for detecting leaks. We
show how all three can be implemented using the software
model checker A and the Omega calculator, which is
a tool for manipulating formulas in linear arithmetic with
quantiﬁers.
cast
the
check
Implementing Conﬁne. We
for
ConﬁneP(R, E) as a reachability problem, which we
solve using the model checker A. As a preprocessing
step, we create a modiﬁed copy P of P, where we replace
every program variable x that occurs in P by a fresh variable
x. This ensures that P and P have disjoint variable sets.
The existence of an R-leak corresponds to the reachability
of the error state in the following program.
if (l = l ∧ l ∈ E ∧ (h, h) ∈ R)
P(h, l)
P(h, l)
if l (cid:44) l
error
return
We apply A to this reachability problem. If error is
reachable, A outputs a path to error. As the variable
sets of both copies of P are disjoint, the leak (π, η) can
be reconstructed from this path. This directly leads to an
implementation of LeakP(E, R). As we will explain below,
this direct computation of LeakP(E, R) can be avoided due
to extra information provided by A.
Implementing Reﬁne. A not only returns the path to
error, but also a formula in linear arithmetic that character-
izes all initial states from which the error state is reachable
along the counterexample path. This formula characterizes
sets of pairs ((h, l), (h, l)) of initial states and can thus be
interpreted as a binary relation R over I. We project out the
low variables from R, i.e. we deﬁne RE ⊆ Ihi × Ihi as
{(h, h) | ∃l ∈ E : ((h, l), (h, l)) ∈ R} .
RE ≡
RE characterizes all pairs of high inputs from which the
error state can be reached with an experiment from E. The
complement of RE characterizes all pairs of high initial states
from which the error state is not reachable along (π, η) with
an experiment from E, i.e., it corresponds to ReﬁneE(π, η):
ReﬁneE(π, η) ≡ Ihi × Ihi \ RE .
149
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:15:53 UTC from IEEE Xplore.  Restrictions apply. 
In our implementation, E is represented as an assertion in
linear arithmetic, and we perform the projection and set
diﬀerence using the Omega calculator.
5.3. Implementing Q
The building blocks for the algorithm Q presented
in Section 4.1 are operations on sets and relations, such
as ﬁnding models, determining equivalence classes, and
counting the number of elements (the function Count). First,
we show how to implement the relational operations using
the Omega calculator. Subsequently, we show how to count
the number of elements in a set using the Lattice Point
Enumeration Tool (LE).
Implementing the relational operations. The example
command of the Omega calculator implements the operation
of picking an element from Q, see line 4 in Figure 2.
The computation of an equivalence class in line 5 can be
implemented using relational composition:
[s]R ≡ {s} ◦ R = {t ∈ Ihi | (s, t) ∈ R} .
The loop body in Figure 2 (except for the call to Count
in line 5) thus maps to the following input of the Omega
calculator:
B:= S.R;
Q:= Q-B;
S:= example Q;
Here R and Q represent R and Q, respectively. S corresponds
to {si}, B corresponds to [si]R, and “.” denotes the relational
composition. The result of successively applying these op-
erations to Q = Ihi and the relation R given by D is the
set
Ihi/R = {B1, . . . , Bn}
of R-equivalence classes, each represented as a linear arith-
metic proposition in disjunctive normal form.
propositions ci ≡ (cid:80)n
Implementing Count. An R-equivalence class B is rep-
resented as a conjunction φ ≡ c1 ∧ ··· ∧ cm of atomic
j=1 ai jh j ≤ bi, with i ∈ {1, . . . , m} and
can be interpreted as a system of linear inequalities
A h ≤ b ,
where A = (ai j), h = (h1, . . . , hn), and b = (b1, . . . , bm). It is
not diﬃcult to see that the number of satisfying assignments
of φ (i.e., the size of B) corresponds to the number of integer
solutions to this system of inequalities. For counting the
number of solutions of two disjuncts φ = φ1∨φ2, we compute
Count(φ) ≡ Count(φ1) + Count(φ2) − Count(φ1 ∧ φ2) .
This easily generalizes to the DNF formulas output by the
Omega calculator.
150
For eﬃciency reasons, A assumes that program vari-
ables range over rational numbers. As a consequence, the
equivalence classes computed by the Omega calculator may
be of unbounded size. In practice, however, the values of
integers variables will be bounded by the range of their
respective types. To incorporate such bounds, we extend A
by additional constraints of the form
In h ≤ bu and − In h ≤ bl .
Here, In denotes the identity matrix of dimension n and bu
and bl are vectors of upper and lower bounds, respectively.
We note that such a bounding step does not compromise
the soundness of our approach, however it might sacriﬁce
completeness, e.g., if the input leading to a leak lies outside
of the bounds.
Applying LE to the following system of inequalities
 A
In−In
 h ≤
 b
bu
bl
yields the number of elements of the equivalence class B
represented by φ. For all of our examples, the running time
of LE was largely independent of the bounds bu and bl.
6. Experimental results
In this section, we report on experimental results obtained
by applying our technique to determine the information that
is revealed by a program. As examples, we analyze programs
for checking passwords, debiting from an electronic purse,
and computing sum queries.
6.1. Password checker
Consider a password checker that receives a secret pass-
word h and a candidate password l, and outputs whether the
candidate password was correct, i.e. whether l = h.
if (l==h)
l=1;
else
l=0;
A password check necessarily reveals partial information
about the password. We use our approach to characterize
this information for two diﬀerent experiments. As shown in
Section 5.2, the set of experiments E determines how the
low variables are eliminated from the equivalence relation
computed by A. In Section 5.2, this elimination is per-
formed in each reﬁnement step. For a uniform presentation
of both experiments, we postpone this elimination until after
the computation of the complete relation.
Then the relation R computed by A is
R ≡ (h = l ∧ l − h ≤ −1) ∨ (h = l ∧ l − h ≥ 1)
∨ (h = l ∧ h − l ≤ −1) ∨ (h = l ∧ l − h ≤ −1)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:15:53 UTC from IEEE Xplore.  Restrictions apply. 
We consider two experiments, where the ﬁrst corresponds to
a single password guess and the second corresponds to an
exhaustive search of the password space.
Single password guess. The experiment E = {x} corre-
sponds to the guess of a single password x. The relation
≈{x} captures the information that is leaked in this guess and
is obtained from R as described in Section 5.2. For x = 0,
the equivalence classes computed by Q are
B1 ≡ h = 0
B2 ≡ h ≤ −1 ∨ h ≥ 1 ,
which reﬂects that a correct guess reveals the password while
all incorrect (nonzero, in this case) passwords cannot be
distinguished. We obtain |B1| = 1 and |B2| = 4294967295 if
the passwords are nonnegative 32-bit integers. For uniformly
distributed passwords, the attacker’s uncertainty about the
password hence drops from 32 bits to
|Bi| log|Bi| = 31.999999992
2(cid:88)
1
232
i=1
after a single guess.
Exhaustive search. The experiment E = Ilo corresponds
to exhaustively running P on all password candidates. A
representation ≈E of the leaked information is obtained from
A’s output as described in Section 5.2. We obtain
≈Ilo≡ h = h ,
which is the identity relation on Ihi.
This result conﬁrms the fact that the attacker can deter-
mine every password by exhaustive search. His remaining
uncertainty about the password will then be 0. Note that
we derived this interpretation from the output of D
(i.e., without applying Q). Q enumerates all ≈Ilo-
equivalence classes, which is infeasible for large password
spaces. The overall running time of the analysis was less