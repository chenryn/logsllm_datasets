










*
















Lib.

















Redis
Temp.
*

O














: System call is removed.
O: Can be mitigated by applying conﬁguration-driven debloating [34] (details in Section 6.2).
* : Can be mitigated by applying API specialization (details in Section 6.3).
: System call is not removed.
library debloating. Although in most cases the reduction is not
signiﬁcant (in the best case for Bind, the number of system
calls drops from 127 to 85, while in the worst case for Nginx,
only 7 system calls are removed), a more crucial question is
whether the removed system calls are “critical” or not, i.e.,
whether they will hinder the execution of exploit code that
relies on them.
As a ﬁrst step towards answering this question, Table 4
shows which critical system calls are ﬁltered in each applica-
tion after applying library debloating and temporal specializa-
tion. We chose a set of 17 security-critical system calls which
are used as part of shellcode and ROP payloads (more details
on this data set are provided in Section 6.3). As shown in
Table 4, temporal specialization removes a total of 53 critical
system calls across all applications, compared to just 35 for
library debloating alone—an overall increase by 51%.
We group these system calls according to their functionality
into three categories to analyze further the impact of tempo-
ral specialization. Command Execution includes system calls
used to execute arbitrary code. Permission includes system
calls which can be used to modify user, ﬁle, or memory per-
missions. Networking contains system calls mostly used in
establishing network connections.
Command Execution The system calls execveat, fork
and ptrace can be ﬁltered across all applications by both tech-
niques. No application uses execveat or ptrace. In place
of the former most use execve, while the use of the latter is
rare. The reason no application uses the fork system call is
that Libc’s fork function actually uses the clone system call.
The widely used by exploit code execve system call is also
used in many applications to spawn child processes, so it can
not be removed by library debloating.
After entering the serving phase, however, most servers
do not need to invoke execve anymore, and thus temporal
specialization can remove it. This has signiﬁcant security ben-
eﬁts, as also discussed in the next section. For Lighttpd and
Redis, we manually veriﬁed that execve was invoked only if
the application was launched with a speciﬁc run-time conﬁg-
uration option that is disabled by default. Therefore, the prior
application of some form of conﬁguration-driven debloat-
ing [34] would allow temporal specialization to successfully
remove execve from all six applications.
Permissions Four of the permission system calls (chmod,
setgid, setuid, and setreuid) can be ﬁltered in all appli-
cations, except Nginx. As allocating memory and setting its
permissions is a crucial operation for most applications, the
mprotect system call cannot be ﬁltered under any circum-
stances. As we discuss in Section 6.3, we could still enforce a
more restrictive invocation policy for this system call by limit-
ing the allowable permissions to be applied on memory pages,
as after the initialization phase it is unlikely that executable
memory will need to be allocated.
1758    29th USENIX Security Symposium
USENIX Association
Table 5: Equivalent system calls.
System call
execve
accept
dup
eventfd
chmod
recv
send
open
select
Equivalent System call(s)
execveat
accept4
dup2,dup3
eventfd2
fchmodat
recvfrom, read
sendto, write
openat
pselect6, epoll_wait, epoll_wait_old,
poll, ppoll, epoll_pwait
Networking Neither approach can ﬁlter system calls used
for creating network connections (socket, connect). This is
because server applications may establish connections with
other backend services, such as databases.
Although we expected listen and bind to be removed by
temporal specialization, as these operations are typically part
of the initialization phase, they are only removed in Apache
Httpd, Lighttpd and Redis (only listen). We suspect that
the reason they remain in the rest is related to the remaining
overapproximation in the call graph, and we plan to further
analyze these cases as part of our future work.
6.3 Exploit Code Mitigation
To evaluate the security beneﬁts of temporal specialization, we
collected a large and diverse set of exploit payloads. This set
consists of 53 shellcodes from Metasploit [5], 514 shellcodes
from Shell-storm [9], and 17 ROP payloads (from PoCs and
in-the-wild exploits). Shellcodes are generic and can work
against every application. Although the ROP payload of a
given proof-of-concept exploit is meant to be used against a
speciﬁc application, since all these payloads use one or more
system calls to interact with the operating system, their ﬁnal
intent can be generalized irrespective of the target application.
Thus, for ROP payloads, we make the conservative assump-
tion that each can be used against any of our test applications.
6.3.1 Shellcode Analysis
For Metasploit, we use the msfvenom utility to generate a
binary for each of the 53 available Linux payloads. We then
disassemble each generated ﬁle to extract the system calls
used. Similarly, we extract the system calls used by the 514
payloads collected from Shell-storm. Finally, we compare
the set of system calls used in each payload with the set
of system calls available in each application after apply-
ing library specialization and temporal specialization, to get
the number of shellcodes “broken” in each case. We con-
sider a payload broken if at least one of the system calls
it relies on is removed. For instance, the bind_tcp shell-
code uses six system calls: setsockopt, socket, bind,
mprotect, accept and listen. Temporal specialization
blocks bind in Lighttpd and Apache Httpd, and the attacker
can no longer successfully run this shellcode.
To account for potential evasion attempts by swapping
blocked system calls with equivalent ones, we also exhaus-
tively generate all possible variants of each shellcode using
other system call combinations that provide the same function-
ality. For instance, replacing accept with accept4 maintains
the same functionality, but would allow an attacker to bypass
a ﬁlter that restricts only one of them. Starting from our initial
set of 567 shellcodes, we generate 1726 variants according to
the equivalent system calls listed in Table 5.
We have summarized the results regarding the number of
blocked shellcodes for each application by each specialization
technique in Table 6. As shown in the row titled “All Shell-
codes,” for each of the six tested applications, temporal spe-
cialization successfully breaks a higher number of shellcode
variants compared to library debloating. The improvement
is signiﬁcant in Lighttpd (1248 with temporal vs. 919 with
library specialization), Apache Httpd (1466 vs. 1097), Nginx
(1249 vs. 923), and Redis (1307 vs. 1165), while it is marginal
for Memcached (1319 vs. 1258) and Bind (1341 vs. 1258).
Payloads can be categorized according to the task they per-
form. The broad categories include i) payloads that open a
port and wait for the attacker to connect and launch a shell,
ii) payloads that connect back and launch a reverse shell,
iii) payloads that execute arbitrary commands, and iv) pay-
loads that perform system operations, e.g., access a ﬁle or
add a user. The ﬁrst four rows in Table 6 provide the number
of broken payloads in each of these categories. We see that
90% of the payloads that open a port are broken with tem-
poral specialization. For Apache Httpd, although 88% of the
“connect” and 91% of the “execute” shellcodes are broken
with our approach, none of the two specialization schemes
perform well for payloads that perform ﬁle operations. This
is because ﬁle system operations are required by applications
during both the initialization and the serving phases.
Achieving arbitrary remote code execution provides an at-
tacker the ultimate control over a target system. Removing the
ability to execute commands thus has a more signiﬁcant im-
pact on restricting an attacker’s actions compared to blocking
payloads of other categories, e.g. payloads that open a port.
The execve system call is the most crucial for executing arbi-
trary commands, and as shown in Table 4, it can be removed
in Apache Httpd, Nginx, Memcached and Bind by applying
temporal specialization. This can also be seen in the row titled
“Execute Command” in Table 6, where more than 80% of the
shellcodes that aim to achieve arbitrary command execution
are broken in Nginx, Apache Httpd, Bind, and Memcached.
In these cases, the attacker is heavily restricted, and even if
payloads in other categories (e.g., network connection estab-
lishment) are successful, the capability of executing arbitrary
commands is still restricted.
USENIX Association
29th USENIX Security Symposium    1759
Table 6: Number (and percentage) of payloads broken by library (“Lib.”) and temporal (“Temp.”) specialization for each category.
Payload Category Count
Open Port
Create Connection
Execute Command
System Operations
All Shellcodes
Change Permission
Execute Command
All ROP Payloads
560
366
408
392
1726
3
14
17
Nginx
Apache Httpd
Lighttpd
Bind
Memcached
Redis
Lib.
Temp.
Lib.
Temp.
Lib.
Temp.
Lib.
Temp.
Lib.
Temp.
Lib.
Temp.
471 (84%)
334 (60%)
313 (86%)
245 (67%)
340 (83%)
223 (54%)
121 (30%)
125 (32%)
923 (53%) 1249 (72%)
0 ( 0%)
7 (50%)
7 (41%)
0%)
0 (
14 (100%)
14 ( 82%)
546 (98%)
199 (71%)
321 (87%)
268 (73%)
370 (91%)
247 (60%)
183 (46%)
229 (58%)
1097(63%) 1466 (85%)
0 ( 0%)
7 (50%)
7 (41%)
0%)
0 (
14 (100%)
14 ( 82%)
525 (94%)
330 (59%)
271 (74%)
263 (71%)
273 (67%)
223 (54%)
103 (26%)
179 (46%)
919 (53%) 1248 (72%)
0 ( 0%)
7(50%)
7 (41%)
0 ( 0%)
7 (50%)
7 (41%)
505 (90%)
500 (89%)
314 (85%)
313 (85%)
358 (88%)
338 (83%)
164 (42%)
107 (27%)
1258 (72%) 1341 (78%)
479 (85%)
471 (84%)
314 (85%)
289 (79%)
362 (89%)
352 (86%)
146 (37%)
164 (42%)
1258 (72%) 1319 (77%)
0 ( 0%)
14 (100%)
0 ( 0%)
14 (100%)
0%)
0 (
14 (100%)
0%)
0 (
14 (100%)
14 ( 82%)
14 ( 82%)
14 ( 82%)
14 ( 82%)
527 (94%)
439 (78%)
293 (80%)
280 (76%)
274 (67%)
259 (63%)
187 (47%)
213 (54%)
1165(68%) 1307 (76%)
0 ( 0%)
7 (50%)
7 (41%)
0 ( 0%)
7 (50%)
7 ( 41%)
6.3.2 ROP Payload Analysis
We collected a set of 17 publicly available ROP payload sam-
ples for Linux (details for each one are provided in Table 8
in the appendix). We follow the same strategy as with the
shellcodes and make the generic assumption that each of the
payloads can be used against any of our tested applications.
From a system call perspective, ROP payloads are much
simpler and usually aim towards either allocating executable
memory for enabling the execution of second-stage shellcode,
or invoking execve or similar system calls for direct com-
mand execution. ROP payloads can thus be broadly catego-