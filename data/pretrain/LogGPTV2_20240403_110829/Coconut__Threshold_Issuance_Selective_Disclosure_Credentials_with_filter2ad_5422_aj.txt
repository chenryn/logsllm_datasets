O P.Sign(params, sk, m) → (σ): Parse sk = (x, y). Pick
1. Output σ = (h, s) =
a random r ∈ Fp and set h = gr
(h, hx+y·m).
O P.Verify(params, vk, m, σ) → (true/f alse): Parse
vk = (g2, α, β) and σ = (h, s). Output true if h (cid:54)= 1 and
e(h, αβm) = e(s, g2); otherwise output f alse.
The signature σ = (h, s) is randomizable by choosing a
random r(cid:48)
). The above
scheme can be modiﬁed to obtain credentials on a private
attribute: to run IssueCred the user ﬁrst picks a random
∈ Fp and computing σ(cid:48) = (hr
, sr
(cid:48)
(cid:48)
value acts as the credential.
1Y m to the message
t ∈ Fp, computes the commitment cp = gt
m, where Y = gy
1; and sends it to a single authority along with
a zero-knowledge proof of the opening of the commitment.
The authority veriﬁes the proof, picks a random u ∈ Fp, and
1 . The user
returns (cid:101)σ = (h,(cid:101)s) = (gu, (Xcp)u) where X = gx
unblinds the signature by computing σ = (h,(cid:101)s(h)−t), and this
This scheme provides blindness, unlinkability, efﬁciency
and short credentials; but it does not support threshold issuance
and therefore does not achieve our design goals. This limitation
comes from the P.Sign algorithm—the issuing authority com-
putes the credentials using a private and self-generated random
number r which prevents the scheme from being efﬁciently
distributed to a multi-authority setting1. To overcome that
limitation, we take advantage of a concept introduced by BLS
signatures [10]; exploiting a hash function H : Fp → G1
to compute the group element h = H(m). The next section
describes how Coconut incorporates these concepts to achieve