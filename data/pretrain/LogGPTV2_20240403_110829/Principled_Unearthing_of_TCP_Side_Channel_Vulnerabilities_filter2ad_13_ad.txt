being used in the target branch (e.g., limit+10), we choose sym-
bolic execution. This approach provides us with a symbolic formula
expressing the relationship between the source variable(s) and the
value used in the target branch. Therefore, given an expected value
to be used in the target branch, we can consult a SMT solver to
automatically determine the corresponding value(s) to which the
source variable(s) need to be set during initialization. Moreover,
symbolic execution also allows us to collect all path constraints
prior to reaching the target branch. By adding these constraints
while querying for suitable initialization value(s), we can ensure
that the new value(s) will not break path constraints leading to the
target branch.
In brief, SCENT uses concolic execution to determine (a) which
variable(s) should be modied during initialization and (b) what
is the value(s) to which it must be initialized. Because we perform
concolic execution over a single trace (only to collect the symbolic
formula relating to a branch predicate), we point out that we do
not have a problem of path explosion. A sketch of the process is as
follows:
(1) SCENT conservatively symbolizes all variables that are related to
the system’s internal states. (i.e., all the global and heap objects
found in §5).
(2) SCENT applies concolic execution wherein one path recorded
during model checking is followed to reach a target branch
constraint.
(3) SCENT checks if the operand with a xed value is symbolic
(i.e., derived from internal states). If not, we directly patch the
constant and exit; otherwise we move on to the next step.
(4) SCENT queries a SMT solver for a feasible assignment to the
internal states such that (a) the path constraints are satised
and (b) the operand used in the branch will fall into the range
of the variable operand.
(5) If the solver can return an assignment, SCENT modies the model
initialization procedure to assign the values returned from the
SMT solver to the related internal states; otherwise it tries to
nd another recorded path that can lead to the target branch
and goes back to Step (2).
Table 3: Side-channel vulnerabilities discovered by SCENT with dierent initial secret settings.
OS
Kernel
Index-
ClassID
Key Constraint that Causes Violations
Dierent Outputs
FreeBSD
13.0
Linux
4.8.0
1-A
2-A
3-A
4-A
5-B
6-C
7-C
8-C
9-B
10-B
11-B
12-D
13-D
14-D
15-D
V_icmp_rates[3].cr.cr_rate sch_length >= V_tcp_syncache.bucket_limit
tcp_memory_allocated = sk->sk_max_ack_backlog
inet_csk_reqsk_queue_len(sk) >= sk->sk_max_ack_backlog
sk->sk_ack_backlog >sk->sk_max_ack_backlog
challenge_count <sysctl_tcp_challenge_ack_limit
+: correct port number required to trigger the violation
*: correct port number and SEQ number (in-window) required to trigger the violation
#: correct port number, SEQ number (in-window) and correct ACK number required to trigger the violation
Immediate ACK vs Delayed ACK
ACK pkt with dierent window size
RST pkt vs NULL
RST pkt vs NULL
RST pkt vs NULL
RST pkt vs NULL
NULL vs RST pkt
ACK pkt vs NULL
SYN-ACK pkt vs NULL
SYN-ACK pkt vs NULL
SYN-ACK pkt vs NULL
ACK pkt vs NULL
ACK pkt vs NULL
ACK pkt vs NULL
ACK pkt vs NULL
6 Secret Settings in Table 1
SYN_Recv
Established
SEQ ACK
port
+
#
+
+
#
#
#
+
#
#
+
*
#
#
#
SEQ ACK port
+
#
+
+
+
#
#
#
+
#
#
#
#
#
#
#
#
#
#
#
#
*
#
#
#
#
#
*
#
#
#
#
#
#
#
+
*
#
Transfor
-mation
Required
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
New
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
N
N
N
8 EVALUATIONS
In this section, we evalute SCENT on two OS implementations, viz.,
Linux 4.8.0 and FreeBSD 13.0, with the goal of answering the fol-
lowing questions:
• Eectiveness on vulnerability nding: Can SCENT nd real
TCP side-channel vulnerabilities from these two kernels? (§8.2)
• Eectiveness of automated downscaling: Does automated
downscaling allow SCENT to cover more code and more impor-
tantly, nd more vulnerabilities? (§8.3)
• Eectiveness of model checking: Does bounded model check-
ing oer better scalability than bounded testing? (§8.4)
8.1 Evaluation setup
Implementation details. Our implementation of SCENT is built
on a set of open-sourced program analysis platforms and tools.
The static data-ow analysis used by Model Generator is built
upon kernel-analyzer [46]. The concolic execution engine used
by Model Transformer is built on top of KLEE [6] with the Z3
SMT solver [47]. The instrumentation is built on top of the LLVM
compiler infrastructure [30]. The bounded model checking is done
using the SPIN model checker [23].
Stub function abstraction and crafting a standalone system.
As discussed in §5, we abstract a few functions to facilitate scala-
bility and make the code amenable to model checking. The details
are listed below. It initially takes us longer with Linux as we were
nalizing the methodology. However, it took us only 2.5 weeks to
build the model for FreeBSD afterwards.
• Mutex and Lock related functions: Use empty function (During
model checking, TCP is executed as a single thread process).
• Memory allocation: Pre-allocate the memory and return the cor-
responding memory object (because the model checker cannot
track dynamic memory).
• Memory release: Use empty function (because we preallocated
the memory).
• Callback functions: Use empty functions (as limited by the state
explosion issue, we only consider one interleaving of concurrent
events; therefore, we can focus on TCP mechanisms).
• Out of scope functions (IP layer or User space): Use empty function
body or craft abstractions manually, to send packets with TCP
layer information.
• Functions that include assembly code: Either replace with glibc
functions or abstract them based on their logic (examples in-
clude printk or __memcpy). Since we need to keep the model
deterministic, we replace prandom_u32 function with a xed but
arbitrarily chosen value.
• Timer: Return the xed value captured from a snapshot based on
a real connection (e.g., for tcp_current_mss). This helps elimi-
nate the non-determinism in the model as well as the otherwise
intractable state space (time as a new dimension) that we are not
interested in.
In general, manually abstracting functions results in a risk of miss-
ing vulnerabilities (lowered true positives); however, this step is
necessary to ensure the feasibility of model checking. If these man-
ual abstractions cause false positives, they can be easily veried (in
our experiments, we did not encounter such cases).
Testbed. We evaluated SCENT on two servers, each with a 2.6GHz
(8-core) CPU and 128G memory. The secrets of interest are tabulated
in Table 1. We consider the following scenarios: (1) the attacker
has established its own TCP connection with the server; (2) the
attacker sends packets to an open port at the server; and (3) the
attacker sends packets to a closed port at the client. We assume
that the attacker can either send packets to the client or the server,
but not send to both5. We consider 6 dierent settings with regards
to the victim’s secret attributes and thus, with the three attacker
scenarios, we run 36 experiments for each model. For the Linux
model, we set 2 days as a hard limit for each experiment (given that
it is more complex); while for the FreeBSD model, we set 1 day as a
hard limit. We point out that these limits were imposed based on
5The latter cases can be handled by SCENT but we leave such evaluations for future
work.
the computation capacity available, and to obtain results within a
reasonable time frame. Based on the counter examples found by
SCENT, we set up two virtual hosts (Debian OS with Linux kernel
4.8.0 and FreeBSD OS with kernel 13.0) to validate their veracity in
real settings.
8.2 Discovered side-channels
Table 3 shows the violations found during our experiment. SCENT
discovered a total of 53 distinct violations. Our manual verication
conrmed that they are all true positives.
These violations relate to a total of 15 side-channels, of which 10
are found in Linux and 5 in FreeBSD. Here we dene “a side-channel”
as a branch that causes the violation. Since the same check over a
shared variable can be applied at multiple branches, the same key
constraint in Table 3 can be associated with multiple side-channels.
Five of the discovered side-channels (4,6,7,8,11) are based on
shared variables that are not discovered before, namely, close port
reset counter, tcp memory counter, and accept queue associate with
Listen socket (details to follow). Seven side-channels (1,2,3,5,9,10,12)
are new ways (i.e., execution path) to exploit known shared re-
sources [1, 16, 48]. The remaining three side-channels (13,14,15) are
known ways to exploit a known shared resource [7].
Based on the shared resources, the side-channels can be catego-
rized into 4 classes. Next, we describe the details and provide an
examplar to showcase in each case.
Reset counter based side-channels (Class A). Side-channel 1,
2, and 3 in Table 3 are caused by what is called the “open port RST
packet rate,” which is used to restrict sending too many RST packets
from an open port. Side-channel 4 is caused by what is called the
“close port RST packet rate,” which is used to restrict sending too
many RST packets from a closed port at a host.
Figure 7 shows how side-channel 1 can be exploited to infer the
port number of a victim connection. During the guess phase, the
attacker sends a spoofed ACK packet with a guessed port number.