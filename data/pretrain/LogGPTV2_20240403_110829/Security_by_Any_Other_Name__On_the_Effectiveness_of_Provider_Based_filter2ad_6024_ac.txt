did not advertise the STARTTLS extension (44.60% of all
servers). Nevertheless, we did not eliminate such servers from
consideration and attempted to issue the STARTTLS command
in the next step regardless of advertised support.
4. STARTTLS. We issued the STARTTLS command to the server.
The STARTTLS command failed for 0.51% of incoming MTAs
that advertised the STARTTLS option in the previous step
(45.31% of all servers). Of the servers that did not advertise
STARTTLS support, 0.30% did respond to the STARTTLS by
starting a TLS handshake.
5. TLS handshake. We carried out the TLS negotiation phase
and recorded the options supported by the server and the
server certiﬁcate. We did not supply a client certiﬁcate.
6. Mail transfer. With TLS encryption in place, we either pro-
ceeded to send an email message (if we had an account with
the service as described in Section 4.1.2) or issued the QUIT
command.
4.3 Outgoing MTA Behavior
A provider’s outgoing MTA plays the role of a client when trans-
ferring mail to an incoming MTA of another provider. In this role,
it must issue the STARTTLS command to start the TLS session. To
test which outgoing MTAs do so, we generated a message from the
provider in question to an incoming MTA server we control. Of
course, this requires an account at the provider in question, so the
ﬁrst step in this experiment was creating these account. In all, we
created accounts at 22 mail providers representing 75.05% of users
according to the provider list ranking. Interaction with the outgoing
MTA proceeded as follows:
1. HELO/EHLO. The client must ﬁrst issue a HELO or EHLO
command identifying itself. The latter identiﬁes the client as
speaking ESMTP, which was the case for all 22 providers.
We accepted both.
2. ESMTP Options. If the client used the EHLO command, we
advertised the STARTTLS extension.
3. STARTTLS. A client wishing to use TLS would now is-
sue the STARTTLS command, in order to protect the rest of
the SMTP session using TLS. 15 of the 22 ESMTP-speaking
outgoing MTAs did so. For MSAs, we also attempted to pro-
ceed without issuing STARTTLS to determine if a provider
would accept login credentials and mail over an unsecured
connection.
4. TLS handshake. We carried out the TLS handshake, offer-
ing the client our server certiﬁcate. We used different certiﬁ-
cates each session to determine the level of certiﬁcate check-
ing done by the client. The certiﬁcates we used are described
in Section 5.3.2. We also requested a client certiﬁcate, and
recorded it if it was provided.
5. Mail transfer. We accepted any mail offered by the client.
4.4 SMTP MSA Behavior
To assess the level of TLS support by SMTP MSAs, we obtained
mail submission conﬁguration information from the 22 providers
on the select provider list. 15 of the 22 providers instructed the
user to conﬁgure their mail reader to use TLS. For SMTP with
454Received:
from BLU004-OMC4S27.hotmail.com
(blu004-omc4s27.hotmail.com. [65.55.111.166])
by mx.google.com with ESMTPS id . . .
for 
(version=TLSv1.2
cipher=ECDHE-RSA-AES128-SHA bits=128/128);
Sun, 15 Feb 2015 16:35:49 -0800 (PST)
incoming MTA
Figure 2: Example Received line
mx.google.com to a message from Hotmail,
identifying Hotmail’s outgoing
MTA blu004-omc4s27.hotmail.com, and giving TLS parameters. Omitted
information shown as “. . . ”
added by Google’s
STARTTLS, we performed the same interaction as for SMTP in-
coming MTAs (Section 4.2), however we also checked that the
MSA would proceed without the client issuing STARTTLS ﬁrst. For
SMTPS MSAs, we carried out the TLS handshake and captured the
server certiﬁcate.
4.5 POP and IMAP Behavior
For the 22 providers in the select provider list, we contacted
each provider’s POP and IMAP server. All 22 offered POP and
IMAP support, 15 of the 22 providers instructed the user to con-
ﬁgure their mail reader to use TLS. Our interaction ran along sim-
ilar lines as SMTP MSA. For POP3 and IMAP, we carried out the
handshake and captured the certiﬁcate. For the POP3 and IMAP
with STARTTLS, we recorded whether the STARTTLS option was
advertised, issued STARTTLS and, and captured the certiﬁcate. We
did not use a client certiﬁcate.
4.6 Webmail Behavior
Users may also interact with their email provider using a Web in-
terface. All of the 22 providers in our select provider set supported
this option. For each, we recorded whether the Web mail interface
supported HTTPS, whether or not it was the default, and whether
the certiﬁcate was valid.
4.7 Reported TLS Use
The SMTP standard requires mail servers along a message path
to prepend a Received header line, indicating when, by which
server, and from which server, a message was received (Sec. 4.4,
RFC 5321). The standard also deﬁnes additional information which
a server may add to the Received line, including protocol infor-
mation introduced by the WITH keyword. RFC 5321 deﬁnes two
possible values, SMTP and ESMTP, indicating whether ESMTP was
used or not. RFC 3848 extends this list to include others, includ-
ing ESMTPS, which indicates that TLS was used. Figure 2 shows a
sample Received line.
We used this feature to map TLS use on the internal hops (b)
and (d). We sent messages from our account on each provider to
our server and from our server to an account at each provider, and
collected the Received headers from these messages. We then ex-
tracted the WITH clause, if present, of each line, using it to infer
TLS use.
4.8 Cross-Provider Validation
Recall that our message path measurement technique is built on
the premise that TLS use between a client and a server can be in-
ferred from their behavior when interacting with us. To determine
if this is indeed the case, we sent messages between all pairs of
providers on the select provider list (484 messages in all). We then
used the Received header information described above to deter-
mine if providers exhibited different pairwise behavior than might
be expected from their interaction with us. Results are shown in
Table 6 and discussed in Section 5.3.
4.9 Certiﬁcates
When testing server certiﬁcates, we checked if the certiﬁcate was
revoked (via a CRL) or expired. We checked if the certiﬁcate com-
mon name or any of the subjectAltName matched the host name
to which we were connecting. We also checked if the certiﬁcate was
signed by a trusted CA using the Mozilla list as the trusted root.5
We also noted the signature algorithm used.
4.10 DKIM
To determine DKIM signing by outgoing mail providers, we ex-
amined the messages used in the outgoing MTA measurement (Sec-
tion 4.3) to determine if a DKIM signature is present, and if so, if
the signature is correct. Since this measurement required having a
DKIM selector from a signed message, we could only perform this
measurement for providers on the select provider list, from whom
we received email. For each message examined, we extracted the
DKIM-Signature header from the message, retrieved the DKIM
key (if one exists) for the selector._domainkey.domain.com
TXT record where selector and domain.com are the selector and
domain from the DKIM header. The hash from the DKIM Signa-
ture was then decrypted with the DKIM key. If the decrypted hash
matches the computed hash of the message then the DKIM signa-
ture is marked as valid.
To evaluate the effect of DKIM use on incoming mail, we gen-
erated mail to providers on the select provider list. We sent three
kinds of messages to each: without a DKIM signature, with a valid
DKIM signature, and with an invalid DKIM signature. The subject
and body of the three messages were identical; however, the date,
included in the signature, varied. Each type of test was conducted
from a different IP address to avoid IP reputation bias.
We then examined whether the message was rejected, marked
as spam, or delivered to the user inbox of our account. In addi-
tion to determining message outcome, we also recorded whether
the provider queried our DNS server for TXT record containing the
DKIM signing key. The selector was not previously used to ensure
the record would not be cached.
4.11 SPF, ADSP, DMARC, and DNSSEC
To test provider support for SPF and DMARC in outgoing mail,
we queried the name server of providers on the provider list for
the DNS TXT record used by each protocol. In addition, we made
note of whether the provider’s mail server supported DNSSEC and
returned signed records.
DNSSEC was veriﬁed by querying each domains DNSKEY record.
If no DNSKEY record was found, then the domain was marked as
not supporting DNSSEC. If there was a DNSKEY, then we queried
two DNS servers, one without DNSSEC support, and one enforcing
DNSSEC for the A record of the domain. If the DNSSEC enabled
server responded without a SERVFAIL result then DNSSEC passed,
otherwise the domain had invalid DNSSEC. The DNS server with-
out DNSSEC was used as a control to ensure that there exists DNS
records for the domain.
SPF validation was tested by setting the SPF TXT record for our
test domain to “v=spf1 a -all” which should fail or reject mail
not sent from our domain’s A record. We then sent messages to the
top mail providers from an IP address not in our domain’s DNS.
We recorded whether the SMTP session to the provider’s MTA was
successful, and if it was, if the message sent ended up in the recip-
ient’s inbox or spam folder.
To test DMARC we set the DMARC TXT record for a domain
under our control to “v=DMARC1 p=reject”. We then repeated
5https://wiki.mozilla.org/CA:IncludedCAs
455SMTP POP3 IMAP HTTP
·
·
(cid:66) ·
·
·
·
·
·
hotmail.com
gmail.com
yahoo.com
aol.com
gmx.de
mail.ru
yahoo.co.in
comcast.net
web.de
qq.com
yahoo.co.jp
naver.com
163.com
twc.com
libero.it
yandex.ru
daum.net
cox.net
att.net
wp.pl
pacbell.net
sohu.com
In
Out
(cid:73)
·
·
(cid:66)(cid:73)(cid:66) (cid:66)
·
·
·
(cid:73)
(cid:73)(cid:66)
(cid:66)
·
·
(cid:66)(cid:73) · (cid:66)
(cid:73)
(cid:73)
·
(cid:66) (cid:66) ·
(cid:66)
(cid:66) (cid:66)
(cid:66) (cid:66) ·
(cid:66)(cid:66) (cid:66)
(cid:66)(cid:66)
(cid:66)(cid:66) (cid:66)
·
·
·
(cid:66) ·
·
·
·
(cid:66)(cid:66) (cid:66)
valid certiﬁcate with matching host name,
Table 3: TLS behavior of user-facing SMTP, POP3, IMAP, and HTTP servers of top
mail providers (left frame) and the internal structure of each (right frame). Legend:
valid certiﬁcate with different host
the provider rejected non-TLS connections. In the
name,
right frame, the Out column shows MSA to outgoing MTA message path; the In col-
umn shows the incoming MTA to MDA path. Each symbol indicates an internal hop.
Legend: (cid:73) TLS was used, (cid:66) no TLS used, · an unknown protocol was used.
no TLS support;
sending mail with an invalid DKIM signature as described in Sec-
tion 4.10. Setting the policy to reject should result in mail being
canceled at the SMTP layer if the DKIM signature is not correct.
We recorded if the SMTP connection to the provider’s MTA was
successful, and if so, whether the message sent ended up in the re-
cipient’s inbox or spam folder. As a control we also tested with the
policy set to “p=none”.
To test whether providers used SPF, ADSP and DMARC in pro-
cessing incoming mail, we sent mail to each of the providers on
the select provider list. For each, we sent a message both from an
IP address not authorized to send email per SPF policy, and one
from which email was authorized. As in the DKIM experiment, we
then examined whether the message was rejected, marked as spam,
or delivered to the inbox. We also recorded whether the receiving
provider queried our DNS server for the DKIM, SPF, ADSP, or
DMARC TXT records.
5. RESULTS
Recall that we set out to determine whether a given message path
is secured with TLS along each hop. In Section 4 we described
how we can infer TLS use along the path from direct and indirect
interaction with the servers. Here we present our ﬁndings.
5.1 Submission and Delivery
The ﬁrst and last hop in a message path, labeled (a) and (e) in
Figure 1, involve the user. The security of these two hops depends
on the user MUA and on the MSA and MDA of the provider.
5.1.1 SMTP, POP, and IMAP
We tested the SMTP, IMAP and POP servers speciﬁed by each
provider (of the 22 select providers) in their mail client conﬁgura-
de-
tion instructions. Our results are shown in Table 3, where
notes no TLS support, and all other marks indicate TLS was sup-
ported. Only one provider, sohu.com, did not provide TLS support
for submission or delivery. One provider, naver.com did not sup-
port POP3 with TLS, but did support IMAP with TLS.
One provider, twc.com, supported TLS, but the conﬁguration in-
structions provided to their users did not indicate that TLS should
be enabled, leaving it up to the MUA to issue the STARTTLS com-
mand.
Some providers required TLS use, and would not serve a client
without TLS. These providers are shown in Table 3 with a mark.
The top three providers—Hotmail, GMail, and Yahoo!—all require
TLS for mail submission and delivery.
Certiﬁcates. Table 3 also indicates the type of TLS certiﬁcate pre-
mark indicates that a cer-
sented by the MSA or MDA. The
tiﬁcate was not revoked, expired, or signed by an untrusted CA
(Sec. 4.9). All certiﬁcates we encountered here met satisﬁed these
conditions. We also checked whether the certiﬁcate name matched
the name of the host to which we made the connection. Here the
situation was less rosy. For MSAs, of 6 of the 22 providers used a
server certiﬁcate that did not match the server host name to which
we were connecting. (Recall that the server name was obtained
from the provider’s own conﬁguration information.) Hotmail, for
example, speciﬁes that smtp-mail.outlook.com should be used