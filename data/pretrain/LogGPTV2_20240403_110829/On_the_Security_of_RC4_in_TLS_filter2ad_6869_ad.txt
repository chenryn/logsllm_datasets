((cid:31) − 1)-length preﬁx of P. We show below how
values δµ(cid:31)|µ(cid:31)−1 can be computed given the ciphertext
bytes {(Cj,(cid:31)−1,Cj,(cid:31))}1≤ j≤S and the probability estimates
{p(cid:31)−1,k1,k2}0x00≤k1,k2≤0xFF. Note that, by rewriting equa-
tion (2) and assuming that λµ1 = Pr[P1 = µ1] is accurately
known, we obtain likelihood estimate λP(cid:31) = Pr[P1 =
µ1]∏L
Our algorithm computes the plaintext candidate P∗ =
µ1||···||µL which maximizes the estimated likelihood
λP∗. This is done by exploiting the following easy-
to-see optimality-preserving property:
for all preﬁxes
µ1||···||µ(cid:31) of P∗, (cid:31) ≤ L, we have that λµ1||···||µ(cid:31)−1 is the
largest likelihood among all ((cid:31)− 1)-length plaintext can-
didates with µ(cid:31)−1 as the last byte.
The basic idea of our algorithm is to iteratively con-
struct P∗ by considering the preﬁxes of P∗ with increas-
ing length. As just argued, these correspond to the
(partial) plaintext candidates with the highest likelihood
and a speciﬁc choice of the last byte value. However,
when computing a candidate for a length (cid:31) ≤ L, it is
not known in advance what the speciﬁc value of the
last byte µ(cid:31) should be. Our algorithm hence computes
the most likely partial plaintext candidates for all pos-
sible values of µ(cid:31). More speciﬁcally, for each ((cid:31) − 1)-
length partial candidate µ1||···||µ(cid:31)−1 and any value µ(cid:31),
we compute the likelihood of the (cid:31)-length plaintext can-
didate µ1||···||µ(cid:31)−1||µ(cid:31) via equation (2) as λµ1||···||µ(cid:31) =
δµ(cid:31)|µ(cid:31)−1 · λµ1||···||µ(cid:31)−1. Due to the optimality-preserving
property, the string µ1||···||µ(cid:31) with the highest likeli-
hood will correspond to the most likely plaintext can-
didates of length (cid:31) with the last byte µ(cid:31). This guarantees
that the (cid:31)-length preﬁx of (optimal) P∗ will be among the
computed candidates and, furthermore, when the length
of P∗ is reached, that P∗ itself will be obtained.
To initialize the above process, the algorithm assumes
that the ﬁrst plaintext byte µ1 of P is known with cer-
tainty, i.e., λµ1 = 1 (this can, for example, be assumed
if the attack is used to recover HTTP cookies from an
encrypted HTTP(S) header). Likewise, the algorithm as-
sumes that the last byte µL of P is known, i.e., λµL = 1
(also this is the case when recovering HTTP cookies).
This leads to a single µL being used in the last iteration of
the above process which will then return the most likely
plaintext candidate P∗. (See Remark 1 for how the al-
gorithm can be modiﬁed to work without these assump-
tions.)
remains to show the details of how δµi+1|µi
This is done similarly to the
can be computed.
It
of
the
computation
proba-
maximum-likelihood
bility estimate used in Algorithm 4. More pre-
cisely, each combination of index i, pair (µi, µi+1),
in-
and
duces
keystream bytes
{(Z( j−1)L+i,Z( j−1)L+i+1)}1≤ j≤S.
The latter can be
represented as a vector (Ni,0x00,0x00, . . . ,Ni,0xFF,0xFF),
where
{(Cj,i,Cj,i+1)}1≤ j≤S
ciphertext
a
distribution
bytes
the
on
Ni,k1,k2 =|{ j| (Cj,i, Cj,i+1) = (k1⊕µi,k2⊕µi+1)}1≤ j≤S| .
As in Section 4.1, we see that this vector follows a
multinomial distribution, and that the probability that
(Ni,0x00,0x00, . . . ,Ni,0xFF,0xFF) will arise (i.e., the probabil-
ity that (µi, µi+1) corresponds to the i-th and the (i+1)-th
plaintext bytes) is given by
Pr[Pi = µi ∧ Pi+1 = µi+1|C] =
S!
Ni,0x00,0x00!···Ni,0xFF,0xFF!
We can now compute δµi+1|µi as
∏
k1,k2∈{0x00,...,0xFF}
(3)
p
Ni,k1,k2
i,k1,k2
.
δµi+1|µi = Pr[Pi+1 = µi+1|Pi = µi ∧C]
Pr[Pi = µi ∧ Pi+1 = µi+1|C]
=
Pr[Pi = µi|C]
.
(4)
We assume that no signiﬁcant single-byte biases are
present in the keystream, i.e., that Pr[Pi = µi|C] is uni-
form over the possible plaintext values µi. Under this
condition, since the term will stay invariant for all plain-
text candidates, we can ignore the contribution of fac-
tor 1/Pr[Pi = µi|C] in (4), when comparing probabil-
ity estimates. This is likewise the case for the terms
S!/(Ni,0x00,0x00, . . . ,Ni,0xFF,0xFF) in (3), due to similar ob-
servations as made for Algorithm 4.
We combine the results of the discussion from the
preceeding paragraphs, including the proposed optimiza-
tions, to obtain our double-byte bias attack in Algo-
rithm 5.
Remark 1. The above assumption, that the ﬁrst and last
byte of the plaintext P is known, can easily be avoided.
Speciﬁcally, if the ﬁrst byte is unknown, Algorithm 5 can
be initialized by computing, for each possible value µ2,
the most likely pairs (µ1, µ2). This can be done based
on the ciphertext bytes {(Cj,1,Cj,2)}1≤ j≤S and the proba-
bility estimates {p1,k1,k2}0x00≤k1,k2≤0xFF. Likewise, if the
last byte is unknown, the algorithm will identify P∗ as the
plaintext candidate with the highest likelihood estimate
among the computed plaintext candidates of length L.
Note, however, that knowing the ﬁrst and last plaintext
byte will lead to a more accurate likelihood estimate and
will thereby increase the success rate of the algorithm.
USENIX Association  
22nd USENIX Security Symposium  313
9
Algorithm 5: Double-byte bias attack
input : C – encryption of S copies of ﬁxed plaintext P
(Cj,r denotes the r-th byte of the substring of C encrypting the j-th copy of P)
L – length of P in bytes (must be a multiple of 256)
µ1 and µL – the ﬁrst and last byte of P
{pr,k1,k2}1≤r≤L−1, 0x00≤k1,k2≤0xFF – keystream distribution
output: estimate P∗ for plaintext P
notation: let max2(Q) denote (P,λ ) ∈ Q such that λ ≥ λ(cid:24)∀(P(cid:24),λ(cid:24)) ∈ Q
begin
N(r,k1,k2) ← 0
for j = 1 to S do
for all 1 ≤ r < L, 0x00 ≤ k1,k2 ≤ 0xFF
for r = 1 to L− 1 do
N(r,Cj,r,Cj,r+1) ← N(r,Cj,r,Cj,r+1) + 1
Q ← {(µ1,0)}
for r = 1 to L− 2 do
Qext ← {}
for µr+1 = 0x00 to 0xFF do
// List of plaintext candidates of length r + 1
// List of plaintext candidates ending with µr+1
Qµr+1 ← {}
for each (P(cid:24),λP(cid:24)) ∈ Q do
P(cid:24) → µ1||···||µr
λP(cid:24)||µr+1 ← λP(cid:24) + ∑0xFF
Qµr+1 ← Qµr+1 ∪{(P(cid:24)||µr+1 ,λP(cid:24)||µr+1)}
k1=0x00 ∑0xFF
Qext ← Qext ∪{max2(Qµr+1 )}
k2=0x00 N(r,k1⊕µr,k2⊕µr+1) · log p(r,k1,k2)
// List of plaintext candidates ending with µL
Q ← Qext
QµL ← {}
for each (P(cid:24),λP(cid:24)) ∈ Q do
P(cid:24) → µ1||···||µL−1
λP(cid:24)||µL ← λP(cid:24) + ∑0xFF
k1=0x00 ∑0xFF
QµL ← QµL ∪{(P(cid:24)||µL ,λP(cid:24)||µL )}
(P∗,λP∗) ← max2(QµL )
return P∗
k2=0x00 N(r,k1⊕µL−1,k2⊕µL) · log p(r,k1,k2)
5 Experimental Results
Through simulation, we measured the performance of
the single-byte and double-byte bias attacks. We further-
more validated our algorithms in real attack scenarios.
5.1 Simulation of Single-byte Bias Attack
We simulated the ﬁrst plaintext recovery attack described
in Section 4. We used RC4 keystreams for 244 ran-
dom keys to estimate the per-output-byte probabilities
{pr,k}1≤r≤256,0x00≤k≤0xFF. We then ran the attack in Al-
gorithm 4 256 times for each of S = 224,225, . . . ,2 32 ses-
sions to estimate the attack’s success rate. The results for
S = 224,226, . . . ,2 30 are shown in Figures 4–7. In each
ﬁgure, we show the success rate in recovering the correct
plaintext byte versus the position r of the byte in the out-
put stream (but recall that, in practice, the ﬁrst 36 bytes
are not interesting as they contain the Finished mes-
sage). Some notable features of these ﬁgures are:
• Even with as few as 224 sessions, some positions
of the plaintext are correctly recovered with high
probability. The ones with highest probability seem
to arise because of the key-length-dependent bi-
ases that we observed in positions that are multiples
of 16. These large biases make it easier to recover
the correct plaintext bytes when compared to other
ciphertext positions.
• With S = 226 sessions, the ﬁrst 46 plaintext bytes
are recovered with rate at least 50% per byte.
• With S = 232 sessions (not shown here; see [4]), all
of the ﬁrst 256 bytes of output are recovered with
rate close to 100%: the rate is at least 96% in all
positions, and is 100% for all but 12 positions.
314  22nd USENIX Security Symposium 
USENIX Association
10
1.2"
1"
0.8"
0.6"
0.4"
0.2"
0"
0"
10"
20"
30"
40"
50"
60"
70"
80"
90"
100"
110"
120"
130"
140"
150"
160"
170"
180"
190"
200"
210"
220"
230"
240"
250"
1.2"
1"
0.8"
0.6"
0.4"
0.2"
0"
0"
10"
20"
30"
40"
50"
60"
70"
80"
90"
100"
110"
120"
130"
140"
150"
160"
170"
180"
190"
200"
210"
220"
230"
240"
250"
Figure 4: Recovery rate of the single-byte bias attack for
S = 224 sessions for ﬁrst 256 bytes of plaintext (based on
256 experiments).
Figure 6: Recovery rate of the single-byte bias attack for
S = 228 sessions for the ﬁrst 256 bytes of plaintext (based
on 256 experiments).
1.2"
1"
0.8"
0.6"
0.4"
0.2"
0"
0"
10"
20"
30"
40"
50"
60"
70"
80"
90"
100"
110"
120"
130"
140"
150"
160"
170"
180"
190"
200"
210"
220"
230"
240"
250"
1.2"
1"
0.8"
0.6"
0.4"
0.2"
0"
0"
10"
20"
30"
40"
50"
60"
70"
80"
90"
100"
110"
120"
130"
140"
150"
160"
170"
180"
190"
200"
210"
220"
230"
240"
250"
Figure 5: Recovery rate of the single-byte bias attack for
S = 226 sessions for the ﬁrst 256 bytes of plaintext (based
on 256 experiments).
Figure 7: Recovery rate of the single-byte bias attack for
S = 230 sessions for the ﬁrst 256 bytes of plaintext (based
on 256 experiments).
• The rate at which bytes are correctly recovered in-