Our node enumerator, Peruze, omits many optimizations
used in Cruiser and Blizzard for the sake of expedient imple-
mentation. In particular, its ﬂow control algorithm is naive
and it is at least ﬁve times slower than Blizzard. Unlike
previous work, Peruze terminates when the rate of outgoing
trafﬁc drops signiﬁcantly, which indicates diminishing re-
turns from further scanning, rather than continuing in order
to obtain more complete measurements.
Crawling DHTs Mistral [40] is a crawler for Kad.
It
carries out a Sybil attack on Kad by efﬁciently implementing
many Sybils on one machine. Instead of using the standard
Kad bootstrap, Mistral uses Blizzard to discover peers and
then contacts them directly. Mistral does not attempt to
discover content through replication; instead, the Sybil nodes
always redirect routing trafﬁc to other Sybils to maximize
the amount of trafﬁc captured. Mistral is only capable of
spying on an 8-bit preﬁx (i.e., 1
256) of Kad at a time.
Montra [30] is a crawler for Kad that improves on Mistral
by minimizing disruption to the DHT. Like Mistral, it uses a
crawler (Cruiser) to discover nodes in the network. Unlike
Mistral, Montra discovers content through the replication
mechanism by targeting peers individually. At the time
Montra was developed, Kad peers were permitted to choose
their IDs arbitrarily, so each of Montra’s minimally visible
monitors can set its ID to differ from that of its target peer
only in the least signiﬁcant bit, ensuring replication of stored
data. Montra minimizes load and disruption by responding
only to each monitor’s target peer. However, Montra is not
compatible with the new Sybil attack protections in Kad
described in [11] that prevent nodes from choosing their Kad
IDs arbitrarily.
Goel et al. [22] point out that choosing node IDs in DHTs
by hashing the IP address and a salt facilitates the Sybil
attack because attackers can choose the salt freely. This
observation extends trivially to ports in the Vuze DHT.
Our advanced hopping attack system, ClearView, is dis-
tinct from both Mistral and Montra, although it is broadly
similar in that it is an efﬁcient implementation allowing
many Sybils to run on a single machine. Like Montra, it
learns about stored values through replication, but its Sybils
join the network through the standard bootstrap procedure.
ClearView attempts to restrict its visibility by failing to reply
to certain messages, but does not go to the same extent as
Montra. Also unlike these previous works, our attacks target
the Vuze network and are optimized for attacking Vanish.
8. Conclusion
The security guarantees that Vanish sets out to provide
would be extremely useful, but, unfortunately, the system in
its current form does not provide them in practice. As we
have shown, efﬁcient Sybil attacks can recover the keys to
almost all Vanish data objects at low cost. Changes to the
Vanish implementation and the underlying Vuze DHT might
make Sybil attacks somewhat more expensive, but it seems
doubtful that such defenses would make the system sufﬁ-
ciently secure. While we would like to see Vanish succeed,
we are skeptical that it can be implemented securely.
Postscript
We shared these ﬁndings with the Vanish team, and, sub-
sequent to the submission of this paper, they released a new
version of Vanish [21] and a report [19] detailing potential
new defenses.
They propose two main countermeasures. The ﬁrst is to
store Vanish keys on both the Vuze DHT and OpenDHT so
that data from both DHTs would be needed to recover the key.
They implemented this defense in the new Vanish software
release, version 0.2. The second defense is to modify the
Vuze DHT to disable the replicate-on-join behavior and use
less aggressive data replication. (To minimize the impact on
Vuze, they suggest that these changes could be selectively
enabled for Vanish data.) The Vanish authors are working
with the makers of Vuze to implement this defense.
Fully evaluating these proposals is a subject for future
work, but we offer an initial perspective here. Using both
OpenDHT and Vuze might raise the bar for an attacker, but
at best it can provide the maximum security derived from
either system—if both DHTs are insecure, then the hybrid
will also be insecure. OpenDHT is controlled by a single
maintainer, who essentially functions as a trusted third party
in this arrangement. It is also susceptible to attacks on the
roughly two hundred PlanetLab nodes on which it runs, most
of which are housed at low-security research institutions.
The new Vanish technical report acknowledged OpenDHT’s
limitations: “For Vanish, OpenDHT seemed a poor ﬁt for a
number of reasons” [19, Section 3.2]. Using both Vuze and
OpenDHT seems unlikely to be a much better ﬁt.
Altering the behavior of the Vuze DHT might make our
attacks more expensive, but it is difﬁcult to gauge how much
more expensive until these changes are deployed. Under-
standing their effects on Vanish (and on overall DHT perfor-
mance) will require further investigation, and it is possible
that entirely new attacks will emerge. While Vuze’s willing-
ness to adopt changes for the beneﬁt of Vanish is laudable,
it is also a reminder that the Vuze DHT is effectively under
the control of a single party, and that future changes could
unintentionally or maliciously degrade Vanish’s security.
The ﬁrst iteration of Vanish was broken in a relatively
short time. The proposed new defenses are interesting and
merit further investigation, but, for now, Vanish’s security
should be viewed with skepticism. Whether DHTs are the
best choice for key-share storage remains an open question.
Acknowledgments
We thank the Vanish authors for valuable and construc-
tive discussions. We are also grateful to Dan Wallach for
providing machines for our early experiments, and to George
Danezis for his assistance as we prepared the paper for pub-
lication. We thank Adam Klivans for emotional energy and
gravitas. Brent Waters is supported by NSF CNS-0716199
and CNS-0915361, Air Force Ofﬁce of Scientiﬁc Research
(AFO SR) under the MURI award for “Collaborative poli-
cies and assured information sharing” (Project PRESIDIO).
Emmett Witchel is supported by NSF CNS-0905602, NSF
CAREER CNS-0644205, and NSF CNS-0615104.
References
[1] Amazon EC2 user guide: Using network security.
http://docs.amazonwebservices.com/AWSEC2/latest/
UserGuide/using-network-security.html.
[2] Amazon EC2 pricing, Sept. 2009. http://aws.amazon.com/
ec2/#pricing.
[3] Amazon S3 pricing, Sept. 2009. http://aws.amazon.com/s3/
#pricing.
[4] K. S. Bauer, D. McCoy, D. Grunwald, T. Kohno, and D. C.
Sicker. Low-resource routing attacks against Tor. In WPES,
pages 11–20, 2007.
[5] M. Bellare and S. K. Miner. A forward-secure digital signa-
ture scheme. In CRYPTO, pages 431–448, 1999.
[6] D. Boneh and R. J. Lipton. A revocable backup system. In
USENIX Security, pages 91–96, 1996.
[7] N. Borisov, I. Goldberg, and E. A. Brewer. Off-the-record
communication, or, why not to use PGP. In WPES, pages
77–84, 2004.
[8] R. Canetti, S. Halevi, and J. Katz. A forward-secure public-
key encryption scheme. In EUROCRYPT, pages 255–271,
2003.
[9] D. Cash, Y. Z. Ding, Y. Dodis, W. Lee, R. J. Lipton, and
S. Walﬁsh. Intrusion-resilient key exchange in the bounded
retrieval model. In TCC, pages 479–498, 2007.
[10] A. Cheng and E. Friedman. Sybilproof reputation mecha-
nisms. In P2PECON: ACM SIGCOMM Workshop on Eco-
nomics of Peer-to-Peer Systems, pages 128–132, 2005.
[11] T. Cholez, I. Chrisment, and O. Festor. Evaluation of Sybil
attack protection schemes in KAD. In AIMS: International
Conference on Autonomous Infrastructure, Management and
Security, pages 70–82, 2009.
[12] B. Cohen et al. BitTorrent protocol speciﬁcation v1.0.
[13] S. A. Crosby and D. S. Wallach. An analysis of BitTorrent’s
two Kademlia-based DHTs. Technical Report TR-07-04,
Rice University Department of Computer Science, June 2007.
[14] G. Danezis and P. Mittal. SybilInfer: Detecting Sybil nodes
using social networks. In NDSS, 2009.
[15] R. Dingledine, N. Mathewson, and P. F. Syverson. Tor: The
second-generation onion router. In USENIX Security, pages
303–320, 2004.
[16] J. R. Douceur. The Sybil attack. In IPTPS: International
Workshop on Peer-to-Peer Systems, pages 251–260, 2002.
[17] S. Dziembowski.
Intrusion-resilience via the bounded-
storage model. In TCC, pages 207–224, 2006.
[18] J. Falkner, M. Piatek, J. P. John, A. Krishnamurthy, and
T. Anderson. Proﬁling a million user DHT. In IMC: ACM
SIGCOMM Conference on Internet Measurement, pages 129–
134, 2007.
[19] R. Geambasu, J. Falkner, P. Gardner, T. Kohno, A. Krish-
namurthy, and H. M. Levy. Experiences building security
applications on DHTs. Technical report, University of Wash-
ington Computer Science and Engineering, September 2009.
[20] R. Geambasu, T. Kohno, A. Levy, and H. M. Levy. Vanish:
Increasing data privacy with self-destructing data. In USENIX
Security, pages 299–314, 2009.
[21] R. Geambasu, A. Levy, P. Gardner, T. Kohno, A. Krishna-
murthy, and H. M. Levy. Vanish web site. http://vanish.cs.
washington.edu/.
[22] S. Goel, M. Robson, M. Polte, and E. G. Sirer. Herbivore:
A scalable and efﬁcient protocol for anonymous communi-
cation. Technical Report TR2003-1890, Cornell University
Computing and Information Science, February 2003.
[23] G. Itkis and L. Reyzin. Forward-secure signatures with op-
timal signing and verifying. In CRYPTO, pages 332–354,
2001.
[24] P. Judge.
.Net vote rigging illustrates importance of Web
services. http://news.zdnet.co.uk/software/0,1000000121,
2102244,00.htm.
[25] A. Juels and J. G. Brainard. Client puzzles: A cryptographic
In
countermeasure against connection depletion attacks.
NDSS, pages 151–165, 1999.
[26] B. Karp, S. Ratnasamy, S. Rhea, and S. Shenker. Spurring
adoption of DHTs with OpenHash, a public DHT service.
In IPTPS: Proc. International Workshop on Peer-to-Peer
Systems, pages 195–205, 2004.
[27] J. Markoff. New technology to make digital data self-destruct.
The New York Times, July 20, 2009.
[28] U. M. Maurer. Conditionally-perfect secrecy and a provably-
secure randomized cipher. J. Cryptology, 5(1):53–66, 1992.
[29] P. Maymounkov and D. Mazires. Kademlia: A peer-to-
peer information system based on the XOR metric.
In
IPTPS: Proc. International Workshop on Peer-to-Peer Sys-
tems, pages 52–56, 2002.
[30] G. Memon, R. Rejaie, Y. Guo, and D. Stutzbach. Large-
scale monitoring of DHT trafﬁc. In IPTPS: International
Workshop on Peer-to-Peer Systems, 2009.
[31] M. Mitzenmacher and E. Upfal. Probability and Computing:
Randomized Algorithms and Probabilistic Analysis. Cam-
bridge University Press, January 2005.
[32] S. J. Murdoch. Hot or not: Revealing hidden services by their
clock skew. In CCS, pages 27–36, 2006.
[33] S. J. Murdoch and G. Danezis. Low-cost trafﬁc analysis of
Tor. In IEEE Symp. on Security and Privacy, pages 183–195,
2005.
[34] S. J. Murdoch and P. Zielinski. Sampled trafﬁc analysis by
Internet-exchange-level adversaries. In PET, pages 167–183,
2007.
[35] L. Øverlier and P. F. Syverson. Improving efﬁciency and
simplicity of Tor circuit establishment and hidden services.
In PET, pages 134–152, 2007.
[36] M. D. Raimondo, R. Gennaro, and H. Krawczyk. Secure
off-the-record messaging. In WPES, pages 81–89, 2005.
[37] S. Rhea, B. Godfrey, B. Karp, J. Kubiatowicz, S. Ratnasamy,
S. Shenker, I. Stoica, and H. Yu. OpenDHT: A public DHT
service and its uses. In SIGCOMM, pages 73–84, August
2005.
[38] A. Shamir. How to share a secret. Commun. ACM,
22(11):612–613, 1979.
[39] Sophos.
Sophos Facebook ID probe shows 41%
of users happy to reveal all
identity
thieves. http://www.sophos.com/pressofﬁce/news/articles/
2007/08/facebook.html.
to potential
[40] M. Steiner, W. Effelsberg, T. En-Najjary, and E. Biersack.
Load reduction in the KAD peer-to-peer system. In DBISP2P:
International Workshop on Databases, Information Systems
and Peer-to-Peer Computing, 2007.
[41] M. Steiner, T. En-Najjary, and E. W. Biersack. A global view
of Kad. In IMC: ACM SIGCOMM Conference on Internet
Measurement, pages 117–122, 2007.
[42] D. Stutzbach and R. Rejaie. Capturing accurate snapshots of
the Gnutella network. In IEEE Global Internet Symposium,
pages 127–132, 2005.
[43] D. Stutzbach and R. Rejaie. Improving lookup performance
over a widely-deployed DHT. In INFOCOM, 2006.
[44] D. Stutzbach and R. Rejaie. Understanding churn in peer-
to-peer networks. In IMC: ACM SIGCOMM Conference on
Internet Measurement, pages 189–202, 2006.
[45] Vuze web site. http://www.vuze.com.
[46] H. Yu, P. B. Gibbons, M. Kaminsky, and F. Xiao. SybilLimit:
A near-optimal social network defense against Sybil attacks.
In IEEE Symp. on Security and Privacy, pages 3–17, 2008.
[47] H. Yu, M. Kaminsky, P. B. Gibbons, and A. D. Flaxman.
SybilGuard: Defending against Sybil attacks via social net-
works. IEEE/ACM Trans. Netw., 16(3):576–589, 2008.
[48] M. Yurkewych, B. N. Levine, and A. L. Rosenberg. On
the cost-ineffectiveness of redundancy in commercial P2P
computing. In CCS, pages 280–288, 2005.