title:Using web security scanners to detect vulnerabilities in web services
author:Marco Vieira and
Nuno Antunes and
Henrique Madeira
978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
566
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:58:23 UTC from IEEE Xplore.  Restrictions apply. 
    Using Web Security Scanners to  Detect Vulnerabilities in Web Services  Marco Vieira, Nuno Antunes, and Henrique Madeira CISUC, Department of Informatics Engineering University of Coimbra – Portugal PI:EMAIL, PI:EMAIL, PI:EMAIL   Abstract  Although web services are becoming business-critical components, they are often deployed with criti-cal software bugs that can be maliciously explored. Web vulnerability scanners allow detecting security vulnerabilities in web services by stressing the service from the point of view of an attacker. However, re-search and practice show that different scanners have different performance on vulnerabilities detection. In this paper we present an experimental evaluation of security vulnerabilities in 300 publicly available web services. Four well known vulnerability scanners have been used to identify security flaws in web services implementations. A large number of vulnerabilities has been observed, which confirms that many services are deployed without proper security testing. Additionally, the differences in the vulnerabilities detected and the high number of false-positives (35% and 40% in two cases) and low coverage (less than 20% for two of the scanners) observed highlight the limitations of web vulnerability scanners on detecting security vulnerabil-ities in web services.   1. Introduction  Ranging from on-line stores to large corporations, web services are increasingly becoming a strategic vehicle for data exchange and content distribution [1].  Web services provide a simple interface between a provider and a consumer [1] and are supported by a complex software infrastructure, which typically in-cludes an application server, the operating system and a set of external systems (e.g., databases, payment gateways, etc). The Simple Object Access Protocol (SOAP) [1] is used for exchanging XML-based mes-sages between the consumer and the provider over the network (using for example http or https protocols). In each interaction the consumer (client) sends a request SOAP message to the provider (server). After processing the request, the server sends a response message to the client with the results. A web service may include several operations (in practice, each oper-ation is a method with several input parameters) and is described using WSDL (Web Services Definition Lan-guage) [2], which is a XML format used to generate server and client code, and for configuration. A broker is used to enable applications to find web services.  Web services become so widely exposed that any existing security vulnerability will most probably be uncovered and exploited by hackers. To prevent vulne-rabilities, developers should apply best coding practic-es, perform security reviews of the code, execute pene-tration tests, use code vulnerability analyzers, etc. However, many times developers focus on the imple-mentation of functionalities and on satisfying the us-er’s requirements and disregard security aspects. Addi-tionally, numerous developers are not specialized on security and the common time-to-market constraints limit an in depth test for security vulnerabilities. Security vulnerabilities like SQL Injection and XPath Injection seem particularly relevant in web ser-vices as they are directly related to the way the web service code is structured [3][4]. Basically, SQL Injec-tion and XPath Injection attacks take advantage of im-proper coded applications to change SQL commands that are sent to the database or tamper XPath queries used to access parts of an XML document. There are two main approaches to test web applica-tions for vulnerabilities:  • White box testing: consists of the analysis of the source code of the web application. This can be done manually or by using code analysis tools like FORTIFY [5], Ounce [6] or Pixy [7]. The problem is that exhaustive source code analysis may be dif-ficult and cannot find all security flaws because of the complexity of the code.  (cid:129) Black box testing: consists in the analyses of the execution of the application in search for vulnera-bilities. In this approach, also known as penetration testing, the scanner does not know the internals of the web application and it uses fuzzing techniques over the web HTTP requests. Web vulnerability scanners are often regarded as an easy way to test applications against vulnerabilities. In fact, vulnerability scanners provide an automatic way 978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
567
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:58:23 UTC from IEEE Xplore.  Restrictions apply. 
    to search for vulnerabilities avoiding the repetitive and tedious task of doing hundreds or even thousands of tests by hand for each vulnerability type. Most of these scanners are commercial tools (e.g., Acunetix Web Vulnerability Scanner [8], IBM Rational AppScan [9], and HP WebInspect [10]), but there are also some free application scanners (e.g., Foundstone WSDigger [11] and wsfuzzer [12]) with limited use, as they lack most of the functionalities of their commercial counterparts. Previous research suggests that the effectiveness of scanners in the detection of vulnerabilities varies a lot. In [13] it is proposed a method to evaluate and bench-mark automatic web vulnerability scanners using soft-ware fault injection techniques. Software faults are injected in the application code and the web vulnerabil-ity-scanning tool under evaluation is executed, show-ing their strengths and weaknesses concerning cover-age of vulnerability detection and false positives. Three leading commercial scanning tools were evaluated and the results showed that in general the coverage is low and the percentage of false positives is very high. However, this study was focused on a specific family of applications, namely database centric web based applications written in PHP, and the results obtained cannot be easily generalized, especially if we take into account the specificities of web services environments. In this work we used four commercial vulnerability scanners (including two different versions of a given brand) to identify security flaws in 300 publicly avail-able services. The goal was to study the effectiveness of the scanners and to try to identify common types of vulnerabilities in web services environments. The re-sults obtained showed that many of the services tested were deployed without proper security testing. A key observation was that different scanners detect different vulnerabilities, which indicates that the coverage of an individual scanner is far from being perfect. The high rate of false-positives (vulnerabilities detected that did not exist) and the low coverage (vulnerabilities that existed and were not detected) highlight the limitations of web vulnerability scanners on detecting vulnerabili-ties in web services. In summary, this practical experience report focuses on the following three questions: (cid:129) What is the coverage of the vulnerability scanners tested when used in a web services environment? (cid:129) What is the false-positive rate of the vulnerability scanners when used in a web services environment? (cid:129) What are the most common types of vulnerabilities in web services environments?   The structure of the paper is as follows. The next section presents the experimental study. Section 3 presents and discusses the results. Section 4 concludes the paper and presents ideas for future work. 2. The experimental study  Our experimental study consisted of four steps: 1. Preparation: select the vulnerability scanners and a large set of publicly available web services. 2. Execution: use the vulnerability scanners to scan the services to identify potential vulnerabilities. 3. Verification: perform manual testing to confirm vulnerabilities (i.e., remove false positives). 4. Analysis: analyze the results obtained and syste-matize the lessons learned.  2.1. Web services tested  A set of 300 publicly available services was tested, targeting several technologies, different providers (in-cluding Microsoft, Google, and Xara), and real busi-ness services (e.g., Portuguese Postal Office Orders Cost, Mexican Postal Codes). The following para-graphs describe the web services selection process. The first step was to identify a large set of web ser-vices. The first source was a web site that lists publicly available web services (http://xmethods.net/). From this list we have selected the first set of 450 web services. Then we used the Web Services Search Engine (http://seekda.com/) to discover additional services. Seekda is a portal that enables searching for public web services based on the services’ description. To discover services we have used a large set of generic keywords, ranging from popular tags (e.g., business, tourism, commercial, university, etc) to queries with countries (e.g., country:AR, country:PT, country:US, etc) and keywords related to company names (e.g., Oracle, Sun, Microsoft, Google, Acunetix).  The resulting list included 6180 web services. As it was not possible to test such a large set of services we decided to randomly select 300 services from this list. However, some of the services initially selected had to be discarded due to several reasons. As the goal was to test 300 web services, the ones discarded were replaced by others randomly selected from the initial list. 316 services were explored and had to be discarded due to: invalid/malformed WSDL (117), unable to retrieve WSDL (30), no methods found (20), authentication required (40),unhandled exception (19), communica-tion errors (50),generic scanning problems (24), and tests duration (15). Due to space restrictions, the list of services tested is not included in this paper (interested readers can obtain them at [14]).  2.2. Vulnerability scanners studied  In the present study we have tested four commercial web vulnerability scanners widely used (including two 978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
568