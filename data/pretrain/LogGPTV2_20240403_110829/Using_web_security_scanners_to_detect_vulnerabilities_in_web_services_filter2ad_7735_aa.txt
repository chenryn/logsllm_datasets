# Using Web Security Scanners to Detect Vulnerabilities in Web Services

**Authors:**
- Marco Vieira
- Nuno Antunes
- Henrique Madeira

**Affiliation:**
CISUC, Department of Informatics Engineering, University of Coimbra, Portugal

**Contact:**
- Marco Vieira: [marco.vieira@uc.pt](mailto:marco.vieira@uc.pt)
- Nuno Antunes: [nuno.antunes@uc.pt](mailto:nuno.antunes@uc.pt)
- Henrique Madeira: [henrique.madeira@uc.pt](mailto:henrique.madeira@uc.pt)

**Abstract:**
Web services are becoming increasingly critical for business operations, yet they are often deployed with significant security vulnerabilities. Web vulnerability scanners can help detect these vulnerabilities by simulating attacks from an external perspective. However, research and practical experience show that different scanners have varying performance in detecting vulnerabilities. This paper presents an experimental evaluation of 300 publicly available web services using four well-known vulnerability scanners. The results reveal a high number of vulnerabilities, indicating that many web services are deployed without adequate security testing. Additionally, the study highlights the differences in detected vulnerabilities and the high rate of false positives (ranging from 35% to 40%) and low coverage (less than 20% for two of the scanners), underscoring the limitations of web vulnerability scanners in detecting security issues in web services.

## 1. Introduction

Web services, ranging from online stores to large corporate systems, are becoming a strategic tool for data exchange and content distribution. They provide a simple interface between a provider and a consumer, supported by a complex software infrastructure, including application servers, operating systems, and external systems such as databases and payment gateways. The Simple Object Access Protocol (SOAP) is commonly used for exchanging XML-based messages over HTTP or HTTPS. Each interaction involves a client sending a SOAP request to the server, which processes the request and sends a response back to the client. Web services are described using WSDL (Web Services Description Language), an XML format used for generating server and client code and for configuration. A broker facilitates the discovery of web services by applications.

Given their widespread exposure, any security vulnerability in a web service is likely to be exploited by hackers. To prevent such vulnerabilities, developers should follow best coding practices, perform security reviews, conduct penetration tests, and use code vulnerability analyzers. However, developers often prioritize functionality and user requirements over security, and time-to-market constraints further limit thorough security testing. SQL Injection and XPath Injection are particularly relevant vulnerabilities in web services, as they exploit poorly coded applications to alter SQL commands or tamper with XPath queries.

There are two main approaches to test web applications for vulnerabilities:
- **White box testing:** Involves analyzing the source code, either manually or using tools like FORTIFY, Ounce, or Pixy. While this method can be thorough, it may not catch all security flaws due to the complexity of the code.
- **Black box testing:** Involves analyzing the application's execution to find vulnerabilities. Also known as penetration testing, this approach uses fuzzing techniques on HTTP requests without knowledge of the application's internals.

Web vulnerability scanners are seen as an efficient way to test applications, providing an automated method to search for vulnerabilities. These scanners, both commercial (e.g., Acunetix, IBM Rational AppScan, HP WebInspect) and free (e.g., Foundstone WSDigger, wsfuzzer), vary in their effectiveness. Previous research has shown that the detection coverage and false-positive rates of these scanners can be inconsistent, especially in specific environments like database-centric PHP applications.

In this work, we used four commercial vulnerability scanners, including two different versions of one brand, to identify security flaws in 300 publicly available web services. Our goal was to evaluate the effectiveness of these scanners and identify common types of vulnerabilities. The results showed that many services were deployed without proper security testing, and the differences in detected vulnerabilities, high false-positive rates, and low coverage highlight the limitations of web vulnerability scanners in web services environments.

This report focuses on the following questions:
- What is the coverage of the vulnerability scanners in a web services environment?
- What is the false-positive rate of the vulnerability scanners in a web services environment?
- What are the most common types of vulnerabilities in web services environments?

The structure of the paper is as follows:
- Section 2 describes the experimental study.
- Section 3 presents and discusses the results.
- Section 4 concludes the paper and suggests future work.

## 2. The Experimental Study

Our experimental study consisted of four steps:
1. **Preparation:** Select the vulnerability scanners and a large set of publicly available web services.
2. **Execution:** Use the vulnerability scanners to scan the services and identify potential vulnerabilities.
3. **Verification:** Perform manual testing to confirm vulnerabilities and remove false positives.
4. **Analysis:** Analyze the results and systematize the lessons learned.

### 2.1. Web Services Tested

We tested a set of 300 publicly available web services, targeting various technologies, providers (including Microsoft, Google, and Xara), and real business services (e.g., Portuguese Postal Office Orders Cost, Mexican Postal Codes). The selection process involved identifying a large set of web services from sources like xmethods.net and Seekda, a web services search engine. We used a broad range of keywords to discover additional services, resulting in a list of 6180 web services. From this list, we randomly selected 300 services for testing.

Some services had to be discarded due to issues such as invalid/malformed WSDL, inability to retrieve WSDL, lack of methods, required authentication, unhandled exceptions, communication errors, generic scanning problems, and long test durations. A total of 316 services were explored and discarded, and replacements were randomly selected from the initial list to maintain the target of 300 services.

### 2.2. Vulnerability Scanners Studied

In this study, we tested four commercial web vulnerability scanners, including two different versions of one brand. The specific scanners and their versions are listed below:

- **Scanner A (Version 1)**
- **Scanner A (Version 2)**
- **Scanner B**
- **Scanner C**

These scanners were chosen based on their widespread use and reputation in the industry.

---

This optimized version of the text aims to improve clarity, coherence, and professionalism. It provides a more structured and detailed introduction, clearly outlines the experimental study, and ensures that the key points are effectively communicated.