res = pthread_mutex_init (&work_mutex, NULL):
if tres != 0){
exit(EXIT_FAILURE);
perror(*Mutex initialization falled*):
接着启动新线程。下面是将要在线程函数里执行的代码
pthread_mutex__ock(&work_nutex):
while(strncnpiend*, work_area, 3)= 0)(
ptintt(*Yv Input ed characters\n*,stren/work_area) -1);
work_aed[C]*\0;
pthread_mutex_unlock (&work_mutex);
pthread_mutex_lock [&work_mutex);
sleep (1i ;
while（work_area{0]==*\0*）{
pthxead_mutex_unlock(&wo:k_zutex):
pthread_mutex_lock(6work_mutex):
sleep(1) :
time_to_exit = 1:
pthread_mutex_unlock (swork_mutex1 ;
wok_area|0]=*\0′;
新线程一上来先试图对互斥量进行加锁。如果它已经被锁上了，调用将被阻塞到它释放为
此。一且有了访问权，我们将先检查是否有退出程序的请求。如果有退出程序的请求，我们就
简单地设置好timc_to_cxit变量，再把工作区里的第一个字符设置为“Vo”，然后退出程序。
如果我们还不想退出，就对字符个数进行统计，然后把工作区里的第一个字符设置为一个
空字符null。我们用把第一个字符设置为空字符的办法通知读输入程序，该程序表明我们已经
完成了字符统计工作。接下来，我们对互斥量进行解锁并等待主线程的运行。我们将周期性地
尝试给互斥量加锁，如果加锁成功，就检查主线程是否又给了我们送来另外一些字符去统计。
如果还没有，我们就解开互斥量继续等待；如果有了，我们就统计那些字符并再次进人刚才的
循环。
下面是主线程的代码清单：
pthread_mutex_lock (4work_mutex) ;
printf(*Input some text. Enter ‘end· to finish\n*):
while(!eine_to_exit)(
fgets work_area,
WORK_SIZE,stdin);
pthread_mutex_unlock(&work_mutex);
while(1){
pthread_mut.ex_lock(&work_mutex);
if(work_area0]!=\0'）（
pthread_mutex_unloek (&work_mutex) ;
sleep(11 :
else
break:
1
加入java编程群：524621833
---
## Page 359
第11章POSIX线程341
pttread_mutex_un1ock (&work_mutex) ;
这段代码很面熟。我们给工作区加上锁，把文本读到它里面，然后给它解锁使它允许被其
他线程访问并对其中的字符个数进行统计。我们周期性地对瓦斥量再进行如锁，检查是否已经
统计完了（work_area(0）是一个空字符时表示统计工作做完了），如果还需要等待就释故互斥量：
正如我们前面已经说过的，好的程序设计一般不会出现这种繁忙的跳跃式检查，在现实世界里，
我们应该尽可能地用一个信号量来避免出现这样的情况。这段代码只是用在这里做示范罢了。
11.6线程的属性
我们在前面的内容里对线程的属性都是一笔带过的，面在这一小节我们将专门对它进行讨
论。线程的许多属性都能够被程序员控制，但我们将只对一些你最可能用到的进行介绍。其他
属性的详细资料可以在使用手册页里查到
在我们前面的程序示例里，我们都要在允许程序退出运行之前用pthread_join把各个线程都
归并到一起。如果我们想让线程向创建它的那个线程返回数据，就必须这样做。可有的时候，
我们既不需要第二个线程向主线程返回信息，也不想让主线程等待它。
假设我们在主线程继续向用户提供服务的同时创建了一个新线程，新线程的作用是对用户
正在编辑的一个数据文件进行备份存储。备份工作完成后，那第二个线程直接结束就行了：它
设有必要再归并到主线程去。
我们可以创建出这种行为的线程来。它们叫做“脱离线程”，创建它们的办法有两种，一种
是修改线程的属性，一种是调用pthread_detach。因为我们的目的是介绍属性的用法，所以我们
将使用前一种办法。
我们需要用到的最重要的函数是pthread_attr_init，它的作用是对一个线程属性对象进行初始
化。请看它的定义：
#include 
int pthread_atte,init (pthrcad_attr_t *attr1;
这个函数在成功时会返回“0”，在失效时会返回一个错误代码。
还有一个反操作函数pthread_attr_destroy，但在我们编写这本书的时候，它在Linux里的实
现是什么也不做。它的目的是对属性对象进行清理和回收。虽然在它目前在Linux里还是什么都
不做，但也许有一天它的实现会发生改变并要求对它进行调用，所以大家还是应该在程序里调
用它才好。
在线程属性对象的初始化工作完成之后，我们可以调用其他一些函数来设置不民的属性行
为。我们把它们都列在下面，但只对其中的两个做详细的说明。下面就是可供选用的属性函数
清单。
int pthread_attr_setdetachstateipthzead_attr_t *attr. int detachstato);
int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate):
int pthread_attr_setschedpolicy(pthread_atsr ,t *attr, int policy1:
加入jaVa编程群：524621833
---
## Page 360
342Linux程序设计
int pthread_attr_getschedpolicy(const pthread_attr_t *attr, int *p>lity);
int pthread_attr_setschedparan(pthread_attr_t *attr. const struct sched_param *paxan)
int pthread_attr_getschedparaniconst pthread_attr_t *attr, struct sched_param *param)
int pthread_attr_setinheritsched(pthread_attr _t *attr. int inherit):
Int pthread_attr_getinheritsched(const pthread_attr_t *attr. int *inherit];
int pthread_attr_setscope(pthread_attr_t *attr. int scope):
int pthread_attr_getscope(const pthread_attr_t *attr. int *scope):
int pthread_attr_setstacksize(pthread_attr_t *attr. int scope);
int pthread_attr_getstacksize(const pthread_attr_t *attr, int *scope);
大家可以看到，线程的属性还算不少。
11.6.1detachedstate属性
这个属性允许我们不对线程进行重新归并。它与大多数“_set”类函数一样，要用一个属性
指针和一个标志来确定最终的状态。pthread_attr_setdetachstate函数用到的两个标志分别是
PTHREAD_CREATE_JOIN和PTHREAD_CREATE_DETACHED。这个属性的缺省取慎是
PTHREAD_CREATE_JOIN，也就是允许两个线程归并。如果这个标志的状态被设置为
PTHREAD_CREATE_DETACHED，我们就不能调用pthread_join来检查另一个线程的退出状态了。
11.6.2schedpolicy属性
这个属性控制着线程的时间分配方式。它的可用取值是SCHED_OTHER、SCHED_RP和
SCHED_FIFO。这个属性的缺省取值是SCHED_OTHER。另外两种定时方式只能用在以超级用
户权限运行的进程里，它们都有实时定时功能，但在行为上略有区别。SCHED_RP使用轮转定
时机制，面SCHED_FIFO则使用“先入先出”策略。对它们的讨论超出了本书的讨论范圈。
11.6.3schedparam属性
它是schedpolicy属性的一个搭档，它对以SCHED_OTHER定时策略运行的线程的时间分配
进行控制。我们马上就会看到一个它的用法示例。
11.6.4inheritsched属性
这个属性有PTHREAD_EXPLICT_SCHED和PTHREAD_INHERIT_SCHED两个可用取值。
其中，缺省取值是PTHREAD_EXPLICT_SCHED，表示时间分配由属性来明确地设置。如果把
它设置为PTHREAD_INHERIT_SCHED，新线程将继承沿用它创建者使用着的参数。
11.6.5scope属性
这个属性控制着线程时间分配方面的计算方式。现阶段的Linux只支持它的一种取值：
PTHREAD_SCOPE_SYSTEM，所以我们这里就不做进一步介绍了。
加入iaVa编程群：524621833
---
## Page 361
第11章POSIX线程
11.6.6 stacksize属性
这个属性控制着线程创建堆栈的长度，它以字节为计算单位。它属于POSIX技术规范里的
“可选”部分，只有定义有_POSIX_THREAD_ATTR_STACKSIZE宏的实现版本才支持它。
Linux在实现线程时缺省使用的堆是非常大的，所以这个功能在Linux上显得有些多余，因此
也就很少有版本实现它了
动手试试：把属性设置为脱离状态
我们以thread6.c为例向大家介绍脱离线程。我们创建一个线程属性，把它设置为脱离状态，
然后用这个属性创建一个线程。子线程在完成工作时以正常方式调用pthread_exit。但这一次原
先的线程不再等待要与它创建的线程重新合并了。大家将会看到，主线程通过一个简单的
thread_finished标志来检查子线程是否已经结束，面线程们依然共享着变。
#include 
#include 
includn 
#include 
: [6te, pton)uojaoumgpeazu. pToA
char nessage[] e *Hello World*;
int thread_finished s 0;
int main(){
pthread_t a_thread;
int res;
pthread_attr_t thread_attr;
res = pthread_attr_init[&thread_attr);
1f(res= 0){
perror(*Attzibute creation failed’);
exit(EXIT_FAILURE):
res = pthread_attr_setdetachstate(&thread_attr. PTHREAD_CREATE_DETACHED);
if (res 1= 0) {
perror("Setting detached attribute failed’):
exit (EXIT_FAILURE) :
res = pthread_create(ba_thread,sthread_attr, thread_function,(void *)aessage);
if (res != 0){
perror(*Thread creation failed*):
exit (EXIT_FAILURE) :
(voidlpthread_attr_destroy(sthread_attr):
while(!thread_finished)
printt(waiting for thread to say it's finished...\n*);
sleep(1):
printt(*other thread finished, bye!\n);
1
exit(EXIT_SUCCESS):
void*thread_functionivoid*arg](
printf(*thread_function is running. Argument was $s\n*,(char *)arg):
printt(*Second thread setting finished flag. and exiting now\n*);
sleep(4) :
thread_finished1:
pthread_exit (NULL) ;
加入java编程群：524621833
---
## Page 362
344
Linux程序设计
输出结果里没有什么令人吃惊的东西。
$ cc -D_REENTRANT thread6.c -o thread6 -1pthread
$./throad6
waiting for thread to say it's finished.
thread_function is ranning.Argunent was He:o Word
Waiting for thread to say it's finished.
Waiting for thread to say it's finished.
waiting for thread to say it's firished.
Second thread setting finished flag, and ex:ing now
Other thread finished. bye'
操作注释：
这个程序里有两段代码比较重要，第一段代码是：
pthread_attr_t thread_attr;
if (res lx 0）
res = pthread_attr_init (athread_attr):
perrort*Attribute creation failec*1;
exit(EXIT_FATLURE) ;
这段代码用来声明一个线程属性并对它进行初始化：第二段代码是：
ras = pthread_attr_setdeteChstate(&thread_attt, PTHREAD_CREATE_DETACHED);
if （res I= 0）
perror(*Setting detached attribute failed*1;
exit (EXIT_FAILURE}:
它把属性的值设置为脱离状态。
其他不太重要的区别是创建线程和传递属性的地址：
res = pthread_create{&a_thread. sthread_attr, thread_function, (void *)nessagel:
和为保证程序的完整性而对属性进行的清理回收：
pthreed_attr_destroy(&thread_attr ):
11.6.7线程属性—调度
我们来看看另外一个我们可能会修改到的线程属性：调度。这与设置脱离状态的情况很相
似，我们可以用sched_get_priority_max和sched_get_priority_min这两个函数来查明可用的优先
级级别。
动手试试：调度
thread7.c与前面的例子很相似，所以我们只把它与其他示例不同的地方说明一下。
设置好脱离属性之后，我们对调度策略进行了设置，如下所示：
res = pthzead_attr_setschedpolicy(&thread_attr, SCHED_OTHER):
if (res = 0) {
perror(*Setting scheduling policy failed*):
加入jaVa编程群：524621833
---
## Page 363
第1I章POSIX线程
345
接着我们查明允许的优先级范围，如下所示：
max_priority = sched_get_priority_nax(SCHED_oTHER):
min_priority = sched_get_priority_min(SCHED_OTHER) :
然后设置这一属件，如下所示：
scheduling_value.sched_priority = min_priority:
pthread_attr_setschedparam(schread_attr, &scheduling_value):
exit (RXIT_ FAILORE) :
perror(*Setting scheduling piority ailed*):
1
操作注释：
这与设置一个脱离状态属性的过程很相似，区别仅在于我们是对调度策略进行设置的
11.7取消一个线程
有时候，我们想让一个线程能够请求另外个线释结束，就像给它发送了一个信号似的。
用线程是可以完成这一操作的，而与单处理相比、线程在被要求结束执行的时候还有一种改变
其行为的办法。
我们先来看看要求一个线程结束执行的函数
inclvde 
irt pthread_cancel (pthread_t thread ↓:
这个定义很明白，给定一个线程标识符，我们就能要求取消它。但在取消线程请求的接收
端，事情会稍微复杂一些，好在也不是太复杂。线程可以用pthread_setcancelstate设置自已的取
消状态，下面是这个函数的定义：
include 
int pthread_setcancelstate (int state, nt *oldstate );
第-个参数可以是PTHREAD_CANCEL_ENABLE，这个值允许线程接收取消请求；还可以
是PTHREAD_CANCEL_DISABLE，它的作用是屏蔽它们。线程以前的取消状态可以用oldstate
指针检索出来，如果对它没有兴趣，可以简单地传递一个NULL过去。如果取消请求被接受了，
线程会进人第二个控制层次—用pthread_sctcanceltype设置取消类型。
1nclude 
int pthread_setcaneeltype (int type, int *oldtype );
type参数可以有两种取值，一个是PTHREAD_CANCEL_ASYNCHRONOUS，接收到取消请
求后立刻采取行动：另一个是PTHREAD_CANCEL_DEFERRED，在接收到取消请求之后、采
取实际行动之前，先执行以下几个函数之一：pthread_join、pthread_cond_wait、
pthread_cond_tomewait、pthread_testcancel、sem_wait或sigwait。