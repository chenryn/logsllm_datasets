# 一文解密所有WebLogic密文

##### 译文声明
本文是翻译文章，原文作者为TideSec安全团队，来源于TideSec安全团队。  
原文地址：[请提供原文链接]  
译文仅供参考，具体内容表达及含义以原文为准。

## 前言
关于WebLogic密文的解密已有不少文章，最早的可能是乌云平台上的解密文章。随后，Oracle官方也发布了解密脚本，还有国外专家NetSPI开发的工具。然而，在多次试用中发现这些方法并不能解决所有WebLogic密文问题。因此，在查阅大量资料后，我们整理了7种解密WebLogic的方法。

## 背景
在某些黑客行动（如HW行动）中，WebShell权限的价值可能低于数据库权限。因此，获取WebShell后，通常会立即查找配置文件中的数据库连接密码，通过代理连接数据库并截图以获得分数。此外，如果长时间未登录WebLogic导致忘记了控制台密码，也需要对密文进行解密。对于使用Tomcat中间件的情况，数据库连接密码通常是明文保存的，但许多政府单位或大中型企业更倾向于使用WebLogic。在生产环境中，WebLogic默认会对数据库连接字符串和控制台登录凭据进行加密。

## WebLogic加密分析
目前市场上WebLogic主要采用两种加密方式：3DES和AES。这两种加密都属于对称加密，只要有密钥就能解出密文。

### 简要介绍3DES和AES
- **DES (Data Encryption Standard)**: 数据加密标准是一种经典的对称算法，数据分组长度为64位，密钥长度为56位（8位用于奇偶校验）。该技术由IBM公司在20世纪70年代开发，并于1976年被美国国家安全局采用。
- **3DES**: 随着计算机能力的发展，DES的56位密钥长度变得较短，容易受到暴力破解攻击。因此，出现了3DES，它相当于对同一数据块进行三次DES加密。如果三次DES使用的密钥完全不同，则密钥长度可达168位，大大增加了破解难度。
- **AES (Advanced Encryption Standard)**: AES是NIST（美国国家标准与技术研究院）选择的下一代加密算法，能够抵御已知的所有针对DES的攻击，并且比3DES具有更高的加密效率和安全性。

可以通过WebLogic版本号来区分加密方式。旧版本使用3DES，而从WebLogic 11gR1之后的版本开始使用AES。以下是WebLogic版本列表：
- **AES加密**:
  - WebLogic Server 12cR2 (12.2.1.4) – 2019年9月27日
  - WebLogic Server 12cR2 (12.2.1.3) – 2017年8月30日
  - WebLogic Server 12cR2 (12.2.1.2) – 2016年10月19日
  - WebLogic Server 12cR2 (12.2.1.1) – 2016年6月21日
  - WebLogic Server 12cR2 (12.2.1.0) – 2015年10月23日
  - WebLogic Server 12cR1 (12.1.3) – 2014年6月26日
  - WebLogic Server 12cR1 (12.1.2) – 2013年7月11日
  - WebLogic Server 12cR1 (12.1.1) – 2011年12月1日
  - WebLogic Server 11gR1 PS5 (10.3.6) – 2012年2月23日
  - WebLogic Server 11gR1 PS4 (10.3.5) – 2011年5月6日
  - WebLogic Server 11gR1 PS3 (10.3.4) – 2011年1月15日
  - WebLogic Server 11gR1 PS2 (10.3.3) – 2010年四月
  - WebLogic Server 11gR1 PS1 (10.3.2) – 2009年11月
- **3DES加密**:
  - WebLogic Server 11g (10.3.1) – 2009年7月
  - WebLogic Server 10.3 – 2008年8月
  - WebLogic Server 10.0 – 2007年3月
  - WebLogic Server 9.2.4 – 2010年7月22日
  - WebLogic Server 9.1
  - WebLogic Server 9.0 – 2006年11月
  - WebLogic Server 8.1 – 2003年7月至2004年8月，已不再支持
  - WebLogic Server 7.0 – 2002年6月，推荐放弃使用
  - WebLogic Server 6.1 – 2006年11月起不再支持
  - WebLogic Server 6.0 – 2001年3月，2003年4月起不再支持
  - WebLogic Server 5.1 – 第一个支持热部署技术的版本
  - WebLogic Server 4.0 – 1999年
  - WebLogic Tengah 3.1 – 1998年6月
  - WebLogic Tengah 3.0.1 – 1998年3月
  - WebLogic Tengah 3.0 – 1998年1月
  - WebLogic Tengah – 1997年11月

即使看不到版本号，也可以通过查看配置文件中的连接字符串来判断加密方式。每个加密字符串前都有标识，如{AES}或{3DES}。

例如：
- **AES**: {AES}ObwFrA5PSOW+/7+vgtZpxk/1Esw81ukoknfH4QUYjWY=
- **3DES**: {3DES}JMRazF/vClP1WAgy1czd2Q==

## 解密前的准备
建议使用Docker搭建WebLogic环境。本文测试主要使用了WebLogic 10.3.6和12.2.1.3两个版本，Docker Compose文件可在[vulhub](https://github.com/vulhub/vulhub/tree/master/weblogic/)中找到。

### 准备事项
- **账号权限**: weblogic或root用户权限，能查看WebLogic域文件。
- **密钥文件**: `SerializedSystemIni.dat`，通常位于WebLogic域的`security`目录下，例如：
  ```
  /root/Oracle/Middleware/user_projects/domains/base_domain/security/SerializedSystemIni.dat
  ```
- **密文文件**: 
  - 数据库连接字符串: 通常在`config/jdbc`目录下的`jdbc.xml`文件中。
  - 控制台登录用户名和密码: 通常在`security`目录下的`boot.properties`文件中。

有了这些文件后，便可以尝试解密密文。

## 解密方法1：官方解密方法
Oracle官方曾提供过解密方法，但后来删除了。该方法需要在与WebLogic相同的域下使用，成功率较低。

### 适用场景
- 本地和服务器上都可以执行，但在本地执行时要求较多。
- 该方法直接在服务器上测试运行。

### 操作难易程度
- ★★★

### 成功几率
- ★★

### 推荐指数
- ★★

### 相关工具
- [GitHub链接](https://github.com/TideSec/Decrypt_Weblogic_Password/tree/master/Tools1-decryptWLSPwd)

### 官方Python解密脚本
```python
import os
import weblogic.security.internal.SerializedSystemIni
import weblogic.security.internal.encryption.ClearOrEncryptedService

def decrypt(agileDomain, encryptedPassword):
    agileDomainPath = os.path.abspath(agileDomain)
    encryptSrv = weblogic.security.internal.SerializedSystemIni.getEncryptionService(agileDomainPath)
    ces = weblogic.security.internal.encryption.ClearOrEncryptedService(encryptSrv)
    password = ces.decrypt(encryptedPassword)
    print("Plaintext password is:", password)

try:
    if len(sys.argv) == 3:
        decrypt(sys.argv[1], sys.argv[2])
    else:
        print("Please input arguments as below")
        print("Usage 1: java weblogic.WLST decryptWLSPwd.py <domain_path> <encrypted_password>")
        print("Usage 2: decryptWLSPwd.cmd <encrypted_password>")
        print("Example:")
        print("java weblogic.WLST decryptWLSPwd.py C:\\Agile\\Agile933\\agileDomain {AES}JhaKwt4vUoZ0Pz2gWTvMBx1laJXcYfFlMtlBIiOVmAs=")
        print("decryptWLSPwd.cmd {AES}JhaKwt4vUoZ0Pz2gWTvMBx1laJXcYfFlMtlBIiOVmAs=")
except:
    print("Exception:", sys.exc_info()[0])
    dumpStack()
    raise
```

### 服务器上运行命令
```sh
java weblogic.WLST decryptWLSPwd.py . "{AES}yvGnizbUS0lga6iPA5LkrQdImFiS/DJ8Lw/yeE7Dt0k="
```

由于成功率低或其他原因，官方随后删除了该脚本。NetSPI的大佬编写了一个新的工具，并撰写了分析过程的文章，详见[译文](http://bobao.360.cn/learning/detail/337.html)。

## 解密方法2：NetSPI大佬的工具
这是一个常用的WebLogic解密工具，但Java版编译略麻烦，成功率一般。

### 适用场景
- 本地机器执行

### 操作难易程度
- ★★★★

### 成功几率
- ★★★

### 推荐指数
- ★★

### 相关工具
- [GitHub链接](https://github.com/TideSec/Decrypt_Weblogic_Password/tree/master/Tools2-WebLogicPasswordDecryptor)

### Java版编译
- 下载`bcprov-ext-jdk15on-162.jar`包，并将其复制到`$JAVA_HOME/jre/lib/ext/`目录下。
- 在`$JAVA_HOME/jre/lib/security/java.security`文件中增加一行：
  ```sh
  security.provider.11=org.bouncycastle.jce.provider.BouncyCastleProvider
  ```
- 编译Java文件，输入密钥和密文即可解密。

### PowerShell版
- 导入模块：
  ```powershell
  Import-Module .\Invoke-WebLogicPasswordDecryptor.psm1
  ```
- 如果遇到“无法加载文件”的错误，执行以下命令：
  ```powershell
  set-ExecutionPolicy RemoteSigned
  ```

## 解密方法3：执行Java代码1
此方法可以在本地或服务器上执行。本地执行时需要WebLogic环境，且版本需与目标系统一致。在服务器上执行时，要求能通过WebShell执行Java命令。

### 适用场景
- 本地或服务器上都可执行

### 操作难易程度
- ★★★★

### 成功几率
- ★★★

### 推荐指数
- ★★★

### 相关工具
- [GitHub链接](https://github.com/TideSec/Decrypt_Weblogic_Password/tree/master/Tools3-Decrypt)

### 步骤
1. 找到`SerializedSystemIni.dat`文件并复制到其他文件夹，如`/tmp`。
2. 在该文件夹下新建一个Java文件`Decrypt.java`，内容如下：
   ```java
   import weblogic.security.internal.*;
   import weblogic.security.internal.encryption.*;
   import java.io.PrintStream;

   public class Decrypt {
       static EncryptionService es = null;
       static ClearOrEncryptedService ces = null;

       public static void main(String[] args) {
           String s = null;
           if (args.length == 0) {
               s = ServerAuthenticate.promptValue("Password: ", false);
           } else if (args.length == 1) {
               s = args[0];
           } else {
               System.err.println("Usage: java Decrypt [password]");
           }
           es = SerializedSystemIni.getExistingEncryptionService();
           if (es == null) {
               System.err.println("Unable to initialize encryption service");
               return;
           }
           ces = new ClearOrEncryptedService(es);
           if (s != null) {
               System.out.println("\nDecrypted Password is:" + ces.decrypt(s));
           }
       }
   }
   ```
3. 根据目标操作系统，找到并执行`setWLSEnv.cmd`或`setWLSEnv.sh`文件。
4. 确认`CLASSPATH`和`PATH`环境变量是否正确设置。
5. 编译并运行Java代码：
   ```sh
   javac Decrypt.java
   java Decrypt {AES}yvGnizbUS0lga6iPA5LkrQdImFiS/DJ8Lw/yeE7Dt0k=
   ```

## 解密方法4：执行Java代码2
此方法原理与方法3类似，但多了对XML的解析，可以一次性解密XML中的所有密文。

### 适用场景
- 本地或服务器上都可执行

### 操作难易程度
- ★★★★

### 成功几率
- ★★★

### 推荐指数
- ★★★

### 相关工具
- [GitHub链接](https://github.com/TideSec/Decrypt_Weblogic_Password/tree/master/Tools4-WebLogicDecryptor)

### 代码示例
```java
import java.util.*;
import java.io.*;
// 代码继续...
```

希望这些方法能帮助你成功解密WebLogic密文。更多详细信息和工具，请访问我们的[GitHub仓库](https://github.com/TideSec/Decrypt_Weblogic_Password)。