### Adversary Capabilities and Channel Compromise

The adversary is granted the ability to compromise the User-to-Device (UtD) channel. The `ShowUser` model represents the adversary gaining control over a device and inducing it to send messages to the user, such as through malware-induced pop-ups. Conversely, the `ControlUser` query allows the adversary to manipulate messages input to the device from the user, for example, via a Ghost Touch Generator or social engineering. Both `ShowUser` and `ControlUser` queries are limited in their effect to specific sessions, reflecting the time-sensitive nature of the adversary's compromise of the UtD channel.

### Freshness Definitions

#### 1. Device Freshness
**Definition III.8 (Device Freshness):** A device session oracle \(\piA_s\) is considered fresh in the uncompromised setting (UncUser-fresh) and fresh under compromised user type [x] (CompUser[x]-fresh) unless any of the following conditions hold:
- The adversary issues a `StateReveal(\(\piA_s\))` query.
- The adversary issues a `StateReveal(\(\piB_t\))` query, where \(\piB_t\) is partnered with \(\piA_s\).
- The adversary issues a `KeyReveal(\(\piA_s\))` query.
- The adversary issues a `KeyReveal(\(\piB_t\))` query, where \(\piB_t\) is partnered with \(\piA_s\).

These freshness conditions ensure that adversarial reveals are restricted on both the target device session and its partnered device session, aligning with established security practices. This restriction is analogous to limiting the corruption of long-term keys of the intended partner. In cyborg key exchange protocols, the user's role in authenticating devices is similar to that of a Certificate Authority in traditional Authenticated Key Exchange (AKE) protocols, thus relying on the user’s authentication to limit reveals.

#### 2. User Freshness
**Definition III.9 (User Freshness under No Compromise):** A user session oracle \(\piU_j\) is fresh in the uncompromised setting (UncUser-fresh) unless any of the following conditions hold:
- The adversary issues a `ShowUser(\(\piA_s\))` query before the last UtD message is sent and received between \(\piU_j\) and \(\piA_s\), where \(\piU_j\) is partnered with \(\piA_s\).
- The adversary issues a `ControlUser(\(\piU_j, A\))` query before the last UtD message is sent and received between \(\piU_j\) and \(\piA_s\), where \(\piU_j\) is partnered with \(\piA_s\).

**Definition III.10 (User Freshness under Compromise Type iu and ru):** A user session oracle \(\piU_j\) is fresh under compromised user, type iu (resp. type ru), denoted as CompUser[iu]-fresh (resp. CompUser[ru]-fresh), unless:
- The adversary issues a `ShowUser(\(\piA_s\))` query before the last UtD message is sent and received between \(\piU_j\) and \(\piA_s\), where \(\piU_j\) is partnered with \(\piA_s\), and \(\piA_s\).role = initiator (for iu) or \(\piA_s\).role = responder (for ru).
- The adversary issues a `ControlUser(\(\piU_j, A\))` query before the last UtD message is sent and received between \(\piU_j\) and \(\piA_s\), where \(\piU_j\) is partnered with \(\piA_s\).

**Definition III.11 (User Freshness under Compromise Type ui and ur):** A user session oracle \(\piU_j\) is fresh under compromised user, type ui (resp. type ur), denoted as CompUser[ui]-fresh (resp. CompUser[ur]-fresh), unless:
- The adversary issues a `ShowUser(\(\piA_s\))` query before the last UtD message is sent and received between \(\piU_j\) and \(\piA_s\), where \(\piU_j\) is partnered with \(\piA_s\), and \(\piA_s\).role = responder (for ui) or \(\piA_s\).role = initiator (for ur).
- The adversary issues a `ControlUser(\(\piU_j, A\))` query before the last UtD message is sent and received between \(\piU_j\) and \(\piA_s\), where \(\piU_j\) is partnered with \(\piA_s\).

**Definition III.12 (User Freshness under Compromise Type Combinations):** Let \(X\) be a non-empty subset of \(\{iu, ru, ui, ur\}\). We say that a user session oracle \(\piU_j\) is fresh under compromised user, type \(x\) (CompUser[x]-fresh) unless the adversary issues a single query that breaks CompUser[xi]-freshness simultaneously for all \(xi \in X\).

This definition ensures that a session oracle’s freshness is assessed per query under CompUser[x]-fresh, and the query must break freshness for the session oracle in all elements of the set \(X\) individually. This structure is necessary to capture more advanced attacks, such as the "Tap 'n Ghost" attack, which involves the corruption of communication channels in both directions.

### CYBORG Security Experiment

**Definition III.13 (CYBORG Security Experiment):** We define the CYBORG-type security experiment for a Probabilistic Polynomial-Time (PPT) adversarial algorithm \(A\) against a cyborg key exchange protocol \(\Pi\), interacting with a challenger via all previously defined adversarial queries. The adversary \(A\) wins the experiment if any of the following conditions hold for type \(\in \{UncUser, CompUser\}\):

1. **Correctness (correct):** There exist two type-fresh and partnered device oracles \(\piA_s\) and \(\piB_t\) both partnered with the type-fresh user oracle \(\piU_j\), and either \(\piA_s\).δ ≠ accept or \(\piB_t\).δ ≠ accept.

2. **Entity Authentication (auth):** There exists a type-fresh session oracle \(\piA_s\) such that \(\piA_s\).δ = accept with intended partner pid = B, \(\piA_s\) is partnered with the type-fresh user oracle \(\piU_j\), and the adversary has not issued a `StateReveal(\(\piB_t\))` query while \(\piA_s\).δ ≠ accept, and there does not exist a unique session oracle at B that is partnered with \(\piA_s\).

3. **Key Indistinguishability (key-ind):** There exists a type-fresh session oracle \(\piA_s\) such that \(\piA_s\).δ = accept with intended partner pid = B, \(\piA_s\) is partnered with a type-fresh user oracle \(\piU_j\), and at some point in the experiment, the adversary issued a `Test(\(\piA_s\))` query on a type-fresh session oracle \(\piA_s\). The adversary has not issued a `StateReveal(\(\piB_t\))` query while \(\piA_s\).δ ≠ accept, and there exists an oracle \(\piB_t\) partnered with \(\piA_s\). At some subsequent point, \(\piA_s\) responds with its guess \(b\), where \(\Pr[b = b'] \geq 1/2\) and \(b'\) is the randomly sampled bit from the associated `Test` query.

**Definition III.14 (Security Definition):** If there exists a negligible function \(\text{negl}(\lambda)\) such that for all PPT adversaries \(A\) interacting according to the CYBORG-type experiment, it holds that:
\[
\text{Adv}_{\Pi,A,\eta_p,\eta_s}^{\text{CYBORG-type}}(\lambda) \leq \text{negl}(\lambda),
\]
then we say that the protocol \(\Pi\) is CYBORG-type-secure.

### Analysis of Passkey Entry

In this section, we present the initial results of our analysis of Passkey Entry under the CYBORG security model and show that all versions of Passkey Entry fail to meet any version of CYBORG security. For Initiator/Responder-Generated Passkey Entry, the failure is due to the first 19 generated nonces not being authenticated in Phase 3, leading to an adversarial forgery based on a single bit guess and consequently failing session matching. For User-Generated Passkey Entry, the failure is due to the lack of guaranteed role agreement during protocol execution.

We define the session-state information for all versions of Passkey Entry and a given session oracle \(\piA_s\) as:
\[
\piA_s\).state = (SKa, r, Na,1, \ldots, Na,20),
\]
where all values are as defined in Section II. This captures all randomly generated information a device considers secret in the session-state, including nonces that are made public during the protocol but used as secret keys before disclosure.

Since all versions of Passkey Entry are susceptible to passkey reuse attacks, the passkey \(r\) must be generated as an ephemeral secret. This presents a unique modeling challenge. If generated by a device, the passkey may be derived from the same source of randomness as other ephemeral keys or nonces. If generated by a user, it is assumed that the user has a means of random number generation, such as a keyfob or other source.

### Protocol Phases

#### Phase 0: Init and IOcap Exchange
- **Exchange:** A, B, IOcapA, IOcapB

#### Phase 1: Public Key Exchange
- **Initiating Device A:**
  - \(SKa \leftarrow \{0, 1\}^{255}\)
  - \(PKa \leftarrow [SKa]P\)
- **Initiating Device B:**
  - \(SKb \leftarrow \{0, 1\}^{255}\)
  - \(PKb \leftarrow [SKb]P\)

This structured approach provides a clear and coherent explanation of the definitions, security experiment, and analysis, ensuring the text is professional and easy to follow.