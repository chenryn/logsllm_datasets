can occur either because of node- or link-level failures that
prevent a sensor’s reading from being included in the ﬁnal
aggregate, or simply because not every sensor will have a
reading to contribute to every query. In this case, the sink
node will compute an incorrect aggregate key K.
If the
sink attempts to decrypt the aggregate ciphertext using the
wrong aggregate key, the resulting value will be a random
element from the set {0, . . . , M − 1}. This random and un-
bounded error is due to the semantic security of the cipher,
which ensures that a ciphertext reveals no information about
the corresponding plaintext without the appropriate key.
To account for the above types of problems, our protocol
introduces modiﬁcations to the Cascaded RideSharing pro-
tocol that allow the sink node to eﬃciently determine which
sensors contributed readings to the ﬁnal aggregate and thus
correctly compute the aggregate key that should be used
to recover the true aggregate value from the ciphertext re-
ceived.
Algorithm 1 contains pseudo-code describing the aggre-
gation protocol as run by sensor nodes that help aggregate
and route readings in the network, and optionally contribute
their own readings to the aggregate being computed. This
algorithm takes four inputs: a set of child nodes for which
this node is the primary parent (P C), a set of child nodes
for which this node is a backup parent (BC), the list of peer
nodes in this track (SP ), and an optional sensor reading to
include in the aggregation (m). In addition to maintaining
the L vector needed by the Cascaded RideSharing protocol,
Algorithm 1 also maintains a privacy vector, called the P
vector, to keep track of nodes that have successfully con-
tributed to the ﬁnal aggregate.
The protocol proceeds as follows. If the sensor node has
a non-null reading m to contribute to the aggregate, it is
ﬁrst encrypted and then added to the local aggregate A. At
this point, the node sets the bit corresponding to its ID
in the P vector to ‘1’, indicating that it has contributed to
the aggregate value. The sensor then waits to receive the L
vectors transmitted by the nodes in its track that precede it
in the TDMA transmission order to determine the corrective
action it needs to take for each child. At this point, the
sensor iterates over all of its child nodes and combines the
aggregate values and P vectors reported by these nodes with
its local values as indicated by the received L vector.
After receiving data from all of its child nodes, the sensor
transmits its updated aggregate value A, its updated P vec-
tor, and its local L vector to its parent nodes (primary and
backup) and to the peer (backup) parents.
700Algorithm 1: Aggregator
input : P C, BC, SP , m
A := 0;
P := ¯0;
L.r := ¯0;
L.e := ¯0;
if m NOT NULL then
// Aggregate own value
A := A + m + gID(kID) mod M ;
P [ID] := 1;
end
L := rcvL(SP );
foreach Child C in P C ∪ BC do
if rcv(Ac,Pc) from Child C then
if C ∈ P C OR (C ∈ BC AND L[C].e = 1 AND
L[C].r = 0) then
values
// Aggregate the received
A := A + AC mod M ;
P := P OR Pc;
L[C].e := 1;
end
else
L[C].e := 1;
end
end
end
Transmit(A,P ,L);
// Propagate the error signal
Algorithm 2: Final aggregation and decryption
algorithm used by the data sink
input : P C
output: F inalA
A := 0;
P := ¯0;
K := 0;
F inalA := 0;
foreach Child C in P C do
if rcv(Ac,Pc) from Child C then
A := A + AC mod M ;
P := P XOR Pc;
end
end
foreach bit set to ’1’ in P do
K := K + gi(ki) mod M ;
end
F inalA := A − K mod M ;
Algorithm 2 contains pseudo-code describing the proto-
col run by the sink node requesting the aggregate. This
algorithm takes only a single input: the set of children in
track 1 of the graph (P C). After the sink receives an en-
crypted value and a P vector from each of its responsive
children, it computes the sum of each such A value and the
bitwise OR of every P vector to compute both the ﬁnal (en-
crypted) aggregate value and the ﬁnal P vector indicating
which nodes successfully contributed to the aggregate. The
sink then generates the keystreams for each node indicated
in the ﬁnal P vector and uses the aggregate key to recover
the plaintext aggregate value.
3. SIMULATIONS AND EVALUATION
To understand the costs and beneﬁts of our approach we
implemented four protocols within the CSIM simulator [1]:
(i) a spanning-tree based aggregation protocol that provides
neither fault-tolerance nor data conﬁdentiality; (ii) the Cas-
caded RideSharing protocol, which provides only fault toler-
ance; (iii) the basic version of our protocol described, which
provides both fault-tolerance and data conﬁdentiality pro-
tection; and (iv) an enhanced version of our protocol that
applies run-length encoding (RLE) to the P vector to mini-
mize data transmission overheads.
All protocols were compared against three main metrics:
(a) average relative root mean square error (RMS) of the ﬁ-
nal aggregate normalized to the correct aggregate result; (b)
average energy consumed per node for transmitting, listen-
ing, and receiving data; (c) average message size transmitted
per node.
Extensive simulations show that our new protocol achieves
a high degree of robustness by oﬀering an improvement of
48.2% in the root mean square (RMS) error of the ﬁnal ag-
gregate result over the traditional spanning tree schemes
for networks with high error rates (up to 35%). The sys-
tem overheads in terms of average energy consumption and
average message size per node are acceptable in represen-
tative network settings. Speciﬁcally, our simulations show
that our protocol incurs only an average of 7.1% and 3.6%
increases in the average message size and average power
consumption, respectively for diﬀerent participation levels
of the sensor nodes. For dense network conﬁgurations and
100% nodes participation the maximum incurred power con-
sumption overhead was 25%.
4. CONCLUSION
In this poster, we presented a privacy-preserving and fault-
tolerant in-network data aggregation protocol for wireless
sensor networks. Our protocol allows the aggregation of sen-
sor readings while maintaining end-to-end privacy of both
individual sensor readings and the aggregate result. This
protocol makes use of a simple and eﬃcient additive homo-
morphic cryptographic scheme and further oﬀers robustness
of the aggregation process via modiﬁcations to the Cascaded
RideSharing fault tolerance scheme. The data sink is the
only authorized node capable of retrieving the ﬁnal plain-
text aggregate result. Furthermore, the protocol guarantees
that with high probability every sensor reading will con-
tribute to the ﬁnal aggregate through error detection and
error correction techniques. In the future, we plan to inves-
tigate ways of extending our protocol to also preserve the
integrity of the aggregation process in the presence of faulty
or malicious sensor nodes.
5. REFERENCES
[1] “CSIM Simulator”, http://www.mesquite.com/.
[2] J. Girao, D. Westhoﬀ, and M. Schneider, “CDA: Concealed data
aggregation in wireless sensor networks”, in Proc. 40th
International Conference on Communiacations, in IEEE ICC,
May 2005.
[3] C. Castelluccia, A. Chan, E. Mykletun, and G. Tsudik,
“Eﬃcient and provably secure aggregation of encrypted data in
wireless sensor networks”, ACM Transactions on Sensor
Networks, Vol. 5, No. 3, Article 20, May 2009.
[4] S. Gobriel, S. Khattab, D. Moss´e , J. Brustoloni, and R.
Melhem, “RideSharing: Fault tolerant aggregation in sensor
networks using corrective actions”, IEEE Communications
Society Conference on Sensor, Mesh and Ad Hoc
Communications and Networks,in SECON, 2006.
[5] W. He, L. Liu, H. Nguyen, K. Nahrstedt, and T. Abdelzaher,
“PDA: Privacy preserving data aggregation in wireless sensor
networks”, 26th IEEE International Conference on Computer
Communications, May 2007.
[6] Y. Sang, H. Shen, Y. Inoguchi, Y. Tan, and N. Xiong, “Secure
data aggregation in wireless sensor networks: A survey”, in
Proc. of the Seventh International Conference on Parallel and
Distributed Computing, in PDCAT, 2006.
[7] E. Mykletun, J. Girao, and D. Westhoﬀ, “Public key based
cryptoschemes for data concealment in wireless sensor
networks”, in Proc. IEEE International Conference on
Communications, in IEEE ICC, 2006.
701