tial diﬀerences between the two-server model and the earlier
multi-server models: (1) in the two-server model, a user ends
up establishing a session key only with the public server, and
the role of the back-end server is merely to assist the pub-
lic server in user authentication; while in the multi-server
models, a user establishes a session key (either diﬀerent or
same) with each of the servers. For exactly this reason, we
view the two-server system in [21] as a special case of the
gateway-augmented multi-server model of two servers; (2)
from security point of view, servers in the multi-server mod-
els are equally exposed to outside attackers (recall that the
gateway in the gateway-augmented multi-server model does
not enforce security), while in the two-server model, only the
public server faces such a problem. This clearly improves the
server side security and in turn the overall system security
in the two-server model.
It is clear that the two-server model has successfully elim-
inated drawbacks in the plain multi-server model (i.e., si-
multaneous communications between a user and multiple
servers) and the gateway-augmented multi-server model (i.e.,
redundancy), while allows for distribution of user passwords
and the veriﬁcation functionality to two servers so as to elim-
inate the single point of vulnerability in the single-server
model. As a result, the two-server model appears to be a
sound model for practical applications. We are thus moti-
vated to adapt the two-server model to the context of IDSs.
To that end, we specify that the public server acts as a
service server that provides application services, while the
back-end server is a control server whose sole purpose is to
assist the service server in user authentication (the service
server of course also participates in user authentication).
This enables to enforce clear separation of duty in our sys-
tem. We emphasize that in the plain multi-server model
and the gateway-augmented multi-server model, several or
all servers equally participate in user authentication as well
as service provision (this is implied by the fact that a user
negotiates a session key with each server).
Recall that an IDS is formed by many aﬃliating care
providers united under a single corporate authority shown in
Figure 2(a), where each aﬃliating organization serves a dif-
ferent aspect of care provision, has its own business interest,
and has a distinct group of users. We generalize the above
two-server model to an architecture of a single control server
supporting multiple service servers outlined in Figure 2(b).
As such, application of this generalized architecture to an
IDS is as follows: the corporate authority of the IDS man-
ages the control server, and each aﬃliating care provider
operates a service server that provides a certain care service
to its own users.
The two-server model we employ together with its appli-
cation to IDSs enjoys many advantages:
• A single point of vulnerability as in the single-server
model is totally eliminated. In principle, without com-
promising both servers no attacker can ﬁnd user pass-
words through oﬀ-line dictionary attacks. On the other
hand, as the control server is isolated from the public,
the chance for it being attacked is substantially min-
imized, thereby increasing server side security and in
turn security of the overall system.
• It decreases the demand of bandwidth as well as syn-
chronization at the user side since users do not engage
in simultaneous communication with multiple servers.
This is of particular importance when supporting wire-
less healthcare applications.
• In an IDS, the corporate authority naturally assumes
strong security expertise and suﬃcient funds, and is
thus in a much better position to operate and maintain
the control server. Without the worry of a single point
of vulnerability, the aﬃliating care providers that op-
erate service servers are oﬄoaded to some extent from
strict security management, so they can dedicate their
limited expertise and resources to their core competen-
cies and to enhancing service provision to the users.
• From the perspective of users, they are oﬀered a way
to assume the higher creditability of an IDS as a whole,
while engaging business with individual aﬃliating care
providers.
It is clear that we have involved the corporate authority of
an IDS into the (partial) trust management of its aﬃliating
care providers. One may wonder why we simply delegate
full trust management of the aﬃliating care providers to the
corporate authority. First, in practice each aﬃliating care
provider has its own business interest, hence it has a stake
to involve into the trust management of its own; second and
more importantly, one of the main objectives of our system
is to eliminate a single point of vulnerability. Adversaries
take on a variety of forms in the real world, and no security
measures and precautions can guarantee that a system will
never be penetrated.
4. A BASIC TWO-SERVER PASSWORD AU-
THENTICATION AND KEY EXCHANGE
PROTOCOL
As discussed earlier, the existing password protocols upon
the two-server model such as [4, 26] are not password only
systems and have weaknesses. In this and the next two sec-
tions, we present practical password authentication and key
exchange protocols following the two-server model and the
generalized architecture.
In particular, we propose three
protocols: the ﬁrst protocol is based on a security model
that assumes the service server is controlled by an active
adversary while the control server is controlled by a passive
adversary; the second protocol assumes the same security
model but circumvents some weaknesses contained in the
ﬁrst protocol; the third protocol strengthens the security
model such that both servers are controlled by active adver-
saries. All protocols are password-only, requiring no public
key cryptosystem. We stress that each of these protocols
suﬃces for practical use and is of independent interest. We
start by listing the notations that are used in the sequel in
Table 1.

Figure 2: (a) Organizational architecture of IDSs (b) Generalization of the
two-server model to IDSs
Q, p, q
g1, g2
g3
π
h(.)
U , SS, CS
Table 1: Notations
Three large primes such that Q = 2p + 1 and p =
2q + 1.
g1, g2 ∈ QRp are of order q and the discrete loga-
rithms to each other are not known, where QRp is
the group of quadratic residues modulo p.
g3 ∈ QRQ is of order p.
A user’s password.
A cryptographic hash function modelled as the ran-
dom oracle [10].
Identity of user, service sever and control server, re-
spectively.
4.1 System Model
Three types of entities are involved in the protocol, i.e.,
users, service servers, and a control server. They are orga-
nized following the generalized architecture in Figure 2(b),
and each pair of a service server and the control server fol-
lows the two-server model in Figure 1(d). In this setting, a
user U only communicates with the service server SS he reg-
istered to and does not necessarily know the control server
CS. For the purpose of user authentication and key ex-
change, U uses a short password which is transformed into
two long secrets, which are held by SS and CS, respectively.
Based on their respective shares, SS and CS together vali-
date users during user login.
We assume the following security model for this proto-
col: CS is controlled by a passive adversary and SS is con-
trolled by an active adversary, in terms of oﬀ-line dictionary
attacks to user passwords, but they do not collude (other-
wise it is equal to the single-server model). By deﬁnition
(e.g., [16]), a passive adversary follows honest-but-curious
behavior, that is, it honestly executes the protocol accord-
ing to the protocol speciﬁcations and does not modify data;
but it eavesdrops on communication channels, collects pro-
tocol transcripts and tries to derive user passwords from the
transcripts; moreover, when a passive adversary controls a
server, it knows all internal states of and knowledge known
to the server including the long term secret key materials (if
any) and user password shares. In contrary, an active adver-
sary can act arbitrarily in order to uncover user passwords.
In addition, we assume a secret communication channel be-
tween SS and CS. We shall discuss how to remove this
assumption in the subsequent protocols.
Note that in this security model, while the control server
acting as a passive adversary is a relatively strong assump-
tion, it is quite reasonable considering the positioning of the
servers in the two-server model and the application scenario
of the model in IDSs. First, the control server is clearly more
trustworthy than the service server in the two-server model
as we discussed earlier. Second, consider the application
scenario of the two-server model in IDSs, where the control
server supports multiple service servers and is managed by
the corporate authority: on the one hand, the control server
deserves more investment for a higher level of security, since
it supports multiple service servers; on the other hand, the
corporate authority aﬀords investing more upon the control
server, since the corporate authority presumably has more
funds and security expertise.
4.2 A High Level Description
Central to our protocol design is to counter against oﬀ-line
dictionary attacks by the servers when they are controlled
by adversaries. The intuition is to “harden” a user’s short
password π into two long shares π1 and π2 in such a way that
each of them is no longer subject to oﬀ-line dictionary at-
tacks, and then distribute the shares to the two servers. As
a consequence, an attacker cannot succeed in oﬀ-line dictio-
nary attacks without grabbing both shares by compromising
both servers. During user login, the control server CS using
its share π2 assists the service server SS using π1 in user au-
thentication. More speciﬁcally, in an out-of-band user reg-
istration phase, user U splits his password π into two long
random secrets π1 and π2, and registers them to SS and
CS, respectively, where π1 + π2 = π. During user authenti-
cation, U using π and SS using π1 authenticate each other
and negotiate a secret session key, with the help of CS who
uses π2.
4.3 User Registration
In any password system, to enrol as a legitimate user in
a service, a user must beforehand register to the service
provider by establishing a password with the provider. In
our system, U needs to register to not only the actual service
provider SS but also the control server CS. Suppose U has
already successfully identiﬁed to SS, e.g., by showing his
identity card, U splits his password π into two long number

U
Input: π
SS
input: π1
CS
Input: π2
M 2: U , SS
−−−−−−−−−→
M 3: B2
←−−−−−−−−−
b2 ∈R Zq, B2 = gb2
1 gπ2
2
M 1: U , Req
−−−−−−−−→
M 4: B
←−−−−−−−−
M 5: A, Su
−−−−−−−−→
b1 ∈R Zq, B1 = gb1
1 gπ1
2
B = B1B2
S1 = Ab1
M 6: A, Su, S1
−−−−−−−−−−→
M 7: S2
←−−−−−−−−−−
S2 = Ab2
?
= h(S1S2)
Su
M 8: Ss
←−−−−−−−−−
Su
?
= h(S1S2)
Ss = h(0, S1S2)
K = h(U, SS, S1S2)
a ∈R Zq, A = ga
1
2 )a = ga(b1+b2)
Su = (B/gπ
Su = h(Su) = h(ga(b1+b2)
)
1
1
h(0, Su)
?
= Ss
K = h(U, SS, Su)
Figure 3: A Basic Password Authentication and Key Exchange Protocol.
π1 ∈R Z∗q and π2 ∈R Z∗q such that π1 + π2 = π (mod q),
where q is a prime deﬁned in Table 1. U then registers in a
secure way π1 and π2 to SS and CS, respectively. SS stores
(U , π1) to its secret user account database, and CS stores
(U , π2, SS) to its secret user account database. A user may
register to diﬀerent service servers, so CS must bind the
user identity U to the service server SS it registered to in
the user account. This completes the user registration step.
Recall however that CS stays hidden from U , then one may
wonder how U registers π2 to CS. This actually is not a
problem in practice: U can reach CS (actually the corporate
authority that manages CS) through out-of-band channels,
such as postal mail. Indeed, imagine that a user enrols in
a medical clinic, it is not strange at all that the user still
needs to submit a secret to a higher authority of the clinic
so as to activate his account.
4.4 Protocol
Let p, q, g1, g2 and h(.) be deﬁned in Table 1, we out-
line the basic password authentication protocol in Figure 3,
which enables mutual authentication and key exchange be-
tween U and SS. In the ﬁgure, we omitted the modulo p
notation for arithmetic operations, as this should be clear
from the context.
Let us take a close look at the protocol step by step. To
initiate a request for service, U sends his identity together
with a service request Req to SS in M 1. SS ﬁrst relays
the request to CS in M 2, and then selects a random num-
ber b1 ∈R Zq and computes B1 = gb1
(mod p) using his
password share π1. Upon receiving M 2, CS chooses a ran-
dom number b2 ∈R Zq and computes B2 = gb2
(mod p)
using his password share π2. CS then sends B2 in M 3 to SS.
Upon reception of B2, SS computes and sends B = B1B2
(mod p) to U in M 4. After receiving M 4, U selects a ∈R Zq,
2 )a = ga(b1+b2)
and computes A = ga
(mod p) and Su = h(Su), respectively. U then sends A
1 (mod p), Su = (B/gπ
1 gπ2
1 gπ1
2
1
2
1
?= h(S1S2) = h(ga(b1+b2)
Assuming SS receives S2 in M 7, it checks whether Su
and Su to SS in M 5. Getting the message, SS computes
S1 = Ab1 (mod p) and sends S1, A and Su to CS in M 6.
Upon receipt of M 6, CS computers S2 = Ab2 (mod p) and
): if it holds, CS