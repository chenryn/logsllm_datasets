title:Usable PIR
author:Peter Williams and
Radu Sion
Usable PIR
Peter Williams and Radu Sion∗
Network Security and Applied Cryptography Lab, Stony Brook University
E-mail: {petertw,sion}@cs.stonybrook.edu
Abstract
In [22] we showed that existing single-server computa-
tional private information retrieval (PIR) protocols for the
purpose of preserving client access patterns leakage are or-
ders of magnitude slower than trivially transferring the en-
tire data sets to the inquiring clients. We thus raised the
issue of designing efﬁcient PIR mechanisms in practical set-
tings.
In this paper we introduce exactly such a technique,
guaranteeing access pattern privacy against a computa-
tionally bounded adversary, in outsourced data storage,
with communication and computation overheads orders of
magnitude better than existing approaches.
In the pres-
ence of a small amount (O(√n), where n is the size of
the database) of temporary storage, clients can achieve
access pattern privacy with communication and computa-
tional complexities of less than O(log2n) per query (as
compared to e.g., O(log4n) for existing approaches).
We achieve these novel results by applying new insights
based on probabilistic analyses of data shufﬂing algorithms
to Oblivious RAM [17], allowing us to signiﬁcantly improve
its asymptotic complexity. This results in a protocol cross-
ing the boundary between theory and practice and becom-
ing generally applicable for access pattern privacy. We
show that on off the shelf hardware, large data sets can be
queried obliviously orders of magnitude faster than in exist-
ing work.
1 Introduction
In an increasingly networked world, computing and stor-
age services require security assurances against malicious
attacks or faulty behavior. As networked storage architec-
tures become prevalent – e.g., networked ﬁle systems and
∗The authors are supported in part by the NSF through awards CT CNS-
0627554, CT CNS-0716608 and CRI CNS-0708025. The authors also
wish to thank Motorola Labs, IBM Research, the IBM Software Cryptog-
raphy Group, CEWIT, and the Stony Brook Ofﬁce of the Vice President
for Research.
online relational databases in sensitive public and commer-
cial infra-structures such as email and storage portals, li-
braries, health and ﬁnancial networks – protecting the con-
ﬁdentiality and integrity of stored data is paramount to en-
sure safe computing. In networked storage, data is often
geographically distributed, stored on potentially vulnerable
remote servers or transferred across untrusted networks; this
adds security vulnerabilities compared to direct-access stor-
age.
Moreover, today, sensitive data is being stored on remote
servers maintained by third party storage vendors. This
is because the total cost of storage management is 5–10
times higher than the initial acquisition costs [12]. More-
over, most third party storage vendors do not provide strong
assurances of data conﬁdentiality and integrity. For exam-
ple, personal emails and conﬁdential ﬁles are being stored
on third party servers such as Gmail [2], Yahoo Mail [4],
Xdrive [3], and Files Anywhere [1]. Privacy guarantees
of such services are at best declarative and often subject
customers to unreasonable ﬁne-print clauses—e.g., allow-
ing the server operator (and thus malicious attackers gaining
access to its systems) to use customer behavior for commer-
cial proﬁling, or governmental surveillance purposes [9].
To protect data stored in such an untrusted server model,
security systems should offer users assurances of data con-
ﬁdentiality and access pattern privacy. However, a large
class of existing solutions delegate this by assuming the ex-
istence of co-operating, non-malicious servers. As a ﬁrst
line of defense, to ensure conﬁdentiality, all data and as-
sociated meta-data can be encrypted at the client side using
non-malleable encryption, before being stored on the server.
The data remains encrypted throughout its lifetime on the
server and is decrypted by the client upon retrieval.
Encryption provides important privacy guarantees at low
cost. It however, is only a ﬁrst step as signiﬁcant amounts
of information are still leaked through the access pattern of
encrypted data. For example, consider an adversarial stor-
age provider that is able to determine a particular region
of the encrypted database corresponds to an alphabetically
sorted keyword index. This is not unreasonable, especially
if the adversary has any knowledge of the client-side soft-
ware logic. The adversary can then correlate keywords to
documents by observing which locations in the encrypted
keyword index are updated when a new encrypted docu-
ment is uploaded.
In existing work, one proposed approach for achieving
access pattern privacy is embodied in Private Information
Retrieval (PIR) [8]. PIR protocols aim to allow clients to
retrieve information from public or private databases, with-
out revealing to the database servers which record is re-
trieved. Recently however, we showed [22] that deployment
of existing non-trivial single server PIR protocols on real
hardware of the recent past would have been orders of mag-
nitude more time-consuming than trivially transferring the
entire database. Their deployment would in fact increase
overall execution time, as well as the probability of forward
leakage, when the present trapdoors become eventually vul-
nerable – e.g., today’s queries will be revealed once fac-
toring of today’s values will become possible in the future.
We stressed that this result goes beyond existing knowledge
of mere “impracticality” under unfavorable assumptions.
On real hardware, no existing non-trivial single server PIR
protocol could have possibly had out-performed the trivial
client-to-server transfer of records in the past, and is likely
not to do so in the future either. This negative result is due to
the fact that on any known past general-purpose Von Neu-
mann hardware, it is simply more expensive to PIR-process
one bit of information than to transfer it over a network.
A related line of research tackles client-privacy of ac-
cesses to client-originated data on a server. Speciﬁcally, the
server hosts information for a client, yet does not ﬁnd out
which items are accessed. Note that in this setup the client
has full control and ownership over the data and other par-
ties are able to access the same data through this client only.
One prominent instance of such mechanisms is Oblivious
RAM (ORAM) [17]. For simplicity, in the following we
will use the term ORAM to refer to any such outsourced
data technique.
The recent advent of tamper-resistant, general-purpose
trustworthy hardware (such as the IBM 4764 Secure Co-
Processor [5]) opens the door to effectively deploying
ORAM primitives for PIR purposes (i.e., for arbitrary pub-
lic or private data, not necessarily originated by the cur-
rent client) by deploying such hardware as a trusted server-
side client proxy. The SCPU offers complete tamper detec-
tion, as well as remote code attestation to prove to clients
that a particular program is in fact running unmodiﬁed on
such a SCPU. However, trusted hardware devices are not a
panacea. Their practical limitations pose a set of signiﬁcant
challenges in achieving sound regulatory-compliance assur-
ances. Speciﬁcally, heat dissipation concerns under tamper-
resistance requirements limit the maximum allowable spa-
tial gate-density. As a result, general-purpose secure copro-
cessors (SCPUs) are often signiﬁcantly constrained in both
computation ability and memory capacity, being up to one
order of magnitude slower than host CPUs.
In this paper we ﬁrst introduce an efﬁcient ORAM pro-
tocol with signiﬁcantly reduced communication and com-
putation complexities (O(log2n) vs. O(log4n) for [17]) –
suited for deployment on constrained hardware such as SC-
PUs. We propose its deployment on existing secure hard-
ware (IBM 4764 [5]) and show that the achievable through-
puts are practical and orders of magnitude higher than ex-
isting work. These results constitute a ﬁrst step to making
PIR assurance truly practical.
2 Model
Deployment.
In our discourse, we will consider the fol-
lowing concise yet representative interaction model. Sen-
sitive data is placed by a client on a data server. Later,
the client or a third party will access the outsourced data
through an online query interface exposed by the server.
Network layer conﬁdentiality is assured by mechanisms
such as SSL/IPSec. Without sacriﬁcing generality, we will
assume that the data is composed of equal-sized blocks
(e.g., disk blocks, or database rows).
Clients need to read and write the stored data blocks
while revealing a minimal amount of information (prefer-
ably none) to the server. We will describe the protocols here
from the perspective of the client who will implement to
primitives: read(id), and write(id, newvalue). Speciﬁcally,
the (untrusted) server need not be aware of the protocol, but
rather just provide traditional store/retrieve primitives (e.g.,
a ﬁle server interface).
Timing attacks have the potential to leak some informa-
tion during the operation of this algorithm, if the algorithm
is not implemented properly to avoid these attacks. We as-
sume that the implementation is built in a manner that does
not leak any secret information (such as the location of the
fake blocks) through timing, noting that (1) any implemen-
tation can be turned into a timing-attack-free implementa-
tion simply by waiting longer on paths determined by secret
information so that the length of all paths matches the length
of the longest path, and (2) the transformation in (1) can be
achieved without affecting the running time complexity of
this algorithm.
Adversary. The adversarial setting considered in this paper
assumes a server that is curious but not malicious. While it
desires to illicitly gain information about the stored data,
it nevertheless executes all queries in a correct manner.
We are not concerned here with denial of service behav-
ior. We also assume the adversary can be represented by
a polynomial-time Turing machine; i.e., it is computation-
ally bounded, thereby allowing us to take advantage of the
following cryptographic primitives.
Cryptography. We require three cryptographic primi-
tives with all the associated semantic security [16] proper-
ties: (i) a secure hash function which builds a distribution
from its input that is indistinguishable from a uniform ran-
dom distribution, (ii) an encryption function that generates
unique ciphertexts over multiple encryptions of the same
item, such that a computationally bounded adversary has
no non-negligible advantage at determining whether a pair
of encrypted items of the same length represent the same or
unique items, and (iii) a pseudo random number generator
whose output is indistinguishable from a uniform random
distribution over the output space.
3 Related Work
PIR. Private Information Retrieval has been proposed
as a primitive for accessing outsourced data over a net-
work, while preventing its storer from learning anything
about client access patterns [8].
In initial results, Chor
et al.[8] proved that in an information theoretic setting in
which queries do not reveal any information at all about
the accessed data items, any solution requires Ω(n) bits
of communication. To avoid this overhead, if multiple
non-communicating databases can hold replicated copies of
the data, PIR schemes with only sub-linear communication
overheads are shown to exist [8]. For example, Sassaman et
al.[21] applied such a scheme to protect the anonymity of
email recipients. In the world of data outsourcing, in which
there are only a few major storage providers, we do not be-
lieve the assumption of non-collusion among such untrusted
servers is always practical, so we do not wish to rely on
this assumption. Goldberg et al.[15] introduced a construc-
tion that combines a multi-server PIR scheme with a single-
server PIR scheme, to guarantee information-theoretic PIR
if the servers are not colluding, but still maintain computa-
tional privacy guarantees when all servers are colluding.
It is not our intention to survey the inner workings (be-
yond complexity considerations) of various PIR mecha-
nisms or of associated but unrelated research. We invite the
reader to explore a multitude of existing sources, including
the excellent, almost complete survey by William Gasarch
[13, 14]. Additionally we invite the reader to explore the
results in [22] where we show that existing PIR protocols
are orders of magnitude slower that trivially transferring the
entire data sets to the inquiring clients.
It is worth noting that Asonov was the ﬁrst to introduce
[7] a PIR scheme that uses a secure CPU to provide (an ap-
parent) O(1) online communication cost between the client
and server. However, this requires the secure CPU on the
server side to scan the entire database on every request, in-
dicating a hidden computational complexity cost of O(n),
where n is the size of the database.
ORAM. Oblivious RAM [17] provides access pattern
privacy on a database, requiring only logarithmic storage.
The amortized communication and computational complex-
ities are both O(log3n), or O(log4n) in practice because the
asymptotic notation hides a very large constant factor in the
O(log3n) implementation. A variation of ORAM is imple-
mented by Iliev and Smith [18], who deploy secure hard-
ware to obtain PIR at a cost of O(√n log n). This is better
than the poly-logarithmic complexity granted by Oblivious
RAM for the small database sizes they consider. This work
is notable as one of the ﬁrst full ORAM-based PIR setups,
albeit with lower query throughputs.
A PIR mechanism with O(n/k) costs is introduced by
Wang et al.in [23], where n is the database size and k is
the amount of secure storage. The protocol is based on a
careful scrambling of a minimal set of server-hosted items.
A partial reshufﬂe costing O(n) is performed every time the
secure storage ﬁlls up, which occurs once every k queries.
While a signiﬁcant improvement, this result is not always
practical since the total database size n often remains much
larger than the secure hardware size k. In practice, hard disk
capacity (and enterprise database size) is increasing faster
than secured memory capacity, which is severely limited by
space and heat dissipation constraints inside a secure CPU.
In this paper we introduce a solution with only O(log2 n)
amortized overhead, in the presence of c√n temporary
client storage, where c is an independent security parameter.
We show this to be a (ﬁrst) solution that can be implemented
efﬁciently over large data sets.
3.1 Oblivious RAM Overview.
Since the proposed protocol is based on ORAM [17],
a brief summary of the operation of ORAM follows. The
database is considered a set of n encrypted blocks and sup-
ported operations are read(id), and write(id, newvalue).
The data is organized into log4(n) levels, pyramid-like.
Level i consists of up to 4i blocks. Each block is assigned
to one of the 4i buckets at this level as determined by a hash
function. Due to hash collisions each bucket may contain
from 0 to log n blocks.
Reading. To obtain the value of block id, the client must
perform a read query in a manner that maintains two invari-
ants: (i) it must never reveal which level the desired block
is at, and (ii) it must never look twice in the same spot for
the same block. To maintain (i), the client always scans a
single bucket in every level, starting at the top (Level 0, 1
bucket) and working down. The hash function informs the
client of the candidate bucket at each level, which the client
then scans. Once the client has found the desired block, the
client still proceeds to each lower level, scanning random
buckets instead of those indicated by their hash function.
For (ii), once all levels have been queried, the client then re-
encrypts the query result with a different nonce and places
it in the top level. This ensures that when the client repeats
a search for this block, it will locate the block immediately
(in a different location), and the rest of the search pattern
will be randomized. Note that the top level will quickly ﬁll
up; the process to dump the top level into the one below is
described later.
Writing. Writes are performed identically to reads in terms
of the data traversal pattern, with the exception that the new
value is inserted into the top level at the end. Inserts are
performed identically to writes, since no old value will be
discovered in the query phase. Note that semantic security
properties of the re-encryption function ensure the server
is unable to distinguish between reads, writes, and inserts,
since the access patterns are indistinguishable between each
case.
Level Overﬂowing. Once a top level is full, it is emptied
into the level below, and this second level is completely re-
encrypted, and re-ordered according to a new hash function.
Thus, accesses to this new iteration of the second level will
hence-forth be completely independent of any previous ac-
cesses. Note that each level will overﬂow once the level
above it has been emptied 4 times. Any re-ordering must be
performed obliviously: once complete, the adversary must
be unable to make any correlation between the old block lo-
cations and the new locations. A sorting network is used to
reorder the blocks.