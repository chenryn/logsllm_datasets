Information Security, 5(2):100–110, 2011.
[31] D. P. Martin, E. Oswald, M. Stam, and M. W´ojcik. A leakage
resilient mac. In IMACC 2015, pages 295–310, 2015.
[32] M. Medwed, F. Standaert, J. Großsch¨adl, and F. Regazzoni. Fresh
re-keying: Security against side-channel and fault attacks for low-
cost devices. In AFRICACRYPT, pages 279–296, 2010.
[33] S. Micali and L. Reyzin. Physically observable cryptography
(extended abstract). In TCC, pages 278–296, 2004.
[34] C. Namprempre, P. Rogaway, and T. Shrimpton. Reconsidering
generic composition. In EUROCRYPT, pages 257–274, 2014.
[35] NIST. FIPS PUB 186-4 Digital Signature Standard (DSS). http:
//nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf, 2013.
[36] K. G. Paterson and N. J. AlFardan. Plaintext-recovery attacks
against datagram TLS. In NDSS, 2012.
[37] O. Pereira, F. Standaert, and S. Vivek. Leakage-resilient authen-
tication and encryption from symmetric cryptographic primitives.
In ACM CCS, pages 96–108, 2015.
[38] K. Pietrzak. A leakage-resilient mode of operation. In EURO-
CRYPT, pages 462–482, 2009.
[39] E. Rescorla. The transport layer security (tls) protocol version
1.3. https://tlswg.github.io/tls13-spec/draft-ietf-tls-tls13.html,
July 2017.
[40] M. Rivain and E. Prouff. Provably secure higher-order masking
of AES. In CHES, pages 413–427, 2010.
[41] P. Rogaway and T. Shrimpton. Deterministic authenticated-
encryption: A provable-security treatment of the key-wrap prob-
lem. IACR Cryptology ePrint Archive, 2006:221, 2006.
[42] P. Rogaway and T. Shrimpton. A provable-security treatment of
the key-wrap problem. In EUROCRYPT, pages 373–390, 2006.
[43] F. Standaert, O. Pereira, and Y. Yu. Leakage-resilient symmet-
ric cryptography under empirically verifiable assumptions. In
CRYPTO, pages 335–352, 2013.
[44] N. Veyrat-Charvillon, B. G´erard, and F. Standaert. Soft analytical
side-channel attacks. In ASIACRYPT, pages 282–296, 2014.
[45] N. Veyrat-Charvillon, M. Medwed, S. Kerckhof, and F. Standaert.
Shuffling against side-channel attacks: A comprehensive study
with cautionary note. In ASIACRYPT, pages 740–757, 2012.
Conference’17, July 2017, Washington, DC, USA
[46] Y. Yu and F. Standaert. Practical leakage-resilient pseudorandom
objects with minimum public randomness. In CT-RSA, pages
223–238, 2013.
[47] Y. Yu, F. Standaert, O. Pereira, and M. Yung. Practical leakage-
resilient pseudorandom generators. In ACM CCS, pages 141–151,
2010.
A PROOF OF THEOREM 5.3
Let 𝒜 be a (𝑞, 𝑡)-CIML adversary against DTE making 𝑞𝑒 +
𝑞𝑑 ≤ 𝑞 queries, where 𝑞𝑒 is the number of encryption queries
and 𝑞𝑑 the number of decryption queries. We say that the
final output ciphertext (𝜏†, 𝑐†) is the (𝑞 + 1)-th query of the
game. Without loss of generality we assume that any answer
to some encryption query is never sent as a decryption query
and conversely. We also assume that the final output is not
an answer to some encryption query, otherwise the adversary
loses anyway.
Since we are in the same condition as in the proof of
misuse resistant, we name by ¯𝐸𝑖 the event where the winning
condition of CIML is satisfied which can be viewed as the
analogue of 𝐸𝑖 with an additional decryption query: the
(𝑞 + 1)-th query which is the last of the game. We thus
have to focus on proving that the (𝑞 + 1)-th query is also
invalid even when all the ephemeral key 𝑘0’s associated to
the encryption queries only are given in 𝐸𝑖.
Let’s see what happens in 𝐸1 where F* was replaced by
a random function f if f(𝜏 ) = 𝑘0 was given to the adversary,
where 𝜏 = f(H(𝑟‖𝑚)) for the encryption query (𝑟, 𝑚). Ob-
viously, 𝑘0 gives nothing more since in 𝐸1 the encryption
algorithm from 𝑘0 is run honestly as in 𝐸0. We then get an
adversary against F* in ¯𝐸1 making at most 2(𝑞 + 1) queries
since we must count the (𝑞 + 1)-th query and running in time
bounded by 𝑡 + (𝑞 + 1)(𝑡H + (2ℓ + 1)𝑡F) ≤ 𝑡′. Nevertheless, we
assume F* to be (2𝑞 + 2, 𝑡′, 𝜀F* )-pseudorandom and we find
| Pr[ ¯𝐸0] − Pr[ ¯𝐸1]| ≤ 𝜀F* .
Likewise with 𝐸1, we consider the partition ¯𝐸1 ∩ ( ¯𝐹1 ∪ ¯𝐹2)
and ¯𝐸1 ∩ ¯𝐹3, where ¯𝐹1 is the analogue of 𝐹1 meaning that
collision on associated digests occurs, where ¯𝐹2 is an extended
version of 𝐹2 where some associated digest H(𝑟, 𝑚) = ℎ is
equal to some associated 𝜏′ or to some associated 𝑘′′
0 (which
simply has the form f(𝜏′′) for some associated 𝜏′′), and where
¯𝐹3 is the complement of ¯𝐹1 ∪ ¯𝐹2. We stress that the fact that
the 𝑘0’s associated to encryption queries leak does not affect
the emulations made in 𝐹1, 𝐹2 and 𝐹3 since we remain in the
same game. It is now straightforwards that Pr[ ¯𝐹1] ≤ 𝜀𝑐𝑟 since
we get an adversary against the (0, 𝑡′, 𝜀𝑐𝑟)-collision resistance
of H running in the time bounded by 𝑡′. Moreover, since in
𝐹 ′
2 we already put targets of the range-oriented preimage
resistance of H in place of all the associated tags and the
associated ephemeral key 𝑘0’s we also have an adversary here
(built from 𝒜), for ¯𝐹2, asking/receiving at most (2𝑞 + 2)
targets and running in time bounded by 𝑡′. By assumption
on H, we must have Pr[ ¯𝐹2] ≤ 𝜀𝑐𝑟 and we are thus left with
bounding Pr[ ¯𝐸1| ¯𝐹3].
We are ready for the last transition from ¯𝐸1| ¯𝐹3 to ¯𝐸2 where
we reach the game where all the decryption queries including
the (𝑞 + 1)-th one are answered by ⊥. It is straightforward to
Francesco Berti, Fran¸cois Koeune, Olivier Pereira,
Thomas Peters, Fran¸cois-Xavier Standaert.
show that | Pr[ ¯𝐸1| ¯𝐹3]− Pr[ ¯𝐸2]| ≤ (𝑞 + 1)/2𝑛, which concludes
(cid:3)
the proof.
B PROOF OF THEOREM 6.1
Let 𝒜 be a (𝑞, 𝑡)-CIML adversary against DCE making 𝑞𝑒 +
𝑞𝑑 ≤ 𝑞 queries, where 𝑞𝑒 is the number of encryption queries
and 𝑞𝑑 the number of decryption queries. We have to bound
the probability Pr[CIMLDCE,𝒜 = 1]. Without loss of generality
we assume that any answer to some encryption query is never
sent as a decryption query and conversely. We also assume
that the final output is not an answer to some encryption
query, otherwise the adversary looses anyway.
The proof is in the spirit of the proof of Theorem 5.3 except
that 𝒜 cannot compute H itself: it must query the random
oracle to get h. However, since h is random here, the distribu-
𝑘(H(𝑟‖𝑚)) in DCE is similar to the distribution of
tion of F*
𝑘 ∘ F*
𝑘(H(𝑟‖𝑚)) in DTE by relying on the pseudorandomness
F*
of F*. Then, all the ephemeral keys 𝑘0 associated to encryp-
tion queries are random (See the proof of Theorem 5.3).
Let us assume that the final output ciphertext (𝜏†, 𝑐†) is the
(𝑞+1)-th query of the game. Then we only need to replace 𝑞+1
outputs of F*
𝑘 by random values (instead of computing 𝑘0’s).
By reusing the argument detailed in the proof of Theorem 5.3,
we obtain that the (𝑞 + 1, 𝑡′, 𝜀F* )-pseudorandomness of F*
is sufficient to bound the gap resulting from this transition
by 𝜀F* : we can easily build an adversary running in time
𝑡 + (𝑞 + 1)(2ℓ + 1)𝑡F ≤ 𝑡′, since all the h’s are already random.
The probability that some collision occurs among all the h’s
and the 𝑘0’s is bounded by 4(𝑞 + 1)2/2𝑛. Therefore, assuming
that no collision happens, if a decryption query (h, 𝑐) is valid it
must be the case that H(𝑟‖𝑚) returned by the random oracle
where 𝑟 and 𝑚 are computed during decryption matches h
which has a probability bounded by 1/2𝑛 for each query. Thus
all the ciphertexts of the encryption queries including the
(𝑞 + 1)-th one are invalid except with probability (𝑞 + 1)/2𝑛.
(cid:3)
𝒜L,DCE game.
C PROOF OF THEOREM 7.5
We start by defining Game 0 as the PrivKlmcpa,0
Game 1 is equal to Game 0, except that we abort if, when
processing the queries of 𝒜L, the same randomness 𝑟 is picked
𝑒 /|ℛ|.
twice. The probability of this event is bounded by 𝑞2
Game 2 is equal to Game 1, except that we abort if, when
processing the queries of 𝒜L, a collision happens on the hash
function, that is, it the adversary provides messages 𝑚 and
𝑚′ such that, when performing their encryption, it happens
that H(𝑟|𝑚) = H(𝑟′|𝑚′) (note that 𝑟 ̸= 𝑟′, because of the
failure condition of Game 1). The gap between Game 2 and
Game 1 is bounded by 𝜖cr: a collision resistance adversary
can run 𝒜L and its LMCPA challenger (in time 𝑡𝑐, and using
𝑞𝑒 + 1 leakage queries), and search for a collision (in time 𝑡𝑠𝑐),
placing us within the bounds of the hash function security.
Game 3 is equal to Game 2 except that, for all queries, the
challenger replaces the computation of the key 𝑘0 = F𝑘(h)
$← ℬ (we assume that
with the selection of a random key 𝑘0
this does not increase its running time). Since the previous
Ciphertext Integrity with Misuse and Leakage
Conference’17, July 2017, Washington, DC, USA
evaluation of the hash function that result from answering
the adversary’s queries in the LMCPA game (in Game 2). (cid:3)
D PROOF OF THEOREM 7.6
We only detail the steps that differ from the proof of Thm. 7.5.
We split Game 3 into two steps, in order to be able to
replace the tag 𝜏 and key 𝑘0 values with random values.
In the first step, we replace F𝑘 with a random function 𝑓 ,
bringing an 𝜖F gap as before. In the second step, we replace
the evaluation of 𝑓 by the selection of random values, which
is only equivalent if 𝑓 is never queried on the same value
twice. This is actually the case, except with probability less
than 4(𝑞𝑒 + 1)2/|ℬ|. Indeed: a collision between two hashes is
precluded by Games 1 and 2; a collision between two 𝜏 values
can only happen with probability bounded by (𝑞𝑒 + 1)2/|ℬ|
(this upper-bounds the probability of a collision in the range
of 𝑓 invoked on distinct values); and a collision between a
hash and a 𝜏 value is also bounded by by (𝑞𝑒 +1)2/|ℬ| (the 𝜏 ’s
a selected at random by 𝑓 , and each of them will collide with
one of the 𝑞𝑒 + 1 distinct hashes with probability (𝑞𝑒 + 1)/ℬ.
In a similar way, we add a step in Game 7, in order to
revert the transform above, bringing a second 2(𝑞𝑒 + 1)2/|ℬ|
(cid:3)
gap.
failure conditions guarantee that h is always fresh, the gap
between Game 3 from Game 2 is bounded by 𝜖F: a PRF
adversary can run 𝒜L and its LMCPA challenger (within
(𝑞𝑒 + 1, 𝑡𝑐) bounds), except that it queries the PRF challenger
with all the h values that it computes.
Game 4 is equal to Game 3 except that, during the test
query of the LMCPA game, the computation of 𝐻(𝑟‖𝑚0)
(and the corresponding leakage) is replaced by the computa-
tion of H(𝑟‖𝑚1). Here the probability of distinguishing Game
4 from Game 3 is bounded by 𝜖LH: an adversary against the
leakage resilience of H can run 𝒜L and its LMCPA challenger
(as tweaked in Game 3, and within (𝑞𝑒 +1, 𝑡𝑐) bounds), except
that it hands the computation of h to the leakage resilient
hash function challenger during the test query.
Game 5 is equal to Game 4 except that, during the test
query of the LMCPA game, the selection of a random 𝑘0
(from Game 3) is replaced by the selection of a random h*
and the computation of 𝑘0 = F𝑘(h*). The gap between Game
5 from Game 4 is bounded by 𝜖F: a PRF adversary can run
𝒜L and its LMCPA challenger (within (𝑞𝑒 + 1, 𝑡𝑐) bounds),
except that it queries the PRF challenger with the h* value
that it computes.
To sum up, at this stage, 𝒜L sees:
∙ During an encryption query: the expected hash and
leakage, and an encryption component encrypting that
hash and leakage, but with a randomly chosen 𝑘0 (hence
independent of the long-term key 𝑘).
∙ During the test query: the hash and leakage of (𝑟‖𝑚1),
followed by a PSV encryption of (𝑟‖𝑚0) with key 𝑘.
The presence of this isolated PSV encryption makes it possible
to use the leakage resilient eavesdropper security of that
scheme.
Game 6 is equal to Game 5 except that, during the test
query of the LMCPA game, we encrypt (𝑟‖𝑚1) instead of
(𝑟‖𝑚0). The gap between Game 6 and Game 5 is bounded
by 𝜖eav
PSV−ENC, since we can build an EAV adversary running
𝒜L and the LMCPA challenger (within (𝑞𝑒 + 1, 𝑡𝑐) bounds),
except that it hands the two messages (𝑟‖𝑚0) and (𝑟‖𝑚1) to
the leavchallenger and returns the corresponding ciphertext
to 𝒜L.
Game 7 now hops to the PrivKlmcpa,1
Game 4-5 transform.
𝒜L,DCE game by undoing
most of the hops that we made before, introducing the same
gaps again, but keeping 𝑚1 in place:
∙ We go back to a uniformly random 𝑘0 by undoing the
∙ We go back to the selection of random 𝑘0’s everywhere
∙ We stop aborting if the same randomness 𝑟 is picked
twice or if a collision happens in the hash function, as
in the Game 0-2 transforms.
to the use of a PRF as in the Game 2-3 transform.
To sum-up we observe that the total gap introduced by
our sequence of games is bounded by 2 𝑞𝑒|ℛ| + 2𝜖𝑐𝑟 + 4𝜖F +
𝜖LH + 𝜖eav
PSV−ENC. Besides, none of our reductions requires more
leakage function queries than those needed to run the LMCPA
challenger, and time more than the one needed to run that
challenger and look for a collision in the outputs of the