In Julia Master (and 1.6)
    julia> f(x) = (T=eltype(x); mapreduce(v->T(v), +, x))
    julia> @code_warntype f([3,4,5])
    MethodInstance for f(::Vector{Int64})
      from f(x) in Main at REPL[2]:1
    Arguments
      #self#::Core.Const(f)
      x::Vector{Int64}
    Locals
      #3::var"#3#4"{DataType}
      T::Type{Int64}
    Body::Any
    1 ─      (T = Main.eltype(x))
    │   %2 = Main.:(var"#3#4")::Core.Const(var"#3#4")
    │   %3 = Core.typeof(T::Core.Const(Int64))::Core.Const(DataType)
    │   %4 = Core.apply_type(%2, %3)::Core.Const(var"#3#4"{DataType})
    │        (#3 = %new(%4, T::Core.Const(Int64)))
    │   %6 = #3::Core.Const(var"#3#4"{DataType}(Int64))
    │   %7 = Main.mapreduce(%6, Main.:+, x)::Any
    └──      return %7
Could we make type inference smarter here?