## Page 304
278
第6章：打造高效正则裹达式
重叠。如果我们从左向右扫描这个正则表达式就会发现，应用到字符串时，存在三种可能：
注释部分能够匹配，于是一次性匹配注释部分，直接到达注释的末尾，或者
·
双引号字符串部分能够匹配，于是一次性匹配双引号字符串，直接到达其结尾，或者·
上面两者都不能匹配，本轮尝试失败。启动驱动过程，跳过一个字符。
这样，正则表达式永远不会从双引号字符串或者注释内部开始尝试，这就是成功的关键。
实际上，到目前为止还不够，因为这个表达式在制除注释的同时也会删除双引号字符事，
不过我们只需要再修改一小点就可以了。
/（+\[][/]）+\{]\/}xb=NWNOS
#匹配注释
{（[]1））.）xb=0S
#匹配双引号宇持串
$text=~B/($DOUBLE)1SCOMMENT/$1/g;
唯一的区别在于：
设置了捕获型括号，如果能够匹配双引号字符串对应的多选分支，则S1会保存对应的
内容。如果匹配通过注释多选分支，$1为空。
把replacement的值设置为s1。结果就是，如果双引号字符串匹配了，replacement就等
于双引号字符串一一并没有发生删除操作，替换不会进行任何修改（不过存在伴随效
应，即一次性匹配这个双引号字符串，直接到达其结尾，这就是把它放在多选结构首
位的原因）。另一方面，如果匹配注释的多选分支能够匹配，$1为空，所以会按照期
望删除注释（注8）。
最后我们还必须小心对付单引号的C常量，例如·\t。这很容易一—只需要在括号内添加
另外一个多选分支。如果我们希望去掉C++、Java、C#的//的注释，就可以把//[^\n]*
作为第四个多选分支，列在括号外。
2#{/（+\[][/]：）+\[]\/}xb=INNOOS
SCOMMENT2=qr{//[^\n]*};
匹配C++//注释
（（[]1\：）)xD=3700GS
#匹配双引号宇符事
（[.]1\:）.}xD=NISS
#匹配单引号宇符事
SteXt=~B/($DOUBLE|$SINGLE)1SCOMMENT↓SCOMMENT2/$1/g;
用作replacement时，undef就会被当作空宇符事，程序运行的结果如我们所感。不过如果
打开了Perl的警报功能（每个优秀的程序员都应该这么做），这样使用undef会报警。为
避免这种情况，应该在正则表达式之前使用编译指示“nowarnings”，或者使用特殊的
Perl替换符：
Stext=~8/(SDOUBLE)ISCOMMENT/defined($1)?$1:"/ge;
---
## Page 305
流畅运转的表达式
279
基本原理很好懂：引擎检查文本，迅速捕获（如果合适，则是删除）这些特殊结果。在我
的老机器（配置大概停留在1997年的水平）上，Perl脚本在16.4秒的时间内去掉了16MB，
500000行的测试文件中的注释。这已经很快了，不过我们仍然需要提高速度。
引导良好的正则表达式速度很快
A IVell-Guided Regex is a Fast Regex
暂停一会儿，我们能够直接控制这个正则引擎的运转，进一步提高匹配速度。来考虑注释
和字符串之间的普通C代码。在每个位置，正则引擎都必须尝试四个多选分支，才能确认
是否能匹配，只有四个多选分支都匹配失败，它才会前进到下一个位置，这些复杂工作其
实是不必要的。
我们知道，如果其中任何一个多选分支有机会匹配，开头的字符都必须是斜线、单引号或
是双引号。这些字符并不能保证能够匹配，但是不满足这些条件绝对不能匹配。所以，与
其让引擎缓慢而痛苦地认识到这一点，不如把（~"/]作为多选分支，直接告诉引擎。实
际上，同一行中任何数量的此类字符都能归为一个单元，所以我们使用[^"/]+1。如果你
记得无休止匹配，可能会为添加的加号担心。确实，如果在某种（）*循环中，它可能是很
大的问题，但是在这个例子中，它完全没有问题（之后没有元素强迫它回溯），所以，添加：
SOTHER=qr（[^"/]）；#可能作为某个多选结构开头的字持
SteXt =~8/(SDOUBLE|$SINGLE|SOTHER+)1$COMMENTI$COMMENT2/$1/g:
出于某些我们即将要看到的原因，我把加号量词放在SOTHER之后，而不是SOTHER的内容之
中。
我重新进行了性能测试，出乎意料的是，这样可以减少75%的时间。通过改进，这个表达
式节省了频紧尝试所有多选分支的大部分时间。仍然有些情况，所有多选分支都不能匹配
（例如‘c/3.14"），此时，我们只能接受驱动过程。
不过，事情还没有结束，我们仍然可以让表达式更快：
·在大多数情况下，最常用的多选分支可能是'SOTHER+J，所以我们把它排在第一位。
POSIXNFA没有这个问题，因为它总会检查所有的多选分支，但是对于传统型NFA，
它只要找到匹配就会停止，为什么不把最可能出现的多选分支放在第-一位呢？
---
## Page 306
280
第6章：打造高效正则表达式
-个引用字符串匹配之后，在其他字符事和注释匹配之前，很可能出现的就是SOTHER
的匹配。若在每个元素之后都添加'SOTHER*，就能够告诉引I擎下面必须匹配SOTHER，
而不用马上进入下一轮/g循环。
这与消除循环的技巧是很相似的，此技巧之所以能提高速度，是因为它主导了正则引
擎的匹配。这里我们使用了关于全局匹配的知识来进行局部优化，给引擎提供快速运
转必须的条件。
非常重要是，SOTHER*是加在每个匹配引I用字符事的子表达式之后的，而之前的
SOTHER（排在多选结构最前面的）必须用加号量词。如果你不清楚原因，请考虑下面
的情况：添加的是SOTHER+，而某行中有两个连在一起的双引号字符串。同样，如果
开头的SOTHER使用星号量词，则任何情况都能匹配。
最终得到：
(SOTHER+ISDOUBLESOTHER*ISSINGLESOTHER+)I$COMMENT|SCOMMENT2
这个表达式能把时间再减少5%。
回过头来想想最后两个改动。如果每个添加的SOTHER*匹配了过多的内容，开头的SOTHER
（我们将其作为第一个多选分支）只有两种情况下能够匹配：1）它匹配的文本在整个s/
//g的开头，此时还轮不到引用字符串的匹配；2）在任意一段注释之后。
你可能会想“从第二点考虑，我们不妨在注释后添加SOTHER+”。这很不错，只是我们希望
用第一对括号内的表达式匹配所有希望保留的文本一不要把孩子连洗澡水一起倒掉。
那么，如果SOTHER+出现在注释之后，我们是否需要把它放在开头呢？我觉得，这取决于所
应用的数据一如果注释比引用字符串更多，答案就是肯定的，把它放在第一位有意义。
否则，我就会把它放后面。从测试数据来看，把它放在前面的效果更好。排在后面大约会
损失最后的修改一半的效率。
8
---
## Page 307
总结：开动你的大脑
281
完工
Wrapup
事情还没有结束。不要忘记，每个匹配引号字符串的子表达式都应该消除猫环，本章已经
花了很长的篇幅讲解这个问题。所以，最后我们要把这两个子表达式替换为：
（[]·：）[]}xb=8nOGS
SSINGLE=qr{[\\]*（？：\\.[\\]*)*}
这样修改节省了15%的时间。这些细小的修改把匹配的时间从16.4秒缩短到2.3秒、提升
了7倍。
最后的修改还说明，用变量来构建正则表达式多么方便。$DOUBLE可以作为单独的元素独
立出来，可以改变，而不需要修改整个正则表达式。虽然还会存在一些整体性问题（包括
捕获文本括号的计数），但这个技巧确实很方便。
这种便利是由Perl的qr//操作符提供的，它表示与正则表达式相关的“字符串”。其他
语言没有提供相同的功能，但是大多数语言提供了便于构建正则表达式的字符串。请参见
101页的“作为正则表达式的字符事”。
下面是原始的正则表达式，看到它，你肯定会觉得上面的办法非常方便。为了便于印刷，
我把它分为两行：
[\\.].1[/.]（[-<]·\：)[-\]1+[/.]）
[u\]//1/（+\[+][+/<]:)+1[]\/1（[/.].（[11.]·1=)
总结：开动你的大脑
IniSummary:Tlink!
在本章的结尾讲个故事，我希望读者能够明白，在NFA中使用正则表达式时，稍微动动脑
筋能带来多大的收益。在使用GNUEmacs时，我希望用一个正则表达式来找出某种类型的
缩写，例如“don't”、“I'm”和“we'll”之类，同时必须忽略与单词邻接的单引号。我想用
\<\w+i来匹配单词，然后是（[tdm]Irell1|ve）。这办法没有问题，但是我意识到，使
用\<\W+是愚囊的，因为这里只用到\w。你看到了，如果撤号之前就是一个\w，\w+显然
也能够匹配，所以这个正则表达式检查并没有增加新的信息，除非我希望得到匹配的文本
（在这里并不需要，我们只需要找到这个位置）。单独使用\w的正则表达式的速度是原来的
10倍。
正因如此，一点点的思考就可以带来巨大的收获。我希望本章能够引发你的这点思考。
---
## Page 309
章
Perl
Perl
Perl在本书中的分量很重，这样安排有充分的理由。Perl很流行，提供的正则表达式特性很
丰富，容易下载到，也很容易入门，而且在Windows、Unix和Mac等各种平台上都有提供。
Perl的某些程序结构看上去类似C和其他传统编程语言，但也只是看上去像而已。Perl解决
问题的方式一Perl之道（ThePerlWay）一是不同于传统语言的。Perl程序的设计通常
使用传统的结构化和面向对象的概念，但是数据处理通常严重依赖正则表达式。我认为完
全可以这么说：正则表达式在所有的Perl程序中都不可或缺。无论这个程序是100000行，
还是一行：
这个程序检查所有的.txt文件，将其中的华氏温度转换为摄氏温度（还记得第2章开头的
例子吗）。
本章内容
本章讲解Perl的正则表达式的方方面面（注1），包括正则流派的细节，和使用正则表达式
的运算符。本章从基础开始介绍相关的细节，但我还是假设读者对Perl有基本的理解（如
果你看过第2章，看本章就没多大问题）。那些没有详细讲解的细节，我会一笔带过，也不
会费工夫来讲解语言中与正则表达式不相关的细节。在手边准备一本Perl的文档会很有帮
助，或者O'Reilly的ProgrammingPerl也行
注1：本书涵盖PerlVersion5.8.5。
---
## Page 310
284
第7章：Perl
即使你目前对Perl还不够了解也不要紧，重要的是要有进一步学习的欲望。从任何方面来
说，阅读本章都不是件轻松的事情。我的目的不是带读者入门，而是教给读者其他Per1的
书中没提供的有用知识：为了保持本章内容的整体性和连贯性，我不会忽略一些重要的细
节。某些问题很复杂，细节很多，如果不能马上理解也不必担心。我推荐读者第一遍阅读
时只要了解全面的图景，需要的时候再返过来查阅。
下面列出了本章的结构作为指导：
）
则文字提供的附加特性。
重要问题。详细介绍了“动态作用域（dynamicscoping）”和“表达式应用场合（expression
context)”，并解释了它们与正则表达式之间的紧密联系。
正则表达式必须与应用方式结合起来才有价值，所以下面各节讲解了Perl中神奇的正
则表达式控制结构：
qr/…./运算符和Regex对象（303）
Match运算符（306）
Substitution运算符（318）
Split运算符（321）
“巧用Perl的专有特性”（326）介绍了Perl独具的正则改良功能，包括在正则表达
式的应用过程中执行任意Perl代码的功能。
“Perl的效率问题”（347）详细讲解了每个Perl程序员关注的问题。Perl使用传统
型NFA引擎，所以我们可以充分利用第6章介绍的各种技巧。当然，还有一些专属于
Perl的问题会强烈地影响到Perl应用正则表达式的方式和速度。这些都会有所涉及。
前几章出现的Perl
本书的大部分内容中都出现过Perl：
·第2章包括Perl的入门知识，给了许多例子。
·第3章介绍了Perl的历史（88），用Perl语言介绍了许多应用正则表达式的问题，
例如字符编码（包括Unicode105）、匹配模式（110)，以及元字符（113）。
---
## Page 311
作为语言组件的正则表达式
285
第4章解密了Perl使用的传统型NFA引I擎。对Perl用户来说这一章非常重要。
：
第5章承接第4章，包含许多讨论过的例子。其中许多是以Perl给出的，即使有些例
子不是以Perl给出的，它们的原理也适用于Perl。
·第6章对效率感兴趣的Perl程序员应该仔细阅读。
为了照顾不熟悉Perl的读者，前几章我都简化了Perl的例子，使用容易看懂的伪码。本章
我会使用Perl风格的代码来举例。
作为语言组件的正则表达式
Regular Expressions as a Language Component
Perl语言引人注目的特性之一就是，正则表达式在语言之中支持完美地内建。Perl没有提供
独立的正则表达式应用函数，它的正则表达式的运算符，包含在构成语言的其他丰富的运
算符和结构之中。
Perl具有强大的运用正则表达式的能力，人们可能认为，这需要数量繁多的运算符，但是，
Perl事实上只提供了四个与正则表达式有关的运算符，以及少量的相关元素（见表7-1）。
表7-1：Perl中与正则表达式相关的对象概览
正则表达式相关运算符
修饰符
含义
m/regex/mods(r306)
s/regex/replacement/mods(a318)
/x/o
正则表达式的解释方式（292、348）
/s /m /i
引擎认定的目标字符串（292）
qr/regex/mods（303）
/g/c/e
split()(321)
其他（311、315、319）
编译指示（Pragma）
匹配完成之后的变量（299）
$1,$2
捕获的文本
use charnames':fu11';(290)
$~N $+
编号最小/最大的S1、S2
use overload; (341)
@-@+
use re'eval';(337)
表示目标字符串中
use re‘debug′;(361)
$'S&S'
匹配之前、之中和之后的偏移值数组（最好不
用，参见“Perl的效率问题”356）
相关函数
相关变量
1c lcfirst uc ucfirst (290)
pos(313）quotemeta(290)
S
默认的目标字符串（308）