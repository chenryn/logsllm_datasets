title:Preventing format-string attacks via automatic and efficient dynamic
checking
author:Michael F. Ringenburg and
Dan Grossman
Preventing Format-String Attacks via Automatic and
Efﬁcient Dynamic Checking
Michael F. Ringenburg and Dan Grossman
Department of Computer Science and Engineering
University of Washington
Box 352350
Seattle, WA 98195
PI:EMAIL, PI:EMAIL
ABSTRACT
We propose preventing format-string attacks with a combi-
nation of static dataﬂow analysis and dynamic white-lists of
safe address ranges. The dynamic nature of our white-lists
provides the ﬂexibility necessary to encode a very precise
security policy—namely, that %n-speciﬁers in printf-style
functions should modify a memory location x only if the
programmer explicitly passes a pointer to x. Our static
dataﬂow analysis and source transformations let us auto-
matically maintain and check the white-list without any
programmer eﬀort—they merely need to change the Make-
ﬁle. Our analysis also detects pointers passed to vprintf-
style functions through (possibly multiple layers of) wrapper
functions. Our results establish that our approach provides
better protection than previous work and incurs little per-
formance overhead.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Invasive software (e.g.,
viruses, worms, Trojan horses); D.2.0 [General]: Protection
mechanisms; D.2.4 [Software/Program Veriﬁcation]: Re-
liability
General Terms
Security
Keywords
Format-String Attacks, Static Analysis, White-Lists, Dy-
namic Checking
1.
INTRODUCTION
The well-known vulnerabilities of systems implemented
in the C programming language are unsurprising when we
consider C programming from a security perspective:
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’05, November 7–11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.
• C’s lack of memory safety essentially means any piece
of code might modify any part of the address space.
Moreover, for performance reasons, libraries typically
do not check function arguments.
• The principle of least privilege [29], probably the clos-
est thing there is to an axiom of security, states that
no entity should be given more rights than necessary
to complete its task.
The inherent conﬂict between the two points above is ob-
vious and grows worse as we build ever larger systems in
C: Most code is permitted to do much more than it should,
particularly with respect to modifying memory. At a high-
level, format-string attacks, as well as many other standard
exploits, take advantage of this security weakness.
Previous proposals for addressing format-string attacks
(and other vulnerabilities in C) include: software-fault isola-
tion or virtual execution [37, 32, 18], hardened libraries [36],
run-time detection of illegal writes [7, 23, 13], type-safe di-
alects or implementations of C [1, 5, 14], static lint-like code
analysis for likely errors [15, 33, 2, 10], more sophisticated
static analysis [31], and code rewriting techniques [6]. As
Section 5 discusses in detail, these projects are all valuable:
They catch real bugs and should be used more than they are.
However, they tend either to restrict code (e.g., banning %n
in non-static format strings), or to miss large classes of vul-
nerabilities (e.g., in wrapper functions that call vprintf).
In this paper, we propose a new approach for preventing
format-string attacks. We combine the precision and se-
curity of run-time approaches with the ease-of-use of static
analyses and automatic source transformations. Speciﬁcally,
at run-time we maintain a dynamically updated white-list of
%n-writable address ranges. This allows us to encode a very
precise security policy—namely, that %n-speciﬁers in format
strings should be allowed to modify a memory location if
and only if the programmer explicitly passes a pointer to
it. We use static dataﬂow analysis to determine automat-
ically which addresses should be in the white-list at any
given time. Our source-to-source transformation then uses
the knowledge gleaned from static analysis to insert the code
that maintains and checks the white-list. Thus the program-
mer merely needs to update the Makeﬁle and recompile. We
have tested our tool on a number of programs, and did not
have to change any source ﬁles. All the programs ran cor-
rectly, and all the format-string vulnerabilities disappeared.
Our tool is available for download from our website [26].
1.1 Format-String Attacks
Since their discovery roughly ﬁve years ago [35], format-
string attacks have become all-too-common [6]. For exam-
ple, a recent search on securityfocus.com revealed 62 sepa-
rate vulnerabilities posted in 2004 that contained the phrase
“format string”. This has occurred even though (or perhaps
because) such vulnerabilities are well-understood [22, 38]
and there exist (partial) techniques for avoiding them [6,
31].
The essence of the vulnerability is straightforward:
• User-supplied input is frequently used as the format-
string argument to a printing function (such as sprintf,
snprintf, fprintf, vprintf, vsprintf, vsnprintf,
vfprintf, syslog, or vsyslog).
• The format-string argument to printing functions
causes memory writes if the %n format speciﬁer ap-
pears. Speciﬁcally, %n writes the number of bytes out-
put by the printing function (prior to the %n) to the
memory location speciﬁed by the corresponding argu-
ment.
• Printing functions do not check the number or types
of their variable arguments.1
Thus, an attacker can perform unauthorized writes by in-
serting unexpected %n’s into user-supplied input strings (e.g.,
command-line arguments) that eventually get passed to print-
ing functions. For example, if a malicious user calls the fol-
lowing program (adapted from [22]) with the command line
argument "aaaabbbccc%n", the value 10 will be written to
the address 0x61616161:
int main(int argc, char **argv) {
char buf[100];
snprintf(buf, 100, argv[1]);
}
The snprintf statement ﬁrst writes “aaaabbbccc” to buf.
It then pulls the next argument oﬀ of the stack, assumes it
is an integer pointer, and writes the number of bytes output
so far (10 in this example) to the pointed to location. In
this case, however, there is no next argument. Thus the ﬁrst
four bytes of buf are grabbed oﬀ the stack instead, and 10 is
written to 0x61616161 (0x61 is ‘a’ in ASCII). Furthermore,
%n ignores the length argument of snprintf, and instead
writes the number of bytes that it believes would have been
printed had there been no length restrictions. Thus, this
style of attack can be used to write an arbitrary value to an
arbitrary location in memory.
Format-string attacks are also possible with speciﬁers (such
as %s) that read the memory pointed to by the correspond-
ing argument. However, %n-based format-string attacks are
the most dangerous, because they allow the attacker to write
arbitrary values to arbitrary memory locations (and thus to
potentially execute arbitrary code on the victim machine).
In contrast, format-string attacks based on other speciﬁers
can only read data, or potentially crash the program (e.g.,
by following an invalid pointer). A quick scan of format-
string attacks in the wild (e.g.,
[28, 35, 30, 25, 24, 19, 17,
39, 34]) validates this assertion—the vast majority of real
attacks (and all the attacks we saw that execute malicious
1In general, C’s variable-argument functions cannot check
this.
code) involve inserting unanticipated %n-speciﬁers into for-
mat strings. Thus we choose to focus on %n-based attacks in
this paper. However, our technique could easily be extended
to handle other types of format-string attacks.
1.2 White-Listing
We propose a simple, ﬂexible, and direct way to con-
trol the memory modiﬁed by a function (such as printf):
An explicit, dynamic white-list of address ranges can con-
trol writes that may be unsafe, such as those exploited by
format-string attacks. We can add and remove address ranges
from the white-list at run-time, and we can require that the
writes we wish to guard ﬁrst check that an address is in the
white-list before writing to it. White-lists can be viewed
as a direct representation of a simple but easily understood
security policy: Certain code should modify only certain lo-
cations. Of course, the white-list itself must not succumb to
malicious modiﬁcation, but such an event can occur only if
an application is already compromised.
To see the ﬂexibility of white-listing, notice that it can
easily encode many static approaches:
• Default: A white-list containing the range [0, 2n − 1]
(for an n-bit address space) allows any write, eﬀec-
tively turning oﬀ protection. This might be necessary,
for example, to ensure that legacy code executes un-
changed.
• Read-only: An empty white-list ensures that the vul-
nerable write it protects never successfully executes.
For format strings, the empty white-list is equivalent
to banning the %n format character.
• Sandboxing: A white-list containing just the range
[2j, 2(j+1) − 1] restricts writes to an aligned 2j range,
fault
mirroring
isolation [37].
approaches
some
to
software
Furthermore, because our white-lists are dynamic, we can
express more interesting dynamic policies (such as the one
we describe in this paper), and we can change the policy at
run-time if desired.
In short, we believe dynamic white-lists are powerful tools
for increasing the security of C code by restricting memory
writes. In particular, in this paper we use the approach to
prevent format-string attacks. We show that it is eﬀective,
easy-to-use, and eﬃcient.
1.3 Contributions and Outline
We have implemented a white-list based approach to pre-
venting format-string attacks, and determined that the per-
formance overhead is reasonable. Moreover, our approach
uses a simple static code analysis to detect user-deﬁned
wrapper functions that call vprintf and similar functions.
This allows us to rule out common2 attacks that previous
work could not [6]. An explicit white-list lets us trade-oﬀ
precision and security when the ﬂow analysis is too conser-
vative. Our approach does not rely on the C preprocessor
2A brief manual search found several known vulnerabilities
involving wrapper functions that call vfprintf, including:
isc dhcpd 3.0[30], rwhoisd 1.5[28], zkﬁngerd 0.9.1[25], unreal
ircd 3.1.1[19], nn news reader[39], wu-ftpd[35], and tcpﬂow
0.2.0[34].
(we perform a source-to-source transformation on prepro-
cessed code) and does not require recompiling the standard
C library.
Section 2 shows how white-lists can prevent format-string
attacks.
In Section 3, we describe the automatic mainte-
nance of the white-list. Section 4.1 presents vulnerability
prevention results, and in Section 4.2 we examine the run-
time overhead of white-listing. Section 5 contrasts our work
with related projects. Finally, Section 6 concludes and con-
siders other interfaces that may beneﬁt from white-listing.
2. WHITE-LIST BASED PREVENTION OF
FORMAT-STRING ATTACKS
Using a white-list to prevent format-string attacks is
straightforward:
• We need a run-time white-list containing the address
ranges that printing functions are allowed to write.
• The printing functions must consult the white-list be-
fore executing the code for a %n qualiﬁer.
• Callers to printing functions must register (add to the
white-list) any locations that might legally be written.
• For performance and security, callers should unregister
locations after the printing functions are called.
We represent the white-list with a (resizable) array of ad-
dress ranges. At any point during program execution, we
expect the white-list will need to contain at most a few ad-
dresses (because of the fourth point above). We store the
white-list in a global variable; in a multithreaded setting it
would be slightly more secure to use a separate white-list
for each thread.
To check the white-list, before executing a %n qualiﬁer
the printing function must ﬁrst verify that the location it is
about to write is in a registered address range. We expect
the addresses registered at the most recent call site to be
used ﬁrst (we shall see why this is the case in Section 3).
Thus, the function checks the white-list array as a stack,
starting with the most recently registered range. We can
either modify (or reimplement) the printing functions, or
we can wrap them with a function that checks the white-
list. The former has the advantage of performance (parsing
the format string only once), but the disadvantage that we
intrusively change or circumvent the standard library. If a
white-list check fails, we choose to abort the program, but
other choices are possible (such as silently skipping the write
or sending a signal).
We provide a very simple API for users to adjust the
white-list; richer interfaces are certainly possible but we have
not needed them.
• __register(x,y) adds the range [x, y) to the white-
list.
• __register_word(x) adds the range [x, x] to the white-
list. We can use this function to register addresses
pointed to by arguments that are meant to be used as
%n targets.
• __unregister() removes the most recently added-but-
not-yet-removed range from the white-list (i.e., it pops
the stack). This is more eﬃcient than searching the
white-list for a speciﬁc address, and has been suﬃ-
cient for our purposes. In particular, it is exactly what
we need for the automated approach described in Sec-
tion 3.
For programs that never use __register, we can implement
a simpler white-list by merely disabling the %n modiﬁer.
Calling __unregister() on an empty white-list has no ef-
fect.
For security, clients should register as few ranges as pos-
sible, and unregister them as soon as possible. Ideally, that
would mean registering the correct arguments just before
calling a printing function and unregistering them imme-
diately afterward. However, wrapper functions that pass
va_lists to functions like vfprintf (e.g., wrapper1() in
Figure 1) cannot do the registration: They do not know the
number or types of the arguments in the list. Therefore, the