EDB Postgres Replication Server User’s Guide
Figure 6-49 - Conflict History tab for log-based method
Note: The View Data link and Conflict Details window displayed for multi-master
replication systems configured with the trigger-based method of synchronization
replication are not available for multi-master replication systems configured with the log-
based method of synchronization replication.
The Source DB and Target DB columns provide the IP address and database names of the
source and target master nodes involved in the conflict.
You can also obtain this information from a SQL query rather than from the xDB
Replication Console graphical user interface. The following query can be run from a
master node to display information regarding pending (unresolved) conflicts:
SELECT DISTINCT
conflict_type,
table_name,
pk_value,
d1.db_host AS src_db_host,
d1.db_port AS src_db_port,
d1.db_name AS src_db_name,
src_rrep_sync_id,
d2.db_host AS target_db_host,
d2.db_port AS target_db_port,
d2.db_name AS target_db_name,
target_rrep_sync_id,
c.notes
FROM _edb_replicator_pub.xdb_conflicts c
JOIN _edb_replicator_pub.xdb_pub_database d1 ON c.src_db_id = d1.pub_db_id
JOIN _edb_replicator_pub.xdb_pub_database d2 ON c.target_db_id = d2.pub_db_id
JOIN _edb_replicator_pub.rrep_tables t ON c.table_id = t.table_id
WHERE resolution_status = 'P'
ORDER BY t.table_name;
Example output from the query is shown by the following:
-[ RECORD 1 ]-------+-------------
conflict_type | II
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 350
EDB Postgres Replication Server User’s Guide
table_name | dept
pk_value | deptno=50
src_db_host | 192.168.2.22
src_db_port | 5444
src_db_name | edb
src_rrep_sync_id | 41939160
target_db_host | 192.168.2.22
target_db_port | 5444
target_db_name | mmrnode
target_rrep_sync_id | 42289824
notes |
-[ RECORD 2 ]-------+-------------
conflict_type | DU
table_name | emp
pk_value | empno=9003
src_db_host | 192.168.2.22
src_db_port | 5444
src_db_name | edb
src_rrep_sync_id | 41940704
target_db_host | 192.168.2.22
target_db_port | 5444
target_db_name | mmrnode
target_rrep_sync_id | 42292848
notes |
6.6.10.2 Conflict Resolution Concept for the Log-Based Method
Manual conflict resolution typically requires modification of rows in one or more
publication tables to correct erroneous entries. Such changes can be done using a utility
such as PSQL or pgAdmin (Postgres Enterprise Manager Client in Advanced Server).
Manual publication table corrections must usually be isolated – that is, these
modifications must be limited to the publication tables you are directly changing
and must not be replicated to the other master nodes as would normally occur in the
multi-master replication system.
To prevent the xDB Replication Server from replicating changes to one or more
publication tables during a synchronization operation, the changes to the publication
tables must be made within a transaction block that includes a reference to an xDB
control schema table. This reference to the xDB control schema table causes the xDB
Replication Server to skip the transaction block when performing a synchronization
replication.
Note: Not every xDB control schema table prevents this replication of a transaction
block. Use the SQL UPDATE statement as shown by the following.
The SQL UPDATE statement shown in the following transaction block is to be included to
prevent replication of other publication table changes appearing within the same
transaction block:
BEGIN;
UPDATE _edb_replicator_pub.rrep_properties SET value =
current_timestamp WHERE key = 'last_mcr_timestamp';
One or more SQL statements to correct publication tables
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 351
EDB Postgres Replication Server User’s Guide
END;
When such a transaction block is executed within a master node, the insert, update, or
deletion of rows to any publication table within the transaction block are not replicated to
any other master node by the xDB Replication Server when the next synchronization
replication occurs.
As many such transaction blocks can be run on any master node as necessary to change
the publication table rows to resolve the conflicts. The resulting changes are isolated to
the master node on which the transaction block is run, so each master node can be
independently corrected.
6.6.10.3 Overview of Correction Strategies
Before you begin manual resolution correction, it is important to determine the extent of
the inconsistencies that may have occurred in the publication tables across the master
nodes of the replication system.
The Conflict History tab and the SQL query described in Section 6.6.10.1 can help
determine the source of an initial conflict.
However, once this conflict has occurred, your replication system may have processed
and replicated additional transactions during that synchronization operation. Some of
these subsequent replications may have succeeded as expected, but others may have
failed or produced unexpected results as a consequence of the prior conflict.
If you have a replication schedule in effect, additional synchronization operations can
occur, which may create additional conflicts.
Therefore, when you have discovered that a conflict has occurred, it is strongly
recommended that you stop the publication server. Use the stop option of the Linux
scripts or Windows services described in Step 1 of Section 5.2.1.
In this way, you can carefully analyze the content of the publication tables in question to
determine the best course of action to take without the interference of continuing updates
by a running replication system.
When analyzing your tables you must determine which publication tables contain
inconsistent rows across master nodes (that is, missing rows on some master nodes, or
rows with different column values for the same primary key on different master nodes).
The general steps to resolving the problem following this analysis are the following:
Step 1: Make the necessary manual corrections to the rows in the publication tables
across all master nodes to get them into an initial, consistent state so each publication
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 352
EDB Postgres Replication Server User’s Guide
table has the same set of identical rows across master nodes. This may be to a state before
the conflicting transactions occurred, depending upon what you determine to be the
easiest course of action for fully resolving the conflict.
Step 2: Apply transactions (either from your application or from transaction blocks as
defined in Section 6.6.10.2) so that all publication tables across all master nodes are
updated consistently according to the desired, expected result.
Step 3: In the control schema, update certain indicators for the conflicting entries to show
that these conflicts have been resolved. This update changes the Resolution Status of
these entries to Resolved in the Conflict History tab. These entries will no longer appear
in the SQL query described in Section 6.6.10.1.
Perform the Step 3 updates to the control schema of the controller database. The
currently designated controller database can be determined from the content of the
xDB Replication Configuration file (see Section 2.3.1.3). The publication server
ensures that the control schema changes made on the controller database are
replicated to the control schemas of all publication databases to maintain metadata
consistency across all publication databases.
Step 4: Resume operation of your replication system. Start the publication server and
recreate the replication schedule if you were using one.
For accomplishing steps 1 and 2, use some combination of the following methods. Which
methods you use depends upon the state of your publication tables.
 Manual Publication Table Correction. Use a utility such as PSQL or pgAdmin
(Postgres Enterprise Manager Client in Advanced Server) to manually correct the
rows in the publication tables across all master nodes without replicating these
changes. Apply these manual corrections within the transaction block described in
Section 6.6.10.2.
 Correction Using New Transactions. Rerun your application on one master
node to create new transactions that you will allow to replicate to all other master
nodes. Use this method after you have ensured that all publication tables are in a
consistent state across all master nodes.
Each of these methods is described in more detail in the following sections.
For purposes of illustration, the following replication environment is used.
 A 3-node multi-master replication system has been established. The master node
names are mmrnode_a (the master definition node and the controller database),
mmrnode_b, and mmrnode_c.
 The publication is named emp_pub and uses the dept and emp tables that have
been used as examples throughout this document.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 353
EDB Postgres Replication Server User’s Guide
 The conflict used to illustrate the conflict resolution methods is a uniqueness
conflict occurring on the dept table on primary key column deptno on value 50
resulting from the INSERT statements shown by the following:
On mmrnode_a, the following statement is run:
INSERT INTO dept VALUES (50, 'FINANCE', 'CHICAGO');
On mmrnode_b, the following statement is run:
INSERT INTO dept VALUES (50, 'MARKETING', 'LOS ANGELES');
A synchronization replication is then performed.
The following is the content of table dept on mmrnode_a:
mmrnode_a=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | FINANCE | CHICAGO
(5 rows)
The following is the content of table dept on mmrnode_b:
mmrnode_b=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
The following is the content of table dept on mmrnode_c:
mmrnode_c=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
(4 rows)
The Conflict History tab shows the following entry:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 354
EDB Postgres Replication Server User’s Guide
Figure 6-50 - Conflict History tab with a uniqueness conflict
The following is the output from the SQL query described in Section 6.6.10.1.
-[ RECORD 1 ]-------+-------------
conflict_type | II
table_name | dept
pk_value | deptno=50
src_db_host | 192.168.2.22
src_db_port | 5444
src_db_name | mmrnode_a
src_rrep_sync_id | 44713808
target_db_host | 192.168.2.22
target_db_port | 5444
target_db_name | mmrnode_b
target_rrep_sync_id | 44718040
notes |
The following sections describe the application of different methods to resolve this
conflict.
6.6.10.4 Manual Publication Table Correction
The first step required in all manual conflict resolutions is to ensure all publication tables
are consistent across all master nodes – that is, all corresponding tables have the same
rows with the same column values.
Once this state is achieved, you can then reapply transactions that may have failed to
replicate successfully.
In the preceding example, the inconsistencies are the following:
 Master nodes mmrnode_a and mmrnode_b each contain a row with primary key
value 50, but the other column values in the row are different.
 Master node mmrnode_c does not have a row with primary key value 50.
Assuming that the correct state of the dept table should be the one in mmrnode_b, the
following options are available to correct the state of all master nodes:
 Manually correct the dept table in mmrnode_a and mmrnode_c. That is, update
the row in mmrnode_a so it has the correct values, and insert the missing row in
mmrnode_c. The dept table on all nodes is now consistent and up-to-date.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 355
EDB Postgres Replication Server User’s Guide
 Manually delete the row with primary key value 50 from the table on both
mmrnode_a and mmrnode_b. This brings the dept table on all master nodes
back to a prior, consistent state. Then, with the multi-master replication system
running, perform the insert transaction again using the correct column values on
any one of the master nodes.
After the publication table rows are corrected, update the appropriate control schema
table in the publication database currently designated as the controller database to
indicate that the conflict has been resolved.
Each of the methods outlined in the preceding bullet points are described in more detail
in the following sections.
The method outlined by the first bullet point is accomplished as follows.
Step 1: Manually correct the rows in the publication tables with SQL statements
incorporated within a transaction block as described in Section 6.6.10.2.
On mmrnode_a, correct the erroneous row by running the following transaction block:
BEGIN;
UPDATE _edb_replicator_pub.rrep_properties SET value = current_timestamp
WHERE key = 'last_mcr_timestamp';
UPDATE edb.dept SET dname = 'MARKETING', loc = 'LOS ANGELES'
WHERE deptno = 50;
COMMIT;
This is shown by the following:
mmrnode_a=# BEGIN;
BEGIN
mmrnode_a=# UPDATE _edb_replicator_pub.rrep_properties SET value = current_timestamp
mmrnode_a-# WHERE key = 'last_mcr_timestamp';
UPDATE 1
mmrnode_a=# UPDATE edb.dept SET dname = 'MARKETING', loc = 'LOS ANGELES'
mmrnode_a-# WHERE deptno = 50;
UPDATE 1
mmrnode_a=# COMMIT;
COMMIT
mmrnode_a=# SELECT * FROM edb.dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
On mmrnode_c, insert the missing row with the following transaction block:
BEGIN;
UPDATE _edb_replicator_pub.rrep_properties SET value = current_timestamp
WHERE key = 'last_mcr_timestamp';
INSERT INTO edb.dept VALUES (50,'MARKETING','LOS ANGELES');
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 356
EDB Postgres Replication Server User’s Guide
COMMIT;
This is shown by the following:
mmrnode_c=# BEGIN;
BEGIN
mmrnode_c=# UPDATE _edb_replicator_pub.rrep_properties SET value = current_timestamp
mmrnode_c-# WHERE key = 'last_mcr_timestamp';
UPDATE 1
mmrnode_c=# INSERT INTO edb.dept VALUES (50,'MARKETING','LOS ANGELES');
INSERT 0 1
mmrnode_c=# COMMIT;
COMMIT
mmrnode_c=# SELECT * FROM edb.dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
The dept table on mmrnode_a and mmrnode_c now match the content of the table on
mmrnode_b:
Step 2: In the control schema of the publication database currently designated as the
controller database, modify the entry in the xdb_conflicts table to indicate the
conflict has been resolved. Table xdb_conflicts is located in schema
_edb_replicator_pub.
Note: The entries in table xdb_conflicts only affect the data that appears in the
Conflict History tab and the SQL query described in Section 6.6.10.1. Changing entries
in xdb_conflicts has no effect on future replication operations, but provides a way to
keep a record of how past conflicts were resolved.
Note the following points regarding the xdb_conflicts table:
 A row in the xdb_conflicts table appears as an entry in the Conflict History
tab.
 The primary key of the xdb_conflicts table is comprised of columns
src_db_id, target_db_id, src_rrep_sync_id, and
target_rrep_sync_id. Column src_db_id contains a unique identifier for
the master node in which a transaction occurred that results in a conflict when
replicated to the master node identified by target_db_id.
src_rrep_sync_id is the identifier of the transaction on the source master node
involved in the conflict while target_rrep_sync_id is the identifier of the
transaction on the target master node that is involved in the conflict. Note: The