title:AWare: Preventing Abuse of Privacy-Sensitive Sensors via Operation
Bindings
author:Giuseppe Petracca and
Ahmad Atamli-Reineh and
Yuqiong Sun and
Jens Grossklags and
Trent Jaeger
AWare: Preventing Abuse of Privacy-Sensitive 
Sensors via Operation Bindings
Giuseppe Petracca, The Pennsylvania State University, US; Ahmad-Atamli Reineh, University 
of Oxford, UK; Yuqiong Sun, The Pennsylvania State University, US; Jens Grossklags, 
Technical University of Munich, DE; Trent Jaeger, The Pennsylvania State University, US
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/petracca
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXAWare: Preventing Abuse of Privacy-Sensitive Sensors
via Operation Bindings
Giuseppe Petracca
Pennsylvania State University, US
PI:EMAIL
Ahmad-Atamli Reineh
University of Oxford, UK
PI:EMAIL
Yuqiong Sun
Symantec Research Labs, US
yuqiong PI:EMAIL
Jens Grossklags
Trent Jaeger
Technical University of Munich, DE
Pennsylvania State University, US
PI:EMAIL
PI:EMAIL
Abstract
System designers have long struggled with the challenge
of determining how to control when untrusted applica-
tions may perform operations using privacy-sensitive sen-
sors securely and effectively. Current systems request
that users authorize such operations once (i.e., on install
or ﬁrst use), but malicious applications may abuse such
authorizations to collect data stealthily using such sensors.
Proposed research methods enable systems to infer the op-
erations associated with user input events, but malicious
applications may still trick users into allowing unexpected,
stealthy operations. To prevent users from being tricked,
we propose to bind applications’ operation requests to
the associated user input events and how they were ob-
tained explicitly, enabling users to authorize operations on
privacy-sensitive sensors unambiguously and reuse such
authorizations. To demonstrate this approach, we imple-
ment the AWare authorization framework for Android,
extending the Android Middleware to control access to
privacy-sensitive sensors. We evaluate the effectiveness
of AWare in: (1) a laboratory-based user study, ﬁnding
that at most 7% of the users were tricked by examples of
four types of attacks when using AWare, instead of 85%
on average for prior approaches; (2) a ﬁeld study, showing
that the user authorization effort increases by only 2.28
decisions on average per application; (3) a compatibility
study with 1,000 of the most-downloaded Android appli-
cations, demonstrating that such applications can operate
effectively under AWare.
1
Introduction
Contemporary desktop, web, and mobile operating sys-
tems are continually increasing support for applications to
allow access to privacy-sensitive sensors, such as cameras,
microphones, and touch-screens to provide new useful
features. For example, insurance and banking applications
now utilize mobile platforms’ cameras to collect sensi-
tive information to expedite claim processing1 and check
depositing2, respectively. Several desktop and mobile
applications provide screen sharing3 and screen capturing
features for remote collaboration or remote control of
desktop and mobile platforms. Also, web search engines
now embed buttons to call the businesses linked to the
results directly.
Unfortunately, once an application is granted access
to perform such sensitive operations (e.g., on installa-
tion or ﬁrst use), the application may use the operation
at will, opening opportunities for abuse. Indeed, cyber-
criminals have built malware applications available online
for purchase, called Remote Access Trojans (RATs), that
abuse authorized access to such sensors to exﬁltrate audio,
video, screen content, and more, from desktop and mobile
platforms. Since 75% of operations requiring permissions
are performed when the screen is off, or applications are
running in the background as services [54], these attacks
often go unnoticed by users. Two popular RAT applica-
tions, widely discussed in security blogs and by anti-virus
companies, are Dendroid [1] and Krysanec [19]. In the
“Dendroid case”, the Federal Bureau of Investigations and
the Department of Homeland Security performed an in-
vestigation spanning several years in collaboration with
law enforcement agencies in over 20 countries. The cy-
bercriminal who pleaded guilty for spreading the malware
to over 70,000 platforms worldwide was convicted of 10
years in prison and a $250,000 ﬁne [16, 18]. Several
other cases of abuse have been reported ever since. Some
cases leading to legal actions, including the case of the
NBA Golden State Warriors’ free application that covertly
turns on smartphones’ microphones to listen to and record
conversations [17], school laptops that were found to use
their cameras to spy on students to whom they were given
[13], and others [14, 15].
1Speed up your car insurance claim. www.esurance.com
2PNC Mobile Banking. www.pnc.com
3Remote Screen Sharing for Android Platforms. www.bomgar.com
USENIX Association
26th USENIX Security Symposium    379
Researchers have also designed mobile RAT applica-
tions to demonstrate limitations of access control models
adopted by contemporary operating systems when medi-
ating access to privacy-sensitive sensors. For instance,
PlaceRaider [51] uses the camera and built-in sensors
to construct three-dimensional models of indoor environ-
ments. Soundcomber [46] exﬁltrates sensitive data, such
as credit card and PIN numbers, from both tones and
speech-based interaction with phone menu systems. Even
the Meterpreter Metasploit exploit, enables microphone
recording remotely on computers running Ubuntu4.
To address these threats, researchers have proposed
methods that enable the system to infer which opera-
tion requests are associated with which user input events.
Input-Driven [33] access control authorizes the operation
request that immediately follows a user input event, but a
malicious application may steal a user input event targeted
at another application by submitting its request ﬁrst. User-
Driven [39, 41] access control requires that applications
use system-deﬁned gadgets associated with particular op-
erations to enable the system to infer operations for user
input events unambiguously, but does not enable a user
to verify the operation that she has requested by provid-
ing input. We describe four types of attacks that are still
possible when using these proposed defenses.
In this work, we propose the AWare authorization
framework to prevent abuse of privacy-sensitive sensors
by malicious applications. Our goal is to enable users
to verify that applications’ operation requests correspond
to the users’ expectations explicitly, which is a desired
objective of access control research [24, 28]. To achieve
our objective, AWare binds each operation request to a
user input event and obtains explicit authorization for the
combination of operation request, user input event, and
the user interface conﬁguration used to elicit the event,
which we call an operation binding. The user’s autho-
rization decision for an operation binding is recorded and
may be reused as long as the application always uses the
same operation binding to request the same operation.
In this paper, we study how to leverage various features
of the user interface to monitor how user input events
are elicited, and reduce the attack options available to
adversaries signiﬁcantly. Examples of features include
the widget selected, the window conﬁguration containing
the widget, and the transitions among windows owned by
the application presenting the widget. In addition, AWare
is designed to be completely transparent to applications,
so applications require no modiﬁcation run under AWare
control, encouraging adoption for contemporary operating
systems.
We implement a prototype of the AWare authorization
framework by modifying a recent version of the An-
4null-byte.wonderhowto.com
droid operating system and found, through a study of
1,000 of the most-downloaded Android applications, that
such applications can operate effectively under AWare
while incurring less than 4% performance overhead on
microbenchmarks. We conducted a laboratory-based user
study involving 90 human subjects to evaluate the effec-
tiveness of AWare against attacks from RAT applications.
We found that at most 7% of the user study participants
were tricked by examples of four types of attacks when
using AWare, while 85% of the participants were tricked
when using alternative approaches on average. We also
conducted a ﬁeld-based user study involving 24 human
subjects to measure the decision overhead imposed on
users when using AWare in real-world scenarios. We
found that the study participants only had to make 2.28
additional decisions on average per application for the
entire study period.
In summary, the contributions of our research are:
• We identify four types of attacks that malicious ap-
plications may still use to obtain access to privacy-
sensitive sensors despite proposed research defenses.
• We propose AWare, an authorization framework to
prevent abuse of privacy-sensitive sensors by mali-
cious applications. AWare binds application requests
to the user interface conﬁgurations used to elicit user
inputs for the requests in operation bindings. Users
then authorize operation bindings, which may be
reused as long as the operation is requested using the
same operation binding.
• We implement AWare as an Android prototype and
test its compatibility and performance for 1,000 of
the most-downloaded Android applications. We also
evaluate its effectiveness with a laboratory-based
user study, and measure the decision overhead im-
posed on users with a ﬁeld-based user study.
2 Background
Mobile platforms require user authorization for untrusted
applications to perform sensitive operations. Mobile plat-
forms only request such user authorizations once, either
at application installation time or at ﬁrst use of the opera-
tion [2, 3] to avoid annoying users.
The problem is that malicious applications may abuse
such blanket user authorizations to perform authorized,
sensitive operations stealthily, without users’ knowledge
and at times that the users may not approve. Operations
that utilize sensors that enable recording of private user
actions, such as the microphone, camera, screen, etc.,
are particularly vulnerable to such abuse. Research stud-
ies have shown that such attacks are feasible in real sys-
tems, such as in commodity web browsers and mobile
apps [21, 29, 37]. These studies report that more than 78%
380    26th USENIX Security Symposium
USENIX Association
3 Problem Deﬁnition
Although researchers have raised the bar for stealthy mis-
use of sensors, malicious applications may still leverage
the user as the weak link to circumvent these protection
mechanisms. Previous research [6, 12, 30] and our user
study (see Section 8.1.1) show that users frequently fail to
identify the application requesting sensor access, the user
input widget eliciting the request, and/or the actual opera-
tion being requested by an application. Such errors may
be caused by several factors, such as users failing to detect
phishing [12], failing to recognize subtle changes in the
interface [20], and/or failing to understand the operations
granted by a particular interface [38]. In this section, we
examine attacks that are still possible given proposed re-
search solutions, and what aspects of proposed solutions
remain as limitations.
3.1 User Interface Attacks
In this research, we identify four types of attacks that ma-
licious applications may use to circumvent the protection
mechanisms proposed in prior work [33, 39, 41].
Figure 2: The user’s perception of the op-
eration that is going to be performed dif-
fers from the actual operation requested
by the application, which abuses a previ-
ous granted permission.
Operation Switching: A malicious application may try
to trick a user into authorizing an unintended operation
by changing the mapping between a widget and the as-
sociated operation, as shown in Figure 2. This type of
attack is possible in IDAC because the relationship be-
tween a user input event and the operation that will be
authorized as a result of that event is implicit. Indeed,
any application can request any operation for which they
have been authorized previously (e.g., by ﬁrst use) and
will be approved if it is the ﬁrst request received after the
event. UDAC [39, 41] avoids this type of attack by design
by having the system deﬁne a mapping between widgets
(gadgets) and operations, so the operation is determined
precisely by the widget. Any solution we devise must
prevent this kind of attack as well.
Figure 3: A photo capturing application
presents a video camera widget, instead of
a camera widget, to trick the user into also
granting access to the microphone. The win-
dowing display context surrounding the wid-
get shows a camera preview for photo captur-
ing.
Bait-and-Context-Switch: A malicious application
may try to trick the user to authorize an unintended op-
eration by presenting a widget in a misleading display
context, as shown in Figure 3.
In this case, the win-
Figure 1: In mobile platforms, once the system authorizes an application
to perform a operation, the application may perform that operation at any
time, enabling adversaries to stealthily access privacy-sensitive sensors,
e.g., record speech using the microphone, at any time.
of users could be potentially subject to such attacks. Fur-
thermore, security companies, such as Check Point, have
reported several malware apps that performs stealthy and
fraudulent auto-clicking [4], such as Judy, FalseGuide,
and Skinner that reached between 4.5 million and 18.5
million devices worldwide. Figure 1 shows that once an
application is granted permission to perform an operation
using a privacy-sensitive sensor, such as recording via the
microphone, that application may perform that operation
at any time, even without user consent. This shortcom-
ing enables adversaries to compromise user privacy, e.g.,
record the user’s voice and the surrounding environment,
without the user being aware. Research studies have al-
ready shown that users have a limited understanding of
security and privacy risks deriving from installing appli-
cations and granting them permissions [10].
Research [45, 51, 52] and real-world [1, 19] developers
have produced exploits, called Remote Access Trojans
(RATs), that abuse authorized operations to extract audio,
video, screen content, etc., from personal devices while
running in the background to evade detection by users.
Instances of permission abuse have been reported in sev-
eral popular mobile applications such as Shazam, TuneIn
Radio, and WhatsApp [48].
Researchers have proposed defenses to prevent stealthy
misuse of operations that use privacy-sensitive sen-
sors [33, 39, 41]. Figure 1 also provides the insight behind
these defenses: legitimate use of these sensors must be
accompanied by a user input event to grant approval for
all operations targeting privacy-sensitive sensors. First,
Input-Driven Access Control [33] (IDAC) requires ev-
ery application request for a sensor operation to follow a
user input event within a restricted time window. Thus,
IDAC would deny the stealthy accesses shown in Fig-
ure 1 because there is no accompanying user input event.
Second, User-Driven Access Control [39, 41] (UDAC)
further restricts applications to use trusted access control
gadgets provided by the operating system, where each ac-
cess control gadget is associated with a speciﬁc operation
for such sensors. Thus, UDAC requires a user input event
and limits the requesting application only to perform the
operation associated with the gadget (i.e., widget) by the
system.
USENIX Association
26th USENIX Security Symposium    381
dowing context surrounding the widget indicates one ac-
tion (e.g., taking a picture) when the widget presented
requests access to a different operation (e.g., taking a
video). This type of attack is possible because users
engaged in interface-intensive tasks may focus on the
context rather than the widget and infer the wrong wid-
get is present, authorizing the wrong operation. Neither
IDAC [33] nor UDAC [39, 41] detect the attack shown.
Although UDAC [39] checks some properties of the dis-
play context5, plenty of ﬂexibility remains for an adver-
sary to craft attacks since applications may choose the
layout around which the widget is displayed.
Figure 4: A malicious application
keeps the windowing display context but
switches the widget to trick users who
have made several similar selections to
grant the malicious application also ac-
cess to the microphone mistakenly.
Bait-and-Widget-Switch: A malicious application may
present the same widget for the same operation to the user
several times in succession, but then substitute another
widget for another operation, hoping that the user will not
notice the widget change. An example of this attack is
shown in Figure 4. Again, this type of attack is possible
because users engaged in interface-intensive tasks may be
distracted, thus, not notice changes in the widget. Again,
UDAC methods to detect deceptive interfaces [39] are not
restrictive enough to prevent this attack in general. For
example, one UDAC check restricts the gadget’s location
for the user input event, but this does not preclude using
different gadgets at the same location.
Figure 5:
The
user may mistak-
enly authorize ac-
cess to the micro-
phone to a RAT
application spoof-
ing the graphical
aspect of a well-
known legitimate
application.
Application Spooﬁng: A malicious application repli-
cates the look-and-feel of another application’s interface
and replaces the foreground activity of that application
with one of its own to gain access to a sensor as shown in
Figure 5, similar to a phishing attack. For example, when
the benign application running in the foreground elicits a
user input event, the malicious application may also try
to elicit a user input event using its own activity window
by replacing the benign application currently in the fore-
ground. If the user supplies an input to the masquerading
5UDAC Audacious [39] checks that the user interface presented
does not have misleading text, that the background and text preserve
the contrast, and that the gadget is not covered by other user interface
elements.
application’s widget, then the masquerading application