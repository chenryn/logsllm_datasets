### Title: Dirty Bin Cache: A New Code Injection Vulnerability in Binary Translation Caches

In recent years, Arm processors have gained significant traction in the laptop market, expanding beyond their traditional use in embedded devices. For instance, Apple announced in 2020 that it would transition its Mac lineup from Intel to Arm-based Apple Silicon, a move that garnered considerable attention. Apple's new Macs feature Rosetta 2, a dynamic binary translator that enables the execution of x64 applications on Arm64 hardware by translating x64 code to Arm64 code. While several researchers have explored the performance aspects of Rosetta 2, to our knowledge, no prior research has focused on its security implications.

In this presentation, we will unveil a novel code injection vulnerability within Rosetta 2. Rosetta 2 stores the results of binary translations as Ahead-Of-Time (AOT) files, which are cached and reused for subsequent application launches. These AOT files are protected by System Integrity Protection (SIP), making them inaccessible even to root users. However, we have developed an exploit that bypasses SIP protection, allowing arbitrary code injection into AOT files with standard user privileges. This code injection can be leveraged to circumvent macOS security and privacy mechanisms. Additionally, this technique can be used to create a stealthy backdoor by concealing malicious payloads in SIP-protected locations.

Although Apple has partially addressed this vulnerability, it remains exploitable even on the latest versions of macOS. Our investigation did not stop there; we also discovered a similar issue in the Arm-based Windows x86/x64 emulation and devised a corresponding code injection exploit. Given these findings, we believe this type of vulnerability is likely to be prevalent across various compatibility technologies and may affect future implementations as well.

This talk will provide the first comprehensive analysis of such vulnerabilities in Arm-based operating systems. We will present new code injection techniques, along with proof-of-concept (PoC) code, which will be valuable for red teams. Furthermore, our detailed exploit methods and reverse engineering results will contribute to future vulnerability research.