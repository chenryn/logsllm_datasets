**作者：Orange Tsai  
来源：  
相关阅读：[Hacking Jenkins Part 1 - Play with Dynamic
Routing](https://paper.seebug.org/816/ "Hacking Jenkins Part 1 - Play with
Dynamic Routing")**
嗨! 大家今天过得好吗?
这篇文章是 Hacking Jenkins 系列的下集! 给那些还没看过上篇文章的同学，可以访问下面链结，补充一些基本知识及了解之前如何从 Jenkins
中的动态路由机制到串出各种不同的攻击链!
  * [Hacking Jenkins Part 1 - Play with Dynamic Routing](https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/)
如上篇文章所说，为了最大程度发挥漏洞的效果，想寻找一个代码执行的漏洞可以与 ACL 绕过漏洞搭配，成为一个不用认证的远端代码执行!
不过在最初的尝试中失败了，由于动态路由机制的特性，Jenkins 在遇到一些危险操作时(如 [Script
Console](http://jenkins.local/script))都会再次的检查权限! 导致就算可以绕过最前面的 ACL 层依然无法做太多事情!
直到 Jenkins 在 2018-12-05 发布的 [Security
Advisory](https://jenkins.io/security/advisory/2018-12-05/#SECURITY-595)
修复了前述我所回报的动态路由漏洞! 为了开始撰写这份技术文章(Hacking Jenkins
系列文)，我重新复习了一次当初进行代码审查的笔记，当中对其中一个跳板(gadget)想到了一个不一样的利用方式，因而有了这篇故事!
这也是近期我所写过觉得比较有趣的漏洞之一，非常推荐可以仔细阅读一下!
### 漏洞分析
要解释这次的漏洞
[CVE-2019-1003000](https://jenkins.io/security/advisory/2019-01-08/#SECURITY-1266)
必须要从 Pipeline 开始讲起! 大部分开发者会选择 Jenkins 作为 CI/CD 伺服器的其中一个原因是因为 Jenkins 提供了一个很强大的
Pipeline 功能，使开发者可以方便的去撰写一些 Build Script 以完成自动化的编译、测试及发布! 你可以想像 Pipeline
就是一个小小的微语言可以去对 Jenkins 进行操作(而实际上 Pipeline 是基于 Groovy 的一个 DSL)
为了检查使用者所撰写的 Pipeline Script 有没有语法上的错误(Syntax Error)，Jenkins 提供了一个介面给使用者检查自己的
Pipeline! 这里你可以想像一下，如果你是程式设计师，你要如何去完成这个功能呢? 你可以自己实现一个语法树(AST, Abstract Syntax
Tree)解析器去完成这件事，不过这太累了，最简单的方式当然是套用现成的东西!
前面提到，Pipeline 是基于 Groovy 所实现的一个 DSL，所以 Pipeline 必定也遵守著 Groovy 的语法!
所以最简单的方式是，只要 Groovy 可以成功解析(parse)，那就代表这份 Pipeline 的语法一定是对的! Jenkins
实作检查的程式码约是下面这样子:
    public JSON doCheckScriptCompile(@QueryParameter String value) {
        try {
            CpsGroovyShell trusted = new CpsGroovyShellFactory(null).forTrusted().build();
            new CpsGroovyShellFactory(null).withParent(trusted).build().getClassLoader().parseClass(value);
        } catch (CompilationFailedException x) {
            return JSONArray.fromObject(CpsFlowDefinitionValidator.toCheckStatus(x).toArray());
        }
        return CpsFlowDefinitionValidator.CheckStatus.SUCCESS.asJSON();
        // Approval requirements are managed by regular stapler form validation (via doCheckScript)
    }
这里使用了 [GroovyClassLoader.parseClass(…)](http://docs.groovy-lang.org/latest/html/api/groovy/lang/GroovyClassLoader.html#parseClass-java.lang.String-) 去完成 Groovy 语法的解析! 值得注意的是，由于这只是一个 AST 的解析，在没有执行 `execute()`
的方法前，任何危险的操作是不会被执行的，例如尝试去解析这段 Groovy 代码会发现其实什么事都没发生 :(
    this.class.classLoader.parseClass('''
    print java.lang.Runtime.getRuntime().exec("id")
    ''');
从程式开发者的角度来看，Pipeline 可以操作 Jenkins 那一定很危险，因此要用严格的权限保护住!
但这只是一段简单的语法错误检查，而且呼叫到的地方很多，限制太严格的权限只会让自己绑手绑脚的!
上面的观点听起来很合理，就只是一个 AST 的解析而且没有任何 `execute()` 方法应该很安全，但恰巧这里就成为了我们第一个入口点!
其实第一次看到这段代码时，也想不出什么利用方法就先跳过了，直到要开始撰写技术文章重新温习了一次，我想起了说不定 Meta-Programming 会有搞头!
### 什么是 Meta-Programming
首先我们来解释一下什么是 Meta-Programming!
Meta-Programming 是一种程式设计的思维! Meta-Programming
的精髓在于提供了一个抽象层次给开发者用另外一种思维去撰写更高灵活度及更高开发效率的代码。其实 Meta-Programming
并没有一个很严谨的定义，例如使用程式语言编译所留下的 Metadata
去动态的产生程式码，或是把程式自身当成资料，透过编译器(compiler)或是直译器(interpreter)去撰写代码都可以被说是一种 Meta-Programming! 而其中的哲学其实非常广泛甚至已经可以被当成程式语言的一个章节来独立探讨!
大部分的文章或是书籍在解释 Meta-Programming 的时候通常会这样解释:
> 用程式码(code)产生程式码(code)
如果还是很难理解，你可以想像程式语言中的 `eval(...)` 其实就是一种广义上的 Meta-Programming!
虽然不甚精确，但用这个比喻可以快速的理解 Meta-Programming! 其实就是用程式码(eval 这个函数)去产生程式码(eval 出来的函数)!
在程式开发上，Meta-Programming 也有著极其多的应用，例如:
  * C 语言中的 Macro
  * C++ 的 Template
  * Ruby (Ruby 本身就是一门将 Meta-Programming 发挥到极致的语言，甚至还有专门的[书1](http://shop.oreilly.com/product/9781934356470.do), [书2](http://shop.oreilly.com/product/9781941222126.do))
  * Java 的 Annotation 注解
  * 各种 DSL(Domain Specific Language) 应用，例如 [Sinatra](http://sinatrarb.com/) 及 [Gradle](https://gradle.org/)
而当我们在谈论 Meta-Programming 时，依照作用的范围我们大致分成 **(1)编译时期** 及 **(2)执行时期** 这两种 Meta-Programming! 而我们今天的重点，就是在编译时期的 Meta-Programming!
_P.S. 我也不是一位 Programming Language 大师，如有不精确或者觉得教坏小朋友的地方再请多多包涵 _
### 如何利用
从前面的段落中我们发现 Jenkins 使用 [parseClass(…)](http://docs.groovy-lang.org/latest/html/api/groovy/lang/GroovyClassLoader.html#parseClass-java.lang.String-) 去检查语法错误，我们也想起了 Meta-Programming 可在编译时期对程式码做一些动态的操作!
设计一个编译器(或解析器)是一件很麻烦的事情，里面会有各种肮脏的实作或是奇怪的功能，所以一个很直觉的想法就是，是否可以透过编译器一些副作用(Side
Effect)去完成一些事情呢?
举几个浅显易懂的例子，如 C 语言巨集扩展所造成的资源耗尽
    #define a 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
    #define b a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a
    #define c b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b
    #define d c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c
    #define e d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d
    #define f e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e
    __int128 x[]={f,f,f,f,f,f,f,f};
编译器的资源耗尽(用 18 bytes 产生 16G 的执行档)
    int main[-1u]={1};
或是用编译器来帮你算费式数列
    template
    struct fib {
        static const int value = fib::value + fib::value;
    };
    template<> struct fib { static const int value = 0; };
    template<> struct fib { static const int value = 1; };
    int main() {
        int a = fib::value; // 55
        int b = fib::value; // 6765
        int c = fib::value; // 102334155
    }
从组合语言的结果可以看出这些值在编译期间就被计算好填充进去，而不是执行期间!
    $ g++ template.cpp -o template
    $ objdump -M intel -d template
    ...
    00000000000005fa :
     5fa:   55                      push   rbp
     5fb:   48 89 e5                mov    rbp,rsp
     5fe:   c7 45 f4 37 00 00 00    mov    DWORD PTR [rbp-0xc],0x37
     605:   c7 45 f8 6d 1a 00 00    mov    DWORD PTR [rbp-0x8],0x1a6d
     60c:   c7 45 fc cb 7e 19 06    mov    DWORD PTR [rbp-0x4],0x6197ecb
     613:   b8 00 00 00 00          mov    eax,0x0
     618:   5d                      pop    rbp
     619:   c3                      ret
     61a:   66 0f 1f 44 00 00       nop    WORD PTR [rax+rax*1+0x0]
    ...
更多的例子你可以参考 StackOverflow 上的 [Build a Compiler
Bomb](https://codegolf.stackexchange.com/questions/69189/build-a-compiler-bomb) 这篇文章!
#### 首次尝试
回到我们的漏洞利用上，Pipeline 是基于 Groovy 上的一个 DSL 实作，而 Groovy 刚好就是一门对于 Meta-Programming
非常友善的语言! 翻阅著 Grovvy 官方的 [Meta-Programming 手册](http://groovy-lang.org/metaprogramming.html) 开始寻找各种可以利用的方法! 在 2.1.9 章“测试协助”这个段落发现了
`@groovy.transform.ASTTest` 这个注解，仔细观察它的叙述:
> `@ASTTest` is a special AST transformation meant to help debugging other AST
> transformations or the Groovy compiler itself. It will let the developer
> “explore” the AST during compilation and **perform assertions on the AST**
> rather than on the result of compilation. This means that this AST
> transformations gives access to the AST before the bytecode is produced.
> `@ASTTest` can be placed on any annotable node and requires two parameters:
什么! 可以在 AST 上执行一个 assertion? 这不就是我们要的吗? 赶紧先在本地写个 Proof-of-Concept 尝试是否可行:
    this.class.classLoader.parseClass('''
    @groovy.transform.ASTTest(value={
        assert java.lang.Runtime.getRuntime().exec("touch pwned")
    })
    def x