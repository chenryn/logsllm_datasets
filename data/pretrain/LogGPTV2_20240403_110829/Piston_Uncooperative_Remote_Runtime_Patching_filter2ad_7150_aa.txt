title:Piston: Uncooperative Remote Runtime Patching
author:Christopher Salls and
Yan Shoshitaishvili and
Nick Stephens and
Christopher Kruegel and
Giovanni Vigna
Piston: Uncooperative Remote Runtime Patching
Christopher Salls
University of California, Santa Barbara
PI:EMAIL
Yan Shoshitaishvili
Arizona State University
PI:EMAIL
Nick Stephens
Christopher Kruegel
University of California, Santa Barbara
University of California, Santa Barbara
PI:EMAIL
PI:EMAIL
Giovanni Vigna
University of California, Santa Barbara
PI:EMAIL
ABSTRACT
While software is now being developed with more sophisticated tools,
its complexity has increased considerably, and, as a consequence
new vulnerabilities are discovered every day. To address the constant
flow of vulnerabilities being identified, patches are frequently being
pushed to consumers. Patches, however, often involve having to shut-
down services in order to be applied, which can result in expensive
downtime. To solve this problem, various hot-patching systems have
been devised to patch systems without the need for restarting. These
systems often require either the cooperation of the system or the pro-
cess they are patching. This still leaves out a considerable amount of
systems, most notably embedded devices, which remain unable to be
hot-patched.
We present Piston, a generic system for the remote hot-patching
of uninterruptible software that operates without the system’s coop-
eration. Piston achieves this by using an exploit to take control of the
remote process and modify its code on-the-fly. Piston works directly
on binary code and is capable of automatically counter-acting the de-
structive effects on memory that might be the result of the exploitation.
ACM Reference format:
Christopher Salls, Yan Shoshitaishvili, Nick Stephens, Christopher Kruegel, 
and Giovanni Vigna. 2017. Piston: Uncooperative Remote Runtime Patching. 
In Proceedings of ACSAC 2017, Orlando, FL, USA, December 4–8, 2017, 
13 pages.
https://doi.org/10.1145/3134600.3134611
1 INTRODUCTION
The modern world is run by interconnected software. Software han-
dles our communications, manages our finances, and stores our per-
sonal information. In addition, with the rise of the Internet of Things
(IoT), the number of embedded devices running complex software
has skyrocketed [49]. In fact, the number of bugs found in software
has been increasing over time [43]. Leveraging these bugs lets an
attacker perform actions ranging from the theft of money or data to,
in the case of the Internet of Things, influence the physical world.
Permission to make digital or hard copies of all or part of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage and that copies bear this notice and the full citation on 
the first page. Copyrights for components of this work owned by others than the author(s) 
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, 
to post on servers or to redistribute to lists, requires prior specific permission and/or a 
fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Association 
for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12. . . $15.00
https://doi.org/10.1145/3134600.3134611
The common approach to remedying buggy software is patch-
ing. However, patches suffer from very slow adoption by users, in
part because many patches require system restarts to be applied or
to take effect [30, 32]. In the IoT world, the situation is even more
problematic, as device vendors often fail to incorporate effective and
easy-to-use means to update their products. As a result, even when
a vulnerability is found and publicly disclosed, it is difficult (or even
impossible) for users to install these patches. Finally, the IoT market
is a volatile space, with vendors entering and leaving the ecosystem.
This means that a vendor might not be around anymore while its
vulnerable devices are still connected to the network.
In the best case, when a vulnerability is discovered, the responsible
software vendor will simply develop a patch and push it to its users to
secure their devices. Unfortunately, this scenario does not always play
out. As mentioned above, a device might lack update functionality,
users might not understand how to apply patches (for example, when
firmware must be flashed), or the software vendor is no longer present.
In all these cases, we would like a mechanism that is able to “force”
a patch onto the vulnerable system and fix the vulnerability.
In this paper, we present a technique, called Piston, that leverages
the presence of bugs to automatically patch a system as the result
of exploiting these vulnerabilities. By leveraging an exploit to patch
software, Piston has the unique ability to patch applications without
direct privileged access or, in fact, without any access to the host at
all. Of course, exploiting a vulnerability in a target process and using
this access to patch the underlying vulnerability raises a number of
questions and poses significant challenges:
First, not all bugs can be used for patching – it must be possible to
take control of the victim process. “Fortunately,” a significant portion
of bugs manifest as memory corruption leading to control-flow hijack-
ing [4]. Our intuition is that, aside from taking control of a process for
nefarious purposes, a control-flow hijack can be leveraged to achieve
remote hot-patching of buggy software.
Second, leveraging an exploit to forcefully take control over a
process can have adverse effects on the execution of this process,
such as causing a crash. In some cases, this would not be a problem.
That is, Piston could take control over the process, update the vulner-
able application on the system (on persistent storage), and restart it.
Unfortunately, this approach does not always work. One problem is
that the running process might not have the privileges to write to the
permanent storage, and hence, cannot make the patch persistent. An-
other problem is that the software might control a critical process, and
interrupting its execution has unintended and unwanted consequences.
Hence, it is critical that we perform the patch in a way that allows the
process to continue its execution without interruption (longer than it
takes to patch the running code) or even a crash.
141Previous work has introduced the idea of hot-patching; a system
able to apply patches to software while the software is running. Such
systems have been developed for vehicles [27], kernels [37], user-
space software [38], and, in general uninterruptible systems, or sys-
tems where correctness depends on their continuous execution. How-
ever, these approaches typically have two requirements: fore-planning
on the part of the author, and privileged access to the computer run-
ning the software. For example, kernel hot-patching systems, such
as KSplice [37], require a custom kernel module to be loaded, which
requires administrative privileges. Unfortunately, a large amount of
software does not meet these requirements. User-space software rarely
supports updates without a restart, and many embedded devices do
not give the user necessary permissions. To remedy such situations, a
new approach to patching is required. Specifically, Piston uses novel
applications of binary analysis to identify and automatically repair
data that is corrupted as part of the exploit. That is, our system ex-
ploits a vulnerability to take control of the running process, repairs
the damage that this exploit has caused, then patches the bug in the
code, and finally lets the (now secure) process continue to execute.
Here we will talk about four distinct applications of Piston.
Patching uncooperative systems. Certain systems, such as em-
bedded devices, require that updates be created and distributed by
the device manufacturer. This poses a problem to end users: these
patches are often only provided for a limited period of time, are pro-
duced very slowly, or are never produced at all (in fact, many smaller
embedded devices lack any sort of update mechanism). Even when
patches are distributed, it might be inconvenient to apply them. Some
devices need to be physically connected to a computer to apply the
update, and reboots are standard in almost all cases. Piston allows
these devices to be updated remotely, as long as the original firmware
has a vulnerability that can lead to code execution. The systems do
not have to be designed to be hot-patched with Piston, unlike with
prior approaches for hot-patching embedded systems.
Patching continuity-critical systems. In some applications, down-
time can be prohibitively costly, or even mean the difference between
life and death. A couple examples of these applications are critical
infrastructure components and medical devices. If a vulnerability
is discovered in such systems, it may take significant time before
an update can be applied in a safe, scheduled maintenance window.
As such, systems that have not been developed with hot-patching in
mind, may remain vulnerable to exploits for quite some time as the
maintainer prepares for the downtime to apply the patch.
Piston can instead use this vulnerability (if it leads to code exe-
cution) to provide the update while the system is running. This can
reduce the potentially dangerous delay, as well as preventing the need
to schedule emergency maintenance downtime in such cases.
Emergency patching. As more of our personal and business deal-
ing moves online, security becomes paramount. Whereas compro-
mises may have been simply embarrassing to an organization a decade
ago, today they can cause serious damage to companies. Thus, orga-
nizations must patch software flaws as soon as possible. However,
many organizations struggle to roll out security updates. If prop-
erly used, Piston could make them easier. Piston could be used as
a first-stage emergency patching system. In our example detailing
a patch of NGINX in Section 6, a company running internet-facing
NGINX services could scan their entire network and use Piston to
apply ephemeral (in-memory) emergency patches to every vulnerable
host to tide them over until a permanent patch can be deployed.
Helpful worms. Users and businesses are slow to update devices,
often leaving machines vulnerable long after patches are available. For
example, the Wannacry ransomware exploited a flaw for which a patch
was available three months earlier [22]. Previous work has explored
using “helpful” worms to apply patches on a large scale, without users
or admins needing to apply the patch [11]. One example is the Welchia
worm, known for removing the harmful Blaster worm and patching
the device. Piston could enable the creation of these helpful worms,
even when the vulnerable process does not have enough privileges to
apply the official patch, by applying the patch in-memory.
In this paper, we describe Piston’s approach and detail its im-
plementation atop an existing open-source binary analysis frame-
work [44]. We discuss situations in which Piston can operate au-
tomatically and semi-automatically, and evaluate its efficacy on a
handful of binaries from DARPA’s Cyber Grand Challenge with doc-
umented vulnerabilities. We target stack overflows in these binaries
and show Piston’s effectiveness at automatically remotely patching
through a memory corruption exploit. Additionally, we demonstrate
Piston’s applicability by remotely patching NGINX 1.4.0 against
CVE-2013-2028 [1], using that same vulnerability to achieve remote
code execution. We do this to show that Piston can be used on complex,
real-world binaries with very little analyst intervention.
In summary, this paper makes the following contributions.
Remote hot-patching. We detail our design for an automatic, re-
mote hot-patching system, called Piston, which generates patches
from compiled binaries.
Recovery from an exploit. We introduce novel techniques to auto-
matically recover a program’s state and continue execution after
an exploit.
Evaluation. We use a set of binaries from the DARPA Cyber Grand
Challenge to evaluate Piston’s effectiveness at achieving automated
remote patching through the exploitation in addition to evaluating
Piston’s application to real-world, commonly deployed software,
such as NGINX.
2 OVERVIEW
Piston is not the first approach to patching computer software at run-
time, a process known as hot-patching. In this section, we will give
a general overview of Piston, and its novelties, before moving on to
describe the individual steps in detail in the next section.
Unlike previous work, Piston is designed to patch uncooperative
systems remotely. As the systems it targets are not designed to be
patched in this way (hence uncooperative), this patching requires a
level of remote access unintended by the authors of the software being
patched. Piston achieves this access through the use of an exploit. This
adds two significant challenges to the patching process. First, unlike
existing hot-patching systems, patching must be performed during
the exploitation of the vulnerable process, rather than selecting easy
patch points. Second, the exploitation of the target process frequently
damages that process’ memory space. To allow the program to con-
tinue executing, Piston must repair the memory space of the program
after the patch is applied, all while the software is running.
Unlike some prior work, Piston functions directly on binaries, with
no access to source code. This allows Piston to work on proprietary
142software without source code from the vendor, but also makes its work
more complicated, as a substantial amount of relevant information is
lost when a binary is compiled.
Piston is rather complex, and we introduce a number of terms
throughout this paper to simplify explanation. To aid the busy reader,
we have also compiled a glossary, containing definitions of these
terms, in Appendix A.2.
Piston has four pre-requisites for its operation:
Original binary. This is the binary program that is currently running
as the remote process or system.
Replacement binary. This is the “patched” binary. The remote pro-
cess will be functionally updated to this version of the binary after
Piston’s operation.
Exploit specification. Piston expects a description of how to trigger
a vulnerability in the remote process. This specification must be
able to achieve code execution in the remote process, which Pis-
ton will use to apply the patch. The exploit is expected to bypass
common mitigations such as ASLR and NX if they are used on the
target system.
Remote configuration. To properly model the environment of the
remote process, Piston needs to have a specification of its configu-
ration. For example, if the remote process is an nginx web server,
its configuration file must be provided.
Given these inputs, the approach has three major steps:
1. Patch generation. Given its inputs, Piston performs in-depth
static analysis of the binary to identify the “patch” that needs to be ap-
plied in the memory of the remote process. This is done by leveraging
binary diffing techniques, which is discussed in detail, in Section 3.
2. Repair planning. Unlike traditional hot-patching systems, Pis-
ton exploits a process in order to patch it. Thus, Piston faces a unique
challenge: in the course of exploiting the remote process, the memory
state of the remote process might be damaged.
Piston has the capability to automatically generate a routine which
repairs the corrupted state of a process if it was exploited with a
stack-based buffer overflow. For cases which Piston cannot repair
automatically, including other types of exploits, Piston will require
the analyst to provide a repair routine that should repair the parts
of the process’ memory that Piston is unable to restore. Piston, can
report the parts of the state that were corrupted to the analyst to aid
in the creation of the repair routine. In our evaluation (see section 6)
we show that this repair routine can be automatically generated in the
majority of stack-based buffer overflows which we tested.
Piston may also require a rollback routine that undoes the partial
effects of functions that were interrupted by the exploit. In the case
where a patch involves making a change to a structure definition, Pis-
ton requires an analyst to supply a state transition routine. This routine
should be responsible for updating all instances of the structure in the
target’s memory to abide by the newly patched-in definition.
We talk in-depth about cases where Piston can fully automatically
repair the state and cases where analyst intervention is necessary in
Section 4.
3. Remote patching. Piston uses the exploit specification to craft
an exploit to inject the patcher core. The patcher core, running in
the remote process, retrieves the patch information, a state transition
routine, a rollback routine, and a repair routine. Piston may deem any
one of these routines to be unnecessary to the hot-patching process,
with the exception of the state transition routine where an analyst is
responsible for judging its necessity.
Piston uses the patcher core to then apply these received routines in
turn. After this is completed, the execution returns to the now-patched
remote process and Piston’s operation is complete. In-depth details of
the patching step are in Section 5. When it terminates, the remote pro-
cess will be running a codebase that is functionally equivalent to the
patched binary. A step-by-step example is provided in Appendix A.1.