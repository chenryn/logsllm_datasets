(cid:4)
(cid:2)(cid:3)
(cid:2)(cid:3)
(cid:2)(cid:3)
(cid:4)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
?
?
?
(cid:3)
TABLE III
Keyword
universe
tested
(cid:3)
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:2)(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
Attack name
Communication Volume Attack [125]
Binary Search Attack [127]
Access Pattern Attack [125]
Partially Known Documents [128]
Hierarchical-Search Attack [127]
Count Attack [128]
Graph Matching Attack [129]
Frequency Analysis [130]
Active Attacks [128]
Known Document Attacks [128]
Non-Crossing Attack [131]
SUMMARY OF CURRENT LEAKAGE INFERENCE ATTACKS AGAINST PROTECTED SEARCH BASE QUERIES. 𝑆 IS THE SERVER AND THE ASSUMED ATTACKER FOR ALL ATTACKS LISTED.
𝑆 LEAKAGE SYMBOLS HAVE THE SAME MEANING AS IN TABLE II. EACH ATTACK IS RELEVANT TO SCHEMES IN TABLE II WITH AT LEAST THE 𝑆 LEAKAGE SPECIFIED IN THIS
TABLE. SOME ATTACKS REQUIRE THE ATTACKER TO BE ABLE TO INJECT DATA BY HAVING THE PROVIDER INSERT IT INTO THE DATABASE. LEGENDS FOR THE REST OF THE
COLUMNS FOLLOW. IN ALL COLUMNS EXCEPT “KEYWORD UNIVERSE TESTED,” BUBBLES THAT ARE MORE FILLED IN REPRESENT PROPERTIES THAT ARE BETTER FOR THE SCHEME
PRIOR KNOWLEDGE
◕– CONTENTS OF A SUBSET OF DATASET
(cid:2)– CONTENTS OF FULL DATASET
(cid:3)(cid:4)– DISTRIBUTIONAL KNOWLEDGE OF DATASET
(cid:4)– KEYWORD UNIVERSE
◔– DISTRIBUTIONAL KNOWLEDGE OF QUERIES
AND WORSE FOR THE ATTACKER.
RUNTIME (IN # OF KEYWORDS)
(cid:2)– MORE THAN QUADRATIC
(cid:3)(cid:4)– QUADRATIC
(cid:4)– LINEAR
SENSITIVITY TO PRIOR KNOWLEDGE
(cid:2)– HIGH
(cid:4)– LOW
? – UNTESTED
KEYWORD UNIVERSE TESTED
(cid:2)– > 1000
(cid:3)(cid:4)– 500 TO 1000
(cid:4)– < 500
181
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:00 UTC from IEEE Xplore.  Restrictions apply. 
In summary, each protected search approach has a distinct
leakage proﬁle that results in qualitatively diﬀerent attacks. If
queries only touch a small portion of the dataset or the adver-
sary only has a snapshot, the impact of leakage from 𝙲𝚞𝚜𝚝𝚘𝚖
systems is less than from 𝙻𝚎𝚐𝚊𝚌𝚢 schemes. If queries regularly
return a large fraction of the dataset, this distinction disappears
and an 𝙾𝚋𝚕𝚒𝚟 scheme may be appropriate. Recently, Kellaris
et al. [125] showed an attack on 𝙾𝚋𝚕𝚒𝚟 schemes, but it requires
signiﬁcantly smaller database and keyword universe sizes than
attacks against non-𝙾𝚋𝚕𝚒𝚟 schemes.
Open Problems: The area of leakage attacks against pro-
tected search is expanding. Published attacks consider attack-
ers who insert specially crafted data records but have not
considered an attacker who may issue crafted queries. Fur-
thermore, all prior attacks have considered the leakage proﬁle
of the server. Future attacks should consider the implications
of leakage to the querier and provider. Current attacks have
targeted Equality and Range queries; we encourage the study
of leakage attacks on other query types such as Boolean
queries.
On the reverse side, it is important to understand what
these leakage attacks mean in real-world application scenarios.
Speciﬁcally, is it possible to identify appropriate real-world
use-cases where the known leakage attacks do not disclose too
much information? Understanding this will enable solutions
that better span the security, performance, and functionality
tradeoﬀ space.
Lastly, on the defensive side we encourage designers to
implement 𝐑𝐞𝐟𝐫𝐞𝐬𝐡 mechanisms. 𝐑𝐞𝐟𝐫𝐞𝐬𝐡 mechanisms have
only been implemented for Equality systems.
IV. EXTENDING FUNCTIONALITY
A. Query Composition
We now describe techniques to combine the base queries
described in Section III (equality, Boolean, and range queries)
to obtain richer queries. We restrict our attention to techniques
that are black box (i.e., they do not depend on the implemen-
tation of the base queries).
As a general principle, schemes that support a given query
type by composing base queries tend to have more leakage
than schemes that natively support the same query type as
a base query. However, using query composition, a scheme
that supports the necessary base queries can be extended
straightforwardly to support multiple query types, whereas
supporting those all as base queries requires signiﬁcant eﬀort.
Thus, we see value in advancing both base and composed
queries.
Table IV summarizes the techniques we describe below.
In the table and the text, we cite the ﬁrst work proposing
each approach, though we note that several ideas appear to
have been developed independently and concurrently. We defer
the description of string queries (substrings and wildcards) to
Appendix A.
1) Equality using range: Equality queries can be supported
using a range query scheme. To obtain the records equal to 𝑎,
the querier performs a range query for the range [𝑎, 𝑎].
2) Disjunction of equalities/ranges using equality/range:
Disjunctions of equalities or ranges can be supported using
an equality or a range scheme, respectively. To obtain the
records that equal any of a set of 𝑘 keywords 𝑤1, … , 𝑤𝑘, the
querier can perform an equality query for each keyword 𝑤𝑖
and combine the results. Similarly, to retrieve all records that
are in any of 𝑘 ranges, the querier can perform a range query
for each range and combine the results. This approach reveals
to the server the leakage associated with each equality or
range query, e.g., the exact or approximate number of records
matching each clause (not just the number of records matching
the disjunction overall).
3) Conjunction of equalities using equality: Conjunctions
of equalities can be supported using an equality scheme. To
supporting querying for records that match all of the keywords
𝑤1, … , 𝑤𝑘, one builds an equality scheme containing 𝑘-tuples
of keywords. The querier then performs an equality search on
the 𝑘-tuple representing her query to retrieve the records that
contain all of those keywords. The storage for this approach
grows exponentially with 𝑘 but is viable for targeted keyword
combinations or a small number of ﬁelds.
4) Stemming using equality: Stemming reduces words to
their root form; stemming queries allow matching on word
variations. For example, a stemming query for ‘run’ will also
return results for ‘ran’ and ‘running’. The Porter stemmer
is a widely used algorithm [135], [136]. Stemming can be
supported easily by using the stemmed version of keywords
at both initialization and query time, and thus performing the
match using a single equality query.
5) Proximity using equality: Proximity queries ﬁnd values
that are ‘close’ to the search term. Li et al. [137] support
proximity queries by building an equality scheme associating
each neighbor of any record with its set of neighbors in the
dataset at initialization; a proximity query is then an equality
query, which will return a record if it matches the queried value
or is a neighbor of it. Boldyreva and Chenette [133] improve
on the security of this scheme by revealing only pairwise
neighbor relationships instead of neighbor sets. They also pad
the number of inserted keywords to the maximum number of
neighbors. This solution multiplies storage by the maximum
number of neighbors of a record. If disjunctive searches are
permitted, one can trade oﬀ storage space with the number of
terms in the search.
Another approach uses locality-sensitive hashing [138],
[139], which preserves closeness by mapping ‘close’ inputs
to identical values and ‘far’ inputs to uncorrelated values.
Proximity queries can be supported by inserting the output of
a locality-sensitive hash as a keyword in an equality scheme.
Returning only ‘close’ records requires matching the output
of multiple hashes. Parameters vary widely depending on the
notion of closeness. This approach has been demonstrated for
Jaccard distance [140] and Hamming distance [137], [141]–
[144].
6) Small-domain range query using equality [134]: To
support range queries on a searchable attribute 𝐴 with domain
𝐷, we build two equality-searchable indices. The ﬁrst index
182
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:00 UTC from IEEE Xplore.  Restrictions apply. 
Composed Query
1. Equality (EQ)
2. Disjunction (OR) of 𝑘 EQs (or
ranges)
3. Conjunction (AND) of 𝑘 EQs
4. Stemming
5. Proximity
6. Range w/ small domain
7. Range
8. Negation
9. Substring (𝜌 = 𝜅)
10. Substring (𝜌 ≤ 𝜅)
11. Anchored Substring (𝜌 ≥ 𝜅)
12. Substring
13. Anchored Wildcard
14. Wildcard
Base Query Calls
1 range
𝑘 EQs (or ranges)
1 EQ
1 EQ
1 EQ
(2 + 𝑟) EQs
OR of (2 log 𝑚) EQs
AND of 2 ranges
1 EQ
1 range
AND of (𝜌 − 𝜅 + 1) EQs
OR of (𝛼 − 𝜅 + 1) ANDs
of (𝜌 − 𝜅 + 1) EQs
AND of (𝜌 − 𝜅 + 1) EQs
OR of (𝛼 − 𝜅 + 1) ANDs
of (𝜌 − 𝜅 + 1) EQs
Additional Storage
Leakage
none
none
(𝛽
)
1
𝓁
1
𝑘
log 𝑚
1
𝛼 − 𝜅 + 1
𝛼 − 𝜅 + 1
𝛼 − 𝜅 + 1
𝛼 − 𝜅 + 1
𝛼 − 𝜅 + 1
𝛼 − 𝜅 + 1
TABLE IV
Same as range
Identiﬁers of records matching each clause, if EQ leaks
≥ ◔
Same as EQ
Identiﬁers of records sharing stem, if EQ leaks ≥ ◔
Identiﬁers of neighbor pairs, if EQ leaks ≥ ◔
No leakage if refresh between queries
Distributional info, if EQ leaks ≥ ◔
Same as OR of ranges
Identiﬁers of records sharing 𝜅-grams, if EQ leaks ≥ ◔
Same as range, on 𝜅-grams
If EQ leaks ≥ ◔, rec. ids. w/ 𝜅-grams in same positions;
if AND leaks # clauses, 𝜌
If EQ leaks ≥ ◔, rec. ids. w/ 𝜅-grams in same positions;
if AND leaks # clauses, 𝜌
If EQ leaks ≥ ◔, rec. ids. w/ 𝜅-grams in same positions;
if AND leaks # clauses, 𝜌
If EQ leaks ≥ ◔, rec. ids. w/ 𝜅-grams in same positions;
if AND leaks # clauses, 𝜌
Work
—
—
—
—
[133]
[134]
[16]
[16]
[22]
[22]
[18]
[18]
[18]
[18]
SUMMARY OF QUERY COMBINERS USING EQUALITY (EQ), CONJUNCTION (AND), DISJUNCTION (OR), AND RANGE BASE QUERY TYPES. STORAGE IS GIVEN
AS ADDITIONAL STORAGE BEYOND THAT REQUIRED FOR THE BASE EQUALITY OR RANGE QUERIES, AS A MULTIPLICATIVE FACTOR OVER THE BASE STORAGE.
COMPOSED QUERY LEAKAGE DEPENDS ON THE LEAKAGE OF THE BASE QUERIES USED; THE TABLE GIVES THE COMPOSED QUERY LEAKAGE IF THE BASE
EQUALITY SCHEME LEAKS IDENTITIES. “ANCHORED” REFERS TO A SEARCH THAT OCCURS AT EITHER THE BEGINNING OR THE END OF A STRING.
BOOLEAN NOTATION
𝑘 = # OF CLAUSES IN BOOLEAN
𝛽 = MAX # OF KEYWORDS PER RECORD
PROXIMITY, RANGE NOTATION
𝓁 = MAX # OF NEIGHBORS OF A RECORD
𝑚 = SIZE OF DOMAIN
𝑟 = # QUERY RESULTS
STRING NOTATION
𝜅 = LENGTH OF GRAMS
𝜌 = LENGTH OF QUERY STRING
𝛼 = MAX LENGTH OF DATA STRING
(PADDED IF NECESSARY)
maps each value 𝑎 ∈ 𝐷 to the number of records in the
database smaller than 𝑎 and the number of records larger than
𝑎. With two equality queries into this index, the querier can
learn the location of the lower and upper bounds of a range
query. The second index is an ordered list of records sorted
by 𝐴, from which the client reads the relevant subset.
This approach requires blinding factors to prevent the client
from learning the positions of the results while still being able
to search the second index [134]. Also, this approach only
works for attributes with small domain, since the ﬁrst index
has size proportional to the domain size.
7) Large-domain range using equality and disjunction [16],
[134]: Range queries can be performed over exponential size
domains via range covers, which are a specialization of set
covers that eﬀectively pre-compute the results of canonical
range queries that would be asked during a binary search of
each record. For instance, consider the domain 𝐷 = [0, 8) with
size 𝑚 = 8. To insert a record with attribute 𝐴 = 3, we insert
keywords corresponding to each of the canonical ranges [0, 8),
[0, 4), [2, 4), and [3, 4). Range queries are split into canonical
ranges; for instance, the range [2, 5) would be split into [2, 4)
and [4, 5). Combining this technique with disjunctions yields