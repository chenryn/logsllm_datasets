### Application-Level State

Of the three types of state, application-level state is the most visible and the easiest to identify, retrieve, and restore. To capture application-specific state in accordance with the Fault-Tolerant CORBA (FT-CORBA) standard, every replicated CORBA object must inherit the OMG-IDL `Checkpointable` interface, as shown in Figure 3.

This inherited IDL interface includes two methods: `get_state()` and `set_state()`, both of which are intended to be implemented by the application programmer. The `get_state()` method, when invoked on a CORBA object, returns the current application-level state of the object. The `set_state()` method, when invoked with a specific state as its parameter, overwrites the object’s current application-level state with the provided value.

Since it is not feasible to anticipate or standardize the format of the application-level state for every application object, the application-level state is defined as a `CORBA::Any` type. A variable of type `CORBA::Any` can hold any primitive, structured, or user-defined CORBA type.

For active replication, the recovery of application-level state involves retrieving the current consistent application-level state via a `get_state()` invocation on an existing active replica and transferring the retrieved state via a `set_state()` invocation on a new or recovering replica. For passive replication, the application-level state is periodically retrieved through a `get_state()` invocation on the primary replica. The retrieved checkpoint is either logged (cold passive replication) or transferred to the backup replicas (warm passive replication). The three phases of recovery—state retrieval, state transfer, and state assignment—must occur in a totally-ordered message sequence to ensure replica consistency.

```idl
// Generic definition of application-level state
typedef any State;

// Exceptions thrown during application-level state transfer
exception NoStateAvailable {};
exception InvalidState {};

// IDL interface to be inherited by every replicated object
interface Checkpointable {
    // Returns application-level state
    State get_state() raises(NoStateAvailable);

    // Assigns application-level state
    void set_state(in State s) raises(InvalidState);
};
```

### ORB/POA-Level State

Ideally, ORBs should be viewed as "black-boxes" that are stateless. In reality, because the ORB and the Portable Object Adapter (POA) handle all connection-level and transport-level information on behalf of a CORBA object they support, the ORB and POA maintain some information for the object. This implies that there are no truly "stateless" objects from a recovery perspective; a replicated CORBA object with no application-level state will still have ORB/POA-level state associated with it. ORB/POA-level state is modified as the ORB creates objects, establishes connections, and processes incoming messages.

The ORB/POA-level state for a CORBA object consists of the values of various data structures (e.g., last-seen request identifier, threading policy) stored by the ORB at runtime on behalf of the object. Unfortunately, these pieces of ORB/POA-level state are not visible at the level of the CORBA object. The internal ORB/POA-level state is not standardized and thus varies across ORBs from different vendors. Standardizing this would contradict the Object Management Group's philosophy of standardizing ORB interfaces rather than their implementations.

The vendor-specific nature of the ORB/POA-level state introduces non-determinism if different replicas of the same object are hosted on different vendors' ORBs. Therefore, for practical purposes, a strongly consistent replicated object has all its replicas running over an ORB from the same vendor.

When a CORBA object is replicated, each replica has its own ORB on a distinct processor. For active replication under normal operation, if the object and the ORB are deterministic, both the application-level and ORB/POA-level states will be automatically consistent across all replicas at the end of every operation. However, under recovery, achieving consistent state is more challenging. Even if the application-level state of the recovering active replica is synchronized with that of an operational active replica, the two replicas will differ in their respective ORB/POA-level states unless these are also synchronized.

Similarly, for passive replication, consistent replication cannot be ensured through the transfer of application-level state alone. The respective ORB/POA-level states of the old and new primary replicas will differ unless they are also synchronized. In this paper, we describe how Eternal handles the recovery of ORB/POA-level state, particularly GIOP request identifiers and client-server handshake information.

### 4.2.1 GIOP Request Identifiers

CORBA's General Inter-ORB Protocol (GIOP) incorporates the notion of a request identifier, a unique number that identifies a request-reply pair exchanged between a client and a server over a connection. The client-side ORB generates this request-id on a per-connection basis and inserts it into the standard GIOP header of every outgoing request. The server-side ORB retrieves the request-id and inserts it into the GIOP header of the corresponding IIOP reply message. Typically, the client-side ORB increments the per-connection request-id as the number of requests sent by the client over the connection increases. The request-id allows the client-side ORB to match a received IIOP reply with an outstanding IIOP request. Replies with mismatched request-ids are discarded by the client-side ORB.

Figure 4 demonstrates the replica inconsistency that ensues if ORB/POA-level state, such as the request-id, is not synchronized during recovery.

**Figure 4:**
- **(a)** An existing replica of an actively replicated client object A issues an invocation (e.g., method X of object B) with a request-id of 350.
- **(b)** A new replica of the same object A is launched, and its application-level state (but not the ORB/POA-level state, such as the request-id) is synchronized with that of the existing replica.
- **(c)** Both replicas dispatch their next invocation on object B. The existing replica's ORB assigns the correct request-id of 351, while the newly-recovered replica's ORB assigns a request-id of 0.

If the first invocation to reach B has a request-id of 0, B's server-side ORB will insert a request-id of 0 in its outgoing IIOP reply. When this reply reaches the ORBs hosting the two replicas of A, only the ORB that assigned the request-id of 0 (the newly-recovered replica's ORB) will deliver the response to its replica. The ORB that hosts the existing replica (and assigned a request-id of 351) will detect a mismatch and discard the reply, causing the existing replica to wait indefinitely for a response.

To avoid this, a new replica's ORB must hold the same value for the request-id counter as the ORBs hosting operational replicas of the same object. Otherwise, the mismatch between the returned request-id and the transmitted request-id will cause one or the other of the client-side ORBs to discard a valid reply from the server.

This request-id information is buried within the client-side ORB, and there are no hooks in today's ORBs to retrieve this information. Fortunately, the request-id information is visible in the IIOP request and response messages sent by the ORB. By parsing every outgoing IIOP request message, Eternal can discover and store the ORB's current setting for the request-id for each of the ORB's connections. Transferring this stored value for the request-id at the point of recovery ensures that the GIOP headers of all outgoing IIOP request messages from both new and existing replicas are consistent.

### 4.2.2 Client-Server Handshake

CORBA allows client-side and server-side ORBs to exchange vendor-specific information. This does not detract from CORBA's interoperability because vendor X's ORB will not understand vendor Y's ORB-specific information and can ignore it.

CORBA's GIOP allows vendor-specific information to propagate from the client to the server through the `ServiceContext` field of IIOP request messages. The server-side ORB can examine, modify, and return this `ServiceContext` in its replies to the client. `ServiceContext` information is particularly used in the initial handshake between the client and the server.

**Vendor-specific shortcuts:**
- The `ServiceContext` information may enable the client-side ORB and the server-side ORB to recognize that they are from the same vendor and use this awareness for efficiency using vendor-specific shortcuts. For example, client-side and server-side VisiBroker 4.0 ORBs can initially negotiate a shorter object key for use in subsequent IIOP requests from the client.

**Code set negotiation:**
- A transmission code set is the commonly agreed-upon encoding used for character and wide-character data transfer between the client's and server's ORBs. The client-side ORB can determine a server's code sets from the code set component that the server-side ORB inserts into its server's published IOR. The client-side ORB uses this information to choose character and wide-character transmission code sets for its subsequent communication with the server. Code set negotiation is performed only when a client initially connects to a server.

Regardless of the purpose of the initial client-server handshake, both the client-side and server-side ORBs store the results of their initial negotiation on a per-connection basis. This constitutes ORB/POA-level state that must be appropriately handled during recovery.

Consider a client A communicating with a replicated server B with a replica B1. Assume that A and B1 have already completed their initial handshake, and A's ORB now stores the negotiated information, encapsulating it (e.g., in the `ServiceContext` field) in every request it sends to B. When a new replica B2 of object B is launched, client A does not (and should not, for replication transparency) detect the addition of a new server replica and thus will not reenact this negotiation with B2.

Unfortunately, B2's server-side ORB, having missed the initial client-server handshake, is unable to interpret the already-negotiated information in A's requests. Thus, A's requests, when delivered to B2's ORB, will be discarded. Although B2's application-level state might be recovered, its ORB/POA-level state is not sufficiently restored to allow it to process A's requests and function normally, as the existing replica B1 does.

Eternal restores the negotiated ORB/POA-level state to the ORB of a new server replica by storing the client's handshake message (that initiated the client-server negotiation) and delivering this message to the new server replica's ORB ahead of any other IIOP request from the client. This artificial injection of the client's handshake message into the new server replica's ORB causes the server-side ORB to initialize its ORB/POA-level state, allowing it to process A's requests and function normally.