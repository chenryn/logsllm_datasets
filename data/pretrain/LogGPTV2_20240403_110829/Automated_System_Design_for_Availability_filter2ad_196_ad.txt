# Automated System Design for Optimal Performance and Availability

## Abstract
This paper introduces Aved, an automated system design engine that determines the minimum cost configuration of computing infrastructure to meet service level performance and availability requirements. The model used by Aved is designed to be both general and practical, allowing it to represent a wide variety of system infrastructure choices and service types. Examples are provided to demonstrate the applicability of this approach in different environments, such as an E-Commerce service and a scientific application.

## 1. Introduction
The idea of automating the design and configuration of systems to meet user-specified availability requirements is relatively recent. Most existing work focuses on limited domains or specific aspects of system management. Aved aims to provide a comprehensive solution that considers performance, availability, and data protection requirements.

## 2. Model and Approach
To enable automatic exploration of the design space, we propose a model that can represent various options for designing and configuring the infrastructure. The primary challenge was to balance generality and practicality. Our solution uses a structured model with a small number of fundamental constructs (components, failure modes, mechanisms, etc.) that are intuitive to map to real-life entities. We carefully selected the attribute set for each construct and defined clear dependencies between attributes in different constructs.

### 2.1. Fundamental Constructs
- **Components**: Represent the building blocks of the system.
- **Failure Modes**: Describe how components can fail.
- **Mechanisms**: Define how failures are handled.

### 2.2. Dependencies
- **Component Attributes**: Include performance, cost, and reliability.
- **Failure Mode Attributes**: Include failure rate and impact.
- **Mechanism Attributes**: Include recovery time and overhead.

## 3. Example Applications
### 3.1. E-Commerce Service
For an E-Commerce service, Aved can determine the optimal configuration of web servers, databases, and load balancers to meet performance and availability requirements. The model considers factors such as server capacity, network latency, and database replication.

### 3.2. Scientific Application
For a scientific application, Aved can determine the optimal checkpoint interval and storage location for application state. The model considers job execution time, resource overhead, and failure rates.

## 4. Cost, Performance, and Availability Trade-offs
Figures 7 and 8 illustrate the trade-offs among cost, availability, and performance. For example, a large improvement in downtime can be achieved with a low additional cost, or slightly relaxing the downtime requirement can significantly reduce the cost overhead for availability.

## 5. Related Work
- **Oracle Database**: Implements a function to automatically determine when to flush data and logs to meet a user-specified recovery time.
- **Storage Systems**: Propose automated design for data dependability, which can be combined with Aved.
- **Cluster Failover Products**: Detect node failures and automatically failover application components.
- **Utility Computing Efforts**: Automatically detect and replace failed components from a free pool.

## 6. Conclusions
Aved is a significant step towards automated system design. Future work will include extending Aved to consider network and storage subsystems, integrating it with online monitoring mechanisms, and conducting case studies to identify additional design choices and required extensions.

## 7. References
[1] V. Castelli, R. E. Harper, P. Heidelberger, S. W. Hunter, K. S. Trivedi, K. Vaidyanathan, and W. P. Zeggert. Proactive management of software aging. IBM Journal of Research and Development, 45(2):311–332, March 2001.

[2] G. Clark, T. Courtney, D. Daly, D. Deavours, S. Derisavi, J. M. Doyle, W. H. Sanders, and P. Webster. The Möbius modeling tool. In 9th Int’l Workshop on Petri Nets and Performance Models, pages 241–250, Sep 2001.

[3] I. Foster, C. Kesselman, J. Nick, and S. Tuecke. Grid Services for distributed system integration. Computer, 35(6), 2002.

[4] Hewlett Packard Company. Availability advantage. h18005.www1.hp.com/services/advantage/aa_avanto.html, January 2003.

[5] Hewlett Packard Company. HP MC/ServiceGuard. www.hp.com/products1/unix/highavailability/ar/mcserviceguard/index.html, January 2003.

[6] Hewlett Packard Company. TruCluster software. www.tru64unix.compaq.com/cluster/, January 2003.

[7] Hewlett Packard Company. Utility computing. devresource.hp.com/topics/utility_comp.html, January 2003.

[8] International Business Machines, Inc. Autonomic computing. www.ibm.com/autonomic/index.shtml, January 2003.

[9] K. Keeton and J. Wilkes. Automating data dependability. In 10th ACM-SIGOPS European Workshop, Sep 2002.

[10] T. Lahiri, A. Ganesh, R. Weiss, and A. Joshi. Fast-Start: quick fault recovery in Oracle. In ACM SIGMOD, pages 593–598, 2001.

[11] Office of Government Commerce. ITIL Service Support. IT Infrastructure Library. The Stationery Office, United Kingdom, June 2000.

[12] R. A. Sahner and K. S. Trivedi. Reliability modeling using SHARPE. IEEE Transactions on Reliability, R-36(2):186–193, June 1987.

[13] Sun Microsystems, Inc. N1: Revolutionary IT architecture for business. www.sun.com/software/solutions/n1/index.html, January 2003.

[14] Sun Microsystems, Inc. Sun[tm] Cluster. www.sun.com/software/cluster/, January 2003.

[15] VMware. VirtualCenter white paper. www.vmware.com/pdf/vc_wp.pdf.

---

**Note**: The figures and tables mentioned in the original text are not included in this optimized version. They should be integrated into the document as appropriate.