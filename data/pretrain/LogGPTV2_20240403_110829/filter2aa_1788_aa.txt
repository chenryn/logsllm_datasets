# Microkernel Development: From Project to Implementation

## Technical Notes
**Author:** Rodrigo Maximiano Antunes de Almeida  
**Email:** PI:EMAIL  
**Institution:** Universidade Federal de Itajubá

### Summary
These technical notes accompany the ESC talk titled "Microkernel Development: From Project to Implementation" presented by Rodrigo Maximiano Antunes de Almeida from Unifei. The talk covers the design and implementation of a microkernel, developed in ISO-C without standard libraries, ensuring portability across different architectures. The project will also address the standardization of procedures and hardware requirements, encapsulated as drivers. By the end of the session, participants will have a better understanding of the kernel's advantages and limitations.

This document provides a detailed exploration of the theoretical aspects covered in the presentation.

### License
This document is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA) license. You are free to:
- **Share** — copy, distribute, and transmit the work.
- **Remix** — adapt the work.

Under the following conditions:
- **Attribution** — You must attribute the work (but not in any way that suggests endorsement).
- **Noncommercial** — You may not use this work for commercial purposes.
- **Share Alike** — If you alter, transform, or build upon this work, you may distribute the resulting work only under the same or similar license.

### Index
1. Developing an Embedded System
   1.1 System Connections
2. System Programming
   2.1 Making Access to the Hardware
   2.2 Accessing Individual Bits
   2.3 LCD Communication
   2.4 Analog Reading
3. First Embedded Firmware
4. What is a Kernel?
5. Kernel Components
6. Kernel Project
   6.1 Why Develop Our Own Kernel?
   6.2 Alternatives
   6.3 Monolithic Kernel vs. Microkernel
   6.4 Kernel Design Decisions
   6.5 This Course Decisions
7. Concepts
   7.1 Function Pointers
   7.2 First Example
   7.3 Structs
   7.4 Circular Buffers
   7.5 Second Example
   7.6 Temporal Conditions
   7.7 Third Example
8. The Kernel
9. Building the Device Driver Controller
   9.1 Device Driver Pattern
   9.2 Controller Engine
   9.3 Using the Controller Engine
   9.4 Interesting Situations
   9.5 Driver Callback

## 1. Developing an Embedded System
An embedded system is designed for a specific purpose, with a microcontroller or microprocessor as its central component. The software built for the microcontroller supports the functionalities of the embedded product. Developing an embedded system involves both hardware and software considerations.

### 1.1 System Connections
The hardware part includes a microcontroller and other circuits that interface between the microcontroller and the user or other microcontrollers. A schematic document describes how these components are connected.

For our system, we will use:
- **Microcontroller Unit (MCU):** PIC18F4550
- **LCD Output Interface:** HD77480
- **Input Information:** Regular potentiometer

The connections for this system can be made using a protoboard, as shown in the following schematic:

[Insert Schematic Image Here]

## 2. System Programming
To program the system, a dedicated programmer is used. Initial setup code is required for the programmer to function correctly.

```c
#pragma config MCLRE=ON                // Master Clear disable
#pragma config FOSC=INTOSC_XT          // Internal oscillator
#pragma config WDT=OFF                 // Watchdog disabled
#pragma config LVP=OFF                 // Low voltage programming disabled
#pragma config DEBUG=OFF
#pragma config XINST=OFF               // Don't use new processor instructions
```

### 2.1 Making Access to the Hardware
All terminals are mapped in the RAM area. To access a terminal, find its address and create a pointer to it. For example, PORTD is connected at address 0xF83.

```c
void main(void) {
    char *ptr;
    // Pointing to the port D
    ptr = (char *)0xF83;  
    // Changing all outputs to high
    *ptr = 0xFF;
}
```

To make the peripheral usable, define the direction of the circuit as input or output using the TRIS register.

```c
#define PORTD (*(volatile unsigned char *)0xF83)
#define TRISD (*(volatile unsigned char *)0xF95)

void main(void) {
    TRISD = 0x00; // Set all PORTD pins as output
    while(1) {
        PORTD ^= 0xFF; // Toggle all PORTD pins
    }
}
```

### 2.2 Accessing Individual Bits
Addresses are generally composed of eight bits, each mapped to a terminal. Use bitwise operations for individual bit manipulation.

```c
// Using define
#define BitSet(arg, bit) ((arg) |= (1 << (bit)))
#define BitClr(arg, bit) ((arg) &= ~(1 << (bit)))

// Example usage
BitSet(PORTD, 0); // Set the first bit of PORTD
BitClr(PORTD, 0); // Clear the first bit of PORTD
```

### 2.3 LCD Communication
The LCD communication involves sending commands and data. The difference between a command and data is the value on the Register Select (RS) pin.

```c
#define EN 2
#define RS 1

void pushNibble(unsigned int val, int rs) {
    PORTC = (PORTC & 0xF0) | (val & 0x0F);
    PORTC = (rs ? (PORTC | (1 << RS)) : (PORTC & ~(1 << RS)));
    delayMicroseconds(1);
    PORTC |= (1 << EN);
    delayMicroseconds(1);
    PORTC &= ~(1 << EN);
    delayMicroseconds(1);
}

void lcdCommand(int value) {
    pushByte(value, 0);
    delayMicroseconds(40);
}

void lcdChar(char value) {
    pushByte((unsigned int)value, 1);
    delayMicroseconds(2);
}

void lcdInit() {
    BitClr(TRISC, EN);
    BitClr(TRISC, RS);
    TRISD = 0x0f;
    delayMicroseconds(50);
    commandWriteNibble(0x03);
    delayMicroseconds(5);
    commandWriteNibble(0x03);
    delayMicroseconds(100);
    commandWriteNibble(0x03);
    delayMicroseconds(5);
    commandWriteNibble(0x02);
    delayMicroseconds(10);
    lcdCommand(0x28); // 8-bit, 2 lines, 5x8
    lcdCommand(0x06); // Incremental mode
    lcdCommand(0x0c); // Display and cursor on, with blink
    lcdCommand(0x03); // Reset
    lcdCommand(0x80); // Initial position
    lcdCommand(0x01); // Clear display
    delayMicroseconds(2);
}

void lcdString(char msg[]) {
    unsigned char i = 0;
    while (msg[i]) {
        lcdChar(msg[i]);
        i++;
    }
}
```

### 2.4 Analog Reading
Reading analog values from a potentiometer involves configuring the ADC and reading the analog-to-digital conversion result.

```c
void setupADC() {
    ADCON1 = 0b00000001; // Right justify, AN0 selected
    ADCON0 = 0b00000001; // A/D converter on, Fosc/32
}

unsigned int readADC() {
    GO_nDONE = 1; // Start conversion
    while (GO_nDONE); // Wait for conversion to complete
    return ADRESH; // Return the 8-bit result
}

void main(void) {
    setupADC();
    while (1) {
        unsigned int adcValue = readADC();
        if (adcValue > 512) {
            PORTD = 0xFF;
        } else {
            PORTD = 0x00;
        }
    }
}
```

## 3. First Embedded Firmware
The first firmware for the embedded system will initialize the hardware and set up basic functionality. This includes configuring the microcontroller, setting up the LCD, and reading from the potentiometer.

## 4. What is a Kernel?
A kernel is the core of an operating system, responsible for managing system resources and providing services to applications. It acts as a bridge between the hardware and software, handling tasks such as process management, memory management, and device drivers.

## 5. Kernel Components
The kernel consists of several components, including:
- Process Management
- Memory Management
- File System
- Device Drivers
- Networking

## 6. Kernel Project
### 6.1 Why Develop Our Own Kernel?
Developing a custom kernel allows for deep customization, learning, and control over the system. It is also a valuable educational experience.

### 6.2 Alternatives
Alternatives include using existing kernels like Linux, FreeRTOS, or uC/OS, which are well-tested and supported but may lack the flexibility of a custom solution.

### 6.3 Monolithic Kernel vs. Microkernel
- **Monolithic Kernel:** All services run in kernel space, leading to higher performance but lower modularity.
- **Microkernel:** Only essential services run in kernel space, with other services running in user space, leading to better modularity and security but potentially lower performance.

### 6.4 Kernel Design Decisions
Design decisions include:
- Architecture (monolithic vs. microkernel)
- Language and libraries
- Portability
- Security and reliability

### 6.5 This Course Decisions
For this course, we will develop a microkernel in ISO-C without standard libraries, focusing on portability and simplicity.

## 7. Concepts
### 7.1 Function Pointers
Function pointers allow functions to be passed as arguments and stored in variables, enabling more flexible and dynamic code.

### 7.2 First Example
```c
#include <stdio.h>

void greet() {
    printf("Hello, World!\n");
}

int main() {
    void (*func_ptr)() = greet;
    func_ptr(); // Calls the greet function
    return 0;
}
```

### 7.3 Structs
Structs allow grouping of related data into a single unit, making it easier to manage and pass around.

### 7.4 Circular Buffers
Circular buffers are useful for managing data in a fixed-size buffer, where the oldest data is overwritten when the buffer is full.

### 7.5 Second Example
```c
#include <stdio.h>

typedef struct {
    int size;
    int front;
    int rear;
    int *buffer;
} CircularBuffer;

void initBuffer(CircularBuffer *cb, int size) {
    cb->size = size;
    cb->front = 0;
    cb->rear = 0;
    cb->buffer = (int *)malloc(size * sizeof(int));
}

void enqueue(CircularBuffer *cb, int value) {
    if ((cb->rear + 1) % cb->size == cb->front) {
        printf("Buffer is full\n");
        return;
    }
    cb->buffer[cb->rear] = value;
    cb->rear = (cb->rear + 1) % cb->size;
}

int dequeue(CircularBuffer *cb) {
    if (cb->front == cb->rear) {
        printf("Buffer is empty\n");
        return -1;
    }
    int value = cb->buffer[cb->front];
    cb->front = (cb->front + 1) % cb->size;
    return value;
}

int main() {
    CircularBuffer cb;
    initBuffer(&cb, 5);
    enqueue(&cb, 1);
    enqueue(&cb, 2);
    printf("Dequeued: %d\n", dequeue(&cb));
    return 0;
}
```

### 7.6 Temporal Conditions
Temporal conditions involve time-based logic, such as delays, timeouts, and periodic tasks.

### 7.7 Third Example
```c
#include <stdio.h>
#include <unistd.h> // For sleep()

void periodicTask() {
    while (1) {
        printf("Task executed\n");
        sleep(1); // Sleep for 1 second
    }
}

int main() {
    periodicTask();
    return 0;
}
```

## 8. The Kernel
The kernel will be designed to handle basic system operations, including task scheduling, memory management, and device driver support.

## 9. Building the Device Driver Controller
### 9.1 Device Driver Pattern
Device drivers follow a common pattern, including initialization, configuration, and data transfer.

### 9.2 Controller Engine
The controller engine manages the device drivers, ensuring they are properly initialized and configured.

### 9.3 Using the Controller Engine
The controller engine can be used to manage multiple device drivers, simplifying the overall system design.

### 9.4 Interesting Situations
Interesting situations include handling device-specific quirks, error conditions, and performance optimizations.

### 9.5 Driver Callback
Driver callbacks allow for asynchronous operation, where the driver can notify the system when an event occurs.

```c
typedef void (*Callback)(void);

void registerCallback(Callback cb) {
    // Register the callback function
}

void triggerCallback() {
    // Trigger the registered callback
}

int main() {
    registerCallback(triggerCallback);
    // Simulate an event
    triggerCallback();
    return 0;
}
```