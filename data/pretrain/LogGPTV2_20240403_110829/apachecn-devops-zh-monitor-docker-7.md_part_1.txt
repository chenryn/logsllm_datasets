# 七、从容器中收集应用日志
监控中最容易被忽略的部分之一是应用或服务(如 NGINX、MySQL、Apache 等)生成的日志文件。到目前为止，我们已经研究了记录容器中进程在某个时间点的 CPU 和 RAM 利用率的各种方法，现在是时候对日志文件进行同样的记录了。
如果您是以“牛”或“鸡”的形式运行您的容器，那么您手动或自动处理销毁和重新启动容器问题的方式非常重要。虽然这应该可以解决眼前的问题，但它无助于追踪问题的根本原因，如果您不知道这一点，那么您如何尝试解决它，以便它不会再次发生。
在本章中，我们将了解如何将容器中运行的应用的日志文件内容放在中心位置，以便它们可用，即使您必须销毁和替换容器。我们将在本章中讨论以下主题:
*   如何查看容器日志？
*   使用 Docker 容器栈部署“ELK”栈，将日志运送到
*   查看您的日志
*   有哪些第三方选项？
# 查看容器日志
就像的`docker top`命令一样，有一种非常基本的查看日志的方式。当您使用`docker logs`命令时，您实际上是在查看容器内运行的进程的`STDOUT`和`STDERR`。
### 注
关于标准流的更多信息，请参见[https://en.wikipedia.org/wiki/Standard_streams](https://en.wikipedia.org/wiki/Standard_streams)。
从下面的截图可以看到，你要做的最简单的事情就是运行`docker logs`，后面跟着你的容器名:
![Viewing container logs](img/00059.jpeg)
要在您自己的主机上看到这一点，让我们使用以下命令从`chapter05`启动 WordPress 安装:
```
cd /monitoring_docker/chapter05/wordpress/
docker-compose up –d
docker logs wordpress_wordpress1_1
```
您可以通过在容器名称前添加以下标志来扩展`dockerlogs`命令:
*   `-f`或`--follow`将实时流式传输日志
*   `-t`或`--timestamps`将在每一行的开始显示一个时间戳
*   `--tail="5"`将显示最后 *x* 的行数
*   `--since="5m00s"`将只显示最近 5 分钟的条目
使用我们刚刚启动的 WordPress 安装，尝试运行以下命令:
```
docker logs --tail="2" wordpress_wordpress1_1
```
这将显示日志的最后两行，您可以使用以下命令添加时间戳:
```
docker logs --tail="2" –timestamps wordpress_wordpress1_1
```
正如您在下面的终端输出中看到的，您还可以将命令串在一起形成一种非常基本的查询语言:
![Viewing container logs](img/00060.jpeg)
使用`docker logs`的缺点与使用`docker top`完全相同，因为它仅在本地可用，并且日志仅在容器存在的时间内存在，您可以查看停止的容器的日志，但是一旦容器被移除，日志也将被移除。
# 每个栈
类似于我们在本书中介绍的一些技术，一个 ELK 栈真的值得拥有一本书；事实上，构成 ELK 栈的每个元素都有书籍，这些元素是:
*   Elasticsearch 是一款功能强大的搜索服务器，开发时考虑到了现代工作负载
*   Logstash 位于您的数据源和弹性搜索服务之间；它将您的数据实时转换为 Elasticsearch 可以理解的格式。
*   Kibana 位于您的 Elasticsearch 服务前面，允许您在功能丰富的基于网络的仪表板中查询数据。
有一个 ELK 栈有很多移动的部分，所以为了简化事情，我们将使用一个预建的栈来进行测试；但是，您可能不想在生产中使用这个栈。
## 开始堆叠
让我们启动一个新的流浪主机来运行 ELK 栈:
```
[russ@mac ~]$ cd ~/Documents/Projects/monitoring-docker/vagrant-centos/
[russ@mac ~]$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==> default: Importing base box 'russmckendrick/centos71'...
==> default: Matching MAC address for NAT networking...
==> default: Checking if box 'russmckendrick/centos71' is up to date...
.....
==> default: => Installing docker-engine ...
==> default: => Configuring vagrant user ...
==> default: => Starting docker-engine ...
==> default: => Installing docker-compose ...
==> default: => Finished installation of Docker
[russ@mac ~]$ vagrant ssh
```
现在，我们有了一个正常运行的干净主机，我们可以通过运行以下命令来启动栈:
```
[vagrant@docker ~]$ cd /monitoring_docker/chapter07/elk/
[vagrant@docker elk]$ docker-compose up -d
```
你可能已经注意到了，它做的更多，只是下拉了一些图片；事情是这样的:
*   一个弹性搜索容器使用来自[https://hub.docker.com/_/elasticsearch/](https://hub.docker.com/_/elasticsearch/)的官方图片发布。
*   一个 Logstash 容器是使用来自[https://hub.docker.com/_/logstash/](https://hub.docker.com/_/logstash/)的官方图片启动的，它也是用我们自己的配置启动的，这意味着我们的安装会监听从 Logspout 发送的日志(一分钟后会有更多相关信息)。
*   一个定制的基巴纳映像是使用来自[https://hub.docker.com/_/kibana/](https://hub.docker.com/_/kibana/)的官方映像构建的。它所做的只是添加了一个小脚本，以确保在我们的弹性搜索容器完全启动并运行之前，Kibana 不会启动。然后，它使用自定义配置文件启动。
*   一个定制的 Logspout 容器是使用来自[https://hub.docker.com/r/gliderlabs/logspout/](https://hub.docker.com/r/gliderlabs/logspout/)的官方图片构建的，然后我们添加了一个定制模块，这样 Logspout 就可以和 Logstash 对话了。
一旦`docker-compose`完成构建并启动栈，在运行`docker-compose ps`时，您应该能够看到如下内容:
![Starting the stack](img/00061.jpeg)
我们现在已经建立并运行了我们的 ELK 栈，正如您可能已经注意到的，还有一个额外的容器正在运行，并为我们提供了一个 ELK-L 栈，那么什么是 Logspout 呢？
## 日志包
如果我们要启动 Elasticsearch、Logstash 和 Kibana 容器，我们应该有一个功能正常的 ELK 栈，但是我们将有很多配置要做来将我们的容器日志放入 Elasticsearch。
自 Docker 1.6 以来，您已经能够配置日志驱动程序，这意味着可以启动一个容器，并让它将其`STDOUT`和`STDERR`发送到系统日志服务器，在我们的例子中，该服务器将是 Logstash 但是，这意味着每次我们启动容器时，您都必须添加类似于以下选项的内容:
```
--log-driver=syslog --log-opt syslog-address=tcp://elk_logstash_1:5000 
```
这就是 Logspout 的用武之地，它被设计成通过截取 Docker 进程正在收集的消息来收集主机上的所有`STDOUT`和`STDERR`消息，然后以 Elasticsearch 能够理解的格式将它们路由到我们的 Logstash 实例。
正如日志驱动程序一样，它支持开箱即用的 Syslog 但是，有一个第三方模块将输出转换为 JSON，Logstash 理解这一点。作为构建的一部分，我们下载、编译并配置了该模块。
您可以在以下网址找到关于日志喷口和日志驱动程序的更多信息: