# Windows访问令牌窃取攻防技术研究
|
##### 译文声明
本文是翻译文章，文章原作者 Justin Bui，文章来源：https://posts.specterops.io/
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
#
## 0x00 前言
在本文中，我们介绍了访问令牌窃取的相关概念，以及如何在`winlogon.exe`上利用该技术从管理员上下文中模拟`SYSTEM`访问令牌。MITRE
ATT&CK将该技术归为[ **Access Token
Manipulation**](https://attack.mitre.org/techniques/T1134/)（访问令牌操控）类别。
如果本地管理员账户因为某些组策略（Group
Policy）设置无法获取某些权限，此时模仿`SYSTEM`访问令牌是非常有用的一种技术。比如，本地管理员组可能不具备`SeDebugPrivilege`权限，这样就能加大攻击者转储凭据或者与其他进程内存交互的难度。然而，管理人员无法从`SYSTEM`账户中撤销相关权限，因为这是操作系统正常运行的基础。因此，在加固环境中，`SYSTEM`访问令牌对攻击者而言具有非常高的价值。
了解操控访问令牌的概念后，我将介绍如何使用系统访问控制列表（SACL）来审计进程对象，以便检测恶意操控访问令牌的攻击行为。这种检测技术有一个缺点：防御方必须清楚哪些进程是攻击者的目标。
最后，本文探索了还有哪些`SYSTEM`进程可以替代`winlogon.exe`，用来实施访问令牌模拟攻击，我也介绍了寻找这些进程的方法以及相关知识点。
## 0x01 窃取访问令牌
**备注：** 如果大家对访问令牌控制技术比较了解，想深入了解如何寻找其他可用的`SYSTEM`进程，那么可以直接跳过这一节。
我们可以使用如下Windows
API来窃取并滥用访问令牌：`OpenProcess()`、`OpenProcessToken()`、`ImpersonateLoggedOnUser()`、`DuplicateTokenEx()`以及`CreateProcessWithTokenW()`。
图. 使用Windows API窃取访问令牌
`OpenProcess()`以进程标识符（PID）为参数，返回一个进程句柄，打开句柄时必须使用`PROCESS_QUERY_INFORMATION`、`PROCESS_QUERY_LIMITED_INFORMATION`或者`PROCESS_ALL_ACCESS`访问权限，这样`OpenProcessToken()`才能使用返回的进程句柄。
图. OpenProcess文档
`OpenProcessToken()`以进程句柄及访问权限标志作为参数，用来打开访问令牌所关联进程的句柄。我们必须使用`TOKEN_QUERY`以及`TOKEN_DUPLICATE`访问权限打开令牌句柄，才能与`ImpersonateLoggedOnUser()`配合使用。我们也可以只使用`TOKEN_DUPLICATE`访问权限打开令牌句柄，与`DuplicateTokenEx()`配合使用。
图. OpenProcessToken文档
利用`OpenProcessToken()`获取令牌句柄后，我们可以使用`ImpersonatedLoggedOnUser()`，使当前进程可以模拟已登录的另一个用户。该进程会继续模拟已登录的该用户，直到线程退出或者我们显示调用`RevertToSelf()`。
图. ImpersonateLoggedOnUser文档
如果想以另一个用户身份运行进程，我们必须在`OpenProcessToken()`返回的令牌句柄上使用`DuplicateTokenEx()`，创建新的访问令牌。我们必须使用`TOKEN_ADJUST_DEFAULT`、`TOKEN_ADJUST_SESSIONID`、`TOKEN_QUERY`、`TOKEN_DUPLICATE以及TOKEN_ASSIGN_PRIMARY`访问权限来调用`DuplicateTokenEx()`，才能与`CreateProcessWithTokenW()`配合使用。`DuplicateTokenEx()`创建的访问令牌可以传入`CreateProcessWithTokenW()`，通过复制的令牌运行目标进程。
图. DuplicateTokenEx文档
图. CreateProcessWithTokenW文档
我整理了一些代码演示令牌操作过程，大部分代码借鉴了@[kondencuotas](https://twitter.com/kondencuotas)发表过的一篇[文章](https://ired.team/offensive-security/privilege-escalation/t1134-access-token-manipulation)。
大家可以访问[此处](https://github.com/justinbui/PrimaryTokenTheft)下载我的测试代码。
## 0x02 利用winlogon.exe提升至SYSTEM权限
在今年早些时候，[Nick Landers](https://twitter.com/monoxgas)介绍了从本地管理员提升到`NT
AUTHORITY\SYSTEM`的一种简单[方法](https://t.co/gQdLHtmu98)。
在本地管理员（高完整性，high-integrity）上下文中，我们可以从`winlogon.exe`中窃取访问令牌，在当前线程中模拟`SYSTEM`，或者以`SYSTEM`运行新的进程。
图. 从`winlogon.exe`中窃取`SYSTEM`令牌
## 0x03 检测技术
根据[官方描述](https://docs.microsoft.com/en-us/windows/win32/secauthz/access-control-lists)：
>
> [访问控制列表](https://docs.microsoft.com/windows/desktop/SecGloss/a-gly)（ACL）是包含[访问控制项](https://docs.microsoft.com/en-> us/windows/win32/secauthz/access-control-> entries)（ACE）的一个列表。ACL中的每个ACE都标识了一个[trustee](https://docs.microsoft.com/en-> us/windows/win32/secauthz/trustees)结构，指定与trustee对应的[访问权限](https://docs.microsoft.com/en-> us/windows/win32/secauthz/access-rights-and-access-> masks)（允许、拒绝或者审核）。[可保护对象](https://docs.microsoft.com/en-> us/windows/win32/secauthz/securable-> objects)的[安全描述符](https://docs.microsoft.com/en-> us/windows/win32/secauthz/security-descriptors)可以包含两种类型的ACL：DACL以及SACL。
我们的检测技术基于SACL（系统访问控制列表）构建。我们可以在进程对象上设置SACL，在Windows Security Log中记录成功/失败的访问操作。
我们可以使用[James
Forshaw](https://twitter.com/tiraniddo)开发的[NtObjectManager](https://www.powershellgallery.com/packages/NtObjectManager/1.1.22)来轻松完成这个任务。在下文中，我们大量借鉴了James
Forshaw的[研究成果](https://tyranidslair.blogspot.com/2017/10/bypassing-sacl-auditing-on-lsass.html)，文中提到了如何绕过对LSASS的SACL审计。在这篇文章的帮助下，我深入理解了SACL，也了解了如何使用`NtObjectManager`来控制SACL。
    auditpol /set /category:"Object Access" /success:enable /failure:enable
    $p = Get-NtProcess -name winlogon.exe -Access GenericAll,AccessSystemSecurity
    Set-NtSecurityDescriptor $p “S:(AU;SAFA;0x1400;;;WD)” Sacl
来逐行分析上述代码。第一行启用系统审核功能，记录成功以及失败的对象访问操作。第二行以`GenericAll`及`AccessSystemSecurity`访问权限获得`winlogon.exe`进程的句柄。我们需要`AccessSystemSecurity`权限才能访问SACL。
第三行应用`ACE`类型（`AU`）审核策略，为来自`Everyone`（`WD`）组的成功/失败（`SAFA`）访问生成安全事件。这里需要注意`0x1400`，这是对`0x400`（`PROCESS_QUERY_INFORMATION`）以及`0x1000`（`PROCESS_QUERY_LIMITED_INFORMATION`）进行按位取或（`OR`）后的结果。这些访问权限（以及`PROCESS_ALL_ACCESS`）可以用来从指定进程对象中获取访问令牌。
部署完SACL后，当使用特定访问权限访问`winlogon.exe`时我们应该能看到一些警告信息。
###  场景1：PROCESS_QUERY_INFORMATION
运行测试程序后，可以看到系统会生成EID（Event ID）4656，其中包括所请求的进程对象、发起访问请求的进程以及所请求的权限。“Access
Mask”之所以为`0x1400`，是因为具备`PROCESS_QUERY_INFORMATION`访问权限的句柄也会被自动授予`PROCESS_QUERY_LIMITED_INFORMATION`访问权限。
###  场景2：PROCESS_QUERY_LIMITED_INFORMATION
我重新编译了测试程序，只请求`PROCESS_QUERY_LIMITED_INFORMATION`权限，然后重新运行程序。这次我们可以看到EID
4656事件，其中访问权限为`0x1000`，代表`PROCESS_QUERY_LIMITED_INFORMATION`访问权限。
此外，我们还可以看到EID 4663，表示我们的测试程序在请求句柄后，会尝试访问进程对象。因此，我们能通过搜索EID 4656以及EID
4663，以较高的准确率检测利用访问令牌的操作。
###  场景3：PROCESS_ALL_ACCESS
重新编译测试程序，使用`PROCESS_ALL_ACCESS`访问权限后，我们能看到与场景2相同的EID，其中在EID
4656中，可以看到有程序在请求其他访问权限。
这里值得注意的是，EID 4663中的“Access
Mask”为`0x1000`，这代表`PROCESS_QUERY_LIMITED_INFORMATION`访问权限。此外，当我们使用`PROCESS_QUERY_INFORMATION`访问权限运行测试程序时，系统会生成EID
4656，但不会生成EID 4663.
## 0x04 寻找其他进程
除了`winlogon.exe`之外，我比较好奇是否有其他`SYSTEM`进程能够作为令牌窃取的目标。如果存在这种进程，那它们与无法被窃取令牌的其他`SYSTEM`进程相比有什么不同？
###  验证猜想
首先，我想看一下是否有其他进程可以用来窃取`SYSTEM`令牌。我以运行在高完整性上下文的本地管理员身份暴力枚举了所有`SYSTEM`进程（包括`svchost.exe`），找到了能够窃取`SYSTEM`令牌的其他一些进程。这些进程为`lsass.exe`、`OfficeClickToRun.exe`、`dllhost.exe`以及`unsecapp.exe`。我将这些进程标识为“友好型”进程。
图. 从`unsecapp.exe`中窃取`SYSTEM`令牌
在遍历`SYSTEM`进程的过程中，我注意到对有些进程执行`OpenProcess()`操作时会返回拒绝访问错误（“System Error – Code
5”），导致后续执行失败。
对于某些`SYSTEM`进程，`OpenProcess()`会执行成功，但执行`OpenProcessToken()`时会出现拒绝访问错误。后面我将研究一下为什么会出现这种问题。
###  澄清原因