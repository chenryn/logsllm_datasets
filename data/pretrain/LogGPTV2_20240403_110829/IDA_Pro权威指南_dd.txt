 。只有调试器激活时，才能访问这些寄存器变量。
但是，并没有可用于访问处理器标志位的变量。要访问 CPU 标志，你需要调用IDC 的GetRegValue
 函数，获得其相关标志位的值，如CF
 。如果你需要了解可用的寄存器和标志名称，请参考“通用寄存器”窗口左右边缘的标记。断点表达式的一些示例如下所示：
EAX == 100             // break if eax holds the value 100  
ESI > EDI              // break if esi is greater than edi  
Dword(EBP-20) == 10    // Read current stack frame (var_20) and compare to 10  
GetRegValue("ZF")      // break if zero flag is set  
EAX = 1                // Set EAX to 1, this also evaluates to true (non-zero)  
EIP = 0x0804186C       // Change EIP, perhaps to bypass code
关于断点表达式，有两个问题需要注意。第一，你可以调用 IDC 函数访问进程信息（只要该函数返回一个值）；第二，在进程执行过程中，你可以通过赋值的方式修改特定位置的寄存器值。在一个重写函数返回值的例子2
 中，Ilfak 亲自说明了这个技巧。
2. 参见 http://www.hexblog.com/2005/11/simple_trick_to_hide_ida_debug.html
 和http://www.hexblog.com/2005/11/stealth_plugin_1.html
 。
在“断点设置”对话框中，最后一个可以配置的断点选项是对话框右侧的 Action 框。Break复选框指定在到达断点时，是否应暂停执行程序（假设相关的条件均为真）。创建一个不会中断的断点，这种做法并不多见。但是，如果你希望在每次到达一条指令时修改某个内存或寄存器值，而又不希望在这时暂停程序，那么你就可以创建不会中断的断点。如果选择 Trace复选框，则每次触发断点时，都会记录一个跟踪事件。
24.3.2 跟踪
跟踪是一种记录方法，用于记录一个进程在执行过程中发生的特定事件。跟踪事件被记录到一个固定大小的跟踪缓冲区中，或记录到一个跟踪文件中。跟踪分为两类：指令跟踪和函数跟踪。如果启用指令跟踪
 （Debugger ▶Tracing▶Instruction Tracing ），IDA 将记录被指令更改的地址、指令和任何寄存器（EIP 除外）的值。指令跟踪将大大减慢被调试进程的执行速度，因为调试器必须单步执行这个进程，以监视和记录所有寄存器的值。函数跟踪
 （Debugger ▶Tracing▶Function Tracing）是指令跟踪的一个子集，它仅记录函数调用（并选择性地记录返回值），而不记录寄存器的值。
跟踪事件也分为 3 类：写入跟踪事件、读取/写入跟踪事件和执行跟踪事件。顾名思义，它们分别代表在某个指定的地址发生一项特定的操作时记录的一类跟踪事件。这些跟踪是在设置trace
 选项的前提下使用非中断断点实现的。写入跟踪和读取/写入跟踪使用硬件断点实现，因此它受到与前面提到的硬件断点相同的限制，更重要的是，任何时候都不能有4 个以上的硬件辅助的断点或跟踪处于活动状态。默认情况下，执行跟踪使用软件断点实现，因此一个程序可以设置的执行跟踪的数量并无限制。
用于配置调试器跟踪操作的“跟踪选项”（Tracing options）对话框（Debugger ▶Tracing▶Tracing options）如图24-10 所示。
图24-10 “跟踪选项”对话框
这里指定的选项仅适用于函数和指令跟踪。这些选项对于各个跟踪事件不会造成影响。Trace buffer size 选项指定在任何给定的时刻显示的跟踪事件的最大数量。对于给定的缓冲区大小 n
 ，则显示最近发生的 n
 个跟踪事件。命名一个日志文件，则所有跟踪事件将附加到这个文件后面。
在指定日志文件时，并没有文件对话框显示出来，因此，你必须自己指定该日志文件的完整路径。你可以输入一个 IDC 表达式作为“停止条件”。在跟踪每条指令之前，调试器会对这个表达式求值。如果表达式的值为真，执行会立即暂停。这个表达式充当一个与任何特定的位置无关的条件断点。
如果选中 Mark consecutive traced events with same IP（标明IP 相同的连续跟踪事件）选项，则使用一个等号标明源自同一条指令（这里的 IP 表示指令指针）的连续跟踪事件。源自同一个指令地址的连续事件大多与使用 x86 REP
3
 前缀的指令有关。为便于一个指令跟踪显示它在同一个指令地址处的每次重复，还必须选中 Log if same IP（如果IP 相同则记录）选项。如果不选择这个选项，则每次遇到以 REP
 为前缀的指令时，该指令仅列出一次。下面显示的是一个指令跟踪的部分结果，该跟踪使用的是默认跟踪设置：
3. REP 前缀是一个指令修饰符，它会根据ECX寄存器中的一个计数值重复某些x86 字符串指令，如movs
 和scas
 。
     Thread   Address             Instruction    Result  
     ------   -------             -----------    ------  
➊   00000150 .text:sub_401320+17 rep movsb      ECX =00000000 ESI=0022FE2C EDI=0022FCF4
     00000150 .text:sub_401320+19 pop esi        ESI=00000000 ESP=0022FCE4
请注意，movsb
 指令（➊）仅列出一次。
在下面的代码中，选择了 Log if same IP 选项，因此 rep 循环的每次重复都被记录下来：
Thread   Address             Instruction   Result  
------   -------             -----------   ------  
000012AC .text:sub_401320+17 rep movsb     ECX=0000000B ESI=0022FE21 EDI=0022FCE9 EFL=00010206 RF=1  
000012AC .text:sub_401320+17 rep movsb     ECX=0000000A ESI=0022FE22 EDI=0022FCEA  
000012AC .text:sub_401320+17 rep movsb     ECX=00000009 ESI=0022FE23 EDI=0022FCEB  
000012AC .text:sub_401320+17 rep movsb     ECX=00000008 ESI=0022FE24 EDI=0022FCEC  
000012AC .text:sub_401320+17 rep movsb     ECX=00000007 ESI=0022FE25 EDI=0022FCED  
000012AC .text:sub_401320+17 rep movsb     ECX=00000006 ESI=0022FE26 EDI=0022FCEE
000012AC .text:sub_401320+17 rep movsb     ECX=00000005 ESI=0022FE27 EDI=0022FCEF  
000012AC .text:sub_401320+17 rep movsb     ECX=00000004 ESI=0022FE28 EDI=0022FCF0  
000012AC .text:sub_401320+17 rep movsb     ECX=00000003 ESI=0022FE29 EDI=0022FCF1
000012AC .text:sub_401320+17 rep movsb     ECX=00000002 ESI=0022FE2A EDI=0022FCF2
000012AC .text:sub_401320+17 rep movsb     ECX=00000001 ESI=0022FE2B EDI=0022FCF3 
000012AC .text:sub_401320+17 rep movsb     ECX=00000000 ESI=0022FE2C EDI=0022FCF4 EFL=00000206 RF=0
000012AC .text:sub_401320+19 pop esi       ESI=00000000 ESP=0022FCE4
最后，在下面的代码中，选择了 Mark consecutive traced events with same IP选项，因此，其中的特殊标记体现了一个事实，即不同指令之间的指令指针并未发生变化。
Thread   Address             Instruction  Result  
------   -------             -----------  ------  
000017AC .text:sub_401320+17 rep movsb    ECX=0000000B ESI=0022FE21 EDI=0022FCE9 EFL=00010206 RF=1  
=        =                   =            ECX=0000000A ESI=0022FE22 EDI=0022FCEA  
=        =                   =            ECX=00000009 ESI=0022FE23 EDI=0022FCEB  
=        =                   =            ECX=00000008 ESI=0022FE24 EDI=0022FCEC  
=        =                   =            ECX=00000007 ESI=0022FE25 EDI=0022FCED  
=        =                   =            ECX=00000006 ESI=0022FE26 EDI=0022FCEE  
=        =                   =            ECX=00000005 ESI=0022FE27 EDI=0022FCEF  
=        =                   =            ECX=00000004 ESI=0022FE28 EDI=0022FCF0  
=        =                   =            ECX=00000003 ESI=0022FE29 EDI=0022FCF1  
=        =                   =            ECX=00000002 ESI=0022FE2A EDI=0022FCF2  
=        =                   =            ECX=00000001 ESI=0022FE2B EDI=0022FCF3  
=        =                   =            ECX=00000000 ESI=0022FE2C EDI=0022FCF4 EFL=00000206 RF=0  
000017AC .text:sub_401320+19 pop esi      ESI=00000000 ESP=0022FCE4
下面我们将讨论有关跟踪的最后两个选项：Trace over debugger segments （跟踪跨过调试器段）和Trace over library functions（跟踪跨过库函数）。选中前者时，只要跟踪遇到一个程序段，且该段在最初加载到 IDA 中的任何二进制文件段以外，则指令和函数调用跟踪将被临时禁用。在这方面，调用共享库函数是一个最典型的例子。选中后者时，任何时候如果执行进入一个IDA已经识别为库函数（可能通过 FLIRT 签名匹配识别）的函数，则函数和指令跟踪将被临时禁用。链接到一个二进制文件的库函数，不能与一个二进制文件通过 DLL 之类的共享库文件访问的库函数相混淆。默认情况下，这两个选项都处于选中状态，这明显改善了跟踪的性能（因为调试器不需要步入库代码），并大大减少了所生成的跟踪事件的数量，因为进入库代码的指令跟踪会迅速填满跟踪缓冲区。
24.3.3 栈跟踪
栈跟踪
 （stack trace ）显示的是当前调用栈或函数调用序列，这些调用是为了使执行到达二进制文件中的一个特定位置。使用 Debugger▶Stack Trace 命令生成的一个样本栈跟踪如图 24-11所示。
图24-11 栈跟踪样本
栈跟踪的最上面一行列出当前正在执行的函数名称。第二行指出调用当前函数的函数，以及做出该调用的地址。下面的行则指出调用每一个函数的地址。调试器可以通过遍历栈并解析它遇到的每一个栈帧，从而创建一个栈跟踪窗口。IDA 调试器依靠帧指针寄存器（x86 的EBP ）的内容来定位每个栈帧的基址。定位一个栈帧后，调试器可以提取出一个指向下一个栈帧的指针（保存的帧指针），以及保存的返回地址，并使用这个地址定位用于调用当前函数的调用指令。IDA调试器无法跟踪不使用 EBP 作为帧指针的栈帧。在函数（而非各指令）层次上，栈跟踪用于回答以下问题：“我如何到达这里？”或者更准确地说，“到达这个位置需要调用哪些函数？”
24.3.4 监视
调试进程时，你需要持续监视一个或几个变量中的值。你不需要在每次进程暂停时都导航到相关的内存位置，许多调试器都能让你指定内存位置列表，每次进程在调试器中暂停，这些内存位置的值都将显示出来。这样的列表叫做监视列表
 （watch list），因为它们可用于在程序执行过程中监视指定内存位置内容的变化情况。使用监视列表只是为了便于导航，它们不能像断点一样使执行暂停。
因为监视的对象主要为数据，所以监视点（指定要监视的地址）通常设置在二进制文件的栈、堆或数据区块。在 IDA 调试器中，你可以通过右击某个内存项，然后选择 Add Watch，从而设置监视点。确定要监视的地址可能需要费点功夫。相比于确定本地变量的地址，确定全局变量的地址要相对简单一些，因为全局变量在编译时分配有固定的地址。另一方面，在运行时之前，本地变量并不存在，即使它们存在，也只是在声明它们的函数被调用时存在。激活调试器后，只要你进入一个函数，IDA 就能够报告该函数中本地变量的地址。将鼠标放在一个名为 arg_0
 的本地变量（实际上为传递给该函数的一个参数）上的结果如图 24-12 所示。
图24-12 调试器解析本地变量地址
双击活动函数中的本地变量，IDA 将从主IDA 窗口跳转到该本地变量的地址。到达该变量的地址后，你就可以使用 Add Watch（添加监视）上下文菜单项对该地址添加监视，不过，你需要在Watch Address（监视地址）对话框中手动输入该地址。如果你命名了该内存位置，并且对其名称而不是地址应用上述菜单项，则 IDA 会自动添加监视。
所有监视点可以通过 Debugger ▶Watches▶Watch List访问。在监视列表中，选择你想要删除的监视点并按下 DELETE ，即可删除监视点。
24.4 调试器任务自动化
在第15 章～第 19 章中，我们讨论了 IDA 脚本和IDA SDK的基础知识，并说明了这些功能在静态分析二进制文件时的作用。当你启动一个进程，并且在调试器这样更加动态的环境中工作时，脚本和插件仍然能够发挥重要的作用。脚本和插件的自动化应用包括：在调试进程时分析运行时数据，执行复杂的断点条件，采取措施破坏反调试技巧。
24.4.1 为调试器操作编写脚本
在使用IDA 调试器时，我们在第 15 章讨论的 IDA 脚本功能仍然有效。脚本可以通过 File 菜单启动，与热键关联，由 IDA 的脚本命令行调用。此外，断点条件和跟踪终止表达式也可以引用用户创建的 IDA 函数。
基本的脚本函数可以设置、修改和枚举断点，读取和写入寄存器与内存值。内存访问功能由DbgByte
 、PatchDbgByte
 、DbgWord
 、PatchDbgWord
 、DbgDword
 和PatchDbgDword
 函数提供（类似于第15 章中描述的 Byte
 、Word
 、Dword
 和PatchXXX
 函数）。寄存器和断点操作由以下函数（请参阅IDA 帮助文件了解全部函数）实现。
long GetRegValue``(string reg)
 。如前所述，返回已命名寄存器的值，如EAX。只有在 IDC中，寄存器的值还可以通过在 IDC 表达式中使用该寄存器的名称来访问。
bool SetRegValue``(number val, string name)
 。返回已命名寄存器的值，如 EAX。如果正在使用IDC ，通过使用赋值语句左侧的相关寄存器名称，你还可以修改寄存器值。
bool AddBpt``(long addr)
 。在指定的地址添加一个软件断点。
bool AddBptEx``(long addr, long size, long type)
 。在指定的地址添加一个指定大小和类型的断点。断点类型应为 idc.idc 或IDA 帮助文件中描述的一个 BPT_XXX 常量。
bool DelBpt``(long addr)
 。删除指定地址处的一个断点。
long GetBptQty``()
 。返回在程序中设置的断点的总数。
long GetBptEA``(long bpt_num)
 。返回指定断点所在的地址。
long/string
GetBptAttr``(long addr, number attr)
 。返回与指定地址处的断点有关的一个断点属性。根据你请求的属性值，返回值可能为一个数字或字符串。使用 idc.idc 文件或者IDA 帮助文件描述的一个 BPTATTR_XXX 值可指定属性。
bool SetBptAttr``(long addr, number attr, long value)
 。将指定断点的指定属性设置为指定值。不要使用这个函数设置断点条件表达式（而应使用 SetBptCnd 设置）。
bool SetBptCnd``(long addr, string cond)
 。将断点条件设置为所提供的条件表达式，这个表达式必须为一个有效的 IDC 表达式。
long CheckBpt``(long addr)
 获取指定位置的断点状态。返回值指示是否没有断点，是否已禁用断点，是否已启用断点或断点是否处于活动状态。活动断点指在调试器也处于活动状态时启用的断点。
下面的脚本说明如何在当前光标位置安装一个自定义的 IDC 断点处理函数：
#include   
/*  
 * The following should return 1 to break, and 0 to continue execution.  
 */  
static my_breakpoint_condition() {  
   return AskYN(1, "my_breakpoint_condition activated, break now?") == 1;  
}  
/*  
 * This function is required to register my_breakpoint_condition  
 * as a breakpoint conditional expression  
 */  
static main() {  
   auto addr;  