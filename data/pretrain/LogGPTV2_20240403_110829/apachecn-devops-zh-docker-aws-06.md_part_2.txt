        "ECSAgentVersion": "1.17.0-2"
      }
    }
  ],
  "provisioners": [
 {
 "type": "shell",
 "inline": [
 "sudo yum -y -x docker\\* -x ecs\\* update"
 ] 
 }
 ],
  "post-processors": []
}
```
Defining an inline shell provisioner
前面示例中定义的置备程序使用`inline`参数来定义将在置备阶段执行的命令列表。在这种情况下，您正在运行`yum update`命令，这是亚马逊 Linux 系统上的默认包管理器，并更新所有安装的操作系统包。为确保您使用基本 ECS 优化 AMI 中包含的 Docker 和 ECS 代理包的推荐和测试版本，您可以使用`-x`标志排除以`docker`和`ecs`开头的包。
In the preceding example, the yum command will be executed as `sudo yum -y -x docker\* -x ecs\* update`. Because the back slash character (`\`) is used to as an escape character in JSON, in the preceding example, a double backslash (for example, `\\*`) is used to generate a literal back slash.
最后，请注意，您必须使用`sudo`命令运行所有 shell 配置命令，因为 Packer 正在以`ec2_user`用户的身份配置 EC2 实例，如构建器一节中所定义的。
# 配置后处理器
我们将介绍的 Packer 模板的最后一个结构组件是[后处理器](https://www.packer.io/docs/post-processors/index.html)，一旦您的机器映像被提供和构建，它就允许您执行操作。
后处理器可以用于本书范围之外的各种不同的用例，然而我喜欢使用的后处理器的一个简单例子是 [Manifest 后处理器](https://www.packer.io/docs/post-processors/manifest.html)，它输出一个 JSON 文件，列出 Packer 产生的所有工件。当您创建连续的交付管道，首先构建您的 Packer 映像，然后需要测试和部署您的映像时，这个输出会非常有用。
在这个场景中，清单文件可以用作 Packer 构建的输出工件，描述与您的新机器映像相关联的区域和 AMI 标识符，并作为一个示例用作 CloudFormation 模板的输入，该模板将新机器映像部署到测试环境中。
以下示例演示了如何将清单后处理器添加到您的 Packer 模板中:
```
{
  "variables": {
    "aws_access_key_id": "{{env `AWS_ACCESS_KEY_ID`}}",
    "aws_secret_access_key": "{{env `AWS_SECRET_ACCESS_KEY`}}",
    "aws_session_token": "{{env `AWS_SESSION_TOKEN`}}",
    "timezone": "US/Eastern"
  },
  "builders": [
    {
      "type": "amazon-ebs",
      "access_key": "{{user `aws_access_key_id`}}",
      "secret_key": "{{user `aws_secret_access_key`}}",
      "token": "{{user `aws_session_token`}}",
      "region": "us-east-1",
      "source_ami": "ami-5e414e24",
      "instance_type": "t2.micro",
      "ssh_username": "ec2-user",
      "associate_public_ip_address": "true",
      "ami_name": "docker-in-aws-ecs {{timestamp}}",
      "tags": {
        "Name": "Docker in AWS ECS Base Image 2017.09.h",
        "SourceAMI": "ami-5e414e24",
        "DockerVersion": "17.09.1-ce",
        "ECSAgentVersion": "1.17.0-2"
      }
    }
  ],
  "provisioners": [
    {
      "type": "shell",
      "inline": [
        "sudo yum -y -x docker\\* -x ecs\\* update"
      ] 
    }
  ],
  "post-processors": [
 {
 "type": "manifest",
 "output": "manifest.json",
 "strip_path": true
 }
 ]
}
```
Defining a manifest post-processor
如您在前面的示例中所见，清单后处理器非常简单-`output`参数指定清单将被本地写入的文件的名称，而`strip_path`参数为任何构建的工件剥离任何本地文件系统路径信息。
# 构建机器映像
在这一点上，您已经创建了一个简单的 Packer 映像，它在定制方面表现不太好，但是仍然是一个可以构建的完整模板。
在实际运行构建之前，您需要确保您的本地环境配置正确，以便构建成功完成。回想一下在前面的示例中，您为模板定义了引用环境变量的变量，这些变量配置了您的 AWS 凭据，这里的一种常见方法是将您的本地 AWS 访问密钥 ID 和机密访问密钥设置为环境变量。
然而，在我们的用例中，我假设您使用的是前面章节中介绍的多因素认证的最佳实践方法，因此您的模板被配置为使用临时会话凭据，如`aws_session_token`输入变量所示，该变量需要在运行您的 Packer 构建之前动态生成并注入到您的本地环境中。
# 正在生成动态会话凭据
要生成临时会话凭据，假设您已经使用`AWS_PROFILE`环境变量配置了适当的配置文件，您可以运行`aws sts assume-role`命令来生成凭据:
```
> export AWS_PROFILE=docker-in-aws
> aws sts assume-role --role-arn=$(aws configure get role_arn) --role-session-name=$(aws configure get role_session_name)
Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga: ******
{
    "Credentials": {
        "AccessKeyId": "ASIAIIEUKCAR3NMIYM5Q",
        "SecretAccessKey": "JY7HmPMf/tPDXsgQXHt5zFZObgrQJRvNz7kb4KDM",
        "SessionToken": "FQoDYXdzEM7//////////wEaDP0PBiSeZvJ9GjTP5yLwAVjkJ9ZCMbSY5w1EClNDK2lS3nkhRg34/9xVgf9RmKiZnYVywrI9/tpMP8LaU/xH6nQvCsZaVTxGXNFyPz1BcsEGM6Z2ebIFX5rArT9FWu3v7WVs3QQvXeDTasgdvq71eFs2+qX7zbjK0YHXaWuu7GA/LGtNj4i+yi6EZ3OIq3hnz3+QY2dXL7O1pieMLjfZRf98KHucUhiokaq61cXSo+RJa3yuixaJMSxJVD1myx/XNritkawUfI8Xwp6g6KWYQAzDYz3MIWbA5LyX9Q0jk3yXTRAQOjLwvL8ZK/InJCDoPBFWFJwrz+Wxgep+I8iYoijOhqTUBQ==",
        "Expiration": "2018-02-18T05:38:38Z"
    },
    "AssumedRoleUser": {
        "AssumedRoleId": "AROAJASB32NFHLLQHZ54S:justin.menga",
        "Arn": "arn:aws:sts::385605022855:assumed-role/admin/justin.menga"
    }
}
> export AWS_ACCESS_KEY_ID="ASIAIIEUKCAR3NMIYM5Q"
> export AWS_SECRET_ACCESS_KEY="JY7HmPMf/tPDXsgQXHt5zFZObgrQJRvNz7kb4KDM"
> export AWS_SESSION_TOKEN="FQoDYXdzEM7//////////wEaDP0PBiSeZvJ9GjTP5yLwAVjkJ9ZCMbSY5w1EClNDK2lS3nkhRg34/9xVgf9RmKiZnYVywrI9/tpMP8LaU/xH6nQvCsZaVTxGXNFyPz1BcsEGM6Z2ebIFX5rArT9FWu3v7WVs3QQvXeDTasgdvq71eFs2+qX7zbjK0YHXaWuu7GA/LGtNj4i+yi6EZ3OIq3hnz3+QY2dXL7O1pieMLjfZRf98KHucUhiokaq61cXSo+RJa3yuixaJMSxJVD1myx/XNritkawUfI8Xwp6g6KWYQAzDYz3MIWbA5LyX9Q0jk3yXTRAQOjLwvL8ZK/InJCDoPBFWFJwrz+Wxgep+I8iYoijOhqTUBQ=="
```
Generating temporary session credentials
在前面的示例中，请注意，您可以使用 bash 替换来使用`aws configure get `命令从您的 AWS CLI 配置文件中动态获取`role_arn`和`role_session_name`参数，这些参数是生成临时会话凭据时必需的输入。
前面示例的输出包括一个凭据对象，该对象包含映射到 Packer 模板中引用的环境变量的以下值:
*   **访问键标识**:该值作为`AWS_ACCESS_KEY_ID`环境变量导出
*   **SecretAccessKey** :该值作为`AWS_SECRET_ACCESS_KEY`环境变量导出
*   **会话设置**:该值作为`AWS_SESSION_TOKEN`环境变量导出
# 自动生成动态会话凭据
尽管您可以使用前面示例中演示的方法根据需要生成临时会话凭据，但这种方法很快就会变得令人厌烦。有许多方法可以将生成的临时会话凭据自动注入到您的环境中，但是鉴于本书使用 Make 作为自动化工具，下面的示例演示了如何使用相当简单的 Makefile 来实现这一点:
```
.PHONY: build
.ONESHELL:
build:
  @ $(if $(AWS_PROFILE),$(call assume_role))
  packer build packer.json
# Dynamically assumes role and injects credentials into environment
define assume_role
  export AWS_DEFAULT_REGION=$$(aws configure get region)
  eval $$(aws sts assume-role --role-arn=$$(aws configure get role_arn) \
    --role-session-name=$$(aws configure get role_session_name) \
    --query "Credentials.[ \
        [join('=',['export AWS_ACCESS_KEY_ID',AccessKeyId])], \
        [join('=',['export AWS_SECRET_ACCESS_KEY',SecretAccessKey])], \
        [join('=',['export AWS_SESSION_TOKEN',SessionToken])] \
      ]" \
    --output text)
endef
```
Generating temporary session credentials automatically using Make Ensure all indentation in your Makefile is performed using tabs rather than spaces.
在前面的例子中，请注意引入了一个名为`.ONESHELL`的指令。该指令将 Make 配置为为给定 Make 配方中定义的所有命令生成一个外壳，这意味着 bash 变量分配和环境设置可以跨多行重用。
如果当前环境配置了`AWS_PROFILE`，则`build`任务有条件地调用名为`assume_role`的函数，这种方法非常有用，因为这意味着如果您在一个构建代理上运行这个 Makefile，该代理被配置为以不同的方式获取 AWS 凭据，则不会动态生成临时会话凭据。
When a command is prefixed with the `@` symbol in a Makefile, the executed command will not output to stdout, and instead only the output of the command will be displayed.
`assume_role`函数使用高级 JMESPath 查询表达式(由`--query`标志指定)来生成一组`export`语句，这些语句引用您在前面示例中运行的命令的**凭证**字典输出上的各种属性，并使用 JMESPath 连接函数([http://JMESPath . read docs . io/en/latest/specification . html # join](http://jmespath.readthedocs.io/en/latest/specification.html#join))将这些值分配给相关的环境变量。这包含在命令替换中，使用`eval`命令执行每个输出`export`语句。如果您不理解这个查询，请不要太担心，但是要认识到 AWS 命令行界面确实包含强大的查询语法，可以创建一些非常复杂的命令行。
Note in the preceding example that you can use back ticks (```) as an alternative syntax for bash command substitutions. In other words, `$(command)` and ``command`` both represent command substitutions that will execute the command and return the output.
# 塑造形象
现在我们有了一个自动生成临时会话凭证的机制，假设您的`packer.json`文件和 Makefile 位于您的 packer-ecs 存储库的根目录下，让我们通过运行`make build`来测试构建您的 packer 映像:
```
> export AWS_PROFILE=docker-in-aws
> make build
Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga: ******
packer build packer.json
amazon-ebs output will be in this color.
==> amazon-ebs: Prevalidating AMI Name: docker-in-aws-ecs 1518934269
    amazon-ebs: Found Image ID: ami-5e414e24
==> amazon-ebs: Creating temporary keypair: packer_5a8918fd-018d-964f-4ab3-58bff320ead5
==> amazon-ebs: Creating temporary security group for this instance: packer_5a891904-2c84-aca1-d368-8309f215597d
==> amazon-ebs: Authorizing access to port 22 from 0.0.0.0/0 in the temporary security group...
==> amazon-ebs: Launching a source AWS instance...
==> amazon-ebs: Adding tags to source instance
    amazon-ebs: Adding tag: "Name": "Packer Builder"
    amazon-ebs: Instance ID: i-04c150456ac0748aa
==> amazon-ebs: Waiting for instance (i-04c150456ac0748aa) to become ready...
==> amazon-ebs: Waiting for SSH to become available...
==> amazon-ebs: Connected to SSH!
==> amazon-ebs: Provisioning with shell script: /var/folders/s4/1mblw7cd29s8xc74vr3jdmfr0000gn/T/packer-shell190211980
    amazon-ebs: Loaded plugins: priorities, update-motd, upgrade-helper
    amazon-ebs: Resolving Dependencies
    amazon-ebs: --> Running transaction check
    amazon-ebs: ---> Package elfutils-libelf.x86_64 0:0.163-3.18.amzn1 will be updated
    amazon-ebs: ---> Package elfutils-libelf.x86_64 0:0.168-8.19.amzn1 will be an update
    amazon-ebs: ---> Package python27.x86_64 0:2.7.12-2.121.amzn1 will be updated
    amazon-ebs: ---> Package python27.x86_64 0:2.7.13-2.122.amzn1 will be an update
    amazon-ebs: ---> Package python27-libs.x86_64 0:2.7.12-2.121.amzn1 will be updated
    amazon-ebs: ---> Package python27-libs.x86_64 0:2.7.13-2.122.amzn1 will be an update
    amazon-ebs: --> Finished Dependency Resolution
    amazon-ebs:
    amazon-ebs: Dependencies Resolved
    amazon-ebs:
    amazon-ebs: ================================================================================
    amazon-ebs: Package Arch Version Repository Size
    amazon-ebs: ================================================================================
    amazon-ebs: Updating:
    amazon-ebs: elfutils-libelf x86_64 0.168-8.19.amzn1 amzn-updates 313 k
    amazon-ebs: python27 x86_64 2.7.13-2.122.amzn1 amzn-updates 103 k
    amazon-ebs: python27-libs x86_64 2.7.13-2.122.amzn1 amzn-updates 6.8 M
    amazon-ebs:
    amazon-ebs: Transaction Summary
    amazon-ebs: ================================================================================
    amazon-ebs: Upgrade 3 Packages
    amazon-ebs:
    amazon-ebs: Total download size: 7.2 M
    amazon-ebs: Downloading packages:
    amazon-ebs: --------------------------------------------------------------------------------
    amazon-ebs: Total 5.3 MB/s | 7.2 MB 00:01
    amazon-ebs: Running transaction check
    amazon-ebs: Running transaction test
    amazon-ebs: Transaction test succeeded
    amazon-ebs: Running transaction
    amazon-ebs: Updating : python27-2.7.13-2.122.amzn1.x86_64 1/6
    amazon-ebs: Updating : python27-libs-2.7.13-2.122.amzn1.x86_64 2/6
    amazon-ebs: Updating : elfutils-libelf-0.168-8.19.amzn1.x86_64 3/6