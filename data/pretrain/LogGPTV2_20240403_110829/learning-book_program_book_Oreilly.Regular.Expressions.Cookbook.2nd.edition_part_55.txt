replacement.
Discussion
Introduction
Adding thousand separators to numbers in your documents, data, and program output
is a simple but effective way to improve their readability and appearance.
Some of the programming languages covered by this book provide built-in methods to
add locale-aware thousand separators to numbers. For instance, in Python you can use
locale.format(’%d′, 1oooo00, True) to convert the number 10ooo00o to the string
‘1,00o,ooo’', assuming you’ve previously set your program to use a locale that uses
commas as the thousand separator. For other locales, the number might be separated
using dots, underscores, apostrophes, or spaces.
However, locale-aware processing is not always available, reliable, or appropriate In
the finance world, for example, using commas as thousand separators is the nom,
regardless of location. Intermationalization might not be a relevant issue to begin with
when working in a text editor rather than programming. For these reasons, and for
simplicity, in this recipe we’ve assumed you always want to use commas as the thousand
402 | Chapter 6: Numbers
---
## Page 419
separator. In the upcoming *Variations? section, we’ve also assumed you want to use
dots as decimal points. If you need to use other characters, feel free to swap them in.
Although adding thousand separatoes to all numbers in a file or string
can improve the presentation of your data, it's important to understand
what kind of content you're dealing with before doing so. For instance,
you probably don't want to add commas to IDs, four-digit years, and
ZIP codes. Documents and data that include these kinds of numbers
might not be good candidates for automated comma insertion.
Basic solution
This regular expression matches any single digit that has digits on the right in exact
sets of three. It therefore matches rwice in the string 12345678, finding the digits 2 and
5. All the other digits are not followed by an exact multiple of three digits.
The accompanying replacement text puts back the matched digit using backreference
zero (the entire match), and follows it with a comma. That leaves us with 12,345, 678.
Voila!
To explain how the regex determines which digits to match, well split it into two parts.
The first part is the leading character class [o-9] that matches any single digit. The
second part is the positive lookahead  that causes the
match attempt to fail unless it's at a position followed by digits in exact sets of three.
In other words, the lookahead ensures that the regex matches only the digits that should
be followed by a comma. Recipe 2.16 explains how lookahead works.
The (?: [0-9]{3))+) within the lookahead matches digits in sets of three. The negative
lookahead (?! [o-9]) > that follows is there to ensure that no digits come immediately
after the digits we matched in sets of three. Otherwise, the outer positive lookahead
would be satisfied by any number of following digits, so long as there were at least three.
Match separator positions only, using lookbehind
This adaptation of the previous regex doesn’t match any digits at all. Instead, it matches
only the positions where we want to insert commas within numbers. These positions
are wherever there are digits on the right in exact sets of three, and at least one digit on
the left.
The lookahead used to search for sets of exactly three digits on the right is the same as
in the last regex. The difference here is that, instead of starting the regex with [o-9]
to match a digit, we instead assert that there is at least one digit to the left by using the
positive lookbehind (? quan-
tifier if you want to support even longer numbers to the right of a decimal separator.
With both regexes, we've put the new lookbehind at the end of the patem. The regexes
could be restructured to add the lookbehind at the front, as you might intuitively expect,
but we've done it this way to optimize efficiency. Since the lookbehind is the slowest
part of the regex, puting it at the end ets the regex fail more quickly at positions within
the subject string where the lookbehind doesn’t need to be evaluated in order to rule
out a match.
Search-and-replace within matched numbers. 1f you're not working with .NET or Java and
therefore can't look as far back into the subject string as you want, you can still use
fixed-length lookbehind to help match entire numbers that aren’t preceded by a dot.
That lets you identify the numbers that qualify for having commas added (and correctly
exclude any digits that come after a decimal point), but because it matches entire num
bers, you can’t simply include a comma in the replacement string and be done with it.
404 | Chapter 6: Numbers
---
## Page 421
Completing the solution requires using rwo regexes. An outer regex to match the num-
bers that should have commas added to them, and an inner regex that searches within
the qualifying numbers as part of a search-and-replace that inserts the commas.
Outer regex:
b(? and the units with I[xv] Iv?I{0,3}>. These
use the same syntax, but with different letters.
All four parts of the regex allow everything to be optional, because each of the digits
could be zero. The Romans did not have a symbol, or even a word, to represent zero.
Thus, zero is unwritten in Roman numerals. While each part of the regex should indeed
be optional, they're not all optional at the same time. We have to make sure our
regex does not allow zero-length matches. To do this, we put the lookahead
(?=[MDCLxvI ])> at the start of the regex. This lookahead, as Recipe 2. 16 explains, makes
sure that there’s at least one letter in the regex match. The lookahead does not consume
the letter that it matches, so that letter can be matched again by the remainder of the
regex.
The third regex is a bit more flexible. It also accepts numerals such as IlI, while still
accepting IV.
The fourth regex only allows numerals written without using subtraction and therefore
all the letters must be in descending order. 4 must be written as IlI rather than IV. The
Romans themselves usually wrote numbers this way.
All regular expresions are wrapped berween anchors Recipe 2.5) to
make sure we check whether the whole input is a Roman numeral, as
replace (*> and 
1,
40,
'x'
=>
10,
'L'
=>50,*XC′=>90,
6
'C'
100,
‘CD′=> 400,'D’ => 500,*
‘006 end|in(?:1ine|herited) ？|1tem|object) \b
Regex options: Case insensitive
Regexflavers: NET, Java, PCRE, Perl, Python, Ruby
Discussion
Matching a word from a list of words is very easy with a regular expression. We simply
use alternation to match any one of the keywords. The word boundaries at the start
and the end of the regex make sure we only match entire words. The regex should
match inline rather than in when the file contains inline, and it should fail to match
when the file contains interesting. Because altermation has the lowest precedence of