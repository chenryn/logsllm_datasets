this attack step. A list of visible state variable objects (objects
that are connected to the step by an incoming arc) is provided
as a convenience to the user; the user can double-click on a
list item to insert its code name into the text box.
proﬁle editor. While the multi-page editor breaks the UI into
those two facets, the editor works on a single ADVISE model.
1) Attack Execution Graph Editor Page: The attack exe-
cution graph editor (Fig. 1) consists of a graphical canvas
on which AEG elements can be positioned and connected by
directed arcs. The various kinds of AEG elements have differ-
ent colors and also different shapes, to allow for gray-scale
presentation. Access elements are red squares, knowledge
elements are green circles, skill elements are blue triangles,
attack steps are yellow rectangles with their names displayed
inside the object, and attack goals are orange ovals. To the left
of the canvas is a palette containing new objects that can be
dropped onto the canvas. A connection tool is also available in
the palette, and arcs are automatically laid out by the canvas
to provide the clearest presentation.
Finally, the outcomes section provides a set of controls
that can be used to change the quantity of outcomes and
edit the details for each outcome. Each outcome has a name
ﬁeld, an outcome probability, a detection probability, and an
effects code expression. The name is a simple human-readable
label. The outcome and detection probabilities are both code
expressions that must return a real number between 0 and
1 inclusive. The effects code expression allows the user to
express how the state of the model will be affected should the
outcome be selected when the attack step is attempted. A list of
visible state variable objects (objects that are connected to the
step by an arc in either direction) is provided as a convenience
to the user. Again, one can double-click on a list item to insert
the code name of that object into the text box.
Since almost all ﬁelds of an attack step’s details are code
expressions of some form, the modeler is provided with great
ﬂexibility. Also, the values of code expression ﬁelds can call
upon state information using variable names deﬁned by the rest
of the attack execution graph. For example, an execution time
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:50:07 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1. An example of the ADVISE attack execution graph editor page.
mean can be one value if an adversary has a speciﬁc access,
but otherwise be a function of the adversary’s proﬁciency in
a certain skill.
2) Adversary Proﬁle Editor Page: The adversary proﬁle
editor page (Fig. 2) consists of name and code name ﬁelds and
several collapsible sections: decision parameters, skills, initial
access, initial knowledge, and goals. The decision parame-
ters section contains the planning horizon, attack preference
weights, and future discount factors. The planning horizon
ﬁeld deﬁnes the depth to which the decision algorithm will
build the SLAT. Attack preference weight ﬁelds for cost,
detection, and payoff each take a real number between 0 and
1 inclusive. The future discount factor ﬁelds allow a linear
discounting factor to be applied to the values of the future
attack step cost, detection, and payoff.
The skills section provides a table containing the set of
skills the adversary possesses and a proﬁciency rating for each
skill. Skills can be added and removed with a simple wizard
that offers the set of skills deﬁned in the AEG. The initial
access and initial knowledge sections provide a similar table
containing the set of access and knowledge objects that the
adversary possesses at the beginning of the model execution.
Finally, the goals section provides a table similar to the skills
table, but with a column for payoff values, which can be any
integer, instead of proﬁciency values. Goals and skills that are
not added to the adversary proﬁle are considered to have a
payoff value or skill proﬁciency of 0.
B. M¨obius AFI Overview
The M¨obius AFI deﬁnes a set of classes from which all for-
malisms must inherit. Given the principles of object-oriented
programming and its implementation in C++, subclasses are
required to implement certain virtual member functions that
the M¨obius framework uses to interact with the formalism
implementation in a well-deﬁned manner [2].
Every atomic model formalism in M¨obius must translate
its formalism to a common language that
the AFI works
with [2]. The language consists of state variables and ac-
tions. A state variable is an object that stores a value of a
deﬁned type. State variables must inherit from and implement
all virtual functions of the BaseStateVariableClass
class (a base class in the M¨obius AFI). All ADVISE state
variables inherit from the SharableSV class, which is a
child class of BaseStateVariableClass. By inheriting
from SharableSV, ADVISE models may share state vari-
ables with other atomic models via M¨obius’s composition
formalisms [15].
An action is a model element that changes the value of state
variables and thereby transitions the model from state to state.
An action contains details on timing, an enabling predicate
function, an input function, an output function, a grouping
ability to enable stochastic choice of an action from a group of
4
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:50:07 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 2. An example of the ADVISE adversary proﬁle editor page.
actions to ﬁre when the group completes, and much more. The
base class for all M¨obius actions is the BaseGroupClass.
C. ADVISE AFI Implementation
The ADVISEModel is the top-level object
that stores
pointers to the model’s state variables and actions, which
will be accessed and evaluated by other components in the
M¨obius framework, such as reward variable models and the
discrete-event simulator. The ADVISEModel also hosts func-
tions that implement algorithms unique and necessary to the
ADVISE formalism. For example, a member function called
recalculateAdversaryDecisionWeights() builds
the SLAT and calculates the attractiveness of every available
attack path.
ADVISE models have six state variable classes, all with
type: Access, Skill, Knowledge, Goal,
an integer
BeginAdversaryDecision, and StepChosen. The ﬁrst
four classes directly correspond to the ADVISE state vari-
ables discussed in Section II-A1. The last two will be dis-
cussed shortly. ADVISE models have two action classes:
AdversaryDecision and Step. A step action is ac-
tually the implementation of an attack step/outcome pair.
The AdversaryDecision action group will be discussed
shortly.
Fig. 3 shows an action-state variable diagram representing
a translated ADVISE atomic model. Large white circles are
state variables, and dark vertical oblongs are action groups;
Fig. 3. The action-state variable translation of an ADVISE atomic model.
(A) ADVISE model state variables (access, knowledge, skill, goals). (B)
BeginAdversaryDecision state variable. (C) AdversaryDecision action group.
(D) StepChosen state variables. (E) Attack step/outcome action groups.
has
just
Every
model
ADVISE
individual actions are indicated by small dark circles to the
right of the groups. The arcs in the diagram express the ﬂow
of tokens through the model. Part A of Fig. 3 shows the set
of all ADVISE state variables deﬁned in the model (access,
knowledge, skills, and goals). These state variables are not
connected by arcs, but are globally accessible by all actions.
one
BeginAdversaryDecision (B in the ﬁgure) instance,
and when that contains a token, it signiﬁes that the adversary
decision algorithm should be executed next. At the beginning
of
the model’s execution, a single token exists in the
BeginAdversaryDecision instance. When a token
exists in the BeginAdversaryDecision instance,
the
AdversaryDecision action group (C in the ﬁgure)
becomes enabled. For every attack step in a given ADVISE
model, an AdversaryDecision action exists in the
translation. When the group is enabled, the adversary decision
algorithm in the ADVISEModel object is executed, which
returns the most attractive next step, and the token is placed
into one of the StepChosen instances (D in the ﬁgure).
Each StepChosen instance corresponds to an ADVISE
attack step. When the StepChosen instance contains a
token, it indicates that the adversary has decided to attempt
the corresponding attack step. At
the beginning of model
execution, all StepChosen instances have zero tokens.
Finally,
the action groups in part E of Fig. 3 represent
attack steps in the ADVISE model. Each action in the group
corresponds to an outcome in the attack step. Thus, the Step
instances are actually ADVISE step-outcome pairs.
When an attack step is chosen, the group becomes enabled
5
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:50:07 UTC from IEEE Xplore.  Restrictions apply. 
and begins ﬁring according to the details speciﬁed in the AD-
VISE model. Once the step has completed ﬁring, an outcome
is chosen according to the outcome probabilities described in
the model. The outcome’s effects code expression is executed,
which updates the state of the ADVISE model (section A in
Fig. 3), and the token moves from one of the StepChosen
instances back to the BeginAdversaryDecision in-
stance. Parts B and C of the ﬁgure show the adversary decision
phase, and parts D and E show the adversary action phase, as
described in Section II-C.
for those global variables in order to investigate different
model parameters. It is important to remember that all state
variables in an ADVISE model are integer types, and that the
global variables that would initialize the state variables should
be typed as integers.
Studies have been used to compare the relative security
of different system conﬁgurations as well as the impact of
different adversaries; for example, studies have examined the
effects of including or not including a DMZ network in a
networked system [6].
D. Composing ADVISE Models
G. M¨obius Solution Techniques
ADVISE models are designed to be composable with other
M¨obius models. A model can share any of the six types of
state variables described in Section III-C.
four
using
types
the
variables
names.
of ADVISE state
user-supplied
code
are
The
named
The
BeginAdversaryDecision instance is always named
MakeDecision, and the StepChosen instances are named
using the format Chosen.
The action-synchronization composition formalism will
also synchronize any of
the action groups deﬁned ear-
lier with action groups from other atomic models. The
AdversaryDecision action group is always named
AdversaryDecisionGroup, and the Step action groups
are always named using the format Group.
The adversary attack decision algorithm only considers the
information contained in the attack execution graph and the
adversary proﬁle;
the algorithm is blind to the effects of
attack decisions on other M¨obius models. The SLAT does
not incorporate any information contained in other M¨obius
models, and therefore the decision algorithm does not consider,
in any way,
the state transitions that may occur in other
M¨obius models as a result of attack actions. For example, if an
ADVISE model and a stochastic activity network (SAN) [16]
model are composed together, the behavior of the SAN model
and any effect it has on the value of shared state variables will
not be considered in the adversary decision algorithm.
E. Specifying Metrics
Metrics for an ADVISE model can be deﬁned using the
standard performance variable model available in M¨obius. Re-
ward code expressions can leverage any of the state variables
described above, and impulse rewards can accumulate upon
the ﬁring of any of the actions described earlier.
Metrics can assess the attack goals an adversary can achieve.
Metrics can provide insight on common or likely targets, the
preferred attack path of an adversary, or the criticality of cer-
tain components. Also, metrics can aid in impact assessment.
Security analysts are able to capture a wide range of security-
relevant measurements from ADVISE models.
F. Using Studies with ADVISE
Global variables may be used throughout
the ADVISE
model speciﬁcation. Studies can be deﬁned, providing values
6
M¨obius comes with a discrete event simulation solver and
a nice array of specialized analytical solvers. The M¨obius tool
links together the previously built atomic model libraries, com-
posed model libraries, reward model libraries, study libraries,
and the simulation solver libraries to create a binary executable
application that performs the complete model simulation.
Observed values for each of the reward variables are gathered
across many simulation iterations, and statistics are calculated,
e.g., mean and variance.
In order to use the analytical solution techniques offered
by M¨obius, it is necessary to generate a state space, which is
really a compact representation of a Markov chain which the
analytical solver will execute. Not all models in M¨obius can
be transformed into Markov chains, so various restrictions are
detailed in the M¨obius manual [17], deﬁning which classes of
models are candidates for analytical solution. At this time, only
ADVISE models which place restrictions on the Adversary
utility functions are candidates for analytical solution, as
outlined in [10]. This is because, in general, the adversary’s
decision is not solely dependent on the current state and, there-
fore, the Markov chain representations of ADVISE models
cannot be generated.
More details on model composition, metric speciﬁcation,
experimental study deﬁnition, and solution methods in M¨obius
can be found in [17].
IV. PERFORMANCE ANALYSIS AND OPTIMIZATIONS
In this section, we will explore the performance of the tool
in the simulation phase. We identify key differences between
simulation for ADVISE and typical simulation. By optimizing
ADVISE’s unique characteristics, we signiﬁcantly improve
performance.
A. Adversary Decision Computation
A typical simulation loop consists of identifying enabled
transitions, selecting one probabilistically, and changing model
state. By including the adversary decision in the simulation