a
starts
conversation with
user
2) Honest
corrupt
user. When Sim receives
(ApproveNewConvoCorrupt, Ps, Pr, cid)
ideal
Πssenc.SSKeyGen(1λ).
information for user Pr, i.e. pkPr . Add the entry
an
the message
the
(pks,cid, sks,cid) ←
longterm
samples
Sim retrieves
functionality,
from
the
(cid, Ps, pks,cid, sks,cid, Pr, pkPr ,·)
to T and then does the following:
a) Encrypt
c ← Πssenc.SSEnc(‘‘init’’(cid:107)pks,cid,
skPs , pkPr )
b) Send c to Pservice
If Sim gets an acknowledgment from Pservice for Ps, Sim
sends (Approve) to ideal functionality. Otherwise, Sim
sends (Disapprove) to the ideal functionality.
3) Corrupt user starts a conversation with an honest
user. When Sim receives a message c(cid:107)pke from Pservice
for an honest player Ph, Sim retrieves the longterm
information for that player, i.e. pkPs , skPs. Sim then does
the following:
a) Decrypt and verify (‘‘init’’(cid:107)pke, x, pkc) ←
b) Find a player Pc with longterm public key pkPc = pkc.
Πssenc.SSDecVer(skPh , c) On failure, Sim halts.
If no such player exists, Sim halts.
c) Send
on
(StartConvo, Ph)
behalf
func-
receive
tionality
in return.
(ApproveNewConvoCorrupt, Pc, Ph, cid)
Sim responds with (Approve). Sim drops the resulting
notiﬁcation.
ideal
and
the
Pc
to
of
d) Generate an acknowledgment message using pke and
skh and send it to Pservice on behalf of Ph for the
identity pke
Finally, Sim adds the entry
(cid, Ph, pkPh
, skPh , Pc, pke,·)
to T
4) Anonymous honest user sends a message to an-
other honest user. When Sim receives the message
17
(NotifyAnonymousSendMessage, cid, mid,|m|) from the
ideal functionality, Sim looks up the entry
(cid,·, pks,cid, sks,cid, Pr, pkr,cid, skr,cid)
in T and performs the following:
a) Samples m0 ←${0, 1}|m|
b) Computes c ← Πssenc.SSEnc(m0, skr,cid, pks,cid)
c) Sends c to the Pservice for pks,cid from pkr,cid
d) Records the entry (cid, mid, c) in M
5) Non-anonymous honest user sends a message to an-
other honest user. When Sim receives the message
(NotifySendMessage, cid, mid, Pr,|m|) from the ideal
functionality, Sim looks up the entry
(cid,·, pks,cid, sks,cid, Pr, pkr,cid, skr,cid)
in T and performs the following:
a) Samples m0 ←${0, 1}|m|
b) Computes c ← Πssenc.SSEnc(m0, sks,cid, pkr,cid)
c) Sends c to the Pservice for pkr,cid from pks,cid
d) Records the entry (cid, mid, c) in M
a message
Sim receives
rupt
(NotifySendMessageCorrupt, cid, mid, m, Ph, Pc)
from the ideal functionality, Sim looks up the entry
user. When
sends
user
6) Honest
a
to
cor-
the message
(cid, Ph, pkh,cid, skh,cid, Pc, pkc,cid,·)
in T and performs the following:
a) Computes c ← Πssenc.SSEnc(m, skh,cid, pkc,cid)
b) Sends c to the Pservice for pkc,cid from pkh,cid
c) Records the entry (cid, mid, c) in M
7) Anonymous honest user receives a message from an
honest user. When Sim receives a set of messages
{(ApproveAnonymousReceiveMessage, cid, midi,|mi|)}i∈[k]
from the ideal functionality, Sim looks up
(cid,·, pks,cid, sks,cid, Pr, pkr,cid, skr,cid)
in T. Additionally, for each message, Sim looks for an
entry (cid, midi, ci) in M. The ideal functionality au-
thenticates to Pservice with the identity pks,cid and receives
messages {a(cid:48)
j}j∈[k(cid:48)] in return. Sim does the following:
a) For each message (ApproveAnonymousReceiveMessage,
entry
j(cid:107)c(cid:48)
j
j = ci, sends (Approve, mid).
j(cid:107)c(cid:48)
cid, midi,|mi|)
and
(cid, midi, ai, ci),
j = ai and c(cid:48)
such that a(cid:48)
j(cid:107)c(cid:48)
If no such a(cid:48)
j(cid:107)c(cid:48)
j, if there does not exist and
entry (cid, mid, a(cid:48)
j) for some value of mid, Sim
decrypts (mj, pkj) ← Πssenc.SSDecVer(sks,cid, ci). If
pkj = pkr,cid, the simulator aborts with an error.
8) Non-anonymous Honest user receives a message from
an honest user. When Sim receives the set of messages
b) For each message a(cid:48)
j, c(cid:48)
if Pservice sent a message a(cid:48)
j exists, Sim sends (Approve, mid).
associated
{(ApproveReceiveMessage, cid, midi,|m|, Pr)}i∈[k]
from the ideal functionality, Sim looks up
(cid,·, pks,cid, sks,cid, Pr, pkr,cid, skr,cid)
j such that c(cid:48)
in T. Additionally, for each message, Sim looks for an
entry (cid, midi, ci) in M. The ideal functionality au-
thenticates to Pservice with the identity pkr,cid and receives
messages {c(cid:48)
j}j∈[k(cid:48)] in return. Sim does the following:
a) For each message (ApproveReceiveMessage, cid, midi,
|mi|, Pr) and associated entry (cid, midi, ci),
if
Pservice sent a message c(cid:48)
j = ci, sends
j exists, Sim sends
(Approve, mid).
(Approve, mid).
j, if there does not exist and entry
(cid, mid, c(cid:48)
j) for some value of mid, Sim decrypts
(mj, pkj) ← Πssenc.SSDecVer(skr,cid, ci). If pkj =
pks,cid, the simulator aborts with an error.
from a
a message
the message
from
9) Honest
corrupt
(ApproveReceiveMessageCorrupt, cid, Ps, Pr)
the ideal functionality, it looks up
user
user. When Sim receives
b) For each message c(cid:48)
If no such c(cid:48)
receives
(cid, Ph, pkh,cid, skh,cid, Pc, pkc,cid,·)
in T. Sim authenticates to Pservice with pkh,cid and gets a
set of messages {ci}i∈[k] from Pservice. For each ci Sim
does the following:
a) decrypts (mi, pki) ← Πssenc.SSDecVer(skh,cid, ci). If
b) send the tuple (cid, Pc, Ph, mi) to the ideal function-
it fails, the message is dropped.
ality
Although the simulator is quite involved,
the security
argument is quite straight forward hybrid argument, starting
with the real experiment H0. In H1, conversation opening
messages between honest parties take the ephemeral secret
key instead of the sender’s longterm secret key. Due to the
ciphertext anonymity of Πssenc, the distance between H0 and
H1 is negligible. In H2, the plaintext contents of messages
between honest users are replaced with random messages of
the same length. Due to the security of Πssenc, the distance
between H1 and H2 is negligible. In H3, if the service provider
delivers a message on behalf of an anonymous honest user that
the honest user did not send, the experiment aborts. Due to
the authenticity property of Πssenc, the distance between H2
and H3 is negligible. In H4, if the service provider delivers
a message on behalf of a non-anonymous honest user that the
honest user did not send, the experiment aborts. Due to the
authenticity property of Πssenc, the distance between H3 and
H4 is negligible. Finally, in H5 keys are generated randomly
by the simulator instead of the honest parties. Because the keys
are sampled at random, the distributions of H4 and H5 are the
same. H5 and the simulator above are distributed identically,
so the proof is done.
C. Protocols for Two-Way Sealed Sender Conversations
This appendix provides more details for the two-way sealed
sender solution discussed in Section VI-C.
Recall how this solution works: after an initiator sends a
sealed sender message to the long-term identity of the receiver
communicating the sender’s ephemeral identity, the receiver
generates a fresh, ephemeral identity of their own and sends
it to the sender’s ephemeral identity via sealed sender. After
this initial exchange, the two users communicate using only
18
Notation
Type
Meaning
Anonymous
Ps
Pr
(pks, sks)
(pkr, skr)
(pke, ske)
(pkes, skes)
(pker, sker)
User
User
Πssenc Keys
Πssenc Keys
Πssenc Keys
Πssenc Keys
Πssenc Keys
Sender/Initiator
Receiver
Sender/Initiator key
Receiver key
Ephemeral key
Sender/Initiator eph. key
Receiver eph. key
-
-
N
N
Y
Y
Y
Fig. 7: Notation for two-way sealed sender protocols
their ephemeral identities and sealed sender messages, in both
directions (two-way).
The protocol proceeds as follows: When some conversation
initiator Ps wants to start a conversation with a user Pr, the
initiator executes Initiate Two-Way Sealed Conversation (see
below). Ps starts by generating a keypair (pkes, skes) and
registering pkes with the service provider. Ps then runs the
Change Mailbox protocol (see below), which informs the
receiver of pkes by sending a message to pkr. The receiver Pr
then generates a keypair (pker, sker) and registers pker with
the service provider. Finally, the Pr runs the Change Mailbox
protocol, informing Ps about pker by sending a message to
pkes. Ps and Pr communicate using Send message, Open
Connection, and Push Message as in Section VI-B (for
brevity, these protocols have not been replicated below).
Initiate Two-Way Sealed Conversation to Pr:
1) Ps looks up the Pr’s long-term key pkr
2) Ps generates keys (pkes, skes) ← Πssenc.SSKeyGen(1λ)
Change
3) Ps
4) Pr generates keys (pker, sker) ← Πssenc.SSKeyGen(1λ)
Change
5) Pr
and opens a mailbox with public key pkes
subroutine
Mailbox(Pr, pkes, sks, pkr)
and opens a mailbox with public key pker
subroutine
Mailbox(Ps, pker, skr, pkes)
runs
runs
the
the
6) Ps
records
(Pr, pker, pkes, skes)
(Ps, pkes, pker, sker) in their
tables
and Pr
records
respective conversation
7) Both Ps and Pr use send message to send a read-receipt
acknowledgment to pker and pkes respectively.
Change Mailbox(Pr, pke, sks, pkr):
1) User changing mailbox Ps does the following (note
that this user may be the conversation initiator or the
conversation receiver)
a) encrypts
b) connects to the server provider anonymously and sends
c ← Πssenc.SSEnc(‘‘init’’(cid:107)pke, sks, pkr)
c(cid:107)pke to the service provider addressed to pkr.
2) The service provider opens a mailbox with public key pke
and delivers c to pkr (sealed sender)
3) When the other user Pr calls receive message, it decrypts
and veriﬁes
(‘‘init’’(cid:107)pke, pks) ← Πssenc.SSDecVer(skr, c).