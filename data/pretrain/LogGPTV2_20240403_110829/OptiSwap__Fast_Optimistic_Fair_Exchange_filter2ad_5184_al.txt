˜S∗, he runs (sold, id) ← GL,H
(f inalize, id), to simulate the nalization executed
by the Seller, and outputs (bought, id, x) to ˜B∗. Otherwise, if no (f inalize, id)
message is received from ˜S∗, SimSB needs to refuse the unfreezing by sending
a (block, id) message in the name of ˜S∗ to L. Afterwards, he terminates the
simulation.
icfe
jc
The simulation is straightforward with some exceptions. First, it is noteworthy that the
simulator provides a wrong witness x∗ as input to FL
icfe in the rst round. Since SimSB con-
trols all outputs of the corrupted parties towards Z, he can replace the message (revealed, id, x∗)
icfe to ˜B∗ with the message (revealed, id, x), where x = Dec(k, z) is com-
in round 3 from FL
puted in round 3 after the Seller revealed the encryption key. This way, the revealed -message
in the ideal world execution carries the same witness x as in the hybrid world execution.
Another important aspect in the simulation with two corrupted parties is the blocking
of money. Lets consider the following situation. Buyer accepts the exchange oer from ˜S∗
by locking p coins in the smart contract. After this step, Seller has to reveal his key. Since
˜S∗ is malicious, he may abort and never reveal his key. ˜B∗ may send an abort-message to
get his money back. However, since Buyer is also malicious, he may also abort and refrain
from getting this money back. This sounds not reasonable, but it must be shown that the
environment cannot distinguish the hybrid and the ideal world in this scenario.
In the hybrid world, the money becomes locked forever, since GL,H
is not triggered to unlock
the coins. To simulate the same behavior in the ideal world, the simulator makes use of the
blocking feature of L. If no message is received in round 3, i.e., no reveal -message from ˜S∗
and no abort-message from ˜B∗, SimSB sends a (abort, id)-message in the name of ˜S∗ to
FL
icfe to instruct L to unlock coins in favor of ˜B∗. However, by
icfe. This message triggers FL
sending a (block, id)-message on behalf of the corrupted party ˜B∗ to L, SimSB prevents
the unlocking of the coins in favor of ˜B∗. Hence, the same behavior is achieved by the
simulator. This procedure is executed each time both parties abort in the same round to
achieve termination of the execution without unlocking the coins.
Next, it is important to take a look at the simulation of the dispute resolution sub-
protocol. In step (4a), the simulator awaits a message from the corrupted Buyer ˜B. This
can be either a challenge-message, a prove-message, or a complain-message. In case of a
prove- or a complain-message, the simulator has to judge on the validity of this message.
Since Seller can also act maliciously, SimSB does not know in advance whether or not
the received message is valid. Therefore, he evaluates the Judge- or the ValidateResponse-
algorithm, respectively. This carries out the same operation as the hybrid functionality GL,H
and hence the simulated behavior matches the execution in the hybrid world.
jc
jc
By showing that the environment cannot take advantage of this inuence and based on
the argumentation already stated in the proofs of the scenarios with single corruption, it
concludes that the execution of the hybrid world and the execution of the ideal world are
indistinguishable for any ppt environment Z.
F Evaluation and Results
The performance of FairSwap [14] depends on the circuit used for witness verication. The
authors claimed that circuits with a small instruction set and a small fan-in are promising
candidates. The small instruction set imply that the judge smart contract does not need
to be able to recompute many dierent instructions. Hence, the contract implementation
49
may be more ecient. We recall that the fan-in denotes the maximal number of inputs to a
single circuit gate. Therefore, a small fan-in results in a small proof of misbehavior. Finally,
Dziembowski et al. note that not only the number of instructions inuences the eciency
but also the actual instructions. This observation is based on the fact that some instructions
can be executed at low cost while other ones are very costly.
While all these parameters inuence the eciency of the judge implementation, they do
not eect the message complexity of the rst protocol message. This only depends on the size
of the verication circuit. All in all, Dziembowski et al. considered the le sale application
during their evaluation. Indeed, the FairSwap protocol is an ecient candidate for this use
case.
For evaluating the eciency of OptiSwap, we need to additionally consider the dispute
resolution protocol. Its eciency can be indicated by the number of rounds required in worst
case. This value depends on the characteristics of the verication circuit like size, depth, and
max fan-in.
In the following, we consider the le sale application to compare the eciency of Op-
tiSwap with FairSwap and a protocol built on the SmartJudge architecture [27]. We start
with a brief description of the le sale application, outline a smart contract implementation
for Ethereum, and present the evaluation results afterwards.
F.1 File Sale Application
For the le sale application, we consider objects that are identiable via their Merkle hash,
e.g., movies and software executables. Seller S oers a le x = (x1, . . . , xn), where each
element xi is of size λ for i ∈ [n]. The Merkle hash of x is given by h = MTHash(x).
The verication circuit φ computes the Merkle hash of the input and compares it with the
expected value h, i.e., φ(x) = 1 ⇔ MTHash(x) = h.
In this scenario, the instruction set of φ consists of two instructions. A hash function
H : {0, 1}∗ × {0, 1}∗ → {0, 1}µ that hashes two input elements and a function eq : {0, 1}µ ×
{0, 1}µ → {0, 1} to compare two values on equality. Figure 2 depicts the verication circuit
for a le of n = 8 elements.
x1
x2
x3
x4
x5
x6
x7
x8
λ
λ
λ
λ
λ
λ
λ
λ
H1(·, ·)
µ
H1(·, ·)
µ
H1(·, ·)
µ
H1(·, ·)
µ
H2(·, ·)
µ
H2(·, ·)
µ
H2(·, ·)
µ
eq(·, h)
1
Fig. 2. Example of a circuit for the le sale application.
50
F.2
Implementation
Dziembowski et al. provided an implementation for the le sale application based on their
FairSwap protocol on GubitHub7. We took their implementation and extend it by incorpo-
rating methods for the challenge-response procedure. This adaptation contains functions for
challenging and responding as well as complaining about a passed timeout. Additionally, a
function for validating the most recent response is added. The full smart contract code can
be found on GitHub8.
F.3 Results Comparison
In the following we compare our construction with FairSwap [14] and SmartJudge [27] re-
garding the message complexity and the gas costs.
Message Complexity. The major drawback of FairSwap is the overhead of the rst pro-
tocol message. This overhead results from the information needed to create a valid proof of
misbehavior. Although a proof of misbehavior needs to be created only in case of dispute,
the data must be transferred anyway. The actual size of the message does not only depend
on the size of the witness but also on the size of the verication circuit. The higher the
circuit size, the bigger is the resulting message.
Dziembowski et al. stated that for the le sale application the message size may by at most
twice as large as the le itself. Considering other circuits, the overhead might become even
worse.
In contrast to FairSwap, our construction shrinks the message size to just the size of the
witness itself. Hence, the overhead is completely removed. As a trade-o, the number of
rounds can increase. But, contrary to FairSwap, this eciency reduction happens only in
case of dispute where at least one party behaves maliciously. The honest execution has the
same round complexity and improved message complexity.
Gas Costs. Based on the smart contract implementation, we provide estimates about the
gas costs of our protocol execution. We used the Remix Solidity IDE9 to determine gas costs
of the deployment and execution of the smart contract.
In order to enable comparability with FairSwap [14] and SmartJudge [27], we present the gas
costs in two price models. The rst one, called the average model A, has a xed ether price of
500 USD and a gas price of 3 GWei. These exchange rates are the same as in the evaluation
of [14] and [27] and hence allow a comparison. The second model, called the current model
C, uses an ether price of 181.57 USD and a gas price of 14.4 GWei as of November 18, 2019
[1].
Optimistic execution. In case both parties behave honestly, the gas costs of the protocol
execution include the deployment costs as well as the costs for exchanging the encryption
key against the money. After at most 5 rounds, the honest execution terminates. Table 3
summarizes the gas costs in the optimistic execution. In this table it is assumed that the
Buyer sends a nalize-message in order to nish the protocol execution. Table 4 compares
the gas costs with FairSwap [14] and SmartJudge [27]. Since the smart contract code contains
additional methods for the dispute resolution, it is reasonable that the deployment costs are
higher for OptiSwap. In Section 3.5 we propose a solution to reduce the deployment cost
for the optimistic execution. The costs for calling the smart contract functions are nearly
7 The source code of the le sale application based on the FairSwap protocol can be found at
https://github.com/lEthDev/FairSwap.
8 The
source
code
of
the
OptiSwap
protocol
can
be
found
on
https://github.com/CryBtoS/OptiSwap.
9 Remix Solidity IDE: https://remix.ethereum.org
51
Table 3. Gas costs of all functions executed in the optimistic execution.
Function Caller
Costs
Gas Costs A [USD] C [USD]
Deployment Seller 2 273 398
Buyer
accept
Seller
revealKey
noComplain Buyer
32 394
55 051
13 862
3.41
0.05
0.08
0.02
5.94
0.08
0.14
0.04
the same. This is due to the fact that the honest execution does not dier in both protocols.
The small dierence may result from slightly dierent costs for the function call dispatcher
of the Ethereum Virtual Machine.
Table 4. Gas cost comparison between OptiSwap, FairSwap [14] and SmartJudge [27]. The gas
costs for the deployment and the honest execution (without deployment) are stated. The values for
FairSwap and SmartJudge are taken as claimed in the respective work.
Function
Gas Costs
Interactive Protocol FairSwap SmartJudge
Deployment
Honest Execution
2 273 398
101 307
1 050 000
103 333 10
1 947 000
143 000
Dispute resolution. In case at least one party behaves maliciously, the dispute resolution
must be executed. This protocol phase includes many costly blockchain transactions. How-
ever, our dispute resolution is constructed in a way that an honest party is reimbursed at
the end. This is based on the incorporated fee system. For the sake of completeness and as
a guidance for the determination of fee parameters, we computed gas cost estimates for a
dispute resolution.
Based on the le sale application with a le size of 1 GByte and a le chunk size of 512
Bytes, Table 5 contains the gas costs for the whole dispute resolution. This comprises the
gas costs for all challenge queries, all response messages, and the complaint.
Table 5. Aggregated gas costs for the challenge-response procedure for a le sale based on Op-
tiSwap.
Function
Caller
challenge
response
complainAboutLeaf Buyer
Costs
Gas Costs A [USD] C [USD]
Buyer
962 623
Seller 5 255 878
194 068
2.52
13.74
0.51
1.44
7.88
0.29
Total: 6 412 569
9.62
16.77
Fee Parameters. The fee mechanism is incorporated into the dispute resolution in order
to reimburse honest parties. As shown in Table 5, participating in the challenge-response
procedure is very costly.
We designed the fee mechanism in such a way that the reimbursement is ensured no matter
10 The value is derived form the costs of 1.73 USD claimed in [14] for the honest protocol execution
and an ether price of 500 USD and a gas price of 3 GWei. In addition the deployment costs are
subtracted.
52
after how many rounds the challenge-response procedure ends. It may end either by a suc-
cessful dispute resolution or by the abort of a malicious party.
Comparing the costs for creating a challenge query and generating a response message, we
observed that the Buyer has to pay higher fees. We investigated the costs for each challenge
query and each response transaction during the dispute resolution of the le sale application
to nd out how much gas is required for the most expensive challenge and response, respec-
tively. It turned out that the rst challenge query is the most expensive one for the Buyer
with gas costs of 79 426. We further observed that the second response has the highest gas
costs of 645 331 out of all response transactions.
Based on these two gas costs, we are able to determine static fee parameters. Considering
the average price model A, a Seller fee of 238 278 GWei per response and a Buyer fee of
1 935 993 GWei is an appropriate choice. These parameters guarantee a reimbursement no
matter when the dispute resolution terminates.
Since the parameters represent an upper bound of gas costs paid during the dispute reso-
lution, the overall amount of fees may be higher than the actual costs for the transactions.
This may increase the nancial burden for both parties but at the same time includes a
deterrent eect for malicious parties.
53