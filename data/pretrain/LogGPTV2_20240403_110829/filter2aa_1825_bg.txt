void LockShared();
void UnlockShared();
private:
ERESOURCE m_res;
bool m_CritRegion;
};
// ExecutiveResource.cpp
void ExecutiveResource::Init() {
ExInitializeResourceLite(&m_res);
}
void ExecutiveResource::Delete() {
ExDeleteResourceLite(&m_res);
}
void ExecutiveResource::Lock() {
m_CritRegion = KeAreApcsDisabled();
if(m_CritRegion)
ExAcquireResourceExclusiveLite(&m_res, TRUE);
else
ExEnterCriticalRegionAndAcquireResourceExclusive(&m_res);
}
void ExecutiveResource::Unlock() {
if (m_CritRegion)
ExReleaseResourceLite(&m_res);
else
ExReleaseResourceAndLeaveCriticalRegion(&m_res);
}
void ExecutiveResource::LockShared() {
Chapter 9: Process and Thread Notifications
299
m_CritRegion = KeAreApcsDisabled();
if (m_CritRegion)
ExAcquireResourceSharedLite(&m_res, TRUE);
else
ExEnterCriticalRegionAndAcquireResourceShared(&m_res);
}
void ExecutiveResource::UnlockShared() {
Unlock();
}
A few things are worth noting:
• Acquiring an Executive Resource must be done in a critical region (when normal kernel APCs are
disabled). The call to KeAreApcsDisabled returns true if normal kernel APCs are disabled. In that
case a simple acquisition will do; otherwise, a critical region must be entered first, so the “shortcuts”
to enter a critical region and acquire the Executive Resource are used.
A similar API, KeAreAllApcsDisabled returns true if all APCs are disabled (essentially
whether the thread is in a guarded region).
• An Executive Resource is used to protect the NewProcesses array from concurrent write access.
The idea is that more reads than writes are expected for this data. In any case, I wanted to show a
possible wrapper for an Executive Resource.
• The class presents an interface that can work with the Locker type we have been using for
exclusive access. For shared access, the LockShared and UnlockShared methods are provided.
To use them conveniently, a companion class to Locker<> can be written to acquire the lock in a
shared manner. Here is its definition (in Locker.h as well):
template
struct SharedLocker {
SharedLocker(TLock& lock) : m_lock(lock) {
lock.LockShared();
}
~SharedLocker() {
m_lock.UnlockShared();
}
private:
TLock& m_lock;
};
LookasideList is a wrapper for lookaside lists we met in chapter 8. It’s using the new API, as it’s
easier for selecting the pool type required. Here is its definition (in LookasideList.h):
Chapter 9: Process and Thread Notifications
300
template
struct LookasideList {
NTSTATUS Init(POOL_TYPE pool, ULONG tag) {
return ExInitializeLookasideListEx(&m_lookaside, nullptr, nullptr,
pool, 0, sizeof(T), tag, 0);
}
void Delete() {
ExDeleteLookasideListEx(&m_lookaside);
}
T* Alloc() {
return (T*)ExAllocateFromLookasideListEx(&m_lookaside);
}
void Free(T* p) {
ExFreeToLookasideListEx(&m_lookaside, p);
}
private:
LOOKASIDE_LIST_EX m_lookaside;
};
Going back to the data members for this driver. The purpose of the NewProcesses array is to keep track
of new processes before their first thread is created. Once the first thread is created, and identified as such,
the array will drop the process in question, because from that point on, any new thread created in that
process from another process is a remote thread for sure. We’ll see all that in the callbacks implementations.
The driver uses a simple array rather than a linked list, because I don’t expect a lot of processes with no
threads to exist for more than a tiny fraction, so a fixed sized array should be good enough. However, you
can change that to a linked list to make this bulletproof.
When a new process is created, it should be added to the NewProcesses array since the process has zero
threads at that moment:
void OnProcessNotify(PEPROCESS Process, HANDLE ProcessId,
PPS_CREATE_NOTIFY_INFO CreateInfo) {
UNREFERENCED_PARAMETER(Process);
if (CreateInfo) {
if (!AddNewProcess(ProcessId)) {
KdPrint((DRIVER_PREFIX "New process created, no room to store\n"));
}
else {
KdPrint((DRIVER_PREFIX "New process added: %u\n", HandleToULong(Pro\
Chapter 9: Process and Thread Notifications
301
cessId)));
}
}
}
AddProcess locates an empty “slot” in the array and puts the process ID in it:
bool AddNewProcess(HANDLE pid) {
Locker locker(ProcessesLock);
if (NewProcessesCount == MaxProcesses)
return false;
for(int i = 0; i Remote;
KeQuerySystemTimePrecise(&data.Time);
data.CreatorProcessId = HandleToULong(PsGetCurrentProcessId());
data.CreatorThreadId = HandleToULong(PsGetCurrentThreadId());
data.ProcessId = HandleToULong(ProcessId);
data.ThreadId = HandleToULong(ThreadId);
KdPrint((DRIVER_PREFIX
"Remote thread detected. (PID: %u, TID: %u) -> (PID: %u, TID: %u)\n",
data.CreatorProcessId, data.CreatorThreadId,
data.ProcessId, data.ThreadId));
Locker locker(RemoteThreadsLock);
// TODO: check the list is not too big
InsertTailList(&RemoteThreadsHead, &item->Link);
}
Getting the data to a user mode client can be done in the same way as we did for the SysMon driver:
Chapter 9: Process and Thread Notifications
304
NTSTATUS DetectorRead(PDEVICE_OBJECT, PIRP Irp) {
auto irpSp = IoGetCurrentIrpStackLocation(Irp);
auto len = irpSp->Parameters.Read.Length;
auto status = STATUS_SUCCESS;
ULONG bytes = 0;
NT_ASSERT(Irp->MdlAddress);
auto buffer = (PUCHAR)MmGetSystemAddressForMdlSafe(
Irp->MdlAddress, NormalPagePriority);
if (!buffer) {
status = STATUS_INSUFFICIENT_RESOURCES;
}
else {
Locker locker(RemoteThreadsLock);
while (true) {
//
// if the list is empty, there is nothing else to give
//
if (IsListEmpty(&RemoteThreadsHead))
break;
//
// if remaining buffer size is too small, break
//
if (len Remote, size);
len -= size;
buffer += size;
bytes += size;
//
// return data item to the lookaside list
//
Lookaside.Free(info);
}
}
return CompleteRequest(Irp, status, bytes);
}
Chapter 9: Process and Thread Notifications
305
Because there is just one type of “event” and it has a fixed size, the code is simpler than in the SysMon
case.
The full driver code is in the KDetector project in the solution for this chapter.
The Detector Client
The client code is very similar to the SysMon client, but simpler, because all “events” have the same
structure and are even fixed-sized. Here are the main and DisplayData functions:
void DisplayData(const RemoteThread* data, int count) {
for (int i = 0; i  PID: %u TID: %u\n",
rt.CreatorProcessId, rt.CreatorThreadId, rt.ProcessId, rt.ThreadId);
}
}
int main() {
HANDLE hDevice = CreateFile(L"\\\\.\\kdetector", GENERIC_READ, 0,
nullptr, OPEN_EXISTING, 0, nullptr);
if (hDevice == INVALID_HANDLE_VALUE)
return Error("Error opening device");
RemoteThread rt[20];
// fixed array is good enough
for (;;) {
DWORD bytes;
if (!ReadFile(hDevice, rt, sizeof(rt), &bytes, nullptr))
return Error("Failed to read data");
DisplayData(rt, bytes / sizeof(RemoteThread));
Sleep(1000);
}
CloseHandle(hDevice);
return 0;
}
The DisplayTime is the same one from the SysMonClient project.
We can test the driver by installing it and starting it normally, and launching our client (or we can use
DbgView to see the remote thread outputs). The classic example of a remote thread (as mentioned earlier)
is when a debugger wishes to forcefully break into a target process. Here is one way to do that:
Chapter 9: Process and Thread Notifications
306
1. Run some executable, say Notepad.exe.
2. Launch WinDbg.
3. Use WinDbg to attach to the Notepad process. A remote thread notification should appear.
Here are some examples of output when the detector client is running:
13:08:15.280: Remote Thread from PID: 7392 TID: 4788 -> PID: 8336 TID: 9384
13:08:58.660: Remote Thread from PID: 7392 TID: 13092 -> PID: 8336 TID: 13288
13:10:52.313: Remote Thread from PID: 7392 TID: 13092 -> PID: 8336 TID: 12676
13:11:25.207: Remote Thread from PID: 15268 TID: 7564 -> PID: 1844 TID: 6688
13:11:25.209: Remote Thread from PID: 15268 TID: 15152 -> PID: 1844 TID: 7928
You might find some remote thread entries surprising (run Process Explorer for a while, for example)
The full code of the client is in the Detector project.
Display process names in the client.
Summary
In this chapter we looked at some of the callback mechanisms provided by the kernel: process, thread
and image loads. In the next chapter, we’ll continue with more callback mechanisms - opening handles to
certain object types, and Registry notifications.