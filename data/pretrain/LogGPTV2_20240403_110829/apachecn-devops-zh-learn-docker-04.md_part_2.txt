在进行探索、创建原型或进行可行性研究时，如本章前面部分所示手动创建自定义映像非常有帮助。但它有一个严重的缺点:这是一个手动过程，因此不可重复或扩展。它也像任何人工执行的任务一样容易出错。肯定有更好的办法。
这就是所谓的 Dockerfile 发挥作用的地方。Dockerfile 是一个文本文件，通常字面上称为 Dockerfile。它包含如何构建自定义容器映像的说明。这是一种构建映像的声明方式。
**De****clarative versus imperative**:
In computer science, in general and with Docker specifically, one often uses a declarative way of defining a task. One describes the expected outcome and lets the system figure out how to achieve this goal, rather than giving step-by-step instructions to the system on how to achieve this desired outcome. The latter is the imperative approach.
让我们看一个示例 Dockerfile:
```
FROM python:2.7
RUN mkdir -p /app
WORKDIR /app
COPY ./requirements.txt /app/
RUN pip install -r requirements.txt
CMD ["python", "main.py"]
```
这是一个 Dockerfile，因为它用于容器化 Python 2.7 应用。如我们所见，文件有六行，每一行都以一个关键字开始，如`FROM`、`RUN`或`COPY`。用所有大写字母写关键词是惯例，但这不是必须的。
Dockerfile 的每一行都会在结果映像中产生一个图层。在下图中，与本章前面的插图相比，映像是颠倒绘制的，将映像显示为一叠图层。这里，基层显示在顶部。不要让自己被这个迷惑。实际上，基础层始终是栈中的最低层:
![](img/593fcb23-00a1-418b-9371-fd12674c2cf1.jpg)
The relation of Dockerfile and layers in an image
现在让我们更详细地看看单个关键词。
# FROM 关键字
每个 Dockerfile 都以`FROM`关键字开始。有了它，我们就可以定义从哪个基础映像开始构建我们的自定义映像。例如，如果我们想从 CentOS 7 开始构建，我们将在 Dockerfile 中有以下行:
```
FROM centos:7
```
在 Docker Hub 上，有所有主要 Linux 发行版的精选或官方映像，以及所有重要的开发框架或语言，如 Python、Node JS、Ruby、Go 等。根据我们的需要，我们应该选择最合适的基础映像。
例如，如果我想要容器化一个 Python 2.7 应用，我可能想要选择相关的官方`python:2.7`映像。
如果我们真的想从头开始，我们也可以使用以下语句:
```
FROM scratch
```
这在构建仅包含单个二进制文件(实际的静态链接可执行文件，如`Hello-World`)的超最小映像时非常有用。草稿映像实际上是一个空的基本映像。
`FROM scratch`是 Dockerfile 中的 no-op，因此不会在生成的容器映像中生成图层。
# RUN 关键字
接下来重要的关键词是`RUN`。`RUN`的参数是任何有效的 Linux 命令，例如:
```
RUN yum install -y wget
```
前面的命令是使用 CentOS 包管理器`yum`将`wget`包安装到运行容器中。这假设我们的基本映像是 CentOS 或 RHEL。如果我们有 Ubuntu 作为我们的基础映像，那么命令看起来将类似于以下内容:
```
RUN apt-get update && apt-get install -y wget
```
它看起来像这样，因为 Ubuntu 使用`apt-get`作为包管理器。同样，我们可以用`RUN`定义一条线，如下所示:
```
RUN mkdir -p /app && cd /app
```
我们也可以这样做:
```
RUN tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz
```
在这里，前者在容器中创建一个`/app `文件夹并导航到它，后者将一个文件解压到一个给定的位置。使用多条物理线格式化 Linux 命令是完全可以的，甚至是推荐的，例如:
```
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
 ca-certificates \
 libexpat1 \
 libffi6 \
 libgdbm3 \
 libreadline7 \
 libsqlite3-0 \
 libssl1.1 \
 && rm -rf /var/lib/apt/lists/*
```
如果我们使用多行，我们需要在行尾放一个反斜杠(`\`)，向 shell 表明命令在下一行继续。
尝试找出前面的命令是做什么的。
# 复制和添加关键字
`COPY`和`ADD`关键词非常重要，因为最终，我们希望向现有的基础映像添加一些内容，使其成为自定义映像。大多数时候，这些都是一些源文件，比如说，一个 web 应用或者一个编译后的应用的一些二进制文件。
这两个关键字用于将文件和文件夹从主机复制到我们正在构建的映像中。这两个关键词非常相似，除了`ADD`关键词还可以让我们复制和解压 TAR 文件，以及提供一个 URL 作为文件和文件夹复制的来源。
让我们看几个如何使用这两个关键词的例子:
```
COPY . /app
COPY ./web /app/web
COPY sample.txt /data/my-sample.txt
ADD sample.tar /app/bin/
ADD http://example.com/sample.txt /data/
```
在前面几行代码中:
*   第一行将当前目录下的所有文件和文件夹递归复制到容器映像内的`/app `文件夹
*   第二行将`web `子文件夹中的所有内容复制到目标文件夹`/app/web`
*   第三行将单个文件`sample.txt`复制到目标文件夹`/data`中，同时将其重命名为`my-sample.txt`
*   第四条语句将`sample.tar `文件解压到目标文件夹`/app/bin`
*   最后，最后一条语句将远程文件`sample.txt`复制到目标文件`/data`中
源路径中允许使用通配符。例如，以下语句将所有以`sample`开头的文件复制到映像内的`mydir`文件夹中:
```
COPY ./sample* /mydir/
```
从安全角度来看，重要的是要知道，默认情况下，映像中的所有文件和文件夹都将有一个**用户标识** ( **UID** )和一个**组标识**(**GID**)`0`。好消息是，对于`ADD`和`COPY`，我们可以使用可选的`--chown`标志更改文件在映像中的所有权，如下所示:
```
ADD --chown=11:22 ./data/files* /app/data/
```
前面的语句将复制所有以名称`web`开头的文件，并将其放入映像中的`/app/data `文件夹，同时将用户`11`和组`22`分配给这些文件。
除了数字之外，还可以使用用户和组的名称，但是这些实体必须分别在`/etc/passwd`和`/etc/group`的映像根文件系统中定义，否则映像的构建将会失败。
# WORKDIR 关键字
`WORKDIR`关键字定义了从我们的自定义映像运行容器时使用的工作目录或上下文。因此，如果我想将上下文设置为映像中的`/app/bin`文件夹，我在 Dockerfile 中的表达式必须如下所示:
```
WORKDIR /app/bin
```
在前一行之后映像内部发生的所有活动都将使用该目录作为工作目录。需要注意的是，Dockerfile 中的以下两个片段并不相同:
```
RUN cd /app/bin
RUN touch sample.txt
```
将前面的代码与下面的代码进行比较:
```
WORKDIR /app/bin
RUN touch sample.txt
```
前者将在映像文件系统的根目录中创建文件，而后者将在`/app/bin `文件夹中的预期位置创建文件。只有`WORKDIR`关键字设置映像各层的上下文。仅`cd`命令不能跨层持续。
# CMD 和 ENTRYPOINT 关键字
`CMD`和`ENTRYPOINT`关键词比较特殊。虽然为 Dockerfile 定义的所有其他关键字都是在 Docker builder 构建映像时执行的，但这两个关键字实际上是定义当容器从我们定义的映像启动时会发生什么。当容器运行时启动一个容器时，它需要知道必须在这个容器中运行的进程或应用是什么。这正是`CMD`和`ENTRYPOINT`的用途——告诉 Docker 启动过程是什么以及如何启动该过程。
现在`CMD`和`ENTRYPOINT`的区别很微妙，老实说，大多数用户并没有完全理解它们或者以预期的方式使用它们。幸运的是，在大多数情况下，这不是问题，容器无论如何都会运行；只是对它的处理没有想象的那么简单。
为了更好地理解如何使用这两个关键词，让我们分析一下典型的 Linux 命令或表达式是什么样子的——例如，让我们以`ping`实用程序为例，如下所示:
```
$ ping 8.8.8.8 -c 3
```
在前面的表达式中，`ping`是命令，`8.8.8.8 -c 3`是该命令的参数。让我们看看另一种表达方式:
```
$ wget -O - http://example.com/downloads/script.sh
```
同样，在前面的表达式中，`wget`是命令，`-O - http://example.com/downloads/script.sh`是参数。
既然我们已经处理了这个，我们就可以回到`CMD`和`ENTRYPOINT`了。`ENTRYPOINT`用于定义表达式的命令，而`CMD`用于定义命令的参数。因此，使用`alpine`作为基本映像并将`ping`定义为要在容器中运行的进程的 Dockerfile 可能如下所示:
```
FROM alpine:latest
ENTRYPOINT ["ping"]
CMD ["8.8.8.8", "-c", "3"]
```
对于`ENTRYPOINT`和`CMD`，这些值都被格式化为字符串的 JSON 数组，其中各个项目对应于由空白分隔的表达式的标记。这是定义`CMD`和`ENTRYPOINT`的首选方式。它也被称为**高管**形式。
或者，也可以使用所谓的**外壳**形式，例如:
```
CMD command param1 param2
```
我们现在可以从前面的 Dockerfile 构建一个映像，如下所示:
```
$ docker image build -t pinger .
```
然后，我们可以从刚刚创建的`pinger`映像运行一个容器:
```
$ docker container run --rm -it pinger
PING 8.8.8.8 (8.8.8.8): 56 data bytes
64 bytes from 8.8.8.8: seq=0 ttl=37 time=19.298 ms
64 bytes from 8.8.8.8: seq=1 ttl=37 time=27.890 ms
64 bytes from 8.8.8.8: seq=2 ttl=37 time=30.702 ms
```
这样做的好处是，当我通过在`docker container run`表达式末尾添加新值来创建一个新容器时，我现在可以覆盖我在 Dockerfile 中定义的`CMD`部分(记住，它是`["8.8.8.8", "-c", "3"]`:
```
$ docker container run --rm -it pinger -w 5 127.0.0.1
```
这将导致容器 ping 回送`5`秒。
如果我们想要覆盖 Dockerfile 中的`ENTRYPOINT`中定义的内容，我们需要使用`docker container run`表达式中的`--entrypoint`参数。假设我们想在容器中执行一个 shell，而不是`ping`命令。我们可以通过使用以下命令来实现:
```
$ docker container run --rm -it --entrypoint /bin/sh pinger
```