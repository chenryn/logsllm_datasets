to discontinue usage of the manager quickly.
(E5) Autofill credential: One key benefit of password man-
agers is that they allow the manager to fill the credentials, with
all managers supporting (P1) autofill w/ interaction with many also
supporting the less secure (P2) autofill w/o interaction [15, 18, 19, 32].
Some managers also provide an (P3) internal login tool that will
open the appropriate website and complete the login operation. On
mobile managers, this commonly happens within a custom browser
built into the manager.
When multiple credentials are shown are linked to a given do-
main/app, the manager shows a selection dialog for users to select
which credentials to use. When matching domains with credentials,
some managers (P4) separate subdomains from each other, where
others (P5) group subdomains together as a single domain.
Ruoti and Seamons [28] propose using a trusted pathway to
improve the security of filled credentials. While these types of
SystematizationofPasswordManagerUseCasesandDesignParadigmsACSAC’21,December6–10,2021,VirtualEvent,USAAuthorsYearCitation(E1)Setupmanager(E2)Registercredential(E3)Updatecredential(E4)Removecredential(E5)Autofillcredential(E6)Manuallyentercredential(E7)Generatepassword(E8)Synccredentials(E9)Lockmanager(E10)Unlockmanager(R1)Auditcredentials(R2)Modifysettings(R3)Recoveraccess(X1)Migratemanager(X2)Sharecredentials(X3)Manageidentities(X4)StoresensitivedataSecurityGastiandRasmussen2012[11]✔Fahletal.2013[9]✔Lietal.2014[15]✔✔Silveretal.2014[30]✔StockandJohns2014[32]✔OeschandRuoti2020[19]✔✔✔Oeschetal.2021[18]✔InterviewFaganetal.2017[8]✔✔✔Pearmanetal.2019[21]✔✔✔Rayetal.2021[22]✔✔✔✔UsabilityLyastanietal.2017[16]✔✔✔✔Seiler-Hwangetal.2019[29]✔✔✔✔✔Huamanetal.2021[13]✔✔✔Chiassonetal.2006[3]✔✔✔✔McCarneyetal.2012[17]✔✔✔Stobertetal.2020[31]✔✔✔✔Table3:Usecasesexaminedinpriorusabilitystudiesmanagersisinstallinganextension;however,thisswitchestoinstallinganapponmobiledevices.Somedesktopmanagerssupportinstallingbothanappandextension,providingadditionalfeaturesandsecurityifbothsetupparadigmsareused.Insomecases,thepasswordmanageris(P4)builtintotheoperatingsystem,withabrowserservingasaninterfaceforthatpasswordmanager(e.g.,macOSKeychainandSafari).Finally,amanageroften(P5)requiresacloudaccounttobecreatedandusedtoaccessthepasswordmanagerorsyncpasswords.Inbrowsers,thisisdoneusingthesameaccountusedtologintothebrowser.Whilebrowsersdosupportusingthepasswordmanagerwithoutalinkedaccount,thiswillpreventcredentialsyncingandmaydisableotherfeatures.(E2)Registercredential:Allmanagerssupport(P1)manualregistrationofcredentialswithinthemanager’sUI,withmostalsoableto(P2)auto-detectregistrationandoffertosavethedetectedcredential.Ondesktop,thisdetectionisprimarilylimitedtousewithwebsitesinabrowser,whereasonmobile,detectionworksinbothbrowsersandapps.Stobertetal.[31]proposedandtestedadesignparadigmwherean(P3)internalregistrationtoolcancreateonlineaccounts,thoughthishasnotbeenimplementedinanydeployedmanager.Finally,somemanagersallowusersto(P4)linkadditionaldomainsorappstoacredential,addressingthecasewherethesameauthenticationbackendisusedbymultipledomains/apps—forexample,LANwebsitesusingacommonLDAPbackend.Thislinkingishelpfultoavoidcredentialsbeingmarkedasreusedinacredentialaudit.(E3)Updatecredential:Aswithregisteringcredentials,managerssupport(P1)manualupdateandmaybeableto(P2)auto-detectupdateaswell.Somemanagersalsoprovidean(P3)internalupdatetoolthatprovidesaone-clickmethodforausertoupdatetheircredentials,bothchangingthecredentialinthemanagerandatthewebsite/app.(E4)Removecredential:Allmanagerssupport(P1)manualremovalofcredentials.Unlikeregistrationandupdatingcredentials,managersdonotsupport(E4)Removecredential,thoughitiseasytoimaginehowsuchafeaturecouldbeimplemented.Stobertetal.[31]proposedandtestedadesignparadigmwherean(P3)internalregistrationtoolcandeleteonlineaccounts,thoughthishasnotbeenimplementedinanydeployedmanager.Somemanagersalsoallowuserstoentirely(P4)wipethecredentialvault,allowingthemtodiscontinueusageofthemanagerquickly.(E5)Autofillcredential:Onekeybenefitofpasswordmanagersisthattheyallowthemanagertofillthecredentials,withallmanagerssupporting(P1)autofillw/interactionwithmanyalsosupportingthelesssecure(P2)autofillw/ointeraction[15,18,19,32].Somemanagersalsoprovidean(P3)internallogintoolthatwillopentheappropriatewebsiteand532ACSAC ’21, December 6–10, 2021, Virtual Event, USA
James Simmons, Oumar Diallo, Sean Oesch, and Scott Ruoti
Table 4: Password Manager Design Paradigms—Essential Use Cases
pathways have been explored for browser-based authentication [6,
7], they have never been integrated with a password manager.
(E6) Manually enter credential: To be able to enter credentials
manually, it is critical that managers (P1) show stored credentials to
users, allowing them to type those credentials elsewhere as well
as copy and paste the credentials. Many managers (P2) obfuscate
password characters displayed credentials, requiring users to click
a button to reveal the plaintext credential. A more helpful design
paradigm is to (P3) distinguish password characters when displaying
the password—for example, highlight digits one color and characters
another to help distinguish between 0 and O or 1 and l—making it
easier to enter complex passwords correctly.
ACSAC’21,December6–10,2021,VirtualEvent,USAJamesSimmons,OumarDiallo,SeanOesch,andScottRuotiDesktopMobileUseCaseParadigmCountPercentCountPercent(E1-P1)Installanapp650%1083%(E1-P2)Installanextension650%00%(E1-P3)Builtintothebrowser433%00%(E1-P4)Builtintotheoperatingsystem18%217%(E1)Setupmanager(E1-P5)Requiresacloudaccount758%1192%(E2-P1)Manualregistration975%1192%(E2-P2)Auto-detectregistration1192%1083%(E2-P3)Internalregistrationtool†00%00%(E2)Registercredential(E2-P4)Linkadditionaldomainsorapps325%217%(E3-P1)Manualupdate12100%1192%(E3-P2)Auto-detectupdate1192%18%(E3)Updatecredential(E3-P3)Internalupdatetool325%00%(E4-P1)Manualremoval12100%1192%(E4-P2)Auto-detectremoval∗00%00%(E4-P3)Internalremovaltool†00%00%(E4)Removecredential(E4-P4)Wipethecredentialvault433%00%(E5-P1)Autofillw/interaction1192%1192%(E5-P2)Autofillw/ointeraction650%18%(E5-P3)Internallogintool542%1192%(E5-P4)Separatesubdomains542%325%(E5-P5)Groupsubdomains758%00%(E5)Autofillcredential(E5-P6)Reliesontrustedpath†00%00%(E6-P1)Showstoredcredentials1192%1192%(E6-P2)Obfuscatepasswordcharacters1192%1083%(E6)Manuallyentercredential(E6-P3)Distinguishpasswordcharacters217%758%(E7-P1)Manualgeneration867%1083%(E7-P2)Auto-detectandgenerate867%18%(E7-P3)ManuallysetthePCP758%1083%(E7-P4)Auto-detectthePCP18%00%(E7)Generatepassword(E7-P5)DownloadthePCP∗00%00%(E8-P1)Fullyautomatedsync1083%1083%(E8-P2)Manuallycopythevaultfile217%00%(E8)Synccredentials(E8-P3)Partiallyautomatedsync∗00%00%(E9-P1)Manuallock867%1083%(E9-P2)Timedauto-lock867%1083%(E9)Lockmanager(E9-P3)Logoutofthebrowsertolock650%1192%(E10-P1)Unlockwithmasterpassword758%1083%(E10-P2)Unlockwithbiometric217%1083%(E10-P3)Unlockwith2FA975%542%(E10-P4)Logintobrowsertounlock433%00%(E10)Unlockmanager(E10-P5)LogintoOStounlock18%18%∗—Novelparadigmintroducedinthispaper†—ParadigmproposedintheresearchliteratureCountsareofthenumberofmanagersthatweevaluatedwhichimplementthesedesignparadigms.Table4:PasswordManagerDesignParadigms—EssentialUseCasescompletetheloginoperation.Onmobilemanagers,thiscommonlyhappenswithinacustombrowserbuiltintothemanager.Whenmultiplecredentialsareshownarelinkedtoagivendomain/app,themanagershowsaselectiondialogforuserstoselectwhichcredentialstouse.Whenmatchingdomainswithcredentials,somemanagers(P4)separatesubdomainsfromeachother,whereothers(P5)groupsubdomainstogetherasasingledomain.RuotiandSeamons[28]proposeusingatrustedpathwaytoimprovethesecurityoffilledcredentials.Whilethesetypesofpathwayshavebeenexploredforbrowser-basedauthentication[6,7],theyhaveneverbeenintegratedwithapasswordmanager.533Systematization of Password Manager Use Cases and Design Paradigms
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
(E7) Generate password: Most managers support (P1) manual
generation of passwords, though some also (P2) auto-detect and
generate and fill passwords when needed during account creation.
In terms of identifying the password composition policy (PCP),
most managers allow users to (P3) manually set the PCP. Uniquely,
Chrome attempts to (P4) auto-detect the PCP, though success is
limited. While not supported by any managers, a paradigm allowing
managers to (P5) download the PCP for websites/apps would help
ensure that generators only create compliant passwords, improving
their usability.
(E8) Sync credentials: Most managers provide (P1) fully auto-
mated sync of the password vault (i.e., credential store). For security
reasons, several managers eschew the use of cloud-stored vaults,
instead require users to (P2) manually copy the vault file between
devices to sync the managers. For these security-conscious users,
we propose a new paradigm providing a (P3) partially automated
sync, wherein (a) the credential vault is encrypted with a key gener-
ated on the source device, (b) the encrypted vault is upload online
(temporarily), (c) the destination device downloads the encrypted
vault, and (d) the user enters the encryption key on the new device
(e.g., scanning a QR code). We believe that the proposed paradigm
satisfies the security requirements of non-cloud-based managers
while being significantly more usable than relying on exporting
and importing the vault file (even when that process is aided by
other sync software such as Dropbox).
(E9) Lock manager: All non-browser-based managers require
users to perform a (P1) manual lock of the password vault, prevent-
ing access to the credentials stored there until it is unlocked. These
managers commonly also supported a (P2) timed auto-lock that
triggers after some period of inactivity. Browser-based managers
do not provide manual or timed lockouts, instead requiring users
to (P3) logout of the browser to lock the vault.
(E10) Unlock manager: Users have a variety of methods for
unlocking their password vault. Most commonly, users (P1) unlock
with master password—a single, strong password or passphrase
chosen by the user. Some managers also allow the user to (P2)
unlock with biometric in place of the master password. For additional
security, managers call also require users to (P3) unlock with 2FA.
For browser-based and OS-based managers (i.e., KeyChain), users
need only (P4) log into browser to unlock the vault or (P5) log into
OS to unlock the vault, respectively.
3.2 Recommended Use Case Paradigms
(R1) Audit credentials: Credential audits (i.e., health checks) are
intended to help users monitor the security of their stored creden-
tials. They can (P1) identify weak passwords, (P2) identify reused
passwords, (P3) identify old passwords,2 and (P4) identify compro-
mised passwords, helping users address the most significant issues
with their passwords. We also propose a design paradigm to (P5)
identify unused passwords, helping users identify online accounts
2Old and weak credentials are more likely to be compromised and changing old
credentials can remove access to an attacker if the credential had been previously
compromised. Still, the importance of flagging old credentials is unclear and seems to
run counter to updated NIST guidelines on password expiration. As such, we believe
more research is needed on this topic.
that they no longer use and which could be deleted to reduce the
user’s online footprint and help protect their privacy.
Managers can require users to manually trigger the credential
audit and (P6) display a summary of audit results when the audit is
finished. Alternatively, managers can be continually running audit
and (P7) prompt with audit results with results as they are identified,
though currently, this is only done for compromised credentials
in Chrome. As some users may be overwhelmed with the number
of results in an audit—for example, a user that just adopted the
manager and uploaded all their human-generated passwords to the
vault—and so we propose a design paradigm to (P8) prioritize audit
recommendations, preventing users from being overwhelmed and
helping them focus on the most important items.
(R2) Modify settings: To increase the usability and correct us-
age of settings [25], many managers provide (P1) inline setting
documentation, including details on how they work and the se-
curity implications of changing them.3 Managers may also pro-
vide (P2) searchable settings allowing users to find relevant settings
quickly. We suggest an additional paradigm that would (P3) au-
dit settings, helping users identify ways they could further secure
their manager (e.g., disabling password autofill without user inter-
action [15, 18, 19, 30, 32]).
(R3) Recover access: For many managers, if they have forgotten
or lost access to their master password or other authentication
factors, they cannot regain access to their vault. This sacrifices us-
ability (people do forget and lose important things) to significantly
improve the security of stored credentials. One way to address this
problem is to allow users to print or otherwise store in a safe place
a cryptographically secure (P1) recovery code that can be used to
unlock the vault and allow users to reset their master password.
Alternatively, as browser-based managers are tied to the browser’s
online account, they can use the browser’s online account recovery
mechanisms to restore access to the manager: (P2) email/Phone-
based recovery and (P3) customer service-based recovery.
3.3 Extended Use Case Paradigms
(X1) Migrate manager: When migrating between managers, it is
helpful if users can bring over their old credentials. This migration
can be done by first performing a (P1) manual export of credentials
in one manager and then a (P2) manual import of credentials in
the second manager. Users can also leverage manual export and
import of credentials to allow them to create offline backups of their
vault. To automate this process, the destination manager detects the
source manager and executes an (P3) automatic import of credentials
from the source manager. We also propose a paradigm where the
new manager would (P4) disable the prior manager, preventing it
from interfering with the new manager.
(X2) Share credentials: Users can share their credentials using
various standard channels (e.g., email, texting, verbally). However,
managers can also support sharing by allowing users to (P1) share
credentials with other users of the same manager. While not currently
supported, it is easy to imagine a design paradigm where users
3Managers also provide traditional, external documentation. Still, as this documenta-
tion is frequently ignored by users [25] and because it is not a part of the manager, we
choose not to include it as a design paradigm.
534ACSAC ’21, December 6–10, 2021, Virtual Event, USA
James Simmons, Oumar Diallo, Sean Oesch, and Scott Ruoti
Table 5: Password Manager Design Paradigms—Recommended and Extended Use Cases
(P2) share credentials with non-users—for example, by sending non-
users a link that lets them access a cloud portal with the stored
credentials. If the recipient uses a password manager, it could also
be designed to ingest these URLs and make them directly accessible
in the recipient’s vault, even though the two users have different
managers. The benefit of sharing credentials using the manager is
that it allows users to (P3) apply access control to shared credentials.
(X3) Manage identities: Managers can allow users to (P1) man-
age identities, named groupings of credentials with only credentials
from the currently selected identity being accessible in the man-
ager’s interface. To help increase the security of credentials stored
associated with identities, we propose a design paradigm that would
allow users to (P2) protect an identity with a PIN. For example, this
could be used on a family password manager account to segment
and protect credentials related to shopping from accounts kids can
access.
(X4) Store sensitive data: In addition to credentials, managers
can allow the users to (P1) store unstructured data (e.g., text blobs) or
(P2) store structured data (e.g., phone numbers, addresses). For struc-
tured data, managers can also support (P3) autofill for structured
data for websites and apps.
3.4 Discussion
In this subsection, we identified a large number of design paradigms
(77) that have either been used in deployed managers (65), detailed
in the research literature (3), or which we recommended based
on our analysis of the existing paradigms (9). While we believe
this list of paradigms to be complete, we recognize that it will
not necessarily stay that way as researchers study these existing
paradigms and then develop and study new paradigms. We do
not view this as a flaw with this research artifact but rather as its
intended purpose (i.e., to spur new research into paradigms).
Critically, we note that while there have been usability studies
of password managers exploring a handful of these paradigms,
the majority of paradigms have not been critically examined in
the research. Even when paradigms have been studied, they have
not been studied comparatively, leaving their relative strengths
and weaknesses unclear. For all these reasons, we expect that this
ACSAC’21,December6–10,2021,VirtualEvent,USAJamesSimmons,OumarDiallo,SeanOesch,andScottRuotiDesktopMobileUseCaseParadigmCountPercentCountPercent(R1-P1)Identifyweakpasswords650%758%(R1-P2)Identifyreusedpasswords542%867%(R1-P3)Identifyoldpasswords217%00%(R1-P4)Identifycompromisedpasswords650%867%(R1-P5)Identifyunusedpasswords∗00%00%(R1-P6)Displayasummaryofauditresults650%867%(R1-P7)Promptwithauditresults217%00%(R1)Auditcredentials(R1-P8)Prioritizeauditrecommendations∗00%00%(R2-P1)Inlinesettingdocumentation758%867%(R2-P2)Searchablesettings433%18%(R2)Modifysettings(R2-P3)Auditsettings∗00%325%(R3-P1)Recoverycode217%00%(R3-P2)Email/Phone-basedrecovery433%217%(R3)Recoveraccess(R3-P3)Customerservice-basedrecovery433%00%(X1-P1)Manualexportofcredentials1192%217%(X1-P2)Manualimportofcredentials1192%433%(X1-P3)Automaticimportofcredentials650%00%(X1)Migratemanager(X1-P4)Disablethepriormanager∗00%00%(X2-P1)Sharecredentialswithotherusers542%650%(X2-P2)Sharecredentialswithnon-users∗00%217%(X2)Sharecredentials(X2-P3)Applyaccesscontrol542%650%(X3-P1)Manageidentities325%217%(X3)Manageidentities(X3-P2)ProtectanidentitywithaPIN∗00%00%(X4-P1)Storeunstructureddata867%1083%(X4-P2)Storestructureddata1192%1192%(X4)Storesensitivedata(X4-P3)Autofillforstructureddata975%1192%∗—Novelparadigmintroducedinthispaper†—ParadigmproposedintheresearchliteratureCountsareofthenumberofmanagersthatweevaluatedwhichimplementthesedesignparadigms.Table5:PasswordManagerDesignParadigms—RecommendedandExtendedUseCasesthesecondmanager.Userscanalsoleveragemanualexportandimportofcredentialstoallowthemtocreateofflinebackupsoftheirvault.Toautomatethisprocess,thedestinationmanagerdetectsthesourcemanagerandexecutesan(P3)automaticimportofcredentialsfromthesourcemanager.Wealsoproposeaparadigmwherethenewmanagerwould(P4)disablethepriormanager,preventingitfrominterferingwiththenewmanager.(X2)Sharecredentials:Userscansharetheircredentialsusingvariousstandardchannels(e.g.,email,texting,verbally).However,managerscanalsosupportsharingbyallowingusersto(P1)sharecredentialswithotherusersofthesamemanager.Whilenotcurrentlysupported,itiseasytoimagineadesignparadigmwhereusers(P2)sharecredentialswithnon-users—forexample,bysendingnon-usersalinkthatletsthemaccessacloudportalwiththestoredcredentials.Iftherecipientusesapasswordmanager,itcouldalsobedesignedtoingesttheseURLsandmakethemdirectlyaccessibleintherecipient’svault,eventhoughthetwousershavedifferentmanagers.Thebenefitofsharingcredentialsusingthemanageristhatitallowsusersto(P3)applyaccesscontroltosharedcredentials.(X3)Manageidentities:Managerscanallowusersto(P1)manageidentities,namedgroupingsofcredentialswithonlycredentialsfromthecurrentlyselectedidentitybeingaccessibleinthemanager’sinterface.Tohelpincreasethesecurityofcredentialsstoredassociatedwithidentities,weproposeadesignparadigmthatwouldallowusersto(P2)protectanidentitywithaPIN.Forexample,thiscouldbeusedonafamilypasswordmanageraccounttosegmentandprotectcredentialsrelatedtoshoppingfromaccountskidscanaccess.(X4)Storesensitivedata:Inadditiontocredentials,managerscanallowtheusersto(P1)storeunstructureddata(e.g.,textblobs)or(P2)storestructureddata(e.g.,phonenumbers,addresses).Forstructureddata,managerscanalsosupport(P3)autofillforstructureddataforwebsitesandapps.3.4DiscussionInthissubsection,weidentifiedalargenumberofdesignparadigms(77)thathaveeitherbeenusedindeployedmanagers(65),detailedintheresearchliterature(3),orwhichwerecommendedbasedonouranalysisoftheexistingparadigms(9).Whilewebelieve535Systematization of Password Manager Use Cases and Design Paradigms
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
paradigm list can spur a substantial body of impact research into
the usability and utility of password managers.
There are no mutually exclusive paradigms, though it might not
be possible to use both simultaneously in some cases. For exam-
ple, it is not possible to (P4) separate subdomains and (P5) group
subdomains, though a manager could allow users to select which
they prefer. However, if a manager supported too many paradigms
simultaneously, this would likely lead to confusion. Similarly, some
paradigms might have unexpected interactions. More research is
needed to identify the ideal set of default paradigms, select the
paradigms that should be offered as options, and determine which
should not be used together.
Comparing the percentage of managers that implement a para-
digm on mobile and desktop, we find that differences are primarily
attributable to the types of managers examined on each. For ex-
ample, we do not examine the built-in managers for any mobile
browsers. Still, we observed a couple of interesting points when
comparing paradigm usage between desktop and mobile implemen-
tations for the same manager. First, we find that mobile managers
often have fewer features than their desktop counterparts. Second,
when both the desktop and mobile managers share a design par-
adigm, the implementation is usually identical, with little to no
customization made to address mobile devices’ unique constraints
and abilities. We hypothesize that these two issues help explain
the poor usability of mobile password managers found by Seilew-
Hwang et al. [29]. Future research is needed to investigate how
existing paradigms can be better tailored to support mobile apps or
whether new, mobile-specific paradigms are needed.
4 COGNITIVE WALKTHROUGHS
As part of our systematization of password manager use cases and
design paradigms, we conduct an initial assessment of the strengths
and weaknesses of the identified paradigms. We do this using by
conducting cognitive walkthroughs [14], a form of expert review,
for eight popular desktop managers: browser-based (Chrome, Edge,
Firefox, Safari), extension-based (1PasswordX, Dashlane, LastPass),
and app-based (KeePass). We evaluate these managers across 17
different tasks (a total of 8 ∗ 17 = 136 evaluations), covering all the
essential and recommended use cases identified in our systematiza-
tion. Full descriptions of each task and its associated use cases are
given in Appendix A.
We choose to investigate desktop managers as there have not
been prior usability studies of the user interface for desktop man-
agers. We decided to conduct cognitive walkthroughs for two rea-
sons. First, cognitive walkthroughs are highly effective at identi-
fying low-hanging usability issues [34]. Second, cognitive walk-
throughs allow for exploring a much larger collection of tools and
use cases than would be feasible in most user studies—for example,
we evaluated eight managers across 17 tasks, far exceeding the
number of systems and tasks tested in most user studies.
In the remainder of this section, we detail our methodology,
share observations and lessons learned from the walkthroughs, and
identify topics needing further research.
4.1 Methodology
Cognitive walkthroughs are a form of expert review in which a
usability expert completes a given task with an assigned tool. While
completing this task, the evaluator will role-play, responding to
the tool’s interface and taking actions only as the role-played user
would [14]. As they complete the tasks, the evaluators apply a
think-aloud protocol, describing what they see, identifying how
they discover features, and describing any confusion they encounter
as they complete the task. Finally, the expert evaluators would be
debriefed periodically during this process by the entire research
team, allowing for further probing of their experiences.
In this work, two members of our research team (the first two
authors) conducted these reviews. Both had received training on
conducting cognitive walkthroughs, and all walkthroughs were
reviewed by the research team, ensuring their quality. While com-
pleting tasks, the evaluators were instructed to role-play mildly