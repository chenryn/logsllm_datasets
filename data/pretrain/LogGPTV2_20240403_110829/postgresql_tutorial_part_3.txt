Bolt | 15
Arithmetic operations may be used in the target list and in the WHERE clause. For example if
we want to know how much it would cost if we take two pieces of a part we could use the
following query:
SELECT PNAME, PRICE * 2 AS DOUBLE
FROM PART
WHERE PRICE * 2  1;
and get:
SNO | SNAME | COUNT
-----+-------+-------
1 | Smith | 2
3 | Adams | 2
4 | Blake | 3
Subqueries
In the WHERE and HAVING clauses the use of subqueries (subselects) is allowed in every
place where a value is expected. In this case the value must be derived by evaluating the
subquery first. The usage of subqueries extends the expressive power of SQL.
Example 2-8. Subselect
If we want to know all parts having a greater price than the part named ’Screw’ we use the
query:
18
Chapter 2. SQL
SELECT *
FROM PART
WHERE PRICE > (SELECT PRICE FROM PART
WHERE PNAME=’Screw’);
The result is:
PNO | PNAME | PRICE
-----+---------+--------
3 | Bolt | 15
4 | Cam | 25
When we look at the above query we can see the keyword SELECT two times. The first one at
the beginning of the query - we will refer to it as outer SELECT - and the one in the WHERE
clause which begins a nested query - we will refer to it as inner SELECT. For every tuple of the
outer SELECT the inner SELECT has to be evaluated. After every evaluation we know the
price of the tuple named ’Screw’ and we can check if the price of the actual tuple is greater.
If we want to know all suppliers that do not sell any part (e.g. to be able to remove these
suppliers from the database) we use:
SELECT *
FROM SUPPLIER S
WHERE NOT EXISTS
(SELECT * FROM SELLS SE
WHERE SE.SNO = S.SNO);
In our example the result will be empty because every supplier sells at least one part. Note that
we use S.SNO from the outer SELECT within the WHERE clause of the inner SELECT. As
described above the subquery is evaluated for every tuple from the outer query i.e. the value for
S.SNO is always taken from the actual tuple of the outer SELECT.
Union, Intersect, Except
These operations calculate the union, intersect and set theoretic difference of the tuples derived
by two subqueries.
Example 2-9. Union, Intersect, Except
The following query is an example for UNION:
SELECT S.SNO, S.SNAME, S.CITY
FROM SUPPLIER S
WHERE S.SNAME = ’Jones’
UNION
SELECT S.SNO, S.SNAME, S.CITY
FROM SUPPLIER S
WHERE S.SNAME = ’Adams’;
gives the result:
SNO | SNAME | CITY
-----+-------+--------
2 | Jones | Paris
3 | Adams | Vienna
Here an example for INTERSECT:
SELECT S.SNO, S.SNAME, S.CITY
19
Chapter 2. SQL
FROM SUPPLIER S
WHERE S.SNO > 1
INTERSECT
SELECT S.SNO, S.SNAME, S.CITY
FROM SUPPLIER S
WHERE S.SNO > 2;
gives the result:
SNO | SNAME | CITY
-----+-------+--------
2 | Jones | Paris
The only tuple returned by both parts of the query is the one having
$SNO=2$.
Finally an example for EXCEPT:
SELECT S.SNO, S.SNAME, S.CITY
FROM SUPPLIER S
WHERE S.SNO > 1
EXCEPT
SELECT S.SNO, S.SNAME, S.CITY
FROM SUPPLIER S
WHERE S.SNO > 3;
gives the result:
SNO | SNAME | CITY
-----+-------+--------
2 | Jones | Paris
3 | Adams | Vienna
Data Definition
There is a set of commands used for data definition included in the SQL language.
Create Table
The most fundamental command for data definition is the one that creates a new relation (a
new table). The syntax of the CREATE TABLE command is:
CREATE TABLE table_name
(name_of_attr_1 type_of_attr_1
[, name_of_attr_2 type_of_attr_2
[, ...]]);
Example 2-10. Table Creation
To create the tables defined in The Suppliers and Parts Database the following SQL
statements are used:
CREATE TABLE SUPPLIER
(SNO INTEGER,
SNAME VARCHAR(20),
CITY VARCHAR(20));
CREATE TABLE PART
(PNO INTEGER,
20
Chapter 2. SQL
PNAME VARCHAR(20),
PRICE DECIMAL(4 , 2));
CREATE TABLE SELLS
(SNO INTEGER,
PNO INTEGER);
Data Types in SQL
The following is a list of some data types that are supported by SQL:
INTEGER: signed fullword binary integer (31 bits precision).
SMALLINT: signed halfword binary integer (15 bits precision).
DECIMAL (p[,q]): signed packed decimal number of p digits precision with assumed q of
them right to the decimal point. (15 ≥ p ≥ qq ≥ 0). If q is omitted it is assumed to be 0.
FLOAT: signed doubleword floating point number.
CHAR(n): fixed length character string of length n.
VARCHAR(n): varying length character string of maximum length n.
Create Index
Indices are used to speed up access to a relation. If a relation R has an index on attribute A
then we can retrieve all tuples t having t(A) = a in time roughly proportional to the number of
such tuples t rather than in time proportional to the size of R.
To create an index in SQL the CREATE INDEX command is used. The syntax is:
CREATE INDEX index_name
ON table_name ( name_of_attribute );
Example 2-11. Create Index
To create an index named I on attribute SNAME of relation SUPPLIER we use the following
statement:
CREATE INDEX I
ON SUPPLIER (SNAME);
The created index is maintained automatically, i.e. whenever a new tuple is inserted into the
relation SUPPLIER the index I is adapted. Note that the only changes a user can percept when
an index is present are an increased speed.
21
Chapter 2. SQL
Create View
A view may be regarded as a virtual table, i.e. a table that does not physically exist in the
database but looks to the user as if it does. By contrast, when we talk of a base table there is
really a physically stored counterpart of each row of the table somewhere in the physical
storage.
Views do not have their own, physically separate, distinguishable stored data. Instead, the
system stores the definition of the view (i.e. the rules about how to access physically stored
base tables in order to materialize the view) somewhere in the system catalogs (see System
Catalogs). For a discussion on different techniques to implement views refer to SIM98.
In SQL the CREATE VIEW command is used to define a view. The syntax is:
CREATE VIEW view_name
AS select_stmt
where select_stmt is a valid select statement as defined in Select. Note that select_stmt is not
executed when the view is created. It is just stored in the system catalogs and is executed
whenever a query against the view is made.
Let the following view definition be given (we use the tables from The Suppliers and Parts
Database again):
CREATE VIEW London_Suppliers
AS SELECT S.SNAME, P.PNAME
FROM SUPPLIER S, PART P, SELLS SE
WHERE S.SNO = SE.SNO AND
P.PNO = SE.PNO AND
S.CITY = ’London’;
Now we can use this virtual relation London_Suppliers as if it were another base table:
SELECT *
FROM London_Suppliers
WHERE P.PNAME = ’Screw’;
which will return the following table:
SNAME | PNAME
-------+-------
Smith | Screw
To calculate this result the database system has to do a hidden access to the base tables
SUPPLIER, SELLS and PART first. It does so by executing the query given in the view
definition against those base tables. After that the additional qualifications (given in the query
against the view) can be applied to obtain the resulting table.
Drop Table, Drop Index, Drop View
To destroy a table (including all tuples stored in that table) the DROP TABLE command is
used:
22
Chapter 2. SQL
DROP TABLE table_name;
To destroy the SUPPLIER table use the following statement:
DROP TABLE SUPPLIER;
The DROP INDEX command is used to destroy an index:
DROP INDEX index_name;
Finally to destroy a given view use the command DROP VIEW:
DROP VIEW view_name;
Data Manipulation
Insert Into
Once a table is created (see Create Table), it can be filled with tuples using the command
INSERT INTO. The syntax is:
INSERT INTO table_name (name_of_attr_1
[, name_of_attr_2 [,...]])
VALUES (val_attr_1
[, val_attr_2 [, ...]]);
To insert the first tuple into the relation SUPPLIER (from The Suppliers and Parts Database)
we use the following statement:
INSERT INTO SUPPLIER (SNO, SNAME, CITY)
VALUES (1, ’Smith’, ’London’);
To insert the first tuple into the relation SELLS we use: