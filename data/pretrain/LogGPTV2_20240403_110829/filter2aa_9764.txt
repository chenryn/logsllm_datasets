# Super Safe RSA 3
Cryptography, 600 points
## Description:
> The more primes, the safer.. right.?.?
## Solution:
Connecting to the remote service provided an output similar to the following:
```console
root@kali:/media/sf_CTFs/pico/Super_Safe_RSA_3# nc 2018shell3.picoctf.com 54915
c: 9682363545060380125209385313800202477319292745861123848863447818863421199675467967874225949345474585787400202680573623360502692183003815269122363057528461983050101442972540257479050146757910242797127562964020429331869752245461847281474668914820864170968567941037656141925374739740125238046027120302492188
n: 12982193461064785564613897608601540375018705560673430204413987884084649884974390381362450942941674493912645262856007141314803974278154472727819101331274600806427297151180361639734198072534533933342745875141781060149241403196411999943781657274439570424519078973220878896243522068777913138960919397850924197
e: 65537
```
It turns out the RSA isn't limited to two primes - n can be created from multiple primes. Everything else still applies, so if we can factor n, we can decipher c.
A factorization calculator can be found [here](https://www.alpertron.com.ar/ECM.HTM).
The code:
```
from pwn import *
import gmpy2
c = 10723092190573436893427535262518486816947413193998326132602353454677155152091094243288024551798795461356346571827856551833484526645487453517454321746447984656584723667889087939402798003103699397614649966130894865310266901426370592157247414921370627680407214153361942287238152247460236614277782710397061777
e = 65537
n = 11519675925519997486312788231168483713469024664484158615186408445458138186835881204486741332292230873093188311473262072362029343865926702714057039101465235697127425035798231523524737580329054958128472227106432645819529651435075367173038962800369495530398468141608436810399146216769200598968770425254478111
#https://www.alpertron.com.ar/ECM.HTM
r = [2258669983,2426036101,2435230003,2457368657,2492126459,2504786551,2580640079,2633613641,2668125919,2689910999,2819565949,2846315341,2903152657,2962793963,3098061409,3456744829,3507271289,3514264627,3539275907,3577746091,3584129251,3586647227,3616554797,3625117157,3708264397,3742944367,3848405887,3865852561,3920390431,4037867321,4251606701,4269328807]
assert(n == reduce(lambda x, y: x * y, r))
phi_n = 1
for i in range(len(r)):
    phi_n *= (r[i] - 1)
log.info("phi_n: {}".format(phi_n))
d = gmpy2.invert(e, phi_n)
log.info("d: {}".format(d))
plaintext = pow(c, d, n)
log.info("plaintext: {}".format(str(plaintext)))
plaintext_decoded = (format(plaintext, 'x')).decode("hex")
log.success("Flag: {}".format(plaintext_decoded))
```
The output:
```console
root@kali:/media/sf_CTFs/pico/Super_Safe_RSA_3# python solve.py
[*] phi_n: 11519675807371388412779370353252354540872214039075924642052999278352576874198856150975568189970984919588781232664216651134500772277220152766792880905433056987343025335020118402239958301797644896345686712976607096745780996366812889200022748770349764404994516412356048943521752606885036425216000000000000000
[*] d: 6906145573822754333248416332442513540608652968480294782890006281130853493252255339301922184170163380848119606197675698049567959210399923740898916501738938447483215060392456963608464862255359079259380669741533680686356338362330872891174356457986209980197972898385174222057305948159254789611008132810473473
[*] plaintext: 13016382529449106065908111207362094589157720258852086801305724660026057919050109
[+] Flag: picoCTF{p_&_q_n0_r_$_t!!_3543941}
```
The flag: picoCTF{p_&_q_n0_r_$_t!!_3543941}