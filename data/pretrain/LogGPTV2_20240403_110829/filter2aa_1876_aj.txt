  0xB5, 0xC2, 0xBC, 0xC3, 0x88, 0xC2, 0x9A, 0x38, 0xC3, 0xB0,
  0xC3, 0xA2, 0xC2, 0xB8, 0xC3, 0xA9, 0x15, 0xC3, 0x92, 0x50
]
p = remote('34.92.37.22', 10001)
p.recv()
pay = ''.join(map(chr, data))
print pay
p.send(pay)
p.interactive()
['\x00']
['\x01', '\x02', '\x03', '\x04', '\x05', '\x06', '\x07', '\x08', '\t', '\x0b', '\x0c', '\r', '\x0e', 
'\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17', '\x18', '\x19', '\x1a', '\x1b', 
'\x1c', '\x1d', '\x1e', '\x1f', ' ', '!', '"', '#', '$', '%', '&', "'", '(', ')', '+', ',', '-', '.', '/', 
':', ';', '', '?', '@', 'A', 'B', 'D', 'E', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 
'Q', 'R', 'S', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\', ']', '^', '`', '|', '~', '\x7f', '\x80', '\x81', 
'\x82', '\x83', '\x84', '\x85', '\x86', '\x87', '\x88', '\x89', '\x8a', '\x8b', '\x8c', '\x8d', '\x8e', 
'\x8f', '\x90', '\x91', '\x92', '\x93', '\x94', '\x95', '\x96', '\x97', '\x98', '\x99', '\x9a', '\x9b', 
'\x9c', '\x9d', '\x9e', '\x9f', '\xa0', '\xa1', '\xa2', '\xa3', '\xa4', '\xa5', '\xa6', '\xa7', '\xa8', 
'\xa9', '\xaa', '\xab', '\xac', '\xad', '\xae', '\xaf', '\xb0', '\xb1', '\xb2', '\xb3', '\xb4', '\xb5', 
'\xb6', '\xb7', '\xb8', '\xb9', '\xba', '\xbb', '\xbc', '\xbd', '\xbe', '\xbf', '\xc0', '\xc1', '\xc2', 
'\xc3', '\xc4', '\xc5', '\xc6', '\xc7', '\xc8', '\xc9', '\xca', '\xcb', '\xcc', '\xcd', '\xce', '\xcf', 
'\xd0', '\xd1', '\xd2', '\xd3', '\xd4', '\xd5', '\xd6', '\xd7', '\xd8', '\xd9', '\xda', '\xdb', '\xdc', 
'\xdd', '\xde', '\xdf', '\xe0', '\xe1', '\xe2', '\xe3', '\xe4', '\xe5', '\xe6', '\xe7', '\xe8', '\xe9', 
'\xea', '\xeb', '\xec', '\xed', '\xee', '\xef', '\xf0', '\xf1', '\xf2', '\xf3', '\xf4', '\xf5', '\xf6', 
'\xf7', '\xf8', '\xf9', '\xfa', '\xfb', '\xfc', '\xfd', '\xfe', '\xff']
https://www.cs.uic.edu/~spopuri/cparser.html
['\n']
['*']
['0']
['1']
['2']
['3']
['4']
['5']
['6']
['7']
['8']
['9']
['C']
['F']
['T']
['_']
['a']
['b']
['c']
['d']
['e']
['f']
['g']
['h']
['i']
['j']
['k']
['l']
['m']
['n']
['o']
['p']
['q']
['r']
['s']
['t']
['u']
['v']
['w']
['x']
['y']
['z']
['{']
['}']
46 -> ? ?
47 -> ?
49 -> eps
48 -> ? ? ? ?
50 -> ? ? ? ? ?
51 -> ?
53 -> eps
52 -> ? ? ?
54 -> eps
54 -> ? ?
56 -> eps
55 -> ? ? ?
57 -> ?
57 -> ? ?
58 -> ?
58 -> ?
58 -> ?
0-9a-zbuﬀer
_}buﬀerresultbuﬀer
AES-128-CBC1600
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
58 -> ?
flag -> [*CTF] [{] expr [}]
expr -> expr [_] buff | buff
buff -> buff [a-z0-9] | eps 
data = [
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0x46, 0x14, 0xF8,
  0x2A, 0x40, 0xCF, 0x50, 0x31, 0xD3, 0xFE, 0x04, 0x8C, 0x06,
  0x12, 0x12, 0x23, 0xFA, 0xC7, 0x26, 0xE8, 0x61, 0xD9, 0xC3,
  0xA9, 0x3C, 0x45, 0x70, 0x1A, 0xC7, 0xF0, 0x3D, 0xDF, 0xBE,
  0xBC, 0x16, 0xAB, 0x6E, 0x37, 0xAC, 0x14, 0x8B, 0x9C, 0x94,
  0xF7, 0x5D, 0x62, 0x78, 0xFC, 0x16, 0x98, 0x1D, 0xB2, 0x31,
  0xD3, 0x5A, 0xDC, 0x3A, 0x60, 0x86, 0x9A, 0xCA, 0x7B, 0xA3,
  0xB5, 0xD5, 0xF1, 0xB2, 0xD9, 0xFF, 0xD2, 0x09, 0xD4, 0x77,
  0xD7, 0x3D, 0xC0, 0x56, 0x19, 0x02, 0xB6, 0x9B, 0x42, 0x6C,
  0xE8, 0xA2, 0x77, 0xE3, 0x99, 0xAC, 0x32, 0x40, 0x91, 0xA9,
  0x2A, 0x86, 0xF3, 0xFA, 0x47, 0x3C, 0xC3, 0x5C, 0x41, 0x9B,
  0xE8, 0x05, 0x07, 0xD0, 0xD4, 0x30, 0x5A, 0x9E, 0x8D, 0x52,
  0x9B, 0xA3, 0xFB, 0xAD, 0xB6, 0x44, 0x3F, 0x72, 0x83, 0x9C,
  0x22, 0x77, 0xFE, 0x48, 0xFE, 0x86, 0x84, 0x12, 0x00, 0x4E,
  0xED, 0xFF, 0xAC, 0x44, 0x19, 0x23, 0x84, 0x1F, 0x12, 0xCA
]
...
Obfuscating Macros II
Status: Completed Tags: Reverse
sub_401006
1024
charsets = 'abcdefghijklmnopqrstuvwxyz0123456789'
box = [
  0x82, 0x05, 0x86, 0x8A, 0x0B, 0x11, 0x96, 0x1D, 0x27, 0xA9,
  0x2B, 0xB1, 0xF3, 0x5E, 0x37, 0x38, 0xC2, 0x47, 0x4E, 0x4F,
  0xD6, 0x58, 0xDE, 0xE2, 0xE5, 0xE6, 0x67, 0x6B, 0xEC, 0xED,
  0x6F, 0xF2, 0x73, 0xF5, 0x77, 0x7F
]
boxx = ''.join(map(chr, box))
import string
t = string.maketrans(boxx, charsets)
cipher = ''.join(map(chr, data))[16:]
from Crypto.Cipher import AES
key = '2b7e151628aed2a6abf7158809cf4f3c'.decode('hex')
iv = '\x00' * 16
aes = AES.new(key, AES.MODE_CBC, iv)
plain = aes.decrypt(cipher).translate(t)
for i in xrange(0, len(plain), 16):
    print plain[i:i+16]
(v11+1)
input.len == 16bytes
a = 8bytes (v10)
b = 8bytes (v9)
========LOOP_1024=========
v11 = ~a
 (a & 1)
v11 = b
v11 ^= (~a)
b = v11
a = ~a
v11 = a & 0x8000000000000000
v5 = v11
a *= 2
v11 = b & 0x8000000000000000
if (v11) ( true  +1)
a |= 1 (2a+=1)
b *= 2
if (v5) ( true  +1)
b |= 1
v11 = b
v11 += a
v23 = v11
tmp = b
b = v23
a = tmp
v11 = a & 0x8000000000000000
v5 = v11
a *= 2
v11 = b & 0x8000000000000000
102410
python161024a == 0xA1E8895EB916B732 && b
== 0x50A2DCC51ED6C4A2
 (v11) ( true  +1)
a |= 1 (2a+=1)
b *= 2
v11 = v5
 (v5) ( true  +1)
b |= 1
=================
import struct
def not_num(a):
  return (~a & 0xffffffffffffffff)
def do_overflow_qword(a):
  return (a & 0xffffffffffffffff)
flag = "flag{abcdef0123}"
a, b = struct.unpack("qq", flag)
print "a: " + hex(a)
print "b: " + hex(b)
print "========================="
for i in range(1024):
    if not (a & 1):
        b ^= not_num(a)
    else:
        b ^= a
    a = not_num(a)
    v5 = a & 0x8000000000000000
    a *= 2
    a = do_overflow_qword(a)
    if b & 0x8000000000000000:
        a |= 1
    b *= 2
    b = do_overflow_qword(b)
    if v5:
        b |= 1
    tmp = b
    b += a
    b = do_overflow_qword(b)
    a = tmp
    v5 = a & 0x8000000000000000
    a *= 2
    a = do_overflow_qword(a)
    if b & 0x8000000000000000:
        a |= 1
    b *= 2
    b = do_overflow_qword(b)
    if v5:
        b |= 1
    print "a: " + hex(a)
    print "b: " + hex(b)
    print "========================="
#include 
#include 
using namespace std;
#define ll unsigned long long 
ll a =  0xa1e8895eb916b732uLL, b = 0x50a2dcc51ed6c4a2uLL;
Crypto
babyprng
Status: Completed Tags: Crypto
int main() {
  for (int i = 0; i < 1024; i++) {
    int flaga = 0, flagb = 0;
    if (b & 1) {
      flaga = 1;
    } else {
      flaga = 0;
    }
    if (a & 1) {
      flagb = 1;    
    } else {
      flagb = 0;
    }
    if (flagb) {
      b = b / 2 + 0x8000000000000000;
    } else {
      b = b / 2;
    }
    if (flaga) {
      a = a / 2 + 0x8000000000000000;
    } else {
      a = a / 2;
    }
    //printf("%llx %llx\n", a, b);
    ll tmp = a;
    a = b - a;
    b = tmp;
    if (b & 1) {
      flaga = 1;
    } else {
      flaga = 0;
    }
    if (a & 1) {
      flagb = 1;    
    } else {
      flagb = 0;
    }