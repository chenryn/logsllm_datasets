something like this: 
lea eax, [ebx+0FCh] 
push [ebp + arg_0] 
push eax 
call strcpy 
Suppose you're examining a crash because [ebx+124h] is supposed to be a pointer, 
but instead it's 0x41414141 because you have somehow corrupted the structure. 
Looking at the preceding code, you can see that [ebx+0FCh] is apparently a string 
because it's passed as the destination argument to strcpy(). You could then trace 
back arg_0 and see whether you controlled it and whether it's indeed the result of the 
structure corruption. 
Application-Specific Candidate Points 
After you've spent some time with a codebase, you'll start to notice recurring 
vulnerable patterns and programmatic idioms. Sometimes they are vulnerable utility 
functions, such as a database wrapper or a string-handling routine. With the CP6 
strategy (see Table 4-14), you focus on the similarities in these patterns and develop 
simple methods of searching the code to generate candidate point lists. Usually this 
strategy involves nothing more than creating a simple script of regular expression 
tests in your language of choice. Although you might get sidetracked in the Perl 
versus Python versus Ruby versus flavor-of-the-month debate. It's worth pointing 
out that the cool kids are using Haskell. 
Table 4-14. CP6: Application-Specific Candidate Points 
Start point 
Potential vulnerabilities 
End point 
Any form of user-malleable input 
Tracing method 
Backward, control-flow sensitive, data-flow sensitive 
Goal 
Identify potential vulnerabilities based on patterns observed in 
the review up to this point. 
Difficulty 
Easy to moderate 
Speed 
Fast 
Comprehension 
impact 
Very low 
Abstraction 
Basic implementation through implementation logic 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
142 
Table 4-14. CP6: Application-Specific Candidate Points 
Start point 
Potential vulnerabilities 
Strengths 
Good balance of speed and depth of coverage 
Isn't too mentally taxing 
Hard to go off track 
Weaknesses 
Requires a thorough understanding of the codebase 
Comprehension impact is almost nonexistent 
Biases the reviewer toward confirming only a limited set of 
potential issues 
Design Generalization Strategies 
Design generalization (DG) strategies focus on identifying logic and design 
vulnerabilities by reviewing the implementation and inferring higher-level design 
abstractions. After you have this understanding, you can use design generalization 
strategies to identify areas of overlapping trust where trust boundaries are required. 
This approach is a variation on generalization in software design, in which 
higher-level interfaces and components are developed by generalizing lower-level 
implementations. Generalization strategies are used primarily as a follow-up 
component to other strategies because they require a good understanding of the 
application's implementation and function. 
Model the System 
Chapter 2(? [????.]) discussed threat modeling as a way to develop an abstraction for 
a system by the process of factoring (top-down). However, there's no reason you 
can't run the threat model in reverse and model the system by generalizing from the 
implementation (bottom-up), and then factoring back down into components you 
haven't seen yet. This DG1 strategy (see Table 4-15) can be extremely thorough and 
is highly effective when you want to establish the most detailed knowledge of the 
system. Unfortunately, it's also slow, as it amounts to reverse-engineering the 
complete design from the implementation. However, it's the best method for 
identifying design and architectural vulnerabilities from an existing implementation. 
Table 4-15. DG1: Model the System 
Start point 
Beginning of module under review 
End point 
Security vulnerabilities (open-ended) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
143 
Table 4-15. DG1: Model the System 
Start point 
Beginning of module under review 
Tracing method 
Varies 
Goal 
Identify more abstract (logic and higher-level) vulnerabilities by 
modeling the actual behavior of the system. 
Difficulty 
Hard 
Speed 
Slow 
Comprehension 
impact 
Very high 
Abstraction 
Implementation logic through architectural 
Strengths 
Provides the most effective method for identifying logic and 
design vulnerabilities 
Can identify some types of operational vulnerabilities 
Provides detailed knowledge of the application's design and 
architecture 
Weaknesses 
Requires a strong understanding of the system implementation 
Easy to go off track 
Requires focus and experience 
Can be time consuming 
Typically, you need to perform detailed modeling for only security-critical 
components, such as the application's security subsystem, input handling chain, or 
other major framework components used throughout the application. However, an 
application refactoring cycle does give you an opportunity to build a complete model 
that has been validated against the implementation. This cycle introduces overhead 
into the refactoring process, but it's far less obtrusive than modeling after the 
application is finished, and it can pay dividends in securing the application design 
during and after refactoring. 
Hypothesis Testing 
The DG2 strategy (see Table 4-16) is simply the process of attempting to determine 
the design of smaller programmatic elements by making a hypothesis and testing it 
through observations of the implementation. This strategy is especially necessary for 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
144 
any medium to large applications because they are too large to wrap your brain 
around at one time. Instead, you make a guess on what abstraction the 
implementation reflects, and then try to analyze the implementation in the context of 
that assumption. If you're right, you've successfully reverse-engineered an element 
of the design from the implementation. If you're wrong, your efforts should give you 
enough context to make a more educated guess of the correct purpose. 
Table 4-16. DG2: Hypothesis Testing 
Start point 
Beginning of code elements under review 
End point 
Security vulnerabilities (open ended) 
Tracing method 
Varies 
Goal 
Identify more abstract (logic and higher level) vulnerabilities by 
modeling the actual behavior of the system. 
Difficulty 
Hard 
Speed 
Medium 
Comprehension 
impact 
Very high 
Abstraction 
Implementation logic through architectural 
Strengths 
Is a faster method for identifying issues in the design of 
programming elements 
Helps build a good understanding of design aspects 
Is well suited to identifying more complex and subtle issues 
Weaknesses 
Easy to go off track 
Poor assumptions can derail later elements of the review 
Can be mentally taxing 
Deriving Purpose and Function 
The DG3 strategy outlined in Table 4-17 refers to the process of directly identifying 
the abstraction an implementation represents. One of the best ways to perform this 
strategy is by picking key programmatic elements and summarizing them. For 
example, try to identify code elements that appear to enforce a trust boundary. Then 
attempt to derive the associated trust levels, privileges, and basic structure from the 
implementation. This method can require copious note taking and some diagramming, 
and you might have a few missteps; however, at the end, you should have a good 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
145 
understanding of the programmatic idioms responsible for the component of the trust 
model you're assessing. From this understanding, you should be able to identify 
design and architectural issues in this part of the model. 
Table 4-17. DG3: Deriving Purpose and Function 
Start point 
Beginning of code elements under review 
End point 
Security vulnerabilities (open-ended) 
Trace method 
Varies 
Goal 
Identify more abstract (logic and higher level) vulnerabilities by 
modeling the actually behavior of the system. 
Difficulty 
Hard 
Speed 
Medium 
Comprehension 
impact 
Very high 
Abstraction 
Implementation logic through architectural 
Strengths 
Focuses on the areas that are known to be security relevant 
Helps build a more complete model of the application design and 
architecture 
Helps build a good understanding of individual design aspects 
Weaknesses 
Poor assumptions can derail later elements of the review 
Mentally taxing 
Design Conformity Check 
As you review an application's implementation, you'll see a number of commonly 
traveled code paths, and you should focus your design generalization efforts on these 
areas. You need to look closely at the "gray areas" in these componentsparts of the 
design where a correct action is undefined in a certain case, thus resulting in 
implementation-specific behavior. If you don't have access to a formal specification, 
you don't know whether a piece of code is implementing defined behavior; however, 
this might not matter. Essentially, your goal is to examine all the oddball cases when 
some operation is performed on potentially untrusted data. After you discover what 
the application is attempting to perform in a function or module, it becomes apparent 
when something incorrect is allowed to pass through. This DG4 strategy is 
summarized in Table 4-18. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
146 
Table 4-18. DG4: Design Conformity Check 
Start point 
Beginning of module under review 
End point 
End of module under review 
Tracing method 
Forward, control-flow sensitive, data-flow sensitive 
Goal 
Identify vulnerabilities in the implementation caused by 
deviations from the specification. 
Difficulty 
Moderate 
Speed 
Medium 
Comprehension 
impact 
Medium 
Abstraction 
Implementation logic through design 
Strengths 
Hard to go off track 
Provides a good balance of implementation and design 
understanding 
Much easier than deriving function without a design 
Weaknesses 
Misinterpretation of the design could result in overlooking 
vulnerabilities 
The quality of this strategy relies heavily on the original 
design's quality and accuracy 
This strategy is concerned with identifying vulnerabilities that result from 
discrepancies between a design specification and an implementation. The design 
specification is a guideline for what the application is supposed to do, but these 
specifications are rarely followed to the letter. Design specifications often fail to 
define behavior for every single case, resulting in "gray areas" that later developers 
must interpret. After you're familiar with the application's internals, you should 
identify variances between the specification and implementation. You need to identify 
the implications of that variance and how they could affect the application's security. 
Sometimes a specification policy breach has no security impact; however, many 
security vulnerabilities are the result of specification variances with unintended 
consequences. 
Note 
The term "policy breach," not "security breach," has been used in this discussion. In 
a policy breach, the application allows some condition to happen that shouldn't be 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
147 
allowed according to the specification. Policy breaches often equate to security 
breaches, but not always. 
Determining the consequences is a matter of considering how the newly discovered 
behavior might affect the rest of the system. This determination involves reading the 
code at each point affected by the policy breach and considering special cases the 
underlying platform might present. For example, imagine auditing a Web server that 
allows you to set arbitrary environment variables when receiving certain malformed 
headers. (Usually, each header is prefixed with HTTP_ and then set as an environment 
variable.) This behavior is most certainly a policy breach. To evaluate the 
consequences, you need to read other parts of the system to determine how 
attackers might be able to abuse this inconsistency with the specification. In this case, 
you would probably discover that you could set arbitrary values for security-relevant 
Common Gateway Interface (CGI) variables in a server-side application. You might 
be able to set the AUTH_USER variable to fool an application into thinking you had 
already authenticated or set REMOTE_HOST and REMOTE_ADDR to make it seem as though 
you're connecting locally and (as such) allowed to access sensitive data. On UNIX 
systems, your knowledge of the operating system might suggest that setting the 
special linker environment variables (such as LD_PRELOAD) could be useful and result in 
running arbitrary code. 
6.4.9 Code-Auditing Tactics 
Now that you understand the basic review strategies, some general guidelines for 
reviewing code are introduced. These guidelines aren't hard-and-fast rules; rather, 
they are invaluable techniques and tricks developed through years of experience. 
These techniques help to ensure thorough coverage and understanding of even the 
most subtle vulnerabilities. After all, it's easy to make mistakes and skip a line or two 
when assessing a massive codebase. Unfortunately, one or two lines can be the 
difference between safe code and vulnerable code. However, by carefully applying the 
strategies discussed earlier along with the following simple tactics, your effectiveness 
should improve quickly. 
Internal Flow Analysis 
In the previous discussion on code flow, the strategies addressed intermodule and 
interprocedural relationships. This code flow analysis is good for navigating between 
functions, but when analyzing a code fragment, you need to perform intraprocedural 
and intramodule analysis. These types of analysis require being sensitive to both 
control flow and data flow within a function, regardless of how you handle tracing 
outside the function. To see how this analysis works, walk through a fairly simple code 
path in the following C function: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
148 
char *ReadString(int fd, int maxlength) 
{ 
    int length; 
    char *data; 
    if(read_integer(fd, &length) < 0) 
        return NULL; 
    data = (char *)malloc(length + 1); 
    if(data == NULL) 
        return NULL; 
    if(read(fd, data, length) < 0) 
    { 
        free(data); 
        return NULL; 
    } 
    data[length] = '\0'; 
    return data; 
} 
This function simply reads a variable-length string from network input and returns a 
pointer to it. It does this by reading an integer value representing the length, and 
then reading a number of bytes equal to that value. However, even this simple 
function has several potential code paths to examine. First, say read_integer() fails. 
The code that runs would then look like this: 
read_integer(fd, &length); 
return NULL; 
Not much happens here, so look at where the call to read() fails instead: 
read_integer(fd, &length); 
data = malloc(length + 1); 
read(fd, data, length); 
free(data); 
return NULL; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
149 