title:AIM-SDN: Attacking Information Mismanagement in SDN-datastores
author:Vaibhav Hemant Dixit and
Adam Doup&apos;e and
Yan Shoshitaishvili and
Ziming Zhao and
Gail-Joon Ahn
AIM-SDN: Attacking Information Mismanagement in
SDN-datastores
Vaibhav Hemant Dixit
Arizona State University
PI:EMAIL
Adam Doupé
Arizona State University
PI:EMAIL
Yan Shoshitaishvili
Arizona State University
PI:EMAIL
Ziming Zhao
Arizona State University
PI:EMAIL
Arizona State University and Samsung Research
Gail-Joon Ahn
PI:EMAIL
ABSTRACT
Network Management is a critical process for an enterprise to con-
figure and monitor the network devices using cost effective methods.
It is imperative for it to be robust and free from adversarial or ac-
cidental security flaws. With the advent of cloud computing and
increasing demands for centralized network control, conventional
management protocols like SNMP appear inadequate and newer
techniques like NMDA and NETCONF have been invented. How-
ever, unlike SNMP which underwent improvements concentrating
on security, the new data management and storage techniques have
not been scrutinized for the inherent security flaws.
In this paper, we identify several vulnerabilities in the widely
used critical infrastructures which leverage the Network Manage-
ment Datastore Architecture design (NMDA). Software Defined
Networking (SDN), a proponent of NMDA, heavily relies on its data-
stores to program and manage the network. We base our research
on the security challenges put forth by the existing datastore’s de-
sign as implemented by the SDN controllers. The vulnerabilities
identified in this work have a direct impact on the controllers like
OpenDayLight, Open Network Operating System and their pro-
prietary implementations (by CISCO, Ericsson, RedHat, Brocade,
Juniper, etc). Using our threat detection methodology, we demon-
strate how the NMDA-based implementations are vulnerable to
attacks which compromise availability, integrity, and confidentiality
of the network. We finally propose defense measures to address the
security threats in the existing design and discuss the challenges
faced while employing these countermeasures.
1 INTRODUCTION
We live our lives on the Internet. Our entertainment, financial, so-
cial, and intimate interactions are increasingly happening online,
manifesting as bits racing from network to network across the
world. Though, most of the time, the technical details of the config-
uration of these networks are “out of sight and out of mind“, the
networks must be configured and maintained. Traditionally, this
has been a painstaking process involving manual configuration of
individual devices across the network topology. Recently, however,
this has begun to be revolutionized by Software Defined Networking
(SDN).
SDN is an innovative architectural approach to modern computer
networks where the control features of the infrastructure are ab-
stracted from the network devices themselves and placed into a cen-
tralized location. This abstraction of the network allows for novel
1
approaches to network management, including third-party applica-
tions, dynamic and adaptive configuration, and cloud-hosting. Many
organizations are realizing the benefit of SDN: Google’s SDN-based
network increased network utilization in their WAN to 100% [14].
However, this applicability comes with some risk: as SDN tech-
nology is used to configure, monitor, and manage computer net-
works, their security is of vital importance. Attacks against an
SDN system can bypass access controls, take down the network,
reroute traffic, or even man-in-the-middle communication. There-
fore, the security of an SDN system is of the utmost importance.
Naturally, security researchers have investigated the security of
these networks, identifying issues stemming from the malicious
applications [29], vulnerable services [13], network configuration
flooding [34, 36], link saturation [16], and so on.
Through our research into SDN security, we observed a cen-
tral theme shared by many of these vulnerabilities. Specifically,
Software Defined Networking suffers from a semantic gap problem
in the way that data is shared between the centralized controller
and the distributed network devices. This semantic gap leads to
differences in the treatment of data by different subcomponents
of a software defined network, potentially manifesting in security
problems.
More interestingly, a deeper look revealed that this semantic
gap problem is not, in fact, solely the fault of SDN’s design deci-
sions, but rather is inherent in the modern standard for network
management data storage architecture (RFC 8342)—the Network
Management Datastore Architecture (NMDA) design [31]—used
by SDN and many other network configuration systems. NMDA
specifies that management, configuration, and operational infor-
mation that is required and generated during the life cycle of SDN
controllers are stored in entities termed datastores. Different states
and stages which appear during the control flow of an event govern
which datastores will be used to hold specific information and what
entities are responsible for processing it.
The NMDA RFC recognizes that its distributed architecture could
open the door to security concerns, but ultimately states in its Secu-
rity Considerations section that the design has “no security impact
on the network (Internet).” We showcase that this is not the case:
different datastore entities and SDN layers are governed by diverse
semantics, and the intercommunication between these entities can
lead to a breach of trust boundaries in two forms. First, although
continuous flow of information happens between SDN planes, there
is no proposed mechanism to verify the integrity and amount of
data that flows between the layers. Second, applications use and
Accepted submission #476 to ACM CCS 2018 (PREPRINT, NOT FINAL)
modify information in datastores without a sense of ownership,
which leads to conflicting responsibilities and loss of integrity of
this information.
In this paper, we investigated the security of SDN in the context
of this design issue, identified multiple security vulnerabilities stem-
ming from the semantic gap. These vulnerabilities impact widely-
used, enterprise-ready SDN controllers: OpenDayLight (ODL) [27],
Open Network Operating System (ONOS) [25], and their propri-
etary implementations by vendors such as Juniper, Ericsson, CISCO
and RedHat. We disclosed these vulnerabilities to the impacted
vendors as we discovered them, and the vendors confirmed the
identified vulnerabilities, resulting in three CVEs and a confirmed
security issue with no CVE yet assigned. Additionally, we worked
with the concerned engineering teams to design countermeasures
and assisted in identifying their implementation-level root causes
bugs to help fix the software itself, where possible. Because the is-
sues that we identified stemmed from design inadequacies, some of
them could not be fixed under the current SDN controller design
without incurring significant performance penalties. Inspired by
this, we identified a number of mitigations that can be applied to
the NMDA specification (and, subsequently, propagated into SDN
designs) to address this semantic gap.
The key contributions of this work can be summarized as:
(1) At the time of the writing, this work is the first security
analysis of the underlying design of SDN datastores, and we
determine that there exists a semantic gap in information
management between different layers of abstraction in SDN.
We examine the problems that stem from this semantic gap
and identify ways to leverage it to adversely impact decisions
of services running inside an SDN controller. Due to the
event-driven nature of SDN, this can have a cascading effect
on the security of the entire network.
(2) We present an adversarial model and threat detection method-
ology (using an approach assisted by black box fuzzing) to
selectively attack different datastores. With this, we iden-
tify vulnerabilities (with corresponding exploits) in widely
adopted SDN controllers.
(3) We propose potential countermeasures to prevent the ex-
ploits that lead to attacks such as denial of service, privilege
escalation, integrity breach, etc.
Although this work focuses on security issues in SDN (a major
application of the NMDA standard), the applications of the vulner-
able network management datastore design are not limited to SDN
controllers (as shown in Table 5). Therefore, vulnerabilities exposed
in this work can potentially be extrapolated to other NMDA-based
network management platforms.
2 BACKGROUND
In this section, we describe the fundamental concepts involved in
network management, SDN, and organization of the stored infor-
mation inside SDN controllers which result in the semantic gap
problem.
2
Figure 1: The constitution of SDN: Applications store net-
work configuration in controller, controller configures the
network and provides operational state back to applications
2.1 Network Management
A network is composed of multiple entities (switches, routers, links,
hosts, etc.) which can be individually managed and programmed
with forwarding logic. However, individually managing these en-
tities increases the degree of management for the entire network
which in turn increases its cost of maintenance. The Simple Network
Management Protocol (SNMP) marked the beginning of remote
monitoring and configuration of management devices. The first
draft of SNMP appeared in 1988 [4] has since undergone multiple
amendments. At its prime, however, SNMP started to appear re-
dundant and unsuitable to manage dynamically scalable networks.
SNMP automation scripts are costly and fragile to maintain (e.g.,
CISCO IOS scripts) as they lack API-based programming benefits
or support for transaction management.
The next generation of network management is represented
by model-driven architectures that work with dynamically scaling
systems such as cloud and data centers. These architectures provide
APIs and models to describe not just the network elements, but
also the policies, services, and transactions in a network. Some of
these new protocols, which are quickly gaining popularity, include
RESTCONF [3], NETCONF [6], and OpenFlow [22].
2.2 Rise in Adoption of NMDA with SDN
The Network Management Datastore Design (NMDA) [31] and the
Network Configuration Protocol (NETCONF) [6] were introduced
to address the challenges of portability of systems and mainte-
nance cost in SNMP respectively. However, they suffered from lack
of early adoption as their adoption required a massive change in
the architecture of existing systems and rewriting of automation
frameworks.
With the introduction of Software Defined Networking (SDN)
and Network Function Virtualization (NFV), the merits of central-
ized network programming were realized and adoption of API-
based protocols and modular design started to gain momentum.
A recent report on NMDA’s current state of affairs documents an
exponential growth in the number of NMDA-based models [1].
The SDN architecture obsoletes SNMP constructs and necessi-
tates the adoption of modeled datastores design. The configuration
Candidates (application/user)Management DataConfiguration DataOperational DataRPCRESTCLIOpenFlowAdminsQoSUser configRuleaddACLFlowStatisticsApp configTopologyAPPLICATIONSDBFilesDBFilesNetwork Elements (switches, links, hosts, etc.)RuledelRule modNodeStatisticsAAA AdministratorsRegistered usersUser privilegesAccepted submission #476 to ACM CCS 2018 (PREPRINT, NOT FINAL)
settings stored inside an SDN-controller are transferred to infras-
tructure (in SDN terminology, this is a movement of information to
different physical and logical planes) and it is possible to miss a part
or whole of the information during communication if a principled
design is not followed. Therefore, SDN leverages NMDA to define a
set of abstracted datastores which keep conceptual data in separate
places (datastores) as shown in Figure 1.
In addition to configuration and operational datastores of NMDA,
vendors that implement SDN controllers also add a third datastore
for storing the management information (such as network adminis-
trator credentials, authorized applications, etc.). Information cate-
gorization is explained in further details in Section 2.4.
2.3 SDN
In SDN, remote applications configure a centralized server (running
multiple services) to manage a physically separated networking
infrastructure. As shown in Figure 1, these entities are distributed in
different layers which are important to the semantic gap problem.
2.3.1 SDN Controller. An SDN controller is a collection of
services and sub-systems which manage, configure, and program
the entire network from a centralized location. SDN controllers are
required to maintain network states for management and distribu-
tion of information [24]. Numerous SDN controllers from different
vendors are available in the market.
In this paper, we primarily target the design issues in two of
the most common open source SDN controllers in the market:
OpenDayLight (ODL [23]) and Open Network Operating System
(ONOS [2]). These controllers are the base systems for many en-
terprise controllers from vendors such as Brocade, CISCO, and
Ericsson.
The information shared or retrieved from controller is of vital
interest to security research since these are the potential entry
points for an attacker to abuse and compromise the information.
2.3.2 Network, Services and Applications. To communicate
with network entities, the SDN controller uses different southbound
plugins (named after the typical SDN topology representation,
where the switches are below, or “south”, of the controller) which
include OpenFlow [22], NETCONF [6], BGP, etc. In this paper, we
primarily focus on security challenges involved when the network
is programmed using NMDA as the datastore management design,
and OpenFlow as a messaging channel between controller and
switches. The payload of the OpenFlow messages contains sensi-
tive information stored or retrieved from NMDA-defined datastores
and is used to configure and monitor the network. This approach
is taken by ODL and ONOS, and thus inherited by a significant seg-
ment of the SDN market. Clearly, the integrity of the information
stored inside datastores is critical for operation of an SDN network.
An SDN controller is an advanced Network Operating System [7,
23] that involves critical services like the learning switch, the flow
programmer, topology discovery, etc. Availability of these services
that provision information to the users and govern network opera-
tions is critical. For example, a service collects the configuration
from an administrator and stores it in a datastore. A notification
daemon notifies a flow programming service to pick the new con-
figuration, create OpenFlow messages, and send the messages to
3
Figure 2: Threat model.
the network devices for the final configuration. A failed or incor-
rect operation of any of these participating services will have an
immediate impact on the dependent network functions.
The applications that configure and monitor the network use
a separate northbound plugins (REST, RPC, CLI, etc.) to commu-
nicate with the services running in controller. Applications like
load balancers and software firewall can be located in logically or
physically different locations and do not establish a direct commu-
nication channel with network. Since controller relays an applica-
tion’s intent to the network, access control and confidentiality of
application’s information are functional obligations of controller.
2.4 SDN Information Organization
We categorize the data used by SDN controllers into three categories
based on the datastore used (as shown in Figure 1) as the specific
datastore used influences security requirements:
2.4.1 Control/Configuration Data. Services and applications
store the network configuration inside the NMDA-based configura-
tion datastore. The configuration stored include flow rules, access
control policies, quality of service criteria, etc. Notification services
run as a daemon inside the controller and periodically check for
updates to notify other registered services. Control information is
dynamically accessed and deployed and requires critical response
times, meaning minimal performance overhead.
2.4.2
Inventory/Operational Data. The centralized view of
the network (topology, runtime state, traffic statistics), obtained
using southbound plugins, is stored in the NMDA-based operational
datastore. The consistency and accuracy of this information are
critical as it reflects the state of the physical network. For instance,
if a firewall application consumes incorrect topology, its decision
to enforce access control is based on incorrect data, leading to
unauthorized communication in the network, thus breaking policy
control and potentially affecting the decisions of load balancing
applications in turn.
2.4.3 Management Data. An SDN controller requires all man-
agement level of information such as the list of SDN users, groups,
authorization levels, etc. This information is often configured as
APPAPPAPPApplications to datastoreDatastore-1Service-1Service-2Service-3Inter-service communicationNetwork to datastoreService to datastoreDatastore-2Accepted submission #476 to ACM CCS 2018 (PREPRINT, NOT FINAL)
part of the initialization process of the controller and is often di-
rectly stored in relational databases.
3 THREAT MODEL
In our threat model, we consider any communication channel that
an external entity can establish with the controller as a threat.
However, we assume that the channel to communicate with the
controller is secure—that is, we assume that the southbound channel
between a controller and the network is encrypted and protected
(using OpenFlow, SSL, TLS, etc.). Similarly, we assume the north-
bound communication is secure: connections between applications
and the controller (secured REST, HTTPs, etc).
In this paper we focus on the interactions between entities in
SDN which involve the datastores and the information stored within
them. As shown in Figure 2, we investigate three susceptible com-
munication channels during information exchange.
First, the interaction between SDN applications and the SDN
controller to install configurations for the resources operating in
the network. Second, the interaction between network devices and
the SDN controller for state management and monitoring. Lastly,
the coordination between SDN services, which is an essential aspect
of the SDN controller for operational purposes.
We have identified the following threats that are relevant to our
discussion:
Inconsistent Network State. Applications that run on the SDN
controller (and the controller software itself), particularly security-
critical applications such as firewalls, require a consistent view of
the network state. A consistent view of the network state means
that when an application adds a flow rule to the controller, that
flow rule is added to the network. While not every inconsistent
network state is a vulnerability, an inconsistent network state can
be a very serious security vulnerability (as we further demonstrate
in this paper). For instance, if a firewall application inserts a flow
rule to limit communication between two hosts, if that rule is not
actually implemented in the network (yet the firewall app thinks
that it is), then that is a vulnerable inconsistent network state.
Denial of Service. As the controller is the central “brains” of the
SDN network, it is also the central point of failure. If an adversary
is able to cause the controller to crash, then the entire network is
unusable. A controller crash can be caused by depleting computing,
memory, or storage limits.
Other commonly known threat models for SDN (such as those
presented in DELTA [19] and [12]) focus on layers surrounding
the controller that exploit the controller’s communication channels.
However, our model discusses exploiting the datastore design of
SDN controllers. Additionally, we consider that the vulnerabilities
which exist in the SDN-datastores can be exploited in both forced
and accidental situations.
In the case of an adversarial threat, an adversary can compromise
the security of the SDN controllers and the network by directly
exploiting the inherent weaknesses in its datastore design. In the