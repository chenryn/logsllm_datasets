You might be overruled, but you might also prevail. We're pretty reasonable
people. Mostly.
Another phenomenon of open-source projects (where anyone can comment on any
issue) is the dog-pile - your PR gets so many comments from so many people it
becomes hard to follow. In this situation, you can ask the primary reviewer
(assignee) whether they want you to fork a new PR to clear out all the comments.
You don't HAVE to fix every issue raised by every person who feels like
commenting, but you should answer reasonable comments with an explanation.
### Common Sense and Courtesy
No document can take the place of common sense and good taste. Use your best
judgment, while you put a bit of thought into how your work can be made easier
to review. If you do these things your PRs will get merged with less friction.
# [Split long PR into smaller ones](https://brewing-bits.com/blog/splitting-big-merges/)
- Start a new branch from where you want to merge.
- Start an interactive rebase on HEAD:
  ```bash
  git rebase -i HEAD
  ```
- Get the commits you want: Now comes the clever part, we are going to pick out
  all the commits we care about from 112-new-feature-branch using the following
  command:
  ```bash
  git log --oneline --reverse HEAD..112-new-feature-branch -- app/models/ spec/models
  ```
  Woah thats quite the line! Let’s dissect it first:
  - `git log` shows a log of what you have done in your project.
  - `--online` formats the output from a few lines (including author and time of
    commit), to just “\[sha-hash-of-commit\] \[description-of-commit\]”
  - `--reverse` reverses the log output chronologically (so oldest commit first,
    newest last).
  - `112-new-feature-branch..HEAD` shows the difference in commits from your
    current branch (HEAD) and the branch you are interested in
    112-new-feature-branch.
  - `-- app/models/ spec/models` Only show commits that changed files in
    app/models/ or spec/models So that we confine the changes to our model and
    its tests.
  Now if you are using vim (or vi or neovim) you can put the results of this
  command directly into your rebase-todo (which was opened when starting the
  rebase) using the :r command like so:
  ```vim
  :r !git log --oneline --reverse HEAD..112-new-feature-branch -- app/models/
  ```
- Review the commits you want: Now you have a chance to go though your todo once
  again. First you should remove the noop from above, since you actually do
  something now. Second you should check the diffs of the sha-hashes.
  Note: If you are using vim, you might already have the fugitive plug-in. If
  you haven’t changed the standard configuration, you can just move your cursor
  over the sha-hashes and press K (note that its capitalized) to see the diff of
  that commit.
  If you don’t have fugitive or don’t use vim, you can check the diff using git
  show SHA-HASH (for example `git show c4f74d0`), which shows the commits data.
  Now you can prepend and even rearrange the commits (Be careful rearranging or
  leaving out commits, you might have to fix conflicts later).
- Execute the rebase: Now you can save and exit the editor and git will try to
  execute the rebase. If you have conflicts you can fix them just like you do
  with merges and then continue using git rebase --continue.
  If you feel like something is going terribly wrong (for example you have a
  bunch of conflicts in just a few commits), you can abort the rebase using git
  rebase --abort and it will be like nothing ever happened.
# Git workflow
There are many ways of using git, one of the most popular is
[git flow](https://nvie.com/posts/a-successful-git-branching-model/), please
read [this article](https://nvie.com/posts/a-successful-git-branching-model/) to
understand it before going on.
Unless you are part of a big team that delivers software that needs to maintain
many versions, it's not worth using git flow as it's too complex and cumbersome.
Instead I suggest a variation of the Github workflow.
To carry out a reliable continuous delivery we must work to comply with the
following list of best practices:
- Everything must be in the git server: source code, tests, pipelines, scripts,
  templates and documentation.
- There is only a main branch (main) whose key is that everything is in this
  branch must be always stable and deployable into production at any time.
- New branches are created from main in order to develop new features that
  should be merged into main branch in short development cycles.
- It is highly recommended to do small commits to have more control over what is
  being done and to avoid discarding many lines of code if a rollback has to be
  done.
- A commit message policy should be set so that they are clear and conform the
  same pattern, for example [semantic versioning](semantic_versioning.md).
- `main` is blocked to reject direct pushes as well as to protect it of
  catastrophic deletion. Only pre-validated merge requests are accepted.
- When a feature is ready, we will open a merge request to merge changes into
  `main` branch.
- Use webhooks to automate the execution of tests and validation tasks in the CI
  server before/after adding changes in main.
- It is not needed to discard a merge request if any of the validation tasks
  failed. We check the code and when the changes are pushed, the CI server will
  relaunch the validation tasks.
- If all validation tasks pass, we will assign the merge request to two team
  developers to review the feature code.
- After both reviewers validate the code, the merge request can be accepted and
  the feature branch may be deleted.
- A clear versioning policy must be adopted for all generated artifacts.
- Each artifact must be generated once and be promoted to the different
  environments in different stages.
When a developer wants to add code to main should proceed as follows:
- Wait until the pipeline execution ends if it exists. If that process fails,
  then the developer must help to other team members to fix the issue before
  requesting a new merge request.
- Pull the changes from main and resolve the conflicts locally before pushing
  the code to the new feature branch.
- Run a local script that compiles and executes the tests before committing
  changes. This task can be done executing it manually by the developer or using
  a git precommit.
- Open a new merge request setting the feature branch as source branch and main
  as target branch.
- The CI server is notified of the new merge request and executes the pipeline
  which compiles the source code, executes the tests, deploys the artifact, etc.
- If there are errors in the previous step, the developer must fix the code and
  push it to the git server as soon as possible so that the CI server validate
  once again the merge request.
- If no errors, the CI server will mark the merge request as OK and the
  developer can assign it to two other team members to review the feature code.
- At this point, the developer can start with other task.
Considerations
The build process and the execution of the tests have to be pretty fast. It
should not exceed about 10 minutes.
Unit tests must be guarantee that they are completely unitary; they must be
executed without starting the context of the application, they must not access
to the DDBB, external systems, file system, etc.
## Naming conventions
The best idea is to use [Semantic Versioning](semantic_versioning.md) to define
the names of the branches, for example: `feat/add-command-line-support` or
`fix/correct-security-issue`, and also
[for the commit messages](semantic_versioning.md#commit-message-guidelines).
## Tag versioning policy
We will also adopt [semantic versioning](semantic_versioning.md) policy on
version management.
## Versioning control
When a branch is merged into main, the CI server launches a job which generates
a new artifact release as follow:
- The new version number is calculated taken into account the above
  considerations.
- Generates a new artifact named as appname-major.minor.patch.build
- Upload the previous artifact to the artifact repository manager.
- Create a git tag on the repository with the same version identifier,
  major.minor.patch.build
- Automatically deploy the artifact on the desired environment (dev, pre, etc)
## Hotfixing
Hotfix should be developed and fixed using one of the next cases, which has been
defined by preference order:
### Case 1
In this case, we have pushed new code to "main" branch since the last deploy on
production and we want to deploy the new code with the fix code.
We have to follow the next steps:
- Create a branch "Hotfix" from commit/tag of the last deploy
- Fix the bug in "hotfix" branch
- Merge the new branch to "main"
- Deploy main branch
### Case 2
In this case, we have pushed new code to "main" branch since the last deploy on
production but we don't want to deploy the new code with the fix code.
We have to follow the next steps:
- Create a branch "Hotfix" from commit/tag of the last deploy
- Fix the bug in "hotfix" branch
- Deploy main branch
- Merge the new branch to "main.
### Case 3
In this case, we have pushed new code to "main" branch since the last deploy on
production but we don't want to deploy the new code with the fix code.
We have to follow the next steps:
- Create a branch "Hotfix" from commit/tag of the last deploy
- Fix the bug in "hotfix" branch
- Deploy main branch
- Merge the new branch to "main.
# Git housekeeping
The best option is to:
```bash
git fetch --prune
git-sweep cleanup
```
To
[remove the local branches](https://github.com/arc90/git-sweep#deleting-local-branches)
you can:
```bash
cd myrepo
git remote add local $(pwd)
git-sweep cleanup --origin=local
```
The tool is [no longer maintained](https://github.com/arc90/git-sweep/issues/45) but there is still no good alternative. I've found some but are either not popular and/or not maintained:
- [gitsweeper](https://github.com/petems/gitsweeper)
- [git-removed-brances](https://github.com/nemisj/git-removed-branches)
- [git-sweep rewrite in go](https://github.com/gottwald/git-sweep)
- [jessfraz made a tool ghb0t](https://github.com/jessfraz/ghb0t): For github
# Submodules
Shamefully edited from the
[docs](https://git-scm.com/book/en/v2/Git-Tools-Submodules)
It often happens that while working on one project, you need to use another
project from within it. Perhaps it’s a library that a third party developed or
that you’re developing separately and using in multiple parent projects. A
common issue arises in these scenarios: you want to be able to treat the two
projects as separate yet still be able to use one from within the other.
Here’s an example. Suppose you’re developing a website and creating Atom feeds.
Instead of writing your own Atom-generating code, you decide to use a library.
You’re likely to have to either include this code from a shared library like a
CPAN install or Ruby gem, or copy the source code into your own project tree.
The issue with including the library is that it’s difficult to customize the
library in any way and often more difficult to deploy it, because you need to
make sure every client has that library available. The issue with copying the
code into your own project is that any custom changes you make are difficult to
merge when upstream changes become available.
Git addresses this issue using submodules. Submodules allow you to keep a Git
repository as a subdirectory of another Git repository. This lets you clone
another repository into your project and keep your commits separate.