the original Mirai source code.
SORA
AKU M A
Akiru
O W ARI
JOSHO
RBGLZ
MIRAI
MIORI
✓ ✓ ✓ ✓
✓ ✓ ✓ ✓
✓ ✓ ✓ ✓ ✓ ✓ ✓
✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓
✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓
✓ ✓ ✓ ✓ ✓ ✓
✓
✓
✓ ✓ ✓ ✓ ✓
✓ ✓ ✓ ✓ ✓ ✓
✓
Network
. authors1 /16
authors2 /16
authors3 /16
r
e
t
n
E
d 165.227/16
167.99/16
172.31/16
u
o
l
C
e 80.114/16
m
83.172/16
o
H
Table 6: Honeypot locations hit by variants of Mirai.
as 0.0.0.0/8, as well as selected large organizational networks
such as the Department of Defense and the US Postal Service.
In order to remain undetected, and in an effort to speed up the
scanning process by skipping known IP addresses that are not of
interest, adversaries can update the blacklist to include these IP
ranges. To quantify to which extent malware variants update and
utilize blacklisting, we distributed our honeypot agents in 8 different
/16 networks assigned to Internet Service Providers, public clouds
and one enterprise network. By comparing incoming probes across
the different ranges coming from the same source during the same
infection period, we can quantify which Mirai variants update and
customize their blacklists. Table 6 lists a selection of variants and
the ranges we have observed them at. We clearly see that the largest
malware MIRAI, MIORI or JOSHO show no discriminative behavior,
but that smaller variants such as OWARI selectively exclude the
enterprise range. Cloud providers are attractive across all variants,
even though one would not expect to find many IoT devices in these
networks. The ranges of DigitalOcean (165.227/16 and 169.99/16)
are for example not excluded by any single variant.
This blacklisting behavior indicates that adversaries are con-
scious about where to find victims or where their activities might
be monitored. Multiple variants perform evasion, and the ranges
they evade are similar, which could mean that all of these actors
either research where infrastructure is located, or that locations are
shared among actors. While the first reason is hard to verify, we
have found evidence of these lists being shared online [6], labeled
with the exact institutions or organizations these ranges belong to.
Additionally, a plethora of blocklists that can be readily put into
source code exist online, which block major ranges of the Internet.
Verifying Blocklists. We verify whether a variant blacklists
additional IP addresses in two ways: First, as Mirai’s target selection
merely skips generated IP addresses if the target appears on the list,
we can use this feature and our ability to efficiently bruteforce the
seed to selectively test which blacklist an actor is using. Whenever
IP addresses are skipped the state of the RNG is advanced, and we
can now test whether we can break the seed and reproduce the
sequence of probing packets given one of the lists we could locate
online. Second, we use netflows from a Tier-1 operator to verify
that the bots do indeed never probe the particular IP ranges.
We find that some of the botmasters go the extra mile of updating
this part of the Mirai source code. Akiru, OWARI, RBGLZ and SORA
have adopted customized blacklists, whereas MIORI, AKUMA and
JOSHO all run with the original Mirai algorithm. Especially larger
variants are not homogeneous, and there exist not just one version
that identifies itself as Mirai. 93% of all hosts infected by Mirai
are running the original source, but 7% have adapted lists. Even
within these, we find differences in behavior, with some of them
blacklisting some of the ranges we monitor but not others, while
some versions block more extensively.
7 LIMITATIONS
In order to be detected by us, infected devices had to connect to
either our telescope or one of our 7,500 honeypots. As discussed
above, Mirai and its variants employ a blacklist, and it is possible
that there are variants that do not connect to any of the eight /16
networks we were present in. To assess potential blind spots, the
Tier1 operator collected the set of IP addresses that showed brute
forcing behavior on telnet on a given day, which we compared
against the list of hosts that brute forced us that day. This revealed
2.9% additional IP addresses that were targeting host on the Internet
via telnet but not present in our analysis, thus our study provides
an almost complete picture of telnet brute forcing, and with Mirai
accounting for 87% also a solid assessment of the Mirai ecosystem.
For this study, we define a malware as Mirai-based given distinct
features in the packet generation process, such as a TCP sequence
number - IP match, as well as the fixed window size and IP ID
fixed for the session. While later botmasters copied the original
Mirai source code, they also introduced modifications. These were
functional in nature, to introduce new features or avoid certain
ranges. It is possible that some modified the packet generation
itself, for example randomizing every header value with a RNG
not related to the original one. These variants are not part of our
analysis as they would not stand out based on structural features.
Given that the netflows reveal only very few IP addresses going
after telnet but not in our honeypot dataset, indicates that such
deep modification would occur rarely if at all.
8 CONCLUSION
After the source code of the Mirai botnet was shared, many new
actors have sprung up to take advantage of misconfigured IoT
devices. In this work, we exploited a flaw in the design and entropy
of Mirai’s RNG, allowing us to track the exact infection time of
a host as well as track how infections are evolving. We observe
a continuous battle over the Internet of Things among different
strains. We find that these IoT botnets on their own are not self-
sustaining, and that the success of malware variants depends on
their installation size, but also in how well they seem adapted to
occupy specific niches of vulnerable devices.
[29] Constantinos Kolias, Georgios Kambourakis, Angelos Stavrou, and Jeffrey Voas.
2017. DDoS in the IoT: Mirai and other botnets. Computer 50, 7 (2017), 80–84.
[30] Chao Li, Wei Jiang, and Xin Zou. 2009. Botnet: Survey and case study. In Fourth
International Conference on Innovative Computing, Information and Control (ICI-