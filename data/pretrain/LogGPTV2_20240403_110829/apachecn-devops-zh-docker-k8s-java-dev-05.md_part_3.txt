*   您应该使用`CMD`指令来定义定义为`ENTRYPOINT`的命令或在容器中执行`ad-hoc`命令的默认参数
*   当使用替代参数运行容器时,`CMD`将被覆盖
*   `ENTRYPOINT`设置每次使用映像创建容器时使用的具体默认应用
*   如果你将`ENTRYPOINT`和`CMD`连接起来，你可以从`CMD`中移除一个可执行文件，并留下它的参数，这些参数将被传递给`ENTRYPOINT`
*   `ENTRYPOINT`的最佳用途是设置映像的主命令，允许该映像像该命令一样运行(然后使用`CMD`作为默认标志)
嗯，我们的服务运行得很好，但不是很有用。首先，它需要很多手动步骤才能运行，这就是为什么我们将在本章稍后使用 Maven 来自动化它。其次，正如您所记得的，我们的服务监听端口号`8080`上传入的`HTTP`请求。我们的基本映像可以运行，但不会暴露任何网络端口，因此没有人或任何东西可以访问该服务。让我们继续学习剩余的 Dockerfile 指令来修复它。
# 揭露
`EXPOSE`指令通知 Docker，容器在运行时监听指定的网络端口。我们已经在[第 2 章](02.html)、*网络和持久存储*中提到了`EXPOSE`指令。你会记得，Dockerfile 中的`EXPOSE`相当于`--expose`命令行选项。Docker 使用后跟端口号的`EXPOSE`命令来允许进入容器的流量。我们已经知道`EXPOSE`不会使容器的端口在主机上自动访问。为此，您必须使用`-p`标志来发布一系列端口，或者使用`-P`标志来一次发布所有公开的端口。
让我们回到我们的`Dockerfile`并暴露一个端口:
```
FROM jeanblanchard/java:8
COPY target/rest-example-0.1.0.jar rest-example-0.1.0.jar
CMD java -jar rest-example-0.1.0.jar
EXPOSE 8080
```
如果您现在使用相同的命令`docker build . -t rest-example`重新构建映像，您会注意到 Docker 输出了第四层，表示端口`8080`已经暴露。公开的端口将可用于这个 Docker 主机上的其他容器，如果您在运行时映射它们，也可用于外部世界。好吧，让我们试试看，使用以下`docker run`命令:
```
$ docker run -p 8080:8080 -it rest-example
```
如果您现在像我们在[第 4 章](04.html)、*创建 Java 微服务*中所做的那样，用`POST`(用于保存我们的图书实体)或`GET`(用于获取图书列表或单本图书)之类的请求调用本地主机，它会像以前一样做出响应。然而，这一次是从 Docker 容器开始的。这是件大事。让我们了解剩余的重要 Dockerfile 指令。
# 卷
从[第 1 章](01.html)、*对 Docker* 的介绍中，您会记得，默认情况下，容器文件系统是临时的。如果您启动一个 Docker 映像(也就是运行容器)，您将在层栈的顶部得到一个读写层。您可以根据需要创建、修改和删除文件，然后提交图层以保存更改。在[第 2 章](02.html)、*联网和持久存储中，*我们已经学习了如何创建卷，这是一种从 Docker 容器中存储和检索数据的好方法。我们可以在`Dockerfile`中使用`VOLUME`指令进行同样的操作。
语法再简单不过了:只是`VOLUME ["/volumeName"]`。
`VOLUME`的参数可以是 JSON 数组，一个带有一个或多个参数的普通字符串。例如:
```
VOLUME ["/var/lib/tomcat8/webapps/"]
VOLUME /var/log/mongodb /var/log/tomcat
```
`VOLUME`指令用指定的名称创建一个装载点，并将其标记为保存从本地主机或其他容器外部装载的卷。
`VOLUME`命令将在您的容器中装入一个目录，并将该目录中创建或编辑的任何文件存储在容器文件结构之外的主机磁盘上。使用`Dockerfile`中的`VOLUME`让我们知道某个目录包含永久数据。Docker 将为该数据创建一个卷，并且永远不会删除它，即使您删除了所有使用它的容器。它还绕过了联合文件系统，因此该卷实际上是一个实际的目录，在所有共享它的容器中以读写或只读方式装载到正确的位置(例如，如果它们是用`--volumes-from`选项启动的)。为了理解`VOLUME`，让我们来看看简单的 Dockerfile:
```
FROM ubuntu VOLUME /var/myVolume
```
如果您现在运行您的容器并将一些文件保存在`/var/myVolume`中，它们将可供其他容器共享。
基本上`VOLUME`和`-v`几乎相等。`VOLUME`和`-v`的区别在于，您可以动态使用`-v`，并通过执行`docker run`在启动时将您的`host`目录挂载到您的容器上。原因是 Dockerfiles 意味着可移植和共享。主机目录卷 100%依赖于主机，并且会在任何其他机器上崩溃，这有点偏离 Docker 的想法。因此，只能在 Dockerfile 中使用可移植指令。
The fundamental difference between `VOLUME` and `-v` is this: `-v` will mount existing files from your operating system inside your Docker container and `VOLUME` will create a new, empty volume on your host and mount it inside your container.
# 标签
要将元数据添加到我们的映像中，我们使用`LABEL`指令。单个标签是键值对。如果标签值中需要有空格，则需要用一对引号将它括起来。标签是附加的，它们包括从作为你自己的映像基础的映像中获取的所有标签(来自`FROM`指令的标签)。如果 Docker 遇到已经存在的标签，它将使用新值覆盖具有相同关键字的标签。定义标签时，您必须遵守一些规则:键只能由小写字母数字字符、点和破折号组成，并且必须以字母数字字符开始和结束。为了防止命名冲突，Docker 建议使用名称空间来标记使用反向域表示法的键。另一方面，没有名称空间(点)的键被保留用于命令行。
`LABEL`指令的语法很简单:
```
LABEL "key"="value"
```
要获得多行值，请用反斜杠分隔行；例如:
```
LABEL description="This is my \
multiline description of the software."
```
一张映像中可以有多个标签。用空格或反斜杠分隔它们；例如:
```
LABEL key1="value1" key2="value2" key3="value3"
LABEL key1="value1" \
key2="value2" \
key3="value3"
```
实际上，如果你需要在你的映像中有多个标签，建议使用`LABEL`指令的多标签形式，因为这将导致映像中只有一个附加层。
Each `LABEL` instruction creates a new layer. If your image has many labels, use the multiple form of the single `LABEL` instruction.
如果您想检查映像有哪些标签，请使用您在前面章节中已经知道的`docker inspect`命令。
# 包封/包围（动词 envelop 的简写）
`ENV`是将环境变量``设置为值``的`Dockerfile`指令。使用`ENV`有两种选择:
*   第一个，`ENV  `，将单个变量设置为一个值。第一个空格后的整个字符串将被视为``。这将包括任何字符，以及空格和引号。例如:
```
ENV JAVA_HOME /var/lib/java8
```
*   第二个带等号的是`ENV =`。该表单允许一次设置多个环境变量。如果需要在值中提供空格，则需要使用引号。如果值中需要引号，请使用反斜杠:
```
ENV CONFIG_TYPE=file CONFIG_LOCATION="home/Jarek/my \app/config.json"
```
请注意，您可以使用`ENV`更新`PATH`环境变量，然后`CMD`参数将知道该设置。这将使`Dockerfile`中的`CMD`参数更加清晰。例如，设置以下内容:
```
ENV PATH /var/lib/tomcat8/bin:$PATH
```
这将确保`CMD ["startup.sh"]`工作，因为它会在系统`PATH`中找到`startup.sh`文件。您也可以使用`ENV`设置经常修改的版本号，以便升级更容易处理，如下例所示:
```
ENV TOMCAT_VERSION_MAJOR 8
ENV TOMCAT_VERSION 8.5.4
RUN curl -SL http://apache.uib.no/tomcat/tomcat-$TOMCAT_VERSION_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz | tar zxvf apache-tomcat-$TOMCAT_VERSION.tar.gz -c /usr/Jarek/apache-tomcat-$TOMCAT_VERSION
ENV PATH /usr/Jarek/apache-tomcat-$TOMCAT_VERSION/bin:$PATH
```
在前面的例子中，Docker 将下载`ENV`变量中指定的 Tomcat 版本，将其提取到名称中带有该版本的新目录中，并且还将系统`PATH`设置为可供运行。
当从结果映像运行容器时，使用`ENV`设置的环境变量将保持不变。与使用`LABEL`创建的标签相同，您可以使用`docker inspect`命令查看`ENV`值。使用`docker run --env =`，也可以在容器启动前覆盖`ENV`值。
# 用户
`USER`指令设置运行映像时要使用的用户名或 UID。它将影响用户接下来在`Dockerfile`中的任何`RUN`、`CMD`和`ENTRYPOINT`指令。
指令的语法只是`USER `；例如:
```
USER tomcat
```
如果可执行文件可以在没有权限的情况下运行，您可以使用`USER`命令。Dockerfile 可以包含与此相同的用户和组创建指令:
```
RUN groupadd -r tomcat && useradd -r -g tomcat tomcat
```
频繁地来回切换用户将会增加结果映像中的层数，并且还会使 Dockerfile 更加复杂。
# 银
在`docker build`命令期间，`ARG`指令被用于向 Docker 守护程序传递参数。`ARG`变量定义从`Dockerfile`中定义它的那一行开始生效。通过使用`--build-arg`开关，您可以为定义的变量赋值:
```
$ docker build --build-arg = .
```
来自`--build-arg`的值将被传递给构建映像的守护进程。您可以使用多个`ARG`指令指定多个参数。如果您指定了未使用`ARG`定义的构建时间参数，构建将失败并出现错误，但是可以在`Dockerfile`中指定默认值。您可以这样指定默认参数值:
```
FROM ubuntu ARG user=jarek
```
如果在开始生成之前没有指定参数，将使用默认值:
It is not recommended to use `ARG` for passing secrets as GitHub keys, user credentials, passwords, and so on, as all of them will be visible to any user of the image by using the `docker history` command!
# 构建时
`ONBUILD`指令指定了一个附加指令，当使用该映像作为其基础映像构建其他映像时，该指令将被触发。换句话说，`ONBUILD`指令是父母`Dockerfile`给孩子`Dockerfile`(下游构建)的指令。任何构建指令都可以注册为触发器，这些指令将在`Dockerfile`中的`FROM`指令之后立即被触发。
`ONBUILD`指令的语法如下:
```
ONBUILD 
```