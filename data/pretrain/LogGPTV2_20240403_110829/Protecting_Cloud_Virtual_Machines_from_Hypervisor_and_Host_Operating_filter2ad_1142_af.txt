### Optimized Text

**Resource Management, Interrupt Virtualization, and Hardware-Specific Dependencies in Hypervisors**

To further reduce Xen’s Trusted Computing Base (TCB) and enhance the protection of VM data, resource management, interrupt virtualization, and other hardware-specific dependencies, along with Dom0, are integrated into a hostvisor. Microhypervisors [32, 74] adopt a microkernel approach to build hypervisors from scratch, thereby minimizing the TCB. For instance, NOVA [74] relocates various aspects of virtualization, such as CPU and I/O virtualization, to user-space services. These services, while trusted, are instantiated per VM, ensuring that a compromise affects only the specific VM. Other methods simplify the hypervisor by removing [72] or disabling [60] virtual device I/O support, or by statically partitioning VM resources [42, 73]. Although both microhypervisors and HypSec aim to reduce the TCB, HypSec does not require a clean-slate redesign and supports full-featured commodity hypervisors without sacrificing important features like I/O support and dynamic resource allocation, while still preserving the confidentiality and integrity of VM data even if the hostvisor is compromised.

**Deconstructing Monolithic Hypervisors**

HyperLock [86], DeHype [88], and Nexen [70] focus on deconstructing existing monolithic hypervisors by segregating hypervisor functions to per-VM instances. This can isolate an exploit to a specific VM, but if a vulnerability is exploitable in one VM, it is likely exploitable in others. Nexen, built on Nested Kernel, retrofits Xen in this manner, but it does not protect against vulnerabilities in shared hypervisor services. Unlike HypSec, these systems prioritize availability and do not fully protect the confidentiality and integrity of VM data against a compromised hypervisor or host OS.

**CloudVisor: A Specialized Host Hypervisor**

CloudVisor [92] uses a small, specialized host hypervisor to support nested virtualization and protect user VMs from an untrusted Xen guest hypervisor, though modifications to Xen are required. CloudVisor encrypts VM I/O and memory but does not fully protect CPU state, contrary to its claims of providing both secrecy and integrity to a VM’s states, including CPU states. The VM program counter is exposed to Xen to support I/O, and performance overhead on application workloads is a significant issue. Additionally, CloudVisor does not support widely used paravirtual I/O. By not supporting public key cryptography, CloudVisor has a smaller TCB but faces key management challenges.

In contrast, HypSec protects both CPU and memory state via access control, not encryption, enabling full-featured hypervisor functionality such as paravirtual I/O. HypSec also avoids the performance overhead associated with nested virtualization.

**Protecting User Data with Specialized Hardware**

Other approaches enable and require VM support for specialized hardware, such as Intel SGX [36] or ARM TrustZone, to protect user data. Haven [12] and S-NFV [71] use Intel SGX to protect application data but cannot protect the entire VM, including the guest OS and applications, against an untrusted hypervisor. While HypSec relies on a Trusted Execution Environment (TEE) for key management, it fundamentally differs from other TEE-based approaches by using TEEs primarily for storing keys. Systems like vTZ [34] and HA-VMSI [96] leverage ARM TrustZone to protect VMs, but they either do not protect the normal world VM or support limited virtualization features. HypSec, on the other hand, protects the entire normal world VM against an untrusted hypervisor without requiring specialized hardware. It leverages ARM VE to trap VM exceptions to EL2 while retaining hypervisor functionality.

**Hardware-Based Approaches**

Some works [40, 78, 90] propose hardware-based approaches to protect VM data in CPU and memory against an untrusted hypervisor. However, without actual hardware implementations, these proposals are implemented by modifying Xen [40] or QEMU [90], or using a simulator [78]. Some [40, 78] do not support commodity hypervisors. In contrast, HypSec leverages existing hardware features to protect VM data and supports KVM on ARM server hardware.

**Recent Architectural Extensions**

Recent architectural extensions [3, 37] have proposed hardware support on x86 for encrypted virtual machines. Fidelius [89] leverages AMD’s Secure Encrypted Virtualization (SEV) [3] to protect VMs. Unlike these encryption-based approaches, HypSec primarily uses access control mechanisms.

**Hardening the Hypervisor**

Some projects focus on hardening the hypervisor to prevent exploitation, improving security by enforcing control flow integrity [84] or measuring runtime hypervisor integrity [9, 26]. These approaches can be applied to HypSec to further strengthen VM security. XMHF [81] verifies the memory integrity of its hypervisor codebase but supports single VMs with limited virtualization features. Verifying HypSec’s TCB is an area of future work.

**Extending Trusted Hypervisors**

Various projects extend a trusted hypervisor to protect software within VMs, including protecting applications running on an untrusted guest OS [16, 17, 33, 55, 91], ensuring kernel integrity, and protecting against rootkits and code injection attacks [64, 69, 83, 85, 95]. Others divide applications and system components in VMs, relying on the hypervisor to safeguard interactions among secure and insecure components [27, 54, 76, 79].

Overshadow [16] and Inktag [33] share similarities with HypSec in using a more trusted hypervisor component to protect against untrusted kernel software. They assume applications use end-to-end encrypted network I/O and protect file I/O by replacing it with memory-mapped I/O to encrypted memory. HypSec differs in three key ways: it uses access control instead of memory encryption, relies on hardware virtualization mechanisms to interpose on hardware events, and protects against hypervisor and host OS exploits, which none of the other approaches do.

**Conclusions**

We have developed HypSec, a new approach to hypervisor design that significantly reduces the TCB necessary to protect virtual machines. HypSec decomposes a monolithic hypervisor into a small, trusted corevisor and an untrusted hostvisor, the latter containing most hypervisor functionality, including an entire host operating system kernel. The corevisor leverages hardware virtualization support to execute at a higher privilege level and provide access control mechanisms to restrict hostvisor access to VM data. When VMs use secure I/O channels, HypSec can protect the confidentiality and integrity of all VM data. We have demonstrated that HypSec can support existing commodity hypervisors by retrofitting KVM/ARM, resulting in a TCB orders of magnitude smaller than the original KVM/ARM. HypSec provides strong security guarantees to VMs with only modest performance overhead for real application workloads.

**Acknowledgments**

Steve Bellovin, Christoffer Dall, and Nathan Dautenhahn provided valuable comments on earlier drafts of this paper. This work was supported in part by NSF grants CNS-1717801 and CNS-1563555.

**References**

[1] M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. Mach: A New Kernel Foundation for UNIX Development. In Proceedings of the Summer USENIX Conference (USENIX Summer 1986), pages 93–112, Atlanta, GA, June 1986.
...
[32] G. Heiser and B. Leslie. The OKL4 Microvisor: Convergence Point of Microkernels and Hypervisors. In Proceedings of the 1st ACM Asia-Pacific Workshop on Systems (APSys 2010), pages 19–24, New Delhi, India, Aug. 2010.