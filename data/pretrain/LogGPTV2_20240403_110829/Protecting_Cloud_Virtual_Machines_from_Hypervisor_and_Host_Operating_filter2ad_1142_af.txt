resource management, interrupt virtualization, and other
hardware-speciﬁc dependencies, along with Dom0, into a
hostvisor to further reduce Xen’s TCB to protect VM data.
Microhypervisors [32, 74] take a microkernel approach
to build clean-slate hypervisors from scratch to reduce the
hypervisor TCB. For example, NOVA [74] moves various
aspects of virtualization such as CPU and I/O virtualization
to user space services. The virtualization services are trusted
but instantiated per VM so that compromising them only
affects the given VM. Others simplify the hypervisor to reduce
its TCB by removing [72] or disabling [60] virtual device
I/O support in hypervisors, or partitioning VM resources
statically [42, 73]. Although a key motivation for both
microhypervisors and HypSec is to reduce the size of the TCB,
HypSec does not require a clean-slate redesign, and supports
existing full-featured commodity hypervisors without remov-
ing important hypervisor features such as I/O support and
dynamic resource allocation while preserving conﬁdentiality
and integrity of VM data even if the hostvisor is compromised.
HyperLock [86], DeHype [88], and Nexen [70] focus on
deconstructing existing monolithic hypervisors by segregating
hypervisor functions to per VM instances. While this can
isolate an exploit of hypervisor functions to a given VM
instance, if a vulnerability is exploitable in one VM instance,
it is likely to be exploitable in another as well. Nexen builds on
Nested Kernel to retroﬁt Xen in this manner, though it does not
protect against vulnerabilities in its shared hypervisor services.
In contrast to HypSec, these systems focus on availability and
do not fully protect the conﬁdentiality and integrity of VM
data against a compromised hypervisor or host OS.
CloudVisor [92] uses a small, specialized host hypervisor to
support nested virtualization and protect user VMs against an
untrusted Xen guest hypervisor, though Xen modiﬁcations are
required. CloudVisor encrypts VM I/O and memory but does
not fully protect CPU state, contrary to its claims of “providing
both secrecy and integrity to a VM’s states, including CPU
states.” For example, the VM program counter is exposed
to Xen to support I/O. As with any nested virtualization
approach, performance overhead on application workloads is
a problem. Furthermore, CloudVisor does not support widely
used paravirtual I/O. CloudVisor has a smaller TCB by not
supporting public key cryptography, making key management
problematic.
In contrast, HypSec protects both CPU and
memory state via access control, not encryption, making
it possible to support full-featured hypervisor functionality
such as paravirtual I/O. HypSec also does not require nested
virtualization, avoiding its performance overhead.
To protect user data in virtualization systems, others enable
and require VM support for specialized hardware such as Intel
SGX [36] or ARM TrustZone. Haven [12] and S-NFV [71]
use Intel SGX to protect application data but unlike HypSec,
cannot protect the whole VM including the guest OS and ap-
plications against an untrusted hypervisor. Although HypSec
relies on a TEE to support key management, it fundamentally
differs from other approaches which extensively use TEEs for
much more than storing keys. Others [34, 96] run a security
monitor in ARM TrustZone and rely on ARM IP features
such as TrustZone Address Space Controller to protect VMs.
vTZ [34] virtualizes TrustZone and protects the guest TEE
against an untrusted hypervisor, but does not protect the
normal world VM. HA-VMSI [96] protects the normal
world VM against a compromised hypervisor but supports
limited virtualization features. In contrast, HypSec protects
the entire normal world VM against an untrusted hypervisor
without requiring VMs to use specialized hardware. HypSec
leverages ARM VE to trap VM exceptions to EL2 while
retaining hypervisor functionality. Others [40, 78, 90] propose
hardware-based approaches to protect VM data in CPU and
memory against an untrusted hypervisor. However, without
actual hardware implementations, these works implement
the proposed changes by modifying either Xen [40] or
QEMU [90], or on a simulator [78]. Some of them [40, 78]
do not support commodity hypervisors. In contrast, HypSec
leverages existing hardware features to protect virtual machine
data and supports KVM on ARM server hardware.
Recent architectural extensions [3, 37] proposed hardware
support on x86 for encrypted virtual machines. Fidelius [89]
leverages AMD’s SEV (Secure Encrypted Virtualization) [3]
to protect VMs. Unlike these encryption-based approaches,
HypSec primarily uses access control mechanisms.
Some projects focus on hardening the hypervisor to prevent
exploitation. They improve hypervisor security by either
enforcing control ﬂow integrity [84] or measuring runtime
hypervisor integrity [9, 26]. These approaches can be applied
to HypSec to further strengthen VM security. XMHF [81]
1370    28th USENIX Security Symposium
USENIX Association
veriﬁes the memory integrity of its hypervisor codebase
but supports single VM with limited virtualization features.
Veriﬁcation of HypSec’s TCB is an area of future work.
Various projects extend a trusted hypervisor to protect soft-
ware within VMs, including protecting applications running
on an untrusted guest OS in the VM [16, 17, 33, 55, 91], ensur-
ing kernel integrity and protecting against rootkits and code
injection attacks or to isolate I/O channels [64, 69, 83, 85, 95],
and dividing applications and system components in VMs
then relying on the hypervisor to safeguard interactions
among secure and insecure components [27, 54, 76, 79].
Overshadow [16] and Inktag [33] have some similarities with
HypSec in that they use a more trusted hypervisor component
to protect against untrusted kernel software. Overshadow and
Inktag also assume applications use end-to-end encrypted
network I/O, though they protect ﬁle I/O by replacing it with
memory-mapped I/O to encrypted memory. HypSec has three
key differences with these approaches. First, instead of mem-
ory encryption, HypSec primarily uses access control, which is
more lightweight and avoids the need to emulate functions that
are problematic when memory is encrypted. Second, instead
of instrumenting or emulating complex system calls, HypSec
relies on hardware virtualization mechanisms to interpose
on hardware events of interest. Finally, instead of protecting
against guest OS exploits, HypSec protects against hypervisor
and host OS exploits, which none of the other approaches do.
8 Conclusions
We have created HypSec, a new approach to hypervisor design
that reduces the TCB necessary to protect virtual machines.
HypSec decomposes a monolithic hypervisor into a small,
trusted corevisor and untrusted hostvisor, the latter containing
the vast majority of hypervisor functionality including an
entire host operating system kernel. The corevisor leverages
hardware virtualization support to execute at a higher privilege
level and provide access control mechanisms to restrict
hostvisor access to VM data.
It can be simple because it
only needs to perform basic CPU and memory virtualization.
When VMs use secure I/O channels, HypSec can protect
the conﬁdentiality and integrity of all VM data. We have
demonstrated that HypSec can support existing commodity
hypervisors by retroﬁtting KVM/ARM. The resulting TCB
is orders of magnitude less than the original KVM/ARM.
HypSec provides strong security guarantees to VMs with only
modest performance overhead for real application workloads.
Acknowledgments
Steve Bellovin, Christoffer Dall, and Nathan Dautenhahn
provided helpful comments on earlier drafts of this paper. This
work was supported in part by NSF grants CNS-1717801 and
CNS-1563555.
References
[1] M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid,
A. Tevanian, and M. Young. Mach: A new kernel foundation
In Proceedings of the Summer
for UNIX development.
USENIX Conference (USENIX Summer 1986), pages 93–112,
Atlanta, GA, June 1986.
[2] K. Adams and O. Agesen. A Comparison of Software and
Hardware Techniques for x86 Virtualization. In Proceedings
of the 12th International Conference on Architectural Support
for Programming Languages and Operating Systems (ASPLOS
2006), pages 2–13, San Jose, CA, Oct. 2006.
[3] Advanced Micro Devices. Secure Encrypted Virtualization
API Version 0.16. https://support.amd.com/TechDocs/
55766_SEV-KM%20API_Spec.pdf, Feb. 2018.
[4] Amazon Web Services, Inc.
Introducing Amazon EC2 A1
Instances Powered By New Arm-based AWS Graviton Proces-
sors. https://aws.amazon.com/about-aws/whats-new/
2018/11/introducing-amazon-ec2-a1-instances/,
Nov. 2018.
[5] Amazon Web Services, Inc. AWS Key Management Service
(KMS). https://aws.amazon.com/kms/, May 2019.
[6] ArchWiki.
dm-crypt.
https://wiki.archlinux.org/
index.php/dm-crypt, Apr. 2018.
[7] ARM Ltd.
ARM Security Technology - Build-
ing a Secure System using TrustZone Technology.
http://infocenter.arm.com/help/topic/com.arm.
doc.prd29-genc-009492c/PRD29-GENC-009492C_
trustzone_security_whitepaper.pdf, Apr. 2009.
[8] ARM Ltd.
ARM System Memory Management Unit
Architecture Speciﬁcation - SMMU architecture ver-
sion 2.0.
http://infocenter.arm.com/help/topic/
com.arm.doc.ihi0062d.c/IHI0062D_c_system_mmu_
architecture_specification.pdf, June 2016.
[9] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and
N. C. Skalsky. HyperSentry: Enabling Stealthy In-context
Measurement of Hypervisor Integrity. In Proceedings of the
17th ACM Conference on Computer and Communications
Security (CCS 2010), pages 38–49, Chicago, IL, Oct. 2010.
[10] M. Backes, G. Doychev, and B. Kopf. Preventing Side-Channel
Leaks in Web Trafﬁc: A Formal Approach. In 20th Annual
Network and Distributed System Security Symposium (NDSS
2013), San Diego, CA, Feb. 2013.
[11] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho,
R. Neugebauer, I. Pratt, and A. Warﬁeld. Xen and the Art of
Virtualization. In Proceedings of the 19th ACM Symposium on
Operating Systems Principles (SOSP 2003), pages 164–177,
Bolton Landing, NY, Oct. 2003.
[12] A. Baumann, M. Peinado, and G. Hunt. Shielding Applications
from an Untrusted Cloud with Haven. In Proceedings of the
11th USENIX Conference on Operating Systems Design and
Implementation (OSDI 2014), pages 267–283, Broomﬁeld,
CO, Oct. 2014.
[13] B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. E.
Fiuczynski, D. Becker, C. Chambers, and S. Eggers. Exten-
sibility Safety and Performance in the SPIN Operating System.
In Proceedings of the 15th ACM Symposium on Operating
Systems Principles (SOSP 1995), pages 267–283, Copper
USENIX Association
28th USENIX Security Symposium    1371
Mountain, CO, Dec. 1995.
[14] Business Wire. Research and Markets: Global Encryption
Software Market (Usage, Vertical and Geography) - Size,
Global Trends, Company Proﬁles, Segmentation and Forecast,
2013 - 2020.
https://www.businesswire.com/news/
home/20150211006369/en/Research-Markets-Global-
Encryption-Software-Market-Usage, Feb. 2015.
[15] S. Butt, H. A. Lagar-Cavilla, A. Srivastava, and V. Ganapathy.
Self-service Cloud Computing. In Proceedings of the 2012
ACM Conference on Computer and Communications Security
(CCS 2012), pages 253–264, Raleigh, NC, Oct. 2012.
[16] X. Chen, T. Garﬁnkel, E. C. Lewis, P. Subrahmanyam,
C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports.
Overshadow: A Virtualization-based Approach to Retroﬁtting
Protection in Commodity Operating Systems. In Proceedings
of the 13th International Conference on Architectural Support
for Programming Languages and Operating Systems (ASPLOS
2008), pages 2–13, Seattle, WA, Mar. 2008.
[17] S. Chhabra, B. Rogers, Y. Solihin, and M. Prvulovic. Se-
cureME: A Hardware-software Approach to Full System
Security. In Proceedings of the 25th International Conference
on Supercomputing (ICS 2011), pages 108–119, Tucson, AZ,
May 2011.
[18] P. Colp, M. Nanavati, J. Zhu, W. Aiello, G. Coker, T. Deegan,
P. Loscocco, and A. Warﬁeld. Breaking Up is Hard to Do:
Security and Functionality in a Commodity Hypervisor.
In
Proceedings of the 23rd ACM Symposium on Operating
Systems Principles (SOSP 2011), pages 189–202, Cascais,
Portugal, Oct. 2011.
[19] J. Corbet. KAISER: hiding the kernel from user space.
https://lwn.net/Articles/738975/, Nov. 2017.
[20] C. Dall, S.-W. Li, J. Lim, J. Nieh, and G. Koloventzos. ARM
Virtualization: Performance and Architectural Implications. In
Proceedings of the 43rd International Symposium on Computer
Architecture (ISCA 2016), pages 304–316, Seoul, South Korea,
June 2016.
[21] C. Dall, S.-W. Li, and J. Nieh. Optimizing the Design and
Implementation of the Linux ARM Hypervisor. In Proceedings
of the 2017 USENIX Annual Technical Conference (USENIX
ATC 2017), pages 221–234, Santa Clara, CA, July 2017.
[22] C. Dall and J. Nieh. KVM/ARM: Experiences Building the
Linux ARM Hypervisor. Technical Report CUCS-010-13,
Department of Computer Science, Columbia University, June
2013.
[23] C. Dall and J. Nieh. KVM/ARM: The Design and Implemen-
tation of the Linux ARM Hypervisor. In Proceedings of the
19th International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS
2014), pages 333–347, Salt Lake City, UT, Mar. 2014.
[24] A. Danial.
cloc: Count Lines of Code.
https:
//github.com/AlDanial/cloc, May 2019.
[25] N. Dautenhahn, T. Kasampalis, W. Dietz, J. Criswell, and
V. Adve. Nested Kernel: An Operating System Architecture
for Intra-Kernel Privilege Separation. In Proceedings of the
20th International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS
2015), pages 191–206, Istanbul, Turkey, Mar. 2015.
[26] L. Deng, P. Liu, J. Xu, P. Chen, and Q. Zeng. Dancing with
Wolves: Towards Practical Event-driven VMM Monitoring. In
Proceedings of the 13th ACM SIGPLAN/SIGOPS International
Conference on Virtual Execution Environments (VEE 2017),
pages 83–96, Xi’an, China, Apr. 2017.
[27] T. Garﬁnkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh.
Terra: A Virtual Machine-based Platform for Trusted Com-
puting. In Proceedings of the Nineteenth ACM Symposium on
Operating Systems Principles (SOSP 2003), pages 193–206,
Bolton Landing, NY, Oct. 2003.
[28] Google.
Google Cloud Security and Compli-
ance Whitepaper - How Google protects your data.
https://static.googleusercontent.com/media/
gsuite.google.com/en//files/google-apps-
security-and-compliance-whitepaper.pdf, Sept. 2017.
[29] Google. HTTPS encryption on the web – Google Transparency
https://transparencyreport.google.com/
Report.
https/overview, Apr. 2018.
[30] S. Hajnoczi. An Updated Overview of the QEMU Storage
Stack. https://events.linuxfoundation.org/slides/
2011/linuxcon-japan/lcj2011_hajnoczi.pdf,
June
2011.
[31] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson,
W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and
E. W. Felten. Lest We Remember: Cold Boot Attacks on
Encryption Keys. In Proceedings of the 17th USENIX Security
Symposium (USENIX Security 2008), pages 45–60, San Jose,
CA, July 2008.
[32] G. Heiser and B. Leslie. The OKL4 Microvisor: Convergence
In Proceedings of
Point of Microkernels and Hypervisors.
the 1st ACM Asia-paciﬁc Workshop on Workshop on Systems
(APSys 2010), pages 19–24, New Delhi, India, Aug. 2010.