指令主要包括以下几类。
（1）数据传送类指令
数据传送类指令是使用最频繁的指令，格式为：MOVDEST
SRC
功能：将一个学节、字或双字从源操作数SRC传送至目的操作数
DEST。
（2）栈操作与函数调用
如表9-1所示，栈操作包括入栈（PUSH）和出栈（POP）。函数
---
## Page 215
CTF特训营：技术详解、解题方法与
9.2.1x86指令体系
215/1144
调用与返回通过CALL/RET指令实现。CALL指令将当前的EIP保存到
堆栈中，RET指令读取堆栈，得到返回地址
表9-1栈操作相关指令说明
名称
格式
功能
入栈
PUSH SRC
ESP+4:[ESP]SRC
出栈
POP DEST
DESTDEST;ESP-4
调用函数
CALLFUNC
PUSH EIP;EIPFUNC
函数返回
RET
EIP-[ESP];ESP.4
（3）算数、逻辑运算指令
如add、sub、mul、div、and、or、xor等算数逻辑运算。
（4）控制转移指令
cmp：对两个操作数执行减法操作，修改状态标识寄存器。
test：对两个操作数执行与操作，修改状态标识寄存器。
jmp：强制跳转指令。
jcc:条件跳转指令，包括jz、jnz等。
（5）特殊指令
一些具有特殊意义的指令，如：
---
## Page 216
CTF特训营：技术详解、解题方法与
9.2.1x86指令体系
215/1144
调用与返回通过CALL/RET指令实现。CALL指令将当前的EIP保存到
堆栈中，RET指令读取堆栈，得到返回地址。
表9-1栈操作相关指令说明
名称
格式
功能
入栈
PUSH SRC
ESP+=4:[ESP]SRC
出栈
POP DEST
DESTDEST;ESP-4
调用函数
CALL FUNC
PUSH EIP;EIPFUNC
函数返回
RET
EIP=[ESP];ESP-4
（3）算数、逻辑运算指令
如add、sub、mul、div、and、or、xor等算数逻辑运算。
（4）控制转移指令
cmp：对两个操作数执行减法操作，修改状态标识寄存器。
·test：对两个操作数执行与操作，修改状态标识寄存器。
jmp：强制跳转指令。
jcc：条件跳转指令，包括iz、jnz等。
（5）特殊指令
一些具有特殊意义的指令，如：
---
## Page 217
CTF特训营：技术详解、解题方法与
9.2.1x86指令体系
217/1144
图9-1x86指令体系中的函数调用示意图
---
## Page 218
CTF特训营：技术详解、解题方法与
9.2.2x64指令体系
218/1144
9.2.2x64指令体系
x64指令体系与x86指令体系大致相同，这里主要针对不同点进
行说明。
1.寄存器组
通用寄存器增加到16个，分别为RAX、RBX、RDX、RCX、RBP、
RDI、RSI、RSP，R8~R15
2.系统调用指令
syscall/sysret是Linux64位操作系统的系统调用方式
3.x64应用程序二进制接口
有两种广泛使用的x64ABI，列举如下。
Microsoft'sx64ABl：主要用于Windows操作系统中的64位程
序。
SysVx64ABl:主要用于Linux、BSD、MAC等操作系统中的64
位程序。
---
## Page 219
CTF特训营：技术详解、解题方法与
9.2.2x64指令体系
219/1144
Microsoft’sx64ABI的前4个参数通过寄存器RCX、RDX、R8
R9传递，其余则是通过栈传递，但在栈上会预留下0x20字节的空间
用于临时保存前4个参数，返回值为RAX。对应的函数调用形式如下：
RAX func(RCX, RDX, R8, R9, [rsp+0x20], [rsp+0x28],..)
SysVx64ABI的前6个参数（RDI、RSI、RDX、RCX、R8、R9)
通过寄存器传递，其余则是通过栈传递，在栈上没有为前6个参数预
留空间，返回值为RAX寄存器。对应的函数调用形式如下：
RAX func(RDI, RSI, RDX, RCX, R8, R9, [RSP+8],[RSP+0x10],..)
---
## Page 220
CTF特训营：技术详解、解题方法与
9.3逆向分析工具介绍
220/1144
9.3逆向分析工具介绍
工欲善其事，必先利其器。在掌握了逆向的基础知识后，我们还
需要掌握一些合适的逆向分析工具
---
## Page 221
CTF特训营：技术详解、解题方法与
9.3.1反汇编和反编译工具
221/1144
9.3.1反汇编和反编译工具
反汇编工具有很多，但功能最强大、应用最广泛的当属IDA
Pro（简称IDA）。在反编译方面，最好的反编译工具为IDA自带的
Hex-Ray插件（快捷键为F5），所以这里主要介绍IDA。
IDA支持的文件类型非常丰富，除了包括PE格式、ELF格式之外，
还包括DOS、Mach-O、.NET等文件格式。同时IDA还支持几十种不
同的处理器架构。
1.IDA打开文件
通过菜单栏中的File→Open，选择要分析的目标程序，得到如图
序，直接点击OK即可。
---
## Page 222
CTF特训营：技术详解、解题方法与
9.3.1反汇编和反编译工具
222/1144
Load a nev file
Load file C:lrereversel gs
ELF64 forxB6-64 （xecutable）[elf.1d
Binary file
Processor type
MetaPC （disassenble all opcodes)[metapc]
Set
Loading seghent
Analysis
0x00000000
Kerneloptions1
Kernel options
Enabled
Loading offset
000000000
Indicator enabled
Processor options
Options
Loading ptions
Loadresources
Fill segent gaps
Rename DLL entries
Create segments
anual load
Create FLAT group
Create inports segnent
Loadas cgde segment
OK
Cancel
Help
图9-2
IDA打开文件
2.IDA主窗口介绍
IDA的主窗口如图9-3所示，主要包括以下几个区域。
---
## Page 223
CTF特训营：技术详解、解题方法与
9.3.1反汇编和反编译工具
223/1144
te:istr
char（（ste:strig*)
std::st
*)tflag)
图9-3IDA主窗口
（1）工具栏区域
工具栏包括与IDA常用工具相对应的工具，可以使用菜单中的
View/Toolbar来显示或者隐藏工具栏
（2）导航带
导航带是加载文件的地址空间的线性视图，默认情况下，其会呈
现二进制文件的整个地址范围。不同的颜色表示不同类型的文件，如
代码或者数据。同时，还会有一个细小的当前位置指示符（默认为黄
---
## Page 224
CTF特训营：技术详解、解题方法与
9.3.1反汇编和反编译工具
224/1144
色）指向与当前反汇编窗口中显示的地址范围对应的导航带地址。通
常，我们分析程序时，主要分析程序自身，而不是分析相应的库函数
可以根据导航带确定大致的范围
(3）函数窗口
函数窗口上显示了所有的函数。如果程序是带有符号的，那么
IDA会自动解析符号信息，将函数的真实名称显示出来，函数名通常
有利于分析人员猜测函数的功能。此外，IDA使用了FLIRT签名库的
方式来识别库函数，因此即使是没有带符号信息的二进制程序，IDA
也很可能自动识别出部分库函数。对于不能识别的函数，函数名通常
会以sub开头，后面再加上函数的起始地址。
（4）数据显示窗口
IDA为每一个数据显示窗口都提供了标签，通过菜单中的View
Opensubviews可以打开相应的数据显示窗口，主要的数据显示窗口
包括：反汇编窗口、反编译窗口、导入表窗口、导出表窗口、结构体
窗口等。
（5）消息窗口
---
## Page 225
CTF特训营：技术详解、解题方法与
9.3.1反汇编和反编译工具
225/1144
消息窗口显示的是IDA输出的信息。在这里，用户可以找到与文
件分析有关的状态消息，以及由用户操作导致的错误消息。消息窗口
基本上等同于一个控制台输出设备。
3.IDA的基本使用
（1）函数修正
一般以pushebp/rbp指令开头的地址为一个函数的起始地址，但
是有时候IDA并没有将其正确地识别为函数，此时就需要手动地将其
创建为函数，创建函数之后通常就能对该函数进行反编译操作了。
创建函数的方式为：在函数的起始地址的汇编代码处，点击右键
选择CreateFunction，对应的快捷键为P
(2）指令修正
在IDA中，如果某些指令或者数据识别有误，可以进行手动修正。
如图9-4所示，地址0x4010D9和0x4010DB汇编指令跳转的自标
地址为0x4010DF，程序运行到0x4010D9时，必然会跳转到
0x4010DF，而不会运行到0x4010DD，所以需要在0x4010DD处使用
快捷键D将其转化为数据
---
## Page 226
CTF特训营：技术详解、解题方法与
9.3.1反汇编和反编译工具
226/1144
push
esi
push
edi
jz
short near ptr
1oc_4010DD+2
KPIKAIAER
jnz
short near ptr
1oc_4010DD+2
loc_4010DD:
；CODE XREF:.text:004010D91
9lol
；.text:004010DBtj
call
far ptr 0E801h:7F037EE8h
图9-4
IDA错误的反汇编代码
然后，在地址0x4010DF处使用快捷键C将其转化为代码，得到
如图9-5所示的结果。
push
esi
push
edi
jz
short 1oc_4010DF
jnz
shortloc_4010DF
4010DD
dw
0E89Ah
1oc_4010DF:
;CODEXREF:.text:004010D9t
；.text:004010DB1j
jle
short1oc_4010E4
jg
short 1oc_4010E4
图9-5
IDA修正后的反汇编代码
（3）数据修正
同理，在数据段中，一个数据的长度可能为1、2、4或者8字
节，此时可以通过快捷键D来修改为对应的类型。
如果数据段中的某个部分为一个字符串，但是IDA并没有正确识
---
## Page 227
CTF特训营：技术详解、解题方法与
9.3.1反汇编和反编译工具
227/1144
别，那么可以使用快捷键A将其转换为一个ASCII字符串。
（4）注释信息与重命名
在使用IDA分析程序的时候，经常会通过修改程序中的变量或者
函数名等信息帮助读者理解，点击右键，选择Rename即可进行重命
名。
此外，还可以为代码添加注释，使用快捷键；”可以在反汇编
窗口中添加注释，使用快捷键“7可以在反编译窗口添加注释
对于一些针对不常用处理器架构编写的程序，可以开启汇编的自
动注释功能。开启的方式为勾选界面中的Autocomments，如图9-6所
示。
---
## Page 228
CTF特训营：技术详解、解题方法与
9.3.1反汇编和反编译工具
228/1144
IDAOption
Disassenbly
AnalysisCross"referencesStringsBrovserGraphMisc
Address representation
Display disassembly line parts
Eunetion offsets
Line prefixes (nongraph)
Include ement adresses
 Stsck pointer
Use seghent nanes
Consents
Bepeatablec
nts
Eepty lines
Huto comnents
Borders betgeen data/code (nongraph)
 Bad jnstruetion BAD> sarks
Basic block boundaries (nongraph)
Bunber of opcode bytes (nongraph)
Sgurce line nunbers
Instruction indentation (nongraph)
16
Line prefix exanple: seg000:0FE4
Cogments indentation (non"graph)
40
Lov suspiciousness linitOx401000
Right nargin (non"graph)
0L
High suspiciousness limit Ox40c000
Spaces for Labulation
OK
Cancel
Help
图9-6IDA开启自动注释功能界面
（5）二进制程序的patch
由上文可以知道，0x4010dd处的两个字节为多余字节，虽然经
过代码修正后能够看到正常的反汇编代码，但是并不能直接进行反编
译。此时，将多余的两个字节转化为空指令（nop指令，对应的字节
码为0x90），这样函数就能够正常地反编译了。
修改的方法如图9-7所示，依次选择菜单栏中的Edit一Patch
program→Changebyte功能进行修改。
---
## Page 229