Manager database. These experiments use the following tools, which you should become famil-
I
information about objects (such as the reference count, the number of open handles, secu-
rity descriptors, and so forth). WinObjEx64, available on GitHub, is a similar tool with more 
advanced functionality and is open source but not endorsed or signed by Microsoft.
I
Process Explorer and Handle from Sysinternals, as well as Resource Monitor (introduced in 
Chapter 1 of Part 1) display the open handles for a process. Process Hacker is another tool 
that shows open handles and can show additional details for certain kinds of objects.
I
The kernel debugger !handle extension displays the open handles for a process, as does the 
Io.Handles data model object underneath a Process such as @$curprocess.
WinObj and WinObjEx64 provide a way to traverse the namespace that the Object Manager 
126 
CHAPTER 8 System mechanisms
The Windows Openfiles/query
maintain objects list be enabled. (See the 
Openfiles/LocalOpenfiles/
Local ON command, but you still need to reboot the system for the setting to take effect. Process 
Explorer, Handle, and Resource Monitor do not require object tracking to be turned on because 
they query all system handles and create a per-process object list. Process Hacker queries per-pro-
The Object Manager was designed to meet the following goals:
I 
Provide a common, uniform mechanism for using system resources.
I 
Isolate object protection to one location in the operating system to ensure uniform and consis-
tent object access policy.
I 
Provide a mechanism to charge processes for their use of objects so that limits can be placed on
the usage of system resources.
I 
Establish an object-naming scheme that can readily incorporate existing objects, such as the
I 
Support the requirements of various operating system environments, such as the ability of a
process to inherit resources from a parent process (needed by Windows and Subsystem for
for UNIX Applications). Although Subsystem for UNIX Applications no longer exists, these facili-
ties were also useful for the later development of the Windows Subsystem for Linux.
I 
Establish uniform rules for object retention (that is, for keeping an object available until all pro-
I 
objects in the namespace.
I 
Allow redirection of object names and paths through symbolic links and allow object owners,
junction points). Combined, these redirection mechanisms compose what is called reparsing.
Internally, Windows has three primary types of objects: executive objects, kernel objects, and GDI/
User objects. Executive objects are objects implemented by various components of the executive 
primitive set of objects implemented by the Windows kernel. These objects are not visible to user-
capabilities, such as synchronization, on which executive objects are built. Thus, many executive objects 
The Windows Openfiles/query
Openfiles/query
Openfiles/query
maintain objects list be enabled. (See the 
maintain objects list be enabled. (See the 
maintain objects list
Openfiles/LocalOpenfiles/
Local ON command, but you still need to reboot the system for the setting to take effect. Process 
Explorer, Handle, and Resource Monitor do not require object tracking to be turned on because
they query all system handles and create a per-process object list. Process Hacker queries per-pro-
CHAPTER 8 System mechanisms
127
Note The vast majority of GDI/User objects, on the other hand, belong to the Windows 
outside the scope of this book, but you can get more information on them from the 
are wrapped in executive objects, as well as the majority of DirectX objects (Shaders, 
Surfaces, Compositions), which are also wrapped as executive objects.
Owned by the
object manager
Owned by the
kernel
Owned by the
executive
Kernel object
Name
HandleCount
ReferenceCount
Type
Executive object
FIGURE 8-30 Executive objects that contain kernel objects.
Details about the structure of kernel objects and how they are used to implement synchronization 
are given later in this chapter. The remainder of this section focuses on how the Object Manager works 
objects are involved in implementing Windows security access checking; Chapter 7 of Part 1 thoroughly 
covers that topic.
Executive objects
Each Windows environment subsystem projects to its applications a different image of the operating 
system. The executive objects and object services are primitives that the environment subsystems use 
to construct their own versions of objects and other resources.
Executive objects are typically created either by an environment subsystem on behalf of a user 
CreateFileW function, implemented 
CreateFileW in 
turn calls the native Windows service NtCreateFile
128 
CHAPTER 8 System mechanisms
The set of objects an environment subsystem supplies to its applications might be larger or smaller 
than the set the executive provides. The Windows subsystem uses executive objects to export its own 
mutexes and semaphores are directly based on executive objects (which, in turn, are based on cor-
responding kernel objects). In addition, the Windows subsystem supplies named pipes and mailslots, 
(WSL), its subsystem driver (Lxcore.sys) uses executive objects and services as the basis for presenting 
Linux-style processes, pipes, and other resources to its applications.
components (or in the case of executive objects directly exported to Windows, in the Windows API ref-
erence documentation). You can see the full list of object types by running Winobj with elevated rights 
and navigating to the ObjectTypes directory. 
Note The executive implements a total of about 69 object types (depending on the 
Windows version). Some of these objects are for use only by the executive component that 
include Driver, Callback, and Adapter.
TABLE 8-15 Executive objects exposed to the Windows API
Object Type
Represents
Process
The virtual address space and control information necessary for the execution of 
a set of thread objects.
Thread
An executable entity within a process.
A collection of processes manageable as a single entity through the job.
Section
Token
An object with a persistent state (signaled or not signaled) that can be used for 
key to be used to refer-
ence the underlying synchronization primitive, avoiding memory usage, making 
it usable in low-memory conditions by avoiding an allocation.
Semaphore
A counter that provides a resource gate by allowing some maximum number of 
threads to access the resources protected by the semaphore.
Mutex
A synchronization mechanism used to serialize access to a resource.
Timer, IRTimer
objects, called Idle Resilient Timers, are used by UWP applications and certain 
services to create timers that are not affected by Connected Standby.
IoCompletion, IoCompletionReserve
I/O operations (known as an I/O completion port in the Windows API). The latter 
allows preallocation of the port to combat low-memory situations.
CHAPTER 8 System mechanisms
129
A mechanism to refer to data in the registry. Although keys appear in the Object 
values are associated with a key object; key values contain data about the key.
Directory
-
ing other objects or object directories.
SymbolicLink
A virtual name redirection link between an object in the namespace and another 
manage the number of work items that will be performed on the queue, how 
many threads should be responsible for the work, and dynamic creation and ter-
mination of worker threads, respecting certain limits the caller can set. Windows 
exposes the worker factory object through thread pools.
TmRm (Resource Manager), TmTx 
(Transaction), TmTm (Transaction 
Manager), TmEn (Enlistment)
transactions 
and/or enlistments as part of a resource manager or transaction manager. Objects 
can be created through the CreateTransactionManager, CreateResourceManager, 
CreateTransaction, and CreateEnlistment APIs.
RegistryTransaction
Object used by the low-level lightweight registry transaction API that does not 
registry keys.
WindowStation
An object that contains a clipboard, a set of global atoms, and a group of 
Desktop objects.
Desktop
An object contained within a window station. A desktop has a logical display 
surface and contains windows, menus, and hooks.
PowerRequest
An object associated with a thread that executes, among other things, a call 
to SetThreadExecutionState to request a given power change, such as blocking 
sleeps (due to a movie being played, for example).
EtwConsumer
Represents a connected ETW real-time consumer that has registered with the 
StartTrace API (and can call ProcessTrace to receive the events on the object queue).
CoverageSampler
Created by ETW when enabling code coverage tracing on a given ETW session.
EtwRegistration
Represents the registration object associated with a user-mode (or kernel-mode) 
ETW provider that registered with the EventRegister API.
ActivationObject
Represents the object that tracks foreground state for window handles that are 
managed by the Raw Input Manager in Win32k.sys.
ActivityReference
Tracks processes managed by the Process Lifetime Manager (PLM) and that 
should be kept awake during Connected Standby scenarios.
ALPC Port
Used mainly by the Remote Procedure Call (RPC) library to provide Local RPC 
(LRPC) capabilities when using the ncalrpc transport. Also available to internal 
services as a generic IPC mechanism between processes and/or the kernel.
Composition, 
DxgkCompositionObject, 
DxgkCurrentDxgProcessObject, 
DxgkDisplayManagerObject, 
DxgkSharedBundleObject, 
DxgkShartedProtectedSessionObject, 
DgxkSharedResource, 
DxgkSwapChainObject, 
DxgkSharedSyncObject
Used by DirectX 12 APIs in user-space as part of advanced shader and GPGPU 
capabilities, these executive objects wrap the underlying DirectX handle(s).
130 
CHAPTER 8 System mechanisms
CoreMessaging
Represents a CoreMessaging IPC object that wraps an ALPC port with its own 
customized namespace and capabilities; used primarily by the modern Input 
Manager but also exposed to any MinUser component on WCOS systems.
EnergyTracker
Exposed to the User Mode Power (UMPO) service to allow tracking and aggrega-
tion of energy usage across a variety of hardware and associating it on a per-
application basis.
Manager API, which allows communication between user-mode services and 
when using FilterSendMessage.
Partition
Enables the memory manager, cache manager, and executive to treat a region 
of physical memory as unique from a management perspective vis-à-vis the rest 
of system RAM, giving it its own instance of management threads, capabilities, 
paging, caching, etc. Used by Game Mode and Hyper-V, among others, to better 
distinguish the system from the underlying workloads.
that track anything from the Instruction Pointer (IP) all the way to low-level pro-
cessor caching information stored in the PMU counters.
RawInputManager
Represents the object that is bound to an HID device such as a mouse, keyboard, 
or tablet and allows reading and managing the window manager input that is 
being received by it. Used by modern UI management code such as when Core 
Messaging is involved.
Session
-
off/logon for third-party driver usage.
Terminal
Only enabled if the terminal thermal manager (TTM) is enabled, this represents 
a user terminal on a device, which is managed by the user mode power manager 
(UMPO).
TerminalEventQueue
Only enabled on TTM systems, like the preceding object type, this represents 
events being delivered to a terminal on a device, which UMPO communicates 
UserApcReserve
Similar to IoCompletionReserve in that it allows precreating a data structure 
to be reused during low-memory conditions, this object encapsulates an APC 
WaitCompletionPacket
Used by the new asynchronous wait capabilities that were introduced in the user-
mode Thread Pool API, this object wraps the completion of a dispatcher wait as 
an I/O packet that can be delivered to an I/O completion port.
WmiGuid
Used by the Windows Management Instrumentation (WMI) APIs when opening 
WMI Data Blocks by GUID, either from user mode or kernel mode, such as with 
IoWMIOpenBlock. 
Note Because Windows NT was originally supposed to support the OS/2 operating system, 
the mutex had to be compatible with the existing design of OS/2 mutual-exclusion objects, 
a design that required that a thread be able to abandon the object, leaving it inaccessible. 
Because this behavior was considered unusual for such an object, another kernel object—the 
mutant—was created. Eventually, OS/2 support was dropped, and the object became used by 
the Windows 32 subsystem under the name mutex (but it is still called mutant internally).
CHAPTER 8 System mechanisms
131
Object structure
footer. The Object Manager controls the object headers and footer, whereas the owning executive 
components control the object bodies of the object types they create. Each object header also contains 
an index to a special object, called the type object, that contains information common to each instance 
of the object. Additionally, up to eight optional subheaders exist: The name information header, the 
quota information header, the process information header, the handle information header, the audit 
information header, the padding information header, the extended information header, and the cre-
ator information header. If the extended information header is present, this means that the object has 
a footer, and the header will contain a pointer to it.
Object
header
Object
body
Object Type Table
Type object
Object
footer
Object name
Object directory
Security descriptor
Quota charges
Open handles list
034DEF0
2A1DDAF
6D3AED4
0A3C44A1
3DF12AB4
Type name
Pool type
Default quota charges
Access types
Generic access rights mapping
Synchronizable? (Y/N)
Methods:
Open, close, delete
parse, security
query name
Object name
Object directory
Security descriptor
Quota charges
Open handle count
Open handles list
Object type
Reference count
Additional
Data
Process
1
Process
2
Process