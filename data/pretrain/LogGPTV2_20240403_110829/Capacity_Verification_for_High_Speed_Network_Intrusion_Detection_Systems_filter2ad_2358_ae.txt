### Detecting Stepping-Stone Connections: Time Offsets and Perturbations

Zhang and Paxson, as well as Yoda and Etoh, have developed algorithms to compare time offsets in network connections. They created a quadratic-time offline algorithm for this comparison, demonstrating an initial capability to distinguish stepping-stone pairs from unrelated connection pairs based on an average delay threshold of approximately three seconds.

However, both mechanisms are vulnerable to attackers who can manipulate the timing structure of their connections to evade detection. This paper explores whether such vulnerabilities are fundamental, particularly for certain types of perturbations.

### Next Generation Evasions

Current methods for detecting stepping-stones are susceptible to evasion techniques. The primary issue is that attackers can apply stream transformations on the hosts in a stepping-stone chain, altering the relays from performing pure 'passthru' to modifying the stream in some way.

For example, in a Unix environment, one could introduce filters for "chaff embedding" and "chaff stripping." A filter (e.g., `enchaff`) could merge the standard input with meaningless 'chaff' input from another source, so that the standard input content comprises only a sub-sequence of the output stream. Conversely, `dechaff` would extract the embedded meaningful sub-sequence, while `passthru` simply copies the standard input to the standard output. By chaining these filters, the content transmitted over the incoming connection can be made to differ in sequencing and volume from the outgoing connection, even if the semantic content remains the same.

Although implementing such filters in Unix is not trivial due to buffering and pseudo-tty issues, they are feasible with moderate effort. Therefore, it is essential to consider the potential impact of stream transformations used to evade stepping-stone detectors.

In summary, the challenge for the next generation of stepping-stone monitors is to detect correlated activity between two streams when:
- One or both streams may be transformed.
- It is not possible to examine the content for correlations.

### The Constraint Hypothesis

Our research begins with the hypothesis that while arbitrary stream transformations might be effective at evading detection, certain constraints on interactive sessions may prevent the use of effective transformations. For interactive connections, we propose the following constraints:
- **Latency Constraints:** The chain of interactive connections is tied to a human user, who will find long delays in receiving results annoying and error-prone. Thus, there is a maximum tolerable delay that limits what a stream transformation can impose.
- **Representative Traffic:** Human typing and "think time" pauses exhibit statistical regularities in interpacket spacings, distinct from machine-driven communication. Specifically, interpacket spacings above 200 milliseconds are well-described by a Pareto distribution with shape parameter \(\alpha \approx 1.0\). A stream transformation that disrupts this regularity can call attention to itself and create evident correlation between ingress and egress connections.

These constraints can be summarized as:
1. The original stream and its transformation must be synchronized within a specific maximum tolerable delay.
2. The stream interarrival times must follow the universal Pareto distribution.

The second constraint is particularly powerful, as adding chaff to a stream often destroys invariant distributional properties. Therefore, we focus on conservative transforms that conserve character counts, meaning each character in one stream corresponds to one character in the other stream. Such transforms can only alter the interarrival times, effectively jittering the times to mask the similarity of the two streams.

### Investigating Evasion Transforms

Assuming the attacker is confined to conservative transforms, can they actually hide the common source of two streams? We now examine possible evasion transforms that conform to the above assumptions.

One approach is to re-randomize interarrival times. Formally:
- **Stream 1** contains characters \(c_1, ..., c_n\) at times \(t_1, ..., t_n\).
- **Stream 2** contains the same characters \(c_1, ..., c_n\) at times \(u_1, ..., u_n\).
- The interarrival times \(t_i - t_{i-1}\) are independent and identically distributed (i.i.d.) according to a known distribution function \(F\).
- **Stream 2** is defined by interarrival times \(u_i - u_{i-1}\) which are also i.i.d. \(F\), independently of \(t_i\).

This approach removes all correlations but has two major flaws:
1. **Causality:** It is possible that \(u_i < t_i\) for some characters, violating the requirement that one stream must occur strictly after the other.
2. **Desynchronization:** The difference between the cumulative counting functions behaves as a random walk, leading to unbounded desynchronization over time.

### Dyadic Block Reshuffling

To address these issues, we consider a local jittering algorithm called dyadic block reshuffling. Given Stream 1 with arrival times \(t_i\), this approach creates Stream 2 with arrival times \(u_i\) that never differ from those in Stream 1 by more than a specific guaranteed amount, but are completely independent at fine levels. The approach has the following general structure:
- For dyadic intervals \([k2^j, (k+1)2^j)\), compute arrival counts \(N^1_{j,k}\) in Stream 1.
- Method: Identify all arrivals in \(I_{j,k}\) and select random uniform arrivals in \(N^1_{j,k}\).
- For a given scale \(j_0\), create Stream 2 so that \(N^2_{j,k} = N^1_{j,k}\) for all \(j \geq j_0\).

This approach ensures that the two cumulative character count functions cross regularly, maintaining synchronization. However, on sufficiently coarse scales, the counting functions agree, leading to measurable correlations. We face a tradeoff:
- **Fine Scale \(j_0\):** Tolerable delay but high correlation.
- **Coarse Scale \(j_0\):** Worse delay but reduced correlation.

### Main Result

Our principal result is a theoretical one, showing that multiscale analysis of stream functions \(N_i\) will reveal substantial correlations at sufficiently long time scales. To make this precise, we introduce a systematic multiscale machinery using wavelets.

We fix a wavelet \(\psi(t)\) which is either a 'bump' (like a bell curve) taking only positive values or a 'wiggle' taking both positive and negative values. We form a multiscale family of translates and dilates of \(\psi\):
\[ \psi_{a,b} = \frac{\psi((t - b)/a)}{a^p} \]
where the parameter \(p\) controls the kind of analysis. If \(\psi\) is a 'bump', we use \(p = 1\); if \(\psi\) is a wiggle, we use \(p = 1/2\).

For computational reasons, we limit ourselves to a special collection of times and scales: the dyadic family \(a = 2^j\), \(b = k \cdot 2^j\). We then use the fast wavelet transform to rapidly compute the wavelet coefficients of each stream function \(N_i\), defined by:
\[ \alpha^i_{j,k} = \langle \psi_{a,b}, N_i \rangle \]

This multiscale analysis will help in identifying the correlations between the two streams, even in the presence of conservative transforms.