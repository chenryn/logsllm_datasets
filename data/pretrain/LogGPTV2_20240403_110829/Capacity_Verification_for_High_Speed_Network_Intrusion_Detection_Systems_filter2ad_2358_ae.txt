sible time oﬀsets. They developed a quadratic time oﬀ-line algorithm for doing
this comparison, and showed at least a preliminary ability to discriminate step-
ping stones pairs from unrelated connection pairs based on a threshold of about
three seconds for the average delay between connections.
The mechanisms developed by Zhang/Paxson and Yoda/Etoh are both vul-
nerable to attackers perturbing the timing structure of their connections in order
to defeat the stepping stone detection. In this paper we demonstrate that, for
some types of perturbations, such vulnerabilities do not appear fundamental.
3 Next Generation Evasions
Existing approaches to detecting stepping-stones are subject to evasions, and
the purpose of this paper is to analyze the capabilities of some of these evasions.
The central issue is that attackers will have available the ability to eﬀect stream
transformations on the hosts in a stepping-stone chain, altering the relays from
performing pure ‘passthru’ to instead modifying the stream in some way.
Multiscale Stepping-Stone Detection
21
For example, in a Unix context, one could introduce ﬁlters for “chaﬀ embed-
ding” and “chaﬀ stripping.” Imagine a ﬁlter (cid:1)enchaff(cid:2) that merges the standard
input with meaningless ‘chaﬀ’ input from another source, so that the standard
input content comprises only a sub-sequence of the output stream; (cid:1)dechaff(cid:2)
extracts the embedded meaningful sub-sequence; and (cid:1)passthru(cid:2) simply copies
standard input to standard output. By chaining together such ﬁlters, one can
conceptually arrange that the content transmitted over the connection incoming
to a site will not obey the sequencing and volume relationships of the outgoing
connection, even though the semantic content is identical.
In fact, writing such ﬁlters in Unix is not quite trivial, due to buﬀering and
pseudo-tty issues. But clearly they are realizable without a great deal of eﬀort.
Accordingly, we need to consider the possible impact of stream transformations
used to evade stepping-stone detectors.
In short, the challenge for the next generation of stepping-stone monitors is
to detect correlated activity between two streams when
– One or both streams may be transformed
– It is not possible to examine content for correlations
4 The Constraint Hypothesis
Our research began with the hypothesis that, while arbitrary stream transfor-
mations might conceivably be very eﬀective at evading detections, certain con-
straints on interactive sessions might prevent the use of eﬀective transformations.
For interactive connections, we argue for the following two constraints:
– Latency constraints. Ultimately, the chain of interactive connections is tied
to a human user, for whom it will be annoying/tiring/error-prone to have
to wait a long time for the results of their typing to be echoed or processed.
Hence, we posit a maximum tolerable delay limiting what a stream transfor-
mation can impose; anything longer will be just too painful for the user.
– Representative traﬃc. Typing (and “think time” pauses) by humans mani-
fests certain statistical regularities in the corresponding interpacket spacings,
sharply distinct from machine-driven network communication. In particular,
interpacket spacings above 200 msec (the majority) are well-described as re-
ﬂecting a Pareto distribution with shape parameter α ≈ 1.0 [9]. A stream
transformation which upsets this regularity can in principle call attention to
itself and become itself a source of evident correlation between ingress and
egress connections.
We can summarize these constraints as: (i) the original stream and its trans-
formation must be synchronized to within a certain speciﬁc maximum tolerable
delay, and (ii) the stream interarrival times must have the same distribution as
the universal Pareto distribution described above.
This second constraint is particularly powerful. It seems diﬃcult to add chaﬀ
to a stream without destroying invariant distributional properties, so in most of
22
D. Donoho et al.
the remainder of this paper we consider schemes which do not add chaﬀ. That
is, we consider transforms that conserve character counts: each character in
one stream corresponds to one character in the other stream. Such conservative
transforms can only alter the interarrival times between items in the input stream
and the output stream, and can be thought of as simply jittering the times to
mask the similarity of the two streams.
We must, however, note an important caveat regarding constraint (ii), which
is that the Pareto distribution emerges as a general property when we analyze
the statistics of many interactive interpacket times aggregated together. How-
ever, the variation in the distribution seen across diﬀerent individual interactive
sessions has not yet been characterized in the literature. It is possible that suf-
ﬁcient variation exists such that an attacker could inject chaﬀ that signiﬁcantly
alters the distribution of the interpacket timings without an anomaly detector
being able to ﬂag the altered distribution as anomalous. With that possible lim-
itation in mind, we now investigate what we can do to thwart evasion if in fact
that the attacker cannot pursue such alterations. Later, we will return to the
issue of detecting correlations despite the addition of chaﬀ.
Assuming that the attacker is conﬁned to conservative transforms, can they
actually be used to hide the common source of two streams? To answer this
question, we now examine possible evasion transforms that conform with the
above assumptions.
One aproach is to use a transform which re-randomizes interarrival times.
In words, we take a stream and ‘strip it’ of its identity by changing all the
inter-keystroke times to a stochastically independent set of inter-keystroke times.
Formally,
– Stream 1 contains Characters c1, ..., cn at Times t1, ..., tn.
– Stream 2 contains the same Characters c1, ..., cn, at Times u1, ..., un.
– The interarrival times ti − ti−1 are known to be independent and identically
– Stream 2 is deﬁned by interarrival times (ui − ui−1) which are also i.i.d. F ,
distributed (i.i.d.) according to a known distribution function F .
independently of (ti).
This approach certainly removes all correlations between the two streams,
but has two major ﬂaws. First, it is not causal: it is possible that ui  ti(cid:1) for other characters i(cid:2), while properly speaking,
one of the streams must occur strictly after the other. (Which one occurs after
the other depends on the monitor’s location with respect to the position of the
transformation element.)
It might appear that the diﬃculty with causality can be addressed by concep-
tually shifting the transformed stream in time by a ﬁxed amount, preserving its
distribution but ensuring that we always have ui ≥ ti. But a second problem re-
mains: the two streams become unboundedly out-of-sync. Indeed, the diﬀerence
between the two cumulative counting functions behaves as a random walk, and
so we know from simple probability calculations that for this scheme, |tn − un|
ﬂuctuates unboundedly as n → ∞, and that V ar (tn − un) ≥ constant·n (essen-
tially because tn−un is a sum of n i.i.d. random variables). It follows that for any
Multiscale Stepping-Stone Detection
23
given buﬀer length, eventually the delay between the two streams will surpass
that length; and that for any tolerable perceptual delay, eventually the delay
caused by the transcoding will exceed that length. In summary, transcoding to
remove all correlations leads to complete desynchronization over time, violating
the maximum tolerable delay constraint.
Fig. 2. Divergence of Independent Streams. The two cumulative counting functions
diverge arbitrarily as time progresses.
The point is illustrated in the ﬁgure 2, which shows a simulation of the
transformation discussed above, where keystroke arrivals are drawn from the
empirical distribution given in [9]. We can see that after about 5,000 symbols,
the two streams are about 500 characters out of sync.
How about partial randomization of keystroke arrival times? Consider the
following local jittering algorithm, which we call dyadic block reshuﬄing. Given
Stream 1 with arrival times ti, this approach creates Stream 2 with arrival times
ui that never diﬀer from those in Stream 1 by more than a certain speciﬁc
guaranteed amount, but which are completely independent at ﬁne levels. The
approach has the following general structure:
– For dyadic intervals [k2j, (k+1)2j), N 1
j,k in Stream 1, compute arrival counts
j,k, for all j ≥ j0, all
j,k = N 1
– Method: identify all arrivals in Ij,k and select random uniform arrivals in
N 1
j,k.
– For a given ‘scale’ j0, create Stream 2 so that N 2
k.
same interval.
The approach is illustrated in ﬁgures 3 and 4. The ﬁrst one depicts the algorithm
operating at a speciﬁc medium scale j0: This sort of local shuﬄing does not suﬀer
24
D. Donoho et al.
x
xx
x
x
x
x
x x
x x x
x
x
x x
x
x
x
x x
x x
x
o
o
oo
oo o
o
o o
o o
o o
o oo
o
o
o
o
o o o
Fig. 3. Dyadic Block Reshuﬄing. Row of ‘x’: arrival times in original stream. Row of
‘o’: arrival times in transformed stream. Black Boxes: equi-spaced blocks of time. There
are just as many times in each block for each stream. Times in transformed stream are
chosen uniformly at random within block
from de-synchronization; as ﬁgure 4 shows, the two cumulative character counts
functions cross regularly, at least once for each box.
x 104
5
Symbol Arrival Process, Two Coupled Streams
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
1
2
3
4
5
6
x 104
Fig. 4. Non-divergence of streams under dyadic block reshuﬄing
j,k = N 2
However, the constraint which is responsible for this crossing mechanism –
j,k at scales j ≥ j0 – says also that on suﬃciently coarse scales the two
N 1
counting functions agree, so there are measurable correlations between the two
streams. We are confronted by a tradeoﬀ:
– Pick j0 at ﬁne scale – we get tolerable delay but high correlation
– Pick j0 at coarser scale – we get worse delay but reduced correlation.
Is this tradeoﬀ inevitable? For example, are there local jitterings which are
more cleverly constructed and which avoid such correlations?
We can formulate our central question in the following terms. Let N1(t) be
the cumulative character counting function on the untransformed stream:
N1(t) = # of symbols in Stream 1 on [0, t)
Multiscale Stepping-Stone Detection
25
and similarly let N2(t) be the character counting function on the transformed
stream. Our earlier discussion imposes speciﬁc constraints on these functions:
1. Causality. Characters cannot emerge from the transformed stream before
they have emerged from the original stream. I.e., we must always have:
N2(t) ≤ N1(t).
(The ordering of the inequality here is a convention; we could as well impose
the reverse inequality, since, as discussed above, the direction of the causality
between the two streams depends on the location of the monitor with respect
to the transformation element.)
2. Maximum Tolerable Delay. Per the previous discussion, owing to human
factors characters must emerge from the second stream within a time interval
∆ after they emerged from the ﬁrst stream:
N2(t + ∆) ≥ N1(t).
We then ask:
1. Do Causality & Maximum Tolerable Delay combine to imply no-
ticeable correlations between properties of stream 1 and stream 2?
2. If so, what properties should we measure in order to observe such
correlations?
5 Main Result
Our principal result is a theoretical one, showing that multiscale analysis of
stream functions Ni will reveal, at suﬃciently long time scales, substantial cor-
relations. To make this precise, we introduce a systematic multiscale machinery.
Good references on multiscale analysis and wavelets abound, but we are partic-
ularly fond of [4,5].
To begin, we ﬁx a wavelet ψ(t) which is either a ‘bump’ (like a bell curve)
taking only positive values or a ‘wiggle’ taking both positive and negative values.
See Figure 5 for some examples of each. We form a multiscale family of translates
and dilates of ψ
ψa,b = ψ((t − b)/a)/ap
Here the parameter p controls the kind of analysis we are doing. If ψ is a ‘bump’,
we use p = 1; if ψ is a wiggle, we use p = 1/2. (The rationale for the diﬀerent
choices of p is given in the appendix.)
For computational reasons, we limit ourselves to a special collection of times
and scales: the dyadic family a = 2j, b = k · 2j. We can then use the fast wavelet
transform to rapidly compute the wavelet coeﬃcients of each stream function
Ni, deﬁned by
j,k = (cid:1)ψa,b, Ni(cid:2)
αi
26
D. Donoho et al.
a) Mother Haar Wavelet 
b) Father Haar Wavelet 
0.15
0.1
0.05
0
0.05
0. 1
0.15
0. 2
0.2
0.2
0.15
0.1
0.05
0
0.05
0. 1
0.15
0.2
0.4
0.6
0.8
1
c) Mother S8 Symmlet 
0.2
0.15
0.1
0.05
0
0.05
0.15
0.1
0.05
0
0
0.2
0.4
0.6
0.8