Alexa IPs, and only 1,249 (19%) of TLD IPs. The remaining servers returned a
response that either did not include a COOKIE EDNS option or included a client
cookie that did not match the one we sent. Servers that included a server cookie
in their response (this implies the inclusion of a client cookie, by speciﬁcation)
include: 167,402 (17%) of open resolvers, 43,649 (29%) of Alexa IPs, and all 1,249
of the TLD IPs that returned the correct client cookie. However, 14 resolver IPs
and 5 Alexa IPs returned a COOKIE option with a server cookie of all zeroes. The
Alexa and TLD IPs that returned server cookies were collectively authoritative
for 26,629 domains and 373 zones respectively.
Of note, 93 Alexa IPs and 41 resolvers IPs responded with a client cookie that
did not match the one we sent. For 5 Alexa IPs and 22 resolvers IPs, the value of
the client cookie returned was oﬀ by only one byte—the fourth most signiﬁcant
byte. An additional 5 Alexa and 14 resolver IPs replied with zeroed out client
cookies. A single TLD IP, one of three servers authoritative for the gm TLD,
returned a COOKIE option with all zeroes for both the client and server cookies.
The remaining unexpected responses did not follow a discernible pattern.
Overall we observe high EDNS support (70% of resolvers and >98% of
authoritative servers). However, cookie support is much lower. While nearly
one-third of Alexa IPs fully supported cookies, less than 20% of TLD IPs and
recursive resolvers did. As a result, there are still more than 100,000 authorita-
tive servers and 800,000 recursive resolvers that can be used for reﬂection attacks
because they lack a mechanism for validating client identity (Fig. 2).
Fig. 2. Incremental support for DNS Cookies across the three datasets of recursive
resolvers, TLD authoritative servers, and the top 1m Alexa authoritative servers.
Servers in the leftmost group fully support DNS Cookies.
3.2 Client-Side Cookie Support in Recursive Resolvers
During our measurements of resolvers supporting the “server” role of cookies,
we also measured their support for DNS Cookies while acting as a “client”.
Each query we issued consisted of a special domain name hosted at authoritative
servers under our control. We recorded each incoming query for the domain name
we were using and responded with NXDOMAIN and full DNS Cookie support. We
308
J. Davis and C. Deccio
observed queries to our authoritative servers from 93,395 unique IP addresses,
of which 8,471 (9.1%) sent at least one response that contained a COOKIE option.
During this measurement, we encoded the IP address of the recursive resolver
that we queried in the domain name. This reveals that 1,552,397 unique resolvers
queried our backend through the 90,000 IP addresses. This discrepancy may
be due to forwarding, as 56% of resolvers were represented by only 1000 IP
addresses. In particular, Google and Cloudﬂare handled queries for 36% and
7.0% of resolvers respectively.
In our measurement for recursive resolvers sending cookies, we found client
cookie support to be minimal. Of resolvers that queried our authoritative servers
directly, only 9.1% of over 90,000 IPs sent a cookie. This is potentially alarming
as these resolvers are not using cookies for cache poisoning protection. While
they may employ other methods, DNS Cookies oﬀer an extra layer of defense.
4 Server Cookie Analysis
For our measurement of DNS server cookies, we expand the datasets from
Sect. 3.1. For each IP address we found to be sending server cookies, we sent
an additional 60 queries. These queries were broken into 3 subsets: the ﬁrst 20
queries never included a server cookie, the next 20 included the ﬁrst server cook-
ies received, and the ﬁnal 20 included the latest server cookie we had received.
Each subset had a 1-min pause after the ﬁrst 10 queries, before issuing the ﬁnal
10 queries.
Valid server cookies may be anywhere from 8 to 32 bytes in length. Of all of
the cookies we received, >99% were 16 bytes in length.
4.1 Dynamic Cookies
Many server cookies are dynamic: changing consistently due to the inclusion
of a timestamp (representing seconds since UTC). This follows the suggested
implementation in the RFC. Additionally, the newer format of interoperable
cookies includes a timestamp in the same position.
As a result, we classify a cookie as dynamic if bytes 5–8 represent a time
within a window of 1 h in the past and 30 min in the future compared to the
current time of our querying machine (NTP synchronized).1
Over 99% of authoritative servers and 83% of recursive resolvers that sent
server cookies used at least one dynamic cookie.
Timestamps. We ﬁrst consider the timestamps being used in dynamic cookies.
We are primarily interested in three unusual patterns: timestamps consistently
1 The chance of a non-dynamic cookie being classiﬁed as dynamic is extremely small.
Our window size accepts only 5,400 values out of the 4.3 billion possible values in
the 32 bit ﬁeld.
A Peek into the DNS Cookie Jar
309
oﬀ by more than a minute, cookies that are “sticky” for short periods, and
slow-moving timestamps that update on a ﬁxed interval of 10 or more seconds.
For each dynamic server cookie, we compared the timestamp with the current
time of the querying machine (i.e., the client), which was NTP-synchronized:
tsdiﬀ = tscookie − tsclient. We consider a server cookie’s timestamp to be accurate
if |tsdiﬀ| ≤ 5s. This generous window accounts for any network delays. We
consider a timestamp to be signiﬁcantly out-of-sync if |tsdiﬀ| > 60s. Finally,
we classify “sticky” and slow-moving clock servers based upon the number of
distinct values of tsdiﬀ since this tells us that the tscookie remained static while
tsclient advanced. “Sticky” servers are deﬁned by having 8 or more distinct values
in one of the 3 subsets of queries and less than 3 distinct values in another. Slow-
moving clocks are deﬁned by not being sticky and having 10 or more distinct
values across all cookies.
Table 1 summarizes the major ﬁndings for each IP address. Over 95% of IPs
consistently returned server cookies with accurate timestamps. For 2.8% of IPs,
the timestamps were signiﬁcantly out-of-sync, likely due to an incorrect clock.
While an incorrect clock is unexpected, it is inconsequential for cookies since the
cookie value only matters to the server itself.
A category that is perhaps more interesting is IPs for which we observed a
mix of cookie timestamp behaviors—some accurate and some signiﬁcantly out-
of-sync. For example, one IP returned cookies resulting in the following values
of tsdiﬀ: (1 1 1 1 75 1 2 1 75 1. . . ). The timestamps for approximately one-
ﬁfth of the responses were consistently and signiﬁcantly out-of-sync, while the
remainder were accurate. This behavior is representative of a DNS server with
ﬁve backend servers, one of which has a clock that is 75 s out of sync.
We additionally observe that some IPs use “sticky” cookies: cookies that
remain static for short periods (typically 10 s) depending on the context. We
observed two implementations of this. In the ﬁrst implementation, cookies were
sticky when our client was not querying with a server cookie. Once our client
began sending server cookies, the server replied consistently with accurate times-
tamp cookies. We observed that 77 Alexa IPs and 775 resolver IPs followed this
pattern. The second implementation acted in the opposite manner: the server
replied with accurate timestamp cookies until our client sent one of the server
cookies in a query. The server then made that valid cookie sticky and did not
change it for a short period. We saw this pattern in only 12 Alexa IPs and 12
recursive IPs.
Our ﬁnal category consists of slow-moving clocks: cookie timestamps that
update on a ﬁxed interval of 10 or more seconds. We classiﬁed 20 Alexa IPs and
4,413 recursive resolver IPs in this category. We observed that 3,296 recursive IPs
had at least one timestamp oﬀ by more than 2 min and that 2,206 IPs displayed
strictly increasing tsdiﬀ values across every set of 10 queries. From this, we can
gather that most recursive resolver IPs are using a slow-moving clock (possibly
intentionally) with an update period of over 2 min.
The timestamps in DNS Cookies proved to be more interesting than origi-
nally expected. We found that most servers always return a cookie with a current
310
J. Davis and C. Deccio
timestamp; however, some implementations purposely hold onto a cookie for a
short period. We also discovered potential conﬁguration issues with some back-
ends of an IP having an incorrect clock. If cookies were to be enforced, clients
may be intermittently rejected if they present that backend’s server cookie to
another backend, and the cookie was too far out-of-sync to be considered valid.
Table 1. Summary of timestamps found in server cookies returned by IPs. tsdiﬀ repre-
sents the diﬀerence between the timestamp in the cookie and the querying computer’s
current time.
All Cookies Accurate (|tsdiﬀ| ≤ 5s)
All Cookies Out-of-Sync (|tsdiﬀ| > 60s) 1,615 (3.7%) 17 (1.4%)
0 (0.0%)
Mixed Accurate & Out-of-Sync
66 (0.15%)
Alexa
3,544 (2.6%)
2,980 (2.2%)
TLDs
RRs
41,639 (96%) 1,225 (98%) 131,520 (95%)
“Sticky” Cookies
Slow-Moving Clocks
89 (0.21%)
0 (0.0%)
787 (0.67%)
20 (0.05%)
0 (0.0%)
4,413 (3.2%)
IPs Using Dynamic Cookies
43,345
1,246
138,865
Interoperable Cookie.s Interoperable Cookies are designed to standardize the
generation of cookies across varying backend implementations. We classiﬁed a
server cookie as interoperable if the cookie started with 0x01000000 as speciﬁed
in the RFC draft (a one-byte version ﬁeld and three bytes reserved) and the
timestamp ﬁeld met the criteria previously mentioned.
Of the 43,737 Alexa IPs that returned a server cookie, 1,778 (4.1%) used
interoperable cookies consistently. For TLDs, 92 (7.4%) of 1,249 IPs used inter-
operable cookies. No IP in either dataset sent a mix of standard and interoperable
cookies across all of our queries.
For the 167,402 recursive resolver IPs that sent a server cookie, we found that
30,078 (18%) sent at least one interoperable cookie. However, we also found that
10,948 (6.5%) of IPs sent a mix of interoperable and standard dynamic cookies2.
This behavior was unexpected as the primary purpose of interoperable cookies
is to standardize cookies across all backend servers behind a single IP address.
Overall adoption of interoperable cookies was low in authoritative servers
(under 10%), but partial support in recursive resolvers was higher at 18%.
4.2 Static Cookies
While the majority of cookies can be classiﬁed as “dynamic”, a number of servers
reused the same cookie. We classiﬁed a server as using static cookies if only a
2 It is possible that we misclassiﬁed a standard cookie with a nonce of 0x01000000
as being interoperable. 9,990 of these IPs sent at least two cookies that appeared
interoperable in response to our 60 queries.
A Peek into the DNS Cookie Jar
311
single cookie was used across our tests and the cookie did not contain a dynamic
timestamp. We identiﬁed 38 recursive resolvers that used a unique 32-byte cookie
for the entire duration of our test. Similarly, 33 Alexa servers always replied with
a single, unique 8-byte cookie.
We further analyzed IPs for 4 Alexa domains that sent static cookies: ibb.co,
pantip.com, postimg.cc, and wikipedia.org. For each IP address authorita-
tive for these domains we sent queries every minute for four days and additional
queries with varying client cookies and client IP addresses.
Our results show that all four domains used the client IP address and client
cookie in the creation of their server cookie because changing either of these
variables aﬀected the cookie they returned. Each also changed their cookie at
the start of every hour, implying that they either changed their secret or that an
hourly timestamp was considered in the calculation. Of note, the authoritative
servers for two domains—wikipedia.org and pantip.com—returned the same
server cookie, regardless of which server was queried for the domain. However, the
servers authoritative for ibb.co and postimg.cc acted independently, implying
separate server secrets or some other unique value per server.
5 The State of Cookie Enforcement
In this section, we explore how clients and servers handle unexpected behav-
ior. We begin by demonstrating to clients and servers that our infrastructure
supports cookies. We then perform tests with missing cookies, missing EDNS,
or fake cookies. With this, we can see whether clients and servers will enforce
cookies if they know the other party supports them. If not, cookies provide little
value as an attacker could simply exclude cookies in their spoofed packets.
5.1 Client Handling of Unexpected Server Behavior
For this experiment, we forced the 1.5 million resolvers (with or without cookie
support) found in Sect. 3.2 to query our authoritative servers 6 times. We con-
ﬁgured our authoritative server to respond diﬀerently depending on the query
name it received. The response conditions we created are as follows (in order):
1. normal: Respond with full cookie support: Correct client cookie and a server
cookie—if the query included a client cookie.
2. no-cookie: Respond with no COOKIE option.
3. bad-answer: Respond with the correct client cookie (if any), BADCOOKIE
4. bad: Respond with the correct client cookie (if any), BADCOOKIE rcode, and
rcode, and an answer section.
no answer section.
5. no-edns: Respond with no OPT record (i.e., no EDNS support).
6. fake: Respond with incorrect client cookie.
For each query, we made up to 3 attempts, as the stub resolver, to receive an
answer. This experiment was run approximately one week after we discovered