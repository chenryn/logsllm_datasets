...
drwxr-x--- 3 jmenga wheel 96 27 Jul 21:49 todobackend
> kubectl apply -f k8s/db/deployment.yaml
service "todobackend-db" created
deployment.apps "todobackend-db" created
```
前面的代码是一个很好的例子，说明了为什么我们将持久卷声明分离到自己的文件中——这样做意味着我们可以轻松管理数据库服务的生命周期，而不会丢失任何数据。如果您确实想要销毁数据库服务及其数据，您可以选择删除永久卷声明，在这种情况下，Docker Desktop **hostPath** 置备程序将自动删除永久卷和任何存储的数据。
Kubernetes also supports a controller called a StatefulSet, which is specifically designed for stateful applications such as databases. You can read more about StatefulSets at [https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/).
# 创造和消费机密
Kubernetes 支持 *secret* 对象，该对象允许密码或令牌等敏感数据以加密格式安全存储，然后根据需要私下暴露给您的容器。Kubernetes 机密以键/值映射或字典格式存储，这与 Docker 机密不同，正如您在上一章中看到的，Docker 机密通常只存储机密值。
您可以使用文字值手动创建机密，或者将机密值包含在文件中并应用该文件。我建议使用文字值创建您的机密，以避免将您的机密存储在配置文件中，这些文件可能会被无意中提交并推送到您的源代码存储库:
```
> kubectl create secret generic todobackend-secret \
 --from-literal=MYSQL_PASSWORD="$(openssl rand -base64 32)" \
 --from-literal=MYSQL_ROOT_PASSWORD="$(openssl rand -base64 32)" \
 --from-literal=SECRET_KEY="$(openssl rand -base64 50)"
secret "todobackend-secret" created
> kubectl describe secrets/todobackend-secret
Name: todobackend-secret
Namespace: default
Labels: 
Annotations: 
Type: Opaque
Data
====
MYSQL_PASSWORD: 44 bytes
MYSQL_ROOT_PASSWORD: 44 bytes
SECRET_KEY: 69 bytes
```
在前面的示例中，您使用`kubectl create secret generic`命令创建了一个名为`todobackend-secret`的机密，该机密存储了三个机密值。请注意，每个值都存储有一个与预期环境变量同名的键，这将使这些值的配置易于使用。
现在创建了机密，您可以配置`todobackend`和`db`部署来使用机密。Kubernetes 包含一种称为 secret 的特殊卷类型，允许您将机密安装在容器中的可配置位置，然后您的应用可以安全地私下读取这些机密。
# 为数据库服务使用机密
让我们首先更新在`k8s/db/deployment.yaml`文件中定义的数据库部署资源，以使用`todobackend-secret`:
```
apiVersion: v1
kind: Service
metadata:
  name: todobackend-db
spec:
  selector:
    app: todobackend-db
  clusterIP: None 
  ports:
  - protocol: TCP
    port: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todobackend-db
  labels:
    app: todobackend-db
spec:
  selector:
    matchLabels:
      app: todobackend-db
  template:
    metadata:
      labels:
        app: todobackend-db
    spec:
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: todobackend-data
 - name: secrets
 secret:
 secretName: todobackend-secret          items:
 - key: MYSQL_PASSWORD
 path: MYSQL_PASSWORD
 - key: MYSQL_ROOT_PASSWORD
 path: MYSQL_ROOT_PASSWORD
      containers:
      - name: db
        image: mysql:5.7
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "mysqlshow -h 127.0.0.1 -u $(MYSQL_USER) -p$(cat /tmp/secrets/MYSQL_PASSWORD)"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
 - name: secrets
 mountPath: /tmp/secrets
 readOnly: true
        env:
        - name: MYSQL_DATABASE
          value: todobackend
        - name: MYSQL_USER
          value: todo
 - name: MYSQL_ROOT_PASSWORD_FILE
 value: /tmp/secrets/MYSQL_ROOT_PASSWORD
 - name: MYSQL_PASSWORD_FILE
 value: /tmp/secrets/MYSQL_PASSWORD
```
您首先创建一个名为`secrets`的卷，其类型为`secret`，引用了我们之前创建的`todobackend-secret`。默认情况下，所有机密项目都可用，但是您可以通过可选的`items`属性控制哪些项目发布到卷中。因为`todobackend-secret`包含了特定于 todobackend 应用的`SECRET_KEY`机密，所以我们配置`items`列表以排除该项目，并且只显示`MYSQL_PASSWORD`和`MYSQL_ROOT_PASSWORD`键。请注意，指定的`path`是必需的，并表示为基于机密卷在每个容器中的安装位置的相对路径。
然后将`secrets`卷以只读方式装载到`db`容器中的`/tmp/secrets`中，并更新与密码相关的环境变量以引用机密文件，而不是直接使用环境中的值。请注意，每个机密值都将在一个文件中创建，该文件是根据装载机密卷的文件夹中的密钥命名的。
要部署我们的新配置，您首先需要删除数据库服务及其关联的持久卷，因为这包括以前的凭据，然后重新部署数据库服务。当您执行删除和应用操作时，通过引用整个`k8s/db`目录，您可以非常容易地做到这一点，而不是单独指定每个文件:
```
> kubectl delete -f k8s/db
service "todobackend-db" deleted
deployment.apps "todobackend-db" deleted
persistentvolumeclaim "todobackend-data" deleted
> kubectl apply -f k8s/db
service "todobackend-db" created
deployment.apps "todobackend-db" created
persistentvolumeclaim "todobackend-data" created
```
一旦您重新创建了`db`服务，您就可以使用`kubectl exec`命令来验证`MYSQL_PASSWORD`和`MYSQL_ROOT_PASSWORD`机密项目是否已写入`/tmp/secrets`:
```
> kubectl exec $(kubectl get pods -l app=todobackend-db -o=jsonpath='{.items[0].metadata.name}')\
 ls /tmp/secrets
MYSQL_PASSWORD
MYSQL_ROOT_PASSWORD
```
# 为应用使用机密
我们现在需要通过修改`k8s/app/deployment.yaml`文件来更新 todobackend 服务以消耗我们的机密:
```
...
...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todobackend
  labels:
    app: todobackend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: todobackend
  template:
    metadata:
      labels:
        app: todobackend
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
      - name: public
        emptyDir: {}
 - name: secrets
 secret:
 secretName: todobackend-secret
          items:
 - key: MYSQL_PASSWORD
            path: MYSQL_PASSWORD
 - key: SECRET_KEY
            path: SECRET_KEY
      initContainers:
      - name: collectstatic
        image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: public
          mountPath: /public
        command: ["python3","manage.py","collectstatic","--no-input"]
        env:
        - name: DJANGO_SETTINGS_MODULE
          value: todobackend.settings_release
      containers:
      - name: todobackend
        image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            port: 8000