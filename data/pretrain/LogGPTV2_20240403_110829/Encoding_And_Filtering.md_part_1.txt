# Web Application Penetration Testing
## eXtreme Encoding and Filtering
### Section 01 | Module 01
© Caendra Inc. 2020
All Rights Reserved

## Table of Contents
- **MODULE 01: ENCODING AND FILTERING**
  - 1.1 Data Encoding Basics
  - 1.2 Filtering Basics

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.2**

## Learning Objectives
In this module, we will cover different types of data encoding. We will explore how to recognize, encode, and decode various formats, as well as discuss filters and their functionality.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.3**

## 1.1 Data Encoding Basics
Although web applications serve diverse purposes and use various technologies, data encoding is a fundamental aspect that cannot be overlooked. From a penetration testing perspective, understanding the type of data encoding in use and its mechanisms is crucial for ensuring tests are conducted effectively.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.4**

### 1.1.1 Dissecting Encoding Types
Let's briefly examine the primary types of data encoding used in web applications:
- URL encoding
- HTML encoding
- Base (32|64) encoding
- Unicode encoding

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.5**

#### 1.1.1.1 URL Encoding
According to RFC 3986, URLs transmitted over the Internet must contain characters within the US-ASCII character set. Unsafe characters must be encoded. URL-encoding, or percent-encoding, replaces such characters with a "%" followed by two hexadecimal digits representing the octet value.

**Reference:**
- [RFC 3986, Section 2.1](http://tools.ietf.org/html/rfc3986#section-2.1)

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.6**

The following table outlines which characters are safe and which require encoding in URLs:

| Classification                | Included Characters                    | Encoding Required? |
|-------------------------------|----------------------------------------|--------------------|
| Alphanumeric                  | [0-9a-zA-Z], special characters $-_.+!*'(), reserved characters | No (if used for their reserved purposes) |
| ASCII Control Characters      | ISO-8859-1 ranges 00-1F hex (0-31 decimal) and 7F (127 decimal) | Yes |
| Non-ASCII Characters          | ISO-Latin set 80-FF hex (128-255 decimal) | Yes |
| Reserved Characters           | $ & + , / : ; = ? @ (excluding blank space) | Yes (if not used for their defined, reserved purposes) |
| Unsafe Characters             | Blank/empty space, " # % { } | \^ ~ [ ] ` | Yes |

**Note:** Reserved characters only need encoding when not used for their defined, reserved purposes.

**Reference:**
- [Stop Using Unsafe Characters in URLs](http://perishablepress.com/stop-using-unsafe-characters-in-urls/)

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.7**

Some commonly encoded characters include:

| Character | Purpose in URI | Encoding |
|-----------|----------------|----------|
| #         | Separate anchors | %23      |
| ?         | Separate query string | %3F     |
| &         | Separate query elements | %26    |
| %         | Indicates an encoded character | %25   |
| /         | Separate domain and directories | %2F   |
| +         | Indicates a space | %2B      |
| Space     | Not recommended | %20 or + |

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.8**

#### 1.1.1.2 HTML Encoding
In HTML, it is essential to ensure the integrity of URLs and that user agents (browsers, etc.) display data correctly. The main concerns are specifying the character encoding for the document and preserving the intended meaning of special characters.

To generate potential attacks and test cases, you should understand both the encoding and decoding processes.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.9**

##### 1.1.1.2.1 Document Character Encoding
There are several methods to instruct user agents about the character encoding used in a document, using HTTP and/or HTML directives.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.10**

###### Define Character Encoding Using HTTP
According to HTTP 1.1 RFC, documents can send a `charset` parameter in the `Content-Type` header to specify the character encoding. For example:
```http
Content-Type: text/html; charset=utf-8
```

If not defined, the default charset is ISO-8859-1 (Latin 1).

**References:**
- [RFC 2616](https://tools.ietf.org/html/rfc2616)
- [ISO/IEC 8859-1](http://en.wikipedia.org/wiki/ISO/IEC_8859-1)

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.11**

To set the appropriate charset, you can modify server settings or use server-side scripting. Here are examples in different programming languages:

- **PHP:**
  ```php
  header('Content-type: text/html; charset=utf-8');
  ```
- **ASP.Net:**
  ```csharp
  Response.ContentType = "text/html; charset=utf-8";
  ```
- **JSP:**
  ```jsp
  <%@ page contentType="text/html; charset=UTF-8" %>
  ```

**References:**
- [PHP Header Function](http://www.php.net/header)
- [ASP.Net HttpResponse](http://msdn.microsoft.com/en-us/library/system.web.httpresponse)

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.12**

You can also set the character encoding using the HTML `<meta>` directive. For example, to specify UTF-8 encoding:
```html
<meta charset="UTF-8">
```
With HTML5, you can also write:
```html
<meta charset="UTF-8">
```

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.13**

##### 1.1.1.2.2 Character References
In HTML, some special characters have multiple meanings. For example, the `<` character can be:
- An HTML tag delimiter
- A comparison operator in JavaScript

To preserve the intended meaning, use HTML entities. For example:
- `<` becomes `&lt;`
- `>` becomes `&gt;`

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.14**

#### 1.1.1.3 Base (32|64) Encoding
Base encoding schemes, such as Base32 and Base64, are widely used to represent binary data as ASCII strings.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.15**

##### 1.1.1.3.1 Base 36
Base 36 encoding uses digits [0-9] and letters [A-Z]. In JavaScript, you can encode and decode using:
```javascript
(1142690).toString(36); // Encode
parseInt("ohpe", 36); // Decode
```

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.16**

##### 1.1.1.3.2 Base 64
Base64 is a common binary-to-text encoding scheme. It is not an encryption method, but many developers mistakenly use it for sensitive data.

The Base64 alphabet includes digits [0-9], letters [a-zA-Z], and the characters `+` and `/`. Different implementations may use other characters for padding (`=`).

**Reference:**
- [Base64 Implementations and History](http://en.wikipedia.org/wiki/Base64#Implementations_and_history)

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.17**

To encode a message in Base64, the algorithm divides the message into groups of 6 bits and converts each group to its corresponding ASCII character. The allowed characters are 64 (2^6 = 64).

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.18**

Here is a conversion table for Base64 encoding:

| Binary (dec) | Base64 | Binary (dec) | Base64 | Binary (dec) | Base64 | Binary (dec) | Base64 |
|--------------|--------|--------------|--------|--------------|--------|--------------|--------|
| 000000 (0)   | A      | 010000 (16)  | Q      | 100000 (32)  | g      | 110000 (48)  | w      |
| 000001 (1)   | B      | 010001 (17)  | R      | 100001 (33)  | h      | 110001 (49)  | x      |
| 000010 (2)   | C      | 010010 (18)  | S      | 100010 (34)  | i      | 110010 (50)  | y      |
| 000011 (3)   | D      | 010011 (19)  | T      | 100011 (35)  | j      | 110011 (51)  | z      |
| 000100 (4)   | E      | 010100 (20)  | U      | 100100 (36)  | k      | 110100 (52)  | 0      |
| 000101 (5)   | F      | 010101 (21)  | V      | 100101 (37)  | l      | 110101 (53)  | 1      |
| 000110 (6)   | G      | 010110 (22)  | W      | 100110 (38)  | m      | 110110 (54)  | 2      |
| 000111 (7)   | H      | 010111 (23)  | X      | 100111 (39)  | n      | 110111 (55)  | 3      |

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.19**

This concludes the overview of data encoding basics. In the next section, we will delve into filtering basics.

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.20**