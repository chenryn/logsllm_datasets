Web Application
Penetration Testing
eXtreme
Encod%69ng and
/^Filtering$/
S e c t i o n 0 1 | M o d u l e 0 1
© Caendra Inc. 2020
All Rights Reserved
Table of Contents
MODULE 01 | ENCOD%69NG AND /^FILTERING$/
1.1 Data Encoding Basics
1.2 Filtering Basics
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.2
Learning Objectives
In this module we will talk about different types of data
encoding.
We will see how to recognize, encode, and decode
several different formats as well as discuss filters and
how they work.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.3
1.1
Data Encoding
Basics
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.4
1.1 Data Encoding Basics
Even though web applications have different purposes,
technologies, etc., the use of data encoding is something
that cannot be neglected.
From a penetration testing point of view, understanding
what kind of data encoding is being used and how it works
is fundamental in ensuring that the tests are performed as
intended.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.5
1.1.1 Dissecting Encoding Types
Let’s briefly analyze the main types of data encoding used
in web-oriented applications:
• URL encoding
• HTML encoding
• Base (32|64) encoding
• Unicode encoding
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.6
1.1.1.1 URL Encoding
As stated in RFC 3986, URLs sent over the Internet must
contain characters in the range of the US-ASCII code
character set. If unsafe characters are present in a URL,
encoding them is required.
The URL-encoding, or percent-encoding, replaces
characters outside the allowed set with a "%" followed by
the two hexadecimal digits representing the numeric value
of the octet.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.7
http://tools.ietf.org/html/rfc3986#section-2.1
1.1.1.1 URL Encoding
The table shown here is a simple character encoding chart that is
useful in explaining which characters are “safe” and which
characters should be encoded in URLs.
CLASSIFICATION INCLUDED CHARACTERS ENCODING REQUIRED?
Alphanumeric[0-9a-zA-Z], special characters$-_.+!*'(), and reserved characters
Safe characters used for their reserved purposes (e.g., question mark used to denote a query NO
string)
Includes the ISO-8859-1 (ISO-Latin) character ranges 00-1F hex (0-31 decimal)
ASCII Control characters YES
and 7F (127 decimal.)
Non-ASCII characters Includes the entire “top half” of the ISO-Latin set 80-FF hex (128-255 decimal.) YES
Reserved characters $ & + , / : ; = ? @(not including blank space) YES*
Unsafe characters Includes the blank/empty space and"  # % { } | \^ ~ [ ] ` YES
*NOTE: Reserved characters only need encoding when not used for their defined, reserved purposes.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.8
http://perishablepress.com/stop-using-unsafe-characters-in-urls/
1.1.1.1 URL Encoding
Some commonly encoded characters are:
CHARACTER PURPOSE IN URI ENCODING
# Separate anchors %23
? Separate query string %3F
& Separate query elements %24
% Indicates an encoded character %25
/ Separate domain and directories %2F
+ Indicates a space %2B
 Not recommended %20 or +
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.9
1.1.1.2 HTML Encoding
Even in HTML, it is important to consider the information
integrity of the URL’s and ensure that user agents (browsers
& co.) display data correctly.
There are two main issues to address: inform the user
agent on which character encoding is going to be used in
the document and preserve the real meaning of some
characters that have special significance.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.10
1.1.1.2 HTML Encoding
In order to generate potential attacks and test cases, you
should not only know how this kind of encoding works, but
also know how the decoding mechanism work.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.11
1.1.1.2.1 Document Character Encoding
There are several ways to instruct the user agent on which
character encoding has been used in a given document.
These methods use the HTTP protocol and/or HTML
directives.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.12
1.1.1.2.1 Document Character Encoding
Define character encoding using HTTP
According to HTTP 1.1 RFC, documents transmitted via
HTTP can send a charset parameter in the header to
specify the character encoding of the document sent. This
is the HTTP header: Content-Type.
If this header is sent, we will see something like this:
Content-Type: text/html; charset=utf-8
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.13
https://tools.ietf.org/html/rfc2616
1.1.1.2.1 Document Character Encoding
Define character encoding using HTTP
The Content-Type header indicates the media type of the
body sent to the recipient. In the case of the HEAD method, it
indicates the media type that would have been sent if the
request had been a GET. If not defined, the RFC defines as
the default charset the ISO-8859-1.
"8-bit single-byte coded graphic character sets" aka Latin 1
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.14
http://en.wikipedia.org/wiki/ISO/IEC_8859-1
1.1.1.2.1 Document Character Encoding
Define character encoding using HTTP
To make the server send out the appropriate charset
information, it is possible to change the server settings or
use the server-side scripting language.
Let’s look at some examples in different programming
languages.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.15
1.1.1.2.1 Document Character Encoding
Define character encoding using HTTP
PHP> Uses the header() function to send a raw HTTP header:
header('Content-type: text/html; charset=utf-8');
ASP.Net> Uses the response object:
JSP> Uses the page directive:
http://www.php.net/header WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.16
http://msdn.microsoft.com/en-us/library/system.web.httpresponse
1.1.1.2.1 Document Character Encoding
Define character encoding using HTTP
It is also possible to set the character encoding using the
HTMLdirective META. For example, this code is useful in
specifying the character encoding of the current document
to UTF-8:
With HTML5, is also possible to write: 
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.17
1.1.1.2.2 Character References
In HTML, there are some special characters that can have
multiple meanings. For example, the character Hello
• a comparison operator in JavaScript
if (x 
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.29
http://www.php.net/manual/en/function.base-convert.php
1.1.1.3.1 Base 36
Base 36 Encoding Scheme: JavaScript
JavaScript uses two functions:
• (1142690).toString(36)
• 1142690..toString(36) // encode
parseInt("ohpe",36) // decode
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.30
1.1.1.3.2 Base 64
Base 64 Encoding Scheme
Base64 is one of the most widespread binary-to-text
encoding schemes to date. It was designed to allow binary
data to be represented as ASCII string text.
It is an encoding scheme, not an encryption one. This is not
clear to many developers who use Base64 instead of
encryption to store or transmit sensitive information.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.31
1.1.1.3.2 Base 64
Base 64 Encoding Scheme
The alphabet of the Base64 encoding scheme is composed
of digits [0-9] and Latin letters, both upper and lower case
[a-zA-Z], for a total of 62 values. To complete the character
set to 64 there are the plus (+) and slash (/) characters.
Different implementations, however, may use other values
for the latest two characters and the one used for padding
(=). For a complete list look here.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.32
http://en.wikipedia.org/wiki/Base64#Implementations_and_history
1.1.1.3.2 Base 64
Base 64 Encoding Scheme
To encode a message in Base 64, the algorithm divides the
message into groups of 6 bits* and then converts each
group, with the respective ASCII character, following the
conversion table.
*That's why the allowed characters are 64 (26 = 64).
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.33
1.1.1.3.2 Base 64
Base 64 Encoding Scheme
Binary (dec) Base64 Binary (dec) Base 64 Binary (dec) Base 64 Binary (dec) Base 64
000000 (0) A 010000 (16) Q 100000 (32) g 110000 (48) w
000001 (1) B 010001 (17) R 100001 (33) h 110001 (49) x
000010 (2) C 010010 (18) S 100010 (34) i 110010 (50) y
000011 (3) D 010011 (19) T 100011 (35) j 110011 (51) z
000100 (4) E 010100 (20) U 100100 (36) k 110100 (52) 0
000101 (5) F 010101 (21) V 100101 (37) l 110101 (53) 1
000110 (6) G 010110 (22) W 100110 (38) m 110110 (54) 2
000111 (7) H 010111 (23) X 100111 (39) n 110111 (55) 3