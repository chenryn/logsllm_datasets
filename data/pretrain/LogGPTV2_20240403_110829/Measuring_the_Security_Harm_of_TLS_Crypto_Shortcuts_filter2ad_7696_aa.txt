# Measuring the Security Impact of TLS Cryptographic Shortcuts

**Authors:**
- Drew Springall†
- Zakir Durumeric†‡
- J. Alex Halderman†

**Affiliations:**
- † University of Michigan
- ‡ International Computer Science Institute

**Contact:**
- {aaspring, zakir, jhalderm}@umich.edu

## Abstract
Transport Layer Security (TLS) is designed to provide robust protection against network-based attackers and mass surveillance. However, many implementations employ security shortcuts to reduce the computational and network overhead. This paper reports the findings of a nine-week study that measures the use and security impact of these shortcuts on HTTPS sites among the Alexa Top Million domains. We found widespread deployment of DHE and ECDHE private value reuse, TLS session resumption, and TLS session tickets. These practices significantly diminish the benefits of forward secrecy, with 38% of top million HTTPS sites vulnerable to decryption if the server is compromised within 24 hours, and 10% within 30 days, regardless of the selected cipher suite. Additionally, we investigated the sharing of TLS secrets and session state across domains, revealing that the theft of a single secret value can compromise connections to tens of thousands of sites. Our results suggest that site operators need to better understand the trade-offs between optimizing TLS performance and maintaining strong security, especially in the face of nation-state adversaries with a history of aggressive, large-scale surveillance.

## 1. Introduction
TLS is designed to support perfect forward secrecy (PFS) to provide resistance against future compromises of endpoints [15]. A TLS connection using a non-PFS cipher suite can be recorded and later decrypted if the attacker gains access to the server’s long-term private key. In contrast, a forward-secret cipher suite prevents this by conducting an ephemeral finite field Diffie-Hellman (DHE) or elliptic curve Diffie-Hellman (ECDHE) key exchange. These key exchange methods use the server’s long-term private key only for authentication, so obtaining it after the session has ended will not help the attacker recover the session key. For this reason, the security community strongly recommends configuring TLS servers to use forward-secret ciphers [27, 50].

PFS deployment has increased substantially following the OpenSSL Heartbleed vulnerability, which potentially exposed the private keys of 24–55% of popular websites [19], and Edward Snowden’s disclosures about mass surveillance by intelligence agencies [36, 38]. Despite the recognized importance of forward secrecy, many TLS implementations that use it also take various cryptographic shortcuts that weaken its intended benefits in exchange for better performance. Ephemeral value reuse, session ID resumption [13], and session ticket resumption [52] are commonly deployed performance enhancements that maintain secret cryptographic state for periods longer than the lifetime of a connection. While these mechanisms reduce computational overhead for the server and latency for clients, they also create important caveats to the security of forward-secret ciphers.

The reduction of forward secrecy guarantees by TLS performance enhancements has been noted before [33, 54], but their real-world security impact has never been systematically measured. To address this, we conducted a nine-week study of the Alexa Top Million domains. We report on the prevalence of each performance enhancement and attempt to characterize each domain’s vulnerability window—the length of time surrounding a forward-secret connection during which an adversary can trivially decrypt the content if they obtain the server’s secret cryptographic state. Alarmingly, we find that this window is over 24 hours for 38% of Top Million domains and over 30 days for 10%, including prominent Internet companies such as Yahoo, Netflix, and Yandex.

In addition to these protocol-level shortcuts, many providers employ SSL terminators for load balancing or other operational reasons [39]. SSL terminators perform cryptographic operations on behalf of a destination server, translating clients’ HTTPS connections into unencrypted HTTP requests to an internal server. We find that many SSL terminators share cryptographic state between multiple domains. Sibling domains' ability to affect the security of each other’s connections also adds caveats to forward secrecy. We observed widespread state sharing across thousands of groups of domains, including tens of thousands of sites that use CloudFlare and thousands operated by Google.

The widespread use of TLS performance enhancements may make them an attractive target for nation-state adversaries. Our findings show that a relatively small attack against an SSL terminator (to recover cryptographic state) could be leveraged to trivially decrypt up to months worth of connections to many different web sites. The cryptographic state could conceivably also be obtained by legal compulsion, such as a warrant, subpoena, or national security letter.

To our knowledge, we are the first to quantify this attack surface and its dangers, and the first to show that real-world TLS security benefits far less from forward secrecy than statistics about support for PFS ciphers would suggest.

## 2. Background
### 2.1 Forward Secrecy in TLS
Transport Layer Security (TLS) and its predecessor, Secure Sockets Layer (SSL), are cryptographic protocols that operate below the application layer and provide end-to-end encrypted channels for diverse applications, including HTTPS, IMAPS, and SMTP. Perfect forward secrecy (PFS) in TLS protects the confidentiality of connections in the event that the server is later compromised by an attacker. The threat model assumes an adversary who passively observes and records the TLS handshakes and encrypted traffic between a victim client and server. At some point after the connection has ended, the attacker gains access to the server’s secret internal state—perhaps by exploiting a memory leak like Heartbleed [11], by seizing the hardware and performing live-memory forensics, or by computing the server’s private key by factoring its public RSA modulus [25]. If the server correctly provides forward secrecy, the attacker will not be able to decrypt connections recorded in the past.

To achieve forward secrecy, TLS supports using Diffie-Hellman key exchange to negotiate temporary symmetric keys for the session. The protocol supports two main flavors of Diffie-Hellman: finite-field ephemeral Diffie-Hellman (DHE) and elliptic curve ephemeral Diffie-Hellman (ECDHE). In DHE handshakes, the server selects a finite cyclic group G and a generator g. It picks a random value a and sends \( g^a \mod G \) to the client, while the client picks a random b and sends \( g^b \mod G \) to the server. Both sides then compute \( g^{ab} \) and use it to derive the session keys. Per RFC 5246 [14], both the client and server should generate a fresh a and b for each handshake. ECDHE functions similarly but over an elliptic curve group. The client generates a random \( d_A \) and sends \( d_A G \) to the client, while the client generates \( d_B \) and sends \( d_B G \) to the server. Both then derive session keys from \( d_A d_B G \).

Whether the handshake uses DHE or ECDHE, the server still needs to authenticate itself to the client to prevent man-in-the-middle attacks, and it does so using its long-term private key and certificate. However, a successful attack on the authentication would require compromising the private key before the TLS handshake completes. After that, as long as the client and server both discard the session state, the connection data should be infeasible to decrypt.

Using forward-secret TLS handshakes is considered a security best practice [50], and all modern browsers support them. However, many server implementations, including Apache and Nginx, must be manually configured to use them.

### 2.2 Session Resumption
To reduce connection overhead, TLS allows subsequent sessions to resume a prior session without completing a full handshake. The protocol provides two mutually exclusive mechanisms to do this: session ID resumption and session tickets. Both mechanisms allow the server to skip a costly public-key operation on later connections and save one network round trip of latency. As we will show, server support for these resumption methods is pervasive—50% of Mozilla Firefox TLS sessions are resumptions [43]—and of the Alexa Top Million websites that support HTTPS, 83% support session ID resumption and 76% support session tickets.

#### Session ID Resumption
Session ID resumption was introduced in SSL 2.0 [26] and allows a client and server to quickly resume an existing session. During the initial handshake, the server provides a random session ID, which both the client and server maintain in a table that maps IDs to session keys and connection states from recent connections. Upon reconnection, the client provides this session ID in its first protocol message, Client Hello. If the server recognizes the session, it will respond with a Server Hello message containing the same session ID, after which both sides immediately resume an encrypted connection using the original session keys. RFC 5246 suggests a maximum 24-hour session lifetime, after which the server should discard the cached key and state.

#### Session Ticket Resumption
TLS session tickets were introduced in RFC 4507 [51] and redefined in RFC 5077 [52]. They allow session resumption without requiring the server to maintain per-connection state. Instead, the server provides the client with an opaque encrypted “ticket” containing the session keys and other data necessary to resume the session. The client includes this ticket in later connections as an offer to resume without the full handshake. More precisely, when the client first connects, it includes an empty session ticket extension in its Client Hello. The server includes a corresponding extension in the Server Hello message and, after the key exchange completes, sends the client an opaque ticket and a lifetime “hint” in a New Session Ticket message. The client then stores a mapping of the server’s identity to the session ticket and cryptographic state required for the client to resume the connection. On subsequent connections, the client includes the ticket in its Client Hello. If the server accepts the ticket, the pair completes an abbreviated handshake, similar to session ID resumption. During this process, the server can reissue the client a fresh session ticket, but the cipher and session keys remain constant.

The ticket can contain arbitrary data, but RFC 5077 recommends a structure consisting of a randomly generated key name (identifying the symmetric keys used to encrypt the ticket), an IV, the encrypted state, and a MAC. The RFC recommends that the server encrypt the state using AES-CBC and a 128-bit key and construct the MAC using HMAC-SHA-256 with a 256-bit key. (Note that these keys are never revealed to the client, which merely stores the encrypted ticket and returns it in later connections.) Throughout this work, we refer to the symmetric encryption key as the “Session Ticket Encryption Key” (STEK). Common server implementations, including Nginx and Apache, support both loading pregenerated STEKs from the filesystem and generating random STEKs upon server initialization.

#### Impacts on Forward Secrecy
Both of these performance enhancements degrade the protection achieved by forward-secret TLS handshakes [33, 54]. The client and server will store the same symmetric key for use in future sessions, extending the lifetime of the ephemeral handshake. More importantly, for session tickets, compromising the server’s STEK would allow decryption of all prior connections for which that STEK was used. If a server’s STEK never changes, the site provides no effective forward secrecy to connections that use TLS session tickets, regardless of the key exchange mechanism used.

### 2.3 Reusing Ephemeral Values
While not a session resumption technique, servers often reuse DHE and ECDHE values to reduce computation for each initial handshake. For instance, with DHE, a server might repeatedly use the same value a so that it does not have to keep computing \( g^a \). As we will discuss later, we empirically find that at least 7.2% of HTTPS domains in the Alexa Top Million reuse DHE values and 15.5% reuse ECDHE values.

Since the client will generate its own unique values (b, \( g^b \)), the session keys derived from \( g^{ab} \) will differ for every connection. However, an attacker who obtains the server’s a can compute the session keys for any observed connection that uses it. Thus, forward secrecy is not actually achieved until the server stops reusing this value and securely erases it. If the server’s a never changes, then a PFS key exchange does not provide any effective forward secrecy.

We discuss how session resumption and ephemeral value reuse affect the TLS ecosystem’s attack surface—and attacker incentives—in Section 6.

### 2.4 Changes in TLS 1.3
Although still in the draft stage, TLS 1.3 [48] makes many changes to session resumption and other security properties. Session IDs and session tickets are nominally obsoleted, but the mechanisms persist via the pre-shared keys (PSKs). A PSK identifier is issued by the server in a New Session Ticket message after the first handshake is complete and then included in the second connection’s Client Hello. The identifier itself may contain a database lookup key (analogous to a session ID) and an encrypted state (analogous to a session ticket).

## Table 1: Support for Forward Secrecy and Resumption
| Metric | Alexa 1M Domains (14Apr2016) | Non-blacklisted Domains | Browser-trusted TLS Domains |
|--------|------------------------------|-------------------------|------------------------------|
| Support DHE Ciphers | 957,116 | 952,991 | 427,313 |
| ≥ 2x Same Server KEX Value | 252,340 | 18,113 | 12,461 |
| All Same Server KEX Value | - | - | - |
| Support ECDHE Ciphers | 958,470 | 954,338 | 438,383 |
| ≥ 2x Same Server KEX Value | 390,120 | 60,370 | 41,683 |
| All Same Server KEX Value | - | - | - |
| Issue Session Tickets | 956,094 | 951,978 | 435,150 |
| ≥ 2x Same STEK ID | 354,697 | 353,124 | 334,404 |
| All Same STEK ID | - | - | - |

This table summarizes the support for forward secrecy and resumption mechanisms among the Alexa Top Million domains, non-blacklisted domains, and browser-trusted TLS domains.