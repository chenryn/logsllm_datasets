title:Measuring the Security Harm of TLS Crypto Shortcuts
author:Drew Springall and
Zakir Durumeric and
J. Alex Halderman
Measuring the Security Harm of TLS Crypto Shortcuts
Drew Springall† Zakir Durumeric†‡ J. Alex Halderman†
† University of Michigan ‡ International Computer Science Institute
{aaspring, zakir, jhalderm}@umich.edu
ABSTRACT
TLS has the potential to provide strong protection against
network-based attackers and mass surveillance, but many im-
plementations take security shortcuts in order to reduce the
costs of cryptographic computations and network round trips.
We report the results of a nine-week study that measures
the use and security impact of these shortcuts for HTTPS
sites among Alexa Top Million domains. We ﬁnd widespread
deployment of DHE and ECDHE private value reuse, TLS
session resumption, and TLS session tickets. These practices
greatly reduce the protection afforded by forward secrecy:
connections to 38% of Top Million HTTPS sites are vulnera-
ble to decryption if the server is compromised up to 24 hours
later, and 10% up to 30 days later, regardless of the selected
cipher suite. We also investigate the practice of TLS secrets
and session state being shared across domains, ﬁnding that in
some cases, the theft of a single secret value can compromise
connections to tens of thousands of sites. These results sug-
gest that site operators need to better understand the tradeoffs
between optimizing TLS performance and providing strong
security, particularly when faced with nation-state attackers
with a history of aggressive, large-scale surveillance.
1.
INTRODUCTION
TLS is designed with support for perfect forward secrecy
(PFS) in order to provide resistance against future compro-
mises of endpoints [15]. A TLS connection that uses a non-
PFS cipher suite can be recorded and later decrypted if the
attacker eventually gains access to the server’s long-term pri-
vate key. In contrast, a forward-secret cipher suite prevents
this by conducting an ephemeral ﬁnite ﬁeld Difﬁe-Hellman
(DHE) or ephemeral elliptic curve Difﬁe-Hellman (ECDHE)
key exchange. These key exchange methods use the server’s
long-term private key only for authentication, so obtaining
Permission to make digital or hard copies of part or all of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for third-party components of
this work must be honored. For all other uses, contact the owner/author(s).
IMC 2016 November 14–16, 2016, Santa Monica, CA, USA
c(cid:13) 2016 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4526-2/16/11.
DOI: http://dx.doi.org/10.1145/2987443.2987480
it after the TLS session has ended will not help the attacker
recover the session key. For this reason, the security com-
munity strongly recommends conﬁguring TLS servers to
use forward-secret ciphers [27, 50]. PFS deployment has in-
creased substantially in the wake of the OpenSSL Heartbleed
vulnerability—which potentially exposed the private keys
for 24–55% of popular websites [19]— and of Edward Snow-
den’s disclosures about mass surveillance of the Internet by
intelligence agencies [36, 38].
Despite the recognized importance of forward secrecy,
many TLS implementations that use it also take various cryp-
tographic shortcuts that weaken its intended beneﬁts in ex-
change for better performance. Ephemeral value reuse, ses-
sion ID resumption [13], and session ticket resumption [52]
are all commonly deployed performance enhancements that
work by maintaining secret cryptographic state for periods
longer than the lifetime of a connection. While these mech-
anisms reduce computational overhead for the server and
latency for clients, they also create important caveats to the
security of forward-secret ciphers.
TLS performance enhancements’ reduction of forward se-
crecy guarantees has been pointed out before [33, 54], but
their real-world security impact has never been systemati-
cally measured. To address this, we conducted a nine-week
study of the Alexa Top Million domains. We report on the
prevalence of each performance enhancement and attempt
to characterize each domain’s vulnerability window—the
length of time surrounding a forward-secret connection dur-
ing which an adversary can trivially decrypt the content if they
obtain the server’s secret cryptographic state. Alarmingly, we
ﬁnd that this window is over 24 hours for 38% of Top Mil-
lion domains and over 30 days for 10%, including prominent
Internet companies such as Yahoo, Netﬂix, and Yandex.
In addition to these protocol-level shortcuts, many providers
employ SSL terminators for load balancing or other op-
erational reasons [39]. SSL terminators perform crypto-
graphic operations on behalf of a destination server, trans-
lating clients’ HTTPS connections into unencrypted HTTP
requests to an internal server. We ﬁnd that many SSL termi-
nators share cryptographic state between multiple domains.
Sibling domains’ ability to affect the security of each other’s
connections also adds caveats to forward secrecy. We ob-
served widespread state sharing across thousands of groups
33of domains, including tens of thousands of sites that use
CloudFlare and thousands operated by Google.
The widespread use of TLS performance enhancements
may make them an attractive target for nation-state adver-
saries. Our ﬁndings show that a relatively small attack against
an SSL terminator (to recover cryptographic state) could be
leveraged to trivially decrypt up to months worth of connec-
tions to many different web sites. The cryptographic state
could conceivably also be obtained by legal compulsion, such
as a warrant, subpoena, or national security letter.
To our knowledge, we are the ﬁrst to quantify this attack
surface and its dangers, and the ﬁrst to show that real-world
TLS security beneﬁts far less from forward secrecy than
statistics about support for PFS ciphers would suggest.
2. BACKGROUND
Transport Layer Security (TLS) and its predecessor, Secure
Sockets Layer (SSL), are cryptographic protocols that operate
below the application layer and provide end-to-end encrypted
channels for diverse applications, including HTTPS, IMAPS,
and SMTP. This section explains how TLS provides forward
secrecy and facilitates session resumption. We refer readers
to RFC 5280 [12] for a detailed description of the protocol.
2.1 Forward Secrecy in TLS
In TLS, perfect forward security [15] protects the conﬁ-
dentiality of connections in the event that the server is later
compromised by an attacker. Its threat model is an adversary
who passively observes and records the TLS handshakes and
encrypted trafﬁc between a victim client and server. At some
point after the connection has ended, the attacker gains access
to the server’s secret internal state—perhaps by exploiting a
memory leak like Heartbleed [11], by seizing the hardware
and performing live-memory forensics, or by computing the
server’s private key by factoring its public RSA modulus [25].
If the server correctly provides forward secrecy, the attacker
will not be able to decrypt connections recorded in the past.
In order to achieve forward secrecy, TLS supports us-
ing Difﬁe-Hellman key exchange to negotiate temporary
symmetric keys for the session. The protocol supports two
main ﬂavors of Difﬁe-Hellman: ﬁnite-ﬁeld ephemeral Difﬁe-
Hellman (DHE) and elliptic curve ephemeral Difﬁe-Hellman
(ECDHE). In DHE handshakes, the server selects a ﬁnite
cyclic group G and a generator g. It picks a random value
a and sends ga mod G to the client, while the client picks
a random b and sends gb mod G to the server. Both sides
then compute gab and use it to derive the session keys. Per
RFC 5246 [14], both the client and server should generate
a fresh a and b for each handshake. ECDHE functions sim-
ilarly but over an elliptic curve group. The client generates
a random dA and sends dAG to the client, while the client
generates dB and sends dBG to the server. Both then derive
session keys from dAdBG.
Whether the handshake uses DHE or ECDHE, the server
still needs to authenticate itself to the client in order to prevent
man-in-the-middle attacks, and it does so using its long-term
private key and certiﬁcate. However, a successful attack on
2
the authentication would require compromising the private
key before the TLS handshake completes. After that, as long
as the client and server both discard the session state, the
connection data should be infeasible to decrypt.
Using forward secret TLS handshakes is considered a secu-
rity best practice [50], and all modern browsers support them.
However, many server implementations, including Apache
and Nginx, must be manually conﬁgured to use them.
2.2 Session Resumption
In order to reduce connection overhead, TLS allows subse-
quent sessions to resume a prior session without completing a
full handshake. The protocol provides two mutually exclusive
mechanisms to do this: session ID resumption and session
tickets. Both mechanisms allow the server to skip a costly
public-key operation on later connections, and they save one
network round trip of latency. As we will show, server sup-
port for these resumption methods is pervasive—50% of
Mozilla Firefox TLS sessions are resumptions1 —and of the
Alexa Top Million websites that support HTTPS, 83% sup-
port session ID resumption and 76% support session tickets.
Session ID Resumption
Session ID resumption was in-
troduced in SSL 2.0 [26] and allows a client and server to
quickly resume an existing session. During the initial hand-
shake, the server provides a random session ID, which both
the client and server maintain in a table that maps IDs to
session keys and connection states from recent connections.
Upon reconnection, the client provides this session ID in
its ﬁrst protocol message, Client Hello. If the server recog-
nizes the session, it will respond with a Server Hello message
containing the same session ID, after which both sides im-
mediately resume an encrypted connection using the original
session keys. RFC 5246 suggests a maximum 24-hour ses-
sion lifetime, after which the server should discard the cached
key and state.
Session Ticket Resumption
TLS session tickets were in-
troduced in RFC 4507 [51] and redeﬁned in RFC 5077 [52].
They allow session resumption without requiring the server
to maintain per-connection state. Instead, the server provides
the client with an opaque encrypted “ticket” containing the
session keys and other data necessary to resume the session.
The client includes this ticket in later connections as an offer
to resume without the full handshake. More precisely, when
the client ﬁrst connects, it includes an empty session ticket
extension in its Client Hello. The server includes a corre-
sponding extension in the Server Hello message and, after
the key exchange completes, sends the client an opaque ticket
and a lifetime “hint” in a New Session Ticket message. The
client then stores a mapping of the server’s identity to the
session ticket and cryptographic state required for the client
to resume the connection. On subsequent connections, the
client includes the ticket in its Client Hello. If the server ac-
cepts the ticket, the pair completes an abbreviated handshake,
like in session ID resumption. During this process, the server
1As seen by Mozilla Firefox Telemetry [43] from March 3 to
March 15, 2016.
34can reissue the client a fresh session ticket, but the cipher and
session keys remain constant.
The ticket can contain arbitrary data, but RFC 5077 rec-
ommends a structure consisting of a randomly generated key
name (identifying the symmetric keys used to encrypt the
ticket), an IV, the encrypted state, and a MAC. The RFC rec-
ommends that the server encrypt the state using AES-CBC
and a 128-bit key and construct the MAC using HMAC-SHA-
256 with a 256-bit key. (Note that these keys are never re-
vealed to the client, which merely stores the encrypted ticket
and returns it in later connections.) Throughout this work, we
refer to the symmetric encryption key as the “Session Ticket
Encryption Key” (STEK). Common server implementations,
including Nginx and Apache, support both loading pregen-
erated STEKs from the ﬁlesystem and generating random
STEKs upon server initialization.
Impacts on Forward Secrecy Both of these performance
enhancements degrade the protection achieved by forward-
secret TLS handshakes [33, 54]. The client and server will
store the same symmetric key for use in future sessions, ex-
tending the lifetime of the ephemeral handshake. More impor-
tantly, for session tickets, compromising the server’s STEK
would allow decryption of all prior connections for which
that STEK was used. If a server’s STEK never changes, the
site provides no effective forward secrecy to connections
that use TLS session tickets, regardless of the key exchange
mechanism used.
2.3 Reusing Ephemeral Values
While not a session resumption technique, servers will
oftentimes reuse DHE and ECDHE values to reduce compu-
tation for each initial handshake. For instance, with DHE, a
server might repeatedly use the same value a so that it does
not have to keep computing ga. As we will discuss later,
we empirically ﬁnd that at least 7.2% of HTTPS domains in
the Alexa Top Million reuse DHE values and 15.5% reuse
ECDHE values.
Since the client will generate its own unique values (b,
gb), the session keys derived from gab will differ for every
connection. However, an attacker who obtains the server’s a
can compute the session keys for any observed connection
that uses it. Thus, forward secrecy is not actually achieved
until the server stops reusing this value and securely erases
it. If the server’s a never changes, then a PFS key exchange
does not provide any effective forward secrecy.
We discuss how session resumption and ephemeral value
reuse affect the TLS ecosystem’s attack surface—and at-
tacker incentives—in Section 6.
2.4 Changes in TLS 1.3
Although still in the draft stage, TLS 1.3 [48] makes many
changes to session resumption and other security properties.
Session IDs and session tickets are nominally obsoleted, but
the mechanisms persist via the pre-shared keys (PSKs).
A PSK identiﬁer is issued by the server in a New Session
Ticket message after the ﬁrst handshake is complete and then
included in the second connection’s Client Hello. The identi-
ﬁer itself may contain a database lookup key (analogous to
3
DHE
ECDHE
Session Tickets
Alexa 1M domains (14Apr2016)
Non-blacklisted domains
Browser-trusted TLS domains
Support DHE ciphers
≥ 2x same server KEX value
All same server KEX value
Alexa 1M domains (15Apr2016)
Non-blacklisted domains
Browser-trusted TLS domains
Support ECDHE ciphers
≥ 2x same server KEX value
All same server KEX value
Alexa 1M domains (17Apr2016)
Non-blacklisted domains
Browser-trusted TLS domains
Issue session tickets
≥ 2x same STEK ID
All same STEK ID
957,116
952,991
427,313
252,340
18,113
12,461
958,470
954,338
438,383
390,120
60,370
41,683
956,094
951,978
435,150
354,697
353,124
334,404
Table 1: Support for Forward Secrecy and Resumption