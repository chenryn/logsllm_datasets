In a nutshell, a secret s is used together with some fresh
randomness or a nonce r to derive a new authentication
string a := A3(s, r), and a fresh shared key k := A8(s, r).
This key k is now used to encrypt further communica-
tion between the base station and the mobile phone. The
corresponding protocol is depicted in Figure 2. The above
protocol has some interesting features regarding the require-
ments discussed above. In particular, we can see that step 3
authenticates the mobile against the base station and there-
fore prevents fraud, in particular an impersonation attack.
In addition, each mobile is given a temporary identiﬁer t in
step 4. This prevents tracking and hence privacy attacks. In
the steps at the bottom of the ﬁgure, the protocol generates
a fresh session key k that ensures that communication is
protected from eavesdropping. Only jamming as a special
availability attack is not prevented in this context. However,
Figure 2.
Initial Handshake in GSM
technically, there is nothing we can do from a cryptographic
perspective to counter this attack. We therefore rely on
other protocol layers to take care of this (e.g., by frequency
hopping).
C. Initial Problems
Without
taking any further parts of the protocol
into
account, we start with an analysis of known weaknesses and
possible remedies.
First, we note that the key derivation algorithm A8 is used
for any encryption algorithm A5/1, /2, /3—and that A5/2 is
far weaker than its counterparts. In particular, A5/2 has been
speciﬁcally weakened for the use in non-Western countries
and can be broken in a matter of seconds [28]. Apart from
using a weak algorithm, GSM made a second, vital mistake:
Rather than ﬁrst encrypting the message and then encoding
it for air transit, GSM speciﬁed it the other way around. As a
result, cryptanalysis has plenty of redundancy to work with
(which was subsequently exploited in the attack referenced
above). Moreover, each mobile phone can be told which
algorithm to use in a speciﬁc network by this very network.
Hence, the following attack is feasible:
1) The mobile device is tricked by its counterpart into
believing that only A5/2 is supported by the current
network.
2) Key derivation takes place with some “random” value
3) A phone conversation using the corresponding key k
r (cf. Figure 2).
is encrypted.
4) This session key is derived by breaking A5/2 [28].
5) Now, all conversation encrypted with this session
key k can be eavesdropped, no matter which encryp-
tion was used.
Interestingly, the latter also applies to phone conversations
which previously were recorded by an eavesdropper. The
reason is the following observation:
the mobile has no
control over the random value r, but an active attacker
has full control over it. The problem is made worse by
the fact that no network authentication takes place. Hence,
everybody can set up a rogue base station, called an “IMSI
Catcher” (International Mobile Subscriber Identity) [29].
101
mobiledevicebasestation1.uuniqueidentifyer2.rrandomness3.authenticationstringa:=A3(s,r)4.ttemporaryidk:=A8(s,r)5.k:=A8(s,r)6.Today, it is possible to set up a rogue base station using
open source software and cheap hardware [30], [31].
Before criticizing GSM for this ﬂaw, we need to recall
that the technology is more than 25 years old. Back then, it
was actually reasonable to assume that nobody would be
able to duplicate a complete base station. As “lesson to
be learned” we note that we should be careful about our
security assumptions and the progress of technology. Fixed
key-sizes come immediately into mind here. In addition, the
wireless connection of a device and a radio access node of
a mobile network can always be attacked by entities in the
same physical area. They are called evil twins as they imitate
the parameters of the legitimate communication partner.
In addition, we want to draw the attention to A5/3 and
especially the cipher it involves (KASUMI), which is also
used in UMTS (cf. Section V-F). While stronger than A5/2,
severe weaknesses on its cryptographic strength are emerg-
ing [32]. While A5/3 is slightly tweaked so that the attack is
not directly applicable, this raises doubts about the overall
strength of KASUMI. In addition, it is not conclusively
shown that A5/3 cannot be exploited in a similar way as
KASUMI. This is mainly a security research question, as the
algorithm needs to be tricked in processing a large quantity
of GPRS (General Packet Radio Service) data and also into
a special mode of operation. The latter is not obvious at the
moment.
D. SMS Infrastructure Flaws
Beside phone and Internet services, smartphones are
typically capable of sending text messages such as SMS
and MMS. Because these features are an additional source
of revenue for the carrier, in the early days of SMS the
carrier boosted their service by permitting the sending of
complimentary SMS through web providers. In 2005, Enck
et al. evaluated the security impact of such SMS interfaces
on the availability of mobile phone networks [33]. They
demonstrated the ability to deny voice service to large cities
by using a desktop computer connected to the Internet with a
cable modem. Serror et al. evaluated the impact of abusing
the paging channel to overload the network in 2006 [34].
In 2009, Traynor et al. reﬁned the previously [33] revealed
attack by using more realistic network conditions [35]. They
showed that adversaries can achieve blocking rates of more
then 70% with only limited resources. Therefore, one ques-
tion looms: how can the SMS infrastructures robustness be
improved so that abusing desired features can be mitigated?
We will again pick up the topic of denying a service in
Section VI-A.
E. MMS Vulnerabilities
In contrast to SMS, MMS does not suffer from the previ-
ously named GSM shortcomings because it does not use a
GSM control channel to submit messages. While GSM con-
nections are circuit-switched, GPRS—a GSM extension—
makes use of packet-switching. MMS, a service capable of
sending larger text messages or even multimedia messages
from phone to phone, utilizes GPRS as infrastructure and
WAP, SMTP and HTTP as transmission protocols. Its archi-
tecture consists mainly of one MMS Relay/Server and user
agents residing on the mobile.
Racic et al. implemented a proof-of-concept attack that
exploits MMS vulnerabilities to exhaust the mobile phone’s
battery [36]. In this scenario their ﬁrst step is to build a
target hit list by sending MMS notiﬁcation messages from a
false MMS Relay/Server, leading the victims to a malicious
web server. When connecting to the web server, the victims
disclose their IP addresses. The attacker takes advantage of
the revelation by sending periodically UDP packets to the
victim’s mobile phone. As a result, the attacker prevents the
victim’s mobile phone from reaching standby mode. Since
it is extremely battery consuming for mobile devices to stay
in ready mode, they say that batteries are drained 22-times
faster than in a mix of ready and standby mode. Taking
into account that mobile phones do not indicate receipts of
UDP packets, victims will not recognize the exhaustion of
the battery until they observes the battery status or realize
that the battery is empty.
To make this scenario even worse, an attacker neither
needs to build a target
list nor send MMS to potential
victims. It is sufﬁcient to know the network address ranges
assigned to a network operator in order to send UDP packets
to all corresponding IP addresses. Thereby, all customers
of an MNO would suffer from this exploit if their MNO
assigns public instead of private IP addresses to a mobile
phone. It remains an open question how service providers
can handle stateless protocols to solve potential incidents
without restricting the usability.
F. Initial Remedy: UMTS
UMTS (Universal Mobile Telecommunications System)
is a successor of GSM and tries to avoid (most of) its
ﬂaws [37]. We will now investigate how well this went.
First, GSM failed to encrypt some vital services such as
signaling or SMS. As a result, the corresponding services
are vulnerable to attacks, as discussed in the two previous
sections. All in all, this ﬂaw was ﬁxed in UMTS: encryption
and encoding is in the correct order, the encryption algorithm
has been updated to KASUMI, and parameter choices have
been improved. In addition, all communication over the air
link is encrypted within the network (in contrast to base
station) and the network is authenticated against the mobile
phone. This way, rogue base stations are avoided. Finally,
UMTS was designed to be compatible with GSM.
To make our point, we compare the GSM handshake
(steps 2, 3, 5 of Figure 2) with its counterpart in UMTS
(Figure 3), the latter being called Authentication and Key
Agreement (AKA). Note that there are two additional ﬁnal
steps. Sending the result e of f2 to the base station and
102
UMTS network [41]. By a well-timed, low-volume signaling
attack, they can overload the control plane and detrimentally
affect the key elements of the 3G infrastructure. Another
DoS attack was demonstrated by Zhao et al. in 2009. By
jamming the presence service, a core service of the IP
Multimedia Subsystem (IMS), a chain reaction could be
initialized, that blocks all services of IMS [42].
In theory, we could also extend this analysis to the 4G
mobile networks. In practice, this is out of the scope of this
paper. A detailed security analysis is therefore left as an
open research question.
Figure 3. Authentication and Key Agreement (AKA) in UMTS
G. Side Channel Analysis
comparing it with the expected result x. Functions f1–f5
are used to generate session keys and intermediate values
from the fresh randomness r. First, we want to note that
the mobile phone (to be more precise,
the UICC) can
verify that the randomness r is actually fresh. This can be
achieved by using a block cipher in counter mode. Second,
the authentication string a ensures network authentication
as it depends on a shared secret k. Third, the authentication
string a also contains an algorithm identiﬁer. This is used
to compute the MAC (Message Authentication Code) of all
messages (including e). Therefore an attacker does not proﬁt
from “downgrading” a connection from a strong to a weak
encryption algorithm.
However, the weakness on KASUMI is also valid here.
Again, UMTS uses a slightly tweaked version of KASUMI,
so it is not possible to apply the attack directly. But it is an
interesting research question if this could be actually done.
Despite the cryptographically stronger AKA, UMTS suf-
fers from an old GSM weakness: the IMSI is sent in clear
and,
the
integrity keys used between the mobile device and the Radio
Network Controller (RNC) are transmitted unencrypted to
the RNC [38]. Therefore, some ﬂaws remain even in the
GSM successor.
therefore, could be eavesdropped. Furthermore,
Recalling the evil twin base stations of GSM, we inspect
if they also work on UMTS. The answer is afﬁrmative.
Note that in GSM networks only the mobile device has
to authenticate itself (cf. Section V-A), and for increased
security, UMTS was designed to provide mutual authen-
tication of mobile devices and the network. Additionally,
signaling information is integrity-protected as a mean to
prevent evil twin base stations [39]. However, UMTS was
also designed to be compatible to GSM, whenever no suf-
ﬁcient UMTS coverage can be provided. This compatibility
makes a roll-back attack possible, where the compatibility
mechanisms between these two mobile networking standards
are exploited [40].
In addition, since no standard is perfect, several ﬂaws have
been found in the past years in UMTS. In 2007, a Denial of
Service (DoS) attack was identiﬁed by Lee et al. that exploits
the unique vulnerabilities of the signaling/control plane in an
Taking a purely theoretical point of view, any algorithm
a produces for an input i some output o, more formally:
o := a(i). However, this is only the theoretical picture. In
reality, there is more to it. Actually, we have the following
situation o, γ := a(i) where γ is additional side channel
information that can be observed by an attacker. This can
be the rate of cache hits or misses, memory access, power
consumption, or similar data sources. For cryptographic
algorithms, this is fatal since i usually contains sensitive key
material which should not be exposed. It has been demon-
strated that this cannot be guaranteed in general [43]. In the
case of SIM cards, attacks date back to 2002 [44]. Recently,
Cryptographic Research has made a similar claim [45],
although no attacks are known at the moment. Still, as
they have pioneered research in this direction, their claims
have some weight. In addition, they point to an interesting
research area, i.e., to exploit this attack vector in current
devices.
However,
the overall attack scenario of side channel
analysis is not very likely in the case of SIM cards. Here,
an attacker needs physical access to the SIM card to per-
form some measurements. While possible, this is not very
plausible since users typically take their devices with them.
Hence, the typical attack setting that is far more likely (and
thus more interesting): are there side channels in SIM cards
which can be accessed through malicious software on the
phone? And in the more general case: Are there any side
channels which can be accessed through the mobile phone?
In particular, using exact timings it might be possible to
establish such a side channel. Furthermore, could we use
side channels such as cache hits to extract sensitive key
material from some applications? For desktop computers,
this has already been demonstrated [46].
H. Back End Systems
This section adds an attack vector to mobile device
security that is not obvious at ﬁrst glance, namely threats
against the back end systems of mobile networks. However,
a security incident in 2005 demonstrated how insecure back
end systems can even compromise the privacy of mobile
device users, as we now explain.
103
mobiledevicebasestation1.r,afreshrandomness,authentication2.c:=f3(k,r),i:=f4(k,r)(cryptokey,integritykey)3.e:=f2(k,r)(rEsult)4.x=e?(eXpectedresultequalsrEsult?)1) Danger Hiptop/T-Mobile Sidekick: The Hiptop device
(named “Sidekick” in the T-Mobile version) of the US based
company Danger, Inc. is a feature phone with a closed oper-
ating system. It differs from other mobile phones in storing
its media data not only on the device itself, but mirroring the
data in the MNO’s network for Web accessibility. The data
is protected by a password only. That means, it is possible to
break a user’s on-device data conﬁdentiality by not attacking
the mobile device at all.
The incident took place in the US T-Mobile network
in 2005 and led to the publication of phone numbers and
private data of prominent US citizens. It is reported by the
Washington Post [47] to have been a combination of web
application attacks and social engineering attacks. The web
applications had a vulnerability that allowed to reset the
access password to the mirrored data, resulting in locking
the legitimate user out of its own account and giving the
new password to the attacker. The only necessary piece of
information for this attack was the mobile phone number.
To ﬁnd the mobile phone number of a prominent client
of the MNO, a social engineering attack was performed
on an MNO’s store, tricking the employees to reveal an
access password for internal systems of the MNO. From
this starting point, it was possible to map names to phone
numbers.
2) Attacks Against Home Location Register (HLR): Until
now we evaluated a lot of security issues concerning the
cryptography and the infrastructure. But what happens when
a malicious software infects a number of mobile phones?
Traynor et al. studied the impact of malicious devices, a
mobile botnet strictly speaking, on a mobile network core