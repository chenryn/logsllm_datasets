Database Systems, pp. 202-210. 2003.
[8] C. Dwork and K. Nissim. “Privacy-Preserving Datamining
on Vertically Partitioned Data- bases.” CRYPTO ’04,
LNCS 3152, pp. 528-544. 2004.
[9] B. Goethals, S. Laur, H. Lipmaa and T. Mielik¨ainen. “On
Private Scalar Product Computation for
Privacy-Preserving Data Mining.” ICISC, LNCS 3506,
pp. 104-120. 2004.
[10] O. Goldreich. “The Foundations of Cryptography, Basic
Applications.” Cambridge University Press. 2004.
[11] O. Goldreich, S. Micali and A. Wigderson. “How to Play
Any Mental Game.” Proc. of the 19th STOC, pp.
218-229. 1987.
[12] Y. Isahi, E. Kushilevitz, R. Ostrovsky, and A. Sahai.
“Zero-Knowledge from Secure Multiparty Computation.”
ACM Symposium on Theory of Computing. 2007
[13] G. Jagannathan and R. Wright. “Privacy-Preserving
Distributed k-Means Clustering over Arbitrarily
Partitioned Data.” KDD ’05, pp. 593-599. 2005.
[14] S. Jha, L. Kruger and P. McDaniel. “Privacy Preserving
Clustering.” 10th European Symp. on Research in
Computer Security, pp. 397-417. 2005.
[15] E. Kiltz, G. Leander and J. Malone-Lee. “Secure
Computation of the Mean and Related Statistics.” TCC
’05, LNCS 3378, pp. 283-302. 2005.
[16] Y. Lindell and B. Pinkas. “Privacy Preserving Data
Mining.” CRYPTO ’00, LNCS 1880, pp. 36-54. 2000.
[17] S. Oliveira and O.R. Za¨ıane. “Privacy Preserving
Clustering by Data Transformation.” Proc. 18th Brazilian
Symposium on Databases, pp. 304-318. 2003.
[18] M. Ben-Or, S. Goldwasser, and A. Wigderson.
“Completeness Theorems for Non-Cryptographic
Fault-Tolerant Distributed Computation.” Proc. 20th
Annual ACM Symp. on Theory of Computing, pp. 1-10.
1988.
[19] R. Ostrovsky, Y. Rabani, L. Schulman, and C. Swamy.
“The Eﬀectiveness of Lloyd-Type Methods for the
k-Means Problem.” FOCS. 2006.
[20] M. Naor and B. Pinkas. “Oblivious Polynomial
Evaluation.” SIAM J. of Computing, Vol. 35 No. 5, pp.
1254-1281. 2006.
[21] P. Paillier. “Public Key Cryptosystems Based on
Composite Degree Residuosity Classes.” Advances in
Cryptology EURO- CRYPT ’99 Proceedings, LNCS 1592,
pp. 223-238. 1999.
[22] J. Reif and S. Tate. “Optimal Size Integer Division
Circuits.” SIAM J. on Computing, pp. 912-924. 1990.
[23] C. Su, F. Bao, J. Zhou, T. Takagi and K. Sakurai.
“Privacy- Preserving Two-Party K-Means Clustering via
Secure Approximation.” 21st Inter. Conf. on Advanced
Information Networking and Applications Workshops, pp.
385-391. 2007.
[24] J. Vaidya and C. Clifton. “Privacy-Preserving k-Means
Clustering over Vertically Partitioned Data.” Proc. 9th
ACM SIGDD Inter. Conf. on Knowledge Discovery and
Data Mining, 206-215. 2003.
[25] R. Wright and Z. Yang. “Privacy-Preserving Bayesian
Net- work Structure Computation on Distributed
Heterogeneous Data.” Proc. of the 10th ACM SIGKDD
Inter. Conf. on Knowledge Discovery and Data Mining,
pp. 713-718. 2004.
[26] A.C.C. Yao. “How to Generate and Exchange Secrets.”
Proc. of the 27th IEEE Symp. on Foundations of
Computer Science, pp. 162-167. 1986.
[27] H. Zhu and F. Bao. “Oblivious Scalar-Product Protocols.”
11th Australasian Conference on Information
Security and Privacy, LNCS 4058, pp. 313-323. 2006.
APPENDIX
A. ALTERNATIVE COMPUTATION OF THE
K-MEANS CLUSTER CENTERS
It is possible that the iterative nature of the Lloyd Step
may reveal undesirable information to the two parties: the
number of iterations that are performed in the Lloyd Step.
We suggest three diﬀerent approaches to handle this privacy
concern:
• Approach 1: Reveal Number of Iterations. If Alice and
Bob agree beforehand that this minor leak of informa-
tion will not compromise the privacy of their data, they
can choose to run our algorithm (as is) so that this is
the only privacy leak.
• Approach 2: Set the Number of Iterations to be Propor-
tional to n. In general, the more data points, the more
iterations are necessary to reach the stopping condi-
tion. Based on n, one could therefore approximate the
expected number of iterations that should be necessary,
and ﬁx our protocol to perform this many iterations.
• Approach 3: Fix the Number of Iterations to be Con-
stant. In [19], it is argued that if the data points enjoy
certain “nice” properties, then the number of iterations
is extremely small (i.e. with high probability, only 2
iterations are necessary). Thus, ﬁxing the number of
iterations to be some (small) constant will (with high
probability) not result in a premature termination of
the Lloyd Step (i.e. the stopping condition will likely
have been reached).
Each approach has its pros and cons. Approach 1 guar-
antees the accuracy of the ﬁnal output (as the stopping
criterion has been met) in the minimal number of steps,
but leaks information about how many iterations were per-
formed. Approach 2 succeeds with high probability, but may
unnecessarily aﬀect communication complexity if the ﬁxed
number of iterations is higher than necessary. Approach 3
keeps communication minimal, but runs a higher risk of los-
ing accuracy of the ﬁnal output (i.e. if the stopping criterion
hasn’t been reached after the ﬁxed number of iterations have
been completed). In the body of our paper, we assumed Ap-
proach 1, although it is trivial to modify our algorithm to
implement instead Approach 2 or 3.
B.
IMPLEMENTATIONS OF PROTOCOLS
FROM SECTION 2.2
We describe here possible implementations of each of the
(non-referenced) protocols listed in Section 2.2. We pro-
vide these implementations solely for the purpose of com-
pletion, and make no claim concerning their eﬃciency in
relation to other existing protocols that perform the same
tasks. Since we need each of these protocols to be secure
against an honest-but-curious adversary, we need the com-
munication in each subprotocol to be in the generic form
of Lemma 1 or to utilize other protocols that are already
known to be secure; and indeed this will be the case in each
of the following.
B.1 Description of the Find Minimum of 2
Numbers Protocol
Input. As input to this protocol, Alice has (X A, Y A) ∈ Z2
Bob has (X B , Y B ) ∈ Z2
N
Output. As output, Alice and Bob should share:
N and
L = (loc. of min. of (X, Y )) :=(0,
1,
if X ≤ Y
if X ≥ Y
where if X = Y , then L should be 0 half of the time and 1 half
of the time. (Sometimes we would instead like this protocol to
output 0 always if X = Y . This modiﬁcation is easily accounted
for by setting r in (12) below to be 0).
Cost. Communication cost of this protocol is O(K 2).
Note. This protocol will be completed by performing a stan-
dard minimum comparison on the binary representations of these
numbers. Let X = c1c2 . . . cK and Y = d1d2 . . . dK be the binary
representations of X and Y , where K = ⌈log N ⌉ is the security
parameter. In general, note that the following formula will return
the location of the minimum of (X, Y ), where the formula returns
0 if X  Y , and a random r ∈ {0, 1} if X = Y :
L = (c1 ⊕ d1)c1 + (c1 ⊕ d1 ⊕ 1)(c2 ⊕ d2)c2+
(c1 ⊕ d1 ⊕ 1)(c2 ⊕ d2 ⊕ 1)(c3 ⊕ d3)c3 + · · · +
(c1 ⊕ d1 ⊕ 1) . . . (cK−1 ⊕ dK−1 ⊕ 1)(cK ⊕ dK )cK +
(c1 ⊕ d1 ⊕ 1) . . . (cK ⊕ dK ⊕ 1)r
(12)
where ⊕ signiﬁes XOR, and the other operations are performed
in ZN . Shares of L can then be obtained by running the SPP
many times, utilizing the fact that:
c ⊕ d = c + d − 2cd,
(13)
where addition on the left hand side is in Z2 and on the right
hand side is in ZN . We omit the speciﬁc details due to space
consideration.
B.2 Description of the Find Minimum of k
Numbers Protocol
This subprotocol is a simple extension of the above.
If the
communication cost of the FM2NP is O(ξs), then this protocol
will have communication complexity O(kξs).
B.3 Description of the To Binary Protocol
Input. As input to this protocol, Alice and Bob share X =
X A + X B < N/2.
Output. If X = x1x2 . . . xK is the binary representation for X,
then as output Alice and Bob should share each bit xi = xA
i + xB
i
(Mod N ).
Cost. Communication cost of this protocol is O(K 2).
Note. This protocol is made slightly more diﬃcult due to the
two possibilities:
if γ = 0
if γ = 1
if X A AND X B < N/2
if X A OR X B ≥ N/2
where
X A + X B =(X A + X B ,
γ =(0,
1,
X A + X B − N,
In particular, if X A := a1a2 . . . aK , X B := b1b2 . . . bK , 2K − N =
d1d2 . . . dK , then:
a1a2 . . . aK
b1b2 . . . bK
+ γ ∗ (d1d2 . . . dK )
BIN(X) =
x1x2 . . . xK ,
(14)
2K (performed base
where addition above is standard addition in Z
2, with carry-over). We perform addition (base 2) in the usual
way: start on the right and add the bits via XOR, keeping track
of carry-over. Again we omit the details, but note that addition
modulo 2 can be handled by using the SPP together with (13).
B.4 Description of the Bigger Than N
Protocol
Input. As input to this protocol, Alice and Bob share X =
X A + X B , where X < N/2.
Output. This protocol should output shares of 0 if X A + X B <
N (in Z), and shares of 1 otherwise.
Cost. Communication cost of this protocol is O(K).
Note. Deﬁne:
α :=(0,
1,
if X A < N/2
if X A ≥ N/2
β :=(0,
1,
if X B < N/2
if X B ≥ N/2
(15)
Then due to the hypothesis that X < N/2, it is immediate that
if O = OA + OB denotes the output of this protocol, then:
1,
O =(0,
=(0,
1,
if X A + X B (Mod N ) = X A + X B
if X A + X B (Mod N ) = X A + X B − N
if α ∨ β = 0
if α ∨ β = 1
where ∨ denotes bitwise ‘OR.’ Thus, viewing the left and right
hand sides of the below equation as arithmetic in ZN , and the
middle as arithmetic in Z2, we have that:
OA + OB = α ∨ β = α + β − αβ.
Thus, a simple execution of the SPP yields shares of O as desired.
B.5 Compute γ Protocol
Input. Alice and Bob share D ∈ ZN .
Output. Alice and Bob share γ∈ ZK−1
nate of γ is a 1 iﬀ 2iD < N .
Cost. Communication cost of this protocol is O(Kξs), where ξs
is the cost of a secure F M 2N P protocol.
, where the ith coordi-
2
1. Alice and Bob run the FM2NP K − 1 times: on the ith time
on (N − 2i−1D, N − 2iD − 1), which outputs shares of Oi
(note that they run the modiﬁed version of the protocol, so
that in the case of equality the protocol always outputs 0).
2. Let O = (O1, . . . , OK−1), and notice that O = (1, . . . 1, 0, ∗,
. . . , ∗), where the ﬁrst 0 occurs in the ith coordinate if i is
the ﬁrst time 2iD ≥ N . Alice and Bob can modify this to
share γ= (1, . . . , 1, 0, . . . 0) by running the SPP K − 2 times,
on the ith time they set γi+1 = γiOi+1.
B.6 Choose µ1 Protocol
Input. Alice and Bob have run the RVP, which has returned to
2n ¯C . They also share ¯C and for
them shares of a random R ∈ Z
each 1 ≤ i ≤ n, they share eCi.
Output. Alice and Bob share µ1 = Di, where Di has been
chosen with the correct probability.
Cost. Communication cost of this protocol is O(nξs).
1. Alice creates the vector ZA ∈ Zn
N , deﬁned as follows:
n − RA).
2 − RA, . . . ,
Bob does similarly to obtain ZB.
1 − RA,2 ¯C A + eC A,0
n ¯C A + eC A,0
ZA = ( ¯C A + eC A,0
1 + eC A,0
1 + · · · + eC A,0
Notice that the ith coord. of ZA is i ¯C A − RA +Pi
R ≤Pi
j=1 eC A,0
¯C + eC 0. Alice encrypts her share LA and sends
2. Alice and Bob run the FMnNP on the vector Z ∈ Zn
N , which
will return the (shares of) L, the location of the ﬁrst time
3. Bob can now compute (an encryption of) the scalar product:
this to Bob.
j=1
j
.
µ1 = L · (D1, . . . , Dn).
More precisely, Bob will have to compute d scalar products,
one for each dimension. After randomizing each product, he
returns these values to Alice, so that they now share µ1.
i + qB
B.7 Compute δ∗ Protocol
Input. Alice and Bob share Q = QA + QB, and if Q = qK . . . q1,
then for each 1 ≤ i ≤ K, they also share qi = qA
i (Mod N ).
Alice also has a reordering of the integers [1..K], which is denoted
{x1, . . . , xK }.
Output. The vector δ∗ = (0, . . . , 1, . . . , 0), a unit vector with a
‘1’ in the appropriate coordinate, has been chosen correctly (see
RVP for precise deﬁnition of this), and is shared between Alice
and Bob.
Cost. Communication cost of this protocol is O(K 2).
Note. In this protocol, the roles of Alice and Bob will be reversed,
so that ˆE will represent a homomorphic encryption function that
Bob can decrypt but Alice cannot.
K )).
1 ), . . . , ˆE(qB
1. Bob sends Alice ( ˆE(qB
2. Alice picks K values at random {Z1, . . . , ZK } ∈ ZN and
(utilizing the homomorphic properties of ˆE) returns to Bob
( ˆE(qB
− ZK )). Notice that Alice has
rearranged the order in which she returns things to Bob
(reﬂecting her choices of the xi from the main protocol), but
Bob doesn’t know the new order because Alice has blinded
each term with randomness Zi.
x1 − Z1), . . . , ˆE(qB
xK
3. Bob decrypts each term, and multiplies them in the follow-
ing indicated manner, returning to Alice:
( ˆE(qB
x1 − Z1), ˆE((qB
x1 − Z1)(qB
x1 − Z1)(qB
x2 − Z2) . . . (qB
xK
ˆE((qB
x2 − Z2)), . . . ,
− ZK ))).
4. Recall that δ∗ is deﬁned by the equation:
δ∗ =(qx1 )ex1 + (1 − qx1 )(qx2 )ex2 + · · · +
(1 − qx1 )(1 − qx2 ) . . . (1 − qxK−1 )(qxK )exK .
(16)
Alice now utilizes the homomorphic properties of ˆE to cal-
culate (an encryption of) δ∗.
5. Alice chooses new randomness and blinds δ∗ with this, re-
turning the result to Bob who can decrypt so that Alice and
Bob now share δ∗.