# PostgreSQL (PG) 压测及快速生成大量测试数据指南

## 目录
- [压测工具](#压测工具)
- [快速生成大量测试数据](#快速生成大量测试数据)
- [压测案例](#压测案例)
- [一期开课计划（PG+MySQL联合方案）](#一期开课计划pgmysql联合方案)
- [技术社群](#技术社群)

## 压测工具
### pgbench
- **官方文档**: [PostgreSQL pgbench 文档](https://www.postgresql.org/docs/current/pgbench.html)
- **参数**:
  - 连接数、线程数、报告、绑定变量、重置连接等选项
- **内置模型**:
  - 初始化和 SQL 操作
- **自定义模型方法**:
  - 变量传递
  - 随机数生成
  - 睡眠控制
  - 多脚本调用和权重设置

## 快速生成大量测试数据
### 方法1
```sql
CREATE TABLE test (id INT PRIMARY KEY, c1 INT, c2 INT, c3 INT, info TEXT, crt_time TIMESTAMP);
CREATE SEQUENCE seq CACHE 1000;

-- 编辑 test.sql 文件
\set c1 random(1, 10000)
\set c2 random(1, 1000)
\set c3 random(1, 100)
INSERT INTO test VALUES (nextval('seq'::regclass), :c1, :c2, :c3, md5(random()::text), clock_timestamp());

-- 执行 pgbench
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 24 -j 24 -T 120
```

### 方法2
```sql
CREATE TABLE test (id INT PRIMARY KEY, c1 INT, c2 INT, c3 INT, info TEXT, crt_time TIMESTAMP);
CREATE SEQUENCE seq CACHE 1000;

-- 编辑 test.sql 文件
INSERT INTO test SELECT nextval('seq'::regclass), random()*10000, random()*1000, random()*100, md5(random()::text), clock_timestamp() FROM generate_series(1, 100);

-- 设置环境变量
. ./env.sh

-- 执行 pgbench
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 8 -j 8 -T 120
```

### 方法3
```sql
CREATE TABLE test (id INT PRIMARY KEY, c1 INT, c2 INT, c3 INT, info TEXT, crt_time TIMESTAMP);
CREATE SEQUENCE seq CACHE 1000;

-- 插入数据
INSERT INTO test SELECT nextval('seq'::regclass), random()*10000, random()*1000, random()*100, md5(random()::text), clock_timestamp() FROM generate_series(1, 10000000);
```

## 压测案例
### TPC-B 标准测试
- **简单键查询**
- **UPSERT 和 UPDATE 操作**
- **随机数变量**
- **模糊查询（模拟交互）**
- **模拟交互（gset）**
- **查询轨迹历史（包括优化方法）**
- **模拟睡眠（\sleep x ms|us|s）**
- **数值相近排序**
- **空间距离相近排序**

### 为什么高并发要用长连接、绑定变量？
- **创建表**
  ```sql
  CREATE TABLE test (id INT PRIMARY KEY, c1 INT, c2 INT, c3 INT, info TEXT, crt_time TIMESTAMP);
  CREATE SEQUENCE seq CACHE 1000;
  ```

- **编辑 test.sql 文件**
  ```sql
  \set c1 random(1, 10000)
  \set c2 random(1, 1000)
  \set c3 random(1, 100)
  INSERT INTO test VALUES (nextval('seq'::regclass), :c1, :c2, :c3, md5(random()::text), clock_timestamp());
  ```

- **执行 pgbench**
  ```sh
  pgbench -M prepared -n -r -P 1 -f ./test.sql -c 52 -j 52 -T 120
  pgbench -i -s 5000
  pgbench -M prepared -n -r -P 1 -c 104 -j 104 -T 120 -S
  pgbench -M prepared -n -r -P 1 -c 52 -j 52 -T 120 -b simple-update
  ```

### 其他压测案例
- **随机数生成**
  - `random(x, y)`
  - `random_exponential(min, max, p)`
  - `random_gaussian(x, y, p)`
  - `random_zipfian(x, y, p)`

- **Gin 倒排索引（模糊查询）**
  ```sql
  CREATE TABLE t1 (id INT, info TEXT, crt_time TIMESTAMP);
  CREATE TABLE t2 (id INT PRIMARY KEY, info TEXT);
  INSERT INTO t1 SELECT generate_series(1, 10000000), md5(random()::text), clock_timestamp();
  INSERT INTO t2 SELECT generate_series(1, 100000), md5(random()::text);
  INSERT INTO t2 SELECT id, substring(info, 5, 10) FROM t1 WHERE id >= 100001 AND id < 24 LIMIT 10;
  ```

- **年龄排序查询**
  ```sql
  \set age random(1, 120)
  SELECT * FROM t_num ORDER BY age = :age LIMIT 1;
  ```

- **空间距离排序查询**
  ```sql
  \set x random(1, 180)
  \set y random(1, 90)
  SELECT * FROM t_pos ORDER BY pos <-> point(:x, :y) LIMIT 1;
  ```

- **连接方式比较**
  - **每次新建连接**
    ```sh
    pgbench -M simple -n -r -P 1 -c 104 -j 104 -T 120 -S -C
    ```
  - **长连接、绑定变量**
    ```sh
    pgbench -M prepared -n -r -P 1 -c 104 -j 104 -T 120 -S
    ```
  - **长连接、simple query**
    ```sh
    pgbench -M simple -n -r -P 1 -c 104 -j 104 -T 120 -S
    ```

## 一期开课计划（PG+MySQL联合方案）
- **2019.12.30 19:30** RDS PG产品概览，如何与MySQL结合使用
- **2019.12.31 19:30** 如何连接PG，GUI，CLI的使用
- **2020.1.3 19:30** 如何压测PG数据库、如何瞬间构造海量测试数据
- **2020.1.6 19:30** MySQL与PG类型、语法、函数等对应关系
- **2020.1.7 19:30** 如何将MySQL数据同步到PG（dts）
- **2020.1.8 19:30** PG外部表妙用 - mysql_fdw, oss_fdw（直接读写MySQL数据、冷热分离）
- **2020.1.9 19:30** PG应用场景介绍 - 并行计算，实时分析
- **2020.1.10 19:30** PG应用场景介绍 - GIS
- **2020.1.13 19:30** PG应用场景介绍 - 用户画像、实时营销系统
- **2020.1.14 19:30** PG应用场景介绍 - 多维搜索
- **2020.1.15 19:30** PG应用场景介绍 - 向量计算、图像搜索
- **2020.1.16 19:30** PG应用场景介绍 - 全文检索、模糊查询
- **2020.1.17 19:30** PG数据分析语法介绍
- **2020.1.18 19:30** PG更多功能了解：扩展语法、索引、类型、存储过程与函数。如何加入PG技术社群

## 技术社群
- **PG技术交流钉钉群** (3500+人)