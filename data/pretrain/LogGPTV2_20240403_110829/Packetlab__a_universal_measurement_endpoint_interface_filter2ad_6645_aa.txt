# PacketLab: A Universal Measurement Endpoint Interface

## Authors
- Kirill Levchenko, UC San Diego
- Amogh Dhamdhere, CAIDA
- Bradley Huffaker, CAIDA
- kc claffy, CAIDA
- Mark Allman, ICSI
- Vern Paxson, UC Berkeley/ICSI

## Abstract
The selection of the right vantage point is crucial for the success of any active network measurement. However, most research groups lack the resources to design, deploy, and maintain their own network of measurement endpoints, relying instead on shared infrastructure. Unfortunately, the current mechanisms for sharing access to these endpoints are not seamless; issues of compatibility, trust, and a lack of incentives hinder efficient sharing.

We propose PacketLab, a universal measurement endpoint interface that reduces the barriers faced by experimenters and measurement endpoint operators. PacketLab is built on two key ideas: it moves the measurement logic from the endpoint to a separate experiment control server, making each endpoint a lightweight packet source/sink. Additionally, it provides a way to delegate access to measurement endpoints while maintaining fine-grained control over their use, enabling research groups to share infrastructure with minimal overhead. By simplifying the endpoint interface, we also facilitate the deployment of measurement endpoints on any device for any duration chosen by the owner. We present PacketLab as a candidate measurement interface that can meet the research community's demand for future global-scale Internet measurements.

## CCS Concepts
- Networks → Network measurement

## Keywords
- Network measurement, PacketLab

## ACM Reference Format
Kirill Levchenko, Amogh Dhamdhere, Bradley Huffaker, kc claffy, Mark Allman, and Vern Paxson. 2017. PacketLab: A Universal Measurement Endpoint Interface. In Proceedings of IMC '17, London, United Kingdom, November 1–3, 2017, 7 pages.
https://doi.org/10.1145/3131365.3131396

## 1. Introduction
Having the right vantage points is essential for the success of network studies. Whether it is observing Internet censorship, testing for network neutrality violations, or building a map of the Internet, researchers need access to end hosts from which they can conduct their measurements. Research groups invest significant effort in securing and operating these end hosts as measurement endpoints. This has led to a proliferation of Internet measurement platforms with varying architectures, implementations, functionalities, APIs, and user bases. To run experiments at scale, outside researchers and platform operators must overcome several obstacles:

- **Compatibility**: Each measurement platform has its own deployment and usage models, requiring experimenters to port their experiments to each platform individually. A single universal interface that works across all platforms would allow experiments to scale more easily.
- **Incentives**: Platform operators often provide technical and operational support, which incurs costs and limits the number of outside experiments they can support. Reducing these costs would enable operators to accept more outside experiments.
- **Trust**: On general-purpose platforms, operators must trust experimenters to adhere to specified rules, limiting the set of admitted experimenters. Reliable mechanisms to ensure compliance with rules would encourage operators to open their infrastructure to a broader user base.

To address these challenges, we propose PacketLab, a clean-slate measurement architecture. PacketLab is not a new measurement platform but a lightweight, universal interface to existing measurement endpoints. It offers platform operators control over how their infrastructure is used with low overhead. For experimenters, PacketLab provides a single interface to multiple platforms, allowing them to develop and test their experiments once and run them on any endpoint that supports the PacketLab interface.

### Key Design Decisions
PacketLab makes several unique design decisions:
- **Decoupling Experiment Logic**: Measurement endpoints should provide an interface to the network, not to the endpoint computing hardware. Current platforms require updating software on the endpoint for new experiments. PacketLab decouples the platform from the experiment, with endpoints acting as simple packet senders and receivers. All experiment logic is located on a separate experiment controller.
- **Ephemeral Experiment Controllers**: Experiment controllers are provisioned and operated by the experimenter, lasting only for the duration of an experiment. This shifts the typical costs from platform operators to experimenters.
- **Access Control**: Operators issue cryptographic certificates to authorize experimenters to carry out specific sets of experiments. These certificates include restrictions that limit the types of traffic generated or collected at the endpoints.

## 2. Background and Related Work
End-host network measurement is an active area of research, with several measurement platforms in operation, including:
- FCC’s MBA [2]
- BISmark [30]
- RIPE Atlas [4]
- ICLab [1]
- CAIDA Ark [14]
- OONI [25]
- MITATE [17]
- Netalyzr [19]
- Dasu [26]
- Scriptroute [29]
- PEERING [27]
- CAIDA Periscope [16]

For a detailed description of these efforts, see Bajpai and Schonwalder’s recent survey [6]. Platforms like BISmark, RIPE Atlas, and CAIDA Ark explicitly invite outside experiments. However, vetting, development, testing, and deployment require significant involvement from the platform operator, which PacketLab aims to minimize. Porting experiments to these platforms can be non-trivial. For example, extending our inter-domain congestion measurement [20] from Ark to BISmark required significant re-design due to platform differences.

Scriptroute allows researchers to run Ruby scripts on endpoints without prior vetting, applying local policy filters. PEERING, designed for routing experiments, provides an OpenVPN tunnel for handling traffic. MITATE, aimed at mobile devices, keeps endpoints simple by letting experimenters send pre-declared sequences of packets. RIPE Atlas supports a fixed set of safe measurements, achieving greater deployment (nearly 10,000 endpoints).

PacketLab is not another measurement platform but an interface to existing and future platforms. It will provide an access control and experiment monitoring system, allowing platform operators to enforce their desired policies while making minimal assumptions about the endpoint.

The measurement community has long sought a single interface to unify existing platforms. Projects like MPlane [31] and Tophat [9] have attempted to federate infrastructures or build intelligent measurement planes. Bajpai et al. [5] discussed platform integration, suggesting convergence towards agreed-upon primitives and tools. PacketLab addresses this need by moving all experiment logic to the experiment controller, leaving only simple packet send/receive mechanisms on the endpoint.

## 3. Architecture
The PacketLab architecture consists of measurement endpoints, rendezvous servers, and experiment controllers. Endpoints can be software agents, dedicated servers, or embedded systems. They are managed by endpoint operators who grant permission to conduct experiments. The remainder of this section describes these elements in detail.

### 3.1. Measurement Endpoints
PacketLab measurement endpoints are software or hardware agents capable of sending and receiving packets on the Internet. They provide an interface to the network rather than to the endpoint hardware. Experiments are short-lived interactive sessions between an experiment controller and an endpoint, typically lasting a few minutes. During an experiment, the endpoint sends and captures packets as directed by the experiment controller. All experiment logic resides on the experiment controller, keeping the endpoint interface simple and universal.

#### Network Primitives
The interface provided by PacketLab endpoints to experiment controllers includes:
- **Raw IP Interface**: Direct access to the network.
- **Native TCP/UDP Sockets**: Serviced by the endpoint’s operating system.

While the endpoint network access API resembles the BSD sockets interface, there are additional features to support packet filtering, timestamping, and scheduling.

---

This revised version enhances clarity, coherence, and professionalism, ensuring the text is well-structured and easy to follow.