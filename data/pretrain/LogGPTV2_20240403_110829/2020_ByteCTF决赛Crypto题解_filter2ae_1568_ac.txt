    Rid = server.keygen(identity)
    W = server.gskgen(identity)
    print((Rid, W))
    print("Give me U1, U2, U3, S1, S2, T1, T2, T3")
    try:
        U1, U2, U3, S1, S2, T1, T2, T3 = [[FQ2(y) if type(y) is list else FQ(y) for y in x] for x in safe_eval(input(">>>"))]
    except:
        print('eval error.')
        exit()
    c = server.challenge(U1, U2, U3, S1, S2, T1, T2, T3)
    print(c)
    print("Give me s1, s2, s3, s4")
    data = input(">>>")
    try:
        s1, s2, s3, s4 = safe_eval(data)
    except:
        print('format error.')
        exit()
    if server.verify(s1, s2, s3, s4):
        print(FLAG)
    else:
        print('NoNoNo...')
agid.py
    from random import SystemRandom, sample
    from gmssl import func
    from gmssl.sm3 import sm3_hash
    from string import ascii_letters, digits
    import gmssl.optimized_curve as ec
    import gmssl.optimized_pairing as ate
    def sm3_hash_str(msg):
        return sm3_hash(func.bytes_to_list(msg.encode()))
    class Prover(object):
        def __init__(self, identity):
            Hid_str = sm3_hash_str(identity)
            self.Hid = int(Hid_str, 16)
            self.r1 = None
            self.r2 = None
            self.r3 = None
            self.k1 = None
            self.k2 = None
            self.k3 = None
            self.k4 = None
        def commit(self, Rid, W, Ppub, Qpub, H):
            rand_gen = SystemRandom()
            self.r1 = rand_gen.randrange(ec.curve_order)
            self.r2 = rand_gen.randrange(ec.curve_order)
            self.r3 = rand_gen.randrange(ec.curve_order)
            self.k1 = rand_gen.randrange(ec.curve_order)
            self.k2 = rand_gen.randrange(ec.curve_order)
            self.k3 = rand_gen.randrange(ec.curve_order)
            self.k4 = rand_gen.randrange(ec.curve_order)
            U1_left = ec.multiply(ec.G1, (self.r1 * self.Hid) % ec.curve_order)
            U1_right = ec.multiply(Qpub, self.r1)
            U1 = ec.add(U1_left, U1_right)
            r1_inv = pow(self.r1, ec.curve_order - 2,
                         ec.curve_order) % ec.curve_order
            U2 = ec.multiply(Rid, r1_inv)
            U3_left = ec.multiply(U1, self.r2)
            U3_right = ec.multiply(H, self.r3)
            U3 = ec.add(U3_left, U3_right)
            S1_left = ec.multiply(
                ec.G1, (self.r1 * self.r2 * self.Hid) % ec.curve_order)
            S1_right = ec.multiply(Ppub, (self.r1 * self.r2) % ec.curve_order)
            S1 = ec.add(S1_left, S1_right)
            r12_inv = pow((self.r1 * self.r2) % ec.curve_order,
                          ec.curve_order - 2, ec.curve_order) % ec.curve_order
            S2 = ec.multiply(W, r12_inv)
            T1_left = ec.multiply(ec.G1, self.k1)
            T1_mid = ec.multiply(Qpub, self.k2)
            T1_right = ec.multiply(H, self.k3)
            T1 = ec.add(T1_left, T1_mid)
            T1 = ec.add(T1, T1_right)
            T2_left = ec.multiply(U1, self.k4)
            T2_right = ec.multiply(H, self.k3)
            T2 = ec.add(T2_left, T2_right)
            T3_left = ec.multiply(ec.G1, self.k1)
            T3_right = ec.multiply(Ppub, self.k2)
            T3 = ec.add(T3_left, T3_right)
            return U1, U2, U3, S1, S2, T1, T2, T3
        def prove(self, c):
            s1 = (self.k1 + c * self.r1 * self.r2 * self.Hid) % ec.curve_order
            s2 = (self.k2 + c * self.r1 * self.r2) % ec.curve_order
            s3 = (self.k3 + c * self.r3) % ec.curve_order
            s4 = (self.k4 + c * self.r2) % ec.curve_order
            return s1, s2, s3, s4
    class Verifier(object):
        def __init__(self):
            self.s = None
            self.sm = None
            self.u = None
            self.Ppub = None
            self.Qpub = None
            self.H = None
            self.V = None
            self.c = None
            self.U1 = None
            self.U3 = None
            self.S1 = None
            self.T1 = None
            self.T2 = None
            self.T3 = None
            self.allow_identity = [''.join(sample(ascii_letters + digits, 10)) for _ in range(3)]
        def setup(self):
            rand_gen = SystemRandom()
            self.s = rand_gen.randrange(ec.curve_order)
            self.sm = rand_gen.randrange(ec.curve_order)
            self.u = rand_gen.randrange(ec.curve_order)
            self.Ppub = ec.multiply(ec.G1, self.s)
            self.Qpub = ec.multiply(ec.G1, self.sm)
            h = rand_gen.randrange(ec.curve_order)
            self.H = ec.multiply(ec.G1, h)
            return self.Ppub, self.Qpub, self.H
        def keygen(self, identity):
            if not identity in self.allow_identity:
                return None
            Hid_str = sm3_hash_str(identity)
            Hid = int(Hid_str, 16)
            Hidsm_inv = pow(Hid + self.sm, ec.curve_order - 2,
                            ec.curve_order) % ec.curve_order
            Rid = ec.multiply(ec.G2, Hidsm_inv)
            HidQ = ec.multiply(ec.G1, Hid)
            HidQQpub = ec.add(HidQ, self.Qpub)
            left = ate.pairing(Rid, HidQQpub)
            right = ate.pairing(ec.G2, ec.G1)
            assert left == right
            return Rid
        def gpkgen(self):
            Hisu = self.u
            for ids in self.allow_identity:
                H_str = sm3_hash_str(ids)
                Hs = int(H_str, 16) + self.s
                Hisu = (Hisu * Hs) % ec.curve_order
            self.V = ec.multiply(ec.G2, Hisu)
            return self.V
        def gskgen(self, identity):
            if not identity in self.allow_identity:
                return None
            Hid_str = sm3_hash_str(identity)
            Hids = int(Hid_str, 16) + self.s
            Hids_inv = pow(Hids, ec.curve_order - 2,
                           ec.curve_order) % ec.curve_order
            W = ec.multiply(self.V, Hids_inv)
            return W
        def challenge(self, U1, U2, U3, S1, S2, T1, T2, T3):
            self.U1 = U1
            self.U3 = U3
            self.S1 = S1
            self.T1 = T1
            self.T2 = T2
            self.T3 = T3
            eq1_left = ate.pairing(U2, U1)
            eq1_right = ate.pairing(ec.G2, ec.G1)
            assert eq1_left == eq1_right
            eq2_left = ate.pairing(S2, S1)
            eq2_right = ate.pairing(self.V, ec.G1)
            assert eq2_left == eq2_right
            if (eq1_left == eq1_right) and (eq2_left == eq2_right):
                rand_gen = SystemRandom()
                self.c = rand_gen.randrange(ec.curve_order)
                return self.c
            else:
                return None
        def verify(self, s1, s2, s3, s4):
            c_neg = (ec.curve_order - self.c) % ec.curve_order
            T1prime_1 = ec.multiply(ec.G1, s1)
            T1prime_2 = ec.multiply(self.Qpub, s2)
            T1prime_3 = ec.multiply(self.H, s3)
            T1prime_4 = ec.multiply(self.U3, c_neg)
            T1prime_left = ec.add(T1prime_1, T1prime_2)
            T1prime_right = ec.add(T1prime_3, T1prime_4)
            T1prime = ec.add(T1prime_left, T1prime_right)
            assert ec.normalize(T1prime) == ec.normalize(self.T1)
            T2prime_left = ec.multiply(self.U1, s4)
            T2prime_mid = ec.multiply(self.H, s3)
            T2prime_right = ec.multiply(self.U3, c_neg)
            T2prime_buffer = ec.add(T2prime_left, T2prime_mid)
            T2prime = ec.add(T2prime_buffer, T2prime_right)
            assert ec.normalize(T2prime) == ec.normalize(self.T2)
            T3prime_left = ec.multiply(ec.G1, s1)
            T3prime_mid = ec.multiply(self.Ppub, s2)
            T3prime_right = ec.multiply(self.S1, c_neg)
            T3prime_buffer = ec.add(T3prime_left, T3prime_mid)
            T3prime = ec.add(T3prime_buffer, T3prime_right)
            assert ec.normalize(T3prime) == ec.normalize(self.T3)
            if (ec.normalize(T1prime) == ec.normalize(self.T1))\
                    and (ec.normalize(T2prime) == ec.normalize(self.T2))\
                    and (ec.normalize(T3prime) == ec.normalize(self.T3)):
                return True
            else:
                return False
这题就不如上一题巧妙。  
题目中用的gmssl并不是pip直接下载的那个，需要去github找另一个  
题目是一个认证系统，如果有identity即可多得到两个数据  
上面check_auth为正常的认证流程  
我们需要做的是没有identity的情况下认证成功
看上去两个文件，200多行，需要给12个变量，满足5个方程。十分复杂。
但实际上全写出来，真的很简单
    eq1_left = ate.pairing(U2, U1)
    eq1_right = ate.pairing(ec.G2, ec.G1)
    assert eq1_left == eq1_right
虽然有双线性对，一开始还以为需要用到双线性对的性质，但是发现后面并没有限制，可以直接U2 = G2 ， U1 = G1
    eq2_left = ate.pairing(S2, S1)
    eq2_right = ate.pairing(self.V, ec.G1)
    assert eq2_left == eq2_right
第二个同理，S2 = V ， S1 = G1
下面的则是要求
    T1 = (s1 + s2*sm + h*s3)G1 - c * U3
    T2 = (s3 * h)G1 + s4 * U1 - c * U3 = (s3 * h + s4)G1 - c * U3
    T3 = (s1 + s * s2)G1 - c * S1 = (s1 + s * s2 - c)G1
由于预先不知道c的值，所以在T的构造里必须把c全消掉。
点为0可能出现一些神秘问题（上一道题是这样的，这题用的函数不一样，也不知道会不会）。但是不为0完全也能构造
首先T3处，s未知，需要用s2 * Qpub 得到 s * s2 * G1，取s1 = c抵消c。s2可任意  
因此T3 = s2 * Ppub
T2处方便起见U3 = G1，s3 * h *G1 用 s3 * H得到，同样让s4 = c抵消c，s3可任意  
因此T2 = s3 * H
T1处几个参数已固定  
T1 = s3 _H + s2_ Qpub
然后任意取值即可  
exp中任意参数全取了1
    import gmssl.optimized_curve as ec
    import gmssl.optimized_pairing as ate
    import agid
    import re
    from gmssl.optimized_field_elements import FQ2, FQ
    from pwn import *
    p = remote('172.16.9.45' , 18585)
    recv = p.recvline()[:-1]
    Ppub , Qpub , H , V = [[FQ2(y) if type(y) is list else FQ(y) for y in x] for x in eval(recv)]
    p.recvuntil('>>>')
    p.sendline('1')
    p.recvuntil('>>>')
    U1 = ec.G1
    U2 = ec.G2
    U3 = ec.G1
    S1 = ec.G1
    S2 = V
    s2 = 1
    s3 = 1
    T3 = ec.multiply(Ppub , s2)
    T2 = ec.multiply(H , s3)
    T1 = ec.add(ec.multiply(Qpub , s2) , T2)
    temp = (U1,U2,U3,S1,S2,T1,T2,T3)
    print(str(temp))
    p.sendline(str(temp))
    c = int(p.recvline()[:-1])
    s1 = c
    s4 = c
    slist = (s1,s2,s3,s4)
    p.sendline(str(slist))
    p.interactive()
## 总结
两道题都有巨大的代码量，光是看懂整个流程就需要花上很长时间。第一道题的中间人攻击可能更容易看懂，却很难找到攻击点。反而是第二题的认证虽然很简单，但一上来十几个变量加上双线性对让人很难一眼看出程序在干嘛，导致最后反而是中间人攻击的解题人数更多，几乎没有人来做agid。  
带着自信，静下心看题，才不会被题目吓住。