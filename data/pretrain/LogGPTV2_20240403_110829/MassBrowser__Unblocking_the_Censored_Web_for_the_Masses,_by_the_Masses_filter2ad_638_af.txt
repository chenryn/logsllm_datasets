“Ten Ways to Discover Tor Bridges,” https://blog.torproject.org/blog/
research-problems-ten-ways-discover-tor-bridges.
“Django Web Framework,” https://www.djangoproject.com/.
“Electron Framework,” https://electronjs.org/.
[16]
[17]
[18]
15
[19] D. Fiﬁeld, N. Hardison, J. Ellithorpe, E. Stark, D. Boneh, R. Dingledine,
and P. Porras, “Evading censorship with browser-based proxies,” in
Privacy Enhancing Technologies. Springer, 2012.
[25]
[24]
[21]
[22]
[23]
[20] D. Fiﬁeld, C. Lan, R. Hynes, P. Wegmann, and V. Paxson, “Blocking-
resistant Communication through Domain Fronting,” in Privacy En-
hancing Technologies, 2015.
“Where can I ﬁnd an up to date list of free US proxies?” https://www.
quora.com/Where-can-I-ﬁnd-an-up-to-date-list-of-free-US-proxies.
“FlashProxy,” http://crypto.stanford.edu/ﬂashproxy/.
“Freedom on the Net 2017,” https://freedomhouse.org/sites/default/ﬁles/
FOTN 2017 Final.pdf, Freedom House, 2017.
J. Geddes, M. Schuchard, and N. Hopper, “Cover Your ACKs: Pitfalls
of Covert Channel Censorship Circumvention,” in ACM CCS, 2013.
“Defeat Internet Censorship: Overview of Advanced Technologies
and Products,” http://www.internetfreedom.org/archive/Defeat Internet
Censorship White Paper.pdf, 2007.
“GoAgent proxy,” https://code.google.com/p/goagent/.
“Google disables
censors,”
google-disables-domain-fronting-capability-used-to-evade-censors/,
2018.
“GreatFire Analyzer,” https://en.greatﬁre.org/analyzer.
capability used to evade
https://arstechnica.com/information-technology/2018/04/
[28]
[29] B. Hahn, R. Nithyanand, P. Gill, and R. Johnson, “Games without
frontiers: Investigating video games as a covert channel,” in European
Security and Privacy (EuroS&P).
J. Holowczak and A. Houmansadr, “CacheBrowser: Bypassing Chinese
Censorship without Proxies Using Cached Content,” in ACM CCS,
2015.
“domain fronting”
IEEE, 2016.
[26]
[27]
[30]
[31] A. Houmansadr, C. Brubaker, and V. Shmatikov, “The Parrot Is Dead:
Observing Unobservable Network Communications,” in IEEE Security
and Privacy (S&P), 2013.
[32] A. Houmansadr, G. Nguyen, M. Caesar, and N. Borisov, “Cirripede:
Circumvention Infrastructure Using Router Redirection with Plausible
Deniability,” in ACM CCS, 2011.
[33] A. Houmansadr, T. Riedl, N. Borisov, and A. Singer, “I Want My
Voice to Be Heard: IP over Voice-over-IP for Unobservable Censorship
Circumvention,” in NDSS, 2013.
[34] A. Houmansadr, E. Wong, and V. Shmatikov, “No Direction Home: The
True Cost of Routing Around Decoys,” in NDSS, 2014.
[36]
Reportedly
[35] A. Houmansadr, W. Zhou, M. Caesar, and N. Borisov, “SWEET:
Serving the Web by Exploiting Email Tunnels,” in Privacy Enhancing
Technologies, 2013.
“Iran
Trafﬁc,”
iran-reportedly-blocking-encrypted-internet-trafﬁc.
“How Iran Censors The Internet,” http://www.popsci.com/technology/
article/2013-03/how-iran-censors-internet-infographic.
J. Karlin, D. Ellard, A. Jackson, C. Jones, G. Lauer, D. Mankins, and
W. Strayer, “Decoy Routing: Toward Unblockable Internet Communi-
cation,” in FOCI, 2011.
Internet
http://arstechnica.com/tech-policy/2012/02/
Encrypted
Blocking
[37]
[38]
[39] S. Khattak, T. Elahi, L. Simon, C. Swanson, S. Murdoch, and I. Gold-
berg, “SoK: Making sense of censorship resistance systems,” Privacy
Enhancing Technologies, 2016.
“Lantern,” https://getlantern.org/.
[40]
[41] C. Leberknight, M. Chiang, H. Poor, and F. Wong, “A Taxonomy
of Internet Censorship and Anti-censorship,” http://www.princeton.edu/
∼chiangm/anticensorship.pdf, 2010.
[42] M. Mahdian, “Fighting Censorship with Algorithms,” in Fun with
Algorithms, 2010.
[43] P. Matthews, R. Mahy, and J. Rosenberg, “Traversal Using Relays
around NAT (TURN): Relay Extensions to Session Traversal Utilities
for NAT (STUN),” 2010.
[44] R. McPherson, A. Houmansadr, and V. Shmatikov, “CovertCast: Using
Live Streaming to Evade Internet Censorship,” in Privacy Enhancing
Technologies, 2016.
“meek Pluggable Transport,” https://trac.torproject.org/projects/tor/wiki/
doc/meek.
[45]
16
[46]
“[tor-project] Summary of meek’s costs, March 2017,” https://lists.
torproject.org/pipermail/tor-project/2017-April/001097.html.
[47] H. Moghaddam, B. Li, M. Derakhshani, and I. Goldberg, “SkypeMorph:
Protocol Obfuscation for Tor Bridges,” in ACM CCS, 2012.
[48] M. Nasr, S. Farhang, A. Houmansadr, and J. Grossklags, “Enemy At
the Gateways: Censorship-Resilient Proxy Distribution Using Game
Theory.” in NDSS, 2019.
[49] M. Nasr and A. Houmansadr, “GAME OF DECOYS: Optimal decoy
routing through game theory,” in ACM CCS. ACM, 2016.
[50] M. Nasr, H. Zolfaghari, and A. Houmansadr, “The Waterfall of Liberty:
Decoy Routing Circumvention that Resists Routing Attacks,” in ACM
CCS, 2017.
[51] A. Niaki, S. Cho, Z. Weinberg, N. Hoang, A. Razaghpanah, N. Christin,
and P. Gill, “ICLab: A Global, Longitudinal Internet Censorship Mea-
surement Platform,” IEEE Security & Privacy, 2020.
[52] D. Nobori and Y. Shinjo, “VPN Gate: A Volunteer-Organized Public
VPN Relay System with Blocking Resistance for Bypassing Govern-
ment Censorship Firewalls,” in NSDI, 2014.
“A Simple Obfuscating Proxy,” https://www.torproject.org/projects/
obfsproxy.html.en.
[53]
[54] P. Pearce, R. Ensaﬁ, F. Li, N. Feamster, and V. Paxson, “Toward
Continual Measurement of Global Network-Level Censorship,” IEEE
Security & Privacy, vol. 16, no. 1, 2018.
[55] P. Pearce, B. Jones, F. Li, R. Ensaﬁ, N. Feamster, N. Weaver, and
V. Paxson, “Global Measurement of DNS Manipulation,” in USENIX
Security, 2017.
[56] V. Perta, M. Barbera, G. Tyson, H. Haddadi, and A. Mei, “A glance
through the VPN looking glass: IPv6 leakage and DNS hijacking in
commercial VPN clients,” Proceedings on Privacy Enhancing Tech-
nologies, vol. 2015, no. 1, 2015.
“Tor:
pluggable-transports.html.en.
“Psiphon,” http://psiphon.ca/.
[58]
[59] E. Rescorla, “The Transport Layer Security (TLS) Protocol Version 1.3
https://www.torproject.org/docs/
Transports,”
Pluggable
[57]
(August 2018),” RFC 8446, Tech. Rep.
Indication
[60] E. Rescorla, K. Oku, N. Sullivan, and C. Wood, “Encrypted
Internet Engineering
Server Name
July 2019, work
Task Force,
in Progress. [Online]. Available: https://datatracker.ietf.org/doc/html/
draft-ietf-tls-esni-04
“How Governments Have Tried to Block Tor,” https://svn.torproject.
org/svn/projects/presentations/slides-28c3.pdf.
Internet-Draft draft-ietf-tls-esni-04,
for TLS 1.3,”
[61]
[62] M. Schuchard, J. Geddes, C. Thompson, and N. Hopper, “Routing
https://github.com/keroserene/
[63]
around decoys,” in ACM CCS, 2012.
“SnowFlake
Pluggable Transport,”
snowﬂake.
“Tor Metrics,” https://metrics.torproject.org/.
IEEE, 2016.
[64]
[65] M. Tschantz, S. Afroz, V. Paxson et al., “SoK: Towards Grounding Cen-
sorship Circumvention in Empiricism,” in IEEE Security and Privacy
(S&P).
“Ultrasurf,” http://www.ultrareach.com.
“uProxy,” https://www.uproxy.org/.
“uProxy’s Shadowsocks version,” https://github.com/uProxy.
“uProxy’s WebRTC version,” https://github.com/UWNetworksLab/
uProxy-p2p.
[66]
[67]
[68]
[69]
[72]
[71]
[70] P. Vines and T. Kohno, “Rook: Using video games as a low-bandwidth
censorship resistant communication platform,” in ACM Workshop on
Privacy in the Electronic Society. ACM, 2015.
“How does your VPN speed Measure against other VPNs in China?”
https://cc.greatﬁre.org/en.
“Top 110 Free Proxy Sites – Best Free Proxy Servers List 2017,” https:
//www.alltechbuzz.net/top-best-free-proxy-sites-servers-2016/.
“SoftEther VPN User Forum: VPN Gate servers blocked in China,”
http://forum.vpngate.net/viewtopic.php?f=11&t=42498.
“SoftEther VPN User Forum: Can Not Be Used In China,” http://forum.
vpngate.net/viewtopic.php?f=11&t=38298.
“VPNGate: VPN Server List,” http://www.vpngate.net/en/.
[74]
[75]
[73]
[76] L. Wang, K. Dyer, A. Akella, T. Ristenpart, and T. Shrimpton, “Seeing
Through Network-Protocol Obfuscation,” in ACM CCS, 2015.
[77] Q. Wang, X. Gong, G. Nguyen, A. Houmansadr, and N. Borisov,
“CensorSpoofer: Asymmetric Communication Using IP Spooﬁng for
Censorship-Resistant Web Browsing,” in ACM CCS, 2012.
[78] Z. Weinberg, J. Wang, V. Yegneswaran, L. Briesemeister, S. Cheung,
F. Wang, and D. Boneh, “StegoTorus: A Camouﬂage Proxy for the Tor
Anonymity System,” in ACM CCS, 2012.
[79] T. Wilde, “Knock Knock Knockin’ on Bridges’ Doors,” https://blog.
torproject.org/blog/knock-knock-knockin-bridges-doors, 2012.
[80] D. Wing, P. Matthews, R. Mahy, and J. Rosenberg, “Session traversal
utilities for NAT (STUN),” 2008.
[81] P. Winter and S. Lindskog, “How the Great Firewall of China Is
[82]
Blocking Tor,” in FOCI, 2012.
J. Wolff, “VPN Usage Around the World,” https://cdn2.hubspot.net/
hubfs/304927/Downloads/VPN-Usage-Around-the-World-Infographic.
pdf, Global Web Index, 2017.
[83] ——, “The Internet Censor’s Dilemma,” http://tiny.cc/vfm0iz, March
2018.
[84] E. Wustrow, S. Wolchok, I. Goldberg, and J. Halderman, “Telex:
Anticensorship in the Network Infrastructure,” in USENIX Security,
2011.
[85] H. Zolfaghari and A. Houmansadr, “Practical censorship evasion lever-
aging content delivery networks,” in ACM CCS. ACM, 2016.
APPENDIX
A. MassBrowser’s Implementation Details
We have fully implemented MassBrowser as an end-user
software, and it is currently in the beta release state with
early-adopters from around the world evaluating it. Joining
our system is currently invitation-based only, and we expect
to open the project to the public soon (pending code review
by a third-party organization). Our current implementation of
MassBrowser supports Mac, Windows, and Linux operating
systems. We have hosted an anonymized version of our code
at https://massbrowser.cs.umass.edu. In the following we give
details of our system implementation.
1) The Operator server: MassBrowser’s Operator is a suite
of backend services that runs various services essential to the
reliable operation of MassBrowser, including strategic pairing
of clients and proxies, monitoring the reachability and health
of various parts of the system, and measuring the performance
of MassBrowser in censored countries. We only use our own
clients to perform our measurements. We have coded the
Operator mostly in Python with the Django web framework
[17] (approximately 10K lines of code). We have hosted our
Operator server on Amazon CloudFront CDN [13], therefore it
is a domain-fronted service and can not be blocked. Our Oper-
ator’s API is accessible through both standard HTTP requests
and WebSockets, though we refrain from using WebSocket
connections for Clients in order to prevent introducing protocol
ﬁngerprints.
As previously mentioned,
the Operator maintains a
database of supported websites along with per-region censor-
ship and CacheBrowsing information for all domains in the
websites. To do so, the Operator has a probing component that
regularly crawls the supported websites to identify domains
and update its information.
Also, we have taken various measures to ensure the scal-
ability and reliability of our backend services. In particular,
we run multiple redundant servers for each component of
Operator, and our 24/7 health monitoring system makes regular
assessment of the status of system services, and sends email
notiﬁcations in case of issues.
Finally, we have implemented a management console (with
a snapshot in Figure 9) allowing us to manually monitor and
conﬁgure different components of the system.
2) Buddy Software: We have coded our Buddy software in
Javascript ES6 using NodeJS with a graphical user interface
developed with the Electron framework [18] (approximately
50K lines of code). In addition to the GUI interface, our Buddy
software is also available as a command-line application for
expert volunteers. The Buddy actively maintains a WebSocket
connection to the Operator, and will be notiﬁed of newly
created sessions on this channel.
The Buddy software allows volunteers to have full trans-
parency and control over their desired settings including band-
width limits, destination whitelists and Client blacklists (Fig-
ure 5 displays a snapshot of a Buddy volunteer conﬁguring her
destination whitelists through the GUI). The Buddy software
runs with minimal interference from the user. It is able to run
in the background while providing an easily accessible switch
for disabling the Buddy’s activities on the users demand.
3) Client Software: We have implemented our Client soft-
ware with NodeJS with an Electron based GUI (approximately
50K lines of code). A client application, e.g., a web browser,
can connect to the Client software via a SOCKS proxy. On
the ﬁrst run, the Client software will walk the user through
a setup wizard which will assist them in conﬁguring their
preferred browsers to use MassBrowser. The current imple-
mentation of Client software provides a setup wizard walking a
client through connecting her web browser with MassBrowser.
Figure 10 displays our Client setup wizard. The MassBrowser
Client software requires to see each individual request, even
when encrypted with TLS. In the normal case, the proxied
TLS requests would not be visible to the Client software
since it does not own the website certiﬁcates. To enable the
interception of TLS connection by Client, the setup wizard
adds a locally created root certiﬁcate to the client’s browser
during the initial setup. Note that the root certiﬁcate does
not leave the client’s computer, and therefore the client is
secure as long as she does not share the certiﬁcate with
others (Figure 10 shows how the user is informed during
the setup). Client uses this certiﬁcate to “locally” man-in-
the-middle MassBrowser’s TLS connections to perform load
Fig. 9. Our management console
17
Fig. 10.
MassBrowser’s client software.
The Client setup wizard to connect client’s web browser to
Fig. 11.
browser, which is ready to use out of the box.
The Client browser bundle comes with a pre-conﬁgured Firefox
optimizations like CacheBrowsing.
In addition to the client setup wizard, we have implemented
a client browser bundle for clients. The bundle comes with a
preconﬁgured, customized Firefox browser, and is ready to
use out of the box. Figure 11 shows a snapshot of the browser
bundle.
18