title:Faster Malicious 2-Party Secure Computation with Online/Offline Dual
Execution
author:Peter Rindal and
Mike Rosulek
Faster Malicious 2-Party Secure Computation  
with Online/Offline Dual Execution
Peter Rindal and Mike Rosulek, Oregon State University
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/rindal
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Faster Malicious 2-party Secure Computation
with Online/Ofﬂine Dual Execution
Peter Rindal∗
Oregon State University
Mike Rosulek∗
Oregon State University
Abstract
We describe a highly optimized protocol for general-
purpose secure two-party computation (2PC) in the pres-
ence of malicious adversaries. Our starting point is a pro-
tocol of Kolesnikov et al. (TCC 2015). We adapt that
protocol to the online/ofﬂine setting, where two parties
repeatedly evaluate the same function (on possibly dif-
ferent inputs each time) and perform as much of the com-
putation as possible in an ofﬂine preprocessing phase be-
fore their inputs are known. Along the way we develop
several signiﬁcant simpliﬁcations and optimizations to
the protocol.
We have implemented a prototype of our protocol and
report on its performance. When two parties on Ama-
zon servers in the same region use our implementation to
securely evaluate the AES circuit 1024 times, the amor-
tized cost per evaluation is 5.1ms ofﬂine + 1.3ms online.
The total ofﬂine+online cost of our protocol is in fact
less than the online cost of any reported protocol with
malicious security. For comparison, our protocol’s clos-
est competitor (Lindell & Riva, CCS 2015) uses 74ms
ofﬂine + 7ms online in an identical setup.
Our protocol can be further tuned to trade performance
for leakage. As an example, the performance in the
above scenario improves to 2.4ms ofﬂine + 1.0ms online
if we allow an adversary to learn a single bit about the
honest party’s input with probability 2−20 (but not vio-
late any other security property, e.g. correctness).
1
Secure two-party computation (2PC) allows mutually
distrusting parties to perform a computation on their
combined inputs, while revealing only the result. 2PC
was conceived in a seminal paper by Yao [34] and
shown to be feasible in principle using a construction
now known as garbled circuits. Later,
the Fairplay
Introduction
∗Supported by NSF award 1149647. The ﬁrst author is also sup-
ported by an ARCS foundation fellowship.
project [24] was the ﬁrst implementation of Yao’s proto-
col, which inspired interest in the practical performance
of 2PC.
1.1 Cut & Choose, Online/Ofﬂine Setting
The leading technique to secure Yao’s protocol against
malicious adversaries is known as cut-and-choose. The
idea is to have the sender generate many garbled circuits.
The receiver will choose a random subset of these to
be checked for correctness.
If all checked circuits are
found to be correct, then the receiver has some conﬁ-
dence about the unopened circuits, which can be evalu-
ated.
The cost of the cut-and-choose technique is therefore
tied to the number of garbled circuits that are generated.
To restrict a malicious adversary to a 2−s chance of vi-
olating security, initial cut-and-choose mechanisms re-
quired approximately 17s circuits [20]. This overhead
was later reduced to 3s circuits [21, 31, 32] and then s
circuits [19].
Suppose two parties wish to perform N secure com-
putations of the same function f (on possibly differ-
ent inputs each time), and are willing to do ofﬂine pre-
processing (which does not depend on the inputs).
In
this online/ofﬂine setting, far fewer garbled circuits are
needed per execution. The idea, due to [14, 22], is to
generate many garbled circuits (enough for all N execu-
tions) and perform a single cut-and-choose on them all.
Then each execution of f will evaluate a random subset
(typically called a bucket) of the unopened circuits. Be-
cause the unopened circuits are randomly assigned to ex-
ecutions, only O(s/logN) circuits are needed per bucket
to achieve security 2−s. Concretely, 4 circuits per bucket
sufﬁce for security 2−40 and N = 1024.
1.2 Dual-execution Paradigm
An alternative to cut-and-choose for malicious-secure
2PC is the dual-execution protocol of Mohassel &
Franklin [25], which requires only two garbled circuits.
USENIX Association  
25th USENIX Security Symposium  297
The idea is that two parties run two instances of Yao’s
protocol, with each party acting as sender in one instance
and receiver in the other. They then perform a reconcilia-
tion step in which their garbled outputs are securely com-
pared for equality. Intuitively, one of the garbled outputs
is guaranteed to be correct, so the reconciliation step al-
lows the honest party to check whether its garbled output
agrees with the correct one held by the adversary.
Unfortunately, the dual execution protocol allows an
adversary to learn an arbitrary bit about the honest party’s
input. Consider an adversary who instead of garbling
the function f , garbles a different function f (cid:31). Then the
output of the reconciliation step (secure equality test)
reveals whether f (x1,x2) = f (cid:31)(x1,x2). However, it can
be shown that the adversary can learn only a single bit,
and, importantly, cannot violate output correctness for
the honest party.
1.3 Reducing Leakage in Dual-execution
Kolesnikov et al. [16] proposed a combination of dual-
execution and cut-and-choose that reduces the probabil-
ity of a leaked bit. The idea is for each party to garble
and send s circuits instead of 1, and perform a cut-and-
choose to check each circuit with probability 1/2. Each
circuit should have the same garbled encoding for its out-
puts, so if both parties are honest, both should receive
just one candidate output.
However, a malicious party could cause the honest
party to obtain several candidate outputs. The approach
taken in [16] is to have the parties use private set inter-
section (PSI) to ﬁnd a common value among their sets
of reconciliation values. This allows the honest party to
identify which of its candidate outputs is the correct one.
In Section 4 we discuss in more detail the security of-
fered by this protocol. Brieﬂy, an adversary cannot vi-
olate output correctness for the honest party, and learns
only a single bit about the honest party’s input with prob-
ability at most 1/2s (which happens only when the hon-
est part doesn’t evaluate any correct garbled circuit).
2 Overview of Our Results
We adapt the dual-execution protocol of [16] to the on-
line/ofﬂine setting. The result is the fastest protocol to
date for 2PC in the presence of malicious adversaries.
At a very high level, both parties exchange many gar-
bled circuits in the ofﬂine phase and perform a cut-and-
choose. In the online phase, each party evaluates a ran-
dom bucket of its counterpart’s circuits. The parties then
use the PSI-based reconciliation to check the outputs.
2.1 Technical Contributions
While the high-level idea is straight-forward, some non-
trivial technical changes are necessary to adapt [16] to
the online/ofﬂine setting while ensuring high perfor-
mance in practice.
In particular, an important part of any malicious-
secure protocol is to ensure that parties use the same
inputs in all garbled circuits. The method suggested in
[16] is incompatible with ofﬂine pre-processing, whereas
the method from [23] does not ensure consistency be-
tween circuits generated by different parties, which is
the case for dual-execution (both parties generate gar-
bled circuits). We develop a new method for input con-
sistency that is tailored speciﬁcally to the dual-execution
paradigm and that incurs less overhead than any existing
technique.
Implementation, Performance
In [16], the parties evaluate garbled circuits and then
use active-secure private set intersection (PSI) to recon-
cile their outputs. We improve the analysis of [16] and
show that it sufﬁces to use PSI that gives a somewhat
weaker level of security. Taking advantage of this, we
describe an extremely lightweight PSI protocol (a vari-
ant of one in [30]) that satisﬁes this weak level of security
while being round-optimal.
2.2
We implemented a C++ prototype of our protocol us-
ing state-of-the-art optimizations, including the garbled-
circuit construction of [35]; the OT-extension protocol
of [15] instantiated with the base OTs of [7]. The pro-
totype is heavily parallelized within both phases. Work
is divided amongst threads that concurrently generate &
evaluate circuits, allowing network throughput to be the
primary bottleneck. The result is an extremely fast 2PC
system. When securely evaluating the AES circuit on co-
located Amazon AWS instances, we achieve the lowest
amortized cost to date of 5.1ms ofﬂine + 1.3ms online
per execution.
2.3 Comparison to GC-based Protocols
There have been several implementations of garbled-
circuit-based 2PC protocols that achieve malicious secu-
rity [1, 12, 18, 23, 29, 31, 32]. Except for [23], none of
these protocols are in the online/ofﬂine settings so their
performance is naturally much lower (100-1000× slower
than online/ofﬂine protocols). Among them, the fastest
reported secure evaluation of AES is that of [12], which
was 0.46s exploiting consumer GPUs. Other protocols
have been described (but not implemented) that com-
bine cut-and-choose with the dual-execution paradigm to
achieve malicious security [13, 26]. The protocol of [13]
leaks more than one bit when the adversary successfully
cheats during cut-and-choose.
Our protocol is most closely related to that of [23],
which also achieves fast, active-secure 2PC in the on-
line/ofﬂine setting. [23] is an implementation of the pro-
tocol of [22], and we refer to the protocol and its imple-
mentation as “LR” in this section. Both the LR protocol
and ours are based on garbled circuits but use fundamen-
tally different approaches to achieveing malicious secu-
298  25th USENIX Security Symposium 
USENIX Association
2
LR [23]
Us (Async PSI)
Us (Sync PSI)
Input Labels Reconciliation
|x|(B + B(cid:30))κc
|x|B(cid:30)κc
B2κsκc
Bκs + B2κc
|x|Bκc
Figure 1: Asymptotic communication costs of the LR protocol
vs. ours (comparing online phases). B is the number of cir-
cuits in a bucket; B(cid:30) ≈ 3B is the number of auxiliary cheating-
recovery circuits in [23]; |x| is length of sender’s inputs; κs is
the statistical security parameter; κc is the computational secu-
rity parameter.
rity. For clarity, we now provide a list of major differ-
ences between the two protocols.
(1) LR uses a more traditional cut-and-choose mecha-
nism where one party acts as sender and the other as re-
ceiver & evaluator. Our protocol on the other hand uses a
dual-execution paradigm in which both parties play sym-
metric roles, so their costs are identical.
Since parties act as both sender and receiver, each
party performs more work than in the traditional cut-
and-choose paradigm. However, the symmetry of dual-
execution means that both parties are performing com-
putational work simultaneously, rather than idle waiting.
The increase in combined work does not signiﬁcantly af-
fect latency or throughput if the communication channel
is full-duplex.
(2) Our protocol can provide more ﬂexible security
guarantees; in particular, it may be used with smaller pa-
rameter choices. In more detail, let κs denote a statistical
security parameter, meaning that the protocol allows the
adversary to completely break security with probability
1/2κs. In the LR protocol, a failure of the cut-and-choose
step can violate all security properties, so the number of
garbled circuits is proportional to κs.
Our protocol has an additional parameter κb, where
the protocol leaks (only) a single bit to the adversary with
probability 1/2κb. In our protocol (as in [16]), the num-
ber of garbled circuits is proportional to κb. When instan-
tiated with κb = κs = 40, our protocol gives an equivalent
guarantee to the LR protocol with κs = 40. From this
baseline, our protocol allows either κs to be increased
(strictly improving the security guarantee without involv-
ing more garbled circuits) or κb to be decreased (trading
performance for a small chance of a single bit leaking).1
(3) Our online phase has superior asymptotic cost,
stemming from the differences in protocol paradigm —
see a summary in Figure 1. LR uses a cheating-recovery
phase, introduced in [19]: after evaluating the main cir-
cuits, the parties evaluate auxiliary circuits that allow the
receiver to learn the sender’s input if the receiver can
1For example, two parties might want to securely evaluate AES a
million times on the same secret-shared key each time, where the key
is not used for anything else. In that case, a 1/220 or 1/230 chance of
leaking a single bit about this key might be permissible.
“prove” that the sender was cheating. Our protocol uses
the PSI-based dual-execution reconciliation phase.
The important difference is that in the LR protocol,
the sender’s input is provided to both the main circuits
and auxiliary circuits. If there are B main garbled cir-
cuits in a bucket, then there are B(cid:30) ≈ 3B auxiliary cir-
cuits, and garbled inputs must be sent for all of them in
the online phase. Each individual garbled input is sent
by decommitting to an ofﬂine commitment, so it con-
tributes to communication as well as a call to a hash func-
tion. Furthermore, the cheating-recovery phase involves
decommitments to garbled outputs for the auxiliary cir-
cuits, which are again proprotional to the sender’s input
length.
In contrast, our protocol uses no auxiliary circuits so
has less garbled inputs to send (and less associated de-
commitments to check). Our reconciliation phase scales
only with B and is independent of the parties’ input size.
The overall effect is that our online phase involves sig-
niﬁcantly less communication and computation, with the
difference growing as the computations involve longer
inputs. With typical parameters B = 4 and κs = 40, our
reconciliation phase is cheaper whenever |x| ≥ 54 bits.
Even for the relatively small AES circuit, our protocol
sends roughly 10× less data in the online phase.
(4) LR’s online phase uses 4 rounds of interaction2 and
delivers output only to one party. If both parties require
output, their protocol must be modiﬁed to include an ad-
ditional round. Our online phase also delivers outputs to
both parties using either 5 or 6 rounds (depending on the
choice of PSI subprotocols). We conjecture that our pro-
tocol can be modiﬁed to use only 4 rounds, but leave that
question to follow-up work.
(5) Our implementation is more efﬁcient than LR. The
ofﬂine phase more effectively exploits parallelism and
LR is implemented using a mix of Java & C++. The
architecture of LR has a serial control ﬂow with com-
putationally heavy tasks performed in parallel using low
level C++ code. In contrast, our protocol implementation
is in C++ and fully parallelized with low level synchro-
nization primitives.
2.4 Comparison to Non-GC Protocols
Another paradigm for malicious security in the on-
line/ofﬂine setting is based not on garbled circuits but
arithmetic circuits and secret sharing. Notable proto-
cols and implementations falling into this paradigm in-
clude [8, 9, 10, 11, 27]. These protocols indeed have
2For our purposes, a round refers to both parties sending a message.
In other words, messages in the same round are allowed to be sent
simultaneously, and our implementation takes advantage of full-duplex
communication to reduce latency. We emphasize that synchronicity is
not required for our security analysis. The protocol is secure against
an adversary who waits to obtain the honest party’s message in round i
before sending its own round i message.
USENIX Association  
25th USENIX Security Symposium  299
3
lightweight online phases, and many instances can be
batched in parallel to achieve throughput comparable to
our protocol. However, all of these protocols have an on-
line phase whose number of rounds depends on the depth
of the circuit being evaluated. As a result, they suffer
from signiﬁcantly higher latency than the constant-round