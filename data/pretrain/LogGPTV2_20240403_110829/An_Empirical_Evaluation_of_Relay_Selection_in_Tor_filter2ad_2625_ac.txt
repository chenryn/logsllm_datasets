Client behavior.
By design, Tor makes it difﬁcult to
capture the behavior of the network’s users. Existing stud-
ies [13, 30] of client behavior rely on sampled data from
specially instrumented Tor guard and exit relays that record
usage statistics. We utilize the results of these studies to
place clients and destinations in our topology (see Sec-
tion 3.1). Unfortunately, these studies are becoming some-
what dated [13, 30]. We chose not to repeat the experiments
described in the studies due to privacy concerns; as others
have noted [44], recording client behavior on the live Tor
network runs contrary to the network’s principles and has
the potential to put the network’s users at risk. Although
our datasets may not perfectly match current behavior, our
placement of clients conforms to high-level statistics re-
ported by the Tor Metrics Portal [47].
Scaled-down emulation.
To maximize realism, we use
the ExperimenTor [4] emulator in which unmodiﬁed Tor bi-
naries communicate over a virtual network topology. How-
ever, the ability to scale our emulation is limited by our
CPU and bandwidth capacities. Since we cannot emulate
the hundreds of thousands of users who are estimated to use
Tor [25], we instead opt to capture the level of congestion
that occurs on the live Tor network. To do this, we adjust
the number of Tor clients, and tune their behavior by chang-
ing how often they request pages. In doing so, we are able
to approximate the performance characteristics of the Tor
network with a reduced number of clients (see Section 6).
4. Relay Selection
Using our constructed models, we evaluate the perfor-
mance and anonymity of various relay selection strategies
under realistic network conditions.
In what follows, we
enumerate existing and novel relay selection algorithms
(Section 4.1), describe how we integrate the relay selection
techniques into Tor (Section 4.2), and present metrics for
measuring anonymity and performance (Section 4.3).
7
(cid:19)(cid:19)(cid:19)(cid:20)(cid:19)(cid:19)(cid:20)(cid:19)(cid:19)(cid:20)(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)(cid:20)(cid:19)(cid:19)(cid:20)(cid:19)(cid:19)(cid:20)(cid:19)(cid:19)(cid:19)(cid:19)(cid:19)(cid:20)(cid:19)(cid:19)(cid:20)(cid:19)(cid:19)(cid:20)(cid:19)(cid:19)4.1 Relay Selection Algorithms
We consider the following relay selection algorithms:
• Tor. Conceptually, Tor’s relay selection algorithm
weighs relays proportionally according to their band-
width [10, 11]. Murdoch and Watson have found
that such a strategy offers good load balancing prop-
erties while providing reasonable anonymity [32]. In
practice, however, Tor uses a slightly more complex
weighting strategy that de-emphasizes unstable and/or
new relays in favor of more longstanding routers. Ad-
ditionally, Tor biases against selecting guard relays ex-
cept as entry points, and exit relays except at egress
locations.
• Snader/Borisov. Snader and Borisov [43] propose a
reﬁnement to Tor’s algorithm that allows the sender to
“tune” the degree to which selection is biased in favor
of bandwidth. They introduce a family of functions
(cid:26) 1−2sx
1−2s
x
if s (cid:54)= 0
if s = 0
fs(x) =
where s is a parameter that
trades off between
anonymity (selecting relays uniformly at random) and
performance (biasing more heavily in favor of band-
width). Given a list of relays sorted by their band-
widths, the Snader/Borisov (SB) algorithm selects the
relay at index (cid:98)n· fs(x)(cid:99), where x is chosen uniformly
at random from [0, 1) and n is the number of relays. In
the remainder of this paper, we denote the SB strategy
with some ﬁxed value of s as SB-s.
• Unweighted Tor. As a point of comparison, we
include an Unweighted Tor selection strategy where
clients build paths by choosing relays uniformly at ran-
dom without replacement from the set of available re-
lays provided by Tor. Clients using Unweighted Tor
will only choose paths terminating at relays with ac-
cepting exit policies; they also are subject to any other
constraints imposed by Tor.
• Coordinate. Sherr et al. [41, 42] propose latency-
aware link-based relay selection strategies. In their ap-
proach, relays participate in a virtual coordinate em-
bedding system [8]. (To avoid potential anonymity at-
tacks, neither clients nor destinations participate in the
coordinate system.) The Euclidean distance between
any two relays’ virtual coordinates serves as an indi-
cator of the latency between the pair. By summing
the virtual distances between relays’ advertised coor-
dinates, clients can estimate the latencies of potential
anonymous circuits before they are instantiated.
We implement two variants of coordinate-based rout-
ing. In the Coordinates strategy, clients select — but
8
do not instantiate — k candidate paths where the re-
lays in each path are selected using the Unweighted Tor
methodology. Clients compute the expected latency of
each of their k candidates paths, and select the path
with the lowest estimated latency.
We also introduce a hybrid Tor+Coordinates strat-
egy. Here, clients select k candidate paths using Tor’s
default bandwidth-weighted relay selection strategy.
Clients then compute the expected latencies of the k
candidate paths and instantiate the path with the low-
est expected latency.
An evaluation of several potential values showed that
setting k = 3 offered the best trade-off between in-
creased performance and the time spent identifying the
best path.
• LASTor. The recently proposed LASTor [2] system
selects relays in a manner that (1) reduces the proba-
bility that an autonomous system will appear on both
sides of the anonymous circuit and (2) reduces path
latencies by using geographic distance as an estimate
(LASTor uses the GeoIP service to map
for latency.
network addresses to physical locations.) All possible
candidate paths between a client and a destination are
weighted based on their great circle distance (i.e., the
distance measured over a spherical representation of
Earth), and a path is selected that seeks to minimize
that weight. To make this computationally tractable,
relays are clustered into gridsquares based on latitude
and longitude, and paths are calculated through these
gridsquares. In addition, LASTor makes use of iPlane
datasets [26, 27] to avoid selecting paths where there
exists an AS at both ends that could correlate trafﬁc
across the anonymous path.
• Congestion-aware selection. This technique, recently
proposed by Wang et al. [49], seeks to intelligently se-
lect Tor circuits with the lowest levels of congestion.
Congestion measurements for a given circuit are ob-
tained by opportunistically sampling roundtrip times
across that circuit and subtracting the lowest recorded
roundtrip time. Both circuit building events and appli-
cation connections are used to measure circuits with
little additional overhead.
Based on these congestion measurements, Wang et
al. propose two immediate and one long-term path se-
lection techniques. We applied the two immediate
techniques together but omit the long-term algorithm
entirely, as it was found to have negligible impact by
the paper’s authors [49]. The immediate techniques
are as follows: (a) when choosing a circuit to use, ran-
domly choose three of the available circuits, then select
the one with the lowest measured congestion time, and
(b) if at any point, the mean of the last ﬁve measured
congestion times on a given circuit is more than 0.5
seconds, switch to another circuit.
4.2
Integrating Selection Algorithms into Tor
We implement the described selection algorithms within
the set of For the Coordinates
Tor version 0.2.3.0-alpha.
and Tor+Coordinates algorithms, we implement additional
Tor cell types to support ping messages between Tor in-
stances. Ping targets are selected uniformly at random from
the list of running relays once every three seconds. A TLS
connection is established with that target, and ping requests
and responses are exchanged. The initiating relay uses the
minimum ping response received to update its coordinate
using the distributed Vivaldi algorithm [8]. We also modify
Tor to include coordinate information in relay descriptors,
enabling clients to collect the necessary information to esti-
mate the latencies of potential circuits.
Our implementations of the LASTor and Congestion-
aware protocols use the Python TorCtl controller interface
to select and instantiate paths according to the speciﬁcations
outlined by Akhoondi et al. [2] and Wang et al. [49], re-
spectively. For LASTor, we statically designate the latitude
and longitude of our 50-emulated relays based on their real-
world locations, obtained through IP-geolocation with the
GeoIP City database, resulting in 38 geographic clusters.
We do not implement the AS avoidance portion of LASTor
since it relies upon iPlane Nano data [26] for BGP rout-
ing policies which may not map accurately to the routing
on our experimental topology. Akhoondi et al. [2] showed
that AS awareness increased the latency of selected paths,
and hence we expect our LASTor performance results to be
slightly optimistic.
Our Congestion-aware implementation obtains oppor-
tunistic measurements from three sources: the time taken
to extend the circuit to the third relay; the time taken for
application connection requests and acknowledgment; and
a special PINGED cell sent once to measure the roundtrip
time immediately after circuit construction.
4.3 Metrics
Our performance metrics are:
Our goal is to understand the implications of running the
above relay selection strategies on the actual Tor network.
throughput; time-to-
ﬁrst-byte (TTFB) (the time required for clients to fetch the
ﬁrst byte of a document); and average ping time (P-RTT)
(the median roundtrip-time of sixty 100-byte pings).
Our anonymity metrics include: (1) the fraction of in-
stantiated anonymous paths in which the same AS appears
on both sides of the path, as proposed by Edman and Syver-
son [13]; (2) the Shannon entropy over the distribution of
relays in the entry and exit positions of paths [9, 40]; and
(3) the Gini coefﬁcient over those relays, as proposed by
Snader and Borisov [43]. The Gini coefﬁcient is a measure
of equality (equality of selection probability, in this case)
used frequently in economics. A Gini coefﬁcient of 0 rep-
resents perfect selection equality (i.e., all routers are chosen
with equal frequency), while a coefﬁcient of 1 represents
perfect inequality (i.e., only one router is always chosen).
Note that because each path requires that a distinct entry
and exit relay be selected, a Gini coefﬁcient of 1 is effec-
tively impossible to attain; the ceiling is 0.98 for our 50
relay emulation environment.
We compute Shannon entropy and the Gini coefﬁcient
over only the ﬁrst and last relays in a given path. Tor instan-
tiates paths containing three relays; the middle relay com-
municates only with the entry and exit relays using TLS en-
cryption. An adversary observing the middle relay obtains
little information of value, while one who observes both the
entry and exit does not need to see the middle relay to break
anonymity. Thus the distribution of entries and exits is most
critical to anonymity. We desire relay selection strategies
that produce high entropy and low Gini coefﬁcients, as this
prevents a subset of relays from observing a disproportion-
ate amount of the network’s trafﬁc.
Using our models of the live Tor network, we next evalu-
ate the anonymity (Section 5) and performance (Section 6)
properties of proposed relay selection strategies.
5. Simulation-Based Anonymity Analysis
We simulate path selection on our 1524-relay model of
the live Tor network. The simulator is based on actual Tor
code (version 0.2.2.33) and uses Tor’s relay selection func-
tions. Our simulator implements only Tor’s relay selection
logic and does not simulate the actual construction of paths,
the transmission of data, or network effects such as conges-
tion.6 The performance of various relay selection policies,
which is heavily dependent on network effects, is studied
under full-network emulation in Section 6. Here, we focus
our simulation experiments on measuring the AS diversity
of paths as well as the distribution of selected relays.
We modify Tor’s relay selection logic to support the
SB-s and LASTor strategies. Since we do not simulate
network conditions, we do not consider the Coordinates,
Tor+Coordinates, or Congestion-aware strategies.
For each tested strategy, we simulate 5 million paths. Us-
ing the client and destination AS distributions reported by
Edman and Syverson [13], we assign clients and destina-
tions to each AS in the distribution, for each of the 5 M
paths. We then check whether the same AS appears both on
the path from the client to the guard relay as well as on the
6Our simulator is based on the framework described by Elahi et al. [14].
9
path from the exit relay to the destination.If so, we weigh
the result by the probability that this client and destination
pair would be chosen (again, using Edman and Syverson’s
AS distribution). Effectively, this method yields the per-
centage of vulnerable paths, assuming clients and destina-
tions are distributed as they were in Edman and Syverson’s
study. As discussed in 4.2, our LASTor implementation does
not include its AS avoidance strategy, resulting in a higher
percentage of vulnerable paths than is likely to occur in a
deployed implementation. The entropy and Gini coefﬁcient
results for LASTor are unaffected.
Table 2 shows the percentage of vulnerable paths for the
various relay selection strategies, as well as the Gini coef-
ﬁcient and entropy over the distribution of selected relays.
These metrics should not be taken as direct indicators of the
strength of a particular anonymity technique, but rather as
a mechanism for comparing the security properties of dif-
ferent strategies. The Unweighted Tor strategy offers the
smallest percentage of vulnerable paths. This is unsurpris-
ing, since randomly selecting relays increases the diversity
of paths. For the Snader-Borisov paths, increasing the value
of s (i.e., biasing more heavily in favor of performance) in-
creases the percentage of vulnerable paths, as the distribu-
tion of selected relays becomes less uniform. This effect is
best captured by the increase in the Gini coefﬁcient (indi-
cating increasingly uneven distributions) as s increases.
Overall, in all cases, the relay selection strategy did not
signiﬁcantly increase the percentage of vulnerable paths.
However, we note that the prevalence of a small number of
ASes on both sides of the anonymous circuits cause approx-
imately one quarter of the circuits to be vulnerable. This is
slightly higher than the value reported in Edman and Syver-
son’s study [13] (approximately 18% for Tor’s default strat-
egy). The potential increase in vulnerability may be due
to topological changes on the Internet since their study was
conducted in 2009. Additionally, we note that while our In-
ternet model is based on empirical traceroute data, Edman
and Syverson estimate AS paths using Qiu’s inference al-
gorithm [37] applied to RouteViews [1] data. In Figure 8,
we report the ASes that most commonly occurred on either
side of a path, and the rate at which that occurred for each
selection strategy.
6. Full-Network Emulation Study
To measure the performance of relay selection, we run
a modiﬁed version of Tor in an emulated network. We use
ExperimenTor [4], executing all Tor instances on a 12-core
2.8 GHz Xeon X5660 machine with 64 GB of memory, run-
ning Ubuntu 11.10 with the 2.6.38 Linux kernel. Experi-
menTor’s ModelNet [48] virtual network backend runs in-
side of a FreeBSD 6.3 virtual machine connected to the host
emulator with a direct 10 GbE link. Our experimental con-
Relay selection strategy
% vulnerable paths
Gini coef.
Entropy
Unweighted Tor
Tor
SB-3
SB-6
SB-9
SB-12
SB-15
LASTor
24.34
27.39
24.66
24.99
26.01
26.84
27.42
24.94
0.530
0.891
0.662
0.776
0.841
0.878
0.900
0.644
9.65