ploit a speciﬁc vulnerability; (b) an arbitrary shellcode
that attackers choose to execute after the vulnerability is
exploited. The shellcode content is usually variant, espe-
cially when obfuscated; (c) random or special paddings
(e.g., NOP 0x90) that make the payload more robust; (d)
other format bytes required by network protocols.
With the help of the rich libraries of scripting lan-
guages and the built-in components provided by the at-
tack framework, an attack script can call APIs of related
libraries or components to help it perform each step, es-
pecially composing an attack payload.
As an example, Listing 1 shows a Ruby code snip-
pet extracted from a real Metasploit attack script exploit-
ing a vulnerable application called Arkeia.
In the ex-
ample, the script deﬁnes two methods. exploit is the
main method that performs the major steps to launch the
attack. prep ark5 is one of the payload composing
methods. When the script runs on Metasploit, it ﬁrst
alert tcp any any -> any 617 (
msg:"Script: type77 (Win), Target Version: 5,
Behavior: Version Probing, Stack Overflow,
Pattern: JMP to Shellcode with
Vul_Ret_Addr";
content:
"|e9 38 6c fb ff ff eb f9 ad 32 aa 71|";
pcre:"/[.]{1167}\xe9\x38\x6c\xfb\xff\xff\xeb\
xf9\xad\x32\xaa\x71[a-zA-Z]{2917}/";
classtype:shellcode-detect; sid:5000656;)
Listing 2: One Snort rule signature generated for the attack payload
composed by prep ark5.
connects to the target over the network (Line 2), and then
probes the target’s version (Line 4). Here both connect
and probe ver are API methods of a built-in network
protocol component. Based on the version, it calls the
corresponding method to start composing the attack pay-
load speciﬁc to the target (Lines 5-9).
When prep ark5 is called, the payload is ﬁrst as-
signed by the shellcode component, which returns a con-
ﬁgured shellcode (Line 18). Note that the shellcode can
be freely chosen and obfuscated. The shellcode compo-
nent offers several different shellcodes for different pur-
poses. Then the payload is appended (<<) with several
contents (Lines 19-23). rand alpha generates random
alphabet padding to not only extend the payload to the
required size of the network protocol, but also introduce
more randomness for evasion. The concrete bytes repre-
sent some assembly code that will jump to the shellcode
(e.g., “\xeb\xf9” and “\xe9” are two JMP instructions).
pack("V") converts the integer to bytes as the offset
of one JMP. get target ret is another attack frame-
work API that queries the script’s knowledge base (omit-
ted here due to space limit, please refer to [4]) to retrieve
the exploitable return address based on the target ver-
sion, which can hijack the control ﬂow1 (Line 22). After
the payload is composed, the script ﬁrst sends a pream-
ble packet to the target, followed by the attack payload
packet to exploit the vulnerability (Lines 11-13).
Popular attack frameworks provide plenty of built-in
components covering various network protocols, OSes,
and offering different shellcodes and NOP paddings,
which enable attackers to quickly develop new attack
scripts to exploit different targets. Furthermore, ad-
vanced attackers can create even sophisticated attack
scripts, which have multiple execution paths performing
different attack behaviors and payloads. Some of them
may be triggered only under certain attack conditions.
Therefore, the traditional approach that requires both
controlled environments and vulnerable applications is
not scalable for analyzing attack scripts. Since differ-
1In [4],
the exploitable return address actually points to a
POP/POP/RET instruction sequence, which is a typical SEH-based at-
tack to hijack control ﬂow in Windows.
USENIX Association  
22nd USENIX Security Symposium  67
68  22nd USENIX Security Symposium 
USENIX Association
entattackscriptstargetdifferentapplicationsandOSes,itiscostlyandtime-consumingtoobtaineveryapplica-tion(letalonetheexpensivecommercialones)andsetupenvironmentsforeveryOS.Itisevenhardertocre-atedifferentattackconditionstoexposedifferentattackbehaviorsandpayloadsinsophisticatedattackscripts.3MetaSymploitInthissection,weﬁrststatetheproblemandassumptionswefocuson,andthengiveanoverviewofMetaSymploit,followedbythedetailedtechniquesinitstwocoreparts.3.1ProblemStatementandAssumptionsProblemStatement.Wefocusontheproblemcausedbyscript-basedattackframeworksandtheirattackscripts:howtoprovideanautomatedmechanismthatcananalyzeanddefendagainstnewlydistributedattackscripts.Particularly,themechanismshouldbetime-efﬁcientinordertoaddressthesecurityissuescausedbytwomajorfeaturesofattackscripts:alargenumberofscriptswithwide-rangingtargets,andfastdevelopmentanddistributionofnewscriptsthatcanbedirectlyusedtoexploitzero-dayvulnerabilities.Assumptions.Weassumethatbothscript-basedat-tackframeworksandattackscriptsareavailablefromeitherpublicorundergroundhackingcommunities.Assoonasanewattackscriptisdistributed,itcanbeimmediatelycapturedandanalyzed.Wealsoassumethatthescriptinglanguagesusedbyattackframeworksaregeneral-purposeobject-orientedscriptinglanguages,suchasRubyandPython.Inreality,sectools.orglists11mostpopularattacktools[6]inthepubliccom-munity.8ofthemareRuby/Python-basedattackframe-works.Mostofthemareactivelymaintainedwithfre-quentupdatesofnewattackscripts.3.2MetaSymploitOverviewGivenanattackscript,thegoalofMetaSymploitistoquicklyanalyzeﬁne-grainedattackbehaviorsthatthescriptcanperform,andautomaticallygeneratespeciﬁcIDSsignaturesforeveryattackpayloadthatthescriptcancompose,providingafastandeffectivedefenseagainstattackslaunchedbythisscript.Toachievethisgoal,MetaSymploitleveragessymbolicexecutionandenhancesitwithanumberofsecurityfeaturesdesignedforattackscriptsanalysisandsignaturegeneration.Symbolicexecution2isaprogramanalysistechniquethatexecutesprogramswithsymbolicratherthancon-cretevalues.Whenexecutingbranchesrelatedtosym-2Formorebackgroundofsymbolicexecution,pleasereferto[25]Attack ScriptPreprocessor Symbolic Execution TracerNormalized ScriptReturn SolutionPath ConstraintsThird-Party Constraint SolversPayload ParserAttack OutputFine-grained Tracing DumpSuccessful/Failed Attack Paths;Sequence of Multi-Step Attacks;Pre & Post Conditions; Etc.IDS SignatureGeneratorPatterns & Malicious WeightsIDS SignaturesAttack Knowledge BaseSymbolic Class LibraryScript-based Attack FrameworkSymbolic API ExtensionBehavior & Constraint LoggingOutput API HookingConstant Pattern ExtractingPattern Refining & ConsolidatingPattern Context DerivingSymbolic Execution Layer (SymExeLayer)Attack ScriptAttack PayloadsBehavioral API Calls & Attack ConstraintsSignature Generation (SigGen)Extracted PatternsPattern ContextIDS SignaturesSymbolically executedFigure1:MetaSymploitconsistsoftwomajorpartsdrawningrey.(Thearrowsshowtheworkﬂowofanattackscriptanalysis.)bolicvalues,itmaintainsapathconstraintsetandforkstoexploredifferentexecutionpaths.Byusingsym-bolicexecution,MetaSymploithasthreeadvantagestoachievefastanalysisanddefenseagainstattackscripts:(1)analyzingscriptswithoutrequiringactualenviron-mentsorvulnerabletargets,(2)exploringdifferentex-ecutionpathstoexposedifferentattackbehaviors,(3)usingsymbolicvaluestorepresentvariantcontentsinat-tackpayloadstoeasetheextractionofconstantpatterns.Figure1showsthearchitectureofMetaSymploit,whichconsistsoftwomajorparts,thesymbolicexe-cutionlayer(SymExeLayer)andthesignaturegenerator(SigGen).Givenanattackframework,SymExeLayerisbuiltupontheframework.Itreusestheframework’sex-ecutionfacilitywhileextendingtheframeworkinterfacetosupportsymbolicexecutionofattackscripts.Whenascriptissymbolicallyexecuted,SymExeLayercapturesallattackbehaviorsandpayloadsthatthescriptcanper-formandcompose.Afterthesymbolicexecutionisdone,SigGentakesthecapturedresultsasinputs.Itextractsconstantpatternsbyparsingthecontentsoftheattackpayloads.Italsoanalyzestheattackbehaviorstoderivethesemanticcontextsthatdescribetheextractedpatterns.Finally,SigGencombinesthepatternsandthecontextstogenerateIDSsignaturesforthisattackscript.Morespeciﬁcally,threekeytechniquesaredevel-opedtorealizethefunctionalitiesofSymExeLayerandSigGen,respectively.AsshowninFigure1,SymExe-Layerconsistsof(1)SymbolicAPIExtension.ItextendstheAPIsofboththeattackframeworkandthescript-inglanguagetosupportsymbolicvaluesandoperations.Notably,itextendstheAPIsrelatedtoenvironments/tar-gets and variant payload contents to return symbolic val-
ues. (2) Behavioral API & Attack Constraint Logging. It
records critical API calls that represent attack behaviors.
It also logs path constraints of symbolic values related to
environments and targets. Both logs will be used for de-
riving pattern context (described later). (3) Output API
Hooking. It hooks various output APIs that are used to
send attack payloads, in order to capture complete pay-
load contents for extracting constant patterns.
SigGen consists of (1) Constant Pattern Extracting.
By parsing the payload contents, it extracts constant pat-
terns that can represent the payload. Constant patterns
include ﬁxed contents, ﬁxed lengths of contents, and
ﬁxed offsets of the contents in the format. (2) Pattern
Reﬁning and Consolidating.
It reﬁnes patterns by dis-
tinguishing critical patterns from common benign bytes
and trivial patterns. It also avoids generating duplicated
signatures by examining repeated patterns. (3) Pattern
Context Deriving. In order to describe what the extracted
pattern represents, it analyzes the logs of behaviors and
constraints to derive the semantic context of the pattern.
To illustrate the workﬂow of MetaSymploit, we revisit
the script in Listing 1. First, SymExeLayer takes the
script as input and symbolically executes it. The script
calls a number of symbolic-extended APIs, including
probe ver, shellcode and rand alpha. Instead
of returning a concrete number, probe ver assigns
version a symbolic integer representing the target ver-
sion. shellcode and rand alpha return symbolic
strings to represent all possible shellcodes and random
paddings, respectively. Meanwhile, probe ver indi-
cates the probing behavior. SymExeLayer logs it as one
attack behavior. SymExeLayer also logs the path con-
straint version==5 since it indicates that the Line 6
branch is taken only under the attack condition that the
target version is 5. In contrast, when symbolic execution
forks to explore Line 8, SymExeLayer logs the negated
constraint version!=5.
When executing prep ark5, SymExeLayer logs
shellcode, rand alpha, and get target ret,
since these APIs indicate a typical attack behavior of
composing a stack overﬂow payload. Note that because
get target ret is a call with a concrete argument,
SymExeLayer uses the underlying framework to execute
it normally to get the concrete return address value. On
the other hand, SymExeLayer symbolically extends the
<< API to support appending symbolic strings. Finally,
when the composed payload is sent, the hooked output
API sock.put captures the complete payload contents.
SigGen then analyzes the payload contents and the be-
havior & constraint logs to generate signatures. List-
ing 2 shows one Snort rule generated by SigGen. The
content is the byte pattern extracted from the constant
bytes in the payload composed in Lines 20-22. The ﬁrst 8
bytes are two JMP instructions and the last 4 bytes are the
return address. The pcre is a regular expression match-
ing the entire payload packet, including constant bytes
and random paddings. content provides general fast
matching, while pcre provides more precise matching.
The msg shows the pattern context. The target version
is derived from the version==5 constraint. The be-
havior and the meaning of the patterns are derived from
the logged behavioral API calls. The msg gives more in-
sights that guide security analysts to use the signature to
protect vulnerable application of speciﬁc version.
3.3 Symbolic Execution Layer
This section explains more details about the three tech-
niques of SymExeLayer that extend the attack frame-
work to perform symbolic execution and attack logging.
3.3.1 Symbolic API Extension
The key point of performing symbolic execution on at-
tack scripts is to treat all variant values involved in the
attack launching process as symbolic values, so that all
possible attack variations can be covered. Since attack
scripts use APIs to operate variant values, we extend the
variant-related APIs of both the scripting language and
the attack framework with symbolic support.
The variant-related APIs can be further divided into
two categories: direct and indirect. Direct-variant-
related APIs always return variant values. There are two
major types in this category, (1) the APIs probing ex-
ternal environments/targets, (2) the APIs generating ran-
dom payload contents.
In both cases, we replace the
original APIs with our symbolic-extended ones, which
directly return symbolic values when called. As a re-
sult, the ﬁrst type of APIs skips probing the actual en-
vironment/target, such as probe ver in the example.
Such skipping makes MetaSymploit scalable and efﬁ-
cient, since there is no need to prepare different environ-
ments or applications when analyzing different scripts.
For the second type, as the payload content is a string
of bytes, the APIs use symbolic values to represent any
variant bytes, such as shellcode and rand alpha.
Hence, we can clearly distinguish concrete contents from
symbolic contents in one payload.
In addition, every
symbolic value is assigned with a label showing what
it represents based on its related API, such as sym ver,
sym shellcode, and sym rand alpha. Note that
SymExeLayer uses these labels to keep the semantics of
the values, rather than relying on variable names, which
can be freely decided by attackers.
Indirect-variant-related APIs return variant values
only when their arguments are variant values. Such case
typically happens in the operations of some primitive
USENIX Association  
22nd USENIX Security Symposium  69
classes such as String, Integer, and some payload com-
posing operations.
In SymExeLayer, we extend such
APIs by adding the logic of handling symbolic argu-
ments. If the arguments are concrete, the APIs execute
the original logic and return concrete values as normal.
If the arguments are symbolic, the APIs switch to the
symbolic handling logic, which propagates the symbolic
argument in accord with the API functionality, and re-
turns a symbolic expression. In Listing 1, for a concrete
string argument, the symbolic-extended << appends it as
normal. For a symbolic argument, it holds both the orig-
inal string and the new appended symbolic one in order
and returns them as one symbolic string expression.
3.3.2 Behavioral API & Attack Constraint Logging
Since symbolic execution is a general program analysis
technique, in order to provide additional security analy-
sis of attack scripts, for every execution path, we keep
a log recording both critical API calls that reﬂect attack
behaviors and path constraints that represent the attack
condition when exploring each execution path.
Behavioral API Logging. As mentioned in Section 2,
attack scripts use APIs provided by the language library
and the attack framework to launch attacks. In the analy-
sis, it is critical to capture the API calls that perform the
detailed attack behaviors during the launching process.
There are two major types of behavioral APIs, network
protocol APIs and payload-related APIs. By logging the
ﬁrst type, we are able to capture all the interactions be-
tween the attack script and the target. By logging the sec-
ond type, we know exactly how a payload is composed
and keep track of its detailed format and contents.
In practice, given an attack framework, we build a
knowledge base collecting the APIs from the libraries
and components that provide network protocols and
payload-related operations. During execution, SymEx-
eLayer identiﬁes behavioral APIs and logs them while
keeping the API call sequence in the execution path.
Note that we also log the arguments and return values
of the APIs, especially for payload-related APIs, whose
return values may be a part of the payload contents.
Attack Constraint Logging.
In symbolic execution,
path constraints are the set of branch conditions involv-
ing symbolic values in one execution path. When en-
countering a new symbolic branch condition, symbolic
execution consults a constraint solver to decide which
branch(es) is feasible to take, and adds the new branch
constraint into the path constraint set. If both branches
are feasible to take, the execution path forks into two
paths to explore both branches [25].
In attack scripts, we focus on the constraints related to
environments and targets. We regard these constraints as
attack constraints because different symbolic conditions
that they represent typically indicate different attack con-
ditions reﬂecting the probing results of environments or
targets, therefore leading to different execution paths that
compose different payloads in consequence. In the ex-
ample, version==5 ? prep ark5 : prep ark4.
Recall that the APIs that probe external environments
and targets are symbolic-extended. The symbolic return
values of these APIs carry the labels showing what ex-
ternal source they represent. When executing a sym-
bolic branch condition, we check if any symbolic value
with external-source label is involved.
If so, we log
the corresponding constraint.
In the example, when
version==5 is executed, we ﬁnd that sym ver is an
external source, and thus log the constraint.
In summary, this behavior & constraint logging pro-
vides a ﬁne-grained analysis report that saves the time-
consuming work for security analysts. More importantly,
the behaviors and constraints logged in each execution
path can be further parsed to derive the semantic context
for the extracted patterns (discussed in Section 3.4.3).
3.3.3 Output API Hooking
After an attack script ﬁnishes composing an attack pay-
load, the script sends the payload as a network packet to
the target to exploit the vulnerability. This payload send-
ing step is the exact point of launching an attack. In order
to capture the complete content of the attack payload for