执行直到程序到达当前栈帧中当前行之后（与 [break](#break) 命令相同的参数）的源码行。此命令用于通过一个多次的循环，以避免单步执行。
用法：`until ` 或 `u ` 继续运行程序，直到达到指定的位置，或者当前栈帧返回。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Continuing-and-Stepping.html)。
### continue
在信号或断点之后，继续运行被调试的程序。
用法： `continue [N]` 如果从断点开始，可以使用数字 `N` 作为参数，这意味着将该断点的忽略计数设置为 `N - 1`(以便断点在第 N 次到达之前不会中断)。如果启用了非停止模式（使用 `show non-stop` 查看），则仅继续当前线程，否则程序中的所有线程都将继续。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Continuing-and-Stepping.html)。
### print
求值并打印表达式 EXP 的值。可访问的变量是所选栈帧的词法环境，以及范围为全局或整个文件的所有变量。
用法：
* `print [expr]` 或 `print /f [expr]` `expr` 是一个（在源代码语言中的）表达式。
默认情况下，`expr` 的值以适合其数据类型的格式打印；您可以通过指定 `/f` 来选择不同的格式，其中 `f` 是一个指定格式的字母；详见[输出格式](https://sourceware.org/gdb/current/onlinedocs/gdb/Output-Formats.html)。
如果省略 `expr`，GDB 再次显示最后一个值。
要以每行一个成员带缩进的格式打印结构体变量请使用命令 `set print pretty on`，取消则使用命令 `set print pretty off`。
可使用命令 `show print` 查看所有打印的设置。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Data.html)。
### x
检查内存。
用法： `x/nfu ` 或 `x ` `n`、`f` 和 `u` 都是可选参数，用于指定要显示的内存以及如何格式化。`addr` 是要开始显示内存的地址的表达式。
`n` 重复次数（默认值是 1），指定要显示多少个单位（由 `u` 指定）的内存值。
`f` 显示格式（初始默认值是 `x`），显示格式是 `print('x'，'d'，'u'，'o'，'t'，'a'，'c'，'f'，'s')` 使用的格式之一，再加 `i`（机器指令）。
`u` 单位大小，`b` 表示单字节，`h` 表示双字节，`w` 表示四字节，`g` 表示八字节。
例如：
`x/3uh 0x54320` 表示从地址 0x54320 开始以无符号十进制整数的格式，双字节为单位来显示 3 个内存值。
`x/16xb 0x7f95b7d18870` 表示从地址 0x7f95b7d18870 开始以十六进制整数的格式，单字节为单位显示 16 个内存值。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Memory.html)。
### display
每次程序暂停时，打印表达式 EXP 的值。
用法： `display `, `display/fmt ` 或 `display/fmt ` `fmt` 用于指定显示格式。像 [print](#print) 命令里的 `/f` 一样。
对于格式 `i` 或 `s`，或者包括单位大小或单位数量，将表达式 `addr` 添加为每次程序停止时要检查的内存地址。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Auto-Display.html)。
### info display
打印自动显示的表达式列表，每个表达式都带有项目编号，但不显示其值。
包括被禁用的表达式和不能立即显示的表达式（当前不可用的自动变量）。
### undisplay
取消某些表达式在程序暂停时的自动显示。参数是表达式的编号（使用 `info display` 查询编号）。不带参数表示取消所有自动显示表达式。
`delete display` 具有与此命令相同的效果。
### disable display
禁用某些表达式在程序暂停时的自动显示。禁用的显示项目不会被自动打印，但不会被忘记。 它可能稍后再次被启用。
参数是表达式的编号（使用 `info display` 查询编号）。不带参数表示禁用所有自动显示表达式。
### enable display
启用某些表达式在程序暂停时的自动显示。
参数是重新显示的表达式的编号（使用 `info display` 查询编号）。不带参数表示启用所有自动显示表达式。
### help
打印命令列表。
您可以使用不带参数的 `help`（缩写为 `h`）来显示命令的类别名的简短列表。
使用 `help ` 您可以获取该类中的各个命令的列表。使用 `help ` 显示如何使用该命令。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Help.html)。
### attach
挂接到 GDB 之外的进程或文件。该命令可以将进程 ID 或设备文件作为参数。
对于进程 ID，您必须具有向进程发送信号的权限，并且必须具有与调试器相同的有效的 uid。
用法： `attach ` GDB 在安排调试指定的进程之后做的第一件事是暂停该进程。
无论是通过 `attach` 命令挂接的进程还是通过 `run` 命令启动的进程，您都可以使用的 GDB 命令来检查和修改挂接的进程。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Attach.html)。
### run
启动被调试的程序。
可以直接指定参数，也可以用 [set args](https://sourceware.org/gdb/current/onlinedocs/gdb/Arguments.html) 设置（启动所需的）参数。
例如： `run arg1 arg2 ...` 等效于
```
set args arg1 arg2 ...
run
```
还允许使用 `>`、 `>` 进行输入和输出重定向。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Starting.html)。
### backtrace
打印整体栈帧信息。
* `bt` 打印整体栈帧信息，每个栈帧一行。
* `bt n` 类似于上，但只打印最内层的 n 个栈帧。
* `bt -n` 类似于上，但只打印最外层的 n 个栈帧。
* `bt full n` 类似于 `bt n`，还打印局部变量的值。
`where` 和 `info stack`(缩写 `info s`) 是 `backtrace` 的别名。调用栈信息类似如下：
```
(gdb) where
#0  vconn_stream_run (vconn=0x99e5e38) at lib/vconn-stream.c:232
#1  0x080ed68a in vconn_run (vconn=0x99e5e38) at lib/vconn.c:276
#2  0x080dc6c8 in rconn_run (rc=0x99dbbe0) at lib/rconn.c:513
#3  0x08077b83 in ofconn_run (ofconn=0x99e8070, handle_openflow=0x805e274 ) at ofproto/connmgr.c:1234
#4  0x08075f92 in connmgr_run (mgr=0x99dc878, handle_openflow=0x805e274 ) at ofproto/connmgr.c:286
#5  0x08057d58 in ofproto_run (p=0x99d9ba0) at ofproto/ofproto.c:1159
#6  0x0804f96b in bridge_run () at vswitchd/bridge.c:2248
#7  0x08054168 in main (argc=4, argv=0xbf8333e4) at vswitchd/ovs-vswitchd.c:125
```
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Backtrace.html)。
### ptype
打印类型 TYPE 的定义。
用法： `ptype[/FLAGS] TYPE-NAME | EXPRESSION`
参数可以是由 `typedef` 定义的类型名， 或者 `struct STRUCT-TAG` 或者 `class CLASS-NAME` 或者 `union UNION-TAG` 或者 `enum ENUM-TAG`。
根据所选的栈帧的词法上下文来查找该名字。
类似的命令是 `whatis`，区别在于 `whatis` 不展开由 `typedef` 定义的数据类型，而 `ptype` 会展开，举例如下：
```
/* 类型声明与变量定义 */
typedef double real_t;
struct complex {
    real_t real;
    double imag;
};
typedef struct complex complex_t;
complex_t var;
real_t *real_pointer_var;
```
这两个命令给出了如下输出：
```
(gdb) whatis var
type = complex_t
(gdb) ptype var
type = struct complex {
    real_t real;
    double imag;
}
(gdb) whatis complex_t
type = struct complex
(gdb) whatis struct complex
type = struct complex
(gdb) ptype struct complex
type = struct complex {
    real_t real;
    double imag;
}
(gdb) whatis real_pointer_var
type = real_t *
(gdb) ptype real_pointer_var
type = double *
```
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Symbols.html)。
---
### 参考资料
* [Debugging with GDB](https://sourceware.org/gdb/current/onlinedocs/gdb/)
---
译者：[robot527](https://github.com/robot527) 校对：[mudongliang](https://github.com/mudongliang)， [wxy](https://github.com/wxy)