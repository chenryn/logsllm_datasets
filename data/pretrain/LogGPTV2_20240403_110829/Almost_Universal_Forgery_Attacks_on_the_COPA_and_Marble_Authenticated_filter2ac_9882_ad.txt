1 , bC (j)
message cM (j), respectively.1 Since the same user key
and constant associated data are used, clearly bC (j)
for 1 ≤ l ≤ 2; i.e., bC (j) = (C (i1)
, bC (j)
5. Select the message-ciphertext pair (cM (j), bC (j)) such
1 ≤ t ≤ δ:cM (j)
bC (j)
⊕ 22 ∗ 3 ∗ L =
⊕ 23 ∗ L = T (it) ⊕ 2 ∗ 7 ∗ L.
M (it)
that the following two equations hold for some t, here
⊕ 2 ∗ 32 ∗ L; (3)
2⊕
, C (i1)
2
C (i1)
l
1
l
l =
3 ).
3
l=1
(4)
1The tags for the 2ϕ chosen messages are not required in
this attack.
3
795Note that once we obtain the ciphertext-tag pair for a
message in Step 4, we can discard it if it does not meet Eq.
(5), and thus we only need to store the qualiﬁed message-
ciphertext-tag tuples in Step 4. Particularly, if we choose
α = 1 or β = 1, then Eq. (5) can be checked with one ∗
operation and one ⊕ operation (which is generally negligible
compared with one ∗ operation) for a message-ciphertext
pair, since the right-hand side of Eq. (5) is one-oﬀ.
For a random message-ciphertext pair (cM (j), bC (j)), it is
(cid:0)n) × 2
(cid:0)n × 1 + (1 − 2
expected that Eq. (5) holds for a given it with a probability
(cid:0)n ≈ 21(cid:0)n, assuming that Eq.
of 2
(5) holds uniformly at random when at least one of Eqs. (3)
and (4) does not hold. On the other hand, for a given it the
(conditional) probability that both Eqs. (3) and (4) hold
when Eq. (5) holds is
=
=
Pr.(Eq. (5) holds)
Pr.(Both Eqs. (3) and (4) hold when Eq. (5) holds)
Pr.(Eq. (5) holds when Eqs. (3) and (4) hold)
×Pr.(Eqs. (3) and (4) hold)
1
21(cid:0)n
1
.
2
Since there are 2ϕ message-ciphertext pairs (cM (j), bC (j)),
× 2
(cid:0)n
=
).
the expected number of qualiﬁed message-ciphertext pairs
satisfying Eq. (5) for an it is approximately 2ϕ × 21(cid:0)n × δ =
δ·2ϕ(cid:0)n+1. The probability that there is at least one message-
ciphertext pair satisfying Eq. (5) for an it is approximately
1 − (1 − δ · 21(cid:0)n)2ϕ ≈ 1 − e
, and the probability
that the recovered L is correct is 1
2
· (1 − e
(cid:0)δ(cid:1)2ϕ(cid:0)n+1
(cid:0)δ(cid:1)2ϕ(cid:0)n+1
(cid:0)(2θ
δ )(cid:1)2
(cid:0)n(δ(cid:0)1)
(cid:0)δ(cid:1)2ϕ(cid:0)n+1
· (1 − e
) · (1 − e
Therefore, the state recovery attack requires 2θ + 2ϕ en-
cryption queries (the tags for the 2ϕ chosen messages are
not required) and a memory of approximately 3n · 2θ bits,
and has a computational complexity of about 2ϕ simple
∗ operations, with a success probability of approximately
1
(If one would
2
treat the time complexity for encrypting chosen messages as
part of the time complexity of the attack, the resulting time
complexity would be about λ · (2θ + 2ϕ) + 2ϕ+1 block cipher
encryptions, (2ϕ simple ∗ operations are negligible compared
with the block cipher encryptions), where λ is the number
of block cipher encryptions for one of the 2θ messages.)
3.2.3 Making an (Almost) Universal Forgery
Once the correct n-bit secret parameter L is recovered
by the above state recovery attack, we can make a univer-
sal forgery attack on the COPA with a single query at a
100% success probability, by modifying message as in Sec-
tion 3.1.3. Its illustration is similar to Fig. 4.
).
In summary, the universal forgery attack that includes
the phase of recovering L requires approximately 2θ + 2ϕ
encryption queries (the tags for 2ϕ chosen messages are not
required actually) and a memory of approximately 3n · 2θ
bits, and has a computational complexity of about 2ϕ simple
∗ operations, with a success probability of approximately
1
(Note that if
2
one would treat the time complexity for encrypting chosen
messages as part of the time complexity of the attack, the
resulting time complexity would be about λ · (2θ + 2ϕ) +
2ϕ+1 block cipher encryptions, where λ is the number of
) · (1 − e
· (1 − e
(cid:0)δ(cid:1)2ϕ(cid:0)n+1
(cid:0)n(δ(cid:0)1)
δ )(cid:1)2
(cid:0)(2θ
).
Figure 4: State recovery attack on COPA under con-
stant associated data
This can be partially done eﬃciently by checking whether
⊕β∗ T (it); (5)
⊕β∗ bC (j)
α∗cM (j)
3 = α∗ 2⊕
M (it)
3
l
l=1
we denote the qualiﬁed message-ciphertext pair(s) by
(cM (ω), bC (ω)) (if any), where 1 ≤ ω ≤ 2ϕ.
6. Recover L from Eq. (3) with respect to cM (ω), that is
cM (ω)
⊕ 22 ∗ 3∗ L =
⊕
2
l=1 M (it)
l
3
the recovered L.
⊕ 2∗ 32 ∗ L, and output
⊕
Step 1 requires a memory of about 5n·2θ bits, which can be
reduced to 3n·2θ bits by storing only (
2 , T (i)).
By a mathematical analysis (namely, Eq. 7.5) on the co-
incidence theory from [8], the probability p that given 2θ
randomly chosen messages there is at least one δ-tuple sat-
isfying Eq. (1) is approximately given by the equation
l=1 M (i)
, C (i)
2
l
2θ
(cid:0) 1
δ
2θ × e
δ(cid:1)2n × (1 −
(cid:0) 2θ
= [2(δ(cid:0)1)(cid:1)n × δ! × log
(cid:0)2θ(cid:1)δ(cid:2)e
(δ + 1) · 2n )
1
1(cid:0)p
e
]
1
δ .
(cid:0)2θ(cid:0)n
(1(cid:0) 2θ(cid:0)n
(cid:0)(2θ
δ )(cid:1)2
Thus, we have p = 1 − e
)(cid:2)2(δ(cid:0)1)(cid:1)n(cid:2)δ! , which is ap-
proximately equal to 1 − e
for θ ≪ n and a
(cid:0)n(δ(cid:0)1)
small δ. Eq. (1) guarantees that messages M (i1), M (i2),··· ,
M (iδ ) have the same internal state S immediately before the
tag generation phase.
δ+1
Observe that for the correct value of L, Eq. (4) holds once
Eq. (3) holds, and vice versa. If both Eqs. (3) and (4) hold,
then Eq. (5) always holds, because from Eqs. (3) and (4)
⊕ 2⊕
l=1
we have cM (j)
bC (j)
3
3
l = 2 ∗ 32 ∗ L ⊕ 22 ∗ 3 ∗ L;
M (it)
⊕ T (it) = 23 ∗ L ⊕ 2 ∗ 7 ∗ L.
Then, we can obtain Eq. (5) after applying α and β to the
above two equations and XORing the resulting two equa-
tions.
EK⊕AD133∗L⊕ADabn2abn−1∗34∗L⊕EK2abn−1∗35∗LorADabn||1||0∗orEK⊕M(it)13∗LEK⊕M(it)22∗3∗L⊕⊕EK⊕C(it)12∗LEK⊕C(it)222∗LEK⊕L2l=1M(it)l2∗32∗L⊕EK⊕T(it)2∗7∗LEK⊕AD133∗L⊕ADabn2abn−1∗34∗L···⊕EK2abn−1∗35∗LADabn||1||0∗orEK⊕bM(j)1=M(i1)13∗LEK⊕bM(j)2=M(i1)22∗3∗L⊕bM(j)322∗3∗L⊕⊕⊕EK⊕bC(j)1=C(i1)12∗LEK⊕bC(j)2=C(i1)222∗LEK⊕bC(j)323∗LEK⊕L3l=1bM(j)l22∗32∗L⊕EK⊕bT(j)22∗7∗LEKSS···LLor796block cipher encryptions for one of the 2θ messages.) The
success probability is a bit complex, anyway, we can make
an attack faster than exhaustive key search if we choose
the parameters θ, δ and ϕ appropriately, as applied to AES-
COPA next, which holds for COPA.
3.2.4 An Application to AES-COPA in the Nonce-
Misuse Scenario
We have n(= k) = 128 for AES-COPA (v1/2). By setting
θ = 115, δ = 8 and ϕ = 124, the above attack requires about
2124 encryption queries in the nonce-misuse scenario and a
memory of about 2120.6 bytes, and has a time complexity of
about 2124 simple ∗ operations, with a success probability
of about 32%. This attack is mainly of academic interest,
since its data complexity is far beyond the birthday bound
constraint.
3.3 More Efﬁcient (Almost) Universal Forgery
Attack on COPA and AES-COPA under
Constant Associated Data
An anonymous reviewer mentioned a more eﬃcient almost
universal forgery attack on COPA and AES-COPA under
constant associated data, which works as follows: (1) Choose
uniformly at random 264 messages M (i) = (M (i)
2 =
1 ) of two 128-bit blocks long (i = 1, 2,··· , 264); (2) Filter
M (i)
, where 1 ≤ i1 ̸=
out message pairs such that C (i1)
i2 ≤ 264; and (3) For a qualiﬁed message pair, M (i1)
⊕3∗L =
⊕ 2∗ 3∗ L holds with probability 50% similarly. Next,
M (i2)
L can be recovered, and a forgery can be made.
3.4 Notes
2 = C (i2)
1 , M (i)
2
1
2
The attack of Section 3.2 aims for the basic case of COPA
that processes messages of a multiple of the block size long
under constant associated data. If the case of COPA that
processes messages with the last block being not full is con-
sidered, or if associated data is not constant, there is a more
eﬃcient attack with an idea similar to that described in Sec-
tion 3.1.
The attacks of Section 3.1.3 does not work for an associ-
ated data with the number of blocks being equal to or one
smaller than the preset maximum number, or for a message
with the preset maximum number of blocks; and the attack
of Section 3.2.3 does not work for a message with the preset
maximum number of blocks. Thus, the attacks are almost
universal forgery attacks [9].
4.
(ALMOST) UNIVERSAL FORGERY AT-
TACKS ON THE BASIC CASE OF MAR-
BLE UNDER VARIABLE ASSOCIATED
DATA
In January 2015, Fuhr et al. [10] released an (almost)
universal forgery attack on Marble v1.1, then the Marble
designer made another revision, namely Marble v1.2, and
shortly later we showed that Marble v1.2 still suﬀered from
(almost) universal forgery attacks based on Fuhr et al.’s (al-
most) universal forgery attack on Marble v1.1. Finally, the
Marble designer withdrew Marble from the CAESAR com-
petition in January 2015, due to Fuhr et al.’s and our at-
tacks.
Fuhr et al. extended their attack on Marble v1.1 described
in [10] to Marble v1.2 in the ﬁnal publication version [11] of
their work, and they acknowledged our attacks by writing
‘as shown independently by ourselves and Lu’. Our attack
and Fuhr et al.’s attack on Marble v1.2 consist of two phases:
recovering the secret parameter L, followed by a forgery if
L is recovered. Since our attack and Fuhr et al.’s attack on
Marble v1.2 are similar and Fuhr et al.’s attack has been
published, here we do not focus on our attack on Marble
v1.2, but nevertheless we give how to recover L of Marble
v1.2, for the reader to have an understanding on it, and then
focus on a diﬀerent forgery way on Marble v1.0/1.1.
4.1 A State Recovery Attack for the Secret Pa-
rameter L in Marble v1.2
The idea of the attack is as follows, which is illustrated in
Fig. 5.
2 , M (i)