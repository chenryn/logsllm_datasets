# 【缺陷周话】第16期：资源未释放：流

## 译文声明
本文为翻译文章，仅供参考。具体内容和含义以原文为准。

## 代码质量的重要性
代码质量是衡量软件产品的一项关键隐性指标。重复的代码会增加维护成本，而不规范的代码、不良注释及复杂度过高的代码则会增加代码的理解难度。重视代码细节，例如使用常量调用 `equals()` 方法、过大的内存分配、循环创建对象引用以及流资源、数据库连接、同步锁资源的未释放等，对于提高代码质量至关重要。其中，“资源未释放：流”是指程序在创建或分配流资源后未能合理释放这些资源。多次创建而未释放资源会占用大量系统开销，进而影响程序性能。本文将以 Java 语言源代码为例，分析“资源未释放：流”的成因及其修复方法。详情请参阅 CWE ID 404: Improper Resource Shutdown or Release (http://cwe.mitre.org/data/definitions/404.html)。

## 2. “资源未释放：流”的潜在危害
攻击者可能通过耗尽资源池的方式发起拒绝服务攻击。根据 CVE 数据，在 2018 年 1 月至 12 月期间，共有两条与此相关的漏洞信息记录。部分漏洞如下表所示：

| CVE 编号 | 概述 |
| --- | --- |
| CVE-2018-11055 | RSA BSAFE MicroEdition Suite 版本 4.0.x（<4.0.11）和 4.1.x（<4.1.6.1）存在错误释放资源的问题。MES 在内部释放内存之前没有将堆内存中的解码 PKCS#12 数据归零，导致恶意本地用户可以通过执行堆检查来访问未授权数据。 |
| CVE-2018-8836 | Wago 750 系列 PLC 固件版本 <=10 的设备中存在 TCP 连接三路握手实施不当问题，这可能被远程攻击者利用，从而影响与调试和服务工具之间的通信。此外，特制的数据包发送到 Codesys 管理软件使用的端口 2455/TCP/IP 上也可能导致拒绝服务条件。 |

## 3. 示例代码
以下示例源自 SamateJuliet Test Suite for Java v1.3 (https://samate.nist.gov/SARD/testsuite.php)，具体文件名为 `CWE404_Improper_Resource_Shutdown__FileReader_01.java`。

### 3.1 缺陷代码
该示例展示了如何从本地读取文件并输出文本行的过程。尽管在第 39 行和第 51 行对 `readerBuffered` 和 `readerFile` 进行了关闭操作，但如果在第 35 行前发生异常，则会直接跳转至第 59 行处理异常，从而跳过了资源关闭步骤，导致资源未能成功释放。
使用 360 代码卫士对该示例代码进行检测时，可以发现“资源未释放：流”这一缺陷，并标记其严重程度为中等。缺陷报告如图 1 所示：
![图1：“资源未释放：流”的检测示例](图1链接)

### 3.2 修复代码
在修复后的代码中，我们通过在 `finally` 块内添加对 `readerBuffered` 和 `readerFile` 的关闭操作，确保即使在前面的代码段中抛出异常，也能保证资源能够得到妥善释放。
再次使用 360 代码卫士对修复后的代码进行扫描，确认已无“资源未释放：流”的缺陷存在。结果如图 2 所示：
![图2：修复后检测结果](图2链接)

## 4. 如何预防“资源未释放：流”
为避免出现“资源未释放：流”的情况，请遵循以下建议：
1. **合理利用 finally 代码块**：确保所有打开的流资源都能在 `finally` 代码块中得到正确关闭；
2. **采用静态代码分析工具**：定期使用自动化工具对源代码进行扫描，可以帮助及时发现并修正此类问题。