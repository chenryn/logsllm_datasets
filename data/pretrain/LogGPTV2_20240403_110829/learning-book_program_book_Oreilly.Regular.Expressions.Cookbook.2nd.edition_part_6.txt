Any regular expression that does not include any of the dozen characters $()*+.?
[\^f| simply matches itself. To find whether Mary had a little lanb in the text you're
editing, simply search for (Mary*had*a1ittlelanb>. It doesn't matter whether the
"regular expression" checkbox is turned on in your text editor.
The 12 punctuation characters that make regular expresions work their magic are
called metachuracters. If you want your regex to match them literally, you need to
escape them by placing a backslash in front of them. Thus, the regex: \$\(\)\*\+\. \?
[\\\^{\|> matches the text $)*+,？[L
Notably absent from the list are the closing square bracket J, the hyphen -, and the
closing curly bracket . The first two become metacharacters only after an unescaped
[, and the  only after an unescaped (. There’s no need to ever escape }. Metacharacter
rules for the blocks that appear between [ and J are explained in Recipe 2.3.
Escaping any other nonalphanumeric character does not change how your regular ex-
pression worksat least not when working with any of the flavors discussed in this
book. Escaping an alphanumeric character may give it a special meaning or throw a
syntax error.
People new to regular expressions often escape every punctuation character in sight.
Don't let anyone know you're a newbie. Escape judiciously. A jungle of needless back-
slashes makes regular expressions hard to read particularly when all those backslashes
have to be doubled up to quote the regex as a literal string in source code.
28 1 Chapter 2: Basic Regular Expression Skils
---
## Page 45
Variations
Block escape
We can make our solution easier to read when using a regex flavor that supports a
feature called block escape:
The#punctuationcharacters+inthe+ASCIItableare:#
3\{1)、[\]θ:/-^+(),gx$#i0\
Regex options: None
Regexflavors: Java 6, PCRE, Perl
Perl, PCRE and Java support the regex tokens \Q and \E>. \√Q suppresses the meaning
of all metacharacters, including the backslash, until . If you omit ^, all characters
after the √Q until the end of the regex are treated as literals.
The only benefit of  is that it is easier to read than  turns on case
of the regex. They act as toggle switches.
insensitivity for the remainder of the regex, and (?-1)) turns it off for the remainder
Recipe 2.9 shows how to use local mode modifiers with groups instead of toggles
See Also
Recipe 2.3 explains character classes. The metacharacters inside character classes are
different from those outside character classes.
Recipe 5.14 demonstrates how to use a regular expression to escape all metacharacters
in a string, Doing so convertsthe sringinto a regular expression that matches the string
literally.
“Example Java5cript solurion" on page 334 in Recipe 5.2 shows some sample Java-
Script code for escaping all regex metacharacters. Some programming languages have
a built-in command for this.
2.2MatchNonprintableCharacters
Problem
Match a string of the following ASCIl control characters: bell, escape, form feed, line
feed, carriage retum, horizontal tab, vertical tab. These characters have the hexadeci-
mal ASCII codes 07, 1B, 0C, 0A, 0D, 09, 0B.
This demonstrates the use of escape sequences and how to reference characters by their
hexadecimal codes.
Solution
ale}f\n}}t\v
Regex options: None
Regexflarer: .NET, Java, PCRE, Python, Ruby
(x07\x1B\f\n}r\tv
Regexoptions: None
Regexflavers: .NET, Java, JavaScript, Python, Ruby
a}ef\ntx0B
Regexoptions: None
Regexflaver: .NET, Java, PCRE, Perl, Python, Ruby
30 | Chapter 2: Basic Regular Expression Skils
---
## Page 47
Discussion
Seven of the most commonly used ASCll control characters have dedicated escape se-
quences. These all consist of a backslash followed by a letter. This is the same syntax
that is used by sring literals in many programming languages. Table 2-1 shows the
common nonprinting characters and how they are represented.
Table 2-1. Nonprisnting characters
Representation
Meaning
Hexadecimal representatin
Regex flavors
(\a)
bell
Qx07
NET, lava, PRE, Perl, Python, Ruby
e)
escape
0x1B
NET, lava, PRE, Perl, Ruby
\f)
form feed
Ox0C
ET, ap RP,h 
(\n)
line feed (newline)
Qx0A
NET, Jna, laScript, PCRE, Pert, Pyhon, Ruby
^r)
carriage retum
0x00
NET, JIna, lvascript, PCRE, Pert, Pyhon, Ruby
\t)
horizontaltab
0x09
NET, Jva, laScript, PCRE, Perl, Phon, Ruy
(\v
0x06
NET, a ip hn, 
In Perl 5.10 and later, and PCRE 7.2 and later,  and \e. So for JavaScript too we need a separate
solution.
These control characters, as well as the altermative syntax shown in the following sec-
tion, can be used equally inside and outside character classes in your regular expression.
Variations onRepresentationsofNonprintingCharacters
The 26 control characters
Here's another way to match the same seven ASCI control characters matched by the
regexes earlier in this recipe:
\cG\x1BcL\c\ccI\cK
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Ruby 1.9
Using \cA through \, you can match one of the 26 control characters that occupy
positions 1 through 26 in the ASCII table. The c must be lowercase. The letter that
follows the c is case insensitive in most flavors. We recommend that you always use an
uppercase letter. Java requires this.
2.2 Match Nonprintable Characters | 31
---
## Page 48
This syntax can be handy if you're used to entering control characters on console sys-
tems by pressing the Control key along with a letter. On a terminal, Ctrl-H sends a
backspace. In a regex,  in our regular expression.
The 7-bit character set
Following is yet another way to match our list of seven commonly used control
characters:
\x07\x1B\,x0C\x0A\x0D\,x09\x0B
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
A lowercase x followed by rwo uppercase hexadecimal digis matches a single char-
acter in the ASClIl set. Figure 2-1 shows which hexadecimal combinations from
^xoo through x7F match each character in the entire ASCII character set. The table
is arranged with the first hexadecimal digit going down the left side and the second
digit going across the top.
0123456789ABCD
ONUL SOH STX ETX EOT ENQ ACK BEL BS HTLFVT FF CR
S0
E
SI
F
DLE DC1 DC2 DC3 DC4 NAK SYN ETB CAN EM
SUB ESC FS GS
RS
US
SP1
开
&
1
r
.
*
+
/
0
3
4
6
；
>
7
4
A
B
C
D
E
F
G
H
I
L
M
N
0
5
P
Q
R
T
V
W
X
Y
Z
A
b
d
e
f
K
hi
0
P
I
DEL
Figure 2-1. ASCII table
The characters that . Instead, use the Unicode code point token
described in Recipe 2.7.
32 1 Chapter 2: Basic Regular Expression Skils
---
## Page 49
Ifyou're using Ruby 1.8 or you compiled PCRE without UTF-8 support,
UTF-8 arebit regex engines They arecomletly ignorant bout tt
you cannot use Unicode code points. Ruby 1.8 and PCRE without
encodings and multibyte characters. ((xAA in these engines simply
matches the byte 0xAA, regardlless of which character OxAA happens to
represent or whether OxAA is part of a multibyte character.
See Also
Recipe 2.7 explains how to make a regex match particular Unicode characters. If your
regex engine supports Unicode, you can match nonprinting characters that way too.
2.3MatchOneofManyCharacters
Problem
Create one regular expression to match all common misspellings of calendar, so you
can find this word in a document without having to trust the author's spelling ability.
Allow an a or e to be used in each of the vowel positions. Create another regular ex-
pression to match a single hexadecimal character. Create a third regex to match a single
character that is not a hexadecimal character.
The problems in this recipe are used to explain an important and commonly used regex
construct called a character class.
Solution
Calendar with misspellings
c[ae]][ae]nd[ae]
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Hexadecimal character
[a-fA-F0-9]
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Nonhexadecimal character
[a-fA-F0-9]
Regexoptions: None
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
2.3 Match 0ne of Many Characters |3
---
## Page 50
Discussion
The notation using square brackets is called a character class. A character class matches
a single character out of a list of posible characters. The three classes in the first regex
match either an a or an e. They do so independently. When you test calendar against
this regex, the first character class matches a, the second e, and the third a.
Inside a character class, only four characters have a special function: , ^, -, and J. If
you’re using Java or .NET, the opening bracket [ is also a metacharacter inside character
classes.
A backslash always escapes the character that follows it, just asit does outside character
classes. The escaped character can be a single character, or the start or end of a range.
The other four metacharacters get their special meanings only when they're placed in
a certain position. It is possible to include them as literal characters in a character class
without escaping them, by positioning them in a way that they don’t get their special
meaning. <I^-] pulls off this trick. This works with allflavors in this book, except
But we recommend that you always escape these metacharacters, so the previous regex
JavaScript. JavaScript treats <[ ] as an empty character class that always fails to match.
should be [\][\\-]. Escaping the metacharacters makes your regular expression
easier to understand
All other characters are literals and simply add themselves to the character class. The
regular expression [$<)*+ ?{↓] matches any one of the nine characters between the
square brackets. These nine characters only have special meanings outside character
classes. Inside character classes they are just literal text. Escaping them would only
make your regular expression harder to read.
Alphanumeric characters cannot be escaped with a backslash. Doing so may be an error
or may create a regular expression token (something with a special meaning in a regular
expression). In our discussions of certain other regex tokens, such as in Recipe 2.2, we
mention that they can be used inside character classes. All these tokens consist of a
backslash and a lerter, sometimes followed by a bunch of other characters. Thus, <[r
\n] matches a carriage returm (r) or line fed (\n).
A caret () negates the character class if you place it immediately after the opening
bracket. It makes the character class match any character that is not in the list.
In all the regex flavors discussed in this book, a negated character class
acter class. Make sure that you don’t accidentally allow your regex to