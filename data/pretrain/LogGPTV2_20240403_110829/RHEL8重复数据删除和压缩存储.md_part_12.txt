::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#analysis-of-vdo-performance-at-different-i-o-depths_testing-the-effects-of-i-o-depth-on-vdo-performance}在不同 I/O 深度下分析 VDO 性能 {.title}
:::
以下示例采用以不同 I/O 深度值记录的 VDO 吞吐量和延迟。
观看跨范围的行为和隐患点，其中增加 I/O
深度可降低吞吐量增益。顺序访问和随机访问可能在不同值下达到峰值，但峰值可能在所有类型的存储配置中都有所不同。
::: example
[]{#testing-vdo-performance_deduplicating-and-compressing-storage.html#idm139671995863776}
**例 4.1. I/O 深度分析**
::: example-contents
::: figure
[]{#testing-vdo-performance_deduplicating-and-compressing-storage.html#idm139671947454272}
**图 4.1. VDO 吞吐量分析**
::: figure-contents
::: mediaobject
![VDO 吞吐量分析](images/vdo-ev-iodepth.png)
:::
:::
:::
注意每个性能曲线中的\"knee\"：
::: itemizedlist
-   Marker 1 标识 [**X**]{.strong}
    点的峰值连续吞吐量。此特定配置不受益于大于 [**X**]{.strong} 的连续 4
    KiB I/O 深度。
-   Marker 2 识别在 [**Z**]{.strong} 点的峰值随机 4 KiB
    吞吐量。此特定配置不受益于大于 [**Z**]{.strong} 的随机 4 KiB I/O
    深度。
:::
除点 [**X**]{.strong} 和 [**Z**]{.strong} 的 I/O
深度外，带宽增益还会降低带宽，而对于每个额外的 I/O
请求，平均请求延迟会增加 1:1。
下图显示了上图中 \"knee\"
后随机写入延迟的示例。您应该在这些点测试最大吞吐量，从而产生最短的响应时间损失。
::: figure
[]{#testing-vdo-performance_deduplicating-and-compressing-storage.html#idm139672000926128}
**图 4.2. VDO 延迟分析**
::: figure-contents
::: mediaobject
![VDO 延迟分析](images/vdo-ev-latency.png)
:::
:::
:::
:::
:::
::: title
**最佳 I/O 深度**
:::
点 [**Z**]{.strong} 标识最佳 I/O 深度。测试计划收集 I/O 深度等于
[**Z**]{.strong} 的额外数据。
:::
:::
::: section
::: titlepage
# []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effects-of-i-o-request-size-on-vdo-performance_testing-vdo-performance}测试 I/O 请求大小对 VDO 性能的影响 {.title}
:::
使用这些测试，您可以识别 VDO 在最佳 I/O 深度时获得最佳性能的块大小。
测试在固定 I/O 深度下执行四个测试，块大小为 8 KiB 到 1 MiB。
::: itemizedlist
**先决条件**
-   您已经确定了最佳 I/O 深度值。详情请查看 ["测试 I/O 深度对 VDO
    性能的影响"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effects-of-i-o-depth-on-vdo-performance_testing-vdo-performance "测试 I/O 深度对 VDO 性能的影响"){.xref}。
    在以下测试中，使用最佳 I/O 深度值替换
    [*[best-depth]{.replaceable}*]{.emphasis}。
:::
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effect-of-i-o-request-size-on-sequential-writes-in-vdo_testing-the-effects-of-i-o-request-size-on-vdo-performance}测试 I/O 请求大小对 VDO 中连续写入操作的影响 {.title}
:::
此测试决定了在不同 I/O 请求大小的 VDO 卷上如何执行后续写入操作。
::: orderedlist
**流程**
1.  创建一个新的 VDO 卷。
    详情请查看 ["创建用于性能测试的 VDO
    卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#creating-a-vdo-volume-for-performance-testing_testing-vdo-performance "创建用于性能测试的 VDO 卷"){.xref}。
2.  通过在测试卷中执行写入 `fio`{.literal}
    作业来预先填充测试可访问的区域：
    ``` screen
    # fio --rw=write \
          --bs=8M \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --thread \
          --direct=1 \
          --scramble_buffers=1
    ```
3.  为后续写入测试记录报告的吞吐量和延迟：
    ``` screen
    # for iosize in 4 8 16 32 64 128 256 512 1024; do
      fio --rw=write \
          --bs=${iosize}k \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --numjobs=1 \
          --thread \
          --norandommap \
          --runtime=300 \
          --direct=1 \
          --iodepth=optimal-depth \
          --scramble_buffers=1 \
          --offset=0 \
          --size=100g
      done
    ```
4.  删除 VDO 测试卷。
    详情请查看 ["清理 VDO
    性能测试卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-performance-testing-volume_testing-vdo-performance "清理 VDO 性能测试卷"){.xref}。
:::
:::
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effect-of-i-o-request-size-on-random-writes-in-vdo_testing-the-effects-of-i-o-request-size-on-vdo-performance}测试 I/O 请求大小在 VDO 中随机写入时的影响 {.title}
:::
此测试决定了在不同 I/O 请求大小的 VDO 卷中随机写入操作如何执行。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
您必须在每个 I/O 请求大小测试运行之间重新创建 VDO 卷。
:::
::: title
**流程**
:::
针对大小为 `4k、8k、16k、32k、64k`{.literal}、`128k`{.literal}
``{=html}、`256k`{.literal}、``{=html} `512k`{.literal}
和``{=html} `1024k`{.literal} 的``{=html} I/O
请求大小单独执行以下序列步骤：
::: orderedlist
1.  创建一个新的 VDO 卷。
    详情请查看 ["创建用于性能测试的 VDO
    卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#creating-a-vdo-volume-for-performance-testing_testing-vdo-performance "创建用于性能测试的 VDO 卷"){.xref}。
2.  通过在测试卷中执行写入 `fio`{.literal}
    作业来预先填充测试可访问的区域：
    ``` screen
    # fio --rw=write \
          --bs=8M \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --thread \
          --direct=1 \
          --scramble_buffers=1
    ```
3.  记录随机写入测试所报告吞吐量和延迟时间：
    ``` screen
    # fio --rw=randwrite \
          --bs=request-size \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --numjobs=1 \
          --thread \
          --norandommap \
          --runtime=300 \
          --direct=1 \
          --iodepth=optimal-depth \
          --scramble_buffers=1 \
          --offset=0 \
          --size=100g
      done
    ```
4.  删除 VDO 测试卷。
    详情请查看 ["清理 VDO
    性能测试卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-performance-testing-volume_testing-vdo-performance "清理 VDO 性能测试卷"){.xref}。
:::
:::
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effect-of-i-o-request-size-on-sequential-read-in-vdo_testing-the-effects-of-i-o-request-size-on-vdo-performance}测试 I/O 请求大小对 VDO 中顺序读取的影响 {.title}
:::
此测试决定了在不同 I/O 请求大小的 VDO 卷上如何执行后续读操作。
::: orderedlist
**流程**
1.  创建一个新的 VDO 卷。
    详情请查看 ["创建用于性能测试的 VDO
    卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#creating-a-vdo-volume-for-performance-testing_testing-vdo-performance "创建用于性能测试的 VDO 卷"){.xref}。
2.  通过在测试卷中执行写入 `fio`{.literal}
    作业来预先填充测试可访问的区域：
    ``` screen
    # fio --rw=write \
          --bs=8M \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --thread \
          --direct=1 \
          --scramble_buffers=1
    ```
3.  为后续读测试记录报告的吞吐量和延迟：
    ``` screen
    # for iosize in 4 8 16 32 64 128 256 512 1024; do
      fio --rw=read \
          --bs=${iosize}k \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --numjobs=1 \
          --thread \
          --norandommap \
          --runtime=300 \
          --direct=1 \
          --iodepth=optimal-depth \
          --scramble_buffers=1 \
          --offset=0 \
          --size=100g
      done
    ```
4.  删除 VDO 测试卷。
    详情请查看 ["清理 VDO
    性能测试卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-performance-testing-volume_testing-vdo-performance "清理 VDO 性能测试卷"){.xref}。
:::
:::
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effect-of-i-o-request-size-on-random-read-in-vdo_testing-the-effects-of-i-o-request-size-on-vdo-performance}测试 VDO 中 I/O 请求大小对随机读取的影响 {.title}
:::
此测试决定了在不同 I/O 请求大小的 VDO 卷中随机读操作如何执行。
::: orderedlist
**流程**
1.  创建一个新的 VDO 卷。
    详情请查看 ["创建用于性能测试的 VDO
    卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#creating-a-vdo-volume-for-performance-testing_testing-vdo-performance "创建用于性能测试的 VDO 卷"){.xref}。
2.  通过在测试卷中执行写入 `fio`{.literal}
    作业来预先填充测试可访问的区域：
    ``` screen
    # fio --rw=write \
          --bs=8M \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --thread \
          --direct=1 \
          --scramble_buffers=1
    ```
3.  记录随机读取测试所报告吞吐量和延迟时间：
    ``` screen
    # for iosize in 4 8 16 32 64 128 256 512 1024; do
      fio --rw=read \
          --bs=${iosize}k \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --numjobs=1 \
          --thread \
          --norandommap \
          --runtime=300 \
          --direct=1 \
          --iodepth=optimal-depth \
          --scramble_buffers=1 \
          --offset=0 \
          --size=100g
      done
    ```
4.  删除 VDO 测试卷。
    详情请查看 ["清理 VDO
    性能测试卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-performance-testing-volume_testing-vdo-performance "清理 VDO 性能测试卷"){.xref}。
:::
:::
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#analysis-of-vdo-performance-at-different-i-o-request-sizes_testing-the-effects-of-i-o-request-size-on-vdo-performance}分析不同 I/O 请求大小中的 VDO 性能 {.title}
:::
以下示例分析了在不同 I/O 请求大小中记录的 VDO 吞吐量和延迟。
::: example
[]{#testing-vdo-performance_deduplicating-and-compressing-storage.html#idm139671977535600}
**例 4.2. I/O 请求大小分析**
::: example-contents
::: figure
[]{#testing-vdo-performance_deduplicating-and-compressing-storage.html#idm139671977534768}
**图 4.3. 请求大小与吞吐量分析，以及关键对点**
::: figure-contents