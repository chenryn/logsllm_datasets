          release: prometheus-operator
        spec:
          - alert: VeleroBackupPartialFailures
            annotations:
              message: Velero backup {{ $labels.schedule }} has {{ $value | humanizePercentage }} partialy failed backups.
            expr: increase(velero_backup_partial_failure_total{schedule!=""}[1h]) > 0
            for: 15m
            labels:
              severity: warning
      ```
* New: Introduce dotdrop.
    The main idea of [Dotdrop](https://deadc0de.re/dotdrop/)is to have the ability
    to store each dotfile only once and deploy them with a different content on
    different hosts/setups. To achieve this, it uses a templating engine that allows
    to specify, during the dotfile installation with dotdrop, based on a selected
    profile, how (with what content) each dotfile will be installed.
    What I like:
    - Popular
    - Actively maintained
    - Written in Python
    - Uses jinja2
    - Has a nice to read config file
    What I don't like:
    - [Updating dotfiles doesn't look as smooth as with chezmoi](https://dotdrop.readthedocs.io/en/latest/usage/#update-dotfiles)
    - Uses `{{@@ @@}}` instead of `{{ }}` :S
    - Doesn't support `pass`.
    - Not easy way to edit the files.
### [Terraform](terraform.md)
* New: [How to store sensitive information in terraform.](terraform.md#sensitive-information)
    One of the most common questions we get about using Terraform to manage infrastructure as code is how to handle secrets such as passwords, API keys, and other sensitive data.
    In the article you'll find how to store your sensitive data in:
    * [The Terraform state](terraform.md#sensitive-information-in-the-terraform-state): Using the state backend encryption
    * [The Terraform source code](terraform.md#sensitive-information-in-the-terraform-source-code): Using`sops` and `gpg`.
### [Dotfiles](dotfiles.md)
* New: Introduce dotfiles.
    [User-specific application configuration is traditionally stored in so called dotfiles](https://wiki.archlinux.org/title/Dotfiles)
    (files whose filename starts with a dot). It is common practice to track
    dotfiles with a version control system such as Git to keep track of changes and
    synchronize dotfiles across various hosts. There are various approaches to
    managing your dotfiles (e.g. directly tracking dotfiles in the home directory
    v.s. storing them in a subdirectory and symlinking/copying/generating files with
    a shell script or a dedicated tool).
    Note: this is not meant to configure files that are outside your home directory,
    use Ansible for that use case.
    You can find different ways to track your dotfiles:
    * [Tracking dotfiles directly with Git](dotfiles.md#tracking-dotfiles-directly-with-git)
    * [Using Ansible to manage the dotfiles](dotfiles.md#using-Ansible-to-manage-the-dotfiles)
    * [Using dotfiles specific tools, and an analysis of the state of the
      art](dotfiles.md#tools)
## Infrastructure Solutions
### [Velero](velero.md)
* New: Introduce velero.
    [Velero](https://velero.io/) is an open source tool to safely backup and restore, perform disaster recovery, and migrate Kubernetes cluster resources and persistent volumes.
    In the article you'll also find how to:
    * [Install the client](velero.md#client-installation)
    * [Configure the server](velero.md#server-configuration)
    * [Monitor it with Prometheus](velero.md#monitorization)
    * [Restore backups](velero.md#restore-backups)
    And an [overview of the whole application
    infrastructure](velero.md#overview-of-velero).
## Automating Processes
### [letsencrypt](letsencrypt.md)
* New: Introduce letsencrypt.
    [Letsencrypt](https://letsencrypt.org/) is a free, automated, and open certificate authority brought to you by the nonprofit Internet Security Research Group (ISRG). Basically it gives away SSL certificates, which are required to configure webservers to use HTTPS instead of HTTP for example.
    In the article you can also find:
    * [How to configure a wildcard dns when the provider is not
      supported](letsencrypt.md#configure-a-wildcard-dns-when-the-provider-is-not-supported)
## Authentication
### [Authentik](authentik.md)
* New: Introduce Authentik.
    [Authentik](https://goauthentik.io/) is an open-source Identity Provider focused on flexibility and versatility.
    What I like:
    * Is maintained and popular
    * It has a clean interface
    * They have their own [terraform provider](https://registry.terraform.io/providers/goauthentik/authentik/latest/docs/resources/application) Oo!
    What I don't like:
    * It's heavy focused on GUI interaction, but you can export the configuration to YAML files to be applied without the GUI interaction.
    * The documentation is oriented to developers and not users. It's a little difficult to get a grasp on how to do things in the platform without following blog posts.
    In the article you can also find:
    * [How to install it](authentik.md#installation)
    * [How to configure and use the terraform provider](authentik.md#terraform)
    * [How to configure some applications, such as gitea](authentik.md#gitea)
    * [How to configure the user registration by invitation
      link](authentik.md#configure-the-invitation-flow)
    * [How to use blueprints](authentik.md#use-blueprints)
# Operating Systems
## Linux
### [Linux Snippets](linux_snippets.md)
* New: [Use a `pass` password in a Makefile.](linux_snippets.md#use-a-pass-password-in-a-makefile)
    ```makefile
    TOKEN ?= $(shell bash -c '/usr/bin/pass show path/to/token')
    diff:
    	@AUTHENTIK_TOKEN=$(TOKEN) terraform plan
    ```
* New: [Install a new font.](linux_snippets.md#install-a-new-font)
    Install a font manually by downloading the appropriate `.ttf` or `otf` files and placing them into `/usr/local/share/fonts` (system-wide), `~/.local/share/fonts` (user-specific) or `~/.fonts` (user-specific). These files should have the permission 644 (`-rw-r--r--`), otherwise they may not be usable.
* New: [Get VPN password from `pass`.](linux_snippets.md#get-vpn-password-from-pass)
    To be able to retrieve the user and password from pass you need to run the openvpn
    command with the next flags:
    ```bash
    sudo bash -c "openvpn --config config.ovpn  --auth-user-pass  /usr/share/keyrings/google-chrome.gpg
      ```
    * Once the GPG import is complete, you will need to import the Google Chrome repository.
      ```bash
      echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list
      ```
    * Install the program:
      ```bash
      apt-get update
      apt-get install google-chrome-stable
      ```
### [Kitty](kitty.md)
* New: [How to add fonts to kitty.](kitty.md#fonts)
    * Add your fonts to the `~/.local/share/fonts` directory
    * Check they are available when you run `kitty +list-fonts`
    * Add them to your config:
      ```
      font_family      Operator Mono Book
      bold_font        Operator Mono Medium
      italic_font      Operator Mono Book Italic
      bold_italic_font Operator Mono Medium Italic
      ```
    feat(kitty#Screen not working on server with sudo): Troubleshoot the Screen not working on server with sudo issue
    Make sure you're using the ssh alias below
    ```bash
    alias ssh="kitty +kitten ssh"
    ```
    And then copy the `~/.terminfo` into `/root`
    ```bash
    sudo copy -r ~/.terminfo /root
    ```
### [Vim](vim.md)
* New: [Configure nvim with lua.](vim.md#configuration)
    Nvim moved away from vimscript and now needs to be configured in lua. You can access the
    config file in `~/.config/nvim/init.lua`. It's not created by default so you need to do
    it yourself.
    In the article it explains how to do the basic configuration with lua:
    * [Set variables](vim.md#configuration)
    * [Set key bindings](vim.md#key-bindings)
    * [Set spelling](vim.md#spelling)
    * [Set test runners](vim.md#testing): With `neotest`
    * [Set the buffer and file
      management](vim.md#buffer-and-file-management): with `Telescope`.
    * [Use Plugin managers](vim.md#plugin-managers): it evaluates the
      different solutions and then explains how to install and use `packer`
    * [What is and how to use `Treesitter`](vim.md#treesitter)
    * [Set git integration](vim.md#git): Evaluate the different solutions
      and configure `neogit`
    * [How to run lua snippets](vim.md#run-lua-snippets)
    And some troubleshooting:
    * [How to deal with big files and telescope](vim.md#deal-with-big-files)
## Android
### [Seedvault](seedvault.md)
* New: Introduce seedvault.
    [Seedvault](https://calyxinstitute.org/projects/seedvault-encrypted-backup-for-android) is an open-source encrypted backup app for inclusion in Android-based operating systems.
    While every smartphone user wants to be prepared with comprehensive data backups in case their phone is lost or stolen, not every Android user wants to entrust their sensitive data to Google's cloud-based storage. By storing data outside Google's reach, and by using client-side encryption to protect all backed-up data, Seedvault offers users maximum data privacy with minimal hassle.
    Seedvault allows Android users to store their phone data without relying on Google's proprietary cloud storage. Users can decide where their phone's backup will be stored, with options ranging from a USB flash drive to a remote self-hosted cloud storage alternative such as NextCloud. Seedvault also offers an Auto-Restore feature: instead of permanently losing all data for an app when it is uninstalled, Seedvault's Auto-Restore will restore all backed-up data for the app upon reinstallation.
    Seedvault protects users' private data by encrypting it on the device with a key known only to the user. Each Seedvault account is protected by client-side encryption (AES/GCM/NoPadding). This encryption is unlockable only with a 12-word randomly-generated key.
    With Seedvault, backups run automatically in the background of the phone's operating system, ensuring that no data will be left behind if the device is lost or stolen. The Seedvault application requires no technical knowledge to operate, and does not require a rooted device.
    In the article you'll also find:
    * How to install it
    * How to store the backup remotely
    * How to restore a backup
### [Signal](signal.md)
* New: Add installation steps.
    These instructions only work for 64 bit Debian-based Linux distributions such as Ubuntu, Mint etc.
    * Install our official public software signing key
      ```bash
      wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor > signal-desktop-keyring.gpg
      cat signal-desktop-keyring.gpg | sudo tee -a /usr/share/keyrings/signal-desktop-keyring.gpg > /dev/null
      ```
    * Add our repository to your list of repositories
      ```bash
      echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' |\
        sudo tee -a /etc/apt/sources.list.d/signal-xenial.list
      ```
    * Update your package database and install signal
      ```bash
      sudo apt update && sudo apt install signal-desktop
      ```