    tty: true
    imagePullPolicy: IfNotPresent
    securityContext:
 privileged: true
```
有两个突出显示的设置。第一个是`hostPID`，它让 pod 与节点共享进程 ID 空间。Linux 内核用来启用容器的技术之一是 cgroups，它将进程隔离在容器中。在 Linux 中，cgroups 会给容器中的进程一个不同于在节点上运行时的进程标识。如图所示，可以从节点查看所有容器的流程。从吊舱内部运行`ps -A -elf | grep java`将具有不同于来自节点的标识。由于我们的策略没有将`hostPID`选项设置为`true`，因此`PodSecurityPolicy`强制执行网络钩子将拒绝此 pod:
![Figure 10.2 – Process ID from the host and from inside a container ](img/Fig_10.2_B15514.jpg)
图 10.2–来自主机和容器内部的进程标识
下一个突出显示的部分是授予`true`的安全上下文设置。这两个设置将允许容器像登录到节点的根用户一样运行。同样，默认 PSP 会停止这种情况，因为特权没有启用。PSP 控制器会停止它。
接下来，从[https://raw . githubusercontent . com/kubernetes/Ingress-NGINX/master/docs/examples/PSP/PSP . YAML](https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/docs/examples/psp/psp.yaml)查看 NGINX Ingress 控制器的推荐 PSP:
```
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
.
.
.spec:
  allowedCapabilities:
 - NET_BIND_SERVICE
 allowPrivilegeEscalation: true
.
.
.
  hostPID: false
  hostPorts:
 - min: 80
 max: 65535
```
在主机上运行的典型网络服务器中，该进程将以 root(或至少是特权用户)身份启动，然后将其自身降级为非特权用户，以便可以为 HTTP 和 HTTPS 打开端口`80`和`443`。这些端口位于`1024`下，因此在 Linux 中被保留给根进程。
如果你想知道一个网络服务器是否需要能够在 Kubernetes 的端口`80`或`443`上运行，它不需要。正如本书前面所讨论的，绝大多数部署都有一个负载平衡器，可以将`80`和`443`映射到任何端口。这真的应该是个例外，而不是常规。NGINX 入口控制器发布的时候，在 Kubernetes 的安全性还没有像今天这样靠前和居中。此外，部署模型还不太成熟。
为了允许类似于 NGINX web 服务器直接在主机上运行的行为，NGINX 希望能够从`80`向上打开端口并升级到特权，特别是使用`NET_BIND_SERVICE`特权，以便 web 服务器可以打开端口`80`和`443`，而无需以 root 身份运行整个过程。
如前所述，绝大多数容器不需要特权。获得这些特权的实例应该很少，并且只需要为特定的用例保留。在评估可能在集群上运行的系统时，查看供应商或项目是否提供了经过测试的 PSP 是很重要的。如果没有，假设它没有权限，并使用本章后面讨论的工具来调试特定的策略。
### 分配 PSP
一旦设计了策略，就需要对其进行分配。这通常是部署 PSP 最困难的部分。确定 PSP 是否应用于 pod 的机制是两组权限的结合:
*   **提交豆荚**的用户:这可能会变得棘手，因为用户很少直接提交豆荚。最佳做法是创建一个`Deployment`或一个`StatefulSet`。控制器然后创建 Pods(尽管不是直接创建)。“创建”pod 的用户是正确的控制器服务帐户，而不是提交`Deployment`或`StatefulSet`的用户。这可能意味着通常只有一两个服务帐户真正创建了 pods。
*   **pod 作为**运行的服务帐户:每个 pod 可以定义一个 pod 可以作为其运行的服务帐户。此服务帐户的范围是 pod 级别，而不是单个容器。
通过“联合”，Kubernetes 将结合这些权限来确定允许哪些功能。例如，如果提交 pod 的控制器服务帐户没有权限，但是 pod 的服务帐户可以作为根用户运行，那么将选择*最佳*策略应用于允许 pod 作为根用户运行的 pod。这个过程可能会令人困惑，难以调试，并且经常会产生意想不到的结果。pod 不能直接请求策略；它必须被分配。重要的是保持策略受限，以使正确的策略更有可能被应用。
使用特殊的 RBAC 对象评估和应用策略。就像为授权访问 API 而创建的策略对象一样，需要创建一个`Role` / `ClusterRole`和一个`RoleBinding` / `ClusterRoleBinding`。应用于`PodSecurityPolicy`对象的 RBAC 对象使用`policy`的`apiGroups`、PSP 的资源和`use`动词，而不是应用于特定的 API。`use`动词没有对应的 HTTP 动作。绑定对象一般与授权 API 使用时相同，但主体一般是服务账户，不是用户。
之前创建的第一个策略是一个很好的通用最小访问策略。要在集群中应用它，首先创建一个`ClusterRole`:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: default-psp
rules:
- apiGroups:
  - policy
  resourceNames:
  - pod-security-policy-default
  resources:
  - podsecuritypolicies
  verbs:
  - use
```
`resourceNames`部分是策略中唯一一个针对被引用的 PSP 的部分。策略中的其他内容都是样板文件。`ClusterRoleBinding`将在集群中应用这一点:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: default-psp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-psp
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
```
创建新的 pods】时，如果没有其他策略适用，则使用受限策略。
注意
如果你来自 OpenShift 生态系统，并且习惯于使用 SCCs，那么授权过程就不一样了。SCC 包含谁直接在对象上被授权的信息，而`PodSecurityPolicy`对象依赖于 RBAC。
# 他们不是要走了吗？
当 Kubernetes 1.11 在 2018 年发布时，有人透露 PSP 很可能永远不会进入**通用可用性** ( **GA** )。这一发现是基于反馈，即 PSP 很难使用，而且从设计上看，这些问题是系统性的。这一发现引发的讨论集中在三个潜在的解决方案上:
*   **修复 PSPs/重新实现新标准**:这两个选项捆绑在一起，因为人们相信“修复”PSPs 将导致一个打破向后兼容性的标准，从而产生一个新的策略系统。另一个已经提出的选择是将 OpenShift 的 SCC 实现移植到上游。
*   **移除 PSP**:有人认为这应该是特定于实现的，因此由实现者决定。由于 PSP 是使用准入控制器实现的，因此争论点是这可以留给第三方。
*   **提供“基本”实现**:这是一种混合方法，其中上游 Kubernetes 构建支持 PSP 的子集，并依赖于定制准入控制器来支持更高级的实现。
至于往哪个方向走，还没有任何明确的选择。已经明确的是，在替代产品普遍可用之前，PSP 不会被弃用和移除。随着 Kubernetes 1.19 的发布，不允许 API 在 alpha 或 beta 模式下保持超过三个版本的新策略迫使`PodSecurityPolicy` API 被弃用。该应用编程接口要到 1.22 版本才会被删除，该版本最早要到 2023 年 1 月才会发布(假设两次发布之间至少有 6 个月的时间)。
有多种方法可以防止私营保安公司最终贬值:
*   **完全不要使用它们**:这不是一个很好的方法。它使集群的节点保持开放。
*   **避免临时策略**:自动化策略应用流程将使其更容易转移到任何替代 PSP 的地方。
*   **使用另一种技术**:PSP 实现还有其他选择，将在*PSP 替代方案*部分介绍。
根据您的实现需求，对 PSP 做出决定。要了解 PSP 的最新进展，请关注 GitHub 上的问题:[https://github.com/kubernetes/enhancements/issues/5](https://github.com/kubernetes/enhancements/issues/5)。
# 启用 PSP
启用 PSPs】非常简单。将`PodSecurityPolicy`添加到 API 服务器的准入控制器列表将通过`PodSecurityPolicy`准入控制器发送所有新创建的 Pod 对象。这个控制器做两件事:
*   **确定最佳策略**:最佳策略由 pod 定义所要求的功能来确定。pod 不能明确声明它想要执行哪个策略，只能声明它想要什么功能。
*   **确定 pod 的策略是否被授权**:一旦策略被识别，准入控制器需要确定 pod 的创建者或 Pod 的`serviceAccount`是否被授权使用该策略。
这两个标准的结合会导致意想不到的结果。pod 的创建者不是提交`Deployment`或`StatefulSet`定义的用户。有一个控制器监视着`Deployment`的更新并创建一个`ReplicaSet`。有一个控制器监视`ReplicaSet`对象并创建(`Pod)`对象。所以，不是创建`Deployment`的用户需要授权，而是`ReplicaSet`控制器的`serviceAccount`需要授权。博客文章和许多默认配置通常会为`kube-system`命名空间中的所有`ServiceAccount`对象分配特权策略。这包括`ReplicaSet`控制器运行的`ServiceAccount`，这意味着它可以创建一个具有特权 PSP 的吊舱，而不需要吊舱的`Deployment`或`serviceAccount`的创建者被授权这样做。向您的供应商施压以提供经过测试的认证 PSP 定义非常重要。
在启用准入控制器之前，首先创建初始策略非常重要。从[中设置的策略有两个策略和相关的 RBAC 绑定。第一个策略是本章前面描述的非特权策略。第二个策略是特权策略，分配给`kube-system`命名空间中的大多数`ServiceAccount`对象。`ReplicaSet`控制器的`ServiceAccount`没有被分配访问特权策略的权限。如果一个`Deployment`需要创建一个特权吊舱，该吊舱的`serviceAccount`将需要通过 RBAC 授权才能使用特权策略。第一步是应用这些策略；策略文件位于克隆报告的`chapter10`文件夹中:](https://raw.githubusercontent.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide/master/chapter10/podsecuritypolicies.yaml)
1.  进入`chapter10`文件夹，使用`kubectl` :
    ```
    kubectl create -f podsecuritypolicies.yaml
    podsecuritypolicy.policy/pod-security-policy-default created
    clusterrole.rbac.authorization.k8s.io/default-psp created
    clusterrolebinding.rbac.authorization.k8s.io/default-psp created
    podsecuritypolicy.policy/privileged created
    clusterrole.rbac.authorization.k8s.io/privileged-psp created
    rolebinding.rbac.authorization.k8s.io/kube-system-psp created
    ```
    创建 PSP 对象
2.  Once the policies are created, `docker exec` into the control plain container and edit `/etc/kubernetes/manifests/kube-apiserver.yaml`. Look for `- --enable-admission-plugins=NodeRestriction` and change it to `- --enable-admission plugins=PodSecurityPolicy,NodeRestriction`. Once the API server pod is restarted, all new and updated pod objects will go through the `PodSecurityPolicy` admission controller.
    注意
    托管 Kubernetes 产品通常会预配置`PodSecurityPolicy`准入控制器。所有的吊舱都被授予特权访问，所以一切都“正常”扶持私营保安公司是一个制定策略和 RBAC 规则的问题，但不是明确地扶持它们。
3.  Since policies are enforced through an admission controller, any pods started that don't have access to a privileged policy will continue to run. For instance, the NGINX Ingress controller is still running. Checking the annotations of any pod using `kubectl describe` will show that there are no annotations for which policy is being used. In order to apply policies to all of the running pods, they must all be deleted:
    ```
    kubectl delete pods --all-namespaces --all
    pod "nginx-ingress-controller-7d6bf88c86-q9f2j" deleted
    pod "calico-kube-controllers-5b644bc49c-8lkvs" deleted
    pod "calico-node-r6vwk" deleted
    pod "calico-node-r9ck9" deleted
    pod "coredns-6955765f44-9vw6t" deleted
    pod "coredns-6955765f44-qrcss" deleted
    pod "etcd-cluster01-control-plane" deleted
    pod "kube-apiserver-cluster01-control-plane" deleted
    pod "kube-controller-manager-cluster01-control-plane" deleted
    pod "kube-proxy-n2xf6" deleted
    pod "kube-proxy-tkxh6" deleted
    pod "kube-scheduler-cluster01-control-plane" deleted
    pod "dashboard-metrics-scraper-c79c65bb7-vd2k8" deleted
    pod "kubernetes-dashboard-6f89967466-p7rv5" deleted
    pod "local-path-provisioner-7745554f7f-lklmf" deleted
    pod "openunison-operator-858d496-zxnmj" deleted
    pod "openunison-orchestra-57489869d4-btkvf" deleted
    ```
    运行需要几分钟，因为集群需要自我重建。从 etcd 到网络的一切都在重建它的吊舱。命令完成后，观察所有吊舱，确保它们回来。
4.  Once all the `Pod` objects are back, take a look at the OpenUnison pod's annotations:
    ```
    kubectl describe pod -l application=openunison-orchestra -n openunison
    Name:         openunison-orchestra-57489869d4-jmbk2
    Namespace:    openunison
    Priority:     0
    Node:         cluster01-worker/172.17.0.3
    Start Time:   Thu, 11 Jun 2020 22:57:24 -0400
    Labels:       application=openunison-orchestra
                  operated-by=openunison-operator
                  pod-template-hash=57489869d4
    Annotations:  cni.projectcalico.org/podIP: 10.240.189.169/32
                  cni.projectcalico.org/podIPs: 10.240.189.169/32
                  kubernetes.io/psp: pod-security-policy-default
    ```
    突出显示的注释显示 OpenUnison 正在默认受限策略下运行。
5.  当 OpenUnison 运行时，登录尝试将会失败。NGINX 入口吊舱没有运行。正如我们在本章前面所讨论的，NGINX 需要能够打开端口`443`和`80`，但是使用默认策略不会允许这种情况发生。通过检查`ingress-nginx`名称空间:
    ```
    $ kubectl get events -n ingress-nginx
    2m4s        Warning   FailedCreate       replicaset/nginx-ingress-controller-7d6bf88c86   Error creating: pods "nginx-ingress-controller-7d6bf88c86-" is forbidden: unable to validate against any pod security policy: [spec.containers[0].securityContext.capabilities.add: Invalid value: "NET_BIND_SERVICE": capability may not be added spec.containers[0].hostPort: Invalid value: 80: Host port 80 is not allowed to be used. Allowed ports: [] spec.containers[0].hostPort: Invalid value: 443: Host port 443 is not allowed to be used. Allowed ports: []]
    ```
    中的事件，确认 NGINX 没有运行的原因
6.  Even though the NGINX Ingress project provides polices and RBAC bindings, let's debug this as if it doesn't. Inspecting the `Deployment` object, the key block in the spec is as follows:
    ```