GDB
Server
Debug command
Response message
Generic Interaface
SMI
Handler
Debugged
application
SMM
PM
Fig. 3. Using MALT with Multiple Debugging Clients
process by effectively serializing its threads which may be
detectable by an adversary.
Recently, Intel introduced SMM-Transfer Monitor (STM),
which virtualizes the SMM code [24]. It is also the answer to
attacks against Trust Execution Technology (TXT) [66]. Un-
fortunately, the use of an STM involves blocking SMIs, which
potentially prevents our system from executing. However,
we can modify the STM code in SMRAM, which executes
in SMM, to provide the functionality without affecting our
system.
System Management Mode (SMM) exists in all current x86
devices. There is no indication that Intel will remove SMM
from the x86 architecture. Considering the popularity of SMM
in computing systems, we believe SMM-based research is
still important and valuable. Although SMM is not designed
for debugging, SMM-like capabilities could be leveraged to
aid transparent debugging. In fact, SMM is a mechanism
that essentially provides an isolated computing fabric and the
hardware support for meeting MALT’s needs. We would like
to emphasize this as an architectural principle for debugging.
Our prototype leverages the isolation principles currently
provided by SMM, but this does not mean that the MALT
architecture must use SMM; rather, it is merely a mechanism
that implements the required security policies for MALT. We
would further argue for desirability of architectural support in
aiding debugging transparency.
X. CONCLUSIONS AND FUTURE WORK
In this paper, we developed MALT, a bare-metal debugging
system that employs System Management Mode to trans-
parently analyze armored malware. As a hardware-assisted
debugging system, MALT does not require the level of trust
associated with hypervisors or operating systems. Thus, it is
immune to hypervisor attacks and is capable of analyzing and
debugging hypervisor-based rootkits and OS kernels. It also
introduces minimum artifacts while achieving transparency.
6767
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
in the presence of all
Through extensive experiments, we have demonstrated that
MALT remains transparent
tested
packers, anti-debugging, anti-virtualization, and anti-emulation
techniques. Moreover, MALT could work with multiple de-
bugging clients, such as IDAPro and GDB. MALT introduces
moderate but manageable overheads on Windows and Linux,
which range from 2 to 973 times slowdown, depending on the
stepping method.
We plan to combine MALT with the IDAPro or GDB
clients. Our goal is to provide a standard, generic interface for
multiple debugging clients to use MALT. First, we will run
a gdbserver instance along with IDAPro or GDB clients
on the remote client so that these debugging clients can use
standard protocols to connect to the gdbserver. Next, we
will modify the gdbserver to connect to the SMI handler on
the target server by using the protocol deﬁned in Table III. This
approach moves the gdbserver from the target server to the
remote client, and the real GDB stubs will be implemented in
the SMI handler instead of the gdbserver. We will expand
our current protocol to fully support this method, and Figure 3
illustrates this particular usage of MALT.
XI. ACKNOWLEDGEMENTS
We would like to thank our shepherd, Niels Provos, and
the anonymous reviewers for their insightful comments that
improved the paper. This work is supported by the Na-
tional Science Foundation Grant No. CNS 1421747 and II-
NEW 1205453, Defense Advanced Research Projects Agency
Contract FA8650-11-C-7190, and ONR Grant N00014-13-1-
0088. Opinions, ﬁndings, conclusions and recommendations
expressed in this material are those of the authors and do not
necessarily reﬂect the views of the US Government or the
Navy.
REFERENCES
[1] McAfee, “Threats Report: First Quarter 2014,” http://www.mcafee.com/
us/resources/reports/rp-quarterly-threat-q1-2014-summary.pdf.
[2] Kaspersky Lab, “Kaspersky Security Bulletin 2013,” http://media.
kaspersky.com/pdf/KSB 2013 EN.pdf.
[3] Symantec, “Internet Security Threat Report, Vol. 19 Main Report,”
http://www.symantec.com/content/en/us/enterprise/other resources/
b-istr main report v19 21291018.en-us.pdf, 2014.
[4] A. Dinaburg, P. Royal, M. Sharif, and W. Lee, “Ether: Malware Analysis
via Hardware Virtualization Extensions,” in Proceedings of the 15th
ACM Conference on Computer and Communications Security (CCS ’08),
2008.
[5] Z. Deng, X. Zhang, and D. Xu, “SPIDER: Stealthy Binary Program
Instrumentation and Debugging Via Hardware Virtualization,” in Pro-
ceedings of
the Annual Computer Security Applications Conference
(ACSAC’13), 2013.
[6] A. Fattori, R. Paleari, L. Martignoni, and M. Monga, “Dynamic and
Transparent Analysis of Commodity Production Systems,” in Proceed-
ings of the IEEE/ACM International Conference on Automated Software
Engineering (ASE’10), 2010.
[7] L.-K. Yan, M.
Jayachandra, M. Zhang,
“V2E:
Combining Hardware Virtualization and Software Emulation for
Transparent and Extensible Malware Analysis,” in Proceedings of
the 8th ACM SIGPLAN/SIGOPS Conference on Virtual Execution
Environments (VEE’12), 2012. [Online]. Available: http://doi.acm.org/
10.1145/2151024.2151053
and H. Yin,
[8] Anubis, “Analyzing Unknown Binaries,” http://anubis.iseclab.org.
[9] N. A. Quynh and K. Suzaki, “Virt-ICE: Next-generation Debugger for
Malware Analysis,” in Black Hat USA, 2010.
[10] X. Chen, J. Andersen, Z. M. Mao, M. Bailey, and J. Nazario, “Towards
an Understanding of Anti-Virtualization and Anti-Debugging Behavior
in Modern Malware,” in Proceedings of the 38th Annual IEEE Inter-
national Conference on Dependable Systems and Networks (DSN ’08),
2008.
[11] R. R. Branco, G. N. Barbosa, and P. D. Neto, “Scientiﬁc but Not
Academical Overview of Malware Anti-Debugging, Anti-Disassembly
and Anti-VM Technologies,” in Black Hat, 2012.
[12] N. Falliere, “Windows Anti-Debug Reference,” http://www.symantec.
com/connect/articles/windows-anti-debug-reference, 2010.
[13] D. Quist and V. Val Smith, “Detecting the Presence of Virtual Machines
Using the Local Data Table,” http://www.offensivecomputing.net.
[14] E. Bachaalany,
“Detect
Virtual Machine,”
a
Detect-if-your-program-is-running-inside-a-Virtual.
If Your Program is Running inside
http://www.codeproject.com/Articles/9823/
[15] T. Raffetseder, C. Kruegel, and E. Kirda, “Detecting System Emulators,”
in Information Security. Springer Berlin Heidelberg, 2007.
[16] T. Garﬁnkel, K. Adams, A. Warﬁeld, and J. Franklin, “Compatibility is
not Transparency: VMM Detection Myths and Realities,” in Proceedings
of the 11th USENIX Workshop on Hot Topics in Operating Systems
(HotOS’07), 2007.
[17] D. Kirat, G. Vigna, and C. Kruegel, “BareBox: Efﬁcient Malware
Analysis on Bare-metal,” in Proceedings of the 27th Annual Computer
Security Applications Conference (ACSAC’11), 2011.
[18] C. Willems, R. Hund, A. Fobian, D. Felsch, T. Holz, and A. Vasude-
van, “Down to the Bare Metal: Using Processor Features for Binary
Analysis,” in Proceedings of the Annual Computer Security Applications
Conference (ACSAC’12), 2012.
[19] IDA Pro, www.hex-rays.com/products/ida/.
[20] K. Kortchinsky, “CLOUDBURST: A VMware Guest to Host Escape
[21] R. Wojtczuk, J. Rutkowska, and A. Tereshkin, “Xen 0wning Trilogy,”
Story,” in Black Hat USA, 2009.
in Black Hat USA, 2008.
[22] S. T. King and P. M. Chen, “SubVirt: Implementing Malware with
Virtual Machines,” in Proceedings of the 27th IEEE Symposium on
Security and Privacy (S&P’06), May 2006.
[23] J. Rutkowska, “Blue Pill,” http://theinvisiblethings.blogspot.com/2006/
06/introducing-blue-pill.html, 2006.
[24] Intel,
and
“64
Software Developer’s
Manual.” [Online]. Available: http://www.intel.com/content/www/us/
en/processors/architectures-software-developer-manuals.html
IA-32 Architectures
[25] Coreboot, “Open-Source BIOS,” http://www.coreboot.org/.
[26] A. Vasudevan and R. Yerraballi, “Stealth Breakpoints,” in Proceedings
of the 21st Annual Computer Security Applications Conference (AC-
SAC’05), 2005.
[27] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang,
Z. Liang, J. Newsome, P. Poosankam, and P. Saxena, “BitBlaze: A New
Approach to Computer Security via Binary Analysis,” in Proceedings
of the 4th International Conference on Information Systems Security
(ICISS’08), 2008.
[28] J. Rutkowska, “Red Pill,” http://www.ouah.org/Red Pill.html.
[29] G. Pek, B. Bencsath, and L. Buttyan, “nEther: In-guest Detection of Out-
of-the-guest Malware Analyzers,” in Proceedings of the 4th European
Workshop on System Security (EuroSec’11), 2011.
[30] D. Kirat, G. Vigna, and C. Kruegel, “BareCloud: Bare-metal Analysis-
based Evasive Malware Detection,” in Proceedings of the 23rd USENIX
Security Symposium, 2014.
[31] OllyDbg, www.ollydbg.de.
[32] D. Bruening, Q. Zhao, and S. Amarasinghe, “Transparent Dynamic
Instrumentation,” in Proceedings of the 8th ACM SIGPLAN/SIGOPS
Conference on Virtual Execution Environments (VEE’12), 2012.
[33] Windbg, www.windbg.org.
[34] Ohloh, “Black Duck Software, Inc,” http://www.ohloh.net, access time:
10/16/2014.
[35] J. Rutkowska and R. Wojtczuk, “Preventing and Detecting Xen Hyper-
visor Subversions,” http://www.invisiblethingslab.com/resources/bh08/
part2-full.pdf, 2008.
[36] F. Zhang, J. Wang, K. Sun, and A. Stavrou, “HyperCheck: A Hardware-
assisted Integrity Monitor,” in IEEE Transactions on Dependable and
Secure Computing (TDSC’14), 2014.
[37] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky,
“HyperSentry: Enabling Stealthy In-Context Measurement of Hypervisor
Integrity,” in Proceedings of the 17th ACM Conference on Computer and
Communications Security (CCS’10), 2010.
6868
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
[38] F. Zhang, K. Leach, K. Sun, and A. Stavrou, “SPECTRE: A De-
pendable Introspection Framework via System Management Mode,” in
Proceedings of the 43rd Annual IEEE/IFIP International Conference on
Dependable Systems and Networks (DSN’13), 2013.
[39] J. Wang, F. Zhang, K. Sun, and A. Stavrou, “Firmware-assisted Memory
Acquisition and Analysis Tools for Digital Forensic,” in Proceedings of
the 6th International Workshop on Systematic Approaches to Digital
Forensic Engineering (SADFE ’11), 2011.
[40] A. Reina, A. Fattori, F. Pagani, L. Cavallaro, and D. Bruschi, “When
Hardware Meets Software: A Bulletproof Solution to Forensic Memory
Acquisition,” in Proceedings of the Annual Computer Security Applica-
tions Conference (ACSAC’12), 2012.
[41] L. Duﬂot, D. Etiemble, and O. Grumelard, “Using CPU System Man-
agement Mode to Circumvent Operating System Security Functions,” in
Proceedings of the 7th CanSecWest Conference (CanSecWest’04), 2004.
[42] S. Embleton, S. Sparks, and C. Zou, “SMM rootkits: A New Breed
of OS Independent Malware,” in Proceedings of the 4th International
Conference on Security and Privacy in Communication Networks (Se-
cureComm’08), 2008.
[43] BSDaemon, coideloko, and D0nAnd0n, “System Management Mode
Hack: Using SMM for ‘Other Purposes’,” Phrack Magazine, 2008.
[44] “NSA’s ANT Division Catalog of Exploits for Nearly Every Major
Software/Hardware/Firmware,” http://Leaksource.wordpress.com.
[45] Trusted Computing Group, “TCG PC Client Speciﬁc Implementation
Speciﬁcation for Conventional BIOS, Speciﬁcation Version 1.21,” http:
//www.trustedcomputinggroup.org, February 2012.
[46] F. Zhang, H. Wang, K. Leach, and A. Stavrou, “A Framework to
Secure Peripherals at Runtime,” in Proceedings of The 19th European
Symposium on Research in Computer Security (ESORICS’14)., 2014.
[47] B. Jain, M. B. Baig, D. Zhang, D. E. Porter, and R. Sion, “SoK:
Introspections on Trust and the Semantic Gap,” in Proceedings of the
35th IEEE Symposium on Security and Privacy (S&P’14), 2014.
[48] T. Garﬁnkel and M. Rosenblum, “A Virtual Machine Introspection Based
Architecture for Intrusion Detection,” in Proceedings of the 10th Annual
Network and Distributed Systems Security Symposium (NDSS’03), 2003.
[49] X. Jiang, X. Wang, and D. Xu, “Stealthy Malware Detection Through
VMM-based Out-of-the-box Semantic View Reconstruction,” in Pro-
ceedings of the 14th ACM Conference on Computer and Communica-
tions Security (CCS’07), 2007.
[50] VIA Technologies, Inc., “VT8237R South Bridge, Revision 2.06,”
December 2005.
[51] Advanced Micro Devices,
Inc., “BIOS and Kernel Developer’s
Guide
for AMD Athlon 64 and AMD Opteron Processors,”
http://support.amd.com/TechDocs/26094.PDF. [Online]. Available: http:
//support.amd.com/us/ProcessorTechDocs/26094.PDF
[52] S. Vogl and C. Eckert, “Using Hardware Performance Events for
Instruction-Level Monitoring on the x86 Architecture,” in Proceedings
of the 2012 European Workshop on System Security (EuroSec’12), 2012.
[53] R. Wojtczuk and J. Rutkowska, “Attacking SMM Memory via
[Online]. Available: http:
Intel CPU Cache Poisoning,” 2009.
//invisiblethingslab.com/resources/misc09/smm cache fun.pdf
[54] Flashrom, “Firmware Flash Utility,” http://www.ﬂashrom.org/.
[55] checkvm: Scoopy doo, http://www.trapkit.de/research/vmm/scoopydoo/
scoopy doo.htm.
[56] J. Xiao, Z. Xu, H. Huang, and H. Wang, “Security Implications of
Memory Deduplication in a Virtualized Environment,” in Proceedings
of the 43rd Annual IEEE/IFIP International Conference on Dependable
Systems and Networks (DSN’13), 2013.
Instrumentation
Tool
Platform,”
[57] DynamoRIO,
“Dynamic
http://dynamorio.org/.
[58] CLOC, “Count lines of code,” http://cloc.sourceforge.net/.
[59] SuperPI, http://www.superpi.net/.
[60] L. Duﬂot, O. Levillain, B. Morin, and O. Grumelard, “Getting into the
SMRAM: SMM Reloaded,” in Proceedings of the 12th CanSecWest
Conference (CanSecWest’09), 2009.
[61] ——, “System Management Mode Design and Security Issues,” http:
//www.ssi.gouv.fr/IMG/pdf/IT Defense 2010 ﬁnal.pdf.
[62] R. Wojtczuk
31st
and C. Kallenberg,
Chaos
Script,”
http://events.ccc.de/congress/2014/Fahrplan/system/attachments/2566/
original/venamis whitepaper.pdf, 2014.
Tereshkin,
Communication
“Attacking
and A.
Intel BIOS,”
[63] R. Wojtczuk
https://www.blackhat.com/presentations/bh-usa-09/WOJTCZUK/
BHUSA09-Wojtczuk-AtkIntelBios-SLIDES.pdf.
“Attacking UEFI Boot
(31C3),
Congress
[64] J. Butterworth, C. Kallenberg, and X. Kovah, “BIOS Chronomancy:
Fixing the Core Root of Trust for Measurement,” in Proceedings of
the 20th ACM Conference on Computer and Communications Security
(CCS’13), 2013.
[65] A. M. Azab, P. Ning, and X. Zhang, “SICE: A Hardware-level Strongly
Isolated Computing Environment for x86 Multi-core Platforms,” in
Proceedings of the 18th ACM Conference on Computer and Commu-
nications Security (CCS’11), 2011.
[66] R. Wojtczuk and J. Rutkowska, “Attacking Intel Trust Execution Tech-
nologies,” 2009.
6969
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply.