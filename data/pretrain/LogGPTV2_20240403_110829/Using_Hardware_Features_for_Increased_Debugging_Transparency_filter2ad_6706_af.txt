### Using MALT with Multiple Debugging Clients

**Figure 3.** This figure illustrates the process of using MALT with multiple debugging clients, which effectively serializes the threads of a process. This serialization may be detectable by an adversary.

Recently, Intel introduced the SMM-Transfer Monitor (STM), which virtualizes the SMM code [24]. STM is also a response to attacks against Trusted Execution Technology (TXT) [66]. Unfortunately, the use of STM involves blocking System Management Interrupts (SMIs), which can potentially prevent our system from executing. However, we can modify the STM code in System Management RAM (SMRAM), which executes in SMM, to provide the required functionality without affecting our system.

### System Management Mode (SMM)

System Management Mode (SMM) is present in all current x86 devices, and there is no indication that Intel will remove it from the x86 architecture. Given the prevalence of SMM in computing systems, SMM-based research remains important and valuable. Although SMM is not designed for debugging, its capabilities can be leveraged to aid transparent debugging. SMM provides an isolated computing environment and the necessary hardware support for MALT's requirements. We emphasize this as an architectural principle for debugging.

Our prototype utilizes the isolation principles provided by SMM, but this does not mean that the MALT architecture must use SMM; rather, SMM is a mechanism that implements the required security policies for MALT. We advocate for architectural support to enhance debugging transparency.

### Conclusions and Future Work

In this paper, we developed MALT, a bare-metal debugging system that uses SMM to transparently analyze armored malware. As a hardware-assisted debugging system, MALT does not require the level of trust associated with hypervisors or operating systems, making it immune to hypervisor attacks and capable of analyzing and debugging hypervisor-based rootkits and OS kernels. It also introduces minimal artifacts while maintaining transparency.

Through extensive experiments, we have demonstrated that MALT remains transparent in the presence of various anti-debugging, anti-virtualization, and anti-emulation techniques. Additionally, MALT can work with multiple debugging clients, such as IDA Pro and GDB. MALT introduces moderate but manageable overheads on Windows and Linux, ranging from 2 to 973 times slowdown, depending on the stepping method.

We plan to integrate MALT with IDA Pro or GDB clients, providing a standard, generic interface for multiple debugging clients to use MALT. First, we will run a gdbserver instance alongside IDA Pro or GDB clients on the remote client, allowing these debugging clients to connect to the gdbserver using standard protocols. Next, we will modify the gdbserver to connect to the SMI handler on the target server using the protocol defined in Table III. This approach moves the gdbserver from the target server to the remote client, and the real GDB stubs will be implemented in the SMI handler instead of the gdbserver. We will expand our current protocol to fully support this method, as illustrated in Figure 3.

### Acknowledgements

We would like to thank our shepherd, Niels Provos, and the anonymous reviewers for their insightful comments that improved the paper. This work is supported by the National Science Foundation Grant No. CNS 1421747 and II-NEW 1205453, Defense Advanced Research Projects Agency Contract FA8650-11-C-7190, and ONR Grant N00014-13-1-0088. Opinions, findings, conclusions, and recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the US Government or the Navy.

### References

[References listed here as in the original text]

---

This version of the text is more structured and coherent, with clear headings and a logical flow of information. The technical details are presented in a more professional and accessible manner.