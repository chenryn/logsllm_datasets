-c bgwriter_lru_maxpages=1000 \  
-c bgwriter_lru_multiplier=10.0 \  
-c synchronous_commit=off \  
-c full_page_writes=off \  
-c wal_buffers=1900MB \  
-c wal_writer_delay=10ms \  
-c checkpoint_timeout=35min \  
-c checkpoint_segments=1024 \  
-c checkpoint_completion_target=0.9 \  
-c random_page_cost=1.1 \  
-c effective_cache_size=64GB \  
-c log_destination='csvlog' \  
-c logging_collector=on \  
-c log_truncate_on_rotation=on \  
-D $PGDATA \  
>/dev/null 2>&1 &  
sleep 2  
psql -c "create tablespace tbs1 location '/data01/pgdata/$PGPORT_tbs';"  
psql -c "create tablespace tbs2 location '/data02/pgdata/$PGPORT_tbs';"  
```  
测试脚本    
```  
# vi test.sh  
#!/bin/bash  
for s in 1 10 100 500 1000 5000 10000  
do  
################  
. ~/env.sh 9.4 1920  
pgbench -i -s $s --tablespace=tbs1 --index-tablespace=tbs2 --unlogged-tables  
for i in 1 2 4 8 16 32 64 128 256 512  
do  
if [ $i -ge 16 ]; then  
  j=16  
else  
  j=i  
fi  
pgbench -M prepared -n -r -c $i -j $i -T 120 > ./9.4.s_$s.i_$i.log 2>&1  
done  
pgbench -i -s 1  
#################  
################  
. ~/env.sh 9.5 1921  
pgbench -i -s $s --tablespace=tbs1 --index-tablespace=tbs2 --unlogged-tables  
for i in 1 2 4 8 16 32 64 128 256 512  
do  
if [ $i -ge 16 ]; then  
  j=16  
else  
  j=i  
fi  
pgbench -M prepared -n -r -c $i -j $i -T 120 > ./9.5.s_$s.i_$i.log 2>&1  
done  
pgbench -i -s 1  
#################  
################  
. ~/env.sh 9.6 1922  
pgbench -i -s $s --tablespace=tbs1 --index-tablespace=tbs2 --unlogged-tables  
for i in 1 2 4 8 16 32 64 128 256 512  
do  
if [ $i -ge 16 ]; then  
  j=16  
else  
  j=i  
fi  
pgbench -M prepared -n -r -c $i -j $i -T 120 > ./9.6.s_$s.i_$i.log 2>&1  
done  
pgbench -i -s 1  
#################  
################  
. ~/env.sh sgrds 1923  
pgbench -i -s $s --tablespace=tbs1 --index-tablespace=tbs2 --unlogged-tables  
for i in 1 2 4 8 16 32 64 128 256 512  
do  
if [ $i -ge 16 ]; then  
  j=16  
else  
  j=i  
fi  
pgbench -M prepared -n -r -c $i -j $i -T 120 > ./sgrds.s_$s.i_$i.log 2>&1  
done  
pgbench -i -s 1  
#################  
done  
```  
测试    
```  
chmod 500 test.sh  
nohup ./test.sh >/dev/null 2>&1 &  
```  
测试结果    
```  
# vi result.sh  
for s in 1 10 100 500 1000 5000 10000   
do  
echo "9.4 s $s"  
for i in 1 2 4 8 16 32 64 128 256 512  
do   
cat 9.4.s_$s.i_$i.log | grep including | awk '{print $3}'  
done  
echo "9.5 s $s"  
for i in 1 2 4 8 16 32 64 128 256 512  
do   
cat 9.5.s_$s.i_$i.log | grep including | awk '{print $3}'  
done  
echo "9.6 s $s"  
for i in 1 2 4 8 16 32 64 128 256 512  
do   
cat 9.6.s_$s.i_$i.log | grep including | awk '{print $3}'  
done  
echo "sgrds s $s"  
for i in 1 2 4 8 16 32 64 128 256 512  
do   
cat sgrds.s_$s.i_$i.log | grep including | awk '{print $3}'  
done  
done  
. ./result.sh  
```  
瓶颈分析请结合压测过程中的主机资源开销(io,cpu,调用,内存,网络等)和PROFILE来判断。      
数据量小的时候，高并发的情况下行级锁等待较多，因为数据量少，高并发的UPDATE的原因。    
![1](20160604_01_pic_001.png)  
![2](20160604_01_pic_002.png)  
![3](20160604_01_pic_003.png)  
![4](20160604_01_pic_004.png)  
![5](20160604_01_pic_005.png)  
![6](20160604_01_pic_006.png)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")