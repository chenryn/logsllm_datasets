30
流程控制：while/until循环
在前面的章节中，我们开发了菜单驱动程序，来产生各种各样的系统信息。虽然程序能够运行，
但它仍然存在重大的可用性问题。它只能执行单一的选择，然后终止。更糟糕地是，如果做了
一个无效的选择，程序会以错误终止，而没有给用户提供再试一次的机会。如果我们能构建程
序，以致于程序能够重复显示菜单，而且能一次又一次的选择，直到用户选择退出程序，这样
的程序会更好一些。
在这一章中，我们将看一个叫做循环的程序概念，其可用来使程序的某些部分重复。shell
为循环提供了三个复合命令。本章我们将查看其中的两个命令，随后章节介绍第三个命令。
30.1循环
日常生活中充满了重复性的活动。每天去散步，遍狗，切胡萝下，所有任务都要重复一系列的
步骤。让我们以切胡萝下为例。如果我们用伪码表达这种活动，它可能看起来像这样：
1.准备切菜板
2.准备菜刀
3.把胡萝下放到切菜板上
4.提起菜刀
5.向前推进胡萝下
6.切胡萝卜
7.如果切完整个胡萝下，就退出，要不然回到第四步继续执行
从第四步到第七步形成一个循环。重复执行循环内的动作直到满足条件“切完整个胡萝
*” 。
411
---
## Page 413
30.1.1 while
bash能够表达相似的想法。比方说我们想要按照顺序从1到5显示五个数字。可如下构造一
个bash脚本：
#!/bin/bash
#while-count: display a series of mumbers
count=1
vhile [ $count -1e 5 ]; do
echo $count
count=$((count + 1))
done
echo *Finished.*
当执行的时候，这个脚本显示如下信息：
[ne@linuxbox -]$ vhile-count
1
2
”
4
Finished.
while命令的语法是：
vhile commands; do connands; done
和if一样，while计算一系列命令的退出状态。只要退出状态为零，它就执行循环内的命
令。在上面的脚本中，创建了变量count，并初始化为1°while命令将会计算test命令的退
出状态。只要test命令返回退出状态零，循环内的所有命令就会执行。每次循环结束之后，会
重复执行test命令。第六次循环之后，count的数值增加到6.test命令不再返回退出状态零
且循环终止。程序继续执行循环之后的语句。
我们可以使用一个while循环，来提高前面章节的read-menu程序：
412
---
## Page 414
#!/bin/bash
# vhile-nenu: a menu driven system information progran
DELAY=3 # Munber of seconds to display results
vhile [[ $REPLY != 0 J]; do
clear
cat <<- _EOF,
Please Select:
1. Display Systen Information
2. Display Disk Space
3. Display Hone Space Utilization
0.Quit
_EOF
< [-0] uttas xug. d-pe1
if [[ $REPLY =- ^[0-3]$ J]; then
if [[ $REPLY == 1 J]: then
echo “Hostnane: SHOSTNAME"
uptime
sleep $DELAY
fi
if [[ $REPLY == 2 J]: then
-FP
sleep $DELAY
fi
if [[ $REPLY == 3 1]; then
if [[ $(id -u) -eq 0 ]]; then
du -sh /hone/*
else
du -sh $HOME
fi
sleep SDELAY
fi
else
echo "Invalid entry.*
sleep $DELAY
fi
done
echo *Progran terminated. *
413
---
## Page 415
通过把菜单包含在while循环中，每次用户选择之后，我们能够让程序重复显示菜单。只要
REPLY不等于“O"，循环就会继续，菜单就能显示，从而用户有机会重新选择。每次动作完成
之后，会执行一个sleep命令，所以在清空屏幕和重新显示菜单之前，程序将会停顿几秒钟，为
的是能够看到选项输出结果。一旦REPLY等于“O”，则表示选择了“退出”选项，循环就会
终止，程序继续执行done语句之后的代码。
30.2跳出循环
bash提供了两个内部命令，它们可以用来在循环内部控制程序流程。break命令立即终止一个
循环，且程序继续执行循环之后的语句。continue命令导致程序跳过循环中剩余的语句，且程
序继续执行下一次循环。这里我们看看采用了break和continue两个命令的while-menu程序
版本：
#!/bin/bash
# while-nenu2: a menu driven systen information program
DELAY=3 # Munber of seconds to display results
hile true; do
clear
cat <<- _EOF,
Please Select:
1. Display Systen Information
2. Display Disk Space
3. Display Hone Space Utilization
0. Quit
_EOF
< [-0] uotaotas 1oug, d- pe1
-0~= ] 
if [[ $REPLY == 1 1]; then
echo "Hostnane: SHOSTNAME"
uptime
sleep $DELAY
continue
f1
if [[ $REPLY == 2 1]; then
U-FP
sleep $DELAY
continue
414
---
## Page 416
fi
if [[ $REPLY == 3 1]; then
if [[ $(id -u) -eq 0 ]]; then
du =sh /hone/*
else
echo *Home Space Utilization ($USER) *
du -sh $HOME
f1
sleep SDELAY
continue
fi
if [[ $REPLY == 0 1]; then
break
fi
else
echo "Invalid entry.*
sleep $DELAY
fi
done
echo *Progran terminated.*
在这个脚本版本中，我们设置了一个无限循环（就是自己永远不会终止的循环），通过使
用true命令为while提供一个退出状态。因为true的退出状态总是为零，所以循环永远不会
终止。这是一个令人惊讶的通用脚本编程技巧。因为循环自己永远不会结束，所以由程序员
在怡当的时候提供某种方法来跳出循环。此脚本，当选择“o”选项的时候，break命令被用来
退出循环。continue命令被包含在其它选择动作的末尾，来提高程序执行的效率。通过使用
continue命令，当一个选项确定后，程序会跳过不需执行的其他代码。例如，如果选择了选项
"1"，则没有理由去测试其它选项。
30.2.1until
until命令与while非常相似，除了当遇到一个非零退出状态的时候，while退出循环，而until
不退出。一个until循环会继续执行直到它接受了一个退出状态零。在我们的while-count脚本
中，我们继续执行循环直到count变量的数值小于或等于5·我们可以得到相同的结果，通过
在脚本中使用until命令：
415
---
## Page 417
#!/bin/bash
#until-count: display a series of mumbers
count=1
op :[ 93-sunoos ] [T4un
echo $count
count=$((count + 1))
done
echo *Finished.*
通过把test表达式更改为$count-gt5，until会在正确的时间终止循环。至于使用while
循环还是until循环，通常是选择其test判断条件最容易写的那种。
30.3使用循环读取文件
while和until能够处理标准输入。这就可以使用while和until处理文件。在下面的例子中，
我们将显示在前面章节中使用的distros.txt文件的内容：
#!/bin/bash
# vhile-read: read lines fron a file
vhile read distro version release; do
printf *Distro: %s\tVersion: %s\tReleased: %sn*\
$distro 
Sversion \
$release
done < distros.txt
为了重定向文件到循环中，我们把重定向操作符放置到done语句之后。循环将使用read
从重定向文件中读取字段。这个read命令读取每个文本行之后，将会退出，其退出状态为零，
直到到达文件末尾。到时候，它的退出状态为非零数值，因此终止循环。也有可能把标准输入
管道到循环中。
#!/bin/bash
# vhile-read2: read lines fron a file
sort -k 1,1 -k 2n distros.txt | vhile read distro version release; do
416
---
## Page 418
printf *Distro: %s\tVersion: %s\tReleased: %s\n* \
Sdistro \
Sversion \
$release
done
这里我们接受sort命令的标准输出，然后显示文本流。然而，因为管道将会在子shell中执
行循环，当循环终止的时候，循环中创建的任意变量或赋值的变量都会消失，记住这一点很重
要。
30.4总结
通过引入循环和我们之前遇到的分支、子例程和序列，我们已经介绍了程序流程控制的主要类
型。bash还有一些锦囊妙计.但它们都是关于这些基本概念的完善。
30.5拓展阅读
·Linux文档工程中的Bash初学者指南一书中介绍了更多的while循环实例：
http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_02.html
·Wikipedia中有一篇关于循环的文章，其是一篇比较长的关于流程控制的文章中的一部分：
http://en.wikipedia.org/wiki/Control_flow # Loops
417
---
## Page 419
31”
疑难排解
随着我们的脚本变得越来越复杂，当脚本运行错误，执行结果出人意料的时候，我们就应该查
看一下原因了。在这一章中，我们将会看一些脚本中出现地常见错误类型，同时还会介绍几个
可以跟踪和消除问题的有用技巧。
31.1语法错误
一个普通的错误类型是语法。语法错误涉及到一些shell语法元素的拼写错误。大多数情况下
这类错误会导致shell拒绝执行此脚本。
在以下讨论中，我们将使用下面这个脚本，来说明常见的错误类型：
#!/bin/bash
# trouble: script to desonstrate connon errors
nunber=1
if [ $nunber = 1 ]; then
echo “lunber is equal to 1."
else
echo "Munber is not equal to 1.*
fi
参看脚本内容，我们知道这个脚本执行成功了：
[ne@linuxbox -]$ trouble
Munber is equal to 1.
31.1.1丢失引号
如果我们编辑我们的脚本，并从跟随第一个echo命令的参数中，删除其末尾的双引号：
418
---
## Page 420
#1/bin/bash
# trouble: script to demonstrate connon errors
nunber=1
if [ $nunber = 1 ]; then
echo "Munber is equal to 1
α1se
echo "Munber is not equal to 1.*
fi
观察发生了什么：
[ne@linuxbox -]$ trouble
/home/me/bin/trouble: 1ine 10: unexpected E0F vhile 1ooking for
matching *".
/home/me/bin/trouble: line 13: syntax error: unexpected end of file
这个脚本产生了两个错误。有趣地是，所报告的行号不是引号被删除的地方，而是程序中后
面的文本行。我们能知道为什么，如果我们跟随丢失引号文本行之后的程序。bash会继续寻找
右引号，直到它找到一个，其就是这个紧随第二个echo命令之后的引号。找到这个引号之后，
bash变得很困惑，并且if命令的语法被破坏了，因为现在这个f语句在一个用引号引起来的
但是开放的）字符串里面。
在长的脚本中，此类错误很难找到。使用带有语法高亮的编辑器将会帮助查找错误。如
果安装了vim的完整版，通过输入下面的命令，可以使语法高亮生效：
symtax on
31.1.2丢失或意外的标记
另一个常见错误是忘记补全一个复合命令，比如说if或者是while。让我们看一下，如果我们
删除if命令中测试之后的分号.会出现什么情况：
419