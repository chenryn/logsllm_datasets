# python pickle 反序列化总结
### pickle 基础
pickle 是一种栈语言，有不同的编写方式，基于一个轻量的 PVM（Pickle Virtual Machine）。
>   * 指令处理器
>
> 从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 . 这个结束符后停止。最终留在栈顶的值将被作为反序列化对象返回。
>
>   * stack
>
> 由 Python 的 list 实现，被用来临时存储数据、参数以及对象。
>
>   * memo
>
> 由 Python 的 dict 实现，为 PVM 的整个生命周期提供存储。
>
>
**类似于我们在 PHP 中的 serialize 和 unserialize，如果 unserialize 的输入可控我们就可能可以进行恶意的攻击。**
python 提供了 **pickle 和 cPickle 两个库** 来进行 pickle 反序列化的支持。
#### 能够被序列化的内容
下列类型可以被打包，都是有自己的指令码的，可以对照一下下面的指令集：
  * None、True 和 False
  * 整数、浮点数、复数
  * str、byte、bytearray
  * 只包含可打包对象的集合，包括 tuple、list、set 和 dict
  * 定义在模块顶层的函数（使用 def 定义，lambda 函数则不可以）
  * 定义在模块顶层的内置函数
  * 定义在模块顶层的类
  * 某些类实例，这些类的 **dict** 属性值或 `__getstate__()` 函数的返回值可以被打包（详情参阅 [打包类实例](https://docs.python.org/zh-cn/3.7/library/pickle.html#pickle-inst) 这一段）。
#### 数据流格式
pickle 所使用的数据格式仅可用于 Python。这样做的好处是没有外部标准给该格式强加限制，比如 JSON 或
XDR（不能表示共享指针）标准；但这也意味着非 Python 程序可能无法重新读取 pickle 封存的 Python 对象。
默认情况下，pickle 格式使用相对紧凑的二进制来存储。如果需要让文件更小，可以高效地 压缩 由 pickle 封存的数据。
pickletools 模块包含了相应的工具用于分析 pickle 生成的数据流。pickletools 源码中包含了对 pickle
协议使用的操作码的大量注释。
当前共有 6 种不同的协议可用于封存操作。 使用的协议版本越高，读取所生成 pickle 对象所需的 Python 版本就要越新。
  * v0 版协议是原始的“人类可读”协议，并且向后兼容早期版本的 Python。
  * v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。
  * 第 2 版协议是在 Python 2.3 中引入的。 它为 [新式类](https://docs.python.org/zh-cn/3/glossary.html#term-new-style-class) 提供了更高效的封存机制。 请参考 [**PEP 307**](https://www.python.org/dev/peps/pep-0307) 了解第 2 版协议带来的改进的相关信息。
  * v3 版协议是在 Python 3.0 中引入的。 它显式地支持 [`bytes`](https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes "bytes") 字节对象，不能使用 Python 2.x 解封。这是 Python 3.0-3.7 的默认协议。
  * v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。它是Python 3.8使用的默认协议。有关第 4 版协议带来改进的信息，请参阅 [**PEP 3154**](https://www.python.org/dev/peps/pep-3154)。
  * 第 5 版协议是在 Python 3.8 中加入的。 它增加了对带外数据的支持，并可加速带内数据处理。 请参阅 [**PEP 574**](https://www.python.org/dev/peps/pep-0574) 了解第 5 版协议所带来的改进的详情。
#### 常用方法接口
    pickle.dump(obj, file, protocol=None, *, fix_imports=True)
将打包好的对象 obj **写入文件** 中，其中 protocol 为 pickling 的协议版本（下同）。
    pickle.dumps(obj, protocol=None, *, fix_imports=True)
将 obj 打包以后的对象作为 bytes 类型直接返回。
    pickle.load(file, *, fix_imports=True, encoding="ASCII", errors="strict")
从 **文件** 中读取二进制字节流，将其反序列化为一个对象并返回。
    pickle.loads(data, *, fix_imports=True, encoding="ASCII", errors="strict")
从 **data** 中读取二进制字节流，将其反序列化为一个对象并返回。
    object.__reduce__()
`__reduce__()` 其实是 `object`类中的一个魔术方法，我们可以通过重写类的 `object.__reduce__()`
函数，使之在被实例化时按照重写的方式进行。
Python 要求该方法返回一个 **字符串或者元组** 。如果返回元组`(callable, ([para1,para2...])[,...])`
，那么每当该类的对象被反序列化时，该 callable 就会被调用，参数为`para1`、`para2` ... 后面再详细解释
#### 指令集 opcode
    MARK           = b'('   # push special markobject on stack
    STOP           = b'.'   # every pickle ends with STOP
    POP            = b'0'   # discard topmost stack item
    POP_MARK       = b'1'   # discard stack top through topmost markobject
    DUP            = b'2'   # duplicate top stack item
    FLOAT          = b'F'   # push float object; decimal string argument
    INT            = b'I'   # push integer or bool; decimal string argument
    BININT         = b'J'   # push four-byte signed int
    BININT1        = b'K'   # push 1-byte unsigned int
    LONG           = b'L'   # push long; decimal string argument
    BININT2        = b'M'   # push 2-byte unsigned int
    NONE           = b'N'   # push None
    PERSID         = b'P'   # push persistent object; id is taken from string arg
    BINPERSID      = b'Q'   #  "       "         "  ;  "  "   "     "  stack
    REDUCE         = b'R'   # apply callable to argtuple, both on stack
    STRING         = b'S'   # push string; NL-terminated string argument
    BINSTRING      = b'T'   # push string; counted binary string argument
    SHORT_BINSTRING= b'U'   #  "     "   ;    "      "       "      " &lt; 256 bytes
    UNICODE        = b'V'   # push Unicode string; raw-unicode-escaped'd argument
    BINUNICODE     = b'X'   #   "     "       "  ; counted UTF-8 string argument
    APPEND         = b'a'   # append stack top to list below it
    BUILD          = b'b'   # call __setstate__ or __dict__.update()
    GLOBAL         = b'c'   # push self.find_class(modname, name); 2 string args
    DICT           = b'd'   # build a dict from stack items
    EMPTY_DICT     = b'}'   # push empty dict
    APPENDS        = b'e'   # extend list on stack by topmost stack slice
    GET            = b'g'   # push item from memo on stack; index is string arg
    BINGET         = b'h'   #   "    "    "    "   "   "  ;   "    " 1-byte arg
    INST           = b'i'   # build &amp; push class instance
    LONG_BINGET    = b'j'   # push item from memo on stack; index is 4-byte arg
    LIST           = b'l'   # build list from topmost stack items
    EMPTY_LIST     = b']'   # push empty list
    OBJ            = b'o'   # build &amp; push class instance
    PUT            = b'p'   # store stack top in memo; index is string arg
    BINPUT         = b'q'   #   "     "    "   "   " ;   "    " 1-byte arg
    LONG_BINPUT    = b'r'   #   "     "    "   "   " ;   "    " 4-byte arg
    SETITEM        = b's'   # add key+value pair to dict
    TUPLE          = b't'   # build tuple from topmost stack items
    EMPTY_TUPLE    = b')'   # push empty tuple
    SETITEMS       = b'u'   # modify dict by adding topmost key+value pairs
    BINFLOAT       = b'G'   # push float; arg is 8-byte float encoding
    TRUE           = b'I01\n'  # not an opcode; see INT docs in pickletools.py
    FALSE          = b'I00\n'  # not an opcode; see INT docs in pickletools.py
    # Protocol 2
    PROTO          = b'\x80'  # identify pickle protocol
    NEWOBJ         = b'\x81'  # build object by applying cls.__new__ to argtuple
    EXT1           = b'\x82'  # push object from extension registry; 1-byte index
    EXT2           = b'\x83'  # ditto, but 2-byte index
    EXT4           = b'\x84'  # ditto, but 4-byte index
    TUPLE1         = b'\x85'  # build 1-tuple from stack top
    TUPLE2         = b'\x86'  # build 2-tuple from two topmost stack items
    TUPLE3         = b'\x87'  # build 3-tuple from three topmost stack items
    NEWTRUE        = b'\x88'  # push True
    NEWFALSE       = b'\x89'  # push False
    LONG1          = b'\x8a'  # push long from &lt; 256 bytes
    LONG4          = b'\x8b'  # push really big long
    _tuplesize2code = [EMPTY_TUPLE, TUPLE1, TUPLE2, TUPLE3]
    # Protocol 3 (Python 3.x)
    BINBYTES       = b'B'   # push bytes; counted binary string argument
    SHORT_BINBYTES = b'C'   #  "     "   ;    "      "       "      " &lt; 256 bytes
    # Protocol 4
    SHORT_BINUNICODE = b'\x8c'  # push short string; UTF-8 length &lt; 256 bytes
    BINUNICODE8      = b'\x8d'  # push very long string
    BINBYTES8        = b'\x8e'  # push very long bytes string
    EMPTY_SET        = b'\x8f'  # push empty set on the stack
    ADDITEMS         = b'\x90'  # modify set by adding topmost stack items
    FROZENSET        = b'\x91'  # build frozenset from topmost stack items
    NEWOBJ_EX        = b'\x92'  # like NEWOBJ but work with keyword only arguments
    STACK_GLOBAL     = b'\x93'  # same as GLOBAL but using names on the stacks
    MEMOIZE          = b'\x94'  # store top of the stack in memo
    FRAME            = b'\x95'  # indicate the beginning of a new frame
    # Protocol 5
    BYTEARRAY8       = b'\x96'  # push bytearray
    NEXT_BUFFER      = b'\x97'  # push next out-of-band buffer
    READONLY_BUFFER  = b'\x98'  # make top of stack readonly
#### opcode demo
##### demo
序列化、反序列化的背后通常都是面向对象编程的大概念，我们可以简单写一个类，看一下它的 pickle 序列化的内容
    import pickle
    class Person(): #类名
        def __init__(self):
            self.age=18 #属性
            self.name="Pickle"
    p=Person()
    opcode=pickle.dumps(p)
    print(opcode)
    # b'\x80\x03c__main__\nPerson\nq\x00)\x81q\x01}q\x02(X\x03\x00\x00\x00ageq\x03K\x12X\x04\x00\x00\x00nameq\x04X\x06\x00\x00\x00Pickleq\x05ub.'
我们的序列化内容是一串基于上面提到的操作码的 bytes，我们可以利用 pickletools 将这里的 opcode 转化成我们更易读的形式
    import opcode
    import pickletools
    opcode = b'\x80\x03c__main__\nPerson\nq\x00)\x81q\x01}q\x02(X\x03\x00\x00\x00ageq\x03K\x12X\x04\x00\x00\x00nameq\x04X\x06\x00\x00\x00Pickleq\x05ub.'
    pickletools.dis(opcode)
    '''
        0: \x80 PROTO      3
        2: c    GLOBAL     '__main__ Person'
       19: q    BINPUT     0
       21: )    EMPTY_TUPLE
       22: \x81 NEWOBJ
       23: q    BINPUT     1
       25: }    EMPTY_DICT
       26: q    BINPUT     2
       28: (    MARK
       29: X        BINUNICODE 'age'
       37: q        BINPUT     3
       39: K        BININT1    18
       41: X        BINUNICODE 'name'
       50: q        BINPUT     4
       52: X        BINUNICODE 'Pickle'
       63: q        BINPUT     5
       65: u        SETITEMS   (MARK at 28)
       66: b    BUILD
       67: .    STOP
    highest protocol among opcodes = 2
    '''
对照上面的操作码表还是很容易看懂的
##### Pker
 也可以使用这个工具来生成，在后续部分操作码被限制的时候某些情况下还是很好用的
### 漏洞产生原因
用户可控的反序列化入口点。
### 漏洞利用
在能够传入可控的 pickle.loads 的 data 的大前提下，我们就可以构想出以下几种攻击场景。
#### 操控实例化对象的属性
假设有如下内容限制用户权限：
    import pickle
    class User:
        def __init__(self,admin,guest):
            self.admin=admin
            self.guest=guest
假设正常我们以访客登录时会传入如下 pickle 序列化内容
    import pickle
    class User:
        def __init__(self):
            self.admin=False
            self.guest=True
    u = User()
    print(pickle.dumps(u))
    # b'\x80\x03c__main__\nUser\nq\x00)\x81q\x01}q\x02(X\x05\x00\x00\x00adminq\x03\x89X\x05\x00\x00\x00guestq\x04\x88ub.'
    '''
        0: \x80 PROTO      3
        2: c    GLOBAL     '__main__ User'
       17: q    BINPUT     0
       19: )    EMPTY_TUPLE
       20: \x81 NEWOBJ
       21: q    BINPUT     1
       23: }    EMPTY_DICT
       24: q    BINPUT     2
       26: (    MARK
       27: X        BINUNICODE 'admin'
       37: q        BINPUT     3
       39: \x89     NEWFALSE
       40: X        BINUNICODE 'guest'
       50: q        BINPUT     4
       52: \x88     NEWTRUE
       53: u        SETITEMS   (MARK at 26)
       54: b    BUILD
       55: .    STOP
    highest protocol among opcodes = 2
    '''
那么我们对登陆时的 `\x89` `\x88` 进行调换，即可得到如下实例化结果：
    import opcode
    import pickle
    import pickletools
    class User:
        def __init__(self,admin,guest):
            self.admin=admin
            self.guest=guest
    opcode = b'\x80\x03c__main__\nUser\nq\x00)\x81q\x01}q\x02(X\x05\x00\x00\x00adminq\x03\x88X\x05\x00\x00\x00guestq\x04\x89ub.'
    #pickletools.dis(opcode)