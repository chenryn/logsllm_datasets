      }
      public void OnCalculate()
      {
        double result = FromCelsiusTo(
          ToCelsiusFrom(double.Parse(FromValue), FromType), ToType);
        ToValue = result.ToString();
      }
到目前为止，这个控件仅是一个简单的用户控件，带有一个视图模型。为了创建部
件，要使用Export特性导出TemperatureCalculatorExtension类。这个类实现
ICalculatorExtension接口，从UI属性中返回用户控件TemperatureConversion。对于UWP和
WPF，会生成不同的二进制代码，但使用不同的名称空间。名称空间的选择使用预处理
器指令完成（代码文件UICalculator/TemperatureConversion/Temperature
ConversionExtension.cs）。
    #if WPF
    using TemperatureConversionWPF;
    #endif
    #if WINDOWS_UWP
    using TemperatureConversionUWP;
    #endif
    using System.Composition;
    namespace Wrox.ProCSharp.Composition
    {
      [Export(typeof(ICalculatorExtension))]
      [CalculatorExtensionMetadata(
        Title = "Temperature Conversion",
        Description = "Temperature conversion",
        ImageUri = "Images/Temperature.png")]
      public class TemperatureConversionExtension: ICalculatorExtension
      {
        private object _control;
        public object UI =>
        _control ? ? (_control = new TemperatureConversionUC());
      }
    }
现在，忽略以前的代码片段中使用的CalculatorExtension特性。
另一个实现了ICalculatorExtension接口的用户控件是FuelEconomy。通过这个控件，
可以计算每加仑行驶的英里数或每行驶100千米的升数，该用户界面如图26-5所示。
图26-5
下面的代码片段显示了类FuelEconomyViewModel，它定义了在用户界面上绑定的几
个属性，例如，fuelEcoType列表，它允许用户在英里数和千米数之间选择；此外还定义
了Fuel和Distance属性，由用户填充这些属性（代码文件
UICalculator/FuelEconomyShared/FuelEconomyViewModel.cs）：
    public class FuelEconomyViewModel: BindableBase
    {
      public FuelEconomyViewModel()
      {
        InitializeFuelEcoTypes();
        CalculateCommand = new DelegateCommand(OnCalculate);
      }
      public DelegateCommand CalculateCommand { get; }
      // etc.
      public List FuelEcoTypes { get; } =
        new List();
      private void InitializeFuelEcoTypes()
      {
        var t1 = new FuelEconomyType
        {
    Id = "lpk",
    Text = "L/100 km",
    DistanceText = "Distance (kilometers)",
    FuelText = "Fuel used (liters)"
        };
        var t2 = new FuelEconomyType
        {
    Id = "mpg",
    Text = "Miles per gallon",
    DistanceText = "Distance (miles)",
    FuelText = "Fuel used (gallons)"
        };
        FuelEcoTypes.AddRange(new FuelEconomyType[] { t1, t2 });
      }
      private FuelEconomyType _selectedFuelEcoType;
      public FuelEconomyType SelectedFuelEcoType
      {
        get { return _selectedFuelEcoType; }
        set { SetProperty(ref _selectedFuelEcoType, value); }
      }
      private string _fuel;
      public string Fuel
      {
        get { return _fuel; }
        set { SetProperty(ref _fuel, value); }
      }
      private string _distance;
      public string Distance
      {
        get { return _distance; }
        set { SetProperty(ref _distance, value); }
      }
      private string _result;
      public string Result
      {
        get { return _result; }
        set { SetProperty(ref _result, value); }
      }
    }
 注意： 
示例代码中使用的基类BindableBase仅提供了接口
INotifyPropertyChanged的实现代码。这个类位于CalculatorUtils项目中。
计算在OnCalculate（）方法中完成。OnCalculate（）是Calculate按钮的单击事件的处
理程序（代码文件UICalculator/FuelEconomyShared/FuelEconomyViewModel.cs）。
    public void OnCalculate()
    {
      double fuel = double.Parse(Fuel);
      double distance = double.Parse(Distance);
      FuelEconomyType ecoType = SelectedFuelEcoType;
      double result = 0;
      switch (ecoType.Id)
      {
        case "lpk":
        result = fuel / (distance / 100);
        break;
        case "mpg":
        result = distance / fuel;
        break;
        default:
        break;
      }
      Result = result.ToString();
    }
再次使用Export特性实现ICalculatorExtension接口并导出（代码文件
UICalculator/FuelEconomy-Shared/FuelCalculatorExtension.cs）。
    [Export(typeof(ICalculatorExtension))]
    [CalculatorExtensionMetadata(
      Title = "Fuel Economy",
      Description = "Calculate fuel economy",
      ImageUri = "Images/Fuel.png")]
    public class FuelCalculatorExtension: ICalculatorExtension
    {
      private object _control;
      public object UI => _control ? ? (_control = new FuelEconomyUC());
    }
在继续宿主应用程序以导入用户控件之前，先看看导出的其他选项。不仅一个部件可
以导出其他部件，也可以给出口添加元数据信息。
26.4.2 使用部件的部件
Calculator类现在不能直接实现Add和Subtract方法，但可以使用其他部件来实现。要
定义提供单一操作的部件，定义接口IBinaryOperation（代码文件
UICalculator/CalculatorContract/IBinary-Operation.cs）：
    public interface IBinaryOperation
    {
      double Operation(double x, double y);
    }
Calculator类定义的属性会导入匹配Subtract方法的部分。该入口命名为Subtract，因为
并非需要IBinaryOperation的所有出口——只需要Subtract出口（代码文件UICalculator 
/
SimpleCalculator /Calculator.cs）：
    [Import("Subtract")]
    public IBinaryOperation SubtractMethod { get; set; }
Calculator类的Import匹配SubtractOperation的Export（代码文件
UICalculator/AdvancedOperations/Operations.cs）：
    [Export("Subtract", typeof(IBinaryOperation))]
    public class SubtractOperation: IBinaryOperation
    {
      public double Operation(double x, double y) => x-y;
    }
现在只有Calculator类中Operate方法的实现代码需要更改，以利用内在的部件。
Calculator本身不需要创建一个容器，来匹配内在的部件。只要导出的部件可在注册的类
型或程序集中可用，这已经在托管容器中自动完成了（代码文件UICalculator 
/
SimpleCalculator / Calculator.cs）：
    public double Operate(IOperation operation, double[] operands)
    {
      double result = 0;
      switch (operation.Name)
      {
        // etc.
        case "-":
        result = SubtractMethod.Operation(operands[0], operands[1]);
        break;
        // etc.
26.4.3 导出元数据
利用导出功能，还可以附加元数据信息。元数据允许添加除了名称和类型之外的其他
信息。这些信息可用于添加功能信息，确定在入口端应使用哪些出口。
Calculator类使用一个内部的部件，不仅用于Subtract方法，也用于Add方法。下面代
码片段中的AddOperation使用Export特性Add和SpeedMetadata特性。SpeedMetadata特性指
定速度信息Speed（代码文件UICalculator/AdvancedOperations/Operations.cs）：
    [Export("Add", typeof(IBinaryOperation))]
    [SpeedMetadata(Speed = Speed.Fast)]
    public class AddOperation: IBinaryOperation
    {
      public double Operation(double x, double y) => x + y;
    }
还有另一个出口用于Add方法SpeedMetadata 
Speed.Slow（代码文件
UICalculator/Advanced-Operations / Operations.cs）：
    [Export("Add", typeof(IBinaryOperation))]
    [SpeedMetadata(Speed = Speed.Slow)]
    public class SlowAddOperation: IBinaryOperation
    {
      public double Operation(double x, double y)
      {
        Task.Delay(3000).Wait();
        return x + y;
      }
    }
Speed只是一个带有两个值的枚举（代码文件UICalculator/CalculatorUtils/
SpeedMetadata.cs）：
    public enum Speed
    {
      Fast,
      Slow
    }
创建一个特性类，应用MetadataAttribute，可以定义元数据。这个特性应用于一个部
件，如AddOperation和SlowAddOperation类型所示（代码文件
UICalculator/CalculatorUtils/SpeedMetadata-Attribute.cs）：
    [MetadataAttribute]
    [AttributeUsage(AttributeTargets.Class)]
    public class SpeedMetadataAttribute: Attribute
    {
      public Speed Speed { get; set; }
    }
  注意： 如何创建自定义特性的更多信息参见第16章。
为了利用入口访问元数据，定义SpeedMetadata类。SpeedMetadata定义了与
SpeedMetadataAttribute相同的属性（代码文件UICalculator 
/ 
CalculatorUtils 
/
SpeedMetadata.cs）：
    public class SpeedMetadata
    {
      public Speed Speed { get; set; }
    }
定义了多个Add出口后，如前面所示使用Import特性会在运行期间失败。多个出口不
能只匹配一个入口。如果多个出口有相同的名称和类型，就使用特性ImportMany。这个
特性应用于类型数组或IEnumeration 的一个属性。
因为通过出口应用元数据，匹配Add出口的属性的类型就是Lazy的一个数组（代码文件UICalculator / SimpleCalculator / Calculator.cs）：
    [ImportMany("Add")]
    public Lazy[] AddMethods { get; set; }
ImportMany在下一节详细解释。Lazy类型允许使用泛型定义Lazy访问
元数据。Lazy类用于支持类型在第一次使用时的惰性初始化。Lazy派
生自Lazy，除了基类支持的成员之外，它还支持通过Metadata特性访问元数据信息。
对Add（）方法的调用现在改为遍历Lazy元素的集
合。通过Metadata属性，检查功能的键；如果Speed功能的值是Speed.Fast，就使用
Lazy的Value属性调用操作，以获取委托（代码文件
UICalculator/SimpleCalculator/Calculator.cs）。
    public double Operate(IOperation operation, double[] operands)
    {
      double result = 0;
      switch (operation.Name)
      {
        case "+":
        foreach (var addMethod in AddMethods)
        {
        if (addMethod.Metadata.Speed == Speed.Fast)
        {
          result = addMethod.Value.Operation(operands[0], operands[1]);
        }
        }
        break;
        // etc.
26.4.4 使用元数据进行惰性加载
Microsoft Composition元数据不仅可用于根据元数据信息选择部件，还可以在实例化
部件之前给宿主应用程序提供部件的信息。
下面的示例为计算器扩展FuelEconomy和TemperatureConversion提供图像的标题、描
述和链接（代码文件UICalculator/CalculatorUtils/
CalculatorExtensionMetadataAttribute.cs）：
    [MetadataAttribute]
    [AttributeUsage(AttributeTargets.Class)]
    public class CalculatorExtensionMetadataAttribute: Attribute
    {
      public string Title { get; set; }
      public string Description { get; set; }
      public string ImageUri { get; set; }
    }
对于部件，应用CalculatorExtensionMetadata特性。下面是一个例子
FuelCalculatorExtension 
（代码文件UICalculator 
/ 
FuelEconomyShared 
/
FuelCalculatorExtension.cs）：
    [Export(typeof(ICalculatorExtension))]
    [CalculatorExtensionMetadata(
      Title = "Fuel Economy",
      Description = "Calculate fuel economy",
      ImageUri = "Images/Fuel.png")]
    public class FuelCalculatorExtension: ICalculatorExtension
    {
      private object _control;
      public object UI => _control ? ? (_control = new FuelEconomyUC());
    }
部件会消耗大量内存。如果用户不实例化部件，就没有必要使用该内存。相反，可以
访问标题、描述和图片，在实例化之前为用户提供部件的信息。
26.5 导入部件
下面使用用户控件和宿主应用程序。WPF宿主应用程序的设计视图如图26-6所示。
图26-6