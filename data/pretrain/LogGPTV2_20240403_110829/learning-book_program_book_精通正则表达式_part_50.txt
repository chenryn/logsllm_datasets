现在来比较开始的代码和下面的代码：
my$WordRegex='\b\w+\b';
#鲁通宇符串
if （$text =~m/~（SwordRegex)/x）（
print"found word at start of text:$i\n";
）
这段代码没问题，尽管sWordRegex生成时没有任何修饰符。因为sWordRegex是普通变量，
保存普通的字符串，用作m/…/的插值。因为各方面的原因，用字符串构建正则表达式比
regex对象要麻烦得多，比如在这个例子中，必须记住swordRegex必须和/x一起使用才行。
我们也可以只使用字符串解决这个问题，只需要在表达式中设定模式修饰范围（135）：
量#.（q\+\q：x）.=xbpxm
if （Stext =~m/~(swordRegex）/）（
print *found word at start of text:$1\n";
此时，m/…/的正则文字插值之后，正则引擎接收到（（?x：\b"\w+·\b）），这就是我们期望
的结果。
其实这就是生成regex对象的逻辑过程，只是regex对象对于每个模式修饰符，都明确定义
了“on”或“off”的状态。用qr/\b-\w+·\b/x生成（?x-ism：\b·\w+·\b)1。请注意模式修
饰符的设定（?x-ism：")，这里启用了/x，禁止了/i、/s和/m。也就是说，无论是否指定
qr/…/的修饰符，regex对象总是“锁定”在某个模式下。
探究regex对象
ViewingRegexObjects
前面讨论了regex对象综合正则表达式和模式修饰符-例如（?x-ism：·)--的逻辑过
程。如果在Perl期望接收字符串的地方使用regex对象，Perl会把它转换为对应的文本表示
方式，例如：
\x/q\+\q/xbuxd，-d
(?x-ism:\b \w+ \b)
---
## Page 332
306
第7章：Perl
这就是第304页的SHttpUr1的转换结果：
(?ix=Sm:
http:// (?ix-sm:
#一个或多个点号分隔部分
(?:[a-20-9]\.1[a-z0-9][-a-z0-9]{0,61}[a-z0-9]\.）*
#后缀
(?: com|edulgovlint mil|net|orglbiz|infol|aerol[a-z][a-z])
）\b#hostname
(? :
/[-a-20-9-:\@&?=+,.!/~*\S]*
#可能出现的path
(?)
if (m/…-/){
}elsif (m/…./){
总的来说，依赖默认运算元会增加无经验程序员阅读代码的难度。
颠倒match的意义
可以用！~来取代=~，对返回值进行逻辑非操作（马上会介绍这么做的返回值和伴随效应，
但是对于！～，返回值就是true或者false），下面三种办法是等价的：
if (Stext!~m/…/)
if （not $text =~m/../)
unless (Stext =~ m/."/)
从我个人出发，我喜欢中间的办法。无论选用哪种办法，都会产生设置$1等的伴随效应。！~
只是判断“如果不能匹配”的简便方式。
Match运算符的不同用途
Different Llses of theMatclt Operator
可以从match运算符返回的true/false判断匹配是否成功，也可以从成功匹配中获取其他的
信息，与其他match运算符结合起来。match运算符的行为主要取决于它的应用场合（294），
以及是否使用了/g修饰符。
---
## Page 336
310
第7章：Perl
普通的“匹配与否”一一scalarcontext，不使用/g
在scalarcontext中（例如if测试），match运算符返回的就是true/false：
if (Starget =~ m/…/)(
#·.．匹配成功后的操作...
)else{
#..．匹配失败后的操作、.
也可以把结果赋值给一个scalar变量，然后检查
my $success = $target =-m/…/;
if ($success){
普通的“从字符串中提取数据”一listcontext，不使用/g
不使用/g的listcontext，是字符串中提取数据的常用做法。返回值是一个list，每个元素是
正则表达式中捕获型括号内的表达式捕获的内容。下面这个简单的例子用来从69/8/31中
提取日期：
my（Syear，$month，$day）=Sdate =~mf^(\d+）/（\d+）/（\d+）$}x;
匹配的3个数作为3个变量（当然还包括S1、$2和S3等）。每一组捕获型括号都对应到返
回序列中的一个元素，空序列表示匹配失败。
有时候，某组捕获括号没有参与最终的成功匹配。例如，m/（this）I（that）/必然有一组括
号不会参与匹配。这样的括号返回未定义的值undef。如果匹配成功，又没有使用捕获型
括号，在不使用/g的listcontext中，会返回list(1)。
Listcontext可以以各种方式指定，包括把结果赋值给一个数组，例如：
my @parts=$text =~m/^(\d+)-(\d+)-（\d+）s/;
如果match的接收参数是scalar变量，请将匹配的应用场合指定为listcontext，这样才能获
得匹配的某些捕获内容，而不是表示匹配成功与否的Boolean值。比较这两个测试：
：/（+M\）/u~=xa$=（pxoMS）u
my $success= Stext =~m/(\w+)/:
---
## Page 337
Match运算符
311
第一个例子中，变量外的括号导致my函数为赋值指定listcontext。第二个例子没有括号，
所以应用场合为scalarcontext，$success只得到true/false值。
下面给出了一个更简单的做法：
if（my（Syear，$month，$day）=Sdate =~m(^(\d+）/（\d+）/（\d+）S)x）{
#如果能够匹配，Syear等变量已经赋值
}else{
#如果不能匹配...
）
））
$1、S2之类进行赋值。不过，匹配完成之后，因为整个组合是在if条件语句的scalarcontext
中，Perl把list转换为一个scalar变量。它接收的是list的长度，如果匹配不成功，长度为0，
如果不为0，则表示匹配成功。
“提取所有匹配”一—listcontext，使用/g
此结构的用处在于，它返回一个文本序列，每个元素对应捕获型括号匹配的文本（如果没
有捕获型括号，就返回整个表达式匹配的文本），但上一节的例子只能针对一次匹配，而这
种结构针对所有匹配。
下面这个简单的例子用来提取字符串中的所有整数：
my @nums =$text =~m/\d+/g;
如果stext包含IP地址“64.156.215.240'，@num会接收4个元素，“64'、‘156'、‘215”、
‘240'。与其他结构相结合，就能很方便地把IP地址转换为8位16进制数字，例如
409cd7f0'，如果需要创建紧凑的log文件，这很方便：
my $hex_ip=join'，map{sprintf("$02x"，$_）}$ip =~m/\d+/g;
下面的代码可以把它转换回来：
my $ip=join'.'，map（hex(S_）}Shex_ip =~m/../g
另一个例子是匹配一行中的所有浮点数：
my @nums=$text=~m/\d+(?:\.\d+）？1\.\d+/g;
一定要使用非捕获型括号，因为捕获型括号会改变返回的结果。下面的例子说明了捕获型
括号的价值：
my @Tags=$Html=~ m/<(\w+)/g;
---
## Page 338
312
第7章：Perl