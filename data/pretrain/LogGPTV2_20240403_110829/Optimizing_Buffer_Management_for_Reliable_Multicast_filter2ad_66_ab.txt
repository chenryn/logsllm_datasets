Receivers may join or leave a multicast session dy-
namically. When a receiver voluntarily leaves the group,
it transfers each message in its long-term buffer to a ran-
domly selected receiver in the region. This avoids the
situation where all long-term bufferers decide to leave
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:17 UTC from IEEE Xplore.  Restrictions apply. 
20
15
10
5
0
)
%
(
y
t
i
l
i
b
a
b
o
r
P
2
3
4
5
6
7
8
#long−term bufferers
9
10
11
8
7
6
5
          C
Figure 2. For large regions, the number of
long-term bufferers for an idle message ap-
proximately follows a Poisson distribution
with parameter C.
%
(
y
t
i
l
i
)
b
a
b
o
r
P
40
35
30
25
20
15
10
5
0
1
2
3
C
4
5
6
Figure 3. For large regions, the probability
that no member buffers an idle message
decreases exponentially with C.
the group, making a message loss unrecoverable.
3.3 Search for Bufferers
When a member  receives a remote request from a
downstream member  for a message, there are three
possibilities:
(cid:15)  has received the message and still buffers it.
(cid:15)  has never received the message.
(cid:15)  received the message but has discarded it.
In the ﬁrst case,  can immediately send the message to
. In the second case,  records ’s request. Later when
 receives the message, it will forward the message to 
as described in Section 2. In the third case, however, 
needs to search for a member which buffers the message.
One solution is for  to multicast ’s request in its re-
gion. If a member has the message in its buffer, it multi-
casts a reply “I have the message” and then forwards the
message to . A randomized back-off scheme is used
to suppress duplicate responses when multiple members
buffer the message: upon receiving a request, a mem-
ber waits a random amount of time before multicasting
its reply in the region.
If it hears a multicast for the
same message from another member, it suppresses its
own multicast. The problem is how to choose an appro-
priate back-off period. As described earlier, the expected
number of long-term bufferers for an idle message is C.
Hence it is tempting to set the back-off period to be pro-
portional to C. In practice, however, we have found that
this approach occasionally leads to message implosion.
Recall that in our feedback-based buffering scheme each
member independently decides when a message has be-
come idle based on retransmission requests it received
from other members. Because of randomization, it is
possible that a message has become idle and been dis-
carded at one member but is still being buffered at many
other members (i.e.
the message has not become idle
at all members in the region). If a multicast request is
sent in this case, the back-off period will be too short to
suppress duplicate responses effectively.
In order to avoid storms of multicast replies, RRMP
adopts a different approach where a member conducts
a random search in its region to ﬁnd out a bufferer of
the message. More speciﬁcally, when  receives ’s re-
quest, it randomly selects a member  in its region and
forwards ’s request to .  also sets a timer according to
its estimated round trip time to . Upon receiving ’s re-
quest,  checks whether the message is still in its buffer.
If so, it sends the message to  and multicasts a reply
“I have the message” in its region. This reply notiﬁes
other members that the search process is over. If  has
discarded the message as well, it joins  in the search
process and tries to ﬁnd a bufferer of the message. (If
 has never received the message, it will send retrans-
mission requests as described in Section 2.) If  does
not hear a reply when its timer expires, it randomly se-
lects another receiver in its region and repeats the above
process. As time goes by, more and more members will
join the search process. As long as at least one member
in the region still buffers the message,  will receive the
message eventually.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:17 UTC from IEEE Xplore.  Restrictions apply. 
1p
2p
p
3
bufferer
4p
Time
0
5ms
10ms
15ms
20ms
request
request
r e q u e s t
request
t h e   m s g
I   h a v e  
Figure 4. Search for bufferers in a local re-
gion
Figure 4 illustrates the search process in a region with
four members, one of which is a bufferer. The horizon-
tal direction represents different members in the group,
and the vertical direction represents the amount of time
that has elapsed since the search starts. We assume that
the latency between any two members in the region is
5ms. Suppose member 1 receives a remote request at
time 0. It forwards the request to a randomly selected
member 2. Since 2 does not have the message either,
it forwards the request to 3. After 10ms 1 times out
and sends another request to 4, which is the bufferer.
Upon receipt of the request, 4 sends the message to the
remote member and multicasts a reply in the region.
The search time for a message depends on the num-
ber of members that buffer the message. If the message
has become idle at all members in the region, the ex-
pected number of bufferers is C. Hence increasing C
can reduce search time at the expense of higher memory
requirements. In particular, the search process is avoided
if ’s request arrives at a bufferer of the message.
The above discussion is simpliﬁed in assuming that
 is the only member receiving a remote request. As
described in Section 2, when an entire region missed a
message, on average (cid:21) members will send remote re-
quests to an upstream region. As soon as one of them
receives a remote repair, it will multicast the repair in its
region.
4 Simulation Results
In this section, we evaluate the performance of our
buffer management scheme using simulation. We focus
on the behavior of the protocol in a local region. The
round trip time between any two members in the region
)
s
m
(
e
m
i
t
g
n
i
r
e
f
f
u
b
e
g
a
r
e
v
a
110
100
90
80
70
60
50
40
30
20
1
2
32
#members holding a message initially
16
4
8
64
Figure 5. Effectiveness of feedback-based
buffering.
The x-axis is in logarithmic
scale. The ﬁgure indicates that the amount
of buffering time decreases as the initial IP
multicast has reached more members.
is 10ms. The idle threshold T is set to 40ms (i.e., 4
times the maximum round trip time). For simplicity, we
assume that retransmission requests and repairs are not
lost.
We ﬁrst evaluate the effectiveness of our feedback-
based short-term buffering scheme in a region with 100
members. We simulate the outcome of an IP multicast
by randomly selecting a subset of members to hold a
message initially. All other members simultaneously de-
tect the loss and start sending local requests. We mea-
sure how long these initial members buffer the message.
The result is shown in Figure 5 (note that the x-axis is
in logarithmic scale). As can be seen from the ﬁgure,
the amount of buffering time decreases as the initial IP
multicast has reached more members.
In Figure 6 we take a closer look at one of the data
points in Figure 5 where one member holds a message
initially. We compare the number of members which
have received the message with the number of members
which buffer the message as error recovery proceeds. As
can be seen from the ﬁgure, when only a small percent-
age of members have received the message, almost all
of them buffer the message. The number of short-term
bufferers decline rapidly when an overwhelming major-
ity of members (96% in this case) have received the
message. The results in these two ﬁgures demonstrate
that our feedback-based scheme is effective in allocat-
ing buffer space to those messages most needed in the
system.
Next we investigate the penalty in error recovery la-
tency due to a need to search for a bufferer. We assume
that a remote request arrives at a randomly chosen mem-
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:17 UTC from IEEE Xplore.  Restrictions apply. 
100
#received
#buffered
s
r
e
b
m
e
m
#
90
80
70
60
50
40
30
20
10
0
0
20
40
60
time (ms)
80
100
120
140
Figure 6. Comparison between the number
of members which have received a mes-
sage and the number of members which
buffer the message as error recovery pro-
ceeds.
)
s
m
(
e
m
i
t
h
c
r
a
e
s
50
45
40
35
30
25
20
15
1
2
3
4
5
6
#bufferers
7
8
9
10
Figure 7. Search time decreases as the
number of bufferers increases.
ber in a region with 100 members. The simulation is
repeated 100 times with different random seeds and the
average is taken. Figure 7 shows that the search time
decreases as the number of bufferers increases.
(The
search time is 0 if the request arrives at a bufferer.) With
10 bufferers, for example, the average search time is
20ms (i.e. twice the round trip time). In a wide area net-
work, the latency between two regions is usually much
higher than the latency within a region. Hence the search
time is likely to be a small fraction of the total recovery
latency.
In Figure 8 we show how the search time changes
when the size of the region increases from 100 members
to 1000 members. The number of bufferers is ﬁxed at 10.
)
s
m
(
e
m
i
t
h
c
r
a
e
s
50
45
40
35
30
25
20
15
100
200
300
400
500
600
region size
700
800
900 1000
Figure 8. Search time as the size of the
region increases.
The ﬁgure indicates that the degree of increase in search