[有个人正在练习线程的用法。
public class Main l
public class TestThread extends Thread ↑
请问，这是为什么？
示线程状态异常的异常）（见图4-6）。
无限次，然而程序却只有显示了一次，就抛出 IllegalThreadStateException（表
因为 Main 类的 while 是无限循环，所以推测这支程序应该会不停地输出
他建立了一个简单的TestThread类（List 4-11），并从Main类（List 4-12）调
问题4-5（异常IllegalThreadException）
List 4-12
用它。
List 4-11
public static void main(String[] args)
 public void run(） {
 Thread thread = hew TestThread();
while (true) {
for （int i = 0; i = buffer.length) {
this,count = 0;
this.tail = 0;
wait();
waitil;
synchronized
(head + l) & buffer.length;
[ Cake No.1 by MakerThread-2
[ Cake No.2 by Makerrhread-3
- cake;
void
put(string
一拿走No.2的蛋糕
一拿走No.1的蛋糕
一拿走No.0的蛋糕
←摆出No.2的蛋糕
一摆出No.1的蛋糕
一摆出No.O的蛋糕
cake)
会被 EaterThread
throws
---
## Page 157
以用来摆放蛋糕的空间”。以这个表达式作为 put方法的警戒条件，大家应该都可以
条件的逻辑否定，如下所示：
throws InterruptedException
分析 put 方法
Guarded Suspension Pattern
put 方法中使用了Guarded Suspension Pattcrn（第3章）。而警戒条件就是 while
接着要分析的是用来摆出蛋糕的 put 方法。
(以下省略。CTRI+C结束程序)
EaterThread-2 takes [ Cake No.12 by MakerThread-2
-  7' 5   9
也就是“现在桌上的蛋糕数，低于可以放置的总上限”，简单地说就是“还有可
EaterThread-l takes
Makerrhread-l puts [ Cake No.ll by MakerThread-l }
EaterThread-3
MakerThread-3 puts f Cake No.10 by MakerThread-3
EaterThread-2
EaterThread-3
MakerThread-2
MakerThread-l
FaterThread-1
MakerThread-3
EaterThread-3
EaterThread-2
MakerThread-2
EaterThread-3
EaterThread-1
MakerThread-3
!(count >= buffer.length)
MakerThreari-l puts [ Cake No.4 by MakerThread-l
count < buffer.lergth
这等价于下而的表达式：
takes
 takes
takes
puts
takes
puts
puts
takes
puts
takes
takes
Lakes
[ Cake No.ll by MakerThread-1
[ Cake No.10 by MakerThread-3
[ Cake No.9 l
[ Cake No.8l
[Cake No.7 by MakerThread-3
Cake No.7 by MakerThiread-3
[Cake No.6 by MakerThread-2
[Cake
Cake Nu.6 by MakerThread-2
[ Cake No.4 by MakerThread-1
[ Cake No.3 by MakerThread-2
Cake No.5 by Makerrhread-3
Cake No.9 by MakerThiread-2
Cake No.8 by MakerThread-1
No.51
图5-1执行范例
Producer-Consumer——我来做：你来用
by
by Makerlhread-1
by MakerThread-5
..警戒条件
..警戒条件
MakerThread-2
一拿走NC.12的蛋糕
+摆出Nc.12的蛋糕
+拿走No.11的蛋糕
一摆出No.11的蛋糕
+摆出No.8的蛋精
一拿走No.7的蛋糕
一摆出No.5的蛋
←摆出 No.4 的蛋
一楼出 No.3的蛋糕
1,
T.
T
一
f
拿走No.10的蛋糕
摆出No.10的蛋糕
拿走No.9的蛋糕。
拿走No.8的蛋
摆出No.9的蛋糕
摆出No.7的蛋粘
拿走No.5的蛋糕
摆出No.6的蛋糕
拿走Mo.4的蛋
拿走No.3的蛋糕
（续上图）
糕