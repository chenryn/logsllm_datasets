Connections DH per
conn.
0
1
1
2
per second
18,453
8,576
7,827
4,967
Table 2: Connection establishment with many clients
Tunnel establishment throughput with many clients
We created a second connection benchmark to estimate the
CPU load on a MinimaLT server servicing many clients.
To do this, we ran two client OS instances, each forking
several processes that connected to the server repeatedly as
new clients; here each virtual machine instance was running
on a distinct processor core within a single computer. Be-
cause this experiment concerns CPU use and not latency,
these clients do not write any application-layer data, they
only connect. Using xenoprof and xentop, we determined
that the server was crypto-bound (i.e., 63% of CPU use was
in cryptography-related functions—primarily public key—
and the server CPU load was nearly 100%). We measured
the number of full connections per second achieved under
this load, and varied our conﬁguration from accepting fully-
anonymous users (no authenticators), to verifying a new user
authenticator for each connection request. Our MinimaLT
server established 4,967–7,827 tunnels per second, as shown
in Table 2 (rows 3–4).
Given the minimal tunnel request size of 1,024 bytes, our
hosts can (on a single core) service 61.15Mb/s of tunnel
requests from anonymous users and at least 38.80Mb/s of
tunnel requests from authenticated users. We note that the
latter is the worst case for authenticated users; in general,
we would cache the result of the DH computations necessary
to validate user authenticators, as authenticators use long-
term keys. Thus in practice we expect the authenticated
user case to approach that of anonymous users.
Connection establishment throughput with many
clients We repeated the previous experiment, but this time
avoided DH computations by repeatedly creating connec-
tions using a single tunnel between each client and the
server. Table 2 (rows 1–2) shows that our rates ranged from
8,576–18,453 per second, depending on the presence of user
authenticators. The connection rate over a single tunnel is
important for applications which require many connections
431MinimaLT/TLS
MinimaLT/TCP
MinimaLT/TLS
MinimaLT/TCP
1/16 1/8 1/4 1/2 1
16 32 64 128 256
One-way additional simulated latency applied to network (ms); this is in addition to our native LAN latency of 1/13 ms
1/16 1/8 1/4 1/2 1
16 32 64 128 256
2
4
8
2
4
8
(a) MinimaLT gain over TCP/IP and TLS; full connections
(b) MinimaLT gain over TCP/IP and TLS; abbr. connections
7.00×
6.00×
5.00×
4.00×
3.00×
2.00×
1.00×
0.00×
101
100
10−1
10−2
10−3
10−4
7.00×
6.00×
5.00×
4.00×
3.00×
2.00×
1.00×
0.00×
)
s
(
e
m
i
t
t
c
e
n
n
o
C
101
100
10−1
10−2
10−3
10−4
OpenSSL
Unencrypted
MinimaLT
OpenSSL
Unencrypted
MinimaLT
1/16 1/8 1/4 1/2 1
One-way additional simulated latency applied to network (ms); this is in addition to our native LAN latency of 1/13 ms
(d) Time spent creating a connection; abbr. connections
(c) Time spent creating a connection; full connections
1/16 1/8 1/4 1/2 1
16 32 64 128 256
16 32 64 128 256
2
4
8
2
4
8
Figure 6: Serial tunnel/connection establishment latency
and when using many applications to communicate with the
same server. Our comments about cached DH results in the
preceding experiment apply here as well; we would expect
in practice the rate of the authenticated case will approach
the anonymous case.
A theoretical throughput limit We used SUPER-
COP [5] to measure the time it takes our hardware to
compute a shared secret using DH, approximately 293,000
cycles or 14,000 shared-secret computations per second.
MinimaLT’s tunnel establishment rate approaches 56% of
this limit, with the remaining time including symmetric key
cryptography, scheduling, and network stack processing.
System
Line speed
Unencrypted
MinimaLT
OpenSSL
Bytes per second
125,000,000
117,817,528
113,945,258
111,448,656
Table 3: Data throughput (ignoring protocol overhead)
Single-connection data throughput Table 3 describes
our throughput results, observed when running programs
that continuously transmitted data on a single connection
for thirty seconds. MinimaLT approaches the throughput
achieved by unencrypted networking and runs at 91% of
line speed (Gb/s). Indeed, MinimaLT’s cryptography runs
at line speed; header size diﬀerences are the primary reason
the unencrypted benchmark outperforms MinimaLT.
7 Design rationale
7.1 Cryptographic security
Tunnel IDs and nonces are visible on the network, and fol-
low a clear pattern for each client-server pair. Essentially
the same information is available through a simple log of
IP addresses of packets sent. Mobile clients automatically
switch to new tunnel IDs when they change IP addresses,
as we described in §5.6. Ephemeral client public keys are
visible when each tunnel is established, but are not reused
and are not connected to any other client information.
Other information is boxed (encrypted and authenticated)
between public keys at the ends of the tunnel. These boxes
can be created and understood using either of the two corre-
sponding private keys, but such keys are maintained locally
inside MinimaLT hosts. The attacker can try to violate con-
ﬁdentiality by breaking the encryption, or violate integrity
by breaking the authentication, but MinimaLT uses modern
cryptographic primitives that are designed to make these at-
tacks very diﬃcult. The attacker can also try to substitute
his public key for a legitimate public key, fooling the client
or server into encrypting data to the attacker or accepting
data actually from the attacker, but this requires violating
integrity of previous packets: for example, before the client
encrypts data to D0, the client obtains D0 from a boxed
packet between D and C0. MinimaLT’s reliability and con-
nection headers are part of the ciphertext, so they are also
protected against tampering and eavesdropping.
7.2 The beneﬁts of RPCs
In contrast to byte-oriented protocols, we use RPCs within
MinimaLT’s connection layer as they result in a clean design
and implementation; they are also general and fast (§6).
RPCs have a long history dating to the mid-1970s [60, 9].
The tunnel, and the RPCs within it, are totally sequenced;
thus RPCs are executed in order (as opposed to separately
implemented connections—as in TLS—where ordering be-
tween connections is not ﬁxed). This enables a clean sepa-
ration of the control connection from other connections, and
we have found that this simpliﬁes both the protocol and its
implementation. Furthermore, placing multiple RPCs in one
packet amortizes the overhead due to MinimaLT’s delivery
and tunnel ﬁelds across multiple connections.
7.3 The beneﬁts of tunnels
Tunnels make it more diﬃcult for an attacker to use traﬃc
analysis to infer information about communicating parties.
Of course, traﬃc analysis countermeasures have limits [43];
for obvious cost reasons we did not include extreme protec-
tions against traﬃc analysis, such as using white noise to
maintain a constant transmission rate. MinimaLT also re-
432duces packet overhead by using TIDs rather than repeating
the public key in every packet.
Tunnels are independent of the IP address of C; this
means that C can resume a tunnel after moving to a new
location (typically prompting the use of the next ephemeral
key as described below), avoiding tunnel-establishment la-
tency and application-level recovery due to a failed connec-
tion. This reduced latency is useful for mobile applications,
in which IP-address assignments may be short-lived, and
thus overhead may prevent any useful work from being done
before an address is lost.
MinimaLT reduces an attacker’s ability to link tunnels
across IP address changes because its TID changes when
its IP address changes. What remains is temporal analysis,
where an attacker notices that communication on one IP ad-
dress stops at the same time that communication on another
starts. However, the attacker cannot diﬀerentiate for sure
between IP mobility and an unrelated tunnel establishment.
Blinding information below the network layer—for example,
the Ethernet MAC—is left to other techniques.
7.4 Rekeying
Rekeying is critical for allowing key erasure during a long
connection: it allows clients and servers to periodically for-
get old encryption keys, protecting those keys against an at-
tacker who later compromises clients and servers. Rekeying
also supports IP-address mobility without explicitly linking
the old address to the new address.
Creating the new key by hashing is more eﬃcient than
creating it by a new DH, avoiding both public-key operations
and superﬂuous round trips.
The client creates a new public key, so that there is
no packet-format distinction between a rekeying tunnel-
initiation packet and a completely new tunnel-initiation
packet. Rather than generating a key pair and using only
the public key, a public key can directly and more eﬃciently
be generated as a random point on an elliptic curve.
There are two copies of C0 in a rekeying packet, one in the
clear and one inside the boxed part, veriﬁed by the server
to be identical. Without this veriﬁcation, an active attacker
could modify the public key sent in the clear, observe that
the server still accepts this packet, and conﬁdently conclude
that this is a rekey rather than a completely new tunnel.
A client-side administrator sets his host’s key-erasure
interval as a matter of policy. The server’s policy is
slightly more sensitive, because the server must maintain its
ephemeral key pairs as long as they are advertised through
the directory service. An attacker who seizes a server could
combine the ephemeral keys with captured packets to regen-
erate any symmetric key within the ephemeral key window.
Thus even if the client causes a rekey, the server’s ephemeral
key window dominates on the server side.
If a user believes a server’s ephemeral key lifetime is long
enough to put his communications at risk, then he could
choose not to communicate with the server. Except for
the case of a malicious server which does not destroy ex-
pired ephemeral keys (and ought not to be trusted in the
ﬁrst place), MinimaLT’s directory service provides the life-
time information needed to make these decisions, whether
directly by a human or by automated tools.
7.5 User authenticators
Because authenticators are transmitted inside boxes (as ci-
phertext), they are protected from eavesdropping, and be-
cause the authenticator is tied to the server’s (certiﬁed) pub-
lic key, the server cannot use it to masquerade as the user to
a third-party MinimaLT host. Of course, any server could
choose to ignore the authenticator or perform operations the
client did not request, but that is unavoidable. If third-party
auditability is desired then users can choose to interact only
with servers that take requests in the form of certiﬁcates.
7.6 Denial of service
DoS protections in MinimaLT are intended to maintain
availability against much more severe attacks than are han-
dled by current Internet protocols. Of course, an ex-
ceptionally powerful attacker will be able to overwhelm a
MinimaLT server, but DoS protections are useful even in
such extreme situations as a way to consume the attacker’s
resources and limit the number of DoS victims. Of par-
ticular concern are DoS attacks which consume memory or
computational resources; the protocol cannot directly de-
fend against network exhaustion attacks, although it avoids
contributing to such attacks by preventing ampliﬁcation.
We introduced anonymous and stranger-authorized ser-
vices in §3.1. Anonymous services (i.e., permit create0) per-
form a DH computation to compute a shared secret and
maintain tunnel data structures that consume just under
5KB each (this is conﬁgurable; most memory use is due to
incoming and outgoing packet buﬀers). Stranger-authorized
services (i.e, require createAuth0, but permit strangers) ad-
ditionally perform a public-key decryption to validate each
new user authenticator encountered. MinimaLT puzzles
serve as a countermeasure to DoS attacks on these services
[33], and we now describe how they are applied at key points
of the MinimaLT protocol. (Recall that administrators can
additionally address DoS attacks from known users through
de-authorization or non-technical means.)
Before establishing a tunnel In the case of anonymous
services, a single attacker could generate a large number of
ephemeral public keys to create many tunnels, with each
tunnel consuming the resources described above. Further-
more, the attacker’s host might avoid creating a tunnel data
structure or performing any cryptographic operations, thus
making the attack aﬀect the server disproportionately.
MinimaLT addresses these attacks using puzzles present
in its tunnel headers. Servicing tunnel requests in excess of
the limits discussed in §6.2 would cause a server to require
these puzzles, and because they take O(2w−1) operations for
a client to solve, the server can require clients to pay a wide
range of computational costs to connect, here w is a 32-
bit value. On the other hand, puzzles are of little burden on
the server; our test hardware can generate and verify 386,935