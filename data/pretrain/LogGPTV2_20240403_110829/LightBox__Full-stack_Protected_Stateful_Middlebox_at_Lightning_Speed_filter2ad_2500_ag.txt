Juhyeng Han, Seongmin Kim, Jaehyeong Ha, and Dongsu Han. 2017. SGX-Box:
Enabling Visibility on Encrypted Tra(cid:129)c Using a Secure Middlebox Module. In
Proc. of the First Asia-Paci(cid:128)c Workshop on Networking.
Proc. of ALENEX/ANALCO.
[37] Tyler Hunt, Zhiting Zhu, Yuanzhong Xu, Simon Peter, and Emme(cid:138) Witchel.
2016. Ryoan: a distributed sandbox for untrusted computation on secret data.
In Proc. of USENIX OSDI.
sarial Traces for Website Fingerprinting Defense. In Proc. of ACM CCS.
com/threatlabz/encrypted-tra(cid:129)c-dashboard.
[39] Zscaler Inc. 2019. Encrypted Tra(cid:129)c Dashboard. Online at: h(cid:138)ps://www.zscaler.
[38] Mohsen Imani, Mohammad Saidur Rahman, and Ma(cid:138)hew Wright. 2018. Adver-
[40] Zscaler Inc. 2019. SSL Inspection. Online at: h(cid:138)ps://www.zscaler.com/products/
[32]
[35]
ssl-inspection.
[47]
[41] Zscaler Inc. 2019. Zscaler Architecture: Cloud from the beginning. Online at:
h(cid:138)ps://www.zscaler.com/products/cloud-architecture-security-as-a-service.
Intel. 2017. Data plane development kit. Online at: h(cid:138)p://www.dpdk.org.
[42]
[43] Prerit Jain, Soham Desai, Seongmin Kim, Ming-Wei Shih, J Lee, Changho Choi,
Youjung Shin, Taesoo Kim, Brent Byunghoon Kang, and Dongsu Han. 2016.
Opensgx: An open platform for sgx research. In Proc. of NDSS.
[44] Muhammad Asim Jamshed, Jihyung Lee, Sangwoo Moon, Insu Yun, Deokjin
Kim, Sungryoul Lee, Yung Yi, and KyoungSoo Park. 2012. Kargus: a highly-
scalable so(cid:137)ware-based intrusion detection system. In Proc. of ACM CCS.
[45] Muhammad Asim Jamshed, YoungGyoun Moon, Donghwi Kim, Dongsu Han,
and KyoungSoo Park. 2014. mOS: A Reusable Networking Stack for Flow
Monitoring Middleboxes. In Proc. of USENIX NSDI.
[46] Murad Kablan, Azzam Alsudais, Eric Keller, and Franck Le. 2017. Stateless
Network Functions: Breaking the Tight Coupling of State and Processing. In
Proc. of USENIX NSDI.
Junaid Khalid, Aaron Gember-Jacobson, Roney Michael, Anubhavnidhi Ab-
hashkumar, and Aditya Akella. 2016. Paving the way for NFV: Simplifying
middlebox modi(cid:128)cations using StateAlyzr. In Proc. of USENIX NSDI.
[48] Changhoon Kim, Ma(cid:138)hew Caesar, Alexandre Gerber, and Jennifer Rexford.
2009. Revisiting route caching: (cid:140)e world should be (cid:131)at. In Proc. of International
Conference on Passive and Active Network Measurement.
[49] Eddie Kohler, Robert Morris, Benjie Chen, John Janno(cid:138)i, and M Frans Kaashoek.
2000. (cid:140)e Click modular router. ACM Transactions on Computer Systems (TOCS)
18, 3 (2000), 263–297.
[50] Leslie Lamport. 1977. Proving the correctness of multiprocess programs. IEEE
transactions on so(cid:135)ware engineering 2 (1977), 125–143.
[51] Chang Lan, Justine Sherry, Raluca Ada Popa, and Sylvia Ratnasamy. 2016.
EMBArk: Securely Outsourcing Middleboxes to the Cloud. In Proc. of USENIX
NSDI.
[52] Patrick PC Lee, Tian Bu, and Girish Chandranmenon. 2010. A lock-free, cache-
e(cid:129)cient multi-core synchronization mechanism for line-rate network tra(cid:129)c
monitoring. In Proc. of IEEE Parallel & Distributed Processing (IPDPS).
//www.businessinsider.com/data-hacks-breaches-biggest-of-2018-2018-12.
[53] Paige Leskin. 2018. (cid:140)e 21 scariest data breaches of 2018. Online at: h(cid:138)ps:
[54] Hongda Li, Hongxin Hu, Guofei Gu, Gail-Joon Ahn, and Fuqiang Zhang. 2018.
vNIDS: Towards Elastic Security with Safe and E(cid:129)cient Virtualization of Net-
work Intrusion Detection Systems. In Proc. of ACM CCS.
[55]
Joshua Lind, Christian Priebe, Divya Muthukumaran, Dan O’Kee(cid:130)e, Pierre-
Louis Aublin, Florian Kelbert, Tobias Reiher, David Goltzsche, David Eyers,
R¨udiger Kapitza, et al. 2017. Glamdring: automatic application partitioning for
intel SGX. In Proc. of USENIX ATC.
[56] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V Rozas, Hisham
Sha(cid:128), Vedvyas Shanbhogue, and Uday R Savagaonkar. 2013. Innovative instruc-
tions and so(cid:137)ware model for isolated execution. In Proc. of ACM HASP.
[57] Luca Melis, Hassan Jameel Asghar, Emiliano De Cristofaro, and Mohamed Ali
Kaafar. 2016. Private Processing of Outsourced Network Functions: Feasibility
and Constructions. In Proc. of ACM SDN-NFV Security.
html/rfc958.
[58] David Mills. 1985. Network Time Protocol. Online at: h(cid:138)ps://tools.ietf.org/
[59] P. Mishra, R. Poddar, J. Chen, A. Chiesa, and R. A. Popa. 2018. Oblix: An E(cid:129)cient
[60] Ahmad Moghimi, Gorka Irazoqui, and (cid:140)omas Eisenbarth. 2017. Cachezoom:
[63] Meni Orenbach, Pavel Lifshits, Marina Minkin, and Mark Silberstein. 2017.
Oblivious Search Index. In Proc. of IEEE S&P.
How SGX ampli(cid:128)es the power of cache a(cid:138)acks. In Proc. of CHES.
[61] David Naylor, Richard Li, Christos Gkantsidis, (cid:140)omas Karagiannis, and Peter
Steenkiste. 2017. And (cid:140)en (cid:140)ere Were More: Secure Communication for More
(cid:140)an Two Parties. In Proc. of ACM CoNEXT.
[62] David Naylor, Richard Li, Christos Gkantsidis, (cid:140)omas Karagiannis, and Peter
Steenkiste. 2017. And (cid:140)en (cid:140)ere Were More: Secure Communication for More
(cid:140)an Two Parties. In Proc. of ACM CoNEXT.
Eleos: ExitLess OS Services for SGX Enclaves. In Proc. of ACM Eurosys.
[64] Aurojit Panda, Sangjin Han, Keon Jang, Melvin Walls, Sylvia Ratnasamy, and
Sco(cid:138) Shenker. 2016. NetBricks: Taking the V out of NFV. In Proc. of USENIX
OSDI.
[65] Parveen Patel, Deepak Bansal, Lihua Yuan, Ashwin Murthy, Albert Green-
berg, David A. Maltz, Randy Kern, Hemant Kumar, Marios Zikos, Hongyu Wu,
Changhoon Kim, and Naveen Karri. 2013. Ananta: Cloud Scale Load Balancing.
In Proc. of ACM SIGCOMM.
[66] Rishabh Poddar, Chang Lan, Raluca Ada Popa, and Sylvia Ratnasamy. 2018.
SafeBricks: Shielding Network Functions in the Cloud. In Proc. of USENIX NSDI.
[67] HAProxy Project. 2018. (cid:140)e reliable, high performance tcp/h(cid:138)p load balancer.
Online at: h(cid:138)p://www.haproxy.org/.
[68] Andrew Reed and Michael Kranch. 2017. Identifying HTTPS-Protected Net(cid:131)ix
[69] Luigi Rizzo. 2012. netmap: A Novel Framework for Fast Packet I/O. In Proc. of
[70] Alan Rusbridger. 2013. (cid:140)e Snowden Leaks and the Public. (cid:138)e New York Review
[71] Satori. 2017. Fast multi-core TCP and WebSockets load generator. Online at:
Videos in Real-Time. In Proc. of ACM CODASPY.
USENIX ATC.
of Books (2013).
h(cid:138)ps://github.com/machinezone/tcpkali.
[72] Felix Schuster, Manuel Costa, C´edric Fournet, Christos Gkantsidis, Marcus
Peinado, Gloria Mainar-Ruiz, and Mark Russinovich. 2015. VC3: Trustworthy
data analytics in the cloud using SGX. In Proc. of IEEE S&P.
[73] Vyas Sekar, Norbert Egi, Sylvia Ratnasamy, Michael K Reiter, and Guangyu Shi.
2012. Design and implementation of a consolidated middlebox architecture. In
Proc. of USENIX NSDI.
Jaebaek Seo, Byounyoung Lee, Seongmin Kim, Ming-Wei Shih, Insik Shin,
Dongsu Han, and Taesoo Kim. 2017. SGX-Shield: Enabling address space layout
randomization for SGX programs. In Proc. of NDSS.
[75] Fahad Shaon, Murat Kantarcioglu, Zhiqiang Lin, and Latifur Khan. 2017. SGX-
BigMatrix: A Practical Encrypted Data Analytic Framework With Trusted
Processors. In Proc. of ACM CCS.
Justine Sherry, Shaddi Hasan, Colin Sco(cid:138), Arvind Krishnamurthy, Sylvia Rat-
nasamy, and Vyas Sekar. 2012. Making middleboxes someone else’s problem:
network processing as a cloud service. In Proc. of ACM SIGCOMM.
Justine Sherry, Chang Lan, Raluca Ada Popa, and Sylvia Ratnasamy. 2015. Blind-
Box: Deep Packet Inspection for Encrypted Tra(cid:129)c. In Proc. of ACM SIGCOMM.
[78] Ming-Wei Shih, Mohan Kumar, Taesoo Kim, and Ada Gavrilovska. 2016. S-NFV:
securing NFV states by using SGX. In Proc. of ACM SDN-NFV Security.
[79] Shweta Shinde, Zheng Leong Chua, Viswesh Narayanan, and Prateek Saxena.
2016. Preventing page faults from telling your secrets. In Proc. of AsiaCCS.
ACM.
[80] Payap Sirinam, Mohsen Imani, Marc Juarez, and Ma(cid:138)hew Wright. 2018. Deep
Fingerprinting: Undermining Website Fingerprinting Defenses with Deep Learn-
ing. In Proc. of ACM CCS.
h(cid:138)ps://www.snort.org/.
[81] Snort. 2018. Network Intrusion Detection & Prevention System. Online at:
[82] Snort. 2018. Rule Subscriptions. Online at: h(cid:138)ps://www.snort.org/products#
[74]
[76]
[77]
rule subscriptions.
[83] Chen Sun, Jun Bi, Zhilong Zheng, Heng Yu, and Hongxin Hu. 2017. NFP:
Enabling Network Function Parallelism in NFV. In Proc. of ACM SIGCOMM.
[84] Meysam Taassori, Ali Sha(cid:128)ee, and Rajeev Balasubramonian. 2018. VAULT: Re-
ducing Paging Overheads in SGX with E(cid:129)cient Integrity Veri(cid:128)cation Structures.
In Proc. of ACM ASPLOS.
[89]
[87] Chia-che Tsai, Donald E Porter, and Mona Vij. 2017. Graphene-SGX: A Practical
[85] Hongliang Tian, Qiong Zhang, Shoumeng Yan, Alex Rudnitsky, Liron Shacham,
Ron Yariv, and Noam Milshten. 2018. Switchless Calls Made Practical in Intel
SGX. In Proc. of ACM SysTEX.
[86] Bohdan Trach, Alfred Krohmer, Franz Gregor, Sergei Arnautov, Pramod Bhato-
tia, and Christof Fetzer. 2018. ShieldBox: Secure Middleboxes using Shielded
Execution. In ACM Proc. of SOSR.
Library OS for Unmodi(cid:128)ed Applications on SGX. In Proc. of USENIX ATC.
[88] Nirvan Tyagi, Yossi Gilad, Derek Leung, Matei Zaharia, and Nickolai Zeldovich.
2017. Stadium: A Distributed Metadata-Private Messaging System. In Proc. of
ACM SOSP.
Jelle Van Den Hoo(cid:130), David Lazar, Matei Zaharia, and Nickolai Zeldovich. 2015.
Vuvuzela: Scalable private messaging resistant to tra(cid:129)c analysis. In Proc. of
ACM SOSP.
[90] Michael Wal(cid:128)sh, Jeremy Stribling, Maxwell Krohn, Hari Balakrishnan, Robert
Morris, and Sco(cid:138) Shenker. 2004. Middleboxes No Longer Considered Harmful.
In Proc. of USENIX OSDI.
[91] Tao Wang, Xiang Cai, Rishab Nithyanand, Rob Johnson, and Ian Goldberg. 2014.
E(cid:130)ective A(cid:138)acks and Provable Defenses for Website Fingerprinting. In Proc. of
USENIX Security.
[92] Tao Wang and Ian Goldberg. 2017. Walkie-Talkie: An E(cid:129)cient Defense Against
Passive Website Fingerprinting A(cid:138)acks. In Proc. of USENIX Security.
[93] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian Zhang, XiaoFeng Wang,
Vincent Bindschaedler, Haixu Tang, and Carl A Gunter. 2017. Leaky cauldron
on the dark land: Understanding memory side-channel hazards in sgx. In Proc.
of ACM CCS.
[94] Nico Weichbrodt, Anil Kurmus, Peter Pietzuch, and R¨udiger Kapitza. 2016.
AsyncShock: Exploiting synchronisation bugs in Intel SGX enclaves. In Proc. of
ESORICS.
[95] O(cid:128)r Weisse, Valeria Bertacco, and Todd Austin. 2017. Regaining Lost Cycles
with HotCalls: A Fast Interface for SGX Secure Enclaves. In Proc. of ACM ISCA.
[96] Andrew M. White, Austin R. Ma(cid:138)hews, Kevin Z. Snow, and Fabian Monrose.
2011. Phonotactic Reconstruction of Encrypted VoIP Conversations: Hookt on
Fon-iks. In Proc. of IEEE S&P.
wolfssl-with-intel-sgx/.
Online at: h(cid:138)ps://www.wolfssl.com/
[97] wolfSSL Inc. 2017.
wolfSSL.
[98] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. 2015. Controlled-channel
a(cid:138)acks: Deterministic side channels for untrusted operating systems. In Proc.
of IEEE S&P.
[99] Xingliang Yuan, Xinyu Wang, Jianxiong Lin, and Cong Wang. 2016. Privacy-
preserving Deep Packet Inspection in Outsourced Middleboxes. In Proc. of IEEE
INFOCOM.
[100] Fan Zhang. 2017. mbedtls-SGX. Online at: h(cid:138)ps://github.com/bl4ck5un/
mbedtls-SGX.
[101] Fan Zhang, Ethan Cecche(cid:138)i, Kyle Croman, Ari Juels, and Elaine Shi. 2016. Town
crier: An authenticated data feed for smart contracts. In Proc. of ACM CCS.
A MULTI-THREADING SUPPORT
RSS Emulation for etap. Many middleboxes utilize multi-threading
to achieve high throughput [22, 44, 45, 73]. (cid:140)e standard parallel
architecture used by them relies on receiver-side scaling (RSS) or
equivalent so(cid:137)ware approaches to distribute tra(cid:129)c into multiple
queues by (cid:131)ows. Each (cid:131)ow is processed in its entirety by one single
thread without a(cid:130)ecting the others. We equip etap with an emula-
tion of this NIC feature to cater for multi-threaded middleboxes.
With the emulation, multiple RX rings will be created by etap,
and each middlebox thread is binded to one RX ring. (cid:140)e core
driver will hash the 5-tuple to decide which ring to push a packet,
and the poll driver will only read packets from the ring binded to
the calling thread. As the number of rings increases, the size of
each ring should be kept small to avoid excessive enclave memory
consumption. Note that we have discussed practical ring size in
Section 6.
Multi-threaded State Management. (cid:140)e RSS mechanism en-
sures that each (cid:131)ow is processed in isolation to others. For a
multi-threaded middlebox, we assign each thread a separate set
of flow cache, lkup table, and flow store. (cid:140)ere is no inter-
section between the sets, and thus all threads can perform (cid:131)ow
Figure 20: Service function chain connected by etap’s.
tracking simultaneously without data racing. Note that compared
to the single-threaded case, this partition scheme does not change
memory usage in managing the same number of (cid:131)ows.
B EXTENSION OF SERVICE MODEL
To clearly lay out the core designs of LightBox, so far we have
focused on a basic service model. (cid:140)at is, a single middlebox, and
a single service provider hosting the middlebox service. Now we
discuss how some other typical scenarios can be readily supported.
Service function chaining. Sometimes multiple logical middle-
boxes are chained together to process network tra(cid:129)c, which is
commonly referred to as service function chaining [43, 83]. (cid:140)is
service model is also considered in two recent systems for secure
middlebox outsourcing. SafeBricks [66] chains the middleboxes
within the same enclave, and isolates them by enforcing least privi-
lege on each. In comparison, ShieldBox [86] chains the middleboxes
with di(cid:130)erent enclaves run by di(cid:130)erent processes on the same phys-
ical machine. Both designs, however, run the chain on a single
physical machine that has a limited EPC size, and do not consider
the resource-demanding stateful middlebox. Practical execution of
a single stateful middlebox in the enclave is already a non-trivial
task — what we strive to achieve in this paper — let alone running
multiple enclaved stateful middleboxes on the same machine, where
severe performance issue is almost inevitable.
To this end, we propose to drive each middlebox in the chain
with a LightBox instance on a separate physical machine. Along
the chain, one instance’s etap will be simultaneously peered with
previous and next instance’s etap (or the etap-cli at the gateway).
Now each etap’s core driver will e(cid:130)ectively forward the encrypted
tra(cid:129)c stream to the next etap. (cid:140)is way, each middlebox in the
chain can access packet at line rate and run at its full speed. Note
that the secure bootstrapping should be adjusted accordingly. In
particular, the network administrator needs to a(cid:138)est each LightBox,
and provision it with proper peer information.
Disjoint service providers. Middlebox outsourcing may span a
disjoint set of service providers. A primary one may provide the
networking and computing platform, yet others (e.g., professional
cybersecurity companies) can provide bespoke middlebox functions
and/or processing rules. Such service market segmentation calls
for (cid:128)ner control over the composition of the security services.
(cid:140)e SGX a(cid:138)estation utility enables any participant of the joint
service to a(cid:138)est enclaves on the primary service provider’s platform.
(cid:140)erefore, they can securely provision their proprietary code/rule
set to a trusted bootstrapping enclave. (cid:140)e code is then compiled in
the bootstrapping enclave, and together with the rules, provisioned
to LightBox enclave. Such on-the-(cid:131)y compilation of private code in
LightBoxstate	mgmtetapMB	1	(FW)LightBoxstate	mgmtetapMB	2	(IDS)LightBoxstate	mgmtetapMB	3	(LB)the enclave is (cid:128)rst described in [72]. In [66], it is applied to bootstrap
secure middleboxes with di(cid:130)erent network function vendors. We
refer interested readers to [66] for more details.