---
layout: Conceptual
title: SDL Security Bug Bar (Sample)
description: This document outlines the basic criteria to consider when creating security processes, and serves as an example of a security bug bar as recommended within the SDL practices information found at https://microsoft.com/sdl.
ms.date: 12/03/2018
ms.service: security
ms.author: bcowper
author: BruceCowper
ms.topic: conceptual
---
# SDL Security Bug Bar (Sample)
**Note:** This sample document is for illustration purposes only. The content presented below outlines basic criteria to consider when creating security processes. It is not an exhaustive list of activities or criteria and should not be treated as such.
Please refer to the [definitions of terms](#Definition_of_Terms) in this section.
## On This Page
[Server](#Server)  
[Client](#Client)  
[Definitions of Terms](#Definition_of_Terms)
Server
Please refer to the Denial of Service Matrix for a complete matrix of server DoS scenarios.
The server bar is usually not appropriate when user interaction is part of the exploitation process. If a Critical vulnerability exists only on server products, and is exploited in a way that requires user interaction and results in the compromise of the server, the severity may be reduced from Critical to Important in accordance with the NEAT/data definition of extensive user interaction presented at the start of the client severity pivot.
Critical
Server summary: Network worms or unavoidable cases where the server is “owned.”
Elevation of privilege: The ability to either execute arbitrary code or obtain more privilege than authorized
Remote anonymous user
Examples:
Unauthorized file system access: arbitrary writing to the file system
Execution of arbitrary code
SQL injection (that allows code execution)
All write access violations (AV), exploitable read AVs, or integer overflows in remote anonymously callable code
Important
Server summary: Non-default critical scenarios or cases where mitigations exist that can help prevent critical scenarios.
Denial of service: Must be &quot;easy to exploit&quot; by sending a small amount of data or be otherwise quickly induced
 Anonymous
Persistent DoS
Examples:
Sending a single malicious TCP packet results in a Blue Screen of Death (BSoD)
Sending a small number of packets that causes a service failure
Temporary DoS with amplification
Examples:
Sending a small number of packets that causes the system to be unusable for a period of time
A web server (like IIS) being down for a minute or longer
A single remote client consuming all available resources (sessions, memory) on a server by establishing sessions and keeping them open
Authenticated
Persistent DoS against a high value asset
Example:
Sending a small number of packets that causes a service failure for a high value asset in server roles (certificate server, Kerberos server, domain controller), such as when a domain-authenticated user can perform a DoS on a domain controller
Elevation of privilege: The ability to either execute arbitrary code or to obtain more privilege than intended
Remote authenticated user
Local authenticated user (Terminal Server)
Examples:
Unauthorized file system access: arbitrary writing to the file system
Execution of arbitrary code
All write AVs, exploitable read AVs, or integer overflows in code that can be accessed by remote or local authenticated users that are not administrators (Administrator scenarios do not have security concerns by definition, but are still reliability issues.)
Information disclosure (targeted)
Cases where the attacker can locate and read information from anywhere on the system, including system information that was not intended or designed to be exposed
Examples:
Personally identifiable information (PII) disclosure
Disclosure of PII (email addresses, phone numbers, credit card information)
Attacker can collect PII without user consent or in a covert fashion
Spoofing
An entity (computer, server, user, process) is able to masquerade as a specific entity (user or computer) of his/her choice.
Examples:
Web server uses client certificate authentication (SSL) improperly to allow an attacker to be identified as any user of his/her choice
New protocol is designed to provide remote client authentication, but flaw exists in the protocol that allows a malicious remote user to be seen as a different user of his or her choice
Tampering
Modification of any “high value asset” data in a common or default scenario where the modification persists after restarting the affected software
Permanent or persistent modification of any user or system data used in a common or default scenario
Examples:
Modification of application data files or databases in a common or default scenario, such as authenticated SQL injection
Proxy cache poisoning in a common or default scenario
Modification of OS or application settings without user consent in a common or default scenario
Security features: Breaking or bypassing any security feature provided.
Note that a vulnerability in a security feature is rated “Important” by default, but the rating may be adjusted based on other considerations as documented in the SDL bug bar.
Examples:
Disabling or bypassing a firewall without informing users or gaining consent
Reconfiguring a firewall and allowing connections to other processes
Moderate
Denial of service
Anonymous
Temporary DoS without amplification in a default/common install.
Example:
Multiple remote clients consuming all available resources (sessions, memory) on a server by establishing sessions and keeping them open
Authenticated
Persistent DoS
Example:
Logged in Exchange user can send a specific mail message and crash the Exchange Server, and the crash is not due to a write AV, exploitable read AV, or integer overflow
Temporary DoS with amplification in a default/common install
Example:
Ordinary SQL Server user executes a stored procedure installed by some product and consumes 100% of the CPU for a few minutes
Information disclosure (targeted)
Cases where the attacker can easily read information on the system from specific locations, including system information, which was not intended/ designed to be exposed.
Example:
Targeted disclosure of anonymous data
Targeted disclosure of the existence of a file
Targeted disclosure of a file version number
Spoofing
An entity (computer, server, user, process) is able to masquerade as a different, random entity that cannot be specifically selected.
Example:
Client properly authenticates to server, but server hands back a session from another random user who happens to be connected to the server at the same time
Tampering
Permanent or persistent modification of any user or system data in a specific scenario
Examples:
Modification of application data files or databases in a specific scenario
Proxy cache poisoning in a specific scenario
Modification of OS/application settings without user consent in a specific scenario
Temporary modification of data in a common or default scenario that does not persist after restarting the OS/application-/session
Security assurances:
A security assurance is either a security feature or another product feature/function that customers expect to offer security protection. Communications have messaged (explicitly or implicitly) that customers can rely on the integrity of the feature, and that’s what makes it a security assurance. Security bulletins will be released for a shortcoming in a security assurance that undermines the customer’s reliance or trust.
Examples:
Processes running with normal “user” privileges cannot gain “admin” privileges unless admin password/credentials have been provided via intentionally authorized methods.
Internet-based JavaScript running in Internet Explorer cannot control anything the host operating system unless the user has explicitly changed the default security settings.
Low
Information disclosure (untargeted)
Runtime information
Example:
Leak of random heap memory
Tampering
Temporary modification of data in a specific scenario that does not persist after restarting the OS/application
Client
Extensive user action is defined as:
&quot;User interaction&quot; can only happen in client-driven scenario.
Normal, simple user actions, like previewing mail, viewing local folders, or file shares, are not extensive user interaction.
&quot;Extensive&quot; includes users manually navigating to a particular website (for example, typing in a URL) or by clicking through a yes/no decision.
&quot;Not extensive&quot; includes users clicking through e-mail links.
NEAT qualifier (applies to warnings only). Demonstrably, the UX is:
Necessary (Does the user really need to be presented with the decision?)
Explained (Does the UX present all the information the user needs to make this decision?)
Actionable (Is there a set of steps users can take to make good decisions in both benign and malicious scenarios?)
Tested (Has the warning been reviewed by multiple people, to make sure people understand how to respond to the warning?)
Clarification: Note that the effect of extensive user interaction is not one level reduction in severity, but is and has been a reduction in severity in certain circumstances where the phrase extensive user interaction appears in the bug bar. The intent is to help customers differentiate fast-spreading and wormable attacks from those, where because the user interacts, the attack is slowed down. This bug bar does not allow you to reduce the Elevation of Privilege below Important because of user interaction.
Critical
Client summary:
Network Worms or unavoidable common browsing/use scenarios where the client is “owned” without warnings or prompts.
Elevation of privilege (remote): The ability to either execute arbitrary code or to obtain more privilege than intended
Examples:
Unauthorized file system access: writing to the file system
Execution of arbitrary code without extensive user action
All write AVs, exploitable read AVs, stack overflows, or integer overflows in remotely callable code (without extensive user action)