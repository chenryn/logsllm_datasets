tacker has no information about the target secret beyond ac-
cess to the partitioning oracle and, perhaps, some information
about the set D and how the secret was sampled from it. In
particular, our adversaries will not have to break in to some
system or observe network communications to obtain a hash
or ciphertext derived from pw.
We note that we have framed partitioning oracles as out-
putting binary values, but it could be possible that there exist
oracles that output one of many values. A partitioning oracle
that returns one of r values could be used to identify a secret
chosen from D in logr |D| queries. We do not know of any
examples of such a partitioning oracle.
Relationship to padding oracles. Partitioning oracle at-
tacks are analogous to, but distinct from, padding oracle at-
tacks [81] or other kinds of format oracle attacks [8, 26]. Par-
titioning oracles can be exploited to reveal information about
secret keys, whereas format oracles can only reveal informa-
tion about plaintexts. That said, there is some overlap concep-
USENIX Association
30th USENIX Security Symposium    197
tually in the underlying techniques, as classic padding oracle
attacks like Bleichenbacher’s [17] or Vaudenay’s [81] can
also be viewed as adaptive attacks that provide exponential
speed-ups in recovering unknown values.
Additionally, padding oracles may be useful in helping
construct partitioning oracles. For example, consider our
password-based AEAD example, but replace the AEAD
scheme with a scheme such as HMAC-then-Encrypt which is
well known to give rise to padding oracle attacks that recover
plaintext data [6, 7, 81]. We can use the padding oracle to
construct a partitioning oracle where fpw( ˆC) = 1 if and only
if the padding check succeeds. Even if the check succeeds,
decrypting ˆC will fail, but the padding oracle will reveal f ’s
output and thereby enable recovery of pw.
Relationship to side-channels. Side-channel attacks that
exploit timing or other aspects of a computation may help
in constructing partitioning oracle attacks. Many padding
oracle attacks exploit timing side-channels (e.g., [6]) and they
can analogously aid partitioning oracle attacks. One of our
attacks against Shadowsocks, for example, exploits a side-
effect of correct decryption that is remotely observable. In
Section 8, we discuss how timing side-channels that may arise
in decryption can enable partitioning oracle attacks, even if
a nominally committing scheme is used. But partitioning
oracles do not necessarily rely on side channels.
Timing side-channels have also been used recently to learn
information about passwords [80] from implementations of
the PAKE protocol Dragonﬂy [31]. We discuss this in more
detail in Section 7.
3 Key Multi-Collision Attacks
Our partitioning oracle attacks will utilize the ability to ef-
ﬁciently compute a ciphertext that decrypts under a large
number k of keys. We refer to this as a key multi-collision,
a cryptanalytic target for encryption schemes that is, to the
best of our knowledge, new. Our primary focus will be on key
multi-collision attacks against widely used AEAD schemes,
including AES-GCM and XSalsa20/Poly1305.
Key multi-collision attacks. We formalize our cryptana-
lytic goal as follows. Let AEAD = (AuthEnc, AuthDec) be
an authenticated encryption with associated data scheme,
and let its key space be the set K . We write encryption
AuthEncK(N,AD,M) to denote running the encryption al-
gorithm with secret key K ∈ K , nonce N (a bit string), asso-
ciated data AD (a bit string), and message M (a bit string).
Decryption is written analogously, as AuthDecK(N,AD,C)
where C is a ciphertext. Decryption may output a distin-
guished error symbol ⊥. We require of our AEAD scheme
that AuthDecK(N,AD, AuthEncK(N,AD,M)) = M for all
N,AD,M not exceeding the scheme’s length restrictions. We
formalized AEAD as nonce-based [67], but our treatment and
results easily extend to randomized AEAD.
(cid:104)
(cid:104)
(cid:105)
(cid:105)
We deﬁne
targeted multi-key collision resistance
(TMKCR) security by the following game. It is parame-
terized by a scheme AEAD and a target key set K ⊆ K . A
possibly randomized adversary A is given input a target
set K and must produce nonce N∗, associated data AD∗ and
ciphertext C∗ such that AuthDecK(N∗,AD∗,C∗) (cid:54)= ⊥ for all
K ∈ K. We deﬁne the advantage via
Advtmk-cr
AEAD,K(A) = Pr
TMKCRA
AEAD,K ⇒ true
AEAD,K ⇒ true” denotes the event that A suc-
where “TMKCRA
ceeds in ﬁnding N∗,AD∗,C∗ that decrypt under all keys in K.
The event is deﬁned over the coins used by A.
We can deﬁne a similar untargeted multi-key collision re-
sistance goal, called simply MKCR. The associated security
game is the same except that the adversary gets to output a
set K of its choosing in addition to the nonce N∗, associated
data AD∗, and ciphertext C∗. The adversary wins if |K| ≥ κ
for some parameter κ > 1 and decryption of N∗,AD∗,C∗ suc-
ceeds for all K ∈ K. We deﬁne the advantage as
Advmk-cr
AEAD,κ(A) = Pr
MKCRA
AEAD,κ ⇒ true
AEAD,κ ⇒ true” denotes the event that A suc-
where “MKCRA
ceeds in ﬁnding K,N∗,AD∗,C∗ such that N∗,AD∗,C∗ de-
crypts to non-⊥ under all keys in K. The event is deﬁned
over the coins used by A.
A TMKCR adversary trivially gives an MKCR adversary,
but not vice versa. Both targeted and untargeted MKCR at-
tacks will enable partitioning oracle attacks, as both provide
the ability to compute splitting values that work for some
subset K of the key space. But targeted attacks are better
for adversaries, since it will allow, for example, generating
sets for the most probable keys (e.g., due to a non-uniform
distribution over the passwords used to derive them).
Our partitioning oracle attacks will require that decryption
fails for K /∈ K. This will hold except with tiny probability
for the target schemes of interest; thus, we focus on the crypt-
analytically hard task of computing the key multi-collisions.
Committing AEAD and MKCR.
Informally, a committing
encryption scheme is one for which it is computationally
intractable to ﬁnd a pair of keys and a ciphertext that decrypts
under both keys. Security goals for committing AE were
ﬁrst formalized by Farshim et al. [23]. Grubbs et al. [29]
later formalized committing AEAD, with slightly different
semantics than usual for AEAD to capture a goal of compact
commitments. Compactness is relevant in the moderation
settings they considered, but not here.
The Farshim et al. full robustness (FROB) notion is closest
to our MKCR notion: once translated to the nonce-based
AEAD setting (by adding nonces and associated data), it is a
special case of MKCR in which |K| = 2. We use committing
AEAD to refer to schemes that meet this FROB notion, which,
in turn, rule out MKCR attacks. The converse is not true, since
being MKCR for κ does not imply being MKCR for κ(cid:48) < κ.
198    30th USENIX Security Symposium
USENIX Association
GCM-Enc(K,N,AD,M):
H ← EK (0128) ; P ← EK (N (cid:107) 0311)
L ← encode64(|AD|)(cid:107) encode64(|M|)
T ← (L· H)⊕ P
m ← |M|/128 ; a ← |AD|/128
b ← m + a
For i = 1 to a :
T ← T ⊕ (AD[i]· Hb+2−i)
GCM-Dec(K,AD,N (cid:107)C(cid:107) T ):
H ← EK (0128) ; P ← EK (N (cid:107) 0311)
L ← encode64(|AD|)(cid:107) encode64(|C|)
T(cid:48) ← (L· H)⊕ P
m ← |C|/128 ; a ← |AD|/128
b ← m + a
For i = 1 to a :
T(cid:48) ← T(cid:48) ⊕ (AD[i]· Hb+2−i)
For i = 1 to m :
C[i] ← EK (N + 1 + i)⊕ M[i]
T ← T ⊕ (C[i]· Hb+2−i−a)
Return N (cid:107)C(cid:107) T
For i = 1 to m :
M[i] ← EK (N + 1 + i)⊕C[i]
T(cid:48) ← T(cid:48) ⊕ (C[i]· Hb+2−i−a)
If T(cid:48) (cid:54)= T then return ⊥
Return M
Multi-Collide-GCM(K,N,T ):
L ← encode64(0)(cid:107) encode64(|K|× 128)
pairs[·] ← ⊥ ; C ← ε
For i = 1 to |K| :
H ← EK[i](0128) ; P ← EK[i](N(cid:107)0311)
y ← ((L· H)⊕ P⊕ T )· H−2
pairs[i] ← (H,y)
f ← Interpolate(pairs) ; x ← Coeﬀs( f )
For i = 1 to |K| :
C ← C(cid:107) x[i]
Return N (cid:107)C(cid:107) T
Figure 1: (Left) The Galois Counter mode (GCM) encryption and (middle) decryption algorithms. (Right) The Multi-Collide-GCM algorithm,
which takes a set K of keys, a nonce N, and a tag T and computes a nonce-ciphertext-tag triple N(cid:107)C(cid:107)T such that it decrypts correctly under
every key in K. The function encode64(·) returns a 64-bit representation of its integer input. The function Interpolate(·) is a polynomial
interpolation algorithm that accepts a vector of data pairs and returns a polynomial, while Coeﬀs(·) returns the coefﬁcients of this polynomial.
We denote · as multiplication and ⊕ as addition in GF(2128).
Related security goals. Multi-collision resistance has been
treated in the context of hash functions, but here we are inter-
ested in multi-collisions over keys and not over messages. In
particular the attacks of Joux [41] are not applicable to our
setting, even if one were to focus on keyed Merkle-Damgård
hash functions, since applying his attack technique would rely
on very long multi-block keys.
One can also formalize and investigate key multi-collision
security for other symmetric and asymmetric primitives, in-
cluding message authentication schemes, digital signatures,
and public-key encryption. We leave doing so to future work.
3.1 Key Multi-collisions for AES-GCM
At a high level, our multi-collision attack against AES-GCM
reduces the task of ﬁnding key multi-collisions to solving
a system of linear equations. This is possible because of
the algebraic properties of the universal hashing underlying
integrity protection in AES-GCM [58, 59].
AES-GCM is an AEAD scheme that composes AES in
counter mode with a specially designed Carter-Wegman
MAC [82]. The latter uses an XOR-universal hash function
called GHASH. Detailed pseudocode is provided in Figure 1.
Encryption takes in a nonce N, an AES key K, associated data
AD, and plaintext M. It outputs a ciphertext C1, . . . ,Cm,T ;
here T is the authentication tag and m = (cid:100)M/n(cid:101) for n = 128
the blocksize of the underlying AES blockcipher denoted
by E. The ciphertext blocks C1, . . . ,Cm are generated using
counter mode with E, and the tag T is computed by applying
GHASH to AD and C1, . . . ,Cm to obtain a value h. Finally
T = h⊕ EK(N (cid:107) 0311). Decryption re-computes the tag, com-
pares it with T , and, if successful, outputs the counter-mode
decryption of the ciphertext blocks.
We now explain GHASH, but for simplicity omit associated
data. For a key K, GHASH ﬁrst derives a hash key H =
EK(0n). It then hashes by computing
m·H2 ⊕ L· H
h = C1·Hm+1 ⊕···⊕Cm−1·H3 ⊕C∗
(1)
where C∗
m is Cm concatenated with enough zeros to get an
n-bit string and L is an n-bit encoding of the length of the
message (equivalently, the length of the ciphertext). The max-
imum plaintext length is 239 − 256. The multiplications are
performed over the ﬁnite ﬁeld GF(2128) with a particular ﬁxed
irreducible polynomial.
Our attack takes as input a set K = {K1, . . . ,Kk} and
nonce N, and produces a single ciphertext (C1, . . . ,Ck−1,T )
that decrypts correctly under every key in K. For each Ki, we
derive the associated GHASH key Hi = EKi(0n) and construct
a linear equation
T = C1 · Hk−1
i ⊕ L· Hi ⊕ EKi(N (cid:107) 0311)
i ⊕···⊕Ck−1 · H2
which one arrives at by assigning Hi to H in (1) and then
substituting the result into the equation T = h⊕EKi(N(cid:107)0311).
Note that we have ﬁxed the number of the ciphertext blocks
to be k − 1. The result is then a system of k equations in k
(2)
where Bi = (L·Hi)⊕EKi(N(cid:107)0311). At this point, we can solve
the linear equations using Gaussian elimination to produce
the desired ciphertext. This will require O(k3) time, which
may be prohibitive for very large k.
The polynomial matrix in (2) is almost a Vandermonde
matrix, whose structured form allows for ﬁnding solutions
unknowns:
1 H2
1 H3
1
2 H3
1 H2
2
...
...
...
k H3
1 H2
k
·
 =
B1
B2
...
Bk
T
Ck−1
...
C1
1
··· Hk+1
··· Hk+1
...
...
··· Hk+1
2
k
USENIX Association
30th USENIX Security Symposium    199
more efﬁciently. The difference is the missing column
(cid:124) that is omitted because of the ﬁxed length
[H1,H2, . . . ,Hk]
value L (which we cannot treat as a variable). We can, how-
ever, treat T as a ﬁxed value (e.g., a randomly chosen constant)
instead of a variable, add one block of ciphertext as a new
variable, and solve for the following system of equations
 =
B(cid:48)
1
B(cid:48)
2
...
B(cid:48)
k
(3)
·
1
··· Hk−1
··· Hk−1
...
...
··· Hk−1
1 H1 H2