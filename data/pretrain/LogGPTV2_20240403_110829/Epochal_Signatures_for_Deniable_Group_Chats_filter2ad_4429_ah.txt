utility-algorithm update group (Algorithm 8) that S will use
to separate different ch-segments and disassociate the state.
Intuitively it has every party that stays in the group send an
empty message () and adds and removes all other users as
needed.
We note that update group does not use the secret keys that
are provided as part of the state but instead receives them as
an explicit argument. This is in order to allow the use of keys
that are, for the purposes of the simulation, equivalent to the
real ones but not necessarily identical.
Algorithm 8: update group updates a group to a new
partial group state and causes a full interaction.
1 fun update group(st, gr(cid:48), SK ):
2
3
4
5
6
il || =(A, (Add, gr,U), time, hid)
gr
gr := st.G[gr(cid:48).IDgr]
A ←$ G∗
il := []
for U ∈ Ggr(cid:48) \ Ggr:
for U ∈ Ggr \ Ggr(cid:48):
for U ∈ Ggr ∩ Ggr(cid:48):
, st(cid:48) := exec (st, il )
return st(cid:48)
il || =(U, (Leave, gr), time, hid)
il || =(U, (SndM, gr, ), time, hid)
7
8
9
10
11
12
D. Epochal Group Chat
Theorem 4. Let Π be a chat-protocol for which the following
requirements hold:
1) A hidden full interaction (HFI) causes a perfect state
disassociation.
We add as Lemma 1 that update group causes a sate
disassociation in the target-group:
Lemma 1. The algorithm update group, as deﬁned in Algo-
rithm 8, when called with a starting state st, an update-group-
description gr(cid:48), a list of secret-keys SK and a timepoint time,
causes a sate disassociation in the group identiﬁed by IDgr(cid:48).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:37 UTC from IEEE Xplore.  Restrictions apply. 
1693
Proof. It
follows from the deﬁnitions that update group
causes a hidden full interaction in that group. With that the
statement follows directly from Requirement 1.
This leads to our main-theorem of this section:
Theorem 8. Π∗ offers HFI-OfD-deniability under the fol-
lowing conditions, where e is the last epoch for which the
challenge instruction list contains an action:
• The simulator has access to pinfoe for all parties.
• The last ch-action that S has to simulate occurs in epoch
e − V or earlier.
Proof. We deﬁne S as depicted in Algorithm 9, where we
summarize the pinfoe’s of all parties in the set PIe that
contains them in tuples with the matching public-keys.
Algorithm 9: The simulator S for Π∗.
1 fun S(PK , sim il,st , PIe ):
2
3
4
5
6
7
8
9
10
11
SK ∗ := {extract sk(pk , pinfoe)|(pk , pinfoe) ∈ PIe}
U := list of all users mentioned in sim il,st
st := (U,∅, PK , SK ∗,∅)
ts := 
for x ∈ sim il,:
ts(cid:48), st := exec (st, [x])
ts || = ts(cid:48)
st := update group(st, x, SK , )
if x is instruction:
else:
12
return ts
The only information that S receives beyond what he is
given in the deniability game is PIe, which is in line with
Condition 8. We consider this condition plausible, as we
require that all public epoch information is made publicly
available. Formally this could be modelled as putting it onto
a global bulletin-board with unrestricted read-access.
As exec is the only black-box algorithm that S executes
and since we exec is efﬁciently computable (formally: exec ∈
PPT) S clearly runs in polynomial
time with regards to
max (λ, |sim il,st|) and is thus itself a PPT-algorithm.
With this we now show that the transcript generated by S
is information-theoretically indistinguishable from a real one.
For this we will use game-hopping: We start by looking at the
output-distribution of J at the end of the game, starting with
the case where the entire transcript that she receives is real
(b = 0). After this we will modify the game that J plays in a
way that is undetectable by her, until the transcript she receives
is partially generated by S (b = 1). Since J is unaware of any
of these changes, her output-distribution is unchanged, which
means that it is independent of b. This in turn implies that
her chance of answering with the correct value of b cannot
be higher than achievable by random guessing and that Π∗
is therefore HFI-OfD-secure. We remark here that looking at
J ’s outputs instead of the return-value of the experiment may
appear unusual but is intentional.
Let Game 0 be the HFI-OfD-game with b = 0, aka the
game in which the entire transcript is real. Let furthermore
OutDistJ ,0 be the distribution of the judge’s guess for b.
Let e be the epoch in which il contains the last ch-action. In
Game 1 we delay the execution of all actions in the HFI-OfD-
game until e’th epoch, then performs them all without delays.
This can be done as Requirement 6 allows the challenger to
simulate any oracles that the protocol might use efﬁciently. As
the actual output of the protocol is not affected by this change,
we get OutDistJ ,1 = OutDistJ ,0.
In Game 2 we execute il ch twice in parallel. We will hence-
forth call these the “left” and the “right” execution. Initially
only the left execution is used in the actual game, that is both
the exp- and the ch-transcript that J gets are taken from
its execution. Over the next game hops we will modify these
executions so that the left one becomes an honest execution of
il ar and that the right one becomes the simulator. So far this is
however a perfectly undetectable change from J ’s perspective
and we get OutDistJ ,2 = OutDistJ ,1 = OutDistJ ,0.
In Game 3 we modify the game so that the transcript of the
ch actions is taken from the right execution of il, whereas the
transcript of the exp actions is still taken from the left. We
perform this change on a per-group basis, with one sub-game
per group. Let Game 3.0 := Game 2, then for each group gri
we deﬁne Game 3.i as follows:
Let n be the number of longest segments in il, in which
group gri contains only ch actions. We will now call each
of these segments a ch-segment. With this we now per-
form n sub-sub-games to replace the left transcripts of these
transcripts. Let Game 3.i.n =
ch-segments with the right
Game 3.(i − 1).0 and Game 3.1.n = Game 3.0.
In Game 3.i.j we replace the left transcript of the j’th ch-
segment with the right transcript. We point out that by the deﬁ-
nition of the HFI-OfD-game every ch-segment is embraced by
hid-segments that contain hidden full interactions. Intuitively
we will ﬂip the left and the right thread of execution twice,
so that the right one is on the left side during the ch segment
and the points of contact are in the hid segments.
We will use two essentially identical sub-sub-sub-hops to
show that this change is undetectable: First we use the left
thread of execution as the right one (and the other way around)
after the completion of the i’th ch segment (this changes there
roles from then on). To show that this replacement is sound
we initialize a state disassociation challenger C and give it the
states that result on the left and the right from executing the
ch segment as well as the instruction sub list of following
hid segment, gri and SK and proceed the execution using
C’s ﬁrst output for the left side and the second output for the
right side.
This replacement is sound because both states are by the
deﬁnition of the game equivalent and the instruction-lists are
identical and consistent. If C samples b = 0 then this we
are in Game 3.i.(j − 1), otherwise in Game 3.i.j.1, getting
OutDistJ ,3.i.j.1 = OutDistJ ,3.i.(j−1) = OutDistJ ,0.
We repeat the exact some replacement for the hid seg-
ment before the ch segment and get OutDistJ ,3.i.j =
OutDistJ ,3.i.j.1 = OutDistJ ,0 We remark that the ﬁrst and
the last ch segment might not be preceded/succeeded by a
hid segment; in that case we simply leave out the respective
sub-sub-sub-hop, which does exactly what we want in that
case.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:37 UTC from IEEE Xplore.  Restrictions apply. 
1694
Let |st.G| =: m, then we deﬁne Game 3 := Game 3.m.0
and get: OutDistJ ,3 = OutDistJ ,2 = OutDistJ ,0.
In Game 4 we reconnect
the ch-segments in the right
execution by using update group (Algorithm 8) instead of
the non-ch-actions. We do this on a per-group basis, with one
sub-game per group. Let Game 4.0 := Game 3, then for each
group gri we deﬁne Game 4.i as follows:
Let n be the number of ch-segments in group gri. We
perform n sub-sub-games to connect these directly with each
other. Let Game 4.i.n = Game 4.(i − 1).0 and Game 4.1.n =
Game 4.0 and note that we again count
the last variable
downwards.
Let st be the state that results from executing the last
instruction of the j − 1’th ch-segment of gr or the empty
state if no such state exists. Let st(cid:48) be the state before the ﬁrst
instruction of the j’th ch-segment. In Game 4.i.j we replace
st(cid:48) with st(cid:48)(cid:48) which we deﬁne to be the result of executing
update group(st, st(cid:48)gri .ps, SK )
To show that this replacement is sound, we initialize a state
disassociation challenger C and call it with st, il 0, st, il 1 and
gri, where il 0 and il 1 are deﬁned as follows: The instruction
list il 0 contains all non-ar instructions between st and st(cid:48).
The instruction list il 1 is the output of update group when
called with the arguments stated above. We then replace st(cid:48)
with the ﬁrst state that C outputs. This replacement is sound
as il 0 contains a hidden full interaction by the deﬁnition of
the HFI-OfD game, il 1 contains a hidden full interaction by
the deﬁnition of update group, both are consistent with their
starting states and result by construction in equivalent states.
If C’s bit b is 0, then the resulting ﬁrst state was generated like
the one in Game 4.i.(j − 1) and we are in that game. If C’s
bit b is 1, then the resulting ﬁrst state was generated like st(cid:48)(cid:48)
and we are in Game 4.i.j. Since Π∗ is by Requirement 1
interactions, we get:
perfectly separated under hidden full
OutDistJ ,4.i.j = OutDistJ ,4.i.j−1 = OutDistJ ,0.
Let |st.G| =: m, then we deﬁne Game 4 := Game 4.m.0
and get: OutDistJ ,4 = OutDistJ ,3 = OutDistJ ,0.
In Game 5 we modify the left execution to perform the ar-
actions instead of the ch-actions. We do this on a per-group ba-
sis, with one sub-game per group. Let Game 5.0 := Game 4,
then for each group gri we deﬁne Game 5.i as follows:
Let n be the number of exp-segments in group gri. We
perform n sub-sub-games to connect these directly with each
other. Let Game 5.i.n = Game 5.(i − 1).0 and Game 5.1.n =
Game 5.0 and note that we again count
the last variable
downwards.
Let st be the state that results from executing the last
instruction of the j − 1’th exp-segment of gr or the empty
state if no such state exists. Let st(cid:48) be the state before the ﬁrst
∗ be the instruction
instruction of the j’th exp-segment. Let il
list between st and st(cid:48) (→at the moment the game executes
ch). In Game 5.i.j we replace the st(cid:48) with st(cid:48)(cid:48) which we
il∗
∗
ar instead of il
deﬁne to be the result of executing il
To show that this replacement is sound, we initialize a state
disassociation challenger C and call it with st, il
∗(cid:48)
∗
ch, st, il
∗
ar
and gri, where il
ar, except that the types of
the ch- and ar-instructions are switched. We then replace st(cid:48)
with the state that C outputs. This replacement is sound as both
∗(cid:48)
ar is identical to il
∗
ch.
executable instruction lists contain a hidden full interaction by
the deﬁnition of the HFI-OfD game, both are consistent with
their starting states and result by construction in equivalent
states. If C’s bit b is 0, then the resulting state was generated
like the one in Game 5.i.(j − 1) and we are in that game. If
C’s bit b is 1, then the resulting state was generated like st(cid:48)(cid:48)
and we are in Game 5.i.j. Since Π∗ is by Requirement 1
interactions, we get:
perfectly separated under hidden full
OutDistJ ,5.i.j = OutDistJ ,5.i.j−1 = OutDistJ ,0.
Let |st.G| =: m, then we deﬁne Game 5 := Game 5.m.0
and get: OutDistJ ,5 = OutDistJ ,4 = OutDistJ ,0.
In Game 6 we extract secret keys from the ﬁnal public
epoch information PI e using extract sk (Algorithm 6). The
resulting secret keys are equivalent for the ﬁrst e− V epochs,
which are by assumption the only epochs in which secret keys
are used as a result of ch-statements.
To show that this replacement is sound, we use multiple
sub-games: Let Game 6.0 be equal to Game 5.
In Game 6.i we replace the i’th signature σ that
the
challenger has to generate with for the ch-transcript with a
simulated one. To do so we extract a secret key from the public
epoch information pinfoe of the signer and use extract sk (Al-
gorithm 6 to acquire a secret key that is equivalent to the real
one for the ﬁrst e− V epochs.) To show that this replacement
is sound, we initialize a deniability-challenger C (running at
regular time) against Σ and request a key-pair that we will use
for the party P issuing that signature instead of generating a
fresh it ourselves. Let m be the message that σ has to sign and
e(cid:48) the epoch in which it has to be generated. We give the tuple
(m, e(cid:48), V ) to C who will output a challenge-signature just in
time for its use in the protocol execution (as that execution
is delayed by V epochs). If C’s challenge-bit is 0, then the
signature is real and we are in Game 6.i − 1, otherwise it
is simulated and we are in Game 6.i. Since Σ offers perfect
deniability, distinguishing these cases is impossible and we get
OutDistJ ,6.i = OutDistJ ,6.(i−1) = OutDistJ ,0.
By deﬁning Game 6 := Game 6.n we therefore get
OutDistJ ,6 = OutDistJ ,5 = OutDistJ ,0.
the simulation at
In Game 7 we note that
this point
only uses the long-term public-keys PK , the public epoch-
informations of the last epoch PI e, the ch-instructions and the
partial groups states that precede them if they are preceded
by a non-ch-instruction in the group in question. The later
of these are exactly equivalent
to the simulation instruc-
tion based on the starting state and the overall instruction
list. By separating this part from the rest of the HFI-OfD-
challenger, we get exactly the simulation-algorithm S that we
deﬁned in Algorithm 9. This is just a conceptual change, so
OutDistJ ,7 = OutDistJ ,6 = OutDistJ ,0.
Finally, in Game 8 we note that the ﬁnal state that is given to
J is generated by running il ar. This means that this game is in
fact identical to the original HFI-OfD-game when b = 1. Since
this is again just a conceptual change we get OutDistJ ,8 =
OutDistJ ,7 = OutDistJ ,0.
From this we conclude that the distribution of J ’s outputs
in the HFI-OfD-game is independent of the value of b and that
Π∗ is therefore HFI-OfD-secure.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:37 UTC from IEEE Xplore.  Restrictions apply. 
1695