Again, this is perfectly legal code, but which version of the optMethod
method does it run? The answer is the version that most closely matches the
method call, so the code invokes the method that takes three parameters and
not the version that takes four. That makes good sense, so consider this one:
optMethod(1, fourth : 101);
In this code, the call to optMethod omits arguments for the second and
third parameters, but it specifies the fourth parameter by name. Only one
version of optMethod matches this call, so this is not a problem. This next
example will get you thinking, though:
optMethod(1, 2.5);
This time, neither version of the optMethod method exactly matches the
list of arguments provided. Both versions of the optMethod method have
optional parameters for the second, third, and fourth arguments. So, does this
statement call the version of optMethod that takes three parameters and use
the default value for the third parameter, or does it call the version of
optMethod that takes four parameters and use the default value for the third
Download from finelybook PI:EMAIL
163
and fourth parameters? The answer is that it does neither. This is an
unresolvable ambiguity, and the compiler does not let you compile the
application. The same situation arises with the same result if you try to call
the optMethod method, as shown in any of the following statements:
Click here to view code image
optMethod(1, third : "World");
optMethod(1);
optMethod(second : 2.5, first : 1);
In the final exercise in this chapter, you will revisit the DailyRate project
and practice implementing methods that take optional parameters and calling
them by using named arguments. You will also test common examples of
how the C# compiler resolves method calls that involve optional parameters
and named arguments.
Define and call a method that takes optional parameters
1. Using Visual Studio 2017, open the DailyRate solution, which is in the
\Microsoft Press\VCSBS\Chapter 3\DailyRate Using Optional
Parameters folder in your Documents folder.
2. In Solution Explorer, in the DailyRate project, double-click the file
Program.cs to display the code for the program in the Code and Text
Editor window.
This version of the application is empty apart from the Main method and
the skeleton version of the run method.
3. In the Program class, after the run method, add the calculateFee method
below the run method. This is the same version of the method that you
implemented in the previous set of exercises, except that it takes two
optional parameters with default values. The method also prints a
message indicating the version of the calculateFee method that was
called. (You will add overloaded implementations of this method in the
following steps.)
Click here to view code image
private double calculateFee(double dailyRate = 500.0, int
noOfDays = 1)
{
    Console.WriteLine("calculateFee using two optional
Download from finelybook PI:EMAIL
164
parameters");
    return dailyRate * noOfDays;
}
4. Add another implementation of the calculateFee method to the Program
class, as shown in the code below. This version takes one optional
parameter, called dailyRate, of type double. The body of the method
calculates and returns the fee for a single day only.
Click here to view code image
private double calculateFee(double dailyRate = 500.0)
{
    Console.WriteLine("calculateFee using one optional
parameter");
    int defaultNoOfDays = 1;
    return dailyRate * defaultNoOfDays;
}
5. Add a third implementation of the calculateFee method to the Program
class. This version takes no parameters and uses hardcoded values for
the daily rate and number of days.
Click here to view code image
private double calculateFee()
{
    Console.WriteLine("calculateFee using hardcoded values");
    double defaultDailyRate = 400.0;
    int defaultNoOfDays = 1;
    return defaultDailyRate * defaultNoOfDays;
}
6. At the Beginning of the run method, add the following statements in
bold that call calculateFee and display the results:
Click here to view code image
public void run()
{
    double fee = calculateFee();
    Console.WriteLine($"Fee is ");
}
Tip You can quickly view the definition of a method from the
Download from finelybook PI:EMAIL
165
statement that invokes it. To do so, right-click the method call and
then click Peek Definition. The following image shows the Peek
Definition window for the calculateFee method.
This feature is extremely useful if your code is split across
multiple files, or even if it is in the same file, but the file is very
long.
7. On the Debug menu, click Start Without Debugging to build and run the
program.
The program runs in a console window and displays the following
messages:
Click here to view code image
calculateFee using hardcoded values
Fee is 400
The run method called the version of calculateFee that takes no
parameters rather than either of the implementations that take optional
parameters because that version most closely matches the method call.
Press any key to close the console window and return to Visual Studio.
8. In the run method, modify the statement that calls calculateFee to match
the code shown in bold here:
Download from finelybook PI:EMAIL
166
Click here to view code image
public void run()
{
    double fee = calculateFee(650.0);
    Console.WriteLine($"Fee is ");
}
9. On the Debug menu, click Start Without Debugging to build and run the
program.
The program displays the following messages:
Click here to view code image
calculateFee using one optional parameter
Fee is 650
This time, the run method called the version of calculateFee that takes
one optional parameter. As before, this is the version that most closely
matches the method call.
Press any key to close the console window and return to Visual Studio.
10. In the run method, modify the statement that calls calculateFee again:
Click here to view code image
public void run()
{
    double fee = calculateFee(500.0, 3);
    Console.WriteLine($"Fee is ");
}
11. On the Debug menu, click Start Without Debugging to build and run the
program.
The program displays the following messages:
Click here to view code image
calculateFee using two optional parameters
Fee is 1500
As you might expect from the previous two cases, the run method called
the version of calculateFee that takes two optional parameters.
Press any key to close the console window and return to Visual Studio.
Download from finelybook PI:EMAIL
167
12. In the run method, modify the statement that calls calculateFee and
specify the dailyRate parameter by name:
Click here to view code image
public void run()
{
    double fee = calculateFee(dailyRate : 375.0);
    Console.WriteLine($"Fee is ");
}
13. On the Debug menu, click Start Without Debugging to build and run the
program.
The program displays the following messages:
Click here to view code image
calculateFee using one optional parameter
Fee is 375
As earlier, the run method calls the version of calculateFee that takes
one optional parameter. Changing the code to use a named argument
does not change the way in which the compiler resolves the method call
in this example.
Press any key to close the console window and return to Visual Studio.
14. In the run method, modify the statement that calls calculateFee and
specify the noOfDays parameter by name.
Click here to view code image
public void run()
{
    double fee = calculateFee(noOfDays : 4);
    Console.WriteLine($"Fee is ");
}
15. On the Debug menu, click Start Without Debugging to build and run the
program.
The program displays the following messages:
Click here to view code image
calculateFee using two optional parameters
Fee is 2000
Download from finelybook PI:EMAIL
168
This time, the run method called the version of calculateFee that takes
two optional parameters. The method call has omitted the first parameter
(dailyRate) and specified the second parameter by name. The version of
the calculateFee method that takes two optional parameters is the only
one that matches the call.
Press any key to close the console window and return to Visual Studio.
16. Modify the implementation of the calculateFee method that takes two
optional parameters. Change the name of the first parameter to
theDailyRate and update the return statement to match that shown in
bold in the following code:
Click here to view code image
private double calculateFee(double theDailyRate = 500.0, int
noOfDays = 1)
{
    Console.WriteLine("calculateFee using two optional
parameters");
    return theDailyRate * noOfDays;
}
17. In the run method, modify the statement that calls calculateFee and
specify the theDailyRate parameter by name.
Click here to view code image
public void run()
{
    double fee = calculateFee(theDailyRate : 375.0);
    Console.WriteLine("Fee is ");
}
18. On the Debug menu, click Start Without Debugging to build and run the
program.
The program displays the following messages:
Click here to view code image
calculateFee using two optional parameters
Fee is 375
The previous time that you specified the fee but not the daily rate (step
12), the run method called the version of calculateFee that takes one
optional parameter. This time, the run method called the version of
Download from finelybook PI:EMAIL
169
calculateFee that takes two optional parameters. In this case, using a
named argument has changed the way in which the compiler resolves
the method call. If you specify a named argument, the compiler
compares the argument name to the names of the parameters specified in
the method declarations and selects the method that has a parameter with
a matching name. If you had specified the argument as aDailyRate:
375.0 in the call to the calculateFee method, the program would have
failed to compile because no version of the method has a parameter that
matches this name.
Press any key to close the console window and return to Visual Studio.
Summary
In this chapter, you learned how to define methods to implement a named
block of code. You saw how to pass parameters into methods and how to
return data from methods. You also saw how to call a method, pass
arguments, and obtain a return value. You learned how to define overloaded
methods with different parameter lists, and you saw how the scope of a
variable determines where it can be accessed. Then, you used the Visual
Studio 2017 debugger to step through code as it runs. Finally, you learned
how to write methods that take optional parameters and how to call methods
by using named parameters.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 4, “Using decision statements.”
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Declare a
method
Write the method within a class. Specify the method
name, parameter list, and return type, followed by the
body of the method between braces. For example:
Click here to view code image
Download from finelybook PI:EMAIL
170
int addValues(int leftHandSide, int
rightHandSide) { ... }
Return a value
from within a
method
Write a return statement within the method. For example:
Click here to view code image
return leftHandSide + rightHandSide;
Return multiple
values from
within a
method
Write a return statement that returns a tuple. For example:
return (division, remainder);
Return from a
method before
the end of the
method
Write a return statement within the method. For example:
return;
Define an
expression-
bodied method
Use the => sequence followed by the expression that
defines the body of the method and a closing semicolon.
For example:
Click here to view code image
double calculateFee(double dailyRate, int noOfDays)
=> dailyRate * noOfDays;
Call a method
Write the name of the method followed by any arguments
between parentheses. For example:
addValues(39, 3);
Call a method
that returns a
tuple
Invoke the method as above, but assign the result to a set
of variables enclosed in parenthesis. There should be one
variable for each value of the tuple being returned. For
example:
Click here to view code image
int division, remainder; (division,
remainder) = divide(leftHandSide,
rightHandSide);
Use the
Right-click a call to the method, and then click Generate
Download from finelybook PI:EMAIL
171
Generate
Method Stub
Wizard
Method Stub.
Create a nested
method
Define the method within the body of another method. For
example:
Click here to view code image
long CalculateFactorial(string input)
{
    ...
    long factorial (int dataValue)
    {
        if (dataValue == 1)
        {
            return 1;
        }
        else
        {
            return dataValue * factorial(dataValue -
1);
        }
    }
    ...
}
Display the
Debug toolbar
On the View menu, point to Toolbars, and then click
Debug.
Step into a
method
On the Debug toolbar, click Step Into.
or
On the Debug menu, click Step Into.
Step out of a
method
On the Debug toolbar, click Step Out.
or
On the Debug menu, click Step Out.
Specify an
optional
parameter to a
method
Provide a default value for the parameter in the method
declaration. For example:
Click here to view code image
void optMethod(int first, double second = 0.0,
string third
= "Hello") { ... }
Pass a method
Specify the name of the parameter in the method call. For
Download from finelybook PI:EMAIL
172
argument as a
named
parameter
example:
Click here to view code image
optMethod(first : 100, third :
"World");
Download from finelybook PI:EMAIL
173
CHAPTER 4
Using decision statements
After completing this chapter, you will be able to:
Declare Boolean variables.
Use Boolean operators to create expressions whose outcome is either
true or false.
Write if statements to make decisions based on the result of a Boolean
expression.
Write switch statements to make more complex decisions.
Chapter 3, “Writing methods and applying scope,” shows how to group
related statements into methods. It also demonstrates how to use parameters
to pass information to a method and how to use return statements to pass
information out of a method. Dividing a program into a set of discrete
methods, each designed to perform a specific task or calculation, is a
necessary design strategy. Many programs need to solve large and complex
problems. Breaking up a program into methods helps you to understand these
problems and focus on how to solve them, one piece at a time.
The methods in Chapter 3 are very straightforward, with each statement
executing sequentially after the previous statement completes. However, to
solve many real-world problems, you also need to be able to write code that
selectively performs different actions and that takes different paths through a
method depending on the circumstances. In this chapter, you’ll learn how to
accomplish this task.
Download from finelybook PI:EMAIL
174
Declaring Boolean variables
In the world of C# programming (unlike in the real world), everything is
black or white, right or wrong, true or false. For example, if you create an
integer variable called x, assign the value 99 to it, and then ask whether x
contains the value 99, the answer is definitely true. If you ask if x is less than
10, the answer is definitely false. These are examples of Boolean expressions.
A Boolean expression always evaluates to true or false.
Note The answers to these questions are not necessarily definitive for
all other programming languages. An unassigned variable has an
undefined value, and you cannot, for example, say that it is definitely
less than 10. Issues such as this one are a common source of errors in C
and C++ programs. The Microsoft Visual C# compiler solves this
problem by ensuring that you always assign a value to a variable before
examining it. If you try to examine the contents of an unassigned
variable, your program will not compile.
Visual C# provides a data type called bool. A bool variable can hold one
of two values: true or false. For example, the following three statements
declare a bool variable called areYouReady, assign true to that variable, and
then write its value to the console:
Click here to view code image
bool areYouReady;
areYouReady = true;
Console.WriteLine(areYouReady); // writes True to the console
Using Boolean operators
A Boolean operator is an operator that performs a calculation whose result is
either true or false. C# has several very useful Boolean operators, the
simplest of which is the NOT operator, represented by the exclamation point
Download from finelybook PI:EMAIL
175
(!). The ! operator negates a Boolean value, yielding the opposite of that
value. In the preceding example, if the value of the variable areYouReady is
true, the value of the expression !areYouReady is false.
Understanding equality and relational operators
Two Boolean operators that you will frequently use are equality (==) and
inequality (!=). These are binary operators with which you can determine
whether one value is the same as another value of the same type, yielding a
Boolean result. The following table summarizes how these operators work,
using an int variable called age as an example.