Three different attack targets were checked: password, pred-
icate, and response. By assuming each predicate index is
used for t authentication sessions, the security was measured
in term of the cardinality of the attack set, i.e., the size
of the reduced target space, or the number of candidate
targets passing all
the observed authentication sessions.
Table II shows the results reported in [3]. By setting a
minimal security level for each possible attack, Bai et al.
also described how to get tmax, the maximal number of
authentication sessions a predicate index ˆI can be repeatedly
used. For the default setting of the basic PAS scheme, it was
claimed that tmax ≈ 1 so that the same password S can be
used for at least tmax · len = 10 times before renewal.
In [3] a usability study is also reported for a prototype
system with the default parameters and nr = 2, 3, 4, 5.
The average time consumed on deriving the predicates from
secrets was around 35 seconds, and that for each challenge
LIST OF PARAMETERS/NOTATIONS USED IN THE DESCRIPTION OF PAS.
Table I
Parameter Description
p The number of secrets in the password
len The number of characters in a secret word
H The set of all possible characters in a secret
H The size of H, i.e., the number of all possible
word
characters
l The number of challenge tables in a challenge
M = mn The number of cells in a challenge table
nr The number of challenges (rounds) in an
authentication session
k The number of cell indices in each secret Si
The number of sub-predicates in each predi-
cate Predi
Notation Description
S = (S1, . . . , Sp) The password shared between P and V
ci ∈ {1, . . . , M} The secret cell index in the i-th secret Si
Si = (ci, Wi) The i-th secret in the password S
Wi = wi[1] · · · wi[len] The secret word in the i-th secret Si, where
wi[1], . . . , wi[len] ∈ H
I ∈ Z+ The predicate index sent from V to P
ˆI = (I mod len) + 1 The predicate index modulo len
Pred = (Predi)p
i=1 The p-predicate vector used by P in an
authentication session
Predi = (ci, hi) The i-th predicate, where hi = wi[ ˆI]
Bi = bi[1] · · · bi[l] The hidden response corresponding to the i-
th predicate Predi
bi[j] = 1 (or 0) hi occurs (or does not occur) in the ci-th cell
of the j-th challenge table
t The number of authentication sessions a
predicate index can be used
round ranged from 8.37 to 10.5 seconds. When nr = 5, the
total login time for one authentication session was around
84 seconds on average. A survey on the upper bound of
the login time was also conducted, and more than half
of the participants chose 2 minutes. We will use these
statistical data to discuss the relationship between security
and usability of the PAS scheme.
IV. Security and Usability of PAS
First of all, the deﬁnitions of two of the three attacks in
[3] are problematic. In Table II, there are two “NA”-s for
brute force attack, and security against brute force attack is
the same as security against random guess attack. In fact,
according to the deﬁnitions given in [3], the brute force
attack and the random guess attack are actually the same
attack if the target is the password.
In our opinion, the brute force attack should be deﬁned as
exhaustively searching the whole password/predicate space
S to determine a subspace (i.e., an “attack set” according
to the term used in [3]) S∗ ⊆ S, which is composed of
all candidates of the password/predicate that pass all the
authentication sessions observed by a passive adversary. Ap-
parently, the correct password/predicate used by the human
prover P is always in the subspace S∗. When |S∗| = 1 or
212
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:53 UTC from IEEE Xplore.  Restrictions apply. 
THE SECURITY OF PAS AGAINST THREE DIFFERENT ATTACKS, REPORTED IN TABLE 1 OF [3].
Table II
Brute Force
Random Guess
SAT
(cid:18)
M
(cid:16)
Password
M pkH p·len
M pkH p·len
N(cid:17)len/k(cid:19)pk
1 − (1 − 1
M
(cid:16)
H p·len,
where N = pk(M H)pk/(2lnr t(k!)p)
Predicate
NA
(M H)pk/(k!)p
M(cid:0)1 − (1 − 1
M )N(cid:1)len/k
(cid:17)pk
H
/(k!)p
Response
NA
2lnr
NA
Table III
RE-EVALUATED SECURITY OF PAS AGAINST THREE ATTACKS.
(cid:0)1 +(cid:0)(cid:0)M H+k−1
(cid:1)p − 1(cid:1)(cid:14) 2lnr t(cid:1)
Password
1(cid:14)(cid:0)1/2lnr + (2lnr − 1)(cid:14)(cid:0)2lnr(cid:0)M H+k−1
(len−k)!
1 +(cid:0)(cid:0)M H+k−1
(cid:1)p(cid:1)(cid:1)  1 and gcd(M H, k) = 1. In this case, (M H)pk/(k!)p is
not an integer. To derive the correct value of N(p, k), note
the following fact: the number of distinct sub-predicates in
the i-th predicate ranges from 1 to k. Thus, we immediately
have N(p, k) = ((cid:0)M H
(cid:0)M H+k−1
(cid:1) + (cid:0)M H
(cid:1)p = ( (M H+k−1)···(M H)
(cid:1) + . . . + (cid:0)M H
)p ≥ (M H)pk/(k!)p.
(cid:1))p =
k
1
2
Although the value of N(p, k) was not overestimated,
k!
k
the inﬂuence of nr and t on the size of the attack set was
neglected in [3]. However, when the attacker tries to use a
randomly selected incorrect p-predicate vector to calculate
the response to each challenge, the probability of getting the
correct response is only 1/2l (under the assumption that the
calculated response has a uniform distribution). Assuming
that the responses to different challenges are independent
of each other,
the probability that a randomly selected
predicate will pass t observed authentication sessions will
be 1/2lnrt. Since there are one correct p-predicate vector
(cid:1)p−1 incorrect ones, with t observed authen-
(cid:17).
(cid:1)p − 1
tication sessions the average size of the attack set will be
1 +
2lnrt, which is much smaller than
the estimation reported in [3]. The computational complexity
of the brute force attack is still O
, since all
the possible predicates have to be checked one by one.
and(cid:0)M H+k−1
(cid:16)(cid:0)M H+k−1
(cid:16)(cid:0)M H+k−1
(cid:1)p(cid:17)
k
k
k
len!
B. Security against Brute Force Attack Target-
ing Password
When the target of brute force attack is the password
the password space is M pkH p·len,
S, [3] reports that
which is the number of all possible p-dimension vectors
(S1, . . . , Sp). However, due to the special design of the PAS
scheme, a password S can be equivalently represented as
(len−k)! distinct p-predicate vectors: Pred = (Predi)p
i=1,
where
is the number of all possible values of
the k-tuple predicate-index vector (ˆI1,len, . . . , ˆIk,len) and
Predi =
. Note
that any change in one predicate will not inﬂuence any
other predicates, so they are independent of each other.
As a result, the password space can be calculated as the
union of all the predicate spaces. Then, the size of the
(len−k)! , which may
be much smaller than M pkH p·len in case len > k and
H > len. For the default parameters, Table IV shows how
modiﬁed password space is(cid:0)M H+k−1
, wi[ˆI1,len]··· wi[ˆIk,len]
, . . . , ci, ˆIk,k
(len−k)!
(cid:1)p
ci, ˆI1,k
(cid:16)
(cid:17)
len!
len!
k
213
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:53 UTC from IEEE Xplore.  Restrictions apply. 
THE RATIO BETWEEN THE SIZE OF THE RE-REPRESENTED PASSWORD
SPACE AND THAT OF THE ORIGINAL PASSWORD SPACE.
Table IV
k
r
1
24.5
2
21.3
3
18.5
4
16
5
13.8
6
11.8
7
10.1
(cid:16)
M pkH p·len.(cid:16)(cid:0)M H+k−1
(cid:1)p
8
8.6
9
7.3
10
6.5
(cid:17)(cid:17)
k
len!
(len−k)!
the ratio r = log10
changes as k increases from 1 to len = 10. We can see
r is always much larger than 1, i.e., the size of the re-
represented password space is always much smaller than
M pkH p·len. This can be best demonstrated for the basic
PAS scheme. In this case, each password can be represented
as len independent predicates, and the password space is
reduced to (M H)p · len, which is smaller than M pH len·p
as long as H len·(p−1) > len. For the default parameters, the
password space is only (M H)p·len = (25×26)2·10 ≈ 222,
which is too small from a cryptographic point of view. Since
the cell index for each predicate is always the same, we can
separately store the p cell indices c1, . . . , cp and the len
p-character words {W ∗
j=1. Apparently,
this is just a reorganization of different parts of the password,
so no extra memory is needed.
j = w1[j]··· wp[j]}len
1 +
(cid:16)
(cid:17).
(cid:1)p − 1
(cid:16)(cid:0)M H+k−1
2lnrt(cid:17) len!
After representing the password space as the union of
(len−k)! predicate spaces, we can easily obtain the size of the
len!
attack set with t observed authentication sessions for each
predicate based on the result we obtained in the last subsec-
(len−k)! .
tion. That is
C. Security against Random Guess Attack
In random guess attack one does not need to try all
passwords/predicates/responses, but randomly pick one from
the password/predicate/response space and see if he can
pass the authentication session. For random guess attack,
there is no attack set, but we can use the reciprocal of the
success probability of passing the authentication session as
an equivalent metric of the security measurement.
When an attacker chooses a random response, the original
estimation in [3] is correct, since there are 2l possible
responses. But the attacker can get a higher success rate if he
chooses a random predicate/password. It is because the at-
tacker has a chance to guess the correct predicate/password,
which always leads to the correct response. For all the other
incorrect predicates, the success rate is the same as that of
randomly guessing the response. The overall success rate is
k
(cid:0)M H+k−1
1
(cid:1)p +
1 ·
k
(cid:0)M H+k−1
(cid:1)p − 1
(cid:0)M H+k−1
(cid:1)p =
(cid:1)p >
2lnr(cid:0)M H+k−1
2lnr − 1
k
k
k
1