secondary storage) in the early stage of the company.
3.1.2 Cloud Users
Many cloud users may upload their ﬁles to the cloud storage
and possibly remove their local copies. These users may
download ﬁles, which are uploaded by themselves, from
cloud storage. File sharing among users is not the focus
of this paper, although it can be achieved along with our
solution for encrypted data.
3.1.3 Adversaries
We consider two types of adversaries: Malicious outside
adversary and honest-but-curious Cloud server.
Malicious Outside Adversary. The outside adversary may
obtain some knowledge (e.g. a hash value) of the ﬁle of
interest via some channels, and plays a role of cloud user
to interact with the cloud server.
Semi-honest Inside Adversary (Honest-but-Curious Cloud
Server). This honest but curious cloud storage server (also
known as inside adversary) will maintain the integrity of
users’ ﬁles and availability of the cloud service, but is curi-
ous about users’ sensitive ﬁles. This could capture at least
the following cases in real world applications:
1. Some technical employee or even the owner of the cloud
tries to access user data due to some reason.
2. The company, which provide the cloud storage service,
made careless technical mistakes which may leak users’
private data, e.g. introducing a software bug. It is reported
that Dropbox [40] made users’ data open to public for al-
most 4 hours due a new software bug. Very recently, a bug
is discovered in one of Twitter’s ofﬁcial client software,
which allows attackers to access users’ accounts [37].
3. The cloud storage server is hacked in.
3.2 Syntax Deﬁnition
A Client-side Deduplication (called CSD for short) scheme
(E,D, P, V) consists of four PPT algorithms E, D, P and V,
which are explained as below:
• E(F, 1λ) → (τ, C0, C1): The probabilistic encoding al-
gorithm E takes as input a data ﬁle F and a security
parameter λ, and outputs a short secret per-ﬁle encryp-
tion key τ, a short encoding C0 which contains hash(F )
as a part, and a long encoding C1. C0 will be stored in
cloud server’s small and secure primary storage and C1
will be stored in cloud server’s large but potentially inse-
cure secondary storage. The lengths of τ and C0 should
be both in O(λ), and the length of C1 should be in
|F| + O(poly(λ)).
• D(τ, C1) → F : The deterministic decoding algorithm
takes as input a secret key τ and the long encoding C1,
and outputs a ﬁle F .
• (cid:104)P(F ),V(C0)(cid:105) → (y0; y1, y2): The prover algorithm P,
which takes a ﬁle F as input, interacts with the veriﬁer
algorithm V, which takes a short encoding C0 as input.
At the end of interaction, the prover algorithm P gets
output y0 ∈ {τ,⊥} and the veriﬁer algorithm V gets
output (y1, y2) where y1 ∈ {Accept, Reject} and y2 ∈
{hash(C1),⊥}.
We point out, the efﬁciency requirement in the above de-
scription follows Halevi et al. [20]. Such efﬁciency require-
ment excludes some straightforward secure methods: For ex-
ample, both prover and veriﬁer have access to the ﬁle F dur-
ing the interactive proof and compute a key-ed hash value
over F with a randomly chosen fresh nonce as hash key per
each proof session. Another negative example is Zheng et
al. [43] which turns a proof of storage scheme into a proof
of ownership scheme.
Deﬁnition 1 (Correctness). We say a CSD scheme (E,D,
(cid:104)P, V(cid:105)) is correct, if the following conditions hold with
overwhelming high probability (i.e. 1 − negl(λ)): For any
data ﬁle F ∈ {0, 1}∗ and any positive integer λ, and
(τ, C0, C1) := E(F, 1λ),
• D(τ, C1) = F .
• (cid:104)P(F ),V(C0)(cid:105) = (τ ; Accept, hash(C1)).
Here the hash value hash(C1) is required, in order to
defend poison attack. In case that the cloud does not have
plaintext of ﬁle F , the cloud storage server alone is not
able to decide whether a given tuple (hash(F ), C0, C1) is
consistent or inconsistent (i.e. poisoned).
3.3 Security Deﬁnition
In this subsection, we will propose a security formulation
for client-side deduplication. Our formulation will address
the protection of useful partial information (particularly any
physical bit F [i] in the sensitive ﬁle F ) from the malicious
outside adversary or the honest-but-curious cloud server:
Roughly speaking, PPT outside/inside adversary cannot
learn any new information on any physical bit F [i] of ﬁle
F from client-side deduplication process beyond the side
channel leakage.
A (ξ0, ξ1) between a PPT ad-
versary A and a challenger w.r.t. CSD scheme (E,D,(cid:104)P,V(cid:105))
is deﬁned as below, where ξ0 > ξ1 ≥ λ. Here ξ0 is the lower
bound of min-entropy of the challenged ﬁle F at the be-
The CSD security game GCSD
ginning of the game, and the adversary is allowed to learn at
most (ξ0−ξ1) bits information of ﬁle F from the challenger.
Setup. The description of (E,D,(cid:104)P,V(cid:105)) is made public. Let
F be sampled from any distribution over {0, 1}M with min-
entropy ≥ ξ0, where the public integer parameter M ≥ ξ0 is
polynomially bounded in λ. The challenger sends hash(F )
to the adversary A.
Learning-I. The adversary A can make a LEAK-QUERY in
the following form to the challenger:
• LEAK-QUERY(Func): This query consists of a PPT-
computable function Func. The challenger responses this
query by computing y := Func(F ) and sending y to the
adversary, where the bit-length of output y is required to
be smaller than (ξ0 − ξ1).
Commit. The adversary A chooses a subset of v indices
i1, . . . , iv from [1,|F|], where v ≥ 1 and v + |y| ≤ ξ0 − ξ1.
The challenger ﬁnds the subsequence α ∈ {0, 1}v of F ,
such that, for each j ∈ [1, v], α[j] = F [ij]. The challenger
chooses a random bit b ∈ {0, 1} and sets αb := α and
$←− {0, 1}v. The challenger sends (α0, α1) to the ad-
α1−b
versary A.
Guess-I. Let ViewCommitA
denote the view of the adver-
sary A at this moment. Given ViewCommitA
as input, an-
other PPT algorithm (called “extractor”) A∗ outputs a guess
bA∗ ∈ {0, 1} of value b.
Learning-II. The adversary A can adaptively make queries
to the challenger, where concurrent queries are not allowed10
and each query is in one of the following forms:
• ENCODE-QUERY: The challenger responses the ENCODE-
QUERY by running the probabilistic encoding algorithm
on F to generate (τ, C0, C1) := E(F, 1λ) and sending
(C0, C1) to the adversary. The adversary can make ex-
actly one query in this type.
• VERIFY-QUERY: The challenger, running the prover
algorithm P with input F ,
interacts with adversary
A which replaces the veriﬁer algorithm V, to obtain
(y0; y1, y2) := (cid:104)P(F ),A(cid:105). The adversary knows the
values of y1 and y2, and can make polynomially many
queries in this type.
• PROVE-QUERY: The challenger, running the veriﬁer al-
gorithm V with input C0, interacts with the adversary
A which replaces the prover algorithm P, to obtain
10 Similar to Halevi et al. [20], concurrent PROVE-QUERY and VERIFY-
QUERY will allow the adversary to replay messages back and forth be-
tween these two queries, and eliminate the possibility of any secure and
efﬁcient solution to client-side deduplication. Therefore, both this work and
Halevi et al. [20] do not allow concurrent queries of different types in the
security formulation. We clarify that, concurrent queries of the same type
can be supported. Thus, in the real application, the cloud storage server (ver-
iﬁer) can safely interact with multiple cloud users (prover) w.r.t. the same
ﬁle concurrently.
(y0; y1, y2) := (cid:104)A,V(C0)(cid:105). The adversary A knows the
value of y0, and can make polynomially many queries in
this type.
Guess-II. The adversary A outputs a guess bA ∈ {0, 1} of
value b.
Deﬁnition 2 (Secure CSD against inside/outside attack).
Let integer λ be the security parameter and ξ0 > ξ1 ≥ λ.
We say a CSD scheme (E,D,(cid:104)P,V(cid:105)) is (ξ0, ξ1)-secure, if
for any PPT (inside or outside) adversary A, there exists
some PPT extractor algorithm A∗, such that in the security
game GCSD
A (ξ0, ξ1),
(1)
(2)
Pr [A ﬁnds b in Guess-II phase ]
≤Pr [A∗ ﬁnds b in Guess-I phase ] + negl(λ).
Equivalently, the above Equation (1) can be written as
Pr [bA = b] ≤ Pr [bA∗ = b] + negl(λ).
Remarks on the security formulation.
• Our formulation (particularly, Equation (1) and (2) in
Deﬁnition 2) requires that Pr[bA = b] ≤ Pr[bA∗ = b] +
negl(λ), which means the adversary A essentially cannot
learn any new information on physical bits F [i1] . . . F [iv]
in ﬁle F during Learning-II phase. We emphasize that it
is important to ask some extractor A∗ instead of the ad-
versary A to make a guess bA∗ before Learning-II, to
exclude a trivial plausible attack: Adversary A intention-
ally outputs a random guess of b before Learning-II, and
outputs its maximum-likelihood of b after Learning-II,
in order to increase the difference between success prob-
ability in Guess-I and Guess-II. Note that this require-
ment follows the style of original deﬁnition of semantic
security (Deﬁnition 5.2.1 in Goldreich [18]).
• The adversary is allowed to obtain the long encoding C1
of users’ data ﬁle F in the above security game, since in
real applications, C1 is typically stored in the large but
potentially insecure secondary storage, as mentioned in
Section 3.1.1.
• A CSD scheme does not have any master secret key.
Therefore, the adversary A himself/herself can ﬁnd an-
swers to any queries (i.e. ENCODE-QUERY, VERIFY-
QUERY, PROVE-QUERY, and LEAK-QUERY, etc) w.r.t
any input ﬁle F (cid:48) that is owned by A, without help of the
challenger.
• If the long encoding C1 is obtained by encrypting ﬁle F
using the convergent encryption [14, 15], i.e. encrypting
the ﬁle F under AES method with some hash value
(cid:48)
(F ) as encryption key, then the adversary (i.e. the
hash
curious cloud server) will have both ciphertext C1 and
(cid:48)
decryption key hash
(F ), and thus obtain the ﬁle F ,
where
the ciphertext C1 is given by the challenger in the
security game;
(cid:48)
(F ) can be ob-
the convergent encryption key hash
tained by making a LEAK-QUERY in Learning-I
phase.
Therefore, convergent encryption is insecure in our secu-
rity game due to the bounded leakage setting. One may
argue that this was not a fair setting for convergent en-
cryption scheme, since leakage of encryption key will
render any encryption scheme insecure. However, if the
encryption key is chosen independent on the plaintext
(i.e. the ﬁle F ), then LEAK-QUERY in our setting will
be unable to reveal the encryption key. Thus the distinc-
tive feature of convergent encryption—deriving encryp-
tion key from plaintext—becomes a two-bladed-sword:
on one side, it makes deduplication of encrypted data
possible; on the other side, it becomes the security vul-
nerability in the higher level of security formulation. We
will give a more detailed comparison between convergent
encryption and our approach later in Section 4.3.
• For similar reasons as above,
the “hash-as-a-proof”
method is also insecure in our leakage setting. Therefore,
when the owner of ﬁle F does not understand well what
information of F has been leaked by other owners of the
same ﬁle, our scheme will be much more preferable than
the efﬁcient “hash-as-a-proof” method.
3.4 Comparison of two formulations: Proofs of
Ownership and Client-side Deduplication
In this subsection, we compare the formulation of PoW [20]
and our formulation of CSD. Recall that more details on
PoW is given in Section 2.
Both PoW [20] and CSD formulation aim to secure dedu-
plication mechanism in cloud storage service and protect the
conﬁdentiality of users’ data in the setting that a bounded
amount of information of users’ data has been leaked. How-
ever, the two formulations differ in both breadth and depth
of protection of conﬁdentiality of users’ data and also differ
in the leakage setting:
• Breadth: PoW only formulates the protection of conﬁ-
dentiality of users’ data from outside adversaries; CSD
formulation protects the conﬁdentiality of users’ data
from both outside adversaries and inside adversaries (i.e.
the honest-but-curious cloud storage server). In other
words, PoW formulation trusts the cloud storage server
in data conﬁdentiality, but CSD formulation doesn’t.
• Depth: PoW formulation only prevents attackers from
recovering the whole user ﬁle F and potentially allows
attackers to recover some partial unknown information
of F ; CSD gives a stronger formulation and prevents at-
tackers from recovering any unknown bits F [i], which
implies that the adversary cannot recover F . Here, we
make two clariﬁcations: (1) The nature of deduplication
problem inevitably provides adversaries a way to do brute
search for unknown information by observing whether
client-side deduplication occurs11, and thus make seman-
tic security impossible. Therefore, any solution to client-
side deduplication cannot achieve semantic security and
has to reveal some partial information. Our formulation
will protect an important type of partial information: the
physical bits F [i]’s in ﬁle F . (2) Although PoW formu-