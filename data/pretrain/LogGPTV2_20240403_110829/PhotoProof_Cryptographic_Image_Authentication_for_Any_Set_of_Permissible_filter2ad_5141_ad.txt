this construction PhotoProof (PP).
The layout of
the construction is as
follows. The
PhotoProof generator, given a maximal image size N, ﬁrst
translates the set of permissible transformations into a com-
pliance predicate Π, which, given two N-images (and some
261261
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:41 UTC from IEEE Xplore.  Restrictions apply. 
auxiliary input), checks whether the images represent a permis-
sible transformation’s input-output pair (for some parameters).
The generator also creates a digital signature key pair and calls
the PCD generator on the compliance predicate to create the
proof system; images are signed inside the camera, using the
secret signing key, and the prover and veriﬁer apply the PCD
prover and veriﬁer to generate/check proofs.
Formally, let (G
PCD) be a PCD system, and let
S = (G
S) be an existentially unforgeable digital signa-
ture scheme’s generation, signing and veriﬁcation algorithms.
, S
S
, P
, V
, V
PCD
PCD
S
Our PCD system will be deﬁned over messages of image
and public-key pairs, i.e., z = (I, p
S).
We ﬁrst deﬁne the following compliance predicate:
T
Algorithm 1 compliance predicate Π
Input: incoming and outgoing messages zin = (Iin, pin),
zout = (Iout, pout), an image transformation t and a
parameter string γ.
(zin, zout, t, γ)
Output: 0/1.
1: if zin = ⊥, t = ⊥ and γ is a digital signature then
3: if t ∈ T and t (Iin, γ) = Iout and pin = pout then
S (pout, Iout, γ)
return V
2:
return 1
4:
5: return 0
The compliance predicate deals with two situations. For
the base case, where there is no input image but only output
image, it veriﬁes the image’s signature using the given public
key.12 For any other case, it checks whether the transformation
between the input and the output image is indeed permissible
and also checks that the given public key is not changed.
The goal of including the public key in the message is for
allowing the ﬁnal veriﬁer, which knows the public key that
appears in the system’s verifying key, to be convinced that the
same public key was used for the signature veriﬁcation of the
original image. Another way of achieving this could have been
encoding the signature veriﬁcation key inside the compliance
T
pS ). The main drawback in doing so is
predicate (to yield Π
that the PCD keys become dependent in the signature keys,
which complicates the construction and its security proof.
We continue to deﬁne the main PhotoProof algorithms in
Algorithms 2–4.
12We implemented a slightly modiﬁed version due to efﬁciency considera-
tions, see Section V-F.
262262
Algorithm 2 PhotoProof generator G
Input: a maximal image size N and a security parameter λ.
Output: a proving key pk
PP and a
PP, a veriﬁcation key vk
PP
(cid:2)
1N , 1λ
(cid:3)
(cid:2)
signing key sk
PP.
S) ← G
1λ
, p
S
S
(cid:3)
1: (s
{generate a secret key and a public key of the signature
scheme}
T
2: generate an Fp-R1CS instance CN which computes Π
when applied on N-images.
PCD
3: (pk
, vk
PCD) ← G
{generate PCD keys}
||p
, vk
4: return (pk
PCD
PCD
S
(cid:3)
(cid:2)
CN , 1λ
||p
, s
PCD
S
S)
Algorithm 3 PhotoProof prover P
Input: a proving key pk
PP (pk
, Iin, πin, t, γ)
PP
PP, an N-image Iin, a proof πin, an
image transformation t and a parameter string γ.
S
PCD
PCD
S))
PCD (pk
PP as pk
Output: an edited image Iout and a proof πout.
||p
1: parse pk
2: if πin is a digital signature string then
,⊥,⊥, πin, (Iin, p
3:
in ← P
π(cid:2)
{“convert” the signature to PCD proof by calling the
PCD prover}
4: else
in ← πin
π(cid:2)
5:
6: Iout ← t (Iin, γ)
7: l ← (t, γ)
8: zin ← (Iin, p
S)
9: zout ← (Iout, p
S)
10: πout ← P
PCD (pk
11: return πout
, zin, π(cid:2)
in, l, zout)
PCD
PP (vk
, I, π)
PP
PP, an N-image I and a proof π.
PP as vk
Algorithm 4 PhotoProof veriﬁer V
Input: a veriﬁcation key vk
Output: 0/1.
1: parse vk
2: if π is a digital signature then
3:
4: if π is a PCD proof
PCD (vk
5:
6: return 0
then
, (I, p
return V
return V
, I, π)
||p
S (p
S) , π)
PCD
PCD
S
S
B. Proof of security
We now sketch the proof that PhotoProof fulﬁlls the
requisite properties.
Theorem 9. For any set of polynomial-time image trans-
formations T , and given PCD and an existentially un-
forgeable digital signature scheme, the corresponding PP =
(S, G
Proof sketch. In the following, recall that a PhotoProof proof
π may be of one of two types: a digital signature or a PCD
proof. We now prove the different properties.
PP) is an IA scheme for T .
, P
, V
PP
PP
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:41 UTC from IEEE Xplore.  Restrictions apply. 
S
PP
PP
PP
PCD
PCD
, p
, vk
, vk
, vk
S (sk
S (p
PCD’s and V
PP consists of a call to G
PP is essentially the sum of V
Succinctness.
This follows from the efﬁciency of digital
signatures and the succinctness property of PCD. The running
time of V
S’s running
time, both of which are Oλ (|I|) regardless of the predicate
T . G
S (which is polynomial in the
Π
T
security parameter λ), a generation of CN that computes Π
for N-images, which is polynomial in its worst-case running
time, and a call to G
PCD on the generated R1CS instance, which
from the PCD properties is quasilinear in the size of CN . P
essentially performs an efﬁcient transformation t ∈ T and runs
P
PCD at most twice, and thus also fulﬁlls the requirement.
Completeness.
Let e be a permissible provenance e =
(O, (u1, ..., un) , Γ) and a signature σ = S
, O). First
note that the correctness of S guarantees that V
, O, σ) = 1.
T
Hence, for every step of prove, the compliance predicate Π
is satisﬁed. PCD completeness then yields that every proof
generated inside prove will convince the PCD veriﬁer with
probability 1. Therefore the ﬁnal proof will also convince it
with probability 1.
Unforgeability. This property trivially holds for our construc-
tion. We need to show that knowing pk
PP does not help
an adversary attacking the signature scheme, except with a
negligible probability. Having pk
PP is the same as having
pk
S. The PCD keys are (randomly) generated inde-
pendently from the signature keys, and the signature scheme
is secure against adversaries with access to the public key and
some (key-independent) auxiliary input.
Proof-of-knowledge. Using the terminology of [7], we can
look at a provenance of an image as a distributed computation
transcript T, where transformations and parameter strings are
the nodes’ local data, and images are the messages on edges.
The IA proof-of-knowledge then follows from the PCD proof-
of-knowledge (PCD-PoK). Indeed, let A be a polynomial-
time adversary attacking the PhotoProof scheme. We need
to show a polynomial-time extractor E such that, whenever A
PP that some image I is authentic using a proof π,
convinces V
E produces the evidence (provenance e and signature σ) of
authenticity, i.e., Eq. 1 holds.
Using A, we construct A
PCD, an adversary attacking the PCD
scheme. Recall that PCD-PoK allows for the adversary and
the extractor to be given an additional auxiliary-input string
(chosen prior to key generation). Our A
PCD will interpret its
auxiliary input as a series of images with matching signatures
(Ii, σi)i, along with a matching public key pS, will run
, (Ii, σi)), and will then output the PCD
A (pk
message and a proof corresponding to A’s output. PCD-PoK
then guarantees that there is an extractor E
PCD such that (for
every N and large enough λ and every (polynomial-length)
auxiliary input a, the following holds:
||p
||p
, vk
PCD
PCD
PP
S
S
(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)
(pkPCD,vkPCD)←GPCD(CN ,1λ)
(z,π)←APCD(pkPCD,vkPCD,a)
T←EPCD(pkPCD,vkPCD,a)
⎤
⎥⎥⎥⎥⎦≤negl(λ)
⎡
⎢⎢⎢⎢⎣
Pr
VPCD(vkPCD,z,π)=1
out(T)(cid:6)=z or CN (T)=0
(4)
where out (T) denotes the last message of the transcript T,
and CN (T) returns 1 iff T is CN -compliant.
⎡
⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎣
⎡
⎢⎢⎢⎢⎢⎢⎢⎣
(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)
(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)
PP
PP
, sk
, vk
Note that the probability in Eq. 1 is over the generation of
(pk
PP), while in Eq. 4 it is only on the generation
of the PCD keys. However, PCD-PoK holds for every a,
(cid:2)
and in particular such a that is generated by ﬁrst generating
1λ
and choosing any r images I1, ..., Ir, and
(p
, I1))).
then taking a = (p
So the probability remains negligible even when adding the
generation of (p
PP) to the probability space, i.e., for every
(I1, .., Ir),
, I1)) , ..., (Ir, S
PP) ← G
, (I1, S
S (sk
S (sk
, sk
, sk
(cid:3)
PP