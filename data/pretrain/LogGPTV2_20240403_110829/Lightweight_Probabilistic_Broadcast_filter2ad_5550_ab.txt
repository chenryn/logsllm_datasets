scriptions which are present in the view after the ex- 
ecution of  this phase,  and subscriptions removed to 
respect the maximum size limit of view. Finally, subs 
is also truncated to respect the maximum size limit. 
111. 
The third phase consists in delivering to the applica- 
tion  notifications  whose  ids  have been  received  for 
the first time with  the last incoming gossip message. 
Multiple deliveries are  avoided  by  storing  all  iden- 
tifiers of  delivered notifications  in  eventlds, as pre- 
viously  outlined.  Delivered  notifications  are  at the 
same time eligible for being forwarded with the next 
gossip. 
Gossip sending.  Each process periodically (every T ms) 
generates  a  gossip message  - according  to  Section  3.2 - 
which  it  gossips  to  F  other  processes,  randomly  chosen 
among the  local  view  (view) (Figure  l(b)).  This  is  done 
even if  the process has not received  any new notifications 
since it  last  sent  a  gossip  message.  In  that  case,  gossip 
messages are solely used to exchange digests and maintain 
the views uniformly distributed.  The network thus experi- 
ences little fluctuations in terms of overall load due to gossip 
446 
- 
upon  RECEIVE (gossip) 
{ Phtrse  I ;  Updure view  and unSubs wirh unsubscriptions} 
for all unsub E gossip.unSubs do 
view t view \ {unsub} 
unSubs  +--  unSubs  U {unsub} 
while IunSubsl > lunSubs(,'do 
remove rundom elemenr,jrom unSubs 
(Phase 2;  Updtrte view with new ,dx~criprions} 
for all newSub  E gossip.subsA newSub # pi  do 
if newSub 
view then 
while Jviewl > 1 do 
view  +-  view U newsub, 
subs +- subs U newsub, 
I 
view - view \ {target} 
subs - subs U {target} 
while ]subs] > lsubslm do 
target  t rundom element in view 
remove rundom elenienr.fri~m subs 
{ Phtise 3: Updire events wirh new nor~ctirioris} 
for all e E  gossip.events do 
if e.id $2  eventlds then 
events  +-  events U {e} 
L P B - D E L I V E R ( ~ )  
cventlds +- eventlds U {e.id} 
for all e.id E gossip.eventlds do 
if e.id  $2  eventlds then 
{Retrieving the notifcotion} 
RETRIEVE(e) 
events  +-  events  U { e }  
LPB-DELIVER(e) 
eventlds e eventlds U {e.id} 
while leventldsl  > leventlds(,  do 
while leventsl > leventsl,  do 
remove oldesr elemenr ,from eventlds 
remove  rundoin e[ement,from events 
- 
(a) Gossip reception 
e v e n  T i n s  
gossip.subs t subs U {pz} 
gossip.unSubs - unSubs 
~ 
gossip.events  + events 
gossip.eventlds t eventlds 
choose F rutidom members targetl, ,.. targetp in view 
forallj E [I..F]do 
SEND(tXget,, gossip) 
events  t 0 
upon L PB -CAST( e )  
events  t events U {e} 
(b) Gossip emission 
Figure 1. lpbcast algorithm 
messages, as long as T and the number of processes inside 
n and remain unchanged, 
3.4.  Subscribing and Unsubscribing 
For presentation simplicity we have not reported the pro- 
cedures  for  subscribing/unsubscribing in  Figure  1 (a).  In 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:05:39 UTC from IEEE Xplore.  Restrictions apply. 
short, a process p ,  which  wants to subscribe must know a 
process p,  which  is already  in II. Process p, will  send  its 
subscription  to that process p.,  , which will  gossip that sub- 
scription  on behalf  of p,.  If  the  subscription of p ,  is  cor- 
rectly  received  and forwarded by  p,,  p ,  will  be  gradually 
added to the system.  Process p ,  will experience this by re- 
ceiving more and more gossip messages. Otherwise, a time- 
out will trigger the re-emission of the subscription request. 
Similarly, when unsubscribing, the process is gradually 
removed from local views. To avoid the situation where un- 
subscriptions remain in the system forever (since unSubs is 
not purged), there is a timestamp attached to every unsub- 
scription.  After a certain time, the unsubscription becomes 
obsolete.  It is  important to notice  that  this  scheme is  not 
applied to subscriptions:  these are continuously dispatched 
in order to ensure uniformly distributed views. 
Due to the evolving nature of  the membership scheme, 
failed processes are gradually removed from all the views 
in the system. 
4.  Analytical Evaluation 
This section presents a formal analysis of our lpbcast  al- 
gorithm. The goal is to show the impact of the size 1 of the 
individual views of processes both (1) on the latency of de- 
livery and (2) on the stability of our membership. The anal- 
ysis differs from the one proposed in  [4], precisely because 
our membership is not global and a same notification id  is 
not forwarded only a limited number of times (hops are not 
limited), and  can  be forwarde8 several times by  the same 
process  (repetitions are not  limited).  We first introduce  a 
set of assumptions without which the analysis becomes ex- 
tremely  tedious, but  which have only very  little impact  on 
its validity. 
4.1.  Assumptions 
For  our formal analysis we consider  a system II  com- 
posed of n processes, and we observe the propagation of a 
single event notification.  We assume that the composition 
of II does not vary during the run (consequently n is con- 
stant). According to the terminology  applied in epidemiol- 
ogy, a process which has delivered a given notification will 
be termed infected, otherwise susceptible. 
The stochastic analysis presented below is based on the 
assumption  that  processes  gossip  in  synchronous rounds, 
and there is an upper bound on the network latency which 
is smaller than a gossip period T .  T is furthermore constant 
and identical  for each process, just like the fanout F .  We 
assume furthermore that failures are stochastically indepen- 
dent.  The probability  of a message loss does not exceed a 
predefined  E  > 0, and the number  of process crashes in  a 
run  does not exceed f  l  
(3) 
4.3.  Gossip Rounds 
By  considering that the two parameters T  and E  are be- 
yond the limits of our influence, the determining factors ac- 
cording to the iinalysis are the fanout F  and of course the 
system size n. 
Fanout.  Figure 2 shows the relation between F  and the 
number  of  rounds it  takes to broadcast  an event to  a  sys- 
tem  composed of  n  =  125 processes.  The figure shows 
that  increasing the fanout decreases the number of  rounds 
necessary  to  infect all processes, but conveys also the fact 
that  the  gain  is not proportional.  In  fact,  with  a too high 
fanout, there will  be more redundant messages received by 
each process,  which  limits performance  (and  the  network 
would  also  drop  more).  Furthermore,  F  is  in  our  case 
tightly  bound,  since F  5  1  must always be ensured.  The 
goal  of  this  paper  however  is  not  to  focus  on  finding  the 
optimal value for F .  In the following simulations and mea- 
surements, the default value for the fanout will  be fixed to 
F  = 3.  The optimal  choice of  fanout value  is  discussed 
within a different context in [ 131 
#rounds 
Figure 2.  Analysis:  expected number  of  infected pro- 
cesses for a given round with different fanout values 
System size n.  The number of gossip rounds it takes to in- 
fect all processes intuitively depends on the number of pro- 
cesses in the system. Figure 3 presents the expected number 
of rounds necessary for different system sizes.  The figure 
conveys the  fact that the  number of rounds increases log- 
arithmically with  an  increasing  system size, as detailed in 
P I .  
(f  processes 
Figure 3. Analysis: expected number of rounds necessary 
to infect 99% of n, given,system size n 
View size 1.  According to Equation 2, the view size 1 does 
noi: impact the time  it takes for a notification  to reach ev- 
ery member.  This leads to the conclusion that, besides the 
condition F  5 1, the amount of knowledge concerning the 
membership  that each process maintains does not have an 
impact on  the  protocol  performance.  The expected  num- 
be:r of  rounds it takes to  infect the  entire  system depends 
on F ,  but not on 1.  This consequence derives directly from 
our assumption that the individual views are uniform.  The 
algorithm shown in Figure l(b) intuitively supports this hy- 
pothesis  by  two  properties, namely  (1) each  process peri- 
odically gossips, and (2) each process adds its own identity 
to each gossip message.  Based on experimental results, we 
will discuss the validity and impact of this assumption more 
in detail in Sections 5 and 6P 
4.4.  Partitioning 
One could derive that the view  size 1 can be chosen ar- 
bitrarily small (provided that the requirements with respect 
to F  are met), which  is rather dangerous, since with small 
values for 1 the probability of system partitioning increases. 
This occurs whenever there are two or more distinct sub- 
sets of processes in the system, in each of which no process 
knows about any process outside its partition. 
Probability  of  partitioning.  The creation  of  a multiple 
partition  can be  seen  as a recursive partitioning.  In  other 
terms, by  expressing an upper bound on the probability of 
creation of a partition  of size a  (i 2 1 + 1) inside the sys- 
tem, we include also the creation of more than two subsets. 
The probability 9(i, n, 1) of creation of a partition of size i 
inside a system of size n with a view size of 1 is given by: 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:05:39 UTC from IEEE Xplore.  Restrictions apply. 
It  can  easily  be  shown  that  Q(z,  n, 1 )   monotonically  de- 
creases  when  increasing  n or l .   Figure  4  depicts this  for 
n, by  fixing 1 to 3.  The fact that the membership becomes 
more  stable  with  an  increased  n can  be  intuitively repro- 
duced since, with a large system, membership information 
becomes more sparsely  distributed, and the probability  of 
having concentrated exclusive knowledge becomes vanish- 
ingly small. 
0 
5 
10 
20 
35 
15 
X  processes in the partition 
25 
30 
40 
45 
50 
Figure 4. Analysis: probability of partitioning in systems 
of different sizes 
In time.  According to our model, the distribution of mem- 
bership information in a certain round does not depend on 
the distribution in the previous round.  Thus we can define 
the  probability  that  there  is  no  partitioning  up  to  a  given 
round T  as: 
It  takes 
This  probability  decreases  very  slowly  with  T .  
N  1012 rounds  to  end  up  with  a  partitioned  system  with 
a probability of 0.9 with n = 50 and 1 = 3. 
A priori, it  is not possible to recover from such a parti- 
tion. To avoid this situation in practice, we elect a very lim- 
ited set of privileged processes, which are constantly known 
by  each  process.  They are  periodically  used  to  “normal- 
ize” the  views (and also  for bootstrapping).  Alternatively, 
we could use a set of dedicated processes to collaborate in 
keeping track of the total number of processes. 
5.  Practical Results 
In  this  section,  we  compare the  analytical  results  ob- 
tained in the previous section with ( I )  simulation results and 
(2) results collected  from measurements obtained with our 
actual  implementations.  In  short, the  results show a  very 
weak  dependency between  1  and  the  degree  of  reliability 
achieved by lpbcast, but we can neglect this dependency in 
a practical context. 
In  our  test  runs,  we  did  not  consider  retransmissions, 
that  is, once a process has received  the identifier  of a no- 
tification, the notification itself  is assumed to have been re- 
ceived. This has been done to comply with related work (in 
some cases it is sufficient for the application to know that it 
has missed some message(s), and in other cases, subsequent 
messages can replace the missed messages [ 161). 
5.1.  Simulation 
In  a  first  attempt  we  have  simulated  the  entire  system 
in  a  single  machine.  More  precisely,  we  have  simulated 
synchronous gossip rounds in  which  each process gossips 
once.  The results obtained  from these  simulations support 
the validity of our analysis. 
Number of gossip rounds.  As highlighted in the previous 
section, the total  number of processes  n has an  impact on 
the number of gossip rounds it takes to infect all processes. 
Figure 5(a) conveys the results obtained from our analysis 
by comparing them with  values obtained from simulation, 
showing a very good correlation. 
Impact of  1.  According to the  analysis presented  in  the 
previous section, the size 1 of the  individual  views  on the 
other hand has no impact on the number of gossip rounds it 
takes to infect every process in the system.  Figure 5(b) re- 