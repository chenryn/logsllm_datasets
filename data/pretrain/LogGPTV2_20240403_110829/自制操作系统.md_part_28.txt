与写入2560个“0”相比，速度快得可以用“一瞬间”来形容。
14
■■■■■
15
事情总是有两面性的，占用内存少，分配和释放内存速度快，现在看起来全是优点，但是实
际上也有缺点，首先是管理程序变复杂了。特别是将可用信息归纳到一起的处理，变得相当复杂。
16
还有一个缺点是，当可用空间被搞得零零散散，怎么都归纳不到一块儿时，会将1000条可用
图灵社区会员 metorm 专享 尊重版权
176 …… 第9天：内存管理
空间管理信息全部用完。虽然可以认为这几乎不会发生，但也不能保证绝对不能发生。这种情况
下，要么做一个更大的MEMMAN，要么就只能割舍掉小块内存。被割舍掉的这部分内存，虽然
实际上空着，但是却被误认为正在使用，而再也不能使用。
为了解决这一问题，实际上操作系统想尽了各种办法。有一种办法是，暂时先割舍掉，当
memman有空余时，再对使用中的内存进行检查，将割舍掉的那部分内容再捡回来。还有一种方
法是，如果可用内存太零碎了，就自动切换到之前那种管理方法。
那么，我们的“纸娃娃系统”（haribote OS）会采用什么办法呢？笔者经过斟酌，采用了这
样一种做法，即“割舍掉的东西，只要以后还能找回来，就暂时不去管它。”。如果我们陷在这个
问题上不能自拔，花上好几天时间，大家就会厌烦的。笔者还是希望大家能开开心心心地开发“纸
娃娃系统”。而且万一出了问题，到时候我们再回过头来重新修正内存管理程序也可以。
■■■■■
根据这种思路，笔者首先创建了以下程序。
本次的bootpack.c节选
#define MEMMAN_FREES 4090 /* 大约是32KB*/
struct FREEINFO { /* 可用信息 */
unsigned int addr, size;
};
struct MEMMAN { /* 内存管理 */
int frees, maxfrees, lostsize, losts;
struct FREEINFO free[MEMMAN_FREES];
};
void memman_init(struct MEMMAN *man)
{
man->frees = 0; /* 可用信息数目 */
man->maxfrees = 0; /* 用于观察可用状况：frees的最大值 */
man->lostsize = 0; /* 释放失败的内存的大小总和 */
man->losts = 0; /* 释放失败次数 */
return;
}
unsigned int memman_total(struct MEMMAN *man)
/* 报告空余内存大小的合计 */
{
unsigned int i, t = 0;
for (i = 0; i frees; i++) {
t += man->free[i].size;
}
return t;
}
图灵社区会员 metorm 专享 尊重版权
4 挑战内存管理（harib06d） …… 177
unsigned int memman_alloc(struct MEMMAN *man, unsigned int size) 1
/* 分配 */
{
unsigned int i, a;
2
for (i = 0; i frees; i++) {
if (man->free[i].size >= size) {
/* 找到了足够大的内存 */
a = man->free[i].addr; 3
man->free[i].addr += size;
man->free[i].size -= size;
if (man->free[i].size == 0) {
4
/* 如果free[i]变成了0，就减掉一条可用信息 */
man->frees--;
for (; i frees; i++) {
man->free[i] = man->free[i + 1]; /* 代入结构体 */ 5
}
}
return a;
6
}
}
return 0; /* 没有可用空间 */
} 7
一开始的struct MEMMAN，只有1000组的话，可能不够。所以，我们创建了4000组，留出
8
不少余量。这样一来，管理空间大约是32KB。其中还有变量 maxfrees、lostsize、losts等，这些变
量与管理本身没有关系，不用在意它们。如果特别想了解的话，可以看看函数memman_init的注
释，里面有介绍。 9
函数memman_init对memman进行了初始化，设定为空。主要工作，是将frees设为0，而其他
的都是附属性设定。这里的init，是initialize（初始化）的缩写。 9
函数memman_total用来计算可用内存的合计大小并返回。笔者觉得有这个功能应该很方便，
所以就创建了这么一个函数。原理很简单，不用解释大家也会明白。total这个英文单词，是“合 11
计”的意思。
最后的memman_alloc函数，功能是分配指定大小的内存。除了free[i].size变为0时的处理以外 12
的部分，在前面已经说过了。alloc是英文allocate（分配）的缩写。在编程中，需要分配内存空间
时，常常会使用allocate这个词。
13
memman_alloc函数中free[i].size等于0的处理，与FIFO缓冲区的处理方法很相似，要进行移位
处理。希望大家注意以下写法：
14
man->free[i].addr = man->free[i+1].addr；
man->free[i].size = man->free[i+1].size；
15
我们在这里将其归纳为了：
man->free[i] = man->free[i+1]； 16
图灵社区会员 metorm 专享 尊重版权
178 …… 第9天：内存管理
这种方法被称为结构体赋值，其使用方法如上所示，可以写成简单的形式。
■■■■■
释放内存函数，也就是往memman里追加可用内存信息的函数，稍微有点复杂。
本次的bootpack.c节选
int memman_free(struct MEMMAN *man, unsigned int addr, unsigned int size)
/* 释放 */
{
int i, j;
/* 为便于归纳内存，将free[]按照addr的顺序排列 */
/* 所以，先决定应该放在哪里 */
for (i = 0; i frees; i++) {
if (man->free[i].addr > addr) {
break;
}
}
/* free[i - 1].addr  0) {
/* 前面有可用内存 */
if (man->free[i - 1].addr + man->free[i - 1].size == addr) {
/* 可以与前面的可用内存归纳到一起 */
man->free[i - 1].size += size;
if (i frees) {
/* 后面也有 */
if (addr + size == man->free[i].addr) {
/* 也可以与后面的可用内存归纳到一起 */
man->free[i - 1].size += man->free[i].size;
/* man->free[i]删除 */
/* free[i]变成0后归纳到前面去 */
man->frees--;
for (; i frees; i++) {
man->free[i] = man->free[i + 1]; /* 结构体赋值 */
}
}
}
return 0; /* 成功完成 */
}
}
/* 不能与前面的可用空间归纳到一起 */
if (i frees) {
/* 后面还有 */
if (addr + size == man->free[i].addr) {
/* 可以与后面的内容归纳到一起 */
man->free[i].addr = addr;
man->free[i].size += size;
return 0; /* 成功完成 */
}
}
图灵社区会员 metorm 专享 尊重版权
4 挑战内存管理（harib06d） …… 179
/* 既不能与前面归纳到一起，也不能与后面归纳到一起 */ 1
if (man->frees frees; j > i; j--) {
2
man->free[j] = man->free[j - 1];
}
man->frees++;
if (man->maxfrees frees) { 3
man->maxfrees = man->frees; /* 更新最大值 */
}
man->free[i].addr = addr;
4
man->free[i].size = size;
return 0; /* 成功完成 */
}
/* 不能往后移动 */ 5
man->losts++;
man->lostsize += size;
return -1; /* 失败 */
6
}
程序太长了，用文字来描述不易于理解，所以笔者在程序里加了注释。如果理解了以前讲解
7
的原理，现在只要细细读一读程序，大家肯定能看懂。
另外，我们前面已经说过，如果可用信息表满了，就按照舍去之后带来损失最小的原则进行
8
割舍。但是在这个程序里，我们并没有对损失程度进行比较，而是舍去了刚刚进来的可用信息，
这只是为了图个方便。
9
■■■■■
9
最后，将这个程序应用于HariMain，结果就变成了下面这样。写着“（中略）”的部分，笔者
没做修改。
11
本次的bootpack.c节选
#define MEMMAN_ADDR 0x003c0000
12
void HariMain(void)
{
（中略）
13
unsigned int memtotal;
struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
（中略）
memtotal = memtest(0x00400000, 0xbfffffff); 14
memman_init(memman);
memman_free(memman, 0x00001000, 0x0009e000); /* 0x00001000 - 0x0009efff */
memman_free(memman, 0x00400000, memtotal - 0x00400000);
15
（中略）
sprintf(s, "memory %dMB free : %dKB",
memtotal / (1024 * 1024), memman_total(memman) / 1024);
putfonts8_asc(binfo->vram, binfo->scrnx, 0, 32, COL8_FFFFFF, s); 16
图灵社区会员 metorm 专享 尊重版权
180 …… 第9天：内存管理
memman需要32KB，我们暂时决定使用自0x003c0000开始的32KB（0x00300000号地址以后，
今后的程序即使有所增加，预计也不会到达0x003c0000，所以我们使用这一数值），然后计算内
存总量memtotal，将现在不用的内存以0x1000个字节为单位注册到memman里。最后，显示出合
计可用内存容量。在QEMU上执行时，有时会注册成632KB和28MB。632+28672=29304，所以屏
幕上会显示出29304KB。
那好，运行一下“make run”看看。哦，运行正常。今天已经很晚了，我们明天继续吧。
图灵社区会员 metorm 专享 尊重版权
第 10 天
叠加处理
 内存管理（续）（harib07a）
 叠加处理（harib07b）
 提高叠加处理速度（1）（harib07c）
 提高叠加处理速度（2）（harib07d）
11 内存管理（续）（harib07a）
得益于昨天的努力，我们终于可以进行内存管理了。不过仔细一看会注意到，bootpack.c都
已经有254行了。笔者感觉这段程序太长了，决定整理一下，分出一部分到memory.c中去。（整理
中）……好了，整理完了。现在bootpack.c变成95行了。
为了以后使用起来更加方便，我们还是把这些内存管理函数再整理一下。memman_alloc和
memman_free能够以1字节为单位进行内存管理，这种方式虽然不错，但是有一点不足——在反
复进行内存分配和内存释放之后，内存中就会出现很多不连续的小段未使用空间，这样就会把
man>frees消耗殆尽。
因此，我们要编写一些总是以0x1000字节为单位进行内存分配和释放的函数，它们会把指定
的内存大小按0x1000字节为单位向上舍入（ roundup），而之所以要以0x1000字节为单位，是因为
笔者觉得这个数比较规整。另外，0x1000字节的大小正好是4KB。
本次的*memory.c节选
unsigned int memman_alloc_4k(struct MEMMAN *man, unsigned int size)
{
unsigned int a;
size = (size + 0xfff) & 0xfffff000;
a = memman_alloc(man, size);
return a;
图灵社区会员 metorm 专享 尊重版权
182 …… 第10天：叠加处理
}
int memman_free_4k(struct MEMMAN *man, unsigned int addr, unsigned int size)
{
int i;
size = (size + 0xfff) & 0xfffff000;
i = memman_free(man, addr, size);
return i;
}
■■■■■
下面我们来看看这次增加的部分，这里的关键是向上舍入，可是如果上来就讲向上舍入的话
可能不太好懂，所以我们还是先从向下舍入（round down）讲起吧。