protection is used. To identify a difference between responses,
it compares the number of broadcast messages, the message
origins, and the message content. The message content
is
compared using the Jaro string distance [44] to account for
small session-speciﬁc or user-speciﬁc differences.
CSSPropRead. Another XS-Leak leverages SD-URLs that
return different CSS rules for different states. To identify the
differences, the attack page is designed to contain elements
affected by the differing rules and to check the inherited style
rules. Some attack instances in this class were previously
known [26], [35]. This class complements the OP-LinkSheet
and OP-LinkSheetStatusError classes, which can differentiate
between CSS and non-CSS responses.
JSError. When a SD-URL returns different JavaScript ﬁles,
where one contains a JS error and the other does not, this
difference can be detected using the window.onerror() callback
function. The original attack instance used window.onerror()
to read the line number and the type of JS error triggered [33].
But, since Cross-Site Script Inclusion (XSSI) attacks [32], [63]
abused the verbosity of window.onerror(), popular browsers
no longer return the error line. However, we ﬁnd the attack
still works by comparing the number of errors triggered.
This class complements EF-StatusErrorIFrame, which allows
differentiating JS and non-JS responses.
JSObjectRead. Another XS-Leak for differentiating responses
that contain JS ﬁles checks the presence or absence of certain
readable objects in the included JS. The original attack in-
stance checked for global variables [32], but later attacks also
leveraged techniques such as prototype tampering and global
API redeﬁnition [50].
CSPViolation. When a SD-URL redirects visitors to the same
origin in a state and to a different origin in another state, this
difference can be detected using a Content Security Policy
(CSP). The attacker conﬁgures its attack site with a CSP
policy for the attack page that states that any attempt to load
a resource from an origin different than the attack site should
send a violation report back to the attack site. This method
was originally proposed for leaking sensitive information in the
CSP report (e.g., in the path and subdomain) [40]. Browsers
then removed the path information from CSP reports, but the
attack still works by focusing on whether the CSP violation
report is received (redirection to different origin) or not (redi-
rection to same origin).
AppCacheError. When a SD-URL returns a success status
code (2xx) in one state and a redirection (3xx) or error (4xx,
5xx) in another, this difference can be detected through the
browser’s AppCache [9]. The attack page uses the manifest
attribute of the html tag to refer to an AppCache manifest ﬁle,
which includes the SD-URL in the list of URLs that should
be cached. This forces the browser to request the SD-URL.
If the SD-URL returns a success status code, an AppCache
cached event is triggered. If the SD-URL returns a redirection
or error, an AppCache error event is triggered instead. Lee
et al. [47] ﬁrst presented this attack showing that it affected
ﬁve browsers. However, this XS-Leak currently only works in
Chromium-based browsers because Firefox and Edge no longer
allow cross-origin URLs to be cached using AppCache.
Timing. Multiple works have shown that timing differences
when a resource is requested from different states can be used
to distinguish those states [21], [27], [31], [56], [64]. Those
works focus on acquiring accurate timing information resistant
to changes in network conditions. We have incorporated into
Basta-COSI the ability to gather accurate timing information
using the video parsing leak in [64].
IV. BASTA-COSI
We have designed and implemented Basta-COSI, a tool
for assisting a security analyst in identifying, and generating
evidence of, COSI attacks in a target site. Basta-COSI focuses
on the COSI attack preparation phase. It takes as input a target
site, a set of state scripts deﬁning states in the target site, and
the attack classes identiﬁed in Section III. It outputs attack
pages, which can be used by a security analyst for demon-
7
Fig. 1: Basta-COSI architecture.
strating the existence of complex COSI attacks, involving more
than two states and supporting multiple browsers.
Setup. Basta-COSI needs network access to the target site,
which may be a local
installation of an open-source web
application (e.g., GitLab, HotCRP) or a remote web site (e.g.,
linkedin.com, facebook.com). The analyst needs to be able
to create user accounts in the target site. Those accounts
should cover different account types and should be populated
with content, e.g., ﬁlling the user proﬁle, creating a blog,
adding blog entries. For example, to test the open source
HotCRP conference management system, the analyst prepares
a local installation by creating a test conference and ﬁve user
accounts: administrator, two authors, and two reviewers. Then,
he submits a paper using each of the author accounts. Finally,
it assigns the paper submitted by the ﬁrst author to the ﬁrst
reviewer and the paper submitted by the second author to the
second reviewer.
Once the target site is conﬁgured,
the analyst creates
state scripts that can be executed to automatically load a
speciﬁc state at a web browser, i.e., to log into the tested
web application using one of the created accounts or to log
out of an account. Basta-COSI currently supports state scripts
written using the Python Selenium WebDriver [6]. The web
browser to be used is an argument to the state script. In our
HotCRP example, the analyst creates six state scripts. The
ﬁrst ﬁve scripts open a web browser, visit the login page, and
authenticate using one of the created accounts. The last script
logs in and then logs out to capture the logged out state.
Architecture. The architecture of Basta-COSI is shown in
Figure 1. It takes as input the state scripts, a set of browsers,
the conﬁgured target site, and a target state. It outputs an attack
page that leaks if a victim is in the target state at the target site.
Basta-COSI comprises of three modules: URL data collection,
attack vector identiﬁcation, and attack page generation.
The URL data collection module crawls the target site to
discover URLs. It visits each discovered URL to collect its
response when visited from a speciﬁc state with a speciﬁc
browser. And, it compares the responses to the same URL
obtained from different states to identify SD-URLs that may
be candidates to be used in attack pages.
Next,
the attack vector identiﬁcation checks if any of
the SD-URLs can be attacked using the known COSI attack
classes. When needed, it visits each SD-URL using a set of
inclusion vectors to collect browser events that can only be
8
obtained with a speciﬁc inclusion method (e.g., postMessages),
or that cannot be easily obtained statically from the HTTP(S)
responses (e.g., JS errors, readable JS objects). For each SD-
URL that matches an attack class, it outputs an attack vector.
Finally, the attack page generation module builds an attack
page that enables identifying if the victim is in the target state
at the target site. The generated attack page may combine
multiple attack vectors to uniquely distinguish the target state
and to support multiple browsers. Attack pages for different
target states can be created by re-running the attack page
generation module, without re-running the previous modules.
A. URL Data Collection
The URL data collection module performs three main
tasks: crawling to discover URLs, collecting the responses for
each URL when visited from a speciﬁc state with a speciﬁc
browser, and identifying SD-URLs. The module is built on
top of the Spider crawler for OWASP ZAP [5]. The crawling
considers a URL to be part of the target site if it satisﬁes at
least one of three constraints: it is hosted at the target site
domain, it redirects to a URL hosted at the target site domain,
or it is part of a redirection chain involving a URL satisfying
any of the above two criterion.
Each discovered URL is visited from each input state and
using each input browser. Before visiting a URL, a state script
is executed to load the corresponding state in the browser.
The state scripts also allow collecting URLs only accessible
from authenticated states. Currently, Basta-COSI supports the
three most popular browsers: Chrome, Firefox, and Edge.
For each browser, it supports the latest version at the time
we started the implementation: Google Chrome 71.0.3578.98,
Mozilla Firefox 65.0.1, and Microsoft Edge 42.17134.1.0. The
module has a ﬂexible design that allows adding support for
other browsers and browser versions. For each triplet (URL,
browser, state), it stores the full response (headers and body)
received from the server. URLs that return the same response
in each state are not state-dependent and thus cannot be used
in a COSI attack. To identify if a URL is state-dependent, a
similarity function is used that compares responses ignoring
non-deterministic ﬁelds such as the Date header or CSRF
tokens that may differ in each response. URLs that return the
same response (minus non-deterministic ﬁelds) in every state
are not state-dependent, and can be discarded.
To illustrate the tool we use our HotCRP running example
with only three state scripts: Reviewer1 (R1), Reviewer2 (R2),
and LoggedOut (LO). The goal of the analyst is to ﬁnd a COSI
attack that reveals the reviewer of a speciﬁc paper. In this
scenario, the tester can ignore the administrator and author
accounts since an attacker (typically an author) would only
send emails with the attack page URL to the (non-chair) PC
members. The three identiﬁed URLs in our running example
are shown in Table IV. Each table entry shows the response
for the URL when visited from a speciﬁc state. For simplicity,
each response is summarized as a tuple of 4 ﬁeld values: Status
Code (sc), Content-Type (ct), X-Frame-Options (xfo), and X-
Content-Type-Options (xcto). The URL /images/pdffx.png is
not a SD-URL since it returns the same response in all states.
Thus, it will be removed at this step. The other two URLs are
state-dependent since for each of them there exists at least one
pair of states whose responses are different.
URL
/testconf/images/pdffx.png
/testconf/api.php/review?p=1
/testconf/ofﬂine.php?downloadForm=1
Response Received at Different States
Reviewer1 (R1)
sc = 200, ct = image/png, no
xfo, no xcto
sc = 200, ct = text/html, no
xfo, xcto = nosniff
sc = 200, ct = text/html, no
xfo, xcto = nosniff
Reviewer2 (R2)
sc = 200, ct = image/png, no
xfo, no xcto
sc = 403, ct = text/html, no
xfo, no xcto
sc = 200, ct = text/html, no
xfo, xcto = nosniff
Logged Out (LO)
sc = 200, ct = image/png, no
xfo, no xcto
sc = 200, ct = text/html, no
xfo, no xcto
sc = 200, ct = text/html, no
xfo, no xcto
TABLE IV: Examples of URLs collected from HotCRP from three states. For simplicity, the response is represented with only
a subset of 4 ﬁeld values: Status Code (sc), Content-Type (ct), X-Frame-Options (xfo), and X-Content-Type-Options (xcto).
B. Attack Vector Identiﬁcation
Algorithm 1: Attack vector selection
The goal of the attack vector identiﬁcation module is to
ﬁnd, among all the SD-URLs discovered, the ones for which
a matching attack class is known, and thus can be used to
generate attack vectors. Basta-COSI supports all attack classes
in Table VIII. Those attack classes can be split into two groups.
The ﬁrst (static) group are attack classes for which it can
be determined, using solely the collected logs of HTTP(S)
responses, if a SD-URL matches the class. This group includes
all classes that capture differences in HTTP headers such as
Status Code, Content-Type, or X-Frame-Options. The second
(dynamic) group are attack classes for which matching a SD-
URL requires data difﬁcult to obtain from the responses such
as JS errors, postMessages, and audio/video properties (e.g.,
width, height, duration). For this group, it is needed to visit
the SD-URL with different inclusion methods to collect the
missing data.
For each SD-URL and pair of states that return different
responses for that SD-URL, the module ﬁrst checks if there
exist any matching static attack classes. For efﬁciency, if two
different state pairs produce the same responses, there is no
need to query the attack classes for the second pair. We
illustrate this process using the SD-URLs in Table IV. For
api.php, the responses from (R1, R2) match two static attack
classes: EF-StatusErrorObject (for Firefox and Edge), EF-
StatusErrorLink (for Chrome). Similarly, the responses from
(R2, LO) match the same two static attack classes as (R1,
R2). Finally, the states (R1, LO) match the static attack classes
EF-XctoObject and EF-XctoScript. The process repeats with
the other SD-URL (offline.php). Since states R1 and R2
return the same response, (R1, R2) can be ignored. For states
(R1, LO), the attack classes EF-XctoObject and EF-XctoScript
match. Finally, for states (R2, LO) the responses are the same
as for (R1, LO) and there is no need to check them again.
In our example, all state pairs can be distinguished using
a static attack class. If that was not the case, the module
would collect additional information to check the dynamic
attack classes. For this, the SD-URL is included in a set of
data collection pages hosted at a test web server. Each page
uses an inclusion method from one of the dynamic classes
and collects the required dynamic data for the class (e.g., use
script to collect JS errors and JS readable objects). Each data
collection page is visited with each browser and from every
state that returns a unique response.
The attack vector identiﬁcation module outputs, for each
pair of states, a list of pairs (SD-URL, AttackClass) specifying
that an attack vector that uses the SD-URL and the attack class
can distinguish those two states for the browsers deﬁned by
the attack class.
inputs : Target state st, target browsers B, states S, attack vectors A
outputs: The list of selected attack vectors
1 outVectors ← [ ];
2 Sr ← S − st;
3 Ar ← filter(A, st);
4 Ar ← mergeStates(Ar);
5 P ← (si ∈ Sr, bj ∈ B);
6 while P (cid:54)= ∅, Ar (cid:54)= ∅, s > 0 do
V = score(Ar, P );
7
(s,a) ← (max(V),argmax(V));
8
if s > 0 then
9
10
11
12
13
14 end
15 return outVectors, P ;
end
outVectors.append(a);
P ← P - getCoveredPairs(a);
Ar ← Ar − a;
C. Attack Page Generation
Given a target state st and a set of target browsers B, the
goal of the attack page generation is to produce an attack page
that combines attack vectors to uniquely distinguish st from
the other states, when visited by a browser in B. The set of
target browsers should be equal to or a subset of the set of
browsers input to Basta-COSI. This process comprises of two
steps: attack vector selection and attack page construction.
Algorithm 1 details the attack vector selection. It selects,
among all attack vectors, the ones needed to distinguish the
target state when visited by a target browser. The algorithm
ﬁrst removes all attack vectors that do not include the target
state since they do not enable distinguishing st (Line 3). In our
HotCRP example, the target state is R1 and all attack vectors
for state pair (R2, LO) are removed. Then, it merges the states
of all remaining attack vectors with the same SD-URL and
attack class into a single attack vector that distinguishes St
from n ≥ 2 other states. In our example, the attack vectors
do not merge further. Next, it initializes a set P with all
pairs of states and browsers to be distinguished (Line 5). The
algorithm goes into a loop that at each iteration it identiﬁes
the attack vector that covers most remaining pairs in P (Lines
6-14). The loop iterates until all pairs have been covered, no
attack vectors remain, or the remaining attack vectors do not
allow distinguishing the remaining pairs. To select an attack
vector, a score function is used that assigns higher scores to
attack vectors that cover more pairs in P , penalizing attack
classes that may interfere with other vectors (Line 7). For
example, an EventsFired attack vector using the script tag
may trigger CSP violation reports that interfere with a CSP
policy for CSPViolation that targets script resources. If the
score is zero, the loop breaks as the remaining attack vectors
do not allow distinguishing the remaining pairs. Otherwise, the
9
selected attack vector is appended to the output (Line 10), the
newly covered pairs are removed from P (Line 11), and the
attack vector is removed from the available list (Line 12).
In our example, the ﬁrst loop iteration selects the attack
vector ({LO}, offline.php, EF-XctoObject) as it covers
three pairs, differentiating the logout state for Chrome, Firefox
and Edge. The next loop iteration selects the attack vector
({R2}, api.php, EF-StatusErrorObject) as it covers two
other pairs, differentiating all remaining states for Firefox and
Edge. Finally, the last iteration chooses ({R2}, api.php,
EF-StatusErrorLink) which covers the remaining state for
Chrome. At that point, no more pairs remain to be covered,
and the algorithm outputs the selected attack vectors. The
algorithm also outputs the pair set P . If empty, the attack page
distinguishes the target state from all other states for all target
browsers. Otherwise, some states may not be distinguishable
for some target browsers.
For each attack class, the attack page generation module
has a template to implement the attack. For each selected
attack vector, it chooses one inclusion method in the attack
class, and applies the corresponding template with the SD-
URL. All instantiated templates are integrated into the output
attack page.
V. ETHICS
Our experiments do not target any real user of the live
sites. All testing on live sites is restricted to user accounts
that we created on those sites exclusively for this purpose.
The process of validating that the attacks found on open-
source web applications work on live installations of those
applications is similarly restricted to accounts owned by the
authors. The impact on live sites is limited to receiving a few
thousand requests for valid resources in the site. We take two
actions to limit the load on live sites from our testing. First, we
spread the requests over time to avoid spike loads. Second, we
disable the timing XS-Leak in our experiments, which requires
sending hundreds, or even thousands, of requests per SD-URL,
generating the highest load.
We have disclosed our attacks to the four web applications,
receiving conﬁrmation of the issues from HotCRP, GitLab,
and GitHub, while OpenCart has not replied. The disclosure
process for the web sites is ongoing. All reported attacks have
been conﬁrmed and some attacks have already been patched
(e.g., HotCRP, linkedin.com). We avoid providing SD-URLs
for attacks not yet patched. We have also reported our results
to the three browser vendors, as well as the Tor project.
We incorporate their feedback into our defenses discussion in
Section VII.
We acknowledge that publicly releasing Basta-COSI makes
it possible for attackers to misuse it to ﬁnd COSI attacks.
However, we argue that this applies to any penetration testing
and vulnerability discovery tool (open source or commercial).