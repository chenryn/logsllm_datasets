格的位次。
---
## Page 49
36
第1章种奇的SQL
DistrictProducts（每个地区的水果价格）
distnict (地区)
rame（商品名称）
price|价格
东北
橘子
100
东北
苹果
50
东北
葡萄
50
东北
柠檬
30
关东
柠檬
100
关东
菠梦
100
关东
苹果
100
关东
葡萄
70
关西
柠檬
70
关西
西瓜
30
关西
苹果
20
这里也与例题一样，按照价格由高到低的顺序进行排序，如果出现相
同位次，就跳过之后的位次，最后结果如下所示。这道题的重点是，给分
开后的几个部分排序，而不是对一整张表进行排序。
dietriet
price
rank_1
*****
东北
横子
100
东北
苹果
1
东北
葡萄
50
50
东北
柠檬
30
2
美东
柠檬
4
美东
拨萝
100
100
美东
草果
100
美东
美西
柠
70
美西
西感
70
30
美西
草果
20
2
解法还是有使用窗口函数和自连接这两种（如果把标量子查询与连接
结合起来的解法当成另一种，那就有3种解法）。请分别思考一下。
练习题1-2-3：更新位次
再练习一道与排序相关的题吧。假设有下面这样一张表DistrictProducts2，
里边原本就包含了“位次”列
图灵社区会员非洲钢(PI:EMAIL）专享尊重版权
---
## Page 50
12自连接的用法
37
DistrictProducts2
ict（地区）
ame【商品名称】
pnice[价格）
anking|位次
东北
橘子
100
东北
苹果
50
东北
葡萄
50
东北
柠檬
关东
柠檬
100
关东
菠萝
100
关东
苹果
100
关东
葡莓
70
关西
柠檬
70
关西
西瓜
30
关西
苹果
20
不过，“位次”列的初始值都是NULL。这里想让大家实现的是往这个
列里写入位次。这道题使用自连接来解答没有什么间题，但是如果使用窗
口函数，就需要突破一些小障碍。
图灵社区会员非洲钢(PI:EMAIL）专享尊重版权
---
## Page 51
38
第1章神奇的SQL
三值逻辑和NULL
SQL的温柔陷阱
大多数编程语言都是基于二值逻辑的，即逻辑真值只有真和假两个。而SQL语言则采用一种特别的
想不到的情况，这让程序员很是烦恼。本节，我们将通过理论和实例深入理解一下三值逻辑。
总之，数据库里只要存在一个NULL，查询的结果就可能不正确。而且，
一般没有办法确定具体是哪个查询返回了不正确的结果，所以所有的结果
看起来都很可疑。没有谁能保证一定能从包含NULL的数据库里查询出正
注0
确的结果。要我说，这种情况着实令人束手无策。
Batadase n Deptf: AeBatasei
heory for fractltianers, 0°RelTly
C.J. Date
应探素关系数据库：实践者的关
Ned,2005,中文液可参考(深
系理论)(电子工业出版社, 2007
年入 但在本书中。 涉及该书的
写在前面
引用文均为本书译者盈译，后文
不再说明，仅标注原书名。
大多数编程语言都包括布尔型（BOOL型、BOOLEAN型）这种数据类
编者注
型。当然，SQL语言里也有。SQL-99里将布尔型定义为可以由用户直接
操作的数据类型。此外，在WHERE子句等地方进行条件判断时也经常会
用到布尔型的运算。
然而，大家知道普通编程语言里的布尔型和SQL语言里的布尔型之
间有什么区别吗？普通语言里的布尔型只有true和false两个值，这种
逻辑体系被称为二值逻辑。而SQL语言里，除此之外还有第三个值
unknown，因此这种逻辑体系被称为三值逻辑（three-valued logic）。
那么，为什么SQL语言采用了三值逻辑呢？作为计算机基础的布尔
代数是二值逻辑的，我们在中小学里学的数学和逻辑学也是基于二值逻辑
的，关系模型理论基础之一的谓词逻辑也是二值逻辑的。在二值逻辑的应
用如此广泛的情况下，为什么关系数据库的世界特立独行，选择了三值逻
辑这样风格迥异的逻辑体系呢？
---
## Page 52
6N时耶三-I
间题的答案就在于NULL。关系数据库里引进了NULL，所以不得不同
时引进第三个值。这样的三值逻辑一次次地违背常识，深深地困扰着数据
库工程师们.
本节，我们将了解一下三值逻辑，并通过具体的代码学习一下哪些情
况需要格外留意。从标题可以看到，本节前半部分偏向于理论介绍，可能
会有些枯燥。如果大家对相关理论已经有了一定的了解，或者觉得通过看
具体示例更容易理解，也可以从后半部分的“实践篇”开始阅读，并根据
情况适当参考“理论篇”的相关内容。
理论篇
两种NULL、三值逻辑还是四值逻辑
说到三值逻辑，笔者认为话题应该从NULL开始，因为NULL正是产
生三值逻辑的“元凶”。
“两种NULL”这种说法大家可能会觉得很奇怪，因为SQL里只存在
一种NULL。然而在讨论NULL时，我们一般都会将它分成两种类型来思考。
因此这里先来介绍一些基础知识，即两种NULL之间的区别
0），（）
applicable,inapplicable）。以“不知道戴墨镜的人眼睛是什么颜色”这种情
况为例，这个人的眼睛肯定是有颜色的，但是如果他不摘掉眼镜，别人就
不知道他的眼睛是什么颜色。这就叫作未知。而“不知道冰箱的眼睛是什
么颜色”则属于“不适用”因为冰箱根本就没有眼睛，所以“眼睛的颜色”
这一属性并不适用于冰箱。
样，都是没有意义的。平时，我们习惯了说“不知道”，但是“不知道”
法知道”
关系模型的发明者E.F.Codd最先给出了这种分类。下图是他对“丢
失的信息”的分类。
---
## Page 53
●40
第1章种奇的 SQL
■关系数据库中“丢失的信息”的分类
买失的信息
无明登体
条件不域立的情况
条件不可能成立的情况
(non-evenis)
(inepplicable events)
Codd曾经认为应该严格地区分两种类型的NULL，并提倡在关系数据
注0
库中使用四值逻辑·。不知道是幸运还是不幸（笔者认为肯定是幸运），
当我知道Codid管经提过四值
还辑后，我的心情用度惊来形容
他的这个想法并没有得到广泛支持，现在所有的DBMS都将两种类型的
也毫不弯张。而没有一家数据率
广商对目值逐辑有兴趣这个销
NULL归为了一类并采用了三值逻辑。但是他的这种分类方法本身还是有
息。我处得对所有的数据库工程
师末说都是好消息。
很多优点的，因此后来依然有很多学者支持。
下面列出了因值逻胡的真恤表，
仅供@考。 DGBN 类型的 L
"0=业里70S.7
App1L ab1 类型的 IL 的真值
的 其 值 用 appL.5cable, If Wot
应该有不少人对上面这个标题里的问题感到困惑吧？相信刚学SQL
用 inapplicable 末表示。就算
这是关系模型祖师茶 Codd 博士
的时候，大部分人都有过这样的经历：写了下面这样的SQL语句来查询
的理论
也真心不能接受
XNOT?
某一列中值为NULL的行，结果却执行失败了。
-查询NULL时出错的 SQL 语句
SELSCT *
FBOM tb1_A
MHERE col_1 = MULL;
通过这条SQL语句，我们无法得到正确的结果。因为正确的写法是
col_1 IS NULL。这和刚学 C语言时写出的 if {hoge-0)的错误非常
相似。那么为什么用“=”去进行比较会失败呢？表示相等关系时用“=”，
这明明是我们在小学里就学过的常识。
这当然是有原因的。那就是，对NULL使用比较谓词后得到的结果总
是unknoMm。而查询结果只会包含wHERz子句里的判断结果为true的行，
不会包含判断结果为false和unknown 的行。不只是等号，对NuLL 使用
其他比较谓词，结果也都是一样的。所以无论col_1是不是NULL，比较
结果都是unknown
---
## Page 54
1-3三值逻辑和NULL
41@
-以下的式子都会被判为unkno
1 = MULL
2>
3  NULL
NULL = NULL
那么，为什么对NULL使用比较谓词后得到的结果永远不可能为真呢？
这是因为，NULL既不是值也不是变量。NULL只是一个表示“没有值”的
标记，而比较谓词只适用于值。因此，对并非值的NULL使用比较谓词本
注0
来就是没有意义的
可能有人会认为“难道L不
是值吗？怎么会不是呢！？你说
“列的值为NULL”“NULL值”这样的说法本身就是错误的。因为
廉。这里特意引用—下 Cod 和
的语我不相”为了使他们信
NULL不是值，所以不在定义域（domain）中。相反，如果有人认为NULL
C.J. Bate 请以示权成。
“我们先从定义一个表示“虽然
是值，那么笔者倒想请教一下：它是什么类型的值？关系数据库中存在的
丢失了，但却适用的值”的标记
值必然属于某种类型，比如字符型或数值型等。所以，假如NULL是值，
开始。 我们把它叫作 A-%rk。这
个标记在关系数据库里现不被当
那么它就必须属于某种类型。
Ivarlable I。 E,F. Codd, 7he
作值（ae）也不被当作变量