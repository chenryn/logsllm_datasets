for acceptors not in the quorum to do anything.
O3. Acceptors do not care what value is chosen. They
simply respond to “1a” and “2a” messages, using
their stable storage to ensure that, despite fail-
ures, only a single value can be chosen. However,
if an acceptor does learn what value has been cho-
sen, it can store the value in stable storage and
erase any other information it has saved there. If
the acceptor later receives a “1a” or “2a” message,
instead of performing its Phase1b or Phase2b ac-
tion, it can simply inform the leader of the chosen
value.
O4. Instead of sending the value v, the leader can send
a hash of v to some acceptors in its “2a” mes-
sages. (A hash is a function H from values to a
smaller set such that there is a negligible chance
that H (v) equals H (v(cid:1)) for two diﬀerent values
v and v(cid:1).) A learner will learn that v is cho-
sen if it receives “2b” messages for either v or its
hash from a quorum of acceptors, and at least
one of those messages contains v rather than its
hash. However, a leader could receive “1b” mes-
sages that tell it the hash of a value v that it must
use in its Phase2a action without telling it the ac-
tual value of v. If that happens, the leader cannot
execute its Phase2a action until it communicates
with some process that knows v.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:57 UTC from IEEE Xplore.  Restrictions apply. 
2.2 Implementing a State Machine
In the state machine approach, a set of servers execute
commands submitted by clients. For simplicity, we as-
sume that each server keeps in stable storage the entire
sequence of state machine commands that have been
chosen so far.
In many applications, a server would
keep only a recent checkpoint of the state machine’s
state and the commands after that checkpoint.
In the traditional Paxos algorithm, the clients are
the proposers and each server acts as an acceptor, a
learner, and a potential leader in each instance of the
consensus algorithm. A quorum consists of a majority
of the servers. The leader receives client commands,
assigns each one a number, and tries to get the i th
command to be chosen by the i th instance of the Paxos
consensus algorithm.
To understand how Static Paxos works, suppose the
system has been operating for a while when the leader
fails. A new server l is then selected to be leader. Since
l is a learner, it should know most of the commands
that have already been chosen. Suppose it knows com-
mands 1–134, 138, and 139—that is, the commands
chosen in instances 1–134, 138, and 139 of the consen-
sus algorithm. (Such a gap in its knowledge is possible
because multiple instances of the consensus algorithm
can be executed concurrently.) Server l chooses a bal-
lot number b that it believes to be greater than any
ballot number used by previous leaders.
(The elec-
tion algorithm can be used to choose b as well as l.)
It then simultaneously executes Phase1a(b, l) for in-
stances 135–137 and for all instances greater than 139
of the consensus algorithm, sending “1a” messages to
all the servers. (Some of those messages are to itself,
since the leader is chosen from among the servers.) It
can obviously send these inﬁnitely many virtual mes-
sages in a single physical message.
Each server then simultaneously executes Phase1b
actions in response to those virtual “1a” messages,
sending inﬁnitely many virtual “1b” messages back to l.
Since those “1b” messages contain information only for
instances for which actions have been performed, those
virtual messages will contain only a ﬁnite amount of
information that can usually be ﬁt into a single real
message. By observation O3 above, if a server knows
that a command was already chosen by some instance,
it responds with the chosen command rather than a
“1b” message for that instance.
137 and 140, respectively.
• For instance 136 and for all instances greater than
140, it can use any proposed command v in its
Phase2a(l , b) action.
Leader l then does the following:
• It performs Phase2a(l , b) actions for instances 137
and 140, using the commands v 137 and v 140 deter-
mined by the “1b” messages it received.
• It performs the Phase2a(l , b) action for instance
136, using as the command v a special no-op state
machine command that does nothing.
• In some manner that does not concern us, it en-
sures that all servers know commands 1–135, 138,
and 139.
If a majority of the servers are working, they will per-
form Phase2b actions for instances 136, 137, and 140,
and all servers will learn the commands chosen for
all instances 1–140 of the consensus algorithm. How-
ever, even before that has happened, leader l can re-
sume normal operation. It assigns the number 141 to
the ﬁrst client command it receives, and it executes
Phase2a(l , b) for instance 141 using that command as
the value v. It assigns number 142 to the next client
command and executes Phase2a(l , b) for that instance
and that command as value v. And so on.
Since each server is a learner, it learns the sequence
of chosen commands. In most applications, the leader
will act as the distinguished learner (mentioned in ob-
servation O1 above) to which “2b” messages are sent.
Once a server has learned what command the i th com-
mand is, it can delete all other information about the
i th instance of the consensus protocol from its storage.
When a failed server is repaired, it must be brought
up to date so it knows all the commands that have
already been chosen. In principle, this is a straightfor-
ward matter of having the newly repaired server ob-
tain the information from some working server.
If a
server maintains only recent commands and a check-
point of the state, then the repaired server must update
its saved checkpoint. If the state machine maintains a
large state, this must be done in such a way that only
the part of the state that has changed is sent to the
repaired server.
2.3 Dynamic Paxos
So far, we have described Static Paxos, in which the set
of acceptors and the quorums are constant and ﬁxed in
advance. A system that must continue working despite
the failure of any F processors then requires 2F + 1
servers. For example, with Static Paxos, it takes seven
Suppose that, from these messages, l learned:
• The command that was chosen in instance 135
(sent by some server instead of an instance 135
“1b” message).
• Commands v 137 and v 140 that it must use as the
value v in its Phase2a(l , b) actions for instances
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:57 UTC from IEEE Xplore.  Restrictions apply. 
servers to tolerate three failures. In many systems, the
best way to achieve the desired degree of fault tolerance
is to reconﬁgure the system to replace failed servers by
spares. With reconﬁguration, a system that uses three
active servers and two spares can tolerate a total of
three failures, if a failed server can be replaced by a
spare before another failure occurs. Reconﬁguration
therefore allows fewer processors to tolerate the same
total number of failures, though not the same number
of simultaneous failures. (In most systems, simultane-
ous failures are much less likely than successive ones.)
In Dynamic Paxos, the set of acceptors and the
quorums are determined by the state machine itself.
Reconﬁguration is performed by state machine com-
mands. To explain how this works, let state k be the
state machine’s state after executing command k. For
k ≤ 0, deﬁne state k to be the initial state. For some
ﬁxed constant α, we let the acceptors and quorums
used for instance i of the consensus algorithm be deter-
mined by state i − α. Before performing any action for
instance i, a leader waits until it knows state i − α. In
other words, a leader must wait until it knows all com-
mands through command number i −α before it knows
to which acceptors it should send its “2a” messages for
the i th instance of the Paxos consensus algorithm.
As a simple example of how this might work, con-
sider a system with a ﬁxed set S of processors that can
act as servers. Let the set of servers currently execut-
ing the system (and acting as acceptors) be G, and let
a quorum consist of a majority of the processors in G.
Suppose we want a processor to be declared to have
failed or have been repaired if a majority of the pro-
cessors in G believe it has. The state machine’s state
would contain the set G together with a Boolean ar-
ray good, where good[p, q] indicates whether processor
p believes processor q is nonfaulty, for all p, q ∈ S. A
processor r would issue a state machine command to
change the value of good[r , s] when it believes processor
s has failed or been repaired. Such a command would
set the new value good(cid:1) of the array good in the obvious
way, and it would set the new value G(cid:1) of G to equal the
set of all processors q ∈ S such that good(cid:1)[p, q] equals
true for a majority of processors p ∈ G.
(Remem-
ber that a change to G caused by command number i
takes eﬀect beginning with instance i + α of the Paxos
consensus algorithm.)
In practice, deciding when to reconﬁgure a system
is not easy. Replacing servers that have not failed can
cause the system to run out of servers; but not re-
placing a failed server lowers the system’s tolerance to
additional failures. One would probably not use so
naive an algorithm as the one just described. Instead,
one would use a more sophisticated algorithm, tuned
for the particular system. Any desired algorithm can
easily be implemented with the state machine.
When a new server is added to the system, it must
learn the current state machine state. This is essen-
tially the same problem as bringing a failed server up
to date, which is discussed in Section 2.2 above.
3 Cheap Paxos
3.1 The Algorithm
We now develop Cheap Paxos as an instance of Dy-
namic Paxos. In Cheap Paxos, we posit a system of
F + 1 main processors and F auxiliary processors. The
main processors act as the servers in a distributed state
machine implementation. The auxiliary processors per-
form actions only in the event of the failure of a main
processor, after which the main processors continue to
operate the system by themselves.
The key to Cheap Paxos is observation O2. In nor-
mal operation of the Paxos consensus algorithm, the
leader sends only “2a” messages. By O2, those mes-
sages need be sent to and acted upon by only a quo-
rum of acceptors. Hence, to implement Cheap Paxos,
we use Dynamic Paxos to conﬁgure the system so that
the set of all working main processors forms a quorum.
As long as these processors continue working, they can
execute the system. If one of them fails, then the quo-
rum consisting only of main processors can no longer
succeed in choosing commands. A diﬀerent quorum,
containing one or more auxiliary processors, is then
used to (i) complete the execution of any of the in-
stances of the Paxos consensus algorithm that were in
progress when the failure occurred, and (ii) propose
and choose the necessary state machine commands to
reconﬁgure the system. The reconﬁguration removes
the failed processor and modiﬁes the set of quorums so
the remaining main processors form a quorum. These
main processors can then resume executing the system,
while the auxiliary processors once more become idle.
Cheap Paxos uses Dynamic Paxos, where the set
G of all processors that are currently acceptors is de-
termined by the state machine state. Let M be the
subset of G consisting of all the main processors in
G. We want M to be a quorum. Since the only re-
quirement on quorums is that any two of them have
a non-empty intersection, we can let M be a quorum
and let the other quorums consist of all sets contain-
ing a majority of the processors in G and at least one
processor in M . (If M contains only a single processor
p, then a quorum can consist of any set containing p,
of course including M itself.) We require that G con-
tain at least one main processor—a condition that is
satisﬁed by any sensible reconﬁguration algorithm be-
cause failure of all main processors implies that there
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:57 UTC from IEEE Xplore.  Restrictions apply. 
is no quorum of working processors, so no state ma-
chine commands can be chosen until a main processor
is repaired. (A non-sensible reconﬁguration algorithm
could gratuitously remove the last working main pro-
cessor from G.)
In normal operation, the processors in M execute
phase 2 of successive instances of the Paxos consensus
algorithm to choose the sequence of state machine com-
mands. They can perform reconﬁguration commands
to add a repaired main server to G and M . However,
if a main processor fails, then there will no longer be
a working quorum consisting only of main processors.
The following sequence of steps is then performed.
1. If the failed processor was the leader, a new leader
is selected from among the processors in M that
are still working.
2. The leader interrogates the other working main
processors to learn all chosen commands that any
main processor knows about.
3. The leader completes the execution of any in-
stances of the Paxos consensus algorithm that
were in progress when the main processor failed,