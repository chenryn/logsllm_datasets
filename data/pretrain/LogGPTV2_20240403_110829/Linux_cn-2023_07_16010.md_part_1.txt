---
author: Amyjune Hineline
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 1906
date: '2023-07-18 14:56:00'
editorchoice: false
excerpt: 一些系统管理员、网页设计师、工程师和程序员分享了他们在命令行上经历的最可怕的经历。
fromurl: https://opensource.com/article/22/10/technology-horror-stories
id: 16010
islctt: true
largepic: /data/attachment/album/202307/18/145614vx7pqwwkkrsx6zxv.jpg
permalink: /article-16010-1.html
pic: /data/attachment/album/202307/18/145614vx7pqwwkkrsx6zxv.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 一些系统管理员、网页设计师、工程师和程序员分享了他们在命令行上经历的最可怕的经历。
tags: []
thumb: false
title: 20 个恐怖传说：在技术上犯过的最糟糕错误
titlepic: true
translator: ChatGPT
updated: '2023-07-18 14:56:00'
---
![](/data/attachment/album/202307/18/145614vx7pqwwkkrsx6zxv.jpg)
> 
> 一些系统管理员、网页设计师、工程师和程序员分享了他们在命令行上经历的最可怕的经历。
> 
> 
> 
每个开发人员内心最害怕的事情是什么？在你的代码开始运行前的宁静时刻，什么最让你感到恐怖？你见过或写过最可怕的代码是什么？
### 错误的权限
我负责一台服务器，然后我通过 FTP 上传了一些东西。显示了一些奇怪的东西，所以我想权限可能需要改变一下。
不用说，我愚蠢地关闭了读取权限并使网站瘫痪了。（当没有人能访问时，网站就没啥用了。）
我花了几个小时才修复好。这是很多年前我在一个机构担任唯一的网页开发人员时的事情。
— [Miriam Goldman](https://opensource.com/users/miriamgoldman)
### 混乱的 HTML
我曾经因 WordPress 的默认主题有可用的更新而使一个客户的网站瘫痪，这个客户当时是《华尔街日报》畅销书榜上的一位作者。
他的开发人员在主题中硬编码了 HTML，而不是创建一个子主题。而我运行了更新操作。
那个年代，人们不容易实现每晚备份，所以我花了几个小时打电话给托管提供商。像分阶段发布、子主题、每晚备份或手动备份这样的东西现在都很常见，还有自动更新和手动回滚的能力。但在那个时代并不常见。
— [Courtney Robertson](https://opensource.com/users/courtneyrdev)
### 密钥不再秘密
我想我们中的许多人在公共代码中看到过密钥。或者另一个经典案例：我的一个朋友从开发服务器向 10 万个用户发送电子邮件。
— [John E. Picozzi](https://opensource.com/users/johnpicozzi)
### Unix 混乱
这是一个 Unix 的故事。今天在 [Linux](https://opensource.com/tags/linux) 中已经修复了这个问题。
在我要向管理层进行一个重要的新组件演示的前一天，我需要更新我的代码（这是在 [Git](https://opensource.com/downloads/cheat-sheet-git) 存在之前的年代）。我进入我的主目录，找到项目目录，然后删掉了一切。不幸的是，在那个版本的 Unix 中，该命令会跟随符号链接进行删除，并且我有一个链接指向代码的最新版本（并不是所有代码都在源代码系统中，因为它还处于测试阶段）。
好在一天后，大楼里出现了网络问题，因此演示推迟了一天，我们设法恢复了代码。那是三十多年前的事情。即使现在我也不知道网络问题是巧合，还是我们的系统管理员试图帮助我们（如果是这样，那确实奏效了！）
— [Josh Salomon](https://opensource.com/users/joshs)
### 命令式编程
看到 CSS 文件中到处都是 `!important;` 而不是正确使用特异性。
我曾经不得不覆盖和定制一个 WordPress 主题几乎所有的 CSS，因为该网站的所有者坚持不换一个更接近他想要的设计的新主题。
那个主题开发者最后一次更新是在 2018 年，但网站至今仍在使用。
— [Christi Nickerson](http://cnickerson.com)
### 错误引用
在我以前的职位上，我的前任在代码注释中引用了 Journey 的《Any Way You Want It》歌词错误。
— [Ben Cotton](https://opensource.com/users/bcotton)
### Algol68 的幽灵
在上世纪 60 年代末到 70 年代初，Algol68 的复杂性使许多有影响力的人望而却步，包括 Niklaus Wirth 在内。我记得当时最常见的抱怨之一是：“谁能为这样一个复杂的怪物写一个编译器呢？” 但是事实上，许多人都开发过。此外，许多在 [Algol68](https://opensource.com/article/20/12/learn-algol-68) 中发展出来的或至少以形式化的概念出现在后来的其他语言中，尤其是在 C 语言和 Bourne shell 中（感谢 Steve Bourne）。
Algol68 的一些概念并没有经过很好的演化。例如，处理“书”和“章节”等的 I/O 概念在今天有些奇怪。像将字符集等问题留给实现本身处理似乎相当过时。
但是其中一些概念在今天仍然极为重要，例如产生值的表达式、强类型化（Algol68 中称为“模式”的类型）、[堆内存和垃圾回收](https://opensource.com/article/22/6/garbage-collection-java-virtual-machine)、运算符的定义和重载等等。
有好的地方，也有不好的地方。
Algol68 是一门值得学习的语言，即使只是为了了解现代计算中的许多想法的来源以及在路上丢失了多少。
— [Chris Hermansen](https://opensource.com/users/clhermansen)
### 密码暴露
我为一个新的支持客户进行技术审计时，发现之前的开发人员将密码以明文形式存储在整个主题中，并使用了糟糕的方式连接到远程数据库。他们的 composer 文件也异常庞大。每次我尝试在本地运行网站时，需要花费五分钟的时间。过时的依赖项、我无法访问的仓库，问题还有很多。
— [Miriam Goldman](https://opensource.com/users/miriamgoldman)
### 迷宫般的代码
我见过的最可怕的代码是一段 PDP-11 汇编语言，位于一个名为 RSTS 的操作系统的内核中，今天已经没有人记得它了。当时源代码记录在胶片上，我跟随这段代码路径经过几个转折，试图弄清楚正在发生的事情。然后，我遇到了这条指令：
```
MOV R5,PC
```
我举起双手尖叫了起来。真的，我尖叫了。办公室里的人以为我撞到头了，或者心脏病发作了。
那个年代，内存是宝贵的，`MOV` 指令使用的内存比 `BR`（即“分支”）指令稍微少一点。将寄存器 5 的内容复制到程序计数器实际上是一个廉价的无条件跳转，跳转到寄存器 5 中存储的地址。但是，我不知道寄存器 5 中存储了什么，也不知道如何找到它。
时至今日，将近 40 年过去了，我仍然想知道是谁写出这样的代码，以及如何调试它。
— [Greg Scott](https://opensource.com/users/greg-scott)
### 差一个
我在自动化行业工作，其中的可编程逻辑控制器（PLC）使用一些相当奇怪的语言进行编程。