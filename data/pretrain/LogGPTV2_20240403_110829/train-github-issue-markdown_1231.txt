### Problem Statement
Large applications often contain a significant number of custom directives in addition to custom components. To manage this complexity, it is logical to handle the loading of external definitions for both components and directives in a similar manner. Currently, the `Vue.directive` method has a signature that accepts a name and a binding or update function. To support asynchronous loading of directive definitions, an additional call signature, possibly with a third argument, is proposed.

### Proposed API
The proposed API would allow for the asynchronous loading of directive definitions by adding a third argument to the `Vue.directive` method. This third argument would be a function that takes `resolve` and `reject` as parameters, enabling the use of promises for loading the directive definition.

```javascript
Vue.directive("my-attribute", null, function(resolve, reject) {
  $.getScript("/vue/directives/my-attribute.directive.js")
    .then(resolve)
    .catch(reject);
});
```

In this example, the `$.getScript` method is used to load the directive definition from an external script. The `resolve` function is called when the script is successfully loaded, and the `reject` function is called if an error occurs.