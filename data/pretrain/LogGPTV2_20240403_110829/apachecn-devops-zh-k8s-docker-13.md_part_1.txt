# 十三、备份工作负载
意外和灾难时有发生，就像您在现实生活中可能有这些事件的保险一样，您也应该有集群和工作负载的保险。
大多数 Kubernetes 发行版都不包含任何用于备份工作负载的组件，但是开源社区和 Kasten 等公司的供应商支持的解决方案都提供了大量产品。
在本章中，您将了解 Velero，它可用于备份集群中的工作负载。我们将解释如何使用 Velero 来备份命名空间和计划备份作业，以及如何恢复工作负载。
在本章中，我们将涵盖以下主题:
*   了解 Kubernetes 备份
*   执行 etcd 备份
*   介绍和建立赫普西奥的韦莱罗
*   使用 Velero 备份工作负载
*   使用命令行界面管理 Velero
*   从备份恢复
# 技术要求
要执行本章中的动手实验，您将需要以下内容:
*   一个不可思议的群集的孩子
*   一台新的 Ubuntu 18.04 服务器，内存至少为 4 GB
您可以在以下 GitHub 存储库中访问本章的代码:[https://GitHub . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide)。
# 了解 Kubernetes 备份
备份 Kubernetes 集群不仅需要备份集群上运行的工作负载，还需要备份集群本身。请记住，集群状态是在 etcd 数据库中维护的，这使得它成为您需要备份以从任何灾难中恢复的一个非常重要的组件。
创建集群和正在运行的工作负载的备份允许您执行以下操作:
*   迁移集群。
*   从生产集群创建开发集群。
*   从灾难中恢复群集。
*   从永久卷恢复数据。
*   命名空间和部署恢复。
在本章中，我们将提供详细信息和工具来备份您的 etcd 数据库以及集群中的每个名称空间和对象。
重要说明
从企业中的完全灾难中恢复集群通常涉及为各种组件(如入口控制器、负载平衡器和应用编程接口服务器)备份自定义 SSL 证书。
因为备份所有定制组件的过程对于所有环境都是不同的，所以我们将重点关注大多数 Kubernetes 发行版中常见的过程。
如您所知，集群状态在 etcd 中维护，如果您丢失了所有 etcd 实例，您将丢失您的集群。在多节点控制平面中，至少有三个 etcd 实例，为集群提供冗余。如果您丢失了一个实例，集群将保持运行，您可以构建一个新的 etcd 实例并将其添加到集群中。一旦添加了新实例，它将收到 etcd 数据库的副本，您的集群将恢复完全冗余。
如果您在没有任何数据库备份的情况下丢失了所有的 etcd 服务器，您将丢失集群，包括集群状态本身和所有工作负载。由于 etcd 非常重要，`etcdctl`实用程序包括一个内置的备份功能。
# 执行 etcd 备份
由于我们正在为我们的 Kubernetes 集群使用 KinD，我们可以创建 etcd 数据库的备份，但是我们将无法恢复它。
我们的 etcd 服务器运行在名为`etcd-cluster01-control-plane`的集群上的一个 pod 中，该 pod 位于`kube-system`命名空间中。运行容器包括`etcdctl`实用程序，我们可以使用`kubectl`命令执行备份。
## 备份所需的证书
大多数 Kubernetes 装置将证书存储在`/etc/kuberetes/pki`中。在这方面，KinD 没有什么不同，所以我们可以使用`docker cp`命令备份我们的证书。让我们看看如何通过两个简单的步骤来实现这一点:
1.  首先，我们将创建一个目录来存储证书和 etcd 数据库。将您的目录更改为您克隆图书仓库的`chapter13`文件夹。在`chapter13`文件夹下，创建一个名为`backup`的目录，并将其作为当前路径:
    ```
    mkdir backup cd ./backup
    ```
2.  To back up the certificates located on the API server, use the following `docker cp` command:
    ```
    docker cp cluster01-control-plane:/etc/kubernetes/pki ./
    ```
    这将把控制平面节点上`pki`文件夹的内容复制到`chapter13/backup/pki`文件夹中新文件夹的`localhost`中。
下一步是创建 etcd 数据库的备份。
## 备份 etcd 数据库
要备份您的 KinD 集群上的 etcd 数据库，请执行以下步骤:
重要说明
较旧版本的`etcdctl`要求您使用`ETCDCTL_API=3`将应用编程接口版本设置为 3，因为它们默认为版本 2 应用编程接口。Etcd 3.4 将默认的 API 更改为 3，因此我们在使用`etcdctl`命令之前不需要设置该变量。
1.  备份 etcd 窗格中的数据库，并将其存储在容器的根文件夹中。使用`kubectl exec`，在 etcd 吊舱上运行一个外壳:
    ```
    kubectl exec -it etcd-cluster01-control-plane /bin/sh -n kube-system
    ```
2.  In the etcd pod, back up the etcd database using `etcdctl`:
    ```
    etcdctl snapshot save etcd-snapshot.db --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt --key=/etc/kubernetes/pki/etcd/healthcheck-client.key
    ```
    您将收到以下输出:
    ```
    {"level":"info","ts":1591637958.297016,"caller":"snapshot /v3_snapshot.go:110","msg":"created temporary db file","path":"etcd-snapshot.db.part"}
    {"level":"warn","ts":"2020-06-08T17:39:18.323Z","caller":"clientv3/retry_interceptor.go:116","msg":"retry stream intercept"}
    {"level":"info","ts":1591637958.3238735,"caller":"snapshot/v3_snapshot.go:121","msg":"fetching snapshot","endpoint":"https://127.0.0.1:2379"}
    {"level":"info","ts":1591637958.7283804,"caller":"snapshot/v3_snapshot.go:134","msg":"fetched snapshot","endpoint":"https://127.0.0.1:2379","took":0.431136053}
    Snapshot saved at etcd-snapshot.db
    {"level":"info","ts":1591637958.732125,"caller":"snapshot /v3_snapshot.go:143","msg":"saved","path":"etcd-snapshot.db"}
    ```
3.  离开 etcd 舱。
4.  将备份复制到您的本地机器:
    ```
    kubectl cp kube-system/etcd-cluster01-control-plane:etcd-snapshot.db ./etcd-snap-kind.db
    ```
5.  通过查看当前文件夹的内容确认复制成功:
    ```
    ls -la 
    ```
你应该看到`pki`目录和 etcd 备份，`etcd-snap-kind.db`。如果没有看到备份，请再次重复这些步骤，并观察输出中的任何错误。
当然，这个过程只备份 etcd 数据库一次。在现实世界中，您应该创建一个计划的进程，定期执行 etcd 的快照，并将备份文件存储在安全的位置。
注意
由于 KinD 运行控制平面的方式，我们无法使用本节中的恢复过程。我们提供了本节中的步骤，以便您知道如何在企业环境中恢复损坏的 etcd 数据库或节点。
# 介绍和解释赫普西奥的韦莱罗
Velero 是来自 Heptio 的 Kubernetes 的开源备份解决方案。它提供了许多仅在商业产品中可用的功能，包括调度、备份挂钩和精细备份控制，所有这些都是免费的。
虽然 Velero 是免费的，但它有一个学习曲线，因为它不像大多数商业产品那样包括易于使用的图形用户界面。Velero 中的所有操作都是使用它们的命令行实用程序来执行的，这是一个名为`velero`的可执行文件。这个单一的可执行文件允许您安装 Velero 服务器、创建备份、检查备份状态、恢复备份等等。由于每个管理操作都可以通过一个文件来完成，因此恢复集群的工作负载变得非常容易。在本章中，我们将创建第二个 KinD 集群，并用现有集群的备份填充它。
但在此之前，我们需要照顾几个要求。
## 韦莱罗要求
Velero 由几个组件组成创建一个备份系统:
*   **韦莱罗命令行界面**:这提供了韦莱罗组件的安装。它用于所有备份和恢复功能。
*   **韦莱罗服务器**:负责执行备份和恢复程序。
*   **存储提供商插件**:用于备份和恢复特定的存储系统。
除了基本的 Velero 组件之外，您还需要提供一个用于存储备份的对象存储位置。如果没有对象存储解决方案，可以部署 MinIO，这是一个提供 S3 兼容对象存储的开源项目。我们将在我们的 KinD 集群中部署 MinIO，以演示 Velero 提供的备份和恢复功能。
## 安装 Velero 命令行界面
部署 Velero 的第一步是下载最新的 Velero CLI 二进制文件。要安装命令行界面，请执行以下步骤:
1.  从 Velero 的 GitHub 存储库中下载版本:
    ```
    wget  https://github.com/vmware-tanzu/velero/releases/download/v1.4.0/velero-v1.4.0-linux-amd64.tar.gz
    ```
2.  提取档案内容:
    ```
    tar xvf velero-v1.4.0-linux-amd64.tar.gz
    ```
3.  将 Velero 二进制移动到`/usr/bin` :
    ```
    sudo mv velero-v1.4.0-linux-amd64/velero /usr/bin
    ```
4.  Verify that you can run the Velero CLI by checking the version:
    ```
    velero version
    ```
    您应该从 Velero 的输出中看到您正在运行 1.4.0 版:
![Figure 13.1 – Velero client version output ](img/Fig_13.1_B15514.jpg)
图 13.1–Velero 客户端版本输出
您可以放心地忽略最后一行，它显示了在查找 Velero 服务器时的错误。现在，我们只安装了 Velero 可执行文件，所以我们将在下一步安装服务器。
## 安装 Velero
Velero 的系统要求很少，大部分都很容易满足:
*   运行 1.10 或更高版本的 Kubernetes 集群
*   Velero 可执行文件
*   系统组件的映像
*   兼容的存储位置
*   卷快照插件(可选)
根据您的基础架构，您可能没有备份或快照卷的兼容位置。幸运的是，如果您没有兼容的存储系统，可以向集群中添加开源选项来满足要求。
在下一节中，我们将解释本机支持的存储选项，并且由于我们的示例将使用 KinD 集群，我们将安装开源选项来添加兼容的存储以用作备份位置。
### 备份存储位置
Velero 需要一个与 S3 兼容的存储桶来存储备份。有许多官方支持的系统，包括来自 AWS、Azure 和谷歌的所有对象存储产品。
除了官方支持的提供商之外，还有许多由社区和供应商支持的提供商，如 DigitalOcean、惠普和 Portworx。下表列出了所有当前的提供商:
重要说明
在下表中，**备份支持**栏表示插件提供了一个兼容的位置来存储 Velero 备份。卷快照支持意味着插件支持备份持久卷。
![Table 13.1 – Velero storage options ](img/Table_13.1.jpg)
表 13.1–Velero 存储选项
注意
Velero 的 AWS S3 驱动程序与许多第三方存储系统兼容，包括 EMC ECS、IBM Cloud、Oracle Cloud 和 MinIO。
如果您没有现有的对象存储解决方案，您可以部署开源的 S3 提供商 MinIO。
现在我们已经安装了 Velero 可执行文件，并且我们的 KinD 集群具有持久存储，这要归功于 Rancher 的自动资源调配器，我们可以继续讨论第一个要求——为 Velero 添加一个 S3 兼容的备份位置。
### 部署 mini
MinIO 是一个开源对象存储解决方案，与亚马逊的 S3 云服务 API 兼容。你可以在 https://github.com/minio/minio 的 GitHub 存储库中阅读更多关于 MinIO 的信息。
如果您使用来自互联网的清单安装 MinIO，在尝试将其用作备份位置之前，请确保验证部署中声明了哪些卷。网上很多例子都用`emptyDir: {}`，不是持久的。
我们在`chapter13`文件夹中包含了一个来自 Velero GitHub 存储库的修改过的 MinIO 部署。由于我们的群集上有持久存储，我们编辑了部署中的卷，以使用**持久卷声明** ( **PVCs** )，这将为 Velero 的数据和配置使用自动资源调配器。
要部署 MinIO 服务器，将目录更改为`chapter13`并执行`kubectl create`。该部署将在您的 KinD 集群上创建一个 Velero 命名空间、PVCs 和 MinIO: