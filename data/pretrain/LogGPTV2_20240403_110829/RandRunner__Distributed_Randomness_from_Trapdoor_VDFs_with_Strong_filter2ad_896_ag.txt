of veriﬁable delay functions in the random oracle model,” Cryptology
ePrint Archive, Report 2019/663, 2019.
[35] S. Micali, M. Rabin, and S. Vadhan, “Veriﬁable random functions,” in
40th annual symposium on foundations of computer science (cat. No.
99CB37039).
IEEE, 1999, pp. 120–130.
[36] R. Pass and E. Shi, “Hybrid consensus: Efﬁcient consensus in the
permissionless model,” in 31st International Symposium on Distributed
Computing (DISC 2017).
Schloss Dagstuhl-Leibniz-Zentrum fuer
Informatik, 2017.
[37] ——, “Thunderella: Blockchains with optimistic instant conﬁrmation,”
in Annual International Conference on the Theory and Applications of
Cryptographic Techniques. Springer, 2018, pp. 3–33.
[38] C. Pierrot and B. Wesolowski, “Malleability of the blockchain’s en-
tropy,” Cryptography and Communications, vol. 10, no. 1, pp. 211–233,
2018.
[39] K. Pietrzak, “Simple veriﬁable delay functions,” in 10th innovations in
theoretical computer science conference (itcs 2019). Schloss Dagstuhl-
Leibniz-Zentrum fuer Informatik, 2019.
[40] M. O. Rabin, “Randomized byzantine generals,” in Foundations of
IEEE, 1983,
Computer Science, 1983., 24th Annual Symposium on.
pp. 403–409.
[41] R. L. Rivest, A. Shamir, and D. A. Wagner, “Time-lock puzzles and
timed-release crypto,” 1996.
[42] P. Schindler, A. Judmayer, N. Stifter, and E. Weippl, “HydRand:
Efﬁcient continuous distributed randomness,” in 2020 IEEE Symposium
on Security and Privacy (SP).
IEEE, May 2020, pp. 32–48.
[43] P. Schindler, A. Judmayer, M. Mittmeir, N. Stifter, and E. Weippl,
“RandRunner Research Artifacts,” 2020. [Online]. Available: https:
//github.com/PhilippSchindler/RandRunner
[44] B. Shani, “A note on isogeny-based hybrid veriﬁable delay functions,”
Cryptology ePrint Archive, Report 2019/205, 2019.
[45] E. Syta, P. Jovanovic, E. K. Kogias, N. Gailly, L. Gasser, I. Khofﬁ, M. J.
Fischer, and B. Ford, “Scalable bias-resistant distributed randomness,”
in 2017 IEEE Symposium on Security and Privacy (SP).
IEEE, 2017,
pp. 444–460.
[46] B. Wesolowski, “Efﬁcient veriﬁable delay functions,” in Annual Inter-
national Conference on the Theory and Applications of Cryptographic
Techniques. Springer, 2019, pp. 379–407.
[47] M. Yin, D. Malkhi, M. K. Reiter, G. G. Gueta, and I. Abraham,
“Hotstuff: Bft consensus with linearity and responsiveness,” in 2019
ACM Symposium on Principles of Distributed Computing, 2019, pp.
347–356.
APPENDIX
A. Efﬁcient Check for (cid:104)x(cid:105) = QR+
N
At the end of Section II-F, we provided an efﬁcient way
N . In the following, we
to verify if x is a generator of QR+
provide the postponed correctness proof for the statement:
(cid:104)x(cid:105) = QR+
N if x ∈ QR+
N ∧ gcd(x2 − 1, N ) = 1 .
(18)
Proof: We show the above statement by deriving a contra-
N , i.e.,
diction. Assume that x does not generate the group QR+
(cid:104)x(cid:105) (cid:54)= QR+
N is not
N . This means that the order of x in QR+
(cid:48)
equal to p(cid:48)q(cid:48). One easily veriﬁes that we may write x = ap
mod N or x = aq
mod N for some a. This implies x2 = 1
mod p or x2 = 1 mod q, hence the gcd(x2 − 1, N ) in (18)
cannot be 1.
(cid:48)
B. Additional Simulation Results
As outlined in Sections IV and VI-D the selection of
the parameter ∆VDF , which determines the time parameter
T for the VDF, is crucial for the unpredictability guarantees
provided by RandRunner. In our simulation results presented
in the main paper, we considered setting ∆VDF such that
∆NET /∆VDF = 1/10, a choice which works well across a
wide range of scenarios. To further support the process of
picking a suitable value for ∆VDF , we provide additional
simulation results in Figures 4–7. As before, we run our
simulation over a period of 1010 rounds for each parameter
set and consider both types of adversaries, i.e., an attacker
which (i) does and (ii) does not want to hide its traces. We
ﬁx ∆NET = 1 and vary ∆VDF , as the simulation results only
depend on the relation ∆NET /∆VDF of the parameters ∆NET
and ∆VDF . In general, we observe that increasing ∆VDF
compared to ∆NET strengthens the protocol’s unpredictability
guarantee, while at the same time introducing longer delays
whenever a leader fails or withholds an output on purpose. The
bigger the adversarial strength, i.e., the fraction of adversarial
nodes pA and their advantage in computation speed compared
to the honest nodes α, the more important is it to select higher
values for ∆VDF . Regarding the covert adversary model we
analysed in Section VI-D5, Figure 8 further illustrates the
correspondence between the protocol parameters regarding the
security bound ∆NET < ∆VDF /α · pH (Inequality 17).
Fig. 4: RandRunner-RS’ unpredictability (α = 1, ∆NET = 1)
Fig. 5: RandRunner-RS’ unpredictability, considering a covert
adversary (α = 1, ∆NET = 1)
Fig. 6: RandRunner-RS’ unpredictab. (pA = 0.33, ∆NET = 1)
Fig. 7: RandRunner-RS’ unpredictability, considering a covert
adversary (pA = 0.66, ∆NET = 1)
C. Recovery from Asynchronous Network Conditions
We recall that RandRunner relies on network synchrony
to ensure the unpredictability guarantees described in Sec-
16
01020304050607080numberofroundstopredict10−610−510−410−310−210−1100probabilityofsuccessfulpredictionpA=0.25,∆VDF=5pA=0.25,∆VDF=10pA=0.25,∆VDF=20pA=0.33,∆VDF=5pA=0.33,∆VDF=10pA=0.33,∆VDF=20pA=0.41,∆VDF=5pA=0.41,∆VDF=10pA=0.41,∆VDF=2001020304050607080numberofroundstopredict10−610−510−410−310−210−1100probabilityofsuccessfulpredictionpA=0.50,∆VDF=5pA=0.50,∆VDF=10pA=0.50,∆VDF=20pA=0.66,∆VDF=5pA=0.66,∆VDF=10pA=0.66,∆VDF=20pA=0.75,∆VDF=5pA=0.75,∆VDF=10pA=0.75,∆VDF=2001020304050607080numberofroundstopredict10−610−510−410−310−210−1100probabilityofsuccessfulpredictionα=1.0,∆VDF=5α=1.0,∆VDF=10α=1.0,∆VDF=20α=1.25,∆VDF=5α=1.25,∆VDF=10α=1.25,∆VDF=2001020304050607080numberofroundstopredict10−610−510−410−310−210−1100probabilityofsuccessfulpredictionα=1.0,∆VDF=5α=1.0,∆VDF=10α=1.0,∆VDF=20α=1.5,∆VDF=5α=1.5,∆VDF=10α=1.5,∆VDF=20Fig. 8: RandRunner-RS’ unpredictability, considering a covert
adversary; showing relations of pA, α and ∆VDF (∆NET = 1)
tion VI-D. Therefore, during periods of asynchrony, i.e., in
situations in which correct nodes cannot disseminate message
within ∆NET seconds, the protocol’s unpredictability guaran-
tees are gradually weakened. However, by design, RandRunner
ensures liveness and consistency even during periods in which
correct nodes cannot communicate with each other at all.
During periods of asynchrony an adversary can increase its
advantage (in terms the of number of random beacon output it
can predict), whereas honest nodes catch up and RandRunner
regains its unpredictability guarantees quickly once network
connectivity is restored. In particular, this is the case when
we consider a perfectly coordinated adversary which is not
affected by the network delays or is itself responsible for
the asynchronous network conditions. Considering this worst
case, our simulation results in Figures 9 and 10 show how
quickly the original unpredictability guarantees are restored
after the network conditions normalize. We observe that the
recovery time required increases linearly with the duration
of the asynchronous period. Consequently, short periods of
asynchrony have very little effect on the provided guarantees,
whereas the protocol can still recover rather quickly even
from long-lasting asynchronous network conditions. We note
that
long-lasting asynchronous
periods in extremely unlikely circumstances. In any case, a
client using the produced random numbers is likely to notice
the problem due to the temporary slowdown of the protocol
and can consequently take appropriate countermeasures on the
application layer, e.g., it may require a longer delay prior to
the use of future outputs.
in practice we only expect
For our simulations we consider different parameterizations
of RandRunner-RS, vary the duration of network outages (in
multiples of the ∆NET parameter), and plot the mean time
until unpredictability guarantees are restored, with the standard
deviation highlighted. Concretely, we report the average recov-
ery time (y-axis) of 100000 simulation runs for each outage
duration (x-axis). In in each run, we simulate a network outage
for the given duration at a random point in time. Considering
the (theoretical) worst case, we assume that during the network
outage/attack correct nodes cannot communicate with each
other at all, yet the adversary can perfectly coordinate its
actions and does not mind being detected during the attack.
D. Comparison of Probabilistic Unpredictability Guarantees
We omitted to present simulation results for RandRunner-
RR in the main part of this paper, as we have provided a formal
Fig. 9: Mean time and standard deviation for
recovery
of RandRunner-RS’ unpredictability after a network outage
(∆NET /∆VDF = 1/10, α = 1.0)
Fig. 10: Mean time and standard deviation for recovery
of RandRunner-RS’ unpredictability after a network outage
(∆NET /∆VDF = 1/10, pA = 0.33)
proof for the provided unpredictability guarantees. However, in
addition to the bounds proven in Section VI-D, RandRunner-
RR also provides stochastic guarantees similar to RandRunner-
RS. In general, we observe that the probabilistic guarantees
of RandRunner-RR approach the guarantees RandRunner-RS
provides with an increasing number of participants n consid-
ering equivalent scenarios. In other words, the probabilistic
guarantees of RandRunner-RS give an upper bound for the
(stronger) guarantees of RandRunner-RR. This is further illus-
trated in Figure 11, which also highlights RandRunner-RR’s
proven absolute bound of d = 8 rounds for the given example
with n = 24, f = 8 nodes.
Fig. 11: Comparison of RandRunner-RR/RS’s probabilistic
unpredictability guarantees (∆NET /∆VDF = 1/10, α = 1.0)
17
01020304050607080numberofroundstopredict10−610−510−410−310−210−1100probabilityofsuccessfulpredictionpA=0.50,α=1.0,∆VDF=5pA=0.50,α=2.0,∆VDF=10pA=0.50,α=4.0,∆VDF=20pA=0.66,α=1.0,∆VDF=5pA=0.66,α=2.0,∆VDF=10pA=0.66,α=4.0,∆VDF=20pA=0.75,α=1.0,∆VDF=5pA=0.75,α=2.0,∆VDF=10pA=0.75,α=4.0,∆VDF=2002004006008001000durationofnetworkoutage(inunitsof∆NET)0500100015002000expectedrecoverytime(inunitsof∆NET)pA=0.25pA=0.33pA=0.4102004006008001000durationofnetworkoutage(inunitsof∆NET)0500100015002000expectedrecoverytime(inunitsof∆NET)α=1.0α=1.25α=1.501020304050607080numberofroundstopredict10−610−510−410−310−210−1100probabilityofsuccessfulpredictionRandRunner-RR(n=24,f=8)RandRunner-RR(n=100,f=33)RandRunner-RR(n=1000,f=333)RandRunner-RS(pA=0.33)E. Notation Reference
TABLE I: Notation Randomness Beacon
Symbol
n
f
α ≥ 1
P
P
P∗
r, s ≥ 1
d, v, w
R0
Rr
i ∈ P
(cid:96)r ∈ P
ppi
ski
∆NET
∆VDF
∆VDF /α
pA
pH
λA, λH
∆w
˜P
˜P [j]
kth period
Description
number of nodes running the protocol
number of adversarial / Byzantine nodes
adversaries VDF computation speed relative to the
correct nodes
set of participants running the protocol
set of veriﬁed public parameters
set of public parameter prior to veriﬁcation
some protocol round as speciﬁed by the context
number of rounds as speciﬁed by the context
initial random seed for the protocol
protocol output at round r
some node running the protocol as speciﬁed by the
context
leader of round r
public parameters for node i’s VDF
secret key / trapdoor for node i’s VDF
network propagation delay (between correct nodes)
correct nodes’ upper bound for the computation
time of Eval (the VDF parameter T is set accord-
ingly)
adversary’s lower bound for the computation time
of Eval
fraction of adversarial nodes (f /n)
fraction of honest/correct nodes (1 − f /n)
rate of progress for
est/correct nodes
RandRunner-RR’s worst case completion time of n
consecutive protocol rounds for correct nodes
randomized sequence of the set of participants P
jth element of ˜P using 0-based indexing
the sequence of rounds (k − 1)n + 1, (k − 1)n +
2, ..., kn
the adversarial and hon-
TABLE II: Notation VDFs
N in our case
N in our case
Description
input space of the VDF, X = QR+
output space of the VDF, Y = QR+
public parameter space of the VDF
time parameter of the VDF (number of iterations)
input to the VDF
output of the VDF
correctness proof for the VDF output
public parameters of the VDF
large safe primes
RSA modulus
proof that N is a product of two safe primes of size
λRSA/2
group of signed quadratic residues modulo N
security parameter
security parameter for an RSA-based VDF
Symbol
X
Y
PP
T ∈ N
x ∈ X
y ∈ Y
π
pp ∈ PP
p, q
N
πN
QR+
N
λ
λRSA
TABLE III: Notation Algorithms
Algorithm
Setup(λ) → pp
Setup(λ) → (pp, sk)
VerifySetup(λ, pp) → {accept, reject}
Eval (pp, x, T ) → (y, π)
TrapdoorEval (pp, x, T, sk) → (y, π)
Verify(pp, x, T, y, π) → {accept, reject}
Hin : {0, 1}256 → X
Hout : Y → {0, 1}256
Description
setup function for a (general) VDF
setup function for a trapdoor VDF
veriﬁcation algorithm for the parameters generated by Setup(·)
VDF evaluation algorithm (without knowledge of the trapdoor)
VDF evaluation algorithm with knowledge of the trapdoor
veriﬁcation algorithm for the VDF evaluation
cryptographic hash function mapping a 256-bit string to the input space of the VDF
cryptographic hash function mapping a VDF output to a 256-bit string
18