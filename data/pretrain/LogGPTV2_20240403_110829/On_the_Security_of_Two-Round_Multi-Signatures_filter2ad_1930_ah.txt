δ = qS/(qS + 1), we have that
(cid:17)
A ≥
1
1 + 1/qS
qS + 1
e(qS + 1)
1
·  ≥

,
(cid:2)
j
(cid:2)
1
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:2)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
∗
(cid:3)
y
∗
(cid:3)d
, v
, d
, ω
, w
, s, γ
(cid:3)
1, γ
1 = v
jy = (y
2,PK∗(cid:3)
(cid:3)
1 = vyd and gw
}j∈J ), then B proceeds as follows.
, ω) and out(cid:3)
where we use the fact that (1/(1 + 1/qS))qS ≥ e for qS > 0.
We prove the theorem by constructing an algorithm B
and given a forger F,
that, on input a group element y
solves the discrete logarithm problem in G. Namely, B runs
the generalized forking algorithm GFA from Lemma 1 on
with the algorithm A described above. If GFA
input y
outputs fail, then B also outputs fail. If GFA outputs
(J,{out j}j∈J ,{out(cid:3)
Let out jf = (¯t1, ¯t2, c, s, γ1, γ2,PK∗
jf =
) be the two outputs of A related
(cid:3)
(cid:3)
(¯t
1, ¯t
2, c
to the forgery. For every (y, π) ∈ PK∗ \ {pk∗}, there are two
outputs out jy = (y, v, d, w) and out(cid:3)
) such
. From the construction of
that gw
GFA, we know that y = y
because they were part
of the arguments to F’s jy-th random-oracle query. Dividing
the two veriﬁcation equations yields gw−w
= yd−d
(cid:2)
, from
which we can compute the secret key sk y = (w − w
)/(d −
(cid:3)
(cid:3)
sk y
) mod q such that y = g
, because by the construction of
d
GFA we have that d (cid:9)= d
(cid:3)
1
.
Let out jf = (¯t1, ¯t2, s, γ1, γ2,PK∗
jf =
2,PK∗
(cid:3)
(cid:3)
(cid:3)
(cid:3)
1, ¯t
(¯t
). From the validity of the forgeries,
, ω
2, s
(cid:2)
(cid:2)
∗ω
(cid:3)
∗ωγ2 and ¯t
1 = gγ
we have that ¯t1 = gγ1
2. From the
1
1 y
1 y
construction of GFA, we know that ¯t1 = ¯t
(cid:3)
1, and because
A internally simulates a query H3(m) as soon as a query
H0(¯t1, ¯t2, PK , m) is made, we also have that ω = ω
. We
therefore have that gγ1−γ
2, then B
(cid:3)
outputs the discrete logarithm of y
2−γ2) it
(cid:3)
1. The validity of the signatures
2, then by the fact that gγ1−γ
(cid:3)
2−γ2). If γ2 (cid:9)= γ
as
γ1−γ
2−γ2) mod q .
(cid:2)
ω(γ
(cid:2)
1
, ω) and out(cid:3)
If γ2 = γ
and v = v
∗ω(γ
∗
(cid:3)
1, γ
∗ω(γ
= y
= y
must also hold that γ1 = γ
gives us that
, γ
(cid:2)
,
PK (cid:3)−c
(cid:2)
(cid:3)γ
1
2 h
(cid:2)
(cid:3)γ
2 gs
2
1
PK −c and ¯t
(cid:3)
¯t2 = gγ1
2 hγ2
2 gs
2 = g
1
(cid:3)
(cid:3)
∗
where g2, h2, g
2 are determined by the output of H3(m
2, h
)
latest during the simulation of F’s jf-th random-oracle
query. By the construction of GFA, we therefore have that
(g2, h2, ¯t2, PK ) = (g
so that
= PK c−c
dividing the two equations above yields gs−s
.
(y,π)∈PK∗ sk y
We also have that PK =
,
(y,π)∈PK∗ y = g
where B already extracted all sk y except sk y∗. It can therefore
(cid:16)
compute the discrete logarithm of y
2, PK (cid:3)
(cid:3)
(cid:3)
(cid:3)
2, ¯t
2, h
(cid:5)
) and c (cid:9)= c
as
(cid:2)
∗
(cid:3)
1
1
(cid:2)
(cid:2)
(cid:2)
γ
(cid:2)
1
(cid:2)
1
(cid:2)
1
1
(cid:3)
(cid:2)
(cid:3)
s − s
c − c(cid:3) −
(y,π)∈PK∗\{(y∗,π∗)}
sk y mod q .
The running time of B is at most that of GFA plus O(N )
operations, so that the bounds in the theorem follow from
Lemma 1.
5.3 Variants and Caveats
a) Obtaining security in the plain public-key model:
The mBCJ scheme as described above thwarts rogue-key
attacks in the key-veriﬁcation model by letting signers add
self-signed certiﬁcates to their public keys. Alternatively, one
could prevent such attacks in the plain public-key model
(i.e., without requiring certiﬁcates) by using a different hash
values as exponents for each public key in the veriﬁcation
equation [BN06], or by using a product of hash values as
exponents [MWLD10], [MPSW18a]. However, these schemes
would be less efﬁcient in terms of veriﬁcation and key aggre-
gation time, respectively, because they would require a number
of exponentiations that is linear in the group size for large or
frequently changing groups.
b) Simpliﬁcations for the KOSK model: Because security
in the key-veriﬁcation setting implies security in the KOSK
setting, mBCJ can readily be used in the KOSK model, and we
can even simplify the scheme a bit. Most importantly, the self-
signed credentials preventing rogue-key attacks are no longer
neccessary, as these are avoided by the KOSK setting. Also,
the aggregate public key PK no longer needs to be included in
the hash and setting c ← H0(¯t1, ¯t2, m) is sufﬁcient. In the key-
veriﬁcation setting we needed PK to be included in the hash to
be able to “divide out” the signatures of cosigners and extract a
solution to the DL problem. In the KOSK setting this is much
simpler, as we know the secret key of every corrupt signer,
and PK can be omitted. This saves some bandwith as PK no
longer has to be propagated down the tree of signers. We stress
that this simpliﬁed scheme should only be used in a setting
where one is assured that every key is honestly generated.
c) Extension to multi-sets: It is also easy to extend the
mBCJ scheme to multi-sets of signers, where each signer
can participate multiple times in the same signing protocol.
In a highly distributed setting, this could offer the advan-
tage that signers do not have to keep track in which sign-
ing protocol they already participated. The key aggregation
PK ← (cid:5)
algorithm would simply have to be modiﬁed to compute
pk∈PK yny as the aggregate public key, where ny is
the multiplicity of public key y in the multi-set PK.
Note that
the
this extension is only secure because mBCJ
aggregate public key PK in the hash
includes
H0(¯t1, ¯t2, PK , m). Without including PK , as was done for
example in the CoSi scheme,
the extension to multi-sets
becomes insecure, because a signature on message m and
public key y is easily transformed into a valid signature on
(cid:3)
for public key y with multiplicity
a different message m
c/c
(cid:3)
= H0(¯t1, ¯t2, m)/H0(¯t1, ¯t2, m
) mod q.
d) Collision attacks: Bagherzandi
forking
lemma [BCJ08] imposes that the random oracle H maps into
the full exponent set of Zq, where q is typically a 256-bit
prime, rather than a subset Z2(cid:2) for (cid:3) < |q|. Standard Schnorr
signatures are well known to remain secure for much shorter
hash outputs, around 128 bits [Sch91], [NSW09] because their
security does not rely on the collision resistance of the hash
function. It is worth noting that the same is not true for the
case of multi-signatures, because unlike standard signatures,
collisions in the hash function actually do lead to forgeries on
the multi-signature scheme.
al.’s
et
(cid:3)
(cid:18)(cid:17)(cid:26)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:54 UTC from IEEE Xplore.  Restrictions apply. 
∗
1
2
hα2,2
1
· t1,1 and ¯t2 ← gα2,1
Namely, consider a forger F that performs a signing query
for a message m and a tree of signers where F is the leader
with an honestly generated public key y = gsk
1 and the honest
the only child. On input m, the
signer with public key y
honest signer returns t1,1, t1,2. The forger then repetitively
generates random values α2,1, α2,2, r2 ←$ Zq and computes
· gr2
¯t1 ← gα2,1
· t1,2 and hash
) for PK = y·y
∗
(cid:3)
1
values H(¯t1, ¯t2, PK , m) and H(¯t1, ¯t2, PK , m
(cid:3) (cid:9)= m until it ﬁnds two pairs (¯t1, ¯t2) and (¯t
(cid:3)
(cid:3)
1, ¯t
and m
2) such
(cid:3)
(cid:3)
(cid:3)
that H(¯t1, ¯t2, PK , m) = H(¯t
2, PK , m
1, ¯t
), which for an (cid:3)-bit
hash function is expected to happen after O(2(cid:2)/2) tries. It then
sends (¯t1, ¯t2, PK ) to the honest signer, who responds with
(cid:3)
(cid:3)
2 are the random
s1, γ1,1, γ1,2. If α2,1, α2,2, r2, α
2,1, α
2), then F
values that F used to generate (¯t1, ¯t2) and (¯t
(cid:3)
(cid:3)
1, ¯t
1 = γ1 +−α2,1 + α
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
1, ¯t
outputs (¯t
2, s
2 =
2,1, γ
γ2 − α2,2 + α
(cid:3)
(cid:3)
2,2) as a valid forgery on m
= s− r2 + r
(cid:3)
2,2, r
hα2,2
2
(cid:3)
2, γ
(cid:3)
.
6. RESTRICTED SECURITY OF CoSi
In the previous sections, we showed that CoSi cannot be
proved secure as a multi-signature scheme and presented actual
sub-exponential attacks. Both the impossibility proof and the
attacks, however, crucially rely on the adversary being able to
engage in many concurrent queries with the signing oracle. So
a natural question to ask is whether CoSi can be proved secure
against an adversary that is limited to sequential attacks.
Below, we answer this question in the positive, but with
some important caveats. We show that, in the knowledge of
secret key (KOSK) model, CoSi can be proved secure against
sequential attacks (or even logarithmically many concurrent
attacks) in the knowledge of secret key (KOSK) model under
the one-more discrete-logarithm assumption. The idea of the
proof is that the reduction answers most of its signing queries
using its discrete-logarithm oracle, but simulates the open
queries at the moment of the fork by programming a simulated
transcript into the random oracle. In order to do so, it guesses
the indices of all open signing queries at the moment of
the fork, as well as the indices of the random-oracle queries
involved in those queries, resulting in a tightness loss of qqC
S ,
where qS is the number of signing queries and qC is the
maximum number of concurrently open queries.
Theorem 4. CoSi is a secure multi-signature scheme in the
knowledge of secret key (KOSK) setting under the one-more
discrete-logarithm assumption in the random-oracle model