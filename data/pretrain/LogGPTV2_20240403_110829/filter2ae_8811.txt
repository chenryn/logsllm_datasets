# 详细揭秘文件和文件夹权限原理
|
##### 译文声明
本文是翻译文章，文章来源：AuRora@360安全播报
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
如果你曾经摆弄过服务器你可能会注意到文件权限的存在。实际上,所有的计算机文件系统都提供基于同样核心思想的权限。这些Linux,Mac和Windows计算机中的文件权限和Apache,
Nginx和IIS服务器中的文件文件夹权限一样。你可以右键点击任何电脑上的文件并选择属性(Windows)或Get
Info(Mac)来了解详情。你也可以登陆你的服务器(使用FTP服务比如FileZilla)来进一步了解你的服务器文件和目录。
而本文旨在讨论你的服务器上的网站文件和文件夹。
你也许听说过一些引用比如chmod, 775, read/write,或 user
groups。这篇文章就是要解释权限的基本框架,为你提供清楚的术语。这对于我们这些刚刚开始学习服务器的人,以及总是对文件权限感到好奇并想了解更多的人很重要。最终,了解权限如何在你的服务器上运行能够使你的系统更加安全。换句话说,安全概念的相关知识帮助你形成敏锐的判断力来阻止你做类似对文件完全授权777这样的事(即使你的主文件允许这样做),或者在收到奇怪的文件权限时意识到那可能是入侵者的警告标志。
谁可以做什么
无论你用什么系统,它都有自己的一套特定的用户类别许可动作。
**用户类别**
这是3种在服务器上访问文件的用户类别。
Owner:第一种用户类别是单用户,经常用于创建文件的人。
Group:第二种分类包括你服务器上的其他FTP用户组。
Public:最后一种包括没有FTP账户的外来访问者。
这些组都被赋予数字来标志它们的权限级别。
权限级别是123:
·1 = Owner
·2 = Group
·3 = Public
这样我们就有了3个数字作为权限级别,但是数字都是什么含义呢?可能和你想象的不同,级别不是简单的从0—9——抱歉,这里还有一些学问。
**权限操作**
这里有3种操作需要授权,每一个由数字表示。
·4 – 读操作:仅仅显示文件。.
·2 – 写操作:改动文件。
·1 –执行:跑一个程序文件。
·0 – 无权限:任何人都无权做任何事,除非用户改变权限。
这些权限能被叠加从而使同样的用户类别得到多重权限操作。
·7 = (4 + 2 + 1) = 完全访问权限 (读操作+写操作+执行)
·6 = (4 + 2) = 不能执行 (读操作+写操作)
·5 = (4 + 1) = 非写 (读操作+执行)
·3 = (2 + 1) = 非读 (写操作+执行)
**改变文件权限**
为了改变文件权限,右键点击FileZilla(或FTP选择的其他客户端)服务器上的任何文件或文件夹。打开文件权限,你会看到下图所示的内容:
你可以查看选项,或键入三位数的代码来设置用户/组/公共权限。
**文件权限贴士:**
1.在改变权限之前,记录当前3位数权限代码。要是新的权限有问题,你可以轻松把代码改回来。
2.大多数文件应该有644权限(用户可以写,没人能执行)。
3.一些文件有私密数据配置信息(如:wp-config.php)那么服务器赋予660权限比较好。
4.大多数文件夹应该有755权限(执行操作使你可以打开文件夹)。
5.仅当你需要更多访问时才改变权限,之后再改回来。
6.如果你的CMS需要对文件进行写访问,这可能意味着组用户需要写权限。
7.避免文件夹设置777以及文件设置666,一些插件,主题和平台提供这个“建议”来解决权限错误,但是这给了所有人写和清除你的文件的权限。这就像是不锁门。
这些只是文件权限的表面知识。你的服务器上可以设置几个组用户,你也可以改变组对特定文件的权限。这就是作为一个系统管理员深入研究的开始,你可以在网上找到更多的内容以及使用文件权限的已有方法。
有关于服务器文件权限的任何问题或好的技巧吗?请在下方评论吧。