Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:01:33 UTC from IEEE Xplore.  Restrictions apply. 
on Dependable 
Systems & Networks (DSN) 
Conference 
201 0  IEEE/IFIP International 
CD
I  }n12 
aJJ CD I 
CD  CID : }n12 
, . .   ! 
CD  CD CID 
CID : }n12 
CD  i CID 
aJ  I I I
.  -
. 
lIl il , x, 
CD 
CD 
III 
. 
1Il  
. 
CD  
Front-End 
CD 
CD ! 
CD 
III 
CD 
aJ 
aJ 
CID 
CD 
Back·End 
Fronl-End I . '  '7il · ' 
.  · 
CD !  
ill '7] •  'n 
ill '7] 
. 
III  CD 
III  CD 
!  • 
0 
2 
>:: .  · 
 ill ,  
III  aCD 
• ' n 
· 
· 
Back-End 
ill • .3 · 
'7) •  n 
,  l   . 
·   
CD  
CD 
· 
• ' n 
.  . 
CD 
crossbar 
(a) Overlapping 
figure, the shaded  stages 
reach of n pipelines. 
connections. 
In this 
in the middle have  a crossbars 
(b) Combined 
back crossbars. 
application 
of single 
(c) Combined application  of 
in conjunction 
with front-crossbars 
in conjunction 
front-back 
overlapping 
crossbars. 
Figure 7: Interweaving 
represent 
the pipelines 
they connect 
together. 
candidate
s. The vertical 
lines here are used as an abstraction 
for full 
crossbar switches. The span of the lines 
over the single crossbars: 
two distinct advantages 
lows up to 50% more slices to share their resources 
gether, 
every stage interface, 
bustness. 
1) al­
to­
crossbar 
link at 
ro­
and 2) introduces 
an alternative 
improving 
the interconnection 
handling 
deployment, 
algorithms  for 
three configuration 
crossbar 
ping crossbars 
terweaving 
successfully 
three algorithms. 
each type of 
namely, single crossbars, 
configurations. 
All four in­
discussed 
3.2 can be 
by using a combination 
and front-back 
alternatives 
in the Section 
configured 
of these 
overlap­
crossbars, 
with one an­
However, 
solution 
between every 
is relaxed 
two-cycle 
of the logical 
a significant 
by introducing 
a single-cycle 
can communicate 
the two cycle latency 
of single crossbars 
crossbar can provide. 
slowdown on the 
SNSs (-25%). A 
would be to apply two cycle cross­
range they 
This value is bounded by the extent of connec­
if this 
Single and Front-Back Crossbars: The primary lim­
itation 
is the interweaving 
can deliver. 
tivity 
constraint 
twice the number of slices 
other. Unfortunately, 
pair of stages can introduce 
single thread performance 
compromise 
bar at a coarser 
way to accomplish 
pair as one block (front-end), 
as the other (back-end). 
loss when using this is 
necting 
back-end 
We call such two-cycle 
bars. Figure 7(b) shows 2n slices 
and back-end 
crossbar 
about 7%. As per Figure 2, con­
to 
divided 
which are connected 
than pipeline 
by classifying 
interconnections 
granularity 
in the reverse 
front-back 
cross­
and another 
crossbar, 
and the issue-exmem 
pair 
up these 
(FB-Xbar 
0). 
stages. One 
this is 
blocks, 
two blocks would need one front-end 
into front-end 
by a front-back 
The single thread performance 
direction. 
the fetch-decode 
here using a simple example. 
Figure 8 shows 
are formed us­
There are eight 
and four cross­
SW system. The SW islands 
top two and bottom two slices. 
in this system, 
Single Crossbar Configuration: The input to  this 
al­
gorithm is the fault map of the entire SW chip, and it is 
explained 
a four-wide 
ing  the 
defects 
bar port/interconnect 
marked using a solid shade (F2, D4, 13, E4) and the inter­
connect 
to a dead inter­
connect 
D2, 12). This is  to distinguish 
defective 
connections 
free. 
four stage failures 
link failures. 
as crosses. 
are also declared 
are not shown here and are assumed fault­
The stages connected 
For illustration 
dead, and are lightly 
The dead stages are 
purposes, 
stages. 
shaded (D 1, 
the backward 
them from the physically 
(with interconnection 
fault-map 
is conducted 
Given the updated 
as stage failures), 
fail­
the single crossbar 
con­
for one SW island at a time. The 
ures  modeled 
figuration 
first step is to create a list of working stages of each type. 
The second step groups unique 
island, 
ple, this results 
14, E3. 
working stages within an 
SNS. In our exam­
in having only one working SNS: F3, D3, 
and sets them aside as a logical 
crossbars with 
Overlapping Crossbar Configuration: The overlap­
ping crossbars 
for  re­
sources 
from two neighboring 
provide additional 
connectivity 
SW islands. 
For the ex-
benefits 
crossbar 
combination 
range it obtains from 
is  to combine the overlapping 
Overlapping and Front-Back Crossbars: The single 
from the in­
and front-back 
the front-back 
terweaving 
crossbar, 
but, at the expense of single thread performance 
loss. An 
alternative 
the front-back 
applied 
interconnect 
slices 
can be reached 
the remaining 
the front-back 
3.3  Configuration 
Figure 7(c) shows this style of 
n 
and 
losing any performance, 
slices 
nj2 bordering 
crossbars. 
over 2n slices. 
without 
Algorithms 
can be reached using 
In this scenario, 
crossbars. 
The faults 
in a SW chip can manifest 
as broken stages, 
ports or interconnect 
crossbar 
narios demand a reconfiguration 
the defective 
tion algorithm 
number of logical 
highest 
possible 
system throughput. 
would guarantee 
components 
pipelines 
are isolated. 
formation 
of a maximum 
(or SNSs), thus achieving 
the 
This section 
presents 
links. Each of these sce­
of the system such that 
A good configura­
SNS 0 L..:..:F3'--"'.. .... 
F4 
Figure 8: Configuration 
marked stages and interconnections 
able to form any logical SNS, whereas island 2 forms only 
logical SNS  (SNS 
The 
are dead. Island I is not 
one 
of SW with single crossbars. 
0). 
978-1-4244-7501-8/101$26,00 
©201 0  IEEE 
1 05 
DSN 2 0 1 0 :  Gupta et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:01:33 UTC from IEEE Xplore.  Restrictions apply. 
201 0  IEEE/IFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
.-------i@)---...., 
SNS1 
of SW with overlapping 
Figure 9: Configuration 
red marked stages and interconnections 
marked stages are dead for one island, but are available 
in the other. 
2 and 3 form one logical SNS each. 
Island I is not able to form any logical SNS, island 
crossbars. The 
are dead. The partially 
for use 
Figure 10: Configuration 
back crossbars. The front-back 
SNS (SNS 2) over the configuration 
bars, making the total three. 
of SW with overlapping 
and front­
crossbars add one more logical 
of overlapping 
result 
cross­
the single  crossbar 
of this algorithm, 
we will use the same 
crossbars 
SW ex­
overlapping 
SN islands 
planation 
ample from before. 
The addition of 
makes the tally for the number of logical 
(see Figure 9). Also, note the change in shading 
used for 
stages D2 and 12. The top half of these stages are lightly 
shaded, 
these stages are dead for use in island I, but are available 
for use in island 2. 
and the bottom half is clear. 
This is to denote that 
three 
Given the fault-map, 
and the proper abstraction 
of in­
SNSs for 
is started 
is started 
faults as stage faults, 
is used to form logical 
at the top of the fabric, 
at one end of 
and is swept across the entire SW. When 
terconnection 
configuration algorithm 
one island at a time. This process 
the SW fabric, 
this process 
stages from the top of the pile within each island are given 
preference 
to form logical 
keeping more resources 
are configured. 
sion from island I to island 3 in our example. 
for each island configuration 
in a total of two logical 
helps in 
SNSs. This heuristic 
free when the succeeding 
islands 
progres­
The steps 
Figure 9 illustrates 
below, and result 
are detailed 
this logical 
working 
SNSs. 
1. Island 1: Free working stages: 
{}, issue {II}, execute/memory 
Logical 
SNSs: none. 
fetch {Fl}, decode 
{E 1 ,E2}. 
2. Island 2: Free working stages: 
fetch {F3}, decode 
{D2, D3}, issue {I2}, execute/memory 
{E2, E3}. 
Logical 
SNSs: F3, D2, 12, E2. 
3. Island 3: Free working stages: 
fetch {F4}, decode 
{D3}, issue {I4}, execute/memory 
Logical 
SNSs: F4, D3, 14, E3. 
{E3}. 
ploy overlapping 
nection. 
F3, D2, 12, E2 and F4, D3, 14, E3. 
This results 
crossbars 
as the first-level 
in forming two logical 
SNSs: 
intercon­
2. Front-back 
Bundling: 
In this step, the  resources 
re­
maining in the SW fabric are individually 
up in the front-end and 
ample forms one front-end 
back-end 
bundle (Fl, Dl) and one 
the back-end. 
bundles 
Figure 10 ex­
(11, El). 
bundled 
3. Front-back 
Integration: 
The last phase in the config­
is to combine pairs of front-end and 
and form logical 
SNS using the front-back 
SNSs. Figure 10 forms one 
crossbars: 
Fl, Dl, 
back-end 
uration 
bundles 
logical 
11, E1. 
The configuration 
algorithms 
interweaving 
discussed 
in this section 
discussed 
candidates 
3.2. It is noteworthy 
can cover all possible 
in Section 
sented here are not optimal (in specific, 
and are based on heuristics. 
keep their run-times  linear  (O(n)), 
the overheads 
recon­
figuration. 
that the algorithms 
pre­
the latter 
two), 
This was done in order to 
thereby, 
from manufacture-time 
and in-field 
minimizing 
3.4  Interconnection 
Reliability 
Interconnection 
reliability 
can be divided 
and crossbar reliability. 
The link reliability 
by the interconnection 
into link re­
is ac­
al­
extent, 
liability 
counted for, to a certain 
ternatives 
not as vulnerable 
crossbar 
which introduce 
redundancy. 
Further, 
to wearout and variation 
they are 
as logic. For 
reliability, 
SW can use three alternatives: 
1. Simple Crossbar: This is the simplest 
scenario 
with 
a single crossbar 
spot. No redundancy 
is maintained 
in this case. 
switch used at each interconnection 
(issue-execute/memory 
(fetch­
configuration 
(see Section 
we will refer to  this 
their use to be  in conjunction 
are only used to connect the front-end 
Front-Back Crossbar Configuration: The front-back 
crossbars 
decode pair) with the back-end 
pair). This requires 
with some other crossbar 
Henceforth, 
uration as the  first-level 
configuration algorithm 
pendent 
tion. The running example from the previous 
will again be employed 
our example (Figure 
to be fault-free. 
into three phases: 
interconnect. 
for front-back 
Nevertheless, 
crossbars 
in this section 
10) front-back 
interconnec­
algorithms 
are assumed 
can be divided 
of the choice made for the first -level 
The front-back 
the 
is inde­
(see Figure 10). In 
other crossbar config­
crossbars 
algorithm 
3.2). 
1. First-level 
Interconnect: 
For this example, 
we em-
2. Simple Crossbar with spare(s): 
In this set-up, 
one 
for every crossbar 
spare is maintained 
The cold spare corresponding 
only brought 
tain number of port failures. 
into use when the latter 
to a crossbar 
develops 
a cer­
switch is 
in the system. 
3. Fault-Tolerant 
Crossbar (no spares): 
The most ex­
failures. 
is  to deploy one-sided 
the 
fault­
[24] that nearly eliminate 
pensive alternative 
(FT) crossbars 
tolerant 
chances 
of crossbar 
bar, multiple 
the output port. This is unlike a regular 
have a unique path for every input-output 
pair. How­
ever, FT crossbars 
of a regular 
tend to be two/three 
from a given input port to 
Note that in a FT cross­
paths  exist 
crossbar. 
times the size 
crossbar 
that 
978-1-4244-7501-8/ 1 01$26.00 ©201 0  IEEE 
1 06 
DSN 2 0 1 0 :  Gupta et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:01:33 UTC from IEEE Xplore.  Restrictions apply. 
201 0  IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
and the baseline 
parameters 
stages are modeled after the OR1200 processor 
open source RlSC microprocessor. 
micro architecture 
pipeline 
[14], an 
Table 1: Architectural 
parameters. 
in-order 
OR1200 RISC [ 1 4] 
Pipeline  4-stage 
Frequency 400 MHz 
Area 
Branch predictor 
Imm (90nm process) 
Global, 
1 6-bit history, 
BTB size -2KB 
4-way, 16  KB, 1 cycle hit latency 
8-way, 64 KB (per 
40 cycle hit 
latency 
core),  5 
gshare predictor 
cycle hit 
latency 
Ll 1$, D$ 
L2 $ 
Memory 
for 
Process 
slower circuit 
3.5  Variation 
components 
of slower components 
frequencies 
Tolerance 
introduces 
presence 
in a wide distribution 
variation 
a chip.  This 
structure 
in a conven­
within each core would 
of operational 
on the die. For instance, 
throughout 
results 
different 
structures 
tional CMP, the slowest 
determine 
ilarly, 
granularity 
slower than others. 
SW can selectively 
grid of resources 
operate 
proved distribution 
traditional 