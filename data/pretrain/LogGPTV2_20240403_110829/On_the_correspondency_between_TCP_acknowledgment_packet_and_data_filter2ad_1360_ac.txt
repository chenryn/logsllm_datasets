f
log (
ta
i
k
)
= 
i) + λ(tak
i) 
L(Sk
If (m, σ) is known and tak is normal distribution, we have: 
i is the ith possible state in Ωk－1, Ωk－1 is the set of all Sk-1. 
Sk-1
The searching procedure is recursive. At every step, possible rk 
i and inputted into M. If rk is accepted by M, then 
is created for Sk-1
create Sk, otherwise discard it. Multiple Sk may be created for each 
i. Repeat the above step until reach the last ack AN. In the end, 
Sk-1
we  get  ΩN  and  Θ.  Above  is  the  pseudo-code  of  the  recursive 
algorithm. 
3.2  Adaptive Maximum-likelihood Estimation 
i,  its  likelihood  value  is  computed 
For  every  new  created  Sk
using (10), 
(8) 
(9) 
L(Sk
i) = L(Sk-1
i
kta m
−
2
)
−
log 2
πσ
(10) 
L(Sk
i) = L(Sk-1
i)
−
1 (
2
σ
kta m
−
2
)
−
log 2
πσ
, 
The  rationale  of  the  Maximum-likelihood  criterion  used  in 
selecting Ψi is that if a Ψi deviates from actual Ψ, its {ta}i will 
also deviate from actual {ta}, which makes {ta}i deviate from the 
model of ta process. Thus its likelihood value is very likely to be 
smaller than the value of actual {ta}. The more it deviates from 
the actual, the smaller the likelihood value it has. Therefore, based 
on this criterion, the selected path will be at least very close to the 
actual path even if it is not the actual one. 
Maximum-likelihood Estimation(MLE) is widely used in many 
fields  such  as  parameter  estimation,  convolution-code  decoding, 
and  channel  equalization  [16].  For  the  first  one,  the  maximum-
likelihood parameter estimation have already found its application 
in  the  network  tomography[5].  In  the  latter  two  fields,  MLE  is 
used to select a most possible path among many candidate paths. 
The  most  possible  path  is  the  path  with  maximum-likelihood 
value. The uses of MLE in these two fields are very similar to its 
use here. 
3.  ESTIMATION METHOD 
3.1  Use M to search possible path set Θ 
The TCP sender’s non-deterministic FSM M = (K, Σ, ∆, s, F), 
where K is the set of finite states {q0, q1, … qn}, Σ is the accepted 
input. ∆ is the transition function, K×Σ (cid:198) K, s ∈ K is the initial 
states,  F  is  the  stopping  state.  The  accepted  input  Σ  is  the 
corresponding pairs rk. rk is generated based on the trace. rk must 
satisfy time causality. 
k = 0:S0 = s, Ω0 = {S0} 
step k: for k = 1 to N – 1  
for every Sk-1
i in Ωk－1 
i 
create new possible rk
i (cid:198) Sk ∈  K 
if  Sk-1
i×rk
store Sk in Ωk 
end 
end 
end 
OUTPUT:  ΩN = {SN
i}, Θ={Ψi} 
where Sk-1
i is the predecessor of Sk
i. 
However, in reality, we usually do not priori know the channel 
coefficients (m, σ) before estimation. Although sometimes (m, σ) 
can  be  obtained  by  ping,  they  may  not  be  applied  to  a  TCP 
because of the different sampling methods used by ping and TCP. 
Moreover, if the channel is time-varying, we must be able to track 
the change of the channel coefficients. 
The principle of adaptive maximum-likelihood estimation is to 
use the tentative decision to update the channel estimation during 
estimation  process.  The  channel  estimator  block(see  Figure  5) 
uses  (11)  to  track  the  channel  changes  according  the  tentative 
output of the Viterbi block(explained in 3.3). 
(µ,σ)k = F((µ,σ)k-1, tak)  
(11) 
F  is  the  update  function.  Here,  we  use  (6)(7)  as  F  to  adjust 
channel estimation. 
In  each  step  of  the  recursive  algorithm,  there  are  many  new 
i. 
i},  in  which  at  most  there  is  only  one  correct  Sk
states  Ωk={Sk
Therefore, the choice of tak in (11) is a problem. Generally, there 
are two approaches to solve this problem. We briefly discuss them 
below, whereas further discussion of this problem is beyond the 
scope of this paper: 
1. 
In  each  step,  we  have  only  one  copy  of  channel 
estimation  (µ,σ).  The  estimation  has  explicit  physical 
explanation. It is the estimation of actual channel. In principle, 
the  closer  the  estimated  channel  coefficients  to  the  actual 
value, the better performance of the method. According to this 
principle,  ideally tak  used  in  (11)  should  be  the  value  of  the 
actual  rk.  One  reasonable  method  is  to  choose  tak  according 
the likelihood value of Sk, i.e. choose 
{L(Sk
tak = 
i)} 
arg max
i
kS
}
{
i  with  maximum  L  does  not  guarantee  that  Sk
to  update  (µ,σ)k-1.  However,  this  method  has  its  limitation, 
i  is  the 
state  Sk
i is the actual ta, so as not to guarantee 
actual state, that its tak
that  the  updated  (µ,σ)k  reflect  the  actual  state/parameters  of 
the  channel.  The  deviation  between  the  estimated  channel 
parameters and the actual channel parameters may lead to next 
wrong  choice  of  ta  in  (11),  and  may  further  lead  to  larger 
deviation between the estimation and the actual. The deviation 
may propagate and finally lead to serious estimation error. 
2.  Per-Surviving  Processing(PSP):  In  each  step,  every 
i maintains its own channel estimation (µ,σ)k
i 
surviving state Sk
i estimation result by (12). 
which is calculated using its own  tak
i)  is  calculated  using  its  own 
Also,  its  likelihood  value  λ(Sk
channel estimation by (13). This approach is used in solving 
ISI in MSLE by Rehali et al in [17], and Sechadri in [18]. 
i, tak
i) 
(µ,σ)k
i = F((µ,σ)k-1
1 (
2
σ
ta m
i
k
−
i
k
λ(tak
i) = 
−
2
)
−
log 2
i
πσ
k
(12) 
(13) 
3.3  Viterbi Algorithm 
In each step, every Sk-1 may generate multiple new states Sk, the 
number of states in Ωk will grow exponentially with k. Because of 
the  Markov  property  of  the  sender  state  transition,  Viterbi 
algorithm  can  be  used  to  reduce  the  number  of  states  in  Ωk 
effectively. 
Viterbi  algorithm  was  proposed  as  a  method  of  decoding 
convolution codes at first. Since that time, it has been recognized 
as an attractive solution to a variety of digital estimation problems. 
The rationale of Viterbi algorithm is to use two properties of the 
estimated object—the Markov property and the finite property—
to  discard  impossible  path  as  soon  as  possible.  This  reduces the 
complexity  in  searching[16].  The  pseudo-code  of  the  Viterbi 
algorithm is written as: 
Ŝk = arg max L(Sk), for all Sk in Ωk of same state 
store Ŝk and delete the others 
3.4  Description of Estimation Procedure 
Figure 5 and Figure 6 show the block-diagram and the pseudo-
code  of  the  method.  In  tcpdep,  we  adopt  PSP  in  searching  ML 
path. 
3.5  Rules of M  
Rules of the non-deterministic TCP state-transition machine M 
is  constructed  based  on  the  basic  algorithms  stipulated  in 
RFC2581[3] and specifications in some other RFC documents[1, 
2, 6, 11, 15]. 
There are mainly two aspects of considerations in constructing 
the state-transition rules: 
(cid:122)  Strict  rules  reduce  the  maximum  likelihood  searching 
space  Θ  but  may  exclude  some  valid  state-transition 
paths from Θ. 
(cid:122)  Loose  rules  expand  the  maximum  likelihood  searching 
space  Θ  but  may  not  achieve  the  goal  of  effectively 
eliminating invalid state transition paths out of Θ. 
Therefore,  the  rules  of  M  are  the  result  of  trade-off  between 
strict  rules  and  loose  rules.  The  principle  is  to  eliminate  invalid 
state  transition  paths  as  many  as  possible  on  the  condition  of 
ensuring that the correct path will not be eliminated at this stage. 
Rules of M is of two categories: The first category depicts the 
transition rules between four state subsets showed in Figure 3. The 
second category depicts transitions rules in each subset. Details of 
rules are not discussed in this paper. 
Dj, Dj+1,… 
Ak 
NON-
DETERMINS
TIC TCP  FSM 
 (Sk, tak ) 
i 
Ŝk-1
STATES 
POOL 
Ŝk 
OUTPUT:(ŜN, ˆΨ ) 
MLE and 
VITERBI 
ALGORITHM 
(µ,σ)k-1
i 
CHANNEL 
ESTIMATOR 
tak 
T
e
n
t
a
t
i
v
e
R
e
s
u
l
t
Figure 5  Block diagram of the estimation procedure 
k = 0: S0 = s, Ω0 = {S0} 
step k: for k = 1 to N -1 
for every Ŝk-1
i in Ωk－1 
i 
create new possible rk
i (cid:198) Sk ∈  K 
if  Ŝk-1
i×rk
store Sk in Ωk 
end 
end 
for every new state Sk
i in Ωk , i for the ith state 
L(Sk
(µ,σ)k
i) = L(Sk-1
i = F((µ,σ)k-1
i)  
i) + λ(tak
i, tak
i) 
end 
Ŝk = arg max L(Sk), for all Sk in Ωk of same state 
store Ŝk into Ωk and delete the others 
end 
OUTPUT: (ŜN ,  ˆΨ ) = arg max L(SN), for all SN in ΩN  
Figure 6  Pseudo-code of the estimation procedure 
4.  VALIDATION 
As  mentioned  before,  the  method  cannot  guarantee  the 
estimated  result  match  the  actual  exactly.  In  this  section,  we 
perform  both  simulations in  NS  and  Internet  experiments to  test 
the estimation performance. 
In  simulation,  we  study  the  estimation  performance  under 
different  kinds  of  network  background  traffic  and  with  various 
TCP sender versions. The sender always have data waiting to send, 
thus  its  data  sending  behavior  is  only  controlled  by  the  TCP 
congestion control mechanisms. 