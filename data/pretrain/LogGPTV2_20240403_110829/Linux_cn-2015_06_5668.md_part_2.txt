随着PHP不断吸纳各种编程语言的功能，演进至第三版及后续版本，它始终保留了作为“胶水语言”的特性。通过PECL（PHP Extension Community Library）等资源库，PHP能够将多种库整合在一起，并在PHP层面引入这些库的函数。这种组件整合能力是PHP魅力的重要组成部分，使得其功能不受限于源代码。

### 网络：一个程序员社区

PHP对网络发展的持续影响不仅体现在它的功能上，还包括其工作方式和参与者。早在1997年，PHP用户群体开始形成，其中最早的组织之一是美国中西部PHP用户组（后来改名为Chicago PHP），并于1997年2月举行了首次聚会。这标志着一个充满活力且热情高涨的开发者社区的诞生，他们通过在线工具解决实际问题。PHP的普遍适用性使其成为网络开发的理想选择，在共享主导的世界里迅速流行起来，低门槛也吸引了众多早期的网络开发者。

随着社区的成长，一系列工具和资源应运而生。2000年成为了PHP的一个转折点，这一年见证了首届PHP开发者大会的召开，核心开发者们齐聚特拉维夫讨论即将发布的4.0版本。同年，PHP扩展与应用仓库（PEAR）启动，提供了高质量、符合标准的最佳实践代码包。紧接着，第一届PHP Kongress会议在德国举行，《PHPDeveloper.org》网站上线并至今仍是PHP社区最重要的新闻来源之一。

该社区的发展势头预示着接下来几年内PHP将迎来显著增长。伴随互联网行业的爆发式增长，越来越多、规模更大的网站开始采用PHP技术。用户群遍布全球各地，邮件列表、在线论坛、IRC聊天室、会议以及诸如php[architect]、德国PHP杂志、国际PHP杂志等商业出版物共同塑造了一个开放协作、倡导代码共享的工作环境。

然而，在十年前，就在PHP 5发布不久后，网络开发领域发生了一件有趣的事情——Ruby on Rails框架发布了，这对PHP社区如何构建库和应用程序产生了深远影响。

### 框架的兴起

Ruby on Rails框架因其基于MVC（模型-视图-控制器）架构模式而受到广泛关注。尽管几年前已有使用MVC模型的Mojavi PHP框架，但Rails真正巩固了这一概念。这一变化引发了PHP社区内部对于框架使用的热潮，改变了开发者创建PHP应用程序的方式。

得益于PHP社区框架生态系统的蓬勃发展，许多重要项目得以启动。例如，2009年成立的[PHP框架互操作性组织](http://www.php-fig.org/)致力于在不同框架间建立编码标准、命名约定与最佳实践。这些规范促进了成员项目之间更高的互操作性，使每个框架可以被分解为独立的库或作为一个整体来使用。互操作性的增强还催生了另一个里程碑事件：Composer项目的诞生。

受Node.js的NPM和Ruby的Bundler启发，Composer开启了PHP应用开发的新时代，被誉为PHP的“文艺复兴”。它促进了软件包之间的互操作性、标准化命名规则、编码指南采纳以及测试覆盖率提高，现已成为现代PHP应用开发不可或缺的一部分。

### 对加速与创新的需求

如今，PHP拥有一个充满活力的应用程序和库生态系统，包括广泛部署的WordPress、Drupal、Joomla和MediaWiki等。从夫妻店小站点到whitehouse.gov和Wikipedia这样的大型平台，这些应用支持着各行各业不同规模的网站运营。根据Alexa排名显示，在前十大网站中有六个使用PHP技术，每天处理数十亿次页面访问请求。因此，提升PHP性能变得尤为重要，许多创新措施也被纳入PHP核心以优化执行效率。

2010年，Facebook公开了HipHop项目，这是一个将PHP代码转换为C++代码并编译成单一可执行二进制文件的源到源编译器。为了满足自身业务规模的需求，Facebook需要从传统的PHP代码迁移到更高效、更优的执行形式。尽管如此，鉴于PHP易于使用且开发周期短的特点，公司仍希望继续采用该语言。随后，HipHop进化为HHVM，一种针对PHP的即时（Just-In-Time, JIT）编译引擎，支持一种新的基于PHP的语言——Hack。

Facebook及其他虚拟机项目的创新引发了关于Zend引擎未来走向的讨论。Zend引擎仍然是PHP的核心与语言规范制定者。2014年，官方启动了一个语言规范项目，“旨在提供完整清晰的语言定义及其语义”，以便其他编译器项目能够实现兼容性更强的PHP版本。

下一个主要版本PHP 7成为了热议话题。该项目旨在清理、重构、优化现有代码基础，并展示出显著的实际应用性能改进。由于之前存在未发布的PHP 6.0版本，最终决定将新版本命名为“PHP 7”，并将phpng分支合并进来，计划增加标量类型提示等功能。随着首个PHP 7 alpha版本的发布，基准测试表明其在多个方面表现优于甚至超越了HHVM，确保了PHP与现代Web开发需求保持同步。同时，PHP-FIG继续推动框架与库之间的合作——最近通过采纳PSR-7提案，这将改变PHP项目处理HTTP请求的方式。用户组、会议、公共活动以及像[PHPMentoring.org](http://phpmentoring.org/)这样的倡议者持续倡导最佳实践、编码标准和测试方法。

从各个方面来看，PHP见证了互联网的成长历程，并在此过程中逐渐成熟。最初只是一个简单封装C语言库API的小型项目，如今已成长为一门完整的编程语言。她的开发者社区充满活力、乐于助人且注重实用性，始终欢迎新人加入。经过二十年的发展，PHP已经证明了自己的价值，并且凭借当前语言本身及其社区内的活跃程度，预计在未来几年内仍将是一门密切相关且极具实用价值的技术。

正如Rasmus Lerdorf在SunshinePHP会议上所言：“我从未想过这个小小的项目会在二十年后仍然被人们谈论。”
向Lerdorf及整个PHP社区致敬，感谢他们将这个“小小项目”转变为当今互联网上持久而强大的组成部分。

---
原文作者：[Ben Ramsey](http://www.infoworld.com/author/Ben-Ramsey/)  
翻译：[wi-cuckoo](https://github.com/wi-cuckoo)  
校对：[wxy](https://github.com/wxy)  
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出