    ```yaml
    _exclude:
        - name-slug
    name:
        type: str
        help: A nice human-readable name
    slug:
        type: str
        help: A slug of the name
        default: "{% include 'name-slug.jinja' %}"
    ```
- `name-slug.jinja`
    ```jinja2
    {# For simplicity ... -#}
    {{ name|lower|replace(' ', '-') }}
    ```
```
📁 your_template
├── 📄 copier.yml
└── 📄 name-slug.jinja
```
It is also possible to include a template in a templated folder name
```
📁 your_template
├── 📄 copier.yml
├── 📄 name-slug.jinja
└── 📁 {% include 'name-slug.jinja' %}
    └── 📄 __init__.py
```
or in a templated file name
```
📁 your_template
├── 📄 copier.yml
├── 📄 name-slug.jinja
└── 📄 {% include 'name-slug.jinja' %}.py
```
or in the templated content of a text file:
```toml
# pyproject.toml.jinja
[project]
name = "{% include 'name-slug.jinja' %}"
```
Similarly, a Jinja macro can be defined and imported, e.g. in copier.yml.
```jinja
slugify.jinja
{# For simplicity ... -#}
{% macro slugify(value) -%}
{{ value|lower|replace(' ', '-') }}
{%- endmacro %}
```
```yaml
# copier.yml
_exclude:
    - slugify
name:
    type: str
    help: A nice human-readable name
slug:
    type: str
    help: A slug of the name
    default: "{% from 'slugify.jinja' import slugify %}{{ slugify(name) }}"
```
or in a templated folder name, in a templated file name, or in the templated content of a text file.
As the number of imported templates and macros grows, you may want to place them in a dedicated directory such as `includes`:
```
📁 your_template
├── 📄 copier.yml
└── 📁 includes
    ├── 📄 name-slug.jinja
    ├── 📄 slugify.jinja
    └── 📄 ...
```
Then, make sure to exclude this folder in `copier.yml`
```yaml
_exclude:
    - includes
```
or use a subdirectory, e.g.:
```yaml
_subdirectory: template
```
To import it you can use either:
```
{% include pathjoin('includes', 'name-slug.jinja') %}
```
or
```
{% from pathjoin('includes', 'slugify.jinja') import slugify %}
```
### [Available settings](https://copier.readthedocs.io/en/latest/configuring/#available-settings)
Remember that the key must be prefixed with an underscore if you use it in the `copier.yml` file.
Check [the source for a complete list of settings](https://copier.readthedocs.io/en/latest/configuring/#available-settings)
### [The `.copier.answers.yml` file](https://copier.readthedocs.io/en/latest/configuring/#the-copier-answersyml-file)
If the destination path exists and a `.copier-answers.yml` file is present there, it will be used to load the last user's answers to the questions made in the `copier.yml` file.
This makes projects easier to update because when the user is asked, the default answers will be the last ones they used.
The file must be called exactly `{{ _copier_conf.answers_file }}.jinja` in your template's root folder to allow applying multiple templates to the same subproject.
The file must have this content:
```yaml
# Changes here will be overwritten by Copier; NEVER EDIT MANUALLY
{{ _copier_answers|to_nice_yaml -}}
```
### [Apply multiple templates to the same subproject](https://copier.readthedocs.io/en/latest/configuring/#applying-multiple-templates-to-the-same-subproject)
Imagine this scenario:
- You use one framework that has a public template to generate a project. It's available at https://github.com/example-framework/framework-template.git.
- You have a generic template that you apply to all your projects to use the same pre-commit configuration (formatters, linters, static type checkers...). You have published that in https://gitlab.com/my-stuff/pre-commit-template.git.
- You have a private template that configures your subproject to run in your internal CI. It's found in PI:EMAIL:my-company/ci-template.git.
All 3 templates are completely independent:
- Anybody can generate a project for the specific framework, no matter if they want to use pre-commit or not.
- You want to share the same pre-commit configurations, no matter if the subproject is for one or another framework.
- You want to have a centralized CI configuration for all your company projects, no matter their pre-commit configuration or the framework they rely on.
You need to use a different answers file for each one. All of them contain a `{{ _copier_conf.answers_file }}.jinja` file as specified above. Then you apply all the templates to the same project:
```bash
mkdir my-project
cd my-project
git init
# Apply framework template
copier copy -a .copier-answers.main.yml https://github.com/example-framework/framework-template.git .
git add .
git commit -m 'Start project based on framework template'
# Apply pre-commit template
copier copy -a .copier-answers.pre-commit.yml https://gitlab.com/my-stuff/pre-commit-template.git .
git add .
pre-commit run -a  # Just in case 😉
git commit -am 'Apply pre-commit template'
# Apply internal CI template
copier copy -a .copier-answers.ci.yml PI:EMAIL:my-company/ci-template.git .
git add .
git commit -m 'Apply internal CI template'
```
Done!
After a while, when templates get new releases, updates are handled separately for each template:
```bash
copier update -a .copier-answers.main.yml
copier update -a .copier-answers.pre-commit.yml
copier update -a .copier-answers.ci.yml
```
## [Generating a template](https://copier.readthedocs.io/en/latest/generating/)
You can generate a project from a template using the copier command-line tool:
```bash
copier copy path/to/project/template path/to/destination
```
Or within Python code:
```bash
copier.run_copy("path/to/project/template", "path/to/destination")
```
The "template" parameter can be a local path, an URL, or a shortcut URL:
- GitHub: `gh:namespace/project`
- GitLab: `gl:namespace/project`
If Copier doesn't detect your remote URL as a Git repository, make sure it starts with one of `git+https://`, `git+ssh://`, `git@` or `git://`, or it ends with `.git`.
Use the `--data` command-line argument or the `data` parameter of the `copier.run_copy()` function to pass whatever extra context you want to be available in the templates. The arguments can be any valid Python value, even a function.
Use the `--vcs-ref` command-line argument to checkout a particular Git ref before generating the project.
All the available options are described with the `--help-all` option.
## [Updating a project](https://copier.readthedocs.io/en/latest/updating/)
The best way to update a project from its template is when all of these conditions are true:
- The destination folder includes a valid `.copier-answers.yml` file.
- The template is versioned with Git (with tags).
- The destination folder is versioned with Git.
If that's your case, then just enter the destination folder, make sure `git status` shows it clean, and run:
```bash
copier update
```
This will read all available Git tags, will compare them using PEP 440, and will check out the latest one before updating. To update to the latest commit, add `--vcs-ref=HEAD`. You can use any other Git ref you want.
When updating, Copier will do its best to respect your project evolution by using the answers you provided when copied last time. However, sometimes it's impossible for Copier to know what to do with a diff code hunk. In those cases, copier handles the conflict in one of two ways, controlled with the `--conflict` option:
- `--conflict rej`: Creates a separate `.rej` file for each file with conflicts. These files contain the unresolved diffs.
- `--conflict inline` (default): Updates the file with conflict markers. This is quite similar to the conflict markers created when a git merge command encounters a conflict.
If the update results in conflicts, you should review those manually before committing.
You probably don't want to lose important changes or to include merge conflicts in your Git history, but if you aren't careful, it's easy to make mistakes.
That's why the recommended way to prevent these mistakes is to add a pre-commit (or equivalent) hook that forbids committing conflict files or markers. The recommended hook configuration depends on the `conflict` setting you use.
Never update `.copier-answers.yml` manually!!!
If you want to just reuse all previous answers use `copier update --force`.
### [Migration across Copier major versions](https://copier.readthedocs.io/en/latest/updating/#migration-across-copier-major-versions)
When there's a new major release of Copier (for example from Copier 5.x to 6.x), there are chances that there's something that changed. Maybe your template will not work as it did before.
Copier needs to make a copy of the template in its old state with its old answers so it can actually produce a diff with the new state and answers and apply the smart update to the project. To overcome this situation you can:
- Write good [migrations](https://copier.readthedocs.io/en/latest/configuring/#migrations).
- Then you can test them on your template's CI on a matrix against several Copier versions.
- Or you can just [recopy the project](https://copier.readthedocs.io/en/latest/generating/#regenerating-a-project) when you update to a newer Copier major release.
## Tasks and migrations
[tasks](https://copier.readthedocs.io/en/latest/configuring/#tasks) are commands to execute after generating or updating a project from your template. They run ordered, and with the `$STAGE=task` variable in their environment.
```yaml
# copier.yml
_tasks:
    # Strings get executed under system's default shell
    - "git init"
    - "rm {{ name_of_the_project }}/README.md"
    # Arrays are executed without shell, saving you the work of escaping arguments
    - [invoke, "--search-root={{ _copier_conf.src_path }}", after-copy]
    # You are able to output the full conf to JSON, to be parsed by your script
    - [invoke, end-process, "--full-conf={{ _copier_conf|to_json }}"]
    # Your script can be run by the same Python environment used to run Copier
    - ["{{ _copier_python }}", task.py]
    # OS-specific task (supported values are "linux", "macos", "windows" and `None`)
    - >-
      {% if _copier_conf.os in ['linux', 'macos'] %}
      rm {{ name_of_the_project }}/README.md
      {% elif _copier_conf.os == 'windows' %}
      Remove-Item {{ name_of_the_project }}/README.md
      {% endif %}
```
Note: the example assumes you use Invoke as your task manager. But it's just an example. The point is that we're showing how to build and call commands.
[Migrations](https://copier.readthedocs.io/en/latest/configuring/#migrations) are like tasks, but each item in the list is a dict with these keys:
- `version`: Indicates the version that the template update has to go through to trigger this migration. It is evaluated using PEP 440.
- `before` (optional): Commands to execute before performing the update. The answers file is reloaded after running migrations in this stage, to let you migrate answer values.
- `after` (optional): Commands to execute after performing the update.
Migrations will run in the same order as declared in the file (so you could even run a migration for a higher version before running a migration for a lower version if the higher one is declared before and the update passes through both).
They will only run when new `version >= declared version > old version`. And only when updating (not when copying for the 1st time).
If the migrations definition contains Jinja code, it will be rendered with the same context as the rest of the template.
Migration processes will receive these environment variables:
- `$STAGE`: Either before or after.
- `$VERSION_FROM`: Git commit description of the template as it was before updating.
- `$VERSION_TO`: Git commit description of the template as it will be after updating.
- `$VERSION_CURRENT`: The version detector as you indicated it when describing migration tasks.
- `$VERSION_PEP440_FROM`, `$VERSION_PEP440_TO`, `$VERSION_PEP440_CURRENT`: Same as the above, but normalized into a standard PEP 440 version string indicator. If your scripts use these environment variables to perform migrations, you probably will prefer to use these variables.
```yaml
# copier.yml
_migrations:
    - version: v1.0.0
      before:
          - rm ./old-folder
      after:
          # {{ _copier_conf.src_path }} points to the path where the template was
          # cloned, so it can be helpful to run migration scripts stored there.
          - invoke -r {{ _copier_conf.src_path }} -c migrations migrate $VERSION_CURRENT
```
# Developing a copier template
## Avoid doing commits when developing
While you're developing it's useful to see the changes before making a commit, to do so you can use `copier copy -r HEAD ./src ./dst`. Keep in mind that you won't be able to use `copier update` so the changes will be applied incrementally, not declaratively. So if you make a file in an old run that has been deleted in the source, it won't be removed in the destination. It's a good idea then to remove the destination directory often.
## [Apply migrations only once](https://github.com/copier-org/copier/issues/240)
Currently `copier` allows you to run two kind of commands:
- Tasks: that run each time you either `copy` or `update`
- Migrations: That run only on `update`s if you're coming from a previous version
But there [isn't yet a way](https://github.com/copier-org/copier/issues/240) to run a task only on the `copy` of a project. Until there is you can embed inside the generated project's Makefile an `init` target that runs the init script. The user will then need to:
```
copier copy src dest
cd dest
make init
```
Not ideal but it can be a workaround until we have the `pre-copy` tasks.
Another solution I thought of is to:
- Create a tag `0.0.0` on the first valid commit of the template
- Create an initial migration script for version `0.1.0`. 
That way instead of doing `copier copy src dest` you can do:
```bash
copier copy -r 0.0.0 src dest
copier update
```
It will run over all the migrations steps you make in the future. A way to tackle this is to eventually release a `1.0.0` and move the `0.1.0` migration script to `1.1.0` using `copier copy -r 1.0.0 src dest`. 
However, @pawamoy thinks that this can eventually backfire because all the versions of the template will not be backward compatible with 0.0.0. If they are now, they probably won't be in the future. This might be because of the template itself, or because of the extensions it uses, or because of the version of Copier it required at the time of each version release. So this can be OK for existing projects, but not when trying to generate new ones.
## [Create your own jinja extensions](https://github.com/pawamoy/copier-pdm/blob/main/copier.yml)
You can create your own jinja filters. For example [creating an `extensions.py` file](https://github.com/pawamoy/copier-pdm/blob/main/extensions.py) with the contents:
```python
import re
import subprocess
import unicodedata
from datetime import date
from jinja2.ext import Extension
def git_user_name(default: str) -> str:
    return subprocess.getoutput("git config user.name").strip() or default
def git_user_email(default: str) -> str:
    return subprocess.getoutput("git config user.email").strip() or default
def slugify(value, separator="-"):
    value = unicodedata.normalize("NFKD", str(value)).encode("ascii", "ignore").decode("ascii")
    value = re.sub(r"[^\w\s-]", "", value.lower())
    return re.sub(r"[-_\s]+", separator, value).strip("-_")
class GitExtension(Extension):
    def __init__(self, environment):
        super().__init__(environment)
        environment.filters["git_user_name"] = git_user_name
        environment.filters["git_user_email"] = git_user_email
class SlugifyExtension(Extension):
    def __init__(self, environment):
        super().__init__(environment)
        environment.filters["slugify"] = slugify
class CurrentYearExtension(Extension):
    def __init__(self, environment):
        super().__init__(environment)
        environment.globals["current_year"] = date.today().year
```
Then you can [import it in your `copier.yaml` file](https://github.com/pawamoy/copier-pdm/blob/main/copier.yml):
```yaml
_jinja_extensions:
    - copier_templates_extensions.TemplateExtensionLoader
    - extensions.py:CurrentYearExtension
    - extensions.py:GitExtension
    - extensions.py:SlugifyExtension
author_fullname:
  type: str
  help: Your full name
  default: "{{ 'Timothée Mazzucotelli' | git_user_name }}"
author_email:
  type: str
  help: Your email
  default: "{{ 'PI:EMAIL' | git_user_email }}"
repository_name:
  type: str
  help: Your repository name
  default: "{{ project_name | slugify }}"
```
You'll need to install `copier-templates-extensions`, if you've installed `copier` with pipx you can:
```bash
pipx inject copier copier-templates-extensions
```
# References
- [Source](https://github.com/copier-org/copier)
- [Docs](https://copier.readthedocs.io/en/latest/)
- [Example templates](https://github.com/topics/copier-template)