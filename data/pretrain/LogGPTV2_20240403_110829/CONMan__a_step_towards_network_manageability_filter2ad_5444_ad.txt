the NM of their physical connectivity through the manage-
ment channel. Given the aforementioned goal, our NM im-
Module
{IP, MPLS}, Down: None, Phy:
Connectivity and Switching
Up: {IP, MPLS}, Down: None, Phy: to C1-S1,
Switching: [Phy ⇒ Up],[Up ⇒ Phy]
Up:
to
, Switching: [Phy ⇒ Up],[Up ⇒ Phy]
 Up: {IP}, Down: {ETH}, Phy: None, Switching:
[Down ⇒ Up],[Up ⇒ Down],[Down ⇒ Down]
{IP, GRE, MPLS,
Up:
ETH}, Phy: None, Switching:[Down ⇒ Up],[Up
⇒ Down],[Down ⇒ Down],[Up ⇒ Up]
{IP, GRE, MPLS,
Up:
ETH}, Phy: None, Switching:[Down ⇒ Up],[Up
⇒ Down],[Down ⇒ Down],[Up ⇒ Up]
Up: {IP}, Down: {IP}, Phy: None, Switching:
[Down ⇒ Up],[Up ⇒ Down]
{IP, GRE}, Down:
{IP, GRE}, Down:
Table 4: Connectivity and switching capabilities of the mod-
ules in device A.
GRE (l) 
IP (g) 
IP (h)  
MPLS (o) 
ETH (a)
ETH (b)  
LEGEND  
A
B
B
A
is an 
up-pipe for B &  
down-pipe for A
A 
A 
Module A has
[down         down]  
switching
Module A has  
[up        up]
switching
Physical pipe
Figure 6: Potential Connectivity sub-graph for device
A.
plementation invokes showPotential at these devices to deter-
mine the abstraction for the modules in these devices. Thus,
the NM has a network map akin to the one shown in ﬁg-
ure 5(b). This also provides the NM with information about
how the modules can be connected to each other and how they
can switch packets (shown in table 4). Based on this, the NM
constructs a graph of potential connectivity with modules as
“nodes” and up-down and physical pipes as “edges”. Figure 6
shows the device A part of this graph.
The NM also includes a path-ﬁnder component that can
ﬁnd all paths between any two modules in such a graph. To
do so, the component traverses the graph in a depth-ﬁrst
fashion while avoiding cycles. Further, we made two modiﬁ-
cations to the traversal: First, the NM knows that a module
encapsulates packets in a protocol header when using [up ⇒
down] and [up ⇒ phy] switching; for example an ETH mod-
ule adds an Ethernet header to packets that it sends out onto
a physical pipe. Similarly, a module decapsulates packets
when using [down ⇒ up] and [phy ⇒ up] switching. A mod-
ule processes the packet header but doesn’t remove or add
headers when using [phy ⇒ phy], [down ⇒ down] and [up ⇒
up] switching. The traversal keeps track of such encapsula-
tion and decapsulation by the modules along the path and
hence, restricts itself to paths that are “sane” in the protocol
sense. For instance, assuming that the path shown in ﬁg-
ure 7(a) is the path already traversed, this rule implies that
the next module should be able to decapsulate or process an
IP header and hence, the only possible next module is the IP
module in device B, . This also allows the NM to
determine modules that are peers of each other; in the path
above,  decapsulates the encapsulation put in by
 and hence, they are peers.
Second, the NM is aware of the notion of public and private
addresses and the traversal uses this information to rule out
invalid paths. For instance, the path shown in ﬁgure 7(b) is
an invalid path as it makes IP modules g and i peers even
Router A
IP (g)  
Peers denoted by
Router B
? 
Router A
IP (g)  
Router B
IP (i)  
ETH (a)
ETH (b) 
ETH (c)
ETH (a)
ETH (b)  
ETH (c)   
(a) 
(b)
Figure 7: Options explored by the NM’s path ﬁnder.
though g is assigned a private address while i is assigned a
public address.
For the given goal, the NM directs the path-ﬁnder to ﬁnd
paths between modules  and . We
were expecting the NM to generate the following three paths
(we only show the module-id for each module along the path):
1). Using IP-IP tunnel: a, g, h, b, c, i, d, e, j, k, f.
2). Using GRE-IP tunnel: a, g, l, h, b, c, i, d, e, j, n, k, f.
3). Using MPLS: a, g, o, b, c, p, d, e, q, k, f.
However, the NM generated six more paths: IP-IP over MPLS,
GRE-IP over MPLS, IP-IP over MPLS only between A and
B, IP-IP over MPLS only between B and C, GRE-IP over
MPLS only between A and B, and GRE-IP over MPLS only
between B and C.4 While this suggests that we should use
more aggressive pruning rules for our traversal, it also shows
that the NM can determine the various ways of achieving
a high-level goal given the capabilities of the devices in the
network. As a contrast, today it is the human managing the
network that relies on RFCs and device manuals to determine
the options available.
The NM now needs to be able to choose amongst the paths
based on high-level directives and/or other metrics. We im-
plemented a very simple algorithm that minimizes the total
number of pipes instantiated in the routers. This is, in some
sense, akin to minimizing the amount of state on the routers
and the communication overhead on the NM. For the scenario
in question, the MPLS-based path and the IP-IP tunnel are
the best options (our NM implementation prefers the MPLS-
based path because the MPLS abstraction mentions that it
oﬀers good forwarding bandwidth). We can also think of more
sophisticated metrics such as the performance capabilities of
the modules along the path or satisfying security constraints.
Moreover, while the ability to choose amongst possible conﬁg-
urations without protocol-speciﬁc knowledge is critical to the
CONMan argument, this is an area that we haven’t explored
in any detail and is an avenue for future work.
As described in the previous section, once a path is cho-
sen, the NM automatically generates the script of CONMan
primitives needed to create the path.
3.3.2 Comparing to the status quo
For each path in the example above, we directed the NM to
generate the CONMan primitives needed to create the path.
These primitives were invoked at the modules in the devices
(routers A, B and C) to conﬁgure them. Since the modules
are implemented as wrappers around existing protocol im-
plementations, they in turn generate the device-level scripts
from the CONMan primitives. It is the management plane
that needs to generate these device-level scripts with today’s
4Typically, ISPs use MPLS-over-MPLS [33] or MPLS-over-
GRE [40] for VPN support. Both these conﬁgurations are
not supported by the Linux hosts used for our experiments
and hence, the NM cannot propose these paths.
setup. Below we compare the conﬁgurations for two of these
paths: the GRE-IP and the MPLS path.
Figure 8(a) shows a Linux conﬁguration snippet at router
A that establishes a GRE tunnel to router C and carries traf-
ﬁc between sites S1 and S2 of customer C1. As a contrast,
the desired module connectivity and the CONMan commands
invoked by the NM at router A to achieve this are shown in
ﬁgure 8(b). These commands were explained in section 3.2.
Similarly, ﬁgures 9 shows the Linux and CONMan conﬁgura-
tion snippet needed to establish the MPLS path.
Note that while our testbed capabilities constrained us
to Layer-3 VPNs, some ISPs establish VPN connectivity at
Layer-2. This is typically achieved using Ethernet-over-MPLS
or PPP-over-L2TP. Recently, VLAN tunneling has been pro-
posed as another means of doing so [41] and as the use of
Ethernet in wide-area networks increases, this could be a
future VPN technology. Consequently, we also present the
Cisco CatOS and CONMan conﬁguration snippet to estab-
lish a VLAN tunnel in ﬁgure 10.
The ﬁgures show that conﬁguration today requires the man-
agement plane to specify a lot of low-level details. As a result,
it is diﬃcult to build management applications that
automatically generate these conﬁgurations. Instead,
many management applications provide a better user inter-
face and/or some syntactic sugar to the human manager (this
is useful in itself). Even with these applications, the human
manager still needs to provide the speciﬁcs and this leaves the
door open for many kinds of errors; for instance, some error
possibilities in ﬁgure 8(a) include not conﬁguring device A as
a router (command 4), misconﬁguring the underlying routing
so that traﬃc from the wrong customer goes into a tunnel
or the tunneled traﬃc is delivered to the wrong customer at
the other end (commands 5-9), conﬁguring the tunnel end
points with the wrong key values (command 2), using tun-
nel end point IP addresses that are wrong or do not have IP
connectivity between them (command 2), etc.
The CONMan scripts do not appear any-less-fragile. How-
ever, the human manager doesn’t need to see, much
less write, these scripts. All the identiﬁers in the script,
such as the module and device identiﬁers, are exposed by
the devices themselves and learnt by the NM through show-
Potential. Further, there is very little protocol-speciﬁc in-
formation in CONMan scripts and hence, an automated
NM can generate the commands and other details al-
gorithmically without incorporating protocol-speciﬁc
knowledge. Also, the similarity in the CONMan scripts
for three completely diﬀerent protocols can be seen as retro-
spective (yet relevant) evidence of CONMan decoupling the
management plane from data-plane evolution.
To quantify the protocol-agnosticity of CONMan, we coun-
-ted the number of protocol-speciﬁc commands and state vari-
ables in the scripts. Table 5 shows that today’s scripts have
far more protocol-speciﬁc commands and state-variables. As
mentioned earlier, the instances of protocol-speciﬁc state vari-
ables in CONMan scripts (such as C1-S2 representing the IP
preﬁx for customer1-site2 on line (3) of ﬁgure 8(b)) result
from the fact that our current eﬀort is restricted to man-
agement in a single domain. On the other hand, CONMan
scripts have more generic state-variables. This is an outcome
of both the verbose nature of the existing CONMan primi-
tives and the fact that CONMan requires the NM to specify
a lot of well-structured and systematically learnt generic in-
formation which the protocol modules then use to determine
#!/bin/bash
# Insert the GRE-IP kernel module
(1) insmod /lib/modules/2.6.14-2/ip gre.ko
# Create the GRE tunnel with the appropriate key
(2) ip tunnel add name greA mode gre remote 204.9.169.1 local
204.9.168.1 ikey 1001 okey 2001 icsum ocsum iseq oseq
(3) ifconﬁg greA 192.168.3.1
# Enable Routing
(4) echo 1 > /proc/sys/net/ipv4/ip forward
# Create IP routing from customer to tunnel
(5) echo 202 tun-1-2 >> /etc/iproute2/rt tables
(6) ip rule add to 10.0.2.0/24 table tun-1-2
(7) ip route add default dev greA table tun-1-2
# Create IP routing from tunnel to customer
(8) echo 203 tun-2-1 >> /etc/iproute2/rt tables
(9) ip rule add iff greA table tun-2-1
(10) ip route add default dev eth1 table tun-2-1
(11) ip route add to 204.9.169.1 via 204.9.168.2 dev eth2
Customer 1
Site 1
Router D 
Router A
Router B 
Router C
IP  (g)
GRE (l)
IP  (i)
GRE (n)
IP  (k)  
IP  (h)   
IP  (j)
Eth (a)    Eth (b)   
Eth (c)    Eth (d)   
Eth (e)    Eth (f)   
Phy Pipe (P4)
Customer 1 
Site 2
Router E
(1).
in-order delivery, trade-off: error-rate)
P0 = create (pipe, , , None, None, None)
(2). P1 = create (pipe, , , , ,
(3) create (switch, , [P0, dst:C1-S2 ⇒ P1])
trade-off:
(4) create (switch, , [P1 ⇒ P0, S2-gateway])
(5). P2 = create (pipe, , , , , None)
(6).
(7). P3 = create (pipe, , , , , None)
(8).
create (switch, , P1, P2)
(a) Conﬁguration “Today”
(9).
create (switch, , P2, P3)
create (switch, , P3,P4)
Figure 8: VPN connectivity between sites S1 and S2 of customer C1 through a GRE-IP tunnel between A and C.
(b) CONMan conﬁguration
#!/bin/bash
# Instantiating MPLS kernel modules
modprobe mpls
modprobe mpls4
# MPLS LSP for traffic from S2->S1
mpls labelspace set dev eth2 labelspace 0
mpls ilm add label gen 10001 labelspace 0
KEY-S2-S1=‘mpls
eth1 ipv4 192.168.0.1 | grep key | cut -c 17-26‘
mpls
$KEY-S2-S1
# MPLS LSP for traffic from S1->S2
KEY-S1-S2=‘mpls nhlfe add key 0 mtu 1500 instructions push gen
2001 nexthop eth2 ipv4 204.9.168.2 | grep key | cut -c 17-26‘
echo 1> /proc/sys/net/ipv4/ip forward
ip route add 10.0.2.0/24 via 204.9.168.2 mpls $KEY-S1-S2
xc add ilm label gen 10001 ilm labelspace 0 nhlfe key
nhlfe add key 0 mtu 1500 instructions nexthop
(a) Conﬁguration “Today”
Customer 1
Site 1
Router D 
Router A
Router B 
Router C
IP  (g)
MPLS (o)  
IP  (i)
MPLS(q) 
IP  (k)  
IP  (h)   
MPLS (p)
IP  (j)
Eth (a)    Eth (b)   
Eth (c)    Eth (d)   
Eth (e)    Eth (f)   
Phy Pipe (P4)
Customer 1 
Site 2
Router E
None)
P0 = create (pipe, , , None, None, None)
P1 = create (pipe, , , , ,
create (switch, , [P0, dst:C1-S2 ⇒ P1])
create (switch, , [P1 ⇒ P0, S2-gateway])
P2 = create (pipe, , , , ,
None)
create (switch, , P1, P2)
create (switch, , P2, P4)
(b) CONMan conﬁguration
Figure 9: VPN connectivity between sites S1 and S2 of customer C1 using a MPLS LSP through router A, B and C.
Generic Commands
Speciﬁc Commands
Generic State Var.
Speciﬁc State Var.
GRE
T
1
6
9
11
C
2
0
21
2
MPLS
C
T
2
1
6