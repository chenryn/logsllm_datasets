mented as a combination of a secure loader and an extended
version of the libdetox [37] sandbox. TRuE integrates the
information from the loader into the security guards. The
secure loader initializes the sandbox before any application
24
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
or library code is loaded or executed. All application and
library code is then executed in the sandbox4.
The secure loader uses ELF information and symbol table
information [41] and implements all needed functionality to
load most programs (e.g., OpenOfﬁce, and the SPEC CPU
benchmarks).
The SFI platform is tightly coupled with the secure loader.
The loader ﬁrst maps libdetox into the address space and
initializes the SFI platform. This special treatment ensures
that the SFI platform is initialized and that the application
has no access to or knowledge of the sandbox domain. The
next steps are the relocation of the application and all needed
shared objects. The loader controls all data that is passed to
the application and runs all user code under the control of
the SFI platform.
The prototype implementation of TRuE is small. Accord-
ing to ohcount5 the secure loader consists of around 5,400
lines of code (including 2,100 lines of comments) and the
sandbox platform consists of around 20,200 lines of code
(including 5,000 lines of comments and 4,900 lines for the
full IA32 translation tables6).
A. Application and library loading
The secure loader implements the most common subset
of features from the standard loader. Some features (e.g.,
overwriting library search paths, runtime debugging, or de-
bugging features that execute user-supplied code for speciﬁc
events) are removed and not implemented out of security
concerns. Unimplemented features result in an error message
and graceful termination of the program. The current imple-
mentation prototype covers the core functionality needed to
execute in practice any ELF programs of Ubuntu 11.04 that
originally use the standard loader (i.e., any ELF program
that uses shared libraries). Further options (e.g., obscure
relocation patterns, additional callbacks from the application
into the loader, and access to internal loader data7) can be
added if needed.
The standard loader has no protection for internal data
structures and leaks pointers to the internal data structures
to the application. The API of the secure loader that is
accessible from the application (e.g., dlopen, dladdr,
and dlsym) ensures that no protected internal data is leaked
to the application. The sandbox write-protects all internal
data whenever (translated) application code is executed by
using mprotect on all memory regions of the sandbox.
4The source code of the prototype implementation of TRuE is available
as open-source at http://nebelwelt.net/projects/TRuE.
5ohcount is a tool to measure different code metrics like lines of code.
6The IA32 translation tables contain detailed information about all IA32
instructions. The translation tables enable the BT to decode and to translate
individual IA32 instructions.
7GDB uses undocumented direct access to the internal data from the
loader to get more information about individual symbols. This feature can
be implemented as a proxy that projects information out of the secure loader
if needed.
The secure loader must handle the startup of new applica-
tions. First of all the loader is completely independent from
any libraries (even the standard libc) and is just mapped
into memory. This loader then examines the ELF headers
of the application and maps the runtime sections of the
application to a ﬁxed address in memory. Then the list of
needed libraries is examined and entries are added to a “to-
process-list”. The loader dequeues one entry at a time and
loads and initializes this library at random addresses. If the
library depends on other libraries then they are added at
the end of the “to-process-list”. This algorithm conforms
to a breadth-ﬁrst traversal of the dependence graph of the
application starting with the application as the root node.
References to needed libraries only contain the name of
the library but not the path. When the loader locates a new
library several paths are examined: ﬁrst a per-DSO variable
that speciﬁes one or more search paths per DSO, then the
standard search paths deﬁned in /etc/ld.so.conf. The
standard libc loader also supports additional search directo-
ries using the LD_LIBRARY_PATH environment variable
and the local cache ﬁle /etc/ld.so.cache. Out of
security reasons the secure loader does not support runtime-
conﬁgurable paths.
B. Symbol resolving
The loader resolves symbols using the symbol tables in
the different shared objects. Every shared object contains
the .dynsym table with all exported symbols. If the loader
needs to resolve an imported symbol then the loader checks
different lookup scopes. The loader deﬁnes three different
lookup scopes that are checked one after the other:
1) Loader scope: this scope contains the symbols that
are exported by the secure loader. The loader scope
is checked ﬁrst and symbols in this scope cannot be
overwritten.
2) Local scope: the local scope of a DSO contains its
own symbols and the symbols of all libraries that the
DSO depends on. This scope is a subset of the global
scope.
3) Global scope: shared objects that are in the initial
set of objects loaded during the startup of the ap-
plication (e.g., all objects in the dependence graph)
or shared objects that are loaded at runtime with the
RTLD_GLOBAL ﬂag set are in the global scope.
A special feature is symbol versioning where symbols can
be deﬁned multiple times with different versions. The correct
symbol is then selected based on a matching version.
The secure loader supports the GNU IFUNC relocation
format (STT_GNU_IFUNC) where a piece of code is ex-
ecuted to determine the correct
location of the symbol.
This feature is, e.g., used in the libc to select between
multiple implementations of a function. The test function
checks if a speciﬁc CPU feature is available and returns the
most optimized version for the current environment. The
25
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
Nr
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
68
Name
.note.gnu.build-i
.note.ABI-tag
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version d
.gnu.version r
.rel.dyn
.rel.plt
.plt
.text
libc freeres fn
libc thread fre
.rodata
.interp
.eh frame hdr
.eh frame
.gcc except table
.hash
.tdata
.tbss
.ﬁni array
.ctors
.dtors
libc subfreeres
libc atexit
libc thread sub
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
...
not allocated
Type
NULL
NOTE
NOTE
GNU HASH
DYNSYM
STRTAB
VERSYM
VERDEF
VERNEED
REL
REL
PROGBITS
PROGBITS
PROGBITS
PROGBITS
PROGBITS
PROGBITS
PROGBITS
PROGBITS
PROGBITS
HASH
PROGBITS
NOBITS
FINI ARRAY
PROGBITS
PROGBITS
PROGBITS
PROGBITS
PROGBITS
PROGBITS
DYNAMIC
PROGBITS
PROGBITS
PROGBITS
NOBITS
Size
0
24
0x20
0x3c38
9200
005acd
0x1240
0x3d8
0x40
0x2a20
0x40
0x90
0x1088d4
0xfc8
0x182
0x1b808
0x13be68
0x333c
0x132b4
0x5c1
0x3484
0x8
0x38
0x4
0x14
0x8
0x70
0x4
0xc
0x1afc
0xf0
0x174
0x2c
0x97c
0x3068
Flags
R
R
R
R
R
R
R
R
R
R
RX
RX
RX
RX
R
R
R
R
R
R
RWT
RWT
RW
RW
R
RW
RW
RW
RW
RW
RW
RW
RW
RW
Table I
THESE SECTIONS OF THE STANDARD LIBC ARE MAPPED AT RUNTIME
USING THE GIVEN FLAGS (X - EXECUTE, W - WRITABLE, R -
READABLE, T - THREAD LOCAL STORAGE). COMMAND USED TO GET
THIS INFORMATION: R E A D E L F -S /L I B32/L I B C-2.13.S O.
loader then uses this function pointer and forwards it to the
requesting DSO where the function pointer can be embedded
in the GOT.
C. Memory protection
One of the advantages of a secure loader is that all loader-
related data structures can be write-protected. The secure
loader manages two kinds of data structures, internal data
structures and application data structures.
Internal data structures contain information about the dif-
ferent relations between shared objects, scope information,
and other details about the loaded objects. This information
is updated by the secure loader whenever new shared objects
(e.g., additional shared libraries) are loaded and initialized.
The secure loader maps these data structures read-only
whenever application code is executed.
Shared objects contain data structures that are only
changed by the loader and are only read by the appli-
cation. If we take the standard libc 2.13 as an example
.ctors,
.ﬁni array,
libc subfreeres,
we see in Table I that there are 34 ELF sections that are
mapped to memory. 11 sections are mapped writable (.tdata,
libc atexit,
.tbss,
libc thread sub, .data.rel.ro, .dynamic, .got, .got.plt, .data,
.bss) and 1 section (.dtors) is marked read-only but on
the same memory page as .ctors and is therefore writable
as well. Most of these sections are used only during the
initialization of the shared object. The sections .data.rel.ro,
.dynamic, .got, .got.plt are critical for the loader and can
be used in attacks against a classic sandbox that does not
integrate the loader into the security concept. The standard
loader maps .data.rel.ro as read-only after the initialization
but the other sections remain writable. Out of the writable
set of sections only .data and .bss are used by the libc code.
The secure loader write-protects all sections except .data
and .bss dynamically to protect the application from mod-
iﬁcation attacks in these sections whenever translated ap-
plication code is executed. If the secure loader needs to
update write-protected structures (e.g., a GOT entry) then
the write-permission is set temporarily during the update in
the sandbox domain. The write-permission is removed when
returning to the application domain.
D. Loader optimizations
The secure loader currently implements two optimiza-
tions, lazy binding and PLT inlining.
Lazy binding reduces the amount of relocations that have
to be calculated when a library is loaded. Only symbols in
the data region are relocated but symbols in the PLT region
are only resolved and relocated when the function is exe-
cuted the ﬁrst time. This optimization is also implemented
in the standard loader.
The implementation of PLT inlining follows the design
in Section V-C and uses the close relationship between the
secure loader and the sandbox. The sandbox intercepts all
call instructions and checks for each instruction if the call is
a PLT call. The secure loader then resolves the static target
address of the PLT target. The original call and indirect
jump of the PLT call are then replaced by a translated call
instruction to the resolved target. This removes an indirect
jump including an indirect control ﬂow check for every PLT
call that is executed.
During the loading process weak symbols of prior DSOs
can be overwritten by symbols in the current DSO. Library
loading forces all threads to trap into the sandbox domain
and to ﬂush their code caches. If the weak symbol points
to a function and this function was inlined (through a PLT
slot) then the sandbox has an invalid reference in the code
cache and must therefore ﬂush the code cache to retranslate
the given PLT slot.
E. Handling of the sandbox
The secure loader handles the sandbox in a special way.
The loader resolves the additional sandbox code before any
26
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
shared library or application code is loaded and initialized.
The symbols of the TRuE framework are also resolved in a
protected scope that is only accessible by the secure loader
and the sandbox.
Any application or library code that is then executed
during the initialization phase is executed under the control