(Eds.). ACM Press, 784‚Äì796. https://doi.org/10.1145/2382196.2382279
[9] Mihir Bellare and Gregory Neven. 2006. Multi-signatures in the plain public-Key
model and a general forking lemma. In ACM CCS 2006, Ari Juels, Rebecca N.
Wright, and Sabrina De Capitani di Vimercati (Eds.). ACM Press, 390‚Äì399. https:
//doi.org/10.1145/1180405.1180453
[10] Mihir Bellare and Phillip Rogaway. 1993. Random Oracles are Practical: A Par-
adigm for Designing Efficient Protocols. In ACM CCS 93, Dorothy E. Denning,
Raymond Pyle, Ravi Ganesan, Ravi S. Sandhu, and Victoria Ashby (Eds.). ACM
Press, 62‚Äì73. https://doi.org/10.1145/168588.168596
[11] Eli Ben-Sasson, Alessandro Chiesa, Matthew Green, Eran Tromer, and Madars
Virza. 2015. Secure Sampling of Public Parameters for Succinct Zero Knowledge
Proofs. In 2015 IEEE Symposium on Security and Privacy. IEEE Computer Society
Press, 287‚Äì304. https://doi.org/10.1109/SP.2015.25
[12] Eli Ben-Sasson, Alessandro Chiesa, Eran Tromer, and Madars Virza. 2014. Scalable
Zero Knowledge via Cycles of Elliptic Curves. In CRYPTO 2014, Part II (LNCS,
Vol. 8617), Juan A. Garay and Rosario Gennaro (Eds.). Springer, Heidelberg, 276‚Äì
294. https://doi.org/10.1007/978-3-662-44381-1_16
[13] Manuel Blum, Paul Feldman, and Silvio Micali. 1988. Non-Interactive Zero-
Knowledge and Its Applications (Extended Abstract). In 20th ACM STOC. ACM
Press, 103‚Äì112. https://doi.org/10.1145/62212.62222
[14] Sean Bowe. 2016. Pay-to-sudoku. https://github.com/zcash-hackworks/pay-to-
[15] Sean Bowe, Ariel Gabizon, and Matthew D. Green. 2019. A Multi-party Protocol
for Constructing the Public Parameters of the Pinocchio zk-SNARK. In FC 2018
Workshops (LNCS, Vol. 10958), Aviv Zohar, Ittay Eyal, Vanessa Teague, Jeremy
Clark, Andrea Bracciali, Federico Pintore, and Massimiliano Sala (Eds.). Springer,
Heidelberg, 64‚Äì77. https://doi.org/10.1007/978-3-662-58820-8_5
[16] Vitalik Buterin. 2013. A next-generation smart contract and decentralized appli-
cation platform. https://github.com/ethereum/wiki/wiki/White-Paper. White
Paper 3 (2013). Issue 37.
[17] Jan Camenisch and Markus Stadler. 1997. Proof Systems for General Statements
about Discrete Logarithms.
[18] Matteo Campanelli, Rosario Gennaro, Steven Goldfeder, and Luca Nizzardo. 2017.
Zero-Knowledge Contingent Payments Revisited: Attacks and Payments for
Services. In ACM CCS 2017, Bhavani M. Thuraisingham, David Evans, Tal Malkin,
and Dongyan Xu (Eds.). ACM Press, 229‚Äì243. https://doi.org/10.1145/3133956.
3134060
[19] Melissa Chase, Chaya Ganesh, and Payman Mohassel. 2016. Efficient Zero-
Knowledge Proof of Algebraic and Non-Algebraic Statements with Applications
to Privacy Preserving Credentials. In CRYPTO 2016, Part III (LNCS, Vol. 9816),
Matthew Robshaw and Jonathan Katz (Eds.). Springer, Heidelberg, 499‚Äì530. https:
//doi.org/10.1007/978-3-662-53015-3_18
[20] Tung Chou and Claudio Orlandi. 2015. The Simplest Protocol for Oblivious
Transfer. In LATINCRYPT 2015 (LNCS, Vol. 9230), Kristin E. Lauter and Francisco
Rodr√≠guez-Henr√≠quez (Eds.). Springer, Heidelberg, 40‚Äì58. https://doi.org/10.
1007/978-3-319-22174-8_3
[21] Richard Cleve. 1986. Limits on the Security of Coin Flips when Half the Processors
Are Faulty (Extended Abstract). In 18th ACM STOC. ACM Press, 364‚Äì369. https:
//doi.org/10.1145/12130.12168
[22] Ronald Cramer. 1997. Modular Design of Secure yet Practical Cryptographic
Protocols. Ph.D. Dissertation. University of Amsterdam.
[23] George Danezis, C√©dric Fournet, Jens Groth, and Markulf Kohlweiss. 2014.
Square Span Programs with Applications to Succinct NIZK Arguments. In ASI-
ACRYPT 2014, Part I (LNCS, Vol. 8873), Palash Sarkar and Tetsu Iwata (Eds.).
Springer, Heidelberg, 532‚Äì550. https://doi.org/10.1007/978-3-662-45611-8_28
[24] Alex Escala, Gottfried Herold, Eike Kiltz, Carla R√†fols, and Jorge Villar. 2013. An
Algebraic Framework for Diffie-Hellman Assumptions. In CRYPTO 2013, Part II
(LNCS, Vol. 8043), Ran Canetti and Juan A. Garay (Eds.). Springer, Heidelberg,
129‚Äì147. https://doi.org/10.1007/978-3-642-40084-1_8
[25] Uriel Feige and Adi Shamir. 1990. Witness Indistinguishable and Witness Hiding
Protocols. In 22nd ACM STOC. ACM Press, 416‚Äì426. https://doi.org/10.1145/
100216.100272
[26] Georg Fuchsbauer. 2018. Subversion-Zero-Knowledge SNARKs. In PKC 2018,
Part I (LNCS, Vol. 10769), Michel Abdalla and Ricardo Dahab (Eds.). Springer,
Heidelberg, 315‚Äì347. https://doi.org/10.1007/978-3-319-76578-5_11
[27] Georg Fuchsbauer. 2019. WI Is Not Enough: Zero-Knowledge Contingent (Service)
Payments Revisited. In ACM CCS 2019, Lorenzo Cavallaro, Johannes Kinder,
XiaoFeng Wang, and Jonathan Katz (Eds.). ACM Press, 49‚Äì62. https://doi.org/10.
1145/3319535.3354234
[28] Ariel Gabizon. 2019. On the security of the BCTV Pinocchio zk-SNARK variant.
Cryptology ePrint Archive, Report 2019/119. https://eprint.iacr.org/2019/119.
[29] Rosario Gennaro, Craig Gentry, Bryan Parno, and Mariana Raykova. 2013. Qua-
dratic Span Programs and Succinct NIZKs without PCPs. In EUROCRYPT 2013
(LNCS, Vol. 7881), Thomas Johansson and Phong Q. Nguyen (Eds.). Springer,
Heidelberg, 626‚Äì645. https://doi.org/10.1007/978-3-642-38348-9_37
[30] Oded Goldreich and Yair Oren. 1994. Definitions and Properties of Zero-
Knowledge Proof Systems. Journal of Cryptology 7, 1 (Dec. 1994), 1‚Äì32. https:
//doi.org/10.1007/BF00195207
[31] Shafi Goldwasser, Silvio Micali, and Charles Rackoff. 1985. The Knowledge
Complexity of Interactive Proof-Systems (Extended Abstract). In 17th ACM STOC.
ACM Press, 291‚Äì304. https://doi.org/10.1145/22145.22178
[32] Shafi Goldwasser, Silvio Micali, and Charles Rackoff. 1989. The Knowledge
Complexity of Interactive Proof Systems. SIAM J. Comput. 18, 1 (1989), 186‚Äì208.
[33] Jens Groth. 2016. On the Size of Pairing-Based Non-interactive Arguments. In
EUROCRYPT 2016, Part II (LNCS, Vol. 9666), Marc Fischlin and Jean-S√©bastien
Coron (Eds.). Springer, Heidelberg, 305‚Äì326. https://doi.org/10.1007/978-3-662-
49896-5_11
[34] Jens Groth and Markulf Kohlweiss. 2015. One-Out-of-Many Proofs: Or How to
Leak a Secret and Spend a Coin. In EUROCRYPT 2015, Part II (LNCS, Vol. 9057),
Elisabeth Oswald and Marc Fischlin (Eds.). Springer, Heidelberg, 253‚Äì280. https:
//doi.org/10.1007/978-3-662-46803-6_9
[35] Marek Jawurek, Florian Kerschbaum, and Claudio Orlandi. 2013. Zero-knowledge
using garbled circuits: how to prove non-algebraic statements efficiently. In ACM
CCS 2013, Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti Yung (Eds.). ACM
Press, 955‚Äì966. https://doi.org/10.1145/2508859.2516662
[36] Gregory Maxwell. 2011. Zero Knowledge Contingent Payment. https://en.bitcoin.
it/wiki/Zero_Knowledge_Contingent_Payment.
[37] Satoshi Nakamoto. 2009. Bitcoin: A Peer-to-Peer Electronic Cash System. Cryp-
tography Mailing list at https://metzdowd.com (03 2009).
[38] Bryan Parno, Jon Howell, Craig Gentry, and Mariana Raykova. 2013. Pinocchio:
Nearly Practical Verifiable Computation. In 2013 IEEE Symposium on Security and
Privacy. IEEE Computer Society Press, 238‚Äì252. https://doi.org/10.1109/SP.2013.
47
[39] David Pointcheval and Jacques Stern. 2000. Security Arguments for Digital
Signatures and Blind Signatures. Journal of Cryptology 13, 3 (June 2000), 361‚Äì396.
https://doi.org/10.1007/s001450010003
[40] Claus-Peter Schnorr. 1991. Efficient Signature Generation by Smart Cards. Journal
of Cryptology 4, 3 (Jan. 1991), 161‚Äì174. https://doi.org/10.1007/BF00196725
[41] Nick Szabo. 1997. Formalizing and Securing Relationships on Public Networks.
https://firstmonday.org/ojs/index.php/fm/article/view/548. First Monday 2, 9
(Sep. 1997). https://doi.org/10.5210/fm.v2i9.548
[42] Florian Tramer, Fan Zhang, Huang Lin, Jean-Pierre Hubaux, Ari Juels, and Elaine
Shi. 2016. Sealed-Glass Proofs: Using Transparent Enclaves to Prove and Sell
Knowledge. Cryptology ePrint Archive, Report 2016/635. http://eprint.iacr.org/
2016/635.
[43] Xiao Wang, Alex J. Malozemoff, and Jonathan Katz. 2016. EMP-toolkit: Efficient
MultiParty computation toolkit. https://github.com/emp-toolkit.
[44] The Bitcoin Wiki. 2019. Hashlock. https://en.bitcoin.it/wiki/Hashlock.
[45] Gavin Wood. 2014. Ethereum: A secure decentralized generalized transaction
ledger. https://gavwood.com/paper.pdf.
[46] Samee Zahur, Mike Rosulek, and David Evans. 2015. Two Halves Make a Whole -
Reducing Data Transfer in Garbled Circuits Using Half Gates. In EUROCRYPT 2015,
Part II (LNCS, Vol. 9057), Elisabeth Oswald and Marc Fischlin (Eds.). Springer,
Heidelberg, 220‚Äì250. https://doi.org/10.1007/978-3-662-46803-6_8
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9‚Äì13, 2020, Virtual Event, USA653A ADDITIONAL DEFINITIONS
A.1 Witness indistinguishability
In the security game for standard witness indistinguishability, an
adversary A can adaptively query an oracle that takes a statement
ùë• and two witnesses for it, ùë§0, ùë§1, and answers back with a proof
generated with one of the witnesses (the oracle always uses the
first witness or always the second). The adversary has to decide
which witness the oracle is using.
Definition A.1 (WI). A NI proof system Œ† with respect to a re-
lation generator RG is witness indistinguishable if for every ppt
adversary A, the following advantage is negligible in ùúÖ,
(cid:12)(cid:12)(cid:12)(cid:12)Pr(cid:104)WIŒ†,RG
A
(ùúÖ)(cid:105) ‚àí 1
2
(cid:12)(cid:12)(cid:12)(cid:12)
.
Adv
Œ†,A(ùúÖ) (cid:66)
WI
Subversion witness indistinguishability. Subversion witness indis-
tinguishability [7] requires that the proof system remain WI even
when the crs is maliciously generated by the adversary.
Definition A.2 (S-WI). A NI proof system Œ† with respect to a
relation generator RG is subversion witness indistinguishable if for
every ppt adversary A, the following advantage is negligible in ùúÖ,
(cid:12)(cid:12)(cid:12)(cid:12)Pr(cid:104)S-WIŒ†,RG
A
(ùúÖ)(cid:105) ‚àí 1
2
(cid:12)(cid:12)(cid:12)(cid:12)
.
Adv
Œ†,A (ùúÖ) (cid:66)
S-WI
(cid:20) (ùëù, ùê∫, ùëÉ) ‚Üê G(1ùúÖ);
A.2 Discrete logarithm
Definition A.3 (Dlog). The discrete logarithm assumption holds
with respect to a group generator G if for every ppt adversary A,
the following advantage is negligible in ùúÖ,
AdvdlogG,A(ùúÖ) (cid:66) Pr
A.3 Forking Lemma
This lemma was first introduced by Pointcheval and Stern [39] and
later generalized by Bellare and Neven [9].
: ùë• ‚Üê A(ùëù, ùê∫, ùëÉ, ùë•ùëÉ)
ùë• ‚Üê$ Zùëù
(cid:21)
.
Lemma A.4 (Forking Lemma). Let ùëû ‚â• 1 be an integer and let ùêª
be a set, with |ùêª| ‚â• 2. Let A be a randomized algorithm that on input
ùë•, ‚Ñé1, . . . , ‚Ñéùëû, returns a pair, where the first element is an integer in
[0, ùëû] and the second is called the side output. Let X be a randomized
algorithm (called the input generator). Let the accepting probability
of A, denoted by ùúå, be defined as:
Pr(cid:104)ùë• ‚Üê X; ‚Ñé1, . . . , ‚Ñéùëû ‚Üê$ ùêª; (ùêΩ, ùúá) ‚Üê A(ùë•, ‚Ñé1, . . . , ‚Ñéùëû) : ùêΩ ‚â• 1(cid:105)
.
Let the forking algorithm EA (based on A) be defined as follows:
EA(ùë•) :
pick coins ùëü for A at random
sample ‚Ñé1, . . . , ‚Ñéùëû ‚Üê$ ùêª
run (ùêº, ùúá1) ‚Üê A(ùë•, ‚Ñé1, . . . , ‚Ñéùëû; ùëü)
if ùêº = 0, return (0,‚ä•)
sample ÀÜ‚Ñéùêº , . . . , ÀÜ‚Ñéùëû ‚Üê$ ùêª
run (ùêº2, ùúá2) ‚Üê A(ùë•, ‚Ñé1, . . . , ‚Ñéùêº‚àí1, ÀÜ‚Ñéùêº , . . . , ÀÜ‚Ñéùëû; ùëü)
if ùêº = ùêº2 and ‚Ñéùêº ‚â† ÀÜ‚Ñéùêº:
return (1, (ùúá1, ùúá2))
return (0,‚ä•)
It holds:
Pr [ùë• ‚Üê X; (ùëè, (cid:174)ùúá) ‚Üê EA(ùë•) : ùëè = 1] ‚â• ùúå2
‚àí 2 ùúå
|ùêª|
.
ùëû
Proof. The proof of this lemma can be done by using the fact
that for any real-valued random variable ùëã that only takes positive
values, it holds ùê∏[ùëã 2] ‚â• ùê∏[ùëã]2. This is a fact that can be derived
from Jensen‚Äôs inequality9, since function ùúë(ùë•) (cid:66) ùë•2 is convex. We
refer to [9] for a complete proof.
‚ñ°
B PROOFS OF THE MAIN BODY
B.1 Proof of Theorem 3.3
In order to prove Theorem 3.3, we will use the following lemma.
Lemma B.1. Let E (cid:66) (Gen, Enc, Dec) be an encryption scheme
and let ùêπùúÖ : {0, 1}‚àó‚Üí {0, 1}ùúÖ be a random oracle for every ùúÖ ‚â• 1. Let
O0 and O1 be oracles that take an input in {0, 1}‚àó and are defined as:
ùëü ‚ÜêGen(1ùúÖ); return(cid:0)Encùëü (ùë†), ùêπùúÖ(ùëü)(cid:1)
O1(ùë†) : ùë¢ ‚Üê$ {0, 1}ùúÖ; ùëü ‚ÜêGen(1ùúÖ); return(cid:0)Encùëü (0|ùë†|), ùë¢(cid:1)
(cid:12)(cid:12)(cid:12)Pr(cid:104)AO0(¬∑),ùêπùúÖ (¬∑)(1ùúÖ) = 1(cid:105) ‚àí Pr(cid:104)AO1(¬∑),ùêπùúÖ (¬∑)(1ùúÖ) = 1(cid:105)(cid:12)(cid:12)(cid:12)
(ùúÖ) + AdveavE (ùúÖ)(cid:1).
is upper-bounded by 2ùëûO(cid:0)ùëûFAdvkey-rec
Then, for every ppt adversary A making at most ùëûO queries to its O
oracle and ùëûF queries to the random oracle, the difference