●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●
●
●
●
●
●
●
10
102
103
104
105
# of Traffic Classes
0
100
200
Networks
300
0
100
200
Networks
300
(a) Network size
(b) Number of trafﬁc classes
(a) Number of vertices
(b) Number of edges
Figure 5: Scale of the OSP’s networks
Figure 7: Size of the ETGs for the OSP’s networks; net-
works are sorted by number of vertices in the ETG
eBGP
single area
37.6% ACLs
37.3% Route ﬁlters
Protocols % of Networks Modiﬁers % of Networks
100.0%
OSPF
84.1%
5.4%
5.4%
Static routes
5.4%
Table 3: Constructs used in the OSP’s data center networks
acylic
costs & ADs align
100.0% Route redistribution
no local prefs
96.8%
27.1%
works have eBGP processes that use local preference (in ad-
dition to AS path length) for computing routes. Route re-
distribution occurs in 5% of the networks; in all cases, the
redistribution conforms to the constraints necessary to pro-
duce a path-equivalent ARC (§4.3.4).
The number of distinct trafﬁc classes ranges from less
than 100 to more than 100K (Figure 5b). There are less
than 10K trafﬁc classes in 69% of the networks, and less
than 1000 in 41% of networks. As shown in Table 3, the
OSP uses route ﬁlters (84% of networks) and ACLs (all net-
works) to selectively block certain trafﬁc classes.
By comparing Tables 2 and 3, it is clear we can generate
a pathset-equivalent ARC for all of the OSP’s networks, and
a path-equivalent ARC for 97% of the networks (those with
one OSPF area and no BGP local preferences).
For comparison, we examined the routing protocols and
features used in our university network. The same proto-
cols used in the OSP’s networks (OSPF, eBGP, and static
routes) are used in our university, along with RIP; ACLs,
route ﬁlters, and acyclic route redistribution are also used.
BGP local preferences are not used, but there are multiple
OSPF areas, so we can generate a pathset-equivalent but not
path-equivalent ARC for our university network.
7.2 ARC Efﬁciency
We now examine how efﬁciently we can represent real
network control planes using ARC. We consider both the
time to generate the ARC and the ARC’s size, and we show
how this relates to the size and complexity of a network.
Time. Figure 6 shows the time required to generate the
ARC, included edge weights, for each of the OSP’s net-
works. ARC generation takes less than 5s for 78% of the
networks, and at most 11.8s across all the networks we study.
The majority of the time (85% on average) is spent parsing
network conﬁgurations; this time is roughly correlated with
the number of devices in the network (Pearson correlation
co-efﬁcient of 0.58). The remaining time is dedicated to con-
structing the ETGs; this time is roughly correlated with the
number of trafﬁc classes in the network (Pearson correlation
co-efﬁcient of 0.62), because the ARC contains an ETG for
every trafﬁc class.
Size. Figure 7 characterizes the size of the generated ETG
for each network. We observe that ETGs are relatively com-
pact: 45% (45%) of the ETGs have fewer than 20 vertices
(edges) and 74% (70%) have fewer than 50. By design, the
number of vertices is directly correlated with the number of
routing processes (including static routes) in the network for
which the ETG is generated.
As mentioned above, the number of ETGs required for
each network is a function of the number of trafﬁc classes
(Figure 5b). Although this seems substantial, 78% of net-
works’ ETGs take less than 100MB of space when stored
as serialized Java objects; more efﬁcient encoding schemes
could signiﬁcantly reduce this. Furthermore, we show in the
next section that exhaustively verifying key invariants for all
of a network’s trafﬁc classes takes less than a second for
most networks.
7.3 Veriﬁcation Efﬁciency
We next examine how efﬁciently we can verify the invari-
ants discussed in §5.1. We compare the speed of ARC-based
control plane veriﬁcation against Batﬁsh [9], a state-of-the-
art network conﬁguration analysis tool.9
Figure 8 shows the time required to verify invariants I1,
I2, I3, and I5 for all trafﬁc classes (or pairs of trafﬁc classes)
for each of the OSP’s networks.10 When checking equiva-
lence, we compare a network’s control plane against itself.
We observe that invariant I1 can be checked for arbitrary
link failures and all trafﬁc classes in less than 500ms for
97% of the OSP’s networks, and 62% of the networks can
be checked in less than 100ms. The networks that take the
longest to verify have the most trafﬁc classes. The time per
trafﬁc class ranges from 8µs to 347µs (median 21µs).
The time required to verify invariant I2 is slightly higher,
because computing max-ﬂow/min-cut is more complex than
checking if two nodes reside in separate connected compo-
nents. However, for 99% of the OSP’s networks, this prop-
erty can be checked in less than 1s, and 54% of networks can
9We do not compare against other veriﬁers [16, 15, 20, 17],
because they only consider the current network data plane.
10We do not check invariant I4, because we do not know
where middleboxes reside in the OSP’s networks.
311
)
c
e
s
(
s
G
T
E
d
l
i
u
B
o
t
e
m
T
i
Parse Configs
Build ETGs
0
1
8
6
4
2
0
Figure 6: Time required to generate ARC for the OSP’s networks; networks are sorted by number of trafﬁc classes
Networks
)
s
(
y
f
i
r
e
V
o
t
e
m
T
i
6
.
0
4
0
.
2
0
.
0
.
0
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●●
●
●
●
●
●
●
●●●
●
●●●●●
●●●●
●●●●●●
●
●
●●●●●●●
●●
●●
●●●●●●●●●●
●
●●
●
●●●●
●●●●●●●●
●
●
●
●
●●
●
●●
●●●●
●
●
●
●
●
●●●
●
●
●●●
●
●●●●●
●●
●
●●
●●●●●●
●
●
●
●
●●●●●
●
●●●●●●
●
●
●●
●
●●●●●●●●●●●●●●●●●
●●●●
●●
●●●●●
●
●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●
●●●●●●●●●●●
●
●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●
)
s
(
y
f
i
r
e
V
o
t
e
m
T
i
0
1
.
5
0
.
0
0
.
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●●●
●
●
●
●
●
●
●
●●
●
●
●●
●●●●●
●
●
●
●
●●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●●
●
●
●
●
●●●
●
●●●
●
●
●●●
●●
●
●
●
●
●●
●
●
●
●
●●●●●●
●●●●●
●
●●●
●
●
●●
●
●
●
●
●●
●●
●●
●
●
●
●●●●●●
●
●
●
●
●
●●
●●●●●●●●●●●●●
●
●
●
●●
●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●
●●●●●●●●●
●
●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●
●
●
0
100
200
Networks
300
0
100
200
Networks
300
(a) I1: Always blocked, using
ARC
(b) I2: Always reachable with
< k failures, using ARC
●
●●
●●●●●
●
●
●●●●●
●●
●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●
●
●
●●●●●●●
●
●
●
●