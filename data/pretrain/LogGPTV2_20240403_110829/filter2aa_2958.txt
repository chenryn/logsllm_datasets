Paul Marrapese 
DEF CON 28
Abusing P2P to Hack 
3 Million Cameras
What is this talk?
‚Ä¢ Overview of "convenience" feature found in millions of IoT devices
‚Ä¢ P2P is found in cameras, baby monitors, smart doorbells, DVRs, NASes, alarm systems‚Ä¶
‚Ä¢ Hundreds of different brands impacted (supply chain issue)
‚Ä¢ How P2P exposes devices to the world
‚Ä¢ Devices are instantly accessible, even with NAT/firewalls
‚Ä¢ Obscure architecture and protocol (these devices aren't on Shodan!)
‚Ä¢ How P2P can be abused to remotely attack devices
‚Ä¢ Stealing creds with over-the-Internet MITM attacks
‚Ä¢ Exploiting devices behind firewalls to get root shells
$ whoami
‚Ä¢ Paul Marrapese (OSCP)
‚Ä¢ San Jose, CA
‚Ä¢ @PaulMarrapese / PI:EMAIL
‚Ä¢ h=ps://hacked.camera
‚Ä¢ Red team at a large enterprise cloud company (opinions expressed are solely my own)
‚Ä¢ Reverse engineering, music producEon, photography
All good things start with cats.
Cheap cams galore 
Cheap cams galore 
Shady cams galore!
Shady cams galore!
What is peer-to-peer (P2P)?
‚Ä¢ In the context of IoT, a convenience feature for connectivity
‚Ä¢ Plug and play: users can instantly connect to devices from anywhere 
‚Ä¢ Eliminates technical barriers barriers for non-technical users 
‚Ä¢ No port forwarding required
‚Ä¢ No dynamic DNS or remembering IP addresses required
‚Ä¢ No UPnP required (P2P is not UPnP)
‚Ä¢ Automatically accepts connections, even with NAT/firewall restrictions
‚Ä¢ Your cheap camera's gaping security holes are now open to the world. Good luck. üò±
Who provides P2P?
‚Ä¢ Several diÔ¨Äerent providers of P2P soluEons in the industry
‚Ä¢ Largest is probably ThroughTek (TUTK)'s Kalay plaWorm (> 66m devices1)
‚Ä¢ This talk will focus on 2 in parEcular:
‚Ä¢ CS2 Network P2P (> 50m devices2)
‚Ä¢ Libs: PPPP_API, PPCS_API, libPPPP_API, libPPCS_API
‚Ä¢ Shenzhen Yunni iLnkP2P (>3.6m devices)
‚Ä¢ FuncEonally-idenEcal clone of CS2 P2P (even has compaEble API)
‚Ä¢ Libs: libxqun, libXQP2P_API, libobject, PPPP_API
1: https://www.throughtek.com/kalay_structure.html
2: http://cs2-network.cn/iot/about/slide/slide.php?slide=1
What are the risks of P2P?
‚Ä¢ P2P, by design, is meant to expose devices
‚Ä¢ In many cases, no way to turn it off
‚Ä¢ You can obtain direct access to any device if you have its UID (unique identifier)
‚Ä¢ Devices are usually ARM-based, running BusyBox with everything as root
‚Ä¢ What could *possibly* go wrong? ü§î
‚Ä¢ Tired: Eavesdropping, data theft, disabling security systems
‚Ä¢ Wired: Pre-auth RCE on millions of devices üëÄüí¶
Anatomy of a P2P Network
P2P Servers
‚Ä¢ Our gateway to millions of devices
‚Ä¢ Manage all devices in the network
‚Ä¢ Orchestrate connections between clients and devices
‚Ä¢ Essentially C&C servers
‚Ä¢ Owned and operated by device manufacturers
‚Ä¢ Often hosted using Alibaba cloud or AWS (usually in sets of 3 for redundancy)
‚Ä¢ Listens on UDP port 32100
‚Ä¢ Hundreds of these on the Internet
Devices
‚Ä¢ All have their own unique idenEÔ¨Åer (UID)
‚Ä¢ Key concept: used for connecEng to the device
‚Ä¢ i.e., users don't directly use IP addresses
‚Ä¢ Should be considered "sensiEve"
‚Ä¢ Anyone who knows the UID can connect
‚Ä¢ Generated by P2P provider and provided to device 
manufacturer
‚Ä¢ Wri=en to device NVRAM during manufacturing, someEmes printed on label
Device UID
‚Ä¢ Prefix: Used for vendor/product grouping (up to 8 letters)
‚Ä¢ Vendor may have several (e.g. DEFA, DEFB, DEFC)
‚Ä¢ Vendor's P2P server will only support their specific prefixes
‚Ä¢ Serial Number: Device identifier (typically 6-7 digits)
‚Ä¢ Sequentially generated 
‚Ä¢ Check Code: Used to protect UIDs and prevent spoofing (5-8 letters)
‚Ä¢ Security feature
‚Ä¢ Generated using secret algorithm by the P2P provider
DEFC-000123-HAXME
Prefix
Serial Number
Check Code
Client
‚Ä¢ Desktop/mobile app for connecEng to device
‚Ä¢ User enters UID in client, client sends connecEon request 
to the P2P servers
Protocol
‚Ä¢ Entirely UDP
‚Ä¢ Control messages to establish connections
‚Ä¢ "DRW" (device read/write) messages wrap application data (e.g. video, audio)
‚Ä¢ Guarantees both order and delivery despite being UDP
‚Ä¢ Most messages are just packed C structs with a 4-byte header
‚Ä¢ Magic number (always 0xF1), message type (uint8), payload length (uint16)
‚Ä¢ Developed Wireshark dissector to aid with reversing and traffic analysis
Wireshark P2P dissector
Connecting to Devices
(or, how to punch through firewalls)
UDP hole punching
‚Ä¢ A technique to establish direct connections even with NAT/firewalls
‚Ä¢ Takes advantage of how NAT creates inbound rules based on outbound packets
‚Ä¢ For example: if we make a DNS request, the router needs to create a rule so the response 
gets back to us
‚Ä¢ If we have a target IP and port, we can create a rule by sending a packet there
‚Ä¢ But how do we know the peer's IP and port if we can't talk to them?
‚Ä¢ We can use the P2P server to exchange address information!
‚Ä¢ Both sides can then send packets to each other, which creates rules in their respective NATs 
to let packets from the other side through
‚Ä¢ Why yes, this *is* very similar to STUN!
UDP hole punching
UDP hole punching
UDP hole punching
UDP hole punching
Relayed connections
‚Ä¢ UDP hole punching doesn‚Äôt always work 
‚Ä¢ As a fallback, peers can talk through a "relay server":
‚Ä¢ If both sides can connect to the same relay, it can proxy traffic between them
Superdevices
‚Ä¢ Devices that act as relays to support the network
‚Ä¢ Users have no way to opt out of this (hope you don‚Äôt have bandwidth quotas!)
‚Ä¢ Sketchy, but not actually uncommon in P2P architectures (supernodes)
‚Ä¢ Spoiler alert: we're going to have fun with these. üòà
Hun:ng for Devices
Finding P2P Servers
‚Ä¢ Desktop and phone apps are one way to find P2P server addresses
‚Ä¢ More efficient: nmap UDP probes on cloud provider IP ranges!
‚Ä¢ Send hello message (0xf1000000) to UDP port 32100
‚Ä¢ Valid P2P servers will respond with ACK message (0xf1010000)
‚Ä¢ Add udp 32100 "\xf1\x00\x00\x00" to /usr/share/nmap/payloads
‚Ä¢ nmap -n -sn -PU32100 --open -iL ranges.txt
‚Ä¢ 618 confirmed P2P servers discovered as of July 2020
‚Ä¢ Discrepancies in responses allowed a fingerprinting technique to be developed
‚Ä¢ 86% are CS2, 14% are iLnkP2P
Finding Prefixes
‚Ä¢ To use P2P servers, we need to find out which prefixes they support
‚Ä¢ Again, desktop and phone apps are one way to find prefixes
‚Ä¢ Also, Amazon reviews‚Ä¶
Finding Prefixes
Finding Prefixes
Invalid prefix (0xFD)
Invalid UID, valid preÔ¨Åx (0xFF)
Request:
Response:
Finding Prefixes
Finding Prefixes
‚Ä¢ Can infer validity of prefix from server response code
‚Ä¢ 0xFD: Invalid prefix
‚Ä¢ 0xFF: Valid prefix but invalid serial / check code
‚Ä¢ Can brute force all 3-letter combinations in ~1hr, 4 letter in ~36hrs
‚Ä¢ No rate limiting!
‚Ä¢ Discovered 488 distinct prefixes on 487 P2P servers as of July 2020
‚Ä¢ Average is 4 per server, but some servers support >130 prefixes
Finding UIDs
‚Ä¢ We have prefixes, we can easily infer serial numbers (sequential numbers)
‚Ä¢ The problem is now the check code:
‚Ä¢ Exists to stop precisely this sort of attack
‚Ä¢ If the UID is DEFC-000123-HAXME, DEFC-000123-HAXMF will not work
‚Ä¢ Keyspace makes brute forcing impractical
‚Ä¢ How can we get around this?
Predictable iLnkP2P UIDs (CVE-2019-11219)
‚Ä¢ Some iLnkP2P libraries shipped with their secret check code algorithm
‚Ä¢ Uses modiÔ¨Åed MD5; the check code is the le=ers from the resulEng hash (i.e. A-F)
‚Ä¢ Apparently included to validate UIDs, even though the server already does that  ü§∑
‚Ä¢ We can now connect to any device that uses iLnkP2P
Predictable iLnkP2P UIDs (CVE-2019-11219)
Predictable iLnkP2P UIDs (CVE-2019-11219)
‚Ä¢ Over 3.6 million devices as of July 2020, many of which use default passwords
‚Ä¢ Disclosed to Shenzhen Yunni Technology in February 2019
‚Ä¢ No response despite several attempts
‚Ä¢ New iLnkP2P UIDs are still being issued today
‚Ä¢ Does not affect CS2‚Ä¶ but more on that later.
Exploiting Devices
(or, how to shoot fish in a barrel)
Let's find some camera vulns!
‚Ä¢ Shenzhen Hichip Vision Technology, Co.
‚Ä¢ Major manufacturer, worldwide market (ODM)
‚Ä¢ Used by a huge number of OEMs
‚Ä¢ OEMs buy from Hichip and add their own branding
‚Ä¢ Can easily identify OEMs by their use of the "CamHi" app
‚Ä¢ At least 50 P2P servers and 29 prefixes
‚Ä¢ 2.95 million (81%) of the iLnkP2P devices I've found have been Hichip
OEMs using Hichip
AccÔ¨Çy
Dericam
ICAMI
Nettoly
ThinkValue
Alptop
Elex System
ieGeek
OWSOO
THOMSON
Anlink
Elite Security
Jecurity
PNI
TOMLOV
Avidsen
ENSTER
Jennov
ProElite
TonTon Security
Besdersec
ePGes
KKMoon
QZT
TPTEK
BOAVISION
Escam
LEFTEK
Royallite
Wanscam
COOAU
FLOUREON
Loosafe
SDETER
WGCC
CPVAN
GatoCam
Luowice
SV3C
WYJW
Ctronics
GENBOLT
MEOBHI
SY2L
ZILINK
D3D Security
Hongjingtian (HJT)
Nesuniq
Tenvis
Zysecurity
Hunting for vulnerabilities
‚Ä¢ Obtained firmware samples from reseller sites (often just a ZIP file, easy to analyze)
‚Ä¢ HI_P2P_Cmd_ReadRequest handles commands received over P2P
‚Ä¢ Used for everything including login; you don't need auth to hit this function
Hunting for vulnerabilities
Hunting for vulnerabilities
Pre-auth remote code execution (CVE-2020-9527)
Pre-auth remote code execution (CVE-2020-9527)
Pre-auth remote code execution (CVE-2020-9527)
Pre-auth remote code execution (CVE-2020-9527)
Pre-auth remote code execution (CVE-2020-9527)
Pre-auth remote code execution (CVE-2020-9527)
‚Ä¢ Buffer overflow in login routine allows remote execution of arbitrary code
‚Ä¢ If you have a vulnerable device‚Äôs UID, you can get a shell!
‚Ä¢ Binaries compiled without ASLR/PIE/stack canaries
‚Ä¢ Offsets vary between versions, but very reliable code execution
‚Ä¢ Affects firmware from August 2018 through June 2020
Password reset via LAN (CVE-2020-9529)
‚Ä¢ Affects all firmware prior to June 2020
Abusing P2P to Conduct
Man-in-the-Middle Attacks
Over-the-Internet MITM
‚Ä¢ P2P servers coordinate all connections
‚Ä¢ If we can influence that, man-in-the-middle may be possible
‚Ä¢ Can be done over-the-Internet, not restricted to local network
‚Ä¢ The P2P layer offers no effective protection of session data
‚Ä¢ Application is entirely responsible for security
‚Ä¢ Most do not employ encryption at all, or do so in an insecure fashion 
Over-the-Internet MITM
Over-the-Internet MITM
‚Ä¢ Devices regularly log in to P2P servers
‚Ä¢ Server takes note of message origin (IP and UDP port)
‚Ä¢ When a client requests a connection, servers tell client to punch to that address
‚Ä¢ This login messages contains just the UID -- no device-specific secret
‚Ä¢ If we possess a UID, we can forge this message to confuse the server
‚Ä¢ The user will connect to us and authenticate without hesitation‚Ä¶
Over-the-Internet MITM
‚Ä¢ CS2 sometimes "encrypts" the login message‚Ä¶
‚Ä¢ MSG_DEV_LGN_CRC instead of MSG_DEV_LGN
‚Ä¢ Proprietary symmetric cipher; vendor sets a "CRC key" for their P2P server
‚Ä¢ All their devices need to ship with that key (i.e. accessible in firmware)
‚Ä¢ Some servers allow logging in without the key anyway ü§™
‚Ä¢ Affects iLnkP2P (CVE-2019-11220) and CS2 (CVE-2020-9525)
‚Ä¢ No response from Shenzhen Yunni
‚Ä¢ CS2 states new version 4.0 will fix this
Over-the-Internet MITM
Passive over-the-Internet MITM
‚Ä¢ Active attack requires a UID, knowledge of protocol, timing, etc...
‚Ä¢ Instead of targeting devices, let the devices come to us.
‚Ä¢ Remember superdevices?
‚Ä¢ Devices that relay sessions for other users
‚Ä¢ Most vendors use these to support their network
‚Ä¢ The P2P layer does not securely encrypt relayed traffic
‚Ä¢ The application traffic is typically not encrypted either‚Ä¶
Passive over-the-Internet MITM
This means anyone can buy a device
and access other people‚Äôs traffic.
Passive over-the-Internet MITM
‚Ä¢ With gentle PCAP parsing, can actually stream packets straight into ffplay
‚Ä¢ Users have no way of knowing whether their connection is being intercepted
‚Ä¢ Bonus! UIDs are leaked during the P2P handshake
‚Ä¢ Exploited this to collect over 236,000 unique CS2 UIDs in 10 months
‚Ä¢ Affects iLnkP2P and CS2 (CVE-2020-9526)
‚Ä¢ CS2 states new version 4.0 will fix this
Passive over-the-Internet MITM
Demo time!
Final Thoughts
Patching
CVE
Vendor / Product
Vulnerability
Status
CVE-2019-11219
Yunni iLnkP2P
UID enumeration
Unpatched
CVE-2019-11220
Yunni iLnkP2P
Device spoofing (MITM)
Unpatched
CVE-2020-9525
CS2 Network P2P
Device spoofing (MITM)
Patch pending (v4.0)
CVE-2020-9526
CS2 Network P2P
Data leakage in superdevice Patch pending (v4.0)
CVE-2020-9527
Hichip
Buffer overflow
Patched (June 2020)
CVE-2020-9528
Hichip
Cryptographic weaknesses
Patched (June 2020)
CVE-2020-9529
Hichip
Password reset via LAN
Patched (June 2020)
A bleak outlook
‚Ä¢ No hope for some of these issues being fixed retroactively
‚Ä¢ Fundamental flaws with no chance of backwards compatibility
‚Ä¢ Doesn't really matter. Users don't update -- some firmware versions go back to 2015!!
‚Ä¢ Sellers won't pull defective products1
‚Ä¢ Amazon: No comment received
‚Ä¢ eBay: "These devices can be used safely if used in a network without an internet 
connection" üôÑ üôÑ üôÑ
1: https://www.which.co.uk/news/2020/06/more-than-100000-wireless-security-cameras-in-the-uk-at-risk-of-being-hacked/
Further research
‚Ä¢ More device-specific vulnerabilities exploitable through P2P
‚Ä¢ Other P2P platforms (e.g. Wyze uses ThroughTek Kalay)
‚Ä¢ Other large device manufacturers
‚Ä¢ Higher up the supply chain in general!
Reversing tips
‚Ä¢ Samples, samples, samples!! Never too many.
‚Ä¢ APKs: Java decompiles into beautiful, readable code (check out JADX!)
‚Ä¢ Throw every single interesting filename or magic string you find into GitHub
‚Ä¢ May reveal SDKs, docs, client source, even firmware source
References
‚Ä¢ Balazs, Zoltan. ‚ÄúIoT Security Is a Nightmare. But What Is the Real Risk?,‚Äù August 21, 2016.
https://www.slideshare.net/bz98/iot-security-is-a-nightmare-but-what-is-the-real-risk
‚Ä¢ Serper, Amit. ‚ÄúZero-Day Exploits Could Turn Hundreds of Thousands of IP Cameras into IoT 
Botnet Slaves,‚Äù December 6, 2016. 
https://www.cybereason.com/blog/zero-day-exploits-turn-hundreds-of-thousands-of-ip-cameras-into-iot-botnet-slaves
‚Ä¢ Kim, Pierre. ‚ÄúMultiple Vulnerabilities Found in Wireless IP Camera (P2P) WIFICAM Cameras 
and Vulnerabilities in Custom HTTP Server,‚Äù March 8, 2017.
https://pierrekim.github.io/blog/2017-03-08-camera-goahead-0day.html
‚Ä¢ Martin, Balthasar, and Br√§unlein, Fabian. "Next-Gen Mirai," November 16, 2017.
https://srlabs.de/wp-content/uploads/2017/11/Next-Gen_Mirai.pdf
‚Ä¢ Viehb√∂ck, Stefan. "Millions of Xiongmai Video Surveillance Devices Can be Hacked via Cloud 
Feature (XMEye P2P Cloud)," October 9, 2018.
https://sec-consult.com/en/blog/2018/10/millions-of-xiongmai-video-surveillance-devices-can-be-hacked-via-cloud-feature-xmeye-p2p-cloud
Thank you!
@PaulMarrapese
PI:EMAIL
https://hacked.camera