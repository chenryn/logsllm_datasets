CPU      16.4%  nice:     0.1%                                        LOAD    4-core                                        MEM     60.5%  active:    4.90G                                        SWAP      0.1%
user:    10.2%  irq:      0.0%                                        1 min:    1.20                                        total:  7.70G  inactive:  2.07G                                        total:   3.73G
system:   3.4%  iowait:   2.7%                                        5 min:    1.16                                        used:   4.66G  buffers:    242M                                        used:    4.57M
idle:    83.6%  steal:    0.0%                                        15 min:   1.24                                        free:   3.04G  cached:    2.58G                                        free:    3.72G
NETWORK     Rx/s   Tx/s   TASKS 253 (883 thr), 1 run, 252 slp, 0 oth sorted automatically by cpu_percent, flat view
enp1s0     525Kb   31Kb
lo           2Kb    2Kb     CPU%  MEM%  VIRT   RES   PID USER        NI S    TIME+ IOR/s IOW/s Command 
wlp2s0        0b     0b     14.6  13.3 2.53G 1.03G  2957 tecmint      0 S 51:49.10     0   40K /usr/lib/firefox/firefox 
7.4   2.2 1.16G  176M  6265 tecmint      0 S  7:08.18     0     0 /usr/lib/Headset/Headset --type=renderer --no-sandbox --primordial-pipe-token=879B36514C6BEDB183D3E4142774D1DF --lan
DISK I/O     R/s    W/s      4.9   3.9 1.63G  310M  2459 tecmint      0 R  7:12.18     0     0 cinnamon --replace
ram0           0      0      4.2   0.2  625M 13.0M  2301 tecmint    -11 S  2:29.72     0     0 /usr/bin/pulseaudio --start --log-target=syslog
ram1           0      0      4.2   1.3 1.52G  105M  6220 tecmint      0 S  3:42.64     0     0 /usr/lib/Headset/Headset 
ram10          0      0      2.9   0.8  409M 66.7M  6240 tecmint      0 S  2:40.44     0     0 /usr/lib/Headset/Headset --type=gpu-process --no-sandbox --supports-dual-gpus=false --gpu-driver-bug-workarounds=7,2
ram11          0      0      2.9   1.8  531M  142M  1690 root         0 S  6:03.79     0     0 /usr/lib/xorg/Xorg :0 -audit 0 -auth /var/lib/mdm/:0.Xauth -nolisten tcp vt8
ram12          0      0      2.6   0.3 79.3M 23.8M  9651 tecmint      0 R  0:00.71     0     0 /usr/bin/python3 /usr/bin/glances
ram13          0      0      1.6   4.8 1.45G  382M  3272 tecmint      0 S  6:25.30     0    4K /opt/google/chrome/chrome 
...
```
这些工具中的平均负载是从 `/proc/loadavg` 文件中读取的，也可以直接使用 [cat 命令](https://www.tecmint.com/13-basic-cat-command-examples-in-linux/)查看：
```
$ cat /proc/loadavg
2.48 1.69 1.42 5/889 10570
```
想要图形样式监测平均负载，请戳：[ttyload – 终端中颜色编码图形显示 Linux 平均负载](/article-8553-1.html)。
在桌面计算机中，可以使用图形用户接口工具查看系统平均负载。
### 理解系统平均负载和 CPU 核心数的关系
考虑了 CPU 核心数的影响，才能解释系统负载。
#### 多处理器 Vs 多核处理器
* 多处理器 – 一个计算机系统中集成两个或多个物理 CPU
* 多核处理器 – 单个物理 CPU 有两个或多个单独的核并行工作（也叫处理单元）。双核意味着有两个处理单元，4 核有 4 个处理单元，以此类推。
此外，Intel 引入了超线程技术用来提高并行计算能力。
通过超线程技术，在操作系统中，单个物理 CPU 表现的和两个逻辑 CPU 一样。（实际在硬件上只有一个 CPU）。
注意，单个 CPU 核同一时间只能执行一个任务，于是产生了多 CPU/处理器、多核 CPU，以及多线程技术。
多 CPU 时，多个程序可以同时执行。如今的 Intel CPU 使用了多核心和超线程技术。
可以使用 [nproc 或 lscpu 命令](https://www.tecmint.com/check-linux-cpu-information/)查看系统中的处理器单元数量。
```
$ nproc
4
# 或者
lscpu
```
也可以使用 [grep 命令](https://www.tecmint.com/12-practical-examples-of-linux-grep-command/)：
```
$ grep 'model name' /proc/cpuinfo | wc -l
4
```
为了进一步理解系统负载，需要做一些假设。假设系统负载如下：
```
23:16:49 up  10:49,  5 user,  load average: 1.00, 0.40, 3.35
```
**在单核系统中意味着：**
* CPU 被充分利用（100%）；最近的 1 分钟有 1 个进程在运行。
* CPU 有 60% 处于空闲状态；在最近的 5 分钟没有进程等待 CPU 时间。
* CPU 平均过载了 235%；最近的 15 分钟平均有 2.35 个进程在等待 CPU 时间。
**在双核系统中意味着：**
* 有一个 CPU 处于完全空闲状态，另一个 CPU 被使用；最近的 1 分钟没有进程等待 CPU 时间。
* CPU 平均 160% 处于空闲状态；最近的 5 分钟没有进程等待 CPU 时间。
* CPU 平均过载了 135%；最近的 15 分钟有 1.35 个进程等待 CPU 时间。
也许你还会喜欢：
1. [20 个监控系统性能的命令行工具（一）](https://www.tecmint.com/command-line-tools-to-monitor-linux-performance/)
2. [13 个 Linux 性能监控工具（二）](https://www.tecmint.com/linux-performance-monitoring-tools/)
3. [Perf：一个 Linux 上的性能监控分析工具](https://www.tecmint.com/perf-performance-monitoring-and-analysis-tool-for-linux/)
4. [使用 Nmon 监控 Linux 的系统性能](/article-6886-1.html)
总而言之，如果你是系统管理员，你应该关注高的平均负载。平均负载高于 CPU 核心数意味着需要增加 CPU，反之则意味着 CPU 未被充分利用。
---
作者简介：
Aaron Kili 是 Linux 和自由软件的热心者，热衷于分享知识，现在是 TecMint 网站的内容创作者，不久之后将成为 Linux 系统管理员，web 开发者。
---
via: 
作者：[Aaron Kili](https://www.tecmint.com/author/aaronkili/) 译者：[kylecao](https://github.com/kylecao) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出