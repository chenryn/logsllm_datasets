title:Practical PIR for electronic commerce
author:Ryan Henry and
Femi G. Olumofin and
Ian Goldberg
Practical PIR for Electronic Commerce∗
Ryan Henry
Femi Olumoﬁn
Ian Goldberg
Cheriton School of Computer Science
Cheriton School of Computer Science
Cheriton School of Computer Science
University of Waterloo
Waterloo ON Canada N2L 3G1
PI:EMAIL
University of Waterloo
Waterloo ON Canada N2L 3G1
PI:EMAIL
University of Waterloo
Waterloo ON Canada N2L 3G1
PI:EMAIL
ABSTRACT
We extend Goldberg’s multi-server information-theoretic private
information retrieval (PIR) with a suite of protocols for privacy-
preserving e-commerce. Our ﬁrst protocol adds support for single-
payee tiered pricing, wherein users purchase database records with-
out revealing the indices or prices of those records. Tiered pricing
lets the seller set prices based on each user’s status within the sys-
tem; e.g., non-members may pay full price while members may
receive a discounted rate. We then extend tiered pricing to sup-
port group-based access control lists with record-level granularity;
this allows the servers to set access rights based on users’ price
tiers. Next, we show how to do some basic bookkeeping to imple-
ment a novel top-K replication strategy that enables the servers to
construct bestsellers lists, which facilitate faster retrieval for these
most popular records. Finally, we build on our bookkeeping func-
tionality to support multiple payees, thus enabling several sellers to
offer their digital goods through a common database while enabling
the database servers to determine to what portion of revenues each
seller is entitled. Our protocols maintain user anonymity in addition
to query privacy; that is, queries do not leak information about the
index or price of the record a user purchases, the price tier accord-
ing to which the user pays, the user’s remaining balance, or even
whether the user has ever queried the database before. No other
priced PIR or oblivious transfer protocol supports tiered pricing,
access control lists, multiple payees, or top-K replication, whereas
ours supports all of these features while preserving PIR’s sublinear
communication complexity. We have implemented our protocols
as an add-on to Percy++, an open source implementation of Gold-
berg’s PIR scheme. Measurements indicate that our protocols are
practical for deployment in real-world e-commerce applications.
General Terms
Algorithms, Design, Security
Categories and Subject Descriptors
K.4.4 [Computers and Society]: Electronic Commerce—security,
payment schemes; H.2.0 [General]: Security, integrity, and protec-
tion; H.2.4 [Database Management]: Systems—distributed data-
bases, query processing.
∗An extended version of this paper is available [36].
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
Keywords
Private information retrieval, PIR, e-commerce, access control, ze-
ro-knowledge proofs, privacy-enhancing technologies, PETs.
1.
INTRODUCTION
Private information retrieval (PIR) provides a means of query-
ing a database without the database being able to learn any infor-
mation about the query [22]. In multi-server PIR, (cid:96) database ser-
vers each possess a replica of the database and a user submits his
query to some size-k (or larger) subset of these servers in such a
way that no server (or coalition of servers up to some threshold t)
can learn the user’s query. One can view the database X as con-
sisting of n bits organized into r records, each of size b = n/r
bits. We follow the usual convention of specifying a PIR query
by the index i of interest. Thus, in a PIR query, the user retrieves
the record at index i without the servers learning any information
about i. We note, however, that existing approaches allow one to
build queries that are more expressive on top of this basic setup; for
example, keyword-based lookups [21] or simple SQL queries [48].
Using these techniques in conjunction with the ideas in this paper
is straightforward.
Existing multi-server PIR schemes offer information-theoretic
privacy protection for the user’s query, but they allow a dishonest
user to obtain additional information, such as the record at index
j (cid:54)= i, or the exclusive-or of some subset of records in the data-
base [31]. However, for many real-world applications, protecting
database privacy by preventing dishonest users from learning extra
information about the database is advantageous. Examples abound
in online sales of digital goods, such as a pay-per-download mu-
sic store [1] where users must pay for each song they download,
a pay-per-retrieval DNA database [17], a stock-information data-
base [31], or a patent database [2]. In all of these practical situa-
tions, it is necessary to guarantee the seller of these digital goods
that users learn exactly the database record of interest and nothing
more. In some scenarios it may even be desirable to sell database
records according to a tiered pricing plan whereby different users
pay different prices for each record depending on, e.g., their mem-
bership status or geographic location.
Symmetric private information retrieval (SPIR) [31] adds an ad-
ditional restriction to PIR that prevents the user from learning in-
formation about any records except for the one he requested, thus
addressing the need for simultaneous user and database privacy;
however, no existing SPIR scheme supports both (tiered) record-
level pricing and access control lists. Some oblivious transfer (OT)
schemes [1, 17–19] offer one or the other of these functions, but
no scheme in the literature provides them both. Moreover, OT
schemes generally have no requirement for sublinear communi-
cation complexity, which renders them useless for online sales of
677some types of digital goods, such as multimedia data, where the
bandwidth requirement is high. Some schemes even require the
user to download an encrypted copy of the entire database (e.g.,
[17–19]) and later purchase decryption keys for individual encryp-
ted records. This allows one to amortize the cost of many transac-
tions, but renders the scheme unsuitable for applications in which
the contents of the database change frequently. Storing the data-
base in an encrypted format also limits the usefulness of the data-
base for other applications that need ready access to the cleartext
data. Other OT-based schemes [1] require the database servers to
store state information, such as the number of purchases made by a
user, or his remaining balance, which might leak information about
the user’s queries or enable the server to link his purchases.
In this paper, we present a protocol that extends the open-source
PIR scheme by Goldberg [33] to a priced symmetric private in-
formation retrieval (PSPIR) scheme offering tiered pricing with
record-level granularity. Our initial PSPIR construction is a sim-
ple ‘single payee’ scheme wherein a single content provider (CP)
sells digital goods through a distributed database and collects all
proceeds from these sales. We then extend this simple scheme in
three important ways. First, we introduce a slight modiﬁcation to
the protocol that enables the database servers to control access to
individual records by implementing group-centric access control
lists. Next, we propose a novel top-K replication strategy that
makes it possible for the database servers to periodically identify
and replicate the K most popular records to a smaller database —
i.e., to construct a bestsellers list — thus facilitating more efﬁcient
retrieval for these most popular items. Finally, we show how to
adapt the single-payee scheme to scenarios in which multiple (pos-
sibly competing) CPs sell their own digital goods through a com-
mon database and, using a distributed bookkeeping protocol, deter-
mine to what portion of the proceeds from these sales each seller is
entitled. These enhancements provide a stronger and more realistic
model of private information retrieval that enables e-commerce to
coexist happily with strong privacy protection.
In our model, users belong to different pricing tiers and pay (per-
haps different amounts) for each record; moreover, the database
may require users to have explicit authorization to access some or
all of the records in the database. In particular, tiered pricing logi-
cally groups users into different price tiers and allows the database
to set the price and availability of each record with respect to each
tier (a price tier is then roughly analogous with a group in the con-
text of access control). Our approach enforces these constraints
without revealing the user’s price tier to the servers during a pro-
tocol run. Thus, when combined with an anonymous communica-
tions channel, our protocols maintain user anonymity in addition to
query privacy; that is, the database servers do not learn any infor-
mation about the identity nor the query of the user. More specif-
ically, queries do not leak information about the index or price of
the purchased record, the price tier according to which the user
pays, the user’s remaining balance, or even whether the user has
ever queried the database before.
Outline.
We organize the remainder of this paper as follows: §2 introduces
our system model, including our design goals and threat model, and
an example use case for our scheme. §3 presents our notation and
the basic building blocks we use in our protocols. Our main contri-
bution follows in §4, where we describe each of our constructions
in depth. In §5, we discuss our implementation and the results of
some empirical performance evaluations we ran on it. We then pro-
ceed to differentiate our approach from related solutions in §6, and
ﬁnally conclude the paper with a summary in §7.
2. SYSTEM MODEL
Our basic scenario consists of three parties: the user interested
in purchasing digital goods, the server having a database contain-
ing potentially tens or hundreds of gigabytes of data that is divided
into r records (or ﬁles), and the bank, an independent issuer of dig-
ital wallets (see below). We build our scheme from multi-server
information-theoretic PIR; thus, the server is actually comprised
of (cid:96) independent PIR servers that each hosts a complete replica of
the database. Users submit their queries to any subset of at least
k > (cid:96)/2 servers of their choosing. We associate one or more price
lists (cid:126)p1, . . . , (cid:126)pT with the database, where there are T tiers and each
price list speciﬁes a price for each of the r individual records. For
simplicity, we represent price lists by length-r vectors of nonneg-
ative integers (or ⊥ to indicate that a record is unavailable in this
price plan), although representations that are more efﬁcient are typ-
ically possible and using one of these representations changes the
protocols only superﬁcially. Users’ wallets are kept with any non-
rerandomizable (one-show) anonymous credential scheme, such as
that of Brands [10] or that of Au et al. [3]; the wallet encodes as
attributes a balance and the index π of the price list according to
which the owner of that wallet must pay, called that user’s price
tier or simply his tier. (For example, one price tier might apply to
members while another price tier might apply to non-members; in
general, any number of tiers may exist, although a large number
of tiers might adversely affect system performance.) The tier π is
encoded in the credential in a special way: each wallet encodes a
collection of T attributes x1, . . . , xT such that xi = 1 if i = π and
xi = 0 otherwise. The bank initially issues each user with a wallet
encoding the balance 0; users may charge their wallets at any time
using, e.g., a prepaid credit card obtained via cash transaction from
a grocery store. We make no assumptions regarding noncollusion
between the bank and the database servers; indeed, it is not even
required that the bank and database servers be different entities,
although synchronization challenges may emerge in the case of a
distributed bank. We do not discuss the full semantics of the bank,
since this is not our focus in this paper and such details depend on
the chosen credential system.
To query for the record at index β, the user must ﬁrst prove
that his wallet encodes sufﬁcient funds to purchase that particular
record according to his tier. To do so, the user must send his current
wallet to each of at least k servers, which makes the task of detect-
ing double spending particularly easy (via the pigeonhole principle)
since the wallet is not rerandomizable and k > (cid:96)/2. Along with his
query response, the user receives a cryptographically signed receipt
encoding the price paid for the query and the wallet used to make
the payment. The user then uses this receipt to refresh his wallet
with the bank; i.e., to obtain a new wallet (which is unlinkable to
his old wallet) encoding his new remaining balance. This refresh-
ing step does not reveal any information to the bank about the user’s
(old or new) balance, his tier, or the price encoded in the receipt.
Before discussing our constructions in further detail, we ﬁrst
present our high-level design goals and our threat model, as well
as some motivation by way of a simple example use case that uses
our full suite of protocols.
2.1 Design goals
We are interested in enhancing Goldberg’s PIR protocol to yield
a scheme with the following properties.
Utility.
In addition to PIR’s standard functionality, we seek to provide
the database servers with the following capabilities.
678Tiered pricing: Users pay predetermined amounts for each re-
trieved record. The system assigns each user to a price tier
and the prices they pay depend on both this tier and the par-
ticular records they purchase.
Access control: The database servers may set the availability of
each record with respect to users of each price tier.
Replication: The database servers can dynamically learn which
records are most popular without revealing information about
individual users’ query patterns. This allows popular records
to be accessed at a lower computation and communication
cost than their less popular counterparts.
Bookkeeping: A common database may sell records from mul-
tiple CPs while ensuring that each CP receives the correct
share of proﬁts based on sales of its own records.
Security and privacy.
Traditional databases can already offer all of the above function-
ality, and more. What makes our situation unique is that we wish to
provide this functionality while offering strong privacy protection,
both for users and for CPs.
Correctness: Users with sufﬁcient funds and privileges can al-