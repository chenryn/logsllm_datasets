# Title: Watching You Watch: The Tracking Ecosystem of Over-the-Top TV Streaming Devices

## Authors:
Hooman Mohajeri Moghaddam, Gunes Acar, Ben Burgess, Arunesh Mathur, Danny Yuxing Huang, Nick Feamster, Edward W. Felten, Prateek Mittal, Arvind Narayanan  
*Princeton University and University of Chicago*

## Abstract
The number of Internet-connected TV devices has grown significantly in recent years, particularly Over-the-Top (OTT) streaming devices such as Roku TV and Amazon Fire TV. These devices offer an alternative to traditional multi-channel television subscription services and are often monetized through behavioral advertising. To investigate the privacy practices of these platforms, we developed a system that can automatically download OTT apps (also known as channels), interact with them, intercept network traffic, and perform best-effort TLS interception. Using this smart crawler, we visited more than 2,000 channels on two popular OTT platforms: Roku and Amazon Fire TV. Our results show that tracking is pervasive on both platforms, with 69% of Roku channels and 89% of Amazon Fire TV channels sending traffic to known trackers. We also discovered widespread collection and transmission of unique identifiers, such as device IDs, serial numbers, WiFi MAC addresses, and SSIDs, sometimes over unencrypted connections. Additionally, we found that the countermeasures available on these devices, such as limiting ad tracking options and ad-blocking, are largely ineffective. Based on our findings, we provide recommendations for researchers, regulators, policymakers, and platform/app developers.

## CCS Concepts
- **Security and Privacy** → Privacy Protections

## Keywords
privacy, OTT, third-party tracking, measurement, Internet TV, automation

## 1. Introduction
The number of Internet-connected TV users has steadily increased over the past few years. In 2018, an estimated 65.3% of Internet users in the United States—approximately 182.6 million people—used an Internet-connected TV device [20]. The trend of "cord-cutting," where users replace traditional cable TV subscriptions with content delivered through Internet-connected TV platforms, has become increasingly popular [77].

However, many Internet-connected TVs introduce significant privacy risks. These devices often have access to sensitive user data, such as microphone input, viewing history, and personal information. This data can be exposed to app developers and used for behavioral advertising. For example, the Federal Trade Commission (FTC) recently fined Vizio, a smart TV manufacturer, for collecting individual users' demographics and viewing histories for targeted advertising without consent [60]. Moreover, for manufacturers like Roku, advertising has surpassed device sales as the primary source of income [38, 52, 56, 73]. We have found evidence of trackers collecting user identifying information and viewing behavior in Roku's network traffic, as shown in Figure 1.

In this paper, we examine the advertising and tracking ecosystem of OTT streaming devices, which deliver Internet-based video content to traditional TVs or display devices. Specifically, we aim to identify endpoints that OTT channels contact to serve advertisements and/or track users; the entities associated with these endpoints; the information OTT channels send to them; and how they potentially track users.

To achieve this, we built an automated system that collects channel information from OTT channel stores, loads individual channels on an OTT device, and attempts to play a video clip and trigger a video ad while capturing network traffic. We studied two of the most popular OTT streaming devices: the Roku Channel Store [67] and the Amazon Fire TV channel store [3]. We examined the network traffic of 1,000 channels from each store. Automated analysis of these channels at scale presents two key challenges:

### Challenge 1: Automated Interaction
Unlike web browsers and mobile devices, where visiting, launching, and interacting with applications is enabled by existing automation software (e.g., Selenium [71]), there is no such solution for OTT devices. Even though many OTT devices have a remote control API, the interaction is limited to sending commands and coarse-grained feedback, such as the current channel viewed. The lack of fine-grained feedback, such as what text is shown on the TV screen or whether a video clip or video advertisement (ad) is being played, makes it difficult to execute the complex interactions required to play videos on channels. To mitigate this, we built a system that uses audio and pixel content to infer the state of video playback on the TV, as detailed in Section 3.

### Challenge 2: Intercepting Traffic
Unlike web browsers and mobile devices, which expose capabilities to install root certificates to intercept HTTPS traffic, OTT streaming devices are largely closed and proprietary, making it harder to intercept and analyze encrypted traffic. To address this, we modified mitmproxy to intercept and decrypt HTTPS traffic via best-effort. Where possible, we deployed our own TLS certificate to the device and used external toolkits (e.g., Frida [29] for the Amazon Fire Stick TV) to bypass certificate pinning.

### Contributions
- We conducted the first large-scale study of privacy practices of OTT streaming channels. Using an automated crawler we developed, we crawled more than 2,000 channels and found widespread tracking practices.
- We built the first system that can automate the interaction of OTT channels and the interception of network activities. We will open-source the system, which can be used by other researchers to study similar OTT and smart TV platforms.
- We discovered the collection of persistent identifiers (such as WiFi MAC addresses and SSIDs) for tracking, sometimes over unencrypted connections. We found connections to at least one tracker in 691 of the most popular 1,000 channels on Roku and 894 of the most popular channels on Amazon Fire TV.
- Analyzing the local remote control APIs of the OTT devices, we found a vulnerability that allows a malicious web script to extract a Roku user’s location, retrieve installed channels, install new channels, and access device identifiers. We reported the vulnerability to the vendor, who has rolled out a fix.

## 2. Related Work and Background
In this section, we review the related work and describe the OTT streaming devices we studied.

### 2.1 Related Work
Numerous studies have examined different aspects of online tracking, including understanding how tracking works, the entities involved, and the implications for consumer privacy. We summarize the related literature and place our study in context.

#### 2.1.1 Web Tracking: Techniques and Measurement
Early studies of online tracking began examining the presence and practices of third-party entities embedded on websites [36, 42, 63], finding pervasive use of third-party cookies to track users across websites. Subsequent studies discovered novel third-party tracking techniques, such as Flash cookies [74], browser fingerprinting [18], canvas fingerprinting [45], performance characteristics [44], font metrics [27], and installed browser extensions [31, 76].

While these studies illuminated several types of tracking mechanisms, only recently have researchers begun measuring and examining their behavior at scale. For example, Nikiforakis et al. measured the prevalence of third-party JavaScript on the Alexa Top 10,000 websites and identified new ways adversaries could compromise websites [51]. Libert used an instrumented headless browser to study third-party tracking and found that websites leaking user data contact an average of nine different third parties [39]. Acar et al. built FPDetective [2] to measure the prevalence of various fingerprinting techniques on the Alexa Top 1 Million websites.

More recently, Englehardt and Narayanan designed and built OpenWPM—an instrumented web crawler based on Selenium—and used it to measure the prevalence of various kinds of browser fingerprinting on the Alexa Top 1 Million pages [23], discovering that a few large third parties are responsible for most tracking on the web. Other studies using OpenWPM have shown how web tracking exposes users to network surveillance by sending identifiers in the clear [24] and how nearly 30% of all emails leak users’ email addresses to third parties [22]. Das et al. [10] found that several third parties in the Top 100K Alexa websites use sensor APIs—such as motion, orientation, proximity, and light—available in mobile browsers for tracking and analytics.

#### 2.1.2 Mobile Tracking
Several studies have documented the third-party entity landscape of mobile applications. Privacy implications of mobile apps have been extensively studied in the literature [21, 32, 61]. Xia et al. showed that up to 50% of smartphone traffic can be attributed to users’ real names [82]. Reyes et al. analyzed 5,855 popular free children’s apps and found widespread violation of the Children’s Online Privacy Protection Act (COPPA) [62]. Other work explored ways to track users on mobile platforms by fingerprinting smartphone configurations [37], acoustic components [11], sensors [12, 13, 48], battery readings [54], and ambient light levels [53]. Ren et al. presented ReCon [61], which detects potential PII leaks by inspecting network traffic and allows users to control dissemination. They ran a study with 92 participants to measure PII exposure on the 100 most popular iOS, Android, and Windows Phone apps.

#### 2.1.3 Privacy and Security of Smart Devices
Analyzing 20 IoT devices, Loi et al. proposed a systematic method to identify security and privacy issues of various IoT devices, including home security, energy management, and entertainment devices [40]. Fernandes et al. studied the security of 499 SmartThings apps and 132 device handlers on Samsung’s SmartThings platform and found security flaws in the framework [26]. Wood et al. studied four medical devices and found that one device occasionally sends sensitive health data in clear text [81]. Acar et al. used DNS Rebinding [14] to gather sensitive information and control IoT devices with local HTTP interfaces [1]. Finally, Malkin et al. [41] surveyed current and prospective smart TV users regarding their privacy understanding and expectations and concluded that there is very little transparency and understanding of privacy practices on these platforms.

### 2.2 Platforms and Channel Stores
We examined the advertising and tracking ecosystem of services present on two of the most popular OTT streaming device families: Roku and Amazon Fire TV. Together, these two account for 59% to 65% of the global market share [8, 19, 20]. Both device families consist of various external devices that users connect to displays (such as TVs) via HDMI. These devices stream video content over the Internet through channels (like apps). Users can download and install channels on their devices from the Roku Channel Store [67] and the Amazon Fire TV channel store [3].

Roku streaming devices run a proprietary operating system developed by Roku, Inc. The Roku channels are packaged, signed, and encrypted to ensure the confidentiality of the source code. Only Roku devices have the ability to decrypt the channels. As a privacy option, Roku allows users to “Limit Ad Tracking” to disable identifiers used for targeted advertising. Roku’s developer documentation states that channels should not use the data collected from the device to serve personalized advertisements when this option is enabled [64].

Amazon Fire TV devices run a custom version of the Android operating system. Amazon Fire TV channels are packaged in the Android Application Package (APK) format, and—as with most Android devices—developers can interact with the Fire TV devices using the Android Debug Bridge (adb) tool. Similar to Roku, Amazon allows users to “Disable Interest-based Ads” and limit behavioral profiling and targeting [4].

We performed our crawls on both Roku and Amazon Fire TV family of devices, specifically using the Roku Express [69] and the Amazon Fire TV Stick [5], as these are the most popular and least expensive options within each family. Note that while we crawled the channels from the channel stores using these specific devices, our crawler was built to be largely agnostic to the underlying device type. In future work, researchers can replace a small portion of our Roku- and Amazon-specific code with APIs of other OTT platforms.

## 3. Smart Crawler and Data Collection
In this section, we describe our data collection pipeline, the list of channels we crawled, and our crawler infrastructure. We also discuss the different settings and preferences we used for all the crawls in our study.

### 3.1 Compiling Channel Lists
We compiled a list of channels from the Roku and Amazon Fire TV channel stores in May 2019.

#### 3.1.1 Roku Channel Lists
Roku channels are organized by category on the Roku Channel Store website, with each channel belonging to only one category. To compile a list of channels, we extracted all the channels within each category. Each category page on the website (e.g., channelstore.roku.com/browse/movies-and-tv) contains a list of channels in that category along with each channel’s metadata information—its ID, description, Roku’s internal channel popularity ranking, and the identity of its developer—all of which we recorded. This resulted in a list of 8,660 channels across 23 categories.

To keep our crawls manageable while analyzing channels that users are more likely to encounter, we did not extract all 8,660 channels. Instead, we created a new list, sorting the list of 8,660 channels by rank and retaining the top 1,000 channels (Roku-Top1K). Additionally, to test various features of the OTT devices (e.g., privacy controls), we created a list of 100 channels (Roku-Categories-Top100) by selecting the top 10 channels by rank from the following categories: “Movies & TV,” “Kids & Family,” “Sports,” “Fitness,” “Religious,” “Food,” “Shopping,” “Educational,” “Special Interest,” and “News & Weather.” We chose these categories because they contained the most channels overall.

#### 3.1.2 Amazon Fire TV Channel Lists
Like Roku, Amazon Fire TV channels are organized as a list on the Amazon Fire TV channel store website, with some channels belonging to multiple categories. We recorded all the channels from this list, including each channel’s metadata—its ID, description, Amazon Fire TV’s internal channel popularity ranking, and the identity of its developer—resulting in a list of 6,782 channels across 29 categories.

As with the Roku channel lists, we retained the top 1,000 channels by rank (FireTV-Top1K) for crawling. Additionally, we created a list of 100 channels (FireTV-CategoriesTop100) by selecting the top 10 channels by rank from the following categories: “News & Weather,” “Movies & TV,” “Sports,” “Lifestyle,” “Health & Fitness,” “Food & Drink,” “Kids,” “Shopping,” and “Education.” We chose these categories because they contained the most channels overall. Because some of these channels belonged to multiple categories, this list contained 86 channels in total.

For successive crawls, we installed the channels from the APK files using adb rather than the channel store. The crawler then uses adb commands to install the channel APK files, which we retrieved from the Amazon Fire TV channel store ahead of running any crawls.

### 3.2 Triggering Video Playback
While merely launching a channel might reveal initial insight into its advertising and tracking ecosystem, triggering video playback and watching content, like an actual user, provides a more thorough and complete view. While our crawler can interact with channels using the OTT device’s remote control APIs, triggering video playback in an automated fashion is challenging because channels’ user interfaces vary widely. Therefore, we developed our crawler to maximize the probability of triggering video playback in channels.

To maximize the probability, we first analyzed how a human would interact with a channel to play a video. We randomly selected 100 channels from the Roku-Top1K list. For each channel, we manually recorded the shortest sequence of keystrokes that leads to video playback (e.g., the “Down” button followed by the “OK” button). The three sequences that triggered video playback on the most channels were: [OK, OK, OK], [Down, OK, OK], and [OK, OK, Down, OK, Down, OK].

The crawler employs these three key sequences by first opening a channel, executing one key sequence, and then checking the audio output signal (as a proxy for video playback). The crawler detects the audio signal by comparing the amplitude of the last five seconds of audio to the noise and then checking if the difference between the two is greater than a certain threshold; we determined this threshold through iterative testing. If the crawler does not detect an audio signal, it assumes the key sequence did not work, restarts the channel, and then proceeds to play the remaining key sequences.

We tested the efficacy of our audio detection method by manually labeling screenshots from a sample of 150 channels with whether or not they achieved video playback. We compared this “ground truth” to the crawler’s audio detection log to determine the accuracy, noting false positives and false negatives. Overall, the audio detection method was accurate in 144 of the 150 (96%) channels. We discovered only six cases of false positives (out of 40 detections) where the crawler erroneously concluded video playback had taken place. These were due to menu animations, audio guides, and background music. We found no false negatives.