title:Watching You Watch: The Tracking Ecosystem of Over-the-Top TV Streaming
Devices
author:Hooman Mohajeri Moghaddam and
Gunes Acar and
Ben Burgess and
Arunesh Mathur and
Danny Yuxing Huang and
Nick Feamster and
Edward W. Felten and
Prateek Mittal and
Arvind Narayanan
Watching You Watch: The Tracking Ecosystem of Over-the-Top
TV Streaming Devices
Hooman Mohajeri Moghaddam, Gunes Acar, Ben Burgess, Arunesh Mathur, Danny Yuxing Huang,
Nick Feamster∗, Edward W. Felten, Prateek Mittal, Arvind Narayanan
Princeton University and University of Chicago∗
ABSTRACT
The number of Internet-connected TV devices has grown signifi-
cantly in recent years, especially Over-the-Top (“OTT”) streaming
devices, such as Roku TV and Amazon Fire TV. OTT devices offer
an alternative to multi-channel television subscription services,
and are often monetized through behavioral advertising. To shed
light on the privacy practices of such platforms, we developed a
system that can automatically download OTT apps (also known as
channels), and interact with them while intercepting the network
traffic and performing best-effort TLS interception. We used this
smart crawler to visit more than 2,000 channels on two popular
OTT platforms, namely Roku and Amazon Fire TV. Our results
show that tracking is pervasive on both OTT platforms, with traffic
to known trackers present on 69% of Roku channels and 89% of
Amazon Fire TV channels. We also discover widespread practice of
collecting and transmitting unique identifiers, such as device IDs,
serial numbers, WiFi MAC addresses and SSIDs, at times over un-
encrypted connections. Finally, we show that the countermeasures
available on these devices, such as limiting ad tracking options and
adblocking, are practically ineffective. Based on our findings, we
make recommendations for researchers, regulators, policy makers,
and platform/app developers.
CCS CONCEPTS
• Security and privacy → Privacy protections.
KEYWORDS
privacy; OTT; third-party tracking; measurement; Internet TV;
automation
1 INTRODUCTION
The number of Internet connected TV users has increased steadily
over the past few years and an estimated 65.3% of Internet users
in the United States (US)—close to 182.6 million people—used an
Internet connected TV device in 2018 [20]. In fact, “cord-cutting”
patter, where users replace their traditional cable TV subscription
with content delivered through Internet connected TV platforms
to avoid long-term multi-channel subscription commitments, has
been a very popular trend in recent years [77].
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6747-9/19/11.
https://doi.org/10.1145/3319535.3354198
1
However, many Internet-connected TVs introduce privacy risks.
These devices often have access to sensitive user data, e.g., micro-
phone input, viewing history, and personal information. Not only
could such data be exposed to developers who build applications
(hereafter, channels) for these devices, but it could also be used
for behavioral advertising. For example, the Federal Trade Com-
mission (FTC) recently fined Vizio—a smart TV manufacturer—for
collecting individual users’ demographics and viewing histories for
targeting advertising without consent [60]. Moreover, for manufac-
turers such as Roku, advertising has surpassed device sales as the
primary source of income [38, 52, 56, 73]. In fact, we have found
evidence of trackers collecting user identifying information and
viewing behavior in Roku’s network traffic, as shown in Figure 1.
In this paper, we examine the advertising and tracking ecosystem
of Over-the-Top (“OTT”) streaming devices, which deliver Internet-
based video content to traditional TVs/display devices. OTT devices
refer to a family of services and devices that either directly connect
to a TV (e.g., streaming sticks and boxes) or enable functionality
within a TV (e.g., smart TVs) to facilitate the delivery of Internet-
based video content [25].
Specifically, we are interested in identifying endpoints that OTT
channels contact to serve advertisements and/or track users; the
entities that these endpoints are associated with; what information
OTT channels send to them; and how they potentially track users.
To this end, we build an automated system that collects channel
information from OTT channel stores, loads individual channels
on an OTT device, and attempts to play a video clip and trigger a
video ad while capturing network traffic. In particular, we study
two of the most popular OTT streaming devices in the market:
the Roku Channel Store [67] and the Amazon Fire TV channel
store [3]. We examine the network traffic of 1,000 channels from
the Roku Channel Store and 1,000 channels from the Amazon Fire
TV channel store. Automated analysis of these channels at scale
presents two key challenges that previous studies examining third-
party tracking at scale on the web [23] and mobile devices [59]
have not encountered:
Challenge 1: Automated Interaction: Unlike web browsers
and mobile devices, where visiting, launching and interacting with
applications is enabled by existing automation software (e.g., Sele-
nium [71]), to the best of our knowledge there is no such solution
for OTT devices. Even though many OTT devices have a remote
control API, the interaction is virtually limited to sending com-
mands and coarse-grained feedback, such as the current channel
viewed. The lack of fine-grained feedback, such as what text is
shown on the TV screen or whether a video clip or video advertise-
ment (ad) is being played on the TV, makes it difficult to execute
the complex interaction required to play videos on channels. To
mitigate this lack of feedback, we build a system that uses audio
Figure 1: AsianCrush channel on Roku sends device ID and video title to online video advertising platform spotxchange.com.
and pixel content to infer the state of video playback on the TV, as
we will explain in detail in Section 3.
Challenge 2: Intercepting Traffic: Unlike web browsers and
mobile devices which expose capabilities to install root certificates
to intercept HTTPS traffic, OTT streaming devices are largely closed
and proprietary, making it harder to intercept and analyze en-
crypted traffic. To this end, we modify mitmproxy to intercept
and decrypt HTTPS traffic via best-effort. Where possible, we de-
ploy our own TLS certificate to the device and use external toolkits
(e.g., Frida [29] for the Amazon Fire Stick TV) to bypass certificate
pinning.
Contributions: We make the following contributions:
• We conduct the first large-scale study of privacy practices
of OTT streaming channels. Using an automated crawler
that we developed in house, we crawled more than 2,000
channels and found widespread practices of tracking.
• We build the first system that can automate the interaction
of OTT channels and the interception of network activities.
We will open-source the system, which can be used by other
researchers to study similar OTT and smart TV platforms.
• We discover collection of persistent identifiers (such as WiFi
MAC addresses and SSIDs) for tracking, at times over un-
encrypted connections. We find connection to at least one
tracker on the traffic of 691 of the most popular 1,000 chan-
nels on Roku and 894 of the most popular channels on Ama-
zon Fire TV.
• Analyzing the local remote control APIs of the OTT devices,
we find a vulnerability that allows a malicious web script to
extract a Roku user’s location, retrieve installed channels, in-
stall new channels and access device identifiers. We reported
the vulnerability to the vendor, who has rolled out a fix.
2 RELATED WORK AND BACKGROUND
In this section we review the related work, and we describe the
OTT streaming devices we studied in our work.
2.1 Related Work
Numerous studies have examined different aspects of online track-
ing, ranging from understanding how tracking works, what entities
engage in tracking, and the implications of tracking for consumer
privacy. In this section, we summarize the related literature and
place our study in context.
2.1.1 Web Tracking: Techniques and Measurement. Some of the ear-
liest studies of online tracking began examining the presence and
practices of third-party entities embedded on websites [36, 42, 63],
finding pervasive use of third-party cookies to track users across
websites. Successive studies discovered novel third-party tracking
techniques that are difficult to counter. For example, studies have
shown how users can be tracked on the Web using Flash cook-
ies [74], browser fingerprinting [18], canvas fingerprinting [45],
performance characteristics [44], font metrics [27] and installed
browser extensions [31, 76].
While these studies illuminated several types of tracking mech-
anisms, only recently have researchers begun measuring and ex-
amining their behavior at scale. For example, Nikiforakis, et al.
measured the prevalence of third-party JavaScript on the Alexa
Top 10,000 websites, and identified new ways an adversary could
compromise websites such as by registering stale domains that
victim websites load scripts from [51]. In another instance, Libert
used an instrumented headless browser to study third-party track-
ing and discovered that websites that leak user data contact an
average of nine different third parties [39]. Finally, Acar et al. built
FPDetective [2] to measure the prevalence of various fingerprinting
techniques on the web over the Alexa Top 1 Million websites.
More recently, Englehardt and Narayanan designed and built
OpenWPM—an instrumented web crawler based on Selenium—
and used it to measure the prevalence of various kinds of browser
fingerprinting on the Alexa Top 1 Million pages [23], discovering
that a few large third parties are responsible for most tracking on the
web. Other studies using OpenWPM have shown how web tracking
exposes users to network surveillance by sending identifiers in
the clear [24], and how nearly 30% of all emails leak users’ email
addresses to third parties [22]. More recently, Das et al. [10] found
that several third parties in the Top 100K Alexa websites use sensor
APIs—such as motion, orientation proximity and light—available in
mobile browsers for tracking and analytics.
2.1.2 Mobile Tracking. Numerous studies have documented the
third-party entity landscape of mobile applications. Privacy im-
plications of mobile apps have been extensively studied in the
literature [21, 32, 61]. Xia et al. showed that up to 50% of the smart-
phone traffic can be attributed to users’ real names [82]. Reyes et
al. analyzed 5,855 popular free children’s apps and found wide-
spread violation of the Children’s Online Privacy Protection Act
(“COPPA") [62]. Other work explored ways to track users on mobile
2
HTTP outbound to 192.35.249.124:80(DNS: search.spotxchange.com)(channel name: asiancrush)GET./vast/3.0/146141?VPI[]=MP4&VPI[]=ROKU&app[name]=asiancrush&app[domain]=asiancrush.com&app[bundle]=com.dmr.asiancrush&player_width=1280&player_height=720&device[devicetype]=7&device[make]=Roku&device[model]=Roku&device[ifa]=39fc6352-aede-53f6-b3e3-58bf562bd074&ip_addr=128.112.139.195&cb=1557313464653&custom[movie_title]=So%20Young%202%3A%20Never%20Gone&custom[content_id]=3417&token[device_id]=39fc6352-aede-53f6-b3e3-58bf562bd074&token[connection]=wifi&token[category_ID]=241&token[category_Title]=Romance&device[dnt]=0&max_bitrate=7000 HTTP/1.1Host: search.spotxchange.comUser-Agent: Roku/DVP-9.0 (519.00E04142A)Accept: */*platforms by fingerprinting smartphone configurations [37], acous-
tic components [11], sensors [12, 13, 48], battery readings [54], and
ambient light level [53]. Ren et al. presented ReCon [61], which
detects potential PII leaks by inspecting network traffic and allows
users to control dissemination. They ran a study with 92 partici-
pants to measure PII exposure on the 100 most popular iOS, Android,
and Windows Phone apps.
2.1.3 Privacy and Security of Smart Devices. Analyzing 20 IoT de-
vices, Loi et al. proposed a systematic method to identify the security
and privacy issues of various IoT devices including home security,
energy management and entertainment devices [40]. Fernandes et
al. studied security of 499 SmartThings apps and 132 device handlers
on Samsung’s SmartThings platform and found security flaws in the
framework [26]. Wood et al. studied four medical devices and found
that one device occasionally sends sensitive health data in clear
text [81]. Acar et al. used DNS Rebinding [14] to gather sensitive
information and control IoT devices with local HTTP interfaces [1].
Finally, Malkin et al. [41] surveyed current and prospective smart
TV users regarding their privacy understanding and expectations
with regards to these platforms and concluded that there is very
little transparency and understanding of privacy practices on these
platforms.
2.2 Platforms and Channel Stores
We examined the advertising and tracking ecosystem of services
present on two of the most popular OTT streaming device families:
Roku and Amazon Fire TV. We specifically chose these two, since
together they account for 59% to 65% of the market share globally [8,
19, 20]. Both device families consist of various external devices that
users connect to displays (such as TVs) via HDMI. These devices
stream video content over the Internet through channels (like apps).
Users can download and install channels on their devices from the
Roku Channel Store [67] and the Amazon Fire TV channel store [3].
Roku streaming devices run a proprietary operating system de-
veloped by Roku, Inc. The Roku channels are packaged, signed and
encrypted to ensure confidentiality of the source code. Only Roku
devices have the ability to decrypt the channels. As a privacy op-
tion, Roku allows users to “Limit Ad Tracking” to disable identifiers
used for targeted advertising and Roku’s developers documentation
states that channels should not use the data collected from the
device to serve personalized advertisements when this option is
enabled [64].
Amazon Fire TV devices run a custom version of the Android
operating system. Amazon Fire TV channels are packaged in the
Android Application Package (APK) format, and—as with most An-
droid devices—developers can interact with the Fire TV devices us-
ing the Android Debug Bridge (adb) tool1. Similar to Roku, Amazon
allows users to “Disable Interest-based Ads” and limit behavioral
profiling and targeting [4].
We performed our crawls on both Roku and Amazon Fire TV
family of devices, more specifically using Roku Express [69] and the
Amazon Fire TV Stick [5] since these are the most popular and least
expensive options within each family. Note that while we crawled
the channels from the channel stores using these specific devices,
1
https://developer.android.com/studio/command-line/adb
3
our crawler was built to be largely agnostic to the underlying device
type. In future work, researchers can replace a small portion of our
Roku- and Amazon-specific code with APIs of other OTT platforms.
3 SMART CRAWLER AND DATA
COLLECTION
In this section, we describe our data collection pipeline: the list
of channels we crawled, and our crawler infrastructure. We also
discuss different settings and preferences we used for all the crawls
we performed in our study.
3.1 Compiling Channel Lists
We compiled a list of channels from the Roku and Amazon Fire TV
channel stores. We compiled these lists in May 2019.
3.1.1 Roku Channel Lists. Roku channels are organized by cate-
gory on the Roku Channel Store website, with each channel belong-
ing to only one category. To compile a list of channels, we extracted
all the channels within each category. Each category page on the
website (e.g., channelstore.roku.com/browse/movies-and-tv)
contains a list of channels in that category along with each chan-
nel’s metadata information—its ID, description, Roku’s internal
channel popularity ranking, and the identity of its developer—all of
which we recorded. This resulted in a list of 8,660 channels across
23 categories.
To keep our crawls tractable while analyzing channels that users
are more likely to encounter, we did not extract all the 8,660 chan-
nels. Instead, we created a new list, sorting the list of 8,660 channels
by rank and retaining the top 1,000 channels (Roku-Top1K). In
addition, to test various features of the OTT devices (e.g., privacy
controls), we created a list of 100 channels (Roku-Categories-
Top100) by selecting the top 10 channels by rank from the follow-
ing categories: “Movies & TV”, “Kids & Family”, “Sports” , “Fitness”,
“Religious”, “Food”, “Shopping”, “Educational”, “Special Interest”,
and “News & Weather”. We chose these categories since they con-
tained the most channels overall.
3.1.2 Amazon Fire TV Channel Lists. Like Roku, Amazon Fire TV
channels are organized as a list on the Amazon Fire TV channel
store website, with some channels belonging to multiple categories.
We recorded all the channels from this list, including each channel’s
metadata—its ID, description, Amazon Fire TV’s internal channel
popularity ranking, and the identity of its developer—resulting in a
list of 6,782 channels across 29 categories.
As with the Roku channel lists, we retained the top 1,000 channels
by rank (FireTV-Top1K) for crawling. In addition, we also created
a list of 100 channels (FireTV-CategoriesTop100) by selecting the
top 10 channels by rank from the following categories: “News &
Weather”, “Movies & TV”, “Sports”, “Lifestyle”, “Health & Fitness”,
“Food & Drink”, “Kids”, “Shopping”, and “Education”. We chose these
categories since they contained the most channels overall. Because
some of these channels belonged to multiple categories, this list
contained 86 channels in total.
For successive crawls, we installed the channels from the APK files
using adb as opposed to the channel store. The crawler then uses
adb commands to install the channel APK files, which we retrieve
from the Amazon Fire TV channel store ahead of running any
crawls.
3.2.2 Triggering Video Playback. While merely launching a chan-
nel might reveal initial insight into its advertising and tracking
ecosystem, triggering video playback and watching content, like
an actual user, provides a more thorough and complete view. While
our crawler can interact with channels using the OTT device’s
remote control APIs, triggering video playback in an automated
fashion is challenging because channels’ user interfaces vary widely.
Therefore, we developed our crawler to maximize the probability
of triggering video playback in channels.
To maximize the probability, we first analyzed how a human
would interact with a channel to play a video. We randomly se-
lected 100 channels from the Roku-Top1K list. For each channel, we
manually recorded the shortest sequence of keystrokes that leads
to video playback (e.g., the “Down” button followed by the “OK”
button). The three sequences that triggered video playback on the
most channels were: [OK, OK, OK], [Down, OK, OK] and [OK, OK,
Down, OK, Down, OK].
The crawler employs these three key sequences by first opening
a channel, executing one key sequence, and then checking the
audio output signal (as a proxy for video playback). The crawler
detects the audio signal by comparing the amplitude of the last five
seconds of audio to the noise, and then checking if the difference
between the two is greater than a certain threshold; we determined
this threshold through iterative testing. If the crawler does not
detect an audio signal, it assumes the key sequence did not work,
restarts the channel, and then proceeds to play the remaining key
sequences.
We tested the efficacy of our audio detection method by man-
ually labelling screenshots from a sample of 150 channels with
whether or not they achieved video playback. We compared this
“ground truth” to the crawler’s audio detection log to determine
the accuracy, noting false positives and false negatives. Overall,
the audio detection method was accurate in 144 of the 150 (96%)
channels. We discovered only six cases of false positives (out of 40
detections) where the crawler erroneously concluded video play-
back had taken place. These were due to menu animations, audio
guides and background music. We found no false negatives.