Attacks. Aviv et al. [56] pointed out
that side-channel
attacks can be launched due to speciﬁc interactions with the
smartphone or touchscreen-based devices in general. More
speciﬁcally, forensic investigations of smudges (oily residues
from the user’s ﬁngers) on the touchscreen allow to infer
unlock patterns. Even after cleaning the phone or placing the
phone into the pocket, smudges seem to remain most of the
time. Hence, smudges are quite persistent which increases
the threat of smudge attacks. Follow-up work considering
an attacker who employs ﬁngerprint powder to infer keypad
inputs has been presented by Zhang et al. [57] and also
an investigation of the heat traces—left on the screen due
to ﬁnger touches—by means of thermal cameras has been
performed [58].
Shoulder Surﬁng and Reﬂections. Touchscreens of mo-
bile devices optically/visually emanate the displayed content.
Often these visual emanations are reﬂected by objects in the
environment, such as sunglasses and tea pots [59], [60].
Attacks. Maggi et al. [61] observed that touchscreen input
can be recovered by monitoring the visual feedback (pop-up
characters) on soft keyboards during the user input. Therefore,
they rely on cameras that are pointed directly on the targeted
screen. Raguram et al. [62], [63] observed that reﬂections,
e.g., on the user’s sunglasses, can also be used to recover
input typed on touchscreens. However, the attacker needs to
point
the camera, used to capture the reﬂections, directly
on the targeted user. Subsequently, they rely on computer
vision techniques and machine learning techniques to infer
the user input from the captured video stream. Xu et al. [64]
extended the range of reﬂection-based attacks by considering
reﬂections of reﬂections. Although, they do not rely on the
visual feedback of the soft keyboard but instead track the user’s
ﬁngers on the smartphone while interacting with the device.
By increasing the distance between the attacker and the
victim, e.g., by relying on more expensive and sophisticated
cameras, some of these attacks might as well be considered
as vicinity attacks.
Hand/Device Movements. Many input methods on various
devices rely on the user operating the device with her hands
and ﬁngers. For instance, users tend to hold the device in their
hands while operating it with their ﬁngers.
Attacks. Similar to reﬂections, Shukla et al. [65] proposed
to monitor hand movements as well as ﬁnger movements—
without directly pointing the camera at the targeted screen—in
order to infer entered PIN inputs. Sun et al. [66] monitored
the backside of tablets during user input and detected subtle
motions that can be used to infer keystrokes, while Yue et
al. [67] proposed an attack where the input on touch-enabled
devices can be estimated from a video of a victim tapping on
a touch screen.
Again, by increasing the distance between the attacker and
the victim, these attacks might also be considered as vicinity
attacks, which demonstrates the seamless transition from local
attacks to vicinity attacks for these types of attacks.
B. Active Attacks
An active attacker also manipulates the target, its input,
or its environment in order to subsequently observe leaking
information via abnormal behavior of the target or to bypass
security mechanisms directly. While the transition between
local and vicinity attackers is seamless in case of passive
attacks, active attacks always assume that the attacker is in
possession of the device (at least temporary).
Active attacks against cryptographic implementations date
back to the works of Boneh et al. [68] (a.k.a. Bellcore attack)
who attacked RSA crypto systems, especially implementations
based on the Chinese Remainder Theorem (CRT), by relying
on random hardware faults that result in the output of an
erroneous signature. Later, Biham and Shamir [69] coined the
term differential fault analysis (DFA) attacks and demonstrated
that the introduction of faults and observing differences in the
output ciphertext allow to recover the secret key of symmetric
primitives. The basic idea of these attacks is to solve algebraic
equations based on erroneous outputs (and valid outputs).
Clock/Power Glitching. Variations of the clock signal, e.g.,
overclocking, have been shown to be an effective method for
fault injection on embedded devices in the past. One prereq-
uisite for this attack is an external clock source. Microcon-
trollers applied in smartphones typically have an internal clock
generator, making clock tampering difﬁcult. Besides clock
tampering, intended variations of the power supply represent
an additional method for fault injection. With minor hardware
modiﬁcations, power-supply tampering can be applied on most
microcontroller platforms.
Attacks. In [70] it is shown how to disturb the program exe-
cution of an ARM CPU on a Raspberry PI by underpowering,
i.e., the supply voltage is set to ground (GND) for a short
time. Due to the relatively easy application on modern micro-
controllers, voltage-glitching attacks pose a serious threat for
smartphones if attackers have physical access to the device.
For instance, O’Flynn [71] demonstrated that by shorting the
power supply of an off-the-shelf Android smartphone, a fault
can be introduced that leads to an incorrect loop count.
Electromagnetic Fault
Injection (EMFI). Transistors
placed on microchips can be inﬂuenced by electromagnetic
emanation. EMFI attacks take advantage of this fact. These
attacks use short (in the range of nanoseconds), high-energy
EM pulses to, e.g., change the state of memory cells, resulting
in erroneous calculations. In contrast
to voltage glitching,
where the injected fault is typically global, EMFI allows to
target speciﬁc regions of a microchip by precisely placing the
EM probe, e.g., on the instruction memory, the data memory,
or CPU registers. Compared to optical fault injection, EMFI
attacks do not necessarily require a decapsulation of the chip,
which makes them more practical.
Attacks. Ordas et al. [72] reported successful EMFI at-
tacks targeting the AES hardware module of a 32 bit ARM
processor. Rivi`ere et al. [73] used EMFI attacks to force in-
struction skips and instruction replacements on modern ARM
microcontollers. Considering the fact that ARM processors
are applied in modern smartphones, EMFI attacks represent
a serious threat for such devices.
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
10
OVERVIEW OF LOCAL SIDE-CHANNEL ATTACKS AND CORRESPONDING TARGETS.  AND  INDICATE WHETHER OR NOT A SPECIFIC ATTACK HAS BEEN
TABLE II
PERFORMED ON THE CORRESPONDING TARGET.
Crypto, program ﬂow
Application inference
Targets
 [49]
Attack
Power analysis attacks
Electromagnetic analysis attacks
Differential computation analysis
Smudge attacks
Shoulder surﬁng and reﬂections
Hand/device movements
Clock/power glitching
Electromagnetic fault injection
Laser/optical faults
Temperature variation
NAND mirroring
Active/passive
Passive
Passive
Active/passive
Passive
Passive
Passive
Active
Active
Active
Active
Active
Property
Physical
Physical
Logical
Physical
Physical
Physical
Physical
Physical
Physical
Physical
Physical
 [48]
 [50]–[54]
 [55], [74]



 [70], [71]
 [72], [73]
 [75]–[77]
 [78], [79]
 [80]
User input



 [56]–[58]
 [61]–[64]
 [65]–[67]















Laser/Optical Faults. Optical fault attacks using a laser
beam are among the most-effective fault-injection techniques.
These attacks take advantage of the fact that a focused laser
beam can change the state of a transistor on a microcontroller,
resulting in, e.g., bit ﬂips in memory cells. Compared to other
fault-injection techniques (voltage glitching, EMFI), the effort
for optical fault injection is high. First, decapsulation of the
chip is a prerequisite in order to access the silicon with the
laser beam. Second, ﬁnding the correct location for the laser
beam to produce exploitable faults is also not a trivial task.
Attacks. First optical fault-injection attacks targeting an 8-
bit microcontroller have been published by Skorobogatov and
Anderson [75] in 2002. Inspired by their work, several optical
fault-injection attacks have been published in the following
years, most of them targeting smart cards or low-resource
embedded devices (e.g., [76], [77]). The increasing number
of metal layers on top of the silicon, decreasing feature size
(small process technology), and the high decapsulation effort
make optical fault
injection difﬁcult
to apply on modern
microprocessors used in smartphones.
Temperature Variation. Operating a device outside of its
speciﬁed temperature range allows to cause faulty behavior.
Heating up a device above the maximum speciﬁed temperature
can cause faults in memory cells. Cooling down the device has
an effect on the speed RAM content fades away after power
off (remanence effect of RAM).
Attacks. Hutter and Schmidt [78] presented heating fault
attacks targeting an AVR microcontroller. They prove the
practicability of this approach by successfully attacking an
RSA implementation on named microcontroller. FROST [79],
on the other hand, is a tool to recover disc encryption keys
from RAM on Android devices by means of cold-boot attacks.
Here the authors take advantage of the increased time data in
RAM remains valid after power off due to low temperature.
Differential Computation Analysis. As already mentioned
above, the white-box model assumes that the attacker has
full control over the execution environment. This also means
that the attacker can produce erroneous or faulty outputs by
manipulating intermediate values during the computation.
Attacks. Sanfelix et al. [74] demonstrated that attackers in
the white-box model can also perform fault injection attacks.
As the attacker has full control over the execution environment
and the executed binary, she can also manipulate data during
the program execution or manipulate the control ﬂow of the
execution. Similar to other fault attacks, the idea is to observe
differences between normal outputs and erroneous outputs of
the binary in order to break the cryptographic implementations.
NAND Mirroring. Data mirroring refers to the replication
of data storage between different locations. Such techniques
are used to recover critical data after disasters but also allow
to restore a previous system state.
Attacks. The Apple iPhone protects a user’s privacy by
encrypting the data. Therefore, a passcode and a hardware-
based key are used to derive various keys that can be used
to protect the data on the device. As a dedicated hardware-
based key is used to derive these keys, brute-force attempts
must be done on the attacked device. Furthermore, brute-force
attempts are discouraged by gradually increasing the waiting
time between wrongly entered passcodes up to the point where
the phone is wiped. In response to the Apple vs FBI case,
Skorobogatov [80] demonstrated that NAND mirroring can be
used to reset the phone state and, thus, can be used to brute-
force the passcode. Clearly, this approach also represents an
active attack as the attacker actively inﬂuences (resets) the
state of the device.
C. Overview
Table II summarizes the discussed attack categories and
the targeted information. In terms of targets, we identiﬁed
cryptographic implementations (crypto), the program ﬂow of
applications (which sometimes also allows to attack crypto
because different branches might be executed depending on
speciﬁc key bits), application inference (inference of the
executed application), and user input. An attack category not
targeting speciﬁc information (yet), which is indicated by an ,
represents a possible gap that might be investigated in future
research. For example, power analysis attacks might allow to
target user input, such as keystrokes or even actual characters,
and shoulder surﬁng and reﬂection attacks might well allow
to infer running applications. However, for some attacks it is
(highly) unlikely that they will work against speciﬁc targets.
For example, attacking cryptographic algorithms by means of
smudge attacks is unlikely to work.
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
11
OVERVIEW OF VICINITY SIDE-CHANNEL ATTACKS AND CORRESPONDING TARGETS.  AND  INDICATE WHETHER OR NOT A SPECIFIC ATTACK HAS BEEN
TABLE III
PERFORMED ON THE CORRESPONDING TARGET.
Attack
Network trafﬁc analysis
USB power analysis
Wi-Fi signal monitoring
Active/passive
Active/passive
Passive
Passive
Property
Physical/logical
Physical
Physical
Visited websites
 [81]–[86]
 [89]

Targets
Application/action inference
 [87]


Identify users/devices
 [88]
 [90]

User input


 [91], [92]
V. VICINITY SIDE-CHANNEL ATTACKS
In this section, we survey attacks where the attacker must be
in the vicinity of the targeted user/device, i.e., attacks where
the attacker compromises, for example, any infrastructure
facility within the user’s environment.
A. Passive Attacks
lengths,
Network Trafﬁc Analysis. In general, the encryption of
messages transmitted between two parties only hides the actual
content, while speciﬁc meta data such as the overall amount of
data is not protected. This meta data allows to infer sensitive
information about the content and the communicating parties.
Attacks. Network trafﬁc analysis has been extensively stud-
ied in the context of website ﬁngerprinting attacks. These
attacks [82]–[86] wiretap network connections and observe
trafﬁc signatures, e.g., unique packet
inter-packet
timings, etc.,
to infer visited websites and even work in
case the trafﬁc is routed through Tor. While most of these
attacks target the network communication in general, attacks
explicitly targeting mobile devices also exist. For instance,
St¨ober et al. [88] assumed that an adversary eavesdrops on
the UMTS transmission and showed that smartphones can