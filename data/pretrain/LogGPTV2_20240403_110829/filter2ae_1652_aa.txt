稿件为翻译稿，来源为：
    https://blog.talosintelligence.com/2018/09/ida-minsc.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+feedburner%2FTalos+%28Talos%E2%84%A2+Blog%29
    如有翻译不到位，请私聊我。谢谢！
    由于翻译内容过长，为了阅读的流程性我分成了两篇对内容进行介绍。
## 介绍
思科 Talos团队的Ali Rizvi-Santiago使用名为“IDA-minsc”插件在IDA插件竞赛中获得第二名。IDA是由Hex-Rays公司创建的多处理器反汇编调试器，今年诞生了四名获奖者并提交了9个插件。每年，该公司都会邀请研究人员提交相应插件用于改进其产品。Talos团队认为IDA-minsc插件足以改善用户的体验，因此其有足够的理由获得今年的奖项。  
此插件旨在使人们更容易反汇编和注释二进制文件。我们相信此插件可加快注释过程并使用户更有效地工作。这是通过引入一些改变大多数用户开发Python方式的概念来完成的，这些概念允许用户将他们反汇编的部分视为更多可用于查询和注释的数据集。
这个功能与插件的各种组件相结合，可以根据用户当前的选择自动确定函数的参数，并允许用户快速编写用于标记和注释不同部分数据库的代码。  
这个插件在这里有详细的文档介绍。下面，我们将通过反编译Atlantis Word Processor软件来展示这个插件的功能。而此软件是用Borland
Delphi编写的文档创建工具。本博客将概述如何快速标记查询对象，如何识别属于RTF解析器的标记及其属性，以及如何处理其他函数中定义的变量闭包。下面描述的所有功能都可以在上面链接的文档中找到，或者直接在命名空间或模块上调用Python的`help()`函数。
## 背景
IDA Python本质上是IDA SDK的包装器，它使不同的IDA组件在被执行时有单独的模块直接与其相对应。由于IDA
6.95中使用的模块太过复杂，以至于用户无法对其熟悉。 于是IDA
Python通过使用更多更高级别的函数来快速解决这个问题。然而，新模块的命名过于通用化，并且需要以前的IDC脚本语言知识。
在编写这个新插件时，我们发现我们可以将各种组件和功能组合到单独的模块中，从而更容易调用、引用它们。这个插件中有各种模块，但其主要特征是IDA-minsc开始使用的两个“上下文”。 这些模块都是具有静态方法的类定义，而这些静态方法用作“命名空间”以将那些作用于相似数据或语义的函数组合在一起。
## 创建初始化数据库
当首次在Atlantis Word
Processor中打开“awp.exe”文件时，IDA将对其进行处理。一旦IDA完成处理后，插件将启动并开始构建其标记缓存。标记缓存专门用于标记和查询。在此过程中，插件将迭代数据库中的所有的可用注释，同时更新内部缓存并显示其进度。一旦完成，用户可以开始进行反编译。  
## 标记所有类及其大小
所有Delphi应用程序通常都包含一个名为“TObject”的类。
这个类可以由其余许多类继承，并且我们可以利用它来查找通常用作构造函数的“System.New”。首先，我们使用IDA-minsc列出所有引用“TObject”的符号名称。 这与使用IDA的“名称”窗口（Shift + F4）相同，但使用IDA-minsc的匹配组件来指定不同的关键字以过滤IDA的不同窗口。
    Python>db.names.list(like='*TObject')
        [    0] 0x4010b0 _cls_System_TObject
        [  382] 0x4058e4 GetCurrentObject
        [  408] 0x4059b4 SelectObject
        [11340] 0x67d658 __imp_SelectObject
        [11366] 0x67d6c0 __imp_GetCurrentObject
如果我们双击“_cls_System_TObject”的地址或符号，IDA将指向其指定的地址。 这将如下图1所示，它展示了我们的“TObject”。
如果我们进行相互参照（Ctrl + X）操作，我们可以看到这个字符串被它右边的0x401070地址引用。 这表示Delphi中的实际类定义。
该地址是继承了“TObject”的类的一个引用。  
一旦我们有了这个地址，我们就可以再次获取它的引用来查看继承“TObject”的所有的类 - 看起来他们大约有122个。
如果我们随机选择一个，我们会看到其看起来像某种结构。 该结构以自引用开始，并且包括了许多可以调用的函数。
在Delphi中，此自引用用于区分用于控制对象范围和功能的默认函数。
如果我们跟随此引用，那么我们会发现它上面是与标准库相关的函数，而后面的函数是有关自定义实现的方法。  
由于图2中的三个函数与标准库相关，因此我们可以看到，如果我们逐个查看它们它们会执行一些任务。
地址为0x406dec的第三个函数似乎调用了“CloseHandle”，所以这可能是析构函数。 地址为0x406De4的第一个函数通常是构造函数。
如果我们选择这个函数并列出被使用的引用（X），我们可以看到它共有473个。 我们将使用这些引用来查找每个类并标记它们。
然而，在我们这样做之前，让我们详细了解一下这个结构：
    CODE:00406DAE 8B C0                                 align 10h
    CODE:00406DB0 F0 6D 40 00           off_406DB0      dd offset off_406DF0    ; [1]
    CODE:00406DB0
    CODE:00406DB4 00 00 00 00 00 00+                    dd 7 dup(0)
    CODE:00406DD0 F8 6D 40 00                           dd offset str.TThread   ; [3] "TThread"
    CODE:00406DD4 28 00 00 00                           dd 28h                  ; [5]
    CODE:00406DD8 70 10 40 00                           dd offset off_401070
    CODE:00406DDC 38 2A 40 00                           dd offset sub_402A38
    CODE:00406DE0 40 2A 40 00                           dd offset nullsub_9
    CODE:00406DE4 98 28 40 00                           dd offset sub_402898    ; Constructor
    CODE:00406DE8 AC 28 40 00                           dd offset sub_4028AC    ; Finalizer
    CODE:00406DEC E8 A9 40 00                           dd offset sub_40A9E8    ; Destructor
    CODE:00406DF0 38 AA 40 00           off_406DF0      dd offset loc_40AA38    ; [2]
    CODE:00406DF4 C4 25 40 00                           dd offset nullsub_11
    CODE:00406DF8 07 54 54 68 72 65+    str.TThread     db 7,'TThread'          ; [4]
    CODE:00406E00 04 6E 40 00           off_406E00      dd offset byte_406E04
如上文所述，该结构在[1]中包含自引用。 因为该引用由数据库中的函数使用，所以它被IDA标记。
此引用专门用于访问[2]以找到类的“构造函数”、“终结符”和“析构函数”。 此外，在[3]的开头附近是一个指向字符串的指针。
该字符串表示位于[4]的类名及其内容。 此字符串的格式与Pascal中的格式相同，后者以单字节长度开头，后跟表示字符串的字节数。
最后，在[5]中有该类的长度。 这表示为了存储其成员而需要分配的大小。 首先，让我们快速定义一个在IDA
Python命令行设置pascal样式字符串的函数。  
为此，我们将使用`database.set.integer`命名空间将第一个字节作为长度的`uint8_t`。
对于字符串的其余部分，我们将使用带有长度的`database.set.string`将地址转换为指定长度的字符串。
    Python>def set_pascal_string(ea):
    Python>    ch = db.set.i.uint8_t(ea)
    Python>    return db.set.string(ea + 1, ch)
完成后，如果我们需要我们可以使用`database.get.string`来读取它。  
尽管`database.set`命名空间返回的是已创建的值，但我们可以使用以下内容对上面指定的代码进行反编译。
    Python>def get_pascal_string(ea):
    Python>    ch = db.get.i.uint8_t(ea)
    Python>    return db.get.string(ea + 1, length=ch)
现在我们可以输入以下内容用来读取该地址的字符串
    Python>print get_pascal_string(0x406df8)
    TThread
现在我们可以获取并应用那些可以为我们提供名称的字符串，并且我们可以使用此名称来标记该类。
为此，我们将使用构造函数的所有引用，并使用每个引用来计算所有类的不同字段。 之后，我们将使用标签来标记不同的对象，以便我们以后可以在必要时进行查询。
首先，我们首先双击地址为0x406de4的“构造函数”。 这会将我们带我们来到函数“sub_402898”处。
既然我们知道这个函数是什么，那就让我们用以下命名：
    Python>func.name('System.New')
    sub_402898
如果你注意到，我们并没有提供地址。 因为没有提供地址，所以我们假设使用当前函数。 这是IDA-minsc的“多功能”组件。
如果我们对`function.name`运行`help（）`，我们可以看到其他变量：
    Python>help(function.name)
    Help on function name in module function:
    name(*arguments, **keywords)
    name() -> Return the name of the current function.
    name(string=basestring, *suffix) -> Set the name of the current function to ``string``.
    name(none=NoneType) -> Remove the custom-name from the current function.
    name(func) -> Return the name of the function ``func``.
    name(func, none=NoneType) -> Remove the custom-name from the function ``func``.
    name(func, string=basestring, *suffix) -> Set the name of the function ``func`` to ``string``.
现在我们已经命名了这个函数，我们将遍历它的所有引用并获取它的不同字段。 作为我们上面描述的字段的参考，我们获得了以下内容：
    CODE:00406DAE 8B C0                                 align 10h
    CODE:00406DB0 F0 6D 40 00           off_406DB0      dd offset off_406DF0    ; [6] Top of class or Info (Reference - 16*4)
    CODE:00406DB0
    CODE:00406DB4 00 00 00 00 00 00+                    dd 7 dup(0)
    CODE:00406DD0 F8 6D 40 00                           dd offset str.TThread   ; [7] Class name (Reference - 8*4)
    CODE:00406DD4 28 00 00 00                           dd 28h                  ; [8] Class size (Reference - 7*4)
    CODE:00406DD8 70 10 40 00                           dd offset off_401070    ; [9] Parent class (Reference - 6*4)
    CODE:00406DDC 38 2A 40 00                           dd offset sub_402A38
    CODE:00406DE0 40 2A 40 00                           dd offset nullsub_9
    CODE:00406DE4 98 28 40 00                           dd offset sub_402898    ; [10] Constructor (Reference - 3*4)
    CODE:00406DE8 AC 28 40 00                           dd offset sub_4028AC    ; [11] Finalizer (Reference - 2*4)
    CODE:00406DEC E8 A9 40 00                           dd offset sub_40A9E8    ; [12] Destructor (Reference - 1*4)
    CODE:00406DF0 38 AA 40 00           off_406DF0      dd offset loc_40AA38    ; [13] * Reference
    CODE:00406DF4 C4 25 40 00                           dd offset nullsub_11
    CODE:00406DF8 07 54 54 68 72 65+    str.TThread     db 7,'TThread'
    CODE:00406E00 04 6E 40 00           off_406E00      dd offset byte_406E04
通过这种布局，我们可以提取引用构造函数的所有类的不同组件，并标记它们以便稍后进行查询。
因为早期我们双击构造函数并命名它，所以我们当前应该在“System.New”函数中。 要获取所有引用值，我们可以使用`function.up（）`方法。
然后我们将遍历其所有引用，添加0xc（3 * 4 == 12）以获得[13]处的引用，然后使用它来定位其余字段。
对于类名[7]，我们将使用我们的`set_pascal_string`和`get_pascal_string`函数。对于标准作用域构造[10]，[11]和[12]，我们将对其进行操作并用它们标记其“
类型”。 这导致以下代码。 以下代码可以做得更短，但为了便于阅读所以我们进行了扩展。
    Python>for ea in func.up():
    Python>    ref = ea + 3*4  # [13] calculate address to reference
    Python>    
    Python>    # read our fields
    Python>    lookup = {}
    Python>    lookup['info'] = ref - 16*4         # [6]
    Python>    lookup['name'] = ref - 8*4          # [7]
    Python>    lookup['size'] = ref - 7*4          # [8]
    Python>    lookup['parent'] = ref - 6*4        # [9]
    Python>    lookup['constructor'] = ref - 3*4   # [10]
    Python>    lookup['finalizer'] = ref - 2*4     # [11]
    Python>    lookup['destructor'] = ref - 1*4    # [12]
    Python>    lookup['object'] = ref              # [13]
    Python>    
    Python>    # dereference any fields that need it
    Python>    name_ea = db.get.i.uint32_t(lookup['name'])
    Python>    parent_ea = db.get.i.uint32_t(lookup['parent'])
    Python>    size = db.get.i.uint32_t(lookup['size'])
    Python>
    Python>    # set our name (just in case IDA has it defined as something else)
    Python>    set_pascal_string(name_ea)   
    Python> 
    Python>    # decode our name