## 什么是ws劫持
ws劫持全称为跨站点WebSocket劫持(CSWSH)，(也称为跨源 WebSocket 劫持)涉及WebSocket 握手上的跨站点请求伪造(CSRF)
漏洞。当 WebSocket 握手请求仅依赖 HTTP cookie 进行会话处理并且不包含任何CSRF 令牌或其他不可预测的值时，就会出现这种情况。
攻击者可以在自己的域中创建恶意网页，从而与易受攻击的应用程序建立跨站点 WebSocket 连接。应用程序将在受害者用户与应用程序的会话上下文中处理连接。
然后，攻击者的页面可以通过连接向服务器发送任意消息，并读取从服务器收到的消息内容。这意味着，与常规 CSRF 不同，攻击者获得与受感染应用程序的双向交互。  
综上所述，这一知识点涉及的知识主要有websocket和CSRF令牌，那我们就需要进一步了解这两个东西了
### WebSocket是啥
WebSocket是通过HTTP启动的双向、全双工通信协议。它们通常用于流式传输数据和其他异步流量的现代Web应用程序中。最常见的是网站中的聊天机器人
有人要问了：那他和同为协议的且使用更普遍的HTTP协议有什么区别呢？
首先呢WebSocket是HTML5推出的新协议，是基于TCP的应用层通信协议，它与http协议内容本身没有关系。
同时WebSocket 也类似于 TCP 一样进行握手连接，跟 TCP 不同的是，WebSocket 是基于 HTTP
协议进行的握手，它在客户端和服务器之间提供了一个基于单 TCP 连接的高效全双工通信信道
WebSocket连接是通过HTTP发起，通常是长期存在的。消息可以随时向任何一个方向发送，并且本质上不是事务性的。连接通常保持打开和空闲状态，直到客户端或服务器发送消息。  
WebSocket在需要低延迟或服务器发起消息的情况下特别有用，例如金融数据的实时馈送。
使用HTTP时，客户端发送请求，服务器返回响应。通常响应立即发生，事务完成。即使网络连接保持打开，请求和响应也是单独的事务。这一点和websocket本质上不同。  
#### WebSocket是如何建立的
由图可见，WebSocket连接的建立需要经过连接请求、握手、连接建立这三个环节
首先要由浏览器发出WebSocket握手请求
    GET /chat HTTP/1.1
    Host: normal-website.com
    Sec-WebSocket-Version: 13
    Sec-WebSocket-Key: wDqumtseNBJdhkihL6PW7w==
    Connection: keep-alive, Upgrade
    Cookie: session=KOsEJNuflw4Rd9BDNrVmvwBF9rEijeE2
    Upgrade: websocket
然后返回WebSocket握手响应
    HTTP/1.1 101 Switching Protocols
    Connection: Upgrade
    Upgrade: websocket
    Sec-WebSocket-Accept: 0FFP+2nmNIf/h+4BP36k9uzrYGk=
需要网络连接保持打开状态，可用于在任一方向上发送WebSocket消息。
    ws.send("Peter Wiener"); //客户端发送消息
    {"user":"Hal Pline","content":"I wanted to be a Playstation growing up, not a device to answer your inane questions"} //通常JSON格式回复信息
同时需要client-side JavaScript 用于定义链接
    var ws = new WebSocket("wss://normal-website.com/chat");
### CSRF令牌是啥
这里用一个维基百科的例子解释
* * *
  * 假设您当前登录到您的网上银行 `www.mybank.com`
  * 假设从中进行汇款，`mybank.com`将导致（在概念上）形式的要求`[www.mybank.com/transfer?to=](http://www.mybank.com/transfer?to=);amount=`。（不需要您的帐号，因为您的登录名暗示了该帐号。）
  * 您访问`www.cute-cat-pictures.org`，却不知道这是一个恶意网站。
  * 如果该站点的所有者知道上述请求的形式（简单！）并且正确地猜测您已登录`mybank.com`（需要运气！），则他们可以在其页面上添加一个请求，例如`[www.mybank.com/transfer?to=123456;amount=10000](http://www.mybank.com/transfer?to=123456;amount=10000)`（`123456`开曼群岛帐户的编号在哪里） ，这`10000`是您以前认为 _很高兴_ 拥有的金额）。
  * _您_ 检索的`www.cute-cat-pictures.org`页面，那么 _你的_ 浏览器会作出这样的要求。
  * 您的银行无法识别请求的来源：您的网络浏览器将发送请求以及您的`www.mybank.com`cookie，并且看起来完全合法。你的钱去了！
这是 **没有CSRF令牌** 的世界。
现在， ** _使用_ CSRF令牌**获得更好的效果：
  * 传输请求扩展了第三个参数：`[www.mybank.com/transfer?to=123456;amount=10000;token=31415926535897932384626433832795028841971](http://www.mybank.com/transfer?to=123456;amount=10000;token=31415926535897932384626433832795028841971)`。
  * 该令牌是一个巨大的，无法猜测的随机数，`mybank.com`当他们将其提供给您时会包含在他们自己的网页上。每次他们向任何人提供任何页面时，情况都 _不同_ 。
  * 攻击者无法猜测令牌，也无法说服您的Web浏览器放弃该令牌（如果浏览器正常工作...），因此攻击者将 _无法_ 创建有效请求，因为带有错误的令牌（或没有令牌）将被拒绝`www.mybank.com`。
结果：您保留了`10000`货币单位。我建议您将其中一些捐赠给Wikipedia。
（你的旅费可能会改变。）
**编辑评论值得阅读：**
值得注意的是`www.cute-cat-pictures.org`，`www.mybank.com`由于HTTP访问控制，通常来自的脚本无法访问您的反CSRF令牌。对于某些人，他们`Access-Control-Allow-Origin:
*`不了解每个网站响应的标题而仅仅因为他们不能使用另一个网站的API，因此对于那些不合理地为每个网站响应发送标头的人来说非常重要。
* * *
由于令牌在生成过程中使用到了伪随机数（pseudo-random
number）生成器、静态密钥、以及种子时间戳，因此CSRF令牌的值是不可预测的。同时，每个用户的令牌也是不同的，而且只会存储活动的用户会话。据此，安全团队可以通过将随机数生成器的输出，与用户特定的熵（entropy）连接起来，并对整个结构进行散列处理，以提高令牌值的唯一性。对此，黑客将很难在早期的会话Cookie中，根据已发布的令牌样本，去猜测CSRF令牌。
举个例子，大概有以下特征的就可以合理怀疑是否有csrf令牌生成
    "csrf_token:", // session 缓存前缀
            "cookie_token"=>"_hash_token_", // cookie 客服端前缀
            "expire"=>1800, // cookie值过期时间
            "token_len"=>24, // 随机字符串截取长度
            "path"=>"/", // cookie 服务器路径
            "secure"=>false, // cookie 规定是否通过安全的 HTTPS 连接来传输 cookie：false否，true是
            "httponly"=>false, // cookie js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击：true防止JS读取数据，false否
            "dimain"=>"" // cookie 的域名[默认当前域名使用]
        ];
        /**
         * 构造基础配置
         * CsrfToken constructor.
         * @param array|null $option
         * @throws \Exception
         */
        public function __construct(array $option=null)
        {
            // 重置基础配置
            if ($option){
                $this->options = array_merge($this->options,$option);
            }
            // 验证是否开启session
            if (!$this->checkSessionStart()){
                throw new \Exception("未开启SESSION服务，请确认开启再操作",500);
            }
        }
        /**
         * 设置TOKEN SESSION KEY
         * @param mixed $key
         */
        public function setKey($key)
        {
            $this->key = $key;
        }
        /**
         * 获取TOKEN
         * @param int $is_refresh 是否强制刷新TOKEN：0否，1是
         * @return null|string
         */
        public function csrfToken(int $is_refresh=0)
        {
            // 获取SESSION key
            $key = $this->getTokenKey();
            $csrfToken = session($key);
            if (!$csrfToken || $is_refresh == 1){
                // 强制刷新TOKEN
                $this->refreshCsrfToken($csrfToken);
            }
            return $csrfToken ? (string)$csrfToken : null;
        }
        /**
         * 刷新token
         * @param null $csrfToken
         * @return bool
         */
        public function refreshCsrfToken(&$csrfToken=null)
        {
            $csrfToken = $this->generateToken();
            // 获取SESSION key
            $key = $this->getTokenKey();
            session($key,$csrfToken);
            // 设置Cookie
            $cookieKey = $this->getCookieKey();
            cookie(
                $cookieKey,
                $csrfToken
            );
            // 验证是否创建成功
            $csrfToken = session($key);
            $_csrfToken = cookie($cookieKey);
            if (!$csrfToken  || strcasecmp($csrfToken,$_csrfToken) != 0){
                return false;
            }
            return true;
        }
        /**
         * 验证TOKEN是否有效