disk (initrd) ﬁle are measured, and the measurements are
kept in the TPM. Both Intel and AMD have their ex-
tended instructions for supporting DRTM, called TXT
and Secure Virtual Machine, respectively. For our ex-
periments, we use Trusted Boot (tboot) [11], which is an
open source implementation of the Intel TXT [12].
We also assume that the stored measurements in TPM
are veriﬁed by a remote attester. These measurements
should be unforgeable by an attacker;
therefore, any
modiﬁcation in the ﬁrmware, bootloader, or kernel will
be sent to and identiﬁed by an administrative party.
3.2 Threat Model
We consider an attacker who has already acquired the
Ring-0 privilege with which the attack can have the ad-
ministrative access to the software stack of a machine
including the ﬁrmware, bootloader, kernel, and applica-
tions. The attacker might use social engineering to ac-
quire this control or could exploit zero-day vulnerabil-
ities in the kernel or system applications. The attacker
may be able to safely upgrade the UEFI/BIOS ﬁrmware
to a new and manufacture-signed one. However, we as-
sume that he or she cannot ﬂash the ﬁrmware with arbi-
trary code. We also assume that the attacker cannot roll-
back to an old version of the ﬁrmware, where the attacker
can exploit a known vulnerability.
The attacker’s primary interest is to hide the breach
and retain the acquired privileges for further attacks.
TPM and SRTM/DRTM should measure the system and
securely leave proof in the PCRs if the bootstrapping
software or kernel has been modiﬁed. This proof also
can be delivered to and veriﬁed by a remote administra-
tor.
The attacker may try to compromise the bootloader
and kernel by modifying ﬁles in the EFI partition and
under /boot/. This is feasible because we assume the at-
tacker has privileged accesses to every part of the sys-
tem software. Moreover, it is easy to obtain, modify, and
rebuild the bootloader, kernel, and kernel drivers. The
GRand Uniﬁed Bootloader (GRUB) and TPM driver that
we used in our experiments are accessible via a GitHub
repository [5, 19]. Namely, the attacker can boot the sys-
tem with a modiﬁed bootloader or with another boot op-
tion if the system has multiple boot options. The TPM
and SRTM/DRTM are supposed to securely record and
report the fact that the system has not booted with an
expected bootloader and conﬁguration. However, they
would fail to do that.
We do not consider a denial-of-service attack in this
paper.
If the attacker has system privileges, he or she
can easily turn the system off. We also do not consider
hardware attacks that require a physical access to the sys-
tem circuits. Vulnerabilities of the System Management
Mode (SMM) [13] may allow the attacker to remotely
and pragmatically alter ﬁrmware binary or change the
BIOS/UEFI options [6], but we do not consider such vul-
1232    27th USENIX Security Symposium
USENIX Association
Specifications 
(TCG, UEFI, etc.) 
Implementations 
TPM Vendors 
Mainboard/PC Vendors 
NTC, Infenion, 
STMicroelectronics, 
Atmel, Broadcom, 
etc. 
ASUS, GIGABYTE, 
DELL, HP, Lenovo, 
IBM, Samsung, 
LG, etc. 
Figure 3: TPM technology entities
nerabilities. Rather, we show that the TPM and SRTM/-
DRTM can fail without the need to exploit them.
4 Vulnerability Analysis
4.1 Finding the Security Vulnerabilities
Bootstrapping a system utilizing TPM and SRTM/-
DRTM technologies involves many entities, and Figure 3
shows their relationships. Security vulnerabilities can be
found when formally analyzing the design and speciﬁca-
tion of a system, however, it is challenging to formally
specify them anyway.
Instead, we basically reviewed
the speciﬁcation documents manually and tested real sys-
tems. The steps we took to ﬁnd the vulnerabilities are as
follows:
1. While reviewing the TCG speciﬁcation, we found a
change in the TCG speciﬁcation from TPM 2.0 to
TPM 1.2 regarding power management. The differ-
ence was regarding restarting TPM when the system
resumes [37].
2. Using a real system with support for TPM and
SRTM, we tested how a TPM state can be saved
and restored as the power state cycles. We found
an abnormal behavior when the TPM state is re-
set. We speculated that the failure was due to the
ﬁrmware implementations not meeting the speciﬁ-
cation or ambiguity in the speciﬁcation [37]. Note
that another ﬂaw caused by not meeting the TCG
speciﬁcation has been reported already [3].
3. Based on speculation, we tested other implemen-
tation instances of the speciﬁcation. We could
have investigated the ﬁrmware source code, but we
needed to experiment with a number of products be-
cause the ﬁrmware of these products is not open.
Eventually, the same vulnerability was conﬁrmed in
several systems.
(1) Review a specification 
  - Unverified changes or 
inconsistency in document 
Speculations 
(2) Do a case study 
  - Test with an implementation 
instance, or investigate the 
code 
Problem 
confirmed 
(3) Analyze the problem 
(a) Possibly exists in  
     similar specifications? 
     (proceed with another  
      specification) 
(a) 
(b) Possibly exists in  
     other implementations? 
     (proceed with another  
      implementation instance) 
(b) 
Figure 4: General process of the vulnerability analysis in
TPM
4. We investigated the DRTM speciﬁcations. At this
time, we thought we could apply what we learned
to the DRTM, which is similar to the SRTM. In
the DRTM, the DCE and DLME are veriﬁed, ini-
tialized, and launched by hardware support, which
means the process is performed by immutable par-
ties.
5. We investigated the open source implementation of
DRTM, tboot [11], which is based on Intel TXT.
The vulnerability of an authenticated code module
(ACM), which is the DCE of Intel TXT, as reported
by Wojtczuk and Rutkowska [44, 45] demonstrates
that the authenticity and integrity of code are not
guaranteed to be ﬂawless. Unlike previous studies,
we focus on tboot, which is the DLME, and even-
tually found mutable function pointers that we were
able to exploit.
We summarize this process in Figure 4.
4.2 SRTM Vulnerability: CVE-2018-6622
4.2.1 Problem: The Grey Area
SRTM starts up the chain of
trust by measuring
each component of the boot sequence including the
BIOS/UEFI ﬁrmware, bootloader, and kernel. The mea-
surements are extended to the PCRs, from PCR #0 to
PCR #15. An alteration of a booting component would
leave different values in the PCRs. The alteration can
easily be identiﬁed when the values are then compared
to the correct ones.
It is known that it is difﬁcult for malicious software to
become involved in the booting sequence and forge PCR
values to hide its involvement. To forge these values, the
USENIX Association
27th USENIX Security Symposium    1233
malicious software needs to reset the TPM and extend
the exact same series of measurements. This is infeasible
because the TPM reset requires a host platform to restart.
However, we recently found that PCRs can be initial-
ized when the host platform sleeps. When the platform
enters into the S3 or S4 sleeping states, the power to the
devices is cut off. TCG speciﬁes how TPM can sup-
port power management [32, 37]: TPM is supposed to
save its state to the non-volatile random access mem-
ory (NVRAM) and restore the state back later. How-
ever, the speciﬁcation does not specify sufﬁciently how
it should be handled when there is no saved state to be
restored [39]. As a result, some platforms allow software
to reset the PCRs and extend measurements arbitrarily.
A TPM typically has two power states, the working
state (D0) and the low-power state (D3). The TPM
has a command for saving its state before putting itself
into the D3 state and a command for restoring the saved
state when getting out of the D3 state. According to the
TPM 1.2 speciﬁcation [32], the operating system may
enter into the S3 sleeping state after notifying the TPM
that the system state is going to change by sending it
the TPM SaveState command. On exiting from the S3
sleeping state, the S-CRTM determines whether the TPM
should restore the saved state or be re-initialized. When
S-CRTM issues TPM Startup(STATE), the TPM restores
the previous state. When TPM Startup(CLEAR) is is-
sued, the TPM restarts from a cleared state.
An unexpected case that could reset the TPM can oc-
cur if there is no saved state to restore. How to tackle
this problem is speciﬁed differently in the TPM 1.2 and
2.0 speciﬁcations. In version 1.2 [32], TPM enters fail-
ure mode and is not available until the system resets.
In version 2.0, TPM2 Shutdown() and TPM2 Startup()
correspond to TPM SaveState() and TPM Startup(), re-
spectively.
Version 2.0 [39] tells TPM to return
TPM RC VALUE when TPM2 Startup(STATE) even if
it does not have a saved state to restore. It also speci-
ﬁes that the SRTM should perform a host platform reset
and send the TPM2 Startup(CLEAR) command before
handing over the control to the operating system.
Restarting the SRTM and clearing the TPM state is
not sufﬁcient to assure the integrity of the platform. It is
simply the same as resetting the TPM. An adversary can
hence still extend an arbitrary value to the PCRs. This
must be forbidden. Otherwise, there should be a way to
warn that the TPM state has been reset abnormally.
Although another speciﬁcation document [37] states
that the CRTM is expected to take corrective action
to prohibit an adversary from forging the PCR values.
However, the speciﬁcation does not either mandate it or
explain how to do this in detail. The incompleteness of
this speciﬁcation may lead to inappropriate implemen-
tations and eventually destroy the chain of trust. How
Normal State 
(TPM shows normal 
PCRs) 
Reboot 
BIOS/UEFI 
Compromised 
Software Stack 
Leaves normal hashes 
in event logs 
Extract and calculate  
the normal hashes 
Compromised State 
(TPM shows abnormal 
Hash 
values 
Store the normal hashes 
in RAM 
PCRs) 
Sleep without  saving 
the TPM state 
Reset the TPM and replay  
the normal hashes 
Sleep 
Wake up 
Compromised 
Software Stack 
Faked State 
(Still compromised 
but TPM shows the normal 
PCRs) 
Figure 5: Exploit scenario for the SRTM vulnerability
an adversary forges the measurements is demonstrated
in Section 4.2.2.
4.2.2 Exploit Scenario
The aim of an exploit is to conceal the fact that the sys-
tem has been compromised. By assumption, our attacker
has already taken control of the system software includ-
ing the bootloader and the kernel. Figure 5 depicts the
main points of the exploit scenario. The attacker ob-
tains good hash values from the BIOS/UEFI event logs,
which are recorded during a normal boot process. As-
sorted hash values are stored in RAM temporarily, and
are ﬁnally handed over to the kernel. The attacker can
forge PCR values using the obtained hashes after sleep.
As a result, the TPM shows that the system is booted and
running with genuine software, which is not at all true.
The technical details of the exploit are explained in Sec-
tion 4.2.3.
4.2.3
Implementation in Detail
We explain how to reset the TPM state and counterfeit
the PCR values. Figure 6 shows the detailed process of
exploiting SRTM vulnerability.
First, before resetting and replaying the TPM, we need
1234    27th USENIX Security Symposium
USENIX Association
*+,-’"%!.’.#%
*B:C’#?@=#’8@$1)9’
:J!#0’
F0’J?)8V"’;?"’K@@;9@)&"$’’
’’’’)8&’;?"’L"$8"9’
E0’!"K@@;’;?"’#U#;"1’
W@$1)9’:J!#’
!"#$%’
,"*)23/2...’
...’
...’
(")*%+
!"#$%&’#...’
...’
...’
(")*&+
,,-,.&./...’
...’
...’
!"#$)4’
%%%%%%%%...’
G%"8;’T@V#’
!"#$%&’"()*+,-,...’
!"#$/&’0%10"-23...’
...’
NOP#"&’
N@@;9@)&"$’
J@12$@1>#"&’
6"$8"9’
II"$"8;0’
!"#$%’
,"*)23/2...’
W@$1)9’X)#?’Y)9A"#’
...’
...’
!"#$%&’"()*+,-,...’
(")*%+
1’$310%2...’
!"#$/&’0%10"-23...’
...’
...’
(")*&+
13#2’-2&...’
...’
...’
!"#$)4’
%%%%%%%%...’
...’
(")*%&’%!"0-"1#...’
’(")*&&’232%3.-’...’’
;?@A;’B:CD9#’;@’$"#;@$"’;?"’B:C’
#;);"’)8&’$"#A1"#’;?"’L"$8"9’
J@12$@1>#"&’
6"$8"9’
F0’!"#";’:J!#’=>;?’
’’’’B:CD99’H@12$@1>#"&’
KA;’B:C’#?@=#’;?"’8@$1)9’
:J!#0’
W@$1)9’:J!#’
!"#$%’
,"*)23/2...’
...’
...’
(")*%+
!"#$%&’#...’
...’
...’
(")*&+
,,-,.&./...’
...’
...’
!"#$)4’
%%%%%%%%...’
Figure 6: Detailed process of exploiting the SRTM vul-