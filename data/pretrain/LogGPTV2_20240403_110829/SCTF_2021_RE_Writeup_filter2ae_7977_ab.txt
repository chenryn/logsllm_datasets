    {
      longlong i;
      int sum;
      uint *mem1_ptr;
      uint v0;
      uint v1;
      i = 0;
      do {
        mem1_ptr = (uint *)(mem1 + i);
        v0 = *mem1_ptr;
        v1 = mem1_ptr[1];
        sum = 0;
        do {
          v1 = v1 - (v0 * 16 + k2 ^ (v0 >> 5) + k3 ^ v0 + sum);
          v0 = v0 - (v1 + sum ^ v1 * 0x10 + k0 ^ (v1 >> 5) + k1);
          sum = sum + -0x61c88647;
        } while (sum != -0xe443238);
        *mem1_ptr = v0;
        mem1_ptr[1] = v1;
        i = i + 8;
      } while (i != 0x1000);
      return;
    }
    void tea_encrypt_mem0(void)
    {
      longlong i;
      int sum;
      uint *mem0_ptr;
      uint v1;
      uint v0;
      i = 0;
      do {
        mem0_ptr = (uint *)(mem0 + i);
        v0 = *mem0_ptr;
        v1 = mem0_ptr[1];
        sum = 0;
        do {
          sum = sum + -0x61c88647;
          v0 = (v1 * 16 + k0 ^ (v1 >> 5) + k1 ^ sum + v1) + v0;
          v1 = v1 + (v0 + sum ^ v0 * 16 + k2 ^ (v0 >> 5) + k3);
        } while (sum != -0x1c886470);
        *mem0_ptr = v0;
        mem0_ptr[1] = v1;
        i = i + 8;
      } while (i != 0x1000);
      return;
    }
    void change_mem0_mem1(void)
    {
      ulonglong i;
      i = 0;
      do {
        tea_encrypt_mem0();
        tea_decrypt_mem1();
        replace_mem0_index_with_mem1_15_sub_index(i);
        FUN_0000091a(mem0,mem1);
        i = SEXT48((int)i + 1);
      } while (i != 16);
      return;
    }
    void set_mem_with_input(char *input)
    {
      longlong j;
      ulonglong value;
      longlong end;
      longlong input_index;
      longlong start;
      mem0 = (char *)malloc(0x1000);
      mem1 = (char *)malloc(0x1000);
      memset(mem0,0,0x1000);
      memset(mem1,0,0x1000);
      end = 128;
      start = 0;
      input_index = 0;
      do {
        seed = (longlong)(int)((uint)(byte)input[input_index] + (int)input_index) & 0xffffffff;
        j = start;
        do {
          value = rand();
          mem0[j] = (char)value;
          j = j + 1;
        } while (j != end);
        input_index = input_index + 1;
        start = start + 0x80;
        end = end + 0x80;
      } while (input_index != 32);
      end = 0x80;
      start = 0;
      input_index = 0;
      do {
        seed = (longlong)(int)((uint)(byte)input[input_index + 0x20] + (int)input_index) & 0xffffffff;
        j = start;
        do {
          value = rand();
          mem1[j] = (char)value;
          j = j + 1;
        } while (j != end);
        input_index = input_index + 1;
        start = start + 0x80;
        end = end + 0x80;
      } while (input_index != 0x20);
      return;
    }
    void entry(void)
    {
      int input_len;
      ulonglong uVar1;
      char input [256];
      printf("Welcome SCTF2021! The new xv6 lab designed by P****OS\ncan you solve this ?\ninput:");
      gift();
      read_str(input,256);
      input_len = strlen(input);
      input[(longlong)(input_len + -1) & 0xffffffff] = '\0';
      input_len = strlen(input);
      if (input_len != 64) {
        printf("fail!\n");
                        /* WARNING: Subroutine does not return */
        exit(0);
      }
      set_mem_with_input(input);
      change_mem0_mem1();
      uVar1 = memcmp(mem0,&DAT_00001ec8,0x1000);
      if ((uVar1 == 0) && (uVar1 = memcmp(mem1,&DAT_00000ec8,0x1000), uVar1 == 0)) {
        printf("yes,you are right.!\n");
                        /* WARNING: Subroutine does not return */
        exit(0);
      }
      printf("fail! Try!");
                        /* WARNING: Subroutine does not return */
      exit(0);
    }
gift 函数输出几个伪随机数，都是固定值；还有 Fake Tea ，最初不知道是什么，等分析完后才知道说的是魔改 tea 加密。
大部分都恢复出来了，一些函数（如 exit, malloc ）跟入是 ecall 系统调用，是根据逻辑猜测得到的。只剩下一个函数， FUN_0000091a
，跟入是序号 22 的系统调用，不知道做什么。
sctf 就这些，然后要找系统调用，又得分析 kernel 。同样拖入 Ghidra ，但是不好找关键位置，这时候得祭出 strings
大法：`strings ./kernel`，找到关键点：
    ...
    argraw
    %d %s: unknown sys call %d
    bcache
    buffer
    bget: no buffers
    bwrite
    brelse
    freeing free block
    balloc: out of blocks
    bmap: out of range
    iget: no inodes
    invalid file system
    icache
    inode
    ialloc: no inodes
    ...
有个`%d %s: unknown sys call %d`，正是系统调用的报错信息， Ghidra 里找到 0x800083f0
，查看引用，找到关键位置：
    void FUN_80002b0c(void)
    {
      int iVar1;
      longlong lVar2;
      undefined8 uVar3;
      longlong lVar4;
      lVar2 = FUN_800019de();
      lVar4 = *(longlong *)(lVar2 + 0x58);
      iVar1 = (int)*(undefined8 *)(lVar4 + 0xa8);
      if ((iVar1 - 1U 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    char* mem0;
    char* mem1;
    unsigned int k0 = 0x11222233, k1 = 0xAABBCCDD, k2 = 0x1A2B3C4D, k3 = 0xCC1122AA;
    typedef unsigned long long ulonglong;
    typedef long long longlong;
    typedef char byte;
    typedef unsigned int uint;
    void replace_mem0_index_with_mem1_15_sub_index_inv(ulonglong index) {
        longlong i;
        longlong lVar1;
        byte buffer [256];
        memset(buffer, 0, 256);
        lVar1 = index > 5) + k1);
                v1 += ((v0 > 5) + k3) ^ (v0 + sum);
            } while (sum != 0);
            *mem1_ptr = v0;
            mem1_ptr[1] = v1;
            i = i + 8;
        } while (i != 0x1000);
        return;
    }
    void tea_encrypt_mem0_inv(void) {
        longlong i;
        int sum;
        uint *mem0_ptr;
        uint v1;
        uint v0;
        i = 0;
        do {
            mem0_ptr = (uint *)(mem0 + i);
            v0 = *mem0_ptr;
            v1 = mem0_ptr[1];
            sum = -0x1c886470;
            do {
                v1 -= (v0 + sum) ^ ((v0 > 5) + k3);
                v0 -= ((v1 > 5) + k1) ^ (sum + v1);
                sum = sum - -0x61c88647;