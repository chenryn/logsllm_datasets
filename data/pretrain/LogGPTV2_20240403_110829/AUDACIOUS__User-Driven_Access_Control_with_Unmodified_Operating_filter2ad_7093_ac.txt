### Views and View Hierarchy
Views are part of a hierarchical structure, where child Views are nested within parent Views. Developers can modify this hierarchy programmatically.

### Access Control Groups (ACGs)
Each ACG is implemented as a Fragment. A Fragment is an isolated component of an Activity, such as a single button and its associated action. Each Fragment contains a View that it inserts at runtime. This design ensures that each ACG only needs to implement resource-accessing behavior, without any secure UI logic. The application cannot access or modify the validation or resource-accessing logic.

We provide two types of ACG interfaces: one for temporary permissions and one for permanent permissions. Temporary ACGs grant resource access immediately after user interaction, while permanent ACGs provide continuous resource access from the initial interaction until the user disables them. These ACGs are event-driven; the application implements a listener that is notified when the resource availability state changes. When the resource is available, the application can use it as desired.

### ACG UIs
To prevent applications from modifying ACG UIs after creation, we use a ViewWrapper. Each ACG UI has an associated View, which the ViewWrapper contains and does not expose to the application. The ViewWrapper handles all rendering logic and delegates events to the internal View. After the internal View processes events, the ViewWrapper requests a layout update. If the internal View's layout changes, the ViewWrapper notifies Android to redraw the View.

### Using the Library
ACGLib is designed for ease of use. Application developers can include an ACG in one of two ways: by defining it in a layout and binding it within an Activity, or by adding it programmatically at runtime. Next, the developer must implement the `ACGListener` and override the `buildACGListeners()` method, which attaches listeners to the ACGs. These listeners react to changes in resource availability. Developers can also pass input to ACGs and chain ACGs. For example, the ACG for playing audio can take input from the ACG for recording audio (Figure 4).

### Event Flow: User → UIseen
Both direct and indirect event forgery attacks in Android can be instantiated by constructing or modifying events, or by calling the methods that events trigger (e.g., `performClick()`). In the first case, application interference occurs after setup code but before the event reaches the ACG. In the second case, it occurs after setup code but before the event result reaches the ACG.

We prevent applications from constructing or modifying events and from programmatically clicking elements statically using Soot. Our analysis disallows application code from calling click methods on any subclass of View and from calling construction, modification, or copying methods on any event subclass. We do not stop applications from dispatching events, as banning all methods that propagate events through the hierarchy is impractical and potentially dangerous. Since applications cannot modify, create, or copy events, the dispatched events are authentic, ensuring the location and time of the event are genuine.

Our implementation is conservative, guaranteeing that applications do not interfere with the flow of events from the user to the UI. Some applications modify events for upscaling or UI customization, which we acknowledge as a limitation. Our evaluation (Section 6.4) shows that this behavior is rare and human-verifiable.

### UI Context: UIseen ↔ UIACG
Android provides a method for security-sensitive Views to implement fine-grained security checks for events. We implement our UI context check in this method.

#### Internal UI: UIapp ↔ UIACG
To prevent applications from misleading users by modifying or covering a View, each ACG contains a Bitmap validator. The validator checks if the Bitmap rendering of the View is acceptable. It supports different notions of acceptable transformations and application-supplied proofs. We provide two validators:
- **Non-stateful Validator:** Checks for equality between the Bitmap rendering of the ACG View in isolation and the supplied View.
- **Stateful Validator:** Takes both a View and a state, expecting different UIs for different states. This is used for the LocationACG, which expects one UI for the "on" state and another for the "off" state.

#### External UI: UIapp = UIapp + UIother
Tapjacking in Android often involves system-level pop-up notifications called Toasts. Malicious applications can abuse this feature to trick users into clicking on elements. To prevent these attacks, Android provides the `FLAG_WINDOW_IS_OBSCURED` flag, which is set on an event if the View is partially or wholly obscured by a window outside the view hierarchy. We reject an event if this flag is set and invalidate the UI for a suitable period. However, due to a bug in Android, the flag does not handle partially obscured views correctly. We have reported this issue to Android.

### UI Consistency: UIapp = UIseen
To ensure events occur in the correct location and time, we verify that they occur within the boundaries of the ACG View element and that no significant time has passed since the event. We implement random checks to handle bait-and-switch attacks, exposing two intervals at the library level: the maximum frequency of random checks and the invalidation interval for failed checks. Individual ACGs can configure these intervals independently.

### Resource Flow: UIACG → ACG → ...
We use SPARTA [5] to verify the flow from the ACG UI to the resource itself and onward. SPARTA is an information flow tool that uses static type-checking to infer illegal flows. Application developers annotate code with sources and sinks, and SPARTA includes trusted annotations to minimize the annotation burden. SPARTA compares the detected flows with allowable flows defined in a flow policy file (Figure 6), which a human verifier inspects.

SPARTA alone ensures that the application uses resources correctly but does not ensure that the application accesses the correct resources at the correct times. AUDACIOUS extends SPARTA with the notion of an ACG, implementing an ACG type parameterized by the name of the ACG. This allows SPARTA to distinguish ACGs from other sources and sinks and to differentiate between different ACGs.

### Discussion: OS Support
The previous sections demonstrate that supporting user-driven access control without explicit OS support is feasible, moving beyond prior work on ACGs. We reflect on the benefits and limitations of a user space approach and identify areas where limited OS support is necessary or beneficial.

#### Benefits of a User Space Approach
- **Deployability:** Changes to the OS are costly and may not be backward-compatible. A library paired with program analyses can be deployed within any application and verified by any entity with the ability to run the analysis tools.
- **Flexibility of Permission Models:** The permission model can be changed or combined with other models, allowing for more tailored solutions.

#### Opportunities for Limited OS Support
- **Event Analysis:** If the OS prevented events from being created or modified, or flagged programmatic events as synthetic, we could verify event flow with minimal effort and performance overhead.
- **Tapjacking:** Detecting tapjacking attacks requires some OS support, such as the `FLAG_WINDOW_IS_OBSCURED` flag.
- **Bait-and-Switch:** Full OS support would allow us to detect UI changes without relying on random checks.

#### Limitations of a User Space Approach
- **Increased Trusted Code Base:** We must trust the OS, device, library, analysis tools, and verification model.
- **Software Updates:** Each application developer must individually update their application to include the latest version of the library.
- **Inconsistent Permission Models:** Flexible permission models may lead to inconsistencies, such as redundant permission prompts.

By addressing these challenges, we aim to provide a robust and flexible solution for user-driven access control in Android applications.