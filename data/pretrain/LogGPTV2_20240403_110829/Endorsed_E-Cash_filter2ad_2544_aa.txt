title:Endorsed E-Cash
author:Jan Camenisch and
Anna Lysyanskaya and
Mira Meyerovich
Endorsed E-Cash
Jan Camenisch
IBM Zurich
PI:EMAIL
Anna Lysyanskaya
Brown University
PI:EMAIL
Mira Meyerovich
Brown University
PI:EMAIL
Abstract
An electronic cash (e-cash) scheme lets a user with-
draw money from a bank and then spend it anony-
mously. E-cash can be used only if it can be securely
and fairly exchanged for electronic goods or services. In
this paper, we introduce and realize endorsed e-cash.
An endorsed e-coin consists of a lightweight endorse-
ment x and the rest of the coin which is meaningless
without x. We reduce the problem of exchanging e-cash
to that of exchanging endorsements. We demonstrate
the usefulness of endorsed e-cash by exhibiting simple
and eﬃcient solutions to two important problems: (1)
optimistic and unlinkable fair exchange of e-cash for
digital goods and services; and (2) onion routing with
incentives and accountability for the routers. Finally,
we show how to represent a set of n endorsements using
just one endorsement; this means that the complexity
of the fair exchange protocol for n coins is the same as
for one coin, making e-cash all the more scalable and
suitable for applications. Our fair exchange of multi-
ple e-coins protocol can be applied to fair exchanges of
(almost) any secrets.
Keywords E-cash, digital signatures, fair exchange,
threshold cryptography
1
Introduction
The main idea of anonymous electronic cash (re-
ferred to as e-cash in the sequel), invented by David
Chaum [Cha83, Cha84], is that, even though the same
bank is responsible for giving out electronic coins,
and for later accepting them for deposit,
it is im-
possible for the bank to identify when a particu-
lar coin was spent (unless a user tries to spend the
same coin more than once, in which case we want to
catch this behavior). E-Cash has been studied exten-
sively [CFN90, FY92, CP93, Bra93a, Bra93b, CPS94,
Bra93c, SPC95, Jak95, FTY96, Tsi97, BP02].
In the past few years, there has been an explo-
sion of e-cash research. Most work has focused on
eﬃcient withdrawal, spend, and fraud detection pro-
tocols. Camenisch et al. [CHL05] introduce compact
e-cash, which allows the user to withdraw a wallet
of n e-coins performing only O(1) multi-base expo-
nentiations. All n coins can be stored using a con-
stant amount of memory; to spend a single coin re-
quires O(1) multi-base exponentiations. Wei [Wei05]
shows how to eﬃciently trace all coins of dishonest
users. Camenisch et al. [CHL06] extend compact e-
cash to allow money laundering detection. Teranish
and Sako [TS04], Nguyen and Safavi-Naini [NSN05],
and Camenisch et al. [CHK+06] show how to use vari-
ations of compact e-cash schemes for anonymous au-
thentication.
This paper adapts e-cash to make it useful for prac-
tical applications.
It is crucial for users to have the
ability to exchange e-cash for digital goods and ser-
vices in a secure and fair fashion. A merchant should
get paid only if the user gets the merchandise. How-
ever, an e-coin is really a (blind) digital signature and
does not necessarily lend itself to such protocols. Prior
approaches fail to provide fairness to the user:
if the
exchange aborts, then the user loses his privacy and,
sometimes, even his money. In this paper, we introduce
the idea of endorsed electronic cash. We let the user
publish an unlimited number of promises of a coin.
Promises of the same coin cannot be linked to each
other. Each promise comes with a unique endorsement.
The coin is not spent until the user gives a merchant
the endorsement that goes with the promised coin. Ex-
changing e-cash is reduced to exchanging lightweight
endorsements.
The user withdraws a wallet coin from the bank.
In regular e-cash, the user transforms the wallet coin
into an e-coin (coin) and gives it to a merchant. He
cannot spend the same wallet coin twice. In endorsed
e-cash, a user can transform a wallet coin into an unlim-
ited number of endorsable e-coins (φ, x, y, coin0). The
value coin0 is a blinded version of coin and φ(x) = y,
where φ is a one-way homomorphic function. The tu-
ple (φ, x, y, coin0) should have enough information to
reconstruct coin. The user gives the merchant an un-
endorsed coin (φ, y, coin0) and saves the endorsement
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007x for himself. The merchant must learn x in order to
get the coin. This can be done via a fair exchange, or
some other protocol. Thus, we can focus on design-
ing protocols to let the merchant obtain a lightweight
endorsement, rather than the entire e-coin. If an ex-
change fails, the user can make more unendorsed coins
from the original wallet coin. None of these unendorsed
coins can be linked to each other, even if one of them
is eventually endorsed. We formally deﬁne endorsed
e-cash in Section 2.3, and realize it using Camenisch
et al. [CHL05] compact e-cash as a starting point in
Section 3.2. We give an on-line variant in Section 3.4.
Suppose Alice
Fair Exchange Applications.
wishes to purchase some on-line goods from Bob. Al-
ice wants to make sure that she doesn’t give away her
money unless she actually gets the goods. Bob wants
to make sure that he doesn’t give away the goods with-
out getting paid. This is a well-known problem called
fair exchange [CTS95, Mic97, ASW97, ASW00]. In op-
timistic fair exchange [Mic97, ASW00], fairness is en-
sured by the existence of a trusted third party (TTP)
who intervenes only if one of the players claims that
something went wrong.
Prior work on fair exchange focused on exchanging
digital signatures, or on exchanging a digital signa-
ture for digital goods or services. There have been
several prior attempts to realize fair exchange of e-
cash.
Jakobsson’s [Jak95] and Reiter, Wang and
Wright’s [RWW05] schemes’ are not fair to the user:
the user is not allowed to reuse a coin from a failed
exchange. Asokan, Shoup and Waidner [ASW00] show
how to exchange Brands’ e-cash [Bra93b], but their
protocol is not quite fair to the user either:
if an ex-
change fails, a user may reuse the coin, but he cannot
do so unlinkably. This weakness in all three schemes
cannot be solved by a TTP. At early stages of the fair
exchange protocol, the merchant can ask the TTP to
terminate the exchange; however, the user would have
already revealed too much information about his coin.
This is a serious problem because on-line multi-party
protocols often fail due to network delay, computers
crashing, and etc.
In endorsed e-cash, an honest user can issue an un-
limited number of unlinkable unendorsed coins corre-
sponding to the same wallet coin and then choose which
one of the coins to endorse.1 If a fair exchange fails, the
user can throw out the corresponding unendorsed coin,
and use the same wallet coin to generate another one.
1The user can make O(2k) promises of the same e-coin. To
create an e-coin, the user makes some random choices; if the user
makes the same choices twice, this results in two identical e-coins
that can be linked to each other. The endorsement for one is an
endorsement to the other. In this case, the user risks not only
losing some privacy, but even being accused of double spending.
For an honest user, this scenario can happen with only negligible
probablity.
We achieve this by applying Asokan, Shoup, and Waid-
ner’s [ASW00] optimistic fair exchange of pre-images of
a homomorphic one-way function protocol to endorse-
ments, in Section 4.1.
In the real world, it is often impossible to buy digital
goods with a single coin. The obvious solution is to run
a fair exchange of all the coins together: to do this, a
user must veriﬁably escrow all n endorsements. If the
TTP gets involved, it has to store, and later decrypt, all
n escrows. (A veriﬁable escrow costs about ten times
more than, say, an ElGamal encryption.) Surprisingly,
it turns out that it is possible to compress n endorse-
ments into one! The burden on the TTP is now the
same regardless of how much the digital goods cost.
Details in Section 4.2.
Buying Services. E-cash can be used to purchase
digital services. Suppose a user asks a service-provider
to perform several tasks on its behalf, for example, to
negotiate with various certiﬁcation authorities or to en-
gage in a series of ﬁnancial transactions. The user does
not want to pay the service-provider unless all of the
tasks are completed, because often, performing some
of the tasks is no better or even worse than perform-
ing none of them. To solve this problem, we introduce
threshold endorsed e-cash (Section 4.3) where the user
can create n endorsements for one e-coin, of which any
m suﬃce to reconstruct the coin.
For a concrete example, consider anonymous re-
mailers and onion routing schemes, such as [Cha81,
DDM03, CL05]. A user sends an encrypted message
via a chain of routers; each router peels oﬀ a layer of
encryption before passing the message on to the next
router. The user needs to give routers an incentive
to forward the message.
If the user simply includes
an e-coin in each layer of encryption, then a router
gets paid even if it does not forward the message. Re-
iter et al. [RWW05] suggest including a “ripped” e-
coin [Jak95] in each layer, along with a veriﬁable en-
cryption of the second half of the coin under the next
router’s public-key. A router would pass the message
and hope that the next router in the chain is honest and
would send the second half of the coin back. However,
the next router has no incentive to do so – because it
does not need anything from the previous router. Even
worse, the user loses the coin regardless of whether a
router passes its message.
Threshold endorsed e-cash easily overcomes this
problem. We set n = m = 2; each layer of the onion
reveals a threshold unendorsed e-coin. To get the en-
dorsement, a router must contact both the previous
and next routers in the chain. Both are motivated to
talk to him because he has endorsements for their coins.
A dishonest router does not get paid and the user does
not lose the e-coin (as long as we can enforce a timeout
after which a dishonest router cannot suddenly contact
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007other routers on the chain, complete the exchange, and
deposit the e-coin).
Practical Applications. Our scheme is eﬃcient
enough to be deployed on most computing devices,
from PCs to smartcards. We believe that e-cash
is going to become more important in today’s elec-
tronic world.
In large peer-to-peer systems, par-
ticipants have to trust others to perform services
for them. Anonymous remailers and onion routing
schemes [Cha81, DDM03, CL05] are a good example:
to provide anonymity for one peer, several peers have to
be on-line and available to serve as routers. Other ex-
amples are peer-to-peer systems for publishing [Coh03]
and backing up [McC01] data. Participants in a peer-
to-peer system perform services to earn brownie points
and subsequently use them to buy services from oth-
ers. Peer-to-peer systems already have economies of
their own [ADS03] and for the sake of privacy, these
economies should utilize e-cash.
Organization. We introduce our notation, state our
complexity assumptions and deﬁne security for com-
pact and endorsed e-cash in Section 2. We construct
oﬀ-line and on-line endorsed e-cash in Sections 3.2
and 3.4, respectively. Finally, Section 4 contains en-
dorsed e-cash protocols:
fair exchange for a single e-
coin in Section 4.1, eﬃcient fair exchange of multiple
e-coins in Section 4.2, and threshold endorsed e-cash in
Section 4.3.
2 Notation and Deﬁnitions
We say ν is a negligible function in k if, for all c, and
all large enough k, ν(k)  1 such yr = z mod n with at most negligible prob-
ability.
Deﬁnition 2.6 (Paillier Assumption ([Pai99])). Let n
be an RSA modulus and P = {an|a ∈ Zn2}. The Pail-
lier assumption states that no PPTM can distinguish a
random element of P from a random element of Zn2.
2.2 Deﬁnition of E-Cash
Suppose we have an e-cash system EC =
(BKeygen, UKeygen, Withdraw, Spend, Deposit,
PublicSecurityProtocols).
(Diﬀerent e-cash systems
have diﬀerent sets of associated algorithms; for con-
sistency, we will use the Camenisch et al.
deﬁni-
tion [CHL05].) We brieﬂy overview each of the pro-
tocols and their security properties. We will give rigor-
ous treatment to only those protocols whose deﬁnition
and security properties are relevant to understanding
endorsed e-cash.
We have three types of players: banks, users and
merchants. Merchants are a subset of users. We
generally use B to denote a bank, M to denote a
merchant and U to denote a user. When we write
Protocol(U(x),B(y)) we mean that there is a protocol
called Protocol between a user U and a bank B in which
the private input of U is x and the private input of B
is y.
A user can withdraw a wallet W of n coins from his
bank account. An e-cash system deﬁnes a set of proto-
cols for transferring wallets and coins between players
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007and for handling cheaters. A protocol can either be a
function invoked by a single player, in which case we
list the arguments to the function, or an interactive
two-party protocol, in which case we list the relevant
parties and the private inputs each one uses.
BKeygen(1k, params) A bank B invokes BKeygen to
generate (pkB, skB), its public/private-key pair.
UKeygen(1k, params) A user U (or a merchant M)
its
invokes UKeygen to generate (pkU , skU),
public/private-key pair.
Withdraw(U(pkB, skU , n),B(pkU , skB, n)) This
a
protocol between a user U and a bank B that lets
the user withdraw n coins from his bank account.
The user gets either a wallet W of n coins, or an