# Title: Designing an Efficient Distributed Black-Box Fuzzing System for Mobile Devices

## Authors:
- Lee Wang Hao
- Murali Srirangam Ramanujam
- S. P. T. Krishnan

### Affiliations:
- **Institute for Infocomm Research, Singapore**
  - **Lee Wang Hao**: [PI:EMAIL]
  - **Murali Srirangam Ramanujam**: muralism@i2r.a-star.edu.sg
  - **S. P. T. Krishnan**: krishnan@i2r.a-star.edu.sg

## Abstract
Security researchers who jailbreak iOS devices have crowdsourced system-level vulnerabilities for iOS. However, their success often depends on whether a particular device owner encounters a crash in the system-level code. For voluntary security testing, black-box fuzzing is an ideal low-cost and simple technique to find system-level vulnerabilities, especially for less technical users. However, it is not always the most effective method due to the large fuzzing space. Additionally, fuzzing mobile devices, such as smartphones, is extremely time-consuming due to the need to instrument varying versions of system software across the world.

In this paper, we present the Mobile Vulnerability Discovery Pipeline (MVDP), a semi-automated vulnerability discovery pipeline for mobile devices. MVDP is designed to produce malicious outputs that are more likely to crash the target, leading to vulnerability discovery. It employs several novel black-box fuzzing techniques, including distributed fuzzing, parameter selection, mutation position optimization, and the selection of good seed files. To date, MVDP has discovered approximately 1,900 crashing inputs and identified 7 unique vulnerabilities across various Android and iOS phone models.

### Categories and Subject Descriptors
- **D.4.6 [Security and Protection]**: Invasive Software—Mobile Vulnerability
- **D.2.5 [Software Engineering]**: Testing and Debugging—Distributed Debugging

### Keywords
- Black-Box Fuzzing
- Zero-Day Vulnerability
- Crash Analysis
- Smartphones

### Permissions
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

### Conference Information
- **ASIA CCS'15, April 14–17, 2015, Singapore**
- **Copyright** held by the owner/author(s). Publication rights licensed to ACM.
- **ACM 978-1-4503-3245-3/15/04 ...$15.00.**
- **DOI**: http://dx.doi.org/10.1145/2714576.2714607

## 1. Introduction
The increased sophistication of mobile devices brings with it many unknown vulnerabilities. It is critical to identify these vulnerabilities before attackers exploit them. The simplicity of black-box fuzzers allows non-security professionals to run security experiments and gather security-related defects for manufacturers or security researchers. However, the space for blind fuzzing is intractable, and many duplicated fuzzed files or files with less meaningful mutations are produced. Therefore, it is essential to develop techniques that yield higher detection rates with fewer input tests.

At a high level, three approaches to discovering software vulnerabilities exist: white-box, black-box, and grey-box testing. The most suitable approach depends on the availability of source codes, design specifications, size of the source base, and available time and resources. White-box testing uses a program's source code to test the internal mechanisms, but this is not always feasible for mobile operating systems like iOS, which are generally closed-source. Google’s Android OS is mostly open-source, but some components remain proprietary. The complexity and size of the codebase require significant time and resources for investigation, and the codebases are frequently updated, making it challenging for researchers to keep up.

Black-box and grey-box testing, on the other hand, require little or no knowledge of the architecture. Black-box fuzzing, at the extreme end of the spectrum, requires numerous unexpected or malformed inputs to test the target's response. Although the basic idea may seem simple, it is highly effective in practice and can discover critical bugs even for users without a security background.

To leverage the availability of idle devices and allow mainstream users to help researchers find security defects, we describe techniques such as distributed fuzzing, parameter selection, mutation position optimization, and the selection of good seed files. We focus on multimedia libraries (audio, video, and images) on Android and iOS, as these are the most consumed media types and have been targeted by drive-by-download exploits in the past.

### 1.1 Fuzzing Challenges and Motivations
Black-box fuzzing is popular, cheap, and effective for finding bugs in applications. However, a scalable black-box fuzzing architecture presents several challenges:

- **Selecting Good Seed Files**: The quality of the fuzzing output depends on the quality of the seed files. A good seed file should cover all sections and sub-types of a particular data format.
- **Virtually Unlimited Fuzzing Space**: The fuzzing space for any file format can be exponentially large, making it nearly impossible to explore every possibility. We need a method to generate and select fuzzing configurations that output fuzzed files with uniformly distributed mutation positions.
- **Fuzzing Scalability**: Generating test cases on the device itself can lead to wasted computing power and reduced coverage. Fuzzed files should be generated once and distributed to different devices for testing. A server setup is needed to coordinate the fuzz distribution and collect results.

### 1.2 Contributions
In this paper, we address the above challenges and present the Mobile Vulnerability Discovery Pipeline (MVDP), a scalable distributed fuzzing infrastructure for discovering unknown vulnerabilities in mobile platforms, particularly smartphones. The key contributions include:

- **Ensuring Universal Uniqueness of Fuzzes**: A novel mechanism, FEET (Fuzzing Engine Evaluation Tool), ensures unique fuzzed files with well-distributed modification positions.
- **Ensuring Uniformity of Fuzz Campaigns**: Fuzzing is phased into jobs, each containing a high diversity of modification positions. This uniformity is measured using a chi-square test.
- **Improving Scalability and Fuzz Reuse**: By sending patches of seed files instead of full fuzzed files, we achieve up to 90% less network traffic. Each fuzzed file is a BSDdiff patch file of approximately 500 bytes, making it suitable for large-scale fuzzing.

Overall, MVDP comprises various stages to generate good fuzzing output, hasten the process of vulnerability discovery, and maximize the coverage of the test space. MVDP currently targets media file formats but can be applied to any data format accessible over the internet.

### Paper Layout
- **Section 2**: Introduces the architecture of MVDP and its operational stages.
- **Section 3**: Shares the implementation and experimental results.
- **Section 4**: Lists related work.
- **Section 5**: Discusses future work.
- **Section 6**: Concludes the paper.

## 2. The Process
The Mobile Vulnerability Discovery Pipeline consists of several processes that can be programmed into server-end and device-end. Figure 1 provides an overview of the pipeline, with the numbers representing the order of operations. The entire MVDP process can be described in three operating stages: Quality Input Generation, Device and Task Management, and Crash Analysis.

### 2.1 Quality Input Generation
This stage is semi-automated and includes automatic downloading and initial good seed file selection. Additional manual augmentation of good seed files is advisable but optional. The goal is to construct the best fuzzing configuration such that the fuzzed files have good coverage and uniform distribution.

#### 2.1.1 Seed File Downloader (SFD)
To fuzz a data format effectively, the clean input data (seed files) must cover as many fields as possible as defined in the respective file format RFC. Data format samples are downloaded from the internet using web APIs, such as the Google Custom Search Engine and Microsoft Azure Search. These raw inputs are then given to the Seed File Analysis Tool (SFAT).

#### 2.1.2 Seed File Analysis Tool (SFAT)
SFAT compares, sorts, and clusters the raw input files according to their protocol coverage. File format parsers, such as Hachoir, provide file information for the seed file selection process.

![Figure 1: Architectural Flow Diagram of MVDP showing automatic and manual processes.](path_to_image)

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.