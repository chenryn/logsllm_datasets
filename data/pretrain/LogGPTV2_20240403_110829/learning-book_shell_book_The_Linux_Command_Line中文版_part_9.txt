[ne@linuxbox playground]$ mv dir1/fun dir2
再把fun文件从dir1移到目录dir2,然后：
[nedlinuxbox playground]$ nv dir2/fun
最后，再把fun文件带回到当前工作目录。接下来，来看看移动目录的效果。首先，我们先
移动我们的数据文件到dir1目录：
[nedlinuxbox playground]$ mv fun dir1
然后移动dir1到dir2目录，用ls来确认执行结果：
53
---
## Page 55
[nedlinuxbox playground]$ mv dir1 dir2
[ne@linuxbox playground]$ 1s -1 dir2
total 4
drvxrvxr-x 2 me me 4096 200801-11 06:06 dir1
[neglinuxbox playground]$ 1s 1 dir2/dir1
tota1 4
rv-r--r-- 1 me me 1650 200801-10 16:33 fun
注意：因为目录dir2已经存在，mv命令会把dir1移动到dir2目录中。如果dir2不存在
mv会把dir1重命名为dir2。最后，让我们把所有的东西放回原处：
[nedlinuxbox playground]$ mv dir2/dir1
[nedlinuxbox playground]$ nv dir1/fun
5.15
创建硬链接
现在，我们试着创建链接。首先是硬链接。我们创建一些关联我们数据文件的链接：
[nedlinuxbox playground]$ 1n fun fun-hard
[ne@linuxbox playground]$ 1n fun dir1/fun-hard
[nedlinuxbox playground]$ 1n fun dir2/fun-hard
所以现在，我们有四个文件“fun”的实例。看一下目录playground中的内容：
[neglinuxbox playground]$ 1s -1
total 16
drvxrvxr-x 2 me me 4096 2008-01-14 16:17 dir1
drvxrvxr-x 2 meme 4096 200801-14 16:17 dir2
rv-r--r-- 4 me me 1650 2008-01-10 16:33 fum
rv-r-=r-- 4 meme 1650 200801-10 16:33 fum-hard
注意到一件事，列表中，文件fun和fun-hard的第二个字段是“4"，这个数字是文件“fun”
的硬链接数目。你要记得一个文件至少有一个硬链接，因为文件名就是由链接创建的。那么，
54
---
## Page 56
我们怎样知道实际上fun和fun-hard是同一个文件呢？在这个例子里，ls不是很有用。虽然我
们能够看到fun和fun-hard文件大小一样（第五字段），但我们的列表没有提供可靠的信息来
确定（这两个文件一样）。为了解决这个问题，我们更深入的研究一下。
当考虑到硬链接的时候，我们可以假设文件由两部分组成：包含文件内容的数据部分和持有
文件名的名字部分，这将有助于我们理解这个概念。当我们创建文件硬链接的时候，实际上是
为文件创建了额外的名字部分，并且这些名字都关联到相同的数据部分。这时系统会分配一连
串的磁盘块给所谓的索引节点，然后索引节点与文件名字部分相关联。因此每一个硬链接都关
系到一个具体的包含文件内容的索引节点。
ls命令有一种方法，来展示（文件索引节点）的信息。在命令中加上“-i”选项：
[ne@]inuxbox playground]$ 1s -1i
total 16
12353539 drvxrvxr-x 2 ne ne 40962008-011416:17dir1
12353540 drvxrvxr-x 2 ne ne 40962008-011416:17dir2
12353538 -rv-r-=r-- 4 ne ne 1650 2008-01-10 16:33 fun
12353538 -rv-r--r-- 4 ne ne 1650 2008-01-10 16:33 fun-hard
在这个版本的列表中，第一字段表示文件索引节点号，正如我们所见到的，fun和fun-hard
共享一样的索引节点号，这就证实这两个文件是同一个文件。
5.16创建符号链接
建立符号链接的目的是为了克服硬链接的两个缺点：硬链接不能跨越物理设备，硬链接不能关
联目录，只能是文件。符号链接是文件的特殊类型，它包含一个指向目标文件或目录的文本指
针*
符号链接的建立过程相似于创建硬链接：
[neglinuxbox playground]$ 1n =s fun fun-sym
[ne@linuxbox playground]$ 1n =8 -./fun dir1/fun-sym
[ne@linuxbox playground]$ 1n =8 - . /fun dir2/fun-sym
第一个例子相当直接，在ln命令中，简单地加上“-s"选项就可以创建一个符号链接，而不
是一个硬链接。下面两个例子又是怎样呢？记住，当我们创建一个符号链接的时候，会建立一
---
## Page 57
个目标文件在哪里和符号链接有关联的文本描迹。如果我们看看bs命令的输出结果，比较容易
理解。
[neglinuxbox playground]$ 1s -1 dir1
total 4
lrvxrvxrvx 1 meme6 2008=0115 15:17 fum-sym -> ../fun
目录dir1中，fun-sym的列表说明了它是一个符号链接，通过在第一字段中的首字符“1
可知，并且它还指向“./fun"，也是正确的。相对于fun-sym的存储位置，fun在它的上一个目
录。同时注意，符号链接文件的长度是6，这是字符串“./fun”所包含的字符数，而不是符号
链接所指向的文件长度。
当建立符号链接时，你既可以使用绝对路径名：
1n =s /home/ne/playground/fun dir1/fun=sya
也可用相对路径名，正如前面例题所展示的。使用相对路径名更令人满意，因为它允许一个
包含符号链接的目录重命名或移动，而不会破坏链接。
除了普通文件，符号链接也能关联目录：
[ne@linuxbox playground]$ 1n =s dir1 dir1-symu
[ne@linuxbox playground]$ 1s -1
total 16
..省略
5.17移动文件和目录
正如我们之前讨论的，rm命令被用来剧除文件和目录。我们将要使用它来清理一下我们的游
戏场。首先，删除一个硬链接：
56
---
## Page 58
[ne@linuxbox playground]$rm fun-hard
[neglinuxbox playground]$ 1s 1
total 12
...省略
结果不出所料。文件fun-hard消失了，文件fun的链接数从4减到3.正如目录列表第二
字段所示。下一步，我们会删除文件fun，仅为了娱乐，我们会加入“-i”选项，看一看它的作用：
[neglinuxbox playground]$ rm -i fun
在提示符下输入“y"，删除文件。让我们看一下ls的输出结果。注意，fun-sym发生了什么
事？因为它是一个符号键接，指向已经不存在的文件，链接已经坏了：
[ne@linuxbox playground]$ 1s -1
total 8
drvxrvxr=x 2 meme
4096 2008-01-15 15:17 dir1
lrvxrvxrvx 1 meme
4 2008-01-16 14:45 dir1-syn -> dir1
drvxrvxr-x 2 se ne
4096 2008-01-15 15:17 dir2
lrvxrvxrvx 1 me me
3 2008-01-15 15:15 fun-syn -> fun
大多数Linux的发行版本配置ls显示损坏的链接。在Fedora系统中，坏的链接以闪烁的
红色文本显示！损坏链接的出现，并不危险，但是相当混乱。如果我们试着使用损坏的链接
会看到以下情况：
[ne@linuxbox playground]$ lessfun-sym
fun-sym: No such file or directory
稍微清理一下现场。删除符号链接：
57
---
## Page 59
[nedlinuxbox playground]$ m fun-syn dir1-sym
[ne@linuxbox playground]$ 1s -1
total 8
drwxrvxr-x 2 meme
4096 20080115 15:17 dir1
drvxrvxr-x 2 me me  4096 2008-01-15 15:17 dir2
对于符号链接，有一点值得记住，执行的大多数文件操作是针对链接的对象，而不是链接本
身。而rm命令是个特例。当你删除链接的时候，删除链接本身，而不是链接的对象。
最后，我们将删除我们的游戏场。为了完成这个工作，我们将返回到我们的家目录，然后用
rm命令加上选项（-r)，来删除目录playground，和目录下的所有内容，包括子目录：
[nedlinuxbox playground]$ cd
pox3kedi-us[-xoqxmutou]
用GUI来创建符号链接
文件管理器GNOME和KDE都提供了一个简单而且自动化的方法来创建符号
链接。在GNOME里面，当拖动文件时，同时按下Ctrl+Shift按键会创建一个链
接，而不是复制（或移动）文件。在KDE中，无论什么时候放下一个文件，会弹出
一个小菜单，这个菜单会提供复制，移动，或创建链接文件选项。
5.18总结
在这一章中，我们已经研究了许多基础知识。我们得花费一些时间来全面地理解。反复练习
playground例题，直到你觉得它有意义。能够良好地理解基本文件操作命令和通配符.非常重
要。随意通过添加文件和目录来拓展playground练习，使用通配符来为各种各样的操作命令
指定文件。关于链接的概念，在刚开始接触时会觉得有点迷惑，花些时间来学习它们是怎样工
作的。它们能成为真正的救星。
58
---
## Page 60
6”使用命令
在这之前，我们已经知道了一系列神秘的命令，每个命令都有自己奇妙的选项和参数。在这一
章中，我们将试图去掉一些神秘性，甚至创建我们自己的命令。这一章将介绍以下命令：
·type一说明怎样解释一个命令名
·which一显示会执行哪个可执行程序
·man一显示命令手册页
·apropos一显示一系列适合的命令
·info一显示命令info
·whatis一显示一个命令的简洁描
·alias一创建命令别名
6.1到底什么是命令？
命令可以是下面四种形式之一：
1.是一个可执行程序，就像我们所看到的位于目录/usr/bin中的文件一样。这一类程序可
以是用诸如C和C++语言写成的程序编译的二进制文件，也可以是由诸如 shell，perl
python，ruby等等脚本语言写成的程序。
2.是一个内建于shell自身的命令。bash支持若干命令.内部叫做shell内部命令（builtins)。
例如，cd命令，就是一个shell内部命令。
3.是一个shell函数。这些是小规模的shell脚本，它们混合到环境变量中。在后续的章节
里，我们将讨论配置环境变量以及书写shell函数。但是现在，仅仅意识到它们的存在就
可以了。
4.是一个命令别名。我们可以定义自己的命令。建立在其它命令之上。
59
---
## Page 61
6.2识别命令
命令类型。
6.3type一显示命令的类型
type命令是shell内部命令。它会显示命令的类别。给出一个特定的命令名（做为参数）。它像
这样工作：
type comnand
“"command”是你要检测的命令名。这里有些例子：
[ne@linuxbox -]$ type type
type is a shell builtins
[neglinuxbox -]$ type 1s
ls is aliased to *1s --color=tty
[netlinuxbox -]$ type cp
cp is /bin/cp
我们看到这三个不同命令的检测结果。注意，s命令（在Fedora系统中）的检查结果，ls
命令实际上是Is命令加上选项“--color=tty”的别名。现在我们知道为什么ls的输出结果是有
颜色的！
6.4
4which一显示一个可执行程序的位置
有时候在一个操作系统中，不只安装了可执行程序的一个版本。虽然在桌面系统中这井不普遍
但在大型服务器中却很平常。为了确定所给定的执行程序的准确位置，使用which命令：
[ne@linuxbox -]$ vhich 1s
/bin/1s
60
---
## Page 62
这个命令只对可执行程序有效，不包括内建命令和命令别名，别名是真正的可执行程序的替
代物。当我们试着使用shell内建命令时，例如，cd命令，我们或者得不到回应，或者是个错
误信息：
[ne@linuxbox -]$ which cd
/usr/bin/vhich: no cd in
(/opt/jre1 .6. 0_03/bin:/usr/lib/qt-3.3/bin: /usr/kerberos/bin: /opt/jre1
6.0_03/bin: /usr/lib/ccache: /usr/local/bin: /usr/bin: /bin: /hone/ne/bin)
说“命令没有找到”，真是很奇特。
6.5得到命令文档
知道了什么是命令，现在我们来寻找每一类命令的可得到的文档。
6.6help-得到shell内建命令的帮助文档
bash有一个内建的帮助工具，可供每一个shell 内建命令使用。输入“help”，接着是shell内
部命令名。例如：
[ne@linuxbox -]$ help cd
cd: cd [-L1P] [dir]
Change ...
注意表示法：出现在命令语法说明中的方括号，表示可选的项目。一个竖杠字符表示互斥选
项。在上面cd命令的例子中：
cd [-L|-P][dix]
这种表示法说明，cd命令可能有一个“-L”选项或者“-P”选项，进一步，可能有参数“dir”。
虽然cd命令的帮助文档很简洁准确，但它决不是教程。正如我们所看到的，它似乎提到了
许多我们还没有谈论到的东西！不要担心，我们会学到的。
61
---
## Page 63
6.7--help-显示用法信息
许多可执行程序支持一个-help选项，这个选项是显示命令所支持的语法和选项说明。例如：
dtog-- xpxu s[- xoqxnustoou]
Usage: midir [OPTION] DIRECTORY. .
Create ...
一些程序不支持--help选项。但不管怎样试一下。这经常会导致输出错误信息，但同时能
揭示一样的命令用法信息。
6.8
8man一显示程序手册页
许多希望被命令行使用的可执行程序，提供了一个正式的文档，叫做手册或手册页（manpage)。
一个特殊的叫做man的分页程序，可用来浏览他们。它是这样使用的：
san progras
"program”是要浏览的命令名。
手册文档的格式有点不同，一般地包含一个标题、命令语法的纲要、命令用途的说明、以
及每个命令选项的列表和说明。然而，手册文档通常并不包含实例，它打算作为一本参考手册，
而不是教程。作为一个例子，浏览一下1s命令的手册文档：
[ne@linuxbox -]$ man 1s
在大多数Linux系统中，man使用less工具来显示参考手册，所以当浏览文档时，你所熟
悉的less命令都能有效。
man所显示的参考手册，被分成几个章节，它们不仅仅包括用户命令，也包括系统管理员
命令、程序接口、文件格式等等。下表描绘了手册的布局：
内容
1
用户命令
62
---
## Page 64
2
程序接口内核系统调用
3
C库函数程序接口
4
特殊文件，比如说设备结点和驱动程序
文件格式
6
游戏娱乐，如屏幕保护程序
7
其他方面
8
系统管理员命令
表6-1：手册页的组织形式