### 文档优化

#### 摘要
本文探讨了一种新的内存保护技术，旨在防御控制数据和非控制数据攻击。我们通过硬件设计实现了一个原型，并在 SimpleScalar 处理器模拟器中进行了测试。实验结果表明，该架构在提供显著的安全性提升的同时，对现有应用程序的透明度高，且性能开销较小。

#### 1. 引言
大多数安全漏洞源于低级编程错误，这些错误允许攻击者破坏内存。基于控制流完整性的防护措施虽然有效，但主要针对控制数据攻击。然而，我们发现了一些能够绕过现有技术检测的非控制数据攻击。本文提出了一种新的保护技术，通过检测指针污染来防御这些攻击。

#### 2. 攻击场景
##### 2.1 整数溢出导致数组越界
```c
void foo(unsigned int ui) {
    int i = ui;
    if (i >= ArraySize)
        i = ArraySize - 1;
    array[i] = 1;
}
```
在这个例子中，`ui` 的值可能被恶意设置为一个非常大的数，从而导致 `i` 越界。

##### 2.2 缓冲区溢出导致关键标志被篡改
```c
void bar() {
    int auth;
    char buf[100];
    auth = do_auth();
    scanf("%s", buf);
    if (auth)
        grant_access();
}
```
攻击者可以通过缓冲区溢出将 `auth` 标志设为 1，从而绕过身份验证。

##### 2.3 格式字符串攻击导致信息泄露
```c
void leak() {
    int secret_key;
    char buf[12];
    recv(s, buf, 12, 0);
    printf(buf);
}
```
攻击者可以利用格式字符串漏洞读取栈上的敏感数据，如 `secret_key`。

#### 3. 技术细节
我们的方法通过跟踪每个字节的数据污染状态来检测潜在的攻击。具体来说，我们在处理器和内存系统中引入了污染位（taintedness bit），并在数据路径中传播这些位。

##### 3.1 硬件设计
- **数据路径**：在处理器的各个阶段之间传递污染位。
- **内存系统**：扩展物理内存以存储污染位。
- **性能影响**：污染位的传播不会增加指令执行时间，因为这些操作可以在现有操作的基础上并行执行。

##### 3.2 软件处理
操作系统内核需要标记来自输入系统调用的数据为污染数据。这可以通过拦截系统调用来实现。

#### 4. 实验结果
通过使用合成和真实网络应用进行评估，我们发现：
- 提供了显著的安全性提升。
- 几乎没有误报。
- 尽管存在一些假阴性情况，但运行程序时成功攻击的概率极低。
- 架构开销较低。
- 对现有应用程序透明，无需重新编译。

#### 5. 结论
本文提出了一种新的内存保护技术，能够有效防御控制数据和非控制数据攻击。实验结果表明，该技术在提供显著安全性提升的同时，对现有应用程序的透明度高，且性能开销较小。

#### 6. 致谢
本研究部分得到了 Motorola Inc.、NSF ACI CNS-0406351 和 MURI Grant N00014-01-1-0576 的支持。感谢 Fran Baker 对初稿的仔细审阅。

#### 参考文献
[1] Aleph One. “Smashing the Stack for Fun and Profit.” Phrack Magazine, 49(7), Nov. 1996.
[2] “PaX Address Space Layout Randomization (ASLR).” http://pax.grsecurity.net/docs/aslr.txt.
[3] Anonymous. “Once upon a free().” Phrack Magazine, 57(9), Aug. 2001.
...（省略其他参考文献）

---

此文档已根据您的要求进行了优化，使其更加清晰、连贯和专业。希望这对您有所帮助！