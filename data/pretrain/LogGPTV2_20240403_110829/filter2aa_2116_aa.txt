### The Proxy Era of Microsoft Exchange Server

**Orange Tsai**
- **Focus**: Web and Application 0-day research
- **Position**: Principal Security Researcher at DEVCORE
- **Role**: Captain of HITCON CTF Team
- **Speaker**: Various security conferences including Black Hat USA & ASIA, DEFCON, HITB, and HITCON
- **Awards and Honors**:
  - 2017: 1st place in Top 10 Web Hacking Techniques
  - 2018: 1st place in Top 10 Web Hacking Techniques
  - 2019: Winner of Pwnie Awards "Best Server-Side Bug"
  - 2021: Champion and "Master of Pwn" at Pwn2Own
  - 2021: Winner of Pwnie Awards "Best Server-Side Bug"

### Why Target Exchange Server?
1. **Confidential Secrets**: Mail servers, especially Exchange Server, store sensitive information for enterprises and governments worldwide.
2. **High-Profile Targets**: Exchange Server has been a target for nation-state hackers, such as the Equation Group.
3. **Widespread Exposure**: Over 400,000 Exchange servers are exposed on the Internet, according to our survey.

### Our Works
- **Focus**: We concentrated on the Exchange architecture and discovered a new attack surface that had not been previously proposed. This allowed us to easily uncover 0-days.
- **Vulnerabilities Discovered**: Nine vulnerabilities covering server-side, client-side, and cryptographic bugs, which we chained into four distinct attacks:
  1. **ProxyLogon**: A pre-auth RCE chain.
  2. **ProxyOracle**: A plaintext-password recovery attacking chain.
  3. **ProxyShell**: A pre-auth RCE chain demonstrated at Pwn2Own 2021.
  4. **ProxyRelay**: A pre-auth authentication bypass to read all the victim's emails.

### The Proxy Era of MS Exchange
- **ProxyLogon**
  - CVE-2021-26855
  - CVE-2021-27065
- **ProxyNotFound**
  - CVE-2021-28480
  - CVE-2021-28481
- **ProxyToken**
  - CVE-2021-33766
- **ProxyOracle**
  - CVE-2021-31195
  - CVE-2021-31196
- **ProxyRelay**
  - CVE-2021-33768
  - CVE-2021-TBA
- **ProxyShell**
  - CVE-2021-34473
  - CVE-2021-34523
  - CVE-2021-31207

### Exchange Architecture
- **Backend Server**
- **Frontend Server**
  - **2000/2003**: Mailbox Role, Client Access Role, Hub Transport Role, Unified Messaging Role, Edge Transport Role
  - **2007/2010**: Mailbox Role, Client Access Role, Edge Transport Role
  - **2013**: Edge Transport Role
  - **2016/2019**: Mailbox Role, Mailbox Service, Client Access Service

### Focus Area
- **Client Access Service (CAS)**: A fundamental protocol handler in Microsoft Exchange Server. According to Microsoft documentation, CAS is responsible for routing or proxying connections to the corresponding backend services.

### Client Access Service in IIS
- **Applications in Frontend**: Include the ProxyModule, which parses incoming HTTP requests, applies protocol-specific settings, and forwards them to the Backend.
- **Applications in Backend**: Include the BackendRehydrationModule, which receives and populates HTTP requests from the Frontend.
- **Synchronization**: Internal information between the Frontend and Backend is synchronized via HTTP headers.

### Our Ideas
- **Intentional Backend Access**: Investigating whether we can intentionally access the Backend through the ProxyRequestHandler.cs.

### Request and Response Flow
- **Request Section**:
  - CopyHeadersToServerRequest
  - CopyCookiesToServerRequest
  - AddProtocolSpecificHeadersToServerRequest
- **Proxy Section**:
  - GetTargetBackEndServerUrl
  - CreateServerRequest
  - GetServerResponse
- **Response Section**:
  - CopyHeadersToClientResponse
  - CopyCookiesToClientResponse

### HTTP Header Blacklists
- **Code Snippet**:
  ```csharp
  protected virtual bool ShouldCopyHeaderToServerRequest(string headerName) {
      return !string.Equals(headerName, "X-CommonAccessToken", OrdinalIgnoreCase) 
             && !string.Equals(headerName, "X-IsFromCafe", OrdinalIgnoreCase) 
             // ... other blacklisted headers
  }
  ```

### Clone User Identity
- **Code Snippet**:
  ```csharp
  if (this.ClientRequest.IsAuthenticated) {
      CommonAccessToken commonAccessToken = AspNetHelper.FixupCommonAccessToken(
          this.HttpContext, this.AnchoredRoutingTarget.BackEndServer.Version);
      if (commonAccessToken != null) {
          headers["X-CommonAccessToken"] = commonAccessToken.Serialize(
              new int?(HttpProxySettings.CompressTokenMinimumSize.Value));
      }
  } else if (this.ShouldBackendRequestBeAnonymous()) {
      headers["X-CommonAccessToken"] = new CommonAccessToken(9).Serialize();
  }
  ```

### Calculate Backend URL and Create New HTTP Client
- **Code Snippet**:
  ```csharp
  if (this.ProxyKerberosAuthentication) {
      // use origin Kerberos Authentication
  } else if (this.AuthBehavior.AuthState == AuthState.BackEndFullAuth || this.
      ShouldBackendRequestBeAnonymous() || (HttpProxySettings.TestBackEndSupportEnabled.Value
      && !string.IsNullOrEmpty(this.ClientRequest.Headers["TestBackEndUrl"]))) {
      // unauthenticated
  } else {
      serverRequest.Headers["Authorization"] = KerberosUtilities.GenerateKerberosAuthHeader(
          serverRequest.Address.Host, this.TraceContext, 
          ref this.authenticationContext, ref this.kerberosChallenge);
  }
  ```

### Backend Rehydration Module
- **Code Snippet**:
  ```csharp
  private void OnAuthenticateRequest(object source, EventArgs args) {
      if (httpContext.Request.IsAuthenticated) {
          this.ProcessRequest(httpContext);
      }
  }
  private void ProcessRequest(HttpContext httpContext) {
      CommonAccessToken token;
      if (this.TryGetCommonAccessToken(httpContext, out token))
          // ...
  }
  ```

### Check AD Extended Rights
- **Code Snippet**:
  ```csharp
  private bool IsTokenSerializationAllowed(WindowsIdentity windowsIdentity) {
      flag2 = LocalServer.AllowsTokenSerializationBy(clientSecurityContext);
      return flag2;
  }
  private static bool AllowsTokenSerializationBy(ClientSecurityContext clientContext) {
      return LocalServer.HasExtendedRightOnServer(clientContext, 
          WellKnownGuid.TokenSerializationRightGuid);  // ms-Exch-EPI-Token-Serialization
  }
  ```

### Authentication Flow Summary
1. **Frontend IIS**: Authenticates the request (Windows or Basic authentication) and serializes the current Identity to X-CommonAccessToken HTTP header.
2. **Frontend**: Generates a Kerberos ticket by its HTTP SPN to Authorization HTTP header.
3. **Frontend**: Proxies the HTTP request to Backend.
4. **Backend IIS**: Authenticates the request and checks if the authenticated user has TokenSerialization right.
5. **Backend**: Rehydrates the user from X-CommonAccessToken HTTP header.

### Let's Start the Hack!
- **ProxyLogon**: The most well-known Exchange Server vulnerability.
  - **Impact**: An unauthenticated attacker can execute arbitrary code on Microsoft Exchange Server through an only exposed 443 port.
  - **Chain of Bugs**:
    - **CVE-2021-26855**: Pre-auth SSRF leading to Authentication Bypass.
    - **CVE-2021-27065**: Post-auth Arbitrary-File-Write leading to RCE.

### Where Does ProxyLogon Begin?
- **Initial Vulnerability**: Understanding the starting point of the ProxyLogon attack chain.