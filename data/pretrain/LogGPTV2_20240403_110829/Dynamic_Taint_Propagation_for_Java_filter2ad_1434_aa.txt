title:Dynamic Taint Propagation for Java
author:Vivek Haldar and
Deepak Chandra and
Michael Franz
Dynamic Taint Propagation for Java
Vivek Haldar  
Deepak Chandra 
Michael Franz 
University of California 
Irvine, CA 92697 
+1-949-824-7308 
{vhaldar,dchandra,franz}@uci.edu 
ABSTRACT 
Improperly  validated  user  input  is  the  underlying  root  cause 
for  a  wide  variety  of  attacks  on  web-based  applications.  Static 
approaches  for  detecting  this  problem  help  at  the  time  of 
development, but require source code and report a number of false 
positives. Hence, they are of little use for securing fully deployed 
and rapidly evolving applications. We propose a dynamic solution 
that tags and tracks user input at runtime and prevents its improper 
use  to  maliciously  affect  the  execution  of  the  program.  Our 
implementation can be transparently applied to Java classfiles, and 
does not require source code. Benchmarks show that the overhead 
of this runtime enforcement is negligible and can prevent a number 
of attacks.  
1. 
MOTIVATION 
“The  impact  of  using  unvalidated  input  should  not  be 
underestimated. A huge number of attacks would become difficult 
or  impossible  if  developers  would  simply  validate  input  before 
using  it.  Unless  a  web  application  has  a  strong  centralized 
mechanism  for  validating  all  input…  vulnerabilities  based  on 
malicious input are very likely to exist.” 
-  The  Ten  Most  Critical  Web  Application  Security 
Vulnerabilities, 2004, Open Web Application Security Project. 
In  the  “old  internet”,  machines  and  services  communicated 
with each other using a variety of protocols that were processed 
largely  by  programs  written  in  C.  The  full  range  of  common 
UNIX remote services falls in this category – mail servers, finger 
daemons, scheduled job execution services etc. The most common 
way  to  attack  these  services  was  to  exploit  buffer-overrun 
vulnerabilities  that  stemmed  from  the  fundamental  lack  of 
memory safety in the underlying implementation language, C. 
The trend now is towards a model of web-based applications 
that communicate using the HTTP protocol, that are implemented 
in a type- and memory-safe language such as Java, and executed 
in a safe runtime such as the Java Virtual Machine or the .NET 
Common Language Runtime.  
Such  code  platforms  offer  several  advantages  over  native 
code.  The  virtual  machine  performs  a  number  of  static  and 
dynamic  checks  to  ensure  a  basic  level  of  code  safety—type-
safety, and control flow safety. Type safety ensures that operators 
and functions are applied only to operands and arguments of the 
correct  types.  A  special  case  of  type  safety  is  memory  safety, 
which prevents reading and writing to illegal memory locations—
for  example,  beyond  the  bounds  of  an  array—and  thereby  also 
provides separation between different processes without the need 
for  hardware-based  memory  management.  Control  flow  safety 
prevents  arbitrary  jumps  in  code  (say,  into  the  middle  of  a 
procedure, or to an unauthorized routine). These basic properties 
of  safe  code  are  enforced  by  a  combination  of  static  (e.g. 
bytecode  verification)  and  dynamic  (e.g.  array  bounds  checks) 
techniques.  Thus,  safe  code  does  away  with  a  major  source  of 
errors and vulnerabilities in current systems that stem from unsafe 
memory  operations  in  C—such  as  buffer  overruns  and  format 
string attacks. 
Despite the fact that the safe execution environments in which 
web-applications  typically  execute  are  not  vulnerable  to  buffer-
overrun  attacks,  a  wide  variety  of  new  attacks  specifically 
targeting  them  have  recently  surfaced  [3].  Instead  of  exploiting 
the weak-typing of the underlying language, attacks now focus on 
exploiting  the  presence  of  logic  errors  in  the  application.  Since 
the interface web-applications provide to the world is simply an 
HTML  page,  they  can  be  attacked  from  any  client  capable  of 
issuing HTTP requests, and very often the only tool needed is a 
browser.  
One large class of such errors is using untrusted user input in 
security-sensitive  commands  without  proper  validation  and 
sanitization. An overly simplistic example of this is using a user-
input string as argument to the System.exec() call in Java. If 
this string is not properly checked, it allows the user to execute 
arbitrary commands on the hosting system. User input consists not 
just of data entered into HTML forms, but the full range of data 
that  originates  from  untrusted  sources  external  to  the  web-
application. This includes sources such as data read from cookies 
on  the  client  and  HTTP  parameters  encoded  in  a  URL. 
Identifying,  tracking  and  preventing  the  improper  use  of  such 
untrusted data is the domain of the taint problem. 
Various  approaches  have  been  explored  to  attack  the  taint 
problem (see section 6 for an overview). Broadly, these fall into 
two categories – statically analyzing code for the presence of taint 
vulnerabilities, and dynamic approaches that track tainted data at 
runtime. Each has its own advantages and disadvantages, and is 
applicable in different scenarios. 
Form input, 
Form input, 
cookies, 
cookies, 
parameters
parameters
Web Application
Web Application
Java VM
Java VM
SQL queries
SQL queries
Database
Database
Backend
Backend
Figure 1: Architecture of a web application 
Client
Client
the 
is  useful  at 
Static  analysis 
time  of  application 
development, when potential vulnerabilities found by the analysis 
can  be  fixed  by  the  programmer  in  source  code.  Some  human 
intervention is also needed because static approaches, in order to 
be conservative, typically also report a number of false positives. 
The programmer must then manually examine the reported errors 
to determine which are actual vulnerabilities and which are not.  
There are two problems that need to be dealt with. Firstly, the 
problem  must  be  specified  correctly.  This  means  getting  all  the 
rules  and  corner  cases  for  validating  user  input  right.  Secondly, 
this  specification  must  be 
faithfully.  Static 
approaches  can  catch  implementation  errors,  but  not  bugs  of 
specification. If a dynamic approach independently also performs 
its  own  checks,  it  may  be  able  to  catch  more  errors  than  only 
static checking. 
implemented 
However, static approaches do provide more accurate reports 
than  runtime  approaches,  enable  fixing  vulnerabilities  before  an 
application  is  deployed,  and  have  no  runtime  performance 
overhead. 
But most web-applications deployed in the real world do have 
bugs in them. A study [5] estimates that nearly 60% of deployed 
applications  are  vulnerable.  For  the  large  majority  of  these 
applications,  the  source  code  is  not  available.  Moreover,  web-
applications  also  rapidly  change  and  evolve.  Here,  static 
approaches fall short.  
A  dynamic,  runtime  technique  that  can  be  transparently 
applied to deployed applications is very useful in such scenarios. 
This  explains  the  popularity  of  Perl’s  taint  mode  [4].  It  is  not 
guaranteed to prevent attacks, but it significantly raises the bar for 
exploiting taint vulnerabilities in Perl CGI scripts. 
the 
In this paper, we present a technique and our implementation 
for  dynamically  tracing  tainted  user  input  in  the  Java  Virtual 
Machine. Our technique tracks the taintedness of untrusted input 
throughout 
is 
propagated  in  the  obvious  way  –  strings  derived  from  tainted 
strings  are  also  considered  tainted.  Our  technique  is  completely 
transparent – the application is completely unaware of it. It can be 
applied  to  an  existing  Java  classfile,  and  does  not  need  source 
code.   
the  application.  Taintedness 
lifetime  of 
We allow the separate specification of sources of tainted data, 
as well as sensitive methods that should not use tainted data (also 
called sinks). This separation of mechanism and policy gives our 
technique  great  flexibility.  We  need  specify  these  sources  and 
sinks  only  once  per  library.  For  example,  once  we  specify  the 
sources and sinks in the J2EE library, all applications using that 
can benefit from dynamic taint propagation. Sources are usually 
methods  that  get  input  from  outside  the  program,  and  sinks  are 
usually methods that either write output outside the program, or 
execute  some  form  of  code  (SQL,  shell  commands).  We  track 
taintedness from sources to sinks,  and prevent tainted data from 
being passed into sinks.  
Our  technique  uses  a  fairly  simple  policy  to  untaint  tainted 
data.  This  is  needed  because  otherwise all  data  that  depends  on 
user  input  would  always  be  considered  tainted.  Note  that  our 
policy  for  untainting  data  is  a  heuristic,  and  trusts  that  the 
programmer performed meaningful validation checks. 
The  rest  of  this  paper  is  organized  as  follows:  Section  2 
provides an overview of the taint problem, and the various attacks 
that  can  be  mounted  against  web-applications  because  of 
improperly  validated 
input;  Section  3  explains  how  we 
dynamically  trace  taintedness  in  the  Java  Virtual  Machine; 
Section 4 presents implementation details and the results of some 
benchmarks; Section 5 discusses avenues for future work; Section 
6 gives an overview of other approaches for dealing with the taint 
problem; and Section 7 concludes. 
2. 
THE TAINT PROBLEM 
The  taint  problem  in  web  applications  stems  from  using 
improperly  validated  user  input  in  commands  that  are  security-
sensitive.  This  is  the  underlying  cause  for  a  wide  variety  of 
attacks  on  web-applications.  Many  authors  [1,  2,  3]  have  given 
excellent  overviews  of  attacks  on  web-applications,  and  in 
particular,  how  improperly  validated  user  input  can  be  used  to 
mount these attacks. We borrow heavily from them and provide a 
short overview of these attacks here. 
Figure  1  shows  the  architecture  of  a  typical  web-based 
application.  It  presents  an  HTML  interface  to  users,  and  having 
got  some  input  from  them,  queries  a  database  backend,  formats 
the result and presents a new HTML page. The backend need not 
always  be  a  database,  but  could  also  be  any  other  data  source, 
such as another web application.  
An attacker’s goal is to manipulate user input such that it can 
be  used  to  affect  the  execution  of  the  program  maliciously.  For 
example,  an  attacker  could  provide  input  that  is  then  used  to 
construct malicious queries to the backend to extract data that she 
was  not  authorized  to  see.  Another  goal  might  be  to  insert 
information into the database to pollute it, or plant misinformation 
in it. 
2.1 
EXAMPLES OF ATTACKS 
We  illustrate  with  an  example  from  WebGoat  [13],  a 
collection of web applications designed to demonstrate attacks on 
them. Consider a web form with a textbox where the user fills in 
her account number, and after pressing “OK”, the resulting page 
displays her credit card information. The information is looked up 
in the database using the following query: 
SELECT  *  FROM  user_data  WHERE  userid  = 
Here  the  string  used  to  construct  the  SQL  query  is  not 
properly checked before being sent to the database backend and a 
malicious input string can easily leak sensitive data. For example, 
if the user inputs: 
101 OR 1 
Then the resulting SQL query becomes: 
SELECT  *  FROM  user_data  WHERE  userid  = 
101 OR 1 
In  this  query,  the  boolean  condition  evaluates  to  “true” 
always  because  of  the  additional  “OR  1”.  Thus  the  query  will 
match all records, and the resulting HTML page will display all 
credit cards in the database. Such attacks, where user input is used 
to affect the execution of a command on the local host, are called 
command injection attacks. 
For  another  attack,  consider  a  web  forum  with  a  text  box 
where  users  enter  new  messages.  A  user  could  enter  arbitrary 
JavaScript  content  between    tags  in 
this text box, and the message would then be part of the webpage. 
Other users who load the same page would now be unknowingly 
executing this inserted JavaScript. This is an example of a cross-
site scripting attack. 
2.2 
CLASSES OF ATTACKS 
Attacks  on  web-applications  can  target  both  the  hosting 
server, as well as clients that access the application. Some of the 
most prevalent attacks on web-based applications are: 
•  Command 
input 
injection  attacks:  user 
is 
manipulated  to  insert  a  maliciously  constructed 
executable  command  into  the  program.  The  most 
common case of this attack, SQL injection, happens 
when user input is used in some way to construct an 
SQL query for the database backend. If this input is 