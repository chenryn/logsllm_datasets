# 前言
本文分为通读部分 和 漏洞部分 通读部分个人感觉写的还不怎么完善,师傅们见谅，可以直接跳到后面的漏洞部分看：）
# 通读部分
## 序
这是一个简单的MVC架构的CMS，开发者使用了他自己开发的一套框架—FrPHP
  * 大致目录结构
A：存放后台的控制器 模板 插件等
Home：同上，存放的用户相关的控制器和模板文件
Conf：配置文件目录
Frphp MVC框架目录
其他的要么里面没啥，要么一看就知道的
## Index.php
定义了一些常量然后包含了 FrPHP框架中的Fr.php 跟进
可见其定义了一个FrPHP类（25行）然后包含了 config.php
我们继续跟进看看config.php里面有什么 数据库连接的配置文件（这边是我安装完之后的源码）
我们继续回到刚才的FrPHP类 看看构造函数
又是定义了一堆常量。这边大多数常量都能看名字知道个大概。我们用动态调试跑一下看看常量具体值。
具体就是这些
这边59-71行(Fr.php)对一些文件进行了包含。我们继续跟进。
/common/Functions.php
这里引入了FrPHP框架的公共函数库
/CONF/Functions.php
这边引入了项目的公共函数库(主要是一些CMS功能上的函数)
然后遍历/Extend 扩展目录 如果存在文件名称含有”.php“的文件 就包含它。
Arraypage / page 主要是和内容分页相关的函数
compressimage主要和图片处理有关的函数
DatabaseTool 主要和数据库操作有关
DB_API也差不多
FrSession 重写了session 把session存到了redis中
pinyin 是汉字转拼音的
vercode是验证码相关的
还有二维码，phpmailer 阿里，微信支付等杂七杂八的
然后检测缓存文件夹是否存在 不存在就创建
这边 FrPHP的构造函数部分就结束了 然后回到它的RUN方法
90行设置数据库配置
此处没有数据就会给出报错，引导进入安装程序。
这边说到安装就顺便插播下安装这边
开头检测lock文件 否则exit() ，那这边就没有重装漏洞了
这边通过act参数来确定安装步骤
值得注意的是act为testdb这边 是存在sql注入的 不过前提是得找一个任意文件删除的漏洞来把lock文件删掉。。
回到上文
91行检测开发环境
主要是修改报错和cookie的httponly之类的相关配置
92行去除掉字符转义 ，后面作者定义了专门处理接受数据的函数
## 路由分析
94行开始路由
首先判断是否有开启redis存session的功能 ,有就使用。
下面主要是判断请求有没有session_id没有就给客户端设置一个
131-135行
获取指定要访问的页面，这边对url做了个url解码
我们动态调试下看看参数是啥
137行开始从缓存中读取系统配置，没有就去数据库里找（M（’sysconfig’）→findAll()）
我们看写下getCache函数
传入$str 经过 `$s = *md5*(*md5*($str.'frphp'.$str));` 拼接变成缓存的文件名
然后639行拼接路径 640行检测缓存文件是否存在
643-646检测文件时间 获取缓存内容 之后判断缓存时间是否超时 超时就删掉 不超时就返回
回到上文路由处理，首先会从缓存中获取配置
没获取到缓存文件就从数据库中找 找到后设置缓存。 获取到了就从缓存中读取。
然后判断是否设置了wap 为1 默认为0
然后对$url（$_SERVERS['REQUEST_URI']）进行替换 路由到wap页面
继续往下走
这边开始引入自定义路由 先设置了个route_ok变量为false
这边先判断 open_url_route是否为真 这个常量是一开始构造函数中获取一大堆常量的的地方获取的
为1
随后包含了Conf/route.php文件将返回值传给$open_url_route 我们跟进去看看，返回了路由匹配规则这边配合注释看
    return [
        /**
            ['正则url','系统内真实链接','传输方式POST/GET,或者为空,则表示POST/GET都接收']
            如果有多条匹配，默认第一条有效
            demo：
            ['/\/base\/([0-9]+)\.html$/','Home/test/id/$1','GET'],
            ['/\/xbase\/([0-9]+)\/(\w+)\.html$/','Home/test/id/$1/sq/$2','POST'],
            ['/\/test_([0-9]+)\.html$/','Home/test/id/$1','GET'],
            ['/\/abc\.html$/','/shangpin.html',''],
        **/
        //以下规则不可删除，否则会报错！
        //http://demo.xxxxcms.cn/Home/screen/molds/product/categories/3
        ['/^\/screen-(\w+)-([0-9]+)-(.*)/','Screen/index/molds/$1/tid/$2/jz_screen/$3',''],
        ['/^\/searchAll(.*)/','Home/searchAll','GET'],
        ['/^\/search(.*)/','Home/search','GET'],
    ];
然后遍历$open_url_route 进行匹配
如果$url($SERVERS['REQUEST_URI'])匹配到了数组中的第一个项目中的正则 就把结果返回到$matches变量里面
然后将$url变量置为数组中的第二项（即系统内的真实连接）$method变量赋值为数组中的第三项（即传输方式）如果匹配到了之前$open_url_route
返回的三个数组中的任意一个 那么$route_ok将会变为真 然后退出循环
我们看下变量情况
随后如果匹配到了 就会对$url变量中的$1 $2 等进行替换。
不过我们正常访问时是没有触发上述匹配规则的 暂时不看 我们继续往下走
第18行
    $position = strpos($url,'?');
                if($position!==false){
                    $param = substr($url,$position+1);
                    parse_str($param,$_GET);
                }
这边显然是对请求url进行分割获取?后面的内容 是一个提取参数的过程 然后用 _`parse_str`_
函数把查询到的字符串解析到变量数组$_GET里面
然后继续往下走 程序开始去除二级目录 过滤$url字符 将过滤后的$URL 定义到常量里面
设置默认的控制器（HOME） 和方法（jizhi） 获取模板 并加入常量
我们跟进看看format_param.这边很显然 通过传入值 和过滤类型来对字符串进行指定过滤，过滤其实还是蛮严格的
    function format_param($value=null,$int=0,$default=false){
        if($value==null){ return '';}
        if($value===false && $default!==false){ return $default;}
        switch ($int){
            case 0://整数
                return (int)$value;
            case 1://字符串
                $value = SafeFilter($value);
                $value=htmlspecialchars(trim($value), ENT_QUOTES);
                if(version_compare(PHP_VERSION,'7.4','>=')){
                    $value = addslashes($value);
                }else{
                    if(!get_magic_quotes_gpc())$value = addslashes($value);
                }
                return $value;
            case 2://数组
                if($value=='')return '';
                array_walk_recursive($value, "array_format");
                return $value;
            case 3://浮点
                return (float)$value;
            case 4:
                if(version_compare(PHP_VERSION,'7.4','>=')){
                    $value = addslashes($value);
                }else{
                    if(!get_magic_quotes_gpc())$value = addslashes($value);
                }
                return trim($value);
        }
    }
其中传入1时还会再进行个SafeFilter
跟进查看
这边显然是对xss和xml非法字符的过滤 字符串若被匹配到 就会替换为空。可以双写绕过
    //过滤XSS攻击
    function SafeFilter($arr)    
       $ra=Array('/([\x00-\x08])/','/([\x0b-\x0c])/','/([\x0e-\x19])/','/script(.*)script/','/javascript(.*)javascript/');
       $arr = preg_replace($ra,'',$arr);   
       return $arr;
继续回到路由那边，我们进入get_template()看看
首先获取网站配置 然后检测是否安装插件（ _`if_ ($webconf['isopenwebsite'])`）
随后判断是否是手机版 不是就返回（`$webconf['pc_template'];`）默认为 default
回到路由
获取到模板后将其设为常量
后面的内容作者也有许多注解,主要是对url做一些字符串处理，提取出其中的相关内容（要访问的控制器，访问的方法名之类的）
这边将从url中提取到的控制器名 方法名存入到$controllerName $actionName变量之中
继续往后看 作者这边注释的是判断插件中是否有对应的控制器和方法
通过 252行 将路径拼接 然后检测是否存在相应的类 和方法（253行）
如果不存在就从系统默认的控制器里面找（257行往后），如果还找不到就设置为默认的控制器和默认方法
随后将控制器名 方法名 放到常量里面
随后将get post 来的参数传到$param变量中
随后从数据库中调取 hookconfig
(如果有配置的话)如果有就实例化config中对应的类调用类方法并传入$param参数，用于外部参数传入控制器前进行对$param的自定义修改。
随后实例化要调用的的控制器类 调用类方法 传入$param（存放着GET POST获得的数据）变量
这边实例化类时传入了$param 调用类方法的时候也传入了$param
**我们先看实例化的类 每个控制器的父类Controller**
构造函数接受一个参数$param （之前实例化控制器类时传入了$param变量 用在此处）
把$param传给类 _data的属性
_data 这个变量会在 frparam()方法中调用（commonControler），该方法也是后面各个控制器中获取过滤后数据的方式。
frparam方法 如果不传值 那么将会返回原始数据（69行）
如果传值那么数据最终将进入format_param方法，前文也提到过，经过此方法会对数据进行安全过滤。
接着我们看另一个传参方式，直接把未经过过滤的参数$param丢到类方法里去了
    $dispatch->$actionName($param);
所以这边理论上只要找到控制器里有接收参数的方法函数能传入不安全的数据。
至此，路由过程结束。
## 控制器
控制器的结构大概为
Controller 父控制器—>(继承) commonControler(二级控制器，主要用于鉴权的)—>(继承) AdminController
...... 各种功能控制器
### Controller