### 4.2 and 4.4 Sample Data

**Sample (a) Continuously Click in Different Keys:**
- **CSI Values (x 10^4):** 5.6, 6, 5.8, 6.2, 7.3, 7.4, 7.5, 7.6, 7.7
- **Time Samples:** 1, 2, 3, 4, 5, 6, 7, 8

**Sample (b) Continuously Click in the Same Key:**
- **CSI Values (x 10^4):** 4.2, 4.4, 5.6, 5.8, 6.2, 7.3, 7.4, 7.5, 7.6, 7.7
- **Time Samples:** 1, 2, 3, 4, 5, 6, 7, 8

### Figure 3: CSI Change When Typing

The PIN entry generates a unique pattern in the time-series of CSI values, which can be used for keystroke inference. Our experiments revealed that two main factors contribute to CSI changes: hand coverage and finger click.

**Hand Coverage and Finger Position:**
- Hand coverage and finger position on a smartphone touchscreen are major factors causing fluctuations in the CSI waveform.
- Finger position and coverage directly impact the calling quality. Similarly, the time series of CSI waveforms reflect the interference of multiple path signals. Different finger positions and coverages introduce interference to WiFi signals, leading to changes in CSI values.
- This is demonstrated in Fig. 3(b), which shows a CSI stream when continuously pressing different numbers from 1 to 9, followed by 0, each for 5 times. The different coverages result in different fluctuation ranges of CSI values, which can be exploited for key inference.

**Finger Click:**
- Finger click is another important factor contributing to CSI fluctuations.
- Compared to hand coverage, finger clicks have a more direct influence on CSI, introducing a sharp convex in Fig. 3(a). This corresponds to the quick click's influence on multi-path propagation.
- This feature can be used to distinguish oblique touches when the user continuously presses the same or adjacent keys, which produce similar CSI values.

### 4. THE DESIGN OF WINDTALKER

#### 4.1 System Overview

WindTalker employs a dual-strategy approach:
1. It analyzes WiFi traffic to identify sensitive attack windows (e.g., PIN number) on smartphones.
2. Once an attack window is identified, WindTalker initiates CSI-based keystroke recognition.

**System Modules:**
- **Sensitive Input Window Recognition Module:** Distinguishes sensitive input time windows.
- **ICMP Based CSI Acquisition Module:** Collects userâ€™s CSI data during WiFi hotspot access.
- **Data Preprocessing Module:** Removes noise and reduces dimensionality of CSI data.
- **Keystroke Extraction Module:** Determines the start and end points of keystroke waveforms.
- **Keystroke Inference Module:** Compares different keystroke waveforms to determine the corresponding keystrokes.

**Framework:**
- **Directional Antenna**
- **Internet Control Message Protocol (ICMP)**
- **CSI Noise Removal**
- **Dimension Reduction**
- **Connected Victim**
- **WiFi Packets Analysis**
- **Sensitive Input**
- **Keystroke Extraction**
- **Keystroke Recognition**
- **Output**

#### 4.2 Sensitive Input Window Recognition Module

To distinguish between sensitive and insensitive input time windows, WindTalker captures all packets of the victim using Wireshark and records the timestamp of each CSI data. Although HTTPS provides end-to-end encryption, it does not protect metadata such as the IP address of the destination server, which can be used to recognize sensitive input windows.

**Sensitive IP Pool:**
- WindTalker builds a Sensitive IP Pool for interested applications or services. For example, during the Alipay payment process, it directs to a limited number of IP addresses, which can be obtained through trials.
- Experiments show that under the same network, users' traffic will be directed to the same server IP for a period (e.g., several days).
- During the attack, if traffic to the Sensitive IP Pool is observed, WindTalker records the start and end times, marking the Sensitive Input Window. It then analyzes the CSI data in this period to launch the password inference attack via WiFi signals.

#### 4.3 ICMP Based CSI Acquisition Module

##### 4.3.1 Collecting CSI Data by Enforcing ICMP Reply

Unlike previous methods that require both sender and receiver devices, WindTalker uses Internet Control Message Protocol (ICMP) in hotspots to collect CSI data. WindTalker periodically sends ICMP Echo Requests to the victim's smartphone, which replies with Echo Replies. To acquire sufficient CSI information, WindTalker sends ICMP Echo Requests at a high frequency, enforcing the victim to reply at the same frequency. This approach works well for several smartphones at a rate of 800 packets per second without requiring any permission and is difficult to detect.

**Traffic Impact:**
- Sending 800 ICMP packets per second (each 98 bytes) requires only 78.4 kB/s, while 802.11n supports up to 140 Mbits per second. This makes little interference with the victim's WiFi experience.

##### 4.3.2 Reducing Noise via Directional Antenna

CSI is influenced by finger movement and body movement. To minimize interference from nearby humans, WindTalker uses a directional antenna. Unlike omnidirectional antennas, directional antennas have different gains in each direction, allowing the signal level to be adjusted by rotating the antenna. WindTalker employs a TDJ-2400BKC antenna operating at 2.4GHz, with specific beamwidths to focus energy on the target.

**Performance Comparison:**
- Fig. 5 compares CSI collection with and without a directional antenna in public places. Unique patterns caused by finger clicks are easily caught with a directional antenna but are submerged in human body influence with an omnidirectional antenna, even at close distances.

#### 4.4 Data Preprocessing Module

Before launching the keystroke inference module, WindTalker preprocesses the CSI data to remove noise introduced by frequent changes in internal CSI reference levels, transmit power levels, and transmission rates.

##### 4.4.1 Low Pass Filtering

Low pass filtering removes high-frequency noise while preserving low-frequency variations caused by finger motion. WindTalker uses a Butterworth low-pass filter, which has a flat frequency response in the passband. The frequencies of CSI variations due to hand and finger movements lie between 2 Hz and 30 Hz. With a sampling rate of 800 packets/s, WindTalker sets parameters to choose a proper filter with a transition band ranging from 30Hz to 80Hz.

**Filter Parameters:**
- Passband corner frequency: \( W_p \approx 0.075 \pi \) rads/sample
- Stopband corner frequency: \( W_s = 0.2 \pi \) rads/sample
- Passband ripple: 1 dB
- Stopband attenuation: 40 dB

After low-pass filtering, most burst noises are removed.

##### 4.4.2 Dimension Reduction

Dimension reduction is essential for keystroke inference via CSI information. For a system using Intel 5300 NICs with \( N_{TX} \) transmitter antennas and \( N_{RX} \) receiver antennas, it collects \( N_{TX} \times N_{RX} \times 30 \) CSI streams. WindTalker uses Principal Component Analysis (PCA) to reduce dimensionality and identify the most representative components.

**PCA Steps:**
1. **Sample Centralization:** Calculate the mean value of each column in the original CSI stream matrix \( H \) and subtract the mean values.
2. **Covariance Matrix Calculation:** Compute the correlation matrix of the centralized matrix \( H_p \).
3. **Eigenvalues and Eigenvectors Calculation:** Compute the Eigenvalues and Eigenvectors of the covariance matrix. Normalize the Eigenvectors to unit vectors.
4. **Choosing Main Eigenvalues:** Sort the Eigenvalues and select the top \( k \) Eigenvalues. Form a matrix with the corresponding Eigenvectors.
5. **Data Reconstruction:** Project \( H_p \) onto the selected Eigenvector matrix to get the reconstructed CSI data stream \( H_r \).

In experiments, the first \( k = 4 \) components show the most significant changes in CSI streams, and the rest are considered noise. Only the first PCA component is used in the password inference module, as it retains most of the CSI changes while minimizing ambient noise.

#### 4.5 Keystroke Inference Module

##### 4.5.1 Keystroke Extraction

After low-pass filtering and dimension reduction, the CSI data shows a strong correlation with keystrokes. In experiments, the sharp rise in CSI values corresponds to keystrokes. Anchor points are used to mark these changes, and the extracted features are used for keystroke inference.