Partial: A request may have a Range ﬁeld that speciﬁes the
parts of a PDF ﬁle the client wants (e.g., only request the ﬁrst
200 bytes of a ﬁle). The PDFs carried by the HTTP response
of which status code is “206 Partial Content” is “partial PDF”.
The PDFs in this category will not pass the semantic check
because they are only parts of the original PDFs.
• Other: All PDFs that are not in the aforementioned three
categories. The PDFs in this category do not pass the
semantic check.
Request
GET long
GET non-existing
HEAD existing
OPTIONS common
DELETE existing
TEST method
GET wrong protocol
None
3
2
2
3
3
4
24
200
3xx
12  0, deﬁne
B = (cid:98)L/k(cid:99), and write X = S0 || S1 || ··· || SB−1, where each
block Si is length k bytes (or possibly less for SB−1). We will
treat the sequence H(S0), H(S1), . . . , H(SB−1) as B samples
from some unknown distribution Dk over entropy values. The
second distribution we consider is the distribution of entropy values
as H(X) = −(cid:80)255
62when the underlying strings are uniformly random. We denote
this distribution by ˜Dk, and a method for calculating ˜Dk is given
in [47]. As shown,
the distributions under consideration are
parameterized by the block size k, whose value we will address
later.
For our entropy-distribution test, we compute the two-sample
KS-test3 for H(S0), H(S1), . . . , H(SB−1) and an equal-length
sequence of samples from ˜Dk, and observe the p-value of the
test. If the p-value is smaller than our chosen signiﬁcance-level of
α = 0.1, then the null hypothesis that Dk = ˜Dk is rejected, and we
conclude that the bytes are not uniformly distributed. Otherwise,
the test does not provide statistically signiﬁcant evidence for
rejecting the null hypothesis, and we conclude that the bytes are
uniformly distributed.4 Our choice of α = 0.1 was based on it
being commonly used as a less restrictive (than 0.5) signiﬁcance
level in hypothesis testing in other settings. Higher α would label
ﬂows as uniform less often, lower α the opposite. Looking ahead,
our experiments show that many choices of α around 0.1 would
achieve the same obfuscator detection accuracy.
5.1 Detecting Obfsproxy
(Our tests currently make no effort
We start by showing how to use the entropy-distribution test to
detect that a network ﬂow corresponds to one of the two obfsproxy
methods.
to distinguish
between obfsproxy3 and obfsproxy4.) As discussed above, we
will make use of the observation that randomizers like obfsproxy3
and obfsproxy4 encrypt all bytes in the ﬁrst message of a ﬂow.
Conventional encryption protocols such as TLS and SSH do not:
they have ﬁxed plaintext headers. We therefore apply the entropy-
distribution test to the ﬁrst 2,048 bytes of the ﬁrst client-to-server
packet’s application-layer contents.
If the length of a ﬁrst-seen
content is less than 2,048 bytes, we will just test on all the bytes
of the content. If the entropy-distribution test applied to these bytes
indicates that they are uniformly distributed we ﬂag the ﬂow as
obfsproxy.
First, based on the protocol speciﬁcations, the minimum payload
length for obfsproxy3 is 193 bytes. For obfsproxy4 it is 149 bytes.
Thus, we will check payload lengths for the ﬁrst packet and require
that the length be at least 149 bytes to be labeled as obfuscated. We
will couple this check with an entropy-based test.
We experiment with the entropy distribution test described above
for block sizes k ∈ {4, 8, 16, 32, 64}. We also considered two
kinds of alternative tests. First is the byte uniformity test, in
which we use a KS test with null hypothesis that the payload
byte values are uniformly distributed (which is different than the
entropy distribution test described above, where the null hypothesis
is that the distribution of entropy values match closely those that
one would get form a uniform distribution). We also consider
the truncated sequential probability ratio test (SPRT) from [47]
applied to payload byte values. This was used by [47] to detect
“opaque” trafﬁc (encrypted or compressed), and was shown to be
more powerful than the (plain) entropy-test in their setting. Please
see [47] for details of that test. We consider it for block sizes
of 8, 16, and 32 bytes. This gives us a total of nine tests, the
entropy distribution test with the ﬁve distinct block sizes, the byte
uniformity test, and the SPRT tests with three different block sizes.
In all cases we apply the payload length checks mentioned already.