title:Defending DSSS-based broadcast communication against insider jammers
via delayed seed-disclosure
author:An Liu and
Peng Ning and
Huaiyu Dai and
Yao Liu and
Cliff Wang
See discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/221046451
Defending DSSS-based Broadcast Communication against Insider Jammers via
Delayed Seed-Disclosure
Conference Paper · January 2010
DOI: 10.1145/1920261.1920315 · Source: DBLP
CITATIONS
33
5 authors, including:
Peng Ning
North Carolina State University
186 PUBLICATIONS   17,819 CITATIONS   
SEE PROFILE
Yao Liu
University of South Florida
13 PUBLICATIONS   3,347 CITATIONS   
SEE PROFILE
READS
221
Huaiyu Dai
North Carolina State University
250 PUBLICATIONS   3,745 CITATIONS   
SEE PROFILE
Cliff Wang
North Carolina State University
54 PUBLICATIONS   1,840 CITATIONS   
SEE PROFILE
All content following this page was uploaded by Cliff Wang on 08 December 2014.
The user has requested enhancement of the downloaded file.
Defending DSSS-based Broadcast Communication against
Insider Jammers via Delayed Seed-Disclosure∗
An Liu, Peng Ning, Huaiyu Dai, Yao Liu
North Carolina State University
{aliu3, pning, huaiyu_dai, yliu20}@ncsu.edu
Cliff Wang
U.S. Army Research Ofﬁce
PI:EMAIL
ABSTRACT
Spread spectrum techniques such as Direct Sequence Spread Spec-
trum (DSSS) and Frequency Hopping (FH) have been commonly
used for anti-jamming wireless communication. However, tradi-
tional spread spectrum techniques require that sender and receivers
share a common secret in order to agree upon, for example, a com-
mon hopping sequence (in FH) or a common spreading code se-
quence (in DSSS). Such a requirement prevents these techniques
from being effective for anti-jamming broadcast communication,
where a jammer may learn the key from a compromised receiver
and then disrupt the wireless communication. In this paper, we de-
velop a novel Delayed Seed-Disclosure DSSS (DSD-DSSS) scheme
for efﬁcient anti-jamming broadcast communication. DSD-DSSS
achieves its anti-jamming capability through randomly generating
the spreading code sequence for each message using a random
seed and delaying the disclosure of the seed at the end of the mes-
sage. We also develop an effective protection mechanism for seed
disclosure using content-based code subset selection. DSD-DSSS
is superior to all previous attempts for anti-jamming spread spec-
trum broadcast communication without shared keys. In particular,
even if a jammer possesses real-time online analysis capability to
launch reactive jamming attacks, DSD-DSSS can still defeat the
jamming attacks with a very high probability. We evaluate DSD-
DSSS through both theoretical analysis and a prototype implemen-
tation based on GNU Radio; our evaluation results demonstrate that
DSD-DSSS is practical and have superior security properties.
1.
INTRODUCTION
Spread spectrum wireless communication techniques, including
Direct Sequence Spread Spectrum (DSSS) and Frequency Hopping
(FH), have been commonly used for anti-jamming wireless com-
munication [6]. However, with traditional spread spectrum tech-
niques, it is necessary for senders and receivers to share a secret key
∗This work is supported by the National Science Foundation un-
der grants CNS-1016260 and CAREER-0447761, and by the Army
Research Ofﬁce under staff research grant W911NF-04-D-0003.
The contents of this paper do not necessarily reﬂect the position
or the policies of the U.S. Government.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
to determine, for example, the frequency hopping patterns in FH
and the Pseudo-Noise (PN) codes in DSSS. Otherwise, sender and
receivers cannot establish anti-jamming communication. More-
over, if a jammer knows the secret key, she can replicate the secret
hopping pattern or PN codes and jam the wireless communication.
The above limitations of traditional anti-jamming techniques have
motivated a series of recent research. To remove the dependency
on pre-shared keys, an Uncoordinated Frequency Hopping (UFH)
technique was recently developed to allow two nodes to establish
a common secret for future FH communication in presence of a
jammer [19]. This approach was latter enhanced in [18, 20] with
various coding techniques to provide more efﬁciency and robust-
ness during key establishment.
Besides UFH and its variations [18–20], two other approaches
were recently investigated to enable jamming-resistant broadcast
communication without shared keys [2, 15]. BBC was proposed to
achieve broadcast communication by encoding data into “indelible
marks” (e.g., short pulses) placed in “locations” (e.g., time slots),
which can be decoded by any receiver [2, 3]. However, the decod-
ing process in BBC is inherently sequential (i.e., the decoding of
the next bit depends on the decoded values of the previous bits).
Though it works with short pulses in the time domain, the method
cannot be extended to DSSS or FH without signiﬁcantly increasing
the decoding cost.
An Uncoordinated DSSS (UDSSS) approach was recently de-
veloped [15], which avoids jamming by randomly selecting the
spreading code sequence for each message from a public pool of
code sequences. UDSSS allows a receiver to quickly identify the
right code sequence by having each code sequence uniquely iden-
tiﬁed by the ﬁrst few codes. However, if the jammer has enough
computational power, using the same property, she can ﬁnd the cor-
rect sequence before the sender ﬁnishes the transmission and jam
the remaining transmission. Thus, UDSSS is vulnerable to reac-
tive jamming attacks, where the jammer can analyze the ﬁrst part
of transmitted signal and jam the rest accordingly. To mitigate such
attacks, a solution similar to ours was proposed in [14]. The ba-
sic idea is to spread each message using a key and transmit the key
later using UDSSS. To mitigate the reactive jamming attack against
the key transmission, UDSSS can trade the resilience for efﬁciency
by setting a larger spreading code sequence set size. On the con-
trary, our paper tries to provide an alternative solution achieving
both resilience and efﬁciency.
In this paper, we develop Delayed Seed-Disclosure DSSS (DSD-
DSSS), which provides efﬁcient and robust anti-jamming broadcast
communication without suffering from reactive jamming attacks.
The basic idea is two-fold: First, the code sequence used to spread
each message is randomly generated based on a random seed only
known to the sender. Second, the sender discloses the random seed
at the end of the message, after the message body has been trans-
mitted. A receiver buffers the received message; it can decode the
random seed and regenerate the spreading code using the seed to
despread the buffered message. A jammer may certainly try the
same. However, when the jammer recovers the random seed and
spreading code sequence, all reachable receivers have already re-
ceived the message; it is too late for the jammer to do any damage.
We also develop a content-based code subset selection scheme to
protect the random seed disclosure. We use the content of the seed
to give some advantage to normal receivers over reactive jammers.
This scheme allows a normal receiver, who starts decoding a mes-
sage after fully receiving the message, to quickly decode the ran-
dom seed. In contrast, a jammer, who needs to disrupt the message
while it is being transmitted, has to consider many more choices.
Our contribution in this paper is as follows. First, we develop the
novel DSD-DSSS scheme to provide efﬁcient anti-jamming broad-
cast communication without shared keys. Our approach is superior
to all previous solutions. Second, we develop a content-based code
subset selection method to provide effective protection of seed dis-
closure in DSD-DSSS. Third, we give in-depth performance and
security analysis for these techniques in presence of various forms
of jammers, including reactive jammers that possess real-time on-
line analysis capabilities. Our analysis demonstrates that our ap-
proach provides effective defense against jamming attacks. Finally,
we implement a prototype of DSD-DSSS using USRPs and GNU
Radio to demonstrate its feasibility.
The remainder of the paper is organized as follows. Section 2
describes background information about DSSS. Section 3 presents
our assumptions and the threat model. Section 4 proposes DSD-
DSSS and analyzes its anti-jamming capability and performance
overheads. Section 5 gives the content-based code subset selection
scheme and analyzes its effectiveness. Section 6 shows the imple-
mentation and experimental evaluation of DSD-DSSS. Section 7
describes related work, and Section 8 concludes this paper.
2. BACKGROUND
Spread spectrum techniques, including DSSS and FH, use a much
larger bandwidth than necessary for communications [6, 16]. Such
bandwidth expansion is realized through a spreading code inde-
pendent of the data sequence.
In DSSS, each data bit is spread
(multiplied) by a wide-band code sequence (i.e., the chipping se-
quence). The spreading code is typically pseudo-random, com-
monly referred to as Pseudo-Noise (PN) code, rendering the trans-
mitted signal noise-like to all except for the intended receivers,
which possess the code to despread the signal and recover the in-
formation.
Figure 1 shows the typical steps in DSSS communication. Given
a message to be transmitted, typically encoded with Error Correc-
tion Code (ECC), the sender ﬁrst spreads the message by multi-
plying it with a spreading code. Each bit in the message is then
converted to a sequence of chips1 according to the spreading code.
The result is modulated, up-converted to the carrier frequency, and
launched on the channel. At the receiver, the distorted signal is
ﬁrst down-converted to baseband, demodulated through a matched
ﬁlter, and then despread by a synchronized copy of the spreading
code. The synchronization includes both bit time synchronization
and chip time synchronization, guaranteeing that receivers know
when to apply which spreading code in order to get the original
data. Alternatively, a DSSS system may modulate the signal be-
1To distinguish between bits in the original message and those in
the spread result, following the convention of spread spectrum com-
munication, we call the “shorter bits” in the spread result as chips.
sender
message
receiver
message
Spreading Code
Spreading Code
Modulator
Carrier 
Frequency
channel
Synchronization
Demodulator
Carrier 
Frequency
Figure 1: DSSS communication system
fore the spreading step at sender, and despread and demodulate the
received signal at receiver.
The performance of DSSS communication depends on the de-
sign of spreading codes. A spreading code c(t) typically consists of
a sequence of l chips c1, c2, ..., cl, each with value 1 or −1 and du-
ration of Tc, where l is the code length and Tc is chip duration. As-
sume the bit duration is Tb. The number of chips per bit l = Tb/Tc
approximates the bandwidth expansion factor and the processing
gain. Two functions characterize spread code: auto-correlation
and cross-correlation. Auto-correlation describes the similarity be-
tween a code and its shifted value. Good auto-correlation property
means the similarity between a code and its shifted value is low;
it is desired for multi-path rejection and synchronization. Cross-
correlation of two spreading codes describes the similarity between
these two codes; low cross-correlation is desired for multiuser com-
munications.
3. ASSUMPTIONS AND THREAT MODEL
In this paper, we consider the protection of DSSS-based wireless
broadcast communication against jamming attacks (i.e., one sender
and multiple receivers). We adopt the same DSSS communication
framework as illustrated in Figure 1. However, the sender and re-
ceivers use different strategies to decide what spreading codes to
use during broadcast communication. That is, our approach cus-
tomizes the generation and selection of spreading codes during
DSSS communication to defend against insider jamming attacks.
We assume that the jammers’ transmission power is bounded.
In other words, a jammer cannot jam the transmission of a mes-
sage unless she knows the spreading codes used for sending the
message. For simplicity, we assume the length of each broadcast
message is ﬁxed. Such an assumption can be easily removed, for
example, by using a message length ﬁeld.
Threat Model: We assume that the attacker may compromise
some receivers, and as a result, can exploit any secret they possess
to jam the communication from the sender to the other receivers.
We assume intelligent jammers that are aware of our schemes. In
addition to injecting random noises, the jammer may also modify
or inject meaningful messages to disrupt the broadcast communi-
cation.
The jammers may possess high computational capability to per-
form real-time online analysis of intercepted signal. However, due
to the nature of DSSS communication (i.e., each bit data is trans-
mitted through a sequence of pseudo-random chips), it takes time
for a jammer to parse the chips for any 1-bit data to determine
the spreading code. When the jammer receives enough chips for a
given bit to guess the spreading code with a high probability, most
of the chips have already been transmitted. Jamming the remaining
chips will not have high impact on the reception of this bit. Thus,
we assume that if a jammer does not know the spreading code for
any 1-bit data, she cannot jam its transmission based on real-time
message mi
pseudo-random 
generator
random seed si
random indexes:
sid1||sid2||…||sidls
random indexes: 
mid1||mid2||…||midlm
draw codes from Cp
draw codes from Ce
code sequence csm for mi: 
Cp[mid1]||Cp[mid2]||…||Cp[midlm]
code sequence cse for si:
Ce[sid1]||Ce[sid2]||…||Ce[sidls]
sender
receiver
buffer:
S
S
S(csm,mi)
S(cse,si)
sliding window
with Ce
S(csm,mi)
sliding window
with Ce
S(cse,si)
pseudo-random 
generator
si
D
synchronized
i
w
o
d
n
w
g
n
d
i
i
l
s
t
f
i
h
s
mid1||mid2||…||midlm
Ce
D
draw codes from Cp
code sequence csm for mi: 
Fail
Cp[mid1]||Cp[mid2]||…||Cp[midm]
Fail
message mi
check error detection code
Fail
send to upper layer