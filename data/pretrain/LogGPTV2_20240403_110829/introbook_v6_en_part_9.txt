-[ RECORD 4 ]--------------------------------------
name | Anna
details | { "status": "expelled" +
| }
126 Supposeweareinterestedinentriesthatholdinformation
ix aboutstudents’merits.Wecanaccessthevaluesofthe“mer-
its”keyusingaspecialoperator->>:
test=# SELECT s.name, sd.details
FROM student_details sd, students s
WHERE s.s_id = sd.s_id
AND sd.details ->> 'merits' IS NOT NULL \gx
-[ RECORD 1 ]--------------------------------------
name | Anna
details | { "merits": "none", +
| "flaws": +
| "immoderate ice cream consumption" +
| }
-[ RECORD 2 ]--------------------------------------
name | Nina
details | { "hobbies": "cosplay", +
| "merits": +
| { "mother-of-five": +
| { "Basil": "m", +
| "Simon": "m", +
| "Lucie": "f", +
| "Mark": "m", +
| "Alex": "unknown" +
| } +
| } +
| }
WecanseethatthetwoentriesarerelatedtomeritsofAnna
andNina,butsucharesultisunlikelytosatisfyusasAnna’s
meritsareactually“none.”Let’smodifythequery:
test=# SELECT s.name, sd.details
FROM student_details sd, students s
WHERE s.s_id = sd.s_id
AND sd.details ->> 'merits' IS NOT NULL
AND sd.details ->> 'merits' != 'none';
MakesurethatthisqueryonlyreturnsNina,whosemeritsare
real.
However,thismethoddoesnotalwayswork.Let’strytofind 127
outwhichguitarsourmusicianVictorplays: ix
test=# SELECT sd.de_id, s.name, sd.details
FROM student_details sd, students s
WHERE s.s_id = sd.s_id
AND sd.details ->> 'guitars' IS NOT NULL \gx
Thisquerywon’treturnanything.It’sbecausethecorrespond-
ingkey-valuepairislocatedinsidetheJSONhierarchy,nested
intothepairsofahigherlevel:
name | Victor
details | { "hobbies": +
| { "guitarist": +
| { "band": "Postgressors", +
| "guitars":["Strat","Telec"] +
| } +
| } +
| }
Togettoguitars,let’susethe#>operatorandgodownthe
hierarchy,startingwith“hobbies”:
test=# SELECT sd.de_id, s.name,
sd.details #> 'hobbies,guitarist,guitars'
FROM student_details sd, students s
WHERE s.s_id = sd.s_id
AND sd.details #> 'hobbies,guitarist,guitars'
IS NOT NULL \gx
WecanseethatVictorisafanofFender:
de_id | name | ?column?
-------+--------+-------------------
| Victor | ["Strat","Telec"]
128 Thejsontypehasayoungerbrother: jsonb. Theletter“b”
ix impliesthebinary(andnottext)formatofdatastorage.Such
datacanbecompacted,whichenablesfastersearch.Nowa-
days,jsonbisusedmuchmoreoftenthanjson.
test=# ALTER TABLE student_details
ADD details_b jsonb;
test=# UPDATE student_details
SET details_b = to_jsonb(details);
test=# SELECT de_id, details_b
FROM student_details \gx
-[ RECORD 1 ]--------------------------------------
de_id | 1
details_b | {"flaws": "immoderate ice cream
consumption", "merits": "none"}
-[ RECORD 2 ]--------------------------------------
de_id | 2
details_b | {"hobbies": {"guitarist": {"guitars":
["Strat", "Telec"], "band":
"Postgressors"}}}
-[ RECORD 3 ]--------------------------------------
de_id | 3
details_b | {"hobbies": "cosplay", "merits":
{"mother-of-five": {"Basil": "m",
"Lucie": "f", "Alex": "unknown",
"Mark": "m", "Simon": "m"}}}
-[ RECORD 4 ]--------------------------------------
de_id | 4
details_b | {"status": "expelled"}
Wecannoticethatapartfromadifferentnotation,theorder
ofvaluesinthepairshaschanged:Alex,onwhomthereisno
information,asweremember,isnowdisplayedbeforeMark.
It’snotadisadvantageof jsonbascomparedtojson, it’s
simplyitsdatastoragespecifics.
Thejsonbtypeissupportedbyalargernumberofoperators. 129
A most useful one is the “contains” operator @>. It works ix
similartothe#>operatorforjson.
Forexample,let’sfindtheentrythatmentionsLucie,amoth-
er-of-five’sdaughter:
test=# SELECT s.name,
jsonb_pretty(sd.details_b) json
FROM student_details sd, students s
WHERE s.s_id = sd.s_id
AND sd.details_b @>
'{"merits":{"mother-of-five":{}}}' \gx
-[ RECORD 1 ]-------------------------------------
name | Nina
json | { +
| "merits": { +
| "mother-of-five": { +
| "Alex": "unknown", +
| "Mark": "m", +
| "Basil": "m", +
| "Lucie": "f", +
| "Simon": "m" +
| } +
| }, +
| "hobbies": "cosplay" +
| }
Wehaveusedthejsonb_pretty()function,whichformats
theoutputofthejsonbtype.
Alternatively,youcanusethejsonb_each()function,which
expandskey-valuepairs:
test=# SELECT s.name,
jsonb_each(sd.details_b)
FROM student_details sd, students s
WHERE s.s_id = sd.s_id
AND sd.details_b @>
'{"merits":{"mother-of-five":{}}}' \gx
130 -[ RECORD 1 ]-------------------------------------
ix name | Nina
jsonb_each | (hobbies,"""cosplay""")
-[ RECORD 2 ]-------------------------------------
name | Nina
jsonb_each | (merits,"{""mother-of-five"":
{""Alex"": ""unknown"", ""Mark"":
""m"", ""Basil"": ""m"", ""Lucie"":
""f"", ""Simon"": ""m""}}")
NotethatthenameofNina’schildisreplacedbyanempty
space{}inthequery.Thissyntaxaddsflexibilitytothepro-
cessofapplicationdevelopment.
Butwhat’smoreimportant,jsonballowsyoutocreatein-
dexesthatsupportthe@>operator,itsinverse’b’->’c’if
weusedregularPostgreSQLoperators.
• $isthecurrentelementtobeparsed(thecontextele-
ment). Theexpressionwith$(thepathexpression)de-
fines the hierarchy to be processed within the context
element.Youcanalsoapplyfilterexpressionstothishi-
erarchy;therestoftheJSONdocumentisignored.
• @representsthecurrentcontextinfilterexpressions.Fil-
terscanbeappliedtoanypartofthepathexpression.
132 • *isawildcardthatselectsallvalueslocatedatthetop
ix leveloftheelementtowhichitisapplied.Itcanbeused
inbothpathandfilterexpressions.
• **isawildcardthatreturnsallvalueswithinthecurrent
element,regardlessoftheirplaceintheJSONhierarchy.It
comesinhandyifyoudon’tknowtheexactnestinglevel
oftheelements.
• The?operatorisusedtocreateafilter,similartoWHERE.
Forexample:$.a.b.c?(@.x>10).
Tofindcosplayenthusiastsusingthejsonb_path_query()
function,youcanwritethefollowingquery:
test=# SELECT s_id, jsonb_path_query(
details::jsonb,
'$.hobbies ? (@ == "cosplay")'
)
FROM student_details;
s_id | jsonb_path_query
------+------------------
1556 | "cosplay"
(1 row)
ThisquerysearchesonlythroughthoseJSONelementsthat
correspondtopathbrancheswiththe“hobbies”key, look-
ingforthevaluethatisequalto“cosplay”.Butifwereplace
“cosplay”with“guitarist”,thequerywon’treturnanyvaluesbe-
causeinourtable“guitarist”isusedasakey,notasavalue
ofthenestedelement.
Thequeriescanusetwohierarchiesinsearch:oneinsidethe
pathexpression,whichdefinesthesearcharea,andtheother
insidethefilterexpression,whichmatchestheresultswith
thespecifiedcondition.Itmeanstherearedifferentwaysto
reachthesamegoal.
Forexample,thequery 133
ix
test=# SELECT s_id, jsonb_path_query(
details::jsonb,
'$.hobbies.guitarist.band?(@=="Postgressors")'
)
FROM student_details;
andthequery
test=# SELECT s_id, jsonb_path_query(
details::jsonb,
'$.hobbies.guitarist?(@.band=="Postgressors").band'
)
FROM student_details;
returnthesameresult:
s_id | jsonb_path_query
------+------------------
1432 | "Postgressors"
(1 row)
Inthefirstexample,weappliedthefilterexpressiontothe
resultofthe“hobbies.guitarist.band”pathevaluation.Ifwe
takealookattheJSONitself,wecanseethatthisbranchhas
onlyonevalue:“Postgressors”.Sotherewasactuallynothing
tofilterout.Inthesecondexample,thefilterisappliedone
stephigher, sowehavetospecifythepathtothe“group”
withinthefilterexpression;otherwise,thefilterwon’tfind
anyvalues.Ifweusesuchsyntax,wehavetoknowtheJSON
hierarchyinadvance. Butwhatifwedon’tknowthehier-
archy?
Inthiscase,wecanusethe**wildcard.Anextremelyuseful
feature! Supposeweforgotwhata“Strat”is:whetherit’sa
high-altitudeballoon,aguitar,oramemberofthehighest
134 socialstratum.Butwehavetofindoutifwehavethiswordin
ix ourtableatall.Previously,itwouldrequireacomplexsearch
throughtheJSONdocument(unlessweconvertedjsonbto
text).Nowyoucansimplyrunthefollowingquery:
test=# SELECT s_id, jsonb_path_exists(
details::jsonb, '$.** ? (@ == "Strat")'
)
FROM student_details;
s_id | jsonb_path_exists
------+-------------------
1451 | f
1432 | t
1556 | f
1451 | f
(4 rows)
YoucanlearnmoreaboutSQL/JSONPathcapabilitiesindoc-
umentation(postgrespro.com/docs/postgresql/12/datatype-
json#DATATYPE-JSONPATH) and in the article “JSONPath in
PostgreSQL:committingpatchesandselectingapartments”
(habr.com/en/company/postgrespro/blog/500440/).
IntegrationwithExternalSystems
Intherealworld,applicationsarenotisolated,andtheyoften
havetosenddatabetweeneachother.Suchinteractioncan
beimplementedattheapplicationlevel,forexample,with
thehelpofwebservicesorfileexchange,oryoucanusethe
databasefunctionalityforthispurpose.
PostgreSQLsupportstheISO/IEC9075-9standard(SQL/MED,
ManagementofExternalData),whichdefinesworkwithex-
ternal data sources from SQL via a special mechanism of
foreigndatawrappers.
The idea is to access external (foreign) data as if it were 135
locatedinregularPostgreSQLtables.Itrequirescreatingfor- ix
eigntables,whichdonotcontainanydatathemselvesand
onlyredirectallqueriestoanexternaldatasource.Thisap-
proachfacilitatesapplicationdevelopmentsinceitallowsto
abstractfromspecificsofaparticularexternalsource.
Creatingaforeigntableinvolvesseveralsequentialsteps.
1. TheCREATEFOREIGNDATAWRAPPERcommandplugsin
alibraryforworkingwithaparticulardatasource.
2. TheCREATESERVERcommanddefinesaforeignserver.
Youshouldusuallyspecifysuchconnectionparameters
ashostname,portnumber,anddatabasename.
3. The CREATE USER MAPPING command provides user-
name mapping since different PostgreSQL users can
connecttooneandthesameforeignsourceonbehalf
ofdifferentexternalusers.
4. TheCREATEFOREIGNTABLEcommandcreatesforeign
tablesforthespecifiedexternaltablesandviews,while
IMPORTFOREIGNSCHEMAallowstoimportdescriptions
ofsomeoralltablesfromtheexternalschema.
Belowwe’lldiscussPostgreSQLintegrationwiththemost
popular databases: Oracle, MySQL, SQL Server, and Post-
greSQL.Butfirstweneedtoinstallthelibrariesrequiredfor
workingwiththesedatabases.
InstallingExtensions
ThePostgreSQLdistributionincludestwoforeigndatawrap-
pers:postgres_fdwandfile_fdw.Thefirstoneisdesigned
136 forworkingwithexternalPostgreSQLdatabases,whilethe
ix secondoneworkswithfilesonaserver.Besides,thecommu-
nitydevelopsandsupportsvariouslibrariesthatprovideac-
cesstomanypopulardatabases.Checkoutpgxn.org/tag/fdw
forthefulllist.
ForeigndatawrappersforOracle,MySQL,andSQLServerare
availableasextensions:
1. Oracle:github.com/laurenz/oracle_fdw
2. MySQL:github.com/EnterpriseDB/mysql_fdw
3. SQLServer:github.com/tds-fdw/tds_fdw
Followtheinstructionsonthesewebpagestobuildandin-
stalltheseextensions,andthisprocesswillrunsmoothly.If
allwentwell,youwillseethecorrespondingforeigndata
wrappersinthelistofavailableextensions.Forexample,for
oracle_fdw:
test=# SELECT name, default_version
FROM pg_available_extensions
WHERE name = 'oracle_fdw' \gx
-[ RECORD 1 ]---+-----------
name | oracle_fdw
default_version | 1.1
Oracle
First,let’screateanextension,whichinitsturnwilladda
foreigndatawrapper:
test=# CREATE EXTENSION oracle_fdw;
CREATE EXTENSION
Checkthatthecorrespondingwrapperhasbeenadded: 137
ix
test=# \dew
List of foreign-data wrappers
-[ RECORD 1 ]-------------------
Name | oracle_fdw
Owner | postgres
Handler | oracle_fdw_handler
Validator | oracle_fdw_validator
Thenextstepissettingupaforeignserver.IntheOPTIONS
clause,youhavetospecifythedbserveroption,whichde-
finesconnectionparametersfortheOracleinstance:server
name,portnumber,andinstancename.
test=# CREATE SERVER oracle_srv
FOREIGN DATA WRAPPER oracle_fdw
OPTIONS (dbserver '//localhost:1521/orcl');
CREATE SERVER
ThePostgreSQLuserpostgreswillbeconnectingtotheOr-
acleinstanceasscott.
test=# CREATE USER MAPPING FOR postgres
SERVER oracle_srv
OPTIONS (user 'scott', password 'tiger');
CREATE USER MAPPING
We’llimportforeigntablesintoaseparateschema.Let’scre-
ateit:
test=# CREATE SCHEMA oracle_hr;
CREATE SCHEMA
138 Nowlet’simportsomeforeigntables.We’lldoitforjusttwo
ix populartables,deptandemp:
test=# IMPORT FOREIGN SCHEMA "SCOTT"
LIMIT TO (dept, emp)
FROM SERVER oracle_srv
INTO oracle_hr;
IMPORT FOREIGN SCHEMA
NotethatOracledatadictionarystoresobjectnamesinup-
percase,whilePostgreSQLsystemcatalogsavestheminlow-
ercase.WhenworkingwithexternaldatainPostgreSQL,you
havetodouble-quoteuppercaseOracleschemanamesto
avoidtheirconversiontolowercase.
Let’sviewthelistforeigntables:
test=# \det oracle_hr.*
List of foreign tables
Schema | Table | Server
-----------+-------+------------
oracle_hr | dept | oracle_srv
oracle_hr | emp | oracle_srv
(2 rows)
Nowrunthequeriesonforeigntablestoaccesstheexternal
data:
test=# SELECT * FROM oracle_hr.emp LIMIT 1 \gx
-[ RECORD 1 ]-------------------
empno | 7369
ename | SMITH
job | CLERK
mgr | 7902
hiredate | 1980-12-17
sal | 800.00
comm |
deptno | 20