了。MyISAM拥有全文索引的功能，这可以极大地优化查询的效率。
无疑问要选择InnoDB引擎。二是如果应用程序对查询性能要求较高，就要使用MyISAM
在文件组成上，MyISAM存储引擎表由MYD（数据文件）和MYI（索引文件）组成。
硬盘更换完毕，重新挂载到服务器，然后将这个新换硬盘的服务器作为从库，从现在
知道了案例的来龙去脉，那么如何去解决这个问题呢？笔者给客户的意见是，既然磁
由于恢复了这3个文件，需要重启MySQL服务，MySQL重启后，要重新读取磁盘
关于MyISAM与InnoDB的选择有两条建议：一是如果应用程序一定要使用事务，毫
》InnoDB支持事务，MyISAM不支持事务，这一点是非常之重要。事务是一种高级
MySQL最常用的有两个存储引擎：MyISAM和InnoDB。MySQL4和MySQL5使用
V
V
InnoDB可支持大并发请求，适合大量insert、update操作。
发挥的优势越大。
是数据。而InnoDB 缓存在内存的是数据，相对来说，
MyISAM索引和数据是分开的，而且其索引是压缩的，
InnoDB支持外键，支持行级锁，MyISAM不支持。
繁修改以及对安全性要求较高的应用。
MyISAM 查询数据相对较快，适合大量的 select，可以全文索引：InoDB 适合频
的处理方式，如在一些列增删改中出错可以回滚还原，而MyISAM就不可以了。
关于MySQL存储引擎的选择
线上业务服务器优化案例第11章
，服务器内存越大，InnoDB
，缓存在内存的是索引，不
，不过现在InnoDB引
---
## Page 473
462
如下。
参数，例如：
息会被更新，check table也可以检查视图是否有错误，如图11-10所示。
myisamchk.
掌握如何去修复受损的表，这里介绍三个工具，分别是 check table、repair table 以及
11.2.8
业务系统来说，根本无法使用。
动辄半个小时，多则几个小时，修复甚至还可能会造成数据的丢失，这对需要实时读写的
是InnoDB引擎，就不会出现阻塞写操作的问题了。
对表进行读取时，需要对表加共享锁。这个在上面的案例中就看到了，
存储引擎表，也只需复制这3个文件到对应的MySQL 数据文件路径下即可。
Linux高效运维实战
因此，选择存储引擎要慎重，要根据业务特点进行评估。笔者主推InnoDB引擎。
使用MyISAM引擎最大的缺点是，如果表很大，
此外，MyISAM仅支持表级锁，即在对数据表进行修改的时候，需要对整个表加锁，
check table对MyISAM和InnoDB引擎表都可用。对于MyISAM表，关键字统计信
MyISAM存储引擎表损坏的情况经常发生，所以如果使用的是MyISAM，那么一定要
如果要备份MyISAM存储引擎表，只需要备份这3个文件即可，而若要恢复MyISAM
》EXTENDED：对每行所有关键字进行全面的关键字查找。这可以确保表是100%
QUICK和MEDIUM是只对MyISAM表有作用的选项，checktable常用的选项含义介绍
可以看到，通过check table可以发现表有哪些错误信息。check table还可以添加一些
1.检查表命令check table
V
验和，并使用计算出的校验和验证。
MEDIUM：扫描行，以验证被删除的链接是有效的。也可以计算各行的关键字校
CHANGED：只检查自上次检查后被更改的表，
FAST：只检查没有被正确关闭的表。
QUICK：不扫描行，不检查错误的链接。
修复MySQL损坏表的几个方法
一致的，但是要花很长时间，所以很少使用。
mysql> check table 表名 MEDIUM;
mysql> check
table表名QUICK;
图11-10通过CHECKTABLE检查表状态
，那么表可能经常会损坏，修复一次，
以及没有被正确关闭的表。
如果上面案例的表
---
## Page 474
-innodb_force_recovery。怎么使用呢？需要修改my.cnf文件，在my.cnf 中的[mysqld]中添
刷新缓存，并关闭数据库服务或者锁定所有待修复的表，以确保在修复过程中不会有其他
那么myisamchk命令默认执行的就是检查动作。若是要修复表，可以使用-r或-o参数，应
录，
个选项，repairtable常用的选项有如下几个。
ARCHIVE引擎的表起作用。要修复一个表，可执行如图11-11所示命令。
没有用户交互的情况下完成修复，在这种情况下，就需要借助一个ImnoDB引擎参数
它会在服务器启动时进行自动修复。不过，有时候数据损坏得很严重并且InnoDB无法在
写操作。
该优先使用-r修复，不行的话再使用-o修复。此外，在修复前应该使用SQL命令flushtables
repair table 用于修复被破坏的表。需要注意的是，repair table 仅对 MyISAM 和
InnoDB是带有事务的存储引擎，并且其内部机制会自动修复大部分数据损坏错误，
3.InnoDB存储引擎表损坏修复方法
其中，--backup选项是在尝试修复表之前先进行数据文件备份，如果没有指定参数，
执行如下命令：
myisamchk命令可以直接访问表文件，而无须启动MySQL服务。进入datadir文件目
3.使用myisamchk修复MyISAM表
》quick：表示repair只修复索引。
如果单纯执行repairtable 没有起到什么效果，或者无法修复表的话，可以选择另外几
2.
extended：表示MySQL会一行一行地创建索引行。速度比 repair table 慢得多，但
也会在从库执行，使用此选项将会禁止写入到二进制文件中。
no_write_to_binlog:repair修复默认写入二进制文件中，如果有主从模式的话，repair
件。在repair 常规无法完成时，才会使用这个选项，如果表被压缩则不能使用。
use_frm：如果.MYI 索引文件丢失，则使用此选项，此选项可以重新创建.MYI 文
是可以修复99%的错误。
修复表命令repair table
myisamchk: Makingbackup of data file withextension'-181123175313.BAK
Datarecords:1489928
[root@localhost bidbl]#myisamchk
图11-11通过repair修复被破坏的表
--backup
线上业务服务器优化案例第11章
--recover abc
463
---
## Page 475
mytable2;
520_ci NOT NULL DEFAULT 'yes'
code_520_ci NOT NULL,
unicode_520_ci NOT NULL DEFAULT ',
损坏的数据表。基本操作过程如下：
重新启动MySQL，最后用LOADDATA…-INFILE语句加载文件数据，即可恢复InnoDB
转储到文件中，然后使用drop和create命令重新创建表，接着，修改innodb_force_recovery=0
这类操作是不允许的。具体数字对应的含义如下所述。
参数值大于0后，可以对表进行 select、create 和 drop 操作，但insert、update 或者 delete
加如下内容：
Linux高效运维实战
464
MySQL相关故障的处理就介绍到这里。
4）导入数据。
1）导出数据。
通过这个参数，一般都能将MySQL 启动起来。启动起来后，使用 select into outfle将表
》2：（SRVFORCENOBACKGROUND)：阻止主线程的运行，如主线程需要执行full
》1：(SRVFORCEIGNORECORRUPT)：忽略检查到的错误页。
innodb_force_recovery可以设置为1～6，大的数字包含前面所有数字的影响。当设置
3）创建新表。
2）
》6：（SRVFORCENOLOG_REDO)：不执行前滚的操作。
V
purge 操作，会导致 crash。
提交的事务视为已提交。
5：(SRVFORCENOUNDOLOGSCAN)：不查看重做日志，InnoDB存储引擎会将未
4：（SRVFORCENOIBUFMERGE)：不执行插入缓冲的合并操作。
3：（SRVFORCENOTRXUNDO）：不执行事务回滚操作。
删除损坏的表。
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
mysql> drop table mytable2;
mysql> select * into outfile/tmp/outfile.txt' from mytable2;
innodb_force_recovery =6
autoloadvarchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode
"option_value'
optionname
option_idbigint(20) unsigned NOT NULL
varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4
longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_uni-
DEFAULT'O',
---
## Page 476
未配置，那么，它使用的就是默认参数，也就是堆内存1G，难道是这个内存值设置太
数是怎么配置的。
该是内存不够了，
都是同一个错误，出现内存溢出后，nodemanager 进程自动关闭，然后被 Hadoop 拉入黑
法提供计算资源了。接着，又陆续查看了其他进入黑名单的节点，惊奇地发现，这些节点
了，也就是说nodemanager服务自动退出了。既然 nodemanager服务关闭了，那么肯定无
第一感觉是JVM内存溢出了，难道是内存不够了吗？再检查发现，nodemanager进程不见
过查看 nodemanager的日志，发现了如图 11-12所示的异常信息。
小了？
11.3.2
名单。
平台的环境。
剔除后自动进入黑名单中。
预估的异常，无法提供计算服务了，然后Hadoop就将这些节点剔除分布式计算集群了，
Hadoop平台有20多个计算节点进入了黑名单。所谓进入黑名单，就是此节点发生了不可
11.3.1
这是笔者客户Hadoop大数据平台的一个故障案例。客户收到微信告警，告警内容是
11.3
接着，查看了yarm-env.sh配置文件，此文件是配置YARN相关资源参数的，发现YARN
为什么一下子出现20多个节点进入黑名单呢？这里面肯定有问题！先说明一下Hadoop
日志中出现java.lang.OutOfMemoryError:GC overheadlimit exceeded 错误，主要原因应
这里看到了一个明显的错误java.lang.OutOfMemoryError:GCoverheadlimit exceeded，
随便挑选了一台进入黑名单的机器，登录系统，看看有什么可以发现的异常信息，通
》Hadoop 是基于CDH的发行版本，CDH5.8.x版本。
》JDK为OracleJDK1.8版本，操作系统为CentOS7.5版本。
50个集群节点，分别提供分布式存储（HDFS）和分布式计算（yarn）。
1Hadoop平台出现OutOfMemoryError错误
调整JVM参数解决OutOfMemory问题
每个集群节点硬件配置2颗8核CPU，64GB内存。
线上Java应用OutOfMemoryError故障案例实录
，既然跟 nodemanager 有关，那么就看一下 nodemanager的JVM内存参
图11-12Java内存溢出日志截图
线上业务服务器优化案例第11章
465
---
## Page 477
466
11.3.3
limtexceed的消息提示：
overheadlimit exceed检查特性，通过在JVM参数中增加如下内容即可关闭GCoverhead
了 java.lang.OutOfMemoryError:Java heap space 错误消息。因此，多数情况下推荐关闭
98%的时间用来做GC并且回收了不到2%的堆内存。
回收器在GC回收时间过长时会抛出OutOfMemroyError。其中，“过长”的定义是：超过
来预测是否要OOM了，提前抛出异常，防止OOM发生。官方对此的定义是：并行/并发
配置文件，增加如下配置：
nodemanager才1GB，实在太小，这里将nodemanager堆内存增加为4GB，修改yarm-env.sh
解决的方法只有一个，那就是给JVM 增加堆内存。每个计算节点有64GB的内存，给
无计算资源而彻底停止运行。
nodemanager堆内存耗尽，导致所有节点的 nodemanager退出，整个Hadoop平台就会出现
点运行正常，如果一直未发现此问题的话，那么此Job会将Hadoop集群所有节点上的
黑名单。
自动退出，依次类推，就出现了20多个节点的 nodemanager进程自动关闭，最后进入
第2个节点，而第2个节点也会因为nodemanager的堆内存不够而导致nodemanager
计算节点上 nodemanager的堆内存耗尽，而一个节点失效后，Hadoop会自动去请求
就恢复正常了。看来果然是数据量大导致的内存溢出，由于分析的数据量很大，导
者感觉应该是内存泄露之类的问题。不管怎么样，最后，关闭这个计算任务后，集群
数据量大，耗费时间会很长，想趁着周末去分析，周一出结果。
员说，周五下班的时候，他提交了一个很大的计算任务，分析了近一年的数据，由于分析
运行的这个Job有关系呢？带着这个疑问，打电话咨询了运行此Job的开发人员，开发人
Linux高效运维实战
这次幸亏及时发现，没有造成更严重的后果。因为发现问题的时候，还有30多个节
关于GCoverhead limt exceed是HotspotVM1.6定义的一个策略，通过统计GC时间
可以看出，其实GC overhead limt exceed就是说明内存不够用了，
这就是典型的代码问题+配置问题导致的故障。知道了原因，如何解决这个问题呢？
同时，这个Job任务代码本身也存在问题，具体什么原因，开发人员没有说明，笔
，如果说是这个值设置得太小，那么为何之前一直都正常呢？这个非常不解，是不是跟
JVM内存区域总体分两类，Heap区（堆内存）和非 Heap区（非堆内存）。Heap区又
1.JVM内存区域组成
在Hadoop集群的50个节点上依次修改每个节点的 nodemanager堆内存的大小，然后
3JVM内存组成与内存分配
-XX:-UseGCOverheadLimit
exp0rtYARN_NODEMANAGER_OPTS="-Xms4096m -Xmx4096m"
这个特性其实隐藏
---
## Page 478
被称为 Young GC。YGC 的算法很快，对新生代堆进行GC。它执行的频率比较高，因为
为Minor GC（GarbageCollection，垃圾回收），又因为是对新生代进行垃圾回收，所以也
（Java虚拟机栈）和 Local Method Statck（本地方法栈）。
区）。非Heap区又分为：PermGen Space（永久代）、CodeCache（代码缓存区）、JVM Stack
分为 Eden Space（伊甸园）、Survivor Space（幸存者区）和Old Gen（老年代，即为养老
大部分对象的存活寿命较短，在新生代里被回收，所以性能耗费较小。
注意：Eden Space和 Survivor Space 都属于新生代，新生代中执行的垃圾回收被称之
Stack3
Stack2
Stack1
详细的结构如图11-13所示。
下面依次介绍下每个内存区域的含义。
StackN
Survivor Space：幸存者区，用于保存在Eden Space 内存区域中经过垃圾回收后没
栈区
么就将对象移动到养老区。
引用的对象进行销毁。然后将伊甸区中不能被回收的对象移动到幸存0区。若幸
JVM的垃圾回收器就会对伊甸区进行垃圾回收，将伊甸区中的不再被其他对象所
两个区域的空间大小是一样的。当伊甸区的空间用完时，程序又需要创建对象，
有被回收的对象。Survivor其实有两个，分别为To Survivor、From Survivor，这
后，不能被回收的对象会被放入到空的 Survivor区域。
Eden Space：表示堆内存区，对象被创建的时候首先放到这个区域，进行垃圾回收
存0区也满了，再对该区进行垃圾回收，然后再移动到1区。当1区也满了，那
Eden Space
图11-13JVM内存区域组成图
Heap（堆区）
JVM内存
Old Gen
老年代
新生代
Survivor Space
Survivor Space
PermGen Space（永久代）
方法区/元空间
线上业务服务器优化案例第11章
OS内存
467
---
## Page 479
468
代的比例。
以，也可以设置新生代和老年代的相对大小，参数-XX:NewRatio用来设置老年代与新生
错误。此外，还可以通过参数-XX:NewSize、-XX:MaxNewSize 指定新生代的初始大小和
内存的1/4。服务器环境一般推荐设置-Xms、-Xmx相等以避免在每次GC后调整堆的大小。
-Xms指定，默认是物理内存的1/64；JVM最大分配的堆内存由-Xmx指定，默认是物理
空闲堆内存大于70%时，JVM会减少堆直到最小堆内存限制。
1/64（<1GB），默认空闲堆内存小于40%时，JVM就会增大堆直到最大堆内存限制，默认
FullGC 非常慢（比MinorGC慢10倍以上），因此应该尽量避免频繁的FGC。
最大值。由于新生代只是整个堆的一部分，新生代设置得越大，老年代区域就会越小，所
FullGC。FGC是全堆范围的GC。默认堆空间使用到达80%（可调整）的时候会触发FGC，
行垃圾回收，称之为MajorGC。由于MajorGC会对整个堆进行扫描和回收，因此又称为
Linux高效运维实战
注意：如果-Xmx不指定或者指定偏小，应用可能就会出现java.lang.OutOfMemory的
要配置堆内存，可以设置堆的初始值（最小值）和最大值，JVM初始分配的堆内存由
：》Old Gen：老年代，用于存放新生代中经过多次垃圾回收仍然存活的对象，也有可
从上面的介绍可知，整个堆大小=新生代大小+老年代大小。堆内存默认为物理内存的
3.堆内存分配
Java 虚拟机管理堆之外的内存，称为非堆内存。主要有如下几个部分组成。
2.非堆内存（非Heap区）组成
不能回收的对象如果持续放到老年代中，那么，当老年代被放满之后，虚拟机也会进
PermGenSpace：方法区，JDK8之前又被称为永久代，主要用来存放已被虚拟机