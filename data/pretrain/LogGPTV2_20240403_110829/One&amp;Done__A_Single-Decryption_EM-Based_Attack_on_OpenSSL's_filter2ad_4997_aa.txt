title:One&amp;Done: A Single-Decryption EM-Based Attack on OpenSSL's
Constant-Time Blinded RSA
author:Monjur Alam and
Haider Adnan Khan and
Moumita Dey and
Nishith Sinha and
Robert Locke Callan and
Alenka G. Zajic and
Milos Prvulovic
One&Done: A Single-Decryption EM-Based Attack 
on OpenSSL’s Constant-Time Blinded RSA
Monjur Alam, Haider Adnan Khan, Moumita Dey, Nishith Sinha, Robert Callan,  
Alenka Zajic, and Milos Prvulovic, Georgia Tech
https://www.usenix.org/conference/usenixsecurity18/presentation/alam
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.One&Done: A Single-Decryption EM-Based Attack
on OpenSSL’s Constant-Time Blinded RSA
Monjur Alam
Georgia Tech
Haider A. Khan
Georgia Tech
Moumita Dey
Georgia Tech
Nishith Sinha
Georgia Tech
Robert Callan
Georgia Tech
Alenka Zajic
Georgia Tech
Milos Prvulovic
Georgia Tech
Abstract
1
Introduction
This paper presents the ﬁrst side channel attack approach
that, without relying on the cache organization and/or
timing, retrieves the secret exponent from a single de-
cryption on arbitrary ciphertext in a modern (current ver-
sion of OpenSSL) ﬁxed-window constant-time imple-
mentation of RSA. Speciﬁcally, the attack recovers the
exponent’s bits during modular exponentiation from ana-
log signals that are unintentionally produced by the pro-
cessor as it executes the constant-time code that con-
structs the value of each “window” in the exponent,
rather than the signals that correspond to squaring/multi-
plication operations and/or cache behavior during multi-
plicand table lookup operations. The approach is demon-
strated using electromagnetic (EM) emanations on two
mobile phones and an embedded system, and after only
one decryption in a ﬁxed-window RSA implementation
it recovers enough bits of the secret exponents to enable
very efﬁcient (within seconds) reconstruction of the full
private RSA key.
Since the value of the ciphertext is irrelevant to our at-
tack, the attack succeeds even when the ciphertext is un-
known and/or when message randomization (blinding) is
used. Our evaluation uses signals obtained by demodu-
lating the signal from a relatively narrow band (40 MHz)
around the processor’s clock frequency (around 1GHz),
which is within the capabilities of compact sub-$1,000
software-deﬁned radio (SDR) receivers.
Finally, we propose a mitigation where the bits of the
exponent are only obtained from an exponent in integer-
sized groups (tens of bits) rather than obtaining them one
bit at a time. This mitigation is effective because it forces
the attacker to attempt recovery of tens of bits from a sin-
gle brief snippet of signal, rather than having a separate
signal snippet for each individual bit. This mitigation
has been submitted to OpenSSL and was merged into its
master source code branch prior to the publication of this
paper.
Side channel attacks extract sensitive information, such
as cryptographic keys, from signals created by electronic
activity within computing devices as they carry out com-
putation. These signals include electromagnetic emana-
tions created by current ﬂows within the device’s com-
putational and power-delivery circuitry [2, 3, 14, 21, 33,
46], variation in power consumption [9, 12, 15, 17, 23,
26, 34, 35, 36, 41], and also sound [6, 16, 24, 42], tem-
perature [13, 29], and chasis potential variation [23] that
can mostly be attributed to variation in power consump-
tion and its interaction with the system’s power delivery
circuitry. Finally, not all side channel attacks use ana-
log signals: some use faults [11, 25], caches [8, 43, 44],
branch predictors [1], etc.
Most of the research on physical side-channel attacks
has focused on relatively simple devices, such as smart-
cards and simple embedded systems, where the side-
channel signals can be acquired with bandwidth much
higher than the clock rates of the target processor and
other relevant circuitry (e.g. hardware accelerators for
encryption/decryption), and usually with highly intrusive
access to the device, e.g. with small probes placed di-
rectly onto the chip’s package [19, 35]. Recently, at-
tacks on higher-clock-rate devices, such as smartphones
and PCs , have been demonstrated [7, 20, 21, 22]. They
have shown that physical side channel attacks are pos-
sible even when signals are acquired with bandwidth
that is much lower than the (gigahertz-range) clock rates
of the processor, with less-intrusive access to the de-
vice, and even though advanced performance-oriented
features, such as super-scalar (multiple instructions per
cycle) execution and instruction scheduling, and system
software activity, such as interrupts and multiprocessing,
cause signiﬁcant variation in both shape and timing of
the signal produced during cryptographic activity.
To overcome the problem of low bandwidth and vari-
ation, successful attacks on high-clock-rate systems tend
USENIX Association
27th USENIX Security Symposium    585
to focus on parts of the signal that correspond to activity
that takes many processor cycles. A representative exam-
ple of this is decryption in RSA, which consists of modu-
lar exponentiation of the ciphertext with an exponent that
is derived from the private key. The attacker’s goal is to
recover enough bits of that secret exponent through side-
channel analysis, and use that information to compute the
remaining parts of the secret key. Most of the computa-
tional activity in large-integer modular exponentiation is
devoted to multiplication and squaring operations, where
each squaring (or multiplication) operation operates on
large integers and thus takes many processor cycles.
Prior physical side-channel attacks on RSA rely on
classifying the signals that correspond to large-integer
square and multiply operations that together represent
the vast majority of the computational work when per-
forming large-integer exponentiation [10, 20, 23, 24].
Between these long-lasting square and multiply opera-
tions are the few processor instructions that are needed
to obtain the next bit (or group of bits) of the se-
cret exponent and use that to select whether the next
large-integer operation will be squaring or multiplica-
tion, and/or which operands to supply to that operation.
The focus on long-lasting operations is understandable,
given that side channel attacks ultimately recover infor-
mation by identifying the relevant sub-sequences of sig-
nal samples and assessing which of the possible cate-
gories is the best match for each sub-sequence. The
sub-sequences that correspond to large-integer opera-
tions produce long sub-sequences of samples, so they 1)
are easier to identify in the overall sequence of samples
that corresponds to the entire exponentiation, and 2) pro-
vide enough signal samples for successful classiﬁcation
even when using relatively low sampling rates.
However, the operands in these large-integer opera-
tions are each very regular in terms of the sequence of
instructions they perform, and the operands used in those
instructions are ciphertext-dependent, so classiﬁcation of
signals according to exponent-related properties is difﬁ-
cult unless 1) the sequence of square and multiply oper-
ations is key-dependent or 2) the attacker can control the
ciphertext that will be exponentiated, and chooses the ci-
phertext in a way that produces systematically different
side channel signals for each of the possible exponent-
dependent choices of operands.
1.1 Our Contributions
In this paper we present a side-channel attack that is
based on analysis of signals that correspond to the brief
computation activity that computes the value of each
activity between
window during exponentiation,
large-integer multiplications, in contrast to most prior
work that focuses on the large-integer multiplications
i.e.
themselves and/or the table lookups that obtain the mul-
tiplicand for the computed window value. The short du-
ration of these window value computations may hinder
signal-based classiﬁcation to some extent. However, the
values these computations operate on are related to the
individual bits of the secret exponent and not the message
(ciphertext). This absence of message-induced variation
allows the small variation caused by different values of
an individual exponent bit to “stand out” in the signal and
be accurately matched to signals from training. More
importantly, this message-independence makes the new
attack completely immune to existing countermeasures
that focus on thwarting chosen-ciphertext attacks and/or
square/multiply sequence analysis.
The experimental evaluation of our attack approach
was performed on two Android-based mobile phones and
an embedded system board, all with ARM processors op-
erating at high (800 MHz to 1.1 GHz) frequencies, and
the signal is acquired in the 40 MHz band around the
clock frequency, resulting in a sample rate that is <5% of
the processor’s clock frequency, and well within the sig-
nal capture capabilities of compact commercially avail-
able sub-$1,000 software-deﬁned radio (SDR) receivers
such as the Ettus B200-mini. The RSA implementation
we target is the constant-time ﬁxed-window implemen-
tation used in OpenSSL [38] version 1.1.0g, the latest
version of OpenSSL at the time this paper was written.
Our results show that our attack approach correctly re-
covers between 95.7% and 99.6% (depending on the tar-
get system) of the secret exponents’ bits from the sig-
nal that corresponds to a single instance of RSA decryp-
tion, and we further verify that the information from each
instance of RSA encryption/signing in our experiments
was sufﬁcient to quickly (on average <1 second of ex-
ecution time) fully reconstruct the private RSA key that
was used.
To further evaluate our attack approach, we apply it to
a sliding-window implementation of modular exponen-
tiation in OpenSSL – this was the default implementa-
tion in OpenSSL until Percival et al. [39] demonstrated
that its key-dependent square/multiply sequence makes it
vulnerable to side channel attacks. We show that in this
implementation our approach also recovers nearly all of
the secret-exponent bits from a single use (exponentia-
tion) of that secret exponent.
To mitigate the side-channel vulnerability exposed by
our attack approach, we change the window value com-
putation to obtain a full integer’s worth of bits from the
exponent, then mask that value to obtain the window
value, rather than constructing the window value one bit
at a time with large-number Montgomery multiplication
between these one-bit window-value updates. This mit-
igation causes the signal variation during the brief win-
dow computation to depend on tens of bits of the expo-
586    27th USENIX Security Symposium
USENIX Association
the signal variation introduced by
nent as a group, i.e.
one bit in the exponent during the window computation
is now superimposed to the variation introduced by the
other bits in the group, instead of having each bit’s vari-
ation alone in its own signal snippet. Our experiments
show that this mitigation actually improves exponenti-
ation performance slightly and, more importantly, that
with this mitigation the recovery rate for the exponents
bits becomes equivalent to random guessing. This miti-
gation has been submitted to OpenSSL and was merged
into its master source code branch on May 30th, 2018,
prior to the publication of this paper.
1.2 Threat Model
1.2.1 Assumptions
Our attack model assumes that there is an adversary
who wishes to obtain the secret key used for RSA-based
public-key encryption or authentication. We further as-
sume that the adversary can bring a relatively compact
receiver into close proximity of the system performing
these RSA secret-key operation, for example a smart-
infrastructure or smart-city device which uses public key
infrastructure (PKI) to authenticate itself and secure its
communication over the Internet, and which is located in
a public location, or that the adversary can hide a rela-
tively compact receiver in a location where systems can
be placed in close proximity to it, e.g. under a cellphone
charging station at a public location, under the tabletop
surface in a coffee shop, etc.).
We assume that the adversary can access another de-
vice of the same type as the one being attacked, which
is a highly realistic assumption in most attack scenarios
described above, and perform RSA decryption/authen-
tication with known keys in preparation for the attack.
Unlike many prior attacks on RSA, we do not assume
that the adversary can choose (or even know) the mes-
sage (ciphertext for RSA decryption) to which the pri-
vate key will be applied, and we further assume that the
RSA implementation under attack does utilize blinding
to prevent such chosen-ciphertext attacks. Finally, we as-
sume that it is highly desirable for the attacker to recover
the secret key after only very few uses (ideally only one
use) of that key on the target device. This is a very re-
alistic assumption because PKI is typically used only to
set up a secure connection, typically to establish the au-
thenticity of the communication parties and establish a
symmetric-encryption session key, so in scenarios where
the attacker’s receiver can only be in close proximity to
the target device for a limited time, very few uses of the
private RSA key may be observed.
1.2.2 Targeted Software
The software we target is OpenSSL version 1.1.0g [38],
the latest version of OpenSSL at the time this paper was
written.
Its RSA decryption uses constant-time ﬁxed-
window large-number modular exponentiation to miti-
gate both timing-based attacks and attacks that exploit
the exponent-dependent variation in the square-multiply
sequence. The lookup tables used to update the result
at the end of each window are stored in scattered form
to mitigate attacks that examine the cache and memory
behavior when reading these tables, and the RSA imple-
mentation supports blinding (which we turn on in our
experiments) to mitigate chosen-ciphertext attacks.
1.2.3 Targeted Hardware
The hardware we target are two modern Android-based
smartphones and a Linux-based embedded system board,
all with ARM processor clocked at frequencies around
1GHz. In our experiments we place probes very close,
but without physical contact with the (unopened) case of
the phone, while for the embedded system board we po-
sition the probes 20 cm away from the board, so we con-
sider the demonstrated attacks close-proximity but non-
intrusive.
1.2.4 Current Status of Mitigation
The mitigation described in this paper has been sub-
mitted as a patch for integration into the main branch
of OpenSSL. This patch was merged into the “master”