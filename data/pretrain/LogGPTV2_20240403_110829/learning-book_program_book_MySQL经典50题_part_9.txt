1990-12-21
男
θ3
孙风
1990-05-20
男
θ4
李云
1990-08-06
一
男
θ5
周梅
1991-12-01
女
θ6
吴兰
1992-03-01
女
θ7
郑竹
1989-07-02
女
08
王菊
1990-01-20
女
8
rows
in set （θ.0θ sec)
现有的数据中没有同名的学生，但是当班级人数增多的时候很有可能在班级上出现同名的学生
2、假设有同名同性的学生
select
a.s_name
3
,a.s_sex
, count(*)
fron Student a
个表的白连接
b
join Student b
on a.s_id 1= b.s_1d
连接的时候不能是同
学号保证：
每个人的学号是唯
的;
其他字段都可能重复
and a.s_sex = b.s_sex
性别相 同
9
and a.s_name = b.s_name
名字相同
10
group by 1,2;
tysel> select
如果真的有满足要求的数据，会显示的
unt(*)
from 5tudent a
同一个表的自连茁
ona.s_1d1-b.s_1d
连接的树候不能是网
(9.06
by 1.2:
http://liyangbit.com
90
---
## Page 91
Chapter1.超经典MySQL练习50题
Python数据之道
1.32题目31
1.32.1题目需求
查询1990年出生的学生信息
1.32.2SQL实现
select *
from Student
where s_birth like *1990%';
模拼匹配
mysql>
select
->from Student
where s_birth like
1990%';
s_id1
5_nameIs_birth
s_sex
01
赵雷
11990-01-011
男
θ2
钱电
1990-12-211
男
03
孙风
1990-05-20
男
04
李云
1990-08-06
男
08
王菊
11990-01-201女
rows
inset（0.0θ sec)
1.33题目32
1.33.1题目需求
查询每门课程的平均成绩，结果按平均成绩降序排列；平均成绩相同时，按课程编号c_id升序排列
1.33.2SQL实现
自己的方法
select
3
c_id
,round(avg(s_score) ,2) avg_score
fron Score
6
group by 1
http://liyangbit.com
91
---
## Page 92
Chapter1.超经典MySQL练习50题
Python数据之道
order by 2 desc, c_id;
=指定字段和排序方法
mysql>select
-> c_id
->,round(avg(s_score),2) avg_score
->from Score
->group by 1
->orderby2desc，c_id；--指定字段和排序方法
-+-
+
c_id 1avg_score 1
θ2
74.501
1
73.501
01
66.501
3 rows in set (0.0θ sec)
如果想带上课程的名称，需要和Course表进行联结
自己的方法
select
c.c_id
,C.c_name
, round(avg(sc.s_score) ,2) avg_score
fron Score sc
join Course c
S
on sc.c_id = c.c_id
group by 1,2
10
order by 3 desc, c.c_id;
=指定字段和推序方法
http://liyangbit.com
92
---
## Page 93
Chapter1.超经典MySQL练习50题
Python数据之道
mysql> select
>c.c_id
>
,c.c_name
->
,round(avg(sc.s_score),2) avg_score
from Score sc
>
join Course c
>
on sc.c_id = c.c_id
>
group by 1,2
->orderby3desc，c.c_id;-指定字段和排序方法
-+--
c_id1c_name |avg_score1
2
数学
74.501
03
英语
73.50
θ1
语文
66.501
3 rows in set (0.01 sec)
1.34题目33
1.34.1题目需求
查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩
1.34.2 SQL实现
自已的方法
select
sc.s_id
,s.s_nane
,round (avg(sc.s_score) ,2) avg_score
b
fron Score sc
join Student s
on sc.s_id = s.s_id
group by sc.s_id,s.s_name
10
having avg_score >= 85;
http://liyangbit.com
93
---
## Page 94
Chapter1.超经典MySQL练习50题
Python数据之道
mysql> select
->sc.s_id
->，s.s_name
->,round(avg（sc.s_score),2) avg_score
->from Score sc
->join Student s
->on sc.s_id =s.s_id
->group by sc.s_id,s.s_name
->having avg_score >=85;
s_id1s_nameIavg_score1
01
赵雷
88.671
θ7
郑竹
91.501
rows
inset（0.00sec)
1.35题目34
1.35.1题目需求
查询课程名称为数学，且分数低于60的学生姓名和分数
1.35.2SQL实现
select
s.s_name
from Score sc
,sc.s_score
成绩表
join Student s
学生信息表
on sc.s_id = s.s_id
join Course c
课程表，指定数学
on sc.c_id = c.c_id
where C.c_name ='数学1
10
and sc.s_score  select
s.s_name
,sc.s_score
from Score sc
成绩表
->join Student
S
学生信息表
>
on sc.s_id=s.s_id
>
join Course c
课程表，
指定数学
>
onsc.c_id =c.c_id
->wherec.c_name=‘数学
->and sc.s_score  select
*from Score
id=02;
=十 =
5_id | c_id | s_score |
数学是02，只有一个人满足
01
102
901
θ2
θ2
68
θ3
θ2
81
θ4
θ2
40
1
05
θ2
87
θ7
102
89
rows in set （0.θ0 sec)
1.36题目35
1.36.1题目需求
查询所有学生的课程及分数情况
http://liyangbit.com
95
---
## Page 96
Chapter1.超经典MySQL练习50题
Python数据之道
1.36.2SQL实现
select
s.s_id
3
,s.s_name
,sum(case c.c_name when '语 文' then sc.s_score else 0 end) as *语文
文分数
,sum(sc.s_score) as * 分'
=
每个人的总分
from Student s
left join Score sc
10
on s.s_id = sc.s_id
11
left join Course c
12.
on sc.c_id = c.c_id
13
group by s.s_id, s.s_name;
学号和姓名的分组
mysql> select
-> 5.5_id
>,s.s_nae
sum(case c.c_name when
x。se（pu0s1aa0)ss3sa41.x。u
sum(case c.c_name when 英语* then sc.s_score else  end) as *
数学
>
sum（sc.s_score） as*总分
英语
-> from Student s
left jo1n 5core sc
-> left join Course c
sc.c_id = c.c_id
> group by s.s_1d, s.s_nane;
5_id| s_name1语文
数学
1英语
1总分
861
98 1
96 1
钱电
7e1
69 1
88 1
2101
2661
82
孙风
86
81 1
85
1
2461
李云
581
49 1
38 1
1201
58
吴兰
周梅
431
761
87 1
81
163 1
01
56 1
166
07
郑竹
89 1
941
183 1
170N
1.37题目36
1.37.1题目需求
查询任何一门课程成绩在70分以上的姓名、课程名称和分数
1.37.2SQL实现
http://liyangbit.com
96
---
## Page 97
Chapter1.超经典MySQL练习50题
Python数据之道
select
s.s_name
,C.c_name
4
,sc.s_score
fron Score sc
成绩表
join Student s
学生信息表
on sc.s_id = s.s_id
join Course c
课程表
5
on sc.c_id = c.c_id
10
where sc.s_score > 70
group by s.s_name, c.c_name, sc.s_score;
mysql> select
->s.s_name
>
,C.c_name
>
,sc.s_score
->fromScoresc
成绩表
-> join Student 5
学生信息表
->on sc.s_id =s.s_id
->join Course c
-课程表
->on sc.c_id =c.c_id
->where sc.s_score> 7θ
-> group by s.s_name，c.c_name，sc.s_score;
+
s_name
周梅
数学
87
周梅
语文
76
孙风
数学
81
孙风
英语
85
孙风
语文
80
赵雷
数学
90
赵雷
英语
96
赵雷
语文
80
郑竹
数学
89
1
郑竹
英语
94
1
钱电
英语
80
11rows
in set （0.01 sec)
http://liyangbit.com
97
---
## Page 98
Chapter1.超经典MySQL练习50题
Python数据之道
1.38题目37
1.38.1题目需求
查询不及格的课程
1.38.2 SQL实现
select
sc.c_1d
,C.c_name
fron Score sc
,sc.s_score
join Course c
on sc.c_id = c.c_id
where sc.s_score  select
->sc.c_id
->
,c.c_name
>
,sc.s_score
->fromScoresc
>
join Course c
->onsc.c_id=c.c_id
->where sc.s_score = 80;
mysql> select
->sc.5_id
>
,s.s_name
>
,sc.s_score
->from Score sc
成绩表
->join Student s
学生信息表
->on sc.s_id = s.s_id
->join Course c
-课程表
->on sc.c_id =c.c_id
->where c.c_id =θ1
->and sc.s_score >= 80;
s_id1s_name
Is_score
θ1
赵雷
801
θ3
1孙风
80
1
rows
in set （0.0θ sec)
http://liyangbit.com
99
---
## Page 100
Chapter1.超经典MySQL练习50题
Python数据之道
1.40题目39
1.40.1题目需求
每门课程的学生人数
1.40.2SQL实现
select
c_id
, count(s_id)
from Score
group by c_id;
mysql>
select
>
c_id
,count(s_id)
from Score
>
group
obyc_id；
c_id
count(s_id)
01
6
02
一
6
03
6
rows inset（0.o0 sec）
如果想连接到课程名称：
报错！！！
select
sc.c_id
,C.c_nane
http://liyangbit.com
100
---
## Page 101
Chapter1.超经典MySQL练习50题
Python数据之道
, count(sc.s_id)
fron Score sc
join Course c
group by sc.c_id;
ERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP BY clause and contains nonag-
gregated column *test.c.c_name" which is not functionally dependent on columns in GROUP BY
clause; this is incompatible with sql_mode=only_full_group_by
解决的方法是将我们之前的结果作为临时表和Course表来连接查询：
select
c.c_name
课程名称
,c.c_id课程编号
4
,t.num
人数
5
fron Course c
6
join(select
c_id
,count(s_id)
i
num
from Score
10
group by c_id)t
上面结果的临时表
11
on c.c_id = t.c_id ;
课程名称
课程编号
人数
语文
θ1
6
数学
θ2
6
英语
03
SMOJ
inset（0.00sec)
1.41题目40
1.41.1题目需求