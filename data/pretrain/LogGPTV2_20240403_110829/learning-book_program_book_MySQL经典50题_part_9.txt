### 优化后的文本

#### 学生信息
| 学号 | 姓名 | 出生日期 | 性别 |
| --- | --- | --- | --- |
| 01 | 赵雷 | 1990-01-01 | 男 |
| 02 | 钱电 | 1990-12-21 | 男 |
| 03 | 孙风 | 1990-05-20 | 男 |
| 04 | 李云 | 1990-08-06 | 男 |
| 05 | 周梅 | 1991-12-01 | 女 |
| 06 | 吴兰 | 1992-03-01 | 女 |
| 07 | 郑竹 | 1989-07-02 | 女 |
| 08 | 王菊 | 1990-01-20 | 女 |

现有数据中没有同名的学生，但随着班级人数的增加，可能会出现同名学生的情况。

#### 查询同名同性的学生
```sql
SELECT a.s_name, a.s_sex, COUNT(*)
FROM Student a
JOIN Student b
ON a.s_id != b.s_id
AND a.s_sex = b.s_sex
AND a.s_name = b.s_name
GROUP BY a.s_name, a.s_sex;
```

如果存在满足条件的数据，查询结果将会显示出来。

#### 查询1990年出生的学生信息
```sql
SELECT *
FROM Student
WHERE s_birth LIKE '1990%';
```
查询结果：
| 学号 | 姓名 | 出生日期 | 性别 |
| --- | --- | --- | --- |
| 01 | 赵雷 | 1990-01-01 | 男 |
| 02 | 钱电 | 1990-12-21 | 男 |
| 03 | 孙风 | 1990-05-20 | 男 |
| 04 | 李云 | 1990-08-06 | 男 |
| 08 | 王菊 | 1990-01-20 | 女 |

#### 查询每门课程的平均成绩（按平均成绩降序排列）
```sql
SELECT c.c_id, c.c_name, ROUND(AVG(sc.s_score), 2) AS avg_score
FROM Score sc
JOIN Course c ON sc.c_id = c.c_id
GROUP BY c.c_id, c.c_name
ORDER BY avg_score DESC, c.c_id;
```
查询结果：
| 课程编号 | 课程名称 | 平均成绩 |
| --- | --- | --- |
| 02 | 数学 | 74.50 |
| 03 | 英语 | 73.50 |
| 01 | 语文 | 66.50 |

#### 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩
```sql
SELECT sc.s_id, s.s_name, ROUND(AVG(sc.s_score), 2) AS avg_score
FROM Score sc
JOIN Student s ON sc.s_id = s.s_id
GROUP BY sc.s_id, s.s_name
HAVING avg_score >= 85;
```
查询结果：
| 学号 | 姓名 | 平均成绩 |
| --- | --- | --- |
| 01 | 赵雷 | 88.67 |
| 07 | 郑竹 | 91.50 |

#### 查询课程名称为“数学”且分数低于60的学生姓名和分数
```sql
SELECT s.s_name, sc.s_score
FROM Score sc
JOIN Student s ON sc.s_id = s.s_id
JOIN Course c ON sc.c_id = c.c_id
WHERE c.c_name = '数学' AND sc.s_score < 60;
```

#### 查询所有学生的课程及分数情况
```sql
SELECT 
    s.s_id, 
    s.s_name, 
    SUM(CASE WHEN c.c_name = '语文' THEN sc.s_score ELSE 0 END) AS 语文,
    SUM(CASE WHEN c.c_name = '数学' THEN sc.s_score ELSE 0 END) AS 数学,
    SUM(CASE WHEN c.c_name = '英语' THEN sc.s_score ELSE 0 END) AS 英语,
    SUM(sc.s_score) AS 总分
FROM Student s
LEFT JOIN Score sc ON s.s_id = sc.s_id
LEFT JOIN Course c ON sc.c_id = c.c_id
GROUP BY s.s_id, s.s_name;
```

#### 查询任何一门课程成绩在70分以上的姓名、课程名称和分数
```sql
SELECT s.s_name, c.c_name, sc.s_score
FROM Score sc
JOIN Student s ON sc.s_id = s.s_id
JOIN Course c ON sc.c_id = c.c_id
WHERE sc.s_score > 70
GROUP BY s.s_name, c.c_name, sc.s_score;
```

#### 查询不及格的课程
```sql
SELECT sc.c_id, c.c_name, sc.s_score
FROM Score sc
JOIN Course c ON sc.c_id = c.c_id
WHERE sc.s_score < 60;
```

#### 查询语文课程成绩不低于80分的学生
```sql
SELECT sc.s_id, s.s_name, sc.s_score
FROM Score sc
JOIN Student s ON sc.s_id = s.s_id
JOIN Course c ON sc.c_id = c.c_id
WHERE c.c_id = 01 AND sc.s_score >= 80;
```

#### 每门课程的学生人数
```sql
SELECT c.c_name AS 课程名称, c.c_id AS 课程编号, t.num AS 人数
FROM Course c
JOIN (
    SELECT c_id, COUNT(s_id) AS num
    FROM Score
    GROUP BY c_id
) t ON c.c_id = t.c_id;
```

查询结果：
| 课程名称 | 课程编号 | 人数 |
| --- | --- | --- |
| 语文 | 01 | 6 |
| 数学 | 02 | 6 |
| 英语 | 03 | 6 |

这些SQL查询涵盖了常见的学生信息和成绩统计需求。希望这些优化后的查询能帮助你更好地理解和使用MySQL。