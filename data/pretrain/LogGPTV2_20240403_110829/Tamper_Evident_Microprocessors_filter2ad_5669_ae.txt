resolution.
Single issue, 1 INT ALU, T2 SPARC register
windows.
8KB, 4-way L1 D cache 1RW, 128-entry FA
DTLB (both 3 cycle access, 53 cycles on TLB
miss, write-back policy), uniﬁed 4 MB, 16-way
L2 cache, 1 RW (both 12 cycle access, write-
back policy), Unlimited main memory at 250
cycle access latency.
Fetch, Cache, Pick, Decode, Execute, Read,
Bypass, Writeback.
bzip2, gcc, mcf, gobmk, hmmer, test inputs,
base compiler optimizations, SPARC compiler
alter the microarchitectural transactions of another thread, the
n-wide packet can function semantically as n independent
monitors. The out-of-order case is more complicated as it
requires our mechanisms to be extended to handle reorder-
ing of in-ﬂight predictor/reactor tokens. Handling speculative
techniques would also require extensions, though we believe
that the principles of our system can be applied to work in this
case without any false alarms by identifying what the lifetime
of an instruction is (whether it is prefetched, speculated or
committed) and monitoring it for that lifetime. There are other
advanced features of modern microprocessors, and each may
warrant its own attention in future work. For example, some
microprocessors have a privileged or supervisor state that is
separate from the permissions governed by the TLB. Such
additions would open the door for control corrupter attacks
and would warrant additional monitoring triangles.
B. Evaluation Methodology
We demonstrate our design on a simpliﬁed model of Sun
Microsystems’ OpenSPARC T2 microarchitecture. We chose
this architecture and instantiation because it
is the only
“industrial-strength” hardware design that is also available as
open source. While our experiments and analysis were per-
formed on our simulated core, based on the OpenSPARC T2
microprocessor design, we use nothing unique to that design,
and we believe our techniques can in principle be applied to
any microprocessor that has memory hierarchy and pipelines.
In our case study, we used the RTL hardware implementation
(1) to construct well-formed, meaningful attacks to test the
resiliency of the system and (2) to systematically determine
the number of on-chip units that can be covered by our design.
In addition, to measure congestion, similar to many computer
architecture studies, we use a cycle-accurate simulator that
exactly models one core of our microprocessor. The details
of our simulation infrastructure are summarized in Table II.
We implemented all the TRUSTNET and DATAWATCH monitor
triangles discussed in this paper (Tables III, IV) including the
partially duplicated TLBs.
182
DESCRIPTIONS OF THE EMITTER PROTECTION MONITORS FOR OUR IMPLEMENTATION
TABLE III
Monitored Unit
Predictor
Reactor
IDU
IFU
LSU
I-Cache
IFU
I-Cache
IDU
IFU
EXU
IDU
D-Cache
L2 Cache
L2 Cache
I-Cache
MMU
D-Cache
LSU
L2 Cache
L2 Cache
D-Cache
MMU
D-Cache
LSU
L2 Cache
L2 Cache
D-Cache
MMU
Invariant
# of instructions in = # of instructions out
# of instructions in = # of instructions out
# of Memory ops issued = # of Memory ops
performed
# of requested L2 instructions = # of IFU requests
that miss
# of requested instructions from memory = # of
I-Cache requests that miss in L2
# of requested L2 data = # of LSU requests that
miss
# of requested data from memory = # of D-Cache
requests that miss in L2
# of L2 cache lines written = # of LSU line writes
issued
# of Memory lines written = # of D-Cache line
writes issued
Example of attack thwarted
IDU stalls the fetch unit and sends ma-
licious commands to the EXU
IFU sends spurious instructions to the
IDU
LSU performs shadow loads
I-Cache returns spurious instructions to
IFU while waiting on the L2 Cache
L2 Cache returns spurious instructions
while waiting on main memory
D-Cache returns fake data while waiting
on the L2 Cache
L2 Cache returns spurious data while
waiting on main memory
D-Cache sends write to L2 cache un-
prompted
L2 sends write to memory unprompted
Legend: IDU = decode unit, IFU = fetch unit, LSU = load/store unit, I-Cache = instruction cache, D-Cache = data cache, L2 Cache = uniﬁed L2 cache
Monitored Unit
Predictor
Reactor
Invariant
TABLE IV
CORRUPTER PROTECTION MONITORS
IDU
Checker D-TLB
I-Cache
LSU
PC received = PC computed
TLB output = checker TLB output
IFU
D-TLB
I-TLB
IDU
attack
of
Example
thwarted
IFU branches incorrectly
TLB violates permissions
Type of signature
Eight bit signature
Full
permissions
translation
Full
translation
Two bit signature
permissions
and
and
Checker I-TLB
IFU
IFU
LSU
TLB output = checker TLB output
TLB violates permissions
Memory ops issued = memory ops per-
formed
Decoder
load/store
causes
shadow
Legend: IFU = fetch unit, IDU = decode unit, TLB = translation lookaside buffer, LSU = load/store unit, I-Cache = instruction cache
C. Attack Space Coverage
To determine how good TRUSTNET and DATAWATCH are at
protecting against attacks on microprocessors, we ﬁrst need
to measure the microprocessor attack/vulnerability space. To
measure the attack/vulnerability space, we observe that an
on-chip unit is only vulnerable to backdoors in-so-far as its
interfaces are threatened. What goes on inside the unit doesn’t
matter so long as everything that goes in and out of it is correct.
If all inputs and outputs are the same as in an uncorrupted
chip, then there is no problem, because there has been no
corruption or exﬁltration of data. Therefore, to identify the
points of vulnerability, we record the interfaces between on-
chip units. The efﬁcacy of our solution is then determined
by whether or not these interfaces are protected from attacks
using TRUSTNETand DATAWATCH.
Figure 6 (A,B,C,D) shows the distribution of shared in-
terfaces between units within the overall chip, the processor
core, the memory elements and system elements respectively,
in the RTL implementation of the OpenSPARC T2. Each
measurement in the grid represents the number of signals that
enter and leave a unit within the processor. All communication
is normalized to the unit that has the highest communication.
Very small bars (below 0.1) signify connections that are not
part of instruction processing, but rather contain miscellaneous
information, such as power settings, clock distribution, etc
(attacks on these may be possible at fabrication, e.g., mis-
clocking a certain unit, but would be diffcult at the RTL code
level). Most of these miscellaneous signals are not present in
our case study. Thus, the microprocessor in our case study is
somewhat simpler than a real OpenSPARC T2 and lacks some
of the less central features, such as power management and
ﬂoating point operations.
As can be seen from Tables III and IV, that describe known
emitter and corrupter monitors respectively, and Figure 6,
that describes all the interfaces, that all of the units in the
core that have signiﬁcant communications (more than 0.1) are
monitored by TRUSTNET and DATAWATCH. For this study,
we used manual analysis to identify which signals on the
interfaces can be altered to cause emitter and control corrupter
attacks to verify that TRUSTNET and DATAWATCH can cover
these signals. Based on this analysis, most of the vulnerable in-
terfaces can be protected against the known attacks. However,
our manual analysis may have failed to exhaust all possible
attack scenarios; in future work, we hope to automate this
process to guarantee full coverage.
While TRUSTNET and DATAWATCH cover the processor
cores and the cache hierarchy against the emitter and control
corrupter attacks we identiﬁed, we did not cover the ﬂoat-
ing point logic, memory controller units, crossbars and the
miscellaneous logic. We believe that formal veriﬁcation can
be used to cover ﬂoating point logic as is already in vogue.
Similarly, we beleive that the crossbar in our case study is
simple enough to be amenable to formal veriﬁcation. We are
not sure if our strategy can cover the miscellaneous logic such
183
Fig. 6. An overview of the communications that occur in a real OpenSPARC T2 microprocessor. (A) displays a partition of the microprocessor into four
basic parts: ’System’ includes interfaces, clock generators, and other system level features. ’Memory’ cache banks, non-cacheable units, and other memory
structures. The core represents one processor core (there are eight cores in all). The crossbar coordinates communications between the cores and the cache
banks (which are partitioned on chip). (B), (C), and (D) show internal communications going on within the system, memory, and cores.
as power management unit and the stream processing unit (we
have not had time to understand the implementation) but these
units have very little contact with other units on chip (less
than 0.1 normalized), and we believe it is unlikely that they
will signiﬁcantly increase attack vulnerability. The difﬁculty
with covering the MCU with TRUSTNET is that the MCU
communicates with only the main memory and that there is
nothing on-chip that can serve as a reactor. The simplest way to
handle this special case would be to duplicate the MCU control
logic, which serves the same purpose as complete duplication
but without increasing memory bandwidth.
D. Attacks and Detection
Based on our study of the OpenSPARC T2 RTL, we con-
structed the emitter and control corrupter attacks described in
Table V and injected the attacks into our simulator to measure
the percentage of false negatives and false positives. We did
not implement the data corrupter attacks. These attacks, such
as the one which alters the address of an otherwise valid load,
are situations where some logic duplication may be required.
In this case, the address (or a hash of the address) could be
forwarded to make sure it has not been altered. However, this
was not done in our implementation, which protected only
against emitter and control corrupter attacks. As stated earlier,
we also did not take any corrective or rollback measures with
alarms; we only recorded them.
As was expected, all emitter and control corrupter attacks
were caught in all cases. This is very important because it
demonstrates that our system provides coverage for all of the
units we applied it to and for various types of attacks. We
also measured the overall accuracy of our solution with no
attacks, as measured by the percentage of the cycles in which
there are no false positives thrown. For all tests run, no false
positives occurred. It is vital that there are no false positives
and no false negatives because the latter would be a breach
of security and the former would cripple the system.
E. Trafﬁc
Since TRUSTNET and DATAWATCH do not stall the pipeline
or otherwise increase computational cycles, the most relevant
cost of the system is the increase in on-chip network trafﬁc.
This increase depends on the architecture, but
it can be
bounded in general if we assume a cache hierarchy and one
or more pipelined computational units. The total amount of
trafﬁc in the worst case is bounded above as per the following
184
SOME HYPOTHETICAL ATTACKS ON AN INORDER MICROARCHITECTURE. THESE ATTACKS WERE CONCEIVED BY MANUAL ANALYSIS OF THE
OPENSPARC T2 RTL (INSPIRED BY [36]) AND IMPLEMENTED IN A SIMULATOR TO TEST OUR DESIGNS. THIS ARRAY OF ATTACKS THREATENS EVERY
PIPELINE STAGE AS WELL AS THE MEMORY SYSTEM. THESE ATTACKS CAN VIOLATE CONFIDENTIALITY, INTEGRITY, AND AVAILABILITY. ONLY THE
EMITTER AND CONTROL CORRUPTER ATTACKS WERE IMPLEMENTED IN OUR CASE STUDY. THE DATA CORRUPTER ATTACKS ARE DISCUSSED IN THIS
PAPER AND PROVIDED HERE FOR REFERENCE BUT WERE NOT IMPLEMENTED.
TABLE V
Attack
Possible User Level Effect
Backdoor Type
Protection