title:BotHunter: Detecting Malware Infection Through IDS-Driven Dialog Correlation
author:Guofei Gu and
Phillip A. Porras and
Vinod Yegneswaran and
Martin W. Fong
BotHunter: Detecting Malware Infection Through IDS-Driven Dialog Correlation
Guofei Gu1, Phillip Porras2, Vinod Yegneswaran2, Martin Fong2, Wenke Lee1
1College of Computing
Georgia Institute of Technology
266 Ferst Drive
Atlanta, GA 30332
2Computer Science Laboratory
SRI International
333 Ravenswood Avenue
Menlo Park, CA 94025
Abstract
We present a new kind of network perimeter monitoring
strategy, which focuses on recognizing the infection and
coordination dialog that occurs during a successful mal-
ware infection. BotHunter is an application designed to
track the two-way communication ﬂows between inter-
nal assets and external entities, developing an evidence
trail of data exchanges that match a state-based infec-
tion sequence model. BotHunter consists of a correla-
tion engine that is driven by three malware-focused net-
work packet sensors, each charged with detecting spe-
ciﬁc stages of the malware infection process, includ-
ing inbound scanning, exploit usage, egg downloading,
outbound bot coordination dialog, and outbound attack
propagation. The BotHunter correlator then ties together
the dialog trail of inbound intrusion alarms with those
outbound communication patterns that are highly indica-
tive of successful local host infection. When a sequence
of evidence is found to match BotHunter’s infection di-
alog model, a consolidated report is produced to capture
all the relevant events and event sources that played a role
during the infection process. We refer to this analytical
strategy of matching the dialog ﬂows between internal
assets and the broader Internet as dialog-based correla-
tion, and contrast this strategy to other intrusion detec-
tion and alert correlation methods. We present our exper-
imental results using BotHunter in both virtual and live
testing environments, and discuss our Internet release of
the BotHunter prototype. BotHunter is made available
both for operational use and to help stimulate research in
understanding the life cycle of malware infections.
1
Over the last decade, malicious software or malware has
risen to become a primary source of most of the scan-
ning [38], (distributed) denial-of-service (DOS) activi-
ties [28], and direct attacks [5], taking place across the
Internet. Among the various forms of malicious soft-
ware, botnets in particular have recently distinguished
Introduction
themselves to be among the premier threats to computing
assets [20]. Like the previous generations of computer
viruses and worms, a bot is a self-propagating applica-
tion that infects vulnerable hosts through direct exploita-
tion or Trojan insertion. However, all bots distinguish
themselves from the other malware forms by their abil-
ity to establish a command and control (C&C) channel
through which they can be updated and directed. Once
collectively under the control of a C&C server, bots form
what is referred to as a botnet. Botnets are effectively
a collection of slave computing and data assets to be
sold or traded for a variety of illicit activities, including
information and computing resource theft, SPAM pro-
duction, hosting phishing attacks, or for mounting dis-
tributed denial-of-service (DDoS) attacks [12, 34, 20].
Network-based intrusion detection systems (IDSs) and
intrusion prevention systems (IPSs) may come to mind as
the most appealing technology for detecting and mitigat-
ing botnet threats. Traditional IDSs, whether signature
based [30, 35] or anomaly based [46, 8], typically focus
on inbound packets ﬂows for signs of malicious point-to-
point intrusion attempts. Network IDSs have the capacity
to detect initial incoming intrusion attempts, and the pro-
liﬁc frequency with which they produce such alarms in
operational networks is well documented [36]. However,
distinguishing a successful local host infection from the
daily myriad of scans and intrusion attempts is as critical
and challenging a task as any facet of network defense.
Intrusion report correlation enables an analyst to ob-
tain higher-level interpretations of network sensor alert
streams, thereby alleviating noise-level issues with tradi-
tional network IDSs. Indeed, there is signiﬁcant research
in the area of consolidating network security alarms into
coherent incident pictures. One major vein of research
in intrusion report correlation is that of alert fusion, i.e.,
clustering similar events under a single label [42]. The
primary goal of fusion is log reduction, and in most sys-
tems similarity is based upon either attributing multiple
events to a single threat agent or providing a consoli-
USENIX Association
16th USENIX Security Symposium
167
dated view of a common set of events that target a single
victim. The bot infection problem satisﬁes neither cri-
terion. The bot infection process spans several diverse
transactions that occur in multiple directions and poten-
tially involves several active participants. A more appli-
cable area of alert correlation research is multistage at-
tack recognition, in which predeﬁned scenario templates
capture multiple state transition sequences that may be
initiated by multiple threat agents [40, 29]. In Section 3
we discuss why predeﬁned state transition models sim-
ply do not work well in bot infection monitoring. While
we argue that bot infections do regularly follow a series
of speciﬁc steps, we ﬁnd it rare to accurately detect all
steps, and ﬁnd it equally difﬁcult to predict the order and
time-window in which these events are recorded.
Our Approach: We introduce an “evidence-trail” ap-
proach to recognizing successful bot infections through
the communication sequences that occur during the in-
fection process. We refer to this approach as the infec-
tion dialog correlation strategy. In dialog correlation, bot
infections are modeled as a set of loosely ordered com-
munication ﬂows that are exchanged between an inter-
nal host and one or more external entities. Speciﬁcally,
we model all bots as sharing a common set of under-
lying actions that occur during the infection life cycle:
target scanning, infection exploit, binary egg download
and execution, command and control channel establish-
ment, and outbound scanning. We neither assume that
all these events are required by all bots nor that every
event will be detected by our sensor alert stream. Rather,
our dialog correlation system collects an evidence trail of
relevant infection events per internal host, looking for a
threshold combination of sequences that will satisfy our
requirements for bot declaration.
Our System: To demonstrate our methodology, we
introduce a passive network monitoring system called
BotHunter, which embodies our infection dialog cor-
relation strategy. The BotHunter correlator is driven
by Snort [35] with a customized malware-focused rule-
set, which we further augment with two additional bot-
speciﬁc anomaly-detection plug-ins for malware analy-
sis: SLADE and SCADE. SLADE implements a lossy
n-gram payload analysis of incoming trafﬁc ﬂows, tar-
geting byte-distribution divergences in selected proto-
cols that are indicative of common malware intrusions.
SCADE performs several parallel and complementary
malware-focused port scan analyses to both incoming
and outgoing network trafﬁc. The BotHunter correlator
associates inbound scan and intrusion alarms with out-
bound communication patterns that are highly indicative
of successful local host infection. When a sufﬁcient se-
quence of alerts is found to match BotHunter’s infec-
tion dialog model, a consolidated report is produced to
capture all the relevant events and event participants that
contributed to the infection dialog.
Contributions: Our primary contribution in this pa-
per is to introduce a new network perimeter monitor-
ing strategy, which focuses on detecting malware infec-
tions (speciﬁcally bots/botnets) through IDS-driven dia-
log correlation. We present an abstraction of the major
network packet dialog sequences that occur during a suc-
cessful bot infection, which we call our bot infection di-
alog model. Based on this model we introduce three bot-
speciﬁc sensors, and our IDS-independent dialog corre-
lation engine. Ours is the ﬁrst real-time analysis system
that can automatically derive a proﬁle of the entire bot
detection process, including the identiﬁcation of the vic-
tim, the infection agent, the source of the egg download,
and the command and control center.1 We also present
our analysis of BotHunter against more than 2,000 re-
cent bot infection experiences, which we compiled by
deploying BotHunter both within a high-interaction hon-
eynet and through a VMware experimentation platform
using recently captured bots. We validate our infection
sequence model by demonstrating how our correlation
engine successfully maps the network traces of a wide
variety of recent bot infections into our model.
The remainder of this paper is outlined as follows.
In Section 2 we discuss the sequences of communica-
tion exchanges that occur during a successful bot and
worm infection. Section 3 presents our bot infection di-
alog model, and deﬁnes the conditions that compose our
detection requirements. Section 4 presents the BotH-
unter architecture, and Section 5 presents our experi-
ments performed to assess BotHunter’s detection perfor-
mance. Section 6 discusses limitations and future work,
and Section 7 presents related work. Section 8 discusses
our Internet release of the BotHunter system, and in Sec-
tion 9 we summarize our results.
2 Understanding Bot Infection Sequences
Understanding the full complexity of the bot infection
life cycle is an important challenge for future network
perimeter defenses. From the vantage point of the net-
work egress position, distinguishing successful bot in-
fections from the continual stream of background ex-
ploit attempts requires an analysis of the two-way dia-
log ﬂow that occurs between a network’s internal hosts
and the Internet. On a well-administered network, the
threat of a direct-connect exploit is limited by the extent
to which gateway ﬁltering is enabled. However, contem-
porary malware families are highly versatile in their abil-
ity to attack susceptible hosts through email attachments,
infected P2P media, and drive-by-download infections.
1Our current system implements a classic bot infection dialog
model. One can deﬁne new models in an XML conﬁguration ﬁle and
add new detection sensors. Our correlator is IDS-independent, ﬂexible,
and extensible to process new models without modiﬁcation.
168
16th USENIX Security Symposium
USENIX Association
Furthermore, with the ubiquity of mobile laptops and
virtual private networks (VPNs), direct infection of an
internal asset need not necessarily take place across an
administered perimeter router. Regardless of how mal-
ware enters a host, once established inside the network
perimeter the challenge remains to identify the infected
machine and remove it as quickly as possible.
For this present study, we focus on a rather narrow
aspect of bot behavior. Our objective is to understand
the sequence of network communications and data ex-
changes that occur between a victim host and other net-
work entities. To illustrate the stages of a bot infection,
we outline an infection trace from one example bot, a
variant of the Phatbot (aka Gaobot) family [4]. Figure 1
presents a summary of communication exchanges that
were observed during a local host Phatbot infection.
As with many common bots that propagate through
remote exploit injection, Phatbot ﬁrst (step 1) probes an
address range in search of exploitable network services
or responses from Trojan backdoors that may be used to
enter and hijack the infected machine. If Phatbot receives
a connection reply to one of the targeted ports on a host,
it then launches an exploit or logs in to the host using a
backdoor. In our experimental case, a Windows work-
station replies to a 135-TCP (MS DCE/RPC) connection
request, establishing a connection that leads to an imme-
diate RPC buffer overﬂow (step 2). Once infected, the
victim host is directed by an upload shell script to open
a communication channel back to the attacker to down-
load the full Phatbot binary (step 3). The bot inserts it-
self into the system boot process, turns off security soft-
ware, probes the local network for additional NetBIOS
shares, and secures the host from other malware that may
be loaded on the machine. The infected victim next dis-
tinguishes itself as a bot by establishing a connection to a
botnet C&C server, which in the case of Phatbot is estab-
lished over an IRC channel (step 4). Finally, the newly
infected bot establishes a listen port to accept new binary
updates and begins scanning other external victims on
behalf of the botnet (step 5).
3 Modeling the Infection Dialog Process
While Figure 1 presents an example of a speciﬁc bot,
the events enumerated are highly representative of the
life cycle phases that we encounter across the various
bot families that we have analyzed. Our bot propagation
model is primarily driven by an assessment of outward-
bound communication ﬂows that are indicative of behav-
ior associated with botnet coordination. Where possible,
we seek to associate such outbound communication pat-
terns with observed inbound intrusion activity. However,
this latter activity is not a requirement for bot declaration.
Neither are incoming scan and exploit alarms sufﬁcient
to declare a successful malware infection, as we assume
that a constant stream of scan and exploit signals will be
observed from the egress monitor.
We model an infection sequence as a composition
of participants and a loosely ordered sequence of ex-
changes: Infection I = , where A
= Attacker, V = Victim, E = Egg Download Location, C
= C&C Server, and V’ = the Victim’s next propagation
target. D represents an infection dialog sequence
composed of bidirectional ﬂows that cross the egress
boundary. Our infection dialog D is composed of a set
of ﬁve potential dialog transactions (E1, E2, E3, E4,
E5), some subset of which may be observed during an
instance of a local host infection:
−
−
−
−
−
E1: External to Internal Inbound Scan
E2: External to Internal Inbound Exploit
E3: Internal to External Binary Acquisition
E4: Internal to External C&C Communication
E5: Internal to External Outbound Infection Scanning
Figure 2 illustrates our bot infection dialog model
used for assessing bidirectional ﬂows across the network
boundary. Our dialog model is similar to the model pre-
sented by Rajab et al.
in their analysis of 192 IRC bot
instances [33]. However, the two models differ in ways
that arise because of our speciﬁc perspective of egress
boundary monitoring. For example, we incorporate early
initial scanning, which is often a preceding observation
that occurs usually in the form of IP sweeps that tar-
get a relatively small set of selected vulnerable ports.
We also exclude DNS C&C lookups, which Rajab et
al. [33] include as a consistent precursor to C&C co-
ordination, because DNS lookups are often locally han-
dled or made through a designated DNS server via inter-
nal packet exchanges that should not be assumed visible
from the egress position. Further, we exclude local host
modiﬁcations and internal network propagation because
these are also events that are not assumed to be visible
from the egress point. Finally, we include internal-to-
external attack propagation, which Rajab et al. [33] ex-
clude. While our model is currently targeted for passive
network monitoring events, it will be straightforward to
include localhost-based or DNS-server-based IDSs that
can augment our dialog model.
Figure 2 is not intended to provide a strict ordering
of events, but rather to capture a typical infection dialog
(exceptions to which we discuss below). In the idealized
sequence of a direct-exploit bot infection dialog, the bot
infection begins with an external-to-internal communi-
cation ﬂow that may encompass bot scanning (E1) or a
direct inbound exploit (E2). When an internal host has
been successfully compromised (we observe that many
compromise attempts regularly end with process dumps
or system freezes), the newly compromised host down-
USENIX Association
16th USENIX Security Symposium
169
1
TCP Connections: 2745/Beagle; 135,1025/DCOM1,2; 445/NetBIOS
3127/MyDoom; 6129/Dameware; 139/NetBIOS; 5000/UPNP
Opens backdoor
port 17509
Victim
2
DCERPC exploit (port 135)
DCERPC Exploit (port 135)
Attacker
3