# BotHunter: Detecting Malware Infection Through IDS-Driven Dialog Correlation

**Authors:**
- Guofei Gu<sup>1</sup>
- Phillip A. Porras<sup>2</sup>
- Vinod Yegneswaran<sup>2</sup>
- Martin W. Fong<sup>2</sup>
- Wenke Lee<sup>1</sup>

**Affiliations:**
1. College of Computing, Georgia Institute of Technology, 266 Ferst Drive, Atlanta, GA 30332
2. Computer Science Laboratory, SRI International, 333 Ravenswood Avenue, Menlo Park, CA 94025

## Abstract

We introduce a novel network perimeter monitoring strategy that focuses on recognizing the infection and coordination dialog during a successful malware infection. BotHunter is an application designed to track two-way communication flows between internal assets and external entities, developing an evidence trail of data exchanges that match a state-based infection sequence model. The system consists of a correlation engine driven by three malware-focused network packet sensors, each detecting specific stages of the malware infection process, including inbound scanning, exploit usage, egg downloading, outbound bot coordination, and attack propagation. When a sequence of evidence matches BotHunter’s infection dialog model, a consolidated report is generated, capturing all relevant events and event sources involved in the infection process. We refer to this analytical strategy as dialog-based correlation, contrasting it with other intrusion detection and alert correlation methods. Experimental results from both virtual and live testing environments are presented, along with the Internet release of the BotHunter prototype, which is available for operational use and to stimulate research into the lifecycle of malware infections.

## 1. Introduction

Over the past decade, malicious software (malware) has become a primary source of most scanning, distributed denial-of-service (DDoS) activities, and direct attacks on the Internet. Among various forms of malware, botnets have emerged as one of the most significant threats to computing assets. Bots, like previous generations of computer viruses and worms, are self-propagating applications that infect vulnerable hosts through direct exploitation or Trojan insertion. However, bots distinguish themselves by their ability to establish a command and control (C&C) channel, allowing them to be updated and directed. Once under the control of a C&C server, bots form a botnet, which can be used for illicit activities such as information theft, spam production, phishing, and DDoS attacks.

Network-based intrusion detection systems (IDSs) and intrusion prevention systems (IPSs) are commonly used to detect and mitigate botnet threats. Traditional IDSs, whether signature-based or anomaly-based, typically focus on inbound traffic for signs of malicious point-to-point intrusion attempts. While these systems can detect initial incoming intrusions, distinguishing a successful local host infection from the daily myriad of scans and intrusion attempts remains a critical and challenging task. Intrusion report correlation helps analysts obtain higher-level interpretations of network sensor alerts, reducing noise and providing coherent incident pictures. Research in alert fusion and multistage attack recognition has been conducted, but these approaches are not well-suited for bot infection detection due to the diverse and multi-directional nature of bot infection processes.

### Our Approach

We introduce an "evidence-trail" approach to recognizing successful bot infections through the communication sequences that occur during the infection process. This approach, called infection dialog correlation, models bot infections as a set of loosely ordered communication flows exchanged between an internal host and one or more external entities. We model all bots as sharing a common set of underlying actions: target scanning, infection exploit, binary egg download and execution, C&C channel establishment, and outbound scanning. Our dialog correlation system collects an evidence trail of relevant infection events per internal host, looking for a threshold combination of sequences that satisfy our requirements for bot declaration.

### Our System

To demonstrate our methodology, we introduce a passive network monitoring system called BotHunter, which embodies our infection dialog correlation strategy. The BotHunter correlator is driven by Snort with a customized malware-focused rule set, augmented by two additional bot-specific anomaly-detection plugins: SLADE and SCADE. SLADE performs lossy n-gram payload analysis on incoming traffic, targeting byte-distribution divergences indicative of common malware intrusions. SCADE conducts parallel and complementary port scan analyses on both incoming and outgoing network traffic. The BotHunter correlator associates inbound scan and intrusion alarms with outbound communication patterns indicative of successful local host infection. When a sufficient sequence of alerts matches BotHunter’s infection dialog model, a consolidated report is generated, capturing all relevant events and participants.

### Contributions

Our primary contribution is introducing a new network perimeter monitoring strategy that detects malware infections, specifically bots and botnets, through IDS-driven dialog correlation. We present an abstraction of the major network packet dialog sequences during a successful bot infection, called the bot infection dialog model. Based on this model, we introduce three bot-specific sensors and an IDS-independent dialog correlation engine. BotHunter is the first real-time analysis system that can automatically derive a profile of the entire bot detection process, including the identification of the victim, the infection agent, the source of the egg download, and the C&C center. We validate our model by demonstrating how our correlation engine successfully maps the network traces of various recent bot infections into our model.

The remainder of the paper is organized as follows:
- Section 2 discusses the communication exchanges during a successful bot and worm infection.
- Section 3 presents our bot infection dialog model and defines the conditions for detection.
- Section 4 describes the BotHunter architecture.
- Section 5 presents our experiments to assess BotHunter’s detection performance.
- Section 6 discusses limitations and future work.
- Section 7 covers related work.
- Section 8 discusses the Internet release of the BotHunter system.
- Section 9 summarizes our results.

## 2. Understanding Bot Infection Sequences

Understanding the full complexity of the bot infection lifecycle is crucial for future network perimeter defenses. From the network egress position, distinguishing successful bot infections from the continual stream of background exploit attempts requires analyzing the two-way dialog flow between a network’s internal hosts and the Internet. On well-administered networks, the threat of direct-connect exploits is limited by gateway filtering. However, contemporary malware families can attack susceptible hosts through email attachments, infected P2P media, and drive-by-download infections. With the ubiquity of mobile laptops and virtual private networks (VPNs), direct infection of an internal asset may not necessarily occur across an administered perimeter router. Regardless of how malware enters a host, once inside the network perimeter, the challenge is to identify and remove the infected machine as quickly as possible.

For this study, we focus on the sequence of network communications and data exchanges between a victim host and other network entities. To illustrate, we outline an infection trace from a variant of the Phatbot (aka Gaobot) family. Figure 1 summarizes the communication exchanges observed during a local host Phatbot infection.

Phatbot first probes an address range for exploitable network services or responses from Trojan backdoors (step 1). If Phatbot receives a connection reply on a targeted port, it launches an exploit or logs in using a backdoor. In our experiment, a Windows workstation replies to a 135-TCP (MS DCE/RPC) connection request, leading to an RPC buffer overflow (step 2). Once infected, the victim host is directed to open a communication channel back to the attacker to download the full Phatbot binary (step 3). The bot inserts itself into the system boot process, disables security software, probes for additional NetBIOS shares, and secures the host from other malware. The infected victim then establishes a connection to a botnet C&C server over an IRC channel (step 4). Finally, the newly infected bot sets up a listen port to accept new binary updates and begins scanning other external victims on behalf of the botnet (step 5).

## 3. Modeling the Infection Dialog Process

While Figure 1 illustrates a specific bot, the enumerated events are representative of the lifecycle phases encountered across various bot families. Our bot propagation model is primarily driven by assessing outward-bound communication flows indicative of botnet coordination. Where possible, we associate these outbound communication patterns with observed inbound intrusion activity. However, this latter activity is not required for bot declaration. Neither are incoming scan and exploit alarms sufficient to declare a successful malware infection, as we assume a constant stream of scan and exploit signals will be observed from the egress monitor.

We model an infection sequence as a composition of participants and a loosely ordered sequence of exchanges: \( I = \{A, V, E, C, V'\} \), where \( A \) = Attacker, \( V \) = Victim, \( E \) = Egg Download Location, \( C \) = C&C Server, and \( V' \) = the Victim’s next propagation target. \( D \) represents an infection dialog sequence composed of bidirectional flows that cross the egress boundary. Our infection dialog \( D \) is composed of a set of five potential dialog transactions (E1, E2, E3, E4, E5), some subset of which may be observed during a local host infection:

- E1: External to Internal Inbound Scan
- E2: External to Internal Inbound Exploit
- E3: Internal to External Binary Acquisition
- E4: Internal to External C&C Communication
- E5: Internal to External Outbound Infection Scanning

Figure 2 illustrates our bot infection dialog model used for assessing bidirectional flows across the network boundary. Our dialog model is similar to the model presented by Rajab et al. in their analysis of 192 IRC bot instances. However, our model differs in ways specific to egress boundary monitoring. For example, we incorporate early initial scanning, which often precedes IP sweeps targeting selected vulnerable ports. We exclude DNS C&C lookups, which are often locally handled or made through a designated DNS server via internal packet exchanges. We also exclude local host modifications and internal network propagation, as these events are not visible from the egress point. Finally, we include internal-to-external attack propagation, which Rajab et al. exclude. While our model is currently targeted for passive network monitoring events, it can be extended to include localhost-based or DNS-server-based IDSs to augment our dialog model.

Figure 2 does not provide a strict ordering of events but captures a typical infection dialog. In the idealized sequence of a direct-exploit bot infection, the bot infection begins with an external-to-internal communication flow encompassing bot scanning (E1) or a direct inbound exploit (E2). When an internal host is compromised, the newly compromised host downloads the full bot binary (E3), establishes a C&C connection (E4), and begins scanning other external victims (E5).