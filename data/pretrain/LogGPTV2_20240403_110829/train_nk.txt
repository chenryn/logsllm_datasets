.fi
.pp
link with \fi\-lrt\fp.
.pp
.ad l
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br mq_timedsend ():
.nf
    _posix_c_source >= 200112l
.fi
.sh description
.br mq_send ()
adds the message pointed to by
.i msg_ptr
to the message queue referred to by the message queue descriptor
.ir mqdes .
the
.i msg_len
argument specifies the length of the message pointed to by
.ir msg_ptr ;
this length must be less than or equal to the queue's
.i mq_msgsize
attribute.
zero-length messages are allowed.
.pp
the
.i msg_prio
argument is a nonnegative integer that specifies the priority
of this message.
messages are placed on the queue in decreasing order of priority,
with newer messages of the same priority being placed after
older messages with the same priority.
see
.br mq_overview (7)
for details on the range for the message priority.
.pp
if the message queue is already full
(i.e., the number of messages on the queue equals the queue's
.i mq_maxmsg
attribute), then, by default,
.br mq_send ()
blocks until sufficient space becomes available to allow the message
to be queued, or until the call is interrupted by a signal handler.
if the
.b o_nonblock
flag is enabled for the message queue description,
then the call instead fails immediately with the error
.br eagain .
.pp
.br mq_timedsend ()
behaves just like
.br mq_send (),
except that if the queue is full and the
.b o_nonblock
flag is not enabled for the message queue description, then
.i abs_timeout
points to a structure which specifies how long the call will block.
this value is an absolute timeout in seconds and nanoseconds
since the epoch, 1970-01-01 00:00:00 +0000 (utc),
specified in the following structure:
.pp
.in +4n
.ex
struct timespec {
    time_t tv_sec;        /* seconds */
    long   tv_nsec;       /* nanoseconds */
};
.ee
.in
.pp
if the message queue is full,
and the timeout has already expired by the time of the call,
.br mq_timedsend ()
returns immediately.
.sh return value
on success,
.br mq_send ()
and
.br mq_timedsend ()
return zero; on error, \-1 is returned, with
.i errno
set to indicate the error.
.sh errors
.tp
.b eagain
the queue was full, and the
.b o_nonblock
flag was set for the message queue description referred to by
.ir mqdes .
.tp
.b ebadf
the descriptor specified in
.i mqdes
was invalid or not opened for writing.
.tp
.b eintr
the call was interrupted by a signal handler; see
.br signal (7).
.tp
.b einval
the call would have blocked, and
.i abs_timeout
was invalid, either because
.i tv_sec
was less than zero, or because
.i tv_nsec
was less than zero or greater than 1000 million.
.tp
.b emsgsize
.i msg_len
was greater than the
.i mq_msgsize
attribute of the message queue.
.tp
.b etimedout
the call timed out before a message could be transferred.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br mq_send (),
.br mq_timedsend ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
on linux,
.br mq_timedsend ()
is a system call, and
.br mq_send ()
is a library function layered on top of that system call.
.sh see also
.br mq_close (3),
.br mq_getattr (3),
.br mq_notify (3),
.br mq_open (3),
.br mq_receive (3),
.br mq_unlink (3),
.br mq_overview (7),
.br time (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     386bsd man pages
.\" modified sat jul 24 18:50:48 1993 by rik faith (PI:EMAIL)
.\" interchanged 'needle' and 'haystack'; added history, aeb, 980113.
.th memmem 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
memmem \- locate a substring
.sh synopsis
.nf
.br "#define _gnu_source" "         /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "void *memmem(const void *" haystack ", size_t " haystacklen ,
.bi "             const void *" needle ", size_t " needlelen  );
.fi
.sh description
the
.br memmem ()
function finds the start of the first occurrence
of the substring
.ir needle
of length
.i needlelen
in the memory
area
.i haystack
of length
.ir haystacklen .
.sh return value
the
.br memmem ()
function returns a pointer to the beginning of the
substring, or null if the substring is not found.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br memmem ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
this function is not specified in posix.1,
but is present on a number of other systems.
.sh bugs
.\" this function was broken in linux libraries up to and including libc 5.0.9;
.\" there the
.\" .ir needle
.\" and
.\" .i haystack
.\" arguments were interchanged,
.\" and a pointer to the end of the first occurrence of
.\" .i needle
.\" was returned.
.\"
.\" both old and new libc's have the bug that if
.\" .i needle
.\" is empty,
.\" .i haystack\-1
.\" (instead of
.\" .ir haystack )
.\" is returned.
in glibc 2.0, if
.i needle
is empty,
.br memmem ()
returns a pointer to the last byte of
.ir haystack .
this is fixed in glibc 2.1.
.sh see also
.br bstring (3),
.br strstr (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/exp.3
.so man7/iso_8859-8.7
.\" copyright (c) 2016 julia computing inc, keno fischer
.\" description based on include/uapi/fuse.h and code in fs/fuse
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th fuse 4 2018-02-02 "linux" "linux programmer's manual"
.sh name
fuse \- filesystem in userspace (fuse) device
.sh synopsis
.nf
.b #include 
.fi
.sh description
this device is the primary interface between the fuse filesystem driver
and a user-space process wishing to provide the filesystem (referred to
in the rest of this manual page as the
.ir "filesystem daemon" ).
this manual page is intended for those
interested in understanding the kernel interface itself.
those implementing a fuse filesystem may wish to make use of
a user-space library such as
.i libfuse
that abstracts away the low-level interface.
.pp
at its core, fuse is a simple client-server protocol, in which the linux
kernel is the client and the daemon is the server.
after obtaining a file descriptor for this device, the daemon may
.br read (2)
requests from that file descriptor and is expected to
.br write (2)
back its replies.
it is important to note that a file descriptor is
associated with a unique fuse filesystem.
in particular, opening a second copy of this device,
will not allow access to resources created
through the first file descriptor (and vice versa).
.\"
.ss the basic protocol
every message that is read by the daemon begins with a header described by
the following structure:
.pp
.in +4n
.ex
struct fuse_in_header {
    uint32_t len;       /* total length of the data,
                           including this header */
    uint32_t opcode;    /* the kind of operation (see below) */
    uint64_t unique;    /* a unique identifier for this request */
    uint64_t nodeid;    /* id of the filesystem object
                           being operated on */
    uint32_t uid;       /* uid of the requesting process */
    uint32_t gid;       /* gid of the requesting process */
    uint32_t pid;       /* pid of the requesting process */
    uint32_t padding;
};
.ee
.in
.pp
the header is followed by a variable-length data portion
(which may be empty) specific to the requested operation
(the requested operation is indicated by
.ir opcode ).
.pp
the daemon should then process the request and if applicable send
a reply (almost all operations require a reply; if they do not,
this is documented below), by performing a
.br write (2)
to the file descriptor.
all replies must start with the following header:
.pp
.in +4n
.ex
struct fuse_out_header {
    uint32_t len;       /* total length of data written to
                           the file descriptor */
    int32_t  error;     /* any error that occurred (0 if none) */
    uint64_t unique;    /* the value from the
                           corresponding request */
};
.ee
.in
.pp
this header is also followed by (potentially empty) variable-sized
data depending on the executed request.
however, if the reply is an error reply (i.e.,
.i error
is set),
then no further payload data should be sent, independent of the request.
.\"
.ss exchanged messages
this section should contain documentation for each of the messages
in the protocol.
this manual page is currently incomplete,
so not all messages are documented.
for each message, first the struct sent by the kernel is given,
followed by a description of the semantics of the message.
.tp
.br fuse_init
.ip
.in +4n
.ex
struct fuse_init_in {
    uint32_t major;
    uint32_t minor;
    uint32_t max_readahead; /* since protocol v7.6 */
    uint32_t flags;         /* since protocol v7.6 */
};
.ee
.in
.ip
this is the first request sent by the kernel to the daemon.
it is used to negotiate the protocol version and other filesystem parameters.
note that the protocol version may affect the layout of any structure
in the protocol (including this structure).
the daemon must thus remember the negotiated version
and flags for each session.
as of the writing of this man page,
the highest supported kernel protocol version is
.ir 7.26 .
.ip
users should be aware that the descriptions in this manual page
may be incomplete or incorrect for older or more recent protocol versions.
.ip
the reply for this request has the following format:
.ip
.in +4n
.ex
struct fuse_init_out {
    uint32_t major;
    uint32_t minor;
    uint32_t max_readahead;   /* since v7.6 */
    uint32_t flags;           /* since v7.6; some flags bits
                                 were introduced later */
    uint16_t max_background;  /* since v7.13 */
    uint16_t congestion_threshold;  /* since v7.13 */
    uint32_t max_write;       /* since v7.5 */
    uint32_t time_gran;       /* since v7.6 */
    uint32_t unused[9];
};
.ee
.in
.ip
if the major version supported by the kernel is larger than that supported
by the daemon, the reply shall consist of only
.i uint32_t major
(following the usual header),
indicating the largest major version supported by the daemon.
the kernel will then issue a new
.b fuse_init
request conforming to the older version.
in the reverse case, the daemon should
quietly fall back to the kernel's major version.
.ip
the negotiated minor version is considered to be the minimum
of the minor versions provided by the daemon and the kernel and
both parties should use the protocol corresponding to said minor version.
.tp
.br fuse_getattr
.ip
.in +4n
.ex
struct fuse_getattr_in {
    uint32_t getattr_flags;
    uint32_t dummy;
    uint64_t fh;      /* set only if
                         (getattr_flags & fuse_getattr_fh)
};
.ee
.in
.ip
the requested operation is to compute the attributes to be returned
by
.br stat (2)
and similar operations for the given filesystem object.
the object for which the attributes should be computed is indicated
either by
.ir header\->nodeid
or, if the
.br fuse_getattr_fh
flag is set, by the file handle
.ir fh .
the latter case of operation is analogous to
.br fstat (2).
.ip
for performance reasons, these attributes may be cached in the kernel for
a specified duration of time.
while the cache timeout has not been exceeded,
the attributes will be served from the cache and will not cause additional
.b fuse_getattr
requests.
.ip
the computed attributes and the requested
cache timeout should then be returned in the following structure:
.ip
.in +4n
.ex
struct fuse_attr_out {
    /* attribute cache duration (seconds + nanoseconds) */
    uint64_t attr_valid;
    uint32_t attr_valid_nsec;
    uint32_t dummy;
    struct fuse_attr {
        uint64_t ino;
        uint64_t size;
        uint64_t blocks;
        uint64_t atime;
        uint64_t mtime;
        uint64_t ctime;
        uint32_t atimensec;
        uint32_t mtimensec;
        uint32_t ctimensec;
        uint32_t mode;
        uint32_t nlink;
        uint32_t uid;
        uint32_t gid;
        uint32_t rdev;
        uint32_t blksize;
        uint32_t padding;
    } attr;
};
.ee
.in
.tp
.br fuse_access
.ip
.in +4n
.ex
struct fuse_access_in {
    uint32_t mask;
    uint32_t padding;
};
.ee
.in
.ip
if the
.i default_permissions
mount options is not used, this request may be used for permissions checking.
no reply data is expected, but errors may be indicated
as usual by setting the
.i error
field in the reply header (in particular, access denied errors
may be indicated by returning
.br \-eacces ).
.tp
.br fuse_open " and " fuse_opendir
.in +4n
.ex
struct fuse_open_in {
    uint32_t flags;     /* the flags that were passed
                           to the open(2) */