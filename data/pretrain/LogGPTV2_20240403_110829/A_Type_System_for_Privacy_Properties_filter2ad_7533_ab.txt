by A and B and can then use the ciphertext type derived from the
type of ka and kb to infer after decryption the vote cast by A and B,
respectively. While processing the other ballots, the server discards
the ciphertexts produced with randomness matching the one used
by A or B: given that these random values are used only once, we
know that the remaining ciphertexts must come from the attacker
and thus convey the same vote on the left- and on the right-hand
side. This suffices to type-check the final output, since the two
tallied results on the left- and right-hand side are the same, and
thus fulfill trace equivalence.
The type system generates a set of constraints, which, if “con-
sistent”, suffice to prove that the protocol is trace equivalent. Intu-
itively, these constraints characterize the indistinguishability of the
messages output by the process. The constraints generated for this
simplified version of Helios are reported below:
C = {({sign(aenc(⟨0, ⟨x, r′
a⟩⟩, pk(kS)), ka) ∼
sign(aenc(⟨1, ⟨x, r′
b⟩⟩, pk(kS)), kb) ∼
sign(aenc(⟨0, ⟨y, r′
aenc(⟨0, ⟨x, r′
sign(aenc(⟨1, ⟨y, r′
a⟩⟩, pk(kS)) ∼ aenc(⟨1, ⟨x, r′
aenc(⟨1, ⟨y, r′
[x : LL, y : LL])}
b⟩⟩, pk(kS)) ∼ aenc(⟨0, ⟨y, r′
a⟩⟩, pk(kS)), ka),
a⟩⟩, pk(kS)),
b⟩⟩, pk(kS)), kb),
b⟩⟩, pk(kS))},
These constraints are consistent if the set of left messages of the con-
straints is in (static) equivalence with the set of the right messages
of the constraints. This is clearly the case here, since encryption
hides the content of the plaintext. Just to give an example of non-
consistent constraints, consider the following ones:
′ = {{h(n1) ∼ h(n2), h(n1) ∼ h(n1)}}
C
where n1, n2 are two confidential nonces. While the first constraint
alone is consistent, since n1 and n2 are of high confidentiality and
the attacker cannot thus distinguish between h(n1) and h(n2), the
two constraints all together are not consistent, since the attacker
can clearly notice if the two terms output by the process are the
same or not. We developed a dedicated procedure to check the
consistency of such constraints.
3 FRAMEWORK
In symbolic models, security protocols are typically modeled as
processes of a process algebra, such as the applied pi-calculus [2].
We present here a calculus close to [32] inspired from the calculus
underlying the ProVerif tool [20].
3.1 Terms
Messages are modeled as terms. We assume an infinite set of names
N for nonces, further partitioned into the set FN of free nonces
(created by the attacker) and the set BN of bound nonces (created
by the protocol parties), an infinite set of names K for keys, ranged
over by k, and an infinite set of variables V. Cryptographic primi-
tives are modeled through a signature F , that is a set of function
symbols, given with their arity (that is, the number of arguments).
Here, we will consider the following signature:
Fc = {pk, vk, enc, aenc, sign, ⟨·,·⟩, h}
that models respectively public and verification key, symmetric and
asymmetric encryption, concatenation and hash. The companion
primitives (symmetric and asymmetric decryption, signature check,
and projections) are represented by the following signature:
Fd = {dec, adec, checksign, π1, π2}
We also consider a set C of (public) constants (used as agents names
for instance). Given a signature F , a set of names N and a set of
variables V, the set of terms T(F ,V,N) is the set inductively
defined by applying functions to variables in V and names in
N. We denote by names(t) (resp. vars(t)) the set of names (resp.
variables) occurring in t. A term is ground if it does not contain
variables.
Here, we will consider the set T(Fc ∪ Fd ∪ C,V,N ∪ K) of
cryptographic terms, simply called terms. Messages are terms from
Session B4:  Privacy PoliciesCCS’17, October 30-November 3, 2017, Dallas, TX, USA4112) with t′
T(Fc ∪ C,V,N ∪ K) with atomic keys, that is, a term t ∈ T(Fc ∪
C,V,N ∪ K) is a message if any subterm of t of the form pk(t′),
vk(t′), enc(t1, t′), aenc(t1, t2), or sign(t1, t′) is such that t′ ∈ K
and t2 = pk(t′
2 ∈ K. We assume the set of variables to be
split into two subsets V = X ⊎ AX where X are variables used
in processes while AX are variables used to store messages. An
attacker term is a term from T(Fc ∪ Fd ∪ C, AX, FN).
A substitution σ = {M1/x1, . . . , Mk/xk} is a mapping from vari-
ables x1, . . . , xk ∈ V to messages M1, . . . , Mk. We let dom(σ) =
{x1, . . . , xk}. We say that σ is ground if all messages M1, . . . , Mk
tion of a substitution σ to a term t is denoted tσ and is defined as
usual.
The evaluation of a term t, denoted t ↓, corresponds to the appli-
cation of the cryptographic primitives. For example, the decryption
succeeds only if the right decryption key is used. Formally, t ↓ is
recursively defined as follows.
are ground. We let names(σ) =1≤i ≤k names(Mi). The applica-
u ↓ = u
pk(t) ↓ = pk(t ↓)
vk(t) ↓ = vk(t ↓)
h(t) ↓ = h(t ↓)
⟨t1, t2⟩ ↓ = ⟨t1 ↓, t2 ↓⟩
enc(t1, t2) ↓ = enc(t1 ↓, t2 ↓)
sign(t1, t2) ↓ = sign(t1 ↓, t2 ↓)
aenc(t1, t2) ↓ = aenc(t1 ↓, t2 ↓)
for some k ∈ K
if u ∈ N ∪ V ∪ K ∪ C
if t ↓∈ K
if t ↓∈ K
if t ↓(cid:44) ⊥
if t1 ↓(cid:44) ⊥ and t2 ↓(cid:44) ⊥
if t1 ↓(cid:44) ⊥ and t2 ↓∈ K
if t1 ↓(cid:44) ⊥ and t2 ↓∈ K
if t1 ↓(cid:44) ⊥ and t2 ↓= pk(k)
π1(t) ↓ = t1
π2(t) ↓ = t2
dec(t1, t2) ↓ = t3
adec(t1, t2) ↓ = t3
checksign(t1, t2) ↓ = t3
if t ↓= ⟨t1, t2⟩
if t ↓= ⟨t1, t2⟩
if t1 ↓= enc(t3, t4) and t4 = t2 ↓
if t1 ↓= aenc(t3, pk(t4)) and t4 = t2 ↓
if t1 ↓= sign(t3, t4) and t2 ↓= vk(t4)
t ↓ = ⊥ otherwise
Note that the evaluation of term t succeeds only if the underlying
keys are atomic and always returns a message or ⊥. We write t =↓ t′
if t ↓= t′ ↓.
3.2 Processes
Security protocols describe how messages should be exchanged
between participants. We model them through a process algebra,
whose syntax is displayed in Figure 1. We identify processes up to
α-renaming, i.e., capture avoiding substitution of bound names and
variables, which are defined as usual. Furthermore, we assume that
all bound names and variables in the process are distinct.
A configuration of the system is a quadruple (E; P; ϕ; σ) where:
• P is a multiset of processes that represents the current active
• E is a set of names, which represents the private names of
the processes;
• ϕ is a substitution with dom(ϕ) ⊆ AX and for any x ∈
dom(ϕ), ϕ(x) (also denoted xϕ) is a message that only con-
tains variables in dom(σ). ϕ represents the terms already
output.
processes;
• σ is a ground substitution;
The semantics of processes is given through a transition relation
α−−→ on the quadruples provided in Figure 2 (τ denotes a silent
Destructors used in processes:
d ::= dec(·, k) | adec(·, k) | checksign(·, vk(k)) | π1(·) | π2(·)
Processes:
P, Q ::=
0
new n.P
out(M).P
in(x).P
P | Q
let x = d(y) in P else Q
if M = N then P else Q
!P
for n ∈ BN(n bound in P)
for x ∈ X(x bound in P)
for x, y ∈ X(x bound in P)
|
|
|
|
|
|
|
where M, N are messages.
Figure 1: Syntax for processes.
action). The relation w−−−→∗ is defined as the reflexive transitive
closure of α−−→, where w is the concatenation of all actions. We also
write equality up to silent actions =τ .
Intuitively, process new n.P creates a fresh nonce, stored in E,
and behaves like P. Process out(M).P emits M and behaves like P.
Process in(x).P inputs any term computed by the attacker provided
it evaluates as a message and then behaves like P. Process P | Q
corresponds to the parallel composition of P and Q. Process let x =
d(y) in P else Q behaves like P in which x is replaced by d(y) if
d(y) can be successfully evaluated and behaves like Q otherwise.
Process if M = N then P else Q behaves like P if M and N
correspond to two equal messages and behaves like Q otherwise.
The replicated process !P behaves as an unbounded number of
copies of P.
A trace of a process P is any possible sequence of transitions in
the presence of an attacker that may read, forge, and send messages.
Formally, the set of traces trace(P) is defined as follows.
trace(P) = {(w, new E.ϕ, σ)|(∅; {P}; ∅; ∅) w−−−→∗ (E; P; ϕ; σ)}
Example 3.1. Consider the Helios protocol presented in Section 2.
For simplicity, we describe here a simplified version with only two
(honest) voters A and B and a voting server S. This (simplified)
protocol can be modeled by the process:
new ra .V oter(ka, va, ra) | new rb .V oter(kb , vb , rb) | PS
where V oter(k, v, r) represents voter k willing to vote for v using
randomness r while PS represents the voting server. V oter(k, v, r)
simply outputs a signed encrypted vote.
V oter(k, v, r) = out(sign(aenc(⟨v, r⟩, pk(kS)), k))
Session B4:  Privacy PoliciesCCS’17, October 30-November 3, 2017, Dallas, TX, USA412τ−−→
τ−−→
τ−−→
(E; {P1, P2} ∪ P; ϕ; σ)
(E; P; ϕ; σ)
(E ∪ {n}; {P} ∪ P; ϕ; σ)
(E; {P1 | P2} ∪ P; ϕ; σ)
(E; {0} ∪ P; ϕ; σ)
(E; {new n.P} ∪ P; ϕ; σ)
(E; {out(t).P} ∪ P; ϕ; σ)
(E; {in(x).P} ∪ P; ϕ; σ)
τ−−→
new axn .out(axn)
−−−−−−−−−−−−−−−−→ (E; {P} ∪ P; ϕ ∪ {t/axn}; σ)
if tσ is a ground term, axn ∈ AX and n = |ϕ| + 1
in(R)
−−−−−−→
(E; {P} ∪ P; ϕ; σ ∪ {(Rϕσ) ↓ /x})
if R is an attacker term such that vars(R) ⊆ dom(ϕ),
and (Rϕσ) ↓(cid:44) ⊥
(E; {P} ∪ P; ϕ; σ ∪ {d(Mσ) ↓ /x})
if Mσ is ground and d(Mσ) ↓(cid:44) ⊥
(E; {Q} ∪ P; ϕ; σ)
if Mσ is ground and d(Mσ) ↓= ⊥, i.e. d cannot be applied to Mσ
(E; {P} ∪ P; ϕ; σ)
(E; {Q} ∪ P; ϕ; σ)
(E; {P, !P} ∪ P; ϕ; σ)
if M, N are messages such that Mσ, N σ are ground and Mσ (cid:44) N σ
if M, N are messages such that Mσ, N σ are ground and Mσ = N σ
τ−−→
τ−−→
τ−−→
τ−−→
(E; {let x = d(M) in P else Q} ∪ P; ϕ; σ)
(E; {let x = d(M) in P else Q} ∪ P; ϕ; σ)
(E; {if M = N then P else Q} ∪ P; ϕ; σ)
(E; {if M = N then P else Q} ∪ P; ϕ; σ)
(E; {!P} ∪ P; ϕ; σ)
Par
Zero
New
Out
In
Let-In
Let-Else
If-Then
If-Else
Repl
Figure 2: Semantics
The voting server receives ballots from A and B and then outputs
the decrypted ballots, after some mixing.
PS =in(x1).in(x2).
let y1 = checksign(x1, vk(ka)) in
let y2 = checksign(x2, vk(kb)) in
′
let z1 = adec(y1, ks) in let z
1 = π1(z1) in
′
let z2 = adec(y2, ks) in let z
2 = π1(z2) in
(out(z
′
1) | out(z
′
2))
3.3 Equivalence
When processes evolve, sent messages are stored in a substitution
ϕ while private names are stored in E. A frame is simply an ex-
pression of the form new E.ϕ where dom(ϕ) ⊆ AX. We define
dom(new E.ϕ) as dom(ϕ). Intuitively, a frame represents the knowl-
edge of an attacker.
Intuitively, two sequences of messages are indistinguishable to
an attacker if he cannot perform any test that could distinguish
them. This is typically modeled as static equivalence [2]. Here,
we consider of variant of [2] where the attacker is also given the
ability to observe when the evaluation of a term fails, as defined
for example in [32].
Definition 3.2 (Static Equivalence). Two ground frames new E.ϕ
and new E′.ϕ′ are statically equivalent if and only if they have
the same domain, and for all attacker terms R, S with variables in
dom(ϕ) = dom(ϕ′), we have
(Rϕ =↓ Sϕ) ⇐⇒ (Rϕ
′ =↓ Sϕ
′)
Then two processes P and Q are in equivalence if no matter how
the adversary interacts with P, a similar interaction may happen
with Q, with equivalent resulting frames.
l ::=
T ::=
LL | HL | HH
l | T ∗ T | keyl(T) | (T)k | {T}k
(cid:74)τ l,a
n ; τ l′,a
m (cid:75) with a ∈ {1,∞} | T ∨ T
|
Figure 3: Types for terms (selected)
Definition 3.3 (Trace Equivalence). Let P, Q be two processes. We
write P ⊑t Q if for all (s,ψ , σ) ∈ trace(P), there exists (s′,ψ ′, σ ′) ∈
trace(Q) such that s =τ s′ and ψ σ and ψ ′σ ′ are statically equivalent.
We say that P and Q are trace equivalent, and we write P ≈t Q, if
P ⊑t Q and Q ⊑t P.
Note that this definition already includes the attacker’s behavior,
since processes may input any message forged by the attacker.
Example 3.4. As explained in Section 2, ballot privacy is typi-
cally modeled as an equivalence property [44] that requires that
an attacker cannot distinguish when Alice is voting 0 and Bob is
voting 1 from the scenario where the two votes are swapped.
Continuing Example 3.1, ballot privacy of Helios can be ex-
pressed as follows:
new ra .V oter(ka, 0, ra) | new rb .V oter(kb , 1, rb) | PS
≈t new ra .V oter(ka, 1, ra) | new rb .V oter(kb , 0, rb) | PS
4 TYPING
We now introduce a type system to statically check trace equiv-
alence between processes. Our typing judgements thus capture
properties of pairs of terms or processes, which we will refer to as
left and right term or process, respectively.
Session B4:  Privacy PoliciesCCS’17, October 30-November 3, 2017, Dallas, TX, USA4134.1 Types
A selection of the types for messages are defined in Figure 3 and ex-
plained below. We assume three security labels (namely, HH, HL, LL),
ranged over by l, whose first (resp. second) component denotes the
confidentiality (resp. integrity) level. Intuitively, messages of high
confidentiality cannot be learned by the attacker, while messages
of high integrity cannot originate from the attacker. Pair types
describe the type of their components, as usual. Type keyl(T) de-
scribes keys of security level l used to encrypt (or sign) messages