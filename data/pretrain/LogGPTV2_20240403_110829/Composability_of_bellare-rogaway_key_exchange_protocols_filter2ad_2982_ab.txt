### A General Framework for Protocol Specification

We introduce a more general framework in which the language for specifying protocols is left unspecified. This approach imposes no restrictions on the primitives used in the construction of our protocols. In contrast, adding new primitives to the formalism of [11] would require re-proving the validity of many axioms and inference rules from scratch.

Recent works have addressed some of the technical issues that make the Universal Composability (UC) framework non-applicable to practical protocols. For example, Kusters and Tuengerthal [16] eliminated the need for pre-established session identifiers. However, other problems, such as the limitation to static corruption, still present significant challenges.

### 2. Protocols

Games are a standard modeling approach for the security of cryptographic schemes. In such a game, an arbitrary adversary interacts with the algorithms that define the protocol through a set of queries that capture the use of the protocol in a real system. The adversary sends queries to the game, which computes responses using the algorithms under attack. The adversary's goal is to trigger an event that the game deems "bad."

In this section, we first provide a general abstract definition for cryptographic games and then specialize it in two ways. First, we explain how key exchange is an instance of our abstract framework. Then, we identify a class of protocols, which we call "symmetric key protocols."

#### Identities

We fix an integer \( n_i \) of polynomial size in the security parameter. Identities, used to model the users of a system, are identified by some integer \( i \), where \( 0 \leq i < n_i \).

#### Protocols

A protocol is a pair of algorithms \((kg, \xi)\), where:
- \( kg \) is a randomized key generation algorithm that takes the security parameter as input and outputs keys from some key space.
- \( \xi \) is the algorithm executed locally by a party that runs the protocol.

Local sessions of a protocol are identified by local session identifiers \( lsid \in \mathbb{Z} \times \mathbb{Z} \times \mathbb{Z} \). The local identifier \( lsid = (i, j, k) \) refers to the \( k \)-th local session of identity \( i \), where the intended partner identity is \( j \). These identifiers are used only for bookkeeping, allowing the adversary to uniquely identify each session within the game and are not used by the protocol.

#### Games

Formally, a game is a probabilistic Turing machine with:
- An input tape to receive queries from the adversary.
- An output tape to return responses to the adversary.
- A random tape and internal state.

The internal state consists of:
- **LSID**: The set of all local session identifiers valid for use within the game. This set is assumed to be hardwired in the model.
- **SST: LSID → {0, 1}***: A function providing session state information for a given session \( lsid \in \text{LSID} \). Session state information is specific to the type of protocol being executed and usually denotes user-specific data.
- **LST: LSID → {0, 1}***: The local session state is the state for a specific session containing the game-relevant variables for this session.
- **EST ∈ {0, 1}***: The game execution state stores information needed for the execution model, which is not used on a session-by-session basis. For example, this may contain long-term keys of identities.
- **MST ∈ {0, 1}***: The model state for the security requirement being modeled provides information to the game that is not session-specific. For example, this may be some bit that the adversary is attempting to discover.

Many previous models for protocols do not separate the session state and local session state. We do this to provide a clear boundary between variables used and updated by the protocol's algorithm and those used by the game to model various security requirements. For example, the session state may contain the session key computed by running a key exchange algorithm, while the local session state would consist of flags to mark individual sessions as corrupted or revealed. Naturally, this local session information should neither be used by nor available to the algorithm that defines the behavior of a session.

We use two setup algorithms to initialize these two separate sets of state within the game:
- **(SST, EST) ← setupE(LSID, kg, 1^η)**: Initializes the session state and game execution state, where \( kg \) is the protocol’s key generation algorithm and \( 1^\eta \) is the security parameter.
- **(LST, MST) ← setupG(LSID, SST, EST, 1^η)**: Initializes the local session state and model state.

An adversary is a probabilistic polynomial-time algorithm that interacts with a game through a finite number of well-defined queries in a set \( Q \). The game processes each query according to its behavior, the algorithm \( \chi \), which runs on the internal game state and the query provided; a response is then passed back to the adversary. The game behavior \( \chi \) makes calls to underlying protocol algorithms, such as for a query to a left-or-right oracle in a typical encryption game, \( \chi \) computes the appropriate response with the help of the underlying encryption algorithm.

Not all queries are valid at all points within a game's execution. We model this possibility via a predicate, **Valid**, which the game tests each time it receives a query. The **Valid** predicate takes as input the entire game state and the query received; it returns either true or false, indicating whether the game processes or ignores the query. It is required that all **Valid** predicates check that any local session identifiers are in the set **LSID**, and if a query has no specified **Valid** predicate, we assume this is the only check made. Throughout the paper, we provide only informal descriptions for all **Valid** predicates. Formal descriptions are available in the full version of this paper.

When the game receives a query \( q \in Q \), it executes in the following way:
- If **Valid(q, (LSID, SST, LST, EST, MST))** returns false, then the game does nothing and returns "invalid" to the adversary.
- Otherwise, \(((SST', LST', EST', MST'), response) \leftarrow \chi(q, (LSID, SST, LST, EST, MST), (kg, \xi), 1^\eta)\). The game sets \( SST \leftarrow SST' \), \( LST \leftarrow LST' \), \( EST \leftarrow EST' \), \( MST \leftarrow MST' \), and returns the response to the adversary.

**Definition 1.** A game \( G \) is a Turing machine parameterized by \((kg, \xi)\) maintaining state \((LSID, SST, LST, EST, MST)\) with setup algorithms **setupE**, **setupG**, some behavior \( \chi \), and predicates defined by **Valid**.

The set of queries \( Q \) always includes a **Send** query, taking as input \( lsid \in \text{LSID} \) and message \( msg \in \{0, 1\}^* \). Typically, for a **Send** query, the behavior \( \chi \) executes the algorithm \( \xi \) on the local session state of session \( lsid \) and message \( msg \). This algorithm then returns an updated session state and a response to be passed back to the adversary. Formally, this is defined as follows:

**Send(lsid, msg):**
- \( SST' \leftarrow SST \)
- \((sst', response) \leftarrow \xi(SST(lsid), msg)\)
- \( SST'(lsid) \leftarrow sst' \)
- Return \(((SST', LST, EST, MST), response)\)

The **Send** query allows the adversary to simulate messages being sent over a network. It receives back a response computed by running the protocol algorithm, giving the adversary complete control over the network to alter, delay, create, or delete messages.

The goal of the adversary is to trigger some event deemed "bad," meaning the adversary has, in some sense, broken the security of the protocol. To test for such an event, there exists a predicate \( P \) associated with the game \( G \) which is an algorithm of the form \( b \leftarrow P(LSID, SST, LST, EST, MST) \), where \( b \in \{0, 1\} \), and \( b = 1 \) if and only if the adversary has succeeded in its goal.

The entire process of the adversary interacting with the game, through to the predicate being applied, is called the experiment, which is executed in the following way:
- \((LST, MST) \leftarrow \text{setupG}(LSID, SST, EST, 1^\eta)\)
- \((SST, EST) \leftarrow \text{setupE}(LSID, kg, 1^\eta)\)
- The game runs
- The adversary now proceeds to send queries from the set \( Q \) to the game
- When the adversary terminates, the predicate \( b \leftarrow P(LSID, SST, LST, EST, MST) \) is run
- Output \( b \)

We write \( \text{Exp}_G^{\pi, A}(1^\eta) \) for the experiment where \( A \) is the adversary, \( \pi \) is the protocol, and \( G \) is the game. We write \( \text{Exp}_G^{\pi, A}(1^\eta) = b \) for the event that the predicate \( P \) associated with \( G \) outputs bit \( b \). Note that our notion of protocols and games is general enough to subsume distinct protocols and their games under a single one, with the parties using some identifier to address different sub-protocols, and usually demanding that the adversary only needs to win some of the games to break the composed game. This is particularly interesting for our composition theorem, as it immediately allows one to conclude security even if pairs of parties subsequently run different protocols.

### 3. Key Exchange Protocols

A key exchange protocol allows two local sessions, which use long-term keys of identities, to agree upon a short-term session key. We consider identities who have asymmetric long-term keys. (The case of symmetric long-term keys can be done analogously.) To "partner" two sessions, we use the notion of a session identifier value, computed by the key exchange protocol. Using a session identifier still allows one to base partnering on notions such as matching conversation, as done by Bellare et al. [4]. Partnered sessions are required to compute the same session key, and this session key must be indistinguishable from random. Further, as we consider two-party protocols, at most two sessions should ever share the same session identifier.

The session identifier is distinct from the local session identifier \( lsid \). The former is computed by the key exchange algorithm to determine which sessions are partners, while the latter is simply a unique label for the adversary to address queries to a particular session.

We assume that when a key exchange protocol session agrees upon or rejects a key, the adversary knows this has taken place. We require this property explicitly, but one can see that in the models of [4, 6], by sending a 'Reveal' query after every 'Send' query, it is possible for an adversary to learn when sessions accept or reject a key.

To model the above requirements of a key exchange protocol, we introduce two security games. The first requirement, secrecy, is modeled using the methods of Bellare-Rogaway security: the adversary chooses a session of the game and receives either a random key or the real session key agreed. It wins the game if it determines correctly with which it was provided. We model only protocols that provide forward security, i.e., if a long-term key is corrupted by an adversary, any session keys (including those computed using the corrupted long-term key) already agreed will still be considered secure. The second security game places restrictions on the partnered sessions: the adversary attempts to cause partnered sessions to agree upon different keys or force at least three sessions to agree upon the same session identifier.

Both security games have the same execution model and share many of the same characteristics in terms of game state. Therefore, we first introduce the common elements and then introduce game-specific properties later. In particular, both games share **Send**, **Corrupt**, and **Reveal** queries. The two games have different winning conditions, and the BR-secrecy game allows the adversary the additional **Test** and **Guess** queries.

**Game Execution State:**
- The execution state for key exchange games consists of a list \( L_{keys} \) with tuples \((i, pki, ski, \delta_i)\), where \( i \) is some identity, \( pki \in \{0, 1\}^* \) is the public key of the identity \( i \), \( ski \in \{0, 1\}^* \) is the secret key of \( i \), and \( \delta_i \in \{honest, corrupted\} \) denotes whether \( i \) has been corrupted by the adversary or not. This model assumes there is some secure PKI to distribute keys to identities.

**Session State:**
- For key exchange protocols, the session state for the local session identified by \( lsid = (i, j, k) \) consists of:
  - **Partner**: The intended partner of this session.
  - **Identity**: The identity \( i \) to whom this session belongs.
  - **(pki, ski) ∈ {0, 1}*** × {0, 1}***: This is the long-term key pair for the identity \( i \).
  - **pkj ∈ {0, 1}***: This is the public key for the identity \( j \), who is the intended partner.
  - **sid ∈ {0, 1}*** ∪ {⊥}: This is the session identifier for the session. Two sessions are partners if they share the same session identifier and \( sid \neq \bot \). Once \( sid \) is set to a value different from \( \bot \), it may not be changed.
  - **κ ∈ {0, 1}*** ∪ {⊥}: This is the session key for the protocol, where \( \bot \) indicates no session key has yet been agreed.
  - **γ ∈ {running, accepted, rejected}**: This provides the current execution state of the protocol, indicating the session's acceptance (or rejection) of a session key. It is required that if \( \kappa \neq \bot \), then \( \gamma = \text{accepted} \) and if \( \gamma = \text{accepted} \), then \( sid \neq \bot \). Furthermore, if \( \gamma \neq \text{running} \), execution for this session has "finished," and no further updates to the session state are allowed.
  - **sinfo ∈ {0, 1}*** ∪ {⊥}: This is any additional session state required for specific key exchange protocols.

These requirements mean that, in the final step of a key exchange protocol (in response to a **Send** query), the value \( \kappa \) is set to some value and \( \gamma \) is set to **accepted** before a response is returned to the adversary.

We write \( SST(lsid) = ((pki, ski), pkj, sid, \kappa, \gamma, sinfo) \) for the session state of the session identified by \( lsid \). For clarity, we provide notation for accessing individual elements of the session state. For example, we write \( SST(lsid).\kappa \) for the session key \( \kappa \) of local session \( lsid \). Individual elements of a game's state are also updated via similar notation.

**Local Session State:**
- The local session state for key exchange protocols is composed of:
  - **δ ∈ {honest, corrupted}**: Details whether the identity associated with the session is honest or corrupted.