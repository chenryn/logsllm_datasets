we present a more general framework where the language for
specifying protocols is left unspeciﬁed. We therefore impose
no restrictions on the primitives used in the construction of
our protocols. In contrast, adding new primitives to the for-
malism of [11] would require re-proving the validity of many
of the axioms and inference rules from scratch.
Recent works get around some of the technical issues that
make the UC framework non-applicable to practical proto-
cols. For example K¨usters and Tuengerthal [16] eliminated
the need for pre-establish session identiﬁers. However, some
of the other problems (e.g., the limitation to static corrup-
tion) still seems to present an insurmountable obstacle.
2. PROTOCOLS
Games are a standard modelling approach for security of
schemes. In such a game, an arbitrary adversary interacts
with the algorithms that deﬁne the protocol, via a set of
queries that capture the use of the protocol in a real system.
The adversary sends queries to the game, which computes
responses using the algorithms under attack. The adversary
tries to trigger an event which the game deems bad.
In this section we ﬁrst give a general abstract deﬁnition
for cryptographic games and then specialise it in two ways.
First we explain how key exchange is an instance of our
abstract framework. Then we identify a class of protocols,
which we call “symmetric key protocols”.
Identities. We ﬁx an integer ni of size polynomial in the
security parameter. Identities, used to model the users of a
system, are identiﬁed by some integer i, with 0 ≤ i < ni.
Protocols. A protocol is a pair of algorithms (kg, ξ), where
kg is a randomized key generation algorithm taking as input
the security parameter and outputting keys from some key
space. The algorithm ξ is the algorithm executed locally by
a party that executes the protocol.
Local sessions of a protocol are identiﬁed by local ses-
sion identiﬁers lsid ∈ Z × Z × Z, where the local identiﬁer
lsid = (i, j, k) refers to the k-th local session of the identity
i, where the intended partner identity is j. These identi-
ﬁers are only for bookkeeping. They allow the adversary to
uniquely identify each session within the game and are not
used by the protocol.
Games. Formally, a game is a probabilistic Turing machine
with an input tape to receive queries from the adversary, an
output tape to return responses to the adversary, a random
tape and internal state. The internal state consists of the
following:
– LSID: The set of all local session identiﬁers valid for use
within the game. This set is assumed to be hardwired in
the model.
– SST : LSID → {0, 1}∗: This function provides session
state information for a given session lsid ∈ LSID. Session
state information is speciﬁc to the type of protocol being
executed and usually denotes user-speciﬁc data.
– LST : LSID → {0, 1}∗: The local session state is the state
for a speciﬁc session containing the game-relevant vari-
ables for this session.
– EST ∈ {0, 1}∗: The game execution state stores informa-
tion needed for the execution model which is not used on
a session-by-session basis. For example this may contain
long term keys of identities.
– MST ∈ {0, 1}∗: The model state for the security require-
ment being modeled provides information to the game
which is not session speciﬁc. For example this may be
some bit which the adversary is attempting to discover.
53Many previous models for protocols do not separate the
session state and local session state. We do this to pro-
vide a clear boundary between variables used and updated
by the protocol’s algorithm and those used by the game to
model various security requirements. For example, the ses-
sion state may contain the session key computed by running
a key exchange algorithm, while the local session state would
consist of ﬂags to mark individual sessions as corrupted or
revealed. Naturally, this local session information shall nei-
ther be used by, nor be available to the algorithm that de-
ﬁnes the behaviour of a session. Note, although we require
the internal state to consist of these components, one may
still model any arbitrary game via these requirements: if any
arbitrary variable is used directly by the protocol it is stored
in either SST or EST, otherwise it is stored in LST or MST.
For example, if the game’s security requirement required a
history of all queries made, this would be stored in MST.
Consequently we use two setup algorithms for initialising
these two separate sets of state within the game. The ﬁrst
initialises the state speciﬁc to the execution model of the
protocol, while the second initialises the state used for the
security requirement being modelled.
– (SST, EST) ← setupE(LSID, kg, 1η): Initialises the session state
and game execution state, where kg is the protocol’s key gener-
ation algorithm and 1η is the security parameter.
– (LST, MST) ← setupG(LSID, SST, EST, 1η): Initialises the local
session state and model state.
An adversary is a probabilistic polynomial time algorithm
that interacts with a game through a ﬁnite number of well
deﬁned queries in a set Q. The game processes each query
in a given way, i.e., according to its behaviour, the algorithm
χ, which runs on the internal game state and the query pro-
vided; a response is then passed back to the adversary. The
game behaviour χ makes calls to underlying protocol algo-
rithms, i.e. for a query to a left-or-right oracle in a typical
encryption game, χ computes the appropriate response with
the help of the underlying encryption algorithm.
As usual, not all queries are valid at all points within a
game’s execution. We model this possibility via a predicate,
Valid, which the game tests each time it receives a query.
The Valid predicate takes as input the entire game state
and the query received; either true or false is returned, in-
dicating whether the game processes or ignores the query.
It is required that all Valid predicates check that any lo-
cal session identiﬁers are in the set LSID, and if a query
has no speciﬁed Valid predicate we assume this is the only
check made. Throughout the paper we give only informal
descriptions for all Valid predicates. However the formal
descriptions are available in the full version of this paper.
When the game receives a query q ∈ Q it executes in the
following way:
If Valid(q, (LSID, SST, LST, EST, MST)) returns false then do
Else ((SST(cid:48), LST(cid:48), EST(cid:48), MST(cid:48)), response) ← χ(q, (LSID, SST, LST,
nothing and return invalid to the adversary.
EST, MST), (kg, ξ), 1η), set SST ← SST(cid:48), LST ← LST(cid:48),EST ← EST(cid:48),
MST ← MST(cid:48) and return response to the adversary.
Definition 1. A game G is a Turing machine param-
eterised by (kg, ξ) maintaining state (LSID, SST, LST, EST,
MST) with setup algorithms setupE, setupG, some behavior
χ and predicates deﬁned by Valid.
The set of queries, Q, always includes a Send query, taking
as input lsid ∈ LSID and message msg ∈ {0, 1}∗. Typically
for a Send query, the behaviour χ executes the algorithm ξ
on the local session state of session lsid and message msg.
This algorithm then returns an updated session state and a
response to be passed back to the adversary. Formally this
is deﬁned as follows; note for brevity we omit the full nota-
tion of χ taking as input the game’s state, and assume this
implicitly.
Send(lsid, msg):
SST(cid:48) ← SST
(sst(cid:48), response) ← ξ(SST(lsid), msg)
SST(cid:48)(lsid) ← sst(cid:48)
Return ((SST(cid:48), LST, EST, MST), response).
The Send query is used to allow the adversary to simu-
late messages being sent over a network. It receives back a
response which is computed by running the protocol algo-
rithm. This gives the adversary complete control over the
network so it can alter, delay, create or delete messages.
The goal of the adversary is to trigger some event which
is deemed “bad”, i.e. the adversary has in some sense broken
the security of the protocol. In order to test for such an event
there exists a predicate P associated to the game G which is
an algorithm of the form b ← P(LSID, SST, LST, EST, MST),
where b ∈ {0, 1}, and b = 1 if and only if the adversary has
succeeded in its goal.
The entire process of the adversary interacting with the
game, through to the predicate being applied, is called the
experiment, which is executed in the following way.
(LST, MST) ← setupG(LSID, SST, EST, 1η).
(SST, EST) ← setupE(LSID, kg, 1η) and
– The game runs
– The adversary now proceeds to send queries from the set Q to
– When the adversary terminates the predicate b ← P(LSID,
the game.
SST, LST, EST, MST) is run.
– Output b.
We write ExpG
Note that the game may pass some information of the
initialisation phase to the adversary, like the users’ public
keys, by introducing a special query to Q which can be made
only once, at the beginning.
π,A(1η) for the experiment where A is the
adversary, π is the protocol and G is the game. We write
ExpG
π,A(1η) = b for the event that the predicate P associ-
ated to G outputs bit b. Note that our notion of protocols
and games is general enough to subsume distinct protocols
and their games under a single one, with the parties using
some identiﬁer to address diﬀerent sub protocols, and usu-
ally demanding that the adversary only needs to win some
of the games to break the composed game. This is partic-
ularly interesting for our composition theorem, because it
immediately allows one to conclude security even if pairs of
parties subsequently run diﬀerent protocols.
3. KEY EXCHANGE PROTOCOLS
A key exchange protocol allows two local sessions, which
use long term keys of identities, to agree upon a short term
session key. We consider identities who have asymmetric
long term keys. (The case of symmetric long term keys can
be done analogously.) In order to “partner” two sessions we
use the notion of a session identiﬁer value. This value is
computed by the key exchange protocol. Using a session
identiﬁer still allows one to base partnering on notions such
as matching conversation as done by Bellare et al. [4]; us-
54ing the message transcript one can achieve a similar, while
not equivalent notion. Partnered sessions are required to
compute the same session key, and this session key must be
indistinguishable from random. Further, as we consider two
party protocols at most two sessions should ever share the
same session identiﬁer.
The session identiﬁer is distinct to the local session iden-
tiﬁer lsid. The former is computed by the key exchange al-
gorithm to determine which sessions are partners, whilst the
latter is simply a unique label for the adversary to address
queries to a particular session.
We assume that when a key exchange protocol session
agrees upon or rejects a key, the adversary knows this has
taken place. We require this property explicitly, but one can
see that in the models of [4, 6], by sending a ‘Reveal’ query
after every ‘Send’ query it is possible for an adversary to
learn when sessions accept or reject a key.
To model the above requirements of a key exchange proto-
col we introduce two security games. The ﬁrst requirement,
secrecy, is modelled using the methods of Bellare-Rogaway
security: the adversary chooses a session of the game and
receives either a random key or the real session key agreed.
It wins the game if it determines correctly with which it was
provided. We model only protocols that provide forward
security, i.e.
if a long term key is corrupted by an adver-
sary, any session keys (including those computed using the
corrupted long term key) already agreed will still be consid-
ered secure. 1 The second security game places restrictions
on the partnered sessions: The adversary attempts to cause
partnered sessions to agree upon diﬀerent keys, or force at
least three sessions to agree upon the same session identiﬁer.
Both security games have the same execution model, and
share many of the same characteristics in terms of game
state. Therefore we ﬁrst introduce the common elements
and introduce game-speciﬁc properties later. In particular,
both games share Send, Corrupt and Reveal queries. The
two games have diﬀerent winning conditions, and the BR-
secrecy game allows the adversary the additional Test and
Guess queries.
Game execution state. The execution state for key ex-
change games consists of a list Lkeys with tuples (i, pki, ski, δi),
where i is some identity, pki ∈ {0, 1}∗ is the public key
of the identity i, ski ∈ {0, 1}∗ is the secret key of i and
δi ∈ {honest, corrupted} denotes whether i has been cor-
rupted by the adversary or not. This model assumes there
is some secure PKI to distribute keys to identities.
Session state. For key exchange protocols the session state
for the local session identiﬁed by lsid = (i, j, k) consists of
the following:
the intended partner of this session.
the identity i to whom this session belongs.
– (pki, ski) ∈ {0, 1}∗ × {0, 1}∗: This is the long term key pair for
– pkj ∈ {0, 1}∗: This is the public key, for the identity j, who is
– sid ∈ {0, 1}∗ ∪{⊥}: This is the session identiﬁer for the session.
We say that two sessions are partners if they share the same
session identiﬁer and sid (cid:54)=⊥. Once sid is set to a value diﬀerent
from ⊥, it may not be changed.
1
Note that the corruption model is essentially a parameter of our
model. One can equally deﬁne non-forward secure protocols where
the adversary receives the state of parties, or forward-secure proto-
cols where the adversary is allowed to communicate with sessions
after corrupting them. If modelled correctly, consistency of the com-
posed game is preserved, and our overall composition result should
still holds.
setupE(LSID, kg, 1η):
Lkeys ← [ ]
For i = 1 to ni do
Run (pki, ski) ← kg(1η)
Add (i, pki, ski, honest) to the list Lkeys
For each (i, j, k) ∈ LSID do
SST((i, j, k)) ← ((pki, ski), pkj,⊥,⊥, running,⊥)
EST ← Lkeys
Return (SST, EST)
Figure 1: The setup algorithm for the execution model
of key exchange algorithms.
⊥ indicates no session key has yet been agreed.
– κ ∈ {0, 1}∗∪{⊥}: This is the session key for the protocol, where
– γ ∈ {running, accepted, rejected}: This provides the current exe-
cution state of the protocol, indicating the session’s acceptance
It is required if κ (cid:54)=⊥ then
(or rejection) of a session key.
γ = accepted and if γ = accepted then sid (cid:54)=⊥. Furthermore
if γ (cid:54)= running then execution for this session has “ﬁnished”,
therefore no further updates to the session state are allowed.
– sinfo ∈ {0, 1}∗ ∪ {⊥}: This is any additional session state re-
quired for speciﬁc key exchange protocols.
Note, these requirements mean, in the ﬁnal step of a key ex-
change protocol (in response to a Send query), the value κ is
set to some value and γ is set to accepted before a response
is returned to the adversary.
We write SST(lsid) = ((pki, ski), pkj, sid, κ, γ, sinfo) for the
session state of the session identiﬁed by lsid. For clarity we
provide notation for accessing individual elements of the ses-
sion state. For example we write SST(lsid).κ for the session
key κ of local session lsid. Individual elements of a game’s
state are also updated via similar notation.
Local session state. The local session state for key ex-
change protocols is composed of:
– δ ∈ {honest, corrupted}: Details whether the identity associated