func numTileDFS(arr []int)(r int) {
res, tmp, tMap, used := O, []byte{}, make(map[string]string, O),
for i := O; i  0{ 
 right++
 sum += val 
if val > mode { 
pre += val
if pre = right {
if pre = left { 
/ float64(sum)
---
## Page 1021
Example 1:
manner.
Return the minimum possible height that the total bookshelf can be after placing shelves in this
the fourth and fifth book on the last shelf.
might place the first and second book onto the first shelf, the third book on the second shelf, and 
order as the given sequence of books. For example, if we have an ordered list of 5 books, we 
Note again that at each step of the above process, the order of the books we place is the same
process until there are no more books to place.
shelf_width ), then build another level of shelf of the bookcase so that the total height of the 
We choose some of the books to place on this shelf(such that the sum of their thickness is  0 && width+books[j-1][O］ <= shelfwidth; j-- { 
dp[i] = dp[i-1] + height 
dp[i] = min(dp[i]，dp[j-1]+height)
width += books[j-1][0] 
height = max(height, books[j-l][i]) 
---
## Page 1024
Example 1: 
Return the roots of the trees in the remaining forest. You may return the result in any order.
After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of
trees).
Given the root of a binary tree, each node in the tree has a distinct value.
题目
1110. Delete Nodes And Return Forest
代码
Output: [[1,2,null,4],[6],[7]]
Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
func defangIPaddr(address sString) string {
import "strings"
package leetcode
 return strings.Replace(address,
4
5
".", "[.］"， -1)
9
3
---
## Page 1025
代码
解题思路
提示：
以按任意顺序组织答案。
把该节点从树上删去，最后得到一个森林（一些不相交的树构成的集合）。返回森林中的每棵树。你可
给出二叉树的根节点root，树上每个节点都有一个不同的值。如果节点值在to_delete 中出现，我们就
题目大意
Constraints:
·给出一棵树，再给出一个数组，要求删除数组中相同元素值的节点。输出最终删除以后的森林。
● The number of nodes in the given tree is at most 1000 .
[]*TreeNode] bool {
func dfsDelNodes(root *TreeNode, toDel map[int]bool, isRoot bool, res 
func delNodes(root *TreeNode, toDelete []int) []*TreeNode {
if root == nil {
每个节点都有一个介于1到1000 之间的值，
，树中的节点数最大为1000。
to_delete 包含一些从1到1000、各不相同的值。
to_delete.length <= 1000
Each node has a distinct value between 1 and 1000.
if isRoot && !toDel[root.Val]{
if root == nil {
return res
dfsDelNodes(root, deleteMap, true, &res)
res, deleteMap := []*TreeNode{}, map[int]bool{}
节点需要根据条件置空它的左节点或者右节点。
找。遇到相同的元素就删除节点。这里需要特殊判断的是当前删除的节点是否是根节点，如果是根
简单题。边遍历树，边删除数组中的元素。这里可以先把数组里面的元素放入 map 中，加速查
to_delete.length <= 1000 
to_delete contains distinct values between 1 and 1000.
 return false
 deleteMap[v] = true 
For
*res = append(*res, root)
 return nil
-,v := range toDelete {
，且各不相同。
---
## Page 1026
Example 1: 
answers may exist, you may return any of them.
 Return an answer array (of length seq.length) that encodes such a choice of A and B:
Now choose any such A and B such that max(depth(A), depth(B)) is the minimum possible
For example, "", "O)O)", and "O(O))" are VPS's (with nesting depths 0, 1, and 2), and ")
We can similarly define the nesting depth depth(s) of any VPS S as follows:
characters only, and:
A string is a valid parentheses string (denoted VPs) if and only if it consists of "(" and ")"
题目
Parentheses Strings
answer[i] = 0 if seq[i] is part of A, else answer[i] = 1. Note that even though multiple
value.
(and A.length + B.length = seq.length).
Given a VPS seq, split it into two disjoint subsequences A and B, such that A and B are VPS's 
(" and "(O)" are not VPS's. 
● It is the empty string, or 
It can be written as (A), where A is a VPS.
It can be written as AB (A concatenated with B), where A and B are VPS's, or 
depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's
depth("") = 0
return isRoot
if dfsDelNodes(root.Right, toDel, isRoot, res) {
if dfsDelNodes(root.Left, toDel,isRoot, res） {
if toDel[root.Val]{
isRoot = false
 root.Right = nil
root.Left = nil 
 isRoot = true
---
## Page 1027
解题思路
返回长度为 seq.length 答案数组 answer，
小。
现在，你需要从中选出 任意一组有效括号字符串 A和 B，使 max(depth(A), depth(B)的可能取值最
定义(注意：A.length + B.length = seq.length）。
给你一
效括号字符串。
例如：""，"0)"，和")(OO)"都是有效括号字符串，嵌套深度分别为0，1，2，而")("和"(0)"都不是有
类似地，我们可以定义任意有效括号字符串 s 的 嵌套深度 depth(S):
有效括号字符串仅由"("和")"构成，并符合下述几个条件之一：
题目大意
Constraints:
Example 2:
·这一题想要 max(depth(A)，depth(B)）值最小，可以使用贪心思想。如果A部分和 B 部分都
·给出一个括号字符串。选出A部分和B部分，使得 max(depth(A)，depth(B)）值最小。在最
Output: [0,0,0,1,1,0,1,1]
Input: seq = "()(O）)()" 
Output: [0,1,1,1,1,0]
Input: seq = "(O)(）)"
终的数组中输出 〇 和 1，0 标识是 A 部分，1 标识是B 部分。
）s 为嵌套情况，depth("("+A+")")= 1 + depth(A)，其中 A 是有效括号字符串
1 <= seq.size <= 10000
 s 为 A与 B 连接时，depth(A + B)= max(depth(A), depth(B))，其中 A 和 B 都是有效括号字符串
s 为空时，depth()= 0
嵌套，可以记作 (A)，其中 A 是有效括号字符串
连接，可以记作 AB（A与B连接），
的间隔排列即可。例如：“（（（（)))）"，上面的字符串的嵌套深度是4，按照上述的贪心思想，
尽快括号匹配，不深层次嵌套，那么总的层次就会变小。只要让嵌套的括号中属于A的和属于B
空字符串 
标记为01011010。
-个有效括号字符串 seq，将其分成两个不相交的子序列 A 和 B，且 A 和 B 满足有效括号字符串的
，其中 A 和 B 都是有效括号字符串
，选择 A 还是 B 的编码规则是：如果 seq[i] 是 A 的一部分,
则
---
## Page 1028
代码