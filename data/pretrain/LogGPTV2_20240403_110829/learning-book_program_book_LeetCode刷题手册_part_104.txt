·给出一个数组，代表的是公交车站每站直接的距离。距离是按照数组下标的顺序给出的，公交车可
以按照顺时针行驶，也可以按照逆时针行驶。问行驶的最短距离是多少。
·按照题意，分别算出顺时针和逆时针的行驶距离，比较两者距离，取出小值就是结果。
代码
package leetcode
func distanceBetweenBusStops(distance []int， start int, destination int) int {
clockwiseDis, counterclockwiseDis, n := 0, 0, len(distance)
for i := start; i != destination; i = (i + 1) % n {
clockwiseDis += distance[i]
for i := destination; i != start;i =(i+ 1) % n {
counterclockwiseDis += distance[i]
if clockwiseDis >1
if calNthcount(mid,int64(a)，int64(b),int64(c))<int64(n) {
1ow = mid + 1
}else{
high = mid
return int(low)
func calNthCount(num，a, b,c int64) int64 {
ab，bc，ac := a*b/gcd(a， b)，b*c/gcd(b, c)， a*c/gcd(a, c)
abc := a * bc / gcd(a, bc)
return num/a + num/b + num/c - num/ab - num/bc - num/ac + num/abc
func gcd(a, b int64) int64 {
for b != 0 {
a，b = b， a%b
return a
1202.SmallestStringWithSwaps
题目
---
## Page 1063
=sge a se s  u sa o s o e e  s s e  e no
[a, b] indicates 2 indices(0-indexed) of the string.
You can swap the characters at any pair of indices in the given pairs any number of times
sdems au gusn ae o pagueup aq ues s se duns isallews Ajejudegoxal au unag
Example 1:
Input: s = "dcab", pairs = [[0,3],[1,2]]
poeq.:andno
Explaination:
peoq., = s ‘[e]s pue [o]s dems
poeq. = s ‘[z]s pue [t]s dems
Example 2:
Input: s = "dcab", pairs = [[0,3],[1,2],[0,2]]
Output: "abcd"
Explaination:
Swap s[0] and s[3], s = "bcad"
Swap s[0] and s[2], s = "acbd"
Swap s[1] and s[2], s = "abcd"
Example 3:
Input: s = "cba", pairs = [[0,1],[1,2]]
output: "abc"
Exp1aination:
Swap s[0] and s[1], s = "bca"
eq.. = s *[z]s pue [t]s dems
Swap s[0] and s[1], s = "abc"
Constraints:
●1<= s.1ength <= 10^5
●0 <= pairs.1ength <= 10∧5
●0 <= pairs[i][o], pairs[i][1] < s.length
●s only contains lower case English letters.
题目大意
给你一个字符串s，以及该字符串中的一些“索引l对”数组pairs，其中pairs[i]=[a,b]表示字符串中
的两个索引（编号从0开始）。你可以任意多次交换在pairs中任意一对索引处的字符。返回在经过
若干次交换后，s可以变成的按字典序最小的字符串。
提示：
●1 <= s.length <= 10^5
---
## Page 1064
● 0 <= pairs.length <= 10^5
● 0 <= pairs[ij][o], pairs[i][1] < s.length
·s中只含有小写英文字母
解题思路
·给出一个字符串和一个字符串里可交换的下标。要求交换以后字典序最小的字符串。
·这一题可以用并查集来解题，先把可交换下标都union（）起来，每个集合内，按照字典序从小到
大排列。最后扫描原有字符串，从左到右依次找到各自对应的集合里面最小的字符进行替换，每次
替换完以后，删除集合中该字符（防止下次重复替换）。最终得到的字符就是最小字典序的字符。
代码
package leetcode
import（
"sort"
"'github.com/halfrost/LeetCode-Go/template"
：
func smallestStringwithSwaps(s string, pairs [][]int) string {
uf, res, sMap := template.UnionFind{}, []byte(s), map[int][]byte{}
uf.Init(len(s))
for -, pair := range pairs {
uf.union(pair[o], pair[1])
for i := 0; i < 1en(s); i++ {
r := uf.Find(i)
sMap[r] = append(sMap[r], s[i])
for _, v := range sMap {
sort.slice(v, func(i, j int) bool {
return v[i] < v[j]
})
for i:= 0; i < 1en(s); i++ {
r := uf.Find(i)
bytes := sMap[r]
res[i] = bytes[0]
sMap[r] = bytes[1: 1en(bytes)]
return string(res)
---
## Page 1065
1207.UniqueNumberofOccurrences
题目
Given an array of integers arr, write a function that returns true if and only if the number of
occurrences of each value in the array is unique.
Example 1:
Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values
have the same number of occurrences.
Example 2:
Input: arr = [1,2]
Output: false
Example 3:
Input: arr = [-3,0,1, -3,1,1,1, -3,10,0]
Output: true
Constraints:
●1<= arr.1ength<= 1000
●-1000 <= arr[i]<= 1000
题目大意
给你一个整数数组arr，请你帮忙统计数组中每个数的出现次数。如果每个数的出现次数都是独一无二
的，就返回true；否则返回false。
提示：
●1 <= arr.length <= 1000
● -1000 <= arr[i] <= 1000
解题思路
·给出一个数组，先统计每个数字出现的频次，判断在这个数组中是否存在相同的频次。
·简单题，先统计数组中每个数字的频次，然后用一个map判断频次是否重复。
代码
---
## Page 1066
package leetcode
func uniqueoccurrences(arr []int) bool {
freq, m := map[int]int{}, map[int]bool{}
for _, v := range arr {
freq[v]++
for
-,V := range freq {
if _, ok := m[v];!ok {
m[v] = true
}else{
return false
3
return true
1208.GetEqualSubstringsWithinBudget
题目
You are given two strings s and t of the same length. You want to change s to t. Changing
the i-th character of s to i -th character of t costs |s[i] - t[i]l that is, the absolute
dlifference between the ASCll values of the characters.
You are also given an integer maxCost .
Return the maximum length of a substring of s that can be changed to be the same as the
corresponding substring of t with a cost less than or equal to maxCost
If there is no substring from s that can be changed to its corresponding substring from t,
return 0.
Example 1:
Input: s = "abcd", t = "bcdf", maxCost = 3
output: 3
length is 3.
Example 2:
---
## Page 1067
 = 1soxew *ap = 1*poqe =s :ndu
Output: 1
Explanation: Each character in s costs 2 to change to charactor in t, so the
maximum 1ength is 1.
Example 3:
Input: s = "abcd", t = "acde", maxCost = 0
Output:1
Explanation: You can't make any change, so the maximum length is 1.
Constraints:
●1<= s.1ength,t.1ength <= 10^5
0<=maxCost<=10^6
●s and t only contain lower case English letters
题目大意
给你两个长度相同的字符串，s和t。将s中的第i个字符变到t中的第I个字符需要|s[]-t[]|的开销
（开销可能为O），也就是两个字符的ASCII码值的差的绝对值。
用于变更字符串的最大预算是maxCost。在转化字符串时，总开销应当小于等于该预算，这也意味着字
符串的转化可能是不完全的。如果你可以将s的子字符串转化为它在t中对应的子字符串，则返回可以
转化的最大长度。如果s中没有子字符串可以转化成t中对应的子字符串，则返回0。
提示：
●1 <= s.length, tlength <= 10^5