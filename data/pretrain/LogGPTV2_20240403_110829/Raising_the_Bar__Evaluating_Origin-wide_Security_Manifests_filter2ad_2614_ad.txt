16 x-content-type-options
22 strict-transport-security
28 timing-allow-origin
32 x-frame-options
33 x-xss-protection
49 content-security-policy
201 public-key-pins
baseline
1 CORS headers
2 x-content-type-options
3 x-frame-options
4 strict-transport-security
5 x-xss-protection
6 timing-allow-origin
7 content-security-policy
8 public-key-pins
86.11%
58.46%
55.87%
31.87%
7.99%
16.84B
18.05B
19.68B
16.02B
22.73B
30.42B
23.54%
29.08B
15.97%
51.39B
9.81%
26.34B
5.55%
25.12B
4.92%
4.12%
32.01B
0.95% 693.30B
0.07% 210.49B
76.40B
28.13%
29.00B
18.18%
24.40B
13.45%
48.25B
12.79%
28.32B
10.19%
6.25%
26.29B
2.58% 591.33B
0.09% 194.84B
31.70d
50.33d
38.71d
47.60d
28.32d
60.31d
75.01d
39.11d
33.62d
67.42d
29.70d
5.54d
4.30d
51.24d
66.24d
83.86d
45.73d
78.81d
48.78d
13.71d
49.50d
Firstly, some of the average header sizes are quite large. For instance,
the Set-Cookie, Content-Security-Policy and Public-Key-Pins
headers take up hundreds of bytes on average. This gives credence
to the claim from the origin policy draft, that HTTP headers can
occupy multiple KiB per request.
Secondly, some headers occur frequently and have a large stability.
For instance, the Server header occurs in 87.39% of all observed
HTTP responses and has a stability or average lifetime of 32.14
days. This evidence also helps support the claim from the origin
policy draft that HTTP headers are often repeated.
Origin Manifests. We used the automated manifest generator
(See Section 5.3) to create origin manifests for each day. As was the
case before, we only used headers from responses for URLs which
recurred every day.
The minsize parameter was kept to its default of 2 so that no
origin manifests are generated based on less than two observed
responses. We evaluated the eect of the cutoff parameter for
values of 50%, 70% and 90%, indicating the minimum size of the
majority of responses that must agree on a header value before it
is adopted into the fallback section of the manifest.
Table 3: The average size in bytes, average stability and the
amount of fully stable vs. total number of non-empty gener-
ated manifests, for automatically learned origin manifests
for dierent cutoff parameter values.
cuto average
size
average
stability
50% 408.13B 17.87d
70% 304.17B 18.40d
90% 282.89B 17.21d
stable vs. all
manifests
883 / 1500
850 / 1494
819 / 1493
Table 3 shows the average size and stability, as well as the number
of fully (100 days) stable versus all generated non-empty manifests.
To measure the individual inuence of headers on the stability of
manifests, we analyzed the stability of headers in the fallback,
baseline and augmentonly sections of the generated manifests.
For this analysis, we used minsize 2 and cutoff 50%.
Table 4 shows the results for the same selection of HTTP head-
ers and the security headers as before. A longer list of the top 50
most popular headers for the fallback section can be found in
Appendix A.
Both sections unsafe-cors-preflight-with-credentials and
cors-preflight are not listed because of their low inclusion fre-
quency in manifests: 0.07% and 0.66%, respectively.
Based on the results from this experiment, we again make some
observations:
Firstly, the cutoff parameter aects the size and stability of auto-
generated origin manifests, which indicates that the generated
manifests should not be used as-is. We recommend a quality inspec-
tion by a security ocer before putting an auto-generated origin
manifest into production.
Secondly, the average stability of the generated origin manifests
is around 18 days, which indicates that modications to the origin
manifest are only needed once in a while, reducing the workload
of a security ocer.
350
augmentonly
1 set-cookie
15.21%
19.01B
44.33d
Thirdly, the average origin manifest is only a few hundred bytes
in size, which is quite small in comparison to the content served
by the typical web origin. This indicates that the incurred network
trac overhead may be manageable.
6.3 Performance measurement
The main goal of the origin manifest mechanism is to improve secu-
rity. However, the volume of network trac is increased by trans-
missions of the origin manifest le and the Sec-Origin-Manifest
header, and decreased because of the removal of redundant headers
and cached CORS preight requests. This net change in network
trac may have an unintended overhead with a negative impact.
In this section we are interested in measuring the impact of the ori-
gin manifest mechanism on the volume of network trac observed
between client and server. Note that we are not concerned with
runtime overhead because our proof-of-concept implementations
are not implemented as a browser modication as discussed in
Section 5.1.
6.3.1
Setup. For this experiment, we augment the setup as de-
scribed in Section 5 with extra proxies between browser and client-
proxy (“pre”), clientproxy and serverproxy (“mid”), and serverproxy
and the Web (“post”). This setup is depicted in Figure 1. The extra
ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
Steven Van Acker, Daniel Hausknecht, and Andrei Sabelfeld
proxies (“pre”, “mid” and “post”) only perform logging and allow
us to make measurements about the web trac before and after it
is modied by the origin manifest mechanism.
Instead of visiting single web pages, we simulate web browsing
sessions where a user visits multiple related web pages. We create
the URLs in these web browsing session by querying Bing for the top
20 pages in each of the Alexa top 10,000 domains. A web browsing
session is then the set of pages returned by Bing for a single top
Alexa domain.
Using Selenium, we automate a Chrome browser to visit each URL
in the web browsing session in turn. This process is repeated four
times: rst, we visit the URLs just after clearing the browser cache
(“before-uncached”), followed by a second visit where we do not
clear the browser cache (“before-cached”). These rst two phases
serve to train the automated learner. Then, we instruct the server-
proxy to generate origin manifests as described in Section 5.3 and
the origin manifest mechanism is activated. We clear the browser
cache and visit the URLs again (“after-uncached”) and then a -
nal time without clearing the cache (“after-cached”). These four
dierent phases are designed to measure trac before and after
the application of the origin manifest, as well as the impact of the
browser cache on the volume of web trac.
The measurement proxies (“pre”, “mid” and “post”) record the HTTP
headers of all requests and responses in each of the four phases of
the experiment. Because of remote network failures, it is possible
that some URLs in a web browsing session can not load. We limit
ourselves to only those web browsing sessions that were able to
successfully visit all the URLs. Furthermore, because of dynamic
content such as advertising, the web resources loaded during a
web browsing session can dier. For our statistics, we only con-
sider those resources that were loaded in all four phases of a web
browsing session.
6.3.2 Results. Bing returned 180,831 URLs of which 180,443
were unique, resulting in an average of 18.04 URLs per Alexa domain
and web browsing session.
From the 10,000 top Alexa domains we intended to use as a basis
for creating web browsing sessions, only 8,983 were usable. The
remaining 1,017 domains did not yield any URLs from Bing, or their
respective web browsing session did not deliver reliable results over
all four phases of the experiment.
The results of this measurement study are shown in Table 5.
On the rst visit, without using previously cached web trac, we
measured a total trac of 34.3MiB on average per web brows-
ing session, of which 2.1MiB is occupied by HTTP headers and
2.5KiB by CORS preight trac. After application of the origin
manifest mechanism, we see an average of 128.5KiB of web trac
related to the retrieval of origin manifests les, which includes the
Sec-Origin-Manifest header in all requests and responses.
As expected, the volume of network trac for the HTTP head-
ers decreases both because of the use of the origin manifest, and
also because of the browser cache. Without the browser cache, the
header-only trac decreases from 2.1MiB to 1.8MiB after appli-
cation of the origin manifest mechanism, which is a reduction of
13.84%. When using the browser cache, the header-only trac is
rst reduced by 10.95% to 1.9MiB, and by 24.00% to 1.6MiB after
application of the origin manifest mechanism.
Table 5: Average volume of web trac measured for the
8,983 web browsing sessions, before and after application of
the origin manifest mechanism, without (“uncached”) and
with (“cached”) using the browser cache. Percentages are cal-
culated per row, in relation to the uncached trac before
application of the origin manifest mechanism.
Trac type
Headers only
Origin manifests
CORS preights
Total
uncached
cached
Without origin manifest
—
2.1MiB (100.00%)
(—)
2.5KiB (100.00%)
34.3MiB (100.00%)
—
1.9MiB (89.05%)
(—)
2.2KiB (85.88%)
27.6MiB (80.57%)
With origin manifest
Headers only
Origin manifests
CORS preights
Total
1.8MiB
128.5KiB
470.1B
34.0MiB
(86.16%)
(—)
(18.13%)
(99.28%)
1.6MiB (76.00%)
78.5KiB
(—)
421.0B (16.23%)
27.3MiB (79.81%)
The trac overhead generated by the origin manifest mechanism
is due to the transmission of origin manifest les as well as the
Sec-Origin-Manifest header in requests and responses. We mea-
sured an average of 128.5KiB during the uncached phase, which
is reduced to 78.5KiB after the browser cache is activated and the
browser already has the latest version of each origin manifest le
cached.
Requests and responses for CORS preights before application
of the origin manifest mechanism amount to 2.5KiB and 2.2KiB
(85.88%) for uncached and cached respectively. This volume of trac
is reduced by 81.87% to 470.1B and by 83.77% to 421.0B for uncached
and cached respectively, when the origin manifest mechanism is in
use.
All in all, the total size of all web trac observed throughout a web
browsing session, drops from 34.3MiB by 0.72% to 34.0MiB due to
application of the origin manifest mechanism, and from 27.6MiB to
27.3MiB (80.57% to 79.81%) when the browser cache is used.
7 DISCUSSION
The introductory example use case in Section 1 highlighted the need
for a mechanism such as origin manifest, which the web security
community is currently drafting. With our evaluation of this draft,
we answer some research questions in order to justify and improve
the origin policy’s standard draft proposal.
Through our prototype implementation, we evaluated the mecha-
nism in practice and conclude that it is possible to deploy without
breaking any websites in unexpected ways. The prototype in form
of web proxies indicates that adoption by actual browsers is indeed
feasible.
Our large-scale studies conrm suspicions in the standard draft
that using origin manifests in a real world setting does reduce the
amount of network trac. But the reduction is rather insigni-
cant in practise. These large-scale studies also showed that origin
manifests can be generated in an automated way by observing and
learning from web trac for a particular web origin. The auto-
generated manifests serve as a good starting point for an origin
security ocer to formulate and ne-tune an origin manifest. We
351
Raising the Bar: Evaluating Origin-wide Security Manifests
ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
remind however, that our automated origin manifest generator is
only a proof of concept tool and we recommend human inspection
of its output before deployment. Furthermore, the results from our
experiments show that the auto-generated origin manifests do not
change too often over time. The average stability of around 18 days
thus makes the origin manifest mechanism usable in practice.
Our practical evaluation of the standard draft revealed two over-