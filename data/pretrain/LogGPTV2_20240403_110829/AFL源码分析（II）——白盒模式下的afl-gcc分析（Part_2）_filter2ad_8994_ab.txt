      .lcomm   __afl_setup_failure, 1
      .comm    __afl_global_area_ptr, 8, 8
    .AFL_SHM_ENV:
      .asciz  "SHM_ENV_VAR"
接下来我们逐函数进行分析。
####  `__afl_maybe_log`函数
此函数主要负责保存现场并且检查共享内存是否已被分配。
    __afl_maybe_log:
      lahf
      seto  %al
      /* Check if SHM region is already mapped. */
      movq  __afl_area_ptr(%rip), %rdx
      testq %rdx, %rdx
      je    __afl_setup
  1. 使用`lahf`(`Load AH with Flags`)指令将标志寄存器的低八位(`CF`-进位标志、`PF`-奇偶标志、`AF`-辅助进位标志、`ZF`-零标志、`SF`-符号标志)存储到`AH`寄存器中。 
    * 进位标志：用于反映运算是否产生进位或借位。如果运算结果的最高位产生一个进位或借位，则`CF`置`1`，否则置`0`。运算结果的最高位包括字操作的第`15`位和字节操作的第`7`位。移位指令也会将操作数的最高位或最低位移入`CF`。
    * 奇偶标志：用于反映运算结果低`8`位中“`1`”的个数。“`1`”的个数为偶数，则`PF`置`1`，否则置`0`。
    * 辅助进位标志：算数操作结果的第三位(从`0`开始计数)如果产生了进位或者借位则将其置为`1`，否则置为`0`，常在`BCD`(`binary-codedecimal`)算术运算中被使用。
    * 零标志：用于判断结果是否为`0`。运算结果`0`，`ZF`置`1`，否则置`0`。
    * 符号标志：用于反映运算结果的符号，运算结果为负，`SF`置`1`，否则置`0`。因为有符号数采用补码的形式表示，所以`SF`与运算结果的最高位相同。
  2. 使用`seto %al`记录此时`OF`(溢出标志)的状态，当标志寄存器中的此标志位置位时，将`AL`寄存器置位。 
    * 溢出标志：反映有符号数加减运算是否溢出。如果运算结果超过了`8`位或者`16`位有符号数的表示范围，则`OF`置`1`，否则置`0`。
  3. 使用`movq __afl_area_ptr(%rip), %rdx`将`__afl_area_ptr(%rip)`的值存入`RDX`寄存器中。此处`__afl_area_ptr(%rip)`是在`BSS`段中存储的一个一个指针，此指针指向共享内存。
  4. 使用`testq %rdx, %rdx`检查`RDX`寄存器的值是否存在，若存在则代表共享内存已被分配，否则，应当认为此时共享内存未被分配。
  5. 如果`RDX`为空，`ZF`置位，此时跳转进入`__afl_setup`；否则，按顺序执行`__afl_store`函数。
####  `__afl_store`函数
此函数主要负责记录命中桩代码的次数并计算其覆盖区域。
    __afl_store:
    /* Calculate and store hit for the code location specified in rcx. */
    #ifndef COVERAGE_ONLY
      xorq __afl_prev_loc(%rip), %rcx
      xorq %rcx, __afl_prev_loc(%rip)
      shrq $1, __afl_prev_loc(%rip)
    #endif /* ^!COVERAGE_ONLY */
    #ifdef SKIP_COUNTS
      orb  $1, (%rdx, %rcx, 1)
    #else
      incb (%rdx, %rcx, 1)
    #endif /* ^SKIP_COUNTS */
  1. 首先，这里用到了`RCX`寄存器的值，如果还记得上一篇文章中对于`__afl_maybe_log`的调用逻辑的分析的话，应该记得`RCX`的值是一个随机数，而这个随机数事实上是用于标记本次桩命中逻辑的。
  2. 当`COVERAGE_ONLY`标志未被设置： 
    1. 将`__afl_prev_loc(旧值) ^ 随机数(RCX)`的值存入`RCX`寄存器中。
    2. 将`__afl_prev_loc(旧值) ^ __afl_prev_loc(旧值) ^ 随机数(RCX)`的值存储在`__afl_prev_loc`中，即将随机数存入`__afl_prev_loc`中。
    3. 将`__afl_prev_loc`中的值逻辑右移1位。
  3. 当`SKIP_COUNTS`标志被设置，将`Byte[RDX + RCX * 1]`的值与1进行或操作并将结果存回原处。 
    * 此处的`(%rdx, %rcx, 1)`是一种比例寻址的写法，语法为`(基地址,偏移量,比例因子)`，最终取出`基地址+偏移量*比例因子`的值。
  4. 当`SKIP_COUNTS`标志未被设置，将`Byte[RDX + RCX * 1]`的值增加1。此时`RDX`是共享内存的地址，`RCX`是`__afl_prev_loc(旧值) ^ 随机数(RCX)`，而当程序进行到第二个桩时，事实上`__afl_prev_loc(旧值)`就是`上一个桩标识 >> 1`的值了。即，此步事实上就是`share_mem[__afl_prev_loc(旧值) ^ 随机数(RCX)]++`。实际上是存入一个64k大小的哈希表，存在碰撞几率，但是问题不大。而这个索引是通过异或得到的。
####  `__afl_return`函数
此函数主要负责AFL插入的桩代码返回。
    __afl_return:
      addb $127, %al
      sahf
      ret
  1. 使用`add`命令将`AL`寄存器的值加上`0x7F`用以恢复`OF`标志的值。
  2. 从`AH`寄存器中恢复标志寄存器的低八位。
  3. 函数返回。
####  `__afl_setup`函数
此函数主要用于检查文件全局指针是否存在。
    __afl_setup:
      /* Do not retry setup if we had previous failures. */
      cmpb $0, __afl_setup_failure(%rip)
      jne __afl_return
      /* Check out if we have a global pointer on file. */
      movq  __afl_global_area_ptr(%rip), %rdx
      testq %rdx, %rdx
      je    __afl_setup_first
      movq %rdx, __afl_area_ptr(%rip)
      jmp  __afl_store
  1. 检查`AFL`初始化失败计数器`__afl_setup_failure(%rip)`的值是否为0，若不为0，则跳转进入`__afl_return`函数。
  2. 将`__afl_global_area_ptr(%rip)`这个`BSS段`变量(此变量表示一个文件全局指针)的值存入`RDX`寄存器，检查`RDX`寄存器是否为空，若为空，则跳转进入`__afl_setup_first`函数。
  3. 若`RDX`寄存器不为空，则将`RDX`寄存器的值写入`__afl_area_ptr`随后跳入`__afl_store`函数。此时文件全局指针就是我们的共享内存指针。
####  `__afl_setup_first`函数
此函数主要用于获取共享内存。
    __afl_setup_first:
      /* Save everything that is not yet saved and that may be touched by
         getenv() and several other libcalls we'll be relying on. */
      leaq -352(%rsp), %rsp
      movq %rax,   0(%rsp)
      movq %rcx,   8(%rsp)
      movq %rdi,  16(%rsp)
      movq %rsi,  32(%rsp)
      movq %r8,   40(%rsp)
      movq %r9,   48(%rsp)
      movq %r10,  56(%rsp)
      movq %r11,  64(%rsp)
      movq %xmm0,  96(%rsp)
      movq %xmm1,  112(%rsp)
      movq %xmm2,  128(%rsp)
      movq %xmm3,  144(%rsp)
      movq %xmm4,  160(%rsp)
      movq %xmm5,  176(%rsp)
      movq %xmm6,  192(%rsp)
      movq %xmm7,  208(%rsp)
      movq %xmm8,  224(%rsp)
      movq %xmm9,  240(%rsp)
      movq %xmm10, 256(%rsp)
      movq %xmm11, 272(%rsp)
      movq %xmm12, 288(%rsp)
      movq %xmm13, 304(%rsp)
      movq %xmm14, 320(%rsp)
      movq %xmm15, 336(%rsp)
      /* Map SHM, jumping to __afl_setup_abort if something goes wrong. */
      /* The 64-bit ABI requires 16-byte stack alignment. We'll keep the
         original stack ptr in the callee-saved r12. */
      pushq %r12
      movq  %rsp, %r12
      subq  $16, %rsp
      andq  $0xfffffffffffffff0, %rsp
      leaq .AFL_SHM_ENV(%rip), %rdi
      call getenv@PLT
      testq %rax, %rax
      je    __afl_setup_abort
      movq  %rax, %rdi
      call atoi@PLT
      xorq %rdx, %rdx   /* shmat flags    */
      xorq %rsi, %rsi   /* requested addr */
      movq %rax, %rdi   /* SHM ID         */
      call shmat@PLT
      cmpq $-1, %rax
      je   __afl_setup_abort
      /* Store the address of the SHM region. */
      movq %rax, %rdx
      movq %rax, __afl_area_ptr(%rip)
      movq __afl_global_area_ptr@GOTPCREL(%rip), %rdx
      movq %rax, (%rdx)
      movq %rax, %rdx
  1. 开辟一块`0x160`大小的栈空间，并保存`RAX`、`RCX`、`RDI`、`RSI`、`R8`、`R9`、`R10`、`R11`、`Xmm0-Xmm15`寄存器的值到栈上。
  2. 保存`R12`寄存器到栈上，然后将`RSP`保存在`R12`寄存器内，再开辟一段`0x10`大小的栈空间，进行内存对齐。
  3. 调用`getenv("SHM_ENV_VAR")`获取共享内存标识符，若返回空，则跳入`__afl_setup_abort`函数
  4. 否则，将共享内存标识符存入`RDI`，并调用`atoi`将其转换为数字。
  5. 调用`shmat(RAX,0,0)`，即调用`shmat(atoi(getenv("SHM_ENV_VAR")),0,0)`来连接共享内存标识符所示的共享内存，连接成功后把共享内存区对象映射到调用进程的地址空间，随后可像本地空间一样访问。 
    * `shmat`的函数原型为`void *shmat(int shmid, const void *shmaddr, int shmflg)`，`shmid`表示共享内存标识符，`shmaddr`表示共享内存标识符指定共享内存出现在进程内存地址的什么位置，可以直接指定为`NULL`让内核自己决定一个合适的地址位置，`shmflg`表示标志位，未指定标志位时，共享内存默认为读-写权限，目前只定义了两个可用的标志位： 
      * `#define SHM_RDONLY 010000`(只读标志)：当此标志被附加时，共享内存为只读权限。
      * `#define SHM_RND 020000`(`SHMLBA`标志)：当此标志被设置时，共享内存被连接到`SHMLBA`所指向的内存区域。
  6. 检查`shmat()`的返回值是否为`-1`，若为`-1`则表示共享内存分配失败，跳入`__afl_setup_abort`函数。
  7. 将附加好的共享内存地址存入`RDX`寄存器以及`__afl_area_ptr`中
  8. 将`__afl_global_area_ptr`的地址存入`RDX`中
  9. 将附加好的共享内存地址存入`[RDX]`中
  10. 将附加好的共享内存地址存入`RDX`寄存器中 
    * 这里是一种寻址的写法，可以简单的认为`[__afl_global_area_ptr[@GOTPCREL](https://github.com/GOTPCREL "@GOTPCREL")(%rip)]=__afl_global_area_ptr(%rip)`
####  `__afl_forkserver`函数
此函数主要用于栈内存对齐以及向状态管道写入四字节以告知父进程已经准备好了。
    __afl_forkserver:
      /* Enter the fork server mode to avoid the overhead of execve() calls. We
         push rdx (area ptr) twice to keep stack alignment neat. */
      pushq %rdx
      pushq %rdx
      /* Phone home and tell the parent that we're OK. (Note that signals with
         no SA_RESTART will mess it up). If this fails, assume that the fd is
         closed because we were execve()d from an instrumented binary, or because
         the parent doesn't want to use the fork server. */
      movq $4, %rdx               /* length    */
      leaq __afl_temp(%rip), %rsi /* data      */
      movq $" STRINGIFY((FORKSRV_FD + 1)) ", %rdi       /* file desc */
      call write@PLT
      cmpq $4, %rax
      jne  __afl_fork_resume
  1. 使用两次`pushq %rdx`来使得占内存对齐。
  2. 调用`write(STRINGIFY((FORKSRV_FD + 1)),__afl_temp,4)`来向指定文件描述符写4个字节，写入的内容是`__afl_temp`的值。 
    * 此处，`FORKSRV_FD`的值由`config.h`指定，语句为`#define FORKSRV_FD 198`。
    * 这个文件描述符实际上是程序的状态管道，具体逻辑在`afl-fuzz.c`中。
  3. 检查实际写入字节数是否为4字节，若不为四字节，则跳转至`__afl_fork_resume`函数。
####  `__afl_fork_wait_loop`函数
此函数为AFL的桩代码主逻辑，且桩代码将在此处循环。
    __afl_fork_wait_loop:
      /* Wait for parent by reading from the pipe. Abort if read fails. */
      movq $4, %rdx               /* length    */
      leaq __afl_temp(%rip), %rsi /* data      */
      movq $" STRINGIFY(FORKSRV_FD) ", %rdi             /* file desc */
      call read@PLT
      cmpq $4, %rax
      jne  __afl_die
      /* Once woken up, create a clone of our process. This is an excellent use
         case for syscall(__NR_clone, 0, CLONE_PARENT), but glibc boneheadedly
         caches getpid() results and offers no way to update the value, breaking
         abort(), raise(), and a bunch of other things :-( */
      call fork@PLT
      cmpq $0, %rax
      jl   __afl_die
      je   __afl_fork_resume
      /* In parent process: write PID to pipe, then wait for child. */
      movl %eax, __afl_fork_pid(%rip)
      movq $4, %rdx                   /* length    */
      leaq __afl_fork_pid(%rip), %rsi /* data      */
      movq $" STRINGIFY((FORKSRV_FD + 1)) ", %rdi             /* file desc */
      call write@PLT
      movq $0, %rdx                   /* no flags  */
      leaq __afl_temp(%rip), %rsi     /* status    */
      movq __afl_fork_pid(%rip), %rdi /* PID       */
      call waitpid@PLT
      cmpq $0, %rax
      jle  __afl_die
      /* Relay wait status to pipe, then loop back. */
      movq $4, %rdx               /* length    */
      leaq __afl_temp(%rip), %rsi /* data      */
      movq $" STRINGIFY((FORKSRV_FD + 1)) ", %rdi         /* file desc */
      call write@PLT
      jmp  __afl_fork_wait_loop
  1. 调用`read(STRINGIFY(FORKSRV_FD),__afl_temp,4)`，即`read(198,__afl_temp,4)`，用以从状态管道中读取四字节状态数据。
  2. 当读取的字节数不为4字节时，跳转`__afl_die`函数。
  3. 一旦程序运行到此处，应当视为程序的流程命中了一次插桩，此时调用`fork()`函数创建一个子进程。若`fork()`函数返回负值，表示子进程创建失败，跳转`__afl_die`函数。若`fork()`函数返回0，表示此进程为子进程，跳转`__afl_fork_resume`函数。
  4. 将子进程号存储在`__afl_fork_pid`中。
  5. 调用`write(STRINGIFY((FORKSRV_FD + 1)),__afl_fork_pid,4)`，即`write(199,__afl_fork_pid,4)`，用以将子进程号发送至状态管道。
  6. 调用`waitpid(__afl_fork_pid,__afl_temp,0)`，暂停当前进程，直到接收到子进程的信号或子进程退出为止。传入的`__afl_temp`将用于保存程序状态。
  7. 若`waitpid`函数返回`-1`，则函数出错，跳转`__afl_die`函数。
  8. 调用`write(STRINGIFY((FORKSRV_FD + 1)),__afl_temp,4)`，即`write(199,__afl_temp,4)`，用以将四字节任意数据发送至状态管道，以告知父进程，此时本进程处于等待状态。
  9. **跳回`__afl_fork_wait_loop`，即，进入循环。**
####  `__afl_fork_resume`函数
此函数用于恢复关闭两个状态管道并恢复现场。
    __afl_fork_resume:
      /* In child process: close fds, resume execution. */
      movq $" STRINGIFY(FORKSRV_FD) ", %rdi
      call close@PLT
      movq $" STRINGIFY((FORKSRV_FD + 1)) ", %rdi
      call close@PLT
      popq %rdx
      popq %rdx
      movq %r12, %rsp
      popq %r12
      movq  0(%rsp), %rax
      movq  8(%rsp), %rcx
      movq 16(%rsp), %rdi
      movq 32(%rsp), %rsi
      movq 40(%rsp), %r8
      movq 48(%rsp), %r9
      movq 56(%rsp), %r10
      movq 64(%rsp), %r11
      movq  96(%rsp), %xmm0
      movq 112(%rsp), %xmm1
      movq 128(%rsp), %xmm2