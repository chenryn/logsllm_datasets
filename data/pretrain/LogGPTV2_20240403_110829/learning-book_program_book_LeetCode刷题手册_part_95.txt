1. The number of nodes in the tree will be between 2 and 100.
2. Each node has a unique integer value from 1 to 100.
题目大意
---
## Page 954
在二叉树中，根节点位于深度0处，每个深度为k的节点的子节点位于深度k+1处。如果二叉树的两个
节点深度相同，但父节点不同，则它们是一对堂兄弟节点。我们给出了具有唯一值的二叉树的根节点
root，以及树中两个不同节点的值x和y。只有与值x和y对应的节点是堂兄弟节点时，才返回true。
否则，返回 false。
解题思路
·给出一个二叉树，和×，y两个值，要求判断这两个值是不是兄弟结点。兄弟结点的定义：都位于
同一层，并且父结点是同一个结点。
·这一题有3种解题方法，DFS、BFS、递归。思路都不难。
代码
package leetcode
* Definition for a binary tree node.
type TreeNode struct{
Val int
Left *TreeNode
Right *TreeNode
//解法一递归
func isCousins(root *TreeNode,x int, y int) bool{
if root == nil {
return false
1evelx,levelY := findLevel(root, x,1),findLevel(root, y,1)
if levelx != levely {
return false
3
return !haveSameParents(root, x, y)
func findLevel(root *TreeNode, x,level int) int {
if root == nil {
return 0
if root.val != x {
leftLevel, rightLevel := findLevel(root.Left, x, level+1) ,
findLevel(root.Right, x,1evel+1)
if leftLevel == 0 {
return rightLevel
---
## Page 955
return leftLevel
return level
func haveSameParents(root *TreeNode, x,y int) bool {
if root == nil {
return false
if (root.Left != nil && root.Right != nil && root.Left.Val == x &&
root.Right.val == y) 11
(root.Left != nil && root.Right != nil && root.Left.val == y &&
root.Right.Val == x){
return true
return haveSameParents(root.Left, x, y) 11 haveSameParents(root.Right, x, y)
//解法二BFS
type mark struct {
prevint
depth int
func isCousinsBFS(root *TreeNode,x int,y int) bool{
if root == nil {
return false
queue :=[]TreeNode{root}
visited := [101]*mark{}
visited[root.Val] = &mark{prev: -1, depth: 1}
for len(queue)> 0{
node := queue[0]
queue = queue[1:]
depth := visited[node.val] .depth
if node.Left != nil {
visited[node.Left.val] = &mark{prev: node.val, depth: depth + 1}
queue = append(queue, node.Left)
if node.Right I= nil {
visited[node.Right.Val] = &mark{prev: node.Val, depth: depth + 1}
queue = append(queue, node.Right)
if visited[x] == ni1 11 visited[y] == ni] {
return false
---
## Page 956
if visited[x] .depth == visited[y] .depth && visited[x] -prev !=
visited[y].prev {
return true
return false
//解法三DFS
func isCousinsDFS(root *TreeNode, x int, y int) bool {
var depthl, depth2， parentl, parent2 int
dfsCousins(root， x, 0,-l, &parentl, &depthl)
dfsCousins(root,y，0,-l,&parent2,&depth2)
return depth1 > 1 && depth1 == depth2 && parent1 != parent2
func dfsCousins(root *TreeNode, val, depth, last int, parent, res *int) {
if root == nil {
return
if root.val == val {
*res = depth
*parent = last
return
depth++
dfsCousins(root.Left, val, depth, root.val, parent, res)
dfsCousins(root.Right, val, depth, root.val, parent, res)
995.MinimumNumberofKConsecutiveBitFlips
题目
In an array A containing only 0s and 1s, a K -bit flip consists of choosing a (contiguous) subarray
au ul L Aana pue ′, o feueqns au ul o Aana Sujgueup Aisnoauenjnwis pue x ygual jo
subarray to 0.
Return the minimum number of k -bit flips required so that there is no 0 in the array. If it is not
possible, return -1 .
Example 1:
Input: A = [0,1,0], K = 1
Output: 2
Explanation: Flip A[0], then flip A[2].
Example 2:
---
## Page 957
Input: A = [1,1,0], K = 2
Output: -1
Explanation: No matter how we flip subarrays of size 2, we can't make the
array become [1,1,1].
Example 3:
Input: A = [0,0,0,1,0,1,1,0] , K = 3
Output:3
Explanation:
F1ip A[0] ,A[1] ,A[2] : A becomes [1,1,1,1,0,1,1,0]
F1ip A[4] ,A[5] ,A[6] : A becomes [1,1,1,1,1,0,0,0]
F1ip A[5],A[6] ,A[7] : A becomes [1,1,1,1,l,1,1,1]
Note:
1. 1 = K && A[i-K] == 2 {
flippedTime--
//下面这个判断包含了两种情况：
//如果flippedTime是奇数，且A[i]==1就需要翻转
//如果flippedTime是偶数，且A[i]==0就需要翻转
if flippedTime%2 == A[i]{
if i+K > len(A){
return -1
A[i]  = 2
flippedTime++
count++
---
## Page 959
return count
996.NumberofSquarefulArrays
题目
juane[pe jo jed Aana joj JI /nfauonbs s Keue au suagaul ajegau-uou jo  Ke.e ue uani
elements, their sum is a perfect square.
Return the number of permutations of A that are squareful. Two permutations Al and A2 differ
if and only if there is some index  such that A1[i] != A2[i] .
Example 1:
Input: [1,17,8]
Output: 2
Explanation:
[1,8,17] and [17,8,1] are the  valid permutations.
Example 2:
Input: [2,2,2]
output: 1
Note:
1. 1 0&&nums[i]==nums[i-1]&&！（*used）[i-1]{//这里是去重的关键逻辑
continue
if 1en（p）>0&！checksquare（nums[i]+p[len（p）-1]）{//关键的剪枝条件
continue
(*used) [i] = true
p = append(p, nums [i])
---
## Page 961
generatePermutation996(nums, index+1, p, res, used)
p = p[:1en(p)-1]
(*used)[i] = false
return
func checkSquare(num int) bool {
tmp := math.Sqrt(float64(num))
if int(tmp）*int(tmp)== num{
return true
return false
999.AvailableCapturesforRook
题目
On an 8 x 8 chessboard, there is one white rook. There also may be empty squares, white
bishops, and black pawns. These are given as characters 'R', *', 'B', and *p' respectively. Uppercase
characters represent white pieces, and lowercase characters represent black pieces.
The rook moves as in the rules of Chess: it chooses one of four cardlinal directions (north, east,
west, and south), then moves in that direction until it chooses to stop, reaches the edge of the
o saidnoo l aenbs aes au o duow Aq umed paoo anisoddo ue saundeo jo 'peog
rooks cannot move into the same square as other friendlly bishops.
Return the number of pawns the rook can capture in one move.
Example 1:
---
## Page 962
天
王
Input:
[".
*11
Output: 3
Explanation:
In this example the rook is able to capture all the pawns.
Example 2:
---
## Page 963
天
G
天
天
天
8
天
h
Input:
Output:0
Explanation:
Bishops are blocking the rook to capture any pawn.
Example 3:
---
## Page 964
Lo
天
天
Input:
:11
Output:3
Explanation:
The rook can capture the pawns at positions b5, d6 and f5.
Note:
1.board.length == board[i].1ength == 8
2. board[i] [j] is either 'R', *.', 'B', or 'p′
3. There is exactly one cell with board[i] [j] == ′R'
题目大意
---
## Page 965
在一个8×8的棋盘上，有一个白色的车（Rook），用字符'R'表示。棋盘上还可能存在空方块，白色
的象（Bishop）以及黑色的卒（pawn），分别用字符，‘B'和'p'表示。不难看出，大写字符表示的
是白棋，小写字符表示的是黑棋。车按国际象棋中的规则移动。东，西，南，北四个基本方向任选其
一，然后一直向选定的方向移动，直到满足下列四个条件之一：
·棋手选择主动停下来。
·棋子因到达棋盘的边缘而停下。
·棋子移动到某一方格来捕获位于该方格上敌方（黑色）的卒，停在该方格内。
·车不能进入/越过已经放有其他友方棋子（白色的象）的方格，停在友方棋子前。
你现在可以控制车移动一次，请你统计有多少敌方的卒处于你的捕获范围内（即，可以被一步捕获的棋
子数）。
解题思路
·按照国际象棋的规则移动车，要求输出只移动一次，有多少个卒在车的捕获范围之内
·简单题，按照国际象棋车的移动规则，4个方向分别枚举即可。
代码
package leetcode
func numRookCaptures(board [][]byte) int {
num := 0
for i:= 0;i= 0 && x = 0 && y < 1en(board[x]) && board[x][y]
!='B'{
if board[x][y]==‘p′{
return 1
x += bx
y += by
return 0
---
## Page 966
1o02.FindCommonCharacters
题目
Given an array A of strings made only from lowercase letters, return a list of all characters that
show up in all strings within the list (including duplicates). For example, if a character occurs 3
times in all strings but not 4 times, you need to include that character three times in the final
answer.
You may return the answer in any order.
Example 1:
Input: ["bella","1abel","roller"]
[+....*..]:andano