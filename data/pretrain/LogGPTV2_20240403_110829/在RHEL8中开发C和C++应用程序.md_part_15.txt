::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
由于这个额外的安全风险,强烈建议开发人员不要因为同样的原因静态连接其整个应用程序。
:::
::: title
**链接时在对象文件后指定库**
:::
在 GCC Toolset 中,库使用 linker
脚本链接,这些脚本可以通过静态归档指定一些符号。这需要保证与多个 Red Hat
Enterprise Linux 版本兼容。但是, linker
脚本使用相应的共享对象文件的名称。因此,链接器使用不同于预期的符号处理规则,且在指定对象文件选项前指定了库添加选项时,无法识别对象文件所需的符号：
``` screen
$ scl enable gcc-toolset-10 'ld -lsomelib objfile.o'
```
使用来自 GCC Toolset 的库会导致 linker 错误消息
`undefined reference to symbol`{.literal}。要防止这个问题,请遵循标准链接实践,并在指定对象文件选项后指定库：
``` screen
$ scl enable gcc-toolset-10 'ld objfile.o -lsomelib'
```
请注意,在使用基本 Red Hat Enterprise Linux 版本的
[**[binutils]{.application}**]{.strong} 时,建议也适用。
:::
:::
[]{#using-the-gcc-toolset-container-images_toolsets.html}
::: chapter
::: titlepage
# []{#using-the-gcc-toolset-container-images_toolsets.html#using-the-gcc-toolset-container-images_toolsets}第 15 章 使用 GCC Toolset 容器镜像 {.title}
:::
GCC Toolset 10 组件在两个容器镜像中可用：
::: itemizedlist
-   GCC Toolset 10 Toolchain
-   GCC Toolset 10 Perftools
:::
GCC Toolset 容器镜像基于 `rhel8`{.literal} 基础镜像,并可用于 RHEL 8
支持的所有架构：
::: itemizedlist
-   AMD 和 Intel 64 位构架
-   64 位 ARM 架构
-   IBM Power Systems, Little Endian
-   64-bit IBM Z
:::
::: section
::: titlepage
# []{#using-the-gcc-toolset-container-images_toolsets.html#gcc-toolset-container-images-contents_using-the-gcc-toolset-container-images}GCC Toolset 容器镜像内容 {.title}
:::
GCC Toolset 10 容器镜像中提供的工具版本与 [GCC Toolset 10
组件版本](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/developing_c_and_cpp_applications_in_rhel_8/index#gcc-toolset-10_toolsets){.link}
匹配。
::: title
**GCC Toolset 10 Toolchain 内容**
:::
`rhel8/gcc-toolset-10-toolchain`{.literal} 镜像提供 GCC 编译器、GDB
调试器和其他与开发相关的工具。容器镜像由以下组件组成：
::: informaltable
  组件                   软件包
  ---------------------- -----------------------------
  `gcc`{.literal}        gcc-toolset-10-gcc
  `g++`{.literal}        gcc-toolset-10-gcc-c++
  `gfortran`{.literal}   gcc-toolset-10-gcc-gfortran
  `gdb`{.literal}        gcc-toolset-10-gdb
:::
::: title
**GCC Toolset 10 Perftools 内容**
:::
`rhel8/gcc-toolset-10-perftools`{.literal}
镜像提供很多用于调试、性能监控和进一步分析应用程序的工具。容器镜像由以下组件组成：
::: informaltable
  组件                    软件包
  ----------------------- --------------------------
  `Valgrind`{.literal}    gcc-toolset-10-valgrind
  `SystemTap`{.literal}   gcc-toolset-10-systemtap
  `Dyninst`{.literal}     gcc-toolset-10-dyninst
  `elfutils`{.literal}    gcc-toolset-10-elfutils
:::
::: itemizedlist
**其它资源**
-   要在 RHEL 7 上使用 GCC Toolset 组件,请使用 Red Hat Developer Toolset
    为 RHEL 7 用户提供类似的开发工具 - [Red Hat Developer Toolset
    用户指南](https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/9/html/user_guide/index){.link}。
-   在 RHEL 7 上使用 Red Hat Developer Toolset 容器镜像的说明 - [Red Hat
    Developer Toolset
    镜像](https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/html-single/using_red_hat_software_collections_container_images/index#devtoolset-images){.link}。
:::
:::
::: section
::: titlepage
# []{#using-the-gcc-toolset-container-images_toolsets.html#accessing-and-running-the-gcc-toolset-container-images_using-the-gcc-toolset-container-images}访问并运行 GCC Toolset 容器镜像 {.title}
:::
下面的部分论述了如何访问和运行 GCC Toolset 容器镜像。
::: itemizedlist
**先决条件**
-   已安装 podman。
:::
::: orderedlist
**流程**
1.  使用您的客户门户网站凭证访问 [Red Hat Container
    Registry](https://access.redhat.com/containers){.link}:
    ``` screen
    $ podman login registry.redhat.io
    Username: username
    Password: ********
    ```
2.  以 root 用户身份运行相关命令来拉取所需的容器镜像：
    ``` screen
    # podman pull registry.redhat.io/rhel8/gcc-toolset-10-toolchain
    ```
    ``` screen
    # podman pull registry.redhat.io/rhel8/gcc-toolset-10-perftools
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在 RHEL 8.1 及更新的版本中,您可以设置系统以非 root
    用户身份使用容器。详情请参阅以 [root
    用户或无根用户身份运行容器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/building_running_and_managing_containers/index#running-rootfull-or-rootless_building-running-and-managing-containers){.link}。
    :::
3.  可选：通过运行列出本地系统中所有容器镜像的命令来检查拉取是否成功：
    ``` screen
    # podman images
    ```
4.  通过在容器内启动 bash shell 来运行容器：
    ``` screen
    # podman run -it image_name /bin/bash
    ```
    `-i`{.literal} 选项会创建一个交互式会话 ; 如果没有这个选项, shell
    将打开并立即退出。
    `-t`{.literal} 选项会打开终端会话 ;
    如果没有这个选项,您就无法输入任何 shell。
:::
::: itemizedlist
**其它资源**
-   [在 RHEL 8 中构建、运行和管理 Linux
    容器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/building_running_and_managing_containers){.link}
-   红帽博客文章 -
    [了解容器内部和外部的根用户](https://www.redhat.com/en/blog/understanding-root-inside-and-outside-container){.link}
-   Red Hat Container Registry 中的条目 - [GCC Toolset
    容器镜像](https://catalog.redhat.com/software/containers/search?q=gcc%20toolset&p=1){.link}
:::
:::
::: section
::: titlepage
# []{#using-the-gcc-toolset-container-images_toolsets.html#example-using-the-gcc-toolset-9-toolchain-container-image_using-the-gcc-toolset-container-images}示例：使用 GCC Toolset 10 Toolchain 容器镜像 {.title}
:::
本例演示了如何拉取和开始使用 GCC Toolset 10 Toolchain 容器镜像。
::: itemizedlist
**先决条件**
-   已安装 podman。
:::
::: orderedlist
**流程**
1.  使用您的客户门户网站凭证访问 Red Hat Container Registry:
    ``` screen
    $ podman login registry.redhat.io
    Username: username
    Password: ********
    ```
2.  将容器镜像拉取为 root:
    ``` screen
    # podman pull registry.redhat.io/rhel8/gcc-toolset-10-toolchain
    ```
3.  以 root 用户身份使用互动 shell 启动容器镜像：
    ``` screen
    # podman run -it registry.redhat.io/rhel8/gcc-toolset-10-toolchain /bin/bash
    ```
4.  正常运行 GCC Toolset 工具。例如,要验证 `gcc`{.literal}
    编译器版本,请运行：
    ``` screen
    bash-4.4$ gcc -v
    ...
    gcc version 10.2.1 20200804 (Red Hat 10.2.1-2) (GCC)
    ```
5.  要列出容器中提供的所有软件包,请运行：
    ``` screen
    bash-4.4$ rpm -qa
    ```
:::
:::
::: section
::: titlepage
# []{#using-the-gcc-toolset-container-images_toolsets.html#using-systemtap-from-the-gcc-toolset-perftools-container-image_using-the-gcc-toolset-container-images}使用 GCC Toolset 10 Perftools 容器镜像中的 systemTap {.title}
:::
SystemTap 工具发布在 GCC Toolset 10 Perftools
容器镜像中。要使用这个工具,请按照以下步骤执行。
::: itemizedlist
**先决条件**
-   GCC Toolset 10 Perftools 容器镜像会被拉取。
:::
::: orderedlist
**流程**
1.  使用超级用户权限运行镜像：
    ``` screen
    $ podman run -u root -it --privileged --ipc=host --net=host --pid=host registry.redhat.io/rhel8/gcc-toolset-{gcct-ver}-perftools /bin/bash
    ```
    如需了解更多有关 [*超级特权容器*]{.emphasis} 的信息,请参阅
    [运行超级特权容器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html/managing_containers/running_super_privileged_containers){.link}。
2.  确保容器中安装以下软件包或安装它们：
    ::: itemizedlist
    -   `kernel`{.literal}
    -   `kernel-devel`{.literal}
    -   `kernel-debuginfo`{.literal}
        ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 重要 {.title}
        上面的 `kernel`{.literal}
        软件包的版本和发行号必须与主机上运行的内核的版本和发行号匹配。
        :::
        ::: itemizedlist
        -   要检查主机系统内核的版本和发行号,请运行：
            ``` screen
            $ uname -r
            4.18.0-193.el8.x86_64
            ```
        -   要安装与软件包相匹配的版本,请运行带有 `uname`{.literal}
            命令输出的软件包安装命令。例如：
            ``` screen
            # yum install kernel-devel-$(uname -r)
            ```
        -   要安装 `kernel-debuginfo`{.literal} 软件包,首先以 root
            用户身份运行以下命令来启用 `debug`{.literal} 存储库：
            ``` screen
            # subscription-manager repos --enable=rhel-8-for-x86_64-baseos-debug-rpms
            ```
            要了解在 RHEL 系统上安装 `debuginfo`{.literal}
            软件包的更多信息, [请参阅如何为 RHEL 系统下载或安装
            debuginfo
            软件包？](https://access.redhat.com/solutions/9907){.link}
        :::
    :::
3.  可选：
    要避免重复这些步骤并在以后重复使用预先配置的容器,请考虑运行以下命令来保存它：
    ``` screen
    $ podman commit new-container-image-name
    ```
:::
:::
:::
[]{#compiler-toolsets_toolsets.html}
::: chapter
::: titlepage
# []{#compiler-toolsets_toolsets.html#compiler-toolsets_toolsets}第 16 章 编译器工具集 {.title}
:::
RHEL 8 提供以下编译器工具集作为 Application Streams:
::: itemizedlist
-   LLVM Toolset 11.0.0,它提供 LLVM 编译器基础架构框架、C 和 C++ 语言的
    Clang 编译器、LLDB 调试器以及相关代码分析工具。请参阅 [使用 LLVM
    Toolset](https://access.redhat.com/documentation/en-us/red_hat_developer_tools/1/html-single/using_llvm_9.0.1_toolset/index){.link}
    指南。
-   rust Toolset 1.49.0,它提供 Rust 编程语言编译器
    `rustc`{.literal}、`cargo`{.literal}
    构建工具和依赖项管理器、`cargo-vendor`{.literal}
    插件以及所需的库。请参阅 [使用 Rust
    Toolset](https://access.redhat.com/documentation/en-us/red_hat_developer_tools/1/html-single/using_rust_1.41_toolset/index){.link}
    指南。
-   Go Toolset 1.15.7,它提供 Go 编程语言工具和程序库。Go 也称为
    `golang`{.literal}。请参阅 [使用 Go
    Toolset](https://access.redhat.com/documentation/en-us/red_hat_developer_tools/1/html-single/using_go_1.13_toolset/index){.link}
    指南。
:::
:::