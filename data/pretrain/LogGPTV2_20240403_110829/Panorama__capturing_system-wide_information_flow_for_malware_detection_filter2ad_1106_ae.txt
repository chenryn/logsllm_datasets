is written to). Fortunately, the mere fact that sensitive data
is accessed without authorization is often enough to classify
a sample as malware.
Not behaving maliciously when tested.
Malware may evade detection by simply not performing
malicious behavior while the test cases are conducted.
It
may stay inactive until certain conditions are satisﬁed. For
example, time bombs activate themselves only on speciﬁc
dates, and some keyloggers only record keystrokes for cer-
tain applications or windows. Malware may also detect if it
is running in the QEMU environment and remains dormant
if indeed. Ferrie discussed the technique to detect the virtual
machines and emulators including QEMU [15]. Our current
prototype will not detect this kind of malware. However,
some complementary work has been done to address this
problem. Vasudevan et al. proposed several stealthy tech-
niques, such that the analysis environment cannot be easily
detected [37]. Moser et al. [24] and Brumley et al. [7, 6] also
used QEMU to built malware analysis systems, which are
able to uncover hidden behavior of malware by exploring
multiple execution paths.
Incorporating these techniques
into our system will be our future work.
Subverting Panorama.
As an emulated environment, Panorama provides strong
isolation such that it is unlikely for the malware running
inside to interfere with Panorama and the host system. Al-
though it is usually true, some study shows the possibility
of subverting the entire emulated environment by exploiting
buﬀer overﬂows and integer bugs [27]. This problem can be
solved by ﬁxing these bugs.
7. RELATED WORK
Malware detection approaches.
Signature based malware detection has been in use for
years to scan ﬁles on disk and even memory for known signa-
tures. Although semantic-aware signature checking [11] im-
proves its resilience to polymorphic and metamorphic vari-
ants, the inherent limitation of the signature based approach
is its incapability of detecting previously unseen malware
instances. Its usefulness is also limited by the rootkits that
hide ﬁles on disk and, as demonstrated in Shadow Walker [9],
may even hide malware footprints in memory.
Behavior based malware detection identiﬁes malicious pro-
grams by observing their behaviors and system states (i.e.,
detection points). By recognizing deviations from “normal”
system states and behaviors, behavior based detection may
identify entire classes of malware, including previously un-
seen instances. There are a variety of detections that ex-
amine diﬀerent detection points. Strider GateKeeper [39]
checks auto-start extensibility points in the registry to de-
termine surreptitious restart-surviving behaviors. VICE [8]
and System Virginity Veriﬁer [33] search for various hooks
that are usually used by rootkits and the other malware.
Behavior based detection can be defeated, either by explor-
ing stealthier methods to evade the known detection points,
or by providing misleading information to cheat detection
tools.
In addition, current detection tools usually reside
together with malicious programs, and therefore expose to
complete subversion.
In contrast, our system overcomes
these three weaknesses. First, it captures the characteris-
tic information access and processing behavior of malware,
and thus cannot be easily evaded. Second, it detects mal-
ware based on the hardware-level knowledge and makes very
few assumption at software level, and hence cannot be eas-
ily cheated. Third, it is implemented completely outside
of the victim system, and so strongly protected from being
subverted.
The cross-view based rootkit detection technique (e.g. Black-
light [4], Rootkit Revealer [32], and Strider Ghostbuster [2])
identiﬁes hidden ﬁles, processes, registry entries by compar-
ing two views of the system: the upper-level view is derived
from calling common APIs, while the low-level view is ob-
tained from system states in the kernel or from hardware if
applicable. In comparison, our approach for rootkit detec-
tion has two advantages: (1) the cross-view based technique
requires enumerating all ﬁles and registry entries, etc. to
ﬁnd hidden entries, which often takes several hours, whereas
our approach only takes a few minutes; (2) the result given
by the cross-view based technique can only identify a list
of hidden entries, while our approach recognizes the rootkit
directly.
doors, BHO-based spyware, and rootkits. Thus, the detec-
tion and analysis relying on it cannot be easily evaded. To
evaluate the eﬀectiveness of this approach, we have designed
and developed a system, called Panorama.
In the experi-
ments, we have evaluated 42 malware samples and 56 benign
samples. Panorama yields zero false negative and very few
false positives. Then we use Google Desktop as a case study.
We have demonstrated that Panorama can accurately cap-
ture its information access and processing behavior, and we
conﬁrm that it does send back sensitive information to re-
mote servers. We believe that a system such as Panorama
will oﬀer indispensable assistance to malware analysts and
enable them to quickly comprehend the behavior and inner-
workings of malware.
Dynamic Taint Analysis.
Dynamic taint analysis has been applied to solve and an-
alyze other security related problems. Many systems [26,
13, 28, 12, 35] detect exploits by tracking the data from
untrusted sources such as the network being misused to al-
ter the control ﬂow. Chow et al. made use of whole-system
dynamic taint analysis to analyze how sensitive data are
handled in operating systems and large programs [10]. The
major analysis was conducted in Linux, with source code
support of the kernel and the applications. Egele et al.
also utilized whole-system dynamic taint analysis to exam-
ine BHO-based spyware behavior [14]. Vogt et al. extended
the JaveScript engine with dynamic taint analysis to prevent
cross-site scripting attacks [38]. Our system is independently
developed with OS-aware analysis for closed-source operat-
ing systems, and devises a uniﬁed machinery for detecting
malware from several diﬀerent categories.
Information ﬂow analysis.
Our system works by analyzing taint graphs to identify
suspicious information access and processing behavior of for-
eign code. This is related to previous work that performs
forensic analysis based on information ﬂows. For example,
some systems track the ﬂow of information between oper-
ating system processes to perform intrusion analysis [23],
intrusion recovery [17], and malware removal [21]. However,
these systems typically monitor the system call interface and
thus, are not as comprehensive and do not provide the same
level of precision as our technique. Another limitation of pre-
vious systems is that it is often not possible to precisely track
data while it is processed by a program. This can introduce
incorrect connections between data objects or lead to missed
information ﬂows. Also, previous systems do not apply to
kernel-mode attacks. Thus, we believe that by performing
whole-system, ﬁne grained taint tracking, our method pro-
vides higher accuracy than previous work, and we can also
handle kernel attacks.
8. CONCLUSION
Malware has brought along serious security and privacy
threats. However, existing techniques for malware detec-
tion and analysis are ineﬀective.
In this paper, we have
proposed whole-system ﬁne-grained taint analysis to discern
ﬁne-grained information access and processing behavior of a
piece of unknown code. This behavior captures the intrin-
sic characteristics of a wide-spectrum of malware, including
keyloggers, password sniﬀers, packet sniﬀers, stealth back-
9. REFERENCES
[1] AutoHotkey. http://www.autohotkey.com/.
[2] D. Beck, B. Vo, and C. Verbowski. Detecting stealth
software with strider ghostbuster. In Proceedings of the
2005 International Conference on Dependable Systems
and Networks (DSN’05), pages 368–377, June 2005.
[3] F. Bellard. Qemu, a fast and portable dynamic
translator. In USENIX Annual Technical Conference,
FREENIX Track, April 2005.
[4] Blacklight. http:
//www.europe.f-secure.com/exclude/blacklight/.
[5] Bochs: The open source IA-32 emulation project.
http://bochs.sourceforge.net/.
[6] D. Brumley, C. Hartwig, M. G. Kang, Z. Liang,
J. Newsome, D. Song, and H. Yin. BitScope:
Automatically dissecting malicious binaries. Technical
Report CMU-CS-07-133, School of Computer Science,
Carnegie Mellon University, March 2007.
[7] D. Brumley, C. Hartwig, Z. Liang, J. Newsome,
D. Song, and H. Yin. Botnet Analysis, chapter
Automatically Identifying Trigger-based Behavior in
Malware. 2007.
[8] J. Butler and G. Hoglund. VICE–catch the hookers!
In Black Hat USA, July 2004.
http://www.blackhat.com/presentations/
bh-usa-04/bh-us-04-butler/bh-us-04-butler.pdf.
[9] J. Butler and S. Sparks. Shadow walker: Raising the
bar for windows rootkit detection. In Phrack 63, July
2005.
[10] J. Chow, B. Pfaﬀ, T. Garﬁnkel, K. Christopher, and
M. Rosenblum. Understanding data lifetime via whole
system simulation. In Proceedings of the 13th USENIX
Security Symposium (Security’03), August 2004.
[11] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and
R. E. Bryant. Semantics-aware malware detection. In
Proceedings of the 2005 IEEE Symposium on Security
and Privacy (Oakland’05), May 2005.
[12] M. Costa, J. Crowcroft, M. Castro, A. Rowstron,
L. Zhou, L. Zhang, and P. Barham. Vigilante:
End-to-end containment of internet worms. In
Proceedings of the 20th ACM Symposium on Operating
Systems Principles (SOSP’05), October 2005.
[13] J. R. Crandall and F. T. Chong. Minos: Control data
attack prevention orthogonal to memory model. In
Proceedings of the 37th International Symposium on
Microarchitecture (MICRO’04), December 2004.
[14] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song.
Dynamic Spyware Analysis. In Proceedings of the 2007
Usenix Annual Conference (Usenix’07), June 2007.
[15] P. Ferrie. Attacks on virtual machine emulators.
Symantec Security Response, December 2006.
[16] GINA spy. http:
//www.codeproject.com/useritems/GINA_SPY.Asp.
[17] A. Goel, K. Po, K. Farhadi, Z. Li, and E. de Lara.
The taser intrusion recovery system. In Proceedings of
the 20th ACM Symposium on Operating Systems
Principles(SOSP’05), October 2005.
[18] Google’s desktop search red ﬂag. http:
//www.internetnews.com/xSP/article.php/3584131.
[19] Google Desktop - Privacy Policy. http:
//desktop.google.com/en/privacypolicy.html.
[20] A. Ho, M. Fetterman, C. Clark, A. Watﬁeld, and
S. Hand. Practical taint-based protection using
demand emulation. In EuroSys 2006, April 2006.
[21] F. Hsu, H. Chen, T. Ristenpart, J. Li, and Z. Su. Back
to the future: A framework for automatic malware
removal and system repair. In Proceedings of the 22nd
Annual Computer Security Applications Conference
(ACSAC’06), December 2006.
[22] The IDA Pro Disassembler and Debugger.
http://www.datarescue.com/idabase/.
[23] S. T. King and P. M. Chen. Backtracking intrusions.
In Proceedings of the 19th ACM Symposium on
Operating Systems Principles (SOSP’03), pages
223–236, October 2003.
[24] A. Moser, C. Kruegel, and E. Kirda. Exploring
multiple execution paths for malware analysis. In
Proceedings of the 2007 IEEE Symposium on Security
and Privacy(Oakland’07), May 2007.
[25] A. Moshchuk, T. Bragin, S. D. Gribble, and H. M.
Levy. A crawler-based study of spyware in the web. In
Proceeding of the 13th Network and Distributed
System Security (NDSS’06), February 2006.
[26] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature
generation of exploits on commodity software. In
Proceedings of the 12th Annual Network and
Distributed System Security Symposium (NDSS’05),
February 2005.
[27] T. Ormandy. An Empirical Study into the Security
Exposure to Host of Hostile Virtualized Environments.
http://taviso.decsystem.org/virtsec.pdf.
[28] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an
emulator for ﬁngerprinting zero-day attacks. In
EuroSys 2006, April 2006.
[29] Qemu. http://fabrice.bellard.free.fr/qemu/.
[30] F. Qin, S. Lu, and Y. Zhou. Safemem: Exploiting
ECC-memory for detecting memory leaks and memory
corruption during production runs. In Proceedings of
the 11th International Symposium on
High-Performance Computer Architecture (HPCA’05),
February 2005.
[31] F. Qin, C. Wang, Z. Li, H. seop Kim, Y. Zhou, and
Y. Wu. LIFT: A low-overhead practical information
ﬂow tracking system for detecting general security
attacks. In Proceedings of the 39th Annual
IEEE/ACM International Symposium on
Microarchitecture (MICRO’06), December 2006.
[32] Rootkit revealer. http://www.sysinternals.com/
Files/RootkitRevealer.zip.
[33] J. Rutkowska. System virginity veriﬁer: Deﬁning the
roadmap for malware detection on windows systems.
In Hack In The Box Security Conference, September
2005. http://www.invisiblethings.org/papers/
hitb05_virginity_verifier.ppt.
[34] Sony’s DRM Rootkit: The Real Story.
http://www.schneier.com/blog/archives/2005/11/
sonys_drm_rootk.html.
[35] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas.
Secure program execution via dynamic information
ﬂow tracking. In Proceedings of the 11th International
Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS’04),
October 2004.
[36] The Sleuth Kit (TSK).
http://www.sleuthkit.org/sleuthkit/.
[37] A. Vasudevan and R. Yerraballi. Cobra: Fine-grained
Malware Analysis using Stealth Localized-Executions.
In Proceedings of 2006 IEEE Symposium on Security
and Privacy (Oakland’06)), may 2006.
[38] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda,
C. Kruegel, and G. Vigna. Cross-Site Scripting
Prevention with Dynamic Data Tainting and Static
Analysis. In Proceeding of the Network and Distributed
System Security Symposium (NDSS’07), February
2007.
[39] Y.-M. Wang, R. Roussev, C. Verbowski, A. Johnson,
M.-W. Wu, Y. Huang, and S.-Y. Kuo. Gatekeeper:
Monitoring Auto-Start Extensibility Points (ASEPs)
for spyware management. In Proceedings of the Large
Installation System Administration Conference
(LISA’04), November 2004.