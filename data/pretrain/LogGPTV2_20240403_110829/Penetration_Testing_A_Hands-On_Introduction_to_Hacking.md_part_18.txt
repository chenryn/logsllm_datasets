ftp-anon
Categories: default auth safe
http://nmap.org/nsedoc/scripts/ftp-anon.html
Checks if an FTP server allows anonymous logins.
If anonymous is allowed, gets a directory listing of the root directory and
highlights writeable files.
--snip--
Listing 6-2: Nmap default scripts help
If you use the -sC flag to tell Nmap to run a script scan in addition to
port scanning, it will run all the scripts in the default category, as shown in
Listing 6-3.
root@kali:~# nmap -sC 192.168.20.10-12
Starting Nmap 6.40 ( http://nmap.org ) at 2015-12-30 20:21 EST
Nmap scan report for 192.168.20.10
Host is up (0.00038s latency).
Not shown: 988 closed ports
PORT STATE SERVICE
21/tcp open ftp
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
| drwxr-xr-x 1 ftp ftp 0 Aug 06 2009 incoming
|_-r--r--r-- 1 ftp ftp 187 Aug 06 2009 onefile.html
|_ftp-bounce: bounce working!
25/tcp open smtp
| smtp-commands: georgia.com, SIZE 100000000, SEND, SOML, SAML, HELP, VRFYu, EXPN, ETRN, XTRN,
|_ This server supports the following commands. HELO MAIL RCPT DATA RSET SEND SOML SAML HELP
NOOP QUIT
79/tcp open finger
|_finger: Finger online user list request denied.
80/tcp open http
|_http-methods: No Allow or Public header in OPTIONS response (status code 302)
Finding Vulnerabilities 143
| http-title: XAMPP 1.7.2 v
|_Requested resource was http://192.168.20.10/xampp/splash.php
--snip--
3306/tcp open mysql
| mysql-info: MySQL Error detected!
| Error Code was: 1130
|_Host '192.168.20.9' is not allowed to connect to this MySQL server w
--snip--
Listing 6-3: Nmap default scripts output
As you can see, the Nmap Scripting Engine found a good deal of inter-
esting information. For example, we see that the SMTP server on port 25
of the Windows XP target allows the use of the VRFY u command, which
allows us to see if a username exists on the mail server. If we have a valid
username, use of this command will make credential-guessing attacks much
more likely to succeed.
We can also see that the web server on port 80 appears to be an XAMPP
1.7.2 install v. As of this writing, the current stable version of XAMPP for
Windows is 1.8.3. At the very least, the version we found is out of date, and
it may also be subject to security issues.
In addition to showing us potential vulnerabilities, NSE also allows us
to rule out some services. For example, we can see that the MySQL server
on port 3306 does not allow us to connect because our IP address is not
authorized w. We may want to return to this port during post exploitation
if we are able to compromise other hosts in the environment, but for now
we can rule out MySQL vulnerabilities on this host.
running a single nse script
Before we move on, let’s look at another example of using an NSE script, this
time one that is not part of the default set. From our basic use of Nmap in
the previous chapter, we know that our Linux target is running Network File
System (NFS). NFS allows client computers to access local files over the net-
work, but in your pentesting career, you may find that setting up NFS securely
is easier said than done. Many users don’t think about the security conse-
quences of giving remote users access to their files. What’s the worst that can
happen, right? Who cares if I share my home directory with my coworkers?
The NSE script nfs-ls.nse will connect to NFS and audit shares. We can
see more information about an individual script with the --script-help com-
mand, as shown in Listing 6-4.
root@kali:~# nmap --script-help nfs-ls
Starting Nmap 6.40 ( http://nmap.org ) at 2015-07-16 14:49 EDT
nfs-ls
Categories: discovery safe
144 Chapter 6
http://nmap.org/nsedoc/scripts/nfs-ls.html
Attempts to get useful information about files from NFS exports.
The output is intended to resemble the output of ls.
--snip--
Listing 6-4: Nmap NFS-LS script details
This script mounts the remote shares, audits their permissions, and
lists the files included in the share. To run a script against our Linux tar-
get, we call it using the --script option and the script name, as shown in
Listing 6-5.
root@kali:/# nmap --script=nfs-ls 192.168.20.11
Starting Nmap 6.40 ( http://nmap.org ) at 2015-12-28 22:02 EST
Nmap scan report for 192.168.20.11
Host is up (0.00040s latency).
Not shown: 993 closed ports
PORT STATE SERVICE VERSION
21/tcp open ftp vsftpd 2.3.4
22/tcp open ssh OpenSSH 5.1p1 Debian 3ubuntu1 (Ubuntu Linux; protocol 2.0)
80/tcp open http Apache httpd 2.2.9 ((Ubuntu) PHP/5.2.6-2ubuntu4.6 with Suhosin-Patch)
111/tcp open rpcbind 2 (RPC #100000)
| nfs-ls:
| Arguments:
| maxfiles: 10 (file listing output limited)
|
| NFS Export: /export/georgiau
| NFS Access: Read Lookup Modify Extend Delete NoExecute
| PERMISSION UID GID SIZE MODIFICATION TIME FILENAME
| drwxr-xr-x 1000 1000 4096 2013-12-28 23:35 /export/georgia
| -rw------- 1000 1000 117 2013-12-26 03:41 .Xauthority
| -rw------- 1000 1000 3645 2013-12-28 21:54 .bash_history
| drwxr-xr-x 1000 1000 4096 2013-10-27 03:11 .cache
| -rw------- 1000 1000 16 2013-10-27 03:11 .esd_auth
| drwx------ 1000 1000 4096 2013-10-27 03:11 .gnupg
| ?????????? ? ? ? ? .gvfs
| -rw------- 1000 1000 864 2013-12-15 19:03 .recently-used.xbel
| drwx------ 1000 1000 4096 2013-12-15 23:38 .sshv
--snip--
Listing 6-5: Nmap NFS-LS scripts output
As you can see, the NSE script found the NFS share /export/georgia u on
our Linux target. Of particular interest is the .ssh directory v, which may
include sensitive information such as SSH keys and (if public key authenti-
cation is allowed on the SSH server) a list of authorized keys.
When you run into an access-control mistake like this, one common pen-
test trick is to use the mistake and the write permission to add a new SSH
Finding Vulnerabilities 145
key to the authorized_keys list (in this case, ours). If that attempt succeeds,
suddenly the seemingly minor issue of being able to edit a user’s documents
turns into the ability to log in to the remote system and execute commands.
Before we move on, let’s ensure that public key SSH authentication is
enabled on our Linux target, allowing the attack we envisioned above to
work successfully. Key-based login is considered the strongest form of SSH
authentication and is recommended for security. A quick SSH attempt to
our Linux target shows that public key authentication is allowed here u
(see Listing 6-6).
root@kali:/# ssh 192.168.20.11
The authenticity of host '192.168.20.11 (192.168.20.11)' can't be established.
RSA key fingerprint is ab:d7:b0:df:21:ab:5c:24:8b:92:fe:b2:4f:ef:9c:21.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.20.11' (RSA) to the list of known hosts.
PI:EMAIL's password:
Permission denied (publickeyu,password).
Listing 6-6: SSH authentication methods
note Some NSE scripts may crash services or harm the target system, and an entire category
is dedicated to denial of service. For example, the script smb-check-vulns will check
for the MS08-067 vulnerability and other SMB vulnerabilities. Its help information
notes that this script is likely dangerous and shouldn’t be run on production systems
unless you are prepared for the server to go down.
metasploit scanner modules
Metasploit, which we used in Chapter 4, also can conduct vulnerability
scanning via numerous auxiliary modules. Unlike exploits, these modules
will not give us control of the target machine, but they will help us identify
vulnerabilities for later exploitation.
One such Metasploit module looks for FTP services that provide anony-
mous access. Although it may be easy enough to attempt to log in manually
to individual FTP servers, Metasploit auxiliary modules let us scan many
hosts at once, which will save time when you’re testing a large environment.
To choose a particular module, we use the module, then we define
our targets with set, and then scan with the exploit command, as shown
in Listing 6-7. This syntax should be familiar from Chapter 4.
msf > use scanner/ftp/anonymous
msf auxiliary(anonymous) > set RHOSTS 192.168.20.10-11
RHOSTS => 192.168.20.10-11
msf auxiliary(anonymous) > exploit
[*] 192.168.20.10:21 Anonymous READ (220-FileZilla Server version 0.9.32 beta
220-written by Tim Kosse (PI:EMAIL) u
220 Please visit http://sourceforge.net/projects/filezilla/)
146 Chapter 6
[*] Scanned 1 of 2 hosts (050% complete)
[*] 192.168.20.11:21 Anonymous READ (220 (vsFTPd 2.3.4)) u
[*] Scanned 2 of 2 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(anonymous) >
Listing 6-7: Metasploit anonymous FTP scanner module
At u, we find that both the Windows XP and Linux targets have anony-
mous FTP enabled. We know this may or may not be a serious issue, based
on the files that are available to the anonymous user in the FTP folder.
I’ve been on engagements where company trade secrets were sitting on an
Internet-facing FTP server. On the other hand, I’ve also been on engage-
ments where the use of anonymous FTP was justified from a business per-
spective, and no sensitive files were present. It is up to a pentester to fill in
the information an automated scanner lacks as to the severity of an issue in
a particular environment.
metasploit exploit Check Functions
Some Metasploit exploits include a check function that connects to a target
to see if it is vulnerable, rather than attempting to exploit a vulnerability.
We can use this command as a kind of ad hoc vulnerability scan, as shown
in Listing 6-8. (There’s no need to specify a payload when running check
because no exploitation will take place.)
msf > use windows/smb/ms08_067_netapi
msf exploit(ms08_067_netapi) > set RHOST 192.168.20.10
RHOST => 192.168.20.10
msf exploit(ms08_067_netapi) > checku
[*] Verifying vulnerable status... (path: 0x0000005a)
[+] The target is vulnerable.v
msf exploit(ms08_067_netapi) >
Listing 6-8: MS08-067 check function
When we run the vulnerability check u, Metasploit tells us that our
Windows XP target is vulnerable to the MS08-067 vulnerability v, as
expected.
Unfortunately, not all Metasploit modules have check functions. (If you
try running check on a module that doesn’t support it, Metasploit will tell
you.) For example, based on the results of our Nmap version scan in the
previous chapter, the Windows XP target mail server appears to be out of
date and subject to security issues. SLMail version 5.5.0.4433 has a known
exploitable issue—CVE-2003-0264—so we can find it easily with a quick
search in Msfconsole for cve:2003-0264.
Finding Vulnerabilities 147
Once in the context of the module, we can test out check, as shown in
Listing 6-9.
msf exploit(seattlelab_pass) > set RHOST 192.168.20.10
rhost => 192.168.20.10
msf exploit(seattlelab_pass) > check
[*] This exploit does not support check.
msf exploit(seattlelab_pass) >
Listing 6-9: The SLMail module has no check function.
As it turns out, this exploit module does not implement the check func-
tion, so we don’t have solid assurance that a service is vulnerable. Although
our SLMail POP3 server appears to be vulnerable based on its banner version
number, we can’t get confirmation from Metasploit. In cases like these, we
may not be able to know for sure if a vulnerability exists short of running an
exploit.
web application scanning
Although a client’s custom-built apps may have security problems, your tar-
get may also deploy prebuilt web applications such as payroll apps, webmail,
and so on, which can be vulnerable to the same issues. If we can find an
instance of known vulnerable software, we may be able to exploit it to get
a foothold in a remote system.
Web application issues are particularly interesting on many external
penetration tests where your attack surface may be limited to little more
than web servers. For example, as you can see in Figure 6-14, browsing to
the default web page of the web server on our Linux target reveals a default
Apache install page.
Figure 6-14: Default Apache page
148 Chapter 6
Unless we can find a vulnerability in the underlying web server soft-
ware, we’ll have a hard time exploiting a simple page that reads “It works!”
Before we write this service off, though, let’s use a web scanner to look for
additional pages that we might not see otherwise.
Nikto
Nikto is a web application vulnerability scanner built into Kali that’s like
Nessus for web apps: It looks for issues such as dangerous files, outdated
versions, and misconfigurations. To run Nikto against our Linux target,
we tell it which host to scan with the -h flag, as shown in Listing 6-10.
root@kali:/# nikto -h 192.168.20.11
- Nikto v2.1.5
---------------------------------------------------------------------------
+ Target IP: 192.168.20.11
+ Target Hostname: 192.168.20.11
+ Target Port: 80
+ Start Time: 2015-12-28 21:31:38 (GMT-5)
---------------------------------------------------------------------------
+ Server: Apache/2.2.9 (Ubuntu) PHP/5.2.6-2ubuntu4.6 with Suhosin-Patch
--snip--
+ OSVDB-40478: /tikiwiki/tiki-graph_formula.php?w=1&h=1&s=1&min=1&max=2&f[]=x.
tan.phpinfo()&t=png&title=http://cirt.net/rfiinc.txt?: TikiWiki contains a
vulnerability which allows remote attackers to execute arbitrary PHP code. u
+ 6474 items checked: 2 error(s) and 7 item(s) reported on remote host
+ End Time: 2015-12-28 21:32:41 (GMT-5) (63 seconds)
Listing 6-10: Running Nikto
Manually browsing to the default installation path for every application
with known vulnerabilities would be a daunting task, but fortunately, Nikto
seeks out URLs that may not be apparent. One particularly interesting find-
ing here is a vulnerable installation of the TikiWiki software u on the server.
Sure enough, if we browse to the TikiWiki directory at http://192.168.20.11/
tikiwiki/, we find the CMS software. Nikto thinks that this install is subject
to a code execution vulnerability, and further analysis of Open Sourced
Vulnerability Database (OSVDB) entry 40478 reveals that this issue has a
Metasploit exploit that we can use during exploitation.
note OSVDB (http://osvdb.com/) is a vulnerability repository specifically for open source
software such as TikiWiki, with detailed information on a wide variety of products.
Use it to search for additional information about possible issues you find.
Attacking XAMPP
Browsing to our Windows XP web server, we see at http://192.168.20.10/ that
the default web page announces itself as XAMPP 1.7.2.
By default, XAMPP installations include phpMyAdmin, a database
administration web application. Ideally, phpMyAdmin would not be available
Finding Vulnerabilities 149
over the network, or at least it should require credentials to access it. But
on this version of XAMPP, the phpMyAdmin install at http://192.168.20.10
/phpmyadmin/ is available and open. Even worse, phpMyAdmin gives us root
access on the same MySQL server that NSE told us we are unable to con-
nect to. Using phpMyAdmin (as shown in Figure 6-15), we can bypass this
restriction and perform MySQL queries on the server.
Figure 6-15: The open phpMyAdmin console complains quite loudly about the poor
configuration.
Default Credentials
In addition to its inclusion of phpMyAdmin, a Google search tells us
that XAMPP 1.7.3 and earlier come with Web Distributed Authoring and
Versioning (WebDAV) software, which is used to manage files on a web
server over HTTP. XAMPP’s WebDAV installation comes with the default
username and password wampp:xampp. If these values aren’t changed, any-
one with access to WebDAV can log in, deface the website, and even pos-