一旦有了想要表示的那些值，就需要对它们做两件事。当然，主要的任务是将它们表示出来，
为了生成浏览页的标题，可以将浏览条件传递给下列函数browse-page-title：
(defun values-for-page (what genre artist album random)
这个函数首先使用函数values-for-page来获得一个含有它需要表示的值的列表。当用户
(defun browse-page-title (what random genre artist album)
(define-url-function browse
(if (eql what :song)
 but1as-oa-andano-uatm)
{let({values
(let* ((values (values-for-page what genre artist album random))
((wopue1 = wopuer (i): S qewioy) wopuI uaum)
(if random (random-selection values random) values)))
(request (what keyword :genre) genre artist album (random integer))
(when (or genre artist album)
formatS
( :mp3-browser-page
(html
(with-column-values (song file album artist genre) row
(when album (format s " on album ^a" album))}))
when (not (eql
(:ul (do-rows (row values)
{:input :name
:
(:title title)
when artist (format
{:input :name
(:input :name
(values-string (values->base-64 single-column values)))
:from *mp3s*
(select
order-by
distinct
where (matching *mp3s*
columns (if (eql what :song) t what)
 :method "POsT"
(format
"submit"
"values"
what
{eql
what random)
(s)
(eql what :song))
:Song)) (princ " with songs" s))
what
:action "playlist")
:type "submit "
:type
www.TopSage.com
* :genre genre :artist artist :album album)
(list-item-for-page what row)))))))
:song)
"hidden"
:song)
a"
(:album :track) what))))
genre)
artist))
:value
:value values-string
"Add all")
29.6浏览页
369
---
## Page 387
URL函数中时，它将被自动转换回一个列表。后面你将很快看到，该列表可被用来构造返回正确
中生成一个base64编码的字符串嵌人到表单里。
从values-for-page返回的表中将一个指定列的值解出来并放在一个列表中，然后再从该列表
列表以及what参数的值。这就是你用到base64-list参数类型的地方。函数values->base64
允许服务器可以重构匹配浏览页条件的歌曲列表。该信息就是由values-for-page所返回的值
随机集合。
使用的任何搜索条件均可。但如果你以这种方式提交一个含有random参数的条件来添加歌曲的
览页返回随机结果的话，就不需要太多的数据，你只需提交一个添加歌曲的请求，采用浏览页
此你需要向服务器提交相当多的数据才能重构添加到播放列表的歌曲列表。如果你没有允许浏
有所需的信息来回应一个来自该请求本身的请求。由于浏览页中的结果可能是部分随机的，因
all”提交按钮。你需要使用HTML表单而不是正常的链接来确保应用的无状态性，从而确保拥
你将使用的解决方案是发回一个含有足够多信息的表单，其中带有一个隐含的INPUT元素，
370
当该参数以values查询参数的值的形式回到一个将values声明为类型base-64-list的
(defun values->base-64 (column values-table)
在browse页上你要做的另一件事是，编写一个带有几个隐含INPUT字段的表单和一个“Add
(defun browse-link (new-what what value)
(flet
(unless (eql new-what what)
(obj->base64 (map-rows #'value values-table))))
(:a :href (link "browse" :what new-what what value)
(html
"}“）））
第29章实践：MP3浏览器
(let ((value (column-value row what)))
（(value（r)
(:format "~(~as~)" new-what))
(html
(html
(:li value "
(:a :href (link "browse" 
(:a :href (link "browse"
(:a :href (link "playlist" :file file :action "add-songs") (:b song))
(:1i
(:a :href (link "browse" :what :song :artist artist) artist)
(browse-link :song:
browse-link
browse-link
(browse-link
www.TopSage.com
:album
:artist
:genre
what
what
what
what value)
 :what :song :genre
 :what :song :album 
value)))))}
value)
value)
album) album)
 genre) genre))))
---
## Page 388
单独歌曲的链接。其他的操作都用于播放列表页面本身的链接。
或:set-repeat。其中:add-songs操作用于浏览页中的“Add all”按钮，也用于那些用来添加
地指定该值，用户也可以从未运行他们的MP3客户端的其他机器上管理其播放列表。并且如果该
可以利用define-url-function的“粘滞参数”特性。正常情况下playlist-id无需显式提供,
重要的是playlist-id，它标识了页面应显示和管理的那个playlist对象。对于这个参数，你
的开始部分，只给出了参数列表：
define-url-function处理的背景下，不难看出函数playlist是如何工作的。下面是其定义
成一个关键字符号，包括：:add-songs、:delete-songs、:clear、:sort、:shuffle
与他们正在机器上浏览的不同的播放列表。
“粘滞的”。随后你将定义一个URL函数来生成全部已有播放列表的列表，其中用户可以选取一个
默认为playlist-id函数所返回的值，也就是浏览器所在客户机的IP地址。不过，通过允许显式
用户播放列表的当前内容，同时提供操作播放列表的接口。但在大部分繁文节都由
29.7
地识别实际的歌曲，而通过歌曲名可能不行。
的歌曲列表的查询。
① 这个解决方案也有其负面效果-——如果一个浏览页返回了许多结果，那么大量的数据将在底层来回发送。另外，
参数action指定了一些在用户的播放列表对象上所做的操作。该参数的值将会自动地转化
本节将我们带到了下一个URL函数playlist。这是三个页面中最复杂的一个，它负责显示
除了强制出现的request参数以外，playlist还接受大量的查询参数。
(define-url-function playlist
欢迎来到丰富多彩的Web编程世界。
道用户何时可能点击了它们浏览器的回退按钮，从而返回到一个旧的浏览页然后再点击那个“Add al"按钮。总之，
RANDOM-STATE复制下来，以便后面可以重建出同样的“随机"结果。但这个思路也有它自己的问题。你永远不知
你可以只是将这个值列表保存下来，而不必将它放在表单里发回服务器。或者你可以在生成浏览结果之前将
数据库查询也未必是最有效的。但它确实可以保证应用的无状态性。一个替代的方法是反过来在服务器端保存由
播放列表
(playlist-id string (playlist-id request) :package)
{reguest
(repeat keyword))
(shuffle keyword)
(order-by keyword)
artist
genre
(values base-64-list)
lbum
what keyword :file)
action keyword)
。“当你正在按：song浏览时，你使用来自：file列的值，因为它们可以唯一
for
for
for
for
for
for :add-songs action
www.TopSage.com
 :set-repeat action
:sort action
 :delete-songs action
:shuffle action
:add-songs and :delete-songs actions
29.7  播放列表
从某种程度来讲最
371
---
## Page 389
种:action操作。而delete-songs-link可以生成--个带有设置为:delete-songs的:action
向:header参数传递NIL以避免生成那个H1头。下面是该函数的其余部分：
page这个HTML宏来确保页面的基本样式匹配应用程序中的其他页面，尽管这一次你要
对象。然后你进行必要的队列处理，派发action参数的值以便调用一个playlist系列的函数。
个队列对象，并使用下面的两行来获取该播放列表的锁：
参数按照注释里所描述的方式分别用于其他操作。
base-64-list，define-url-function底层将负责解码由“Add all”形式提交的值。其余的
372
由于lookup-playlist将在必要时创建一个新的播放列表，它将总是返回一个playlist
 现在让我们来查看playlist的函数体。你需要做的第一件事是使用playlist-id来查找一
其中的函数playlist-toolbar生成一个含有到playlist页面的链接的工具栏，以进行多
函数playlist中其余的部分就是实际的HTML生成了。
参数file、what和values与:add-songs操作配合使用。通过将values声明为类型
(html
(case action
(let ((playlist (lookup-playlist playlist-id)))
(:mp3-browser-page
(:set-repeat
(:shuffle
f:sort
(:clear
(:delete-songs
(:add-songs 
(with-playlist-locked (playlist)
(html (:p (:i “Empty.")))
(html
第29章实践：MP3浏览器
((:table :class "playlist")
(let ((idx 0)
(do-rows
(:format
(incf idx))))>)))))))
(let ((row-style (if (= idx current-idx)
(current-idx (current-idx playlist)))
(html
((:table-row :class row-style)
(:progn artist
(:progn album
(:progn song
track
"Playlist 
:progngenre
(clear-playlist playlist))
playlist