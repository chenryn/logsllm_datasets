最后，你还可以选择在输出的信息中是否包含“intent fiter”。
dz> run app.broadcast.info -1
dz> run app .broadcast info --shov-intent-filters
拓展阅读
*Android 参考网站中 “BroadcastReceiver”主题位于：http:/developer.android. c
om/reference/android/content/BroadcastReceiver.html 。
°drozer 码中的 broadcast.py 模块位于 : https:/github.com/mwrlabs/ drozer/ blob/
master/src/drozer/modules/app/broadcast.py 
3.10确定app的受攻击面（attack surface）
在进行app安全评估时，你可能需要确定给定app的受攻击面。Drozer中有一个
真心很好用的模块帮助你达成这一目标。在这个模块中，一个app的受攻击面就是它
导出组件的数量。
怎么做
在你的 drozer console 中执行下面这条命令。
这条命令将通过包管理API，列出。指定包中所有导出的activity。
① 原文如此。 但显然应该是 “dz>ran app.package.atacksurface [包名]”。—译者注
②原文如此，应该是统计出。一译者注
28
---
## Page 106
Android安全攻防实战
例如，你可以试着对某个样例包运行这个脚本，如图3.30所示。
5activities
ce
exported
18 broadcast
receivers
exported
exported
图 3.30
工作原理
让我们来看一下“app.package.attacksurface”模块的源码。我想，它可能是我们
最感兴趣的模块之一。其源码中还会闪现出如何根据app的组织形式编写自动化的测
试工具的思想火花。当你想要对大量的app进行自动扫描时，它很可能会大显身手！
下 面是摘自 drozer-master/src/mrw/droidhg/modules/package.py 的代码：
from drozer import andro1d
from drozer,modules import common, Module
class AttackSurface (Module,common.Filters, cor
on. PackageManager) :
def execute (self,arguments) :
If arguments-package 1= None:
Package = self ,packageManger () -getPackageInfo
(arquments-package, common. PackageManager,GET_ACTIVITIES 1
common. PackageManager , GET_RECEIVERS 1
common. PackageManagez , GET_PROVIDERS 1
common. PackageManager , GET_SERVICES)
app1ication = package-app1icationInfo
activities = self ,match_filter (package.activitles,
*exported′,True)
True)
*,paqxodxo, *sxotaod ooed xotTqoew*gto8 - 8xepto.1d
True)
services = self.match_filter (package.services, *exported′,
True)
self ,stdout,vrite (*Attack Suxface:\n*)
self,stdout,vrite (* ld activities exported\,n* $
len (activities))
self.stdout,vrite (" Id broadcast recelvers exported\n* 3
len (receivers) )
self.stdout,vrite (* id content providers exported\n* §
88
---
## Page 107
第3章Android安全评估工具
self,stdout,write (" ld services exported\n* $ len (services))
len (providers) )
1f (application,flags & appl1cation,FLAG_DEBUGGABLE) 1= 0:
self,stdout,wr1te (*is debuggable\n*)
if package.sharedUserId != None:
self,stdout,write (*Shared UID ($s)\n* 
package.sharedUserId)
self.stdout ,vrite (*Package Not Found\n")
:90[0
代码量挺大的，但幸好这个模块调用包管理API的风格和其他模块的是一样的。
这个模块会通过包管理器API 提取关于service、activity、broadcast receiver 和content
provider的信息，然后只是试图根据包管理器提供的信息，去确定它们是不是导出的。
确定了哪些组件是导出的，就把它们的个数累加起来，并把导出组件数目的统计结
果打印到屏幕上，这个模块做的事还有：它试图确定指定的app是不是可以调试，以
及它是否使用共享用户ID。这些都是关于软件受攻击面的非常有用的信息。我将在
下一章里解释为什么。
拓展阅读
●drozer 的broadcast.py 模块的源码在：https://github.com/mwrlabs/drozer/blob/
master/src/drozer/modules/app/package.py -
3.11
运行activity
Activity是用作用户接口的app 组件。在对一个app进行安全评估时，如果能发
现其中有一些activity不需要权限就能运行，而且其中要是有一个还能访问敏感的数
据，或者在错误的上下文环境中运行时会前溃，那就非常的有用了。除了能通过drozer
console 操作activity，这个明显的好处之外，在操纵app的各个组件时，它也是一个
很好的响应观察口，因为由此，你能切实地从终端上看到你的Android设备对你命令
的响应。所以，干脆直说了吧一我们可以破解某些activity！
怎么做
你需要先选定一个要运行的activity，不过考虑到你可能确实不知道可以运行的
activity在哪儿，或者它们应该怎样被调用，我觉得在这个实验里，还应该把寻找可
以运行的activity的过程也包括在内。
1.使用app.activity.info 模块寻找一些activity。
[emu eexoed] aexoed-- ogug.aravaoe dde uz  run app.activity.forintent --action [intent action] -category [intent
[zobeqeo
比如，下面这个例子。
dz> run app.activity forintent --action android.intent.action.VIEW =*
category android.intent. category.DEFAULT
拓展阅读
·Intent filter 的相关参考资料位于：http://developer.android.com/reference/android/
content/Intent.html.
http://developer.android.com/guide/components/intents-filters.html
。Android开发者网站中“Activites”主题页面的地址是：http:/developer.android
com/guide/components/activities.html.
3.12编写drozer模块—一个驱动枚举模块
这个实验中，通过演示组成drozer模块的开发过程的各个实用步骤，解释实践
操作时该如何开发一个drozer模块。下面这个设备信息枚举模块将会抓取一些关于
硬件和操作系统版本（OSbuild）的信息。
怎么做
让我们现在开始编写一个drozer的设备枚举模块。
1.打开一个文本编辑器，输入下面这些代码：
from drozer,modules Import Module
class Info (Module) :
①这里之所以用“OS build”这个表示，是因为相关信息都是源自于 android.os.Build 类的。详见
下面的代码。—译者注
91
---
## Page 110
Android安全攻防实战
name = "Get Device info*
description = *A module that returns information about the
device and hardvare features*
examples = *run ex,device.info*
date - "101113*
author = *Keith Makan*
1icense = *GNU GPL*
path - [*ex*, "device*]
: (seuaumbxe*gtes) eanoexa gap
build = self.nev (*android.os.Bui1d*)
self.stdout,rite (*Getting device info...\n")
self.stdout,vrite (*[*) BOARD : %s\n" $(bui1d.,BOARD))
self.stdout,wzite ("[*] BOOTLOADER : ls\n* $
(bui1d.BOOTLOADER))
self.stdout,￥rite (*[*] BRAND : ls\n* $ (bui1d. BRAND))
self.stdout,write (*[*] CPU_ABI : ls\n"  (bui1d.CPU_ABI))
self stdout,write (*[*] CPU_ABI2 : &s\n* 8 (bui1d.CPU_ABI2))
self,stdout,￥rite (*[*] DEVICE : $s^n" $ (bui1d.DEVICE))
self,stdout,vrite ("[*] DISPLAY : s\n" $ (build.DISPLAY))
self.stdout,write (*[*] FINGERPRINT : s\n* 
(bui1d. FINGERPRINT))
self. stdout,write (*[*] HARDKARE : 8s\n* & (build.HARDWARE))
self,stdout.rite ("[*] MANUFACTURER : ts\n* 3
(buL1d.MANUFACTURER))
self.stdout,wzite (*[*] MODEL : ls\n" $ (bui1d,MODEL))
self.stdout,write (*[*] TAGS : is\n*  (bui1d.TAGS))
2.把它存为文件“ex.device.info”。
3.为你以后将要编写的drozer模块创建一个目录，把文件“ex.device.info”也
存在该目录里。
4.打开drozer console 执行下面这条命令。
dz> module repository create [path-to-your-module-dix]/repo
dz>module repository create[存救你编写的模块的目录的路径]/repo
5.然后再执行下面这条命令。
dz>module instal1[存放你端写的模块的目录的路径]/ex.device.info
6.如果没有语法错误或其他问题的话，drozer将会安装你的新模块。现在可以
用下面这条命令执行它了。
dz> run ex.device.info
上面这条命令将会产生类似图3.31这张截图的输出信息。
92
---
## Page 111
第3章Android安全评估工具
run ex.device.Info
t ModLfLed:18-11-13
Icense:GNU GPL
e.Lnfc
CPU_AB1
-v7a
ng/e8xx/n0 : 4 .1 .2/32054K/193
[*]TAGS 1release-keys
I°E ]
下面几个实验将是关于编写一些能扩展你的drozer框架能力的有用模块的。在
本书余下部分中，在每个实验里，我都将演示一些你在阅读本书余下部分时，会感
到有用的，关键模块的开发技巧。
工作原理
在这个说明的开头部分中，我想应该讨论你下刚写的这个新的drozcr模块的代
码，以及它到底是怎么提取出你设备中的相关信息的。
好了，首先，我要讨论一下drozer模块的结构。你写的每个模块都应该以下面
这行代码开头。
import drozer,modules import Module
(otnpo) ogI 9t)
本质上讲，第一行就是从modules库中导入一些代码，它使得drozer模块能够使
用所有神奇的方法，并能访间它们需要操作的属性。第二行被称为一个类声明头，
在Python里，它表示开始定义一个对象。你或许已经注意到头部中的“(Module)”，
它是Info类获得Module类的属性的方式。从语义角度讲，它很像Java中的继承。
接下来的这块代码如下所示：
name = **
6
---
## Page 112
Android安全攻防实战
description = *
1icense = **
这里是drozer用来关联模块中的一些元数据和使文档更标准化些的变量。写起
来也很容易一没啥技术含量，我们过：
def execute (self, arguments) :
这段代码被称为函数头，表示开始定义一个Python函数。这个函数的特别之处
在于：模块是调用这个函数（或称方法）来完成所有艰苦工作的，它类似于Java中
的Main方法。我们来讨论下execute方法接收的两个参数。
·self：它是该方法所在类的一个实例。它会被传递给类中所有函数，以便访问
类实例。
。arguments：这是一个含有全部通过console传递给drozer模块的参数的字典
(dictionary)。
在这行代码下面，是这句代码。
build = self,nev (*android,os,Bui1d*)
嗯，除了引用self对象和调用new这样一个略显神秘的方法之外，我们看见把
“android.os.Build”这个字符串值作为参数传递了进去。这个字符串是AndroidJava A{I