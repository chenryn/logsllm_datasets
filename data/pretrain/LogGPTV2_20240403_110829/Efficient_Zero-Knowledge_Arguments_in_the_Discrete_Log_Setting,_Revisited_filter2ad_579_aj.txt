non-trivial kernel element. The only case where we do not obtain a
non-trivial kernel element of [AjqM] is, if for all i we have Mivi =
im(Mi ). But,
im(Mi ) = f0g. Thus, the bad case
For general m, we have diag(Q; : : :) and diag(M; : : :) instead of
v ) from LMPAalmSnd with [Aj diag(H ; : : :)]( w
v ) =
im(Mi )m =
im(diag(Mi ; : : : ; Mi )) =
M0v0 C u. However, this implies that u 2∩dim(M)
∩dim(M)
Q and M. We obtain ( w
[t]. Evidently,
f0g. Thus, our claim follows analogously.
□
Corollary B.7. Protocol LMPAZK has ε-statistical HVZK with ε 2
O(2 log2(n))/p.
by assumption we have
is impossible.
∩dim(M)
∩dim(M)
i=0
i=0
i=0
i=0
i=0
Proof. This is immediate from Lemma B.4.
□
C BATCH PROOFS OF KNOWLEDGE
By applying the “linear combination of protocols” technique, to
multiple “trivial proofs of knowledge” (c.f. Fig. 2) we obtain batch
verification of statements ([A]; [ti ]), i = 1; : : : ; N , i.e. the setting
of [38], in a straightforward way.
Protocol C.1. The following is a protocol to prove:9wi : [A]wi =
[ti ] for i = 1; : : : ; N . Let χN +1 be a testing distribution for chal-
lenges, such that x   χN +1 has xN +1 , 0 always. Common
input is ([A]; ([ti ])i ) 2 Gm(cid:2)n (cid:2) Gn. The prover’s witness are some
wi 2 Fn
p .
(cid:15) P ! V: Pick r   Fn
p and let [a] = [A]r. Send [a] 2 Gm.
(cid:15) V ! P: Pick x   χN +1. Send x 2 Fp.
(cid:15) P ! V: Compute z = x
Send z 2 Fn
p .
(cid:15) V: Check [A]z
if true/false.
N
i=1 xi [ti ] + xN +1[a], and accept/reject
Lemma C.2. Protocol C.1 is a HVZK-PoK for 9w : [t] = [A]w. It is
perfectly complete, has perfect HVZK and is (N + 1)-special sound.
N
i=1 xiwi + xN +1r.
∑
∑
w1:::
wN
r
(
)
?
=
⊤
=
Proof. Completeness is straightforward. Extraction uses N +
1 accepting transcripts ([a]; xj ; zj ). Let [T ] B [t1; : : : ; tN ; a] and Z,
X be appropriate matrices built from the N + 1 transcripts. Since
(cid:0)1 is a valid witness.
[A]Z = X, we find (w1; : : : ; wN ; r ) B ZX
For HVZK note that xN +1 , 0. Hence z is uniformly distributed
for any honest execution. Thus, we can pick z   Fm
p and let
[a] B [A]z (cid:0) [T ]x as usual.
□
D AN EFFICIENT PROOF OF CORRECTNESS
OF A SHUFFLE
A proof of correctness of a shuffle is a proof that two (multi-)sets
of ciphertexts decrypt to the same multi-set of plaintexts. This is
especially interesting in settings with rerandomisable ciphertexts,
because the “shuffling party” does not need to decrypt. For elec-
tronic voting, a shuffle achieves a certain unlinkability between
the originally encrypted votes, and the (in a final step) decrypted
votes, while the proofs of correctness of the shuffle ensure that the
voting result is unaffected.
With our tools, it is possible to prove the correctness of a shuffle
in logarithmic communication for ElGamal ciphertexts in a very
naive manner. Namely, we commit to a permutation matrix (as
part of w) and rerandomisation randomness for the ElGamal ci-
phertexts (also part of w). Then we prove that [A]w = [⃗c], where
[A] is constructed from the old ciphertexts and the ElGamal pub-
lic key, and [⃗c] is the vector of shuffled ciphertexts. We also add a
proof that (the relevant part of) w commits to a permutation matrix,
as sketched in Section 3.5. This all neatly fits into our framework,
giving a logarithmic size proof overall. However, there is a huge
drawback: The size of the permutation matrix, hence w, is N 2 for N
ciphertexts. Thus, the computation grows quadratically in N . This
is unacceptable in practice.
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom2109266666664
′
д
′
2
д
2
ctold
0
д
377777775
37777775
∑
′
д
n
′
д
n
0
0
′
′
N +1
N +1
“ﬁﬁﬁ‹ =
'›››« y
26666664cy + cσ
for rσ   Fp. He sends cσ to the verifier and engages in
a LMPAZK protocol for
′
′
n(cid:0)1
; : : : ; д
д
д
N +2
; : : : ; д
0
0
′
′
n(cid:0)1
0
д
N +2
: : : ctold
pk
N(cid:0)1
0
xi [ctnew
where [u] B
]. The top row is added so one can
run LMPAbatch, reducing to a 2 (cid:2) n matrix. Since [д
] has
hard kernel relation, so has [A]. (This is a “commitment-
extension”, see Remark 3.4.) Also note that this LMPA
proof ensures the requirements of QESACopy on the open-
ing of [cy ], hence no additional subprotocol S is necessary
in this instance.
σ
rσ
ry
cy
cσ
u
′
i
Honest verifier zero-knowledge of this protocol follows from
honest verifier zero-knowledge of the subprotocols. Soundness (and
extraction) follows from soundness (and extraction) of the subpro-
tocols.
In [5], intuition and a detailed security argument is given. De-
spite our minor modifications, their proof adapts seamlessly to our
setting.
A rough efficiency estimate of our scheme is 30N exponentia-
tions for the prover and 10N exponentiations for the verifier. These
p
are roughly twice the numbers of [5], when trading interaction
for efficiency. However [5] has O(
N ) size proofs, while we have
O(log(N )) size proofs.
D.1 Adapting the shuffle argument of
Bayer–Groth
The shuffle argument of Bayer and Groth [5] is built from two sub-
arguments, a “product argument” and a “multi-exponentiation ar-
gument”. A generic proof of security is given in [5, Theorem 5].
The former argument can be instantiated by QESAZK, or more
precisely, QESACopy. The latter argument can be instantiated by
LMPAZK. Since our arguments have logarithmic communication
and need linearly many exponentiations, so does the resulting shuf-
fle argument. We give a more detailed instantiation below.
′′; Q]) is the
(cid:15) CRS: ck = (ckQ ; ckL), where ckQ = ([д
commitment key for QESAZK and ckL = [h] is the commit-
ment key for LMPAZK (or empty if a simple zero-knowledge
p , where n (cid:21) N + 2
LMPA version is used). Here [д
is a (suitably large) power of 2. Note that our commitment
keys consist of random group elements.
] 2
(cid:15) Common input: Old and new ciphertexts [ctold
G2 for i = f0; : : : ; N (cid:0)1g and ElGamal public key [pk] 2 G2.
(cid:15) Prover’s witness: The random permutation π 2 f0; : : : ; N (cid:0)
1gN and rerandomisation randomnesses ρi 2 Fp such that
[ctnew
πi ] + ρi [pk]. (Note that Enc(0; ρi ) = ρi [pk]
for ElGamal.)
(cid:15) P ! V: Compute and send the commitment [cπ ] to π:
] = [ctold
] 2 Fn
], [ctnew
′; д
′
i
i
i
[cπ ] = ComckQ (π ; 0; rπ )
′
= [д
1
j д
′
2
; : : : ; д
′
N +1
j д
′
N +2
; : : : ; д
′
n(cid:0)2
′
j д
n(cid:0)1
′
n ]
; д
'›››››«
0
π
0
0
rπ
“ﬁﬁﬁﬁﬁ‹
′
n(cid:0)1] and [д
′
(Remember that [д
n ] are reserved for random-
ness in QESAZK commitments, and [д1] is also reserved (for
the constant 1).)
(cid:15) V ! P: Send x = (x0; : : : ; xN(cid:0)1)   χN .
(cid:15) P ! V: Send [cy ] = ComckQ (y; 0; ry ), where [y] B π (x) =
; : : : ; xπN(cid:0)1 ).
(xπi )i = (xπ0
(cid:15) V ! P: Send ζ ; z   Fp.
(cid:15) P $ V: Prove following statements using (logarithmic com-
munication) sub-protocols QESACopy and LMPAZK:
– [cπ ] is a permutation and [cy ] is a commitment to
π (x): The prover shows (in zero-knowledge) that
N(cid:0)1∏
N(cid:0)1∏
(ζ πi + yi (cid:0) z) =
(ζ i + xi (cid:0) z):
i=0
i=0
Note that ζ [cπ ] + [cy ] is a commitment to ζ π + y, which
can be used for QESAZK, or more precisely, QESACopy.
Also note that the right-hand side is computable from
public information.
– [⃗ctnew] is a rerandomised permutation of [⃗ctold]: The
prover shows (in zero-knowledge) that
[ctold
i
]yi + [pk]
ρi xi =
[ctnew
i
]xi :
∑
i
This fits into our matrix multiplication proofs (with wit-
). Concretely, the prover commits to
ness
′
σ B x
n(cid:0)1]
y
⊤
ρ
x
⊤
ρ via [cσ ] = ComckQ (
; rσ ; 0) = [д
2 FN +1
′
N +2
; д
0
σ
p
)
(
σ
rσ
∑
(
i
)
∑
)
i
(
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom2110