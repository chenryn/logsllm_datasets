在图18-7的场景中，有以下两种方法把客户端的请求导向特定的服务器。
• HTTP重定向
420 该内容的URL会解析到主服务器的IP地址，然后它会发送重定向到复制服务器。
• DNS重定向
该内容的 URL 会解析到 4 个 IP 地址，DNS 服务器可以选择发送给客户端的
IP 地址。
请参见第20章，以获取详细信息。
18.3.2 内容分发网络
简单地说，内容分发网络（CDN）就是对特定内容进行分发的专门网络。这个网络
中的节点可以是Web服务器、反向代理或缓存。
18.3.3 CDN中的反向代理缓存
在图18-6和图18-7中，复制原始服务器可以用反向代理（也称为替代物）缓存来
代替。反向代理缓存可以像镜像服务器一样接受服务器请求。它们代表原始服务器
中的一个特定集合来接收服务器请求。（根据内容所在的IP地址的广告方式，这是
有可能的，原始服务器和反向代理缓存之间通常有协作关系，到特定的原始服务器
的请求就由反向代理缓存来接收。）
反向代理和镜像服务器之间的区别在于反向代理通常是需求驱动的。它们不会保存
原始服务器的全部内容副本，它们只保存客户端请求的那部分内容。内容在其高速
缓存中的分布情况取决于它们收到的请求，原始服务器不负责更新它们的内容。为
了更容易地访问“热点”内容（就是高请求率的内容），有些反向代理具有“预取”
特性，可以在用户请求之前就从服务器上载入内容。
421 CDN中带有反向代理时，可能会由于存在代理的层次关系而增加其复杂性。
18.3.4 CDN中的代理缓存
代理缓存也可以部署在类似图18-6和图18-7的环境中。与反向代理不同，传统的
代理缓存能收到发往任何Web服务器的请求。（在代理缓存与原始服务器之间不需
要有任何工作关系或IP地址约定。）但是与反向代理比起来，代理缓存的内容一般
都是按需驱动的，不能指望它是对原始服务器内容的精确复制。某些代理缓存也可
以预先载入热点内容。
440 ｜ 第18章
按需驱动的代理缓存可以部署在其他环境中——尤其是拦截环境，在这种情况下，2层
或3层设备（交换机或路由器）会拦截Web流量并将其发送给代理缓存（参见图18-8）。
代理缓存
客户端
客户端 因特网和大量
的原始服务器
交换机
客户端
客户端
图18-8 客户端的请求被交换机拦截并发给代理缓存
拦截环境依赖于在客户端和服务器之间设置网络的能力，这样，所有合适的HTTP
请求才能真正发送到缓存中去。（参见第20章）。根据收到的请求，将内容分布在缓
存中。
18.4 让网站更快
前面一节提到的很多技术也能帮助网站更快地加载。服务器集群和分布式代理缓存
或反向代理服务器分散了网络流量，可以避免拥塞。分发内容使之更靠近终端用户，
这样从服务器到客户端的传输时间就更短了。请求和响应穿过因特网，在客户端和
服务器间传输的方式是影响资源访问速度最主要的因素。重定向方法的详细内容参
见第20章。
加速网站访问的另一种方法是对内容进行编码以便更快地传输。比如，对内容进行
压缩，但前提是接收的客户端能够把内容解压缩。请参见第15章了解更多细节。 422
18.5 更多信息
参阅第3部分以了解如何使Web站点安全。下面的因特网草案和文档提供了Web
虚拟主机服务和内容分发的更多细节。
• http://www.ietf.org/rfc/rfc3040.txt
RFC 3040，“Internet Web Replication and Caching Taxonomy”（“因特网Web复
制和缓存分类法”），这份文档是关于Web复制与缓存应用术语的参考文献。
Web主机托管 ｜ 441
• http://search.ietf.org/internet-drafts/draft-ietf-cdi-request-routing-reqs-00.txt
“Request-Routing Requirements for Content Internetworking”（“内容网际互连的
请求路由需求”）。
• Apache: The Definitive Guide1（《Apache权威指南》）
Ben Laurie和Peter Laurie著，O’Reilly & Associates公司出版。这本书讲述如何
423 运行开源的Apache Web服务器。
注1： 本书影印版由人民邮电出版社出版。（编者注）
442 ｜ 第18章
第19章
发布系统
443
怎样创建Web页面并放到Web服务器上去呢？在Web发展的“蛮荒”时代（比如
1995年），可能要在文本编辑器中手工拼凑HTML，用FTP手动把内容上传到Web
服务器。这个过程很痛苦，很难与同事配合，也不是特别安全。
如今的发布工具使得创建、发布以及管理Web内容方便了许多。今天，用户可以交
互式地编辑Web内容，在屏幕上看到它实际呈现的样子，轻轻点击一下就可以把内
容发布到服务器，还能得到所有文件变化的通知。
许多支持远程发布内容的工具都使用了扩展的HTTP协议。本章将讲解以HTTP为
基础的两种重要的Web内容发布技术：FrontPage和DAV。
19.1 FrontPage为支持发布而做的服务器扩展
FrontPage（FP）是微软公司提供的一种通用Web写作和发布工具包。FrontPage的
原始创意（FrontPage 1.0）是由维美尔（Vermeer）技术公司在1994年构思的，它
是首个把网站管理和创建整合进一个统一工具的产品。微软公司1996年收购了维美
尔公司，发行了FrontPage 1.1。最新的版本——FrontPage 2002版，是这条产品线
上的第六代，是微软办公套件的核心组成部分。
19.1.1 FrontPage服务器扩展
作为“随处发布”战略的一部分，微软公司发布了一系列服务器端软件，称为
“FrontPage服务器扩展”，（FPSE）。这些服务器端组件和Web服务器集成在一起，
424 在网站和运行FrontPage的客户端（以及其他支持这些扩展的客户端）之间提供了
必要的转接工作。
我们主要关注FrontPage客户端和FPSE之间的发布协议。该协议是对HTTP核心
服务进行扩展而无需改变HTTP语义的一个设计范例。
FrontPage 的发布协议在 HTTP 的 POST 请求之上实现了一个 RPC（Remote
Procedure Call，远程过程调用）层。它允许FrontPage客户端向服务器发送命令来
更新网站上的文档、进行搜索以及在多个Web作者之间进行协作，等等。图19-1
给出了这个通信过程的概貌。
Web服务器看到以FPSE（在非微软IIS服务器上就以一组CGI程序的方式实现）
为接收地址的POST请求，就对其进行相应的引导。只要中间的防火墙和代理服务
器都配置为允许使用POST方法，FrontPage就能与服务器持续通信。
444 ｜ 第19章
HTTP请求报文
包含命令与URL www.joes-hardware.com
HTTP
因特网
HTTP
FrontPage客户端
FrontPage,
MS Word, Excel, 等等 CGI ISAPI
FrontPage服务
器扩展(FPSE)
图19-1 FrontPage发布系统体系结构
19.1.2 FrontPage术语表
在我们深入研究FPSE定义的RPC层之前，先来了解一下其常用术语。
• 虚拟服务器
在同一服务器上运行的多个网站之一，每个都有唯一的域名和IP地址。本质上
说，虚拟服务器允许在单一的Web服务器上托管多个网站，在浏览器看来每个
网站都像是由它自己专门的Web服务器托管的一样。支持虚拟服务器的Web服
务器称为多路托管（multi-hosting）Web服务器。配置有多个IP地址的机器称为
多宿主（multi-homed）服务器（参阅18.2节以获取更多信息）。
• 根Web
Web服务器默认的顶层内容目录，或者是在多路托管环境下，虚拟Web服务器
的顶层内容目录。要访问根Web，只需指定该服务器的URL，而不需要指定页
面名称。每个Web服务器只能有一个根Web。 425
• 子Web
根Web的已命名子目录或另一个完全由FPSE扩展的子Web。子Web可以是完
全独立的实体，能够指定自己的管理和写作权限。此外，子Web还能提供方法
（比如搜索）的作用范围。
19.1.3 FrontPage的RPC协议
FrontPage客户端与FPSE使用专用的RPC协议来通信。该协议构建在HTTP的
POST方法之上，它把RPC的方法及其相关的变量嵌入在POST请求的主体中。
发布系统 ｜ 445
在开始处理之前，客户端需要知道服务器上目标程序（FPSE包中能够执行这些
POST请求的相关部分）的位置和名称。接下来它会发送一个特殊的GET请求（参
见图19-2）。
HTTP请求报文
包含命令和URL
GET /_vti_inf.html HTTP/1.1
Date: Sat, 12 Aug 2000 20:31:24 GMT
User-agent: Mozilla/2.0 (compatible;MS FrontPage 4.0)
Host: taskserver:80
Accept: auth/sicily www.joes-hardware.com
Content-length: 0
因特网
FrontPage
客户端
CGIISAPI
FrontPage服务
器扩展(FPSE)
图19-2 初始请求
得到返回的文件之后，FrontPage客户端读取响应，寻找与 FPShtmlScriptUrl、
FPAuthorScriptUrl以及FPAdminScriptUrl相关的值。通常，这些值看起来是
这样的：
FPShtmlScriptUrl="_vti_bin/_vti_rpc/shtml.dll"
FPAuthorScriptUrl="_vti_bin/_vti_aut/author.dll"
FPAdminScriptUrl="_vti_bin/_vti_adm/admin.dll"
FPShtmlScriptUrl告诉客户端要执行“浏览时”命令（例如，获取FPSE的版本
号）时应向哪里POST请求。
FPAuthorScriptUrl告诉客户端要执行“写作时”命令时应向哪里POST请求。
426 类似地，FPAdminScriptUrl告诉FrontPage向哪里发送管理操作的POST请求。
现在我们已知道这些程序所在的位置，可以发出请求了。
1. 请求
POST请求的主体包含RPC命令，形式是method=及任何需要的参数。
例如，请求文档列表的RPC报文如下：
POST /_vti_bin/_vti_aut/author.dll HTTP/1.1
Date: Sat, 12 Aug 2000 20:32:54 GMT
446 ｜ 第19章
User-Agent: MSFrontPage/4.0
..........................................
method=list+documents%3a4%2e0%2e2%2e3717&service%5fname=&listHiddenDoc
s=false&listExplorerDocs=false&listRecurse=false&listFiles=true&listFo
lders=true&listLinkInfo=true&listIncludeParent=true&listDerived=false
&listBorders=false&listChildWebs=true&initialUrl=&folderList=%5b%3bTW%
7c12+Aug+2000+20%3a33%3a04+%2d0000%5d
POST方法的主体中含有发送给FPSE的RPC命令。与CGI程序一样，方法中的空格
被编码为加号（+）字符。所有其他非字母数字的字符都被编码为%XX格式，XX表
示该字符的ASCII码。根据这种记号方式，更容易辨识的主体版本如下所示：
method=list+documents:4.0.1.3717
&service_name=
&listHiddenDocs=false
&listExplorerDocs=false
.....
其中某些元素的含义如下所述。
• service_name
方法应该在该URL表示的网站上执行。必须是已有文件夹或者已有文件夹的下
层文件夹。
• listHiddenDocs
如果值为true，就显示网站中隐藏的文档。所谓“隐藏”是指其URL的路径部
分以“_”开头。
• listExploreDocs
如果值为true，就列出任务列表。
2. 响应
大多数RPC协议方法都有返回值。大多数常见的返回值都用来表示方法成功和各种
错误。有些方法还有第三种类别的返回值，称为“采样返回码”。FrontPage会对这
些代码进行适当的解释，为用户提供准确的反馈。 427
继续讨论前面的例子，FPSE处理这个listdocuments请求并返回必须的信息。示
例响应如下：
HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
Date: Sat, 12 Aug 2000 22:49:50 GMT
Content-type: application/x-vermeer-rpc
发布系统 ｜ 447
X-FrontPage-User-Name: IUSER_MINSTAR
RPC packet
method=list documents: 4.0.2.3717