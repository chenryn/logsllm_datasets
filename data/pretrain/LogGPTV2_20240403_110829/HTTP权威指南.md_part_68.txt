### 18.3.1 客户端请求导向方法

在图18-7所示的场景中，有两种主要方法可以将客户端的请求导向特定服务器：

- **HTTP重定向**：当客户端请求的内容URL解析到主服务器的IP地址时，主服务器会发送一个重定向响应，将客户端重定向到复制服务器。
- **DNS重定向**：内容的URL会解析出四个不同的IP地址。DNS服务器可以选择其中一个IP地址返回给客户端。

有关这两种方法的详细信息，请参阅第20章。

### 18.3.2 内容分发网络（CDN）

内容分发网络（CDN）是一种专门用于分发特定内容的网络结构。该网络中的节点可以是Web服务器、反向代理或缓存服务器。

### 18.3.3 CDN中的反向代理缓存

在图18-6和图18-7中，原始服务器的副本可以通过反向代理（也称为替代物）缓存来实现。反向代理缓存可以像镜像服务器一样接收客户端请求，并代表原始服务器处理这些请求。这种设置通常依赖于IP地址的广告方式，使得反向代理缓存与原始服务器之间存在协作关系。

反向代理和镜像服务器的主要区别在于，反向代理通常是按需驱动的，只保存客户端请求的内容，而不是整个原始服务器的内容。为了提高“热点”内容（即高请求率内容）的访问效率，一些反向代理具备预取功能，可以在用户请求之前从服务器加载内容。

### 18.3.4 CDN中的代理缓存

代理缓存也可以部署在类似于图18-6和图18-7的环境中。与反向代理不同，传统的代理缓存可以处理发往任何Web服务器的请求，且不需要与原始服务器之间有任何预先约定。同样地，代理缓存也是按需驱动的，不能保证其内容与原始服务器完全一致。某些代理缓存也可以预先加载热点内容。

此外，在拦截环境中，二层或三层设备（如交换机或路由器）可以拦截Web流量并将其转发给代理缓存（见图18-8）。拦截环境需要在网络配置上确保所有合适的HTTP请求都能被正确地发送到缓存中。

### 18.4 加速网站访问

前面提到的技术可以帮助加速网站加载速度。通过使用服务器集群和分布式代理缓存或反向代理服务器，可以分散网络流量，避免拥塞。将内容分发到更接近终端用户的地点，可以减少从服务器到客户端的数据传输时间。请求和响应在互联网上的传输路径对资源访问速度有很大影响。更多关于重定向方法的细节，请参阅第20章。

另一种加速网站访问的方法是对内容进行编码以提高传输效率，例如压缩内容，前提是客户端能够解压缩接收到的数据。详情请参阅第15章。

### 18.5 更多信息

欲了解更多关于如何使Web站点安全的信息，请参阅第3部分。以下是一些相关的因特网草案和文档，提供了Web虚拟主机服务和内容分发的更多细节：

- RFC 3040: "Internet Web Replication and Caching Taxonomy"（因特网Web复制和缓存分类法）
- "Request-Routing Requirements for Content Internetworking"（内容网际互连的请求路由需求）
- 《Apache权威指南》（Ben Laurie和Peter Laurie著，O’Reilly & Associates公司出版）

### 第19章 发布系统

#### 19.1 FrontPage支持发布的服务器扩展

FrontPage是微软提供的一种通用Web写作和发布工具包。它最初由Vermeer技术公司在1994年开发，后被微软收购并继续发展。最新的版本——FrontPage 2002版，是微软办公套件的一部分。

##### 19.1.1 FrontPage服务器扩展

作为“随处发布”战略的一部分，微软发布了“FrontPage服务器扩展”（FPSE），这是一系列与Web服务器集成的服务器端软件，为FrontPage客户端和其他支持这些扩展的客户端提供了必要的转接工作。

我们重点关注的是FrontPage客户端与FPSE之间的发布协议。该协议基于HTTP POST请求实现了远程过程调用（RPC）层，允许客户端发送命令以更新网站文档、进行搜索等操作。图19-1展示了这个通信过程的概貌。

只要中间的防火墙和代理服务器配置为允许使用POST方法，FrontPage就能与服务器持续通信。

##### 19.1.2 FrontPage术语表

在深入研究FPSE定义的RPC层之前，先了解一下常用术语：

- **虚拟服务器**：在同一台服务器上运行的多个网站之一，每个都有唯一的域名和IP地址。支持虚拟服务器的Web服务器称为多路托管Web服务器。
- **根Web**：Web服务器默认的顶层内容目录，或者是在多路托管环境下，虚拟Web服务器的顶层内容目录。
- **子Web**：根Web的已命名子目录或另一个完全由FPSE扩展的子Web。子Web可以是独立的实体，并能指定自己的管理和写作权限。

##### 19.1.3 FrontPage的RPC协议

FrontPage客户端与FPSE使用专用的RPC协议进行通信。该协议构建在HTTP的POST方法之上，将RPC方法及其相关变量嵌入POST请求的主体中。在开始处理之前，客户端需要知道服务器上目标程序的位置和名称。接下来，它会发送一个特殊的GET请求（见图19-2）。

得到返回的文件后，FrontPage客户端读取响应，寻找与FPShtmlScriptUrl、FPAuthorScriptUrl以及FPAdminScriptUrl相关的值。这些值通常如下所示：

```
FPShtmlScriptUrl="_vti_bin/_vti_rpc/shtml.dll"
FPAuthorScriptUrl="_vti_bin/_vti_aut/author.dll"
FPAdminScriptUrl="_vti_bin/_vti_adm/admin.dll"
```

现在我们知道了这些程序的位置，可以发出请求了。

**请求示例**：
```http
POST /_vti_bin/_vti_aut/author.dll HTTP/1.1
Date: Sat, 12 Aug 2000 20:32:54 GMT
User-Agent: MSFrontPage/4.0
method=list+documents%3a4%2e0%2e2%2e3717&service%5fname=&listHiddenDoc
s=false&listExplorerDocs=false&listRecurse=false&listFiles=true&listFo
lders=true&listLinkInfo=true&listIncludeParent=true&listDerived=false
&listBorders=false&listChildWebs=true&initialUrl=&folderList=%5b%3bTW%
7c12+Aug+2000+20%3a33%3a04+%2d0000%5d
```

**响应示例**：
```http
HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
Date: Sat, 12 Aug 2000 22:49:50 GMT
Content-type: application/x-vermeer-rpc
X-FrontPage-User-Name: IUSER_MINSTAR
RPC packet
method=list documents: 4.0.2.3717
```