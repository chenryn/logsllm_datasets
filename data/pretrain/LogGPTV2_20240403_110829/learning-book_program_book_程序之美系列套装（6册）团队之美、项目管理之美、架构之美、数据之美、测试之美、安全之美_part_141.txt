时，就说团队已经达到了零Bug反弹（zeroBugbounce，ZBB）。之
所以称为弹回，是因为只要有下一个Bug进来，团队就不再处于零
Bug状态了。有些受人欢迎的理论涉及ZBB和实际发行版本之间的
距离，但是都不够有说服力，不值得在此列出。
782
---
## Page 784
·零已解决Bug。已解决的Bug可能会隐藏团队所不了解的问题。直
到关闭时（并且核实），才能确定某个Bug确实以其该有的方式得
到修正。达到零已解决Bug，或者零活动中Bug，意味着项目真的处
于可能完成的状态了。
在这一点上，新生成和活动中的Bug是较差的评价手段，因为它们
不在所考虑的标准内。即使团队正积极地调查这些Bug，除非交给
作战团队，否则，它们对项目的进展没有实质的影响。
候选版本
项目满足所有退出标准的第一个版本，叫做候选版本（Release
Candidate，RC）。一旦构建版本完成之后，就要增加新的退出标
准：这个RC构建版本出现哪些问题，就应该创建第二个候选版本？
如果没有退出标准，认为RC构建版本通过所有验证和QA测试，就
把构建版本放到网上，或者刻成CD，并交付到客户手中。
如果定义了一个RC标准，而这个RC却不能满足退出标准，就得重
复终局阶段的过程。作战团队决定要调查、设计和实现哪些事项，
要核准和进行变动，并且重复这一流程。
在软件世界里，尤其是用塑料膜封装起来的世界里，RC是非常昂贵
的。通常还有些额外的测试和过程是构建版本必须经历的，用以验
证安装、本地化、品牌推厂和其他问题。就网站而言，这完全取决
于项目和其他项目如何整合起来。也许你必须要管理某个同样复杂
的相互依赖的树。
首次展示和操作
当最终的RC构建版本完成时，只有团队的部分人能够庆功。根据项
目的特性，最终RC版本可能会引发一系列新的整体工作。测试和
QA团队也许需要全力以赴，去测试服务器负载或者其他的容量问
题，而这些工作只能在终极构建版本中才能进行。这些问题当然可
以事先规划，但是测试只能在产品完成后才能进行。
多数网站或者基于web的项目都会让发行版本通过一系列测试服务
器，服务器提供各种条件测试和集成测试来保证最终测试覆盖率。
项目必须覆盖的平台或者语言越多，首次展示的流程就会越复杂。
当然，合理的首次展示所需要的时间，可以在初次规划时就进行估
783
---
## Page 785
算和计划。根据如何组织首次展示，首次展示及其操作的负担，可
以独立分配给小团队，或者由整个项目团队来共同分担。
项目的事后分析
当某个里程碑完成或者整个项目接近完成时，要有人让团队从刚刚
完成的工作中获得学习。这通常被称为书写项目回顾书或者事后分
析（参考医学术语，表示从已经结束的事情中学习）。做此事的难
点在于，你要捕捉人们大脑中仍然清晰的信息，但是当人们并始准
备庆功，并且整理好物品时，他们很少愿意回顾，再想想刚刚解决
的所有问题。多数人希望继续往前走，把过去留在后面。
这里就是领导力该发挥作用的地方了。团队领导必须坚持把精力投
入到事后分析的流程中。当事情放下时，领导者应该要求大家，开
始思考哪些事情进展顺利，哪些不顺利，即使只是以他们个人的私
下列表的形式来考虑一下。团队领导应该有所规划，以收集这些列
表，并且完成事后分析报告。报告中应该包含两件事：对所学的教
训进行分析和总结，承诺在下个项目中解决少部分问题（如果你挑
了一大堆事情，就无法都解决一—要有优先级，并集中焦点）。
聘请专家来为你们完成事后分析工作，是非常有意义的（或者找团
队以外，但属于你们组织的人）【L。他们进入，花费一周时间和
团队所有人面谈，根据所了解到的内容，以及咨询专业技巧的过
滤，来撰写报告。这有客观视角的优点，因为他们会注意并提出别
人没有注意到的事情1。也许，更加重要的是，他们把外面的经
验带到组织中，并且应用到特定项目和团队的需求中。
聚会时光
当最终的RC构建版本已经确认，并且开始进入出演流程，介绍给全
世界，这是并始庆祝的时候了。经历数周、数月，甚至数年，无论
需要你做的什么事情，都已经完成了。完成一个项目是一个很少见
和很特殊的事情：在技术圈很多项目都无法走到这么远。作为
PM，你的工作室确保每个参与者都有机会一起参与到庆祝中来，
避免用公司或组织的那一套呆板的庆祝方式？（不可能在会议室里
庆祝。）相反地，到最近的酒吧，在你最喜欢的餐厅定一张最大的
桌子，或者邀请大家去你的家。吃喝都要比你们一直以来的要好
（也要吃喝更多）。如果你不是那种爱热闹和社交型的人，那么就
找出团队中擅长于此的人，和他们一起策划，组织好庆祝。
784
---
## Page 786
做多数人的一生中，很少经历完成项目。创造出好东西，让其他人
在生活中使用，这是一件不可思议的挑战。此时，值得特别的庆祝
一番：尽情享受吧。
小结
大的截至期限就是一系列小的截至期限。
任何里程碑都有3个较小的期限：设计完成（规格说明书完成），
功能完成（实现完成），以及里程碑完成（质量保证和精炼完
成）。
在里程碑一并始就定义退出标准，可以提高团队赶上交付日期的能
刀。
赶上交付日期就像飞机着陆一样：你需要一个又长又慢的路线。同
时，你希望能够准备好再次快速起飞，而不用做出重大的修整。
你需要各种评价方法来追踪项目。通常的方法包括每日构建版本、
Bug管理和活动图表。
你需要各种控制来完成项目层次的调整。常见的控制元素包括查看
会议、Bug分类和作战团队。
终局阶段的结束，是一个很慢、很折磨人的过程。挑战在于如何缩
小改变的范围，直到令人满意的发行版本出现为止。
现在是时候并始事后分析流程了。让你自已和你的团队，通过从那
些进展顺利以及不顺利的事情的学习中，获得益处。
如果幸运降临到你头上，你的项目顺利推出，要快乐。非常，非常
地快乐。很多人没出过错，但是却从来没有过这样的成就。计划一
个疯狂的夜晚。做些荒谬有趣而奢侈的事情（包括邀请我这个作者
参加聚会）。让你多年之后有自已的事情可以讲。
练习
1.下一次，当你并展一个处于终局阶段的项目时，先列出你在项目
中希望追踪的一系列数据。承诺一定要在下个一个项目开始，就记
录这些数据。
785
---
## Page 787
J.就一个实验而言，下一次的退出标准已经制定，要求标准的制定
者参与到第一次Bug分类的会议中来，并且使用这些标准。这就能
道使大家把标准应用到自己的实践中，在终局阶段早期就提供一个
非常好的机会来精炼工作。
K.在Bug分类中，由一个程序员坚持决定每一个Bug的命运。他会欺
负弱小，嘲笑别人以及可以做任何他能做的事情，只为了使他的观
点保持绝对的统治。问题在，他往往是对的。你该怎么做呢？
L.在终局阶段早期，出于进入了最后的阶段，你的团队感到非常的
兴奋，但是你已经精疲力竭了。为了使项目能够进展到如今，你已
经耗尽了所有的精力。你对团队是否诚实？或者你试图隐瞒这种情
况？你如何才能充电呢？
M挑选另一个行业：你如何管理他们项目进度中的最后一部分？有
趣的例子包括：电影业、军事组的任何特殊任务（海豹特战部队、
日本武士、斯巴达勇士）或者是你喜欢就餐的餐馆。为你的团队做
一个展示，比较你的方法和他们的如何不同。
N.为你们的新闻网站发布一个重要的更新，已经过去两大了，而这
项功能正在被数百方的人们所使用。香槟已经准备好了，正在等看
你们享用。但是这时，一个工程师发现一个重大的问题，需要3天
时间来进行修订。问题是，已经花了一千万的广告费来准备这次特
殊的发布，而且时间也早就定好了。你应该怎么做呢？
0.试想一下，你是主持作战团队会议的5位领导之一。每次会上，
团队很多初级成员也参与其中，5位领导之间爆发出大的争论，有
时还持续10分钟或者更长。这会对你的团队造成什么影响？列出你
能采取的各种不同的方法，既有在会上用的，也有在会后用的。
P.假设你刚刚发布了历史上最重要的软件。你的团队照片登上了时
代杂志的封面，你们变得非常出名。你该如何庆祝呢？你要花费多
是项目中任何人所发布过的最好的软件：难道不值得用一种特殊的
方式来奖励他们的成就吗？
[1]零和是游戏理论术语，意指一组有限的资源，把巧克力蛋糕切
成小块，就是一种零和游戏：如果我拿得比较多，你就会拿得比较
786
---
## Page 788
少，但是去一家库存无限的咖啡馆，点一些蛋糕就不是零和游戏：
我们每个人都可以得到我们想要的分量。味道不错！
[2]此外，你定义的退出标准越差，你赴上日期的机率就越低，最
滩容忍的情况就是没有退出标准，这样你只能根据一时兴起的意见
和管理来了解什么时候做完。
[3]要想了解更多关于测试计划和一般QA方法论的知识，请参阅
RexBlack所著的《Managing the TestProcess》（Microsoft Press出
版，1999），如果你对质量很看重就应该把它变成项目远景文件和
规划流程中的一部分。
[4]出自GeraldWeinberg所著的《Quality Software Management》
（DorsetHouse出版，1991）的第一卷《SystemsThinking》第
272~273页。
[5]出处同前。
[6]可用于此的一些不错的工具和流程的摘要，请参考同站
http://www.martinfowler.com/articles/continuousIntegration.html。
[Z]请参阅JoelSpolsky的文章《PainlessBugTracking》，
http://www.joelonsoftware.com/articles/fog0000000029.html。
[8]如果你需要如此的严谨，有两本书值得一读：TomDeMarco所著
的《Controlling Software Projects》（PrenticeHall出版，1986），以
及GeraldWeinberg所著的《QualitySofrwareManagement》（Dorset
House出版，1991）的第一卷，《SystemsThinking》。
[9]驱动测试开发是一种有用的方法，可叫捉早处理工程质量问
题，同时又可以避免新生成Bug出现大的波动。请参阅
http://en.wikipedia.org/wiki/Test_driven_development。
巷，《SystemsThinking》第250页。
[1l]请参阅KentBeck所著的《ExtremeProgrammingExplained》
（Addison-Wesley出版，1999）第69页。
[12]当然，软件编得越好，就容易预测到变动所带来的影响。
787
---
## Page 789
[L3]请参阅http://www.scottberkun.com/essays/，其中有一些关于做好
事后分析的建议。
[L4]项目领导者对发生的事情付出了很多情感并且力争能保持客
观。然而，外部的专家就没有感情投入或者个人的经历，因此，也
就更容易成功地对项目进行查看、了解、报告和建议。
第16章政治与权力
每次当你试着安排人们去做一些事情时，无论是举行聚会还是成立
公司，每一个参与的人都有不同的态度、愿望和技能。也就是说，
不管带领项目的领导多么有关赋，还是无法满足每个人得到他们想
要的每件事。因此，积极而充满野心的人有一种自然的本能，试着
影响有权使之发生的人，去获得他们想要的东西。我尽我所能用一
段最简单的文字说明来解释，政治为什么会存在：政治就是群体互
动时人性的副产品，而在群体互动时，我们会经历各种政治情势的