title:Measurement and Estimation of Network QoS Among Peer Xbox 360 Game
Players
author:Youngki Lee and
Sharad Agarwal and
Chris Butcher and
Jitu Padhye
Measurement and Estimation of Network QoS Among
Peer Xbox 360 Game Players
Youngki Lee1, Sharad Agarwal2, Chris Butcher3, and Jitu Padhye2
1 KAIST
2 Microsoft Research
3 Bungie Studios
1 Introduction
The research community has proposed several techniques for estimating the quality
of network paths in terms of delay and capacity. However, few techniques have been
studied in the context of large deployed applications. Network gaming is an application
that is extremely sensitive to network path quality [1,2,3]. Yet, the quality of network
paths among players of large, wide-area games and techniques for estimating it have
not received much attention from the research community.
Network games broadly fall into two categories. In some games (e.g. MMORPGs,
web-based casual games, Quake) with a client-server architecture, players communicate
with a large, well-provisioned, and dedicated game server [4,5]. In some games with a
peer-to-peer (P2P) architecture, players communicate with each other directly or via
a dynamically chosen peer at some player’s house. In Ghost Recon, Halo series, and
others for the Xbox and Xbox 360 consoles, a server assists players in discovering
other peers to host and play with.
Accurate and scalable estimation of the network path quality (NPQ) between peer
game players is especially critical for games with a P2P architecture. These players
need to have good network connectivity to each other, so accurate NPQ data is essen-
tial for “matchmaking” - i.e. to determine which players should play with each other.
Furthermore, NPQ estimation needs to be done in a scalable manner. If the number of
peers is large, it may not be not feasible to probe all of them.
Prior research on P2P games has used data from only a small number of players [6].
We study a much larger data set, from Halo 3 : a popular Xbox 360 game. We cover
5.6 million unique IP addresses that played 39.8 million game sessions in 50 days.
Peers in each game session gather NPQ data and report it to the central Xbox server for
matchmaking purposes.
This paper makes the following contributions:
– We present data from a large P2P gaming application. The population is several or-
ders of magnitude larger, and far more geographically diverse than any previously
reported study. Given the number and geographical diversity of players, we con-
sider this to also be a large-scale study of path quality over the wide-area Internet.
– We study temporal and geographical correlations in the NPQ data, and propose
three different predictors that can provide a rough estimate of NPQ between a pair
of players, without requiring any probing. There can be millions of game players
M. Claypool and S. Uhlig (Eds.): PAM 2008, LNCS 4979, pp. 41–50, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
42
Y. Lee et al.
on-line at any time, and any techniques that can avoid having to perform network
probes between all of them can not only reduce network overhead but also reduce
the amount of time players have to wait before starting a game over the Internet.
2 Background
The Microsoft Xbox 360 game console supports on-line game play with the Xbox Live
subscription service. The Halo series of First Person Shooter (FPS) games has sold
over 15 million copies worldwide. We focus on the latest edition, Halo 3. Each Halo 3
Internet game session can include up to 16 players. One console in each game session is
selected to be the game host or server. All game communication between other players
is relayed through this host console. The Xbox Live server provides accounting and
matchmaking services. Therefore, the NPQ between consoles and the Xbox Live server
is less important to the overall gaming experience than the NPQ between the consoles
themselves. An “excellent” Halo 3 experience has under 50ms of latency and 50Kbps
to 70Kbps of bandwidth between each client console and the host console. Note that
the host console may consume up to 1Mbps ((16-1)*70Kbps) of bandwidth. A “good”
experience can be achieved with 150ms latency and 30Kbps of bandwidth. Hence, it is
important to group consoles so that they each have good NPQ to the host console. This
is critical in this architecture because the host is a fellow player’s console, typically on
a consumer broadband connection, and not a well provisioned, dedicated server.
The Xbox Live server helps with “matchmaking” - setting up such groups, of up to
16 players, from among the hundreds of thousands on-line at any time. A player who
starts an Internet game session will sign on to the Xbox Live service and run Halo 3
on her console. She will select Internet game play and can specify several criteria for
the session, such as the type of game (e.g. free for all or team objective). With some
probability, this console will become a peer game host, instead of a game client. This
probability depends on the chosen type of game. If the console is a game host, it will
wait for other consoles to discover it, probe their NPQ to it, and join the game.
If it is a game client, Xbox Live will send it IP addresses for the other consoles on
the Internet that are hosting games of the speciﬁed type. This console will send and
receive several packet pairs with each IP address. The Xbox 360 networking stack im-
plements the standard packet pair estimation technique [7]. Packet pairs are performed
serially and do not overlap with each other. The console will then have an estimate of
the round-trip latency (RTT), and the upstream and downstream network capacity with
each candidate game host. While being very lightweight, packet pair measures bottle-
neck link capacity but not available bandwidth. These values are logged by the Xbox
Live service. The user is shown those host consoles that it has the best NPQ to. For
conciseness, we leave out several details such as NAT traversal.
Little is known about the population of on-line P2P game players. Their geographic
diversity, diurnal behavior, typical network delay and capacity are useful parameters to
network models of game systems for future research. This information can help build
estimators of NPQ between any two game consoles on the Internet. Even merely iden-
tifying the pairs of consoles with extremely poor NPQ can signiﬁcantly reduce the total
number of probes, thereby reducing network overhead and user wait time.
Measurement and Estimation of Network QoS Among Peer Xbox 360 Game Players
43
3 Data and Methodology
Xbox Live stores information about every Internet game session for Halo 3. In a typical
week ending on 29 January 2008, we ﬁnd that 72.5% of Internet game sessions required
matchmaking; when weighted to account for players per game, it is 83.5%. By a “ses-
sion”, we mean an attempt to search for an Internet game - the user may have eventually
joined a game or decided not to. The log has the UTC time and the public IP address of
the console searching for a game. This console may have probed several other consoles
that were hosting games of the requested type - for each probe to a candidate host con-
sole, we have the host IP address, median round trip time (RTT), and average capacities
upstream to host and downstream from host. We use the term “probe” to mean 4 packet
pair tests from the client console to a host console and 4 in the reverse direction. We
use “player”, “console” and “IP address” interchangeably.
Table 1. Data sets
End
Start
Halo 3 Phase
Internal alpha 11/30/2006 01/23/2007
Internal beta 05/08/2007 05/21/2007
05/22/2007 06/11/2007
Public beta
Release
11/14/2007 01/03/2008
Distinct IPs Matchmaking games Hosts probed
207,595
33,338,060
38,453,035
126,085,887
314,606
20,747,695
23,182,323
39,803,350
4,025
732,487
903,782
5,658,951
Fig. 1. Geographic distribution of players
Fig. 2. Game sessions per hour
Table 1 lists our data sets. For conciseness, we focus on the “Release” data set for
Halo 3. Due to the extremely large number of game plays, we limit the data set in two
ways - we consider a 50 day period and we only consider a randomly selected 20% of
the matchmaking game sessions. The resulting data set covers over 126 million probes
between over 5.6 million IP addresses. For geographic analysis, we use the commercial
MaxMind GeoIP City Database from June 2007. It was able to provide the latitude and
longitude for over 98% of these IP addresses.
4 Player Population Characterization
In this section, we analyze the basic characteristics of the player population, such as the
geographic distribution of the players, when and how often they play the game. We also
look at the overall NPQ data such as distributions of RTT and capacity.
44
Y. Lee et al.
)
s
P
I
(
.
q
e
r
f
e
v
i
t
a
u
m
u
c
l
1
0.8
0.6
0.4
0.2
0
)
s
P
I
(
.
q
e
r
f
e
v
i
t
a
u
m
u
c
l
1
0.8
0.6
0.4
0.2
0
0
6
-
0
5
-
0
4
-
0
3
-
0
2
-
0 0
1
-
0
1
0
2
0
3
0
4
0
5
0
6
0
7
0
8
-200
-150
-100
-50
0
50
100
150
200
latitude
longitude
Fig. 3. Latitude and longitude density of players
1048576
262144
65536
16384
4096
1024
256
64
16
4
1
s
e
s
s
e
r
d
d
a
P
I
f
o
#
1
)
s
n
o
i
s
s
e
s
(
.
q
e
r
f
e
v
i
t
a
u
m
u
c
l
0.1
1
10
# of probes
100
1000
1
8
64
512
4096
# of sessions
Fig. 4. Game sessions per IP address (log-log)
Fig. 5. Probes per session (log-log)
Figure 1 shows the geographic locations of all 5,658,951 unique IP addresses, which
correspond to 68,834 unique latitude and longitude coordinates. To examine the density
of players in each region, we present Figure 3. Almost 85% of players are in USA -
longitudes -130 to -60, and latitudes 30 to 50. Roughly 15% are in western Europe.
Since players are spread across this large geographic region, it is quite possible for
consoles that are “too far apart” to probe each other. This partly motivates us to consider
estimation techniques that will identify such cases before probing.
To see when games were played, Figure 2 plots the number of game sessions in
each hour over a representative week. We notice a very strong diurnal pattern with
peaks in the evenings in North American time zones - this is not unexpected given the
high density of players in USA. We examine game playing behavior in more detail in
Figure 4. The number of games attempted from each IP address almost follows a Zipf
distribution. In the far right of the graph, one IP address attempted 5438 sessions - over
a 50 day period, this is a huge number of games for any 1 individual! We suspect that
the IP addresses in this area of the graph are for proxies with many players behind them.
Figure 5 shows a CDF of the number of consoles hosting a game that were probed in
each session. While there are many sessions that probed few consoles, there are some
that probed as many as 400 consoles. This number depends on how many game hosts
the Xbox Live server gives a console requesting a game, which in turn depends on how
many consoles are available at the time and the type of game requested.
Now we consider overall NPQ data. Figure 6 shows the CDF of RTT across all
probes. Over 25% of the measurements are above 150ms, which is an upper bound
for a responsive user experience in typical FPS games [1]. We want to pre-determine
in which cases the RTT will be above 150ms and skip probing altogether, thereby
Measurement and Estimation of Network QoS Among Peer Xbox 360 Game Players
45
)
s
e
b
o
r
p
(
.
q
e
r
f
e
v
i
t
a
u
m
u
c
l
1
0.1
0.01
)
0
0
0
,
0
0
0
,
1
x
(
y
c
n
e
u
q
e
r
f
6
5
4
3
2
1
0
192 Kbps
10Mbps
1.6Mbps
5.8 Mbps
1
10
100
delay (ms)
1000
10000
0
2000
4000
6000
capacity (kbps)
8000
10000
Fig. 6. RTT delay reported by probes (log-log)
Fig. 7. Downstream capacity reported by probes
potentially reducing the total number of probes by 25%. Figure 7 shows the distribution
of measured capacity across all probes, in the direction from the console hosting a game
to the console requesting to join it. The graph for upstream capacity is similar. We see