**译者：知道创宇404实验室翻译组**  
**原文链接：**

## 前言

自2020年6月以来，新一波URSA木马程序（ESET称之为Mispadu恶意软件）已影响到多个国家的用户，包括玻利维亚、智利、墨西哥、阿根廷、厄瓜多尔、秘鲁、哥伦比亚、巴拉圭、哥斯达黎加、巴西、西班牙、意大利和葡萄牙。该恶意软件通过在受害者的设备上安装后，从浏览器和其他流行软件（如FTP客户端和电子邮件服务）中窃取密码，并执行银行浏览器覆盖攻击以诱使受害者输入其银行凭证。

下表1显示了2020年6月至9月中旬全球感染数量的地理分布。

| 表1: URSA木马——2020年6月至9月中旬按国家分列的感染情况 |
| --- |
| 从一些C2服务器获得的数据可以看出，从2020年6月到9月中旬，共有3,379名用户受到该威胁的影响。墨西哥是受感染人数最多的国家，共有1,977例，其次是西班牙631例，葡萄牙514例，智利331例。 |

实际感染数量可能远高于上述数据，因为这些指标仅基于文章末尾部分C2服务器中的数据。

### URSA木马如何传播

URSA恶意软件是一种相对较新的木马程序，旨在窃取受害者机器上的凭证，并在受害者访问其家庭银行门户网站时创建银行覆盖窗口。该恶意软件通过社会工程学模式传播，即网络钓鱼或欺诈活动。在葡萄牙，这种威胁已经广泛传播，并冒充了四个受欢迎的组织：沃达丰、EDP（葡萄牙能源公司）、MEO（Serviços de Comunicações e Multimédia, S.A.）以及Polícia Judiciária（葡萄牙负责刑事调查的警察组织之一）。

通常，攻击者通过发送带有过期发票的电子邮件来诱使受害者下载恶意文件（通常是互联网下载的.zip文件）。这些电子邮件通常在每个月底和月初之间发送。

图1：URSA模仿沃达丰、EDP和Polícia Judiciária的电子邮件模板-葡萄牙。

### URSA加载细节分析

初步观察发现，通过电子邮件诈骗犯罪分子发送的恶意URL下载的文件是一个包含MSI（微软安装程序）文件的zip文件。通过分析MSI文件，可以发现内部还有一个名为`px3q8x.vbs`的VBScript文件，该文件负责加载和执行下一阶段。值得注意的是，这个文件具有较低的检测率。

> 威胁名称：554S2000A2S144D1S4111D.zip  
> MD5: 2d2f3500836ed60303103bafac6357a3  
> 威胁名称：554S2000A2S144D1S4111D.msi  
> MD5: 3be539aa8d421d09cef27723a98d2d83  
> 威胁名称：px3q8x.vbs (初始有效载荷 – VBScript)  
> MD5: a4f066196b1009c42c1dea74f857180d

图2: MSI文件中包含另一个文件–名为px3q8x.vbs的VBScript–Ursa木马VBScript加载程序。

本文展示了URSA木马有两个加载程序。首先是VBScript加载程序，然后是几轮模糊处理和兔子洞。最终，VBScript负责启动和删除磁盘上的文件，并执行AutoIt加载程序/注入器。该二进制文件通过进程注入技术将一些DLL注入内存，包括与银行覆盖窗口相关的Delphi二进制文件，以及与C2服务器建立所有通信的DLL。

图3: URSA木马/Mispadu 2020-高级图表。

### VBScript

提取出的VBScript加载程序非常混乱，如图4所示。

图4: URSA VBScript加载程序-代码模糊化以绕过AV并使其难以分析。

经过几轮处理后，我们得到了一个更可读的版本。注意，一些与无用代码相关的部分已被删除。具体来说，VBScript分为两部分。第一部分是Installer对象的方法，该方法返回一个新的记录对象，其中包含请求的字段数（见下面突出显示的代码）。

图5: URSA加载程序VBScript分析-第一部分-记录对象部分。

第二部分是下一个有效载荷编码的代码。执行该有效载荷后，它负责解码另一个有效载荷（图5–步骤5中的第二个有效载荷）。

图6: URSA加载程序VBScript分析-第二部分-有效载荷2。

这个新的有效载荷（在去除代码并重命名一些函数和变量之后）是另一个VBScript，最后一个有效载荷从C2服务器请求下一阶段。

图7: 分析URSA加载程序VBScript—第三部分—有效载荷3—步骤8。

图8: 从C2下载下一阶段恶意软件时的网络流量。

最终，我们获得了C2 IP地址（191.235.99.13）和本阶段来自C2服务器的最终有效载荷。

### URSA木马程序–VBscript加载程序/删除程序（最终的VBScript）

> 威胁名称：最终有效载荷（VBScript）  
> MD5: bda287c97d9373052f347ac0ccedfdf8

经过几次兔子洞后，我们终于从C2服务器完全除掉了URSA VBScript加载程序。只需对恶意软件配置进行加密，C2服务器和特洛伊木马客户端之间的所有通信都使用相同的算法执行，即使是在恶意软件的最后阶段——一个负责创建银行覆盖窗口、收集受害者机器上的凭证并将所有数据发送到C2在线的Delphi PE文件。

图9: URSA最终VBScript加载程序及其配置。

从图9中，我们可以观察到以下内容：

- 来自C2服务器的一些路径（SRoleX和sRoleXW2）。
- 从C2下载二进制文件到（cRaiz1）的路径。
- 一些用于构建最终阶段的部分（一个AutoIT二进制文件，负责将恶意软件最终阶段注入并执行到内存中，即所提到的Delphi文件）。

如前所述，恶意软件和C2服务器之间的所有通信都是加密的。为了解密恶意软件通信，可以使用GitHub上的脚本。

通过执行脚本，可以解密恶意软件配置，如下所示。

图10: Ursa木马配置解密。

变量“#wp#”是在恶意软件执行期间发送受害者信息的最终C2端点。同时，还发现了几种寄主重复。这是一个潜在的C2，当一个新的受害者受到影响时会通知攻击者。尽管如此，下一阶段的恶意软件是从IP地址（191.235.99.13）下载的，如上所述。

在VBScript代码分析过程中，发现了一些函数：

```vb
Function GetWmiPropertyValue(strNameSpace, strClassName, strPropertyName)
Function crypt(cText, cCod) 
Function decrypt(cText, cCod)
Function UnZip(ZipFile, ExtractTo)
Function StringGetURL(sUrl)
Function BinaryGetURL(strURL)
Function SaveBinaryData(arrByteArray, strFileName)
Sub writeBinary(bstr, path)
Function makeArray(n) ' 小工具函数
Function TrocaEntry(strFileName1, strFileName, sSenhaVelha, sSenhaNova)
Function cr1pt(x, c)
```

一般来说，下一阶段的恶意软件分几个部分从C2服务器检索，然后动态构建。这些文件在恶意软件执行期间被加密和解密。接下来，在此过程中生成一个最终的PE文件。下面介绍一些有趣的函数。值得注意的是，用于下载文件的用户代理是：“strusagentstring=“binary-getter/1.0””。

图11: VBScript文件的一些部分和函数。

在受害者启动下一阶段后，对其进行初步验证，然后检索操作系统（OS）版本，如果是虚拟环境，则脚本将终止其执行。按照这一逻辑，最终的有效载荷不会从C2加载和下载，这使得它至少不会被防病毒引擎标记。

图12: URSA加载程序上发现的反VM技术。

接下来，脚本验证受害者设备是否位于攻击者定义的目标位置，即：

- 西班牙 - 西班牙（传统）1034
- 葡萄牙 - 巴西 - 1046
- 西班牙 - 墨西哥 - 2058
- 葡萄牙 - 葡萄牙 - 2070
- 西班牙 - 58378, 3082

图13: 受URSA恶意软件影响的目标位置。

如果受害者的计算机以不同于硬编码的语言ID执行，或者计算机名等于“JOHN-PC”，则感染过程停止。将计算机名改为“JOHN-PC”是避免URSA感染的潜在杀手锏。

此时，下一阶段从C2服务器下载。这些文件存储在C:\Users\Public文件夹（tmp文件）中，然后移动到在C:\驱动器上创建的随机文件夹中。此文件夹的名称基于计算机名。

图14: 从C2服务器下载下一阶段的二进制文件（AutoIT–injector/loader）和URSA木马（一个注入内存的Delphi二进制文件）。

在此过程中，还下载了另外两个DLL。一个是SSL的DLL，另一个是SQLite3的DLL。它们可能是恶意软件中打包的依赖项，如果目标计算机上没有安装这些DLL/资源，则可以避免失败。我们将观察到最终的二进制文件——ursadelphi——里面有两个工具并打包了。这些工具是在凭证获取过程中使用的合法软件。

在这个复杂的过程之后，最后的文件被移到C:\“artibrary_name”文件夹中。

图15: 最终阶段被移动到在C:\（本例中为o0t）上创建的随机文件夹中。

接下来，执行另一个加载器/注入器，AutoIT文件。它负责将最终有效载荷（包含木马代码和恶意进程的Delphi文件）加载到内存中。

图16: 执行最终有效载荷。

### Ursa木马程序–AutoIT加载器/注入器

> 威胁名称：n11ai.exe  
> MD5: c56b5f0201a3b3de53e561fe76912bfd  
> 威胁名称：n111.11n  
> MD5: 7396051fd6575180166d66ddf0a9295b  
> 威胁名称：winx86.dll  
> MD5: 87f9e5a6318ac1ec5ee05aa94a919d7a  
> 威胁名称：libeay32.dll  
> MD5: f3e6c0d52bab27289db2a70e4aab628c  
> 威胁名称：n11  
> MD5: 71fdf07084a741b553b97b0d0815fa0e

AutoIT二进制文件受保护，可以使用GitHub上的以下脚本进行反编译。该脚本是myAut2Exe的一个构建版本，它是在2.12版本的基础上修改而来的。

图17: AutoIT反编译代码（n11ai.exe）。

如前所述，为了执行进程注入技术，从kernel32.dll导入了一些调用。

```vb
LOCAL $KERNELHANDLE = DLLCall($_MDKERNEL32DLL, "ptr", "LoadLibrary", "str", "kernel32.dll")
$_MFHOOKBAK = DllStructCreate("ubyte[7]")
DllCall($_MDKERNEL32DLL, "int", "WriteProcessMemory", "ptr", -1, "ptr", DllStructGetPtr($_MFHOOKBAK), "ptr", $_MFHOOKPTR, "uint", 7, "uint*", 0)
DllCall($_MDKERNEL32DLL, "int", "WriteProcessMemory", "ptr", -1, "ptr", $_MFHOOKPTR, "byte*", 184, "uint", 1, "uint*", 0)
DllCall($_MDKERNEL32DLL, "int", "WriteProcessMemory", "ptr", -1, "ptr", $_MFHOOKPTR + 5, "ushort*", 57599, "uint", 2, "uint*", 0)
```

具体来说，文件n111.11n是导入的DLL之一–Delphi PE文件。根据传递的参数注入所有DLL文件。这些命令在图17中VBScript加载程序的末尾执行。

```bash
"C:\o0t\n11ai.exe" n11 @
"C:\o0t\n11ai.exe.exe" n11 ##1
```