else discard p
COMPARE(pkt p )
α = get(p.V )
if (α is nil )
put(p.V, p.current )
forward p
else discard p
put(p.V, p.current )
forward p
else if (α  p.current )
Figure 3: Example ESP instructions
in the Internet during an interval of τ seconds reached one
billion, the probability of a collision involving tags anywhere
in the Internet would still be only 3%. In practice, collisions
only occur when diﬀerent computations use the same tag at
the same state store —along the same path, for example.
To summarize:
the short lifetime makes it possible to
place a strict bound on the space-time resources used by any
packet, thereby allowing routers to handle worst-case loads
and maintain line-speed processing. The use of randomly-
chosen tags to identify state makes it possible to completely
decentralize naming, and to create and use a binding in one
step.
2.4 ESP Instructions
Each ESP-capable node in the network supports a prede-
ﬁned set of instructions that can be invoked by ESP pack-
ets (described in the next section) to operate on the ESS.
ESP instructions are analogous to the instruction set of a
general-purpose computer: each involves a small number of
operands and takes a ﬁxed amount of time to complete. Be-
cause each ESP packet invokes a single ESP instruction, the
per-packet processing time is known and bounded. The key
diﬀerences with traditional machine instruction sets are that
(1) sequencing must be achieved by arranging for a sequence
of instruction-invoking packets to arrive at the router (i.e.,
no program counter), and (2) operations can only retrieve
values placed in the store within the last τ seconds. Nev-
ertheless, interesting computations can be constructed by
transmitting sequences of packets through the network.
Each ESP instruction takes zero or more operands, each
of which may be:
• a value stored in the local ephemeral state store (typ-
ically identiﬁed by a tag carried in the ESP packet);
• an “immediate” value carried directly in the packet;
• a well-known parameter value (e.g. the value of a MIB
variable).
ESP instructions aﬀect only the local state where they are
executed; they either run to completion or abort (resulting
in an error indication). Each instruction executes atomically
with respect to the ephemeral state store; upon completion,
the initiating packet is either (silently) dropped or forwarded
toward its original destination.
We envision routers supporting a standard set of a per-
haps a few dozen ESP instructions. Here we describe two
instructions needed for examples in the next section; others
will be introduced as needed later in the paper.
The count instruction takes two operands: a tag C iden-
tifying a “counter” value stored in the ESS, and an imme-
diate value, thresh. As the name implies, the count in-
struction can be used to count packets passing through the
router. Once the count C reaches the value thresh, subse-
quent count packets will increment the counter but will not
be forwarded. This is useful, for example, when counting
the number of neighbors sending packets through a router.
count is also useful as a “setup” instruction for subsequent
instructions that collect information.
The compare instruction takes three operands: a tag V
identifying the value of interest in the ESS, an immediate
value current which is the user-supplied value carried by the
packet, and an immediate value  that speciﬁes a com-
parison operator to apply (e.g.,  holds
between the value carried in the packet and the value in the
ESS. If so, the value from the packet replaces the value in
the ESS and the packet is forwarded. The compare instruc-
tion is particularly useful in situations where only packets
containing the highest or lowest value seen by the node so
far should be allowed to continue on. Pseudocode for both
instructions is shown in Figure 3.
2.5 ESP Packets
The third component of the ESP service, which coordi-
nates and ties together the functionality provided by the
ﬁrst two components, is the ephemeral state packet protocol.
As ESP packets travel through the network toward their des-
tination, they are recognized as such by ESP-capable routers
and processed hop by hop. (If necessary, ESP datagrams can
carry a Router Alert option [11] to indicate that they should
be examined by routers for special processing.) Non-ESP-
capable routers will simply forward ESP packets as usual.
Two forms of ESP packets are supported: dedicated and
piggybacked. A dedicated packet consists of an IP datagram
whose payload contains the identiﬁer of the desired ESP
instruction along with its packet-borne operands. The IP
header of the datagram carries a protocol number indicating
the ESP protocol. A piggybacked ESP packet carries the
ESP instruction in an IP option (IPv4) or extension header
(IPv6). Piggybacked ESP packets initiate instructions as a
side eﬀect of carrying the normal data through the network.
They oﬀer the advantage of not adding to the bandwidth
requirements of the application; their disadvantage is that
the IPv4 option mechanism limits the size of the instructions
that can be carried.
ESP Instruction
c
o
L
r
r
E
B
R
n
e
L
D
C
I
Op
Code
..Operands..
C
R
C
Dedicated Packet
IP Header
(Proto=PKT_ESP)
Piggyback Packet
IP Header
(Proto=UDP)
:
n
o
i
t
p
O
r
e
t
u
o
R
t
r
e
A
l
ESP
Instruction
r
e
t
u
o
R
:
n
o
i
t
p
O
t
r
e
A
l
:
n
o
i
t
p
O
P
S
E
r
t
s
n
I
Trans−
port
Hdr
Pay−
load
Figure 4: ESP packet formats
Each ESP instruction contains control information, an op-
code, and operands. The instruction format and the header
context for both types of packets are shown in Figure 4.
The 3-bit Loc ﬁeld speciﬁes whether execution occurs on
the input port card, the output port card, in the centralized
location, or any combination of these three locations (in-
cluding no processing at all). The Err ﬁeld is set when an
268error occurs while processing an ESP packet (e.g., failure to
create a binding because the ESS was full). Packets with Err
are forwarded on to the destination without further process-
ing, allowing the end systems to discover that the operation
failed. The RB is a “reﬂector” bit. ESP routers forward
packets with the reﬂector bit set without processing them;
when the packet reaches its destination, the ESP implemen-
tation swaps the source and destination IP addresses, unsets
the reﬂector bit, and sends the packet back to the original
source. We have found this capability useful for obtaining
information along the path from a network router to an end-
system. The Computation ID (CID) is a demultiplexing key:
diﬀerent packets that need to access the same state must
have the same CID. ESP implementations are required to
ensure that instructions bearing the same CID are executed
in the same ESS context. (This enables the use of multiple,
parallel ESS’s on a single port card.) The Opcode identiﬁes
the ESP instruction to be performed and the Operands ﬁeld
carries the opcode-speciﬁc operands.
Note that the only parts of an ESP packet that are mod-
iﬁed by processing en route are the instruction operands
and the control bits (Loc, Err, etc). In particular, the IP
header is not changed; thus packets cannot be diverted from
their original path. Although the ability to “redirect” ESP
packets as a result of processing (e.g. by modifying the des-
tination address based on state) would be useful in some
circumstances, it opens up opportunities for abuse, and also
violates our general separation of concerns. Instead, a redi-
rection service could be implemented as a separate, but com-
plementary, building block service [27]. The Internet Indi-
rection Infrastructure [25] may be a good match for this
purpose.
2.6 Application Programming Interface
Applications running on end systems access the ESP ser-
vice (i.e., initiate computations and collect results) via an
API that allows information to be placed in outgoing ESP
packets and extracted from incoming ESP packets. To send
or receive ESP packets, the application associates an ESP
communication endpoint (e.g., a socket) with a Computa-
tion ID, which identiﬁes the computation in which the end-
point is participating. Thereafter the same CID is placed in
all outgoing ESP headers, and incoming ESP headers con-
taining CID are delivered to that socket.
In addition to
the Computation ID, senders must specify the destination
to which the ESP packet should be sent. The destination
address can be bound to the endpoint or speciﬁed on a per-
packet basis.
To cause ESP instructions to be piggybacked on the pack-
ets of an existing ﬂow, the application simply invokes an API
call (e.g., socket option) that arranges for the ESP option
to be added. The destination does not need to be speciﬁed
since it is already known.
The API may also provide general methods to construct
(and parse) ESP packets given opcodes and operands (tags
and values). In case an ESP error arises during transmission,
the API must also inform the application of the speciﬁc error
that occurred so that it can take corrective measures.
3. APPLICATIONS OF ESP
proaches. Speciﬁcally, we consider the problems of control-
ling packet ﬂow, simple computations on end system data,
and discovering topology information. Because of space lim-
itations our examples are conﬁned to these classes, but we
do expect that ESP will prove useful to a wide range of end-
to-end services and applications.
In the descriptions that
follow, loss-free operation is assumed; Section 4.3 discusses
error control.
3.1 Controlling Packet Flow
One of the simplest functions the network can perform
under application control is simply to not forward packets.
It turns out that this capability can be useful in a variety
of contexts. For example, the scalability of many multicast
applications—especially those requiring some form of feed-
back or reliable delivery—is limited by the twin problems of
implosion and wasted bandwidth (arising from feedback to
the source and data retransmitted to group members that
don’t need it). A number of techniques, both network- and
end-system-based, have been proposed to regulate packet
ﬂow in an attempt to avoid these problems and scale to
larger group sizes. Examples include hierarchical aggrega-
tion [16], feedback rate control in RTCP [20], randomized
delays for multicast NACK suppression [6], and repair sub-
casting in reliable multicast protocols [5, 14].
The basic idea common to all of these is elimination of un-
necessary packets as they pass key locations in the network.
This can be accomplished in ESP as follows:
1. Create ephemeral state at router interfaces where packet-
pass/drop decisions will be made.
2. Send packets carrying an ESP instruction that makes
the pass/drop decision based on the ephemeral state
(or absence thereof), and possibly updates the state in
the process.
The following sections present two speciﬁc examples of the
use of this approach to solve real-world problems: feedback
thinning and PGM-like NACK suppression and subcasting.
3.1.1 Multicast Feedback Thinning
Group applications often require feedback to be sent from
group members to a common destination such as a multicast
source. For example, the RTP/RTCP protocol [20] deﬁnes
feedback messages (“receiver reports”) that carry informa-
tion such as the number of packets lost. The source then
uses the information to adjust its transmission rate, encod-
ing scheme, etc. The challenge, as the group size grows, is
to avoid implosion while maintaining the timely nature of
the feedback.
Let the feedback information of interest be represented by
the generic parameter u. In many cases (including RTCP)
the source is only interested in the extreme values of the
feedback—e.g. the maximum value of u transmitted by any
group member. Using ESP, the danger of implosion can be
substantially reduced by recording the maximal (in whatever
ordering is relevant) value forwarded at any point, and only
passing packets carrying values that exceed that maximum.
Thus, packets are discarded as soon as it is determined that
they are not “interesting” to the destination.
To illustrate the utility of ESP, in this section we show
how it can be used to solve three general types of problems,
each of which is diﬃcult to solve using end-system-only ap-
Assume, for example, that we are interested in the max-
imum value of u at any group member. Periodically group
members transmit an ESP compare instruction to the source.
269(a)
S
(b)
S
(c)
S
data
transmission
dropped
(state present)
lost packets
NACK
packets
retransmitted data
dropped
(no state)
passed
(state present)
R0
R1
R2
R0
R1
R2
R0
R1
R2
Figure 5: NACK suppression and subcasting using ESP.
Each member includes its value of u as the immediate value
to the compare instruction, uses “<” as the compare op-
eration, and tu as the ESS tag (where the tag name tu is
discovered via some out-of-band mechanism). As packets
travel toward their destination, the compare instruction
updates the maximum value seen at each node. Packets
whose values are not larger than the current maximum are
discarded. The result is that the destination application re-
ceives a “thinned” sequence of packets, each containing a
larger value of u than the previous one. Assuming values
arrive at nodes in random order, the result is that the to-
tal number of packets arriving at the source is, on average,
exponentially smaller than without this ﬁltering capability.
3.1.2 Enhancing Reliable Multicast
As a more elaborate example of controlling packet ﬂow
with ESP, consider a reliable multicast enhancement ser-
vice with functionality similar to that provided by PGM, a
router-based protocol designed speciﬁcally to support reli-
able multicast [5].
Like PGM, the ESP-based service is based on negative
acknowledgements and subcast retransmissions. Multicast
receivers send a negative acknowledgement (NACK) to the
source, or a designated proxy, whenever they detect a loss;
the NACK contains the identiﬁer of the lost packet. Implo-
sion is avoided by discarding duplicate NACKs inside the
network. Upon receiving a NACK, the multicast source or
proxy re-multicasts the lost packet. To avoid wasting band-
width delivering retransmissions to all nodes, a form of sub-
cast is implemented by forwarding the retransmission only