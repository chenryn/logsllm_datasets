# Advanced SQL
## Summer 2017
### Torsten Grust
#### Universität Tübingen, Germany

---

### 1. Welcome

Welcome to this exploration of advanced aspects of SQL. Throughout this course, your current understanding of SQL will evolve (as mine did). The value of mastering the intricacies of SQL, both in terms of scientific insight and practical application, cannot be overstated.

SQL is a remarkably rich and versatile declarative database and programming language. Let's delve deep into its capabilities together!

**Stack Overflow Developer Survey (March 2017)**
- **Most Popular Technologies — Programming Languages**
  - [Link](https://stackoverflow.com/insights/survey/2017)

### Operating the Database System as a Simplified Table Storage Program

**Heap-Centric Operation of Database System:**

- Move tables (i.e., almost all columns/rows) from the database system (DBMS) storage into the programming language (PL) heap.
- Ensure the PL heap can hold all required row data (otherwise, try chunking or streaming data).
- Map rows to PL data structures and perform in-heap computation to obtain the result.

**Data- and Query-Centric Operation of Database System:**

- Express complex computations using advanced SQL constructs and send the query to the DBMS.
- Let the database system operate over high-volume data in its native format, supported by index structures.
- Fetch the typically few or even single result row(s) into the PL heap for lightweight post-processing if needed.

---

### 2. The Origins of SQL

**Developers:**
- Don Chamberlin
- Ray Boyce (✝1974)

**Development Timeline:**
- Development started in 1972 as SQUARE.
- From 1973, it was called SEQUEL (Structured English Query Language).
- In 1977, SEQUEL became SQL due to a trademark dispute. Both "S-Q-L" /ˌɛskjuːˈɛl/ and "sequel" /ˈsiːkwəl/ are acceptable pronunciations.
- First commercial implementations appeared in the late 1970s/early 1980s.
- ANSI/ISO standardization began in 1986.
- Since then, SQL has been under active development and remains the "Intergalactic Dataspeak." (Mike Stonebraker, inventor of Ingres, 1972, precursor of Postgres, PostgreSQL)

**SQL Standards:**

| Year | Name         | Alias  | Features                                          |
|------|--------------|--------|---------------------------------------------------|
| 1986 | SQL-86       | SQL-87 | First ANSI-standardized version                   |
| 1989 | SQL-89       |        | Integrity constraints                             |
| 1992 | SQL-92       | SQL2   | Major revision, ⚠ orthogonality                   |
| 1999 | SQL:1999     | SQL3   | ⚠ Recursive queries, PL/SQL, rows/arrays          |
| 2003 | SQL:2003     |        | XML support, window functions, sequences          |
| 2006 | SQL:2006     |        | XQuery support                                    |
| 2008 | SQL:2008     |        | TRUNCATE, MERGE, improved CASE/WHEN               |
| 2011 | SQL:2011     |        | Temporal data types/operations                    |
| 2016 | SQL:2016     |        | Row pattern matching, JSON support                |

SQL standards are multi-1000 page documents. Conformance levels have been defined to help DBMS implementors keep up.

- **IBM DB2:** Implements subsets of SQL-92 and SQL:2003.
- **PostgreSQL 9.x:** Implements most of core SQL:2011.

---

### 3. This Course

We will explore the wide variety of query and procedural constructs in SQL.

- **Key Questions:**
  - How much computation can we push into the DBMS and thus towards the data?
  - Where are the limits of expressiveness and pragmatics?

Enjoy the journey! We will discuss offbeat applications of SQL beyond the typical employees-departments and TPC-H examples.

**Torsten Grust's Background:**

- 1989-1994: Diploma in Computer Science, TU Clausthal
- 1994-1999: Promotion (PhD), U Konstanz
- 2000: Visiting Researcher, IBM (USA)
- 2000-2004: Habilitation, U Konstanz
- 2004-2005: Professor Database Systems, TU Clausthal
- 2005-2008: Professor Database Systems, TU München
- Since 2008: Professor Database Systems, U Tübingen

**Contact Information:**
- E-Mail: [PI:EMAIL]
- Twitter: @Teggy (Professor, likes database systems, programming languages, and LEGO (cid:977))
- WSI, Sand 13, Room B318

**Administrativa:**

- **Lecture and Tutorial Schedule:**
  - Tuesday, 10:15-11:45: Lecture, Sand 14, C215
  - Thursday, 14:15-15:45: Tutorial, Sand 1, A301
  - No lectures/tutorials on:
    - Thursday, April 20 (tutorials start on April 27)
    - Thursday, May 25
    - Tuesday, June 6
    - Thursday, June 8
    - Thursday, June 15

- **End-Term Exam:**
  - 90-minute written exam on July 25, 10:00-12:00 (Room A301).
  - You may bring a DIN A4 double-sided cheat sheet.
  - Passing earns you 6 ECTS.

- **Weekly Assignments:**
  - Distributed, collected, and graded via GitHub.
  - Score ≥ ⅔ of the overall assignment points to be admitted to the exam and earn bonus points.
  - Organized and run by Christian Duta:
    - E-Mail: [PI:EMAIL]
    - WSI, Sand 13, Room B315
  - Assignments and tutorials will start in the second week of the semester.

- **Material:**
  - Course Homepage: db.inf.uni-tuebingen.de/teaching/AdvancedSQLSS2017.html
  - Download slides (PDF): Developed during the semester; please report bugs.
  - Download additional SQL code.
  - Contact: Drop by our offices (Sand 13) or send an email for specific help or longer attention.
  - Regularly visit the page for updates ("assignment unsolvable as given", "no lecture on").

- **Course Content:**
  - Not based on a single textbook but on a variety of sources including scientific papers, textbook excerpts, blog and mailing list postings, Stack Exchange Q&As, SQL references/standards, experience, and best practices.
  - Many books on SQL Hacks, Quizzes, Puzzles, (Anti-)Patterns, Performance Tweaks, and Idioms. If we use such sources, we will name them.
  - Recommended resource: [http://dba.stackexchange.com/questions/tagged/sql](http://dba.stackexchange.com/questions/tagged/sql)

- **Get Your Hands Dirty: Install PostgreSQL!**
  - PostgreSQL will be the primary tool in this course: postgresql.org, version 9.6 assumed (9.x probably OK).
  - Implements an extensive SQL:2011 dialect, is extensible and open to inspection, and generally awesome.
  - Easy to install and use on macOS, Windows, and Linux.

---

### 4. SQL's Tabular Data Model

This course assumes prior knowledge of SQL's tabular data model and the language itself. For an introduction, see Database Systems 1.

- **Tables:**
  - All data in a SQL-based database instance is organized in tables.
  - Each table has a head (ordered left to right) and rows (unordered bag of rows).

  ```
  ┌─────┬─────┬─────┐
  │ A₁  │ A₂  │ A₃  │
  ├─────┼─────┼─────┤
  │ ... │ ... │ ... │
  │valᵢ₁│valᵢ₂│valᵢ₃│
  │ ... │ ... │ ... │
  │valⱼ₁│valⱼ₂│valⱼ₃│
  │ ... │ ... │ ... │
  └─────┴─────┴─────┘
  ```

- **Columns, Types, Cells, NULL:**
  - On table creation, each column is assigned a unique name and data type.
  - Cell values must match the column's data type.
  - Each data type features a unique NULL value, which a cell can take unless explicitly forbidden.

  ```
  ┌─────┬─────┬─────┐
  │ A₁  │ A₂  │ A₃  │
  ├─────┼─────┼─────┤
  │ ... │ ... │ ... │
  │valⱼ₁│valⱼ₂│ NULL│
  │ ... │ ... │ ... │
  └─────┴─────┴─────┘
  ```

- **First Normal Form (1NF):**
  - SQL tables are in 1NF: all column data types are atomic.
  - Modern/real-world SQL allows some relaxation of strict 1NF with row values, arrays, and types like JSON.

- **Keys: Value-Based Row Identification:**
  - A key is a subset of columns that uniquely identifies a row.
  - Convention: Key columns are marked with ╌╌╌ and are typically leftmost in the schema.

  ```
  ┌─────┬─────┬─────┐
  │ A₁  │ A₂  │ A₃  │
  ├╌╌╌╌╌┼╌╌╌╌╌┼─────┤
  │valᵢ₁│valᵢ₂│valᵢ₃│
  │ ... │ ... │ ... │
  │valⱼ₁│valⱼ₂│valⱼ₃│
  └─────┴─────┴─────┘
  ```

- **Foreign Keys: Identifying Rows in Other Tables:**
  - A foreign key in one table references a key in another table.
  - Ensures referential integrity: no "dangling pointers."

  ```
  T 8─9─: S
  ┌─────┬─────┬─────┐ ┌─────┬─────┐
  │ A₁  │ A₂  │ A₃  │ │ B₁  │ B₂  │
  ├─────┼─────┼─────┤ ├╌╌╌╌╌┼─────┤
  │ tⱼ₁ │ tⱼ₂ │ tⱼ₃ │ │ ... │ ... │
  │ ... │ ... │ ... │ │ sₖ₁ │ sₖ₂ │
  │ tᵢ₁ │ tᵢ₂ │ tᵢ₃ │ │ ... │ ... │
  └─────┴─────┴─────┘ └─────┴─────┘
  ```

  - If a foreign key T(A₃)→S(B₁) is declared, for any value tⱼ₃, a matching value sₖ₁ must exist. If row sₖ₁ is deleted, compensation is needed.
  - {A₃} is not necessarily a key in T (tⱼ₃ = tᵢ₃ is allowed).

---

We hope you find this course informative and engaging. Happy learning!