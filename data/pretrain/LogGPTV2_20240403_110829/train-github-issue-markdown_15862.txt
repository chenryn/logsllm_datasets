Certainly! To add Leaflet functionality for operating custom tile maps within a Flutter application that currently uses `google_maps_flutter`, you would need to integrate the `flutter_map` package, which is a Flutter implementation of Leaflet. Hereâ€™s a step-by-step guide to help you achieve this:

1. **Add Dependencies:**
   Add the `flutter_map` and `latlong2` dependencies to your `pubspec.yaml` file:
   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     google_maps_flutter: ^2.0.6
     flutter_map: ^0.14.0
     latlong2: ^0.8.0
   ```

2. **Import the Packages:**
   Import the necessary packages in your Dart file:
   ```dart
   import 'package:flutter/material.dart';
   import 'package:google_maps_flutter/google_maps_flutter.dart';
   import 'package:flutter_map/flutter_map.dart';
   import 'package:latlong2/latlong.dart';
   ```

3. **Create a Custom Tile Layer:**
   Define a custom tile layer using `TileLayerOptions`:
   ```dart
   final tileLayer = TileLayerOptions(
     urlTemplate: "https://{s}.yourtileserver.com/{z}/{x}/{y}.png",
     subdomains: ['a', 'b', 'c'],
     tileSize: 256,
   );
   ```

4. **Integrate Flutter Map:**
   Replace or complement the `GoogleMap` widget with the `FlutterMap` widget:
   ```dart
   class MapScreen extends StatelessWidget {
     @override
     Widget build(BuildContext context) {
       return Scaffold(
         appBar: AppBar(
           title: Text('Custom Tile Map'),
         ),
         body: FlutterMap(
           options: MapOptions(
             center: LatLng(37.7749, -122.4194), // San Francisco
             zoom: 13.0,
           ),
           layers: [
             TileLayerOptions(
               urlTemplate: "https://{s}.yourtileserver.com/{z}/{x}/{y}.png",
               subdomains: ['a', 'b', 'c'],
               tileSize: 256,
             ),
             MarkerLayerOptions(
               markers: [
                 Marker(
                   width: 80.0,
                   height: 80.0,
                   point: LatLng(37.7749, -122.4194),
                   builder: (ctx) => Container(
                     child: Icon(Icons.location_on, color: Colors.red, size: 40.0),
                   ),
                 ),
               ],
             ),
           ],
         ),
       );
     }
   }
   ```

5. **Run Your Application:**
   Make sure to run `flutter pub get` to fetch the new dependencies, and then run your application to see the custom tile map in action.

By following these steps, you can integrate Leaflet-like functionality into your Flutter application, allowing you to use custom tile maps alongside or instead of Google Maps.