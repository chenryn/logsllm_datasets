### Focus on Separating a Single Bare-Metal System into Compartments

This section discusses the use of a Memory Protection Unit (MPU) to separate a single bare-metal system into compartments and addresses the specific issues arising from MPU limitations. 

- **Privtrans [9]**: This approach uses static analysis to partition an application into privileged and unprivileged processes, with the operating system (OS) enforcing the separation.
- **Glamdring [36]**: It employs annotations and data and control-flow analysis to partition an application into sensitive and non-sensitive parts, executing the sensitive part in an Intel SGX [13] enclave.
- **Robinov et al. [44]**: They partition Android applications into compartments to protect data and utilize ARM’s TrustZone environment for running sensitive compartments.
- **Other Techniques**: These methods often rely on an OS for process isolation or hardware not present on microcontrollers, or require significant developer annotations.

In contrast, ACES (Automatic Compartmentalization for Embedded Systems) operates without an OS, requires only an MPU, and does not need developer annotations.

### Embedded System-Specific Protections

- **NesCheck [40]**: Provides isolation by enforcing memory safety.
- **MINION [27]**: Offers automatic thread-level compartmentalization but requires an OS, while ACES provides function-level compartmentalization without an OS.
- **ARM’s TrustZone [4]**: Enables execution of software in a "secure world" underneath the OS. TrustZone extensions are included in the new ARMv8-M architecture, though devices implementing this are not yet widely available.
- **FreeRTOS-MPU [22]**: A real-time OS that uses the MPU to protect the OS from application tasks.
- **Trustlite [29]**: Proposes hardware extensions to microcontrollers, including an execution-aware MPU, to enable trusted modules. Each module's data is protected using the MPU.
- **TyTan [7]**: Builds on Trustlite and develops a secure architecture for low-end embedded systems, isolating tasks with secure inter-process communication (IPC).

ACES, however, enables intraprocess compartmentalization on existing hardware and separates compartment creation from program implementation.

### Discussion and Conclusion

#### Impact on Runtime Performance
As shown in Section 6.3, compartmentalization policies can significantly impact runtime performance. To reduce this impact, new policies should aim to place call chains together and minimize the emulation of variable accesses. The Program Dependence Graph (PDG) could be augmented with profiling information from baseline applications to avoid placing frequently executed function calls in different compartments. Additionally, the number of emulator calls could be reduced through improved alias analysis or by adding dynamically discovered accesses to the PDG. This would allow an MPU region to provide access to these variables. Optimizations to the way emulated variables are accessed could also be made, such as modifying the emulator to check if the store to be emulated is from `memcpy`. If so, permissions for the entire destination buffer could be validated, and the emulator could perform the entire buffer copy, thus reducing the number of invocations.

#### Protecting Against Confused Deputy Attacks
Confused deputy attacks are challenging for compartmentalization techniques. These attacks involve using control over one compartment to provide unexpected inputs to another, causing it to perform insecure actions. For example, in a PinLock system split into an unprivileged and a privileged compartment, an attacker controlling the unprivileged compartment might trigger an unlock event. ACES mitigates this by restricting and validating all compartment transitions. The difficulty of performing these attacks depends on the compartmentalization policy. For security, it is desirable to have long compartment chains, making it harder to reach the privileged compartment.

### Conclusion
ACES enables the automatic application of compartments to enforce least privileges on bare-metal applications. Its primary contributions are:
1. **Decoupling the Compartmentalization Policy from Program Implementation**: This allows for exploration of the design space and changes to the policy after development, depending on the context.
2. **Automatic Application of Compartments**: Maintains program dependencies and ensures hardware constraints are satisfied, freeing developers from the burden of configuring and maintaining memory permissions.
3. **Use of a Micro-Emulator**: Authorizes access to data outside a compartment’s memory regions, allowing imprecise analysis techniques to form compartments.

We demonstrated ACES's flexibility using three compartmentalization policies. Compared to Mbed µVisor, ACES' compartments use 58.6% less Flash, 83.9% less RAM, with comparable execution time, and reduce the number of Return-Oriented Programming (ROP) gadgets by an average of 94.3%.

### Acknowledgments
We thank Nathan Burow and Brian Hays for their careful reviews and input, and Brenden Dolan-Gavitt, our shepherd, for his detailed reviews and constructive feedback. This work was supported by Sandia National Laboratories, ONR award N00014-17-1-2513, NSF CNS-1513783, NSF CNS-1718637, NSF CNS-1548114, Intel Corporation, and Northrop Grumman Corporation through their Cybersecurity Research Consortium. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of our sponsors. Sandia National Laboratories is managed and operated by National Technology & Engineering Solutions of Sandia, LLC, a wholly owned subsidiary of Honeywell International Inc., for the U.S. Department of Energy’s National Nuclear Security Administration under contract DE-NA0003525.

SAND2018-6917C

### References
[References listed here as per the original text.]

---

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and easier to understand.