focuses on separating a single bare-metal system into
compartments using an MPU and addresses the speciﬁc
issues that arise from the MPU limitations. Privtrans [9]
uses static analysis to partition an application into priv-
ileged and unprivileged processes, using the OS to en-
force the separation of the processes. Glamdring [36]
uses annotations and data and control-ﬂow analysis to
partition an application into sensitive and non-sensitive
partitions—executing the sensitive partition in an Intel
SGX [13] enclave. Robinov et al. [44] partition An-
droid applications into compartments to protect data and
utilize ARM’s TrustZone environment to run sensitive
compartments. These techniques rely on an OS [9, 36]
for process isolation or hardware not present on micro-
controllers [36, 37, 44] or signiﬁcant developer annota-
tion [24, 36, 37].
In contrast ACES works without an
OS, only requires an MPU, and does not require devel-
oper annotations.
Embedded system speciﬁc protections: NesCheck [40]
provides isolation by enforcing memory safety. MIN-
ION [27] provides automatic thread-level compart-
mentalization, requiring an OS, while ACES provides
function-level compartmentalization without an OS.
ARM’s TrustZone [4] enables execution of software in
a “secure world” underneath the OS. TrustZone exten-
sions are included in the new ARMv8-M architecture.
At the time of writing, ARMv8-M devices are not yet
available. FreeRTOS-MPU [22] is a real-time OS that
uses the MPU to protect the OS from application tasks.
Trustlite [29] proposes hardware extensions to micro-
controllers, including an execution aware MPU, to en-
able the deployment of trusted modules. Each mod-
ule’s data is protected from the other parts of the pro-
gram by use of their MPU. TyTan [7] builds on Trustlite
and develops a secure architecture for low-end embedded
systems, isolating tasks with secure IPC between them.
In contrast, ACES enables intraprocess compartmental-
ization on existing hardware and separates compartment
creation from program implementation.
8 Discussion and Conclusion
As shown in Section 6.3, compartmentalization policies
may signiﬁcantly impact runtime performance. To re-
duce the runtime impact, new policies should seek to
place call chains together, and minimize emulating vari-
able accesses. The PDG could be augmented with pro-
ﬁling information of baseline applications so that com-
partment policies can avoid placing callers and callees of
frequently executed function calls in different compart-
ments. In addition, the number of emulator calls could
be reduced by improved alias analysis or adding dynam-
ically discovered accesses to the PDG. This would enable
an MPU region to be used to provide access to these vari-
ables. Finally, optimizations to the way emulated vari-
ables are accessed could be made to ACES. For exam-
ple, the emulator could be modiﬁed to check if the store
to be emulated is from memcpy. If so, permissions for
the entire destination buffer could be validated and then
the emulator could perform the entire buffer copy. Thus,
the emulator would only be invoked once for the entire
copy and not for each address written in the buffer.
Protecting against confused deputy attacks [26] is
challenging for compartmentalization techniques. They
use control over one compartment to provide unexpected
inputs to another compartment causing it to perform in-
secure actions. Consider PinLock that is split into an un-
privileged compartment and the privileged compartment
with the unlock pin. An attacker with control over the
unprivileged compartment may use any interaction be-
tween the two compartments to trigger an unlock event.
To guard against confused deputy attacks, ACES restricts
and validates the locations of all compartment transi-
tions. The difﬁculty of performing these attacks depends
on the compartmentalization policy. For security, it is
desirable to have long compartment chains, resulting in
many compartments that must be compromised to reach
the privileged compartment.
In conclusion, ACES enables automatic application of
compartments enforcing least privileges on bare-metal
applications. Its primary contributions are (1) decoupling
the compartmentalization policy from the program im-
plementation, enabling exploration of the design space
and changes to the policy after program development,
e.g., depending on the context the application is run in.
(2) The automatic application of compartments while
maintaining program dependencies and ensuring hard-
ware constraints are satisﬁed. This frees the developer
from the burden of conﬁguring and maintaining mem-
ory permissions and understanding the hardware con-
straints, much like an OS does for applications on a
desktop.
(3) Use of a micro-emulator to authorize ac-
cess to data outside a compartment’s memory regions,
allowing imprecise analysis techniques to form compart-
ments. We demonstrated ACES’s ﬂexibility in com-
partment construction using three compartmentalization
policies. Compared to Mbed µVisor, ACES’ compart-
ments use 58.6% less Flash, 83.9% less RAM, with com-
parable execution time, and reduces the number of ROP
gadgets by an average of 94.3%.
USENIX Association
27th USENIX Security Symposium    79
9 Acknowledgments
We would like to thank Nathan Burow and Brian Hays
for their careful reviews and input, and Brenden Dolan-
Gavitt, our shepherd, for his detailed reviews and con-
structive input. This work was supported by Sandia
National Laboratories, ONR award N00014-17-1-2513,
NSF CNS-1513783, NSF CNS-1718637, NSF CNS-
1548114, Intel Corporation, and Northrop Grumman
Corporation through their Cybersecurity Research Con-
sortium. Any opinions, ﬁndings, and conclusions or rec-
ommendations expressed in this material are those of the
authors and do not necessarily reﬂect the views of our
sponsors. Sandia National Laboratories is a multimission
laboratory managed and operated by National Technol-
ogy & Engineering Solutions of Sandia, LLC, a wholly
owned subsidiary of Honeywell International Inc., for
the U.S. Department of Energys National Nuclear Se-
curity Administration under contract DE-NA0003525.
SAND2018-6917C
References
[1] ABADI, M., BUDIU, M., ERLINGSSON, U., AND
LIGATTI, J. Control-ﬂow integrity. In ACM Conf.
on Computer and Communication Security (2005),
ACM, pp. 340–353.
[2] ARM.
Armv8-m architecture reference man-
https://static.docs.arm.com/
ual.
ddi0553/a/DDI0553A e armv8m arm.pdf.
[3] ARM.
Armv7-m
manual.
reference
static.docs.arm.com/ddi0403/eb/
DDI0403E B armv7m arm.pdf, 2014.
architecture
https://
[4] ARM.
Trustzone.
http://www.arm.com/
products/processors/technologies/
trustzone/, 2015.
[5] ATMEL.
Arm32
architecture
document.
https://www.mouser.com/ds/2/268/
doc32000-1066014.pdf.
[6] BENIAMINI, G. Project Zero: Over The Air: Ex-
ploiting Broadcoms Wi-Fi Stack.
[7] BRASSER, F., EL MAHJOUB, B., SADEGHI, A.-
R., WACHSMANN, C., AND KOEBERL, P. Tytan:
Tiny trust anchor for tiny devices. In Design Au-
tomation Conf. (2015), ACM/IEEE, pp. 1–6.
[8] BROCIOUS, C. My arduino can beat up your hotel
room lock. In Black Hat USA (2013).
[9] BRUMLEY, D., AND SONG, D. Privtrans: Auto-
matically partitioning programs for privilege sep-
aration.
In USENIX Security Symposium (2004),
pp. 57–72.
[10] BUROW, N., CARR, S. A., NASH, J., LARSEN,
P., FRANZ, M., BRUNTHALER, S., AND PAYER,
M. Control-Flow Integrity: Precision, Security,
and Performance. ACM Computing Surveys 50,
1 (2018, preprint: https://arxiv.org/abs/
1602.04056).
[11] CARR, S. A., AND PAYER, M. Datashield: Con-
ﬁgurable data conﬁdentiality and integrity. In Pro-
ceedings of the 2017 ACM on Asia Conference on
Computer and Communications Security (2017),
ACM, pp. 193–204.
[12] CLEMENTS, A. A., ALMAKHDHUB, N. S.,
SAAB, K. S., SRIVASTAVA, P., KOO, J., BAGCHI,
S., AND PAYER, M. Protecting bare-metal embed-
ded systems with privilege overlays. In IEEE Symp.
on Security and Privacy (2017), IEEE.
[13] COSTAN, V., AND DEVADAS, S.
Intel sgx ex-
IACR Cryptology ePrint Archive 2016
plained.
(2016), 86.
[14] CUNNINGHAM, M., AND MANNIX, L. Fines for
red-light and speed cameras suspended across the
state. The Age (06 2017).
[15] CVE-2017-6956. https://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2017-
6956, 2017.
[16] CVE-2017-6957. https://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2017-
6957, 2017.
[17] CVE-2017-6961. https://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2017-
6961, 2017.
[18] DAUTENHAHN, N., KASAMPALIS, T., DIETZ,
W., CRISWELL, J., AND ADVE, V. Nested kernel:
An operating system architecture for intra-kernel
privilege separation. In Conf. on Architectural Sup-
port for Programming Languages and Operating
Systems (2015), pp. 191–206.
[19] DUNKELS, A. Full tcp/ip for 8-bit architectures. In
Proceedings of the 1st international conference on
Mobile systems, applications and services (2003),
ACM, pp. 85–98.
80    27th USENIX Security Symposium
USENIX Association
[20] ELPHINSTONE, K., AND HEISER, G. From l3
to sel4 what have we learnt in 20 years of l4 mi-
crokernels? In Proceedings of the Twenty-Fourth
ACM Symposium on Operating Systems Principles
(2013), ACM, pp. 133–150.
[21] FERRANTE, J., OTTENSTEIN, K. J., AND WAR-
REN, J. D. The program dependence graph and its
use in optimization. ACM Trans. on Programming
Languages and Systems 9, 3 (1987), 319–349.
[22] FreeRTOS-MPU.
http://
www.freertos.org/FreeRTOS-MPU-
memory-protection-unit.html.
[23] GREENBERG, A. The Jeep Hackers Are Back to
Prove Car Hacking Can Get Much Worse. Wired
Magazine (08 2016).
[24] GUDKA, K., WATSON, R. N., ANDERSON, J.,
CHISNALL, D., DAVIS, B., LAURIE, B., MARI-
NOS, I., NEUMANN, P. G., AND RICHARDSON,
A. Clean application compartmentalization with
soaap. In Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Se-
curity (2015), ACM, pp. 1016–1031.
[25] HAGBERG, A. A., SCHULT, D. A., AND SWART,
Exploring network structure, dynamics,
P. J.
and function using NetworkX.
In Proceedings of
the 7th Python in Science Conference (SciPy2008)
(Pasadena, CA USA, Aug. 2008), pp. 11–15.
[26] HARDY, N. The confused deputy:(or why capa-
bilities might have been invented). ACM SIGOPS
Operating Systems Review 22, 4 (1988), 36–38.
[27] KIM, C. H., KIM, T., CHOI, H., GU, Z., LEE, B.,
ZHANG, X., AND XU, D. Securing real-time mi-
crocontroller systems through customized memory
view switching.
In Network and Distributed Sys-
tems Security Symp. (NDSS) (2018).
[28] KLEIN, G., ELPHINSTONE, K., HEISER, G., AN-
DRONICK, J., COCK, D., DERRIN, P., ELKA-
DUWE, D., ENGELHARDT, K., KOLANSKI, R.,
NORRISH, M., ET AL. sel4: Formal veriﬁcation of
an os kernel. In Proceedings of the ACM SIGOPS
22nd symposium on Operating systems principles
(2009), ACM, pp. 207–220.
[29] KOEBERL, P., SCHULZ, S., SCHULZ, P.,
SADEGHI, A.,
AND VARADHARAJAN, V.
TrustLite: a security architecture for tiny embed-
ded devices. ACM EuroSys (2014).
[30] KREBS, B. DDoS on Dyn Impacts Twitter, Spotify,
Reddit. https://krebsonsecurity.com/
2016/10/ddos-on-dyn-impacts-
twitter-spotify-reddit/.
[31] KUZNETSOV, V., SZEKERES, L., PAYER, M.,
CANDEA, G., SEKAR, R., AND SONG, D. Code
Pointer Integrity. USENIX Symp. on Operating Sys-
tems Design and Implementation (2014).
[32] LATTNER, C., AND ADVE, V. Llvm: A compi-
lation framework for lifelong program analysis and
transformation. In Intl. Symp. Code Generation and
Optimization (2004), IEEE, pp. 75–86.
[33] LATTNER, C., LENHARTH, A., AND ADVE, V.
Making context-sensitive points-to analysis with
heap cloning practical for the real world. ACM SIG-
PLAN 42, 6 (2007), 278–289.
[34] LI, J., WANG, Z., BLETSCH, T., SRINIVASAN,
D., GRACE, M., AND JIANG, X. Comprehensive
and efﬁcient protection of kernel control data. IEEE
Trans. on Information Forensics and Security 6, 4
(2011), 1404–1417.
[35] LIEDTKE, J. On micro-kernel construction.
In
Symp. on Operating Systems Principles (New York,
NY, USA, 1995), SOSP ’95, ACM, pp. 237–250.
[36] LIND, J., PRIEBE, C., MUTHUKUMARAN, D.,
O‘KEEFFE, D., AUBLIN, P.-L., KELBERT, F.,
REIHER, T., GOLTZSCHE, D., EYERS, D.,
KAPITZA, R., ET AL. Glamdring: Automatic ap-
plication partitioning for intel sgx. In USENIX An-
nual Technical Conf. (2017).
[37] LIU, Y., ZHOU, T., CHEN, K., CHEN, H., AND
XIA, Y. Thwarting memory disclosure with ef-
ﬁcient hypervisor-enforced intra-domain isolation.
In Proceedings of the 22nd ACM SIGSAC Confer-
ence on Computer and Communications Security
(2015), ACM, pp. 1607–1619.
[38] mbed OS.
https://www.mbed.com/en/
development/mbed-os/.
[39] The mbed OS
uVisor.
https://
www.mbed.com/en/technologies/
security/uvisor/.
[40] MIDI, D., PAYER, M., AND BERTINO, E. Mem-
ory Safety for Embedded Devices with nesCheck.
In ACM Symp. on InformAtion, Computer and
Communications Security (2017).
[41] NIU, B., AND TAN, G. Modular control-ﬂow in-
tegrity. ACM SIGPLAN Notices 49, 6 (2014), 577–
587.
USENIX Association
27th USENIX Security Symposium    81
[42] PAX TEAM. PaX address space layout randomiza-
tion (ASLR). http://pax.grsecurity.net/
docs/aslr.txt, 2003.
[43] RAMALINGAM, G. The undecidability of alias-
ing. ACM Trans. Program. Lang. Syst. 16, 5 (Sept.
1994).
[44] RUBINOV, K., ROSCULETE, L., MITRA, T., AND
ROYCHOUDHURY, A. Automated partitioning of
android applications for trusted execution environ-
ments.
In Proceedings of the 38th International
Conference on Software Engineering (2016), ACM,
pp. 923–934.
[45] SALTZER, J. H., AND SCHROEDER, M. D. The
protection of information in computer systems.
Proceedings of the IEEE 63, 9 (1975), 1278–1308.
[46] SALWAN, J. ROPgadget - Gadgets Finder and
http://shell-storm.org/
Auto-Roper.
project/ROPgadget/, 2011.
[47] SHACHAM, H. The geometry of innocent ﬂesh on
the bone: Return-into-libc without function calls
(on the x86). In ACM Conf. on Computer and Com-
munications Security (2007), pp. 552–561.
[48] STM32479I-EVAL.
http://www.st.com/
resource/en/user manual/
dm00219329.pdf.
[49] STM32F4-Discovery.
http://www.st.com/
st-web-ui/static/active/en/
resource/technical/document/
data brief/DM00037955.pdf.
[51] YEE, B., SEHR, D., DARDYK, G., CHEN,
J. B., MUTH, R., ORMANDY, T., OKASAKA, S.,
NARULA, N., AND FULLAGAR, N. Native client:
A sandbox for portable, untrusted x86 native code.
In Security and Privacy, 2009 30th IEEE Sympo-
sium on (2009), IEEE, pp. 79–93.
[52] ZELLWEGER, G., GERBER, S., KOURTIS, K.,
AND ROSCOE, T. Decoupling cores, kernels,
and operating systems.
In OSDIUSENIX Symp.
on Operating Systems Design and Implementation
(2014), vol. 14, pp. 17–31.
[53] ZHANG, C., WEI, T., CHEN, Z., DUAN, L.,
SZEKERES, L., MCCAMANT, S., SONG, D., AND
ZOU, W. Practical control ﬂow integrity and ran-
domization for binary executables. In IEEE Symp.
on Security and Privacy (2013), IEEE, pp. 559–
573.
[54] ZHANG, M., AND SEKAR, R. Control ﬂow in-
tegrity for cots binaries. In USENIX Security Symp.
(2013), pp. 337–352.
[55] ZHAO, L., LI, G., DE SUTTER, B., AND
REGEHR, J. Armor: fully veriﬁed software fault
isolation. In Embedded Software (EMSOFT), 2011
Proceedings of the International Conference on
(2011), IEEE, pp. 289–298.
[56] ZHOU, Y., WANG, X., CHEN, Y., AND WANG, Z.
Armlock: Hardware-based fault isolation for arm.
In Proceedings of the 2014 ACM SIGSAC Confer-
ence on Computer and Communications Security
(2014), ACM, pp. 558–569.
[50] WAHBE, R., LUCCO, S., ANDERSON, T. E., AND
GRAHAM, S. L. Efﬁcient software-based fault iso-
lation. In SOSP’03: Symposium on Operating Sys-
tems Principles (1993).
[57] ZHOU, Z., YU, M., AND GLIGOR, V. D. Dancing
with giants: Wimpy kernels for on-demand isolated
i/o. In Symp. on Security and Privacy (2014), IEEE,
pp. 308–323.
82    27th USENIX Security Symposium
USENIX Association