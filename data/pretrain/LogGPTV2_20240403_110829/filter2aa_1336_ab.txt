SETUP
We can demonstrate this easily using one of the Docker documentation’s sample applications, an SSH service[13]. 
The Dockerfile for the first image in this example takes the following actions:
• Starts with a bare bones Ubuntu base image
• Installs and configures an OpenSSH server
• Changes the root password to “screencast”
• Sets the SSH port (TCP 22) as a port to be exposed
• Sets the OpenSSH server to run when a container is launched
FROM ubuntu:16.04
RUN apt-get update && apt-get install -y openssh-server
RUN mkdir /var/run/sshd
RUN echo ‘root:screencast’ | chpasswd
RUN sed -i ‘s/PermitRootLogin prohibit-password/PermitRootLogin yes/’ /etc/
ssh/sshd_config
# SSH login fix. Otherwise user is kicked off after login
RUN sed ‘s@session\s*required\s*pam_loginuid.so@session optional pam_
loginuid.so@g’ -i /etc/pam.d/sshd
ENV NOTVISIBLE “in users profile”
RUN echo “export VISIBLE=now” >> /etc/profile
EXPOSE 22
CMD [“/usr/sbin/sshd”, “-D”]
The second Dockerfile is nearly identical, but does not expose port 22:
FROM ubuntu:16.04
RUN apt-get update && apt-get install -y openssh-server
RUN mkdir /var/run/sshd
RUN echo ‘root:screencast’ | chpasswd
RUN sed -i ‘s/PermitRootLogin prohibit-password/PermitRootLogin yes/’ /etc/
ssh/sshd_config
An Attacker Looks at Docker: Approaching Multi-Container Applications
Wesley McGrew
HORNECyber.com
9
# SSH login fix. Otherwise user is kicked off after login
RUN sed ‘s@session\s*required\s*pam_loginuid.so@session optional pam_
loginuid.so@g’ -i /etc/pam.d/sshd
ENV NOTVISIBLE “in users profile”
RUN echo “export VISIBLE=now” >> /etc/profile
CMD [“/usr/sbin/sshd”, “-D”]
We can create the first image with the following command:
wes@br:~/demo/monolithic_2_monolithic$ docker build -t eg_sshd .
Sending build context to Docker daemon  2.048kB
Step 1/10 : FROM ubuntu:16.04
 ---> 0458a4468cbc
Step 2/10 : RUN apt-get update && apt-get install -y openssh-server
 ---> Running in 62b0659c4a66
Removing intermediate container 62b0659c4a66
 ---> 5e1ad23ebbc8
Step 3/10 : RUN mkdir /var/run/sshd
 ---> Running in 74cff07613f0
Removing intermediate container 74cff07613f0
 ---> 7d20d0487e9e
Step 4/10 : RUN echo ‘root:screencast’ | chpasswd
 ---> Running in b84c918ff6de
Removing intermediate container b84c918ff6de
 ---> 61a073996646
Step 5/10 : RUN sed -i ‘s/PermitRootLogin prohibit-password/PermitRootLogin 
yes/’ /etc/ssh/sshd_config
 ---> Running in febe1ee0c4eb
Removing intermediate container febe1ee0c4eb
 ---> bdef11083afd
Step 6/10 : RUN sed ‘s@session\s*required\s*pam_loginuid.so@session optional 
pam_loginuid.so@g’ -i /etc/pam.d/sshd
 ---> Running in 5bc4be53d264
Removing intermediate container 5bc4be53d264
 ---> c6e0d8733582
Step 7/10 : ENV NOTVISIBLE “in users profile”
 ---> Running in a342d7254846
Removing intermediate container a342d7254846
 ---> d14333341155
An Attacker Looks at Docker: Approaching Multi-Container Applications
Wesley McGrew
HORNECyber.com
Step 8/10 : RUN echo “export VISIBLE=now” >> /etc/profile
 ---> Running in 5bf0934dd8b8
Removing intermediate container 5bf0934dd8b8
 ---> 38bc2b2faac1
Step 9/10 : EXPOSE 22
 ---> Running in 5894553e85d7
Removing intermediate container 5894553e85d7
 ---> 1bca3361a88d
Step 10/10 : CMD [“/usr/sbin/sshd”, “-D”]
 ---> Running in 13d3dcb7aab2
Removing intermediate container 13d3dcb7aab2
 ---> 58fbacae6bbd
Successfully built 58fbacae6bbd
Successfully tagged eg_sshd:latest
The second image is then created:
wes@br:~/demo/monolithic_2_monolithic/ssh2$ docker build -t eg_sshd_noport .
Sending build context to Docker daemon  2.048kB
Step 1/9 : FROM ubuntu:16.04
 ---> 0458a4468cbc
Step 2/9 : RUN apt-get update && apt-get install -y openssh-server
 ---> Using cache
 ---> 5e1ad23ebbc8
Step 3/9 : RUN mkdir /var/run/sshd
 ---> Using cache
 ---> 7d20d0487e9e
Step 4/9 : RUN echo ‘root:screencast’ | chpasswd
 ---> Using cache
 ---> 61a073996646
Step 5/9 : RUN sed -i ‘s/PermitRootLogin prohibit-password/PermitRootLogin 
yes/’ /etc/ssh/sshd_config
---> Using cache
 ---> bdef11083afd
Step 6/9 : RUN sed ‘s@session\s*required\s*pam_loginuid.so@session optional 
pam_loginuid.so@g’ -i /etc/pam.d/sshd
 ---> Using cache
 ---> c6e0d8733582
Step 7/9 : ENV NOTVISIBLE “in users profile”
 ---> Using cache
 ---> d14333341155
Step 8/9 : RUN echo “export VISIBLE=now” >> /etc/profile
 ---> Using cache
10
An Attacker Looks at Docker: Approaching Multi-Container Applications
Wesley McGrew
HORNECyber.com
 ---> 38bc2b2faac1
Step 9/9 : CMD [“/usr/sbin/sshd”, “-D”]
 ---> Running in ae56588d210a
Removing intermediate container ae56588d210a
 ---> 01f5762d52fa
Successfully built 01f5762d52fa
Successfully tagged eg_sshd_noport:latest
Given these images, eg_sshd and eg_sshd_noport, we can now launch two containers, test_sshd_1 and 
test_sshd_2. For test_sshd_1, we will pass the -P flag in order to forward the exposed TCP port 22 to the 
host. For test_sshd_2, we will not pass that flag.
wes@br:~/demo/monolithic_2_monolithic/ssh2$ docker run -d -P --name test_
sshd_1 eg_sshd
819e5ea650079c67395d5b79b4fb095d474c284ca09313a3bc217d927cf55bcf
wes@br:~/demo/monolithic_2_monolithic/ssh2$ docker run -d --name test_sshd_2 
eg_sshd_noport
2853974e9b1cccc23b35d05950362c96302850bd0b103ccfce57687eb2cf9894
EXPLORING THE DEPLOYED APPLICATIONS
We can now inspect the Docker “bridge” network to identify the IP addresses of the connected containers, as 
well as identify the port on the host that is being forwarded to the test_sshd_1 container.
wes@br:~/demo/monolithic_2_monolithic/ssh2$ docker network inspect bridge
[
    {
        “Name”: “bridge”,
        “Id”: 
“af1c7273b7bb03d2a793687eec808563af9acfeaf0400d012f698d3cb91f1ea2”,
        “Created”: “2018-01-16T11:54:59.127840123-06:00”,
        “Scope”: “local”,
        “Driver”: “bridge”,
        “EnableIPv6”: false,
        “IPAM”: {
            “Driver”: “default”,
            “Options”: null,
            “Config”: [
               {
                    “Subnet”: “172.17.0.0/16”,
                    “Gateway”: “172.17.0.1”
                }
            ]
11
An Attacker Looks at Docker: Approaching Multi-Container Applications
Wesley McGrew
HORNECyber.com
12
An Attacker Looks at Docker: Approaching Multi-Container Applications
        },
        “Internal”: false,
        “Attachable”: false,
        “Ingress”: false,
        “ConfigFrom”: {
            “Network”: “”
        },
        “ConfigOnly”: false,
        “Containers”: {
“2853974e9b1cccc23b35d05950362c96302850bd0b103ccfce57687eb2cf9894”: {
                “Name”: “test_sshd_2”,
                “EndpointID”: 
“b42b28e23d20c3151b5c9ef446af4c0a08ea2283f5370b2e98ed092f8fb4546c”,
                “MacAddress”: “02:42:ac:11:00:03”,
                “IPv4Address”: “172.17.0.3/16”,
                “IPv6Address”: “”
            },
“819e5ea650079c67395d5b79b4fb095d474c284ca09313a3bc217d927cf55bcf”: {
                “Name”: “test_sshd_1”,
                “EndpointID”: 
“94c4f6fe1f4266370020b2f5f3bf94f8710ab1947079c701eea199206cdd6664”,
                “MacAddress”: “02:42:ac:11:00:02”,
                “IPv4Address”: “172.17.0.2/16”,
                “IPv6Address”: “”
            }
        },
        “Options”: {
            “com.docker.network.bridge.default_bridge”: “true”,
            “com.docker.network.bridge.enable_icc”: “true”,
            “com.docker.network.bridge.enable_ip_masquerade”: “true”,
            “com.docker.network.bridge.host_binding_ipv4”: “0.0.0.0”,
            “com.docker.network.bridge.name”: “docker0”,
            “com.docker.network.driver.mtu”: “1500”
       },
        “Labels”: {}
    }
]
wes@br:~/demo/monolithic_2_monolithic/ssh2$ docker port test_sshd_1
22/tcp -> 0.0.0.0:32770
Wesley McGrew
HORNECyber.com
13
An Attacker Looks at Docker: Approaching Multi-Container Applications
From the above output, the important points are:
• 
 test_sshd_1 has IP address 172.17.0.2
• 
 The SSH server on TCP port 22 of test_sshd_1 has been forwarded to the host TCP port 32770
• 
 test_sshd_2 has IP address 172.17.0.3
(Identifying this information from within a container without access to the host docker commands will be 
addressed later in this white paper.)
We can ssh into the exposed port via the forward:
wes@br:~/demo/monolithic_2_monolithic/ssh2$ ssh root@localhost -p 32770
The authenticity of host ‘[localhost]:32770 ([127.0.0.1]:32770)’ can’t be 
established.
ECDSA key fingerprint is SHA256:LnUsdSckdnrFTt2QXKWsZmTABKr3sTE5oRelOvoJKSk.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added ‘[localhost]:32770’ (ECDSA) to the list of known 
hosts.
root@localhost’s password:
Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.13.0-25-generic x86_64)
 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.
Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.
root@819e5ea65007:~#
NETWORK CONTROLS BETWEEN APPLICATIONS
This port is forwarded outside of the local host too. Other hosts that can see the Docker container host can also 
log into the container through this port. The test_sshd_2 container can be logged into from the host as well, 
through its bridge network IP address and the non-forwarded port:
wes@br:~/demo/monolithic_2_monolithic/ssh2$ ssh root@172.17.0.3
The authenticity of host ‘172.17.0.3 (172.17.0.3)’ can’t be established.
ECDSA key fingerprint is SHA256:LnUsdSckdnrFTt2QXKWsZmTABKr3sTE5oRelOvoJKSk.
Are you sure you want to continue connecting (yes/no)? yes
Wesley McGrew
HORNECyber.com
14
An Attacker Looks at Docker: Approaching Multi-Container Applications
Warning: Permanently added ‘172.17.0.3’ (ECDSA) to the list of known hosts.
root@172.17.0.3’s password:
Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.13.0-25-generic x86_64)
 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Sat Jan 27 21:23:42 2018 from 172.17.0.1
root@2853974e9b1c:~#
A host external to the Docker host, however, has no way to directly connect to the second SSH container, nor 
would it be able to directly connect to any other non-exported ports on either container. Once access has been 
gained to one container (in this example, test_sshd_1), there is nothing preventing connections to other non-
exported ports. We can demonstrate this by SSH’ing from test_sshd_1 to test_sshd_2:
root@819e5ea65007:~# ssh root@172.17.0.3    
The authenticity of host ‘172.17.0.3 (172.17.0.3)’ can’t be established.
ECDSA key fingerprint is SHA256:LnUsdSckdnrFTt2QXKWsZmTABKr3sTE5oRelOvoJKSk.
Are you sure you want to continue connecting (yes/no)? yes