### Setup

We can easily demonstrate the setup using one of Docker's sample applications, an SSH service. The Dockerfile for the first image in this example performs the following actions:

- Starts with a minimal Ubuntu base image.
- Installs and configures an OpenSSH server.
- Changes the root password to "screencast".
- Exposes the SSH port (TCP 22).
- Sets the OpenSSH server to run when the container is launched.

```dockerfile
FROM ubuntu:16.04
RUN apt-get update && apt-get install -y openssh-server
RUN mkdir /var/run/sshd
RUN echo 'root:screencast' | chpasswd
RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
# SSH login fix. Otherwise, the user is kicked off after login.
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
ENV NOTVISIBLE "in users profile"
RUN echo "export VISIBLE=now" >> /etc/profile
EXPOSE 22
CMD ["/usr/sbin/sshd", "-D"]
```

The second Dockerfile is nearly identical but does not expose port 22:

```dockerfile
FROM ubuntu:16.04
RUN apt-get update && apt-get install -y openssh-server
RUN mkdir /var/run/sshd
RUN echo 'root:screencast' | chpasswd
RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
# SSH login fix. Otherwise, the user is kicked off after login.
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
ENV NOTVISIBLE "in users profile"
RUN echo "export VISIBLE=now" >> /etc/profile
CMD ["/usr/sbin/sshd", "-D"]
```

### Building the Images

We can create the first image with the following command:

```bash
wes@br:~/demo/monolithic_2_monolithic$ docker build -t eg_sshd .
```

This will produce the following output:

```bash
Sending build context to Docker daemon  2.048kB
Step 1/10 : FROM ubuntu:16.04
 ---> 0458a4468cbc
...
Successfully built 58fbacae6bbd
Successfully tagged eg_sshd:latest
```

The second image is then created with the following command:

```bash
wes@br:~/demo/monolithic_2_monolithic/ssh2$ docker build -t eg_sshd_noport .
```

This will produce the following output:

```bash
Sending build context to Docker daemon  2.048kB
Step 1/9 : FROM ubuntu:16.04
 ---> 0458a4468cbc
...
Successfully built 01f5762d52fa
Successfully tagged eg_sshd_noport:latest
```

### Launching the Containers

Given these images, `eg_sshd` and `eg_sshd_noport`, we can now launch two containers, `test_sshd_1` and `test_sshd_2`. For `test_sshd_1`, we will pass the `-P` flag to forward the exposed TCP port 22 to the host. For `test_sshd_2`, we will not pass that flag.

```bash
wes@br:~/demo/monolithic_2_monolithic/ssh2$ docker run -d -P --name test_sshd_1 eg_sshd
819e5ea650079c67395d5b79b4fb095d474c284ca09313a3bc217d927cf55bcf

wes@br:~/demo/monolithic_2_monolithic/ssh2$ docker run -d --name test_sshd_2 eg_sshd_noport
2853974e9b1cccc23b35d05950362c96302850bd0b103ccfce57687eb2cf9894
```

### Exploring the Deployed Applications

We can now inspect the Docker "bridge" network to identify the IP addresses of the connected containers, as well as the port on the host that is being forwarded to the `test_sshd_1` container.

```bash
wes@br:~/demo/monolithic_2_monolithic/ssh2$ docker network inspect bridge
[
    {
        "Name": "bridge",
        "Id": "af1c7273b7bb03d2a793687eec808563af9acfeaf0400d012f698d3cb91f1ea2",
        ...
        "Containers": {
            "2853974e9b1cccc23b35d05950362c96302850bd0b103ccfce57687eb2cf9894": {
                "Name": "test_sshd_2",
                "IPv4Address": "172.17.0.3/16"
            },
            "819e5ea650079c67395d5b79b4fb095d474c284ca09313a3bc217d927cf55bcf": {
                "Name": "test_sshd_1",
                "IPv4Address": "172.17.0.2/16"
            }
        }
    }
]
```

```bash
wes@br:~/demo/monolithic_2_monolithic/ssh2$ docker port test_sshd_1
22/tcp -> 0.0.0.0:32770
```

From the above output, the important points are:
- `test_sshd_1` has the IP address 172.17.0.2.
- The SSH server on TCP port 22 of `test_sshd_1` has been forwarded to the host TCP port 32770.
- `test_sshd_2` has the IP address 172.17.0.3.

(Identifying this information from within a container without access to the host Docker commands will be addressed later in this white paper.)

We can SSH into the exposed port via the forward:

```bash
wes@br:~/demo/monolithic_2_monolithic/ssh2$ ssh root@localhost -p 32770
The authenticity of host '[localhost]:32770 ([127.0.0.1]:32770)' can't be established.
ECDSA key fingerprint is SHA256:LnUsdSckdnrFTt2QXKWsZmTABKr3sTE5oRelOvoJKSk.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[localhost]:32770' (ECDSA) to the list of known hosts.
root@localhost's password:
Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.13.0-25-generic x86_64)
 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
root@819e5ea65007:~#
```

### Network Controls Between Applications

This port is also forwarded outside of the local host. Other hosts that can see the Docker container host can log into the container through this port. The `test_sshd_2` container can be logged into from the host as well, through its bridge network IP address and the non-forwarded port:

```bash
wes@br:~/demo/monolithic_2_monolithic/ssh2$ ssh root@172.17.0.3
The authenticity of host '172.17.0.3 (172.17.0.3)' can't be established.
ECDSA key fingerprint is SHA256:LnUsdSckdnrFTt2QXKWsZmTABKr3sTE5oRelOvoJKSk.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '172.17.0.3' (ECDSA) to the list of known hosts.
root@172.17.0.3's password:
Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.13.0-25-generic x86_64)
 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Sat Jan 27 21:23:42 2018 from 172.17.0.1
root@2853974e9b1c:~#
```

A host external to the Docker host, however, has no way to directly connect to the second SSH container, nor would it be able to directly connect to any other non-exported ports on either container. Once access has been gained to one container (in this example, `test_sshd_1`), there is nothing preventing connections to other non-exported ports. We can demonstrate this by SSH'ing from `test_sshd_1` to `test_sshd_2`:

```bash
root@819e5ea65007:~# ssh root@172.17.0.3
The authenticity of host '172.17.0.3 (172.17.0.3)' can't be established.
ECDSA key fingerprint is SHA256:LnUsdSckdnrFTt2QXKWsZmTABKr3sTE5oRelOvoJKSk.
Are you sure you want to continue connecting (yes/no)? yes
```