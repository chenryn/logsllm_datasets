plementation can easily include hardware counter functional-
ity. Although our implementation uses SGX, CACTI can be
realized on any suitable TEE. For example, OpenEnclave is
currently being updated to support ARM TrustZone. When
this version is released, we plan to port the current implemen-
tation to TrustZone, with minimal expected modiﬁcations.
5.4 Website Integration
Integrating CACTI into a website involves two aspects: send-
ing the rate-proof request to the client, and verifying the
response. The server generates the rate-proof request (see
Section 4.3.1) and encodes it as data-* attributes in the
CACTI-div HTML div. The server also includes the URL to
which the generated rate-proofs should be sent. The browser
extension determines whether the website supports CACTI by
looking for the CACTI-div element. The server implements
an HTTP endpoint for receiving and verifying rate-proofs . If
the veriﬁcation succeeds, this endpoint notiﬁes the website
and the user is granted access.
Integrating CACTI into a website is thus very similar to us-
ing existing CAPTCHA systems. For example, reCAPTCHA
adds the g-recaptcha HTML div to the page, and imple-
ments various endpoints for receiving and verifying the re-
sponses [19]. We evaluate server-side overhead of CACTI, in
terms of both processing and data transfer requirements, in
Section 6.
6 Evaluation
We now present and discuss the evaluation of CACTI. We
start with a security analysis, based on the threat model and
requirements deﬁned in Section 3. Next, we evaluate perfor-
mance of CACTI in terms of latency and bandwidth. Finally,
we discuss CACTI deployability issues.
6.1 Security Evaluation
Data integrity & rollback attacks. Since timestamps are
stored outside the enclave, a malicious host application can
try to modify this data, or roll it back to an earlier version. If
successful, this might trick the enclave into producing falsiﬁed
rate-proofs. However, if any timestamp is modiﬁed outside the
enclave, this would be detected because the most recent value
of the hash chain would not match the corresponding MHT
leaf. Assuming a suitable collision-resistant cryptographic
hash function, it is infeasible for the malicious host to ﬁnd
alternative hash values matching the MHT root. Similarly, a
rollback attack against the MHT is detected by comparing the
included counter with the hardware monotonic counter.
Timestamp omission attacks. A malicious application
can try to provide the enclave with only a subset of the times-
tamps for a given request, e.g., to pretend to be below the
threshold rate. Speciﬁcally, the host could try to omit one
or more timestamps at the start, in the middle, and/or at the
end, of the range. If timestamps are omitted at the start, the
enclave detects this when it checks that the ﬁrst timestamp
supplied by the host is prior to the start time of request ts. If
timestamps are omitted in the middle (or at the end) of the
range, the most recent hash value will not match the value in
the MHT leaf.
List substitution attacks. A malicious client might at-
tempt to use a timestamp hash chain from a different list,
or claim that the requested list does not exist. The former is
prevented by including list information (list name and public
key) in the MHT leaf. If there is a mismatch between the
name and the timestamp chain, the resulting leaf would not
exist in the MHT. For the latter, when the host calls the en-
clave’s get_rate function for a new list, the enclave checks
the names of all lists in the MHT to ensure that the new list
name does not already exist.
TEE reset attacks. A malicious client might attempt to
delete all stored data, including the sealed MHT root, in or-
der to reset the TEE. Since the group private key received
from the provisioning authority is sealed together with the
MHT root, it is impossible to delete one and not the other.
Deleting the group private key would force the TEE to be re-
provisioned by the provisioning authority, which may apply
its own rate-limiting policies on how often a given client can
be re-provisioned.
CACTI Farms. Similar to CAPTCHA farms, a multitude
of devices with TEE capabilities could be employed to sat-
isfy rate thresholds set by servers. However, this would be
infeasible because: (1) CACTI enclaves would stop producing
rate-proofs after reaching server thresholds and would thus
require a TEE reset and CACTI re-provisioning – which is a
natural rate limit; (2) the cost of purchasing a device would
be signiﬁcantly higher than CAPTCHA solving costs. For ex-
ample, currently the cheapest service charges $1.8 for solving
1,000 reCAPTCHAs [1]3, while a low-end bare-bones CPU
with SGX support alone costs ≈ $70 [11], in addition to the
maintenance and running costs.
3See a comparison of CAPTCHA solving services [22]
2570    30th USENIX Security Symposium
USENIX Association
CACTI Botnets. An adversary might try to build a CACTI
botnet consisting of compromised devices with suitable TEEs
in order to bypass CAPTCHAs at scale, similarly to a CACTI
farm. However, if the compromised devices are not yet run-
ning CACTI, the adversary would have to provision them
using a suitable PA, which could be made arbitrarily costly
and time-consuming. Alternatively, if the compromised de-
vices are already running CACTI, the adversary gains little
advantage because the legitimate users will likely have been
using CACTI to create their own rate-proofs. Furthermore, the
legitimate user would probably notice any overuse/abuse of
their system due to quickly exceeding the thresholds.
Client-side malware. A more subtle variant of the reset
attack can occur if malware on the client’s own system cor-
rupts or deletes TEE data. This is a type of denial-of-service
(DoS) attack against the client. However, defending against
such DoS attacks is beyond the scope of this work, since this
type of malware would have many other avenues for causing
DoS, e.g., deleting critical ﬁles.
Other DoS attacks. A malicious server might try to mount
a DoS attack against an unsuspecting client by inserting a
timestamp for a future time. If successful, the client would be
unable to insert new timestamps and create rate-proofs for any
other servers, since the enclave would reject these timestamps
as being in the past. This attack can be mitigated if the client’s
browser extension and/or host application simply check that
the server-provided timestamp is not in the future.
Client tracking. A malicious server (or group of servers)
might attempt to track clients by sending multiple requests
for rate-proofs with different thresholds in order to learn the
precise number of timestamps stored by the client. A success-
ful attack of this type could potentially reduce the client’s
anonymity set to only those clients with the same rate. How-
ever, this attack is easy to detect by monitoring the thresholds
sent by the server. A more complicated attack targeting a
speciﬁc client is to send an excessive number of successful
rate-proof requests in order to increase the client’s rate. The
goal is to reduce the size of the target’s anonymity set. This
attack is also easy to detect or prevent by simply rate-limiting
the number of increments accepted from a particular server.
Note that the window of opportunity for this targeted attack is
limited to a single session, because malicious servers cannot
reliably re-identify the user across multiple sessions (since
this is what the attack is trying to achieve). The above attacks
cannot be improved even if multiple servers collude.
Rogue PAs. A malicious PA might try to compromise or di-
minish client privacy. However, this is prevented by CACTI’s
use of the EPID protocol [30]. Speciﬁcally, due to the BBS+
signature scheme [27] during EPID key issuance, clients’ pri-
vate keys are never revealed to PAs. Also, EPID’s signature-
based revocation mechanism does not require member private
keys to be revealed. Instead, signers generate zero-knowledge
proofs showing that they are not on the revocation list. There-
fore, client privacy does not depend on any PA business prac-
tices, e.g., log deletion or identiﬁer blinding.
Each website has full discretion to decide which PAs it
trusts; if a server does not trust the PA who issued the member
private key to the TEE, it can simply fall back to CAPTCHAs.
This provides no advantage to attackers, and websites can be
as conservative as they like. If higher levels of assurance are
required, PAs can execute within TEEs and provide attesta-
tion of correct behavior; we defer the implementation of this
optional feature to future work.
Overall, we claim that CACTI meets all security require-
ments deﬁned in Section 3 and signiﬁcantly increases the
adversary’s cost to perform DoS attacks. Speciﬁcally, the Un-
forgeability requirement is satisﬁed since it is impossible for
the host to perform rollback, timestamp exclusion and list
substitution attacks. Client privacy is achieved because the
rate-proof does not reveal the actual number of timestamps
included, and is signed using a group signature scheme.
6.2 Latency Evaluation
We conducted all latency experiments on an Intel NUC Kit
NUC7PJYH [10] with an Intel Pentium Silver J5005 Proces-
sor (4M Cache, up to 2.80 GHz); 4 GB DDR4-2400 1.2V
SO-DIMM Memory; running Ubuntu 16.04 with the Linux
4.15.0-76-generic kernel Intel SGX DCAP Linux 1.4 drivers.
Recall that the host application is responsible for initializ-
ing the enclave, fetching data necessary for enclave functional-
ity, performing ECALLs, and ﬁnally updating states according
to enclave output. Therefore, we consider the latency in the
following four key phases in the host application:
• Init-Enclave: Host retrieves the appropriate data from
the database and calls init_mt ECALL that initializes the
MHT within the enclave.4
• Pre-Enclave: Host retrieves the required hashes and
timestamps from the database.
• In-Enclave: Host calls the get_rate ECALL. This phase
concludes when the ECALL returns.
• Post-Enclave: Host updates/inserts the data it received
from the enclave into the database.
We investigated the latency impact by varying (1) the number
of timestamps in the rate-proof (Section 6.2.1), and (2) the
number of lists in the database (Section 6.2.2). We evaluated
the end-to-end latency in Section 6.2.4. Unless otherwise
speciﬁed, each measurement is the average of 10 runs.
Note: The ECDSA and EPID signature operations are, by far,
the dominant contributors to latency. However, they represent
a ﬁxed latency overhead that does not vary with the number
of timestamps or servers. Therefore, for clarity’s sake, ﬁgures
in the following sections do not include these operations. We
analyze them separately in Section 6.2.3.
4Init-Enclave is done only when the enclave starts.
USENIX Association
30th USENIX Security Symposium    2571
6.2.1 Varying Number of Timestamps in Query
We measured the effect of varying the number of timestamps
included in the query, while holding the number of lists con-
stant. As shown in Figure 7, query latency increases linearly
with the number of timestamps included in the query. The
most notable increase is in the in-enclave phase, since this
involves calculating a longer hash chain. However, even with
10,000 timestamps in a query, the total latency only reaches
~40 milliseconds (excluding signature operations).
6.2.2 Varying Number of Lists
Next, we varied the number of lists while holding the number
of timestamps ﬁxed at one per list. We considered two separate
scenarios: adding a new list and updating an existing list.
Adding a new list. As shown in Figure 8, the latency
for the pre-enclave phase is lower compared to Figure 7.
This is because we optimize the host to skip the expensive
TIMESTAMPS table look up operation if the host knows that
this is a new list. The in-enclave phase increases as the num-
ber of lists increases due to the string comparison operations
performed by the enclave to prevent list substitution attacks.
However, this phase can be optimized by sorting the server
names inside the enclave during initial MHT construction.
The post-enclave latency is due to the cost of adding entries
to the TIMESTAMPS table. Figure 8 assumes the enclave has
already been initialized (see Figure 9 for the corresponding
init-enclave phase).
Updating an existing list. As shown in Figure 9, the la-
tency of the init-enclave phase increases as the number of lists
increases. This is expected, since the enclave reconstructs the
MHT in this phase. The pre-enclave phase also increases
slightly due to the database operations.
6.2.3 Signature Operation Latency
Evaluation results presented thus far have not included the
ECDSA signature veriﬁcation or EPID signature creation op-
erations. Speciﬁcally, the server creates an ECDSA signature
on the request, which the enclave veriﬁes. The enclave creates
an EPID group signature on the response, which the server
veriﬁes using the EPID group public key. The average laten-
cies over 10 measurements for these four signature operations
are shown in Figure 10. We can see that the EPID group
signature generation operation is an order magnitude slower
compared to the other cryptographic operations including
EPID group signature veriﬁcation. The latency of our enclave
is thus dominated by the EPID signature generation operation.
6.2.4 End-to-End Latency
Table 1 shows the end-to-end latency (excluding network com-
munication) from when the server begins generating a request
until it has received and veriﬁed the response from the client.
In both settings, the end-to-end latency is below 250 millisec-
onds. The latency will be lower if there are fewer lists or in-
cluded timestamps. Compared to other types of CAPTCHAs,
image-based CAPTCHAs take ~10 seconds to solve [31]
and behavior-based reCAPTCHA takes ~400 milliseconds,
although this might change depending on the client’s network
latency.
6.3 Bandwidth Evaluation
We measured the amount of additional data transferred over
the network by different types of CAPTCHA techniques. Min-
imizing data transfer is critical for both servers and clients.
We compared CACTI against image-based and behavior-based
reCAPTCHA [18] (see Figure 1). The former asks clients
(one or more times) to ﬁnd and mark certain objects in a given
image or images, whilst the latter requires clients to click a
button. To isolate the data used by reCAPTCHA, we hosted a
webpage with the minimal auto-rendering reCAPTCHA ex-
ample [19]. We visited this webpage and recorded the trafﬁc
using the Chrome browser’s debugging console.
Table 2 shows the additional data received and sent by the
client to support each type of CAPTCHA. Image-based re-
CAPTCHA incurs the highest bandwidth overhead since it
has to download images, often multiple times. Although not
evaluated here, text-based CAPTCHAs also use images and
would thus have a similar bandwidth overhead. Behavior-
based reCAPTCHA downloads several client-side scripts.
Both types of reCAPTCHA made several additional connec-
tions to Google servers. Overall, CACTI achieves at least a
97% reduction in client bandwidth overhead compared to
contemporary reCAPTCHA solutions.
6.4 Server Load Evaluation
We analyzed the additional load imposed on the server by
CACTI. Unfortunately, CAPTCHAs offered as services, such
as reCAPTCHA [18] and hCAPTCHA [7], do not disclose
their source code and we have no reliable way of estimating
their server-side overhead. Therefore, we compared CACTI
against two open-source CAPTCHA projects published on
GitHub (both have more than 1,000 stars and been forked
more than a hundred times):
dchest/captcha [17] (Figure 11a) generates image-based
text recognition CAPTCHAs consisting of transformed digits
with noise in the form of parabolic lines and additional clus-
ters of points. It can also generate audio CAPTCHAs, which
are pronunciations of digits with randomized speed and pitch
and randomly-generated background noise.
produck/svg-captcha [21] (Figure 11b) generates sim-