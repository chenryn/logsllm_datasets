# 【技术分享】如何借助ActionScript提高Flash调试效率
|
##### 译文声明
本文是翻译文章，文章来源：checkpoint.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
**  
**
****
翻译：[ **兴趣使然的小胃**](http://bobao.360.cn/member/contribute?uid=2819002922)
**预估稿费：200RMB**
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**一、前言**
浏览器插件一直以来都是攻击者热衷的攻击目标。在过去的几年中，最热门的攻击目标无疑是Flash。仅在2016年，与Flash有关的CVE漏洞就有250多个，几乎每个[
**漏洞利用平台**](https://www.recordedfuture.com/top-vulnerabilities-2016/)中都包含这些漏洞的利用工具。针对Flash的攻击无所不在，值得我们注意。
作为安全研究人员，我们经常会处理一些攻击案例，为了分析这些案例，我们需要收集尽可能多的信息，研究漏洞利用的内部工作机制。这个过程通常来说是非常乏味和费时的，使研究任务无法完美完成。由于大多数漏洞利用的主体部分（如ROP链、shellcode以及载荷等）都是在运行时才生成，因此我们决定采用另一种办法，利用现有的原生层调试器（native
level debugger）的功能，使分析过程能够提供更多的信息，提高调试效率。
通过这种方法，我们能够更广泛地了解Flash漏洞利用的内部工作机制，使研究过程更加快速、简单、可控。
这篇文章中详细介绍了我们所使用的具体方法及其优点，并结合一些常见案例阐述该方法的具体应用场景。在了解这种Flash分析技术之前，我们可以先来回顾一下SWF的基础知识。
**  
**
**二、Flash基础知识**
**2.1 SWF**
人们之所以引入SWF格式，主要是想在互联网上分发矢量图形（不幸的是也可以用来分发漏洞利用程序）。在设计之初，人们就考虑到了网络分发的因素，因此将SWF格式设计为一种二进制格式，使用了压缩、位封装（bit-packing）以及包含可选字段的结构体来减少SWF文件的大小。
基本上说来，一个SWF文件由一系列带有标签的数据块组成。标签（Tag）可以用来定义需要显示的形状或者需要播放的音频流，但对于漏洞利用来说，标签更重要的功能是用来分发ActionScript
3.0字节码。
**2.2 DoABC**
DoABC标签包含一个ActionScript字节码（ActionScript
Bytecode，ABC）数据块，ABC数据块可以使用ActionScript 3.0虚拟机进行解析。
这个标签还可以包含静态值、类以及Flash文件所使用的方法的常量池。
比如，某段代码如下所示：
这段代码编译后会生成如下所示的字节码：
正如上述结果，pushstring指令引用的是常量池中的第13（0d）号字符串，如下所示：
另外getlex以及callpropvoid引用的是常量池中的限定名称（qualified name，QNAME），如下所示：
**三、分析方法**
目前我们在分析Flash漏洞利用技术时，可以使用一些常见的分析方法。
**3.1 源代码反编译及编辑方法**
最简单的一种方法是使用诸如FFDEC之类的反编译工具，获取实际的源代码并进行编辑源代码。
这种方法能够获取漏洞利用源代码，听起来非常吸引人，但事情并没有那么简单。攻击者会使用复杂的混淆和封装技术，导致我们难以理解生成的代码。此外，漏洞利用作者通常会加入垃圾代码以及不可达标签，利用这些方法对抗反编译器。
与此同时，即便我们通过反编译过程获得了有效的代码，这个过程中还是存在字节码被错误处理的可能性，这会导致代码生成错误，困扰安全分析人员。
**3.2 反汇编及追踪方法**
另一种方法是对SWF文件进行反汇编处理。我们可以使用诸如[
**RABCdasm**](https://github.com/CyberShadow/RABCDAsm)之类的反汇编器，从SWF文件中导出ABC标签的字节码（而不是反编译这个文件），之后就可以对字节码进行修改和重新汇编处理。
根据[ **Matt Oh**](https://community.hpe.com/t5/Security-Research/Playing-with-Adobe-Flash-Player-Exploits-and-Byte-Code/ba-p/6505942#.WFZDAFN96Ht)的研究成果，我们可以通过改变字节码，在关键节点注入某些调试功能（比如追踪（trace）功能）。这种方法毫无疑问非常强大，然而，hook反汇编后的代码、插入trace功能后，我们的分析能力也被限制在Flash
player调试器的自身能力范围内。
**3.3 我们提出的反汇编和调试方法**
有时候我们可以使用某些原生层调试功能，获得比Flash
player调试更有用的结果。当我们面对的是JIT层的函数或者想要分析漏洞存在的根本原因时，这种方法更加有用。
当我们分析IE浏览器的漏洞利用原理时，常见的技巧是将某个调试字符串作为参数，传递给某些不常用函数（如Math::Atan2()），将该函数插入程序中，同时在WinDBG中观察字符串的活动情况（我们可以通过WinDBG更好地观察内存和代码的布局，参考[
**此链接**](http://d0cs4vage.blogspot.co.il/2013/06/windbg-tricks-javascript-windbg.html)获取更详细信息）。
我们决定将这种技术应用到Flash
ActionScript中。我们可以通过这种方法，更好地了解漏洞利用过程中堆（heap）的分布情况，我们无法通过Flash
player调试器完成这一任务。通过插入某些不常用的函数（本例中我们使用的是JSON.stringify函数），我们能够打破字符串混淆的限制，查看字节数组的真实内容，因为这些数组都是被动态创建和分配的。
我们通过SWF文件的反汇编字节码，将不常用函数插入到SWF文件中，通过这种方法，绕过漏洞利用作者可能使用的任何对抗反编译器的技术。
这个方法主要包含两部分工作：
1、在WinDBG的合适位置设置断点；
2、使用我们的指示函数（即上文所述的不常用函数）hook原始的SWF文件。
由于Adobe并没有向公众提供调试符号，因此我们需要做一些逆向工程方面的工作。
**3.3.1 在WinDBG中设置必要的断点**