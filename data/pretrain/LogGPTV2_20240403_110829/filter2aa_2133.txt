# Universal Plug and Play (UPnP) Mapping Attacks
**Author: Daniel Garcia**

## Abstract
Universal Plug and Play (UPnP) is a widely used method for Network Address Translation (NAT) traversal in common household devices. This document examines various techniques that attackers can use to exploit the port mapping services of UPnP/IGD (Internet Gateway Device) devices on Wide Area Network (WAN) ports. It also introduces Umap, a tool capable of manual port-mapping (WAN to LAN, WAN to WAN), NAT traversal, and providing a SOCKSv4 proxy service that automatically maps to UPnP devices. Although devices with WAN ports allowing UPnP actions are less common, they still pose a significant security threat.

## Introduction
Universal Plug and Play (UPnP) is a technology developed by the UPnP Forum in 1999, primarily funded by Microsoft. The goal was to enable seamless device connectivity and simplify network implementations. However, this convenience comes at the cost of security, as UPnP lacks any form of authentication. This inherent insecurity is exacerbated when control points are configured to accept requests from both the Local Area Network (LAN) and WAN sides of the device. The most commonly exploited actions in UPnP are `AddPortMapping` and `DeletePortMapping`, which are used for port mapping to traverse the NAT.

## UPnP Steps
1. **Addressing**: Interaction with the addressing methods used by the devices. It establishes rules for devices that cannot obtain an address through DHCP.
2. **Discovery**: Devices use Simple Service Discovery Protocol (SSDP) to discover and announce their presence. They send multicast search requests using HTTPU, and control points respond with HTTPU packets specifying the location of the XML description file.
3. **Description**: After discovering the XML description file location, the device downloads the XML to identify available services and actions.
4. **Control**: Using the information from the description, the device sends SOAP requests to the control points to execute functions such as `AddPortMapping` and `DeletePortMapping`.
5. **Eventing**: Control points monitor changes in the devices.
6. **Presentation**: Refers to an HTML-based user interface for controlling and viewing the device status.

## Vulnerabilities
The first reported vulnerability in UPnP was a Denial of Service (DoS) attack on the Microsoft Windows 98/ME/XP stack, discovered by Ken from FTUSecurity. Subsequently, eEye published an advisory for a buffer overflow attack on the same stack. In 2003, Bj√∂rn Stickler reported an information disclosure vulnerability in the Netgear FM114P, which could be exploited using the `GetUserName` action. In 2006, Armijn Hemel highlighted a flaw where remote users could use UPnP to forward packets to external hosts, publishing his findings on www.upnp-hacks.org. This flaw is the basis for Umap's port mapping capabilities.

### Exploitation via Umap
Umap leverages the `AddPortMapping` and `DeletePortMapping` actions in the UPnP protocol. These actions are intended for devices on a LAN that need to traverse a NAT. However, if these control points are exposed on the WAN interfaces, attackers can map a port on the external IP to any desired host. This allows attackers to scan for hosts inside the NAT, forward traffic to external hosts, and forward traffic to internal hosts. Some routers have open control points by default, and some continue to accept UPnP requests even after disabling WAN requests.

Other vulnerabilities include information disclosure, command execution, and DoS. For example, attackers can obtain the MAC address, serial number, and device model from UPnP IGD devices on the WAN side, which can be used to locate or target specific modems.

## Umap
Umap is designed to operate in several modes:
- **Scanner for UPnP devices with exposed WAN control points**
- **SOCKSv4 proxy that forwards traffic through devices with exposed control points**
- **Scanner/mapper of internal hosts behind a NAT of a device with exposed control points**
- **Manual TCP/UDP mapping of exposed control points**

There are limited public PoCs for UPnP. A notable exploit by GNUCitizen uses JavaScript to send UPnP commands through a victim's browser. Another tool, Miranda by SecuriTeam, manipulates UPnP devices but is limited to LAN use due to its reliance on SSDP and multicast. Umap, however, skips the discovery step and directly fetches XML descriptions, making it suitable for scanning UPnP on WAN scenarios. It relies on a database of common locations and ports for XML description files and attempts to execute `AddPortMapping` and `DeletePortMapping` actions.

## Negative Aspects of UPnP Mapping
- **Performance**: Most UPnP devices are residential gateways with limited upload bandwidth. Vendors often cap the number of port mappings, reducing performance in high-traffic scenarios.
- **Logging**: Some devices log port mappings, but residential users rarely check these logs. Centralized logging solutions by operators could help mitigate this issue.

## Mitigations
- **Users**: Reconfigure devices to disallow WAN traffic to UPnP control points. Disabling UPnP entirely can be problematic for devices that require it for NAT traversal.
- **Operators**: Block WAN requests to client devices or deploy devices with base configurations that disable UPnP WAN requests. Blocking WAN traffic can interfere with user management interfaces, so using base configuration packages is preferable.

## Affected Devices
During a one-week scan of random DSL IP pools, over 150,000 vulnerable devices were identified. The Speedtouch stack is the most common, but many other devices may also be vulnerable.

| Manufacturer | Model | Version |
|--------------|-------|---------|
| Linksys      | WRT54GX | < 4.30.5 |
| Edimax       | BR-6104K | < 3.21 |
| Sitecom      | WL-153 | < 1.39 |
| Speedtouch/Alcatel/Thomson | 5x6 | < 6.2.29 |
| Thomson      | TG585 v7 | < 7.4.3.2 |

This document aims to raise awareness about the security risks associated with UPnP and provide guidance on mitigating these vulnerabilities.