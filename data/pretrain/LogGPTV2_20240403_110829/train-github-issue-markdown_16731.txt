`Granularity.getIterable(Interval)` returns an iterable of chunked intervals
by the granularity. For example,
`DAY.getIterable(Intervals.of("2019-01-01/2019-01-03"))` returns
`2019-01-01/2019-01-02` and `2019-01-02/2019-01-03`. This method is currently
being used in indexing service (`UniformGranularitySpec`) as well as query
processing (`makeCursors()` in `QueryableIndexStorageAdapter` and
`IncrementalIndexStorageAdapter`).
But, the current behavior of this method is somewhat different from my
expectation. The endTime of the last interval is not bound by the input
interval. For example,
`DAY.getIterable(Intervals.of("2019-01-01T00:00:00/2019-01-03T12:00:00"))`
returns the below 3 intervals.
    2019-01-01T00:00:00.000Z/2019-01-02T00:00:00.000Z
    2019-01-02T00:00:00.000Z/2019-01-03T00:00:00.000Z
    2019-01-03T00:00:00.000Z/2019-01-04T00:00:00.000Z
The last interval is `2019-01-03/2019-01-04` is not contained the input
interval `2019-01-01T00:00:00/2019-01-03T12:00:00`.
Sometimes, even the startTime of the first interval is not bound too.
`WEEK.getIterable(Intervals.of("2019-01-01/2019-01-11"))` returns
    2018-12-31T00:00:00.000Z/2019-01-07T00:00:00.000Z
    2019-01-07T00:00:00.000Z/2019-01-14T00:00:00.000Z
This is because PeriodGranularity sets the start day to Monday.
I'm not sure this makes sense. The query result may contain timestamps of not
specified in the query spec which can mislead users. This can be even worse
when it comes to indexing because reindexing tasks can overshadow segments
unexpectedly.
I think probably it's better to clip off the end time of the last interval
(and maybe the start time of the first interval too), but not sure what was
the initial intention.
Any thoughts?