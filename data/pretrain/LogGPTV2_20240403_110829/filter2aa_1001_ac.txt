sun.rmi.registry.RegistryImpl_Skel#dispatch  )。
6. Skeleton 调⽤ RemoteCall 反序列化 RMI 客户端传过来的序列化。
7. Skeleton 处理客户端请求：bind、list、lookup、rebind、unbind，如果是 lookup 则查找 RMI 服务名绑定
的接⼝对象，序列化该对象并通过 RemoteCall 传输到客户端。
8. RMI 客户端反序列化服务端结果，获取远程对象的引⽤。
9. RMI 客户端调⽤远程⽅法，RMI服务端反射调⽤RMI服务实现类的对应⽅法并序列化执⾏结果返回给客户端。
10. RMI 客户端反序列化 RMI 远程⽅法调⽤结果。
四、攻击 RMI
有了以上的知识铺垫，相信你对 Java RMI 的具体调⽤过程已经有了相关的了解了，此时去看 Longofo 师傅或
threedr3am 师傅的相关⽂章应该没有问题了，那么接下来我们就开始讨论 RMI 攻击。
参与⼀次 RMI 调⽤的有三个⻆⾊，分别是 Server 端，Registry 端和 Client 端。严格意义上来讲，只有 Registry 端
和使⽤ Registry 的端，因为 Registry 端只负责查询和传递引⽤，真正的⽅法调⽤是不需要经过 Registry 端的，只
不过注册服务的我们称之为 Server 端，使⽤服务的我们称之为 Client 端。有⼀种我只负责帮你找到⼈，⾄于你找
这个⼈做什么⾮法勾当我不管的感觉，不过为了更清晰的划分不同⻆⾊，我们还是将其分为三个⻆⾊，⽽通常情况
下，Server 端和 Registry 端是同⼀端。
在上⾯的 RMI 调⽤过程中我们可以发现，全部的通信流程均通过反序列化实现，⽽且在三个⻆⾊中均进⾏了反序列
化的操作。那也就说明针对三端都有攻击的可能，我们依次来看⼀下。
1. 攻击 Server 端
① 恶意服务参数
在 Client 端获取到 Server 端创建的 Stub 后，会在本地调⽤这个 Stub 并传递参数，Stub 会序列化这个参数，并传
递给 Server 端，Server 端会反序列化 Client 端传⼊的参数并进⾏调⽤，如果这个参数是 Object 类型的情况下，
Client 端可以传给 Server 端任意的类，直接造成反序列化漏洞。
例如，远程调⽤的接⼝ RemoteInterface 存在⼀个 sayGoodbye  ⽅法的参数是 Object 类型。
那我们就直接可以传⼀个反序列化 payload 进去执⾏，这⾥我以 CC6 弹计算器为例：
直接弹计算器没商量。这部分就是纯纯的 Java 原⽣反序列化漏洞的利⽤过程，不多说。进⼊下⼀个思考，如果参
数类型不是 Object 类型，那能否进⾏攻击？
答案也是可以的。
在⼀般条件下，通常保证 Server 端和 Client 端调⽤的服务接⼝是⼀样的，那如果不⼀致会怎么样？我们在服务端
的接⼝ RemoteInterface 中定义⼀个 sayHello  ⽅法，他接收⼀个在 Server 端存在的 HelloObject 类作为参数。
但是在 Client 端，我们却定义了⼀个接收 Object 参数的⽅法：
那这样能否触发反序列化漏洞呢？我们会发现在尝试调⽤过程中会抛出异常 unrecognized method hash:
method not supported by remote object
其实就是在服务端没有找到对应的调⽤⽅法。这个找对应⽅法我们之前说过，是在 UnicastServerRef 的
dispatch  ⽅法中在 this.hashToMethod_Map  中通过 Method 的 hash 来查找的。这个 hash 实际上是⼀个基
于⽅法签名的 SHA1 hash 值。
那有没有⼀种可能，我们传递的是 Server 端能找到的参数是 HelloObject 的 Method 的 hash，但是传递的参数却
不是 HelloObject ⽽是恶意的反序列化数据（可能是 Object或其他的类）呢？
答案是可以的，在 mogwailabs 的 PPT 中提出了以下 4 种⽅法：
通过⽹络代理，在流量层修改数据
⾃定义 “java.rmi” 包的代码，⾃⾏实现
字节码修改
使⽤ debugger
并且在 PPT 中还给出了 hook 点，那就是动态代理中使⽤的 RemoteObjectInvocationHandler 的
invokeRemoteMethod  ⽅法。
接下来我们尝试⼀下，由于是学习和测试，这⾥将使⽤最⽅便的 debugger ⽅式。Afant1 师傅使⽤了 Java Agent
的⽅式，在这篇⽂章⾥，0c0c0f 师傅使⽤了流量层的替换，在这篇⽂章⾥，有兴趣的师傅请⾃⾏查看。
Server 端代码不变，我们在 Client 端将 Object 参数和 HelloObject 参数的 sayHello  ⽅法都写上，如下：
调⽤时，依旧使⽤ Object 参数的 sayHello  ⽅法调⽤。
在 RemoteObjectInvocationHandler 的 invokeRemoteMethod  ⽅法处下断，将 Method 改为服务端存在的
HelloObject 的 Method。
发起调⽤，成功弹出计算器。
那么利⽤这种⽅式，就⼤⼤的扩展了利⽤链。RMI 的反序列化逻辑位于
sun.rmi.server.UnicastRef#unmarshalValue ，如下：
可以看到，除了基础数据类型，其他的类型均会调⽤ readObject 进⾏反序列化，甚⾄原本 String 类型的参数也会
⾛ readObject 反序列化，那么结合之前的替换⼿段，总结起来就是：
Server 端的调⽤⽅法存在⾮基础类型的参数时，就可以被恶意 Client 端传⼊恶意数据流触发反序列化漏洞。
② 动态类加载
之前讨论过，RMI 有⼀个重要的特性，就是动态类加载机制，当本地 ClassPath 中⽆法找到相应的类时，会在指定
的 codebase ⾥加载 class。这个特性在 6u45/7u21 之前都是默认开启的。
为了能够远程加载⽬标类，需要 Server 加载并配置 SecurityManager，并设置
java.rmi.server.useCodebaseOnly=false 。
Server 端调⽤ UnicastServerRef 的 dispatch  ⽅法处理客户端请求，调⽤ unmarshalParameters  ⽅法反序列
化客户端传来的参数。
反序列化过程由 RMI 封装类 MarshalInputStream 来实现，会调⽤ resolveClass  来解析 Class。
⾸先通过 this.readLocation()  ⽅法读取流中序列化的 java.rmi.server.codebase  地址，这部分信息是
Client 端传来的，然后判断 this.useCodebaseOnly  的值必须为 false，最后调⽤
RMIClassLoader.loadClass()  ⽅法加载类，这部分实际上是委托 sun.rmi.server.LoaderHandler  来实现
的，最终调⽤ loadClassForName  ⽅法，通过 Class.forName()  传⼊⾃定义类加载器
LoaderHandler$Loader  来从远程地址加载类。
⽽ LoaderHandler$Loader  是 URLClassLoader 的⼦类。
⽆论 Server 端还是 Client 端，只要有⼀端配置了 java.rmi.server.codebase ，这个属性都会跟随数据流在两
端流动。
因此 Client 端可以通过配置此项属性，并向 Server 端传递不存在的类，使 Server 端试图从
java.rmi.server.codebase  地址中远程加载恶意类⽽触发攻击。
③ 替身攻击
在讨论对 Server 端的攻击时，还出现了另外⼀种针对参数的攻击思路，我称其为替身攻击。依旧是⽤来绕过当参
数不是 Object，是指定类型，但是还想触发反序列化的⼀种讨论。
⼤体的思路就是调⽤的⽅法参数是 HelloObject ，⽽攻击者希望使⽤ CC 链来反序列化，⽐如使⽤了⼀个⼊⼝点
为 HashMap 的 POC，那么攻击者在本地的环境中将 HashMap 重写，让 HashMap 继承 HelloObject，然后实现
反序列化漏洞攻击的逻辑，⽤来欺骗 RMI 的校验机制。
这的确是⼀种思路，但是还不如 hook RMI 代码修改逻辑来得快，所以这⾥不进⾏测试。
2. 攻击 Registry 端
在使⽤ Registry 时，⾸先由 Server 端向 Registry 端绑定服务对象，这个对象是⼀个 Server 端⽣成的动态代理
类，Registry 端会反序列化这个类并存在⾃⼰的 RegistryImpl 的 bindings 中，以供后续的查询。所以如果我们是
⼀个恶意的 Server 端，向 Registry 端输送了⼀个恶意的对象，在其反序列化时就可以触发恶意调⽤。
可以看到这⾥我依旧是⽤了 CC6 ，因为 bind 的参数是需要是 Remote 类型的，所以这⾥使⽤了
AnnotationInvocationHandler 来代理了 Remote 接⼝，形成了反序列化漏洞。
这⾥需要 Registry 端具有相应的依赖及相应 JDK 版本需求，对于 JDK 版本的讨论将在后⾯进⾏。
这个攻击⼿段实际上就是 ysoserial 中的 ysoserial.exploit.RMIRegistryExploit 的实现原理。
除了 bind，由于 lookup/rebind 等⽅法均通过反序列化传递数据，因此此处的实际攻击⼿段不⽌ bind ⼀种。也就
是说，名义上的 Server 端和 Client 端都可以攻击 Registry 端。
3. 攻击 Client 端
如果攻击的⽬标作为 Client 端，也就是在 Registry 地址可控，或 Registry/Server 端可控，也是可以导致攻击的。
客户端主要有两个交互⾏为，第⼀是从 Registry 端获取调⽤服务的 stub 并反序列化，第⼆步是调⽤服务后获取执
⾏结果并反序列化。
这部分攻击实战意义较少，并且与上述讨论的攻击 Server 端和 Registry 端的攻击都是镜像⾏为，所以这⾥简单描
述⼀下流程就不再演示了。
① 恶意 Server Stub
同攻击 Registry 端，Client 端在 Registry 端 lookup 后会拿到⼀个 Server 端注册在 Registry 端的代理对象并反序
列化触发漏洞。
② 恶意 Server 端返回值
同攻击 Server 端的恶意服务参数，Server 端返回给 Client 端恶意的返回值，Client 端反序列化触发漏洞，不再赘
述。
③ 动态类加载
同攻击 Server 端的动态类加载，Server 端返回给 Client 端不存在的类，要求 Client 端去 codebase 地址远程加载
恶意类触发漏洞，不再赘述。
4. 攻击 DGC
在之前的调试过程中，也曾看到过 DGC 相关的代码，不过没有分析，统⼀在这⾥来说。
DGC（Distributed Garbage Collection）—— 分布式垃圾回收，当 Server 端返回⼀个对象到 Client 端（远程⽅法
的调⽤⽅）时，其跟踪远程对象在 Client 端中的使⽤。当再没有更多的对 Client 远程对象的引⽤时，或者如果引⽤
的“租借”过期并且没有更新，服务器将垃圾回收远程对象。启动⼀个 RMI 服务，就会伴随着 DGC 服务端的启动。
RMI 定义了⼀个 java.rmi.dgc.DGC  接⼝，提供了两个⽅法 dirty  和 clean ：
客户端想要使⽤服务端上的远程引⽤，使⽤ dirty  ⽅法来注册⼀个。同时这还跟租房⼦⼀样，过段时间继续
⽤的话还要再调⽤⼀次来续租。
客户端不使⽤的时候，需要调⽤ clean  ⽅法来清楚这个远程引⽤。
这个接⼝有两个实现类，分别是 sun.rmi.transport.DGCImpl  以及 sun.rmi.transport.DGCImpl_Stub ，同
时还定义了 sun.rmi.transport.DGCImpl_Skel 。
这个命名⽅式是不是看着⾮常眼熟呢？
很像 Registry、RegistryImpl、RegistryImpl_Stub、RegistryImpl_Skel，实际上不单是命名相近，处理逻辑也是类
似的。通过在服务端和客户端之间传递引⽤，依旧是 Stub 与 Skel 之间的通信模式：Server 端启动 DGCImpl，在