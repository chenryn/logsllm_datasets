Scaling WAL Performance
Eliminate replication lag and reduce startup times with pg_prefaulter
What is WAL?
W
Write
A
Ahead
L
Log
Where is WAL?
% tree -ld $PGDATA/
!"" base
# !"" 1
# !"" 12668
The "heap" (a.k.a. your data)
# $"" 12669
W
Write
!"" global
!"" pg_clog
!"" pg_commit_ts
!"" pg_dynshmem
!"" pg_logical
# !"" mappings
A
# $"" snapshots
Ahead
!"" pg_multixact
# !"" members
# $"" offsets
!"" pg_notify
!"" pg_replslot
!"" pg_serial
L
Log !"" pg_snapshots
!"" pg_stat
!"" pg_stat_tmp
!"" pg_subtrans
WAL files
!"" pg_tblspc
!"" pg_twophase
$"" pg_xlog
$"" archive_status
pg_xlog/
% ls -lA $PGDATA/pg_xlog/
-rw------- 1 seanc staff 16777216 May 31 12:02 $PGDATA/pg_xlog/000000010000000000000001
-rw------- 1 seanc staff 16777216 May 31 12:02 $PGDATA/pg_xlog/000000010000000000000002
-rw------- 1 seanc staff 16777216 May 31 12:02 $PGDATA/pg_xlog/000000010000000000000003
-rw------- 1 seanc staff 16777216 May 31 12:02 $PGDATA/pg_xlog/000000010000000000000004
Heaps of SQL
postgres@[local]:5432/postgres# CREATE DATABASE test; Creates new DB
CREATE DATABASE
Time: 358.395 ms
^Z
% tree -ld $PGDATA/base
!"" 1
!"" 12668
!"" 12669
$"" 16387 New directory
4 directories
Table Data as Files
postgres@[local]:5432/postgres# \c test
You are now connected to database "test" as user "postgres".
postgres@[local]:5432/test# CREATE TABLE t1 (i INT);
CREATE TABLE
Time: 2.273 ms
postgres@[local]:5432/test# SELECT pg_relation_filepath('t1');
pg_relation_filepath
----------------------
base/16387/16388
(1 row)
Time: 1.160 ms
^Z
% stat -f "%Sp %z %N" $PGDATA/base/16387/16388
-rw------- 0 $PGDATA/base/16387/16388
Empty file
Physical Storage of Data
postgres@[local]:5432/test# INSERT INTO t1 VALUES (1);
INSERT 0 1
Time: 0.581 ms
^Z
% stat -f "%Sp %z %N" $PGDATA/base/16387/16388
-rw------- 8192 $PGDATA/base/16387/16388
% fg
postgres@[local]:5432/test# INSERT INTO t1 VALUES (2);
UPDATE 1
Time: 5.985 ms
^Z
% stat -f "%Sp %z %N" $PGDATA/base/16387/16388
-rw------- 8192 $PGDATA/base/16387/16388
PG Page Size (8K)
How does the WAL relate to the heap?
1. Modifications to the heap are
appended to the WAL first
W
Write
2. Committed transactions in the WAL
are applied in the heap during a
A
Ahead CHECKPOINT
3. Crash recovery walks backwards
L through the WAL to the last
Log
completed CHECKPOINT (then rolls
forward through committed
transactions to prevent data loss)
Things to keep in mind
1. The WAL receives sequential append
operations
W
Write
2. WAL can be read forward and backwards
A
3. Recently written transaction data exists
Ahead
only in memory and in WAL
4. WAL is probably your performance friend
L
Log
(deferred random IO against the heap)
Tuples, Pages, Relations, and you!
https://momjian.us/main/writings/pgsql/internalpics.pdf
https://momjian.us/main/writings/pgsql/mvcc.pdf
https://www.postgresql.org/docs/current/static/wal.html
Why do you care about apply lag?
synchronous_commit="remote_write"
© 2018 Joyent. All rights reserved. Joyent Confidential !11
Manta is an HTTP Frontend to ZFS
LB
• Files distributed across different ZFS storage servers
Frontend
• Metadata stored in PostgreSQL
PG PG
primary follower
ZFS
PG
async
C sa mu gt pri ao emn t: ms ah a na y p hae p es p yi n e a at ch r t ue m ao l l yr e a r e
t
d i a h
l
i
PostgreSQL Replication is Awesome
synchronous_commit="XXX"
???
PG PG
primary follower
?
?
?
PG
async
ez-mode HA Durability FTW
synchronous_commit="XXX"
remote_write
PG PG
primary follower
n
o
PG
async
Hardware fails right on time, every time
synchronous_commit="XXX"
remote_write
PG PG
primary follower
n
o
PG
async
CAP: Can haz A?
This isn't a hardware problem
synchronous_commit="XXX"
remote_write
PG PG
primary follower
n
o
PG
async
It's gunna be a while, m'kay?
...oh
HINT: That's 19hrs of apply lag
How did
we get
into this
mess?
Cloudy with a chance of
single threaded execution
© 2018 Joyent. All rights reserved. Joyent Confidential !20
Context is everything
INSERT INTO...
PG PG
primary follower
WAL Stream
-50K DKP
"Many [INSERTS], handle it!"
INSERT INTO...
PG
primary
Context is everything?
INSERT INTO...
PG PG
primary follower
WAL Stream
OH HAI!
INSERT INTO...
PG PG
primary follower
pg pg pg pg pg pg
WAL Stream
WAL Receiver
WAL Sender
If we're lucky...
Userspace:
Filesystem Cache Disk IO