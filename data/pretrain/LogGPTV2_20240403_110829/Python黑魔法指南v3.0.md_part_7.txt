if (age:= 20) > 18:
print("")
第二个用法：while
在不使用 海象运算符之前，使用 while 循环来读取文件的时候，你也许会这么写
file = open("demo.txt", "r")
while True:
line = file.readline()
if not line:
break
print(line.strip())
但有了海象运算符之后，你可以这样
file = open("demo.txt", "r")
while (line := file.readline()):
print(line.strip())
使用它替换以往的无限 while 循环写法更为惊艳
比如，实现一个需要命令行交互输入密码并检验的代码，你也许会这样子写
while True:
p = input("Enter the password: ")
if p == "youpassword":
break
有了海象运算符之后，这样子写更为舒服
while (p := input("Enter the password: ")) != "youpassword":
continue
第三个用法：推导式
这个系列的文章，几乎每篇都能看到推导式的身影，这一篇依旧如此。
在编码过程中，我很喜欢使用推导式，在简单的应用场景下，它简洁且不失高效。
如下这段代码中，我会使用列表推导式得出所有会员中过于肥胖的人的 bmi 指数
members = [
{"name": "", "age": 23, "height": 1.75, "weight": 72},
{"name": "", "age": 17, "height": 1.72, "weight": 63},
{"name": "", "age": 20, "height": 1.78, "weight": 82},
]
count = 0
def get_bmi(info):
global count
count += 1
print(f" {count} ")
height = info["height"]
weight = info["weight"]
return weight / (height**2)
##  bmi 
fat_bmis = [get_bmi(m) for m in members if get_bmi(m) > 24]
print(fat_bmis)
输出如下
 1 
 2 
 3 
 4 
[25.88057063502083]
可以看到，会员数只有 3 个，但是 get_bmi 函数却执行了 4 次，原因是在判断时执行了 3 次，而
在构造新的列表时又重复执行了一遍。
如果所有会员都是过于肥胖的，那最终将执行 6 次，这种在大量的数据下是比较浪费性能的，因此
对于这种结构，我通常会使用传统的for 循环 + if 判断。
fat_bmis = []
##  bmi 
for m in members:
bmi = get_bmi(m)
if bmi > 24:
fat_bmis.append(bmi)
在有了海象运算符之后，你就可以不用在这种场景下做出妥协。
##  bmi 
fat_bmis = [bmi for m in members if (bmi := get_bmi(m)) > 24]
最终从输出结果可以看出，只执行了 3 次
 1 
 2 
 3 
[25.88057063502083]
这里仅介绍了列表推导式，但在字典推导式和集合推导式中同样适用。不再演示。
海象运算符，是一个新奇的特性，有不少人觉得这样这种特性会破坏代码的可读性。确实在一个新
鲜事物刚出来时是会这样，但我相信经过时间的沉淀后，越来越多的人使用它并享受它带来的便利
时，这种争议也会慢慢消失在历史的长河中。
3.7 模块重载的五种方法
环境准备
新建一个 foo 文件夹，其下包含一个 bar.py 文件
$ tree foo
foo
"## bar.py
0 directories, 1 file
bar.py 的内容非常简单，只写了个 print 语句
print("successful to be imported")
只要 bar.py 被导入一次，就被执行一次 print
禁止重复导入
由于有 sys.modules 的存在，当你导入一个已导入的模块时，实际上是没有效果的。
>>> from foo import bar
successful to be imported
>>> from foo import bar
>>>
重复导入方法一
如果你使用的 python2（记得前面在 foo 文件夹下加一个 __init__.py ），有一个 reload 的方法
可以直接使用
>>> from foo import bar
successful to be imported
>>> from foo import bar
>>>
>>> reload(bar)
successful to be imported
如果你使用的 python3 那方法就多了，详细请看下面
重复导入方法二
如果你使用 Python3.0 -> 3.3，那么可以使用 imp.reload 方法
>>> from foo import bar
successful to be imported
>>> from foo import bar
>>>
>>> import imp
>>> imp.reload(bar)
successful to be imported
但是这个方法在 Python 3.4+，就不推荐使用了
:1: DeprecationWarning: the imp module is deprecated in favour of importlib;
see the module's documentation for alternative uses
重复导入方法三
如果你使用的 Python 3.4+，请使用 importlib.reload 方法
>>> from foo import bar
successful to be imported
>>> from foo import bar
>>>
>>> import importlib
>>> importlib.reload(bar)
successful to be imported
重复导入方法四
如果你对包的加载器有所了解（详细可以翻阅我以前写的文章：https://iswbm.com/84.html）
还可以使用下面的方法
>>> from foo import bar
successful to be imported
>>> from foo import bar
>>>
>>> bar.__spec__.loader.load_module()
successful to be imported
重复导入方法五
既然影响我们重复导入的是 sys.modules，那我们只要将已导入的包从其中移除是不是就好了呢？
>>> import foo.bar
successful to be imported
>>>
>>> import foo.bar
>>>
>>> import sys
>>> sys.modules['foo.bar']
>>> del sys.modules['foo.bar']
>>>
>>> import foo.bar
successful to be imported
有没有发现在前面的例子里我使用的都是 from foo import bar ，在这个例子里，却使用
import foo.bar ，这是为什么呢？
这是因为如果你使用 from foo import bar 这种方式，想使用移除 sys.modules 来重载模块这种
方法是失效的。
这应该算是一个小坑，不知道的人，会掉入坑中爬不出来。
>>> import foo.bar
successful to be imported
>>>
>>> import foo.bar
>>>
>>> import sys
>>> del sys.modules['foo.bar']
>>> from foo import bar
>>>
3.8 Python 转义的五种表示法
1. 为什么要有转义？
ASCII 表中一共有 128 个字符。这里面有我们非常熟悉的字母、数字、标点符号，这些都可以从我
们的键盘中输出。除此之外，还有一些非常特殊的字符，这些字符，我通常很难用键盘上的找到，
比如制表符、响铃这种。
为了能将那些特殊字符都能写入到字符串变量中，就规定了一个用于转义的字符 \ ，有了这个字
符，你在字符串中看的字符，print 出来后就不一定你原来看到的了。
举个例子
>>> msg = "hello\013world\013hello\013python"
>>> print(msg)
hello
world
hello
python
>>>
是不是有点神奇？变成阶梯状的输出了。
那个 \013 又是什么意思呢？
\ 是转义符号，上面已经说过
013 是 ASCII 编码的八进制表示，注意前面是 0 且不可省略，而不是字母 o
把八进制的 13 转成 10 进制后是 11
对照查看 ASCII 码表，11 对应的是一个垂直定位符号，这就能解释，为什么是阶梯状的输出字符
串。
2. 转义的 5 种表示法
ASCII 有 128 个字符，如果用 八进制表示，至少得有三位数，才能将其全部表示。这就是为什么说
上面的首位 0 不能省略的原因，即使现在用不上，我也得把它空出来。
而如果使用十六进制，只要两位数就其 ASCII 的字符全部表示出来。同时为了避免和八进制的混淆
起来，所以在 \ 后面要加上英文字母 x 表示十六进制，后面再接两位十六进制的数值。
\ 开头并接三位 0-7 的数值，表示 8 进制
\x 开头并接两位 0-f 的数值，表示 16进制
因此，当我定义一个字符串的值为 hello + 回车 + world 时，就有了多种方法：
## 8
>>> msg = "hello\012world"
>>> print(msg)
hello
world
>>>
## 16 
>>> msg = "hello\x0aworld"
>>> print(msg)
hello
world
>>>
通常我们很难记得住一个字符的 ASCII 编号，即使真记住了，也要去转换成八进制或者16进制，实
在是太难了。
因此对于一些常用并且比较特殊字符，我们习惯用另一种类似别名的方式，比如使用 \n 表示换
行，它与 \012 、 \x0a 是等价的。
与此类似的表示法，还有如下这些
于是，要实现 hello + 回车 + world ，就有了第三种方法
## 
>>> msg = "hello\nworld"
>>> print(msg)
hello
world
>>>
到目前为止，我们掌握了 三种转义的表示法。
已经非常难得了，让我们的脑洞再大一点吧，接下来再介绍两种。
ASCII 码表所能表示字符实在太有限了，想打印一个中文汉字，抱歉，你得借助 Unicode 码。
Unicode 编码由 4 个16进制数值组合而成
>>> print("\u4E2D")
什么？我为什么知道  的 unicode 是 \u4E2D ？像下面这样打印就知道啦
## Python 2.7
>>> a = u""
>>> a
u'\u4e2d'
由此，要实现 hello + 回车 + world ，就有了第四种方法。
##  unicode \u000a 
>>> print('hello\u000aworld')
hello
world
看到这里，你是不是以为要结束啦？
不，还没有。下面还有一种。
Unicode 编码其实还可以由 8 个32进制数值组合而成，为了以前面的区分开来，这里用 \U 开头。
##  unicode \U0000000A 
>>> print('hello\U0000000Aworld')
hello
world
好啦，目前我们掌握了五种转义的表示法。
总结一下：
1. \ 开头并接三位 0-7 的数值（八进制） --- 可以表示所有ASCII 字符
2. \x 开头并接两位 0-f 的数值（十六进制） --- 可以表示所有ASCII 字符
3. \u 开头并接四位 0-f 的数值（十六进制） --- 可以表示所有 Unicode 字符
4. \U 开头并接八位 0-f 的数值（三十二进制）） --- 可以表示所有 Unicode 字符
5. \ 开头后接除 x、u、U 之外的特定字符 --- 仅可表示部分字符
为什么标题说，转义也可以炫技呢？
试想一下，假如你的同事，在打印日志时，使用这种 unicode 编码，然后你在定位问题的时候使用
这个关键词去搜，却发现什么都搜不到？这就扑街了。
虽然这种行为真的很 sb，但在某些人看来也许是非常牛逼的操作呢？
五种转义的表示法到这里就介绍完成，接下来是更多转义相关的内容，也是非常有意思的内容，有
兴趣的可以继续往下看。
3. raw 字符串
当一个字符串中具有转义的字符时，我们使用 print 打印后，正常情况下，输出的不是我们原来在
字符串中看到的那样子。
那如果我们需要输出 hello\nworld ，不希望 Python 将 \n 转义成 换行符呢？
这种情况下，你可以在定义时将字符串定义成 raw 字符串，只要在字符串前面加个 r 或者 R 即
可。
>>> print(r"hello\nworld")
hello\nworld
>>>
>>> print(R"hello\nworld")
hello\nworld
然而，不是所有时候都可以加 r 的，比如当你的字符串是由某个程序/函数返回给你的，而不是你
自己生成的
##  "hello\nworld"
>>> body = spider()
>>> print(body)
hello
world
这个时候打印它， \n 就是换行打印。
4. 使用 repr
对于上面那种无法使用 r 的情况，可以试一下 repr 来解决这个需求：
>>> body = repr(spider())
>>> print(body)
'hello\nworld'
经过 repr 函数的处理后，为让 print 后的结果，接近字符串本身的样子，它实际上做了两件事
1. 将 \ 变为了 \\
2. 在字符串的首尾添加 ' 或者 "
你可以在 Python Shell 下敲入 变量 回车，就可以能看出端倪。
首尾是添加 ' 还是 " ，取决于你原字符串。
>>> body="hello\nworld"
>>> repr(body)
"'hello\\nworld'"
>>>
>>>
>>> body='hello\nworld'
>>> repr(body)
"'hello\\nworld'"
5. 使用 string_escape
如果你还在使用 Python 2 ，其实还可以使用另一种方法。
那就是使用 string.encode('string_escape') 的方法，它同样可以达到 repr 的效果
>>> "hello\nworld".encode('string_escape')
'hello\\nworld'
>>>
6. 查看原生字符串
综上，想查看原生字符串有两种方法：
1. 如果你在 Python Shell 交互模式下，那么敲击变量回车
2. 如果不在 Python Shell 交互模式下，可先使用 repr 处理一下，再使用 print 打印
>>> body="hello\nworld"
>>>
>>> body
'hello\nworld'
>>>
>>> print(repr(body))
'hello\nworld'
>>>
7. 恢复转义：转成原字符串
经过 repr 处理过或者 \\ 取消转义过的字符串，有没有办法再回退出去，变成原先的有转义的
字符串呢？
答案是：有。