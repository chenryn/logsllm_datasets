            $result = $domain->check($this->request, $url, $completeMatch);
            if (false === $result && !empty($this->cross)) {
                // 检测跨域路由
                $result = $this->cross->check($this->request, $url, $completeMatch);
            }
            if (false !== $result) {
                // 路由匹配
                return $result;
            } elseif ($must) {
                // 强制路由不匹配则抛出异常
                throw new RouteNotFoundException();
            }
            // 默认路由解析
            return new UrlDispatch($this->request, $this->group, $url, [
                'auto_search' => $this->autoSearchController,
            ]);
        }
首先把$url中的 `/` 替换为 `|`
，由于这里用的是默认配置，所以会直接跳转到return行，这里的返回值实例化了一个UrlDispatch类，并传入了几个参数，这里定位到UrlDispatch定义处，可以发现这是一个路由别名，
`use think\route\dispatch\Url as UrlDispatch;`
### 路由解析
接下来就是路由解析的过程
调用到`autoload`函数来自动加载该类，并且调用到了其父类 `Dispatch`
的构造方法(`__construct`)，将参数值赋值给`$this`中，接下来就会跳转回`routeCheck()`方法，返回$dispatch，由于Url类中对父类的`init()`方法做了重写接下来会调用Url类中的`init()`方法，跟进看一下
    public function init()
    {
        // 解析默认的URL规则
        $result = $this->parseUrl($this->dispatch);
        return (new Module($this->request, $this->rule, $result))->init();
    }
函数调用了`parseUrl()`对URL进行解析，继续跟进
    protected function parseUrl($url)
        {
            $depr = $this->rule->getConfig('pathinfo_depr');
            $bind = $this->rule->getRouter()->getBind();
            if (!empty($bind) && preg_match('/^[a-z]/is', $bind)) {
                $bind = str_replace('/', $depr, $bind);
                // 如果有模块/控制器绑定
                $url = $bind . ('.' != substr($bind, -1) ? $depr : '') . ltrim($url, $depr);
            }
            list($path, $var) = $this->rule->parseUrlPath($url);
            if (empty($path)) {
                return [null, null, null];
            }
            // 解析模块
            $module = $this->rule->getConfig('app_multi_module') ? array_shift($path) : null;
            if ($this->param['auto_search']) {
                $controller = $this->autoFindController($module, $path);
            } else {
                // 解析控制器
                $controller = !empty($path) ? array_shift($path) : null;
            }
            // 解析操作
            $action = !empty($path) ? array_shift($path) : null;
            // 解析额外参数
            if ($path) {
                if ($this->rule->getConfig('url_param_type')) {
                    $var += $path;
                } else {
                    preg_replace_callback('/(\w+)\|([^\|]+)/', function ($match) use (&$var) {
                        $var[$match[1]] = strip_tags($match[2]);
                    }, implode('|', $path));
                }
            }
            $panDomain = $this->request->panDomain();
            if ($panDomain && $key = array_search('*', $var)) {
                // 泛域名赋值
                $var[$key] = $panDomain;
            }
            // 设置当前请求的参数
            $this->request->setRouteVars($var);
            // 封装路由
            $route = [$module, $controller, $action];
            if ($this->hasDefinedRoute($route, $bind)) {
                throw new HttpException(404, 'invalid request:' . str_replace('|', $depr, $url));
            }
            return $route;
        }
直接跳转到48行，可以看到框架调用到了rule的parseUrlPath方法对$url进行分割操作，将参数整理为一个数组
并将返回的$path和$var赋值给parseUrl中的$path和$var
下面利用`array_shift`对`$path`进行解析即依次移出数组中的第一个元素并赋值给模块、控制器、操作和额外参数，并在封装路由处将`$module`、`$controller`、`$action`封装进`$route`中，返回
回到Url的`init()`函数中，此时流程到了return处，这里实例化了一个Dispatch的子类Module类，并调用了其init方法，F7跟进可以看到调用到了autoload函数和Request的构造方法，同样是赋值操作
跟进到init方法
    public function init()
        {
            parent::init();
            $result = $this->dispatch;
            if (is_string($result)) {
                $result = explode('/', $result);
            }
            if ($this->rule->getConfig('app_multi_module')) {
                // 多模块部署
                $module    = strip_tags(strtolower($result[0] ?: $this->rule->getConfig('default_module')));
                $bind      = $this->rule->getRouter()->getBind();
                $available = false;
                if ($bind && preg_match('/^[a-z]/is', $bind)) {
                    // 绑定模块
                    list($bindModule) = explode('/', $bind);
                    if (empty($result[0])) {
                        $module = $bindModule;
                    }
                    $available = true;
                } elseif (!in_array($module, $this->rule->getConfig('deny_module_list')) && is_dir($this->app->getAppPath() . $module)) {
                    $available = true;
                } elseif ($this->rule->getConfig('empty_module')) {
                    $module    = $this->rule->getConfig('empty_module');
                    $available = true;
                }
                // 模块初始化
                if ($module && $available) {
                    // 初始化模块
                    $this->request->setModule($module);
                    $this->app->init($module);
                } else {
                    throw new HttpException(404, 'module not exists:' . $module);
                }
            }
            // 是否自动转换控制器和操作名
            $convert = is_bool($this->convert) ? $this->convert : $this->rule->getConfig('url_convert');
            // 获取控制器名
            $controller       = strip_tags($result[1] ?: $this->rule->getConfig('default_controller'));
            $this->controller = $convert ? strtolower($controller) : $controller;
            // 获取操作名
            $this->actionName = strip_tags($result[2] ?: $this->rule->getConfig('default_action'));
            // 设置当前请求的控制器、操作
            $this->request
                ->setController(Loader::parseName($this->controller, 1))
                ->setAction($this->actionName);
            return $this;
        }
这里调用到了父类Dispatch的init方法，接下来在38行处对`$result[0]`也就是访问的模块做`strip_tags`处理，然后跳到了49行做了两个判断：第一个是判断`$module`是否在`deny_module_list(禁止访问模块)`中，第二个是判断这个模块是否存在，若是都满足则会令`$available=true`，这样在57行开始的判断中才会做初始化模块的操作而不是throw一个404错误出来
接下来就是对控制器和操作strip_tags的操作并且赋值给$this，设置当前请求的控制器、操作，将这些信息保存到当前的$this中
### 路由调度
跳转回run函数中来，记录信息这些操作略过，直接来到431行，这里调用了add函数，并将一个匿名函数作为参数传入
跟进后发现，函数中将`$middleware`也就是匿名函数赋值给了 `$queue[route][]`
接下来返回run方法，按流程走会调用到middleware类的dispatch方法，继续跟进
    public function dispatch(Request $request, $type = 'route')
    {
        return call_user_func($this->resolve($type), $request);
    }
这里利用了`call_user_func`这个函数，把$request作为参数传入回调的solve方法，跟进看一下
    protected function resolve($type = 'route')
        {
            return function (Request $request) use ($type) {
                $middleware = array_shift($this->queue[$type]);
                if (null === $middleware) {
                    throw new InvalidArgumentException('The queue was exhausted, with no response returned');
                }
                list($call, $param) = $middleware;
                try {
                    $response = call_user_func_array($call, [$request, $this->resolve($type), $param]);
                } catch (HttpResponseException $exception) {
                    $response = $exception->getResponse();
                }
                if (!$response instanceof Response) {
                    throw new LogicException('The middleware must return Response instance');
                }
                return $response;
            };
        }
该函数直接把一个匿名函数作为返回值，通过use语句让该闭包函数继承$type变量，通过`array_shift()`函数把App类中的之前那个匿名函数赋值给`$middleware`，再继续将`$middleware`的值通过list赋给$call
接着运行到下一步时，继续通过`call_user-func_array()`再把App类中的匿名函数回调过来
此时匿名函数中的判断`(is_null($data))`成立，执行dispatch类的run函数，继续跟进
    public function run()
        {
            $option = $this->rule->getOption();
            // 检测路由after行为
            if (!empty($option['after'])) {
                $dispatch = $this->checkAfter($option['after']);
                if ($dispatch instanceof Response) {
                    return $dispatch;
                }
            }
            // 数据自动验证
            if (isset($option['validate'])) {
                $this->autoValidate($option['validate']);
            }
            $data = $this->exec();
            return $this->autoResponse($data);
        }
该函数是执行路由调度函数，直接跳到执行exec函数的位置，跟进观察
    public function exec()
        {
            // 监听module_init
            $this->app['hook']->listen('module_init');
            try {
                // 实例化控制器
                $instance = $this->app->controller($this->controller,
                    $this->rule->getConfig('url_controller_layer'),
                    $this->rule->getConfig('controller_suffix'),
                    $this->rule->getConfig('empty_controller'));
            } catch (ClassNotFoundException $e) {