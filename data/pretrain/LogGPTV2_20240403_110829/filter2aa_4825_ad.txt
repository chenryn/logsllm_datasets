|           0x0000090a      55             push rbp
|           0x0000090b      4889e5         mov rbp, rsp
|           0x0000090e      4881ec100400.  sub rsp, 0x410
|           0x00000915      89bdfcfbffff   mov dword [local_404h], edi ; arg1
|           0x0000091b      8b0557072000   mov eax, dword obj.device   ; [0x201078:4]=-1
|           0x00000921      85c0           test eax, eax
|       ,= 0x000009bf      bf00000000     mov edi, 0
\           0x000009c4      e817feffff     call sym.imp.exit           ; void exit(int status)
```
It performs an IOCTL, and if it fails - will print 0x3ff bytes from `obj.device`. So, if we create a symbolic link from `/secret_cake_recipe` to `dev/console` (lucky us that they forgot the leading slash!), we get three things: 
1. The IOCTL will fail (since there is no real device, just a text file), causing it to enter the "print debug data" path
2. The debug data printed will be the contents of `obj.device`, which is a symbolic link to `/secret_cake_recipe`
3. The program runs as admin, so it can read `/secret_cake_recipe`
We just have to send `SIGTERM` at the right timing, and since we don't have a very good control of timing over the remote shell, we have to make the program run long enough by providing a VERY long argument list.
This is the script we're going to run in order to accomplish that:
```bash