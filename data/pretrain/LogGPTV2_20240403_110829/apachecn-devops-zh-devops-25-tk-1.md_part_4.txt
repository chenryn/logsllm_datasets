api-... 1/1   Running 2        31m
db-0    2/2   Running 0        20m
db-1    2/2   Running 0        20m
db-2    2/2   Running 0        21m
```
我们可以看到`api`部署有两个副本，而`db`状态集有三个副本。
假设我们想要推出我们的`go-demo-5`应用的新版本。我们将使用的定义如下。
```
 1  cat scaling/go-demo-5-replicas-10.yml
```
输出限于相关部分，如下所示。
```
...
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: go-demo-5
spec:
  replicas: 10
... 
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: api
  namespace: go-demo-5
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 80
  - type: Resource
    resource:
      name: memory
      targetAverageUtilization: 80
```
需要注意的重要一点是，我们的`api`部署有`10`副本，并且我们有 HPA。其他一切都和以前一样。
如果我们应用这个定义会发生什么？
```
 1  kubectl apply \
 2    -f scaling/go-demo-5-replicas-10.yml
 3
 4  kubectl -n go-demo-5 get pods
```
我们应用了新的定义，并从`go-demo-5`命名空间中检索了所有的 Pods。后一个命令的输出如下。
```
NAME    READY STATUS            RESTARTS AGE
api-... 1/1   Running           0        9s
api-... 0/1   ContainerCreating 0        9s
api-... 0/1   ContainerCreating 0        9s
api-... 1/1   Running           2        41m
api-... 1/1   Running           0        22s
api-... 0/1   ContainerCreating 0        9s
api-... 0/1   ContainerCreating 0        9s
api-... 1/1   Running           0        9s
api-... 1/1   Running           0        9s
api-... 1/1   Running           0        9s
db-0    2/2   Running           0        31m
db-1    2/2   Running           0        31m
db-2    2/2   Running           0        31m
```
Kubernetes 满足了我们拥有 10 个`api`复制品的愿望，创造了 8 个豆荚(我们之前有过两个)。乍一看，好像 HPA 没有任何作用。让我们再次取回吊舱。
```
 1  kubectl -n go-demo-5 get pods
```
输出如下。
```
NAME    READY STATUS  RESTARTS AGE
api-... 1/1   Running 0        30s
api-... 1/1   Running 2        42m
api-... 1/1   Running 0        43s
api-... 1/1   Running 0        30s
api-... 1/1   Running 0        30s
db-0    2/2   Running 0        31m
db-1    2/2   Running 0        32m
db-2    2/2   Running 0        32m
```
我们的部署从十个副本缩减到五个副本。HPA 检测到比最大阈值更多的副本，并相应地采取行动。但是它做了什么？它只是删除了五个副本吗？情况不可能如此，因为这只会产生暂时的影响。如果 HPA 移除或添加 Pods，部署也会移除或添加 Pods，两者将会互相争斗。豆荚的数量会无限波动。相反，HPA 修改了部署。
我们来描述一下`api`。
```
 1  kubectl -n go-demo-5 \
 2    describe deployment api
```
输出限于相关部分，如下所示。
```
...
Replicas: 5 desired | 5 updated | 5 total | 5 available | 0 unavailable
...
Events:
... Message
... -------
...
... Scaled up replica set api-5bbfd85577 to 10
... Scaled down replica set api-5bbfd85577 to 5
```
副本数量设置为`5 desired`。HPA 修改了我们的部署。我们可以通过事件消息更好地观察到这一点。倒数第二条消息表示副本数量已按比例增加到`10`，而最后一条消息表示副本数量已按比例减少到`5`。前者是我们通过应用新部署来执行滚动更新的结果，而后者是由 HPA 通过更改其副本数量来修改部署而产生的。
到目前为止，我们观察到 HPA 修改了我们的部署。无论我们在一个部署(或一个状态集)中定义了多少个副本，HPA 都会对其进行更改，以适应自己的阈值和计算。换句话说，当我们更新部署时，复制副本的数量将临时更改为我们定义的数量，只是在几分钟后被 HPA 再次修改。这种行为是不可接受的。
如果 HPA 改变了副本的数量，通常有一个很好的理由。将该数字重置为部署(或状态集)中设置的任何值都会产生严重的副作用。
假设我们在一个部署中定义了三个副本，并且 HPA 将其扩展到三十个，因为该应用的负载增加了。如果我们`apply`部署是因为我们想推出一个新版本，在一个短暂的时期内，将有三个副本，而不是三十个。
因此，我们的用户会体验到我们的应用响应速度慢，或者由于副本太少而导致流量过大。我们必须设法避免这种情况。副本的数量应始终由 HPA 控制。这意味着我们需要改变策略。
如果在部署中指定副本的数量不能产生我们想要的效果，我们不妨将它们全部删除。让我们看看在那种情况下会发生什么。
我们将使用`go-demo-5.yml`定义，所以让我们看看它与我们之前使用的`go-demo-5-replicas-10.yml`有何不同。
```
 1  diff \
 2    scaling/go-demo-5-replicas-10.yml \
 3    scaling/go-demo-5.yml
```
输出显示，唯一的区别是，这次我们没有指定副本的数量。
让我们应用变化，看看会发生什么。
```
 1  kubectl apply \
 2    -f scaling/go-demo-5.yml
 3
 4  kubectl -n go-demo-5 \
 5    describe deployment api
```
后一个命令的输出限于相关部分，如下所示。
```
...
Replicas: 1 desired | 5 updated | 5 total | 5 available | 0 unavailable
...
Events:
... Message
... -------
...
... Scaled down replica set api-5bbfd85577 to 5
... Scaled down replica set api-5bbfd85577 to 1
```
在没有`replicas`的情况下应用部署导致了`1 desired`。当然，HPA 将很快将其扩大到`2`(其最小值)，但我们仍然未能始终保持 HPA 定义的副本数量。
我们还能做什么？无论我们定义我们的部署是否有`replicas`，结果都是一样的。应用部署总是会取消 HPA 的效果，即使我们没有指定`replicas`。
事实上，那种说法是不正确的。如果我们知道整个过程是如何工作的，我们就可以在没有`replicas`的情况下完成期望的行为。
If `replicas` is defined for a Deployment, it will be used every time we `apply` a definition. If we change the definition by removing `replicas`, the Deployment will think that we want to have one, instead of the number of replicas we had before. But, if we never specify the number of `replicas`, they will be entirely controlled by HPA.
我们来测试一下。
```
 1  kubectl delete -f scaling/go-demo-5.yml
```
我们删除了与`go-demo-5`应用相关的所有内容。现在，让我们测试一下如果从一开始就没有定义`replicas`的话，部署是如何进行的。
```
 1  kubectl apply \
 2    -f scaling/go-demo-5.yml
 3
 4  kubectl -n go-demo-5 \
 5    describe deployment api
```
后一个命令的输出限于相关部分，如下所示。
```
...
Replicas: 1 desired | 1 updated | 1 total | 0 available | 1 unavailable
...
```
看来我们失败了。部署确实将副本数量设置为`1`。但是，您看不到的是，副本没有在内部定义。
然而，几分钟后，我们的部署将由 HPA 扩展到两个副本。这是预期的行为，但我们还是会确认。
```
 1  kubectl -n go-demo-5 \
 2    describe deployment api
```
您应该从输出中看到副本的数量(由 HPA)更改为`2`。
现在是最后的考验。如果我们做一个新版本的部署，它会缩小到`1`副本，还是会留在`2`上？
我们将应用新的定义。与当前运行的版本相比，唯一的区别在于映像的标签。这样，我们将保证部署确实会更新。
```
 1  kubectl apply \
 2    -f scaling/go-demo-5-2-5.yml
 3
 4  kubectl -n go-demo-5 \
 5    describe deployment api
```
后一个命令的输出限于相关部分，如下所示。
```
...
Replicas: 2 desired | 1 updated | 3 total | 2 available | 1 unavailable
...
Events:
... Message
... -------
... Scaled up replica set api-5bbfd85577 to 1
... Scaled up replica set api-5bbfd85577 to 2
... Scaled up replica set api-745bc9fc6d to 1
```
我们可以看到，由 HPA 设置的副本数量得到了保留。
如果您在`events`中看到副本的数量已缩放至`1`，请不要惊慌。这是部署的第二个副本集。你可以通过观察复制集的名字看到这一点。部署正在进行滚动更新，尝试在不停机的情况下推出新版本。这与自动缩放无关，我假设您已经知道滚动更新是如何工作的。如果你没有，你知道在哪里学。
现在关键问题来了。我们应该如何在部署和状态集中定义副本？
If you plan to use HPA with a Deployment or a StatefulSet, do NOT declare replicas. If you do, each rolling update will cancel the effect of the HPA for a while. Define replicas only for the resources that are NOT used in conjunction with HPA.
# 现在怎么办？
我们探索了扩展部署和状态集的最简单方法。很简单，因为机制被烤成了 Kubernetes。我们所要做的就是定义一个带有目标内存和中央处理器的水平缩放器。虽然通常使用这种自动缩放方法，但这通常是不够的。并非所有应用在压力下都会增加内存或 CPU 的使用。即使他们这样做了，这两个指标也可能不够。
在接下来的一章中，我们将探讨如何扩展 HorizontalPodAutoscaler 来使用一个定制的度量源。现在，我们将摧毁我们创造的东西，我们将重新开始下一章。
如果您计划保持集群运行，请执行以下命令删除我们创建的资源。
```
 1  # If NOT GKE or AKS
 2  helm delete metrics-server --purge
 3
 4  kubectl delete ns go-demo-5
```
否则，如果您只是为了本书的目的而创建了整个集群，并且不打算立即进入下一章，请将其删除。
在你离开之前，你可能要复习一下本章的要点。
*   HorizontalPodAutoscaler 的唯一功能是自动缩放部署、状态集或其他几种类型资源中的 Pods 数量。它通过观察 Pods 的 CPU 和内存消耗并在它们达到预定义阈值时采取行动来实现这一点。
*   度量服务器收集关于节点和 Pods 的已用资源(内存和中央处理器)的信息。
*   度量服务器定期从运行在节点上的 Kubeletes 获取度量。
*   如果副本的数量是静态的，并且您无意随时间扩展(或缩减)您的应用，请将`replicas`设置为您的部署或状态集定义的一部分。另一方面，如果您计划根据内存、CPU 或其他指标来更改副本的数量，请改用 HorizontalPodAutoscaler 资源。
*   如果`replicas`是为部署定义的，那么每次我们`apply`定义时都会用到它。如果我们通过删除`replicas`来更改定义，部署将认为我们想要一个，而不是我们之前拥有的副本数量。但是，如果我们从来不指定`replicas`的数量，它们将完全由 HPA 控制。
*   如果您计划将 HPA 用于部署或状态集，请不要声明`replicas`。如果您这样做，每次滚动更新将取消一段时间的住房公积金的影响。仅针对不与 HPA 结合使用的资源定义`replicas`。