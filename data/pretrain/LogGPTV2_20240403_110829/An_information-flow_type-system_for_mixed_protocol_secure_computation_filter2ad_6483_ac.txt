able is designated for output before the output is actually
performed. We perform a mutual exchange of (result) shares
between two parties as in Listing 10.
Algorithm 1 Rerandomization Algorithm
function rerandomizeUnit(v, r)
if instanceOf(v, SecretShare) then
return v − r
end if
if instanceOf(v, PublicKeyCipherText) then
return v· encrypt(−r)
end if
if instanceOf(v, PrivateKeyCipherText) then
return v· encrypt(0)
end if
end function
function rerandomize(v, r)
if isTainted(r) then
if instanceOf(v, Array) then
m ← getModulus(v1)
r ← random(m)
for all vi ∈ v do
vi ← rerandomizeUnit(vi, r)
end for
return v
else
m ← getModulus(v)
r ← random(m)
return rerandomizeUnit(v, r)
end if
else
if instanceOf(v, Array) then
for all vi ∈ v do
vi ← rerandomizeUnit(vi, r)
end for
r ← null
return v
else
v′ ← rerandomizeUnit(v, r)
r ← null
return v′
end if
end if
end function
s = output ( s ) ;
1 share s p r i m e ;
2
3
4 send ( id ( ) % 2 + 1 ,
5 s p r i m e = read ( ” r e s u l t s h a r e ”) ;
6 s = s + s p r i m e ;
7 output ( ” r e s u l t = ” ,
s ) ;
s , ” r e s u l t s h a r e ”) ;
Listing 10: Share Reconstruction and Output
6. SECURITY TYPE SYSTEM
In our L1 language we augment the regular type system
with a security type system where every expression carries
both a type (such as secret share, ciphertext or array) and
a security type (tainted or untainted). Following the deﬁni-
tion of [34] our security type system is a collection of typing
rules that describe what security type is assigned to a pro-
gram (or expression), based on the types of sub-programs
(sub-expressions). We write ⊢ exp : t to mean that the
expression exp has security type t ∈ {tainted, untainted}
according to the typing rules. This assertion is known as a
typing judgment. Similar to the construction of the security
type system for information ﬂow [36] we use a security con-
text [sc] associated with a label of the program counter. We
use the security context to prevent the programmer from
sending messages depending on the truth value of expres-
sions with tainted variables. Untainted variables are random
and therefore not useful for branching conditions. This lim-
itation is important, since not only the content of a message
may reveal information, but just sending the message itself.
The typing judgment [sc] ⊢ C means that the program C is
typable in the security context sc.
Figure 2 presents the typing rules for a simpliﬁcation of
the L1 language. We omit loops, since they can only have a
constant number of iterations in secure computation and can
therefore be unrolled. We also omit the typing rules for the
regular type system. Expression security types and security
contexts can be either tainted or untainted. A typing rule
is an inference rule that describes how types are assigned.
The statements above the line must be fulﬁlled for the rule
to be applied, yielding the statement below the line.
According to the rules [E1-3], some variables (u) have se-
curity type untainted. All other expressions and variables
have type tainted. This includes expression which include
(but are not limited to) occurrences of untainted variables.
Rules [R1-2] ensure that untainted variables can only be as-
signed by re-randomization and output statements, but are
otherwise static.
Consider the rules [M1-6]. The message sending com-
mands can only be executed in an untainted security con-
text. Of those commands the ones that transmit plaintext
messages as payload (send, otsend) can only transmit un-
tainted variables. Received variables are always immediately
tainted.
The typing rules [C1-5] control the security context in
a composite program. The commands skip and variable
assignment are typable in any context. Branches must be
typable in a tainted context. This is justiﬁed by the above
requirement that message sending commands may not be
executed depending on tainted variables. The rules [C4-
5] enable composing programs similar to [36] including the
subsumption rule.
It enables sending messages before or
after a tainted context (branching).
In L1 we declare untainted variables using an asterisk after
the type declaration. We show examples for a share and an
untainted array in Listing 11 (and already in Listing 7).
6.1 Proofs
Goldreich [15] deﬁnes security in the semi-honest model.
The view V IEW Π(x, y) of a party during protocol Π on this
party’s input x and the other party’s input y is its input x,
the outcome of its coin tosses and the messages received
during the execution of the protocol.
Definition 2. We say a protocol Π computing f (x, y) is
secure in the semi-honest model, if for each party there ex-
ist a polynomial-time simulator S given the party’s input
and output that is computationally indistinguishable from the
party’s view V IEW Π(x, y):
S(x, f (x, y)) c= V IEW Π(x, y)
Our main theorem states that well-typed program is com-
piled into a protocol secure in the semi-honest model.
⊢ u : untainted (E − 1)
var 6= u
⊢ var : tainted
exp 6= u
⊢ exp : tainted
(E − 2)
(E − 3)
⊢ var1 : untainted
[sc] ⊢ var1 = rerandomize(exp, var2)
(R − 1)
⊢ var : untainted
[sc] ⊢ var = output(exp)
(R − 2)
⊢ var : untainted
[untainted] ⊢ send(var)
(M − 1)
⊢ var : tainted
[untainted] ⊢ var = read()
(M − 2)
⊢ var : untainted
[untainted] ⊢ otsend(var)
(M − 3)
⊢ var : tainted
[untainted] ⊢ var = otread(exp)
(M − 4)
⊢ var : tainted
[untainted] ⊢ var = gcencrypt(exp, . . . )
⊢ var : tainted
[untainted] ⊢ var = gcdecrypt(exp, . . . )
(M − 5)
(M − 6)
[sc] ⊢ skip (C − 1)
⊢ var : tainted
[sc] ⊢ var = exp
(C − 2)
[tainted] ⊢ C1
[tainted] ⊢ C2
[sc] ⊢ if exp then C1 else C2
(C − 3)
[sc] ⊢ C1
[sc] ⊢ C2
[sc] ⊢ C1; C2
[tainted] ⊢ C
[untainted] ⊢ C
(C − 4)
(C − 5)
Figure 2: Security Typing Rules
1 share∗
2 share a ∗ [ 2 ] ;
s ;
Listing 11: Untainted Variable Declaration
Theorem 3. Let program C implement function F. Then
if C is well-typed (⊢ C), it implements F securely in the
semi-honest model.
Proof Outline: We need to show that we can construct
a simulator for each party’s view. The problem is that
the view is determined by the messages received and not
sent (where type safety applies). We therefore assume that
the entire protocol is written in L1 using player-speciﬁc
code. Then we simulate the messages received from the
other party. We give only the construction for one party’s
simulator – due to the symmetry of the language it also
applies to the other party.
Furthermore, diﬀerently from information ﬂow type sys-
tem there is always an admissible information ﬂow in secure
computation. This is due to the nature of the joint com-
putation, i.e.
It is therefore not
possible to strictly distinguish between the program and the
some result is revealed.
information conveyed. We capture this using the output
variables.
Proof. We now construct the simulator for one party.
The simulator consists of input, coin tosses and messages
received. Input can be simulated by the real input (which
is given to the simulator) and coin tosses are chosen by the
Java random number generator. This leaves the received
messages to be simulated.
Let m1, . . . , mn be the messages received. We then con-
struct the simulator step-by-step, i.e. for each message re-
ceived we add a simulated message. This means, we start
with the empty simulator S0 which does nothing. Then we
construct Si from Si−1 by appending a simulation of mes-
sage mi to Si−1. Therefore it is ﬁrst necessary to note that
the number of messages is constant.
Lemma 4. In a well-typed program (⊢ C) the number of
sending statements (send, otsend, gcencrypt) is constant.
Note that no sending statement may appear inside a branch-
ing statement. We can complete the proof by induction over
the structure of C.
We now construct a simulated message for each message
mi received. We refer to Goldreich’s composition theorem [15]
for our cryptographic protocols. Oblivious transfer and Yao’s
protocol can be simulated as an oracle transmitting only
the resulting messages, as long as the implementations have
been proven secure in the semi-honest model. The security
proof for our implementation of oblivious transfer can be
found in [30]. The security proof for generic Yao’s protocol
can be found in [27]. We can therefore simulate only the
resulting messages.
There are two types of messages received: output and
intermediate.
Output messages: These are messages marked as output
by the other party. Let mi be such a message received. In
a correctly implemented program these messages are indeed
output at the local party (after combination with a local
share). Therefore the local party can simulate the message
as follows: Let o be the output which is given to the sim-
ulator and l the local share for reconstructing this value.
The local share l can be computed from the local state of
the party up to that point in the program. This must be
the case, since otherwise the party could not produce the
output. Then the message is simulated as
mi = o − l
(mod p)
Intermediate messages: These are messages re-randomized
by the other party. Let mi be such a message received. In
a well-typed program these message are all randomly inde-
pendently distributed.
Lemma 5. In a well-typed program all re-randomized vari-
ables are independently randomly distributed.
This follows directly from our construction of re-randomization.
After the algorithm of re-randomization (see Algorithm 1)
only one untainted variable is assigned. This variable is al-
ways independently randomly distributed. Therefore the set
of re-randomized variables is always a set of independently
randomly distributed variables. Note that local and output
variables may be dependent on the re-randomized variables.
The received message m is then simulated as an indepen-
dent random variable depending on the type of the message
(secret share or public-key ciphertext)
mi ←R Zp/E(Zp)
This completes the simulator – all messages can be sim-
ulated – and consequently the proof of semi-honest secu-
rity.
7. EXAMPLES
7.1 Multiplication
We ﬁrst show a simple example. We implement the mul-
tiplication protocol using homomorphic encryption and se-
cret shares from Figure 1 based on [14]. This protocol shows
that using our typed language any functionality can be im-
plemented securely (Listing 12).
The encrypt command (lines 33-34) returns a tainted vari-
able. Subsequently (lines 35-36) we re-randomize the cipher-
text (with known private key). This may seem superﬂuous,
since the randomness is fresh during encryption, but the
contained share may be tainted in ciphertexts with public
key only. We chose this re-randomization approach over a
polymorphic command based on return type. We see in
line 47 that using the rerandomize command we can omit
explicitly adding a random variable. Instead we use the ran-
domness introduced by the re-randomization command.
7.2 Substring Creation
As a second example we show the substring creation pro-
tocol of Jensen and Kerschbaum [21]. This protocol is one
of a set of three for privacy-preserving string processing. It
is particularly suited to show the power of our language and
type system. First, it uses all of our primitives: Yao’s gar-
bled circuits, oblivious transfer, secret shares and homomor-
phic encryption. Second, it’s security proof is not obvious,
such that a well-typed implementation underpins its prov-
able security.
The protocol operates on strings. A string consists of a
length ﬁeld and a ﬁxed-length array of characters. Each
string is secretly shared between Alice and Bob, such that
neither Alice nor Bob know its contents or even length.
The purpose of the protocol is to create a substring of
length t of a string x starting at position t. The resulting
substring will also be secretly shared – just as the inputs, i.e.
there is no output reconstruction. The protocol starts with a
rotation of the shared string to the left by s characters. Then
the trailing characters beyond the length ﬁeld are masked,
such that they are all set to 0 again. Each share of the
string is masked separately, such that the masking protocol
is executed twice with the roles reversed. The composed
main protocol is shown in Listing 13.
The types for strings (containing length ﬁeld and array)
are deﬁned in a separate header (not shown for brevity) This
header of the protocol also loads the cryptographic keys for
the homomorphic encryption. Both a private, public key-
pair and a public key (of the other party) are read from disk.
In this protocol we use Naccache-Stern encryption [31], be-
cause the modulus of the homomorphic operation must be
the same at both parties. This cannot be achieved using
Paillier’s encryption system [33]. We use a ﬁxed modulus
of 256 in order to simplify integration with Yao’s protocol.
In [21] the authors use Goldwasser-Micali encryption [17],
i n t t ) {
f r o m h a r d d i s k
priv Key = readKey ( ” p r i v . key ”) ;
pubKey = getPublicKey ( priv Key ) ;
}
2 : pubKey = readKey ( ”pub . key ”) ;
i n t n = getModulus( pubKey ) ;
share x , y , z ;
}
i n i t i a l i z e
}
2 : {
/ /
x = s ;
y = t ;
/ / d e c l a r e
1 : {