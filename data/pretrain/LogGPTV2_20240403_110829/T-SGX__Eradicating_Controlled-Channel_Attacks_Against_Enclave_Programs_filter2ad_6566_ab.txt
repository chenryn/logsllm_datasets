memory access patterns according to inputs. The attacker has
already analyzed a target enclave program’s source code and/or
binary in detail to obtain the information. Also, this attack
ignores programs with obfuscated memory access patterns (e.g.,
Oblivious RAM (ORAM) [40, 49]) because they do not have
visible behavior characteristics.
Third, the attack assumes that an attacker cannot arbitrarily
run a target enclave program. Due to remote attestation, a user
will know how many times his/her enclave program is executed
in the public cloud such that it is difficult to run the target
enclave program many times without the user’s approval.
Fourth, the attack relies only on a noise-free side channel:
page fault information. Other noisy side channels, including
cache and memory bus, are out of the scope for this paper.
B. Controlled-channel Attack
The controlled-channel attack uses page faults as a control-
lable side channel. Since a malicious OS can manipulate the
page table of an enclave program, it can know which memory
pages the enclave program wants to access by setting a reserved
bit in page table entries and monitoring page faults.
In contrast to a normal execution environment, the malicious
OS cannot see the exact faulting address but only the page frame
number because SGX masks the exact address, as explained
in §II-C1. To overcome this limitation, the controlled-channel
attack analyzes sequences of page faults rather than individual
page faults.
The final step of the controlled-channel attack is correlating
the page fault sequences with the results of offline, in-depth
analysis of a target enclave program. This allows the attacker
to infer the input to the enclave program if the memory access
pattern of the program varies sufficiently with the input.
Effectiveness. The original controlled-channel attack was
demonstrated against three popular libraries: FreeType, Hun-
spell, and libjpeg. The evaluation results show that the attack can
accurately infer the input text and images to the libraries [65].
Shinde et al. [54] use a similar attack to extract bits of
cryptographic keys from the OpenSSL and libgcrypt libraries.
C. Known Countermeasures
A few countermeasures against controlled-channel attacks
have been discussed, but most of them are neither practical nor
Fig. 2: Steps of an SGX asynchronous enclave exit (AEX). 1 The
processor stores register values and the exit reason into the state
save area (SSA) inside the enclave. 2 The processor loads synthetic
data into registers. 3 The enclave exits directly to the kernel space
exception handler. 4 The exception handler handles the interrupt and
returns to the trampoline. 5 The trampoline resumes the enclave. 6
The processor restores the stored register values and resumes enclave
execution. In addition, the trampoline can call an application exception
handler inside the enclave to handle exceptions the OS cannot process.
Limitation. Although the AEX hides the register context
and the exact address of an exception, information about the
exception still leaks to the OS. For example, after each page
fault, the OS learns which page the enclave attempted to
access. This information is the basis for the controlled-channel
attack [65].
2) TSX: Transaction Abort: When two transactions conflict
with each other (e.g., their read and write sets overlap), one
will be canceled, and thus aborted (see §II-B). TSX also aborts
a transaction when encountering an exception because a ring
transition is not possible while executing a transaction. In the
case of synchronous exceptions that occur during the execution
of a specific instruction (e.g., page fault, general protection
fault, divide-by-zero), the exception is not delivered to the
OS because TSX intentionally suppresses it ([25, §15.3.8.2]).
On the other hand, an asynchronous exception (e.g., timer
interrupt and I/O interrupt) will be delivered right after a
transaction is aborted and rolled back, because suppressing such
interrupts would make user-space processes non-preemptable,
which would interfere with OS scheduling.
D. Taking Control of Exception Handling
Using TSX inside SGX enclaves makes it possible to route
exceptions such as page faults to TSX abort code inside the
enclave and not to the ring-0 exception handler of the untrusted
OS. This deprives attackers of all information about page faults
and allows the enclave to identify potential attacks. We describe
a design based on this observation in §V.
III. CONTROLLED-CHANNEL ATTACK REVISITED
In this section, we briefly explain the controlled-channel
attack [65] (called pigeonhole attack in [54]) that allows a
malicious OS to infer sensitive computation and data inside a
TEE such as Haven [4] and InkTag [21]. We limit the discussion
to attacks against SGX, which is the focus of our paper and
which provides stronger security guarantees than a trusted
hypervisor (e.g., InkTag).
4
Kernel spaceEnclave❸❹ returnUser  spaceTrampolineHost programException handlerSSARegisters❶ store ❷ syntheticApplication exception handler❺ ❻ restore✪ exitERESUMEEENTERsecure. Intel has revised its SGX specification to support an
option for recording page faults and general protection faults
in the SSA [24]. However, this countermeasure is incomplete
because a malicious OS can cause the SSA to be overwritten
(details in §III-D). Second, Intel has suggested static and
dynamic analysis to eliminate all feasible input-dependent code
and data flows [26]. But, this requires significant developer
effort and incurs non-negligible performance overhead. Third,
Shinde et al. [54] have proposed deterministic multiplexing,
a software-only solution against the controlled-channel attack.
However, its performance overhead is tremendous without
developer-assisted optimizations. Finally, Shinde et al. also
have proposed a new execution model (contractual execution)
that makes a contract between the enclave program and the
OS to ensure that a specified number of memory pages reside
in the enclave. Their proposal, however, requires modifications
to core processors components. Such changes appear difficult
and unrealistic.
D. Overwriting Exit Reason
As mentioned in §II-C1, the SSA stores the exit reason for
each AEX. However, we found that a malicious OS can easily
overwrite the exit reason by sending an arbitrary interrupt to
an enclave program because the SSA stores only the last exit
reason1. This makes an enclave program unaware of page faults,
even if it uses an option SECS.MISCSELECT.EXINFO=1 to record
page faults and general protection faults.
We experimentally confirmed that a malicious OS can
overwrite the exit reason of a page fault by using a fake
general protection fault. When a page fault is generated, a
corresponding address is stored in SSA.MISC.EXINFO.MADDR and
PFEC is stored in SSA.MISC.EXINFO.ERRCD for later use [24].
However, a general protection fault could overwrite these
fields: it stores 0 in SSA.MISC.EXINFO.MADDR and GPEC in
SSA.MISC.EXINFO.ERRCD. We have found that a malformed
Advanced Programmable Interrupt Controller (APIC) interrupt
generates a general protection fault. The OS can program the
APIC to generate such interrupts and thus general protection
faults during enclave execution. Therefore, if a malicious OS
generates a malformed APIC interrupt for an enclave program
right after handling a page fault, the fields in the SSA are
overwritten such that an enclave program cannot know whether
or not a page fault has occurred. Further, the OS can generate
another normal interrupt (e.g., a timer interrupt) later to even
clear up the GPEC flag. Thus, we conclude that relying on
the exit reason cannot protect an enclave program from the
controlled-channel attack.
IV. SYSTEM MODEL
In this section we explain our ideal system model. An
ideal enclave (uncontrollable enclave) protects any enclave
program from the security threats explained in §III. The basic
requirement of the uncontrollable enclave is to enable an enclave
program to know every interrupt and page table manipulation,
and stop its normal execution when it detects that the OS has
unmapped any of its sensitive memory pages.
1There is an SSA stack for handling nested exceptions. However, this
overwriting attack is not about nested exceptions because it sends a new
interrupt right after handling the previous interrupt.
Fig. 3: The uncontrollable enclave model. It consists of secured and
controller pages. The secured page is not interrupted by the OS and
its page fault is delivered to the controller page instead of to the OS.
The controller page manages control and data flows between secured
pages and handles page faults generated by accessing secured pages.
To achieve these goals, the uncontrollable enclave allows an
enclave program to have two kinds of memory pages: secured
pages and controller pages, as shown in Figure 3. First, the
secured pages are unobservable pages containing all code and
data of an enclave program. The OS cannot interrupt the enclave
program when it executes or accesses the secured pages, and it
cannot monitor page faults generated due to the execution or
access of these pages. Since secured pages are uninterruptible,
the uncontrollable enclave needs to ensure that execution with
secured pages is short (e.g., up to the interval of a timer
interrupt) to prevent a malicious enclave program from fully
occupying a CPU core. Also, when the uncontrollable enclave
detects that any of the secured pages are unmapped, it treats
the OS as malicious.
Second, the controller pages relay the control and data flow
between the secured pages, check whether access to the secured
pages is hindered by the OS (i.e., unmapped), and interact with
the OS for scheduling and system calls. The OS can interrupt
their execution and monitor page faults generated by accessing
them. However, revealing their behavior does not leak much
information because they are just trampoline pages and the
actual execution of an enclave program is performed inside the
secured pages.
The uncontrollable enclave ensures that no page fault
sequence (i.e., inter-page accesses) is revealed to an OS. First,
when the uncontrollable enclave identifies that a secured page
is unmapped, it stops its execution. This could reveal up to a
single page fault to the OS. Second, the enclave program can
let its remote client know whether or not it has successfully
terminated by sending an acknowledgment message. A lack
of acknowledgment also means that there was a problem.
Third, the uncontrollable enclave prevents the OS from running
the enclave program arbitrarily. To achieve this, the enclave
program checks whether its client allows the OS to run itself
during a remote attestation process. The remote client would
completely disallow any further execution if the program did
not send acknowledgment messages before. Note that it is
natural to assume that an enclave program runs in the cloud
and its remote client controls its execution.
Based on these requirements, we implement a prototype
scheme, T-SGX. T-SGX does not ensure perfect information
leakage prevention, but we believe it is sufficient to make the
known controlled-channel attacks impractical (see §VII for
details).
5
Controller pageSecuredcode pageSecuredcode pageSecureddata pageinterruptEnclaveKernel spaceUser spaceHostProgrampage faultpage faultClientRemote control/attestationconst char *secret = "key";
...
1 // original code
2 void foo(char *msg, size_t len) {
3
4
5 }
6
7 // protected code
8 void ecall_foo(char *msg, size_t len) {
9
10
11
12
13
14
15
16 }
// abort: e.g., page fault detected
abort_handler();
if ((status = _xbegin()) == _XBEGIN_STARTED) {
foo(msg, len);
_xend();
} else {
}
Fig. 5: Careless usage of TSX revealing a page fault. An attacker can
monitor the page fault at Page B because a transition between Page
A and Page B is not in a transaction.
Fig. 4: A straw man example that wraps the entire enclave code in a
TSX transaction to prevent controlled-channel attacks.
B. The Springboard
V. DESIGN
In this section, we describe in detail the design of T-SGX,
which is a practical realization of the uncontrollable enclave
model (§IV). In particular, we explain how to realize the model’s
various components using Intel TSX.
A. Overview of the TSX-based Design
This section describes a working instantiation of our
architecture that relies only on a widely deployed standard
processor feature (TSX). This approach yields a practical and
effective side-channel mitigation that can be used today.
Intuitively,
the main value of TSX as a side-channel
mitigation lies in its ability to suppress page faults and other
synchronous exceptions. A page fault that occurs during a TSX
transaction will not be delivered to the untrusted ring 0 page
fault handler. Instead, the processor will abort the transaction
and transfer control to the transaction’s abort code. Thus, our
strategy will be to run enclave code inside transactions and to
place a trusted exception handler in the TSX abort code path.
Figure 4 shows a simple example of an enclave program and
its TSX-based transformation. The code between _xbegin and
_xend is executed as a transaction. The else branch contains
the abort code path. TSX guarantees that any page fault that
occurs while executing foo(msg,len) is suppressed and control
is transferred directly to the abort_handler in the else branch.
A simple design idea could be to wrap the entire enclave
program in a single TSX transaction. However, for typical
programs, such transactions will never complete because (a)
TSX will abort a transaction if its write or read set is too large
to fit into the L1 or L3 cache, respectively, and (b) long-running
transactions are highly likely to be aborted by interrupts. Thus,
we have to partition the program into small execution blocks
and wrap each execution block in a transaction.
This requires the ability to perform detailed static analysis
as well as a number of program transformations. For this
reason, we integrate T-SGX into the compiler. As the source
code is compiled into an enclave binary, T-SGX computes an
appropriate partitioning into execution blocks and makes sure
each execution block is protected by TSX by conservatively
placing XBEGIN and XEND instructions (see §V-C for details).
6
Using many small transactions entails a new problem. As
page faults are not suppressed across transactions, an attacker
may still see all page faults he/she is interested in, unless
transactions are carefully arranged in memory. Figure 5 shows
an example in which the transition between two transactions
is leaked because they are at a page boundary. An attempt to
execute the first instruction on page B causes an observable
page fault outside a transaction.
T-SGX solves this problem by placing all code that executes
outside transactions on a single page. We call this page the
springboard. Figure 6 displays the code that performs the
transitions between consecutive transactions. An important
property of this code is that it does not access memory on
any other page (e.g., stack, heap). Upon receiving an enclave
function call from the host, the entry function begins by jumping
to the springboard.begin block, which starts a transaction
with an XBEGIN instruction followed by a jump to the start
of first the block (call in this example). At the end of each
block, the T-SGX compiler inserts two instructions that load
the address of the next block into a register and jump to
the springboard.next block. Code on the springboard then
ends the current transaction (XEND), begins the next transaction
(XBEGIN), and jumps to the start of the next block, as indicated
by the register value provided by the previous block. Right
before the end of execution, springboard.end ends the last
transaction (XEND).
T-SGX also places the transaction abort code on the
transitions between
springboard page. Like the code that
transactions, the abort code also executes outside a transaction.
It is thus subject to page faults, and we ensure that it does not
access memory outside the springboard. With this code layout,
the only enclave page for which access could possibly result
in a page fault is the springboard. This could happen (a) at the
transaction transition (springboard.next, springboard.begin),
and at springboard.end in Figure 6 and (b) in the transaction
abort code (springboard.abort).
Example. Figure 7 shows how a host program and an OS
interact with an enclave program secured by T-SGX.
1)
2)
The host program uses the SGX EENTER instruction
to call a function inside the enclave.
EENTER transfers control to the enclave’s springboard.
The springboard starts the first transaction and jumps
to the first execution block. As execution blocks
complete and jump back to the springboard, the spring-
board completes and initiates transactions and jumps
xbegin()...xend()...Page B (unmapped)xbegin()...xend()...Page AExecution flowPage faultxend
xbegin springboard.abort
jmpq
*%r15
1 springboard:
2 springboard.next:
3
4 springboard.begin:
5
6
7
8 springboard.end:
9
10
11
12 springboard.abort:
13
14
15
16
xend
jmpq
*%r15
# (abort handler code)
...
# resume execution
jmp
springboard.begin
_function
springboard.end
leaq EB.start(%rip), %r15
jmp
springboard.begin
...
enclu[EEXIT]
# (load parameters)
call
# (save return value)
leaq EB.end(%rip), %r15
jmp
1 # entry point to the function wrapper
2 entry_point:
3
4
5 EB.start:
6
7
8
9
10
11 EB.end:
12
13
14
15 # transformed function
16 _function:
subq $40, %rsp
17
...
18
leaq EB.1(%rip), %r15
19
jmp
springboard.next
20
21 EB.1:
...