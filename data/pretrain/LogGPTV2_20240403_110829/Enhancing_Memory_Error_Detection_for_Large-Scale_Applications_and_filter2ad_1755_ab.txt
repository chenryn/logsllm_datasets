both Clang and GCC. It demonstrated a good balance between
3
obj1obj2obj3Virtual memoryRedzonejk0000110000000000lobj2Quarantinedobj2Shadow memory (VALID)objXobj3uv01Shadow memory (INVALID)obj3mthat the program dereferences using p. Checking the shadow
memory bits, ASAN can correctly determine that dereferencing
is valid when idx is zero (i.e., 1 ) and invalid when idx is the
size of obj1 (i.e., 2 ), respectively. However, if idx is bigger
than the size of obj1, it is possible that the dereference can
be allowed according to the shadow memory bit although this
should not be allowed (i.e., 3 ). Moreover, although freed obj1
region will be kept in quarantine zone (i.e., after 1 ), such a
region is reused if the quarantine zone is exhausted due to
repeated allocations (i.e., reused for objX after 2 ). Thus, if
there is another memory dereference using p after obj1 is freed,
it can result in use-after-free (i.e., 4 ).
To see the real-world implications of this limitation, we
also tested four real-world exploits and found that ASAN was
easily bypassed (see Table I). We note it is fundamentally
challenging to enlarge these parameters in ASAN, because it
would significantly increase the memory uses.
III. PROBLEM SCOPE AND OBJECTIVES
In this section we define the problem scope of this paper,
our objectives, and key evaluation metrics we aim to achieve.
Problem Scope. This work focuses on the problem of memory
error detection for user space C/C++ programs. We assume
the operating system kernel, all firmware, and all hardware
as our trusted computing base (TCB). We do not consider
attacks targeting our TCB or launched from within our TCB.
We also do not consider exploit against vulnerabilities other
than memory errors or memory errors in other languages (e.g.,
assembly and dynamically generated code). We do not restrict
which language features the target program can use or where
the memory errors can occur—the vulnerability can exist in
the main executable or any linked libraries. We also do not
restrict how attackers can exploit the vulnerability.
Objectives. As discussed in §II, different memory detectors
have different capabilities in detecting memory errors—some
of them can only detect spatial errors [17, 20, 21, 24, 36], some
can detect use-after-free but not uninitialized memory [22, 31],
and some can detect all types of errors [5, 25, 26]. Their
detection rate also varies, some can only provide probabilistic
detection [5, 26], some can provide deterministic detection
but can be bypassed [20, 25, 31], and some can detect all
occurrence of the error they can detect thus can provide the
strong memory safe guarantee [17, 21, 22, 24, 36].
In this work, we aim to enhance the detectability on memory
errors for large-scale C/C++ programs. There are two goals
in this statement. First, we aim to handle large-scale programs
such as popular server applications and browsers. We choose
them as the target because of their importance and the belief
that security solutions must be practical to make real impact.
Second, we want to provide better detectability than existing
solutions for large-scale programs. However, providing lower
runtime performance overhead is not our primary goal—we
will try our best to reduce the performance overhead, but when
there is a trade-off between detectability and performance, we
will opt for the detectability.
Evaluation Metrics. Given the current status quo (§II), to
achieve our goals, we can either try to solve the compati-
bility issue of pointer-based solutions, or try to improve the
detectability of redzone-based solutions. This work explores
the second direction, and our evaluation metrics are: (1) MEDS
must be able to run all the programs, the state-of-the-art redzone-
based solution, ASAN can handle; (2) MEDS must be able to
detect more memory errors than ASAN; and (3) the runtime
performance and memory overhead must be comparable to
ASAN.
IV. DESIGN
This section presents the design of MEDS. §IV-A illus-
trates the design overview of MEDS. Then §IV-B introduces
MEDSALLOC, a new memory allocator with page aliasing.
Then §IV-C describes how MEDS manages and enforces
inaccessible memory regions, redzone. §IV-D describes how
all memory objects (including heap, stack, and global objects)
are allocated through MEDSALLOC, such that MEDS compre-
hensively provides redzone for all kinds of memory objects.
Lastly, §IV-E presents user-level copy-on-write schemes for
MEDS.
A. Overview
MEDS takes a redzone-based approach to detect memory
errors because it provides the best compatibility among the
two different directions (§II). As suggested by its name, a
redzone-based approach detect memory errors by inserting
redzones (undefined memory regions) between memory objects
and marking freed memory objects as redzones. Therefore, the
detectability of a redzone-based memory error detector depends
on how closely it can approximate the two ideal properties:
• P1: Infinite gap. To detect all spatial errors, the redzone
between two memory objects must be infinite so that out-of-
bound accesses will always fall into the redzones.
• P2: Infinite heap. To detect all temporal errors, a new
memory object must always be allocated from a fresh virtual
address so that the freed region (redzone) will never be
re-used during the execution.
Unfortunately, due to limited hardware resources (both
physical and virtual memory space) imposed by the current
computing architecture, it is not feasible to fully satisfy these
properties. Thus, state-of-the-art redzone-based detection tools
make practical design trade-offs between security risks and
resource consumption. For instance, by default ASAN [31]
only inserts a 256 Byte redzone between memory objects
to detect spatial errors and only maintains a 256 MB heap
quarantine zone to detect temporal errors. Enlarging any of
these two parameters imposes heavy physical memory usage
unsuitable for large-scale programs. To clearly demonstrate
this, we tried to experiment ASAN with these enlarged settings:
for the redzone size, ASAN includes hard-coded assertions and
design decisions limiting these parameters and thus we were
not able to run; for quarantine zone, ASAN quickly used up
all physical memory space if a large quarantine zone size is
provided, and got killed due to out-of-memory. As a result,
if a spatial memory error happens beyond the redzone size,
such a memory access violation cannot be detected. Similarly,
freed memory will be recycled when the quarantine zone is full,
resulting in undetectable temporal errors. Our evaluation in §VI
clearly demonstrates this limitation in that four real-world
4
vulnerabilities in Chrome and Firefox were easily bypassed by
slightly modifying an input.
MEDS improves the approximation towards these two ideal
properties through fully utilizing the 64-bit virtual address space.
Specifically, the 64-bit virtual address space has provided us
with a great opportunity to (1) increase the redzone size between
objects and (2) reduce virtual address reuse. The challenge,
however, is how to minimize the physical memory usage. MEDS
overcomes this challenge through a novel combination of page
aliasing and redzones. Page aliasing denotes the intentional
aliasing between virtual and physical memory pages (i.e., a
set of different virtual pages are mapped to the same physical
page), which is a common technique used to reduce use of
physical pages, such as in copy-on-write (CoW) and same-
page merge [4]. However, redzone enforcement with page
aliasing normally comes with the potential for increasing the
fragmentation significantly. This is because the granularity of
memory object allocation differs from that of page access
permission. That is, all the objects within the same virtual
page have to share the same access permission. This makes it
complicated to perform access checks when a single virtual page
contains both a valid object and a redzone. One approach to
overcome this is, as suggested in PageHeap [20], that maps all
the redzone virtual pages (i.e., containing redzones only without
any valid objects) to a single physical page while increasing
the allocation granularity to page level (i.e., allocating at most
one object in a single virtual page) at the cost of generating
the internal fragmentation. Thus, MEDS aims to over-provision
virtual memory space, yet without wasting physical memory, to
meet both P1 and P2. Toward this end, we design new redzone
schemes for MEDS. Since MEDS intensively makes use of
huge virtual address space, simply adopting ASAN’s shadow-
memory based redzones would require impractical physical
memory space to store shadow-memory itself. Thus, MEDS
orchestrates page access permission settings as well as shadow-
memory based redzones to efficiently manage and enforce
redzones for all invalid memory space.
B. MEDSALLOC: A Memory Allocator with Page Aliasing
To implement the above idea, we design MEDSALLOC, a
new user-space allocator which maintains the special mapping
between virtual and physical page and redzone setup. With
MEDSALLOC, we can provide each memory objects with
virtual view as if they don’t share their page with others. Thus,
while objects are tightly packed in the physical memory space,
those are sparsely located in the virtual memory space (Fig-
ure 2). This allows MEDS to meet P1 with low memory
overheads—the target program now sees large redzones between
objects, but these only impose a small memory use as the
redzones are not actually backed by physical memory dedicated
for the redzones. It is worth noting that MEDSALLOC only
uses shadow memory to mark redzone at sub-page level (red
color boxes), and page level gaps (denoted as dots in Figure 2)
are still marked by page table permissions. This further reduces
the memory footprints of shadow memory.
In order to meet P2, MEDSALLOC maintains the allocation
pools for virtual memory space and always try to map the newly
allocated objects to a fresh virtual address so as to fully utilize
whole virtual address space to avoid address reuse. Please
note that MEDSALLOC does not need to be compatible with
Fig. 2: Aliased memory pages with shadow-memory-based redzone
enforcement in MEDS. While each object is sparsely allocated in
virtual memory space (left side), its actual memory footprints are
tightly packed in physical memory space (right side) using page
aliasing. 1 illustrates a large redzone between objects (P1), which
does not actually impose physical memory uses. 2 illustrates a size
of heap in MEDS, which fully utilizes virtual memory space before
begin reusing virtual address (P2).
Fig. 3: An example of MEDS’s page aliasing scheme with redzone
ASLR because MEDS ensures a stronger security guarantee
than ASLR. While MEDS is a memory error detector, ASLR
statistically helps after a memory error has been exploited.
Therefore MEDSALLOC can utilize virtual addresses in a simple
sequential manner.
The rest of this section first provides detailed information
on page aliasing mechanisms as they are the key enabling
features of MEDSALLOC. Then we present more design details
on MEDSALLOC, which takes a two-layered scheme using
global and local allocators (shown in Figure 4).
Page Aliasing. Page aliasing implicates the intentional aliasing
between virtual and physical memory pages such that multiple
virtual pages are mapped to the same physical page. Using
page aliasing, there can be multiple memory views (through
5
obj1obj1obj2obj4obj2obj4One physical pageVirtual pagesjkjPage aliasingRedzoneobj1Physical memoryobj1obj2obj3obj2obj3Virtual memorymremapkPhysical pageAllocated memorySub-page level redzonePage level redzoneAliased mappingmmapjmmap-edvirtual pagemremaplkey difference between MEDSALLOC and traditional heap
allocators’ design is that MEDSALLOC never requests actual
physical memory from the kernel; instead, it only distributes
virtual addresses to the local allocators and takes over the duty
of managing available virtual addresses from the kernel. This
design choice enables MEDS to meet P2. When MEDS looks for
an unmapped virtual space, instead of trying to reuse a recently
freed virtual space, the global allocator always starts from the
last allocation address and follows a monotonic direction so
it can fully cycle the whole virtual address space and delay
address reuse as late as possible. Again, because as a memory
error detector, MEDS provides stronger security guarantee
than ASLR, so MEDSALLOC does not need to randomize
the allocated virtual addresses.
Local Allocators. Local allocators (i.e., per-thread allocator)
maintain virtual memory pages assigned from the global
allocator, and maps, or aliases a virtual page to an appro-
priate physical memory page. That is, each local allocator
actually commits physical memory page allocation from kernel.
Furthermore, in order to make efficient physical memory uses
for small object allocations (i.e., smaller than a page size),
each physical memory page is managed with multiple free-
lists, which partitions a page into multiple memory slots. We
employ a size-class allocation scheme for this free-list, similar
to tcmalloc [28]—the class is determined by the allocation
size, and each class has its own free-list. The difference is that
in tcmalloc, free-list is used to manage mapped virtual pages
(i.e., a virtual-physical page pair); but in MEDSALLOC, the
free-list only manages physical pages. A local allocator (1)
uses these free-lists to find a physical page with proper and
empty memory slot for an allocation, (2) picks up a virtual
memory page from a reserved pool, and (3) aliases the virtual
page with the physical page.
For example, during the initialization of a local allocator
(i.e., right after loading the target application and before
executing any target program’s code), it reserves a chunk (e.g.,
256 MB) of virtual addresses with the help of the global
allocator and creates a local virtual page pool (illustrated
in Figure 4- 1 ). Next, upon receiving an allocation request from
a thread, the local allocator selects an available virtual memory
page from the local virtual page pool (illustrated in Figure 4-
2 ). Next, in order to find an available physical page, it scans
through one of free-lists corresponds to the allocation size and
selects an available physical page and maps it with the available
virtual page above (illustrated in Figure 4- 3 , which allocates
objk). If the free-list is used for the first time thus no physical
page has been associated with it, the local allocator maps a
new physical page to the virtual page using mmap() syscall
with (MAP_SHARED|MAP_FIXED) flag. On the other hands, if the
free-list has an associated physical memory, it simply reuses
that physical page with page aliasing (i.e., mremap). After the
object allocation, additional virtual pages are allocated from
the local virtual page pool to setup a redzone of pre-configured
size (e.g., 1 MB) ensuring P1.
Deallocation. When deallocating an object, MEDSALLOC
returns the associated physical memory page back to the free-
list. If the physical page is not associated with any active
objects (i.e., when all objects using the physical page are
freed), the physical page is removed from the free-list. After
that, MEDSALLOC simply unmaps the object region, and the
Fig. 4: A work-flow of MEDSALLOC.
multiple virtual pages) to the same memory content (backed by
the same physical page). In practice, page aliasing is popularly
used to reduce use of physical pages, such as copy-on-write
(CoW) and same-page merge [4].
Since this page aliasing mechanism has to rely on virtual
memory management, its implementation varies depending
on underlying architecture and kernel. In the case of x86-64
architecture (as well as x86) running Linux, page aliasing can
be realized through invoking mmap() and mremap() syscalls. In
response to the mmap() request, the Linux kernel creates a new
virtual memory page that is mapped to a new physical memory
page. Here, if the MAP_SHARED flag has been specified, the kernel
allows the mapping to be shared later (i.e., the new physical
memory page can be mapped by multiple virtual memory pages
within the same process or with its child processes). We then
use mremap to create additional aliased virtual pages within
the same process’ virtual address space. Suppose a mapping
between a virtual page V1 and a physical page P1 is established
by mmap. The kernel maps a new virtual page V2 to the same
physical page P1 without removing the old mapping between
V1 and P1 when mremap() is invoked with (1) old_address and
new_address pointing to V1 and V2 respectively, (2) old_size
equal to zero, and (3) MAP_FIXED flag being set. Please note
this behavior is undocumented in the man page but is described
in [35].
Figure 3 shows an example of this aliasing process. If a
user process invokes mmap() with the MAP_SHARED flag set, the
kernel creates new virtual pages for the process and returns
the base address of such virtual pages ( 1 ). After that, when
the user invokes mremap() where the old_address parameter
points to the address returned by mmap(), the kernel creates an
aliased page at new_address ( 2 ). This aliasing can be repeated
as many times as a user process requests, and the kernel returns
yet another new aliased virtual page ( 3 ).
Global Allocator. To improve the performance of allocators
(by reducing use of locks), modern heap allocators feature a
global allocator (i.e., per-process allocator) which manages
available virtual address space for a running process, and
partitions and then distributes virtual address space to local,
per-thread allocators (illustrated in Figure 4- 1 ). Here, the
6
A global allocatorLocal allocatorsvvvobjkobj1obj2objkpReserved virtual pagesReserved virtual pagesAliased pagesAllocated virtual pageFree-lists with physical pagesjkl# Compute the start and end address of object (page-aligned)
start = start_pageaddr(addr)
end = end_pageaddr(addr + size)
1 def enforce_redzone_on_alloc(addr, size):
2
3
4
5
6
7
8
9
10
11
12
13
# Maps the corresponding shadow memory.
# Shadow memory bits are initialized as INVALID.
map_shadow_memory(start, end)
# Set shadow memory bits (VALID) for an object region.
# The rest shadow memory bits are left as INVALID.
set_shadow_memory(addr, size, VALID)
return
(a) Redzone management after allocation
# Compute the start and end address of object (page-aligned)
start = start_pageaddr(addr)
end = end_pageaddr(addr + size)
1 def enforce_redzone_on_dealloc(addr, size):
2
3
4
5
6
7