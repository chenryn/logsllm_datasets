p4举办的一场比赛  
主要分析一下其中的一道Kernel PWN  
题目不算难，但很适合内核入门
## p4fmt
### Analyze
拿到题目，解压后一共三个文件：
    bzImage#内核映像
    initramfs.cpio.gz#文件系统
    run.sh#qemu启动脚本
qemu启动脚本启动后看到：
    ====================
    p4fmt
    ====================
    Kernel challs are always a bit painful.
    No internet access, no SSH, no file copying.
    You're stuck with copy pasting base64'd (sometimes static) ELFs.
    But what if there was another solution?
    We've created a lightweight, simple binary format for your
    pwning pleasure. It's time to prove your skills.
根据信息，是一道kernel pwn，flag在根目录，但是只有root可读，需要我们提升权限  
且内部定义了一种可执行文件格式  
查看文件系统的init脚本：
    #!/bin/sh
    mount -t proc none /proc
    mount -t sysfs none /sys
    insmod  /p4fmt.ko  
    sleep 2
    ln -s /dev/console /dev/ttyS0
    cat version
      if ( *(_BYTE *)(v4 + 0x4B) > 1u )
        return (unsigned int)-22;
      v10 = flush_old_exec(v4, v2);                 // clear the environment
      if ( !v10 )
      {
        *(_DWORD *)(v6 + 0x80) = 0x800000;
        setup_new_exec(v4);
        v12 = *(_BYTE *)(v4 + 0x4B);
        if ( v12 )                                  // type=1
        {
          if ( v12 != 1 )
            return (unsigned int)-22;
          if ( *(_DWORD *)(v4 + 0x4C) )             // map_time
          {
            v16 = (map_info *)(*(_QWORD *)(v4 + 0x50) + v3);// map_info_offset
            do
            {
              v17 = v16->load_addr;
              v18 = v16->load_addr & 7;
              v19 = v16->load_addr & 0xFFFFFFFFFFFFF000LL;
              printk(
                "vm_mmap(load_addr=0x%llx, length=0x%llx, offset=0x%llx, prot=%d)\n",
                v19,
                v16->length,
                v16->offset,
                v18);
              v20 = v16->offset;
              v21 = v16->length;
              if ( v17 & 8 )
              {
                vm_mmap(0LL, v19, v21, (unsigned __int8)v18, 2LL, v20);
                printk("clear_user(addr=0x%llx, length=0x%llx)\n", v16->load_addr, v16->length, v22, v23);
                _clear_user(v16->load_addr, v16->length);
              }
              else
              {
                vm_mmap(*(_QWORD *)(v4 + 8), v19, v21, (unsigned __int8)v18, 2LL, v20);
              }
              ++v10;
              ++v16;
            }
            while ( *(_DWORD *)(v4 + 0x4C) > v10 );
          }
        }
        else                                        //type=0
        {
          v13 = -12LL;
          if ( (unsigned __int64)vm_mmap(
                                   *(_QWORD *)(v4 + 8),
                                   *(_QWORD *)(v4 + 80),
                                   4096LL,
                                   *(_QWORD *)(v4 + 80) & 7LL,
                                   2LL,
                                   0LL) > 0xFFFFFFFFFFFFF000LL )
          {
    LABEL_12:
            install_exec_creds(v4);
            set_binfmt(&p4format);
            v14 = 0x7FFFFFFFF000LL;
            v15 = __readgsqword((unsigned __int64)&current_task);
            if ( *(_QWORD *)v15 & 0x20000000 )
            {
              v14 = 0xC0000000LL;
              if ( !(*(_BYTE *)(v15 + 131) & 8) )
                v14 = 0xFFFFE000LL;
            }
            v10 = setup_arg_pages(v4, v14, 0LL);
            if ( !v10 )
            {
              finalize_exec(v4);
              start_thread(
                v9 + 16216,
                v13,
                *(_QWORD *)(*(_QWORD *)(__readgsqword((unsigned __int64)&current_task) + 0x100) + 0x28LL));
            }
            return v10;
          }
        }
        v13 = *(_QWORD *)(v4 + 88);
        goto LABEL_12;
      }
      return v10;
    }
可以看到：  
首先检验文件头是否为"P4"以及version是否为0  
而后调用一次flush_old_exec清理空间  
而后通过version后一字节判断type来确定加载方式  
注意到第一种加载方式：
    if ( v12 )                                  // type=1
        {
          if ( v12 != 1 )
            return (unsigned int)-22;
          if ( *(_DWORD *)(v4 + 0x4C) )             // map_time
          {
            v16 = (map_info *)(*(_QWORD *)(v4 + 0x50) + v3);// map_info_offset
            do
            {
              v17 = v16->load_addr;
              v18 = v16->load_addr & 7;
              v19 = v16->load_addr & 0xFFFFFFFFFFFFF000LL;
              printk(
                "vm_mmap(load_addr=0x%llx, length=0x%llx, offset=0x%llx, prot=%d)\n",
                v19,
                v16->length,
                v16->offset,
                v18);
              v20 = v16->offset;
              v21 = v16->length;
              if ( v17 & 8 )
              {
                vm_mmap(0LL, v19, v21, (unsigned __int8)v18, 2LL, v20);
                printk("clear_user(addr=0x%llx, length=0x%llx)\n", v16->load_addr, v16->length, v22, v23);
                _clear_user(v16->load_addr, v16->length);
              }
              else
              {
                vm_mmap(*(_QWORD *)(v4 + 8), v19, v21, (unsigned __int8)v18, 2LL, v20);
              }
              ++v10;
              ++v16;
            }