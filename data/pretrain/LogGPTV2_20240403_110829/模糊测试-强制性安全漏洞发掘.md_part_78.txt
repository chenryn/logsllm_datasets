info.asp
滴客资源网WwW.176Ku.CoM，1000G无加密版教程书籍杂志全免KEY提供，完全无加密。
---
## Page 363
348第三部分高级模糊测试技术
如下的代码片段发现了1ogger（）例程中的格式化字符串漏洞：
void 1ogger (char *message)
try
//format string vulnerability.
fprintf(1og_fi1e, message) ;
except
fprintf(1og_fi1e,“Log entry fa11ed!\n°);
}
在对易受攻击的fprintf（）进行调用时，try/except语句创建了一个异常句柄。如果第一个
fprintf（）调用执行失败，那么第二个fprintf（）将会被调用。如果在这种情况下，我们选择
了忽略调试器再次看到程序未捕获的异常，那么我们将不能够检测到该格式化字符申漏洞，因
为IMAP服务器很好地处理了它自已的错误。但这并不是说该漏洞不存在或者是不可利用的。
简而言之，我们得到了一个漏报的信息。另一方面，也将会发现我们自身处于了这样一种情形，
即我们所发现的大多数异常都被很好地加以了处理，并且都没有暴露出任何的安全问题。如果
我们选择对调试器再次看到程序未捕获的异常进行处理，那么我们将要应对许多的漏报情况。
作为一个独立的安全问题研究者，你不可能做出完全正确的决定。一旦你意识到该问题，可以
对任何给定的目标应用经验测试以确定你将要采用漏报和误报的哪一种方法。作为通过测试来
保证你自己产品的安全性的软件开发者或QA工程师而言，所做出的可靠决定应当是对调试器
再次看到程序未捕获的异常进行监视，并且花费时间来研究每一种情形下异常的来源。
24.6动态二进制插装
借助于调试器的监视技术可以为我们提供很大的帮助。然而，正如第5章“有效的模糊测
试的需求”中所提到的，错误检测的最佳解决方案存在于DBI中。更加深人地讨论这个问题需
要开发相应的原型工具，而这已经超出了本书的讨论范围，然而，本节中所提供的信息仍然有
助于你更加清晰地理解目前可用的一些高级调试工具的内部执行机理。DBI引擎可以在最小的
逻辑层次即基本块上插装一个目标可执行文件。
回忆一下第23章所描述的，一个基本块被定义为指令的一个序列，而一旦到达该基本块的
第一条指令时，该块内部的每一条指令都将被确保按次序执行。DBI系统允许你通过添加、修
改或者变换指令逻辑来在每一个基本块内部插装单独的指令。通常可以通过将执行控制流从初
始指令集转换到一个修改过的代码缓存来实现这一功能。在某些系统中，可以使用更高层次的、
类RISC的伪汇编语言来实现指令级的插人。这就使得开发者能够更加简单地开发DBI工具，并
且试着使该工具能够跨平台使用。DBI系统所提供的API可以为我们提供范围很广的应用，从
切片和最优化到机器翻译以及安全性监视。
---
## Page 364
第24章智能故障检测349
目前存在有许多的DBI系统，其中的例子包括DynamoRIODynlnst以及Pin。例如
DynamoRIO系统，它是由马萨诸塞技术研究所和惠普公司联合开发的项目。DynamoRIO是在
IA-32框架中实现的，支持微软的Windows操作系统以及Linux操作系统。DynamoRIO非常稳定，
并且具有很高的性能，这已经通过其在商业软件工具如Determina的内存防火墙中的应用得
到了证实。有关DynamoRIO在Determina中的使用的更多信息可以参阅名为《基于程序监视的
安全执行》（Secure ExecutionVia Program Shepherding）的MIT研究论文?。PinDBI非常有趣，
因为与大多数的DBI系统不同，它充许开发一个可以关联到目标进程的工具，而不是被局限升
在DBI控制下加载目标进程。
利用DBI使得我们可以开发监视工具以进一步提高错误检测能力，即从检测一个错误的发
生到潜在地发现错误的来源。再重新回到前面所使用的堆溢出的例子：
char *A = ma11oc(8);
char *C=ma11oc(24）;
char *B=ma11oc(16):
strCPy(A, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP"):;
free(B):
使用基于调试器的监视方法，我们将无法检测到实际的溢出，因为它发生在对strcpy（）的
调用过程中。对于前面所讨论的栈溢出而言，情况也是如此。在栈溢出的情形下，当受影响的
函数返回时，可能会生成并检测到一个异常。对于这种情形以及其他的堆溢出而言，将不会生
成一个异常，直到后续的堆处理操作如对free（）的调用出现在前面的代码片段中。基于DBI，
我们就能够在运行时跟踪并记录所有的内存分配。本语fence表示标记或者记录每一个堆块的起
始和结束位置的能力。通过注入所有的内存写入指令，就可以进行相应的检查以确保任何单独
堆块的边界没有被超越。一且一个单一的字节超越了一个所分配的堆块边界，那么就会发出一
个通告。成功的实现这样一种技术可以为你节省大量的时间、分析精力以及财力。
开发一个定制的DBI工具的学习曲线并不非常容易。幸运的是，在你开始创建该工具之前，
可以利用其他许多工具来实现模糊器集成。可用的商业工具包括IBMRatinalPurify，
Compuware DevPartner BoundsCheckerOC Systems RootCause以及Parasoft Insure++例
如Purify工具，它实际上是构建于静态二进制注入工具（SBI），而BoundsChecker则是建立在
SBI和DBI组合的基础之上。这两种工具都可以提供你所期望的错误检测以及性能分析特性集。
 http://www.cag.les.mit.edu/dynamorio/
8osuupmmm/du
③ http://rogue.colorado.edu/pin/
http://www.determina.com
③ http:/www.determina.com/products/memory_firewall.asp
?
htt:/www.determina.com/products/memory_firewall.asp
http://www-306.ibm.com/software/awdtools/purify/
http://www.compuware.com/products/devpartner/visalc.htm
① http://www.parasoft.com/jsp/products/home.jsp7product=lnsure
---
## Page 365
350
第三部分高级模潮测试技术
在开源工具领域中，你可能会遇到的最著名的解决方案就是Valgrind（其中“val”表示
“value”，“grind”表示“grinned”），Valgrind为你提供了DBl系统以及许多前面所开发的工具
如Memcheck，该工具可以被用来定位内存泄漏和堆溢出漏洞。Valgrind也可以使用许多第三方
控件。对于我们这里的特定目的而言，边界检查版本的实现Annelid是最为重要的。
对于大多数情况而言，借助于调试器自动化错误监视的使用已经是对其当前的模糊测试方
法进行了改进。但是，我们仍然鼓励你对这些高级的错误检测方进行更加深入的研究。
24.7小结
在本章中，我们讨论了模糊器目标监视方法，包括从最基本的高层技术到更加高级的借助
于调试器的技术。同时，我们也涉及到了DBI的概念，并且介绍了不同的DBI系统，你可以利
用一些立即可用的技术以实现更加高级的目标监视。
通过对本章所介绍知识的学习，你应当可以将定制的调试器监视工具与高层的模糊器单步
执行工具所具有的功能加以结合。通常情况下，这种组合可以准确确定是哪一个单独的测试用
例或者是测试用例的组合导致了目标应用发生问题。并且在相应的自动化工具支持下，将会为
你减少模糊器执行之后的分析工作量。
http:/valgrind.org/
 http:/valgrind.org/downloads/variants.html?njn
---
## Page 366
第四部分展望
第25章汲取的教训
“很少问到这样的问题：孩子们正在学习吗？。”
—George W.Bush，Florence，SC.2000年1月11日
我们期望此时可以清晰地描绘出模糊测试究竞是什么，为什么它是一种有效的测试方法以
及如何使用它在程序代码中发现隐藏的错误。我们在前面提到过，本书主要面向于可以从模糊
测试中得到收益的三类不同的目标读者群：开发者、QA团队成员以及安全问题研究者。在本
章中，我们将对软件开发生命周期（SoftwareDevelopmentLifecycle,SDLC）进行分析，以确
定这三类读者分别可以在软件开发的哪些阶段应用模糊测试以构建安全的软件。
25.1软件开发生命周期
模糊测试曾经度是安全问题研究者在软件产品开发完成之后所专用的一种技术，但是现
在软件开发者也已经开始应用模糊测试技术，以在软件开发生命周期的早期发现漏洞。微软已
经在其可信计算安全开发生命周期中将模糊测试作为一个关键的组成部分。这种方法鼓励开
发者在他们称之为安全开发生命周期（SecurityDevelopmentLifecycle.SDL）的实现阶段中
“应用安全性测试工具以及模糊测试工具”。微软已经定义了SDL的相关概念，图25-1显示了它
和SDLC各阶段之间的对应关系。
你从上述这些并行的过程中可以看到，微软已经开始在其SDLC的每一个阶段中考虑识别
适当的安全性问题，这是在集成代码中很重要的一个方面，即安全性必须要贯穿于SDLC的整
个过程中。在上图中没有反映出来但必须要实现的就是将安全性渗透到SDLC中，但不只是作
为一个并行过程。开发者、QA团队以及安全问题研究者必须要协同工作以实现开发安全代码
的共同目标。
微软对安全性的关注
微软正在将安全性紧密结合到其软件开发生命周期中，这并不奇怪。由于在市场份额中居
于主导地位，微软的许多技术成为了安全问题研究者的研究目标。尽管还存在着许多争论认为
微软要达到安全研究领域的前沿还有很长的路要走，但母庸置疑的是，微软已经在加强其软件
产品的安全性方面迈出了很大的步伐。
O http://msdn.microsoft.com/library/default.asp7uri=/library/en-us/dnsecure/html/sdl.asp
---
## Page 367
352
第四部分展
作为一个例子，考虑微软的Internet信息服务（Internet Information Services.IIS），即微
软的Web服务器。目前有14个公开发现的漏洞影响了1IS的5.x版本，在2003年早期所发布的
6.x版本，只被3个已知的错误所影响，并且没有一个被认为是严重的错误，安全性的改进要
部分归功于低层的安全性保证方法，如/GS缓冲区安全检查、数据执行预防（DEP）、安全的
结构化异常处理（SafeSEH）以及受到最广泛期待的一个WindowsVista的安全性保证技术，
即地址空间的随机规划（Address SpaceLayoutRandomization,ASLR），除了上述这些安全性
保证技术之外，微软还通过象微软产品安全小组这样的计划来投入人力资源以保证软件的安
全性。模糊测试就是这部分开发者所使用的多种技术之一，用以加强所开发软件的安全性。
特性列表
设计规范
试和验证
产岛主持
5名
补工快
务
文档计划
功能规芯
代购
图25-1微软的SDLC和SDL之间的对应关系
SDLC方法不存在什么不足，但是出于我们要到达的目的，我们在这里将使用Winston
Royce初始的瀑布模型，因为它非常简单并且被广泛接受。湿布模型将一种连续的方法应用
于软件开发，在软件的整个生命周期中一共经历了5个不同的阶段。图25-2说明了该方法。
 htt:/www.microsoft.com/WindowsServer2003/lis/default.mspx
http:/secunia.com/product/39/?uask=advisories
?
hbtp://scunia.com/product/1438/7tusk=advisories
http://msdm2.microsoft.com/en-US/ibrary/8db701c.aspx
http://en.wikipedia.org/wiki/Data_Execution_Prevention
http:/www.symantec.com/avcenter/reference/Address_Space_La
?
http://www.microsoft.com/technet/Security/bestprac/secwinin.x
③http://en.wikipedia.org/wiki/Waterfall_process
---
## Page 368
第25章取的教训
353
下面，我们将讨论在上述每个阶段中如何实施模糊测试。
25.1.1分析
分析阶段是在开始开发一个项目之前，
需求
收集所有需要的信息的过程。这个过程包
段计
括同终端用户一起来讨论，以准确确定用
户的需求。尽管模糊测试在SDLC的这个阶
段可能不会发挥一个直接的作用，但是它
验证
对于开发者、QA团队和安全问题研究者开
始考虑是否将模糊测试作为后续过程的一
个适当的测试工具是非常重要的。
图25-2Royce的初始瀑布模型
25.1.2设计