prise architecture into small models and its differentiation of specific stakeholders’
perspectives.
Data Function Network People Time Motivation
What How Where Who When Why
Objective/ List of List of Core List of List of im- List of List of Busi-
Scope Things Business Business portant Or- Events ness Goals/
(contextual) important Processes Locations ganizations Strategies
→ Role: in the
Planner Business
Enterprise Conceptual Business Business Work Flow Master Business
Model Data/ Ob- Process Logistics Model Schedule Plan
(Conceptual) ject Model Model System
→ Role:
Owner
System Logical System Distributed Human In- Processing Business
Model Data Architecture Systems terface Ar- Structure Rule Model
(Logical) Model Model Architecture chitecture
→ Role: De-
signer
Technology Physical Technology Technology Presentation Control Rule Design
Model Data/ Design Architecture Architecture Structure
(Physical) Class Model
→ Role: Model
Builder
Detailed Data Defi- Program Network Security Timing Rule Specifi-
Representa- nitions Architecture Architecture Definition cation
tions (Out of
Context)
→ Role: Pro-
grammer
Functioning Usable Working Usable Functioning Imple- Working
Enterprise Data Function Network Organization mented Strategy
→ Role: User Schedule
Table 4: Zachman Framework
12
4.2.3. The Integration of both Methodologies in the ISE Framework
The ISE Framework supports three phases of SE: requirements analysis, service
design, and service implementation. Those phases are assigned to Zachman’s dif-
ferent abstraction layers (perspectives), i.e. strategic, conceptual, logical, and techni-
cal (see Fig. 3).
Therefore, the ISE Framework provides selected models and methods for the spe-
cific players of each layer. In order to reduce the complexity, each layer is not only
based on one complex model, a layer is broken down in five dimensions: service de-
scription, workflow, people, data, and rules. A dimension is a part of an abstraction
layer and consists of its own model(s) (artifact). The artifacts of each dimension can
be transformed from one abstraction layer to another.
The ISE framework is built concerning the following rules:
• The dimensions do not need to be analyzed and modeled in a specific order.
• All dimensions of one layer are combined into a complete model for the layer-
specific stakeholders.
• Each abstraction layer features a simple, basic, and unique model.
• The layers are separated and clearly differentiated (no overlapping).
• In order to achieve an integrated approach, information of the artifacts is trans-
formed from one layer model to another and back (iterative approach).
Fig. 3: ISE Framework and the degree of business/technical orientation concerning the abstraction
level
Fig. 3 illustrates that the degree of business-orientation in the innovation, strategic
and conceptual perspective is high and decreases in the next two perspectives when
13
the e-services are technically designed and implemented. Whereas, in the runtime
perspective the e-service is launched and offered on the market and, thus, business
and technical aspects become important.
The four abstraction layers of the ISE methodology are described below:
Strategic Perspective
ISE starts with the development of the strategic perspective on an e-service. The
main aim of this perspective is the identification of market and business requirements
for an e-service, which are derived from the market, market players, competitors, en-
vironment, company’s strategy, organization, and capabilities. The market and busi-
ness requirements are identified with established business methods (see 4.2.1
Service Engineering based on Fraunhofer IAO) which are well-known among busi-
ness developers. The semi-formal results of these methods are then transferred into
the formal business model ontology of Osterwalder (Osterwalder, 2004). The main
parts of the business model are: the service (e.g. VALUE PROPOSITION), the cus-
tomer interface (e.g. TARGET CUSTOMER, DISTRIBUTION CHANNEL, AND
RELATIONSHIP), the infrastructure management (e.g. VALUE CONFIGURATION,
CAPABILITY, and PARTNERSHIP), and the financial aspects (e.g. COST
STRUCTURE and REVENUE MODEL).
Prior to develop the strategic perspective, innovative service ideas are identified and
evaluated with the target of filtering service ideas with a high business potential. In
the strategic perspective, only the remaining service ideas are then in the focus of its
activities.
We propose the following models forming the strategic layer:
• Service Description – The e-service itself (VALUE PROPOSITION), the way how
the e-service is marketed and sold (DISTRIBUTION CHANNELS), the
RELATIONSHIPS to customer groups, and the REVENUE MODEL are parts of
the business model ontology which are in the focus of this dimension.
• Workflow – This dimension stresses the infrastructure management of a develop-
ing e-service and, thus, the issues of how an e-service is delivered (VALUE
CONFIGURATION) and what know-how and resources are needed for the deliv-
ery (CAPABILITIES).
• Data – A list of relevant data (IMMATERIAL RESOURCES) which are required for
the e-service delivering.
• People – The people model lists the relevant stakeholders who are involved in the
e-service delivery and consumption (TARGET CUSTOMERS, ACTORS, AND
PARTNERS).
• Rules – In this dimension the main POLICIES of a developing e-service are listed
which needs to be considered and refined during the e-service development and
delivery process.
In this abstraction layer, a strategic business model including a coarse-grained ser-
vice concept is developed. This perspective mostly includes a decision-making proc-
ess of an organization’s top management. Thus, the abstraction layer is built for
CEOs/CIOs/CFOs who decide for their organizations’ investments in new e-service
14
offerings. They usually do not develop the business models themselves but rather
assign business developers for fulfilling the task.
Conceptual Perspective
The conceptual perspective follows the strategic perspective and refines its results.
Whereas business models describe the exchange of value between business part-
ners, process models show operational characteristics of how this is done (Dorn
et al., 2007).
Thus, during the conceptual perspective business architect have the liability to opera-
tionalize and implement the strategic artifacts, which were developed during the
business perspective. Business analysts refer to the architect in the Zachman Frame-
work. Business analysts have knowledge about the market the e-service will be of-
fered in, important processes, organizational structures, crucial assets, and domain
constraints. They have the responsibility to analyze and express requirements for the
e-service from this perspective. Additionally, business analysts, have knowledge
about models, modeling, architecture, and transformation. Their expertise and re-
sponsibility is to transform the domain expert’s perceptual requirements into dia-
grams. These diagrams serve as a communication basis for domain experts to agree
or disagree with the e-service design analysis (Zachman, 1987).
The models for the conceptual layer must comply with the following requirements:
• Service Description – Illustration of the e-service (Baida et al., 2004) offering in
terms of functionality (Oaks et al., 2003), and monetary, quality, legal and security
aspects (O'Sullivan, 2006). On this basis, potential e-service consumers search,
rank, compare, select, and substitute e-services. E-service can be described by
the e-service property ontology introduced by O'Sullivan (O'Sullivan, 2006) and e-
service classification approaches such as UNSPSC5.
• Workflow – The aim of the workflow dimension is to show the e-service behavior.
It presents tasks in sequence or in parallel which need to be carried out in order to
fulfill e-service functionality. Tasks represent a company’s capability. Additionally,
workflow models make use of data, people, and rule concepts (Bhattacharya
et al., 2007;Muehlen et al., 2007). Appropriate model notations for the workflow
dimension are Event-driven Process Chains (EPC) (Scheer & Nuettgens, 2000),
and UML Activity Diagram6.
• People – The people dimension embodies organizations (actors), organizations’
hierarchies, and roles within organizations. People own capabilities and carry out
or are responsible for tasks within a workflow. Model notations for the people di-
mension are UML Use Case Diagram6 and organizational charts.
• Data – Data conceptualize information, which is necessary to perform the different
tasks described in the workflow model. Information comes from within organiza-
tions (intangible resources) and from outside organizations. Data can be de-
5 http://www.unspsc.org/
6 http://www.omg.org
15
scribed using UML Class Diagram6 and Entity-Relationship Diagrams (Chen,
1977).
• Rule – The aim of rule descriptions (Muehlen et al., 2007) is to implement rules
and policies which an e-service must comply to. Model notations for the rule di-
mension include Semantic Rule Model Notation (SRML) and Semantic Business
Vocabulary (SBVR) (Muehlen et al., 2007).
Logical Perspective
The logical layer follows the conceptual layer and, therefore, contains the models
concerned with the abstract technical implementation of an e-service. The logical
layer serves as a bridge for the gap between design and implementation. This means
the models of the logical layer are not executable (e.g. by a workflow engine), how-
ever the focus lies on definition of technical details, which serve as a base for a
transformation into executable models. The logical layer consists of separated mod-
els with common elements, which have multiple representations in the models.
We propose the following requirements and models forming the logical layer:
• Service Description – Definition of technical non-functional Requirements like
Quality of Service (QoS) in terms of time-based latency, availability etc., an e-
service abstract interface and structure. An e-service interface can be de-
scribed using UMPS.
• Workflow – A notation and formalism for a graph-oriented definition of an e-
service underlying workflow is required. For example BPMN is used to model
the workflow.
• Data – The data model should contain a data model capturing all associated
information as well as data artifacts required by other models (e.g. the work-
flow or people model). An OWL UML-Profile (Brockmanns, 2007) is applied to
the data model. It is combining the visual notation of UML and the expressive-
ness of OWL, so a semantic data model can be defined.
• People – The model contains an abstract representation of graphical interac-
tion with an e-service connected to the workflow. It also captures a flow of in-
teraction regarding the interface to the users (actors) involved with an execu-
tion of an e-service. The people column is covered by Diamodl (Trætteberg,
2006), which supports modeling of user interaction and data flow between
user interface components
• Rules – We propose to select a visual modeling of rules using a common no-
tation which defines constrains for the semantic data model and conditions for
workflow and interface definition. In order to define constraints for the data
model we propose the usage of an F-Logic UML-Profile, which supports the
modeling of logical rules using the UML notation.
This layer involves the IT-analyst which refines and creates the final version of the
workflow in form of a process by adding constructs for error handling, fault‐tolerance,
16
transactions, etc. Furthermore he is responsible for interaction modeling and the en-
richment of the models by technical details.
Technical Perspective
The technical layer is targeted at the definition of technical specifications using estab-
lished standards. It serves as an aggregator of the models of abstract technical in-
formation provided by the logical layer. This formal information is transformed into
executable or interpretable models. These models provide the full information in or-
der to generate technical specifications using a model-to-text transformation (code
generation). The goal is to prepare a full technical specification of an e-service, which
enables automatic deployment and execution.
We propose the following requirements and models forming the technical layer:
• Service Description – Definition of the interface of an e-service including pro-
vided operations, data types, transactional behavior, security aspects etc.
WSDL and related WS-standards, like WS-Security or WS-Transaction. We
chose them since they are a well established and accepted way of using XML
to represent an e-service interface and related information. Furthermore this
integrates the Web-Service world within the ISE-Framework.
• Workflow – An executable specification of an e-services underlying workflow
which can be run by a process engine. Using BPEL allows expressing the un-
derlying workflow in an executable language with a variety of supporting en-
gines.
• Data – A formal representation of e-services data artifacts, including structures
used by the process, data types exposed via an interface and aspects describ-
ing an e-service, which should be represented in a semantic data model. Here
OWL is used as a representation of semantic information.
• People – A specification of an user interface allowing interaction with the e-
service. This specification fully describes a user interface; such it is interpret-
able by an engine. The CAP (Constantine, 2003) notation is used for describ-
ing an abstract user interface, i.e. interaction elements like buttons, text fields,
output fields, etc. and their containers describing their relative alignment. In-
formation like color, size and style is up to the generated code.
• Rules – The rules are derived from the graphical representation of the logical
layer. Therefore this model represents the rules, such as they are interpretable
by a rule engine. We propose the use of F-Logic, since it allows the definition
of constraints over an ontology, which connects to the data dimension.
The role concerned with the technical layer is named IT Developer. His responsibility
covers the implementation of the technology that will perform the processes, as well
as the refinement of all other models.
Validation – ISE Workbench