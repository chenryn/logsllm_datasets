e
m
g
a
r
F
d
e
b
m
e
s
s
a
e
R
l
70
60
50
40
30
20
10
0
Logs
Source Code Binary Code Binary Docs
Raw Text Encrypt/Compress
Figure 4. Average Reassembly of Fragments
in a Single Pass
Log ﬁles and other operating system related ﬁles are re-
assembled more accurately as they have more structure and
data is often repeated in a predictable manner. Likewise,
source code has standard keywords and when broken along
these keywords a matching fragment is easily found. Bi-
nary code and binary documents, however, have less pre-
dictable patterns and most binary ﬁles seem to have ‘ﬁle
holes’, where large regions are ﬁlled with ‘0’s. When two
or more fragments are split along these ﬁle holes they have
multiple candidates for the adjacent fragment as their candi-
date probabilities are uniformly distributed. In this case, in-
stead of breaking ties arbitrarily fragments are chosen by
increasing the value of β, which helps choose the most
likely fragment among the competing fragments by look-
ing further down the path. In addition to ﬁle holes, some
binary documents have compressed regions, such as inline
images, which further affects their accurate reassembly. Un-
formatted plain-text and chat transcripts also proved to be
difﬁcult to reassemble since the transcripts contain unpre-
dictable words and fragments are split along large portions
of empty spaces. Figure 5 shows the average compression
ratio of sample document types and as we compare this to
Figure 4 it is clear that more structure a document has bet-
ter the accuracy of reassembly.
is (α ∈ {5, 10, 15, 20}), candidate reorderings.
Table 2 presents most accurate reassembly in top-n, that
At ﬁrst sight the numbers in Table 2 may appear to be
low. However, it should be noted that a forensic analyst can
examine the top α potential orderings by our system and
identify proper subsequences within them, That is, subse-
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:46:44 UTC from IEEE Xplore.  Restrictions apply. 
i
o
i
t
a
R
n
o
s
s
e
r
p
m
o
C
9
8
7
6
5
4
3
2
1
0
Logs
Source Code Binary Code Binary Docs
Raw Text Encrypt/Compress
Figure 5. Compression Ratio of Various Doc-
ument Types
Type
Log Files
Executables
Binary Files
Unformatted
Top 10
Top 15
Top 5
Top 20
57.7% 58.0% 58.7% 68.0%
30.0% 30.7% 33.4% 33.4%
23.4% 24.6% 28.4% 28.4%
26.4% 28.3% 29.0% 31.0%
Type
Log Files
Source Code
Executables
Binary Files
Unformatted
Iterations
4
6
9
10
10
Table 3. Iterations Required to Reconstruct
the Entire Document
)
%
(
s
t
n
e
m
g
a
r
F
d
e
b
m
e
s
s
a
e
R
l
45
40
35
30
25
20
15
10
2
Logs
Source Code
Binary Code
3
4
5
6
7
8
9
10
Context Model Order
Table 2. Reassembled Document Fragments
in Top {5, 10, 15, 20} Candidates in a Single
Pass
Figure 6. Inﬂuence of Context Orders in Re-
assembly of Various Document Types
quences that correspond to proper reassembly. The frag-
ments in these subsequences can then be recombined into
unit fragments and the entire reassembly process reiterated.
This iteration process will eventually converge on to the
proper reordering with much less effort than if she were to
perform the entire task manually. The following table lists
the average number of iterations required to reconstruct var-
ious document types. It can be seen that even with unfor-
matted ﬁles and binary ﬁles, about 10 iterations are sufﬁ-
cient to converge to the correct reordering. For a data set
with more than a hundred fragments for each ﬁle, this is a
reasonably small effort compared to any manual analysis.
In general smaller order contexts (3 to 5) performed well
for various document types. Figure 6 illustrates the opti-
mal context orders for log ﬁles, source code, and executable
ﬁles. Increasing the size of the context had no effect in most
cases.
When candidate probabilities are distributed properly,
that is a fragment’s candidate probability to another is sig-
niﬁcantly larger than for rest of the fragments, increasing α
and β yields better results. When candidate probabilities are
uniformly distributed, that is each fragment is equally prob-
able candidate to be adjacent fragment to others, tweaking
α, β has no inﬂuence on the results. We believe preprocess-
ing heuristics are s vital part of the process and will further
enhance the accuracy of reassembly. Furthermore, domain
knowledge of binary documents and code, such as valid in-
structions or valid tags, and can be incorporated into the
model to more accurately compute candidate probabilities.
4. Conclusion
Digital evidence by nature is easily scattered and a foren-
sic analyst may come across scattered evidence in a variety
of situations. For example, a forensic analyst who comes
across the problem of recovering deleted ﬁles often faces
the difﬁcult task of reassembling ﬁle fragments from a col-
lection of randomly scattered data blocks on a storage me-
dia. In this paper, we introduce a general framework for re-
assembling scattered evidence using context based statisti-
cal models. We formulate the problem of reconstructing the
most likely reordering of the fragments as a graph problem
and showed that computing the optimal solution involves
solving the maximum weight Hamiltonian Path problem
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:46:44 UTC from IEEE Xplore.  Restrictions apply. 
[17] I. Stoica and R. e. a. Morris. Chord: A scalable peer-to-peer
lookup service for internet applications. ACM SIGCOMM
2001, pages 149–160, 2001.
[18] T. C. T. (TCT). http://www.porcupine.org/forensics/tct.html.
which is known to be intractable. We then proposed a tree-
pruning heuristic to compute a set of near-optimal solutions.
We implemented our framework using PPM, a well known
context modelling technique in the data compression litera-
ture, and show that our approach gives promising results.
Further investigation is necessary to establish effective
preprocessing heuristics for various document types. Al-
though we would like to have the reassembly process to
be independent of document types incorporating meta in-
formation, such as the syntax of a language or instruction
set of a program, about a certain document type into an-
other level of abstraction will help us reassemble the doc-
ument more accurately. Since images are often implicated
in criminal investigations than other types of documents we
are currently investigating reassembling of various image
formats from fragments. Also, we are planning to investi-
gate methods to collate fragments of documents from mixed
fragments of several document types using text classiﬁca-
tion methods.
References
[1] J. G. Cleary and W. J. Teahan. Unbounded length context for
ppm. The Computer Journal, 1997.
[2] T. H. Cormen and e. a. Leiserson C. E. Introduction to algo-
rithms. MIT Press, 2001.
[3] G. S. I. Encase. http://www.encase.com/.
[4] Freenet. http://freenetproject.org/.
[5] Gnutella. http://gnutella.wego.com/.
[6] I. Hamer and P. Chow. Des cracking on the transmogriﬁer
2a. Cryptographic Hardware and Embedded Systems, LNCS
1717, Springer-Verlag,, pages 13–24, 1999.
[7] T. S. Kit. http://www.sleuthkit.org/.
[8] D. E. Knuth and R. W. Moore. An analysis of alpha-beta
pruning. Artiﬁcial Intelligence, pages 293–326, 1975.
[9] J. Kubiatowicz and D. e. a. Bindel. Oceanstore: An architec-
ture for global-scale persistent storage. Proceedings of the
Ninth International Conference on Architectural Support for
Programming Languages and Operating Systems, 2000.
[10] H. C. G. Leitao and J. Stolﬁ. A multi-scale mehtod for the
re-assembly of fragmented objects. Proc. British Machine
Vision Conference - BMVC 2000, 2:705–714, 2000.
[11] A. Moffat. Implementing the ppm data compression scheme.
IEEE Transactions on Communications, 1990.
[12] M. o-o t. http://www.m-o-o-t.org/.
[13] J. J. Rissanen. A universal data compression system. IEEE
Transactions on Information Theory, 29(5):656–664, 1983.
[14] J. J. Rissanen and G. G. Langdon. Arithmetic coding. IBM
J. Res. Dev., 23(2):149–162, 1979.
[15] J. J. Rissanen and G. G. Langdon. Universal modelling and
coding. IEEE Transactions on Information Theory, 1981.
[16] A. Rowstron and P. Druschel. Pastry: Scalable, distributed
object location and routing for large-scale peer-to-peer sys-
tems.
IFIP/ACM International Conference on Distributed
Systems Platforms, pages 329–350, 2001.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:46:44 UTC from IEEE Xplore.  Restrictions apply.