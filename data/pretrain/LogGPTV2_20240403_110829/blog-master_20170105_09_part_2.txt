ALTER SEQUENCE  
```  
如果不能满足以上性能的话, 也不必着急, 有一种方法可以规避, 创建多个表, 每个表一个线程插入这样总可以吧.  
如果觉得多个表一对一的插入这样程序设计起来比较麻烦, 那么用分区表来解决也是可以的, 程序还是插1个主表, 不过由数据库的触发器函数来决定每个程序插入1个表, 这样做的话数据库需要承担一定的逻辑判断, 表越多, 对性能越不利.  
不过我个人还是建议使用程序来区分每个线程插入不同的表, 这样能够达到最高的性能.   
最后, 如果使用锁的方法来实现多线程并行插入模拟成串行插入的话, 还需要注意序列的缓存, 因为会话不断开的话, 取到的序列的缓存是一直存在的, PostgreSQL 9.4开始支持DISCARD SEQUENCE了, 这样可以清楚缓存中的序列, 那么使用加锁的方式来实现并行模拟串行的插入就可以了, 获得锁后, 立刻执行DISCARD SEQUENCE然后再插入数据.   
例如 :   
```  
alter sequence log_id_seq cache 1000;  
pg94@db-172-16-3-150-> vi test.sql  
select pg_advisory_lock(1);  
DISCARD SEQUENCES;  
insert into log(c1) values(1);  
select pg_advisory_unlock_all();  
```  
性能比单线程插入更差, 因为虽然是并行的, 但是最终要更多的锁开销来模拟成串行.  
```  
pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 10  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 10 s  
number of transactions actually processed: 38647  
latency average: 4.140 ms  
tps = 3862.764755 (including connections establishing)  
tps = 3867.133490 (excluding connections establishing)  
statement latencies in milliseconds:  
        3.876671        select pg_advisory_lock(1);  
        0.046670        DISCARD SEQUENCES;  
        0.116832        insert into log(c1) values(1);  
        0.090477        select pg_advisory_unlock_all();  
```  
批量插入的结果则更能接受, 因为锁的开销和并行插入的时间相比不算大 :   
```  
pg94@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 10  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 10 s  
number of transactions actually processed: 1346  
latency average: 118.871 ms  
tps = 133.019620 (including connections establishing)  
tps = 133.165837 (excluding connections establishing)  
statement latencies in milliseconds:  
        112.006556      select pg_advisory_lock(1);  
        0.115342        DISCARD SEQUENCES;  
        7.137090        insert into log(c1) values
        0.168648        select pg_advisory_unlock_all();  
```  
检验使用锁的方法模拟的串行插入事务ID和序列是否一致.  
```  
digoal=# select * from   
(select row_number() over (order by id) as rn, id, xmin::text::int8 from log) t1,   
(select row_number() over (order by (xmin::text::int8),id) as rn, id, xmin::text::int8 from log) t2   
where t1.rn=t2.rn   
and (t1.id<>t2.id or t1.xmin<>t2.xmin);  
 rn | id | xmin | rn | id | xmin   
----+----+------+----+----+------  
(0 rows)  
```  
结果一致.  
为方便大家查询, 汇总PostgreSQL实时和非实时数据统计的案例分析文章系列 - 如下 :                   
1\. http://blog.163.com/digoal@126/blog/static/163877040201331252945440/                  
2\. http://blog.163.com/digoal@126/blog/static/16387704020133151402415/                  
3\. http://blog.163.com/digoal@126/blog/static/16387704020133155179877/                  
4\. http://blog.163.com/digoal@126/blog/static/16387704020133156636579/                  
5\. http://blog.163.com/digoal@126/blog/static/16387704020133218305242/                  
6\. http://blog.163.com/digoal@126/blog/static/16387704020133224161563/                  
7\. http://blog.163.com/digoal@126/blog/static/16387704020133271134563/                  
8\. http://blog.163.com/digoal@126/blog/static/16387704020134311144755/                  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")