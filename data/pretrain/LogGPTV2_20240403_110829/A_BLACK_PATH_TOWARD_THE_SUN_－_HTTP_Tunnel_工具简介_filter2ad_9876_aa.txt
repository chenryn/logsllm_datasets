# A BLACK PATH TOWARD THE SUN － HTTP Tunnel 工具简介
|
##### 译文声明
本文是翻译文章，文章来源：同程安全应急响应中心
译文仅供参考，具体内容表达以及含义原文为准。
**Part One － 简介**
* * *
NCC Group 作为老牌的代码安全审计机构，在 OpenSSL HeartBleed（心脏出血漏洞）爆发之后为 OpenSSL
提供代码安全性的审计服务。同时他们在 Github 上也提供很多开源的工具和解决方案，从 [NCC Group
主页](https://github.com/nccgroup)可以看到很多超过 100+ star 的项目，而在最近 Black Hat US 的
Arsenal 展区他们带来了新的开源项目 [A Black Path Toward The
Sun](https://github.com/nccgroup/ABPTTS) （ABPTTS），一款用以在复杂网络环境下通过被控制的 Web
应用服务器打通 HTTP Tunnel 建立网络连接的工具。  
在 ABPTTS 出现之前，已经有了 [netcat](http://netcat.sourceforge.net/)（TCP
端口转发）、[httptunnel](http://http-tunnel.sourceforge.net/)（TCP – over – HTTP）、
[tunna](https://github.com/SECFORCE/Tunna) （HTTP
Tunnel）、[reGeorg](https://github.com/sensepost/reGeorg)（Socks5）等类似的网络工具，而 NCC
Group 开发 ABPTTS 的目的将这些工具各自的优秀之处结合起来并简化成一个工具。 ABPTTS 主要针对的使用情况有两种：
  * 在渗透过程中渗透者（下文简称：A）不能和 Web 服务器建立除了 HTTP 之外的其他类型连接。举个例子：A 从应用层控制了 Web 服务器，可以访问 Web 服务器的 TCP 的 443 端口并建立连接，但是其他类型的连接不能通过防火墙。
  * A 虽然可以对被控制的 Web 服务器发起非 HTTP 协议之外的请求，并且这些请求或许可以通过防火墙抵达 Web 服务器， 但是 Web 服务器向外发起的只有 HTTP 连接可以直接通过防火墙。举个例子：A 想 SSH 登陆到 目标服务器，但是该 SSH 协议需要通过网络中部署的 TLS – Inspector，而 TLS – Inspector 会拒绝其他协议企图建立隧道的请求，因此 A 并没有办法直接建立起和 Web 服务器之间的 SSH 隧道。
**Part Two － 举个** **** ****
* * *
**现在我们假设一个真实的场景如下：**
  * A 发现了一个可以直接 Getshell 任意文件上传，目标 Web 服务器使用的是 Apache Tomcat。
  * Web 服务器处于公网，A 可以直接访问，但是除了 HTTP 连接之外的其他连接都被防火墙、路由器 ACL 表、负载均衡等过滤。
  * Web 服务器所有协议的请求都需要经过上述防火墙、路由器 ACL 表等过滤，不能和外网建立任何直接连接。
  * Web 服务器不向外网的 DNS 服务器发起 DNS 查询。
第二点使 A 没办法向目标服务器建立任何直连 Shell，而第三点则让 A 没办法和目标服务器建立反向 Shell，第四点则使 A 没办法和目标服务器建立
DNS 隧道。
在这样的复杂网络环境下如果不建立 HTTP 隧道，那么 A 只能通过 Webshell 获得的非（半）交互式 Shell
来逐条地执行命令，这样极为不便并且很多需要交互的软件不能运行，更不用说将 Web 服务器作为跳板使用 RDP 连接内网其他主机了。
这个时候 A 就可以通过 ABPTTS 建立起一个 HTTP Tunnel，而通过这个 HTTP Tunnel
攻击者可以直接访问到目标服务器所能访问到的内容，因为 A 和目标服务器通信是通过 HTTP Tunnel 符合防火墙等策略，能够通过防火墙等的过滤。
使用 ABPTTS 建立 HTTP Tunnel 在客户端和服务端都需要进行特定操作：
  * A 在本机运行一个可以将发往目标服务器的 TCP 报文转换成特定格式 HTTP 请求的 Python 脚本，然后再将该 HTTP 请求发送给目标服务器。
  * A 在目标服务器上传一个 JSP 脚本文件（当前环境为 Tomcat），这个脚本文件可以将 A 发起的 HTTP 请求还原成原 TCP 报文，并根据报文建立连接，将连接产生的响应 TCP 报文又重新转换成 HTTP 响应并通过 Web 应用返回给 A。
**具体步骤如下：**
1.A 在本机执行
    python abpttsfactory.py -o tomcat_walkthrough
将会看到如下输出：
    [2016-08-10 10:53:34.839592] ---===[[[ A Black Path Toward The Sun ]]]===---[2016-08-10 10:53:34.839674]    --==[[        -  Factory  -        ]]==--[2016-08-10 10:53:34.839706]             Ben Lincoln, NCC Group[2016-08-10 10:53:34.839721]            Version 1.0 - 2016-07-30[2016-08-10 10:53:34.841099] Output files will be created in "~/Desktop/Pentest/Python/ABPTTS/tomcat_walthrough"[2016-08-10 10:53:34.841121] Client-side configuration file will be written as "~/Desktop/Pentest/Python/ABPTTS/tomcat_walthrough/config.txt"[2016-08-10 10:53:34.841137] Using "~/Desktop/Pentest/Python/ABPTTS/data/american-english-lowercase-4-64.txt" as a wordlist file[2016-08-10 10:53:34.849013] Created client configuration file "~/Desktop/Pentest/Python/ABPTTS/tomcat_walthrough/config.txt"[2016-08-10 10:53:34.851994] Created server file "~/Desktop/Pentest/Python/ABPTTS/tomcat_walthrough/abptts.jsp"[2016-08-10 10:53:34.853073] Created server file "~/Desktop/Pentest/Python/ABPTTS/tomcat_walthrough/abptts.aspx"[2016-08-10 10:53:34.853882] Created server file "~/Desktop/Pentest/Python/ABPTTS/tomcat_walthrough/war/WEB-INF/web.xml"[2016-08-10 10:53:34.854348] Created server file "~/Desktop/Pentest/Python/ABPTTS/tomcat_walthrough/war/META-INF/MANIFEST.MF"[2016-08-10 10:53:34.855520] Prebuilt JSP WAR file: ~/Desktop/Pentest/Python/ABPTTS/tomcat_walthrough/DroopyWhimsical.war[2016-08-10 10:53:34.855541] Unpacked WAR file contents: ~/Desktop/Pentest/Python/ABPTTS/tomcat_walthrough/war
可以看到在当前目录下生成了一个 tomcat_walkthrough 文件夹，而文件夹内有所有 ABPTTTS
支持的服务端脚本（JSP、AWAR、ASPX等，但是暂不支持 PHP）和对应的配置文件如下所示。