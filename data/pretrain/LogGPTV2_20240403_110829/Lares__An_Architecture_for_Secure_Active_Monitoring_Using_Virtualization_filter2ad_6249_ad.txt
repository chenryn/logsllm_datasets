chitecture, compared with an architecture similar to that of
current security applications.
5.1 Security
An essential component of a successful attack is to evade
detection by either hiding itself or by disabling defensive
measures altogether. Many malware today incorporate fea-
tures, similar to Agobot, to disable commercial anti-virus
programs. Earlier methods involved process termination
system calls for known anti-virus process names. How-
ever, most anti-virus programs incorporate hooks into pro-
cess termination and creation routines to monitor their us-
ages patterns for self-defense [35]. In addition, hooks are
placed into events such as ﬁle/disk access or Windows reg-
istry updates for detecting malicious updates to the system.
To defeat such systems, malware programs incorporate var-
ious rootkit methods [10] that can remove such hooks to
successfully disable anti-virus tools prior to infection. A
recent work [39] allows automatic analysis of the hooking
behavior of malware by identifying the modiﬁed code and
data structures. A large number of malware place their own
hooks in order to hide their processes, drivers, ﬁles (e.g. the
FU rootkit, NT rootkit etc.) and their malicious changes in
the system or backdoors (e.g. Uay Backdoor). A classiﬁca-
tion of rootkits can be found in [29].
As described above, a technique used by attackers to de-
feat commercial anti-virus tools is to replace the hooked
function pointer in the SSDT to either the original func-
tion pointer (disabling the hook) or to a malicious func-
tion pointer that in turn calls the original one (hijacking
the hook).
In order to perform this attack, the malware
must have detailed knowledge of the internal workings of
these tools. Since these kinds of low-level attacks must be
specially crafted for the target security tool to be effective,
we were not able to test our memory protections with pre-
existing attack code. Instead, we developed a synthetic at-
tack that performs the hook hijacking attack using the same
technique used by rootkits.
Our test system consisted of the guest VM running with
the trampoline and hooks initialized. To ensure the syn-
thetic attack works properly, we then ran it without any
memory protections enabled. During this test, the syn-
thetic attack worked as expected, hijacking the hook and
effectively preventing any execution of the trampoline code.
Next, we repeated the test with the memory protections en-
abled. This time the synthetic attack failed to complete
its installation because it was unable to change the write-
protected entry in the SSDT and the trampoline code con-
tinued to execute normally.
This test shows that the memory protections work prop-
erly. Similar attacks could be constructed to modify the
trampoline code, the pointer to the SSDT in the system ser-
vice dispatcher, or the pointer to the system service dis-
patcher from the IDT. However, these attacks would also
fail because these regions of memory are also protected by
our system. An analysis of additional security considera-
tions is provided in Section 6.
5.2 Performance
Our benchmarking tests were run on a Lenovo Thinkpad
T60p laptop. The test machine has a Intel Core Duo T2700
processor running two cores at 2.33GHz, 2KB of cache per
core, and 2GB of system memory. The hypervisor was Xen
3.0.4. The guest VM ran Windows XP SP2 and allocated
384 MB of memory. The security VM ran Fedora 7 and
allocated the remaining system memory.
Hook processing is the key operation where the Lares
architecture will differ in performance from a traditional ar-
chitecture. Therefore, our benchmark measurements look
at the time required to process a single hook in the Lares
architecture and compare that with a traditional architec-
ture. To measure the hook processing time with the Lares
architecture, we instrumented the trampoline code. We re-
trieved the value of the processor’s performance counter be-
fore and after the VMCALL instruction. The processor’s
performance counter was obtained using a function pro-
vided by Windows, KeQueryPerformanceCounter.
The difference between these two measurements represents
the time needed for inter-VM communication and hook pro-
cessing within the security VM. However, this measurement
is noisy. It can be inﬂuenced by cache effects, VM schedul-
ing, physical interrupts, CPU frequency scaling, and other
loads on the system. We took several steps to minimize
the inﬂuence of this noise in our measurements. First, we
pinned each VM to its own CPU core. Next, we disabled
unnecessary services in the security VM. Then we disabled
CPU frequency scaling in the BIOS.
242
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply. 
21
20
19
18
17
16
15
Traditional Hook
35
30
25
20
400
350
300
250
200
150
100
Lares Hookbest case
Lares Hookwith processing
Figure 5: Hook performance is shown in the left three charts. The traditional hook shows the time for pro-
cessing a hook locally. The Lares (best case) shows the time for just sending a notiﬁcation to the security
VM. The Lares (with processing) shows the time for processing the hook in our prototype application, using
introspection to lookup ﬁle names from handles. All of these times are in µsecs.
After the system was prepared as indicated above, we
measured the hook performance across ﬁve runs, where
each run included 1000 measurements. The 5000 measure-
ments were combined into a single data set. Then we per-
formed a standard statistical analysis to remove the outliers,
since there was still some noise in the measurement. Our
analysis computed the inner-quartile range (IQR) of the data
set and deﬁned outliers to be 1.5 times the IQR above the
third quartile and below the ﬁrst quartile. After removing
the outliers, the computed mean on our data was 28 µsecs
to just send a notiﬁcation to the security VM and 175 µsecs
when the security application used introspection to lookup
ﬁle names from handles. A more detailed look at the perfor-
mance characteristics of memory introspection is available
in our prior work [22].
To measure the hook processing time for a traditional ar-
chitecture we developed a system that processes the hook
inside the guest VM. The kernel code in this system is the
same as the Lares architecture except that instead of exe-
cuting the VMCALL instruction to process a hook, we send
an event to a user-space application. This application per-
forms the same check as our prototype, looking up the ﬁle
handle to check the associated ﬁle name. The system was
prepared and the tests were run the same as for the Lares
architecture test. After removing the outliers, the computed
mean on our data was 17 µsecs. The results from each of
these tests are shown graphically in Figure 5. These graphs,
known as boxplots, show the IQR as a gray box. The me-
dian value is denoted with a horizontal line through the box.
And the range of the remaining nonoutlier data is shown as
lines extending above and below the box.
Two major factors contribute to the differences in the
performance of Lares versus a traditional architecture. First
is the fact that it takes more time to exit the guest VM, send a
signal to the security VM, and perform the software address
translations needed for memory introspection than it does
to perform the same tasks locally. This factor contributes to
the overhead for a single hook event. The second factor is
more subtle. When everything is processed locally as in the
243
traditional architecture, there is no security beneﬁt to pro-
cessing data inside the kernel versus in application space.
Since only a subset of the calls to NtCreateSection
are associated with the ﬁle handle of a new process execu-
tion attempt, the traditional architecture can use the result
of the ObReferenceObjectByHandle function in the
windows kernel to ﬁlter out the hook events that do not need
additional processing. Using this technique, only a subset
of the hook events are sent to user space for processing.
However, in the Lares architecture, we do not trust any lo-
cal functions in the Windows kernel. So every hook event
is sent to the security VM for processing. This example is
speciﬁc to the hook that we implemented, but a similar sit-
uation would exist for other hooks as well. This trade-off
raises the mean time required for hook processing in the
Lares architecture, but also increases the security of our ar-
chitecture by reducing dependencies on untrusted code.
While our benchmarks show that Lares is slower than
traditional hook processing, we also provide a signiﬁcant
improvement in security. The overall performance of a
given application will ultimately depend on the number of
hooks it uses in addition to its use of introspection and other
techniques to collect data for processing each hook. Our ex-
perience with the example application and the performance
results presented in this section suggest that applications us-
ing Lares can perform similarly to applications using tradi-
tional architectures.
6 Security Analysis
In this section, we analyze the security of our prototype
and show that the majority of the attacks discussed in Sec-
tion 2.2 against secure active monitoring applications will
not succeed against our architecture. We discuss each of
these attacks using our prototype as the case study.
In our architecture,
the security application, security
driver and underlying OS in the security VM are inherently
protected from any type of disabling or tampering (attacks
A3 and A4) initiated from the intruder in the guest VM.
This can be generalized to our architecture as a whole, as
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply. 
A1.2
A1.4
A1.5
IDTR
IDT
A1.1
GDTR + GDT + Paging structures
Syscall
dispatcher
A1.3
Trampoline
SSDT 
hook
A1.6
To Security VM
Figure 6: Various forms of A1 attacks aimed at circumventing our monitoring mechanism.
any application that makes use of Lares will be in the secu-
rity VM, and therefore integrated with the TCB. As such,
the only option for an attacker would be to target the guest-
space infrastructure (attacks A1, A2 and A5) on which the
security application relies on for active monitoring
We ﬁrst discuss various forms of A1 attacks illustrated
in Figure 6, which are aimed at circumventing our moni-
toring infrastructure. They work by maliciously modifying
the guest architecture components and the system structures
that they depend on.
In case of the SSDT hook and the
trampoline, disabling or tampering with such components
(attacks A1.5 and A1.6) would mean maliciously altering
their memory state. For example, the hook could be re-
placed by another that points to a malicious function, or the
trampoline could have critical parts of its code (such as the
VMCALL) erased. Attacks of this type against the hook
and the trampoline are effectively blocked by our architec-
ture, as we write-protect their memory region. This fact
has been empirically veriﬁed in the experiments we con-
ducted, presented in Section 5. We can also generalize this
property to any type and number of hooks in the kernel, as
our hypervisor-based memory protection is done at the byte
level and can be applied anywhere in kernel code or data.
Other types of circumvention attacks illustrated in Fig-
ure 6 involve manipulating certain kernel structures which
control the kernel’s ﬂow of execution between the moment
at which the NtCreateSection event happens and the
hook is triggered. In the case of our SSDT based hook, the
IDTR register (A1.1), the system’s IDT (A1.2), the system
call dispatcher (A1.4) and current address translation struc-
tures (A1.3) can be targeted. The latter includes the GDTR
register, the GDT and the current page table. These regis-
ters and structures are deﬁned by the x86 architecture. The
ﬁrst three determine the ﬂow of execution immediately af-
ter a system call is triggered by the int CPU instruction.
In our prototype, we write-protect the IDT and the system
call dispatcher code in memory, nullifying attacks A1.2 and
A1.4. Such protections have no negative side-effects, as
these structures are normally not supposed to be modiﬁed
at run-time. For the IDTR, we were unable to implement a
similar kind of protection, as changes to this register can-
not be trapped by a hypervisor using Intel VT-x. Instead,
we check its contents for modiﬁcations at every exit from
the guest to the hypervisor. These exits (called VM exits)
happens at least at every context switch, making attacks tar-
geted at this register extremely difﬁcult to succeed due to
the short window of opportunity. However, for the AMD
SVM platform, this attack is not a concern because changes
to the IDTR are trapped by the hypervisor.
A more sophisticated type of circumvention can be done
by manipulating the GDTR, the GDT and the system’s page
tables, as these are used in the translation step between the
IDT and the system call dispatcher (attack A1.3 in Figure6).
An attacker could tamper with such structures to manipu-
late the address translation, and redirect the ﬂow of exe-
cution to a different physical address, containing malicious
code. Memory introspection is affected by a similar issue,
as it normally uses page tables inside the guest OS to per-
form memory translation. Although possible, such an at-
tack would nevertheless be considerably difﬁcult to imple-
ment in this particular case, as the dispatcher shares a single
4MB page with the rest of the Windows XP kernel. To suc-
ceed, an attacker would thus need to relocate a large critical
portion of the kernel without detection—a considerable, if
not impossible effort. In situations where such an obstacle
is absent, a general solution to this problem would involve
monitoring individual shadow page table entries to ensure
that they always point to speciﬁc, known good locations.
In addition, a notiﬁcation should be sent by the trampo-
line only if an event happens, that is, an intruder should not
be able to send bogus notiﬁcations. This could be done,
for instance, by explicitly invoking the trampoline or jump-
ing into arbitrary locations inside it (for instance, the VM-
CALL). Although this condition is not addressed by our
prototype, we recognize it as a signiﬁcant issue. One possi-
ble solution would be to ﬁrst control the origin of branches
by marking the memory region where the trampoline code
resides with the non-execute (NX) bit. By doing so, every
access to the trampoline would generate a fault, allowing
us to check if the EIP value (the location from which the
call was made) corresponds to an authorized hook location.
If not, then we would know that the attacker is trying to
make a bogus call to the trampoline and block it. The cr2
register could also be monitored, which would allow us to
check the destination of the branch, and enforce a single
entry point into the trampoline code. This would in turn
244
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply. 
block any attempts of branching into arbitrary locations of
the trampoline code.
Other types of attacks can be avoided by disabling inter-
rupts system-wide during the execution of the trampoline.
This ensures that no other kernel thread is executed before
the VMCALL. This guarantee, combined with our assump-
tion that this system is running on a single processor, en-
sures that no one can change the monitored thread context
to bypass the hook. Therefore, the code execution from the
occurrence of the event up to the notiﬁcation sent by the
trampoline cannot be preempted.
This technique also automatically prevents A2 attacks,
as interrupt disabling prevents an attacker from modifying
any context information from the moment the event hap-
pens to the moment a response is received by the trampo-
line. Attack A5 is also prevented since the code responsible
for carrying it out is already protected in the trampoline,
and the fact that interrupts are disabled guarantees that its
execution cannot be preempted. Although the triggering of
non-maskable interrupts (NMIs) could circumvent the in-
terrupt disabling and break the desired execution atomicity,