software, Noise-SDR pushes the limits of what can be achieved with
electromagnetic noise. The software implementation of the physical
layer is what defines a software-defined radio as such, and all
software-defined radio have limitations (e.g., frequency, bandwidth,
transmission and/or reception) that depend on their cost and purpose.
b) Noise-SDR impact and security implications: Regarding
Question 2, Noise-SDR opens new opportunities to establish radio
links with advanced properties and good performance. Indeed,
advanced techniques that optimize transmission for different
goals (e.g., distance, data rate) become readily available, making
exfiltration more practical and effective. The mobile nature of
smartphones leads to additional opportunities, for example, device
tracking. Moreover, smartphones carry many radio transceivers, and
sensors. Attackers could use Noise-SDR to jam, spoof, or otherwise
affect one of these components. Table I compares Noise-SDR with
existing (electro)magnetic channels.
c) Contributions: We make the following contributions:
• A generic approach for arbitrary noise modulation: We
present Noise-SDR, a software-defined fully-digital approach
to shape generic radio signals out of the noise produced by
unprivileged software (though with some limitations on the
available power, frequency, and bandwidth).
• A practical implementation: We demonstrate a practical
implementation on several platforms and architectures
(ARMv7-A, ARMv8-A, x86-64, and MIPS32), using DRAM
accesses as building block to generate electromagnetic leakage.
• Evaluation and Security impact: We show the opportunities
brought by Noise-SDR, with experiments on many devices:
– Advanced transmissions: Performant
transmissions
with advanced techniques (e.g., symbol shaping, spread
spectrum, multi-carriers, interleaving) and state-of-the-art
protocols (e.g., AM, FM, SSTV, CW, RTTY, MFSK,
PSK, multi-carrier PSK, THOR, HamDRM, LoRa,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:04 UTC from IEEE Xplore.  Restrictions apply. 
1194
Fig. 1. Overview of different radio architectures. A conventional radio implements
the physical layer in hardware, whereas an SDR implements it in software. A
conventional radio front-end is made of analog/RF components, whereas a fully-
digital radio uses digital hardware thanks to one-bit coding. Finally Noise-SDR (this
paper) implements both the physical layer and one-bit coding in software, and uses the
electromagnetic leakage of the underlying hardware to generate physical radio signals.
GLONASS C/A), each optimized for different goals.
– Applications beyond exfiltration: Case studies for
possible applications, including exfiltration with different
protocols, device tracking using FT4 below the noise
floor (up to 5 m) with a Samsung Galaxy S5 Mini, and
remote control of a Tytera UD MV 380 UHF receiver.
A. Software-Defined Radios
II. BACKGROUND
A radio transmits information using electromagnetic signals. The
physical layer of a protocol defines how these signals are processed
to transmit and receive data. In the past, a given device implemented
a fixed physical layer using dedicated hardware. Nowadays, radio
hardware is often more flexible thanks to its integration with
software. In particular, the Software Defined Radio (SDR) Forum2
defines an SDR as:
Software Defined Radio (SDR): “Radio in which some
or all of the physical layer functions are software
defined” [34].
This means that all or part of the physical layer is implemented in
software. For example, baseband signals are generated in software
starting from the data to send. SDRs should not be confused with
Software Controlled Radios, where software simply controls the
parameters of operation of the physical layer. Figure 1 compares an
SDR with a traditional radio. Note that the choice of modulation has
a fundamental impact on the properties of the channel (e.g., speed,
distance, bandwidth, spectral efficiency, resilience to different types
of noise).
The advent of SDRs has had a huge impact on security. Indeed,
attackers with an SDR gain a flexible and relatively inexpensive
access to the radio spectrum both in reception and transmission.
SDRs are particularly useful to generate rogue signals to inject in
other receivers [35], [36], or to flexibly craft packets of any protocol,
including proprietary ones [37].
2Now Wireless Innovation Forum, it is an group of industrial, academic, and
governmental actors interested in advancing wireless technologies including
Software Defined Radios (SDRs) https://www.wirelessinnovation.org.
Fig. 2. Sinusoidal band-pass signal (top) vs. RF-PWM square wave signal (middle)
vs. Filtered RF-PWM signal (down). For the sake of clarity, we show simple AM, FM,
and PM in sequence, one after the other. Figure 3 shows a more complex example.
B. Fully-Digital Radios
A conventional radio transmitter is made of several analog
radio-frequency components that modulate the baseband signal
on a radio carrier. Unfortunately, this type of components is hard
to integrate with other digital parts of the system and might not
be energy efficient. For this reason, many research efforts have
been spent with the goal of reducing their number to the minimum,
leading to fully-digital radios:
Fully-Digital Radios: Radios implemented with digital
components, mostly without analog blocks.
There are many strategies to implement such radios. In general, they
are based on one-bit coding to generate radio signals:
One-Bit Coding: A set of techniques to approximate a
generic multi-bit signal with a (1-bit) square wave.
Figure 1 compares the working principle of conventional and fully-
digital radios. The conventional radio first converts the baseband
signal to the analog physical domain, then it mixes it with the
radio-frequency carrier, and finally amplifies it with a linear power
amplifier [38]. In contrast, the fully-digital radio first generates a
modulated square wave carrier using band-pass one-bit coding, then
amplifies the resulting binary signal with a switching amplifier [30].
This can be made more energy efficient than the linear counterpart.
The final filtering stage cancels the noise outside the band of interest.
One-bit coding is possible because the error produced by the
approximation is kept outside of the frequency band of interest,
where it can be easily filtered out. In this paper we focus on
RF-PWM, that we describe in the following.
C. Radio-Frequency Pulse-Width Modulation (RF-PWM)
Figure 2 explains how a RF-PWM [29]–[33] square wave can
approximate a generic band-pass signal used in radio communi-
cations. The generic band-pass signal, shown in the top plot, is
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:04 UTC from IEEE Xplore.  Restrictions apply. 
1195
RadioRadioRadio spectrumSoftware DefinedRadioTraditional RadioBaseband:modulation ofsignalsRadio front-end:generation of radio signalsProtocol layer RF signalsUpperLayersRF signalsDataDataUpperLayersPhysical LayerPhysical LayerConventional analog radio front-endFully-digital radio front-endFilteringSoftware RF-PWM + Leakage radio front end                                            (this work)Bandpass1-bitCodingSMPABPFRF-PWMBPFPADACFleakFifPowerAmplifierSwitched-ModePower AmplifierBand-PassFilterDigital-to-AnalogConverterAnalog HardwareSoftwareDigital HardwarePhase changetfBaseband componentFundamental componentAAMFMAMFMPMATime domainFrequency domainAmplitude changeFrequency changefFf0-Bf0+BCosineSquarePulse phase changetPulse widh changePulse frequency changeFf03f0Harmonics2f0tAApproximated signalfFf0-Bf0+BBand-pass filterSquareFilteredPMAMFMPMRF-PWM advantage: In RF-PWM the frequency of the square
wave is the same as the frequency of the desired signal (i.e.,
frfpwm =f0). This is easier to implement than the high-frequency
square wave required by other methods such as PWM and
Delta-Sigma (∆Σ) (e.g., fpwm (cid:29) f0). For example, RF-PWM
requires a lower sampling rate.
Importance of time resolution: In any one-bit coding scheme,
the higher the time resolution at which the square wave is defined,
the higher the accuracy at which the amplitude, phase, and
frequency of the desired signal are represented. More details and
a numerical example for RF-PWM are given in Appendix B.
D. Software-Controlled (Electromagnetic) Emissions
As we have seen in Section I, an extensive literature in Emission
Security (e.g., [3]–[28]) has discovered a wide range of emissions
that can be controlled from unprivileged software. We could
generalize them as the following attack primitive:
Software-Controlled Leakage: An unintended physical
leakage from an electronic device, with two properties:
• Carrier(s): The physical leakage is made of one or
more carriers (e.g., the harmonics of a high-speed
clock) that propagate from the device and can be
received by an attacker.
• Software Modulation: Unprivileged software can,
through a certain physical effect, modulate the
carriers (generally in a very simple way).
Electromagnetic carriers: Our approach is general to any type
of emission, but we focus on electromagnetic leakages. In general,
high-speed clocks (e.g., CPU clock, DRAM clock) and data lines
(e.g., HDMI, USB, Ethernet) are strong sources of leakage. In
general, they are digital signals that present several sinusoidal
harmonics at the multiples of the fundamental frequency. An
in-depth modeling of digital signals, their electromagnetic emissions,
and their interference with other radio systems is given in [39]. To
reduce interference, some systems (e.g., DRAM used in desktop
computers) use Spread Spectrum Clock (SSC). In this case, the
clock frequency follows a chirp, reducing the peak of the emissions
as energy is spread over a larger frequency range. SSC emissions
can be still effectively used as carriers using two possible methods:
(i) despreading the clock at reception [7], (ii) observing that a SSC
clock can be modeled as a finite set of frequency components each
acting as a normal subcarrier [8]. Besides unintended emissions,
other intentional radio signals might act as carriers [40]–[43].
Minimal unprivileged modulation: In general, unprivileged
code has a very minimal control on the underlying leakage. In the
simplest case, the software can alternate one operation that triggers
strong emissions with a period of inactivity, leading to a binary mod-
ulation of the amplitude of the carrier. A typical example are intense
accesses to DRAM on x86-64/AMD machines [6]–[8], [44]. While
this method is likely portable to other architectures, we are not aware
of any covert channel designed for devices such as smartphones with
the ARM architecture. Similarly, an HDMI video signal can be mod-
ulated with a pattern of pixels of two different colors [1], [45]. An ex-
tensive analysis of how different instructions modulate leakage carri-
ers was conducted in several studies (e.g, [46]–[50]). These extensive
Fig. 3. Example of RF-PWM in the time (top) and frequency (bottom) domain. In the
band of interest, the Power Spectral Density (PSD) of RF-PWM signal matches the
original sinusoidal signal. The modulation is 3X PSK250R (three PSK subcarriers).
a sinusoidal wave at frequency f0, with instantaneous changes in
amplitude a(t) and phase θ(t). In the frequency domain, it occupies
a bandwidth 2B from f0−B to f0+B. It can be written as:
x(t)=a(t)cos(2πf0t+θ(t))
(1)
The RF-PWM signal, shown in the middle plot, is a generic
square wave with amplitude 1 or 0, whose pulses show instantaneous
changes in width, frequency, and phase. The square wave has funda-
mental frequency f0, phase θ(t), and duty-cycle δ(t) (ratio between
pulse width and pulse period) set to asin(a(t))
. Such square wave
can be decomposed into an infinite sum of components as follows:
π
baseband=δ(t)
2
π
a(t)cos(2πf0t+θ(t))
(2)
fundamental =
k=+∞(cid:88)
k=2
harmonics=
2
kπ
sin(kπδ(t))cos(2πkf0t+kθ(t))
It is clear that the fundamental component of the RF-PWM square
wave has the same form as the generic band-pass signal that we want
to approximate. If the fundamental frequency is sufficiently larger
than the bandwidth, the baseband component and the harmonics are
well separated from the fundamental and can be ignored. Indeed,
a simple band-pass filter can select the fundamental component,
producing the desired sinusoidal band-pass signal, shown in the
lower plot. Figure 3 shows a practical example using a pass-band
signal with three orthogonal subcarriers, each modulated in phase
(3X PSK250R), clearly visible around the fundamental frequency
at 4 kHz. In the frequency band of interest the RF-PWM is clearly
a good approximation of the original sinusoidal wave, while the
baseband and harmonics of the square wave can be disregarded as
out-of-band noise. In summary, we can define RF-PWM as follows:
RF-PWM: A band-pass one-bit coding technique
that represents a generic band-pass signal as the
fundamental component of a square wave, ignoring the
other components as out-of-band noise.
The RF-PWM technique should not be confused with (baseband)
Pulse Width Modulation (PWM). The PWM method consists in
controlling the amplitude of the baseband component by changing
the duty cycle, ignoring the fundamental and the harmonics.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:04 UTC from IEEE Xplore.  Restrictions apply. 
1196
Frequency (Hz)SamplesAmplitudePSD (dB/Hz)RF-PWMRF-PWMOriginalOriginalf0-B     f0+B3X PSK250RFig. 4. Generalizing the results of previous work, we model software as a simple OOK modulator that cross-modulates a square wave on an existing leakage. Controlling
the timings of the square wave leads to OOK, FSK, and CSS-Like modulation.
experimental analyses show how software-modulated leakages prop-
agate at a very large distance from a large and diverse set of devices.
A simple model: Figure 4 shows a simple generalization of how
previous work achieves simple modulation of a leakage carrier. By
alternating a leaky operation and inactivity with period T, software
cross-modulates a square wave on the leakage Fl, producing a
component at Fl ± 1/T (and harmonics). With this primitive,
software can use: (i) OOK modulation (e.g., [6]) by turning the
component on or off for the duration of a symbol Tsymbol, (ii) FSK
(e.g., [10]) by using two different periods T1 and T2 to encode ones
and zeros, (iii) CSS-Like (e.g., [8]) by approximating a chirp with
multiple values of T and encoding ones and zeros in the phase
of the chirp. Overall, we can assume that an attacker is able to
cross-modulate a square wave on top of an existing leakage. In other
words, the attacker has access to a binary amplitude modulator.
III. THE Noise-SDR APPROACH
In this paper, we address the problem of crafting arbitrary signals
from the noise produced by unprivileged software (Question 1).
We propose Noise-SDR, a software-defined fully-digital approach
that achieves arbitrary modulation, solving the challenges presented
in Section I. Noise-SDR is shown in Figure 5, which should
be compared with the generalization of previous work shown
in Figure 4. Both previous work and Noise-SDR have a Radio
Frequency (RF) stage that uses a special software pattern (e.g.,
intense memory accesses) to cross-modulate a square wave on an
electromagnetic leakage. To achieve arbitrary modulation, Noise-
SDR adds two levels of abstraction (Stages 1-2) to conventional
leakage-based transmitters (Stage 3), with the following architecture:
• (Stage 1) Software-Defined Baseband (BB): The generic
baseband signal of a given protocol is generated in software.
Many existing libraries can be leveraged for this scope.
• (Stage 2) Software Fully-Digital Intermediate Frequency
(IF): The generic baseband signal is embedded in the
fundamental component of a square wave using RF-PWM,
a pass-band one-bit coding technique used by fully-digital
radios. Also this step is entirely performed in software.
• (Stage 3) Electromagnetic RF Leakage: The RF-PWM
square wave is modulated on an electromagnetic leakage
(e.g., harmonics of the DRAM clock) using a special software
pattern (e.g., intense memory accesses followed by inactivity).
This architecture solves all the main challenges presented in
Section I:
• Solution to challenge 1: In general, software does not control
the frequency and phase of the underlying leakage source.
For example, it does not control the clock of the DRAM. To
solve this problem we rely on the IF stage. The choice of the
intermediate frequency FIF gives us some freedom in the
choice of the carrier fc = Fleak +FIF . In addition, we gain
control on the phase θ(t) of the output signal, which lets us
implement frequency or phase modulation.
• Solution to challenge 2: In general, software is only able to
cross-modulate a square wave on the leakage (e.g., by alternat-
ing intense activity with inactivity). Instead, we want to gener-
ate an arbitrary sinusoidal band-pass signal modulated in ampli-
tude, frequency, and phase. To solve this problem, we leverage
band-pass one-bit coding. In particular, we use RF-PWM,
which represents such signal as the fundamental component of
a square wave, ignoring the harmonics as out-of-band noise.
• Solution to challenge 3: In general, timer sources available
to software have lower accuracy and resolution than those
available to dedicated radio hardware. In addition, one-bit
coding techniques generally require oversampling and a good
time resolution. To address this problem, we chose to use
RF-PWM. Compared to other techniques (e.g., PWM, ∆Σ)
it works with a square wave at the frequency of the signal
that we want to generate. This lowers the requirements in
terms of accuracy and resolution. For example, it has weaker
requirements on the sampling rate.
With this architecture, Noise-SDR achieves arbitrary modulation.
Figure 5 shows a few non-exhaustive examples. They include
analog and digital protocols, using single or multiple subcarriers,
amplitude frequency or phase modulation, or even spread spectrum
(based on chirps or direct spreading).
Threat model: Noise-SDR is a general approach not tied to a
specific threat model, but it has some minimum requirements:
• Leakage with minimal control: The target device should
have a leakage source that software can cross-modulate with
a square wave (i.e., apply binary changes to the amplitude like
in OOK). As we have seen in Section I and Section II this is a
reasonable assumption as there are many well known leakage
sources of this type.
• Timer source: Software should have access to a relatively
accurate time source. This is often a reasonable assumption
(e.g., in native code on Linux, Windows, and Android). When
this is not the case, an extensive literature in the field of
micro-architectural attacks has shown how to implement
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:04 UTC from IEEE Xplore.  Restrictions apply. 
1197
FleakCarrier(s)E.g., harmonicsof DRAM clockSome physicalcross-modulationeffect"On""Off"while(0 < t < T/2):    somethingLeaky()    //e.g., DRAM accesswhile(T/2 < t < T):    doNothing()FrequencyTimeFleakFleak+1/T1Fleak-1/T1Fleak+1/T2Fleak-1/T2Fleak+1/TnFleak-1/Tn101100111110101"OOK""FSK""CSS-Like"while(0 < t < Tsymbol)Fig. 5. Overview of Noise-SDR (compare with previous work in Figure 4). With its software-defined fully-digital approach, Noise-SDR achieves arbitrary modulation (control
of the frequency FIF , amplitude a(t), and phase θ(t), of an arbitrary signal a(t)cos(2π(Fleak +FIF )t+θ(t)) at carrier frequency Fleak +FIF ). The spectrogram
depicts a few (non-exhaustive) examples. See the evaluation for actual measurements (e.g., Figure 8, Figure 13).
accurate timers in other ways (e.g., [51]–[55]). For example,
the simplest method is to use a spinning counter.
• Software execution: Noise-SDR requires to execute code on
the target, but without any privilege, permission, or access to
any peripheral. Such code is normally assumed unable to trans-
mit radio signals, but with Noise-SDR it can establish advanced
radio communications. Previous work on exfiltration with un-
privileged code has similar requirements [6]–[8]. In Section IX
we will mention a possible relaxation of those requirements.
IV. IMPLEMENTATION