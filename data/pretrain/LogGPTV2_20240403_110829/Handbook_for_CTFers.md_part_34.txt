text:eeee000eeee0053F
54h
textie
BESO
Lea
r8,
1ibc_csu_fini;fini
rex.
libc csu init :init
Fig, 5.15 Distinguish the data type of a location by the color of the adress
capabilities are limited and not all data types can be correctly labeled in general. It
can be corrected by correctly defining the type of a 1-byte or a section of area, which
will have better disassembly experience.
IDA do not have an undo until version 7.3, so you need to be careful before you
operate, and know how to recover these operations.
The user can distinguish the data type of a location by the color of the address. For
locations marked with a code, the address will be shown in black; for locations
marked with data, the address will be shown in gray; and for locations with no data
type defined, the address will be shown in yellow. See Fig. 5.15.
The following section describes some of the shortcut keys which can define data
types. You need to have the focus (cursor) on the corresponding row for them to use
these shortcuts.
• U (Undefine) key: to cancel the existing data type definition in a place, a dialog
box will pop up to confirm, click the “Yes" button.
---
## Page 326
312
5 Reverse Engineering
IT-4
_rodata
0,1p , q
ends
: DATA XREF: madn+ifc
Fig, 5.16 Defined a sring
IrTa
_fins_arrty
ends
aee2eeoCI : ELF Iymalic Inforwation
Fig, 5.17 Defined an address offset
• D (Data) key: this marks a location with data type. The data type of the location
will cycle through 1 byte (byte/db), 2 bytes (word/dw), 4 bytes (dword/dd), and
8 bytes (qword/dq) when you press D. If the position and its vicinity are
dn dod sou m Sopep uoeuuoo o poupu duo
• C (Code) key: makes a position with code type. The timing of the confirmation
dialog box is similar to the D key. After defining it as an instruction, IDA will
automatically perform recursive descent disassembly from this position.
The above is a basic shortcut for defining data. To cope with the increasing
‘sauns ~sfeue se yons sad1 ejep ul-nq seq ose vQI 'sad eep jo Aarxaduos
and so on.
• A (ASCII) key: A string type ending with *O" is defined starting at this position,
see Fig. 5.16.
▪The * key: defines the position as an array, a dialog box will pop up to set the
properties of the array.
• (Offset) key: This is defined as an address offset, see Fig. 5.17.
4. function operations
In fact, disassembly is not completely continuous, but rather a patchwork of func-
tions that are scattered around. Each function has local variables, call conventions
and other information, and the control flow diagram can only be generated and
displayed in function. So it is also important to define functions correctly.
• Delete Function: Select the function in the function window and press the
Delete key.
• Define function: Select the corresponding line in the disassembly window and
press P.
• Modify function parameters: Select and press Ctrl+E in the function window, or
press Alt+P inside the function in the disassembly window.
After defining a function, IDA can perform many function-level analysis, such as
call convention analysis, stack variable analysis, function call parameter analysis,
etc. These analyses are immensely helpful in restoring the high-level semantics of
disassemblies,
---
## Page 327
5.2 Static Analysis
313
5. navigation operations
It is possible to switch between functions with mouse click, but as the size of the
program increases, it impractical to use this method to locate it; IDA has a navigation
history function, like Explorer and browser history, which allows you to go back and
forward to a particular view.
▪Go back to the previous position: Esc.
* Jump to a specific location: G, then you can enter the address/already
Go to the next position: Ctrl+Enter.
defined name.
•To jump to a segment: Ctrl+S, then select a segment.
6. type operations
IDA has developed a type analysis system to deal with the various data types
(function declarations, variable declarations, structure declarations, etc.) for C/C+
+, and allows the user to specify them freely. This definitely makes disassembly
more accurate. Press the Y key after selecting a variable or function, the “Please
enter the type declaration dialog box willpop up, enter the correct C type, and IDA
will parse and apply the type automatically.
7. modes of IDA operation
IDA shortcut keys are designed with a certain patterm, so we can remember these
shortcut keys and make the reverse faster and more handy.
The following are some of the operational patterms and learming techniques that
are summarized in regular practice
•The various actions in IDA’s disassembly window have different functions when
they are selected and when they are unselected. For example, the actions
corresponding to the C key can specify the scan area for recursive descending
disassembly when the disassembly window is selected.
• Some of the shortcuts in IDA's disassembly window may have different functions
when used multiple times, for example, the O key will restore the first operation 
isod ues o ug su pus e posn uoum
x os so  p  n ns  si s
• IDA's dialog boxes have buttons that can be clicked by pressing their initials
instead of the mouse (e.g., the “Yes" button can be clicked by pressing the Y key
instead of the mouse).
We can learm IDA's shortcuts quickly by mastering these modes, and most of the
shortcut features do not require control keys (Ctrl, Alt, Shift), which makes IDA's
operation more convenient.
8. IDAPython
IDAPython is a built-in IDA Python environment that allows you to perform various
database operations through an interface. It can perform most of the C++ functions in
---
## Page 328
314
5 Reverse Engineering
Execute script
?
Snippet list
Plese enter seript body
Name
1print(*aaal)
 Default snippet *
Line 1 of 1
Sgripting langage Pythe
Line:1 Colun:12
Iab size
Bun
Egort
Iaport
Fig, 5.18 Editor
IDA SDK and all the IDC functions, which can be said to have both the convenience
of IDC and the power of C++ SDK.
Press Alt+F7, or select “File  Script file” menu, you can execute Python script
file; There is also a Python Console box in the output window, you can temporarily
execute Python statements; press Shift+F2. or select the *File  Script command"
menu command to open the Scripting panel and change the “Scripting language” to
“Python" to get a simple editor, see Fig. 5.18.
9. other features of IDA
Various types of windows can be opened under "View → Open subviews” in the
IDA menu bar, see Fig. 5.19.
Strings window: Press Shift+F12 to open it, see Fig. 5.20, it can identify the strings
in the binary, double-click to locate the target string in the disassembly window.
Hexadecimal Window: Opened by default, you can press F2 to modify the data in the
database, then press F2 again to apply the modification.
5.2.2GettingStartedwith theHexRaysDecompiler
The basic operations of IDA, described in Sect. 5.2.1, allow IDA to identify data
types and functions in a location correctly. These operations partially restore the
information loss caused by the linker and assembler mentioned in the executable file
(see Sect. 2.4.7). The decompiler presented in this section will attempt to revert the
loss of information caused by the compiler and continue to restore the functions to a
 p sbu o om o rp  a  o n
data types correctly and identifying the functions correctly.
---
## Page 329
5.2 Static Analysis
315
June Se4rc
vi
cerl41
Lotlbers
jraphs
Saicsiatar:
Prsglnity trsutet
foll sreet
FII
x dunp
6reph Dgervieo
seripts
ILtF9
f 0otot
plet seest 
CeriSa
ocoire_sto
eistHrs
CtrL*Spsc*
nes
nctlees
ShiftiF4
Priet
rtog
+
810e
gsh16
DtrLeeor
DtrLA
t [lstrs
StiferF8
e_ut
LI.
S+tue 146rm
ShrtF11
Dcteret
Shir
_1t
ShirtKF10
ALet1
ShlfenfI
MNIB5
 Fnctlee gals
IINSTANC
Eext
Fig, 5.19 Open subviews
.text:1000...00888085
).
国
.rdoto:100...00800012
Unknoun exceptlon
国
.rdota:1000...0080000F
bod alLocatlon
.rdata:1000.--00800015
bod array neu len
['s
.rdota:1008.. 0080087
CTFCTF
's
.rdoto:100...0088010
string too Long
.rdota:1008... 00800087
cls1d2
's'
.rdota:1000.- 0080008C
cls1d2opp1d
's
.rdota:1000...00000010
C（.CTF.CTF
's
.rdoto:100...080014
C (· CTF.CTF.1
's
.rdota:1000..-00800014
C（..Aportnent
Fig, 5.20 Strings window
This section introduces the world’s most advanced and sophisticated decompiler
available today, the HexRays Decompiler, which runs as a plugin for IDA, was
developed by the same company as IDA. HexRays take full advantage of the
function local variables and data types determined by IDA to generate C-like
pseudo-code after optimization. Users can browse the generated pseudo-code, add
comments, rename the identifiers, modify the variable types, switch the data display
format, and so on.
---
## Page 330
316
5Reverse Engineering
1. generate pseudo-code
The challenge for this section is 2-simpleCrackme. To use this plugin, you need to
get it to generate pseudo-code. The operation to generate the pseudo-code is very
simple, just locate the target function in the disassembly window and press F5. When
the plugin finishes running, it will open a window displaying the decompiled
pseudo-code, see Fig. 5.21.
When the cursor moves over an identifier, keyword, or constant, the same content
in other locations is also highlighted for easy viewing and manipulation.
2. Pseudocode composition
The pseudo-code generated by HexRays is structured in such a way: the first line is
the prototype of the function, then the declaration area of the local variables, and
finally the statement of the function.
The upper part of the area is variable declaration. Sometimes the area for larger
functions is too long to read, you can collapse it by clicking *Collapse declaration".
Note that the comments that follow each local variable represent the location of
the variable. This information will facilitate understanding to the behavior of the
corresponding assembly code.
In addition, most of the variable names in the pseudo-code are automatically
generated and may vary from machine to machine or version to version of IDA.
3. modify identifiers
Looking at the pseudo-code 2-simpleCrackme.c generated by IDA (see Fig. 5.22),
you can see that HexRays is powerful and has automatically named many variables.
However, the names of these variables have no meaning. As the function gets larger,
no meaningful variable names would seriously affect the efficiency of the analysis.
Therefore, HexRays provides users with the ability to change the identifier name:
move the cursor over the identifier and press the N key to bring up the Change Name
dialog box. Then enter a valid name in the input box, and click the OK button. The
modified pseudocode is easier to read and analyze.
Note: IDA generally allows the use of identifiers that conform to C syntax, but
uses certain prefixes as reservations. You should change the name according to the
prompt after being prompted for an error.
4. switch the data display format
After renaming, the 2-simpleCrackme.c pseudo-code has been restored to a similar
state to the source code (see Fig. 5.22). However, many constants are not dispslayed
in the correct format, such as 0x66 in the source code, which becomes the decimal
number 102. The °a’ and *A’ are converted to their ASCII counterparts 97 and 65.
HexRays is not powerful enough to automatically label these constants, but
HexRays does provide the ability to display constants in various formats. Move
the cursor over a constant, then right-click and choose the corresponding format
from the pop-up shortcut menu, see Fig. 5.23.
---
## Page 331
5.2 Static Analysis
317
IDA Viev-A
_cdecl main(Int argc, const char **argy, const char **envp)
Pseudoeode-A
Kex Vier-1
int
2R
size_t v3;//rbx
int result; // eax
5
char v5;//[rsp+Bh][rbp-A5h]
Inti;//[rsp+Ch][rbp-A4h]
[-q]t+ds]//[8]e
char s[96];//[rsp+30h][rbp-80h]
9
Lint
v9;//[rsp+9eh][rbp-20h]
10
unsigned _int64 v11; // [rsp+98h][rbp-18h]
Int v10; //[rsp+94h][rbp-1Ch]
11
12
013
v11 =
_readfsqword(ex28u);
014
strcpy(v7, *zpdt(Pxn_zxnd1_tnf_ddzbff1}");
15
memset(s,o， sizeof（s））;
016
printf(*Input your answer: ", argv, &v1e);
v9 =0;
 17
018
v3strlen（s);
_isoc99_scanf("%s*,s);
19
20
if (v3  strlen(v7）)
22
21
for ( 1 = θ; 1  122 ）
26
25
if （s[]90）
v5s[1];
29
28
else
v5=（162*（=[]-65）+3）%26+65;
30
else
32
31
6 +92%（+（6-[]s)1） =SA
35
34
if（v5 1=v7[=] ）
LE
36
(iJansue Suoun_)sand
BE
39
return 1;
041
40
42
puts(“CongratulationsI°);
result = θ;
43
44
else
46
45
puts(*wrong input length!");
0 47
result=1;
49
48
50
fatnsau uunau
Fig, 5.21 2-simpleCrackme.c pseudo code
---
## Page 332
318
5 Reverse Engineering
1int _cdecl main(int argc, const char **argv, const char **envp)
20
size_t len; // rbx
int result;// eax
char enc; //[rsp+Bh] [rbp-A5h]
6
int i;//[rsp+ch] [rbp-A4h]
char TRUE_ANS[8];// [rsp+1eh][rbp-Aeh]
char input[96];//[rsp+3oh][rbp-80h]
9
int v9;//[rsp+90h][rbp-20h]
10