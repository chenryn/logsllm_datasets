cc1122..iinndddd 444444 88//1199//22001111 1122::1122::2277 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 445
Chapter 12 n Attacking Users: Cross-Site Scripting 445
Figure 12-7: A reflected XSS attack injecting Trojan functionality
The URLs in these attacks point to the authentic domain name of the actual
application, with a valid SSL certifi cate where applicable. Therefore, they are
far more likely to persuade victims to submit sensitive information than pure
phishing websites that are hosted on a different domain and merely clone the
content of the targeted website.
Inducing User Actions
If an attacker hijacks a victim’s session, he can use the application “as” that
user and carry out any action on the user’s behalf. However, this approach to
performing arbitrary actions may not always be desirable. It requires that the
attacker monitor his own server for submissions of captured session tokens from
compromised users. He also must carry out the relevant action on behalf of every
user. If many users are being attacked, this may be impractical. Furthermore,
it leaves a rather unsubtle trace in any application logs, which could easily be
used to identify the computer responsible for the unauthorized actions during
an investigation.
cc1122..iinndddd 444455 88//1199//22001111 1122::1122::2288 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 446
446 Chapter 12 n Attacking Users: Cross-Site Scripting
An alternative to session hijacking, where an attacker simply wants to carry
out a specifi c set of actions on behalf of each compromised user, is to use the
attack payload script itself to perform the actions. This attack payload is par-
ticularly useful in cases where an attacker wants to perform some action that
requires administrative privileges, such as modifying the permissions assigned
to an account he controls. With a large user base, it would be laborious to hijack
each user’s session and establish whether the victim was an administrator. A
more effective approach is to induce every compromised user to attempt to
upgrade the permissions on the attacker’s account. Most attempts will fail, but
the moment an administrative user is compromised, the attacker succeeds in
escalating privileges. Ways of inducing actions on behalf of other users are
described in the “Request Forgery” section of Chapter 13.
The MySpace XSS worm described earlier is an example of this attack payload.
It illustrates the power of such an attack to perform unauthorized actions on
behalf of a mass user base with minimal effort by the attacker. This attack used
a complex series of requests using Ajax techniques (described in Chapter 3) to
carry out the various actions that were required to allow the worm to propagate.
An attacker whose primary target is the application itself, but who wants
to remain as stealthy as possible, can leverage this type of XSS attack payload
to cause other users to carry out malicious actions of his choosing against the
application. For example, the attacker could cause another user to exploit a SQL
injection vulnerability to add a new administrator to the table of user accounts
within the database. The attacker would control the new account, but any inves-
tigation of application logs may conclude that a different user was responsible.
Exploiting Any Trust Relationships
You have already seen one important trust relationship that XSS may exploit:
browsers trust JavaScript received from a website with the cookies issued by
that website. Several other trust relationships can sometimes be exploited in
an XSS attack:
n If the application employs forms with autocomplete enabled, JavaScript
issued by the application can capture any previously entered data that
the user’s browser has stored in the autocomplete cache. By instantiating
the relevant form, waiting for the browser to autocomplete its contents,
and then querying the form fi eld values, the script may be able to steal
this data and transmit it to the attacker’s server. This attack can be more
powerful than injecting Trojan functionality, because sensitive data can
be captured without requiring any interaction from the user.
n Some web applications recommend or require that users add their domain
name to their browser’s “Trusted Sites” zone. This is almost always unde-
sirable and means that any XSS-type fl aw can be exploited to perform
cc1122..iinndddd 444466 88//1199//22001111 1122::1122::2288 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 447
Chapter 12 n Attacking Users: Cross-Site Scripting 447
arbitrary code execution on the computer of a victim user. For example,
if a site is running in the Trusted Sites zone of Internet Explorer, injecting
the following code causes the Windows calculator program to launch on
the user’s computer:
n Web applications often deploy ActiveX controls containing powerful
methods (see Chapter 13). Some applications seek to prevent misuse by
a third party by verifying within the control itself that the invoking web
page was issued from the correct website. In this situation, the control can
still be misused via an XSS attack, because in that instance the invoking
code satisfi es the trust check implemented within the control.
COMMON MYTH
“Phishing and XSS only affect applications on the public Internet.”
XSS bugs can affect any type of web application, and an attack against
an intranet-based application, delivered via a group e-mail, can exploit two
forms of trust. First, there is the social trust exploited by an internal e-mail
sent between colleagues. Second, victims’ browsers often trust corporate
web servers more than they do those on the public Internet. For example,
with Internet Explorer, if a computer is part of a corporate domain, the
browser defaults to a lower level of security when accessing intranet-based
applications.
Escalating the Client-Side Attack
A website may directly attack users who visit it in numerous ways, such as log-
ging their keystrokes, capturing their browsing history, and port-scanning the
local network. Any of these attacks may be delivered via a cross-site scripting
fl aw in a vulnerable application, although they may also be delivered directly
by any malicious website that a user happens to visit. Attacks of this kind are
described in more detail at the end of Chapter 13.
Delivery Mechanisms for XSS Attacks
Having identifi ed an XSS vulnerability and formulated a suitable payload to
exploit it, an attacker needs to fi nd some means of delivering the attack to other
cc1122..iinndddd 444477 88//1199//22001111 1122::1122::2288 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 448
448 Chapter 12 n Attacking Users: Cross-Site Scripting
users of the application. We have already discussed several ways in which this
can be done. In fact, many other delivery mechanisms are available to an attacker.
Delivering Refl ected and DOM-Based XSS Attacks
In addition to the obvious phishing vector of bulk e-mailing a crafted URL to
random users, an attacker may attempt to deliver a refl ected or DOM-based
XSS attack via the following mechanisms:
n In a targeted attack, a forged e-mail may be sent to a single target user or
a small number of users. For example, an application administrator could
be sent an e-mail apparently originating from a known user, complain-
ing that a specifi c URL is causing an error. When an attacker wants to
compromise the session of a specifi c user (rather than harvesting those of
random users), a well-informed and convincing targeted attack is often
the most effective delivery mechanism. This type of attack is sometimes
referred to as “spear phishing”.
n A URL can be fed to a target user in an instant message.
n Content and code on third-party websites can be used to generate requests
that trigger XSS fl aws. Numerous popular applications allow users to
post limited HTML markup that is displayed unmodifi ed to other users.
If an XSS vulnerability can be triggered using the GET method, an attacker
can post an IMG tag on a third-party site targeting the vulnerable URL.
Any user who views the third-party content will unwittingly request the
malicious URL.
Alternatively, the attacker might create his own website containing inter-
esting content as an inducement for users to visit. It also contains content
that causes the user’s browser to make requests containing XSS payloads
to a vulnerable application. If a user is logged in to the vulnerable applica-
tion, and she happens to browse to the attacker’s site, the user’s session
with the vulnerable application is compromised.
Having created a suitable website, an attacker may use search engine
manipulation techniques to generate visits from suitable users, such as by
placing relevant keywords within the site content and linking to the site
using relevant expressions. This delivery mechanism has nothing to do
with phishing, however. The attacker’s site does not attempt to imperson-
ate the site it is targeting.
Note that this delivery mechanism can enable an attacker to exploit refl ected
and DOM-based XSS vulnerabilities that can be triggered only via POST
requests. With these vulnerabilities, there is obviously not a simple URL
that can be fed to a victim user to deliver an attack. However, a malicious
cc1122..iinndddd 444488 88//1199//22001111 1122::1122::2288 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 449
Chapter 12 n Attacking Users: Cross-Site Scripting 449
website may contain an HTML form that uses the POST method and that
has the vulnerable application as its target URL. JavaScript or navigational
controls on the page can be used to submit the form, successfully exploit-
ing the vulnerability.
n In a variation on the third-party website attack, some attackers have been
known to pay for banner advertisements that link to a URL containing
an XSS payload for a vulnerable application. If a user is logged in to the
vulnerable application and clicks the ad, her session with that applica-
tion is compromised. Because many providers use keywords to assign
advertisements to pages that are related to them, cases have even arisen
where an ad attacking a particular application is assigned to the pages of
that application itself! This not only lends credibility to the attack but also
guarantees that someone who clicks the ad is using the vulnerable appli-
cation at the moment the attack strikes. Furthermore, since the targeted
URL is now “on-site,” the attack can bypass browser-based mechanisms
employed to defend against XSS (described in detail later in this chap-
ter). Because many banner ad providers charge on a per-click basis, this
technique effectively enables an attacker to “buy” a specifi c number of
user sessions.
n Many web applications implement a function to “tell a friend” or send
feedback to site administrators. This function often enables a user to
generate an e-mail with arbitrary content and recipients. An attacker
may be able to leverage this functionality to deliver an XSS attack via an
e-mail that actually originates from the organization’s own server. This
increases the likelihood that even technically knowledgeable users and
anti-malware software will accept it.
Delivering Stored XSS Attacks
The two kinds of delivery mechanisms for stored XSS attacks are in-band and
out-of-band.
In-band delivery applies in most cases and is used when the data that is
the subject of the vulnerability is supplied to the application via its main web
interface. Common locations where user-controllable data may eventually be
displayed to other users include the following:
n Personal information fi elds — name, address, e-mail, telephone, and the like
n Names of documents, uploaded fi les, and other items
n Feedback or questions for application administrators
n Messages, status updates, comments, questions, and the like for other
application users
cc1122..iinndddd 444499 88//1199//22001111 1122::1122::2288 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 450
450 Chapter 12 n Attacking Users: Cross-Site Scripting
n Anything that is recorded in application logs and displayed in-browser
to administrators, such as URLs, usernames, HTTP Referer,User-Agent,
and the like
n The contents of uploaded fi les that are shared between users
In these cases, the XSS payload is delivered simply by submitting it to
the relevant page within the application and then waiting for victims to view the
malicious data.
Out-of-band delivery applies in cases where the data that is the subject of
the vulnerability is supplied to the application through some other channel.
The application receives data via this channel and ultimately renders it within
HTML pages that are generated within its main web interface. An example
of this delivery mechanism is the attack already described against web mail
applications. It involves sending malicious data to an SMTP server, which is
eventually displayed to users within an HTML-formatted e-mail message.
Chaining XSS and Other Attacks
XSS fl aws can sometimes be chained with other vulnerabilities to devastating
effect. The authors encountered an application that had a stored XSS vulner-
ability within the user’s display name. The only purpose for which this item
was used was to show a personalized welcome message after the user logged
in. The display name was never displayed to other application users, so initially
there appeared to be no attack vector for users to cause problems by editing
their own display name. Other things being equal, the vulnerability would be
classifi ed as very low risk.
However, a second vulnerability existed within the application. Defective
access controls meant that any user could edit the display name of any other
user. Again, on its own, this issue had minimal signifi cance: Why would an
attacker be interested in changing the display names of other users?
Chaining together these two low-risk vulnerabilities enabled an attacker to
completely compromise the application. It was easy to automate an attack to inject
a script into the display name of every application user. This script executed
every time a user logged in to the application and transmitted the user’s ses-
sion token to a server owned by the attacker. Some of the application’s users
were administrators, who logged in frequently and who could create new users
and modify the privileges of other users. An attacker simply had to wait for an
administrator to log in, hijack the administrator’s session, and then upgrade his
own account to have administrative privileges. The two vulnerabilities together
represented a critical risk to the application’s security.
In a different example, data that was presented only to the user who submit-
ted it could be updated via a cross-site request forgery attack (see Chapter 13).
It also contained a stored XSS vulnerability. Again, each bug when considered
cc1122..iinndddd 445500 88//1199//22001111 1122::1122::2288 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 451
Chapter 12 n Attacking Users: Cross-Site Scripting 451
individually might be regarded as relatively low risk; however, when exploited
together, they can have a critical impact.
COMMON MYTH
“We’re not worried about that low-risk XSS bug. A user could exploit it only to
attack himself.”
Even apparently low-risk vulnerabilities can, under the right circumstances,
pave the way for a devastating attack. Taking a defense-in-depth approach to
security entails removing every known vulnerability, however insignifi cant it
may seem. The authors have even used XSS to place fi le browser dialogs or
ActiveX controls into the page response, helping to break out of a kiosk-mode
system bound to a target web application. Always assume that an attacker
will be more imaginative than you in devising ways to exploit minor bugs!
Finding and Exploiting XSS Vulnerabilities
A basic approach to identifying XSS vulnerabilities is to use a standard proof-
of-concept attack string such as the following:
“>
This string is submitted as every parameter to every page of the application,
and responses are monitored for the appearance of this same string. If cases
are found where the attack string appears unmodifi ed within the response, the
application is almost certainly vulnerable to XSS.
If your intention is simply to identify some instance of XSS within the applica-
tion as quickly as possible to launch an attack against other application users,
this basic approach is probably the most effective, because it can be easily auto-
mated and produces minimal false positives. However, if your objective is to
perform a comprehensive test of the application to locate as many individual
vulnerabilities as possible, the basic approach needs to be supplemented with
more sophisticated techniques. There are several different ways in which XSS
vulnerabilities may exist within an application that will not be identifi ed via
the basic approach to detection:
n Many applications implement rudimentary blacklist-based fi lters in an
attempt to prevent XSS attacks. These fi lters typically look for expressions
such as  within request parameters and take some defensive action
such as removing or encoding the expression or blocking the request.
These fi lters often block the attack strings commonly employed in the
basic approach to detection. However, just because one common attack
cc1122..iinndddd 445511 88//1199//22001111 1122::1122::2288 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 452
452 Chapter 12 n Attacking Users: Cross-Site Scripting
string is being fi ltered, this does not mean that an exploitable vulnerability
does not exist. As you will see, there are cases in which a working XSS
exploit can be created without using  tags and even without
using commonly fi ltered characters such as “<> and /.
n The anti-XSS fi lters implemented within many applications are defective
and can be circumvented through various means. For example, suppose
that an application strips any  tags from user input before it is
processed. This means that the attack string used in the basic approach
will not be returned in any of the application’s responses. However, it
may be that one or more of the following strings will bypass the fi lter
and result in a successful XSS exploit:
“>
“>
“%3e%3cscript%3ealert(document.cookie)%3c/script%3e
“>ipt>alert(document.cookie)ipt>
%00“>
TRY IT!
http://mdsec.net/search/28/
http://mdsec.net/search/36/
http://mdsec.net/search/21/
Note that in some of these cases, the input string may be sanitized, decoded,
or otherwise modifi ed before being returned in the server’s response, yet might
still be suffi cient for an XSS exploit. In this situation, no detection approach based
on submitting a specifi c string and checking for its appearance in the server’s
response will in itself succeed in fi nding the vulnerability.
In exploits of DOM-based XSS vulnerabilities, the attack payload is not nec-
essarily returned in the server’s response but is retained in the browser DOM
and accessed from there by client-side JavaScript. Again, in this situation, no
approach based on submitting a specifi c string and checking for its appearance
in the server’s response will succeed in fi nding the vulnerability.
Finding and Exploiting Refl ected XSS Vulnerabilities
The most reliable approach to detecting refl ected XSS vulnerabilities involves