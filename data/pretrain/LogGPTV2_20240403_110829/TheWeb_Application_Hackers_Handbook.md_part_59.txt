### Chapter 12: Attacking Users: Cross-Site Scripting

**Figure 12-7: A Reflected XSS Attack Injecting Trojan Functionality**

The URLs used in these attacks point to the authentic domain name of the actual application, often with a valid SSL certificate. This makes them more convincing and likely to persuade victims to submit sensitive information compared to pure phishing websites hosted on different domains that merely clone the content of the targeted website.

#### Inducing User Actions

If an attacker hijacks a victim’s session, they can use the application as if they were that user and perform any action on their behalf. However, this approach may not always be practical. It requires the attacker to monitor their own server for submissions of captured session tokens from compromised users and then carry out the relevant actions for each user. If many users are being attacked, this can be impractical and leaves a noticeable trace in application logs, which could be used to identify the computer responsible for the unauthorized actions during an investigation.

An alternative to session hijacking is to use the attack payload script itself to perform specific actions on behalf of each compromised user. This is particularly useful when the attacker wants to perform an action that requires administrative privileges, such as modifying the permissions assigned to an account they control. With a large user base, it would be laborious to hijack each user’s session and determine if the victim is an administrator. A more effective approach is to induce every compromised user to attempt to upgrade the permissions on the attacker’s account. Most attempts will fail, but if an administrative user is compromised, the attacker succeeds in escalating their privileges. Methods for inducing actions on behalf of other users are described in the "Request Forgery" section of Chapter 13.

The MySpace XSS worm is an example of this type of attack payload. It demonstrates the power of such an attack to perform unauthorized actions on behalf of a large user base with minimal effort by the attacker. The worm used a complex series of requests using Ajax techniques (described in Chapter 3) to propagate and carry out the required actions.

An attacker whose primary target is the application itself, but who wants to remain as stealthy as possible, can leverage this type of XSS attack payload to cause other users to carry out malicious actions against the application. For example, the attacker could cause another user to exploit a SQL injection vulnerability to add a new administrator to the table of user accounts within the database. The attacker would control the new account, but any investigation of application logs might conclude that a different user was responsible.

#### Exploiting Trust Relationships

One important trust relationship that XSS can exploit is that browsers trust JavaScript received from a website with the cookies issued by that website. Other trust relationships that can be exploited in an XSS attack include:

- **Autocomplete Forms**: If the application uses forms with autocomplete enabled, JavaScript issued by the application can capture previously entered data stored in the browser's autocomplete cache. By instantiating the relevant form, waiting for the browser to autocomplete its contents, and then querying the form field values, the script can steal this data and transmit it to the attacker’s server. This attack can be more powerful than injecting Trojan functionality because sensitive data can be captured without requiring any interaction from the user.
- **Trusted Sites Zone**: Some web applications recommend or require that users add their domain name to their browser’s "Trusted Sites" zone. This is almost always undesirable and means that any XSS flaw can be exploited to perform arbitrary code execution on the victim’s computer. For example, if a site is running in the Trusted Sites zone of Internet Explorer, injecting the following code can launch the Windows calculator program:
  ```javascript
  <script>new ActiveXObject('WScript.Shell').Run('calc.exe');</script>
  ```
- **ActiveX Controls**: Web applications often deploy ActiveX controls containing powerful methods (see Chapter 13). Some applications try to prevent misuse by verifying within the control itself that the invoking web page was issued from the correct website. In this situation, the control can still be misused via an XSS attack because the invoking code satisfies the trust check implemented within the control.

**Common Myth: "Phishing and XSS only affect applications on the public Internet."**

XSS bugs can affect any type of web application, including intranet-based applications. An attack against an intranet-based application, delivered via a group email, can exploit two forms of trust: the social trust exploited by an internal email sent between colleagues and the trust that victims’ browsers often place in corporate web servers more than those on the public Internet. For example, with Internet Explorer, if a computer is part of a corporate domain, the browser defaults to a lower level of security when accessing intranet-based applications.

#### Escalating the Client-Side Attack

A website can directly attack users in numerous ways, such as logging their keystrokes, capturing their browsing history, and port-scanning the local network. These attacks can be delivered via a cross-site scripting flaw in a vulnerable application or directly by any malicious website a user visits. Such attacks are described in more detail at the end of Chapter 13.

#### Delivery Mechanisms for XSS Attacks

Once an XSS vulnerability has been identified and a suitable payload formulated, the attacker needs to find a way to deliver the attack to other users of the application. Several delivery mechanisms are available:

- **Phishing Emails**: In a targeted attack, a forged email may be sent to a single target user or a small number of users. For example, an application administrator could be sent an email apparently originating from a known user, complaining that a specific URL is causing an error. This type of attack is sometimes referred to as "spear phishing."
- **Instant Messaging**: A URL can be sent to a target user via an instant message.
- **Third-Party Websites**: Content and code on third-party websites can be used to generate requests that trigger XSS flaws. Many popular applications allow users to post limited HTML markup that is displayed unmodified to other users. If an XSS vulnerability can be triggered using the GET method, an attacker can post an `IMG` tag on a third-party site targeting the vulnerable URL. Any user who views the third-party content will unwittingly request the malicious URL.
- **Malicious Websites**: The attacker might create their own website containing interesting content to lure users. The site also contains content that causes the user’s browser to make requests containing XSS payloads to a vulnerable application. If a user is logged in to the vulnerable application and browses to the attacker’s site, their session is compromised.
- **Search Engine Manipulation**: After creating a suitable website, the attacker can use search engine manipulation techniques to generate visits from suitable users. This delivery mechanism can enable an attacker to exploit reflected and DOM-based XSS vulnerabilities that can be triggered only via POST requests.
- **Banner Advertisements**: Some attackers have paid for banner advertisements that link to a URL containing an XSS payload for a vulnerable application. If a user is logged in to the vulnerable application and clicks the ad, their session is compromised. Since many providers use keywords to assign advertisements to related pages, an ad attacking a particular application might even appear on the pages of that application itself.
- **Tell a Friend/Feedback Functions**: Many web applications implement a function to "tell a friend" or send feedback to site administrators. This function often allows a user to generate an email with arbitrary content and recipients. An attacker may leverage this functionality to deliver an XSS attack via an email that originates from the organization’s own server, increasing the likelihood that even technically knowledgeable users and anti-malware software will accept it.

#### Delivering Stored XSS Attacks

There are two types of delivery mechanisms for stored XSS attacks: in-band and out-of-band.

- **In-Band Delivery**: This applies in most cases and is used when the data that is the subject of the vulnerability is supplied to the application via its main web interface. Common locations where user-controllable data may eventually be displayed to other users include personal information fields, document names, uploaded files, feedback or questions for application administrators, messages, status updates, comments, and anything recorded in application logs and displayed in-browser to administrators.
- **Out-of-Band Delivery**: This applies when the data that is the subject of the vulnerability is supplied to the application through some other channel. The application receives data via this channel and ultimately renders it within HTML pages generated within its main web interface. An example is an attack against web mail applications, where malicious data is sent to an SMTP server and eventually displayed to users within an HTML-formatted email message.

#### Chaining XSS and Other Attacks

XSS flaws can sometimes be chained with other vulnerabilities to devastating effect. For example, an application had a stored XSS vulnerability within the user’s display name. The display name was never displayed to other application users, so initially, there appeared to be no attack vector. However, a second vulnerability existed: defective access controls allowed any user to edit the display name of any other user. Chaining these two low-risk vulnerabilities enabled an attacker to completely compromise the application by automating an attack to inject a script into the display name of every application user. This script executed every time a user logged in and transmitted the user’s session token to a server owned by the attacker. When an administrator logged in, the attacker hijacked the session and upgraded their own account to have administrative privileges.

In another example, data that was presented only to the user who submitted it could be updated via a cross-site request forgery attack (see Chapter 13). It also contained a stored XSS vulnerability. Each bug, when considered individually, might be regarded as relatively low risk, but when exploited together, they can have a critical impact.

**Common Myth: "We’re not worried about that low-risk XSS bug. A user could exploit it only to attack himself."**

Even apparently low-risk vulnerabilities can, under the right circumstances, pave the way for a devastating attack. Taking a defense-in-depth approach to security entails removing every known vulnerability, however insignificant it may seem. The authors have even used XSS to place file browser dialogs or ActiveX controls into the page response, helping to break out of a kiosk-mode system bound to a target web application. Always assume that an attacker will be more imaginative than you in devising ways to exploit minor bugs!

#### Finding and Exploiting XSS Vulnerabilities

A basic approach to identifying XSS vulnerabilities is to use a standard proof-of-concept attack string, such as:

```html
"><script>alert(document.cookie)</script>
```

This string is submitted as every parameter to every page of the application, and responses are monitored for the appearance of this same string. If cases are found where the attack string appears unmodified within the response, the application is almost certainly vulnerable to XSS.

If your intention is simply to identify some instance of XSS within the application as quickly as possible to launch an attack against other application users, this basic approach is probably the most effective, as it can be easily automated and produces minimal false positives. However, if your objective is to perform a comprehensive test of the application to locate as many individual vulnerabilities as possible, the basic approach needs to be supplemented with more sophisticated techniques. There are several ways in which XSS vulnerabilities may exist within an application that will not be identified via the basic approach to detection:

- **Blacklist-Based Filters**: Many applications implement rudimentary blacklist-based filters to prevent XSS attacks. These filters typically look for expressions like `<script>` within request parameters and take defensive actions such as removing or encoding the expression or blocking the request. Just because one common attack string is being filtered, this does not mean that an exploitable vulnerability does not exist. As you will see, there are cases in which a working XSS exploit can be created without using `<script>` tags and even without using commonly filtered characters such as `<`, `>`, and `/`.
- **Defective Anti-XSS Filters**: The anti-XSS filters implemented within many applications are defective and can be circumvented through various means. For example, suppose an application strips any `<script>` tags from user input before it is processed. This means that the attack string used in the basic approach will not be returned in any of the application’s responses. However, it may be that one or more of the following strings will bypass the filter and result in a successful XSS exploit:
  ```html
  "><img src=x onerror=alert(document.cookie)>
  "><svg/onload=alert(document.cookie)>
  "%3e%3cscript%3ealert(document.cookie)%3c/script%3e
  "><script>alert(document.cookie)</script>
  %00"><script>alert(document.cookie)</script>
  ```

  Note that in some of these cases, the input string may be sanitized, decoded, or otherwise modified before being returned in the server’s response, yet might still be sufficient for an XSS exploit. In this situation, no detection approach based on submitting a specific string and checking for its appearance in the server’s response will in itself succeed in finding the vulnerability.

- **DOM-Based XSS**: In exploits of DOM-based XSS vulnerabilities, the attack payload is not necessarily returned in the server’s response but is retained in the browser DOM and accessed from there by client-side JavaScript. Again, in this situation, no approach based on submitting a specific string and checking for its appearance in the server’s response will succeed in finding the vulnerability.

#### Finding and Exploiting Reflected XSS Vulnerabilities

The most reliable approach to detecting reflected XSS vulnerabilities involves... [Continued in the next section]