, and then, for any source set S, compute
 as the output.
119
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:13 UTC from IEEE Xplore.  Restrictions apply. 
B. Network Address Translation
The FIREMAN system is very powerful and handles
ﬁltering rules very well, but it does not consider network
address translation (NAT) rules. NAT rules modify the
contents of Ri, usually by manipulating either the source
address (source NAT, or SNAT) or the target address or port
(destination NAT, or DNAT). NetSPA’s reachability system
models both.
NetSPA’s handling of NAT rules via BDDs uses BuDDy’s
exist function. exist(X, Y ) takes all variables used in
Y and removes them from X, essentially resetting those
variables to a “do not care” state. For example, exist(y ∧
x∧(z∨y), y) = x∧z. This can be used to remove restrictions
on sections of the reachability tuple.
the
rule
192.168.0.0/24 -> 10.0.0.1:25/tcp ] :
SNAT to 10.5.17.36. This rule changes the source IP
address of matched reachability to 10.5.17.36, while the
destination address, protocol, and port remain unchanged.
example,
consider
For
NAT
[
We model a NAT rule using three BDDs. Recall that a
ﬁltering rule has only Pi, the trafﬁc matched by the rule.
For a NAT rule, we build Pi as well. We also require
Mi, the mask set representing the information that the rule
changes – every bit changed is set to one, and all other
bits are left unset. Lastly, we require Ti,
the transform
set, representing the translated value imposed by the rule.
For the example rule, Pi
is [ 192.168.0.0/24 ->
10.0.0.1:25/tcp ], Mi
is [ 255.255.255.255
-> * ], and Ti is [ 10.5.17.36 -> * ].
To process a NAT rule, we ﬁrst isolate trafﬁc that the rule
matches. This, like a ﬁltering rule, is computed as (Ri∩Pi).
Second, we compute the modiﬁed reachability by using the
exist function to remove the values to be changed (Mi).
Finally, we use Ti to insert the changed values, taking care to
not manipulate trafﬁc that the rule does not match (Ri−Pi).
Ri+1 = (Ri − Pi) ∪ (exist(Ri ∩ Pi, Mi) ∩ Ti)
NAT rules, by themselves, do not permit or deny trafﬁc; A
and D are unaltered.
Consider as an example the rulegroup shown in the left-
hand side of Figure 1. For this example we drastically sim-
plify reachability by ignoring destination port and protocol,
and restricting the source and destination addresses to the
sets (1, 2, 3, 4) and (a, b, c, d), respectively – doing so allows
us to visually depict the resulting I →K reachability matrix,
shown in the upper left of the ﬁgure. In the matrix, a gray
cell represents true, and white represents false.
For illustrative purposes, we begin with S = (1, 2, 3) →
∗. The ﬁrst rule accepts only trafﬁc from 1 to a (shown
as 1 → a), thus adding Pi ∩ Ri = 1 → a to the accept
disposition A and passing the remainder Ri − Pi to the next
rule.
The second rule is a NAT rule, translating reachability
from source address 1 to the source address 4. As a result,
Chain 1
Chain 2
eth0
Accept 1   a
NAT 1   * to 4
Accept 4   b
+
-
?
+
-
?
accept disposition
deny disposition
default disposition
2   b: Goto
Accept *   b
Chain 3
NAT 4   b to d
NAT *   b to d
+
-
?
+
-
?
eth1
eth2
Figure 2. Example Arrangement of Three Chains with Three Interfaces
1 → (b, c, d) is removed from Ri+1, as it’s been translated
to something else, and 4 → (b, c, d) is added; this value
proceeds to the next rule.
The ﬁnal rule is another ﬁltering rule, accepting trafﬁc
from 4 to b. It adds Ri∩Pi = 4 → b to the accept disposition
A and removes Pi from Ri+1. The ﬁnal result is A = (1 →
a, 4 → b), D = ∅, R = ((2, 3) → ∗, 4 → (c, d)).
C. Branching between chains
Transitioning between chains is accomplished via chain
dispositions, which determine the destination of trafﬁc from
each of the three answers . For example,
consider the three chains shown in Figure 2. Here, the accept
set of chain 1 becomes the input to chain 3, and the accept
set of chain 2 exits the ﬁrewall via interface eth1.
In addition to chain-to-chain branching, it is sometimes
desirable to branch to another chain from within a rule.
NetSPA supports two rule dispositions for this purpose: goto
and plusgoto. In both cases, the trafﬁc matched by the rules
(Ri ∩ Pi) is sent to another chain as its input S. A goto
rule prevents the matched trafﬁc from continuing in the
original rulegroup (Ri+1 = Ri − Pi); a plusgoto rule does
not (Ri+1 = Ri). NetSPA uses plusgoto rules extensively to
model routing where multiple valid routes exist; via plusgoto
rules, NetSPA can explore all of the possible routes in order
to perform a worst-case evaluation.
The combination of chains and the edges between them
creates a directed acyclic graph, e.g., the graph shown in
Figure 2. We refer to a chain that directly receives trafﬁc
from a given interface as that interface’s entry node, and
any chain that directly sends trafﬁc to an interface as one of
the interface’s exit nodes.
D. Reverse Reachability
To support client-side attacks, NetSPA’s reachability sys-
tem has been extended to efﬁciently compute reachability
backwards, starting at the malicious server and working
backwards to the vulnerable clients. This could be ac-
complished by computing forward reachability from every
host on the network. However, on networks with solid
restrictions on outbound trafﬁc, it is more efﬁcient to traverse
reachability chains, and their rules, backwards.
To compute reverse reachability through a ﬁrewall, we
must posit a set of reachability T that we wish to run
120
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:13 UTC from IEEE Xplore.  Restrictions apply. 
to
a b c d
1
2
3
4
m
o
r
f
n
o
i
t
i
s
o
p
s
i
d
t
p
e
c
c
a
n
o
i
t
i
s
o
p
s
i
d
y
n
e
d
n
o
i
t
i
s
o
p
s
i
d
t
l
u
a
f
e
d
+-?
INPUT
S =
Accept 1    a
+
?
-
NAT 1    * to 4
+
?
-
Accept 4    b 
+
?
-
Overall 
ACCEPT
Overall 
DENY
Overall 
DEFAULT
y
t
i
l
i
b
a
h
c
a
e
R
d
r
a
w
r
o
F
y
t
i
l
i
b
a
h
c
a
e
R
e
s
r
e
v
e
R
INPUT
Accept 1    a
+
?
-
NAT 1    * to 4
+
?
-
Accept 4    b 
+
?
-
Overall 
ACCEPT
Overall 
DENY
Overall 
DEFAULT
T
=
Figure 1. Simpliﬁed Example Reachability Flow Through a Rulegroup: Forward and Reverse
backwards from a given subnet, through all interfaces con-
nected to that subnet. For a given interface, we identify the
interface’s exit nodes and walk the chain graph backwards
from them to all other interfaces’ entry nodes. Within a
rulegroup, we walk the rules in reverse as well.
Each rule disposition is handled differently. An allow rule
must remove from Ri+1 everything that the rule matches,
because such trafﬁc would never have been sent to Ri+1 by
the rule. It must also add to Ri everything in A that the rule
matches, as it would have ﬂowed through the rule to A:
Ri = (Ri+1 − Pi) ∪ (A ∩ Pi)
NAT rules are more complicated. Mi
Deny rules are similar.
is unchanged,
but we must use a new P (cid:2)
the reachability after the
i ,
NAT rule was applied, and T (cid:2)
i ,
the altered reachabil-
ity before the NAT rule makes its changes. For ex-
the NAT rule we evaluated in Sec-
ample, consider
tion V-B: 192.168.0.0/24 -> 10.0.0.1:25/tcp
remains the same, P (cid:2)
: SNAT to 10.5.17.36. Mi
i
becomes 10.5.17.36 -> 10.0.0.1:25/tcp, and T (cid:2)
i
becomes 192.168.0.0/24 -> *. We do not remove the