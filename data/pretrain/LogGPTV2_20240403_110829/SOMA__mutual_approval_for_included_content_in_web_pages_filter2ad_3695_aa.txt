# Title: SOMA: Mutual Approval for Included Content in Web Pages

## Authors:
- Terri Oda
- Glenn Wurster
- P. C. van Oorschot
- Anil Somayaji

### Affiliation:
Carleton Computer Security Lab, School of Computer Science, Carleton University, Canada

### Contact:
{toda, gwurster, paulv, soma}@scs.carleton.ca

## Abstract
Unrestricted information flows are a significant security weakness in current web design. Attacks such as cross-site scripting (XSS) and cross-site request forgery (CSRF) often exploit the ability to send or retrieve data from arbitrary, potentially malicious, web servers. In this paper, we introduce Same Origin Mutual Approval (SOMA), a new policy that enhances control over information flows and mitigates common web vulnerabilities. By requiring site operators to specify approved external domains and ensuring mutual approval between these domains, SOMA prevents the inclusion of malicious content and the unauthorized communication of sensitive information. This policy is compatible with existing web applications and can be incrementally deployed, providing immediate benefits to clients and servers that adopt it. SOMA introduces minimal overhead, typically one additional HTTP request per domain, and can be implemented with minimal effort by application and browser developers. We have developed a Firefox add-on to evaluate our proposal.

## Categories and Subject Descriptors
- C.2 [General]: Security and protection
- H.3 [Online Information Services]: Web-based services

## General Terms
- Security
- Experimentation

## Keywords
- Web security, JavaScript, same origin policy, cross-site scripting (XSS), cross-site request forgery (CSRF)

## 1. Introduction
Modern web pages are dynamic, integrating code and data from multiple sources. While users generally trust the websites they visit, external content may be untrusted, untrustworthy, or even malicious. Malicious inclusions can lead to drive-by downloads, misuse of user credentials, and distributed denial-of-service attacks. A common thread in these scenarios is that the browser must communicate with web servers that would not normally be contacted, potentially controlled by attackers.

In this paper, we propose a policy called Same Origin Mutual Approval (SOMA) to constrain communications and inclusions in web pages. SOMA requires the browser to verify mutual approval from both the page's site operator and the third-party content provider before any communication is allowed. This "tightening" of the same origin policy prevents loading malicious content from arbitrary sites and restricts the ability to communicate sensitive information. While attacks like XSS are still possible, they must originate from trusted domains, significantly reducing the risk.

SOMA is practical and easy to implement. Browsers need only minor code changes, and websites must create simple policy files. Participating sites and browsers see immediate benefits, while non-participating entities continue to function normally. This facilitates incremental deployment, essential for any change to internet infrastructure. We have implemented SOMA as a Firefox add-on and tested it with over 500 main pages, finding no compatibility issues and effectively blocking simulated attacks. The overhead is minimal, typically one additional HTTP request per new domain.

The remainder of this paper is organized as follows:
- Section 2 provides background on current web security rules and attacks.
- Section 3 details the SOMA design.
- Section 4 evaluates the proposed design.
- Section 5 describes our prototype and testing results.
- Section 6 discusses related work.
- Section 7 concludes the paper.

## 2. Background and Motivation
Web browsers frequently engage in extensive cross-domain communication. During a user's interaction with a web page, the browser retrieves images, advertisements, and other content from various servers. While this is permissible for static data, restrictions must be placed on executable content to maintain security.

### 2.1 Current Security Features
JavaScript has two primary security features:
- **Sandbox**: Prevents scripts from affecting the underlying system or other browser instances.
- **Same Origin Policy**: Restricts scripts from accessing or modifying content from different origins. The origin is defined by the protocol, port, and host. Scripts from different origins cannot access each other's source but can call functions within the same page.

### 2.2 Security Vulnerabilities
Despite these protections, several vulnerabilities exist:
- **Recursive Script Inclusion**: Scripts can add additional script tags, which can load content from any domain, posing a risk if a trusted domain inadvertently loads malicious content.
- **Unrestricted Outbound Communication**: Scripts can request content from any domain, potentially leaking sensitive information.
- **Cross-Site Request Forgery (CSRF)**: URLs that perform actions on a server can be exploited, causing actions to be performed on behalf of the logged-in user.
- **Cross-Site Scripting (XSS)**: Attackers can inject code into a page, which can then steal information or perform actions on behalf of the user.

## 3. SOMA Design
The Same Origin Mutual Approval (SOMA) policy enhances the same origin policy to better handle these exploits. SOMA requires mutual approval from both the origin website and the content provider before allowing external content to be fetched. This gives site operators more control over what is included in their sites.

### Key Ideas
- **Operator Control**: Site operators, who have the knowledge and vested interest, should define security policies.
- **Simplicity**: Policies are specified at the DNS domain and URL level, making them easy to understand and implement.

### Implementation
- **Browser Changes**: Minimal code changes to check for mutual approval.
- **Policy Files**: Simple files created by websites to specify approved domains.
- **Overhead**: One additional HTTP request per new domain.

## 4. Evaluation
We have implemented SOMA as a Firefox add-on and tested it with over 500 main pages. The results show no compatibility issues and effective blocking of simulated attacks. The overhead is minimal, typically one additional HTTP request per new domain.

## 5. Prototype and Testing
Our prototype and testing results demonstrate the effectiveness and practicality of SOMA. The add-on can be run in any regular installation of Firefox, and the policy files are easy to create and cause no compatibility issues.

## 6. Related Work
We discuss alternative browser security proposals and related work, highlighting how SOMA addresses the cross-domain communication involved in most JavaScript exploits.

## 7. Conclusion
SOMA is a practical, easy-to-adopt, and effective proposal for improving web security. It enhances the same origin policy by requiring mutual approval, preventing the inclusion of malicious content and the unauthorized communication of sensitive information. Incremental deployment and minimal overhead make it a viable solution for enhancing web security.

---

This revised version of your text aims to improve clarity, coherence, and professionalism. The structure and flow of the document have been refined, and the language has been made more precise and concise.