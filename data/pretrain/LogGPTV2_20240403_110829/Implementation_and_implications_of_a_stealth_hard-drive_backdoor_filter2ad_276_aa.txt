title:Implementation and implications of a stealth hard-drive backdoor
author:Jonas Zaddach and
Anil Kurmus and
Davide Balzarotti and
Erik-Oliver Blass and
Aur&apos;elien Francillon and
Travis Goodspeed and
Moitrayee Gupta and
Ioannis Koltsidas
Implementation and Implications of
a Stealth Hard-Drive Backdoor
Jonas Zaddach
†∗
Anil Kurmus
‡∗
¶
Travis Goodspeed
†
Davide Balzarotti
Erik-Oliver Blass
§
†
Aur´elien Francillon
‡
Moitrayee Gupta
(cid:3)
Ioannis Koltsidas
ABSTRACT
Modern workstations and servers implicitly trust hard disks
to act as well-behaved block devices. This paper analyzes
the catastrophic loss of security that occurs when hard disks
are not trustworthy. First, we show that it is possible to
compromise the ﬁrmware of a commercial oﬀ-the-shelf hard
drive, by resorting only to public information and reverse en-
gineering. Using such a compromised ﬁrmware, we present
a stealth rootkit that replaces arbitrary blocks from the disk
while they are written, providing a data replacement back-
door. The measured performance overhead of the compro-
mised disk drive is less than 1% compared with a normal,
non-malicious disk drive. We then demonstrate that a re-
mote attacker can even establish a communication channel
with a compromised disk to inﬁltrate commands and to ex-
ﬁltrate data.
In our example, this channel is established
over the Internet to an unmodiﬁed web server that relies
on the compromised drive for its storage, passing through
the original webserver, database server, database storage en-
gine, ﬁlesystem driver, and block device driver. Additional
experiments, performed in an emulated disk-drive environ-
ment, could automatically extract sensitive data such as
/etc/shadow (or a secret key ﬁle) in less than a minute. This
paper claims that the diﬃculty of implementing such an at-
tack is not limited to the area of government cyber-warfare;
rather, it is well within the reach of moderately funded crim-
inals, botnet herders and academic researchers.
∗
†
Both authors are ﬁrst authors.
EURECOM, 06560 Sophia Antipolis, France.
{jonas.zaddach,davide.balzarotti,aurelien.
francillon}@eurecom.fr.
‡
IBM Research – Zurich, 8803 R¨uschlikon, Switzerland.
Email: {kur,iko}@zurich.ibm.com.
§
College of Computer and Information Science, Northeast-
ern University, Boston, MA, USA. Email: blass@ccs.neu.
edu.
¶
PI:EMAIL
(cid:3)
Department of Computer Science and Engineering, UCSD,
La Jolla, CA, USA. Email: m5gupta@cs.ucsd.edu.
Email:
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’13, December 9 - 132013, New Orleans, Louisiana, USA
Copyright 2013 ACM 978-1-4503-2015-3/13/12 ...$15.00.
http://dx.doi.org/10.1145/2523649.2523661
279
1.
INTRODUCTION
Rootkits and backdoors are popular examples of malicious
code that allow attackers to maintain control over compro-
mised machines. They are used by simple botnets as well as
by sophisticated targeted attacks, and they are often part
of cyber-espionage tools designed to remain undetected and
collect information for a long period of time.
Traditionally, malicious code targets system utilities, pop-
ular network services or components of the operating system.
However, in a continuous eﬀort to become more persistent
and avoid detection, the target of the infection has shifted
from software components towards more low-level elements,
such as bootloaders, virtual-machine hypervisors, computer
BIOS, and recently even the hardware itself.
The typical hardware-based threat scenario involves a ma-
levolent employee in the manufacturing process or a compro-
mised supply chain. In addition, many devices from trusted
parties have been known to contain rootkits for copyright
protection [14] or lawful interception capabilities in network
devices [5, 10]. Recent reports of hard drives shipping with
viruses [23] show that such threats are also realistic in the
context of storage devices.
In this paper, we will demon-
strate that it is not even necessary to have access to the
manufacturer or to the supply chain in order to compromise
a hard drive’s ﬁrmware. Instead, a ﬁrmware backdoor can
be installed by, e.g., traditional malware after the operating
system has been compromised.
From the attacker’s point of view, a drawback of hard-
ware backdoors is the fact that they are highly hardware
dependent, requiring customization for each targeted de-
vice. This has made hardware backdoors less generic and
less attractive than more traditional operating-system back-
doors. However, the hard-drive market has now shrunk to
only three major manufacturers, with Seagate and Western
Digital accounting for almost 90% of all drives manufac-
tured [4]. While drive ﬁrmwares may vary across product
lines, porting a backdoor from one model to another of the
same manufacturer should require only a limited amount of
work, making backdoors on hard drives an attractive attack
vector.
So far, malicious hardware has typically been used as a
stepping stone to compromise other system components: for
example, by exploiting the auto-run functionality, ﬁlesystem
vulnerabilities [21], or DMA capabilities on systems lack-
ing properly conﬁgured I/O Memory Management Units
(IOMMU). In such cases, malicious code on the operat-
ing system is simply bootstrapped from the hardware device.
Then, to perform its operation, the malware propagates and
infects the OS kernel, using the compromised hardware only
as a way to survive re-installation and software updates.
However, as soon as malicious code “leaves” the ﬁrmware
and moves to the system memory, it breaks cover. There-
fore, such malware can be detected and prevented by kernel-
or hardware-supported integrity mechanisms, such as Copi-
lot [25].
In this paper, we describe how an attacker can overcome
the above limitations by leveraging a storage ﬁrmware back-
door. Such a ﬁrmware backdoor does not require any modi-
ﬁcation to the operating system. The backdoor is, therefore,
less intrusive and less dependent on other layers (e.g., OS,
applications, and ﬁlesystem). As a consequence, it cannot
be detected by existing mechanisms that guarantee OS in-
tegrity [17, 25].
As a proof of concept, we present a Data Exﬁltration
Backdoor (“DEB”) that allows an attacker to remotely re-
trieve and modify any data stored in the device. A DEB
allows a bi-directional communication channel to be estab-
lished between the attacker and the storage device that po-
tentially resides in a data center well outside the attacker’s
reach. As most Internet-based services, such as web forums,
blogs, cloud services or Internet banking, eventually need to
read and write data to disk, a DEB can be used to remotely
exﬁltrate data from such services. The rationale of this data-
replacement backdoor is that the attacker can piggy-back
its communications with the infected storage device on disk
reads and writes. Indeed, the attacker can issue a speciﬁc
command by encapsulating it in normal data which is to be
written to a block on a compromised hard drive. This com-
mand makes the malicious ﬁrmware replace the data to be
written with the data of an arbitrary block speciﬁed by the
attacker.
In a second step, the attacker can then request
the block that was just written and therewith, eﬀectively,
retrieve the content of any block on the hard-drive. We also
discuss a number of challenges that arise with this technique,
and show how the attacker can overcome them (e.g., data
alignment and cache issues).
Threat Model.
In our threat model, an attacker has compromised an
oﬀ-the-shelf computer. This machine may have been ini-
tially infected with a malware by a common attack such as
a drive-by-download or a malicious email attachment. Then
the malware infects the machine’s hard drive ﬁrmware by
abusing its ﬁrmware update mechanisms. Finally, the OS
part of the malware removes itself from the machine, and
future malicious behavior becomes completely “invisible” to
the OS, anti-virus or forensics tools. Following such an infec-
tion, the malware can keep control of the machine without
being detected even if the drive is formatted and the system
re-installed.
We show in this paper that, surprisingly, the above attack
requires the same amount of eﬀort and expertise as the de-
velopment of many existing forms of professional malware
(e.g., large scale botnets). Moreover, we claim that this at-
tack is well within the capabilities of current cyber-espionage
tools. Finally, we note that this threat model applies to ded-
icated hosting providers, since an attacker could temporarily
lease a dedicated server and infect an attached hard drive
via a malicious ﬁrmware update. A subsequent customer
leasing a server with this infected drive would then be a
victim of this attack.
Contributions.
We make the following major contributions:
• We report on our reverse-engineering of a real-world,
oﬀ-the-shelf hard-disk drive, its code update mecha-
nism, and how one could infect its ﬁrmware with a
backdoor that can (generally) modify blocks written
to disk. We measured our backdoor’s worst-case per-
formance impact to be less than 1% on disk operations
(Section 2).
• We present the design of a novel exﬁltration mecha-
nism, a data replacement backdoor, allowing a remote
attacker to establish a covert data channel with the
storage device (Section 3).
• We evaluate the impact of our compromised drive in
a realistic attack scenario involving the communica-
tions between the attacker and the disk drive storing
the database of a typical Linux/Apache/PHP web fo-
rum. As our prototype modiﬁed disk ﬁrmware was not
stable enough for such complete experiments, we have
evaluated this scenario in a QEMU simulation (Sec-
tion 3.4).
• We discuss possible countermeasures and defense strate-
gies against our attack, such as encrypting data at rest.
We also discuss explorative defense techniques, e.g.,
a page-cache-based probabilistic detection mechanism
(Section 4).
2. BACKDOORING A COMMERCIAL OFF-
THE-SHELF HARD DRIVE
In this section we describe how we inserted a backdoor
into the ﬁrmware of a stock hard drive.
2.1 Modern Hard-Drive Architecture
The software and system architecture described here are
speciﬁc to the drive we analyzed. However, we observed
that it is almost identical for two distinct drives from one
product family of the same manufacturer, and a brief look
at one drive from another major manufacturer revealed a
very similar architecture.
Physical Device.
A hard disk is a set of rigid magnetic disks aligned on
a spindle, which is rotated by a motor. A rotary actua-
tor structure moves a stack of heads relative to concentric
tracks on the surface of the disks. The entire apparatus is
contained in a tightly sealed case. A micro-controller takes
care of steering the motors and translating the higher-level
protocol that a computer uses to communicate with the disk
to and from a bitstream, which is processed by specialized
hardware (a DSP or FPGA) and fed to the heads [8]. To-
day, hard disks interface with other systems mostly through
Serial ATA (SATA) and Small Computer Systems Interface
(SCSI) buses, although bridge chips might translate to other
buses, such as USB. Parts of those protocols are typically
handled directly in hardware.
Execution Environment.
Like many embedded systems, this hard drive is based on
a custom System on Chip (SoC) design. This SoC is built
280
SATA drive
Spare power cable
Relay for serial port
controlled power reset
Power cord
Spare relay
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:22)(cid:1)(cid:28)(cid:29)(cid:30)(cid:23)(cid:18)(cid:25)(cid:4)(cid:3)(cid:25)(cid:3)(cid:16)(cid:2)(cid:4)(cid:3)(cid:9)(cid:9)(cid:7)(cid:4)
(cid:1)(cid:17)(cid:20)(cid:21)(cid:22)(cid:23)(cid:12)
(cid:28)(cid:16)(cid:2)(cid:7)(cid:4)(cid:16)(cid:5)(cid:9)(cid:12)(cid:21)(cid:22)(cid:23)
(cid:19)(cid:9)(cid:15)(cid:20)(cid:4)(cid:21)(cid:17)(cid:19)(cid:4)(cid:5)(cid:6)(cid:6)(cid:7)(cid:8)(cid:6)(cid:9)(cid:3)(cid:10)(cid:2)
(cid:8)(cid:9)(cid:5)(cid:10)(cid:11)(cid:12)(cid:13)(cid:7)(cid:13)(cid:3)(cid:4)(cid:14)(cid:12)
(cid:4)(cid:11)(cid:12)(cid:3)(cid:4)(cid:5)(cid:6)(cid:6)(cid:7)(cid:8)(cid:6)(cid:9)(cid:3)(cid:10)(cid:2)
(cid:28)(cid:16)(cid:2)(cid:7)(cid:4)(cid:16)(cid:5)(cid:9)(cid:12)(cid:21)(cid:22)(cid:23)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:6)(cid:7)(cid:8)(cid:6)(cid:9)(cid:3)(cid:10)(cid:2)
(cid:15)(cid:16)(cid:12)(cid:17)(cid:18)(cid:10)(cid:19)(cid:12)
(cid:13)(cid:14)(cid:15)(cid:7)(cid:10)(cid:16)
(cid:17)(cid:18)(cid:10)(cid:2)(cid:8)(cid:9)(cid:14)(cid:15)
(cid:17)(cid:18)(cid:10)(cid:2)(cid:8)(cid:9)(cid:14)(cid:15)
(cid:17)(cid:18)(cid:10)(cid:2)(cid:8)(cid:9)(cid:14)(cid:15)
(cid:1)(cid:14)(cid:10)(cid:2)(cid:7)(cid:13)(cid:12)
(cid:22)(cid:4)(cid:7)(cid:5)
(cid:24)(cid:9)(cid:3)(cid:25)(cid:19)(cid:10)(cid:12)
(cid:24)(cid:26)(cid:27)(cid:7)(cid:4)(cid:18)(cid:16)(cid:6)
(cid:7)
(cid:25)
(cid:5)
(cid:32)
(cid:1)
(cid:12)
(cid:10)
(cid:10)
(cid:7)
(cid:4)
(cid:31)
(cid:31)
(cid:22)
Serial to USB cables
SATA cable
Figure 2: Overview of a hard drive’s architecture.
Figure 1: Custom backdoor development kit. This
apparatus was built to reset the drive, allowing easy
scripting and automated tasks. One USB to serial
cable controls the relay, the second is connected to
the serial port of the drive. The SATA cable is con-
nected through a USB-SATA adapter for backdoor
development. It is then directly connected to a com-
puter motherboard for the ﬁeld tests.
around an ARM966 CPU core, a read-only memory (ROM)
containing a “mask ROM” bootloader, internal SRAM mem-
ories, an external serial FLASH (accessed via an SPI bus),
and an external DRAM memory. This DRAM is the largest
memory and is used to cache data blocks read from or writ-
ten to disk as well as a part of the ﬁrmware code that does
not ﬁt into the SRAM.
Interestingly, this hard drive also provides a serial con-
sole accessible through a physical serial port on the drive’s
Master/Slave jumper pins.