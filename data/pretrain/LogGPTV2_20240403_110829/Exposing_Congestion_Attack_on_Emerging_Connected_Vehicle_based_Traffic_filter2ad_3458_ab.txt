7
4
8
2
5
1
6
Fig. 3: Illustration of a signal plan. Number 1 to 8 are phases.
time
BSM
Trajectory 
awareness
Phase signal 
controller
Signal 
status
Signal 
control
Real-time 
trajectory
data
Signal planning 
COP EVLS
Fig. 2: The operation scenario for the I-SIG system.
Fig. 4: The I-SIG system design.
ﬁgure. A typical goal of such algorithm is to reduce the total
delay for all vehicles in the intersection. The delay time for
a vehicle spent in an intersection is calculated as the actual
time the vehicle spent to pass the intersection subtracting the
so-called free-ﬂow travel time, meaning that the vehicle is
traveling at the speed limit without slowing down or stopping
due to red lights or other vehicles. The trafﬁc load for an
intersection is called trafﬁc demand.
2) System Design: Fig. 4 shows the design of the I-SIG
system. The BSM messages broadcast by the equipped vehicles
are received by a component called trajectory awareness, which
maintains the latest trajectory for each vehicle indexed by
the vehicle ID in the BSM messages. It also does some pre-
processing tasks for the use in the signal planning component,
e.g., assigning vehicle data to their requested phases based on
the intersection map. The signal planning component listens to
the trafﬁc signal status reported by the signal controller, and
launches signal planning stage by stage. More speciﬁcally, at
the beginning of each stage, the signal planning component
pulls the pre-processed real-time trajectory data for the ve-
hicles in the intersection, performs the planning, and sends
signal control commands to the signal controller. In the current
design, the following algorithms are used for signal planning:
The COP algorithm. The signal planning in the I-SIG
system uses a dual-ring version of the COP (Controlled Opti-
mization of Phases) algorithm[36], [25]. The input of the COP
algorithm is each approaching vehicle’s estimated arrival time
at the intersection, which is deﬁned as the estimated remaining
time for a vehicle to reach the stop bar of its current lane.
Based on the arrival time, COP uses dynamic programming
to calculate an optimal signal plan with the least estimated
total delay. To estimate the total delay, COP ﬁrst estimates the
releasing time for a vehicle based on the queue length at its
arrival time. If there is no queue, there is no delay; otherwise,
it uses a queuing model to estimate when the queue before the
vehicle is cleared. Then, the delay for a vehicle is calculated
as its releasing time subtracting its arrival time. If there are
no vehicle requesting a certain phase, COP skips this phase
in its planning so that the subsequent phases that have vehicle
request can be planned earlier.
In the design, COP can plan for unlimited number of stages
until all vehicles in the intersection can be served based on its
estimation. Since there might be more vehicles arriving at the
phases in the second stage, the I-SIG system only applies the
planned signal duration for ﬁrst stage at each signal control
time. Since the operation of the signal controller requires to
know what the next phase is after the current phase, the I-SIG
system also sets the phase sequence for the next stage at the
time of signal control. This means that in Fig. 3, the I-SIG
system cannot change the order of phases in the ﬁrst stage,
since this is set by the signal control last time. It can change
the duration of these phases, and the sequence of the phases
in the second stage based on the output of the COP algorithm.
In the current I-SIG system, a limit of the planning stages
is conﬁgured in COP. This is because in practice the signal
planning needs to ﬁnish within tgmin , usually 5-7 seconds,
in order to be applied to the signal controller in time. Thus,
with computation and memory resource constraints in practice,
COP cannot plan with unlimited stages like in its design.
With limited planning stages, the COP algorithm may not be
able to serve all vehicles. Thus, the current implementation in
the I-SIG system ﬁrst ﬁnds the plans with the least unserved
vehicles, and then choose the one with the least total delay. As
shown later in VI-B, such planning stage limit unexpectedly
leaves the I-SIG system vulnerable to congestion attacks.
Transition period: the EVLS algorithm. If the COP
algorithm only optimizes the signal plan for the equipped
vehicles, its effectiveness is found to be largely reduced if
the portion of the equipped vehicles is not sufﬁciently high,
e.g., less than 95% [25]. Since it is estimated that the market
penetration rate needs 25-30 years to reach at least 95% [16],
the I-SIG system uses an algorithm called EVLS (Estimation
of Location and Speed) to estimate the trajectory data of the
unequipped vehicles. In the EVLS algorithm, the trajectory
data of the equipped vehicles is used for such estimation
leveraging multiple trafﬁc models (detailed later in §V-B).
Design representativeness and current deployment. The
use of COP and EVLS is chosen by the I-SIG designer,
the team of USDOT-selected signal control experts, based
on a 2015 paper published in Transportation Research Part
C [25], a top-tier journal in transportation research. The COP
algorithm is chosen because it is very suitable for the CV
environment: its input is the arrival time for individual vehicles
instead of aggregated trafﬁc information, and thus can best
4
leverage the per-vehicle trajectory data in the CV environment
to effectively handle trafﬁc dynamics. As discussed earlier, the
EVLS algorithm is developed to overcome the limitation of
COP in the transition period. To the best of our knowledge, this
is the only design in the transportation literature that is fully
implemented and tested on real roads. In the CV Pilot Program,
this system is currently under deployment in Tampa [3].
III. THREAT MODEL
the traditional
As illustrated in §II-B, the operation of the I-SIG system
involves both infrastructure-side devices, i.e., RSUs and signal
controllers, and vehicle-side devices, the OBUs. Previous work
found that
transportation infrastructure side
devices tend to use weak credentials so that attackers can easily
take full control [27]. This is a known problem across many
embedded network devices [22] and we assume that the next
generation CV-based transportation systems will be fully aware
of this problem, and adopt sufﬁciently strong authentication
mechanisms as advised by previous work [27] so that they
cannot be easily compromised.
Thus, in this work we focus on the attacks from the vehicle-
side devices, the OBUs. More speciﬁcally, we assume that the
attacker can compromise the in-vehicle systems or OBUs on
their own vehicles or others’ vehicles so that she can send
malicious BSM messages to the RSUs to inﬂuence the signal
plan. It’s important to note that we do not assume that the
attackers can spoof the sender identities in the BSM messages.
Introduced in §II-A, the USDOT will deploy the SCMS system
to ensure that all BSM messages are authenticated. Since in
this paper we are more interested in new security problems
speciﬁc to CV-based trafﬁc control, we assume that the SCMS
system is sufﬁciently tested and not easily exploitable.
Thus, in our threat model the attack vehicles need to use
their true identities so that the sent BSM messages are still
correctly signed, but send spoofed vehicle trajectory data, e.g.,
speed and location, in these messages. This can be achieved
in two ways. First,
the attacker may directly compromise
OBUs by exploiting software vulnerabilities, similar to the
demonstrated compromises on other Electronic Control Units
(ECUs) [29], [20]. Second, if compromising OBUs is difﬁcult,
the attacker can send fabricated CAN messages with spoofed
sensor data to the OBUs by compromising other ECUs [29],
[20], [21]. Since the attack model includes malicious vehi-
cle owners who have arbitrary physical accesses, as long
as in-vehicle systems are not vulnerability-free, which has
been proved repeatedly [29], [20], [34], such compromises
are always achievable in practice, just like the smartphone
jailbreaking/rooting practices today.
To maximize the realism of our threat model,
in this
paper we assume that only one attack vehicle presents in
an intersection. Since the COP algorithm targets optimized
total delay for all vehicles in an intersection, which normally
have over 100 of them, it should be very challenging for
the data from one single vehicle to signiﬁcantly inﬂuence
the signal planning. However, as shown later, this is actually
possible due to several newly-discovered vulnerable design and
conﬁguration choices.
The attacker is assumed to have limited computation power
to launch the attack, e.g., only using a consumer laptop.
More speciﬁcally, when using paralleled computation,
the
attack laptop is assumed to have four processors to execute
simultaneously, which is a common speciﬁcation for consumer
laptops such as Macbook Pro. Before attacking an intersec-
tion,
the attacker is assumed to have performed sufﬁcient
reconnaissance and thus already knows (1) the signal control
algorithm choices, by testing the algorithm-speciﬁc vulnera-
bilities identiﬁed in this paper (detailed later), and (2) signal
control conﬁgurations and the intersection map, by measuring
the opened phases, the corresponding signal duration, and the
intersection map beforehand.
Since in the CV environment the vehicles are broadcasting
BSM messages to the surrounding devices (§II-A) and the
attack vehicle is in the victim intersection, we assume that
the attack vehicle can receive the same set of BSM messages
as those in the RSU. Thus, they can run the COP and EVLS
algorithms themselves to know the executed signal plans and
also estimate the signal plans to be executed, which is also
implemented in our exploitation process(§VII).
IV. ANALYSIS METHODOLOGY OVERVIEW
In this section, we describe the target attack goal and
overview the analysis methodology.
A. Attack Goal: Creating Congestion
As the ﬁrst security study on CV-based signal control, our
analysis in this paper focuses on subverting the core design
goal of the I-SIG system, total vehicle delay reduction. More
speciﬁcally, the attacker aims to send spoofed trajectory data
to inﬂuence the signal plan in order to increase the total delay
of other vehicles in the intersection. The attack vehicle is not
necessarily in the trafﬁc ﬂows; it might just park nearby, e.g., in
a gas station as shown in Fig. 1, listening to the BSM messages
from other vehicles, and seek chances to launch attacks.
Attack incentives. Such attacks can be politically or
ﬁnancially incentivized, e.g., blocking routes to business com-
petitors, like denial-of-service attacks on Internet. Since one
attack vehicle can only attack one intersection, to cause larger-
scale damage, attackers can form groups to attack consecutive
intersections along arterial roads in an area.
Damage to city functions and individuals. As one of the
critical infrastructure, signal control systems has a fundamental
impact on economic and environment, and thus it is highly
important to ensure that such system is well protected and
functions correctly and efﬁciently. This is equally true from
individual’s perspective: as estimated by a recent study, trafﬁc
jams cost U.S. drivers an average of $1,200 a year in wasted
fuel and time [10]. This is exactly the reason why the USDOT
is pushing the deployment of CV-based signal control [12].
B. Analysis Methodology Overview
To understand how vulnerable the current I-SIG system
design and implementation is under our threat model, our
security analysis consists of the following key steps:
(1) Data spooﬁng strategy identiﬁcation. Before ana-
lyzing the vulnerability of the I-SIG system, we ﬁrst need
to identify the meaningful data spooﬁng strategies. Since the
attack input is the data in the BSM messages, we analyze the
5
data ﬂow of the I-SIG system starting from the receiving BSM
messages to understand how the spoofed data can potentially
inﬂuence the signal control.
(2) Vulnerability analysis for each attack goal. With
data spooﬁng strategies identiﬁed, we then enumerate all
the data spooﬁng options for these strategies on the I-SIG
system to understand the upper bound of the congestion
attack effectiveness through data spooﬁng. To analyze the
I-SIG system, we need realistic vehicle trajectory data as
input to trigger the signal plan. Since it is impossible to use
real vehicles in an intersection due to ethical concerns, our
analysis uses a commercial-grade trafﬁc simulation software,
PTV VISSIM [8], to simulate trafﬁc patterns with a realistic
modelling of driver behaviors.
To ensure the generality of this analysis, we create an
intersection map with the a generic intersection structure and
the common phase conﬁguration in the U.S. We then use
VISSIM to generate trafﬁc ﬂows of normal demand following
the common practices in the transportation research area. We
take snapshots of the vehicle trajectory data in the simulation
periodically, which is then used as the input to our analysis.
For each snapshot, we run the signal planning in the I-SIG
system with and without attack data input, and quantify the
attack effectiveness in creating congestion.
(3) Cause analysis and practical exploit construction.
With the attack effectiveness for all possible data spooﬁng
options quantiﬁed, we perform cause analysis for the highly
effective attacks to understand why the current signal control
is vulnerable. Leveraging the insights, we construct practical
exploits under real-world attack resource constraints, e.g.,
computation power of a normal laptop as described in our
threat model (§III). As detailed later in §VII, this means that
the attacker cannot exhaustively try all possible data spooﬁng
options before making the attack decision; instead, she needs
to strategically plan the attack decision process to ensure that
she does not miss the attack timing.
(4) Evaluation using simulations with real-world inter-
section settings. To more concretely understand the practical
impact of the constructed exploits, we implement and evaluate
these exploits using simulations with real-world intersection
settings. We use the map of a real-world intersection with its
real phase conﬁgurations, and generate trafﬁc ﬂows according
to the real trafﬁc demand that we manually measured for
one hour on that intersection. Also, compared to attacking
individual snapshots in the vulnerability analysis step, in this
experiment the attacks are continuously launched for one hour,
closely evaluating real-world attack situations.
V. DATA SPOOFING STRATEGY
As the ﬁrst step in our analysis, in this section we analyze
attack input data ﬂows to identify data spooﬁng strategies.
A. Attack Input Data Flow and Direct Spooﬁng Strategy
Fig. 5 shows the attack input data ﬂow in the I-SIG
system. When the spoofed vehicle trajectory data is received,
it ﬁrst performs a geofence check, and only accepts the data
if its location is within the geographic boundaries of the
intersection. Thus, as described in §III, the attacker needs to
perform reconnaissance to know the geographic coordinates of
a targeted intersection, and only generate valid location data
to pass the geofence check.
Then, if the conﬁgured PR in the I-SIG system is lower
than 95%, it is considered a transition period and the attack
data are feed into the EVLS algorithm to estimate the trajectory
data for the unequipped vehicles. Otherwise, it is considered
a full deployment period and the EVLS algorithm is skipped.
A list of vehicle trajectory data entries, including the ones
for both the equipped vehicles and the estimated unequipped
vehicles if it is during the transition period, is then processed
to a structure called arrival table. An arrival table is an array
with two dimensions: the estimated arrival time and the phases.
The arrival time is rounded to seconds. Each array element at
(i, j) is the number of vehicles for the arrival time i at phase
j. The ﬁrst row is for vehicles with zero arrival time, meaning
that they are stopped (speed is 0) and waiting in queue.
The COP algorithm computes a signal plan with the
optimal total delay for all vehicles based on the arrival table.
Thus, the direct goal of the data spooﬁng attack is to change the
values in the arrival table so that it can inﬂuence the planning
in the COP algorithm. Since each vehicle has a position in the
arrival table, the direct data spooﬁng strategy is:
S1. Arrival time and phase spooﬁng, for both the
full deployment and transition periods. In both the full
deployment and transition periods, the attacker can change
the speed and location in its BSM message to set the arrival
time and the requested phase of her choice and thus increase
the corresponding arrival table element by one. In current
implementation, the arrival table considers vehicles arriving in
no more than 130 seconds. Thus, in this strategy the attacker
has 131 (arrival time) × 8 (phase) data spooﬁng options.
B. Spooﬁng Strategy For The Transition Period Only
To change the arrival table, besides directly spooﬁng the
attack vehicle’s own data, the unequipped vehicle estimation
process in the transition period is another attractive attack
target. Since both the data from equipped and unequipped
vehicles are considered in the arrival table, manipulating the
estimation results may more signiﬁcantly inﬂuence the signal
plan than only changing one vehicle’s data in S1.
The unequipped vehicle estimation process, i.e., the EVLS
algorithm [25], is detailed in the lower part of Fig. 5. As
the equipped vehicle data for each lane are ﬁrst
shown,
assigned into three regions: (1) queuing region,
including
vehicles waiting in the queue with zero speed, (2) slow-
down region, including vehicles slowing down because of the
front vehicles, and (3) free-ﬂow region, including vehicles far
away from the queue so that they behave independently. The
algorithm ﬁrst ﬁnds the stopped equipped vehicle that is the
farthest from the lane stop bar and uses its location as the
end of the queuing region. The slow-down region started right
after the queuing region, and the algorithm uses the equipped
vehicle’s trajectory data to judge whether it is slowing down
due to an unequipped front vehicle based on a car-following
model. After the slow-down region begins the free-ﬂow region.
After the region assignment, the algorithm ﬁrst estimates
the number of vehicles in queue by dividing the length of
the queuing region by the sum of the vehicle length and the
6
Spoofed 
vehicle 