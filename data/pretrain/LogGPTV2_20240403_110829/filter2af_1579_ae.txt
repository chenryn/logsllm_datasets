                    l1 = tf.nn.relu(tf.matmul(self.s_, w1) + b1)
                # second layer. collections is used later when assign to target net
                with tf.variable_scope('l2'):
                    w2 = tf.get_variable('w2', [n_l1, self.n_actions], initializer=w_initializer, collections=c_names)
                    b2 = tf.get_variable('b2', [1, self.n_actions], initializer=b_initializer, collections=c_names)
                    self.q_next = tf.matmul(l1, w2) + b2
        def store_transition(self, s, a, r, s_):
            if not hasattr(self, 'memory_counter'):
                self.memory_counter = 0
            transition = np.hstack((s, [a, r], s_))
            # replace the old memory with new memory
            index = self.memory_counter % self.memory_size
            self.memory[index, :] = transition
            self.memory_counter += 1
        def choose_action(self, observation):
            # to have batch dimension when feed into tf placeholder
            observation = observation[np.newaxis, :]
            if np.random.uniform()  self.memory_size:
                sample_index = np.random.choice(self.memory_size, size=self.batch_size)
            else:
                sample_index = np.random.choice(self.memory_counter, size=self.batch_size)
            batch_memory = self.memory[sample_index, :]
            q_next, q_eval = self.sess.run(
                [self.q_next, self.q_eval],
                feed_dict={
                    self.s_: batch_memory[:, -self.n_features:],  # fixed params
                    self.s: batch_memory[:, :self.n_features],  # newest params
                })
            # change q_target w.r.t q_eval's action
            q_target = q_eval.copy()
            batch_index = np.arange(self.batch_size, dtype=np.int32)
            eval_act_index = batch_memory[:, self.n_features].astype(int)
            reward = batch_memory[:, self.n_features + 1]
            q_target[batch_index, eval_act_index] = reward + self.gamma * np.max(q_next, axis=1)
            # train eval network
            _, self.cost = self.sess.run([self._train_op, self.loss],
                                         feed_dict={self.s: batch_memory[:, :self.n_features],
                                                    self.q_target: q_target})
            self.cost_his.append(self.cost)
            # increasing epsilon
            self.epsilon = self.epsilon + self.epsilon_increment if self.epsilon  1000:
                RL.learn()
            if done:
                count = json_req['count']
                if count == 100:
                    print(json_req['flag'])
                else:
                    print('count:', json_req['count'])
                break
            observation = observation_
            total_steps += 1
# Bin
## level1
### Evr_Q
#### 0x00 写在前面
这题一开始是准备TLS+SMC+反调试的，发现放在第一题有些不太合适，就把SMC的调用部分删掉了。  
（其实留下了彩蛋，smc的实现我没有删XD）  
设计思路：  
用TLS检测工具进程和调试器，进入主函数后先检测用户名，通过后检测StartCode(即flag)，最后输入'Y'确认CM。  
部分细节：
>   * Win10的TLS在vs17上有点小Bug，只能在Debug模式下跑起来，于是没有选择Release版本，如果给大家带来困扰这里十分抱歉。
>   * 用户名注册存在多解，原因是我把进位值舍去了（输入'I'也能通过username验证哦）
>   * StartCode部分先验证长度为35  
>  Step1: 全体 xor 0x76  
>  Step2: [7:14]每个字节先异或0xAD, 再将0b10101010位与0b01010101位互换  
>  Step3: [14:21]每个字节先异或0xBE, 再将0b11001100位与0b00110011位互换  
>  Step4: [21:28]每个字节先异或0xAD, 再将0b11110000位于0b00001111位互换
>   * Step2~4加密前先调用ntdll!NtQueryInformationProcess, 各检查1种标志(7, 30，31)
>   * 比较简单的做法直接用ida看了，cuz没有造成任何静态反编译的难度
>
#### 0x01 Wp
    import random
    import os
    import hashlib
    enc_flag = [30, 21, 2, 16, 13, 72, 72, 111, 221, 221, 72, 100, 99, 215, 46, 44, 254, 106, 109, 42, 242, 111, 154, 77, 139, 75, 30, 30, 14, 14, 14, 14, 14, 14, 11]
    dec_flag = [0] * len(enc_flag)
    #/////////////////////////////////////////////////
    def dec0_f(dec_t, enc_t, num):
        for i in range(num):
            dec_t[i] = chr(enc_t[i] ^ 0x76)
        return dec_t
    #/////////////////////////////////////////////////
    def dec1_f(dec_t, enc_t, num):
        for i in range(num):
            v1 = (enc_t[i] & 0x55) > 1) & 0x55
            enc_t[i] = v1 | v2
            dec_t[i] = enc_t[i] ^ 0xAD
        return dec_t
    #/////////////////////////////////////////////////
    def dec2_f(dec_t, enc_t, num):
        for i in range(num):
            v1 = (enc_t[i] & 0x33) > 2) & 0x33
            enc_t[i] = v1 | v2
            dec_t[i] = enc_t[i] ^ 0xBE
        return dec_t
    #/////////////////////////////////////////////////
    def dec3_f(dec_t, enc_t, num):
        for i in range(num):
            v1 = (enc_t[i] & 0xF) > 4) & 0xF
            enc_t[i] = v1 | v2
            dec_t[i] = enc_t[i] ^ 0xEF
        return dec_t
    #/////////////////////////////////////////////////
    def dec_f(dec_flag, enc_flag):
        for i in range(len(enc_flag)):
            dec_flag[i] = enc_flag[i]
        dec_flag[21:28] = dec3_f(dec_flag[21:28], enc_flag[21:28], 7)
        dec_flag[14:21] = dec2_f(dec_flag[14:21], enc_flag[14:21], 7)
        dec_flag[7:14] = dec1_f(dec_flag[7:14], enc_flag[7:14], 7)
        dec_flag = dec0_f(dec_flag, dec_flag, 35)
    #/////////////////////////////////////////////////
    dec_f(dec_flag, enc_flag)
    print ''.join(dec_flag)
flag:
    hctf{>>D55_CH0CK3R_B0o0M!-xxxxxxxx}
## level2
### ez_crackme
考察对简单解释器的逆向能力。
#### 加密解密过程
    box=[]
    for i in range(32):
        x=(x+51)%32
        box.append(x)
先用如上方式初始化一个box。
用这个box将输入的明文进行乱序。
    head = (out[0]&0xe0)>>5
        for i in range(31):
            out[i] = ((out[i]&0x1f)>5)
        out[31] = ((out[31]&0x1f)>5
        for i in range(31):
            out[i] = ((out[i]&0x1f)>5)
        out[31] = ((out[31]&0x1f)>3)+((out[i-1]&0x7)>3)+(tail<<5)
        for i in range(32):
            out2[box[i]] = out[i]
        return  ''.join(map(chr,out2))
#### 解释器分析
    //register
    #define _eax 0