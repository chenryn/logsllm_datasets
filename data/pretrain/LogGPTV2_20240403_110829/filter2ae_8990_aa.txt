**作者: evilpan  
原文链接: **
# 前言
某天在群里看到一个大佬看到另一个大佬的帖子而发的帖子的截图，如下所示:
不过当我看到的时候已经过去了大概720小时??
在查看该以太币交易记录的时候，发现在充值之后十几小时就被提走了，可能是其他大佬也可能是作者自己。虽然没钱可偷，但幸运的是 pyc
的下载地址依然有效，所以我就下载下来研究了一下。
# 初步分析
首先在专用的实验虚拟机里运行一下，程序执行没有问题:
    $ python2 ether_v2.pyc
    Input UR answer: whatever
    You are too vegetable please try again!
然后看看文件里是否有对应的字符串信息:
    $ grep vegetable ether_v2.pyc
很好，屁都没有，看来字符串也混淆了。
目前市面上有一些开源的 pyc 还原工具，比如:
  * [uncompyle6](https://github.com/rocky/python-uncompyle6)
  * [pycdc](https://github.com/zrax/pycdc)
  * ...
但是看作者的自信，应该是有信心可以抗住的，事实证明也确实可以。
# Python 反汇编
既然没有现成工具能用，那么我们就需要通过自己的方法来对代码逻辑进行还原。要分析代码逻辑第一步至少要把字节码还原出来，使用 dis 模块可以实现:
    import dis
    import marshal
    with open('ether_v2.pyc', 'rb') as f:
        magic = f.read(4)
        timestamp = f.read(4)
        code = marshal.load(f)
        dis.disassemble(code)
`.pyc`文件本身是字节码的`marshal`序列化格式，在 Python2.7 中加上 8 字节的 pyc
头信息。一般通过上面的代码即可打印出文件中的字节码信息。当然，这个事情并不一般:
    $ python2 try1.py
    Traceback (most recent call last):
      File "try1.py", line 9, in 
        dis.disassemble(code)
      File "/usr/lib/python2.7/dis.py", line 64, in disassemble
        labels = findlabels(code)
      File "/usr/lib/python2.7/dis.py", line 166, in findlabels
        oparg = ord(code[i]) + ord(code[i+1])*256
    IndexError: string index out of range
在 dis 模块中直接异常退出了，有点意思。查看 dis 的源码，查看出错的部分，发现在 `co.co_code`、 `co.co_names`、
`co.co_consts`等多个地方都出现了下标溢出的`IndexError`。不管是什么原因，我们先把这些地方 patch 掉:
这回就能看到输出的 Python 字节码了，如下:
    $ ./dec.py --pyc ether_v2.pyc
      3           0 JUMP_ABSOLUTE         2764
                  3 LOAD_CONST           65535 (consts[65535])
                  6                 50673
                  9 SET_ADD              18016
                 12 IMPORT_NAME           8316 (names[8316])
                 15 STOP_CODE           
                 16 LOAD_CONST              33 (8)
                 19 COMPARE_OP               2 ('==')
                 22 POP_JUMP_IF_FALSE       99
                 25 LOAD_FAST               28 ('/ * && ')
                 28 LOAD_ATTR               45 ('append')
                 31 LOAD_FAST                9 ('with ^ raise ')
                 34 LOAD_FAST               44 ('with as  - 6 lambda ')
                 37 COMPARE_OP               8 ('is')
                 40 CALL_FUNCTION            1
                 43 POP_TOP             
                 44 JUMP_FORWARD          8559 (to 8606)
    ...
不过这些字节码的逻辑看起来很奇怪，看不出哪里奇怪不要紧，我们先来看看正常的 Python 字节码。
# Python ByteCode 101
Python 是一种解释型语言，而 Python 字节码是一种平台无关的中间代码，由 Python 虚拟机动态(PVM)解释执行，这也是 Python
程序可以跨平台的原因。
## 示例
看一个简单的例子`test.py`:
    #!/usr/bin/env python2
    def add(a, b):
        return a - b + 42
    def main():
        b = add(3, 4)
        c = add(b, 5)
        result = 'evilpan: ' + str(c)
        print result
    if __name__ == '__main__':
        main()
使用上面的反汇编程序打印出字节码如下:
    $ ./dec.py --pyc test.pyc
      3           0 LOAD_CONST               0 ()
                  3 MAKE_FUNCTION            0
                  6 STORE_NAME               0 ('add')
      6           9 LOAD_CONST               1 ()
                 12 MAKE_FUNCTION            0
                 15 STORE_NAME               1 ('main')
     12          18 LOAD_NAME                2 ('__name__')
                 21 LOAD_CONST               2 ('__main__')
                 24 COMPARE_OP               2 ('==')
                 27 POP_JUMP_IF_FALSE       40
     13          30 LOAD_NAME                1 ('main')
                 33 CALL_FUNCTION            0
                 36 POP_TOP
                 37 JUMP_FORWARD             0 (to 40)
            >>   40 LOAD_CONST               3 (None)
                 43 RETURN_VALUE
能看懂英文的话，理解上面的代码应该也没有太大问题，不过值得注意的是有两个 `LOAD_CONST`
指令的参数本身也是代码，即`dis.disassemble`函数的参数，所以我们可以对其也进行反汇编:
    dis.disassemble(code)
    # ...
    print("=== 0 ===")
    dis.disassemble(code.co_consts[0])
    print("=== 1 ===")
    dis.disassemble(code.co_consts[1])
结果如下:
    === 0 ===
      4           0 LOAD_FAST                0 ('a')
                  3 LOAD_FAST                1 ('b')
                  6 BINARY_SUBTRACT
                  7 LOAD_CONST               1 (42)
                 10 BINARY_ADD
                 11 RETURN_VALUE
    === 1 ===
      7           0 LOAD_GLOBAL              0 ('add')
                  3 LOAD_CONST               1 (3)
                  6 LOAD_CONST               2 (4)
                  9 CALL_FUNCTION            2
                 12 STORE_FAST               0 ('b')
      8          15 LOAD_GLOBAL              0 ('add')
                 18 LOAD_FAST                0 ('b')
                 21 LOAD_CONST               3 (5)
                 24 CALL_FUNCTION            2
                 27 STORE_FAST               1 ('c')
      9          30 LOAD_CONST               4 ('evilpan: ')
                 33 LOAD_GLOBAL              1 ('str')
                 36 LOAD_FAST                1 ('c')
                 39 CALL_FUNCTION            1
                 42 BINARY_ADD
                 43 STORE_FAST               2 ('result')
     10          46 LOAD_FAST                2 ('result')
                 49 PRINT_ITEM
                 50 PRINT_NEWLINE
                 51 LOAD_CONST               0 (None)
                 54 RETURN_VALUE
## 基本概念
上述打印的是 Python 字节码的伪代码，存储时还是二进制格式，这个在下一节说。上面的伪代码虽然大致能猜出意思， 但这并不是严谨的方法。实际上
Python
字节码在[官方文档](https://docs.python.org/2.7/library/dis.html)有比较详细的介绍，包括每个指令的含义以及参数。
> 注意: 字节码的实现和具体Python版本有关
对于常年进行二进制逆向的人而言，可以把 Python 字节码看做是一种特殊的指令集。对于一种指令集，我们实际上需要关心的是指令结构和调用约定。Python
虚拟机 PVM 是一种基于栈的虚拟机，参数也主要通过栈来进行传递，不过与传统 x86 的参数传递顺序相反，是从左到右进行传递的。
每条字节码由两部分组成:
    opcode + oparg
其中`opcde`占1字节，即PVM支持最多256个类型的指令；
`oparg`占的空间和`opcode`有关，如果`opcode`带参数，即`opcode > dis.HAVE_ARGUMENT`，则`oparg`占
**2个字节**
；通常`oparg`表示在对应属性中的索引，比如`LOAD_CONST`指令的`oparg`就表示参数在`co_consts`数组中的索引。
> 在Python3中oparg占1个字节，所以再次提醒: 字节码的解析和具体Python版本有关
数组元素的数量是可变的，2字节最多只能表示65536个元素，要是超过这个值怎么办？答案就是
`EXTENDED_ARG`。这是个特殊的`opcode`，值为`dis.EXTENDED_ARG`，遇到这个 opcode 则表示下一条指令的参数值
`next_oparg` 值需要进行拓展:
    extented_arg = oparg * 65536
    next_oparg = next_oparg + extended_arg
当然`EXTENDED_ARG`是可以级联的，从而支持任意大小的参数值。
## CodeType
要查看某个 Python 函数的字节码，比如:
    def func(a):
      return a + 42
可以通过`func.__code__`获取。或者直接编译:
    c = "a = 3; b = 4; c = a + b"
    co = compile(c, "", "exec")
`func.__code__`和`co`都是下面的 CodeType 类型:
    class CodeType:
        co_argcount: int
        co_cellvars: Tuple[str, ...]
        co_code: str
        co_consts: Tuple[Any, ...]
        co_filename: str
        co_firstlineno: int
        co_flags: int
        co_freevars: Tuple[str, ...]
        co_lnotab: str
        co_name: str
        co_names: Tuple[str, ...]
        co_nlocals: int
        co_stacksize: int
        co_varnames: Tuple[str, ...]
前面介绍的字节码，就是`co_code`中的内容。而字节码中的参数`oparg`则是在对应数组(Tuple)中的位置。了解 PVM
翻译字节码过程最好的方法就是参考 dis 模块中的反汇编函数:
    def disassemble(co, lasti=-1):
        """Disassemble a code object."""
        code = co.co_code
        labels = findlabels(code)
        linestarts = dict(findlinestarts(co))
        n = len(code)
        i = 0
        extended_arg = 0
        free = None
        while i  0:
                    print
                print "%3d" % linestarts[i],
            else:
                print '   ',
            if i == lasti: print '-->',
            else: print '   ',
            if i in labels: print '>>',
            else: print '  ',
            print repr(i).rjust(4),
            print opname[op].ljust(20),
            i = i+1
            if op >= HAVE_ARGUMENT:
                oparg = ord(code[i]) + ord(code[i+1])*256 + extended_arg
                extended_arg = 0
                i = i+2
                if op == EXTENDED_ARG:
                    extended_arg = oparg*65536L
                print repr(oparg).rjust(5),
                if op in hasconst:
                    print '(' + repr(co.co_consts[oparg]) + ')',
                elif op in hasname:
                    print '(' + co.co_names[oparg] + ')',
                elif op in hasjrel:
                    print '(to ' + repr(i + oparg) + ')',
                elif op in haslocal:
                    print '(' + co.co_varnames[oparg] + ')',
                elif op in hascompare:
                    print '(' + cmp_op[oparg] + ')',
                elif op in hasfree:
                    if free is None:
                        free = co.co_cellvars + co.co_freevars
                    print '(' + free[oparg] + ')',
            print
其中`hasconst`、`hashname`都是定义在`opcode`模块中的数组，包含对应字节码指令的参数类型，比如`LOAD_CONST`指令就包含在`hasconst`数组中，这只是一种方便的写法。
# 加固与脱壳
通过字节码基本上能还原出原始代码的逻辑，即还原出可阅读的反汇编代码；如果要更进一步，反编译出原始的 Python 代码也是可以的，因为 CodeType
对象中已经有了足够多的信息。
因此，出于保护的目的，就有了针对 python 代码的安全加固的需求，一般而言 python 代码加固有以下几种:
  * 源码混淆，比如替换混淆变量名，例如 JavaScript 的 **uglify** 和 Java 的 **Proguard** ，目的是让代码变得不可读；
  * 字节码混淆，在不提供源代码的前提下，针对特定版本的 Python 对字节码做了额外的执行流混淆和代码数据加密，并在运行时解密，不影响最终程序在标准 Python 解释器中的运行结果；
  * 魔改解释器，使用了定制的 Python 解释器，对 opcode 等字节码的属性进行了替换和修改，与混淆后的字节码文件一并提供，并且无法在标准解释器中运行；
  * 其他的组合技……
对于我们的目标而言，显然是第二种加固方法，因为输出的 pyc 文件可以在标准的 Python2.7
解释器中运行。查看直接反汇编的字节码，可以明显看出对抗的痕迹:
      3           0 JUMP_ABSOLUTE         2764
                  3 LOAD_CONST           65535 (consts[65535])
                  6                 50673