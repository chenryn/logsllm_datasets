title:Source Attribution of Cryptographic API Misuse in Android Applications
author:Ildar Muslukhov and
Yazan Boshmaf and
Konstantin Beznosov
Analyzing Cryptographic API Usages for Android
Applications Using HMM and N-Gram
Zhiwu Xu∗, Xiongya Hu∗, Yida Tao∗ and Shengchao Qin‡∗
∗College of Computer Science and Software Engineering, Shenzhen University, Shenzhen, China
‡School of Computing, Engineering and Digital Technologies, Teesside University, UK
Abstract—A recent research shows that 88% of Android appli-
cations that use cryptographic APIs make at least one mistake.
For this reason, several tools have been proposed to detect crypto
API misuses, such as CryptoLint, CMA, and CogniCryptSAST.
However, these tools depend heavily on manually designed rules,
which require much cryptographic knowledge and could be
error-prone. In this paper, we propose an approach based on
probabilistic models, namely, hidden Markov model and n-gram
model, to analyzing crypto API usages in Android applications.
The difﬁculty lies in that crypto APIs are sensitive to not only API
orders, but also their arguments. To address this, we have created
a dataset consisting of crypto API sequences with arguments,
wherein symbolic execution is performed. Finally, we have also
conducted some experiments on our models, which shows that (i)
our models are effective in capturing the usages, detecting and
locating the misuses; (ii) our models perform better than the
ones without symbolic execution, especially in misuse detection;
and (iii) compared with CogniCryptSAST, our models can detect
several new misuses.
Index Terms—Cryptographic API, Android, API analysis,
hidden Markov model, n-gram
I. INTRODUCTION
According to a report from IDC [1], Android is the most
popular platform for smartphones, with almost 87% the mar-
ket share in 2019. As a result, Android users started to
accumulate a large amount of sensitive and private data on
their personal mobile devices that requires conﬁdentiality
protection [2]. Besides ﬁlesystem-level encryption, one typical
way to achieve data conﬁdentiality is to implement custom,
application-speciﬁc solutions using supported cryptographic
APIs (crypto APIs for short). For example, developers can
encrypt user data before storing it on the device or transmitting
it over the network.
However, developers can easily make mistakes in imple-
menting and using cryptography in their Android applications
due to either a lack of cryptographic knowledge or human
error, and such mistakes often lead to a false sense of security.
A recent research shows that 88% of Android applications that
use crypto APIs make at least one mistake [3]. What’s worse,
as shown in [4], usage updates are unlikely to ﬁx crypto API
misuses.
To address this problem, several tools have been proposed
to detect crypto API misuse, such as CryptoLint [3], CMA [5],
and CogniCryptSAST [6]. However, these tools depend heavily
on manually designed rules or models, which require much
cryptographic knowledge and could be error-prone. Some
existing heuristic approaches on general API usage can be
applied on crypto APIs, such as hidden Markov model [7]–
[10], n-gram model [11]–[13], and deep learning [14]. But
these approaches focus on API orders, leaving arguments out
of consideration, so that they are insufﬁcient for crypto APIs,
because crypto APIs are sensitive to not only the API orders,
but also their arguments. For example, if AES algorithm is
used, then the key size should be 128, 192, or 256, but not
the others. There are some existing approaches targeting at
API arguments [15], [16], but API orders are not considered.
In this paper, we propose an approach to analyzing crypto
API usages in Android applications, based on probabilistic
models, namely, hidden Markov model and n-gram model,
which require less cryptographic knowledge. Different from
existing work, we create a dataset consisting of crypto API
sequences with arguments. For that, we perform symbolic
analysis (i.e., a simple variant of symbolic execution) on
program traces extracted from Android applications, and pre-
serve the crypto ones. In order to capture the usage as
correct as possible, we also leverage the error reports from
CogniCryptSAST [6] to classify the API sequences. Moreover,
using these probabilistic models, we propose a new approach
to analyzing crypto API usage, which is based on the assump-
tion that the correct API entails a higher probability of an API
sequence while the misuse one does the opposite.
Several experiments have been conducted to evaluate our
approach. Firstly, we used our models to analyze the crypto
API usage,
including the usage detection and the misuse
location. The experimental results have shown that our models
can not only capture the correct usages, but also detect the
misuses. Secondly, we compared our models with existing
approaches using probabilistic models, which have demon-
strated that our models perform better than the ones without
symbolic execution, especially in misuse detection. Finally,
we also compared our models with a state-of-the-art
tool
CogniCryptSAST [6], and found that our models can detect
several new misuses, most of which are due to a wrong
argument.
The remainder of this paper is organized as follows. Sec-
tion II describes our approach, followed by the experimental
results in Section III. Section IV presents the related work,
followed by some concluding remarks in Section V.
II. APPROACH
In this section, we present our approach to analyzing crypto
API usages in Android applications. Figure 1 shows the
by class and method by method for all smali ﬁles contained
in an APK.
To do this, we ﬁrst use the static analysis of CDGDroid [19]
to identify all the instructions in a method and build its control-
ﬂow graph (CFG) with the instructions as nodes and the ﬁrst
instruction as the starting node. Then we traverse the CFG to
extract the possible traces for each reachable method.
The procedure of method traversing is given in Algorithm 1,
which takes a method m as input and returns a set trs of
possible program traces. The algorithm ﬁrst initializes the set
trs as an empty set (line 1) and puts into an empty set S the
initial state with the starting node of the method m, an empty
trace, and an empty set of backward edges (i.e., edges that
go back to some visited nodes) (lines 2-3). It then iterates the
set S state by state (lines 4-19). For each state, the algorithm
continues to append the current instruction ins into the current
trace tr and updates the current
instruction as its unique
successive one, once the out-degree of the current instruction
is 1 (i.e., only one successive instruction) and it is not a return
instruction (lines 6-8). Otherwise, the current instruction ins
is appended into the current trace tr (line 9). If ins is a
return one, then the current trace tr is added into the trace
set trs (line 10-11). Finally, for each successive instruction,
the algorithm checks whether the edge to it exists in the
current backward set or not (line 13). If not, the algorithm
makes a copy of the trace and the backward set, respectively
(lines 14-15). Moreover, if the successive instruction nxt has
been visited before, the edge to it would be recorded into the
backward set to avoid repeated looping (lines 16-17). After
that, the state with the successive instruction nxt, the new
trace ntr and the new backward set nbw is added into the
state set S, if the state does not exist in S (lines 18-19). Note
that, we traverse any loop at most once for any trace, which
is ensured by the backward edge checking.
Some APKs encapsulate the Crypto APIs for ease of use
or as a part of a common utility. Then when encrypting or
decrypting, the encapsulated APIs are called instead. Hence,
to address this situation, we consider inter-procedural analysis
for trace extraction. Moreover, we also found method calls in
such a situation would not be too deep, so we limit ourselves
with a depth d for method calls.
The inter-procedural analysis
is based on the intra-
procedural analysis (i.e., Algorithm 1), which is shown in
Algorithm 2. To start with, the algorithm invokes Algorithm 1
to extract the set trs of the intra-procedural traces for the
method m (line 1). If the current depth d is not larger than 0,
then the intra-procedural trace set trs is returned immediately
(line 2-3). Then the algorithm iterates on each trace tr in trs to
identify and expand the possible method calls (lines 5-12). And
for each instruction ins of the target trace tr, the algorithm
performs the following analysis (lines 7-11): if the instruction
ins calls a method m and its deﬁnition exists in the APK,
then the algorithm extracts a possible inter-procedural trace
set from the called method m by a recursive call with a depth
d − 1, and expands the called instruction ins by the traces
Fig. 1. Framework of Our Approach
framework of our approach, which consists of three tasks:
static analysis, model building and API usage analysis. The
ﬁrst task, namely, static analysis, is meant to extract program
traces from Android applications and then perform symbolic
analysis on these traces, yielding crypto API sequences. The
model building task aims to build probabilistic models based
on the dataset that is created from an Android application
dataset via the ﬁrst task. Finally, using the models built above,
the last task tries to analyze the crypto API sequences for a
given Android application, including the usage detection and
the misuse location. In what follows, we depict each task of
our approach in detail.
A. Static Analysis
This section is devoted to crypto API sequence extraction
from an Android application in the instruction level, which
consists of three steps: pre-processing, trace extraction, and
symbolic analysis.
Pre-Processing. Android applications are distributed in
markets in the form of APK. An APK is a compressed archive
of Dalvik bytecode for execution, resources, assets, certiﬁ-
cates, and an XML manifest ﬁle. Among them, the Dalvik
bytecode for execution, namely, the ﬁle named classes.dex1,
will be extracted for further analysis.
For ease of extracting traces, we leverage the disassembler
Apktool [17] to disassemble the dex ﬁles. After disassembling,
the dex ﬁles are converted to smali ﬁles, which give us the
readable code in the smali language. We use smali code,
instead of Java code, because the disassembling is lossless in
that the smali ﬁles support the full functionality of the original
dex ﬁles.
For simplicity, we focus on the API sequences that would
be possibly executed, so we use FlowDroid [18] to extract
the reachable methods for each APK. Moreover, to create
an API usage dataset, we also perform a state-of-the-art tool
CogniCryptSAST [6] on each APK to detect possible crypto
API misuses, which are used to classify the crypto API
sequences.
Trace Extraction. Generally, a smali ﬁle contains the
deﬁnition of a separate class, either a general class or an inner
class, in the Java source code. So we extract the traces class
1There may be several additional dex ﬁles with the name “classesi.dex” in
large APKs.
Algorithm 1: Trace_Extraction
input : a reachable method m
output: a possible trace set trs
1 trs ← ∅;
2 S ← ∅;
3 S.add((m.start, [],{}));
4 while S is not empty do
5
6
7
8
tr.append(ins);
ins ← m.cf g(ins);
(ins, tr, bw) ← pop S;
while |m.cf g(ins)| == 1 and ins is not return do
9
10
11
12
13
14
15
16
17
18
19
tr.append(ins);
if ins is return then
trs.add(tr);
for each nxt in m.cf g(ins) do
if (ins, nxt) /∈ bw then
ntr ← copy tr;
nbw ← copy bw;
if nxt ∈ ntr then
nbw.add((ins, nxt));
if (nxt, ntr, nbw) /∈ S then
S.add((nxt, ntr, nbw));
20 return trs
Algorithm 2: Trace_Extraction_inter
input : a reachable method m and a depth d
output: a possible trace set trs
1 trs ← Trace_Extraction(m);
2 if d ≤ 0 then
return trs;
3
4 inter trs ← {};
5 for each trace tr in trs do
6
7
8
9
temp trs ← {[]};
for each instruction ins in tr do
if ins calls m and m’s deﬁnition exists then
temp trs ← temp trs · {[begin ins]} ·
Trace_Extraction_inter(m, d − 1) ·
{[end ins]};
10
11
else
temp trs ← temp trs · {[ins]};
inter trs.add(temp trs);
12
13 return inter trs;
extracted from m via language product2 (lines 8-9), where
begin and end are used to mark the beginning and the ending
of a method call, respectively; otherwise, the instruction ins
remains the same (lines 10-11). Finally, the expanded trace set
is returned (line 13).
Symbolic Analysis. After the traces are extracted, we
perform symbol analysis, that is, a simple variant of symbolic
execution, on each trace and then choose to keep those APIs
that are interested, that is, related to crypto APIs.
The procedure of symbolic analysis is given in Algorithm 3,
2E.g., {[a, b], [c]} · {[d], [e, f ]} = {[a, b, d], [a, b, e, f ], [c, d], [c, e, f ]}.
Algorithm 3: Symbol_Analysis
input : a trace tr
output: an API sequence
1 env ← initialize parameters from declarations;
2 seq ← [];
3 for each inst in tr do
4
5
6
(opcode, args r, args w) ← parse inst;
for each arg in args r do
read arg from env;
7
8
9
10
11
12
13
14
syminst ← concat(opcode, args r);
if syminst calls m then
if m is related to crypto then
seq.append(syminst);
else
syminst ← return type(m);
for each arg in args w do
write arg as syminst into env;
15 return seq;
which takes a trace tr as input and returns a possibly empty
API sequence. The algorithm starts with an environment env
that are constructed from the declarations of the corresponding
methods where the trace tr is extracted (line 1) and an
empty sequence seq of APIs (line 2). Then the algorithm
iterates on each instruction inst in the target
trace tr to
update the instruction and the environment and identify the
interesting APIs (lines 3-14). Speciﬁcally, for each instruction
inst, the algorithm ﬁrst parses it into a triple consisting of
the opcode opcode, those arguments args r that inst would
read from, and those arguments args w that inst would
write into (line 4). There are 222 opcodes in total
listed
in Android Dalvik-bytecode list [20], and for simplicity, we
group them into several categories according to their semantics
and arguments. Next, the algorithm updates each argument in
args r with respect to the environment env (lines 5-6) and
constructs a symbolic expression syminst from the opcode
and the updated arguments (line 7). The interesting case is that
a method m is called by the current instruction (line 8). If m
is related to crypto APIs, then it is appended into the current
sequence seq (lines 9-10). Otherwise, the symbolic expression
syminst is replaced by the return type of m (lines 11-12).
This means that symbolic execution is only performed on the
instructions or expressions that are related to crypto APIs,
while the others are abstracted as their types, which is mainly
to avoid user-deﬁned methods or complex expressions. Finally,
the collected API sequence seq is returned (line 15).
Let us consider the snippet code shown in Figure 2.
The API sequence extracted from this snippet code is
given in Table I, which are reformatted for easy under-
standing, that is, erasing interface information and reorder-
ing method names and arguments. For example,
in our
dataset, the last API of Table I is “invoke-virtual { invoke-
static { “AES/CBC/PKCS5Padding” }, Ljavax/crypto/Cipher;-
>getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher;, [B },
partial method sequence m1, m2, . . . , mt and being in state qi
at time t given the model λ:
αi,t = P (m1, m2, . . . , mt, qt = qi | λ)
and the backward probability βi,t is deﬁned as the probability
of seeing the ending partial sequence mt+1, . . . , mT given
state qi at time t and the model λ:
βi,t = P (mt+1, . . . , mT | qt = qi, λ)
where qt denotes the hidden state at time t. Based on the
forward and backward probabilities, the probability of an API
sequence s = m1, m2, . . . , mT can be computed by any
position t in it:
K(cid:88)
i=1
P (s) =
αi,tβi,t
N-Gram Model. An n-gram model (NGM) is a type of
probabilistic language model for predicting the next item in
such a sequence in the form of a (n-1)-order Markov model. N-
gram models are now widely used in probability, communica-
tion theory, computational linguistics, computational biology,
and data compression. And there exist some research work on
API usage analysis that uses n-gram [11]–[13].
In an n-gram model for API usage, the probability of an
API sequence is estimated by generating the sequence word by
word3; and the probability of each word in a sequence is only
determined by the conditional probabilities of the previous
n − 1 tokens. Given a sequence s = m1, m2, m3, . . . , mT ,
its probability is estimated as:
T(cid:89)
P (s) =
P (mi|hi)
i=1
where hi denotes the history sequence mi−n+1, . . . , mi−1 of
size at most n − 1. For example, if n = 3 (i.e., using a 3-
gram model) and T = 4, then the probability of the sequence
s = m1, m2, m3, m4 is
P (s) = P (m1)P (m2|m1)P (m3|m1, m2)P (m4|m2, m3)
We use the procedure presented in [13] to build our n-gram
model.
C. API Usage Analysis
In this section, we present how to analyze a crypto API
sequence, including the usage detection and the misuse loca-
tion. The ﬁrst task aims to detect whether a given crypto API
sequence is a correct usage or not. If not, then the second
task would locate the possible misused APIs. Both tasks are
based on the assumption that the correct API could higher the
probability of an API sequence while the misused one does
the opposite. The approach works for both HMM and NGM,
so we do not specify the model in the following.
The ﬁrst task is intuitive and simple: just check whether
the probability of a given API sequence is higher than the
3In our situation, words are crypto APIs with some symbolic arguments or
types.
Fig. 2. Snippet Code from an APK
Ljavax/crypto/Cipher;->doFinal([B)[B”. The symbol expres-
sions show that both API orders and API arguments are
collected.
Two different traces from an identity method could yield
two API sequences of the same, which should be the same
usage, so only one sequence is collected. However, if traces
are from different methods, then all the copies are retained, as
they are clearly different usages.
As a notice, to make it easy to follow, we present trace
extraction and symbolic analysis separately. But
this way
could give rise to inefﬁcient algorithms to use in practice.
In fact, trace extraction and symbolic analysis can be carried
out together: just let states in Algorithm 1 maintain the API
sequences directly as well as environments.
B. Model Building
In this section, we use hidden Markov model [21] and n-
gram model [22] to build our model, respectively.
Hidden Markov Model. Hidden Markov model (HMM)
is a generative probabilistic model that describes the process
of generating sequences, and has been applied in speech
recognition, speech synthesis, machine translation, and so on.
Recently, HMM is used to analyze API usages as well [7]–
[10].
A HMM for API usage [9] can be formalized as a 5-
Tuple (Q, V, π, A, B), where Q is a set of K hidden states,
V is a set of M interesting APIs (in our case, APIs are
associated with some symbolic arguments or types), π is the
initial state distribution specifying that each state qi has a
probability πi to be selected as the starting state of the model,
A is the transition matrix of size K × K specifying the
state transition probabilities (e.g., ai,j is the probability that
the model changes from state qi to state qj), and B is the
generating matrix of size K × M specifying that the emission
probabilities of each state (e.g., bi,n is the probability to call
method mn when the model is in state qi). As seen, the HMM
for API usage has K + K 2 + K × M parameters.
We employ a modiﬁed version of Baum-Welch algorithm
presented in [9] to train our HMM for API usage, wherein
forward and backward probabilities are used. In detail, the
forward probability αi,t is deﬁned as the probability of seeing
CRYPTO API SEQUENCE FOR THE SNIPPET CODE
TABLE I
LN
5
7
12
14
15
ID
se1