---
## Page 82
熊猫爱中国www.xiongmaoi.com
熊猫爱中实现这一点的一种自然方式是使用混入类（mixin class）：一方面你将拥有一个包含单元
① 作者是OpenStack中监控项目 Ceilometer的前项目技术主管（Project Technical Lead）。——译者注
测试的类，另一方面这个类还会包含对特定驱动用法的设置。
元测试，
的存储 API保存和提取数据。这种情况下就需要对每个实现了存储 API 的驱动调用一类单
并将自己注册成为一个驱动。Ceilometer可以按需要加载被配置的存储驱动，并且利用实现
使用。Ceilometer中提供了一个调用存储API的抽象类。任何驱动都可以实现这个抽象类，
个测试集。
对一组不同的对象运行同一个错误处理测试去触发这个错误，又或者想对不同的驱动执行整
6.4
总是按照预期行事。
题。我们可以确定代码返回的是正确的值，或在每种情况下抛出正确的异常，总之确保代码
class TestMongoDB(TestDatabase, MongoDBBaseTest):
class TestDatabase(unittest.TestCase):
class MongoDBBaseTest (unittest.TestCase) :
class MySQLBaseTest(unittest.TestCase):
import unittest
在进行单元测试时，对某个对象的不同版本运行一组测试是较常见的需求。你也可能想
使用模拟可以很方便地模拟任何问题，如 Web 服务器返回 404错误，或者发生网络问
场景测试
def test_connected(self):
def setUp(self):
，以确保它们按照调用者的期望执行。
def setUp(self):
self.assertTrue(self.connection.is_connected())
self.connection = connect_to_mysql()
self.connection = connect_to_mongodb()
本电子书仅限学习交流使用，请勿用于商业用途
6.4场景测试
15
---
## Page 83
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
示例6.10testscenarios的基本用法
testscenarios 重写了示例6.9的部分代码来说明6.3节中介绍过的模拟，具体见示例6.10。
testscenarios）。它提供了一种简单的方式针对一组实时生成的不同场景运行类测试。这里使用
9
class TestPythonErrorCode(testscenarios.TestWithScenarios)
更好的技术是有的，可以使用testscenarios包（https://pypi.python.org/pypi/
def get_fake_get(status_code, content):
def is_python_still_a_programming_language():
class WhereIsPythonError(Exception):
import testscenarios
import requests
import mock
然而，从长期维护的角度看，这种方法的实用性和可扩展性都不好。
class TestMySQL(TestDatabase, MySQLBaseTest):
pass
第6章
scenarios=[
return fake_get
def fake_get(url):
m.status_code = status_code
m=mock.Mock()
raise WhereIsPythonError("Something bad happened")
r = requests.get("http://python.org")
pass
pass
m.content=content
return m
('Not found', dict(status=404)),
('Server error',dict(status=500)),
('client error', dict(status=400))
单元测试
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 84
熊猫爱中国www.xiongmaoi.com
熊猫
示例6.11使用testscenarios测试驱动
测试，而不是为每个测试存储一个单独的值作为属性。具体如示例6.11所示。
一个参数，并将针对此场景的属性字典作为第二个参数。
里定义了三个场景。
很容易联想到另一种使用方式：可以实例化一个特定的驱动并针对它运行这个类的所有
如上所示，为构建一个场景列表，我们需要的只是一个元组列表，其将场景名称作为第
class TestPythonErrorCode(testscenarios.TestWithScenarios):
From myapp import storage
import testscenarios
尽管看上去只定义了一个测试，但是testscenarios 会运行这个测试三次，因为这
OK
Ran 3 tests in 0.001s
test _python_status_code_handling (test_scenario.TestPythonErrorCode) ... ok
test_ python_ status_code_handling (test_scenario.TestPythonErrorCode) ...
% python -m unittest -v test_scenario
scenarios=[
def test_python_status_code_handling(self):
('File′, dict(driver=storage.Filestorage())),
('MongoDB', dict(driver=storage.MongoDBStorage()))
with mock.patch('requests.get',
('SQL', dict(driver=storage.SQLStorage())),
 self.assertRaises(WhereIsPythonError,
get_fake_get(
本电子书仅限学习交流使用，请勿用于商业用途
1
is_python_still_a_programming_language)
self.status,
1---
6.4场景测试
ok
L
---
## Page 85
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
①甚至可以支持来自不同源程序或语言的测试结果。
示例6.12使用 subunit2pyunit
其他易读格式的工具，如示例6.12所示。
接再现它的输出结果实在是没什么意义。不过，subunit 还支持一组将其二进制流转换为
者对测试的运行进行记录或归档等。
（streaming protocol）的一个 Python 模块。它支持很多有意思的功能，如聚合测试结果或
的工具只是将结果输出到 stdout，即标准输出，但这对测试结果的解析或分析并不方便。
6.5
这里之所以不需要使用前面示例中使用的基类unittest.TestCase，是因为 test-
注意
$ python -m subunit.run test_scenario
这条命令的输出是二进制数据，所以除非有能力直接阅读 subunit 协议，否则在这里直
使用subunit运行测试非常简单：
subunit（htps://pypi.python.org/pypi/python-subunit）是用来为测试结果提供流协议
在执行大量测试时，按它们被运行的情况进行分析是很有用的。类似 nosetests 这样
test_scenario.TestPythonErrorCode.test _python_status_code_handling(Client
test _scenario.TestPythonErrorCode,test _python_status_code _handling(Not 
test_scenario.TestPythonErrorCode.test_ python_status_code_handling(Not
测试序列与并行
第6章
found)
error)
def test_fetch(self):
self.assertEqual(self.driver.fetch('foo'), 'bar')
self.assertTrue(self.driver.store(f'foo': 'bar')))
单元测试
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 86
熊猫爱中国www.xiongmaoi.com
熊猫
subunit-ls.
爱中国
他值得一提的工具还有 subunit2csv、subunit2gtk和 subunit2junitxml。
test_request.TestPython.test_bad _status_code
$ python -m subunit,run discover --list | subunit-ls --exists
也可以通过传入参数--list只列出测试但不运行。要查看这一结果，可以使用
这样的结果就容易理解了。你应该可以认出这个关于场景测试的测试集来自6.4节。其
subunit 还可以通过传入discover 参数支持自动发现哪个测试要运行。
OK
Ran 3 tests in 0.061s
test_scenario.TestPythonErrorCode.test_python_status_code_handling(Server
test_scenario.TestPythonErrorCode.test_python_status_code_handling (Server
test_scenario.TestPythonErrorCode.test _python_status_code_handling (Not
$ python -m subunit.run discover I subunit2pyunit 
test_scenario.TestPythonErrorCode.test_python_status_code_handling(Client
test_scenario.TestPythonErrorCode.test_python_status_code_handling(Client
OK
Ran 3 tests in 0.061s
test_scenario.TestPythonErrorCode.test _python_status_code_handling(Server
test_scenario.TestPythonErrorCode.test_python_status_code_handling(Server
error)
error)
error）...ok
error)
found）...ok
found）
error)...ok
error）
error）...ok
本电子书仅限学习交流使用，请勿用于商业用途
6.5测试序列与并行
---
## Page 87
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
的.testr.conf 文件（见示例6.13）来实现。
要运行的测试，以便它可以自己去加载测试结果。这可以通过编辑项目的根目录中
来操作了。
是解决这一问题，它提供了testr程序，可以用来处理要运行的测试数据库。
列是非常有用的。testrepository 包（htps://pypi.python.org/pypi/testrepository）目的就
80
可以使用--load-list 选项指定要运行的测试的清单而不是运行所有的测试。
提示
显然，每次手工处理要运行的测试是很烦人的。因此，应该“教会”testr 如何执行
一旦 subunit 的测试流被运行并加载到 testrepository，接下来就很容易使用 testr 命令
runs=1
$ testr stats
test_python_status_code_handling(Client error) 0.000
test_python_status_code_handling(Server error) 0.000
test _python_status_code_handling (Not found)
$ testr
PASSED (id=0)
Ran 3 tests in 0.001s
PASSED(id=0)
Ran 4 tests in 0.001s
% python -m subunit.run test_scenario I testr load
Stestr init
在大型应用程序中，测试用例的数量可能会多到难以应付，因此让程序处理测试结果序
test_scenario.TestPythonErrorCode.test_python_status_code_handling
test_request.TestPython.test_python_is_not
test_request.TestPython.test_python_is
 test_request.TestPython.test_ioerror
Test id
$testr last
PASSED (id=0)
$ testr failing
$ touch.testr.conf
第6章单元测试
slowest
1
本电子书仅限学习交流使用，请勿用于商业用途
--
------
1
一
---
-------
Runtime (s)
000'0
-----------
---
## Page 88
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
你将要开发和发布的软件的质量。利用这些有力的工具能够节省很多时间。
更多可能，而本节只是一个大概介绍。熟悉这些工具是非常值得的，因为测试会极大地影响
等。可以通过加入--concurrency 标志设置进程的数目。
进程运行测试的每个子列表。默认情况下，子列表的数量与当前使用的机器的CPU 数目相
示例6.14 运行 testr run --parallel
可轻松实现，如示例6.14所示。并行运行测试可以极大地加速测试过程。
载到testrepository中并执行。
③列出测试要运行的命令。
②加载测试列表要运行的命令。
①执行testrrun时要运行的命令。
示例6.13
如果习惯用nosetests，testr run 现在是等效的命令。
注意
第一行的 test_command 是最关键的。现在只需要运行 testr run 就可以将测试加
可以想象，类似 subunit 和 testrepository 这样的工具将为测试效率的提升带来
$ testr run --parallel --concurrency=2
在后台，testr运行测试列出操作，然后将测试列表分成几个子列表，并分别创建Python
running=python -m subunit.run discover
S testr run --parallel
另外两个选项可以支持测试的并行运行。通过给 testr run 加上--prallel 选项即
PASSED (id=7,skips=3)
Ran 26 (+10) tests in 0.029s (-0.001s)
running=python -m subunit.run discover
running=python -m subunit.run discover
running=python -m subunit.run discover
test_list_option=--list 
running=python -m subunit.run discover
test_id_option=--load-list SIDFILE ②
test_command=python -m subunit.run discover . $LISTOPT SIDOPTION O
[DEFAULT]
.testr.conf 文件
本电子书仅限学习交流使用，请勿用于商业用途
--load-list /tmp/tmpTejc5J