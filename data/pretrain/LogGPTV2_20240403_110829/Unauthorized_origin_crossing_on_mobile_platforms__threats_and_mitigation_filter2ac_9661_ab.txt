App
Apps
Web
Figure 1 Mobile communication channels 
Here we elaborate how those channels work: 
Intent.  An intent is an inter-process message delivered 
through  an  IPC.    It  is  a  channel  only  supported  by  Android. 
Through  intent  messaging,  one  app  on  Android  can  activate  the 
background  Services,  Activities  (application  components  with 
user interfaces) or Broadcast-Receivers of another app, as well as 
the Activities/Services of its own. Intent invocation is conducted 
through  APIs  such  as  startActivity,  startActivityForResult,  and 
startService. An app developer can specify a set of intents the app 
can  receive  from  other  apps  in  its  manifest  file.  However,  the 
intent channel never labels the origin of each message (i.e., who 
created it). This causes the problem we elaborate in Section 3.2.1.  
  URL scheme.  As discussed before, scheme is supported 
by both Android and iOS, which allows an app or website to use a 
URL  to  invoke  another  app  (on  iOS)  or  its  Activity/Service 
components (on Android) that claim the scheme of that URL. For 
example, the URL “youtube://watch?token=xxx” can be  used to 
start the YouTube app to play the video “xxx”. When such a URL 
is loaded in the mobile browser or a WebView instance, the OS 
will launch the target app with this URL as input. In addition, an 
app  can  also  invoke  other  apps  through  the  schemes  they 
registered.  On  Android,  scheme  invocation  is  implemented 
through the intent channel: a scheme URL is wrapped in an intent 
instance, and invoked by an app through the same set of APIs that 
also serve intent messages, such as startActivity.  On iOS, this is 
done through openURL API. Again, the OSes do not mediate the 
scheme-based invocations using origins.  
  Web-accessing utility classes. Mobile platforms provide 
several utility classes for apps to communicate with the web. We 
call  them  web-accessing  utility  classes.  For  example,  both 
Android and iOS support the WebView class (called UIWebView 
on  iOS),  which  an  app  can  embed  for  displaying  webpages.  An 
app  can  interact  with  its  WebView  instance  through  a  set  of 
method  calls  or  callbacks.  For  example,  it  can  call  loadURL  on 
Android (loadRequest on iOS) with a URL to load a page into the 
instance; it can also register events, like URL loading, to inspect 
every  URL  its  WebView  instance  processes  through  a  callback 
shouldStartLoadWithRequest (iOS) or shouldOverrideUrlLoading 
(Android).  In  addition,  the  mobile  platforms  provide  utility 
classes for an app to directly talk to a web server without loading 
its  web  content.  HttpClient  [36]  or  HttpURLConnection  [37] 
(Android)  and  NSURLConnection  [38]  [39]  (iOS)  are  such 
examples.  We  call  those  classes  (for  direct  communication  with 
web servers) HttpClient classes. Origin-based protection is not in 
the picture here: e.g., a WebView/HttpClient instance never labels 
which app is the origin of an HTTP request. 
3.  ATTACKS 
In  this  section,  we  elaborate  our  study  on  unauthorized  origin 
crossing on mobile OSes. What we want to understand here are 
whether the ways real-world apps utilize those channels for cross-
origin  communications  indeed  expose  them  to  attackers,  and 
whether  those  apps have proper means to mitigate such a threat 
and  safeguard  their  operations  over  those  channels.  For  this 
purpose,  we  systematically  analyzed  high-profile  apps  on  both 
Android  and  iOS,  including  the  official  apps  of  Facebook  and 
Dropbox and their SDKs, and the official Google Plus and Yelp 
app.  Note  that  these  SDKs  are  very  popular.  They  have  been 
integrated into many real-world apps. Problems discovered there 
may  have  a  broad  impact.  In  our  research,  we  looked  into  how 
those  apps  use  the  aforementioned  cross-origin  channels  to 
interact  with  other  apps,  or  the  web.  The  study  reveals  the 
pervasive  presence  of 
cross-origin 
vulnerabilities, allowing an unauthorized party to activate an app 
remotely  with  arbitrary 
internal 
Activities, steal user’s authentication credentials and even directly 
manipulate its operations.  
Such discoveries were made through an in-depth analysis on the 
code and operations of those apps. Specifically, for Android apps, 
we  decompiled  the  binary  code  of  their  latest  versions  using 
apktool  [33]  and  AndroChef  Java  Decompiler  [34]  in  order  to 
analyze their program logic related to the mobile channels. When 
it comes to iOS apps, decompiling their executables is often hard. 
Therefore,  we  resorted  to  a  black-box  traffic  analysis  to 
understand those apps’ interactions with other parties (apps, web 
services, etc.). We also studied the SDKs provided by Facebook 
and  Dropbox,  whose  source  code  is  publically  available.  In  the 
rest  of  the  section,  we  report  our  findings.  The  demos  of  our 
exploits  on  those  apps  and  other  supplementary  materials  are 
posted on the web [31]. 
input  parameters,  call 
subtle  yet 
serious 
its 
3.1  Adversary Model 
Our  adversary  model  describes  practical  threats  to  different 
mobile platforms. On Android, we consider an adversary who can 
trick  a  user  into  installing  a  malicious  app  on  her  device.  That 
app,  however,  may  not  have  any  permission  considered  to  be 
dangerous by Android. Also, threats to Android can come directly 
from the web, when the victim uses her mobile app or browser to 
view malicious web content posted by the adversary on a website. 
On  iOS,  we  only  consider  this  remote  threat  (from  a  malicious 
website),  not  the  malicious  app,  given  the  fact  that  Apple’s 
vetting  process  on  iOS  apps  is  more  restrictive  than  that  of 
Android apps, and few malicious apps have been reported so far.  
Note  that  we  treated  Android  and  iOS  differently  to  respect  the 
realistic  threats  those  systems  face:  we  could  have  found  more 
637login  Activity  before  proceeding  with 
issues  had  we  assumed  the  presence  of  malicious  apps  on  iOS. 
Finally, we do not consider an adversary with OS-level controls.  
3.2  Exploiting the Intent Channel 
The  security  implication  of  the  intent  channel  on  Android  has 
been  studied  in  prior  research  [10][27].  All  existing  work, 
however, focuses on how such a channel can be leveraged by a 
malicious  app  to  invoke  a  legitimate  app’s  Activities  that  are 
accidentally made public by the app’s developer.  In our research, 
we  found  that  even  the  private  Activities  not  exposed  to  the 
public, which is meant to be called only by the app itself, can be 
triggered by an app from an unauthorized origin.  This problem 
has  a  serious  consequence,  letting  the  malicious  app  gain  great 
control  of  the  victim  app.  We  discovered  this  vulnerability  on 
both  the  Facebook  app  and  the  Dropbox  app.    Here  we  use  the 
Dropbox app as an example to explain where the problem is. 
3.2.1  Next Intent  (Android) 
An  Android  app  can  have  two  types  of  Activities,  private  or 
public. By default, an Activity is private, meaning that only the 
code inside the app can invoke it. When the app developer sets the 
“exported” property of the Activity to true, or she declares at least 
one intent for the Activity in the manifest of the app, the Activity 
becomes public, in which case other apps can invoke the Activity 
with an intent instance as an argument. 
Our analysis on the Dropbox app reveals that the app exposes a 
few  Activities,  such  as  login,  which  is  meant  to  be  public.    An 
interesting observation is that when any of its public Activities are 
invoked  by  an  intent  instance,  the  Activity  first  needs  to  check 
whether the user is in a logged-in status. If not, it redirects him to 
the 
task. 
Specifically, the Activity creates a new intent instance, in which 
the current intent, the one it receives from another app, is saved 
under 
the  key  “com.dropbox.activity.extra.NEXT_INTENT” 
(called “NEXT_INTENT” here). The new intent instance is then 
issued by the app itself to invoke LoginOrNewAcctActivity (the 
login  Activity).  Once  the  user  completes  her  login,  the  login 
Activity 
from 
“NEXT_INTENT”,  and  uses  it  to  invoke  the  unfinished  public 
Activity to fulfill its task. 
The cross-origin exploit. It turns out that this next-intent feature 
can be exploited by a malicious app to cross origins and invoke 
the  Dropbox  app’s  private  Activity.  Since  the  login  Activity  is 
public, a malicious app can trigger it with an intent instance, in 
which  the  attacker  puts  another  intent  instance  under  the 
“NEXT_INTENT”  key.  The  second  instance  points  to  a  private 
Activity of the Dropbox app.  This login intent will not be noticed 
by the user if she is already in the logged-in status, and cause little 
suspicion if she is not, simply because it is the authentic Dropbox 
app that asks the user to log in. Either way, once the login is done, 
LoginOrNewAcctActivity  retrieves  the  intent  content  under  the 
“NEXT_INTENT”  key  and  use  it  to  call  the  startActivity  API. 
Since startActivity is now invoked by the Dropbox app itself, all 
of  its  Activities,  including  those  private  ones,  can  be  executed, 
even  though  the  next-intent  actually  comes  from  a  different 
origin, the malicious app. The root cause of this problem is that 
the  startActivity  API  never  checks  (and  also  has  no  means  to 
check) the provenance of the intent under the “NEXT_INTENT” 
key, due to the lack of origin-based protection on the mobile OS. 
In the absence of the origin information (here, the app creating the 
intent),  even  an  app’s  private  Activity  can  be  exposed  to 
unauthorized parties.  
its  own 
retrieves 
instance 
original 
intent 
the 
to 
the 
requests 
the  user 
the  origin 
injected  can  make  arbitrary  AJAX 
to  run  LoggedOutWebViewActivity  with 
The problem goes beyond a single app. In the Facebook app, we 
discovered  the  same  problem  in  a  public  Activity  called 
UriAuthHandler. The Facebook app also checks the login status, 
and  directs 
login  Activity,  and  uses 
“CALLING_INTENT”  (equivalent  to  “NEXT_INTENT”)  as  a 
key  to  store  the  current  intent  instance.  This  channel  is  equally 
vulnerable  and  can  be  abused  in  the  same way, as found in our 
study.  We  suspect  that  other  apps  with  this  type  of  next-intent 
feature are also subject to the same exploit. 
Attacks  and  consequences.  Once 
is  crossed 
illegitimately,  the  door  is  open  to  all  kinds  of  abuses.  In  our 
research, we implemented two attacks (one against the Dropbox 
app,  another  one  against  the  Facebook  app)  to  demonstrate  the 
serious security consequences of the problem.  
Our  attack  on  the  Facebook  app  leverages  a  private  Activity 
LoggedOutWebViewActivity.  The  Activity  takes  a  URL  as  an 
input parameter and loads the content pointed by the URL into a 
WebView instance. What can happen here is that a malicious app 
running on the same device can drop a Javascript file onto its SD 
card  (Secure  Digital  memory  card)  and  exploit  the  next-intent 
feature 
the  URL 
pointing to that Javascript file. Since the SD card is viewed as a 
local storage by Android, the script is allowed to access contents 
from  all  Internet  domains  [32].  Specifically  in  our  attack,  the 
script 
to 
facebook.com and read the contents of the responses. Given that 
all  such  requests  carry  the  user’s  Facebook  cookie,  this  cross-
origin  scripting  ends  up  allowing  the  adversary  to  perform 
arbitrary operations on the user’s account, and obtain all private 
data.  
For 
the  Dropbox  app,  we  exploited  a  private  Activity 
VideoPlayerActivity,  which  has  an  input  parameter  “EXTRA_ 
METADATA_URL”  that  specifies  a  URL  from  which  to  fetch 
the  metadata  for  a  video  file.  In  a  normal  situation,  this  URL 
points  to  a  file  kept  by  dropbox.com.  However,  our  next-intent 
exploit enables a malicious app to set the URL to arbitrary web 
domain,  such  as  “http://attacker.com”.  When  the  Dropbox  app 
makes a request with that URL, it always assumes the recipient to 
be  dropbox.com  and  attaches  to  the  request  an  authentication 
header,  as  opposed  to  applying  the  conventional  origin-based 
cookie  policy.  Since  right  now,  EXTRA_METADATA_URL 
points to “http://attacker.com”, the adversary gets the header and 
can use it to gain a full access to the user’s Dropbox account.  
Vendor  responses.  Fixing  this  problem  turns  out  to  be  much 
more complicated than it appears to be. Specifically, the Dropbox 
security  team  told  us  they  were  “working  on  changing  the 
architecture in our Android app to make that API secure”, but the 
next-intent  feature  is  “unfortunately  also  very  useful  for  us”. 
Facebook also said that this problem “will take some time to fix”. 
As an acknowledgement to the importance of our work, Facebook 
awarded us $5000 bounty for finding this vulnerability, which we 
donated to charity. Dropbox also awarded us 100GB free storage 
for  each  author,  and  included  our names on their special thanks 
page.    The  details  of  those  software  vendors’  responses  can  be 
found  here  [31].  From  our  communications  with  the  vendors,  it 
can  be  seen  that  addressing  this  next-intent  problem  from  the 
developer side alone can be hard. In Section 4, we show how a 
well-thought-out  OS-level  support  can  make  this  type  of  flaws 
more convenient to fix.  
6383.3  Abusing the Scheme Channel 
As  discussed  in  Section  2,  scheme  is  an  important  cross-origin 
channel  supported  by  both  Android  and  iOS.  Through  this 
channel, an app on those OSes can be invoked by a URL (with the 
scheme the app claims) from another app or from a webpage in a 
WebView  instance  or  a  browser  (see    in  Section  2).    In  our 
research,  we  found  that  this  channel  can  be  easily  abused  for 
unauthorized origin crossing, enabling a malicious app to acquire 
a  user’s  authentication  token  with  Facebook  or  perform  a  login 
CSRF on iOS, as described below.  
3.3.1  Fbconnect  (Android) 
Facebook provides a Dialog mechanism [35] through its apps and 
SDKs  for  both  Android  and  iOS.  Using  the  mechanism,  an  app 
can  send  through  the  Facebook  official  app  a  Dialog  request  to 
query  the  Facebook  server  for  sensitive  user  data  (e.g.,  access 
token)  or  operate  on  the  user’s  account  (e.g.,  sharing  a  post). 
Among  all  the  arguments  carried  by  the  Dialog  request  are 
client_id,  the  ID  assigned  to  the  sender  app  by  Facebook,  and 
redirect_uri,  which  is  set  to  “fbconnect://success”.    In  the  case 
that  the  user’s  access  token  is  requested,  the  Facebook  server 
displays a dialog within Facebook app’s WebView instance to ask 
for the user’s consent, and upon receiving it, the server redirects 
the  WebView  instance  to  “fbconnect://success#...”,  where  the 
secret  token  is  attached  to  the  “…”  part  of  the  message.  This 
token  is  then  extracted  by  the  Facebook  app,  which  later 
dispatches  it  to  the  target  app  (i.e.,  the  sender  of  the  Dialog 