### Slide: 1
**MetaPhish**
- **Val Smith** (PI: [EMAIL])
- **Colin Ames** (PI: [EMAIL])
- **David Kerb** (PI: [EMAIL])

### Slide: 2
**Bios: Val Smith**
- **Affiliations:**
  - Attack Research
  - Metasploit
- **Work:**
  - Attack Techniques Research
  - Penetration Tester / Exploit Developer
  - Reverse Engineer
  - Malware Analyst
- **Previous Talks:**
  - Exploiting Malware and VM Detection
  - Kernel Mode De-obfuscation of Malware
  - Data Mining Malware Collections
  - Tactical Exploitation
  - Post-Exploitation
  - Analysis of Foreign Web Attacks

### Slide: 3
**Overview**
- Spear Phishing for Penetration Testing
- Developing a Framework on top of Metasploit
- Phile Phishing
- Web Phishing
- MSF Automation
- Abusing TOR
- Integrating All Components

### Slide: 4
**Spear-Phishing**
- Current primary method of infiltration
- Remote exploits are less common
- Blended attacks combining:
  - Web-based attacks
  - File format vulnerabilities
  - Malware
  - Social Engineering

### Slide: 5
**Spear-Phishing**
- How often do you include spear-phishing in your penetration tests?
- Do clients allow this type of testing?

### Slide: 6
**Spear-Phishing**
- You may be missing a critical attack vector!

### Slide: 7
**Spear-Phishing**
- Attackers use targeted client-side methods
- Prevalence of web kits (e.g., Mpack, Tornado, Adpack, LuckySploit, Zunker)
  - Unknown contents
  - Uncontrolled environment
- File format exploits
  - Sometimes integrated into Metasploit and Core
  - Similar issues to web kits
  - Limited public knowledge of file format reverse engineering
- Solution: Reverse engineer attackers' techniques to make them reliable

### Slide: 8
**Work Flow**
- Thoroughly reconnoiter the target
- Build a "legend" for your attack
  - Identify plausible documents from the target
- Develop your attack vector
  - Infect PDFs
  - Create a malicious website
- Send the lure to the target

### Slide: 9
**Work Flow**
- Set up a server-side exploitation system capable of handling multiple clients
- Receive incoming access
  - Design to bypass firewalls
  - Detect proxies, HIDS/HFW, and egress ports
- Inject into pre-authorized browsers
- Automate post-exploitation actions
  - Scripts to grab passwords, install backdoors, enumerate information, capture tokens, and manipulate logs
- Requires a comprehensive framework

### Slide: 10
**Why a Framework?**

### Slide: 11
**Why a Framework?**
- Client-side attacks are the new paradigm
- Phishing facilitates client-side attack surfaces
- Most client-side tools are manual or standalone
- Core Impact is expensive
- Penetration testers need:
  - Standardizable
  - Controllable
  - Automatable
  - Customizable methods
- Better targeting support

### Slide: 12
**Targeting?**

### Slide: 13
**Targeting**
- Significantly increases the chances of success
- Heavily influenced by social engineering
- Requires extensive reconnaissance
- The more knowledge about the target, the better
- Applies tactical exploitation concepts
- Use the target's public files against them

### Slide: 14
**Targeting**
- Generic File Hunting / File Harvesting
- Creative googling for documents
- Extract valuable details from documents
- Deep dive into metadata for additional insights

### Slide: 15
**Targeting**
- Understand the target's infrastructure
  - Apply tactical exploitation topics
  - Enumerate the target's home or actual networks
    - Beyond just the hosting company
  - Look for leaked proxy log analysis results
    - Provides:
      - Client applications
      - Update frequencies
      - Anti-Virus configurations
      - Outbound communication details
      - Internal IP addresses

### Slide: 16-23
[These slides are currently blank. Consider adding content or removing them if not needed.]

### Slide: 24
**PHILE PHISHING**

### Slide: 25
**Target File Selection and Infection**
- Search the web for the target and available files
  - Newsletters
  - Conference announcements
  - Recent documents
  - Leverage relationships
- If the target partners with another organization, steal and infect their documents
- Goal: Get the target to click
- Script to automate PDF acquisition

### Slide: 26
**Target File Selection and Infection**
- How to select a file for infection?
  - PDFs are perceived as safe
  - Targets trust PDFs from their own organization
  - Choose topics of interest to the target
  - Select widely circulated files
    - Newsletters
    - Company forms and instructions
    - "Snow day" and activity announcements

### Slide: 27
**What’s wrong with this picture? What shouldn’t we have done?**
- Find file targets to infect

### Slide: 28
**Example Target: Technical Organization in the Chinese Government**
- Candidate PDF freely provided by the target

### Slide: 29
**Who publishes this newsletter?**
- Target for your attack legend
- Spoof email from this person?

### Slide: 30
**Gather target email addresses to send infected files to/from**

### Slide: 31
**Gather sites with plausible relationships to send infected files to**

### Slide: 32
**File Infection**
- Why PDFs?
  - JavaScript
  - Code execution
  - Nested PDFs
  - Exploits/vulnerabilities in readers
  - Dynamic content
- How to infect PDFs?
  - Incremental updates
  - Tedious to do manually
  - Colin RE’d the PDF file format

### Slide: 33
**File Infection**
- **Adobe_basic_social_engineering.rb** Ruby script for infection
  - Metasploit module
  - Select a PDF to infect
  - Pass file to module
  - Output infected PDF
  - Other tools generate blank files

### Slide: 34
**PDF Defiler**
- Demo PDF Parser
- Demo PDF Infector

### Slide: 35
**Web Phishing**
- Detailed mechanics of how to perform web phishing

### Slide: 36
**Web Phishing**
- Direct targets to your website
- Enumerate the target using a web application
- Socially engineer the target to believe everything is "ok"
- Execute code on the target via SE, applet, exploit, etc.
- Handle incoming access from the target
- Automate post-exploitation activities
- Use a reliable framework

### Slide: 37
**Web Phishing Components**
- **Target Sieve:**
  - OS detection
  - IP detection
  - Browser detection
  - Decision making
- Decloaking
- Signed Java Applets
  - Fake certificate to the target's organization
- Social Engineering Attack
- Obfuscation

### Slide: 38
**Web Phishing - Sieve**
- Examples provided
- Could be implemented in various ways
- **genHeader()**: Generate header, noscript to test JS
- **ipCheck()**: Get target IP and compare to scope
- **javaCheck()**: Verify Java is enabled
- **osDetect()**: Determine the operating system type
- **browserDetect()**: Determine the browser in use
- **jsDecloakIP()**: Get natted/internal IP using JavaScript
- **japdip()**: Get natted/internal IP using Java applet
- **Logger()**: Log captured information to a file

### Slide: 39
**Generate an HTTP Page Header**

### Slide: 40
**Web Phishing - Sieve**
```php
function genHeader() {
    echo "<html>";
    echo "<head>";
    echo "<title>Phishing Page</title>";
    echo "</head>";
    echo "<body>";
} // end genHeader
```

### Slide: 41
**Verify Target IP Is in Scope**

### Slide: 42
**Web Phishing - Sieve**
```php
function ipCheck($target_ip) {
    $scopeIPflag = 0;
    if ((preg_match("/$firstRange/",$target_ip, $matches)) ||
        (preg_match("/$sndRange/",$target_ip, $matches))) {
        $scopeIPflag = 1;
    } else {
        $scopeIPflag = 0;
    }
    return $scopeIPflag;
} // end ipCheck
```

### Slide: 43
**Verify Java Installation**

### Slide: 44
**Web Phishing - Sieve**
```php
function javaCheck() {
    echo "<applet code='TestApplet.class' width=1 height=1></applet>";
} // end javaCheck
```

### Slide: 45
**OS Detection**

### Slide: 46
**Web Phishing - Sieve**
```php
function osDetect($useragent) {
    if (preg_match("/Windows/", $useragent, $winmatched)) {
        $ostype = "win";
    } elseif (preg_match("/Linux/", $useragent, $linmatched)) {
        $ostype = "linux";
    } elseif (preg_match("/Macintosh/", $useragent, $macmatched)) {
        $ostype = "mac";
    } else {
        $ostype = "unknown";
    }
    return $ostype;
} // end osDetect
```

This optimized version ensures clarity, coherence, and professionalism throughout the presentation.