### 8. The SMU I/O-IMC Model

**Figure 8. The SMU I/O-IMC Model**

1. **COMPONENT: Name**
   - Defines the unique name of the component.

2. **OPERATIONAL MODES: List of OM Groups**
   - Lists the operational mode (OM) groups of the component. The syntax is currently limited to the available OM groups.

3. **ACCESSIBLE-TO-INACCESSIBLE: AND/OR Expression**
   - Defines an expression that determines when a switch from accessible to inaccessible occurs. If the AND/OR expression evaluates to true, the component becomes inaccessible.

4. **INACCESSIBLE MEANS DOWN: YES or NO**
   - Specifies whether inaccessibility is considered a failure by the environment.

5. **ON-TO-OFF: AND/OR Expression**
   - Defines an expression that determines when a switch from 'on' to 'off' occurs. If the AND/OR expression evaluates to true, the component switches to 'off'. It will switch back to 'on' if the expression changes to false.

6. **NORMAL-TO-DEGRADED: AND/OR Expression**
   - Defines an expression that determines when a switch from normal to degraded operation occurs. If the AND/OR expression evaluates to true, the component enters a degraded state.

7. **TIME-TO-FAILURES: exp(A1), exp(A2), ...**
   - Defines the time-to-failure distribution for each operational state. The order of the OM groups determines which distribution matches which operational state.

8. **FAILURE MODE PROBABILITIES: Prob1, Prob2, ... Probn**
   - Defines the probabilities corresponding to each failure mode.

9. **TIME-TO-REPAIRS: exp(μ1), exp(μ2), ... exp(μn), exp(μdj)**
   - Defines the time-to-repair distributions for each failure mode and the distribution associated with the destructive functional dependency.

10. **DESTRUCTIVE FDEP: AND/OR Expression**
    - Specifies the condition under which the component fails due to a destructive functional dependency.

All distributions defined in lines (7) and (9) can generally be any phase-type distribution (see an example in Section 5).

### 3.5.2 RU Syntax

1. **RU: Name**
   - Defines the unique name of the repair unit.

2. **COMPONENTS: comp1, comp2, ..., compn**
   - Lists the names of the components that are repairable by the unit.

3. **STRATEGY: Dedicated | FeF3 | PP | PNP**
   - Specifies the repair policy.

4. **PRIORITIES: pr1, pr2, ..., prn**
   - Defines the priority values (non-zero integers) for the various components in case of a PP or PNP repair strategy.

The RU I/O-IMC model varies depending on the number of components (see Section 3.2).

### 3.5.3 SMU Syntax

1. **SMU: Name**
   - Defines the unique name of the spare management unit.

2. **COMPONENTS: primary, sp1, ..., spn**
   - Defines a primary component and n possible spare components for that primary.

### 3.5.4 System Failure Evaluation Syntax

1. **SYSTEM DOWN: AND/OR Expression**
   - Defines the condition under which the system is considered down (see Section 3.4 for more details). The elementary conditions for system failure are expressed in terms of the failure modes defined for the components. If a component has more than one failure mode, the user must specify the relevant failure mode. For example, if component X has two failure modes and mode 2 is relevant for the evaluation, the user writes `X.down.m2` to indicate that mode 2 is the relevant failure mode. If there is only one failure mode, simply write `X.down`.

### 3.5.5 Extended SMU Syntax

1. **SMU: Name**
   - Defines the unique name of the spare management unit.

2. **COMPONENTS: primary, sp1**
   - Defines a primary component and one possible spare component.

3. **FAILOVER-TIME: exp(β)**
   - Specifies the failover time, which is exponentially distributed rather than instantaneous.

### 4. System Dependability Evaluation

To evaluate Arcade models, we use a three-step approach, similar to the one in [5], using the CADP toolset [11].

1. **Translation Step:**
   - Translate basic components, spare management units, repair units, and system failure evaluation models into their corresponding I/O-IMCs. This step has not been automated yet.

2. **Composition Step:**
   - Combine these models to obtain the system model. We use the Composer tool [5], which incrementally composes the I/O-IMC models using a parallel composition operator. Each composition step includes a state minimization or reduction step. The order in which the I/O-IMC models are composed is given by the user. This compositional and reduction approach has proven crucial in managing state-space explosion. The output is a single I/O-IMC model for the entire system, with two output signals: `failed!` to denote failure and `up!` for restoration. The Composer tool, which uses the CADP toolset, automates the composition and reduction steps.

3. **Conversion Step:**
   - Convert the system I/O-IMC into a labeled CTMC, on which standard CTMC solution techniques can be performed to compute availability and reliability. This step has been automated using the CADP toolset.

### 3.6 Extensibility

Arcade is extensible, allowing users to incorporate new or additional dependability constructs. To do this, the user needs to provide the syntax (i.e., the Arcade specification for the additional construct) and its semantics in terms of an I/O-IMC model. State space generation, reduction, and analysis do not need to be changed.

### 5. Case Studies

#### 5.1 Distributed Database Architecture

This system consists of four controllers, each with two processors, one of which is a spare. The controllers are divided into two sets, and there are 24 hard disks, divided into 6 clusters, with each cluster consisting of 4 disks. Each controller is responsible for three clusters, and each processor can access all the disks. The processors are managed by a spare management unit and share one repair unit. Each disk cluster has a separate repair unit responsible for it, and repair units follow a FCFS repair strategy.

The system is down if any of the following conditions are met:
1. All processors are down.
2. In at least one controller set, no controller is operational.
3. In more than one disk cluster, no controller is operational.

#### 5.1.1 Arcade Model

1. **Arcade Model for Processors:**
   - **Primary Processor:**
     ```plaintext
     COMPONENT: pp
     TIME-TO-FAILURE: exp(0.02)
     TIME-TO-REPAIR: exp(1)
     ```
   - **Spare Processor:**
     ```plaintext
     COMPONENT: ps
     OPERATIONAL MODES: (inactive, active)
     TIME-TO-FAILURE: exp(0.02), exp(0.02)
     TIME-TO-REPAIR: exp(1)
     ```

2. **Arcade Model for Processors' Repair Unit:**
   ```plaintext
   REPAIR UNIT: p.rep
   COMPONENTS: pp, ps
   REPAIR STRATEGY: FeF3
   ```

3. **System Failure Evaluation Criteria:**
   ```plaintext
   SYSTEM DOWN: (pp.down ∧ ps.down) ∨ (dc_1.down ∧ dc_2.down) ∨ (dc_3.down ∧ dc_4.down) ∨ (2-out-of-4(d_1.down, d_2.down, d_3.down, d_4.down)) ∨ ... ∨ (2-out-of-4(d_21.down, d_22.down, d_23.down, d_24.down))
   ```

#### 5.1.2 Analysis

Using the methodology described in Section 4, we generated the CTMC representing the behavior of the DDS. This CTMC has 2,100 states and 15,120 transitions. During the generation of this model, the largest I/O-IMC encountered had 6,522 states and 33,486 transitions. For comparison, the final model generated in [19] had 16,695 states.

Using the overall CTMC, we can analyze the steady-state availability (A) and reliability (R(t)) of the distributed database system. Table 1 shows the results of this analysis.