device, whatever is supposed to be sent to the app will be delivered
to that device, disclosing all sensitive user data pushed through this
channel; when the ID is bound to an attack server, the adversary
gains the privilege to push commands to the app as its developer
server. Therefore, the registration ID needs to be protected on all
the links across the whole communication chain, to prevent it from
being exposed and manipulated when the app talks to the service
client, the client to the connection server, the connection server to
the app server and the app server to the app. Also, the connec-
tion servers need to check each registration request to ensure that
the registration ID of an app is built on the right parameters from
right parties. The problem is the complexity of the communication
involved in the service, which makes such protection challenging.
The content of messages can also be exposed in other ways,
particularly during the on-device communication. Although those
messages are often encrypted when they are exchanged between
the cloud and the device, they are transmitted in plaintext on the
device, between the service client and the subscriber app. Such
on-device communication, once going through insecure channels
such as broadcasting or service invocation using an action, can be
intercepted by an unauthorized app. Even when the communica-
tion does not directly carry any sensitive data, it often involves the
token (i.e., PendingIntent) for identifying a message sender,
which could be exploited by a knowledgeable adversary to imper-
sonate the sender or acquire the capability to access its protected
resources.
Our study. To understand whether those security hazards indeed
pose a credible threat to push-messaging services, we analyzed
those services’ security protection, focusing on the cloud-device
link (Section 3) and the on-device link (Section 4) as the ﬁrst step.
Speciﬁcally, for the device-cloud link, we ran Dex2jar [6], JD-
GUI [9] and Baksmali [4] to study the code of different messag-
ing services’ clients and their SDKs, in an attempt to evaluate their
connection serverapp servercloud-device linkon-device linkmobile deviceconneccccccction secloukappcliento980program logic related to the app registration. For this purpose, we
also need to look into the logic on the cloud side, particularly the
security checks it performs. Without its code, all we can do is a
black-box analysis, in which we adjusted the parameters of regis-
tration requests to study responses from the server.
Unlike the cloud-service link, the on-device link only involves
the service components (the service client and the SDK) on the
same mobile devices, whose code and communication are more ac-
cessible. What has been inspected in our research is the security
implications of the resources (PendingIntent in particular) ex-
posed through their interactions. We further analyzed 63 popular
apps to understand the damages to their users when their push-
messaging services are exploited. The results of this study are elab-
orated in Section 3, 4 and 5.
Adversary model. We assume the presence of a malicious app on
the victim’s mobile device. The app does not have system privilege
and therefore needs to ask for a set of permissions from the users
such as READ_GSERVICES, GET_ACCOUNTS and INTERNET.
Although all such permissions are at the dangerous level, they are
also extensively requested by popular apps such as Ebay, Expedia,
Facebook and Whatsapp. Therefore, we believe that claiming them
by the malicious app will not arouse much suspicion. Further, we
consider an adversary who has the resources to set up his own app
servers with the cloud and run his devices to collect the victim’s
information.
3. EXPLOITING MESSAGING SERVICES
In this section, we report our security analysis of the cloud-
device links on major push-messaging service providers.
3.1 Google Cloud Messaging
Google Cloud Messaging is one of the most popular messag-
ing services, which has been subscribed by billions of Android de-
vices. According to Google, the GCM service pushes about 17
billion messages every day [8]. GCM works in a way as described
in Section 2.1, which requires an app to ﬁrst register with the ser-
vice before receiving messages.
In our study, we analyzed both
the registration and the message-delivery stages on an HTC One X
phone (serving as the attack device) and a Nexus 7 tablet (as the
victim’s target device), using mitmproxy [12] and mallory [11] to
proxy the SSL communication between the attack device and the
GCM connection server.
Flaws. To register with GCM, an app uses its app server’s sender
ID and a PendingIntent (see Section 4.1) to invoke the regis
ter method, one of GoogleCloudMessaging APIs under the
Google Play service com.google.android.gms on the de-
vice where the app is running. The service then makes an HTTPS
request to a connection server to obtain a registration ID for the app.
This request contains the device’s Android ID and its device-token
for the authentication purpose, and the package name for identify-
ing the app, as illustrated in Figure 2. Also, the Android ID shows
up in three ﬁelds Authorization, X-GOOG.USER_AID and
device. In our research, we performed a black-box analysis on
the connection server by adjusting the content of those parameters
through our proxy. What we found is that the content of device
needs to match the Android ID within the Authorization ﬁeld
to let the request go through. However, X-GOOG.USER_AID does
not need to be consistent with the other two ﬁelds, which turns out
to be a security-critical logic ﬂaw that can be exploited by an unau-
thorized party to collect sensitive user messages.
Speciﬁcally, what the adversary wants to do is to generate a reg-
istration request on behalf of the app on the victim’s device (the tar-
Figure 2: Registration Request
get) using his own attack device, a critical step for intercepting user
messages, which we elaborate later. The catch here is the device-
token (within the Authorization ﬁeld in Figure 2), a secret that
is bound to the device’s Android ID and automatically appended to
the request by the Google service during the communication with
GCM. This prevents a malicious app on the target device from get-
ting it. Without knowing the token, the adversary can only use
his own Android ID and device-token to ﬁll Authorization.
However, due to the missing consistency check between this ﬁeld
and X-GOOG.USER_AID on the connection server, the adversary
can still set the latter to the Android ID of the target device (which
can be obtained by the malicious app on the target device with the
permission READ_GSERVICES). Most importantly, we found that
the connection server solely relies on X-GOOG.USER_AID (not
the Android IDs in the other two ﬁelds) to create a new registration
ID or retrieve the record of an existing one.
Exploits and consequences. In our study, we implemented an ex-
ploit, which includes an app with the permission READ_GSERVIC
ES for collecting the Android ID from the target device. Using this
information, our approach automatically generates a registration re-
quest from our attack device by replacing the content of X-GOOG.
USER_AID with the target’s Android ID. When this registration
request is made before the target app does, we found that the adver-
sary can hijack this registration ID, binding it to his attack device.
Speciﬁcally, when an app registers with GCM the ﬁrst time, the
connection server establishes a binding relation between its regis-
tration ID and its current device (identiﬁed through its Android ID
in the ﬁeld of device or Authorization), but apparently in-
dexes the registration with the content of X-GOOG.USER_AID.
If the same app later registers again, the server retrieves the app’s
registration ID using its Android ID and returns it to the app. Since
the content of X-GOOG.USER_AID can be different from that in
device and Authorization, the adversary who registers us-
ing the target’s Android ID in X-GOOG.USER_AID (which in-
dexes the registration with the target device) and the attack device’s
ID in the other two ﬁelds (which binds the registration to the attack
device) will cause the target app to receive a registration ID tied
to the attack device’s Android ID when the app is trying to regis-
ter with GCM. This will have all the messages for the target app
pushed to the attack device.
We built an end-to-end attack in which the attack device pre-
empted the Facebook app on the target device in registering with
the Facebook server. As a result, the Facebook app, which regis-
tered later, got a registration ID tied to the attack device and unwit-
tingly sent this ID to its app server (see Section 2.1). After that, all
Authorization: AidLogin android-id:device-token app: package-name User-Agent: Android-GCM/1.3 content-length: 171 content-type: application/x-www-form-urlencoded Host: android.clients.google.com Connection: Keep-Alive Accept-Encoding: gzip URLEncoded form X-GOOG.USER_AID: android-id app: package-name sender: sender-ID cert: application's certificate device: android-id app_ver: application's version 981Facebook messages and notiﬁcations, including those with sensi-
tive content, went to the attack device.
When the adversary makes a registration request after the tar-
get app registers (on the victim’s device), the GCM connection
server responds by retrieving the app’s registration ID using the
X-GOOG.USER_AID (ﬁlled with the victim’s Android ID) on the
request and sends it to the attack device. In this way, the adversary
can steal the target app’s registration ID. Typically, this ID needs
to be used by the app server with an authorized sender ID to push
messages to the app. However, we found that for GCM, this policy
was not in place until very recently, which enabled us to inject mes-
sages to the app using its registration ID (see [15]). Although this
problem is no longer there, later we show that the target’s registra-
tion can be bound to an attack server through exploiting a weakness
in the on-device link (Section 4.2).
The video demos for the above attacks (binding a registration
ID to a wrong device and injecting messages through the ID) are
posted on a private website [15]. We reported all the ﬁndings to
the Android security team and the GCM team. So far, all these
problems have been ﬁxed based on our report.
3.2 mpCloud Messaging Services
mpCloud (the pseudonym we use on the company’s request) is
the largest push-messaging service provider in China, which serves
600 million users, including Chinese Internet giants like Sina [13].
Particularly it offers a critical support for Sina Weibo [14], an ex-
tremely popular Chinese version of Twitter. The designers of the
service clearly took security seriously: for example, on its cloud,
registration IDs (called client ID) can only be used by authorized
app servers to communicate with their corresponding apps.
Flaws. However, our analysis of this push-messaging service shows
that it also has serious security ﬂaws, which can lead to expo-
sure of sensitive user messages. Speciﬁcally, when reinstalling a
service-subscribing app after uninstalling it on the same device, we
found that the app always gets the same client ID. A close inspec-
tion of the code of the mpCloud SDK reveals that such a client ID
is actually generated deterministically on the device, based upon
a data ﬁle (/sdcard/libs/package_name.db) the service
deposits on the device’s SD card, and its International Mobile Equip-
ment Identity (IMEI), International Mobile Subscriber Identity (IMSI)
and MAC address. Such information is all accessible to a mali-
cious app running on the victim’s device with proper permissions
(READ_EXTERNAL_STORAGE for reading from the SD card, READ
_PHONE_STATE for collecting IMEI/IMSI and ACCESS_WIFI
_STATE for getting the MAC address). With the information ex-
posed, the adversary can come up with the right client ID on his
own device.
When it comes to message delivery, what happens within mp-
Cloud is that the device makes a socket connection to the cloud
server, providing it the device’s identity information to get mes-
sages, as other messaging services do. However, different from
GCM, in which the server will check both the registration ID of
an app and the Android ID/device-token of a device before push-
ing messages to the app, mpCloud solely relies on the client ID to
identify a device and the app running on it. As a result, the expo-
sure of the client ID renders both the victim’s target device and the
attack device equally entitled to receive push messages from the
cloud server. In our research, we found that such messages will be
randomly pushed to one of these two devices.
Exploits and consequences. We built an end-to-end attack on Sina
Weibo, one of the most important customers of mpCloud. Sina ac-
tually modiﬁed the mpCloud SDK, changing the directory path of
the data ﬁle (for generating the client ID) to /sdcard/sina/weibo
/libs_backup/com.sina.weibo.db. In our research, we
ran an attack app to gather the data from this ﬁle and other infor-
mation (IMEI/IMSI/ MAC) to derive the client ID. Using the client
ID, our attack device successfully received the push messages (i.e.,
tweets) from Sina Weibo, which were supposed to be delivered to
the target device. This vulnerability has been reported to mpCloud.
4. VULNERABLE ON-DEVICE COMMUNI-
CATIONS
In addition to the client-cloud link, we further analyzed the on-
device link, which involves the communication between a push-
messaging client and an app subscribing the service on the same
device. For this purpose, we studied the client-side code of the most
popular push-messaging services for Android, including GCM, Ama-
zon Device Messaging (ADM), UrbanAirship [16] and mpCloud
(pseudonym for the largest Chinese push-cloud service provider).
Those services support a vast majority of Android devices, deliver-
ing messages to billions of users. However, all of their client com-
ponents were found to include serious security ﬂaws. The problems
here start with the use of intent broadcast or startService with
regard to an action. The most intriguing part, however, is how
to use the content exposed through those channels, which itself
may not be sensitive (e.g., a message for starting the process of re-
questing a registration ID) but comes with the capability allowing
a knowledgeable adversary to wreak havoc through complicated
exploits. Following we describe the problems found in individual
services.
4.1 Exploiting Upstream Messaging
GCM client components. GCM client components include the
Android service apps com.google.android.gfs, com.goo
gle.android.gms and the SDK google-play-service.
jar integrated into the service-subscribing app. The communica-
tion between the SDK and those services all goes through intent.
Such communication includes the request for getting registration
ID and the messages pushed to the app through the service. The
intent serving those purposes carries the recipient’s package name,
which ensures that only the right party can get it. However, an ex-
ception is made when it comes to upstream messaging [7], a new
feature that allows an app to push messages to its app server. The
intent created for this purpose is delivered through the broadcast
channel without specifying the target package, which distributes
the message to whoever declares a right receiver. This treatment
is meant for ﬂexibility, enabling the app to use any service app ca-
pable of handling its message. Also, an upstream message often
does not contain sensitive data: for example, it is used to notify the
Google server when a new account is opened on a device. How-
ever, such an exposure gives away the PendingIntent object
embedded in the intent, which has serious consequences.
More speciﬁcally, the PendingIntent objects are embedded
in the intents the GCM SDK (within the subscriber app) delivers to
the Google service apps to inform the latter of the sender’s iden-
tity, which is not given when a normal intent is passed from one
app to another [32]. The problem is that the PendingIntent
object here can do much more than just the sender identiﬁcation,
and therefore can be abused once it is exposed to an unauthorized
party.
Exploits. In our research, we implemented an attack app that de-
clared a broadcast receiver for the action com.google.android
.gcm.intent.SEND (speciﬁed within its manifest ﬁle), with a
higher priority (1000) in receiving messages than the legitimate
Google service app. This attack app was able to intercept any up-
982stream message a GCM-subscribing app sent to its app server, and
also prevented the Google services from getting them. This not
only violated the conﬁdentiality of the communication, but more
importantly, enabled the attack app to obtain the PendingIntent
embedded in the upstream messages. With this token in hand, we
were able to perform the following message-injection attack:
Each app subscribing the GCM service needs to follow Google’s
instructions [7] to declare an intent receiver to get push messages.
Such a receiver is protected by the signature permission com.goog
le.android.c2dm.permission.SEND and thus only acces-
sible to the Google services and the app itself, in accordance with
the action deﬁned for the receiver (e.g., com.google.android
.c2dm.intent.RECEIVE). For example, the Facebook app claims
a receiver com.facebook.push.c2dm.C2DMBroadcast
Receiver. The trouble here is that once the PendingIntent
is exposed, the attack app becomes able to execute the operation
speciﬁed by the object with the sender app’s permissions. Speciﬁ-
cally, for GCM, the PendingIntent its SDK builds always in-
cludes a blank intent with a broadcast operation. Therefore, the
attack app that intercepts this object can ﬁll the content of the in-
tent with the target app’s package name and action, and then ask
the OS to broadcast this intent. Given this new intent is viewed as
coming from the target app itself, it is allowed to be delivered to the
target’s receiver. As a result, the attack app can now push arbitrary
messages to the target. In our study, we successfully launched this
attack against Android Device Manager and other apps.
Also interestingly, we found that the exposed PendingIntent
can be used to impersonate the target app to send requests to An-
droid services. For example, an attack app can generate a regis-
tration request in the name of the target app to register it again
with GCM using its PendingIntent object. The gms service
receiving this intent checks the sender’s package name using the
PendingIntent, and will be convinced that the intent indeed
comes from the target app. As discussed in Section 3.1, when a
registered app attempts to register again, the connection server just
returns to it the existing registration ID. The attack app can then in-
clude in the forged registration intent an instance of android.os
.Messenger, through which it receives the registration ID re-
turned from the cloud. Although the registration ID alone may not
be enough for injecting messages to the app remotely, the attack