1–7:10,000. We expected the subset of ﬂows with below av-
erage RTT (L) to be better at predicting congestion, given
it would have less time to change. In fact, they consistently
suﬀered about 50% worse truncation rates than ﬂows with
average RTTs. Indeed, ﬂows with average RTT were gen-
erally better at predicting the next round trip’s congestion
than both U and L ﬂows either side of them. Closed loop
traﬃc behaviour at sub-RTT timescales is a developing ﬁeld,
Upper RTT, γ=0.002                RED queues:
wq=0.02, B=188B 
0.5
0.4
0.3
0.2
0.1
0
e
t
a
r
n
o
i
t
a
c
n
u
r
t
-0.1
-0.2
e
t
a
r
n
o
i
t
a
c
n
u
r
t
0.6
0.5
0.4
0.3
0.2
0.1
0
-0.1
-0.2
90% honest
truncation rate
10% dishonest
truncation rate
10% dishonest
sources ∆ρ
31
81
131
181
231
281
time/s
Lower RTT, γ=0.002                RED queues:
wq=0.02, B=188B
50% honest
truncation rate
50% dishonest
truncation rate
50% dishonest
sources ∆ρ
31
81
131
181
231
281
time/s
Figure 8: Truncation discrimination with a) 10%
and b) 50% of sources dishonest ∆ρ0c = −0.1 + 0.1
ramp (note: no focused dropper).
but we are not aware of any explanation for these results.
We introduced dishonest traﬃc as a step underdeclaring
congestion by 0.1 to see how fast a large change could be
detected, then ramping up to see when a small level of dis-
honesty became undetectable. Fig 8a) shows how if even
10% of ﬂows are dishonest, high truncation peaks occur
that would mark out the ﬂow for focused treatment by a
focused dropper. Note how, as levels of understatement de-
cline, the dishonesty is lost in random ﬂuctuations. Fig 8b)
shows another example where 50% of ﬂows are dishonest,
thus causing strong near-immediate discrimination.
6. RELATED WORK
Clark [5] proposed a decrementing ﬁeld representing pay-
ment as a packet traversed a path, with receiver-initiated
messages able to meet it in the middle to make up any
shortfall. We argue that network layer ﬁelds should rep-
resent veriﬁable properties of the path. Then operators can
choose to apply pricing to them to determine cost or value
(or choose not to).
The ECN nonce [21] is an elegant mechanism for a sender
to detect feedback suppression by a receiver. However, senders’
interests often align more closely with their receivers’ than
with the welfare of all network users.
We borrowed ideas from policers in the literature [16, 7,
18] for our rate equation policer. However, without the ben-
eﬁt of re-feedback they don’t police the correct rate for the
condition of their path. They detect unusually high ab-
solute rates, but only while the policer itself is congested,
because they work by detecting prevalent ﬂows in the dis-
cards from the local RED queue. These policers must sit at
every potential bottleneck, whereas our policer need only be
located at each ingress to the internetwork. As Floyd & Fall
explain [7], the limitation of their approach is that a high
sending rate might be perfectly legitimate, if the rest of the
path is uncongested or the round trip time is short.
7. CONCLUSIONS & FURTHER WORK
We have argued for a re-alignment of the datum of path
characterisation metrics like TTL and congestion notiﬁca-
tion. Moving the datum to the destination ensures that
each packet arrives at every relay carrying a view of the re-
maining path to be traversed by the packet, albeit a round
trip delayed. Despite overhauling the underlying feedback
architecture, we have brieﬂy described a limited form of re-
feedback that could be deployed incrementally around un-
modiﬁed routers without changing IP.
Once downstream information is visible, inline equipment
can exercise control mechanisms that were previously im-
practical, such as rate policing or inter-domain traﬃc engi-
neering. We describe how to police TCP’s and other closed-
loop rate control algorithms. Not only is it now possible to
detect and remove traﬃc that exhibits a hostile response to
congestion. It is also possible to explicitly permit applica-
tions that require such a response, perhaps given suitable
payment in exchange for the enhanced quality of service.
We have introduced an incentive framework which ensures
that the dominant strategy of selﬁsh parties around the feed-
back loop will be to declare re-feedback honestly. It relies
critically on whether malicious ﬂows can be detected at the
egress, while minimising false negatives. We have simulated
an adaptive dropper to show this may indeed be feasible.
Re-feedback allows senders a view of route costs, and net-
works a view of downstream congestion. By democratising
access to path information, it enables a tussle over whether
network control lies with end-points or the network [4].
Having laid the foundations for this idea, much detail re-
mains to be ﬁlled in.
In particular further experiment is
required to fully stress both the dropper and the policer,
particularly under dynamic attacks. Our other priority is
to assess whether responsive policing and dropping will be
possible with our binary re-ECN scheme.
Acknowledgements
S´ebastien Cazalet contributed to the early ideas behind this
work. The following have all contributed useful review com-
ments: David Songhurst, Keith Briggs, Marc Wennink, Louise
Burness, Phil Eardley, Alexandru Murgu, Nigel Geﬀen (BT),
Jon Crowcroft (Cambridge Uni), Mark Handley, Stephen
Hailes (UCL), Sally Floyd (ICIR) & others at ICIR & UCL.
8. REFERENCES
[1] R. Braden, D. Clark, S. Shenker, and J. Wroclawski.
Developing a next-generation Internet architecture. White
paper, DARPA, July 2000.
[2] B. Briscoe and S. Rudkin. Commercial models for IP
quality of service interconnect. BTTJ, 23(2), Apr. 2005.
[3] k. claﬀy. The nature of the beast: Recent traﬃc
measurements from an Internet backbone. In Proc.
INET’98. ISOC, 1998.
[4] D. Clark, K. Sollins, J. Wroclawski, and R. Braden. Tussle
in cyberspace: Deﬁning tomorrow’s Internet. Proc. ACM
SIGCOMM’02, CCR, 32(4), Aug. 2002.
[5] D. D. Clark. Combining sender and receiver payments in
the Internet. In G. Rosston and D. Waterman, editors,
Interconnection and the Internet. Lawrence Erlbaum
Associates, Mahwah, NJ, Oct. 1996.
[6] J. Crowcroft and P. Oechslin. Diﬀerentiated end to end
Internet services using a weighted proportional fair sharing
TCP. CCR, 28(3):53–69, July 1998.
[7] S. Floyd and K. Fall. Promoting the use of end-to-end
congestion control in the Internet. IEEE/ACM
Transactions on Networking, 7(4):458–472, Aug. 1999.
[8] S. Floyd and V. Jacobson. Random early detection
gateways for congestion avoidance. IEEE/ACM
Transactions on Networking, 1(4):397–413, Aug. 1993.
[9] A. Ganesh, P. Key, and L. Massouli´e. Feedback and
bandwidth sharing in networks. In Proc. 39th Annual
Allerton Conference on Communication, Control and
Computing, 2001.
[10] D. K. Goldenberg, L. Qiu, H. Xie, Y. R. Yang, and
Y. Zhang. Optimizing cost and performance for
multihoming. Proc. ACM SIGCOMM’04, CCR,
34(4):79–92, Oct. 2004.
[11] A. Jain, S. Floyd, M. Allman, and P. Sarolahti. Quick-Start
for TCP and IP. Internet Draft draft-ietf-tsvwg-quickstart,
IETF, May 2005. (Work in progress).
[12] D. Katabi, M. Handley, and C. Rohrs. Congestion control
for high bandwidth-delay product networks. Proc. ACM
SIGCOMM’02, CCR, 32(4):89–102, Oct. 2002.
[13] F. P. Kelly. Models for a self-managed Internet.
Philosophical Transactions of the Royal Society, A358
(2000):2335–2348, 1999.
[14] F. P. Kelly, A. K. Maulloo, and D. K. H. Tan. Rate control
for communication networks: shadow prices, proportional
fairness and stability. Journal of the Operational Research
Society, 49(3):237–252, 1998.
[15] A. Odlyzko. A modest proposal for preventing Internet
congestion. Technical report TR 97.35.1, AT&T Research,
Florham Park, New Jersey, Sept. 1997.
[16] T. J. Ott, T. V. Lakshman, and L. H. Wong. SRED:
Stabilized RED. In Proc. IEEE Conf. on Computer
Comm’s (Infocom’99), pages 1346–1355, Mar. 1999.
[17] J. Padhye, V. Firoiu, D. Towsley, and J. Kurose. Modeling
TCP throughput: A simple model and its empirical
validation. Proc. ACM SIGCOMM’98, CCR, 28(4), 1998.
[18] R. Pan, L. Breslau, B. Prabhaker, and S. Shenker.
Approximate fairness through diﬀerential dropping. CCR,
33(2):23–40, Apr. 2003.
[19] K. K. Ramakrishnan, S. Floyd, and D. Black. The addition
of explicit congestion notiﬁcation (ECN) to IP. RFC 3168,
IETF, Sept. 2001.
[20] V. A. Siris. Resource control for elastic traﬃc in CDMA
networks. In Proc. ACM Int’l Conf. on Mobile Computing
and Networks (MobiCom’02), Sept. 2002.
[21] N. Spring, D. Wetherall, and D. Ely. Robust explicit
congestion notiﬁcation (ECN) signaling with nonces. RFC
RFC3540, IETF, June 2003.
APPENDIX
A. RE-FEEDBACK FUNCTIONS
required to implement re-feedback for congestion:
Below, following the notation of §2, we derive the functions
• the combining function on each relay, hi+1 = g(hi, mi),
• the function to initialise header values h0(t+T ) = f (h0(t), hn(t))
• the downstream path metric from resource j, (cid:3)n−1
j m(t+T ).
We coin the notation (cid:3)j
am for the path metric, which is the
composition of all the local metrics mi experienced by a packet
along the sequence of resources {a, . . . i, . . . j} using the combining
function appropriate to the metric in question.
A.1 Congestion re-feedback
Definition 1. The congestion, mi, caused by a packet at sin-
gle resource i is the probability that the event Xi will occur if the
packet in question is added to the load, given any pre-existing
diﬀerential treatment of packets. Where Xi is the event that an-
other selected packet will not be served to its requirements by
resource i during its current busy period.
So, at resource i, the contribution to congestion is mi = P (Xi) ∈
[0, 1], which is a function of local load.
Definition 2. The path congestion, (cid:3)j
am, caused by a packet
traversing a sequence of resources, is the probability that the event
X will occur if the packet in question is added to the loads at
each resource along its path, given any pre-existing diﬀerential
treatment of packets. Where X is the event that another selected
packet will not be served to its requirements by any of the sequence
of resources {a, . . . i, . . . j} during their current busy periods.
From deﬁnition 1, the function that combines the local contribu-
tion with the incoming congestion notiﬁcation ﬁeld must emulate
combinatorial probability resulting in an outgoing header value
hi+1 = 1 − (1 − hi)(1 − mi).
(6)
∴ if the header is ha before resource a, after node j − 1 it will be
(7)
From deﬁnition 2 the path metric from resource a to j − 1,
(cid:9)j−1
i=a (1 − mi).
hj = 1 − (1 − ha)
a m = P (X) = 1 −(cid:9)j−1
i=a (1 − P (Xi))
(cid:3)j−1
= 1 −(cid:9)j−1
i=a (1 − mi)
= 1 − 1 − hj
1 − ha
(8)
A source with perfect foresight would initialise a packet header
∗
to h
0(t+T ) in order to reach its target value at the destination
hn(t+T ) = 1 −(cid:6)
(cid:7)(cid:6)
1 − h
∗
0(t+T )
1 − (cid:3)n−1
0 mi(t+T )
(cid:7)
= hz
0(t+T ) = 1 −
∗
∴ h
1 − hz
0 mi(t+T )
1 − (cid:3)n−1
A practical source will use the previous path metric as an esti-
mator for the next and set
h0(t+T ) = 1 −
1 − hz
1 − (cid:3)n−1
0 mi(t)
= 1 − (1 − hz)(1 − h0(t))
(9)
During sudden increases in congestion, hn → 1, but if protocol
ﬁelds are bounded the source will remain responsive, but under-
state congestion to the network, which is the safe way round.
1 − hn(t)
With hindsight, the downstream path metric from resource j
(10)
j m(t+T ) is
i=0 (1 − mi(t))
.
(11)
(cid:9)n−1
i=0 (1 − mi(t+T ))
(cid:9)j−1
i=0 (1 − mi(t+T ))
(cid:9)n−1
i=0 (1 − mi(t))
(cid:9)j−1
i=0 (1 − mi(t+T ))
.
1 − hj(t+T )
1 − h0(t+T )
(cid:3)∗n−1
j m(t+T ) = 1 −
An eﬃcient estimator for this metric is
(cid:10)
(cid:3)n−1
j m(t+T ) = 1 −
From (8) = 1 − 1 − hz
1 − h0(t+T )
From (9) = 1 − 1 − hz
1 − hj(t+T )
j m(t+T ) − (cid:3)∗n−1
The prediction error (cid:3)n−1
(cid:9)n−1
i=0 (1 − mi(t+T )) −(cid:9)n−1
(cid:9)j−1
i=0 (1 − mi(t+T ))
.