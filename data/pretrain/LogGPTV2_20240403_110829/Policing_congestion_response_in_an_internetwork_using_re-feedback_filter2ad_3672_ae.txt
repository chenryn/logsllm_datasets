### 1–7:10,000

We hypothesized that the subset of flows with below-average Round-Trip Time (RTT) (denoted as L) would be more effective in predicting congestion, given their shorter time to change. However, these flows consistently experienced truncation rates approximately 50% worse than those with average RTTs. In fact, flows with average RTTs were generally better at predicting the next round trip's congestion compared to both U and L flows. The behavior of closed-loop traffic at sub-RTT timescales is an emerging field, but we are not aware of any existing explanations for these results.

### Dishonest Traffic Simulation

To investigate the detection of dishonest traffic, we introduced a step where 10% of the flows underdeclared congestion by 0.1. This allowed us to observe how quickly a significant change could be detected and then gradually ramped up to see when a small level of dishonesty became undetectable. Figure 8a shows that even with 10% of flows being dishonest, high truncation peaks occurred, which would mark the flow for focused treatment by a focused dropper. As the levels of understatement decreased, the dishonesty became indistinguishable from random fluctuations. Figure 8b illustrates another scenario where 50% of the flows are dishonest, leading to strong and near-immediate discrimination.

### Related Work

**Clark [5]** proposed a decrementing field representing payment as a packet traverses a path, with receiver-initiated messages able to meet it in the middle to make up any shortfall. We argue that network layer fields should represent verifiable properties of the path, allowing operators to apply pricing to determine cost or value (or choose not to).

**The ECN nonce [21]** is an elegant mechanism for senders to detect feedback suppression by receivers. However, senders' interests often align more closely with their receivers' than with the welfare of all network users.

We borrowed ideas from policers in the literature [16, 7, 18] for our rate equation policer. However, without the benefit of re-feedback, they do not police the correct rate for the condition of their path. They detect unusually high absolute rates, but only while the policer itself is congested, as they work by detecting prevalent flows in the discards from the local RED queue. These policers must be placed at every potential bottleneck, whereas our policer need only be located at each ingress to the internetwork. As Floyd & Fall explain [7], the limitation of their approach is that a high sending rate might be perfectly legitimate if the rest of the path is uncongested or the round trip time is short.

### Conclusions and Further Work

We have argued for a realignment of the datum of path characterization metrics like TTL and congestion notification. Moving the datum to the destination ensures that each packet arrives at every relay carrying a view of the remaining path to be traversed, albeit with a round-trip delay. Despite overhauling the underlying feedback architecture, we have briefly described a limited form of re-feedback that could be deployed incrementally around unmodified routers without changing IP.

Once downstream information is visible, inline equipment can exercise control mechanisms that were previously impractical, such as rate policing or inter-domain traffic engineering. We describe how to police TCP's and other closed-loop rate control algorithms. It is now possible not only to detect and remove traffic that exhibits a hostile response to congestion but also to explicitly permit applications that require such a response, perhaps given suitable payment in exchange for enhanced quality of service.

We have introduced an incentive framework that ensures the dominant strategy of selfish parties around the feedback loop will be to declare re-feedback honestly. This relies critically on whether malicious flows can be detected at the egress while minimizing false negatives. We have simulated an adaptive dropper to show that this may indeed be feasible.

Re-feedback allows senders a view of route costs and networks a view of downstream congestion. By democratizing access to path information, it enables a tussle over whether network control lies with endpoints or the network [4]. Having laid the foundations for this idea, much detail remains to be filled in. Further experiments are required to fully stress both the dropper and the policer, particularly under dynamic attacks. Our other priority is to assess whether responsive policing and dropping will be possible with our binary re-ECN scheme.

### Acknowledgements

Sébastien Cazalet contributed to the early ideas behind this work. The following individuals provided useful review comments: David Songhurst, Keith Briggs, Marc Wennink, Louise Burness, Phil Eardley, Alexandru Murgu, Nigel Geffen (BT), Jon Crowcroft (Cambridge Uni), Mark Handley, Stephen Hailes (UCL), Sally Floyd (ICIR), and others at ICIR and UCL.

### References

[1] R. Braden, D. Clark, S. Shenker, and J. Wroclawski. Developing a next-generation Internet architecture. White paper, DARPA, July 2000.

[2] B. Briscoe and S. Rudkin. Commercial models for IP quality of service interconnect. BTTJ, 23(2), Apr. 2005.

[3] K. Claffy. The nature of the beast: Recent traffic measurements from an Internet backbone. In Proc. INET’98. ISOC, 1998.

[4] D. Clark, K. Sollins, J. Wroclawski, and R. Braden. Tussle in cyberspace: Defining tomorrow’s Internet. Proc. ACM SIGCOMM’02, CCR, 32(4), Aug. 2002.

[5] D. D. Clark. Combining sender and receiver payments in the Internet. In G. Rosston and D. Waterman, editors, Interconnection and the Internet. Lawrence Erlbaum Associates, Mahwah, NJ, Oct. 1996.

[6] J. Crowcroft and P. Oechslin. Differentiated end-to-end Internet services using a weighted proportional fair sharing TCP. CCR, 28(3):53–69, July 1998.

[7] S. Floyd and K. Fall. Promoting the use of end-to-end congestion control in the Internet. IEEE/ACM Transactions on Networking, 7(4):458–472, Aug. 1999.

[8] S. Floyd and V. Jacobson. Random early detection gateways for congestion avoidance. IEEE/ACM Transactions on Networking, 1(4):397–413, Aug. 1993.

[9] A. Ganesh, P. Key, and L. Massoulié. Feedback and bandwidth sharing in networks. In Proc. 39th Annual Allerton Conference on Communication, Control and Computing, 2001.

[10] D. K. Goldenberg, L. Qiu, H. Xie, Y. R. Yang, and Y. Zhang. Optimizing cost and performance for multihoming. Proc. ACM SIGCOMM’04, CCR, 34(4):79–92, Oct. 2004.

[11] A. Jain, S. Floyd, M. Allman, and P. Sarolahti. Quick-Start for TCP and IP. Internet Draft draft-ietf-tsvwg-quickstart, IETF, May 2005. (Work in progress).

[12] D. Katabi, M. Handley, and C. Rohrs. Congestion control for high bandwidth-delay product networks. Proc. ACM SIGCOMM’02, CCR, 32(4):89–102, Oct. 2002.

[13] F. P. Kelly. Models for a self-managed Internet. Philosophical Transactions of the Royal Society, A358 (2000):2335–2348, 1999.

[14] F. P. Kelly, A. K. Maulloo, and D. K. H. Tan. Rate control for communication networks: shadow prices, proportional fairness and stability. Journal of the Operational Research Society, 49(3):237–252, 1998.

[15] A. Odlyzko. A modest proposal for preventing Internet congestion. Technical report TR 97.35.1, AT&T Research, Florham Park, New Jersey, Sept. 1997.

[16] T. J. Ott, T. V. Lakshman, and L. H. Wong. SRED: Stabilized RED. In Proc. IEEE Conf. on Computer Communications (Infocom’99), pages 1346–1355, Mar. 1999.

[17] J. Padhye, V. Firoiu, D. Towsley, and J. Kurose. Modeling TCP throughput: A simple model and its empirical validation. Proc. ACM SIGCOMM’98, CCR, 28(4), 1998.

[18] R. Pan, L. Breslau, B. Prabhaker, and S. Shenker. Approximate fairness through differential dropping. CCR, 33(2):23–40, Apr. 2003.

[19] K. K. Ramakrishnan, S. Floyd, and D. Black. The addition of explicit congestion notification (ECN) to IP. RFC 3168, IETF, Sept. 2001.

[20] V. A. Siris. Resource control for elastic traffic in CDMA networks. In Proc. ACM Int’l Conf. on Mobile Computing and Networks (MobiCom’02), Sept. 2002.

[21] N. Spring, D. Wetherall, and D. Ely. Robust explicit congestion notification (ECN) signaling with nonces. RFC 3540, IETF, June 2003.

### Appendix

#### A. Re-Feedback Functions

To implement re-feedback for congestion, we derive the following functions:

- **Combining function on each relay**: \( h_{i+1} = g(h_i, m_i) \)
- **Function to initialize header values**: \( h_0(t+T) = f(h_0(t), h_n(t)) \)
- **Downstream path metric from resource j**: \( \sum_{j=0}^{n-1} m(t+T) \)

We introduce the notation \( \sum_j^a m \) for the path metric, which is the composition of all the local metrics \( m_i \) experienced by a packet along the sequence of resources {a, ..., i, ..., j} using the combining function appropriate to the metric in question.

##### A.1 Congestion Re-Feedback

**Definition 1.** The congestion \( m_i \) caused by a packet at a single resource \( i \) is the probability that the event \( X_i \) will occur if the packet in question is added to the load, given any pre-existing differential treatment of packets. Where \( X_i \) is the event that another selected packet will not be served to its requirements by resource \( i \) during its current busy period.

So, at resource \( i \), the contribution to congestion is \( m_i = P(X_i) \in [0, 1] \), which is a function of local load.

**Definition 2.** The path congestion \( \sum_j^a m \) caused by a packet traversing a sequence of resources is the probability that the event \( X \) will occur if the packet in question is added to the loads at each resource along its path, given any pre-existing differential treatment of packets. Where \( X \) is the event that another selected packet will not be served to its requirements by any of the sequence of resources {a, ..., i, ..., j} during their current busy periods.

From Definition 1, the function that combines the local contribution with the incoming congestion notification field must emulate combinatorial probability, resulting in an outgoing header value:
\[ h_{i+1} = 1 - (1 - h_i)(1 - m_i) \]

Therefore, if the header is \( h_a \) before resource \( a \), after node \( j-1 \) it will be:
\[ h_j = 1 - (1 - h_a) \prod_{i=a}^{j-1} (1 - m_i) \]

From Definition 2, the path metric from resource \( a \) to \( j-1 \) is:
\[ \sum_{j-1}^a m = P(X) = 1 - \prod_{i=a}^{j-1} (1 - P(X_i)) \]
\[ = 1 - \prod_{i=a}^{j-1} (1 - m_i) \]
\[ = 1 - \frac{1 - h_j}{1 - h_a} \]

A source with perfect foresight would initialize a packet header \( h_0(t+T) \) in order to reach its target value at the destination:
\[ h_n(t+T) = 1 - \left( \frac{1 - h_0^*(t+T)}{1 - \sum_{i=0}^{n-1} m_i(t+T)} \right) \]
\[ \therefore h_0^*(t+T) = 1 - \left( \frac{1 - h_n(t+T)}{1 - \sum_{i=0}^{n-1} m_i(t+T)} \right) \]

A practical source will use the previous path metric as an estimator for the next and set:
\[ h_0(t+T) = 1 - \left( \frac{1 - h_n(t)}{1 - \sum_{i=0}^{n-1} m_i(t)} \right) \]
\[ = 1 - (1 - h_n(t))(1 - h_0(t)) \]

During sudden increases in congestion, \( h_n \to 1 \), but if protocol fields are bounded, the source will remain responsive but understate congestion to the network, which is the safe way around.

With hindsight, the downstream path metric from resource \( j \) is:
\[ \sum_{j}^a m(t+T) = \frac{\prod_{i=0}^{n-1} (1 - m_i(t+T))}{\prod_{i=0}^{j-1} (1 - m_i(t+T))} \]
\[ = \frac{1 - h_j(t+T)}{1 - h_0(t+T)} \]

An efficient estimator for this metric is:
\[ \sum_{j}^a m(t+T) = \frac{1 - h_z}{1 - h_0(t+T)} \]
\[ = \frac{1 - h_z}{1 - h_j(t+T)} \]

The prediction error \( \sum_{j}^a m(t+T) - \sum_{j}^a m(t+T) \) is:
\[ \prod_{i=0}^{n-1} (1 - m_i(t+T)) - \prod_{i=0}^{n-1} (1 - m_i(t+T)) \]