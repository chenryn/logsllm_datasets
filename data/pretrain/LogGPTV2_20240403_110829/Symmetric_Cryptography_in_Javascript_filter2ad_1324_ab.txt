it does not use WebKit’s
Javascript implementation). Of course, it is still useful to
fold data from Math.random into the seed of a PRNG.
Its state may not be accessible to an attacker, and on some
few browsers it is cryptographically strong. Since folding
weak entropy into the state of a PRNG is harmless, this
step will have no impact on browsers that implement a non-
cryptographic Math.random.
Even when Math.random is weak, it would be accept-
able for generating nonces if its state were large enough,
as an attacker would not be able to force a repeat with
meaningful probability. However, we found that several
browsers with a weak PRNG have state space smaller than
48 bits. In this case, an attacker could cause a repeat by
calling Math.random until its output is divisible by, say,
224, leaving only 224 possible nonces and causing a repeat
after an expected 212 operations.
Consequently Math.random cannot be trusted as
the only source of entropy for our
library. An al-
ternative is to use the dedicated cryptographic PRNG
window.crypto.random, which ﬁrst
appeared in
Netscape 4. If present,
this function would supply all
the entropy we need. Unfortunately, as of this writing,
window.crypto.random is not
implemented in any
major browser. We therefore examine stand-in methods to
generate entropy.
B. Operations which implicitly use entropy
All major web browsers support SSL, which means
internal use.
that
Furthermore,
Javascript-
accessible cryptography routines for client-side certiﬁcate
they have cryptographic PRNGs for
implement
browsers
some
and
signing. For
has
generation
crypto.generateCRFMrequest, which creates
a
new random private key and corresponding certiﬁcate
signing request.
example, Firefox
It is tempting to extract entropy by requesting that the
browser perform some randomized cryptographic opera-
tion, and then hashing the result. However, this has un-
desirable side effects. Calling generateCRFMrequest
uses a non-negligible amount of CPU time and brieﬂy
pops up a dialog box informing that the operation “may
take several minutes”. More seriously, when the oper-
ation completes, NSS (the Firefox SSL library) stores
the private key in a hidden database. Therefore every
call to generateCRFMrequest irreversibly expands this
database. These side effects make the strategy untenable.
C. RFC 4086
RFC 4086 recommends various strategies for generating
random numbers. Unfortunately, it does not apply particu-
larly well to the browser. Most of the hardware (disk drives,
sound cards, etc) which is conventionally used to generate
randomness is not accessible from Javascript.
However, a small amount of entropy can be extracted
from network latencies. If we attach load event handlers
to objects in the page which have not yet loaded then the
loading time should give some entropy. When the object is
in disk cache, it will load in a few milliseconds; this may
allow us to extract entropy from disk timings. When it is
in memory cache, it will load nearly instantaneously. By
discarding load times less than 2 milliseconds, we avoid
treating these loading times as random.
This approach to collecting entropy is not secure against a
network attacker or against another user on the local machine
since they may have access to these load times. Hence, these
measurements can be folded into the PRNG state, but cannot
be trusted as the sole source of entropy for the PRNG seed.
D. User interaction
Our main entropy source is user interaction, speciﬁcally
mouse movement. Our PRNG’s initialization code attaches
an onmousemove event handler to the window, which
gives us the x and y coordinates of the mouse whenever
it moves. This source is secure against a network attacker,
and seems likely to be secure against a web attacker as well,
376
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:09:39 UTC from IEEE Xplore.  Restrictions apply. 
though timing information may leak some small amount of
entropy. But it is not obvious how much entropy mouse
movements on a web page actually have.
In some cases the browser may send mousemove events
even though the mouse did not move. We accord no entropy
to such events,
though we still add them to the pool.
Similarly, we accord no entropy to events that show the
mouse moving or accelerating uniformly.
User study. To determine the amount of entropy, we mea-
sured users’ mouse movements on three different websites:
a forum, a survey and a blog.
(cid:129) on the forum site, users read and post comments;
(cid:129) the survey site asks users to answer a number of
questions;
(cid:129) on the blog users mostly read posts by others.
We collected over 4,000,000 samples from over 9,000 dif-
ferent users. We attached an onmousemove event handler,
which calls into an event handler whenever the mouse moves
within the window, giving the x and y coordinates that it
moved to. We also recorded the time in milliseconds when
the event ﬁred.
To estimate the amount of entropy in the samples, we
tried to predict the x, y and t coordinates for each sample
from previous samples using three models – constant, linear
and quadratic. For the constant model, we estimated that
the position of the current sample would be the same as
the previous one. For the linear model, we estimated that
the difference in position would be the same as for the
previous pair of samples. For the quadratic model we did
the same with differences of differences. We predicted that t
would always be linear. We removed the samples which were
predicted perfectly, just as our entropy collector does. For
each sample, we chose the model that gave the lowest error
in the prediction. We then computed the Shannon entropy
of the resulting distribution. Results are shown in Table II.
On all three sites the mean is over 5.5 bits of entropy
per mouse move event. Along with the mean, we show in
Table II the minimum and lowest 5th percentile of users. We
show the lowest 5th percentile in order to give some idea
as to how rare the minimum case is. The minimum and 5th
percentile are shown from users with at least 32 samples in
order to prevent users with very few samples from skewing
the minimum.
We conservatively estimated each site to have at least
5.5 bits per sample on average, but because of the outlying
minimal cases, we chose to assign only 2 bits of estimated
entropy to each sample. Since we require 256 bits of
estimated entropy before we consider the generator to be
seeded, seeding should be secure even if this estimate is too
high by a factor of 2 to 3.
Both user interaction and timing measurements are event-
driven entropy sources and cannot provide entropy on
demand. If the encrypt function is called before the
MOUSE MOVEMENT ENTROPY IN BITS PER SAMPLE
Table II
Site
Forum
Survey
Blog
Users
Samples
Mean Min
9245
38
255
4037k
58k
141k
5.5
7.6
6.6
2.5
5.2
2.2
5%
4.2
5.2
4.6
generator is seeded there is no choice but to return an error.
This is because Javascript is single-threaded and the PRNG
cannot block to wait until it is seeded. If the calling code
happens to call encrypt before the generator is seeded,
it needs to handle the resulting error by asking the user to
move his or her mouse until the generator is seeded (which
is indicated by a callback).
Figure 1 shows how long it takes before the generator
is seeded by regular user interaction with the page. Data
is provided for the three sites we tested. Since we extract
2 bits of entropy per mouse move sample, we need 128
samples to generate a 256-bit AES key. Our data show that
the median time for the generator to be seeded to the
default level of 128 samples is 9, 28 and 41 seconds on the
survey, forum and blog, respectively. These measurements
are consistent with our intuition:
(cid:129) On the survey site users move their mouse from ﬁeld to
ﬁeld as they answer questions, resulting in fast seeding
of the generator.
(cid:129) On the blog site users mostly read and hardly move
their mouse, causing the generator to take some time
before it is seeded.
Halprin and Naor [17] proposed an alternate approach for
generating cryptographic randomness from user interaction
by engaging the user in a game. While not transparent to the
user, their approach is another viable method for generating
cryptographic randomness with the user’s help.
E. Cookies
Server-side authentication cookies often have considerable
entropy. We provide an option to fold cookies into the
entropy pool. To avoid leaking the cookies if the PRNG
state is compromised, we still require additional entropy
from user interaction. We can also encode our PRNG state
into a cookie or into local storage in order to save entropy
between page loads. Neither of these methods is particularly
trustworthy, as an attacker may be able to see or overwrite
our cookies, but they provide defense in depth.
F. PRNG
Our PRNG itself is a modiﬁed version of the Fortuna
PRNG [18]. Fortuna produces pseudorandom words by
running a block cipher in counter mode. The counter always
increments and is never reset, which prevents short cycles.
After every request for pseudorandom words is satisﬁed the
377
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:09:39 UTC from IEEE Xplore.  Restrictions apply. 
)
d
e
d
e
e
s
(
r
p
)
t
f
e
l
(
r
p
1.00
0.75
0.50
0.25
0.00
1.00
0.75
0.50
0.25
0.00
0
10
20
30
40
50
60
0
10
20
30
40
50
60
1.00
0.75
0.50
0.25
0.00
1.00
0.75
0.50
0.25
0.00
1.00
0.75
0.50
0.25
0.00
1.00
0.75
0.50
0.25
0.00
32 samples
64 samples
128 samples
0
10
20
30
40
50
60
0
10
20
30
40
50
60
0
10
20
30
40
50
60
0
10
20
30
40
50
60
time (s)
survey
time (s)
forum
time (s)
blog
Figure 1. Time required to seed the PRNG from regular user interaction with the page. The top three graphs show the fraction of users still on the page
who are seeded to each strength. The bottom three graphs show the fraction of users who have left the page.
key is replaced by the next output of the generator. This
“rekey” step prevents an adversary who compromises the
generator from recovering previously-generated data.
Additionally, the generator reseeds itself using entropy
collected in n “pools” numbered 0 through n−1. The pools
are implemented as streaming SHA-256 contexts, a common
heuristic for entropy extraction. Collected entropy is divided
by round-robin between the pools. On the ith reseed, the
generator uses pools 0 through m for the largest m such that
2m divides i. As a result, the mth pool is only used every 2m
reseeds, so that even if an adversary can predict or control
all but an  fraction of the seed data, the generator will still
recover from a compromise after O(− log /) samples, a
factor of − log  slower than the fastest possible recovery.
The Fortuna design uses n = 32 pools, but the round-
robin makes the initial seeding very slow. This doesn’t
matter in the context of a system-wide PRNG which saves
its state between reboots, but on the Web, it matters. As a
result, we instead start with n = 1, and create a new pool
every time the last pool is used. This doesn’t change the
O(− log /) recovery bound.
Unlike Fortuna, we include a rudimentary entropy esti-
mator so that we can estimate when the generator is safe
to use. By default, we require 256 bits of estimated entropy
before we consider the generator to be seeded. After the ﬁrst
seeding, our generator reseeds itself every time pool 0 has
collected 80 bits of estimated entropy, but no sooner than
100 milliseconds after the last reseed. To save computation,
we defer reseeds until the next time the generator is called.
V. EXPERIMENTS
Our measurements show the effect of various implemen-
tation choices on the library’s performance and code size.
We also compare our library to previous implementations of
AES.
A. Comparison to other implementations
We compared our implementation with ﬁve existing AES
implementations in Javascript:
(cid:129) Clipperz, an online password manager [1]
(cid:129) An implementation by Eastern Kentucky University’s
Eugene Styere [3]
(cid:129) Google’s Browser Sync [2]
(cid:129) Javascrypt, a cryptography tool by Fourmilab’s John
Walker [4]
(cid:129) An implementation by Movable Type’s Chris Veness [5]
For each of these implementations, we “crunched” the code
with an online Javascript miniﬁer [19] to remove comments
and long variable names,
then measured the code size.
We measured encryption speed on ﬁve different browsers: