### Command Parameters
- `[-SkipRegistryLoggedOn]`
- `[-OverrideUsername ]`
- `[-RealDNSName ]`
- `[-CollectAllProperties]`
- `[-Loop]`
- `[-LoopDuration ]`
- `[-LoopInterval ]`
- `[-StatusInterval ]`
- `[-Verbosity ]`
- `[-Help]`
- `[-Version]`

### Description
Using reflection and assembly loading, the compiled BloodHound C# ingestor is loaded into memory and executed without writing to disk. Parameters are converted to equivalent CLI arguments for the SharpHound executable and passed via reflection. The appropriate function calls ensure that assembly dependencies are loaded correctly.

### Related Links
- For examples, type: `get-help Invoke-BloodHound -examples`
- For detailed information, type: `get-help Invoke-BloodHound -detailed`
- For technical information, type: `get-help Invoke-BloodHound -full`

### Example: Checking SharpHound Options
We will start with the `-CollectionMethod` parameter, which specifies the various collection methods. In this case, we will use the `All` method, which performs all collection methods except for local group policies.

By default, SharpHound gathers data in JSON files and automatically zips them for easy transfer to Kali Linux. We will save the output file on our desktop with a "corp audit" prefix:

```powershell
PS C:\Tools> Invoke-BloodHound -CollectionMethod All -OutputDirectory C:\Users\stephanie\Desktop\ -OutputPrefix "corp audit"
```

### Running SharpHound to Collect Domain Data
The data collection process may take some time depending on the environment size. Here is an example of the SharpHound output:

```plaintext
2022-10-12T09:20:22.3688459-07:00|INFORMATION|This version of SharpHound is compatible with the 4.2 Release of BloodHound
2022-10-12T09:20:22.5909898-07:00|INFORMATION|Resolved Collection Methods: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote
2022-10-12T09:20:22.6383624-07:00|INFORMATION|Initializing SharpHound at 9:20 AM on 10/12/2022
2022-10-12T09:20:22.9661022-07:00|INFORMATION|Flags: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote
2022-10-12T09:20:23.3881009-07:00|INFORMATION|Beginning LDAP search for corp.com
2022-10-12T09:20:23.4975127-07:00|INFORMATION|Producer has finished, closing LDAP channel
2022-10-12T09:20:23.4975127-07:00|INFORMATION|LDAP channel closed, waiting for consumers
2022-10-12T09:20:53.6398934-07:00|INFORMATION|Status: 0 objects finished (+0 0)/s -- Using 96 MB RAM
2022-10-12T09:21:13.6762695-07:00|INFORMATION|Consumers finished, closing output channel
2022-10-12T09:21:13.7396906-07:00|INFORMATION|Output channel closed, waiting for output task to complete
Closing writers
2022-10-12T09:21:13.8983935-07:00|INFORMATION|Status: 106 objects finished (+106 2.12)/s -- Using 104 MB RAM
2022-10-12T09:21:13.8983935-07:00|INFORMATION|Enumeration finished in 00:00:50.5065909
2022-10-12T09:21:14.0094454-07:00|INFORMATION|Saving cache with stats: 66 ID to type mappings, 68 name to SID mappings, 2 machine sid mappings, 2 sid to domain mappings, 0 global catalog mappings.
2022-10-12T09:21:14.0255279-07:00|INFORMATION|SharpHound Enumeration Completed at 9:21 AM on 10/12/2022! Happy Graphing!
```

### SharpHound Output
Based on the output, we scanned a total of 106 objects. The collected data is stored in a zip file on the desktop:

```powershell
PS C:\Tools> ls C:\Users\stephanie\Desktop\
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        9/27/2022 11:00 PM       12680   corp_audit_20220927230019_BloodHound.zip
-a----        9/27/2022 11:00 PM        9734   MTk2MmZkNjItY2IyNC00MWMzLTk5YzMtM2E1ZDcwYThkMzRl.bin
```

### Analyzing Data with BloodHound
To analyze the domain data using BloodHound in Kali Linux, we first need to start the Neo4j service, which is installed by default. Neo4j is an open-source graph database that facilitates the visual representation of collected data.

Start the Neo4j service:

```bash
kali@kali:~$ sudo neo4j start
Directories in use:
home: /usr/share/neo4j
config: /usr/share/neo4j/conf
logs: /usr/share/neo4j/logs
plugins: /usr/share/neo4j/plugins
import: /usr/share/neo4j/import
data: /usr/share/neo4j/data
certificates: /usr/share/neo4j/certificates
licenses: /usr/share/neo4j/licenses
run: /usr/share/neo4j/run
Starting Neo4j.
Started neo4j (pid:334819). It is available at http://localhost:7474
There may be a short delay until the server is ready.
```

After starting Neo4j, browse to `http://localhost:7474` and log in with the default credentials (`neo4j` as both username and password). You will be prompted to change the password.

Next, start BloodHound from the terminal:

```bash
kali@kali:~$ bloodhound
```

Log in to the Neo4j database using the `neo4j` username and the new password. Since no data has been imported yet, there is no visual representation of the domain. Transfer the zip file from the Windows machine to Kali Linux and upload it using the Upload Data function in BloodHound.

### Database Information
After uploading the data, check the database information by clicking the "More Info" tab. This will show the number of sessions, ACLs, users, groups, and other details. For example, in a small environment, you might find four total sessions, 10 users, 57 groups, and more.

### Analysis
Click the "Analysis" button to see pre-built analysis options. For example, use the "Find all Domain Admins" query under "Domain Information." This will display a graph showing the relationships between users and the Domain Admins group.

### Shortest Paths
One of BloodHound's strengths is its ability to find the shortest path to a goal, such as taking over a particular computer, user, or group. Use the "Find Shortest Paths to Domain Admins" query to get an overview. This will reveal the best attack approach based on the graph.

### Conclusion
BloodHound is a powerful tool for analyzing and visualizing domain data. By following these steps, you can effectively gather and analyze data to identify potential attack paths in your environment.

**PWK - Copyright Â© 2023 OffSec Services Limited. All rights reserved.**
**Made in Morocco**
**Penetration Testing with Kali Linux**