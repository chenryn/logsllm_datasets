based on vector encryption over the extension F𝑝2 as well as over
the base field F𝑝. For the latter setting, we need to first transform
a linear PCP over F𝑝2 to a linear PCP over F𝑝. We describe this
transformation in Appendix C.1.
3.2 Linear-Only Vector Encryption
We begin with the definition of a vector encryption scheme (adapted
from [31]), and then define the linear-only [30, 31] property we
rely on for our zkSNARK constructions.
Definition 3.1 (Vector Encryption). Let F be a finite field. A secret-
key additively-homomorphic vector encryption scheme over a
vector space Fℓ consists of a tuple of algorithms ΠEnc = (Setup,
Encrypt, Decrypt, Add) with the following properties:
• Setup(1𝜆, 1ℓ) → (pp, sk): On input the security parameter 𝜆 and
the plaintext dimension ℓ, the setup algorithm outputs public
parameters pp and a secret key sk.
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea217• Encrypt(sk, v) → ct: On input the secret key sk and a vector
v ∈ Fℓ, the encryption algorithm outputs a ciphertext ct.
• Decrypt(sk, ct) → v/⊥: On input the secret key sk and a cipher-
text ct, the decryption algorithm either outputs a vector v ∈ Fℓ
or a special symbol ⊥.
• Add(pp, {ct𝑖}𝑖∈[𝑛], {𝑐𝑖}𝑖∈[𝑛]) → ct∗: On input the public param-
eters, a collection of ciphertexts ct1, . . . , ct𝑛 and scalars 𝑐1, . . . , 𝑐𝑛 ∈
F, the addition algorithm outputs a new ciphertext ct∗.
Moreover, ΠEnc should satisfy the following properties:
• Additive homomorphism: For all security parameters 𝜆 ∈ N,
vectors v1, . . . , v𝑘 ∈ Fℓ, and scalars 𝑦1, . . . , 𝑦𝑘 ∈ F, where 𝑘 =
𝑘(𝜆),
(3.1)
Decrypt(sk, ct∗) =

𝑖∈[𝑘]
Pr
 = 1 − negl(𝜆),
𝑦𝑖v𝑖
where (pp, sk) ← Setup(1𝜆, 1ℓ), ct𝑖 ← Encrypt(sk, v𝑖) for all 𝑖 ∈
[𝑘], and ct∗ ← Add(pp, {ct𝑖}𝑖∈[𝑘], {𝑦𝑖}𝑖∈[𝑘]). We say that ΠEnc
is additively homomorphic with respect to a set 𝑆 ⊆ 𝑅𝑘
𝑝 if Eq. (3.1)
holds for all (𝑦1, . . . , 𝑦𝑘) ∈ 𝑆. Note that additive homomorphism
implies correctness of decryption.
• CPA security: For all security parameters 𝜆 ∈ N and all efficient
adversaries A,
Pr(cid:104)AO𝑏 (sk,·,·)(1𝜆, pp) = 𝑏(cid:105)
= 1/2 + negl(𝜆),
(3.2)
r← {0, 1}, and oracle O𝑏 takes
where (pp, sk) ← Setup(1𝜆, 1ℓ), 𝑏
inputs (sk, v0, v1) and outputs ct𝑏 ← Encrypt(sk, v𝑏). If Eq. (3.2)
holds against all efficient adversaries A making at most 𝑄 queries
to O𝑏, then we say ΠEnc is 𝑄-query CPA secure.
Definition 3.2 (Linear-Only Vector Encryption [30, adapted]). A
vector encryption scheme ΠEnc = (Setup, Encrypt, Decrypt, Add)
over Fℓ is strictly linear-only if for all polynomial-size adversaries
A, there is a polynomial-size extractor E such that for all secu-
rity parameters 𝜆 ∈ N, auxiliary inputs 𝑧 ∈ {0, 1}poly(𝜆), and any
efficient plaintext generator M,
Pr[ExptLinearExtΠEnc,A,M,E,𝑧(1𝜆) = 1] = negl(𝜆),
where the experiment ExptLinearExtΠEnc,A,M,E,𝑧(1𝜆) is defined as
follows:
(1) The challenger starts by sampling (pp, sk) ← Setup(1𝜆, 1ℓ) and
(v1, . . . , v𝑚) ← M(1𝜆, pp). It computes ct𝑖 ← Encrypt(sk, v𝑖)
for each 𝑖 ∈ [𝑚] and runs A(pp, ct1, . . . , ct𝑚; 𝑧) to obtain a
tuple (ct′
1, . . . , ct′
𝑘).
(2) The challenger computes 𝚷 ← E(pp, ct1, . . . , ct𝑚; 𝑧) and V′ ←
| v𝑚]T, where 𝚷 ∈ F𝑘×𝑚 and V′ ∈ F𝑘×ℓ. The
𝚷 · [v1 |
· · ·
experiment outputs 1 if there exists an index 𝑖 ∈ [𝑘] such that
𝑖, where v′
𝑖) ≠ ⊥ and Decrypt(sk, ct′
Decrypt(sk, ct′
𝑖 ∈ Fℓ
is the 𝑖th row of V′. Otherwise, the experiments outputs 0.
We provide additional discussion of these definitions and com-
pare them to previous definitions [30, 31] in the full version of this
paper [78].
𝑖) ≠ v′
Circuit privacy. In addition to the above properties, we addition-
ally require a circuit privacy property [66]. Circuit privacy says
that the ciphertext output by Add can be simulated given only
the underlying plaintext value, without knowledge of the linear
combination used to construct the ciphertext. This is important
for arguing zero knowledge (see Section 3.4). We give the formal
definition in Appendix C.2.
3.3 Candidate Linear-Only Vector Encryption
Our constructions work over the ring 𝑅 = Z[𝑥]/(𝑥𝑑 + 1) where
𝑑 is a power of 2. We specifically consider the cases where 𝑑 = 1
(𝑅 = Z) and 𝑑 = 2 (𝑅 = Z[𝑥]/(𝑥2 + 1)). For a positive integer 𝑝 ∈ N,
we write 𝑅𝑝 = 𝑅/𝑝𝑅. We represent elements of 𝑅 as a vector of
coefficients (i.e., as a vector Z𝑑). For an element 𝑟 ∈ 𝑅, we write
∥𝑟∥∞ to denote the ℓ∞ norm of the vector of coefficients of 𝑟. We
write 𝛾𝑅 to denote the expansion constant where for all 𝑟, 𝑠 ∈ 𝑅,
we have that ∥𝑟𝑠∥∞ ≤ 𝛾𝑅 ∥𝑟∥∞ ∥𝑠∥∞. In particular, 𝛾𝑅 = 1 when
𝑑 = 1 and 𝛾𝑅 = 2 when 𝑑 = 2. Finally, for a vector v ∈ 𝑅𝑛, we write
∥v∥𝑝 to denote the ℓ𝑝 norm ∥v′∥𝑝 of the vector v′ ∈ Z𝑑𝑛 formed
by concatenating the vector of coefficients of each element in v.
(Module) learning with errors. Security of our construction relies
on the module learning with errors (MLWE) assumption [40, 80]
(in addition to our linear-only conjecture). We state the MLWE
assumption in “normal form” where the secret is sampled from the
error distribution. This form of the problem is as hard as the version
where the secret key is sampled uniformly at random [6].
Definition 3.3 (Module Learning With Errors (MLWE) [40, 80]).
Fix a security parameter 𝜆, integers 𝑛 = 𝑛(𝜆), 𝑚 = 𝑚(𝜆), 𝑞 =
𝑞(𝜆), 𝑑 = 𝑑(𝜆) where 𝑑 is a power of two. Let 𝑅 = Z[𝑥]/(𝑥𝑑 +
1), 𝑅𝑞 = 𝑅/𝑞𝑅, and 𝜒 = 𝜒(𝜆) be an error distribution over 𝑅𝑞.
The (decisional) module learning with errors (MLWE) assumption
, s ← 𝜒𝑛, e ← 𝜒𝑚,
MLWE𝑛,𝑚,𝑑,𝑞,𝜒 states that for A
and u
𝑞 , the following two distributions are computationally
indistinguishable:
r← 𝑅𝑛×𝑚
r← 𝑅𝑚
𝑞
(A, sTA + eT) and (A, uT)
Remark 3.4 (Relation to LWE and RLWE). The module LWE
assumption generalizes both the classic learning with errors (LWE)
assumption [91] as well as the ring learning with errors (RLWE)
assumption [82]. In particular, LWE is MLWE instantiated with
𝑑 = 1 and RLWE is MLWE instantiated with 𝑛 = 1.
Vector encryption construction. We now describe our vector en-
cryption scheme. Our scheme is an adaptation of the Regev-based [91]
scheme of Peikert et al. [89], generalized to modules and with the
following additions/modifications:
• Secret-key encryption: Since a secret-key vector encryption
suffices for our designated-verifier zkSNARK,3 we consider a
secret-key version of the scheme. This reduces the concrete cost
for encryption (we can substitute a random vector in each ci-
phertext in place of a matrix-vector product with the public key).
Note that there are still public parameters in our scheme. These
3Using a public-key encryption scheme does not imply a publicly-verifiable zkSNARK
in this setting. There is no advantage to using a public-key encryption scheme to
instantiate the underlying encryption scheme.
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea218are used for re-randomization of homomorphically-evaluated
ciphertexts, and are not used for encryption.
• Message encoding: We encode the message in the least signifi-
cant bits of the ciphertext rather than the most significant bits.
When the plaintext modulus 𝑝 and ciphertext modulus 𝑞 are
coprime, these approaches are equivalent up to scaling [2]. In
our implementation, encoding a value 𝑘 in the least significant
bits of the ciphertext is more convenient since we avoid the need
to compute the value ⌊𝑘 · 𝑞/𝑝⌉ mod 𝑞 (which if implemented
improperly, can overflow our integer representation).
• Ciphertext re-randomization: For zero knowledge, we require
an additional circuit privacy property. Ciphertexts in this scheme
consist of pairs of vectors ct = (a, c). Homomorphic operations
on ciphertexts correspond to computing component-wise linear
combinations. In our construction, we include a public MLWE ma-
trix as part of the public parameters to re-randomize the vector a,
and we use standard noise smudging techniques (see Lemma A.2)
to re-randomize the vector c. Previously, Gennaro et al. [65] sug-
gest that the first component a is already random by appealing
to the leftover hash lemma; unfortunately, this only applies in
the setting where the coefficients of the linear combination have
sufficient min-entropy (which is not necessarily the case in the
zkSNARK construction). We show that in our case and under the
MLWE assumption,4 our construction provably satisfies circuit
privacy without needing any additional assumption on the choice
of linear combination.
• Ciphertext sparsification. Our linear-only definition (Defini-
tion 3.2) essentially requires that the only way an efficient ad-
versary can generate a valid ciphertext is by taking linear com-
binations of valid ciphertexts. This means that the set of valid
ciphertexts must be sparse (to prevent oblivious sampling of a
valid ciphertext). Previous works [30, 31, 64] suggest double en-
cryption to realize this property. With double encryption, valid
ciphertexts ct = (ct1, ct2) are defined as pairs of ciphertexts that
both encrypt identical messages. While this approach is applica-
ble in our setting, it doubles the length of the ciphertexts.
We propose a similar, but more efficient, approach tailored for
vector encryption. Namely, if our goal is to encrypt elements
from a vector space Fℓ, we enlarge the plaintext space to Fℓ+𝜏,
where 𝜏 is a sparsification parameter. During setup, we sample a
r← Fℓ×𝜏 which is included as part of the secret
random matrix T
key. Then, to encrypt a vector v ∈ Fℓ, we instead encrypt the
vector uT = [vT | (Tv)T]. During decryption, after recovering
uT = [uT1 | uT2], the decryption algorithm outputs ⊥ if u2 ≠ Tu1.
Semantic security of the vector encryption scheme ensures that
the secret transformation T is computationally hidden from the
view of the adversary. By setting the sparsification parameter
𝜏 accordingly, we can ensure that for any fixed vector uT =
[uT1 | uT2], the probability that u2 = Tu1 is negligible (over the
randomness of T). We conjecture that our approach also yields
an encryption scheme that satisfies the linear-only assumption.
The advantage of this approach is that the ciphertext size in the
underlying vector encryption scheme grows additively with the
4We could make this step statistical by relying on the leftover hash lemma, but this
requires much larger parameters. Instead, we rely on MLWE and settle for computa-
tional circuit privacy (which translates to computational zero knowledge).
plaintext dimension (i.e., the resulting ciphertext size is 𝑛 + ℓ + 𝜏
rather than 2(𝑛 + ℓ) as with “encrypting twice”).
We now describe our vector encryption scheme:
Construction 3.5 (Vector Encryption). Let 𝑑 = 𝑑(𝜆) be a power
of two and let 𝑅 = Z[𝑥]/(𝑥𝑑 + 1). Fix lattice parameters 𝑝 = 𝑝(𝜆),
𝑞 = 𝑞(𝜆), 𝑛 = 𝑛(𝜆) and an error distribution 𝜒 = 𝜒(𝜆) over 𝑅𝑞. We
additionally define the following parameters:
• ℓ: the plaintext dimension
• 𝜏: the sparsification parameter
• 𝐵: the noise smudging bound
Let ℓ′ = ℓ + 𝜏. We construct a secret-key vector encryption scheme
ΠEnc = (Setup, Encrypt, Decrypt, Add) over 𝑅𝑝 as follows:
r←
• Setup(1𝜆, 1ℓ): Sample matrices A
𝑅𝜏×ℓ
. Output
the secret key sk = (S, T) and the public parameters pp = (A, D).
• Encrypt(sk, v): On input the secret key sk = (S, T) and a vector
𝑝, construct the concatenated vector uT = [vT | (Tv)T] ∈
v ∈ 𝑅ℓ
𝑅ℓ′
𝑞 , e ← 𝜒ℓ′ and compute c ← STa+𝑝e+u ∈ 𝑅ℓ′
𝑝 . Sample a
𝑞 .
Output the ciphertext ct = (a, c).
• Add(pp, {ct𝑖}𝑖∈[𝑘], {𝑦𝑖}𝑖∈[𝑘]): On input the public parameters
pp = (A, D), ciphertexts ct𝑖 = (a𝑖, c𝑖) for 𝑖 ∈ [𝑘], and scalars
r← [−𝐵, 𝐵]𝑑ℓ′ and output
𝑦𝑖 ∈ 𝑅𝑝, sample r ← 𝜒𝑛, e𝑎 ← 𝜒𝑛, e𝑐
the ciphertext
, and E ← 𝜒𝑛×ℓ′. Compute D ← STA+ 𝑝ET ∈ 𝑅ℓ′×𝑛
, S ← 𝜒𝑛×ℓ′, T
r← 𝑅𝑛
r← 𝑅𝑛×𝑛
𝑞
𝑞
𝑝
(cid:16) 
𝑖∈[𝑘]
𝑦𝑖a𝑖 + Ar + 𝑝e𝑎, 
𝑖∈[𝑘]
ct∗ =
(cid:17).
𝑦𝑖c𝑖 + Dr + 𝑝e𝑐
(3.3)
𝑝. Output v1 if v2 = Tv1 ∈ 𝑅𝜏
• Decrypt(sk, ct): On input the secret key sk = (S, T) and a ci-
phertext ct = (a, c), compute z ← c − STa ∈ 𝑅ℓ′
𝑞 . Compute
u = z mod 𝑝, and parse uT = [vT1 | vT2] where v1 ∈ 𝑅ℓ