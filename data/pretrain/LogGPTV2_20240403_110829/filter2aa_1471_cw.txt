Table 10-14 Provider classifications
Cla
ssifi
cati
on
Description
Clas
s
Can supply, modify, delete, and enumerate a provider-specific 
class. It can also support query processing. Active Directory is a 
rare example of a service that is a class provider.
Inst
Can supply, modify, delete, and enumerate instances of system 
anc
e
and provider-specific classes. An instance represents a managed 
object. It can also support query processing.
Pro
pert
y
Can supply and modify individual object property values.
Met
hod
Supplies methods for a provider-specific class.
Eve
nt
Generates event notifications.
Eve
nt 
con
sum
er
Maps a physical consumer to a logical consumer to support event 
notification.
The Event Log provider defines the instance data and lets management
applications enumerate the records. To let management applications use
WMI to back up and restore the Event Log files, the Event Log provider
implements backup and restore methods for Event Log File objects. Doing so
makes the Event Log provider a Method provider. Finally, a management
application can register to receive notification whenever a new record writes
to one of the Event Logs. Thus, the Event Log provider serves as an Event
provider when it uses WMI event notification to tell WMI that Event Log
records have arrived.
The Common Information Model and the Managed
Object Format Language
The CIM follows in the steps of object-oriented languages such as C++ and
C#, in which a modeler designs representations as classes. Working with
classes lets developers use the powerful modeling techniques of inheritance
and composition. Subclasses can inherit the attributes of a parent class, and
they can add their own characteristics and override the characteristics they
inherit from the parent class. A class that inherits properties from another
class derives from that class. Classes also compose: a developer can build a
class that includes other classes. CIM classes consist of properties and
methods. Properties describe the configuration and state of a WMI-managed
resource, and methods are executable functions that perform actions on the
WMI-managed resource.
The DMTF provides multiple classes as part of the WBEM standard.
These classes are CIM’s basic language and represent objects that apply to all
areas of management. The classes are part of the CIM core model. An
example of a core class is CIM_ManagedSystemElement. This class contains
a few basic properties that identify physical components such as hardware
devices and logical components such as processes and files. The properties
include a caption, description, installation date, and status. Thus, the
CIM_LogicalElement and CIM_PhysicalElement classes inherit the attributes
of the CIM_ManagedSystemElement class. These two classes are also part of
the CIM core model. The WBEM standard calls these classes abstract classes
because they exist solely as classes that other classes inherit (that is, no
object instances of an abstract class exist). You can therefore think of
abstract classes as templates that define properties for use in other classes.
A second category of classes represents objects that are specific to
management areas but independent of a particular implementation. These
classes constitute the common model and are considered an extension of the
core model. An example of a common-model class is the CIM_FileSystem
class, which inherits the attributes of CIM_LogicalElement. Because
virtually every operating system—including Windows, Linux, and other
varieties of UNIX—rely on file system–based structured storage, the
CIM_FileSystem class is an appropriate constituent of the common model.
The final class category, the extended model, comprises technology-
specific additions to the common model. Windows defines a large set of
these classes to represent objects specific to the Windows environment.
Because all operating systems store data in files, the CIM model includes the
CIM_LogicalFile class. The CIM_DataFile class inherits the
CIM_LogicalFile class, and Windows adds the Win32_PageFile and
Win32_ShortcutFile file classes for those Windows file types.
Windows includes different WMI management applications that allow an
administrator to interact with WMI namespaces and classes. The WMI
command-line utility (WMIC.exe) and Windows PowerShell are able to
connect to WMI, execute queries, and invoke WMI class object methods.
Figure 10-28 shows a PowerShell window extracting information of the
Win32_NTEventlogFile class, part of the Event Log provider. This class
makes extensive use of inheritance and derives from CIM_DataFile. Event
Log files are data files that have additional Event Log–specific attributes
such as a log file name (LogfileName) and a count of the number of records
that the file contains (NumberOfRecords). The Win32_NTEventlogFile is
based on several levels of inheritance, in which CIM_DataFile derives from
CIM_LogicalFile, which derives from CIM_LogicalElement, and
CIM_LogicalElement derives from CIM_ManagedSystemElement.
Figure 10-28 Windows PowerShell extracting information from the
Win32_NTEventlogFile class.
As stated earlier, WMI provider developers write their classes in the MOF
language. The following output shows the definition of the Event Log
provider’s Win32_NTEventlogFile, which has been queried in Figure 10-28:
Click here to view code image
[dynamic: ToInstance, provider("MS_NT_EVENTLOG_PROVIDER"): 
ToInstance, SupportsUpdate,
Locale(1033): ToInstance, UUID("{8502C57B-5FBB-11D2-AAC1-
006008C78BC7}"): ToInstance]
class Win32_NTEventlogFile : CIM_DataFile
{
   [Fixed: ToSubClass, read: ToSubClass] string LogfileName;
   [read: ToSubClass, write: ToSubClass] uint32 MaxFileSize;
   [read: ToSubClass] uint32 NumberOfRecords;
   [read: ToSubClass, volatile: ToSubClass, ValueMap{"0", "1..365", 
"4294967295"}:
    ToSubClass] string OverWritePolicy;
   [read: ToSubClass, write: ToSubClass, Range("0-365 | 4294967295"): 
ToSubClass]
    uint32 OverwriteOutDated;
   [read: ToSubClass] string Sources[];
   [ValueMap{"0", "8", "21", ".."}: ToSubClass, implemented, 
Privileges{
    "SeSecurityPrivilege", "SeBackupPrivilege"}: ToSubClass]
      uint32 ClearEventlog([in] string ArchiveFileName);
   [ValueMap{"0", "8", "21", "183", ".."}: ToSubClass, implemented, 
Privileges{
    "SeSecurityPrivilege", "SeBackupPrivilege"}: ToSubClass]
      uint32 BackupEventlog([in] string ArchiveFileName);
};
One term worth reviewing is dynamic, which is a descriptive designator
for the Win32_NTEventlogFile class that the MOF file in the preceding
output shows. Dynamic means that the WMI infrastructure asks the WMI
provider for the values of properties associated with an object of that class
whenever a management application queries the object’s properties. A static
class is one in the WMI repository; the WMI infrastructure refers to the
repository to obtain the values instead of asking a provider for the values.
Because updating the repository is a relatively expensive operation, dynamic
providers are more efficient for objects that have properties that change
frequently.
EXPERIMENT: Viewing the MOF definitions of WMI
classes
You can view the MOF definition for any WMI class by using the
Windows Management Instrumentation Tester tool (WbemTest)
that comes with Windows. In this experiment, we look at the MOF
definition for the Win32_NTEventLogFile class:
1. 
Type Wbemtest in the Cortana search box and press Enter.
The Windows Management Instrumentation Tester should
open.
2. 
Click the Connect button, change the Namespace to
root\cimv2, and connect. The tool should enable all the
command buttons, as shown in the following figure:
3. 
Click the Enum Classes button, select the Recursive option
button, and then click OK.
4. 
Find Win32_NTEventLogFile in the list of classes, and then
double-click it to see its class properties.
5. 
Click the Show MOF button to open a window that
displays the MOF text.
After constructing classes in MOF, WMI developers can supply the class
definitions to WMI in several ways. WDM driver developers compile a MOF
file into a binary MOF (BMF) file—a more compact binary representation
than an MOF file—and can choose to dynamically give the BMF files to the
WDM infrastructure or to statically include it in their binary. Another way is
for the provider to compile the MOF and use WMI COM APIs to give the
definitions to the WMI infrastructure. Finally, a provider can use the MOF
Compiler (Mofcomp.exe) tool to give the WMI infrastructure a classes-
compiled representation directly.
 Note
Previous editions of Windows (until Windows 7) provided a graphical
tool, called WMI CIM Studio, shipped with the WMI Administrative
Tool. The tool was able to graphically show WMI namespaces, classes,
properties, and methods. Nowadays, the tool is not supported or available
for download because it was superseded by the WMI capacities of
Windows PowerShell. PowerShell is a scripting language that does not
run with a GUI. Some third-party tools present a similar interface of CIM
Studio. One of them is WMI Explorer, which is downloadable from
https://github.com/vinaypamnani/wmie2/releases.
The Common Information Model (CIM) repository is stored in the
%SystemRoot%\System32\wbem\Repository path and includes the
following:
■    Index.btr Binary-tree (btree) index file
■    MappingX.map Transaction control files (X is a number starting
from 1)
■    Objects.data CIM repository where managed resource definitions are
stored
The WMI namespace
Classes define objects, which are provided by a WMI provider. Objects are
class instances on a system. WMI uses a namespace that contains several
subnamespaces that WMI arranges hierarchically to organize objects. A
management application must connect to a namespace before the application
can access objects within the namespace.
WMI names the namespace root directory ROOT. All WMI installations
have four predefined namespaces that reside beneath root: CIMV2, Default,
Security, and WMI. Some of these namespaces have other namespaces
within them. For example, CIMV2 includes the Applications and ms_409
namespaces as subnamespaces. Providers sometimes define their own
namespaces; you can see the WMI namespace (which the Windows device
driver WMI provider defines) beneath ROOT in Windows.
Unlike a file system namespace, which comprises a hierarchy of
directories and files, a WMI namespace is only one level deep. Instead of
using names as a file system does, WMI uses object properties that it defines
as keys to identify the objects. Management applications specify class names
with key names to locate specific objects within a namespace. Thus, each
instance of a class must be uniquely identifiable by its key values. For
example, the Event Log provider uses the Win32_NTLogEvent class to
represent records in an Event Log. This class has two keys: Logfile, a string;
and RecordNumber, an unsigned integer. A management application that
queries WMI for instances of Event Log records obtains them from the
provider key pairs that identify records. The application refers to a record
using the syntax that you see in this sample object path name:
Click here to view code image
\\ANDREA-LAPTOP\root\CIMV2:Win32_NTLogEvent.Logfile="Application",
                                                     RecordNumber="1"
The first component in the name (\\ANDREA-LAPTOP) identifies the
computer on which the object is located, and the second component
(\root\CIMV2) is the namespace in which the object resides. The class name
follows the colon, and key names and their associated values follow the
period. A comma separates the key values.
WMI provides interfaces that let applications enumerate all the objects in a
particular class or to make queries that return instances of a class that match a
query criterion.
Class association
Many object types are related to one another in some way. For example, a
computer object has a processor, software, an operating system, active
processes, and so on. WMI lets providers construct an association class to
represent a logical connection between two different classes. Association
classes associate one class with another, so the classes have only two
properties: a class name and the Ref modifier. The following output shows an
association in which the Event Log provider’s MOF file associates the
Win32_NTLogEvent class with the Win32_ComputerSystem class. Given an
object, a management application can query associated objects. In this way, a
provider defines a hierarchy of objects.
Click here to view code image
[dynamic: ToInstance, provider("MS_NT_EVENTLOG_PROVIDER"): 
ToInstance, EnumPrivileges{"SeSe
curityPrivilege"}: ToSubClass, Privileges{"SeSecurityPrivilege"}: 
ToSubClass, Locale(1033):
ToInstance, UUID("{8502C57F-5FBB-11D2-AAC1-006008C78BC7}"): 
ToInstance, Association:
DisableOverride ToInstance ToSubClass]
class Win32_NTLogEventComputer
{
   [key, read: ToSubClass] Win32_ComputerSystem ref Computer;
   [key, read: ToSubClass] Win32_NTLogEvent ref Record;
};
Figure 10-29 shows a PowerShell window displaying the first
Win32_NTLogEventComputer class instance located in the CIMV2
namespace. From the aggregated class instance, a user can query the
associated Win32_ComputerSystem object instance WIN-46E4EFTBP6Q,
which generated the event with record number 1031 in the Application log
file.
Figure 10-29 The Win32_NTLogEventComputer association class.
EXPERIMENT: Using WMI scripts to manage
systems
A powerful aspect of WMI is its support for scripting languages.
Microsoft has generated hundreds of scripts that perform common
administrative tasks for managing user accounts, files, the registry,
processes, and hardware devices. The Microsoft TechNet Scripting
Center website serves as the central location for Microsoft scripts.
Using a script from the scripting center is as easy as copying its text
from your Internet browser, storing it in a file with a .vbs extension,
and running it with the command cscript script.vbs, where
script is the name you gave the script. Cscript is the command-
line interface to Windows Script Host (WSH).
Here’s a sample TechNet script that registers to receive events
when Win32_Process object instances are created, which occur
whenever a process starts and prints a line with the name of the
process that the object represents:
Click here to view code image
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    & "{impersonationLevel=impersonate}!\\" & strComputer & 
"\root\cimv2")
Set colMonitoredProcesses = objWMIService. _
    ExecNotificationQuery("SELECT * FROM 
__InstanceCreationEvent " _
        & " WITHIN 1 WHERE TargetInstance ISA 
'Win32_Process'")
i = 0
Do While i = 0
    Set objLatestProcess = colMonitoredProcesses.NextEvent
    Wscript.Echo objLatestProcess.TargetInstance.Name
Loop
The line that invokes ExecNotificationQuery does so with a
parameter that includes a select statement, which highlights
WMI’s support for a read-only subset of the ANSI standard
Structured Query Language (SQL), known as WQL, to provide a
flexible way for WMI consumers to specify the information they
want to extract from WMI providers. Running the sample script
with Cscript and then starting Notepad results in the following
output:
Click here to view code image
C:\>cscript monproc.vbs
Microsoft (R) Windows Script Host Version 5.812
Copyright (C) Microsoft Corporation. All rights reserved.
NOTEPAD.EXE
PowerShell supports the same functionality through the
Register-WmiEvent and Get-Event commands:
Click here to view code image
PS C:\> Register-WmiEvent -Query “SELECT * FROM 
__InstanceCreationEvent  WITHIN 1 WHERE
TargetInstance ISA 'Win32_Process'” -SourceIdentifier 
“TestWmiRegistration”
PS C:\> (Get-Event)
[0].SourceEventArgs.NewEvent.TargetInstance | Select-Object 
-Property
ProcessId, ExecutablePath
ProcessId ExecutablePath
--------- --------------
    76016 C:\WINDOWS\system32\notepad.exe
PS C:\> Unregister-Event -SourceIdentifier 
"TestWmiRegistration"
WMI implementation
The WMI service runs in a shared Svchost process that executes in the local
system account. It loads providers into the WmiPrvSE.exe provider-hosting
process, which launches as a child of the DCOM Launcher (RPC service)
process. WMI executes Wmiprvse in the local system, local service, or
network service account, depending on the value of the HostingModel
property of the WMI Win32Provider object instance that represents the
provider implementation. A Wmiprvse process exits after the provider is
removed from the cache, one minute following the last provider request it
receives.
EXPERIMENT: Viewing Wmiprvse creation
You can see WmiPrvSE being created by running Process Explorer
and executing Wmic. A WmiPrvSE process will appear beneath the
Svchost process that hosts the DCOM Launcher service. If Process
Explorer job highlighting is enabled, it will appear with the job
highlight color because, to prevent a runaway provider from
consuming all virtual memory resources on a system, Wmiprvse
executes in a job object that limits the number of child processes it
can create and the amount of virtual memory each process and all
the processes of the job can allocate. (See Chapter 5 for more
information on job objects.)
Most WMI components reside by default in %SystemRoot%\System32
and %SystemRoot%\System32\Wbem, including Windows MOF files, built-
in provider DLLs, and management application WMI DLLs. Look in the
%SystemRoot%\System32\Wbem directory, and you’ll find Ntevt.mof, the
Event Log provider MOF file. You’ll also find Ntevt.dll, the Event Log
provider’s DLL, which the WMI service uses.
Providers are generally implemented as dynamic link libraries (DLLs)
exposing COM servers that implement a specified set of interfaces
(IWbemServices is the central one. Generally, a single provider is
implemented as a single COM server). WMI includes many built-in
providers for the Windows family of operating systems. The built-in
providers, also known as standard providers, supply data and management
functions from well-known operating system sources such as the Win32
subsystem, event logs, performance counters, and registry. Table 10-15 lists
several of the standard WMI providers included with Windows.
Table 10-15 Standard WMI providers included with Windows
Provi
der
B
i
n
a
r
y
Na
me