[ 62 ]
Streamlining Infrastructure Management with AWX Chapter 3
AWX helps with credential management
For Ansible to effectively manage an Enterprise Linux environment, it must have some
form of credentials to access all of the servers it is managing. SSH authentication is
normally secured with either SSH keys or passwords, and in a large team of Ansible
operators, this can mean everyone has access to those passwords and SSH private keys
since they are required for Ansible to be run. Needless to say, this presents a security risk!
As stated previously, from a security standpoint, this is less than desirable as it would be
too easy for someone to copy and paste credentials and use them in a manner for which
they were not intended. AWX also handles this by storing required credentials in its
database, encrypted with a passphrase chosen at installation time. The GUI stores all the
credentials using reversible encryption so that they can be passed to Ansible when
playbooks are run later on. However, the GUI does not let you see any previously entered
sensitive data (such as passwords or SSH private keys)—that is to say that they can be
entered and changed, but you cannot show a password or SSH key in the GUI, and hence
operators can't easily make use of the AWX frontend to obtain credential information for
use elsewhere. In this way, AWX helps enterprises keep their credentials under lock and
key and ensures that they are only used for Ansible deployments and are not leaked or
used for any other unintended purposes.
Ansible Vault is an excellent tool for encrypting any sensitive data that a playbook needs to
operate on, be that for playbook data in the form of variables or storing server credentials
themselves, such as an SSH private key. Although Vault is highly secure, it is easy to see
the vault contents if you have the vault password (here, you would need to run a playbook
that uses the Vault). As a result, AWX provides unique functionality to supplement Ansible
and ensure security in an enterprise environment.
In these ways, AWX helps to address many of the challenges that enterprises face when
deploying Ansible in a large-scale environment. Before we complete this section of this
chapter, we will touch very briefly on how AWX can help you to integrate with other
services.
Integrating AWX with other services
There is a myriad of tools that AWX can integrate with—for example, both Red Hat's
Satellite 6 and CloudForms products (and their open source Katello and ManageIQ
counterparts) provide native integration with both AWX and Ansible Tower. These are just
two examples, and this is all possible because everything that we will explore as we
progress through this chapter is also accessible through an API and a command-line
interface.
[ 63 ]
Streamlining Infrastructure Management with AWX Chapter 3
This enables AWX to be integrated with a wide variety of services, or you could even write
your own that would run a playbook from AWX as a result of some other action, just by
calling the API. The command-line interface (called tower-cli, after the commercial
Ansible Tower product) is also incredibly useful, especially when it comes to
programmatically populating data in AWX. For example, if you wanted to add a host to a
static inventory, you could do this through the web user interface (as we shall demonstrate
later), the API, or using the CLI. The latter two methods lend themselves incredibly well to
integration with other services—for example, a Configuration Management Database
(CMDB) could push new hosts into an inventory using the API, without the need for any
manual action by the user.
To explore these two integration points further, you can refer to the following official
documentation sources:
The AWX API is documented here: https:/​/​docs.​ansible.​com/​ansible-​tower/
latest/​html/​towerapi/​index.​html.
The tower-cli command is documented here: https:/​/​tower-​cli.
readthedocs.​io/​en/​latest/​.
Given the wide and varied nature of such integrations, they are beyond the scope of this
book—however, it is important to mention them here because it is hoped that, as you read
this chapter, you will see opportunities for integration with other services and hence be able
to explore this topic further. In the next section of this chapter, we shall get hands-on with
AWX and look at a simple deployment. Later in this chapter, this will be followed up with
some example use cases.
Installing AWX
Installing AWX is a straightforward affair once you put the right prerequisites in place. In
fact, one of the prerequisites for AWX is Ansible, proving the complementary nature of this
technology. Most of the AWX code runs in a set of Docker containers, which makes it
straightforward to deploy in most Linux environments.
The use of Docker containers means that it is possible to run AWX in OpenShift or other
Kubernetes environments—however, for the sake of simplicity here, we will get started by
installing it on a single Docker host. Before you proceed any further, you should ensure
that your chosen host has the following:
Docker, fully installed and working
The docker-py module for your version of Python
[ 64 ]
Streamlining Infrastructure Management with AWX Chapter 3
Access to Docker Hub (internet access)
Ansible 2.4 or newer
Git 1.8.4 or newer
Docker Compose
These prerequisites are normally readily available for most Linux systems. Now, we will
perform the following steps to begin our installation:
1. Continuing our example of the Ubuntu system we used in the previous chapter,
we will run the following command to install the AWX requirements:
$ sudo apt-get install git docker.io python-docker docker-compose
2. Once these have been installed, the next task is to clone the AWX code from its
repository on GitHub:
$ git clone https://github.com/ansible/awx.git
The Git tool will faithfully clone the latest and greatest version of the AWX source
code—note that this project is under active development and there is a possibility
that the latest release might have bugs in it.
If you want to clone one of the stable AWX releases, browse
the Releases section of the repository and check out the desired
version: https:/​/​github.​com/ansible/​awx/​releases.
3. We have cloned the repository, and it is now time for us to define the
configuration for our installation of AWX, especially security details such as a
password. To get started on this, change into the installer directory under the
cloned repository:
$ cd awx/installer
Hopefully, the contents of this directory will look familiar to you after reading the
previous chapter. There is an inventory file, a playbook for us to run
called install.yml, and a roles/ directory. However, don't go and run
the install.yml playbook just yet as there are some variables in the inventory
file that we must set before we proceed.
[ 65 ]
Streamlining Infrastructure Management with AWX Chapter 3
If you take a look through the inventory file, you will see there is a great deal of
configuration that can occur inside it. Some variables are commented out, while
others are set to default values. There is a minimum of six variables that I
recommend that you set before installing AWX, and these are as follows:
Variables name Recommended value
This is the default password for the admin user—you will need this
admin_password the first time you log in, so be sure to set it to something memorable
and secure!
This is the password for the backend PostgreSQL database—be sure
pg_password
to set it to something unique and secure.
This is the directory on the local filesystem where the PostgreSQL
container will store its data—it defaults to a directory
under /tmp, which, on most systems, will be automatically cleaned
postgres_data_dir
up regularly. This often destroys the PostgreSQL database, so set it
to something AWX-specific
(for example, /var/lib/awx/pgdocker).
For uploading playbooks manually to AWX without the need for a
version control system, the playbooks must sit somewhere on the
filesystem. To prevent having to copy them into a container, this
project_data_dir
variable maps the local folder specified to the required one inside a
container. For the examples in this book, we will use the default
(the /var/lib/awx/projects folder).
This is the password for the backend RabbitMQ service—be sure to
rabbitmq_password
set it to something unique and secure.
This is the secret key used to encrypt credentials in the PostgreSQL
database. It must be the same between upgrades of AWX, so be sure
secret_key
to store it somewhere secure as it will need to be set in future AWX
inventories. Make this something long and secure.
4. You will observe that in this inventory file there is a great deal of secret
information that is in plaintext. While we can tolerate this for the duration of the
installation process, this file should not be left lying around on the filesystem
when the installation is complete as it could give a potential attacker all of the
details they need to easily compromise your systems. Once the installation phase
is complete, be sure to either copy this file into a password manager of some kind
or simply store the individual passwords—either way, do not leave the file
unencrypted!
[ 66 ]
Streamlining Infrastructure Management with AWX Chapter 3
5. Once the inventory is customized, it is time to run the installation itself—this is
launched by running the following command:
$ sudo ansible-playbook -i inventory install.yml
From our work on Ansible in the previous chapter, you will recognize this
command—it is using the ansible-playbook command to run the
install.yml playbook, while also using the inventory file called inventory
that we edited in step 1. Pages of output will pass by in the Terminal, and if the
installation is successful, you should see something like this:
[ 67 ]
Streamlining Infrastructure Management with AWX Chapter 3
6. Once the installation completes, it takes a few minutes for the Docker containers
to actually start up and for the backend database to be created. However, once
this is done, you should be able to navigate to the IP address of your chosen
AWX host in your browser and see the login page, an example of which is shown
in the following screenshot:
7. Log in as the admin user using the password you set in the admin_password
variable in the inventory file earlier. You should then be taken to the dashboard
page of AWX:
[ 68 ]
Streamlining Infrastructure Management with AWX Chapter 3
That's it—you have successfully installed and logged in to AWX! Of course, there are many
more advanced installation parameters you can define, and equally, in an enterprise, you
would not rely on just a single AWX host with no backup (or high availability).
Note that when you log in to AWX, the connection is not SSL-secured,
which could result in sensitive data such as machine credentials being
transmitted over your network in the clear.
There is no one solution to out-of-the-box high availability and SSL issues that will suit
every enterprise, and so we leave the actual solution for this as an exercise for you. For
example, if you have an OpenShift environment with multiple hosts, then installing AWX
in this environment will enable it to keep running, even if the host it runs on fails. There are
of course ways to achieve high availability without OpenShift too.
[ 69 ]
Streamlining Infrastructure Management with AWX Chapter 3
Applying secure HTTP to AWX is also going to be solved in a different manner in different
environments. Most Docker environments will have some kind of load balancer in front of
them to help to handle their multi-host nature, and as a result, the SSL encryption could be
offloaded onto this. It is also possible to secure a single Docker host, such as the one we
have built here, but installing something capable of reverse proxying (for example, nginx)
and configuring that to handle the SSL encryption.
In short, there is no one-size-fits-all solution to this, but it is recommended that you address
these in the manner best suited to your enterprise. For this reason, we will not discuss them
further here, other than to recommend that you take them into account when deploying
AWX for production use.
Now that you have an AWX instance running, we must configure it so that we can
successfully replicate how we ran playbooks from the command line in the previous
chapter. For example, we must define an inventory just as we did previously and ensure we
have set up SSH authentication so that Ansible can perform the automated tasks on the
remote computer. In the next part of this chapter, we will walk through all of the setup
that's required to run your first playbook through AWX.
Running your playbooks from AWX
When we ran an example playbook from the command line, we created our inventory file
and then our playbook and then ran it using the ansible-playbook command. All of this,
of course, assumed that we had already set up connectivity to the remote system by way of
either specifying a password interactively or through the setup of SSH keys.
Although the end result in AWX is very similar—playbooks are run against an
inventory—the terminology and naming are rather different. In this part of this chapter, we
will walk through the process of getting your first playbook up and running from AWX.
Although we don't have space in this book to give a complete rundown on every feature
AWX has to offer, this section intends to give you sufficient knowledge and confidence to
start managing your playbooks from AWX, and to explore further on your own.
Before you can run your first playbook from AWX, there are several prerequisite setup
stages that must be completed. In the next section, we will complete the first of
these—creating the credentials that will be used to authenticate over SSH with our target
machine.
[ 70 ]
Streamlining Infrastructure Management with AWX Chapter 3
Setting up credentials in AWX
When you log in to AWX, you will notice a menu bar down the left-hand side of the screen.
To define a new set of credentials that we will use to allow Ansible to log into our target
machine, perform the following steps:
1. Click on Credentials in the left-hand menu bar.
2. Click on the green + icon to create a new credential.
3. Give the credential a name and select Machine from the CREDENTIAL
TYPE field. There are many types of credentials that enable AWX to interact with
a wide variety of services, but for now, we are only interested in this particular
type.
4. There are many other fields available for specifying parameters for more
advanced use cases—however, for our demonstration purposes, this is sufficient.
Your end result should look something like the following screenshot. Note that I have
specified the login password for my demo machine, but you could equally have specified
the SSH private key in the larger text box on the screen. You will also observe the presence
of the Prompt on launch checkbox—there are many options in AWX that it can prompt the
user for at the time a playbook is run, which can lend itself to a really rich interactive user
experience. However, in this demo, we won't do this as we want to demonstrate playbooks
running without user intervention:
[ 71 ]
Streamlining Infrastructure Management with AWX Chapter 3
When you have a credential defined, the next step is to define the inventory to run our
playbook against. We'll explore this in the next section.
Creating inventories in AWX
Just like on the command line, AWX requires an inventory to be created for playbooks to be
executed against. Here, we are going to make use of one of the official, publicly available
Ansible example playbooks, which requires an inventory with two groups in it. In a larger
setup, we would specify a different server for each group, but for this small demo, we can
reuse the same server for both roles.
The code in question is used to install a simple LAMP stack on an RHEL or CentOS 7
machine and is available to view here: https:/​/​github.​com/​ansible/​ansible-​examples/
tree/​master/​lamp_​simple_​rhel7.
To run this demo, you will need a CentOS 7 machine. My demo host is called centos-
testhost, and if I were defining an inventory file on the command line, it would look like
this:
[webservers]
centos-testhost
[dbservers]
centos-testhost
To replicate this in the AWX GUI, run through the following sequence:
1. Click on Inventories on the left-hand menu bar.
2. Click on the green + icon to create a new inventory.
3. Select Inventory from the drop-down menu.
4. Give the inventory a suitable name and click SAVE.
[ 72 ]
Streamlining Infrastructure Management with AWX Chapter 3
Your screen should look something like the one shown here once you have completed this
process:
When complete, we can create our first group and put our test host into it. To do this,
follow these steps:
1. Click on the GROUPS button at the top of the pane.
2. Click the green + icon to create a new group.
3. Enter the name webservers into the NAME field.
4. Click the green SAVE button.
5. Click the HOSTS button at the top.
6. Click the green + icon button to add a new host.
1. Select New Host from the drop-down list.
7. Enter the name centos-testhost into the HOST NAME field.
8. Click the green SAVE button.
[ 73 ]
Streamlining Infrastructure Management with AWX Chapter 3
Once you have completed these steps, your screen should look something like the
following screenshot:
Repeat this process to define the dbservers group. Take care not to create this group as a
subgroup of the webservers group, which is easy to do. You will note the breadcrumb
trail at the top of the preceding screenshot—use that to navigate back to the top level of our
new inventory by clicking on Hands on Inventory (or your name, if you chose a
different one).
From here, the process is almost identical, except that when you come to adding the host to
the newly created group (step 6 onward from the preceding steps), choose Existing Host as
we are reusing our single host for both groups in this example. Your resulting screen
should look something like the following screenshot:
[ 74 ]
Streamlining Infrastructure Management with AWX Chapter 3
With those steps complete, our inventory complete with groupings is complete in AWX,
and we can move on to the next stage in defining our configuration—the creation of an
AWX project. We will do exactly this in the next section of this chapter.
Creating a project in AWX
If you were working with Ansible on the command line, it is unlikely you would store all of
your playbooks and roles in one directory for very long as it would get unmanageable and
very difficult to work out which file was which. This is the purpose of a project in AWX—it
is quite simply a logical grouping of playbooks and is used to make organization easier and
simpler.
[ 75 ]
Streamlining Infrastructure Management with AWX Chapter 3
Although we will not go into Role-Based Access Control (RBAC) in this book, projects also
serve a role in this. In the screenshots provided so far, you may have noticed a