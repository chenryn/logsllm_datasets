读未提交（Read-Uncommitted）
可重复读（Repeatable-Read）
串行化（Serializable）
事务隔离级别
表7-2
脏读
Z
Z
Y
不可重复读
Z
Y
幻读
Z
---
## Page 292
270丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
为了“aaa”，这是不可重复读的一个典型例子。
试来说明。
见的 RC（Read-Committed）。两者区别是什么，怎幺正确理解，我们通过一些简单的测
7.2.1MySQL 中的隔离级别 RR 和 RC
接下来我们来看一下隔离级别的明细内容。
了read-commited（RC），当然我们不能孤立的用一个标尺来衡量所有实现方式的好坏，
查看窗口1中的数据，就会发现原来窗口的数据发生了变化，id=2的数据列 name 变
Query OK,
beqin;
（2）窗口2
5 rows in set (0.00 sec)
>select
>beqin;
我们打开两个窗口，来对比关联测试。
insert into testvalues(l,
首先创建一个测试表test，插入一些数据。
在 MySQL 中都有这两种事务隔离级别的设置，默认的 RR（Repeatable-Read）和常
（3）窗口
id|name
（1）窗口1
而我们熟知的很多数据库，比如 Oracle，SQL Server，PostgreSQL等，都是默认使用
隔离级别的修改支持会话级别和全局参数级别。
1．RC 模式下的测试1
· SELECT @@tx_isolation。
SELECT @@session.tx_isolation;
。
SELECT @@global.tx_isolation;
45
123
name5
name4
name2
namel
name3
--开启事务
*from test;
--开启事务
0 rows affected (0.01 sec)
row affected
|memo
aaaa
aaaa
aaaa
--查看数据
(0.06
'namel'
sec)
),(2,'name2'
--修改一条记录
'aaaa'),(5,'name5'，'aaaa');
'aaaa'),(3,'name3'
---
## Page 293
交，所以看到的还是原来的数据。
>select *from test;
这是 RR 隔离级别的要点，虽然事务2已经提交，但是窗口1中的事务因为还没有提
（3）窗口1
>commit;
QueryOK,
>update test set name='RR_test';
>beqin;
（2）窗口2
5rowsinset(0.00 sec)
>select
>beqin;
（1）窗口1
然后重新打开窗口，
>set global transaction isolation level repeatable read;
再来看看 RR 这个隔离级别。
2．RR 模式下的测试
id|name
>select *from test;
id 丨 name 
id|name|memo
123
5
23
5
4
23
name3
namel
name5
aaaaa
name5
name3
namel
name5
name4
name4
aaaaa
name1
*from test;
0 rows affected (0.o0 sec)
--开启事务
--开启事务
rows
aaaa
Imemo
aaaa
aaaa
memo
aaaa
aaaa
aaaa
aaaa
aaaa
aaaa
aaaa
aaaa
aaaa
aaaa
affected
，进行如下的测试。
--查看表test 的数据。
我们首先修改隔离级别为 RR。
Warnings: 0
sec)
--修改表test的数据，所有记录都发生变化。
第7章MySQL事务和锁|271
---
## Page 294
272|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
多并发的场景下能够复现出下面的问题。
7.2.2
类是更新冲突问题。我们先来看第一个问题。
我们接下来会来深入学习RR隔离级别下的两种特殊问题：
结果过了一个月你看到工资还是没变，到了第2个月，把前一个月加薪的部分也补给你
情况就是立即生效；而RR的情况是，领导叫你去谈话加薪了，因为需要走一些审批环节，
脏读。
变的，尽管其他事务已经并发修改提交了事务，此时允许幻读，但不允许不可重复读和
的事务数据，而对于 RR隔离级别来说，它会保证在一个事务内的数据多次查询结果是不
，大概就是这样的意思。
相信通过上面的学习过程，会开始感觉到一些吃力了，没关系，我们才刚刚开始，
用一个通俗的例子来说明，比如升职加薪，领导叫你去谈话，然后给你升职，RC的
我们可以采用如下表7-3所示的步骤和方式来进行复现。
mysql> create table test3(idl int primary key,id2 int unique,id3 int);
为了模拟这个问题，我们打开两个会话窗口，来模拟一下这个问题。
这样一个看起来不可能的事情，能否复现呢？
问题的背景是在 MySQL 隔离级别为 RR（Repeatable-Read)时，唯一性约束没有失效，
通过上面的测试我们可以明确，对于RC 隔离级别，它在事务中是可以读取已经提交
我们小结一下：
5 rows in set (0.00 sec)
>select *from test;
Query
id|name
RR隔离级别下的unique失效
45
RR_test
RR_test
RR
贸
Imemo
aaaa
aaaa
aaaa
aaaa
1的事务
---
## Page 295
发起时间
15
3
2 rows in set (0.00 sec)
id1|id2
魔性的一幕上演了。
Query OK, 1 row affected (0.00 sec)
(2,20170831,2);
功。
不冲突，唯一性索引冲突，看看是否能够插入成
I row in set (0.00 sec)
id1|id2
不变。
特
入不了了，那么唯一性索引呢。根据MVCC 的
删除了 idl=1的记录。所以主键列相关数据是插
>commit;
>insert into test3 values(1,20170831,1);
select *from test3;
>set autocommit=0;
insert into test3values
现在的关键就来了，我们插入一条数据，主键
select *from test3;
点，能够保证重复读的特点，读到的数据还是
这个时候根据MVCC的特点，会话2中已经
220170831
1|20170831|
120170831
|id3
id3
-+
会话1
二
一
表7-3
提交之后，会话2中就修改完毕了。
Query OK, 0 rows affected (0.00 sec)
>delete from test3whereid1=1;
会话1插入了一条数据，在会话2中删除。
1 row in set (0.00 sec)
id1|id2
>select *from test3;
120170831
|id3
会话2
第7章MySQL事务和锁|273
---
## Page 296
274丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
7.2.3
还是 RR 隔离级别会去构建当前事务所需的数据集，在事务提交之后，是不会出现冲突的。
发起时间
进行略微烧脑的分析之后，我们开始第二个问题。
整个过程虽然是两个窗口，但是操作是一个串行的过程，如下表7-4所示。
insert into t values(1,
首先是初始化基础数据，我们开启两个窗口，创建一个测试表，插入两条记录。
这个问题可以作为理解RR 隔离级别的配菜，
T4
12
二
 RR 隔离级别下的更新冲突
Rows matched:1 Changed:1 Warnings: 0
Query OK, 1 row affected (0.00 sec)
>Update t set name='name_test'where id =4;
产生了一行数据的变化，这是一个“诡异"的地方。
会话2中插入的，在此处变更，从结果来看还是
id|name
> select *from t;
和3的数据，新增的数据id-4 还不在查询结果中。
2 rows in set (0.00 sec)
id|name
+----+-------+
select *fromt;
Query OK,0 rows affected (0.00 sec)
这个时候查看，数据结果还是没变，还是 id 为
1|namel
开启事务后，查询当前的数据情况。
begin;
3 | name3 |
1| name1 |
3|name3
+----
会话
'name1'),(3，'name3');
，它只是事务处理过程中的一个瞬间状态，本质
表7-4
这个过程中，如果在会话1中查看数据，应该还是2条。
Query OK, 1 row affected (0.00 sec)
>insert into t values(4,name4');
会话2插入一条记录，默认提交
会话2
---
## Page 297
7.3.1
后会给出一个死锁分析的案例。
再坚持一下，通过锁机制的学习来解锁你的学习能力。
相信你已经无数次想放弃，而这对于你的学习过程来说就是一把锁，我还是希望你能够
7.3
实现的理解，而对于这种方式处理的复杂性和合理性，也是见仁见智了。
突。而按照我们预期的要求，在会话1的事务内应该是对会话2的变更是不可见的。
我们接下来会先聊一下MySQL 锁的类型，然后讲一下索引加锁过程的处理差异，最
，当然在此只是抛砖引玉，希望通过这样两个细小的地方能够加深我们对于隔离级别
锁是计算机协调多个进程或线程并发访问某一资源的机制，在整个学习的过程中，
发起时间
我们前面讲过，InnoDB 的锁，实现了两种类型的行锁。
通过上面的测试，可以看到在RR隔离级别下的实现是会产生“诡异”的数据更新冲
19
T5
MySQL 锁的类型
MySQL锁机制
还是相对合理的。
这个时候如果查看会话2的数据情况，得到的结果
录在会话1里面被修改成了 id=4,name="name_test"。
id|name
select *fromt;
询就输出了3行记录，原来id=4,name=name4'的记
而接下来的地方就是问题的关键了，我们再次查
1|namel
|name_test
|name3
会话1
3 rows in set (0.00 sec)
id|name
mysql> select *from t;
变化。
3|name3
而在会话2中查看，数据结果还是没有发生
4 |name4
1|namel
----
会话2
续表
---
## Page 298
276