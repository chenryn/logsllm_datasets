core system of Crocus. VSIM encapsulates the payload as
a packet. It is composed of a magic string, a string which
represents the size of the payload and the payload itself.
A packet will not be embedded directly into a container, or
attackers might ﬂnd the container and read payloads inside.
In order to protect payloads, ﬂrst, each packet is encoded
using a pseudo-random number generator and partitioned
into small blocks. Those blocks are then shu†ed accord-
ing to a pseudo-random permutation and are passed to an
appropriate steganographic engine. The steganographic en-
gine is then embedded the (shu†ed) blocks into the con-
tainer. The password assigned for the ﬂlesystem is used for
encoding and shu†ing. This protection method is called
scrambling in this paper.
2.3 Finding Layout of Containers
In Crocus, a hidden ﬂlesystem is embedded across a set of
containers. In order to open and use the hidden ﬂlesystem
later, we must ﬂnd all of its containers and arrange them in
the correct order to reconstruct the ﬂlesystem image.
Assume that the ﬂlesystem image is embedded piece by
piece into the containers C0; C1; : : :; Cn¡1 in this order. In
Crocus, we can open a hidden ﬂlesystem by giving the pass-
word assigned for it and the root container C0, i.e. the ﬂrst
one of the containers.
Let id(Ci) be the identiﬂer of the container Ci. We can
ﬂnd the layout of containers via the root container if the se-
quence of identiﬂers id(C1); id(C2); : : :; id(Cn¡1) is embedded
along with the ﬂlesystem image. This sequence of identiﬂers
is called layout information of containers (LIC).
The LIC is embedded into the root container, at least par-
tially. Note that the identiﬂer id(Ci) should be embedded
into a preceding container Cj(j < i). Let V (Ci) be the ca-
pacity of the container Ci and pre(j) be the preﬂx of the LIC
up to the end of the identiﬂer of the container Cj. We can
then ﬂnd that the whole LIC can be restored on extraction
1Crocus thus works on an OS under which we can use a
regular ﬂle as a virtual disk.
2Here, randomization is performed to prevent unsolicited
recovery of the deleted ﬂle.
345
container..............................Private Filesystem  mount/unmountembed/extractFilesystem imagein a regular fileif the following is satisﬂed:
1•8j < n; pre(j) •
j¡1X
i=0
V (Ci):
(1)
Since the LIC can extend for more than one containers, we
can assign containers for one ﬂlesystem as many as we want.
On the other hand, AshFS has the restriction that the LIC
must always be embedded entirely into the root. This limits
the number of containers assignable to one ﬂlesystem.
3. PROTOTYPE SYSTEM
A prototype system of Crocus has been developed for
Linux. In the prototype system, we can use graphical im-
age ﬂles and audio ﬂles as containers if they are in lossless-
compression or in uncompressed formats such as PNG, BMP
and WAV. Steganographic engines based on the simple LSB
method[5] are employed both for graphical image ﬂles and
audio ﬂles. Filesystems are formatted as ext2fs and accessed
via loopback devices. The standard e2fsprogs utilities are
used for creating or resizing ﬂlesystems.
The LIC of a ﬂlesystem is derived from the pathnames
of containers. The identiﬂer id(Ci) for the container Ci be-
comes either its absolute pathname or relative pathname
from the directory where the container Ci¡1 resides. The
shorter one is selected to make the LIC shorter.
4. AN EXPERIMENTAL RESULT
A preliminary experiment was performed on the prototype
system. A ﬂlesystem was created from 38 containers. Low
2 bits of graphical image ﬂles and low 4 bits of audio ﬂles
were used for embedding respectively. The total data size
(not ﬂle size) and the total capacity of the containers were
20412344 bytes and 5103085 bytes respectively.
The ﬂlesystem image was created in the unit of 4k bytes,
which is the page size of Linux. The block size for the scram-
bling was set to 512 bytes. The capacity threshold VT for
containers was set to 2k bytes.
The size of the ﬂlesystem created from the containers was
5095424 bytes. The sizes of the LIC, packet headers and un-
used fragments were 718 bytes, 439 bytes and 6504 bytes re-
spectively. We can ﬂnd that the ratio of the image size of the
ﬂlesystem to the total capacity is about 99:8%. Most of the
capacity was thus devoted to the ﬂlesystem image. The aver-
age PSNR of graphical image ﬂles was 44:1dB and that of au-
dio ﬂles was 74:8dB. Noise added to the containers through
embedding was not perceptible. This result demonstrates
that Crocus enables us to obtain steganographic ﬂlesystems
those fairly large and indicates the eﬁectiveness of the frame-
work of Crocus.
5. CONCLUSION AND FUTURE WORK
The steganographic ﬂlesystem manager called Crocus is
presented in this paper. A ﬂlesystem managed by Crocus is
built in a regular ﬂle and is mounted as a normal ﬂlesystem.
It can be hidden steganographically into a set of innocent-
looking containers while it is not in use. Crocus enables us
to have hidden ﬂlesystems those not based on randomized
volumes.
We can open a hidden ﬂlesystem by giving the root con-
tainer and the password for it. We can make a ﬂlesystem
as large as we like if we can provide enough containers and
a space to place the ﬂle holding its image. We can extend
or shrink ﬂlesystems by adding or removing containers. De-
struction of ﬂlesystems is also allowed.
A prototype system of Crocus has been implemented for
Linux. A preliminary experiment was performed on the pro-
totype system and the result indicates the eﬁectiveness of
the framework of Crocus.
Crocus hides images of ﬂlesystems only and does not hide
ﬂlesystems in the active state.
It is worth considering to
take another design model where ﬂlesystems are always sep-
arately hidden in containers.
If we develop a new driver
which interacts with containers for reading or writing hid-
den ﬂles directly, ﬂlesystems are not entirely visible anymore
even when we use them and extra ﬂles holding ﬂlesystem im-
ages are not required as well.
Hidden ﬂlesystems created by Crocus are fragile. A ﬂlesys-
tem corrupts immediately if one of its container is lost. Pro-
viding robustness for hidden ﬂlesystems is another impor-
tant issue to make them more suitable for practical use.
The existence of Crocus may attract the attention of at-
tackers. A possible work around is to embed Crocus itself
into a set of containers and to prepare a small boot-strapping
program for extracting it. On installing the boot-strapping
program, we should name it appropriately and adjust its
code carefully through an obfuscation method[2] not to leave
its signature.
6. ACKNOWLEDGEMENT
This research was partially supported by the Ministry of
Education, Culture, Sports and Technology, Government of
Japan, Grant-in-Aid for Scientiﬂc Research, 16700096, 2004.
7. REFERENCES
[1] R. Anderson, R. Needham, and A. Shamir. The
steganographic ﬂle system. In Information Hiding: 2nd
International Workshop, pages 73{82, 1999. LNCS
1525.
[2] C. Collberg, C. Thomborson, and D. Low. A taxonomy
of obfuscating transformations. Technical Report 148,
Department of Computer Science, University of
Auckland, New Zealand, 1997.
[3] S. Dean. Freeotfe. http://www.freeotfe.org/.
[4] H. Hioki. A scattered hidden ﬂle system. In Proceedings
of Paciﬂc Rim Workshop on Digital Steganography
2004, pages 89{95. Kyushu Institute of Technology,
2004.
[5] N. F. Johnson, Z. Duric, and S. Jajodia. Information
Hiding: Steganography and Watermarking { Attacks
and Countermeasures. Kluwer Academic Publishers,
2001.
[6] A. D. McDonald and M. G. Kuhn. Stegfs: A
steganographic ﬂle system for linux. In Information
Hiding: 3rd International Workshop, pages 463{477,
2000. LNCS 1768.
[7] H. Pang, K.-L. Tan, and X. Zhou. Steganographic
schemes for ﬂle system and b-tree. IEEE Transactions
on Knowledge and Data Engineering, 16(6):701{713,
2004.
[8] SecureStar Ltd. Drivecrypt.
http://www.securstar.com/products drivecrypt.php.
[9] TrueCrypt Foundation. Truecrypt.
http://www.truecrypt.org/.
346