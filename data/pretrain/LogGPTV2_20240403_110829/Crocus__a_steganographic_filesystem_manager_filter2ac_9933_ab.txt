# Core System of Crocus

VSIM (Virtual Steganographic Information Module) encapsulates the payload as a packet, which consists of a magic string, a string representing the size of the payload, and the payload itself. To protect the payload, each packet is first encoded using a pseudo-random number generator and then partitioned into small blocks. These blocks are shuffled according to a pseudo-random permutation and subsequently passed to an appropriate steganographic engine. The steganographic engine embeds the shuffled blocks into the container. The password assigned to the filesystem is used for both encoding and shuffling. This protection method is referred to as "scrambling" in this paper.

## 2.3 Finding Layout of Containers

In Crocus, a hidden filesystem is embedded across a set of containers. To open and use the hidden filesystem, all its containers must be found and arranged in the correct order to reconstruct the filesystem image. Assume the filesystem image is embedded piece by piece into the containers \( C_0, C_1, \ldots, C_{n-1} \) in this order. In Crocus, a hidden filesystem can be opened by providing the password and the root container \( C_0 \).

Let \( \text{id}(C_i) \) be the identifier of the container \( C_i \). The layout of the containers can be determined via the root container if the sequence of identifiers \( \text{id}(C_1), \text{id}(C_2), \ldots, \text{id}(C_{n-1}) \) is embedded along with the filesystem image. This sequence of identifiers is called the Layout Information of Containers (LIC).

The LIC is at least partially embedded into the root container. The identifier \( \text{id}(C_i) \) should be embedded into a preceding container \( C_j \) (where \( j < i \)). Let \( V(C_i) \) be the capacity of the container \( C_i \) and \( \text{pre}(j) \) be the prefix of the LIC up to the end of the identifier of the container \( C_j \). The entire LIC can be restored on extraction if the following condition is satisfied:

\[
\forall j < n, \quad \text{pre}(j) \leq \sum_{i=0}^{j-1} V(C_i)
\]

Since the LIC can extend across multiple containers, we can assign as many containers as needed for one filesystem. In contrast, AshFS restricts the LIC to be entirely embedded in the root container, limiting the number of containers that can be assigned to one filesystem.

## 3. Prototype System

A prototype system of Crocus has been developed for Linux. In this prototype, graphical image files and audio files in lossless-compression or uncompressed formats (such as PNG, BMP, and WAV) can be used as containers. Steganographic engines based on the simple Least Significant Bit (LSB) method are employed for both graphical image files and audio files. Filesystems are formatted as ext2fs and accessed via loopback devices. The standard e2fsprogs utilities are used for creating or resizing filesystems.

The LIC of a filesystem is derived from the pathnames of the containers. The identifier \( \text{id}(C_i) \) for the container \( C_i \) is either its absolute pathname or relative pathname from the directory where the container \( C_{i-1} \) resides, with the shorter one selected to minimize the length of the LIC.

## 4. Experimental Result

A preliminary experiment was conducted on the prototype system. A filesystem was created from 38 containers. The low 2 bits of graphical image files and the low 4 bits of audio files were used for embedding. The total data size and the total capacity of the containers were 20,412,344 bytes and 5,103,085 bytes, respectively.

The filesystem image was created in units of 4k bytes, which is the page size of Linux. The block size for scrambling was set to 512 bytes, and the capacity threshold \( V_T \) for containers was set to 2k bytes.

The size of the filesystem created from the containers was 5,095,424 bytes. The sizes of the LIC, packet headers, and unused fragments were 718 bytes, 439 bytes, and 6,504 bytes, respectively. The ratio of the filesystem image size to the total capacity was approximately 99.8%, indicating that most of the capacity was devoted to the filesystem image. The average Peak Signal-to-Noise Ratio (PSNR) of graphical image files was 44.1 dB, and that of audio files was 74.8 dB. The noise added to the containers through embedding was imperceptible. This result demonstrates that Crocus enables the creation of large steganographic filesystems and highlights the effectiveness of the Crocus framework.

## 5. Conclusion and Future Work

This paper presents Crocus, a steganographic filesystem manager. A filesystem managed by Crocus is built in a regular file and mounted as a normal filesystem. It can be hidden steganographically in a set of innocent-looking containers when not in use. Crocus allows for the creation of hidden filesystems that are not based on randomized volumes.

A hidden filesystem can be opened by providing the root container and the password. The size of the filesystem can be expanded as long as sufficient containers and space are available. Filesystems can be extended or shrunk by adding or removing containers, and destruction of filesystems is also supported.

A prototype system of Crocus has been implemented for Linux, and a preliminary experiment indicates the effectiveness of the Crocus framework. However, Crocus only hides the images of filesystems and does not hide filesystems in their active state. A potential future direction is to develop a new driver that interacts with containers for reading or writing hidden files directly, making the filesystems invisible even when in use and eliminating the need for extra files holding the filesystem images.

Hidden filesystems created by Crocus are fragile; the loss of any container can corrupt the entire filesystem. Providing robustness for hidden filesystems is an important issue for practical use. Additionally, the existence of Crocus may attract the attention of attackers. One possible workaround is to embed Crocus itself into a set of containers and prepare a small boot-strapping program for extracting it. The boot-strapping program should be named appropriately and carefully obfuscated to avoid leaving a signature.

## 6. Acknowledgement

This research was partially supported by the Ministry of Education, Culture, Sports, Science and Technology, Government of Japan, Grant-in-Aid for Scientific Research, 16700096, 2004.

## 7. References

[1] R. Anderson, R. Needham, and A. Shamir. The steganographic file system. In Information Hiding: 2nd International Workshop, pages 73-82, 1999. LNCS 1525.

[2] C. Collberg, C. Thomborson, and D. Low. A taxonomy of obfuscating transformations. Technical Report 148, Department of Computer Science, University of Auckland, New Zealand, 1997.

[3] S. Dean. FreeOTFE. http://www.freeotfe.org/.

[4] H. Hioki. A scattered hidden file system. In Proceedings of Pacific Rim Workshop on Digital Steganography 2004, pages 89-95. Kyushu Institute of Technology, 2004.

[5] N. F. Johnson, Z. Duric, and S. Jajodia. Information Hiding: Steganography and Watermarking - Attacks and Countermeasures. Kluwer Academic Publishers, 2001.

[6] A. D. McDonald and M. G. Kuhn. StegFS: A steganographic file system for Linux. In Information Hiding: 3rd International Workshop, pages 463-477, 2000. LNCS 1768.

[7] H. Pang, K.-L. Tan, and X. Zhou. Steganographic schemes for file system and B-tree. IEEE Transactions on Knowledge and Data Engineering, 16(6):701-713, 2004.

[8] SecureStar Ltd. DriveCrypt. http://www.securstar.com/products_drivecrypt.php.

[9] TrueCrypt Foundation. TrueCrypt. http://www.truecrypt.org/.