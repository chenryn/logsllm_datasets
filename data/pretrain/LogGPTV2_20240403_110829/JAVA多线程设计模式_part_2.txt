## 优化后的文本

### 第6章 Swing的Event Dispatching Thread
- **Proxy Pattern**（参考附录E[GoF][Yuki01]）
- **Builder Pattern**（参考附录E[GoF][Yuki01]）

#### 讨论
- 能否通过这些模式提升吞吐量？
- **RealData类** 的作用。
- 多线程复用性的考虑因素。
- 异步方法调用的返回值处理。
- **FutureData类** 的使用场景。
- **Main类** 的功能说明。

#### 关键点
- Event-dispatching thread 不仅负责事件分发，还处理界面重绘任务。

### 变形一：Thread-Specific Storage Pattern（第11章）
- 离“准备返回值”与“使用返回值”的讨论。
- **Two-Phase Termination Pattern** 的参与者及细节。
- **java.lang.ThreadLocal** 类的介绍及其在多线程环境下的应用。
- **Before/After Pattern**（参考附录E[Lea]）。
- **Multiphase Cancellation Pattern**（参考附录E[Lea]），用于在进行繁重计算前检查终止请求。

### 第12章 Active Object
- **Active Object Pattern** 的定义和实现。
- **Thread-Specific Storage Pattern** 的所有参与者。
- **Proxy Pattern**（参考附录E[GoF][Yuki01]）。
- **Single Threaded Execution Pattern**（第1章）。
- **Singleton Pattern**（参考附录E[GoF][Yuki01]）。
- 局部变量与 **java.lang.ThreadLocal** 类的关系。

#### 主要类
- **ActivationQueue类**
- **SchedulerThread类**
- 接受异步消息的主动对象。

### 其他设计模式
- **Worker Thread Pattern**（第8章）
- **Thread-Per-Message Pattern**（第7章）
- **Read-Write Lock Pattern**（第6章）
- **Balking Pattern**（第4章）
- **Future Pattern**（第9章）
- **迈向分布式处理**：主动对象间的通信机制。
- 模式选择时需考虑的问题规模。

### 执行示例程序
- **“主动对象”** 的具体实现和应用场景。
- **DisplayStringRequest类** 的功能描述。

### 附录
- **附录E**：参考文献。
- **附录**：线程相关的主要API。
- **附录C、B、A**：练习问题的解答。
- **Two-Phase Termination Pattern**（第10章）。
- **Future Pattern**（第9章）。

### UML简介
- **UML**（统一建模语言）的基本概念。
- **类图** 的构成要素及表示方法。
- **接口与实现** 的关系及其图形表示。
- **访问控制** 和 **类间关联性** 的图形表示。
- **顺序图** 的基本结构及其在程序执行流程中的应用。

#### 示例
- **图0-1**：类层次体系关系的类图。
- **图0-2**：接口与实现类的类图。
- **图0-3**：聚合关系的类图。
- **图0-4**：访问控制的类图。
- **图0-5**：类的关联性。
- **图0-6**：顺序图范例（方法调用过程）。

### 进一步学习资源
- 提供了进一步了解UML的网站链接。

希望这些优化能够帮助您更好地理解和组织内容。如果有任何其他需求或需要进一步调整的地方，请随时告知。