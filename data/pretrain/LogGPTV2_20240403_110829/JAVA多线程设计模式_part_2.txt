ajnn真6第
进阶说.：Swing 的. Event.Dispatching Thread.........
Proxy Pattern（参考附录E[GoFHYuki01]）
Builder Patterm（参考附录E[GoF][Yuki01])
能够提升throughput吗....
RealData 类.....
谁需要考虑到多线程[复用性
异步方法调用的“返回值”
FutureData 类.
Main类.
Event-dispatching thread 也处理画面的重绘....
变形一
Thread-Specific Storage Pattern（第 11 章）.
离“准备返问值”与“使用返回值”
一先给您这张提货单.
..+... ...... . ... .... ..
+++++++++ +++++++++
.+..
+ +........ .+..
...........
...........
.231
231
.228
.226
..226
---
## Page 14
第 11 章 Thread-Specific Storage
Two-Phase Termination Pattern 的所有参与者.
Two-Phase Termination Patten. ......
关丁 java.lang.ThreadLocal 类...
Thread-Specific Storage Patern...
Main类 ....
Before/After Patterm（参考附录 E[Lea]）
Multiphase Cancellation Pattern（参考附录 E[Lea]），
进行繁重的处理前，先检查终止请求..
++ + ++++++ ++ ++ +++++ +.
..........
. +............. .... ... .....
6
---
## Page 15
第12章Active Object一
二
Active Object Pattern.....
Thread-Specific Storage Patern 的所有参与者.....
Proxy Pattern（参考附录E[GoF][Yuki01]）
Singie Threaded Execution Pattern（第 1章）
Singleton Patterm（参考附录E[GoF]IYuki01]）
局部变量与 java.lang.ThreadLocal 类....
“主动对象”站
“士动对象”立
“上动对象”站
“主动对象”
“主动对象”
上动对象
端：
端：
端：
端：
ActivationQueue 类.
SchedulerThread 类,
一接受异步消息的主动对象
+++++..+..
.++.+..
++1
+..+..+
.·.................
..................
...............
—............
.............
.............
..........
..........
........
300
.291
290
.290
290
290
.290
.289
.288
.287
.286
20
30
39
75
---
## Page 16
Worker Thread Pattern（第8章）—
Thread-Per-MessagePatterm（第7章）---·这个工作交给你了。
Read-Write Lock Pattern（第 6章）-
Balking Pattern（第 4章）
Single Threaded Execution Pattern （第 I 章）——
Future Pattern（第 9章）..
迈向分布处理一
“主动对象”之间的对话...
Patterm是否适合使用要考虑问题的规模...
执行范例程序...
“主动对象”
“半动对象”
“上动对象”立
主动对象”站
端：RealRcsult.......
端：1
端：
端：
一将线程的界限移到机器的界限.
DisplayStringRequest 类
............
.+.........+++.++.+++++++++++.+..+. .
-大家想看就看吧，
. . ... . .. . .... ... + +. + .-
一能通过这座桥的，
：
23
---
## Page 17
kNA多线提设谢模式
附录E参考文献...
附录线程相关的主要AP·...
附录 C
附录B
附录A练习问题的解答.
Two-Phase Termination Pattern（第 10 章）一
Future Patterm（第9章）—先给您这张提货单.
Java 线程的优先级.
Java的内存模型.
一快把玩具收拾好，
...........
...461
---
## Page 18
漫谈 UML
---
## Page 19
中·小部分，如果各位读者有兴趣进一步了解UMIL，可到下列网站获取UML的详细规格。
类和层次结构的关系
关系的图形。虽然称为类图，但使用到的不只是类而己。
取代UML的“operation（操作）")，
者分享，不过，说明时的名词术语仍然承袭Java语言的习惯用法（比如，用Java
现方式，UML是Unified Modeling Language 的缩写。中文译成“统一建模语言”
（Instance）的关系，所以在此先举出·些阅读本书时所必备的UML常识跟各位读
UML
类图
UMI，的规格相当庞大，本朽中所引用的属性（也就是以下所解说的范圆）仅仪为其
UML的类图（Class Diagram）是--种可衣示一组类、对象实例和接口之间静态
本书利用到UML来表现Design Patterms（设计模式）中类（class）和对象实例
UML是·种以可视化的观点来看程序系统，将规格和设计重点直接写下来的表
class Childclass extend paren'Class ↑
Java 程序与对应类图的范例如图0-1所示。
● UML Resource Center
● UML Resourcc Page
http:*/www.cmg.org/uml/
void methcdA() ↑
http://www.raticna_.com/uml/
1()apouou ptoA
deubie methcdBi) {
abstract void rethodA(l;
static chai field2;
int tield;
1...
1i...
图 0-1
类层次体系关系的类图
I methodc
ImethodA
methodB
methodA
field2
field1
ChildClass
ParenrClass
!
··.....-
-—-
---
## Page 20
斜体。
接口与实现
深入说明——箭头方向
深入说明一一Java和C++的名词术语
或者是反其道而行省略图中不需要的项目（故不-定每次都能从类图还原成原始程
上下划线。
故写成斜体，
序)。
称为基类（BaseClass），而了类义称为派生类或扩充类。
以这是extends的箭头）。
方前就是类的层次结构关系。箭头是从子类（subclass）指向父类（superclass）（所
才能指出来，因此箭头方向是从子类指向父类。
定会知道父类是谁；但是父类就不一-定知道子类在哪里。必须知道对方在哪里，
理解，毕竟是先有父类才能生出子类。
成员变量（member variable），Java 的方法（method）则对应到C++的成员函数
其实，各位可以这么想：定义子类时，要用cxtends 指定父类，所以子类-
在UML当中，箭头是从子类指向父类。也许有人认为反过来应该比较容易
( member function ).
Java 跟 C++的名词术语稍微有点不一样。Java 的字段（field）对应到C++的
static方法（类方法）名称加l下划线，如ChildClass 的methodC为类方法，故加
ParentClass 是 ChildClass 的父类，ChildClass 则是 ParentClass 的了类。父类也
图中表示一个 Printable 接口，该接口上实现了个 PrintClass 类。接口名称为
abstract方法（抽象方法）以斜体表示，如ParentClass 的melhodA是抽象方法
static‘字段（类字段）名称加下划线。如feld2为类字段，故川上下划线。
abstract类（抽象类）名称以斜体衣示。
有时除了名称之外，还会有其他附属信息（如访问控制、方法的参数或类型等），
类均以方框表示，方框内再以横线分割儿个部分，分别足：
图0-2也是类图范例之
·方法名称
图 0-1 所表示的是 ParentClass 和 ChildClass这 2 个类之间的关系。白色箭头△
参
字段名称
类名称
：如ParentClass 为抽象类，故写成斜体
漫谈UML
1.
---
## Page 21
在菱形的容器上。
java.util.Vector类也好，如何实现也罢，只要有结合对象实例，
要结合了对象实例，无论个数多少都有聚合关系。数组、
果篮里面有“些水果，各种水果有不同的颜色。
个 Color 类的对象实例。从平面来看，它们的关系就好比是
的对象实例。而 Fnuit 类的 color 字段是 Color 类类型，Fruit 类的对象实例则只有
Basket 类中的 fruits 字段是Fruit 类的数组，Basket 类的对象实例则有多个 Fmuit 类
聚合
头从实现类指向接口（所以这是 implements的箭头）。
就具有聚合关系。
白色菱形的直线代表聚合关系，请把它想成是把东西放
class Basket ↑
Class Fruit f
class Color
图中所表示的是Color（颜色）、Fruin（水果），Baskel（果篮）这3个类的关系
图0-3也是类图范例之·
class Printrlass inplemerts Frirtabie i
interfaid Printahle f 
UML中的Java 接则以>表示。
虚线的白色箭头是表示接口与实现类的关系。箭
Fruitl] fruils;
void newpage() 1
void print()i
abslract vo:d printi);
abstract
coler color;
I!....
/.....
n
:()obedmau pios
！!
图0-2接1和实现类的类图
NewPage
Print
newPage
图0-3
1
PrinrClass
Printable
fruits"
color
聚合关系的类图
Basket
Fruit
Color
-——
111
---
## Page 22
0-5所示，
UML只要在方法或字段的名称前面加上符号，就可以表示访问控制。
内的类才能访间。
访问控制
类间的关联性
在相关的名称前面加上黑色一角形（→)，就可以表示类间的关联性。范例如图
若是#，则表示这是 protected 的方法或字段，只有同类、子类或同“package
而如果是一号，则表示这是 private 的方法或宁段，此时从类以外的位置就无法访问。
如果是+号，则表示这是 public 的方法或字段，从任何位置都可以访问。
图中所&示的是方法和学段的访问控制。
class someti:g f
图0-4还是类图的范例之一-
-..-
public
private
public
prorccred
prvate
Subject
Factory
C'lient
void pub_icMetnod()
void privat.eMe:hod()
-rt 
int privateFiels;
in: protecteDield;
publicField;
Notiffes
1$35.1
图0-5
T
类的关联性
Observer
Product
Target
+publicMethod
#protectedMethod
-privateMethod
+publicField
#protectedField
-privateField
Factory产生 Produet
Client使用Target
Subject通知Observer
图 0-4访问控制的类图
Something
漫谈UML
---
## Page 23
思是指 Client 类的对象实例、Server 类的对象实例以及Device 类的对象实例。
中，类名称写在冒号（：）后面，而且还加上下划线，如Client,Server,Device。意
处理流程和对象间的协调
变化的部分（动态行为）”。
序执行哪些方法、哪些现象会依什么顺序发生。
顺序图
UML的顺序图（Sequence Diagram）是月来表示启动程序时，会按照怎样的顺
在这个范例中出现了3个对象实例，分别对应到图例上方的3个方框。在方框
图0-6的右边是顺序图，左边则是相对应的Java程序（·-部分），
class Device l
class server i
class Ciient {
图 0-6 是
resuil write(stririg s) (
”(luadc pio4
Berver sorver;
return result;
void
/!....
i!....
种顺序图的范例
server.ulose();
server.point ("Heilo");
server.ope:();
work(){
..-...-
Wozk
图0-6
顺序图范例（调用方法）