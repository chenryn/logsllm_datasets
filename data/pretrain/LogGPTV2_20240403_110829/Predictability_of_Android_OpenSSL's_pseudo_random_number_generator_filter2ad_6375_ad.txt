probability. Then, how is the security of Android OpenSSL
aﬀected by this vulnerability? We analyze this subject in
this section.
The main interest is whether the problem of APRNG
poses a threat to the conﬁdentiality of OpenSSL, such as a
session key recovery. The session key is generated from the
PMS and other known variables. As mentioned in Section 3.3,
APRNG states cannot be restored in javax.net.ssl appli-
cations for extra unpredictable inputs, and thus the their
PMSs cannot be recovered at this time. We therefore focus
on org.webkit applications.
6.1 PMS Restoration
The generation of a PMS varies depending on the key ex-
change scheme of the negotiated ciphersuite. The 46 random
bytes of PMS are generated directly by APRNG of client in
RSA scheme. In the (EC)DH scheme, PMS is computed us-
ing the client’s randomly generated private key and server’s
public key.
It is notable that the random data related to
the PMS are generated immediately after the ClientHello
nonce is generated. Another Time value is added into the
APRNG states, but it can be predicted because it is almost
same as the time of the ClientHello packet. We can know
the states of the APRNG after outputting the ClientHello
nonce, and thus the remaining problem for recovering the
PMS is to estimate the existing value of the output buﬀer.
The buﬀer is deﬁned as a local variable in the RSA and as
a dynamic variable in the EC(DH). It seems diﬃcult to ﬁnd
the pattern of a dynamic variable. However, it is possible to
track the values of a local variable, because such variables
666Table 5: Comparison of buﬀer memory values
example
Memory value
case I
0063
00000000 6bdae5f2 0000000a 4e900379
403382cc 6bdae5f2 0000000a 4e900379
006257a0 6bdae5f2 0000000a
00ed
00000000 869f1107 0000000a 4e9da379
403492cc 869f1107 0000000a 4e9da379
00529fc0 869f1107 0000000a
WORD-1
WORD-2 WORD-3 WORD-4 WORD-5
Pattern WORD-6 WORD-3 WORD-4 WORD-5
case II
WORD-7 WORD-3 WORD-4
are stored in the stack memory. We therefore analyzed the
case of the RSA key exchange scheme.
Table 5 shows two examples of buﬀer values we should
examine. These values are not totally random and have a
certain pattern, which is abstracted in the last row of the
table.
To the results of tracking the memory, we found that the
46 bytes of the buﬀer are written while SSL_get_server_
certificate() function is executed. The use of each word
is as follows, where locking_callback() is a function used
to read the public key contained in the certiﬁcate.
(cid:15) WORD-1:
the address of a parameter of SSL_get_
server_certificate().
(cid:15) WORD-2: the result when verify_mode of SSL is SSL_
VERIFY_NONE, which is always 0x00000000.
(cid:15) WORD-3: the value of stack_chk_guard which is re-
quired by locking_callback().
(cid:15) WORD-4: the value of a variable used in locking_
callback(), which is always 0x0000000a.
(cid:15) WORD-5: the starting address of locking_callback().
(cid:15) WORD-6: the address of a ﬁle in which X509_pubkey_
get() is stored when the lock is set.
(cid:15) WORD-7:
the address of memory where sign algo-
rithm are stored when the X509_Certificate_type()
is executed.
WORD-2 and WORD-4 are ﬁxed values. The other words
vary at each time, but are not totally random as follows:
(cid:15) WORD-1: the upper 7 bits are always 0.
(cid:15) WORD-5: the upper 9 and lower 12 bits are ﬁxed.
(cid:15) WORD-6: the upper 12 and lower 12 bits are ﬁxed.
(cid:15) WORD-7: the upper 7 and lower 3 bits are ﬁxed.
We can therefore estimate all of the variables, except for
WORD-3, with O(250) complexity. WORD-3 (stack_chk_
guard) is fully random data. However, it is read from /dev/
urandom before the random data of /dev/urandom is input
into Zygote APRNG. It can therefore be predicted from
ktime and utsname found when we restore the APRNG
states. The CBN is less than 250, and we can therefore predict
WORD-3 at most O(28) trials. The maximum complexity
of restoring the PMS is thus O(258).
Note that the above complexity is not bitwise. To deter-
mine whether we estimated the unknowns exactly, we need
to calculate a session key from the unknowns and decrypt
the SSL packets. This requires dozens of hash computa-
tions and negotiated cipher operations such as RC4 or AES,
which cannot be executed even 250 times a year on a single
PC. However, this may be accomplished practically if the at-
tacker belongs to a well-funded enterprise or organizations.
Finally, we remark the possibility of improving the at-
tack. The randomness of WORD-1, 5, 6, and 7 is due to the
address ASLR provided beginning with Android 4.0 [1, 3].
If we can predict the ASLR operation more accurately on
general devices, the PMS recovery attack may be improved.
However, such a study is beyond the scope of this paper and
will be the subject of future work.
6.2 Effect of Decrypting the First Session
Suppose that we obtain the ﬁrst session of HTTPS re-
quests from the recovered session key. The decrypted HTTPS
request includes the request-line, the resource identiﬁed by
the request, the HTTP header, and message bodies. Among
them, the most important part is the HTTP header includ-
ing a cookie. A cookie has information regarding the login
and preferences when a user visits a Web site. If a user will
visit the same site in the future, the data stored in the cookie
can be used as an authentication token of the user.
An attackers can thereby impersonate a user request by
stealing a full set of cookies from the recovered ﬁrst session
[14]. Then, other important information may be stolen, and
other exploit attacks can be made based on this attack.
7. COUNTERMEASURE
The vulnerability of the APRNG described in this pa-
per stems from the following independent causes: an appli-
cation’s direct use of SSL CTX forked by Zygote, and the
boot-time entropy hole of LPRNG, and the insuﬃcient ex-
ternal entropy of APRNG.
The ﬁrst is due to the fundamental operating structure of
Android, which is related to Zygote forking, and therefore
supplementing it will not be easy, and appears to be outside
the scope of the information security community.
A well-known countermeasure for correcting the boot-time
entropy hole of LPRNG is saving the status at shutdown,
and writing it back to the pools at startup. This is rec-
ommended in general Linux systems, and can be achieved
using a script activated during system startups and shut-
downs. However, this countermeasure appears to be absent
in Android. If possible, this method can be a simple and
powerful countermeasure.
Adding more entropy sources to APRNG before gener-
ating ClinetHello nonce is another method to defeat our
attack. Besides resistance to our attack, there is impor-
tant reason to should consider this countermeasure. Since
Zygote forking structure is hard to change in Android, the
phenomenon that OpenSSL applications start with the same
initial PRNG states cannot be easily remedied. However,
this is much undesirable in the point of security. Therefore,
Scattering the PRNG states randomly in each application’s
startup is needed. It is recommendable that Additional un-
667predictable entropy sources are mixed when each application
starts.
8. CONCLUSION
In this paper, we revealed the vulnerability of the Android
OpenSSL PRNG. After we investigated the operating pro-
cess of Android OpenSSL, its concrete implementation, and
the entropy sources of its PRNG, we claimed and veriﬁed
that the initial states of APRNG can be recovered practi-
cally. We also showed that our discovery can be a real threat
to Android by showing that the PMSs of some SSL sessions
can be recovered practically.
To the best of our knowledge, most previously revealed
Android SSL vulnerabilities are problems of individual ap-
plications, and can therefore be easily corrected at the ap-
plication level from careful use and implementation. In con-
trast, the problem we identiﬁed is due to the structural limits
of the Android architecture and LPRNG, and therefore af-
fects every Android application that use OpenSSL. Further
studies on the memory allocation and each device charac-
teristic may reduce the complexity or extend the aﬀected
applications during practical attacks. We recommend that
adequate countermeasures should be immediately adopted.
The security of Android is becoming increasingly impor-
tant owing the widespread use of mobile devices. Our study
serves as a reminder that more studies and supplements are
needed to ensure the security of Android.
9. ACKNOWLEDGEMENTS
We would like to thank Peter Gutmann and the anony-
mous reviewers for their helpful comments and suggestions
for enhancing the quality of this paper. Dong Hoon Lee is
supported by Next-Generation Information Computing De-
velopment Program through the National Research Founda-
tion of Korea (NRF) funded by the Ministry of Science, ICT
& Future Planning (2010-0020726).
10. REFERENCES
[1] Address space layout randomization.
http://en.wikipedia.org/wiki/Address_space_
layout_randomization.
[2] Android debug bridge.
http://developer.android.com/tools/.
[3] Android Security Overview. http:
//source.android.com/devices/tech/security/.
[4] Break DES in less than a single day.
http://www.sciengines.com/company/
news-a-events/74-des-in-1-day.html.
[5] IDC - Press Release. http://www.idc.com/getdoc.
jsp?containerId=prUS24257413.
[6] OpenSSL. http://www.openssl.org/.
[7] RFC 4507: Transport Layer Security (TLS) Session
Resumption without Server-Side State.
[8] The Debian Project. Openssl-Predictable Random
Number Generator, DSA-1571-1. Available from
http://www.debian.org/security/2008/dsa-1571.
[9] Trace32. http://www.lauterbach.com/.
[10] N. J. Alfardan and K. G. Paterson,
Plaintext-Recovery Attacks Against Datagram TLS.
In Network and Distrubited System Security
Symposium (NDSS 2012), 2012.
[11] T. Biege. Analysis of a Strong Pseudo Random
Number Generator by anatomizing Linux’ Random
Number Device. Tech. rep., PhoneFactor, Inc., Nov.
2006.
[12] D. Brumley and D. Boneh. Remote Timing Attacks
Are Practical. In Proceedings of the 12th conference on
USENIX Security Symposium - Volume 12 (Berkeley,
CA, USA, 2003), USENIX Association, 2003.
[13] B. Canvel, A. Hiltgen, S. Vaudenay, and M.
Vuagnoux. Password Interception in a SSL/TLS
Channel. In Proceedings of Advances in Cryptology -
CRYPTO 2003 , Springer-Verlag, pp. 583–599, 2003.
[14] T. Duong and J. Rizzo. Here Come the Xor Ninjas.
Tech. rep., May 2011.
[15] S. Fahl, M. Harbach, T. Muders, L. Baumg¨artner, B.
Freisleben, and M. Smith. Why Eve and Mallory Love
Android: An Analysis of Android SSL (In)Security. In
Proceedings of the 2012 ACM conference on Computer
and communications security, pp. 50–61, 2012.
[16] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D.
Boneh, and V. Shmatikov. The Most Dangerous Code
in the World: Validating SSL Certiﬁcates in
Non-browser Software. In Proceedings of the 2012
ACM conference on Computer and communications
security, pp. 38–49, 2012.
[17] N. Heninger, Z. Durumeric, E. Wustrow, and J. A.
Halderman. Mining Your Ps and Qs: Detection of
Widespread Weak Keys in Network Devices. In
Proceedings of the 21st USENIX Security Symposium,
pp. 205–220, 2012.
[18] V. Klima, O. Pokorny, and T. Rosa. Attacking
RSA-Based Sessions in SSL/TLS. In Proceedings of
Cryptographic Hardware and Embedded Systems
(CHES) 2003 , Springer, pp. 426–440, 2003.
[19] P. Lacharme. The Linux Pseudorandom Number
Generator Revisited. IACR ePrint Arcive 2012/251.
Available from http://eprint.iacr.org/2012/251.
[20] M. Marlinspike. More Tricks for Defeating SSL in
Practice. In Black Hat USA, 2009.
[21] C. Meyer and J. Schwenk. Lessons Learned from
Previous SSL/TLS Attacks: A Brief Chronology of
Attacks and Weakness. IACR ePrint Arcive 2013/049.
Available from http://eprint.iacr.org/2013/049.
[22] M. Ray and S. Dispensa. Renegotiating TLS.
Technical Report, PhoneFactor, Inc., Nov. 2009.
[23] T. Ristenpart and S. Yilek. When Good Randomness
Goes Bad: Virtual Machine Reset Vulnerabilities and
Hedging Deployed Cryptography. In Proceedings of the
Network and Distributed System Security Symposium
(NDSS) 2010 . Internet Society, 2010.
[24] T. Vuillemin, F. Goichon, C. Lauradoux, and G.
Salagnac. Entropy Transfers in the Linux Random
Number Generator. Research Report 8060, INRIA,
Sept. 2012.
[25] S. Yilek, E. Rescorla, H. Shacham, B. Enright, and S.
Savage. When Private Keys Are Public: Results From
the 2008 Debian OpenSSL Vulnerability. In
Proceedings of IMC 2009 , pp. 15–27, 2009.
668