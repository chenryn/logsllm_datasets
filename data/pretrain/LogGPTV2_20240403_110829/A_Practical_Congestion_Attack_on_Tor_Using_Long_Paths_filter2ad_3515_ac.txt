that in the simplest case, the attacker will iterate over all
known Tor routers with the goal of ﬁnding which of these
routers is the entry point of the circuit.
For each router X, the attacker constructs a long cir-
cuit that repeatedly includes X on the path. Since Tor re-
lays will tear down a circuit that tries to extend to the pre-
vious node, we have to use two (or more) other (prefer-
ably high-bandwidth) Tor routers before looping back to
X. Note that the attacker could choose two different (in-
voluntary) helper nodes in each loop involving X. Since
X does not know that the circuit has looped back to X,
Tor will treat the long attack circuit as many different
circuits when it comes to packet scheduling (Fig. 4).
Once the circuit is sufﬁciently long (we typically
found 24 hops to be effective, but in general this depends
on the amount of congestion established during the base-
line measurements), the attacker uses the circuit to trans-
mit data. Note that a circuit of length m would allow
an attacker with p bandwidth to consume m · p band-
width on the Tor network, with X routing as much as
m·p
3 bandwidth. Since X now has to iterate over an ad-
ditional m
3 circuits, this allows the attacker to introduce
large delays at this speciﬁc router. The main limitation
for the attacker here is time. The larger the desired delay
d and the smaller the available attacker bandwidth p the
longer it will take to construct an attack circuit of sufﬁ-
cient length m: the number of times that the victim node
is part of the attack circuit is proportional to the length of
7
Figure 5: These ﬁgures show the results of perturbation of circuits in Tor and the resulting effects on latency. The
x-axes show sample numbers (one per second), and the (left) y-axes are latency variance observed on the circuits in
seconds. The attack on the ﬁrst router of each circuit starts at time 600; the third line shows the amount of data (scaled)
that transferred through the attack circuit (scaled to the right y-axes). These are individual trials; each shows a single
control run and a single attack run.
the circuit m. In other words, the relationship between p,
m and the delay d is d ∼ p · m.
If the router X is independent of the victim circuit, the
measured delays should not change signiﬁcantly when
the attack is running. If X is the entry node, the attacker
should observe a delay pattern that matches the power of
the attack – resulting in a horizontal latency variance his-
togram as described in Section 3.2. The attacker can vary
the strength of the attack (or just switch the long attack
circuit between idle and busy a few times) to conﬁrm that
the victim’s circuit latency changes correlate with the at-
tack. It should be noted that the attacker should be care-
ful to not make the congestion attack too powerful, espe-
cially for low-bandwidth targets. In our experiments we
sometimes knocked out routers (for a while) by giving
them far too much trafﬁc. As a result, instead of receiv-
ing requests from the JavaScript code with increasing la-
tencies, the attacker suddenly no longer receives requests
at all, which gives no useful data for the statistical evalu-
ation.
3.5 Optimizations
The adversary can establish many long circuits to be used
for attacks before trying to deanonymize a particular vic-
tim. Since idle circuits would not have any impact on
measuring the baseline (or the impact of using another at-
tack circuit), this technique allows an adversary to elim-
inate the time needed to establish circuits. As users can
only be expected to run their browser for a few minutes,
eliminating this delay may be important in practice; even
users that may use their browser for hours are likely to
change between pages (which might cause Tor to change
exit nodes) or disable Tor.
In order to further speed up the process, an adver-
sary can try to perform a binary search for X by ini-
tially running attacks on half of the routers in the Tor
network. With pre-built attack circuits adding an almost
unbounded multiplier to the adversary’s resources, it is
conceivable that a sophisticated attacker could probe a
network of size s in log2 s rounds of attacks.
8
1234567 0 200 400 600 800 1000 1200102030405060708090100110120130140150160Latency variance (in seconds)Bytes expended by attacker (in kB)Sample numberLatency measurement graph freedomsurfersControl RunAttack RunDownloaded Data15101520253031 0 200 400 600 800 1000 12001020304050Latency variance (in seconds)Bytes expended by attacker (in kB)Sample numberLatency measurement graph bloxortsipt41Control RunAttack RunDownloaded Data12345678910111213141516 0 200 400 600 800 1000 120010203040Latency variance (in seconds)Bytes expended by attacker (in kB)Sample numberLatency measurement graph cariniControl RunAttack RunDownloaded Data12345678910111213 0 200 400 600 800 1000 120010203040Latency variance (in seconds)Bytes expended by attacker (in kB)Sample numberLatency measurement graph cariniControl RunAttack RunDownloaded DataFigure 6: These ﬁgures show the results of four independent runs of our congestion attack. In the histograms the
x-axis groups ranges of latency variance values together and the y-axis represents the number of readings received
in that range. The hash marked bars represent the unperturbed measurements on a circuit and the plain bars show
measurements from the same circuit during the attack. The effect of the attack is a shift to higher latency values. The
ﬁrst and second lines are linear least squares ﬁt approximations for the baseline and congestion runs, respectively.
These data show the difference between a single control/attack run and are not averages of many runs.
In practice, pre-building a single circuit that would
cause congestion for half the network is not feasible;
the Tor network is not stable enough to sustain circuits
that are thousands of hops long. Furthermore, the differ-
ences in available bandwidth between the routers compli-
cates the path selection process. In practice, an adversary
would most likely pre-build many circuits of moderate
size, forgoing some theoretical bandwidth and attack du-
ration reductions for circuits that are more reliable. Fur-
thermore, the adversary may be able to exclude certain
Tor routers from the set of candidates for the ﬁrst hop
based on the overall round-trip latency of the victim’s
circuit. The Tor network allows the adversary to mea-
sure the latency between any two Tor routers [19, 27]; if
the overall latency of the victim’s circuit is smaller than
the latency between the known second router on the path
and another router Y , then Y is most likely not a candi-
date for the entry point.
Finally, the adversary needs to take into considera-
tion that by default, a Tor user switches circuits ev-
ery 10 minutes. This further limits the window of op-
portunity for the attacker. However, depending on the
browser, the adversary may be able to cause the browser
to pipeline HTTP requests which would not allow Tor to
switch circuits (since the HTTP session would not end).
Tor’s circuit switching also has advantages for the ad-
versary: every 10 minutes there is a new chance that the
adversary-controlled exit node is chosen by a particular
victim. Since users only use a small number of nodes for
the ﬁrst node on a circuit (these nodes are called guard
nodes [29]), the adversary has a reasonable chance over
time to determine these guard nodes. Compromising one
of the guard nodes would then allow full deanonymiza-
tion of the target user.
9
01002003004005006001234567Number of measurements in rangeRange of measurements (in seconds)Histogram of latency measurements for freedomsurfersControl RunAttack RunControl Run Regression LineAttack Run Regression Line010020030040050060012345678910111213141516171819202122232425262728293031Number of measurements in rangeRange of measurements (in seconds)Histogram of latency measurements for bloxortsipt41Control RunAttack RunControl Run Regression LineAttack Run Regression Line010020030040050060012345678910111213141516Number of measurements in rangeRange of measurements (in seconds)Histogram of latency measurements for cariniControl RunAttack RunControl Run Regression LineAttack Run Regression Line010020030040050060012345678910111213Number of measurements in rangeRange of measurements (in seconds)Histogram of latency measurements for cariniControl RunAttack RunControl Run Regression LineAttack Run Regression LineFigure 7: This ﬁgure shows the development of χ2 values (using the modiﬁed χ2 calculation as described in Sec-
tion 3.3) for the various candidates over a prolonged period of performing a congestion attack on the various nodes.
The χ2 values are computed against a ﬁve-minute baseline obtained just prior to the congestion attack. The χ2 value
of the correct entry node quickly rises to the top whereas the χ2 values for all of the other candidates are typically
lower after about a minute of gathering latency information under congestion. This illustrates that a few minutes are
typically sufﬁcient to obtain a meaningful χ2 value.
4 Experimental Results
The results for this paper were obtained by attacking Tor
routers on the real, deployed Tor network (initial mea-
surements were done during the Spring and Summer of
2008; additional data was gathered in Spring 2009 with
an insigniﬁcantly modiﬁed attacker setup; the modiﬁca-
tions were needed because our original attack client was
too outdated to work with the majority of Tor routers at
the time). In order to conﬁrm the accuracy of our experi-
ments and avoid ethical problems, we did not attempt to
deanonymize real users. Instead, we established our own
client circuits through the Tor network to our malicious
exit node and then conﬁrmed that our statistical analysis
was able to determine the entry node used by our own
client. Both the entry nodes and the second nodes on the
circuits were normal nodes in the Tor network outside of
our control.
The various roles associated with the adversary (exit
node, malicious circuit client, and malicious circuit web-
server) as well as the “deanonymized” victim were dis-
tributed across different machines in order to minimize
interference between the attacking systems and the tar-
geted systems. For the measurements we had the simu-
lated victim running a browser requesting and executing
the malicious JavaScript code, as well as a machine run-
ning the listening server to which the client transmits the
“ping” signal approximately every second (Fig. 1). The
browser always connected to the same unmodiﬁed Tor
client via Privoxy [20]. The Tor client used the standard
conﬁguration except that we conﬁgured it to use our ma-
licious exit node for its circuits. The other two nodes in
the circuit were chosen at random by Tor. Our malicious
exit node participated as a normal Tor router in the Tor
network for the duration of the study (approximately six
weeks). For our tests we did not actually make the exit
server inject the JavaScript code; while this is a relatively
trivial modiﬁcation to the Tor code we used a simpliﬁed
setup with a webserver serving pages with the JavaScript
code already present.
The congestion part of the attack requires three com-
ponents: a simple HTTP server serving an “inﬁnite”
stream of random data, a simple HTTP client down-
loading this stream of data via Tor, and ﬁnally a mod-
iﬁed Tor client that constructs “long” circuits through
those Tor nodes that the attacker would like to congest.
Speciﬁcally, the modiﬁed Tor client allows the attacker
to choose two (or more) routers with high bandwidth and
a speciﬁc target Tor node, and build a long circuit by
repeatedly alternating between the target node and the
other high bandwidth nodes. The circuit is eventually ter-
minated by connecting from some high-bandwidth exit
node to the attacker’s HTTP server which serves the “in-
ﬁnite” stream of random data as fast as the network can
process it. As a result, the attacker maximizes the uti-
lization of the Tor circuit. Naturally, an attacker with
10
 0 50 100 150 200 250 300306090120150180210240270Chi Square Values of Attack vs. BaselineSeconds of Measurement for Attack RunRattensalatDigitalBrainsBlueStar88aBlueStar88a-2elc1Figure 8: This graph shows three sets of cumulative χ2 computations for three nodes;
the actual entry node
(Rattensalat), a node that initially shows up as a false-positive (TorSchleim) and a typical negative
(DigitalBrains). As expected, the χ2 values (at time 120 s) are consistently the highest for the correct node;
false-positives can be ruled out through repeated measurements.
signiﬁcant bandwidth can elect to build multiple circuits
in parallel or build shorter circuits and still exhaust the
bandwidth resources of the target Tor router.
In order to cause congestion, we simply started the
malicious client Tor process with the three chosen Tor
routers and route length as parameters and then at-
tempted to connect via libcurl [6] to the respective
malicious server process. The amount of data received
was recorded in order to determine bandwidth consumed
during the tests. In order to further increase the load on
the Tor network the experiments presented actually used
two identical attacker setups with a total of six machines
duplicating the three machine setup described in the pre-
vious paragraph. We found path lengths of 24 (making
our attack strength eight times the attacker bandwidth)
sufﬁcient to alter latencies. The overall strength of the
attack was measured by the sum of the number of bytes
routed through the Tor network by both attacker setups.
For each trial, we waited to receive six hundred responses
from the “victim”; since the browser transmitted requests
to Tor at roughly one request per second, a trial typically
took approximately ten minutes.
In addition to measuring the variance in packet ar-
rival time while congesting a particular Tor router, each
trial also included baseline measurements of the “un-
congested” network to discover the normal variance in
packet arrival time for a particular circuit. As discussed
earlier, these baseline measurements are crucial for deter-
mining the signiﬁcance of the effect that the congestion
attack has had on the target circuit.
Fig. 5 illustrates how running the attack on the ﬁrst hop
of a circuit changes the latency of the received HTTP re-
quests generated by the JavaScript code. The ﬁgure uses
the same style chosen by Murdoch and Danezis [27],
except that an additional line was added to indicate the
strength of the attack (as measured by the amount of traf-
ﬁc provided by the adversary). For comparison, the ﬁrst
half of each of the ﬁgures shows the node latency vari-
ance when it is not under active congestion attack (or at
least not by us).
While the plots in Fig. 5 visualize the impact of the
congestion attack in a simple manner, histograms show-
ing the variance in latency are more suitable to demon-
strate the signiﬁcance of the statistical difference in the
trafﬁc patterns. Fig. 6 shows the artiﬁcial delay experi-
enced by requests traveling through the Tor network as
observed by the adversary. Since Tor is a low-latency
anonymization service, the requests group around a low
value for a circuit that is not under attack. As expected,
if the entry node is under attack, the delay distribution
changes from a steep vertical peak to a mostly horizontal
distribution. Fig. 6 also includes the best-ﬁt linear ap-
proximation functions for the latency histograms which
we use to characterize how vertical or how horizontal the
histogram is as described in Section 3.2.
Fig. 7 illustrates how the χ2 values evolve for various
nodes over time. Here, we ﬁrst characterized the baseline
congestion for the router for ﬁve minutes. Then, the con-
gestion attack was initiated (congesting the various guard
nodes). For each attacked node, we used the modiﬁed
11
 0 50 100 150 200 250 300 35030609012003060901200306090120Chi Square ValueSeconds of Measurement in RunChi Sq. Values for Router RattensalatChi Sq. Values for Router TorSchleimChi Sq. Values for Router DigitalBrainsFigure 9: Plot of the product of χ2 p-values for the top 20 candidate nodes (out of ∼200 and ∼250, respectively)
by run (a run is 300 s baseline vs. 300 s attack) for two entry nodes. The ﬁrst hop (Privacyhosting (left),
Rattensalat (right)) routers were tested many more times than other routers, because the others quickly fell to low
values. We expect an attacker to perform more measurements for routers that score high to validate the correct entry
node was found. Our measurements demonstrate that the multiplied p-value remains consistently high for the correct
entry node. The y-axis is plotted on a log scale from 0 to 1− 1× 10−10 and 1− 1× 10−20, respectively. We speculate
that the lower maximum value for Privacyhosting is due to its higher bandwidth (900 kB/s vs. 231 kB/s).
χ2 summation (from Section 3.3) to determine how con-
gested the victim’s circuit had become at that time. We
computed (cumulative) χ2 values after 30 s, 60 s, 90 s
and so forth. For the χ2 calculations, we used 60 bins
for 300 baseline values; in other words, the time inter-
vals for the bins were chosen so that each bin contained
ﬁve data points during the ﬁve minutes of baseline mea-
surement. The 20 bins in the middle were not included
in the summation, resulting in 40 degrees of freedom.
As expected, given only 30 s of attack data some “inno-
cent” nodes have higher χ2 values compared to the entry
node (false-positives). However, given more samples the
χ2 values for those nodes typically drop sharply whereas
the χ2 value when congesting the entry node increases
or remains high. Of course, false-positive nodes χ2 val-
ues may increase due to network ﬂuctuations over time
as well.
Unlucky baseline measurements and shifts in the base-
line latency of a router over time can be addressed by
iterating between measuring baseline congestion and at-
tack measurements. Fig. 8 shows three iterations of ﬁrst
determining the current baseline and then computing χ2
values under attack. Again the correct entry node ex-
hibits the largest χ2 values each time after about a minute
of gathering latency data under attack.
Given the possibility of false-positives showing up ini-
tially when computing χ2 values, the attacker should
target “all” suspected guard nodes for the ﬁrst few it-
erations, and then focus his efforts on those nodes that
scored highly. Fig. 9 illustrates this approach. It com-