they are several hops removed from an interface with an address in
our IP-AS mappings, or an IR annotated in §5. As shown in Fig. 8,
by the second iteration of the graph refinement loop we used the
AS annotation for IR4 to correctly annotate IR1 with ASX , even
though IR1 only has links to unannounced addresses.
Third-Party Addresses (lines 6-8): At this point, we know that
the subsequent interface address is not in our IXP dataset, and has
a matching prefix in either BGP announcements or RIR delegations.
The goal in this step is to assess whether we should use the origin
AS as a constraint, which we do unless we believe the router used
a third party address to reply.
Third-party addresses typically result from asymmetric routing,
when the interface used to respond to a traceroute probe (egress)
is different from that which received the probe (ingress) [19,26].
When the ingress and egress interfaces use the same AS address
space, or the router puts the ingress address in the reply source
field, asymmetric routing presents no problems in IR annotation.
Difficulties arise when the egress and ingress interfaces come from
different AS address spaces, and the router uses the egress interface
address as the source address of the reply.
Figure 10: When ASC is a customer of ASP we annotate IR1
with ASC.
Any interface with an origin AS that is both not in the link’s
origin AS set, and differs from its IR’s annotation, is a potential third-
party address (Fig. 9). bdrmapIT uses a two-step test to infer whether
c is a third-party address. First, there must be an AS relationship
between at least one AS in LI R1,c and ASB. This AS relationship
indicates that the traceroute probe could get to ASB from the origin
AS without going through ASC. Second, ASC must not appear in the
destination ASes specific to IR1 and c. This test indicates that probes
transmitted from IR1 to c were never destined to ASC. While not
exhaustive, this test gives a reasonably strong indication that c is
likely a third-party address, so we should not include its annotation
in the voting. Instead, we include a vote for IR2’s annotation, in this
case ASB. If c’s IR does not yet have an annotation, only possible
in the first iteration of the graph refinement loop, we skip the
third-party tests entirely.
6.1.2 Correct Reallocated Prefixes. In the previous step we deter-
mined the vote for each subsequent interface independently, but in
this step we evaluate all of the subsequent interfaces together. As
in §4.4, we try to identify situations where a provider reallocated
some of its address space to a customer (Fig. 10), but continues
to announce a containing prefix into BGP. To prevent incorrect
annotations of a provider router with a customer AS, we take a
conservative approach. Our test first looks at all of IR1’s subsequent
interfaces that map to an AS seen in its origin AS set, in this case
x.x.x.1 and x.x.x.5. Then this step collects the IR annotations for
those interfaces, along with the /24 prefix for their addresses. If all
of the annotations are the same, the single annotation is a customer
of an IR origin AS, and all of the addresses have the same /24 prefix,
we conclude that the prefix was reallocated. In this case, all of the
matching subsequent interfaces have the prefix x.x.x/24, and their
IRs are annotated with ASC, so we change their votes from ASP to
the customer ASC.
To avoid mistakenly annotating an IR with a customer AS, we re-
quire a single prefix for all subsequent interfaces, as well as multiple
links. Often, the unannounced reallocated prefixes are smaller than
/24, but matching against a /24 catches smaller prefixes without
incurring too much risk of matching too large a prefix.
6.1.3 Check for Exceptions. From developing and using MAP-IT we
learned that, in general, the AS that receives the highest number of
votes operates the IR. Adapting bdrmap heuristics for more general
use in bdrmapIT led us to consider two exceptions to this general
rule.
63
IR1?ASXaASAIR2ASXu1?IR3ASXu2?IR4ASXu3?        IR1AS?IR2ASBc ASC L(IR1,c)={ASA}a ASA IR2ASCIR2ASCIR1 ASC c ASC p1 ASP p2 ASP x.x.x.1 ASP x.x.x.5 ASP Pushing the Boundaries with bdrmapIT
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Figure 11: A multihomed customer can present an exception
to majority voting, as when ASC is a multihomed customer
of ASP , selecting the most frequent AS results in IR1 inferred
to be owned by ASP instead of ASC.
Multihomed to a Provider: The most common exception is for
links between transit providers and customer ASes, where select-
ing the AS with the most votes results in an incorrect choice. In
accordance with industry convention, transit link interfaces usually
use addresses from the provider’s address space. The result is that
border IRs operated by a customer AS often have more interfaces
with addresses from their providers’ address space than links to
subsequent interfaces with addresses from the customer’s address
space.
When the customer is a large ISP the IR voting system usually
does not make false inferences, but when the IR belongs to a stub AS,
our voting system can make false inferences. When a customer IR is
multihomed to a transit provider, the IR will have multiple interfaces
each with an address from the provider; if traceroute paths observe
fewer links to IRs with addresses in the customer network, as in
Fig. 11, a pure voting system will make a false inference.
We identify and account for these exceptional cases. When there
is only a single subsequent ASj, we check to see if ASj is a customer
of any IR origin AS. Returning to the example in Fig. 11 we check
if ASC is a customer of ASP , and annotate IR1 with ASc if it is.
We do not use the single subsequent AS exception when there is
no relationship between it and any origin AS, instead relying on
votes (§6.1.4) or looking for a hidden AS (§6.1.5). We choose not
to select an AS yet since BGP AS paths typically contain the vast
majority of transit relationships.
Multiple Peers/Providers: The second exception is when the IR
interfaces all have the same origin AS, there are multiple subsequent
ASes, and all of the subsequent ASes are either peers or providers
of that AS. In this case, we expect that the origin AS is the AS that
operates the IR, since it is the common denominator between the
subsequent ASes. Conversely, when the IR has multiple interface
origin ASes, and there is a single subsequent AS that is a peer or
provider of every origin AS, we select the subsequent AS for the
same reason. We annotate the IR with the selected AS provided
that it has at least half as many votes as the AS with the most votes.
If it has less than half the votes, it suggests that it is not actually
the operating AS, so we do not apply the exception.
6.1.4 Apply IR Vote Heuristics. After determining the subsequent
interface votes, adjusting reallocated prefixes, and checking for
exception conditions, we use the votes to determine the AS an-
notation for the IR. As long as at least one subsequent AS has an
observed relationship with an IR origin AS, then the election is held
between the IR origin ASes and any subsequent ASes that have a
Figure 12: Hidden ASes occur when traceroutes traverse an
IR in ASB, but traceroute never observes any IP addresses
from ASB on it or any IR adjacent, suggesting an AS path of
A-C, instead of A-B-C
relationship with an IR origin AS. This constraint helps ensure that
the selected AS will have a relationship with at least one IR origin
AS. If the new restricted set only contains IR origin ASes, then we
revert to using all of the ASes with a vote, but check for a hidden
AS (§6.1.5) following this step.
We use the selected AS, which has the most votes, as the annota-
tion for the IR. Our justification follows from the observation that
an interface address in ASA indicates that its IR, the IRs connected
to it, or both, are operated by ASA, since interdomain link inter-
faces use the address space of only one of the two networks. Viewed
through this lens, every interface on, and subsequent to, the IR is
circumstantial evidence of the operating AS. Selecting the AS with
the most votes also selects the AS with the most circumstantial
evidence.
Occasionally, multiple ASes will tie for the highest vote. We
break the tie by selecting the most likely customer AS from the
group, by choosing the AS with the smallest customer cone. Since
transit link interfaces are usually addressed from the provider’s
address space, and we expect that most interdomain links seen in
traceroute are transit links, we try to select the customer AS.
6.1.5 Check for a Hidden AS. Finally, we check to see if our selec-
tion has a relationship to any member of the IR’s origin AS set. If
so, we use this selection for the IR annotation. Otherwise, we look
for the possibility of a hidden AS. Occasionally, despite a traceroute
traversing an AS, it reports no IP addresses from that AS (Fig. 12).
We most often encounter hidden ASes when a transit link between
a small ISP and its customer uses the customer’s address space.
To avoid an incorrect annotation, we attempt to find an AS that
bridges between the selected AS and subsequent ASes by finding
an AS that is a customer of the selected AS, and a provider of a
subsequent AS. When there is a single such AS, we change our
selection to that AS. Otherwise, we leave our selection unmodified.
6.2 Annotate Interfaces
Following the router annotation step, we update the interface AS
annotations to align the interface AS annotations with the router it
connects to. As long as the interface address is not an IXP address,
we assume the interface connects to one router, and therefore one
64
IR1 ? c ASC p1 ASP p2 ASP ASCASBIR c1 ASC c2 ASC a2 ASA ASAIMC ’18, October 31-November 2, 2018, Boston, MA, USA
A. Marder et al.
(a)
(b)
(a) Iteration 1: IR Annotation
(b) Iteration 1: Interface Annotation
(c)
Figure 13: (a) If the interface’s origin AS is different than the
IR’s annotation, we annotate with the interface’s origin AS.
(b,c) If they are the same, we annotate with a single AS from
the connected IRs.
AS. However, the operator of the connected router might be ob-
scured, either due to mistakes in the router annotations, or as a
result of it appearing as a third-party address. This step selects a
single AS annotation for the interface.
An interface origin AS will either come from the AS operating
its router, or from a different AS directly connected to the interface
that provides the interface address for interconnection. Thus, if
the origin AS for an interface differs from the AS annotation for
the interface’s IR, we use the interface address’ origin AS as the
interface AS annotation, since that AS operates the connected IR.
That is, if the interface address does not come from the AS operating
the router it is on, it must come from the AS operating the router it
connects to. In Fig. 13a, we previously inferred that IR1 is operated
by ASB, leading us to conclude that a connects to a router operated
by ASA, so we annotate a with its origin ASA.
When the interface origin AS is the same as the current AS
annotation for IR1 (Fig. 13b and Fig. 13c), we select one of the
ASes from the IRs connected by links in our graph. Similar to §6.1,
we use a voting system, but in this step we give each connected
IR a vote for each of its interfaces seen prior to interface b in a
traceroute. In Fig. 13b, ASA receives three votes and ASC, which
might be an errant annotation, receives one vote. To determine the
AS annotation of the interface, we select the AS with the most votes,
breaking ties using the tied AS with the largest customer cone that
also has a BGP-observed relationship to the interface origin AS. If
no tied AS has a relationship to the interface AS, then we use the
interface address’ origin AS as the annotation to avoid negatively
impacting the IR annotations with an incorrect inference.
Finally, so far we have focused on potential interdomain links.
It is possible, as in Fig. 13c, that the interface origin AS and IR AS
(c) Iteration 2: IR Annotation
Figure 14: bdrmapIT refines the graph as it progresses from
the first iteration to the second. The annotation for IR1 is
corrected from ASB (a) to ASA (c).
annotations are the same, because the same AS operates its router
and the connected router. In these cases we annotate b with its
origin AS.
6.3 Refine the Graph
bdrmapIT repeatedly updates IR annotations (§6.1) and interface
annotations (§6.2) until no modifications are made in an iteration.
Fig. 14a illustrates the approach. During the IR annotation stage
of the first iteration, IR1 has only a single link to the subsequent
interface b, with AS annotation ASB. If ASB is either a customer of
ASA, or a peer with a smaller customer cone, we might incorrectly
annotate IR1 with ASB. Fortunately, in the interface annotation
stage (Fig. 14b), b has links to two IRs. Since IR3 has two interfaces,
ASA receives the most votes, changing b’s annotation from its origin
AS to ASA. When we return to IR annotations in the second iteration
of the graph refinement loop (Fig. 14c), IR1 uses the new annotation
for b, which corrects the annotation for IR1 to ASA.
7 EVALUATION
We validate our approach against ground truth from four networks:
a Tier-1 network, a large access network, and two research and
education (R&E) networks. Except for one R&E network, we reused
the 2016 ground truth acquired for the bdrmap evaluation, which
was gathered by first running bdrmap from a VP in each network. We
created the 2018 ground truth dataset by first running bdrmapIT on
traceroutes initially collected by bdrmap. In both cases, the resulting
inferences were sent to the network operators for each VP network
to obtain a validation dataset. We did not ask them to validate
missing inferences due to the burden on the network operator,
although a small number of interdomain links appear in our ground
truth that bdrmap did not identify. The remaining R&E network,
labeled R&E 1, provided us with router configurations of its primary
AS, which includes internal and interdomain links involving its
backbone.
65
IR1 ASB a ASA IR1 ASB b ASA IR2 ASA a1 ASA IR3 ASA a3 ASA IR4 ASC c ASC a2 ASA IR1 ASB b ASB IR2ASBIR3ASBIR4ASBb1 ASB b2 ASB b3 ASB IR2 ASB b ASB IR1ASBIR2ASBb ASA IR3ASAIR1ASBIR2 ASBb ASA IR1ASAPushing the Boundaries with bdrmapIT
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Figure 15: (all data) bdrmapIT is more accurate than bdrmap for the 4 ground
truth networks. Bottom number reports links visible in the paths.
To evaluate bdrmapIT, we ran three separate experiments us-
ing datasets from the spring of 2016 and spring of 2018. We used
validation data from the same time period as the dataset.
(1) We regression tested against bdrmap to ensure that the adapted
heuristics in bdrmapIT perform at least as well as the original
bdrmap heuristics (§7.1);
(2) We demonstrated the power of our new approach on Internet-
wide datasets with no VPs in our validation networks, show-
ing that bdrmapIT has high accuracy and vastly outperforms
MAP-IT (§7.2);
(3) We show that our accuracy does not diminish when datasets
have fewer traceroute VPs than a full ITDK (§7.3).
7.1 bdrmapIT Validation on bdrmap Data
The first experiments compare mappings generated by bdrmapIT to
inferences drawn by bdrmap, ensuring that our adaptations of the
bdrmap heuristics do not adversely affect their accuracy. bdrmap
has been running in several networks since 2016; we feed the
traceroutes and alias resolution from those bdrmap runs as input
to bdrmapIT. We used the data that bdrmap gathered as an existing
dataset, ensuring that bdrmapIT and bdrmap base their mappings on
identical traceroute data.
Our validations (Fig. 15) confirm that bdrmapIT performs at least
as accurately as bdrmap in its limited problem domain, which is
mapping the border of a single network using traceroutes from a
single VP in that network. In fact, bdrmapIT performs slightly more
accurately than bdrmap, primarily due to mapping past the VP AS
border, enabling better hidden AS and third party identification.
While these results verify that adapting the bdrmap heuristics to the
MAP-IT framework did not weaken their ability to map the border