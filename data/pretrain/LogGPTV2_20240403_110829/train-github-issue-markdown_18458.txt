Piping ReadableStream through TextDecoderStream leaks resource as demonstrated
with following test:
    Deno.test("leaks", async () => {
      const res = await fetch(
        "https://deno.land/std@0.186.0/json/testdata/test.jsonl"
      )
      const textStream = new TextDecoderStream()
      const reader = res.body!.pipeThrough(textStream).getReader()
      const t = await reader.read()
      await reader!.cancel()
    })
Run `deno test stream-test.ts` and you will get:
    error: Leaking resources:
      - A text decoder (rid 6) was created during the test, but not finished during the test. Close the text decoder by calling `textDecoder.decode('')` or `await textDecoderStream.readable.cancel()`.
Adding `await t.readable.cancel()` as error message suggested does not help.
A following solution with manual decoding works properly:
    Deno.test("working alternative", async () => {
      const res = await fetch(
        "https://deno.land/std@0.186.0/json/testdata/test.jsonl"
      )
      const textDecoder = new TextDecoder()
      const reader = res.body!.getReader()
      const b = await reader.read()
      const t = await textDecoder.decode(b.value!)
      await reader.cancel()
    })
I spent whole evening last night to make it work and ended up with latter
piece. Shouldn't closing initial stream also close all subsequent ones? Either
way, closing readable TextDecoderStream doesn't work too.
Deno version: 1.33.2 and 1.33.1