-- FOR loop  
DROP FUNCTION testfunc();  
CREATE FUNCTION testfunc() RETURNS int AS $$  
DECLARE  
  sum int;  
  v int;  
BEGIN  
  sum := 0;  
  FOR v IN SELECT /*+ SeqScan(t1) */ v FROM t1 ORDER BY id LOOP  
    sum := sum + v;  
  END LOOP;  
  RETURN v;  
END;  
$$ LANGUAGE plpgsql;  
SELECT testfunc();  
LOG:  pg_hint_plan:  
used hint:  
SeqScan(t1)  
not used hint:  
duplication hint:  
error hint:  
CONTEXT:  SQL statement "SELECT /*+ SeqScan(t1) */ v FROM t1 ORDER BY id"  
PL/pgSQL function testfunc() line 7 at FOR over SELECT rows  
 testfunc   
----------  
(1 row)  
-- Dynamic FOR loop  
DROP FUNCTION testfunc();  
CREATE FUNCTION testfunc() RETURNS int AS $$  
DECLARE  
  sum int;  
  v int;  
  i   int;  
BEGIN  
  sum := 0;  
  FOR v IN EXECUTE 'SELECT /*+ SeqScan(t1) */ val FROM t1 ORDER BY id' LOOP  
    sum := sum + v;  
  END LOOP;  
  RETURN v;  
END;  
$$ LANGUAGE plpgsql;  
SELECT testfunc();  
LOG:  pg_hint_plan:  
used hint:  
SeqScan(t1)  
not used hint:  
duplication hint:  
error hint:  
CONTEXT:  SQL statement "SELECT /*+ SeqScan(t1) */ val FROM t1 ORDER BY id"  
PL/pgSQL function testfunc() line 8 at FOR over EXECUTE statement  
 testfunc   
----------  
        0  
(1 row)  
-- Cursor FOR loop  
DROP FUNCTION testfunc();  
CREATE FUNCTION testfunc() RETURNS int AS $$  
DECLARE  
  ref CURSOR FOR SELECT /*+ SeqScan(t1) */ * FROM t1 ORDER BY id;  
  rec record;  
  sum int := 0;  
BEGIN  
  FOR rec IN ref LOOP  
    sum := sum + rec.val;  
  END LOOP;  
  RETURN sum;  
END;  
$$ LANGUAGE plpgsql;  
SELECT testfunc();  
LOG:  pg_hint_plan:  
used hint:  
SeqScan(t1)  
not used hint:  
duplication hint:  
error hint:  
CONTEXT:  SQL statement "SELECT /*+ SeqScan(t1) */ * FROM t1 ORDER BY id"  
PL/pgSQL function testfunc() line 7 at FOR over cursor  
 testfunc   
----------  
   495000  
(1 row)  
-- RETURN QUERY  
DROP FUNCTION testfunc();  
CREATE FUNCTION testfunc() RETURNS SETOF t1 AS $$  
BEGIN  
  RETURN QUERY SELECT /*+ SeqScan(t1) */ * FROM t1 ORDER BY id;  
END;  
$$ LANGUAGE plpgsql;  
SELECT * FROM testfunc() LIMIT 1;  
LOG:  pg_hint_plan:  
used hint:  
SeqScan(t1)  
not used hint:  
duplication hint:  
error hint:  
CONTEXT:  SQL statement "SELECT /*+ SeqScan(t1) */ * FROM t1 ORDER BY id"  
PL/pgSQL function testfunc() line 3 at RETURN QUERY  
 id | val   
----+-----  
  1 |   1  
(1 row)  
-- Test for error exit from inner SQL statement.  
DROP FUNCTION testfunc();  
CREATE FUNCTION testfunc() RETURNS SETOF t1 AS $$  
BEGIN  
  RETURN QUERY SELECT /*+ SeqScan(t1) */ * FROM ttx ORDER BY id;  
END;  
$$ LANGUAGE plpgsql;  
SELECT * FROM testfunc() LIMIT 1;  
ERROR:  relation "ttx" does not exist  
LINE 1: SELECT /*+ SeqScan(t1) */ * FROM ttx ORDER BY id  
                                         ^  
QUERY:  SELECT /*+ SeqScan(t1) */ * FROM ttx ORDER BY id  
CONTEXT:  PL/pgSQL function testfunc() line 3 at RETURN QUERY  
-- this should not use SeqScan(t1) hint.  
/*+ IndexScan(t1) */ SELECT * from t1 LIMIT 1;  
LOG:  pg_hint_plan:  
used hint:  
IndexScan(t1)  
not used hint:  
duplication hint:  
error hint:  
 id | val   
----+-----  
  1 |   1  
(1 row)  
DROP FUNCTION testfunc();  
DROP EXTENSION pg_hint_plan;  
CREATE FUNCTION reset_stats_and_wait() RETURNS void AS $$  
DECLARE  
  rows int;  
BEGIN  
  rows = 1;  
  while rows > 0 LOOP  
   PERFORM pg_stat_reset();  
   PERFORM pg_sleep(0.5);  
   SELECT sum(seq_scan + idx_scan) from pg_stat_user_tables into rows;  
  END LOOP;  
END;  
$$ LANGUAGE plpgsql;  
-- Dynamic query in pl/pgsql  
CREATE OR REPLACE FUNCTION dynsql1(x int) RETURNS int AS $$  
DECLARE c int;  
BEGIN  
  EXECUTE '/*+ IndexScan(t1) */ SELECT count(*) FROM t1 WHERE id  0 as seq_scan, idx_scan > 0 as idx_scan FROM pg_stat_user_tables WHERE schemaname = 'public' AND relname = 't1';  
 relname | seq_scan | idx_scan   
---------+----------+----------  
 t1      | t        | f  
(1 row)  
SET pg_hint_plan.enable_hint = true;  
SELECT reset_stats_and_wait();  
 reset_stats_and_wait   
----------------------  
(1 row)  
SELECT dynsql1(9000);  
LOG:  pg_hint_plan:  
used hint:  
IndexScan(t1)  
not used hint:  
duplication hint:  
error hint:  
CONTEXT:  SQL statement "/*+ IndexScan(t1) */ SELECT count(*) FROM t1 WHERE id  0 as seq_scan, idx_scan > 0 as idx_scan FROM pg_stat_user_tables WHERE schemaname = 'public' AND relname = 't1';  
 relname | seq_scan | idx_scan   
---------+----------+----------  
 t1      | f        | t  
(1 row)  
-- Looped dynamic query in pl/pgsql  
CREATE OR REPLACE FUNCTION dynsql2(x int, OUT r int) AS $$  
DECLARE  
  c text;  
  s int;  
BEGIN  
  r := 0;  
  FOR c IN SELECT f.f FROM (VALUES ('p1_c1'), ('p1_c2')) f(f) LOOP  
    FOR s IN EXECUTE '/*+ IndexScan(' || c || ' ' || c || '_pkey) */ SELECT sum(val) FROM ' || c || ' WHERE id   Append  
         ->  Seq Scan on p1 p1_1  
               Filter: (val   Seq Scan on p1_c1 p1_2  
               Filter: (val   Seq Scan on p1_c2 p1_3  
               Filter: (val   Seq Scan on p1_c3 p1_4  
               Filter: (val   Seq Scan on p1_c4 p1_5  
               Filter: (val   Seq Scan on p1_c1_c1 p1_6  
               Filter: (val   Seq Scan on p1_c1_c2 p1_7  
               Filter: (val   Seq Scan on p1_c3_c1 p1_8  
               Filter: (val   Seq Scan on p1_c3_c2 p1_9  
               Filter: (val   Result  
         ->  Append  
               ->  Seq Scan on p2 p2_1  