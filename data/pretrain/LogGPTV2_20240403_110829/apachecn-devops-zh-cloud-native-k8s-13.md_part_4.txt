接下来，我们有`DaemonSet`的规格:
Daemonset.yaml(续)
```
    spec:
      serviceAccountName: cloud-controller-manager
      containers:
      - name: cloud-controller-manager
        image: k8s.gcr.io/cloud-controller-manager:
        command:
        - /usr/local/bin/cloud-controller-manager
        - --cloud-provider=
        - --leader-elect=true
        - --use-service-account-credentials
        - --allocate-node-cidrs=true
        - --configure-cloud-routes=true
        - --cluster-cidr=
      tolerations:
      - key: node.cloudprovider.kubernetes.io/uninitialized
        value: "true"
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      nodeSelector:
        node-role.kubernetes.io/master: ""
```
如您所见，本规范中有几个地方需要您查看所选云提供商的文档或集群网络设置，以找到合适的值。尤其是像`--cluster-cidr`和`--configure-cloud-routes`这样的网络标志，它们的值可能会根据您如何设置集群而变化，甚至在单个云提供商上也是如此。
现在，我们已经以某种方式在集群上运行了 CCM，让我们深入了解它提供的一些功能。
## 了解云控制器管理器的功能
默认的 CCM 在几个关键领域提供功能。首先，CCM 包含节点、路由和服务的辅助控制器。让我们从节点/节点生命周期控制器开始，依次回顾每一个，看看它能为我们提供什么。
### 节点/节点生命周期控制器
CCM 节点控制器确保集群状态，就集群中的哪些节点而言，等同于云提供商系统中的状态。一个简单的例子是自动缩放 AWS 中的组。当使用 AWS EKS(或仅在 AWS EC2 上使用 Kubernetes，尽管这需要额外的配置)时，可以在 AWS 自动缩放组中配置工作节点组，该组将根据节点的 CPU 或内存使用情况进行缩放。当云提供商添加和初始化这些节点时，CCM 节点控制器将确保集群为云提供商提供的每个节点拥有一个节点资源。
接下来，让我们继续讨论路由控制器。
### 通信控制模块路由控制器
CCM 路由控制器负责以支持 Kubernetes 集群的方式配置云提供商的网络设置。这可以包括 IP 的分配和在节点之间设置路由。服务控制器还处理网络，但外部方面。
### CCM 服务控制器
CCM 服务控制器提供了许多在公共云提供商上运行 Kubernetes 的“魔力”。我们在 [*第 5 章*](05.html#_idTextAnchor127)*服务和入口–与外界交流*中回顾的一个方面是`LoadBalancer`服务。例如，在配置了 AWS CCM 的集群上，`LoadBalancer`类型的服务将自动配置匹配的 AWS 负载平衡器资源，提供了一种简单的方法来公开集群中的服务，而无需处理`NodePort`设置甚至入口。
现在我们了解了 CCM 提供的内容，我们可以进一步讨论在公共云上运行 Kubernetes 时经常使用的其他几个云提供商扩展。首先来看看`external-dns`。
## 使用外部域名系统
`external-dns`库是官方支持的 Kubernetes 插件，允许集群配置外部 DNS 提供商，以自动方式为服务和入口提供 DNS 解析。`external-dns`插件支持广泛的云提供商，如 AWS 和 Azure，以及其他域名服务，如 Cloudflare。
重要说明
要安装`external-dns`，可以查看[https://github.com/kubernetes-sigs/external-dns](https://github.com/kubernetes-sigs/external-dns)官方 GitHub 库。
一旦`external-dns`在您的集群上实现，以自动化的方式创建新的域名系统记录就很简单了。要用服务测试`external-dns`，我们只需要在 Kubernetes 用适当的注释创建服务。
让我们看看这是什么样子:
服务，yaml
```
apiVersion: v1
kind: Service
metadata:
  name: my-service-with-dns
  annotations:
    external-dns.alpha.kubernetes.io/hostname: myapp.mydomain.com
spec:
  type: LoadBalancer
  ports:
  - port: 80
    name: http
    targetPort: 80
  selector:
    app: my-app
```
如您所见，我们只需要为`external-dns`控制器添加一个注释进行检查，域记录将在 DNS 中创建。当然，您的`external-dns`控制器必须可以访问域和托管区域，例如，在 AWS 路由或 Azure 域名系统上。有关详细信息，请查看`external-dns` GitHub 存储库中的特定文档。
一旦服务启动并运行，`external-dns`将提取注释并创建新的 DNS 记录。这种模式非常适合多租户或按版本部署，因为通过类似 Helm 图表的方式，变量可用于根据应用部署的版本或分支来更改域，例如`v1.myapp.mydomain.com`。
对于入口，这就更简单了–您只需要在入口记录中指定一台主机，如下所示:
入口，yaml
```
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: my-domain-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx".
spec:
  rules:
  - host: myapp.mydomain.com
    http:
      paths:
      - backend:
          serviceName: my-app-service
          servicePort: 80
```
该主机值将自动创建一个域名系统记录，指向您的入口使用的任何方法，例如 AWS 上的负载平衡器。
接下来，我们来谈谈**集群自动缩放器**库是如何工作的。
## 使用集群自动缩放器插件
与`external-dns`类似，`cluster-autoscaler`是官方支持的 Kubernetes 的附加组件，支持一些具有特定功能的主要云提供商。`cluster-autoscaler`的目的是触发集群中节点数量的缩放。它通过控制云提供商自己的缩放资源(如 AWS 自动缩放组)来执行这个过程。
当任何单个 Pod 由于节点上的资源限制而无法调度时，群集自动缩放器将执行向上缩放操作，但前提是现有节点大小的节点(例如，AWS 中`t3.medium`大小的节点)允许调度 Pod。
同样，群集自动缩放器将在任何节点清空 Pods 时执行向下缩放操作，而不会对任何其他节点造成内存或 CPU 压力。
要安装`cluster-autoscaler`，只需按照云提供商针对集群类型和预期版本的`cluster-autoscaler`的正确说明进行操作。例如，EKS`cluster-autoscaler`的 AWS 安装说明可以在[中找到。](https://aws.amazon.com/premiumsupport/knowledge-center/eks-cluster-autoscaler-setup/)
接下来，让我们看看如何通过检查 Kubernetes 生态系统来找到 Kubernetes 的开源和开源扩展。
# 与生态系统融合
Kubernetes(以及更一般的云原生)生态系统是庞大的，由数百个流行的开源软件库和数千个新的开源软件库组成。这可能很难驾驭，因为每个月都会有新的技术来审查，收购、合并和公司倒闭可能会把你最喜欢的开源库变成一个未维护的烂摊子。
谢天谢地，这个生态系统中有一些结构，为了帮助解决云原生开源中缺乏选项的问题，了解它是值得的。第一个大的结构组件是**云原生计算基金会**或 **CNCF** 。
## 介绍云原生计算基金会
CNCF 是 Linux 基金会的一个子基金会，该基金会是一个非盈利实体，主持开源项目，并协调不断变化的贡献和使用开源软件的公司名单。
CNCF 的建立几乎完全是为了引导 Kubernetes 项目的未来。它是与 1.0 版本的 Kubernetes 一起宣布的，并且从那时起已经发展到包含云原生领域的数百个项目——从普罗米修斯到特使到 Helm，还有更多。
查看 CNCF 组成项目概况的最佳方式是查看 CNCF 云原生景观，该景观可在[https://landscape.cncf.io/](https://landscape.cncf.io/)找到。
如果您对使用 Kubernetes 或云原生解决方案可能遇到的问题感兴趣，CNCF 景观是一个很好的起点。对于每个类别(监控、日志、无服务器、服务网格等)，都有几个开源选项可供审查和选择。
这是当前云原生技术生态系统的优势和劣势。有相当多的选项可用，这使得正确的路径往往不明确，但也意味着您可能能够找到接近您确切需求的解决方案。
CNCF 还运营着一个官方的 Kubernetes 论坛，可以从 Kubernetes 官方网站 [kubernetes.io](http://kubernetes.io) 加入。Kubernetes 论坛的网址是[https://discuss.kubernetes.io/](https://discuss.kubernetes.io/)。
最后，值得一提的是*Kubernetes*/*CloudNativeCon*，这是一个由 CNCF 运营的大型会议，包括 Kubernetes 本身和许多生态系统项目。 *KubeCon* 每年都会变大，2019 年几乎有 12，000 人参加 *KubeCon* *北美*。
# 总结
在本章中，我们学习了如何扩展 Kubernetes。首先，我们讨论了 CRDs——它们是什么，一些相关的用例，以及如何在集群中实现它们。接下来，我们回顾了 Kubernetes 中操作员的概念，并讨论了如何使用操作员或自定义控制器来赋予您的 CRD 以生命。
然后，我们讨论了针对云提供商的 Kubernetes 扩展，包括`cloud-controller-manager`、`external-dns`和`cluster-autoscaler`。最后，我们介绍了云原生开源生态系统，以及一些发现用例项目的好方法。
您在本章中使用的技能将帮助您扩展 Kubernetes 集群，以便与您的云提供商以及您自己的定制功能进行交互。
在下一章中，我们将讨论两种应用于 Kubernetes 的新生架构模式——无服务器和服务网格。
# 问题
1.  CRD 的服务版本和存储版本有什么区别？
2.  自定义控制器或操作员控制回路的三个典型部分是什么？
3.  `cluster-autoscaler`如何与 AWS 自动缩放组等现有云提供商缩放解决方案进行交互？
# 进一步阅读
*   CNCF 山水:[https://landscape.cncf.io/](https://landscape.cncf.io/)
*   官场久别论坛:[https://discuss . kubrintes . io/](https://discuss.kubernetes.io/)