## PostgreSQL RUM 索引原理    
### 作者    
digoal    
### 日期    
2020-11-28  
### 标签    
PostgreSQL , rum  
----    
## 背景    
回顾    
[《PostgreSQL GiST 索引原理 - 4》](../202010/20201004_04.md)      
[《PostgreSQL GiST 索引原理 - 3》](../202010/20201004_03.md)      
[《PostgreSQL GiST 索引原理 - 2》](../202010/20201004_02.md)      
[《PostgreSQL GiST 索引原理 - 1》](../202010/20201004_01.md)      
[《PostgreSQL SP-GiST 索引原理》](../202011/20201128_01.md)      
## RUM 原文  
https://postgrespro.com/blog/pgsql/4262305  
### gin  
https://postgrespro.com/blog/pgsql/4261647  
![pic](20201128_02_pic_002.png)  
```  
tree -> root node -...> leaf node -> token val -指向> rowid(s) (或posting tree, posting list)  
```  
### rum  
RUM 相比GIN索引, 核心提升点: 除了存储token对应的rowid(s), 还存储了这行对应的额外值.    
![pic](20201128_02_pic_001.png)  
```  
tree -> root node -...> leaf node -> token val -指向> rowid(s)   
每个rowid 还会额外存储:   
  这个rowid对应token在文本中出现的position(s),   
  这个rowid的这行文本有多少token_counts,   
  用户指定的其他附加字段值(或表达式值)(由此rowid对应行内容得到)  
```  
rum比gin支持更多的索引搜索功能:    
```  
filter tsquery($val)    
order by 文本相似性(ts_rank, ts_rank_cd)  :   
    由于存储了每行的token_counts, 因此tsquery_tokens / token_counts 得到ts_rank value, 所以不需要回表查询  
order by 其他字段/表达式 ops $val  
filter 其他字段/表达式 $val  
```  
## RUM  
Although the authors claim that gin is a powerful genie, the theme of drinks has eventually won: next-generation GIN has been called RUM.  
This access method expands the concept that underlies GIN and enables us to perform full-text search even faster. In this series of articles, this is the only method that is not included in a standard PostgreSQL delivery and is an external extension. Several installation options are available for it:  
- Take "yum" or "apt" package from the PGDG repository. For example, if you installed PostgreSQL from "postgresql-10" package, also install "postgresql-10-rum".  
- Build from source code on github and install on your own (the instruction is there as well).  
- Use as a part of Postgres Pro Enterprise (or at least read the documentation from there).  
## Limitations of GIN  
What limitations of GIN does RUM enable us to transcend?  
First, "tsvector" data type contains not only lexemes, but also information on their positions inside the document. As we observed last time, GIN index does not store this information. For this reason, operations to search for phrases, which appeared in version 9.6, are supported by GIN index inefficiently and have to access the original data for recheck.  
Second, search systems usually return the results sorted by relevance (whatever that means). We can use ranking functions "ts_rank" and "ts_rank_cd" to this end, but they have to be computed for each row of the result, which is certainly slow.  
To a first approximation, RUM access method can be considered as GIN that additionally stores position information and can return the results in a needed order (like GiST can return nearest neighbors). Let's move step by step.  
## Searching for phrases  
A full-text search query can contain special operators that take into account the distance between lexemes. For example, we can find documents in which "hand" is separated from "thigh" with two more word:  
```  
postgres=# select to_tsvector('Clap your hands, slap your thigh') @@  
                  to_tsquery('hand  thigh');  
 ?column?  
----------  
 t  
(1 row)  
```  
Or we can indicate that the words must be located one after another:  
```  
postgres=# select to_tsvector('Clap your hands, slap your thigh') @@  
                  to_tsquery('hand  slap');  
 ?column?  
----------  
 t  
(1 row)  
```  
Regular GIN index can return the documents that contain both lexemes, but we can check the distance between them only by looking into tsvector:  
```  
postgres=# select to_tsvector('Clap your hands, slap your thigh');  
             to_tsvector                
--------------------------------------  
 'clap':1 'hand':3 'slap':4 'thigh':6  
(1 row)  
```  
In RUM index, each lexeme does not just reference the table rows: each TID is supplied with the list of positions where the lexeme occurs in the document. This is how we can envisage the index created on the "slit-sheet" table, which is already quite familiar to us ("rum_tsvector_ops" operator class is used for tsvector by default):  
```  
postgres=# create extension rum;  
postgres=# create index on ts using rum(doc_tsv);  
```  
![pic](20201128_02_pic_001.png)  
Gray squares in the figure contain the position information added:  
```  
postgres=# select ctid, left(doc,20), doc_tsv from ts;  
  ctid |         left         |                         doc_tsv                           
-------+----------------------+---------------------------------------------------------  
 (0,1) | Can a sheet slitter  | 'sheet':3,6 'slit':5 'slitter':4  
 (0,2) | How many sheets coul | 'could':4 'mani':2 'sheet':3,6 'slit':8 'slitter':7  
 (0,3) | I slit a sheet, a sh | 'sheet':4,6 'slit':2,8  
 (1,1) | Upon a slitted sheet | 'sheet':4 'sit':6 'slit':3 'upon':1  
 (1,2) | Whoever slit the she | 'good':7 'sheet':4,8 'slit':2 'slitter':9 'whoever':1  
 (1,3) | I am a sheet slitter | 'sheet':4 'slitter':5  
 (2,1) | I slit sheets.       | 'sheet':3 'slit':2  
 (2,2) | I am the sleekest sh | 'ever':8 'sheet':5,10 'sleekest':4 'slit':9 'slitter':6  
 (2,3) | She slits the sheet  | 'sheet':4 'sit':6 'slit':2  
(9 rows)  
```  
GIN also provides a postponed insertion when "fastupdate" parameter is specified; this functionality is removed from RUM.  
To see how the index works on live data, let's use the familiar archive of pgsql-hackers mailing list.  
```  
fts=# alter table mail_messages add column tsv tsvector;  
fts=# set default_text_search_config = default;  
fts=# update mail_messages  
set tsv = to_tsvector(body_plain);  
...  
UPDATE 356125  
```  
This is how a query that uses search for phrases is performed with GIN index:  
```  
fts=# create index tsv_gin on mail_messages using gin(tsv);  
fts=# explain (costs off, analyze)  
select * from mail_messages where tsv @@ to_tsquery('hello  hackers');  
                                   QUERY PLAN                                      
---------------------------------------------------------------------------------  
 Bitmap Heap Scan on mail_messages (actual time=2.490..18.088 rows=259 loops=1)  
   Recheck Cond: (tsv @@ to_tsquery('hello  hackers'::text))  
   Rows Removed by Index Recheck: 1517  
   Heap Blocks: exact=1503  
   ->  Bitmap Index Scan on tsv_gin (actual time=2.204..2.204 rows=1776 loops=1)  
         Index Cond: (tsv @@ to_tsquery('hello  hackers'::text))  
 Planning time: 0.266 ms  
 Execution time: 18.151 ms  
(8 rows)  
```  
As we can see from the plan, GIN index is used, but it returns 1776 potential matches, of which 259 are left and 1517 are dropped at the recheck stage.  
Let's delete the GIN index and build RUM.  
```  
fts=# drop index tsv_gin;  
fts=# create index tsv_rum on mail_messages using rum(tsv);  
```  
The index now contains all the necessary information, and search is performed accurately:  
```  
fts=# explain (costs off, analyze)  
select * from mail_messages  
where tsv @@ to_tsquery('hello  hackers');  
                                   QUERY PLAN                                    
--------------------------------------------------------------------------------  
 Bitmap Heap Scan on mail_messages (actual time=2.798..3.015 rows=259 loops=1)  
   Recheck Cond: (tsv @@ to_tsquery('hello  hackers'::text))  
   Heap Blocks: exact=250  
   ->  Bitmap Index Scan on tsv_rum (actual time=2.768..2.768 rows=259 loops=1)  
         Index Cond: (tsv @@ to_tsquery('hello  hackers'::text))  
 Planning time: 0.245 ms  
 Execution time: 3.053 ms  
(7 rows)  
```  
## Sorting by relevance  
To return documents readily in the needed order, RUM index supports ordering operators, which we discussed in GiST-related article. RUM extension defines such an operator, ``````, which returns some distance between the document ("tsvector") and query ("tsquery"). For example:  
```  
fts=# select to_tsvector('Can a sheet slitter slit sheets?')  to_tsquery('slit');  
 ?column?  
----------  
  16.4493  
(1 row)  
fts=# select to_tsvector('Can a sheet slitter slit sheets?')  to_tsquery('sheet');  
 ?column?  
----------  
  13.1595  
(1 row)  
```  
The document appeared to be more relevant to the first query than to the second one: the more often the word occurs, the less "valuable" it is.  
Let's again try to compare GIN and RUM on a relatively large data size: we'll select ten most relevant documents containing "hello" and "hackers".  
```  
fts=# explain (costs off, analyze)  
select * from mail_messages   
where tsv @@ to_tsquery('hello & hackers')   
order by ts_rank(tsv,to_tsquery('hello & hackers'))   
limit 10;  
                                         QUERY PLAN  
---------------------------------------------------------------------------------------------  
 Limit (actual time=27.076..27.078 rows=10 loops=1)  
   ->  Sort (actual time=27.075..27.076 rows=10 loops=1)  
         Sort Key: (ts_rank(tsv, to_tsquery('hello & hackers'::text)))  
         Sort Method: top-N heapsort  Memory: 29kB  
         ->  Bitmap Heap Scan on mail_messages (actual ... rows=1776 loops=1)  
               Recheck Cond: (tsv @@ to_tsquery('hello & hackers'::text))  
               Heap Blocks: exact=1503  
               ->  Bitmap Index Scan on tsv_gin (actual ... rows=1776 loops=1)  
                     Index Cond: (tsv @@ to_tsquery('hello & hackers'::text))  
 Planning time: 0.276 ms  
 Execution time: 27.121 ms  
(11 rows)  
```  