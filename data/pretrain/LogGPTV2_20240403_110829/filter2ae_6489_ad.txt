    S5 = [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
          14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
          4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
          11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]
    S6 = [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
          10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
          9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
          4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]
    S7 = [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
          13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
          1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
          6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]
    S8 = [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
          1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
          7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
          2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
    S_list = [S1, S2, S3, S4, S5, S6, S7, S8]
    #S盒置换
    def s_box_replace(xor_list_key):
        result = []
        for i in range(8):
            row = int(xor_list_key[i * 6] + xor_list_key[i * 6 + 5], 2)
            column = int(xor_list_key[i * 6 + 1] + xor_list_key[i * 6 + 2] + xor_list_key[i * 6 + 3] + xor_list_key[i * 6 + 4], 2)
            s_result=S_list[i][row*16+column]
            num = bin(s_result)[2:].zfill(4)
            result.extend(num)
        return result
    def _s_box_replace(new_p_box_list):
        result = [[[],[],[],[]],
                  [[],[],[],[]],
                  [[],[],[],[]],
                  [[],[],[],[]],
                  [[],[],[],[]],
                  [[],[],[],[]],
                  [[],[],[],[]],
                  [[],[],[],[]]]
        for i in range(8):
             sp = [0,0,0,0]
             sp[0] = S_list[i].index((new_p_box_list[i][0] * 2**3 + new_p_box_list[i][1] * 2**2 + new_p_box_list[i][2] * 2**1 + new_p_box_list[i][3] * 2**0),0,16)
             sp[1] = S_list[i].index((new_p_box_list[i][0] * 2**3 + new_p_box_list[i][1] * 2**2 + new_p_box_list[i][2] * 2**1 + new_p_box_list[i][3] * 2**0),16,32)
             sp[2] = S_list[i].index((new_p_box_list[i][0] * 2**3 + new_p_box_list[i][1] * 2**2 + new_p_box_list[i][2] * 2**1 + new_p_box_list[i][3] * 2**0),32,48)
             sp[3] = S_list[i].index((new_p_box_list[i][0] * 2**3 + new_p_box_list[i][1] * 2**2 + new_p_box_list[i][2] * 2**1 + new_p_box_list[i][3] * 2**0),48,64)
             for j in range(4):
                row = [0,0,0,0]
                clum = [0,0,0,0]
                row[j]= int(sp[j]) // 16
                clum[j] = int(sp[j]) % 16
                _num1 = [0,0]
                _num2 = [0,0,0,0]
                _num1 = bin(clum[j])[2:].zfill(2)
                _num2 = bin(clum[j])[2:].zfill(4)
                result[i][j] =[int(_num1[0]),int(_num2[0]),int(_num2[1]),int(_num2[2]),int(_num2[3]),int(_num1[1])]
        return result
    #p盒置换
    p_box = [16, 7, 20, 21, 29, 12, 28, 17,
            1, 15, 23, 26, 5, 18, 31, 10,
            2, 8, 24, 14, 32, 27, 3, 9,
            19, 13, 30, 6, 22, 11, 4, 25]
    _p_box = [9,17,23,31,13,28,2,18,
              24,16,30,6,26,20,10,1,
              8,14,25,3,4,29,11,19,
              32,12,22,7,5,27,15,21]
    def p_box_replace(str):
        result = [0] * 32
        for i in range(32):
            result[i] = str[p_box[i] - 1]
        return result
    def _p_box_replace(str):
        result = [0] * 32
        for i in range(32):
            result[i] = str[_p_box[i] - 1]
        return result
    def key_poss(plaintext, miwen, shu):
        #print("明文", shu, ":", plaintext)
        # #print("密钥:",key_table)
        #将明文和密钥16进制字符串转为2进制列表
        plaintext_result = hex_to_binary(plaintext)
        miwen_result = hex_to_binary(miwen)
        #将明文和密钥2进制字符列表转为2进制整型列表
        plaintext_result_int = list(map(int,plaintext_result))
        miwen_result_int =list(map(int,miwen_result))
        #对明文做初始置换
        initial_table=substitution(plaintext_result_int)
        initial_str=binary_to_hexadecimal(list(map(str,initial_table)))
        #print("明文", shu, "的初始置换:",initial_str)
        L_list = [initial_table[i] for i in range(32)]
        R_list = [initial_table[i] for i in range(32,64)]
        #print("明文", shu, "的R边:", R_list)
        # L_new_list=R_list
        #进行扩展置换
        extend_list=extend_replacement(R_list)
        # #print (extend_list)
        new_extend_list= [[extend_list[i] for i in range(0, 6)],
                          [extend_list[i] for i in range(6, 12)],
                          [extend_list[i] for i in range(12, 18)],
                          [extend_list[i] for i in range(18, 24)],
                          [extend_list[i] for i in range(24, 30)],
                          [extend_list[i] for i in range(30, 36)],
                          [extend_list[i] for i in range(36, 42)],
                          [extend_list[i] for i in range(42, 48)]]
        #print("明文", shu, "的扩展置换:", new_extend_list)
        #miwen caozuo
        #IP ni zhihuan
        _IP_table = reverse_substitution(miwen_result_int)
        _IP__str = binary_to_hexadecimal(list(map(str, _IP_table)))
        # #print(_IP__str)
        #miwen L R
        _L_list = [_IP_table[i] for i in range(32)]
        _R_list = [_IP_table[i] for i in range(32, 64)]
        _r_list_new = xor(_R_list, L_list)
        #_P zhihuan
        _p_box_list=_p_box_replace(_r_list_new)
        new_p_box_list = [[_p_box_list[i] for i in range(0, 4)],
                          [_p_box_list[i] for i in range(4, 8)],
                          [_p_box_list[i] for i in range(8, 12)],
                          [_p_box_list[i] for i in range(12, 16)],
                          [_p_box_list[i] for i in range(16, 20)],
                          [_p_box_list[i] for i in range(20, 24)],
                          [_p_box_list[i] for i in range(24, 28)],
                          [_p_box_list[i] for i in range(28, 32)],]
        # #print(new_p_box_list)
        s_in = [[[],[],[],[]],
             [[],[],[],[]],
             [[],[],[],[]],
             [[],[],[],[]],
             [[],[],[],[]],
             [[],[],[],[]],
             [[],[],[],[]],
             [[],[],[],[]]]
        for i in range(8):
            for j in range(4):
                sp = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
                      [0, 0, 0, 0]]
                t = new_p_box_list[i][0] * 2 ** 3 + new_p_box_list[i][1] * 2 ** 2 + new_p_box_list[i][2] * 2 ** 1 + \
                    new_p_box_list[i][3] * 2 ** 0
                sp[i][0] = S_list[i].index(t, 0, 16)
                #print(sp[0])
                sp[i][1] = S_list[i].index(t, 16, 32)
                sp[i][2] = S_list[i].index(t, 32, 48)
                sp[i][3] = S_list[i].index(t, 48, 64)
                row = [[0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3],
                       [0, 1, 2, 3]]
                clum = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
                        [0, 0, 0, 0]]
                # row[i][0]= 0
                # #print(row[i])
                clum[i][j] = (int(sp[i][j]) % 16)
                _num1 = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]
                _num2 = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
                         [0, 0, 0, 0]]
                _num1[i] = bin(row[i][j])[2:].zfill(2)
                _num2[i] = bin(clum[i][j])[2:].zfill(4)
                s_in[i][j] = [int(_num1[i][0]), int(_num2[i][0]), int(_num2[i][1]), int(_num2[i][2]), int(_num2[i][3]),
                                int(_num1[i][1])]
            # return result
        # #print(s_in)
        key_possible = [
            [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]],
            [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]],
            [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]],
            [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]],
            [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]],
            [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]],
            [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]],
            [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]]
        for i in range(8):
            for j in range(4):
                for k in range(6):
                    key_possible[i][j][k] = int(s_in[i][j][k]) ^ int(new_extend_list[i][k])
        return key_possible
    key_real = [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0],