(∗ one−time key (including static key) ∗)
(∗ authentication tag ∗)
This interface deﬁnes concrete byte formats for keys, tags,
and messages. Authenticated messages are strings of at
most (cid:2)m bytes that comply with an implementation-speciﬁc
well-formedness condition. (We need such a condition for
GHASH.) We let m range over well-formed messages.
Key-generation functions are marked as stateful (ST) to
reﬂect their use of random sampling. Static keys of type key0
may be used to generate multiple one-time keys of type key.
(For example, keygen may concatenate the static key with
(cid:2)k − (cid:2)k0 random bytes.) To begin with, we assume (cid:2)k0
= 0
so that k0 is the empty string ε.
The two main functions produce and verify MACs. Their
correctness is captured in the verify post-condition of mac:
veriﬁcation succeeds at least on the tags correctly produced
using mac with matching key and message.
One-Time Security MAC security is usually deﬁned using
computational unforgeability, as in the following game:
Oracle Mac(m)
if log (cid:5)= ⊥ return ⊥
t ← MAC.mac(k, m)
log ← (m, t)
return t
Game UF-1CMA(A, MAC)
k $← MAC.keygen(ε); log ← ⊥
(m(cid:2), t(cid:2)) ← AMac
return MAC.verify(k, m(cid:2), t(cid:2))
∧ log (cid:5)= (m(cid:2), t(cid:2))
The oracle permits the adversary a single chosen-message
query (recorded in log) before trying to produce a forgery.
The advantage of A playing the UF-1CMA game is deﬁned
as UF-1CMA(A[(cid:2)m]) (cid:2) Pr[UF-1CMA(A, MAC) = 1].
We seek a stronger property for AEAD—the whole ci-
phertext must be indistinguishable from random bytes—
and we need a decisional game for type-based composition,
so we introduce a variant of unforgeability that captures
indistinguishability from a random tag (when r is set).
Deﬁnition 2 (IND-UF-1CMA): Let Mac1(A[(cid:2)m, qv]) be
the advantage of an adversary A that makes qv Verify queries
on messages of length at most (cid:2)m in the following game:
468
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
Game Mac1b(MAC)
k $← MAC.keygen(ε); log ← ⊥
return {Mac, Verify}
Oracle Verify(m(cid:2), t(cid:2))
if b return log = (m(cid:2), t(cid:2))
return MAC.verify(k, m(cid:2), t(cid:2))
Oracle Mac(m)
if log (cid:5)= ⊥ return ⊥
t ← MAC.mac(k, m)
if b ∧ r
log ← (m, t)
return t
t $← byteMAC.(cid:3)t
In this game, the MAC oracle is called at most once, on
some chosen message m; it returns a tag t and logs (m, t).
Conversely, Verify is called qv times before and after calling
MAC. When b is set, the game idealizes MAC in two ways:
veriﬁcation is replaced by a comparison with the log; and
(when r is also set) the tag is replaced with random bytes.
We show (in the full paper) that our deﬁnition implies UF-
1CMA when qv ≥ 1 and that random tags are neither nec-
essary nor sufﬁcient for unforgeability. We are not aware of
much prior work on Mac1 with r set; a pairwise independent
hash function would satisfy our IND-UF-1CMA deﬁnition
but may require longer keys [42].
Multi-Instance Security with a Shared Key In the AEAD
construction, we instantiate a one-time MAC for every
encryption and decryption. AES-GCM uses a static MAC
key derived from the AEAD key and shared between all
MAC instances. This state sharing is not captured by the
games above. To this end, we extend the Mac1b game into
a multi-instance version MMac1b with a setup that invokes
the keygen0 function to generate any key materials reused
across instances.
is convenient
In the multi-instance case it
to support
two kinds of instances: honest instances are created with
Keygen and idealized as in Mac1b; dishonest
instances
are created with Coerce and use the real implementation
regardless of b. (Formally Coerce does not make the model
stronger, as an adversary can run all algorithms on his own.
However, the ﬁner model is useful in hybrid arguments and
for composition with a PRF in §IV.)
Deﬁnition 3 (m-IND-UF-1CMA):
Let MMac1(A[(cid:2)m, qv, qi]) be the advantage of an adversary
A that creates qi instances and makes qv Verify queries
overall on messages of length at most (cid:2)m in the game:
Game MMac1b(MAC)
log ← ∅; k ← ∅; H ← ∅
$← MAC.keygen0()
k0
return {MAC, Verify,
Coerce, Keygen}
Oracle Mac(n, m)
if k[n] = ⊥ return ⊥
if log[n] (cid:5)= ⊥ return ⊥
t ← MAC.mac(k[n], m)
if b ∧ n ∈ H
t $← byteMAC.(cid:3)t
log[n] ← (m, t)
return t
Oracle Keygen(n)
if k[n] (cid:5)= ⊥ return ⊥
k[n] ← MAC.keygen(k0)
H ← H ∪ n
Oracle Coerce(n, k)
if k[n] (cid:5)= ⊥ return ⊥
k[n] ← k
Oracle Verify(n, m, t)
if k[n] = ⊥ return ⊥
v ← MAC.verify(k[n], m, t)
if b ∧ n ∈ H
v ← log[n] = (m, t)
return v
We conﬁrm that Mac1 is a special case of MMac1 security
and that, even with a static key, it sufﬁces to consider a single
veriﬁcation query. (The proofs are in the full paper.)
Lemma 1 (MMac1 reduces to Mac1): Given A against
MMac1b, when (cid:2)k0 = 0, we construct B against
Mac1b (linearly in qi) such that: MMac1(A[(cid:2)m, qv, qi]) ≤
qi Mac1(B[(cid:2)m, qv]).
Lemma 2: Given A against MMac1b we construct B such
that: MMac1(A[(cid:2)m, qv, qi]) ≤ qv MMac1(B[(cid:2)m, 1, qi]).
Veriﬁed Implementation m-IND-UF-1CMA security re-
ﬂects the type-based security speciﬁcation of our idealized
module MMac1b, which has an interface of the form
val log: memory → key → Spec (option (message × tag))
val mac: k:key → m:message → ST (t:tag)
(requires log k = None)
(ensures log k(cid:2) = Some(m,t))
val verify: k:key → m:message → t:tag → ST (v:bool)
(ensures b ⇒ v = (log k(cid:2) = Some(m,t)))
The types of mac and verify express the gist of our security
property: the speciﬁcation function log gives access to the
current content of the log associated with a one-time key;
mac requires that the log be empty (None in F(cid:2)) thereby
enforcing our one-time MAC discipline; verify ensures that,
when b is set, veriﬁcation succeeds if and only if mac logged
exactly the same message and tag. Their implementation is
automatically veriﬁed by typing MMac1b. However, recall
that typing says nothing about the security loss incurred by
switching b—this is the subject of the next subsection.
Our veriﬁed implementation of MMac1b supports the two
constructions described next, including code and functional
correctness proofs for their algorithms. It also provides a
more efﬁcient interface for computing MACs incrementally.
Instead of actually concatenating all authenticated materials
in a message, the user creates a stateful hash, then repeatedly
appends 16-byte words to the hash, and ﬁnally calls mac or
verify on this hash, with a type that binds the message to
the ﬁnal hash contents in their security speciﬁcations. Our
code further relies on indexed abstract types to separate keys
and hashes for different instances of the functionality, and
to support static key compromise.
B. Wegman-Carter-Shoup (WCS) Constructions
Next, we set up notations so that our presentation applies
to multiple constructions, including GHASH and Poly1305;
we factor out the encodings to have a core security as-
sumption on sequences of ﬁeld elements; we verify their
injectivity; we ﬁnally prove concrete bounds in general, and
in particular for GHASH and Poly1305.
From bytes to polynomials and back In addition to ﬁxed
lengths for keys and tags, the construction is parameter-
ized by
• a ﬁeld F;
469
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
• an encoding function · from messages to polynomials
in F, represented as sequences of coefﬁcients m ∈ F
∗.
• a truncation function from e ∈ F to tag(e) ∈ byte(cid:4)t;
The key consists of two parts: an element r ∈ F and a one-
time pad s ∈ byte(cid:4)t. We assume that r and s are sampled
uniformly at random, from some R ⊆ F and from byte(cid:4)t,
respectively. We write r(cid:9)s ← k for the parsing of key
materials into r and s, including the encoding of r into R.
Generic Construction Given a message m encoded into the
sequence of d coefﬁcients m0, . . . , md−1 of a polynomial
m(x) =
i=1..d md−ixi in F, the tag is computed as:
(cid:3)
hashr(m) ← tag(m(r))
mac(r(cid:9)s, m) ← hashr(m) (cid:3) s
where the blinding operation (cid:3) is related to addition in F
(see speciﬁc details below). We refer to hashr(m), the part
of the construction before blinding, as the hash.
in F before truncation
in byte(cid:4)t
Next, we describe the two instantiations employed in TLS.
GHASH [21] uses the Galois ﬁeld GF (2128), deﬁned as the
extension GF (2)[x]/x128 + x7 + x2 + x + 1, that is, the ﬁeld
of polynomials with Boolean coefﬁcients modulo the irre-
ducible polynomial x128 +x7 +x2 +x+1. Such polynomials
are represented as 128-bit vectors. Conveniently, polynomial
addition, the blinding operation (cid:3), and its inverse (cid:4) simply
correspond to 128-bit XOR. Polynomial multiplication is
also efﬁciently supported on modern processors. The mes-
sage encoding · splits the input message into 16-byte words,
seen as integers in 0..2128 − 1; and the tag truncation is the
identity. For AES-GCM, GHASH has a keygen0 function
$← GF (2128) shared across all MAC
that samples a single r
instances.
Poly1305 [8] uses the ﬁeld GF (p) for p = 2130 − 5, that
is, the prime ﬁeld of integer addition and multiplication
modulo p, whose elements can all be represented as 130-bits
integers. Its message encoding · similarly splits the input
message into 16-byte words, seen as integers in 0..2128 − 1,
then adds 2(cid:4) to each of these integers, where (cid:2) is the word
length in bits. (Hence, the encoding precisely keeps track of
the length of the last word; this feature is unused for AEAD,
which applies its own padding to ensure (cid:2) = 128.) The
truncation function is tag(e) = e mod 2128. The blinding
operation (cid:3) and its inverse (cid:4) are addition and subtraction
modulo 2128. For ChaCha20-Poly1305, both r and s are
= 0) but our proof also applies to the original
single-use ((cid:2)k0
Poly1305-AES construction [8] where r is shared.
Injectivity Properties We intend to authenticate messages,
not just polynomial coefﬁcients. To this end, we instantiate
our wellformed predicate on messages and show (in F(cid:2)) that
∀ (m0: bytes) (m1: bytes).
( wellformed m0 ∧ wellformed m1 ∧
Poly.equals m0 m1 ) ⇒ m0 = m1
where Poly.equals speciﬁes the equality of two formal polyno-
mials by comparing their sequences of coefﬁcients, extend-
ing the shorter sequence with zero coefﬁcients if necessary.
This enables the (conditional) composition of MACs with
suitable well-formedness predicates for AEAD in TLS. This
is required for GHASH as it is otherwise subject to 0-
message truncations.
We verify that the property above sufﬁces to prove that
both encodings are secure, and also that it holds in particular
once we deﬁne wellformed as the range of formatted messages
for AEAD (which are 16-byte aligned and embed their own
lengths; see §V). We also conﬁrm by typing that, with
Poly1305, there is no need to restrict messages: its encoding
is injective for all bytestrings [8, Theorem 3.2].
Security We give a theorem similar to those in prior
work [8, 30, 43] but parameterized by the underlying ﬁeld
F, encoding · , truncation tag, and blinding operation (cid:3).
The theorem covers all uses of AES-GCM and ChaCha20-
Poly1305 in TLS.
Consider the MMac1 deﬁnition, covering both shared and
fresh values for r. Let qv be the number of oracle calls to
Verify (for which log[n] (cid:11)= (m(cid:2), t(cid:2))) and d a bound on the
size (expressed in number of ﬁeld elements) of the messages
in calls to Mac and Verify.
Theorem 1: The Wegman-Carter-Shoup construction for
messages in Fd−1 is m-IND-UF-1CMA secure with concrete
bound MMac1(A[(cid:2)m, qv, qi]) = d.τ.qv
|R| with d = (cid:2)m/16, and
τ = 1 for GHASH and τ = 8 for Poly1305.
The proof (in the full paper) uses Lemma 2 and establishes
a bound d·τ|R| for an adversary that makes a single Verify
query. This bound follows from an d·τ|R| -almost-(cid:4)-universal
property, which has been separately proved for GHASH [35]
and Poly1305 [8]; the full paperalso includes its proof for
all instantiations of hashr for TLS.
Concrete bounds for GHASH: The range size for r is 2128
and there is no tag truncation, hence by Lemma 2 we get a
straight  = d·qv
2128 , so for TLS the main risk is a failure of
our PRF assumption on AES, discussed in §VII.
Concrete bound for Poly1305: The effective range R of r
is reduced, ﬁrst by uniformly sampling in 0..2128 − 1, then
by clamping 22 bits, to uniformly sampling one element out
of | R |= 2106 potential values. We lose another 3 bits of
security from the truncation of F to byte(cid:4)t and by applying
Lemma 2 we arrive at  = d·qv
2103 .
IV. PSEUDO-RANDOM FUNCTIONS FOR AEAD
We now consider the use of symmetric ciphers in counter
mode, both for keying one-time MACs and for generating
one-time pads for encryption. We model ciphers as PRFs.
For TLS, we will use AES or ChaCha20, and discuss
PRF/PRP issues in §VII. A pseudo-random function family
470
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
PRF implements the following interface:
type key
val keygen: unit → ST key
val (cid:2)d : nat (∗ ﬁxed domain length ∗)
val (cid:2)b : nat (∗ ﬁxed block length ∗)
type domain = lbytes (cid:2)d
type block = lbytes (cid:2)b
val eval: key → domain → Tot block (∗ functional speciﬁcation ∗)
This interface speciﬁes an abstract type for keys and a key-
generation algorithm. (Type abstraction ensures that these
keys are used only for PRF computations.) It also speciﬁes
concrete, ﬁxed-length bytestrings for the domain and range
of the PRF, and a function to compute the PRF. We refer to
the PRF outputs as blocks. As usual, we deﬁne security as
indistinguishability from a uniformly random function with
lazy sampling.
Deﬁnition 4 (PRF security): Let Prf (A[qb]) be the ad-
vantage of an adversary A that makes qb Eval queries in
the game:
Game Prf b(PRF)
T ← ∅
k $← PRF.keygen()
return {Eval}
Oracle Eval(m)
if T [m] = ⊥
if b then T [m] $← byte(cid:3)b
else T [m] ← PRF.eval(k, m)
return T [m]
The AEAD constructions we consider use PRFs both to
generate keys for the one-time MAC used to authenticate the
ciphertext and to generate a one-time pad for encryption and
decryption. Accordingly, we partition the domain and use a
specialized security deﬁnition, with a separate eval function
for each usage of the PRF. (This will enable us to give more
precise types to each of these functions.)
We assume the PRF domain consists of concatenations
of a ﬁxed-sized counter j and a nonce n, written j(cid:9)n. This
notation hides minor differences between AEAD algorithm
speciﬁcations, e.g. AES-GCM uses n(cid:9)j instead j(cid:9)n. Our
implementation handles these details, and veriﬁes that j(cid:9)n