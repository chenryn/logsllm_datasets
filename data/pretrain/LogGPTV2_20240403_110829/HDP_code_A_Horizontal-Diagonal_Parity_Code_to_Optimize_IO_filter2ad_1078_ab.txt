data elements C2,1 and C2,2 is shown in Figure 1(b)). Through
the layout of HP, horizontal codes can be optimized to reduce
the recovery time when data disk fails [40].
However, there is an obvious disadvantage for HP, which is
(a) Anti-diagonal parity layout of X-Code with prime disks (p = 7).
(b) Reduce I/O cost when column 2 fails in X-Code.
Fig. 4.
higher I/O cost when single disk failures in X-Code.
workload imbalance as discussed in Section II-A.
2) Diagonal/Anti-diagonal Parity (DP/ADP): Diagonal or
anti-diagonal parity typically appears in horizontal codes or
vertical codes, such as in RDP [8] and X-Code [42] (Figure
1(c) and 4(a)), which achieve a well-balanced I/O. The anti-
diagonal parity of X-Code can be calculated by,
n−3(cid:88)
k=0
Cn−1,i =
Ck,(cid:104)i−k−2(cid:105)n
(2)
From Equation 2, some modular computation to calculate
the corresponding data elements (e.g., (cid:104)i − k − 2(cid:105)n) are intro-
duced compared to Equation 1.
For DP/ADP, it has a little effect on reducing the probability
of single disk failure as discussed in Section II-B.
12664482036912150123456Column numberNumber of I/O operationsTABLE II
SUMMARY OF DIFFERENT PARITIES
Anti-diagonal parity:
Parities
HP
DP/ADP
VP
Computation
cost
Workload
balance
very low
medium
high
unbalance
balance
mostly balance
(unbalance in P-Code)
Reduce I/O cost of
single disk failure
a lot for data disks,
little for parity disks
some for all disks
none
3) Vertical Parity (VP): Vertical parity normally appears in
vertical codes, such as in B-Code [41] and P-Code [23]. Figure
2(a) shows the layout of vertical parity. The construction of
vertical parity is more complex: ﬁrst, some data elements are
selected as a set, upon which the modular calculations are
done. Thus, the computation cost for a vertical parity is higher
than other parities. Except for some exceptions like P-Code
shown in Figure 2(a), most vertical codes achieve a well-
balanced I/O. Due to the complex layout, reducing the I/O
cost of any single disk is infeasible for vertical codes like
P-Code.
Table II summarizes the major features of different pari-
ties, all of which suffer from unbalanced I/O and the poor
efﬁciency on reducing the I/O cost of single disk failure. To
address these issues, we propose a new parity named HDP to
take advantage of both horizontal and diagonal/anti-diagonal
parities to achieve low computation cost, high reliability, and
balanced I/O. The layout of HDP is shown in Figure 5(a). In
next section we will discuss how HDP parity is used to build
HDP code.
III. HDP CODE
To overcome the shortcomings of existing MDS codes,
in this section we propose the HDP Code, which takes the
advantage of both both horizontal and diagonal/anti-diagonal
parities in MDS codes. HDP is a solution for p − 1 disks,
where p is a prime number.
p−2(cid:80)
j=0
C(cid:104)2i+j+2(cid:105)p,j
(4)
Ci,p−2−i =
(j (cid:54)= p − 2 − i and j (cid:54)= (cid:104)p − 3 − 2i(cid:105)p)
Figure 5 shows an example of HDP Code for an 6-disk
array (p = 7). It is a 6-row-6-column square matrix. Two
diagonals of this matrix are used for the horizontal-diagonal
parity elements (C0,0, C1,1, C2,2, etc.) and the anti-diagonal
parity elements (C0,5, C1,4, C2,3, etc.).
The encoding of the horizontal-diagonal parity of HDP
Code is shown in Figure 5(a). We use different icon shapes
to denote different sets of horizontal-diagonal elements and
the corresponding data elements. Based on Equation 3, all
horizontal elements are calculated. For example, the horizontal
element C0,0 can be calculated by C0,1⊕ C0,2⊕ C0,3⊕ C0,4⊕
C0,5.
The encoding of anti-diagonal parity of HDP Code is given
in Figure 5(b). According to Equation 3, the anti-diagonal
elements can be calculated through modular arithmetic and
XOR operations. For example, to calculate the anti-diagonal
element C1,4 (i = 1), ﬁrst we should fetch the proper data
elements (C(cid:104)2i+j+2(cid:105)p,j). If j = 0, 2i + j + 2 = 4 and
(cid:104)4(cid:105)p = 4, we get the ﬁrst data element C4,0. The following
data elements, which take part in XOR operations, can be
calculated in the same way (the following data elements are
C5,1, C0,3, C2,5). Second, the corresponding anti-diagonal
element (C1,4) is constructed by an XOR operation on these
data elements, i.e., C1,4 = C4,0 ⊕ C5,1 ⊕ C0,3 ⊕ C2,5.
B. Construction Process
According to the above data/parity layout and encoding
scheme, the construction process of HDP Code is straight-
forward:
• Label all data elements.
• Calculate both horizontal and anti-diagonal parity ele-
ments according to Equations 3 and 4.
A. Data/Parity Layout and Encoding of HDP Code
C. Proof of Correctness
HDP Code is composed of a p− 1-row-p− 1-column square
matrix with a total number of (p − 1)2 elements. There are
three types of elements in the square matrix: data elements,
horizontal-diagonal parity elements, and anti-diagonal parity
elements. Ci,j (0 ≤ i ≤ p − 2, 0 ≤ j ≤ p − 2) denotes the
element at the ith row and the jth column. Two diagonals of
this square matrix are used as horizontal-diagonal parity and
anti-diagonal parity, respectively.
Horizontal-diagonal parity and anti-diagonal parity elements
of HDP Code are constructed according to the following
encoding equations:
Horizontal parity:
p−2(cid:88)
j=0
Ci,i =
Ci,j
(j (cid:54)= i)
(3)
To prove the correctness of HDP Code, we take the the case
of one stripe for example here. The reconstruction of multiple
stripes is just a matter of scale and similar to the reconstruction
of one stripe. In a stripe, we have the following lemma and
theorem,
Lemma 1: We can ﬁnd a sequence of a two-integer tuple
(Tk, T (cid:48)k) where
(cid:28)
(cid:29)
,
2
2
(f2 − f1)
f2
p − 2 + k+1+ 1+(−1)k
f1 + 1+(−1)k+1
Tk =
T (cid:48)k = 1+(−1)k
(k = 0, 1,··· , 2p − 3)
with 0 < f2−f1 < p−1, all two-integer tuples (0, f1), (0, f2),
··· , (p−2, f1), (p−2, f2) occur exactly once in the sequence.
The similar proof of this lemma can be found in many papers
on RAID-6 codes [3] [8] [42] [23].
p−1
2
2
(a) Horizontal-diagonal parity coding of HDP Code: a horizontal-
diagonal parity element can be calculated by XOR operations among
the corresponding data elements in the same row. For example, C0,0 =
C0,1 ⊕ C0,2 ⊕ C0,3 ⊕ C0,4 ⊕ C0,5.
(b) Anti-diagonal parity coding of HDP Code: an anti-diagonal parity
element can be calculated by XOR operations among the corresponding
data elements in anti-diagonal. For example, C1,4 = C4,0 ⊕ C5,1 ⊕
C0,3 ⊕ C2,5.
Fig. 5. HDP Code (p = 7).
Theorem 1: A p − 1-row-p − 1-column stripe constructed
according to the formal description of HDP Code can be
reconstructed under concurrent failures from any two columns.
Proof: The two failed columns are denoted as f1 and f2,
where 0 < f1 < f2 < p.
In the construction of HDP Code, any two horizontal-
diagonal parity elements cannot be placed in the same row, as
well for any two anti-diagonal parity elements. For any two
concurrently failed columns f1 and f2, based on the layout of
HDP Code, two data elements Cp−1−f2+f1,f1 and Cf2−f1−1,f2
can be reconstructed since the corresponding anti-diagonal
parity element does not appear in the other failed column.
For the failed columns f1 and f2, if a data element Ci,f2
on column f2 can be reconstructed, we can reconstruct the
missing data element C(cid:104)i+f1−f2(cid:105)p,f1 on the same anti-diagonal
parity chain if its corresponding anti-diagonal parity elements
exist. Similarly, a data element Ci,f1 in column f1 can be
reconstructed, we can reconstruct the missing data element
C(cid:104)i+f2−f1(cid:105)p,f2 on the same anti-diagonal parity chain if its
anti-diagonal parity element parity element exist. Let us con-
sider the construction process from data element Cf2−f1−1,f2
on the f2th column to the corresponding endpoint (element
Cf1,f1 on the f1th column). In this reconstruction process,
all data elements can be reconstructed and the reconstruction
sequence is based on the sequence of the two-integer tuple
in Lemma 1. Similarly, without any missing parity elements,
we may start the reconstruction process from data element
Cf2−1,f1 on the f1th column to the corresponding endpoint
(element Cf2,f2 on the f2th column).
In conclusion, HDP Code can be reconstructed under con-
current failures from any two columns.
D. Reconstruction Process
We ﬁrst consider how to recover a missing data element
since any missing parity element can be recovered based on
Equations 3 and 4. If the horizontal-diagonal parity element
and the related p − 2 data elements exist, we can recover the
missing data element (assuming it’s Ci,f1 in column f1 and
0 ≤ f1 ≤ p − 2) using the following equation,
Ci,f1 =
Ci,j
(j (cid:54)= f1)
(5)
If there exists an anti-diagonal parity element and its p − 3
data elements, to recover the data element (Ci,f1), ﬁrst we
should recover the corresponding anti-diagonal parity element.
Assume it is in row r and this anti-diagonal parity element
can be represented by Cr,p−2−r based on Equation 4, then we
have:
p−2(cid:88)
j=0
i = (cid:104)2r + f1 + 2(cid:105)p
So r can be calculated by (k is an arbitrary positive integer):
 (i − f1 + p − 2)/2
(i − f1 = ±2k + 1)
(i − f1 + 2p − 2)/2 (i − f1 = −2k)
(i − f1 − 2)/2
(i − f1 = 2k)
r =
According to Equation 4, the missing data element can be
recovered,
(6)
(7)
(8)
p−2(cid:80)
Ci,f1 = Cr,p−2−r ⊕
C(cid:104)2i+j+2(cid:105)p,j
(j (cid:54)= f1 and j (cid:54)= (cid:104)p − 3 − 2i(cid:105)p)
j=0
IV. LOAD BALANCING ANALYSIS
In this section, we evaluate HDP to demonstrate its effec-
tiveness on load balancing.
A. Evaluation Methodolody
We compare HDP Code with following popular codes in
typical scenarios (when p = 5 and p = 7):
• Codes for p − 1 disks: HDP Code;
• Codes for p disks: P-Code [23];
• Codes for p + 1 disks: RDP code [8];
• Codes for p + 2 disks: EVENODD code [3].
For each coding method, we analyze a trace as shown in
Figure 8. We can see that most of the write requests are 4KB
and 8 KB in Microsoft Exchange application. Typically a stripe
size is 256KB [9] and a data block size is 4KB, so single write
and partial stripe write to two continuous data elements are
dominant and have signiﬁcant impacts on the performance of
disk array.
Fig. 8. Write request distribution in Microsoft Exchange trace (most write
requests are 4KB and 8KB).
Based on the analysis of exchange trace, we select various
types of read/write requests to evaluate various codes as
follows:
any read or partial write to continuous data elements;
• Read (R): read only;
• Single Write (SW): only single write request without
• Continuous Write (CW): only write request
to two
continuous data elements without any read or single
write;
• Mixed Read/Write (MIX): mixed above three types.
For example, “RSW” means mixed read and single write
requests, “50R50SW” means 50% read requests and 50%
single write requests.
To show the status of I/O distribution among different codes,
we envision an ideal sequence to read/write requests in a stripe
as follows,
a stripe is less than 7 ∗ 7 = 49.
For each data element4,
is treated as the beginning
read/written element at least once. If there is no data element
4For p = 5 and p = 7 in different codes, the number of data elements in
it
Fig. 6. Reconstruction by two recovery chains (there are double failures in
columns 2 and 3): First we identify the two starting points of recovery chain:
data elements A and G. Second we reconstruct data elements according to the
corresponding recovery chains until they reach the endpoints (data elements F
and L).The orders to recover data elements are: one is A→B→C→D→E→F,
the other is G→H→I→J→K→L.
Based on Equations 5 to 8, we can easily recover the
elements upon single disk failure. If two disks failed (for
example, column f1 and column f2, 0 ≤ f1 < f2 ≤ p − 2),
based on Theorem 1, we have our reconstruction algorithm of
HDP Code shown in Figure 7.
Fig. 7. Reconstruction Algorithm of HDP Code.
In Figure 7, we notice that the two recovery chains of HDP
Code can be recovered synchronously, and this process will
be discussed in detail in Section V-B.
E. Property of HDP Code
From the proof of HDP Code’s correctness, HDP Code is
essentially an MDS code, which has optimal storage efﬁciency
[42] [6] [23].