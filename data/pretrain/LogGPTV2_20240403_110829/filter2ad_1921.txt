# A Software-Defined Approach to Unified IPv6 Transition

## Authors
- Wenfeng Xia, University of Science and Technology of China, [EMAIL]
- Tina Tsou, Huawei, [EMAIL]
- Diego R. López, Telefónica I+D, [EMAIL]
- Qiong Sun, China Telecom, [EMAIL]
- Felix Lu, Huawei, [EMAIL]
- Haiyong Xie, USTC / Huawei, [EMAIL]

## Abstract
The transition to IPv6 is a global necessity due to the exhaustion of the IPv4 address space. However, this transition requires costly end-to-end network upgrades and introduces new challenges in managing a large number of devices with various transitioning protocols. To address these issues, we propose a software-defined approach to unify the deployment of IPv6 in a cost-effective and flexible manner. Our deployment and experiments demonstrate significant benefits, including low complexity, low cost, and high flexibility in adopting different existing transition mechanisms.

## Categories and Subject Descriptors
- C.2.1 [Network Architecture and Design]: Centralized networks
- C.2.4 [Distributed Systems]: Network operating systems

## Keywords
- IPv6 Transition, Software-Defined Networking (SDN)

## 1. Introduction
The exhaustion of the IPv4 address space is a practical problem that network carriers are currently facing. While solutions such as IPv4 re-addressing and address reusing have been implemented, they do not fundamentally solve the issue. IPv6 is seen as a complete and thorough solution to this problem.

The transition to IPv6 is expected to occur in three stages:
1. Preparation and initial deployment of IPv6 on an IPv4-based network.
2. Coexistence of IPv4 and IPv6.
3. Gradual retirement of the IPv4 network as IPv6 becomes dominant.

Various mechanisms and equipment have been introduced for different transition stages, which can be broadly categorized into dual-stack, tunneling, and translation. Among these, dual-stack is the simplest and easiest to deploy, while tunneling and translation are more suitable for specific scenarios.

Despite its potential, the adoption of IPv6 has been slow for several reasons:
- IPv6 has not yet brought new business opportunities for network carriers.
- Alternative solutions to the IPv4 address space depletion exist.
- The adoption of IPv6 by end users, network carriers, and Internet applications is not balanced.

A key challenge is the deadlock between end users and Internet applications. End users are reluctant to transition to IPv6 due to a lack of supportive applications, while applications are waiting for a large-scale IPv6 user base. This creates a "chicken and egg" problem. We believe that network carriers should take the initiative to construct and develop an IPv6-friendly infrastructure to break this deadlock.

Additionally, the introduction of various transition mechanisms and corresponding equipment poses a new challenge: the lack of a unified scheme that supports all these mechanisms. Upgrading and replacing existing devices can be costly and disruptive to services.

Recently, the emergence of Software-Defined Networking (SDN) has decoupled the data plane and control plane, providing unprecedented flexibility and programmability in networks. We see great potential in applying SDN to the deployment of IPv6. Recognizing the challenges in IPv6 adoption and the flexibility provided by SDN, we propose a software-defined approach to unify the existing solutions for the IPv6 transition.

## 2. Software-Defined IPv6 Transition

### 2.1 Overview
Our approach leverages SDN as a programmable platform for deploying various IPv6 transition services, unifying available transition protocols and effectively addressing the challenges. In our approach, OpenFlow switches are deployed at the edge of the network, and the IPv6 Transition Service Module (ITSM) is integrated as a service plug-in for the OpenFlow controller (Figure 1).

To handle IPv6 packets, we extend the switches to support IP-in-IP tunnels, which can be efficiently implemented in hardware. These extended switches process incoming packets based on flow tables delivered by the ITSM via the SDN controller.

The controller provides a northbound interface (NBI) that enables the ITSM to manipulate traffic via OpenFlow. Specifically, the controller uses an OpenFlow driver to allow the ITSM to instruct SDN-enabled equipment to manage traffic using the ONF-Controller-to-Application interface. This interface is used to send and receive all specified OpenFlow messages (e.g., packet_out, flow_mod) between the controller and the ITSM.

### 2.2 Software-Defined Unification
The SDN-based approach allows the ITSM to program SDN-enabled equipment to tunnel IPv6 traffic across an IPv4 data plane. The controller translates the commands issued by the ITSM into a form that can be executed by the SDN-enabled equipment. Figure 2 illustrates how packets are processed in the software-defined unifying approach. In this approach, a flow can be identified by components in the L2-to-L4 packet header, reducing the number of flows.

When an SDN device receives the first packet of a flow, it forwards the packet to the controller because the flow table does not have a matching rule. The controller then sends the packet to the ITSM via the NBI. The ITSM generates policies (e.g., packet_out and flow_mod) for this flow, which are sent back to the controller and then to the SDN-enabled equipment. The equipment adds the new flow and corresponding policies to the flow table, and subsequent packets of the flow are processed and forwarded according to the defined policies.

## 3. Evaluations and Deployment
We implemented the software-defined transition approach using Open vSwitch on commodity hardware and evaluated its performance. Specifically, we ran single-threaded IPv6 transition applications on an Intel Xeon E5-2407 with four CPU cores and 32 GB memory. The data path was implemented using Open vSwitch on commodity hardware with an Intel Core i5-2400 CPU and 4 GB memory. We installed 64-bit CentOS as the operating system on all hardware platforms.

We varied the number of concurrent flows and quantified the processing latencies of key components. Figure 3 summarizes the results. The overall total processing latency was about 0.6–0.9 milliseconds, with the latencies incurred by the controller and the forwarding element (i.e., Open vSwitch) being largely constant. The IPv6 transition applications contributed significantly (approximately 50%) to the overall processing latency, mainly due to the construction of the flow table for the data path. This issue could be addressed by leveraging the CPU's multi-core and multi-thread capabilities, which is part of our future work. Additionally, our prototype implementation can handle 4 Gbps traffic when fully utilizing the CPU on the data path.

We also deployed the approach on an enterprise campus in Santa Clara, CA, consisting of 14 WiFi access points, one OpenFlow controller, and one IPv6 Transition Service Module. This deployment provided IPv6 Internet access for the ETSI Network Function Virtualization Workshop on April 22–23, 2013, serving over 270 participants. Our experiments and deployment demonstrate that our approach is significantly more cost-effective and flexible than existing approaches.

## 4. Conclusion
We proposed a novel, software-defined approach to address the challenges of IPv6 transition. Our approach unifies the variety of IPv6 transition mechanisms in a cost-effective and flexible manner. We deployed the approach on an enterprise campus to provide IPv6 Internet access. Our experiments suggest significant benefits, including low complexity, high flexibility, and low cost.

## 5. Acknowledgments
The corresponding authors are Tina Tsou and Haiyong Xie. Haiyong Xie is supported in part by, and Wenfeng Xia is supported by, NSFC Grant No. 61073192, 973 Program Grant No. 2011CB302905, NCET Program grant No. NCET-09-0921, and USTC Grant No. WK0110000014.

## 6. References
1. R. Despres. IPv6 rapid deployment on IPv4 infrastructures (6RD). RFC 5569, 2010.
2. A. Durand, R. Droms, J. Woodyatt, and Y. Lee. Dual-stack lite broadband deployments following IPv4 exhaustion. RFC 6333, 2011.
3. I. Farrer and A. Durand. lw4over6 deterministic architecture. IETF Internet Draft, Jul. 2012.
4. O. Troan, W. Dec, X. Li, C. Bao, Y. Zhai, S. Matsushima, and T. Murakami. Mapping of address and port (MAP). IETF Internet Draft, Jun. 2012.