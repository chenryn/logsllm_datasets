title:A software defined approach to unified IPv6 transition
author:Wenfeng Xia and
Tina Tsou and
Diego R. L&apos;opez and
Qiong Sun and
Felix Lu and
Haiyong Xie
A Software Deﬁned Approach to Uniﬁed IPv6 Transition
Wenfeng Xia
University of Science and
Technology of China
PI:EMAIL
Tina Tsou
Huawei
PI:EMAIL
Diego Lopez
Telefónica I+D
PI:EMAIL
Qiong Sun
China Telecom
PI:EMAIL
Felix Lu
Huawei
PI:EMAIL
Haiyong Xie
USTC / Huawei
PI:EMAIL
ABSTRACT
The IPv6 transition has been an ongoing process throughout the
world due to the exhaustion of the IPv4 address space. However,
this transition leads to costly end-to-end network upgrades and poses
new challenges of managing a large number of devices with a va-
riety of transitioning protocols. Recognizing these difﬁculties, we
propose an software deﬁned approach to unifying the deployment
of IPv6 in a cost-effective, ﬂexible manner. Our deployment and
experiments demonstrate signiﬁcant beneﬁts of this approach, in-
cluding low complexity, low cost and high ﬂexibility of adopting
different existing transition mechanisms.
Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]: Centralized networks;
C.2.4 [Distributed Systems]: Network operating systems
Keywords
IPv6 Transition; Software Deﬁned Network
1.
INTRODUCTION
The exhaustion of the IPv4 address space has been a practical
problem that network carriers are facing today. Existing solutions
such as IPv4 re-addressing and address reusing fail to fundamen-
tally solve this problem. Instead, IPv6 is regarded as a complete
and thorough solution to this problem.
The transition and evolution to IPv6 are expected to complete in
three stages: (1) the deployment of IPv6 is prepared and begun on
the IPv4-based network, (2) IPv4 and IPv6 coexist, and (3) IPv6
plays a leading role on the network and the IPv4 network is grad-
ually retired. A variety of mechanisms and equipment are intro-
duced for different transition stages. Such transition mechanisms
(see, e.g., [1, 2, 3, 4]) can be largely divided into three types: dual
stack, tunneling, and translation. Among these mechanisms, dual
stack is the simplest and easiest to deploy, and the remaining two
are applicable only to speciﬁc scenarios.
To date, the adoption of IPv6 is progressing slowly mainly for
numerous reasons. First, IPv6 has not brought new business oppor-
tunities for network carriers, and this is not likely to change in the
Permission to make digital or hard copies of part or all of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. Copyrights for third-
party components of this work must be honored. For all other uses, contact
the owner/author(s).
SIGCOMM’13, August 12–16, 2013, Hong Kong, China.
ACM 978-1-4503-2056-6/13/08.
foreseeable future. Second, IPv6 serves as a solution only to the
depletion of the IPv4 address space, and there are alternative solu-
tions for carriers to choose. Last but not least, the adoption of IPv6
by three major players, i.e., the end users, the network carriers and
the Internet applications, is not developing in a balanced manner.
In particular, currently there exists a deadlock on the adoption
of IPv6 between end users and Internet applications. More specif-
ically, on one hand, IPv6 lacks support from applications; in other
words, almost no application is implemented technically only based
on IPv6; as a result, end users are reluctant to transition to IPv6 due
to lack of attractive applications and competitive prices on IPv6. On
the other hand, for Internet applications, a large-scale IPv6 network
as well as a stable and large IPv6 user group are the fundamental
driving force for evolving to IPv6. While users are waiting for
IPv6 applications, network carriers and application are also wait-
ing for IPv6 users. The situation is essentially a chicken and egg
problem. However, as network carriers provide Internet connectiv-
ity to both end users and applications, we believe that the key to
the above deadlock is that network carriers should take the initia-
tive in constructing and developing an IPv6-friendly infrastructure,
thus providing IPv6-based service access capabilities and actively
nurturing the IPv6 adoption.
Additionally, the introduction of various transition mechanisms
and corresponding equipment also pose a new challenge to the IPv6
transition, i.e., there lacks a uniﬁed scheme that supports all of these
mechanisms. It becomes more challenging when considering the
fact that there are a large number of devices on the current IPv4
networks; upgrading and replacing these devices can incur tremen-
dous investments. More importantly, it is not acceptable to interrupt
the existing services during the long-lasting transition process.
Recently the emergence of the software deﬁned networking (SDN)
architecture decouples the data plane and control plane, which are
historically tightly coupled in the past few decades. The decou-
pling of the data/control planes allow unprecedented ﬂexibility and
programmability in the networks. We see great potentials of apply-
ing SDN to the deployment of IPv6. Recognizing the challenges
in the adoption of IPv6 as well as the great ﬂexibility provided by
SDN, we propose a software deﬁned approach to ﬂexibly unify the
existing solutions to the IPv6 transition problem.
2. SOFTWARE DEFINED IPV6 TRANSITION
The existing IPv6 transition mechanisms require costly end-to-
end network upgrades and managing a large number of devices
with a variety of transitioning protocols. We believe that a uni-
ﬁed, ﬂexible approach is necessary for the success of IPv6 transi-
tion. SDN provides a perfect supporting mechanism to achieve the
desired uniﬁcation and ﬂexibility.
2.1 Overview
We leverage SDN as a programmable platform for deploying var-
547Figure 1: An overview of the SDN-based approach.
ious IPv6 transition services, thus we unify the available transition
protocols and effectively address the aforementioned challenges.
In our unifying approach, we deploy OpenFlow switches located
at the edge of network and the IPv6 transition service module (ITSM)
as a service plug-in for the OpenFlow controller, as shown in Fig-
ure 1.
In order to cope with IPv6 packets, we also extend the
switches to support IP-in-IP tunnels. Note that this is a simple
and straightforward extension which can be cost-efﬁciently imple-
mented in hardware. The switches with such an extension pro-
cess the incoming packets based on the ﬂow tables delivered by the
ITSM via the SDN controller.
The controller provides a northbound interface (NBI) that en-
ables the ITSM to manipulate the trafﬁc via OpenFlow. More specif-
ically, the controller provides an OpenFlow driver allowing the
ITSM to instruct SDN-enabled equipment to treat trafﬁc using the
ONF-Controller-to-Application interface. This interface is used to
send and receive all speciﬁed OpenFlow messages (e.g., packet_out,
flow_mod, etc.) between the controller and the ITSM.
2.2 Software Deﬁned Uniﬁcation
The above SDN-based approach enables the ITSM to program
SDN-enabled equipment to tunnel IPv6 trafﬁc across an IPv4 data
plane (the controller translates the commands issued by the ITSM
into a form that can be executed by the SDN-enabled equipment).
Figure 2 illustrates an example of how packets are processed in the
software deﬁne unifying approach. Note that in this approach, a
ﬂow can be identiﬁed by components in the L2-to-L4 packet header
(e.g., all packets to a subscriber can be treated as one single ﬂow,
which will greatly reduce the number of ﬂows).
More speciﬁcally, when an SDN device receives the ﬁrst packet
of a ﬂow the packet is forwarded to the controller (steps 1–2), be-
cause this ﬂow is a new one, and the ﬂow table does not have a
matching rule to cope with it. The controller then sends it to the
proper service module (i.e., the IPv6 Transition Service Module)
via the NBI (step 3). The ITSM generates policies (e.g., packet_out
and flow_mod) for this ﬂow, and these policies are sent to the
controller via the NBI and then to the SDN-enabled equipment.
On receiving these policies, the equipment adds new ﬂow and the
corresponding policies to the ﬂow table (steps 4–6). Finally, the
subsequent packets of the ﬂow will be processed and forwarded
by following the policies deﬁned in the ﬂow table; as a result, the
SDN-enabled equipment forwards tunnelled IPv6 packets to their
proper destinations.
3. EVALUATIONS AND DEPLOYMENT
We implement the the software deﬁned transition approach based
on the Open vSwitch using commodity hardware and quantify the
performance of our implementation via extensive evaluations. More
speciﬁcally, we run single-threaded IPv6 transition applications on
Intel Xeon E5-2407 with four CPU cores and 32 GB memory. The
data path is implemented by running the Open vSwitch on com-
modity hardware with an Intel Core i5-2400 CPU with 4GB mem-
ory. We install 64-bit CentOS as the operating system on all hard-
ware platforms.
We vary the number of concurrent ﬂows and quantify the pro-
cessing latencies of key components. Figure 3 summarizes the re-
sults. We observe that the overall total processing latency is about
Figure 2: Packet processing in the uniﬁed approach.
0.6–0.9 millisecond, and that the latencies incurred by the con-
troller and the forwarding element (i.e., Open vSwitch) are largely
constant, which is what we expect (recall that only the ﬁrst packet
of a ﬂow is processed by the controller and applications). We also
observe that IPv6 transition applications incur a signiﬁcant portion
(approximately 50%) of the overall processing latency. We ﬁnd that
this high latency is mainly caused by the transition applications’
constructing the ﬂow table for the data path. This problem could be
addressed by leveraging the CPU’s multi-core and multi-thread ca-
pability, which we leave as a part of our future work. Additionally,
our prototype implementation can cope with 4Gbps trafﬁc when
fully utilizing the CPU on the data path.
APP
CNTRL
FWDING
TOTOAL
)
s
m
(
y
c
n
e
t
a
L
g
n
i
s
s
e
c
o
r
P
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
1
1000
2000
3000
4000
Number of Flows
Figure 3: Experimental evaluations on processing latencies.
We also deployed the above approach on an enterprise campus
in Santa Clara, CA. The deployment consists of 14 WiFi access
points, one OpenFlow controller and one IPv6 Transition Service
Module. The same deployment had been used to provide IPv6 In-
ternet access for the ETSI Network Function Virtualization Work-
shop on April 22–23, 2013. The workshop alone had more than
270 participants who had used the transition service. Our exper-
iments and deployment demonstrate that our approach is signiﬁ-
cantly more cost-effective and ﬂexible than existing approaches.
4. CONCLUSION
We proposed a novel, software deﬁned approach to address the
challenges of IPv6 transition. Our approach uniﬁes the variety of
IPv6 transition mechanisms in a cost-effective, ﬂexible manner. We
deployed the approach on an enterprise campus to provide IPv6
Internet access. Our experiments suggest signiﬁcant beneﬁts of this
approach, including low complexity, high ﬂexibility and low cost.
5. ACKNOWLEDGMENTS
The corresponding authors are Tina Tsou and Haiyong Xie. Haiy-
ong Xie is supported in part by, and Wenfeng Xia is supported by,
NSFC Grant No. 61073192, 973 Program Grant No. 2011CB302905,
NCET Program grant No. NCET-09-0921, and USTC Grant No.
WK0110000014.
6. REFERENCES
[1] R. Despres. IPv6 rapid deployment on IPv4 infrastructures (6RD).
RFC 5569, 2010.
[2] A. Durand, R. Droms, J. Woodyatt, and Y. Lee. Dual-stack lite
broadband deployments following IPv4 exhaustion. RFC 6333, 2011.
[3] I. Farrer and A. Durand. lw4over6 deterministic architecture. IETF
Internet Draft, Jul. 2012.
[4] O. Troan, W. Dec, X. Li, C. Bao, Y. Zhai, S. Matsushima, and
T. Murakami. Mapping of address and port (MAP). IETF Internet
Draft, Jun. 2012.
548