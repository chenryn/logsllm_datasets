ers and filters can be assigned a priority value, called a weight, that dictates 
the order in which they should be processed by the filter manager. This 
ordering logic is called filter arbitration.
During filter arbitration, filters evaluate the data parsed from the 
packet from highest to lowest priority to determine what to do with the 
packet. Each filter contains conditions and an action, just like common fire-
wall rules (for example, “if the destination port is 4444, block the packet” 
or “if the application is edge.exe, allow the packet”). The basic actions a filter 
Client
application
tcpip.sys/tcpip6.sys
Transport
Stream
ALE
Network
NIC
TCP   Stack
Filter manager
Callout 
drivers
Callout 
Callout 
Callout 
Stream layer
ALE layer
Transport layer
Network layer
netio.sys
Shim
Shim
Shim
Shim
Sublayer
Filters
Sublayer
Filters
Sublayer
Filters
Sublayer
Filters
Sublayer
Filters
Sublayer
Filters
Sublayer
Filters
Sublayer
Filters
Figure 7-4: The WFP architecture
Evading EDR (Early Access) © 2023 by Matt Hand
128   Chapter 7
can return are Block and Permit, but three other supported actions pass 
packet details to callout drivers: FWP_ACTION_CALLOUT_TERMINATING, FWP_ACTION 
_CALLOUT_INSPECTION, and FWP_ACTION_CALLOUT_UNKNOWN.
Callout Drivers
Callout drivers are third-party drivers that extend WFP’s filtering function-
ality beyond that of the base filters. These drivers provide advanced fea-
tures such as deep-packet inspection, parental controls, and data logging. 
When an EDR vendor is interested in capturing network traffic, it typically 
deploys a callout driver to monitor the system.
Like basic filters, callout drivers can select the types of traffic that 
they’re interested in. When the callout drivers associated with a particu-
lar operation are invoked, they can suggest action be taken on the packet 
based on their unique internal processing logic. A callout driver can permit 
some traffic, block it, continue it (meaning pass it to other callout drivers), 
defer it, drop it, or do nothing. These actions are only suggestions, and the 
driver might override them during the filter arbitration process.
When filter arbitration ends, the result is returned to the shim, which 
acts on the final filtering decision (for example, permitting the packet to 
leave the host).
Implementing a WFP Callout Driver
When an EDR product wants to intercept and process network traffic on 
a host, it most likely uses a WFP callout driver. These drivers must follow a 
somewhat complex workflow to set up their callout function, but the flow 
should make sense to you when you consider how packets traverse the net-
work stack and filter manager. These drivers are also substantially easier to 
work with than their legacy NDIS counterparts, and Microsoft’s documenta-
tion should be very helpful for EDR developers looking to add this capabil-
ity to their sensor lineup.
Opening a Filter Engine Session
Like other types of drivers, WFP callout drivers begin their initialization inside 
their internal DriverEntry() function. One of the first things the callout driver 
will do, an activity unique to WFP, is open a session with the filter engine. To 
do this, the driver calls fltmgr!FwpmEngineOpen(), defined in Listing 7-1.
DWORD FwpmEngineOpen0(
 [in, optional] const wchar_t   
*serverName,
 [in]  
UINT32  
authnService,
 [in, optional] SEC_WINNT_AUTH_IDENTITY_W *authIdentity,
 [in, optional] const FWPM_SESSION0  
*session,
 [out]  
HANDLE  
*engineHandle
);
Listing 7-1: The fltmgr!FwpmEngineOpen() function definition
Evading EDR (Early Access) © 2023 by Matt Hand
Network Filter Drivers   129
The most notable argument passed to this function as input is  
authnService, which determines the authentication service to use. This can 
be either RPC_C_AUTHN_WINNT or RPC_C_AUTHN_DEFAULT, both of which essentially 
just tell the driver to use NTLM authentication. When this function com-
pletes successfully, a handle to the filter engine is returned through the 
engineHandle parameter and typically preserved in a global variable, as the 
driver will need it during its unloading process.
Registering Callouts
Next, the driver registers its callouts. This is done through a call to the  
fltmgr!FwpmCalloutRegister() API. Systems running Windows 8 or later will 
convert this function to fltmgr!FwpsCalloutRegister2(), the definition of 
which is included in Listing 7-2.
NTSTATUS FwpsCalloutRegister2(
 [in, out] 
void 
*deviceObject,
 [in] 
const FWPS_CALLOUT2 *callout,
 [out, optional] UINT32 
*calloutId
);
Listing 7-2: The fltmgr!FwpsCalloutRegister2() function definition
The pointer to the FWPS_CALLOUT2 structure passed as input to this func-
tion (via its callout parameter) contains details about the functions internal 
to the callout driver that will handle the filtering of packets. It is defined in 
Listing 7-3.
typedef struct FWPS_CALLOUT2_ {
 GUID 
calloutKey;
 UINT32 
flags;
 FWPS_CALLOUT_CLASSIFY_FN2 
classifyFn;
 FWPS_CALLOUT_NOTIFY_FN2 
notifyFn;
 FWPS_CALLOUT_FLOW_DELETE_NOTIFY_FN0 flowDeleteFn;
} FWPS_CALLOUT2;
Listing 7-3: The FWPS_CALLOUT2 structure definition
The notifyFn and flowDeleteFn members are callout functions used to 
notify the driver when there is information to be passed related to the 
callout itself or when the data that the callout is processing has been ter-
minated, respectively. Because these callout functions aren’t particularly 
relevant to detection efforts, we won’t cover them in further detail. The 
classifyFn member, however, is a pointer to the function invoked whenever 
there is a packet to be processed, and it contains the bulk of the logic used 
for inspection. We’ll cover these callouts in “Detecting Adversary Tradecraft 
with Network Filters” on page XX.
Evading EDR (Early Access) © 2023 by Matt Hand
130   Chapter 7
Adding the Callout Function to the Filter Engine
After we’ve defined the callout function, we can add it to the filter engine 
by calling fwpuclnt!FwpmCalloutAdd(), passing the engine handle obtained 
earlier and a pointer to an FWPM_CALLOUT structure, shown in Listing 7-4, as 
input.
typedef struct FWPM_CALLOUT0_ {
 GUID 
calloutKey;
 FWPM_DISPLAY_DATA0 displayData;
 UINT32 
flags;
 GUID 
*providerKey;
 FWP_BYTE_BLOB 
providerData;
 GUID 
applicableLayer;
 UINT32 
calloutId;
} FWPM_CALLOUT0;
Listing 7-4: The FWPM_CALLOUT structure definition
This structure contains data about the callout, such as its optional 
friendly name and description in its displayData member, as well as the lay-
ers to which the callout should be assigned (for example, FWPM_LAYER_STREAM 
_V4 for IPv4 streams). Microsoft documents dozens of filter layer identifiers, 
each of which usually has IPv4 and IPv6 variants. When the function used 
by the driver to add its callout completes, it returns a runtime identifier for 
the callout that is preserved for use during unloading.
Unlike filter layers, a developer may add their own sublayers to the 
system. In those cases, the driver will call fwpuclnt!FwpmSublayerAdd(), which 
receives the engine handle, a pointer to an FWPM_SUBLAYER structure, and an 
optional security descriptor. The structure passed as input includes the 
sublayer key, a GUID to uniquely identify the sublayer, an optional friendly 
name and description, an optional flag to ensure that the sublayer persists 
between reboots, the sublayer weight, and other members that contain the 
state associated with a sublayer.
Adding a New Filter Object
The last action a callout driver performs is adding a new filter object 
to the system. This filter object is the rule that the driver will evalu-
ate when processing the connection. To create one, the driver calls 
fwpuclnt!FwpmFilterAdd(), passing in the engine handle, a pointer to an  
FWPM_FILTER structure shown in Listing 7-5, and an optional pointer to a 
security descriptor.
typedef struct FWPM_FILTER0_ {
 GUID 
filterKey;
 FWPM_DISPLAY_DATA0 
displayData;
 UINT32 
flags;
 GUID 
*providerKey;
 FWP_BYTE_BLOB 
providerData;
 GUID 
layerKey;
Evading EDR (Early Access) © 2023 by Matt Hand
Network Filter Drivers   131
 GUID 
subLayerKey;
 FWP_VALUE0 
weight;
 UINT32 
numFilterConditions;
 FWPM_FILTER_CONDITION0 *filterCondition;
 FWPM_ACTION0 
action;
 union {
  UINT64 rawContext;
  GUID  providerContextKey;
 };
 GUID 
*reserved;
 UINT64 
filterId;
 FWP_VALUE0 
effectiveWeight;
} FWPM_FILTER0;
Listing 7-5: The FWPM_FILTER structure definition
The FWPM_FILTER structure contains a few key members worth highlight-
ing. The flags member contains several flags that describe attributes of 
the filter, such as whether the filter should persist through system reboots 
(FWPM _FILTER_FLAG_PERSISTENT) or if it is a boot-time filter (FWPM_FILTER_FLAG_
BOOTTIME). The weight member defines the priority value of the filter in 
relation to other filters. The numFilterConditions is the number of filtering 
conditions specified in the filterCondition member, an array of FWPM_FILTER_
CONDITION structures that describe all the filtering conditions. For the callout 
functions to process the event, all conditions must be true. Lastly, action 
is an FWP_ACTION_TYPE value indicating what action to perform if all filtering 
conditions return true. These actions include permitting, blocking, or pass-
ing the request to a callout function.
Of these members, filterCondition is the most important, as each 
filter condition in the array represents a discrete “rule” against which 
the connections will be evaluated. Each rule is itself made up of a condi-
tion value and match type. The definition for this structure is shown in 
Listing 7-6.
typedef struct FWPM_FILTER_CONDITION0_ {
 GUID 
fieldKey;
 FWP_MATCH_TYPE 
matchType;
 FWP_CONDITION_VALUE0 conditionValue;
} FWPM_FILTER_CONDITION0;
Listing 7-6: The FWPM_FILTER_CONDITION structure definition
The first member, fieldKey, indicates the attribute to evaluate. Each fil-
tering layer has its own attributes, identified by GUIDs. For example, a filter 
inserted in the stream layer can work with local and remote IP addresses 
and ports, traffic direction (whether inbound or outbound), and flags (for 
example, if the connection is using a proxy).
The matchType member specifies the type of match to be performed. 
These comparison types are defined in the FWP_MATCH_TYPE enumeration 
shown in Listing 7-7 and can match strings, integers, ranges, and other 
data types.
Evading EDR (Early Access) © 2023 by Matt Hand
132   Chapter 7
typedef enum FWP_MATCH_TYPE_ {
 FWP_MATCH_EQUAL = 0,
 FWP_MATCH_GREATER,
 FWP_MATCH_LESS,
 FWP_MATCH_GREATER_OR_EQUAL,
 FWP_MATCH_LESS_OR_EQUAL,
 FWP_MATCH_RANGE,
 FWP_MATCH_FLAGS_ALL_SET,
 FWP_MATCH_FLAGS_ANY_SET,
 FWP_MATCH_FLAGS_NONE_SET,
 FWP_MATCH_EQUAL_CASE_INSENSITIVE,
 FWP_MATCH_NOT_EQUAL,
 FWP_MATCH_PREFIX,
 FWP_MATCH_NOT_PREFIX,
 FWP_MATCH_TYPE_MAX
} FWP_MATCH_TYPE;
Listing 7-7: The FWP_MATCH_TYPE enumeration
The last member of the structure, conditionValue, is the condition 
against which the connection should be matched. The filter condition 
value is composed of two parts, the data type and a condition value, housed 
together in the FWP_CONDITION_VALUE structure, shown in Listing 7-8.
typedef struct FWP_CONDITION_VALUE0_ {
 FWP_DATA_TYPE type;
 union {
  UINT8 
uint8;
  UINT16 
uint16;
  UINT32 
uint32;
  UINT64 
*uint64;
  INT8 
int8;
  INT16 
int16;
  INT32 
int32;
  INT64 
*int64;
  float 
float32;
  double 
*double64;
  FWP_BYTE_ARRAY16 
*byteArray16;
  FWP_BYTE_BLOB 
*byteBlob;
  SID 
*sid;
  FWP_BYTE_BLOB 
*sd;
  FWP_TOKEN_INFORMATION *tokenInformation;
  FWP_BYTE_BLOB 
*tokenAccessInformation;
  LPWSTR 
unicodeString;
  FWP_BYTE_ARRAY6 
*byteArray6;
  FWP_V4_ADDR_AND_MASK *v4AddrMask;
  FWP_V6_ADDR_AND_MASK *v6AddrMask;
  FWP_RANGE0 
*rangeValue;
 };
} FWP_CONDITION_VALUE0;
Listing 7-8: The FWP_CONDITION_VALUE structure definition
Evading EDR (Early Access) © 2023 by Matt Hand
Network Filter Drivers   133
The FWP_DATA_TYPE value indicates what union member the driver 
should use to evaluate the data. For instance, if the type member is  
FWP _V4_ADDR_MASK, which maps to an IPv4 address, then the v4AddrMask mem-
ber would be accessed.
The match type and condition value members form a discrete filter-
ing requirement when combined. For example, this requirement could be 
“if the destination IP address is 1.1.1.1” or “if the TCP port is greater than 
1024.” What should happen when the condition evaluates as true? To deter-
mine this, we use the action member of the FWPM_FILTER structure. In callout 
drivers that perform firewalling activities, we could choose to permit or 
block traffic based on certain attributes. In the context of security monitor-
ing, however, most developers forward the request to the callout functions 
by specifying the FWP_ACTION_CALLOUT_INSPECTION flag, which passes the request 
to the callout without expecting the callout to make a permit/deny decision 
regarding the connection.
If we combine all three components of the filterCondition member, we 