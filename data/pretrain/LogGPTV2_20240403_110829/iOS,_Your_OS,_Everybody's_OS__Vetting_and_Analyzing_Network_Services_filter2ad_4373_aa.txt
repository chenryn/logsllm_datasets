title:iOS, Your OS, Everybody's OS: Vetting and Analyzing Network Services
of iOS Applications
author:Zhushou Tang and
Ke Tang and
Minhui Xue and
Yuan Tian and
Sen Chen and
Muhammad Ikram and
Tielei Wang and
Haojin Zhu
iOS, Your OS, Everybody’s OS: Vetting and Analyzing 
Network Services of iOS Applications
Zhushou Tang, Shanghai Jiao Tong University and PWNZEN InfoTech Co., LTD; 
Ke Tang, Shanghai Jiao Tong University; Minhui Xue, The University of Adelaide; 
Yuan Tian, University of Virginia; Sen Chen, Nanyang Technological University; 
Muhammad Ikram, Macquarie University; Tielei Wang, PWNZEN InfoTech Co., LTD; 
Haojin Zhu, Shanghai Jiao Tong University
https://www.usenix.org/conference/usenixsecurity20/presentation/tang
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.iOS, Your OS, Everybody’s OS:
Vetting and Analyzing Network Services of iOS Applications
Zhushou Tang1,6 Ke Tang1 Minhui Xue2 Yuan Tian3
Sen Chen4 Muhammad Ikram5 Tielei Wang6 Haojin Zhu1
1Shanghai Jiao Tong University 2The University of Adelaide 3University of Virginia
4Nanyang Technological University 5Macquarie University 6PWNZEN InfoTech Co., LTD
Abstract
Smartphone applications that listen for network connections
introduce signiﬁcant security and privacy threats for users.
In this paper, we focus on vetting and analyzing the secu-
rity of iOS apps’ network services. To this end, we develop
an efﬁcient and scalable iOS app collection tool to down-
load 168,951 iOS apps in the wild. We investigate a set of
1,300 apps to understand the characteristics of network ser-
vice vulnerabilities, conﬁrming 11 vulnerabilities in popular
apps, such as Waze, Now, and QQBrowser. From these vul-
nerabilities, we create signatures for a large-scale analysis
of 168,951 iOS apps, which shows that the use of certain
third-party libraries listening for remote connections is a com-
mon source of vulnerable network services in 92 apps. These
vulnerabilities open up the iOS device to a host of possible
attacks, including data leakage, remote command execution,
and denial-of-service attacks. We have disclosed identiﬁed
vulnerabilities and received acknowledgments from vendors.
1 Introduction
A network service is built on an application programming in-
terface (API) or a library that provides networked data storage,
or other online functionality to applications. Many potential
threats have spawned with the widespread use of smartphones
with network service capabilities. Poor implementation prac-
tices expose users to denial-of-service (DoS) or remote code
execution (RCE) attacks, and unauthorized access can oc-
cur due to the weak protection of network resources. Such
threats have already been substantiated in the real world. One
such example is the DoS or RCE attack against WhatsApp
that can occur when a WhatsApp user accepts a call from a
malicious peer [5, 17]. Another is the “wormhole” vulnera-
bility, where open ports in Android apps allow an attacker to
remotely access data or manipulate apps without sufﬁcient
authorization [51]. Recently, a proof-of-concept DoS attack
that prevents communication between iOS devices has been
demonstrated by utilizing the speciﬁc design ﬂaw of the Apple
Wireless Direct Link (AWDL) protocol [74].
Recent research evaluating the security of open port us-
age in Android apps has demonstrated new attack avenues
that can exploit the vulnerability of network services and
access unauthorized sensitive data previously unthought
of [22, 32, 55, 80]. Some works have also proposed vetting
methodologies to handle dynamic code loading [69], complex
implicit control/data ﬂows [31], or advanced code obfusca-
tion [46, 79], techniques created to overcome the inherent lim-
itations of Android app static analysis. Unfortunately, these
sophisticated and ad hoc vetting approaches only target An-
droid apps.
iOS’s network architecture is built on top of BSD sockets.
When acting as a resource provider, the app turns the iOS
device into a server to provide services to a client once a
connection is established. For example, the Handoff [23]
feature of iPhone serves as a server to receive commands
from a client in the same Wi-Fi network. Apple encourages
network connections between different components through
Bonjour protocol [28, 73], which broadcasts the network
service to clients. Although Apple reviews third-party apps
before releasing them on the iTunes App Store, The vetting
process predominantly focuses on detecting malicious apps
instead of network service vulnerabilities.
In this work, we propose the ﬁrst vetting methodology of
iOS apps’ network services. There are three elements that
make vetting and analyzing iOS apps more technically chal-
lenging than Android apps. (i) Android apps are easy to col-
lect and analyze; however, a public repository of iOS apps
is not readily available due to the closed nature of Apple’s
app ecosystem. (ii) Practical program analysis tools for auto-
matically analyzing iOS apps (implemented in Objective-C
or SWIFT) are not as well developed or diverse as tools for
Android (written in Java) are [26, 45, 77]. (iii) The layout of
code in Android apps is highly structural, but the boundaries
of iOS code are obscure, causing previous methods for third-
party library identiﬁcation in Android apps [27, 48, 76] to
function incorrectly on iOS apps.
USENIX Association
29th USENIX Security Symposium    2415
To ensure the efﬁciency of our pipeline, we tailor our app
collection (cf. § 3), vetting process (cf. § 4), and library iden-
tiﬁcation (cf. § 5) techniques to overcome the unique chal-
lenges presented by iOS apps. First, to collect and analyze
apps, we need to download, decrypt, and parse the executable,
a process that leverages iTunes’ unique download interface
with a special decryption method to expedite app collection.
Our collection methodology can download and decrypt over
5,000 apps per day using only two Apple accounts and two
jailbroken iOS devices, providing better scaling up of tasks
with lower latency than past works [62, 67]. After collection,
we parse the iOS apps, obtain the metadata of apps, and feed
it into a search engine for retrieval and subsequent analy-
sis. Second, to improve the accuracy and efﬁciency of our
vetting results, we write an “addon” which evaluates the net-
work interface on the ﬂy. To expedite the automated analysis,
we leverage an on-demand inter-procedural [70] data-ﬂow
analysis tool to restore the implicit call introduced by the
message dispatch property [24] of Objective-C or SWIFT
runtime. Third, to deal with the obscure documentation of
system and third-party network services, we propose a call
stack based collection method that overcomes the limitations
of the current class-clustering based third-party library identi-
ﬁcation [67]. In our method, we ﬁrst identify system network
service APIs by traveling the call stack of each app; then third-
party network service libraries can be distinguished through
similarity analysis on the runtime call stack.
We begin our analysis with a set of 1,300 applications,
which we refer to as “seed apps”. Seed apps are used to under-
stand the characteristics of network service vulnerabilities and
extract signatures for large-scale analysis of network services.
To analyze the seed apps, we adopt the vetting methodology
of “dynamic ﬁrst, static later, and manual conﬁrmation last”.
The dynamic analysis can check for misconﬁgured network
interfaces on a large scale, which allows us to pinpoint a
small portion of candidate network service apps. The compa-
rably more time-consuming static analysis can then be used
to perform a ﬁne-grained check for potential vulnerabilities.
Finally, manual conﬁrmation is involved in verifying static
analysis results. In addition, the precise call stack of _bind
collected by dynamic analysis can be used for the identiﬁca-
tion of APIs and libraries. Knowledge gained from seed apps
is then applied to the large-scale analysis, including measur-
ing the distribution of network services of iOS apps, ﬁnding
the association of network service libraries, and ﬁne-grained
analysis on three typical libraries. Vetting results show that
vulnerabilities of the network service open up the iOS app to
data leakage, remote command execution, or denial-of-service
attacks (cf. § 7).
Responsible disclosure. We have reported these vulnerable
apps to relevant stakeholders through the Security Response
Center (SRC) of vendors. Three vulnerabilities have been
acknowledged, including Google issue ID: 109708840 and
Tencent issue IDs: 34162 and 23546 (see the list of major
Table 1: Major Vulnerabilities Found.
Vendor
Google
Telenav
Tencent
Alibaba
Alibaba
Apple
Tencent
Amazon
Tencent
WebLink
WebLink
WebLink
Flipps Media
Flipps Media
JD
Tencent
App
Waze
Scout GPS Link
QQBrowser
Taobao4iPhone
Youku
Handoff
Now
Amazon Prime Video
QQSports
KENWOOD
JVC
WebLink Host
Flipps TV
FITE TV
JDRead
QQMail
1 CE: Command Execution.
RCE: Remote Code Execution.
DoS: Denial-of-Service.
Vulnerability Impact
CE/RCE/DoS
CE
CE
CE
CE
RCE/DoS
Privacy Leaks
Privacy Leaks
Privacy Leaks
RCE/DoS
RCE/DoS
CE/RCE/DoS
CE/RCE/DoS
CE/RCE/DoS
Privacy Leaks
Privacy Leaks
Severity (by vendor)
N/A
N/A
High
N/A
N/A
N/A
High
N/A
N/A
N/A
N/A
N/A
N/A
N/A
Medium
N/A
Status
Patched
Pending
Patched
Pending
Pending
Patched
Patched
Pending
Pending
Patched
Patched
Patched
Pending
Pending
Patched
Pending
vulnerabilities found in Table 1). We also helped the vendors
patch these vulnerabilities and are currently discussing possi-
bilities of vendor deployment of our vetting system. To foster
further research, we release the dataset used in this paper and
the code developed for analysis, and encourage readers to
view short video demos of vulnerabilities we discovered at
https://sites.google.com/site/iosappnss/.
The key contributions of this paper are as follows:
• An efﬁcient iOS app collection tool. To facilitate our anal-
ysis, we introduce an iOS app collection tool thanks to
the use of the headless-downloader and executable decryp-
tion. The headless-downloader enables us to download
.ipa ﬁles from iTunes App Store ﬂuently. The executable
decryption we developed does not need to upload large
.ipa ﬁles to iOS devices, install apps, or download en-
tire decrypted .ipa ﬁles from iOS devices. The proposed
downloading enables large-scale dataset collection with
limited iOS devices, and can decrypt over 5,000 apps per
day with only two iOS devices, improving the scalability of
data collection by 17 times compared to the state-of-the-art
collection method in [62]. The collection of such a large
dataset of iOS apps is a signiﬁcant resource and also serves
as a useful benchmark for future research.
• Systematic characterization of network services of iOS
apps. We apply dynamic analysis to collect a call stack
from each app. Based on the call stack information, we ex-
tract system APIs by backward traveling the stack, identify
the third-party network service libraries by comparing the
tokens originated from the stack. By taking signatures of
the network services, we systematically characterize net-
work services in iOS ecosystem, including the prevalent
usage of network services of iOS apps, the distribution of
network services across app categories, and the association
of these network services.
• New vulnerabilities of iOS apps identiﬁed. This is the
ﬁrst work for vetting the security of iOS apps’ network
services. We use dynamic analysis to assess the interface
of the network service and then improve (and implement)
2416    29th USENIX Security Symposium
USENIX Association
Header
Load commands
LC_SEGMENT(__TEXT)
Section Header(__text)
Section Header(__cstring)
Section Header(__objc_classname)
LC_SYMTAB
Data
Symbol Table
String Table
Class Name(__TEXT,__objc_classname)
Code(__TEXT,__text)
Figure 1: The simpliﬁed inner structure of a Mach-O ﬁle.
the state-of-the-art static data-ﬂow analysis tool [49] to
further scrutinize the apps at scale. The vetting process is
performed on 1,300 seed apps, with 11 network service
vulnerabilities conﬁrmed manually, including some top
popular apps, such as Waze, QQBrowser, and Now. By tak-
ing into account three typical third-party network service
libraries integrated by 2,116 apps and case-by-case anal-
ysis, an additional 92 vulnerable apps are discovered. We
cross check the vulnerabilities identiﬁed and ﬁnd none of
these vulnerabilities exist in Android apps.
To the best of our knowledge, this is the ﬁrst paper to sys-
tematically examine the security of network services within
iOS apps on a large scale. The entire vetting methodology
proposed in this paper can serve as a starting point for further
study of this important area.
2 Background and Threat Model
We begin by introducing the structure of iOS apps, deﬁning
the network services of the iOS apps, and presenting the threat
model in this study.
2.1 The Structure of iOS Apps
The iOS app is an archive ﬁle (i.e., .ipa) which stores an
Application Bundle including Info.plist ﬁle, executable,
resource ﬁles, and other support ﬁles. For the sake of dig-
ital rights management (DRM), Apple uses a .supp ﬁle
containing the keys within the .ipa ﬁle to decrypt the ex-
ecutable [78]. The executable in the Application Bundle is
encoded in Mach-O format [68] consisting of three parts:
Header, Load commands, and Data. The Load commands re-
gion of a Mach-O ﬁle contains multiple segments and each
segment speciﬁes a group of sections. Each section within
is parallel, such as the instructions in the __text section,
C string in the __cstring section, and Objective-C class
Figure 2: Architecture of network service, use mistakes, and result-
ing vulnerabilities. Each row represents a possible mistake, which,
according to the network service layer, could lead to serious security
and privacy issues.
Figure 3: Overview of system network service APIs and third-party
network service libraries. The top sub-ﬁgure shows the relation
among different third-party libraries leveraging BSD socket either
directly or via system network service APIs.
object name in the __objc_classname section. In particu-
lar, instructions in the __text section are encoded with the
ARM/THUMB instruction set. The simpliﬁed Mach-O format
ﬁle is depicted in Figure 1.
For security purposes, an iOS app’s interactions with the
ﬁle system are limited to the directories inside the app’s sand-
box directory [42, 43]. During the installation of a new app,
the installer creates a bundle container directory that holds
the Application Bundle, whereas the data container direc-
tory holds runtime generated data of the app. The bundle
container directory and the data container directory reside
in two randomly generated directories. For such design, if the
root folder of a vulnerable network service is set to a bundle
container directory, ﬁles within Application Bundle will be
exposed. The randomly generated directories alleviate the
path traversal threat due to the difﬁculty for the adversary to
predict the data container path.
2.2 Network Services of iOS Apps
A network service is built on an API or a library that pro-
vides networked data storage, or other online functionality to
applications. A bottom-up network service is deﬁned as hav-
ing “open port,” “communication protocol,” “access control,”
and “resources/functionalities” layers (see Figure 2). In the
example of a GPS navigation app, termed Waze [15], the app
generally projects the app’s UI to the vehicle’s screen via USB
connection. In particular, the app integrates the WebLink [16]
USENIX Association
29th USENIX Security Symposium    2417
Vulnerability impactNetwork servicePossible mistakes(M4) Interface misconfiguration(A4) Attack surface exposure(A2) Easily bypass / unauthorized access(A1) Privacy leakage / command executionOpen portCommunication protocol(A3) DoS / RCEAccess controlResources / functionalities(M3) Bugs in the implementation(M2) Weak / no access control(M1) Over resource / functionalitiesThird-party network service libraries System network service APIsCocoa Async SocketGCDWebServerIonic(cid:284)s WebviewPOSIX Layer (BSD sockets)CFSocketSetAddressres_9_query...CocoaHTTPServerPureFTPdTapjoySystemcodeCollecting iOS apps
iTunes App Store
Crawling
DRM protected IPA file
DRM Removing
DRM removed IPA file
Parsing
Metadata
Vetting & Call stack analysis
Large-scale analysis
Parameter 
of _bind
Call stack 
of _bind
Dynamic analysis
Evaluate Candidate apps
Static analysis
LLVM IR
Backward 
Trasverse
System network 
service API
Dataflow analysis
Similarity 
Analysis
Third-party 
network service 
library
Network service 
signature
Network service 
app
Network service 
library
3 typical libraries
Storing
Running
168,951 apps & metadata
Top 1,300 apps
Query
Figure 4: Overview of our system pipeline: (1) the green box shows the iOS app collection methodology (cf. § 3); (2) the red box shows the
methodology for vetting the ﬁrst 1,300 apps by using dynamic and static analysis (cf. § 4) and the call stack analysis for building signatures of
system and third-party network services (cf. § 5); (3) the blue box shows the large-scale analysis on network service APIs/libraries over 168,951
iOS apps (cf. § 6) and a ﬁne-grained analysis of 3 typical libraries; (4) the bottom gray bar includes two datasets of iOS apps for analysis.
library to stream a user’s iPhone screen to the virtual app
screen of the in-vehicle infotainment (IVI) system. Mean-
while, the app receives touch events on the in-vehicle device
to respond to end-user’s actions. In doing so, the WebLink
library in the Waze app turns the app into a server to accept
the connection from the IVI system.
As for the architecture of the network service of iOS apps,
both system and third-party network service libraries are di-
rectly or indirectly built on top of BSD sockets (see Fig-
ure 3). As shown in the dashed, pink box of Figure 3, iOS
wrapped the BSD sockets for developers to facilitate the de-
velopment of network services. For example, the system API
_CFSocketSetAddress [25] in Core Foundation framework
bridges access to BSD sockets. Based on this API, develop-
ers can compose various applications on top of the TCP layer
of the network protocol stack to provide network services.
In addition, many third-party network service libraries are
available for developers to use, as shown in the blue box of
Figure 3. In general, network services provided by the third-
party libraries operate on the application layer of the network
protocol stack.
2.3 Threat Model
Previous works [55, 80] classiﬁed Android network service
adversaries to local, remote, and web adversaries. However,
we do not consider attacks by a hostile app installed locally on
the device (i.e., local adversary) or by enticing the victim to
browse a JavaScript-enabled web page (i.e., web adversary) in
our study. For example, the Libby’s web service demonstrated
in Figure 12(b) falls outside of our scope. This paper focuses
on more practical remote adversaries for vulnerability analysis
because these potential vulnerabilities are of high risk.