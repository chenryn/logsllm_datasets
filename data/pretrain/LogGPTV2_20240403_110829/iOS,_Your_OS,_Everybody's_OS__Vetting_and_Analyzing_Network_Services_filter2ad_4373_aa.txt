# Title: iOS, Your OS, Everybody's OS: Vetting and Analyzing Network Services of iOS Applications

## Authors:
- Zhushou Tang (Shanghai Jiao Tong University and PWNZEN InfoTech Co., LTD)
- Ke Tang (Shanghai Jiao Tong University)
- Minhui Xue (The University of Adelaide)
- Yuan Tian (University of Virginia)
- Sen Chen (Nanyang Technological University)
- Muhammad Ikram (Macquarie University)
- Tielei Wang (PWNZEN InfoTech Co., LTD)
- Haojin Zhu (Shanghai Jiao Tong University)

## Abstract
Smartphone applications that listen for network connections introduce significant security and privacy threats to users. This paper focuses on vetting and analyzing the security of iOS apps' network services. We developed an efficient and scalable iOS app collection tool to download 168,951 iOS apps. By investigating a set of 1,300 apps, we identified and confirmed 11 vulnerabilities in popular apps such as Waze, Now, and QQBrowser. Using these vulnerabilities, we created signatures for a large-scale analysis of 168,951 iOS apps, which revealed that the use of certain third-party libraries listening for remote connections is a common source of vulnerable network services in 92 apps. These vulnerabilities can lead to data leakage, remote command execution, and denial-of-service attacks. We have disclosed the identified vulnerabilities and received acknowledgments from vendors.

## 1. Introduction
A network service is built on an application programming interface (API) or a library that provides networked data storage or other online functionalities to applications. The widespread use of smartphones with network service capabilities has introduced numerous potential threats. Poor implementation practices can expose users to denial-of-service (DoS) or remote code execution (RCE) attacks, and unauthorized access can occur due to weak protection of network resources. For example, WhatsApp has been subject to DoS or RCE attacks when a user accepts a call from a malicious peer [5, 17]. Another example is the "wormhole" vulnerability in Android apps, where open ports allow attackers to remotely access data or manipulate apps without sufficient authorization [51]. Recently, a proof-of-concept DoS attack on iOS devices was demonstrated by exploiting the specific design flaw of the Apple Wireless Direct Link (AWDL) protocol [74].

Recent research evaluating the security of open port usage in Android apps has highlighted new attack avenues that can exploit network service vulnerabilities and access unauthorized sensitive data [22, 32, 55, 80]. Some works have proposed vetting methodologies to handle dynamic code loading [69], complex implicit control/data flows [31], or advanced code obfuscation [46, 79], techniques designed to overcome the inherent limitations of Android app static analysis. However, these sophisticated and ad hoc vetting approaches are primarily focused on Android apps.

iOS’s network architecture is based on BSD sockets. When acting as a resource provider, the app turns the iOS device into a server to provide services to a client once a connection is established. For instance, the Handoff feature of iPhone serves as a server to receive commands from a client in the same Wi-Fi network. Apple encourages network connections between different components through the Bonjour protocol [28, 73], which broadcasts the network service to clients. Although Apple reviews third-party apps before releasing them on the iTunes App Store, the vetting process mainly focuses on detecting malicious apps rather than network service vulnerabilities.

In this work, we propose the first vetting methodology for iOS apps' network services. There are three key challenges in vetting and analyzing iOS apps compared to Android apps:
1. **Collection**: A public repository of iOS apps is not readily available due to the closed nature of Apple’s app ecosystem.
2. **Analysis Tools**: Practical program analysis tools for automatically analyzing iOS apps (implemented in Objective-C or Swift) are less developed and diverse compared to those for Android (written in Java).
3. **Code Layout**: The layout of code in Android apps is highly structural, but the boundaries of iOS code are obscure, making previous methods for third-party library identification in Android apps [27, 48, 76] ineffective for iOS apps.

To address these challenges, we tailored our app collection, vetting process, and library identification techniques. First, we developed a method to download, decrypt, and parse the executable using iTunes’ unique download interface and a special decryption method. Our collection methodology can download and decrypt over 5,000 apps per day using only two Apple accounts and two jailbroken iOS devices, providing better scalability and lower latency than previous works [62, 67]. After collection, we parse the iOS apps, obtain their metadata, and feed it into a search engine for retrieval and subsequent analysis.

Second, to improve the accuracy and efficiency of our vetting results, we developed an "addon" that evaluates the network interface on the fly. We also leveraged an on-demand inter-procedural data-flow analysis tool to restore the implicit call introduced by the message dispatch property of Objective-C or Swift runtime.

Third, to deal with the obscure documentation of system and third-party network services, we proposed a call stack-based collection method that overcomes the limitations of the current class-clustering-based third-party library identification [67]. In our method, we first identify system network service APIs by traveling the call stack of each app; then, third-party network service libraries can be distinguished through similarity analysis on the runtime call stack.

We began our analysis with a set of 1,300 applications, referred to as "seed apps." These seed apps were used to understand the characteristics of network service vulnerabilities and extract signatures for large-scale analysis of network services. To analyze the seed apps, we adopted a vetting methodology of "dynamic first, static later, and manual confirmation last." Dynamic analysis can check for misconfigured network interfaces on a large scale, allowing us to pinpoint a small portion of candidate network service apps. Static analysis, which is more time-consuming, can then be used to perform a fine-grained check for potential vulnerabilities. Finally, manual confirmation is involved in verifying the static analysis results. The precise call stack of `_bind` collected by dynamic analysis can be used for the identification of APIs and libraries. Knowledge gained from seed apps is then applied to the large-scale analysis, including measuring the distribution of network services of iOS apps, finding the association of network service libraries, and performing a fine-grained analysis on three typical libraries.

## Responsible Disclosure
We reported the identified vulnerabilities to relevant stakeholders through the Security Response Center (SRC) of vendors. Three vulnerabilities have been acknowledged, including Google issue ID: 109708840 and Tencent issue IDs: 34162 and 23546 (see Table 1 for a list of major vulnerabilities found). We also assisted vendors in patching these vulnerabilities and are currently discussing the possibility of vendor deployment of our vetting system. To foster further research, we release the dataset used in this paper and the code developed for analysis. Readers are encouraged to view short video demos of the vulnerabilities we discovered at https://sites.google.com/site/iosappnss/.

### Table 1: Major Vulnerabilities Found
| Vendor | App | Vulnerability Impact | Severity (by vendor) | Status |
|--------|-----|----------------------|----------------------|--------|
| Google | Waze | CE/RCE/DoS | N/A | Patched |
| Telenav | Scout GPS Link | CE | N/A | Pending |
| Tencent | QQBrowser | CE | High | Patched |
| Alibaba | Taobao4iPhone | CE | N/A | Pending |
| Youku | Youku | CE | N/A | Pending |
| Apple | Handoff | RCE/DoS | N/A | Patched |
| Tencent | Now | Privacy Leaks | High | Patched |
| Amazon | Amazon Prime Video | Privacy Leaks | N/A | Pending |
| Tencent | QQSports | Privacy Leaks | N/A | Pending |
| WebLink | KENWOOD | RCE/DoS | N/A | Patched |
| JVC | JVC | RCE/DoS | N/A | Patched |
| WebLink Host | WebLink Host | CE/RCE/DoS | N/A | Patched |
| Flipps Media | Flipps TV | CE/RCE/DoS | N/A | Pending |
| FITE TV | FITE TV | CE/RCE/DoS | N/A | Pending |
| JD | JDRead | Privacy Leaks | Medium | Patched |
| Tencent | QQMail | Privacy Leaks | N/A | Pending |

## Key Contributions
- **Efficient iOS App Collection Tool**: We developed an iOS app collection tool that uses a headless-downloader and executable decryption. This tool enables us to download `.ipa` files from the iTunes App Store and decrypt over 5,000 apps per day with only two iOS devices, improving the scalability of data collection by 17 times compared to the state-of-the-art collection method [62].
- **Systematic Characterization of Network Services**: We applied dynamic analysis to collect call stacks from each app and extracted system APIs by backward traveling the stack. We identified third-party network service libraries by comparing tokens from the stack. By taking signatures of the network services, we systematically characterized network services in the iOS ecosystem, including the prevalent usage of network services, the distribution across app categories, and the association of these network services.
- **New Vulnerabilities Identified**: This is the first work to vet the security of iOS apps' network services. We used dynamic analysis to assess the interface of the network service and improved the state-of-the-art static data-flow analysis tool [49] to scrutinize the apps at scale. The vetting process was performed on 1,300 seed apps, confirming 11 network service vulnerabilities, including some top popular apps like Waze, QQBrowser, and Now. An additional 92 vulnerable apps were discovered by analyzing three typical third-party network service libraries integrated by 2,116 apps. We cross-checked the identified vulnerabilities and found none of these vulnerabilities exist in Android apps.

To the best of our knowledge, this is the first paper to systematically examine the security of network services within iOS apps on a large scale. The entire vetting methodology proposed in this paper can serve as a starting point for further study of this important area.

## 2. Background and Threat Model
We begin by introducing the structure of iOS apps, defining the network services of iOS apps, and presenting the threat model in this study.

### 2.1 The Structure of iOS Apps
An iOS app is an archive file (`.ipa`) that stores an Application Bundle, including an `Info.plist` file, an executable, resource files, and other support files. For digital rights management (DRM), Apple uses a `.supp` file containing the keys within the `.ipa` file to decrypt the executable [78]. The executable in the Application Bundle is encoded in Mach-O format [68], consisting of three parts: Header, Load commands, and Data. The Load commands region of a Mach-O file contains multiple segments, each specifying a group of sections. Each section, such as the instructions in the `__text` section, C strings in the `__cstring` section, and Objective-C class object names in the `__objc_classname` section, is parallel. Instructions in the `__text` section are encoded with the ARM/THUMB instruction set. The simplified Mach-O format file is depicted in Figure 1.

For security purposes, an iOS app’s interactions with the file system are limited to the directories inside the app’s sandbox directory [42, 43]. During the installation of a new app, the installer creates a bundle container directory that holds the Application Bundle, while the data container directory holds runtime-generated data of the app. The bundle container directory and the data container directory reside in two randomly generated directories. This design mitigates path traversal threats because it is difficult for an adversary to predict the data container path.

### 2.2 Network Services of iOS Apps
A network service is built on an API or a library that provides networked data storage or other online functionalities to applications. A bottom-up network service is defined as having "open port," "communication protocol," "access control," and "resources/functionalities" layers (see Figure 2). For example, the GPS navigation app Waze [15] projects the app’s UI to the vehicle’s screen via USB connection. The app integrates the WebLink [16] library to stream the user’s iPhone screen to the virtual app screen of the in-vehicle infotainment (IVI) system. The WebLink library in the Waze app turns the app into a server to accept the connection from the IVI system.

As for the architecture of the network service of iOS apps, both system and third-party network service libraries are directly or indirectly built on top of BSD sockets (see Figure 3). iOS wraps the BSD sockets for developers to facilitate the development of network services. For example, the system API `_CFSocketSetAddress` [25] in the Core Foundation framework bridges access to BSD sockets. Based on this API, developers can compose various applications on top of the TCP layer of the network protocol stack to provide network services. Additionally, many third-party network service libraries are available for developers to use, as shown in the blue box of Figure 3. Generally, network services provided by third-party libraries operate on the application layer of the network protocol stack.

### 2.3 Threat Model
Previous works [55, 80] classified Android network service adversaries into local, remote, and web adversaries. However, we do not consider attacks by a hostile app installed locally on the device (i.e., local adversary) or by enticing the victim to browse a JavaScript-enabled web page (i.e., web adversary) in our study. For example, the Libby’s web service demonstrated in Figure 12(b) falls outside of our scope. This paper focuses on more practical remote adversaries for vulnerability analysis because these potential vulnerabilities pose a high risk.