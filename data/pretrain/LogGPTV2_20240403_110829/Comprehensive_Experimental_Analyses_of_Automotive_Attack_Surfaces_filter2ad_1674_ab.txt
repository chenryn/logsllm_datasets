toring System (TPMS) to alert drivers about under or over
inﬂated tires. The most common form of such systems, so-
called “Direct TPMS,” uses rotating sensors that transmit
digital telemetry (frequently in similar bands as RKEs).
RFID car keys. RFID-based vehicle immobilizers
are now nearly ubiquitous in modern automobiles and
are mandatory in many countries throughout the world.
These systems embed an RFID tag in a key or key fob
and a reader in or near the car’s steering column. These
systems can prevent the car from operating unless the
correct key (as veriﬁed by the presence of the correct
RFID tag) is present.
Emerging short-range channels. A number of manu-
facturers have started to discuss providing 802.11 WiFi
access in their automobiles, typically to provide “hotspot”
Internet access via bridging to a cellular 3G data link.
In particular, Ford offers this capability in the 2012
Ford Focus. (Several 2011 models also provided WiFi
receivers, but we understand they were used primarily
for assembly line programming.)
Finally, while not currently deployed, an emerging
wireless channel is deﬁned in the Dedicated Short-Range
Communications (DSRC) standard, which is being
incorporated into proposed standards for Cooperative
Collision Warning/Avoidance and Cooperative Cruise
Control. Representative programs in the U.S. include the
Department of Transportation’s Cooperative Intersection
Collision Avoidance Systems (CICAS-V) and the Vehicle
Safety Communications Consortium’s VSC-A project.
In such systems, forward vehicles communicate digitally
to trailing cars to inform them of sudden changes in
acceleration to support improved collision avoidance and
harm reduction.
Summary. For all of these channels, if a vulnerability ex-
ists in the ECU software responsible for parsing channel
messages, then an adversary may compromise the ECU
(and by extension the entire vehicle) simply by transmit-
ting a malicious input within the automobile’s vicinity.
3.3 Long-range wireless
Finally, automobiles increasingly include long distance
(greater than 1 km) digital access channels as well. These
tend to fall into two categories: broadcast channels and
addressable channels.
Broadcast channels. Broadcast channels are chan-
nels that are not speciﬁcally directed towards a given
automobile but can be “tuned into” by receivers on-
In addition to being part of the external at-
demand.
tack surface,
long-range broadcast mediums can be
appealing as control channels (i.e., for triggering at-
tacks) because they are difﬁcult to attribute, can com-
mand multiple receivers at once, and do not require
attackers to obtain precise addressing for their vic-
tims.
The modern automobile includes a plethora of broad-
cast receivers for long-range signals: Global Positioning
System (GPS),3 Satellite Radio (e.g., SiriusXM receivers
common to late-model vehicles from Honda/Accura, GM,
Toyota, Saab, Ford, Kia, BMW and Audi), Digital Radio
(including the U.S. HD Radio system, standard on 2011
Ford and Volvo models, and Europe’s DAB offered in
Ford, Audi, Mercedes, Volvo and Toyota among others),
and the Radio Data System (RDS) and Trafﬁc Message
Channel (TMC) signals transmitted as digital subcarriers
on existing FM-bands.
The range of such signals depends on transmitter
power, modulation, terrain, and interference. As an
example, a 5 W RDS transmitter can be expected to
deliver its 1.2 kbps signal reliably over distances up
to 10 km. In general, these channels are implemented in
an automobile’s media system (radio, CD player, satellite
receiver) which, as mentioned previously, frequently
provides access via internal automotive networks to other
key automotive ECUs.
Addressable channels. Perhaps the most important part
of the long-range wireless attack surface is that exposed
by the remote telematics systems (e.g., Ford’s Sync,
GM’s OnStar, Toyota’s SafetyConnect, Lexus’ Enform,
BMW’s BMW Assist, and Mercedes-Benz’ mbrace) that
provide continuous connectivity via cellular voice and
data networks. These systems provide a broad range of
features supporting safety (crash reporting), diagnostics
(early alert of mechanical issues), anti-theft (remote track
and disable), and convenience (hands-free data access
such as driving directions or weather).
These cellular channels offer many advantages for
attackers. They can be accessed over arbitrary distance
(due to the wide coverage of cellular data infrastructure)
in a largely anonymous fashion, typically have relatively
high bandwidth, are two-way channels (supporting inter-
active control and data exﬁltration), and are individually
addressable.
Stepping back. There is a signiﬁcant knowledge gap
between these possible threats and what is known to
date about automotive security. Given this knowledge
gap, much of this threat model may seem far-fetched.
However, in the next section of this paper we ﬁnd quite
the opposite. For each category of access vector we
will explore one or two aspects of the attack surface
deeply, identify concrete vulnerabilities, and explore and
demonstrate practical attacks that are able to completely
compromise our target automobile’s systems without
requiring direct physical access.
4 Vulnerability Analysis
We now turn to our experimental exploration of the
attack surface. We ﬁrst describe the automobile and
key components under evaluation and provide some
context for the tools and methods we employed. We then
explore in-depth examples of vulnerabilities via indirect
physical channels (CDs and service visits), short-range
wireless channels (Bluetooth), and long-range wireless
(cellular). Table 1 summarizes these results as well as our
qualitative assessment of the cost (in effort) to discover
and exploit these vulnerabilities.
4.1 Experimental context
All of our experimental work focuses on a moderately
priced late model sedan with the standard options and
components. Between 100,000 and 200,000 of this
model were produced in the year of manufacture. The
car includes less than 30 ECUs comprising both critical
drivetrain components as well as less critical components
such as windshield wipers, door locks and entertainment
functions. These ECUs are interconnected via multiple
CAN buses, bridged where necessary. The car exposes
a number of external vectors including the OBD-II port,
media player, Bluetooth, wireless TPMS sensors, keyless
entry, satellite radio, RDS, and a telematics unit. The
last provides voice and data access via cellular networks,
connects to all CAN buses, and has access to Bluetooth,
GPS and independent hands-free audio functionality (via
an embedded microphone in the passenger cabin). We
also obtained the manufacturer’s standard “PassThru”
device used by dealerships and service stations for
ECU diagnosis and reprogramming, as well as the
associated programming software. For several ECUs,
notably the media and telematics units, we purchased a
number of identical replacement units via on-line markets
to accommodate the inevitable “bricking” caused by
imperfect attempts at code injection.
Building on our previous work, we ﬁrst established
a set of messages and signals that could be sent on our
car’s CAN bus (via OBD-II) to control key components
(e.g., lights, locks, brakes, and engine) as well as injecting
code into key ECUs to insert persistent capabilities and to
bridge across multiple CAN buses [14]. Note, such inter-
bus bridging is critical to many of the attacks we explore
since it exposes the attack surface of one set of compo-
nents to components on a separate bus; we explain brieﬂy
here. Most vehicles implement multiple buses, each of
which host a subset of the ECUs.4 However, for func-
3We do not currently consider GPS to be a practical access vector
for an attacker because in all automotive implementations we are aware
of, GPS signals are processed predominantly in custom hardware. By
contrast, we have identiﬁed signiﬁcant software-based input processing
in other long-range wireless receivers.
4In prior work we hypothesized that CAN buses were purposely
separated for security reasons — one for safety-critical components like
the radio and engine and the other for less important components such
as a radio. Based on discussions with industry experts we have learned
that this separation has until now often been driven by bandwidth and
integration concerns and not necessarily security.
Vulnerability
Class
Direct physical
Channel
OBD-II port
Indirect physical
Short-range
wireless
Long-range
wireless
CD
CD
PassThru
PassThru
Bluetooth
Bluetooth
Cellular
Cellular
Implemented
Capability
Plug attack hardware directly into car
OBD-II port
CD-based ﬁrmware update
Special song (WMA)
WiFi or wired control connection to
advertised PassThru devices
WiFi or wired shell injection
Buffer overﬂow with paired Android
phone and Trojan app
Sniff MAC address, brute force PIN,
buffer overﬂow
Call car, authentication exploit, buffer
overﬂow (using laptop)
Call car, authentication exploit, buffer
overﬂow (using iPod with exploit au-
dio ﬁle, earphones, and a telephone)
Visible
to User
Yes
Scale
Small
Full
Control
Yes
Cost
Low
Section
Prior work [14]
Yes
Yes∗
No
No
No
No
No
No
Yes
Small
Medium Yes
Small
Yes
Viral
Large
Small
Large
Large
Yes
Yes
Yes
Yes
Yes
Medium
Medium-High
Low
Low
Section 4.2
Section 4.2
Section 4.2
Section 4.2
Low-Medium
Section 4.3
Low-Medium
Section 4.3
Medium-High
Section 4.4
Medium-High
Section 4.4
Table 1: Attack surface capabilities. The Visible to User column indicates whether the compromise process is visible to the
user (the driver or the technician); we discuss social engineering attacks for navigating user detection in the body. For (∗),
users will perceive a malfunctioning CD. The Scale column captures the approximate scale of the attack, e.g., the CD ﬁrmware
update attack is small-scale because it requires distributing a CD to each target car. The Full Control column indicates whether
this exploit yields full control over the component’s connected CAN bus (and, by transitivity, all the ECUs in the car). Finally,
the Cost column captures the approximate effort to develop these attack capabilities.
tionality reasons these buses must be interconnected to
support the complex coupling between pairs of ECUs and
thus a small number of ECUs are physically connected to
multiple buses and act as logical bridges. Consequently,
by modifying the “bridge” ECUs (either via a vulnerabil-
ity or simply by reﬂashing them over the CAN bus as they
are designed to be) an attacker can amplify an attack on
one bus to gain access to components on another. Con-
sequently, the result is that compromising any ECU with
access to some CAN bus on our vehicle (e.g., the media
player) is sufﬁcient to compromise the entire vehicle.
Combining these ECU control and bridging com-
ponents, we constructed a general “payload” that we
attempted to deliver in our subsequent experiments
with the external attack surface.5 To be clear, for every
vulnerability we demonstrate, we are able to obtain
complete control over the vehicle’s systems. We did
not explore weaker attacks.
For each ECU we consider, our experimental approach
was to extract its ﬁrmware and then explicitly reverse
engineering its I/O code and data ﬂow using disassembly,
interactive logging and debugging tools where appropri-
ate. In most cases, extracting the ﬁrmware was possible
directly via the CAN bus (this was especially convenient
because in most ECUs we encountered, the ﬂash chips
are not socketed and while we were able to desolder and
read such chips directly, the process was quite painful).
Having the ﬁrmware in hand, we performed three basic
types of analysis: raw code analysis, in situ observations,
5In this work we experimented with two equivalent vehicles to ensure
that our results were not tied to artifacts of a particular vehicle instance.
and interactive debugging with controlled inputs on the
bench. In the ﬁrst case, we identiﬁed the microprocessor
(e.g., different components described in this paper use
System on Chip (SoC) variants of the PowerPC, ARM,
Super-H and other architectures) and used the industry-
standard IDA Pro disassembler to map control ﬂow and
identify potential vulnerabilities, as well as debugging
and logging options that could be enabled to aid in
reverse engineering.6 In situ observation with logging
enabled allowed us to understand normal operation of the
ECU and let us concentrate on potential vulnerabilities
near commonly used code paths. Finally, ECUs were
removed from the car and placed into a test harness on the
bench from which we could carefully control all inputs
and monitor outputs.
In this environment, interactive
debuggers were used to examine memory and single step
through vulnerable code under repeatable conditions. For
one such device, the Super-H-based media player, we
resorted to writing our own native debugger and exported
a control and output interface through an unused serial
UART interface we “broke out” off the circuit board.
In general, we made use of any native debugging I/O
we could identify. For example, like the media player,
the telematics unit exposed an unused UART that we
tapped to monitor internal debugging messages as we
interactively probed its I/O channels. In other cases, we
6IDA Pro does not support embedded architectures as well as x86
and consequently we needed to modify IDA Pro to correctly parse
the full instruction set and object format of the target system. In one
particular case (for the TPMS processor) IDA Pro did not provide any
native support and we were forced to write a complete architecture
module in order to use the tool.
selectively rewrote ECU memory (via the CAN bus or by
exploiting software vulnerabilities) or rewrote portions
of the ﬂash chips using the manufacturer-standard ECU
programming tools. For the telematics unit, we wrote
a new character driver that exported a command shell
to its Unix-like operating system directly over the OBD-
II port to enable interactive debugging in a live vehicle.
In the end, our experience was that although the ECU
environment was somewhat more challenging than that
of desktop operating systems, it was surmountable with
dedicated effort.
Indirect physical channels
4.2
We consider two distinct indirect physical vectors in
detail: the media player (via the CD player) and service
access to the OBD-II port. We describe each in turn
along with examples of when an adversary might be able
to deliver malicious input.
Media player. The media player in our car is fairly
typical, receiving a variety of wireless broadcast signals,
including analog AM and FM as well as digital signals
via FM sub-carriers (RDS, called RBDS in the U.S.) and
satellite radio. The media player also accepts standard
compact discs (via physical insertion) and decodes audio
encoded in a number of formats including raw Red Book
audio as well as MP3 and WMA ﬁles encoded on an
ISO 9660 ﬁlesystem.
The media player unit itself is manufactured by a
major supplier of entertainment systems, both stock units
directly targeted for automobile manufacturers as well
as branded systems sold via the aftermarket. Software
running on the CPU handles audio parsing and playback
requests, UI functions, and directly handles connections
to the CAN bus.