demo=> CREATE TYPE float8_range AS RANGE
(subtype = float8, subtype_diff = float8mi);
For more information on PostgreSQL Range Types:
https://www.postgresql.org/docs/9.6/static/rangetypes.html
• Base Types
These types are the system core types (abstract types) and are implemented in a low-level language
such as C.
• Array Types
Support definition of columns as multidimensional arrays. An array column can be created with a
built-in type or a user-defined base type, enum type, or composite.
demo=> CREATE TABLE COURSE_SCHEDULE (
COURSE_ID NUMERIC PRIMARY KEY,
COURSE_NAME VARCHAR(60),
COURSE_SCHEDULES text[]);
For additional details:
https://www.postgresql.org/docs/9.1/static/arrays.html
137
PostgreSQL Synopsis
CREATE TYPE
CREATE TYPE name AS RANGE (
SUBTYPE = subtype
[ , SUBTYPE_OPCLASS = subtype_operator_class ]
[ , COLLATION = collation ]
[ , CANONICAL = canonical_function ]
[ , SUB TYPE_DIFF = subtype_diff_function ]
)
CREATE TYPE name (
INPUT = input_function,
OUTPUT = output_function
[ , RECEIVE = receive_function ]
[ , SEND = send_function ]
[ , TYPMOD_IN = type_modifier_input_function ]
[ , TYP MOD_OUT = type_modifier_output_function ]
[ , ANALYZE = analyze_function ]
[ , INTERNALLENGTH = { internallength | VARIABLE } ]
[ , PASSEDBYVALUE ]
[ , ALI GNMENT = alignment ]
[ , STO RAGE = storage ]
[ , LIKE = like_type ]
[ , CATEGORY = category ]
[ , PRE FERRED = preferred ]
[ , DEF AULT = default ]
[ , ELEMENT = element ]
[ , DELIMITER = delimiter ]
[ , COLLATABLE = collatable ]
)
PostgreSQL syntax differences from Oracle’s Statement:
CREATE TYPE
• PostgreSQL does not support: .
CREATE OR REPLACE TYPE
• PostgreSQL does not accept: .
AS OBJECT
138
Examples
1. Create a User Define Type as a dedicated type for storing an employee phone number:
demo=> CREA TE TYPE EMP_PHONE_NUM AS (
PHONE_NUM VARCHAR(11));
demo=> CREA TE TABLE EMPLOYEES (
EMP _ID NUMERIC PRIMARY KEY,
EMP_PHONE EMP_PHONE_NUM NOT NULL);
demo=> INSERT INTO EMPLOYEES VALUES(1, ROW('111-222-333'));
demo=> SELECT a.EMP_ID, (a.EMP_PHONE).PHONE_NUM FROM EMPLOYEES a;
emp_id | phone_num
--------+-------------
1 | 111-222-333
(1 row)
2. Create a PostgreSQL Object Type as a collection of Attributes for the employees table:
demo=> CREATE OR REPLACE TYPE EMP_ADDRESS AS OBJECT (
STATE VARCHAR(2),
CITY VARCHAR(20),
STR EET VARCHAR(20),
ZIP _CODE NUMERIC);
demo=> CREATE TABLE EMPLOYEES (
EMP _ID NUMERIC PRIMARY KEY,
EMP _NAME VARCHAR(10) NOT NULL,
EMP_ADDRESS EMP_ADDRESS NOT NULL);
demo=> INSERT INTO EMPLOYEES
VAL UES(1, 'John Smith',
('A L', 'Gulf Shores', '3033 Joyce Street', '36542'));
demo=> SELECT a.EMP_NAME,
(a.EMP_ADDRESS).STATE,
(a.EMP_ADDRESS).CITY,
(a.EMP_ADDRESS).STREET,
(a.EMP_ADDRESS).ZIP_CODE
For additional information on PostgreSQL User Defined Types:
FROM EMPLOYEES a;
emp _name | state | city | street | zip_code
------------+-------+-------------+-------------------+----------
John Smith | AL | Gulf Shores | 3033 Joyce Street | 36542
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-createtype.html
https://www.postgresql.org/docs/9.6/static/rowtypes.htm
139
Migrating from: Oracle Read-Only Tables & Partitions
[Back to TOC]
Overview
Beginning with Oracle 11g, tables can be marked as “read-only”, which prevents DML operations from altering
table data.
Prior to Oracle 11g, the only way to set a table to “read only” mode was by limiting table privileges to
. The table owner was still able to perform read and write operations. Starting with Oracle 11g, users
SELECT
can execute an statement and change the table mode to either or
ALTER TABALE READ ONLY READ
.
WRITE
Oracle 12c Release 2 introduces greater granularity for read-only objects and supports “read only” table
partitions. Any attempt to perform a DML operation on a partition, or sub-partition, set to in
READ ONLY
Oracle 12.2 results in an error.
Notes:
• statements are not allowed.
SELECT FOR UPDATE
• DDL operations are permitted if they do not modify table data.
• Operations on indexes are allowed on tables set to READ ONLY mode.
Example
Oracle and Modes:
READ ONLY READ WRITE
SQL> CREATE TABLE EMP_READ_ONLY (
EMP_I D NUMBER PRIMARY KEY,
EMP_F ULL_NAME VARCHAR2(60) NOT NULL);
SQL> INSERT INTO EMP_READ_ONLY VALUES(1, 'John Smith');
1 row created
SQL> ALTER TABLE EMP_READ_ONLY READ ONLY;
SQL> INSERT INTO EMP_READ_ONLY VALUES(2, 'Steven King');
ORA-12081: update operation not allowed on table "SCT"."TBL_READ_ONLY"
SQL> ALTER TABLE EMP_READ_ONLY READ WRITE;
SQL> INSERT INTO EMP_READ_ONLY VALUES(2, 'Steven King');
1 row creat ed
SQL> COMMIT;
SQL> SELECT * FROM EMP_READ_ONLY;
EMP_ID EMP_FULL_NAME
---------- --------------------
1 John Smith
2 Steven King
140
For additional details:
https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_3001.htm
http://docs.oracle.com/database/121/SQLRF/statements_3001.htm
https://docs.oracle.com/database/122/VLDBG/release-changes.htm#GUID-387B86B7-DBE7-440D-9BCA-E5469E7AE88B__READ-ONLYPARTITIONS-
5B55A563
141
Migration to: PostgreSQL “Read Only” Roles/DB/Triggers
[Back to TOC]
Overview
PostgreSQL does not provide an equivalent to the READ ONLY mode supported in Oracle.
The following alternatives could be used as workarounds:
• “Read-only” User or Role.
• “Read-only” database.
• Creating a “read-only” database trigger or a using a “read-only” constraint.
PostgreSQL “read-only” User or Role
To achieve some degree of protection from unwanted DML operations on table for a specific Database User,
you can grant the user only the privilege on the table and set the user
SELECT
parameter to .
default_transaction_read_only ON
Example
Create a PostgreSQL User with privileges:
READ ONLY
demo=> CREATE TABLE EMP_READ_ONLY (
EMP_ID NUMERIC PRIMARY KEY,
EMP_FULL_NAME VARCHAR(60) NOT NULL);
demo=> CREA TE USER aws_readonly PASSWORD 'aws_readonly';
CREATE ROLE
demo=> ALTE R USER aws_readonly SET DEFAULT_TRANSACTION_READ_ONLY=ON;
ALTER ROLE
demo=> GRANT SELECT ON EMP_READ_ONLY TO aws_readonly;
GRANT
-- O pen a new session with user “aws_readonly”
demo=> SELE CT * FROM EMP_READ_ONLY;
emp_id | emp_full_name
--------+-- -------------
(0 rows)
demo=> INSERT INTO EMP_READ_ONLY VALUES(1, 'John Smith');
ERROR: can not execute INSERT in a read-only transaction
142
PostgreSQL “read-only” database
As an alternative solution for restricting write operations on database objects, a dedicated “read-only”
PostgreSQL database can be created to store all “read-only” tables. PostgreSQL supports multiple databases
under the same database instance. Adding a dedicated “read-only” database is a simple and straightforward
solution.
• Set the to for a database. If a session attempts to
DEFAULT_TRANSACTION_READ_ONLY ON
perform DDL or DML operations, and error will be raised.
• The database can be altered back to mode when the parameter is set to “ ”.
READ WRITE OFF
Example
Create a PostgreSQL database:
READ ONLY
demo=> CREATE DATABASE readonly_db;
CREATE DATABASE
demo=> ALTER DATABASE readonly_db SET DEFAULT_TRANSACTION_READ_ONLY=ON;
ALTER DATABASE
-- Open a new session connected to the “readonly_db” database
demo=> CREATE TABLE EMP_READ_ONLY (
EMP_ID NUMERIC PRIMARY KEY,
EMP_FULL_NAME VARCHAR(60) NOT NULL);
ERROR: cannot execute CREATE TABLE in a read-only transaction
-- In case of an existing table
demo=> INSERT INTO EMP_READ_ONLY VALUES(1, 'John Smith');
ERROR: cannot execute INSERT in a read-only transaction
“Read-only” Database Trigger
An trigger can by created to prevent data modifications on a specific table, such as restricting
INSTEAD OF
and
INSERT, UPDATE, DELETE TRUNCATE.
Example
1. Create PostgreSQL function which contains the logic for restricting to “read-only” operations:
demo=> CREATE OR REPLACE FUNCTION READONLY_TRIGGER_FUNCTION()
RETURNS
TRIGGER AS $$
BEGIN
RAISE EXCEPTION 'THE "%" TABLE IS READ ONLY!',
TG_TABLE_NAME using hint = 'Operation Ignored';
RETURN NULL;
END;
$$ language 'plpgsql';
143
2. Create a trigger which will execute the function that was previously created:
demo=> CREATE TRIGGER EMP_READONLY_TRIGGER
BEFORE INSERT OR UPDATE OR DELETE OR TRUNCATE
ON EMP_READ_ONLY FOR EACH STATEMENT
EXECUTE PROCEDURE READONLY TRIGGER FUNCTION();
3. Test DML & truncate commands against the table with the new trigger:
demo=> INSERT INTO EMP_READ_ONLY VALUES(1, 'John Smith');
ERROR: THE "EMP_READ_ONLY" TABLE IS READ ONLY!
HINT: Operation Ignored
CONTEXT: PL/pgSQL function readonly_trigger_function() line 3 at
RAISE
demo>= TRUNCATE TABLE SRC;
ERROR: THE " EMP_READ_ONLY" TABLE IS READ ONLY!
HINT: Operation Ignored
CONTEXT: PL/pgSQL function readonly_trigger_function() line 3 at
RAISE
For additional details:
https://www.postgresql.org/docs/9.6/static/ddl-priv.html
https://www.postgresql.org/docs/9.6/static/sql-grant.html
https://www.postgresql.org/docs/9.6/static/runtime-config-client.html
144
Migration to: PostgreSQL Indexes
[Back to TOC]
Overview
PostgreSQL supports multiple types of Indexes using different indexing algorithms that can provide
performance benefits for different types of queries. The built-in PostgreSQL Index types include:
• B-Tree
Default indexes that can be used for equality and range for the majority of queries.
These indexes can operate against all datatypes and can be used to retrieve NULL values.
B-Tree index values are sorted in ascending order by default.
• Hash
Hash Indexes are practical for equality operators. These types of indexes are rarely used because they
are not transaction-safe. They need to be rebuilt manually in case of failures.
• GIN (Generalized Inverted Indexes)
GIN indexes are useful when an index needs to map a large amount of values to one row, while B-Tree
indexes are optimized for cases when a row has a single key value. GIN indexes work well for indexing
full-text search and for indexing array values.
• GiST (Generalized Search Tree)
GiST indexes are not viewed as a single type of index but rather as an index infrastructure; a base to
create different indexing strategies. GiST indexes enable building general B-Tree structures that can be
used for operations more complex than equality and range comparisons. They are mainly used to
create indexes for geometric data types and they support full-text search indexing.
• BRIN (Block Range Indexes)
BRIN Indexes store summary data for values stored in sequential physical table block ranges. A BRIN
index contains only the minimum and maximum values contained in a group of database pages. Its
main advantage is that it can rule out the presence of certain records and therefore reduce query run
time.
Additional PostgreSQL indexes (such as SP-GiST) exist but are currently not supported because they require a
loadable extension not currently available in Amazon Aurora PostgreSQL.
145
PostgreSQL CREATE INDEX Synopsis
CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ [ IF NOT EXISTS ] name ]
ON table_name [ USING method ]
( { column_name | ( expression ) } [ COLLATE collation ] [ opclass ]
[ ASC | DESC ] [ NULLS { FIRST | LAST } ] [, ...] )
[ WITH ( storage_parameter = value [, ... ] ) ]
[ TABLESPACE tablespace_name ]
[ WHERE predicate ]
By default, the statement creates a B-Tree index.
CREATE INDEX
Examples
Oracle CREATE/DROP Index:
SQL> CREATE UNIQUE INDEX IDX_EMP_ID ON EMPLOYEES (EMPLOYEE_ID DESC);
SQL> DROP INDEX IDX_EMP_ID;
PostgreSQL CREATE/DROP Index:
demo=> CREATE UNIQUE INDEX IDX_EMP_ID ON EMPLOYEES (EMPLOYEE_ID DESC);
demo=> DROP INDEX IDX_EMP_ID;
Oracle ALTER INDEX - RENAME:
SQL> ALTER INDEX IDX_EMP_ID RENAME TO IDX_EMP_ID_OLD;
PostgreSQL ALTER INDEX - RENAME:
demo=> ALTER INDEX IDX_EMP_ID RENAME TO IDX_EMP_ID_OLD;
Oracle ALTER INDEX - TABLESPACE:
SQL> ALTER INDEX IDX_EMP_ID REBUILD TABLESPACE USER_IDX;
PostgreSQL ALTER INDEX - TABLESPACE:
demo=> CREATE TABLESPACE PGIDX LOCATION '/data/indexes';
demo=> ALTER INDEX IDX_EMP_ID SET TABLESPACE PGIDX;
Oracle REBUILD INDEX:
SQL> ALTER INDEX IDX_EMP_ID REBUILD;
PostgreSQL REINDEX (REBUILD) INDEX:
demo=> REINDEX INDEX IDX_EMP_ID;
146
Oracle REBUILD INDEX ONLINE:
SQL> ALTER INDEX IDX_EMP_ID REBUILD ONLINE;
PostgreSQL REINDEX (REBUILD) INDEX ONLINE:
demo=> CREATE INDEX CONCURRENTLY IDX_EMP_ID1 ON EMPLOYEES(EMPLOYEE_ID);
demo=> DROP INDEX CONCURRENTLY IDX_EMP_ID;
For additional information on PostgreSQL Indexes:
https://www.postgresql.org/docs/9.6/static/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY
https://www.postgresql.org/docs/9.6/static/sql-alterindex.html
https://www.postgresql.org/docs/current/static/sql-reindex.html
Oracle vs. PostgreSQL Indexes
Oracle Indexes Types / Features PostgreSQL Compatibility PostgreSQL Equivalent
B-Tree Index Supported B-Tree Index
Index-Organized Tables Supported PostgreSQL
CLUSTER
Reverse key indexes Not supported -
Descending indexes Supported ASC (default) / DESC
B-tree cluster indexes Not supported -
Unique / non-unique Indexes Supported Syntax is identical
Function-Based Indexes Supported PostgreSQL Expression
Indexes
Application Domain indexes Not supported -
BITMAP Index / Bitmap Join Indexes Not supported Consider BRIN index*
Composite Indexes Supported Multicolumn Indexes
Invisible Indexes Not supported Extension “hypopg” is not
currently supported*
Local and Global Indexes Not supported -
Partial Indexes for Partitioned Tables (Oracle Not supported -
12c)
CREATE INDEX… / DROP INDEX… Supported High percentage of syntax
similarity
(General Definitions) Supported -
ALTER INDEX…
ALTER INDEX… REBUILD Supported REINDEX
ALTER INDEX… REBUILD ONLINE Limited support CONCURRENTLY
Index Metadata PG_INDEXES -
(Oracle )
USER_INDEXES
Index Tablespace Allocation Supported SET TABLESPACE
Index Parallel Operations Not supported -
Index Compression Not direct equivalent to Oracle -
index key compression or advanced
index compression
147
Migrating from: Oracle B-Tree Indexes
[Back to TOC]
Overview
B-Tree indexes (“B” stands for balanced), are the most common index type in Relational Database and are
used for a variety of common query performance enhancing tasks. B-Tree indexes can be defined as an
ordered list of values divided into ranges. They provide superior performance by associating a key with a row
or range of rows.
B-Tree indexes contain two types of blocks: branch blocks for searching and leaf blocks for storing values. The
branch blocks also contain the root branch, which points to lower-level index blocks in the B-Tree index
structure.
B-Tree indexes are useful for Primary Keys and other high-cardinality columns. They provide excellent data
access performance for a variety of query patterns such as exact match searches and range searches. B-Tree
indexes serve as the default index type when creating a new index.
Example
Creating an Oracle B-Tree Index:
SQL> CREATE INDEX IDX_EVENT_ID ON SYSTEM_LOG(EVENT_ID);
For additional details:
https://docs.oracle.com/cd/E11882_01/server.112/e40540/indexiot.htm#CNCPT721
148
Migration to: PostgreSQL B-Tree Indexes
[Back to TOC]
Overview
When creating an Index in PostgreSQL, a B-Tree Index is created by default, similarly to the behavior in the
Oracle Database. PostgreSQL B-Tree indexes have the same characteristics as Oracle and these types of
indexes can handle equality and range queries on data. The PostgreSQL optimizer considers using B-Tree
indexes especially when using one or more of the following operators in queries:
>, >=,  CREATE INDEX IDX_EVENT_ID ON SYSTEM_LOG(EVENT_ID);
OR
demo=> CREATE INDEX IDX_EVENT_ID1 ON SYSTEM_LOG USING BTREE (EVENT_ID);
149
Migrating from: Oracle Composite Indexes
[Back to TOC]
Overview
An index that is created on multiple table columns is known as a multi-column, concatenated or Composite
Index. The main purpose of these indexes is to improve the performance of data retrieval for
SELECT
statements when filtering on all or some of the Composite Index columns. When using Composite Indexes, it is
beneficial to place the most restrictive columns at the first position of the index to improve query
performance. Column placement order is crucial when using Composite Indexes as the most prevalent
columns are accessed first.
Example
Create a Composite Index on the table:
HR.EMPLOYEES
CREATE INDEX IDX_EMP_COMPI
ON EMPLOYEES (FIRST_NAME, EMAIL, PHONE_NUMBER);
Drop a Composite Index:
DROP INDEX IDX_EMP_COMPI;
For additional details:
https://docs.oracle.com/cd/B28359_01/server.111/b28274/data_acc.htm#i2773
https://docs.oracle.com/database/121/CNCPT/indexiot.htm#CNCPT88833
150
Migration to: PostgreSQL Multi-Column Indexes
[Back to TOC]
Overview
PostgreSQL Multi-Column Indexes are similar to Oracle Composite Indexes.
• Currently, only B-tree, GiST, GIN, and BRIN support Multi-Column Indexes.
• 32 columns can be specified when creating a Multi-Column Index.
PostgreSQL uses the exact same syntax as Oracle to create Multi-Column Indexes.
Example
Create a Multi-Column Index on the table:
EMPLOYEES
CREATE INDEX IDX_EMP_COMPI
ON EMPLOYEES (FIRST_NAME, EMAIL, PHONE_NUMBER);
Drop a Multi-Column Index:
DROP INDEX IDX_EMP_COMPI;
For additional details: