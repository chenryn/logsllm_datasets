Right now while using decorators the javascript seems to work, but the types
are too strict.
As you can see here the following does not compile:
    declare var _: any;
    export function Throttle(milli: number) {
        interface Throttled extends Function {
                now: Function
        }
        return function(target: Object, propertyKey: string, descriptor: TypedPropertyDescriptor): TypedPropertyDescriptor {
                let originalMethod = descriptor.value;
                // NOTE: Do not use arrow syntax here. Use a function expression in
                // order to use the correct value of `this` in this method
                descriptor.value = _.throttle(function() {
                    originalMethod.apply(this, arguments);
                }, milli);
                (descriptor.value).now = function() {
                    originalMethod.apply(this, arguments);
                };
                return >descriptor;
            }
    }
        class Ctrl {
            constructor(scope: any) { 
                scope.$watch("foo", this.throttledByClassWatch);
                this.throttledByClassWatch.now() //unrecommended now call
            }
            @Throttle(100000)
            private throttledByClassWatch() {
            }
        }
I might have the types a little wrong but I have tried many other
permutations. It seems to be because the expected type is `declare type
MethodDecorator = (target: Object, propertyKey: string | symbol,
descriptor: TypedPropertyDescriptor) => TypedPropertyDescriptor | void;`
and so the input T must match the output T.
Ideally the `now` could also inherit the generic type `T` so it could be type
checked.