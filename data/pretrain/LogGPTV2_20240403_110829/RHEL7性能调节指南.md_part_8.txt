:::
::: para
从页面表中读取地址映射很耗时且资源很宝贵，因此 Linux
操作系统提供最近使用地址的缓存：转换后背缓冲区（TLB）。但默认的 TLB
只能缓存一定量的地址映射。如果需要的地址映射不在 TLB 中（即，TLB
[*missed*]{.emphasis}），系统仍然需要读取页面表以决定物理到虚拟的地址映射。
:::
::: para
由于应用程序内存需求与用来缓存地址映射的页面大小之间的关系，较于对内存需求小的应用程序来说，对内存需求大的应用程序更容易受到
TLB 缺失造成的性能下降问题。因此无论何时，避免 TLB 缺失很重要。
:::
::: para
红帽企业版 Linux 提供大型转换后背缓冲区 （大型
TLB），可以将内存分为大片段进行管理。这使大量的地址映射能同时进行缓存，以此降低
TLB 缺失的可能性，并提高需要大内存的应用程序的性能。
:::
::: para
配置大型 TLB，详情请见 ＜[第 4.3.1 节
"配置大页面"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_tools-Configuring_huge_pages){.xref}＞。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory-Monitoring_and_diagnosing_performance_problems}4.2. 监控及诊断性能问题 {.title}
:::
::: para
红帽企业版 Linux 7
提供大量有用的工具来监控系统性能并诊断与系统内存相关的性能问题。本章概述了可用的工具，并举例说明如何使用它们来监控和诊断与内存相关的性能问题。
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Monitoring_and_diagnosing_performance_problems-Monitoring_memory_usage_with_vmstat}4.2.1. 使用 vmstat 监控内存使用量 {.title}
:::
::: para
[**Vmstat**]{.application} 由 [procps-ng]{.package}
数据包提供，输出用户系统进程、内存、网页、字块输入/输出、中断以及 CPU
活动等的报告。这是在机子最后一次启动或上一个报告之后提供的关于这些活动平均数的即时报告。
:::
::: para
以下指令显示了各种事件计数和内存统计信息列表。
:::
``` screen
$ vmstat -s
```
::: para
使用 [**vmstat**]{.application} 的方法，详情请见 ＜[第 A.9 节
"vmstat"](#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-vmstat){.xref}＞
或手册页：
:::
``` screen
$ man vmstat
```
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Monitoring_and_diagnosing_performance_problems-Profiling_application_memory_usage_with_Valgrind}4.2.2. 用 Valgrind 分析应用程序的内存使用量 {.title}
:::
::: para
[**Valgrind**]{.application}
是一个为用户提供空间二进制文件测量方法的框架。它包含大量的工具来概述和分析程序性能。本章列出的
[**valgrind**]{.application}
工具能帮助用户检测内存错误，例如未初始化的内存使用和不适当的内存分配及解除分配。
:::
::: para
要使用 [**valgrind**]{.application} 或其工具，请安装
[valgrind]{.package} 数据包：
:::
``` screen
# yum install valgrind
```
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_application_memory_usage_with_Valgrind-Profiling_memory_usage_with_Memcheck}4.2.2.1. 使用 Memcheck 分析内存使用量 {.title}
:::
::: para
[**Memcheck**]{.application} 是默认的 [**valgrind**]{.application}
工具。它检测并报告大量难以检测和诊断到的内存错误，例如：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    不应发生的内存访问
    :::
-   ::: para
    使用未定义或未初始化的值
    :::
-   ::: para
    不正确的释放堆内存
    :::
-   ::: para
    指示字重叠
    :::
-   ::: para
    内存泄露
    :::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
[**Memcheck**]{.application}
只能报告这些错误，但并不能阻止它们发生。如果程序以通常会引起段错误的方式来访问内存的话，段错误仍然会发生。但[**memcheck**]{.application}
会在发生错误之前立刻记录一条信息。
:::
:::
:::
::: para
由于 [**memcheck**]{.application} 使用测量工具，通过
[**memcheck**]{.application} 执行的应用程序会比平常运行起来慢 10-30 倍。
:::
::: para
要在应用程序上运行 [**memcheck**]{.application}， 请执行以下指令：
:::
``` screen
# valgrind --tool=memcheck application
```
::: para
用户也可以使用以下选项来使 [**memcheck**]{.application}
的输出集中在特定的问题类型上。
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_memory_usage_with_Memcheck-_leak_check}[\--leak-check]{.term}
:   ::: para
    在应用程序结束运行后，[**memcheck**]{.application}
    会搜索内存泄露问题。默认值为
    `--leak-check=summary`{.command}，在找到内存泄露时会显示其数量。用户可以指定
    `--leak-check=yes`{.command} 或 `--leak-check=full`{.command}
    来输出每个泄露问题的详情。禁用请设定 `--leak-check=no`{.command}。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_memory_usage_with_Memcheck-_undef_value_errors}[\--undef-value-errors]{.term}
:   ::: para
    默认值为
    `--undef-value-errors=yes`{.command}，使用未定义的值时会报错。用户还可设定
    `--undef-value-errors=no`{.command} ，这将禁用此报告并略微提高
    Memcheck 的速度。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_memory_usage_with_Memcheck-_ignore_ranges}[\--ignore-ranges]{.term}
:   ::: para
    在查看可寻址内存时指定一个或多个 [**memcheck**]{.application}
    应忽略的范围，例如，
    `--ignore-ranges=0xPP-0xQQ,0xRR-0xSS`{.literal}。
    :::
:::
::: para
要查看 [**memcheck**]{.application} 选项的完整列表，请参见
`/usr/share/doc/valgrind-version/valgrind_manual.pdf`{.filename}
中的文档。
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_application_memory_usage_with_Valgrind-Profiling_cache_usage_with_Cachegrind}4.2.2.2. 使用 Cachegrind 分析缓存使用量 {.title}
:::
::: para
[**Cachegrind**]{.application}
会模拟应用程序与系统缓存层次结构和分支预测器间的交互作用。它会追踪模拟的第一级指令和数据缓存使用情况，以此检测出该级缓存与代码间不良的交互作用。它也会追踪最后一级缓存（第二或第三极）以便追踪内存访问。这样的情况下，使用
[**cachegrind**]{.application} 的应用程序运行起来会比通常慢 20-100 倍。
:::
::: para
[**Cachegrind**]{.application}
会收集应用程序执行期间的统计数据，并且将概要输出至操作台。要在应用程序中运行
[**cachegrind**]{.application} ，请执行以下指令：
:::
``` screen
# valgrind --tool=cachegrind application
```
::: para
用户也可以使用以下选项来让 [**cachegrind**]{.application}
的输出集中在一个特定的问题上。
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_cache_usage_with_Cachegrind-_I1}[\--I1]{.term}
:   ::: para
    指定大小、关联性以及第一级指令缓存行大小的方法如下：`--I1=size,associativity,line_size`{.command}。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_cache_usage_with_Cachegrind-_D1}[\--D1]{.term}
:   ::: para
    指定大小、关联性以及第一级数据缓存行大小的方法如下：`--D1=size,associativity,line_size`{.command}.。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_cache_usage_with_Cachegrind-_LL}[\--LL]{.term}
:   ::: para
    指定大小、关联性以及最后一级缓存行大小的方法如下：`--LL=size,associativity,line_size`{.command}。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_cache_usage_with_Cachegrind-_cache_sim}[\--cache-sim]{.term}
:   ::: para
    启用或禁用缓存访问和缺失数量的集合是默认启用的（`--cache-sim=yes`{.command}）。禁用此集合以及
    `--branch-sim`{.command} 来使 [**cachegrind**]{.application}
    不收集信息。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_cache_usage_with_Cachegrind-_branch_sim}[\--branch-sim]{.term}
:   ::: para
    启用或禁用分支指令及错误预测数量的集合是默认启用的（`--branch-sim=yes`{.command}）。禁用此集合以及
    `--cache-sim`{.command} 来使 [**cachegrind**]{.application}
    不收集信息。
    :::
    ::: para
    [**Cachegrind**]{.application} 写入详细的分析信息至每个进程
    `cachegrind.out.pid`{.filename} 文件，其中， *pid*
    是进程标识符。这一详细信息可以使用 [**cg_annotate**]{.application}
    工具进行进一步处理，方法如下：
    :::
    ``` screen
    # cg_annotate cachegrind.out.pid
    ```
:::
::: para
[**Cachegrind**]{.application} 也提供 cg_diff
工具，可以更为容易地在代码变化前后对程序性能进行记录。要对比输出文件，请执行以下命令：先用原始配置输出文件替代，再用后续配置输出文件替代。
:::
``` screen
# cg_diff first second
```
::: para
生成的输出文件可以使用 [**cg_annotate**]{.application}
工具来查看更多详情。
:::
::: para
要查看 [**cachegrind**]{.application} 选项的完整列表，请参见
`/usr/share/doc/valgrind-version/valgrind_manual.pdf`{.filename}
中的文档。
:::
:::
::: section
::: titlepage