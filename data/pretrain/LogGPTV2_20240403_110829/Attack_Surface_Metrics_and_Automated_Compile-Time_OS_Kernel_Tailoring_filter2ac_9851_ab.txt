We also assume that the attacker can target code in
LKMs, including LKMs that are loaded on-demand by the
system. As the attacker is not able to plug hardware into the
target system, we assume that bugs in LKMs not related to
installed hardware cannot lead to failures.
ISOLSEC attack surface An attacker in the ISOLSEC
model has the set of all system calls as entry points E. The
set of barrier functions X contains functions that are only
accessible from privileged applications and LKMs that can-
not possibly be loaded by an action triggered by the attacker.
We provide a more detailed description of those functions
in the next three paragraphs.
Functions that are not reachable because of lacking per-
missions are highly dependent on the isolation technology
used (e.g., LSM-based [11, 18, 32], chroot, LXC [28], sec-
comp [17]) and the policies applied to the application, and
at a ﬁrst approximation, we only consider the default privi-
lege checking in use in the Linux kernel: POSIX capabili-
ties. Hence, we assume that the set of barrier functions X in-
cludes those functions performing POSIX capability checks
(functions calling the capable() function).
However,
this is not sufﬁcient.
Linux proposes a
variety of pseudo-ﬁlesystems, namely sysfs, debugfs,
securityfs and procfs, in which ﬁlesystem operations
are dispatched to speciﬁc code paths in the kernel, mostly
in LKMs, and are often used to expose information or ﬁne-
tuning interfaces to user-space processes which, in general,
are privileged. However, these privilege checks are per-
formed at the virtual ﬁlesystem layer, using POSIX ACLs:
hence, they do not contain calls to the capable() function,
and need to be considered separately. In addition, as those
ﬁlesystems should not be accessible from an unprivileged
application that is sandboxed (e.g., this is the case even with
a simple chroot jail), we include all functionality provided
by those four pseudo-ﬁlesystems as barrier functions X.
Finally, as a consequence of our assumptions on LKMs
in the ISOLSEC model, we include in X all LKMs that are
either (a) not loaded while the workload is running, but not
loadable on demand, or (b) a hardware driver that is not
loaded while the workload is running.
For these reasons, we mark in Figure 2 the kernel compo-
nents which can contain funcions in the attack surface only
as “partial a.s (attack surface)”: their inclusion depends on
being reachable, after consideration of the barrier functions.
2.3 Attack Surface Measurements
To quantify security improvements in terms of the attack
surface, we need a metric that reﬂects its size. Although
we are not the ﬁrst to make this observation [20, 30], we
propose the ﬁrst approach that quantiﬁes the attack surface
within a particular security model by using call graphs. In
the following, we present a general approach to measure an
attack surface in a security model as well as speciﬁc metrics
that we will use in the case of the Linux kernel.
Deﬁnition 4 (Code-quality metric). A code-quality met-
ric µ is a mapping associating a non-negative value to the
nodes of the call graph:
µ : F → R+
Example. A function’s SLOC (denoted SLOC), the cyclo-
matic complexity [33] (denoted cycl), or a CVE-based met-
ric associating the value 1 to a function that had a CVEs in
the past 7 years, and 0 otherwise (denoted CV E), are code-
quality metrics that we use in this paper.
CVE-based metrics provide a posteriori knowledge on
vulnerable functions: they allow an estimate of the number
of CVEs a partical attack surface reduction method would
have avoided, in the past. However, this metric, alone, is un-
satisfactory for multiple reasons. For instance, CVEs only
form a sample of all vulnerabilities existing in an applica-
tion, and this sample is likely to be biased: vulnerabilities
tend to be searched and discovered non-uniformly accross
the code base, with often-used parts being more likely to be
tested and audited. Additionally, past CVEs are not neces-
sarily a good indicator of future CVEs: although a function
with a history of vulnerabilities might be prone to more vul-
nerabilities in the future (e.g., due to sloppy coding style),
the opposite is also likely, since this might indicate that the
function has now been thoroughly audited. For this reason,
we also use a priori metrics such as lines of code and cyclo-
matic complexity, which, although imperfect for predicting
vulnerabilities, do not suffer from the aforementioned is-
sues and can be easily collected through static analysis.
Deﬁnition 5 (Attack Surface Metric). An attack surface
metric associated with a code-quality metric µ assigns a
non-negative real value to an attack surface:
ASµ : G → R+
GAS (cid:55)→ ASµ (GAS)
and satisﬁes the property:
∀E(cid:48) ⊆ E,∀X(cid:48) ⊇ X, ASµ (G(cid:48)
with GAS = (G,E,X),G(cid:48)
AS) ≤ ASµ (GAS)
AS = (G,E(cid:48),X(cid:48))
That is, the more entry points, the higher the attack sur-
face measurement; the more barrier functions, the lower the
attack surface measurement.
Lemma 1. Let m be a mapping:
m : G → R
G (cid:55)→ m(G)
If m satisﬁes:
∀G ∈ G , m(G) ≥ 0
∀G(cid:48) ⊆ G ∈ G , m(G(cid:48)) ≤ m(G)
then it is an attack surface metric.
Proof. Let GAS = (G,E,X),G(cid:48)
E(cid:48) ⊆ E and X(cid:48) ⊇ X. Then:
G(cid:48)
AS ⊆ GAS
AS = (G,E(cid:48),X(cid:48)) such that
Hence m satisﬁes the property in Deﬁnition 5:
m(G(cid:48)
AS) ≤ m(GAS)
Note that this property is not necessary to satisfy Deﬁ-
nition 5, because a smaller set of functions (in G(cid:48)
AS) should
not necessarily mean a smaller attack surface measurement.
This is sensible, because in practice some functions can
reduce the overall attack surface (e.g., by sanitizing in-
put), and an attack surface metric could take this into ac-
count (e.g., Murray, Milos, and Hand [36] propose such a
metric for measuring TCB size). Such an example is de-
picted in Figure 1: A metric satisfying Lemma 1 would al-
ways measure a lower attack surface for G(cid:48)
AS than for GAS,
whereas this is not necessary for a metric satisfying Deﬁni-
tion 5.
Figure 3. Example attack surfaces GAS (with
E = {e} and X = /0) and G(cid:48)
AS (with E(cid:48) = {e(cid:48)} and
X(cid:48) = /0). Note that E(cid:48) (cid:54)⊆ E and G(cid:48)
AS ⊆ GAS.
Proposition 1. The following two functions are attack sur-
face metrics:
AS1µ (GAS) = ∑
i∈FAS
AS2µ (GAS) = µAS
µ(i)
T L((cid:103)GAS)µAS
T = (µ(1), . . . , µ(|F|)), and
where GAS = (FAS,CAS), µAS
L(G) is the Laplacian matrix of a simple (non-directed)
graph:
L(G) = D− A
where D is a diagonal matrix with the degrees of the nodes
on the diagonal, and A the adjacency matrix of the graph
(Ai j = 1 when the (i,j) edge exists, 0 otherwise). As GAS is
directed, we transform it into a simple graph by ignoring
the direction on its arcs, which we denote(cid:103)GAS.
AS1 provides a simple and intuitive formulation of an at-
tack surface metric: for instance, AS1SLOC is a sum of the
lines of code in the attack surface. However, it values each
function equally. AS2 takes advantage of the functions po-
sition in the call graph, and attaches more value to code-
quality metrics in functions that have a large number of
callers (and callees) that have a lower code-quality measure-
ment. The Appendix contains a proof, and a more detailed
explanation of the formulation of AS2. We use both these
attack surface metrics in our evaluations in Section 4.
2.4 Summary
The metrics introduced in this section are for the pur-
pose of a precise evaluation of the security gains of our
approach. These metrics contain metrics used commonly
in prior work, such as total TCB size in SLOC (AS1SLOC in
the GENSEC model). We do not claim the metrics presented
in this section are the panacea in measuring attack surfaces.
Rather, we propose new metrics that take into account what
attackers are capable of. This will allow us to discuss attack
surface reduction results in Section 5 for additional insights
into the advantages and disadvantages of tailoring the Linux
kernel conﬁguration.
as extension to existing work [13, 37, 52], which has been
kindly provided to us by the original authors.
3.3 Kernel-Conﬁguration Tailoring
3 Kernel Tailoring
3.1 General Idea and Solution Overview
The formalism introduced in Section 2 provides a solid
means to calculate the attack surface in a given security
model. We apply these theoretical considerations to im-
prove the overall system security of Linux as shipped by
Linux distributions such as Ubuntu or Red Hat Linux.
These popular distributions cannot afford to ship and main-
tain a large number of different kernels. Therefore, they
conﬁgure their kernels to be as generally usable as possible,
which requires the kernel package maintainers responsible
to enable as much functionality (i.e., KCONFIG features) as
possible. Unfortunately, this also maximizes the attack sur-
face. As security-sensitive systems do not require the gener-
icalness provided, the attack surface can be reduced by sim-
ply not enabling unnecessary features. What features are
necessary, however, depends on the actual workload of the
corresponding use-case. Therefore, our approach consists
of two phases. In the analysis phase, the workload is ana-
lyzed at run time. The second phase calculates a reduced
Linux conﬁguration that enables only the functionality that
has been observed in the analysis phase.
3.2 Conﬁguration Mechanisms in Linux
Variability in Linux is centrally managed by means of
KCONFIG, which is both a tooling and a conﬁguration lan-
guage, in which constraints such as dependencies and con-
ﬂicts are modeled in a domain speciﬁc language (DSL). In
the literature, the formal semantics [44, 55] have been ana-
lyzed for use in variability extractors [52], which translate
the speciﬁed constraints into propositional formulas. These
formulas are essential for constructing the optimized Linux
conﬁguration.
However, the implementation of variability is very scat-
tered in Linux, which makes holistic reasoning challeng-
ing. In practice, the analysis of KCONFIG ﬁles, MAKE ﬁles
and C Preprocessor (CPP) code requires very specialized
and sophisticated extraction tools. A reliable mapping of
user-conﬁgurable features in KCONFIG to source lines in
the source tree requires a correct combination of all three
sources of variability. A solid understanding of the Linux
build system KBUILD and the conﬁguration tool KCONFIG
is instrumental to correctly relate the variability declaration
in KCONFIG. This work therefore implements our approach
The goal of our approach is to compile a Linux kernel
with a conﬁguration that has only those features enabled
which are necessary for a given use case. This section
shows the fundamental steps of our approach to tailor such
a kernel. The six steps necessary are shown in Figure 4.
 Enable tracing. The ﬁrst step is to prepare the kernel
so that it records which parts of the kernel code are executed
at run time. We use the Linux-provided ftrace feature,
which is enabled with the KCONFIG conﬁguration option
CONFIG_FTRACE. Enabling this conﬁguration option mod-
iﬁes the Linux build process to include proﬁling code that
can be evaluated at runtime.
In addition, our approach requires a kernel that is built
with debugging information so that any function addresses
in the code segment can be correlated to functions and
thus source ﬁle locations in the source code. For Linux,
this is conﬁgured with the KCONFIG conﬁguration option
CONFIG_DEBUG_INFO.
To also cover code that is executed at boot time by ini-
tialization scripts, we need to enable the ftrace as early
as possible. For this reason, we modify the initial RAM
disk, which contains programs and LKMs for low-level sys-
tem initialization 2. Linux distributions use this part of the
boot process to detect installed hardware early in the boot
process and, mostly for performance reasons, load only the
required essential device drivers. This basically turns on
tracing even before the ﬁrst process (init) starts.
 Run workload. In this step, the system administra-
tor runs the targeted application or system services. The
ftrace feature now records all addresses in the text seg-
ment that have been instrumented. For Linux, this covers
most code, except for a small amount of critical code such
as interrupt handling, context switches and the tracing fea-
ture itself.
To avoid overloading the system with often accessed ker-
nel functions, ftrace’s own ignore list is dynamically be-
ing ﬁlled with functions when they are used. This prevents
such functions from appearing more than once in the output
ﬁle of ftrace. We use a small wrapper script for ftrace
to set the correct conﬁguration before starting the trace, as
well as to add functions to the ignore list while tracing and
to parse the output ﬁle, printing only addresses that have not
yet been encountered.
During this run, we copy the output of the tracing wrap-
per script at constant time intervals. This allows us to
compare at what time what functionality was accessed, and
2This part of the Linux plumbing is often referred to as “early
userspace”
Figure 4. Kernel-Conﬁguration Tailoring Workﬂow
therefore to monitor the evolution of the tailored kernel con-
ﬁguration over time based on these snapshots.
 Correlation to source lines. A system service trans-
lates the raw address offsets into source line locations using
the ADDR2LINE tool from the binutils tool suite. Be-
cause LKMs are relocated in memory depending on their
non-deterministic order of loading, the system service com-
pares the raw, traced addresses to offsets in the LKM’s code
segment. This allows the detection of functionality that is
not compiled statically into the Linux kernel. This corre-
lation of absolute addresses in the code segment with the
debug symbols allows us to identify the source ﬁles and the
#ifdef blocks that are actually being executed during the
tracing phase.
 Establishment of the propositional formula. This
step translates the source-ﬁle locations into a propositional
formula. The propositional variables of this formula are
the variation points the Linux conﬁguration tool KCONFIG