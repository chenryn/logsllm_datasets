# Practical Multi-Party Private Set Intersection from Symmetric-Key Techniques

## Authors
- Vladimir Kolesnikov, Bell Labs, Murray Hill, New Jersey, USA
- Naor Matania, Bar-Ilan University, Tel Aviv, Israel
- Benny Pinkas, Bar-Ilan University, Tel Aviv, Israel
- Mike Rosulek, Oregon State University, Corvallis, Oregon, USA
- Ni Trieu, Oregon State University, Corvallis, Oregon, USA

## Abstract
We introduce a new paradigm for multi-party private set intersection (PSI) that allows \( n \) parties to compute the intersection of their datasets without revealing any additional information. Our protocols avoid computationally expensive public-key operations and are secure in the presence of any number of semi-honest participants (i.e., without an honest majority). We demonstrate the practicality of our protocols with an implementation. To the best of our knowledge, this is the first implementation of a multi-party PSI protocol. For 5 parties with datasets of \( 2^{20} \) items each, our protocol requires only 72 seconds. In an optimized version achieving a slightly weaker security (augmented semi-honest model), the same task requires only 22 seconds. The technical core of our protocol is the oblivious evaluation of a programmable pseudorandom function (OPPRF), which we instantiate in three different ways. We believe our new OPPRF abstraction and constructions may be of independent interest.

## CCS Concepts
- **Theory of computation** → Cryptographic protocols
- **Security and privacy** → Privacy protections; Cryptography; Symmetric cryptography and hash functions

## Keywords
- Private Set Intersection
- Oblivious PRF
- Secure Multiparty Computation

## 1 Introduction
In the problem of private set intersection (PSI), several parties each hold a set of items and wish to learn the intersection of these sets and nothing else. Two-party PSI is now a practical primitive, with extremely fast cryptographically secure implementations [26, 38, 40]. These implementations are only a small factor slower than the naïve and insecure method of exchanging hashed values. Among the specific functions of interest in secure multiparty computation (MPC), PSI is one of the most strongly motivated by practice. Companies like Facebook routinely use PSI to share and mine shared information [34, 52]. In 2012, some of this sharing was performed with insecure naïve hashing, where players send and compare hashes of their set elements. Today, companies are willing to tolerate a reasonable performance penalty to achieve stronger security [52]. The ubiquity and scale of private data sharing, and PSI in particular, will continue to grow as big data becomes bigger and privacy becomes a more recognized issue. We refer readers to [38–40] for additional discussion and motivation of PSI.

### 1.1 State of the Art for Two-Party PSI
We focus on the state-of-the-art semi-honest PSI protocols. The earliest PSI protocols, based on Diffie-Hellman assumptions, date back to the 1980s [19, 30, 47], and we refer readers to [39] for an overview of different protocol paradigms for PSI. Protocols based on oblivious transfer extension have proven to be the fastest in practice. However, OT-based protocols do not have the lowest communication cost. In settings where computation is not a factor but communication is at a premium, the best protocols are in [5, 23, 41]. In the semi-honest version of these protocols, each party sends only 2n group elements, where n is the number of items in each set. However, these protocols require a number of exponentiations proportional to the number of items, making their performance slow in practice. Concretely, [38] found Diffie-Hellman-based protocols to be over 200× slower than the OT-based ones.

Current state-of-the-art semi-honest PSI protocols in the two-party setting are [26, 40]. They both use bucketing to reduce the number of comparisons and rely on oblivious PRF evaluation. Until our work, these ideas were not used in PSI protocols for the multi-party case.

Most work on concretely efficient PSI is in the random oracle model, and with security against semi-honest, rather than malicious, adversaries. Some notable exceptions are [12, 16, 20] in the standard model, and [7, 8, 10, 12, 37, 44, 45] with security against malicious adversaries.

Lastly, there are efficient constructions for generic MPC [2, 25, 27, 29, 32, 43, 49–51], which can be used for implementing any functionality. In particular, these protocols can be used for securely implementing PSI, in either the two-party or multi-party settings. However, circuits for computing PSI are relatively large. A natural circuit for two-party PSI performs \( \mathcal{O}(n^2) \) comparisons, whereas more efficient circuits are of size \( \mathcal{O}(n \log n) \) [18, 40]. As demonstrated in [40], secure evaluation of these circuits is about two orders of magnitude slower than the most efficient PSI protocols.

### 1.2 State of the Art for Multi-Party PSI
A multi-party PSI protocol was first proposed by Freedman, Nissim, and Pinkas [12]. The protocol of [12] is based on oblivious polynomial evaluation (OPE) implemented using additively homomorphic encryption, such as the Paillier encryption scheme. The basic idea is to represent a dataset as a polynomial whose roots are its elements and send homomorphic encryptions of the coefficients of this polynomial to obliviously evaluate it on the other party’s inputs.

Relying on the OPE technique, Kissner and Song [24] proposed a multi-party PSI protocol with quadratic computation and communication complexity in both the size of the dataset and the number of parties. The computation overhead is reduced to be linear in the number of participants in [46], which is based on bilinear groups. Furthermore, an efficient solution with quasi-linear complexity in the size of the dataset is proposed in [6]. In both [6, 46], the maximum number of corrupted parties is assumed to be \( n/2 \). Very recent work [17] describes new protocols that run over a star network topology and are secure in the standard model against either semi-honest or malicious adversaries. The basic idea is to designate one party to run a version of the protocol of [12] with all other parties. The main building block in [17] is an additively homomorphic public-key encryption scheme with threshold decryption, whose key is mutually generated by the parties. The protocol requires computing a linear number of encryptions and decryptions (namely, exponentiations) in the input sets. In contrast, our main building block is based on Oblivious Transfer extensions where the number of exponentiations does not depend on the size of the dataset. [17] does not include implementation, but we expect that our protocols are much faster due to building from symmetric primitives. We describe the performance of representative multi-party PSI protocols in the semi-honest settings in Table 1.

We mention that multi-party PSI has also been investigated in the server-aided model, based on the existence of a server that does not collude with clients [1, 31]. Information-theoretic PSI protocols, possible in the multi-party setting, are considered in [3, 28, 36].

### 1.3 Our Contributions
We design a modular approach for multi-party PSI that is secure against an arbitrary number of colluding semi-honest parties. Our approach can be instantiated in a number of ways, providing trade-offs for security guarantees and computation and communication costs.

We implemented several instantiations of our PSI approach. To our knowledge, this is the first implementation of multi-party PSI. We find that multi-party PSI is practical for sets with a million items held by around 15 parties, and even for larger instances. The main reason for our protocol's high performance is its reliance on fast symmetric-key primitives. This is in contrast with prior multi-party PSI protocols, which require expensive public-key operations for each item. Our implementation will be made available on GitHub.

#### Our PSI Approach
The main building block of our protocol, which we believe to be of independent interest, is an oblivious, programmable PRF (OPPRF). Recall, an oblivious PRF (OPRF) is a 2-party protocol in which the sender learns a PRF key \( k \) and the receiver learns \( F(k, r) \), where \( F \) is a PRF and \( r \) is the receiver’s input. In an OPPRF, the PRF \( F \) further allows the sender to “program” the output of \( F \) on a limited number of inputs. The receiver learns the PRF output as before, but, importantly, does not learn whether his input was one on which the PRF was programmed by the sender. We propose three OPPRF constructions, with different trade-offs in communication, computation, and the number of points that can be programmed.

#### Basic Idea
Our PSI protocol consists of two major phases. First, in the conditional zero-sharing phase, the parties collectively and securely generate additive sharings of zero. Each party \( P_i \) obtains, for each of its items \( x_j \), a share of zero, denoted \( s_{ij} \). Namely, if all parties have \( x_j \) in their sets, then the sum of their obtained shares is zero (else, w.h.p., the sum is non-zero). In the second phase, parties perform conditional reconstruction of their shares. The idea is for each \( P_i \) to program an instance of OPPRF to output its share \( s_{ij} \) when evaluated on input \( x_j \). Intuitively, if all parties evaluate the corresponding OPPRFs on the same value \( x_j \), then the sum of the OPPRF outputs is zero. This signals that \( x_j \) is in the intersection. Otherwise, the shares sum to a random value.

This brief overview ignores many important concerns — in particular, how the parties coordinate shares and items without revealing the identity of the items. We propose several ways to realize each of the two PSI phases, resulting in a suite of many possible instantiations. We then discuss the strengths and weaknesses of different instantiations.

A more detailed overview of the approach and the two phases is presented in Section 5, prior to the presentation of the full protocol.

## 2 Preliminaries

### 2.1 Secure Computation
The security of a secure multi-party protocol is formally defined by comparing the distribution of the outputs of all parties in the execution of the protocol \( \pi \) to an ideal model where a trusted third party is given the inputs from the parties, computes \( f \), and returns the outputs. The idea is that if it is possible to simulate the view of the adversary in the real execution of the protocol, given only its view in the ideal model (when it only sees its input and output), then the adversary cannot do in the real execution anything that is impossible in the ideal model, and hence the protocol is said to be secure.

We work in the multi-party setting where the corrupt parties collude. This is modeled by considering a single monolithic adversary that obtains the views of all corrupt parties. The protocol is secure if the joint distribution of those views can be simulated.

#### Functionalities
We define a particular secure computation task by formally describing the behavior of the ideal functionality (trusted third party). The ideal functionality for multi-party PSI is given in Figure 1.

#### Augmented Semi-Honest Model
We present an optimized variant of our protocols that is in a slightly weaker security model. In the augmented semi-honest model, the adversary is allowed to change the inputs of corrupted parties (but thereafter run the protocol honestly on those inputs).

In the specific case of multi-party PSI, this additional power is relatively harmless. One can think of a multi-party PSI as computing \( X_H \cap X_C \), where \( X_H \) is the intersection of all honest parties’ sets and \( X_C \) is the intersection of all corrupt parties’ sets. The augmented semi-honest model simply allows an adversary to choose \( X_C \), rather than being bound to whatever \( X_C \) was chosen by the environment. Without loss of generality, an augmented semi-honest adversary can simply set all corrupt parties to have the same input set \( X_C \).

We note that the augmented semi-honest model is well known [14, 16] and was used in previous work on multi-party PSI and related functionalities [12, 13]. We define and discuss this security notion at length in Appendix A.

### 2.2 Cuckoo Hashing
We review the basics of Cuckoo hashing [35], specifically the variant of Cuckoo hashing that involves a stash [22]. In basic Cuckoo hashing, there are \( m \) bins, a stash, and several random hash functions \( h_1, \ldots, h_k \) (often \( k = 2 \)), each with range \([m]\). The invariant is that any item \( x \) stored in the Cuckoo hash table is stored either in the stash or (preferably) in one of the bins \(\{h_1(x), \ldots, h_k(x)\}\). Each non-stash bin holds at most one item. To insert an element, the process involves placing it in one of the bins or the stash, ensuring no bin contains more than one item.