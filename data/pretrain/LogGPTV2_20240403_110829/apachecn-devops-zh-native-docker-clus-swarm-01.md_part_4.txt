```
$ docker run -d -p 80:80 nginx
docker: Error response from daemon: Unable to find a node that 
    satisfies the following conditions
[port 80 (Bridge mode)].
See 'docker run --help'.
```
发生的事情只是 Swarm 找不到合适的主机来放置新的容器，因为在所有主机上，端口`tcp/80`都被占用了。在运行了这 4 个 nginx 容器，加上 4 个 swarm 容器(用于基础设施管理)之后，正如我们所料，我们在这个 Swarm 集群上有 8 个正在运行的容器:
![Test your Swarm cluster](img/image_01_025.jpg)
这就是 Swarm v1 的工作方式(并且仍然在工作)。
# 蜂群，今天
在本节中，我们将使用 Docker Engine 1.12 或更高版本中内置的新 Swarm 模式来设置一个小集群。
在 16 日的会议上，在重大的公告中，有两个引起了人们对容器编排的极大关注:
*   引擎和群之间的集成，称为 Docker 群模式。
*   SwarmKit
实际上，从 1.12 版本开始的 Docker 守护程序增加了运行所谓的 Swarm 模式的可能性。Docker 客户端增加了新的命令行界面命令，如`node`、`service`、`stack`、`deploy`，当然还有`swarm`。
我们将从[第 3 章](03.html "Chapter 3. Meeting Docker Swarm Mode")、*会见 Docker Swarm Mode* 开始更详细地介绍 Swarm Mode 和 SwarmKit，但是现在我们已经用 Swarm v1 完成了示例，我们将让读者体验 Swarm v2 如何比 v1 具有简单得多的用户体验。使用 Swarm v2 的唯一要求是拥有至少 1.12-rc1 版本的守护程序版本。但是使用 Docker Machine 0.8.0-rc1+，您可以通过通常的过程来配置满足这一要求的 Docker 主机。
Docker 还在 DockerCon 2016 上宣布了 AWS 的 Docker 和 Azure 的 Docker。不仅仅是 AWS 和 Azure，实际上我们也是 DigitalOcean 的粉丝，所以我们创建了一个新的工具来包装 DigitalOcean 命令行界面，以帮助以新的大规模方式调配 Docker 集群。该工具名为`belt`，现在可从[http://github.com/chanwit/belt](http://github.com/chanwit/belt)获得。您可以使用以下命令拉动皮带:
`go get github.com/chanwit/belt`
或者从项目的**发布**标签下载二进制。
首先，我们将准备一个模板文件，用于在 DigitalOcean 上进行资源调配。你的`.belt.yaml`会是这样的:
```
$ cat .belt.yaml
---
digitalocean:
 region: sgp1
 image: 18153887
 ssh_user: root
 ssh_key_fingerprint: 816630
```
请注意，我的图片号`18153887`是包含 Docker 1.12 的快照。DigitalOcean 通常会在每次发布后提供最新的 Docker 映像。为了使您能够控制您的集群，SSH 密钥需要在那里。对于`ssh_key_fingerprint`字段，您可以输入指纹和钥匙号。
别忘了设置你的`DIGITALOCEAN_ACCESS_TOKEN`环境变量。此外，Belt 识别相同的 Docker 机器外壳变量集。如果你熟悉 Docker Machine，你会知道如何设置它们。要刷新，这些是我们在上一节中介绍的 shell 变量:
*   `export DOCKER_TLS_VERIFY="1"`
*   `export DOCKER_HOST="tcp://:2376"`
*   `export DOCKER_CERT_PATH="/Users/user/.docker/machine/machines/machine"`
*   `export DOCKER_MACHINE_NAME="machine"`
现在，让我们看看如何使用腰带:
```
$ export DIGITALOCEAN_ACCESS_TOKEN=1b207 .. snip .. b6581c
```
现在，我们创建了一个由四个节点组成的群，每个节点有 512 兆内存:
```
$ belt create 512mb node[1:4]
ID              Name    Public IPv4     Memory  VCPUs   Disk
18511682        node1                   512     1       20 
18511683        node4                   512     1       20 
18511684        node3                   512     1       20 
18511681        node2                   512     1       20 
```
可以看到，我们可以指定一组语法相似的节点 node[1:4]。该命令在数字海洋上创建了四个节点。请等待大约 55 秒钟，以便调配所有节点。然后您可以列出它们:
```
$ belt ls
ID              Name    Public IPv4       Status  Tags
18511681        node2   128.199.105.119   active
18511682        node1   188.166.183.86    active
18511683        node4   188.166.183.103   active
18511684        node3   188.166.183.157   active
```
他们现在的状态已经从“新”变成了“活跃”。所有的 IP 地址都被分配了。现在一切都很好。
我们现在可以启动 Swarm 了。
在此之前，确保我们运行的是 Docker 1.12。我们在`node1`上检查这个。
```
$ belt active node1
node1
$ belt docker version
Client:
 Version:      1.12.0-rc2
 API version:  1.24
 Go version:   go1.6.2
 Git commit:   906eacd
 Built:        Fri Jun 17 21:02:41 2016
 OS/Arch:      linux/amd64
 Experimental: true
Server:
 Version:      1.12.0-rc2
 API version:  1.24
 Go version:   go1.6.2
 Git commit:   906eacd
 Built:        Fri Jun 17 21:02:41 2016
 OS/Arch:      linux/amd64
 Experimental: true
```
`belt docker`命令只是一个瘦包装器命令，它通过 SSH 将整个命令行发送到您的 Docker 主机。所以这个工具不会碍事，你的 Docker 引擎总是在控制之中。
现在我们将使用群模式初始化第一个节点。
```
$ belt docker swarm init
Swarm initialized: current node (c0llmsc5t1tsbtcblrx6ji1ty) is now 
    a manager.
```
然后，我们将其他三个节点加入到这个新形成的集群中。加入一个大型集群是一项乏味的任务。我们将让`belt`为我们执行以下操作，而不是遍历每个节点并手动执行 docker swarm join:
```
$ belt swarm join node1 node[2:4]
node3: This node joined a Swarm as a worker.
node2: This node joined a Swarm as a worker.
node4: This node joined a Swarm as a worker.
```
### 类型
当然，您可以运行:`belt --host node2 docker swarm join :2377`将节点 2 手动加入集群。
你会看到这个集群:
```
$ belt docker node ls
ID          NAME   MEMBERSHIP  STATUS  AVAILABILITY  MANAGER STATUS
4m5479vud9qc6qs7wuy3krr4u    node2  Accepted    Ready   Active
4mkw7ccwep8pez1jfeok6su2o    node4  Accepted    Ready   Active
a395rnht2p754w1beh74bf7fl    node3  Accepted    Ready   Active
c0llmsc5t1tsbtcblrx6ji1ty *  node1  Accepted    Ready   Active        Leader
```
恭喜你！您刚刚在数字海洋上安装了 Swarm 集群。
我们现在为`nginx`创建一项服务。该命令创建一个 Nginx 服务，在端口 80 发布两个容器实例。
```
$ belt docker service create --name nginx --replicas 2 -p 80:80 
    nginx
d5qmntf1tvvztw9r9bhx1hokd
```
开始了。
```
$ belt docker service ls
ID            NAME   REPLICAS  IMAGE  COMMAND
d5qmntf1tvvz  nginx  2/2       nginx
```
现在让我们将其扩展到 4 个节点。
```
$ belt docker service scale nginx=4
nginx scaled to 4
$ belt docker service ls
ID            NAME   REPLICAS  IMAGE  COMMAND
d5qmntf1tvvz  nginx  4/4       nginx
```
类似于 Docker Swarm，现在可以使用`belt ip`查看节点运行的位置。您可以使用任何 IP 地址来浏览 NGINX 服务。它在每个节点上都可用。
```
$ belt ip node2
128.199.105.119
```
这就是集群模式从 Docker 1.12 开始的样子。
# 总结
在这一章中，我们遇到了 Docker Swarm，定义了它的目标、特性和架构。我们还回顾了 Swarm 的其他一些可能的开源替代品，以及它们与 Swarm 的关系。最后，我们通过在 Virtualbox 和 Digital Ocean 上创建一个由四个主机组成的简单本地集群来安装并开始使用 Swarm。
使用 Swarm 对容器进行集群化将是整本书的主要主题，但是在我们开始在生产中使用 Swarm 之前，我们将了解一些理论，首先是发现服务，[第 2 章](02.html "Chapter 2. Discover the Discovery Services")、*发现发现服务*的主题。*