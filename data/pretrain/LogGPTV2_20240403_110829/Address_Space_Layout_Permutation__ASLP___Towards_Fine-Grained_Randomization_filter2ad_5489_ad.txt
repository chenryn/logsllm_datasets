# Address Space Layout Permutation: Enhancing Resistance to Memory Corruption Attacks

## 1. Introduction
This paper investigates methods for improving address space randomization techniques to increase resistance against memory corruption attacks. ASLP (Address Space Layout Permutation) provides both user and kernel level randomizations, using a novel binary rewriting tool that allows fine-grained permutation of static code and data regions. Additionally, we modified the Linux operating system kernel to provide system-wide randomization protection.

## 2. Performance Evaluation

### 2.1 SPEC CPU2000 Benchmark
Table 3 below shows the SPEC CPU2000 benchmark run times (in seconds) for different address space randomization techniques.

| Technique | 284 | 134 | 413 | 116 | 268 | 166 | 128 | 185 | 257 | 505 | 2634 | Overhead (%) |
|-----------|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|------|--------------|
| Exec-Shield | 176 | 284 | 131 | 409 | 117 | 266 | 166 | 125 | 185 | 257 | 506 | 2619 | 0.14 |
| PaX ASLR | 207 | 298 | 148 | 427 | 142 | 281 | 248 | 144 | 218 | 285 | 525 | 2923 | 14.38 |
| PIE | 177 | 284 | 133 | 410 | 116 | 267 | 166 | 128 | 187 | 256 | 504 | 2628 | -0.3 |

**Table 3. SPEC CPU2000 Benchmark Run Times (seconds)**

- **Kernel Level Randomization**: Exec-Shield has an average performance overhead of 0.14%, while PaX ASLR does not incur additional overhead.
- **User Level Randomization**: PIE shows an average performance overhead of 14.38%. This overhead primarily results from additional instructions needed to resolve actual memory addresses of program objects during runtime.
- **ASLP**: ASLP shows no performance overhead, supporting our claim that it has computational performance comparable to closely related works.

### 2.2 LMBench Benchmark
The LMBench benchmark suite focuses on general operating system performance rather than the computational performance of applications. We only considered kernel-level permutations in this evaluation.

- **Process Creation Overhead**: The primary source of overhead from address space randomization techniques like PaX ASLR, Exec-Shield, and ASLP is process creation. ASLP slows down `fork()` and `exec()` operations by 6.86% and 12.53%, respectively. PaX ASLR and Exec-Shield have consistently higher overheads for the same tasks: 13.83-21.96% and 12.63-32.18%, respectively.
- **Context Switching Overhead**: ASLP caused a 3.57% overhead, which is less than Exec-Shield (8.15%) and PaX ASLR (13.8%).
- **File and Virtual Memory (VM) System Latency**: ASLP and PaX ASLR incur a 12% overhead for `mmap` latency due to the increased number of instructions required to complete `mmap` allocations. However, the average overheads for file and VM operations are very low in all three techniques.

### 2.3 Apache Benchmark
The Apache Benchmark measures the performance of an Apache HTTP server in terms of how quickly it can serve a given number of HTML pages via TCP/IP. Our configuration makes 1 million requests in simultaneous batches of 100 for a static HTML page of 1881 bytes, including 425 bytes of images.

- **Results**: Only PIE incurs a major overhead of about 14%. Other techniques, including ASLP, show less than 1% overhead.

## 3. Limitations
- **Stack Frame Randomization**: The current implementation of ASLP does not support stack frame randomization, making it vulnerable to return-to-libc attacks. Adding pads among elements in the stack can mitigate such attacks but wastes memory space. Further investigation is required to find a better solution.
- **Relocation Data**: ASLP might require re-linking or recompilation of source codes if a program (executable binary) does not have relocation information. Although our goal is to perform randomization without source code access, the current implementation requires relocation data from the compiler. However, once the relocation data is included, we can randomize the program repeatedly to thwart real-life attacks.

## 4. Conclusions
This paper demonstrates that ASLP can achieve better randomization for process virtual memory layout without incurring significant performance overhead. The performance overhead of ASLP is low compared to other address space randomization techniques that provide less randomization. With ASLP, runtime overhead is less than 1%, as indicated by both the SPEC CPU2000 Integer Benchmark and the Apache Benchmark. Additionally, ASLP dramatically reduces the speed at which worms can propagate throughout the Internet, increasing the time needed to exploit targets from minutes to hours.

## References
[References listed here, formatted and organized as per the original text.]

---

This revised version aims to make the text more clear, coherent, and professional, while maintaining the technical accuracy and detail of the original content.