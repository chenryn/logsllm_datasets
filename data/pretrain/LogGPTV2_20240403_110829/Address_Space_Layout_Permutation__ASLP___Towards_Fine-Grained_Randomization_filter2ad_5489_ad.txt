284
134
413
116
268
166
128
185
257
505
2634
0.14
PaX ASLR
176
284
131
409
117
266
166
125
185
257
506
2619
-0.55
PIE
207
298
148
427
142
281
248
144
218
285
525
2923
14.38
ASLP
177
284
133
410
116
267
166
128
187
256
504
2628
-0.3
Table 3. SPEC CPU2000 benchmark run times
(seconds)
For the kernel level randomization comparison, Exec-
Shield has an average performance overhead of 0.14%, but
PaX ASLR does not incur additional overhead. For the user
level randomization comparison, PIE shows 14.38% aver-
age performance overhead. The overhead of PIE mainly
comes from additional instructions that need to resolve ac-
tual memory addresses of program objects during the run
time. Recent work by Bhatkar et al.
in [3] also took a
similar indirection approach to randomize static code and
data segments. Such indirection causes an average run-
time overhead of about 11% in their experiments. ASLP
shows no performance overhead which supports our claim
that ASLP has computational performance overhead com-
parable to closely related works.
LMBench benchmark The LMBench benchmark
suite differs from CPU2000 because it strives to benchmark
general operating system performance rather than the com-
putational performance of a set of applications. The LM-
Bench operating system benchmark suite consists of ﬁve
sets of micro-benchmarks, each of which is designed to fo-
cus on a speciﬁc aspect of operating system performance.
We only consider kernel level permutation in this evaluation
since LMBench benchmark targets at an operating system’s
performance overhead rather than an application’s perfor-
mance overhead. The result shows that the process creation
overhead is the primary source of expected overhead from
address space randomization techniques like PaX ASLR,
Exec-Shield, and ASLP, because additional operations are
inserted into the process creation functions. ASLP slows
down fork() and exec() operations by 6.86% and 12.53% re-
spectively. Both PaX ASLR and Exec-Shield have consis-
tently higher overheads for the same tasks: 13.83-21.96%
and 12.63-32.18% respectively. The context switching
overhead results give a similar story to process operation
was needed to support PIE linking. We therefore elected to exclude the
eon benchmark from the ﬁnal results.
results. ASLP caused 3.57% which is less than Exec-Shield
and PaX ASLR. Their results are 8.15% and 13.8% respec-
tively. In File and virtual memory (VM) system latency re-
sults, ASLP and PaX ASLR incur 12% overhead for mmap
latency due to the increasing number of instructions to com-
plete mmap allocations. However, average overheads of ﬁle
and VM operations are very low in all three techniques. We
do not consider local communication overhead from LM-
Bench benchmark result, since we made no changes to net-
working code. Instead, we have the Apache benchmark to
evaluate remote communication performance overhead.
Apache Benchmark The Apache Benchmark [11]
measures the performance of an Apache HTTP server [12]
in terms of how quickly it can serve a given number of
HTML pages via TCP/IP. Our Apache Benchmark conﬁg-
uration makes 1 million requests, in simultaneous batches
of 100, for a static HTML page of 1881 bytes, which in-
cludes 425 bytes of images. The result shows that only PIE
incurs major overhead, about 14%. The other techniques,
including ASLP, shows less than 1% overhead.
5 Limitations
Although ASLP can mitigate many types of attacks, cur-
rent implementation of ASLP does not support stack frame
randomization. Lack of randomization on the stack frame
allows attackers to exploit a return-to-libc attack as de-
scribed in [21]. We can mitigate such attack by adding
pads among elements in the stack [2], but the randomiza-
tion is limited and it wastes memory spaces. Further inves-
tigation is required to ﬁnd a better solution. Another limi-
tation is that ASLP might require re-linking or recompila-
tion of source codes if a program (executable binary) does
not have relocation information. Although our goal is to
perform randomization without source code access, current
implementation requires the relocation data from the com-
piler. However, we believe that this is a one time effort for
life time beneﬁt, since once the relocation data is included,
we can randomize the program repeatedly to thwart real-life
attacks.
6 Conclusions
This paper investigated methods for improving the ad-
dress space randomization techniques for the purpose of in-
creasing resistance to memory corruption attacks. ASLP
provides both user and kernel level randomizations. We
developed a novel binary rewriting tool that allows users
to permute static code and data regions with ﬁne-grained
level. We also modiﬁed the Linux operating system ker-
nel to provide system wide randomization protection. Com-
bined together, ASLP permutes the program’s memory lay-
out completely within 3 GB user space memory. Using var-
ious benchmarks we found that it is possible to achieve bet-
ter randomization for process virtual memory layout with-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006[17] David Moore, Vern Paxson, Stefan Savage, Colleen Shannon, Stuart Staniford,
and Nicholas Weaver. The spread of the sapphire/slammer worm, 2003. Avail-
able from URL http://www.cs.berkeley.edu/ nweaver/sapphire/.
[18] George Necula, Scott McPeak, and Westley Weimer. Ccured:
type-safe
retroﬁtting of legacy code. In Proceedings of the 29th ACM SIGPLAN-
SIGACT symposium on Principles of programming languages, Portland, Ore-
gon, pages 128-139, January 2002.
[19] Aleph One. Smashing the stack for fun and proﬁt. Phrack Magazine, 49(14),
November 1996. Available from URL http://www.phrack.org/phrack/49/P49-
14.
[20] Scut. Exploiting format string vulnerabilities, March 2001. Available from URL
http://julianor.tripod.com/teso-fs1-1.pdf.
[21] Hovav Shacham, Matthew Page, Ben Pfaff, Eu-Jin Goh, Nagendra Modadugu,
and Dan Boneh. On the effectiveness of address-space randomization. In V.
Atluri, B. Pﬁtzmann, and P. McDaniel, editors, Proceedings of the 11th ACM
Conference on Computer and Communications Security, CCS 2004, Washing-
tion, D.C. ACM, October 2004.
[22] The PaX Team. The
http://pax.grsecurity.net/.
pax
project,
2001. Available
from URL
[23] The PaX Team. Address space layout randomization, March 2003. Available
from URL http://pax.grsecurity.net/docs/aslr.txt.
[24] United States Computer Emergency Readiness Team (US-CERT).
security alerts. Available from URL http://www.us-
Technical cyber
cert.gov/cas/techalerts/.
[25] Tony Warnock. Random-number generators. Los Alamos Science, 1987. Avail-
able from URL http://www.fas.org/sgp/othergov/doe/lanl/pubs/00418729.pdf.
[26] Jun Xu, Zbigniew Kalbarczyk, and Ravishankar K. Iyer. Transparent runtime
randomization for security. In A. Fantechi, editor, Proceedings of the 22nd
Sympomsium on Reliable Distributed Systems, pages 260-269. IEEE Com-
puter Society, October 2003.
[27] Mary Lou Nohr. Understanding ELF Object Files and Debugging Tools. Num-
ber ISBN: 0-13-091109-7. Prentice Hall Computer Books, 1993.
[28] Tool Interface Standard (TIS) Committee. Executable and Linking Format
(ELF) Speciﬁcation, 1995.
[29] S. McPeak, G. C. Necula, S. P. Rahul, and W. Weimer. CIL: Intermediate lan-
guage and tools for C program analysis and transformation. In Conference on
Compiler Construction, 2002.
[30] SecuriTeam. Overwriting ELF .dtors section to modify program execution.
Available from http://www.securiteam.com/unixfocus/6H00I150LE.html.
[31] SecurityTracker. Advisory 16/2005: phpMyAdmin Local File Inclusion. Avail-
able from http://securitytracker.com/alerts/2005/Oct/1015091.html
[32] Christopher G. Bookholt. Address Space Layout Permutation:Increasing Resis-
tance to Memory Corruption Attacks. M.S. thesis, North Carolina State Univer-
sity, 2005.
out incurring obtrusive performance overhead. The perfor-
mance overhead of ASLP is low as compared with other ad-
dress space randomization techniques that provide less ran-
domization. With ASLP, runtime overhead is less than 1%,
as indicated by both the SPEC CPU2000 Integer Bench-
mark as well as the Apache Benchmark.
This paper also validates the use of address space ran-
domization by demonstrating that the randomization pro-
vided by ASLP dramatically reduces the speed at which
worms can propagate throughout the Internet. The increase
in time needed to exploit targets introduced by randomiza-
tion means that the fastest infection time for worms relying
on the absolute location of either the user stack, heap, or an
mmap allocation is on the order of hours, not minutes.
References
[1] Anonymous. Once upon a free(). Phrack Magazine, 11(57), August 2001.
Available from URL http://www.phrack.org/phrack/57/p57-0x09.
[2] Sandeep Bhatkar, Daniel C. DuVarney, and R. Sekar. Address obfuscation: an
effcient approach to combat a broad range of memory error exploits. In V. Pax-
son, editor, Proceedings of the 12th USENIX Security Symposium, pages 1020,
August 2003.
[3] Sandeep Bhatkar, R. Sekar, and Daniel C. DuVarney. Efﬁcient techniques for
comprehensive protection from memory error exploits. In Proceedings of the
14th USENIX Security Symposium, Baltimore, MD, pages 271-286, July 2005.
[4] Joshua
Brindle.
Hardened
gentoo.
Available
from
URL
http://www.gentoo.org/proj/en/hardened/.
[5] Peter Busser. Paxtest. Available from URL http://www.adamantix.org/paxtest/.
[6] The Fedora Community. The
http://fedora.redhat.com/.
fedora project. Available
from URL
[7] Standard Performance Evaluation Corporation. Spec cpu2000 v1.2. Available
from URL http://www.spec.org/cpu2000/.
[8] Crispan Cowan, Calton Pu, Dave Maier, Jonathan Walpole, Peat Bakke, Steve
Beattie, Aaron Grier, Perry Wagle, and Qian Zhang. Stackguard: Automatic
adaptive detection and prevention of buffer-overﬂow attacks. In 7th USENIX
Security Symposium, San Antonio, Texas, January 1998. Available from URL
http://wirex.com/ crispin/usenixsc98.pdf.
[9] Ulrich Drepper. Security enhancements in red hat enterprise linux (besides
selinux). Available from URL http://people.redhat.com/drepper/nonselsec.pdf,
June 2004.
[10] S. Forrest, A. Somayaji, and D. Ackley. Building diverse computer systems. In
6th Workshop on Hot Topics in Operating Systems, Los Alamitos, CA, pages
62-72. IEEE Computer Society Press, 1997.
[11] Apache Software Foundation. Apache benchmark. Available from URL
http://httpd.apache.org/docs/2.0/programs/ab.html.
[12] Apache Software Foundation. Apache http server project. Available from URL
http://httpd.apache.org.
[13] The
IEEE
and
The Open Group.
Speciﬁcations:
http://www.opengroup.org/onlinepubs/009695399/functions/mmap.html.
2004. Availale
edition,
mmap,
6
The Open Group Base
from URL
[14] The
IEEE
and
The Open Group.
Speciﬁcations:
http://www.opengroup.org/onlinepubs/009695399/functions/rand.htm.
2004. Availale
edition,
rand,
6
The Open Group Base
from URL
[15] Larry McVoy and Carl Staelin. Lmbench: Tools for performance analysis.
Available from URL http://www.bitmover.com/lmbench/.
[16]
Ingo
http://people.redhat.com/mingo/exec-shield/.
Exec-shield.
Molnar.
Available
from
URL
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006