2.2.3 查看容器进程...............................25 4.2.3 挂载主机文件作为数据卷...........57 17
2.2.4 查看容器信息...............................25 4.2.4 数据卷容器..................................57
2.2.5 容器内执行命令...........................26 4.2.5 数据的备份与恢复.......................59 18
X 目 录
4.3 容器连接.................................................60 8.2 部署镜像注册服务器............................102
4.3.1 容器命名......................................60 8.3 开发.......................................................103
4.3.2 容器连接......................................60 8.3.1 项目开发....................................103
4.3.3 代理连接...............................................62 8.3.2 制作和上传镜像........................104
8.4 测试.......................................................105
第二篇 案例篇：综合案例 8.5 部署.......................................................105
第9章 在阿里云上部署WordPress.......107
第5章 创建SSH服务镜像........................66
9.1 初始化阿里云Docker环境...................107
5.1 基于commit命令的方式..........................66 9.2 部署MySQL容器.................................109
5.2 基于Dockerfile的方式...........................70 9.3 部署WordPress容器............................109
第6章 综合案例1：Apache+PHP+ 第10章 使用私有仓库...............................112
MySQL...............................................72
10.1 使用docker-registry............................112
6.1 构建mysql镜像.......................................72 10.2 用户认证.............................................115
6.1.1 编写镜像Dockerfile....................73
6.1.2 构建和上传镜像..........................75 第11章 使用Docker部署Hadoop
6.2 构建apache+php镜像..............................76 集群................................................118
6.2.1 编写镜像Dockerfile....................77 11.1 Hadoop简介........................................118
6.2.2 构建和上传镜像..........................79 11.2 构建Hadoop镜像...............................119
6.3 启动容器.................................................80 11.3 构建Hadoop集群...............................122
11.3.1 Ambari简介...........................123
第7章 综合案例2：DLNNM.....................82
11.3.2 部署Hadoop集群..................123
7.1 构建mongodb镜像...................................83
7.1.1 编写镜像Dockerfile....................84
第三篇 高级篇：高级话题、API、
7.1.2 构建和上传镜像..........................84
7.2 构建Node.js镜像...................................86 工具及集群管理
7.2.1 项目源文件..................................86
7.2.2 编写镜像Dockerfile....................88 第12章 容器网络.......................................128
7.2.3 构建和上传镜像..........................89 12.1 容器网络的原理..................................128
7.3 连接Node.js服务和MongoDB服务......89 12.1.1 基础网络工具........................128
7.3.1 制作代理镜像mongo- 12.1.2 网络空间虚拟化....................131
abassador.....................................89 12.1.3 网络设备虚拟化....................132
7.3.2 启动MongoDB服务....................91 12.1.4 容器运行的4种网络模式.....135
7.3.3 启动Node-Web-API服务............92 12.1.5 手动配置容器的网络环境.....137
7.4 搭建前端Nginx.......................................93 12.2 配置及原理..........................................138
7.4.1 构建镜像并运行..........................93 12.2.1 基本配置................................138
7.4.2 验证Web应用.............................95 12.2.2 容器互联配置及原理.............140
第8章 阿里云Docker开发实践...............97 12.2.3 容器内访配置及原理.............142
12.2.4 容器外访配置及原理.............143
8.1 阿里云Docker介绍................................99
12.2.5 创建点对点连接....................144
目 录 XI
12.3 网桥.....................................................146 16.2.4 标签........................................194
12.3.1 配置网桥................................146 16.3 架构和组件..........................................195
12.3.2 构建自己的网桥.....................146 16.3.1 主控节点................................195 2
16.3.2 从属节点................................198
第13章 安全................................................148
16.3.3 组件交互流程........................198
13.1 命名空间..............................................148 16.4 Kubernetes实战...................................200 3
13.2 cgroups.................................................151 16.4.1 环境部署................................201
13.3 Linux能力机制....................................152 16.4.2 应用操作................................207 4
第14章 Docker API...................................154 第17章 shipyard.........................................214
5
14.1 API概述..............................................154 17.1 简介.....................................................214
14.2 绑定Docker后台监听接口.................155 17.2 shipyard操作.......................................217
14.3 远程API..............................................158 17.2.1 鉴权........................................217 6
14.3.1 容器相关的API.....................158 17.2.2 引擎........................................217
14.3.2 镜像相关的API.....................164 17.2.3 容器........................................220 7
14.4 平台API..............................................167 17.2.4 服务密钥................................222
14.4.1 注册服务器架构及流程.........167 17.2.5 Web钩子密钥........................223 8
14.4.2 操作Hub API.........................169 17.2.6 事件........................................223
14.5 API实战：docker-py库编程...............173 17.2.7 集群信息................................224
14.5.1 docker-py开发环境的搭建....173 9
14.5.2 docker-py库编程....................174 第18章 Machine+Swarm+Compose....225
18.1 Machine...............................................225 10
第15章 Fig...................................................177
18.2 Swarm..................................................227
15.1 Fig简介...............................................177 18.2.1 架构和组件............................228
11
15.2 Fig安装...............................................177 18.2.2 实操........................................230
15.3 Rails开发环境配置.............................178 18.2.3 发现服务和调度.....................233
15.4 Django开发环境配置..........................180 18.3 Compose..............................................239 12
15.5 WordPress开发环境配置....................182
15.6 Flocker：跨主机的Fig应用................184 13
第四篇 附录
第16章 Kubernetes...................................189
16.1 Kubernetes简介...................................189 附录A 常见镜像..........................................242 14
16.2 核心概念..............................................190
附录B Docker API列表............................262
16.2.1 节点........................................190 15
16.2.2 Pod.........................................190 附录C 参考资料...........................................278
16.2.3 服务........................................191
16
17
18
12 目 录
Part 1
第一篇
基础篇 ：Docker 基础
本 篇 内 容
第1章 Docker简介
第2章 容器
第3章 镜像
第4章 数据卷与容器连接
2 第1章 Docker简介
第 1 章
Docker简介
从虚拟机到容器，再到现在Docker的出现，虚拟化技术越来越受到互联网业界的关注和看好。
在本章中，我们简要介绍一下Docker，其中主要包括以下内容。
Docker简介，其中包括Docker的概念、产生的背景、两个比Docker更早的虚拟化技术（虚拟
机和容器）及其异同、Docker相对于一般容器的改进和优点以及Docker的应用场景。
 Docker的架构和组件。Docker是一种C/S架构的容器引擎，包含镜像、容器和库这3个重要
概念。
 Docker的相关技术，主要从隔离性、可度量性、移植性和安全性这4个方面讨论。
 Docker的安装，其中包含各种Linux变种系统上的安装以及通过虚拟工具在Windows和OS
X上的安装。
1.1 Docker 简介
在互联网初期，几乎所有的应用都以协议栈堆叠的形式进行开发，并且部署到单一的专有服
务器上。如图1-1所示，15年前的应用又笨又重，而当时的终端设备也非常笨重，应用是基于一
系列良好定义的协议栈进行开发的，它们包含中间件、运行时环境和操作系统；硬件所在的硬件
环境也完全一致，即为一个服务配置单一的专有服务器，也就是说脱离了它原本的环境，整套系
统或许就不能正常工作。随着互联网的发展，这种模式越来越不能满足日益复杂的互联网环境和
产品需求。今天，应用开发者可以通过组合不同的服务来构建和装配应用，并使得应用能够跨越
不同的硬件环境，如公共的、私有的以及虚拟的云服务器。
做到既能够组合当前最佳服务又跨越多种运行环境并非容易的事情。图1-2展示了当前一个
网络应用可能涉及的方方面面，在软件层面，它的前台可能采用Nginx 1.5+ModSecurity+
OpenSSL+Bootstrap 2来构建，后台采用Python 3.0等来构建，而在API端可能采用Python 2.7，数
据库方面可能有多种数据库存在，每一项都是拿现存已有的服务，进而装配出应用。在硬件层面，
它面对的环境错综复杂，可能是在虚拟机上部署，也可能在公共云、开发者的个人电脑、测试服
务器以及产品集群等上部署。当一个应用拥有复杂的软件依赖关系和多样的硬件运行环境时，有
以下几个问题必须面对。
1.1 Docker简介 3
1
2
3
4
5
6
图1-1 互联网应用的演变
 是否能够处理应用依赖的多样性和依赖库之间的不良反应？
7
 是否能够适应硬件环境的多样性？
 服务和应用之间的交互是否合理？
9
 是否可以在多个平台之间快捷移动？
8
10
10
11
13
14
15
16
图1-2 应用的软件依赖和硬件运行环境的复杂性
17
想象一下将图1-2所示的各项应用和服务部署到各种硬件环境中的组合，每一个服务都有可
18
能被部署在硬件环境中的一种甚至是多种。这些服务和运行环境的组合是一个可怕的矩阵，每一
4 第1章 Docker简介
个服务都需要考虑它将来可能会在多种运行环境下运行。而不同环境对服务的配置也不尽相同，
一个环节出错都将给工程进度带来不可预知的迟滞。这给应用的开发人员带来非常大的麻烦，他
们可能因此而陷入这些琐碎的事物之中。
有没有一种方法或是一样东西，能够让开发者一次性解决上面的所有问题呢？有，当然存在！
那它是什么呢？在揭开谜底之前，我们先卖个关子。
如图1-3所示，20世纪60年代以前的海运，大多数散货通过船进行托运，托运人和承运商都
担心货物放置在一起会发生挤压、受损等不良现象，例如一批咖啡豆和钢琴放在了一起，或是一
批钢材和香蕉压在了一起等。而且，不同的运输方式之间转运也非常麻烦，港口的码头需要装卸
各式各样的货物，其效率低下，而且转运到火车汽车的时候也得面临这个问题。不同货物和不同
交通工具之间的组合也是一个巨大的二维矩阵，你会发现这个传统行业的问题和我们刚才遇到的
问题是如此的一样！海运界最后在美国海陆运输公司的推动下，制定了国际标准集装箱来解决这
个棘手的问题。
图1-3 1960年前的货运
如图1-4所示，所有的货物都可以通过集装箱指定的方式打包进集装箱内部，货物之间的相
互影响被集装箱隔绝。集装箱是一个货物集对外的标准接口，无论是海运码头还是汽运，处理的
都是标准统一的集装箱，一个标准让货物在多种运输方式下畅通无阻，这极大地加快了货物的装
卸、堆积和运输速度，提高了运输的安全性，降低了运输成本。集装箱出现后，得到了大规模的
推广，也进一步促进了大宗贸易的全球化。现在，集装箱的货运量已经占到了全球贸易的90%以
上，每年大约有5000多艘货轮运送着2亿个集装箱。
回到主题，在软件应用开发中，我们期待有一种东西，它能够像集装箱一样方便地打包应用
程序，隔离它们之间的不良影响，使应用能够在各种运行环境下运行并且在平台之间易于移植。
Docker，正是这个集装箱。在Docker出现之前，类似的技术已经存在，例如虚拟机和容器，然而
它们能够解决前面4个问题里面的其中某些，却不能解决所有，这也正是它与众不同和受到热捧
的重要原因。接下来，我们进入Docker的主题。
1.1 Docker简介 5
1
2
3
4
5
6
图1-4 标准集装箱的出现解决了运输方面的难题
7
1.1.1 Docker的概念
什么是Docker？ 9
Docker是一个开源平台，它包含容器引擎和Docker Hub注册服务器。
8
 Docker容器引擎：该引擎可以让开发者打包他们的应用和依赖包到一个可移植的容器中，
然后将其发布到任何流行的Linux机器上。
10
 Docker Hub注册服务器：用户可以在该服务器上创建自己的镜像库来存储、管理和分享
镜像。利用Docker，可实现软件的一次配置、处处运行。
10
Docker是PaaS提供商dotCloud开源的一个基于LXC的高级容器引擎，其源代码托管在GitHub
上，它基于Go语言并遵从Apache 2.0协议。Docker自2013年诞生以来，就受到业内的高度关注， 11
从RedHat在RHEL 6.5中集成对Docker的支持，到Google的计算引擎支持Docker在其之上运行，再
到国内百度的App引擎也是基于Docker部署的，以及越来越多的软件采用Docker部署。可以说， 13
在云计算的背景下，Docker正带来一场软件开发的革命。由于Docker的影响越来越大，dotCloud
公司也更名为Docker公司。随着Docker越来越成熟，它后面采用了自己的libContainer来替换LXC。 14
1.1.2 Docker的背景
15
前面提到，软件开发者急需一种像集装箱一样的容器来装配运输软件应用。而在云计算兴起
16
后，服务和运行平台越来越多样，这种需求变得更加迫切。云计算兴起后，软件开发更趋向于组
件组装，选取最合适的服务集合装配到一起构建出最终的产品，并将应用部署到各类云平台之上。
17
云计算平台对硬件进行抽象和虚拟，按量提供给开发者，使得开发者从硬件管理问题中解脱出来，
典型的云计算平台有亚马逊的AWS、国内的阿里云等。在云计算时代，硬件的部署和管理问题已
18
经得到了很好的解决，然而软件的依赖、部署和管理问题依然存在，这主要体现在以下几个方面。
6 第1章 Docker简介
 环境管理复杂。从操作系统到各种依赖库，再到真正的应用程序，开发者要关心整个环
境中的每一个环节。有些开发环境特别复杂，搭建过程漫长而且容易出错，而当需要将
这种开发环境部署到测试系统和产品环境中时，所有的配置可能需要重新配置。不同的
服务并存可能还会导致不良的影响，由于组件之间存在复杂的依赖关系，组件的版本升
级也非常烦琐，甚至面临升级失败。事实上，开发者最希望的是专注于自己的业务逻辑，
而不用在基础环境上耗费太多时间。如果基础环境可以直接拿来用，而不是每次都重新
发明轮子，那将极大地减轻开发者的负担，毕竟站在巨人的肩膀上才可以看得更远。因
此，我们需要从繁杂的管理细节中解脱出来。
 更为轻便的虚拟化需求。云计算时代采用标配硬件来降低成本，采用虚拟机的虚拟化手
段来满足用户的按量分配和隔离性要求。然而无论是KVM还是Xen，这些虚拟化软件技
术都显得冗余并且浪费资源。用户希望自己在云平台上花的每一分钱都能够用在刀刃上，
而不是将大部分钱耗费在一个个的操作系统和一些公共库上面。所以，在云计算平台上，
用户希望出现一个比虚拟机更为轻便的虚拟手段。
 移植性的需求。容器是一种比虚拟机更为轻便的虚拟技术，例如LXC。Docker本身也属
于容器的一种。容器可以解决资源浪费问题，然而在Docker出现之前的容器，并不是为
云计算环境设计的，在可移植性方面做得不好，而且难于配置。用户希望自己的容器可
以部署到尽可能多的平台上去，而又不用关心平台差异。显然，传统的容器都不能胜任。
新的需求驱动新的技术，Docker为问题而生，作为一个变革者，做了这个众人期待的“集装
箱”。如图1-5所示，Docker把运行环境比作海运，把操作系统比作货船，而把Docker容器比作集
装箱。Docker容器也就是软件的集装箱，Docker以一套标准的方法让用户可以构建自己的容器，
然后容器易于在各大平台移植和运行，Docker对应用也提供了良好的隔离性。Docker容器采用组
件的方式构建，用户可以像堆积木一样，基于现有的容器来增加自己的应用，从而构建出自己的
容器，Docker的增量式更改减少了容器的冗余，使得Docker容器易于修改和传输。
图1-5 Docker是一个软件应用的集装箱
1.1 Docker简介 7
Docker是如何做了这个变革者的呢？下面我们通过容器和虚拟机的对比说明一下。
1