            ++i;
            /* Bump l_direct_opencount of all objects so that they
               are not dlclose()ed from underneath us.  */
            ++l->l_direct_opencount;
              }
          assert (ns != LM_ID_BASE || i == nloaded);
          assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - 1);
          unsigned int nmaps = i;
          /* Now we have to do the sorting.  We can skip looking for the
             binary itself which is at the front of the search list for
             the main namespace.  */
          _dl_sort_maps (maps + (ns == LM_ID_BASE), nmaps - (ns == LM_ID_BASE),
                 NULL, true);
          __rtld_lock_unlock_recursive (GL(dl_load_lock));
          /* 'maps' now contains the objects in the right order.  Now
             call the destructors.  We have to process this array from
             the front.  */
          for (i = 0; i l_init_called)
            {
              /* Make sure nothing happens if we are called twice.  */
              l->l_init_called = 0;
              /* Is there a destructor function?  */
              if (l->l_info[DT_FINI_ARRAY] != NULL
                  || (ELF_INITFINI && l->l_info[DT_FINI] != NULL))
                {
                  /* When debugging print a message first.  */
                  if (__builtin_expect (GLRO(dl_debug_mask)
                            & DL_DEBUG_IMPCALLS, 0))
                _dl_debug_printf ("\ncalling fini: %s [%lu]\n\n",
                          DSO_FILENAME (l->l_name),
                          ns);
                  /* First see whether an array is given.  */
                  if (l->l_info[DT_FINI_ARRAY] != NULL)
                {
                  ElfW(Addr) *array =
                    (ElfW(Addr) *) (l->l_addr
                            + l->l_info[DT_FINI_ARRAY]->d_un.d_ptr);
                  unsigned int i = (l->l_info[DT_FINI_ARRAYSZ]->d_un.d_val
                            / sizeof (ElfW(Addr)));
                  while (i-- > 0)
                    ((fini_t) array[i]) ();
                }
                  /* Next try the old-style destructor.  */
                  if (ELF_INITFINI && l->l_info[DT_FINI] != NULL)
                DL_CALL_DT_FINI
                  (l, l->l_addr + l->l_info[DT_FINI]->d_un.d_ptr);
                }
    #ifdef SHARED
              /* Auditing checkpoint: another object closed.  */
              if (!do_audit && __builtin_expect (GLRO(dl_naudit) > 0, 0))
                {
                  struct audit_ifaces *afct = GLRO(dl_audit);
                  for (unsigned int cnt = 0; cnt objclose != NULL)
                    {
                      struct auditstate *state
                    = link_map_audit_state (l, cnt);
                      /* Return value is ignored.  */
                      (void) afct->objclose (&state->cookie);
                    }
                  afct = afct->next;
                }
                }
    #endif
            }
              /* Correct the previous increment.  */
              --l->l_direct_opencount;
            }
        }
        }
    #ifdef SHARED
      if (! do_audit && GLRO(dl_naudit) > 0)
        {
          do_audit = 1;
          goto again;
        }
      if (__glibc_unlikely (GLRO(dl_debug_mask) & DL_DEBUG_STATISTICS))
        _dl_debug_printf ("\nruntime linker statistics:\n"
                  "           final number of relocations: %lu\n"
                  "final number of relocations from cache: %lu\n",
                  GL(dl_num_relocations),
                  GL(dl_num_cache_relocations));
    #endif
    }
可以看一下`GL`的定义和`_rtld_global`、`link_map`大概结构体，
    #  define GL(name) _rtld_local._##name
    # else
    #  define GL(name) _rtld_global._##name
    struct rtld_global
    {
    #endif
      /* Don't change the order of the following elements.  'dl_loaded'
         must remain the first element.  Forever.  */
    /* Non-shared code has no support for multiple namespaces.  */
    #ifdef SHARED
    # define DL_NNS 16
    #else
    # define DL_NNS 1
    #endif
      EXTERN struct link_namespaces
      {
        /* A pointer to the map for the main map.  */
        struct link_map *_ns_loaded;
        /* Number of object in the _dl_loaded list.  */
        unsigned int _ns_nloaded;
        /* Direct pointer to the searchlist of the main object.  */
        struct r_scope_elem *_ns_main_searchlist;
        unsigned int _ns_global_scope_alloc;
        unsigned int _ns_global_scope_pending_adds;
        /* Once libc.so has been loaded into the namespace, this points to
           its link map.  */
        struct link_map *libc_map;
        /* Search table for unique objects.  */
        struct unique_sym_table
        {
          __rtld_lock_define_recursive (, lock)
          struct unique_sym
          {
        uint32_t hashval;
        const char *name;
        const ElfW(Sym) *sym;
        const struct link_map *map;
          } *entries;
          size_t size;
          size_t n_elements;
          void (*free) (void *);
        } _ns_unique_sym_table;
        /* Keep track of changes to each namespace' list.  */
        struct r_debug _ns_debug;
      } _dl_ns[DL_NNS];
    ......
    struct link_map
      {
        /* These first few members are part of the protocol with the debugger.
           This is the same format used in SVR4.  */
        ElfW(Addr) l_addr;        /* Difference between the address in the ELF
                       file and the addresses in memory.  */
        char *l_name;        /* Absolute file name object was found in.  */
        ElfW(Dyn) *l_ld;        /* Dynamic section of the shared object.  */
        struct link_map *l_next, *l_prev; /* Chain of loaded objects.  */
        struct link_map *l_real;
        /* Number of the namespace this link map belongs to.  */
        Lmid_t l_ns;
        struct libname_list *l_libname;
        ElfW(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM
                  + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];
    .....
此时`nloaded`赋值为`_rtld_global->_dl_ns[0]._ns_nloaded`即4（链表的个数），根据调试代码知道从else命令行开始执行。其实注释里有说明接下来的操作，分配数组来保存指针。
我们可以通过`link_map`结构体指针l_next指针来看一下有哪些`link_map`结构体是这链表的。
    pwndbg> p *(struct link_map *)0x7ffff7ffe220
    $6 = {
      l_addr = 93824992231424,
      l_name = 0x7ffff7ffe7c8 "",
      l_ld = 0x555555557dc0,
      l_next = 0x7ffff7ffe7d0,
      l_prev = 0x0,
      l_real = 0x7ffff7ffe220,
    .....
    pwndbg> p *(struct link_map *)0x7ffff7ffe7d0
    $7 = {
      l_addr = 140737353900032,
      l_name = 0x7ffff7fc6371 "linux-vdso.so.1",
      l_ld = 0x7ffff7fc63e0,
      l_next = 0x7ffff7fc0200,
      l_prev = 0x7ffff7ffe220,
      l_real = 0x7ffff7ffe7d0,
    ......
    pwndbg> p *(struct link_map *)0x7ffff7fc0200
    $8 = {
      l_addr = 140737351548928,
      l_name = 0x7ffff7fc01e0 "/lib/x86_64-linux-gnu/libc.so.6",
      l_ld = 0x7ffff7f9fbc0,
      l_next = 0x7ffff7ffda48 ,
      l_prev = 0x7ffff7ffe7d0,
      l_real = 0x7ffff7fc0200,
    ......
    pwndbg> p *(struct link_map *)0x7ffff7ffda48
    $9 = {
      l_addr = 140737353908224,
      l_name = 0x555555554318 "/lib64/ld-linux-x86-64.so.2",
      l_ld = 0x7ffff7ffce70,
      l_next = 0x0,
      l_prev = 0x7ffff7fc0200,
      l_real = 0x7ffff7ffda48 ,
    ......
直到link_map结构体指针`l_next`为null，一共有4个`link_map`结构体，之后就是遍历链表（源码如下），判断`l`（rtld_global结构体里的link_map结构体指针即_rtld_global._dl_ns._ns_loaded）的link_map结构体地址是否与结构体`l`里的l->l_real相等，相等的话继续遍历，将链表添加到maps里，同时i加一（初始为0）。因为后面有一次断言，这样使得我们每次遍历的时候都要满足`l
== l->l_real`，否则计数器i没有办法与`nloaded`（上面说到的链表长度）相等。还有一种情况就是`ns !=
LM_ID_BASE`进入下一个断言，这里就不细说，道理是一样的。
          for (l = GL(dl_ns)[ns]._ns_loaded, i = 0; l != NULL; l = l->l_next)
            /* Do not handle ld.so in secondary namespaces.  */
            if (l == l->l_real)
              {
            assert (i l_idx = i;
            ++i;
            /* Bump l_direct_opencount of all objects so that they
               are not dlclose()ed from underneath us.  */
            ++l->l_direct_opencount;
              }
          assert (ns != LM_ID_BASE || i == nloaded);
          assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - 1);
可以看一下maps数组里的指针
    pwndbg> p maps
    $1 = 0x7fffffffdd10
    pwndbg> x/8gx 0x7fffffffdd10
    0x7fffffffdd10:    0x00007ffff7ffe220    0x00007ffff7ffe7d0
    0x7fffffffdd20:    0x00007ffff7fc0200    0x00007ffff7ffda48
    0x7fffffffdd30:    0x00007fffffffdd30    0x00007ffff7fa1760
    0x7fffffffdd40:    0x0000000000000009    0x00005555555592a0
然后就是nmaps（nmap=4）次循环，之后判断link_map结构体`l`里的`l->l_init_called`是否为1，调试看一下发现为1。
          for (i = 0; i l_init_called)
            {
              /* Make sure nothing happens if we are called twice.  */
              l->l_init_called = 0;
           ...................
    pwndbg> p l->l_init_called
    $7 = 1
接下来判断link_map结构体`l`里的`l->l_info[DT_FINI_ARRAY] != NULL`。
    #define    DT_FINI_ARRAY    26        /* Array with addresses of fini fct *///在elf/elf.h里
                 /* First see whether an array is given.  */
                  if (l->l_info[DT_FINI_ARRAY] != NULL)
                {
                  ElfW(Addr) *array =
                    (ElfW(Addr) *) (l->l_addr
                            + l->l_info[DT_FINI_ARRAY]->d_un.d_ptr);
                  unsigned int i = (l->l_info[DT_FINI_ARRAYSZ]->d_un.d_val
                            / sizeof (ElfW(Addr)));
                  while (i-- > 0)
                    ((fini_t) array[i]) ();
                }
我们可以调试看看这里的值，不为null，执行if条件判断里的指令。
    pwndbg> p l->l_info[26]
    $8 = (Elf64_Dyn *) 0x555555557e10
然后就是可以计算array的值，为`15800+93824992231424=0x555555557DB8`其实就是`fini_array`
    pwndbg> p *(Elf64_Dyn *) 0x555555557e10
    $9 = {
      d_tag = 26,
      d_un = {
        d_val = 15800,
        d_ptr = 15800
      }
    }
    pwndbg> p *l
    $12 = {
      l_addr = 93824992231424,
      l_name = 0x7ffff7ffe7c8 "",
      l_ld = 0x555555557dc0,
    ......
后面的话`_dl_fini`函数进行剩下的三次循环，然后我们就回到`__run_exit_handlers`，因为`cur->idx==0且cur->next==0`。
    pwndbg> p *cur
    $2 = {
      next = 0x0,
      idx = 0,
      fns = {{
          flavor = 0,
          func = {
            at = 0x2155281939208b75,
            on = {
              fn = 0x2155281939208b75,
              arg = 0x0
            },
            cxa = {
              fn = 0x2155281939208b75,
              arg = 0x0,
              dso_handle = 0x0
            }
          }
        }, {
          flavor = 0,
          func = {
            at = 0x0,
            on = {
              fn = 0x0,
              arg = 0x0
            },
            cxa = {
              fn = 0x0,
              arg = 0x0,
              dso_handle = 0x0
            }
          }
        } }
    }
然后跳出循环，之后就调用`_exit (status);`，程序结束。
      while (true)
        {
        .......