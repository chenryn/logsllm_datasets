# Title: Poster: Proofs of Retrievability with Low Server Storage

## Authors:
- Michael Hanling
- Gaspard Anthoine
- Jean-Guillaume Dumas
- Aude Maignan
- Cl√©ment Pernet
- Daniel S. Roche

## Conference:
2014 IEEE 13th International Conference on Trust, Security and Privacy in Computing and Communications

## Related Work:
### Proofs of Ownership and Retrievability in Cloud Storage
- **Authors:** Ruiying Du, Lan Deng, Jing Chen, Kun He
- **Affiliation:** Department of Computer Science, Wuhan University, Wuhan, China, 430072
- **Contact:** Minghui Zheng, Department of Computer Science, Hubei University for Nationalities, Enshi, China, 445000

## Abstract
With the development and maturation of cloud computing technology, the demand for cloud storage is increasing. Deduplication is a fundamental requirement to save storage space on cloud servers. Since clients are untrusted from the server's perspective, the concept of Proofs of Ownership (PoWs) has been introduced for client-side deduplication. Conversely, clients also cannot fully trust the server, necessitating a way to verify the integrity of their stored files. However, most existing works focus only on one-way validation.

In this paper, we introduce a framework called Proofs of Ownership and Retrievability (PoOR), which addresses the need for mutual validation. In our PoOR scheme, clients can prove their ownership of files and verify their retrievability without uploading or downloading them. To ensure the recoverability and security of files on the server, we use erasure coding. To maintain constant communication costs, we employ Merkle Trees and homomorphic verifiable tags, which also induce acceptable storage overheads. We implemented our scheme and compared it with other schemes. The results show that the PoOR scheme is efficient in computational performance, especially for large files.

**Keywords:** cloud storage, homomorphic, POR, Merkle Tree, proofs of ownership

## Introduction
Cloud storage services have gained widespread popularity in recent years. However, the exponential increase in the amount of Internet data has made the demand for large storage spaces a critical challenge for cloud storage systems. Cloud service providers must invest significant human and financial resources to store and manage these data. According to literature, more than 70% of the data in cloud storage are duplicates. To alleviate the storage stress and make data management scalable, deduplication has become a basic requirement and a hot research topic.

In client-side deduplication, files are not transferred if they already exist on the server, saving both storage space and upload bandwidth. However, this introduces new security threats. How can the server trust that the client owns the file if it is not uploaded? Traditional solutions like "hash as a proof" or convergent encryption are not secure enough because hash values can be easily leaked and used by malicious users to cheat the cloud server. The PoWs construction by Halevi et al. provides a reliable way for users to prove ownership, but it does not consider an untrusted server and is inefficient in proving and verifying.

Moreover, in the cloud environment, clients often do not trust the cloud servers. There is a risk that cloud servers might conceal the loss or modification of client data, especially for large, rarely accessed files. Therefore, it is necessary for clients to verify that their data are stored faithfully. Schemes like PDP and POR have been proposed to address this, but few consider both deduplication and proof of retrievability.

In this paper, we propose a solution called Proofs of Ownership and Retrievability (PoOR). Our contributions are as follows:
1. We address both deduplication and proof of retrievability, protecting data from both malicious users and the server.
2. We design a PoOR scheme based on Merkle Hash Trees and homomorphic verifiable tags, allowing clients to prove ownership and verify retrievability without transferring or downloading files.
3. We evaluate the performance of PoOR through theoretical analysis and experiments, demonstrating its security and efficiency compared to other schemes.

The rest of the paper is organized as follows:
- Section 2 presents related work.
- Section 3 describes the framework of proofs of ownership and retrievability.
- Section 4 details our PoOR scheme.
- Section 5 contains the performance analysis and experimental results.
- Section 6 concludes the paper.

## Related Works
### A. Deduplication
Deduplication is a technique for reducing data redundancy. It aims to identify and eliminate identical files, maintaining a fixed number of copies. This technique can be divided into two categories: server-side and client-side deduplication.

- **Server-side deduplication**: The server checks whether two stored files are identical after the client uploads a file.
- **Client-side deduplication**: The client and server interactively check whether the uploading file exists on the server. To prevent cheating, the concept of proof of ownership was introduced, requiring the client to prove ownership without uploading the file.

### B. Proofs of Ownership
Proofs of ownership (PoWs) were proposed to solve the problem of using a small metadata as a proxy for the entire file in client-side deduplication. Early approaches used hash values, which are unreliable. Shai Halevi et al. [2] proposed a Merkle hash tree-based deduplication scheme, where owners can prove file ownership while adversaries cannot.

Halevi et al. proposed three constructions, with varying trade-offs between security and efficiency. However, their scheme has limitations, such as trusting the cloud service provider, large Merkle Trees, and linear dependence of proof length on the tree height and number of challenged leaves.

Pietro and Sorniotti [5] proposed an efficient PoW scheme, but it is vulnerable if the adversary has a similar file. Other works, such as Yang et al. [6] and Xu et al. [7], also address proof of ownership but do not meet our requirements. Our PoOR scheme builds on PoWs but improves efficiency and implements proof of retrievability.

### C. Proofs of Retrievability
Deswarte et al. [9] first highlighted the need to detect the integrity of data in remote storage systems. They used RSA-based hash functions, which have computational overheads. Filho et al. presented a similar scheme to avoid cheating in data transmission.

Ateniese et al. [10] introduced Provable Data Possession (PDP), a privately verifiable data possession scheme. PDP uses homomorphic verifiable tags based on RSA public-key encryption, reducing transmission costs. However, PDP does not support data recovery and is time-consuming due to exponent operations.

Juels and Kaliski [11] introduced Proofs of Retrievability (PoR), allowing the server to prove it stores the entire file and ensuring the client can retrieve the original file. Their secure PoR scheme embeds special blocks to enhance security.

Our PoOR scheme addresses the limitations of these approaches, providing a balanced solution for both ownership and retrievability in cloud storage.