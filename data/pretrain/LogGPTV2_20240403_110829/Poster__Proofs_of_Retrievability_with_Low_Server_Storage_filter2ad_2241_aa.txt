title:Poster: Proofs of Retrievability with Low Server Storage
author:Michael Hanling and
Gaspard Anthoine and
Jean-Guillaume Dumas and
Aude Maignan and
Cl&apos;ement Pernet and
Daniel S. Roche
2014 IEEE 13th International Conference on Trust, Security and Privacy in Computing and Communications
Proofs of Ownership and Retrievability in Cloud Storage 
Ruiying Du, Lan Deng, Jing Chen, Kun He 
Department of Computer Science 
Wuhan University 
Wuhan, China, 430072 
PI:EMAIL 
Minghui Zheng  
Department of Computer Science 
 Hubei University for Nationalities 
Enshi, China, 445000
Abstract—With  the  development  and  maturity  of  cloud 
computing  technology,  the  demand  for  cloud  storage  is 
growing.  Deduplication  is  a  basic  requirement  for  cloud 
storage  to  save  storage  space  of  cloud  servers.  And  as  clients 
are untrusted from the perspective of the server, the notion of 
Proofs  of Ownership (PoWs) has been proposed  in client-side 
deduplication. On the other hand, the clients cannot completely 
trust the server either, thus clients have to know whether their 
files are stored integrally in the cloud. However, most existing 
works  only  focus  on  one-way  validation.  In  this  paper,  we 
introduce  a  framework  called  Proofs  of  Ownership  and 
Retrievability  (PoOR)  considering  the  requirement  of  mutual 
validation. In our PoOR scheme, clients can prove to the server 
their ownership of files and verify the retrievability of the files 
without  uploading  or  downloading  them. For  ensuring  the 
recoverability and security of files in server, we encode files by 
erasure  code.  In  order  to  keep  the  communication  cost  in 
constant, we employ Merkle Tree and homomorphic verifiable 
tags  which  also  induce  acceptable  storage  overheads.  At  last, 
we implemente our scheme and compare it with other schemes. 
The  result  shows  that  the  PoOR  scheme  is  efficient  in 
computation performance, especially when the size of the file is 
large. 
Keywords—cloud 
storage;
homomorphic; POR; Merkle Tree 
proofs 
of 
ownership;
INTRODUCTION 
storage 
in  recent  years.  But  with 
I.
services  have  gained  widespread 
Cloud 
popularity 
the  exponential 
increasing  of  the  amount  of  Internet  data,  the  demand  of 
huge  storage  space  becomes  a  critical  challenge  for  cloud 
storage systems. The cloud service providers have to spend a 
lot  of  human  and  financial  resources  to  store  and  manage 
these data. Even worse, according to literature [1], more than 
70% data in cloud storage are duplicated data. To relieve the 
storage  stress  of  cloud  service  providers  and  to  make  data 
management  scalable,  deduplication  becomes  a  basic 
requirement  in  cloud  storage  systems  and  a  hot  research 
topic. In a client-side deduplication scheme, the file will not 
be  transferred  if it  already  exists  in  the  server, thus  both 
cloud storage space and uploading bandwidth can be saved. 
But it brings new security threats. Can the server believe that 
the client really owns the file if the client does not upload it? 
To convince the server, the client has to prove its ownership 
of  the  file.  Traditional  solutions  like  “hash  as  a  proof”  or 
convergent encryption are not safe enough because the hash 
value  of  a  file  can  be  easily  leaked  and  used  by  malicious 
users  to  cheat  the  cloud  server.  The  construction  PoWs  of 
Halevi  et  al.  [2]  provide  a  reliable  way  for  users  to  prove 
their  ownership  of  files.  However  it  does  not  take  the 
untrusted server into account, and is not efficient in proving 
and verifying. 
Moreover,  in  the  cloud  environment,  cloud  servers  are 
usually not trusted by clients. We consider that cloud servers 
tend  to  conceal  the  losing  and  modifying  of  clients’  data,
especially when the files are large and rarely accessed. So it
is necessary for clients to know whether their data are stored 
faithfully  in  the  server.  Schemes  like  PDP  and  POR  have 
been  proposed  to  deal  with  this  problem.  However,  few 
researches  consider  both  deduplication  and  proof  of 
retrievability in cloud storage systems. 
In this paper, we focus on the situation described above 
and  propose  a  solution  called  Proofs  of  Ownership  and 
Retrievability (PoOR). Our contribution can be summarized 
as follows: 
consider  both 
Primarily,  we 
the  problems  of 
deduplication  and  proof  of  retrievability. We  protect  data 
security  from  both  malicious  users  and  the  server,  and 
propose  a 
framework  of  proofs  of  ownership  and 
retrievability  which  includes  both  cross-user  client-side 
deduplication and privately verifiable proof of retrievability. 
Second,  we  design  a PoOR  scheme  based  on  Merkle 
Hash Tree and homomorphic verifiable tags. In this scheme, 
clients  prove  their  ownerships  of  the  files  they  want  to 
upload without really transferring the files to the server, and 
verify whether the cloud server actually maintains their data 
integrally without downloading them. 
Third,  we  evaluate  the  performance  of  PoOR  from 
several aspects through theoretical analysis and experiments. 
And the results show that our proposal is secure and efficient 
compared with some other schemes.  
The rest of this paper is organized as follows. In Section 
2,  we  present  some  related  works.  In  Section  3,  the 
framework of proofs of ownership and retrievability will be 
described and the detail of our PoOR scheme is presented in 
Section 4. Section 5 contains the performance analysis of our 
scheme  and  the  experiments  we’ve  done.  And  finally  we 
draw conclusions in Section 6. 
II.
RELATED WORKS
A. Deduplication 
Deduplication [1] is a useful technique for reducing data 
redundancy. The goal of deduplication is to find out whether 
978-1-4799-6513-7/14 $31.00 © 2014 IEEE
DOI 10.1109/TrustCom.2014.44
328
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:24:02 UTC from IEEE Xplore.  Restrictions apply. 
there  are  identical  files.  Storage  service  providers  employ 
this technique to maintain a fixed number of copies for any 
files.  This  technique  can  be  divided  into  two  categories: 
server-side deduplication and client-side deduplication. 
The  server-side  deduplication  [3]  which  is  run  by  the 
server is to check whether two files stored in the server are 
identical. That means, the client must upload a file first, then 
the  server  can  determine  whether  it  is  a  duplicate.  Trivial 
solutions  have  been  proposed  for  server-side  deduplication 
in [4]. 
However, the client does not want to upload the file if it
exists in the server, and that is why storage service providers 
employ 
the  client-side  deduplication.  The  client-side 
deduplication run by the client and the server interactively is 
to check whether the uploading file exists in the server. And 
to protect the server from being cheated by users who only 
have  the  hash  values  of  the  files,  the  concept  of  proof  of 
ownership  was  introduced  to  push  the  client  to  prove  its 
ownership of a file without uploading the file to the server. 
B. Proofs of ownership 
The notion of proof of ownership is proposed to solve the 
problem of using a small metadata as a proxy  of the entire 
file in client-side deduplication. In early researches, the small 
metadata is simply set to be the hash value of the file, which 
is  extremely  unreliable.  A  malicious  user  without  a  file  F
may get the hash value of the file from somewhere else, and 
then  trick  the  cloud  server  that  he  owns  this  file  by  just 
uploading the hash value.  
To solve the problem described above, Shai Halevi et al. 
[2] proposed a Merkle hash tree based deduplication scheme 
PoWs (Proofs of Ownership). In their scheme, any owner of 
a file F can prove to the server that he owns the file F, while 
any outside adversary without the entire file cannot prove his 
ownership with probability larger than a predefined threshold.  
Halevi et al. proposed three constructions. The first one is 
the most secure but not efficient one. To prove the ownership 
of a file F, a user will encode the whole content of F using 
erasure code, and construct a Merkle tree from the encoded 
file  blocks.  Then  the  user  will  send  the  sibling-paths  of  all 
the nodes requested by the server as a proof of ownership of 
F. The second and third constructions improved in efficiency 
with the sacrifice of security by compressing the M-length F
to L bits long in different ways. 
However there are some limitations in Halevi’s scheme: 
(1)  they  only  consider  outside  adversaries  but  completely 
trust  the  honest-but-curious  cloud  service  provider;  (2)  the 
Merkle Tree is built from all the file blocks, and it means that 
the  tree  can  be  extremely  large  and  time-consuming  to  be 
built;  (3)  users  take  the  sibling-path  of  all  the  challenged 
leaves as a proof, whose length is linear dependence to the 
height of the hash tree and the number of challenged leaves.
Pietro  and  Sorniotti  [5]  proposed  an  efficient  “PoW”
scheme. They randomly selected K bit positions ݅ଵ,…݅௄, and 
computed ܨ[݅ଵ]||…||ܨ[݅௄] as the  proof of ownership of the 
file  F.  This  scheme  is  extremely  efficient.  However,  if  the 
adversary  happens  to  own  a  similar  file  F’,  and  most  bit 
positions of F’ are the same with F, then the adversary can 
cheat the file F with a great possibility. 
There are some other works on proof of ownership. Yang 
et al. [6] proposed a method for client-side deduplication that 
they called it the provable ownership of files. They employ 
keyed hash function to generate fixed length proofs. Xu et al. 
[7]  made  an  attempt  to  support  client-side  deduplication 
scheme for encrypted data. Their scheme is evolved from [8],
that is, there is an encryption key which is derived from the 
file.  
However, none of these schemes satisfy our requirement. 
Our scheme of PoOR is based on PoWs, but we do better in 
efficiency.  Although  we  use  erasure  code  and  Merkle  Tree 
too, the computation and communication costs of our scheme 
are much smaller than PoWs, and at the same time we will 
implement the proof of retrievability. 
C. Proofs of Retrievability 
Deswarte et al. [9] first indicated that the integrity of data 
in  remote  storage  systems  should  be  detected.  They  check 
the integrity of files using a hash value calculated by a RSA 
based  hash  function.  This  scheme  relies  on  public  key 
cryptography,  and  there  will  be  an  avoidless  computation 
overhead.  Filho  et  al.  presented  a  scheme  with  the  same 
principle  while  their  purpose  is  to  avoid  cheating  in  data 
transmission. 
Ateniese  et  al.  [10]  made  a  great  breakthrough  in  data 
integrity verification by firstly defining PDP (Provable Data 
Possession), a privately data possession verification scheme. 
In PDP, a kind of homomorphic verifiable tag based on RSA 
public-key  encryption  algorithm  was  utilized  skillfully. 
Every  file  will  be  divided  into  blocks,  and  each  block 
generates  an  independent  tag.  While  proving,  tags  of
multiple  blocks  can  be  combined  into  one  single  tag.  As  a 
result, the transmission cost is decreased. In PDP, users can 
verify the integrity of their data by checking the fixed-length 
proof  instead  of  downloading  the  entire  file.  And  the 
memory cost of the client is small, users only need to store a
secret  key. However, PDP  does  not  support  data  recovery, 
that is, the data cannot be recovered if parts of them are lost. 
Besides, as there are a lot of exponent operations in PDP, the 
algorithms are time-consuming. 
Juels and Kaliski [11] introduced a related concept called 
Proofs  of  Retrievability  (PoR)  in  the  same  year.  The  PoR 
scheme allows the server to prove that it stores the entire file, 
and it also ensures that the client can retrieve the origin file.
The  authors  also  proposed  a  secure  PoR  scheme.  In  this 
construction,  they  embedded  some  special  blocks,  called 