### 你背叛了我！

**不可测量！**

#### 利用CVE-2017-16837的情景(1)

**受感染的软件栈**
1. 在事件日志中保留正常的哈希值。
2. 提取并计算正常的哈希值。
3. 将正常的哈希值存储在RAM中。
4. DCE和DLME中的钩子函数指针。
5. 重置TPM，并使用钩子函数重放正常的哈希值。
6. 唤醒系统。

**BIOS/UEFI**
- Sleep
- Wake up

**DCE and DLME (tboot)**
- Hooked functions
- Faked State (Normal State)
- Compromised State
- Hash values

#### 利用CVE-2017-16837的情景(2)

**BIOS/UEFI**
- tboot
- GRUB
- 受感染的内核
- 用户应用程序
- TPM
- 远程认证服务器
- 异常PCRs
- Nonce
- Sig(PCRs, Nonce) AIK

#### 利用CVE-2017-16837的情景(3)

**BIOS/UEFI**
- tboot
- GRUB
- 用户应用程序
- TPM
- 远程认证服务器
- 异常PCRs
- Nonce
- Sig(PCRs, Nonce) AIK
- 受感染的内核
- 重放好的哈希值
- 使用Sleep重置TPM
- 正常的PCRs

**时间线**
- 2017
- 2018
- 2019
- 第一次遭遇
- 第二次遭遇
- CVE-2017-16837
- CVE-2018-6622
- USENIX Security
- Black Hat Asia
- Black Hat Asia with Napper

### 内容 - CVE-2018-6622

**DRTM在唤醒时测量代码！**
- SRTM怎么样？

**唤醒SRTM的过程**
1. 操作系统要求保存状态。
2. 要求进入休眠状态。
3. 休眠。
4. 唤醒。
5. 要求恢复状态。
6. 继续操作系统。

**“灰色地带”漏洞（1）**
- CVE-2018-6622
- 操作系统
- ACPI (BIOS/UEFI)
- TPM
- 休眠(S3)
- 重置TPM

**什么是“纠正措施”？**
- 这意味着“重置TPM”
- TPM 2.0
- TPM 1.2

**利用CVE-2018-6622的方案**
1. 在事件日志中保留正常的哈希值。
2. 提取并计算正常的哈希值。
3. 将正常的哈希值存储在RAM中。
4. 休眠而不保存TPM状态。
5. 唤醒系统。
6. 重置TPM并重放正常的哈希值。
- 受感染的状态
- BIOS/UEFI
- 休眠
- 假冒状态（正常状态）
- 哈希值

**时间线**
- 2017
- 2018
- 2019
- 第一次遭遇
- 第二次遭遇
- CVE-2017-16837
- CVE-2018-6622
- USENIX Security
- Black Hat Asia
- Black Hat Asia with Napper

### 内容 - “Napper”

**又是你！**
- 经理
- 二次遭遇!!!
- “Napper”是一个可以检查TPM中的ACPI S3睡眠模式漏洞的工具。
- 它是一个基于Ubuntu 18.04的可启动USB设备。
- 它包含一个内核模块和用户态应用程序。
- 使系统“小睡”并检查漏洞。
- 内核模块通过修补内核代码在休眠时利用灰色区域漏洞（CVE-2018-6622）。
- 用户级应用程序检查TPM状态并显示报告。

**Napper内核模块(1)**
- 在TPM驱动程序中修补tpm_pm_suspend()函数。
- S3休眠序列时内核调用该函数。
- 内核模块将函数更改为“return 0;”。

**Napper内核模块(2)**
- Napper用户态应用程序由TPM相关软件和启动器软件组成。
- 我在tpm2_tools中添加了一个命令行工具“tpm2_extendpcrs”。
- 我还制作了一个易于使用的启动器软件，加载内核模块并检查TPM漏洞。
- 发射器加载napper的内核模块并小睡一会儿。
- 检查TPM的PCR是否都是ZEROS并扩展PCR。
- 使用tpm2_getinfo，dmidecode和journalctl工具收集和报告TPM和系统信息。

**Napper Live-CD和USB可启动设备**
- Ubuntu 18.04
- Kernel 4.18.0-15
- TPM相关软件
- Napper Live-CD.iso
- 用户级应用程序
- Pinguybuilder_5.1-7

**项目页面:**
- https://github.com/kkamagui/napper-for-tpm

### 对策 - CVE-2018-6622（灰色区域漏洞）

1. 在BIOS菜单中禁用ACPI S3睡眠功能。
   - 粗暴但简单有效。
2. 修改TPM 2.0规范以详细定义“纠正措施”并修补BIOS/UEFI固件。
   - 需要较长时间修改并应用于TPM或BIOS/UEFI固件。
   - 但是，这是根本的解决方案！

**检查并更新BIOS/UEFI固件！**

### 对策 - CVE-2017-16837（丢失的指针漏洞）

1. 将我的补丁应用于tBoot。
   - https://sourceforge.net/p/tboot/code/ci/521c58e51eb5be105a29983742850e72c44ed80e/
2. 将tBoot更新到最新版本。

### 结论

- 到目前为止，我们已经信任了不可信赖的硬件和软件！
- “信誉”不是“可信度”。
- 不仅要信任信誉，还要为自己检查一切。
- Napper可以帮助您检查TPM漏洞。
- 使用Napper检查您的系统或访问项目站点以获取结果。
- 使用最新版本更新BIOS/UEFI固件。
- 如果还没有修补固件，请立即禁用BIOS菜单中的ACPI S3睡眠功能！

**背叛信誉**
- 用信誉为赌注信任不可信的硬件和软件。

**Twitter: @kkamagui1**
- Seunghun Han
- PI:EMAIL
- 项目: https://github.com/kkamagui/napper-for-tpm

### 参考资料

- Seunghun, H., Wook, S., Jun-Hyeok, P., and HyoungChun K. Finally, I Can Sleep Tonight: Catching Sleep Mode Vulnerabilities of the TPM with the Napper. Black Hat Asia. 2019.
- Seunghun, H., Wook, S., Jun-Hyeok, P., and HyoungChun K. A Bad Dream: Subverting Trusted Platform Module While You Are Sleeping. USENIX Security. 2018.
- Seunghun, H., Jun-Hyeok, P., Wook, S., Junghwan, K., and HyoungChun K. I Don’t Want to sleep Tonight: Subverting Intel TXT with S3 Sleep. Black Hat Asia. 2018.
- Trusted Computing Group. TCG D-RTM Architecture. 2013.
- Trusted Computing Group. TCG PC Client Specific Implementation Specification for Conventional BIOS. 2012.
- Intel. Intel Trusted Execution Technology (Intel TXT). 2017.
- Butterworth, J., Kallenberg, C., Kovah, X., and Herzog, A. Problems with the static root of trust for measurement. Black Hat USA. 2013.
- Wojtczuk, R., and Rutkowska, J. Attacking intel trusted execution technology. Black Hat DC. 2009.
- Wojtczuk, R., Rutkowska, J., and Tereshkin. A. Another way to circumvent Intel trusted execution technology. Invisible Things Lab. 2009.
- Wojtczuk, R., and Rutkowska, J. Attacking Intel TXT via SINIT code execution hijacking. Invisible Things Lab. 2011.
- Sharkey, J. Breaking hardware-enforced security with hypervisors. Black Hat USA. 2016.