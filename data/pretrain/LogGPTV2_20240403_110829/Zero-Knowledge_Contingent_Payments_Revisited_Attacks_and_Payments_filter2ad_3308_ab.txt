the ZKCSP protocols, we built a library for semi-automated boolean
circuit generation. The SHA256 circuit that we produce has 22,272
AND gates, whereas the best publicly available circuit had 90,825
AND gates [45]. We released our SHA256 circuit together with our
code as it may be of independent use for circuit-based MPC and
FHE protocols that require SHA256 circuits.
1.5 Other related work
In [6], Banasik et al. provide a ZKCP solution which avoids the use
of NIZK by replacing the zero knowledge proof with an interactive
protocol performed online. Moreover they avoid using hash-locked
transactions since they claim that they are not standard and widely
accepted in the Bitcoin network2.
The protocol presented in [6] is vulnerable to the so-called maul-
ing problem, where an adversary which knows the hash identifier
T of a transaction is able to come up with a hash identifier T ′ that is
semantically equivalent to T (i.e. spends the same transaction, has
the same value, and the same inputs and outputs). As the authors of
[6] point out, there are many Bitcoin software clients that cannot
handle transactions appearing in the ledger with an hash identifier
which is different from the original one (namely, the one with which
they were posted) [4]. This effectively makes the transaction unre-
deemable, causing problems when creating Bitcoin contracts [3, 4].
While the authors acknowledge the mauling problem, their scheme
only addresses mauling due to malleability in ECDSA signatures,
but does not address mauling due to changing the script.
An Ethereum-based contingent payment protocol is described
by Tramer et al. in [46].
2 To the best of our knowledge, this is not really a serious issue.
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA2312 PRELIMINARIES
2.1 Bitcoin and Ethereum
Bitcoin is a decentralized digital currency proposed in 2008 [38].
We present only the necessary background for this paper here, but
refer the reader to [17] and [39] for a detailed treatment.
Bitcoins are typically associated with addresses, and an address
is just a hash of a public key. To transfer bitcoins from one address
to another, one crafts a transaction which lists one or more input
addresses from which the funds will be taken and one or more
output addresses to which the funds will be sent.
In order for a transaction to be valid, the transaction must be
signed with the private keys corresponding to the input addresses,
the sum of the outputs must be less than or equal to the sum of the
inputs, and the inputs must not have previously been spent [12, 38].
Signed transactions are broadcast to the Bitcoin peer-to-peer
network. Miners check the validity of transactions and group them
into blocks. Miners participate in a distributed consensus protocol
that chains these blocks into an append-only global ledger called
the block chain.
What we’ve described so far is a typical Bitcoin transaction,
known as a Pay-to-PubkeyHash transaction. However, for each
output, the transaction includes a script written in a stack-based
programming language that specifies the conditions which must be
met in order to spend this output in the future. For each input ad-
dress, the transaction contains a reference to a previous transaction
which listed this address as an output and specified the conditions
required for it to be spent.
For a Pay-to-PubkeyHash transaction, the output script simply
specifies an address and that in order to spend this output, one must
sign with the associated private key. But Bitcoin scripts can be more
complex as well. The Bitcoin scripting language has a limited set
of op_codes or built-in functions that can be used to create scripts.
Using the The OP_ SHA256 op_code, the Bitcoin scripting lan-
guage supports hash-locked transactions that specify a value y and
require that in order to spend this output, one must provide an x
such that SHA256(x ) = y.
A feature that was not initially included in the scripting language
but introduced in 2012 is Pay-to-ScriptHash (P2SH) addresses. To
redeem an output sent to a P2SH address, one must specify a script
that hashes to this address, and then meet the conditions specified
in the script[14].
Bitcoin scripts now also support OP_CHECKLOCKTIMEVERIFY and
OP_CHECKSEQUENCEVERIFY op_codes. The op_codes allow one to
specify execution paths in the spending scripts that can only be
validated after some relative or absolute time. For example, one can
send money to Alice’s address and specify that after 24 hours if
Alice has not redeemed the output, then Bob can claim it by signing
with his private key[14].
Although miners will accept the validity of all transactions that
Bitcoin supports when included in blocks that others mine, most
miners will only include a smaller subset of those transactions in
the blocks that they construct. These are referred to “standard”
transactions, and historically, this mean that it was quite difficult to
get nonstandard transactions onto the blockchain. In Bitcoin today,
however, this is no longer an issue since almost all scripts are now
considered standard when they are part of a P2SH transaction [2].
While Bitcoin’s scripting language contains another useful op_code,
it is not a Turing-complete language and is limited in practice.
Ethereum is another cryptocurrency with a much more expressive
scripting language that allows one to express arbitrary programs
as conditions for spending money. As transactions can specify
arbitrary scripts, there is no guarantee that they will ever halt. Each
Ethereum transaction therefore contains gas, or money that is sent
to the miner to run the transaction. Every computational step has
a fixed gas cost, and the miner will only run the computation until
it runs out of gas.
There is a global gas limit that specifies a maximum amount
of gas that can be spent in a single block, and consequently in a
single transaction. Although in theory Ethereum scripts can support
arbitrary programs, the current gas limits are quite restrictive and
do not allow for complex computations.
2.2 Cryptographic Definitions
In the rest of the paper we will use the term efficient algorithm to
denote probabilistic algorithms with a polynomial running time.
Also we denote with neg(n) a negligible function defined over the
integers, meaning that for every polynomial P (·) we have that there
exists an integer nP such that for all n > nP , neg(n) ≤ 1
Claw free function pairs We start by recalling the definition
of claw free function pairs. Informally these are pairs of efficiently
computable functions H1, H2 such that it is hard to find x1, x2 with
H1(x1) = H2 (x2).
Definition 2.1. Let CFG (·) be an efficient algorithm that on input
of a security parameter 1n outputs two functions H1,n and H2,n
with domain and image {0, 1}n. We say that CFG (·) is a claw free
function generator, and H1,n, H2,n are a claw-free pair if
P (n)
.
• H1,n and H2,n can be efficiently computed
• for any efficient algorithm A we have that for
(H1,n, H2,n ) ← CFG (1n )
Pr[A(H1,n, H2,n ) = (x1, x2) s.t.
H1,n (x1) = H2,n (x2)] ≤ neg(n)
Computational Indistinguishability Recall that two distribu-
tions are said to be computationally indistinguishable if no efficient
algorithm can distinguish if elements are sampled according to one
or the other distribution.
Definition 2.2. Let D1,n, D2,n be two (family of) distributions
defined over {0, 1}n . We say that D1,n, D2,n are computationally
indistinguishable if for any efficient algorithm A we have that
| Pr[x ← D1,n ; A(x ) = 1] − Pr[x ← D2,n ; A(x ) = 1]|
≤ neg(n)
2.3 Fair Exchange
In this section we recall the definition of fair exchange following
previous work in [5, 35]. We have two parties Alice and Bob who
want to exchange generic digital items. We know, due to a classic
result of Cleve [23], that in the presence of malicious parties a fair
exchange is impossible: one party will always have an advantage
over the other. The traditional way to solve this problem is to rely
on an Arbiter, a trusted third party (TTP), which is assumed to
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA232be honest and will help Alice and Bob exchange the items fairly.
An optimistic fair exchange protocol involves the Arbiter only if
one of the two parties does not behave honestly and complications
arise. Two honest parties can exchange goods without involving
the Arbiter.
The full definition in [5, 35] involves also two other parties
(assumed to also be honest): a Tracker and a Bank. The former is
used to make sure that the goods exchanged by the parties are the
correct ones, while the latter takes care of eventual payments and
money exchanges. The verification of the digital goods is executed
by the Tracker in a trusted off-line phase where parties are provided
with “verification keys” for the digital goods. For brevity’s sake we
are not going to describe this part and refer the reader to [5, 35].
Instead we just assume that Alice’s and Bob’s inputs include these
verification keys, together with some public parameters.
Definition 2.3. A fair exchange protocol is a three-party com-
munication protocol: Alice running algorithm A, Bob running an
algorithm B, and the Arbiter running a trusted algorithm T. All
parties run on input some public parameters PP, Alice runs on input
fA, VA, Bob runs on input fB , VB, and the Arbiter runs on a input
skT .
We denote with [a, b] ← [A( fA, VA), B( fB , VB ),T (skT )] the event
that at the end of the execution of the protocol Alice outputs a and
Bob outputs b, where a, b can be ⊥ meaning that the parties re-
ject the execution (e.g. their output is not valid according to their
verification key – we assume that the files fA, fB (cid:44) ⊥).
Completeness: A fair exchange protocol is complete if the execu-
tion of the protocol by honest parties results in Alice getting Bob’s
files and viceversa:
Pr[ [fB , fA] ← [A( fA, VA), B( fB , VB ),T (skT )]] = 1
We say that a fair exchange is optimistic if the algorithm T is not
invoked by the correct algorithms A and B.
Fairness: Intuitively, fairness states that, at the end of the proto-
col, either Alice and Bob get valid content (that is, content which
passes the verification algorithm they were given by the Tracker),
or neither Alice nor Bob get anything which passes the verification
procedure. The above informal notion of fairness however does
not capture the notion of partial information. It could be that a
possibly malicious ˆB learns something about a valid fA while A
outputs ⊥. We strengthen the definition of fairness to capture the
fact that if an honest party outputs ⊥ then the other party learns no
information. This is captured by a standard simulation definition.
We say that a protocol is fair if for all efficient algorithms ˆB there
exists an efficient simulator Sim ˆB
with oracle access to T such that
the two distributions
[⊥, SimTˆB
( fB , VB , VA)]
and
[⊥, b] ← [A( fA, VA), ˆB( fB , VB ),T (skT )]
are computationally indistinguishable. A dual condition must hold
for any possibly malicious efficient ˆA.
2.4 Smart Contracts: Fair Exchange over
Blockchains
Assume that the exchange is a typical marketplace transaction,
where A is a seller, fA is a digital good, B is a buyer, and fB is
money. If the money is implemented via a blockchain-based digital
currency such as Bitcoin, then one can leverage the assumption
that the blockchain is a trusted “entity” and use it as the arbiter in
a fair exchange protocol. Since the blockchain is involved in the
transaction anyway, to transfer the money from the buyer to the
seller, we can dispense with the optimistic feature, and just use a
protocol which always uses the arbiter.
These types of fair exchange over a blockchain have been called
smart contracts and can be abstracted to work in the following way.
The buyer B posts a transaction on the blockchain that basically
says
Transfer fB coins to the party who presents a string
f that satisfies the verification algorithm VB
Then A can post a transaction that says
Here is fA that satisfies VB. Transfer those fB coins
to my address.
This type of transactions can be implemented over blockchains
with sufficiently rich scripting languages: recall that a script is the
program that needs to be executed in order to spend an output
on the blockchain. The scripting language in Ethereum [20, 50] is
sufficiently rich, and one can in theory run any program as part
of a transaction, which allows the execution of arbitrary contracts.
In practice, the gas cost and global gas limit the complexity of
Ethereum scripts.
In the simplified transactions above, everybody will learn the
object f being purchased by B. But this problem can be avoided by
changing the verification procedure accordingly. B could request
that the object f being purchased be encrypted under his public
key, and published together with a non-interactive zero-knowledge
proof that f satisfies the verification algorithm VB. Note that the
latter is an NP statement so (at least in theory) it can be proven
in zero-knowledge. One interesting issue (which we discuss in
Section 3) is how to actually implement this NIZK proof, and in
particular the selection of the common reference string that is
needed by such proofs.
This type of smart contracts that allow parties to buy and sell
knowledge in a trustless manner have been named Zero-Knowledge
Contingent Payments (ZKCP), and as we will show below ZKCP
protocols have been proposed over blockchain systems with more
limited scripting language like Bitcoin [13].
2.5 Zero-Knowledge Contingent Payments:
Fair Exchange over Bitcoin
The problem with the smart contract described above is that it
is not possible to implement it directly in a Bitcoin transaction
since the scripting language does not allow arbitrary verification
procedures. Recall from Section 2.1 that a hash-locked transaction
allows a party to redeem a transaction output if he/she produces
the preimage (under SHA256) of a specific hashed value included in
the original transaction.
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA233Using hash-locked transactions the following construction was
originally presented by Maxwell in 2011, and is now well known
in the Bitcoin community [13, 37]: Alice (seller) and Bob (buyer)
engage in an offline phase, where Alice encrypts the string fA
with a key k (using any symmetric encryption scheme E, i.e. AES)
and publishes ˆf = Ek ( fA) and s = SHA256(k ) together with a ZK
proof that E−1
( ˆf ) satisfies the verification procedure VB.
Again this is an NP statement and therefore can be proven in ZK.
Since this interaction between Alice and Bob will not be posted
on the blockchain, the proof could be performed interactively or
non-interactively.
SHA256−1
If the proof is correct, Bob then broadcasts the following trans-
(s )
action to be included in the blockchain:
Transfer fB Bitcoins to the party who presents a
SHA256 preimage of s and signs the transaction with
pkAlice. If this output is still unspent after n blocks,
then the bitcoins can be claimed by pkBob.
At this point Alice can claim the coins by signing the transaction
that publishes k, which in turn will allow Bob to recover the digital
good fA.
Note that the transaction that Bob posts requires that the seller
provides both the preimage k as well as a signature. The reason
that we also require a signature is to prevent a front-running attack
in which Alice broadcasts k to the network to claim the funds,
but before Alice’s transaction is included in a block, some other
party (perhaps the miner) sees k and uses it to claim the funds for
themselves. To prevent this attack, the transaction requires Alice’s
signature as well, which nobody else can produce.
Also notice the second condition in the transaction that specifies
that after a certain amount of time elapses, Bob can himself claim
the output of this transaction. This is a refund clause that allows Bob
to reclaim his output in case Alice decides not to post k. Without
this clause, in the event that Alice decides not to complete the
protocol and publish k, Bob’s funds would be locked up and he
would neither have his money nor the string fA.
2.6 Example: Pay for Sudoku Solutions
When Maxwell first proposed ZKCP in 2011 it was only theoretical
as there was no known efficient general purpose zero-knowledge
protocol that could be used. But advances since then in zero knowl-
edge protocols [10, 25, 29] have made this protocol feasible and
indeed there is currently a publicly available implementation of