和 o/YEAH !!!!!
现在，Flash将
    setTimeout("log(\"http://evil.com/video.flv?\"payload\")", 0);
的结果发送给Facebook的javascript，并生成
    log("http://evil.com/video.flv?"[payload]")
所以，如果ogVideoUrl被设置为
    http://evil.com/video.flv#"+alert(document.domain+" XSSed!")+"
那么，Facebook将执行
    log("http://evil.com/video.flv?"+alert(document.domain+" XSSed!")+"")
并会显示一个小警告框，指出“facebook.com XSSed！”
这是因为浏览器解析URL时，不同的浏览器对特殊字符进行不同的编码：
  * Firefox会对URL中出现的所有“进行URL编码
  * Chrome浏览器会对URL的哈希部分（= fragment）之外的所有"都进行将URL编码（请注意：在Chrome的最新版本65中，这种行为已发生了变动，现在Chrome的行为与Firefox相同，会对所有的“都进行相应的编码处理
  * IE和Edge将不会对哈希部分或者URL的搜索部分（= query）中的“进行URL编码
  * Safari不会对哈希部分中的"进行URL编码
正如你所看到的，让浏览器决定如何对javascript代码中的URL内的特殊字符进行编码并不是一个好主意！
我立即将这个漏洞报告给Facebook，他们在第二天给予回复，称已经修复了这个Flash文件，不再使用setTimeout函数，现在Flash发送的是
    log("http://evil.com/video.flv?\"payload")
正如你所看到的，“已经被正确地转义为\” ，从而就避免了XSS漏洞。
**2.无需借助Flash的存储型XSS**
* * *
上面的XSS攻击需要借助于Flash，所以，我想知道在不借助Flash的情况下，是否可以找到其他有效载荷。
如果ogVideoType的值是“video/vimeo”，则会执行以下代码
    ogVideoUrl = absolutizeUrl(ogVideoUrl);
    ogVideoUrl = ogVideoUrl.substr(ogVideoUrl.lastIndexOf('/') + 1);
    playerDiv.innerHTML = '';
如您所见，absolutizeUrl(ogURL)
在注入playerDiv.innerHTML之前没有进行相应的编码处理，所以，如果将ogVideoUrl设置为
    http://evil.com/#" onload="alert(document.domain)"
playerDiv.innerHTML 就会变成：
这又是一个基于Facebook.com上下文的XSS漏洞！
在前一个XSS被修复的同一天，我又提交了这个漏洞；Facebook在短短一天内就修复了这个漏洞：
    ogVideoUrl = absolutizeUrl(ogVideoUrl);
    ogVideoUrl = ogVideoUrl.substr(ogVideoUrl.lastIndexOf('/') + 1);
    playerDiv.innerHTML = ''
这里的视频展示了这个XSS漏洞修复前情况，具体地址为：
第二天，我又发现了另一个漏洞：当ogVideoType是未知类型，比如“video/nothing”时，Facebook会显示一条错误消息，其中含有ogVideoUrl的链接，具体如下所示：
    errorDiv.innerHTML = ''
所以，如果ogVideoUrl的有效载荷设置为
    https://opnsec.com/#">
我立刻将这个漏洞报告给了Facebook，有意思的是，来自Facebook的WhiteHat计划的Neil告诉我，他正盘算着在第二天检查这些代码呢！
**对了，还有一个问题...**
* * *
ogVideoType另一种可能的取值是“silverlight”。Silverlight是微软公司的浏览器插件，它与Flash的关系，类似于VBscript与JavaScript的关系。
在Facebook（silverlightmediaelement.xap）上托管的silverlight文件的加载过程为：
    params = ["file=" + ogVideoUrl, "id=playerID"];
    silverlightDiv.innerHTML ='';
然后，silverlightmediaelement.xap会将日志信息发送到Facebook的JavaScript，这个情形有点像Flash文件。但是，这次它没有包含ogVideoUrl，只有player
ID，这是在initParams中发送的另一个参数，它是由Facebook定义的。之后，Silverlight会调用javascript函数[id]
_init()，其中的[id]为“playerID”。
在Silverlight中，参数不是由urls或Flash中的＆所分隔的，而是通过来进行分隔的。
如果ogVideoUrl包含逗号"，"，那么在这个逗号后面的所有字符都被silverlight视为另一个参数，这意味着使用如下的有效载荷
    https://opnsec.com/#,id=alert(document.domain)&
那么，silverlight就会像下面这样来加载：
    silverlightDiv.innerHTML ='';
Silverlight只考虑第一次出现的id，并将它的值设置为
    alert(document.domain)&
然后，Silverlight将调用以下JavaScript代码 :
    alert(document.domain)&_init()
这意味着又出现了XSS漏洞！
同一天，我又提交了这个漏洞，Neal回复说，他们将删除所有MediaElement组件，并启用另一种处理外部视频的新方式！
**  
WordPress会不会也存在这些漏洞呢？**
* * *
实际上，所有这些含有漏洞的代码都不是由Facebook开发的，那么问题在哪里呢？问题在于将视频嵌入到网页中时，他们使用了开源库MediaElementjs。MediaElementjs曾经是(现在仍然是)一个流行的模块，之所以流行，主要归功于它为版本较旧的浏览器提供了Flash
Fallback功能。特别需要注意的是，WordPress在处理短代码时，会默认使用这个模块。所以说，这些漏洞也存在于WordPress中，因为攻击者能够在WordPress评论或作者撰写的WordPress文章中植入存储型XSS(在WordPress中，作者角色不允许执行JavaScript
)。
我向WordPress报告了这些漏洞，实际上，几个月前还向WordPress报告了另一个漏洞。他们将这些问题反馈给了MediaElementjs团队，并回复说，他们正在进行修复。2018年2月，他们终于发布了与MediaElementjs相关的所有XSS漏洞的修复程序。
**小结**
* * *
在研究这些有趣的漏洞的过程中，我学到了很多东西。我希望你也喜欢这些学习的乐趣！
以下是一些建议：
  * Open Graph（以及像json-ld这样的替代品）是在网站上展示外部的富内容的好方法，但你必须小心使用（留意SSRF、XSS和Clickjacking）
  * 不要让浏览器替您解析JavaScript代码中的URL，因为每个浏览器有自己的方式，并且浏览器可能随时改变这些方式（如Chrome 64 -> 65）。相反，我们应该使用白名单正则表达式。
  * 对于那些使用了XHR、DOM Mutation和外部内容的高级动态XSS，目前的自动工具还无法检测出来。所以，即使是最安全、最有影响力的网站仍可能会受到这些漏洞的攻击。为了预防这些漏洞，需要进行深入的代码审查和认真的调试工作！
  * 不要害怕体型巨大的、经过压缩处理的和动态的JavaScript源代码。如果您在网站上发现一些潜在的危险功能，不妨自己动手检查一下它们的实现方式！
  * Facebook的WhiteHat是一个伟大的bug赏金计划！ 感谢Neal和及其团队。
祝阅读愉快！