## PostgreSQL 10 流式物理、逻辑主从 最佳实践  
### 作者              
digoal             
### 日期               
2017-07-11           
### 标签        
PostgreSQL , 流复制 , 主从 , 逻辑订阅    
----        
## 背景      
### 流复制起源  
PostgreSQL 自从2010年推出的9.0版本开始，支持流式物理复制，用户可以通过流式复制，构建只读备库(主备物理复制，块级别一致)。流式物理复制可以做到极低的延迟（通常在1毫秒以内）。     
### 同步流复制  
2011年推出的9.1版本，支持同步复制，当时只支持一个同步流复制备节点（例如配置了3个备，只有一个是同步模式的，其他都是异步模式）。  
在同步复制模式下，当用户提交事务时，需要等待这笔事务的WAL日志复制到同步流复制备节点，才会返回提交成功的ACK给客户端。  
同步模式下，可以确保数据的0丢失。（只要客户端收到了事务提交成功的ACK，这笔事务的WAL就有两份。）  
### 级联流复制  
2012年推出的9.2版本，支持级联流复制。意思是备库还可以再连备库。  
级联复制特别适合跨机房的使用，例如主库在A机房，备库在B机房，但是B机房需要建立多个备库时，那么B机房只需要建立一个直连主库的备库，其他的备库可以通过B机房的这个备库级联产生。从而减少网络开销。  
### 流式虚拟备库  
2012年推出的9.2版本，除了支持级联复制，还支持虚拟备库，什么是虚拟备库呢？就是只有WAL，没有数据文件的备库。  
通过虚拟备库，可以流式的接收WAL，进行实时的流式WAL归档。提高备份或归档的实时性。  
### 逻辑复制的基础  
2014年推出的9.4版本，在WAL中增加了逻辑复制需要的基础信息，通过插件，可以实现逻辑复制。  
逻辑复制可以做到对主库的部分复制，例如表级复制，而不是整个集群的块级一致复制。  
逻辑复制的备库不仅仅是只读的，也可以执行写操作。  
### 增加几种同步级别  
2016年推出的9.6版本，PG的流式复制，通过复制WAL达到同步的目的，因此同步级别也和WAL有关。通过synchronous_commit参数，可以配置事务的同步级别。   
1、on, 表示本地WAL fsync，同步standby WAL fsync。即两份持久化的WAL。   
2、remote_apply, 表示本地WAL fsync，同步standby WAL 已恢复。这个带来的RT最高。  
3、remote_write, 表示本地WAL fsync，同步standby WAL 异步write完成。一份持久化，备库的WAL可能还在OS CACHE中。  
4、local, 表示本地WAL fsync。  
5、off, 表示本地WAL写到wal buffer中即返回客户端事务提交成功的ACK，为异步提交（数据库CRASH可能导致事务丢失，但不会导致数据库不一致）。  
RT影响，从低到高如下：  
off, local, remote_write, on, remote_apply。  
### 流式备份压缩  
2017年推出的10版本，pg_basebackup, pg_receivewal支持流式压缩备份WAL。  
### quorum based 同步流复制  
2017年推出的10版本，支持quorum based的同步流复制，例如有3个备节点，你可以告诉主库，这个事务需要3份WAL副本，那么主库需要等待至少2个备节点已将WAL同步过去的反馈，才会将事务提交成功的ACK返回给客户端。  
quorum based同步流复制，结合raft协议，可以实现零数据丢失的高可用、高可靠架构。  
### 内置逻辑订阅、复制  
2017年推出的10版本，内置了逻辑订阅的功能。  
### 多master  
2017年推出的10版本，通过逻辑订阅的功能，可以实现多Master架构。  
## 一、流式 物理主从 最佳实践  
以一主两从，quorum based 同步（一副本）为例，介绍PG 10的主从最佳实践。  
### 环境  
三台机器(假设主机有64G内存)，同一局域网，相互网络互通（至少数据库监听端口应该互通）。  
Linux CentOS 7.x x64  
HOSTA : 监听端口1921  
HOSTB : 监听端口1921  
HOSTC : 监听端口1921  
(本文使用一台物理机来模拟，IP为127.0.0.1，端口分别为2921,2922,2923，读者请根据实际环境修改)  
### 软件安装略  
请参考  
[《PostgreSQL on Linux 最佳部署手册》](../201611/20161121_01.md)    
### 初始化主库  
```  
mkdir /disk1/digoal/pgdata2921  
chown digoal /disk1/digoal/pgdata2921  
initdb -D /disk1/digoal/pgdata2921 -E UTF8 --locale=C -U postgres  
```  
### 配置postgresql.conf  
```  
cd /disk1/digoal/pgdata2921  
vi postgresql.conf  
listen_addresses = '0.0.0.0'  
port = 2921  
max_connections = 1000  
unix_socket_directories = '.'  
tcp_keepalives_idle = 60  
tcp_keepalives_interval = 10  
tcp_keepalives_count = 10  
shared_buffers = 8GB  
maintenance_work_mem = 1GB  
dynamic_shared_memory_type = posix  
vacuum_cost_delay = 0  
bgwriter_delay = 10ms  
bgwriter_lru_maxpages = 500  
bgwriter_lru_multiplier = 5.0  
bgwriter_flush_after = 0  
effective_io_concurrency = 0  
max_worker_processes = 16  
backend_flush_after = 0  
wal_level = replica  
fsync = on  
synchronous_commit = remote_write  
full_page_writes = on  
wal_buffers = 128MB  
wal_writer_delay = 10ms  
wal_writer_flush_after = 0  
checkpoint_timeout = 30min  
max_wal_size = 16GB  
min_wal_size = 8GB  
checkpoint_completion_target = 0.5  
checkpoint_flush_after = 0  
max_wal_senders = 10  
wal_keep_segments = 1024  
synchronous_standby_names = 'ANY 1 (*)'  
hot_standby = on  
max_standby_archive_delay = 300s  
max_standby_streaming_delay = 300s  
wal_receiver_status_interval = 1s  
hot_standby_feedback = off  
log_destination = 'csvlog'  
logging_collector = on  
log_checkpoints = on  
log_connections = on  
log_disconnections = on  
log_error_verbosity = verbose      
log_timezone = 'PRC'  
log_autovacuum_min_duration = 0  
autovacuum_vacuum_scale_factor = 0.1  
autovacuum_analyze_scale_factor = 0.1  
autovacuum_freeze_max_age = 1000000000  
autovacuum_multixact_freeze_max_age = 1200000000  
autovacuum_vacuum_cost_delay = 0  
autovacuum_vacuum_cost_limit = 0  
vacuum_freeze_table_age = 800000000  
vacuum_multixact_freeze_table_age = 800000000  
datestyle = 'iso, mdy'  
timezone = 'PRC'  
lc_messages = 'C'  
lc_monetary = 'C'  
lc_numeric = 'C'  
lc_time = 'C'  
default_text_search_config = 'pg_catalog.english'  
```  
### 配置pg_hba.conf  
```  
cd /disk1/digoal/pgdata2921  
vi pg_hba.conf  
# "local" is for Unix domain socket connections only  
local   all             all                                     trust  
# IPv4 local connections:  
host    all             all             127.0.0.1/32            trust  
# IPv6 local connections:  
host    all             all             ::1/128                 trust  
# Allow replication connections from localhost, by a user with the  
# replication privilege.  
local   replication     all                                     trust  
host    replication     all             127.0.0.1/32            trust  
host    replication     all             ::1/128                 trust  
host replication all 0.0.0.0/0 md5  
```  
### 配置recovery.done  
```  
cd /disk1/digoal/pgdata2921  
vi recovery.done  
recovery_target_timeline = 'latest'  
standby_mode = on  
primary_conninfo = 'host=127.0.0.1 port=2921 user=rep password=pwd'  
# recovery_min_apply_delay = 0   #延迟多少分钟应用，用户可以配置延迟的备库，例如给一点误操作的缓冲时间。在备库不会这么早被应用。  
```  
### 启动主库  
```  
pg_ctl start -D /disk1/digoal/pgdata2921  
```  
### 创建流复制角色  
```  
psql -h 127.0.0.1 -p 2921  
psql (10beta1)  
Type "help" for help.  
postgres=# set synchronous_commit =off;  
SET  
postgres=# create role rep login replication encrypted password 'pwd';  
CREATE ROLE  
```  
### 生成备库1  
```  
mkdir /disk1/digoal/pgdata2922  
chown digoal /disk1/digoal/pgdata2922  
chmod 700 /disk1/digoal/pgdata2922  
export PGPASSWORD="pwd"  
pg_basebackup -D /disk1/digoal/pgdata2922 -F p -X stream -h 127.0.0.1 -p 2921 -U rep  
```  
#### 配置备库1 postgresql.conf  
```  
cd /disk1/digoal/pgdata2922  
vi postgresql.conf  
port = 2922  
```  
#### 配置备库1 recovery.conf  
```  
cd /disk1/digoal/pgdata2922  
mv recovery.done recovery.conf  
```  
#### 启动备库1  
```  
pg_ctl start -D /disk1/digoal/pgdata2922  
```  
### 生成备库2  
```  
mkdir /disk1/digoal/pgdata2923  
chown digoal /disk1/digoal/pgdata2923  
chmod 700 /disk1/digoal/pgdata2923  
export PGPASSWORD="pwd"  
pg_basebackup -D /disk1/digoal/pgdata2923 -F p -X stream -h 127.0.0.1 -p 2921 -U rep  
```  
#### 配置备库2 postgresql.conf  
```  
cd /disk1/digoal/pgdata2923  
vi postgresql.conf  
port = 2923  
```  
#### 配置备库2 recovery.conf  
```  
cd /disk1/digoal/pgdata2923  
mv recovery.done recovery.conf  
```  
#### 启动备库2  
```  
pg_ctl start -D /disk1/digoal/pgdata2923  
```  
### 流复制节点的状态监控  
#### 主库查询  
```  
psql -h 127.0.0.1 -p 2921  
psql (10beta1)  
Type "help" for help.  
postgres=# \x  
Expanded display is on.  
postgres=# select pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), sent_lsn)) as sent_delay,   
  pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), write_lsn)) as write_delay,   
  pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), flush_lsn)) as flush_delay,   
  pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), replay_lsn)) as replay_delay,   
  *  
from pg_stat_replication;  
-[ RECORD 1 ]----+------------------------------  
sent_delay       | 0 bytes  
write_delay      | 0 bytes  
flush_delay      | 0 bytes  
replay_delay     | 0 bytes  
pid              | 11962  
usesysid         | 16384  
usename          | rep  
application_name | walreceiver  
client_addr      | 127.0.0.1  
client_hostname  |   
client_port      | 63083  
backend_start    | 2017-07-11 17:15:31.231492+08  
backend_xmin     |   
state            | streaming  
sent_lsn         | 1/C0000060  
write_lsn        | 1/C0000060  
flush_lsn        | 1/C0000060  
replay_lsn       | 1/C0000060  
write_lag        |   
flush_lag        |   
replay_lag       |   