---
author: Seth Kenlon
category: 软件开发
comments_data:
- date: '2019-09-02 09:01:46'
  message: Python 现在是真火~
  postip: 61.49.113.210
  username: 来自北京的 Chrome 76.0|Windows 10 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 7054
date: '2019-09-01 23:43:25'
editorchoice: false
excerpt: 使用 Python 函数来最大程度地减少重复任务编码工作量。
fromurl: https://opensource.com/article/19/7/get-modular-python-functions
id: 11295
islctt: true
largepic: /data/attachment/album/201909/01/234309ja7ooanopazo3o2m.jpg
permalink: /article-11295-1.html
pic: /data/attachment/album/201909/01/234309ja7ooanopazo3o2m.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 11317
reviewer: wxy
selector: lujun9972
summary: 使用 Python 函数来最大程度地减少重复任务编码工作量。
tags:
- Python
thumb: false
title: 使用 Python 函数进行模块化
titlepic: true
translator: MjSeven
updated: '2019-09-01 23:43:25'
---
> 
> 使用 Python 函数来最大程度地减少重复任务编码工作量。
> 
> 
> 
![](/data/attachment/album/201909/01/234309ja7ooanopazo3o2m.jpg)
你是否对函数、类、方法、库和模块等花哨的编程术语感到困惑？你是否在与变量作用域斗争？无论你是自学成才的还是经过正式培训的程序员，代码的模块化都会令人困惑。但是类和库鼓励模块化代码，因为模块化代码意味着只需构建一个多用途代码块集合，就可以在许多项目中使用它们来减少编码工作量。换句话说，如果你按照本文对 [Python](https://www.python.org/) 函数的研究，你将找到更聪明的工作方法，这意味着更少的工作。
本文假定你对 Python 很熟（LCTT 译注：稍微熟悉就可以），并且可以编写和运行一个简单的脚本。如果你还没有使用过 Python，请首先阅读我的文章：[Python 简介](https://opensource.com/article/17/10/python-10)。
### 函数
函数是迈向模块化过程中重要的一步，因为它们是形式化的重复方法。如果在你的程序中，有一个任务需要反复执行，那么你可以将代码放入一个函数中，根据需要随时调用该函数。这样，你只需编写一次代码，就可以随意使用它。
以下一个简单函数的示例：
```
#!/usr/bin/env python3
import time
def Timer():
    print("Time is " + str(time.time() ))
```
创建一个名为 `mymodularity` 的目录，并将以上函数代码保存为该目录下的 `timestamp.py`。
除了这个函数，在 `mymodularity` 目录中创建一个名为 `__init__.py` 的文件，你可以在文件管理器或 bash shell 中执行此操作：
```
$ touch mymodularity/__init__.py
```
现在，你已经创建了属于你自己的 Python 库（Python 中称为“模块”），名为 `mymodularity`。它不是一个特别有用的模块，因为它所做的只是导入 `time` 模块并打印一个时间戳，但这只是一个开始。
要使用你的函数，像对待任何其他 Python 模块一样对待它。以下是一个小应用，它使用你的 `mymodularity` 软件包来测试 Python `sleep()` 函数的准确性。将此文件保存为 `sleeptest.py`，注意要在 `mymodularity` 文件夹 *之外*，因为如果你将它保存在 `mymodularity` *里面*，那么它将成为你的包中的一个模块，你肯定不希望这样。
```
#!/usr/bin/env python3
import time
from mymodularity import timestamp
print("Testing Python sleep()...")
# modularity
timestamp.Timer()
time.sleep(3)
timestamp.Timer()
```
在这个简单的脚本中，你从 `mymodularity` 包中调用 `timestamp` 模块两次。从包中导入模块时，通常的语法是从包中导入你所需的模块，然后使用 *模块名称 + 一个点 + 要调用的函数名*（例如 `timestamp.Timer()`）。
你调用了两次 `Timer()` 函数，所以如果你的 `timestamp` 模块比这个简单的例子复杂些，那么你将节省大量重复代码。
保存文件并运行：
```
$ python3 ./sleeptest.py
Testing Python sleep()...
Time is 1560711266.1526039
Time is 1560711269.1557732
```
根据测试，Python 中的 `sleep` 函数非常准确：在三秒钟等待之后，时间戳成功且正确地增加了 3，在微秒单位上差距很小。
Python 库的结构看起来可能令人困惑，但其实它并不是什么魔法。Python *被编程* 为一个包含 Python 代码的目录，并附带一个 `__init__.py` 文件，那么这个目录就会被当作一个包，并且 Python 会首先在当前目录中查找可用模块。这就是为什么语句 `from mymodularity import timestamp` 有效的原因：Python 在当前目录查找名为 `mymodularity` 的目录，然后查找 `timestamp.py` 文件。
你在这个例子中所做的功能和以下这个非模块化的版本是一样的：
```
#!/usr/bin/env python3
import time
from mymodularity import timestamp
print("Testing Python sleep()...")
# no modularity
print("Time is " + str(time.time() ) )
time.sleep(3)
print("Time is " + str(time.time() ) )
```
对于这样一个简单的例子，其实没有必要以这种方式编写测试，但是对于编写自己的模块来说，最佳实践是你的代码是通用的，可以将它重用于其他项目。
通过在调用函数时传递信息，可以使代码更通用。例如，假设你想要使用模块来测试的不是 *系统* 的 `sleep` 函数，而是 *用户自己实现* 的 `sleep` 函数，更改 `timestamp` 代码，使它接受一个名为 `msg` 的传入变量，它将是一个字符串，控制每次调用 `timestamp` 时如何显示：
```
#!/usr/bin/env python3
import time
# 更新代码
def Timer(msg):
    print(str(msg) + str(time.time() ) )
```
现在函数比以前更抽象了。它仍会打印时间戳，但是它为用户打印的内容 `msg` 还是未定义的。这意味着你需要在调用函数时定义它。
`Timer` 函数接受的 `msg` 参数是随便命名的，你可以使用参数 `m`、`message` 或 `text`，或是任何对你来说有意义的名称。重要的是，当调用 `timestamp.Timer` 函数时，它接收一个文本作为其输入，将接收到的任何内容放入 `msg` 变量中，并使用该变量完成任务。
以下是一个测试测试用户正确感知时间流逝能力的新程序：
```
#!/usr/bin/env python3
from mymodularity import timestamp
print("Press the RETURN key. Count to 3, and press RETURN again.")
input()
timestamp.Timer("Started timer at ")
print("Count to 3...")
input()
timestamp.Timer("You slept until ")
```
将你的新程序保存为 `response.py`，运行它：
```
$ python3 ./response.py
Press the RETURN key. Count to 3, and press RETURN again.
Started timer at 1560714482.3772075
Count to 3...
You slept until 1560714484.1628013
```
### 函数和所需参数