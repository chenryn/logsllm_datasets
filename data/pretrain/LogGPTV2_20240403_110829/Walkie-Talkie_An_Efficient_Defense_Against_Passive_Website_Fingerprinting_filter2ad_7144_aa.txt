title:Walkie-Talkie: An Efficient Defense Against Passive Website Fingerprinting
Attacks
author:Tao Wang and
Ian Goldberg
Walkie-Talkie: An Efficient Defense Against Passive 
Website Fingerprinting Attacks
Tao Wang, Hong Kong University of Science and Technology;  
Ian Goldberg, University of Waterloo
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/wang-tao
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXWalkie-Talkie: An Efﬁcient Defense Against
Passive Website Fingerprinting Attacks
Tao Wang
Department of Computer Science and Engineering
Hong Kong University of Science and Technology
PI:EMAIL
Ian Goldberg
Cheriton School of Computer Science
University of Waterloo
PI:EMAIL
Abstract
Website ﬁngerprinting (WF) is a trafﬁc analysis attack
that allows an eavesdropper to determine the web activ-
ity of a client, even if the client is using privacy tech-
nologies such as proxies, VPNs, or Tor. Recent work
has highlighted the threat of website ﬁngerprinting to
privacy-sensitive web users. Many previously designed
defenses against website ﬁngerprinting have been broken
by newer attacks that use better classiﬁers. The remain-
ing effective defenses are inefﬁcient: they hamper user
experience and burden the server with large overheads.
In this work we propose Walkie-Talkie, an effective
and efﬁcient WF defense. Walkie-Talkie modiﬁes the
browser to communicate in half-duplex mode rather than
the usual full-duplex mode; half-duplex mode produces
easily moldable burst sequences to leak less information
to the adversary, at little additional overhead. Designed
for the open-world scenario, Walkie-Talkie molds burst
sequences so that sensitive and non-sensitive pages look
the same. Experimentally, we show that Walkie-Talkie
can defeat all known WF attacks with a bandwidth over-
head of 31% and a time overhead of 34%, which is far
more efﬁcient than all effective WF defenses (often ex-
ceeding 100% for both types of overhead). In fact, we
show that Walkie-Talkie cannot be defeated by any web-
site ﬁngerprinting attack, even hypothetical advanced at-
tacks that use site link information, page visit rates, and
intercell timing.
1
Introduction
Website ﬁngerprinting (WF) attacks are classiﬁcation at-
tacks that allow a local, passively observing eavesdrop-
per1 to determine which web page a client is visiting by
observing the client’s sequence of packets. WF attacks
succeed against clients using privacy technologies, such
1Active eavesdroppers are not considered WF attackers in the liter-
ature, as later explained in Section 2.
as VPNs, IPsec, and Tor, that hide the contents and desti-
nations of packets. The attacker—such as the client’s ISP
or government—uses various packet sequence features,
such as packet counts, packet order, packet directions,
and unique packet lengths to classify the web page [5].
WF attacks require only local eavesdropping capabilities,
small computational cost, and carry little risk of detec-
tion. As web-browsing clients of these privacy technolo-
gies do not want to reveal the web pages they are visiting
to any eavesdropper, they need to defend their privacy
against WF in some way.
Website ﬁngerprinting is a well-established threat to
privacy in the literature [8, 14, 23], as well as in prac-
tice: Tor, a popular anonymity network, has imple-
mented a WF defense [24, 26]. However, Tor’s de-
fense does not succeed in lowering the accuracy of
WF attacks [6, 31]. Researchers have proposed alterna-
tive defenses, but these defenses are either ineffective
against newer attacks [31] or carry a very large over-
head [4, 8, 20, 31]. We describe previous website ﬁnger-
printing work in detail in Section 2.
In this paper, we present Walkie-Talkie (WT), a new
WF defense, with the following properties:
1. Effective: Many WF defenses have failed against
newer WF attacks. WT succeeds against all known
WF attacks, including attacks that leverage timing
and packet ordering.
2. Efﬁcient: A high bandwidth overhead burdens the
network, while a high time overhead frustrates the
user.
(We deﬁne these terms rigorously in Sec-
tion 3.2.) WT requires a much smaller overhead
than all known effective defenses.
3. Easy to use: WT requires no changes to web servers
and therefore does not impact server performance,
as it needs to be deployed only on the client and
proxies. Our implementation only modiﬁes the ap-
plication layer. Furthermore, the defense can be de-
USENIX Association
26th USENIX Security Symposium    1375
ployed incrementally as it does not depend on other
clients using the same defense.
Walkie-Talkie consists of two components:
half-
duplex communication and burst molding. We describe
both components in Section 4. These components trans-
form packet sequences of monitored sensitive pages and
benign non-sensitive pages, so that these packet se-
quences are exactly the same (each packet has the same
timing, length, direction and ordering). Since the packet
sequences are exactly the same, and WF attacks are
based solely on classifying packet sequences, no WF at-
tack can succeed against Walkie-Talkie. To mold sen-
sitive packet sequences into non-sensitive packet se-
quences, the client would need to have some information
about them. We will show that such information can be
practically obtained and delivered to the client.
For the purposes of this paper, we base our experi-
ments and implementation on Tor, though Walkie-Talkie
works on any other setting where website ﬁngerprint-
ing is a threat (using encryption with proxies to hide
from a local attacker). We evaluate Walkie-Talkie on
a data set collected over Tor, squaring off our defense
against known attacks and other known defenses in Sec-
tion 5. We show that known website ﬁngerprinting at-
tacks are unable to succeed against packet sequences un-
der Walkie-Talkie, and that our defense has a signiﬁ-
cantly lower overhead compared to known defenses. We
describe ways to defeat a hypothetical attacker using
more advanced strategies beyond known website ﬁnger-
printing attacks in Section 6. We conclude in Section 7,
and we include a link to share our code and data in the
Appendix.
2 Related Work
Remote side-channel analysis can be used to attack web
clients in a wide range of scenarios, including network
timing attacks [3], cache attacks [21], and browser ﬁn-
gerprinting [9]. Some of these involve an active attacker,
for example one that may send JavaScript requests when
the client visits an attacker-controlled web page. This
work focuses on defeating website ﬁngerprinting (WF),
where the attacker is passively monitoring web pack-
ets. Researchers have identiﬁed WF as a potential attack
against privacy since 1998 [7]. WF has become espe-
cially relevant with the growing popularity and usabil-
ity of privacy technologies such as Tor and the revela-
tion that state-level adversaries are willing to eavesdrop
on Internet users en masse [11]. As a result, Tor cur-
rently employs a WF defense [24]. In this section, we
discuss known WF attacks and defenses to contextualize
our work.
2.1 Attacks
There is a long line of research on WF attacks [6, 12,
13, 15, 16, 22, 23, 30, 31].
In WF, the attacker classi-
ﬁes which web page each testing packet sequence be-
longs to. To do so, the attacker learns to classify using a
set of training packet sequences and a machine learning
technique. In the closed-world scenario, testing packet
sequences come from a (small) list of monitored sensi-
tive web pages the attacker knows, and the attacker must
distinguish packet sequences coming from each of those
pages. In the more realistic open-world scenario, testing
packet sequences could also originate from non-sensitive
web pages outside of the list and unknown to the attacker.
In the open-world scenario, the attacker needs to distin-
guish between sensitive web pages and be able to identify
that a non-sensitive web page is non-sensitive.
Over time, researchers have demonstrated increas-
ingly accurate [22] and noise-tolerant attacks [33] us-
ing better classiﬁers. While older attacks were only able
to identify pages in the closed-world scenario, newer at-
tacks are also able to tackle the open-world scenario, thus
posing a practical threat to privacy. We refer the reader to
previous work [5, 22, 31] for a more detailed discussion
of the speciﬁc workings of each WF attack and how they
have evolved.
2.2 Defenses
Wright et al. (2009) published trafﬁc morphing [34], a
defense that randomly pads unique packet lengths so that
these packet lengths look as if they came from another
distribution of packet lengths corresponding to another
web page. They showed that this defense was effec-
tive against an earlier attack (2006) by Liberatore and
Levine [15], because that attack relies on unique packet
lengths and does not consider other features such as
packet ordering. Later, Wang et al. (2014) showed that
this defense was not effective against their new attack,
which uses packet ordering as a feature [31].
Luo et al. (2011) published HTTPOS (HTTP Obfus-
cation) [17]. They implemented the defense on the client
side using features in HTTP: the client sets a Range
header in order to split trafﬁc into packets of random
length and uses HTTP pipelining to change the number
of outgoing packets. Luo et al. have shown that this is
a successful defense against older attacks [2, 15, 30], but
other researchers have also found that it is not a success-
ful defense against several newer attacks [6, 31].
Tor has implemented another WF defense [24] in re-
sponse to a WF attack by Panchenko et al. [23]. Tor’s
defense uses HTTP pipelining by randomizing the max-
imum number of requests in a pipeline, so that the order
of requests may change if the number of requests exceeds
1376    26th USENIX Security Symposium
USENIX Association
the depth of the pipeline. This defense has no bandwidth
overhead as pipelining does not introduce extra packets.
Tor has updated its defense [26] recently in response to
newer attacks, but both versions of Tor’s defense have
little effect on the accuracy of known attacks [6, 31, 32].
We are aware of six WF defenses that are still effec-
tive: Decoy (Panchenko et al. 2011 [23]), BuFLO (Dyer
et al. 2012 [8]), Tamaraw (Cai et al. 2014 [5]), CS-
BuFLO (Cai et al. 2014 [4]), Supersequence (Wang et
al. 2014 [31]), and Glove (Nithyanand et al. 2014 [20]).
We refer to BuFLO, Cs-BuFLO, and Tamaraw as BuFLO
defenses, as the latter two are modiﬁcations of BuFLO
to lower overhead. Supersequence and Glove share the
same usability issue as our work: they require the client
to have some information about web pages. Whereas the
issue is a stumbling block for Supersequence and Glove,
our work resolves this issue by using half-duplex com-
munication to minimize the amount of information the
client needs to have, which we describe in detail in our
evaluation (Section 5). All of these previous effective
defenses generally require more than 100% bandwidth
and/or time overhead.
3 Preliminaries
3.1 Attack Scenario
We consider a web-browsing client that is connecting to
the Internet using one or more proxies over an encrypted
connection. A packet received over such a network (e.g.,
a TLS packet) at some time t and having some length (cid:96)
is denoted as p = (t, (cid:96)). A packet sequence is denoted
as s = (cid:104)p1, p2, . . .(cid:105). We use positive lengths to denote
outgoing packets from the client and negative lengths to
denote incoming packets.
We assume the attacker is local to the client and pas-
sive, consistent with previous works on website ﬁnger-
printing. Possible local attackers may include the client’s
ISP, wiretappers, packet sniffers, and other eavesdrop-
pers. Since the attacker is local, the attacker knows the
client’s identity, but does not know which page she is vis-
iting because she is using one or more proxies. As a pas-
sive eavesdropper, the attacker never attempts to modify
the client’s packet sequence. The attacker is therefore
very hard to detect.
The attacker seeks to identify static web pages;
Walkie-Talkie does not protect dynamic content.
It is
difﬁcult to defend dynamic content as a whole, as band-
width and timing requirements vary signiﬁcantly. For ex-
ample, it would be overwhelmingly expensive to make
an online chatroom confusable with a high-quality video
stream. Some types of dynamic content are not sus-
ceptible to WF, such as chatting and ﬁle downloading.
Other works have shown that search queries [18] and
videos [27] are susceptible to ﬁngerprinting attacks. As
pages are static, they are associated with ﬁnite-length
packet sequences.
In our scenario, at least one proxy is outside the WF
attacker’s control. Otherwise, the attacker has already
won without the need of website ﬁngerprinting: previous
work has shown that an attacker with control over both
ends of a multi-proxied connection can compromise the
client’s privacy completely [19]. The non-compromised
proxy (which we simply refer to as the proxy hereafter) is
willing to protect the client’s privacy by shaping the traf-
ﬁc according to her speciﬁcation. A proxy who shapes
the trafﬁc incorrectly can be easily detected by the client,
who sees the whole packet sequence.
As a preliminary, the client and proxy implement a
simple defense: all packets they send to each other are
of the same length, much like in Tor. They can do so by
splitting longer packets and padding shorter ones. Pre-
vious work has shown that TCP packet lengths leak too
much information to the WF attacker [5]. Indeed, Tor re-
lays use ﬁxed-length cells to deliver information; for this
reason, previous work has found that Tor is much harder
to attack with WF than many other web privacy technolo-
gies [13], though Tor is still vulnerable. Borrowing Tor’s
terminology, we use the term “cells” instead of “packets”
to describe the ﬁxed-length data elements, and scale our
size units so that a cell has |(cid:96)| = 1. Note that although we
borrow the ﬁxed-size cell concept from Tor, our defense
is nevertheless applicable to other technologies such as
VPNs and IPsec.
3.2 Overhead
To show that WT is efﬁcient, we will evaluate its band-
width overhead and time overhead.
The bandwidth overhead of a defense is the num-
ber of dummy cells added by the defense, divided by
the number of cells in the undefended (original) cell se-
quence. Dummy cells are necessary to obfuscate the true
amount of data on the wire. Bandwidth overhead repre-
sents a burden to the proxy and possibly other proxies be-
tween the client and the proxy. Note that the web server
does not suffer from bandwidth overhead; it will never
generate or see dummy cells.
The time overhead of a defense is the extra amount
of time required to load the cell sequence, divided by the
original amount of time required. To keep bandwidth
overhead and time overhead separate, we assume that
dummy cells do not add to the time overhead by them-
selves (i.e., the bandwidth is sufﬁcient that extra dummy
cells can be sent without delaying real cells). Neverthe-
less, all known effective WT defenses incur a large time
overhead, typically because they artiﬁcially delay cells
in order to induce desired trafﬁc patterns such as sending
USENIX Association
26th USENIX Security Symposium    1377
cells at a constant rate. A large time overhead deteri-
orates the client’s experience, as the client needs to wait
longer to load web pages, but it does not burden the prox-
ies.
4 Components of Walkie-Talkie
Walkie-Talkie consists of two components: half-duplex
communication and burst molding. To defend a cell se-
quence from a sensitive web page, half-duplex communi-
cation transforms the cell sequence into a burst sequence.
which is then molded into a burst sequence from a non-
sensitive web page. We describe both components and
how they work together in detail in this section.
4.1 Half-Duplex Communication
We modify the client’s web browser so that it commu-
nicates in half-duplex mode, much like a walkie-talkie.
Normally, web browsing is full-duplex: multiple servers
are sending web page data to the client while the client