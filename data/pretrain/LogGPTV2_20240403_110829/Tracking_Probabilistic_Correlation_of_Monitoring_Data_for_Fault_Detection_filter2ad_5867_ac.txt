)
t
t
j
T
−
Gc
1
T
=
D T
/(2 )
)
+
1
=
+ −
(1
ρα
t
j
ρ
Tc
Gc
T
 and T  is a constant integer which 
where 
TGc < . 
1tz +  
1
should be large enough to make sure that 
1t + . 
is the new data point collected at sampling time 
1/ Tρ=
 is a fixed forgetting factor used to reduce the 
influence  of  out-of-date  samples.  After  the  new 
weights  of  mixtures 
 are  calculated,  the  online 
algorithm  checks  whether 
there  are  unnecessary 
clusters  in  the  mixtures  or  not  and  removes  those 
.  As  mentioned  earlier,  this 
clusters  with
mechanism  of  discarding  unnecessary  clusters 
is 
achieved by introducing the penalty function. Then the 
α+ <
α+
1t
j
0
t
j
1
t
+
1
rest  of  the  parameters  can  be  updated  with  the 
following equations: 
µ µ δ
Σ = Σ +
+
w
t
,  
1
j
+
o z
t
t
(
)
1
j
α
t
j
where 
δδ
T
(
δ
=
µ
t
j
− Σ
ρ
w
w
).
),
=
+
=
−
+
1
z
(
t
j
t
j
,
t
j
j
t
       (8)                     
For  each  iteration,  these  parameters  are  updated 
with a new data point. The boundaries in Mahalanobis 
distance, which are ellipses as illustrated in Inequality 
(3), are  also  slightly  tuned  at  each  step  to  update  the 
probabilistic  relationship  of  monitoring  data.  Here  let 
us consider the correlation example between number of 
Java threads and memory usage, as shown in Figure 3. 
After 250 data points, Figure 4 illustrates the updated 
probabilistic  relationship  resulting  from  the  above 
recursive  EM  algorithm.  Note  that  these  ellipses  are 
determined by Inequality (3) and have 99% probability 
coverage.  All  points  on  the  elliptical  boundary  of  a 
same  cluster  have  the  same  probability  density.  For 
,  we  denote  the 
each  Gaussian  distribution
probability  density  of  data  points  on  its  boundary  as 
p b θ  where 
jb  represents any data point on the 
(
,t
boundary  of  the  j-th  Gaussian  distribution  at  time  t. 
 doesn’t  have  to  be  the  data  point 
Note  that 
observed from real systems. Instead it is a data point in 
the learned continuous GMM.   
G∈
jb
,t
[1,
]
)
j
|
t
j
j
,
Figure 4.  Boundaries of probabilistic relationship 
As briefly discussed in Section 3, a fault occurrence 
inside  the  monitored  component  could  affect  the 
correlation  between  monitoring  data  measured  at  the 
input and output of that component. Therefore we can 
expect  to  detect  such  a  fault  by  tracking  whether  the 
probability density of the new measurement is less than 
the  probability  density  on  the  boundaries.  If  a  data 
tz  is  included  by  at  least  one  ellipse,  then  we 
point 
∃ ∈
.  If  a 
know  that
tz  locates  outside  of  any  ellipses,  then  we 
data  point 
< .  Thus 
∀ ∈
j
know  that
) 0
we can use the following criteria to determine outliers: 
≥ , we 
For 
p z
Max  ( (
G p z
],    (
G p z
],    (
G∈
[1,
)) 0
≥
) 0
p b
(
t
p b
(
t
, if 
θ
j
θ
j
θ
j
θ
j
[1,
[1,
−
−
−
]
)
)
)
j
j
|
|
|
|
|
|
t
j
t
j
,
,
p b
(
t
,
j
θ
j
θ
j
t
j
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:26:44 UTC from IEEE Xplore.  Restrictions apply. 
tz  as  a  normal  observation; 
consider  this  data  point 
tz  as  an  outlier. 
otherwise,  we  regard  the  data  point 
Since the probability density of a data point decreases 
exponentially  with  its  distance  to  the  center,  the 
probability  density  of  outliers  are  extremely  low. 
Therefore, it is more convenient to use the logarithms 
p b θ  to 
of  probability  densities 
,(
t
present the residuals:  
R t
p z
  ( ) Max(log (
|
t
p z θ  and
(
p b
log (
t
θ
)
j
)), 
θ
j
[1,
G
∈
] 
=
−
)
)
j
|
|
|
j
j
j
,
t
j
j
(9)    
Based on the above discussion, we conclude that if a 
data point locates inside of at least one ellipse, we have 
R t ≥ ;  otherwise  for  outliers,  we  have
. 
( ) 0
Figure  5  shows  the  residual  generated  from  the 
probabilistic  relationship  between  number  of  Java 
threads  and  memory  usage.  In  this  example,  we 
injected  a  “Busy  loop”  fault  into  the  application 
software running  on  the  middleware  by  modifying  its 
source code. Details about this fault will be introduced 
in Section 8.  
R t <
( ) 0
Figure 5.  Residual changes in a faulty case 
It  is  straightforward  to  see  that  the  residual  has  a 
significant drop after the fault was injected. An online 
tracking and detection algorithm is shown in Figure 6. 
Because Gaussian distribution has a large tail, the size 
of  ellipses  would  become  extremely  large  as  they 
approach to have 100% probability coverage. From one 
side, we expect the ellipses to be fairly compact so as 
to reduce miss-detections, and on the other side we also 
expect  the  probability  coverage  to  be  high  so  as  to 
reduce  false  positives.  In  this  paper,  we  choose  the 
ellipses to have 99% probability coverage so as to have 
reasonable  compact  size.  That  means  our  approach 
could result in 1% false positives of all data points. In 
24*7*365 operational environments, this false positive 
rate  could  lead  to  thousands  of  false  positive  cases. 
Thus our algorithm only generates an alert after three 
consecutive data points are detected as outliers. After a 
fault  occurs,  it’s  often  persistent  (i.e.,  not  transient) 
before  it  is  eventually  resolved  by  operators.  Thus 
faults are likely to cause many consecutive outliers, as 
shown in Figure 5 and in Section 8. Meanwhile, since 
noise 
is  usually 
from  uncertainties 
resulting 
independent, the  possibility  to  have  three  consecutive 
false positives is as low as 
610− .  
Algorithm 5.1  
Input: tz , initial parameters 
Output: abnormal residual alert 
For each time step t, 
1. Compute  (
)
|
(0)θ  
p z θ  and 
|
 using the parameters 
p b θ  for each 
(
;  
)
j
tθ −
1)
(
t
j
t
j
,
j
G∈
[1,
]
j
j
|
θ
)
j
2. Compute the residual  
=
R t
p z
( ) Max (log (
R t ≥ , then 
3. If 
( ) 0
{
}
        Update 
θ=
θ
G
t
t
( )
]
( ) ,
<
   else if 
R t
0  &   ( - 2)
( -1)
∈
j
[1,
R t
t
j
−
p b
log (
t j
,
|
θ
j
))
; 
 using recursive EM; 
< , then 
0
   Generate an alert. 
Figure 6.  Online tracking and detection algorithm 
6.  Residual correlation 
We  can  generate  n  residuals  if  we  can  model  n  
such relationships among monitoring data. In a normal 
situation, these residuals reflect the error resulting from 
modeling  and  their  absolute  values  are  usually  very 
small. If some fault occurs inside the system, some of 
these  n  relationships  could  be  affected  and  their 
residuals could significantly drop. Therefore, we could 
detect  such  a  fault  by  tracking  the  change  of  these 
residuals.  In  complex  systems,  faults  are  very  diverse 
and  could  include  various  software  bugs,  hardware 
problems and operator mistakes. 
1 
0 
C1  C2  C3  …  Cm 
0 
1 
R1 
R2 
1 
0 
…  …  …  …  …  … 
Rn 
1 
Figure 7.  Residual correlation matrix 
0  … 
0  … 
1  … 
0 
1 
While some faults may cause several residuals to be 
abnormal,  these  faults  may  have  no  impact  on  other 
residuals.  Therefore  whether  a  specific  fault  can  be 
detected is dependent on its impact on these residuals. 
If we have many of such residuals, we would expect to 
detect  a  wide  class  of  faults  in  the  system.  Since  the 
residuals are calculated directly from the probabilistic 
relationship, 
the 
monitored components are. Based on the dependencies 
between  residuals  and  their  monitoring  components, 
we can develop a correlation matrix as shown in Figure 
7.  The  columns  represent  the  components  of  the 
reflect  how  healthy 
they  can 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:26:44 UTC from IEEE Xplore.  Restrictions apply. 
j
f
2
=
1
1
U
I
=
C
V
ij
V
ij
r t
n
ir t
( )
the  rows 
the 
monitored  systems  while 
residuals.  We  define  the  matrix  elements  in  Boolean 
type: 
jC  is  being 
monitored by the residual
ijV =  means  that  the  component 
iR , and 0 otherwise. 
indicate 
iR t
( )
iR t
( )
tracking 
Algorithm  5.1  keeps 
the  modeled 
relationships  and  generating  residuals.  For  each 
, 
residual at time step t, we use a Boolean variable, 
to indicate whether the residual
 is abnormal, i.e., 