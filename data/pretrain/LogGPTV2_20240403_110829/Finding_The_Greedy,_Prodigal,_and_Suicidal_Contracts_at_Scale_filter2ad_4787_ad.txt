an arbitrary address. We repeat this procedure for each contract,
and find that all 24 candidate contracts are true positives.
Suicidal contracts. Maian flags 1, 495 contracts (403 distinct),
including the ParityWalletLibrary contract, as found susceptible
to being killed by an arbitrary address, with a nearly 99% true
5We also concretely validate flagged candidates that were killed before BH as well.
6These are live and we could update them with funds in testing.
659ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Nikoli´c et al.
1
2
3
4
5
6
7
bytes20 prev ;
function tap ( bytes20 nickname ) {
prev = nickname ;
if ( prev != nickname ) {
msg . sender . send ( this . balance );
}
}
Figure 5: A prodigal contract.
positive rate. Out of 1, 495 contracts, 1, 398 are alive at BH. Our
concrete validation engine on a private fork of Ethereum confirm
that 1, 385 contracts (or 99.07%) are true positives, i.e., they can
be killed by any arbitrary Ethereum account, while 13 contracts
(or 0.93%) are false positives. The list of true positives includes
the recent ParityWalletLibrary contract which was killed at block
height 4, 501, 969 by an arbitrary account. Of the 1, 495 contracts
flagged, 25 have been killed by BH; we repeat the procedure de-
scribed previously and confirmed all of them as true positives.
Greedy contracts. Our tool flags 31, 201 greedy candidates (1, 524
distinct), which amounts to around 3.2% of the contracts present
on the blockchain. The first observation is that Maian deems all
but these as accepting Ether but having states that release them
(not locking indefinitely). To validate a candidate contract as a true
positive one has to show that the contract does not release/send
Ether to any address for any valid trace. However, concrete valida-
tion may not cover all possible traces, and thus it cannot be used
to confirm if a contract is greedy. Therefore, we take a different
strategy and divide them into two categories:
(i) Contracts that accept Ether, but in their bytecode do not have any
of the instructions that release Ether (such instructions include
CALL, CALLCODE, SUICIDE, or DELEGATECALL).
(ii) Contracts that accept Ether, and in their bytecode have at least
one of CALL, CALLCODE, SUICIDE or DELEGATECALL.
Maian flagged 1, 058 distinct contracts from the first category.
We validate that these contracts can receive Ether (we send Ether to
them in a transaction with input data according to the one provided
by the symbolic execution routine). Our experiments show that
1, 057 out of 1, 058 (e.g., 99.9%) can receive Ether and thus are true
positives. On the other hand, the tool flagged 466 distinct contracts
from the second category, which are harder to confirm by testing
alone. We resort to manual analysis for a subset of these which
have source code. Among these, only 25 have Solidity source code.
With manual inspection we find that none of them are true positive
— some traces can reach the CALL code, but Maian failed to reach
it in its path exploration. The reasons for these are mentioned in
the Section 5.3. By extrapolation (weighted average across 1, 083
validated), we obtain true positive rate among greedy contracts of
approximately 69%.
Posthumous Contracts. Recall that posthumous are contracts
that are dead on the blockchain (have been killed) but still have
non-zero Ether balance. We can find such contracts by querying
the blockchain, i.e., by collecting all contracts without executable
code, but with non-zero balance. We found 853 contracts at a block
height of 4, 800, 000 that do not have any compiled code on the
blockchain but have positive Ether balance. Interestingly, among
these, 294 contracts have received Ether after they became dead.
1
2
3
4
5
6
7
8
9
10
11
12
contract Mortal {
address public owner ;
function mortal () {
owner = msg . sender ;
}
function kill () {
if ( msg . sender == owner ){
suicide ( owner );
}
}
}
contract Thing is Mortal { /* ... */ }
Figure 6: The prodigal contract Thing, derived from Mortal,
leaks Ether to any address by getting killed.
5.2 Case Studies: True Positives
Apart from examples presented in section 2.2, we now present
true and false positive cases studies. Note that we only present the
contracts with source code for readability. However, the fraction of
flagged contracts with source codes is very low (1%).
Prodigal contracts. In Figure 5, we give an example of a prodigal
contract. Note that the function tap seems to lock Ether since the
condition in line 4, semantically, can never be true. However, the
compiler optimization of Solidity allows this condition to pass when
an input greater than 20 bytes is used to call the function tap. The
EVM always loads 32 bytes from the input data and decodes it
according to the type of argument. In this case, the first 20 bytes of
nickname are assigned to the global variable prev, thus neglecting
the remaining 12 bytes. The error occurs because EVM at line 4,
correctly nullifies the 12 bytes in prev, but not in nickname. Thus if
nickname has non-zero values in these 12 bytes then the inequality is
true. This contract so far has lost 5.0001 Ether to different addresses
on real Ethereum blockchain.
A contract may also leak Ether by getting killed since the se-
mantic of SUICIDE instruction enforce it to send all of its balance
to an address provided to the instruction. In Figure 6, the contract
Thing[29] is inherited from a base contract Mortal. This contract
implements a review system in which public reviews an ongoing
topic. Among others, it has a kill function inherited from its base
contract which is used to send its balance to its owner if its killed.
The function mortal, supposedly a constructor, is misspelled, and
thus anyone can call mortal to become the owner of the contract.
Since the derived contract Thing inherits functions from contract
Mortal, this vulnerability in the base contract allows an arbitrary
Ethereum account to become the owner of the derived contract, to
kill it, and to receive its Ether. Hence, a trace composed of two
functions calls, to mortal and to kill, makes the contract prodigal.
Suicidal contracts. A contract can be killed by exploiting an un-
protected SUICIDE instruction. A trivial example is a public kill
function which hosts this instruction. Sometimes, SUICIDE is pro-
tected by a weak condition, such as in the contract Dividend given in
Figure 7. This contract allows users to buy shares or withdraw their
investment. The logic of withdrawing investment is implemented by
the withdraw function. However, this function has a self_destruct
command which can be executed once the last investment has been
660Finding The Greedy, Prodigal, and Suicidal Contracts at Scale
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
1
2
3
4
5
6
7
8
9
10
11
12
function withdraw () public returns ( uint ) {
Record storage rec = records [ msg . sender ];
uint balance = rec . balance ;
if ( balance > 0) {
rec . balance = 0;
msg . sender . transfer ( balance );
Withdrawn ( now , msg . sender , balance );
}
if ( now - lastInvestmentTime > 4 weeks ) {
selfdestruct ( funder );
}
return balance ; }
Figure 7: The Dividend contract can be killed by invoking
withdraw if the last investment has been made at least 4
weeks ago.
made more than 4 weeks ago. Hence, if an investor calls this func-
tion after 4 weeks of the last investment, all the funds go to the
owner of the contract and all the records of investors are cleared
from the blockchain. Though the Ether is safe with the owner, there
would be no record of any investment for the owner to return ether
to investors.
In the previous example, one invocation of withdraw function
was sufficient to kill the contract. There are, however, contracts
which require two or more function invocations to be killed, i.e.
they require a trace to be killed. For example, the mentioned Parity
bug requires a trace composed of two function invocations [1]. It
is interesting to note that the bug produced by Maian is slightly
different from the actual bug used to kill the Parity library contract7.
Greedy contracts. The contract SimpleStorage, given in Figure 8,
is an example of a contract that locks Ether indefinitely. When an
arbitrary address sends Ether along with a transaction invoking
the set function, the contract balance increases by the amount of
Ether sent. However, the contract does not have any instruction to
release Ether, and thus locks it on the blockchain.
The payable keyword has been introduced in Solidity recently to
prevent functions from accepting Ether by default, i.e., a function
not associated with payable keyword throws if Ether is sent in a
transaction. However, although this contract does not have any
function associated with the payable keyword, it accepts Ether since
it had been compiled with an older version of Solidity compiler
(with no support for payable).
5.3 Case Studies: False Positives
We manually analyze cases where Maian’s concrete validation
fails to trigger the necessary violation with the produced concrete
values, if source code is available.
Prodigal and Suicidal contracts. In both of the classes, false pos-
itives arise due to two reasons:
(i) The tool performs inter-procedural analysis within a contract,
but does not transfer control in cross-contract calls. For calls
from one contract to a function of another contract, Maian
assigns symbolic variables to the return values. This is imprecise,
7Maian produced simpler inputs to the functions: instead of using one so-called
multi-owner address for approving actions as in the original bug, Maian used zero
multi-owners.
1
2
3
4
5
6
7
8
9
10
11
12
1
2
3
4
5
6
7
8
9
10
11
12
13
1
2
3
4
5
6
7
8
9
10
11
12
13
contract SimpleStorage {
uint storedData ; address storedAddress ;
event flag ( uint val , address addr );
function set ( uint x , address y) {
storedData = x; storedAddress = y;
}
function get () constant
returns ( uint retVal , address retAddr ) {
return ( storedData , storedAddress );
}
}
Figure 8: A contract that locks Ether.
function confirmTransaction ( uint tId )
ownerExists ( msg . sender ) {
confirmations [ tId ][ msg . sender ] = true ;
executeTransaction ( tId );
}
function executeTransaction ( uint tId ) {
// In case of majority
if ( isConfirmed ( tId )) {
Transaction tx = transactions [ tId ];
tx . executed = true ;
if ( tx . destination . call . value ( tx . value ) ( tx . data ))
/* .... */
}}
Figure 9: False positive, flagged as a greedy contract.
function RandomNumber () returns ( uint ) {
/* .... */
last =
seed ^( uint ( sha3 ( block . blockhash ( block . number ) ,
nonces [ msg . sender ]) ) * 0 x000b0007000500030001 );
}
function Guess ( uint _guess ) returns ( bool ) {
if ( RandomNumber () == _guess ) {
if (! msg . sender . send ( this . balance )) throw ;
/* .... */
}
/* .... */