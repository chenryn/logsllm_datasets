# Through the Looking-Glass: An Examination of Security in Network Infrastructure

## Authors
- Luca 'kaeso' Bruno
- Mariano 'emdel' Graziano

## Date
- October 8, 2014

## About Us
- **S3 Group at Eurecom (France) - System Security**
  - Embedded systems
  - Networking devices
  - Critical infrastructures
  - Memory forensics
  - Malware research

## Outline
1. Motivations
2. Introduction to Looking Glasses
3. Threats
4. Vulnerabilities and Incidents
5. Countermeasures

## Motivations
### How It Started
Imagine a novice cyber-terrorist searching for a high-impact target:
- **Target**: Critical infrastructure
- **Impact**: Global
- **Skill Level**: Low
- **Goal**: Cause widespread disruption

### Key Components
- **The Internet**: A network of networks, interconnected by BGP.
- **Traffic Routing Across ASes**: Basic web skills, Google dorks, etc., can be used to gain access to BGP routers.
- **Looking Glass (LG)**: A tool that provides a view into the routing tables of BGP routers.

## The Internet
- **A Network of Networks**: Glued together by BGP.
- **BGP Routing Tables**: Each AS (Autonomous System) has a partial, local view of the global routing table.
- **Connectivity Troubleshooting Tools**:
  - Distributed BGP probes (e.g., RIPE Labs)
  - Private shell exchanges (e.g., NLNOG)
  - Limited web-access to routers via looking glasses

## What Is a Looking Glass?
- **Simple Web Script**: Usually written in PHP or Perl.
- **Features**:
  - Single file, easily deployable in the webroot.
  - Direct connection to SSH/telnet router console.
  - Configuration files often in cleartext (IPs, login, password).

## How Does It Work?
- **Public IP (Data + BGP)**
- **Private Admin (Telnet/SSH)**
- **Public Web (Looking Glass)**
- **Internet**
- **AS64496, AS64497, AS64498 NOCs**
- **Private and Public Networks**

## Common Open-Source Looking Glasses
- **Cougar LG (Perl)**
- **Cistron LG (Perl)**
- **MRLG (Perl)**
- **MRLG4PHP (PHP)**

## Threats
### Targeting Humans
- **Assumption**: Bug-free software.
- **Human Errors**:
  - Enabling CGI/mod_php/mod_perl.
  - Failing to protect configuration files.
  - Exposing private SSH keys.
  - Exposed router credentials.

### Targeting the Web Application
- **Assumption**: Minor bugs in the web frontend.
- **Exploits**:
  - Improper escaping.
  - XSS/CSRF attacks.
  - Cookie stealing for other web services.

### Targeting the Server
- **Assumption**: Medium-severity bugs in the entire package.
- **Exploits**:
  - Embedded third-party tools.
  - Forked/modified modules.
  - Escalation to the hosting server.

### Targeting the Router
- **Assumption**: Significant bugs in the backend.
- **Exploits**:
  - Missing input escaping.
  - Command injection to the router.
  - Known bugs in the router CLI.
  - Escalation to router administration.

### Targeting the Internet
- **Assumption**: Control over multiple routers in multiple ASes.
- **Exploits**:
  - Rerouting or blackholing local traffic.
  - Announcing bogus BGP prefixes.
  - Causing widespread chaos.

## Vulnerabilities and Incidents
### Web Issues
- **Exposed Credentials**: Stored in cleartext (IPs, usernames, passwords).
- **Cookie Stealing**: XSS vulnerabilities in LG, targeting other web applications.

### Web Misconfigurations
- **Google Dorks for Login Credentials**:
  - Finding LG configuration files.
  - Examples: `"login" "telnet" inurl:lg.conf`, `"login" "pass" inurl:lg.cfg` 

### Default Config Paths
- **Example from Cougar-LG root directory**:
  - `as.txt`, `CHANGELOG`, `communities.txt`, `COPYING`, `favicon.ico`, `lg.cgi`, `lg.conf`, `makeaslist.pl`, `makedb.pl`, `README`

### Best Practices
- **README** sometimes mentions them, but we found about 35 exposed cases.

### Exposed Source Code and SSH Keys
- **Default Path for SSH Keys (CVE-2014-3929) in Cougar LG**:
  - `lg.conf:18 â†’ /var/www/.ssh/private_key`

### First Steps into the Web
- **No CAPTCHA**: Simplifies automated attacks.
- **Automated Resource Mapping**: Ping-back and conf dumping.
- **Automated Command Injection**: From multiple ASes if bugs are found.

### XSS
- **Cougar LG** can use GET or POST methods.
- **XSS in "addr" Parameter (CVE-2014-3926)**:
  - Example: 
    ```bash
    curl --data \
    'query=trace
    &protocol=IPv4
    &router=ssh
    &addr=8.8.8.8%2F%3C%2FTITLE%3E%3C%2Fhead
    %3E%3Cbody%3E%3Cscript%3Ealert%28%27aa
    %27%29%3C%2Fscript%3E%3C%2Fbody%3E%3C
    %2Fhtml%3E+%3C%21'
    ```

### Router Command Injection
- **CVE-2014-3927 in MRLG4PHP**:
  - Issue with the 'argument' parameter.
  - Example:
    ```bash
    curl --data \
    'routerid=10
    &requestid=50
    &argument=8.8.8.8%0Adate%0Aexit%OA'
    ```

### Remote Memory Corruption
- **CVE-2014-3931 in MRLG**:
  - Fastping SUID binary.
  - ICMP echo reply validation issue.
  - Example:
    ```c
    fastping.c:546 
    Riempie_Ritardi( *((long *)&(icp->icmp_data[8])) , triptime );
    ```

## Countermeasures
### Code-Wise
- **Understand the Risks**: Exposing router consoles with hardcoded credentials.
- **Review Critical Web Services**: Written during the '90s.

### Deployment-Wise
- **Dedicated Read-Only Route-Server**: As the LG endpoint.
- **Check Web Accessibility**: Ensure private files (LG config, SSH keys) are not reachable.
- **Web Server Configuration**: Double-check vhost vs. default docroot.

### Administration-Wise
- **Proper ACL on Routers**.
- **Strong, Unique Passwords**.
- **Private VLANs and Subnets**: For admin and out-of-band services.

## Recap
- **Best Practices**: Often disregarded.
- **Unaudited, Old, Forgotten Code**: In critical places.
- **Attackers**: Target weak links and escalate quickly.
- **Internet Core**: Fragile and vulnerable.

## Questions
Thank you for listening! Special thanks to all members of the NOPS team for their help in bug-finding.