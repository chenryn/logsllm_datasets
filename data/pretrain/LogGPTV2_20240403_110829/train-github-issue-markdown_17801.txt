### Celery Version 4.2.0

I am trying to retrieve the results of tasks that are part of a group. In my development environment, I have set `CELERY_ALWAYS_EAGER=True` to enable synchronous task execution for easier debugging.

Here is the code I am using:

```python
from celery import shared_task, chain, group

@shared_task
def task_in_group():
    return "something"

@shared_task
def task_finishing_chain(results):
    return results

@shared_task
def task_launcher():
    chain_tasks = chain(
        group(
            task_in_group.si(),
            task_in_group.si()
        ),
        task_finishing_chain.s()
    )
    chain_tasks.apply_async()

def run_tasks():
    task_launcher.apply_async()
```

When I run this code, I encounter the following exception:

```
Task my_app.tasks.task_in_group[36c33a48-3047-4be8-82f1-70b985e87980] succeeded in 0.00011961600012000417s: 'something'
Task my_app.tasks.task_in_group[1e3a13c3-fbb7-4535-bf68-3f988a331a42] succeeded in 3.561300013643631e-05s: 'something'
Task my_app.tasks.task_launcher[0fbbae47-f3fc-4a2d-b2ce-b10c8e91182c] raised unexpected: RuntimeError('Never call result.get() within a task!\nSee http://docs.celeryq.org/en/latest/userguide/tasks.html#task-synchronous-subtasks\n',)
Traceback (most recent call last):
  File "/home/vagrant/python35/lib/python3.5/site-packages/celery/app/trace.py", line 382, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/vagrant/my_app/tasks.py", line 268, in task_launcher
    chain_tasks.apply_async()
  File "/home/vagrant/python35/lib/python3.5/site-packages/celery/canvas.py", line 1230, in apply_async
    body=body, task_id=task_id, **options)
  File "/home/vagrant/python35/lib/python3.5/site-packages/celery/canvas.py", line 1239, in apply
    args=(tasks.apply(args, kwargs).get(propagate=propagate),),
  File "/home/vagrant/python35/lib/python3.5/site-packages/celery/result.py", line 671, in get
    on_interval=on_interval,
  File "/home/vagrant/python35/lib/python3.5/site-packages/celery/result.py", line 722, in join
    assert_will_not_block()
  File "/home/vagrant/python35/lib/python3.5/site-packages/celery/result.py", line 41, in assert_will_not_block
    raise RuntimeError(E_WOULDBLOCK)
RuntimeError: Never call result.get() within a task!
```

In the production environment, everything works as expected with `CELERY_ALWAYS_EAGER=False`.

### Analysis and Solution

The error occurs because `CELERY_ALWAYS_EAGER=True` causes tasks to be executed synchronously, and calling `result.get()` within a task is not allowed in this mode. This is a known limitation in Celery, as it can lead to deadlocks and other issues.

To resolve this, you can use the `link` or `link_error` methods to handle the results of the group without blocking. Here is an updated version of your code:

```python
from celery import shared_task, chain, group

@shared_task
def task_in_group():
    return "something"

@shared_task
def task_finishing_chain(results):
    return results

@shared_task
def task_launcher():
    group_tasks = group(
        task_in_group.si(),
        task_in_group.si()
    )
    group_tasks | task_finishing_chain.s()

def run_tasks():
    task_launcher.apply_async()
```

In this version, the `group_tasks` is linked to `task_finishing_chain` using the `|` operator, which avoids the need to call `result.get()` within a task. This should work correctly in both development and production environments.