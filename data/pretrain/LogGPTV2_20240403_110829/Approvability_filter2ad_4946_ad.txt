We now map an instance of 3SAT to into a SDSoD problem
of polynomial size, thereby showing that SDSoD is NP-Hard.
We describe the actions necessary to represent the 3SAT
problem. For 0 ≤ i ≤ N :
ti The “user” from the role {xi,¬xi} which gets the value
true.
fi The “user” from the role {xi,¬xi} which gets the value
false. Of course, ti and fi must have diﬀerent users
so that one of {xi,¬xi} gets true and the other gets
false.
clausej the jth boolean clause, for 0 ≤ j ≤ C.
• If both xi and ¬xi are in clausej, then there is no
constraint between clausej and either of fi or ti
otherwise
• If xi (resp. ¬xi) is in clausej then there is a diﬀer-
ent user constraint between clausej and fi (resp.
ti).
The diagramming of actions and truth assignment for the
general problem is shown in Figure 9 (without the diﬀerent
user constraints between truth assignment and clauses).
In Figure 10, a complete representation of 3SAT problem
in Expression (1) as a SoD problem is given. For example,
if clause0 gets the value ¬x2 then t2 must get the value
x2 which forces f2 to get the value ¬x2 which means that
clause1 must get a value diﬀerent from x2.
Given the constraints, we now describe why SDSoD com-
putes 3SAT. The actions ti and fi provide a truth assign-
ment, since each xi is independently chosen to be either true
(performs ti) or false (performs fi).
The clausej is true if and only if at least one of its terms
vj,0, vj,1 or vj,2 is true. This is ensured by the diﬀerent
user constraint, which rules out “users” which have been
assigned to false. Hence, iﬀ for each clause action there is
a user xi or ¬xi which can perform it, then the expression
is satisﬁable. This leads to the general result:
Theorem 12. SDSoD is NP-Complete.
Proof. The above reduction shows that we can embed
any 3SAT problem in a DSoD problem, showing that it is
NP-Hard. It is trivial to show that it is NP-Complete: guess
an assignment of users to roles and then iterate through the
graph and ensure that all roles and diﬀerent user constraints
are satisﬁed.
5. CONCLUSION
We considered a task which consists of actions performed
by users and having Separation of Duty (SoD) constraints
between these actions. We introduced an approvability graph
system which contains:
• a directed graph whose edges correspond to action
speciﬁers and paths, not necessarily simple, from ini-
tial to ﬁnal nodes corresponding to tasks;
• associated with each edge is a role, or groups of users,
which may perform the action; and
• SoD constraints between edges.
The approvability graph allows diﬀerent tasks to be com-
pleted from the same initial action (e.g., approve or deny a
loan application), and loops enabling arbitrary number of
iterations of an action speciﬁer (e.g., when editing a paper).
Because of the loops, an approvability graph can deﬁne an
unbounded number of tasks.
The approvability graph is the ﬁrst model which can describe
loops.
When the approvability graph is combined with the user-role
assignment, feasible approvability sequences can be gener-
ated, if any exist. We discuss two diﬀerent ways to gener-
ate these sequences, one which only uses past information
called unscheduled approvability and the other requires both
past and future (“lookahead”) information called scheduled
approvability. Although scheduled approvability may “lock
in” users to perform future actions (and thus may delay task
completion if such users are unavailable), in general, it re-
quires fewer users per role. Clearly, if there are suﬃcient
users per role it is better to use unscheduled approvability
due to its increased ﬂexibility.
We then considered suﬃcient well-formed conditions on the
approvability graph to ensure that every task described by
it can always complete. We show that for scheduled ap-
provability, it is suﬃcient not to have a cycle of constraints
with exactly one diﬀerent user constraint. For unscheduled
approvability there is an additional suﬃciency requirement
that an action edge in a loop has to have a self Same user
constraint on it, if it cyclically consumes a user.
Given such well-formed approvability graphs, an algorithm
need only consider sets of edges (that is, ignoring repeated
transitions of an edge) to determine the minimum number
of users per role. For these graphs, optimal schedules are
possible but unfortunately, due to the below result, are NP-
Hard.
We next considered (simple) algorithms which will provide
bounds on the number of users but only require polynomial
time. We show these algorithms to be correct even when
constraints are between diﬀerent roles.
Finally, we showed that analysis of even simple DSoD prob-
lems are NP-Complete. This is interesting because (1) such
analysis is called computationally intractable, and hence

{x0,¬x0}
{x0,¬x0}
{x1,¬x1}
{x1,¬x1}
{xN ,¬xN}
t0
f0
t1
f1
tN
{xN ,¬xN}
fN
{v0,0, v0,1, v0,2}{v1,0, v1,1, v1,2}
clause0
clause1
{vC,0, vC,1, vC,2}
clauseC
Figure 9: DSoD actions shown as rectangles, and edges between them indicate diﬀerent user constraints.
(Note edges are not shown between ti (or fi) and clausej, since these are problem speciﬁc.) Above each
action is the set of users which can perform that action.
{x0,¬x0}
{x0,¬x0}
{x1,¬x1}
{x1,¬x1}
{x2,¬x2}
{x2,¬x2}
{x3,¬x3}
{x3,¬x3}
t0
f0
t1
f1
t2
f2
t3
f3
clause0
clause1
clause2
{x0,¬x2, x3}
{¬x1, x2,¬x3}
{x0,¬x0, x1}
Figure 10: DSoD for Expression (1). The edges all represent diﬀerent user constraints.
0
may be too expensive to perform and (2) it is the ﬁrst NP-
Completeness result which is inherent in a SoD problem.
Techniques for specifying and analyzing SoD have wide ap-
plicability, as any organization must tailor their own SoD
policies. Such policies depend not only on organization size,
but also on the urgency and security needs of a given task.
The speciﬁcation and analysis given here are valuable as
they enable the SoD tasks to be clearly speciﬁed and ensure
that such tasks do not ever get stuck, a condition which
needs to be avoided in any practical application.
6. ACKNOWLEDGEMENTS
Special thanks to Robert Sloan who made many sugges-
tions improving the presentation of the theory. In addition,
Damian Roqueiro very carefully read the paper and help-
ful suggestions were made by Prof. V. N. Venkatakrish-
nan, Mani Radhakrishnan, Ashley Poole, Jorge Hernandez-
Herrero, Mike Ter Louw, Hareesh Nagarajan, and the anony-
mous referees.
7. REFERENCES
[1] G.-J. Ahn and R. Sandhu. The RSL99 language for
role-based separation of duty constraints. In Proc. of
the ACM Workshop on Role-Based Access Controls
(RBAC), pages 43–54. ACM Press, 1999.
[2] Atluri, Chun, and Mazzoleni. A chinese wall security
model for decentralized workﬂow systems. In SIGSAC:
8th ACM Conference on Computer and
Communications Security. ACM SIGSAC, 2001.
[3] E. Bertino, E. Ferrari, and V. Atluri. The speciﬁcation
and enforcement of authorization constraints in
workﬂow management systems. ACM Transactions on
Information and System Security (TISSEC),
2(1):65–104, 1999.
[4] D. F. C. Brewer and M. J. Nash. The Chinese Wall
security policy. In Proc. IEEE Symp. Security and
Privacy, pages 206–214, 1989.
[5] D. D. Clark and D. R. Wilson. A comparison of
commercial and military computer security policies. In
Proc. IEEE Symp. Security and Privacy, pages
184–194, 1987.
[6] J. Crampton. Specifying and enforcing constraints in
role-based access control. In Proc. of ACM Symposium
on Access Control Models and Technologies
(SACMAT), pages 43–50. ACM Press, 2003.
[7] J. Crampton. An algebraic approach to the analysis of
constrained workﬂow systems. In Proceedings of the
Foundations of Computer Security – FCS’04,
volume 31, Turku, Finland, June 2004. TUCS General
Publication, Turku Centre for Computer Science.
[8] S. D. C. di Vimercati, S. Paraboschi, and P. Samarati.
Access control: principles and solutions. Softw, Pract.
Exper, 33(5):397–421, 2003.
[9] D. Ferraiolo, J. Cugini, and R. Kuhn. Role based
access control (RBAC): Features and motivations. In
Annual Computer Security Applications Conference.
IEEE Computer Society Press, 1995.
[10] D. F. Ferraiolo and R. Kuhn. Role based access
control. In 15th National Computer Security
Conference, pages 554–563, Baltimore, MD, 1992.
[11] S. N. Foley. Separation of duty using high water
marks. In Proc. of the IEEE Computer Security
Foundations Workshop (CSFW), pages 79–88. IEEE,
18-20 June 1991.
[12] V. D. Gligor, S. I. Gavrila, and D. Ferraiolo. On the
formal deﬁnition of separation-of-duty policies and
their composition. In Proc. IEEE Symp. Security and
Privacy, pages 172–185, 1998.
[13] M. Hitchens and V. Varadharajan. Tower: A language
for role based access control. In POLICY, pages
88–106, 2001.
[14] T. Jaeger and J. E. Tidswell. Practical safety in
ﬂexible access control models. ACM Transactions on
Information and System Security (TISSEC),
4(2):158–190, 2001.
[15] J. B. D. Joshi, E. Bertino, B. Shaﬁq, and A. Ghafoor.
Dependencies and separation of duty constraints in
GTRBAC. In Proc. of ACM Symposium on Access
Control Models and Technologies (SACMAT), 2003.
[16] P. A. Karger. Implementing commercial data integrity
with secure capabilities. In Proc. IEEE Symp. Security
and Privacy, pages 130–139, 1988.
[17] K. Knorr and H. Weidner. Analyzing separation of
duties in petri net workﬂows. In Proceedings of the
Information Assurance in Computer Networks -
Methods, Models, and Architectures for Network
Security (MMM-ACNS 2001), volume Lecture Notes
in Computer Science (LNCS) vol 2052, St. Petersburg,
Russia, 2001. Springer Verlag.
[18] D. R. Kuhn. Mutual exclusion of roles as a means of
implementing separation of duty in role-based access
control systems. In Proc. of the ACM Workshop on
Role-Based Access Controls (RBAC), pages 23–30.
ACM Press, 1997.
[19] N. Li, Z. Bizri, and M. V. Tripunitara. On
mutually-exclusive roles and separation of duty. In
Proc. ACM Conference on Computer and
Communications Security (CCS), pages 42–51. ACM,
2004.
[20] S. B. Lipner. Non-discretionary controls for
commercial applications. In Proc. IEEE Symp.
Security and Privacy, pages 2–10, 1982.
[21] M. J. Nash and K. R. Poland. Some conundrums
concerning separation of duty. In Proc. IEEE Symp.
Security and Privacy, pages 201–207, 1990.
[22] M. Radhakrishnan and J. A. Solworth. Application
security support in the operating system kernel. In
ACM Symposium on InformAtion, Computer and
Communications Security (AsiaCCS’06), page to
appear, Taipei, Taiwan, May 2006.

[23] J. H. Saltzer and M. D. Schroeder. The protection of
[26] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E.
information in computer system. Proceedings of the
IEEE, 63(9):1278–1308, 1975.
Youman. Role-based access control models. IEEE
Computer, 29(2):38–47, 1996.
[24] R. Sandhu. Transaction control expressions for
[27] R. T. Simon and M. E. Zurko. Separation of duty in
separation of duties. In Fourth Aerospace Security
Applications Conference, pages 282–286, 1988.
[25] R. S. Sandhu. Role activation hierarchies. In ACM
Workshop on Role-Based Access Control, pages 33–40,
1998.
role-based environments. In Proc. of the IEEE
Computer Security Foundations Workshop (CSFW),
pages 183–194. IEEE, 1997.
[28] J. Tidswell and T. Jaeger. An access control model for
simplifying constraint expression. In Proc. ACM
Conference on Computer and Communications
Security (CCS), pages 154–163, 2000.
