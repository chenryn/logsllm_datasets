were unsuccessful. Additional information includes a count of the number of times the short-on-storage
condition was detected and a count of the number of abends that occurred as a result of that condition.
Additional data about storage usage in the queue manager is produced by class 2 and class 3 statistics
trace. While you can view this information, some of it is intended only for IBM use.
• The format of the storage manager pool header statistics record, which is present in subtype 5 records,
is described in assembler macro thlqual.SCSQMACS(CSQDQSPH).
• The format of the storage manager getmain statistics record, which is present in subtype 6 records, is
described in assembler macro thlqual.SCSQMACS(CSQDQSGM).
• The format of the storage manager region summary record, which is present in subtype 7 records, is
described in assembler macro thlqual.SCSQMACS(CSQDQSRS).
Log manager data records
Use this topic as a reference for format of log manager data records.
The format of the log manager statistics record is described in assembler macro
thlqual.SCSQMACS(CSQDQJST).
In the statistics, these counts are important:
1.The total number of log write requests:
N = QJSTWRNW + QJSTWRF
logwrite
2.The total number of log read requests:
N = QJSTRBUF + QJSTRACT + QJSTRARH
logread
The problem symptoms that can be examined using log manager statistics are described in the following
table.
330 Monitoring and Performance for IBM MQ
Symptom 1
QJSTWTB is nonzero.
Reason
Tasks are being suspended while the in-storage buffer is being written to the active log.
There might be problems writing to the active log.
The OUTBUFF parameter within CSQ6LOGP is too small.
Action
Investigate the problems writing to the active log.
Increase the value of the OUTBUFF parameter within CSQ6LOGP.
Symptom 2
The ratio: QJSTWTL/N is greater than 1%.
logread
Reason
Log reads were initiated that had to read from an archive log, but IBM MQ could not allocate a data
set because MAXRTU data sets were already allocated.
Action
Increase MAXRTU.
Symptom 3
The ratio: QJSTRARH/N is larger than normal.
logread
Reason
Most log read requests should come from the output buffer or the active log. To satisfy requests
for back out, unit-of-recovery records are read from the in-storage buffer, the active log, and the
archived logs.
A long-running unit of recovery, extending over a period of many minutes, might have log records
spread across many different logs. This degrades performance because extra work has to be done to
recover the log records.
Action
Change the application to reduce the length of a unit of recovery. Also, consider increasing the size
of the active log to reduce the possibility of a single unit of recovery being spread out over more than
one log.
Other pointers
The ratio N /N gives an indication of how much work has to be backed out.
logread logwrite
Symptom 4
QJSTLLCP is more than 10 an hour.
Reason
On a busy system, you would expect to see typically 10 checkpoints an hour. If the QJSTLLCP value
is larger than this, it indicates a problem in the setup of the queue manager.
The most likely reason for this is that the LOGLOAD parameter in CSQ6SYSP is too small. The other
event that causes a checkpoint is when an active log fills up and switches to the next active log data
set. If your logs are too small, this can cause frequent checkpoints.
QJSTLLCP is a count of the total number of checkpoints.
Action
Increase the LOGLOAD parameter, or increase the size of your log data sets as required.
IBM MQ Monitoring and performance 331
Symptom 5
QJSTCmpFail > 0 or QJSTCmpComp not much less than QJSTCmpUncmp
Reason
The queue manager is unable to significantly compress log records.
QJSTCmpFail is the number of times the queue manager was unable to achieve any reduction in
record length. You should compare the number to QJSTCmpReq (number of compression requests)
to see if the number of failures is significant.
QJSTCmpComp is the total of compressed bytes written to the log and QJSTCmpUncmp is the total
bytes before compression. Neither total contains bytes written for log records that were not eligible
for compression. If the numbers are similar then compression has achieved little benefit.
Action
Turn off log compression. Issue the SET LOG COMPLOG(NONE) command. See the SET LOG
command for details.
Note: In the first set of statistics produced after system startup, there might be significant log activity due
to the resolution of in-flight units of recovery.
Message manager data records
Use this topic as a reference for message manager data records.
The format of the message manager statistics record is described in assembler macro
thlqual.SCSQMACS(CSQDQMST).
The data gives you counts of different IBM MQ API requests.
Data manager data records
Use this topic as a reference for the format of the Data Manager data records.
The format of the data manager statistics record is described in assembler macro
thlqual.SCSQMACS(CSQDQIST).
The data gives you counts of different object requests.
Data manager page set data records
Use this section as a reference for the format of the data manager page set data records
The format of the data manager page set statistics record is described in assembler macro
thlqual.SCSQMACS(CSQDQIS1).
The page set usage information helps to facilitate better management of local queues within a queue
manager by recording information such as page set input-output rates and highest usage.
The data provides the same basic page set information as output by the MQSC DISPLAY USAGE
TYPE(PAGESET) command, or the PCF Inquire Usage (MQCMD_INQUIRE_USAGE) command.
For example:
• The total pages
• The current used pages
• Unused persistent and nonpersistent pages
• Expansion method
• Number of extends
• Number of stripes
The data also provides some performance indicators, together with other performance information. For
example:
332 Monitoring and Performance for IBM MQ
• How many times deferred write, immediate write, and read page I/O requests happened during the SMF
interval,
• The number of pages moved, elapsed time and number of read and write operations.
• How many pages written in checkpoints.
• Has expansion occurred during the SMF interval?
• How many times the page set became full.
• An indication of where new space is being allocated within the page set.
From the information displayed, you should be able to understand the general status of each page set,
and consider whether you need to retune the system.
Related reference
“The SMF header” on page 326
Use this topic as a reference for the format of the SMF header.
“Self-defining sections” on page 327
Use this topic as a reference for format of the self-defining sections of the SMF record.
“Examples of SMF statistics records” on page 328
Use this topic to understand some example SMF records.
Buffer manager data records
Use this topic as a reference for the format of buffer manager data records.
The format of the buffer manager statistics record is described in assembler macro
thlqual.SCSQMACS(CSQDQPST).
Note: Buffer manager statistics records will only be created for buffer pools that are defined. If a buffer
pool is defined but not used then no values will be set and its buffer manager statistics record will not
contain any data.
For information about efficiently managing your buffer pools, see “Managing your buffer pools” on page
334.
When interpreting the statistics, you are recommended to consider the following factors because the
values of these fields can be used to improve the performance of your system:
1.If QPSTSOS, QPSTDMC, or QPSTIMW is greater than zero, you should either increase the size of the
buffer pool or reallocate the page sets to different buffer pools.
• QPSTSOS is the number of times that there were no buffers available for page get requests. If
QPSTSOS ever becomes nonzero, it shows that IBM MQ is under severe stress. The buffer pool size
should be increased. If increasing the buffer pool size does not make the value of QPSTSOS zero,
there might be I/O contention on the DASD page sets.
• QPSTDMC is the number of updates that were performed synchronously because there was either
more than 95% of the pages in the buffer pool waiting for write I/O, or there was less than 5% of the
buffer pool available for read requests. If this number is not zero, the buffer pool might be too small
and should be enlarged. If increasing the buffer pool size does not reduce QPSTDMC to zero, there
might be I/O contention on the DASD page sets.
• QPSTIMW is a count of the number of times pages were written out synchronously. If QPSTDMC is
zero, QPSTIMW is the number of times pages were found on the queue waiting for write I/O that had
been there for at least two checkpoints.
2.For buffer pool zero and buffer pools that contain short-lived messages:
• QPSTDWT should be zero, and the percentage QPSTCBSL/QPSTNBUF should be greater than 15%.
QPSTDWT is the number of times the asynchronous write processor was started because there was
either more than 85% of the pages in the buffer pool waiting for write I/O, or there was less than
15% of the buffer pool available for read requests. Increasing the buffer pool size should reduce this
value. If it does not, the pattern of access is one of long delays between puts and gets.
IBM MQ Monitoring and performance 333
• QPSTTPW might be greater than zero due to checkpointing activity.
• QPSTRIO should be zero unless messages are being read from a page set after the queue manager is
restarted.
The ratio of QPSTRIO to QPSTGETP shows the efficiency of page retrieval within the buffer pool.
Increasing the buffer pool size should decrease this ratio and, therefore, increase the page retrieval
efficiency. If this does not happen, it indicates that pages are not being frequently reaccessed. This
implies a transaction pattern where there is a long delay between messages being put and then later
retrieved.
The ratio of QPSTGETN to QPSTGETP indicates the number of times an empty page, as opposed to a
non-empty page, has been requested. This ratio is more an indication of transaction pattern, than a
value that can be used to tune the system.
• If QPSTSTL has a value greater than zero, this indicates that pages that have not been used before
are now being used. This might be caused by an increased message rate, messages not being
processed as fast as they were previously (leading to a buildup of messages), or larger messages
being used.
QPSTSTL is a count of the number of times a page access request did not find the page already in
the buffer pool. Again, the lower the ratio of QPSTSTL to (QPSTGETP + QPSTGETN) is, the higher the
page retrieval efficiency. Increasing the buffer pool size should decrease this ratio but, if it does not,
it is an indication that there are long delays between puts and gets.
• You are recommended to have sufficient buffers to handle your peak message rate.
3.For buffer pools with long-lived messages, where there are more messages than can fit into the buffer
pool:
• (QPSTRIO+QPSTWIO)/Statistics interval is the I/O rate to page sets. If this value is high, you should
consider using multiple page sets on different volumes to allow I/O to be carried out in parallel.
• Over the period of time that the messages are processed (for example, if messages are written to
a queue during the day and processed overnight) the number of read I/Os (QPSTRIO) should be
approximately the total number of pages written (QPSTTPW). This shows that one page is read for
every page written.
If QPSTRIO is much larger than QPSTTPW, this shows that pages are being read in multiple times.
This might be a result of the application using MQGET by MsgId or CorrelId when the queue is not
indexed, or browsing messages on the queue using get next.
The following actions might relieve this problem:
a.Increase the size of the buffer pool so that there are enough pages to hold the queue, in addition
to any changed pages.
b.Use the INDXTYPE queue attribute, which allows a queue to be indexed by MsgId or CorrelId
and eliminates the need for a sequential scan of the queue.
c.Change the design of the application to eliminate the use of MQGET with MsgId or CorrelId, or
the get next with browse option.
Note: Applications using long-lived messages typically process the first available message and do
not use MQGET with MsgId or CorrelId, and they might browse only the first available message.
d.Move page sets to a different buffer pool to reduce contention between messages from different
applications.
Managing your buffer pools
To manage your buffer pools efficiently, you must consider the factors that affect the buffer pool I/O
operations and also the statistics associated with the buffer pools.
The following factors affect buffer pool I/O operations.
• If a page containing the required data is not found in the buffer pool, it is read in synchronously to an
available buffer from its DASD page set.
334 Monitoring and Performance for IBM MQ
• Whenever a page is updated, it is put on an internal queue of pages to be (potentially) written out to
DASD. This means that the buffer used by that page is unavailable for use by any other page until the
buffer has been written to DASD.
• If the number of pages queued to be written to DASD exceeds 85% of the total number of buffers in the
pool, an asynchronous write processor is started to put the buffers to DASD.
Similarly, if the number of buffers available for page get requests become less than 15% of the total
number of buffers in the pool, the asynchronous write processor is started to perform the write I/O
operations.
The write processor stops when the number of pages queued to be written to DASD has fallen to 75% of
the total number of buffers in the pool.
• If the number of pages queued for writing to DASD exceeds 95% of the total number of buffers in the
pool, all updates result in a synchronous write of the page to DASD.
Similarly, if the number of buffers available for page get requests becomes less than 5% of the total
number of buffers in the pool, all updates result in a synchronous write of the page to DASD.
• If the number of buffers available for page get requests ever reaches zero, a transaction that encounters
this condition is suspended until the asynchronous write processor has finished.
• If a page is frequently updated, the page spends most of its time on the queue of pages waiting to
be written to DASD. Because this queue is in least recently used order, it is possible that a frequently
updated page placed on this least recently used queue is never written out to DASD. For this reason, at
the time of update, if the page is found to have been waiting on the write operation to DASD queue for
at least two checkpoints, it is synchronously written to DASD. Updating occurs at checkpoint time and is
suspended until the asynchronous write processor has finished.
The aim of this algorithm is to maximize the time pages spend in buffer pool memory while allowing the
system to function if the system load puts the buffer pool usage under stress.
Lock manager data records
Use this topic as a reference to the format of the lock manager data records.
The format of the lock manager statistics record is described in assembler macro
thlqual.SCSQMACS(CSQDQLST).
The records contain data about the following information:
• The number of lock get requests and lock release requests.
• The number of times a lock get request determined that the requested lock was already held.
Db2 manager data records
Use this topic as a reference to the format of the Db2 manager data records.
The format of the Db2 manager statistics record is described in the following table and in assembler
macro thlqual.SCSQMACS(CSQDQ5ST) and C header file thlqual.SCSQC370(CSQDSMFC). The field names
in C are all in lowercase, for example q5st, q5stid.
If the queue manager was not started as a member of a queue sharing group, no data is recorded in this
record.
Table 36. Db2 statistics record (Q5ST)
Offset: Offset:
Dec Hex Type Len Name Description
0 0 Structure 668 Q5ST Db2 manager statistics
0 0 Bitstring 2 Q5STID Control block identifier
2 2 Integer 2 Q5STLL Control block length
IBM MQ Monitoring and performance 335
Table 36. Db2 statistics record (Q5ST) (continued)
Offset: Offset:
Dec Hex Type Len Name Description
4 4 Character 4 Q5STEYEC Control block eye catcher
8 8 Character 660 Q5STZERO QMST part cleared on occasion
8 8 Integer 4 NUMTASK Number of server tasks
12 C Integer 4 ACTTASK Number of active server tasks
16 10 Integer 4 CONNCNT Number of connect requests
20 14 Integer 4 DISCCNT Number of disconnect requests
24 18 Integer 4 DHIGMAX Max. request queue depth
28 1C Integer 4 ABNDCNT Number of Db2SRV task abends
32 20 Integer 4 REQUCNT Number of requests requeued
36 24 Integer 4 DEADCNT Number of deadlock timeouts
40 28 Integer 4 DELECNT Number of delete requests
44 2C Integer 4 LISTCNT Number of list requests
48 30 Integer 4 READCNT Number of read requests
52 34 Integer 4 UPDTCNT Number of update requests
56 38 Integer 4 WRITCNT Number of write requests
60 3C Integer 4 SCSSEL SCST (shared-channel-status) selects
64 40 Integer 4 SCSINS SCST inserts
68 44 Integer 4 SCSUPD SCST updates
72 48 Integer 4 SCSDEL SCST deletes
76 4C Integer 4 SSKSEL SSKT (shared-sync-key) selects
80 50 Integer 4 SSKINS SSKT inserts
84 54 Integer 4 SSKDEL SSKT deletes
88 58 Integer 4 SCSBFTS SCST number of times buffer too small
92 5C Integer 4 SCSMAXR SCST maximum rows on query
96 60 Integer 4 * (2) Reserved
104 68 Character 8 DELETCUW Cumulative STCK difference - Thread delete
112 70 Character 8 DELETMXW Maximum STCK difference - Thread delete
120 78 Character 8 DELESCUW Cumulative STCK difference - SQL delete
128 80 Character 8 DELESMXW Maximum STCK difference - SQL delete
136 88 Character 8 LISTTCUW Cumulative STCK difference - Thread list
144 90 Character 8 LISTTMXW Maximum STCK difference - Thread list
152 98 Character 8 LISTSCUW Cumulative STCK difference - SQL list
160 A0 Character 8 LISTSMXW Maximum STCK difference - SQL list
168 A8 Character 8 READTCUW Cumulative STCK difference - Thread read
336 Monitoring and Performance for IBM MQ
Table 36. Db2 statistics record (Q5ST) (continued)
Offset: Offset:
Dec Hex Type Len Name Description
17 6 B0 Character 8 READTMXW Maximum STCK difference - Thread read
184 B8 Character 8 READSCUW Cumulative STCK difference - SQL read
192 C0 Character 8 READSMXW Maximum STCK difference - SQL read
200 C8 Character 8 UPDTTCUW Cumulative STCK difference - Thread update
208 D0 Character 8 UPDTTMXW Maximum STCK difference - Thread update
216 D8 Character 8 UPDTSCUW Cumulative STCK difference - SQL update
224 E0 Character 8 UPDTSMXW Maximum STCK difference - SQL update
232 E8 Character 8 WRITTCUW Cumulative STCK difference - Thread write
240 F0 Character 8 WRITTMXW Maximum STCK difference - Thread write
248 F8 Character 8 WRITSCUW Cumulative STCK difference - SQL write
256 100 Character 8 WRITSMXW Maximum STCK difference - SQL write
264 108 Character 8 SCSSTCUW Cumulative STCK difference - Thread select
272 110 Character 8 SCSSTMXW Maximum STCK difference - Thread select
280 118 Character 8 SCSSSCUW Cumulative STCK difference - SQL select
288 120 Character 8 SCSSSMXW Maximum STCK difference - SQL select
296 128 Character 8 SCSITCUW Cumulative STCK difference - Thread insert
304 130 Character 8 SCSITMXW Maximum STCK difference - Thread insert
312 138 Character 8 SCSISCUW Cumulative STCK difference - SQL insert
320 140 Character 8 SCSISMXW Maximum STCK difference - SQL insert
328 148 Character 8 SCSUTCUW Cumulative STCK difference - Thread update
336 150 Character 8 SCSUTMXW Maximum STCK difference - Thread update
344 158 Character 8 SCSUSCUW Cumulative STCK difference - SQL update
352 160 Character 8 SCSUSMXW Maximum STCK difference - SQL update
360 168 Character 8 SCSDTCUW Cumulative STCK difference - Thread delete
368 170 Character 8 SCSDTMXW Maximum STCK difference - Thread delete
376 178 Character 8 SCSDSCUW Cumulative STCK difference - SQL delete
384 180 Character 8 SCSDSMXW Maximum STCK difference - SQL delete
392 188 Character 8 SSKSTCUW Cumulative STCK difference - Thread select
400 190 Character 8 SSKSTMXW Maximum STCK difference - Thread select
408 198 Character 8 SSKSSCUW Cumulative STCK difference - SQL select
416 1A0 Character 8 SSKSSMXW Maximum STCK difference - SQL select
424 1A8 Character 8 SSKITCUW Cumulative STCK difference - Thread insert
432 1B0 Character 8 SSKITMXW Maximum STCK difference - Thread insert
440 1B8 Character 8 SSKISCUW Cumulative STCK difference - SQL insert
IBM MQ Monitoring and performance 337
Table 36. Db2 statistics record (Q5ST) (continued)
Offset: Offset:
Dec Hex Type Len Name Description
448 1C0 Character 8 SSKISMXW Maximum STCK difference - SQL insert
456 1C8 Character 8 SSKDTCUW Cumulative STCK difference - Thread delete
464 1D0 Character 8 SSKDTMXW Maximum STCK difference - Thread delete
472 1D8 Character 8 SSKDSCUW Cumulative STCK difference - SQL delete
480 1E0 Character 8 SSKDSMXW Maximum STCK difference - SQL delete
488 1E8 Integer 4 LMSSEL Number of Db2 BLOB read requests
492 1EC Integer 4 LMSINS Number of Db2 BLOB insert requests
496 1F0 Integer 4 LMSUPD Number of Db2 BLOB update requests
500 1F4 Integer 4 LMSDEL Number of Db2 BLOB delete requests
504 1F8 Integer 4 LMSLIS Number of Db2 BLOB list requests
508 IFC 64 bit 8 LMSSTCUW Total elapsed time for all thread read BLOB
integer requests
516 204 64 bit 8 LMSSTMXW Maximum elapsed time for a thread read
integer BLOB request
524 20C 64 bit 8 LMSSSCUW Total elapsed time for all SQL read BLOB
integer requests
532 214 64 bit 8 LMSSSMXW Maximum elapsed time for an SQL read BLOB
integer request
540 21C 64 bit 8 LMSITCUW Total elapsed time for all thread insert BLOB
integer requests
548 224 64 bit 8 LMSITMXW Maximum elapsed time for a thread insert
integer BLOB request
556 22C 64 bit 8 LMSISCUW Total elapsed time for all SQL insert BLOB
integer requests
564 234 64 bit 8 LMSISMXW Maximum elapsed time for an SQL insert