title:Automatic diagnosis and response to memory corruption vulnerabilities
author:Jun Xu and
Peng Ning and
Chongkyung Kil and
Yan Zhai and
Christopher Bookholt
Automatic Diagnosis and Response to Memory Corruption
Vulnerabilities
Jun Xu, Peng Ning, Chongkyung Kil, Yan Zhai, Chris Bookholt
Cyber Defense Laboratory
Department of Computer Science
North Carolina State University
fjxu3, pning, ckil, yzhai, PI:EMAIL
ABSTRACT
Cyber attacks against networked computers have become re-
lentless in recent years. The most common attack method is
to exploit memory corruption vulnerabilities such as bu(cid:11)er
over(cid:13)ow and format string bugs. This paper presents a tech-
nique to automatically identify both known and unknown
memory corruption vulnerabilities. Based on the observa-
tion that a randomized program usually crashes upon a
memory corruption attack, this technique uses the crash
as a trigger to initiate an automatic diagnosis algorithm.
The output of the diagnosis includes the instruction that is
tricked to corrupt data, the call stack at the time of corrup-
tion, and the propagation history of corrupted data. These
results provide useful information in (cid:12)xing the vulnerabili-
ties. Moreover, the diagnosis process also generates a sig-
nature of the attack using data/address values embedded
in the malicious input message, and is used to block fu-
ture attacks. Such a signature is further associated with the
program execution state to reduce false positives without
decreasing the detection rate. The proposed techniques en-
able the development of a decentralized self-diagnosing and
self-protecting defense mechanism for networked computers.
We report the implementation experience and experimental
evaluation of a prototype system on Linux.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection|in-
vasive software; C.2.0 [Computer-Communication Net-
works]: Security and Protection
General Terms
Security, Experimentation
Keywords
memory corruption attack, randomization, attack diagnosis,
message (cid:12)ltering
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’05, November 7–11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.
1.
INTRODUCTION
Cyber attacks against Internet connected computer sys-
tems, including those in the critical infrastructures, have
become relentless in recent years. Malicious attackers break
into computer systems using a variety of techniques. The
most common method is to exploit memory corruption vul-
nerabilities such as bu(cid:11)er over(cid:13)ow, format string, and dou-
ble free. These vulnerabilities are not only exploited by indi-
vidual intruders, but also facilitate the success of large-scale
Internet worms and distributed denial of service (DDoS) at-
tacks. Many defensive methods against such attacks have
been investigated in the past several years, including static
analysis techniques (e.g., [8, 14]), compiler extensions (e.g.,
[11, 13]), safe library functions (e.g., [2]), execution monitor-
ing techniques (e.g., [21, 20]), and intrusion detection (e.g.,
[4, 29, 37]).
Recent fast spreading worms (e.g., Code Red [5], SQL
Slammer [6], Blaster [7]) motivated the investigation of more
e(cid:14)cient and e(cid:11)ective defense mechanisms that can stop such
attacks. Shield [38] has been developed to provide tempo-
rary protection of vulnerable systems after the vulnerabili-
ties are identi(cid:12)ed but before patches are properly applied.
However, Shield requires manually generated signatures de-
rived from known vulnerabilities. Honeycomb [22], Auto-
graph [17], EarlyBird [33], and Polygraph [26] attempted
to automatically generate attack (especially worm) signa-
tures from attack tra(cid:14)c. A limitation of these signature
generation techniques is that they all rely on other means
to identify attack tra(cid:14)c. Moreover, they all extract signa-
tures in a syntactic manner, while ignoring the semantics of
the attacks. Thus, it takes additional e(cid:11)ort to pinpoint the
vulnerabilities exploited by the attacks, though the derived
signatures are helpful in patching the vulnerabilities.
Several recent approaches attempt to monitor the execu-
tion of potentially vulnerable programs through code instru-
mentation or emulation, and recover from attacks when they
occur. TaintCheck [27] performs dynamic taint analysis (via
binary program emulation) to track the propagation of net-
work input data, and raise alerts when such data is directly
or indirectly used illegitimately. TaintCheck also generates
semantic-based attack signatures from the network input
data that eventually leads to an alert. DIRA [35] instru-
ments the code to maintain a memory update log while a
program is executed, and rolls back the memory updates to
\clean" state when an attack is detected. STEM [32] takes a
reactive approach; after an attack is detected, it replaces the
vulnerable program with an automatically patched version,
which selectively emulates potentially vulnerable code seg-
ments (through code instrumentation). All these approaches
can handle attacks exploiting unknown vulnerabilities to a
certain extent, and provide useful information in patching
the vulnerabilities. However, the use of program emulation,
or code instrumentation introduces substantial overhead in
program execution. It is desirable to seek alternative, more
e(cid:14)cient mechanisms to achieve the same goals.
In this paper, we develop a novel technique to automati-
cally identify (unknown) memory corruption vulnerabilities.
The proposed technique enables us to trace back to the vul-
nerable instructions that corrupt memory data upon a mem-
ory corruption attack. It is observed that a program in a
randomized system crashes with an extremely high proba-
bility upon such attacks. Based on this, our technique uses
a crash of a randomized program as a trigger to start the
diagnosis of memory corruption vulnerabilities. The output
of the diagnosis process includes the instruction exploited
by the attacker to corrupt critical program data, the stack
trace at the time of the memory corruption, and the his-
tory that the corrupted data is propagated after the initial
data corruption. The automated diagnosis process provides
useful information in (cid:12)xing the diagnosed vulnerabilities.
Moreover, our technique also automatically generates sig-
natures of the attacks exploiting both known and unknown
vulnerabilities. Speci(cid:12)cally, such a signature consists of the
program state at the time of attack and the memory ad-
dress values used in the attack, allowing e(cid:14)cient and e(cid:11)ec-
tive protection of the vulnerable program by (cid:12)ltering out
future attacks. These techniques enable the development
of a fully decentralized self-diagnosing and self-protecting
defense mechanism for networked computer systems.
Our approach shares a similar goal to TaintCheck [27],
DIRA [35], and STEM [32]. That is, we would like to au-
tomatically recover from attacks and prevent future ones.
However, our approach uses di(cid:11)erent mechanisms to perform
recovery and prevention of future attacks. Unlike TaintCheck
which catches potential network attacks via dynamic taint
analysis of network inputs, our approach uses a backward
tracing approach to identify memory corruption vulnerabil-
ities starting from the program crash points. Unlike DIRA
which constantly monitors the execution and maintains a
memory update log, our approach starts analysis only when
there is an attack, and thus does not introduce performance
overhead during normal server operations. Moreover, un-
like STEM [32], which selectively emulates potentially vul-
nerable code segments, our approach automatically identi-
(cid:12)es vulnerable instructions, generates attack signatures, and
uses content (cid:12)lters to prevent future attacks, thus introduc-
ing less overheads. Finally, our signature generation method
is an enhancement to the one used by TaintCheck. By in-
corporating program state into each signature, we can sig-
ni(cid:12)cantly reduce the false positive rate without decreasing
the detection rate. The contributions of this paper are listed
below:
tion attack to overwrite critical program data. Such
information allows the victim system to protect itself
against similar future attacks, and also facilitates pro-
grammers to (cid:12)x the problems quickly.
3. We enhance the signature generation techniques in [27]
to reduce the false positive rate. Our analysis and
experiments indicate that associating program state
with signature can e(cid:11)ectively reduce the false posi-
tive rate and performance overhead without increasing
false negatives.
4. We implement the proposed system and perform a se-
quence of experiments to evaluate the proposed tech-
niques on Linux.
The rest of this paper is organized as follows. Section
2 gives an overview of the proposed system and its archi-
tecture. Section 3 describes a model for memory corruption
attacks, which guides the development of our approach. Sec-
tion 4 presents the proposed automatic diagnosis technique.
Section 5 discusses our automatic response techniques for
attacks. Sections 6 and 7 present implementation and evalu-
ation of our system, respectively. Section 8 discusses related
work, and Section 9 concludes this paper.
2. SYSTEM OVERVIEW
In this paper, we focus on network service applications
(e.g., httpd, sshd), because they are critical to the availability
of the Internet infrastructure and are frequent targets of
attacks.
We harness the results in address space randomization
(e.g., [3, 28, 40]) to facilitate the detection of attacks ex-
ploiting both known and unknown memory corruption vul-
nerabilities. It is well-known that a memory corruption at-
tack typically causes a randomized program to crash due to
the di(cid:14)culty in predicting memory addresses. Thus, we use
the crashes of such randomized programs as the triggers to
start vulnerability analysis.
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:4)(cid:5)(cid:5)(cid:9)(cid:10)(cid:11)(cid:12)(cid:4)(cid:13)(cid:7)
(cid:11)(cid:11)(cid:14) (cid:8)(cid:15)
(cid:16) (cid:7)(cid:17)(cid:2)(cid:18)(cid:19)(cid:18)(cid:20) (cid:7)(cid:21) (cid:4)(cid:5)(cid:3)(cid:16) (cid:22)
(cid:23) (cid:2)(cid:29)
  !(cid:10)(cid:5)(cid:4)(cid:11)(cid:2)(cid:8)(cid:11)(cid:2)(cid:25)
(cid:7)(cid:16) (cid:6)(cid:16) (cid:11)(cid:2)(cid:3)
(cid:23) (cid:6)(cid:16) (cid:11)(cid:2)(cid:3)(cid:7)(cid:21)
(cid:13)(cid:2)(cid:11)(cid:21) (cid:4)(cid:5)(cid:15) (cid:7)(cid:16) (cid:2)(cid:5)(cid:27)
(cid:12)(cid:8)(cid:2)(cid:16)
(cid:12)(cid:11)(cid:24)
(cid:7)(cid:5)(cid:14) (cid:13)(cid:25) (cid:4)(cid:3)(cid:12)(cid:26) (cid:2)(cid:25)
(cid:7)
(cid:28) (cid:5)(cid:4)(cid:19)(cid:5)(cid:14) (cid:3)(cid:7)(cid:8)(cid:5)(cid:14)
(cid:30) (cid:9)(cid:11)(cid:4)(cid:3)(cid:14)
(cid:12)(cid:19)(cid:13)(cid:14)
(cid:12)(cid:14) (cid:19)(cid:13)(cid:4)(cid:16)
(cid:11)(cid:12)(cid:8)(cid:7)(cid:25)
(cid:12)(cid:16) (cid:7)(cid:31)
(cid:11)(cid:9)(cid:5)(cid:2)(cid:7)(cid:19)(cid:2)(cid:13)(cid:2)(cid:5)(cid:14) (cid:11)(cid:12)(cid:4)(cid:13)
(cid:1)(cid:2)(cid:16)
(cid:14) (cid:19)(cid:2)(cid:7)(cid:29) (cid:4)(cid:19)
(cid:7)
Figure 1: Detecting, diagnosing, and recovering
from memory corruption attacks
1. We develop a model for general memory corruption at-
tacks against programs running in a system with ad-
dress space randomization. The model can be used for
the analysis and defense of such attacks.
2. We develop a series of techniques to automatically di-
agnose memory corruption vulnerabilities. Our tech-
niques enable a victim system under attack to quickly
locate the instructions exploited by a memory corrup-
Figure 1 illustrates the life cycle of the detection, diag-
nosis, and recovery process in the proposed system. The
proposed system runs network service applications using ad-
dress space randomization. When a memory corruption at-
tack (e.g., a new worm) attempts to exploit an unknown
vulnerability in a service program, it typically causes the
corresponding process to crash. This crash then triggers the
automatic analysis of this attack and the vulnerability, with
(cid:14)
(cid:16)
(cid:24)
(cid:16)
(cid:16)
the input from the process image at the time of crash (e.g.,
the program counter, stack trace) and the relevant messages
received by the service process. Our proposed approach
then automatically analyzes all the information, identi(cid:12)es
the speci(cid:12)c vulnerability in the program and the message
causing the crash, and generates a signature of the attack,
which is used to block future attacks exploiting the same
vulnerability.
(cid:1)(cid:2)(cid:3)(cid:3)(cid:4)(cid:5)(cid:2)(cid:3)
(cid:1)(cid:2)(cid:3)(cid:3)(cid:4)(cid:5)(cid:2)
(cid:9) (cid:2)(cid:10)
(cid:7) (cid:5)(cid:14) (cid:4)(cid:9)
(cid:10) (cid:2)
(cid:1)(cid:2)(cid:3)(cid:3)(cid:4)(cid:5)(cid:2)(cid:11)
(cid:12) (cid:5)
(cid:13) (cid:4)(cid:14)
(cid:17) (cid:2)(cid:15)
(cid:12) (cid:5)(cid:10) (cid:4)(cid:16)
(cid:1)(cid:12)
(cid:10) (cid:4)(cid:3)(cid:27)
(cid:10) (cid:2)(cid:11)
(cid:7) (cid:5)(cid:14) (cid:4)(cid:9)
(cid:5)(cid:2)(cid:14) (cid:2)(cid:10) (cid:4)(cid:9)
(cid:7) (cid:2)(cid:15)
(cid:15) (cid:2)(cid:14)
(cid:14) (cid:2)(cid:10) (cid:4)(cid:23)
(cid:7) (cid:4)(cid:5)(cid:14)
(cid:2)(cid:14) (cid:5)(cid:7)
(cid:12) (cid:3)(cid:7) (cid:3)(cid:11)
(cid:14) (cid:2)
Figure 2: System architecture
Figure 2 shows the architecture of the proposed system.
We use a monitor to supervise a randomized version of each
network service program. All the incoming messages to such
a service program are passed through a message (cid:12)lter, which
initially forwards all the messages to the service program.
These messages are also stored in the message log for possi-
ble future analysis. The monitor has minimum interaction
with the randomized program after starting it. The respon-
sibilities of the monitor include (1) identifying the crash of
the program (e.g., by catching memory access violation sig-
nals), and (2) upon the program crash, collecting informa-
tion (e.g., program counter and stack trace) necessary for
automatic vulnerability analysis. When the automatic diag-
nosis is triggered by a program crash, the monitor passes the
collected crash information to the diagnosis engine, which
then automatically analyzes the crash information and the
messages that potentially cause the crash. The monitor may
re-execute the crashed program for a few more times to col-
lect more information. Using the proposed techniques, the
diagnosis engine can pinpoint attack message(s), the vulner-
able instruction exploited by the attack message, the stack
trace at the time of crash, and the history of the corrupted
data propagation. The diagnosis engine then generates a