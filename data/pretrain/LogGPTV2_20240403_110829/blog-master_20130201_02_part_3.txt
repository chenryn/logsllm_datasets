psql (9.3devel)  
Type "help" for help.  
digoal=# select oid,datname from pg_database where oid=16384;  
  oid  | datname   
-------+---------  
 16384 | digoal  
(1 row)  
digoal=# \c digoal  
You are now connected to database "digoal" as user "postgres".  
digoal=# select relname,relkind from pg_class where oid=16742;  
 relname | relkind   
---------+---------  
 test    | r  
(1 row)  
LOG:  00000: LockAcquire: lock [16384,16742] AccessShareLock  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockRelease: lock [16384,16742] AccessShareLock  
LOCATION:  LockRelease, lock.c:1751  
LOG:  00000: LockAcquire: lock [16384,16745] AccessShareLock  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockAcquire: lock [16384,16742] RowShareLock  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockAcquire: lock [16384,16742] RowShareLock  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockAcquire: found: lock(0x2b7faf13b898) id(16384,16742,0,2,3,1) grantMask(100) req(0,0,0,0,0,0,0)=1 grant(0,0,0,0,0,0,0)=1 wait(0) type(RowShareLock)  
LOCATION:  LOCK_PRINT, lock.c:318  
```  
代码如下 :   
```  
00298 inline static void  
00299 LOCK_PRINT(const char *where, const LOCK *lock, LOCKMODE type)  
00300 {  
00301     if (LOCK_DEBUG_ENABLED(&lock->tag))  
00302         elog(LOG,  
00303              "%s: lock(%p) id(%u,%u,%u,%u,%u,%u) grantMask(%x) "  
00304              "req(%d,%d,%d,%d,%d,%d,%d)=%d "  
00305              "grant(%d,%d,%d,%d,%d,%d,%d)=%d wait(%d) type(%s)",  
00306              where, lock,  
00307              lock->tag.locktag_field1, lock->tag.locktag_field2,  
00308              lock->tag.locktag_field3, lock->tag.locktag_field4,  
00309              lock->tag.locktag_type, lock->tag.locktag_lockmethodid,  
00310              lock->grantMask,  
00311              lock->requested[1], lock->requested[2], lock->requested[3],  
00312              lock->requested[4], lock->requested[5], lock->requested[6],  
00313              lock->requested[7], lock->nRequested,  
00314              lock->granted[1], lock->granted[2], lock->granted[3],  
00315              lock->granted[4], lock->granted[5], lock->granted[6],  
00316              lock->granted[7], lock->nGranted,  
00317              lock->waitProcs.size,  
00318              LockMethods[LOCK_LOCKMETHOD(*lock)]->lockModeNames[type]);  
00319 }  
tag枚举列表如下  
00158 /*  
00159  * LOCKTAG is the key information needed to look up a LOCK item in the  
00160  * lock hashtable.  A LOCKTAG value uniquely identifies a lockable object.  
00161  *  
00162  * The LockTagType enum defines the different kinds of objects we can lock.  
00163  * We can handle up to 256 different LockTagTypes.  
00164  */  
00165 typedef enum LockTagType  
00166 {  
00167     LOCKTAG_RELATION,           /* whole relation */  
00168     /* ID info for a relation is DB OID + REL OID; DB OID = 0 if shared */  
00169     LOCKTAG_RELATION_EXTEND,    /* the right to extend a relation */  
00170     /* same ID info as RELATION */  
00171     LOCKTAG_PAGE,               /* one page of a relation */  
00172     /* ID info for a page is RELATION info + BlockNumber */  
00173     LOCKTAG_TUPLE,              /* one physical tuple */  
00174     /* ID info for a tuple is PAGE info + OffsetNumber */  
00175     LOCKTAG_TRANSACTION,        /* transaction (for waiting for xact done) */  
00176     /* ID info for a transaction is its TransactionId */  
00177     LOCKTAG_VIRTUALTRANSACTION, /* virtual transaction (ditto) */  
00178     /* ID info for a virtual transaction is its VirtualTransactionId */  
00179     LOCKTAG_OBJECT,             /* non-relation database object */  
00180     /* ID info for an object is DB OID + CLASS OID + OBJECT OID + SUBID */  
00181   
00182     /*  
00183      * Note: object ID has same representation as in pg_depend and  
00184      * pg_description, but notice that we are constraining SUBID to 16 bits.  
00185      * Also, we use DB OID = 0 for shared objects such as tablespaces.  
00186      */  
00187     LOCKTAG_USERLOCK,           /* reserved for old contrib/userlock code */  
00188     LOCKTAG_ADVISORY            /* advisory user locks */  
00189 } LockTagType;  
LOCK数据结构如下 :   
00281 /*  
00282  * Per-locked-object lock information:  
00283  *  
00284  * tag -- uniquely identifies the object being locked  
00285  * grantMask -- bitmask for all lock types currently granted on this object.  
00286  * waitMask -- bitmask for all lock types currently awaited on this object.  
00287  * procLocks -- list of PROCLOCK objects for this lock.  
00288  * waitProcs -- queue of processes waiting for this lock.  
00289  * requested -- count of each lock type currently requested on the lock  
00290  *      (includes requests already granted!!).  
00291  * nRequested -- total requested locks of all types.  
00292  * granted -- count of each lock type currently granted on the lock.  
00293  * nGranted -- total granted locks of all types.  
00294  *  
00295  * Note: these counts count 1 for each backend.  Internally to a backend,  
00296  * there may be multiple grabs on a particular lock, but this is not reflected  
00297  * into shared memory.  
00298  */  
00299 typedef struct LOCK  
00300 {  
00301     /* hash key */  
00302     LOCKTAG     tag;            /* unique identifier of lockable object */  
00303   
00304     /* data */  
00305     LOCKMASK    grantMask;      /* bitmask for lock types already granted */  
00306     LOCKMASK    waitMask;       /* bitmask for lock types awaited */  
00307     SHM_QUEUE   procLocks;      /* list of PROCLOCK objects assoc. with lock */  
00308     PROC_QUEUE  waitProcs;      /* list of PGPROC objects waiting on lock */  
00309     int         requested[MAX_LOCKMODES];       /* counts of requested locks */  
00310     int         nRequested;     /* total of requested[] array */  
00311     int         granted[MAX_LOCKMODES]; /* counts of granted locks */  
00312     int         nGranted;       /* total of granted[] array */  
00313 } LOCK;  
解释 id(16384,16742,0,2,3,1)  
00193 /*  
00194  * The LOCKTAG struct is defined with malice aforethought to fit into 16  
00195  * bytes with no padding.  Note that this would need adjustment if we were  
00196  * to widen Oid, BlockNumber, or TransactionId to more than 32 bits.  
00197  *  
00198  * We include lockmethodid in the locktag so that a single hash table in  
00199  * shared memory can store locks of different lockmethods.  
00200  */  
00201 typedef struct LOCKTAG  
00202 {  
00203     uint32      locktag_field1; /* a 32-bit ID field */  
00204     uint32      locktag_field2; /* a 32-bit ID field */  
00205     uint32      locktag_field3; /* a 32-bit ID field */  
00206     uint16      locktag_field4; /* a 16-bit ID field */  
00207     uint8       locktag_type;   /* see enum LockTagType */  
00208     uint8       locktag_lockmethodid;   /* lockmethod indicator */  
00209 } LOCKTAG;  
00132 /* These identify the known lock methods */  
00133 #define DEFAULT_LOCKMETHOD  1  
00134 #define USER_LOCKMETHOD     2  
本例是行锁, 所以设置tag的值对应以下宏 :   
00240 #define SET_LOCKTAG_TUPLE(locktag,dboid,reloid,blocknum,offnum) \  
00241     ((locktag).locktag_field1 = (dboid), \  
00242      (locktag).locktag_field2 = (reloid), \  
00243      (locktag).locktag_field3 = (blocknum), \  
00244      (locktag).locktag_field4 = (offnum), \  
00245      (locktag).locktag_type = LOCKTAG_TUPLE, \  
00246      (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)  
因此 id(16384,16742,0,2,3,1)  
16384 : lock->tag.locktag_field1 = dboid  
16742 : lock->tag.locktag_field2 = reloid  
0 : lock->tag.locktag_field3 = blocknum  
2 : lock->tag.locktag_field4 = offnum  
3 : lock->tag.locktag_type = LOCKTAG_TUPLE (见LockTagType枚举)  
1 : lock->tag.locktag_lockmethodid = DEFAULT_LOCKMETHOD (见DEFAULT_LOCKMETHOD定义)  
```  
offnum对应CTID :   
```  
digoal=# select ctid,* from test;  
 ctid  | id | info   
-------+----+------  
 (0,2) |  2 |   
 (0,3) |  1 | test  
(2 rows)  
LOG:  00000: LockAcquire: new: proclock(0x2b7faf1c1160) lock(0x2b7faf13b898) method(1) proc(0x2b7faf3da0e0) hold(0)  
LOCATION:  PROCLOCK_PRINT, lock.c:330  
LOG:  00000: LockCheckConflicts: conflicting: proclock(0x2b7faf1c1160) lock(0x2b7faf13b898) method(1) proc(0x2b7faf3da0e0) hold(0)  
LOCATION:  PROCLOCK_PRINT, lock.c:330  
LOG:  00000: WaitOnLock: sleeping on lock: lock(0x2b7faf13b898) id(16384,16742,0,2,3,1) grantMask(100) req(0,1,0,0,0,0,0)=2 grant(0,0,0,0,0,0,0)=1 wait(0) type(RowShareLock)  
LOCATION:  LOCK_PRINT, lock.c:318  
```  
## 小结  
1\.   
单条记录同时被多个事务共享锁时, 锁信息存储在pg_multixact中.   
记录的头信息中t_infomask HEAP_XMAX_IS_MULTI 比特位将会被设置。  
记录的头信息中t_xmax代表的是MultiXactId.  
2\.   
当多个事务并发请求锁同一条tuple时, 先请求锁的会话如果与已经存在的锁发生冲突, 将会产生一个锁队列, 后来的会话请求锁时需要先检测锁队列是否冲突再检测与已经HOLD住的锁是否冲突. 因此不会造成多个共享锁持续占用TUPLE而独占锁一直都请求不到锁的情况。  
## 参考  
1\. src/backend/access/heap/README.tuplock  
2\. src/include/access/htup_details.h  
3\. src/include/access/multixact.h  
4\. src/backend/access/transam/multixact.c  
5\. src/include/access/heapam.h  
6\. src/backend/access/heap/heapam.c  
7\. src/backend/utils/adt/lockfuncs.c  
8\. src/backend/storage/lmgr/lock.c  
9\. src/backend/storage/lmgr/lmgr.c  
10\. http://www.postgresql.org/docs/devel/static/pgrowlocks.html  
11\. http://www.postgresql.org/docs/devel/static/pageinspect.html  
12\. https://github.com/postgres/postgres/commit/0ac5ad5134f2769ccbaefec73844f8504c4d6182  
13\. http://blog.163.com/digoal@126/blog/static/16387704020130249109133/  
14\. http://blog.163.com/digoal@126/blog/static/16387704020130305109687/  
15\. http://blog.163.com/digoal@126/blog/static/163877040201210134586363/  
16\. http://blog.163.com/digoal@126/blog/static/1638770402011515105557166/  
17\. http://blog.163.com/digoal@126/blog/static/16387704020130312271679/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")