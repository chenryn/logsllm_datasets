364 
352 
12 
215 
208 
7 
Looking at the prefixes to which these malicious reserved sub-ranges belong, we notice that all 86 ranges described 
in Table 9 are concentrated in 4 large OVH prefixes as Table 10 shows. 
Table 13. BGP prefixes of the rogue reserved ranges. 
Nb IPs 
BGP prefix 
388 
198.50.128.0/17 
128 
192.95.0.0/18 
80 
198.27.64.0/18 
12 
142.4.192.0/19 
We used two investigative techniques to track rogue IP ranges: the first one is to monitor sub-allocated ranges 
reserved by suspicious customers. The second technique is to monitor the IP’s service fingerprints. Below, we review 
a few examples of the IP ranges used to host Nuclear Exploit domains [21]: 
1) For the IPs hosted on besthosting.ua, the live IPs in the range 31.41.221.131 to 31.41.221.143 all have the same 
server setup (nmap fingerprint) 
22/tcp  open  ssh     OpenSSH 5.5p1 Debian 6+squeeze4 (protocol 2.0) 
80/tcp  open  http    nginx web server 0.7.67 
111/tcp open  rpcbind 
29 
2) For the IPs hosted on pinspb.ru, the IPs in the range 5.101.173.1 to 5.101.173.10 have the following fingerprint: 
22/tcp  open  ssh     OpenSSH 6.0p1 Debian 4 (protocol 2.0) 
80/tcp  open  http    nginx web server 1.2.1 
111/tcp open  rpcbind 
3) For the IPs hosted on OVH, the IPs in the range 198.50.143.64 to 198.50.143.79 have the following fingerprint: 
22/tcp  open     ssh          OpenSSH 5.5p1 Debian 6+squeeze4 (protocol 2.0) 
80/tcp  open     http         nginx web server 0.7.67 
445/tcp filtered microsoft-ds 
The IPs used to host the name servers also had the same fingerprints [21]. Notice that initially the malware IPs in a 
given range used to become active in bulk and sequential order, but later as an evasion method, the bad actors 
started bringing them up at random, one by one or a few at a time, right when they are about to deliver the Exploit kit 
attack. 
The combination of the two investigative techniques made it possible to predict the next attack IPs with practically no 
false positives. As hosting providers become more aggressive in suspending rogue customers’ accounts and swifter 
in taking down malware IPs, and as bad actors choose hosting providers on IP space where RIRs’ whois service 
does not always provide full information about reserved ranges and customers (e.g RIPE), the first technique might 
not always work. The second technique of fingerprint tracking, however, still provides accurate results when 
combined with other intelligence. 
USE CASE 6: DETECTING MALICIOUS SUBDOMAINS UNDER COMPROMISED DOMAINS 
In this section, we discuss the results of a 5-month study we conducted between February and June 2014 that 
followed the study of Section 3. For this project, we designed a system to preemptively detect malicious subdomains 
injected under compromised domains (particularly GoDaddy domains) and track their IP infrastructure. The 
phenomena of compromised GoDaddy domains serving malware has been around for at least 2 years [23]. The 
compromise can happen through at least two methods: hacking GoDaddy accounts or injecting malicious redirection 
scripts into vulnerable GoDaddy websites. When the compromise is successful, subdomains (third level domains) are 
injected under the GoDaddy domains (second level domains), and these subdomains resolve to malicious sites. 
Most abused ASNs 
By monitoring this threat from February to the present day, we observed that the subdomains resolve to IPs serving 
Exploit kit attacks (typically Nuclear [24][25] and Angler [26][27]), and also browser-based ransomware. We recorded 
several hundred IPs hosting these malicious subdomains over the period of the study.  
We see that the top 5 abused ASNs are: 
● 
16276 OVH SAS 
● 
24961 myLoc managed IT AG 
● 
15003 Nobis Technology Group, LLC 
● 
41853 LLC NTCOM 
● 
20473 Choopa, LLC 
AS16276, which is OVH, hosted 18% of the total malicious IPs. In this specific case, as the abuse of OVH has been 
exposed through February 2014 (particularly for hosting Nuclear Exploit domains [21]), bad actors have changed their 
MO: they switched temporarily to other hosting providers, and started using recycled IPs (not reserved exclusively for 
Exploit domains). Additionally, OVH took action by suspending rogue accounts. However, by monitoring the 
compromised domains’ campaigns, we observed that OVH was still being abused by bad actors to host malicious 
content. These were the general changes in bad actors’ MO that we observed: 
30 
● 
From a domain perspective, for a while, bad actors had been abusing various ccTLDs (e.g. .pw, .in.net, .ru, 
etc.) facilitated by rogue or victim registrars and resellers. Then, they supplemented that approach with 
using compromised domains, particularly GoDaddy domains under which they inject subdomains to host 
Exploit kit landing urls and browlock (Notice that using compromised domains for attacks goes further back 
in the past for other different campaigns). 
● 
From an IP perspective, bad actors used to bring the attack hosting IPs online in contiguous chunks, then 
they started bringing them up in randomized sets or one IP at a time. 
● 
The other notable fact is that bad actors used to abuse OVH Canada (attached to ARIN) where rogue 
customers were reserving re-assigned small ranges (/27, /28, /29, etc.). By consulting the ARIN Rwhois 
database, it was possible to correlate the rogue customers with the IP ranges they reserve and therefore 
predict and block the IP infrastructures they set up for Exploit kit attacks. As the adversaries changed MO, 
this method became less effective in tracking them. 
● 
The shift became clear when they started to more frequently use ranges on OVH’s European IP space 
(which is attached to RIPE) as well as other European providers. Typically, we saw small gaming hosting 
providers being abused among other platforms. 
Additionally, although the standard geolocation of OVH European IP space maps to France (FR), the attack IP 
ranges were reserved from OVH's server pools in various European countries (France, Belgium, Italy, UK, Ireland, 
Spain, Portugal, Germany, Netherlands, Finland, Czech Republic, and Russia). This clearly shows that the 
adversaries are diversifying their hosting assets, which provides them redundancy and evasive capabilities. Notice 
also that RIPE has stricter data protection laws so it would be more difficult to obtain information about customers, 
and that could explain the shift in hosting infrastructures by the bad actors. 
More generally, we list a few of the small-scale hosting providers involved in hosting the attack subdomains. These 
hosting providers could either be abused, complicit with the bad actors, or simply lax about the maliciousness of the 
content they host. Notice the rogue providers among these will often switch prefixes by dropping dirty ones and 
reserving new ones from the backbone providers they are attached to. 
● 
http://king-servers.com/en/ This hoster has been observed to host Exploit kit domains (Angler, Styx), porn, 
dating sites, pharma sites [28][29]. It was also described by a comment on Web Of Trust as “Offers 
bulletproof hosting for Russian-Ukrainian criminals (malware distributors, etc.)” [30]. 
Figure 22. King-servers main website. 
31 
● 
http://evrohoster.ru/en/ hosted browlock through redirections from porn sites [31]. 
● 
http://www.xlhost.com/ hosted Angler EK domains [32] 
● 
https://www.ubiquityhosting.com/ hosted browlock. 
● 
http://www.qhoster.bg/ hosted Nuclear EK domains. 
Figure 23. Qhoster.bg main website. 
● 
http://www.codero.com/ 
● 
http://www.electrickitten.com/web-hosting/ 
32 
Figure 24. electrickitten.com main website. 
● 
http://hostink.ru/ 
String Analysis of Domain Names 
During this study, we recorded 19,000+ malicious subdomains injected under 4200+ compromised GoDaddy 2LDs. 
By analyzing the strings used for the subdomains, we recorded 12,000+ different labels. We show the list of top 5 
labels used; police, alertpolice, css, windowsmoviemaker, solidfileslzsr. police and alertpolice were the most common 
labels for hostnames serving browlock. The remaining labels were used for hostnames serving mainly Exploit kit 
attacks. In the Figure below, we show the frequency of number of occurrences for all used labels. 
33 
Figure 25. Frequency of number of occurrences of subdomains labels. 
One label occurred 746 times (police), 1 label occurred 22 times (alertpolice), 1 label occurred 10 times (css), 15 
labels occurred 6 times (windowsmoviemaker, solidfileslzsr are among them), and 11,727 distinct labels occurred a 
single time. 
Part 3: 3D Visualization Engine 
When it comes to graph visualization, there are multiple approaches to the problem however the main purpose of the 
engine is to analyze the topology of our knowledge base, therefore we need to orientate toward visualization 
techniques that will let the data drive the layout and not the opposite. For that very special kind of visuals, the state-
of-the art generally revolves around force-directed layouts [33]. 
The general concept is fairly simple : A force system is created using the entities of the dataset. The system is then 
simulated inside a physics engine for a certain number of iterations and the result is an multi-dimensional 
arrangement (usually 2D or 3D) completely defined by the shape of the relational structure therefore highlighting 
hidden clusters or topological patterns that may have gone completely invisible before then. 
The Fruchterman and Reingold algorithm 
Discovered in 1991, the Fruchterman and Reingold layout is one of the classic force-directed layouts. The main idea 
is to treat vertices in the graph as "atomic particles or celestial bodies, extering attractive and repulsive forces from 
one another". 
The force system operates as described in the diagram below : 
34 
Figure 26. Force-directed system. 
Without entering into too many technical details about the math supporting the model, the principle is elementary : 
Connected nodes attract each other and non-connected nodes repulse each other. 
The attractive force fa(d) and the repulsive force fr(d) both depend on the distance between the nodes and a 
constant k controlling the density of the layout. 
The algorithm also adds a notion of temperature which controls the displacement of the vertices. The higher the 
temperature, the faster the movement. 
The physics represent a system inspired by electrical or celestial forces associated with a general technique called 
"simulated annealing" [34] where increasing/decreasing the temperature affects the particles thermodynamics 
vibration, helping them to progressively reach an equilibrium state where all the node forces become even. That state 
usually looks like a visually pleasing molecule-shaped layout where relational clusters will aggregate in the same 
areas. 
This is only one of many variations of the force-directed layouts. Many other versions can be found on various 
papers. They will be integrated and documented in this white paper as they are implemented in the data visualization 
engine. 
Dealing with large graphs 
Being able to visualize a graph with a dozen of nodes and edges is absolutely not enough for modern day 
requirements. Most modern databases include millions or billions of entries. All 3D engines and particle systems have 
their physical limitations and force-directed layout algorithms usually increase in complexity as the size of the graph 
grows. Knowing those factors, how do we work around these issues ? 
a. Entity grouping 
One way to decrease the amount of information to process is the look at it from a higher level. Instead of dealing with 
entities, we can create nodes representing groups. The possibilities are endless depending on the subject we want to 
visualize. For instance : If we wanted to visualize the whole known universe with its planets and stars, it would make 
sense to structure our representation by a fractal approach where we would look first at galaxies then stars, planets, 
35 
continents, countries, cities (etc.) to reduce the size of the point cloud. We could then interactively decide to add more 
details on the fly as we move closer from a certain city. This would give access to the whole information without 
having to deal with all of it at once. 
b. Sampling 
Another interesting way to limit the size of a dataset without completely losing the fine details is to use sampling 
methods. We would take a certain certain percentage or a random sample of the complete dataset. The random 
subset could be built using a uniform or normal distribution (or any other user-defined distribution) and then more 
easily processed. Using the same previous universe analogy, for example we would randomly remove half of the 
galaxies, half of the planets/stars, half of the cities (etc.) and process the result. The data scientist has to adjust his 
hypotheses or assumptions based on the way the data was pruned. 
Figure 27. Random walk example. 
When dealing with graphs, an easy way to take random sample of a large graph is to use a "Random Walk" 
approach [35]. One would select random entry points in the graph and trace a random path in the graph starting from 
those points. 
There are many ways to tweak such an exploration technique. It highly depends on the user modifications and the 
biases involved in the selection of the random candidates but in general a random walk helps understanding the 
general structure of a very large graph. 
c. Parallelization 
When every other pruning technique has been used, the last answer is parallelization. We can effectively add more 
computing power to a system by distributing the calculation. This can happen remotely using "Grid Computing"  
technologies or localy using the performance of multiple threads / cores / processes [36]. However, the processing 
algorithm needs to be rewritten to work in a parallel fashion, which is unfortunately not always completely possible. 
36 
Using the most recent graphic cards we can take advantage of efficient GPUs and distribute the calculation on their 
always-increasing number of cores and threads. GPUs have become insanely good at working with geometrical data 
(such as vectors, colors, matrices, textures or any kind of computation involving a combination of these). 
Learning how to leverage GPUs (Or any parallel platform) with technologies such as OpenGL, GLSL and OpenCL 
(among many others) is definitely one key to unlock our theoretical barrier. 
Figure 28. OpenCL architecture. 
With OpenCL for example, a task can be fully or even partially distributed over several compute units. The efficiency 
of the whole system has then to be maximized by optimizing the different parts of the algorithm (Memory access, 
Instructions, Concurrency...). 
CONCLUSION 
In this paper, we covered a two-pronged strategy to catch malware at the DNS and IP level. First, we discussed 
methods to track fast flux botnets and presented a study on the zbot fast flux proxy network. Second, we proposed 
new methods to explore malicious IP space that enrich current reputation techniques. Known techniques assign 
maliciousness scores to IPs, prefixes, and ASNs based on counting volume of hosted content. In this work, we 
proposed to consider the topology of the AS graph, look at a granularity smaller than the BGP prefix and look at 
overlapping outages. In the first case, we showed cases of rogue sibling peripheral ASNs that are delivering common 
suspicious payloads. In the second case, we studied sub-allocated IP ranges and shed light on the MO of bad actors 
to abuse these allocations from providers and avoid detection. Our system provides actionable intelligence and helps 
preemptively detect, quarantine, and monitor or block specific rogue IP space. Finally, we presented our novel 3D 
visualization engine that adequately displays the use cases and offers a graph navigation and investigation tool. We 
demonstrated the process which transforms raw data into stunning 3D visuals. The engine features different 
techniques used to build and render large graph datasets: Force Directed algorithms accelerated on the GPU using 
OpenCL, 3D rendering and navigation using OpenGL ES, and GLSL Shaders. 
37 
REFERENCES 
[1] Distributed Malware Proxy Networks, B. Porter, N. Summerlin, BotConf 2013 
[2] http://labs.opendns.com/2013/12/18/operation-kelihos-presented-botconf-2013/ 
[3] https://zeustracker.abuse.ch/ 
[4] http://www.malware-traffic-analysis.net/ 
[5] B. Stone-Gross, C. Kruegel, K. Almeroth, A. Moser, E. Kirda, “Finding rogue networks”, Annual Comp. Security 
Applications Conference, ACSAC ‘09. 
[6] F. Roveta, L. Di Mario, F. Maggi, G. Caviglia, S. Zanero, P. Ciuccarelli, “BURN: Baring Unknown Rogue 
Networks”, 8th Intl. Symposium on Visualization for Cyber Security, VizSec ‘11. 
[7] T. Yu, R. Lippmann, J. Riordan, S. Boyer, “Ember: a global perspective on extreme malicious behavior”, 7th Intl. 
Symposium on Visualization for Cyber Security, VizSec ‘10. 
[8] C. Wagner, J. Francois, R. State, A. Dulaunoy, T. Engel, G. Massen, “ASMATRA: Ranking ASs Providing Transit 
Service to Malware Hosters”, IEEE International Symposium on Integrated Network Management (IM 2013), 2013. 
[9] A. Broido, K. Claffy, “Analysis of RouteViews BGP data: policy atoms”, Network Resource Data Management 
Workshop, May 2001. 
[10] http://archive.routeviews.org/bgpdata/ 
[11] http://www.cidr-report.org/as2.0 
[12] http://bgp.he.net 
[13] http://en.wikipedia.org/wiki/Vertex_(graph_theory) 
[14] http://www.team-cymru.org/Services/ip-to-asn.html 
[15] http://dev.maxmind.com/geoip/legacy/geolite/ 
[16] https://www.virustotal.com/en/ip-address/5.254.120.124/information/ 
[17] http://pastebin.com/X83gkPY4 
[18] http://telussecuritylabs.com/threats/show/TSL20130715-08 
[19] http://www.f-secure.com/v-descs/trojan_html_browlock.shtml 
[20] http://www.ovh.com/ 
[21] D. Mahjoub, “When IPs go Nuclear”, http://labs.opendns.com/2014/02/14/when-ips-go-nuclear/ 
[22] http://blog.malwaremustdie.org/2014/02/tango-down-of-nuclear-packs-174.html 
[23] http://nakedsecurity.sophos.com/2012/11/23/hacked-go-daddy-ransomware/ 
[24] http://www.malware-traffic-analysis.net/2014/05/08/index.html 
[25] http://www.malware-traffic-analysis.net/2014/05/13/index.html 
[26] http://www.malware-traffic-analysis.net/2014/05/25/index.html 
[27] http://www.malware-traffic-analysis.net/2014/06/03/index.html 
[28] http://urlquery.net/report.php?id=1397035856786 
[29] https://www.virustotal.com/en/ip-address/184.105.139.31/information/ 
[30] https://www.mywot.com/en/scorecard/king-servers.com/comment-15984778#comment-15984778 
[31] https://www.virustotal.com/en/ip-address/62.75.195.244/information/ 
[32] http://urlquery.net/report.php?id=1399060473120 
[33] http://cs.brown.edu/~rt/gdhandbook/chapters/force-directed.pdf 
[34] http://en.wikipedia.org/wiki/Simulated_annealing 
[35] http://en.wikipedia.org/wiki/Random_walk 
[36] http://en.wikipedia.org/wiki/Grid_computing