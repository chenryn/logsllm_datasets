---
## Page 22
本文档使用书栈(BookStack.CN) 构建
如果prometheus正常启动，你将看到如下信息：
启动 Prometheus Server
如果你看到类似输出，表示你已安装成功：
使用 tar 解压缩 prometheus-1.6.2.linux-amd64.tar.gz
当解压缩成功后，
服务
创建
二进制包安装
3.
2
3
2
 INFo[oooo] Loading configuration file prometheus.yml
Prometheus 目录，
 INFo[oooo] Starting prometheus (version=1.6.2, branch=master,
./prometheus
INFo[0000] Build context (go=go1.8.1, user=root@c99d9d650cf4,
revision=b38e977fd8cc2a0d13f47e7f0e17b82d1a908a9a）
prometheus,
./prometheus version
cd prometheus-1.6.2.1inux-amd64 
cd ~/Prometheus
mkdir ~/Prometheus
date=20170511-13:03:00）
source=main.go:88 
tar
 build user:
go version:
build date:
 -xvzf ~/Download/prometheus-1.6.2.linux-amd64.tar.gz
version 1.6.2 (branch: master, revision: xxxx)
，可以运行 version 检查运行环境是否正常
g01.8.1
XXXX 
XXXX 
用于存放所有 Prometheus 相关的运行
source=main.go:89
---
## Page 23
本文档使用书栈(BookStack.CN)构建
来查看，比如
以我们现在可以使用
在默认配置中，我们已经添加了 Prometheus Server 的监控，所
当Prometheus 启动后，你可以通过浏览器来访问
9090.
通过启动日志，可以看到Prometheus Server 默认端口是
二进制包安装
AddGraph
 prometheus buld info
Prometheus  Alrts Graph Status+
Graph Console
Add Graph
Prometheus
http://IP:9090,
rometheus
GraphConsole
Execute-insert metric at cursor-
Expression pressShift+Enterfornewlins)
S
source=web.go:259 
INFo[00o0] Listening on :9090
source=targetmanager.go:61
INFo[oooo] Starting target manager...
source=storage.go:432 
INFo[oooo] 0 series loaded.
source=storage.go:421 
..'syunuo peau pue dew satias butpeom [oooolounI
source=main.go:251
Alers  Graph Statusv
将看到如下页面
Help
 PromQL
(Prometheus Query Language)
RemoveGrap
23
---
## Page 24
本文档使用书栈(BookStack.CN)构建
2.
总结
二进制包安装
可以看出 Prometheus 二进制安装非常方便，没有依赖，自带查
里，或者使用 supervisord 作为服务自启动。
在生产环境中，
询 web 界面。
，我们可以将 Prometheus 添加到init 配置
---
## Page 25
本文档使用书栈(BookStack.CN)构建
Docker管理
如果安装成功你可以访问
Docker 镜像地址 Quay.io
安装
下面我将已 mac版本的 Docker作为演示
首先确保你已安装了最新版本的 Docker，如果没有安装请点击这里
Docker 安装
Docker 安装
执行命令安装
Docker 安装
AddGraph
Execute
Expression(pressShift+Enterfornewlines)
·Docker 安装
-insert metric at cursor-
quay.io/prometheus/prometheus
$ docker run --name prometheus -d -p 127.0.0.1:9090:9090
。安装
Alerts Graph Statusv Help
Docker管理 prometheus
 prometheus
127.0.0.1:9090
查看到该页面
---
## Page 26
本文档使用书栈(BookStack.CN)构建
运行
运行 docker ps 查看所有服务
Docker 安装
行
行
2
127.0.0.1:9090->9090/tcp 
e9ebc2435387
NAMES 
CREATED
CONTAINER ID
[docker stop prometheus
docker stats prometheus 
 docker start prometheus 
quay.io/prometheus/prometheus
STATUS
IMAGE
26 minutes ago
prometheus
停止服务
查看 prometheus 状态
启动服务
PORTS
Up 26 minutes
COMMAND
---
## Page 27
本文档使用书栈(BookStack.CN)构建
本章将介绍 Prometheus 一些基础概念。包括:
基础概念
基础概念
基础概念
·基础概念
·作业与实例
·四种 Metric Type
·数据模型
---
## Page 28
本文档使用书栈(BookStack.CN)构建
时序样本
持中文。
属于 Prometheus 保留，标签的值可以是任何 Unicode 字符，支
标签名称由 ASCII 字符，
http 中的 POST 请求。
的实例，例如
时序的标签可以使
http 请求的总数。
般表示一个可以度量的指标，例如
足正则表达式
时序的名字由ASCII字符，数字，
标签定义的，具有相同的名字以及标签属于相同时序。
时序(time series）是由名字(Metric），以及一组 key/value
时序索引
签)，以时间维度存储连续的数据的集合。
Prometheus 存储的是时序数据，
数据模型
数据模型
数据模型
·数据模型
。格式
。时序索引
时序样本
http_requests_total{method="posT"}
[a-zA-Z_:][a-zA-Z0-9_:]*
 Prometheus 的数据更加丰富，能够区分具体不同
，数字，以及下划线组成，
即按照相同时序(相同的名字和标
下划线，以及冒号组成，
http_requests_total”,
其名字应该具有语义化，
可以表示所有
其中
可以表示
，它必须满
开头
28
---
## Page 29
本文档使用书栈(BookStack.CN)构建
其中包含时序名字以及时序的标签。
Prometheus 时序格式与 OpenTSDB 相似：
格式
按照某个时序以时间维度采集的数据，称之为样本，其值包含：
数据模型
·一个毫秒级的unix 时间戳
）一个float64值
{=, ...}
---
## Page 30
本文档使用书栈(BookStack.CN)构建
例如 Prometheus server 中 
高变低，
Gauge
容易得到任意区间数据的增量，
例如 Prometheus server 中
的，我们往往用它记录服务请求总量，
Counter表示收集的数据是按照某个趋势（增加／减少）一直变化
Counter
Summary 四种类型。
Prometheus 时序数据分为 Counter，Gauge，Histogram,
时序 4种类型
Metric types
Metric types
Gauge
·时序4种类型
o Histogram vs Summary
o Summary
o Histogram
o Gauge
o Counter
表示搜集的数据是一个瞬时的，
往往可以用来记录内存使用率、
这个会在PromQL
go_goroutines/
错误总数等。
磁盘使用率等。
与时间没有关系，
表示
一节中细讲。
可以任意变
---
## Page 31
本文档使用书栈(BookStack.CN)构建
Histogram vs Summary
例如 Prometheus server 中
存储了
段时间内数据采样结果，
Summary 和 Histogram 类似，
Summary
数据的分位数。
中每个时序需要存储的chunks 数量，我们可以用它计算待持久化的
例如 Prometheus server 中
其指定区间以及总数进行统计，通常我们用它计算分位数的直方图。
围内对数据进行采样，
bound>"}
Histogram 由
Histogram
Metric types
prometheus_target_interval_length_seconds。
{=<>
 prometheus_local_storage_series_chunks_persisted ,
_sum
·Histogram 需要通过
·都包含“
Summary 直接存储了
’quantile 数据，
?
 _sum
_bucket{le="+Inf"}
_sum,
 _bucket{le="_count
：（通常是请求持续时间或响应大小），并能够对
（通常是请求持续时间或响应大小），它直接
而不是根据统计区间计算出来的。
 quantile 的值。
_count组成，主要用于表示一
_bucket
_count 
组成，
 {quantile="
主要用于表示一段时间范
计算 quantile,
表示 Prometheus
而
---
## Page 32
本文档使用书栈(BookSt
Metric types
tack.CN)构建
---
## Page 33
本文档使用书栈(BookStack.CN)构建
对每一个实例而言，prometheus 按照以下时序来存储所采集的数据
configuration documentation
如果其中任一标签已经在此前采集的数据中存在，那么将会根据
作为数据源（target）的标识，以便区分：
prometheus在采集数据的同时，会自动在时序的基础上添加标签，
如下是一个含有四个重复实例的作业：
prometheus 中，将任意一个独立的数据源（target）称之为实例
作业与实例
样本：
自生成标签和时序
（instance）。
作业和实例
作业与实例
honor_labels
·自生成标签和时序
+
2
·作业和实例
instance: The : part of the target's URL that was
job: The configured job name that the target belongs to.
- job: api-server 
scraped.
-instance 2: 1.2.3.4:5671
-instance 1: 1.2.3.4:5670
instance 4: 5.6.7.8:5671
instance 3: 5.6.7.8:5670
设置选项来决定新标签。详见官网解释：SCrape
：包含相同类型的实例的集合称之为作业（job）。
33
---
## Page 34
本文档使用书栈(BookStack.CN)构建
其中
作业与实例
S
4
W
2
表示从该数据源获取的样本数
scrape_samples_scraped{job="", instance=""]
"}表示采用重定义标签（relabeling）操作后仍然剩余的样本数
scrape_samples_post_metric_relabeling{job="", instance="
表示拉取数据的时间间隔
scrape_duration_seconds{job="",
up{job="", 
up{job="", 
up
时序可以有效应用于监控该实例是否正常工作。
instance=""}：θ 表示该实例故障 
 instance=""}：1 表示该实例正常工作
 instance=
"}
---
## Page 35
本文档使用书栈(BookStack.CN)构建
本章将介绍 PromQL 基本用法，示例，以及与 SQL 比较。
PromQL
PromQL
·PromQL
---
## Page 36
本文档使用书栈(BookStack.CN)构建
正数，浮点数：表达式中可以使用正数或浮点数，例如：
式如：
Golang 字符串语法一致，可以使用
字符串和数字
句，查看结果，例如：
我们可以在页面
日常数据可视化，rule 告警中都会使用到它。
开发的数据查询 DSL语言，语言表现力非常丰富，内置函数很多，
PromQL （Prometheus Query Language）是 Prometheus 自己
PromQL 
PromQL 基本使用
字符串：
PromQL 基本使用
2
·PromQL基本使用
"this is a string"
 http_requests_total{code="200"}
`these are not unescaped: \n ＇ "\t`
'these are unescaped: \n \\ \t' 
。内置函数
。字符串和数字
在查询语句中，字符串往往作为查询条件 labels 的值，和
操作符
查询条件 
查询结果类型
．基本使用
http: //localhost:9090/graph
中，输入下面的查询语
在
格
---
## Page 37
本文档使用书栈(BookStack.CN)构建
操作符
查询条件支持正则匹配，例如：
等价于 {name="http_requests_total"}。
成的，其实名字也可以写出标签的形式，例如
Prometheus 存储的是时序数据，而它的时序是由名字和一组标签构
查询条件
PromQL 查询结果主要有 3 种类型：
一个简单的查询相当于是对各种标签的筛选，例如：
查询结果类型
PromQL 基本使用
3.
2
·瞬时数据（Instantvector）：包含一组时序，每个时序只有
http_requests_total{code!～"2.."}// 表示查询 code 不为"2xx" 的数据
http_requests_total{code!="20o"}// 表示查询 code 不为"20o" 的数据
：count(http_requests_total)
纯量数据（Scalar）：纯量只有一个数字，没有时序，例
http_requests_total{code=～"2.."}// 表示查询code 为"2xx"的数据
点，例如：http_requests_total[5m]
区间数据（Range vector）：包含一组时序，每个时序有多个
一个点，例如：http_requests_total
http_requests_total，code 为"2oo" 的数据
http_requests_total{code="20o"}// 表示查询名字为
-2.4
http_requests_total
---
## Page 38
本文档使用书栈(BookStack.CN)构建
由浮点数转为整数的floor 和ceil,
Prometheus 内置不少函数，方便查询以及数据格式化，例如将结果
内置函数
>（and，unless）>（or）的原则。
注意，
大的数据。
count_values, bottomk, topk, quantile,”
支持的聚合运算符有
聚合运算符：
等于5 或者2 的数据。
5 or http_requests_total == 2
支持的逻辑运算符有
逻辑运算符：
>100
支持的比较运算符有
比较运算符：
2表示将 http_requests_total 所有数据 double一倍。
支持的算术运算符有
算术运算符：
Prometheus 查询语句中，支持常见的各种表达式操作符，例如
PromQL 基本使用
 max(http_requests_total) 
 和四则运算类型，
表示 http_requests_total 结果中大于 10θ 的数据。
sum, min, max, avg, stddev, stdvar, count, 
，Prometheus 的运算符也有优先级，它们遵
and, or, unless
==,!=,>、=, 
(created_at);
。总结
。聚合，
。基本查询对比 
。MySQL数据准备
value DOUBLE NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 code VARCHAR(256),
created_at DOUBLE NOT NULL,
method VARCHAR(256),
job VARCHAR(256),
instance VARCHAR(256),
handler VARCHAR(256),
统计高级查询
http_requests_total
4