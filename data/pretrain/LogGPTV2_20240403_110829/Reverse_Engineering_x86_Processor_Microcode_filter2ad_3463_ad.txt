tion 8.
Instrumentation
7.1
Instrumentation monitors the execution of a program and
may produce metadata or instruction traces. It is used
by program analysis, system defenses, antivirus software,
and performance optimization during software develop-
ment. It has been proven challenging to implement perfor-
mant instrumentation for COTS binaries. Several mech-
anisms exist such as function hooking, binary rewriting,
virtual machine introspection, and in-place emulation.
1172    26th USENIX Security Symposium
USENIX Association
However, they come with drawbacks such as coarse gran-
ularity, uncertain coverage, and high performance over-
head. An instrumentation framework with CPU support
based on microcode may evade many of the disadvantages.
It should be noted that microcode also has limitations
such as only 8 match registers. Currently we can only
intercept vector path x86 instructions and the hooks are
machine-wide, i.e., not limited to one user-space process.
For demonstration purposes we implemented a simple
instrumentation that counts the occurrences of the div
instruction during execution. See Listing 1 for a high-
level representation of the instrumentation logic; we refer
the interested reader to Listing 7 in Appendix A.3 for a
detailed RTL implementation.
if ( esi == magic ) {
temp = dword [ edi ]
temp += 1
dword [ edi ] = temp
}
Listing 1: High-level description of the instrumentation
logic implemented in microcode that counts the div
instructions during execution.
7.2 Remote Microcode Attacks
Executing microcode Trojans is not limited to a local at-
tacker. An injected microcode hook may lie dormant
within a vector path macroinstruction, such as a div
reg32, and it is triggered as soon as a speciﬁc trig-
ger condition is met within an attacker-controlled web
page. This is possible due to Just-in-Time (JIT) and
Ahead-of-Time (AOT) compilers embedded in modern
web browsers. They allow to emit speciﬁc machine code
instructions only utilizing JavaScript (JS). Consider a
microcode Trojan for the div instruction. We provide a
high-level description of the Trojan logic in Listing 2.
if ( eax == A && ebx == B)
eip = eip + 1
Listing 2: High-level description of the microcode
Trojan implemented in microcode that increments the
eip to execute x86 instructions in a disaligned fashion.
If a div ebx instruction is executed while eax con-
tains the value A (dividend) and ebx contains the value
B (divisor),
then the instruction pointer eip is in-
creased, and execution continues in a misaligned way
after the ﬁrst byte of the instruction following the
div ebx instruction.
If the trigger condition is not
met, the division is executed as expected. Hence, le-
gitimate machine instructions as shown in Listing 3
may be misused to hide and execute arbitrary code.
B8 0 A000000
BB 0 B000000
F7F3
05 909090 CC
mov eax , 0 xA
mov ebx , 0 xB
div ebx
add eax , 0 xCC909090
Listing 3: x86 machine code to trigger the div Trojan
in Listing 2.
Due to the microcode Trojan within div ebx, which
is triggered when the condition eax == A && ebx == B
is met, the instruction following the division is executed
starting at its second byte (Listing 4).
B8 0 A000000
BB 0 B000000
F7F3
05
90
90
90
CC
mov eax , 0 xA
mov ebx , 0 xB
div ebx
/* SKIPPED */
nop
nop
nop
int3
Listing 4: x86 hidden payload executed due to the
triggered microcode Trojan.
As shown in Listing 4, the hidden nop and int3 instruc-
tions within the constant value of the add instruction are
executed instead of the legitimate add itself. Note that
many add instructions can be used to hide an arbitrary
payload (i.e., execve()) instead of nop and int3.
We were able to emit appropriate machine code in-
structions using the ASM.JS subset of the JS language
in Mozilla Firefox 50. ASM.JS compiles a web page’s
JS code before it is actually transformed into native ma-
chine code. We hide our payload within four-byte JS
constants of legitimate instructions similar to previous
JIT Spraying attacks [12, 51]. Since we also control the
dividend and divisor of the division, we eventually trigger
the microcode Trojan in the div instruction, which in turn
starts to execute our payload. Thus, we achieved to re-
motely activate the microcode hook and use it to execute
remotely controlled machine code. We refer the interested
reader to the ASM.JS code in Listing 9 in Appendix A.4.
While usually constant blinding is used in JIT compilers
to prevent the injection of valid machine code into JS con-
stants, recent research has shown that browsers such as
Microsoft Edge or Google Chrome fail to blind constants
in certain cases [38]. Hence, we assume that remotely
triggering a microcode Trojan and executing hidden code
within other browsers (i.e., Edge or Chrome) is possible,
too.
7.3 Cryptographic Microcode Trojans
In order to demonstrate further severe consequences of
microcode Trojans, we detail how such Trojans facili-
USENIX Association
26th USENIX Security Symposium    1173
tate implementation attacks on cryptographic algorithms.
More precisely, we present how microcode Trojans en-
able both (1) a bug attack (representative for Fault Injec-
tion (FI) [13]) and (2) a timing attack for Side-Channel
Analysis (SCA) [34].
mov
add
mov
adc
shrd
eax , dword [ esp +0 xd0 ]
eax , 0 x2000000
ebx , dword [ esp +0 xd4 ]
ebx , 0 x0
eax , ebx , 0 x1a
7.3.1 Preliminaries and Goal
Elliptic Curve Cryptography (ECC) has become the preva-
lent public-key cryptographic primitive in real-world sys-
tems. In particular, numerous cryptographic libraries, e.g.,
OpenSSL and libsodium, employ Curve25519 [10]. Note
that the critical scalar multiplication is generally imple-
mented through a Montgomery ladder whose execution is
expected to be constant time, see RFC7748 [1].
Bug Attack. Bug attacks [9, 11] are associated with
FI; however, they are conceptionally distinct. While FI
mainly considers faults injected by an adversary, bug
attacks rely on inherent computation bugs [47] and do
neither suppose environmental tampering nor physical
presence.
Timing Attack. Timing attacks [34] against crypto-
graphic implementations are based on careful analysis of
their execution time [14, 57]. Nowadays most libraries
employ constant-time implementations as an effective
countermeasure.
Our goal for each attack is to enable disclosure of the
private key from ECDH key exchange. In order to realize
microcode Trojans which facilitate such attacks, we have
to arm a microcoded x86 instruction (used in scalar mul-
tiplication) with (1) an input-dependent trigger and (2) a
payload inducing a conditional fault or additional time,
see Listing 5.
if ( regmd == A)
regmd = regmd + C
Listing 5: High-level microcode Trojan description
within an x86 instruction to trigger a conditional bug
using the ﬁrst operand (regmd) of the x86 instruction
and the immediate constants A and C.
7.3.2 Implementation
For both attacks, we use the constant-time ECC reference
implementation from libsodium [35] compiled for 32-bit
architectures. Since Curve25519 employs reduced-degree
reduced-coefﬁcient polynomials for arithmetic and the
implementation uses 64-bit data types, the following C
code is compiled to assembly in Listing 6:
carry = (h + (i64) (1L > 26;
Listing 6: x86 machine code implementing 64-bit right
shift using the shrd instruction.
This line of code processes internal (key-dependent)
data as well as adversary-controlled (public-key depen-
dent) data. We can remotely trigger the condition in the
microcoded shrd instruction to apply both the bug attack
and the timing attack. Note that in case of a timing-attack,
we conditionally execute several nop instructions to in-
duce a data-dependent timing difference.
For a detailed RTL implementation of the bug attack,
we refer the interested reader to Listing 8 in Appendix A.3.
We emphasize that the necessary primitives for bug at-
tacks and timing side channel attacks can be created via
microcode Trojans. This way, even state-of-the-art cryp-
tographic implementations can be undermined.
8 Discussion
8.1 Security Implications
We demonstrated that malware can be implemented in
microcode. Furthermore, malicious microcode updates
can be applied to unmodiﬁed K8 and K10-based AMD
CPUs. This poses a certain security risk. However, in a re-
alistic attack scenario, an adversary must overcome other
security measures. A remote attacker has to bypass ap-
plication and operating system isolation in order to apply
a microcode update. An attacker with system privileges
might as well leverage less complex mechanisms with
better persistence and stealth properties than microcode
malware. An attacker with physical access may be able
to embed a malicious microcode update into the BIOS
or UEFI, i.e., in an evil maid scenario [44]. However,
she has to overcome potential security measures such as
TPM or signing of the UEFI ﬁrmware. Physical access
also enables alternative attack vectors such as cloning
the entire disk, or in case of full disk encryption, tamper
with the MBR or bootloader. Other adversary models
to provide malicious microcode (either through updates
or directly in microcode ROM) become more realistic,
i.e., intelligence agencies or untrusted foundries. From
a hardware Trojan’s perspective [58], microcode Trojans
provide post-manufacturing versatility, which is indis-
pensable for the heterogeneity in operating systems and
applications running on general-purpose CPUs.
Even though AMD emphasizes that their chips are
secure [25], the microcode update scheme of K8 and K10
shows once more that security by obscurity is not reliable
1174    26th USENIX Security Symposium
USENIX Association
and proper encryption, authentication, and integrity have
to deployed.
It should be noted that attacks leveraging microcode will
be highly hardware-speciﬁc. Current AMD processors
employ strong cryptographic algorithms to protect the
microcode update mechanism [15]. Microcode and its
effects on system security for current CPUs are unknown
with no veriﬁable trust anchor. Both experts and users are
unable to examine microcode updates for (un)intentional
bugs.
8.2 Constructive Microcode Applications
We see great potential for constructive applications of
microcode in COTS CPUs. We already discussed that
microcode combines many advantages for binary instru-
mentation, see Section 7.1. This could aid program trac-
ing, bug ﬁnding, tainting, and other applications of dy-
namic program analysis. Furthermore, microcode could
boost the performance of existing system defenses. Mi-
crocode updates could also enable domain-speciﬁc in-
struction sets, e.g., special instructions that boost program
performance or trustworthy security measures (similar to
Intel SGX [17]).
Hence, the view on microcode and its detailed embed-
ding in the overall CPU architecture are a relevant topic
for future research.
8.3 Generality
In addition to x86 CISC CPUs from Intel, AMD, and
VIA, microcode is also used in CPUs based on RISC
methodologies. For example, reverse engineering of an
ARM1 processor [33] disclosed the presence of a decode
Programmable Logic Array (PLA) storing microinstruc-
tions. The Intel i960 used microcode to implement several
instructions [28]. Another noteworthy CPU is the EAL
7 certiﬁed AAMP7G by Rockwell Collins [19]. Its sepa-
ration kernel microcode to realize Multiple Independent
Levels of Security (MILS) is accompanied with a formal
proof.
8.4 Future Work
In future work we aim to further explore the microarchi-
tecture and its security implications on system security.
We want to highlight microcode capabilities and foster
the security and computer architecture communities to
incorporate this topic into their future research. We re-
quire further knowledge of implemented microarchitec-
tures and update mechanisms to address both attack- and
defense-driven research. For example, an open-source
CPU variant for the security community can lead to in-
strumentation frameworks and system defenses based on
performant microprograms.
9 Conclusion
In this paper we successfully changed the behavior of
common, general-purpose CPUs by modiﬁcation of the
microcode. We provided an in-depth analysis of mi-
crocode and its update mechanism for AMD K8 and K10
architectures. In addition, we presented what can be ac-
complished with this technology: First, we showed that
augmenting existing instructions allows us to implement
CPU-assisted instrumentation, which can enable high-
performance defensive solutions in the future. Second,
we demonstrated that malicious microcode updates can
have security implications for software systems running
on the hardware.
Acknowledgement
We thank the reviewers for their valuable feedback. Part
of this work was supported by the European Research
Council (ERC) under the European Unions Horizon 2020
research and innovation programme (ERC Starting Grant
No. 640110 (BASTION) and ERC Advanced Grant No.
695022 (EPoCH)). In addition, this work was partly sup-
ported by the German Federal Ministry of Education and
Research (BMBF Grant 16KIS0592K HWSec).
Responsible Disclosure
We contacted AMD in a responsible disclosure process
more than 90 days prior to publication and provided de-
tailed information about our ﬁndings.
References
[1] A. LANGLEY et al.. Elliptic Curves for Security. RFC 7748, RFC
Editor, January 2016.
[2] ADVANCED MICRO DEVICES, INC. AMD Athlon® Processor
Model 10 Revision Guide, 2003.
[3] ADVANCED MICRO DEVICES, INC. AMD64 Virtualization Code-
named Paciﬁca Technology - Secure Virtual Machine Architecture
Reference Manual, 2005.
[4] ADVANCED MICRO DEVICES, INC. Revision Guide for AMD
Family 16h Models 00h-0Fh Processors, 2013.
[5] AGRAWALA, A. K., AND RAUSCHER, T. G. Foundations of
Microprogramming : Architecture, Software, and Applications.
Academic Press, 1976.
[6] ANONYMOUS. Opteron Exposed: Reverse Engineering AMD
K8 Microcode Updates.
[Online]. Available: http://www.
securiteam.com/securityreviews/5FP0M1PDFO.html, 2004.
[7] APERTURELABSLTD. Semi-automatic extraction of data from
microscopic images of Masked ROM. https://github.com/
ApertureLabsLtd/rompar.
USENIX Association
26th USENIX Security Symposium    1175
[8] AUSTIN, T. M. DIVA: A Reliable Substrate for Deep Submicron
Microarchitecture Design. In Proceedings of IEEE/ACM Inter-
national Symposium on Microarchitecture, MICRO 32 (1999),
pp. 196–207.
[9] B. B. BRUMLEY et al.. Practical Realisation and Elimination
In CT-RSA (2012),
of an ECC-Related Software Bug Attack.
pp. 171–186.
[10] BERNSTEIN, D. J. Curve25519: New Difﬁe-Hellman Speed
Records. In PKC (2006), pp. 207–228.
[11] BIHAM, E., CARMELI, Y., AND SHAMIR, A. Bug Attacks. In
CRYPTO (2008), pp. 221–240.
[12] BLAZAKIS, D. Interpreter exploitation. In USENIX Workshop on
Offensive Technologies (WOOT) (2010).
[13] BONEH, D., DEMILLO, R. A., AND LIPTON, R. J. On the Impor-
tance of Checking Cryptographic Protocols for Faults (Extended
Abstract). In EUROCRYPT (1997), pp. 37–51.
[14] BRUMLEY, D., AND BONEH, D. Remote timing attacks are
practical. In USENIX Security Symposium (2003).
[15] CHEN, D. D., AND AHN, G.-J. Security Analysis of x86 Proces-
sor Microcode. [Online]. Available: https://www.dcddcc.com/
docs/2014 paper microcode.pdf, 2014.
[16] CORLISS, M. L., LEWIS, E. C., AND ROTH, A. DISE: A Pro-
grammable Macro Engine for Customizing Applications. In Inter-
national Symposium on Computer Architecture (2003), pp. 362–
373.
[17] COSTAN, V., AND DEVADAS, S. Intel SGX Explained. Cryptol-
ogy ePrint Archive, Report 2016/086, 2016. [Online]. Available:
http://eprint.iacr.org/2016/086.
[18] COSTAN, V., LEBEDEV, I., AND DEVADAS, S. Sanctum: Min-
In
imal Hardware Extensions for Strong Software Isolation.
USENIX Security Symposium (2016), pp. 857–874.
[19] D. S. HARDIN. Design and Veriﬁcation of Microprocessor Sys-
tems for High-Assurance Applications. Springer, 2010.
[20] DE RAADT, T.
openbsd-misc mailing list.