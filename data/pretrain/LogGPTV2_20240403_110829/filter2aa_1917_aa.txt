### Breaking the x86 ISA
**Speaker:** Christopher Domas  
**Title:** Cyber Security Researcher at Battelle Memorial Institute  
**Event:** DEF CON 2017

#### Introduction
We often scrutinize software for security and reliability, but what about the hardware? We audit, reverse-engineer, break, and sandbox software, but we tend to blindly trust our processors. This presentation argues that this trust is misplaced, as hardware can have the same issues as software: secret functionality, bugs, and vulnerabilities.

#### Why Trust Hardware?
- **Secret Functionality:** Appendix H in the Intel manuals.
- **Bugs:** F00F, FDIV, TSX, Hyperthreading, Ryzen.
- **Vulnerabilities:** SYSRET, cache poisoning, sinkhole.

#### The Goal
We should stop blindly trusting our hardware and start auditing it.

#### What to Worry About
- **Historical Examples:**
  - ICEBP (F1)
  - LOADALL (0F07)
  - apicall (0FFFF0)

- **Hidden Instructions:**
  - These are instructions that are not documented but still exist in the processor.

#### Auditing the Processor
**Goal:** Identify hidden instructions.

**The Challenge:**
- Instructions can range from one byte (e.g., `inc eax` = 40) to 15 bytes (e.g., `lock add qword cs:[eax + 4 * eax + 07E06DF23h], 0EFCDAB89h` = 2E 67 F0 48 818480 23DF067E 89ABCDEF).
- There are approximately \(1.3 \times 10^{36}\) possible instructions.

**Obvious Approaches and Their Limitations:**
- **Try Them All:** Only feasible for RISC architectures.
- **Random Instructions:** Poor coverage.
- **Guided by Documentation:** Documentation may be incomplete or incorrect.

**Key Observation:**
- The meaningful bytes of an x86 instruction affect either its length or its exception behavior.

#### Tunneling Algorithm
**Objective:** Quickly skip over bytes that don't matter and exhaustively search the ones that do.

**Algorithm Steps:**
1. **Initialize Instruction:**
   - Start with a sequence of zero bytes: `00 00 00 00 00 00 00 00 00 00 00 00 00 00 00`

2. **Execute and Observe:**
   - Execute the instruction and observe its length.
   - Increment the last byte and repeat the process.

3. **Rollover and Move Back:**
   - When the last byte reaches FF, roll over to 00 and move to the previous byte.
   - Continue incrementing and observing until the length changes.

4. **Move Marker:**
   - When the length changes, move the marker to the end of the new instruction and continue.

**Example:**
- Initial instruction: `00 00 00 00 00 00 00 00 00 00 00 00 00 00 00`
- Increment last byte: `00 01 00 00 00 00 00 00 00 00 00 00 00 00 00`
- Continue incrementing: `00 02 00 00 00 00 00 00 00 00 00 00 00 00 00`
- Rollover: `00 04 01 00 00 00 00 00 00 00 00 00 00 00 00`
- Move back: `C7 04 05 00 00 00 00 00 00 00 00 00 00 00 00`
- Continue: `C7 04 05 00 00 00 00 00 00 01 00 00 00 00 00`

**Reduction of Search Space:**
- From \(1.3 \times 10^{36}\) instructions to approximately 100,000,000 (one day of scanning).

#### Instruction Lengths
**Challenge:**
- Requires knowing the instruction length.
- Simple approach using the trap flag fails for faulting instructions.
- Privileged instructions (e.g., `mov cr0, eax`, `vmenter`, `rsm`) require special handling.

**Solution: Page Fault Analysis**
1. **Choose a Candidate Instruction:**
   - Place the candidate instruction in memory, with the first byte at the end of the first page and the remaining bytes at the start of the second page.
   - Configure two consecutive pages: the first with read, write, and execute permissions; the second with read and write permissions only.

2. **Execute and Analyze:**
   - Jump to the instruction.
   - If the decoder determines another byte is necessary, it attempts to fetch it.
   - If the byte is on a non-executable page, a page fault occurs.
   - Use the #PF exception to determine if the instruction continues.
   - Move the instruction back one byte and repeat the process.

**Example:**
- Candidate instruction: `0F 6A 60 6A 79 6D C6 02 6E AA D2 39 0B B7 52`
- Place in memory: `0F  6A 60 6A 79 6D C6 02 â€¦`
- Execute and observe page faults.
- Adjust and repeat until the length is determined.

By using these techniques, we can systematically audit the x86 instruction set and identify hidden instructions, thereby improving the security and reliability of our hardware.