title:R-Sentry: Providing Continuous Sensor Services against Random Node
Failures
author:Shengchao Yu and
Yanyong Zhang
R-Sentry: Providing Continuous Sensor Services Against Random Node Failures
Shengchao Yu
WINLAB
Rutgers University
Piscataway, NJ 08854
PI:EMAIL
Yanyong Zhang
WINLAB
Rutgers University
Piscataway, NJ 08854
PI:EMAIL
Abstract
The success of sensor-driven applications is reliant on
whether a steady stream of data can be provided by the un-
derlying system. This need, however, poses great challenges
to sensor systems, mainly because the sensor nodes from
which these systems are built have extremely short lifetimes.
In order to extend the lifetime of the networked system be-
yond the lifetime of an individual sensor node, a common
practice is to deploy a large array of sensor nodes and,
at any time, have only a minimal set of nodes active per-
forming duties while others stay in sleep mode to conserve
energy. With this rationale, random node failures, either
from active nodes or from redundant nodes, can seriously
disrupt system operations. To address this need, we pro-
pose R-Sentry, which attempts to bound the service loss du-
ration due to node failures, by coordinating the schedules
among redundant nodes. Our simulation results show that
compared to PEAS, a popular node scheduling algorithm,
R-Sentry can provide a continuous 95% coverage through
bounded recoveries from frequent node failures, while pro-
longing the lifetime of a sensor network by roughly 30%.
Keywords:
Sensor Networks, Network Coverage, Fault Tolerance,
Node Failure, Gang
1. Introduction
Sensor networks promise to change the way we interact
with the physical world: instead of querying data as a re-
sponse to events, sensor networks continuously push data to
applications so that necessary parsing and analysis can take
place before events occur. The very fact that this data may
be collected for signi(cid:2)cant periods of time over vast spatial
areas facilitates a broad range of applications. An important
issue for the successful deployment of sensor-driven appli-
cations is to make sure that the sensor network will be able
to deliver as much spatio-temporal information as possible,
i.e. sensor networks must guarantee both coverage and con-
nectivity over a signi(cid:2)cant period of time. Although ini-
tial solutions have been proposed to provide coverage and
connectivity [11, 4, 19, 2], there is a severe problem(cid:150) the
frequent failing of sensor nodes(cid:150) that has received little at-
tention. In sensor networks, due to the nature of the sensor
node hardware, there exists a fundamental tradeoff between
network lifetime and network service quality.
Maintaining graceful operations under faulty conditions
has long been a focus of research in other resource-rich sys-
tems. Although failures cannot be totally eliminated , a
few practical strategies have emerged and been adopted to
limit the effects of failures. These strategies usually involve
employing backups or redundancy to smoothly transfer the
load once a failure occurs. Though effective in resource-
rich settings, these strategies can not be applied to sensor
networks because of the severe energy constraints, the poor
computing capabilities, and the nature of radio circuitry. In
particular, many radios employed by today’s sensor nodes
have the unfortunate failing that, even when idle, they con-
sume nearly as much power as when they are receiving.
Further, the power consumption for receiving is almost as
taxing as the power needed to transmit. Consequently, turn-
ing on backup nodes is not a prudent solution since the
backup node might not even outlive the working node.
In order to build a long running system from relatively
short-lived sensor nodes, a widely-adopted approach is to
include high degree of redundancy in the deployment, and
let the nodes work in (cid:147)shifts(cid:148). Therefore, at any moment,
the working shift (i.e., the active nodes) consists of a mini-
mal number of nodes needed to maintain the system’s oper-
ations, while the rest of the nodes (i.e., the redundant nodes)
have their radios off. The downside of this strategy, how-
ever, is that the failure of an active node will lead to a hole
in the network, thereby disrupting sensor services. Even in
the ideal case where nodes do not die before their batter-
ies drain out, the death of an active node still could disrupt
the services since network dynamics make it impossible to
precisely predict when power resources will be depleted.
In this paper, we propose R-Sentry, a node scheduling
algorithm that attempts to balance continuous network ser-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:13 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007age model, the square network (cid:2)eld in question is imaginar-
ily partitioned into grids, marked by the dotted lines in the
(cid:2)gure. The grids should be small enough so that the under-
lying physical phenomena do not exhibit much variability
within a grid. The grid points that fall within a node’s sens-
ing area are considered covered by that sensor node. This
discretization approach simpli(cid:2)es the measurement of the
coverage, making the network coverage percentage equiv-
alent to the percentage of the grid points that are covered.
This model can be enforced by having nodes exchange the
list of grid points it can cover with their neighbors, which
we call GridList. Figure 1 shows such a scenario where
there are a subset of sensor nodes, represented by darker
solid circles, actively monitoring corresponding grid points,
while other nodes are not required for the coverage under
the model. With suf(cid:2)cient node density, there is a high
probability that, out of uniformly randomly deployed nodes,
there exists a set of nodes that could collectively cover all
the grid points in the network (cid:2)eld.
Connectivity: In addition to sensing the physical world, a
WSN is also responsible for delivering the sensed data to
the applications. Network connectivity thus requires that
there exists a routing path between every sensing node and
the sink.
In order to achieve this goal, it may be neces-
sary to have more active nodes than just those needed for
provide sensor coverage, i.e., we may need extra nodes to
have good network connectivity, which are represented by
the light solid circles in Figure 1.
To focus on failure recovery schemes, we choose grid
sizes small enough to ensure connectivity through cover-
age: a WSN that satis(cid:2)es the coverage requirement is auto-
matically connected. This was also observed in many ear-
lier studies [16, 4, 11], which assumed the communication
range is at least double of the sensing range. Therefore, in
this paper, we can focus on providing sensing coverage.
Turning Off Redundant nodes: Energy is a scarce re-
source for many sensor nodes may not have external power
sources, and have to rely on batteries. Even a battery with a
capacity of 3000 mA-hour can only last for 17 months [3].
A sensor node has three main components: sensor(s), pro-
cessor, and radio. Sensors measure physical phenomena,
the processor takes as input the data from the sensors or the
network and performs in-network processing, while the ra-
dio communicates with the rest of the network. Among the
three, the radio is by far the main power consumer [17]. For
example, a Mica2 radio has current draw of 12mA in trans-
mitting and 8mA in receiving. It’s worth noticing that a ra-
dio being in receiving mode does not necessarily mean the
application is receiving any valid packets; it is merely mon-
itoring the medium. The energy consumed by a Mica2 ra-
dio in transmitting a 30-byte message is roughly equivalent
to the energy consumed by an ATMega128 processor exe-
Figure 1. Illustration of a WSN.
vices and extended network lifetime in the presence of fre-
quent node failures. For every active node, R-Sentry groups
the nodes whose sensing/networking functionalities overlap
with that of the active node into gangs. A gang consists of
a set of redundant nodes that can collectively replace the
active node upon its failure. R-Sentry ensures that, every
so often, a gang will wake up to probe whether the active
node is still functioning. If a failure has occurred to the ac-
tive node, the probing redundant nodes can become active to
take over the failed active node to resume network services.
Hence, R-Sentry promises to limit the service loss time by
coordinating the wake up schedules of the redundant nodes.
R-Sentry also seamlessly handles more complicated situa-
tions, such as cases where a redundant node serves multi-
ple active nodes simultaneously, or cases where redundant
nodes die before the active node fails.
Compared to existing techniques that share the same
viewpoint of having redundant nodes sleep for periods of
time to conserve energy, such as PEAS [16] or OGDC [19],
R-Sentry takes a much closer look at the problem of local
network recovery in the face of node failures.
It tries to
provide quality of service guarantees to sensor applications
instead of the best effort approach by using random wake
ups. We have conducted a set of simulation experiments
to study the performance of R-Sentry. Compared to PEAS,
R-Sentry can (1) provide a longer network life, (2) provide
better network coverage (> 95%), (3) provide controllable
coverage recovery, (4) provide more robustness against ran-
dom node failures, and (5) provide better scalability with
larger node density.
The rest of the paper is organized as follows. We pro-
vide an overview of our sensor network model in Section 2,
followed by related work. In Section 4, we discuss the R-
Sentry algorithm in detail. We present our simulation effort
and the simulation results in Section 5. We conclude in Sec-
tion 6.
2. Sensor Network Model
In this section, we discuss in detail our wireless sensor
network (WSN) model.
2.1. Generic Sensor Network Model
Coverage: In this work, we adopt the grid-based coverage
model [11, 12] illustrated in Figure 1. In this popular cover-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:13 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007cuting 1152 instructions [9]. As a result, if we leave all the
sensor nodes on, then no matter how many are deployed, the
network cannot function longer than 17 months. In practice,
to extend network lifetime it is necessary to have redundant
nodes off and turn them back on only when needed.
Disruptions Caused by Node Failures: Although the strat-
egy discussed above is energy-conscious, it does not pro-
vide any robustness against random node failures. For in-
stance, suppose that grid point p was monitored by sensor
node s while all the other nodes that can also cover p were in
sleep mode. Further, suppose that those sleeping nodes will
wake up at a later time t. If s fails at time t0, then during this
period with duration t(cid:0)t0, the coverage and/or connectivity
of the network will be lost. In particular, node failures will
occur more frequently under heavy traf(cid:2)c volumes, which
is more likely when the monitored physical phenomena ex-
hibit interesting behavior. Fail to collect or forward data on
these occasions can have severe consequences, likely detri-
mental to the applications.
2.2. Target Sensor Network Assumptions
In this study, the WSNs have the following features:
Regularity in Sensing and Communication. The popular
disk sensor model [11, 10, 16] is used to simplify the anal-
ysis and simulations. Speci(cid:2)cally, a node’s sensing area is
a circular disk with the node as the center and the sensing
range as radius; and the neighbor nodes that fall into the
cocentric circle with the transmission range as radius are
considered as 1-hop neighbors. Moreover, all the links are
symmetric.
Resource-constraints. Sensor nodes are battery-driven and
non-rechargeable, except the sink node.
Location-Awareness. Each sensor node is assumed to be
stationary and have its own location, which can be obtained
through either localization devices, such as GPS, or certain
localization algorithms [7, 8]. We further assume the sensor
nodes have the geographical location of the network (cid:2)eld in
which they are deployed. Based on a node’s location and
sensing radius, it can obtain the list of grid points it covers.
3. Related Work
Local networking repair has been studied in the context
of sensor networks, and several strategies have been pro-
posed, such as GAF [14], AFECA [13], and ASCENT [1].
GAF identi(cid:2)es those nodes that are equivalent in terms of
routing capabilities, and turns them off to conserve energy.
In AFECA, a simple adaptive scheme is employed to deter-
mine the node sleep interval for those nodes that are turned
off. ASCENT shares the same goal as GAF, and it also con-
siders mechanisms for sleeping nodes to come back and join
the routing when necessary. To avoid degrading connectiv-
ity severely, sleeping nodes need to wake up relatively fre-
quently. In addition, a (cid:2)xed sleep interval is used for every
node in the network. The authors also proved that the upper
bound on the lifetime improvement is the ratio of a node’s
sleep interval to its awake period.
Besides information delivery, data collection is the other
critical task of sensor networks. In PEAS [16], an indepen-
dent probing technique was proposed for redundant nodes
to check whether there is an active node in its vicinity.
OGDC [19] is a round-based node scheduling algorithm
which selects active nodes based on their geo-locations to
improve network lifetime. In [5, 15], all the nodes that can
cover the same spot form a cluster, and at any time, there is
only one active node from the cluster while the other mem-
bers stay in the sleep mode.
Compared to the aforementioned earlier work, R-Sentry
takes a closer look at the problem of local network recovery
in the face of node failures, and takes a distinctly different
approach: (1) R-Sentry tries to provide quality of service
guarantees to sensor applications instead of using a best
effort approach based on random wake ups; (2) the wake
ups of the redundant nodes are carefully scheduled to en-
sure timely network recovery with less energy consumption,
and (3) waking up one redundant node to replace the failed
active node is often impossible. R-Sentry extends our ex-
ploratory work in [18] by introducing the concept of gangs
and conducting more comprehensive evaluations.
4. The Design of R-Sentry
While on duty, a WSN is composed of two types of
nodes: active nodes , which are performing duties; and
redundant nodes, which are sleeping with their radios off.
While active nodes is on duty, the redundant nodes should
not sleep for an in(cid:2)nitely long period. Rather, they should
wake up from time to time and check the conditions of the
active nodes. Every node randomly waking up [16, 1], how-
ever, is wasteful and does not provide much bene(cid:2)t. For in-
stance, if the subsequent wake ups are far apart from each
other, then it is impossible to ensure quick network recov-
ery. To address this void, we propose a coordinated schedul-
ing algorithm among all the redundant nodes. Those redun-
dant nodes that wake up play a role analogous to sentries in
real world in the sense that they monitor the health of the ac-
tive node, and whenever a fault or failure occurs, they jump
in to replace the lost node.
In the following discussions,
we use redundant node and sentry interchangeable. Since
redundant nodes rotate to wake up, we call this scheme Ro-
tatory Sentries or R-Sentry.
4.1. Redundant Sets and Gangs
Before going into details of R-Sentry, it is bene(cid:2)cial to
examine the redundancy among nodes. Every sensor node
has a group of neighbor nodes with overlapping communi-
cation or sensing capabilities. The sensing redundant set
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:13 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007(SRS) of a node consists of its neighbors whose sensing ar-
eas overlap with the node’s sensing area, i.e. nodes that can
cover the same grid point(s) belong to each other’s SRS.
When an active node fails, it can only be replaced by
nodes from its SRS. However, the replacement of a failed
active node can not necessarily be accomplished by sim-
ply replacing it with a single redundant node, regardless of
whether one is trying to repair sensing coverage or network
connectivity. This viewpoint is distinctly different from
those in earlier studies such as [16, 1], which tried to re-
place the active using one redundant node. In fact, it has
been shown in [4] that on average 3-5 nodes are needed to
replace a node’s sensing area.
Since an active node can only be replaced by certain
combinations of redundant nodes, there is a need for the ac-
tive node to group all the nodes that belong to its SRS into
(cid:147)gangs(cid:148). Nodes that belong to the same gang can collec-
tively replace the active node. Now let us look at an example
to understand the de(cid:2)nition of a gang. In this example, the
active node A’s SRS is fB; C; D; E; F g, and their GridLists
are shown in Table 1. We can see that A’s coverage area
can be completely replaced by the following combinations:
fBg, fC; Dg, fC; Eg, and fD; E; F g. As a result, A has
four gangs: ffBg, fC; Dg, fC; Eg, fD; E; F gg, which we
call GangList.
One thing we would like to point that is, a superset of a
gang set technically is also a gang. For instance, in the ex-
ample in Table 1, the set fB, Cg is also a gang. However, in
this paper, we only focus on (cid:147)minimum gangs(cid:148), those sets
that would no longer be a gang should we remove any mem-
ber from the set. Grouping nodes from an SRS into gangs
is essentially a combinatorial problem. shows the pseudo
code for a node populating its GangList with gangs of sizes
no larger than gs. In order to limit the computation of this
procedure, we only consider gangs of small sizes.
For the purpose of fault tolerance, nodes that belong to a
gang need to wake up simultaneously to completely replace
the functionalities of an active node.
4.2. R-Sentry Algorithm
R-Sentry attempts to bound the duration of service loss.
That is, every time an active node fails, R-Sentry seeks to
make nodes from a gang available within a time interval of
(cid:1) (an example schedule shown in Table 3(b)), where (cid:1) is
the promised service loss time limit. If an active node has
N gangs, then each gang needs to wake up every N (cid:1).
node ID
A
B
C
GridList
f1, 2, 3, 4g
f1, 2, 3, 4, 5g
f1, 2, 3, 5g
node ID
D
E
F
GridList
f1, 4, 5, 6, 7g
f3, 4, 5, 6, 8g
f2, 9, 10g
Table 1. An example of GridList table.
// gs : maximum gang size
// GL : Gang List
// GCL : Gang Candidate List
// TEMP GCL : temporarily GCL
then push back s to GL;
else push back s to TEMP GCL
then GCL = PREPARE-CANDY(TEMP GCL);
i = 1; clear GL;
clear TEMP GCL;
for each set s in GCL
if s is a minimum gang
GENE-GANGS(SRS, gs)
1
2 GCL = SRS;
3 while i (cid:20) gs
4
5
6
7
8
9
10
11
PREPARE-CANDY(TEMP GCL)
1
2
3
4