title:Inferring Fine-grained Control Flow Inside SGX Enclaves with Branch
Shadowing
author:Sangho Lee and
Ming-Wei Shih and
Prasun Gera and
Taesoo Kim and
Hyesoon Kim and
Marcus Peinado
Inferring Fine-grained Control Flow Inside  
SGX Enclaves with Branch Shadowing
Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, and Hyesoon Kim,  
Georgia Institute of Technology; Marcus Peinado, Microsoft Research
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/lee-sangho
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXInferring Fine-grained Control Flow Inside
SGX Enclaves with Branch Shadowing
Sangho Lee† Ming-Wei Shih† Prasun Gera† Taesoo Kim† Hyesoon Kim† Marcus Peinado∗
† Georgia Institute of Technology
∗ Microsoft Research
Abstract
Intel has introduced a hardware-based trusted execution
environment, Intel Software Guard Extensions (SGX),
that provides a secure, isolated execution environment,
or enclave, for a user program without trusting any un-
derlying software (e.g., an operating system) or firmware.
Researchers have demonstrated that SGX is vulnerable
to a page-fault-based attack. However, the attack only
reveals page-level memory accesses within an enclave.
In this paper, we explore a new, yet critical, side-
channel attack, branch shadowing, that reveals fine-
grained control flows (branch granularity) in an enclave.
The root cause of this attack is that SGX does not clear
branch history when switching from enclave to non-
enclave mode, leaving fine-grained traces for the outside
world to observe, which gives rise to a branch-prediction
side channel. However, exploiting this channel in practice
is challenging because 1) measuring branch execution
time is too noisy for distinguishing fine-grained control-
flow changes and 2) pausing an enclave right after it has
executed the code block we target requires sophisticated
control. To overcome these challenges, we develop two
novel exploitation techniques: 1) a last branch record
(LBR)-based history-inferring technique and 2) an ad-
vanced programmable interrupt controller (APIC)-based
technique to control the execution of an enclave in a fine-
grained manner. An evaluation against RSA shows that
our attack infers each private key bit with 99.8% accuracy.
Finally, we thoroughly study the feasibility of hardware-
based solutions (i.e., branch history flushing) and propose
a software-based approach that mitigates the attack.
1
Introduction
Establishing a trusted execution environment (TEE) is
one of the most important security requirements, espe-
cially in a hostile computing platform such as a public
cloud or a possibly compromised operating system (OS).
When we want to run security-sensitive applications (e.g.,
processing financial or health data) in the public cloud,
we need either to fully trust the operator, which is prob-
lematic [16], or encrypt all data before uploading them
to the cloud and perform computations directly on the
encrypted data. The latter can be based on fully homomor-
phic encryption, which is still slow [42], or on property-
preserving encryption, which is weak [17, 38, 43]. Even
when we use a private cloud or personal workstation,
similar problems exist because no one can ensure that
the underlying OS is robust against attacks given its huge
code base and high complexity [2,18,23,28,36,54]. Since
the OS, in principle, is a part of the trusted computing
base of a computing platform, by compromising it, an
attacker can fully control any application running on the
platform.
Industry has been actively proposing hardware-based
techniques, such as the Trusted Platform Module
(TPM) [56], ARM TrustZone [4], and Intel Software
Guard Extension (SGX) [24], that support TEEs. Specif-
ically, Intel SGX is receiving significant attention be-
cause of its recent availability and applicability. All Intel
Skylake and Kaby Lake CPUs support Intel SGX, and
processes secured by Intel SGX (i.e., processes running
inside an enclave) can use almost every unprivileged CPU
instruction without restrictions. To the extent that we can
trust the hardware vendors (i.e., if no hardware backdoor
exists [61]), it is believed that hardware-based TEEs are
secure.
Unfortunately, recent studies [50, 60] show that Intel
SGX has a noise-free side channel—a controlled-channel
attack. SGX allows an OS to fully control the page table
of an enclave process; that is, an OS can map or unmap
arbitrary memory pages of the enclave. This ability en-
ables a malicious OS to know exactly which memory
pages a victim enclave attempts to access by monitor-
ing page faults. Unlike previous side channels, such as
cache-timing channels, the page-fault side channel is de-
terministic; that is, it has no measurement noise.
The controlled-channel attack has a limitation: It re-
veals only coarse-grained, page-level access patterns. Fur-
USENIX Association
26th USENIX Security Symposium    557
ther, researchers have recently proposed countermeasures
against the attack such as balanced-execution-based de-
sign [50] and user-space page-fault detection [10, 49, 50].
However, these methods prevent only the page-level at-
tack; hence, a fine-grained side-channel attack, if it exists,
would easily bypass them.
We have thoroughly examined Intel SGX to determine
whether it has a critical side channel that reveals fine-
grained information (i.e., finer than page-level granular-
ity) and is robust against noise. One key observation is
that Intel SGX leaves branch history uncleared during
enclave mode switches. Knowing the branch history (i.e.,
taken or not-taken branches) is critical because it reveals
the fine-grained execution traces of a process in terms of
basic blocks. To avoid such problems, Intel SGX hides
all performance-related events (e.g., branch history and
cache hit/miss) inside an enclave from hardware perfor-
mance counters, including precise event-based sampling
(PEBS), last branch record (LBR), and Intel Processor
Trace (PT), which is known as anti side-channel inter-
ference (ASCI) [24]. Hence, an OS is unable to directly
monitor and manipulate the branch history of enclave
processes. However, since Intel SGX does not clear the
branch history, an attacker who controls the OS can infer
the fine-grained execution traces of the enclave through a
branch-prediction side channel [3, 12, 13].
The branch-prediction side-channel attack aims to rec-
ognize whether the history of a targeted branch instruction
is stored in a CPU-internal branch-prediction buffer, that
is, a branch target buffer (BTB). The BTB is shared be-
tween an enclave and its underlying OS. Taking advantage
of the fact that the BTB uses only the lowest 31 address
bits (§2.2), the attacker can introduce set conflicts by po-
sitioning a shadow branch instruction that maps to the
same BTB entry as a targeted branch instruction (§6.2).
After that, the attacker can probe the shared BTB entry by
executing the shadow branch instruction and determine
whether the targeted branch instruction has been taken
based on the execution time (§3). Several researchers
exploited this side channel to infer cryptographic keys [3],
create a covert channel [12], and break address space
layout randomization (ASLR) [13].
This attack, however, is difficult to conduct in practice
because of the following reasons. First, an attacker cannot
easily guess the address of a branch instruction and manip-
ulate the addresses of its branch targets because of ASLR.
Second, since the capacity of a BTB is limited, entries can
be easily overwritten by other branch instructions before
an attacker probes them. Third, timing measurements of
the branch misprediction penalty suffer from high levels
of noise (§3.3). In summary, an attacker should have 1)
a permission to freely access or manipulate the virtual
address space, 2) access to the BTB anytime before it
is overwritten, and 3) a method that recognizes branch
misprediction with negligible (or no) noise.
In this paper, we present a new branch-prediction side-
channel attack, branch shadowing, that accurately infers
the fine-grained control flows of an enclave without noise
(to identify conditional and indirect branches) or with
negligible noise (to identify unconditional branches). A
malicious OS can easily manipulate the virtual address
space of an enclave process, so that it is easy to create
shadowed branch instructions colliding with target branch
instructions in an enclave. To minimize the measurement
noise, we identify alternative approaches, including In-
tel PT and LBR, that are more precise than using RDTSC
(§3.3). More important, we find that the LBR in a Skylake
CPU allows us to obtain the most accurate information
for branch shadowing because it reports whether each
conditional or indirect branch instruction is correctly pre-
dicted or mispredicted. That is, we can exactly know the
prediction and misprediction of conditional and indirect
branches (§3.3, §3.5). Furthermore, the LBR in a Sky-
lake CPU reports elapsed core cycles between LBR entry
updates, which are very stable according to our measure-
ments (§3.3). By using this information, we can precisely
infer the execution of an unconditional branch (§3.4).
Precise execution control and frequent branch history
probing are other important requirements for branch shad-
owing. To achieve these goals, we manipulate the fre-
quency of the local advanced programmable interrupt
controller (APIC) timer as frequently as possible and
make the timer interrupt code perform branch shadowing.
Further, we selectively disable the CPU cache when a
more precise attack is needed (§3.6).
We evaluated branch shadowing against an RSA im-
plementation in mbed TLS (§4). When attacking sliding-
window RSA-1024 decryption, we successfully inferred
each bit of an RSA private key with 99.8% accuracy. Fur-
ther, the attack recovered 66% of the private key bits by
running the decryption only once, unlike existing cache-
timing attacks, which usually demand several hundreds
to several tens of thousands of iterations [20, 35, 65].
Finally, we suggest hardware- and software-based coun-
termeasures against branch shadowing that flush branch
states during enclave mode switches and utilize indirect
branches with multiple targets, respectively (§5).
The contributions of this paper are as follows:
• Fine-grained attack. We demonstrate that branch
shadowing successfully identifies fine-grained con-
trol flow information inside an enclave in terms of
basic blocks, unlike the state-of-the-art controlled-
channel attack, which reveals only page-level ac-
cesses.
• Precise attack. We make branch shadowing very
precise by 1) exploiting Intel PT and LBR to cor-
rectly identify branch history and 2) adjusting the
558    26th USENIX Security Symposium
USENIX Association
local APIC timer to precisely control the execution
inside an enclave. We can deterministically know
whether a target branch was taken without noise for
conditional and indirect branches and with negligible
noise for unconditional branches.
• Countermeasures. We design proof-of-concept
hardware- and software-based countermeasures
against the attack and evaluate them.
The remainder of this paper is organized as follows. §2
explains SGX and other CPU features our attack exploits.
§3 and §4 describe our attack and evaluate it. §5 proposes
our countermeasures. §6 discusses our attack’s limita-
tions and considers some advanced attacks. §7 introduces
related work and §8 concludes this paper.
2 Background
We explain Intel SGX and two other processor features,
branch prediction and LBR, closely related to our attack.
2.1
Intel SGX
An Intel CPU supports a hardware-based TEE through
a security extension, Intel SGX. SGX provides a set of
instructions to allow an application to instantiate an en-
clave that secures the code and data inside it against privi-
leged software such as an OS or a hypervisor, hardware
firmware, and even hardware units except for the CPU. To
provide such protection, SGX enforces a strict memory
access mechanism: allow only enclave code to access
memory of the same enclave. In addition, SGX leverages
an on-chip memory-encryption engine that encrypts en-
clave content before writing it into physical memory and
decrypts the encrypted content only as it enters the CPU
package during enclave execution or enclave mode.
Enclave context switch. To support context switching
between enclave and non-enclave mode, SGX provides
instructions such as EENTER, which starts enclave exe-
cution, and EEXIT, which terminates enclave execution.
Also, ERESUME resumes enclave execution after an asyn-
chronous enclave exit (AEX) occurs. The causes of an
AEX include exceptions and interrupts. During a context
switch, SGX conducts a series of checks and actions to
ensure security, e.g., flushing the translation lookaside
buffer (TLB). However, we observe that SGX does not
clear all cached system state such as branch history (§3).
2.2 Branch Prediction
Branch prediction is one of the most important features
of modern pipelined processors. At a high level, an in-
struction pipeline consists of four major stages: fetch,
decode, execute, and write-back. At any given time, there
are a number of instructions in-flight in the pipeline. Pro-
cessors exploit instruction-level parallelism and out-of-
order execution to maximize the throughput while still
maintaining in-order retirement of instructions. Branch
instructions can severely reduce instruction throughput
since the processor cannot execute past the branch until
the branch’s target and outcome are determined. Un-
less mitigated, branches would lead to pipeline stalls,
also known as bubbles. Hence, modern processors use a
branch prediction unit (BPU) to predict branch outcomes
and branch targets. While the BPU increases through-
put in general, it is worth noting that in the case of a
misprediction, there is a pretty high penalty because the
processor needs to clear the pipeline and roll back any
speculative execution results. This is why Intel provides
a dedicated hardware feature (the LBR) to profile branch
execution (§2.3).
Branch and branch target prediction. Branch predic-
tion is a procedure to predict the next instruction of a
conditional branch by guessing whether it will be taken.
Branch target prediction is a procedure to predict and
fetch the target instruction of a branch before executing
it. For branch target prediction, modern processors have
the BTB to store the computed target addresses of taken
branch instructions and fetch them when the correspond-
ing branch instructions are predicted as taken.
BTB structure and partial tag hit.
The BTB is an
associative structure that resembles a cache. Address
bits are used to compute the set index and tag fields. The
number of bits used for set index is determined by the size
of the BTB. Unlike a cache that uses all the remaining
address bits for the tag, the BTB uses a subset of the
remaining bits for the tag (i.e., a partial tag). For example,
in a 64-bit address space, if ADDR[11:0] is used for index,
instead of using ADDR[63:12] for a tag, only a partial
number of bits such as ADDR[31:12] is used as the tag.
The reasons for this choice are as follows: First, compared
to a data cache, the BTB’s size is very small, and the
overhead of complete tags can be very high. Second, the
higher-order bits typically tend to be the same within a
program. Third, unlike a cache, which needs to maintain
an accurate microarchitectural state, the BTB is just a
predictor. Even if a partial tag hit results in a false BTB
hit, the correct target will be computed at the execution
stage and the pipeline will roll back if the prediction is
wrong (i.e., it affects only performance, not correctness.)
Static and dynamic branch prediction. Static branch
prediction is a default rule for predicting the next in-
struction after a branch instruction when there is no his-
tory [25]. First, the processor predicts that a forward
conditional branch—a conditional branch whose target
address is higher than itself—will not be taken, which
means the next instruction will be directly fetched (i.e.,
a fall-through path). Second, the processor predicts that
a backward conditional branch—a conditional branch
whose target address is lower than itself—will be taken;
that is, the specified target will be fetched. Third, the pro-
cessor predicts that an indirect branch will not be taken,
similar to the forward conditional branch case. Fourth,
USENIX Association
26th USENIX Security Symposium    559
the processor predicts that an unconditional branch will
be taken, similar to the backward conditional branch case.
In contrast, when a branch has a history in the BTB, the
processor will predict the next instruction according to
the history. This procedure is known as dynamic branch
prediction.
In this paper, we exploit these two conditional branch
behaviors to infer the control flow of a victim process
running inside Intel SGX (§3).