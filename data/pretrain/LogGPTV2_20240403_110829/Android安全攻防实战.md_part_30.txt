26
00Skstrfped
图 6.35
在上面这张截图中，我们可以看到第二列的列名是PID，这就是我们要找的
信息。在这个例子里，我们选择calendar进程做实验，它的PID是766，如
图6.36所示。
u0_a26
766
37
182068 18276 ffffffff 40037ebc S con.androtd.calendar
图 6.36
7.得到一个有效的PID之后，你可以使用下面这条命令，用gdbserver附加它：
gdbserver : [tcp-port nunber] --attach[PID]
其中[tcp-port number]是你想要连接的 TCP 端口号，而 PID 当然就是你在上
一步中得到的 PID号。如果一切正常，gdbserver会输出如下信息，如图 6.37
所示。
209
---
## Page 228
Android安全攻防实战
root@andr
--attach 76e
lstening on port 31337
图 6.37
8.上传并运行了gdbserver之后，你需要转发目标Android设备上的TCP端口，
这样你的计算机才能连上它，执行下面这条指令，完成这一操作：
adb forward top: [device port-number]tcp: [local port-number]
图6.38是这个例子中adb的端口转发情况。
S_adb forward tcp:31337 tcp:31337
图 6.38
9.然后你应该运行预编译好的gdb，你可以在你的Linux计算机的
android-ndk-r8e/toolchains/arm-linux-androideabi-[version]/prebuilt/linux-x86_
64/bin/路径中找到这个工具。你可以在上面这个NDK路径中执行一次下面
这条命令，以运行这个工具。
arm-1inux-androideabi-gdb
图6.39是它运行时的一张截图。
(g(C06)2031ree So
sbt-gd2
detattheuts
http://source.andretd.con/source/regort-bugs.hol.
BE 6.39
10.准备完毕并运行了gdb之后，你应该试着去连接运行在目标设备上的gdb
实例。在gdb的命令行提示符下，运行下面这条命令。
其中[PID]就是你在第八步中，用adb转发的TCP端口号。图6.40是这一操
作的一张截图。
ouggtng using:31337
图 6.40
全妥了！现在你可以对运行在Android设备上的进程中的内存段和寄存器进
行交互操作了！
210
---
## Page 229
第7章网络安全
在这一章中，我们将做这些实验：
·验证自签名SSL证书；
·使用OnionKit 库中的 StrongTrustManager;
·SSLpinning—限定受信 SSL的范围。
7.1简介
安全套接字层（Secure SocketsLayer，SSL）是客户端和服务器之间加密通信的
核心部分之一。它主要部署在Web浏览器中用以加密消息，以及在进行购买DVD
或网上银行之类网上交易时确定第三方服务的信任等级。Web浏览器的左下角会有
一个表示连接是安全的锁的图标，但在Android app里却没有这样的图标。很不幸，
已经有实例表明，是app的开发者把这一验证步骤给跳过了.论文《为什么Eve和
Mallory喜爱Android：Android SSL的（不）安全分析》（链接地址http://www2.dcsec.
uni-hannover.de/files/android/p50-fahl.pdf)中对此做 了强调说明。
在本章中，我们会介绍一些Android上常见的 SSL陷阱，尤其那些与自签名证
书相关的。我们将重点关注如何使SSL更强大，尽量避免产生一些之前章节提到的
漏洞。毕竞Android app是个有效的胖客户端，为什么不利用它相对于Web 浏览器的
额外功能优势，进行额外的验证并进一步加强限制一只能使用我们所信任的证书和
根（root）证书呢？
尽管，Web服务器的配置也是有效提高网络安全性的一个重要因素。不过这已
经超出了本书的讨论范围，app可影响的因素并不多，常见的有SSL strip、会话劫持
和跨站点请求伪造。但是配合良好的服务器配置，这还是能缓解大部分网络安全问
题的。有鉴于此，SSL实验室最近发布了一篇最好的实践指导文档，其下载地址是：
---
## Page 230
Android安全攻防实战
https://www.ssllabs.com/downloads/SSL_TLS_ Deployment_Best_Practices_1.3.pdf
7.2验证SSL自签名证书
Android支持使用SSL，并配有HTTPClient 和URLConnection之类的标准Android
API组件。但是，当你试图连接一个安全HTTPS服务器的URL时，你可能会遇到
SSLHandshakeException。常见的问题如下。
·服务器所使用的 SSL证书的证书额发机构（Certificate Authority，CA）不是
Android系统自带的约130个CA中的一个，所以不被信任。
·服务器的SSL证书是自签名的。
。服务器没配置中介 SSL证书（intermediary SSLcertificate）。
如果服务器没有配置中介证书，那么只要安装它们，允许连接代码验证可信根
就可以了。但是，如果服务器使用的是自签名证书或Android不信任的CA颁发的证
书，那我们就需要定制SSL的验证了。
通常在实际开发和测试时，远端运行着的服务器中使用的会是自签名的SSL证
书，或只使用付费CA签名的证书。因此，这个实验特别注重健壮地验证自签名SSL
证书。
准备工作
这个实验中，我们要运行一些终端命令，把自签名 SSL证书导入到app 中。本
节先介绍把SSL证书文件下载到你的机器上的工具和命令。
本实验中需要用最新版本的 Bouncy Castle库创建并将证书导入到truststore。我
们之所以选用Bouncy Castle，是因为它是一个健壮的开源密码库，而且Android内置
是支持它的。你要去http://www.bouncycastle.org/latest_releases.html找到和下载
bcprovjar文件，并把它保存到当前工作目录中。在这个实验中，我们把它保存到一
个名为 libs 的本地目录中，所以这个jar文件的路径就是/libs/bcprov-jdk15on-149.jar
（这是本书编写时的最新版本）。
我们需要从服务器上下一个自签名SSL证书文件，如果你已经手动创建了一个
或者有了这么个文件，那你可以跳过这一节的剩余部分，直接去做实验。
①作者原文应该表达的是这个意思。而且只有这样意思才是通顺的，所以换成这个讲法。
212
---
## Page 231
第7章网络安全
我们需要利用开源的 SSL工具包—OpenSSL，去创建和下载SSL证书：
。MAC—你运气不错，自10.2以后，各个MacOSX版本中都已含有OpenSSL
·Linux—许多Linux的发行版本中都已经安装了预编译好了的OpenSSL包。
如果没有，可以到https://www.openssl.org/source/上下载源代码，并编译它。
或者如果你使用的是Ubuntu，也可以用apt-get来安装openssl。
第三方Win32安装程序。
从终端窗口服务器获取证书，要输入以下命令，其中 server.domain 不是IP地址
就是服务器名称。
Openssl s_client -showcerts -connect server.domain:443 </dev/nul1
该证书的详细信息将在控制台输出中显示。复制从BEGIN CERTIFICATE开始
到END CERTIFICATE结束的这段已定义好了的证书内容，把它粘贴进一个新的
文件，将其保存为mycert.cnt。注意：复制时一定不能包含任何额外的空格或结尾处
多出来的空格。
图 7.1 就是使用Openssl-showcerts 向 android.com 申请证书时的截图。
图 7.1
如果你还没有一台服务器，又想建一个新的自签名证书来用，那要先用OpenSSL
213
---
## Page 232
Android安全攻防实战
工具包生成一个RSA私钥。在终端窗口中输入下面这条命令。
openssl genrsa -out my_private_key-pem 2048
这样就生成了my_private_key.pem 这个私钥文件。接下来就用它去生成证书文
件。在终端中输入。
S90 sep- qxo *qreola qno- wd Aex eqearadAu Kex- 60sx- nau- bez tssuedo
按照屏幕上的提示填写证书的详细信息。注意“commonname”中一般应该是
你的服务器IP地址或域名。
这下全备齐了！我们手边应该有一个，下一节中要使用的证书文件了。
怎么做·
让我们开始吧！
1.你应该有一个CRT/PEM编码格式的SSL证书，当用文本编辑器打开它时，
会是这个样子。
-**-BEGIN CERTIFICATE--
·**-END CERTIFICATE-··*
在这个实验中，我们就以mycert.crt这个证书为例。
2.为把证书打包到app 中，要创建证书，并把它导入到.keystore 文件中，这个
文件将被我们视为我们app的 truststore。
3.在终端窗口中执行下面这条命令，设置CLASSPATH变量，使再接下来的命
令能访间 bcprovjar文件。
$export CLAsspATH=1ibs/bcprov-jdk15on-149 .jar
上面这条命令中 bcprov-jdk15on-149.jar 文件的路径应该与下面的 keytool命
令中的-providerpath参数相一致。
4.现在用下面这条keytool命令创建并导入证书。
$ keytool -import -v -trustcacerts -alias 0 /
-file <(openssl x509 -in mycert.crt)/
-keystore customtruststore.bks /
-storetype BKS /
providerclass org.bouncycastle. jce.provider.BouncyCastleProvider /
-providexpath 1ibs/bcprov-Jdk15on-149. jar
-storepass androidcookbook
214
---
## Page 233
第7章网络安全
5.系统会提示是否信任此证书，输入yes。
Trust this certificate? [no] : yes
输出文件是添加了公钥证书（public certificate）的customtruststore.bks。
truststore 有一个保护口令 androidcookbook，在编程把 truststore 加载到 app
中去时，我们还会用到它。我们把-storetype参数设为BKS，它表示的是
Bouncy Castle keystore 类型，同时这也是为什么输出文件的扩展名是.bks 的
原因。Tnuststore 中可以导入多个证书，在开发和测试多台服务器时，这很有用。
Keystore 和 truststore 之间的区别
虽然它们是同一类文件（.keystore），实际上甚至可以是同一个文
件，但我们还是倾向于区分它们。我们用术语 truststore来表示我
们希望与之通信的第三方公钥证书集。而keystore则是指私匙，
并且要存放在受保护的地方（也就是说，不能存放在app中）。
6.复制 truststore 文件到你的 Android app 的 raw文件夹中，如果该文件夹不存
在，那创建一个：
/res/raw/customt.ruststore .bks
7.从raw文件夹中加载本地 truststore 到一个KeyStore对象中去。
private static final String STORg_PASswoRD - "androidcookbook*;
private KeyStore LoadKeyStore () throws Exception (
final KeyStore keyStore = KeyStore getInstance (*Bxs") ;
final InputStream inputStream =
context getResources () openRawResource (
R.rav,customtruststore):
keyStore. 1load(inputStrean, STORE_PASSWORD.toCharArray (0) ;
return keyStore:
) finally (
InputStream, close () 
在这里，我们创建了一个BKS（BouncyCastleKeystore）类型的KeyStore类
的实例，BKS这一类型与我们刚才创建的公钥证书的类型是一致的。在这个
对象中有个.loadO方法，它可以获取加载的.bks文件的输入流（InputStream），
用起来很方便。你或许已经注意到，我们用来打开、验证和读取truststore中
215
---
## Page 234
Android安全攻防实战
内容时所使用的密码，与创建该truststore时所用的密码是一样的。这个密码
主要是用来验证truststore 的完整性，而不是保护其安全性的。特别是因为
truststore 中存放的是服务器的公钥证书，从URL应该能很方便地访问到它，
用硬编码写死在这儿之后，根本就不存在安全问题。不过，为了给攻击者多
制造些麻烦，使用第5章“保护app”中介绍的DexGuard的字符串加密功能，
再加密一下这个口令也是个不错的备选方案。
8.编写一个使用本地 truststore 的 DefaultHttpClient 的子类。
pub1ic class LocalTrustStoreMyHttpClient extends DefaultHttpClient
8Override
protected ClientConnectionManager
createClientConnectionManagex ()(
registry.register (new Scheme (*http*, PlainSocketFactory
-getSocketFactory()。 80) );
try (
registry-register (new Scheme (*https", nev
SSLSocketFactory (
1oadKeyStore () ) 。 443) ) ;
)catch (Exception e)
e-printStackTrace () 
return new SingleClientConnManager (getParams () , registry) ;
我们重写了createClientConncctionManagerO方法，使我们可以注册一个新的，
使用我们本地 truststore的 SSLSocketFactory 接口。为了保持代码示例简洁，
在这里，我们捕获异常后，直接将错误信息打印到系统日志。但在实际编程
时，我们还是建议你实现一个适当的错误处理器，以减少日志信息量。
9.用HttpClient 编写一个HTTP GET请求的例子。
public HttpResponse httpClientRequestUsingLocalKeystore (String ur1)
throws ClientProtocolException, I0Exception [
EttpGet httpGet = nev HttpGet (url):
8ttpC1ient httpC1lent = new MyfttpClient () 
BttpResponse response = httpClient,execute (httpGet) ;:
return response;
216
---
## Page 235
第7章网络安全
这段代码向我们展示了如何构建简单的HTTPGET请求，以及
LocalTrustStoreMyHtpClient 类的用法。因为来自服务器的自签名证书能成功通过验
证，所以 LocalTrustStoreMyHttpClient class 不会抛出 SSLHandshakeException 常。
厂
注意事项
7
我们已为所有HTTPS 请求定义了一个明确的 truststore。请记住，
如果后端服务器证书发生变更，app将不再信任这一连接，并会
抛出 SecurityException 异常。
以上实验得出一个结论：我们可以与一个受SSL保护的，并使用我们自签名SSL
证书的，互联网资源进行通信。
进一步说明
一般来说，在处理SSL时，一个常见的错误是：发现需要证书或代码抛出了安
全异常之后，却选择忽略掉它们。攻击者正是利用了这一点，来蒙蔽不知情的app
用户的。具体该怎样处理SSL错误，完全依赖于你的主观选择或app的实际情况。
不过，先断开网络通信总是个不错的主意，这样可以确保数据不会被传输到一个可
能已经被黑掉了的信道上。