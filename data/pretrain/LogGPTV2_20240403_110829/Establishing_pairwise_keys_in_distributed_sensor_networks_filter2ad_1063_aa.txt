title:Establishing pairwise keys in distributed sensor networks
author:Donggang Liu and
Peng Ning
Establishing Pairwise Keys in Distributed Sensor Networks
Donggang Liu
Cyber Defense Laboratory
Department of Computer Science
North Carolina State University
Raleigh, NC 27695-8207
PI:EMAIL
Peng Ning
Cyber Defense Laboratory
Department of Computer Science
North Carolina State University
Raleigh, NC 27695-8207
PI:EMAIL
ABSTRACT
Pairwise key establishment is a fundamental security service in sen-
sor networks; it enables sensor nodes to communicate securely with
each other using cryptographic techniques. However, due to the re-
source constraints on sensors, it is infeasible to use traditional key
management techniques such as public key cryptography and key
distribution center (KDC). To facilitate the study of novel pairwise
key predistribution techniques, this paper presents a general frame-
work for establishing pairwise keys between sensors on the basis
of a polynomial-based key predistribution protocol [2]. This pa-
per then presents two efﬁcient instantiations of the general frame-
work: a random subset assignment key predistribution scheme and
a grid-based key predistribution scheme. The analysis in this paper
indicates that these two schemes have a number of nice properties,
including high probability (or guarantee) to establish pairwise keys,
tolerance of node captures, and low communication overhead. Fi-
nally, this paper presents a technique to reduce the computation at
sensors required by these schemes.
Categories and Subject Descriptors
C.2.0 [Computer-communication networks]: General–security
and protection
General Terms
Design, Security
Keywords
key management, sensor networks, probabilistic key sharing
1.
INTRODUCTION
Distributed sensor networks have received a lot of attention re-
cently due to their wide application in military as well as civilian
operations. Example applications include target tracking, scien-
tiﬁc exploration, and monitoring of nuclear power plants. Sensor
nodes are typically low-cost, battery powered, and highly resource
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
constrained, and usually collaborate with each other to accomplish
their tasks.
Security services such as authentication and key management
are critical to secure the communication between sensors in hos-
tile environments. As one of the most fundamental security ser-
vices, pairwise key establishment enables the sensor nodes to com-
municate securely with each other using cryptographic techniques.
However, due to the resource constraints on sensor nodes, it is not
feasible for sensors to use traditional pairwise key establishment
techniques such as public key cryptography and key distribution
center (KDC).
Eschenauer and Gligor proposed a probabilistic key predistribu-
tion scheme recently for pairwise key establishment [5]. The main
idea was to let each sensor node randomly pick a set of keys from
a key pool before deployment so any two sensor nodes have a cer-
tain probability of sharing at least one common key. Chan et al.
further extended this idea and developed two key predistribution
techniques: q-composite key predistribution and random pairwise
keys scheme [4]. The q-composite key predistribution also uses a
key pool but requires two sensors compute a pairwise key from at
least q predistributed keys they share. The random pairwise keys
scheme randomly picks pairs of sensors and assigns each pair a
unique random key. Both schemes improve the security over the
basic probabilistic key predistribution scheme.
However, the pairwise key establishment problem is still not
solved. For the basic probabilistic and the q-composite key predis-
tribution schemes, as the number of compromised nodes increases,
the fraction of affected pairwise keys increases quickly. As a result,
a small number of compromised nodes may affect a large fraction
of pairwise keys. While the random pairwise keys scheme doesn’t
suffer from the above security problem, given a memory constraint,
the network size is strictly limited by the desired probability that
two sensors share a pairwise key and the number of neighbor nodes
that a sensor can communicate with.
In this paper, we develop a number of key predistribution tech-
niques to deal with the above problems. In order to facilitate the
study of new key distribution techniques, we ﬁrst develop a general
framework for pairwise key establishment based on the polynomial-
based key predistribution protocol in [2] and the probabilistic key
distribution in [4, 5]. All the previous schemes in [2, 4, 5] are spe-
cial instances in this framework. By instantiating the components
in this framework, we further develop two novel pairwise key pre-
distribution schemes: a random subset assignment scheme and a
grid-based key predistribution scheme. Finally, we present a tech-
nique to reduce the computation at sensors so that our schemes can
be implemented efﬁciently.
Our analysis indicates that our new schemes have some nice
In particu-
features when compared with the previous methods.
lar, when the fraction of compromised secure links is less than
60%, given the same storage constraint, the random subset assign-
ment scheme provides a signiﬁcantly higher probability for non-
compromised sensors to establish secure communication than the
previous methods. Moreover, unless the number of compromised
sensors sharing a common polynomial exceeds a threshold, com-
promise of sensors doesn’t lead to the disclosure of keys established
by non-compromised nodes. Similarly, the grid-based scheme has
a number of attractive properties. First, it guarantees that any two
sensors can establish a pairwise key when there is no compro-
mised sensors, provided that the sensors can communicate with
each other. Second, this scheme is resilient to node compromise.
Even if some sensors are compromised, there is still a high prob-
ability to establish a pairwise key between non-compromised sen-
sors. Third, a sensor can directly determine whether it can establish
a pairwise key with another node and how to compute the pairwise
key if it can. As a result, there is no communication overhead dur-
ing the discovery of shared keys.
The rest of this paper is organized as follows. Section 2 gives
an overview of the polynomial based key predistribution technique.
Section 3 presents the general framework for polynomial pool based
key predistribution. Sections 4 and 5 describe two instantiations
of the framework. Section 6 presents the technique to reduce the
computation at sensors. The related work is discussed in Section
7. Section 8 concludes this paper and points out some future re-
search directions. The appendix gives the proof of a Lemma that
guarantees the security of the technique presented in Section 6.
2. POLYNOMIAL-BASED KEY PREDISTRI-
BUTION FOR SENSOR NETWORKS
In this section, we brieﬂy review the polynomial-based key pre-
distribution protocol in [2], which is the basis of our new tech-
niques. The protocol in [2] was developed for group key predistri-
bution. Since our goal is to establish pairwise keys, for simplicity,
we only discuss the special case of pairwise key establishment in
the context of sensor networks.
To predistribute pairwise keys, the (key) setup server randomly
tX
aijxiyj
generates a bivariate t-degree polynomial f (x, y) =
i,j=0
over a ﬁnite ﬁeld Fq, where q is a prime number that is large enough
to accommodate a cryptographic key, such that it has the property
of f (x, y) = f (y, x). (In the following, we assume all the bivariate
polynomials have this property without explicit statement.) It is as-
sumed that each sensor has a unique ID. For each sensor i, the setup
server computes a polynomial share of f (x, y), that is, f (i, y). For
any two sensor nodes i and j, node i can compute the common key
f (i, j) by evaluating f (i, y) at point j, and node j can compute the
same key f (j, i) = f (i, j) by evaluating f (j, y) at point i.
In this approach, each sensor node i needs to store a t-degree
polynomial f (i, x), which occupies (t + 1) log q storage space. To
establish a pairwise key, both sensor nodes need to evaluate the
polynomial at the ID of the other sensor node. (In Section 6, we
will present techniques to reduce the computation required to eval-
uate polynomials.) There is no communication overhead during the
pairwise key establishment process.
The security proof in [2] ensures that this scheme is uncondi-
tionally secure and t-collusion resistant. That is, the coalition of no
more than t compromised sensor nodes knows nothing about the
pairwise key between any two non-compromised nodes.
It is theoretically possible to use the general group key distribu-
tion protocol in [2] in sensor networks. However, the storage cost
for a polynomial share is exponential in terms of the group size,
making it prohibitive in sensor networks.
focus on the problem of pairwise key establishment.
In this paper, we will
3. POLYNOMIAL POOL-BASED KEY PRE-
DISTRIBUTION
The polynomial-based key predistribution scheme discussed in
Section 2 has some limitations. In particular, it can only tolerate no
more than t compromised nodes, where the value of t is limited by
the memory available in sensor nodes. Indeed, the larger a sensor
network is, the more likely an adversary compromises more than t
sensor nodes and then the entire network.
To have secure and practical key establishment techniques, we
develop a general framework for key predistribution based on the
scheme presented in Section 2. We call it polynomial pool-based
key predistribution, since a pool of multiple random bivariate poly-
nomials are used in this framework. In this section, we focus on the
discussion of this general framework. In the next two sections, we
will present two efﬁcient instantiations of this framework.
The polynomial pool-based key predistribution is inspired by [5]
and [4]. The basic idea can be considered as the combination of
polynomial-based key predistribution and the key pool idea used
in [5, 4]. However, our framework is more general in that it allows
different choices to be instantiated within this framework, including
those presented in [5, 4] and our later instantiations in Sections 4
and 5.
Intuitively, this general framework uses a pool of randomly gen-
erated bivariate polynomials to help establish pairwise keys be-
tween sensors. The polynomial pool has two special cases. When
the polynomial pool has only one polynomial, the general frame-
work degenerates into the polynomial-based key predistribution.
When all the polynomials are 0-degree ones, the polynomial pool
degenerates into a key pool [5, 4].
Pairwise key establishment in this framework is performed in
three phases: setup, direct key establishment, and path key estab-
lishment. The setup phase is performed to initialize the sensors
by distributing polynomial shares to them. After being deployed,
if two sensors need to establish a pairwise key, they ﬁrst attempt
to do so through direct key establishment. If they can successfully
establish a common key, there is no need to start path key establish-
ment. Otherwise, these sensors start path key establishment, trying
to establish a pairwise key with the help of other sensors.
Phase 1: Setup
The setup server randomly generates a set F of bivariate t-degree
polynomials over the ﬁnite ﬁeld Fq. To identify the different poly-
nomials, the setup server may assign each polynomial a unique ID.
For each sensor node i, the setup server picks a subset of polynomi-
als Fi ⊆ F, and assigns the polynomial shares of these polynomi-
als to node i. The main issue in this phase is the subset assignment
problem, which speciﬁes how to pick a subset of polynomials from
F for each sensor node.
Phase 2: Direct Key Establishment
A sensor node starts phase 2 if it needs to establish a pairwise
key with another node. If both sensors have polynomial shares on
the same bivariate polynomial, they can establish the pairwise key
directly using the polynomial-based key predistribution discussed
in Section 2. Thus, the main issue in this phase is the polynomial
share discovery problem, which speciﬁes how to ﬁnd a common bi-
variate polynomial of which both sensors have polynomial shares.
For convenience, we say two sensors have a secure link if they can
establish a pairwise key through direct key establishment.
Here we identify two types of techniques to solve this problem:
predistribution and real-time discovery.
Predistribution: With this type of techniques, the setup server
predistributes certain information to the sensors, so that given the
ID of another sensor, a sensor node can determine whether it can
establish a pairwise key with the other sensor. A naive method
is to let each sensor store the IDs of all the sensors with which it
can directly setup a pairwise key. However, this naive method has
difﬁculties dealing with the sensors that join the network on the ﬂy,
because the setup server has to inform some existing sensors about
the addition of new sensors.
The drawback of predistribution methods is that an attacker may
also know the distribution of the polynomials. As a result, the at-
tacker may precisely target at certain sensor nodes, attempting to
learn polynomial shares of a particular bivariate polynomial. The
following alternative way may avoid this problem.
Real-time discovery: Intuitively, real-time discovery requires
two sensors to discover on the ﬂy whether they both have poly-
nomial shares of a common bivariate polynomial. As one possi-
ble way, two sensors may ﬁrst exchange the IDs of polynomials
of which they both have shares, and then try to identify the com-
mon polynomial. To protect the IDs of the polynomials, the sensor
node may challenge the other party to solve puzzles instead of dis-
closing the IDs of the polynomials directly. For example, using
the method in [5], sensor node i may broadcast an encryption list,
α, EKv (α), v = 1, ..., |Fi|, where Kv is a potential pairwise key
the other node may have. If node j can correctly decrypt any one of
these, it can establish a pairwise key with node i. The drawback of
real-time discovery is that it introduces additional communication
overhead, which does not appear in the predistribution approaches.
Phase 3: Path Key Establishment
If direct key establishment fails, two sensor nodes will have to
start phase 3 to establish a pairwise key with the help of other sen-
sors. For the sake of presentation, we call a sequence of nodes a
path, or key path, since the purpose of such a path is to establish
a pairwise key. To establish a pairwise key with node j, a sensor
node i needs to ﬁnd a path between itself and node j such that any
two adjacent nodes in the path can establish a pairwise key directly.
Then either node i or j initiates a request to establish a pairwise key
with the other node through the intermediate nodes along the path.
A subtle issue is that two adjacent nodes in the path may not be able
to communicate with each other directly. In this paper, we assume
that they can discover a route between themselves so that messages
from one node can reach the other.
The main issue in this phase is the path discovery problem, which
speciﬁes how to ﬁnd a path between two sensor nodes. Similar to
phase 2, there are two types of techniques to address this problem.
Predistribution: Using this type of approach, the setup server
predistributes certain information to each sensor node so that given
the ID of another sensor, each sensor node can ﬁnd a key path to the
other node directly. The drawback is that an attacker may also take
advantage of the predistributed information to attack the network.
Real-time discovery: Real-time discovery techniques have the
sensors discover key path on the ﬂy. As one possible way, sensor
nodes may take advantage of the pairwise keys established through
direct key establishment. To discover a key path to a second sen-
sor, a sensor picks a set of intermediate nodes with which it has
established pairwise keys. The source node may send request to
all these intermediate nodes. If one of the intermediate nodes can
establish a pairwise key with the destination node directly, a key
path is discovered. Otherwise, this process may continue with the
intermediate nodes forwarding the request. Such a process is simi-
lar to a route discovery process used to establish a route between a
source and a destination node. The drawback is that such methods
may introduce substantial communication overhead.
4. KEY PREDISTRIBUTION USING RAN-
DOM SUBSET ASSIGNMENT
In this section, we present an instantiation of the general frame-
work by using a random strategy for subset assignment during the
setup phase. That is, for each sensor, the setup server selects a
random subset of polynomials in F and assigns their polynomial
shares to the sensor.
This scheme can be considered as an extension to the basic prob-
abilistic scheme in [5]. Instead of randomly selecting keys from
a large key pool and assigning them to sensors, our method ran-
domly chooses polynomials from a polynomial pool and assigns
their polynomial shares to sensors. However, our scheme also dif-
fers from [5]. In [5], the same key may be shared by multiple sen-
sors. In contrast, in our scheme, there is a unique key between each
pair of sensors. If no more than t shares on the same polynomial
are disclosed, no pairwise keys constructed using this polynomial
between any two non-compromised sensor nodes will be disclosed.
Now let us describe this scheme by instantiating the three com-
ponents in the general framework.
Subset assignment: The setup server randomly generates a set
F of s bivariate t-degree polynomials over the ﬁnite ﬁeld Fq. For
each sensor node, the setup server randomly picks a subset of s(cid:1)
polynomials from F and assigns polynomial shares of these s(cid:1)
polynomials to the sensor node.
Polynomial share discovery: Since the setup server doesn’t pre-
distribute enough information to the sensors for polynomial share
discovery, sensors that need to establish a pairwise key have to ﬁnd
out a common polynomial with real-time discovery techniques. To
discover a common bivariate polynomial, a sensor node may broad-
cast a list of polynomial IDs, or alternatively, broadcast an encryp-
tion list α, EKv (α), v = 1, ..., |Fi|, where Kv is a potential pair-
wise key the other node may have, as suggested in [5, 4].
Path discovery: If two sensors fail to establish a pairwise key
directly, they must start path key establishment phase. During this
phase, a source sensor node tries to ﬁnd another node that can help
setup a common key with the destination node. The source node
broadcasts a request message, which includes two lists of polyno-
mial IDs (one for the source node and the other for the destination
node), to establish a pairwise key. If one of the nodes that receives
this request is able to establish a common key with both of the
source node and the destination node, it replies with a message that
contains two encrypted copies of a randomly generated key: one
encrypted by the pairwise key with the source node, and the other
encrypted by the pairwise key with the destination node. Both the
source and the destination node can then get the new pairwise key
from this message. (Note that the intermediate node acts as a KDC
in this case.) In practice, we may restrict that a sensor only contact
its neighbors within a certain range.
4.1 Analysis
Similar to the analysis in [5], the probability of two sensors shar-
ing the same bivariate polynomial, which is the probability that two
sensors can establish a pairwise key directly, can be estimated by
p = 1 − s(cid:1)−1Y
i=0
s − s(cid:1) − i
s − i
(1)
Figure 1(a) shows the relationship between p and the combinations
of s and s(cid:1)
are, the more
likely two sensor nodes can establish a pairwise key directly.
. It is easy to see that the closer s and s(cid:1)
Now let us consider the probability that two sensor nodes can
establish a key through both polynomial share discovery and path
discovery. Let d denote the average number of neighbor nodes that
s'=2
s'=3
s'=4
s'=5
d=20
d=40
d=60
d=80
d=100
1.2
1
0.8
p
0.6
0.4
0.2
0
0
10
20
30
40
50
60
70
80
90
s
1.2
1
0.8
Ps
0.6
0.4
0.2
0
0
0.1
0.2
0.3
0.4
0.5
p
0.6
0.7
0.8
0.9
1
(a) The probability p that two sensors share a polynomial
v.s. the size s of the polynomial pool
(b) The probability Ps of establishing a pairwise key v.s.
the probability p that two sensors share a polynomial
Figure 1: Probabilities about pairwise key establishment
each sensor node can contact. Consider any one of these d neighbor
nodes. The probability that it shares a pairwise key with both the
source and the destination node is p2. As long as one of the d nodes
can act as an intermediate node, the source and the destination node
can establish a common key. It follows that the probability of two
sensor nodes establishing a pairwise key (directly or indirectly) is