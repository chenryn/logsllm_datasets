else
break#>/tmp
done
上述脚本中用了两次随机数，如果不将其定义成变量，就会出现执行看起来相同的
命令两次但是结果却不同的情况。
下面是一个输出不够美观但结果正确的解题方法：
[root@oldboy scripts] cat 11_14_1.sh
/uq/1
#author:oldboy
#b1og:http:/o1dboy .blog.51cto.com
user="oldboy"
passfile=*/tnp/user.1og*
for num inseg - 10
useradd SuserSnun #>Spassf11e/dev/null &&\
>p/Spassfile
执行结果如下：
---
## Page 256
238跟老男孩学Linux运维：Shell 编程实战
[root9oldboy scripts]# sh 11_14_2.sh
oldboy11i8 ok
OK
OK
oldboy13is ok
o1dboy12 is ok
OK
o1dboy14 is ok
OK
o1dboy15 is ok
OK
user:oldboy11
passwd:4afe6e5e9
user:o1dboy12
pa88wd:26ed64dc8
user:oldboy13
pa88wd:ae20945bb
user:o1dboy14
pa88wd:d94812b76
user:oldboy15
pas8wd:b7a8359d5
提示：注意随机数的字符串要定义成变量，否则，每次执行结果都会不相同。
参考答案2：
1）按照参考答案1的思路正常创建账号。
2）要批量创建密码，可使用chpasswd来实现，chpasswd是一个批量更新用户口令
的工具。
chpasswd的使用示例如下：
[rooteoldboy scripts]+useradd oldgir101
[root8oldboy scripts]#echo*o1dgir101:123456*1chpasswd
[oldboyθo1dboy~1Ssu-o1dgir101
[root@oldboy scripts] su - oldboy
[oldgir101@o1dboy -1$ whoami
oldgir101
给多个用户设置密码的命令为：
chpasswd>SpassfileSpassfile
11.5Linux系统产生随机数的6种方法
下面介绍Linux系统产生随机数的6种方法。
方法1：通过系统环境变量（SRANDOM）实现，示例代码如下。
[rootgoldboy scripte]# echo SRANDOM
[rooteoldboy scripts]echo SRANDOM
30492
4021
RANDOM的随机数范围为0～32767，因此，加密性不是很好，可以通过在输
出的随机数后增加加密字符串（就是和密码生成有关的一个字符串）的方式解决，最
后再一起执行md5sum操作并截取结果的后n位，这样一来，就无法根据随机数范围
0～32767来猜出具体结果了。
示例：
<u=这里的oldboy就是上文提到的加害字符串，虽然RANDOM可以破解，但是只要无人知道你增加的
o1dboy字将串，就无法破解下面的字特串，破解RANDOM并进行md5Bum操作的例子在后文有详细讲。
91be8254
方法2：通过openssl产生随机数，示例代码如下。
[root@oldboy scripta]#openssl rand -base64 8
F0hRoLu9o8e-
---
## Page 258
240跟老男孩学 Linux 运堆：Shell 编程实战
Q6EzRQfqdvTBIF6W+1AR18auIZOEp73NOBo38phak58yE8NKUGAzNrUKQvMJjiFq
RPcvd7ExfofD1ho8441X3XGlesgdnDTP2kbUUIHID30=
令数字与大小写字符相结合，并且带上特殊字符，可以达到很长的位数，这样的随
机数很安全。
方法3：通过时间（date）获得随机数，示例代码如下。
[rooteoldboy scripts]date +8sN
1473061480765110440
[rootgoldboy scripts]# date +8seN
1473061481595654564
方法4：通过/dev/urandom配合chksum生成随机数。
示例代码如下：
[xootθoldboy scripts]#head /dev/urandom|cksum
1595867971 3433
[rootgoldboy scripte]# head/dev/urandomlcksum
2594498471 1700
/dev/random设备存储着系统当前运行环境的实时数据。它可以看作系统在某个时
候的唯一值，因此可以用作随机数元数据。我们可以通过文件读取的方式，读到里面的
数据。/dev/urandom这个设备的数据与random里的一样。只是，它是非阻塞的随机数
发生器，读取操作不会产生阻塞。
方法5：通过UUID生成随机数。
示例代码如下：
[xoot@oldboy scripts]# cat /proc/sys/kernel/random/uuid
54b63594-98f3-4f41-b50f-3c152dce170e
[rooteoldboy scripts]cat/proe/sys/kernel/random/uuid
3cf5e2fe-32dd-4378-af09-cf668a7acd38
UUID 码全称是通用唯一识别码（Universally Unique Identifier，UUID），它是一个
软件建构的标准，亦为自由软件基金会（Open Software Foundation，OSF）的组织在分
布式计算环境（Distributed ComputingEnvironment，DCE）领域的一部分。
UUID的目的是让分布式系统中的所有元素都能有唯一的辨识信息，而不需要通过
中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其他人发生冲突的
UUID。在这样的情况下，就不需要考虑数据库创建时的名称重复问题了。它会让网络
中任何一台计算机所生成的UUID码都是互联网整个服务器网络中唯一的编码。它的原
信息会加人硬件、时间、机器当前运行信息等。
方法6：使用expect附带的mkpasswd生成随机数。
先安装该数据包：