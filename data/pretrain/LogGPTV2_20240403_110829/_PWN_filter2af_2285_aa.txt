# 【技术分享】跟我入坑PWN第二章
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**作者：[ WeaponX](http://bobao.360.cn/member/contribute?uid=2803578480)**
**预估稿费：400RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至[
linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿**
**传送门**
[**【技术分享】跟我入坑PWN第一章** ****](http://bobao.360.cn/learning/detail/3300.html)
**0x00 背景介绍**
格式化字符串漏洞，虽然在现在真实的环境下已经基本绝迹了。但是在CTF中还是有很多出题点的，本文将阐述格式化字符串漏洞的成因和利用场景与方法。
未注明的情况下，本文的测试环境为Ubuntu 14.04 desktop x86-64，使用到的程序为gdb、gdb-peda、gcc、python、pwntools、socat、rp++、readelf。所有的应用都可以在[《跟我入坑PWN第一章》](http://bobao.360.cn/learning/detail/3300.html)中找到。
**0x01 格式化字符串漏洞介绍**
首先，我们来看看什么是格式化字符串：
包含文本的格式参数的字符串，比如"What's your name %s?"。其中，"What's your name "是文本"%s"是格式参数。
下面，我们先看一个示例。
    #include
    int main()
    {
        char *nick_name = "WeaponX";
        printf("What's your name %s?n", nick_name); 
        printf("What's your name %s?n");
        return 0;
    }
测试环境Windows XP 32bit、VC 6.0、Win32 Release，程序输出的结果如下：
    What's your name WeaponX?
    What's your name What's your name %s?
    ?
    Press any key to continue
为什么会这样呢？我们接着往下看。在[《跟我入坑PWN第一章》](http://bobao.360.cn/learning/detail/3300.html)中可以知道，在x86中函数的参数是放在栈中的，所以在第一个printf调用时，栈中的数据是这样的。
         Stackframe
    +------------------+
    |   parameter1     |  
    int main()
    {
        char str[0x20];
        scanf("%s", str);
        printf(str);
        return 0;
    }
编译方式：
    gcc -m32 -O0 vuln.c -o vuln
我们先输入payload "aaaa%08x%08x%08x%08x%08x%08x%08x"看执行结果：
    ➜ ./vuln 
    aaaa%08x%08x%08x%08x%08x%08x%08x
    aaaaff9d75ac0000000108048345ff9d82f20000002f0804a00061616161%
可以看到我们的payload中有%08x，其中08是等宽输出，意思就是如果输出的长度不够8个字符则用0补充到8个字符。  
我们可以看到输出结果的最后四字节是0x61616161就是aaaa对应的16进制，是我们可以控制的内容。
下面我们来看看如何用格式化字符串漏洞完成任意地址读和任意地址写：
**1.任意地址读：**
根据0x01中的知识，我们只需要把最后一个%08x换成%s就可以读取0x61616161地址的数据，注意这个0x61616161是我们可以控制的内容，就是我们输入的前四个字节且这四个字节就是读取的地址。所以，可以通过替换这个payload的前四个字节完成任意地址读。
这个payload也可以简化为aaaa%7$s，这里的7$的意思就是取printf的第七个参数(0x61616161)，如果这里要用等宽输出的话payload就变成这样了aaaa%7$08x，结果会输出aaaa61616161。
**2.任意地址写：**
我们先了解一下%n的作用。%n是将输出的字符的个数写入到内存中。
根据上述知识，当payload为aaaa%7$n时，输出的字符数量为4，程序会将4写入0x61616161指向的内存中。如果我们需要写更大的数就得用等宽输出来实现了。假设，我们需要向0x61616161写入100，则payload就变成了aaaa%7$0100n。
任意地址写还有一个问题就是，如果我们要写一个很大的数，比如要将0x8048320写入0x61616161，这个16进制对应的十进制数为134513440，也就是说需要在输出134513440个字符。不用多想，程序肯定会崩溃。
如果遇到这种情况怎么办呢？我们可以通过%hn来两字节两字节写入。在上面的例子中，我们将0x8048320拆分为高两字节0x804和低两字节0x8320，将0x804也就是十进制2052写入0x61616161
– 0x61616162；将0x8320也就是十进制33568写入0x61616163 – 0x61616164。分两次写入就可以完成大数的写入了。
**0x03 相关利用场景示例**
**1.利用格式化字符串漏洞绕过canary**
首先我们了解一下canary的机制。canary类似于windows中GS机制，普通的函数栈如下：
        Stackframe
    +------------------+
    |    parameter     |
    +------------------+
    |   local var1     |
    +------------------+
    |   local var2     |
    +------------------+
    |        ebp       |
    +------------------+
    |    return addr   |
    +------------------+
如果，要利用缓冲区溢出覆盖返回地址比如要覆盖ebp。然而开启了canary后，函数栈就变成如下：
        Stackframe
    +------------------+
    |    parameter     |
    +------------------+
    |   local var1     |
    +------------------+
    |   local var2     |
    +------------------+
    |      canary      | <- Random