identity is converted into a ciphertext under another iden-
tity. Chu and Tzeng [9] presented an IBPRE scheme proved
chosen-ciphertext secure in the standard model. Matsuo
[31] linked the traditional public-key systems and identity-
based encryption systems by presenting a hybrid proxy re-
encryption system. This PRE scheme allows a ciphertext
in PKI-based systems to be converted into a ciphertext for
an identity in IBE system, although it does not support the
broadcasting mechanism in encryption. Liang [23] deployed
the concept of PRE to achieve revocability in identity-based
setting. Shao [34] extended the concept of IBPRE to that of
anonymous IBPRE (AIBPRE) and proposed an AIBPRE
scheme to achieve the anonymity of recipients. A fully-
anonymous functional PRE scheme is presented by Kawai
and Takashima [18] recently. To achieve more ﬂexible en-
cryption, some attribute-based proxy re-encryption (ABPRE)
schemes [24, 29, 22] have been proposed. In ABPRE sys-
tems, a ciphertext for an access policy is able to be re-
encrypted to a diﬀerent access policy (this access policy is
not constrained to be more restrictive than the original one).
Given that the cryptographic computations in attribute-
based encryption are often too complicated, these schemes
seem not very suitable for the mobile devices that often pos-
sess limited computing capability.
In addition, Liang [21]
further generalized the concept of PRE into any DFA-based
functional setting.
The existing PRE schemes do not achieve re-encryption
from a complicated cryptosystem to a simple cryptosystem,
which limits their applications for more complicated scenar-
ios. The proposed ACCRE scheme directly employs IBE on
mobile devices in view of their limited resources. The AC-
CRE allows a proxy to transform a ciphertext of an IBBE
system into a ciphertext of an IBE system, without requir-
ing any participation of a third party or the user speciﬁed
to access the IBE ciphertext, nor extra secret storage for
the speciﬁed user. Hence, a user can eﬃciently convert his
IBBE secured ﬁle into a simple IBE secured one that can be
accessed by a mobile user at a low cost.
3. PROBLEM STATEMENT AND SYSTEM
MODEL
3.1 Problem Statement
We consider securing data between computing devices equipped
with asymmetric capacities, i.e., mobile devices such as smart
phones, and powerful computing devices such as desktops
and servers. Mobile devices employ an identity-based en-
cryption (IBE) scheme to meet their constraint resources
while powerful desktops and servers employ an identity-
based broadcast encryption (IBBE) scheme for the purpose
of versatile access control over the data to be outsourced.
The users equipped with the IBBE can encrypt data via the
IBBE encryption so that a set of speciﬁed users can access
the same data. The users equipped with the IBE are able
to encrypt their data by calling the IBE encryption. Hence
there are two kinds of ciphertexts, i.e, IBBE ciphertexts and
IBE ciphertexts. When a user in IBBE system wishes to
authorize a user in IBE system to access the data that is
previously encrypted in an IBBE ciphertext, the problem is
how to enable the IBBE user (authorizing a powerful proxy)
to securely convert the IBBE ciphertext into the IBE ci-
phertext decryptable by the authorized IBE user with the
following constraints.
1. The IBBE users are not required to install the IBE
system.
2. The IBE users are not required to install the IBBE
system.
3. The IBBE user who wants to transmit his/her data
does not need to decrypt the IBBE ciphertext.
3.2 System Model
We address the above problem by introducing and for-
malizing a new proxy re-encryption paradigm referred to
as asymmetric cross-cryptosystem re-encryption (ACCRE).
The system architecture is illustrated in Figure 1.
In the
ACCRE framework, there are ﬁve parties described as fol-
lows.
• Administrator (Admin): a party which is responsi-
ble for publishing public parameters and issuing access
credentials (i.e., decryption keys).
• Data storage provider (DSP): a party which provides
storage services for data owners.
• Data owners: the users who encrypt their data using
IBBE and then outsource the encrypted data to the
DSP.
• Data consumers: the users who can access the data
encrypted in IBE ciphertexts if they have the correct
access credentials issued by Admin.
• Proxy: a party which converts the ﬁles encrypted in
IBBE into the ﬁles encrypted in IBE if having the con-
version keys given by the data owners.
In an ACCRE system, IBBE and IBE are employed for
data owners and data consumers respectively. Although
these two cryptosystems can also contain data consumers
and data owners, we ignore these users in their own systems
to concentrate on the ﬁle conversion functionality. The data
owners in ACCRE can encrypt their data with a set of iden-
tities through the IBBE encryption and thus obtain IBBE
ciphertexts. When a data owner wants to transform his/her
IBBE secured ﬁle stored in DSP into an IBE encrypted ﬁle
Figure 1: System Model
with the identity of the data consumer, the data owner does
not need to decrypt the IBBE ciphertext. Instead, the data
owner generates a conversion key (CK) using his/her secret
key and the identity of the data consumer and then sends
CK to the proxy. The proxy downloads the data owner’s
ﬁle from DSP and applies the conversion key to transform
the IBBE encrypted ﬁle into the IBE encrypted one that can
be decrypted by the intended data consumer. We note that
during the whole ﬁle conversion, the data owner is online
only when sending the conversion key; and neither the DSP
nor the data consumer is required to participate.
3.3 Security Model and Assumptions
As in previous work, we assume that the Admin is fully
trusted. The DSP and the proxy are assumed to be honest-
but-curious in that they may be curious about the the con-
tent of ﬁles and some secret information about the data
owners, but they still honestly perform the tasks assigned
to. The DSP and the proxy, as well as the data consumers
may try to access the content of ﬁles stored in DSP without
any authorization.
To capture realistic attacks, we deﬁne an adversary which
is able to compromise all the parities, except the Admin,
the owner of target data and the data consumer who has
the correct access credentials (decryption key) to the target
data. We require that even for such adversary, any useful
information about the data will be not leaked. We note that
this is a strong notion of security since it resists attacks from
all unauthorized parities. The formal security model will be
given in Section 5.
4. PROPOSED ACCRE SCHEME
Before presenting our ACCRE scheme, we ﬁrst introduce
some basic idea in driving the construction.
4.1 Basic Idea
In an ACCRE system, data owners encrypt their data
and outsource the encrypted ﬁles to DSP for sharing. For
instance, the employees of a company encrypt their data via
the IBBE so that a number of authorized employees can
download and then access the data. In meanwhile, another
employee outside oﬃce works with a mobile device involving
an IBE decryption key. When a data owner wants to autho-
rize the employee working outside with the access rights to
his/her IBBE encrypted ﬁle, the data owner can generate
a conversion key and calls the proxy, e.g., the IT center of
the company, to transform the IBBE encrypted ﬁle into an
IBE encrypted one so that the speciﬁed employee can access
with the IBE decryption key.
We construct the ACCRE scheme by using the the IBBE
scheme [10] and a variant of the IBE scheme [3]. The biggest
obstacle in the ACCRE construction is the asymmetric struc-
ture of the IBBE ciphertexts and the IBE ciphertexts. Specif-
ically, the IBBE ciphertext is generated with a set of iden-
tities, whereas an IBE ciphertext is associated with a single
identity. Then, in the conversion of the IBBE ciphertext into
an IBE ciphertext, multiple identities should be replaced
with the identity of intended IBE user without revealing
the underlying message. Further, the underlying message is
usually blinded by a random value to protect the security, it
seems problematic to replace the multiple identities without
knowledge about the random value.
We overcome the above challenge by using a key blind-
ing technique. Coarsely, in the conversion key generation,
the data owner blinds his/her IBBE secret key with a ran-
dom value and then encrypts the random value with the
identity of the speciﬁed data consumer via the IBE en-
cryption. Given the conversion key, the proxy applies the
blinded secret key of the data owner to “partially” decrypt
the IBBE ciphertext, which results an IBE ciphertext addi-
tionally blinded by the random value. Then the data con-
sumer with the identity speciﬁed in the conversion key can
ﬁrst recover the random value and ﬁnally obtain the data in
plaintext.
4.2 The Construction
We now describe our ACCRE scheme which is built in
a bilinear map groups system (p, G, GT , ˆe) ← G(1λ). This
bilinear group system is deﬁned as follows. Let G(1λ) be a
generator with input the security parameter λ. It generates
two cyclic groups G and GT . We say that G is a bilinear
group if there exists an eﬃcient map ˆe : G×G → GT satisfy-
ing: i) ˆe(ga, hb) = ˆe(g, h)ab for all g, h ∈ G and all a, b ∈ Zp;
and ii) ˆe(g, h) (cid:54)= 1. The ACCRE system consists of the
following procedures.
System Setup: The admin calls the Setup algorithm to
create system public key P K and a master secret key M SK,
where P K involves the public key of IBE and the public key
of IBBE, denoted by P KIBE and P KIBBE respectively.
The public key P K is public to other parties while M SK
must be kept secret.
(M P K, M SK) ← Setup(1λ): Choose a bilinear group G
of prime order p with generator g. Choose random elements
h ∈ G and α ∈ Zp. Select a hash function H : {0, 1}∗ → Z∗
p,
as well as a coding function F 1 : GT → G. Set m as the
maximal size of the broadcasting receiver set and compute
g1 = gα, hα, hα2
, ..., hαm
1This function could be deﬁned as follows: given an element
e(g, gx) ∈ GT for a value x ∈ Zp, output gx ∈ G.
Deﬁne the public key
(cid:16)
P K =
g1, ˆe(g, h), h, hα, ..., hαm
(cid:17)
, H(·), F (·)
and the master secret key M SK = (g, α). The IBBE public
key P KIBBE is deﬁned the same as P K and the IBE public
key P KIBE is set as
P KIBE = (g1, ˆe(g, h), h, hα, H(·), F (·))
which is a part of P K.
User Registration: When a new user associated with
an identity ID requires to join the system, the Admin ﬁrst
checks whether this user is valid or not. If yes, the Admin
generates an access credentials for this user. In the ACCRE
system, although there are two kinds of encryption systems,
the Admin does not need to diﬀerentiate which encryption
system (IBBE or IBE) the requiring user belongs to, but just
calls the following algorithm to generate an access credential
for the user.
SKID ← KeyGen(P K, M SK, ID): This algorithm takes
as inputs the public key P K, the master secret key M SK,
and the identity ID of the new user. The algorithm hashes
the identity ID to be H(ID) ∈ Zp and outputs
SKID = g
1
α+H(ID) .
We note that a user with an identity ID has the same ac-
cess credential in IBBE and IBE. That is, assuming that
SKIBBE,ID and SKIBE,ID is the access credentials of user
ID in IBBE and IBE respectively, then we have SKID =
SKIBBE,ID = SKIBE,ID. This would save the overheads of
the Admin in issuing users’ access credentials since it gener-
ates the same credential for an identity no matter involved
in IBBE or IBE.
File Creation: When a data owner in IBBE wants to
share his/her data with a set S of users, the data owner
creates a ﬁle to be stored in DSP by the following steps.
First, the owner encrypts the ﬁle with a random symmetric
session key DEK of some symmetric cryptosystem such as
AES. Second, the owner encrypts the symmetric session key
DEK with the set S of identities of the users the data owner
wants to share data with. The procedure runs as follows.
CTS ← Encrypt(P K, S, M ): This algorithm takes as in-
puts the public key P K, a set of identities S = {IDi}n
with n < m and a message M ∈ GT , where M is a repre-
sentation of the symmetric key DEK to be encrypted. The
algorithm chooses a random s ∈ Z∗
C0 = M · ˆe(g, h)s, C1 = g
Then output CTS = (C0, C1, C2). This CTS and the cipher-
text of the data under the symmetric key form the encrypted
ﬁle stored in DSP.
1 , C2 = hs(cid:81)n
i=1(α+H(IDi).
i=1
p and computes
−s
Conversion Key Generation: Suppose that a data has
already been encrypted by the IBBE and outsourced to DSP.
When a user IDj having access to the data wants to autho-
rize a mobile user ID (i.e., an IBE user) to access the data,
the user IDj needs to ﬁrst generate a conversion key by call-
ing the following algorithm and then gives this key to the
proxy.
CKS→ID ← CKGen(P K, SKIDj , S, ID): The algorithm
takes as inputs the public key P K, the secret key SKIDj ,
the identity set S = {IDi}n
i=1 involving IDj and the iden-
tity ID of the intended IBE data consumer. The algorithm
generates a conversion key CKS→ID that can transform an
IBBE ciphertext associated with the identity set S into an
IBE ciphertext associated with ID. The algorithm proceeds
as follows. Choose a random k ∈ GT and compute
(cid:81)n
i=1,i(cid:54)=j H(IDi).
Choose a random r ∈ Zp and compute
IDj = SKIDj · F (k)
(cid:48)
SK
E0 = kˆe(g, h)r, E1 = hr(α+H(ID))
When a user ID requires a converted ﬁle, the proxy re-
turns the corresponding ﬁle. Similarly, the user ﬁrst de-
crypts the IBE ciphertext transformed from an IBBE cipher-
text to get the symmetric key and then uses the symmetric
key to recover the data. The decryption of the converted
ciphertext is described by the following algorithm.
M ← DecryptConv(P KIBE, CTID, SKID): The algo-
rithm takes as inputs the public key P KIBE, the access
credential SKID of user ID and the converted ciphertext
CTID = (C
(cid:48)
0, C2, E0, E1). It performs
to form an IBE ciphertext (E0, E1) for k and ID. Finally,
output the conversion key as
CKS→ID = (SK
(cid:48)
IDj , E0, E1).
and outputs
k = E0/ˆe (SKID, E1)
M = C
0 · ˆe (F (k), C2) .
(cid:48)
We note that in this procedure the user IDj is online only
when sending the conversion key and neither the DSP nor
the data consumer ID is required to participate in generat-
ing the conversion key.
File Conversion: Given a conversion key CKS→ID, the
proxy can transform an IBBE ciphertext CTS with set S
into an IBE ciphertext CTID for an identity ID. The proxy
ﬁrst downloads the encrypted ﬁle from DSP and applies the
conversion key to convert the ﬁle by calling the following
algorithm.
CTID ← ReEnc(P K, CKS→ID, CTS): The algorithm
takes as inputs the public key P K, the IBBE ciphertext
CTS and the conversion key CKS→ID that is given by the
user IDj ∈ S. It computes
(cid:104)
(cid:16)
(cid:16)
(cid:17) · ˆe
K =
ˆe
C1, h∆S,j
SK
= ˆe (g, h)s · ˆe (F (k), C2) ,