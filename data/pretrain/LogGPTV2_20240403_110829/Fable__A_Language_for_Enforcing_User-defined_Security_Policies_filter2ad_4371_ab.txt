are pre-values preceded by zero or more relabeling opera-
tions.
Encodings. To make our examples more readable, we use
the syntactic shorthands shown in Figure 2. The ﬁrst three
shorthands are mostly standard. We use the policy keyword
to designate policy code instead of using brackets ([·]). A
dependent pair (e,e(cid:48)) of type x:t × t(cid:48) allows x, the name
for the ﬁrst element, to be bound in t(cid:48), the type of the sec-
ond element. For example, the ﬁrst two arguments to the
access pub function above could be packaged into a depen-
dent pair of type (acl:lab∼ACL(World) ×int{acl}) which is
inhabited by terms such as (ACL(World),{ACL(World)}1).
Dependent pairs can be encoded using dependently typed
functions. We extend the shorthand for function applica-
tion, policy function deﬁnitions, type abbreviations, and tu-
ples to multiple type and term arguments in the obvious
way. We also write
as a wildcard (“don’t care”) pattern
variable.
Phantom label variables. We extend the notation for poly-
morphic functions in a way that permits quantiﬁcation over
the expressions that appear in a type. Consider the example
below:
policy add(cid:104)l(cid:105)(x:int{l}, y:int{l}) = {l}({◦}x + {◦}y)
This policy function takes two like-labeled integers x and
y as arguments, unlabels them and adds them together, and
ﬁnally relabels the result, having type int{l}. This function
is unusual because the label l is not a normal term argument,
but is being quantiﬁed—any label l would do.
The reason this makes sense is that
in FABLE,
(un)labeling operations are merely hints to the type checker
to (dis)associate a label term and a type. These operations,
along with all types, can be erased at runtime without af-
fecting the result of a computation. After erasing types, our
example would become policy add (x, y) = x + y, which is
clearly only a function of x and y, with no mention of l. For
this reason, we can treat add as polymorphic in the labels of
371
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:10:14 UTC from IEEE Xplore.  Restrictions apply. 
type abbreviation
let binding
polymorphic function def.
policy function def
dependent tuple type
dependent tuple introduction
dependent tuple projection
typename N α = t in e2
let x = e1 in e2
let f(cid:104)α(cid:105)(x:t) = e1 in e2
policy f(cid:104)α(cid:105)(x:t) = e1 in e2
x:t×t(cid:48)
(e,e(cid:48))
let x,y = f in e
≡
≡
≡
≡
≡
≡
≡
(N t(cid:48) (cid:55)→ ((α (cid:55)→ t(cid:48))t))e2
(λ x:t.e2) e1
let f = ﬁx f:t(cid:48).Λα.λ x:t.e1 in e2
let f = ﬁx f:t(cid:48).Λα.λ x:t.([e1]) in e2
∀α.((x:t) → t(cid:48) → α) → α
Λα.λ f:((x:t) → t(cid:48) → α). f e e(cid:48)
f [te](λ x:t.λ y:t(cid:48).e)
for some t
for some t(cid:48)
f or some t(cid:48)
for some t,t(cid:48)
for some t,t(cid:48), and te
Figure 2. Syntactic shorthands
x and y—it can be called with any pair of integers that have
the same label, irrespective of what label that might be. We
express this kind of polymorphism by writing the phantom
label variable l, together with any other normal type vari-
ables like α,β , . . ., in a list that follows the function name.
In the example above, the phantom variable of add are listed
as (cid:104)l(cid:105). Of course, not all label arguments are phantom. For
instance, in the access simple function of Section 1, the acl
is a label argument that is passed at runtime. For simplic-
ity, we do not formalize phantom variable polymorphism.
Our technical report [38] does model phantom variables and
contains the associated proof of soundness.
Example: Access control policy. Figure 3 illustrates a sim-
ple, but complete, enforcement policy for access control.
Protected data is given a label listing those users authorized
to access the data. In particular, such data has type t{acl}
where acl encodes the ACL as a label.
The policy’s login function calls an external function
checkpw to authenticate a user by checking a password. If
authentication succeeds (the ﬁrst pattern), checkpw returns a
label USER(k) where k is some unique identiﬁer for the user.
The login function returns a pair consisting of this label and
a integer labeled with it; this pair serves as our runtime rep-
resentation of a principal. The access function takes the two
elements of this pair as its ﬁrst two arguments. Since FABLE
enforces that only policies can produce labeled values, we
are assured that the term with type int{USER(k)} can only
have been produced by login. The access function’s last
two arguments consist of the protected data’s label, acl, and
the data itself, data. The access function calls the member
function to see whether the user token u is present in the
ACL. If successful, the label TRUE is returned, in which
case access returns the data with its acl label removed.
2.2. Typing
Figure 4 deﬁnes the typing rules for FABLE. The main
judgment Γ (cid:96)c e : t types expressions. The index c indicates
whether e is part of the policy or the application. Only
policy terms are permitted to use the unlabeling and rela-
beling operators. Γ records three kinds of information; x:t
maps variables to types, α records a bound type variable,
and e (cid:31) p records the assumption that e matches pattern p,
used when checking the branches of a pattern match.
The rules (T-INT), (T-VAR), (T-FIX), (T-TAB) and (T-
TAP) are standard for polymorphic lambda calculi.
(T-
ABS) and (T-APP) are standard for a dependently typed
(T-ABS) introduces a dependent function type
language.
of the form (x:t1) → t2.
(T-APP) types an application
of a (dependently typed) function. As usual, we require
the type t1 of the argument to match the type of the for-
mal parameter to the function. However, since x may oc-
cur in the return type t2, the type of the application must
substitute the actual argument e2 for x in t2. As an ex-
ample, consider an application of the access simple func-
tion, having type (acl:lab) →int{acl} →int,
to the term
ACL(Alice,Bob). According to (T-APP) the resulting ex-
pression is a function with type int{ACL(Alice,Bob)} →int,
which indicates that the function can be applied only to an
integer labeled with precisely ACL(Alice,Bob). This is the
key feature of dependent typing—the type system ensures
that associations between labels and the terms they protect
cannot be forged or broken.
Rule (T-LAB) gives a label term C((cid:126)e) a singleton la-
bel type lab∼C((cid:126)e) as long as each component ei ∈ (cid:126)e
has type lab. According to this rule ACL(Alice,Bob) can
be given the type lab∼ACL(Alice,Bob). For that mat-
ter, the expression ((λ x:lab.x) High) can be given the type
lab∼((λ x:lab.x) High); there is no requirement that e be a
value. The rule (T-HIDE) allows a singleton label type like
this one to be subsumed to the type of all labels, lab. Rule
(T-SHOW) does the converse, allowing the type of a label
to be made more precise.
Rule (T-MATCH) checks pattern matching. The ﬁrst
premise conﬁrms that expression e being matched is a la-
bel. The second line of premises describes how to check
each branch of the match. Our patterns differ from pat-
terns in, say, ML in two respects. First, the second premise
on the second line requires Γ,(cid:126)xi : lab (cid:96)c pi : lab, indicat-
ing that patterns in FABLE are allowed to contain variables
that are deﬁned in the context Γ. Second, pattern vari-
ables may occur more than once in a pattern. Both of
these features make it convenient to use pattern matching
to check for term equality. For example, in the expres-
sion let y = Alice in match x with ACL(y,y) ⇒e, the branch
372
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:10:14 UTC from IEEE Xplore.  Restrictions apply. 
policy login(user:string, pw:string) =
let token = match checkpw user pw with
USER(k) ⇒USER(k)
⇒FAILED in
(token, {token}0)
let member(u:lab, a:lab) =
match a with
ACL(u, i) ⇒TRUE
ACL(j, tl) ⇒member u tl
⇒FALSE
policy access(cid:104)k,α(cid:105)(u:lab∼USER(k),
cap:int{u}, acl:lab, data:α{acl}) =
match member u acl with
TRUE ⇒{◦}data
⇒halt#access denied
Figure 3. Enforcing a simple access control policy
e is evaluated only if the runtime value for the label variable
x is ACL(Alice, Alice).
A key feature of (T-MATCH) is the ﬁnal premise on the
second line, which states that the body of each branch ex-
pression ei should be checked in a context including the
assumption e (cid:31) pi, which states that e matches pattern pi.
This assumption can be used to reﬁne type information dur-
ing checking (similar to typecase [19]) using the rule (T-
CONV), which we illustrate shortly. (T-MATCH) also re-
quires that variables bound by patterns do not escape their
scope by appearing in the ﬁnal type of the match; this is
ensured by the second premise, Γ (cid:96) t, which conﬁrms t is
well formed in the top-level environment (i.e., one not in-
cluding pattern-bound variables). For simplicity we require
a default case in pattern-matching expressions:
the third
premise requires the last pattern to be a single variable x
that does not occur in Γ.
Rule (T-UNLAB) types an unlabeling operation. Given
an expression e with type t{e(cid:48)}, the unlabeling of e strips off
the label on the type to produce an expression with type t.
Conversely, (T-RELAB) adds a label e(cid:48) to the type of e. The
pol-index on these rules indicates that both operations are
only admissible in policy terms. This index is introduced by
(T-POL) when checking the body of a bracketed term ([e]).
For example, given expression e ≡ λ x:int{Public}.([{◦}x]),
we have · (cid:96)app e : int{Public} → int since {◦}x will be typed
with index pol by (T-POL).
Rule (T-CONV) allows e to be given type t(cid:48) assuming it
can given type t where t and t(cid:48) are convertible, written Γ (cid:96)
t ∼= t(cid:48). Rules (TE-ID) and (TE-SYM) deﬁne convertibility
to be reﬂexive and symmetric. Rule (TE-CTX) structurally
extends convertibility using type contexts T . The syntax
T · t denotes the application of context T to a type t which
deﬁnes the type that results from replacing the occurrence
of the hole • in T with t. For example, if T is the context
•{C}, then T · int is the type int{C}. (Of course, rule (TE-
CTX) can be applied several times to relate larger types.)
The most interesting rules are (TE-REFINE) and (TE-
REDUCE), which consider types that contain labels (con-
structed by applying context L to an expression e). Rule
(TE-REFINE) allows two structurally similar types to be
considered equal if their embedded expressions e and p
have been equated by pattern matching, recorded as the con-
straint e (cid:31) p by (T-MATCH). To see how this would be
used, consider the following example:
match tok with USER(k) ⇒access tok cap
let tok,cap = login "Joe" "xyz" in
⇒halt
We give the login function the type string →string →
(l:lab ×int{l}). The type of access (deﬁned in Figure 3) is
(u:lab∼USER(k)) →int{u} →t. We type check access tok
using rule (T-APP), which requires that the function’s pa-
rameter and its formal argument have the same type t.
However, here tok has type lab while access expects type
lab∼USER(k).
Since the call to access occurs in the
ﬁrst branch of the match, the context includes the reﬁne-
ment tok (cid:31) USER(k) due to (T-MATCH). From (T-SHOW)
we can give tok type lab∼tok, and by applying (TE-
REFINE) we have lab∼tok ∼= lab∼USER(k) and so tok
can be given type lab∼USER(k) as required. Similarly, for
access tok cap, we can check that the type int{tok} of cap is
convertible with int{USER(k)} in the presence of the same
assumption.
Rule (TE-REDUCE) allows FABLE types to be consid-
ered convertible if the expression component of one is re-
ducible to the expression component of the other [2]; re-
duction e c(cid:32) e(cid:48) is deﬁned shortly in Figure 4. For ex-
ample, we have · (cid:96) int{(λ x:lab.x) Low} ∼= int{Low} since
(λ x:lab.x) Low c(cid:32) Low. One complication is that type-level
expressions may contain free variables. For example, sup-
pose we wanted to show y : lab (cid:96) int{(λ x:lab.x) y} ∼= int{y}.
It seems intuitive that these types should be considered con-
vertible, but we do not have that (λ x:lab.x) y c(cid:32) y because
y is not a value. To handle this case, the rule permits two
types to be convertible if, for every well-typed substitution
σ of the free variables of e1, σ(e1) c(cid:32) σ(e2). This captures
the idea that the precise value of y is immaterial—all reduc-
tions on well-typed substitutions of y would reduce to the
value that was substituted for y.
Satisfying this obligation by exhaustively considering all
possible substitutions is obviously intractable. Additionally,
we have no guarantee that an expression appearing in a type
will converge to a value. Thus, type checking in FABLE,
as presented here, is undecidable. This is not uncommon in
a dependent type system; e.g., type checking in Cayenne is
undecidable [3]. However, other dependently typed systems
impose restrictions on the usage of recursion in type-level
expressions to ensure that type-level terms always termi-
nate [5]. Additionally, there are several possible decision
373
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:10:14 UTC from IEEE Xplore.  Restrictions apply. 
Γ (cid:96)c e : t
Expression e has type t in environment Γ under color c
Environments Γ
Substitutions σ
c