2We assume there may be additional, non-clandestine sensors that are
monitoring the user. Such superﬂuous information is still informative, as the
goal of this work is to detect all wireless sensors monitoring a user.
3Although SNOOPDOG focuses on Wi-Fi-connected devices, we discuss
in Section 9 how such a system could be generalized to other wireless com-
munication standards and protocols.
USENIX Association
30th USENIX Security Symposium    1831
Figure 1: Overview of SnoopDog framework. 1 The SNOOPDOG framework ﬁrst identiﬁes if a user is being monitored based
on the cause-effect relationship between the values of a trusted sensor, e.g., an IMU, and Wi-Fi trafﬁc patterns. It then inspects
the associated packets and identiﬁes the possible devices based on the physical (MAC) address. 2 Finally, SNOOPDOG localizes
each device by leveraging directionality and sensor coverage.
cover trafﬁc can add signiﬁcant and undesirable network over-
head, particularly for a large number of sensors.
3.3 Design Overview
As depicted in Figure 1, SNOOPDOG detects and localizes
a wireless sensor given access to a trusted sensor that can
measure and quantify the ground truth in the modality that we
are trying to detect. SNOOPDOG works in two phases. 1 De-
tecting and identifying snooping wireless sensors. When a
user ﬁrst enters a new space, SNOOPDOG operates in a back-
ground mode to determine whether a user is being monitored
based on the cause-effect relationship between the values
of a trusted sensor (e.g., an on-body IMU) and Wi-Fi trafﬁc
patterns. If the user wants to scan a room immediately, the
background phase may be optionally skipped; alternatively,
the background phase offers a low-overhead solution to bug
detection. If a clandestine sensor is discovered, SNOOPDOG
asks the user to perform a unique perturbation in the space
to further ascertain the presence of a snooping sensor. The
associated packets are then inspected to identify the possible
device type based on the physical (MAC) address. 2 Snoop-
ing sensor localization. In the second phase, SNOOPDOG
utilizes a trial-based localization technique to identify the spe-
ciﬁc placement of the monitoring device. With the appropriate
selection of ground truth sensor, that is, a device which can
semantically capture at least a subset of the events captured
by the snooping device, SNOOPDOG can detect clandestine
wireless sensors of arbitrary modality.
4 Detecting and Identifying Snooping Wire-
less Sensors
This section outlines the ability of SNOOPDOG to detect
whether a clandestine sensor is actively snooping on a user.
We describe the search space for wireless sensors, how to
establish causality, how to generalize across modalities, and
how to understand various sensors’ wireless transmission.
4.1 Searching for Wireless Sensors
The adversary can create a Wi-Fi network and connect the
snooping device to it. As a result, the hidden device can be
present in any of the possible Wi-Fi channels. Even though
SNOOPDOG does not need access to these networks, it still
needs to scan all Wi-Fi frequencies and look for any de-
vices transmitting on them. 2.4 GHz and 5 GHz are the
most popular bands for Wi-Fi networks, and as such, we fo-
cus on those particular bands, even though the SNOOPDOG
scan region can be easily extended to include other ranges.
During discovery, the Wi-Fi Network Interface Card (NIC)
scans through all channels sequentially to ﬁnd available ac-
cess points (APs) [20, 21]. Similarly, SNOOPDOG also scans
through all the Wi-Fi channels in monitor mode, but instead of
looking for available APs, it looks for transmissions in those
channels and creates a list of devices using the MAC address
present in packet headers. As a result, SNOOPDOG does not
need to be connected to any speciﬁc AP to operate. Even if a
network is hidden, its transmissions can still be observed by
monitoring the Wi-Fi channel. Thus SNOOPDOG can detect
devices on any Wi-Fi network. Because devices may transmit
data intermittently, SNOOPDOG continuously scans all Wi-Fi
channels and actively maintains an aggregate set of trafﬁc
data. Once the list of devices has been populated, SNOOP-
DOG then seeks to detect causality between user activity and
data being transmitted from each device.
4.2 Detecting Causality with User Activity
Detecting the cause-effect relationship between the action
of a user in a space and the data captured by a clandestine,
1832    30th USENIX Security Symposium
USENIX Association
WiFiTrafficIMUCausalityDevice IDDevice IDSnoopDog2D Localization2D Localization“Camera”packetMAC AddressDevice DatabaseMonitoring DetectedDevice Info(-0.9, 1.1) (1.2, -10)12wireless sensor requires access to two essential components:
1) a ground truth sensor to capture information about the user
in the space and 2) a representation of the data collected by
the clandestine sensor. While data packets transmitted by
wireless sensors may be encrypted, the header information
is not. This header information provides us with the MAC
address and payload size of each transmitted packet. This data
can be grouped and aggregated for all the packets within a
time window and provide information as to how much data
was transmitted by each device within that period. Given a
ground truth sensor, one can then identify causality between
the ground truth sensor values and the patterns in the volume
of data transmitted by each device in the space. In contrast
to machine learning techniques, a causality approach allows
SNOOPDOG to ﬁnd the cause-effect relationship of arbitrary
modality across any device that is transmitting causal data.
Because we are interested in the causality between two sen-
sors, SNOOPDOG will utilize Granger Causality (described
in Section 2).
4.3 Characterizing a Representative Set of
Snooping Sensors
In order to choose a set of ground truth sensors that can cap-
ture causality across any modality, we focus on generalizing
across a representative set, including cameras, RF, and arbi-
trary sensors that report inferred (as opposed to raw) events.
Visual sensors. Wireless cameras are typically encoded with
a codec that recognizes underlying patterns in the frames
of the video and utilizes this information for compression.
One such codec is H.264 [22]. An encoder ﬁrst encodes the
video using the standard, and a decoder then reconstructs the
original video with minor information loss.
Standard temporal compression algorithms compress the
video with 3 key frame-types, denoted I, P, and B frames. I
frames (Intra-coded picture) hold complete image informa-
tion, whereas P and B frames contain fractional image infor-
mation, i.e., scene differences. As I frames are a complete
image, they do not require any other frames to be decoded.
P frames (Predicted picture) only contain changes in the im-
age from previous frames. The information in a P frame is
combined with the information of the I frame preceding it
to obtain the resulting image. B (Bi-directionally predicted
pictures) frames can construct the image from either direc-
tion using either changes from the I or P frames before them,
changes from I and P frames after them, or interpolation be-
tween the I/P frames before and after them. B frames are most
compressible, followed by P frames, and ﬁnally, I frames.
Hence, with increasing motion in the scene recorded by
an IP camera, there will be an increase in the data that must
be transmitted due to the increase in the number of P and B
frames sent. Camera trafﬁc will increase as the number of
pixels being perturbed in the scene increases; similarly, trafﬁc
will decrease if the scene transitions to a stationary one. As
such, if a human subject were to perform some motion in
the scene, stop for enough time to let the camera trafﬁc settle
down, and then move again, it will result in a unique camera
trafﬁc pattern that corresponds to the user’s motion. This
cause-effect relationship between human motion and camera
trafﬁc can then be used to discover if a wireless IP camera
is present in an occupied space. If there is no relationship
between the camera trafﬁc and user motion, then the camera
is not monitoring the user.
RF sensors. Low cost, off-the-shelf millimeter-wave
(mmWave) RF sensors are available that record the scene in
the form of point-clouds. Recent works [23, 24] have shown
that these point clouds can be used to infer human activity.
However, unlike a camera, a radar device is a point scatterer.
Thus, at any given time, only certain points in the scene reﬂect
back. Hence, with motion in the scene, the number of points
captured in every frame by the sensor (radar) vary consider-
ably. In an empty scene, the number of points captured by
these sensors is fairly constant but varies as subjects move
about the space. If such a sensor live-streams point-cloud data
over Wi-Fi, the payload size will vary over time with changes
in the number of points captured in the scene by the sensor.
Hence, the network trafﬁc will ﬂuctuate with the number of
points that are being captured in the frame. As such, there
exists a cause-effect relationship between the subject’s motion
and the device’s trafﬁc.
Acoustic sensors. Another common type of bug used to
snoop on people is a microphone. With the growth in per-
sonal home assistant devices such as the Google Home or
Amazon Echo (Alexa) [25], it is trivial for someone to buy
and install such listening devices in their homes. Although
they are typically triggered by a keyphrase such as “Okay
Google" or “Alexa", there are “Drop In" features that facili-
tate remote snooping. An adversary can also change the wake
word of these devices to enable recording conversations of
interest. Due to their compact form factor, they can be eas-
ily hidden. In such cases, these devices will also work like
event-based clandestine sensors. Hence, services like SNOOP-
DOG that monitor trafﬁc for change in network patterns and
either correlate them with another sensor recording of the
same modality or ﬁnd a cause-effect relationship with the
ground-truth can detect their presence using network sniff-
ing [26,27]. Here, instead of the IMU, we use the microphone
on the user’s smartphone as the trusted ground-truth sensor.
In section 10-Q4, we discuss why it is challenging to detect
and localize acoustic sensors that are continuously streaming.
Wireless sensors that encode inferred events. Motion sen-
sors do not transmit a continuous stream of information. Most
off-the-shelf motion sensors are passive infrared (PIR) based.
They measure the infrared (IR) light from objects in their ﬁeld
of view. Any change in this incoming IR light is inferred as
motion. Instead of continuously transmitting, they send data
to their cloud service for processing once triggered by motion.
Thus, if a user moves around the room, stops, and moves again,
USENIX Association
30th USENIX Security Symposium    1833
there will be a unique cause-effect relationship between user
motion and device trafﬁc. Additionally, a camera can be pro-
grammed to continuously record video but only upload when
a certain event occurs in the scene. These cameras behave like
motion sensors and hence can be treated similarly. Virtual
assistants also wait for trigger words to transmit a request to
the associated cloud service, e.g., a user uttering the device
name to activate it [25].
4.4 Device Identiﬁcation via MAC Address
A MAC address is a universally unique ID assigned to the
Network Interface Controller (NIC) for every networked de-
vice. It consists of 48 bits which are typically represented as
12 hexadecimal characters, i.e., xx:xx:xx:xx:xx:xx. The
ﬁrst 24 bits are the OUI (Organizationally Unique Identiﬁer),
which can uniquely identify a manufacturer or a vendor.
The MAC address of the sender and the receiver are con-
tained within each exchanged Wi-Fi packet. More importantly,
this information is not encrypted. As a result, SNOOPDOG
can obtain the MAC address to look up the device vendor.
While we acknowledge that the MAC address can be spoofed,
this technique can still prove useful in the many cases where
the adversary is a non-expert and thus has not spoofed the
MAC address. Trafﬁc ﬁngerprinting techniques [28–34] can
also be used to overcome the shortcomings of MAC-based
identiﬁcation. Additionally, in case of MAC randomization or
MAC spooﬁng, techniques such as the ones described in [35]
can be used to ﬁrst track the trafﬁc from a particular device
and then perform cause-effect analysis on it.
SNOOPDOG contains a database with names and MAC
addresses of known vendors that manufacture surveillance
devices. As SNOOPDOG detects more sensors, we add them
to the database.
5 Snooping Sensor Localization
Algorithm 1 details the trial-based localization used by
SNOOPDOG to infer sensor location. In the case of multiple
active sensors, this process can be repeated for each device.
Setup. Localization requires two input parameters: a region-
of-interest to search over, and the snooping sensor’s MAC
address. To deﬁne the region-of-interest, we leverage Dead
Reckoning [36–38] for indoor user localization. A dead reck-
oning mobile application [36] on a user’s phone instructs the
user to walk the perimeter and capture the region boundary.
Aside from identifying Granger causality in trafﬁc patterns,
the MAC address is also used to ensure an appropriate trial
method for localization (e.g., via techniques discussed in Sec-
tion 4.4 and [8]).
Algorithm 1: LOCALIZE identiﬁes the location of
a particular snooping sensor in a deﬁned region-of-
interest
Input: The sensor’s MAC address
The region of interest
Output: The sensor’s location within the region
1 BBox ← /0
2 traversing ← BeginTraversingRegion(region)
3 while traversing do
4
5
6
7
userloc ← DeadReckoningLocation()
inView ← GrangerCausality(MAC)
if inView then
BBox ← BBox∪{userloc}
traversing ← SparseBBox(BBox)
8
9 Loop
10
MLE ←
MostLikelySensorLocation(region,BBox)
if SufﬁcientBBox(region, BBox) then
return (BBox,MLE)
trialRegion = GenerateTrial(MLE,BBox)
inView = PerformTrial(trialRegion)
if inView then
BBox ← trialRegion
else
BBox ← BBox\trialRegion
11
12
13
14
15
16
17
18
5.1
Identifying Sensor Coverage
Although the malicious sensor is known to monitor some-
where within the region-of-interest, it is unlikely to cover the
entire region. Lines (1)-(8) narrow down the full search space
into a bounding box BBox of the sensor’s ﬁeld-of-view. To
begin, a user is instructed to traverse the region (line 2). At
regular time intervals, the user’s location is captured, and the
snooping sensor’s trafﬁc is monitored for causality. Using
the Granger Causality technique described in Section 4, a
particular location is identiﬁed as either within or outside
sensor coverage. This process continues until the bounding
box is determined to have sufﬁcient density for performing
trial-based localization, depending on the coverage area size.
The remainder of Algorithm 1 (lines 9-18) reduces the
BBox scope of sensor coverage via directional elimination.
Repeated trials are performed to speciﬁcally target high-
probability origins in order to either identify or eliminate
likely sensor locations. Each round begins by solving for the
most likely origin MLE for the sensor (line 10). While this
process could be performed randomly, utilizing physical in-