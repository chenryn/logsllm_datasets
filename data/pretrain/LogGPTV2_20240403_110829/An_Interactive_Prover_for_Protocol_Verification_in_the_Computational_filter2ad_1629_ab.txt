### Contributions and Implementation

Our third contribution is the development of the interactive prover SQUIRREL [50], which enables reasoning about protocols specified in the applied pi-calculus using our framework. By leveraging basic automation techniques from first-order logic, we have conducted several case studies with this tool. These results, detailed in Section VII, encompass a range of cryptographic primitives (hashes, signatures, Diffie-Hellman exponentiation, encryption) and security properties (authentication, strong secrecy, unlinkability). Although not our primary objective, some of these proofs are pioneering.

### Related Work

We have previously discussed the inherent limitations of symbolic models. Here, we focus on tools that provide guarantees in the computational model. Several such systems exist, each based on different approaches:

- **CRYPTOVERIF [21]**: Proofs are based on high-level game transformations.
- **EASYCRYPT [13]**: Built on a general-purpose probabilistic relational Hoare logic, suitable for formalizing most pen-and-paper cryptographic proofs.
- **CRYPTHOL [17]**: Embeds the computational model in the proof assistant Isabelle/HOL.
- **F* [19]**: A general-purpose program verification framework that can provide computational security guarantees via external arguments.

These tools can be compared on various criteria [12]. We highlight a few key differences with our tool:

- **Protocol Specification**: Like CRYPTOVERIF, our protocol specifications are given in the applied pi-calculus, but our language is less detailed and does not link to implementations. The strongest tools for verifying implementations remain EASYCRYPT and, primarily, F*.
- **Security Bounds**: Unlike EASYCRYPT and CRYPTOVERIF, we only provide asymptotic security bounds. Our approach abstracts away quantitative aspects such as probabilities and the security parameter, making our tool as user-friendly as symbolic verification frameworks. In contrast, EASYCRYPT users often need to perform complex probabilistic reasoning, leading to lengthy proofs. CRYPTOVERIF automates many of these aspects.
- **Automation Level**: The current level of automation in our tool lies between EASYCRYPT and CRYPTOVERIF.

The most significant difference is in the proof methodology:
- **CRYPTOVERIF** relies on game transformations.
- **EASYCRYPT** performs Hoare-style proofs of programs.
- **SQUIRREL** reasons over execution traces of protocols, similar to TAMARIN's backward reachability analysis, driven by tactics like unforgeability. A detailed comparison with EASYCRYPT and CRYPTOVERIF, based on the analysis of the Basic Hash protocol, is provided in Appendix E.

### Overview

In this section, we provide an overview of our framework and tool using the Basic Hash protocol as a running example. The SQUIRREL prover and our case studies are available in [50].

#### Example 1: Basic Hash Protocol

The Basic Hash protocol, as described in [23], is an RFID protocol involving multiple tags and readers. Each tag stores a secret key that is never updated, and the readers have access to a shared database containing all these keys. The protocol is as follows:

\[ T \rightarrow R : \langle n, H(n, \text{key}) \rangle \]

Here, \( n \) is a fresh name, and \( \text{key} \) is the secret key. When receiving a message, the reader checks if it is a pair where the second component is a hash of the first component using one of the keys from the database.

```plaintext
hash H
abstract ok : message
abstract error : message
name key : index → message
channel c

process tag(i, j: index) =
    new n; out(c, ⟨n, H(n, key[i])⟩)

process reader(j: index) =
    in(c, x);
    try find i such that snd(x) = H(fst(x), key[i])
        in out(c, ok)
        else out(c, error)

system (!j R: reader(j) | !i !j T: tag(i, j))
```

Listing 1 shows a formal description of the Basic Hash protocol in SQUIRREL. This scenario features multiple reader sessions with access to the database and multiple tags, each capable of participating in multiple sessions. The `try find` instruction encodes the database lookup performed by the reader.

### Instantiating the Framework

To analyze this protocol, we consider a set of actions representing each step:
- \( T[i, j] \): Action performed by the \( j \)-th session of tag \( i \).
- \( R[j, i] \): Action of a reader session \( j \) when it finds a value \( i \) for which the second component of its input is a hash of the first component with \( \text{key}[i] \).
- \( R1[j] \): Action of a reader session \( j \) when no such \( i \) can be found.

Using the user syntax, we express an authentication property for the Basic Hash protocol:

```plaintext
goal auth :
    forall (i: index, j: index),
    cond@R(j, i) ⇒
    exists (j': index), T(i, j') < R(j, i)
    && fst(input@R(j, i)) = fst(output@T(i, j'))
    && snd(input@R(j, i)) = snd(output@T(i, j'))
```

Here, `cond@R[j, i]` is a macro representing the executability condition of action \( R[j, i] \), where the reader recognizes a valid input message with respect to some key \( \text{key}[i] \). The authentication goal states that whenever this condition holds, there must be some session \( j' \) of tag \( i \) that has been executed before \( R[j, i] \), and the output of the tag’s action matches the input of the reader’s action.

This authentication goal can be proven using a sequence of four tactics:

```plaintext
simpl. expand cond@R(j, i). euf M0. exists j1.
```

- **First Tactic**: Introduces variables \( i \) and \( j \) and the assumption \( \text{cond@R}[j, i] \) (identified by \( M0 \)).
- **Second Tactic**: Expands the macro into its meaning, i.e., \( \text{snd(input@R[j, i])} = H(\text{fst(input@R[j, i])}, \text{key}[i]) \).
- **Third Tactic**: Uses the EUF-CMA assumption, stating that if \( \text{snd(input@R[j, i])} \) is a valid hash of \( \text{fst(input@R[j, i])} \), then \( \text{fst(input@R[j, i])} \) must be equal to some \( m \) such that \( H(m, \text{key}[i]) \) appears in \( \text{snd(input@R[j, i])} \) or \( \text{fst(input@R[j, i])} \). Since \( \text{input@R[j, i]} \) refers to all messages outputted so far, the only hashed messages outputted by the protocol with the key \( \text{key}[i] \) are the names \( n[i, j] \). Therefore, we deduce that there exists a tag’s session \( j1 \) occurring before the action \( R[j, i] \) such that \( n[i, j1] = \text{fst(input@R[j, i])} \). We conclude by instantiating the existential quantification over \( j' \) by \( j1 \).

Our framework also supports proving equivalence properties. For instance, we can prove the unlinkability property for the Basic Hash protocol, showing that a scenario where a tag with identity \( i \) can play many sessions is indistinguishable from a scenario where each tag with identity \( i \) can play only one session. This is done using bi-processes with diff terms, as in PROVERIF [22] or TAMARIN [16], and replacing every \( \text{key}[i] \) with \( \text{diff(key}[i], \text{key}'[i, j]) \). The proof proceeds by induction, showing that indistinguishability holds at any point in the trace, assuming it holds for previous points.

### Modeling Protocols – Syntax

In this section, we introduce the syntax of our meta-logic, an extension of the base logic of [11] with timestamps, indices, and macros, and describe how to use it to model protocols. We illustrate our concepts using the Basic Hash protocol.

#### Meta-Logic

Syntactically, our meta-logic is a many-sorted first-order logic. Terms (meta-terms) are of three sorts:
- **Message**: Represents bitstrings manipulated and exchanged by protocol participants.
- **Timestamp**: Represents time points in an execution trace.
- **Index**: Identifies unbounded collections of objects, such as sessions or database items.

The syntax of meta-terms and meta-formulas is given in Fig. 1. We assume three infinite sets of variables: \( X \) for message variables, \( I \) for index variables, and \( T \) for timestamp variables.

**Example 2**: Function symbols representing cryptographic primitives have an index arity of 0 and a message arity depending on the primitive. For instance, \( H \) (keyed hash) has a message arity of 2, \( \langle \cdot, \cdot \rangle \) (concatenation) has a message arity of 2, and \( \text{fst} \) and \( \text{snd} \) (projections) have a message arity of 1.

**Example 3**: To model the Basic Hash protocol, we use two names: \( \text{key} \) (index arity 1) and \( n \) (index arity 2). We also use three indexed action symbols: \( aT \) and \( aR \) (index arity 2) and \( aR1 \) (index arity 1).

**Definition 1**: Given a meta-logic signature \( \Sigma = (F, N, A) \) and sets of variables \( X, I, \) and \( T \), we define the syntax of meta-terms and meta-formulas. For any meta-term \( t \), we denote the set of subterms as \( \text{st}(t) \) and the free variables as \( \text{fv}(t) \).

**Macros**: Key components include message macros (e.g., `input@T`, `output@T`, `frame@T`) and boolean macros (e.g., `cond@T`, `exec@T`), which refer to protocol executions and conditions.

#### Protocols as Sets of Actions

We model a protocol as a finite set of actions, each representing a basic step where the attacker provides an input, a condition is checked, and an output is emitted.

**Definition 2**: An action \( a[i1, \ldots, ik].(\phi, o) \) is defined by an action symbol \( a \) of index arity \( k \), distinct indices \( i1, \ldots, ik \), a meta-logic formula \( \phi \), and a meta-logic term \( o \) of sort message. The formula \( \phi \) is the condition, and \( o \) is the output.

**Definition 3**: A protocol \( P = (PA, <) \) over a finite set of action symbols \( A \) is a finite set of actions equipped with a partial order \( < \) over terms of the form \( a[(\textbf{i})] \). The order is insensitive to specific index variables and ensures that actions only refer to information from previously executed actions.