        Add $500 to account B
        $1,000 ($500 in A, $500 in B)
         Stage 4
        Add $500 to account B
        $1,500 ($500 in A, $1,000 in B)
         Stage 5
        Deduct $500 from account A
        $1,000 ($0 in A, $1,000 in B)
         Stage 6
        Deduct $500 from account A
        $1,000 ($0 in A, $1,000 in B)
    Note that, in this scenario, you end up with more money than you started with. Instead of having $500 in your accounts, you now own a total of $1,000. You made an additional $500 appear out of thin air by exploiting a race condition vulnerability!
    请注意，在这种情况下，您最终会比开始时拥有更多的钱。您现在总共拥有$1,000，而不是账户中的$500。通过利用竞争条件漏洞，您显然从虚无中获得了额外的$500！
    Although race conditions are often associated with financial sites, attackers can use them in other situations too, such as to rig online voting systems. Let’s say an online voting system performs three subtasks to process an online vote. First, it checks if the user has already voted. Then, it adds a vote to the vote count of the selected candidate. Finally, it records that that user has voted to prevent them from casting a vote again.
    尽管竞争条件通常与金融网站相关联，但攻击者也可以在其他情况下使用它们，比如操纵在线投票系统。假设在线投票系统执行三个子任务来处理在线投票。首先，它检查用户是否已经投票。然后，它将选定候选人的投票添加到投票计数中。最后，它记录该用户已投票，以防止他们再次投票。
    Say you try to cast a vote for candidate A twice, simultaneously. Ideally, the application should reject the second vote, following the procedure in
     Table 12-5
    .
    如果尝试同时投票两次给候选人A，理想情况下，应用程序应拒绝第二次投票，遵循表12-5的程序。
       Table 12-5
      : Normal Execution of Two Threads Operating on the Same User’s Votes
      表格12-5：两个线程正常操作同一用户的投票。
         Thread 1
         Thread 2
         Votes for candidate A
         Stage 1
        100
         Stage 2
        Check whether the user has already voted (they haven’t)
        100
         Stage 3
        Increase candidate A’s vote count
        101
         Stage 4
        Mark the user as Already Voted
        101
         Stage 5
        Check whether the user has already voted (they have)
        101
         Stage 6
        Reject the user’s vote
        101
    But if the voting application has a race condition vulnerability, execution might turn into the scenario shown in
     Table 12-6
    , which gives the users the power to cast potentially unlimited votes.
    但如果投票应用程序存在竞争条件漏洞，执行可能会变成表12-6中显示的情况，这将赋予用户投票的潜在无限权利。
       Table 12-6
      : User Able to Vote Twice by Abusing a Race Condition
      表格12-6: 用户利用竞争条件投票两次
         Thread 1
         Thread 2
         Votes for candidate A
         Stage 1
        100
         Stage 2
        Check whether the user has already voted (they haven’t)
        100
         Stage 3
        Check whether the user has already voted (they haven’t)
        100
         Stage 4
        Increase candidate A’s vote count
        101
         Stage 5
        Increase candidate A’s vote count
        102
         Stage 6
        Mark the user as Already Voted
        102
         Stage 7
        Mark the user as Already Voted
        102
    An attacker can follow this procedure to fire two, ten, or even hundreds of requests at once, and then see which vote requests get processed before the user is marked as Already Voted.
    攻击者可以按照以下步骤一次性发送两个、十个或甚至数百个请求，然后观察在用户被标记为"已投票"之前哪个请求被处理。
    Most race condition vulnerabilities are exploited to manipulate money, gift card credits, votes, social media likes, and so on. But race conditions can also be used to bypass access control or trigger other vulnerabilities. You can read about some real-life race condition vulnerabilities on the HackerOne Hacktivity feed (
     https://hackerone.com/hacktivity?querystring=race%20condition/
    ).
    大多数竞态条件漏洞被用于操纵金钱、礼品卡积分、选票、社交媒体点赞等。但竞态条件也可以用于绕过访问控制或触发其他漏洞。您可以在HackerOne Hacktivity Feed（https://hackerone.com/hacktivity?querystring=race%20condition/）上阅读一些实际的竞态条件漏洞。
    Prevention
    The key to preventing race conditions is to protect resources during execution by using a method of
     synchronization
    , or mechanisms that ensure threads using the same resources don’t execute simultaneously.
    避免竞态条件的关键是通过使用同步方法或机制来保护执行期间的资源，确保使用相同资源的线程不会同时执行。
    Resource locks are one of these mechanisms. They block other threads from operating on the same resource by
     locking
    a resource. In the bank transfer example, thread 1 could lock the balance of accounts A and B before modifying them so that thread 2 would have to wait for it to finish before accessing the resources.
    资源锁定是其中的一种机制。通过锁定资源，它们阻止其他线程在同一资源上操作。在银行转账示例中，线程1可以锁定帐户A和B的余额，然后再修改它们，这样线程2就必须等待它完成后才能访问资源。
    Most programming languages that have concurrency abilities also have some sort of synchronization functionality built in. You have to be aware of the concurrency issues in your applications and apply synchronization measures accordingly. Beyond synchronization, following secure coding practices, like the principle of least privilege, can prevent race conditions from turning into more severe security issues.
    大多数具有并发能力的编程语言也内置了某种形式的同步功能。您必须了解应用程序中的并发问题，并相应地应用同步措施。除同步外，遵循安全编码实践，如最小特权原则，可以防止竞争条件转化为更严重的安全问题。
    The
     principle of least privilege
    means that applications and processes should be granted only the privileges they need to complete their tasks. For example, when an application requires only read access to a file, it should not be granted any write or execute permissions. You should grant applications precisely the permissions that they need instead. This lowers the risks of complete system compromise during an attack.
    “最小权限原则”意味着应该只授予应用程序和进程完成其任务所需的最低权限。例如，当一个应用程序只需要读取文件时，就不应该授予它任何写入或执行的权限。你应该精确地授予应用程序所需的权限，减少攻击时完整系统被攻破的风险。”
    Hunting for Race Conditions
    Hunting for race conditions is simple. But often it involves an element of luck. By following these steps, you can make sure that you maximize your chances of success.
    寻找竞态条件很简单。但通常涉及一定程度的运气。通过遵循以下步骤，您可以确保最大限度地提高成功的机会。
    Step 1: Find Features Prone to Race Conditions
    Attackers use race conditions to subvert access controls. In theory, any application whose sensitive actions rely on access-control mechanisms could be vulnerable.
    攻击者使用竞态条件来破坏访问控制。理论上，任何依赖访问控制机制的敏感操作的应用程序都可能存在漏洞。
    Most of the time, race conditions occur in features that deal with numbers, such as online voting, online gaming scores, bank transfers, e-commerce payments, and gift card balances. Look for these features in an application and take note of the request involved in updating these numbers.
    大多数时间，竞态条件发生在涉及数字的特性中，比如在线投票、在线游戏得分、银行转账、电子商务支付和礼品卡余额等。在应用程序中寻找这些特性，并注意与更新这些数字有关的请求。
    For example, let’s say that, in your proxy, you’ve spotted the request used to transfer money from your banking site. You should copy this request to use for testing. In Burp Suite, you can copy a request by right-clicking it and selecting
     Copy as curl command
    .
    例如，假设在您的代理中，您已经发现了用于从银行网站转账的请求。您应该复制此请求以供测试使用。在Burp Suite中，您可以通过右键单击请求并选择“复制为curl命令”来复制请求。
    Step 2: Send Simultaneous Requests
    You can then test for and exploit race conditions in the target by sending multiple requests to the server simultaneously.
    可以同时向服务器发送多个请求，从而测试和利用目标中的竞态条件。
    For example, if you have $3,000 in your bank account and want to see if you can transfer more money than you have, you can simultaneously send multiple requests for transfer to the server via the
     curl
    command. If you’ve copied the command from Burp, you can simply paste the command into your terminal multiple times and insert a
     &
    character between each one. In the Linux terminal, the
     &
    character is used to execute multiple commands simultaneously in the background:
    例如，如果您在银行帐户中有3,000美元，并想查看是否可以转移比您拥有的资金更多的资金，则可以通过curl命令向服务器同时发送多个转移请求。如果您已从Burp复制了命令，则可以将命令简单粘贴到终端中多次，并在每个命令之间插入&字符。在Linux终端中，&字符用于同时在后台执行多个命令。
curl (transfer $3000) & curl (transfer $3000) & curl (transfer $3000)
& curl (transfer $3000) & curl (transfer $3000) & curl (transfer $3000)
    Be sure to test for operations that should be allowed once, but not multiple times! For example, if you have a bank account balance of $3,000, testing to transfer $5,000 is pointless, because no single request would be allowed. But testing a transfer of $10 multiple times is also pointless, since you should be able to do that even without a race condition. The key is to test the application’s limits by executing operations that should not be repeatable.
    一定要测试那些仅应允许执行一次而非多次的操作。例如，如果你的银行账户余额为3000美元，测试转账5000美元是无意义的，因为没有单个请求能够被允许。但是，多次测试转账10美元也是无意义的，因为即使没有竞争条件，你也应该能够这样做。关键在于通过执行不应该可重复进行的操作来测试应用程序的极限。
    Step 3: Check the Results
    Check if your attack has succeeded. In our example, if your destination account ends up with more than a $3,000 addition after the simultaneous requests, your attack has succeeded, and you can determine that a race condition exists on the transfer balance endpoint.
    检查您的攻击是否成功。在我们的示例中，如果您的目标帐户在同时请求之后增加了超过$3,000，那么您的攻击已成功，您可以确定在传输余额终点存在竞争条件。
    Note that whether your attack succeeds depends on the server’s process-scheduling algorithm, which is a matter of luck. However, the more requests you send within a short time frame, the more likely your attack will succeed. Also, many tests for race conditions won’t succeed the first time, so it’s a good idea to try a few more times before giving up.
    请注意，您的攻击是否成功取决于服务器的进程调度算法，这是一种运气。然而，在短时间内发送更多请求，攻击成功的可能性就越大。另外，许多竞态条件测试第一次可能不会成功，因此建议在放弃之前尝试几次。
    Step 4: Create a Proof of Concept
    Once you have found a race condition, you will need to provide proof of the vulnerability in your report. The best way to do this is to lay out the steps needed to exploit the vulnerability. For example, you can lay out the exploitation steps like so:
    一旦您发现了竞争条件，您需要在报告中提供漏洞的证明。最好的方法是列出利用漏洞所需的步骤。例如，您可以像这样列出利用步骤：
     Create an account with a $3,000 balance and another one with zero balance. The account with $3,000 will be the source account for our transfers, and the one with zero balance will be the destination.
     Execute this command:
     curl (transfer $3000) & curl (transfer $3000) & curl (transfer $3000)
& curl (transfer $3000) & curl (transfer $3000) & curl (transfer $3000)
      This will attempt to transfer $3,000 to another account multiple times simultaneously.
      这将尝试同时多次将 $3,000 转移到另一个帐户。
     You should see more than $3,000 in the destination account. Reverse the transfer and try the attack a few more times if you don’t see more than $3,000 in the destination account.
    Since the success of a race condition attack depends on luck, make sure you include instructions to try again if the first test fails. If the vulnerability exists, the attack should succeed eventually after a few tries.
    鉴于竞态条件攻击的成功取决于运气，请确保包括再次尝试的指令，如果第一次测试失败。如果存在漏洞，则经过几次尝试后攻击最终应该会成功。
    Escalating Race Conditions
    The severity of race conditions depends on the impacted functionality. When determining the impact of a specific race condition, pay attention to how much an attacker can potentially gain in terms of monetary reward or social influence.
    竞争条件的严重性取决于受影响的功能。在确定特定竞争条件的影响时，要注意攻击者在货币奖励或社交影响方面可能获得的利益有多大。
    For example, if a race condition is found on a critical functionality like cash withdrawal, fund transfer, or credit card payment, the vulnerability could lead to infinite financial gain for the attacker. Prove the impact of a race condition and articulate what attackers will be able to achieve in your report.
    例如，如果发现了一个竞争条件（race condition），并且它影响到现金提取、资金转移或信用卡支付这样的关键功能，那么这个漏洞可能会给攻击者带来无限的财务利益。在报告中证明竞争条件的影响，并明确攻击者将能够实现什么。
    Finding Your First Race Condition!
    Now you’re ready to find your first race condition. Follow these steps to manipulate web applications using this neat technique:
    现在你已经准备好了找到你的第一个竞争条件。按照以下步骤使用这种巧妙的技巧操作网页应用程序：
     Spot the features prone to race conditions in the target application and copy the corresponding requests.
     Send multiple of these critical requests to the server simultaneously. You should craft requests that should be allowed once but not allowed multiple times.
     Check the results to see if your attack has succeeded. And try to execute the attack multiple times to maximize the chance of success.
     Consider the impact of the race condition you just found.
     Draft up your first race condition report!
13
      Server-Side Request Forgery
     Server-side request forgery (
     SSRF)
    is a vulnerability that lets an attacker send requests on behalf of a server. During an SSRF, attackers forge the request signatures of the vulnerable server, allowing them to assume a privileged position on a network, bypass firewall controls, and gain access to internal services.
    服务器端请求伪造（SSRF）是一种漏洞，能让攻击者代表服务器发送请求。在SSRF期间，攻击者伪造易受攻击的服务器的请求签名，使他们能够在网络上扮演特权角色，绕过防火墙控制，并访问内部服务。
    In this chapter, we’ll cover how SSRF works, how to bypass common protections for it, and how to escalate the vulnerability when you find one.
    在本章中，我们将介绍SSRF的工作原理，如何绕过常见的保护措施，以及在发现漏洞时如何升级漏洞。
    Mechanisms
    SSRF vulnerabilities occur when an attacker finds a way to send requests as a trusted server in the target’s network. Imagine a public-facing web server on
     example.com
    ’s network named
     public.example.com
    . This server hosts a proxy service, located at
     public.example.com/proxy
    , that fetches the web page specified
    in the
     url
    parameter and displays it back to the user. For example, when the user accesses the following URL, the web application would display the
     google.com
    home page:
    SSRF漏洞是当攻击者找到一种方式以目标网络中的可信服务器发送请求时发生的。想象一下，example.com网络上有一个公共面向Web的服务器，名为public.example.com。该服务器提供一个代理服务，位于public.example.com/proxy处，可以获取url参数中指定的Web页面并将其显示给用户。例如，当用户访问以下URL时，Web应用程序将显示google.com主页：
https://public.example.com/proxy?url=https://google.com
    Now let’s say
     admin.example.com
    is an internal server on the network hosting an admin panel. To ensure that only employees can access the panel, administrators set up access controls to keep it from being reached via the internet. Only machines with a valid internal IP, like an employee workstation, can access the panel.
    现在假设admin.example.com是网络上托管管理面板的内部服务器。为确保只有员工可以访问该面板，管理员设置了访问控制，以防止从互联网访问该面板。只有具有有效内部IP地址（如员工工作站）的计算机才能访问该面板。
    Now, what if a regular user accesses the following URL?
    现在，如果普通用户访问以下网址会怎样？
https://public.example.com/proxy?url=https://admin.example.com
    Here, the
     url
    parameter is set to the URL of the internal admin panel. With no SSRF protection mechanism in place, the web application would display the admin panel to the user, because the request to the admin panel is coming from the web server,
     public.example.com
    , a trusted machine on the network.
    在这里，URL参数设置为内部管理面板的URL。如果没有SSRF保护机制，Web应用程序将向用户显示管理面板，因为对管理面板的请求来自于网络中被信任的机器public.example.com的Web服务器。
    Through SSRF, servers accept unauthorized requests that firewall controls would normally block, like fetching the admin panel from a non-company machine. Often, the protection that exists on the network perimeter, between public-facing web servers and internet machines, does not exist between machines on the trusted network. Therefore, the protection that hides the admin panel from the internet doesn’t apply to requests sent between the web server and the admin panel server.
    通过SSRF，服务器接受未经授权的请求，这些请求通常会被防火墙控制所拦截，例如从非公司机器获取管理员面板。通常，位于公共面向的Web服务器和互联网机器之间的网络边缘上存在的保护并不存在于信任网络中的机器之间。因此，将管理员面板从互联网上隐藏的保护措施不适用于Web服务器之间和管理员面板服务器之间发送的请求。
    By forging requests from trusted servers, an attacker can pivot into an organization’s internal network and conduct all kinds of malicious activities. Depending on the permissions given to the vulnerable internet-facing server, an attacker might be able to read sensitive files, make internal API calls, and access internal services.
    通过伪造来自受信任服务器的请求，攻击者可以在组织的内部网络中转并进行各种恶意活动。根据易受攻击的面向互联网的服务器获得的权限，攻击者可能能够读取敏感文件、进行内部API调用以及访问内部服务。
    SSRF vulnerabilities have two types: regular SSRF and blind SSRF. The mechanisms behind both are the same: each exploits the trust between machines on the same network. The only difference is that in a blind SSRF, the attacker does not receive feedback from the server via an HTTP response or an error message. For instance, in the earlier example, we’d know the SSRF worked if we see
     admin.example.com
    displayed. But in a blind SSRF, the forged request executes without any confirmation sent to the attacker.