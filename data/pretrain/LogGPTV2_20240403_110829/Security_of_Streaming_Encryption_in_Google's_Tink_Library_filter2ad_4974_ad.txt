𝛱(ℬ) is 0 then the Dec oracle will always return
queries. As a result, if the challenge bit of game Gae
false. Hence ℬ perfectly simulates game Advnoae2
STREAM[𝛱](𝒜), and thus
Advae
𝛱(ℬ) = Advnoae2
STREAM[𝛱](𝒜)
as claimed.
Discussion. In STREAM[𝛱], a nonce in the conventional AE scheme 𝛱 is formed from a base
nonce 𝑁 of STREAM[𝛱], a counter 𝑖 (to indicate the position of the message segment within
the segmented message), and a bit 𝑎 (to indicate whether the segment is the last one). Because
the range of the counter 𝑖 limits the size of segmented messages, a practical encoding choice would
be to use 4 bytes for 𝑖 and one byte for 𝑎, as in Tink’s implementation. This approach is fine if
(i) the scheme 𝛱 supports somewhat long nonces—for example OCB [21] allows nonces to be up
to 15 bytes, and (ii) one implements nonces as counters. However, the most popular conventional
11
AE scheme, GCM [24], dictates that its nonces must be exactly 12-byte long, leaving only 7-byte
space for nonces of STREAM[GCM]. In addition, there are situations when it is desirable to use
random nonces:
– Routers are booted frequently, and its counters will therefore be reset often. Implementing
nonces as counters in this environment will result in lots of nonce repetition.
– Synchronizing counters among busy distributed servers might be impractical.
Thus the STREAM construction, while simple and elegant, may be unusable in some settings. In
fact, the implementation in Tink library does not closely follow the STREAM paradigm.
4.2 Online AE in Tink Library
The scheme. Tink’s streaming encryption deviates from the syntax of online AE in several ways:
– First, under Tink’s streaming encryption, there is no segmented AD. A user instead needs to
provide a (possibly empty) header 𝐻 when she initiates encryption/decryption. This header
serves the same role as AD.
– Next, the API does not let users provide nonces. Instead, the encryption scheme will pick up a
7-byte nonce prefix 𝑃 and a 16-byte salt 𝑆* at random. It then uses HMAC-SHA256 to derive
an internal subkey 𝐿 from 𝑅 ← 𝑆* ‖ 𝐻, and runs STREAM[GCM] (without segmented AD)
under the key 𝐿 and nonce 𝑃. The string 𝑆* ‖ 𝑃 is added to the first ciphertext segment.
At the first glance, there are several issues in Tink’s streaming encryption.
– First, as it does not even follow the syntax of an online AE scheme, it is unclear what kind of
security Tink’s streaming encryption offers.
– Next, relying on true randomness (instead of uniqueness of nonces) is a step backward in
robustness towards randomness failure, which is quite common [11,14,22].
– Finally, requiring users to provide the entire associated data at the beginning in a header 𝐻
reduces the usability of the scheme.
To understand the security of Tink’s streaming encryption, we consider a generalized canonical
scheme SE1 that supports segmented AD—Tink’s streaming encryption corresponds to the special
case in which the adversary only pick AD segments as the empty string. To cast SE1 into the
framework of online AE, we view the pair (𝑅, 𝑃), with 𝑅 = 𝑆* ‖ 𝐻, as a nonce. Under this
viewpoint, Tink’s streaming encryption ensures the uniqueness of nonces by incorporating some
contextualization information 𝐻, and at the same time also authenticates 𝐻. By only requiring
a mild condition that (𝑅, 𝑃) is unique, SE1 is robust to randomness failure. The code of SE1 is
shown in Fig. 8. This scheme makes use of a generic key-derivation function KD and a conventional
AE scheme that Tink instantiates via HMAC-SHA256 and GCM respectively.
Analysis of SE1. The following result shows that SE1[KD, 𝛱] meets the nOAE2 notion, provided
that KD is a good PRF and 𝛱 is a good conventional AE scheme. The proof is in Section 4.3.
Theorem 1. Let 𝛱 = (K, E, D) be a conventional AE scheme, and let KD : 𝒦 × {0, 1}* → 𝒦 be a
key-derivation function of the same key space. For any adversary 𝒜 attacking SE1[KD, 𝛱], we can
construct adversaries ℬ and ℬ′ of about the same efficiency as 𝒜 such that
Advnoae2
SE1[KD,𝛱](𝒜) ≤ Advae
𝛱(ℬ) + Advprf
KD(ℬ′) .
12
procedure ℰ.init(𝐾, 𝑁)
(𝑅, 𝑃 ) ← 𝑁; 𝐿 ← KD(𝐾, 𝑅)
return (𝐿, 𝑁, 1)
procedure ℰ.next(𝑆, 𝐴, 𝑀)
(𝐿, 𝑁, 𝑖) ← 𝑆; (𝑅, 𝑃 ) ← 𝑁
𝐶 ← E𝐿(⟨𝑃, 𝑖, 0⟩, 𝐴, 𝑀)
𝑆 ← (𝐿, 𝑁, 𝑖 + 1)
return (𝐶, 𝑆)
procedure ℰ.last(𝑆, 𝐴, 𝑀)
(𝐿, 𝑁, 𝑖) ← 𝑆; (𝑅, 𝑃 ) ← 𝑁
𝐶 ← E𝐿(⟨𝑃, 𝑖, 1⟩, 𝐴, 𝑀)
return 𝐶
procedure 𝒟.init(𝐾, 𝑁)
(𝑅, 𝑃 ) ← 𝑁; 𝐿 ← KD(𝐾, 𝑅)
return (𝐿, 𝑁, 1)
procedure 𝒟.next(𝑆, 𝐴, 𝐶)
(𝐿, 𝑁, 𝑖) ← 𝑆; (𝑅, 𝑃 ) ← 𝑁
𝑀 ← D𝐿(⟨𝑃, 𝑖, 0⟩, 𝐴, 𝐶)
if 𝑀 = ⊥ then return (⊥,⊥)
𝑆 ← (𝐿, 𝑁, 𝑖 + 1); return (𝑀, 𝑆)
procedure 𝒟.last(𝑆, 𝐴, 𝐶)
(𝐿, 𝑁, 𝑖) ← 𝑆; (𝑅, 𝑃 ) ← 𝑁
𝑀 ← D𝐿(⟨𝑃, 𝑖, 1⟩, 𝐴, 𝐶)
return 𝑀
Fig. 8: The canonical online AE scheme SE1[KD, 𝛱] = (𝒦,ℰ,𝒟), where 𝛱 = (K, E, D) is a
conventional AE scheme of the same key-generation algorithm, and KD : 𝒦×{0, 1}* → 𝒦
is a key-derivation function.
Adversary ℬ makes the same number of encryption queries as 𝒜, and at most as many decryption
queries as the total number of ciphertext segments in 𝒜’s decryption queries. Adversary ℬ′ makes
the same number of queries as the number of (partial) streams that 𝒜 encrypts or decrypts.
Effect of nonce randomization. Suppose that in SE1[KD, 𝛱], we instantiate 𝛱 via GCM.
In modeling the nOAE2 notion, we assume that nonces are adversarially generated. However, in
practice, nonces in encryption queries are generated by legitimate users, although decryption queries
GCM(ℬ) further based
might be generated by an adversary. In that case, we can analyze the term Advae
on the implementation choice of the nonces. Assume that nonces for encryption queries of each user
are still distinct, which happens with probability at least 1− 𝑞2/2185, where 𝑞 is the number of 𝒜’s
streams.
For the constructed adversary ℬ in Theorem 1, if among the nonces 𝑁 = (𝑅, 𝑃) of the encryption
queries of the given adversary 𝒜, each component 𝑃 is used for at most 𝑑 users then ℬ is 𝑑-repeating.
(Here 𝒜 can still repeat 𝑃 as many times as it likes for each of the 𝑑 users.) Additionally, if among
the nonces 𝑁 = (𝑅, 𝑃) of the encryption queries for the same user of 𝒜, each value 𝑅 repeats at
most 𝑐 times, then ℬ encrypts at most 𝑐ℓ bits per user, where ℓ is maximum length of each (partial)
stream that 𝒜 encrypts.
Suppose that GCM is built on top of a blockcipher 𝐸 : {0, 1}𝑘×{0, 1}𝑛 → {0, 1}𝑛 that we model as an
GCM[𝐸](ℬ)
ideal cipher. From a result of Hoang, Tessaro, and Thiruvengadam [18, Theorem 3.1], Advae
13
 𝑚 or 𝑗 < 1 then return false
if (𝑎 = 0 or 𝑗 < 𝑚) then
elsif D𝐿(⟨𝑃, 𝑚, 1⟩, 𝐴[𝑚], 𝐶[𝑚]) = ⊥ then return false
if D𝐿(⟨𝑃, 𝑗, 0⟩, 𝐴[𝑗], 𝐶[𝑗]) = ⊥ then return false
return true
procedure Finalize(𝑏′)
return (𝑏′ = 1)