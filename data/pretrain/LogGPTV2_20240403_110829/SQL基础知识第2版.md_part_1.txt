SQL 基础知识第 2 版
李岳 著
SQL数据库开发出品
前言
《SQL基础知识》系列自发布以来，给小伙伴们带来了一定的帮助，从后台大家给
我的留言也发现了一些问题。从今天开始，我会针对大家提出的问题进行优化完善，
陆续推出《SQL基础知识》的第二版，希望能让小伙伴能更好的理解与掌握。此次
新增具体的示例数据库SQL_Road，SQL Server作为讲解平台，小伙伴们可以在公
众号的“阅读原文”的地方获取示例数据库 SQL_Road 脚本.sql，第二版中的所有截
图和代码均出自此示例数据库。
第一章 SELECT 的用法
1.1 SQL执行顺序
在普及知识之前，我想先让大家看一下数据库在运行时的先后顺序，这个请务
必多看多记，因为它真的很重要，要深入学习一定要记得这个运行先后顺序。
(8)SELECT (9)DISTINCT (11) 
(1)FROM [left_table]
(3) JOIN 
(2) ON 
(4)WHERE 
(5)GROUP BY 
(6)WITH 
(7)HAVING 
(10)ORDER BY 
SELECT的用法
先来讲解 SELECT 的用法。
1.2 SELECT 语句定义
SELECT 语句用于从表中选取数据。
结果被存储在一个结果表中（称为结果集）。
1.3 SELECT 语法
SELECT 列名称 FROM 表名称;
以及：
SELECT * FROM 表名称;
注释：SQL 语句对大小写不敏感。SELECT 等效于 select。
1.4 SELECT列名实例
如需获取名为 "姓名" 和 "省份" 的列的内容（从名为 "Customers" 的数据
库表），请使用类似这样的 SELECT 语句：
SELECT 姓名,省份 FROM dbo.Customers;
"Customers" 表:
查询结果：
1.5 SELECT * 实例
现在我们希望从 "Customers" 表中选取所有的列。
请使用符号 * 取代列的名称，就像这样：
SELECT * FROM dbo.Customers
提示：星号（*）是选取所有列的快捷方式。
结果：
1.6 批注
SELECT 就是数据库中的查询语句，打个比方当你希望从 10000 个人中找到一
些有特点的人的时候，SELECT 就是一个机器人一样可以根据这些特点快速的
找到你要的人，或者如果你就是要找这 10000 人，它也可以全部给你找出来。
它的任务就是找东西，就这么简单~
第二章 DISTINCT 的用法
2.1 DISTINCT 语句
在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同
（distinct）的值。
关键词 DISTINCT 用于返回唯一不同的值。
2.2 DISTINCT语法
SELECT DISTINCT 列名称 FROM 表名称
2.3使用 DISTINCT 关键词
我们先看看Orders表中的数据：
SELECT * FROM Orders;
如果要从 "客户ID" 列中选取所有的值，我们可以使用如下语句
SELECT 客户ID FROM Orders
结果：
如需从 "客户ID" 列中仅选取唯一不同的值，我们需要使用 SELECT DISTINCT 语
句：请注意，在结果集中，3 被列出了两次。
SELECT DISTINCT 客户ID FROM Orders
结果：
现在，在结果集中，3 仅被列出了一次。
2.4批注
从上面的例子我们就可以清楚的看到 DISTINCT 的用法了，就是如果某个字段或某
几个字段所对应的记录都重复了，使用它就可以只显示一条记录，它的作用简而言
之就是为了去重。具体使用场景一般像我们要查询某张订单表里客户的编号，但是
如果这个客户购买了很多产品，那就会产生很多相同的编号，这时候我们使用
DISTINCT，就可以从订单表中只显示所有不重复的客户编号，就这么个意思~
第三章 TOP 的用法
3.1 TOP 子句定义
TOP 子句用于规定要返回的记录的数目。
对于拥有数千条记录的大型表来说，TOP 子句是非常有用的。
注释：并非所有的数据库系统都支持 TOP 子句。
3.2 SQL Server TOP 的语法
SELECT TOP number|percent columns
FROM table_name
MySQL 和 Oracle 中的 SQL SELECT TOP 是等价的
3.3 MySQL类似TOP语法
SELECT columns
FROM table_name LIMIT number
例子
SELECT * FROM Customers LIMIT 5
3.4 Oracle类似TOP语法
SELECT columns
FROM table_name
WHERE ROWNUM  不等于
> 大于
= 大于等于
 可以写为 !=。
4.3 使用 WHERE 子句
如果只希望选取居住在城市 "北京" 中的客户，我们需要向 SELECT 语句添加
WHERE 子句：
SELECT * FROM Customers WHERE 城市='北京';
"Customers " 表里的数据：
查询后结果：
4.4 引号的使用
请注意，我们在例子中的条件值周围使用的是单引号。
SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。如果是数值，
请不要使用引号。
文本值：
--这是正确的：
SELECT * FROM Customers WHERE 城市='北京'
--这是错误的：
SELECT * FROM Customers WHERE 城市=北京
数值：
--这是正确的：
SELECT * FROM Customers WHERE ID=5
--这是错误的：
SELECT * FROM Customers WHERE ID='5'
4.5批注
WHERE 的作用其实就是过滤数据的作用，根据 WHERE 后面的条件，将需要的数
据列出来，以排除那些不需要的数据。
第五章 AND 和 OR 运算符
AND 和 OR 的用途比较广泛，在 SQL 执行顺序过程中很多地方都会使用到，上面
红色部分是经常使用到的部分。
5.1 AND 和 OR 作用
AND 和 OR 运算符用于基于一个以上的条件对记录进行过滤。
5.2 AND 和 OR 使用
AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。
如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。
如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。
原始的表Customers (用在例子中的)：
5.3 AND 运算符实例
使用 AND 来显示姓名为 "张三" 并且城市为 "上海" 的人：
SELECT * FROM Customers WHERE 姓名='张三' AND 城市='上海'
结果：
AND就是要所有条件都满足才显示数据
5.4 OR 运算符实例
使用 OR 来显示所有姓名为 "张三" 或者城市为 "北京" 的人：
SELECT * FROM Customers WHERE 姓名='张三' OR 城市='北京'
结果：
OR则是只要满足其中一个条件即显示数据
5.5 结合 AND 和 OR 运算符
我们也可以把 AND 和 OR 结合起来（使用圆括号来组成复杂的表达式）:
Order表里的数据：
AND 和 OR 结合后查询订单表中，客户 ID 是 1 或者 3 并且两个客户的发货 ID 都
是4的订单信息：
SELECT * FROM Orders WHERE (客户ID=3 OR 客户ID=1) AND 发货ID=4
结果：
5.6 批注
AND 和 OR 其实很好理解，他们一个是并且逻辑运算符，一个是或者逻辑运算符，
想象成我们日常生活中的并且和或者就可以了。
第六章 ORDER BY 的用法
6.1 ORDER BY作用
ORDER BY 关键字用于对结果集进行排序。
6.2 ORDER BY 关键字
ORDER BY 关键字用于按升序(ASC)或降序(DESC)对结果集进行排序。
ORDER BY 关键字默认情况下按升序(ASC)排序记录，默认排序可以不写ASC。
如果需要按降序对记录进行排序，可以使用DESC关键字，不可省略。
6.3 ORDER BY 语法
SELECT column1, column2, ... FROM table_name
ORDER BY column1, column2, ... ASC|DESC;
示例数据库
以下是 "Customers" 表中的数据：
6.4 ORDER BY 实例
下面的 SQL 语句从 "Customers" 表中选取所有客户，并按照 "省份" 列排序：
实例：
SELECT * FROM Customers
ORDER BY 省份;
结果：
这里排序方式默认是升序。这里排序规则，是按照省份里的拼音首字母的 ASCII 规
则排序的。例如北京市首字母是 B，广东省的首字母是 G，湖北省的首字母是 H，
上海市的首字母是S，浙江省的首字母是Z。排序后就是上述结果了，如果排序的首
字母相同，则比较第二位字母，依次类推。
6.5 ORDER BY DESC 实例
下面的 SQL 语句从 "Customers" 表中选取所有客户，并按照 "省份" 列降序排
序：
实例：
SELECT * FROM Customers ORDER BY 省份 DESC;
结果：
加了DESC后排序方式变成了降序，排序规则与升序相反。
6.6 ORDER BY 多列 实例
为了让大家更加好理解，我们在Customers表中添加两行数据。
SET IDENTITY_INSERT [dbo].[Customers] ON
INSERT INTO [dbo].[Customers] (客户ID,姓名,地址,城市,邮编,省份)
VALUES ( 6, '宋一', '花城大道21号', '广州', '510000', '广东省' ),
( 7, '刘二', '长安街121号', '北京', '100000', '北京市' )
SET IDENTITY_INSERT [dbo].[Customers] OFF;
添加数据后的Customers表如下：
下面的 SQL 语句从 "Customers" 表中选取所有客户，并按照 "省份" 和 "姓名"
列排序：
实例：
SELECT * FROM Customers ORDER BY 省份, 姓名;
结果：
可以看到，对省份排序的时候，北京市和广东省各出现了两条。这时候再对姓名这
一列的拼音首字母进行排序。在省份一致的前提下，刘二的首字母是L，赵七的首字
母是 Z，所以刘二排在赵七的前面。同理宋一的首字母是 S，王五的首字母是 W，
所以宋一排在王五的前面。
6.7 ORDER BY 多列 实例2
以下 SQL 语句从"Customers" 表中选择所有客户，按 "省份" 升序排列，并按 "姓
名" 列降序排列：
SELECT * FROM Customers ORDER BY 省份 ASC, 姓名 DESC;
结果：
对姓名进行降序排列后，姓名的排序结果与升序相反。
6.8 批注
ORDER BY就是对需要排序的列进行升序或降序排列后显示数据，与Excel的排序
类似，只需要记住在默认情况下是升序排列，可以不写关键字ASC，但是降序的情
况下必须写DESC，常与TOP关键字一起使用。
第七章 INSERT INTO 的用法
7.1 INSERT INTO 作用
INSERT INTO 语句用于向表中插入新记录。
7.2 INSERT INTO 语法
INSERT INTO 语句可以用两种形式编写。
第一个表单没有指定要插入数据的列的名称，只提供要插入的值：
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);
如果要为表中的所有列添加值，则不需要在SQL查询中指定列名称。但是，请确保
值的顺序与表中的列顺序相同。INSERT INTO语法如下所示：
INSERT INTO table_name
VALUES (value1, value2, value3, ....);
示例数据库
以下是"Customers" 表中的数据：
7.3 INSERT INTO 实例
假设我们想在"Customers"表中插入一个新行。
我们可以使用以下SQL语句：
实例
INSERT INTO Customers (姓名, 地址, 城市, 邮编, 省份)
VALUES ('宋江','梁山路1号','济南','250000','山东省');
现在，查询 "Customers" 表的数据如下所示：
注意到了吗？我们没有将任何号码插入 客户ID 字段。
客户ID列是一个自动递增字段，在将新记录插入到表中时自动生成。
7.4 仅在指定的列中插入数据
我们还可以只在指定的列中插入数据。
以下 SQL 语句插入一个新行，但只在“姓名”、“城市”和“省份”列中插入数据（客户
ID字段将自动更新）：
实例
INSERT INTO Customers (姓名, 城市, 省份)
VALUES ('武松', '邢台', '河北省');
现在，查询 "Customers" 表的数据如下所示：
第八章 UPDATE 的用法
8.1 UPDATE 作用
UPDATE 语句用于更新表中的现有记录。
8.2 UPDATE 语法
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
请注意
更新表中的记录时要小心！
要注意SQL UPDATE 语句中的 WHERE 子句！
WHERE子句指定哪些记录需要更新。如果省略WHERE子句，所有记录都
将更新！
示例数据库
以下是 "Customers" 表中的数据：
8.3 UPDATE 实例
以下SQL语句为第一个客户（姓名=’张三’）更新了"姓名"，"城市"以及"省份"：
实例
UPDATE Customers
SET 姓名= '鲁智深',城市= '平凉',省份='甘肃省'
WHERE 姓名 ='张三';
结果
Update 警告！
更新记录时要小心。如果您省略WHERE子句，所有记录将被更新！
在做示例之前，我们将"Customers"表中的数据先插入到一张临时表"#Customers"
中，以防止数据被修改后改回来比较繁琐。
SELECT * INTO #Customers FROM Customers
SELECT * FROM #Customers
#Customers中的数据
这样临时表#Customers 就和 Customers 表结构和数据一模一样了。我们对
Customers进行这个危险的更新操作。
UPDATE #Customers SET 姓名='宋江';
"#Customers" 表将如下所示：
这是非常危险的更新操作，所以在进行更新操作前，最好先备份一下当前要更新的
表。我们创建临时表的动作就是一种备份表的操作。
8.4 批注
UPDATE就是对需要更新的数据进行更新，但是前提是要确定只更新了你想要的数
据，就是通过 WHERE 条件来进行筛选。如果你不小心更新错了，那将会是很麻烦
的一件事，切记。
第九章 DELETE 的用法
9.1 DELETE 作用
DELETE语句用于删除表中现有记录。
9.2 DELETE 语法
DELETE FROM table_name WHERE condition;