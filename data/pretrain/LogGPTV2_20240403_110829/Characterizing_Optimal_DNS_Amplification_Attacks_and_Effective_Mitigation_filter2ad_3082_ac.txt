23
4 Measuring the Adoption of DNS Rate Limiting
A recent standard speciﬁed the rate-limiting of DNS responses at the DNS server
to limit the use of DNS ampliﬁcation in practice [18]. US CERT recommended
organizations employ such rate-limiting, where possible, with a limit of ﬁve iden-
tical responses to the same origin per second [16]. However, CERT acknowledged
that some popular DNS servers, notably Microsoft’s DNS server, lack response
rate limiting functionality, making rate-limiting impractical for many organiza-
tions. At the time of writing, this repeated response rate-limiting is the only
standardized scheme available at DNS servers. We thus focus our measurement
study on this approach.
CERT also acknowledged that rate-limiting may cause legitimate DNS queries
to go unanswered if there is signiﬁcant packet loss or other patterns. In our own
prior work [14], where we monitored the DNS queries being issued to the author-
itative servers at the Oak Ridge National Laboratory, we found that over 26,000
DNS resolvers re-issued a repeated query before the expiration of the ﬁve-minute
TTL associated with the record. We found about 35 % of the repeated queries
were issued within the ﬁrst 10 s of the original resolution request, likely due to
DNS packet loss. Further, we saw that some large Internet service providers load
balanced their clients’ DNS requests across caching DNS resolvers on contiguous
IP addresses. Because the DNS rate limiting standard recommends rate-limiting
at the /24 network preﬁx, it is possible that the combination of packet loss and
load balancing will cause legitimate servers to exceed the rate-limit. This will
deny clients access to the organization’s services. Organizations have an incentive
to avoid rate limiting or to set a high rate-limit value to avoid losing business or
negatively aﬀecting their customers.
To determine the impact of rate limiting, we used a random 0.5 % sample
of name servers from our previous study and issued a set of repeated queries to
each to ﬁnd out what limit, if any, the server used for repeated requests. We
issued these queries on May 3, 2014. We used an iterative process, ranging from
3 repeated queries to 15 repeated queries, with all queries in a set being issued
within a single millisecond. Between iterations, we delay roughly 6 min to ensure
any rate-limits are reset.
Using this methodology, we declare a particular name server as employing
response rate limiting if there is a consecutive sequence from some number, x, to
our limit of 15 in which each set of queries is missing at least one response. How-
ever, if a set of y queries, where y > x, successfully receives all of its responses, it
is unlikely that the server uses a rate limit of x, since rate limiting is determinis-
tic by nature. We note that this is a conservative approach, which may cause us
to overestimate rate limiting adoption, since some responses could be lost due
to chance. However, our methodology will not detect limits set at more than 15
queries a second.
In doing this probing, we found only 149 (2.69 %) of the studied name servers
employed rate limiting. Of those, 7.38 % rate limited at 5 queries/second or less.
The remaining 92.62 % used a rate limit between 9 and 14 queries/second.
24
D.C. MacFarland et al.
These results show that rate-limiting is rarely used in practice and thus is
unlikely to be a signiﬁcant factor in a DNS ampliﬁcation attack.
5 Countermeasure: Tunnel to Remote Resolver
Under normal ﬂooding-based DDoS attacks, the victim can employ ﬁltering at
the victim’s organization. However, victim organizations often also enlist ﬁltering
support from the organization’s upstream Internet provider. These providers
often have greater capacity and can employ ﬁlters before the traﬃc would reach
the organization’s last-mile link, which is often a bottleneck link. These providers
can also employ such ﬁltering at each ingress router to achieve more scalable,
distributed ﬁltering for providers with many peering points.
While a similar approach could also be used to ﬁlter all DNS response pack-
ets destined to the victim organization, this would also prevent legitimate DNS
traﬃc both to and from that organization. Inbound traﬃc to the organization’s
authoritative DNS servers can be outsourced to one of the many entities, such
as CloudFlare [3], which oﬀer robust, oﬀ-site DNS hosting services using any-
casting techniques. Since these approaches only focus on protecting externally
accessible resources, they do not protect resolvers performing outbound local
DNS resolutions.
We propose to address this problem in a simple way: create an oﬀ-premises
DNS resolver for the organization and create a tunnel, using virtual private
network protocols such as IPSec or SSL, between the oﬀ-premise resolver and the
organization’s on-site DNS resolver. We can then conﬁgure the on-site resolver
to forward all DNS requests through the tunnel to the oﬀ-site DNS resolver
while conﬁguring the oﬀ-site resolver to operate recursively on behalf of the
organization. Organizations could then simply request their upstream Internet
providers to ﬁlter all DNS response traﬃc to the organization. This will ﬁlter
the attack traﬃc, but will not aﬀect the tunneled traﬃc between the resolvers,
allowing organizations to maintain full DNS resolver functionality.
Many cloud providers would allow an organization to cheaply store and run a
virtual machine that acts as an oﬀ-site DNS resolver. Since the resolver requires
minimal computational resources, such hosting would be widely available for less
than a dollar per day of use. As long as the organization’s upstream provider
can ﬁlter the attack, organizations could shrug oﬀ DNS ampliﬁcation attacks
of arbitrary size with minimal expense. With widespread adoption, the value of
ampliﬁcation attacks would decrease for attackers and their use may decline.
To demonstrate the feasibility of the approach, we used PlanetLab to host
a DNS resolver oﬀ-site. The remote node was located in Rhode Island, USA,
while our local resolver was hosted at our organization in Massachusetts, USA.
We used BIND 9.5 as the DNS software on both our local resolver and on the
remote PlanetLab resolver. We used OpenSSL to create an encrypted tunnel
between the resolvers. We pre-install the DNS and OpenSSL software on each
machine.
We then measured the amount of time required to transition from the resolver
performing queries locally to performing the queries through the remote resolver.
Characterizing Optimal DNS Ampliﬁcation Attacks and Eﬀective Mitigation
25
We found that our solution’s average start time was 1.36 s across 10,000 trials
with a 0.55 s standard deviation. This overall time is the sum of the time required
to start the remote BIND instance, establish the SSL tunnel, alter the conﬁgu-
ration ﬁle on the local BIND resolver, and to reload the local resolver to apply
these changes. We also determine the client’s perspective of perceived downtime
during the switch to the solution, after it has been set up, using a host that
issued a query every 100 ms. Across 10,000 runs, it took an average of an addi-
tional 0.66 s (standard deviation of 0.81 s) from initiating the change until the
ﬁrst response was received by the client.
While using a remote resolver, the latency associated with each query increased
to accommodate the propagation delays between the local and remote resolvers, as
shown in Table 3. This had an impact on the latency for lookups. We ﬁrst measured
the delay between issuing a DNS query and receiving its response at the remote
machine (which we label the baseline). We then measured the delay between issu-
ing a DNS query and receiving the response at the local resolver, which forwards
the query over the encrypted tunnel and to the remote machine for a recursive
resolution (which we label the solution). The mean additional latency was 16 ms.
Naturally, the geographical location and connectivity of the remote resolver will
impact the overall latency. However, we can see that the overhead of the solution
itself is minimal.
Table 3. Latency comparison of DNS resolutions on directly from the remote resolver
to those forwarded by a targeted network to the remote resolver.
Approach Query Response Time (ms) Standard Deviation Number of Queries
Minimum Median Mean
Baseline
7
Forwarded 22
69
85
128
94
166
62
1,547
1,344
We note that the adversary could learn about the victim’s use of a remote
resolver by having a client inside the victim’s network, which can cause queries
to traverse the remote resolver, and by operating an authoritative server that
would be queried by the remote resolver. However, the victim can easily adapt
to this by creating N remote resolvers, requiring the attacker to divide their
resources. The victim organization may also monitor the attack, discover the
colluding entities, and secure the internal client.
While this solution does require the cooperation of a third-party, that third-
party is the victim organization’s ISP, which has a ﬁnancial interest in assisting
its customer. Furthermore, the involvement of the ISP is minimal, constituting
the addition of a simple ﬁlter rule.
6 Conclusion
In this work, we analyze the attack potential associated with DNS ampliﬁca-
tion attacks that focus on using authoritative servers as ampliﬁers. We ﬁnd that
26
D.C. MacFarland et al.
attackers can launch damaging attacks of 1,444 MBytes/s of traﬃc at the target
by sending only 44 MBytes/s of attack traﬃc from the source, and that botnets
could scale up such attacks easily. We ﬁnd that less than 3.8 % of authorita-
tive servers are responsible for the highest ampliﬁcation factors. Further, we
note that DNSSEC played a signiﬁcant role in ampliﬁcation: by securing the
DNS infrastructure, defenders are increasing the ampliﬁcation potential of DNS
reﬂector attacks. Further, we note that DNS response rate limiting has minimal
adoption, with less than 3 % of name servers using the approach.
While much discussion has focused on open resolvers, they functionally serve
as distributed mirrors of the top amplifying authoritative servers. These resolvers
could also let attackers bypass rate-limiting at servers; however, with less than
3 % of servers using rate-limiting, open resolvers only seem valuable to have a
larger base to distribute attacks.
While attackers have powerful tools at their disposal, we provide a simple
mechanism that allows a victim organization to mitigate an on-going attack
while incurring only modest latency increases in the organization’s own DNS
queries. Further, we note that organizations may be able to decrease their role in
DNS ampliﬁcation attacks by rate-limiting DNSSEC responses when repeatedly
queried by a single source.
References
1. Bright, P.: Spamhaus DDoS grows to Internet-threatening size, March 2013.
http://arstechnica.com/security/2013/03/spamhaus-ddos-grows-to-internet-threat
ening-size/
2. Center for Measurement and Analysis of Network Data, Naval Postgraduate
School: Spoofer project: State of IP spooﬁng, February 2014. http://spoofer.
cmand.org/summary.php
3. CloudFlare: Cloudﬂare advanced ddos protection. https://www.cloudﬂare.com/
ddos
4. Conrad, D.: Indicating resolver support of DNSSEC. IETF RFC 3225, December
2001
5. Damas, J., Neves, F.: Preventing use of recursive nameservers in reﬂector attacks.
IETF RFC 5358, October 2008
6. Damas, J., Vixie, P.: Extension mechanisms for DNS (EDNS(0)). IETF RFC 6891,
April 2013
7. Elz, R., Bush, R., Bradner, S., Patton, M.: Selection and operation of secondary
dns servers. IETF RFC 2182, July 1997
8. Incapsula Inc: 2013–2014 ddos threat landscape report, April 2014. http://www.
imperva.com/docs/RPT 2013-2014 ddos threat landscape.pdf
9. Kalafut, A.J., Shue, C.A., Gupta, M.: Touring DNS open houses for trends and
conﬁgurations. IEEE/ACM Trans. Netw. PP(99), 1 (2011)
10. K¨uhrer, M., Hupperich, T., Rossow, C., Holz, T.: Exit from hell? reducing the
impact of ampliﬁcation ddos attacks. In: USENIX Security Symposium (2014)
11. Paxson, V.: An analysis of using reﬂectors for distributed denial-of-service attacks.
ACM SIGCOMM Comput. Commun. Rev. 31(3), 38–47 (2001)
Characterizing Optimal DNS Ampliﬁcation Attacks and Eﬀective Mitigation
27
12. Prince, M.: Technical details behind a 400gbps NTP ampliﬁcation DDoS attack,
2014. http://blog.cloudﬂare.com/technical-details-behind-a-400gbps-
February
ntp-ampliﬁcation-ddos-attack
13. Rossow, C.: Ampliﬁcation hell: Revisiting network protocols for DDoS abuse. In:
Network and Distributed System Security (NDSS) Symposium (2014)
14. Shue, C., Kalafut, A.: Resolvers revealed: Characterizing DNS resolvers and their
clients. ACM Trans. Internet Technol. (TOIT) 12(4), July 2013
15. US-CERT: Smurf ip denial-of-service attacks. Advisory (CA-1998-01), January
1998. http://www.cert.org/historical/advisories/CA-1998-01.cfm
16. US-CERT: Dns ampliﬁcation attacks. Alert (TA13-088A), July 2013. https://www.
us-cert.gov/ncas/alerts/TA13-088A
17. US-CERT: NTP ampliﬁcation attacks using CVE-2013-5211. Alert (TA14-013A),
January 2014
18. Vixie, P., Schryver, V.: Dns response rate limiting (DNS RRL), April 2012. http://
ss.vix.su/∼vixie/isc-tn-2012-1.txt