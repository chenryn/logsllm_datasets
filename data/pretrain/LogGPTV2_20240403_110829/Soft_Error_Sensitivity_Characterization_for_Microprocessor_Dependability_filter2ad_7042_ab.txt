33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
ICRAM 52
DCU
53
ITAG
ICU
32
32
1
1
32
8
32
1
1
1
3
8
1
32
1
32
1
1
1
32
1
32
32
1
32
iu_rs2_e
fpop
fpop_valid
iu_kill_fpu
hold_fpu
icu_data
icu_drty
icu_vld_d
icu_length_d
icu_pc_d
icu_hold
icu_din
icu_addr
icu_tag_in
icu_tag_vld
icu_tag_we
pj_icureq
pj_icusize
pj_icutype
pj_icuaddr
itag_dout
itag_vld
ic_hit
icram_dout
iu_data_vld
icu_ram_we
icram_powerdown
icu_in_powerdown
32
8
1
1
1
56
7
7
28
32
1
32
2
1
14
18
1
1
1
1
2
1
32
18
1
1
64
1
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
DCU
DTAG
dcu_in_powerdown
dcu_data
iu_stall
dcu_err_ack
dcu_din_e
dcu_ram_we
dcu_pwrdown
dcu_stat_addr
dcu_bank_sel
dcu_bypass
dcu_tag_in
dcu_stat_out
dcu_set_sel
wb_set_sel
dcu_tag_we
dcu_stat_we
dcu_addr_out
smu_stall
smu_data_vld
dcu_smu_st
pj_dcureq
pj_dcusize
pj_dcutype
pj_dcuaddr
pj_dataout
tag_dout
dtg_stat_out
hit0
32
1
3
2
32
4
1
13
2
1
19
5
1
1
1
5
32
1
1
1
1
2
3
32
32
19
5
1
FPU
SMU
DTAG 82
DCRAM 83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
MEMC
PCSU
BIU
smu_sbase_we
hit1
dcram_dout
fp_rdy_e
fpu_data_e
smu_rf_din
smu_rf_addr
smu_we
smu_sbase
smu_hold
smu_addr
smu_st
smu_ld
smu_data
smu_na_st
pj_nmi_sync
pj_irl_sync
pj_dcuack
pj_icuack
pj_datain
pj_data_out
pj_address
pj_size
pj_type
pj_tv
pj_data_in
 pj_ack
pcsu_powerdown
1
64
1
32
32
6
1
30
1
1
32
1
1
32
1
1
4
1
2
2
32
32
30
2
4
1
32
2
Program run time
50 clocks
FIP
1
Checkpoint and inject
FIP2
FIP
3
FIP
4
End
Clock
FID
Checkpoint
RTL simulation
Fault injection
starts
Fault injection
ends
FUB
FIL
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
IU
Start
RTL
IAS
Initialization and warm−up period
Base interval
BP1
BP2
BP3
RTL after fault injection
Architectural state comparison
End of simulation
Figure 2. Fault injection and observation timing diagram.
ory arrays, or only one of them. When the fault is injected
into the FIL, its function determines the type of soft error
being generated such as control error, data error, etc.
Four application programs implementing different algo-
rithms were used for benchmark workloads. Bubble im-
plements an elementary bubble sort method for sorting 64
integer numbers. The algorithm involves comparing and ex-
changing elements to properly position in a data structure.
Crypt performs encryption and decryption using IDEA (In-
ternational Data Encryption Algorithm) on an array of 
bytes. This Java kernel program is a part of the Java Grande
Forum Benchmark Suite [34].  was chosen to be 800 in
our study. We also used an optimized Java version of the
well known Linpack benchmark. Linpack solves an   
linear system using LU factorization followed by a triangu-
lar solve. It measures ﬂoating point performance and is nu-
merically intensive. Our problem size was 25  25. Queens
ﬁnds all the solutions of the Eight Queens problem on an
88 Chess-board using a recursive algorithm. We believe
these programs are representative of frequently used oper-
ations in the applications of the picoJava-II processor. All
benchmarks were tested on both the picoJava-II and other
JVM platforms for a cross-check.
To obtain statistically signiﬁcant results, a large number
of fault cases must be considered. Thus, minimizing simu-
lation time per injection was necessary for us. With more
simulation control and a slightly lowered level of observa-
tion detail, several faults can be examined during a single
execution. Figure 2 illustrates how we performed the fault
injection and made observation in a targeted FIL on the
picoJava-II. At the beginning of each simulation run, the
RTL simulator invokes another processor simulator, called
the Instruction Accurate Simulator (IAS), which models all
functionality of the picoJava-II by instruction boundaries.
The architectural states of both simulators are identical af-
ter the commitment of every instruction under the fault-
free condition. The primary purpose of the IAS is to serve
as a golden run for monitoring the RTL simulation when
the fault is active. Fault injection points (FIPs) at which
faults are injected into the processor are considered after the
initialization and warm-up period. The FIP1 is randomly
picked from a window of 50 clock cycles starting from the
ﬁrst basepoint (BP1). At the FIP1, the RTL simulation is
checkpointed, i.e., saving the current state of the simulated
processor, during the ﬁrst half of the clock period. When
the clock goes to low, the fault injection begins and lasts
for a predeﬁned interval, denoted by fault injection duration
(FID). A single clock cycle may be enough for the injected
fault to be latched as a soft error. The longer the fault is
resident in the FIL, the more likely it is to affect the proces-
sor operation. Given this behavior we chose 1 and 10 clock
cycles for short and long FIDs, respectively.
After the injection at FIP1, the simulation is monitored
up to the next base point (BP2), and then the architectural
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:17:34 UTC from IEEE Xplore.  Restrictions apply. 
state of the RTL simulator is compared with the state of
the IAS. If the fault has been effective, the states mismatch.
In this case, the RTL simulator rolls back to FIP1 using
the checkpointed state and the IAS is paused until the RTL
reaches BP2 with no fault injection. Otherwise both simu-
lators proceed to FIP2. The same procedure is repeated for
subsequent fault injections. The more FIPs tested for a FIL,
the higher accuracy is achieved in estimation. We chose 100
FIPs during a benchmark run for a single FIL.
In our simulation, every single fault injection created a
soft error in the FIL. The effects of different occurrence tim-
ings of soft errors were examined. We deﬁne soft error sen-
sitivity (SES) of a FIL as the probability that a soft error in
the FIL causes the processor to behave erroneously or have
an incorrect architectural state. The outcome of each fault
injection at a FIP is classiﬁed into four cases: 1) no harmful
impacts are made to the processor; 2) the program running
on the processor hangs; 3) the system crashes before the
simulation reaches the next base point for the state compar-
ison; or 4) the simulation continues to the base point, but
the architectural state is corrupted. Thus, the SES of a FIL
is computed by 4