Character-string data is sorted according to the locale-specific collation order that was
established when the database cluster was initialized.
Examples
The following two examples are identical ways of sorting the individual results according
to the contents of the second column (dname):
SELECT * FROM dept ORDER BY dname;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
40 | OPERATIONS | BOSTON
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
(4 rows)
SELECT * FROM dept ORDER BY 2;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
40 | OPERATIONS | BOSTON
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
(4 rows)
2.3.71.11 DISTINCT Clause
If a SELECT statement specifies DISTINCT, all duplicate rows are removed from the
result set (one row is kept from each group of duplicates). The ALL keyword specifies
the opposite: all rows are kept; that is the default.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 220
Database Compatibility for Oracle® Developers
Reference Guide
2.3.71.12 FOR UPDATE Clause
The FOR UPDATE clause takes the form:
FOR UPDATE [WAIT n|NOWAIT|SKIP LOCKED]
FOR UPDATE causes the rows retrieved by the SELECT statement to be locked as though
for update. This prevents a row from being modified or deleted by other transactions
until the current transaction ends; any transaction that attempts to UPDATE, DELETE, or
SELECT FOR UPDATE a selected row will be blocked until the current transaction ends.
If an UPDATE, DELETE, or SELECT FOR UPDATE from another transaction has already
locked a selected row or rows, SELECT FOR UPDATE will wait for the first transaction to
complete, and will then lock and return the updated row (or no row, if the row was
deleted).
FOR UPDATE cannot be used in contexts where returned rows cannot be clearly identified
with individual table rows (for example, with aggregation).
Use FOR UPDATE options to specify locking preferences:
 Include the WAIT n keywords to specify the number of seconds (or fractional
seconds) that the SELECT statement will wait for a row locked by another session.
Use a decimal form to specify fractional seconds; for example, WAIT 1.5
instructs the server to wait one and a half seconds. Specify up to 4 digits to the
right of the decimal.
 Include the NOWAIT keyword to report an error immediately if a row cannot be
locked by the current session.
 Include SKIP LOCKED to instruct the server to lock rows if possible, and skip
rows that are already locked by another session.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 221
Database Compatibility for Oracle® Developers
Reference Guide
2.3.72 SET CONSTRAINTS
Name
SET CONSTRAINTS -- set constraint checking modes for the current transaction
Synopsis
SET CONSTRAINTS { ALL | name [, ...] } { DEFERRED | IMMEDIATE }
Description
SET CONSTRAINTS sets the behavior of constraint checking within the current
transaction. IMMEDIATE constraints are checked at the end of each statement. DEFERRED
constraints are not checked until transaction commit. Each constraint has its own
IMMEDIATE or DEFERRED mode.
Upon creation, a constraint is given one of three characteristics: DEFERRABLE
INITIALLY DEFERRED, DEFERRABLE INITIALLY IMMEDIATE, or NOT
DEFERRABLE. The third class is always IMMEDIATE and is not affected by the SET
CONSTRAINTS command. The first two classes start every transaction in the indicated
mode, but their behavior can be changed within a transaction by SET CONSTRAINTS.
SET CONSTRAINTS with a list of constraint names changes the mode of just those
constraints (which must all be deferrable). If there are multiple constraints matching any
given name, all are affected. SET CONSTRAINTS ALL changes the mode of all
deferrable constraints.
When SET CONSTRAINTS changes the mode of a constraint from DEFERRED to
IMMEDIATE, the new mode takes effect retroactively: any outstanding data modifications
that would have been checked at the end of the transaction are instead checked during the
execution of the SET CONSTRAINTS command. If any such constraint is violated, the
SET CONSTRAINTS fails (and does not change the constraint mode). Thus, SET
CONSTRAINTS can be used to force checking of constraints to occur at a specific point in
a transaction.
Currently, only foreign key constraints are affected by this setting. Check and unique
constraints are always effectively not deferrable.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 222
Database Compatibility for Oracle® Developers
Reference Guide
Notes
This command only alters the behavior of constraints within the current transaction.
Thus, if you execute this command outside of a transaction block it will not appear to
have any effect.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 223
Database Compatibility for Oracle® Developers
Reference Guide
2.3.73 SET ROLE
Name
SET ROLE -- set the current user identifier of the current session
Synopsis
SET ROLE { rolename | NONE }
Description
This command sets the current user identifier of the current SQL session context to be
rolename. After SET ROLE, permissions checking for SQL commands is carried out as
though the named role were the one that had logged in originally.
The specified rolename must be a role that the current session user is a member of. (If
the session user is a superuser, any role can be selected.)
NONE resets the current user identifier to be the current session user identifier. These
forms may be executed by any user.
Notes
Using this command, it is possible to either add privileges or restrict one‟s privileges. If
the session user role has the INHERITS attribute, then it automatically has all the
privileges of every role that it could SET ROLE to; in this case SET ROLE effectively
drops all the privileges assigned directly to the session user and to the other roles it is a
member of, leaving only the privileges available to the named role. On the other hand, if
the session user role has the NOINHERITS attribute, SET ROLE drops the privileges
assigned directly to the session user and instead acquires the privileges available to the
named role. In particular, when a superuser chooses to SET ROLE to a non-superuser
role, she loses her superuser privileges.
Examples
User mary takes on the identity of role admins:
SET ROLE admins;
User mary reverts back to her own identity:
SET ROLE NONE;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 224
Database Compatibility for Oracle® Developers
Reference Guide
2.3.74 SET TRANSACTION
Name
SET TRANSACTION -- set the characteristics of the current transaction
Synopsis
SET TRANSACTION transaction_mode
where transaction_mode is one of:
ISOLATION LEVEL { SERIALIZABLE | READ COMMITTED }
READ WRITE | READ ONLY
Description
The SET TRANSACTION command sets the characteristics of the current transaction. It
has no effect on any subsequent transactions. The available transaction characteristics are
the transaction isolation level and the transaction access mode (read/write or read-only).
The isolation level of a transaction determines what data the transaction can see when
other transactions are running concurrently:
READ COMMITTED
A statement can only see rows committed before it began. This is the default.
SERIALIZABLE
All statements of the current transaction can only see rows committed before the
first query or data-modification statement was executed in this transaction.
The transaction isolation level cannot be changed after the first query or data-
modification statement (SELECT, INSERT, DELETE, UPDATE, or FETCH) of a transaction
has been executed. The transaction access mode determines whether the transaction is
read/write or read-only. Read/write is the default.
When a transaction is read-only, the following SQL commands are disallowed: INSERT,
UPDATE, and DELETE if the table they would write to is not a temporary table; all
CREATE, ALTER, and DROP commands; COMMENT, GRANT, REVOKE, TRUNCATE; and
EXECUTE if the command it would execute is among those listed. This is a high-level
notion of read-only that does not prevent all writes to disk.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 225
Database Compatibility for Oracle® Developers
Reference Guide
2.3.75 TRUNCATE
Name
TRUNCATE -- empty a table
Synopsis
TRUNCATE TABLE name [DROP STORAGE]
Description
TRUNCATE quickly removes all rows from a table. It has the same effect as an unqualified
DELETE but since it does not actually scan the table, it is faster. This is most useful on
large tables.
The DROP STORAGE clause is accepted for compatibility, but is ignored.
Parameters
name
The name (optionally schema-qualified) of the table to be truncated.
Notes
TRUNCATE cannot be used if there are foreign-key references to the table from other
tables. Checking validity in such cases would require table scans, and the whole point is
not to do one.
TRUNCATE will not run any user-defined ON DELETE triggers that might exist for the
table.
Examples
Truncate the table bigtable:
TRUNCATE TABLE bigtable;
See Also
DROP VIEW, DELETE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 226
Database Compatibility for Oracle® Developers
Reference Guide
2.3.76 UPDATE
Name
UPDATE -- update rows of a table
Synopsis
UPDATE [ optimizer_hint ] table[@dblink ]
SET column = { expression | DEFAULT } [, ...]
[ WHERE condition ]
[ RETURNING return_expression [, ...]
{ INTO { record | variable [, ...] }
| BULK COLLECT INTO collection [, ...] } ]
Description
UPDATE changes the values of the specified columns in all rows that satisfy the condition.
Only the columns to be modified need be mentioned in the SET clause; columns not
explicitly modified retain their previous values.
The RETURNING INTO { record | variable [, ...] } clause may only be
specified within an SPL program. In addition the result set of the UPDATE command must
not return more than one row, otherwise an exception is thrown. If the result set is empty,
then the contents of the target record or variables are set to null.
The RETURNING BULK COLLECT INTO collection [, ...] clause may only be
specified if the UPDATE command is used within an SPL program. If more than one
collection is specified as the target of the BULK COLLECT INTO clause, then each
collection must consist of a single, scalar field – i.e., collection must not be a
record. The result set of the UPDATE command may contain none, one, or more rows.
return_expression evaluated for each row of the result set, becomes an element in
collection starting with the first element. Any existing rows in collection are
deleted. If the result set is empty, then collection will be empty.
You must have the UPDATE privilege on the table to update it, as well as the SELECT
privilege to any table whose values are read in expression or condition.
Parameters
optimizer_hint
Comment-embedded hints to the optimizer for selection of an execution plan.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 227
Database Compatibility for Oracle® Developers
Reference Guide
table
The name (optionally schema-qualified) of the table to update.
dblink
Database link name identifying a remote database. See the CREATE DATABASE
LINK command for information on database links.
column
The name of a column in table.
expression
An expression to assign to the column. The expression may use the old values of
this and other columns in the table.
DEFAULT
Set the column to its default value (which will be null if no specific default
expression has been assigned to it).
condition
An expression that returns a value of type BOOLEAN. Only rows for which this
expression returns true will be updated.
return_expression
An expression that may include one or more columns from table. If a column
name from table is specified in return_expression, the value substituted for
the column when return_expression is evaluated is determined as follows:
If the column specified in return_expression is assigned a value in
the UPDATE command, then the assigned value is used in the evaluation of
return_expression.
If the column specified in return_expression is not assigned a value
in the UPDATE command, then the column‟s current value in the affected
row is used in the evaluation of return_expression.
record
A record whose field the evaluated return_expression is to be assigned. The
first return_expression is assigned to the first field in record, the second
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 228
Database Compatibility for Oracle® Developers
Reference Guide
return_expression is assigned to the second field in record, etc. The
number of fields in record must exactly match the number of expressions and
the fields must be type-compatible with their assigned expressions.
variable
A variable to which the evaluated return_expression is to be assigned. If
more than one return_expression and variable are specified, the first
return_expression is assigned to the first variable, the second
return_expression is assigned to the second variable, etc. The number of
variables specified following the INTO keyword must exactly match the number
of expressions following the RETURNING keyword and the variables must be
type-compatible with their assigned expressions.
collection
A collection in which an element is created from the evaluated
return_expression. There can be either a single collection which may be a
collection of a single field or a collection of a record type, or there may be more
than one collection in which case each collection must consist of a single field.
The number of return expressions must match in number and order the number of
fields in all specified collections. Each corresponding return_expression and
collection field must be type-compatible.
Examples
Change the location to AUSTIN for department 20 in the dept table:
UPDATE dept SET loc = 'AUSTIN' WHERE deptno = 20;
For all employees with job = SALESMAN in the emp table, update the salary by 10% and
increase the commission by 500.
UPDATE emp SET sal = sal * 1.1, comm = comm + 500 WHERE job = 'SALESMAN';
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 229
Database Compatibility for Oracle® Developers
Reference Guide
2.4 Functions and Operators
Advanced Server provides a large number of functions and operators for the built-in data
types.
2.4.1 Logical Operators
The usual logical operators are available: AND, OR, NOT
SQL uses a three-valued Boolean logic where the null value represents "unknown".
Observe the following truth tables:
Table 2-11 AND/OR Truth Table
a b a AND b a OR b
True True True True
True False False True
True Null Null True
False False False False
False Null False Null
Null Null Null Null
Table 2-12 NOT Truth Table
a NOT a
True False
False True
Null Null
The operators AND and OR are commutative, that is, you can switch the left and right
operand without affecting the result.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 230
Database Compatibility for Oracle® Developers
Reference Guide
2.4.2 Comparison Operators
The usual comparison operators are shown in the following table.
Table 2-13 Comparison Operators
Operator Description
 Greater than
= Greater than or equal to
= Equal
<> Not equal
!= Not equal
Comparison operators are available for all data types where this makes sense. All
comparison operators are binary operators that return values of type BOOLEAN;
expressions like 1 = x AND a  y
There is no difference between the two respective forms apart from the CPU cycles
required to rewrite the first one into the second one internally.
To check whether a value is or is not null, use the constructs
expression IS NULL
expression IS NOT NULL
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 231
Database Compatibility for Oracle® Developers
Reference Guide
Do not write expression = NULL because NULL is not "equal to" NULL. (The null
value represents an unknown value, and it is not known whether two unknown values are
equal.) This behavior conforms to the SQL standard.
Some applications may expect that expression = NULL returns true if expression
evaluates to the null value. It is highly recommended that these applications be modified
to comply with the SQL standard.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 232
Database Compatibility for Oracle® Developers
Reference Guide
2.4.3 Mathematical Functions and Operators
Mathematical operators are provided for many Advanced Server types. For types without
common mathematical conventions for all possible permutations (e.g., date/time types)
the actual behavior is described in subsequent sections.
The following table shows the available mathematical operators.
Table 2-14 Mathematical Operators
Operator Description Example Result
+ Addition 2 + 3 5
- Subtraction 2 – 3 -1
* Multiplication 2 * 3 6
/ Division (See the following note.) 4 / 2 2
** Exponentiation Operator 2 ** 3 8
Note: If the db_dialect configuration parameter in the postgresql.conf file is set
to redwood, then division of a pair of INTEGER data types does not result in a truncated
value. Any fractional result is retained as shown by the following example:
edb=# SET db_dialect TO redwood;
SET
edb=# SHOW db_dialect;
db_dialect
------------
redwood
(1 row)
edb=# SELECT CAST('10' AS INTEGER) / CAST('3' AS INTEGER) FROM dual;
?column?
--------------------
3.3333333333333333
(1 row)
This behavior is compatible with Oracle databases where there is no native INTEGER data
type, and any INTEGER data type specification is internally converted to NUMBER(38),
which results in retaining any fractional result.
If the db_dialect configuration parameter is set to postgres, then division of a pair
of INTEGER data types results in a truncated value as shown by the following example:
edb=# SET db_dialect TO postgres;
SET
edb=# SHOW db_dialect;
db_dialect
------------
postgres
(1 row)
edb=# SELECT CAST('10' AS INTEGER) / CAST('3' AS INTEGER) FROM dual;
?column?
----------
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 233
Database Compatibility for Oracle® Developers
Reference Guide