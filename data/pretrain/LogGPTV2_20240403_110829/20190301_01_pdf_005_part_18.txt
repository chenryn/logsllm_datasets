### Character-String Data Sorting

Character-string data is sorted according to the locale-specific collation order established when the database cluster was initialized.

#### Examples

The following two examples demonstrate identical ways of sorting the results based on the contents of the second column (`dname`):

```sql
-- Example 1: Sorting by column name
SELECT * FROM dept ORDER BY dname;

deptno | dname      | loc
--------+------------+----------
10      | ACCOUNTING | NEW YORK
40      | OPERATIONS | BOSTON
20      | RESEARCH   | DALLAS
30      | SALES      | CHICAGO
(4 rows)

-- Example 2: Sorting by column position
SELECT * FROM dept ORDER BY 2;

deptno | dname      | loc
--------+------------+----------
10      | ACCOUNTING | NEW YORK
40      | OPERATIONS | BOSTON
20      | RESEARCH   | DALLAS
30      | SALES      | CHICAGO
(4 rows)
```

### DISTINCT Clause

If a `SELECT` statement specifies `DISTINCT`, all duplicate rows are removed from the result set, with only one row retained from each group of duplicates. The `ALL` keyword, which is the default, retains all rows.

### FOR UPDATE Clause

The `FOR UPDATE` clause is used as follows:

```sql
FOR UPDATE [WAIT n|NOWAIT|SKIP LOCKED]
```

This clause locks the rows retrieved by the `SELECT` statement as though they were being updated. This prevents other transactions from modifying or deleting these rows until the current transaction ends. Any transaction that attempts to `UPDATE`, `DELETE`, or `SELECT FOR UPDATE` a selected row will be blocked until the current transaction completes.

- If a row is already locked by another transaction, `SELECT FOR UPDATE` will wait for the first transaction to complete, then lock and return the updated row (or no row if it was deleted).
- `FOR UPDATE` cannot be used in contexts where returned rows cannot be clearly identified with individual table rows (e.g., with aggregation).

#### Locking Preferences

- **WAIT n**: Specifies the number of seconds (or fractional seconds) that the `SELECT` statement will wait for a row locked by another session. For example, `WAIT 1.5` instructs the server to wait one and a half seconds. Up to four digits can be specified to the right of the decimal.
- **NOWAIT**: Reports an error immediately if a row cannot be locked by the current session.
- **SKIP LOCKED**: Instructs the server to lock rows if possible and skip rows that are already locked by another session.

### SET CONSTRAINTS

#### Name
SET CONSTRAINTS — Set constraint checking modes for the current transaction

#### Synopsis
```sql
SET CONSTRAINTS { ALL | name [, ...] } { DEFERRED | IMMEDIATE }
```

#### Description
`SET CONSTRAINTS` sets the behavior of constraint checking within the current transaction. Constraints can be checked either immediately (`IMMEDIATE`) at the end of each statement or deferred (`DEFERRED`) until transaction commit. Each constraint has its own `IMMEDIATE` or `DEFERRED` mode.

- Upon creation, a constraint is given one of three characteristics: `DEFERRABLE INITIALLY DEFERRED`, `DEFERRABLE INITIALLY IMMEDIATE`, or `NOT DEFERRABLE`.
- `SET CONSTRAINTS` with a list of constraint names changes the mode of just those constraints (which must all be deferrable). If there are multiple constraints matching any given name, all are affected.
- `SET CONSTRAINTS ALL` changes the mode of all deferrable constraints.

When `SET CONSTRAINTS` changes the mode of a constraint from `DEFERRED` to `IMMEDIATE`, the new mode takes effect retroactively, and any outstanding data modifications are checked during the execution of the `SET CONSTRAINTS` command. If any such constraint is violated, the `SET CONSTRAINTS` fails (and does not change the constraint mode).

Currently, only foreign key constraints are affected by this setting. Check and unique constraints are always effectively not deferrable.

### SET ROLE

#### Name
SET ROLE — Set the current user identifier of the current session

#### Synopsis
```sql
SET ROLE { rolename | NONE }
```

#### Description
This command sets the current user identifier of the current SQL session context to be `rolename`. After `SET ROLE`, permissions checking for SQL commands is carried out as though the named role had logged in originally.

- The specified `rolename` must be a role that the current session user is a member of. (If the session user is a superuser, any role can be selected.)
- `NONE` resets the current user identifier to the current session user identifier. These forms may be executed by any user.

#### Notes
- Using this command, it is possible to either add privileges or restrict one's privileges.
- If the session user role has the `INHERITS` attribute, it automatically has all the privileges of every role that it could `SET ROLE` to. In this case, `SET ROLE` effectively drops all the privileges assigned directly to the session user and to the other roles it is a member of, leaving only the privileges available to the named role.
- If the session user role has the `NOINHERITS` attribute, `SET ROLE` drops the privileges assigned directly to the session user and instead acquires the privileges available to the named role. In particular, when a superuser chooses to `SET ROLE` to a non-superuser role, she loses her superuser privileges.

#### Examples
- User `mary` takes on the identity of role `admins`:
  ```sql
  SET ROLE admins;
  ```
- User `mary` reverts back to her own identity:
  ```sql
  SET ROLE NONE;
  ```

### SET TRANSACTION

#### Name
SET TRANSACTION — Set the characteristics of the current transaction

#### Synopsis
```sql
SET TRANSACTION transaction_mode
where transaction_mode is one of:
ISOLATION LEVEL { SERIALIZABLE | READ COMMITTED }
READ WRITE | READ ONLY
```

#### Description
`SET TRANSACTION` sets the characteristics of the current transaction. It has no effect on any subsequent transactions. The available transaction characteristics are the transaction isolation level and the transaction access mode (read/write or read-only).

- **Isolation Level**:
  - **READ COMMITTED**: A statement can only see rows committed before it began. This is the default.
  - **SERIALIZABLE**: All statements of the current transaction can only see rows committed before the first query or data-modification statement was executed in this transaction.
- **Access Mode**:
  - **READ WRITE**: The default.
  - **READ ONLY**: Disallows certain SQL commands (e.g., `INSERT`, `UPDATE`, `DELETE` if the table is not a temporary table; `CREATE`, `ALTER`, `DROP` commands; `COMMENT`, `GRANT`, `REVOKE`, `TRUNCATE`; and `EXECUTE` if the command it would execute is among those listed).

### TRUNCATE

#### Name
TRUNCATE — Empty a table

#### Synopsis
```sql
TRUNCATE TABLE name [DROP STORAGE]
```

#### Description
`TRUNCATE` quickly removes all rows from a table. It has the same effect as an unqualified `DELETE` but is faster because it does not scan the table. This is most useful on large tables.

- The `DROP STORAGE` clause is accepted for compatibility but is ignored.

#### Parameters
- **name**: The name (optionally schema-qualified) of the table to be truncated.

#### Notes
- `TRUNCATE` cannot be used if there are foreign-key references to the table from other tables.
- `TRUNCATE` will not run any user-defined `ON DELETE` triggers that might exist for the table.

#### Examples
- Truncate the table `bigtable`:
  ```sql
  TRUNCATE TABLE bigtable;
  ```

### UPDATE

#### Name
UPDATE — Update rows of a table

#### Synopsis
```sql
UPDATE [ optimizer_hint ] table[@dblink]
SET column = { expression | DEFAULT } [, ...]
[ WHERE condition ]
[ RETURNING return_expression [, ...]
{ INTO { record | variable [, ...] }
| BULK COLLECT INTO collection [, ...] } ]
```

#### Description
`UPDATE` changes the values of the specified columns in all rows that satisfy the condition. Only the columns to be modified need to be mentioned in the `SET` clause; columns not explicitly modified retain their previous values.

- **RETURNING INTO { record | variable [, ...] }**: May only be specified within an SPL program. The result set of the `UPDATE` command must not return more than one row, otherwise, an exception is thrown. If the result set is empty, the contents of the target record or variables are set to null.
- **RETURNING BULK COLLECT INTO collection [, ...]**: May only be specified if the `UPDATE` command is used within an SPL program. If more than one collection is specified as the target of the `BULK COLLECT INTO` clause, each collection must consist of a single, scalar field. The result set of the `UPDATE` command may contain none, one, or more rows. `return_expression` evaluated for each row of the result set becomes an element in `collection` starting with the first element. Any existing rows in `collection` are deleted. If the result set is empty, `collection` will be empty.

You must have the `UPDATE` privilege on the table to update it, as well as the `SELECT` privilege to any table whose values are read in `expression` or `condition`.

#### Parameters
- **optimizer_hint**: Comment-embedded hints to the optimizer for selection of an execution plan.
- **table**: The name (optionally schema-qualified) of the table to update.
- **dblink**: Database link name identifying a remote database. See the `CREATE DATABASE LINK` command for information on database links.
- **column**: The name of a column in the table.
- **expression**: An expression to assign to the column. The expression may use the old values of this and other columns in the table.
- **DEFAULT**: Set the column to its default value (which will be null if no specific default expression has been assigned to it).
- **condition**: An expression that returns a value of type `BOOLEAN`. Only rows for which this expression returns true will be updated.
- **return_expression**: An expression that may include one or more columns from the table.
- **record**: A record whose field the evaluated `return_expression` is to be assigned.
- **variable**: A variable to which the evaluated `return_expression` is to be assigned.
- **collection**: A collection in which an element is created from the evaluated `return_expression`.

#### Examples
- Change the location to `AUSTIN` for department 20 in the `dept` table:
  ```sql
  UPDATE dept SET loc = 'AUSTIN' WHERE deptno = 20;
  ```
- For all employees with `job = SALESMAN` in the `emp` table, update the salary by 10% and increase the commission by 500:
  ```sql
  UPDATE emp SET sal = sal * 1.1, comm = comm + 500 WHERE job = 'SALESMAN';
  ```

### Functions and Operators

Advanced Server provides a large number of functions and operators for the built-in data types.

#### Logical Operators
The usual logical operators are available: `AND`, `OR`, `NOT`.

- SQL uses a three-valued Boolean logic where the null value represents "unknown".
- Observe the following truth tables:

  | a    | b    | a AND b | a OR b |
  |------|------|---------|--------|
  | True | True | True    | True   |
  | True | False| False   | True   |
  | True | Null | Null    | True   |
  | False| False| False   | False  |
  | False| Null | False   | Null   |
  | Null | Null | Null    | Null   |

  | a    | NOT a |
  |------|-------|
  | True | False |
  | False| True  |
  | Null | Null  |

- The operators `AND` and `OR` are commutative, meaning you can switch the left and right operand without affecting the result.

#### Comparison Operators
The usual comparison operators are shown in the following table:

| Operator | Description          |
|----------|----------------------|
| >        | Greater than         |
| >=       | Greater than or equal|
| =        | Equal                |
| <>       | Not equal            |
| !=       | Not equal            |

- Comparison operators are available for all data types where this makes sense. All comparison operators are binary operators that return values of type `BOOLEAN`.
- To check whether a value is or is not null, use the constructs:
  ```sql
  expression IS NULL
  expression IS NOT NULL
  ```
- Do not write `expression = NULL` because `NULL` is not "equal to" `NULL`. (The null value represents an unknown value, and it is not known whether two unknown values are equal.) This behavior conforms to the SQL standard.

#### Mathematical Functions and Operators
Mathematical operators are provided for many Advanced Server types. For types without common mathematical conventions for all possible permutations (e.g., date/time types), the actual behavior is described in subsequent sections.

- The following table shows the available mathematical operators:

  | Operator | Description           | Example | Result  |
  |----------|-----------------------|---------|---------|
  | +        | Addition              | 2 + 3   | 5       |
  | -        | Subtraction           | 2 – 3   | -1      |
  | *        | Multiplication        | 2 * 3   | 6       |
  | /        | Division (See note)   | 4 / 2   | 2       |
  | **       | Exponentiation        | 2 ** 3  | 8       |

- **Note**: If the `db_dialect` configuration parameter in the `postgresql.conf` file is set to `redwood`, then division of a pair of `INTEGER` data types does not result in a truncated value. Any fractional result is retained. For example:
  ```sql
  edb=# SET db_dialect TO redwood;
  SET
  edb=# SHOW db_dialect;
  db_dialect
  ------------
  redwood
  (1 row)
  edb=# SELECT CAST('10' AS INTEGER) / CAST('3' AS INTEGER) FROM dual;
  ?column?
  --------------------
  3.3333333333333333
  (1 row)
  ```
- If the `db_dialect` configuration parameter is set to `postgres`, then division of a pair of `INTEGER` data types results in a truncated value. For example:
  ```sql
  edb=# SET db_dialect TO postgres;
  SET
  edb=# SHOW db_dialect;
  db_dialect
  ------------
  postgres
  (1 row)
  edb=# SELECT CAST('10' AS INTEGER) / CAST('3' AS INTEGER) FROM dual;
  ?column?
  ----------
  3
  (1 row)
  ```

This behavior is compatible with Oracle databases, where there is no native `INTEGER` data type, and any `INTEGER` data type specification is internally converted to `NUMBER(38)`, which results in retaining any fractional result.