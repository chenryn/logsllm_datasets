4        HRESULT hr=S_OK;
5        STACKFRAME64 frame;    // 描述栈帧信息的标准结构
6        int nCount=0;
7        TCHAR szPath[MAX_PATH];
8        DWORD dwTimeMS;
9    
10       dwTimeMS=GetTickCount();    // 记录开始时间
11    
12       RtlCaptureContext(&m_Context);    // 获取当前的上下文
13    
14       memset(&frame, 0x0, sizeof(frame));
15       // 初始化起始栈帧
16       frame.AddrPC.Offset    = m_Context.Eip;
17       frame.AddrPC.Mode      = AddrModeFlat;
18       frame.AddrFrame.Offset = m_Context.Ebp;
19       frame.AddrFrame.Mode   = AddrModeFlat;
20       frame.AddrStack.Offset = m_Context.Esp;
21       frame.AddrStack.Mode   = AddrModeFlat;
22    
23       while (nCount < nMaxFrames)
24       {
25           nCount++;
26           if (!StackWalk64(IMAGE_FILE_MACHINE_I386,
27              GetCurrentProcess(), GetCurrentThread(),
28              &frame, &m_Context,
29              NULL, 
30              SymFunctionTableAccess64, 
31              SymGetModuleBase64, NULL))
32           {
33              hr = E_FAIL; // 发生错误，StackWalk64函数通常不设置LastError
34              break;
35           }
36           ShowFrame(&frame,pfnShowFrame,pParam);
37           if (frame.AddrFrame.Offset == 0 || frame.AddrReturn.Offset ==
 0)
38           {
39              // 已经到最末一个栈帧，遍历结束
40              break;
41           }
42       }
43    
44       // 显示归纳信息
45       _stprintf(szPath,_T("Total Frames: %d; Spend %d MS"),
46           nCount,    GetTickCount()-dwTimeMS);
47       pfnShowFrame(szPath, pParam);
48    
49       // 显示符号搜索路径
50       SymGetSearchPath(GetCurrentProcess(),szPath,MAX_PATH);
51       pfnShowFrame(szPath, pParam);
52    
53       return hr;
54   }
其中，第12行调用RtlCaptureContext API来取得当前线程的上下文
信息，即CONTEXT结构。尽管StackWalk64函数名中包含64字样，但是
该函数也可以用在32位的系统中。需要说明的一点是，在
RtlCaptureContext返回的CONTEXT结构中，其程序指针和栈栈帧等寄
存器的值对应的都是上一级函数的，即调用WalkStack函数的那个函
数。
第14～21行初始化frame变量，它是一个STACKFRAME64结构（见
清单16-2）。
清单16-2 描述栈帧的STACKFRAME64结构
typedef struct _tagSTACKFRAME64 {
  ADDRESS64 AddrPC;            //程序指针，即当前执行位置
  ADDRESS64 AddrReturn;        //返回地址
  ADDRESS64 AddrFrame;         //栈帧地址
  ADDRESS64 AddrStack;         //栈指针值，相当于ESP寄存器的值
  ADDRESS64 AddrBStore;        //安腾架构使用的Backing Store地址
  PVOID FuncTableEntry;        //指向描述FPO的FPO_DATA结构或NULL
  DWORD64 Params[4];           //函数的参数
  BOOL Far;                    //是否为远调用
  BOOL Virtual;                //是否为虚拟栈帧
  DWORD64 Reserved[3];         //保留
  KDHELP64 KdHelp;             //用来协助遍历内核态栈
} STACKFRAME64, *LPSTACKFRAME64;
其中，前4个成员分别用来描述程序计数器（Program Counter，即
程序指针）、函数返回地址、栈帧基准地址、栈指针和安腾CPU所使用
的Backing Store的地址值。它们都是ADDRESS64结构。
typedef struct _tagADDRESS64 {
  DWORD64 Offset;         //地址的偏移部分
  WORD Segment;           //段
  ADDRESS_MODE Mode;      //寻址模式
} ADDRESS64, *LPADDRESS64;
其中，ADDRESS_MODE代表寻址方式，可以为
AddrMode1616(0)、AddrMode1632(1)、AddrModeReal(2)和
AddrModeFlat(3)4个常量之一。
STACKFRAME64结构的FuncTableEntry字段指向的是FPO数据（如
果有），Params数组是使用栈传递的前4个参数，应该根据函数的原型
来判断与实际参数的对应关系。如果栈帧对应的是一个
WOW（Windows 32 On Windows 64或Windows 16 On Windows 32）技
术中的长调用，那么Far字段的值为真。WOW是在高位宽的Windows系
统中运行低位宽的应用程序时所使用的机制，比如在64位的Windows系
统中执行32位的应用程序。如果是虚拟的栈帧，那么Virtual字段为真。
KdHelp字段供内核调试器产生内核态栈回溯时使用。
第23～42行是一个while循环，每次处理一个栈帧。第26～31行调
用StackWalk64 API，将初始化了的frame结构和context结构传递给这个
函数。StackWalk64的后4个参数可以指定4个函数地址，目的是为
WalkStack64函数分别提供以下4种帮助：读内存、访问函数表、取模块
的基地址和翻译地址。当WalkStack64需要某种帮助时，会调用相应的
函数（如果不为空）。
第36行调用ShowFrame方法来显示一个栈帧的信息。第37行是循环
的正常出口，即回溯到最后一个栈帧时，它的帧指针的值为0，这时这
个栈帧的函数返回地址也为空，因为每个线程的第一个函数的栈帧不是
因为函数调用而开始执行的。
第 45～47 行用来显示统计信息。其中pfnShowFrame是参数中指定
的一个函数指针，WalkStack方法通过这个函数把信息汇报给调用者。
第50行和第51行显示符号文件的搜索路径。在CCallTracer类的构造函数
中它会调用SymInitialize函数来初始化符号引擎，代码如下所示。
SymSetOptions(dwOptions|SYMOPT_LOAD_LINES
   |SYMOPT_DEFERRED_LOADS
   |SYMOPT_OMAP_FIND_NEAREST);
bRet = SymInitialize(GetCurrentProcess(),    NULL,    TRUE);
因为在符号搜索路径参数中指定的是NULL，所以DbgHelp会使用
当前路径以及环境变量_NT_SYMBOL_PATH和
_NT_ALTERNATE_SYMBOL_PATH的内容作为搜索路径。在作者的系
统中，第51行代码显示的内容如下。
.;SRV*d:\symbols*http://msdl.microsoft.com/download/symbols
为了测试CCallTracer类，编写了一个MFC对话框程序
（D4dTest.EXE），当用户单击界面上的Stack Trace按钮时，会调用前
面介绍的WalkStack方法。
void CD4dTestDlg::OnStacktrace() 
{    
    CCallTracer cs;
    cs.WalkStack(ShowStackFrame,this,1000);
}
清单16-3摘录了部分执行结果。
清单16-3 CCallTracer类显示的栈回溯信息
1    ------
2    Child EBP: 0x0012f648, Return Address: 0x5f43749c
3    Module!Function: D4dTest!CD4dTestDlg::OnStacktrace
4    Parameters: (0x0012f8e8,0x00000000,0x00144728,0x00000000)
5    C:\dig\dbg\author\code\chap16\d4d\D4dTest\D4dTestDlg.cpp
6    c:\dig\dbg\author\code\bin\Debug\D4dTest.exe
7    C:\dig\dbg\author\code\chap16\d4d\D4dTest\Debug\D4dTest.pdb
8    Far (WOW): 0; Virtual Frame: 1 
9    ------
10   //省略关于中间35个栈帧的很多行
11   ------
12   Child EBP: 0x0012fff0, Return Address: 0x00000000
13   Module!Function: kernel32!BaseProcessStart
14   Parameters: (0x00402740,0x00000000,0x00000000,0x00000000)
15   C:\WINDOWS\system32\kernel32.dll
16   d:\symbols\kernel32.pdb\262A5E0D6EC649ACB3ED74E9CE5701832\kernel32.pd
b
17   FPO: Para dwords: 1; Regs: 0; Frame Type: 3 
18   Far (WOW): 0; Virtual Frame: 1 
19   Total Frames: 37; Spend 20297 MS
20   .;SRV*d:\symbols*http://msdl.microsoft.com/download/symbols
为了节约篇幅，清单16-3只保留了第一个栈帧和最后一个栈帧的信
息。第12行是被追溯的最后一个栈帧，其返回地址为0。最后一个栈帧
的基准地址为0012fff0，使用调试器可以看到这个地址的值为0。使用这
个特征（或者根据返回地址等于0）可以判断到了最后一个栈帧（清单
16-1的第37行）。
上面的例子对于当前进程的当前线程产生回溯。事实上，也可以为
另一个进程中的某个线程产生栈回溯，比如调试器显示被调试程序中的
函数调用序列（Calling Stack）就属于这种情况。
关于使用DbgHelp函数来进行栈回溯，还有以下几点值得注意。首
先是DbgHelp库的版本，Windows XP预装了一个较老版本的
DbgHelp.DLL，使用这个版本有很多问题，比如它会使用DLL的输出信
息作为符号的来源，而且调用SymGetModuleInfo64这样的函数会失败。
这时，得到的栈帧信息可能残缺不全或有错误。比如以下是使用老版本
的DbgHelp.DLL时，D4dTest.EXE程序得到的最后一个栈帧信息。
Child EBP: 0x0012fff0, Return Address: 0x00000000
Module!Function: Unknown!RegisterWaitForInputIdle
Parameters: (0x00402770,0x00000000,0x00000000,0x00000000)
…
可见没有找到合适的模块信息，解决的办法是将新版本的
DbgHelp.DLL和EXE文件放在同一个目录下。WinDBG工具包中包含的
DbgHelp.DLL是比较新的。
使用了新版本的DbgHelp.DLL后，大多数栈帧的信息都没问题了，
但是个别栈帧还有问题，比如，最后一个栈帧。
Child EBP: 0x0012fff0, Return Address: 0x00000000
Module!Function: kernel32!RegisterWaitForInputIdle
Parameters: (0x00402770,0x00000000,0x00000000,0x00000000)
C:\WINDOWS\system32\kernel32.dll
SymType:-exported-;PdbUnmtchd:0,DbgUnmthd:0,LineNos:0,GlblSym: 0,TypeInfo:
0
Far (WOW): 0; Virtual Frame: 1
上面的函数名显然有错误，符号的类型为“输出”，可见没有找到合
适的PDB文件。符号搜索路径中不是指定了SRV格式的本地符号库和符
号服务器吗？为什么还没有找到kernel32.dll的PDB文件呢？原因是
DbgHelp.DLL没有找到symsrv.dll。将这个文件也复制到D4dTest.EXE文
件所在目录就没有这个问题了，显示的信息即如清单16-3所示，从第16
行关于kernel32.pdb的全路径中可以看出，symsrv.dll在本地符号库中找
到了合适的符号。但是一旦使用了symsrv.dll，它就会检索符号库并可能
通过网络连接远程的服务器，这通常要花费较多时间。因此本节介绍的
方法适合处理程序崩溃或者个别的情况，不适合在程序的执行过程中频
繁记录某一事件的踪迹信息。接下来将介绍一种负荷很小的快速记录方
法。
16.3.3 利用RTL函数回溯栈
在Win32堆的调试设施中，有一种调试方法叫用户态栈回溯（User-
Mode Stack Trace，UST）。一旦启用了UST机制后，当再次调用内存分
配函数时，堆管理器会将函数调用信息（栈回溯信息）保存到一个称为
UST数据库的内存区中。然后使用UMDH或DH就可以得到栈回溯记
录，例如以下内容。
00009DD0 bytes in 0x1 allocations (@ 0x00009D70 + 0x00000018) by: BackTrac
e00803
        7C96D6DC : ntdll!RtlDebugAllocateHeap+000000E1
        7C949D18 : ntdll!RtlAllocateHeapSlowly+00000044
        7C91B298 : ntdll!RtlAllocateHeap+00000E64