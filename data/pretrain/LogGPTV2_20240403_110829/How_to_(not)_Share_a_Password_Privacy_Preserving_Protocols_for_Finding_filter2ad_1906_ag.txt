4NC
There are 2(cid:96) bins, so the expected number of FP events NF P is: E(NF P ) ≤ 2(cid:96) exp(−NC(τ δ(1 −
r))2/2).
Note that as long as E(NF P ) (cid:28) 1/(τ (1 + δ)) the probability for a false positive on a password
is dominated by the probability of a collision with a “popular” hash value. As there are at most
1/(τ (1 + δ) such hash values, pPassFP the probability for a password false positive is: pPassFP ≤
2−(cid:96) / τ (1 − δ).
F Complete Protocol and Proofs for the QR Protocol
F.1 Complete Protocol
We shall now give a full description of the complete protocol:
1. S global setup – initial setup of the public and private parameters of the protocol. This step
can be run once by S with regards to all Ds.
2. S instance setup – should be run once by S for each D .
3. D instance setup – should be run by D every time a new Vs is chosen. Calculates the inner
product.
4. The interactive protocol – a description of the run of the interactive protocol.
Server global setup S runs a setup algorithm GlobalSetup(1k
1), taking security parameter k1. It
generates an RSA key pair (P K; SK) where SK = (p, q) and P K = (N = pq), p and q are distinct
prime numbers congruent to 1 mod 4 (this implies that −1 ∈ QRN , as is required for proving
soundness).
Additionally S publishes a proof that N is a semiprime (N = paqb where p and q are primes).
This is required for the zero-knowledge proof. Such a proof can be found in Appendix G.
Server instance setup For each D , S runs ServerSetup(P K, SK, Rs, (cid:96)), taking the private
and public keys generated by GlobalSetup, and a secret vector Rs ∈ {0, 1}(cid:96). S encodes Rs in a
public vector rp ∈ Z(cid:96)
N that is sent to D. As in the semi-honest version, each number in rp,i is a
public encryption of the corresponding bit Rs,i. S sends rp to D.
Device instance setup D runs DeviceSetup(1k2, (cid:96), P K, rp, Vs) taking a security parameter k2,
(cid:96), P K, rp and a private vector Vs ∈ {0, 1}(cid:96).
First, D checks that for any number x ∈ rp, the Jacobi symbol (cid:0) x
(cid:1) is 1. Then D generates
N
and saves the following data:
32
1. r = rp||pad2 where pad R← Z(cid:96)
2. V = Vs||Vs where Vs,i = 1 − Vs,i.
3. π∗ R← π{2(cid:96)}, d∗ R← Z2(cid:96)
N . Namely π∗ is a random permutation on 2(cid:96) items, and d∗ are 2(cid:96) random
4. r∗ = π∗(r · (d∗)2), V∗ = π∗(V ). Namely, r∗ is a blinded random permutation of r, and V∗ is the
N . We pad rp with (cid:96) numbers in QRN .
numbers.
same permutation of V .
6. e = (cid:81)2(cid:96)
5. s∗ = (r∗)2.
i=1(ri(d∗,i)2)Vi = (cid:81)2(cid:96)
i=1(r∗,i)V∗,i. That is, e is the product of the blinded items in r
corresponding to the 1 bits in V , and therefore encodes the inner product result.
D sends (s∗, e, V∗, pad) to S . Notice that this time S can only calculate e2 by itself, and
therefore it is also required to send e.
Inner product calculation and veriﬁcation D and S run the following protocol. If any step or
calculation results in ⊥, or a veriﬁcation fails, then S outputs reject. Otherwise S outputs accept
and can use the value result = (cid:104)Vs, Rs(cid:105).
1. S calculates e2, and veriﬁes that e2 = (cid:81)2(cid:96)
i=1(s∗,i)V∗,i. S verify that e2 is indeed equal to the
2. S calculates rsqr = (rp||pad2)2, the square of r using pad it received from D and rp that it
product of numbers in s∗.
stored locally.
R← Z2(cid:96)
N .
R← π{2(cid:96)}, dj
3. For j = 1, . . . , k2:
R← π{2(cid:96)}, dj
(a) πj
(b) D generates πj
(c) D sends sj = πj(s∗·(dj)4) to S. sj is a blinded random permutation of s∗.
(d) S sends bj
(e) if bj = 0
R← 0, 1 to D .
random numbers).
R← Z2(cid:96)
N (Namely a random permutation on 2(cid:96) items, and 2(cid:96)
i. D sends to S the values (π∗,j = πjπ∗, d∗,j = πj(π∗(d∗) · dj), opening the blinded
ii. S veriﬁes that sj = π∗,j(rsqr) · (d∗,j)4.
permutation from rsqr to sj.
(f) else
i. D sends to S the values (πj, dj), opening the blinded permutation from s∗ to sj.
ii. S veriﬁes that sj = πj(s∗ · dj
4).
4. S calculates result = TQRN (e), to retrieve the value of the inner product.
F.2 Completeness
It is easy to see that if both S and D follow the protocol then the protocol ends successfully as
the following statements hold:
TQRN (e) = (cid:104)Vs, Rs(cid:105)
e2 =
(s∗,i)v∗,i
∀j, sj = πj(s∗ · dj
∀j, sj = π∗,j(rsqr) · blindj
2)
2
2(cid:96)(cid:89)
i=1
33
F.3 Soundness
Theorem 4. For any (possibly not eﬃciently computable) adversarial algorithm AD , if TQRN (e) (cid:54)=
(cid:104)Vs, Rs(cid:105) then
[S = accept] ≤ 2−k2]
Pr
R←{0,1}k2
b
Theorem 4 if proved using the following two lemmas.
Lemma 4. For any (possibly not eﬃciently computable) adversarial algorithm AD , and for any
2 , only if AD knows (d∗, π∗) such that
step j in the interactive proof stage, Pr
r∗ = (π∗(r · (d∗)2)) and s∗ = (r∗)2.
[S (cid:54)= reject] ≥ 1
R←0,1
bj
Proof. Pr
R←0,1
bj
[S (cid:54)= reject] ≥ 1
2 only if AD knows (πj, dj, π∗,j, d∗,j) such that:
sj = πj(s∗ · dj
4)
sj = π∗,j(r2) · (d∗,j)4
s∗ = π−1
j (sj) · dj
−4
From 7 AD can calculate
From 7 + 8 AD can calculate
s∗ = π−1
We denote π∗ = π−1
j (π∗,j(r2) · (d∗,j)4) · dj
j π∗,j d∗ = (π−1∗,j ((d∗,j) · πj(dj
−4 = π−1
j π∗,j(r2 · (π−1∗,j ((d∗,j) · πj(dj
−1))
r∗ = π∗(r · (d∗)2), s∗ = π∗(r · (d∗)2)2 = (r∗)2
And AD can calculate (π∗, d∗).
(7)
(8)
(9)
−1)))4)
Lemma 5. For any (possibly not eﬃciently computable) adversarial algorithm AD that knows
(π∗, d∗) such that s∗ = π∗(r · (d∗)2)2, it holds that ﬁnding e such that TQRN (e) (cid:54)= (cid:104)Vs, Rs(cid:105) and
S (cid:54)= reject is equivalent to factoring N .
(10)
Proof. S = rejects unless
e2 =
From 9 + 10 we get that e(cid:48) is a root of e2.
2(cid:96)(cid:89)
(s∗,i)v∗,i
2(cid:96)(cid:89)
i=1
(e(cid:48))2 = (
(r∗,i)v∗,i)2 =
i=1
2(cid:96)(cid:89)
i=1
((r∗,i)2)v∗,i =
2(cid:96)(cid:89)
i=1
(s∗,i)v∗,i = e2
TQRN (e(cid:48)) and we get TQRN (e) = (cid:104)Vs, Rs(cid:105).
As −1 ∈ QRN we get that TQRN (e) = TQRN (−e). If e = ±e(cid:48) then as TQRN (e) = TQRN (−e) =
If TQRN (e(cid:48)) (cid:54)= (cid:104)Vs, Rs(cid:105) than e (cid:54)= ±e(cid:48) and AD can calculate all 4 roots of N , and that is
equivalent to factoring.
34
F.4 Zero-Knowledge Proof
Privacy of Rs The encoding of Rs into rp is a semantically secure encryption [GM84], and does
not reveal any information on Rs to any PPT algorithm.
Privacy of Vs There is a simulator SD that given (cid:104)Vs, Rs(cid:105), Rs can simulate D . SD chooses UAR
V (cid:48) such that result = (cid:104)V (cid:48), Rs(cid:105) = (cid:104)Vs, Rs(cid:105). It then runs the protocol as D with V (cid:48) as the input.
The distribution of all values is the same between D and SD : All values of s∗, sj are indepen-
dently and uniformly distributed in QRN . e is uniformly distributed either in QRN or in nQRN
depending only on result (as N is a semiprime, see Appendix G). Both π∗,j and πj are indepen-
dently and uniformly distributed random permutations (conditioned on the fact that for any j only
one of the permutations is revealed), and V∗ is also a uniformly distributed random value with
Hamming weight (cid:96).
G Proving N is Semi-Prime
The blinding in our protocol is done by multiplying a given value x with a random uniformly chosen
d ∈ QRN . It is easy to see that if x ∈ QRN then x · d is a uniformly random number in QRN .
However if x ∈ nQRN and |nQRN| > |QRN| then x · d will not be uniform in nQRN . In that case,
blinding done by the device might by ineﬀective.
It holds that |QRN| = |nQRN| if N = paqb where p, q are primes and a, b are positive integers.
(x ∈ QRN ) = 1/4. In any other case (N is the product of 3 or more powers of
(x ∈
QRN ) > 1/8 then this implies N = paqb. This can be in the (non programmable) random oracle
model in the following way. We generate 1, . . . , k3 random numbers using a strong Hash function.
The server (knowing the factorization of N ) publishes a single root for all the numbers that are in
QRN .
In that case Pr
x∈ZN
(x ∈ QRN ) ≤ 1/8. If we can prove to the device that with high probability Pr
x∈ZN
primes) Pr
x∈ZN
For i = 1, . . . , k3 :
1. vi = Hash(N||i) mod N .
2. if vi ∈ QRn:
√
(a) a,−a, b,−b =
(b) Publish (i, a)
v mod N
Any veriﬁer can check that vi = Hash(N||i) = a2
i mod N ∈ QRn.
We deﬁne NHQR = |vi ∈ QRN| and pQR = Pr
x∈ZN
NHQR can be viewed as the sum of k3 independent random variables bounded by the interval
[0, 1], and E(NHQR|pr = pQR) = k3 · pQR. Using Hoeﬀding’s inequality [Hoe63] we can show that:
(x ∈ QRN ).
Pr(NHQR ≥ k3/4|pQR ≤ 1/8) ≤ Pr(NHQR ≥ k3/4|pQR = 1/8)
= Pr(NHQR − k3/8 ≥ k3/8|pQR = 1/8)
= Pr(NHQR − E(NHQR) ≥ k3/8|pQR = 1/8)
≤ exp(−2
)
k2
3
82k3
) = exp(− k3
32
35
For k3 > 128 · 32/1.44 ≈ 2850 the probability of this event is smaller than 2−128. However if we
generate N correctly then Pr(NHQR ≥ k3/4) = 1/2. If for our chosen N , NHQR < k3/4 then we
just try to generate another N until the condition is satisﬁed.
This non-interactive proof reveals to the veriﬁer numbers that are in nQR (all the unpublished
numbers with Jacobi Symbol 1) that might be diﬃcult to learn. However this information cannot
be used by the device in our protocol. If needed this proof can be turned to one not revealing such
information by using the same blind and permute scheme we used in the protocol.
36