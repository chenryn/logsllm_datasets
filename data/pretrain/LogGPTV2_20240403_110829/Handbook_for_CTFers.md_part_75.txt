√ 4/101/104
10
QA
√ 4/101/104
11
0B
Keyboard h and H
36
√
√ 4/101/104
12
0C
1pue Ipueog/ery)
24
A
√ /101/104
13
0D
Keyboard and J
37
√ 4/101/104
Fig, 9.25 A partial mapping of the keyboard keys
9.4.1.4Summary of Traffic Packet Analysis
In CTF, there are various challenges on packet analysis, and the above is only a brief
introduction to the common technique points and basic problem-solving ideas. If
you encounter other types of challenges, you need to be familiar with the
corresponding protocols and analyze where information may be hidden.
9.4.2Memory Image Forensics
9.4.2.1 Introduction to Memory Image Forensics
The format of memory forensics challenges in CTF is to provide a complete memory
image or a kermel dump file, and the participant should analyze the information about 
the processes executing in the memory to find out what he/she needs. Memory
forensics is often used in conjunction with other forensics, and the commonly used
framework is Volatility, an open-source professional memory forensics tool from the
Volatility Open Source Foundation that supports memory image analysis for Win-
dows, Linux, and other operating systems.
9.4.2.2 Common Operations in Memory Image Forensies
When we get a memory image, we first need to determine the basic information
about the image, the most important of which is to determine what operating system
---
## Page 658
646
9Misc
tn =[4:27:27]
INFO
olatlltty
olattttty.
XPSP2X86)
er
Inage Type(
rvlce Pack)
:1
2019-01-1603:19:05 UTC+0000
Fig, 9.26 Get the basic information of the image
ltet
Tlne created
1356
000049b438 vnacth1p.exe
948
680 0x050c0 2019-01-16 03:16:24 UTC+800
1372
4
0 dxo6ad4000
854
932
00+3an #2t:t0 9t-10-6 001050x0 089
e0e23r992e svchost.exe
1064
680 x05080140 2019-01-16 03:1:24 UTC+8006
024
120 209-01-16 03110:24 UTC+0900
Fig, 9.27 Get the process information
the image belongs to. Use the imageinfo command in Volatility framework to get the
basic information of the image, see Fig. 9.26.
Once we have the image information, we can then use a specific profile to analyze
the image. Since a memory image is a context in which the computer is running at a
certain time, the first thing to get is what processes are running at that time. Volatility
provides several commands for analyzing processes, such as pstree, psscan, pslist,
etc. These commands vary in strength and output. Figure 9.27 shows the process
information obtained using psscan.
In addition, the filescan command can scan for open files, as shown in Fig. 9.28.
When a file or process is identified as suspicious in memory, you can use the
dumpfile and memdump commands to export the data and then perform binary
analysis on the exported data.
The Screenshot function can take a screenshot of the system at this moment, see
Fig. 9.29.
---
## Page 659
9.4 Forensic Techniques
L#9
Devtcelfarddskvat
sotrectery
ntceyrdats
Fig, 9.28 Scan for open files
Fig, 9.29 Take a screenshot
Volatility supports several unique features for different systems, such as the
ability to retrieve the text directly from the open Notepad process on Windows, or
the ability to Dump the password hash value contained in memory for the Windows
login.
Volatility supports third-party plugins, and many developers have developed
powerful plugins such as https://github.com/superponible/volatility-plugins. When
the commands that come with the framework don’t meet your needs, look for a good
plug-in.
9.4.2.3 Memory Image Forensics Summary
The memory forensics challenges can be easily solved by familiarizing ourselves
with the Volatility tool’s commands and being able to analyze the extracted files in
combination with other types of knowledge (e.g. image steganography, compressed
archive analysis, etc.).
---
## Page 660
89
9Misc
9.4.3DiskImage Forensics
9.4.3.1  Introduction to Disk Image Forensies
Disk forensics challenges in CTFs typically provide a disk image in an unknown
format, and participants are required to analyze usage traces left by the user to find
hidden data. Because disk forensics is file-based analysis, it is often presented in
conjunction with other examinations that look in the direction of forensics and more
closely resemble real forensic work. Disk forensics is generally more informative
than memory forensics, but because it contains more information, it is relatively easy
to locate a user’s specific usage traces. Disk forensics generally does not require
special software, unless it is a disk image in a special format, such as VMWare's
VMDK or Encase's EWF.
9.4.3.2Disk Image Forensics Common Operations
Similar to memory forensics, the first step in disk forensics is to determine the type of
disk and mount the disk, which can be done using the file command that comes with
UNIX/Linux, see Fig. 9.30.
After confirming the type, you can use the “fdisk l" command to view the
volume information on the disk and get the volume type, offset, etc. See Fig. 9.31.
d-CHS（0xfd,63,63），start
2:ID=0x5, start-HS（0xfe,0,1),end-CHS （0x26,63,63），startsector 1024128，
tit
Fig, 9.30 Determine the type of disk
Disk ewfl: 1 GiB,1073741824 bytes,2097152 sectors
ysical):512 b
tes / 512 bytes
Disk identifier: 0x2ce36279
Disklabel type: dos
loot
Start
End Secto
HeOS
1p5
10241911636991
612801299.2
1637855 1886975249921122M 7 HPFS/NTFS/exFAT
Fig, 9.31 Get the Volume type, offset, etc.
---
## Page 661
9.4 Forensic Techniques
619
sBadctus
sAttrDef
$LogFile
AUTO
sBitmap
SHFTMirr
pagefile.pif
efile
$VoLum
Fig, 9.32 The folder affer successful mounting
xacdxvfsvd@promote
cat.bash_history
Ls
ca
cdmac
LS
ne-
mv./mac/*./acdxvfsvd/*
sudomv./mac/*./acdxvfsvd/*
LS
cdmac/
LS
cd Downloads/
Fig, 9.33 Get history of file system operutions
Then you can use the “mount"d command to mount the disk image. The format of the
command is as follows.
   -  o - qumou
For local file mounts, the “loop” option is usually included, and if it is a multi-
partition image as described above, then the “offset”" option should be added and its
value should be specified. If the file system is not natively supported by the system, 
you need to install the relevant driver, such as NTFS-3g driver for NTFS file system
mounts under Linux. The folder after successful mounting is shown in Fig. 9.32.
Once mounted, the challenge author must have operated on the file system when
making the image, so the file system can be analyzed for traces of use in the ordinary
forensic steps. For example, in the “.bash_history" file in the Linux file system and
the Recent folder in Windows, there is a history of file system operations, see
Fig. 9.33.
---
## Page 662
059
9 Misc
Once a suspicious file is obtained, it can be extracted for binary analysis. In most
cases, the suspicious file itself uses other information hiding techniques, such as
steganography.
jo ssaeup anbun o to snog sauqo ad sosuag aru xsp sos
certain file systems, such as inode recovery in the EXT series file system, FAT table
recovery in the FAT series file system, the snapshot characteristics of the APFS file
system, and nanosecond time stamp characteristics, etc. When you encounter bot-
tlenecks in file analysis, you may wish to understand the characteristics of the file
system itself to find a breakthrough.
9.4.3.3 Disk Image Forensics Summary
Disk forensics challenges are similar to memory forensics challenges, often com-
bined with compressed archive analysis, image steganography, and other types of
challenges. As long as the participants are familiar with common images, can
determine the types of images and mount or extract files, and with a certain
understanding of the file system, they can successfully solve the disk forensics-
related challenges.
9.5 Summary
As CTFs continue to evolve, Misc-type challenges examine a broader range of
knowledge points and are more and more difficult than the simple picture steganog-
raphy of a few years ago. Due to space limitations, this chapter only briefly
introduces a few of the more frequently occurring misc challenges in CTFs. As
noted in the introduction to this chapter, in high-quality competitions, in addition to
the types of routine challenges described in this chapter, participants often encounter
Jo apamoux na jo peax pue qdap otp oo ison s soueqo paou ueu
their ability to leam quickly. They require a certain amount of computer expertise,
search engines, reading a lot of material, and rapid learning to solve the challenges.
---
## Page 663
Chapter10
Code Auditing
In CTF contests, there are often a variety of code auditing challenges, and it can be
said that the code auditing procedures in the CTF challenges are very close to reality.
The essence of code audit is to find defects in the code, this chapter only takes the
mainstream PHP and Java languages code audit as an example, so that the reader not
only understands the CTF code audit challenges but also can accumulate some real-
world code audit experience.
10.1 PHP Code Auditing
10.1.1EnvironmentBuilding
As the saying goes, *A handy tool makes a handyman", before formally auditing
PHP code, you need to make sure that you have the right tools and development
PHP code auditing can be divided into two main approaches, static analysis and
dynamic analysis.
• Static analysis is the process of analyzing the PHP program to find problems in it
without actually executing it.
• Dynamic analysis is the process of executing the PHP program on a real or virtual
processor, and by observing the values generated at runtime, such as variable
contents, function execution results, etc., the purpose is to clarify the code flow,
analyze function logic, etc., and dig out the loopholes from it.
Since there are many techniques for dynamic debugging, this section takes dynamic
debugging as an example and explains in detail how to build a dynamic debugging
environment.
First, you need to install PHP to your computer. Since there are many prebuilt
PHP integrated environments, such as xampp, phpstudy, mamp, etc. in this part we
C The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2022
651
NulL Team, Handbook for CTFers,
htps:/doi.crg/10.1007/978-981-19-0336-6_10
---
## Page 664
652
10  Code Auditing
Installation Wizard
el Rgeovg nvirnng. Pease
age helps yo
tocsnfigure PHP!
Fig, 10.1 DLL file
will choose phpstudy, you can choose any PHP development environment according
to your own preference. After installing the PHP, you shoud install XDebug which is
the extension for dynamic analysis (you can go to XDebug’s homepage htps://
xdebug.org/download.php to download a compatible version with your own
environment).
If you don’t know the version of XDebug to choose or don’t know how to install
it, you can use the tools provided by https:/xdebug.org/wizard.php (see Fig. 10.1)
and then visit the local environment's phpinfo page in your browser (see Fig. 10.2).
Click the “Analyse my phpinfo output° button. Paste the entire phpinfo output into
the text box in Fig. 10.1 and click the “Analyse my phpinfo output”" button to see
the installation guide that XDebug provided, see Fig. 10.3.
Then download the DLL file given in Fig. 10.3 and place it in the ext directory of
the PHP directory, and modify the php.ini file. Open the php.ini file and add the
following lines to the end of that file.
[6nqoαx]
: The directory vhere the profiler output wi11 be vritten to, make sure
directory.
that the user vho the PHP vi11 be running as has write permissions to that
xdebug pzofiler_output_dir=*C:\phpStudy^,PHPTutorial\tmp^xdebuga
---
## Page 665
10.1 PHP Code Auditing
653
Verslon 5.6.27
php
Fig, 10.2 phpinfo
SUMMARY
· Xdebug installed:no
•Server APl: CGI/FastCG1
BECOMEAPATRON
• Windows: yes - Compiler: MS VC14 - Architecture:
x86
• Zend Server: no
• PHP Version: 7.1.13
• Zend API nr: 320160303
• PHP API nr: 20160303
• Debug Build: no
• Thread Safe Build: no
· OPcache Loaded: no
• Configuration File Path: CΛWindows
• Configuration File: C:\phpStudyPHPTutorialphp\php-7.1.13-nts\(php.ini
• Extensions directory: CphpStudyPHPTutorialphp\php-7.113-nts\ext
INSTRUCTIONS
1. Dowmload php_xdebug-27.2-7.1-vc14-nts.dll
2. Move the downloaded file to C:(phpStudyPHPTutorialphp\php-7.1.13-nts\/ext
3. Edit c:ptllsf.1 1p,  and add the line
sendesteme = C:g5tudrils7. 1.12mtss_g-2..2, 1-1-mts.d11
4. Restart the webserver
Fig, 10.3 The installtion guide that XDebug provided
---
## Page 666
654
10  Code Auditing
xdebug
BECOME A PATRON
Fig, 10.4 The keyword “xdebug" in phpinfo
: directory to store stack trace file (change according to your owm
xdebug . trace_output_dir=*C:\\phpStudy\,pHPTutorialtmp^xdebug*
environment)
: path to the xdebug library file (change according to your ovn
zend_extension = "C: \phpStudy^,PHPTutoria1\\php-7 . 1 . 13-nts′ext
environment) .
php_xdebug-2 . 7. 2- 7 . 1-vc14 -nts.d11*
: enable remote debugging
xdebug .remote_enable = On
xdebug. remote_host=*127 , 0.0.1*
: IP Address
: poxt that xdebug to listen on and corresponding protoco1 .
xdebug.remote_port=9000
xdebug .remote_handler=dbgp
: Ldekey
xdebug pzofilex_enable = On
xdebug . 1dekey=*PHPSTORM*
xdebug.auto_trace=On
xdebug.co1lect_params=On
xdebug.co1lect_return=On
Save the file, restart Apache, open the phpinfo page, and then search for the
keyword *xdebug". If you can find the content shown Fig. 10.4, it means your
configuration is correct.
Once the XDebug is configured, you need to download an IDE named with
PhpStorm to use it (you can find how to install it on your own). After installation,
“Languages&Frameworks  PHP  Debug*. “and set the debug port to 9000" see
launch PhpStorm, select “Configure  Settings" (see Fig. 10.5), and then select
Fig. 10.6).
Click the Debug menu on the left to configure the DGBp Proxy, and fill in the
“PHPSTORM". Please fill in "127.0.0.1" in “Host” and “900" in “Port", see
“IDE key” with the same value as in php.ini, ie. “PHPSTORM", “Host", and
Fig. 10.7.
After the preparation work is completed, you can start debugging the PHP
program. Firstly, you should use PhpStorm to open a local PHP website. Here,
---
## Page 667
10.1 PHP Code Auditing
655
PhpStorm
on 2019.1.2
Op
C
 Che
Mugrns
mport Setings
Nun Covfiguration Ten
tes tor New Pse
Fig, 10.5 phpstorm settings
4. Start dbug ein n bwerwith the toolbar r bokmarets.
> JavaScript
For more information follow Zero-configus
v PHP
mections
Composer
Test Fram
oris
Eres at fst in PHP scripts
Quality Tools
Max.
6u4d
Smarty
Xdebug
Sche
and DTDs
Debug port 9000
 Can accept extemal connections