view of all parties over all rounds; here we have suppressed the
dependency on security parameter κ. The randomness is defined
over the choice of function H(·), as well as any randomness in the
adversary A or environment Z. Our goal is to reason about the
joint view for all possible adversaries A and environments Z. In
particular, we want to study the evolution of Cr
, or the blockchain
i
of each honest node i ∈ H during round r. Following the Bitcoin
backbone protocol model [9], we consider protocols that execute
for a finite execution horizon rmax, polynomial in κ. Our primary
concern will be the efficiency of confirming transactions.
Definition 2.1. We say a transaction tx is (ε, A,Z, r0, κ)-cleared
iff under an adversary A, environment Z, and security parameter κ,
PVIEWΠ,A,Z
r ∈{r0, ...,rmax}
i∈H
where b ∈ {0, 1}; b = 1 corresponds to confirming the transactions
and b = 0 corresponds to rejecting the transaction.
That is, a transaction is considered confirmed (resp. rejected) if
all honest party will include (resp. exclude) it from the ledger with
5

(cid:169)(cid:173)(cid:173)(cid:173)(cid:171)
i ) = b(cid:9)(cid:170)(cid:174)(cid:174)(cid:174)(cid:172) ≥ 1 − ε − negl(κ),
(cid:8)д(tx, Cr
Figure 4: Snapshot of a miner’s blocktree: The previously
mined blocks have solid boundary whereas blocks which
are being mined have dotted-boundary. A miner simultane-
ously mines on p1, parent on proposer blocktree, vi, parent
on voter block blocktree i(∀i ∈ [m]).
probability more than ε plus a term negligible in κ resulting from
hash collisions, which we ignore in our analysis. We suppress the
notation κ from here on.
Our objective is to optimize two properties of a blockchain pro-
tocol: the throughput and latency of confirming transactions. We
let |S| denote the number of elements in set S. We let T denote the
set of all transactions generated during the execution horizon, and
T r denote all transactions delivered up to and including round r.
Definition 2.2 (Throughput). We say a blockchain protocol
Π supports a throughput of λ transactions per round if there exists
Uε ,linear in log(1/ε), such that for all environments Z that produce
at most λ transactions per round, and for ∀ r ∈ [1, rmax],
: tx is not (ε, A,Z, r)-cleared(cid:9)(cid:12)(cid:12) < λUε .
(7)
The system throughput is the largest throughput that a blockchain
protocol can support.
(cid:12)(cid:12)(cid:8)tx ∈ T r
max
A
Notice that although |T r | grows with r, the right-hand side of
(7) is constant in r; this implies that the system throughput λ is
the expected rate at which we can clear transactions maintaining
a bounded transaction queue, taken worst-case over adversary A
and environments Z producing at most λ∆ transactions per round.
Definition 2.3 (Latency). For a transaction tx, let r(tx) denote
the round in which the transaction was first introduced by the env-
ioronment, and let random variable Rε(tx) denote the smallest round
r for which tx is (ε, A,Z, r)-cleared. The expected ε-latency of trans-
action tx is defined as:
τε(tx) ≜ max
(8)
Note that if all transactions have finite ε-latency, it implies that
Z,A EVIEWΠ,A,Z [Rε(tx) − r(tx)]
the blockchain has both consistency and liveness properties.
3 PROTOCOL DESCRIPTION
We first describe the content and roles of three types of blocks in
the Prism(Π, д) blockchain. We then present Algorithm 1, which
defines the protocol Π and the blockchain data structure C. We
then define the ledger inclusion rule, д, in Algorithm 2. Due to space
constraints, all pseudocode for these algorithms can be found in
GGProposer blocktreeVoter blocktree 𝑖Proposer blockVoter blockVoter block minedVotesProposer block mined𝑝#$%		Reference LinkTransaction blockTrans. block minedParent blocks𝑣(𝑝)𝑣#$%(Appendix A. Prism’s blockchain data structure, C, has one proposer
blocktree and m voter blocktrees, as shown in Figure 3. We use
these different blocktrees to maintain three distinct types of blocks:
Proposer blocks: Proposer blocks represent the skeleton of the
Prism blockchain and are mined on the proposer blocktree accord-
ing to the longest-chain rule. The level of a proposer block is defined
as its distance from the proposer genesis block. The blocktree struc-
ture is only utilized in our protocol as a proof of level of a given
proposal block. To construct the ledger, our protocol selects pro-
posal block sequences where one block is chosen at each level.
Proposer blocks can refer to transaction blocks and other proposer
blocks by including pointers to referred blocks in their payload. For
example, in Fig 4, the proposer blocktree has two proposer blocks
mined at level 1, and one proposer block mined at levels 2 and 3,
and they point to five transaction blocks in total.
Voter blocks: Voter blocks are mined on m separate voter block-
trees, each with its own genesis block, according to the longest
chain rule. We say a voter block votes on a proposer block B if it
includes a pointer to B in its payload. Note that unlike many BFT
consensus protocols, a malicious miner in Prism cannot equivocate
when voting because voter blocks are sealed by proof of work. Even
if a miner mines conflicting voter blocks and tries to send them
to disjoint sets of honest users, all users will receive both blocks
within one round. Each longest chain from each voter blocktree
can cast at most one vote for each level in the proposer blocktree.
More precisely, a voter block votes on all levels in the proposer
tree that are unvoted by the voter block’s ancestors. Therefore,
the voter trees collectively cast at most m votes on a given level
of the proposer blocktree. Fig. 3 shows voter blocktree i and its
votes (dotted arrows) on each level of the proposer blocktree. For
each level ℓ on the proposer blocktree, the block with the highest
number of votes is defined as the leader block of level ℓ.
Transaction blocks: Transaction blocks contain transactions and
are mined on the proposer blocktree as in Fig. 3. Although transac-
tion blocks are not considered part of the proposer blocktree, each
transaction block has a proposer block as its parent.
The process by which a transaction is included in the ledger is
as follows: (1) the transaction is included in a transaction block BT .
(2) BT is referred by a proposer block BP . (3) Proposer block BP is
confirmed, either directly (by becoming a leader) or indirectly (e.g.,
by being referred by a leader).
Protocol Π
3.1
Algorithm 1 presents Prism’s protocol Π. The protocol begins with
a trusted setup, in which the environment generates genesis blocks
for the proposer blocktree and each of the m voter blocktrees. Once
the trusted setup completes, the protocol enters the mining loop.
Whereas Bitcoin miners mine on a single blocktree, Prism min-
ers simultaneously mine one proposer block, one transaction block,
and m voter blocks, each with its own parent and content. This
simultaneous mining happens via cryptographic sortition. Roughly,
a miner first generates a “superblock” that contains enough infor-
mation for all m + 2 blocks simultaneously. It then tries different
nonce values; upon mining a block, the output of the hash is deter-
ministically mapped to either a voter block (in one of the m trees),
a transaction block, or a proposer block (lines 41-47 in Algorithm
1). After sortition, the miner discards unnecessary information and
releases the block to the environment.
More precisely, while mining, each miner maintains outstanding
content for each of the m + 2 possible mined blocks. In Bitcoin, this
content would be the transaction memory pool, but since Prism
has multiple types of blocks, each miner stores different content for
each block type. For transaction blocks, the content consists of all
transactions that have not yet been included in a transaction block.
For proposer blocks, the content is a list of transaction blocks and
proposer blocks that have not been referred by any other proposer
block. For voter blocks in the ith voter tree, the content is a list
of proposer blocks at each level in the proposer blocktree that has
not yet received a vote in the longest chain of the ith voter tree.
If a miner observes multiple proposer blocks at the same level, it
always votes on the first one it received. For example, in Figure
4, voter block vi
new votes on one proposer block on levels 3 and 4
because its ancestors have voted on level 1 and 2.
Upon collecting this content, the miner generates a block. Instead
of naively including all the m +2 parents5 and content hashes in the
block, Prism’s header contains a) the Merkle root of a tree with m+2
parent blocks, b) the Merkle root of a tree with m + 2 contents, and
c) a nonce. Once a valid nonce is found, the block is sortitioned into
a proposer block, a transaction block, or a voter block on one of the
m voter trees. The mined, sortitioned block consists of the header,
the appropriate parent and content, and their respective Merkle
proofs. For instance, if the mined block is a proposer block, it would
contain only the proposer parent reference, proposer content, and
appropriate Merkle proofs; it would not store transactions or votes.
While mining, nodes may receive blocks from the network,
which are processed in much the same way as Bitcoin. Upon receiv-
ing a new block, the miner first checks validity. A block B is valid if
it satisfies the PoW inequality and the miner has all the blocks (di-
rectly or indirectly) referred by B. If the miner lacks some referred
blocks, it requests them from the network. Upon receiving a valid
transaction block B, the miner removes the transactions in B from
its transaction pool and adds B to the unreferred transaction block
pool. Upon receiving a valid voter block, the miner updates the
longest chain if needed, and updates the vote counts accordingly.
Upon receiving a valid proposer block B at a level ℓ higher than the
previous highest level, the miner makes B the new parent proposer
block, and updates all m voter trees to vote on B at level ℓ.
3.2 Ledger confirmation rule д
As defined before, the proposer block with the most votes on level ℓ
is defined as the leader block of level ℓ. The leader block for a fixed
level ℓ can initially fluctuate when the voter blocktrees start voting
on level ℓ. However, as the voter blocktrees grow, these votes on
level ℓ are cemented deeper into their respective voter blocktrees
and the leader fluctuation ceases and thus we can confirm the leader
block at level w.h.p. The sequence of leader blocks for each level of
the proposer blocktree is defined as the leader sequence.
Confirmation and Ordering: A set of transactions can often be
individually confirmed before being ordered among themselves.
For this reason, confirming transactions is easier than ordering
5Proposer and tx block share the same parent and are included twice for simplicity.
6
4 ANALYSIS
In this section, we analyze three aspects of Prism: security, through-
put, and latency. Before listing the formal guarantees satisfied by
Prism, we first describe at an intuitive level why Prism is able to
achieve good latency without sacrificing security.
4.1 Intuition and Sketch of Proofs
In the longest-chain protocol, for a fixed block size and network,
the maximum tolerable adversarial hash power β is governed by the
block production rate; the faster one produces blocks, the smaller
the tolerable β [9, 18]. In Prism, we need to be able to tolerate
β adversarial hash power in each of the voter trees and and the
proposer tree. Hence, following the observations of [9, 18] each of
these trees individually must operate at the same rate as a single
longest-chain blocktree in Bitcoin in order to be secure.
The security of Prism is provided by the voter trees; a proposer
block is confirmed by votes which are on the longest chains of
these voter trees. Consider a conservative confirmation policy for
Prism, where we wait for each vote on each voter tree to reach a
confirmation reliability 1 − ε before counting it. This would require
us to wait for each vote to reach a depth of k(ε) in its respective tree,
where k(ε) denotes the confirmation depth for reliability 1− ε. This
conservative confirmation rule immediately implies that Prism has
the same security guarantee as that of each of the voter tree, i.e. that
of Bitcoin. However, this rule has as poor a latency as Bitcoin’s. For
example, for ε = 10−3 and the tolerable adversary power β = 0.3,
the vote has to be 24 blocks deep [16]. With a more intelligent
transaction confirmation rule, we can do far better. The key insight
is that even though each vote individually stabilizes at the same
rate at Bitcoin (i.e., slowly), the aggregate opinion can converge
much faster because there are many voter trees.
4.1.1 Case 1: Isolated Proposer Block
Consider first the situation when a transaction block TB is referred
to by a honest proposer block H which is currently isolated at its
level, i.e. no other public proposal block exists at the same level for
a certain fixed number of rounds. See Figure 6(a). This case is quite
common since the mining rate of the proposer blocks is chosen
such that there is little forking in the proposer tree. Block H will
start collecting votes, each of which is on the longest chain of its
respective voter tree. Over time, each of these votes will become
deeper in its voter chain. An attack by the adversary is to mine a
private proposal block A at the same level, and on each of the voter
trees fork off and mine a private alternate chain and send its vote
to the block A. After leader block H is confirmed, the adversary
continues to mine on each of the voter alternate chains to attempt
to overtake the public longest chain and shift the vote from H to A.
If the adversary can thereby get more votes on A than on H, then
its attack is successful.
This can be viewed as the m-chain analog to Nakamoto’s private
attack on a single chain [16], where instead of having one race
between the honest chain and the attack chain we have m such
races. In fact, Nakamoto’s calculations on the success probability of
an attack on a single chain can help us determine how deep we need
to wait for the votes to become to confirm the proposer block H.
At tolerable adversary power β = 0.3, the reversal probability in a
Figure 5: BuildLedger(): The proposer blocks for a given
proposer block sequence are blue, and the referenced trans-
action blocks are green. Each shade of gray region is all the
tx blocks referred by the proposer block.
the transactions. For example, consider the following two trans-
actions a) Alice pays Bob 10$, and b) Carol pays Drake 10$. Both
these transactions can be individually confirmed without deciding