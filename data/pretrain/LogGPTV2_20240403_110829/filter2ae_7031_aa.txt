### 前言
> PbootCMS是全新内核且永久开源免费的PHP企业网站开发建设管理系统，是一套高效、简洁、 强悍的可免费商用的PHP
> CMS源码，能够满足各类企业网站开发建设的需要。
环境:
  * Apache 2.4.39
  * PHP 7.3.8
### 分析
该程序的特点是默认使用的`sqlite`数据库
可以看看数据库的配置文件`config/database.php`
     array(
            'type' => 'sqlite', // 数据库连接驱动类型: mysqli,sqlite,pdo_mysql,pdo_sqlite
            'host' => '127.0.0.1', // 数据库服务器
            'user' => 'pboot', // 数据库连接用户名
            'passwd' => '123456', // 数据库连接密码
            'port' => '3306', // 数据库端口
            // 'dbname' => 'pbootcms' // 去掉注释，启用mysql数据库，注意修改前面的连接信息及type为mysqli
            'dbname' => '/data/pbootcms.db' // 去掉注释，启用Sqlite数据库，注意修改type为sqlite
        )
    );
默认的数据库路径是`/data/pbootcms.db`，且data目录下没有进行任何的判断，后台也没有提供修改数据库路径的功能，所以可直接下载。
下载后用`sqlite3`打开就可以得到用户的hash，hash使用的是`md5(md5($pass))`生成的。
所以这里直接挖后台的洞
#### 任意文件读取
漏洞文件`apps/admin/controller/system/UpgradeController.php`
     $path,
                                'dfile' => $des_path
                            );
                        }
                    }
                    // 更新数据库
                    if (isset($sqls)) {
                        $db = new DatabaseController();
                        switch (get_db_type()) {
                            case 'sqlite':
                                copy(DOC_PATH . $this->config('database.dbname'), DOC_PATH . STATIC_DIR . '/backup/sql/' . date('YmdHis') . '_' . basename($this->config('database.dbname')));
                                break;
                            case 'mysql':
                                $db->backupDB();
                                break;
                        }
                        sort($sqls); // 排序
                        foreach ($sqls as $value) {
                            $path = RUN_PATH . '/upgrade' . $value;
                            if (file_exists($path)) {
                                //echo $path;
                                //exit;
                                $sql = file_get_contents($path);
                                if (! $this->upsql($sql)) {
                                    $this->log("数据库 $value 更新失败!");
                                    json(0, "数据库" . basename($value) . " 更新失败！");
                                }
                            } else {
                                json(0, "数据库文件" . basename($value) . "不存在！");
                            }
                        }
                    }
                    // 替换文件
                    if (isset($files)) {
                        foreach ($files as $value) {
                            if (! copy($value['sfile'], $value['dfile'])) {
                                $this->log("文件 " . $value['dfile'] . " 更新失败!");
                                json(0, "文件 " . basename($value['dfile']) . " 更新失败，请重试!");
                            }
                        }
                    }
                    // 清理缓存
                    path_delete(RUN_PATH . '/upgrade', true);
                    path_delete(RUN_PATH . '/cache');
                    path_delete(RUN_PATH . '/complite');
                    path_delete(RUN_PATH . '/config');
                    $this->log("系统更新成功!");
                    json(1, '系统更新成功！');
                } else {
                    json(0, '请选择要更新的文件！');
                }
            }
        }
        ...
    ?>
可以看到注释写着更新数据库的部分，将`$sqls`遍历出来后放进了`file_get_contents`函数，然后调用了一个`upsql()`方法。跟过去看一下。
    amd($value);
                }
            }
            return true;
        }
    ?>
将传过来的字符串用`;`分隔后又调用了一个`Model::amd()`方法。继续跟下去。
文件`core/database/Sqlite.php`
    query($sql, 'master');
            if ($result) {
                return $result;
            } else {
                return 0;
            }
        }
        // 执行SQL语句,接受完整SQL语句，返回结果集对象
        public function query($sql, $type = 'master'){
            ...
            switch ($type) {
                case 'master':
                    if (! $this->begin) { // 存在写入时自动开启显式事务，提高写入性能
                        $this->master->exec('begin;');
                        $this->begin = true;
                    }
                    $result = $this->master->exec($sql) or $this->error($sql, 'master');
                    break;
                case 'slave':
                    $result = $this->slave->query($sql) or $this->error($sql, 'slave');
                    break;
            }
            return $result;
        }
        // 显示执行错误
        protected function error($sql, $conn){
            $err = '错误：' . $this->$conn->lastErrorMsg() . '，';