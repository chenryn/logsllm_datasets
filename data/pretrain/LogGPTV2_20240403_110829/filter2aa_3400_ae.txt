4.3.2.2 源代码安全扫描（SAST）
源代码安全扫描在 DevOps 过程中的检测点主要有：开发人员本地源代码安全检测、代码提交时进行源代码安全检测、CI 构建过程中进行源代码
安全扫描。
针对 SAST，安全团队最初采用了商业工具 Fortify 及 Appscan Source。但在实际应用中存在两个问题：误报太多及扫描速度太慢，这些因素都会
拖累 DevOps 交付速度。基于软件开发成熟度现状，为了更好的集成到 DevOps 流程，安全团队放弃商用工具，转而使用开源 SonarQube+Find 
Security Bugs 插件取代。
2 0 2 0  D e v S e c O p s 企 业 实 践 白 皮 书
图 轻量级威胁建模
16
FreeBuf 咨询荣誉出品 
4.3.2.3 黑盒安全测试（DAST）
安全团队目前采用的黑盒安全测试工具有 AppScan、AWVS、OWASP ZAP 和 Arachni，通过自研三叉戟自动化安全测试平台进行封装和分布式扫
描调度，提供 API 方式给 DevOps 平台进行集成。不过由于研发测试环境没有统一的测试 Token，无法有效进行登录式扫描，因此也在探索基于
流量代理或镜像方式的黑盒安全测试技术。
4.3.2.4 交互式应用安全测试(IAST)
IAST可在软件集成测试阶段无缝集成到DevOps，测试人员在执行功能测试的同时，无感知的完成应用安全测试。对此，引入了IAST工具Contrast 
Security，集成至DevOps平台中进行自动化安全测试。
4.3.2.5 开源组件安全扫描(SCA)
针对开源组件的安全治理实践如下：
-引入开源组件的安全扫描工具：引入商业的BlackDuck，支持安全风险及许可证合规检测。
-自动化集成：将开源组件扫描工具和研发DevOps平台工具链CI过程集成。 
图 自动化安全测试平台
图 IAST 扫描结果
CHAPTER FOUR
17
2 0 2 0  D e v S e c O p s 企 业 实 践 白 皮 书
FreeBuf 咨询荣誉出品 
-建立开源组件资产库：在CI日常构建过程中，开源组件扫描工具会进行软件组成分析，形成应用程序的开源组件清单。当开源组件安全漏洞信息被披
露时，安全团队可立刻判断受影响程度并通知项目组进行漏洞修复。
-建立内部安全开源组件仓库：应用构建时，第三方组件都从该仓库获取，可保证应用不包含已知漏洞的组件，降低安全风险。
-制定开源组件使用策略：禁止开发人员私自下载第三方组件，设置专人进行开源组件仓库管理。
-持续监测开源组件威胁：如组件出现安全漏洞，及时通知项目组进行漏洞，同时更新为安全版本。
-Docker安全配置基线：
首先根据Docker安全标准整理得到“Docker容器安全实践指南”，该指南包括了主机安全配置、Docker守护进程配置、Docker守护程序配置文件、容器
镜像和构建、容器运行安全、Docker安全操作等方面，为研发及运维人员提供Docker安全加固指南，降低Docker安全风险。
图 开源组件安全扫描
图 容器安全生命周期管理
4.3.2.6 容器全生命周期安全管理
利用完整的安全工具链对容器进行检测、监控及修复，保障容器镜像及运行环境的安全，形成了一套行之有效的容器安全最佳实践，建立了容器全生
命周期安全管理方法论，
18
2 0 2 0  D e v S e c O p s 企 业 实 践 白 皮 书
FreeBuf 咨询荣誉出品 
-Kubernetes安全：
其次，Kubernete作为容器云的编排服务和集群运行环境，直接关系到容器的运行安全。根据实践总结了Kubernetes部署安全指南，用于指导
Kubernetes的安全部署。
-内部安全镜像仓库：
制定严格的内部安全镜像仓库管理策略：
1）协调开发团队和安全团队合作，共同建立和更新内部镜像仓库，并要求企业所有容器构建仅限于内部安全镜像仓库，禁止从互联网获取镜像资源；
2）开源组件依赖包统一由质量团队管理、操作系统和相关应用包统一由安全团队管理。各团队在开发测试及生产环境专门搭建本地私用库，由固定服
务器外连指定的少数可信源（官方或官方认证站点）；
3）运维人员如需互联网Docker镜像仓库拉取镜像时，必须经过Docker安全扫描，确认无安全漏洞，才可拉取到内部安全镜像仓库；
4）第三方开源组件入库时触发开源组件安全扫描工具，进行已知开源组件漏洞检测，如有漏洞则进行隔离和提示管理员，确认无安全漏洞的开源组件
才可入库。
-容器安全扫描工具自动化集成：
目前生产环境的Docker主机均从内部私有Registry中提取生产镜像。当构建工具上传镜像到私有Registry后，容器安全扫描器会从该Registry中获取
镜像的副本，实施安全测试。
-容器安全风险度量及可视化：
为了对项目组的容器安全风险进行度量及直观展示，从容器镜像的项目分布、安全漏洞、操作系统等纬度进行了可视化展示，便于项目组进行容器安
全风险的持续监控及容器安全漏洞的修复。
图 容器安全风险度量可视化
4.3.2.7  威胁监控
安全团队基于开源技术及其他商业产品能力集成，自研人工智能安全态势感知平台，主要功能包括：海量安全日志集中化管理、NTA网络流量分析、网
络安全威胁态势可视化、UEBA内部用户行为分析、TI情报中心、EDR端点检测与响应、SOAR安全编排与自动化响应等。
CHAPTER FOUR
19
2 0 2 0  D e v S e c O p s 企 业 实 践 白 皮 书
FreeBuf 咨询荣誉出品 
图 人工智能安全态势感知平台
4.3.2.8  安全响应
漏洞响应的主要流程如下：
-漏洞情报：从厂商公告、安全情报厂商、安全社区和朋友圈等渠道获取漏洞情报。
-漏洞评估：根据漏洞影响的资产类型、公司资产数据库，确定受影响的服务器以及应该参与响应的系统管理员，按照严重（严重可被exp的RCE漏洞）、
高危（其他可被exp的远程利用漏洞）、中危（可被exp的本地其他漏洞）和低危（其他漏洞）四级分类。
-预警定级：预警通告等级分为三级，由高到低依次用红色、橙色和黄色表示，分别对应发生或可能发生一级、二级和三级事件。
-发布预警：通过邮件方式对全IT发布预警，给出已知受影响的系统名称、IP地址、人和团队等信息，同时要求其他人员开展自查，防止遗漏。
-组织修复：系统管理员根据官方给出的修复方式组织修复，安全运营人员联系网络层IPS厂商获取IPS特征签名，并下发全网。
-验证修复：利用漏洞扫描器、POC脚本等方式对漏洞进行修复验证，使用漏洞扫描器进行全网扫描。
-解除预警：通过邮件方式解除预警。
20
2 0 2 0  D e v S e c O p s 企 业 实 践 白 皮 书
告警
日志
SOAR
联动
安全大运营
安全日志
事件响应平台
监管与公安指挥
第三方设备
资产库
情报中心
SOC/SIEM
安全智能化分析
内部用户行为分析
外部反欺诈
海量日志管理
通过收集、处理、分析企业安全数据，借助外部威胁情报和大数据分析技术提高效率，赋能公司安全响应中心运营人员检测、响应和预测内、外部威胁
和事件，持续降低企业攻陷检测时间（MTTD）和攻陷响应时间（MTTR），实现对企业面临的内外部威胁快速检测、实时分析和自动化处置能力，使得企
业具备安全可知、可见、可控的全网安全态势感知能力。
图 技术及运营指标
FreeBuf 咨询荣誉出品 
图 安全漏洞响应 RPA
图 安全工具链
在安全运营过程中，为了实现安全漏洞的快速响应，安全团队还对漏洞响应过程进行了工程化，实现了安全漏洞响应RPA。
目前DevOps中安全工具自动化包括：DEV环境的源代码安全扫描SAST、开源组件安全扫描SCA、移动APP加固，SIT阶段的Docker安全扫描、黑盒安
全扫描DAST及交互式安全扫描IAST。此外也在开发自动化安全测试平台，将各种商业/开源安全工具，如源代码安全扫描、黑盒安全扫描、渗透测试
工具等集成进来，对外提供集成安全测试能力支持，并通过API接口方式集成到DevOps平台。
DevSecOps核心理念之一，是要工具化和自动化，所以工具必不可少。机构已经初步建立了端到端完整的安全工具链，并自动化集成到DevOps流
程中。
4.3.4  企业安全平台实践
CHAPTER FOUR
21
2 0 2 0  D e v S e c O p s 企 业 实 践 白 皮 书
FreeBuf 咨询荣誉出品 
图 SDL 安全开发全流程赋能平台
图 DevOps 中安全活动门限及度量指标
安全团队自主研发了人工智能安全态势感知平台、内部用户行为分析平台、应用安全工程中台等，通过赋能研发运营一体化过程，助力DevSecOps
安全运营效能的提升。
DevSecOps之所以落地困难，原因其一在于很多企业认为无法度量安全工作的效果。对此，该金融机构安全团队从度量指标、驱动运营及软件安全
成熟度模型三方面来解决DevSecOps效能的度量问题。
DevSecOps过程度量指标：制定了DevOps过程中安全活动对应的门限及度量指标，通过门限控制软件进入制品库的度量标准，通过度量指标来衡
量项目的安全成熟度。
4.3.5  DevSecOps安全度量指标
22
2 0 2 0  D e v S e c O p s 企 业 实 践 白 皮 书