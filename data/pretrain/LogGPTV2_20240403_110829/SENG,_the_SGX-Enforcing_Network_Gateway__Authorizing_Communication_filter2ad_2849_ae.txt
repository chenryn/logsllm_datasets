### Deviating Enclave Identities (mrenclave)
During remote attestation, the SENG server will reject the tunnel if the enclave identity (mrenclave) deviates from the allowlist. This ensures that only known and trusted enclaves can establish a connection.

### A04: Fake/Custom Enclave (SR4)
An adversary may attempt to establish a tunnel directly to the SENG server or from within a custom enclave. The SENG server expects a valid, correctly-signed attestation report. Direct connections with attacker-crafted fake reports will be refused. If the adversary contacts the SENG server from a custom enclave, the attestation report will be valid but not in the allowlist, leading to the rejection of the connection as in the previous attack (A03).

### A05: Client Impersonation (SR4+SR5)
Attackers might try to impersonate a trusted client application. They could intercept an allowlisted attestation report and embed it into their own client certificates. However, the report will not be bound to the certificate, and the SENG server will detect the mismatch and deny access. Alternatively, attackers could spoof an IP address from a trusted enclave subnetwork. The SENG-enabled gateway can identify this non-tunneled traffic as unauthenticated and drop the packets (see Section 6.4).

### A06: Server Impersonation (SR2)
An attacker could try to impersonate the SENG server by intercepting connection attempts. If successful, the adversary could gain access to all connections of the shielded application, including unprotected legacy traffic. However, the SENG runtime pins the valid SENG server key (Ksrv) and checks it during the DTLS handshake to detect such impersonation attacks.

### A07: Attacking SENG Keys (SR2)
SENG implements secure key management to prevent various attacks on tunnel security:
- **Rollback Attacks**: Rollback attacks against SENG’s server public key (Ksrv) are not possible because Ksrv is not sealed to disk and is integrity-protected (A02). A rollback of the entire app bundle, including Ksrv, LibOS, and all dependencies, results in a deprecated, blocked report (A03).
- **Breach of Private Key**: If a private key of the SENG (or attestation) server is compromised, SENG blocks all vulnerable reports, thus preventing enclaves with stolen keys from connecting (cf. Section 5.4).
- **Forward Secrecy**: DTLS supports ciphers with perfect forward secrecy, ensuring that established tunnels are not affected by a breach of the SENG server key (K−1_srv).
- **Client RSA Key Pair**: The client RSA key pair (Kenc, K−1_enc) is freshly generated for every new enclave instance, and the private key (K−1_enc) never leaves the enclave, providing protection against attackers (cf. A01).

### A08: Tunnel Tampering (SR2)
Tampering with established tunnel connections is not possible due to the end-to-end security guarantees of DTLS. An adversary can reorder or drop tunnel packets, which is explicitly supported by DTLS. However, tunneled UDP connections do not require reliable or in-order delivery, and the endpoint network stacks ensure reliability and ordering for TCP packets (Sec. 6.1).

### A09: DNS Spoofing (SR3)
An attacker may try to leak information by redirecting connections of shielded apps via DNS reply spoofing. SENG shields DNS traffic using multiple methods:
- **Untrusted Resolver Functions**: Spooﬁng the results of untrusted resolver functions is prevented by redirecting function calls to lwIP.
- **DNS Redirection**: Modification of system configuration files to redirect DNS to attacker-controlled nameservers is prevented by providing versions with trusted IP addresses and port mappings. The LibOS ensures the integrity of these files via the file system shield.
- **Direct Attacks**: Direct attacks on unprotected DNS traffic are prevented by securely tunneling DNS traffic through the DTLS tunnel to trusted, internal resolvers that follow integrity-protected DNS protocols (e.g., DNSSEC, DoH, DoT).

### A10: Attacking Connections to Internal Servers (SR2+SR3)
Attacking the communication between shielded apps and internal servers (including DMZ) is not possible. The traffic is protected from Sys and Mc2gw attackers by SENG’s DTLS tunnels between the shielded apps and the gateway. Since internal servers are located in trusted networks, there are no Mgw2srv attackers between them and the trusted gateway.

### A11: Attacking Connections to External Servers (SR2+SR3)
SENG cannot protect the traffic between the gateway and external servers. However, SENG enables network administrators to grant access to external networks only to shielded applications that securely establish end-to-end protected connections (e.g., Table 2, rule 2). The file system shield can protect app-specific configuration files that define the security level of the shielded app, indirectly enforcing protection against Mgw2srv attackers.

### A12: Direct Information Leakage (SR6)
SENG enables the gateway to identify and block traffic from non-shielded senders, such as malware. Attackers cannot modify the behavior of shielded apps to leak information (A01–A03), nor can they authenticate malicious traffic through attested tunnel connections (A04–A05, A07–A08). Leaking non-encrypted traffic of shielded apps to external networks or attacker-controlled external servers via DNS- or header-based redirection attacks is also prevented (A09–A11). As a result, adversaries cannot connect to external servers, encode sensitive data in shielded traffic, or redirect internal, shielded traffic to external networks.

### A13: Direct Remote Control (SR6)
SENG enforces access control for incoming connections, blocking direct connections from external adversaries to internal malware. Sneaking data into the internal network by attacking external shielded clients is prevented similarly to attacks against internal apps (see A12).

### A14: Header-based Covert Channels (SR6)
SENG prevents any attempts to establish covert channels via header manipulations. Internal attackers cannot leak information via tunnel header manipulation, as the SENG server strips the headers at the gateway. Similarly, external attackers cannot inject remote commands by manipulating communication headers, as the gateway strips the link layer headers and the SENG server securely tunnels the IP packets to the shielded applications. Therefore, adversaries cannot observe information encoded in the internal headers.

### A15: Timing-based Covert Channels (SR6)
Attackers may attempt to create side channels based on packet timings (e.g., encoding information by delaying packets). While we excluded such covert channels from our threat model, SENG could adopt techniques to mask timing channels [8, 60].

### A16: Steering Shielded Programs for Info Leaks (SR6)
Attackers may try to abuse shielded applications to exfiltrate data. For example, a shielded browser's interactive interface allows users to navigate (e.g., enter URLs). While we trust the user, a system-level attacker could intercept keyboard input and inject malicious commands into the shielded app, controlling its network traffic. Non-interactive interfaces, such as those used by a shielded mail client, can also be exploited. To mitigate these attacks, trusted I/O for interactive applications and shielded interfaces can be used. The LibOS can leverage trusted I/O to verify that user input comes from a trusted device before forwarding it to the shielded app. Shielded interfaces based on local attestation, like SGX-based RPC calls, allow secure interaction and protect non-interactive interfaces. However, if the caller has lower privileges than the callee, confused-deputy attacks can occur. Future work should address this issue.

### A17: Privilege Escalation by Backdoored or Compromised Enclaves (SR6)
In a relaxed threat model, attackers can gain control over shielded apps via backdoors or runtime compromises. Once compromised, attackers can send malicious traffic through the app’s attested tunnel, provided it matches the app’s policies. Restrictive policies limit the harm. Attempts to spoof IP addresses to join a more privileged subnetwork will fail, as the SENG server detects unauthenticated traffic (A05) and restricts tunneled traffic to the assigned enclave IP (cf. Section 6.4). App-grained traffic separation enables app-specific classification models for network intrusion detection systems, further easing the detection of anomalous behavior upon compromise.

### A18: SENG Bypass via Gateway Compromise (SR2-3, SR4-6)
Our threat model fully trusts the central gateway, following the “bastion host” setting of network firewalls. If system-level attackers gain full control over the SENG server, firewall, and network card (NIC), they can bypass the firewall and tamper with the communication. Moving the SENG server and firewall into user-level TEEs (e.g., SGX enclaves) can protect enclave-to-enclave communication but not system-level attacks. To tackle this, the gateway could rely on a system-level TEE, such as TrustZone-assisted TEE systems (e.g., OP-TEE), which isolates the NIC and includes a trusted network stack and firewall. Secure boot and remote attestation can further enhance trust in the gateway.

### Prototype Implementation
We have implemented a prototype for the SENG Runtime and SENG Server, as well as an alternative, library OS-independent runtime SDK based on Intel’s SGX SDK [25].

#### SENG Client Runtime (with LibOS)
The client-side component is written in C/C++ and consists of Graphene-SGX [9] and our SENG runtime library. To minimize performance overhead, we use experimental support for exitless syscalls in Graphene-SGX [33]. The runtime is implemented in about 2400 lines of code and uses lwIP 2.1.2 [38], OpenSSL 1.0.2g, and an adapted version of the sgx-ra-tls attester code [32]. We included only the IPv4 modules of lwIP to minimize the code base and patched the definitions in the header file to be compatible with POSIX/Linux. We chose OpenSSL for its performance and reliability. For the tunnel, we use DTLS 1.2 with the ECDHE_RSA_WITH_AES_256_GCM_SHA384 cipher suite. The SENG runtime is integrated as a middle layer between Graphene-SGX and the shielded app via the preloading functionality of the internal linker. The runtime exposes a socket API to the app, which shadows the one of Graphene and forwards calls to lwIP. We configured Graphene-SGX and lwIP to use two distinct file descriptor ranges to distinguish between calls from the app and the tunnel module. In the current version, the tunnel module communicates directly with the IAS and embeds the attestation report inside the X.509 client certificate. The tunnel module thread handles DTLS packet receipt, while the lwIP thread handles decrypted IP packets. For increased parallelization and syscall reduction, we use one DTLS socket per direction and replaced lwIP-internal locks with spinlocks.

#### SENG Client Runtime Without LibOS (SENG-SDK)
Our standard client runtime uses a LibOS, which adds complexity and overhead to ease SENG integration. For high-performance and low-memory overhead, we designed an alternative client-side runtime SDK (SENG-SDK) that supports apps based on Intel’s SGX SDK [25]. The SENG-SDK does not include a library OS, making it more lightweight and flexible for integration into other frameworks [55]. By dropping the LibOS, the SDK trades legacy support (AR1) for higher performance (cf. Section 9.5) and support for native SGX apps with a trusted-untrusted split design. The SENG-SDK is fully compatible with the SENG server and all SGX SDK-based toolchains. It provides a single init function that handles the setup (network stack, tunnels, threads) and exposes a secure POSIX-style socket and DNS API for trusted enclave code. The SENG-SDK is written in about 2300 lines of C/C++ code and uses lwIP, adapted sgx-ra-tls attester code, SGX SSL v2.2, and the SGX SDK v2.7.1. We added timeout support to condition variables of SGX SDK for lwIP, included the SSL stack into SGX SSL, and added O/E-CALLs for DTLS tunnel management. We use switchless OCALLs to accelerate tunnel socket I/O.

#### SENG Server
Our server prototype is an event-based, single-threaded DTLS server written in C/C++ based on libuv.