results in deviating enclave identities (mrenclave). During
remote attestation, the SENG server will thus refuse the tunnel,
as the unknown enclave is not in the allowlist.
A04: Fake/Custom Enclave (SR4). An adversary could
try to establish a tunnel to the SENG server directly, or from
within a custom enclave. As the SENG server expects a valid,
correctly-signed attestation report, it will refuse direct connec-
tions with attacker-crafted fake reports. When the adversary
contacts the SENG server from within a custom enclave,
the attestation report will be valid, but not in the allowlist.
Therefore, the SENG server will refuse the connection by the
unknown enclave as in the previous attack (A03).
A05: Client Impersonation (SR4+SR5). Attackers could
try to impersonate a trusted client application. First, attackers
could intercept an allowlisted attestation report and embed
it into their own client certiﬁcates. However, the report will
not be bound to the certiﬁcate and the SENG server will
detect the mismatch and deny access. Second, attackers could
spoof an IP from a trusted enclave subnetwork. However, the
SENG-enabled gateway can identify the non-tunneled trafﬁc
as unauthenticated and drop the packets (see Section 6.4).
A06: Server Impersonation (SR2). The attacker can also
try to impersonate the SENG server by intercepting connec-
tion attempts. If successful, the adversary could gain access
to all connections of the shielded application, including un-
protected legacy trafﬁc. However, the SENG runtime pins the
valid SENG server key Ksrv and checks it during the DTLS
handshake to detect such impersonation attacks.
A07: Attacking SENG Keys (SR2). SENG performs se-
cure key management to prevent multiple attacks against the
tunnel security: (i) Rollback attacks against SENG’s server
public key Ksrv do not exist, as Ksrv is not sealed to disk and is
integrity protected (A02). A rollback of the whole app bundle
(incl. Ksrv, LibOS and all dependencies) results in a depre-
cated, blocked report (A03). (ii) If a private key of the SENG
762    29th USENIX Security Symposium
USENIX Association
(or attestation) server is breached, SENG blocks all vulnerable
reports and thus enclaves with stolen keys (cf. Section 5.4).
As DTLS supports ciphers with perfect forward secrecy, es-
tablished tunnels are not affected by a breach of the SENG
server key K−1
srv . (iii) The client RSA key pair (Kenc,K−1
enc)
is freshly generated for every new enclave instance and the
private key K−1
enc never leaves the enclave, s.t. it is protected
against attackers (cf. A01).
A08: Tunnel Tampering (SR2). Tampering with estab-
lished tunnel connections is not possible, because of the end-
to-end security guarantees of DTLS. An adversary can reorder
or drop tunnel packets, which is explicitly supported by DTLS.
However, tunneled UDP connections do not expect reliable or
in-order delivery and the endpoint network stacks still ensure
reliability and ordering guarantees for TCP packets (Sec. 6.1).
A09: DNS Spooﬁng (SR3). An attacker can try to leak
information by redirecting connections of shielded apps via
DNS reply spooﬁng. SENG shields DNS trafﬁc via multiple
complementary methods as discussed in Subsection 6.3. First,
spooﬁng the results of untrusted resolver functions is pre-
vented by redirecting the function calls to lwIP. Second, DNS
redirection to attacker-controlled nameservers via modiﬁca-
tion of system conﬁguration ﬁles is prevented by providing
versions with trusted IP addresses and port mappings. The
LibOS ensures the integrity of the ﬁles via the ﬁle system
shield. Third, Sys and both types of MITM attackers (Mc2gw,
Mgw2srv) can try to attack unprotected DNS trafﬁc directly.
Direct attacks are prevented by securely tunneling DNS trafﬁc
through the DTLS tunnel to trusted, internal resolvers which
follow integrity-protected DNS protocols for name resolution
(e.g. DNSSEC, DoH, DoT).
A10: Attacking Connections
to Internal Servers
(SR2+SR3). Attacking the communication between shielded
apps and internal servers (incl. DMZ) is not possible. The
trafﬁc is protected from Sys and Mc2gw attackers by SENG’s
DTLS tunnels between the shielded apps and the gateway. As
the internal servers are located in trusted networks, there are
no Mgw2srv attackers between them and the trusted gateway.
A11: Attacking Connections to External Servers
(SR2+SR3). SENG cannot protect the trafﬁc between gate-
way and external servers. However, SENG enables network
administrators to grant access to external networks only to
shielded applications that securely establish end-to-end pro-
tected connections (e.g. Table 2, rule 2). If required, the ﬁle
system shield can protect app-speciﬁc conﬁguration ﬁles that
deﬁne the security level of the shielded app. Therefore, SENG
can indirectly enforce protection against Mgw2srv attackers.
A12: Direct Information Leakage (SR6). SENG enables
the gateway to identify and block trafﬁc coming from non-
shielded senders, such as malware. Attackers cannot modify
the behavior of shielded apps to leak information (A01–A03).
They cannot get access to attested tunnel connections to au-
thenticate malicious trafﬁc for homecalling either (A04–A05,
A07–08). Leaking non-encrypted trafﬁc of shielded apps to
the external network or to attacker-controlled external servers
via DNS- or header-based redirection attacks are prevented as
well (A09–A11). As a result, adversaries can neither connect
to external servers, nor encode sensitive data in shielded traf-
ﬁc, nor redirect internal, shielded trafﬁc to external networks.
A13: Direct Remote Control (SR6). SENG enforces ac-
cess control also for incoming connections, which blocks
direct connections from external adversaries to internal mal-
ware. Sneaking data into the internal network by attacking
external shielded clients is prevented analogously to attacks
against internal apps (see A12).
A14: Header-based Covert Channels (SR6). Any at-
tempts to establish a covert channel via header manipulations
is prevented by SENG. Information leakage by internal attack-
ers via tunnel header manipulation is prevented, as the SENG
server strips the headers at the gateway. Remote commands
that external attackers may inject by manipulating communi-
cation headers is likewise prevented, as the gateway strips the
link layer headers and the SENG server securely tunnels the
IP packets to the shielded applications. Therefore, adversaries
cannot observe information encoded in the internal headers.
A15: Timing-based Covert Channels (SR6). Attackers
may aim to create side channels based on packet timings
(e.g., encoding information by delaying packets). While we
excluded such covert channels from our threat model, SENG
could adopt techniques to mask timing channels [8, 60].
A16: Steering Shielded Programs for Info Leaks (SR6).
Attackers could try to abuse shielded applications to exﬁltrate
data. Consider a shielded browser. Its interactive interface
lets users navigate (e.g., enter URLs). While we trust the user,
a system-level attacker could intercept keyboard input and
inject malicious commands into the shielded app. This way,
adversaries control network trafﬁc even of shielded apps. Non-
interactive interfaces allow for similar attacks. For example,
if users click on links displayed in a shielded mail client, the
mail client calls a non-interactive interface to steer a browser
to open the link. Attackers can intercept or use the interface
to control the browsing targets and query strings. The general
underlying problem is that shielded applications have to verify
if their inputs stem from shielded applications.
To mitigate these attacks, we can rely on trusted I/O for
interactive applications in addition to the shielded interfaces
we speciﬁed in our threat model (cf. Section 2). We regard
the adoption of secure I/O in the form of upcoming HW
extensions [34] or dongles [17,29] as realistic for critical busi-
ness environments which already deploy HW authentication
dongles. The LibOS can leverage trusted I/O to use attested,
secure I/O paths between enclave and I/O devices [17, 29].
The LibOS can then verify that user input comes from a
trusted device before forwarding input to the shielded app.
Shielded interfaces based on local attestation, like SGX-based
RPC calls [55], allow shielded apps to securely interact and
thereby protect non-interactive interfaces (e.g., trustworthy
path from mail client to browser). Problems still persist, how-
USENIX Association
29th USENIX Security Symposium    763
ever, if the caller has different (lower) app-grained privileges
than the callee. To avoid the resulting confused-deputy at-
tacks, the callee would have to forward the identiﬁer of the
caller to the SENG server—a signiﬁcant research endeavor
we leave open to future work.
A17: Privilege Escalation by Backdoored or Compro-
mised Enclaves (SR6). We now discuss a relaxed threat
model, where attackers can gain control over shielded apps,
e.g., via backdoors or runtime compromises. Once compro-
mised, attackers can send malicious trafﬁc through the app’s
attested tunnel as long as the trafﬁc matches the app’s poli-
cies. If the policies are restrictive and allow communication
to few vetted destinations only (e.g., shielded mail clients
may only contact the local mail server), the resulting harm is
limited. Any attempt of the compromised enclave to spoof its
IP addresses, e.g., to join a more privileged subnetwork, will
fail, because the SENG server detects unauthenticated trafﬁc
(A05) and restricts tunneled trafﬁc to the assigned enclave IP
(cf. Section 6.4). Perspectively, the app-grained trafﬁc sepa-
ration enables app-speciﬁc classiﬁcation models for network
intrusion detection systems, which further ease the detection
of anomalous behavior of shielded apps upon compromise.
A18: SENG Bypass via Gateway Compromise (SR2-3,
SR4-6). Our threat model fully trusts the central gateway,
following the widely popular “bastion host” setting of network
ﬁrewalls. If system-level attackers gain full control over the
SENG server, ﬁrewall and network card (NIC), they obtain
full access to the network trafﬁc (breaking SR2+SR3) and
can bypass the ﬁrewall (breaking SR4-6). While one could
move the SENG server and ﬁrewall into user-level TEEs (e.g.,
SGX enclaves) to protect the decrypted enclave trafﬁc and
ﬁrewall integrity, this approach can only protect enclave-to-
enclave communication (breaking SR2+SR3). Yet as system-
level attackers control the hardware, they can still bypass the
ﬁrewall and tamper with the communication.
To tackle this extended threat model, the gateway could rely
on a system-level TEE, which is isolated from the compro-
mised OS and can additionally claim exclusive ownership of
the network card. We regard TrustZone-assisted TEE systems,
e.g., OP-TEE5, a reasonable choice for the SENG gateway.
TrustZone extends CPUs, memory and devices with the notion
of a normal and secure mode (resp. “world”) and allows HW-
enforced access control based on the current CPU mode [44].
OP-TEE runs the regular OS and apps in the normal world
and a HW-isolated trusted kernel inside secure kernel mode
together with trusted applications (TAs) in secure user mode.
For SENG, the trusted kernel gets exclusive ownership of
the NIC and includes a trusted network stack and ﬁrewall.
The NIC access policy blocks direct access by normal-world
system-level attackers (SR6) and enables the trusted kernel
to force all network I/O through its "system calls" (complete
mediation). On each network operation, the trusted kernel
5https://www.op-tee.org/
can guarantee ﬁrewall enforcement on all trafﬁc (SR4+SR5).
The SENG server (including the policy database) runs as a
trusted application to be isolated from the attackers and inter-
acts directly with the trusted kernel for secure network I/O
(SR2+SR3). To allow trusted policy administration, a secure
bootstrapping phase can register trusted credentials (e.g., pub-
lic keys) and a policy TA can commit authenticated policy
update requests. Secure boot and SW- or TPM-based remote
attestation can be used to further enhance trust into the gate-
way. We leave a full system implementation of the protected
gateway open to future work and thus stay in line with the
common bastion host assumption of ﬁrewalls.
8 Prototype Implementation
We have implemented a prototype for the SENG Runtime
and SENG Server, as well as an alternative, library OS-
independent runtime SDK based on Intel’s SGX SDK [25].
SENG Client Runtime (with LibOS). Our client-side
component is written in C/C++ and consists of Graphene-
SGX6 [9] and our SENG runtime library. As enclave exits
cause huge performance overhead [42], we use experimen-
tal support for exitless syscalls in Graphene-SGX [33]. The
runtime is implemented in about 2400 lines of code7 and
uses lwIP 2.1.2 [38], OpenSSL 1.0.2g and an adapted ver-
sion of the sgx-ra-tls attester code8 [32]. We only included
the IPv4 modules of lwIP to minimize the code base, and
patched the deﬁnitions in the header ﬁle to be compatible
with POSIX/Linux. We chose OpenSSL as it is well-known
and fast. If a smaller code base is preferred over perfor-
mance, we can easily replace it with lightweight alternatives
like mbedTLS. For the tunnel, we use DTLS 1.2 with the
ECDHE_RSA_WITH_AES_256_GCM_SHA384 cipher suite.
The SENG runtime is integrated as a middle layer between
Graphene-SGX and the shielded app via the preloading func-
tionality of the internal linker. The runtime exposes a socket
API to the app which shadows the one of Graphene and for-
wards calls to lwIP. We conﬁgured Graphene-SGX and lwIP
to use two distinct ﬁle descriptor ranges, s.t. we can distin-
guish between calls of the app and those of the tunnel module.
In our current version, the tunnel module directly com-
municates with the IAS and embeds the attestation report
inside the X.509 client certiﬁcate. However, note that the at-
testation variants described in Subsection 6.1 could be easily
integrated. While the tunnel module thread handles DTLS
packet receipt, the lwIP thread handles the decrypted IP pack-
ets. For increased parallelization and syscall reduction, we
currently use one DTLS socket per direction and replaced
lwIP-internal locks with spinlocks.
6commit: 58cb88d2c187358aad428b100d1ff444173e1a2b
7according to https://github.com/AlDanial/cloc
8commit: 10de7cc9ff8ffaebc103617d62e47e699f2fb5ff
764    29th USENIX Security Symposium
USENIX Association
SENG Client Runtime Without LibOS (SENG-SDK).
Our standard client runtime uses a LibOS, which adds to
the client app’s complexity and overhead to ease SENG inte-
gration. In certain settings, it may be desired to deploy SENG
for client apps that cannot sacriﬁce performance or memory
overhead. We thus designed an alternative client-side run-
time SDK that adds support for apps based on Intel’s SGX
SDK [25]. This so-called SENG-SDK does not include a
library OS, which makes it more lightweight and enables ﬂex-
ible integration into other frameworks [55]. Furthermore, by
dropping the LibOS, the SDK trades legacy support (AR1)
in for higher performance (cf. Section 9.5) and support for
native SGX apps with trusted-untrusted split design.
The SENG-SDK is fully compatible with the SENG server
and all SGX SDK-based toolchains. While SENG-SDK can-
not remove the effort of porting apps to SGX, the toolchain in-
tegration makes porting enclaves to the SDK straightforward.
Furthermore, the SDK provides a single init function which
handles the whole setup (network stack, tunnels, threads) and
afterwards exposes a secure POSIX-style socket and DNS
API for trusted enclave code. SENG-SDK is written in about
2300 lines of C/C++ code and uses lwIP, adapted sgx-ra-tls
attester code, SGX SSL9 v2.2 and the SGX SDK v2.7.1. We
added timeout support to condition variables of SGX SDK for
lwIP, included the SSL stack into SGX SSL and added O/E-
CALLs for the DTLS tunnel management. We use switchless
OCALLs to accelerate the tunnel socket I/O.
SENG Server. Our server prototype is an event-based,
single-threaded DTLS server written in C/C++ based on libuv