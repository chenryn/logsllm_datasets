nodes.
Our construction is described in detail in Figures 2 and
3. Figure 1, which we discuss in the next Section, illustrates
the dynamic SSE data structures over a toy index containing
3 ﬁles and 3 unique words.
4.1 An Illustrative Example
In Figure 1, we show the data structures of our fully-
dynamic SSE scheme for a speciﬁc index. The index is built
on three documents, namely f1, f2, f3 over three keywords,
namely w1, w2, w3. All the documents contain keyword w1,
keyword w2 is only contained in document f2 and w3 is
contained in documents f2 and f3. The respective search
table Ts, the deletion table Td, the search array As and the
deletion array Ad are also shown in Figure 1. Note that in a
real DSSE index, there would be padding to hide the number
of ﬁle-word pairs; we omit this padding for simplicity in this
example.
Searching. Searching is the simplest operation in our
scheme. Suppose the client wishes to search for all the doc-
uments that contain keyword w1. He prepares the search
token, which among others contains FK1 (w1) and GK2 (w1).
The ﬁrst value FK1 (w1) will enable the server to locate the
entry corresponding to keyword w1 in the search table Ts. In
our example, this value is x = (4||1) ⊕ GK2 (w1). The server
now uses the second value GK2 (w1) to compute x⊕GK2 (w1).
This will allow the server to locate the right entry (4 in our
example) in the search array and begin “unmasking” the
locations storing pointers to the documents containing w1.
This unmasking is performed by means of the third value
contained in the search token.
Adding a document. Suppose now the client wishes to
add a document f4 containing keywords w1 and w2. Note
that the search table does not change at all since f4 is going
969Let SKE = (Gen, Enc, Dec) be a private-key encryption scheme and F : {0, 1}k × {0, 1}∗ → {0, 1}k, G : {0, 1}k × {0, 1}∗ → {0, 1}∗,
and P : {0, 1}k × {0, 1}∗ → {0, 1}k be pseudo-random functions.
Let H1 : {0, 1}∗ → {0, 1}∗ and H2 : {0, 1}∗ →
{0, 1}∗ be random oracles.
Let z ∈ N be the initial size of the free list. Construct a dynamic SSE scheme SSE =
(Gen, Enc, SrchToken, AddToken, DelToken, Search, Add, Del, Dec) as follows:
• Gen(1k): sample three k-bit strings K1, K2, K3 uniformly at random and generate K4 ← SSE.Gen(1k). Output K =
(K1, K2, K3, K4).
• Enc(K, f ):
1. let As and Ad be arrays of size |c|/8 + z and let Ts and Td be dictionary of size #W and #f , respectively. We assume
0 is a (log #As)-length string of 0’s and that free is a word not in W .
2. for each word w ∈ W ,a
(a) create a list Lw of #fw nodes (N1, . . . , N#fw ) stored at random locations in the search array As and deﬁned as:
Ni := (hidi, addrs(Ni+1)i ⊕ H1(Kw, ri), ri) where idi is the ID of the ith ﬁle in fw, ri is a k-bit string generated
uniformly at random, Kw := PK3 (w) and addrs(N#fw +1) = 0
(b) store a pointer to the ﬁrst node of Lw in the search table by setting Ts[FK1 (w)] := haddrs(N1), addrd(N⋆
1)i⊕GK2 (w),
where N⋆ is the dual of N, i.e., the node in Ad whose fourth entry points to N1 in As.
3. for each ﬁle f in f ,
(a) create a list Lf of # ¯f dual nodes (D1, . . . , D
# ¯f ) stored at random locations in the deletion array Ad and deﬁned as
follows: each entry Di is associated with a word w, and hence a node N in Lw. Let N+1 be the node following N in
Lw, and N−1 the node previous to N in Lw. Then, deﬁne Di as follows: Di := (haddrd(Di+1), addrd(N⋆
+1),
addrs(N), addrs(N−1), addrs(N+1), FK1 (w) i ⊕ H2(Kf , r′
i is a k-bit string generated uniformly at
random, Kf := PK3 (f ), and addrd(D
−1), addrd(N⋆
i) where r′
i), r′
# ¯f +1) = 0.
(b) store a pointer to the ﬁrst node of Lf in the deletion table by setting: Td[FK1 (f )] := addrd(D1) ⊕ GK2 (f )
4. create an unencrypted free list Lfree by choosing z unused cells at random in As and in Ad. Let (F1, . . . , Fz) and
z) be the free nodes in As and Ad, respectively. Set Ts[free] := haddrs(Fz), 0log #Ai and for z ≤ i ≤ 1, set
1, . . . , F′
(F′
As[addrs(Fi)] := 0log #f , addrs(Fi−1), addrd(F′
i) where addrs(F0) = 0log #A.
5. ﬁll the remaining entries of As and Ad with random strings
6. for 1 ≤ i ≤ #f , let ci ← SKE.EncK4 (fi)
7. output (γ, c), where γ := (As, Ts, Ad, Td) and c = (c1, . . . , c#f ).
• SrchToken(K, w): compute and output τs := (cid:0)FK1 (w), GK2 (w), PK3 (w)(cid:1)
• Search(γ, c, τs):
1. parse τs as (τ1, τ2, τ3) and return an empty list if τ1 is not present in Ts.
2. recover a pointer to the ﬁrst node of the list by computing (α1, α′
3. look up N1 := A[α1] and decrypt with τ3, i.e., parse N1 as (ν1, r1) and compute (id1, 0, addrs(N2)) := ν1 ⊕ H1(τ3, r1)
4. for i ≥ 2, decrypt node Ni as above until αi+1 = 0
5. let I = {id1, . . . , idm} be the ﬁle identiﬁers revealed in the previous steps and output {ci}i∈I , i.e., the encryptions of
1) := Ts[τ1] ⊕ τ2
the ﬁles whose identiﬁers were revealed.
• AddToken(K, f ):
let (w1, . . . , w# ¯f ) be the unique words in f in their order of appearance in f . Compute τa := (
FK1 (f ), GK2 (f ), λ1, . . . , λ# ¯f ), where for all 1 ≤ i ≤ # ¯f : λi := (FK1 (wi), GK2 (wi), hid(f ), 0i ⊕H1(PK3 (wi), ri), ri,
h0, 0, 0, 0, 0, 0, FK1 (wi)i ⊕H2(PK3 (f ), r′
i are random k-bit strings. Let cf ← SKE.EncK4 (f ) and output
(τa, cf ).
i), and ri and r′
i), r′
• Add(γ, c, τa):
1. parse τa as (τ1, τ2, λ1, . . . , λ# ¯f , c) and return ⊥ if τ1 is not in Td.
2. for 1 ≤ i ≤ # ¯f ,
(a) ﬁnd the last free location ϕ in the search array and its corresponding entry ϕ⋆ in the deletion array by computing
(ϕ, 0) := Ts[free], and (ϕ−1, ϕ⋆) := As[ϕ].
(b) update the search table to point to the second to last free entry by setting Ts[free] := (ϕ−1, 0)
(c) recover a pointer to the ﬁrst node N1 of the list by computing (α1, α⋆
(d) store the new node at location ϕ and modify its forward pointer to N1 by setting As[ϕ] := (cid:0)λi[3] ⊕ h0, α1i, λi[4](cid:1)
(e) update the search table by setting Ts[λi[1]] := (ϕ, ϕ⋆) ⊕ λi[2]
(f) update the dual of N1 by setting Ad[α⋆
(g) update the dual of As[ϕ] by setting Ad[ϕ⋆] := (cid:0)λi[5] ⊕ hϕ⋆
(h) if i = 1, update the deletion table by setting Td[τ1] := hϕ⋆, 0i ⊕ τ2.
1] := (cid:0)D1 ⊕ h0, ϕ⋆, 0, 0, ϕ, 0, 0i, r(cid:1), where (D1, r) := Ad[α⋆
1]
1, ϕ, 0, α1, λi[1]i, λi[6](cid:1) ,
1) := Ts[λi[1]] ⊕ λi[2]
−1, 0, α⋆
3. update the ciphertexts by adding c to c
aSteps 2 and 3 here must be performed in an interleaved fashion to set up As and Ad at the same time.
Figure 2: A Fully Dynamic SSE scheme (Part 1).
970• DelToken(K, f ): output: τd := (FK1 (f ), GK2 (f ), PK3 (f ), id(f )).
• Del(γ, c, τd):
1. parse τd as (τ1, τ2, τ3, id) and return ⊥ if τ1 is not in Td
2. ﬁnd the ﬁrst node of Lf by computing α′
1 := Td[τ1] ⊕ τ2
3. for 1 ≤ i ≤ # ¯f ,
i] to a random (6 log #A + k)-bit string
(a) decrypt Di by computing (α1, . . . , α6, µ) := Di ⊕ H2(τ3, r), where (Di, r) := Ad[α′
i]
(b) delete Di by setting Ad[α′
(c) ﬁnd address of last free node by computing (ϕ, 0log #A) := Ts[free]
(d) make the free entry in the search table point to Di’s dual by setting Ts[free] := hα4, 0log #Ai
(e) free location of Di’s dual by setting As[α4] := (ϕ, α′
i)
(f) let N−1 be the node that precedes Di’s dual. Update N−1’s “next pointer” by setting: As[α5] := (β1, β2⊕α4⊕α6, r−1),
i ⊕
where (β1, β2, r−1) := As[α5]. Also, update the pointers of N−1’s dual by setting Ad[α2] := (β1, β2, β3 ⊕ α′
α3, β4, β5, β6 ⊕ α4 ⊕ α6, µ∗, r∗
−1), where (β1, . . . , β6, µ∗, r∗
−1) := Ad[α2]
(g) let N+1 be the node that follows Di’s dual. Update N+1’s dual pointers by setting: Ad[α3] := (β1, β2 ⊕ α′
i ⊕
α2, β3, β4, β5 ⊕ α4 ⊕ α5, β6, µ∗, r∗
+1), where (β1, . . . , β6, µ∗, r∗
+1) := Ad[α3]
(h) set α′
i+1 := α1
4. remove the ciphertext that corresponds to id from c
5. remove τ1 from Td
• Dec(K, c): output m := SKE.DecK4 (c).
Figure 3: A Fully Dynamic SSE scheme (Part 2).
to be the last entry in the list of keywords w1 and w2 and
the search table only stores the ﬁrst entries. However all
the other data structures must be updated in the following
way. First the server uses free to quickly retrieve the indices
of the “free” positions in the search array As, where the new
entries are going to be stored. In our example these positions
are 2 and 6. The server stores in these entries the new
information (w1, f4) and (w2, f4). Now the server needs to
connect this new entries to the respective keywords lists:
using the add token, it retrieves the indices i = 0 and j = 3
in the search array As of the elements x and y such that x and
y correspond to the last entries of the keyword lists w1 and
w2. In this way the server homomorphically sets As[0]’s and
As[3]’s “next” pointers to point to the newly added nodes,
already stored in the search array at positions 2 and 6.
Note that getting access to the free entries in the search
array also provides access to the respective free positions
of the deletion array Ad.
In our example, the indices of
the free positions in the deletion array are 3 and 7. The
server will store the new entries (f4, w1) and (f4, w2) at these
positions in the deletion array and will also connect them
with pointers. Finally, the server will update the deletion
table by setting the entry FK1 (f4) to point to position 3 in
the deletion array, so that ﬁle f4 could be easily retrieved
for deletion later.
Deleting a document. Suppose now the client wants
to delete a document already stored in our index, say doc-
ument f3, containing keywords w1 and w3. The deletion
is a “dual operation” to addition. First the server uses the
value FK1 (f3) of the deletion token to locate the right value
4 ⊕ GK2 (f3) in the deletion table. This will allow the server
to get access to the portion of the remaining data structures
that need to be updated in a similar fashion with the addi-
tion algorithm. Namely it will “free” the positions 4 and 6 in
the deletion array and positions 1 and 3 in the search array.
While “freeing” the positions in the search array, it will also
homomorphically update the pointers of previous entries in
the keyword list w1 and w3 to point to the new entries (in
our example, to the end of the lists—generally in the next
pointers of the deleted items). Note that no such an update
of pointers is required for the deletion array.
5. SECURITY
As discussed in §3, all practical SSE schemes leak some
information. Unfortunately, the extent to which the prac-
tical security of SSE is aﬀected by this leakage is not well
understood and depends greatly on the setting in which SSE
is used. We are aware of only one concrete attack [18] that
exploits this leakage and it depends strongly on knowledge
of previous queries and statistics about the ﬁle collection.
We note, however, that our scheme leaks more than most
previously-known constructions since it is dynamic and there
are correlations between the information leaked by its var-
ious operations. In the following, we provide a framework
for describing and comparing the leakage of SSE schemes.
Based on this framework, we compare the leakage of our
scheme with the leakage of SSE-1, which is static; and the
leakage of the scheme proposed in [23], which is dynamic.
A framework for characterizing leakage. Our ap-
proach is to describe leakage in terms of a database contain-
ing two tables over word and ﬁle identiﬁers: SSE operations
write anonymized rows to tables in the database, and an ad-
versary tries to de-anonymize the resulting data. Columns
in the tables contain identiﬁers for ﬁles and words: each ﬁle
is represented by exactly one identiﬁer, and each word is
represented by exactly one identiﬁer, but these identiﬁers
are chosen at random with respect to ﬁles and words. For
ease of exposition, we will assume that there is a function id
that produce identiﬁers for ﬁles and words.
Our scheme writes ﬁle-word information into two tables:
1. the File-Word table (FW), in which each row asso-
ciates a word identiﬁer with a ﬁle identiﬁer.
2. the Adjacency (Adj) table, in which each row asso-
971ciates a word identiﬁer and a ﬁle identiﬁer with a di-
rection “next” or “prev” and one of the following values:
(1) another ﬁle identiﬁer, or (2) a value ⊥.
Each row also contains a timestamp of the time it was writ-
ten; for simplicity in notation, we do not write the times-
tamps in the following description. Intuitively, the FW table
records associations between ﬁle and word identiﬁers; the
Adj table records adjacency information about ﬁles in the
lists for given words.
Note that our concrete construction has two diﬀerent iden-
tiﬁers for a given ﬁle: the ciphertext for a ﬁle is stored under
a ﬁle pointer that is revealed during the search operation,
but the ﬁle information in the index is stored in Td under the
output of a pseudo-random function on the ﬁle. However,
the scheme’s operations immediately reveal to an adversary
the correlation between these values, so in our leakage de-
scription, we do not distinguish between these two types
of ﬁle identiﬁers. Operations in our construction write the
following values:
Search takes as input the identiﬁer for a word w and re-
turns a set of ﬁle identiﬁers to the client. So, for each ﬁle f
returned by search, our scheme writes the row (id(w), id(f ))
to the FW table. Note that the server then writes one row
for each ﬁle-word pair.
Add takes as input an add token that contains the identi-
ﬁer for a ﬁle f and adds word information for a set of words
associated with this ﬁle. Like Search, Add writes tuples
(id(w), id(f )) for each word w associated with the ﬁle in the
Add Token.
Additionally, however, the Add operation reveals to the
server whether or not f is the only ﬁle that contains w. If the
server has previously executed an operation that revealed
the ﬁle f ′ associated with the head of the list for w, then
Add writes the tuple (id(w), id(f ), “next”, id(f ′)) to the Adj
table.
In either case, Add writes the tuple (id(w), id(f ),
“prev”, ⊥) to the Adj table to indicate that f is the head
node for the list for w. And if the word is not yet in the
index, then Add writes (id(w), id(f ), “next”, ⊥) to the Adj
table.
Delete takes as input a delete token that contains an iden-
tiﬁer for a ﬁle f ; this token does not contain any word-
speciﬁc information. However, in the process of executing
the Delete operation, the server uncovers in the index a
word-identiﬁer (the search key for Ts) for each word asso-
ciated with the ﬁle. So, like Search and Add, Delete writes
tuples (id(w), id(f )) for each word w associated with f .
As each word w is deleted for f , it reveals the location
of its neighbors in the search array. And for the purposes
of our proof, we say that the leakage in this case consists
of the ﬁle identiﬁers for the previous and next nodes in the
list for w. Let the ﬁles associated with these nodes be f ′
and f ′′, respectively. The server then writes (id(w), id(f ),,
“prev”, id(f ′)) and (id(w), id(f ), “next”, id(f ′′)) to the Adj
table (in each case, it writes ⊥ if there is no previous or next
neighbor).
We can use this framework to compare the leakage of our
scheme to the leakage of previous schemes. SSE-1 does not
provide Add or Delete operations, but it writes the same
values as our scheme writes to the FW table in Search. The
other table (and the additional writes to FW in Add and
Delete) makes up the extra leakage from our scheme.
The scheme of Sedghi et al. [23] is dynamic but leaks less
information than our construction. Search in their scheme
reveals the word that is searched but does not reveal the
identiﬁers of the ﬁles returned, since that information is
masked in an array of bits, with one bit per ﬁle. This can be
represented by writing a word identiﬁer to the FW table with
the value ⊥ for the ﬁle identiﬁer. Their scheme performs the
same writes to the FW table for Add and Delete, since each
Add or Delete operation reveals an identiﬁer for the ﬁle and
reveals the word identiﬁers by the locations that it modiﬁes
in their index. However, their scheme never writes adja-
cency information to the Adj table: