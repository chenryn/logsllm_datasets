# In Search of an Understandable

## References

1. **Diego Ongaro, Stephen M. Rumble, Ryan Stutsman, John Ousterhout, and Mendel Rosenblum. 2011. Fast Crash Recovery in RAMCloud. In *ACM SOSP (2011)*.**
2. **John K. Ousterhout, Arjun Gopalan, Ashish Gupta, Ankita Kejriwal, Collin Lee, Behnam Montazeri, Diego Ongaro, Seo Jin Park, Henry Qin, Mendel Rosenblum, Stephen M. Rumble, Ryan Stutsman, and Stephen Yang. 2015. The RAMCloud Storage System. *ACM Trans. Comput. Syst. 33, 3 (2015)*.**
3. **Parveen Patel, Deepak Bansal, Lihua Yuan, Ashwin Murthy, Albert Greenberg, David A. Maltz, Randy Kern, Hemant Kumar, Marios Zikos, Hongyu Wu, Changhoon Kim, and Naveen Karri. 2013. Ananta: Cloud Scale Load Balancing. In *ACM SIGCOMM (2013)*.**
4. **Larry Peterson, Tom Anderson, Sachin Katti, Nick McKeown, Guru Parulkar, Jennifer Rexford, Mahadev Satyanarayanan, Oguz Sunay, and Amin Vahdat. 2019. Democratizing the network edge. *ACM SIGCOMM Computer Communication Review 49, 2 (2019)*.**
5. **Zafar Ayyub Qazi, Melvin Walls, Aurojit Panda, Vyas Sekar, Sylvia Ratnasamy, and Scott Shenker. 2017. A High Performance Packet Core for Next Generation Cellular Networks. In *ACM SIGCOMM (2017)*.**
6. **Shriram Rajagopalan, Dan Williams, and Hani Jamjoom. 2013. Pico replication: A high availability framework for middleboxes. In *ACM SoCC (2013)*.**
7. **Shriram Rajagopalan, Dan Williams, Hani Jamjoom, and Andrew Warfield. 2013. Split/Merge: System Support for Elastic Execution in Virtual Middleboxes. In *USENIX NSDI (2013)*.**
8. **Arjun Roy, Hongyi Zeng, Jasmeet Bagga, George Porter, and Alex C. Snoeren. 2015. Inside the Social Network’s (Datacenter) Network. In *ACM SIGCOMM (2015)*.**
9. **Jerome H Saltzer, David P Reed, and David D Clark. 1984. End-to-end arguments in system design. *ACM Transactions on Computer Systems (TOCS) 2, 4 (1984)*.**
10. **Amedeo Sapio, Marco Canini, Chen-Yu Ho, Jacob Nelson, Panos Kalnis, Changhoon Kim, Arvind Krishnamurthy, Masoud Moshref, Dan Ports, and Peter Richtarik. 2021. Scaling Distributed Machine Learning with In-Network Aggregation. (2021).**
11. **Karla Saur, Joseph Collard, Nate Foster, Arjun Guha, Laurent Vanbever, and Michael Hicks. 2016. Safe and flexible controller upgrades for SDNs. In *ACM SOSR (2016)*.**
12. **Rinku Shah, Vikas Kumar, Mythili Vutukuru, and Purushottam Kulkarni. 2020. TurboEPC: Leveraging Dataplane Programmability to Accelerate the Mobile Packet Core. In *ACM SOSR (2020)*.**
13. **Justine Sherry, Peter Xiang Gao, Soumya Basu, Aurojit Panda, Arvind Krishnamurthy, Christian Maciocco, Maziar Manesh, João Martins, Sylvia Ratnasamy, Luigi Rizzo, et al. 2015. Rollback-recovery for middleboxes. In *ACM SIGCOMM (2015)*.**
14. **Arjun Singh, Joon Ong, Amit Agarwal, Glen Anderson, Ashby Armistead, Roy Bannon, Seb Boving, Gaurav Desai, Bob Felderman, Paulie Germano, Anand Kanagala, Jeff Provost, Jason Simmons, Eiichi Tanda, Jim Wanderer, Urs Hölzle, Stephen Stuart, and Amin Vahdat. 2015. Jupiter Rising: A Decade of Clos Topologies and Centralized Control in Google’s Datacenter Network. In *ACM SIGCOMM (2015)*.**
15. **L. Tang, Q. Huang, and P. P. C. Lee. 2020. SpreadSketch: Toward Invertible and Network-Wide Detection of Superspreaders. In *IEEE INFOCOM 2020 (2020)*.**
16. **Muhammad Tirmazi, Ran Ben Basat, Jiaqi Gao, and Minlan Yu. 2020. Cheetah: Accelerating Database Queries with Switch Pruning. In *ACM SIGMOD*.**
17. **Robbert van Renesse and Fred B. Schneider. 2004. Chain Replication for Supporting High Throughput and Availability. In *USENIX OSDI (2004)*.**
18. **Shinae Woo, Justine Sherry, Sangjin Han, Sue Moon, Sylvia Ratnasamy, and Scott Shenker. 2018. Elastic Scaling of Stateful Network Functions. In *USENIX NSDI (2018)*.**
19. **Jiarong Xing, Wenqing Wu, and Ang Chen. 2021. Ripple: A Programmable, Decentralized Link-Flooding Defense Against Adaptive Adversaries. In *USENIX Security (2021)*.**
20. **Menghao Zhang, Guanyu Li, Shicheng Wang, Chang Liu, Ang Chen, Hongxin Hu, Guofei Gu, Qianqian Li, Mingwei Xu, and Jianping Wu. 2020. Poseidon: Mitigating volumetric DDoS attacks with programmable switches. In *ISOC NDSS (2020)*.**
21. **Hang Zhu, Zhihao Bai, Jialin Li, Ellis Michael, Dan RK Ports, Ion Stoica, and Xin Jin. 2019. Harmonia: Near-linear scalability for replicated storage with in-network conflict detection. *Proceedings of the VLDB Endowment 13, 3 (2019)*.**

## RedPlane: Enabling Fault-Tolerant Stateful In-Switch Applications
**SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA**

### Note:
Appendices are supporting material that has not been peer-reviewed.

### A. Details of Lazy Snapshotting

**Algorithm 1: Lazy snapshotting**

```plaintext
/* 1-bit variable indicating the current active buffer */
active_buffer ← 0;

/* Array of 1-bit variables indicating which buffer was last updated for a certain slot */
last_updated_buffer[0...REGISTER_SIZE] ← 0;

/* Two copies of the replicated data structure (e.g., a sketch in this example) */
pair sketch [0...REGISTER_SIZE] ← 0;

Upon receiving a packet (pkt):

    /* Is this the first packet of a snapshot read burst? */
    if pkt.type = SNAPSHOT_READ and pkt.index = 0 then
        /* If so, swap the active buffer */
        active_buffer ← swap_active_buffer();
    else
        /* If not, get the current active buffer */
        active_buffer ← get_active_buffer();

    /* Which buffer was lastly updated for this index? */
    last_updated_buffer_for_index ← update_last_updated_buffer(pkt.index, active_buffer);

    /* For a regular packet */
    if pkt.type = SKETCH_UPDATE then
        /* Is this the first time this buffer has been touched since we took a snapshot? */
        if active_buffer ≠ last_updated_buffer_for_index then
            /* If so, copy data from the inactive buffer before updating */
            if active_buffer = 0 then
                pkt.result ← copy_update_and_read_buffer_0(pkt.index, pkt.update);
            else
                pkt.result ← copy_update_and_read_buffer_1(pkt.index, pkt.update);
        else
            /* If not, some other packet has touched this buffer since we took a snapshot, so just do update */
            if active_buffer = 0 then
                pkt.result ← update_and_read_buffer_0(pkt.index, pkt.update);
            else
                pkt.result ← update_and_read_buffer_1(pkt.index, pkt.update);

    /* For a snapshot read packet */
    else if pkt.type = SNAPSHOT_READ then
        pkt.update = 0;
        /* Is this the first time this buffer has been touched since we took a snapshot? */
        if active_buffer ≠ last_updated_buffer_for_index then
            /* If so, copy data from the inactive buffer before reading */
            if active_buffer = 0 then
                pkt.result ← copy_update_and_read_buffer_0(pkt.index, pkt.update);
            else
                pkt.result ← copy_update_and_read_buffer_1(pkt.index, pkt.update);
        else
            /* If not, some other packet has touched this buffer since we took a snapshot, so just do read */
            if active_buffer = 0 then
                pkt.result ← update_and_read_buffer_0(pkt.index, pkt.update);
            else
                pkt.result ← update_and_read_buffer_1(pkt.index, pkt.update);
```

### B. P4 Skeleton Code of RedPlane-enabled Application

As mentioned in §6 of our paper, we expose RedPlane APIs as modules in P4. Figure 16 illustrates how the P4 implementation of a RedPlane-enabled NAT looks like. Developers need to include the P4 file of RedPlane core APIs (line 1) and the P4 file of their original application code (line 2). Lines highlighted in red show the initialization and use of the RedPlane ingress and egress control block instances (lines 5, 9, 20, and 24). The lines highlighted in bold blue indicate modules of the original NAT program (lines 6 and 11). Since NAT does not update state in the data plane (i.e., it is read-centric), no modification is needed to their original P4 implementation. Other applications (firewall, load balancer, HH-detector, etc.) introduced in the paper can be implemented in a similar way.

```p4
#include "redplane_core.p4" // RedPlane core API
#include "nat.p4" // Developer’s NAT program

control Ingress(headers hdr, metadata meta) {
    RedPlaneIngress() redplane_ingress;
    NAT_Ingress() nat_ingress;
    L3_Routing() l3_routing;
    
    apply {
        redplane_ingress.apply(hdr, meta);
        if (meta.is_normal_pkt == true) {
            nat_ingress.apply(hdr, meta);
        }
        if (meta.is_normal_pkt == true || meta.is_piggybacked == true) {
            l3_routing.apply(hdr, meta);
        }
    }
}

control Egress(headers hdr, metadata meta) {
    RedPlaneEgress() redplane_egress;
    
    apply {
        if (meta.is_redplane_req == true || meta.is_redplane_ack == true) {
            redplane_egress.apply(hdr, meta);
        }
    }
}

Pipeline(IngressParser(), Ingress(), IngressDeparser(), EgressParser(), Egress(), EgressDeparser()) pipe;
Switch(pipe) main;
```

### C. TLA+ Specification of RedPlane Protocol

We write a TLA+ specification of the RedPlane protocol to model-check its correctness.

```tla
module redplaneprotocol
extends Integers, Sequences, TLC, FiniteSets

constants NULL, SWITCHES, LEASEPERIOD, TOTALPKTS

variables query, requestqueue, SwitchPacketQueue, RemainingLeasePeriod, owner, up, active, AliveNum, globalseqnum

proc pcExists(val) == val /= NULL
proc RequestingSwitches == {sw \in SWITCHES : Exists(query[sw]) /\ query[sw].type = "request"}

variables switch, q, seqnum, round, upSwitches, sentpkts

vars == <<query, requestqueue, SwitchPacketQueue, RemainingLeasePeriod, owner, up, active, AliveNum, globalseqnum, pc, switch, q, seqnum, round, upSwitches, sentpkts>>

ProcSet == {"StateStore"} \cup (SWITCHES) \cup {"LeaseTimer"} \cup {"pktgen"}

Init == Globalvariables
       /\ query = [sw \in SWITCHES |-> NULL]
       /\ requestqueue = <<>>
       /\ SwitchPacketQueue = [sw \in SWITCHES |-> 0]
       /\ RemainingLeasePeriod = [sw \in SWITCHES |-> 0]
       /\ owner = NULL
       /\ up = [sw \in SWITCHES |-> true]
       /\ active = [sw \in SWITCHES |-> false]
       /\ AliveNum = Cardinality(SWITCHES)
       /\ globalseqnum = 0
       /\ switch = NULL
       /\ q = NULL
       /\ seqnum = [self \in SWITCHES |-> 0]
       /\ round = [self \in SWITCHES |-> 0]
       /\ upSwitches = {}
       /\ sentpkts = 0
       /\ pc = [self \in ProcSet |-> CASE self = "StateStore" -> "STARTSTORE"
                                      [] self \in SWITCHES -> "STARTSWITCH"
                                      [] self = "LeaseTimer" -> "STARTTIMER"
                                      [] self = "pktgen" -> "STARTPKTGEN"]

STARTSTORE == /\ pc["StateStore"] = "STARTSTORE"
             /\ pc' = [pc EXCEPT !["StateStore"] = "STOREPROCESSING"]
             /\ UNCHANGED <<query, requestqueue, SwitchPacketQueue, RemainingLeasePeriod, owner, up, active, AliveNum, globalseqnum, switch, q, seqnum, round, upSwitches, sentpkts>>

STOREPROCESSING == /\ pc["StateStore"] = "STOREPROCESSING"
                  /\ IF requestqueue /= <<>> THEN
                    /\ switch' = Head(requestqueue)
                    /\ requestqueue' = Tail(requestqueue)
                    /\ q' = query[switch']
                    /\ IF q'.leaserequest = "new" THEN
                      /\ IF owner /= NULL THEN
                        /\ pc' = [pc EXCEPT !["StateStore"] = "BUFFERING"]
                      ELSE
                        /\ pc' = [pc EXCEPT !["StateStore"] = "TRANSFERLEASE"]
                    ELSE
                      /\ IF q'.leaserequest = "renew" THEN
                        /\ pc' = [pc EXCEPT !["StateStore"] = "RENEWLEASE"]
                      ELSE
                        /\ pc' = [pc EXCEPT !["StateStore"] = "STARTSTORE"]
                  ELSE
                    /\ pc' = [pc EXCEPT !["StateStore"] = "STARTSTORE"]
                  /\ UNCHANGED <<requestqueue, switch, q>>
                  /\ UNCHANGED <<query, SwitchPacketQueue, RemainingLeasePeriod, owner, up, active, AliveNum, globalseqnum, seqnum, round, upSwitches, sentpkts>>

TRANSFERLEASE == /\ pc["StateStore"] = "TRANSFERLEASE"
                 /\ query' = [query EXCEPT ![switch] = [type |-> "response", lastseqnum |-> globalseqnum]]
                 /\ RemainingLeasePeriod' = [RemainingLeasePeriod EXCEPT ![switch] = LEASEPERIOD]
                 /\ owner' = switch
                 /\ pc' = [pc EXCEPT !["StateStore"] = "STARTSTORE"]
                 /\ UNCHANGED <<requestqueue, SwitchPacketQueue, up, active, AliveNum, globalseqnum, switch, q, seqnum, round, upSwitches, sentpkts>>

BUFFERING == /\ pc["StateStore"] = "BUFFERING"
            /\ requestqueue' = Append(requestqueue, switch)
            /\ pc' = [pc EXCEPT !["StateStore"] = "STOREPROCESSING"]
            /\ UNCHANGED <<query, SwitchPacketQueue, RemainingLeasePeriod, owner, up, active, AliveNum, globalseqnum, switch, q, seqnum, round, upSwitches, sentpkts>>

RENEWLEASE == /\ pc["StateStore"] = "RENEWLEASE"
              /\ globalseqnum' = q.writeseq
              /\ query' = [query EXCEPT ![switch] = [type |-> "response", lastseqnum |-> globalseqnum']]
              /\ RemainingLeasePeriod' = [RemainingLeasePeriod EXCEPT ![switch] = LEASEPERIOD]
              /\ owner' = switch
              /\ pc' = [pc EXCEPT !["StateStore"] = "STARTSTORE"]
              /\ UNCHANGED <<requestqueue, SwitchPacketQueue, up, active, AliveNum, switch, q, seqnum, round, upSwitches, sentpkts>>

statestore == STARTSTORE \/ STOREPROCESSING \/ TRANSFERLEASE \/ BUFFERING \/ RENELEASE

STARTSWITCH(self) == /\ pc[self] = "STARTSWITCH"
                     /\ IF up[self] /\ SwitchPacketQueue[self] > 0 THEN
                       /\ active' = [active EXCEPT ![self] = true]
                       /\ IF RemainingLeasePeriod[self] = 0 THEN
                         /\ pc' = [pc EXCEPT ![self] = "NOLEASE"]
                       ELSE
                         /\ pc' = [pc EXCEPT ![self] = "HASLEASE"]
                     ELSE
                       /\ pc' = [pc EXCEPT ![self] = "SWFAILURE"]
                     /\ UNCHANGED active
                     /\ UNCHANGED <<query, requestqueue, SwitchPacketQueue, RemainingLeasePeriod, owner, up, AliveNum, globalseqnum, switch, q, seqnum, round, upSwitches, sentpkts>>

NOLEASE(self) == /\ pc[self] = "NOLEASE"
                 /\ query' = [query EXCEPT ![self] = [type |-> "request", leaserequest |-> "new"]]
                 /\ requestqueue' = Append(requestqueue, self)
                 /\ pc' = [pc EXCEPT ![self] = "WAITLEASERESPONSE"]
                 /\ UNCHANGED <<SwitchPacketQueue, RemainingLeasePeriod, owner, up, active, AliveNum, globalseqnum, switch, q, seqnum, round, upSwitches, sentpkts>>

WAITLEASERESPONSE(self) == /\ pc[self] = "WAITLEASERESPONSE"
                          /\ query[self].type = "response"
                          /\ seqnum' = [seqnum EXCEPT ![self] = query[self].lastseqnum]
                          /\ query' = [query EXCEPT ![self] = NULL]
                          /\ pc' = [pc EXCEPT ![self] = "HASLEASE"]
                          /\ UNCHANGED <<requestqueue, SwitchPacketQueue, RemainingLeasePeriod, owner, up, active, AliveNum, globalseqnum, switch, q, round, upSwitches, sentpkts>>

HASLEASE(self) == /\ pc[self] = "HASLEASE"
                 /\ seqnum' = [seqnum EXCEPT ![self] = seqnum[self] + 1]
                 /\ query' = [query EXCEPT ![self] = [type |-> "request", leaserequest |-> "renew", writeseq |-> seqnum'[self]]]
                 /\ requestqueue' = Append(requestqueue, self)
                 /\ pc' = [pc EXCEPT ![self] = "WAITWRITERESPONSE"]
                 /\ UNCHANGED <<SwitchPacketQueue, RemainingLeasePeriod, owner, up, active, AliveNum, globalseqnum, switch, q, round, upSwitches, sentpkts>>

WAITWRITERESPONSE(self) == /\ pc[self] = "WAITWRITERESPONSE"
                          /\ query[self].type = "response"
                          /\ Assert(seqnum[self] = query[self].lastseqnum, "assertion failed.")
                          /\ query' = [query EXCEPT ![self] = NULL]
                          /\ active' = [active EXCEPT ![self] = false]
                          /\ SwitchPacketQueue' = [SwitchPacketQueue EXCEPT ![self] = SwitchPacketQueue[self] - 1]
                          /\ pc' = [pc EXCEPT ![self] = "STARTSWITCH"]
                          /\ UNCHANGED <<requestqueue, RemainingLeasePeriod, owner, up, AliveNum, globalseqnum, switch, q, seqnum, round, upSwitches, sentpkts>>

SWFAILURE(self) == /\ pc[self] = "SWFAILURE"
                 /\ IF AliveNum > 1 /\ up[self] = true THEN
                   /\ up' = [up EXCEPT ![self] = false]
                   /\ AliveNum' = AliveNum - 1
                   /\ query' = query
                 ELSE
                   /\ IF up[self] = false THEN
                     /\ up' = [up EXCEPT ![self] = true]
                     /\ query' = [query EXCEPT ![self] = NULL]
                     /\ AliveNum' = AliveNum + 1
                   ELSE
                     /\ TRUE
                     /\ UNCHANGED <<query, up, AliveNum>>
                 /\ pc' = [pc EXCEPT ![self] = "STARTSWITCH"]
                 /\ UNCHANGED <<requestqueue, SwitchPacketQueue, RemainingLeasePeriod, owner, active, globalseqnum, switch, q, seqnum, round, upSwitches, sentpkts>>

switch(self) == STARTSWITCH(self) \/ NOLEASE(self) \/ WAITLEASERESPONSE(self) \/ HASLEASE(self) \/ WAITWRITERESPONSE(self) \/ SWFAILURE(self)

STARTTIMER == /\ pc["LeaseTimer"] = "STARTTIMER"
             /\ owner /= NULL
             /\ IF RemainingLeasePeriod[owner] > 0 /\ active[owner] = false THEN
               /\ RemainingLeasePeriod' = [RemainingLeasePeriod EXCEPT ![owner] = RemainingLeasePeriod[owner] - 1]
               /\ owner' = owner
             ELSE
               /\ IF RemainingLeasePeriod[owner] = 0 THEN
                 /\ owner' = NULL
               ELSE
                 /\ TRUE
                 /\ owner' = owner
                 /\ UNCHANGED RemainingLeasePeriod
             /\ pc' = [pc EXCEPT !["LeaseTimer"] = "STARTTIMER"]
             /\ UNCHANGED <<query, requestqueue, SwitchPacketQueue, up, active, AliveNum, globalseqnum, switch, q, seqnum, round, upSwitches, sentpkts>>

expirationTimer == STARTTIMER

STARTPKTGEN == /\ pc["pktgen"] = "STARTPKTGEN"
              /\ IF sentpkts < TOTALPKTS THEN
                /\ AliveNum >= 1
                /\ upSwitches' = {sw \in SWITCHES : up[sw]}
                /\ \E sw \in upSwitches' : SwitchPacketQueue' = [SwitchPacketQueue EXCEPT ![sw] = SwitchPacketQueue[sw] + 1]
                /\ sentpkts' = sentpkts + 1
                /\ pc' = [pc EXCEPT !["pktgen"] = "STARTPKTGEN"]
              ELSE
                /\ pc' = [pc EXCEPT !["pktgen"] = "Done"]
                /\ UNCHANGED <<SwitchPacketQueue, upSwitches, sentpkts>>
              /\ UNCHANGED <<query, requestqueue, RemainingLeasePeriod, owner, up, active, AliveNum, globalseqnum, switch, q, seqnum, round>>

packetGen == STARTPKTGEN

Next == statestore \/ expirationTimer \/ packetGen \/ (\E self \in SWITCHES : switch(self))

Spec == Init /\ [][Next]_vars /\ WF_vars(statestore) /\ \A self \in SWITCHES : WF_vars(switch(self)) /\ WF_vars(expirationTimer) /\ WF_vars(packetGen)

AtLeastOneAliveSwitch == AliveNum >= 1 /\ \E sw \in SWITCHES : up[sw] = true

SingleOwnerInvariant == \A sw \in SWITCHES : sw /= owner => RemainingLeasePeriod[sw] = 0

Liveness == \A sw \in SWITCHES : (query[sw] /= NULL /\ query[sw].type = "request") => owner = sw
```

### D. Testbed

We evaluate RedPlane on a testbed consisting of six commodity switches (including two programmable ones) and servers, as shown in Figure 17.

### E. Detailed Switch ASIC Resource Utilization

Table 2 shows the additional switch ASIC resource consumption of RedPlane for 100K concurrent flows (using the P4 compiler’s output), expressed relative to each application’s baseline usage. Overall, there are ample resources remaining to implement other functions along with RedPlane. RedPlane uses TCAM to implement acknowledgment processing and request timeout management, which need range matches. In terms of scale vs. number of concurrent flows, only the SRAM usage would increase proportionally with the number of flows as it stores per-flow information (lease expiration time, current sequence number, and last acknowledged sequence number).

| Resource | Additional Usage |
|----------|------------------|
| Match Crossbar | 5.3% |
| Meter ALU | 8.3% |
| Gateway | 9.9% |
| SRAM | 13.2% |
| TCAM | 11.8% |
| VLIW Instruction | 5.5% |
| Hash Bits | 3.7% |

**Figure 17: Three-layer network testbed for experiments.**

- **Core layer (Arista 7060CX)**
- **ToR layer (Arista 7060CX)**
- **Aggregation layer (Programmable Arista 7170)**

---

This document provides a clear and organized presentation of the references, details of the lazy snapshotting algorithm, P4 skeleton code, TLA+ specification, testbed setup, and switch ASIC resource utilization.