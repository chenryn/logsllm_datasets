### Optimized Text

#### Daemon and Core Interaction
A daemon is responsible for fetching a `DeferralTicket` and interacting with the eAWDT, all on the same core. This ensures that the overhead is not masked by executing on an idle core. However, this approach may overestimate the overhead, as it is attributed to a single core rather than being distributed across multiple cores.

#### Porting User-Mode Applications
Porting a diverse set of user-mode applications, such as SPEC CPU2006, into the bare-metal environment of the NL476RG presents several challenges. Instead, we utilized the CoreMark benchmark [63], which is designed to test the performance of MCUs. We added a periodic timer interrupt handler to CoreMark, which executes the code to interact with the eAWDT and the hub.

#### Benchmarking with CIDER
On all platforms, we ran each benchmark application both without CIDER (baseline) and with CIDER, using AWDT expiration periods of 1 minute and 5 minutes. The 1-minute period is an extreme case to identify the worst-case performance overhead.

Overall, the overheads were negligible (Table IV). The numbers for the HBE and CM3 are the geometric means (and standard deviations) over the running times of the SPEC applications. The numbers for the NL476RG are averaged over ten runs of the CoreMark application. Even with the unreasonably short AWDT period of 1 minute, the average overheads were 0.28% (HBE), 0.32% (CM3), and 0.64% (NL476RG). This is because the code interacting with the eAWDT and the hub is mostly idle and occasionally performs short UART and networking I/O tasks. For longer ticket fetching intervals, the overhead was near zero and disappeared in the measurement noise.

#### Overhead Sources
We examined the overhead sources by measuring the wall-clock times for calls to `AWDT_GetNonce` and `AWDT_PutTicket`, as well as the time required to fetch a `DeferralTicket` from the hub. We found no significant differences between the three IoT devices, as the overhead is largely determined by external factors: UART and eAWDT speed, and network delay. On the CM3, `AWDT_GetNonce` took an average of 3.431 ms (standard deviation: 0.002), and `AWDT_PutTicket` took an average of 0.014 ms (standard deviation: 0.002). These numbers are averaged over 1,000 runs. `AWDT_PutTicket` is fast because the eAWDT verifies the ticket asynchronously; the caller does not have to wait for the eAWDT’s response. The time to fetch a `DeferralTicket`, which heavily depends on network conditions and server load, was 635.29 ms on average (standard deviation: 565.51).

#### Device-Specific Overheads
Although all three devices display similar wall-clock overheads, the HBE and CM3 can perform useful work while the CIDER thread is blocked waiting for a response from the network or the eAWDT. The operating system can simply schedule a different thread. In contrast, our simple, bare-metal NL476RG implementation spends this time busy-waiting. However, ticket fetching is a rare operation and does not cause significant overhead even in this case.

#### Related Work
Several industry standards—such as the Intelligent Platform Management Interface [22], the Data Center Manageability Interface [64], the Redfish Scalable Platforms Management API Specification [65], and Intel Active Management Technology [66]—enable efficient remote configuration and monitoring of servers. This functionality is similar to dominance. However, these systems are not suitable for the IoT space, as they require a separate co-processor (with a significant software TCB) and a special physical network interface that can be used simultaneously by both the operating system and the management system. In contrast, CIDER implements dominance without requiring complex additional hardware and software.

A large body of work explores the definition, implementation, and use of trusted computing primitives, focusing on confidentiality and integrity. This includes secure and high-assurance boot [41], measured boot and remote attestation [12–15], and isolated or shielded execution [16–21]. One line of work aims to enable attestation with minimal hardware support [67–77]. Several dynamic attestation approaches based on creating isolated execution environments have been proposed [78–82], allowing dynamic code loading [78, 82]. Security architectures for process sandboxing and memory isolation [83–85] or privilege separation [86, 87] have also been proposed for resource-constrained devices, mitigating the effects of software bugs and vulnerability exploitation. However, this line of work does not consider availability (or recoverability), primarily due to its potential complexity. In contrast, CIDER ensures availability using simple security primitives.

Work on secure code updates for resource-constrained devices comes closer to CIDER. Secure update mechanisms have been proposed primarily for nodes in sensor networks and combined with attestation [88–93]. Research in this area aims to improve the update protocol by making it robust against broader classes of attacks [94], adapting it to the constraints of embedded and IoT devices [95, 96], and reducing its overhead [96]. Key security goals include reliably detecting and blacklisting devices on which updates fail to install [88–90, 92, 93], protecting the secrecy of the update [91], and guaranteeing that rogue programs disguised as updates will not be installed [94, 95]. CIDER is largely orthogonal to this line of work. CIDER is a system architecture that guarantees an update mechanism will be invoked within a prescribed amount of time. In principle, CIDER could be used to force the invocation of many existing update protocols.

Commercial IoT platforms like Azure Sphere [97–99] and Android Things [100] offer a variety of security features, including secure boot, runtime isolation, attestation, hardware-based key protection, and software updates. Azure Sphere has evolved from the Sopris system [99], which adds a hardware security subsystem, including a separate security processor, key storage, crypto accelerators, and a TRNG to the MediaTek MT7687 MCU. The addition of custom security hardware makes Sopris quite different from CIDER, as it represents a fundamentally different trade-off between compatibility with existing microcontrollers and several key aspects of system design. Android Things uses a stripped-down version of the Android operating system. Its update mechanism can recover from compromised or broken applications but lacks a means of recovering from OS compromise or secure boot failure, such as after a rootkit infection.

#### Conclusion
In this paper, we introduce dominance, a novel trusted computing primitive for IoT. From a system administrator's perspective, dominance extends remote attestation and brings manageability of IoT devices to a new level: beyond obtaining evidence that a device is in good condition, dominance enables the administrator to remotely dictate the software that runs on the devices they manage via the hub, regardless of whether the device firmware is out of control. Dominance is ensured as long as the hub is secure.

In search of a practical scheme, we decompose dominance into two components: gated boot and a reset trigger. Gated boot ensures that only software allowed by the administrator can be executed on the device, and the reset trigger ensures that control can always return to gated boot within a bounded amount of time at the discretion of the remote administrator. We further identify a small set of hardware features required to realize these primitives, including latches and an AWDT. Latches are readily available on many devices, and we show that the AWDT can be easily realized.

Based on these ingredients, we propose an end-to-end system: CIDER. CIDER features transparency in its design by introducing minimum disruption when the device is operating normally and only brings visible effects (e.g., forcing the device to reset) when the device does not respond to the administrator’s requests or a firmware update is necessary. We show that CIDER has the potential to be adopted by a broad class of IoT devices by developing fully-functional prototypes of CIDER on three popular IoT platforms: HummingBoard Edge, Raspberry Pi Compute Module 3, and Nucleo-L476RG. Our evaluation shows that the overhead of CIDER is minimal and that it works seamlessly with complex deployments, such as Windows 10 IoT Core, Debian, Raspbian, and with bare-metal applications on constrained devices.

#### Acknowledgments
We would like to thank Jordan Rhee for his generous help. We also thank the reviewers for their helpful feedback. Manuel Huber was partly supported by the Fraunhofer Cluster of Excellence ‘Cognitive Internet Technologies.’

#### References
[References remain unchanged]

---

This optimized text is more coherent, clear, and professional, with improved flow and structure.