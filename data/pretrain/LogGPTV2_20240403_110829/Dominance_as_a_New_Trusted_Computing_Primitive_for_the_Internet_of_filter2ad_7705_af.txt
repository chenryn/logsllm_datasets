i.e., a daemon that fetches a DeferralTicket and interacts with
the eAWDT, to the same core. This ensures that the overhead
is not hidden through execution on an idle core. At the same
time, this is likely to overestimate the overhead, as it is charged
to a single core rather than being amortized across multiple
cores.
Porting a diverse set of user mode applications like SPEC
CPU2006 into the bare-metal environment of the NL476RG
poses several difﬁculties. Instead, we used the CoreMark
benchmark [63] developed to test the performance of MCUs.
We added a periodic timer interrupt handler executing the code
to interact with the eAWDT and the hub to CoreMark.
On all platforms, we ran each benchmark application without
CIDER (baseline) and with CIDER using AWDT expiration
periods of 1 minute and 5 minutes. The period of 1 minute
is an extreme case to identify the worst-case performance
overhead.
Overall, the overheads were negligible (Table IV). The
numbers for the HBE and the CM3 are the geometric means
(and standard deviations) over the running times of the SPEC
applications. The numbers for the NL476RG are averaged over
ten runs of the CoreMark application. Even for the unreasonably
short AWDT period of 1 minute, the overheads were 0.28%
(HBE), 0.32% (CM3) and 0.64% (NL476RG) on average. This
was because the code interacting with the eAWDT and the
hub is mostly idle and occasionally performs short UART and
networking I/O tasks. For longer ticket fetching intervals, the
overhead was near zero and disappeared in the measurement
noise.
We examined the overhead sources by measuring the wall-
clock times for a call to AWDT_GetNonce and AWDT_PutTicket,
as well as the time required to fetch a DeferralTicket from
the hub. We found no signiﬁcant difference between the three
IoT devices as the overhead is largely determined by external
factors: UART and eAWDT speed, and network delay. We
measured the following numbers on the CM3. On average,
AWDT_GetNonce takes 3.431 ms (standard deviation: 0.002) and
AWDT_PutTicket takes 0.014 ms (standard deviation: 0.002).
The numbers are averaged over 1,000 runs. AWDT_PutTicket is
fast because the eAWDT will verify the ticket asynchronously;
the caller does not have to wait for the eAWDT’s response.
The time to fetch a DeferralTicket, which heavily depends on
network conditions and server load, was 635.29 ms on average
(standard deviation: 565.51).
Although all three devices display similar wall-clock over-
heads, the HBE and CM3 can do useful work while the CIDER
(cid:18)(cid:21)(cid:19)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:35 UTC from IEEE Xplore.  Restrictions apply. 
thread is blocked waiting for a response from the network
or the eAWDT. The operating system can simply schedule a
different thread. In contrast, our simple, bare-metal NL476RG
implementation spends this time busy-waiting. However, ticket
fetching is a rare operation and does not cause signiﬁcant
overhead even in this case.
IX. RELATED WORK
Several industry standards—the Intelligent Platform Man-
agement Interface [22], the Data Center Manageability In-
terface [64], the Redﬁsh Scalable Platforms Management
API Speciﬁcation [65] and Intel Active Management Tech-
nology [66]—enable the efﬁcient remote conﬁguration and
monitoring of servers. This functionality is akin to dominance.
However, these systems are not appropriate for the IoT space,
as they require a separate co-processor (with a signiﬁcant
software TCB) and a special physical network interface that can
be used simultaneously by both the operating system and the
management system. In contrast, CIDER implements dominance
without requiring complex additional hardware and software.
A large body of work explores the deﬁnition, implementation
and use of several trusted computing primitives, focusing on
conﬁdentiality and integrity. This includes secure and high-
assurance boot [41], measured boot and remote attestation [12–
15] and isolated or shielded execution [16–21]. One line of work
aims to enable attestation with minimal hardware support [67–
77]. Several dynamic attestation approaches based on creating
isolated execution environments have been proposed [78–
82], while allowing dynamic code loading [78, 82]. Security
architectures for process sandboxing and memory isolation [83–
85] or privilege separation [86, 87] have also been proposed for
resource-constrained devices, mitigating the effect of software
bugs and of the exploitation of vulnerabilities. This line of
work, however, does not consider availability (or recoverability),
mostly due to its potential complexity. In contrast, CIDER
ensures availability using simple security primitives.
Work on secure code updates for resource-constrained
devices comes closer to CIDER. Secure update mechanisms
were proposed primarily for nodes in sensor networks and
combined with attestation [88–93]. Work in this area aims
to improve the update protocol by making it robust against
broader classes of attacks [94], adapting it to the constraints
of embedded and IoT devices [95, 96] and reducing its
overhead [96]. Key security goals include reliably detecting
and blacklisting devices on which updates fail to install [88–
90, 92, 93], protecting the secrecy of the update [91] and
guaranteeing that rogue programs disguised as updates will
not be installed [94, 95]. CIDER is largely orthogonal to this
line of work. CIDER is a system architecture that guarantees
that an update mechanism will be invoked within a prescribed
amount of time. In principle, CIDER could be used to force
invocation of many existing update protocols.
Azure Sphere [97–99] and Android Things [100] are com-
mercial IoT platforms with a variety of security features
including secure boot, runtime isolation, attestation, hardware-
based key protection and software updates. Azure Sphere has
evolved from the Sopris system [99]. Sopris adds a hardware
security subsystem, including a separate security processor,
key storage, crypto accelerators and a TRNG to the MediaTek
MT7687 MCU. The addition of custom security hardware
into the MCU makes Sopris quite different from CIDER,
as it constitutes a fundamentally different trade-off between
compatibility with existing microcontrollers and several key
aspects of system design. Android Things uses a stripped-
down version of the Android operating system. Its update
mechanism is capable of recovering from compromised or
broken applications. However, there is no means of recovering
from OS compromise or secure boot failure after, for example,
a rootkit infection.
X. CONCLUSION
In this paper, we introduce dominance, a novel trusted
computing primitive for IoT. From a system administrator’s
point of view, dominance extends remote attestation and brings
manageability of IoT devices to a new level: beyond obtaining
evidence that a device is in good condition, dominance enables
the administrator to remotely dictate the software that runs on
the devices he/she manages via the hub, regardless of whether
the device ﬁrmware is out of control. Dominance is ensured
as long as the hub is secure.
In search of a practical scheme, we decompose dominance
into two components, gated boot and a reset trigger, where gated
boot ensures that only software allowed by the administrator
can be executed on the device, and the reset trigger ensures
that control can always return to gated boot within a bounded
amount of time at the discretion of the remote administrator.
We further identify a small set of hardware features required
to realize these primitives: including latches and an AWDT.
Latches are readily available on many devices and we show
that the AWDT can be easily realized.
Based on these ingredients, we propose an end-to-end
system: CIDER. CIDER features transparency in its design by
introducing minimum disruption when the device is operating
normally, and only brings visible effects (e.g., forcing the
device to reset) when the device does not respond to the
administrator’s requests, or a ﬁrmware update is necessary.
We show that CIDER has the potential to be adopted by
a broad class of IoT devices by developing fully-functional
prototypes of CIDER on three popular IoT platforms: Hum-
mingBoard Edge, Raspberry Pi Compute Module 3 and
Nucleo-L476RG. Our evaluation shows that the overhead of
CIDER is minimal and that it works seamlessly with complex
deployments, such as Windows 10 IoT Core, Debian, Raspbian,
and with bare-metal applications on constrained devices.
XI. ACKNOWLEDGMENTS
We would like to thank Jordan Rhee for his generous help.
We also thank the reviewers for their helpful feedback. Manuel
Huber was partly supported by the Fraunhofer Cluster of
Excellence ‘Cognitive Internet Technologies.’
(cid:18)(cid:21)(cid:19)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:35 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] Ericsson, “IoT Market Outlook,” 2018, https://www.ericsson.com/en/
networks/trending/hot-topics/iot-connectivity/iot-market-outlook.
[2] Libelium, “Top 50 Internet of Things Applications,” 2018, http://www.
libelium.com/resources/top_50_iot_sensor_applications_ranking.
[3] Intel Corporation, “Intelligent Vending with Intel IoT Retail Gate-
way,” 2018, https://www.intel.com/content/www/us/en/embedded/retail/
vending/iot-gateway-for-intelligent-vending/overview.html.
[4] O. Alrawi, C. Lever, M. Antonakakis, and F. Monrose, “SoK: Security
Evaluation of Home-Based IoT Deployments,” in Proceedings of
the 40th IEEE Symposium on Security and Privacy (Oakland), San
Francisco, CA, May 2019.
[5] M. Antonakakis, T. April, M. Bailey, M. Bernhard, E. Bursztein,
J. Cochran, Z. Durumeric, J. A. Halderman, L. Invernizzi, M. Kallitsis,
D. Kumar, C. Lever, Z. Ma, J. Mason, D. Menscher, C. Seaman,
N. Sullivan, K. Thomas, , and Y. Zhou, “Understanding the Mirai Botnet,”
in Proceedings of the 27th USENIX Security Symposium (Security),
Baltimore, MD, Aug. 2018.
[6] O. Çetin, C. Ga˜nán, L. Altena, T. Kasama, D. Inoue, K. Tamiya, Y. Tie,
K. Yoshioka, and M. van Eeten, “Cleaning Up the Internet of Evil
Things: Real-World Evidence on ISP and Consumer Efforts to Remove
Mirai,” in Proceedings of the 2019 Annual Network and Distributed
System Security Symposium (NDSS), San Diego, CA, Feb. 2019.
[7] S. Herwig, K. Harvey, G. Hughey, R. Roberts, and D. Levin, “Measure-
ment and Analysis of Hajime, a Peer-to-peer IoT Botnet,” in Proceedings
of the 2019 Annual Network and Distributed System Security Symposium
(NDSS), San Diego, CA, Feb. 2019.
[8] S. Soltan, P. Mittal, and H. V. Poor, “BlackIoT: IoT Botnet of
High Wattage Devices Can Disrupt
the Power Grid,” in 27th
USENIX Security Symposium (USENIX Security 18). Baltimore, MD:
USENIX Association, 2018, pp. 15–32. [Online]. Available: https:
//www.usenix.org/conference/usenixsecurity18/presentation/soltan
[9] C.
Cimpanu,
“"Hide
and
Seek"
Becomes
First
of
Capable
Surviving Device
Botnet
https://www.bleepingcomputer.com/news/security/hide-and-seek-
becomes-ﬁrst-iot-botnet-capable-of-surviving-device-reboots/.
“BrickerBot mod_plaintext Analysis,”
2017,
hxxps://www.trustwave.com/Resources/SpiderLabs-Blog/BrickerBot-
mod_plaintext-Analysis.
Reboots,”
Simon,
[10] Kenin,
[11] O’Malley, Mike, “The 7 Craziest IoT Device Hacks,” 2018, https:
//blog.radware.com/security/2018/05/7-craziest-iot-device-hacks.
[12] Trusted Computing Group, “TPM Main Speciﬁcation Version 1.2
Rev. 116,” 2011, https://trustedcomputinggroup.org/resource/tpm-main-
speciﬁcation/.
[13] P. England, B. Lampson, J. Manferdelli, M. Peinado, and B. Willman,
“A Trusted Open Platform,” Computer, vol. 36, no. 7, pp. 55–62, Jul.
2003. [Online]. Available: http://dx.doi.org/10.1109/MC.2003.1212691
[14] T. Garﬁnkel, M. Rosenblum, and D. Boneh, “Flexible OS Support
and Applications for Trusted Computing,” in Proceedings of the 9th
Conference on Hot Topics in Operating Systems - Volume 9, ser.
HOTOS’03. Berkeley, CA, USA: USENIX Association, 2003, pp.
25–25. [Online]. Available: http://dl.acm.org/citation.cfm?id=1251054.
1251079
[15] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn, “Design and
Implementation of a TCG-based Integrity Measurement Architecture,”
in Proceedings of
the 13th Conference on USENIX Security
Symposium - Volume 13, ser. SSYM’04. Berkeley, CA, USA:
USENIX Association, 2004, pp. 16–16. [Online]. Available: http:
//dl.acm.org/citation.cfm?id=1251375.1251391
[16] James Greene, “Intel Trusted Execution Technology: Whitepaper,” Intel
IoT
2018,
Corporation, Tech. Rep., 2012.
[17] D. Kaplan, J. Powell, and T. Woller, “AMD Memory Encryption,”
Advanced Micro Devices, Tech. Rep., 2016.
[18] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and
A. Perrig, “TrustVisor: Efﬁcient TCB Reduction and Attestation,” in
Proceedings of the 2010 IEEE Symposium on Security and Privacy,
ser. SP ’10. Washington, DC, USA: IEEE Computer Society, 2010,
pp. 143–158. [Online]. Available: http://dx.doi.org/10.1109/SP.2010.17
[19] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ,
V. Shanbhogue, and U. R. Savagaonkar, “Innovative Instructions
and Software Model for Isolated Execution,” in Proceedings of
the 2Nd International Workshop on Hardware and Architectural
for Security and Privacy, ser. HASP ’13. New York,
Support
NY, USA: ACM, 2013, pp. 10:1–10:1.
http://doi.acm.org/10.1145/2487726.2488368
[Online]. Available:
[20] V. Costan and S. Devadas, “Intel SGX Explained,” IACR Cryptology
ePrint Archive, vol. 2016, p. 86, 2016.
[21] J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki,
“Flicker: An Execution Infrastructure for TCB Minimization,”
in Proceedings of
the 3rd ACM SIGOPS/EuroSys European
Conference on Computer Systems 2008, ser. Eurosys ’08. New
York, NY, USA: ACM, 2008, pp. 315–328. [Online]. Available:
http://doi.acm.org/10.1145/1352592.1352625
[22] Intel Corporation, “Intelligent Platform Management Interface Speciﬁ-
cation v2.0 rev. 1.1,” Intel Corporation, Hewlett-Packard, NEC, Dell,
Tech. Rep., 2013.
[23] Intel Corporation, “What
is Intel Management Engine?” 2017,
https://www.intel.com/content/www/us/en/support/articles/000008927/
software/chipset-software.html?productId=34227&localeCode=us_en.
[24] Intel LAN Access Division, “Intel Sideband Technology: An
Overview of The Intel Server Manageability Interfaces,” 2009,
https://www.intel.com/content/dam/doc/application-note/sideband-
technology-appl-note.pdf.
[25] P. Oester, “Dirty COW CVE-2016-5195,” 2016, https://dirtycow.ninja.
[26] T. Claburn, “Intel ﬁnds critical holes in secret Management Engine
hidden in tons of desktop, server chipsets,” 2017, https://www.theregister.
co.uk/2017/11/20/intel_ﬂags_ﬁrmware_ﬂaws/.
[27] A. Machiry, E. Gustafson, C. Spensky, C. Salls, N. Stephens, R. Wang,
A. Bianchi, Y. R. Choe, C. Kruegel, and G. Vigna, “Boomerang:
Exploiting the Semantic Gap in Trusted Execution Environments,”
in Proceedings of the 2017 Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA, Feb.–Mar. 2017.