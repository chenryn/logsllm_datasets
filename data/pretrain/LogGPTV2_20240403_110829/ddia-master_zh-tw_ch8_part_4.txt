### 优化后的文本

**图 8-2：当多台机器向同一目的地传输网络流量时，交换机队列可能会被填满。在此示例中，端口 1、2 和 4 都尝试将数据包发送到端口 3。**

如果 TCP 在某个超时时间内未收到确认（该超时时间基于观察到的往返时间计算），则认为数据包丢失，并自动重新发送丢失的数据包。尽管应用程序可能不会直接感知到数据包丢失和重传，但它会感受到延迟（等待超时到期，然后等待重传数据包的确认）。

#### TCP 与 UDP

一些对延迟敏感的应用程序，如视频会议和 IP 语音（VoIP），使用 UDP 而不是 TCP。这是在可靠性和延迟变化之间的一种折衷：由于 UDP 不执行流量控制且不重传丢失的数据包，因此避免了部分导致网络延迟变化的原因（尽管它仍然容易受到队列切换和调度延迟的影响）。

在延迟数据变得毫无价值的情况下，UDP 是一个不错的选择。例如，在 VoIP 电话通话中，可能没有足够的时间来重新发送丢失的数据包并在扬声器上播放这些数据。在这种情况下，重发数据包是没有意义的 —— 应用程序必须用静音填充丢失数据包的时间段（导致短暂的声音中断），然后继续数据流。重试发生在人类层面（“你能再说一遍吗？声音刚刚断了一会儿。”）。

所有这些因素都会导致网络延迟的变化。当系统接近其最大容量时，排队延迟的变化范围特别大：具有足够备用容量的系统可以轻松排空队列，而在高利用率的系统中，队列会迅速积累。

在公共云和多租户数据中心中，资源被许多客户共享，包括网络连接、交换机，甚至每台机器的网卡和 CPU（在虚拟机上运行时）。批处理工作负载（如 MapReduce，请参阅 [第十章](ch10.md)）能够轻易使网络连接饱和。由于无法控制或了解其他客户对共享资源的使用情况，如果附近的某个人（吵闹的邻居）正在大量使用资源，则网络延迟可能会发生剧烈变化【28,29】。

在这种环境下，只能通过实验方式选择超时：在较长时期内、在多台机器上测量网络往返时间的分布，以确定预期的延迟变化。然后，根据应用程序的特点，可以确定 **故障检测延迟** 与 **过早超时风险** 之间的适当折衷。

更好的做法是，系统不是使用配置的固定超时时间，而是持续测量响应时间和其变化（抖动），并根据观察到的响应时间分布自动调整超时时间。这可以通过 Phi Accrual 故障检测器【30】实现，该检测器在 Akka 和 Cassandra 【31】中使用。TCP 的超时重传机制也以类似的方式工作【27】。

### 同步网络与异步网络

如果我们可以依赖网络传递一些 **最大延迟固定** 的数据包而不丢弃它们，那么分布式系统将变得更加简单。为什么我们不能在硬件层面上解决这个问题，使网络可靠，从而使软件不必担心呢？

为回答这个问题，可以将数据中心网络与非常可靠的传统的固定电话网络（非蜂窝，非 VoIP）进行比较：延迟音频帧和掉话是非常罕见的。电话需要很低的端到端延迟以及足够的带宽来传输语音的音频采样数据。在计算机网络中有类似的可靠性和可预测性不是很好吗？

当你通过电话网络拨打电话时，它会建立一个电路：在整个呼叫路线上分配固定的、有保证的带宽量，直到通话结束【32】。例如，ISDN 网络以每秒 4000 帧的固定速率运行。呼叫建立时，每个帧内（每个方向）分配 16 位空间。因此，在通话期间，每一方都保证每 250 微秒传送一个精确的 16 位音频数据【33,34】。

这种网络是同步的：即使数据经过多个路由器，也不会受到排队的影响，因为呼叫的 16 位空间已经在网络的下一跳中保留了下来。而且由于没有排队，网络的最大端到端延迟是固定的。我们称之为 **有限延迟（bounded delay）**。

#### 我们不能简单地使网络延迟可预测吗？

请注意，电话网络中的电路与 TCP 连接有很大不同：电路是固定数量的预留带宽，在电路建立时没有其他人可以使用，而 TCP 连接的数据包 **机会性地** 使用任何可用的网络带宽。你可以给 TCP 一个可变大小的数据块（例如，一封电子邮件或一个网页），它会尽可能在最短的时间内传输它。TCP 连接空闲时，不使用任何带宽 [^ii]。

[^ii]: 除了偶尔的 keepalive 数据包，如果启用了 TCP keepalive。

如果数据中心网络和互联网是电路交换网络，那么在建立电路时就可以建立一个受保证的最大往返时间。但它们并不是这样：以太网和 IP 是 **分组交换协议**，不得不忍受排队的折磨和由此导致的无限网络延迟，这些协议没有电路的概念。

为什么数据中心网络和互联网使用分组交换？答案是，它们针对 **突发流量（bursty traffic）** 进行了优化。一个电路适用于音频或视频通话，在通话期间需要每秒传送相当数量的比特。另一方面，请求网页、发送电子邮件或传输文件没有任何特定的带宽要求 —— 我们只是希望它尽快完成。

如果你想通过电路传输文件，你得预测一个带宽分配。如果你猜得太低，传输速度会不必要的慢，导致网络容量闲置。如果你猜得太高，电路就无法建立（因为如果无法保证其带宽分配，网络不能建立电路）。因此，将电路用于突发数据传输会浪费网络容量，并且使传输不必要地缓慢。相比之下，TCP 动态调整数据传输速率以适应可用的网络容量。

已经有一些尝试去建立同时支持电路交换和分组交换的混合网络，比如 ATM [^iii]。InfiniBand 有一些相似之处【35】：它在链路层实现了端到端的流量控制，从而减少了在网络中排队的需要，尽管它仍然可能因链路拥塞而受到延迟【36】。通过仔细使用 **服务质量**（quality of service，即 QoS，数据包的优先顺序和调度）和 **准入控制**（admission control，限速发送器），可以在分组网络上模拟电路交换，或提供统计上的 **有限延迟**【25,32】。

[^iii]: **异步传输模式（Asynchronous Transfer Mode, ATM）** 在 20 世纪 80 年代是以太网的竞争对手【32】，但在电话网络核心交换机之外并没有得到太多的采用。它与自动柜员机（也称为自动取款机）无关，尽管共用一个缩写词。或许，在某些平行世界里，互联网是基于像 ATM 这样的东西，因此他们的互联网视频通话可能比我们的更可靠，因为他们不会遭受数据包丢失和延迟。

但是，目前在多租户数据中心和公共云或通过互联网 [^iv] 进行通信时，此类服务质量尚未启用。当前部署的技术不允许我们对网络的延迟或可靠性作出任何保证：我们必须假设网络拥塞、排队和无限延迟总是会发生。因此，超时时间没有 “正确” 的值 —— 它需要通过实验来确定。

[^iv]: 互联网服务提供商之间的对等协议和通过 **BGP 边界网关协议（BGP）** 建立的路由，与 IP 协议相比，更接近于电路交换。在这个级别上，可以购买专用带宽。但是，互联网路由在网络级别执行，而不是主机之间的单独连接，而且执行时间要长得多。

### 延迟和资源利用

更一般地说，可以将 **延迟变化** 视为 **动态资源分配** 的结果。

假设两台电话交换机之间有一条线路，可以同时进行 10,000 个呼叫。通过此线路切换的每个电路都占用其中一个呼叫插槽。因此，你可以将线路视为最多由 10,000 个并发用户共享的资源。资源以静态方式分配：即使你现在是线路上唯一的呼叫，并且所有其他 9,999 个插槽都未使用，你的电路仍将分配与线路充分利用时相同的固定数量的带宽。

相比之下，互联网动态共享网络带宽。发送者互相推挤和争夺，以让他们的数据包尽可能快地通过网络，网络交换机决定从一个时刻到另一个时刻传送哪个分组（即，带宽分配）。这种方法有排队的缺点，但其优点是它最大限度地利用了线路。线路成本固定，所以如果你更好地利用它，通过线路传输的每个字节都会更便宜。