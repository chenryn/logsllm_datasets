document.writeln()
xxx.innerHTML=
xxx.outerHTML=
innerHTML.replace
document.attachEvent()
window.attachEvent()
document.location.replace()
document.location.assign()
……
需要重点关注这几个地方的参数是否可以被用户控制。
除了服务器端直接输出变量到JavaScript外，还有以下几个地方可能会成为DOM
Based XSS的输入点，也需要重点关注。
页面中所有的inputs框
window.location(href、hash等)
window.name ?document.referrer
document.cookie ?localstorage
XMLHttpRequest返回的数据
……
安全研究者Stefano Di Paola设立了一个DOM Based XSS的cheatsheet，有兴趣深
入研究的读者可以参考。
3.3.7 换个角度看XSS的风险
前文谈到的所有XSS攻击，都是从漏洞形成的原理上看的。如果从业务风险的角度
来看，则会有不同的观点。
一般来说，存储型XSS的风险会高于反射型XSS。因为存储型XSS会保存在服务器
上，有可能会跨页面存在。它不改变页面URL的原有结构，因此有时候还能逃过一些
IDS的检测。比如IE 8的XSS Filter和Firefox的Noscript Extension，都会检查地址栏中的
地址是否包含XSS脚本。而跨页面的存储型XSS可能会绕过这些检测工具。
从攻击过程来说，反射型XSS，一般要求攻击者诱使用户点击一个包含XSS代码的
URL链接；而存储型XSS，则只需要让用户查看一个正常的URL链接。比如一个Web邮
箱的邮件正文页面存在一个存储型的XSS漏洞，当用户打开一封新邮件时，XSS
Payload会被执行。这样的漏洞极其隐蔽，且埋伏在用户的正常业务中，风险颇高。
从风险的角度看，用户之间有互动的页面，是可能发起XSS Worm攻击的地方。而
根据不同页面的PageView高低，也可以分析出哪些页面受XSS攻击后的影响会更大。
比如在网站首页发生的XSS攻击，肯定比网站合作伙伴页面的XSS攻击要严重得多。
在修补XSS漏洞时遇到的最大挑战之一是漏洞数量太多，因此开发者可能来不及，
也不愿意修补这些漏洞。从业务风险的角度来重新定位每个XSS漏洞，就具有了重要的
意义。
3.4 小结
本章讲述了XSS攻击的原理，并从开发者的角度阐述了如何防御XSS。
理论上，XSS漏洞虽然复杂，但却是可以彻底解决的。在设计XSS解决方案时，应
该深入理解XSS攻击的原理，针对不同的场景使用不同的方法。同时有很多开源项目为
我们提供了参考。
第4章 跨站点请求伪造（CSRF）
CSRF的全名是Cross Site RequestForgery，翻译成中文就是跨站点请求伪造。它
是一种常见的Web攻击，但很多开发者对它很陌生。CSRF也是Web安全中最容易被忽
略的一种攻击方式，甚至很多安全工程师都不太理解它的利用条件与危害，因此不予重
视。但CSRF在某些时候却能够产生强大的破坏性。
4.1 CSRF简介
什么是CSRF呢？我们先看一个例子。
还记得在“跨站脚本攻击”一章中，介绍XSSPayload时的那个“删除搜狐博客”的例子
吗？登录Sohu博客后，只需要请求这个URL，就能够把编号为“156713012”的博客文章
删除。
http://blog.sohu.com/manage/entry.do?
m=delete&id=156713012
这个URL同时还存在CSRF漏洞。我们将尝试利用CSRF漏洞，删除编号
为“156714243”的博客文章。这篇文章的标题是“test1”。
搜狐博客个人管理界面
攻击者首先在自己的域构造一个页面：
http://www.a.com/csrf.html
其内容为：
使用了一个标签，其地址指向了删除博客文章的链接。
攻击者诱使目标用户，也就是博客主“test1test”访问这个页面：
执行CSRF攻击
该用户看到了一张无法显示的图片，再回过头看看搜狐博客：
文章被删除
发现原来存在的标题为“test1”的博客文章，已经被删除了！
原来刚才访问http://www.a.com/csrf.html时，图片标签向搜狐的服务器发送了一次
GET请求：
CSRF请求
而这次请求，导致了搜狐博客上的一篇文章被删除。
回顾整个攻击过程，攻击者仅仅诱使用户访问了一个页面，就以该用户身份在第三
方站点里执行了一次操作。试想：如果这张图片是展示在某个论坛、某个博客，甚至搜
狐的一些用户空间中，会产生什么效果呢？只需要经过精心的设计，就能够起到更大的
破坏作用。
这个删除博客文章的请求，是攻击者所伪造的，所以这种攻击就叫做“跨站点请求
伪造”。
4.2 CSRF进阶
4.2.1 浏览器的Cookie策略
在上节提到的例子里，攻击者伪造的请求之所以能够被搜狐服务器验证通过，是因
为用户的浏览器成功发送了Cookie的缘故。
浏览器所持有的Cookie分为两种：一种是“Session Cookie”，又称“临时Cookie”；
另一种是“Third-party Cookie”，也称为“本地Cookie”。
两者的区别在于，Third-party Cookie是服务器在Set-Cookie时指定了Expire时间，
只有到了Expire时间后Cookie才会失效，所以这种Cookie会保存在本地；而Session
Cookie则没有指定Ex-pire时间，所以浏览器关闭后，Session Cookie就失效了。
在浏览网站的过程中，若是一个网站设置了Session Cookie，那么在浏览器进程的
生命周期内，即使浏览器新打开了Tab页，Session Cookie也都是有效的。Session
Cookie保存在浏览器进程的内存空间中；而Third-party Cookie则保存在本地。
如果浏览器从一个域的页面中，要加载另一个域的资源，由于安全原因，某些浏览
器会阻止Third-party Cookie的发送。
下面这个例子，演示了这一过程。
在http://www.a.com/cookie.php中，会给浏览器写入两个Cookie：一个为Session
Cookie，另一个为Third-party Cookie。
访问这个页面，发现浏览器同时接收了这两个Cookie。
浏览器接收Cookie
这时再打开一个新的浏览器Tab页，访问同一个域中的不同页面。因为新Tab页在同
一个浏览器进程中，因此Session Cookie将被发送。
Session Cookie被发送
此时在另外一个域中，有一个页面http://www.b.com/csrf-test.html，此页面构造了
CSRF以访问www.a.com。
这时却会发现，只能发送出Session Cookie，而Third-party Cookie被禁止了。
只发送了Session Cookie
这是因为IE出于安全考虑，默认禁止了浏览器在、、、
等标签中发送第三方Cookie。
再回过头来看看Firefox的行为。在Firefox中，默认策略是允许发送第三方Cookie
的。
在Firefox中允许发送第三方Cookie
由此可见，在本章一开始所举的CSRF攻击案例中，因为用户的浏览器是Firefox，
所以能够成功发送用于认证的Third-party Cookie，最终导致CSRF攻击成功。
而对于IE浏览器，攻击者则需要精心构造攻击环境，比如诱使用户在当前浏览器中
先访问目标站点，使得Session Cookie有效，再实施CSRF攻击。
在当前的主流浏览器中，默认会拦截Third-party Cookie的有：IE 6、IE 7、IE 8、
Safari；不会拦截的有：Firefox 2、Firefox 3、Opera、GoogleChrome、Android等。
但若CSRF攻击的目标并不需要使用Cookie，则也不必顾虑浏览器的Cookie策略
了。
4.2.2 P3P头的副作用
尽管有些CSRF攻击实施起来不需要认证，不需要发送Cookie，但是不可否认的
是，大部分敏感或重要的操作是躲藏在认证之后的。因此浏览器拦截第三方Cookie的发
送，在某种程度上来说降低了CSRF攻击的威力。可是这一情况在“P3P头”介入后变得
复杂起来。
P3P Header是W3C制定的一项关于隐私的标准，全称是The Platform for Privacy
Prefer-ences。
如果网站返回给浏览器的HTTP头中包含有P3P头，则在某种程度上来说，将允许
浏览器发送第三方Cookie。在IE下即使是、等标签也将不再拦截第三
方Cookie的发送。
在网站的业务中，P3P头主要用于类似广告等需要跨域访问的页面。但是很遗憾的
是，P3P头设置后，对于Cookie的影响将扩大到整个域中的所有页面，因为Cookie是以
域和path为单位的，这并不符合“最小权限”原则。
假设有www.a.com与www.b.com两个域，在www.b.com上有一个页面，其中包含
一个指向www.a.com的iframe。
http://www.b.com/test.html的内容为：
http://www.a.com/test.php是一个对 a.com域设置Cookie的页面，其内容为：
当请求http://www.b.com/test.html时，它的iframe会告诉浏览器去跨域请求
www.a.com/test.php。test.php会尝试Set-Cookie，所以浏览器会收到一个Cookie。
如果Set-Cookie成功，再次请求该页面，浏览器应该会发送刚才收到的Cookie。可
是由于跨域限制，在a.com上Set-Cookie是不会成功的，所以无法发送刚才收到的
Cookie。 这里无论是临时Cookie还是本地Cookie都一样。测试环境请求过程
可以看到，第二次发包，只是再次接收到了Cookie，上次Set-Cookie的值并不曾发
送，说明没有Set-Cookie成功。但是这种情况在加入了P3P头后会有所改变，P3P头允
许跨域访问隐私数据，从而可以跨域Set-Cookie成功。
修改www.a.com/test.php如下：
再次重复上面的测试过程：测试环境请求过程
可以看到，第二个包成功发送出之前收到的Cookie。
P3P头的介入改变了a.com的隐私策略，从而使得、等标签在IE中
不再拦截第三方Cookie的发送。P3P头只需要由网站设置一次即可，之后每次请求都会
遵循此策略，而不需要再重复设置。
P3P的策略看起来似乎很难懂，但其实语法很简单，都是一一对应的关系，可以查
询W3C标准。比如：
CP是Compact Policy的简写；CURa中 CUR是的简写；a是always的简
写。如下表：
[57] compact-purpose = "CUR" | ; for
"ADM" [creq] | ; for 
"DEV" [creq] | ; for 
"TAI" [creq] | ; for 
"PSA" [creq] | ; for 
"PSD" [creq] | ; for 
"IVA" [creq] | ; for 
"IVD" [creq] | ; for 
"CON" [creq] | ; for 
"HIS" [creq] | ; for 
"TEL" [creq] | ; for 
"OTP" [creq] ; for 
[58] creq = "a"| ;"always"
"i"| ;"opt-in"
"o" ;"opt-out"
此外，P3P头也可以直接引用一个XML 策略文件：
HTTP/1.1 200 OK
P3P: policyref="http://catalog.example.com/
P3P/PolicyReferences.xml"
Content-Type: text/html
Content-Length: 7413
Server: CC-Galaxy/1.3.18
若想了解更多的关于P3P头的信息，可以参考W3C标准。
正因为P3P头目前在网站的应用中被广泛应用，因此在CSRF的防御中不能依赖于
浏览器对第三方Cookie的拦截策略，不能心存侥幸。
很多时候，如果测试CSRF时发现等标签在IE中居然能发送Cookie，而又
找不到原因，那么很可能就是因为P3P头在作怪。
4.2.3 GET? POST?
在CSRF攻击流行之初，曾经有一种错误的观点，认为CSRF攻击只能由GET请求
发起。因此很多开发者都认为只要把重要的操作改成只允许POST请求，就能防止
CSRF攻击。
这种错误的观点形成的原因主要在于，大多数CSRF攻击发起时，使用的HTML标
签都是、、等带“src”属性的标签，这类标签只能够发起一次
GET请求，而不能发起POST请求。而对于很多网站的应用来说，一些重要操作并未严
格地区分GET与POST，攻击者可以使用GET来请求表单的提交地址。比如在PHP中，
如果使用的是$_REQUEST，而非$_POST获取变量，则会存在这个问题。
对于一个表单来说，用户往往也就可以使用GET方式提交参数。比如以下表单：
用户可以尝试构造一个GET请求：
http://host/register?
username=test&password=passwd
来提交，若服务器端未对请求方法进行限制，则这个请求会通过。
如果服务器端已经区分了GET与POST，那么攻击者有什么方法呢？对于攻击者来
说，有若干种方法可以构造出一个POST请求。
最简单的方法，就是在一个页面中构造好一个form表单，然后使用JavaScript自动
提交这个表单。比如，攻击者在www.b.com/test.html中编写如下代码：
<input type=password name="password"