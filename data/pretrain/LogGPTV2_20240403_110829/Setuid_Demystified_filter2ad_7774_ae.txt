to understand the behavior of the kernel through man-
ual code inspection. First, our formal model makes it
easier to describe the properties of the uid-setting sys-
tem calls. While we still need to read kernel code to
determine the kernel variables that affect the uid-setting
system calls, the majority of the workload, determining
their actions, is done automatically by simulation. Sec-
ond, the formal model is reliable because it is created
from the same environment where application programs
run. The formal model has corrected several mistakes
in the user ID model that we created manually. Third,
the formal model is useful in identifying semantic differ-
ences of uid-setting system calls among Unix systems.
Misuses of uid-setting system calls have caused many se-
curity vulnerabilities, which are good lessons in learning
the proper usage of the system calls. We will analyze two
such incidents in older versions of sendmail.
Sendmail [12] is a commonly used Mail Transmission
Agent(MTA). It runs in two modes: (1) as a daemon that
listens on port 25 (SMTP), and (2) via a Mail User Agent
to submit mail to the mail queue. In the ﬁrst case, all
three user IDs of the sendmail process are typically zero,
as it is run by the superuser root in the boot process. In
the second case, however, sendmail is run by an ordinary
user. As the mail queue is not world writable, sendmail
requires privilege to access the mail queue.
7.1 Misuse of Setuid
Next we describe a vulnerability that was caused by a
misuse of setuid [13]. Sendmail 8.10.1 installed the
sendmail binary as a setuid-root executable. When it was
executed by a non-root user, the real uid of the process
was the non-root user while both the effective uid and
saved uid were zero. This gave sendmail permission to
write to the mail queue since its effective uid was zero.
To minimize risks in the event that an attacker takes over
sendmail and executes malicious code with root privi-
lege, sendmail permanently dropped root privilege be-
fore doing potentially dangerous operations requested by
an user. This was done by calling setuid(getuid()), which
sets all three user IDs to the non-root user.
POSIX speciﬁes that if a process has appropriate priv-
ileges, setuid(newuid) sets all three user IDs to newuid;
otherwise, setuid(newuid) only sets the effective uid to
newuid (if newuid is equal to the real uid or saved uid).
In Linux, appropriate privileges are carried by the SE-
TUID capability. Furthermore, after any uid-setting sys-
tem call, the Linux kernel sets or clears the SETUID
capability bit, if necessary, to establish a simple post-
condition: the SETUID capability should be set if and
only if the effective uid is zero.
Line 1printf()setuid(1)Line 2Line 3printf()setuid(1)Line 2R=1,E=0,S=0Line 3R=1,E=1,S=1Line 1R=1,E=0,S=07.2
Interaction between User IDs and Group
IDs
Another vulnerability in Sendmail was caused by an in-
teraction between the user IDs and the group IDs [14].
To further reduce the risk from a malicious user taking
over sendmail, as of version 8.12.0 Sendmail no longer
installed sendmail as a setuid-root program. To give
sendmail permission to write to the mail queue, the mail
queue was conﬁgured to be writable by group smmsp,
and sendmail was installed as setgid-smmsp. Therefore,
when sendmail was executed by a non-root user, the real
gid of the process was the primary group of the user, but
the effective gid and saved gid were smmsp.
For the same reason that it permanently dropped root
privilege in previous versions, now sendmail perma-
nently dropped smmsp group privilege before executing
potentially malicious directives from a user. Similar to
the use of setuid(getuid()) to permanently drop root priv-
ilege, sendmail called setgid(getgid()) to permanently
drop smmsp group privilege. However, since sendmail
no longer had appropriate privileges because its effective
uid was not zero anymore, setgid(getgid()) only dropped
the privileged group ID smmsp from the effective gid but
left it in the saved gid. Consequently, any malicious user
who found some way to take over sendmail (e.g., by a
buffer overrun) could restore the smmsp group privilege
in the effective gid by calling setgid(-1, smmsp). This is
illustrated in Figure 10.
The vulnerability was caused by an interaction between
the user IDs and group IDs since changing user IDs may
affect the property of setgid. To avoid the vulnerabil-
ity, we can replace setgid(newgid) with setresgid(newgid,
newgid, newgid) if available, or setregid(newgid, newgid)
otherwise. The vulnerability also shows that if both user
IDs and group IDs are to be modiﬁed, the modiﬁcation
should follow a speciﬁc order (Section 8.1.2).
8 Guidelines
(a) A normal execution
of sendmail by a non-root
user
(b) An execution of send-
mail by an attacker
Figure 9: A vulnerability in sendmail due to a misuse
of setuid. Note the failure:
the programmer assumed
that setuid(getuid()) would always succeed in dropping
all privilege, but by disabling the SETUID capability, the
attacker is able to violate that expectation.
However, prior to version 2.2.16 of Linux, there was a
bug in the kernel that made it possible for a process to
clear its SETUID capability bit even when its effective
uid was zero. In this case, calling setuid(getuid()) only
modiﬁed the effective uid, and under these conditions,
sendmail would only drop root privilege from its effec-
tive uid but not its saved uid. Consequently, any mali-
cious local user who could take over sendmail (e.g., with
a buffer overrun attack) could restore root privilege in the
effective uid by calling setreuid(-1, 0). In other words, an
attacker could ensure sendmail’s attempt to drop all priv-
ileges would fail, thereby raising the risk of a root attack
on sendmail. Figure 9 illustrates the vulnerability.
The vulnerability was caused by the overloaded seman-
tics of setuid. Depending on whether a process has the
SETUID capability, setuid sets one user ID or all three
user IDs, but it returns a success code in both cases. The
vulnerability can be avoided by replacing setuid(newuid)
with setresuid(newuid, newuid, newuid) if available, or
with setreuid(newuid, newuid) otherwise.
We provide guidelines on the proper usage of the uid-
setting system calls. First, we discuss general guidelines
that apply to all setuid programs. Then, we focus on ap-
plications that use the uid-setting system calls in a spe-
ciﬁc way. We propose a high-level API for these appli-
cations to manage their privileges. The API is easier to
understand and to use than the Unix API.
ruid!=0, euid=suid=0SETUID-capability=1ruid=euid=suid!=0SETUID-capability=0A normal non-root user executes sendmailsendmail callssetuid(getuid())sendmail executesthe rest of code ruid!=0, euid=suid=0SETUID-capability=0ruid=euid!=0, suid=0SETUID-capability=0A malicious non-root user executes sendmailsendmail callssetuid(getuid())The malicious user takes over sendmail and executes setreuid(-1,0)ruid!=0, euid=suid=0The malicious userexecutes codewith root privilegeto newuid regardless of the effective user ID. We envision
the following scenarios where setuid may be misused:
• If a setuid-root program temporarily drops root
privilege with seteuid(getuid()) and later calls se-
tuid(getuid()) with the intention of permanently
dropping all root privileges, the program does not
get the intended behavior on Linux or Solaris, be-
cause the saved user ID remains root.
(However,
the program does receive the intended behavior on
FreeBSD.)
• Also on Linux or Solaris,
in a setuid-root pro-
gram, calling setuid(getuid()) permanently drops
root privileges; however, in a setuid-non-root pro-
gram (e.g., a program that is setuid-Alice where Al-
ice is a non-root user), calling setuid(getuid()) will
not permanently drop Alice’s privileges, because
the saved user ID remains Alice. This is particu-
larly confusing, because the way setuid-root pro-
grams permanently drop privileges does not work
in setuid-non-root programs on Linux or Solaris.
8.1.2 Obeying the Proper Order of System Calls
The POSIX-deﬁned appropriate privileges affect the ac-
tions of both system calls that set user IDs and that set
group IDs. Since often appropriate privileges are car-
ried by the effective uid, a program should drop group
privileges before dropping user privileges permanently.
Otherwise, after permanently dropping user privileges,
the program may be unable to permanently drop group
privileges. For example, the program in Figure 11(a) is
able to permanently drop both user and group privileges
because it calls setgid before setuid. In contrast, since
the program in Figure 11(b) calls setuid before setgid, it
fails to drop group privileges permanently.
8.1.3 Verifying Proper Execution of System Calls
Since the semantics of the uid-setting system calls may
change, e.g., when the kernel changes or when an appli-
cation is ported to a different Unix system, it is impera-
tive to verify successful execution of these system calls.
Checking Return Codes The uid-setting system calls
return zero on success and non-zero on failure. A process
should check the return codes to verify the successful ex-
ecution of these calls. This is especially important when
The
of
(a)
mental model
expected execution trace
programmer’s
an
(b) Real execution of send-
mail by a malicious user
Figure 10: A vulnerability in sendmail due to interac-
tion between user IDs and group IDs. The failure occurs
because the programmer has overlooked that she has al-
ready dropped root privilege and hence no longer has the
appropriate privileges to drop all group privileges in the
setgid call.
8.1 General Guidelines
8.1.1 Selecting an Appropriate System Call
Since setresuid has a clear semantics and is able to set
each user ID individually, it should always be used if
available. Otherwise, to set only the effective uid, se-
teuid(new euid) should be used; to set all three user IDs,
setreuid(new uid, new uid) should be used.
setuid should be avoided because its overloaded seman-
tics and inconsistent implementation in different Unix
systems may cause confusion and security vulnerabilities
for the unwary programmer. As described in Section 5.2,
in Linux or Solaris, if the effective user ID is zero, se-
tuid(newuid) sets all three user IDs to newuid; otherwise,
it sets only the effective user ID to newuid. On the other
hand, in FreeBSD setuid(newuid) sets all three user IDs
ruid=euid=suid!=0rgid!=smmspegid=sgid=smmspruid=euid=suid!=0rgid=egid=sgid!=smmsp(wrong assumption)A user executes sendmailsendmail callssetgid(getgid())sendmail executes the rest of code ruid=euid=suid!=0rgid!=smmspegid=sgid=smmspruid=euid=suid!=0rgid=egid!=smmspsgid=smmspA user executes sendmailsendmail callssetgid(getgid())An attackertakes over sendmailand executes setregid(-1, smmsp)ruid=euid=suid!=0rgid!=smmspegid=sgid=smmspThe attacker executes code withsmmsp group privilege// drop privilege
setuid(getuid());
// verify the process cannot restore privilege
if (setreuid(-1, 0) == 0)
return ERROR;
Figure 12: An example of a program that veriﬁes that
it has properly dropped root privileges. The veriﬁcation
is achieved by checking that unpermitted uid-setting sys-
tem calls will fail. Note that a full implementation should
also check the return code from setuid and verify that all
three user IDs are as expected after the call to setuid.
examine its fsuid via the /proc ﬁlesystem since Linux
does not offer a getfsuid call.
Verifying Failures Once an attacker takes control of a
process, the attacker may insert arbitrary code into the
process. Therefore, for further assurance on security,
the process should ensure that all unpermitted uid-setting
system calls will fail. For example, after dropping privi-
lege permanently, the process should verify that attempts
to restore privilege will fail. This is shown in Figure 12.
8.2 An Improved API for Privilege Manage-
ment
Although the general guidelines in Section 8.1 can help
programmers to use the uid-setting system calls more se-
curely, programmers still have to grapple with the com-
plex semantics of the uid-setting system calls and their
differences among Unix systems. The complexity is
partly due to a mismatch between the low-level seman-
tics of the system calls, which describes how to modify
the user IDs, and the high-level goals of the programmer,
which represent a policy for when the application should
run with privilege. We propose to resolve this tension by
introducing an API that is better matched to the needs of
application programmers.
8.2.1 Proposed API
In many applications, privilege management can typi-
cally be broken down into the following tasks:
• Drop privilege temporarily, in a way that allows the
privilege to be restored later.
(a) A program correctly
drops both user and group
privileges permanently by
calling setgid(getgid()) be-
fore setuid(getuid)
(b) A program fails
to
drop group privileges per-
manently because it calls
setuid(getuid()) before set-
gid(getgid())
Figure 11: Proper order of dropping user and group priv-
ileges. Figure (a), on the left, shows proper usage; ﬁgure