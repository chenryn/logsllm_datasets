title:Understanding and Detecting Disordered Error Handling with Precise
Function Pairing
author:Qiushi Wu and
Aditya Pakki and
Navid Emamdoost and
Stephen McCamant and
Kangjie Lu
Understanding and Detecting Disordered Error 
Handling with Precise Function Pairing
Qiushi Wu, Aditya Pakki, Navid Emamdoost, Stephen McCamant, and 
Kangjie Lu, University of Minnesota
https://www.usenix.org/conference/usenixsecurity21/presentation/wu-qiushi
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Understanding and Detecting Disordered Error Handling
with Precise Function Pairing
Qiushi Wu, Aditya Pakki, Navid Emamdoost, Stephen McCamant, and Kangjie Lu
University of Minnesota
Abstract
Software programs may frequently encounter various errors
such as allocation failures. Error handling aims to gracefully
deal with the errors to avoid security and reliability issues,
thus it is prevalent and vital. However, because of its complex-
ity and corner cases, error handling itself is often erroneous,
and prior research has primarily focused on finding bugs in
the handling part, such as incorrect error-code returning or
missing error propagation.
In this paper, we propose and investigate a class of bugs in
error-handling code from a different perspective. In particu-
lar, we find that programs often perform “cleanup” operations
before the actual error handling, such as freeing memory or
decreasing refcount. Critical bugs occur when these opera-
tions are performed (1) in an incorrect order, (2) redundantly,
or (3) inadequately. We refer to such bugs as Disordered
Error Handling (DiEH). Our investigation reveals that DiEH
bugs are not only common but can also cause security prob-
lems such as privilege escalation, memory corruption, and
denial-of-service. Based on the findings from the investiga-
tion, we then develop a system, HERO (Handling ERrors
Orderly), to automatically detect DiEH. The core of HERO
is a novel technique that precisely pairs both common and
custom functions based on the unique error-handling struc-
tures, which allows us to infer expected cleanup functions.
With HERO, we found 239 DiEH bugs in the Linux kernel,
the FreeBSD kernel, and OpenSSL, which can cause security
and reliability issues. The evaluation results show that DiEH
is critical and widely exists in system software, and HERO is
effective in detecting DiEH. We also believe that the precise
function pairing is of independent interest in other research
areas such as temporal-rule inference and race detection.
1 Introduction
A program may encounter various errors at runtime, including
hardware errors (e.g., disk corruption), software errors (e.g.,
an unlock without a lock), and invalid inputs. To avoid crashes
and insecure operations, the error-handling mechanisms cap-
ture and gracefully deal with errors. As such, error handling
plays a key role in ensuring the security and reliability of
programs. Also, error-handling code is very prevalent; for
example, according to our study, there are more than 400K
occurrences of error handling in about 18K source files in the
Linux kernel.
Unfortunately, error-handling code itself is often erroneous.
In particular, EIO [18] even shows that error-handling code
is “occasionally” correct. After checking the latest 100 CVE-
assigned vulnerabilities [41] in the Linux kernel, we also
found that at least 34% of them are related to incorrect error
handling. Critically, erroneous error handling may result in
many security issues such as use-after-free [11], information
leakage [10], and denial-of-service [9].
The error-prone nature of error-handling code stems from
several reasons. First, the error-handling code often deals with
corner cases that are less likely to occur during normal execu-
tion. This results in two problems: Bugs in the error-handling
code are often not triggered or noticed, and developers tend
to overlook such rare cases. We argue that, in adversarial
scenarios, attackers can intentionally trigger error-handling
code through techniques like memory exhaustion [60] and
fault injection [44]. Thus the bugs can be equally critical to
the ones in normal code. Second, traditional dynamic test-
ing, such as fuzzing, cannot adequately cover the majority
of error-handling code because errors are hard to trigger in
fuzzing. Third, error handling often involves special and com-
plicated logic, which poses significant challenges to correct
implementation.
Developers in low-level languages mainly use four error-
handling primitives. (1) Terminating execution. When an
error is critical, the error handling terminates the execution
to avoid attacks or data/file corruption. (2) Printing error
messages. The code prints out the details about the error
for users to investigate further. In this case, the error is less
critical, so that the execution can continue. (3) Passing error
upstream. The function encountering the error passes the
error back to the callers and expects the callers to handle it
USENIX Association
30th USENIX Security Symposium    2041
further. (4) Fixing errors. When the error is fixable, the error
handling can directly fix it (e.g., resetting the size value) and
continue.
Prior research thus has primarily focused on detecting
bugs only in the “handling.” For example, Rubio-González
et al. [45] and EIO [18] proposed static-analysis approaches
to detect error-propagation bugs in file systems, i.e., if error
codes are passed correctly. APEx [20], ErrDoc [53], and
EPEx [19] also check if errors are identified and handled in
the callers. Although a few previous works attempted to check
the operations before the handling, they are limited to only
missing-operation cases. For example, Hector [48] detects
missing memory release, and RID [28] detects missing ref-
count decrease. To the best of our knowledge, none of them
could detect other bugs associated with the operations in error
paths before handling, such as cases in which the operations
are present but in an incorrect order or redundant. To fill this
blank area, in this work, we aim to systematically study and
detect the bugs of problematic operations in error paths.
1.1 Contributions
In this paper, we first propose a class of error-handling bugs
from a different perspective and then develop an effective
detection system with multiple new techniques.
Proposing DiEH bugs. While prior research primarily fo-
cused on the “handling” part, we find that, in the error paths,
programs often perform “cleanup” operations before actu-
ally handling the errors. For the example shown in Figure 1,
when the function video_register_device() (line 13) en-
counters an error, the code releases the pointer vfd (line 24)
and unregisters the device (line 26) before passing the er-
ror to its caller. As the cleanup operations, these functions
must be called correctly; otherwise, the program is vulnerable
to bugs such as use-after-free. Buggy cases include calling
cleanup functions (1) in an incorrect order, (2) redundantly,
and (3) inadequately. We refer to such bugs as Disordered
Error Handling (DiEH). While prior research studied inade-
quate error handling such as missing memory release [48] and
missing refcount release [28], redundant and incorrect-order
error-handling problems are unexplored.
An in-depth study of DiEH. Although the impacts and re-
sults of DiEH are known types of bugs like double-free and
memory leak, it represents the root causes of a wide class of
error-handling bugs from a different perspective, so we first
define it and conduct an in-depth study of DiEH in multiple
aspects: causes, commonness, categories, and criticalness.
Specifically, DiEH is hard to avoid because (1) cleanup func-
tions are often custom and are hard to use correctly, and
(2) the error-handling code can be highly complex and in-
volve corner cases. As a result, DiEH bugs are a common
occurrence in complex programs like OS kernels. DiEH bugs
can cause multiple types of security impacts, such as privi-
lege escalation, memory corruption, information leakage, and
denial-of-service, as will be detailed in §2.2.5.
Precise function pairing analysis. Our study also shows
that the key to detecting DiEH is to precisely determine which
cleanup functions should be called to handle the correspond-
ing functions in the normal paths, i.e., to identify function
pairs. However, function pairing is a challenging problem
because such functions are abundant, diverse, and highly
customizable. Moreover, the pairing rules are typically un-
documented, so pairing is hard for even manual analysis. To
address this problem, we propose a new technique so-called
delta-based pairing (see §4) that precisely identifies both
common and custom functions that should appear pairwise by
exploiting unique error-handling structures. We believe our
pairing analysis is of independent interest in other research
areas such as temporal-rule inference and race detection.
An effective detection system—HERO. Based on our em-
pirical study of DiEH bugs, we identify three challenges in
their detection. First, DiEH represents the root causes of
a wide class of semantic bugs in error-handling code from
a different perspective, so the detecting rules are undefined
yet. Second, a DiEH case may not be harmful, so we need
to distinguish and remove harmless cases. Third, by nature,
code paths containing DiEH bugs often involve path condi-
tions (e.g., return-value checks), so path-feasibility testing is
required to ensure that the paths are valid. To address these
problems, we model DiEH and propose HERO ((Handling
ERrors Orderly)). HERO is equipped with multiple tech-
niques such as scalable symbolic summaries for eliminat-
ing infeasible paths and dependency reasoning for removing
harmless incorrect-order DiEH cases. HERO also provides
rankings to facilitate the final manual confirmation for DiEH
bugs.
Open-source implementation and new bugs. We imple-
mented HERO on top of LLVM-10 and plan to open-source
it. HERO is scalable and effective. By applying it to the
Linux kernel, the FreeBSD kernel, and the OpenSSL library,
we found 239 new DiEH bugs, most of which can cause
critical security issues to billions of devices running these
applications. We reported these bugs and fixed most of them
by working with the maintainers. The results confirm that
DiEH bugs are indeed common and security-critical.
2 Background and Study
In this section, we discuss the unique structures of error han-
dling and present our study of DiEH.
2.1 Error handling and function pairs
In case of an error, functions usually first clean up or han-
dle the previous operations, e.g., releasing memory, before
actually handling the error (e.g., returning an error code to
their callers). Unwinding previous operations is however
2042    30th USENIX Security Symposium
USENIX Association
goto unprep_clk_gate;
vfd = video_device_alloc();
if (!vfd) {
ret = -ENOMEM;
goto unreg_v4l2_dev;
...
ret = v4l2_device_register(&pdev->dev, &dev->v4l2_dev);
if (ret)
}
...
ret = video_register_device(vfd, VFL_TYPE_VIDEO, 0);
if (ret)
1 /* drivers/media/platform/s5p-g2d/g2d.c */
2 static int g2d_probe(struct platform_device *pdev) {
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21 unreg_video_dev:
22
23 rel_vdev:
24
25 unreg_v4l2_dev:
26
27 unprep_clk_gate:
28
29 }
...
dev->m2m_dev = v4l2_m2m_init(&g2d_m2m_ops);
if (IS_ERR(dev->m2m_dev))
goto unreg_video_dev;
v4l2_device_unregister(&dev->v4l2_dev);
..
...
goto rel_vdev;
video_unregister_device(dev->vfd);
video_device_release(vfd);
Figure 1: Example of the error-handling structure.
error-prone. To understand the characteristics of the han-
dling of previous operations, we introduce the idea of leader
and follower functions and use an example to describe the
error-handling structure.
Leader and follower functions. Resources such as memory
and locks are limited. As such, an operation against a
resource, such as memory allocation, is typically accom-
panied by another operation that balances or recovers the
resource. We define a function as a leader function if it
initiates an operation against a resource. The operation
typically either acquires or changes the state of the resource.
Correspondingly, we define a function as a follower function
if it recovers the resource. The leader function and the
corresponding follower function constitute a function pair.
Common function pairs include allocation/deallocation,
lock/unlock, refcount increase/decrease, etc. As an example,
Figure 1 shows three pairs of functions. The first pair is
v4l2_device_register() and v4l2_device_unregister(),
which initializes and cleans up the related objects
such as
The second pair is
video_device_release(),
video_device_alloc()
which allocates and releases the memory for video de-
vices. The third pair is video_register_device() and
video_unregister_device() whose functionality is similar
to the first function pair.
Unique error-handling structure—EH stacks and deltas.
We identify a unique and common error-handling structure
and refer to it as EH stacks and deltas. We use the example in
Figure 1 to illustrate the structure. In the error paths, follower
functions are called to handle leader functions in a “stack”
manner (i.e., the last follower corresponds to the first leader).
refcounts and locks.
and
In EH stacks, we use unfilled circles to represent the functions
in the normal paths, gray-filled circles to show the functions
in the error paths, and black-filled circles to indicate the errors
or error checks. In the example, v4l2_device_register(),
video_device_alloc(), and video_register_device() are
leader functions and are called sequentially: 4 – 7 – 13 . In
case of an error in v4l2_m2m_init(), 17 , the error path is 22 –
24 – 26 . In the path, the corresponding follower functions are
called in reverse order, hence we call the structure EH stack.
Due to the complexity of error handling and the poor design
of certain follower functions, in practice, the structure may
not be honored, leading to DiEH.
In this example, there are multiple EH stacks, two of which
are: 4 – 7 – 26 (path 1) and 4 – 7 – 13 – 24 – 26 (path 2).
When we compare the unfilled lines and gray-filled lines in
these two EH stacks, we can obtain the difference which is
7 – 24 . We call the difference an EH delta. In this partic-
ular case, the delta consists of only one leader function and
one follower function. As such, we can infer that functions
video_device_alloc() and video_device_release() are a
function pair. The inference does not require any domain
knowledge or understanding semantic structure, thus it can be
automated. In HERO, we will leverage EH stacks and deltas
to precisely pair functions.
Figure 2: The EH stacks of the function in Figure 1. EHS = EH
stack, EP = error path, NP = normal path, ∆ = the EH delta of EHSi
and EHSi−1 where the EH stacks are numbered in the “#” column.
2.2 Disordered Error Handling
In this subsection, we present the definition, categorization,
causes, and security impacts of DiEH.
2.2.1 Definition of DiEH
DiEH represents cases in which the follower functions are
called in an incorrect order, redundantly, or inadequately.
Thus, a DiEH case occurs if it satisfies the three conditions:
(1) a function contains at least one error paths, (2) the function
has at least one leader functions, and (3) in some error paths,
the corresponding follower functions are not called in order,
exactly once, or adequately. Informally, we define a DiEH
case as follows.
Definition 1 Let EP be an error path in a function, [LD] be
the list of leader functions in EP, [FL] be the actual list of
USENIX Association
30th USENIX Security Symposium    2043
7263428347262826283741324241713372224262841322EHS-4Nodes in NP Nodes in EP #1234follower functions in EP. Suppose [FL]′ is the expected list of
follower functions to appear in EP based on the foreknowl-
edge of function pairs, then:
∃DiEH ∈ EP, if [FL] ̸= [FL]′
Specifically, [FL] ̸= [FL]′ can occur due to three situations.
(1) [FL] and [FL]′ contain the same set of follower functions
but in different orders. (2) One or more follower functions are
in [FL]′ but not in [FL]. (3) One or more follower functions
are in [FL] but not in [FL]′. Based on the definition, we
identify the key challenge in detecting DiEH as collecting
[FL]′, which requires the foreknowledge of function pairs. In
§4, we describe our new technique, which precisely identifies
function pairs.
...
pm_runtime_enable(rga->dev);
...
ret = v4l2_device_register(&pdev->dev, &rga->v4l2_dev);
if (ret)
goto err_put_clk;
vfd = video_device_alloc();
if (!vfd) {
...
goto unreg_v4l2_dev;
}
...
rga->vfd = vfd;
...
rga->m2m_dev = v4l2_m2m_init(&rga_m2m_ops);
if (IS_ERR(rga->m2m_dev)) {
1 /* drivers/media/platform/rockchip/rga/rga.c */
2 static int rga_probe(struct platform_device *pdev) {
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23