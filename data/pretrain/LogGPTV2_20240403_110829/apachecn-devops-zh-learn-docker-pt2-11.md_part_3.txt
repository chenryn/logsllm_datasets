到目前为止，我们讨论了独特的安全相关内核特性和功能。大多数安全漏洞可以通过理解和应用这些内核功能来消除。安全专家和倡导者考虑到在生产环境中更快、更广泛地采用盛行的容器化思想，提出了一些额外的安全解决方案，详细描述如下。在开发、部署和交付企业级容器时，开发人员和系统管理员需要高度重视这些安全方法，以消除任何种类的内部或外部安全攻击。
### 用于容器安全性的 SELinux
**安全增强 Linux** ( **SELinux** )是清理 Linux 容器中安全漏洞的勇敢尝试，是 Linux 内核中**强制访问控制** ( **MAC** )机制、**多级安全** ( **MLS** )和**多类别安全** ( **MCS** )的实现。有一个新的合作项目，被称为 sVirt 项目，它是建立在 SELinux 上的，并且正在与 Libvirt 集成，为虚拟机和容器提供一个适应性强的 MAC 框架。这种新的体系结构为容器提供了一个受保护的隔离和安全网，因为它主要防止容器内的根进程与容器外运行的其他进程接口和干扰。Docker 容器被自动分配给 SELinux 策略中指定的 SELinux 上下文。
SELinux 总是在标准**自主访问控制** ( **数模转换器**)被完全检查后检查所有允许的操作。SELinux 可以基于定义的策略，在 Linux 系统中的文件和进程以及它们的操作上建立和实施规则。根据 SELinux 规范，文件，包括目录和设备，被称为对象。类似地，进程，如运行命令的用户，被称为主体。大多数操作系统使用数模转换器系统来控制主体如何与对象以及相互之间的交互。在操作系统上使用 DAC，用户可以控制自己对象的权限。例如，在 Linux 操作系统上，用户可以使他们的主目录可读，给用户和主题一个窃取潜在敏感信息的句柄。然而，单独的数模转换器并不是一种可靠的安全方法，数模转换器的访问决策完全基于用户身份和所有权。通常，数模转换器只是忽略其他安全使能参数，如用户的角色、功能、程序的可信度以及数据的敏感性和完整性。
由于每个用户通常对其文件拥有完全的决定权，因此很难确保系统范围的安全策略。此外，用户运行的每个程序只需继承授予用户的所有权限，用户就可以自由更改对其文件的访问。所有这些导致了对恶意软件的最小保护。许多系统服务和特权程序以粗粒度特权运行，因此这些程序中任何一个的任何缺陷都很容易被利用和扩展，从而获得对系统的灾难性访问。
正如开头提到的，SELinux 将 MAC 添加到了 Linux 内核中。这意味着对象的所有者对对象的访问没有控制权或决定权。内核强制执行 MAC，这是一种通用的 MAC 机制，它需要能够对系统中的所有进程和文件强制执行管理性设置的安全策略。这些文件和流程将用于根据包含各种以安全为中心的信息的标签做出决策。
MAC 具有足够保护系统的固有能力。此外，媒体访问控制确保应用安全，防止任何故意的黑客攻击和篡改。MAC 还提供了强大的应用隔离，因此任何被攻击和被破坏的应用都可以单独运行。
接下来是 MCS。它主要用于保护容器免受其他容器的影响。也就是说，任何受影响的容器都没有能力关闭同一 Docker 主机中的其他容器。MCS 基于 MLS 功能，并且独特地利用了 SELinux 标签的最后一个组件*MLS 字段*。一般来说，当容器启动时，Docker 守护程序会挑选一个随机的 MCS 标签。Docker 守护进程用 MCS 标签标记容器中的所有内容。当守护进程启动容器进程时，它告诉内核用相同的 MCS 标签来标记进程。内核只允许容器进程读/写它们自己的内容，只要它们的 MCS 标签与文件系统内容的 MCS 标签匹配。内核阻止容器进程读取/写入标有不同 MCS 标签的内容。这样，被黑客攻击的容器进程就不会攻击不同的容器。Docker 守护程序负责保证没有容器使用相同的 MCS 标签。通过熟练使用 MCS，容器之间的错误级联被禁止。
Ubuntu 16.04 中默认不安装 SELinux，不像 Red Hat Fedora 或 CentOS 发行版，所以通过运行`apt-get`命令安装 SELinux，如下图所示:
```
$ sudo apt-get install selinux
```
然后通过运行以下`sed`脚本继续启用 SELinux 模式:
```
$ sudo sed -i 's/SELINUX=.*/SELINUX=enforcing/' /etc/selinux/config
$ sudo sed -i 's/SELINUXTYPE=.*/SELINUXTYPE=default/' \
/etc/selinux/config  
```
**应用装甲**(**appamor**)是一个高效易用的 Linux 应用安全系统。AppArmor 主动保护操作系统和应用免受任何外部或内部威胁，甚至防止未知的应用缺陷被任何黑客滥用。AppArmor 可用于保证 Docker 容器和容器内的应用。政策正在成为确保容器安全的有力机制。政策制定和政策的自动执行对保证容器的安全大有帮助。默认情况下，AppArmor 附带了 Ubuntu 16.04，所以总是建议使用这个。
在 Docker 1 . 13 . 0 和更高版本上，Docker 二进制文件在 TMPFS 中生成这个概要文件，然后将其加载到内核中。在 1.13.0 之前的 Docker 版本中，该配置文件改为在`/etc/apparmor.d/docker`中生成。
`docker-default`配置文件是运行容器的默认配置文件。它具有适度的保护性，同时提供广泛的应用兼容性。当你运行一个容器时，它使用`docker-default`策略，除非你用`security-opt`选项覆盖它。例如，下面明确指定了默认策略:
```
$ docker run --rm -it --security-opt \
 apparmor=docker-default hello-world
```
**安全计算模式** ( **seccomp** )由 Docker Engine 支持，这是 Linux 内核中提供的一项安全功能。这允许管理员将容器内可用的操作限制到单个系统调用的粒度。这种能力极大地限制了应用容器对主机系统执行操作的访问。企业可以相应地配置 seccomp 配置文件，并将其应用于 Docker 环境。
默认的 seccomp 配置文件为使用 seccomp 运行容器提供了一个合理的默认值，并禁用了 300 多个系统调用中的大约 44 个。它具有适度的保护性，同时提供广泛的应用兼容性。
绝大多数应用都能够在默认配置文件没有任何问题的情况下运行。事实上，默认配置文件已经能够主动保护 Dockerized 应用免受几个以前未知的错误的影响。
默认情况下，在 Ubuntu 16.04 上启用此功能:
```
$ cat /boot/config-`uname -r` | grep CONFIG_SECCOMP= CONFIG_SECCOMP=y
```
**SCONE:采用英特尔 SGX** 的安全 Linux 容器，被 Sergei Arnautov 和他的团队描述为 Docker 的安全容器机制，它使用英特尔 CPU 的 SGX 可信执行支持来保护容器进程免受外部攻击。SCONE 的设计目标固定如下:
*   首先，它获得了小型**可信计算基础** ( **TCB** )
*   其次，它必须具有低性能开销
SCONE 提供了一个安全的 C 标准库接口，可以透明地加密/解密 I/O 数据，从而显著降低 SGX 飞地内线程同步和系统调用的性能影响。SCONE 支持用户级线程和异步系统调用。根据他们的研究论文，SCONE 的评价很受 Docker 粉丝的赞赏。
#### 加载 Docker 映像及其安全影响
Docker 通常会从网络中提取映像，这些映像通常会在源位置进行精选和验证。但是，出于备份和恢复的目的，可以使用`docker save`子命令保存 Docker 映像，并使用`docker load`子命令加载回。这种机制也可以用来通过非常规手段加载第三方映像。不幸的是，在这样的实践中，Docker 引擎无法验证来源，因此映像可能携带恶意代码。因此，作为安全的第一道屏障，Docker 在一个*色的*子流程中提取映像进行权限分离。即使 Docker 确保了权限分离，也不建议加载任意映像。
**使用容器扫描来保护 Docker 部署** : **Docker 内容信任** ( **DCT** )为出版商提供了一种简单快捷的方法来保证在 Docker Hub 等网络级存储库中发布的容器的真实性。但是，组织需要采取务实的措施来访问、评估和采取相应的行动，以确保其容器化应用在其整个生命周期中的安全性。准确地说，离散余弦变换是一种方法，通过它您可以安全地签署您创建的 Docker 映像，以确保它们来自他们所说的来源。
**使用黑鸭 Hub 管理容器安全性**:黑鸭 Hub 是在整个应用生命周期中管理应用容器安全性的重要工具。Black Duck Hub 允许组织识别和跟踪其环境中易受攻击的开源应用和组件。评估利用了 Black Duck 的知识库，其中包含 110 万个开源项目的信息，以及超过 3500 亿行代码中超过 10 万个已知开源漏洞的详细数据。通过与红帽的合作，黑鸭识别和清点开源和专有代码生产环境的能力现在正被应用于容器化环境。红帽推出了**深度容器检测** ( **DCI** )，这是一款以企业为中心的产品，将容器认证、政策和信任融入到部署和管理应用容器的整体架构中。作为 DCI 的一部分，红帽与黑鸭合作，为组织提供了一种在部署之前、期间和之后验证容器内容的方法。
集成 Black Duck Hub 的漏洞扫描和映射功能使 OpenShift 客户能够更加自信和安全地消费、开发和运行容器化应用，因为他们知道这些应用包含经过独立验证和认证的代码。该集成还提供了一种方法来跟踪新披露的漏洞或与容器老化相关的可能影响安全性和风险的变更的影响。Black Duck Hub 的应用漏洞扫描和映射功能使 Docker 客户能够在部署前后识别漏洞，并发现随着容器化应用老化或暴露于新的安全漏洞和攻击而出现的问题。