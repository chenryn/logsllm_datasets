ported by mainstream IoT manufacturers. Through Homekit, users
can manage their IoT appliances using Apple’s uniform manage-
ment console [10], i.e., the Home app on iOS, iPadOS, etc.
To support HomeKit, the device manufacturer needs to integrate
into its IoT device the HomeKit Accessory Protocol (HAP) li-
brary [25] (see Figure 1). HomeKit supports Wi-Fi and Bluetooth
as the communication channel. The HAP library processes device
operation commands received by the Wi-Fi or Bluetooth interfaces,
and passes them up to the manufacturer’s control program on the
Application Logic Layer (ALL) (see Figure 1). The ALL program
then calls device drivers in the Hardware Abstract Layer (HAL) to
operate the IoT device (e.g., opening the lock).
The IoT device needs to be paired with the user’s Apple device
(e.g., iPhone with Home app): the user needs to be authenticated by
the HAP library with a secret eight-digit setup code (entered in the
Home app); once succeeded, she can use the Home app to establish
an encrypted connection with the device – a process similar to BLE
bonding [1]. The commands (e.g., open the lock) from the Home
app are sent through encrypted sessions to the HAP library, which
passes the commands to the ALL program.
Zigbee/Z-Wave compatible DMC. Mainstream IoT devices often
support a DMC built on top of the Zigbee [40] or Z-Wave [50]
communication protocol. Its in-device architecture is similar to
HomeKit, as outlined in Figure 1. Specifically, the manufacturer
integrates a protocol library in firmware, which we refer to as the
Zigbee/Z-Wave library, into IoT devices with hardware supports
for the protocols at the message transport layer. Similar to HAP,
the Zigbee/Z-Wave library processes commands received from the
transport layer, and passes them up to the ALL program, which
then operates the device (e.g., open the lock).
To control a device through this DMC, one should first pair the
device with a hub (called Z-channel hub in our research). For this
purpose, she needs to bind the hub to her account (with the hub ven-
dor) through the hub vendor’s app. Note that the hub vendor (e.g.,
SmartThings) may not be the device’s manufacturer (e.g., August).
The follow-up device-hub pairing process can have different levels
of protection, depending on the protocol version. More specifically,
the early versions (e.g., Z-Wave S0 security) do not have authentica-
tion in place and the later ones (e.g., Z-Wave S2 security) come with
protection similar to that for HomeKit pairing and BLE binding:
the user enters a secret code (install code of Zigbee [72] and device
specific key of Z-Wave [64]) into the hub app to enable the hub and
the device to exchange encryption keys, which are stored and used
for later secure communication between them.
Smart-speaker Seamless DMC. Smart speakers (e.g., Amazon
Echo [8] and Google Home [17]) offer another DMC, allowing one
to use voice or related mobile apps to control the devices. Smart
speaker DMCs have two different architectures, the local architec-
ture and cloud-based architecture. The local seamless architecture,
introduced to Google Home in 2019 [5, 46], is emerging: the smart
speaker connects to the IoT device using Bluetooth and sends the
commands directly to the IoT device without going through the
cloud. The device needs to integrate a smart speaker DMC library
into the device (see Figure 1). In contrast, the traditional cloud-based
architecture is more widely used: a user needs to first set up her
IoT device, for example, a LIFX bulb, using the LIFX app; then after
an access delegation from the LIFX server to the smart speaker’s
server (e.g., with an OAuth token [44] issuing to the latter), the
user can issue commands to the smart speaker, and the commands
go through the clouds to reach the LIFX bulb. In this paper we
study the local architecture of smart speaker which presents a new
DMC (called smart-speaker Seamless DMC or smart-speaker DMC),
while with the cloud-based architecture the IoT device in nature
uses the m-DMC to communicate with the smart speaker.
2.3 State Machine Model of DMCs
Session 5A: Control System SecurityCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1291Figure 1: The different IoT control channels (Manufc. is short for Manufacture; H.W. is short for hardware)
Based on the prior models [56, 71] of IoT devices, we abstract a state-
machine model to describe any DMC’s operations in IoT devices.
Generally speaking, a DMC on an IoT device is characterized by
four states - Factory, Waiting for Network, Waiting for Binding, and
Running, as illustrated in Figure 2.
Figure 2: State machine model of a DMC
• Factory (Fct) State. This is the initial state of any DMC when the
device is at its factory setting. After booting the device, the state
will automatically transit to the next one (WfN, see below).
• Waiting for Network (WfN) State. At this state, a DMC is waiting
for joining a network to communicate with the user (user app or
other consoles). A network provision operation will drive the WfN
state to the next state (WfB, see below). Here, the network provi-
sion process depends on the communication techniques utilized by
specific DMCs: for example, HomeKit and many m-DMCs can lever-
age Wi-Fi, and thus the network provision involves connecting the
device/DMC to the local Wi-Fi network [47]; a Zigbee-compatible
DMC connects to a Zigbee hub through the Zigbee pairing process;
the smart-speaker DMC leverages BLE for communication, and
will involve a BLE pairing process to communicate with a smart
speaker.
• Waiting for Binding (WfB) State. After network provision, the
DMC can communicate with the user app/console and is ready to
bind with a specific user (a.k.a., user binding). In general, the first
user who binds the device becomes the owner of the DMC and
has full control over it. Typically other users are not allowed to
go through the binding process again. The user binding process
of different DMCs can be quite different: for example, HomeKit
DMC requires the user to manually enter a setup code (labeled on
HomeKit-enabled device [33]) in the app; some m-DMCs ask one
to pass a physical proximity challenge (e.g., by pushing the phys-
ical button on the Philips Hue Bridge [29]); certain m-DMCs (e.g,
ismartgate [23], LIFX [24]) make the process much simpler: anyone
can use the companion app to bind with the DMC automatically
when it is not bound.
• Running (Run) State. The DMC in this state is ready to receive
commands from the device owner and control its hosting device.
Through the user console (e.g., mobile app), the owner can issue
commands and manage users (e.g., adding a shared/guest user in
this DMC). The permission of the shared/guest user is subject to
revocation and expiry. In different DMCs, such policies are often
enforced by different components of their DMC architecture (e.g.,
the IoT cloud, the IoT hub or the IoT device).
Under any state other than Fct, a reset operation can drive the
state back to the Fct state. This can be done, for example, by pushing
a button on the device (for a few seconds).
3 UNDERSTANDING CODEMA
Overview. Our research shows that those co-located DMCs in the
wild are designed to independently manage an IoT device, without
communicating with each other their individual policies and coor-
dinating on their enforcement. This exposes a new attack surface,
allowing an unauthorized party to leverage one DMC to silently
bypass the owner’s device control implemented through a different
DMC. Although some manufacturer DMCs include the mechanisms
to manage third-party DMCs (e.g., allowing the user using the man-
ufacturer app to enable/disable a third-party DMC or control its net-
work provision, see Section 3.2), we found that such mechanisms are
all flawed due to the lack of proper protocols for cross-DMC security
management/coordination. This problem turns out to be fundamen-
tal to the design of IoT access control, as discovered in our study
on 4 leading third-party DMCs integrated in mainstream devices.
Threat model. We consider a typical use scenario where the device
owner opts for some (typically one) but not all channels through
her favorite app(s), such as Apple Home, to manage the device,
which we believe is realistic given the hassle that configuring all
DMCs incurs (Section 2). This practice has also been confirmed in
our user study (Section 4).
Today, IoT devices often need to be shared with babysitters,
tenants, Airbnb guests, etc., who are granted temporary access. Such
a temporary permission has been considered by recent studies [52,
53, 61, 62, 69], and its real-world demand is evidenced from the
descriptions of vacation rental services and related blogs [2–4, 34].
Therefore, in some cases, we assume that a malicious user may
Session 5A: Control System SecurityCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1292temporarily come in close proximity (e.g., a home) to target IoT
device(s): e.g., an Airbnb guest checks into a home equipped with
a smart door lock and a garage controller. Through the owner’s
management app, she may intentionally, temporarily share some
of her devices with the malicious user (e.g., the smart lock for door
opening during the guest’s stay).
The attacker aims to silently acquire persistent, unauthorized
control on the owner’s devices, including those once shared to him
with his access rights later revoked. In the meantime, we consider
that all components of a DMC are benign (e.g., the management
app, cloud, hub, hardware and software inside the device), and the
attacker does not physically alter the device (e.g., to disassemble
the device or solder wires).
Identification of Codema flaws. To identify the Codema flaws
in each device that supports multiple DMCs, we leverage a model-
guided approach. Generally, given a device, we first model all its
DMCs with finite-state-machines (Figure 2) considering the four
states discussed in Section 2.3, particularly identifying any depen-
dency relation between the state transitions of two DMCs: i.e., fully
configuring a DMC A (from the Fct to Run state) requires an ap-
proval/operation step through DMC B. Depending on whether or
not the dependency relation exists, the approach to assess the secu-
rity policy coordination between two DMCs is slightly different:
• Scenario 1: no dependency between DMC A and DMC B: (1) our
approach considers that the owner fully configures one DMC (e.g.,
DMC B, leaving DMC A dangling); (2) if the adversary can suc-
cessfully configure DMC A to gain device control without involve-
ment/awareness of the owner, our approach reports a potential
Codema flaw and further confirm it through end-to-end attacks.
• Scenario 2: DMC A depends on DMC B: (1) our approach considers
that the owner opts for and fully configures DMC B (leaving DMC
A dangling) and shares device-access rights with the adversary; (2)
leveraging the access-rights on DMC B, the adversary fully config-
ures DMC A to gain device access; (3) later the owner revokes the ad-
versary’s access rights using DMC B; (4) at this stage, if the (unautho-
rized) adversary still has device-control via DMC A, our approach
reports a Codema flaw and confirms it through end-to-end attacks.
Notably, all devices we tested are vulnerable affecting main-
stream IoT vendors, demonstrating that the problem is general (see
Section 3.3). Since exploiting Codema flaws depends on how the
device owner configures and uses multiple-DMC IoT devices, we
report an attack feasibility study in Section 4, which shows that
Codema risks are realistic in the real world with serious practical
impact on IoT security. We discuss the limitation of the current
approach in Section 6.
Responsible disclosure. We reported our findings to all affected
manufacturers, including Apple, August, Abode, Philips, etc., which
all acknowledged the significance of the problems. Mitigation has
been deployed or is on the way.
3.1 Disjointed DMC Management
The DMCs in the wild are generally designed not to interfere with
each other’s operations. For example, the specification of Apple
HomeKit highlights that the setup process of HomeKit should not
depend on any operation in the manufacturer app, for the purpose
of ease of use [22]. It turns out that in mainstream devices, a DMC’s
state machine is unrelated to those of others, indicating that the
DMCs are meant to work independently without coordinating their
security policies. For such devices, as long as the owner leaves one
DMC dangling, the adversary has the opportunity to leverage that
DMC to control the device.
Figure 3: State machines of DMCs in the ismartgate device
Codema Flaw 1: Disjointed HomeKit and m-DMC. The ismart-
gate smart garage door controller [23] enables users to remotely
open and close their garage doors through either the ismartgate app
(m-DMC) or the Apple Home app (HomeKit). Both DMCs leverage
Wi-Fi to connect to the Internet. Figure 3 shows the state machines
of the two DMCs, whose state machines are fully disjointed.
Consider the scenario where the home owner opts for the Home
app to manage the garage door, through HomeKit, whose setup and
management (network provision, user binding, etc.) are not con-
tingent on the configuration of the m-DMC. This simple treatment,
however, brings in a security risk: the m-DMC on the device is left
open for user binding, while the HomeKit DMC has neither control
nor observation on the m-DMC, based upon Apple’s design. Note
that although the two DMCs are not contingent on each other, they
share the same HAL and hardware (Figure 1), including network
provision that drives the state transition.
As a result, an unauthorized user who is allowed to connect to
the home Wi-Fi, such as an Airbnb guest, babysitter, handyman
(see the user study in Section 4), can silently use the m-DMC to
set up the garage controller. This goes through the manufacturer’s
simple setup process: the malicious user leverages the ismartgate
app, which can scan and find the ismartgate controller connected to
the same Wi-Fi network automatically, to bind the m-DMC with his
ismartgate account. Afterwards, the malicious user can remotely
control the garage door using the ismartgate app. Such unautho-
rized control, however, is unaware by the owner, whose Home app
shows that the device is under her control, and she is the only
one who can access the garage. We successfully conducted a PoC
attack with our ismartgate garage controller installed on a real
home-garage door. Video recording of the attack is available [49].
Codema Flaw 2: Disjointed Zigbee-based DMC and m-DMC.
The popular Philips Hue [45] devices include DMCs that can be
managed through both Philips Hue Bluetooth app (the m-DMC)
and alternatively a Zigbee-compatible hub (e.g., Philips Hue Bridge
or Samsung SmartThings hub), and managed through the hub ven-
dor’s DMC (e.g., using the SmartThings app [48]). However, the
m-DMC (based on Bluetooth for communication) and Zigbee com-
patible DMC are found to be completely independent, whose state
Session 5A: Control System SecurityCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1293Figure 4: State machines of DMCs in the Philips Hue BLE
device
machines are completely disjoint (Figure 4). Similar to Flaw 1, se-
curity risk arises when the owner uses any single DMC but not
both.
Consider that the owner uses the Zigbee-compatible DMC and
the SmartThings app to manage her devices, which allows her to
control IoT devices from different manufacturers connected to the
SmartThings hub, including Philips Hue devices. In this case, the
owner does not need to bother installing Philips Hue app or con-
figure the Philips m-DMC at all. As a result, the m-DMC becomes
dangling and stays in its WfN state. Any user in the range of Blue-
tooth (330 feet [14]), including neighbors and even strangers outside
a home, can run the Philips Hue Bluetooth app to silently pair with
and control the device. More seriously, such malicious behavior is
completely oblivious to the SmartThings app running on the Zigbee
DMC, which receives no information about the unauthorized access
through the m-DMC.
We performed end-to-end attacks on our own Philips Hue Blue-
tooth plug, Philips Hue bridge, and SmartThings hub. The attacker
outside the room utilized the dangling DMCs to bind with the plug