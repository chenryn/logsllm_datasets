sages, such as Initialize-Routing-Table, to modify
a BACS’ routing tables. In this way, operators lose vis-
ibility on single devices or even entire sections of the
building automation system.
Finally, process control subverting includes those at-
tacks that directly modify control processes and, con-
sequently, interfere with physical operation. This kind
of attacks requires more skilled attackers with sufﬁcient
knowledge about the building automation system func-
tioning. In this scenario, attackers exploit speciﬁc con-
trollers by using several different BACnet services, such
as WriteProperty or DeleteObject, to change the
BACSs’ structures and operations. This leads to a loss
of control by the operators and, consequently, leads to
risks for components and people.
3.3 Evaluation Environments
For this work, we analyzed two different building au-
tomation installations over more than two months of con-
stant operation. The ﬁrst building automation system
belongs to the University of Twente in the Netherlands
and is in charge of supervising utilities and services pro-
vided to the university campus. Its duties encompass en-
ergy consumption control, HVAC, and room monitoring
and management (e.g., pressure and temperature control,
shading, etc.). The second building automation system
belongs to the Lawrence Berkeley National Laboratory
(LBNL) and supervises several services on its premises.
The LBNL process control focuses mostly on room mon-
itoring and energy consumption for the Lab facilities.
Both infrastructures deal with hundreds of BACSs from
several different vendors.
The IDS we deployed at the University of Twente
linked to a SPAN port on a switch directly connected
with the SCADA servers monitoring the whole building
automation system. The same switch is responsible for
routing most of the trafﬁc of the building automation net-
work. This allowed us to capture and analyze most of the
BACnet messages exchanged by BACSs. Differently, at
LBNL we could monitor only a subset of the building au-
tomation system by linking to a switch in charge of con-
necting BACSs inside one building. However, this was
sufﬁcient to automatically gather the information needed
for our approach to craft the speciﬁcation rules.
The two infrastructures generally showed similar traf-
ﬁc patterns. Several BACSs shared the same sets of ob-
jects and used the same kind of messages to exchange
information. Furthermore, both UT’s and LBNL’s traf-
ﬁc samples included numerous BACnet routing mes-
sages (e.g., Who-Is, I-Am, Who-Has, and I-Have) or-
ganizing communication paths within the two networks.
However, the two infrastructures presented some dif-
ferences related to communication and control strate-
gies (e.g., all BACSs deployed at UT used conﬁrmed
services thus requiring acknowledgments from mes-
sage recipients while some devices at LBNL used just
unconﬁrmed ones). Particularly,
the employment of
794  25th USENIX Security Symposium 
USENIX Association
4
BACSs from different vendors led operators to employ
individual procedures implemented through the use of
ConfirmedPrivateTransfer BACnet services. Such
services are used to invoke proprietary or non-standard
routines in remote BACSs.
3.4 Setting and Threat Model
The reason to develop a network-based IDS is twofold.
First, a network-based solution is easier to deploy than
host-based ones. Secondly, this setup allows us to have
minimum impact on NCS processes. Once deployed,
we assume that our system is able to capture real-time
trafﬁc of the monitored building automation system in
a completely passive fashion and to retrieve documen-
tation publicly available on the Internet. This allows
to gather the information we need to build speciﬁcation
rules and implement effective detection.
On the other side, we assume attackers can gain full
access to the network as well. We consider this hap-
pening in a way that is similar to standard IT environ-
ments (e.g., phishing, software vulnerability exploita-
tion). Tools such as Shodan [40] show how easy it is
to ﬁnd building automation networks exposing their de-
vices to the Internet. Once inside, attackers can obtain
a convenient viewpoint on the building automation con-
trol processes. Two key factors support this assumption.
First, most building automation protocols take advan-
tage of broadcast communications to exchange informa-
tion among devices (e.g., routing notiﬁcations). This al-
ready allows attackers to easily observe a large part of
the trafﬁc. Secondly, the hierarchical structure of com-
mon building automation networks steers valuable infor-
mation messages towards servers and DCSs. By gaining
access to one of these servers, attackers can observe most
of the trafﬁc within the building automation system.
Within a building automation network, attackers may
use attacks outlined in §3.2 to gain knowledge on, or
subvert, the correct functioning of the building automa-
tion system. In this last scenario, any safety feedback in
place can usually be overridden [49]. Therefore, attack-
ers can put infrastructure components under stress, pos-
sibly threatening human safety when it comes to devices
such as electrical equipment.
4 Speciﬁcation Mining Approach
Our approach works towards automated development of
speciﬁcation rules for network security monitoring. Set-
ting up and customizing a speciﬁcation-based IDS for a
particular infrastructure requires a large amount of infor-
mation about the monitored system, implying a substan-
tial manual effort in gathering and reﬁning the speciﬁ-
cation rules. As details of the infrastructures are often
Figure 3: Speciﬁcation-mining approach
described within specs and conﬁguration ﬁles, especially
in many NCS environments, the process of collecting this
information—and, consequently, the development of the
actual IDS—can be automated to a fairly high degree
through the following steps (see also Figure 3):
(1) System Discovery gathers information about the
monitored NCS. In this step, our system analyzes the net-
work trafﬁc in order to: 1) identify devices communicat-
ing on the network (e.g., models, brands); and 2) deter-
mine role and purpose of each identiﬁed device (e.g., a
device is a controller, an HMI, etc.). Every time the sys-
tem collects enough information about a speciﬁc device
it proceeds with the next step.
(2) Feature Lookup implements a set of information
retrieval techniques to gather knowledge about devices
identiﬁed during System Discovery. The purpose of this
step is to: 1) ﬁnd veriﬁed information (e.g., specs, con-
ﬁguration ﬁles) about the infrastructure’s devices; and
2) select features and constraints from the retrieved doc-
uments and arrange results in a structured form.
A successful Feature Lookup relies on the assump-
tions of availability and linkability outlined in the in-
troduction. The assumption of availability implies the
existince of documents about infrastructures and compo-
nents that are automatically retrievable. This requires the
information to be provided in electronic form and being
suitable for parsing. Also, this assumption includes an
assurance on the authenticity of the retrieved informa-
tion (e.g., by the use of reliable sources, by the employ-
ment of secure retrieval techniques). The assumption of
linkability guarantees that the information derived by the
retrieved documentation can be checked by the system
against observations within the trafﬁc (e.g., messages,
variables, etc.). Particularly, after the identiﬁcation of
network devices and the successful retrieval of their re-
lated constraints from the documentation, the assump-
tion of linkability enables assigning effective speciﬁca-
tion rules to the right targets.
(3) Rule Deﬁnition uses the knowledge obtained in
the Feature Lookup to craft the speciﬁcation rules. To
achieve this goal, the system needs to: 1) select identi-
ﬁed information from Feature Lookup; 2) translate this
information to speciﬁcation rules.
USENIX Association  
25th USENIX Security Symposium  795
5
We focus our speciﬁcation-based intrusion detection on
controllers (e.g., BACSs for building automation sys-
tems, Programmable Logic Controllers or PLCs for
ICSs, Electronic Control Units or ECUs for in-vehicular
networks). This decision comes from the key role these
components have within NCSs: Controllers are involved
in any monitoring and control operation of the infrastruc-
ture either autonomously or accessed by operators. Fur-
thermore, controllers are likely targets for attackers (as
illustrated in §3.2).
We observe that NCS controllers share a number of
properties. First, every controller employs a limited set
of variables to fulﬁll its function. These variables can
go from simple memory addresses to complex objects
but often have predetermined types. Moreover, all con-
trollers use a limited set of methods (or services) to ac-
cess and manipulate variables of other controllers. Fi-
nally, each variable can assume a limited range of val-
ues according to its type or the physical characteristic it
represents. We leverage these shared properties to deﬁne
a set of general constraints, or abstract rules, checking
NCS variables’ types, values and access methods. These
abstract rules are the seeds we use to automatically gen-
erate specialized speciﬁcation rules. To achieve this, we
deﬁne a mechanism that maps information retrieved in
the Feature Lookup step to the abstract rules. This pro-
cess automatically completes the abstract rules and, as a
result, customizes detection for the monitored NCS.
Once a rule is deﬁned, it becomes active and, thus,
part of the detection mechanism. During detection, an
active rule veriﬁes if its related constraint is fulﬁlled or
not. When this last condition becomes true, the system
triggers an alert for the user.
Having presented the phases in a generic way, we now
describe our experimental setup and, then, how we have
instantiated them to build a speciﬁcation-based IDS for
BACnet-based building automation systems.
Implementation background We implement our ap-
proach using the Python programming language [51]
and Bro [46]. Bro is a network trafﬁc analyzer em-
ployed in different domains such as network security
monitoring and performance measurement. The sys-
tem comes with comprehensive built-in functionalitiy
for trafﬁc analysis and supports several network proto-
cols ranging from standard (e.g., HTTP, FTP) to domain-
speciﬁc (e.g., Modbus [41], DNP3 [10]). Bro provides a
Turing-complete scripting language that allows users to
select and analyze network events (e.g., connection es-
tablishments). We choose to describe speciﬁcation rules
through the “Bro scripting language” because of its ef-
ﬁciency and expressiveness. We developed a BACnet
parser for Bro using Spicy [55], a parser generator whose
speciﬁcation language allows users to deﬁne a protocol’s
syntax and semantics at a high level. We publish the
BACnet parsing code for Spicy, as well as the Python
scripts , as open source software.2 However, we cannot
open-source the Bro code containing the rule checks due
to privacy agreements with the two building automation
system sites.
5 System Discovery
To identify BACSs we implement three different tech-
niques that we term: “BACnet Device Object anal-
ysis”, “BACnet Address linking”, “BACnet Property
set ﬁngerprinting”. The ﬁrst technique directly fol-
lows from the protocol standard and relies on the
mandatory presence of a Device object in every BACS
device. The Device object deﬁnes “a standardized
object whose properties represent the externally vis-
ible characteristics of a BACnet device”.
Among
these properties there are: Object Name, Vendor Name,
Vendor Identifier, Model Name, Firmware Re-
vision, Application Software Version, Loca-
tion, and Description.
these prop-
erties are set by vendors and provide informa-
tion on a device’s identity (e.g., Model Name) and
role (e.g., Description). BACnet services such as
ReadProperty and ReadPropertyMultiple can ac-
cess those properties. As these services are widely em-
ployed by user interfaces and logging servers to automat-
ically update data related to infrastructure’s components,
information on Device objects regularly passes through
the network and, thus, is available to System Discovery.
As the Object Identifier property of a Device ob-
ject is a parameter that uniquely identiﬁes a device in a
BACnet network, a message such as the one in Figure 4
allows us to identify a BACS and understand its purpose.
In the Wireshark screenshot example, BACS with identi-
ﬁer “17001” is a “Blue ID S10 Controller”.
Most of
For BACnet objects of other types, since no infor-
mation can be extracted from the IP address (multiple
BACnet devices may share the same IP address), a fur-
ther parameter allows to identify message sources and
destinations:
the BACnet address. As for the Device
object’s Object Identifier, the BACnet address (to-
gether with the Network Identifier) is unique within
a BACnet network.
In the “BACnet Address linking”
technique, the BACnet address bridges the gap between
a known Device object and any BACnet object included
in the same BACS. Figure 5 shows an example of this
analysis. When “device 4001” is known (as a result of
the previous technique), any message carrying both the
related Device object’s Object Identifier and the
2https://github.com/specification-mining-paper-
usenix-2016/specification-mining
796  25th USENIX Security Symposium 
USENIX Association
6
Table 1: University of Twente - BACS device list
# of devices
5
15
7
25
36
12
85
2
16
2
3
3
3
3
3
1
# of devices
23
14
11
159
1
9
1
4
4
4
1
2
7
Vendor
Kieback&Peter
Priva
Priva
Priva
Priva
Priva
Priva
Priva
Priva
Delta Controls
Siemens
Siemens
Siemens
Siemens
Siemens
Unknown
Model
DDC4000
HX 80E
Compri HX
Compri HX 3
Compri HX 4
Compri HX 6E
Compri HX 8E
Blue ID S10
Comforte CX
eBCON
PXG80-N
PXC64-U
PXC128-U
PXR11
PXC00-U + PXA30-RS
Unknown
Role
DCS
Router
Controller
Controller
Controller
Controller
Controller
Controller
HMI
Controller
Controller
Controller