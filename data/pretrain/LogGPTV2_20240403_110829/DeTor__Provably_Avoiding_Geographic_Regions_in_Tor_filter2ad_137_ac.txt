If Ce ∩Cx = /0, as in Figure 2a, then it is not possible
for the same country to have been traversed twice, and
Figure 1: Never-once: To prove that a Tor circuit has
avoided region F, we compute the shortest possible dis-
tance to traverse the circuit as well as a point in F. This
ﬁgure has two example circuits, showing that the shortest
distance might traverse F at different legs of the circuit.
that includes F does so between source and entry.
Last, we compare this theoretical minimum RTT in-
cluding F (Rmin) with the end-to-end measured RTT
(Re2e), and ensure that
(1 + δ )· Re2e < Rmin.
(4)
For round-trip communications that pass Tor’s in-
tegrity checks and satisfy Eq. (4), we obtain our proof
that the packets could not have possibly traversed the
forbidden region. For those that do not satisfy the equa-
tion, much like Alibi Routing, we are unable to distin-
guish whether the packets traversed the forbidden region
or, e.g., were simply delayed on a congested link. We
discuss such application-level considerations in §5.3.
4.2 Never-Twice Avoidance
The goal of never-twice is to ensure that a potential ad-
versary is not able to see and manipulate both the trafﬁc
between source and entry node and the trafﬁc between
exit node and destination. Adversaries who are on both
the entry and exit legs of a circuit are able to launch
deanonymization attacks [28, 14, 17, 15]. However, an
adversary on no more than one of those legs cannot.
As with never-once, Tor’s onion routing ensures that
the packet and its response indeed traveled through the
Tor circuit in order, and we measure the end-to-end
round-trip time Re2e. However, as described in §3.2, our
step for establishing mutual exclusion requires a signiﬁ-
cantly different approach.
The attacker seeks to be on the path both between s
and e (the entry leg) and between x and t (the exit leg).
All other parts of the circuit (entry to middle and middle
to exit) do not help the adversary in this particular attack.
Never-twice avoidance of a single host We begin by
constructing a proof that a circuit could not have tra-
versed any single host on both the entry and exit legs.
348    26th USENIX Security Symposium
USENIX Association
dFsee' mxm' x' (a) When Ce (yellow) and Cx (darker
blue) do not intersect, double-traversal
of any country is impossible.
(b) When Ce and Cx do intersect (dark green), we must compute the shortest distances
for both legs to go through each country (right). The dashed lines show the shortest
distances through France, and the solid lines through Belgium.
Figure 2: Never-twice: To prove that a Tor circuit did not traverse any given country at the beginning and end of the
circuit, we compute the set of countries Ce that could have been on the path of the entry leg and the countries Cx that
could have been on the exit leg. This ﬁgure shows two example circuits with different exit nodes.
we have our proof of never-twice avoidance.
However, if the intersection is non-empty, as in Fig-
ure 2b, then we need to perform additional checks. For
each country F ∈ Ce ∩Cx, we ensure that the minimum
RTT to go through the entry leg and F plus the minimum
RTT to go through the exit leg and F is larger than the
end-to-end RTT would allow:
∀F ∈ Ce ∩Cx : (1 + δ )· Re2e <
· (Dmin(s,F,e) + D(e,m,x) + Dmin(x,F,t))
3
c
(5)
The subtle yet important difference between Eq. (5)
and the previous equations is that the right hand side need
not minimize distance with respect to a single f ∈ F.
Rather, there could be two distinct points in F: one on
the entry leg’s path and another on the exit leg’s. This
puts the attacker at a greater advantage; consider the
above example wherein the entry leg was geographically
isolated to western France and the exit leg was isolated
to eastern France. When a single f ∈ F required to be
present on both legs, the packets would be required to
traverse an extra distance of roughly twice the width of
France. But with separate points in F, it could impose
arbitrarily low additional delay.
What Eq. (5) does share in common with the other
equations is that it can be computed purely locally, us-
ing only the knowledge of the circuit relays’ locations
and a database of countries’ borders, which are readily
available [16].
Never-twice avoidance of colluding countries Fi-
nally, we consider how to avoid deanonymization attacks
from a group of countries who might coordinate their ef-
forts. For example, the Five Eyes is an alliance of ﬁve
countries (Australia, Canada, New Zealand, the United
Kingdom, and the United States) who have agreed to
share intelligence. Were such a group of countries to
collude, then traversing one of them on the entry leg
and another on the exit leg could result in a successful
deanonymization attack.
Our above method for avoiding double-traversal of a
country extends naturally to colluding nation-states. One
can simply use a modiﬁed database of country borders to
ﬂag all those in an alliance as a single “country.” That
this would result in a set of disjoint geographic polygons
is of no concern to our algorithm; in fact, many coun-
tries are already made up of disjoint regions (for instance
islands off of a country’s coast).
5 DeTor Design
The previous section demonstrates how to prove, for a
given circuit, whether a single round-trip of communica-
tion provably avoided a region (once or twice). Unfor-
tunately, not all circuits can provide such proofs, even if
they were to minimize latencies between all hosts. Triv-
ially, any circuit with a Tor router in some region F can-
not be used to avoid F. Subtler issues can also arise, such
as when two consecutive hops on a circuit are in direct
line-of-sight of a forbidden region.
In this section, we describe how DeTor identiﬁes
USENIX Association
26th USENIX Security Symposium    349
sextsetxsetxwhich circuits could possibly provide a proof by alibi,
and how we choose from among them to maximize both
anonymity and likelihood of success.
5.1
Identifying Potential DeTor Circuits
Alibi Routing identiﬁes potential alibi peers through a
sophisticated overlay routing protocol in which peers as-
sist one another in ﬁnding alibis. This is necessary in Al-
ibi Routing because no one peer knows all other peers.
Fortunately, Tor’s design includes downloading a list of
all Tor routers, so we can search for alibi circuits without
requiring any explicit assistance from Tor hosts, and thus
without requiring any modiﬁcations to Tor clients or the
Tor protocol in general.
A DeTor peer ﬁrst downloads the list of all Tor routers.
This includes many pieces of information about each
router, including its name, IP address, port, public key,
and typically also which country it is in. We make
the simplifying assumption that we can also obtain each
Tor router’s GPS coordinates. We envision two ways this
information could be made available: First, we can use
publicly available IP geolocation databases that map IP
addresses to locations [25, 31]. Second, we could aug-
ment the Tor protocol to allow routers to include their lo-
cations (perhaps within some privacy-preserving range)
in the public list of Tor routers.2 For never-once, as with
Alibi routing, we trust the nodes to be honest so long
as they can be proved to be outside the forbidden region
(§3); for such nodes, we trust the GPS coordinates they
self-report.
If we have the latitude and longitude of each Tor router
as well as the source and destination, then we can de-
termine if a circuit has the potential to offer proof of
avoidance by replacing Re2e in Eqs. (4) and (5) with the
shortest possible RTT (by two-thirds the speed of light)
through the circuit. This is in essence testing whether,
in the best case scenario, it would be possible to obtain
a proof of avoidance. DeTor considers all circuits that
meet these criteria as potential DeTor circuits.
Alternatively, if precise GPS coordinates are not avail-
able, we can assume that we do not have exact GPS
locations, but only which country each router is in
(as Tor currently reports).
In this case, we redeﬁne
Dmin(x1, . . . ,xn) to be the shortest sum distance from any
point in x1’s country to any point in x2’s country to any
point in x3’s country, and so on.
Armed with a set of potential DeTor circuits, we next
address the question: which among them should we
choose?
2We require that Tor routers not move signiﬁcant distances between
the time that a client obtains their GPS coordinates through the time the
client uses those routers.
5.2 Choosing Circuits
There are two key considerations in choosing from
among potential DeTor circuits:
First, the circuit should have a high likelihood of actu-
ally providing proofs of avoidance. Satisfying the above
alibi conditions are necessary but not sufﬁcient to truly
offer proof of avoidance. If any host on the circuit has
very high latencies (e.g., because their last-mile link is
a satellite or cellular link [32]), then we will never be
able to deﬁnitively prove with RTT measurements alone
where their packets could not have gone.
It is difﬁcult to determine whether there are such high-
latency links without directly measuring them. However,
as multiple prior studies have shown, there is a strong
correlation between distance and RTT [6, 1], with very
long distances typically resulting in signiﬁcantly larger
departures from the minimum speed-of-light propaga-
tion time. Therefore, as a ﬁrst approximation, we seek
to choose very distal legs less often than shorter legs. We
must be cautious here: using very short legs, while likely
to offer successful proofs of avoidance, runs the risk of
choosing Tor routers within the same administrative do-
main, violating the goal of having three (or more) distinct
routers on the circuit. To address this, DeTor can option-
ally take a parameter ∆ representing a desired minimum
distance between any two routers on the circuit. Note
that this naturally captures Tor’s policy of never choos-
ing two hosts on the same subnet.
This brings us to our second consideration: the cho-
sen circuit should be chosen randomly, minimizing the
difference in probabilities of choosing one node (or ad-
ministrative domain) over another. Tor’s circuit selec-
tion provides greater weight to nodes with greater band-
width; we incorporate this with our desire for higher like-
lihood of success (lower latencies). After ﬁltering the
circuits that can never provide us with an alibi, as well as
ﬁltering the circuits based on minimum distance ∆, we
then choose from all remaining circuits with probability
weighted in favor of higher bandwidth and lower latency.
5.3 Constructing and Using Circuits
DeTor makes use of Tor’s transport plug-ins to guide cir-
cuit construction without requiring any modiﬁcations to
the Tor client. In particular, DeTor uses the Stem [36]
Tor controller for constructing circuits and attaching TCP
connections to them.
Much like Alibi Routing, DeTor must check for proofs
of avoidance for every round-trip of communication.
Half of this is provided by Tor’s checks that the packets
followed the circuit and were not altered; additionally,
a DeTor client measures the end-to-end RTT for each
round-trip of communication and checks this against
350    26th USENIX Security Symposium
USENIX Association
Eq. (4) for never-once avoidance and/or Eq. (5) for never-
twice. A natural question is: what should DeTor do
when a round-trip of communication does not provide
proof, for instance because the end-to-end RTT is too
high? For never-once avoidance, we believe that this is
an application-speciﬁc concern. Some applications may
wish not to accept any packet that might have traversed
a forbidden region, and so they may drop these packets.
Other applications may accept some rounds of communi-
cation without proof, particularly if the data in them had
end-to-end veriﬁcation or if it were not sensitive. This is
an interesting area of future work.
However, when DeTor is used for never-twice avoid-
ance, it is critical that not too many packets be sent if
there is the possibility that they doubly traversed an ad-
versary. After a round-trip of communication fails to ob-
tain proof, it may be useful for the source node to try
to trick the adversary by inserting a random number of
packets that terminate at the middle node. Such defenses
are another interesting area of future work; in the remain-
der of this paper, we focus primarily on how often we are
able to obtain proof of avoidance, and the quality of the
circuits that provide such proof.
6 Evaluation
In this section, we present the evaluation of DeTor in
terms of both never-once and never-twice avoidance.
Our evaluation is driven by several fundamental ques-
tions: who can avoid whom, does provable avoidance
harm anonymity, what is the performance of the circuits
that DeTor provides, and what are the primary indicators
of DeTor’s success (or failure)?
6.1 Experimental Setup
We evaluate DeTor in simulation, using a Tor latency
dataset collected with the Ting measurement tool [6]. As
a brief overview, Ting performs active measurements of
the Tor network and, through a novel sequence of cir-
cuits, is able to directly measure the RTT between any
two active Tor relays.
This measured RTT between
two Tor relays contains the forwarding delays, which in-
cludes Tor’s crypto operations. As a part of this work,
Cangialosi et al. [6] released a dataset comprising RTTs
between all pairs of a set of 50 Tor relays spread through-
out the world.3
Also included in this dataset is the
GPS location of all 50 nodes obtained from a publicly
available IP geolocation database [31] (as measured at
the time of their study). Although we used this static
database for our evaluation, the DeTor design assumes
3For seven pairs of nodes, the RTT was reported as ‘Error’. For
these, we assume an RTT of 10 seconds; this is surely greater than their
real RTT, and so it strictly puts our results at a disadvantage.
Figure 3: Locations of the 50 nodes used in our eval-
uation: a subset of real Tor nodes, as provided in the
Ting [6] dataset.
that a client can obtain Tor relays’ GPS coordinates,
through one of several means discussed in §5.1.
Figure 3 shows the position of the Tor routers we use
in our study. Note that, like real Tor deployments, it is
skewed towards North America and Europe.
We simulate DeTor by using Ting data as a stand-in for
both ping (when establishing the set of trusted Tor re-
lays; see §3) and for end-to-end RTTs of the circuit. Re-
call that we only use these RTT measurements when de-
termining if a chosen circuit successfully provides prov-
able avoidance. Conversely, when we compute whether
a circuit could possibly offer avoidance, we rely only
on distances (computed using great-circle distance over
the relays’ GPS coordinates) and the two-thirds speed of
light propagation of data. For the purpose of the simula-
tion, the source and destination are also Tor nodes from
the selected Tor nodes set. For never-once, we construct