And this bpftrace one-liner uses a normal hash for counting:
.(:++g ) peas"aga:x, a- aoezagdq ydqaz- aoezps +
bpf (BPF_MAP_CREATE, [nap_type=BPF_MAP_TYPB_BAS8, key_s1ze=8, value_slze=B,
max_entries=128, nap_flags=0, inner_nap_fd=0), 72) = 3
[.--]
Using them both at the same time on an eight-CPU system, and tracing a function that is
 frequent and may run in parallel:
+ bpftrace -e 'k:vfs_read { écpuhash = count () : Bhash++; )
Attaching l pzobe...
ecpuhash: 1061370
thash: 1061269
A comparison of the counts reveals that the normal hash undercounted events by 0.01%
Supnot 'sjonuoo Aouanouo sog susueqoau raqo osje are anaq 'sdeu d-rad wuong jedy
Keouoe sdeu aua aepdn ue eq deu u deu e ((CvXdd8) uoonsu ppe asisnpxa ue
and BPF spin locks. Regular hash and LRU map upxlates via bpf_map_update_elem( are atomic as
well and free from data races due to concurrent writes. Spin locks, which were adlded in Linux 5.1,
are controlled by the bpf_spin_lock() and bpf_spin_unlock( helpers [23].
2.3.8 BPF sysfs Interface
In Linux 4.4, BPF introduced commands to expose BPF programs and maps via a virtual file
system, conventionally mounted on /sys/fs/bpf. This capability, termed *pinning, has a number
of uses. It allows the creation of BPF programs that are persistent (much like daemons) and
continue running after the process that loaded them has exited. It also provides another way
for user-level programs to interact with a running BPF program: They can read from and write to
BPF maps.
standard Unix utilities that start and stop. However, any of these tools could be converted to one
Pinning has not been used by the BPF observability tools in this book, which are modeled after
that is pinned, if needed. This is more commonly used for networking programs (e.g., the Cilium
software [24]).
---
## Page 74
2.3Extended BPF (eBPF)
37
As an example of pinning, the Android operating system makes use of pinning to automatically
load and pin BPF programs found under /system/etc/bpf [25]. Android library functions are
provided to interact with these pinned programs.
2.3.9 BPF Type Format (BTF)
One of the recurring issues described in this book is the lack of information about the source code
that is instrumented, making it difficult to write BPF tools. As will be mentioned many times, an
ideal solution to these problems is BTE, introduced here.
BTF (BPF Type Format) is a metadata format that encodes debugging information for describing
BPF programs, BPF maps, and much more. The name BTF was chosen as it initially described data
types; however, it was later extended to include function info for defined subroutines, line info for
source/line information, and global variable information.
BTF debug info can be embedded in the vmlinux binary or generated together with BPF programs
with native Clang compilation or LLVM JIT,so that the BPF program can be inspected more easily
with loaders (e.g., libbpf) and tools (e.g., bpftool(8)). Inspection and tracing tools, including
bpftool(8) and perf(1), can retrieve such info to provide source annotated BPF programs, or
s aqensuouap ue18oad O8 padtuoo 6-NAT1 ue Sundunp (s)poodq jo saqdurexa
pretty print map key/values based on thesr C structure instead ot a raw hex dump. The previous
Apart from describing BPF programs, BTF is becoming a general-purpose format for describing all
kernel data structures. In some ways, it is becoming a lightweight alternative to kernel debuginfo
for use by BPF, and a more complete and reliable alternative to kernel headers.
BPF tracing tools often require kernel headers to be installed (usually via a linux-headers package)
so that various C structs can be navigated. These headers do not contain definitions for all the
structs in the kernel, making it difficult to develop some BPF observability tools: missing structs
need to be defined in the BPF tool source as a workaround. There have also been issues with
complex headers not being processed correctly; bpftrace may switch to aborting in these cases
rather than continuing with potentially incorrect struct offsets. BTF can solve this problem by
providing reliable definitions for allstructs. (An earlier bpftool bt output shows how
task_struct can be included.) In the future, a shipped Linux kernel vmlinux binary that contains
BTF wil be self-describing.
BTF is still in development at the time of writing this book. In order to support a
compile-once-run-everywhere initiative, more information is to be added to BTE For the
latest on BTF, see Documentation/bpf/btf.rst in the kernel source [26].
2.3.10BPF C0-RE
The BPF Compile Once - Run Everywhere (CO-RE) project aims to allow BPF programs to be
compiled to BPF bytecode once, saved, and then distributed and executed on other systems. This
will avoid the need to have BPF compilers installed everywhere (LLVM and Clang), which can
be challenging for space-constrained embedded Linux. It will also avoid the runtime CPU and
memory costs of running a compiler whenever a BPF observability tool is executed.
---
## Page 75
38
Chapter 2 Technology Background
The CO-RE project, and developer Andri Nakryiko, are working through challenges such as
coping with different kernel struct offsets on different systems, which require field offsets in
BPF bytecode to be rewritten as needed. Another challenge is missing struct members, which
requires field access to be conditional based on the kernel version, kernel configuration, and/or
u s s1 pue *uogetuogu 418 go asn aqeu m 1oalod 3-O au seg aurun papsaoud-sasn
levelopment at the time of writing this book.
2.3.11 BPF Limitations
inthePMmabddnte l es ased iBPF prams alm
BPF programs cannot call arbitrary kernel functions; they are limited to the BPF helper functions listed
'saqoady renqe uo sdoo aurugu μuasu o stuengond dg moe o agesun aq pnom 1 :sdoo uo spu]
as those threads may be holding critical locks that block the rest of the system. Workarounds involve
unrolling loops, and adding helper functions for common uses that need loops. Linux 5.3 included
support for bounded loops in BPE which have a verifiable upper runtime limit.4
The BPF stack size is limited to MAX_BPF_STACK, set to S12. This limit is sometimes encountered
when writing BPF observability tools, especially when storing multiple string buffers on the stack:
a single char[256] buffer consumes half this stack. There are no plans to increase this limit. The
solution is to instead use BPF map storage, which is effectively infinite. Work has begun to switch
bpftrace strings to use map storage instead of stack storage.
The number of instructions in a BPF program was initially limited to 4096. Long BPF programs
sometimes encounter this limit (they would encounter it much sooner without LLVM compiler
optimizations, which reduce the instruction count.) Linux 5.2 greatly increased the limit such
ueuBosd ages Ate daoe o s aguas d at po uge atL anss ue aq auo[ ou pnous  eq
and the limits should not get in the way.
2.3.12 BPF Additional Reading
More sources for understanding extended BPF:
 Documentation/networking/filter.txt in the kernel source [17]
• Documentation/bpf/bpf_design_QA.txt in the kernel source [29]
• The bpf(2) man page [30]
▪ The bpf-helpers(7) man page [31]
 *BPF: the universal in-kernel virtual machine′ by Jonathan Corbet [32]
■*BPF Internals—II" by Suchakra Sharma [33]
[6t] wm Aq apng aouaag dCX pue dd 
Additional examples of BPF programs are provided in Chapter 4 and in Appendixes C, D, and E
14 You may begin wondering if BPF will become Turing complete The BPF instrution set itself allows for the creation of
a Turing complete atomata, but gven the safety restrictions the verifer puts in place, the BPF programs are not Tring
15 The Iimit wss changed to one mlion instructions (BPF_C0MPLEXITY_UMIT_INSNS) [27]. The 4096 limit
complete anymore (e-g-, due to the halting problem)
(BPF_MAXNSNS) stiI remains for urerivleged BPF programs [28]
---
## Page 76
2.4Stack Trace Walking
39
2.4
StackTraceWalking
Stack traces are an invaluable tool for understanding the code path that led to an event, as well as
profiling kernel and user code to observe where execution time is spent. BPF provides special map
types for recording stack traces and can fetch them using frame pointer-based or ORC-based stack
walks. BPF may support other stack walking techniques in the future.
2.4.1Frame Pointer-Based Stacks
The frame pointer technique follows a convention where the head of a linked list of stack frames
can always be found in a register (RBP on x86_64) and where the return address is stored at a
known offset (+8) from the stored RBP [Hubicka 13]. This means that any debugger or tracer that
interrupts the program can read RBP and then easily fetch the stack trace by walking the RBP
linked list and fetching the addresses at the known offset. This is shown in Figure 2-6.
Registers
Stack
Instruction Text
Ret Address
function
parent
Saved RBP
Ret Address
parent
grand-
%RBP
Saved RBP
function
current
%RIP
function
Figure 2-6 Frame pointerbased stack walking (x86_64)
The AMD64 ABI notes that the use of RBP as a frame pointer register is conventional, and can
be avoided to save function prologue and epilogue instructions, and to make RBP available as a
general-purpose register.
The gcc compiler currently defaults to omitting the frame pointer and using RBP as a
general-purpose register, which breaks frame pointer-based stack walking. This default can
be reverted using the fnoomi tfranepointer option. Three details from the patch that
introxduced frame pointer omission as the default explain why it was done [34]:
The patch was introduced for i386, which has four general-purpose registers. Freeing RBP
increases the usable registers from four to five, leading to significant performance wins.
For x86_64, howevet, there are already 16 usable registers, making this change much less
worthwhile. [35].
---
## Page 77
Op
Chapter 2  Technology Background
●It was assumed that stack walking was a solved problem, thanks to gdb(1) support of other
techniques. This does not account for tracer stack walking, which runs in limited context
with interrupts disabled.
 The need to compete on benchmarks with Intel's icc compiler.
On x86_64 today, most software is compiled with gcc'’s defaults, breaking frame pointer stack
traces. Last time I studied the performance gain from frame pointer omission in our production
dlifficult to measure. Many microservices at Netflix are running with the frame pointer reenabled,
environment, it was usually less than one percent, and it was often so close to zero that it was
as the performance wins found by CPU profiling outweigh the tiny loss of performance
Using frame pointers is not the only way to walk a stack; other methods include debuginfo, LBR,
and ORC.
2.4.2 debuginfo
Additional debugging information is often available for software as debuginfo packages, which
contain ELF debuginfo files in the DWARF format. These include sections that debuggers such
as gdb(1) can use to walk the stack trace, even when no frame pointer register is in use. The ELF
sections are .eh_frame and .debug_frame.
Debuginfo files also include sections containing source and line number information, resulting
sos t apdeu u adurexa uy pangap st eu reug jeuo ag (uaue) remp e sy u
libjvm.so at 17 Mbytes, and its debuginfo file at 222 Mbytes. In some environments, debuginfo
files are not installed due to their large size.
BPF does not currently support this technique of stack walking: It is processor intensive and
requires reading ELF sections that may not be faulted in. This makes it challenging to implement
in the limited interrupt-disabled BPF context.
Note that the BPF front ends BCC and bpftrace do support debuginfo files for symbol resolution.
2.4.3 Last Branch Record (LBR)
Last branch record is an Intel processor feature to record branches in a hardware buffer, including
function call branches. This technique has no overhead and can be used to reconstruct a stack
4 to 32 branches. Stack traces for production software, especially Java, can exceed 32 frames.
trace. However, it is limited in depth depending on the processor, and may only support recording
LBR is not currently supported by BPF, but it may be in the future. A liited stack trace is better
than no stack trace!
2.4.40RC
A new debug information format that has been devised for stack traces, Oops Rewind Capability
(ORC), is less processor intensive than DWARF [36]. ORC uses .orc_unwind and .orc_unwind_ip ELF
sections, and it has so far been implemented for the Linux kernel. On register-limited architectures, it
may be desirable to compile the kernel without the frame pointer and use ORC for stack traces instead.
ORC stack unwinding is available in the kernel via the perf_callchain_kernel() function, which
BPF calls. This means BPF also supports ORC stack traces. ORC stacks have not yet been developed
for user space
---
## Page 78
2.5 Flame Graphs
41
2.4.5 Symbols
Stack traces are currently recorded in the kernel as an array of addresses that are later translated to
symbols (such as function names) by a user-level program. There can be situations where symbol 
mappings have changed between collection and translation, resulting in invalid or missing
translations. This is discussed in Section 12.3.4 in Chapter 12. Possible future work includes
adding support for symbol translation in the kernel, so that the kernel can collect and translate a
stack trace immediately.
2.4.6More Reading
Stack traces and frame pointers are discussed further in Chapter 12 for C and Java, and Chapter 18
provides a general summary.
2.5
FlameGraphs
Flame graphs are frequently used in later chapters of this book, so this section summarizes how to
use and read them.
Flame graphs are visualizations of stack traces that I invented when working on a MySQL perfor
xa4 jo sed po spuesno auam peq sagoad d om aedusoo o Susn am pue anss aotueu
[Gregg 16]. Apart from CPU profiles, they can also be used to visualize recorded stack traces from
any profiler or tracer. Later in this book I show them applied to BPF tracing of off-CPU events,
page faults, and more. This section explains the visualization.
2.5.1 Stack Trace
A stack trace, also called a stack back trace or a call trace, is a series of functions that show the
flow of code. For example, if func_a() called func_b0, which called func_cO, the stack trace at that
point may be written as:
func_c
func_b
func_a
The bottom of the stack (func_a) is the origin, and the lines above it show the code flow. Put
differently, the top of the stack (func_c) is the current function, and moving downwards shows its
ancestry: parent, then grandparent, and so on.
2.5.2ProfilingStack Traces
Timed sampling of stack traces can collect thousands of stacks that can be tens or hundreds of
lines long each. To make this volume of data easier to study, the Linux perf(1) profiler summarizes
16 Inspiration for the general layout, SVG output, snd JavaScript interactivity came from Neelakanth Nsdgir's
unction_cal_graph.rb time-ordered visualization for callstacks, which itself wss inspired by Roch Bourbonnais"s
CallStackAnalyzer and Jan Boerhout's vftrace.
---
## Page 79
42
Chapter 2  Technology Background
stack samples as a calltree, and shows percentages for each path. The BCC profile(8) tool
summarizes stack traces in a different way, showing a count for each unique stack trace.
Real-world examples of both perf(1) and profile(8) are provided in Chapter 6. With both tools,
pathological issues can be identified quickly for situations when a lone stack is on-CPU for the
bulk of the time. However, for many other ssues, incluxding small performance regressions,
finding the culprit can involve studying hundreds of pages of profiler output. Flame graphs were
created to solve this problem,
To understand flame graphs, consider this synthetic example of CPU profiler output, showing a
frequency count of stack traces:
funt_e
func_d
func_b
func_a
1
func_b
funs_a
2
func_c
fun_b
func_a
7
This output shows a stack trace followed by a count, for a total of 10 samples. The code path in
func_a() -> func_b() -> func_cO, for example, was sampled seven times. That code path shows
func_c() running on CPU. The func_a() -> func_b() code path, with func_b() running on CPU, was
sampled twice. And a code path that ends with func_e() running on CPU was sampled once.
2.5.3Flame Graph
Figure 2-7 shows a flame graph representation of the previous profile.
func_e
func_c
func_d
func_b
func_a
Figure 2-7A Flame Graph
---
## Page 80
2.5 Flame Graphs
43
This flame graph has the following propertiess
Each box represents a function in the stack (a *stack frame”).
●The y-axis shows stack depth (the number of frames on the stack), ordered from root at the
bottom to leaf at the top. Looking from the bottom up, you can understand the code flow;
from the top down, you can determine the function ancestry.
The x-axis spans the sample population. It's important to note that it does not show the
passage of time from left to right, as most graphs do. The left-to-right ordering is instead an
alphabetical sort of frames to maximize frame merging. With the y-axis ordering of frames,
this means that the graph origin is the bottom left (as with most graphs) and represents 0,a.
The length across the x-axis does have meaning: The width of the box reflects its presence
in the profile. Functions with wide boxes are more present in the profile than those with
narrow boxes.
The flame graph is really an adjacency diagram with an inverted icicle layout [Bostock 10], applied
to visualize the hierarchy of a collection of stack traces.
Ihe most frequent stack in Figure 2-7 is seen in the profile as the widest *tower? in the middle
from func_a() to func_c(). Since this is a flame graph showing CPU samples, we can describe the
top edge as the functions that were running on-CPU, as highlighted in Figure 2-8.
func_e
func_c
func_d
func_b
func_a
Figure 2-8 CPU Flame Graph of on-CPU Functions
Figure 2-8 shows that func_c0 was dlirectly on-CPU for 70% of the time, func_b() was on-CPU for
20% of the time, and func_e() was on-CPU for 10% of the time. The other functions, func_a( and
func_dO, were never sampled on-CPU directly.
To read a flame graph, look for the widest towers and understand them first.
For large profiles of thousands of samples, there may be code paths that were sampled only a few
times, and are printed in such a narrow tower that there is no room to include the function name.
This turns out to be a benefit: Your attention is naturally drawn to the wider towers that have
legible function names, and looking at them helps you understand the bulk of the profile first.
---
## Page 81
44
Chapter 2 Technology Background
2.5.4 Flame Graph Features
My original flame graph implementation supports the features described in the following
[e] suosoas
Color Palettes
The frames can be colored based on different schemes. The default is to use random warm colors
color schemes. I’ve found the following to be most useful to flame graph end users:
for each frame, which helps visually distinguish adjacent towers. Over the years I’ve added more
•Hue: The hue indicates the code type. For example, red can indicate native user-level
code, orange for native kernel-level code, yellow for C++, green for interpreted functions,
aqua for inlined functions, and so on depending on the languages you use. Magenta is
used to highlight search matches. Some developers have customized flame graphs to always
highlight their own code in a certain hue, so that it stands out.
 Saturation: Saturation is hashed from the function name. It provides some color variance
that helps dlifferentiate adjacent towers, while preserving the same colors for function
names to more easily compare multiple flame graphs.
• Background color: The background color provides a visual reminder of the flame graph
type. For example, you might use yellow for CPU flame graphs, blue for off-CPU or I/O
flame graphs, and green for memory flame graphs.
Another useful color scheme is one used for IPC (instructions per cycle) flame graphs, where an addi
tional dimension, IPC, is visualized by coloring each frame using a gradient from blue to white to red.
Mouse-Overs
The original flame graph software creates SVG files with embedded JavaScript that can be loaded
in a browser for interactive features. One such feature is that on mouse-over of frames, an infor
mation line is revealed, showing the percentage ocurrence of that frame in the profile.
Zoom
Frames can be clicked for a horizontal zoom.1 This allows narrow frames to be inspected,
zooming in to show their function names.
Search
A search button, or Ctrl-F allows a search term to be entered, and then frames matching that
search term are highlighted in magenta. A cumulative percentage is also shown to indicate how
often a stack trace containing that search term was present. This makes it trivial to calculate how
much of the profile was in particular code areas. For example, you can search for “tcp_° to show
how much was in the kernel TCP code.
2.5.5Variations
A more interactive version of flame graphs is under development at Netflix, using d3 [38]. 1° It is
open source and used in the Netflix FlameScope software [39].
17 This wss sugested to me by my collesgue Amer Ather. My first version wss a five-minute regex hack,
18 Adrien Mahieux developed the horizontal zoom feature for flame graphs
19 d3 flame graphs wss crested by my collesgue Martin Spier:
---
## Page 82
2.6 Event Sources
45
Some flame graph implementations flip the y-axis order by default, creating an °icicle grapha
with the root at the top. This inversion ensures that the root and its immediate functions are
still visible for flame graphs that are taller than the screen height and when displaying from the
flame graph top to begin with. My original flame graph software supports this inversion with
1nverted. My own preference is to reserve this icicle layout for leaf-to-root merging, another
flame graph variant that merges from the leaves fist and roots last. This is useful for merging a
common on-CPU function first and then seeing its ancestry, for example: spin locks.
Flame charts appear similar to flame graphs and were inspired by flame graphs [ Tikhonovsky 13],
but the x-axis is ordered based on the passage of time rather than the alphabet. Flame charts are
popular in web browser analysis tools for the inspection of JavaScript, as they are suited for under-
standing time-based patterns in single-threaded applications. Some profiling tools support both
flame graphs and flame charts.
2.6
Event Sources
The different event sources and examples of events that can be instrumented are illustrated in
Figure 2-9. This figure also shows the Linux kernel versions that BPF supported attaching to these
events.
Dynamic
Tracepoints
PMCs
Inst.
Aeplication
Runtimes
System Libraries
System CallInterface
VFS
Sockets
File Systems
TCPIUDP
Schedule