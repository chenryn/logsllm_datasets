# NetBSD mbuf Overflow Vulnerability

## Overview
- **DDB / GDB**: Debugging tools used.
- **Source Code**: Introduction to the bug and exploitation techniques.

## mbuf Pointer Overflow / Arbitrary MFREE()

### mbufs
- **Basic Kernel Memory Unit**: Used for storing socket buffers and packet data.
- **Linked List Structure**: Data can span multiple mbufs, forming a linked list.

### Exploitation
- **MFREE()**: Allows writing an arbitrary 32-bit value to any address, typically used for unlinking.
- **External Storage**: Some mbufs have their own free routine, which is exploited in this scenario.
- **Exploit Execution**: The mbuf is freed in `sbdrop()`.

### sbdrop Function
```c
void sbdrop(struct sockbuf *sb, int len) {
    struct mbuf *m, *mn, *next;
    next = (m = sb->sb_mb) ? m->m_nextpkt : 0;
    while (len > 0) {
        if (m == 0) {
            if (next == 0)
                panic("sbdrop");
            m = next;
            next = m->m_nextpkt;
            continue;
        }
        if (m->m_len > len) {
            m->m_len -= len;
            m->m_data += len;
            sb->sb_cc -= len;
            break;
        }
        len -= m->m_len;
        sbfree(sb, m);
        MFREE(m, mn);
    }
}
```

### Unlink Technique
- **Unlinking mbuf**: Remove the mbuf from the chain and link the remaining neighboring mbufs together.
- **Arbitrary Write**: Perform "arbitrary" write operations to manipulate memory.

#### Example
- **Unlinking with Specific Values**:
  - `m_ext.ext_nextref == 0xdeadbeef`
  - `m_ext.ext_prevref == 0xbadc0ded`
- **Memory Manipulation**:
  - `*(unsigned *)(0xbadc0ded + NN) = 0xdeadbeef;`
  - `*(unsigned *)(0xdeadbeef + PP) = 0xbadc0ded;`
  - Where `NN` and `PP` are offsets to `ext_nextref` and `ext_prevref` in the mbuf structure, respectively.

### Targets to Overwrite
- **Return Address**
- **Function Pointers**: Including "random" function pointers and `sysent` (syscall function pointers).

### Cleanup
- **Memory Pools**: Messy and change between releases. Use `mbinit()` for initialization.

### External Free() Technique
- **Self-Referencing mbufs**: Some mbufs hold a reference to their own free routine.
- **No Unlinking**: If `ext_nextref` references its own mbuf, no unlinking is done.
- **Payload Injection**: Point `ext_free` to the payload for execution. No cleanup needed.

### Payload
- **Process Identification**: Use `allproc` and `%fs` to find the process.
- **Credential Modification**: Change UID to 0 using the credential structure in the `proc` structure.
- **Loop Exit**: Return from the payload with an extra `leave` instruction.
- **Userland Return**: Return to userland after placing the payload.

## Demonstration
- **Vulnerability Discovery**: Wrote a 50-line fuzzer to find the vulnerability.
- **Debugging**: Used KDB (with reverse polish notation and AT&T syntax) and later switched to IDA Pro for easier debugging.

## Unixware Exploitable: NULL Pointer Dereference

### Vulnerability
- **NULL Pointer**: Breaks down to `mov eax, [edi + 0xCh]` and `call [eax + 4]`.
- **Arbitrary Code Execution**: Control `eax` to execute arbitrary code in kernel context.

### Exploitation
- **mmap()**: Map address 0x0 and control `eax` to call the payload.
- **Payload**: Find PID, modify credentials, and gain root access.

### Payload Development
- **prfind()**: Use `prfind()` to get a process pointer.
- **getksym()**: Use `getksym()` to look up kernel symbols.
- **Credential Structure**: Modify the credential structure to change UID/GID.

#### Payload Listing
```assembly
push 0xaaaaaaaa
mov  eax, 0xbbbbbbbb
call eax
mov  eax, [eax + 0x78]
mov  dword [eax + 4], 0
mov  dword [eax + 8], 0
mov  dword [eax + 12], 0
mov  dword [eax + 16], 0
add  esp, 4
ret
```

## OpenBSD IPv6 Remote mbuf Overflow

### Stages of Exploitation
- **Stage 1**: Backdoor installation and wrapping `icmp6_input`.
- **Stage 2**: Backdoor listening for ICMPv6 packets with magic bytes.
- **Stage 3**: Commands such as connect-back, setting secure level, and shell commands.

### Stage 1
- **Backdoor Installation**: Wrap `icmp6_input` with stage 2.
- **ELF Symbol Resolver**: Resolve symbols to replace `inet6sw[4].pr_input` with a pointer to stage 2.

### Stage 2
- **ICMPv6 Listener**: Copy stage 3 code to allocated memory and wrap system calls.
- **System Call Wrapper**: Wrap `gettimeofday()` and store the real function pointer.

### Stage 3
- **Commands**: Connect back, set secure level, and execute shell commands.
- **Initialization**: Resolve symbols, reset wrapped system calls, and fork from the calling process.
- **Command Process**: Ensure running as root and terminate on failure.

## FreeBSD 802.11 Remote Integer Overflow

### Auditing the IEEE 802.11 Stack
- **Complex Protocol**: The IEEE 802.11 stack in FreeBSD is relatively new and complex.
- **Code Issues**: Difficult to read due to recursive switch statements and macros.
- **User-Controlled Data**: Link-layer management is unauthenticated and unencrypted.

### Local Issue
- **Ioctl Logic Error**: Discloses kernel memory.

### Remote Integer Overflow
- **ioctl[SCAN_RESULTS]**: Found a remote integer overflow in the function `ieee80211_ioctl_getscanresults`.

#### Code Snippet
```c
static int
ieee80211_ioctl_getscanresults(struct ieee80211com *ic, struct ieee80211req *ireq) {
    union {
        struct ieee80211req_scan_result res;
        char data[512];
    } u;
    struct ieee80211req_scan_result *sr = &u.res;
    struct ieee80211_node_table *nt;
    struct ieee80211_node *ni;
    int error, space;
}
```

This document provides a detailed overview of the vulnerabilities and exploitation techniques for NetBSD, Unixware, and FreeBSD.