Smith. 2013. Analyzing graphs with node differential privacy. In Theory of
Cryptography Conference. Springer, 457–476.
[25] Jong Wook Kim, Dae-Ho Kim, and Beakcheol Jang. 2018. Application of local
differential privacy to collection of indoor positioning data. IEEE Access 6 (2018),
4276–4286.
[26] Jure Leskovec and Andrej Krevl. 2014. SNAP Datasets: Stanford Large Network
Dataset Collection. http://snap.stanford.edu/data. (June 2014).
[27] Yaliang Li, Chenglin Miao, Lu Su, Jing Gao, Qi Li, Bolin Ding, Zhan Qin, and
Kui Ren. 2018. An efficient two-layer mechanism for privacy-preserving truth
discovery. In Proceedings of the 24th ACM SIGKDD International Conference on
Knowledge Discovery & Data Mining. 1705–1714.
[28] Bing-Rong Lin and Daniel Kifer. 2013. Information preservation in statistical
privacy and bayesian estimation of unattributed histograms. In Proceedings of the
2013 ACM SIGMOD International Conference on Management of Data. 677–688.
[29] Wentian Lu and Gerome Miklau. 2014. Exponential random graph estimation
under differential privacy. In Proceedings of the 20th ACM SIGKDD international
conference on Knowledge discovery and data mining. 921–930.
[30] Kobbi Nissim, Sofya Raskhodnikova, and Adam Smith. 2007. Smooth sensitivity
and sampling in private data analysis. In Proceedings of the thirty-ninth annual
ACM symposium on Theory of computing. 75–84.
[31] Zhan Qin, Yin Yang, Ting Yu, Issa Khalil, Xiaokui Xiao, and Kui Ren. 2016.
Heavy hitter estimation over set-valued data with local differential privacy. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications
Security. 192–203.
[32] Zhan Qin, Ting Yu, Yin Yang, Issa Khalil, Xiaokui Xiao, and Kui Ren. 2017.
Generating synthetic decentralized social graphs with local differential privacy. In
Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications
Security. 425–438.
[33] Sofya Raskhodnikova and Adam Smith. 2016. Lipschitz extensions for node-
private graph statistics and the generalized exponential mechanism. In 2016 IEEE
57th Annual Symposium on Foundations of Computer Science (FOCS). 495–504.
[34] Vibhor Rastogi, Michael Hay, Gerome Miklau, and Dan Suciu. 2009. Relation-
ship privacy: output perturbation for queries with joins. In Proceedings of the
twenty-eighth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database
systems. 107–116.
[35] Xuebin Ren, Chia-Mu Yu, Weiren Yu, Shusen Yang, Xinyu Yang, Julie A McCann,
and S Yu Philip. 2018. LoPub: High-Dimensional Crowdsourced Data Publication
With Local Differential Privacy. IEEE Transactions on Information Forensics and
Security 13, 9 (2018), 2151–2166.
[36] Shuang Song, Susan Little, Sanjay Mehta, Staal Vinterbo, and Kamalika Chaudhuri.
2018. Differentially Private Continual Release of Graph Statistics. arXiv preprint
arXiv:1809.02575 (2018).
[37] Haipei Sun, Boxiang Dong, Hui Wendy Wang, Ting Yu, and Zhan Qin. 2018.
Truth Inference on Sparse Crowdsourcing Data with Local Differential Privacy.
In 2018 IEEE International Conference on Big Data (Big Data). 488–497.
[38] Jun Tang, Aleksandra Korolova, Xiaolong Bai, Xueqiang Wang, and Xiaofeng
Wang. 2017. Privacy loss in Apple’s implementation of differential privacy on
MacOS 10.12. arXiv preprint arXiv:1709.02753 (2017).
[39] Tianhao Wang, Jeremiah Blocki, Ninghui Li, and Somesh Jha. 2017. Locally
differentially private protocols for frequency estimation. In 26th USENIX Security
Symposium (USENIX) Security 17). 729–745.
[40] Tianhao Wang, Ninghui Li, and Somesh Jha. 2018. Locally differentially private
frequent itemset mining. In 2018 IEEE Symposium on Security and Privacy (SP).
127–143.
[41] Stanley L Warner. 1965. Randomized response: A survey technique for eliminating
evasive answer bias. J. Amer. Statist. Assoc. 60, 309 (1965), 63–69.
[42] Jun Zhang, Graham Cormode, Cecilia M Procopiuc, Divesh Srivastava, and Xi-
aokui Xiao. 2015. Private release of graph statistics using ladder functions. In
Proceedings of the 2015 ACM SIGMOD International Conference on Management of
Data. 731–745.
[43] Zhikun Zhang, Tianhao Wang, Ninghui Li, Shibo He, and Jiming Chen. 2018.
Calm: Consistent adaptive local marginal for marginal release under local differ-
ential privacy. In Proceedings of the 2018 ACM SIGSAC Conference on Computer
and Communications Security. 212–229.
APPENDIX
Proof of Lemma 3.2
Proof. Let γ(vi)∗ and γ ′(vi)∗ be the noisy triangle counts of
node vi when its ELV is Gi and G′
, respectively, and si be any
possible subset of possible noisy triangle count at vi. Since each
node independently perturbs its local triangle count, we have:
i
1) ∈ S1, . . . ,Mn(G′
Pr(M1(G1) ∈ S1, . . . ,Mn(Gn) ∈ Sn)
n
Pr(M1(G′
n) ∈ Sn)
n
i =1 Pr[γ(vi)∗ = si]
(cid:18)
n
i =1 Pr[γ ′(vi)∗ = si] =
(cid:32)
i =1 exp(cid:16)
n
i =1 exp(cid:16)
n
(cid:2)|si − γ(vi)| − |si − γ
(cid:33)
ϵ
∆(Γ△)
exp
=
=
i =1
≤ exp
ϵ
∆(Γ△)
n
i =1
|γ(vi) − γ
′(vi)|
= exp(ϵ),
ϵ
∆(Γ△)|si − γ(vi)|(cid:17)
∆(Γ△)|si − γ ′(vi)|(cid:17)
′(vi)|(cid:3)(cid:19)
ϵ
where si ∈ ranдe(Mi) is any possible output of Mi, for 1 ≤ i ≤
n.
□
Proof of Lemma 3.3
Proof. For each user vi, the variance is σ
the total variance is σ
2
i
= 2n
i =1 σ
2 =n
= 2(cid:16) S(Γ△)
(cid:17)2
(cid:16) n3
ϵ
= O
(cid:17)2
(cid:17).
ϵ 2
(cid:16) S(Γ△)
2
i
ϵ
. Thus
□
Proof. Without loss of generality, we assume that δ ≤ 0.5. Then,
Proof of Lemma 4.1
we have:
x
Pr
∗ + α · log
(cid:20)
(cid:21)
(cid:18) 1
(cid:19)
∫ +∞
≥ x
(cid:18) 1
(cid:18) α · log(2δ)
(cid:19)
α ·log(2δ) Lap (t, α) dt = 1 −
− 0
2δ
= Pr
(cid:20)
∫ α ·log(2δ)
(cid:19)
−∞
= 1 − δ .
2 exp
α
=
=1 −
(cid:21)
(cid:19)
(cid:18) 1
2δ
Lap (α) + α · log
≥ 0
Lap (t, α) dt
□
Proof of Lemma 4.2
Proof. First, we prove Algorithm 1 satisfies ϵ1-DDP. Suppose
that we have two graph G and G′ with one edge difference. And
we have d(vi), d⊤(vi), c(vi) and c⊤(vi) on G, and d′(vi), d′⊤(vi),
c′(vi) and c′⊤(vi) on G′. Note that the change of edge between G
and G′ only results in the change of degree of maximum two clients
vx and vy by 1. Thus, for Lines 3-5 we have:
n
n
i =1 Pr[d⊤(vi) = ai|G]
i =1 Pr[d′⊤(vi) = ai|G′]
Pr[d⊤(vx) = ax |G] · Pr[d⊤(vy) = ay|G]
(cid:17)
exp(cid:16) |ax−d(vx)−λd ·log(2δ′)|+|ay−d(vy)−λd ·log(2δ′)|
Pr[d′⊤(vx) = ax |G] · Pr[d′⊤(vy) = ay|G]
exp(cid:16) |ax−d′(vx)−λd ·log(2δ′)|+|ay−d′(vy)−λd ·log(2δ′)|
(cid:17)
(cid:18) 1
(cid:19)
(cid:18) 2
λd
1
′(vx)| +
λd
|d(vx) − d
|d(vy) − d
= exp(cid:16) ϵ1
′(vy)|
(cid:19)
(cid:17)
λd
λd
≤ exp
≤ exp
=
=
.
2
λd
For Lines 13-16, since we only let h clients to calculate c⊤(vi),
the change of {c⊤(vi)} will be at most h. Therefore, we have:
Second, similar to the proof
in Lemma 4.2, we have:
Pr[maxvi ∈G ψ⊤(vi) ≥ maxvi ∈G ψ(vi)] ≥ 1 − δ2. This leads to
1
ϵ2
λ =
ψ
with probability 1 − δ2.
max
vi ∈G
⊤(vi) ≥ 1
ϵ2
max
vi ∈G
ψ(vi) ≥ 1
ϵ2 LSG(Γ⊔)
□
vi ∈S Pr[c⊤(vi) = ai|G]
vi ∈S Pr[c′⊤(vi) = ai|G′]


vi ∈S exp(cid:16) 1

vi ∈S exp(cid:16) 1


≤ exp(cid:169)(cid:173)(cid:171) 1
(cid:18) 2
(cid:19)
λc
vi ∈S
|S|
≤ exp
=
λc
λc
|ai − c(vi) − λc · log(2δ′)|(cid:17)
|ai − c′(vi) − λc · log(2δ′)|(cid:17)
′(vi)|(cid:170)(cid:174)(cid:172)
= exp(cid:16) ϵ1
(cid:17)
λc
|d(vi) − d
.
2
Second, we will prove λ ≥ 1
Note that Lines 13-16 use the result from Lines 3-5, and the final
result λ uses the result from Lines 13-16. Due to the composition
rule of differential privacy, the algorithm as a whole satisfies ϵ1-
DDP.
ϵ2 LSG (Γ△) with 1−δ probability. The
first step that may fail is getting set S. In order to get a valid set S,
we need to guarantee that all the h +2 clients {v[1], v[2], . . . , v[h+2]}
satisfy ∀i ∈ [1, h + 2], d⊤(v[i]) ≥ d(v(i)), where v(i) is the client
who has the i-th largest actual degree.
Here, we define ξi ∈ [0, 1] as the sum of probabilities that an-
other client other than v(i) becomes v[i] and meanwhile d⊤(v[i]) ≥
d(v(i)). It is easy to infer that for any i ∈ [1, h + 2], we have:
⊤(v(i)) ≥ d(v(i))] + ξi
⊤(v(i)) ≥ d(v(i))]
′
⊤(v[i]) ≥ d(v(i))] = Pr[d
≥ Pr[d
= 1 − δ
Pr[d
.
Therefore, we have Pr[d⊤(v[i]) < d(v(i))] < δ′ for h′ + 2 clients.
Then, for all the h clients in S, when calculating c⊤(vi), from
Eq. (4.1) there is also a probability δ′ to fail. Since h ≤ h′, we have
h′ + 2 + h ≤ 2h′ + 2 times to fail, every time with a probability
δ′ = δ2h′+2. Due to the union bound, the total probability to fail is
at most δ.
As we discussed previously, maxvi ∈Gc(vi) is covered by either
maxvi ∈G{c⊤(vi)} or d⊤(v[h′+2]). Combined with Eq. (7), we have:
(cid:26) 1
1
⊤(v[h′+2]),
ϵ2 d
ϵ2
c(vi) = LSG(Γ△)
†(vi)
c
max
vi ∈S
(cid:27)
λ = 3 max
≥ 3 max
vi ∈G
with probability 1 − δ.
□
Proof of Lemma 4.3
Proof. First, we prove that Algorithm 2 satisfies (ϵ1, δ1)-DDP.
Similar to our proof in Lemma 4.2, the procedure in Lines 3-5
2ϵ1-DDP, and with a probability 1 − δ1 with d⊤(v[1]) ≥
satisfies 1
d(v(1)) ∧ d⊤(v[2]) ≥ d(v(2)). Then, unlike Algorithm 1, the second
λψ that we use here requires the output of Lines 3-5. Therefore,
2ϵ1-DDP with probability 1 − δ1. Overall, the
Lines 9-11 satisfy 1
algorithm satisfies (ϵ1, δ1)-DDP.