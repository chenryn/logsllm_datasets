CHAR(10)或VARCHAR(10)是同类型的，但是CHAR(10)与CHAR(12)或VARCHAR(12)是不同类型
比较或 BIGINT/BIGINT 比较的速度，会比INT/BIGINT比较的更快。可以认为CHAR（10），
么与类型不等的情况相比，查询性能会提高很多。例如，INT与 BIGINT 不同，因此INT/INT
EXPLAIN语句检查一下具体的执行计划，看看MySQL是如何处理每一条语句的。
为是最好的顺序使用索引，并且可能STRAIGHT_JOIN实际也起不到任何作用。这时，可以使用
习惯性地将“名”放在字符串的两侧。如果只想把出现在该列开始位置的字符串找出来，则需要
个
的
208
程也会要
，而且每一个行都要计算那个值。因此，date_col的索引不会被用到，并且这个查询的执行
让我们来看
。
（4）比较拥有相同数据类型的列。在对带有索引的列进行比较时，如果其数据类型相同，那
WHERE col_nameLIKE'%string%
但是，如果没有准确的日期，又该怎么办呢？或许你只是想要把那些从今天算起一定天数
SELECT *FROM mytb1 WHERE YEAR(date_co1) EXPLAIN SELECT * FROM member
possible_keys:
mysql>
possible_keys
mySql> EXPLAIN SELECT * FROM member
接着，用EXPLAIN语句依次检查各种形式的表达式，看看优化程序为其生成了什么样的执
mySql> ALTER TABLE member ADD INDEX (expiration);
我们一起来尝试使用这三条WHERE子句，搜索 member 表里expiration 列的值。其中，
EXPLAIN语句可以让我们了解到：以何种方式编写表达式会更优。为了让大家有个直观印
在之前的5.2.1节讨论过，
***********
WHERE date_col
-> WHERE TO_DAYS(expiration)
-> WHERE TO_DAYS(expiration)
key_len:
key_len
TO_DAYS(date_col)
EXPLAIN SELECT
type:
Extra:
rows:
type:
table:
Extra:
type
ref:NULL
key:
ref:
id：
key
id：
key
id:
查询优化
expiration
range
member
SIMPLE
Using where
102
NULL
NULL
NULL
NULL
ALL
MEMBER
SIMPLE
Using
NULL
NULL
NUL
NULL
ALL
*FROM member
where
 EXPLAIN SELECT t1.i1, t2.i2 FROM t1 INNER JOIN t2
在两个表都没有索引的情况下，
mySql> SELECT t1.i1, t2.i2 FROM t1 INNER JOIN t2
口type的值表明，优化程序可以使用索引来搜索特定范围内的值（即那些小于表达式的
从前两条语句的输出结果可以看出，它们都没有使用索引。其中，type的值表明了会如何
*************
一
EXPLAIN
口
口possible_keys 和key 的值表明，优化程序会把expiration列上的索引l视为候选索
select_type:
select_type:
i1
检查102个行好很多。
row的值表明，优化程序估计完成此次查询需要检查6个行。这比前两个执行计划里要
引，而实际上也会使用这个索引。
右半部分所给出的日期的值）
->WHEREt1.i1=t2.i2;
key_len:
2
table:t2
table:
type
12
type:ALL
的第二个用途是
ref:
key
id:
id:
SIMPLE
NULL
NULL
NULL
SIMPLE
，验证增加索引能否有助于优化程序更有效地执行某条语句。例
，EXPLAIN的输出结果如下。
5.2MySQL查询优化程序
211
---
## Page 232
t2表的处理有了差异。
语句。
因为实际上只有1000种组合满足WHERE子句里的那个条件。
询命令时需要检查处理的行组合数为1000×1000，即100万。这是个非常浪费资源的操作，
但是t1表里的每一个行都会有这样一个值。换句话说，按照优化程序的估算，在处理这个查
需要执行一次全表扫描，所以t1表的估算值是1000。类似地，t2表的估算值也是1000，
息，
识出符合条件的行。
key_len 和 ref 栏的值全部为 NULL。而 Using where 表明，WHERE子句里的信息将被用于标
的NULL值表明，没有找到可以加快查询速度的候选索引。由于没有合适的索引，因此key、
212
type的值从ALL变成了ref，意思是说可以通过引用值（来自t1表的值）来完成索引
情况有了明显改善。
为了让查询更有效率，可以为相关联的其中一个列增加一个索引，然后再次执行EXPLAIN
possible_keys:
以上几段信息告诉我们，
possible_keys:
mySql> ALTER TABLE t2 ADD INDEX (i2);
rows 栏里的值表明，优化程序对于该查询的每一个阶段所需要检查的行数的估算值。因为
对t1表执行一次全表扫描。
将进一步采取以下措施。