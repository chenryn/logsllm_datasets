1 /bin/sh
echo *Is it morning? Please answer yes or no*
reed tineofday
f 1 Stimeofday = *yes* 1
chen
echo *Good morning*
elif|Stimeofday=*no*↓;then
else
echo “Good afternoon*
echo ^Sorry. $timeofday not recognized. Enter yes or no*
fi
exit 1
exit 0
操作注释：
这里的脚本程序与上一个例子很相似，但增加了一个elif命令，它会在前一个if条件不满足
的情况下对变量做进一步的测试。如果两次测试的结果都是不成功，就给出一条出错信息并以1
为退出码结束脚本程序，调用者可以在调用程序中利用这个退出码来检查这个脚本程序是否执
行成功。
3.一个与变量有关的问题
刚才所做的修改可以弥补比较明显的缺陷，但还有一个更隐蔽的问题没有解决。让我们运
行这个新的脚本程序，但这次不回答问题，直接按下回车键。我们将看到如下所示的出错信息：
[：=:unary operator expected
什么地方出问题了呢？原因在于第一个if子句。在对变量timeofday进行测试的时候，它遇到
了一个空字符串，这使得if子句成为下面这个样子：
if [ yes • ]
而这不是一个合法的条件。为了避免出现这样的情况，我们必须给变量加上引号：
（*Stimeofday**yes*]
这样，一个空变量给我们的就是一个合法的条件判断子句了：
if I**- *yes* ]
新的脚本程序是这样的：
: /bin/sh
加入jaVa编程群：524621833
---
## Page 50
第2章shell程序设计
31
echo *Is it morning? Please answer yes or no
read tineofday
if[*$timmotday”。*yes"]
then
elif[-Stimeofday*
echo “Guod ufternoon
 :1ou,
else
ecbo *Sorry, $tineofday not recognired.Enter yes or no
exit 1
fi
exit 0
它对回答问题时直接按下回车键的情况也能够应付自如了。
如果你怒让echo命令去掉每一行后面的换行符，最好的办法是使用printf命令（见
后面的内容）而不是echo命令。有的shell允许使用“echo-e”的办法，但这并不是所有
系统都支持的。
4.for语句
我们用for结构来循环处理-一组值，这组值可以是任意字符串的集合。在程序里可以简单地
把全体字符串都列出米，更常见的做法是把它与shel对文件名的通配符扩展结合在一起使用。
它的语法很简单：
for variabie in vaiues
do
statenents
done
动手试试：使用国定字符串的for强环
循环值通常是字符串，所以我们可以这样写程序：
#1 /bin/sh
for foo in bar fud 43
do
echo sfoo
xit 0
done
我们得到的输出结果是：
bar
fud
43
如果把第一行由“for foo in bar fud43”修改为“for foo in“bar fud43”会发生什
么样事情呢？别忘了加上引号就等于告诉shell把引号之间的一切东西都看做是一个字符
串。这是在字符串里保留空格的惟一办法。
操作注释：
这个例子创建了一个变量foo，然后在for循环里每次给它赋一个不同的值。因为shell认为所
加入jaVa编程群：524621833
---
## Page 51
32
Linux程序设计
中
法有效的。
动手试试：使用通配符扩展的for循环
意思是：在字符中的值里加上一个通配符，出shell在程字执行时填充出所有的值。
我们已经在最早的first.sh例子里见过这种做法厂.脚本程序利用shelli对文件名的通配符扩展
把“*”扩展为当前子口录里全体文件的名字，然后它们依次做为for循环的变量“Si”得到处理。
我们来简单地看看另外一个通配符扩展的例子：
知道自己的脚本程序都带有“.sh”扩展名，那就可以像下面这样做：
#! /bin/sh
for file in $(ls f*.sh): do
Gone
1pr Sfile
exit 0
操作注释：
这个例子展示了S（command）语法的用途，这一点我们将在后面的内容里做更细的讲解（请
中的命令的输出结果。
shell对“f*.sh”进行扩展，给出所有匹配此模版的文件的名字。
注意，在shell脚本程序里，对变量的各种通配符扩展都是在脚本程序被执行的时候
而不是在编写它的时候完成的。固此，变量声明方面的语法错误只有在执行的时候才施
发现，就像前面我们给“空”变量加引号的例子里看到的那样。
5.whlie语句
因为所有shell变量值在默认的情况下都被认为是字符串，所以for循环特别适用于对一系列
字符中进行循环处理，但在需要执行特定次数的场合就有些力不从心了。
如果我们想让环执行二十次，请看使用for循环的脚本程序有多么笨拙：
#1/bin/sh
for foo in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
op
dant 
echo *here we go again*
而使用通配符扩展又有可能使你陷人不知道到底会循环多少次的窘境。在这种情况下，我
们可以使用一个while循环，这是它的语法：
whlle condicon do
st atements
加入jaVa编程群：524621833
---
## Page 52
第2章shell程序设计33
done
请看下面的例子，这是一个普通的口令字检查程序：
#1/bin/sh
ecbo *Enter password*
read trythis
while *$trythisssectet*]:do
echo “Sorry. try again*
done
Tead trythis
exit0
这个脚本程序的一个输出示例如下所示：
Erter password
Sorry. try again
password
secret
这当然不是一个查问口令字的安全办法，但它恰如其分地展示了while语句的作用！do和
done之间的语句将反复执行，直到条件不再为真为止：在这个例子里，我们检查的条件是变盐
trythis的值不等于secret，循环将一直执行到$trythis等于secret为止。随后我们将继续执行紧跟在
done后面的脚本程序的其他语句。
动手试试：循环、德环、再循环
把while结构和数值替换结合在一起，我们就可以让某个命令执行特定的次数。这比我们前
面见过的for循环要“苗条”多了。
1/bsn/sh
foon1
do
echo *Here we go again”
foo=$(($foo+1))
done
exit 0
注意：“S(（))”结构是最先出现在ksh中的一个用法，后来被包括在X/Open技术规
范里，早期的shell要用expr来代替它，我们会在后面介绍这个命令：但这样做比较慢，
并且会占用更多的资源。所以只要有可能，你就应该使用命令的“S（）)”格式。
操作注释：
这个罚本程序使用“1”命令来测试foo的值是否大于20，如果它还小于或等干20.就继续
执行循环体。在while循环的内部，语法“（(S（foo+1))”用来对括号内的表达式进行数值转换，
所以foo会在每次循环里递增。
因为foo不可能变成空字符串，所以在我们对它的值进行测试时不需要把它放在双引号里加
加入jaVa编程群：524621833
---
## Page 53
34
Linux程序设计
以保护。这样做的原因也是为了培养--种良好的习惯
6.until语旬
unti语句的语法如下所示：
until condition
do
st at ements
done
它与while循环很相似，只是把条件测试倒过来了、换句话说，循环将反复执行到条件为真
为止，面不是在条件为真时反复执行。
如果我们想让循环不停地执行，直到某些事件发生，就会很自然地想到应该使用unti语句
请看下面的例子，我们设置一个报警程序，当某个特定的用户登录上机时它会向显示一个提示
警报，该用户的登录名要通过命令行传递到脚本程序里去。如下所示：
qs/utq/i#
nu/ap/ <.ts. dax6 |ou tun
do
sleep 60
done
 now ring the bell and announce the expected user
echo ***** $1 has just logged in ****
echo -e \\a
exit 0
7.case语句
case结构比我们前面见过的其他语句都稍微复杂些。它的语法如下所示：
case variable in
pattern[”pattern]
...}statenentsj
pattern [[pattern]...)statenentst
e88C
这看上去有些杂，可case语句确实能够使我们通过一种比较深奥的机制把某个变最的内容
与多个模版进行匹配，再根据成功匹配的模版去决定应该执行哪部分代码。请注意，每个模版
行都是以双分号（“：”）结尾的。前后模版之间可以有任意多条语句，因此，这个双分号实际起
到了分隔符的作用，它标志着前一个语句的结束和后一个模版的开始。
case语句结构能够匹配多个模版，执行多条语句，这使它非常适合用来对用户输人进行
分析和处理。要想弄明白case的工作原理，最好的办法就是通过示例来进行说明。我们将在
改进。
动手试试：case语句示例一：用户输入
我们可以用case语句结构编写一个新版的对用户输人进行检查测试的脚本程序，让它更具选
择性，对非预期输入也更宽容一些。请看：
加入jaVa编程群：524621833
---
## Page 54
第2章shell程序设计
35
#:/bin/sh
echo *Is it morning? Please answer yes or no’
read timeofday
case *Stimeofday in
yes}
echo Good Morning::
no }
Y
echo Good Morning*::
echo*Sorry, answer not xecognized’::
esac
exit 0
操作注释：
当执行到case语句的时候，它会把变量timeofday的内容与各字符串依次进行比较。一且某
个字符串与输人匹配成功，case命令就会执行紧随其后的右括号“)”后面的代码，然后就直接
结束了。
case命令会对它用来做比较的字符串进行正常的通配符扩展。因此我们可以在字符串中指定
几个字符的后面加上一个“*通配符。如果“”号单独出现，就表示匹配任意可能的字符串。
所以，我们总是需要在其他匹配字符串之后再加上一个“”号，这就能够保证即使其他字符串
没有得到匹配，case语句也会完成某个默认动作。之所以能够这样做是因为case语句是顺序比较
每-个字符串的。它不会去查找所谓的“最佳”匹配，而是查找第一个匹配；而默认动作条件
一般都是些“最不可能出现”的条件，所以使用“*”号对脚本程序的调试很有帮助。
动手试试：case语句示例二：合并匹配模版
上面这个case语句明显比多个if语句的版本更明确更精致，但我们还可以把几个不同的匹配
模版归纳在一块儿、使之更简单更容易理解。如下所示：
qS/UTQ/#
echo *Is it mornang? Please answer yes or no*
read timeofday
case *Stineofday” in
echo'Good Afternoon'::
esac
ex1t 0
操作注释：
在这个脚本程序里，case的每个子句里都使用了多重字符串：case将对各组中不同的字符
串进行测试以决定是否需要执行相应的语句。这使脚本程序的长度得以缩短，在实践上也更容
易阅读。我们还示范了“*”号的用法，但这样做就有可能匹配上我们意料之外的模版。比如
说，如果用户输人了“never”，就会因匹配上“n*”而显示出“GoodAfternoon”来，可这并
不是我们希的行为。另外一个需要提请大家注意的地方是对通配符“”的扩展在双引号里
加入jaVa编程群：524621833
---