of the tree, and let⎜x0⨆︁ and⎜x1⨆︁ be the left and right child nodes
(8)
of⎜x⨆︁. Then we modify Step 2 of Algorithm 6 as follows. The CSP
chooses random permutation π ∶ {0, 1} → {0, 1} and numbers
Anselme Tueno and Florian Kerschbaum
r, r0, r1 and sends the ciphertext:
C=⎜22(l+k)(x+ r)⨆︁⋅⎜2l+k(xπ−1(0)+ rπ−1(0))⨆︁
=⎜x+ r∏︁xπ−1(0)+ rπ−1(0)∏︁xπ−1(1)+ rπ−1(1)⨆︁
⋅⎜xπ−1(1)+ rπ−1(1)⨆︁
the DA. The DO does not need to decrypt this time (i.e., at level
This results in h2 homomorphic decryptions and can be extended
to multiple levels (as proved in the following lemma). It can also be
precomputed by the CSP.
instead. The DO decrypts and uses x+ r as before. In the next
protocol iteration, the CSP sends π(bд) to the DO and rπ(bд) to
2i+ 1) and just uses xπ(bд)+ rπ(bд) in the next GC comparison.
Lemma 5.2. Let s= log(pk) be the bitlength of the public key pk.
log(⟩︀ s
l+k(︁+ 1) levels of a complete OPE-tree.
Proof. A complete tree with d levels has 2d−1 nodes (i.e. a tree
with only 1 node has 1 level). If s= log(pk), then we can pack up to
⟨︀s⇑(l+k)⧹︀ plaintexts in one ciphertext. Finally, solving the following
equation: 2d−1=⟨︀s⇑(l+k)⧹︀ in d returns d= log(⟨︀s⇑(l+k)⧹︀+1). (cid:3)
Then the plaintext packing of Equation 8 can be extended to up to
Moreover, one can use JustGarble [6] for highly efficient circuit
garbling.
6 INTEGER COMPARISON
In this section, we describe how the parties compare the inputs
such that the result is revealed only to the server.
6.1 GC Comparison Protocol
For our oblivious OPE protocol we adapted the GCs of [28, 29]
to our needs. Firstly, instead of implementing one garbled circuit
for comparison and another one for equality test, we combined
both in the same circuit. This allows to use the advantage that
almost the entire cost of garbled circuit protocols can be shifted
into the setup phase. In Yao’s protocol the setup phase contains
all expensive operations (i.e., computationally expensive OT and
creation of GC, as well as the transfer of GC that dominates the
communication complexity) [28]. Hence, by implementing both
circuits in only one we reduce the two costly setup phases to one.
Secondly, in our oblivious OPE protocol, integer comparison is an
intermediate step, hence the output should not be revealed neither
to the DA nor to the DO, since this will leak information. Thus the
input of the circuit contains a masking bit for each party that is
used to mask the actual output. Only the party that receives the
masked output and both masking bits can recover the actual output.
Let GC=,> denotes this circuit.
Let P1, P2 be party one and two resp. and let x = xl−1, . . . , x0,
x= xl−1, . . . , x0 be their respective inputs in binary representation.
their input to(bx , b
′
′
′
x , xl−1, . . . , x0).
Parties P1 and P2 choose masking bits bx , b
x , bx , b
′
x , xl−1, . . . , x0),(bx , b
For equality test we use Equation5 9. The two first lines are from
[29]. For each bit position j the second line implements a 1-bit
5In ce ,j and ce , e stands for equality test and j is the bit index
and extend
x
Efficient Secure Computation of Order-Preserving Encryption
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
xl−1 xl−1
ce ,l−1
cд,l−1
x1
x1
x0
x0
...
...
ce ,1
cд,1
ce ,0
cд,0
0
0
⊕ ce ,l
′
cд,l
b
′
b
x
bx
bx
ce
cд
x
Figure 9: Overview of the Garbled Circuit GC=,> for compar-
ison and equality test: Each box for i= 0, . . . , l− 1 is a 1-bit circuit
for equality and greater than test and outputs ce ,j+1=(xj⊕ x j)∨ ce ,j
(Equation 9) and cд,j+1 = (xj ⊕ cд,j)∧(x j ⊕ cд,j)⊕ xj (Equation
ce = ce ,l⊕ bx⊕ bx and cд= cд,l⊕ b′
10) resp.. The last circuit implements exclusive-or operation and outputs
x⊕ b′
.
x
(a) 1-bit Equality Tester
(b) 1-bit GT Comparator
ce
(9)
Figure 10: 1-bit Equality Tester and GT comparator Circuits
equality tester (Figure 10a). The whole circuit tests from 0 to l− 1 if
= 0
= ce ,l⊕ bx⊕ bx
the bits are pairwise different (i.e., their xor is 1). If not it uses the
result of the previous 1-bit equality tester which is initially set to 0.
The actual output of the circuit ce ,l is 1 if x and x are different and 0
exclusive-or operations with the masking bits bx and bx .
)︀⌉︀⌉︀⌉︀⌉︀⌋︀⌉︀⌉︀⌉︀⌉︀]︀ce ,0
ce ,j+1 =(x j⊕ xj)∨ ce ,j , j= 0, . . . , l− 1
otherwise (i.e. ce ,l =(︀x≠ x⌋︀?1∶ 0). Then we blind ce ,l by applying
The comparison is defined as (if x > x then 1 else 0). In [28]
the circuit is based on the fact that(︀x> x⌋︀⇔(︀x− x− 1≥ 0⌋︀ and
)︀⌉︀⌉︀⌉︀⌉︀⌋︀⌉︀⌉︀⌉︀⌉︀]︀cд,0
cд,j+1 =(x j⊕ cд,j)∧(xj⊕ cд,j)⊕ x j , j= 0, . . . , l− 1
is summarized in Equation6 10, where again the two first lines
are from [28]. The second line is the 1-bit comparator (Figure 10b)
which depends on the previous bit comparison. This is initially 0.
′
Again the actual output cд,l is blinded by applying exclusive-or
x and b
operations with the masking bits b
. An owerview of the
x
comparison circuit is illustrated in Figure 9.
= 0
= cд,l⊕ b
′
x⊕ b
The performance metric for a garbled circuit is the number of
AND-gates [28, 29]. Hence, assuming the inputs are l-bit long, both
circuits for equality test and greater than comparison contain each l
AND-gates. Each AND-gate is garbled with 4l ciphertexts. However,
the halfGate optimization [48] reduces the number of ciphertexts
per AND-gate by a factor of 2 at the cost for the evaluator to perform
two cheap symmetric operations, rather than one. As a result the
garbled circuit GC=,> contains 4l symmetric ciphertexts.
(10)
cд
′
′
x
6In cд,j and cд, д stands for greater than and j is as above
Figure 11: Overview of the comparison GC from Lemma 7.1
7 FREQUENCY-HIDING OPE CASE
In this section we consider the case where the underlying OPE is not
deterministic as in [25]. As above the first step is the initialization
procedure (Section 5.2). It remains the same with the difference
that the tree traversal and the encryption algorithms work as in
mOPE3 [25] (i.e., the Ope function of Definition 4.2 is instantiated
with mOPE3.Encode). Hence, if the equality test returns true (line
14 of Protocol 5), then the CSP traverses the tree to the left or
to the right depending on the outcome of a random coin. The
order y of x is computed as y = yi−1+[︂ yi−yi−1
⌉︂ resp. y = yi+
[︂ yi+1−yi
⌉︂ if the algorithm is inserting x left resp. right to a node
⎜xi⨆︁ with corresponding order yi. However, the equality test leaks
some information, as it allows the CSP to deduce from the OPE-table
that certain nodes have the same plaintext. Therefore it would be
preferable to implement the random coin in the secure computation.
2
2
7.1 Implementing the random coin in GC
In the following x and x represent as before the inputs of the DA
represents the unmasked comparison circuit7 that outputs the bits
and the DO in the oblivious comparison respectively, and GCu=,>
be= ce ,l as result of the equality test and bд= cд,l as result of the
greater than comparison. The idea is to adapt the garbled circuit
for integer comparison (Section 6) such that its output allows to
traverse the tree randomly as in [25], but without revealing the
result of the equality test to the CSP.
traverses the tree as required.
Lemma 7.1. Let rx and rx be the DA’s and DO’s random bits and
b with
br = rx⊕rx . Then extending the circuit GCu=,> to the circuit GCu
additional input bits rx , rx and with output b=(be∧bд)∨(¬be∧br)
Proof. If x ≠ x then be = 1 and b = bд, hence the algorithm
erwise¬be= 1, hence b is the random bit br and the tree traversal
traverses the tree depending on the greater than comparison. Oth-
depends on a random coin. In each case the circuit returns either 0
or 1, and does not reveal if the inputs are equal.
(cid:3)
Now the circuit GCu
b
, which is illustrated in Figure 11, can also
be extended to the circuit GCb by using the masking bits ba and bo
7This is the sub-circuit that operates on the real input bits (from 0 to l− 1) without
the masking bits.
xj¯xjce,jce,j+1=xj¯xjcg,jcg,j+1ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
for the DA and the DO respectively as described in Section 6. The
output is then((bд∧ be)∨(¬be∧ br))⊕ ba⊕ bo.
The DGK comparison protocol can be used here as well as de-
scribed above. However, the equality checking part is not required
as we want to hide the frequency of plaintexts to the server.
(11)
7.2 Dealing with queries
So far we have computed the ciphertext in the non-deterministic
case. However, as Kerschbaum pointed out [25] this ciphertext can-
not be directly used to query the database. As in the deterministic
case let x and y be symbols for plaintext and order respectively.
Since a plaintext x might have many ciphertexts let cmin and cmax
be respectively the minimum and maximum order of x, hence:
)︀⌉︀⌉︀⌋︀⌉︀⌉︀]︀cmin(x)= min({y∶ Ope.Decrypt(∐︀⎜x⨆︁, ỹ︀, sk)= x})
cmax(x)= max({y∶ Ope.Decrypt(∐︀⎜x⨆︁, ỹ︀, sk)= x})
Thus, a query(︀a, b⌋︀ must be rewritten in(︀cmin(a), cmax(b)⌋︀.
Unfortunately, in Kerschbaum’s scheme the cmin(x), cmax(x) are
only known to the DO, because they reveal to the server the fre-
quency of plaintexts. Recall that the goal of [25] was precisely to
hide this frequency from the CSP.
Instead of returning y to the DA, which is useless for queries,
learns nothing besides the intermediate messages of the protocol.
We begin by proving the following lemma.
our goal is to allow the DA to learn cmin(x) and cmax(x) and
nothing else. The CSP learns only∐︀⎜x⨆︁, ỹ︀ as before and the DO
Lemma 7.2. Let∐︀⎜xi⨆︁, yĩ︀,∐︀⎜xi+1⨆︁, yi+1̃︀∈ T be elements of the
OPE-Table such that xi≤ xi+1 and yi< yi+1. Let x be a new inserted
plaintext with corresponding order y such that xi≤ x≤ xi+1. Then it
holds: cmin(x)∈{cmin(xi), y} and cmax(x)∈{cmax(xi+1), y}.
Proof. If xi= x then by definition of cmin, we have cmin(x)=
cmin(xi). If xi< x and x< xi+1 then x occurs only once in the OPE-
Table T and it holds cmin(x)= cmax(x)= y. Otherwise x is equal
to xi+1, but since x is new and by assumption x≤ xi+1 the algorithm
is inserting x right to xi and left to xi+1 hence yi< y< yi+1 must
hold. Then by definition again cmin(x)= y. For the case of max
Corollary 7.3. Let x, xi , xi+1, y, yi , yi+1 be as above and let bi=
(︀xi= x⌋︀?1∶ 0 resp. bi+1=(︀x= xi+1⌋︀?1∶ 0 then it holds: cmin(x)=
bi⋅cmin(xi)+(1−bi)⋅y, resp. cmax(x)= bi+1⋅cmax(xi+1)+(1−
bi+1)⋅ y.
the proof is similar.
(cid:3)
values of M are likely.
Now we are ready to describe the solution. First we assume that
tree re-balancing never happens, because it might update cmin and
cmax for some ciphertexts. The CSP cannot update cmin and cmax
without knowing the frequency. According to [25] the probability
of re-balancing is negligible in n for uniform inputs if the maximum
order M is larger than 26.4⋅log2 n. For non-uniform input, smaller
The first step is to store besides each ciphertext∐︀⎜x⨆︁, ỹ︀ two
ciphertexts⎜cmin(x)⨆︁ and⎜cmax(x)⨆︁. This is done by the DO
during the initialization. Let⎜x⨆︁a ← Ahe.Encrypt(x, pka) be a
putation of y (Protocol 5) the CSP learns∐︀⎜x⨆︁, ỹ︀. Then the parties
ciphertext of x encrypted with the Ahe public key pka, whose
corresponding private key ska belongs to the DA. After the com-
Anselme Tueno and Florian Kerschbaum
6: DO:
2: CSP: choose random integers s1, s2, r1, r2
3: CSP: compute
Input (CSP, DA, DO):(∐︀S,∐︀⎜x⨆︁, ỹ︀̃︀,∅, sk)
Output (CSP, DA, DO):(∅,∐︀cmin(x), cmax(x)̃︀ ,∅)
Functionality : MinMaxOrder(S,∐︀⎜x⨆︁, ỹ︀, sk)
1: CSP: retrieve∐︀⎜xi⨆︁, yĩ︀,∐︀⎜xi+1⨆︁, yi+1̃︀
with yi< y< yi+1
⎜d1⨆︁←⎜(xi− x)⋅ s1⨆︁
⎜d2⨆︁←⎜(xi+1− x)⋅ s2⨆︁
4: CSP→ DO:
∐︀⎜d1⨆︁,⎜y⋅ r1⨆︁a,⎜cmin(xi)⋅ r1⨆︁̃︀
∐︀⎜d2⨆︁,⎜y⋅ r2⨆︁a,⎜cmax(xi+1)⋅ r2⨆︁̃︀
5: CSP→ DA: r1 and r2
Let⎜c11⨆︁a←⎜y⋅ r1⨆︁a,⎜c12⨆︁←⎜cmin(xi)⋅ r1⨆︁
Let⎜c21⨆︁a←⎜y⋅ r2⨆︁a,⎜c22⨆︁←⎜cmax(xi+1)⋅ r2⨆︁
⎜cmin(x)⨆︁a← Mux(sk,⎜d1⨆︁,⎜c11⨆︁a,⎜c12⨆︁)
⎜cmax(x)⨆︁a← Mux(sk,⎜d2⨆︁,⎜c21⨆︁a,⎜c22⨆︁)
7: DO→ DA:⎜cmin(x)⨆︁a,⎜cmax(x)⨆︁a
cmin(x)← Ahe.Decrypt(⎜cmin(x)⨆︁a, ska)
cmax(x)← Ahe.Decrypt(⎜cmax(x)⨆︁a, ska)
Protocol 12: Computing cmin(x) and cmax(x) securely
function Mux(sk,⎜d⨆︁,⎜c1⨆︁a,⎜c2⨆︁)
b←(︀Ahe.Decrypt(⎜d⨆︁, sk) ?= 0⌋︀
if b= True then
⎜c⨆︁a←⎜c1⨆︁a
c2← Ahe.Decrypt(⎜c2⨆︁, sk)
⎜c⨆︁a← Ahe.Encrypt(c2, pka)
return⎜c⨆︁a
8: DA: decrypt and output
else
2:
4:
6:
8:
Algorithm 13: Homomorphic Multiplexer (run by DO)
not inserted in the database, but only in the OPE-table, because it
and the DO respectively. The DA does not have any input, but is
the only one to receive the output of Protocol 12.
execute Protocol 12 with∐︀S,∐︀⎜x⨆︁, ỹ︀̃︀ and sk as input for the CSP
Notice that for an input x of the DA the ciphertext∐︀⎜x⨆︁, ỹ︀ is
cannot be included in the result of a query. Particularly, if∐︀⎜x⨆︁, ỹ︀
new x with corresponding order y is inserted between xi and xi+1
such that xi< x= xi+1 then cmin(x)= y implies that the previous
cmin(xi+1) should be updated to y. However, as explained before
⎜y⋅r1⨆︁a and⎜y⋅r2⨆︁a, which it cannot decrypt, and four randomized
plaintexts d1, cmin(xi)⋅ r1, d2, cmax(xi+1)⋅ r2. The DA sees two
is no longer needed (e.g., after the data analysis) it must be removed
from the OPE-table. As stated in Lemma 7.2, if it happens that the
In Protocol 12, the DO sees two semantically secure ciphertexts
this update is not necessary.
random integers r1, r2 and the output of the protocol. The CSP
receives no new message. Hence, the simulation is straightforward.
Efficient Secure Computation of Order-Preserving Encryption
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
Time (ms)