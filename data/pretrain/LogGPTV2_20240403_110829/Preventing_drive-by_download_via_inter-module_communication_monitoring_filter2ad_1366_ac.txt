### Definition File Structure

The definition file for a vulnerable component is structured as follows:

- **First Line**: The CLSID of the vulnerable component.
- **Subsequent Content**: Divided into one or more blocks, each separated by a new line.

#### Block Structure
Each block in the definition file describes a part of the constraint and is structured as follows:

1. **Original State Number**:
   - The first line of the block specifies the original state number.
   - The initial state is represented by the number 1.
   - The attack state is represented by the number 0.
   - Other positive numbers can be used freely for additional states.

2. **Target State Number**:
   - The second line of the block specifies the target state number.
   - The numbering rule is the same as for the original state number.

3. **Method Name**:
   - The third line of the block specifies the method name, which is case-insensitive according to the ActiveX standard.

4. **Symbolic Constraint Expressions**:
   - The remaining lines in the block contain the symbolic constraints associated with the original state.
   - These expressions are written in Yices Input Language, as Yices is the resolver used in our prototype system [12].

### Session Manager

In MwDetector, the session manager handles three types of IMC events:

1. **Object Creation Event**:
   - When an object creation event is received, the session manager creates a new session object.
   - It then uses the objectâ€™s CLSID to query the signature manager for matchers (discussed below) that belong to this CLSID.
   - These matchers are associated with the created session.
   - The session object is added to the list of active sessions.

2. **Method Invocation Event**:
   - When a method invocation event is received, the session manager uses the object address to find the corresponding session in the session list.
   - Once found, it feeds all the associated matchers with the method name and parameters passed in.
   - If any matcher enters the EXPLOIT state, the session manager raises an attack alert.
   - The alert information is then returned to COMSniffer for further processing.

3. **Object Free Event**:
   - To handle the object (COM object) free event, the session manager first finds the session object using the same method as above.
   - It removes the session object from the list of active sessions.
   - The session manager then frees all the associated matchers and the session object itself.

### Matcher

In MwDetector, a matcher is an instance of a signature. When MwDetector is loaded, the signature manager loads all signatures by parsing the definition files. When the session manager queries for matchers, the signature manager instantiates signatures registered for handling events of the given CLSID and returns the matchers to the session manager.

#### Matcher Types
There can be several types of matchers for different kinds of input data. However, every matcher class must implement a transition method. This method is called by the session manager upon receiving method invocation events. For COM matchers, the transition method works as follows:

1. **Parameter Parsing**:
   - The parameters are parsed into symbolic expressions.
   - Parameters used to invoke a method through the IDispatch interface are stored in a DISPPARAMS structure (Figure 2).
   - The `cArgs` member stores the number of unnamed arguments, while the `cNamedArgs` member stores the number of named ones.
   - Information about each argument is stored in `rgvarg` and `rgdispidNamedArgs`, respectively.
   - Since most scripting languages are weakly-typed, each unnamed argument is stored in a VARIANTARG structure.
   - Commonly used types include strings (VT_BSTR), integers (VT_Ik, VT_UIk, k = 1, 2, 4, 8), objects (VT_DISPATCH), and variables (VT_VARIANT).
   - The parser generates expressions based on the argument's type. For example, a string parameter is expressed as:
     ```yices
     (define arg#_index#::int)
     (assert (= arg#_index# value))
     ```

2. **Constraint Checking**:
   - The matcher locates the transition constraint based on the current state and the name of the invoked method.
   - It calls Yices to check whether the input is consistent with the constraint.
   - If the input is consistent, the session state transitions to the target state; otherwise, it remains in the current state.
   - Since there can be multiple matchers for one session, the session state is stored inside each matcher to avoid interference.

### Evaluation

#### Test Environment
To evaluate our prototype, we used a drive-by download attack replaying system. This system reliably replays drive-by download attacks by caching all web content (HTML documents, scripts, images, binary files, etc.) involved in the attack. This allows us to revisit malicious pages and restore the original attack scene.

#### ActiveX Emulator
To handle multiple vulnerabilities, we created a universal ActiveX control that can be instantiated as any ActiveX component. This ensures that attempts to use non-existent ActiveX controls will succeed, allowing MwDetector to detect the attacks. Our emulator operates at the COM level, making it less detectable by malicious scripts.

#### Detection Effectiveness
We evaluated our prototype on 119 in-the-wild drive-by download attack samples (1010 HTML and script files) cached by our replay system. The tested system was integrated into IE6 on a clean Windows XP SP2 with Adobe Flash Player 9.0.47.0 installed. We manually generated 37 signatures from 19 vulnerability reports.

- **Results**:
  - Our detection system successfully detected 895 exploit instances from 99 samples, yielding an initial detection effectiveness of 83% (false negative ratio of 17%).
  - After reanalyzing the remaining 20 pages, we found they were inactive due to cache issues. Excluding these, the detection rate improved to 100%.

- **Additional Findings**:
  - The emulator allowed detection of attacks targeting 14 additional vulnerabilities.
  - Attacks targeting vulnerabilities that do not require shellcode (e.g., CVE-2006-0003, CVE-2008-2463, CVE-2007-4105, CVE-2008-6442) were more frequent, indicating the need for better protection mechanisms.

#### False Positive Evaluation
We evaluated the false positive rate by visiting the home pages of the top 100 sites globally and within China, all known to be benign. Our prototype did not produce any false positives, which was expected due to the simplicity of the vulnerabilities and the fact that most commonly visited sites did not instantiate vulnerable ActiveX controls.

#### Performance
We evaluated the performance overhead of our prototype by measuring page load times with and without the detection system. On average, native MSIE took 4.1 seconds to load a page, while our system increased this to 4.71 seconds, resulting in an overhead of about 15%. This trade-off is considered fair given the protection provided by our system.

### Discussion and Future Work

#### Limitations
- **Explicit Malicious Content**: Our system currently only detects attacks using explicit malicious content. Future work could extend the system to monitor URIs, intercept downloads, and check for exploits in downloaded content.
- **Signature-Based Detection**: As with all signature-based systems, undetected exploits targeting unknown vulnerabilities remain a challenge.

#### Future Enhancements
- **Implicit Malicious Content Detection**: Extend the system to handle implicit malicious content.
- **Continuous Signature Updates**: Regularly update signatures to cover new vulnerabilities.

By addressing these limitations, we aim to enhance the robustness and effectiveness of MwDetector in protecting against drive-by download attacks.