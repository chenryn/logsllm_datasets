# Implementing TLS with Verified Cryptographic Security

**Authors:**
- Karthikeyan Bhargavan
- Cédric Fournet
- Markulf Kohlweiss
- Alfredo Pironti
- Pierre-Yves Strub

**Affiliations:**
- INRIA Paris-Rocquencourt: Karthikeyan Bhargavan, Alfredo Pironti
- Microsoft Research: Cédric Fournet, Markulf Kohlweiss
- IMDEA Software: Pierre-Yves Strub

**Abstract:**
TLS (Transport Layer Security) is one of the most widely used protocols for secure communications, with a history spanning 18 years of vulnerabilities and patches. These issues range from protocol logic to cryptographic design, and from Internet standards to various implementations. We present a verified reference implementation of TLS 1.2. Our code fully supports the wire formats, ciphersuites, sessions, connections, re-handshakes, resumptions, alerts, errors, and data fragmentation as specified in the RFCs. It interoperates with mainstream web browsers and servers. Additionally, our code is structured to enable modular, automated verification, from its main API down to the computational assumptions of its cryptographic algorithms.

Our implementation is written in F# and specified in F7. We provide security specifications for key components such as authenticated stream encryption for the record layer and key establishment for the handshake. We describe their verification using the F7 typechecker. Each cryptographic primitive and construction in TLS is equipped with a new typed interface that captures its security properties. We gradually replace concrete implementations with ideal functionalities. Finally, we typecheck the protocol state machine to obtain precise security theorems for TLS as it is implemented and deployed. We also revisit classic attacks and report a few new ones.

## I. Introduction

Transport Layer Security (TLS) is one of the most widely used security protocols, commonly employed for securing web traffic (HTTPS), emails, VPNs, and wireless communications. Its popularity has led to extensive scrutiny, with a well-documented 18-year history of attacks, fixes, upgrades, and proposed extensions. Some attacks target the protocol logic, causing clients and servers to negotiate weak algorithms even when strong cryptography is supported. Others exploit cryptographic design flaws, such as using knowledge of the next IV to set up adaptive plaintext attacks. Attacks like padding-oracle attacks combine protocol logic and cryptography, using error messages to gain information on encrypted data. Additional attacks arise from implementation errors, side channels, or poor certificate management and gaps between TLS and application logic. Mainstream TLS implementations still require several security patches each year.

While TLS security has been formally verified in many models under various simplifying assumptions, these works often ignore the details of RFCs and implementations. To achieve provable security for TLS as it is used, we develop a verified reference implementation of the Internet standard. Our results precisely relate application security at the TLS interface down to cryptographic assumptions on the algorithms selected by its ciphersuites. This addresses software security, protocol security, and cryptographic security within a common implementation framework. In the process, we revisit known attacks and discover new ones, including an alert fragmentation attack and a fingerprinting attack based on compression.

### A. Transport Layer Security

TLS is a dynamically configured assembly of protocols, controlled by an internal state machine that calls into a large collection of cryptographic algorithms. This flexibility can come at the cost of security, so TLS applications must carefully configure and review their negotiated connections. We prove security relative to the choice of protocol version, ciphersuite, and certificates of the two parties.

#### Versions, Ciphersuites, and Algorithms

Pragmatically, TLS must maintain backward compatibility while providing some security. Despite the release of TLS 1.2, which fixes several security weaknesses, RC4 remains the most popular cipher, and many browsers still negotiate TLS 1.0. Our codebase supports all protocol versions from SSL 3.0 to TLS 1.2 but does not support SSL2 due to its unsafe usage and prohibition. Many algorithms, such as MD5, DES, or PKCS#1, are eventually broken or subsumed by others. TLS features cryptographic agility, enabling users to choose between different methods and algorithms at runtime. Ciphersuites and extensions control the key exchange and transport layer methods. Older ciphersuites can be very weak, and even the latest ciphersuites may not guarantee security. Our formal development fully supports cryptographic agility and provides security relative to basic cryptographic assumptions (e.g., IND-CPA or PRF) on the chosen algorithms.

#### Side Channels and Traffic Analysis

Our API provides fine-grained control for fragmentation and padding, enabling applications to control the amount of information leaked via network traffic analysis. Our verification explicitly handles many runtime errors, reflecting their potential use to leak secret information. For example, our verification catches the padding oracle attack of TLS 1.0 as a type-abstraction error. However, our verification does not account for timing, following the standard to mitigate known timing channels by ensuring uniform flow.

### B. Compositional, Automated Verification

To handle the complexity of TLS and prove security over a large amount of code, we rely on compositionality and automation. We extend the cryptographic verification by typing approach. The main technical novelty is to track conditional security using type indexes. For instance, the index of a TLS connection includes the algorithms and certificates used to establish the connection, allowing us to specify security relative to this context. Another central idea is to use type abstraction to specify confidentiality and integrity, enabling us to express security properties in a few lines of typed declarations.

Our presentation focuses on the main API and the interfaces of two core internal modules: the stateful authenticated encryption module (StAE) and the handshake module (HS). We specify ideal typed interfaces for StAE and HS that suffice to prove application-level security for TLS. Our main formal contributions include verifying that the record layer securely implements the StAE interface for a range of authenticated encryption mechanisms, the handshake module implements the HS interface with security guarantees when using RSA and DH, and the TLS protocol logic, dealing with application data, alerts, and multiple connections, securely implements our main API given any secure implementations of StAE and HS.

### Prior Verification Work on TLS Implementations

To our knowledge, Bhargavan et al. [11] present the only prior computational security theorems for a TLS implementation. They conduct extensive verification of the protocol logic by model extraction from F# to ProVerif [12] and CryptoVerif [13]. However, their Dolev-Yao models do not cover binary formats, bytestreams, fragmentation, or padding issues, nor the properties of the underlying algorithms. Their computational models cover only the cryptographic core of one ciphersuite, resulting in less precise results and blindness to the cryptographic weaknesses of TLS 1.0.

Chaki and Datta [18] verify the SSL 2.0/3.0 handshake implementation in OpenSSL by model checking, finding rollback attacks but applying only to fixed configurations and assuming a symbolic model of cryptography. Others [35, 3] verify Java implementations of the handshake protocol using logical provers, also in the symbolic model.

## II. A Modular Implementation of TLS

### A. API Overview

Our application interface (see Fig. 4 in §VI) is inspired by typical APIs for TLS libraries and provides similar functionalities. It is thread-safe and does not allocate any TLS-specific threads, leaving scheduling and synchronization to the application programmer. Cryptographically, we treat our implementation as a probabilistic polynomial time (p.p.t.) module, to be composed with a main p.p.t. program representing the adversary.

Our reference implementation consists of a dynamically linked library (DLL) with an interface `TLSInfo` that declares various types and constants, e.g., for ciphersuites, and a main interface `TLS` for controlling the protocol. The application programmer provides a `DataStream` module that uses `TLSInfo` and defines the particular streams of plaintext application data to communicate over TLS, and a main program that calls `TLS`.

Application code may create any number of TLS connections, as a client or server, by providing a TCP connection and a local configuration indicating versions, ciphersuites, and certificates to use, and sessions to reuse. Our API returns a stateful connection endpoint (with an abstract type) that can then be used by the application to issue a series of commands, such as read and write to communicate data once the connection is opened, rekey and rehandshake to trigger a new handshake, and shutdown to close the connection. Each command returns either a result, such as the data fragment, or an error.