上述代码中，第 8 行 把 this（测试用例中的字符串）的类型转换为字符串；  
第 9-12 行代码判断 position 的长度（测试用例中的 2）是否需要截断；  
第 17 行代码判断 position 的长度是否符合规定，判断结果存储在 tmp6 中；  
第 18 行代码会根据 tmp6 的结果进行跳转，若结果为真则跳转到 block4；  
第 21 行代码判断 position 是否小于字符串的长度，小于代表 CharAt() 操作没有越界（InBound），否则代表
OutBound，OutBound 意味着最终的结果为空。  
 **（2）** StringCharCodeAt() 定义在类 CodeStubAssembler 中，源码如下：
    1.  TNode CodeStubAssembler::StringCharCodeAt(SloppyTNode string,
    2.                                                    SloppyTNode index) {
    3.    CSA_ASSERT(this, IsString(string));
    4.    CSA_ASSERT(this, IntPtrGreaterThanOrEqual(index, IntPtrConstant(0)));
    5.    CSA_ASSERT(this, IntPtrLessThan(index, LoadStringLengthAsWord(string)));
    6.    TVARIABLE(Int32T, var_result);
    7.    Label return_result(this), if_runtime(this, Label::kDeferred),
    8.        if_stringistwobyte(this), if_stringisonebyte(this);
    9.    ToDirectStringAssembler to_direct(state(), string);
    10.    to_direct.TryToDirect(&if_runtime);
    11.    TNode const offset = IntPtrAdd(index, to_direct.offset());
    12.    TNode const instance_type = to_direct.instance_type();
    13.    TNode const string_data = to_direct.PointerToData(&if_runtime);
    14.    // Check if the {string} is a TwoByteSeqString or a OneByteSeqString.
    15.    Branch(IsOneByteStringInstanceType(instance_type), &if_stringisonebyte,
    16.           &if_stringistwobyte);
    17.    BIND(&if_stringisonebyte);
    18.    {
    19.      var_result =
    20.          UncheckedCast(Load(MachineType::Uint8(), string_data, offset));
    21.      Goto(&return_result);
    22.    }
    23.    BIND(&if_stringistwobyte);
    24.    {
    25.      var_result =
    26.          UncheckedCast(Load(MachineType::Uint16(), string_data,
    27.                                     WordShl(offset, IntPtrConstant(1))));
    28.      Goto(&return_result);
    29.    }
    30.    BIND(&if_runtime);
    31.    {
    32.      TNode result = CallRuntime(
    33.          Runtime::kStringCharCodeAt, NoContextConstant(), string, SmiTag(index));
    34.      var_result = SmiToInt32(CAST(result));
    35.      Goto(&return_result);
    36.    }
    37.    BIND(&return_result);
    38.    return var_result.value();
    39.  }
上述代码中，第 2-5 行判断字符串类型是否正确、index 是否大于等于零且小于字符串长度；  
第 6 行代码申请 Int32 类型的变量 var_result，用于存储返回值；  
第 7 行代码申请四个标签变量，将来该变量会配合 Branch 完成函数跳转；  
第 10 行代码 to_direct.TryToDirect(&if_runtime) 的作用是将 flat、thin 或 slice 类型的
indirect string 转换成 direct string。若转换失败则跳转到第 30 行代码，使用 runtime 处理字符串；若转换成功则返回到
string_data;  
第 15 行代码判断字符串类型是单字节还是双字节；  
第 19 行代码使用单字节方式从 string_data 的偏移位置读取字节并存储到 var_result 中；  
第 25 行代码使用双字节方式从 string_data 的偏移位置读取字节并存储到 var_result中；  
第 32 行代码使用 runtime 方式实现 StringChartAt 功能，后续文章另做讲解。  
 **（3）** StringFromSingleCharCode() 定义在 CodeStubAssembler 中，作用是把 Int 数值转换为字符串。
## 3 CharAt 测试
测试代码的字节码如下：
    1.  //分隔线............//省略了部分字节码
    2.      8 S> 0000012A281C2B26 @   16 : 12 01             LdaConstant [1]
    3.      8 E> 0000012A281C2B28 @   18 : 15 02 04          StaGlobal [2], [4]
    4.     29 S> 0000012A281C2B2B @   21 : 13 02 00          LdaGlobal [2], [0]
    5.           0000012A281C2B2E @   24 : 26 f9             Star r2
    6.     31 E> 0000012A281C2B30 @   26 : 29 f9 03          LdaNamedPropertyNoFeedback r2, [3]
    7.            0000012A281C2B33 @   29 : 26 fa             Star r1
    8.            0000012A281C2B35 @   31 : 0c 02             LdaSmi [2]
    9.            0000012A281C2B37 @   33 : 26 f8             Star r3
    10.     31 E> 0000012A281C2B39 @   35 : 5f fa f9 02       CallNoFeedback r1, r2-r3
    11.     29 E> 0000012A281C2B3D @   39 : 15 04 06          StaGlobal [4], [6]
    12.     43 S> 0000012A281C2B40 @   42 : 13 05 08          LdaGlobal [5], [8]
    13.           0000012A281C2B43 @   45 : 26 f9             Star r2
    14.     51 E> 0000012A281C2B45 @   47 : 29 f9 06          LdaNamedPropertyNoFeedback r2, [6]
    15.           0000012A281C2B48 @   50 : 26 fa             Star r1
    16.     55 E> 0000012A281C2B4A @   52 : 13 04 02          LdaGlobal [4], [2]
    17.           0000012A281C2B4D @   55 : 26 f8             Star r3
    18.     51 E> 0000012A281C2B4F @   57 : 5f fa f9 02       CallNoFeedback r1, r2-r3
    19.           0000012A281C2B53 @   61 : 26 fb             Star r0
    20.     58 S> 0000012A281C2B55 @   63 : ab                Return
    21.  Constant pool (size = 7)
    22.  0000012A281C2A99: [FixedArray] in OldSpace
    23.   - map: 0x0148906c0169 
    24.   - length: 7
    25.             0: 0x012a281c2a39 
    26.             1: 0x012a281c2999 
    27.             2: 0x012a281c2981 
    28.             3: 0x00024f52ad19 
    29.             4: 0x00024f53e069 
    30.             5: 0x00024f533699 
    31.             6: 0x00024f532cd9 
上述代码中，第 2 行代码把常量 hello v8 加载到累加寄存器；第 3-5 行代码存储并读取常量 hello v8 ，该常量最终被存储到 r2
寄存器中；第 6 行代码加载 String.prototype.CharAt()，第 10 行代码调用 String.prototype.CharAt；第
25-31 行是常量池，用于存储运行期间需要使用的常量。
调试字节码 CallNoFeedback 的执行可以看到 String.prototype.CharAt 的执行过程。调试方法为：设置
FLAG_trace_ignition = true；在 Runtime_InterpreterTraceBytecodeEntry 中设置断点；在图 1
中的 “CallNoFeedback r1, r2-r3” 位置使用汇编进行调试。
**技术总结**  
 **（1）** 编译 String.prototype.CharAt 生成的二进制代码（code）存放在 builtin_ 数组中，解释执行
JavaScript 源码时会使用 code，而不是使用本文所讲的 StringCharAt 的源码;  
 **（2）** V8 中字符串细分为单字节、双字节、flat 等类型；  
 **（3）** indirect 类型的字符串只能使用 runtime 处理，先用 to_direct.TryToDirect() 判断字符串类型可以省去
runtime 不必要的操作；  
 **（4）** String.prototype.CharAt 的工作流程是：判断字符串类型和位置是否正确、判断位置是否越界、直接字符串采用
Builtin 方式处理、间接字符串采用 runtime 方式处理。
好了，今天到这里，下次见。  
 **个人能力有限，有不足与纰漏，欢迎批评指正**  
 **微信：qq9123013 备注：v8交流 邮箱：[PI:EMAIL](mailto:PI:EMAIL)**