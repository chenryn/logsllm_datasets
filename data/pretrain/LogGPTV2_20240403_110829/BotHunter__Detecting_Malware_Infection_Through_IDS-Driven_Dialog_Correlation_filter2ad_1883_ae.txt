leverages the MS06-40 exploit
[27], which is a buffer
overﬂow that enables attackers to craft RPC requests that
can execute arbitrary code. This mechanism is used to
force the victim to fetch and execute a binary named ne-
tadp.exe from the system folder. The infected system
then connects to the z3net IRC network and joins two
channels upon which it is instructed to initiate scans of
203.0.0.0/8 network on several ports. Other bot families
successfully detected by BotHunter included variants of
W32/Korgo, W32/Virut.A and W32/Padobot.
Overall, BotHunter detected a total of 1,920 of these
2,019 successful bot infections. This represents a 95.1%
true positive rate. All malware instances observed dur-
ing this period transmitted their exploits through ports
TCP-445 or TCP-139. This is very common behavior, as
the malware we observe tends to exploit the ﬁrst vulner-
able port that replies to a targeted scans, and ports TCP-
445 and TCP-139 are usually among the ﬁrst ports tested.
The infection set analyzed exhibited limited diversity in
the infection transmission methods, and overall we ob-
served roughly 40 unique patterns in the dialog warnings
produced.
This experiment produced 99 bot infections that did
not produce bot proﬁles, i.e., a 4.9% false negative rate.
To explain these occurrences we manually examined
each bot infection trace that eluded BotHunter, using tcp-
dump and ethereal. The reasons for these failed bot de-
tections can be classiﬁed into three primary categories:
infection failures, honeynet setup or policy failures, or
data corruption failures.
• Infection failures: We observed infections in which
the exploit apparently led to instability and eventual fail-
ure in the infected host. More commonly, we observed
cases in which the infected victim attempt to “phone
home,” but the SYN request received no reply.
• Honeynet setup and policy failures: We observed
that our NAT mechanism did not correctly translate
application-level address requests (e.g., ftp PORT com-
mands). This prevented several FTP egg download con-
nection requests from proceeding, which would have
otherwise led to egg download detections. In addition,
USENIX Association
16th USENIX Security Symposium
177
some traces were incomplete due to errors in our honey-
pot recycling logic which interfered with our observation
of the infection logic.
• Data corruption failures: Data corruption was the
dominant reason (86% of the failed traces) in preventing
our BotHunter sensors from producing dialog warnings.
We are still investigating the cause behind these corrup-
tions, but suspect that these likely happened during log
rotations by the Drone manager.
Discussion: In addition to the above false negative ex-
periences, we also recognize that others reasons could
prevent BotHunter from detecting infections. A natural
extension of our infection failures is for a bot to pur-
posely lay dormant once it has infected a host to avoid
association of the infection transmission with an out-
bound egg download or coordination event. This strategy
could be used successfully to circumvent BotHunter de-
ployed with our default ﬁxed pruning interval. While we
found some infected victims failed to phone home, we
could also envision the egg download source eventually
responding to these requests after the BotHunter prun-
ing interval, causing a similar missed association. Sen-
sor coverage is of course another fundamental concern
for any detection mechanism. Finally, while these re-
sults are highly encouraging, the honeynet environment
provided a low-diversity in bot infections, in which at-
tention was centered on direct exploits of TCP-445 and
TCP-139. We did not provide a diversity of honeypots
with various OSs, vulnerable services, or Trojan back-
doors enabled, to fully examine the behavioral complex-
ities of bots or worms.
5.3 An Example Detection in a Live Deployment
In addition to our laboratory and honeynet experiences,
we have also ﬁelded BotHunter to networks within the
Georgia Tech campus network and within an SRI lab-
oratory network.
In the next sections we will discuss
these deployments and our efforts to evaluate the false
positive performance of BotHunter. First, we will brieﬂy
describe one example host infection that was detected us-
ing BotHunter within our Georgia Tech campus network
experiments.
In early February 2007, BotHunter detected a bot in-
fection that produced E1, E4 and E5 dialog warnings.
Upon inspection of the bot proﬁle, we observed that the
bot-infected machine was scanned, joined an IRC chan-
nel, and began scanning other machines during the BotH-
unter time window. One unusual element in this experi-
ence was the omission of the actual infection transmis-
sion event (E2), which is observed with high-frequency
in our live honeynet testing environment. We assert that
the bot proﬁle represents an actual infection because dur-
ing our examination of this infection report, we discov-
ered that the target of the E4 (C&C Server) dialog warn-
ing was an address that was blacklisted both by the Shad-
owServer and the botnet mailing list as a known C&C
server during the time of our bot proﬁle.
5.4 Experiments in a University Campus Network
In this experiment, we evaluate the detection and false
positive performance of BotHunter in a production cam-
pus network (at the College of Computing [CoC] at
Georgia Tech). The time period of this evaluation was
between October 2006 and February 2007.
The monitored link exhibits typical diurnal behavior
and a sustained peak trafﬁc of over 100 Mbps during the
day. While we were concerned that such trafﬁc rates
might overload typical NIDS rulesets and real-time de-
tection systems, our experience shows that it is possible
to run BotHunter live under such high trafﬁc rates us-
ing commodity PCs. Our BotHunter instance runs on
a Linux server with an Intel Xeon 3.6 GHz CPU and 6
GB of memory. The system runs with average CPU and
memory utilization of 28% and 3%, respectively.
To evaluate the representativeness of this trafﬁc, we
randomly sampled packets for analysis (about 40 min-
utes). The packets in our sample, which were almost
evenly distributed between TCP and UDP, demonstrated
wide diversity in protocols, including popular protocols
such as HTTP, SMTP, POP, FTP, SSH, DNS, and SNMP,
and collaborative applications such as IM (e.g., ICQ,
AIM), P2P (e.g., Gnutella, Edonkey, bittorrent), and
IRC, which share similarities with infection dialog (e.g.,
two-way communication). We believe the high volume
of background trafﬁc, involving large numbers of hosts
and a diverse application mix, offers an appealing en-
vironment to conﬁrm our detection performance, and to
examine the false positive question.
First, we evaluated the detection performance of
BotHunter in the presence of signiﬁcant background traf-
ﬁc. We injected bot trafﬁc captured in the virtual network
(from the experiments described in Section 5.1) into the
captured Georgia Tech network trafﬁc. Our motivation
was to simulate real network infections for which we
have the ground truth information. In these experiments,
BotHunter correctly detected all 10 injected infections
(by the 10 bots described in Section 5.1).
Next, we conducted a longer-term (4 months) eval-
uation of false alarm production. Table 4 summarizes
the number of dialog warnings generated by BotHunter
for each event type from October 2006 to January 2007.
BotHunter sensors generated about 2,563,402 (more than
20,000 per day) raw dialog warnings from all the ﬁve
event categories. For example, many E3 dialog warn-
ings report on Windows executable downloads, which
by themselves do not shed light on the presence of ex-
ploitable vulnerabilities. However, our experiments do
demonstrate that the alignment of the bot detection con-
178
16th USENIX Security Symposium
USENIX Association
Table 4: Raw Alerts of BotHunter in 4 Month Operation in CoC Network
Event
Alert#
E2[rb]
950,112
E2[sl]
316,467
E3
1,013
550,373
697,374
48,063
E1
E4
E5
ditions outline in Section 3 rarely align within a stream
of dialog warnings from normal trafﬁc patterns. In fact,
only 98 proﬁles were generated in 4 months, less than
one per day on average.
In further analyzing these 98 proﬁles, we had the fol-
lowing ﬁndings. First, there are no false positives re-
lated to any normal usage of collaborative applications
such as P2P, IM, or IRC. Almost two-thirds (60) of the
bot proﬁles involved access to an MS-Exchange SMB
server (33) and SMTP server (27). In the former case,
the bot proﬁles described a NETBIOS SMB-DS IPC$
unicode share access followed by a windows executable
downloading event. Bleeding Edge Snort’s IRC rules are
sensitive to some IRC commands (e.g., USER) that fre-
quently appear in the SMTP header. These issues could
easily be mitigated by additional whitelisting of certain
alerts on these servers. The remaining proﬁles contained
mainly two event types and with low overall conﬁdence
scores. Additional analysis of these incidents was com-
plicated by the lack of full packet traces in our high-
speed network. We can conservatively assume that they
are false positives and thus our experiments here provide
a reasonable estimate of the upper bound on the number
of false alarms (less than one) in a busy campus network.
5.5 Experiments in an Institutional Laboratory
live on a
We deployed BotHunter
small well-
administered production network (a lightly used /17 net-
work that we can say with high conﬁdence is infection
free). Here, we describe our results from running BotH-
unter in this environment. Our motivation for conducting
this experiment was to obtain experience with false posi-
tive production in an operational environment, where we
could also track all network traces and fully evaluate the
conditions that may cause the production of any unex-
pected bot proﬁles.
BotHunter conducted a 10-day data stream monitor-
ing test from the span port position of an egress border
switch. The network consists of roughly 130 active IP
addresses, an 85% Linux-based host population, and an
active user base of approximately 54 people. During this
period, 182 million packets were analyzed, consisting
of 152 million TCP packets (83.5%), 15.8 million UDP
packets (8.7%), and 14.1 million ICMP packets (7.7%).
Our BotHunter sensors produced 5,501 dialog warnings,
composed of 1,378 E1 scan events, 20 E2 exploit sig-
nature events, 193 E3 egg-download signature events,
7 E4 C&C signature events and 3,904 E5 scan events.
From these dialog warnings, the BotHunter correlator
produced just one bot proﬁle. Our subsequent analysis of
the packets that caused the bot proﬁle found that this was
a false alarm. Upon packet inspection, it was found that
the session for which the bot declaration occurred con-
sisted of a 1.6 GB multiﬁle FTP transfer, during which a
binary image was transferred with content that matched
one of our buffer overﬂow detection patterns. The buffer
overﬂow false alarm was coupled with a second MS Win-
dows binary download, which caused BotHunter to cross
our detection threshold and declare a bot infection.
6 Limitations and Future Work
Several important practical considerations present chal-
lenges in extending and adapting BotHunter for arbitrary
networks in the future.
Adapting to Emerging Threats and Adversaries:
Network defense is a perennial arms race7 and we an-
ticipate that the threat landscape could evolve in several
ways to evade BotHunter. First, bots could use encrypted
communication channels for C&C. Second, they could
adopt more stealthy scanning techniques. However, the
fact remains that hundreds of thousands of systems re-
main unprotected, attacks still happen in the clear, and
adversaries have not been forced to innovate. Open-
source systems such as BotHunter would raise the bar for
successful infections. Moreover, BotHunter could be ex-
tended with anomaly-based “entropy detectors” for iden-
tiﬁcation of encrypted channels. We have preliminary re-
sults that are promising and defer deeper investigation to
future work. We are also developing new anomaly-based
C&C detection schemes (for E4).
It is also conceivable that if BotHunter is widely de-
ployed, adversaries would devise clever means to evade
the system, e.g., by using attacks on BotHunter’s dia-
log history timers. One countermeasure is to incorporate
an additional random delay to the hard prune interval,
thereby introducing uncertainty into how long BotHunter
maintains local dialog histories.
Incorporating Additional State Logic: The current
set of states in the bot infection model was based on the
behavior of contemporary bots. As bots evolve, it is con-
ceivable that this set of states would have to be extended
or otherwise modiﬁed to reﬂect the current threat land-
scape. This could be accomplished with simple conﬁg-
uration changes to the BotHunter correlator. We expect
such changes to be fairly infrequent as they reﬂect fun-
7In this race, we consider BotHunter to be a substantial technologi-
cal escalation for the white hats.
USENIX Association
16th USENIX Security Symposium
179
6   TCP 2971 -  445 [SYN, SYN,ACK]
13 -> SMB Negotiate Protocol Request
14  SMB Session Setup AndX Request, NTLMSSP_AUTH, User: \
18  SMB Tree Connect AndX Request, Path: \\\IPC\$
20  SMB NT Create AndX Request, Path: \browser
22  DCERPC Bind: call_id: 0 UUID: SRVSVC
24  SMB Read AndX Request, FID: 0x4000, 4292 bytes at offset 0
26  SRVSVC NetrpPathCanonicalize request
28  SMB Read AndX Request, FID: 0x4000, 4292 bytes at offset 0
Initiating Egg download
30   TCP 1028 -  8295 [SYN, SYNACK]
34-170 114572 byte egg download ...
Connecting to IRC server on port 8080
174   TCP 1030 - 66.25.XXX.XXX 8080 [SYN, SYNACK]
176  :server016.z3nnet.net NOTICE AUTH
:*** Looking up your hostname...\r\n’’ ...
179 -> ... PING :B203CFB7
180  Welcome to the z3net IRC network ...
Joining channels and setting mode to hidden
183 -> MODE [2K|USA|P|00|eOpOgkIc] +x\r\nJOIN ##RWN irt3hrwn\r\n
Start scanning 203.0.0.0/8
185 -> ....scan.stop -s; .scan.start NETAPI 40 -b -s;
.scan.start NETAPI 203.x.x.x 20 -s;
.scan.start NETAPI 20 -a -s;.scan.start SYM 40 -b -s;
.scan.start MSSQL 40 -b -s\r\n...
191 -> 203.7.223.231 TCP 1072 > 139 [SYN]
192 -> 203.199.174.117 TCP 1073 > 139 [SYN] scan,scan...
Score:
Infector List:
Observed Start: 01/18/2007 23:46:54.56 PST
Gen. Time:
01/18/2007 23:47:13.18 PST
1.95 (>= 0.80)
Infected Target: 
C & C List: 66.25.XXX.XXX
INBOUND SCAN
EXPLOIT
event=1:2971 tcp E2[rb] NETBIOS SMB-DS IPC\$
unicode share access 445<-2971 (23:46:54.56 PST)
---------------------------------------
event=1:99913 tcp E2[rb] SHELLCODE x86 0x90
unicode NOOP 445<-2971 (23:46:54.90 PST)
EXPLOIT (slade)
event=552:5555002 (15) tcp E2[sl] Slade detected suspicious
payload exploit with anomaly score 1843.680342.
EGG DOWNLOAD
event=1:5001683 tcp E3[rb] Windows executable
sent potential malware egg 1028<-8295 (01:45:56.69 EST)
C&C TRAFFIC
event=1:2002023 tcp E4[rb] BLEEDING-EDGE TROJAN