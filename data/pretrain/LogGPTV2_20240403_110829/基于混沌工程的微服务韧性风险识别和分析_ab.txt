b) 根据服务性能指标确立服务性能基线.b) 根据服务性能指标确立服务性能基线. 
在确定服务性能指标之后,对每一个服务的服务性能指标建立对应的服务性能基线.根据性能指标类型的 不同,性能基线既可能是一个定值(如服务响应时间的基线值通常为一个定值),也可能随事件变化动态取值(如 销售服务的每秒成功交易量的基线值会随着销售淡旺季变化而变动).定值的性能基线的设立方式有统计历史 运行数据(如服务处于正常状态时的性能数值)、领域专家给出经验值、参考相关标准(如上文提到的 IT 系统性 能标准)给出的建议值等,动态的性能基线则可以在历史服务性能数据上使用时间序列数据处理算法(如 EWMA、ARMIA、LSTM 等)计算服务在某个时段中若正常运行其性能的预估值来得到. 
	(2) 设立服务韧性目标(2) 设立服务韧性目标 
	服务韧性目标是用于判断系统环境扰动是否为韧性风险的基准,其体现了系统环境扰动发生后系统服务 的服务降级程度的可接受范围.服务韧性目标将按照 MRMM 中的 3 个韧性度量指标进行设立.各个系统服务的 服务韧性目标值的设立将依据各个服务的实际业务需求,其中没有意义的度量维度则不需要设立对应的目标 值(例如,以系统响应时间作为性能指标的服务不需要设立降级损失的服务韧性目标). 
	(3) 设置混沌实验参数 
	微服务架构韧性风险的识别过程中,需要对混沌实验进行参数限制以控制整个识别过程所花费的时间.混 沌实验的参数包含: 
	①实验次数:一次韧性风险识别过程中将执行多少次混沌实验. 
②实验最大时长:每次混沌实验最多持续多少时间,若一次混沌实验的实验时间超过设置的最大时长,该 	次混沌实验将被强制终止. 
	(4) 进行混沌实验(4) 进行混沌实验 
	混沌实验将通过随机地生成系统环境扰动,并将其引入至正在运行的目标微服务架构系统中.在执行混沌 实验的过程中,为了保证每一次混沌实验不会被前一次混沌实验中引入的系统环境扰动所影响,混沌实验将利 用自动化构建工具将目标微服务系统进行重新构建、部署,并在实验结束后销毁实验环境.每一次混沌实验中, 将包括以下两个随机因素. 
•	系统压力场景:在混沌实验中,目标微服务架构系统将承受一定的业务压力,从而使由于系统环境扰动 	产生的服务降级更加明显.而为了使实验环境能够更加贴近系统真实运行环境,系统业务压力的模拟 	将参考系统在真实运行环境中可能面临的业务压力场景.每一次混沌实验,将随机地选取一个压力场 	景进行业务压力模拟.•	系统环境扰动:混沌实验中,系统环境的扰动将按照以下方式生成:首先,系统环境扰动的生成工具将随 	机地选择发生系统环境扰动的资源类型;随后,系统环境扰动的生成工具将在实验环境中指定资源类 	型的实例中随机选取一个作为系统环境扰动发生的具体位置;最后,在该资源类型中可能发生的系统 	环境扰动事件中随机地选取一个事件作为在混沌实验中发生的系统环境扰动事件. 
在执行混沌实验的过程中,除了系统压力场景的模拟以及系统环境的扰动之外,还需要对目标系统实时地 监控并进行数据采集.数据采集的对象包括两部分:①系统服务的服务性能数据,用以实验结束后度量实验中 引入系统环境扰动后产生的服务降级;②系统资源性能数据(如 CPU 使用率、网络流量等). 
	(5) 韧性风险识别 
	在所有的混沌实验结束后,混沌实验中收集到的服务性能数据将与混沌实验前预设的服务性能基线数据 进行比较,判断系统环境扰动过程中系统服务是否发生了服务降级.若系统服务发生了服务降级,则根据殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 	1237 
MRMM 中的 3 个韧性度量维度对实验中发现的服务降级进行度量,并与预设的服务韧性目标比较:如果服务降 级的程度超出了服务韧性目标所预设的阈值,则说明这次混沌实验中所引入的系统环境扰动是严重影响系统 服务性能的韧性风险,该次混沌实验中生成收集得到系统服务性能数据和系统资源性能数据将作为韧性风险 分析的依据. 
3  微服务架构系统的韧性风险分析
如本文引言中所述,本文提出的韧性风险分析方法将避免对微服务架构系统本身的额外开发成本,以无监 督的方法分析一个韧性风险如何影响目标系统并引发服务降级.该方法将以被识别的韧性风险所对应的混沌 实验中收集的系统性能数据为依据,通过因果搜索算法构建系统性能指标之间的因果关系图,随后根据系统性 能数据的上升和下降变化对因果关系图中的各条边赋予权重,最终输出若干由系统性能指标构成的韧性风险 的影响链路,这些影响链路将按照因果关系边的权重排序.微服务架构系统的运维人员可以根据韧性风险的影 响链路中涉及到的系统性能指标设计对应的系统优化方案.韧性风险分析方法的整体流程如图 3 所示.Fig.3  Process of resilience risk analysis 
图 3  韧性风险分析过程
3.1  混沌实验数据收集
对于每一个被识别的韧性风险,其对应的混沌实验执行过程中的服务性能和资源性能的历史数据将作为 韧性风险如何产生服务降级的分析依据.本文提出的韧性风险分析方法所分析的目标为系统各项性能指标之 间的因果变化关系,因此会在每一次混沌实验中将通过监控工具收集目标系统在该次混沌实验中的系统性能 数据集{timestamp,K1,K2,…,Kn},其中,timestamp 为时间戳,K1,…,Kn 为在该时间戳下的各项系统性能指标.图 4 为 一个样例的混沌实验数据集,其中,第 1 列为每一行性能数据对应的 Unix 时间戳,第 2 列开始的每一列表示某一 项系统性能指标(如第 3 列为 cart 服务的平均请求延时,单位为 s),某一行某一列的数据表示该行第 1 列时间戳 下捕获到的该列所对应的系统性能指标的实际值.Fig.4  A sample chaos experiment dataset 
图 4  混沌实验数据集样例
1238 	Journal of Software软件学报 Vol.32, No.5, May 2021 
3.2  因果关系图构建
基于在混沌实验中收集的系统性能数据集,本文提出的韧性风险分析方法将首先通过因果搜索算法构建 性能指标之间的因果关系图.因果关系图为由一系列表示性能指标的节点和表示性能指标之间因果关系的边 组成,因果关系图中所有的边仅表示性能指标之间的直接因果关系,不包含间接因果关系.若某个性能指标 X 影 响了另一个性能指标 Y,则用有向边 X→Y 表示.如果算法能明确两个性能指标 X,Y 之间存在因果关系但不能明 确是 X 影响了 Y 还是 Y 影响了 X,则用无向边 X—Y 表示.本文中使用的因果搜索算法参考了 Sprite 和 Glymour 所提出的 PC 算法[73]的主要思想,最终,算法将输出一 张包含有向边和无向边的因果关系图.因果关系构建算法的具体流程如算法 1 所示,其主要包含两个步骤:因果 关系确立以及因果方向确立.在因果关系确立阶段,算法首先构建以数据集内性能指标为节点的完全图;随后, 对于任意两个性能指标 X,Y,算法通过判断 X 和 Y 是否条件独立来确定 X 和 Y 之间是否存在因果关系.若 X 和 Y 条件独立,说明 X 和 Y 之间不存在直接的因果关系,则在完全图中删除对应的边;最后得到初步的仅包含无向边 的因果关系图.在因果方向确立阶段,算法将先根据 d-分隔原则确定因果关系图中所有的 X→Y←Z 的结构,即 V-Structure;随后,根据在 V-Structure 中已经确定的有向边和一些逻辑推断规则(算法 1 伪代码的第 15 行~第 21 行),算法将进一步确定现有的因果关系图中部分剩余无向边的方向.例如,在已经确定图中所有 X→Y←Z 结构 的情况下,若发现结构 A—B←C,则可以直接判断边 A—B 的方向为 A←B.算法 1. 因果关系图构建算法.
输入:混沌实验数据集 D,数据集 D 中的监控指标集合 V.
输出:因果关系图 G.
1. 	//因果关系确立 
2. 	以 V 中的元素作为节点,构建完全图 G 
3. 	n←V 中元素的数量 
	fork from 0 to n: 4. 
5. 	for eachX,Y 为 G 中的两个相邻节点,且邻接于 X 的节点数量大于 k: 6. 	for each集合 W⊂V\{Y}为邻接于 X 的节点集合,且 W 的元素数量为 k: 7. 	ifX,Y 条件独立于 Wthen: 
	去除 X 与 Y 之间的边 8. 
9. 	记录 W 
10.
	11. 	//因果方向确立 
	12. 	for eachG 中相邻的 3 个节点 X—Y—Z: 
	13. 	ifY 不存在于所有使得 X 于 Z 独立的节点集合中: 
	14. 	把 G 中 X—Y—Z 的方向修改为 X→Y←Z14. 	把 G 中 X—Y—Z 的方向修改为 X→Y←Z 
	15. 	for eachG 中相邻的 3 个节点 X,Y,Z: 
	16. 	ifX→Y—Z: 
	17. 	把 Y—Z 的方向修改为 Y→Z 
	18. 	ifX—Y and X→Z→Y: 
	19. 	把 X—Y 的方向修改为 X→Y 
	20. 	ifX—Y and 存在另一变量 L,使得 X—Z→Y 且 X—L→Y: 
	21. 	把 X—Y 的方向修改为 X→Y 
	22. 	returnG; 