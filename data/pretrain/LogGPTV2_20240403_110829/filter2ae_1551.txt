# Weblogic CVE-2021-2394 反序列化漏洞分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 漏洞简介
根据漏洞作者描述，这是一个二次反序列化漏洞，是CVE-2020-14756和CVE-2020-14825的调用链相结合组成一条新的调用链来绕过weblogic黑名单列表。
## 0x02 环境搭建
参照之前的环境搭建文档搭建JDK1.8_111和weblogic 12.2.1.3.0
    git clone https://github.com/BabyTeam1024/Docker_WeblogicAutoBuild.git
在两个use目录下，分别放置JDK安装包和Weblogic安装包
之后运行在项目根目录下的配置脚本 WeblogicDockerBuild.sh
之后运行在项目根目录下的配置脚本 WeblogicDockerBuild.sh
调试端口8453，服务端口7001
## 0x03 知识点分析
###  0x1 ObjectInputStream反序列化简析
下图为ObjectInputstream在反序列化 **对象**
时的函数调用关系，介绍这部分知识是因为，本次在反序列化的时候使用了readExternal函数进行反序列化。下图部分红蓝部分只能执行其中一个，我们以往分析的都是蓝色分支，
引用款字节安全的一个表格，对比两个反序列化过程，可以发现Serializable默认是将所有对象进行保存，然而Externalizable则是由开发人员指定保存哪个对象，可以看出后者更加高效。但是在高效的同时也存在一定的安全隐患，这就意味着攻击者可以不通过ObjectInputStream中的方法进行反序列化生成相应的对象。
**区 别** | **Serializable** | **Externalizable**  
---|---|---  
实现复杂度 | 实现简单，Java对其有内建支持 | 实现复杂，由开发人员自己完成  
执行效率 | 所有对象由Java统一保存，性能较低 | 开发人员决定哪个对象保存，可能造成速度提升  
保存信息 | 保存时占用空间大 | 部分存储，可能造成空间减少  
###  0x2 Weblogic自己实现的反序列化功能
不只是这次漏洞利用了Weblogic自己的反序列化功能，在之前的CVE-2020-14756漏洞中也运用了该知识点。具体是个什么东东，我们看下weblogic源代码就知道了。
在反序列化的时候执行obj.readExternal函数就进入了weblogic自定义的readExternal函数进行反序列化，其中最关键的部分在coherence.jar::com.tangosol.util.ExternalizableHelper函数中。关键函数调用栈如下
在浅蓝色部分是这几次反序列化漏洞打补丁的地方，下图为CVE-2020-14756 patch的地方
我们跟进这个函数查看他的相关实现，可以看到weblogic的这套反序列化体系，其底层实现是用最基础的Class.forName方法进行类加载的。
    //coherence.jar::com.tangosol.util.ExternalizableHelper
    public static Class loadClass(String sClass, ClassLoader loader1, ClassLoader loader2) throws ClassNotFoundException {
        for(int i = 1; i ，后续打算对weblogic漏洞进行详细的梳理。
## 参考文章