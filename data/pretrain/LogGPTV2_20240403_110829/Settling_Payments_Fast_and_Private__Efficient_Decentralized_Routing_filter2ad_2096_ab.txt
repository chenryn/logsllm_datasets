changed.
Second, as SilentWhispers relies on landmark-centered
routing, all paths include the landmarks even if i) the sender
and receiver of a payment are in the same branch, or ii) there
is a short path between sender and receiver but the links are
not part of the spanning tree. Thus, the overall path used
for the payment can be unnecessarily long, leading to longer
delays and a lower success ratio due to the increased chance
of encountering at least one link without enough funds.
Third, the probe operation requires that the nodes included
in a transaction path send shares to all landmarks. This means
that the transaction overhead scales quadratically in the number
of landmarks.
Fourth, SilentWhispers does not provide a suitable solution
for concurrency. Assume that one or more probe operations
aim to use the same link. The probe operation can either
provide the same amount of available credit for both links or
block use of the link for some time after the ﬁrst time a probe
operation ﬁnds a path containing the link. The former can lead
to failures later on as the available credit, while sufﬁcient for
each transfer on its own, might not cover multiple transfers.
While a block prevents such complications, it increases the
likelihood of failures because probe operations cannot use
certain links, which might have enough credit
to execute
multiple transactions. Hence, both approaches to concurrency
have severe drawbacks.
In summary, landmark routing as used in SilentWhispers
has various weaknesses that we aim to overcome in this work.
C. Embedding-based Routing
Peer-to-peer PBT networks differ from common peer-to-
peer networks as the connections between peers are predeﬁned
and cannot be changed to improve the quality of the routing.
Due to their ﬁxed structure, peer-to-peer PBT networks are
route-restricted and hence are closely related to Friend-to-
friend (F2F) networks, which restrict connections to peers
sharing a mutual trust relationship. As a consequence, we
summarize the state-of-the-art approach to routing in F2F
networks, namely embedding-based routing [20], [30].
Embeddings rely on assigning coordinates to nodes in
a network and having nodes forward packets based on the
distances between coordinates known to that node and a desti-
nation coordinate. Greedy embeddings are similar to landmark
routing in that they assign coordinates based on a node’s
position in a spanning tree. However, greedy embeddings
disregard the spanning tree after assigning the coordinates and
in particular discover shorter paths using links that are not in
the spanning tree. We refer to links that are not contained in
the tree but are used during routing as shortcuts. When a node
v forwards a message addressed to a destination coordinate,
v chooses the neighbor with the coordinate closest to the
destination coordinate to forward the message to. Hence, v
might either use a link in the spanning tree (forwarding to a
child or parent), or a shortcut.
Despite the fact that routes can contain shortcuts, there is
no guarantee that routes with shortcuts exist. Hence, the links
in the trees provide the guarantee that the routing works and
removing any such links likely leads to failures. In the absence
of shortcuts, embedding-based routing is identical to tree-only
routing. As a consequence, it is important to adapt the tree
when the nodes or links change.
3
Fig. 1: Examples of different spanning tree routing schemes for landmark lm, sender s, receiver r.
Preﬁx Embedding [8] is a greedy embedding that enables
routing of messages in F2F overlays. As illustrated in Fig. 1,
Preﬁx Embedding assigns coordinates in the form of vectors,
starting with an empty vector at
the landmark/root. Each
internal node of the spanning tree enumerates its children and
appends the enumeration index of a child to its coordinate
to obtain the child coordinate. The distance between two
such coordinates corresponds to the length of the shortest
path in the spanning tree between them; i.e., the distance of
two coordinates id(u) and id(v) with |id(w)| denoting the
coordinate length of node w and cpl(id(u), id(v)) denoting
the common preﬁx length is
d(id(u), id(v)) = |id(u)| + |id(v)| − 2cpl(id(u), id(v)). (1)
Based on Eq. 1, nodes determine which neighbor is closest
to the receiver in terms of their coordinates’ distance and
forwards a message accordingly. Fig. 1 displays an example
to illustrate the difference between various tree-based routing
schemes and illustrates the coordinate assignment in Preﬁx
Embedding.
1) Preﬁx Embeddings in VOUTE: VOUTE [30] is a routing
algorithm building upon Preﬁx Embedding with the goal of
anonymous and efﬁcient message delivery for a dynamic route-
restricted network; i.e., a network that does not allow the
establishment of links between arbitrary nodes. We quickly
describe how VOUTE addresses the issues of privacy and
dynamics.
Preﬁx Embedding reveals the unique coordinate of the
receiver. In contrast, VOUTE allows nodes to provide anony-
mous return addresses instead of their original coordinates. A
receiver generates a return address by padding its coordinate to
a ﬁxed length and generating keyed hashes of the coordinate’s
elements. The anonymous return address is then composed of
the tuple (keyed hashes, key), where the key allows forwarding
nodes to determine the common preﬁx length required in Eq. 1.
Based on the common preﬁx length of the receiver’s coordinate
id(r) and a neighbor’s coordinate id(u), forwarding nodes
can compute d(id(u), id(r)) + ∆ with ∆ corresponding to
the constant length of coordinates after the padding. Hence,
they can forward the message along the same path as when
using clear-text coordinates, while maintaining the privacy of
the receiver’s true coordinates.
The original Preﬁx Embedding coordinates reﬂect an enu-
meration and hence have little entropy. As a consequence,
VOUTE replaces the enumeration index with random b-bit
numbers; e.g., for b = 128. In this manner, guessing the
coordinate of an unknown node becomes computationally
unfeasible for an adversary.
Rather than periodically reconstructing the spanning tree,
VOUTE addresses dynamics with an on-demand stabilization
algorithm. When constructing the tree, nodes send invitations
to all neighbors stating their coordinate and offering to become
a parent. Each node accepts one such invitation but keeps
the most recent invitation of all neighbors to quickly react to
network dynamics. If nodes establish a new link, nodes already
contained in the spanning tree offer invitations to their new
neighbors. If a node is not yet part of the tree, it accepts the
invitation. Otherwise, it stores it for future consideration. On
the other hand, if a link in the spanning tree ceases to exist, the
child node and all its descendants choose a new parent based
on their remaining invitations. They then disseminate their new
coordinate to all neighbors. In this manner, spanning trees and
embeddings have an on-demand repair mechanism rather than
periodic full re-computation as in landmark routing.
2) Limitations of VOUTE: VOUTE has not been deﬁned
in the context of PBT networks and therefore presents several
limitations that must be overcome before considering it as a
routing algorithm in PBT networks. In particular, VOUTE has
incompatible assumptions with regard to the nature of links
and topology dynamics in a PBT network.
First, VOUTE considers undirected and unweighted links
between pairs of users. In a PBT network instead, links are
directed and weighted, as are payments. While all links allow
message transfer in VOUTE, a link in a PBT network might not
hold enough funds to perform a payment. The directed nature
of the links indicates that VOUTE’s construction algorithm is
insufﬁcient as it is unclear how to deal with unidirectional
links. If unidirectional links are part of the spanning tree,
a node (and it descendants) might only be able to send or
receive funds but not both. The weighted nature of links and
the impossibility to use links for all payments contradicts one
of the key assumptions of VOUTE’s algorithm, namely that
in the absence of link failures, all links can transfer messages.
Therefore, to apply VOUTE in the context of PBT networks,
it is necessary to design algorithms that deal with weighted
links and transfers.
Second, VOUTE considers dynamics in the form of nodes
joining and leaving the network. However, in PBT networks,
the weights of the links are the main source of change. In
particular, each successful transaction might change several
links. A variant of VOUTE for PBT networks would likely
be inefﬁcient if it reacts to all of these changes. Deciding on
when and how to adapt to changes of links is important for
the design of such a variant.
Finally, VOUTE does not have to deal with concurrency
increase
issues. While concurrent message transfers might
4
delay and congestion, they do not change the capacity of links
and transmitting a message does not affect the ability of the
link to transmit future messages. However, separated probe and
payment operations as in SilentWhispers, creates concurrency
issues. SilentWhispers provides insufﬁcient solutions here, so
we require a new concurrency algorithm.
In summary, although VOUTE presents an interesting alter-
native to landmark routing as implemented in SilentWhispers
for the routing operation,
its application in PBT network
scenarios is not straightforward.
III. SYSTEM MODEL AND GOALS
We start with a generic system model for distributed routing
algorithms, followed by our privacy goals and our performance
metrics.
A. Our Model
We model a distributed PBT network (G, w) as a directed
graph G = (V, E) and a weight function w on the set of edges.
The set of nodes V corresponds to the participants of the PBT
network. A link (edge) from node u to v exists if u can transfer
funds to v. We deﬁne the set of outgoing neighbors of a node
v as Nout(v) = {u ∈ V : (v, u) ∈ E}. Correspondingly, we
deﬁne the set of incoming neighbors of a node v as Nin(v) =
{u ∈ V : (u, v) ∈ E}. Furthermore, a path p is a sequence
of links e1 . . . ek with ei = (v1
(i+1) for
1 ≤ i ≤ k − 1. Moreover we denote by L = {l1, . . . , l|L|} a
set of nodes, called landmarks, that are well known to other
users in the PBT network. We denote by |L| the size of the
set L.
i ), and v2
i = v1
i , v2
The function w describes the amount of funds that can be
transferred between two nodes sharing an edge. We thereby
abstract from the speciﬁc implementation of the function w.
For instance, in the Bitcoin Lightning Network, the function
w : E → R deﬁnes the number of bitcoins u can transfer to v
in a payment channel opened between them.
We deﬁne the funds available in a path e1, . . . , ek as the
minimum w(ei). Moreover, we deﬁne the the net balance of a
node v as cnode(v) =
w(u, v) − (cid:88)
(cid:88)
w(v, u).
u∈Nin(v)
u∈Nout(v)
1) Operations: Routing in a PBT network consists of a
tuple of algorithms (setRoutes, setCred, routePay) deﬁned as
follows:
setRoutes(L): Given the set L = {l1, . . . , l|L|} of land-
marks, setRoutes initializes the routing information required
by each node in the PBT network.
setCred(c, u, v): Given the value c and the nodes u and
v, setCred sets w(u, v) = c. In addition, setCred might alter
the routing information initially generated by setRoutes.
((p1, c1), . . . , (p|L|, c|L|)) ← routePay(c, u, v). Given a
value c, a sender u and a receiver v, routePay returns a set
of tuples (pi, ci), denoting that ci funds are routed through the
path described by pi.
5
a) Correctness: A key property of a PBT network is
correctness. Intuitively, correctness indicates that the routing
algorithm i) suggests to spend the desired funds c rather than
a higher value and ii) suggests paths that indeed have sufﬁ-
cient funds. Let (setRoutes, setCred, routePay) be the routing
operations of a PBT network and let ki denote the length of
the ith discovered path. We say that the PBT network is correct
if for all results ((p1, c1), . . . , (p|L|, c|L|)) of routePay(c, u, v),
the following two conditions hold:
i ci ≤ c
• (cid:80)
contribute (cid:80)
i , . . . , eki
i and each ej
i , ci ≤ w(ej
i ).
• For each pi := e1
We note that the routePay operation could return paths that
i ci < c, and it is still considered correct. This
accounts for the cases where the PBT network does not provide
enough liquidity between the sender and receiver to perform
a transaction.
B. Attacker Model
We consider a fully distributed network. Our primary attack
scenario is companies and individuals interested in a user’s
ﬁnancial situation rather than governmental security agencies.
The adversary controls a subset of the nodes in the network
either by inserting its own nodes or corrupting existing nodes.
We assume that the adversary cannot choose the set of users
at will, as some users will be harder to corrupt by social
engineering or malware attacks. In general, we assume that
the attacker does not know all links and nodes in the network
and in particular cannot access routing information locally
stored at non-compromised nodes. The assumption that the
attacker does not know the complete topology of a large-scale
distributed system with participants from a multitude of regions
and countries seems realistic for our attack scenario. If we
indeed have an adversary that knows the full topology, we
might not be able to hide the identities of sender and receiver
but can still hide the transaction value.
Our adversary aims to undermine the privacy rather than
perform a large-scale denial-of-service attack. We argue that
the primary defense against denial-of-service attacks is de-
tection and expulsion of malicious nodes. While related to
routing, different operations are required for realizing detection
and expulsion, and they are out of scope for this paper.
While our overall adversary model limits the adversary’s
capacities, we nonetheless deﬁne our value privacy goals for an
attacker that has a global view of the topology, indicating that
we can still achieve some privacy against a stronger adversary.
C. Privacy Goals
The hope that cryptography and decentralization might
ensure robust privacy was among the strongest drivers of
Bitcoin’s and blockchains’ early success. We expect businesses
and customers employing the PBT networks to be interested
in hiding their transactions from competitors and even service
providers. Therefore, ensuring privacy for path-based transac-
tions is important.
Like PrivPay [17], SilentWhispers [11], Fulgor [12], and
Rayo [12], we aim to hide values (value privacy), and the
identities of sender and receiver (sender/receiver privacy) of
path-based transactions. We use the term transaction privacy to
refer to meeting all three of these notions. Next, we informally
describe these privacy properties for PBT networks, and refer
the readers to the PrivPay paper [17] for the formalized
versions deﬁned in the context of credit networks.
Value Privacy: A PBT network achieves value privacy
if it is not possible for any adversary to determine the total
value of a transaction between non-compromised users as long
as none of the employed intermediate nodes is compromised.
Let s and r be two non-compromised users, and let
(p1, c1), . . . , (p|L|, c|L|) be the result of a routePay(c, s, r)
operation. If for every path pi, all nodes on that path are non-
compromised, the adversary (even a global passive adversary)
obtains no information about the transaction value c.
Notice that, as elaborated in Section IV-E, we can provide
a weaker form of value privacy even when the adversary
compromises some intermediate nodes as long as all nodes on
at least one of the employed paths remain non-compromised.
Sender Privacy: A PBT network achieves sender pri-
vacy if it is not possible for any adversary to determine the
sender in a path-based transaction between non-compromised
users.
In particular, for two non-compromised users s and r, the
attacker should not be able to determine the sender s of any
routing operation routePay(z, s, r), unless she has complete
knowledge of s’s incoming links i.e., she knows the set Nin(s)
though not necessarily the funds of the links e ∈ Nin(s).
Note that although the local attacker without a global view
of the network might know (and even control) all nodes in
Nin(s), she might not be aware that she does control all
such nodes. As a consequence, similar to P2P anonymity
systems [15], [16], [27], controlling all neighbors does not
automatically mean she can be sure that s did initiate the
routing. Therefore, we expect the sender privacy to hold even
when the attacker controls all nodes in Nin(s) for the sender
s but does not know that she does control the whole set.
Receiver Privacy is deﬁned analogously to sender privacy,