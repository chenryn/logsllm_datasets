We took measures neither to damage the exposure platform nor interrupt the ongoing API 
services for other verticals/users.
●
Clear guessing strategy is applied rather than a random penetration/function testing
●
Noisy attacks such as DoS or bruteforce are ignored
Design risks in IoT service platforms (9)
(access-control, authentication, data exposure)
Forged access?
Procedure to obtain access to IoT service platforms is vulnerable to a social engineering attack
–
Attacker registers using a forged company (tax) ID and spoofed email address. Relaxed 
verification found with many providers
–
Receives SIM cards to a private(arbitrary) address and also access to service APIs
–
Now attacker has access to IoT platform cloud and data resources hosted on it
–
Attacker masquerades as a target company/industry while accessing the platform
–
Limitless API operations and probing to find vulnerabilities. No rate-limits in many 
platforms.
–
Lack of (strict) monitoring and logging facilities are added advantage for attacker
–
A strict KYC procedure should be implemented by both providers and operators.
Username and password policy for API authentication
Password creation, update, management are not compliant with GSMA guidelines1,2: 
–
Weak passwords are allowed (such a root, admin, iotadministrator) for credentials
–
Some don’t allow "few dictionary passwords” and have shortcomings"
–
Some restrict dictionary passwords during account creation, but allow them during password update
–
Fix: comply to best password practices
 * asdf1234, qwer1234, qwerty1234 -> weak password, not allowed
 * 1qaz2wsx -> top 100 weak password
 * iotadmin1 -> Set password error : This is similar to a commonly used password
 * iotuser1 -> Set password error : Add another word or two. Uncommon words are better.
 * iotuser10, Password1234, Administrator1 -> allowed
1. GSM Association. Iot security guidelines for network operators version 2.2, Section 5.8.4- Secure IoT Connectivity Management Platform
https://www.gsma.com/iot/wp-content/uploads/2020/05/CLP.14-v2.2-GSMA-IoT-Security-Guidelines-for-Network-Operators.pdf
2. Referring to section 6.11 of GSMA CLP.12 - Never allow a user to utilize a default, weak, or poorly designed password.
https://www.gsma.com/iot/wp-content/uploads/2016/02/CLP.12-v1.0.pdf
Token management
●
No OAuth based token generation in several platforms, 
●
Token expiry
–
Static API token (does not expire), should be revoked for every API user
–
24 hours to 1 week
●
Fix: Use standard approach of Oauth and JSON web tokens for authorization
1. 3GPP. Security aspects of Machine-Type Communications (MTC) and other mobile data applications communications enhancements. 
Technical Specification (TS) 33.187. Section 4.7 Requirements on T8 reference point 
https://www.etsi.org/deliver/etsi_ts/133100_133199/133187/16.00.00_60/ts_133187v160000p.pdf
2. 3GPP. Security aspects of Common API Framework (CAPIF) for 3GPP northbound APIs. Technical Specification (TS) 33.122, 3rd Generation 
Partnership Project.
Lack of rate limiting for API requests
Only 2 platforms have rate-limits for API requests
–
Test: Sending 250/500 valid GET/POST requests in short period
–
Using same IP address and user account for all requests
–
No backoff period or IP ban was observed from the API gateway
●
Did not receive any HTTP response like : 429 Too Many Requests
–
Some providers specify rate-limits in user manuals, but in practice they are unavailable
–
Fix: Rate limiting policies with random/exponential back-off timers
Private identifiers used inside IoT domain
ICCID, IMEI, and IMSI exposed outside of 3GPP domain (can be SUPI in 5G)
–
To access/indicate the SIM cards and IoT devices; convenient for developers and API users
–
Violates 3GPP privacy requirement 1 for Machine type communications using exposure services
–
Enables user/device enumeration
–
Fix: an identifier like General Purpose Subscriber Identifier (GPSI2) or other custom identifier. 
Avoid linking to any identifiers used over the radio interface.
●
An alphanumeric proprietary id and its mapping to IMSI is known only to the 
provider/operator.
1. 3GPP. Security aspects of Machine-Type Communications (MTC) and other mobile data applications communications enhancements. 
Technical Specification (TS) 33.187. Section 4.7 Requirements on T8 reference point 
https://www.etsi.org/deliver/etsi_ts/133100_133199/133187/16.00.00_60/ts_133187v160000p.pdf
2. 5G; Procedures for the 5G System (5GS) (3GPP TS 23.502 version 15.4.1 Release 15)
Verbose error messages
Easy user enumeration via probing with IMSI/ICCID/IMEI
–
Attacker can find existing and non-existing IMSIs registered on the platform/database from 
the different API error responses
–
Fix: The error can be very generic, such as, unauthorized.
IMSI doesn’t exist
IMSI exist
Internal software information exposed
Database software information exposed via error messages: Couchbase, Jboss
–
Platform deployment details are also exposed such cloud provider and etc.
–
Deprecated TLS versions are negotiable (TLS v1.2/1.0)
Internal node exposure
APIs leak Core network elements/gateway exposes internal SSH ports/interface
–
SSH Login attempt are made to an internal IoT node
–
Forged attacker can launch a bruteforce
–
Fix: configuration control and reduce exposure
Malware propagation inside user plane 
Allows malicious data1 (popular malware and binaries)
–
Inside 100 SMS, and IP payload
–
malware, spam and phishing content is allowed to propagate inside the mobile network and 
delivered to IoT devices
–
No spam detection filters 
–
Malware1 can be sent to arbitrary                                                                                                      
 IoT devices with authorization bypass
–
Operators argue that SMS and data                                                                        inspection is 
against law in some countries
1. https://www.kaspersky.com/resource-center/threats/sms-attacks 
Vulnerabilities in IoT service platforms (5)
(authorization, injection and code execution)
Broken authorization while sending downlink message
IP address not validated for /ping  API
–
The IoT user can send PING message using /ping  API to communicate with IoT devices over IP layer. 
●
User inputs Ipaddress of the target device that is assigned internally by the 4G/5G core
–
Due to an authorization bug in the platform, an attacker can insert a victim’s IPaddress  in the /ping API 
request and send to the IoT device
●
Required that target/victim device is hosted on the same IoT service platform
–
IoT device responds to ping operation (IPV4) with a ping reply. (upto 200 devices available)
–
Similarly, port scans can be performed on target device and inject malicious IP packets into the device.
–
Impact: 
●
increase data consumption over radio interface, billing and charging to victim’s account
●
battery drain for low-powered IoT devices, and eventually a DoS.
–
Fix: Strict authorization checks for every API parameter/object level.
Private details of SIM and customer are exposed over webhook
SIM PIN, PUK and subscriber details exposed
–
While sending SMS using API, the HTTP response sent to a user-defined Webhook (URL) 
exposes user’s private information
●
Private info: Billing details, subscriber plan and many other sensitive details linked to SIM 
card (identities, PIN1,PIN2, PUK, Opc, SQN, location, HLR ID).
●
Providers argue that some business cases require such sensitive information in the 
response
–
BGP hijacking1 to steal all the data exposed over a HTTP Webhook
–
Fix: use only HTTPS webhook, and eliminate sending SIM card private info to customer over the 
Internet
1. What is bgp hijacking? https://www.cloudflare.com/ko-kr/learning/security/glossary/bgp-hijacking
Access control misconfiguration
●
Sensitive Data (like SGSN IP address)
–
Visible to API user in restricted profile (even though view permissions unchecked by 
administrator)
–
API manual says sensitive data is accessible only 
to administrator, but fail to implement in practice
–
Other parameters may also be affected with 
access-control bug, but not verified
–
Discrepancies between API documentation and  
software implementation.
Script Injection
●
High probability for a code execution attack
–
Many parameters accept tampered and malicious inputs
–
Accepts commands and scripts as API objects
●
–
This may lead to persistent XSS and injection attacks
–
The injected values gets stored in backend DB
●
Can be called by another backend process
●
Or Customer management web application
–
Fix: strict input sanitization for each and every parameter
XSS execution
●
Code Injection
–
Via API on the service platform
–
 e.g., the Alias is an alternate name of the SIM 
card and can be given as input from the user
–
Allows script and arbitrary code
●
Code Execution
–
via the IoT connectivity management platform
–
Alias parameter is shared between both 
platforms and inject script is triggered on the web 
interface leading to code execution
–
With authorization bypass, attacker can inject 
code into another customer’s platform and trigger 
it
Responsible disclosure
●
Responsibly disclosed our findings to the affected IoT service providers and operators 
●
Received positive acknowledgments and confirmation of the vulnerabilities, and appreciation for 
our efforts to make the exposure services more secure. 
●
Operators confirmed that our testing methods never caused any damage to their services and 
infrastructure. 
●
Three of the tested service providers indicated that, injection vulnerabilities discovered in our 
findings remained hidden during their internal penetration testing exercise. 
●
We do not disclose any of the API and provider/operator names
Summary of security analysis
●
Oauth and TLS is used in majority of platform (5/9) but not all of them.
●
Only 2 out of 9 IoT platforms are not affected with serious vulnerabilities and API risks
●
IMSI is exposed outside of 3GPP network, same practice may apply for 5G IMSI (SUPI)
●
Lack of rate-limits, strong password policies
●
Internal software information and core network IP addresses are exposed
●
Authorization vulnerability can destroy the IoT devices and the network
●
Script/code injection vulnerability found in many platforms, and is missed when a internal pen-testing
●
SMS and IP content inspection is not present in mobile and IoT networks
●
Attacker can easily obtain access to IoT service platforms and service APIs with forged identity
Security measures
●
KYC – strict Know Your Customer check before issue access to IoT service platforms
●
Customized API design : limit the number of APIs available for each use-case or business 
partner – reducing attack surface
●
Reduced data exposure over several zones
–
Private identifiers like IMSI and SUPI should be replaced with random identifiers
–
Information sent over Webhook, in API responses, and error messages
●
Rate limits should be mandatory and smart algorithms to detect malicious behavior
●
Strict Input validation and sanitization for each every parameter taken as input from user
●
Analytics-based security including logging and real-time monitoring
Key takeaways
●
Opening new door on mobile networks – strict identity and access control, zero-trust
●
Standard Oauth and TLS mechanisms wont help achieve full security
●
Insecure API Design/Configuration = risk for mobile core and IoT devices
●
Telecom exposure API risks are new: application logic flaws – require rigorous application 
specific tests (not using general API security scanners)
●
Firewalls won’t always help – need security-by-design and testing into CI/CD pipelines
●
APIs in Telecom is new  and require a Telecom API top 10 to help developers and operators 
understand the security risks 
Questions? Concerns? Comments?
Write me:  
(PI:EMAIL)