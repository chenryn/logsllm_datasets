hugepages 表示大页面数  
总共大页面内存量为```hugepagesz * hugepages```，这里为3G  
例子：  
```  
menuentry 'CentOS Linux (3.10.0-693.5.2.el7.x86_64) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-3.10.0-693.el7.x86_64-advanced-d8179b22-8b44-4552-bf2a-04bae2a5f5dd' {  
        load_video  
        set gfxpayload=keep  
        insmod gzio  
        insmod part_msdos  
        insmod xfs  
        set root='hd0,msdos1'  
        if [ x$feature_platform_search_hint = xy ]; then  
          search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1 --hint='hd0,msdos1'  34f87a8d-8b73-4f80-b0ff-8d49b17975ca  
        else  
          search --no-floppy --fs-uuid --set=root 34f87a8d-8b73-4f80-b0ff-8d49b17975ca  
        fi  
        linux16 /vmlinuz-3.10.0-693.5.2.el7.x86_64 root=/dev/mapper/centos-root ro rd.lvm.lv=centos/root rhgb quiet LANG=en_US.UTF-8 numa=off transparent_hugepage=never default_hugepagesz=2M hugepagesz=2M hugepages=1536  
        initrd16 /initramfs-3.10.0-693.5.2.el7.x86_64.img  
}  
```  
重启系统（如果你不想重启系统而使用HUGE PAGE，使用这种方法即可```sysctl -w vm.nr_hugepages=1536``` ）  
但是修改默认的大页规格(2M or 1G)则一定要重启，例如：  
```  
numa=off transparent_hugepage=never default_hugepagesz=1G hugepagesz=2M hugepagesz=1G  
重启后就会变这样  
cat /proc/meminfo |grep -i huge  
AnonHugePages:         0 kB  
HugePages_Total:       0  
HugePages_Free:        0  
HugePages_Rsvd:        0  
HugePages_Surp:        0  
Hugepagesize:    1048576 kB  
```
申请132GB大页  
```
sysctl -w vm.nr_hugepages=132  
vm.nr_hugepages = 132  
```  
重启后可以使用```grep Huge /proc/meminfo```查看配置情况。看到下面的数据表示已经生效  
```  
HugePages_Total:    1536  
HugePages_Free:     1499  
HugePages_Rsvd:     1024  
HugePages_Surp:        0  
Hugepagesize:       2048 kB  
```  
数据库配置（如果你想好了非大页不可，就设置huge_pages为on，否则设置为try。on的情况下如果HUGE PAGE不够，则启动会报错。TRY的话，大页不够就尝试申请普通页的方式启动。）  
```  
postgresql.conf  
huge_pages = on  
shared_buffers = 2GB  # 使用2G内存，这个值需要小于总共大页面内存量  
```  
注意  
如果postgresql.conf配置huge_pages=on时，且shared_buffers值等于huge_page总内存量（```hugepagesz*hugepages```）时，数据库无法启动，报如下错误：  
```  
This error usually means that PostgreSQL's request for a shared memory segment exceeded available memory or swap space.   
```  
解决办法shared_buffers值要小于huge_page总内存量  
### libhugetlbfs  
安装libhugetlbfs可以观察大页的统计信息，分配大页文件系统，例如你想把数据放到内存中持久化测试。  
https://lwn.net/Articles/376606/  
```  
yum install -y libhugetlbfs*  
```  
### 直接mount hugetlbfs
https://www.ibm.com/developerworks/cn/linux/l-cn-hugetlb/index.html  
本文的例子摘自 Linux 内核源码中提供的有关说明文档 (Documentation/vm/hugetlbpage.txt) 。使用 hugetlbfs 之前，首先需要在编译内核 (make menuconfig) 时配置CONFIG_HUGETLB_PAGE和CONFIG_HUGETLBFS选项，这两个选项均可在 File systems 内核配置菜单中找到。  
内核编译完成并成功启动内核之后，将 hugetlbfs 特殊文件系统挂载到根文件系统的某个目录上去，以使得 hugetlbfs 可以访问。命令如下：  
```
mount none /mnt/huge -t hugetlbfs
```
此后，只要是在 /mnt/huge/ 目录下创建的文件，将其映射到内存中时都会使用 2MB 作为分页的基本单位。值得一提的是，hugetlbfs 中的文件是不支持读 / 写系统调用 ( 如read()或write()等 ) 的，一般对它的访问都是以内存映射的形式进行的。为了更好地介绍大页面的应用，接下来将给出一个大页面应用的例子，该例子同样也是摘自于上述提到的内核文档，只是略有简化。  
直接read,write会报错:   
```
mount none /mnt -t hugetlbfs
cd /mnt
[root@pg11-test mnt]# dd if=/dev/zero of=./test.img bs=1M count=1000
dd: error writing ‘./test.img’: Invalid argument
1+0 records in
0+0 records out
0 bytes (0 B) copied, 0.000605269 s, 0.0 kB/s
```
可以这样使用  
```
清单 1. Linux 大页面应用示例
 #include  
 #include  
 #include  
 #define MAP_LENGTH      (10*1024*1024) 
 int main() 
 { 
    int fd; 
    void * addr; 
    /* create a file in hugetlb fs */ 
    fd = open("/mnt/huge/test", O_CREAT | O_RDWR); 
    if(fd ](20180325_02_pdf_001.pdf)  
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/performance_tuning_guide/sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory-Configuring-huge-pages   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")