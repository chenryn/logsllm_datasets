is of paramount
importance to notify all corresponding entities for data cleanup
upon app uninstallation. Android strives to provide such a
guarantee by deleting app’s private folders when an app is
uninstalled, but this is only the easy part; the challenging part
is the data stored in system services.
What can go wrong Many things can go wrong in dealing
with data residues. First, as the residue removal logic is not
mandatory in the design of system services, not all system
services take the responsibility to remove data when an app
is uninstalled. For example, DownloadService is not even
aware of the app uninstallation, because it does not register
any handler to listen to the uninstallation event. Second,
some services do try to delete data residues, but fail to do
a complete job. For example, PrintService does react to
the uninstallation event, but it does not clean up the failed-
printing records made by the uninstalled app. Third, some
system services try to ﬁnd a new owner for data residues,
without understanding the potential security consequences.
What makes the situation even worse is that multiple
parties can jointly create data residues, and it
is unclear
who should take the responsibility to remove them during
the app uninstallation process. For example, when users need
to select a printing app to handle the printing job on the
device, they trigger the Settings app, which sends a request
to PrintService for the conﬁguration update. In this
case, three parties are involved: user, the Settings app and
PrintService, but when the printing app is uninstalled,
nobody takes the responsibility to remove the conﬁguration
3
Fig. 1: Methodology of Data Residue Study on Android System Services
entry, which now becomes a residue. This latter residue allows
a newly installed app with the same package name to become
the device’s default printing app, without user’s approval.
Another similar residue instance comes from TextService,
which allows malicious apps to monitor user’s keystrokes.
Android’s UID-permission security architecture prevents
unauthorized access to the data saved in system services, but
no study has provided a thorough understanding on whether
such a protection is still effective after the data’s owner is
uninstalled. We would like to ﬁll this void by performing a
systematic study to reveal the data residue instances in Android
and understand their security consequences. We exclude the
data intentionally left on devices, such as app’s backup data
and ﬁles on the shared external storage.
Assumption To conduct each attack, we assume the presence
of a malicious app installed on the victim’s Android devices.
These apps do not need special privileges. Actually, in all the
cases that we have discovered, the malicious app only needs
a subset of the target app’s permissions to perform the attack.
III. METHODOLOGY
We conducted our study in two phases: data residue harvest
and damage evaluation. Figure 1 depicts the ﬂow of our
methodology.
Data Residue Harvest To uncover data residues, we look
at two types of services, i.e., system services and the services
in pre-installed apps, because both of them are privileged. We
collect all available system services using the dumpsys utility
provided by the Android Debug Bridge (adb). At the same
time, we collect pre-installed apps’s services by parsing their
manifest ﬁles. We only focus on the services that are declared
as exposed (private services are not accessible to other apps).
We manually analyze the source code of these services
to identify data residues. Though static analysis seems like
an alternative solution, the existing tools [3], [16], [42], [44]
mostly stay at the app level and emulate system behaviors
based on extensive domain knowledge on Android framework.
In our analysis, the focus is on system behaviors, not on apps.
Each system service behaves differently and requires its own
domain knowledge, and manual code inspection seems like
the best option to gain this knowledge. Moreover, a signiﬁcant
percentage of system services are written using a mixture of
Java and C++ code, making automatic analysis even more
difﬁcult. Similarly, dynamic analysis [27], [37] does not ﬁt
our need either, as we have to manually identify all events
that could trigger data residue and the conditions could be a
combination of ﬂaws from multiple system services. Given the
small number of system services that we have to study, manual
analysis turns out to be a more viable approach.
Our manual analysis is conducted based on the following
two insights. First, we have observed that system services are
meant for serving multiple apps, so the data collected from
each app are clearly organized based on the owner app. This
is also necessary for protection, so one app cannot use the
data from another app. Files, database, and well-marked data
structures (e.g. Hashmap) are used to store app-speciﬁc data.
Using this clue, we focus on these data structures and File APIs
(which also cover database accesses). Second, the awareness
of app uninstallation is another clue. If a service is unaware of
app uninstallation, any saved data naturally become residue.
We also systematically examine corner situations that may
subvert data cleanup logic, like the AccountManager case
in Section IV-A.
Damage Evaluation
Having data residues does not nec-
essarily lead to security breaches, as long as the data are
well guarded and the protection is still effective even after
the owner is uninstalled. Though such a lifetime protection
is theoretically feasible, Android seems to be confused in
identifying the rightful owner of the residues. The main cause
of the confusion is the implicit assumptions that Android
made in its design. One of such assumptions made by system
services is that app’s identities are unique; so two entities with
the same identity (e.g. UID or package name) should belong
to the same app. It turns out that this assumption does not
hold when the state of the device changes. Our study attempts
to unveil these implicit assumptions and more importantly
examine their validity. We consider three operations that can
lead to device state changes: device reboot, app installation
and app uninstallation. We create scenarios to make those
assumptions false, and see how Android handles the data
residues in these conditions.
Once a data residue instance is found to be exploitable, we
conduct real-world attacks to measure all possible damages.
The design of each attack builds upon the architecture derived
from a comprehensive list of data operations. Inspired by the
read, write and execute permissions on the traditional UNIX
ﬁle system, we naturally test the accessibility, modiﬁability
and utilizability on each instance. One notable insight is that,
by the time of the exploit, the data owner has been uninstalled
already, thus, malware will be less interested in altering the
data content. However, it is of great importance to evaluate
whether the data residue, which was initially associated with
the uninstalled app, can be re-associated to another app.
IV. ATTACKS
We conducted our study on Android Lollipop (version
5.0.1) with a collection of 122 candidate service samples, in-
cluding 96 system services and 26 public system-app services.
The entire examination process (which took 6 person months)
includes data residue harvest and damage evaluation. Table I
4
Protec’on	
  Examina’on	
  Exploit	
  A2empts	
  Damage	
  Measurement	
  A2ack	
  Design	
  System	
  Service	
  Collec’on	
  Candidate	
  Database	
  Residue	
  Instances	
  Filtering	
  Manual	
  Analysis	
  Data	
  Residue	
  Harvest	
  Damage	
  Evalua’on	
  Feedback	
  Samples
(# Total/Candidate/Residue)
Category
Service Instances
Residues
Exploitable
Credential Residue
Capability Residue
AccountManager
User Credentials
Keystore
Clipboard
Public/Private Keypairs
URI
ActivityManager
PendingIntent

†








†

System Services
(96/96/10)
System-app Services
(161/26/2)
Settings Residue
History Residue
Permission Residue
TextService
DebugService
DreamService
TrustAgent
LocationManager
PrintService
User Selected
Components
Print/Download
DownloadService
PackageManager
Information
Permissions
† Resolved on Android Lollipop, but reproducible on KitKat and prior versions
TABLE I: Worrisome Data Residue Situation on Android System Services
summaries the study results. We are able to identify 12 data
residue instances, which account for 10% of the candidate
services. Technically, two of these 12 instances should be
considered as “re-discovered”. Apparently, Android Lollipop
tries to ﬁx the security problems caused by the residues in
the Download service and Keystore service, and its inline
comments led us to reproduce the attacks on Android KitKat
and prior versions. Such discoveries would not be possible
without analyzing the code. Those patched vulnerabilities, on
one hand, imply Google’s awareness of particular data residue
instances. On the other hand, they demonstrate the challenges
involved in automating the detection process, as Google fails to
address all instances. Due to the lack of a full understanding
of the data residue problem, Google even repeated the data
residue vulnerability in the newly introduced system service
called TrustAgent.
Based on the intention of the data, we group all residue
instances into ﬁve categories: Credential Residue, Capability
Residue, Settings Residue, Permissions Residue, and History
Residue. For each category, we examine its accessibility, mod-
iﬁability and utilizability. The examination process starts with
the residue detection, followed by hypotheses, and eventually
leads to individual experiment design. Since most of the data
residue instances identiﬁed were previously unknown, there
is no existing attack. Therefore, we designed experiments to
demonstrate the feasibility of exploits and show the potential
damage. To make attacks more realistic, as an important prin-
ciple in our experiment design, we avoid declaring suspicious
permissions in the attack apps. Actually, apps with desired
capability already exist in various app stores, as shown in
Section V, although they are not attempting any attacks simply
due to the lack of knowledge on the vulnerabilities discussed
in this paper.
In the following subsections, we will explain the technical
details of each attack and our experiment results. For the
successful attemtps, we further discuss their preconditions and
feasibility in real-world scenarios. Besides that, failed attacks
are also important pieces in our research process, as they show
how we systematically evaluate the potential damage for each
data residue instance. Despite the negative results, all failed
experiments are based on valid assumptions, and the insights
we learned from them are valuable.
A. Credential Stealing
The popularity of client-server apps on mobile platforms
brings in necessity in supporting secure authentication and
communication at the framework level. In response, Android
uses a system service called AccountManager to manage
user’s online account credentials; it uses another system service
called Keystore to store the public/private Keypairs for
secure communication. Both services store the user credentials
on behalf of apps. Although Android carefully restricts the
access to these sensitive credentials, both system services are
vulnerable to the data residue attack.
1) AccountManager: There are normally two ways for
Android apps to authenticate users’ online accounts. The ﬁrst
approach requires the client app to provide its own login
activity for users to type username and password. This is
a concern if the client app and the server do not belong
to the same party. Android provides an alternative approach
using the AccountManager framework, so the client app
can be authenticated to the server without knowing the user’s
credentials.
In this framework, the actual authentication is handled by
authenticators, which are installed on the device as trusted
apps. Each authenticator deﬁnes the account
type it can
support. For example, in Figure 2, App A is an authenti-
cator app that declares the account type “XYZ”. The client
app sends requests to AccountManager with the account
type it wants to authenticate with. The account type allows
AccountManager to select the corresponding authenticator.
In response, AccountManager presents a consent UI to
the user with information of the requesting app and the
authenticator. After user approval, if the corresponding account
has not been set up yet, AccountManager invokes the login
activity within the authenticator app. The user enters username
and password once per account into the authenticator, which
conducts the actual authentication logic with the remote server.
Upon a successful authentication, the authenticator usually
returns an OAuth token to AccountManager, which further
forwards the token to the requesting app.
5
Naturally, it can directly access that account’s credentials; the
same access from our malicious authenticator app will be
denied by AccountManager’s protection mechanism.
We then uninstalled myMail. Surprisingly, Android makes
our malicious app the owner of the account type, enabling it to
retrieve the user credentials for all the email accounts set up in
myMail, essentially letting our app inherit myMail’s creden-
tial residue. This security breach is in AccountManager’s
cleanup logic, which checks whether the account
type to
be cleaned up is declared by anyone else; if one is found,
AccountManager makes it the new owner of the account
type. The underlying assumption is that, those who declare the
same account type should belong to the same party (e.g. apps
with the same signature). Unfortunately, this assumption is not
guaranteed.
It should be noted that even if myMail only saves the
hash value of user credentials, it does not help much; be-
cause the attacker can simply copy the information into the
AccountManager’s database in his/her own rooted device.
As long as the app server does not associate hash value with
the device, attacker can still get control over the entire account.
Actually, myMail saves the hash of user’s Gmail account
password, but we were still able to login to that Gmail account
by replicating that hash value onto a different device.
Discussion
In order for the above attack to succeed, the
malicious authenticator needs to be installed after the target
one. This constraint is greatly relaxed, as each authenticator
can declare multiple account types, empowering one malicious
app to target multiple authenticators using one codebase. Once
the precondition is met, the malicious authenticator can behave
normally until the target one is uninstalled. Actually, we have
observed signiﬁcant improvements in AccountManager’s
security speciﬁcation in the upcoming Android Marshmal-
low [1].
2) Keystore: Android Keystore provides and stores
strong cryptographic keys to/for apps during the runtime; it
keeps tracks of the keys’ ownership using the app’s UID, so
an app cannot get other apps’ keys. In Figure 2, a Keypair
named “ABC” is created for app A with UID 10050, thus
App B cannot access the pem ﬁle because of UID mismatch.
Unfortunately, Android fails to clean up the Keypair after an
app is uninstalled. As a result, we suspect that, if a newly