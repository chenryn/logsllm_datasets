title:Small Changes, Big Changes: An Updated View on the Android Permission
System
author:Yury Zhauniarovich and
Olga Gadyatskaya
Small Changes, Big Changes: An Updated View
on the Android Permission System
Yury Zhauniarovich1(B) and Olga Gadyatskaya2(B)
1 Qatar Computing Research Institute, HBKU, Doha, Qatar
2 SnT, University of Luxembourg, Luxembourg City, Luxembourg
PI:EMAIL
PI:EMAIL
Abstract. Since the appearance of Android, its permission system was
central to many studies of Android security. For a long time, the descrip-
tion of the architecture provided by Enck et al. in [31] was immutably
used in various research papers. The introduction of highly anticipated
runtime permissions in Android 6.0 forced us to reconsider this model.
To our surprise, the permission system evolved with almost every release.
After analysis of 16 Android versions, we can conﬁrm that the modiﬁ-
cations, especially introduced in Android 6.0, considerably impact the
aptness of old conclusions and tools for newer releases. For instance,
since Android 6.0 some signature permissions, previously granted only
to apps signed with a platform certiﬁcate, can be granted to third-party
apps even if they are signed with a non-platform certiﬁcate; many per-
missions considered before as threatening are now granted by default. In
this paper, we review in detail the updated system, introduced changes,
and their security implications. We highlight some bizarre behaviors,
which may be of interest for developers and security researchers. We also
found a number of bugs during our analysis, and provided patches to
AOSP where possible.
Keywords: Android security · Permission system · Runtime permis-
sions · Compatibility challenges
1 Introduction
Nowadays, Android is the dominating smartphone operating system. It occupied
more than 80 % of the total smartphone market share in 2015 [20]. Furthermore,
Android is truly ubiquitous existing in the Auto, TV, and Wear ﬂavors. More-
over, many other types of devices, e.g., cameras or game consoles, run tweaked
Android ﬁrmware [17]. Overall, more than 1.4 billion active devices are currently
powered by Android [14]. This huge user-base was achieved by Google thanks
We thank the anonymous reviewers for their comments that allowed to improve the paper. We are
also very grateful to William Enck for shepherding the paper and suggesting many improvements
to it. The work of Olga Gadyatskaya was supported by the Luxembourg National Research Fund
(C15/IS/10404933/COMMA).
c(cid:2) Springer International Publishing Switzerland 2016
F. Monrose et al. (Eds.): RAID 2016, LNCS 9854, pp. 346–367, 2016.
DOI: 10.1007/978-3-319-45719-2 16
An Updated View on the Android Permission System
347
to, among all, frequent updates of the operating system that keep introducing
new features and improving performance.
Yet, the wide landscape of device types and platform versions gives rise to
compatibility challenges. While the latest devices are relatively well-updated,
others can be left behind, or even never updated after the release. For instance,
Google reported that 2.6 % of devices that had visited the Google Play Store in
March 2016 ran Android 2.3 released in 2011 [13]. At the same time, third-party
applications are typically updated frequently, yet some of them are unsupported
by the developers after a while. Therefore, there is a high fragmentation of the
eco-system, and many problems, including security ones, emerge due to discrep-
ancies in update cycles of the platform and apps.
The Android permission system regulating access of apps to device capabil-
ities and system components, such as telephony, ﬁle system, sensors, networks,
etc., is a crucial part of the Android security model. Not surprisingly, from
the beginning it was, and still is, central to many studies of Android security
(it is featured in [23,25,28,31,33,35,41,45,46,49,50,52,53], to mention a few).
However, only some of them acknowledged that the permission system was not
stable. Among those, an early investigation by Enck, Ongtang and McDaniel [31]
reported on the substantial shift introduced to the permission system across the
earliest Android releases. Since that time, the vast majority of Android studies
still rely on the same understanding introduced in this seminal paper.
The emergence of runtime permissions in Android 6.0 forced us to
take a closer look at the permission system design. In this paper we analyze the
changes in the permission system introduced in the last 6 years and provide an
updated view on the current architecture of the Android permission system since
its description in [31]. We reveal the core changes that need to be considered
during the security analysis, the main of which are the following:
– Runtime permissions. In Android 6.0, permissions are divided into install-
time and runtime. Normal and signature (with some exceptions) permissions
are permanently assigned upon the app installation, while dangerous permis-
sions are now granted at runtime, and the user may revoke them at any time.
– Runtime permissions are granted on the group basis. If an app requires
runtime permissions related to the same permission group, once one of them
is granted, others are granted as well. Instead of enabling more ﬁne-grained
control of dangerous functionality, Android 6.0 does the opposite.
– Some signature permissions can be obtained by third-party appli-
cations. The Android community is used to consider signature permissions
to be install-time granted to apps that have the same digital signature as
the package declaring the permission. However, several new types of signature
permissions appeared in Android that can be obtained by third-party apps
not conforming to this condition.
– The signature|system protection level is deprecated. Currently, the
signature|system protection level is marked as deprecated and should not be
used neither for custom (third-party), nor for platform permissions.
348
Y. Zhauniarovich and O. Gadyatskaya
– Some dangerous permissions are now granted without user’s con-
sent. In Android 6.0, 22 permissions, previously considered as sensitive, are
granted by default and the user cannot revoke them in any way. For instance,
the INTERNET, BLUETOOTH, NFC permissions are now automatically granted at
app installation. Previously they had to be approved by the user.
Considering the aforementioned modiﬁcations, it is clear that the Android
community needs to update its view on the permission system and to evalu-
ate security implications of the changes. To address this need, in this paper we
present an updated security architecture of the system and important internal
details of its implementation. Furthermore, to assess the compatibility challenges
implications, we performed a thorough longitudinal study of the Android per-
mission system that yielded many interesting ﬁndings, e.g.,:
– Even though the signature|system protection level is deprecated, permissions
of this level still exist in the system. Moreover, 9 permissions of this type were
added in the Android 6.0 release itself. We have submitted to Google several
patches to ﬁx this issue in Android Open Source Project (AOSP), and some
of them have already been merged into the master branch.
– The runtime permissions have backward compatibility issues. Developers that
expect their apps to run on older platform versions are still required to make a
runtime check for permissions. However, the permissions that did not exist on
some platform version are always denied (while they should not be required
at all). We have found 8 such permissions, e.g., ADD VOICEMAIL.
– Some non-dangerous permissions are assigned to permission groups,
although there is no reason for this. We found 8 such permissions, e.g.,
USE FINGERPRINT. We consider these to be coding nits that could be ﬁxed
by Google developers.
Our ﬁndings emphasize considerable ﬂaws that emerged due to the high
change rates in the permission system design. Considering the aforementioned
discrepancies in update cycles of platforms and apps, it is time for the security
community to re-evaluate the attack surface of the Android permission system.
Roadmap. Section 2 outlines the established view on the Android permission
system. Section 3 incrementally updates this view, while Sect. 4 gives internal
details of the permission system implementation. Section 5 presents our quan-
titative analysis of evolution in the permission system, and Sect. 6 presents the
key ﬁndings of our qualitative study. Finally, Sect. 7 discusses related work, and
Sect. 8 concludes the paper.
2 The Established View on the Permission System
By default, all Android apps are executed as low-privileged processes at the
Linux kernel level. Thus, every app has access only to a limited set of system
capabilities. At the same time, to be fully-functional an app should be able
to interact with other applications and obtain data from various system ser-
vices (e.g., location or telephony) running in other processes. To enable these
An Updated View on the Android Permission System
349
interactions, Android provides a special inter-component communication (ICC)
protocol called Binder. Certainly, these communications should not be arbitrary,
i.e., only approved interactions must be possible within the system. The Android
permission system provides such access control mechanism. Permissions, which
are unique security labels, are assigned to sensitive resources. Once an app is
granted with the permission, it receives access to the corresponding protected
object, otherwise interactions with the resource are prohibited.
A permission must be declared by the developer in the AndroidManifest.xml
ﬁle of the app (in the special permission tag) and assigned to the protected
resource (either in the manifest ﬁle or by performing corresponding checks in
the code). Once declared, other packages may ask for access to the object by
requesting the corresponding permission using the uses-permission tag of their
own AndroidManifest.xml ﬁle. Platform permissions are declared within the
Android operating system itself: either in the Android framework or in the pack-
ages supplied with the platform. Third-party app developers may also declare
their own custom permissions and use them to protect sensitive components of
their apps.
Upon declaration, any Android permission is assigned with a protection level.
It deﬁnes what apps can be granted with the corresponding permissions, and how
this process occurs. Starting with Android 0.9 [31], permissions were divided into
4 levels: normal, dangerous, signature and signature|system. According to the
established permission system view, the least sensitive normal permissions were
granted automatically to any app declaring these permissions, while more sensi-
tive dangerous permissions were granted only after user’s explicit consent during
app installation. If the user wanted to refuse even a single permission, the appli-
cation would not be installed on the device. Signature permissions were granted
only if packages declaring the permission and using it are signed with the same
certiﬁcate. Finally, permissions of the signature|system protection level acted like
signature permissions, but could be additionally granted to apps installed into
the system partition. Thus, prior to Android 6.0 all permissions were granted or
denied once and for all at the installation time.
A permission can belong to a permission group that clusters together secu-
rity labels according to particular functionality. Permission groups were mainly
introduced to simplify the presentation by grouping permissions together. Yet,
before Android 6.0 groups were not widely adopted in the “vanilla” Android,
although they were used in the Google Play client application.
This vision of the Android permission system migrated for a long time from
one research paper to another. In the meanwhile, the system did not stand still,
but continuously changed all that time. However, the modiﬁcations were not
that crucial, and remained mostly unnoticed.
3 New Android Permission System Overview
In Android 6.0, all permissions are divided into installation and runtime.
Roughly, this division occurs in the following way: normal, signature and signa-
ture|system permissions are permanently granted upon the app installation (yet,
350
Y. Zhauniarovich and O. Gadyatskaya
(a)
(b)
(c)
(d)
Fig. 1. Screenshots: (a) Permission request during installation of legacy applications
in Android 6.0; (b) Screen to grant or revoke “appop” permission; (c) Separate screens
are developed for core permission groups to grant and revoke permissions; (d) List of
additional permissions.
with some exceptions considered further), while dangerous permissions are now
checked at runtime. The signature|system protection level is deprecated start-
ing Android 6.0 and should not be used [12]. However, our analysis of permissions
deﬁned in the platform code shows that such permissions are still abundant (see
Sects. 5 and 6 for more details).
Previously, dangerous permissions were to be approved by the user in the
special screen shown during app installation. Once approved, the app could be
instantly used and the user did not deal with permissions anymore. In Android
6.0, the screen to grant runtime permissions is not shown (for apps targeting
API 23 and up). Instead, all runtime permissions after installation are in the
disabled state and must be approved by the user once the app needs access to
the protected functionality.
To support runtime permissions, special protected API calls were added to
PackageManager allowing to grant and revoke permissions dynamically. Addi-
tionally, new APIs were added allowing app developers to check at runtime if
permissions are granted and to request them if necessary [19]. Within the Set-
tings app, the users are provided with two screens to review, grant and revoke
runtime permissions: on the ﬁrst screen permissions are grouped on per app
basis, on the second – per permission group.
Obviously, new applications must be forward compatible with the older
Android versions, because only a small fraction of devices runs the newest
Android (in April 2016 only 5 % of devices ran Android 6.x [13]). To ensure
compatibility, Google provided a special compatibility library that proxies the
calls for checking granted permissions (ContextCompat.checkSelfPermission).
However, this proxy call must still rely underneath on the permission check func-
tionality available in the previous releases, which, not surprisingly, is based on
An Updated View on the Android Permission System
351
the Context.checkPermission API call. In previous Android versions permis-
sions are granted upon installation, thus, the check will always pass, and new
runtime permission request functionality will not be called. However, we found
out that this functionality does not always work as expected (see Sect. 6).
Backward compatibility of legacy apps with the new version of Android is pro-
vided through the AppOps system allowing users to grant and revoke permissions
at runtime through a dedicated user interface within the Settings system appli-
cation. It shares the same interface with the runtime permission manager. This
hidden app permission manager unoﬃcially appeared in Android 4.3. Unfortu-
nately, access to this component was suppressed in Android 4.4.2 and reappeared
only in Android 6.0. However, AppOps handles only platform permissions and,
thus, cannot enforce custom dangerous permissions declared by a developer.
Upon installation of a legacy app through the installer on device the user is
still presented with the “old” grant permission screen (see Fig. 1(a). The user
must agree with the presented permissions, or the app will not be installed. This
behavior diﬀers from the one of the apps targeting Android 6.0, what results in
some user experience inconsistencies. We describe them in details in Sect. 6.
Runtime permissions are granted per permission groups, i.e., if one per-
mission from a group is granted or revoked, the same happens for all permissions
in this group. For instance, if an app is granted with the READ CONTACTS per-
mission, it automatically receives WRITE CONTACTS (if requested), because they
both belong to the CONTACTS permission group. Android 6.0 deﬁnes nine permis-
sion groups for dangerous permissions: CALENDAR, CAMERA, CONTACTS, LOCATION,
MICROPHONE, PHONE, SENSORS, SMS, STORAGE. While the app developers still have
to declare permissions from these groups individually, the end-users only grant or
revoke access per permission groups, and they are oblivious to which individual
permissions the app requests.
Before it was assumed that third-party applications cannot obtain any sig-
nature permission if they are not signed with the same certiﬁcate. Yet, in
Android 6.0 new permissions called appop were added. These signature per-
missions (PACKAGE USAGE STATS, WRITE SETTINGS and SYSTEM ALERT WINDOW)
can now be granted to third-party apps after an explicit user’s consent through
Settings.
We continue to explore the changes to the Android permission system and
their implications for security analysis in Sect. 6.
4 Permission System Implementation Details
The behavior of permissions is controlled through assigning special string values
to the attributes (android:protectionLevel and android:permissionFlags)
upon permission declaration in the AndroidManifest.xml ﬁle. During the instal-
lation of a package, these values are parsed inﬂuencing on the bits of two 32-bit
integer ﬁelds (protectionLevel and flags) of the PermissionInfo class. This
section reviews how the bits of these two ﬁelds aﬀect the permissions behavior.
352
Y. Zhauniarovich and O. Gadyatskaya
I
D
E
L
L
A
T
S
N
E
R
P
_
G
A
L
F
16
...
T
N
E
M
P
O
L
E
V
E
D
_
G
A
L
F
R
E
L
L
A
T
S
N
_
G
A
L
F