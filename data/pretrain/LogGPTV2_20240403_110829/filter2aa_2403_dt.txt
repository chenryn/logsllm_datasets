          lea  
edx, DWORD PTR [rax-1] 
; idle instruction: EAX will be reset at the next instructions execution' 
          mov  
eax, edx 
; load character at address s[str_len-1] 
          movzx  eax, BYTE PTR [rdx+rcx] 
; save also pointer to the last character to R8 
          lea  
r8, QWORD PTR [rdx+rcx] 
          cmp  
al, 13 ; is it '\r'? 
          je   
SHORT $LN2@str_trim 
          cmp  
al, 10 ; is it '\n'? 
          jne  
SHORT $LN15@str_trim 
$LN2@str_trim: 
; store 0 to that place 
          mov  
BYTE PTR [r8], 0 
          mov  
eax, edx 
; check character for 0, but conditional jump is above... 
          test  
edx, edx 
          jmp  
SHORT $LN18@str_trim 
$LN15@str_trim: 
; return "s" 
          mov  
rax, rcx 
          ret  
0 
str_trim ENDP 
第一个特征就是 MSVC 编译器对字符串长度函数 strlen()进行了内联（inline）式的展开和嵌入处理。
编译器认为，内联处理后的执行效率会比常规的函数调用（call）的效率更高 。有关内联函数可以参考本
书的第 43 章。 
内嵌处理之后，strlen()函数的第一个指令是：OR RAX,0xffffffffffffffff。我们不清楚为何 MSVC 采用
OR（或）指令，而没有采用 MOV RAX, 0xffffffffffffffff 指令直接赋值。当然，这两条指令执行的是相同操
作：将所有位设置为 1。因此这个数值就是赋值为−1。可以参考本书的第 30 章。 
你也可能会问，为什么 strlen()函数会用到−1 这个数。当然是出于优化的目的。这里我们列出了 MSVC
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 47 章  字符串剪切 
487 
的编译代码。 
指令清单 47.2  x64 下的 MSVC 2013 的内嵌函数 strlen() 
; RCX = pointer to the input string 
; RAX = current string length 
          or   
rax, -1 
label: 
          inc  
rax 
          cmp  
BYTE PTR [rcx+rax], 0 
          jne  
SHORT label 
; RAX = string length 
如果把这个变量的初始值设置为 0，那么是否可以把代码压缩得更短一些呢？我们可以来试试。 
指令清单 47.3  我们的 strlen()字符串长度函数版本 
; RCX = pointer to the input string 
; RAX = current string length 
          xor  
rax, rax 
label: 
          cmp  
byte ptr [rcx+rax], 0 
          jz   
exit 
          inc  
rax 
          jmp  
label 
exit: 
; RAX = string length 
我们没能成功。因为我们不得不加入了一个额外的指令：JMP 跳转指令。 
在使用“－1”作为初始值之后，MSVC 2013 随即在加载字符的指令之前分配了一个 INC 指令。如果
第一个字符是 0（终止符），那么 RAX 就直接为 0，返回的字符串长度还会是 0。 
函数中的其余部分还是很好懂的。当然在程序的最后有另外一个技巧。除去那些内联之后的 strlen()函
数的展开代码，整个函数就只有 3 个条件指令。其实，从道理上讲这里应该有 4 个转移指令：第 4 个应当
位于函数的结尾部分，用于检查当前字符是不是 0。然后这段代码使用了一个跳转到“$LN18@str_trim”
标签的无条件转移指令，而这个标签后面的第一个指令就是条件转移指令 JE。编译器用这种指令组用来判
断输入的字符串是不是空字符串（当前字符是不是终止符），而且直接就是在 strlen()执行结束后。所以这
里使用 JE 指令有两个目的。这也许杀鸡用宰牛刀，但是无论如何，MSVC 就是这样做的。 
要想提示程序性能，就应当尽量脱离条件转移指令进行程序作业。有关详情请参阅本书第 33 章。 
47.2  x64 下采用编辑器 GCC 4.9.1 进行非优化操作 
str_trim: 
          push  
rbp 
          mov  
rbp, rsp 
          sub  
rsp, 32 
          mov  
QWORD PTR [rbp-24], rdi 
; for() first part begins here 
          mov  
rax, QWORD PTR [rbp-24] 
          mov  
rdi, rax 
          call  
strlen 
          mov  
QWORD PTR [rbp-8], rax  
; str_len 
; for() first part ends here 
          jmp  
.L2 
; for() body begins here 
.L5: 
          cmp  
BYTE PTR [rbp-9], 13  
; c=='\r'? 
          je   
.L3 
          cmp  
BYTE PTR [rbp-9], 10  
; c=='\n'? 
          jne  
.L4 
.L3: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
488 
逆向工程权威指南（下册） 
          mov  
rax, QWORD PTR [rbp-8]  
; str_len 
          lea  
rdx, [rax-1]  
; EDX=str_len-1 
          mov  
rax, QWORD PTR [rbp-24]  ; s 
          add  
rax, rdx   
; RAX=s+str_len-1 
          mov  
BYTE PTR [rax], 0  
; s[str_len-1]=0 
; for() body ends here 
; for() third part begins here 
          sub  
QWORD PTR [rbp-8], 1  
; str_len-- 
; for() third part ends here 
.L2: 
; for() second part begins here 
          cmp  
QWORD PTR [rbp-8], 0  
; str_len==0? 
          je   
.L4   
; exit then 
; check second clause, and load "c" 
          mov  
rax, QWORD PTR [rbp-8]  
; RAX=str_len 
          lea  
rdx, [rax-1]  
; RDX=str_len-1 
          mov  
rax, QWORD PTR [rbp-24]  ; RAX=s 
          add  
rax, rdx   
; RAX=s+str_len-1 
          movzx  eax, BYTE PTR [rax]   
; AL=s[str_len-1] 
          mov  
BYTE PTR [rbp-9], al  
; store loaded char into "c" 
          cmp  
BYTE PTR [rbp-9], 0   
; is it zero? 
          jne  
.L5   
; yes? exit then 
; for() second part ends here 
.L4: 
; return "s" 
          mov  
rax, QWORD PTR [rbp-24] 
          leave 
          ret 
笔者在程序中增加了注释。执行完长度计算函数 strlen()后，控制权将传递给标号为 L2 的语句。接着
注意检查两个条件表达式。如果第一判断条件表达式为真，也就是说如果长度为 0（str_len 的值为 0），那
么计算机将不再检测第二个条件判断表达式。这种特性又称为“逻辑短路”。 
概括地说，这个函数的执行流程如下： 
 运行 for()语句的第一部分，也就是调用 strlen()函数的循环初始化指令。 
 跳转到标号 L2；检测循环条件是否成立。 
 跳转到标号 L5，进入循环体； 
 再执行 for()语句，如果条件不成立，则直接退出。 
 执行 for()语句的第三部分，将变量 str_len 递减。 
 再次跳转到标号 L2，检测循环条件是否成立、进入循环……周而复始，直到循环条件不成立。 
 跳转到 L4 标号，准备退出。 
 制备返回值，即变量 s。 
47.3  x64 下的 GCC 4.9.1 优化 
str_trim: 
          push  
rbx 
          mov  
rbx, rdi 
; RBX will always be "s" 
          call  
strlen 
; check for str_len==0 and exit if its so' 
          test  
rax, rax 
          je   
.L9 
          lea  
rdx, [rax-1] 
; RDX will always contain str_len-1 value, not str_len 
; so RDX is more like buffer index variable 
          lea  
rsi, [rbx+rdx]   
; RSI=s+str_len-1 
          movzx  ecx, BYTE PTR [rsi]  ; load character 
          test  
cl, cl 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 47 章  字符串剪切 
489 
          je   
.L9   
; exit if its zero' 
          cmp  
cl, 10 
          je   
.L4 
          cmp  
cl, 13  
; exit if its not' '\n' and not '\r' 
          jne  
.L9 
.L4: 
; this is weird instruction. we need RSI=s-1 here. 
; its possible to get it by' MOV RSI, EBX / DEC RSI 
; but this is two instructions instead of one 
          sub  
rsi, rax 
; RSI = s+str_len-1-str_len = s-1 
; main loop begin 
.L12: 
          test  
rdx, rdx 
; store zero at address s-1+str_len-1+1 = s-1+str_len = s+str_len-1 
          mov  
BYTE PTR [rsi+1+rdx], 0 
; check for str_len-1==0. exit if so. 
          je   
.L9 
          sub  
rdx, 1  
; equivalent to str_len-- 
; load next character at address s+str_len-1 
          movzx  ecx, BYTE PTR [rbx+rdx] 
          test  
cl, cl  
; is it zero? exit then 
          je   
.L9 
          cmp  
cl, 10  
; is it '\n'? 
          je   
.L12 
          cmp  
cl, 13  
; is it '\r'? 
          je   
.L12 
.L9: 
; return "s" 
          mov  
rax, rbx 
          pop  
rbx 
          ret 
GCC 的实现方式更为复杂。在循环体执行前的代码只执行一次，而且它还会检查结束符是不是回车和
换行 CR/LF。这难道不是多此一举吗？ 
一般来说，实现主循环体的流程是这样的： 
① 循环开始，检查 CR/LF 结束符，进行判断。 
② 保存零字符。 
但是，GCC 编译器会将这两步逆序执行。因此，第一步肯定不会是保存零字符，而是进行下述判断： 
① 看看第一个字符是不是 CR/LF,如果不是的话，就会退出。 
② 循环开始，保存零字符。 
③ 根据检查字符是不是 CR/LF 来决定程序的执行。 
这样处理之后，主循环体就小了很多，更适用于目前的 CPU 了。这种代码的中间变量不是 str_len，而是
str_len-1。或许是因为后者更适用于用作缓冲区型数据的索引标号（数组下标）。很明显，GCC 注意到了，
str_len-1 使用了两次。因此最好的办法是分配一个变量，其值总是比目前的字符串的长度小 1，然后再将
其递减（按照变量 str_len 的递减方式递减）。 
47.4  ARM64：非优化的 GCC（Linaro）4.9 
它将生成近乎“一一对应”的汇编指令。具体代码如下所示。 
指令清单 47.4  非优化的GCC（Linaro
①
① Linaro 是一家开源的基于 ARM 操作平台的组织，由多家业内公司联合成立。其开发了 ARM 开发工具、Linux 内核以及 Linux
发行版（包括 Android 及 Ubuntu）的主要自动建构系统。 
）4.9 
str_trim: 
          stp  
x29, x30, [sp, -48]! 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
490 
逆向工程权威指南（下册） 
          add  
x29, sp, 0 
          str  
x0, [x29,24] ; copy input argument into local stack 
          ldr  
x0, [x29,24] ; s 
          bl   
strlen 
          str  
x0, [x29,40] ; str_len variable in local stack 
          b   
.L2 
; main loop begin 
.L5: 