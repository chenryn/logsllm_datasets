# Memento
Category: Programming, 200 Points
## Description
> My good friend Leonard created this game.
> Leonard told me he hid a flag inside, but doesnâ€™t remember exactly how.
> 
> He also gave me the code of the server, so you can take a look.
> 
> The flag is in the format CSA{...}
> 
> The only possible characters inside {} are lowercase english letters and _ (no numbers, no uppercase, no special characters).
> 
> You have only 5 attempts for submitting the flag.
A Python file with the server implementation was attached:
```python
import flag, shortest_path
import random, json, base64
def verify_game(board, level):
    card_number = random.randint(1, 20)
    board_obj = base64.b64decode(json.loads(board))
    indexes = []
    for i in range(5):
        for j in range(8):
            if board_obj[i][j] == card_number:
                indexes.append([i, j])
    shortest = shortest_path(indexes[0], indexes[1], board, "UP|DOWN|LEFT|RIGHT")
    shortest = shortest.length - 1
    result = 0
    if shortest == (flag[level] % 9) + 1:
        result = 1
    return result
```
## Solution
We visit the attached website and get a simple 8x5 memory game:
![](images/memento.png)
Digging into the Javascript sources, we find the following implementation:
```javascript
import React, { useEffect, useState } from 'react';
import './index.css';
const Game = () => {
    const [board, setBoard] = useState(null);
    const [openCount, setOpenCount] = useState(0);
    const [disableClick, setDisableClick] = useState(false);
    const [game, setGame] = useState(null);
    const [boardRevealed, setBoardRevealed] = useState([
        [false, false, false, false, false],
        [false, false, false, false, false],
        [false, false, false, false, false],
        [false, false, false, false, false],
        [false, false, false, false, false],
        [false, false, false, false, false],
        [false, false, false, false, false],
        [false, false, false, false, false],
    ])
    const [level, setLevel] = useState(0);
    const words = ['Cow', 'Rabbit', 'Duck', 'Pig', 'Lion', 'Goat', 'Crab', 'Deer', 'Bee', 'Sheep', 'Fish', 'Dove', 'Chicken', 'Horse', 'Dog', 'Cat', 'Mouse', 'Turtle', 'Monkey', 'Elephant']
    const create_game = async (level) => {
        let result = '0'
        let game = [
            [],
            [],
            [],
            [],
            [],
        ]
        while (result !== '1') {
            const pool = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20]
            game = [
                [],
                [],
                [],
                [],
                [],
            ]
            for (var i = 0; i  {
        if (level  {
        const oldOpenCount = openCount;
        const newOpenCount = checkOpenCardsCount(boardRevealed, true);
        setOpenCount(newOpenCount)
        if (newOpenCount !== 0 && newOpenCount > oldOpenCount) {
            if (newOpenCount % 2 === 0) {
                const openCards = getOpenCards();
                let matchedCards = [];
                openCards.forEach((card1) => {
                    openCards.forEach((card2) => {
                        if (card1 !== card2 &&
                            board[card1[1]][card1[0]] === board[card2[1]][card2[0]]
                            // && checkIfMatchedAlready(matchedCards, [card2, card1])) {
                        ) {
                            matchedCards.push([card1, card2]);
                        }
                    })
                })
                matchedCards = removeOppositeDuplicates(matchedCards);
                const unMatchedCards = []
                openCards.forEach((card) => {
                    const isMatched = checkIfCardMatched(matchedCards, card);
                    if (!isMatched) unMatchedCards.push(card);
                });
                if (unMatchedCards.length > 0) {
                    setDisableClick(true);
                    setTimeout(() => {
                        setDisableClick(false);
                        setCardsUnrevealed(unMatchedCards);
                    }, 1500);
                }
            }
            if (newOpenCount === words.length * 2) {
                setLevel(level + 1)
                setGame(null);
            }
        }
    }, [boardRevealed])
    useEffect(() => {
        setGame(renderGame());
        setAllCardsUnrevealed();
    }, [board])
    const removeOppositeDuplicates = (matchedCards) => {
        const newMatchedCards = [];
        matchedCards.forEach((pair1) => {
            let found = false;
            newMatchedCards.forEach((pair2) => {
                if (
                    (pair1[0][0] === pair2[0][0] && pair1[0][1] === pair2[0][1] && pair1[1][0] === pair2[1][0] && pair1[1][1] === pair2[1][1]) ||
                    (pair1[0][0] === pair2[1][0] && pair1[0][1] === pair2[1][1] && pair1[1][0] === pair2[0][0] && pair1[1][1] === pair2[0][1])
                ) {
                    found = true;
                }
            });
            if (!found) newMatchedCards.push(pair1)
        })
        return newMatchedCards;
    }
    const checkIfCardMatched = (matchedCards, card) => {
        let isMatched = false;
        matchedCards.forEach((mCard) => {
            mCard.forEach((index) => {
                if (index[0] === card[0] && index[1] === card[1]) isMatched = true;
            })
        })
        return isMatched;
    }
    const getOpenCards = () => {
        const openCards = []
        for (var i = 0; i  {
        let count = 0;
        for (let i = 0; i  {
        if (!disableClick) {
            const boardRevealedTemp = [...boardRevealed];
            boardRevealedTemp[i][j] = true;
            setBoardRevealed(boardRevealedTemp);
        }
    }
    const setCardsUnrevealed = (cards) => {
        const boardRevealedTemp = [...boardRevealed];
        cards.forEach((card) => {
            boardRevealedTemp[card[1]][card[0]] = false;
        })
        setBoardRevealed(boardRevealedTemp);
    }
    const setAllCardsUnrevealed = () => {
        const cardsArr = []
        for(var i = 0; i  {
        return ( {
            setCardRevealed(i, j)
        }}>x)
    }
    const renderRevealedCard = (i, j) => {
        return ({words[board[i][j] - 1]})
    }
    const renderGame = () => {
        const renderedGame = []
        for (var j = 0; j {renderedCards});
        }
        return {renderedGame}
    }
    return game === null ? 
    level Loading game... : You win!Now try and get the flag... 
    : Level {level + 1}{renderGame()};
}
export default Game;
```
The interesting part is this one, as it interacts with the server-side logic we got:
```javascript
const create_game = async (level) => {
        let result = '0'
        let game = [
            [],
            [],
            [],
            [],
            [],
        ]
        while (result !== '1') {
            const pool = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20]
            game = [
                [],
                [],