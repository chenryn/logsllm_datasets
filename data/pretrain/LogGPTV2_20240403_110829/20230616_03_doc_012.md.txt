# PostgreSQL 逻辑备份

## 目标
- 逻辑备份概述
- 使用 `pg_dump` 进行备份
- 使用 `pg_dumpall` 进行备份
- 使用 `COPY` 命令进行数据迁移

## 导出和导入工具

### PostgreSQL 数据库导出
- **工具**：`pg_dump` 和 `pg_dumpall`
- **恢复工具**：`psql` 和 `pg_restore`

### 导出和导入概述
PostgreSQL 提供了多种实用程序，可以执行以下操作：
- 归档历史数据
- 保存表定义以防止用户出错
- 在计算机和数据库之间或不同版本的 PostgreSQL 服务器之间移动数据
- 在数据库之间传输数据

### 调用导出和导入程序的方法
- **命令行接口**
- **其他管理工具**

## 导出模式
- **`pg_dump`**：仅备份单个数据库，不包括角色和表空间信息。恢复时需要创建一个空数据库。
- **`pg_dumpall`**：备份所有数据库，并包括角色和表空间信息。
  - `-F c`：二进制格式，压缩存储，可被 `pg_restore` 用于精细还原。
  - `-F p`：文本格式，不推荐用于大数据库。

### 调用 `pg_dump`
- **语法**：
  ```sh
  pg_dump [选项]... [数据库名字]
  ```
- **示例**：
  ```sh
  pg_dump testdb > testdb.sql
  pg_dump -F c -f testdb.dmp -C -E UTF8 -h 127.0.0.1 -U postgres testdb
  pg_dump -F p -f testdb.sql -C -E UTF8 -h 127.0.0.1 -U postgres testdb
  ```

## 逻辑恢复
### 恢复顺序
1. 创建新表
2. 导入数据
3. 建立索引
4. 导入触发器
5. 启用完整性约束
6. 创建函数

### 恢复数据
- **文本格式备份恢复方式**：
  1. 创建新数据库
     ```sql
     CREATE DATABASE new_db1;
     ```
  2. 恢复数据
     ```sh
     psql new_db1 < testdb.sql
     ```
- **排除指定表的备份**：
  ```sh
  pg_dump -d testdb -T "emp" > testdb_ex_emp.sql
  ```

## 数据库间迁移
### 使用 `pg_dump` 实现主机间数据库迁移
- **文件不落地，实现数据库迁移**：
  1. 配置两个数据库之间的信任关系（必须）
     ```sh
     host all all 192.168.18.0/24 trust
     ```
  2. 在数据库之间进行某个数据库迁移
     ```sh
     pg_dump -h pg1 -p 1922 -U postgres testdb | psql -h pg2 -p 5432 -U postgres testdb
     ```
  3. 迁移所有的数据库到目标数据库
     ```sh
     pg_dumpall -h pg1 -p 1922 -U postgres | psql -h pg2 -p 5432 -U postgres
     ```

**注意**：
1. PostgreSQL 数据库之间迁移无需配置 `dblink`，只需指定主机名和端口即可。
2. 由于使用管道符，必须配置两个数据库的远程登录信任关系。
3. 迁移时两个数据库必须有相同的表空间，需要提前创建。

## `COPY` 命令
### 概述
- `COPY` 命令用于数据库中表与操作系统文件（以及标准输出、标准输入）之间的相互拷贝。
- 可以从表到文件，也可以从文件到表。
- 比 Oracle 的 `sqlloader` 更易用。

### 语法
- **文件到表**：
  ```sql
  COPY table_name [ ( column ... ) ]
  FROM { 'filename' | command' | STDIN }
  [ [ WITH ] ( option [, ...] ) ]
  ```
- **表到文件**：
  ```sql
  COPY { table_name ( column_name, ... ) | ( query ) }
  TO { 'filename' | PROGRAM 'command' | STDOUT }
  [ [ WITH ] ( option [, ...] ) ]
  ```

### 应用案例
- **文件到表**：
  - **Tab 制表符分隔**：
    ```sh
    \copy tab_name from /home/postgres/tab.txt;
    ```
  - **逗号分隔**：
    ```sh
    \copy tab_name from /home/postgres/tab.csv with csv;
    ```

- **表到文件**：
  - **Tab 制表符分隔**：
    ```sh
    \copy tab_name to /home/postgres/tab.txt;
    ```
  - **逗号分隔**：
    ```sh
    \copy tab_name to /home/postgres/tab.csv with csv;
    ```

## 总结
- **逻辑备份概述**
- **`pg_dump` 使用**
- **`pg_dumpall` 使用**
- **`COPY` 使用**

## 练习
1. 使用 `pgbench` 生成测试数据
2. 使用 `pg_dump` 导出数据
3. 使用 `pg_restore` 创建 TOC 文件
4. 修改 TOC 文件，调整恢复顺序，注释某些表
5. 使用 TOC 文件恢复，观察恢复顺序和内容是否符合 TOC 的配置