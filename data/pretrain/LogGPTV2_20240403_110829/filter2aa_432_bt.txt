ret = insertw_1 ( arg, handle ) ;
- 276 -
Linux网络编程
return ret==0?0:*ret ;
}
/*********************************************************
deletew  客户端的过程接口,调用 insertw_1           *
 *********************************************************/
int deletew ( const char* word )
{
char **arg ;
arg = (char**)&word ;
ret = deletew_1 ( arg, handle ) ;
return ret==0?0:*ret ;
}
/*********************************************************
lookupw  客户端过程接口,调用 insertw_1           *
 *********************************************************/
int lookupw ( const char* word )
{
char **arg ;
arg = &word ;
ret = insertw_1 ( arg, handle ) ;
return ret==0?0:*ret ;
}
下面我们在来看看服务器端的接口例程：
在服务器端，接口例程接受来自 rpcgen 所产生的通信 stub 的调用，并将控制权传递给
实现这个指定调用的过程。如同客户机端那样，服务器端接口例程必须吧参数由 rpcgen 所
选择的类型变为被调用过程所使用的类型。在大多数情况下，这种差异在于一种间接方式：
rpcgen 传递的是指向一个对象的指针，而不是对象本身。为了转换一个参数，接口过程只
需要使用 C 的见解运算符（*）。文件 rdict_sif.c 展示了这个概念。它包含了字典程序的服
务器端的接口例程。
/* rdict_sif.c 包含 init_1, insert_1, delete_1, lookup_1 过程 */
#include 
#include “rdict.h”
static
int
retcode ;
/*********************************************************
insertw_1_svc  服务器端接口: insertw 过程                *
 *********************************************************/
int *insertw_1_svc ( char **w, struct svc_req *rqstp )
{
retcode = insertw ( *w ) ;
第十二章  远程过程调用
- 277 -
return &retcode ;
}
/*********************************************************
initw_1  服务器端接口: initw 过程                *
 *********************************************************/
int *initw_1_svc ( void *p, struct svc_req *rqstp )
{
retcode = initw () ;
return &retcode ;
}
/*********************************************************
deletew_1  服务器端接口: deletew 过程                *
 *********************************************************/
int *deletew_1_svc ( char **w, struct svc_req *rqstp )
{
retcode = deletew ( *w ) ;
return &retcode ;
}
/*********************************************************
lookupw_1  服务器端接口: lookupw 过程                *
 *********************************************************/
int *lookupw_1_svc ( char **w, struct svc_req *rqstp )
{
retcode = lookupw ( *w ) ;
return &retcode ;
}
6．编译并链接客户机程序
在客户机借口例程编写完成并放到一个源文件后，它们就可以被编译了。例如：文件
rdict_cif.c 中包含了字典例子中所有的接口例程。在 Linux 系统下，这样编译：
gcc –c rdict_cif.c
编译器产生输出文件 rdict_cif.o。为了完成客户机，程序员需要在最初的主程序中加入
一点新的细节，因为新版本使用了 RPC，程序需要针对 RPC 声明的 C 的 include 文件。它
还需要包含文件 rdict.h，这是因为该文件包含了客户机和服务器都要使用的常量定义。
客户机程序还需要声明并初始化一个句柄（handle），RPC 通信例程用该句柄和服务器
通信。多数客户机使用已定义的类型 CLIENT 声明这个句柄，并且通过调用 RPC 例程库
clnt_create 来初始化这个句柄。文件 rdict.c 展示了这些必要的代码：
/* rdict.c  包含 main 和 nextin 过程 */
#include 
#include 
#include 
#include 
- 278 -
Linux网络编程
#include 
#include “rdict.h”
/* 每一个输入的命令的最大长度 */
#define MAXWORD 50
/* 远程主机的名字 */
#define RMACHINE “localhost”
/* 远程过程的句柄 */
CLIENT *handle ;
int nextin ( char* cmd, char* word) ;
int initw() ;
int insertw ( const char* word ) ;
int deletew ( const char* word ) ;
int lookupw ( const char* word ) ;
/* 主函数,进行各种操作 */
int
main ( int argc, char* argv[] )
{
/* 从命令行取得命令的变量 */
char word [ MAXWORD + 1 ] ;
char cmd ;
/* 输入单词的长度 */
int
wrdlen ;
handle = clnt_create ( RMACHINE, RDICTPROG, RDICTVERS, “tcp” ) ;
if ( 0 == handle )
{
printf ( “Could not contact remote program. \n” ) ;
exit ( 1 ) ;
}
while ( 1 )
{
wrdlen = nextin ( &cmd, word ) ;
if ( wrdlen 
#include 
#include 
#include 
#include 
#include “rdict.h”
/* 字典的数据存取数组 */
char dict[DICTSIZ][MAXWORD+1] ;