                    0x599B5C1213A099ACL,
                    0x5A5BD85C072E5EFEL,
                    0x5AB0CB3071AB40D1L,
                    0x5D74D3E5B9370476L,
                    0x5D92E6DDDE40ED84L,
                    0x5F215622FB630753L,
                    0x62DB241274397C34L,
                    0x63A220E60A17C7B9L,
                    0x665C53C311193973L,
                    0x6749835432E0F0D2L,
                    0x6A47501EBB2AFDB2L,
                    0x6FCABF6FA54CAFFFL,
                    0x746BD4A53EC195FBL,
                    0x74B50BB9260E31FFL,
                    0x75CC60F5871D0FD3L,
                    0x767A586A5107FEEFL,
                    0x7AA7EE3627A19CF3L,
                    0x7ED9311D28BF1A65L,
                    0x7ED9481D28BF417AL
            };
Fastjson在1.2.42开始就把原本明文的黑名单改成了哈希过的黑名单，防止安全研究者对其进行研究：  
Fastjson在1.2.61开始把黑名单从十进制数变成了十六进制数，以此来防止安全研究者进行搜索：  
Fastjson在1.2.62开始，  
Git记录十进制和小写的十六进制数，不记录大写的十六进制数，网上没找到类似的仓库，为了弄清楚每个hash到底对应的是什么，GitHub上有人写了一个轮子来跑了一波，不过目前已经很久没有更新了：  
下面我们接着来看，之后分别从getClassFromMapping、deserializers、typeMapping、internalWhite内部白名单中查找类，如果开启了expectClass期望类还要判断类型是否一致，可以到这里还未出现"autoTypeSupport"的判断，当已经可以返回clazz(示例类)了：
    clazz = TypeUtils.getClassFromMapping(typeName);
            if (clazz == null) {
                clazz = deserializers.findClass(typeName);
            }
            if (clazz == null) {
                clazz = typeMapping.get(typeName);
            }
            if (internalWhite) {
                clazz = TypeUtils.loadClass(typeName, defaultClassLoader, true);
            }
            if (clazz != null) {
                if (expectClass != null
                        && clazz != java.util.HashMap.class
                        && !expectClass.isAssignableFrom(clazz)) {
                    throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
                }
                return clazz;
            }
这里的getClassFromMapping在com.alibaba.fastjson.util.TypeUtils#addBaseClassMappings被赋值，添加了一些基本类，后续被当作缓存使用
    private static void addBaseClassMappings(){
            mappings.put("byte", byte.class);
            mappings.put("short", short.class);
            mappings.put("int", int.class);
            mappings.put("long", long.class);
            mappings.put("float", float.class);
            mappings.put("double", double.class);
            mappings.put("boolean", boolean.class);
            mappings.put("char", char.class);
            mappings.put("[byte", byte[].class);
            mappings.put("[short", short[].class);
            mappings.put("[int", int[].class);
            mappings.put("[long", long[].class);
            mappings.put("[float", float[].class);
            mappings.put("[double", double[].class);
            mappings.put("[boolean", boolean[].class);
            mappings.put("[char", char[].class);
            mappings.put("[B", byte[].class);
            mappings.put("[S", short[].class);
            mappings.put("[I", int[].class);
            mappings.put("[J", long[].class);
            mappings.put("[F", float[].class);
            mappings.put("[D", double[].class);
            mappings.put("[C", char[].class);
            mappings.put("[Z", boolean[].class);
            Class[] classes = new Class[]{
                    Object.class,
                    java.lang.Cloneable.class,
                    loadClass("java.lang.AutoCloseable"),
                    java.lang.Exception.class,
                    java.lang.RuntimeException.class,
                    java.lang.IllegalAccessError.class,
                    java.lang.IllegalAccessException.class,
                    java.lang.IllegalArgumentException.class,
                    java.lang.IllegalMonitorStateException.class,
                    java.lang.IllegalStateException.class,
                    java.lang.IllegalThreadStateException.class,
                    java.lang.IndexOutOfBoundsException.class,
                    java.lang.InstantiationError.class,
                    java.lang.InstantiationException.class,
                    java.lang.InternalError.class,
                    java.lang.InterruptedException.class,
                    java.lang.LinkageError.class,
                    java.lang.NegativeArraySizeException.class,
                    java.lang.NoClassDefFoundError.class,
                    java.lang.NoSuchFieldError.class,
                    java.lang.NoSuchFieldException.class,
                    java.lang.NoSuchMethodError.class,
                    java.lang.NoSuchMethodException.class,
                    java.lang.NullPointerException.class,
                    java.lang.NumberFormatException.class,
                    java.lang.OutOfMemoryError.class,
                    java.lang.SecurityException.class,
                    java.lang.StackOverflowError.class,
                    java.lang.StringIndexOutOfBoundsException.class,
                    java.lang.TypeNotPresentException.class,
                    java.lang.VerifyError.class,
                    java.lang.StackTraceElement.class,
                    java.util.HashMap.class,
                    java.util.Hashtable.class,
                    java.util.TreeMap.class,
                    java.util.IdentityHashMap.class,
                    java.util.WeakHashMap.class,
                    java.util.LinkedHashMap.class,
                    java.util.HashSet.class,
                    java.util.LinkedHashSet.class,
                    java.util.TreeSet.class,
                    java.util.ArrayList.class,
                    java.util.concurrent.TimeUnit.class,
                    java.util.concurrent.ConcurrentHashMap.class,
                    java.util.concurrent.atomic.AtomicInteger.class,
                    java.util.concurrent.atomic.AtomicLong.class,
                    java.util.Collections.EMPTY_MAP.getClass(),
                    java.lang.Boolean.class,
                    java.lang.Character.class,
                    java.lang.Byte.class,
                    java.lang.Short.class,
                    java.lang.Integer.class,
                    java.lang.Long.class,
                    java.lang.Float.class,
                    java.lang.Double.class,
                    java.lang.Number.class,
                    java.lang.String.class,
                    java.math.BigDecimal.class,
                    java.math.BigInteger.class,
                    java.util.BitSet.class,
                    java.util.Calendar.class,
                    java.util.Date.class,
                    java.util.Locale.class,
                    java.util.UUID.class,
                    java.sql.Time.class,
                    java.sql.Date.class,
                    java.sql.Timestamp.class,
                    java.text.SimpleDateFormat.class,
                    com.alibaba.fastjson.JSONObject.class,
                    com.alibaba.fastjson.JSONPObject.class,
                    com.alibaba.fastjson.JSONArray.class,
            };
            for(Class clazz : classes){
                if(clazz == null){
                    continue;
                }
                mappings.put(clazz.getName(), clazz);
            }
        }
这里可以先注意下java.lang.AutoCloseable类，deserializers.findClass在com.alibaba.fastjson.parser.ParserConfig#initDeserializers处被初始化，这里也是存放了一些特殊类用来直接反序列化：
    private void initDeserializers() {
            deserializers.put(SimpleDateFormat.class, MiscCodec.instance);
            deserializers.put(java.sql.Timestamp.class, SqlDateDeserializer.instance_timestamp);
            deserializers.put(java.sql.Date.class, SqlDateDeserializer.instance);
            deserializers.put(java.sql.Time.class, TimeDeserializer.instance);
            deserializers.put(java.util.Date.class, DateCodec.instance);
            deserializers.put(Calendar.class, CalendarCodec.instance);
            deserializers.put(XMLGregorianCalendar.class, CalendarCodec.instance);
            deserializers.put(JSONObject.class, MapDeserializer.instance);
            deserializers.put(JSONArray.class, CollectionCodec.instance);
            deserializers.put(Map.class, MapDeserializer.instance);
            deserializers.put(HashMap.class, MapDeserializer.instance);
            deserializers.put(LinkedHashMap.class, MapDeserializer.instance);
            deserializers.put(TreeMap.class, MapDeserializer.instance);
            deserializers.put(ConcurrentMap.class, MapDeserializer.instance);
            deserializers.put(ConcurrentHashMap.class, MapDeserializer.instance);
            deserializers.put(Collection.class, CollectionCodec.instance);
            deserializers.put(List.class, CollectionCodec.instance);
            deserializers.put(ArrayList.class, CollectionCodec.instance);
            deserializers.put(Object.class, JavaObjectDeserializer.instance);
            deserializers.put(String.class, StringCodec.instance);
            deserializers.put(StringBuffer.class, StringCodec.instance);
            deserializers.put(StringBuilder.class, StringCodec.instance);
            deserializers.put(char.class, CharacterCodec.instance);
            deserializers.put(Character.class, CharacterCodec.instance);
            deserializers.put(byte.class, NumberDeserializer.instance);
            deserializers.put(Byte.class, NumberDeserializer.instance);
            deserializers.put(short.class, NumberDeserializer.instance);
            deserializers.put(Short.class, NumberDeserializer.instance);
            deserializers.put(int.class, IntegerCodec.instance);
            deserializers.put(Integer.class, IntegerCodec.instance);
            deserializers.put(long.class, LongCodec.instance);
            deserializers.put(Long.class, LongCodec.instance);
            deserializers.put(BigInteger.class, BigIntegerCodec.instance);
            deserializers.put(BigDecimal.class, BigDecimalCodec.instance);
            deserializers.put(float.class, FloatCodec.instance);
            deserializers.put(Float.class, FloatCodec.instance);
            deserializers.put(double.class, NumberDeserializer.instance);
            deserializers.put(Double.class, NumberDeserializer.instance);
            deserializers.put(boolean.class, BooleanCodec.instance);
            deserializers.put(Boolean.class, BooleanCodec.instance);
            deserializers.put(Class.class, MiscCodec.instance);
            deserializers.put(char[].class, new CharArrayCodec());
            deserializers.put(AtomicBoolean.class, BooleanCodec.instance);
            deserializers.put(AtomicInteger.class, IntegerCodec.instance);
            deserializers.put(AtomicLong.class, LongCodec.instance);
            deserializers.put(AtomicReference.class, ReferenceCodec.instance);
            deserializers.put(WeakReference.class, ReferenceCodec.instance);
            deserializers.put(SoftReference.class, ReferenceCodec.instance);
            deserializers.put(UUID.class, MiscCodec.instance);
            deserializers.put(TimeZone.class, MiscCodec.instance);
            deserializers.put(Locale.class, MiscCodec.instance);
            deserializers.put(Currency.class, MiscCodec.instance);
            deserializers.put(Inet4Address.class, MiscCodec.instance);
            deserializers.put(Inet6Address.class, MiscCodec.instance);
            deserializers.put(InetSocketAddress.class, MiscCodec.instance);
            deserializers.put(File.class, MiscCodec.instance);
            deserializers.put(URI.class, MiscCodec.instance);
            deserializers.put(URL.class, MiscCodec.instance);
            deserializers.put(Pattern.class, MiscCodec.instance);
            deserializers.put(Charset.class, MiscCodec.instance);
            deserializers.put(JSONPath.class, MiscCodec.instance);
            deserializers.put(Number.class, NumberDeserializer.instance);
            deserializers.put(AtomicIntegerArray.class, AtomicCodec.instance);
            deserializers.put(AtomicLongArray.class, AtomicCodec.instance);
            deserializers.put(StackTraceElement.class, StackTraceElementDeserializer.instance);
            deserializers.put(Serializable.class, JavaObjectDeserializer.instance);
            deserializers.put(Cloneable.class, JavaObjectDeserializer.instance);
            deserializers.put(Comparable.class, JavaObjectDeserializer.instance);
            deserializers.put(Closeable.class, JavaObjectDeserializer.instance);
            deserializers.put(JSONPObject.class, new JSONPDeserializer());
        }
这里的typeMapping默认为空需要开发自己赋值，形如
    ParserConfig.getGlobalInstance().register("test", Model.class);
这里的internalWhite为内部白名单也就是之前提到的部分，到这里已经可以返回实例类了，之后我们继续来看后续的代码，可以看到这里会判断autoType是否开启，如果开启AutoType则会进行黑白名单匹配，如果在黑名单内则直接抛出异常，如果在在白名单内且expectClass不为NULL则还需要判断类型是否一致，如果不满足条件则抛出异常，否则就可以返回实例类了：
    if (!autoTypeSupport) {
                long hash = h3;
                for (int i = 3; i = 0) {
                        throw new JSONException("autoType is not support. " + typeName);
                    }
                    // white list
                    if (Arrays.binarySearch(acceptHashCodes, hash) >= 0) {
                        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, true);
                        if (expectClass != null && expectClass.isAssignableFrom(clazz)) {
                            throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
                        }
                        return clazz;
                    }
                }
            }
之后检查使用注解JSONType的类(有注解的类一般都是开发自行写的JavaBean)
    boolean jsonType = false;
            InputStream is = null;
            try {
                String resource = typeName.replace('.', '/') + ".class";
                if (defaultClassLoader != null) {