title:TimeVM: a framework for online intrusion mitigation and fast recovery
using multi-time-lag traffic replay
author:Khalid Elbadawi and
Ehab Al-Shaer
TimeVM: A Framework for Online Intrusion Mitigation and
Fast Recovery Using Multi-Time-Lag Trafﬁc Replay
Khalid Elbadawi
School of Computing
DePaul University
Chicago, IL 60604
PI:EMAIL
Ehab Al-Shaer
School of Computing
DePaul University
Chicago, IL 60604
PI:EMAIL
ABSTRACT
Network intrusions become a signiﬁcation threat to network
servers and its availability. A simple intrusion can suspend
the organization’s network services and can lead to a ﬁnan-
cial disaster. In this paper, we propose a framework called
TimeVM to mitigate, or even eliminate, the infection of a
network intrusion on-line as fast as possible. The frame-
work is based on the virtual machine technology and traﬃc-
replay-based recovery. TimeVM gives the illusion of “time
machine”. TimeVM logs only the network traﬃc to a server
and replays the logged traﬃc to multiple “shadow” virtual
machines (Shadow VM) after diﬀerent time delays (time
lags). Consequently, each Shadow VM will represent the
server at diﬀerent time in history. When attack/infection
is detected, TimeVM enables navigating through the traf-
ﬁc history (logs), picking uninfected Shadow VM, removing
the attack traﬃc, and then fast-replaying the entire traﬃc
history to this Shadow VM. As a result, a typical up-to-date
uninfected version of the original system can be constructed.
The paper shows the implementation details for TimeVM.
It also addresses many practical challenges related to how
to conﬁgure and deploy TimeVM in a system in order to
minimize the recovery time. We present analytical frame-
work and extensive evaluation to validate our approach in
diﬀerent environments.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection—Invasive software; D.4.8
[Operating System]: Performance—modeling and predic-
tion
General Terms
Design, security, virtual machine, traﬃc replay, performance
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’09, March 10–12, 2009, Sydney, NSW, Australia.
Copyright 2009 ACM 978-1-60558-394-5/09/03 ...$5.00.
Keywords
intrusion, mitigation, replay, recovery
1.
INTRODUCTION
A simple intrusion can cause an organization to suspend
its network activities and subsequently lead to a ﬁnancial
disaster. To increase system availability, many organiza-
tions deploy ﬁrewalls and intrusion detection systems (IDS)
for the purpose of blocking or detecting attacks [13]. How-
ever, due to the existence of novel attacks, unknown vul-
nerabilities, or misconﬁguration in ﬁrewall or IDS devices,
the possibility of successful attack and hence system un-
availability is signiﬁcantly high. Therefore, a quick response
to eliminate - or even mitigate - the attack’s infection and
recover the system is necessary for all critical services.
To achieve the above goal, log-replay technique can be
used. In which, a snapshot of the current system state is
captured at speciﬁc times, and the system events and states
are recorded in a log ﬁle. A replay process uses the snapshot
along with the information logged to replay the sequence
of states/events a system passed through during execution.
Once the replay process is done, the system is recovered.
Log-replay-based recovery can be utilized to improve the
network service availability. Upon detecting the attack and
discovering its sources, one can roll-back the system execu-
tion to an earlier point and extract the cause of infection.
This technique has a great merit that it does not require a
complete awareness of the attack, such as zero-day attack.
Several researchers have focused on log-replay-based re-
covery [11, 8, 15, 18, 21]. However, these works are limited
because they were designed for debugging or software failure.
Another problem with most of these techniques is that they
require OS modiﬁcations or a speciﬁc hardware platform in
order to log all system events in kernel [6] and process lev-
els [10, 7, 9]. This is not only complex and expensive, but
it also requires very large log ﬁles.
Log-replay-based recovery is usually implemented in vir-
tual machines. Virtualization has been used extensively in
the area of fault-tolerance, security, and system recovery.
This is because virtualization has several advantages that
make it better suited for providing reliability and security [3,
20]. One advantage is that virtualization provides a strong
isolation between virtual machines. If an operating system
has been compromised by an attack, the whole processes are
then compromised. However, with virtualization, if a virtual
machine (VM) has been compromised, other VMs that run
other applications will continue to run without any serious
135threat. Another advantage is that it is much easier to ma-
nipulate the state of a virtual machine than the state of a
physical machine. The state of the virtual machine can be
saved, cloned, encrypted, migrated, and restored, none of
which is easy to do with physical machines.
In this paper, we propose an approach for log-replay-based
recovery called TimeVM. TimeVM consists of a set of identi-
cal virtual machines. Also, rather than logging system stats
and events, TimeVM logs only the network traﬃc. The traf-
ﬁc logged is sent (as a replay) to these virtual machines in
diﬀerent time window. This means that these machines rep-
resent multiple historical snapshots of the original virtual
machine at diﬀerent times in the past. If the original ma-
chine has been contaminated, there is at least one virtual
machine in the history that is not contaminated yet. The
steps of system recovery are performed as follows. (i) Rolling
back by selecting a clean virtual machine, (ii) extracting the
infected traﬃc, and (iii) rolling forward by replaying the en-
tire traﬃc to the selected virtual machine. As a result, a
typical up-to-date uninfected version of the original system
has been constructed.
There are several challenges in designing and conﬁguring
TimeVM. The ﬁrst challenge is how to replay the network
traﬃc successfully. The second challenge is how to determine
the suitable number of virtual machines we need and how
to space them such that the recovery time is minimum. We
formulate this issue as an optimization problem and we use
an available evolutionary algorithm to solve it. TimeVM
can be deployed for many network servers such as HTTP
web server, SMTP server, Telnet Server, etc.
The rest of the paper is organized as follows. Section 2
summarizes some of the previous works on log-replay-based
recovery along with some other techniques for improving the
availability of network services. Section 3 gives a high level
overview of TimeVM. The analytical model and formulation
of recovery time optimization problem is presented in section
4. In section 5, we give a detailed view on TimeVM imple-
mentation. In section 6, we evaluate our framework using
diﬀerent conﬁguration. Finally, we conclude in section 7.
2. RELATED WORK
In literature, there are several techniques in software fail-
ure and attack mitigation in order to provide high system
availability. We ﬁrst discuss those techniques that are re-
lated on log-replay-based recovery and then we discuss other
techniques that improve the availability of network services.
Instant Replay [11] is a general replay for parallel pro-
grams. It logs the relative order of signiﬁcant events as they
occur without logging the data associated with such events.
In the same track, Flashback [18] is a lightweight operating
system that provides ﬁne-grained replay capability at the
application level. It uses shadow processes to roll back in-
memory state of a process at speciﬁc execution point, and log
a process’ interactions with system to support deterministic
replay. The purpose of Flashback is to help debug software.
Both techniques are limited on the application level.
Flight Data Recorder (FDR) [21] is an oﬄine full-system
recovery that replays the last one second of execution before
a crash. FDR continuously logs all the inputs coming into
the system, such as I/O, interrupts, DMA transfers. This
approach is not suitable for long-run system, such as network
servers.
BugNet [15] focuses on replaying only user programs and
shared libraries to ﬁnd application level bugs.
It logs the
register ﬁle contents at any point in time, and the load values
that occur after that point. This allows BugNet to collect
enough information to perform deterministic of program’s
execution, without having to replay what goes on during
interrupts and system calls. The disadvantage of BugNet is
that it is limited on application level.
Revirt [8] is a logging and replay system that runs on a
VM. If an attack is detected, Revirt can replay the whole
system for analyzing the intrusion. Revirt is implemented
in a speciﬁed virtual machine called UMLinux.
ExecRecorder [7] is a full-system replay for post-attack
analysis and recovery. It has the capability to replay the exe-
cution of an entire system by checkpointing the system state
and logging architectural nondeterministic events. However,
ExecRecorder is implemented only in a uniprocessor system.
Moreover, the log ﬁle size varies from one system to another.
In our approach, the log ﬁle depends on the traﬃc load.
TimeVM does not log the payload of its packet. It only logs
the payload of client packets. This makes our log ﬁle very
small compared to other techniques.
Dunlap et al. published a new system called SMP-Revirt
[9]. SMP-Revirt is also a full system log and replay on multi-
processor virtual machine that is capable to run on commod-
ity hardware. It utilizes hardware page protections to detect
races between virtual CPUs. Although SMP-Revirt system
can recover the entire system, it requires a huge amount of
storage space. As they reported, 300GB disk can be ﬁlled
in few days.
TCP or connection migration is another dimension to pro-
vide high availability for network services. Snoeren et al.
[17] uses TCP migration options to record the TCP state
for connection resumption. Their approach inserts a HTTP-
aware module between the application and the transport lay-
ers to log the inter-layer interactions. The disadvantage of
this approach is that it requires a modiﬁcation to the TCP
implementations. Migratory TCP [19] and Ray et al.
[16]
allow online connections to be migrated from one server to
another server. When a server is under an attack, the migra-
tion process is triggered, which causes the client to reconnect
to a replica server. The drawback of these two techniques is
that it requires an extension protocol in both sides.
3. TIMEVM ARCHITECTURE
3.1 System Overview
In this section, we give a high level view of our proposed
framework architecture. Before describing TimeVM compo-
nents, we ﬁrst need to describe the idea behind it. TimeVM
is based on virtual machine technology and log-replay-based
recovery. It can be used to provide high availability for net-
work services, such as HTTP, FTP, SMTP, etc. TimeVM
requires that the network services should be installed on a
virtual machine. This virtual machine will be cloned into
several virtual machines. Moreover, TimeVM records all
traﬃc between the original VM and clients, and keeps it in
a special ﬁle called traﬃc log. The recorded traﬃc will be
sent by several replay processes to the cloned virtual ma-
chines in diﬀerent times. In other words, each cloned VM
receives the same traﬃc that was received by the original
VM but after a predeﬁned time period called time lag.
Now, If an attack occurred to the original virtual machine
and it has been detected and discovered after a time say T ,
136Figure 1: Framework Architecture
then TimeVM will perform the following actions.
It trig-
gers all replay processes that are conﬁgured with a time lag
greater than T to accelerate the process of packet replaying.
It invokes a cleanup process to remove all virtual machines
that have a time lag less than T . When all recorded traﬃc
have been replayed, TimeVM reconﬁgures the system such
that the nearest cloned VM becomes the original VM, the
next nearest cloned VM becomes the ﬁrst cloned VM, and
so forth. Finally, TimeVM creates new virtual machines (as
a duplication of the new original VM) to substitute the re-
moved ones and conﬁgures them with an appropriate time
lag. It is worth to mention that the information about the
source of the attack (such as IP address and/or port num-
ber) will be provided to the replay processes so as to prevent
sending the infected traﬃc back again to the cloned VM’s.
Figure 1 illustrates the main components of TimeVM. The
framework is composed of a gateway server and several vir-
tual machines. One virtual machine will be used to represent
the original VM. We will call this virtual machine the Live
VM. Other virtual machines that are a duplication of the
Live VM are called the Shadow VMs. Note that all these
virtual machines - the Live VM and the Shadow VMs - are
hidden from the outside world. Clients cannot connect to
the Live VM directly; instead they can only connect to the
gateway server. In other words, when a client sends a re-
quest to the gateway server, the server in turn forwards the
request to the Live VM. When the server receives back the
response of the Live VM, it will deliver it to that partic-
ular client. The client will see that the request has been
processed by the gateway server and not by the Live VM.
The gateway server is a Linux server and it runs three
processes: TimeVM Manager, Network Distributor Daemon
(NetDd) and Replay process. TimeVM Manager is respon-
sible to manage and control NetDd and Replay processes.
It is also responsible to communicate with each virtual ma-
chine in the system. NetDd is responsible to log and redirect
the traﬃc between the Live VM and clients. It is acting as
a transparent NAT server. Replay process is responsible
to send/replay the logged traﬃc to a Shadow VM. There
are several replay processes and each one is associated with
a single Shadow VM. The implementation details of these
processes will be given in section 5.
NetDd and Replay processes share a common ﬁle, which
is the traﬃc log. The format of the log ﬁle is quite similar to
the libpcap ﬁle format in the sense that each packet has two
records: the packet header and the packet data as shown in
Figure 2. The packet header consists of the following ﬁelds:
Figure 2: Log ﬁle format
packet timestamp, packet length, and packet source. Packet
timestamp records the time when this packet is captured,
and it plays a very important role when packets are replayed.
Packet length represents the total length of the packet data.
Packet source indicates whether this packet comes from a
client or from the Live VM. We need this ﬁeld because it
facilitates the work of the replay process. From Figure 2,
SERVER means that the source IP address is belonging to the
Live VM, and CLIENT means that the source IP address is
belonging to a client machine.
The content of packet data depends on the packet source.
If the packet comes from a client then the packet data will
consist of the following information:
IP header, protocol
header (such as TCP, ICMP), and payload. However, if
the packet comes from the Live VM, then the packet data
will consist only of IP header and protocol header. The
information in IP and protocol headers is suﬃcient for replay
process to replay the server traﬃc. One advantage of not
logging the server responses is that it reduces the traﬃc log
dramatically.
3.2
Identifying Attacks
Every virtual machine is set up with a host-based IDS
along with DACODA [6]. We use a host-based IDS, such
as Minos [5], to raise an alert when an infection has oc-
curred. Note that the IDS is running in the LiveVM only.
We use DACODA to perform further investigation for each
single byte received by a network interface. DACODA has
the ability to generate a new signature for zero-day worms.
It also has the ability to generate a report such as where
the infection comes from. Therefore, our system relies on
DACODA in discovering and identifying the bogus traﬃc
received by the LiveVM. The only limitation of DACODA
is performance. Therefore, we must limit its running time
as explained next.
At the time that the IDS generates an alert, TimeVM in-
vokes DACODA at every Shadow VM’s and then waits for
a response. Please notice that receiving a response from a
Shadow VM (let say Shadow VM number k) means that all