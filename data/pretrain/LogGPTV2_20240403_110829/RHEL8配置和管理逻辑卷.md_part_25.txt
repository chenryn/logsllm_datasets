::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
这里给出的一些示例可能意外地匹配系统中的其他设备，且可能不适合您的具体系统。例如：
`a/loop/`{.literal} 等同于 `a/.*loop.*/`{.literal}，它会匹配
`/dev/solooperation/lvol1`{.literal}。
:::
::: itemizedlist
-   下面的过滤器添加所有发现的设备，这是配置文件中没有配置过滤器的默认行为：
    ``` literallayout
    filter = [ "a/.*/" ]
    ```
-   下面的过滤器会删除 `cdrom`{.literal}
    设备以避免在驱动器中没有介质时造成延迟：
    ``` literallayout
    filter = [ "r|^/dev/cdrom$|" ]
    ```
-   下面的过滤器添加所有回送设备并删除所有其他块设备：
    ``` literallayout
    filter = [ "a/loop/", "r/.*/" ]
    ```
-   下面的过滤器添加所有回路设备和 IDE 设备，同时删除所有其他块设备：
    ``` literallayout
    filter = [ "a|loop|", "a|/dev/hd.*|", "r|.*|" ]
    ```
-   下面的过滤器只添加第一个 IDE 驱动器中的分区
    8，同时删除所有其它块设备：
    ``` literallayout
    filter = [ "a|^/dev/hda8$|", "r/.*/" ]
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_device-scan-configuring-and-managing-logical-volumes.html#applying-an-lvm-device-filter-configuration_device-scan}应用 LVM 设备过滤器配置 {.title}
:::
这个步骤更改了控制 LVM 扫描设备的 LVM 设备过滤器的配置。
::: itemizedlist
**先决条件**
-   准备要使用的设备过滤器特征。
:::
::: orderedlist
**流程**
1.  在不修改 `/etc/lvm/lvm.conf`{.literal}
    文件的情况下测试您的设备过滤器特征。
    使用带
    `--config 'devices{ filter = [ your device filter pattern ] }'`{.literal}
    选项的 LVM 命令。例如：
    ``` screen
    # lvs --config 'devices{ filter = [ "a|/dev/emcpower.*|", "r|.*|" ] }'
    ```
2.  编辑 `/etc/lvm/lvm.conf`{.literal} 配置文件中的 `filter`{.literal}
    选项以使用您的新设备过滤器特征。
3.  检查新配置是否缺少您要使用的物理卷或卷组：
    ``` screen
    # pvscan
    ```
    ``` screen
    # vgscan
    ```
4.  重建 `initramfs`{.literal} 文件系统，以便 LVM
    重启时只扫描必要的设备：
    ``` screen
    # dracut --force --verbose
    ```
:::
:::
:::
[]{#layering-lvm-physical-volumes-on-top-of-logical-volumes_configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#layering-lvm-physical-volumes-on-top-of-logical-volumes_configuring-and-managing-logical-volumes.html#layering-lvm-physical-volumes-on-top-of-logical-volumes_configuring-and-managing-logical-volumes}第 16 章 在逻辑卷之上分层 LVM 物理卷[]{#layering-lvm-physical-volumes-on-top-of-logical-volumes_configuring-and-managing-logical-volumes.html#proc-controlling-device-scans-filters-device-scan} {.title}
:::
您可以配置 LVM，以便可以在逻辑卷之上创建物理卷。
默认情况下，LVM 命令不会扫描您系统中的逻辑卷。这个默认行为提供以下优点：
::: itemizedlist
-   如果系统中有很多活跃逻辑卷，每个 LVM
    命令都需要额外的时间，对性能造成负面影响，并导致不必要的延迟或者超时。
-   如果逻辑卷包含来自客户机虚拟机镜像的物理卷，主机通常不想扫描或者使用这些属于客户端的分层物理卷。但请注意，当客户机虚拟机的物理卷直接存在于主机可见的
    SCSI 设备中时，为了避免主机中的 LVM
    访问那些物理卷，您需要配置过滤器，如 [第 15 章 *控制 LVM
    设备扫描*](#assembly_device-scan-configuring-and-managing-logical-volumes.html "第 15 章 控制 LVM 设备扫描"){.xref}
    所述。
:::
当在逻辑卷上创建物理卷是您的目的，可能需要扫描逻辑卷。这将允许
`pvcreate`{.literal} 命令在逻辑卷中运行。要将 LVM
配置为扫描所有逻辑卷，请将 `scan_lvs`{.literal} 文件中的
`/etc/lvm/lvm.conf`{.literal} 配置选项设置为
`scan_lvs=1`{.literal}。要限制哪些逻辑卷 LVM 命令扫描，您可以在
`/etc/lvm/lvm.conf`{.literal} 配置文件中设置过滤器，如 [第 15 章 *控制
LVM
设备扫描*](#assembly_device-scan-configuring-and-managing-logical-volumes.html "第 15 章 控制 LVM 设备扫描"){.xref}
所述。
:::
[]{#assembly_controlling-lvm-allocation-configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#assembly_controlling-lvm-allocation-configuring-and-managing-logical-volumes.html#assembly_controlling-lvm-allocation-configuring-and-managing-logical-volumes}第 17 章 控制 LVM 分配 {.title}
:::
默认情况下，卷组根据常识分配物理扩展，比如不会将平行条带放在同一个物理卷中。这是
`normal`{.literal} 分配策略。您可以使用 `vgcreate`{.literal} 命令的
`--alloc`{.literal} 参数指定
`contiguous`{.literal}、`anywhere`{.literal}或
`cling`{.literal}的分配策略。通常，只在特殊情况下需要指定非常规或者非标准扩展分配时，才需要
`normal`{.literal} 以外的策略。
::: section
::: titlepage
# []{#assembly_controlling-lvm-allocation-configuring-and-managing-logical-volumes.html#ref_lvm-allocation-policies-controlling-lvm-allocation}LVM 分配策略 {.title}
:::
当 LVM 操作需要为一个或多个逻辑卷分配物理扩展时，分配过程如下：
::: itemizedlist
-   生成卷组中未分配的完整物理扩展集合供考虑。如果您在命令行末尾提供任意物理扩展范围，则只考虑指定物理卷中的未分配物理扩展。
-   逐个尝试每个分配策略，从最严格的策略(`contiguous`{.literal})开始，以使用
    `--alloc`{.literal}
    选项指定的分配策略或设置为特定逻辑卷或卷组的默认分配策略结束。对于每个策略，使用需要填充的空逻辑卷空间的最小数值逻辑扩展进行工作，并尽量根据分配策略实施的限制分配空间。如果需要更多空间，LVM
    会进入下一个策略。
:::
分配策略的限制如下：
::: itemizedlist
-   `contiguous`{.literal}
    的分配策略要求任何逻辑扩展的物理位置不是逻辑卷的第一个逻辑扩展，它与它前面的逻辑扩展的物理位置相邻。
    当逻辑卷是条带的或是镜像，`contiguous`{.literal}
    分配限制将独立应用于每个需要空间的条状或者镜像镜像（leg）。
-   `cling`{.literal}
    的分配策略要求将用于任何逻辑扩展的物理卷添加到该逻辑卷中至少已被一个逻辑扩展使用的现有逻辑卷中。如果两个物理卷中都定义了配置参数
    `allocation/cling_tag_list`{.literal}，那么两个物理卷就会被视为匹配。这允许对有类似属性（比如其物理位置）的物理卷组进行标记并视为分配的目的。
    当逻辑卷是条带的或是镜像，`cling`{.literal}
    分配限制将独立应用于每个需要空间的条状或者镜像镜像（leg）。
-   `normal`{.literal}
    的分配策略不会选择将同一物理卷共享为已分配给并行逻辑卷（即，并行逻辑卷中相同偏移的逻辑扩展）的物理扩展。
    当和逻辑卷同时分配镜像日志来保存镜像数据时，`normal`{.literal}
    的分配策略首先会尝试为日志和数据选择不同的物理卷。如果无法做到这一点，且
    `allocation/mirror_logs_require_separate_pvs`{.literal}
    配置参数被设置为 0，那么它将允许日志与部分数据共享物理卷。
    同样，分配精简池元数据时，根据
    `allocation/thin_pool_metadata_require_separate_pvs`{.literal}
    配置参数的值，`normal`{.literal}
    的分配策略与分配镜像日志时的注意事项相同。
-   如果有足够的可用扩展来满足分配请求，但 `normal`{.literal}
    分配策略没有使用它们，`anywhere`{.literal}
    分配策略会使用它们，即使这会因为将两个条带放在同一个物理卷中而降低了性能。
:::
可使用 `vgchange`{.literal} 命令更改分配策略。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果您使用没有包括在此文档中的分配策略，应该注意，它们的行为在将来的版本中可能会改变。例如：如果您在命令行中提供两个空物理卷，它们有相同数量的可用物理扩展可用于分配，LVM
当前会以它们列出的顺序处理它们，但不保证在将来的版本中这个行为不会有变化。如果为某个逻辑卷获得特定布局很重要，那么您应该通过
`lvcreate`{.literal} 和 `lvconvert`{.literal}
步骤来构建它，以便在每个步骤中应用分配策略，让 LVM
无法在布局中自由裁量。
:::
要查看分配过程目前在任何特定情况下的工作方式，您可以读取 debug
日志输出，例如将 `-vvvv`{.literal} 选项添加到命令中。
:::
::: section
::: titlepage
# []{#assembly_controlling-lvm-allocation-configuring-and-managing-logical-volumes.html#proc_preventing-lvm-allocation-controlling-lvm-allocation}防止在物理卷中分配 {.title}
:::
您可以使用 `pvchange`{.literal}
命令防止在一个或者多个物理卷的剩余空间中分配物理扩展。这在出现磁盘错误或者要删除物理卷时是必需的。
下面的命令不允许在 `/dev/sdk1`{.literal} 中分配物理扩展。
``` literallayout
# pvchange -x n /dev/sdk1
```
您还可以使用 `pvchange`{.literal} 命令的 `-xy`{.literal}
参数来允许在之前禁止进行分配的地方进行分配。
:::
::: section
::: titlepage
# []{#assembly_controlling-lvm-allocation-configuring-and-managing-logical-volumes.html#proc_extending-lvm-volume-with-cling-allocation-controlling-lvm-allocation}使用 `cling`{.literal} 分配策略扩展逻辑卷 {.title}
:::
当扩展 LVM 卷时，您可以使用 `lvextend`{.literal} 命令的
`--alloc cling`{.literal} 选项指定 `cling`{.literal}
分配策略。这个策略将选择同一物理卷中的空间作为现有逻辑卷的最后区段。如果在该物理卷中没有足够的空间，且在
`/etc/lvm/lvm.conf`{.literal} 文件中定义了一组标签，则 LVM
会检查是否在该物理卷中附加了任何标签，并在现有扩展和新扩展间对应那些物理卷标签。
例如：如果您的逻辑卷在一个卷组的两个位置之间是镜像的，您可以根据其所在位置标记物理卷，即使用
`@site1`{.literal} 和 `@site2`{.literal} 标签标记物理卷。然后您可以在
`lvm.conf`{.literal} 文件中指定以下行：
``` literallayout
cling_tag_list = [ "@site1", "@site2" ]
```
在以下示例中，将 `lvm.conf`{.literal} 文件修改为包含以下行：
``` literallayout
cling_tag_list = [ "@A", "@B" ]
```
另外，在这个示例中，创建了由物理卷
`/dev/sdb1`{.literal}、`/dev/sdc1`{.literal}、`/dev/sdd1`{.literal}、`/dev/sde1`{.literal}、`/dev/sdf1`{.literal}、`/dev/sdg1`{.literal}和
`/dev/sdh1`{.literal} 组成的卷组 `taft`{.literal}。已使用标签
`A`{.literal}、`B`{.literal} 和 `C`{.literal}
标记这些物理卷。这个示例没有使用 `C`{.literal} 标签，但这说明 LVM
使用这些标签选择要在镜像分支中使用的物理卷。
``` literallayout
# pvs -a -o +pv_tags /dev/sd[bcdefgh]
  PV         VG   Fmt  Attr PSize  PFree  PV Tags
  /dev/sdb1  taft lvm2 a--  15.00g 15.00g A
  /dev/sdc1  taft lvm2 a--  15.00g 15.00g B
  /dev/sdd1  taft lvm2 a--  15.00g 15.00g B
  /dev/sde1  taft lvm2 a--  15.00g 15.00g C
  /dev/sdf1  taft lvm2 a--  15.00g 15.00g C
  /dev/sdg1  taft lvm2 a--  15.00g 15.00g A
  /dev/sdh1  taft lvm2 a--  15.00g 15.00g A
```
下面的命令在卷组 `taft`{.literal} 中创建 10GB 镜像卷。
``` literallayout
# lvcreate --type raid1 -m 1 -n mirror --nosync -L 10G taft
  WARNING: New raid1 won't be synchronised. Don't read what you didn't write!
  Logical volume "mirror" created
```
以下命令显示使用哪些设备作为镜像分支和 RAID 元数据子卷。
``` literallayout
# lvs -a -o +devices
  LV                VG   Attr       LSize  Log Cpy%Sync Devices
  mirror            taft Rwi-a-r--- 10.00g       100.00 mirror_rimage_0(0),mirror_rimage_1(0)
  [mirror_rimage_0] taft iwi-aor--- 10.00g              /dev/sdb1(1)
  [mirror_rimage_1] taft iwi-aor--- 10.00g              /dev/sdc1(1)
  [mirror_rmeta_0]  taft ewi-aor---  4.00m              /dev/sdb1(0)
  [mirror_rmeta_1]  taft ewi-aor---  4.00m              /dev/sdc1(0)
```
下面的命令扩展了镜像卷，使用 `cling`{.literal}
分配策略指定应使用有相同标签的物理卷扩展该镜像分支。
``` literallayout
# lvextend --alloc cling -L +10G taft/mirror
  Extending 2 mirror images.
  Extending logical volume mirror to 20.00 GiB
  Logical volume mirror successfully resized
```
以下显示命令显示已使用带有与图图相同标签的物理卷扩展了镜像分支。请注意：忽略了标签为
`C`{.literal} 的物理卷。
``` literallayout
# lvs -a -o +devices