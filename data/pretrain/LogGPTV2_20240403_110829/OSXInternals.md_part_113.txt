### Mach Port and Subset Port Lookup Operation

The `subset_port` lookup operation will return not only the ports registered with `subset_port` but also those registered with its ancestor ports. If a service is registered with both `subset_port` and an ancestor port, a lookup for that service by a user of `subset_port` will fetch the version of the service registered with `subset_port`. This allows services to be customized for specific tasks without affecting the rest of the system, which can continue to use the default versions of the services.

The lifespan of `subset_port` is tied to `requestor_port`. When `requestor_port` is destroyed, `subset_port`, its descendants, and any services advertised by these ports are also destroyed.

### Bootstrap Parent Function

The `bootstrap_parent()` function returns the parent bootstrap port of `bootstrap_port`, which is typically a bootstrap subset port. The calling task must have superuser privileges. For example, when called from a user login context, this function will return the bootstrap port corresponding to the startup context. When called from the startup context, the parent port returned is the same as the bootstrap port.

```c
kern_return_t
bootstrap_parent(mach_port_t bootstrap_port, mach_port_t *parent_port);
```

### Startup Context Execution

The `/usr/libexec/StartupItemContext` program can be used to run an executable in the startup context, which is the context in which Mac OS X startup items run. It works by repeatedly calling `bootstrap_parent()` until it reaches the startup (root) context. It then sets the port as its own bootstrap port and executes the requested program.

### Automatic Relaunching of Servers

The automatic relaunching of servers by the Bootstrap Server is useful for creating crash-resistant servers. However, it is neither necessary nor advisable to create production servers by directly using the Bootstrap Server interface. Starting with Mac OS X 10.4, the launch API should be used instead. With this caveat, let us look at two examples of using the Bootstrap Server interface.

#### Example 1: Displaying Information about All Known Services

In this example, we use `bootstrap_info()` to retrieve a list of all known services that can be looked up in the bootstrap context associated with the given bootstrap port.

```c
// bootstrap_info.c
#include <stdio.h>
#include <stdlib.h>
#include <mach/mach.h>
#include <servers/bootstrap.h>

int main(int argc, char **argv) {
    kern_return_t kr;
    name_array_t service_names, server_names;
    bootstrap_status_array_t service_active;
    unsigned int service_names_count, server_names_count;
    unsigned int service_active_count, i;

    // Use the global variable bootstrap_port for the current task's bootstrap port.
    // Alternatively, retrieve the same send right by calling task_get_bootstrap_port().
    kr = bootstrap_info(bootstrap_port,
                        &service_names,
                        &service_names_count,
                        &server_names,
                        &server_names_count,
                        &service_active,
                        &service_active_count);

    if (kr != BOOTSTRAP_SUCCESS) {
        mach_error("bootstrap_info:", kr);
        exit(1);
    }

    printf("%s %-48s %s\n%s %-48s %s\n", "up?", "service name", "server cmd",
           "___", "____________", "__________");

    for (i = 0; i < service_names_count; i++) {
        printf("%s %-48s %s\n", (service_active[i] == 1) ? "yes" : "no",
               service_names[i], server_names[i]);
    }

    return 0;
}
```

#### Example 2: Registering and Unregistering a Bootstrap Service

This example demonstrates how to register and unregister a bootstrap service.

```c
// bootstrap_server.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
#include <mach/mach.h>
#include <servers/bootstrap.h>
#include <asl.h>

#define SERVICE_NAME "com.osxbook.DummySleeper"
#define SERVICE_CMD "/tmp/sleeperd"
#define SERVICE_SHUTDOWN_FILE SERVICE_CMD ".off"

static mach_port_t server_priv_port;
static aslmsg logmsg;

#define MY_ASL_LOG(fmt, ...) \
    asl_log(NULL, logmsg, ASL_LEVEL_ERR, fmt, ## __VA_ARGS__)

static kern_return_t register_bootstrap_service(void) {
    kern_return_t kr;
    mach_port_t service_send_port, service_rcv_port;

    kr = bootstrap_check_in(bootstrap_port, (char *)SERVICE_NAME, &service_rcv_port);
    if (kr == KERN_SUCCESS)
        server_priv_port = bootstrap_port;
    else if (kr == BOOTSTRAP_UNKNOWN_SERVICE) {
        kr = bootstrap_create_server(bootstrap_port, SERVICE_CMD, getuid(), FALSE, &server_priv_port);
        if (kr != KERN_SUCCESS)
            return kr;

        kr = bootstrap_create_service(server_priv_port, (char *)SERVICE_NAME, &service_send_port);
        if (kr != KERN_SUCCESS) {
            mach_port_deallocate(mach_task_self(), server_priv_port);
            return kr;
        }

        kr = bootstrap_check_in(server_priv_port, (char *)SERVICE_NAME, &service_rcv_port);
        if (kr != KERN_SUCCESS) {
            mach_port_deallocate(mach_task_self(), server_priv_port);
            mach_port_deallocate(mach_task_self(), service_send_port);
            return kr;
        }
    }

    mach_port_destroy(mach_task_self(), service_rcv_port);
    return kr;
}

static kern_return_t unregister_bootstrap_service(void) {
    return bootstrap_register(server_priv_port, (char *)SERVICE_NAME, MACH_PORT_NULL);
}

int main(void) {
    kern_return_t kr;
    struct stat statbuf;

    logmsg = asl_new(ASL_TYPE_MSG);
    asl_set(logmsg, "Facility", "Sleeper Daemon");

    if (stat(SERVICE_SHUTDOWN_FILE, &statbuf) == 0) {
        kr = unregister_bootstrap_service();
        MY_ASL_LOG("destroying service %s\n", SERVICE_NAME);
    } else {
        kr = register_bootstrap_service();
        MY_ASL_LOG("starting up service %s\n", SERVICE_NAME);
    }

    if (kr != KERN_SUCCESS) {
        mach_error("bootstrap_register", kr);
        exit(kr);
    }

    MY_ASL_LOG("server loop ready\n");
    while (1) // Dummy server loop.
        sleep(60);

    exit(0);
}
```

### Apple System Logger (ASL)

The ASL facility allows structured log messages that consist of string-based key-value dictionaries. It provides several predefined keys, such as priority level, process ID, time, and message sender. Applications can extend the message dictionary by defining their own keys. ASL stores messages in a single data store and includes functions for constructing queries and searching for log messages based on those queries.

Starting with Mac OS X 10.4, the `syslogd` program is the ASL daemon, providing backward compatibility with previous `syslogd` implementations. ASL also supports message filtering in both the client library and `syslogd`.

### Launchd Debug Messages

The launchd log shows the relevant messages when a Mach server initializes and relaunches. The log messages differ between the first execution and subsequent relaunches. In the first case, both a new server and a new service are created. In subsequent cases, the server's first attempt to call `bootstrap_check_in()` succeeds because the service already exists.

To terminate the server permanently, create the `/tmp/sleeperd.off` file and send a `SIGTERM` signal to the server process. The log messages will show that launchd relaunched the server, but the server calls `bootstrap_register()` with `MACH_PORT_NULL` specified as the service port, making the service unavailable.

```sh
$ touch /tmp/sleeperd.off
$ kill -TERM 2344
$ ps -ax | grep sleeperd
$
```

The log messages will show that launchd relaunched the server, but the server called `bootstrap_register()` with `MACH_PORT_NULL`, making the service unavailable.