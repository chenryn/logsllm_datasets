 **Do you want to request a _feature_ or report a _bug_?**  
Request a feature
Per some discussion today with @tomocchino and @thejameskyle, I'd like a non-
Flow mechanism to annotate what type(s) of elements a component expects to
render.
Here's some examples, with Flow types for comparison (that I realize may not
be currently checked in Flow, yet):
    function Foo({ yes }){
      return yes ?  : ;
    }
    Foo.renderTypes = [Bar, 'div'];
    class Bar extends React.Component {
      static renderTypes = [Button];
      render() {
        return ;
      }
    }
    function Foo({ yes }): React.Element {
      return yes ?  : ;
    }
    class Bar extends React.Component {
      render(): React.Element {
        return ;
      }
    }
Inside @airbnb, we have lots of use cases where we have container components
in a separate package - say, a ``, and we have intentionally
restrictive propTypes on its `children` prop, to only allow a `Button` (also
in the same package). However, in an app that consumes this component library
package, a dev may want to create a `` that in turn
renders a `` \- however, they're unable to pass it into `ButtonRow`
(our propType warnings fail tests), even though conceptually it should be
permitted.
Having `.renderTypes` would allow us to widen our `children` propType to allow
for either a ``, or _anything that renders a``_, which helps
us maintain separation of concerns (the package doesn't have to know about
`` to accept it) as well as maintain strictness (the
package doesn't have to allow any wacky element inside ``).
I imagine the implementation to be:
  1. when render() is called or an SFC is invoked, (in async rendering, it'd be when the component resolves, i suppose)
  2. in development only and if `.renderTypes` exists on the component
  3. evaluate the equivalent of `elementType``(...Component.renderTypes)({ children: renderedValue }, 'children', ...)`,
  4. just like propTypes, log the error if one is returned
(cc @spicyj)