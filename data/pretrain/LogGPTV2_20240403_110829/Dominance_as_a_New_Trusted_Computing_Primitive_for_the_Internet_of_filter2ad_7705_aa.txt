# Dominance as a New Trusted Computing Primitive for the Internet of Things

**Authors:**
- Meng Xu
- Manuel Huber
- Zhichuang Sun
- Paul England
- Marcus Peinado
- Sangho Lee
- Andrey Marochko
- Dennis Mattoon
- Rob Spiger
- Stefan Thom

## Abstract
The Internet of Things (IoT) is rapidly emerging as one of the dominant computing paradigms of this decade, with applications ranging from in-home entertainment to large-scale industrial deployments such as controlling assembly lines and monitoring traffic. While IoT devices share many similarities with traditional computers, user expectations, deployment scenarios, and cost and hardware constraints create new security challenges and opportunities. This is particularly true for large-scale IoT deployments where a central entity manages a large number of devices with minimal human interaction.

Like traditional computers, IoT devices are vulnerable to attacks and compromises. Large IoT deployments, consisting of many nearly identical devices, are especially attractive targets. Recovery from root compromise by conventional means can be costly and slow, especially if the devices are dispersed over a large geographical area. In the worst case, technicians may need to travel to each device for manual recovery. Data center solutions like the Intelligent Platform Management Interface (IPMI), which rely on separate service processors and network connections, are not supported by existing IoT hardware due to cost constraints.

This paper introduces CIDER, a system that enables rapid recovery of IoT devices even if attackers have taken root control of every device in a large deployment. The recovery process requires minimal manual intervention. After identifying the compromise and producing an updated firmware image, the administrator can instruct CIDER to reset the devices and install the patched firmware. We demonstrate the universality and practicality of CIDER by implementing it on three popular IoT platforms: HummingBoard Edge, Raspberry Pi Compute Module 3, and Nucleo-L476RG, spanning high to low-end devices. Our evaluation shows that the performance overhead of CIDER is generally negligible.

## 1. Introduction
The Internet of Things (IoT) continues to experience rapid growth. The number of IoT devices is believed to have surpassed the number of mobile phones in 2018 and is expected to reach 18 billion devices by 2022, accounting for almost two-thirds of all internet-connected computing devices [1]. This growth is driven by a wide range of applications, including home automation (e.g., smart locks and thermostats), industrial automation, connected vehicles, smart cities, water management, agriculture [2], and even vending machines [3].

†These authors participated in this work during their internships at Microsoft Research.

In a world where the majority of internet-connected devices are IoT devices, and where many aspects of critical infrastructure, industrial production, and everyday life depend on such devices, the Internet of Things becomes an attractive target for attackers [4]. In addition to simple resource hijacking, as demonstrated by the Mirai and Hajime Botnets [5–7], new and more pernicious types of ransomware, targeting production facilities and critical infrastructure like the power grid [8], are likely threats. The first instances of IoT ransomware have already appeared in the wild [9–11].

At the same time, IoT devices have many of the properties that have allowed traditional computing devices to be compromised on countless occasions. There is no reason to believe that the operating systems and applications running on IoT devices will be free from vulnerabilities, especially since much of the software running on these devices (e.g., the Linux kernel) was ported from traditional devices. Configuration errors, such as those exploited by Mirai, are also likely to persist into the future. All these problems are exacerbated by the market dynamics of a rapidly evolving emerging technology for which time-to-market pressures have traditionally taken precedence over software assurance.

Rather than attempting to design IoT devices that cannot be exploited—a daunting task under commercial constraints—this paper aims to unconditionally recover IoT devices even after the most severe compromise of the device firmware. More precisely, our goal is to enable the owner or administrator of a large IoT deployment to install and run a firmware version of their choice, even if the device firmware is under the control of an attacker and actively resists recovery. We call the ability of one computing device (i.e., the owner’s IoT backend server) to control the software configuration of another computing device "dominance."

Dominance can be seen as a stronger version of attestation [12–15]. Whereas attestation allows the backend to identify the software on a device, dominance enables the backend to dictate it. Attestation has been a critical primitive in the design of many trusted computing systems [16–21] that protect confidentiality and privacy—but not availability—with a small trusted computing base (TCB). In contrast, in this paper, availability of the device is one of our central goals.

The need to recover from software failure or compromise has existed for a long time, and solutions with properties akin to dominance have emerged in other areas of computing. In the server and data center space, the Intelligent Platform Management Interface (IPMI) [22] allows data center administrators to install software updates on all servers irrespective of their state. Such solutions rely on separate control processors running separate operating systems (e.g., Intel Management Engine (IME) [23]) and accessing the network through either dedicated interfaces or special interfaces with sidebands [24]. Thus, while effective in the server domain, this approach appears unsuitable for resource-constrained IoT devices. More generally, the traditional last line of defense after a severe compromise has been for the administrator to assert dominance by taking physical control of the compromised device and cleaning it up or installing a new operating system on it. As the ratio of devices to administrators for IoT deployments is often orders of magnitude larger than in personal computing, even this approach becomes impractical.

This paper presents CIDER, a system that implements dominance for IoT deployments. CIDER allows the administrator to specify a firmware update and ensures that the update will be deployed and executed on all devices within a time-bound. This includes compromised devices executing adversarial code that is actively trying to avoid being evicted from the device. CIDER works with existing IoT hardware and requires only minimal changes in the hardware configuration and firmware.

A key design choice in CIDER was to avoid concurrent execution of trusted and untrusted code. CIDER device code runs during boot, immediately after a device reset. After ensuring that the device firmware is in accordance with policy, CIDER enables simple hardware protections and relinquishes control to the firmware until the next reset. This design obviates the need for runtime isolation and the complex security hardware and software needed to support it (e.g., ring protections, memory management units, virtualization support, trusted execution environments). The complexity and limitations of runtime isolation have given rise to critical implementation bugs [25–27] and a multitude of side channels, including speculative execution attacks [28–30]. While most processors contain hardware support for runtime isolation, CIDER does not use it, and it is not part of its TCB.

Instead, CIDER uses two much simpler hardware primitives to enforce isolation in time: latches and an authenticated watchdog timer (AWDT). A latch is a protection that software can enable but not disable. Once enabled, latch protection remains on until the next reset. Latches allow CIDER to protect itself such that the firmware cannot remove the protections even though it is in full control of the device.

The AWDT is a new primitive that allows CIDER to regain control of a device from the firmware unconditionally by forcing a reset. The AWDT behaves like a conventional watchdog timer in the sense that it resets the system if the watchdog is not periodically serviced. However, in contrast to a conventional watchdog, an AWDT requires cryptographically protected keepalive messages issued by the remote administrator to defer the platform reset. Hence, it cannot be serviced independently by local firmware. We show how to implement an AWDT by repurposing simple existing hardware.

We have implemented our CIDER prototype on the SolidRun HummingBoard Edge (HBE) [31], the Raspberry Pi Compute Module 3 (CM3) [32], and the STMicroelectronics Nucleo-L476RG (NL476RG) [33], representing high-, middle-, and low-end IoT devices, respectively, while addressing various implementation challenges in each of the device families. Our evaluation shows that CIDER does not interfere with existing operating systems or bare-metal apps that typically run on top of these platforms and introduces minimal overhead in a reasonable production setting.

The goal of ensuring availability makes the software TCB of CIDER larger than that of other trusted computing systems that limit themselves to confidentiality and integrity [16–21]. The CIDER device code comprises around 23k lines of code (LoC). This includes device initialization, a storage driver, and a small networking stack. We isolate the networking code to prevent network-based attacks from compromising CIDER. We shield the remaining core CIDER code from the adversary through isolation in time and by checking the integrity of all inputs using the formally verified High-Assurance Cryptographic Library (HACL) [34].

In summary, this paper makes the following contributions:
- We propose dominance, a new trusted computing primitive that allows a remote administrator to unconditionally recover and configure a device even after a complete compromise of the device firmware.
- We design CIDER, a practical system that brings dominance to IoT deployments without disrupting normal device operations. Our design avoids the need for runtime isolation, which allows for a significant reduction in the hardware complexity and software TCB.
- We introduce the AWDT as a new hardware construct and present practical AWDT implementations in existing hardware and in software.
- We demonstrate how large amounts of off-the-shelf driver code can be used safely by shielding them from adversarial inputs.
- We have prototyped CIDER on three popular IoT devices. Our evaluation shows that CIDER is compatible with existing firmware and introduces a tolerable boot-up delay and a negligible runtime overhead.

## 2. Background
A typical IoT system consists of multiple components. A possibly large number of devices, which may be geographically dispersed, interact with the physical world through sensors and actuators. The devices connect over the internet to one or more backend servers (the hub), which are often located in the cloud but could also be managed by an enterprise. The hub may store and analyze the sensor data sent by the devices and send instructions to the devices. In addition to these application-specific interactions, the connection between the hub and the devices may be used for device maintenance, such as firmware updates. The hub exposes interfaces that allow the owners or users of the IoT system to access the data gathered by the devices or to configure the system.

IoT devices are simple computers, typically equipped with various peripheral sensors (e.g., thermometers, cameras, or accelerometers) or actuators (e.g., traffic light controls or motors). Low-end IoT devices may be built around a low-power system-on-chip (SoC) consisting of a single-core microcontroller running at moderate clock rates (e.g., tens of MHz) and small amounts of RAM (e.g., tens to hundreds of kB) and flash (e.g., hundreds to thousands of kB). Such devices typically run an application either bare-metal or on top of an embedded operating system such as mbed OS or FreeRTOS. High-end devices may feature multicore 64-bit CPUs running at GHz clock rates, several GBs of DRAM, external storage devices, and a full operating system such as Linux, allowing them to run multiple applications.

### 2.1. IoT Examples
This section presents three IoT scenarios. Our goal is to provide examples of systems to which CIDER could be applied that are both concrete and representative of broader classes of IoT applications.

#### Air-Quality Monitoring System
Several organizations have deployed air-quality sensors in many locations across the globe. The sensors (i.e., IoT devices) measure various types of air pollution (e.g., ozone, PM2.5, carbon monoxide) and send the measured data to a server (i.e., hub). The hub may process the raw data in several ways (e.g., analytics, visualizations).