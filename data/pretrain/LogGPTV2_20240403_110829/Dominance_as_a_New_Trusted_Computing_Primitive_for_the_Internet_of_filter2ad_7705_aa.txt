title:Dominance as a New Trusted Computing Primitive for the Internet of
Things
author:Meng Xu and
Manuel Huber and
Zhichuang Sun and
Paul England and
Marcus Peinado and
Sangho Lee and
Andrey Marochko and
Dennis Mattoon and
Rob Spiger and
Stefan Thom
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Dominance as a New Trusted Computing Primitive
for the Internet of Things
∗†
, Manuel Huber
Meng Xu
¶
, Andrey Marochko
Sangho Lee
‡†
¶
, Zhichuang Sun
, Dennis Mattoon
§†
¶
¶
, Paul England
, Rob Spiger
¶
Northeastern University
¶
, Marcus Peinado
,
(cid:3)
(cid:3)
and Stefan Thom
∗
Georgia Institute of Technology
‡
Fraunhofer AISEC
§
Abstract—The Internet of Things (IoT) is rapidly emerging
as one of the dominant computing paradigms of this decade.
Applications range from in-home entertainment to large-scale
industrial deployments such as controlling assembly lines and
monitoring trafﬁc. While IoT devices are in many respects
similar to traditional computers, user expectations and deploy-
ment scenarios as well as cost and hardware constraints are
sufﬁciently different to create new security challenges as well
as new opportunities. This is especially true for large-scale IoT
deployments in which a central entity deploys and controls a
large number of IoT devices with minimal human interaction.
Like traditional computers, IoT devices are subject to attack
and compromise. Large IoT deployments consisting of many
nearly identical devices are especially attractive targets. At the
same time, recovery from root compromise by conventional
means becomes costly and slow, even more so if the devices
are dispersed over a large geographical area. In the worst case,
technicians have to travel to all devices and manually recover
them. Data center solutions such as the Intelligent Platform
Management Interface (IPMI) which rely on separate service
processors and network connections are not only not supported
by existing IoT hardware, but are unlikely to be in the foreseeable
future due to the cost constraints of mainstream IoT devices.
This paper presents CIDER, a system that can recover IoT de-
vices within a short amount of time, even if attackers have taken
root control of every device in a large deployment. The recovery
requires minimal manual intervention. After the administrator
has identiﬁed the compromise and produced an updated ﬁrmware
image, he/she can instruct CIDER to force the devices to reset and
to install the patched ﬁrmware on the devices. We demonstrate
the universality and practicality of CIDER by implementing it on
three popular IoT platforms (HummingBoard Edge, Raspberry
Pi Compute Module 3 and Nucleo-L476RG) spanning the range
from high to low end. Our evaluation shows that the performance
overhead of CIDER is generally negligible.
I. INTRODUCTION
The Internet of Things (IoT) continues to experience rapid
growth. The number of IoT devices is believed to have
surpassed the number of mobile phones in 2018 and is expected
to reach 18 billion devices by 2022, thus accounting for almost
two thirds of all internet-connected computing devices [1]. This
growth is driven by a wide range of applications including
home automation (e.g., smart locks and thermostats), industrial
automation, connected vehicles, smart cities, water manage-
ment, agriculture [2], and even vending machines [3].
†These authors participated in this work during their internships at Microsoft
Research.
Microsoft Research
(cid:3)
Microsoft
In a world in which the great majority of internet-connected
devices are IoT devices and in which many aspects of critical
infrastructure, industrial production, and everyday life depend
on such devices, the Internet of Things becomes an attractive
target for attackers [4]. In addition to simple resource hijacking,
as demonstrated by the Mirai and Hajime Botnets [5–7], new
and more pernicious types of ransomware, targeting production
facilities and critical infrastructure like the power grid [8],
are likely threats. The ﬁrst instances of IoT ransomware have
already appeared in the wild [9–11].
At the same time, IoT devices have many of the properties
that have allowed traditional computing devices to be compro-
mised on countless occasions. There is no reason to believe that
the operating systems and applications running on IoT devices
will be free from vulnerabilities, especially since much of the
software running on these devices (e.g., the Linux kernel) were
ported from traditional devices. Conﬁguration errors such as
those exploited by Mirai are also likely to persist into the future.
All these problems are exacerbated by the market dynamics
of a rapidly evolving emerging technology for which time-
to-market pressures have traditionally taken precedence over
software assurance.
Rather than attempting to design IoT devices that cannot be
exploited—a daunting task under commercial constraints—this
paper aims to unconditionally recover IoT devices even after
the most severe compromise of the device ﬁrmware. More
precisely, our goal is to enable the owner or administrator of
a large IoT deployment to install and run a ﬁrmware version
of his or her choice even if the device ﬁrmware is under the
control of an attacker and actively resists recovery. We call the
ability of one computing device (i.e., the owner’s IoT back-
end server) to control the software conﬁguration of another
computing device dominance.
Dominance can be seen as a stronger version of attes-
tation [12–15]. Whereas attestation allows the back-end to
identify the software on a device, dominance enables the back-
end to dictate it. Attestation has been a critical primitive in
the design of many trusted computing systems [16–21] that
protect conﬁdentiality and privacy—but not availability—with
a small trusted computing base (TCB). In contrast, in this
paper, availability of the device is one of our central goals.
The need to recover from software failure or compromise
has existed for a long time, and solutions with properties
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:46)(cid:70)(cid:79)(cid:72)(cid:1)(cid:57)(cid:86)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:25)(cid:21)
(cid:18)(cid:21)(cid:18)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:35 UTC from IEEE Xplore.  Restrictions apply. 
akin to dominance have emerged in other areas of computing.
In the server and data center space, the Intelligent Platform
Management Interface (IPMI) [22] allows data center adminis-
trators to install software updates on all servers irrespective of
their state. Such solutions rely on separate control processors
running separate operating systems (e.g., Intel Management
Engine (IME) [23]) and accessing the network through either
dedicated interfaces or special interfaces with sidebands [24].
Thus, while effective in the server domain, this approach
appears unsuitable for resource-constrained IoT devices. More
generally, the traditional last line of defense after a severe
compromise has been for the administrator to assert dominance
by taking physical control of the compromised device and
cleaning it up or installing a new operating system on it. As
the ratio of devices to administrators for IoT deployments is
often orders of magnitude larger than in personal computing,
even this approach becomes impractical.
This paper presents CIDER, a system that implements domi-
nance for IoT deployments. CIDER allows the administrator
to specify a ﬁrmware update and ensures that the update will
be deployed and executed on all devices within a time-bound.
This includes compromised devices executing adversarial code
that is actively trying to avoid being evicted from the device.
CIDER works with existing IoT hardware and requires only
minimal changes in the hardware conﬁguration and ﬁrmware.
A key design choice in CIDER was to avoid concurrent
execution of trusted and untrusted code. CIDER device code
runs during boot
immediately after a device reset. After
ensuring that the device ﬁrmware is in accordance with policy,
CIDER enables simple hardware protections and relinquishes
control to the ﬁrmware until the next reset. This design
obviates the need for runtime isolation and the complex
security hardware and software needed to support it (e.g.,
ring protections, memory management units, virtualization
support, trusted execution environments). The complexity and
limitations of runtime isolation have given rise to critical
implementation bugs [25–27] and a multitude of side channels
including speculative execution attacks [28–30]. While most
processors contain hardware support for runtime isolation,
CIDER does not use it, and it is not part of its TCB.
Instead, CIDER uses two much simpler hardware primitives
to enforce isolation in time: latches and an authenticated
watchdog timer (AWDT). A latch is a protection that software
can enable but not disable. Once enabled, latch protection
remains on until the next reset. Latches allow CIDER to protect
itself such that the ﬁrmware cannot remove the protections
even though it is in full control of the device.
The AWDT is a new primitive that allows CIDER to regain
control of a device from the ﬁrmware unconditionally by forc-
ing a reset. The AWDT behaves like a conventional watchdog
timer in the sense that it resets the system if the watchdog is not
periodically serviced. However, in contrast to a conventional
watchdog, an AWDT requires cryptographically protected
keepalive messages issued by the remote administrator to defer
the platform reset. Hence, it cannot be serviced independently
by local ﬁrmware. We show how to implement an AWDT by
repurposing simple existing hardware.
We have implemented our CIDER prototype on the SolidRun
HummingBoard Edge (HBE) [31], the Raspberry Pi Compute
Module 3 (CM3) [32], and the STMicroelectronics Nucleo-
L476RG (NL476RG) [33], representing high-, middle-, and
low-end IoT devices respectively, while addressing various
implementation challenges in each of the device families. Our
evaluation shows that CIDER does not interfere with existing
operating systems or bare-metal apps that typically run on
top of these platforms, and introduces minimal overhead in a
reasonable production setting.
The goal of ensuring availability makes the software TCB of
CIDER larger than that of other trusted computing systems that
limit themselves to conﬁdentiality and integrity [16–21]. The
CIDER device code comprises around 23k lines of code (LoC).
This includes device initialization, a storage driver and a small
networking stack. We isolate the networking code to prevent
network-based attacks from compromising CIDER. We shield
the remaining core CIDER code from the adversary through
isolation in time and by checking the integrity of all inputs using
the formally veriﬁed High-Assurance Cryptographic Library
(HACL) [34].
In summary, this paper makes the following contributions:
• We propose dominance, a new trusted computing primitive
that allows a remote administrator to unconditionally
recover and conﬁgure a device even after a complete
compromise of the device ﬁrmware.
• We design CIDER, a practical system that brings dom-
inance to IoT deployments without disrupting normal
device operations. Our design avoids the need for runtime
isolation which allows for a signiﬁcant reduction in the
hardware complexity and software TCB.
• We introduce the AWDT as a new hardware construct
and present practical AWDT implementations in existing
hardware and in software.
• We demonstrate how large amounts of off-the-shelf driver
code can be used safely by shielding them from adversarial
inputs.
• We have prototyped CIDER on three popular IoT devices.
Our evaluation shows that CIDER is compatible with
existing ﬁrmware and introduces a tolerable boot-up delay
and a negligible runtime overhead.
II. BACKGROUND
A typical IoT system consists of multiple components. A
possibly large number of devices that may be geographically
dispersed interact with the physical world through sensors and
actuators. The devices connect over the internet to one or
more back-end servers (the hub) which are often located in the
cloud, but could also be managed by an enterprise. The hub
may store and analyze the sensor data sent by the devices and
send instructions to the devices. In addition to these application-
speciﬁc interactions, the connection between the hub and the
devices may be used for device maintenance such as ﬁrmware
updates. The hub exposes interfaces that allow the owners or
(cid:18)(cid:21)(cid:18)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:35 UTC from IEEE Xplore.  Restrictions apply. 
users of the IoT system to access the data gathered by the
devices or to conﬁgure the system.
IoT devices are simple computers, typically equipped with
various peripheral sensors (e.g., thermometers, cameras or
accelerometers) or actuators (e.g., trafﬁc light controls or
motors). Low-end IoT devices may be built around a low-power
system-on-chip (SoC) consisting of a single-core microcon-
troller running at moderate clock rates (e.g., tens of MHz) and
small amounts of RAM (e.g., tens to hundreds of kB) and ﬂash
(e.g., hundreds to thousands of kB). Such devices typically
run an application either bare-metal or on top of an embedded
operating system such as mbed OS or FreeRTOS. High-end
devices may feature multicore 64-bit CPUs running at GHz
clock rates, several GBs of DRAM, external storage devices
and a full operating system such as Linux, allowing them to
run multiple applications.
A. IoT Examples
This section presents three IoT scenarios. Our goal is to
provide examples of systems to which CIDER could be applied
that are both concrete and representative of broader classes of
IoT applications.
Air-quality monitoring system. Several organizations have
deployed air-quality sensors in many locations across the globe.
The sensors (i.e., IoT devices) measure various types of air
pollution (e.g., ozone, PM2.5, carbon monoxide) and send the
measured data to a server (i.e., hub). The hub may process the
raw data in several ways (e.g., analytics, visualizations). The