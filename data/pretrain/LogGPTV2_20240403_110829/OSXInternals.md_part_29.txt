}
// Prepare to write to the first 4 bytes of "original"
ret = mprotect(FRR->f_orig, 4, PROT_READ|PROT_WRITE|PROT_EXEC);
if (ret != 0)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 77 of 83
goto ERROR;
// Prepare to populate the stub and make it executable
ret = mprotect(FRR->f_stub, DEFAULT_STUBSZ, PROT_READ|PROT_WRITE|PROT_EXEC);
if (ret != 0)
goto ERROR;
memcpy(FRR->f_bytes, (char *)FRR->f_orig, BYTES_PER_INSTRUCTION);
// Unconditional branch (relative)
branch.OP = BRANCH_MOPCODE;
branch.AA = 1;
branch.LK = 0;
// Create unconditional branch from "stub" to "original"
target_address = (u_int32_t)(FRR->f_orig + 4) >> 2;
if (target_address >> 25) {
fprintf(stderr, "This demo is out of luck. Target address too far.\n");
goto ERROR;
} else
printf(" FRR: target_address for stub -> original is %#x.\n",
target_address);
branch.LI = target_address;
memcpy((char *)FRR->f_stub, (char *)FRR->f_bytes, BYTES_PER_INSTRUCTION);
memcpy((char *)FRR->f_stub + BYTES_PER_INSTRUCTION, (char *)&branch, 4);
// Create unconditional branch from "original" to "new"
target_address = (u_int32_t)FRR->f_new >> 2;
if (target_address >> 25) {
fprintf(stderr, "This demo is out of luck. Target address too far.\n");
goto ERROR;
} else
printf(" FRR: target_address for original -> new is %#x.\n",
target_address);
branch.LI = target_address;
ret = hw_compare_and_store(*((u_int32_t *)FRR->f_orig),
*((u_int32_t *)&branch),
(u_int32_t *)FRR->f_orig,
&dummy_address);
if (ret != 1) {
fprintf(stderr, "Atomic store failed.\n");
goto ERROR;
} else
printf(" FRR: Atomically updated instruction.\n");
return FRR;
ERROR:
if (FRR && FRR->f_stub)
free(FRR->f_stub);
if (FRR)
free(FRR);
return FRR;
}
int
frr_remove(frr_data_t *FRR)
{
int ret;
u_int32_t dummy_address;
if (!FRR)
return 0;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 78 of 83
ret = mprotect(FRR->f_orig, 4, PROT_READ|PROT_WRITE|PROT_EXEC);
if (ret != 0)
return -1;
ret = hw_compare_and_store(*((u_int32_t *)FRR->f_orig),
*((u_int32_t *)FRR->f_bytes),
(u_int32_t *)FRR->f_orig,
&dummy_address);
if (FRR && FRR->f_stub)
free(FRR->f_stub);
if (FRR)
free(FRR);
FRR = (frr_data_t *)0;
return 0;
}
int
function(int i, char *s)
{
int ret;
char *m = s;
if (!s)
m = "(null)";
printf(" CALLED: function(%d, %s).\n", i, m);
ret = i + 1;
printf(" RETURN: %d = function(%d, %s).\n", ret, i, m);
return ret;
}
int (* function_stub)(int, char *);
int
function_new(int i, char *s)
{
int ret = -1;
char *m = s;
if (!s)
m = "(null)";
printf(" CALLED: function_new(%d, %s).\n", i, m);
if (function_stub) {
printf("CALLING: function_new() --> function_stub().\n");
ret = function_stub(i, s);
} else {
printf("function_new(): function_stub missing.\n");
}
printf(" RETURN: %d = function_new(%d, %s).\n", ret, i, m);
return ret;
}
int
main(int argc, char **argv)
{
int ret;
int arg_i = 2;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 79 of 83
char *arg_s = "Hello, World!";
frr_data_t *FRR;
function_stub = (int(*)(int, char *))0;
printf("[Clean State]\n");
printf("CALLING: main() --> function().\n");
ret = function(arg_i, arg_s);
printf("\n[Installing Rerouting]\n");
printf("Maximum branch target address is %#x (32MB).\n", (1 f_stub;
else {
fprintf(stderr, "main(): frr_install failed.\n");
return 1;
}
printf("\n[Rerouting installed]\n");
printf("CALLING: main() --> function().\n");
ret = function(arg_i, arg_s);
ret = frr_remove(FRR);
if (ret != 0) {
fprintf(stderr, "main(): frr_remove failed.\n");
return 1;
}
printf("\n[Rerouting removed]\n");
printf("CALLING: main() --> function().\n");
ret = function(arg_i, arg_s);
return 0;
}
Figure 332 shows a sample run of the function-rerouting demonstration program.
Figure 332. Function rerouting in action
$ gcc -Wall -o frr frr.c
$ ./frr
[Clean State]
CALLING: main() --> function().
CALLED: function(2, Hello, World!).
RETURN: 3 = function(2, Hello, World!).
[Installing Rerouting]
Maximum branch target address is 0x2000000 (32MB).
FRR: "new" is at address 0x272c.
FRR: target_address for stub -> original is 0x9a6.
FRR: target_address for original -> new is 0x9cb.
FRR: Atomically updated instruction.
[Rerouting installed]
CALLING: main() --> function().
CALLED: function_new(2, Hello, World!).
CALLING: function_new() --> function_stub().
CALLED: function(2, Hello, World!).
RETURN: 3 = function(2, Hello, World!).
RETURN: 3 = function_new(2, Hello, World!).
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 80 of 83
[Rerouting removed]
CALLING: main() --> function().
CALLED: function(2, Hello, World!).
RETURN: 3 = function(2, Hello, World!).
3.5.4. Cycle-Accurate Simulation of the 970FX
Apple's CHUD Tools package includes the amber and simg5 command-line programs that were
briefly mentioned in Chapter 2. amber is a tool for tracing all threads in a process, recording every
instruction and data access to a trace file. simg5[57] is a cycle-accurate core simulator for the
970/970FX. With these tools, it is possible to analyze the execution of a program at the processor-
cycle level. You can see how instructions are broken down into iops, how the iops are grouped, how
the groups are dispatched, and so on. In this example, we will use amber and simg5 to analyze a
simple program.
[57] simg5 was developed by IBM.
The first step is to use amber to generate a trace of a program's execution. amber supports a few trace
file formats. We will use the TT6E format with simg5.
Tracing the execution of an entire applicationeven a trivial programwill result in the execution of an
extremely large number of instructions. Execution of the "empty" C program in Figure 333 causes
over 90,000 instructions to be traced. This is so because although the program does not have any
programmer-provided code (besides the empty function body), it still contains the runtime
environment's startup and teardown routines.
Figure 333. Tracing an "empty" C program using amber
$ cat null.c
main()
{
}
$ gcc -o null null.c
$ amber ./null
...
Session Instructions Traced: 91353
Session Trace Time: 0.46 sec [0.20 million inst/sec]
...
Typically, you would not be interested in analyzing the execution of the language runtime
environment. In fact, even within your own code, you may want to analyze only small portions at a
time. It becomes impractical to deal with a large numbersay, more than a few thousandof instructions
using these tools. When used with the i or I arguments, amber can toggle tracing for an application
upon encountering a privileged instruction. A readily usable example of such an instruction is one
that accesses an OEA register from user space. Thus, you can instrument your code by surrounding
the portion of interest with two such illegal instructions. The first occurrence will cause amber to turn
tracing on, and the second will cause tracing to stop. Figure 334 shows the program we will trace with
amber.
Figure 334. A C program with instructions that are illegal in user space
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 81 of 83
// traceme.c
#include 
#if defined(__GNUC__)
#include 
#endif
int
main(void)
{
int i, a = 0;
// supervisor-level instruction as a trigger
// start tracing
(void)__mfspr(1023);
for (i = 0; i < 16; i++) {
a += 3 * i;
}
// supervisor-level instruction as a trigger
// stop tracing
(void)__mfspr(1023);
exit(0);
}
We trace the program in Figure 334 using amber with the I option, which directs amber to trace only
the instrumented thread. The i option would cause all threads in the target process to be traced. As
shown in Figure 335, the executable will not run stand-alone because of the presence of illegal
instructions in the machine code.
Figure 335. Tracing program execution with amber
$ gcc -S traceme.c # GCC 4.x
$ gcc -o traceme traceme.c
$ ./traceme
zsh: illegal hardware instruction ./traceme
$ amber -I ./traceme
...
* Targeting process 'traceme' [1570]
* Recording TT6E trace
* Instrumented executable - tracing will start/stop for thread automatically
* Ctrl-Esc to quit
* Tracing session #1 started *
Session Instructions Traced: 214
Session Traced Time: 0.00 sec [0.09 million inst/sec]
* Tracing session #1 stopped *
* Exiting... *
amber creates a subdirectory called TRace_xxx in the current directory, where xxx is a three-digit
numerical string: 001 if this is the first trace in the directory. The TRace_xxx directory contains
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 82 of 83
further subdirectories, one per thread in your program, containing TT6E traces of the program's
threads. A trace provides information such as what instructions were issued, what order they were
issued in, what were the load and store addresses, and so on. Our program has only one thread, so the
subdirectory is called thread_001.tt6e. As shown in Figure 335, amber reports that 214 instructions
were traced. Let us account for these instructions by examining the generated assembly traceme.s,
whose partial contents (annotated) are shown in Figure 336. Note that we are interested only in the
portion between the pair of mfspr instructions. However, it is noteworthy that the instruction
immediately following the first mfspr instruction is not included in amber's trace.
Figure 336. Accounting for instructions traced by amber
; traceme.s (compiled with GCC 4.x)
mfspr r0, 1023
stw r0,60(r30) ; not traced
; instructions of interest begin here
li r0,0
stw r0,68(r30)
b L2
L3:
lwz r2,68(r30) ; i[n]
mr r0,r2 ; i[n + 1]
slwi r0,r0,1 ; i[n + 2]
add r2,r0,r2 ; i[n + 3]
lwz r0,64(r30) ; i[n + 4]
add r0,r0,r2 ; i[n + 5]
stw r0,64(r30) ; i[n + 6]
lwz r2,68(r30) ; i[n + 7]
addi r0,r2,1 ; i[n + 8]
stw r0,68(r30) ; i[n + 9]
L2:
lwz r0,68(r30) ; i[n + 10]
cmpwi cr7,r0,15 ; i[n + 11]
ble cr7,L3 ; i[n + 12]
mfspr r0, 1023
Each of the 3 instructions before the L3 loop label are executed only once, whereas the rest of the
instructions that lie between the L3 loop label and the second mfspr instruction are executed during
one or all iterations of the loop. Instructions i[n] tHRough i[n + 9] (10 instructions) are executed
exactly 16 times, as the C variable i is incremented. The assembly implementation of the loop begins
by jumping to the L2 label and checks whether i has attained the value 16, in which case the loop
terminates. Since i is initially zero, instructions i[n + 10] through i[n + 12] (3 instructions) will
be executed exactly 17 times. Thus, the total number of instructions executed can be calculated as
follows:
3 + (10 x 16) + (3 x 17) = 214
Let us now run simg5 on this trace. simg5 allows you to change certain characteristics of the
simulated processor, for example, by making the L1 I-cache, the L1 D-cache, the TLBs, or the L2
cache infinite. There also exists a Java viewer for viewing simg5's output. simg5 can automatically
run the viewer upon finishing if the auto_load option is specified.
$ simg5 trace_001/thread_001.tt6e 214 1 1 test_run1 -p 1 -b 1 -e 214 -auto_load
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 83 of 83
Figure 337 shows simg5's output as displayed by the Java viewer. The left side of the screen contains