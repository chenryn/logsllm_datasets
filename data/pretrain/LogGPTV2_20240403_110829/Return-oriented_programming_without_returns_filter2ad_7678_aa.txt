title:Return-oriented programming without returns
author:Stephen Checkoway and
Lucas Davi and
Alexandra Dmitrienko and
Ahmad-Reza Sadeghi and
Hovav Shacham and
Marcel Winandy
Return-Oriented Programming without Returns
Stephen Checkoway†, Lucas Davi‡, Alexandra Dmitrienko‡, Ahmad-Reza Sadeghi‡,
Hovav Shacham†, Marcel Winandy‡
†Department of Computer Science and Engineering
University of California, San Diego
La Jolla, California, USA
‡System Security Lab
Ruhr-Universität Bochum
Bochum, Germany
ABSTRACT
We show that on both the x86 and ARM architectures it is possible
to mount return-oriented programming attacks without using return
instructions. Our attacks instead make use of certain instruction
sequences that behave like a return, which occur with sufﬁcient
frequency in large libraries on (x86) Linux and (ARM) Android to
allow creation of Turing-complete gadget sets.
Because they do not make use of return instructions, our new
attacks have negative implications for several recently proposed
classes of defense against return-oriented programming: those that
detect the too-frequent use of returns in the instruction stream;
those that detect violations of the last-in, ﬁrst-out invariant nor-
mally maintained for the return-address stack; and those that mod-
ify compilers to produce code that avoids the return instruction.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Security, Algorithms
1.
INTRODUCTION
This paper is about the feasibility of certain defenses against
return-oriented programming. In the last year, several natural de-
fenses have been proposed that target properties of return-oriented
attacks and are intended to be simpler and have lower overhead than
a comprehensive defense such as Control-Flow Integrity (CFI) [1,
14].1 In this paper, we show that these narrowly tailored defenses
are incomplete by devising a new variant of return-oriented pro-
gramming that evades them. Our results call into doubt the useful-
ness of these ad-hoc defenses.
Return-Oriented Programming.
Return-oriented programming allows an attacker to exploit mem-
ory errors in a program without injecting new code into the pro-
1Note that even the closest to a generally available CFI instantiation
for ARM, Google’s NaCl [40], would require substantial additional
development to support full CFI for general-purpose ARM code.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
gram’s address space. In a return-oriented attack, the attacker ar-
ranges for short sequences of instructions in the target program to
be executed, one sequence after another. Through a choice of these
sequences and their arrangement, the attacker can induce arbitrary
(Turing-complete) behavior in the target program. Traditionally,
the instruction sequences are chosen so that each ends in a “return”
instruction, which, if the attacker has control of the stack, allows
control to ﬂow from one sequence to the next — and gives return-
oriented programming its name.
The organizational unit of return-oriented programming is the
gadget, an arrangement of instruction sequence addresses and data
that, when run, induces some well-deﬁned behavior, such as com-
puting an exclusive-or or performing a conditional branch. Return-
oriented exploits begin by devising a Turing-complete set of gad-
gets, from which any desired attack functionality is then synthe-
sized.2
Return-oriented programming was introduced by Shacham in
2007 [41] for the x86 architecture. It was subsequently extended
to the SPARC [3], Atmel AVR [15], PowerPC [26], Z80 [4], and
ARM [23] processors. While the original return-oriented attack
was largely manual, later work showed that each stage of the attack
can be automated [3, 38, 20, 23]. Return-oriented programming has
proved useful for compromising Harvard-architecture platforms,
such as Sequoia’s AVC Advantage voting machine [4] and Apple’s
iPhone [22, 30], on which traditional code injection is not a possi-
bility.
Defenses Against Return-Oriented Programming.
The instruction stream executed during a return-oriented attack
as described above is different from the instruction stream executed
by legitimate programs in at least two ways: ﬁrst, it contains many
return instructions, just a few instructions apart; second, it unwinds
the stack with return instructions for which there were no corre-
sponding “call” instructions. These differences have been seized
2The crucial feature of return-oriented programming is Turing
completeness without code injection. A great deal of work prior
to 2007 showed how to leverage control of the stack to invoke
and chain libc functions [29, 31] and short instruction sequences
such as pops followed by returns [33, 24] and even to produce un-
conditional loops [36, 37]. On most platforms, one can use these
techniques to mark some memory region both writable and exe-
cutable, then inject and execute arbitrary native machine code from
that memory region as a second stage; the machine code is Turing
complete, of course, so the ﬁrst stage need not be Turing complete.
(McDonald proposed essentially this approach in 1999 to bypass
Solaris’s nonexecutable stack [29].) Exploits of this sort are not a
contribution of this paper, nor of Shacham’s 2007 paper [41]. In-
deed, setting aside Turing completeness, the observation that code
reuse attacks might be feasible using chaining instructions other
than “return” was made by the PaX team in 2003 [34].
559upon by researchers as the basis for mechanisms to detect and de-
feat return-oriented attacks:
• The ﬁrst difference suggests a defense that looks for instruc-
tion streams with frequent returns. Davi, Sadeghi, and Wi-
nandy [12] and Chen et al. [6] both use dynamic binary in-
strumentation frameworks (Pin [28] and Valgrind [32], re-
spectively) to instrument program code. With both systems,
three consecutive sequences of ﬁve or fewer instructions end-
ing in a return trigger an alarm.
• The second difference suggests a defense that looks for vio-
lations of the last-in, ﬁrst-out stack invariant usually main-
tained in benign programs by the call and return instruc-
tions. These solutions can be categorized in compiler-based
solutions like Stack Shield [45] and RAD [7]; instrumen-
tation-based solutions securing function prologues and epi-
logues [35, 18]; those using just-in-time compilation, e.g.,
TRUSS [42] and ROPdefender [13]; and, ﬁnally, hardware-
facilitated solutions [16, 17]. All these proposals guarantee
the integrity of return addresses, which is violated in conven-
tional return-oriented programming attacks.
• More generally, if a body of code doesn’t contain return in-
structions, then traditional return-oriented programming is
impossible. Li et al. [25] propose a compiler for the x86 that
avoids issuing 0xc3 bytes that can be used as unintended
return instructions and that replaces intended call and return
instructions with an indirect call mechanism that pushes a
“return index” onto the stack instead of a return address to
avoid the return in the function epilogue.
While several of these defenses build on binary instrumentation
platforms and inherit the performance degradation that binary in-
strumentation entails, the properties they verify are amenable to
hardware implementation at greatly reduced overhead. What we
show in this paper is that these defenses would not be worthwhile
even if implemented in hardware. Resources would instead be bet-
ter spent deploying a comprehensive solution, such as CFI [1, 14].
Our Contribution.
We show that, on both the x86 and the ARM, it is possible to
perform return-oriented programming without using return instruc-
tions. We show that instruction sequences exist that behave like re-
turns, and that these can be used instead of returns to chain useful
sequences together to yield Turing-complete functionality.
Return instructions have two properties that make them useful
for return-oriented programming: (1) they transfer control of ex-
ecution by means of an indirect jump; and (2) they update some
processor state, so a subsequent return will not transfer control to
the same location. In the case of actual return instructions, the lo-
cation to which control is transferred is the address at the top of the
stack, and the updated shared state is the stack pointer. On both the
x86 and the ARM, instruction sequences exist that have these same
two properties, but that do not include a return instruction. These
sequences update a piece of global state (e.g., the stack pointer),
load the address of the next instruction sequence to execute based
on this updated state, and branch to the address loaded.
Unlike return instructions, which are plentiful, our update-load-
branch instruction sequences occur too infrequently for us to ex-
pect to obtain a gadget set where each instruction sequence used
ends in the two or three instructions that make up the update-load-
branch operation. To overcome this, we reuse a single such update-
load-branch instruction sequence as a trampoline. Each instruction
sequence we use in composing our gadget set ends in an indirect
jump to the trampoline, which redirects the execution to the next
sequence of instructions. We discuss these techniques in Section 2.
In Section 3 we describe a Turing-complete gadget set for the
x86 that we have created based on the libc and certain large libraries
distributed with Debian GNU/Linux 5.0.4 (“Lenny”). In Section 4
we similarly describe a Turing-complete gadget set on Google’s
Android 2.0 (“Eclair”). The x86 is the dominant architecture for
desktop and server computing; within the last few years ARM has
achieved similar dominance in mobile computing. Thus our ﬁnd-
ings have implications for both major architectures in use today.
In Section 5, we consider how an attacker undertakes what Dino
Dai Zovi calls the stack pivot [9] — taking control of the stack
pointer to execute return-oriented code — without using return in-
structions. And, for completeness, we show in Section 6 complete
return-oriented exploits without return instructions against sample
target programs for both architectures.
Negative Implications for Defenses.
Our attack has negative implications for defenses against return-
oriented programming that look for return instructions in order to
recognize a return-oriented instruction stream. Defenses of the ﬁrst
kind considered above, which detect the use of several return in-
structions in close succession, will not detect attacks structured like
the ones we introduce in this paper since these attacks make use of
either one return or none at all. When it is possible to initiate an at-
tack without a return, the LIFO invariant of the return-address stack
is not violated, so defenses of the second sort will also not detect
the attacks. Defenses of the third kind, which rewrite binaries to
eliminate return instructions, are likewise irrelevant, since return
instructions, whether intended or unintended, are never used.
Because our attack does not violate the LIFO invariant of the
return-address stack, it is not clear that defenses that maintain a
shadow return-address stack can be salvaged. Maintaining a shadow
copy of jump targets would not be useful, because no simple invari-
ant governs these targets in benign programs.3
On the other hand, it may be possible to patch defenses of the
ﬁrst kind to look not just for several returns in quick succession but
also for several indirect jumps in quick succession. This would de-
tect attacks structured as ours are. Doing so without being able,
provably, to detect that every kind of return-like instruction se-
quence that a return-oriented program might use risks engaging
in a classic cat-and-mouse game in which attackers switch to new
return-like sequences to evade the upgraded defenses. Prior to
our results in this paper, it appeared that return-oriented program-
ming unavoidably relied on return instructions, making these in-
structions attractive targets for detection and defense. Now, how-
ever, it appears that a different property must be found by which
to detect return-oriented attacks. Instead of such a cat-and-mouse
game, it would be better to deploy a comprehensive defense such
as CFI.
Full Versions.
This paper represents the merging of two papers available sepa-
rately as technical reports [5, 11]. Some details are omitted in this
version due to space constraints.
2. ROP WITHOUT RETURNS
In this section we describe how return-like instruction sequences
can substitute for rets, allowing return-oriented programming with-
out use of return instructions.
3We further observe that shadow return-address stacks are difﬁcult
to keep synchronized in the presence of longjmp calls, thunks, and
other unusual forms of control transfer; a defense that relies on the
correctness of the shadow return-address stack may be brittle.
560Assumptions and Adversary Model.
We deﬁne a strong adversary model. For our attack we assume
the availability of standard protection mechanisms against code in-
jection and return address corruption attacks.
1. We assume that the target platform may enforce the W ⊕ X
security model.
2. We assume that the target platform may use countermea-
sures to defend against/detect conventional return-oriented
programming attacks, as described in Section 1.
3. We assume that the target platform provides an application
with some bug allowing us to divert a target program’s con-
trol ﬂow without using any return (i.e., function epilogue)
instruction. We want to avoid the use of any return instruc-
tion, so that our attack circumvents return address checkers.
The High-Level Idea.
A ret instruction has the following effects: (1) it retrieves the
four-byte value at the top of the stack, and sets the instruction
pointer (eip) to that value, so that the instructions beginning at that
address execute; and (2) it increases the value of the stack pointer
(esp) by four, so that the top of the stack is now the word above
the word assigned to eip. In return-oriented programming, the lo-
cation of each instruction sequence is written to the stack; when a