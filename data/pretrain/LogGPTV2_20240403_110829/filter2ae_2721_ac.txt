    * JNDIConfig (4.7)
    * SpringBFAdv (4.12)
    * SpringCompAdv (4.11)
  * 附加风险
XStream 提供了 JavaBeanConverter 选项，基于 bean setter 机制的exp变得可用。
  * 修复、缓解措施
XStream 通过 TypePermission 提供了类型过滤，可以来实现白名单。
## 4 Gadgets/Payloads
出于测试目的，所有描述的 gadget payloads 生成器都一次发布于
### 4.1 Common
有两种方法可以最终实现 Java 中任意代码的执行。除了通过 Runtime->exec() 执行系统命令，还有
java.lang.ProcessBuilder 和脚本运行时环境,这通常涉及到攻击者提供的字节码定义一个类，并初始化。在这方案中将会构造一个
java.net.URLClassLoader 关联到攻击者提供的代码库 从中初始化 class
。要触发这类机制，通常需要执行任意方法调用的能力，因此，通常需要中介来执行由某些交互触发的调用。
#### 4.1.1 XalanTemplatesImpl
这个类第一次使用是在2013年，由 Adam Gowdiak 用于沙箱逃逸和在调用某些方法时提供通过 Java 字节码来直接定义和初始化类的能力。
Oracle/OpenJDK 是一个修改过的 Xalan 副本，所以这有两种选择
com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl（没有附加类路径限制、都可用）
和上游实现的 org.apache.xalan.xsltc.trax.TemplatesImpl（ 需要将其添加入路径）。
两者之间有一些细微但重要的区别。Java 8u45 版本之后，取消了在访问实现代码执行之前对临时变量
_tfactoryfield的引用。这意味着为了恢复一个对我们有用的对象，我们要么需要能够设置临时字段来调用任意构造函数，要么需要调用一个
unmarshaller 的 readobject()。原始的 Xalan 实现没有这个限制。
其他必需字段的setter 是 private/protected ，因此只能用于哪些支持调用 non-public setters的
unmarshallers 。
为了触发类初始化、代码执行，大多数情况下 newTransformer() 都要被用到。但是它可以通过 public
getOutputProperties() 或 private getTransletInstance() 来触发。
#### 4.1.2 Code execution via JNDI references
JNDI 提供多种访问目录复杂存储对象的机制。至少有两种机制， RMI 和 LDAP 允许 原生 Java 对象通过目录服务被访问，他们使用 Java
Serialization 存储、传输。两种机制都允许从代码库中加载 class
。然而，由于显而易见的安全因素，这些机制在相当长的一段时间内默认没有被启用。
但是JNDI也有一个引用机制，允许将 JNDI 存储的对象指示到其他目录位置加载。 这些引用也可以指定一个
javax.naming.spi.ObjectFactory 来实例化、检索他们。允许指定一个代码库来装载 factory
class，不管是什么原因，这里并没有对它进行任何限制。利用这种机制，在RMI LDAP 中发布攻击exp 。 Java 8u121
添加了对代码库的限制，但是仅仅是 RMI。
使用攻击者提供的参数调用 javax.naming.InitialContext->lookup() ，这样就会连接到攻击者控制的服务器。
该服务器可以返回一个指定 object factory 的引用，一个攻击者控制的url(代码库)。
默认的 JNDI 实现会直接利用提供的代码库构造一个 URLClassLoader，通过它加载指定的class 进而执行了攻击者的恶意代码。（有关代码在
javax.naming.spi.NamingManager->getObjectInstance()）
应该注意到，有些可能会重写 object factory
的行为(javax.naming.spi.NamingManager->setObjectFactoryBuilder()),至少
Wildfly/JBoss 的实现就限制了通过远程代码库加载 object factories。但是,仍然可以使用这个向量触发攻击者数据的java反序列化。
如果 javax.naming.Context 实例被攻击者控制且 javax.naming.spi.ContinuationContext
可以被恢复，网络链接可以配置，通过 getTargetContext() ，ContinuationContext
方法将触发对一个提供引用的解除。（com.sun.jndi.toolkit.dir.LazySearchEnumerationImpl
这会包含一些详细信息）
### 4.2 com.sun.rowset.JdbcRowSetImpl
来自Oracle/OpenJDK标准库。 实现了 java.io.Serializable ， 有一个默认构造函数，使用的属性也有 getters
函数。代码执行需要两个顺序正确的 setter 调用。
  1. 设置 JNDI URI 的 'dataSourceName'属性
  2. 设置 'autoCommit' 属性
  3. 结果会调用 connect()
  4. 调用 InitialContext->lookup() 来提供 JNDI URI
  5. **适用于**
SnakeYAML (3.1.1), jYAML (3.1.2), Red5 (3.1.5), Jackson (3.1.6)
更新 : fastjson next() 加载远程服务，从远程实例化指定的 class
根据不同情况，可能有不同的机会调用 Iterator->next() :
  1. 使用 java.util.ServiceLoader 调整 Iterator 到 Iterable， 寻找一个可以通过 Iterable 中一个可达调用触发 iteration 的class( 标准库中似乎没有这种class 存在 ，但确实存在 比如 hudson.util.RunList )
  2. 创建一个 mock proxy 返回某些集合类型的迭代器。触发这些的情况十分普遍。直至 Java 8u71, 标准库 AnnotationInvocationHandler 都能被用于构建提到的 mock proxy ， 例如 Google Guice （ anonymous class）或者 Hibernate Validator（org.hibernate.validator.util.annotationfactory.AnnotationProxy）
如果 unmarshaller 能恢复所有组件，那么甚至仅仅一个标准库就能组成利用链完成利用，不需要使用任何 proxy。
  1. hashCode() jdk.nashorn.internal.objects.NativeString 触发 NativeString->getStringValue()
  2. getStringValue() 调用 java.lang.CharSequence->toString()
  3. com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data 的 toString() 调用 Base64Data->get()
  4. Base64Data->get() 触发一个 read() , 来自 javax.activation.DataSource 提供的 java.io.InputStream。 com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource 提供了一个预先存在的实现。
  5. javax.crypto.CipherInputStream 的 read() 调用 javax.crypto.Cipher->update()
  6. javax.crypto.Cipher->update() 导致 chooseFirstProvider() ，从而触发一个提供的任意 Iterator/
  7. **适用于**
Kryo(3.22) XStream(3.25)
### 4.4 com.sun.jndi.rmi.registry.BindingEnumeration
来自Oracle/OpenJDK标准库。未实现 java.io.Serializable,没有默认构造函数，没有 bean setters 。x需要触发
JNDI/RMI lookups, 因此从 Java 8u121 之后就无法实现直接 code execution 了。
  1. 和4.3 描述的一样 使用一个 iterator 触发器
  2. ServiceLoader.LazyIterator 的 hasNext() 和 next() 触发 Enumeration->next()
  3. 调用 BindingEnumeration->next() 触发一个 'names' 中第一个name 的 JNDI/RMI lookup( 参阅 4.1.2)
  4. **适用于**
Kryo(3.22) XStream(3.25)
### 4.5 com.sun.jndi.toolkit.dir.LazySearchEnumerationImpl
来自Oracle/OpenJDK标准库。未实现 java.io.Serializable,没有默认构造函数，没有 bean setters 。与
BindingEnumeration 十分相似， 但是不允许使用一个任意的 DirContext(java 接口
javax.naming.directory DirContext)。
  1. 和4.3 描述的一样 使用一个 iterator 触发器
  2. ServiceLoader.LazyIterator 的 hasNext() 和 next() 触发 Enumeration->next()
  3. LazySearchEnumerationImpl->next() 调用 findNextMatch()
  4. findNextMatch() 从嵌套的 “candidates” 枚举中获取下一个 Binding。 binding 的值 用作一个 getAttributes() 调用的 DirContext
  5. ContinuationDirContext->getAttributes() 调用 ContinuationDirContext->getTargetContext()， 反过来使用 ContinuationContext 里 javax.naming.CannotProceedException 提供的 Reference 对象调用javax.naming.spi.NamingManager-> getContext（）。最终从 Reference 指定的远处库中加载一个class。
  6. **适用于**
Kryo(3.22) json-io(3.2.4) XStream(3.25)
### 4.6 javax.imageio.ImageIO$ContainsFilter
来自Oracle/OpenJDK标准库。未实现 java.io.Serializable,没有默认构造函数，没有 bean setters 。需要恢复一个
java.lang.reflect.Method 实例。
  1. 和4.3 描述的一样 使用一个 iterator 触发器
  2. javax.imageio.spi.FilterIterator->next() 调用 FilterIterator$Filter->filter()
  3. javax.imageio.ImageIO$ContainsFilter->filter() 会调用 FilterIterator 支持的 Iterator 所提供对象上的一个方法。
  4. **适用于**
Kryo(3.22) XStream(3.25)
### 4.7 Commons ConfigurationJNDIConfiguration
需要在路径上配置 commons-configuration 。 未实现 java.io.Serializable，有些没有默认构造器， 没有 bean
stters。 需要恢复 set 或 map 上的额外字段，或者能够使用攻击者的数据调用任意构造函数。
  1. 几乎 Configuration(Map|Set) 上的所有方法调用 报告 hashCode() 结果都会调用 Configuration->getKeys()。
  2. JNDIConfiguration->getKeys() 通过 getBaseContext() 会引发一个 JNDI lookup 到攻击者提供的 URI。
  3. **适用于**
SnakeYAML(3.1.1) XStream(3.25)
### 4.8 C3P0 JndiRefForwardingDataSource
需要路径上配置 c3p0。 是 private 包， java.io.Serializable ， 有默认构造器，用到的属性也有 getters 。
代码执行需要两个 setter 的正确顺序调用。
  1. 设置 JNDI URI 的 'jndiName' (参阅 4.12)
  2. 将 'loginTimeout' 设置为任何触发 inner() 的值
  3. inner() 触发 dereference() 导致引发一个 JNDI lookup 到攻击者提供的 URI
  4. **适用于**
SnakeYAML(3.1.1) jYAML (3.1.2), Jackson (3.1.6)
### 4.9 C3P0WrapperConnectionPoolDataSource
需要路径上配置 c3p0。 java.io.Serializable ， 有默认构造器（需要被调用），用到的属性也有 getters 。 代码执行只需要一个
setter 的调用。
  1. 设置 'userOverridesAsString' 属性来触发在构造函数上注册 PropertyChangeEvent listener
  2. listener 利用属性值调用 C3P0ImplUtils->parseUserOverridesAsString() 。 一部分值会进行16进制解码 （剔除前22个字符和最后一个） 以及 java 反序列化（当然这里可以使用 java deserialization 的 gadget ）
  3. 如果 deserialized 的对象实现了这个接口， com.mchange.v2.ser.IndirectlySerialized->getObject() 就会被调用。
  4. com.mchange.v2.naming.ReferenceIndirector$ReferenceSerialized 就是这样一个实现，它会实例从远程实例化一个类作为 JNDI ObjectFactory。
  5. **适用于**
SnakeYAML (3.1.1), jYAML (3.1.2), YamlBeans (3.1.3), Jackson (3.1.6),BlazeDS
(3.1.4), Red5 (3.1.5), Castor (3.1.7)
### 4.10 Spring BeansPropertyPathFactoryBean
需要在路径中存在 spring-beans 和 spring-context。两个类型都有默认构造函数。 SimpleJndiBeanFactory 未实现
java.io.Serializable , 属性也没有各自的 getter 方法。 Spring AOP 提供了至少两种类型可以替代
PropertyPathFactoryBean 。
  1. 设置 PropertyPathFactoryBean 的 targetBeanName 'targetBeanName' 属性未 JNDI URI ,'propertyPath' 设为非空。
  2. 设置 'beanFactory' 属性未 SimpleJndiBeanFactory 的一个对象， 并将其 'shareableResources' 属性设置为一个包含 JNDI URI 的 array 。
  3. setBeanFactory() 会检查目标 bean 是单例模式(因为我们将其设置为可共享资源)，并使用 bean name 调用beanfactory->getBean()
  4. 会调用 JndiTemplate->lookup() 最终触发 InitialContext->lookup()
  5. **适用于**
SnakeYAML (3.1.1), BlazeDS (3.1.4), Jackson (3.1.6)
### 4.11 Spring AOPPartiallyComparableAdvisorHolder
需要路径中存在 spring-aop 和 aspectj。不需要构造函数调用，也不需要恢复非 java.io.serializable 的能力。
  1. 在 PartiallyComparableAdvisorHolder 上触发 toString()
  2. 在 PartiallyComparableAdvisorHolder->toString() 里 (Advisor & Ordered)->getOrder()
  3. AspectJPointcutAdvisor->getOrder() 调用 AbstractAspectJAdvice->getOrder()
  4. AspectInstanceFactory->getOrder()
  5. BeanFactoryAspectInstanceFactory->getOrder() 最终调用 BeanFactory->getType()
  6. SimpleJndiBeanFactory->getType() 触发 JNDI lookup
获取 tostring() 调用并不像使用Java deserialization 那样简单 ,但是也是可能的。
com.sun.org.apache.xpath.internal.objects.XObject 会在equals() 方法中调用 toString()。
标准库 collections 检查相等时，仅仅判断对象的 hash 值是否匹配。 但是 XObject 的 hash 值可以通过正确的选择她的
string 值进而被设置为一个任意值 ，PartiallyComparableAdvisorHolder 没有 hashCode()
的实现,它的表现就无法预测。 HotSwappableTargetSource 修复了这个问题： 它有一个修复了的 hash code ，提供
HotSwappableTargetSource 给其 equals() 方法 将会检查他们的 'target' （是 object 类型）字段的值是否相等
  * **适用于**
Kryo (3.2.2)†, Hessian/Burlap (3.2.3), XStream (3.2.5)
### 4.12 Spring AOPAbstractBeanFactoryPointcutAdvisor
路径中需要存在 spring-aop。 需要默认构造函数调用或恢复临时字段的能力，以及恢复非 java.io.serializable 的能力。
  1. AbstractPointcutAdvisor->equals() 调用 AbstractBeanFactoryPointcutAdvisor->getAdvice()