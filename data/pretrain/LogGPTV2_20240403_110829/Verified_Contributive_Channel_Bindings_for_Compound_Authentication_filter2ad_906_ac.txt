same. Now, suppose C begins a third key exchange; M can
9
The SSH cumulative session hash is computed as the
incremental hash of the sequence of exchange hashes. Each
SSH exchange includes the hash of the previous exchange
Hi−1 in the hash for the current exchange Hi. The initial
exchange treats the previous exchange hash (H0) as empty.
Now, when generating the session key, we no longer need to
mix in the session id, since the cumulative session hash is
bound to all previous exchanges, including the ﬁrst one.
H0 = 
Hi = hash(log||pk S||e||f||K||Hi−1)
sk i = kdf SSH (K, Hi)
In the next section, we show that this cumulative hash prevents
the triple-exchange vulnerability.
C. IKEv2 Extended Session Keys
IKEv2 key derivation suffers from the same weakness as
TLS, leading to similar key synchronization attacks. While the
AUTH payloads provide a good channel binding for EAP
authentication, they are not suitable for IKEv2 resumption
or re-authentication. Consequently, we propose an extended
session key derivation for the IKE_SA_INIT protocol that
derives the session key from the Difﬁe-Hellman shared secret,
the nonces, and the public keys:
sk = kdf IKEv2 (gxy mod π, gx mod π, gy mod π, NI , NR)
the IKEv2 session key is context bound to all
Much like the TLS session hash, this modiﬁcation ensures
that
the
IKE_SA_INIT parameters, and hence prevents key synchro-
nization attacks, prevents transcript synchronization during
resumption, and ﬁxes the unique channel binding [36].
V. FORMAL ANALYSIS WITH PROVERIF
A. Presentation of the Model
We write our protocol models in the input language of
ProVerif [18] and we refer to its manual for the full syntax.
Here, we only describe the salient features of our models.
Cryptographic library: Asymmetric-key encryption and
digital signature primitives are modeled in the standard
symbolic (Dolev-Yao) style. The terms aenc(pk(s),p) and
adec(s,c) represent asymmetric encryption and decryption,
where s is a private key, pk(s) its public part and p the
plaintext. Their behavior
is deﬁned by the single equa-
tion adec(s,aenc(pk(s),p)) = p. Hence, a plaintext encrypted
with public key pk(s) can be recovered only if the pri-
vate key s is available. Similarly, signatures are written
sign(s,d) and they can be veriﬁed by using the equation
check(pk(s),d,sign(s,d)) = true. This model implicitly excludes
collisions between different function symbols, so an asymmet-
ric encryption and a signature cannot return the same value,
even if the same key-pair is used for both operations.
In many protocols, authenticated encryption is obtained by
composing symmetric-key encryption with a message authen-
tication scheme. In our model, we abstract over these composi-
tions and model a perfect authenticated encryption scheme via
the equation ad(k, ae(k,p)) = p where ae(k,p) and ad(k,c) are the
authenticated encryption and decryption functions respectively
and k is a symmetric key and p is a plaintext.
One way functions such as hashes and key derivation func-
tions are modeled as terms hash(x), kdf(k,x) without additional
equations. In particular, they cannot be inverted.
As indicated in our threat model of Section II, we deﬁne
DH key agreement in the presence of bad groups and keys. We
start by deﬁning a standard core DH model that only handles
good keys and one static good group. The following equation
captures the core DH property
E(E(G,x),y) = E(E(G,y),x)
where E(e,x) represents the DH modular exponentiation func-
tion, G is the static good DH group, and x,y are honestly
generated keys. This simple equation was adequate to analyze
our models and ﬁnd the attacks we were interested in, but for
more precise analyses of DH protocols one would need to use
more elaborate encodings for exponentiation [38], or tools that
provide specialized DH support (e.g. [39]).
We extend this core DH model by wrapping it within a
DHExp(elt,x) function that handles multiple good groups, bad
groups, and bad elements (public keys) as follows:
1: DHExp(goodDHElt(goodDHGroup(id),x),y) =
goodDHElt(goodDHGroup(id),E(x,y))
2: DHExp(goodDHElt(badDHGroup,x),y) = badDHElt(badDHGroup)
3: DHExp(badDHElt(gr),y) = badDHElt(gr).
The equation at line 1 handles the case where good groups and
elements are used. In this case, the good group has an identiﬁer
id, and exponentiation in this group behaves like exponentiation
over the core group G. The equations at lines 2 and 3 state
that, whenever DHExp is computed for a bad group or bad
element, a constant bad element for that group is obtained. The
adversary knows the term badDHGroup and can always apply
the badDHElt(gr) function to obtain bad elements. Hence, our
model over-approximates small subgroup conﬁnement, in that
the small subgroup has always size 1, and hence the attacker
can guess the computed subgroup value with probability 1.
Overall process structure: Given a two-party authentica-
tion protocol, we model one process per role, initiator() and
responder() respectively. If one of the role needs to authenticate
itself, the corresponding process takes a credential (and its
secret) as an input parameter. A top level process sets up
credentials and runs an unlimited number of instances of each
role. For example, the top-level process for a key-exchange
protocol where the responder authenticates (using a public key)
to an anonymous initiator is written as:
process
(∗ Responder credential generation ∗)
new rsec:privkey; let rpub = pk(rsec) in out(net,rpub);
(!initiator() | !responder(rpub,rsec))
When a process successfully ends a protocol instance, it
stores the local identiﬁer l, the authenticated credentials ci, cr,
the instance parameters params and the secret sk into a table,
which acts as a session database. Initiators and responders use
disjoint tables, named idb and rdb respectively.
For protocols that allow re-keying, session renegotiation or
resumption, the initiator process has the following structure:
11
let initiator() =
... (∗ Model of initial key−exchange ∗)
insert idb(l,ci,cr,params,sk)
| get idb(l,ci,cr,params,sk);
... (∗ Model of subsequent key−exchange ∗)
insert idb(l’,ci’,cr’,params’,sk’)
| ... (∗ Model of other subsequent key−exchange ∗)
That is, a process non-deterministically either runs the standard
(initial) key exchange, or picks a session from the database and
starts some subsequent key exchange method like re-keying or
resumption. Responder processes have the same pattern.
In our model, a principal process accepts any credential
from the other principal, as long as proof of possession of
its associated secret can be provided. Hence, a session can be
successfully completed either with an honest principal, or with
the attacker who is using a compromised credential.
Honest principals only use honestly generated credentials
and associated secrets; the attacker can generate any number of
compromised credentials and use them in protocol instances.
Hence, our model captures static credential compromise, but
does not fully handle dynamic credential or session secret
compromise, where some honest credentials or session secret
are later leaked to the attacker, or where some compromised
secrets are used by honest principals. Nevertheless, we can
handle speciﬁc dynamic compromise scenarios by adapting the
model of honest principals to intentionally leak credentials or
session secrets after a certain step of a protocol instance.
We deﬁne several security properties as ProVerif queries
and verify them against this attacker model, as we below.
B. Channel Synchronization
Channel synchronization over a channel binding parameter
cb occurs when the following proposition is violated:
Whenever an initiator and responder each complete
a protocol instance with the same channel binding
cb, all other parameters (params, sk) at these two
instances must be the same.
We encode such proposition in ProVerif by deﬁning an
auxiliary oracle() process, that tries to get from both the initiator
and responder tables an entry having the same channel binding
parameter cb, but different keys or credentials. If this suc-
ceeds, the oracle() process emits an event(Session sync()). The
query event(Session sync()) checks for the reachability of this
event; hence, if ProVerif can prove that event(Session sync())
is unreachable, it means there is no channel synchronization
attack for cb on the analyzed protocol.
1) TLS Initial Handshake: We begin by modeling TLS-
RSA and using the master secret ms as a channel binding.
As described in [16], synchronizing the master secret ms on
TLS-RSA is not complicated: since ms = kdf (pms, nc, ns),
it is enough to synchronize the values used for its computation
in order to mount the attack. ProVerif is able to ﬁnd an attack
where the attacker poses as a malicious responder to the honest
initiator and as a malicious initiator to an honest responder.
The honest participants end up with the same master secret
even though their session parameters do not match: they have
different server credentials. Adding further elements to the
channel binding such as the TLS session id does not help, but
using the session hash as channel binding prevents the attack.
We also model TLS-DHE and ProVerif ﬁnds a master
secret synchronization attack by relying on bad groups (as in
[16]). If both client and server check that good DH groups and
keys are being used, ProVerif cannot ﬁnd an attack.
2) SSH Key Exchange and Re-Keying: By comparison, we
analyze encryption key synchronization attacks for the SSH
key exchange protocol by using the session key as a channel
binding. ProVerif can prove that the event(Session sync()) is
unreachable even in the presence of bad DH groups and keys,
both for the ﬁrst key exchange and for re-keying. Indeed, SSH
encryption keys are computed as sk = kdf (K, H, sid), where
K is the potentially bad DH shared secret, but crucially H
is the exchange hash capturing unique information about the
ongoing instance, notably including local unique identiﬁers and
the value of the credential being authenticated.
C. Agreement at Initiator
Agreement for a single protocol (Deﬁnition 1) is modeled
as an authentication query as follows:
query inj−event InitiatorEnd(pk(s),params,sk) =>
inj−event ResponderBegin(pk(s),params,sk) || attacker(s)
where s is the secret associated with credential pk(s), and
params and sk are the instance parameters and shared secret
respectively. That is, if the initiator completes the protocol,
either the responder has completed with the same parameters
and keys, or the responder’s credential is compromised.
1) TLS with Renegotiation and Resumption: ProVerif can
prove agreement at initiator for all the three TLS modes,
namely initial handshakes, renegotiation and resumption, even
when session keys are dynamically compromised. We stress
that this kind of agreement holds even if we do not model
the renegotiation information (RI) extension [12], or any
other channel binding mechanism, since they only apply to
compound authentication, not to single protocol agreement.
2) SSH with Re-keying: According to our deﬁnition, we try
to prove agreement on the shared secret sk and the parameters
H, K, sid, pkS. We model the SSH key exchange protocol,
including re-keying. At the end of each key exchange we can
only prove agreement on K, H and pkS; but, crucially, right
after the key exchange protocol has ended, agreement on sid
and sk fails, and ProVerif hints at the following attack.
First, the attacker connects to a honest server b, obtaining
sk, K, H, sid = H. Second, an honest client tries to connect
to b; the attacker tunnels this key exchange through its current
connection. At the end of the key exchange, client and server
agree on the most recent exchange hash H(cid:48) and DH shared
secret K(cid:48), but they have different session ids and encryption
keys, namely sid(cid:48) = H(cid:48), k(cid:48) = kdf (K(cid:48), H(cid:48), sid(cid:48)) on the client
and k(cid:48)(cid:48) = kdf (K(cid:48), H(cid:48), sid) on the server.
As noted in [40, §6.3], the SSH key exchange protocol
prescribes explicit conﬁrmation only for K and H, via server
digital signature. Conﬁrmation of the encryption keys, and
hence of sid,
is implicitly done when receiving the ﬁrst
12
encrypted application message from the other party, in case
decryption succeeds. Accordingly, if we add an explicit key
conﬁrmation message encrypted under the new keys at the end
of the SSH key exchange, we can successfully prove agreement
on encryption keys and all parameters. In other words, SSH re-
keying does guarantee agreement, but only after the keys have
been conﬁrmed by a pair of additional (application) messages
have been exchanged.
D. Agreement at Responder and Compound Authentication
Agreement at responder is deﬁned symmetrically to agree-
ment at initiator, as:
query inj−event ResponderEnd(pk(s),params,sk) =>
inj−event InitiatorBegin(pk(s),params,sk) || attacker(s).
Following deﬁnition 2, we may want to write compound
authentication as an authentication query over n protocols:
query inj−event Compound ResponderEnd(pk(s),
inj−event Compound InitiatorBegin(pk(s),
params 1,sk 1, ..., params n,sk n) =>
params 1,sk 1, ..., params n,sk n) || attacker(s).
However, the number n of protocol instances is unbound, and
hence this query cannot be practically written. We overcome
this problem by deﬁning a function log(params,pl) that takes
the current instance parameters params and a previous log pl,
and returns a new log that is the concatenation of the current
parameters and the previous log. A constant emptyLog is deﬁned
to bootstrap. Each initiator and receiver session table is updated
to additionally store the log; the ﬁrst key exchange stores
log(params,emptyLog) into its table, while any subsequent key
exchange picks a previous log pl from the table, and at the end
of a successful run stored the new log(params’,pl).
Using log, we write compound authentication at the respon-
der as the following authentication query:
query inj−event Compound ResponderEnd(pk(s),p,sk,log) =>
inj−event Compound InitiatorBegin(pk(s),p,sk,log) || attacker(s).
The log is never used by the protocol, it only appears in the
tables and in the security events. In the protocol, the channel
binding cb must guarantee agreement on the log and hence on
all prior protocol instances.
We note a difference between this query and the more
general Deﬁnition 2, in that our query only proves agreement
on previous sessions. We believe that agreement on subse-
quent sessions can be obtained as a corollary, since a honest
participant will not authenticate attacker-provided parameters
in successive protocol instances.
1) TLS-RSA+SCRAM with Renegotiation and Resumption:
We model agreement at the responder by letting the user
authenticate to the server via the password-based SCRAM
protocol on top of a TLS connection. User authentication can
be performed after any TLS handshake (initial, resumed or
renegotiated) has taken place.
We model dynamic key compromise for all TLS sessions,
by leaking the session keys to the attacker at the completion
of each session. This means that, in practice, all SCRAM
13
messages can be tampered with by the attacker, which accounts
for a strong attacker model. Furthermore, we let the user use
the same password with the attacker, under the condition that
the attacker salt differs from the salt of the honest peers.
ProVerif can prove agreement at the responder at the end
of each SCRAM instance, which shows that,
in isolation,
SCRAM provides user authentication, even when the same
password is used with the attacker.
Compound authentication of TLS-RSA+SCRAM relies on
the use of the tls-unique channel binding in SCRAM.
However, we ﬁnd that
this goal fails when TLS session
resumption is enabled. ProVerif ﬁnds an attack in accordance
with the results of [16]: at the end of the second (resumption)
handshake,
the channel bindings for client and server are
synchronized, hence the attacker can forward the SCRAM
messages between server and client, with the result of authen-
ticating as the user u to the server.
We patch the TLS model to implement the extended master
secret derivation of Section IV-A. For this model, ProVerif is
able to prove compound authentication. Indeed, the addition
of the session hash into the master secret ﬁxes tls-unique
and makes it an adequate channel binding for SCRAM over
TLS, thwarting the channel synchronization attack.
2) SSH-USERAUTH with Re-keying: We model the SSH
user authentication protocol on top of the SSH key exchange
protocol. In our model, the key exchange protocol can be
run several times (for re-keying) but the user authentication
protocol is run only once after the ﬁrst key exchange: this