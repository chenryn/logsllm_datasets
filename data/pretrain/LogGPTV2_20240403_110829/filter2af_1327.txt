# 2021 天翼杯 bbgo Writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
  * 关键算法: 位运算
  * 出处: 2021 天翼杯
  * 工具: IDAPython
  * 考点: Golang 恢复符号, 文件解密
  * 解题技巧: 爆破
#  分析
## 恢复符号
  * 这题恶心在 IDA 7.6 没法恢复符号，估计是出题人魔改了 Golang 编译器的源码或是 patch 了文件
  * （我更倾向于魔改了源码，因为 Golang 初始化 runtime 的时候会对自身的 moduledata 等进行校验，patch 不太容易做到）
  * 所以只能根据 Golang 恢复符号的原理手动进行恢复了，推荐这篇 [Blog](https://www.anquanke.com/post/id/214940)
  * 还原本题符号的脚本如下 
          import idc
      import ida_bytes
      functable_addr = 0x4EFA20
      funcstruct_addr = 0x4F4BE8
      funcname_addr = 0x4BC920
      ea = functable_addr
      while ea a, d->c
          cipher[0] = keys[2*length+2] + p
          cipher[1] = q
          cipher[2] = keys[2*length+3] + m
          cipher[3] = n
      }
  * 然后就是对其进行逆向操作，这里尝试使用 `z3` ，但是由于本题需要爆破，因为效率原因遂放弃，后来意识到因为 `rol` 是循环左移，不会丢失原来 `uint32` 中的 `bits` ，所以可以倒推回去 
          func dec(crc1, crc2 byte, realCipher []uint32) []byte {
          keys := genKey(crc1, crc2)
          cipher := realCipher
          length := 0x14
          var a, b, c, d, c1, tmp1, tmp2, tmp3 uint32
          plain := make([]uint32, 4)
          d = cipher[3]
          c = cipher[2] - keys[2*length+3]
          b = cipher[1]
          a = cipher[0] - keys[2*length+2]
          for index := length; index >= 1; index-- {
              tmp3 = d - keys[2*index]
              d = c
              c1 = b - keys[2*index+1]
              b = a
              tmp1 = bits.RotateLeft32(b*(2*b+1), 7)
              tmp2 = bits.RotateLeft32(d*(2*d+1), 7)
              a = bits.RotateLeft32(tmp3, -int(tmp2)) ^ tmp1
              c = bits.RotateLeft32(c1, -int(tmp1)) ^ tmp2
          }
          plain[0] = a
          plain[1] = b - keys[0]
          plain[2] = c
          plain[3] = d - keys[1]
          bytesPlain := []byte{}
          for i := 0; i < 4; i++ {
              tmp := make([]byte, 4)
              binary.LittleEndian.PutUint32(tmp, plain[i])
              bytesPlain = append(bytesPlain, tmp...)
          }
          return bytesPlain
      }
## 解题
###  爆破未知的 CRC
  * 现在所有部分都逆明白了，这时候需要爆破两个 byte 的 CRC
  * 由于被加密的文件是 PNG 图像，所以它的头部是有特征的，这里就看解密的结果是不是存在 `PNG` 三个字符就行了
  * 写出爆破函数 
          func bruteCRC() (uint8, uint8) {
          var a, b int
          var crc1, crc2 uint8
          file, _ := os.ReadFile("flag.png.enc")
          realCipher := make([]uint32, 4)
          for i := 0; i < 4; i++ {
              realCipher[i] = binary.LittleEndian.Uint32(file[4*i : 4*(i+1)])
          }
          wg := sync.WaitGroup{}
          runtime.GOMAXPROCS(runtime.NumCPU())
          for a = 0; a <= 0xff; a++ {
              for b = 0; b < 0xff; b++ {
                  t1 := a
                  t2 := b
                  wg.Add(1)
                  go func() {
                      plain := dec(byte(t1), byte(t2), realCipher)
                      if strings.Contains(string(plain), "PNG") {
                          crc1 = uint8(t1)
                          crc2 = uint8(t2)
                      }
                      wg.Done()
                  }()
              }
          }
          wg.Wait()
          return crc1, crc2
      }
  * 爆破得到两个 bytes 是 `179, 136`
###  解密文件
  * 解密文件就是很常规了，不再赘述 
          func fileDec(crc1, crc2 uint8) {
          file, _ := os.ReadFile("flag.png.enc")
          realCipher := make([]uint32, 4)
          plainBytes := []byte{}
          for i := 0; i < len(file); i += 16 {
              for j := 0; j < 4; j++ {
                  realCipher[j] = binary.LittleEndian.Uint32(file[i+4*j : i+4*(j+1)])
              }
              tmp := dec(crc1, crc2, realCipher)
              plainBytes = append(plainBytes, tmp...)
          }
          os.WriteFile("flag.png", plainBytes, 0777)
      }
  * Flag 如图所示
## 总结
  * 文件加密题里面经常有爆破若干字节的套路
  * Golang 的动调真的很重要很重要