            {
                __rtld_lock_define_recursive(, lock) struct unique_sym
                {
                    uint32_t hashval;           //符号hash值
                    const char *name;           //名称
                    const ElfW(Sym) * sym;      //符号
                    const struct link_map *map; //所属模块
                } * entries;                   //entries可以理解为struct unique_sym数组的指针, 通过entries[idx]就可找到第idx个符号
                size_t size;                   //有多少个元素
                size_t n_elements;
                void (*free)(void *); //析构函数
            } _ns_unique_sym_table;
            /* 记录命名空间变化的, debug用 */
            struct r_debug _ns_debug;
        } _dl_ns[DL_NNS]; //一个命名空间一个link_namespace结构体
        /* _dl_nns表示使用了多少个命名空间: Dynamic Link Num of NameSpace */
        size_t _dl_nns;
        ...;
    }
  * 接着我们分析下struct link_map, 来看看ld是怎么描述每一个模块的 
    * ELF文件都是通过节的组织的, ld自然也延续了这样的思路,
    * l_info中的指针都指向ELF中Dyn节中的描述符, Dyn中节描述符类型是ElfW(Dyn)
    struct link_map
    {
       ElfW(Addr) l_addr;                /* 模块在内存中的的基地址 */
       char *l_name;                     /* 模块的文件名  */
       ElfW(Dyn) * l_ld;                 /* 指向ELF中的Dynamic节 */
       struct link_map *l_next, *l_prev; /* 双向链表指针 */
       struct link_map *l_real;
       /* 这个模块所属NameSapce的idx  */
       Lmid_t l_ns;
       struct libname_list *l_libname;
       /* 
          l_info是ELF节描述符组成的的数组
          ELF中一个节, 使用一个ElfW(Dyn)描述
          各个类型的节在l_info中的下标固定, 因此可以通过下标来区分节的类型
       */
       ElfW(Dyn) * l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];
       const ElfW(Phdr) * l_phdr; /* ELF的头表  */
       ElfW(Addr) l_entry;        /* ELF入口点  */
       ElfW(Half) l_phnum;        /* 头表中有多少节  */
       ElfW(Half) l_ldnum;        /* dynamic节中有多少描述符  */
        ...;        
    }
  * ElfW(Dyn)是一个节描述符类型, 宏展开结果为Elf64_Dyn, 这个类型被定义在elf.h文件中, 与ELF中的节描述对应 
        typedef struct
    {
    Elf64_Sxword    d_tag;            /* 便签, 用于标注描述符类型 */
    union        
    {
      Elf64_Xword d_val;        /* 内容可以是一个值 */
      Elf64_Addr d_ptr;            /* 也可以是一个指针 */
    } d_un;
    } Elf64_Dyn;
  * 至此rtld_global的结构就清楚了, 他自顶向下按照: 命名空间->模块->节 的形式描述所有的模块, 通过_ns_unique_sym_table描述命名空间中所有的可见符号
  * 图示如下
**_dl_fini()源码分析**
理解了模块是如何组织的之后, _dl_fini的任务就显而易见了:
  * 遍历rtld_global中所有的命名空间
  * 遍历命名空间中所有的模块
  * 找到这个模块的fini_array段, 并调用其中的所有函数指针
  * 找到这个模块的fini段, 调用
    void internal_function _dl_fini(void)
    {
    #ifdef SHARED
        int do_audit = 0;
    again:
    #endif
        for (Lmid_t ns = GL(dl_nns) - 1; ns >= 0; --ns) //遍历_rtld_global中的所有非共享模块: _dl_ns[DL_NNS]
        {
            __rtld_lock_lock_recursive(GL(dl_load_lock)); //对rtld_global上锁
            unsigned int nloaded = GL(dl_ns)[ns]._ns_nloaded;
            /* 如果这个NameSapce没加载模块, 或者不需要释放, 就不需要做任何事, 就直接调用rtld中的函数指针释放锁 */
            if (nloaded == 0 || GL(dl_ns)[ns]._ns_loaded->l_auditing != do_audit)
                __rtld_lock_unlock_recursive(GL(dl_load_lock));
            else //否则遍历模块
            {
                /* 把这个命名空间中的所有模块指针, 都复制到maps数组中  */
                struct link_map *maps[nloaded];
                unsigned int i;
                struct link_map *l;
                assert(nloaded != 0 || GL(dl_ns)[ns]._ns_loaded == NULL);
                for (l = GL(dl_ns)[ns]._ns_loaded, i = 0; l != NULL; l = l->l_next) //遍历链表
                    if (l == l->l_real)                                                /* Do not handle ld.so in secondary namespaces.  */
                    {
                        assert(i l_idx = i;
                        ++i;
                        /* Bump l_direct_opencount of all objects so that they are not dlclose()ed from underneath us.  */
                        ++l->l_direct_opencount;
                    }
                ...;
                unsigned int nmaps = i;    //多少个模块
                /* 对maps进行排序, 确定析构顺序 */
                _dl_sort_fini(maps, nmaps, NULL, ns);
                //释放锁
                __rtld_lock_unlock_recursive(GL(dl_load_lock));    
                /* 从前往后, 析构maps中的每一个模块 */
                for (i = 0; i l_init_called)
                    {
                        /* Make sure nothing happens if we are called twice.  */
                        l->l_init_called = 0;
                        /* 是否包含fini_array节, 或者fini节 */
                        if (l->l_info[DT_FINI_ARRAY] != NULL || l->l_info[DT_FINI] != NULL)
                        {
                            /* debug时打印下相关信息 */
                            if (__builtin_expect(GLRO(dl_debug_mask) & DL_DEBUG_IMPCALLS, 0))
                                _dl_debug_printf("\ncalling fini: %s [%lu]\n\n",DSO_FILENAME(l->l_name),ns);
                            /* 如果有fini_array节的话 */
                            if (l->l_info[DT_FINI_ARRAY] != NULL)
                            {
                                /*
                                    l->l_addr: 模块l的加载基地址
                                    l->l_info[DT_FINI_ARRAY]: 模块l中fini_array节的描述符
                                    l->l_info[DT_FINI_ARRAY]->d_un.d_ptr: 模块l中fini_arrary节的偏移
                                    array: 为模块l的fini_array节的内存地址
                                */
                                ElfW(Addr) *array = (ElfW(Addr) *)(l->l_addr + l->l_info[DT_FINI_ARRAY]->d_un.d_ptr);
                                /* 
                                    ELF中 fini_arraysz节用来记录fini_array节的大小
                                    l->l_info[DT_FINI_ARRAYSZ]: 模块l中fini_arraysz节描述符
                                    l->l_info[DT_FINI_ARRAYSZ]->d_un.d_val: 就是fini_array节的大小, 以B为单位
                                    i: fini_array节的大小/一个指针大小, 即fini_array中有多少个析构函数
                                */
                                unsigned int i = (l->l_info[DT_FINI_ARRAYSZ]->d_un.d_val / sizeof(ElfW(Addr)));
                                while (i-- > 0)    //从后往前, 调用fini_array中的每一个析构函数
                                    ((fini_t)array[i])();
                            }
                            /* 调用fini段中的函数 */
                            if (l->l_info[DT_FINI] != NULL)
                                DL_CALL_DT_FINI(l, l->l_addr + l->l_info[DT_FINI]->d_un.d_ptr);
                        }
                        ...;
                    }
                    /* Correct the previous increment.  */
                    --l->l_direct_opencount;
                }
            }
        }
        ...;
    }
## rtdl_fini()带来的可利用点
rtdl_fini()十分依赖与rtld_global这一数据结构, 并且rtld_global中的数据并没有被加密, 这就带来了两个攻击面
  * 劫持rtld_global中的锁相关函数指针
  * 修改rtld_global中的l_info, 伪造fini_array/ fini的节描述符, 从而劫持fini_array/ fini到任意位置, 执行任意函数
###  劫持rtld_global中的函数指针
ld相关函数在使用rtld_global时都需要先上锁, 以避免多进程下的条件竞争问题
相关函数包括但不限于:
  * _dl_open()
  * _dl_fini()
  * ….
上锁操作是通过宏进行的, 我们将其展开
  * 宏定义: 
        # define __rtld_lock_lock_recursive(NAME) GL(dl_rtld_lock_recursive) (&(NAME).mutex)
    #  define GL(name) _rtld_global._##name
  * 宏展开
        __rtld_lock_lock_recursive(GL(dl_load_lock)); //对rtld_global上锁
    =>    GL(dl_rtld_lock_recursive) (& GL(dl_load_lock).mutex)
    =>    _rtld_global.dl_rtld_lock_recursive(&_rtld_global.dl_load_lock.mutex)
可以看到实际调用的是dl_rtld_lock_recursive函数指针
释放锁的操作也是类似的, 调用的是_dl_rtld_unlock_recursive函数指针, 这两个函数指针再rtld_global中定义如下
    struct rtld_global
    {
        ...;
        void (*_dl_rtld_lock_recursive)(void *);
        void (*_dl_rtld_unlock_recursive)(void *);
        ...;
    }
动态调试中可以看的更清楚:
并且ld作为mmap的文件, 与libc地址固定
也就是说, 当有了任意写+libc地址后, 我们可以通过覆盖_rtld_global中的lock/ unlock函数指针来getshell
###  劫持l_info伪造fini_array节
我们的目标是伪造rtld_global中关于fini_array节与fini_arraysize节的描述
将fini_array节迁移到一个可控位置, 比如堆区, 然后在这个可控位置中写入函数指针, 那么在exit()时就会依次调用其中的函数指针
l_info中关于fini_array节的描述符下标为26, 关于fini_arraysz节的下标是28, 我们动态调试一下, 看一下具体内容
可以发现, l_info中的指针正好指向的就是Dynamic段中相关段描述符
此时我们就可以回答ELF中fini_array中的析构函数是怎么被调用的这个问题了:
  * exit()调用__exit_funcs链表中的_rtdl_fini()函数, 由_rtdl_fini()函数寻找到ELF的fini_array节并调用
假设我们修改rtld_global中的l_info[0x1a]为addrA, 修改l_info[0x1c]为addrB
那么首先再addrA addrB中伪造好描述符
    addrA: flat(0x1a, addrC)
    addrB: flat(0x1b, N)
然后在addrC中写入函数指针就可以在exit时执行了
###  fini_array与ROP
当我们可以劫持fini_array之后, 我们就具备了连续调用多个函数的能力, 那么有无可能像ROP一样, 让多个函数进行组合, 完成复杂的工作?
我们首先需要从汇编层面考察下fini_array中的函数是怎么被遍历并调用的, 因为这涉及到参数传递问题
我们可以看到在多个fini_array函数调用之间, 寄存器环境十分稳定, 只有: rdx r13会被破坏, 这是一个好消息
考察执行call时的栈环境, 我们发现rdi总是指向一个可读可写区域, 可以当做我们函数的缓冲区
那么就已经有了大致的利用思路,
我们让fini_array先调用gets()函数, 在rdi中读入SigreturnFrame
然后再调用setcontext+53, 即可进行SROP, 劫持所有寄存器
如果高版本libc, setcontext使用rdx作为参数, 那么在gets(rdi)后还需要一个GG, 能通过rdi设置rdx,  
再执行setcontext
###  劫持fini
fini段在l_info中下标为13,这个描述符中直接放的就是函数指针, 利用手法较为简单, 但是只能执行一个函数, 通常设置为OGG
例如我们可以修改rtld_global中l_info[0xd]为addrA, 然后再addrA中写入
    addrA: flat(0xd, OGG)
就可以在exit()时触发OGG
###  exit()与FILE
还记得一开始的 **run_exit_handlers么, 在遍历完** exit_funcs链表后, 还有最后一句
      if (run_list_atexit) //调用_atexit
        RUN_HOOK(__libc_atexit, ());
__libc_atexit其实是libc中的一个段
这个段中就是libc退出时的析构函数
其中默认只有一个函数fcloseall()
  * 这个函数会调用_IO_cleanup() 
        int __fcloseall (void)
    {
    /* Close all streams.  */
    return _IO_cleanup ();
    }
  * _IO_cleanup()会调用两个函数 
    * _IO_flush_all_lockp()会通过_IO_list_all遍历所有流, 对每个流调用_IO_OVERFLOW(fp), 保证关闭前缓冲器中没有数据残留
    * _IO_unbuffer_all()会通过_IO_list_all遍历所有流, 对每个流调用_IO_SETBUF(fp, NULL, 0), 来释放流的缓冲区
    int _IO_cleanup(void)
    {
      /* 刷新所有流 */
      int result = _IO_flush_all_lockp(0);
      /* 关闭所有流的缓冲区 */
      _IO_unbuffer_all();
      return result;
    }
  * 那么至此我们又发现一个攻击点, 可以通过劫持流的虚表中的overflow函数为system, 在fp头部写入/bin/sh, 就可以在exit()关闭流时getshell
  * 这里只是一个抛砖引玉, 更多的内容就是FSOP相关的了
## 总结
  * 整个exit流程如下
  * 相关利用手法 
    * 劫持ld中rtld_global结构体的_dl_rtld_unlock_recursive/_dl_rtld_lock_recursive
    * 劫持ld中rtld_global结构体的l_info中关于fini_array / fini 的描述符, 从而伪造一个析构函数节
    * 如果可写入的话: 劫持ELF中fini_array节
    * 劫持流的虚表中overflow函数指针, 在fcloseall()时触发