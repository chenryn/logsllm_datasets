1ibc [p][mt][d].1ib
p表示CPlusplus，即C++标准库。
mt表示Multi-Thread，即表示支持多线程。
d表示Debug，即表示调试版本。
比如静态的非C++的多线程版CRT的文件名为libcmtd.lib。动态版的CRT的每个版本
一般有两个相对应的文件，一个用于链接的.lib文件，一个用于运行时用的dll动态链接库。
它们的命名方式与静态版的CRT非常类似，稍微有所不同的是，CRT的动态链接库DLL文
件名中会包含版本号。比如Visual C++2005 的多线程、动态链接版的 DLL文件名为
msvcr90.dlI(Visual C++ 2005 的内部版本号为 8.0).表11-1列举了一些最常见的 MSVC CRT
版本（以VisualC++2005为例）。
表11-1
文件名
相关的DLL
属性
编译器选项
预编译宏
libcmt.lib
无
多线程，静态链接
/MT
_MT
msvert.lib
msvcr80.dl1
多线程，
动态链接
/MD
_MT,_DLL
libcmtd.lib
无
多线程，静态链接，
调试
/MTd
_DEBUG _MT
多线权、
msvcrtd.lib
msvcr90d.dl
动态链接，
调试
/MDd
_DEBUG, _MT, _DLL
msvcmrt.lib
msvcm90.dl1
托管/本地混合代码
/elr
msvcurt.lib
msvcm90.dll
纯托管代码
/clr:pure
注
自从VisualC++2005（MSVC8.0）以后，MSVC不再提供静态链接单线程版的运行库
意
（LIBC.lib、LIBCD.ib]，因为据微软声称，经过改进后的新的多线程版的 C运行库在单
线程的模式下运行速度已经接近单线程版的运行库，于是没有必要再额外提供一个只支
持单线程的CRT版本。
默认情况下，如果在编译链接时不指定链接哪个CRT，编译器会默认选择LIBCMT.LIB，
即静态多线程CRT，VisualC++2005之前的版本会选择LIBC.LIB，即静态单线程版本。关
程序员的自我修养一链接、装载与库
---
## Page 370
11.2C/C++运行库
347
于CRT的多线程和单线程的问题，我们在后面的章节还会再深入分析。
除了使用编译命令行的选项之外，在VisualC++工程属性中也可以设置相关选项。如图
11-9所示。
区
用选
日用最小工生成
日用C+异
8()
++E
较小类型检查
基本运行时检查
联认
换处理器
求线程OAL(/MD)
代际生成
启用通数证辅
冲区安全检查
启用增湿指令集
单线(ML)
UM
令行
自定义生成步量
生成事
wee
送时库
指定运行时库以进行销接
UMI,M4.M.PO4M.M
图11-9VisualC++2003.NET工程属性的截图
我们可以从图11-9中看到，除了多线程库以外，还有单线程静态/ML、单线程静态调
试/MLd的选项。
C++CRT
表11-1中的所有CRT都是指C语言的标准库，MSVC还提供了相应的C++标准库。如
果你的程序是使用C++编写的，那么就需要额外链接相应的C++标准库，这里“额外”的
意思是，如表11-2所列的C++标准库里面包含的仅仅是C++的内容，比如iostream、string、
map等，不包含C的标准库。
表11-2
文件名
相应DLL
性
编译选项
宏定义
LIBCPMTLIB
多线程，
静态链接
/MT
_MT
MSVCPRT.LIB
MSVCP90.dl1
多线程，
动态链接
/MD
_MT,_DLL
LIBCPMTD.LIB
多线程，
静态链
接，调试
/MTd
DEBUG_MT
MSVCPRTD.LIB
MSVCP90D.dlI
多线程，
动态链
接，调试
/MDd
_DEBUG _MT,_DLL
程序员的自我修养
链接、装载与库
---
## Page 371
348
第11章运行库
当你在程序里包含了某个C++标准库的头文件时，MSVC编译器就认为该源代码文件
是一个C++源代码程序，它会在编译时根据编译选项，在目标文件的“drectve”段（还记
得第2章中的DIRECTIVE吧？）相应的C++标准库链接信息，比如我们用C++写一个Hello
World”程序;
//he11o.cpp
include 
int main()
std:1cout
<< *He11o world* << std::end1;
return 0:
然后将它编译成目标文件，并查看它的“.drectve”段的信息：
c1 /c hel1o.cpp
dumpbin /DIRECrIVEs hello.obj
Microsoft (R) COFF/PE Dumper Vers1on 9.00.21022,08
Copyright (C) Microsoft Corporation. Al1 rights reserved.
Dump of file nsvcprt,obj
File Type1 COFF OBJECT
Linker Djrectiveg
/DEFAULTLIB: *1ibcpmt *
/DBFAULTLIB: *OLDNAMES*
/DEFAULTLIB: *LIBCMT*
c1 /c /MDd he11o.cpp
dumpbin /DIRECrIVES hello.obj
Microsoft (R) coFF/Pg Dumper Version 9.00.21022.08
Copyright (C) Microsoft Corporation. All rights reserved,
Dump of file msvcprt,obj
File Type: COrF OBJBCT
Linker Directives
/nani festdependency:*type= *win32 *
name= *Microsoft , VC90 , DebugCRT*
proce8sorArchitecture='x86*
version='9.0.21022.8*
publicKeyToken= *1fc8b3b9a1e18e3b**
/DEFAULTLIB: *m&vcprtd*
name= *Microgoft ,VC90, DebugCRT
Z(uTn, -adA,:Aouapuodapsagtueu/
processorArchitecture=*x86'
version='9.0.21022.8*
程序员的自我修养——链接、装载与库
---
## Page 372
11.2C/C++运行库
349
publicKeyToken=*1fc8b3b9ale18e3b**
/DEFAULTLIB:*MSVCRTD*
/DEFAULTLIB : *OLDNAMES *
可以看到，hello.obj须要链接libcpmt.lib、LIBCMT.lib和 OLDNAMES.ib，当我们使用
“/MDd”参数编译时，hello.obj 就需要 msvcpnd.lib、MSVCRTD.lib 和 OLDNAMES.lib，除
此之外，编译器还给链接器传递了“/manifestdependency”参数，即manifest信息。
08.A
Q：如果一个程序里面的不同obj文件或DLL文件使用了不网的CRT，会不会有问题？
A：这个问题实际上分很多种情况。如果程序没有用到DLL，完全静态链接，不同的obj
在编译时用到了不同版本的静态CRT。由于目前静态链接CRT只有多线程版，并且如
果所有的目标文件都统一使用调试版或发布版，那么这种情况下一般是不会有问题的。
因为我们知道，国标文件对静态库引用只是在目标文件的符号表中保留一个记号，并
不进行实际的链接，也没有静态库的版本信息。
但是，如果程序涉及动态链接CRT，这就比较复杂了。因为不同的目标文件如果依赖
于不同版本的msvcrt.lib 和msvcrn.dll，甚至有些目标文件是依赖于静态CRT，而有些
目标文件依赖于动态CRT，那么很有可能出现的问题就是无法通过链接。链接器对这
种情况的具体反应依赖于输入目标文件的顺序，有些情况下它会报符号重复定义错误：
MSVCRTD.lib(MSVCR80D.dII) : error LNK2005: _printf already defined in LIBCMTD.lib
(printf.obj)
但是有些情况下，它会使链接顺利通过，只是给出一个警告：
LINK : warning LNK4098: defaultib LIBCMTD' conflicts with use of other libs; use
/NODEFAULTLIB:library
如果碰到上面这种静态/动态CRT混合的情况，我们可以使用链接器的
/NODEFAULTLIB来禁止某个或某些版本的CRT，这样一般就能使链接顺利进行。
最廉烦的情况应该属于一个程序所依赖的DLL分别使用不同的CRT，这会导致程序在
运行时同时有多份CRT的副本。在一般情况下，这个程序应谊能正常运行，但是值得
注意的是，你不能够在这些DLL之间相互传递使用一些资源。比如两个DLLA和B
分别使用不网的CRT，那么应该注意以下问题：
·不能在A中申请内存然后在B中释放，因为它们分属于不网的CRT，即拥有不同
的堆，这包括C++里面所有对象的申请和释放；
·在A中打开的文件不能在B中使用，比如FILE*之类的，因为它们依赖子CRT的
文件操作部分。
程序员的自我修养一链接、装载与库
---
## Page 373
350
第11章运行库
还有类似的问题，比如不能相互其享loxcale 等。如果不违反上述规则，可能会使程序
发生英名其妙的错误并且很难发现：
防止出现上述问题的最好方法就是保证一个工程里面所有的目标文件和DLL都使用同
一个版本的CRT。当然有时候事实并不能尽如人意，比如很多时候当我们要用到第三
方提供的.lib或DLL文件而对方又不提供源代码时，就会比较难办。
Windows 系统的 system32目录下有个叫 msvcn.dll的文件，它跟msvcr90.dll这样的 DLL
有什么区别？
Q：为什么我用Visual C++2005/2008编译的程序无法在别人的机器上运行？
A：因为VisualC++2005/2008编译的程序使用了manifest机制，这些程序必须依赖于相对
应版本的运行库。一个解决的方法就是使用静态链接，这样就不需要依赖于CRT的
DLL。另外一个解决的方法就是将相应版本的运行库与程序一起发布给最终用户。
11.3运行库与多线程
11.3.1CRT的多线程困扰
线程的访问权限
线程的访问能力非常自由，它可以访问进程内存里的所有数据，甚至包括其他线程的堆
栈（如果它知道其他线程的堆栈地址，然面这是很少见的情况），但实际运用中线程也拥有
自己的私有存储空间，包括：
·栈（尽管并非完全无法被其他线程访问，但一般情况下仍然可以认为是私有的数据）。
线程局部存储（Thread Local Storage,TLS）。线程局部存储是某些操作系统为线程单独
提供的私有空间，但通常只具有很有限的尺寸。
寄存器（包括PC寄存器），寄存器是执行流的基本数据，因此为线程私有。
从C程序员的角度来看，数据在线程之间是否私有如表11-3所示。
表11-3
线程私有
线程之间共享（进程所有）
局部变量
全局变量
函数的参数
堆上的数据
TLS 数据
函数里的静态变量
程序代码，任何线程都有权利读取并执行任何代码
打开文件，A线程打开的文件可以由B线程读写