### Bug report
**Bug summary**
When `boxplot` is called multiple times on the same axis with
`manage_ticks=True`, ticks and labels can get duplicated and be overdrawn.
I believe this problem to be caused in
https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/axes/_axes.py#L4062-L4072
because there, on the second boxplot call, the new `locs` of the
`FixedLocator` and `seq` of `FixedFormatter` are just appended to the previous
ones without removing duplicates.
**Code for reproduction**
    import matplotlib.pyplot as plt
    fig, ax = plt.subplots(1, 1)
    _ = ax.scatter(['a'], [1])
    _ = ax.scatter(['a'], [1])
    fig.canvas.draw()
    print(ax.xaxis.get_ticklabels())
    # Returns [Text(0, 0, 'a')] which is ok
    fig, ax = plt.subplots(1, 1)
    _ = ax.boxplot([1,2,3])
    _ = ax.boxplot([5,6,7])
    fig.canvas.draw()
    print(ax.xaxis.get_ticklabels())
    # Returns [Text(1, 0, '1'), Text(1, 0, '1')] which causes overdrawn labels
The boxplot above is quite unreasonable, however this problem rises also in
saner plots, such as the case of two shared axes with one boxplot each.
    import matplotlib.pyplot as plt
    fig, ax = plt.subplots(2, 1, sharex=True)
    _ = ax[0].boxplot([1,2,3])
    _ = ax[1].boxplot([1,2,3])
    fig.canvas.draw()
    print(ax[1].xaxis.get_ticklabels())
    # Returns [Text(1, 0, '1'), Text(1, 0, '1')]
**Expected outcome**
I think that, in the instance of the shared axes, a user should not be
required to set `manage_ticks=False` and set the locators and formatters by
themselves in order to get the correct result.  
But that is debatable, so I actually wonder if this is a bug or intended
behaviour.
**Matplotlib version**
  * Operating system: Windows 10
  * Matplotlib version: 3.3.2
  * Matplotlib backend (`print(matplotlib.get_backend())`): TkAgg
  * Python version: 3.7.5
  * Jupyter version (if applicable):
  * Other libraries: