http://mirrors. kerne1. org/fedora/core/4/i386/os/Fedora/RPMS/ 举例:命令格式:
rpm 参数 rpm 包文件的 http 或者 ftp 的地址
# rpm qpi http://mirrors. kernel. org/fedora/core/4/i386/os/
Fedora/RPMS/gaim1. 3. 01. fc4. i386. rpm
# rpm  ivh http://mirrors. kernel. org/fedora/core/4/i386/os/
Fedora/RPMS/gaim1. 3. 01. fc4. i386. rpm
2、删除一个rpm包：
首先您要学会查询rpm 包：请看前面的说明：[root@localhost beinan]#rpm-e软件包名举例：我想
移除lynx包，完整的操作应该是：
[root@localhost RPMS]# rpm -e lynx
如果有依赖关系，您也可以用--nodeps忽略依赖的检查来删除。但尽可能不要这么做，最好用软件包管理
器systerm-config-packages 来删除或者添加软件：
[root@localhost beinan]# rpm -e lynx --nodeps
RPM验证与数字证书：
导入签名：
---
## Page 49
[root@localhost RPMS]#rpm-import 签名文件 举例：
[rootelocalhost fc40]# rpm import RPM-GPGKEY
[rootelocalhost fc40]# rpm -import RPMGPGKEYfedora
RPM验证作用是使用/var/lib/rpm下面的数据库内容来比较目前linux系统的环境下的所有软件文件，也就
是说当你有数据不小心丢失，或者不小心修改到某个软件的文件内容，就用这个简单的方法验证一下原本的
文件系统
#rpm - Va
列出目前系统上面所有可能被改动过的文件
从rpm软件包抽取文件；
命令格式：rpm2cpio file.rpm|cpio-div
举例：
[root@1ocalhost RPMS]# rpm2cpio gaim1. 3. 01. fc4. i386. rpm |cpio div
抽取出来的文件就在当用操作目录中的usr和etc中：其实这样抽到文件不如指定安装目录来安装软件来
的方便：也一样可以抽出文件：为软件包指定安装目录：要加-relocate参数：下面的举例是把
gaim-1.3.0-1. fc4.i386.rpm指定安装在/opt/gaim 目录中；
Preparing. - .
##########################################[10%]
1 : gaim
#########################################[10]
[root@localhost RPMS]# 1s /opt/
gaim
这样也能一目了然：gaim的所有文件都是安装在/opt/gaim中，我们只是把gain目录备份一下，然后卸
掉gainm：这样其实也算提取文件的一点用法：
RPM的配置文件：
RPM包管理，的配置文件是rpmrc，我们可以在自己的系统中找到：比如 Fedora Core 4.0中的rpmrc 文
件位于：
[root@localhost RPMS]# locate rpmrc
/usr/lib/rpm/rpmrc
/usr/1ib/rpm/redhat/rpmrc
我们可以通过rpm--showrc查看：具体的还得我们自己来学习。呵.。不要问我，我也不懂：只要您
看了这篇文章，认为对您有用，您的水平就和我差不多：咱们水平是一样的，所以我不能帮助您了：请
理解。
YUM
YUM配置文件
创建容器，位置在/etc/yum.repos.d，扩展名必须是.repo
#cd /etc/yum.repos.d
#vim yum.repo
新建一个仓库文件，名字可以随便定义，在文件中写如下内容
[base]
#代表容器名称，中括号一定要存在，里面的名字可随便取
name=base#说明这个容器的意义，随便写都可以
baseurl=ftp://192.168.0.6/pub/Server#192.168.0.6是你的 YUM源地址，这个很重要。
enabled=1#是否启动，=0则不启动，不启动就无法使用该源
Pgcheck=0#是否验证，可不要
Pgkey=file:///etc/pki/rpm-gPg/RPM-GPG-KEY-redhat-release# 验证的密钥. 可不要
---
## Page 50
命令#yumrepolist all
显示目前所使用的容器有哪些
如果查询出来的容器，status 为 disabled，要将配置文件，如上enabled=1
/etc/yum.conf
yum.conf这个配置文件主要是yum客户端使用，里面主要规定了要去用的rpm包的yum服务器的信
息。
[main]#main开头的块用于对客户端进行配置，在main后也可以指定yum源（不推荐这样做），与
/etc/yum.repo.d 中指定 yum 源相同]
cachedir=/var/cache/yum
#cachedir：yum缓存的目录，yum 在此存储下载的rpm包和数据库，一般是/var/cache/yum。
keepcache=0#0表示不保存下载的文件，1表示保存下载的文件，默认为不保存
debuglevel=2
#debuglevel：除错级别，0——10,默认是2貌似只记录安装和删除记录
logfile=/var/log/yum.log#指定yum的日志文件
pkgpolicy=newest#包的策略，如果配置多了yum源，同一软件在不同的yum源中有不同版本，
newest则安装最新版本，该值为lastest，则yum会将服务器上ID 按照字母序排列，选择最后那个服务器上
的软件安装
distroverpkg=centos-release
#指定一个软件包，yum会根据这个包判断你的发行版本，默认是redhat-release，也可以是安装的任何
针对自已发行版的rpm包。
tolerant=1
tolerent，也有1和0两个选项，表示yum是否容忍命令行发生与软件包有关的错误，比如你要安装
1,2,3三个包，而其中3此前已经安装了，如果你设为1,则yum不会出现错误信息。默认是0。
exactarch=1
#exactarch，有两个选项1和0,代表是否只升级和你安装软件包cpu体系一致的包，如果设为1，则如
你安装了一个i386的rpm，则yum不会用i686的包来升级。
retries=20
#retries，网络连接发生错误后的重试次数，如果设为0，则会无限重试。
obsoletes=1
gpgcheck=1
Pgchkeck=有1和0两个选择，分别代表是否是否进行gPg校验，如果没有这一项，默认是检查的。
plugins = 1
#是否启用插件，默认1为允许，0表示不允许
reposdir=/et/vy.rm #默认是/etc/yum.repos.d/ 低下的 x.repo后级文件
#默认都会被include进来也就是说/etc/yum.repos.d/xx.repo无论配置文件有多少个每个里面有多少
个[name]最后其实都被整合到一个里面看就是了重复的[name]应该是前面覆盖后面的--还是后面的覆盖前
面的呢？enabled测试是后面覆盖前面
exclude=xx
#exclude排除某些软件在升级名单之外，可以用通配符，列表中各个项目要用空格隔开，这个对于安
装了诸如美化包，中文补丁的朋友特别有用。
keepcache=[1 or 0]
#设置keepcache=1，yum 在成功安装软件包之后保留缓存的头文件（headers)和软件包。默认值为
keepcache=0 不保存
reposdir=[包含repo文件的目录的绝对路径]
中的[repository] 片段相同]。中
---
## Page 51
YUM命令
用YUM安装删除软件yuminstallxxx，yum会查询数据库，有无这一软件包，如果有，则检查其依赖冲
突关系，如果没有依赖冲突，那么最好，下载安装；如果有，则会给出提示，询问是否要同时安装依赖，或
删除冲突的包，你可以自己作出判断。
删除的命令是，yumremovexxx，同安装一样，yum也会查询数据库，给出解决依赖关系的提示。
YUM安装软件包
命令：yum install
YUM删除软件包
命令：yum remove
用YUM查询软件信息，我们常会碰到这样的情况，想要安装一个软件，只知道它和某方面有关，但又
不能确切知道它的名字。这时yum的查询功能就起作用了。你可以用yum searchkeyword这样的命令来进
行搜索，比如我们要则安装一个Instant Messenger，但又不知到底有哪些，这时不妨用yum search messenger
这样的指令进行搜索，yum会搜索所有可用rpm的描述，列出所有描述中和messeger有关的rpm包，于是
我们可能得到gaim，kopete等等，并从中选择。有时我们还会碰到安装了一个包，但又不知道其用途，我
们可以用yum info packagename这个指令来获取信息。
1.使用YUM查找软件包
命令：yum search
2.列出所有可安装的软件包
命令：yum list
3.列出所有可更新的软件包
命令：yum list updates
4.列出所有已安装的软件包
命令：yum list installed
5.列出所有已安装但不在Yum Repository内的软件包
命令：yum list extras
6.列出所指定的软件包
命令：yum list
7.使用YUM获取软件包信息
命令：yum info
8.列出所有软件包的信息
命令：yum info
9.列出所有可更新的软件包信息
命令：yum info updates
10.列出所有已安装的软件包信息
命令：yum info installed
11.列出所有已安装但不在YumRepository内的软件包信息
命令：yum info extras
12.列出软件包提供哪些文件
命令：yum provides
---
## Page 52
清除YUM缓存
yum会把下载的软件包和header存储在cache中，而不会自动删除。如果我们觉得它们占用了磁盘空间，
可以使用 yum clean 指令进行清除，更精确的用法是yum clean headers 清除 header，yum clean packages 清
除下载的 rpm 包，yum clean all一股脑儿端
1.清除缓存目录(/var/cache/yum)下的软件包
命令：yum clean packages
2.清除缓存目录(/var/cache/yum)下的headers
命令：yum clean headers
3.清除缓存目录(/var/cache/yum)下I旧的headers
命令：yum clean
Oldheaders
4.清除缓存目录(/var/cache/yum)下的软件包及旧的headers
命令： yum clean, yum clean
all (= yum clean packages; yum clean oldheaders)
七、时间管理
1、Linux时间介绍：
Linux时钟分为系统时钟（System Clock）和硬件（RealTime Clock，简称RTC）时钟。系统时钟
是指当前LinuxKernel中的时钟，而硬件时钟则是主板上由电池供电的时钟，这个硬件时钟可以在
BIOS中进行设置。当Linux启动时，硬件时钟会去读取系统时钟的设置，然后系统时钟就会独立
于硬件运作。
Linux中的所有命令（包括函数）都是采用的系统时钟设置。在Linux中，用于时钟查看和
设置的命令主要有date、hwclock和clock，其中，clock和hwclock用法相近，只用一个就行，只不
过clock命令除了支持x86硬件体系外，还支持Alpha硬件体系。
2、Linux时间设置命令
2.1、date:
语法格式: date [-u] [-d datestr] [-s datestr] [--utc] [--universal] [--date=datestr] [-set=datestr] [--help]
[--version] [+FORMAT] [MMDDhhmm[[CC]YY][-.ss]]
说明：可用来设置系统日期与时间。只有管理员才有设置日期与时间的权限，一般用户只能用
date命令显示时间。若不加任何参数，data会显示目前的日期与时间。
例1：显示当前系统时间
[root@Test2 ~]# date
2010年06月17日星期四00:00:04CST
例2：设置日期和时间为2010年6月18号12:00
[root@ Test2 ~]# date -s "20100618 12:00:00"
2010年06月18日星期五12:00:00CST
例3：设置日期为2010年年6月18号
[root(@Test2 ~]# date -s 20100618
2010年06月18日星期五00:00:00CST
例4：设置时间为12:00:00
---
## Page 53
[root@ Test2 ~]# date 12:00:00
date: invalid date “12:00:00*
例5：显示时区
[root@Test2 ~]# date -R
Thu, 17 Jun 2010 00:01:36 +0800
或者：
[root@ Test2 ~]# cat /etc/sysconfig/clock
# The ZONE parameter is only evaluated by system-config-date.
# The timezone of the system is defined by the contents of /etc/localtime.
ZONE="Asia/Shanghai”
UTC=true
ARC=false
2.2、hwclock/clock
语法格式:hwclock [adjust][-debug][--directisa][--hctosys][—show]-systohc][test]
[--utc][--version][--set --date=]
参数：
--adjusthwclock每次更改硬件时钟时，都会记录在/etc/adjtime文件中。使用--adjust参数，可使hwclock
根据先前的记录来估算硬件时钟的偏差，并用来校正目前的硬件时钟。
--debug显示hwclock执行时详细的信息。
--directisahwclock预设从/dev/rtc设备来存取硬件时钟。若无法存取时，可用此参数直接以I/O指令
来存取硬件时钟。
--hctosys
将系统时钟调整为与目前的硬件时钟一致。
--set --date=
设定硬件时钟。
--show
显示硬件时钟的时间与日期。
--systohc
将硬件时钟调整为与目前的系统时钟一致。
--test
仅测试程序，而不会实际更改硬件时钟。
--utc
若要使用格林威治时间，请加入此参数，hwclock会执行转换的工作。
--version
显示版本信息。
例1：查看硬件时间
# hwclock -show
或者
# clock -show
例2：设置硬件时间
#hwclock-set--date=*07/07/06 10:19"（月/日/年时：分：秒）
或者
# clock set --date=*07/07/06 10:19*
（月/日/年时：分：秒）
例3：硬件时间和系统时间的同步
按照前面的说法，重新启动系统，硬件时间会读取系统时间，实现同步，但是在不重新启动的时候，需
要用hwclock或clock命令实现同步。
硬件时钟与系统时钟同步：
#hwclock-hctosys（hc代表硬件时间，sys代表系统时间）
或者
sAsou xpop #
例4：系统时钟和硬件时钟同步：
---
## Page 54
# hwclock systohc
或者
# clock =systohc
例5：强制将系统时间写入CMOS，使之永久生效，避免系统重启后恢复成原时间
# clock =w
或者
# hwclock -w
2.3、时区的设置
# tzselect
Please identify a location so that time zone rules can be set correctly.
Please select a continent or ocean.
1) Africa
2) Americas
3) Antarctica
4) Arctic Ocean
5) Asia
6) Atlantic Ocean
7) Australia
8) Europe
9) Indian Ocean
10) Pacific Ocean
11) none - I want to specify the time zone using the Posix TZ format.
#?输入5，亚洲
Please select a country.
1) Afghanistan
18) Israel
35) Palestine
2) Armenia
ueder (6
36) Philipines
3) Azerbaijan