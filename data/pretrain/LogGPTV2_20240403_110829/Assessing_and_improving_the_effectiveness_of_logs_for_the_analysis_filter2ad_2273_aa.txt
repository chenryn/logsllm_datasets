title:Assessing and improving the effectiveness of logs for the analysis
of software faults
author:Marcello Cinque and
Domenico Cotroneo and
Roberto Natella and
Antonio Pecchia
2010 IEEEIIFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
Assessing and Improving the Effectiveness 
of Logs 
for the Analysis of Software Faults 
Marcello Cinque, Domenico Cotroneo, Roberto Natella, 
Antonio Pecchia 
Dipartimento 
di Informatica 
e Sistemistica, 
Universita 
degli Studi di Napoli Federico II 
Via Claudio 21, 80125, Naples, Italy 
{macinque, 
cotroneo, 
roberto.natella, 
antonio.pecchia}@unina.it 
Abstract 
Event logs are the primary source of data to character­
system dur­
phase. However, they are inadequate 
of software 
which are nowadays 
faults, 
behavior 
of a computing 
ize the dependability 
ing the operational 
to provide evidence 
among the main causes of system outages. 
poses an approach based on software 
sess the effectiveness 
triggered 
guidelines 
report the effects of software 
The benefits 
proach are shown by means of experimental 
widely used software 
in the field. Injection 
to improve the ability of logging 
systems. 
results 
faults. 
fault injection 
to as­
faults 
are used to provide 
mechanisms 
to 
of logs to keep track of software 
results 
on three 
This paper pro­
of the ap­
1 Introduction 
Current trends in software engineering 
exacerbate 
of system 
the 
design, 
inputs, 
or external 
and technical 
state ofthe system, 
when a particular 
[18]. Faults introduced 
faults as main responsible 
fault trigger 
events) 
role of software 
failures 
during the analysis, 
and coding phases of a complex software system [1] may 
lead to a failure 
(i.e., 
occurs. 
internal 
Due 
to time constraints 
testing 
is not 
able to validate 
potential 
shipped 
testing efforts, leading 
characterization 
in the field, is crucial 
rent systems. 
A viable solution 
is to look at event logs produced 
fault trigger. 
with residual 
a complex system with respect 
limitations, 
of residual 
to address 
software 
faults, 
to every 
issues of cur­
dependability 
to gain this understanding 
by the system. 
software is likely 
to be 
As a result, 
software faults, 
to failures during operation 
i.e., faults 
that elude 
[8]. The 
as they manifest 
[17,24]. Event logs provide 
supercomputers 
mation about errors that occur at run-time. 
they make it possible 
components 
tive maintenance 
as well as to predict 
[15], thus making it possible 
the occurrence 
to identify 
replacing 
(e.g., 
of failures 
[16, 24]. 
to schedule 
proac­
infor­
valuable 
Consequently, 
a disk prior to its failure), 
the most failure-prone 
Past work on field failures 
recognized 
and software faults 
that it may be 
by means of 
to the best of our knowledge, 
mechanisms 
in face of 
has not been assessed 
yet in a quantitative 
is essential 
to understand 
how 
them. Software 
exploiting 
check and remain completely  unreported. 
in C/C++  programs, 
manipulations 
bad pointer 
faults 
of collected 
logs and the 
may escape any 
For 
crash before any useful information 
analysis 
of current 
the quality 
difficult 
to relate failures 
logs [4, 20, 22]. Nevertheless, 
the effectiveness 
logging 
software faults 
way. A quantitative 
this issue compromises 
analyses 
low-level 
example, 
can originate 
is logged. 
ment may lead to a hang, without 
logs. A solution 
log every potential 
not feasible; 
a process 
An infinite 
thus a more focused 
to increase 
loop caused by bad variable 
leaving 
manage­
any trace in the 
would be to 
error.  However, 
log effectiveness 
this solution 
is clearly 
approach 
is needed. 
logging 
built-in 
an approach 
is to evaluate 
of software faults. 
to assess and to improve 
of logs for the analysis 
This paper proposes 
the effectiveness 
The objective 
a system and to suggest  potential  improvements. 
aim, the approach 
software faults are extensively 
the system under observation 
most common failure 
modes (i.e., 
injected 
guide their improvement. 
and deliberately 
forced in 
the 
in order to (i) determine 
the consequences 
of the 
deficiencies, 
is based on software 
fault injection, 
i.e., 
capabilities 
(ii) identify 
faults), 
and (iii) 
logging 
To this 
of 
Event logs have been used for decades to characterize 
systems [14]. Interesting 
of operational 
based on event logs range from early experiences on 
the dependability 
studies 
mainframe and multicomputer 
findings on commodity 
operating 
systems: 
Distribution 
Management 
a significant 
without 
failures 
systems [10], to more recent 
systems [11, 20] and 
producing 
ranges between 35.6% and 42.1 % among the case 
any log event. The percentage 
of logged 
The approach 
is applied 
to three popular open source 
Apache Web Server (section 5.1), 
TAO Open Data 
System (section 
5.2), and MySQL Database 
System (section 
number of software faults lead to a failure 
5.3). Results reveal that 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
457 
DSN 2010: Cinque et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:05:05 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
We show, by means of specific 
examples, 
how to 
before the operational 
phase. This is done 
studies. 
use analysis 
results 
to improve the logging 
mechanism. 
Section 
2 
The rest of the paper is organized 
as follows. 
related 
work. Section 
discusses 
logging evaluation/improvement 
presents 
our experimental 
Section 
6 concludes 
the fault injection 
3 describes 
framework. 
results. 
Section 
the work. 
approach. Section 4 
the proposed 
5 describes 
2 Background 
and Related work 
misleading 
affecting 
failures, 
and improved 
by means of software 
deficiencies 
unlogged 
well-known 
last decade, 
evaluation 
faults, 
been used for comparisons 
assessment 
fault removal in fault tolerance 
technique 
a framework 
of computer 
namely dependability 
systems 
fault injection, 
dependability 
evaluation 
which can reveal 
(e.g., 
results 
logs). Fault injection 
evaluation. 
for dependability 
In the 
is a 
has been formulated 
with emphasis 
benchmarking, 
for rigorous 
on software 
which has 
between systems and for risk 
[5, 13]. Fault injection 
has also been used for 
mechanisms 
[3, 21]. 
no previous 
improvement 
Logs are conceived 
as human-readable 
text files for 
To the best of our knowledge, 
work has 
logging 
exhaustion 
for web applications 
with other 
using fault 
detection 
However, 
techniques 
although 
of logging 
In [19], a first attempt 
mechanisms 
been devoted to the systematic 
mechanisms 
in complex systems. 
was made by comparing 
failure 
injection. 
due to resource 
they provide 
ware failures 
analysis 
realistic  software 
to exploiting 
systems [23]. However, the effectiveness  of  anomaly 
detection 
evaluate 
logs are able to detect failures 
and environment 
with respect 
through the injection 
were also devoted 
in complex 
coverage 
a deadlock). 
mechanisms 
Recent studies 
for anomaly detection 
little 
(e.g., 
of logging 
faults. 
log contents 
and to improve in our work. 
of logs, which we aim to 
relies on the quality 
This motivates 
conditions, 
an in-depth 
to emulated 
soft­
of 
3 Overall 
approach 
Logs were the basis of past dependability  evaluation 
and system administrators 
and to take actions 
to gain visibility 
in the face of failures. 
applications 
can write 
into 
interface, 
lines of text in the log, according 
to developers' 
placed within the execution 
path 
an assertion about 
the correct­
state (e.g., 
a log event is produced 
if the assertion 
state is reached (i.e., 
a wrong 
i.e., 
developers 
system behavior, 
Through a programming 
events, 
needs. Events are usually 
leading 
ness of a variable; 
is violated), 
service 
systems 
to a failure 
or if a failure 
is perceived 
are UNIX syslog and Microsoft's 
by the users). 
Known event logging 
event logger. 
data for analysis, leading 
when used for dependability 
pointed 
studies 
out the weak­
However, several 
conclusions. 
[20] recognized 
on Unix workstations 
and may lack suitable 
A study 
that event logs may be incomplete 
In [2], it was shown that event logs may be 
to 
and 
studies. 
nesses of logging  mechanisms 
analysis. 
incorrect 
misleading 
servers 
or imperfect, 
different 
sources 
In [11], a study on a networked 
showed that most reboot logs (58%) do not provide 
any 
specific 
the need for better log­
ging techniques. 
that logs may lack useful information 
failure 
of data to improve availability 
on supercomputers 
thus highlighting 
Windows NT system 
and it describes 
for combining 
for enabling 
an approach 
detection 
[14] showed 
A  study 
reason, 
effective 
Other studies 
evidence 
and diagnosis. 
pointed out the inadequacy 
of software faults. 
In [4] it showed that, 
of logs to 
mechanism, 
provide 
even if the JVM is equipped 
handling 
built-in 
are not capable of detecting 
of failures 
networked 
highlighted 
to application 
remained 
cannot be found in the logs). These results 
significant 
in the logs, as will be confirmed 
(45.03%). 
Windows NT workstations 
that only 3% of system reboots 
software failures, 
of software faults 
unclassified 
percentage 
The previously 
mentioned 
whereas 58% of  reboots 
(Le., a clear cause of the reboot 
suggest 
that a 
by our experimental 
studies evaluate 
remain unreported 
results. 
logging 
[22], log analysis 
could be related 
estimation. 
Our driving 
idea is to evaluate 
the effectiveness 
of log­
by means of fault injection. 
i.e., entries 
in a log 
Effectiveness 
to provide evidence, 
occurs. Detecting 
assess effectiveness 
failures 
is thus crucial 
of logs. To this aim we 
system under a stressful 
as well as to detect 
testing 
environment 
workload 
(Figure 
1) to run the 
of failures. 
Experimental 
results 
are then 
to assess and to improve the logging  mechanism, 
ging mechanisms 
is the ability 
file, if a failure 
to correctly 
design a specific 
target 
the occurrence 
exploited 
by suggesting 
the probability 
activation. 
detailed 
with a sophisticated 
exception 
mechanisms 
error detection 
a considerable 
percentage 
how to place additional 
that a software 
fault will be logged after its 
events to increase 
The proposed 
approach 
consists 
of three steps, 
In a dependability 
evaluation 
of 
in the following. 
1 - Software 
fault injection 
campaign. 
We perform an 
campaign 
logs about failures. 
of tests, 
to collect 
of a sequence 
(Le., containing 
each involving 
fault, 
in Section 
by a Test 
program (see Figure 1). The Test Manager cleans 
exactly 
to the technique 
under test. Tests are supervised 
one software 
described 
The 
a 
consists 
experimental 
campaign 
faulty version 
injected 
according 
4) of the system 
Manager 
up stale resources 
semaphores) 
same initial 
initializes 
(e.g., zombie processes, 
unallocated 
by using log files collected 
during the opera­
mechanisms 
tional 
to investigate 
phase. In this work, we take a different 
perspective: 
how logging 
mechanisms 
can be evaluated 
before each test is performed, 
conditions 
for all experiments. 
to ensure the 
it 
Moreover, 
of the system. The 
faulty version 
the current 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
458 
DSN 2010: Cinque et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:05:05 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
Observed failures 
(oracle 
view) 
o t 
OJ E 
System 
bJ)  Observed failures 
. . (log view) 
& 
bJ)..c: o  u 
--'  OJ E 
Analysis 
Comparison 
Improvements 
Figure 1: Log assessment 
and improvement 
approach. 
system is then executed, 
The workload 
not vary among the tests of the campaign. 
cases and/or 
by developers 
and exercised 
to the system under test and does 
of test 
It consists 
of the system. 
tools adopted 
is specific 
using a workload. 
Once the workload 
is completed, 
the Test Manager labels 
The outcome is needed to identify 
experi­
if any, the expe­
by type of failure. 
if a failure 
occurred 
which is the issue we 
by 
in 
information 
from the 
is supported 
are executed 
failure. 
actually 
therefore 
occurred, 
experiments 
as well as to classify 
information, 
our analysis 
the test with an outcome that summarizes, 
rienced 
ments in which a failure 
truth, 
We do not rely on logs to understand 
(logs may lack relevant 
are investigating); 
additional 
information. 
a controlled 
testing 
the Test Manager jointly 
operating 
system (e.g., 
specific information 
response 
expected 
makes it possible 
• Halt: unexpected 
environment, 
termination 
environment 
(e.g., output values), 
to identify 
we exploit 
Since experiments 
of the system. 
exploits 
memory dumps), (ii) workload­
(i) data generated 
by the 
and (iii) the 
time. The joint use of this information 
one of the following 
outcomes: 
to define the outcome. In particular, 
The system 
no longer runs, and no output is delivered. 
• Silent: the system is still running, 
within a reasonable 
but no output is 
is 
(e.g., 
message is not delivered). 
timeout 
the system 
produced 