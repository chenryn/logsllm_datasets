# Assessing and Improving the Effectiveness of Logs for the Analysis of Software Faults

**Authors:**
- Marcello Cinque
- Domenico Cotroneo
- Roberto Natella
- Antonio Pecchia

**Conference:**
2010 IEEE/IFIP International Conference on Dependable Systems & Networks (DSN)

**Affiliation:**
Dipartimento di Informatica e Sistemistica, Università degli Studi di Napoli Federico II  
Via Claudio 21, 80125, Naples, Italy  
Emails: {macinque, cotroneo, roberto.natella, antonio.pecchia}@unina.it

## Abstract
Event logs are a primary source of data for characterizing the dependability of a computing system during its operational phase. However, they often fail to provide sufficient evidence of software faults, which are among the main causes of system outages. This paper proposes an approach based on software fault injection to assess and improve the effectiveness of logging mechanisms in tracking software faults. The benefits of this approach are demonstrated through experimental results on three widely used software systems.

## 1. Introduction
Current trends in software engineering highlight the critical role of software faults in system failures. These faults can be introduced during the design, implementation, and coding phases of a complex software system, leading to operational failures. Due to time and resource constraints, testing is often unable to validate all potential faults, resulting in residual faults that can cause failures in the field. Event logs, which provide valuable information about run-time errors, are essential for understanding and addressing these issues. However, past work has shown that event logs may be incomplete or misleading, making it difficult to relate failures to logged events. This paper proposes a quantitative approach to evaluate and enhance the effectiveness of logging mechanisms for software fault analysis.

## 2. Background and Related Work
Event logs have been used for decades to characterize system dependability. Studies based on event logs range from early experiences with mainframe and multicomputer systems to more recent findings on commodity operating systems. For example, a study on Unix workstations found that event logs may be incomplete or imperfect, leading to misleading conclusions. Other studies have highlighted the inadequacy of logs in providing useful information for failure analysis and diagnosis. Despite the importance of logs, little work has been done to systematically evaluate and improve logging mechanisms in complex systems. This paper aims to address this gap by using software fault injection to assess and enhance log effectiveness.

## 3. Overall Approach
The proposed approach consists of three steps:
1. **Software Fault Injection Campaign:** A series of tests are conducted, each involving the injection of a specific software fault. The Test Manager ensures consistent initial conditions for all experiments.
2. **Execution and Logging:** The system is executed under a controlled testing environment, and log files are collected.
3. **Analysis and Comparison:** The observed failures are compared with the log entries to identify deficiencies in the logging mechanism. Additional log events are suggested to improve the logging coverage.

## 4. Experimental Results
The approach is applied to three popular open-source systems: Apache Web Server, TAO Open Data System, and MySQL Database System. Results show that a significant number of software faults lead to failures without being logged. Specific examples are provided to demonstrate how the analysis results can be used to improve the logging mechanism.

## 5. Conclusion
This paper presents a novel approach to evaluate and improve the effectiveness of logging mechanisms for software fault analysis. By using software fault injection, we can systematically assess the quality of logs and suggest improvements. The experimental results on three widely used software systems highlight the benefits of this approach in enhancing the ability of logs to track software faults.

**References:**
- [1] Reference 1
- [2] Reference 2
- [3] Reference 3
- [4] Reference 4
- [5] Reference 5
- [8] Reference 8
- [10] Reference 10
- [11] Reference 11
- [13] Reference 13
- [14] Reference 14
- [15] Reference 15
- [16] Reference 16
- [17] Reference 17
- [18] Reference 18
- [19] Reference 19
- [20] Reference 20
- [21] Reference 21
- [22] Reference 22
- [23] Reference 23
- [24] Reference 24

**Copyright:**
978-1-4244-7501-8/10/$26.00 ©2010 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18, 2021 at 14:05:05 UTC from IEEE Xplore. Restrictions apply.