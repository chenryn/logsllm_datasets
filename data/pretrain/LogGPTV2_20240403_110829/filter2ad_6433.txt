title:POSTER: Towards Automating Detection of Anomalous HTTP Requests
with Joint Probability Estimation of Characters
author:Pratibha Khandait and
Neminath Hubballi and
Katrin Franke
POSTER: Towards Automating Detection of Anomalous HTTP
Requests with Joint Probability Estimation of Characters
Neminath Hubballi
Katrin Franke
Pratibha Khandait
Department of Computer Science
Indian Institute of Technology Indore
PI:EMAIL
Department of Computer Science
Indian Institute of Technology Indore
Department of Computer Science
Norwegian University of Science and
PI:EMAIL
Technology
PI:EMAIL
ABSTRACT
Web applications are often exploited using different techniques
like injection, buffer overflow, etc. An HTTP request carrying such
malicious content will be different from a normal request. In this
paper we propose to detect such anomalous HTTP requests using
regular expression based signatures. These signatures are generated
using character combinations specifically identified from known
malicious requests. We identify certain characters which are use-
ful for differentiating normal and anomalous requests using their
frequency value comparison and subsequently select those combina-
tions which have high chances of appearing together by estimating
their joint probability values. We experiment with few sample at-
tack types and show that proposed method can identify anomalous
HTTP requests.
CCS CONCEPTS
• Security and privacy → Vulnerability Assessment; Software
and application security; Network Security; • Networks → Appli-
cation layer protocols;
KEYWORDS
HTTP, SQL Injection, Cross-Site Scripting, Web Attacks
ACM Reference Format:
Pratibha Khandait, Neminath Hubballi, and Katrin Franke. 2020. POSTER:
Towards Automating Detection of Anomalous HTTP Requests with Joint
Probability Estimation of Characters. In Proceedings of the 15th ACM Asia
Conference on Computer and Communications Security (ASIA CCS ’20), Oc-
tober 5–9, 2020, Taipei, Taiwan. ACM, New York, NY, USA, 4 pages. https:
//doi.org/10.1145/3320269.3405434
1 INTRODUCTION
Web application bugs constitute a major chunk of vulnerabilities
exploited in the internet. Common vulnerabilities include injection
attacks, cross-site request forgery (CSRF) attacks, brute force login
attempts, path traversal attacks, etc. Web applications are the lucra-
tive targets as they often deal with sensitive information like credit
cards, bank transactions and online shopping carts. Consequences
of an attack can be dramatic including compromise of personal data
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6750-9/20/10.
https://doi.org/10.1145/3320269.3405434
and manipulation of information in a shopping cart, etc. Protection
against these attacks often come in the form of Web Application
Firewall (WAF) and intrusion detection systems which screen the
HTTP requests to decide whether they are normal or have been
manipulated to carry content related to any threat vectors. Web
Application Firewalls block requests which are found to be carrying
attacks using a set of rules.
In this paper we propose a method to generate a set of rules
for detecting different web attacks. Proposed idea is based on the
premise that certain combination of characters appear in HTTP
requests carrying attack payloads. We identify such combinations
by comparing their frequency differences in normal and malicious
requests and use them to generate a set of rules to be used with
WAFs.
Prior Work: Literature in detecting and mitigating web attacks
fall into two categories as below.
(i) Web Application Firewalls: Web application firewalls have
rules written either for negative or positive samples deployed at
the server side. Negative rules are written to block certain types of
web attacks. Positive rules will have rules for legitimate requests
and any request not confirming to these rules will be blocked. Tok-
Doc [5] is a WAF which sanitizes the web requests by replacing
content which is known to be malicious before forwarding it to
server. FlowWatcher [6] is another such system which proposes to
detect data disclosure vulnerabilities by intercepting both HTTP
post requests and responses coming from server with a set of poli-
cies.
(ii) Intrusion Detection Systems: These systems model HTTP
requests either by breaking them into short sequences or by generat-
ing signatures corresponding to various attacks. PAYL [9], Anagram
[8], Layergram [4], Rangegram [7] are anomaly detection systems
which model short sequences (n-grams) generated from web re-
quests and use a rating function to rate web requests to classify
them as belonging to attacks or normal. PAYL [9] generates a score
using frequency count of each possible byte (256) as features. It
generates a model of normal behavior and detect attack if a test
HTTP packet has large distance from the centroid of all feature vec-
tors in the training set. Similarly Anagram [8] calculates fraction of
n-grams not found in the database of known normal HTTP requests.
Few other anomaly detection systems use Markov models [1, 2] of
web requests to identify difference in them to detect attacks.
2 GENERATING SIGNATURES
In order to detect web attacks we generate regular expression based
signatures. These signatures use characters which are appearing
frequently in attacks identified by their co-occurrence probability.
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan889Identifying such character combinations and writing signatures are
elaborated in the next two subsections.
2.1 Selecting Differentiating Characters
In order to detect malicious HTTP requests we use the character-
istics of web attacks. Our idea is motivated by the fact that every
web attack like SQL injection, cross site scripting will have unique
patterns. For example in a java script injection attack following syn-
tax will appear in the HTTP request ,
which will denote starting and ending of the injected java script.
Consider another sample SQL injection attack as shown in Figure
1 where an attacker is trying to drop a table in the database and
also selecting entries from table ‘USER’ with username ‘JOHN’. A
decoded version of same request is shown in Figure 2.
POST-content: modo=entrar%27%3B+DROP+TABLE+CUSTOMER
%3B+SELECT+*+FROM+USER+WHERE+number+LIKE+%27%25
&login=JOHN&pwd=d%F3712&remember=on&B1=Entrar
Figure 1: Sample SQL Injection Attack in Encoded Form
CUS-
POST-content:modo=entrar’;DROP
TOMER;
number
LIKE’%&login=JOHN&pwd=d%F3712&remember=on&B1=Entrar
FROM USER WHERE
TABLE
SELECT
*
Figure 2: Sample SQL Injection Attack in Decoded Form
In the two examples (injecting a script and injecting an SQL
query) we can notice that certain combination of characters appear
together. In case of script injection attack characters like ‘’ are appearing together and in second case characters ‘*’ and ‘=’
are appearing together. In order to detect attacks of these types,
we propose to parse the HTTP requests and estimate the joint
probability of occurrence of character pairs to find which pairs
are likely to appear together. Joint probability estimation of two
charterers Ci and Cj in an HTTP request is done as in Equation 1.
In this equation P(Ci, Cj) denote the joint probability of characters
Ci and Cj and P(Ci|Cj) is the conditional probability of character
Ci given that Cj has appeared in the HTTP request. This can be
generalized for ‘n’ character combinations as in Equation 2.
P(Ci , Cj) = P(Ci|Cj)P(Cj)
(1)
P(C1, C2,· · · , Cn)
= P(C1|C2,· · · , Cn)P(C2|C3,· · · , Cn)P(C3|C4,· · · , Cn)...P(Cn)
(2)
In order to select characters which are useful for differentiating nor-
mal and anomalous requests we compare the normalized frequency
of occurrence in both types of requests. Those characters which
have high frequency difference will be selected for further consid-
eration. A sample frequency distribution carefully chosen from the
HTTP CSIC 2010 dataset [3] is shown in Figure 3. We can notice
that certain characters indeed appear only in anomalous requests
and not in normal HTTP requests. We use only these characters to
study their joint probability of occurrence. We calculate the joint
probability of character combinations for all subset combinations of
characters and select those combinations having certain minimum
threshold probability value for regular expression based signature
generation.
2.2 Regular Expression based Signature
Generation Using Character Combinations
Once the characters which show difference in their distribution are
selected, next step is to write regular expressions using them so as
to search those combinations in a test HTTP request. In order to
write the regular expression involving characters which show high
probability of co-occurrence, we do a second level of search and
find the order in which these characters appear and other content
in the HTTP request. We combine these characters ordering to
write regular expression based signatures for detecting anomalous
requests. A sample content of encoded GET HTTP request for XSS
attack is shown in Figure 4 whose decoded format is shown in Figure
5 and the corresponding regular expression using python syntax
is shown in Figure 6. This regular expression has only characters
with significant frequency difference as mentioned previously.
3 EXPERIMENTS
To evaluate the detection performance of proposed approach, we
used HTTP CSIC 2010 dataset [3]. We divided the dataset contain-
ing anomalous HTTP requests in the ratio 40:60 for each attack
type and use it for training and testing respectively. This dataset
was created with HTTP requests by generating attacks against a
targeted e-commerce web application. The dataset has requests
pertaining to attacks such as SQL injection, server side scripting
injections, CRLF injection and cross site scripting. We separated
the anomalous HTTP requests from this dataset into different at-
tack categories by manually screening them. Subsequently used
the character set shown in Figure 3 to estimate the joint probabil-
ity of occurrence. We used HTTP requests from training portion
of each category for joint probability estimation with a probabil-
ity value of 1.0 and 0.7 and above, we selected the corresponding
character combinations for generating signatures. Subsequently
we generated regular expression based signatures for each attack
type and used for evaluation. Detection performance of proposed
method for few sample attack types namely SQL Injection, Cross-
site scripting, Server side include and blind SQL injection attacks
are shown in Table 1. In this table for each attack type we show
two signatures (in python language format) one with characters
having joint probability of occurrence of 1.0 (indicated as S1) and
other with 0.7 (indicated as S2). In this table, each column header
has the number of test instances used for each category. These test
instances are tested against the signature shown in a row. For exam-
ple the column with heading XSS has 690 number of test instances
and are evaluated using regular expression Signature-1 (S1) of XSS
which results in all 690 instances correctly detected as XSS attack
type. Similar interpretation is done for other column and rows. We
can notice from this table that the proposed method can detect
attacks with very high classification performance (for signatures
generated with characters having joint probability 1) without cross
signature matching and low false positives (with no normal HTTP
URLs identified as any attack type).
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan890Figure 3: Frequency Distribution of Characters in HTTP Requests
Table 1: Detection Performance for Different Attack Types
XSS
S1:
S2:
SQL Table Modification S1:
S2:
S1:
S2:
S1:
S2:
Blind SQL Injection
Server Side Include
Signature
r"[^]+>[^<>]+]+>"
r"[^&]+&[^]+>[^]+>*"
r"[^+]+\+\*\+*"
r"[^’]+’;\+[^;]+;\+[^\+]+\+\*\+[^’]+’*"
r"[^;]+;[^’]+’+[^’]+’;–*"
r"[^’]+’\);[^’]+’[^’]+’;–*"
r"[^*"
r"[^*"
XSS
(690)
690
432
0
0
0
0
0
0
0
0
123
123
0
0
0
0
SQL Table
Modification
Blind SQL Server Side Normal
Injection
(123)
(662)
Include
(434)
(21600)
0
0
0
0
662
544
0
0
0
0
0
0
0
0
434
114
0
0
0
0
0
0
0
0
GET http://localhost:8080/tienda1/publico/autenticar.jsp?modo=
entrar&login=bob%40%3C SCRipt%3Ealert%28Paros%29%3C
%2FscrIPT%3E.parosproxy.org&pwd=84m3ri156&remember=on
&B1=Entrar
Figure 4: Encoded HTTP GET Request Content
GET http://localhost:8080/tienda1/publico/autenticar.jsp?modo=
entrar&login=PI:EMAIL
&pwd=84m3ri156&remember=on&B1=Entrar
Figure 5: Decoded HTTP GET Request Content
Regular Expression: r"[^]+>[^<>]+]+>"
Figure 6: Regular Expression Signature for Detecting the At-
tack
4 CONCLUSION
In this paper we proposed a method to detect anomalous HTTP
requests with regular expression based signatures. These signa-
tures are generated using those character combinations which are
known to differentiate normal and malicious requests. We experi-
mented with a publicly available dataset and showed that proposed
detection method can identify range of anomalous HTTP requests.
ACKNOWLEDGMENTS
This research is financially supported under Indo-Norway SPARC
project through grant number SPARC/2018-2019/P448/SL by Gov-
ernment of India.
REFERENCES
[1] Davide Ariu, Roberto Tronci, and Giorgio Giacinto. 2011. HMMPayl: An Intrusion
Detection System Based on Hidden Markov Models. Computer Security 30, 4 (2011),
221–241.
[2] Igino Corona, Davide Ariu, and Giorgio Giacinto. 2009. HMM-Web: A Framework
for the Detection of Attacks Against Web Applications. In ICC ’09: Proceedings of
IEEE International Conference on Communications. 1–6.
[3] Carmen Torrano Gimenez, Alejandro Perez Villegas, and Gonzalo Alvarez Mara-
non. 2010. HTTP DATASET CSIC 2010. http://www.isi.csic.es/dataset/. Online;
Accessed 20-Feb-2020.
[4] Neminath Hubballi, Santosh Biswas, and Sukumar Nandi. 2010. Layered Higher
Order n-grams for Hardening Payload based Anomaly Intrusion Detection. In
FARES ’10: Proceedings of the workshop on Frontiers of Availability, Reliability and
Security. 1–6.
[5] Tammo Krueger, Christian Gehl, Konrad Rieck, and Pavel Laskov. 2010. TokDoc:
A Self-healing Web Application Firewall. In SAC ’10: Proceedings of the 2010 ACM
Symposium on Applied Computing. ACM, 1846–1853.
[6] Divya Muthukumaran, Dan O'Keeffe, Christian Priebe, David Eyers, Brian Shand,
and Peter Pietzuch. 2015. FlowWatcher: Defending Against Data Disclosure
Vulnerabilities in Web Applications. In Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security - CCS '15. ACM Press.
[7] Mayank Swarnkar and Neminath Hubballi. 2015. Rangegram: A Novel Payload
Based Anomaly Detection Technique Against Web Traffic. In ANTS ’15: Proceedings
of the 9th IEEE International Conference on Advanced Networks and Telecommuni-
cations Systems. 1–6.
[8] Ke Wang, Janak J. Parekh, and Salvatore J. Stolfo. 2006. Anagram: A Content
Anomaly Detector Resistant to Mimicry Attack. In RAID’06: Proceedings of the 9th
International Conference on Recent Advances in Intrusion Detection. 226–248.
[9] Ke Wang and Salvatore J. Stolfo. 2004. PAYL: Anomalous Payload-based Network
Intrusion Detection. In RAID ’04: Proceedings of Recent Advances in Intrusion
Detection. 203–222.
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan891