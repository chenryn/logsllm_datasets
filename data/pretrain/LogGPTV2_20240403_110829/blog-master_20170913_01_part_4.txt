#### 检查方法：    
```  
select * from pg_stat_activity where now()-xact_start > interval 'N second';  
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
检查长事务原因，体现在健康报告中。  
#### 绘图  
趋势图  
### 13、IDLE in transaction 长事务    
#### 检查方法：    
```  
select * from pg_stat_activity where current_query ~ 'IDLE in transaction' and now()-xact_start > interval 'N second';  
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
检查业务，为什么事务会处于空闲状态。  
#### 绘图  
趋势图  
### 14、2PC事务    
#### 检查方法：    
```  
select * from pg_prepared_xacts where now()-prepared > interval 'N second';  
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
检查业务，为什么会长时间不提交2PC事务。  
#### 绘图  
趋势图  
### 15、慢查询    
#### 检查方法：    
```  
select * from pg_stat_activity where query_start > interval 'N second';  
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
优化、扩容。  
#### 绘图  
趋势图  
### 16、泄露大对象(PG)  
#### 检查方法：    
```  
vacuumlo -n $db -w  
```  
#### 判断方法：    
如果大对象没有被引用时, 建议删除, 否则就类似于内存泄露, 使用vacuumlo可以删除未被引用的大对象, 例如: vacuumlo -l 1000 $db -w .   
应用开发时, 注意及时删除不需要使用的大对象, 使用lo_unlink 或 驱动对应的API .   
参考 http://www.postgresql.org/docs/9.4/static/largeobjects.html   
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
天  
#### 处理方法：    
如果大对象没有被引用时, 建议删除, 否则就类似于内存泄露, 使用vacuumlo可以删除未被引用的大对象, 例如: vacuumlo -l 1000 $db -w .   
应用开发时, 注意及时删除不需要使用的大对象, 使用lo_unlink 或 驱动对应的API .   
参考 http://www.postgresql.org/docs/9.4/static/largeobjects.html   
#### 绘图  
趋势图  
### 17、数据库空间分布柱状图    
1、柱状图  
```  
select current_database(), buk this_buk_no, cnt rels_in_this_buk, pg_size_pretty(min) buk_min, pg_size_pretty(max) buk_max   
from  
  (   
   select row_number() over (partition by buk order by tsize),tsize,buk,min(tsize) over (partition by buk),max(tsize) over (partition by buk),count(*) over (partition by buk) cnt   
   from   
     (   
       select pg_relation_size(a.oid) tsize, width_bucket(pg_relation_size(a.oid),tmin-1,tmax+1,10) buk   
       from   
         (  
	  select min(pg_relation_size(a.oid)) tmin,max(pg_relation_size(a.oid)) tmax   
          from pg_class a,pg_namespace c where a.relnamespace=c.oid and nspname !~ $$^pg_$$ and nspname<>$$information_schema$$  
         ) t,   
         pg_class a,  
         pg_namespace c   
         where a.relnamespace=c.oid and nspname !~ $$^pg_$$ and nspname<>$$information_schema$$   
      ) t  
  )t where row_number=1;  
```  
区分：  
```  
库级    
表空间级    
schema级    
用户级    
表级    
索引级    
```  
2、列表（SIZE TOP N）  
```  
select datname, pg_size_pretty(pg_database_size(datname)) from pg_database order by pg_database_size(datname) desc limit N;  
select datname, pg_size_pretty(pg_relation_size(oid)) from pg_class where relkind='r' order by pg_relation_size(oid) desc limit N;  
select datname, pg_size_pretty(pg_relation_size(oid)) from pg_class where relkind='i' order by pg_relation_size(oid) desc limit N;  
```  
区分  
```  
库级    
表空间级    
schema级    
用户级    
表级    
索引级    
```  
### 18、耗尽序列    
剩余可使用次数不足1000万次的序列检查:   
```  
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`  
do  
psql -d $db --pset=pager=off  N  
```  
年龄大于N的对象总空间，用于预警需要扫描多少数据、产生多少WAL才能将年龄降下来。预测FREEZE风暴。         
```
select sum(pg_relation_size(oid)) from pg_class where age(datfrozenxid) > N 
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：   
如果超过15亿，建议用户在业务空闲时间段，执行：  
```  
postgres=# set vacuum_freeze_min_age = 0;  
postgres=# vacuum freeze;  
```  
详见  
[《PostgreSQL的"天气预报" - 如何预测Freeze IO风暴》](../201606/20160612_01.md)    
[《PostgreSQL 大表自动 freeze 优化思路》](../201605/20160520_01.md)    
#### 绘图  
趋势图  
### 22、表年龄    
#### 检查方法：    
```  
select relname, age(relfrozenxid) from pg_class where relkind='r' where age(relfrozenxid) >N order by 2 desc;  
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
```  
postgres=# set vacuum_freeze_min_age = 0;  
postgres=# vacuum freeze table_name;  
```  
#### 绘图  
趋势图  
### 23、WAL目录    
#### 检查方法：    
```  
$PGDATA/pg_xlog, $PGDATA/pg_wal  
空间占用  
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
[《PostgreSQL 清理redo(xlog,wal,归档)的机制 及 如何手工清理》](../201702/20170216_01.md)    
#### 绘图  
趋势图  
### 24、未归档日志    
#### 检查方法：    
```  
$PGDATA/ pg_wal|pg_xlog /archive_status  
*.ready  表示未归档  
```  
#### 判断方法：    
未归档文件数超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：   
检查pg_log中的错误，是否有归档异常。  
检查归档机制、归档命令配置，是否正常。  
检查IO、网络、CPU是否存在瓶颈。  
必要时进行清理，记得清理时同时清理.ready文件。  
[《PostgreSQL 清理redo(xlog,wal,归档)的机制 及 如何手工清理》](../201702/20170216_01.md)    
#### 绘图  
趋势图  
### 25、临时空间    
#### 检查方法：    
```  
show temp_tablespaces;  -- 参数  
如果没有单独临时目录，则在表空间目录的pgsql_tmp目录下。  
检查空间占用  
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
检查SQL，是否有优化空间。  