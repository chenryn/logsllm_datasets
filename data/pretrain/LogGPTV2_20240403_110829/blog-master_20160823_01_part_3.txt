                {    
                        int                     i;    
                        ahprintf(AH, ";\tdepends on:");    
                        for (i = 0; i nDeps; i++)    
                                ahprintf(AH, " %d", te->dependencies[i]);    
                        ahprintf(AH, "\n");    
                }    
        }    
        if (ropt->filename)    
                RestoreOutput(AH, sav);    
}    
```
下面调整一下list文件, 根据list文件还原 :  
例如注释test_1的表创建和数据还原.  
```
;176; 1259 26457 TABLE public test_1 postgres    
;7740; 0 26457 TABLE DATA public test_1 postgres    
```
然后调整顺序  
```
275; 1259 27051 TABLE public test_100 postgres    
1175; 1259 32451 TABLE public test_1000 postgres    
```
调整为  
```
1175; 1259 32451 TABLE public test_1000 postgres    
275; 1259 27051 TABLE public test_100 postgres    
```
保存toc.list  
删除数据库digoal:  
```
digoal=# \c postgres    
You are now connected to database "postgres" as user "postgres".    
postgres=# drop database digoal;    
DROP DATABASE    
```
还原 :  
```
pg93@db-172-16-3-33-> pg_restore -h 127.0.0.1 -p 1999 -U postgres -C -d postgres -j 10 -L ./toc.list -v ~/paralleldmp >./restore.log 2>&1    
```
查看restore.log日志, 注意到顺序调整生效 :  
```
pg_restore: processing item 1175 TABLE test_1000    
pg_restore: creating TABLE test_1000    
pg_restore: processing item 275 TABLE test_100    
pg_restore: creating TABLE test_100    
```
同时进入数据库查看test_1表没有被还原.  
```
digoal=# \d test_1    
Did not find any relation named "test_1".    
```
## pg_dumpall :  
pg_dumpall最主要的是用于备份全局数据, 例如表空间的DDL, 创建用户的DDL.  
导出创建用户, 创建表空间的脚本 :  
```
pg93@db-172-16-3-33-> pg_dumpall -g -h 127.0.0.1 -p 1999 -U postgres -f ./global.dmp    
```
内容如下 :  
```
pg93@db-172-16-3-33-> cat global.dmp     
--    
-- PostgreSQL database cluster dump    
--    
SET client_encoding = 'UTF8';    
SET standard_conforming_strings = on;    
--    
-- Roles    
--    
CREATE ROLE client1;    
ALTER ROLE client1 WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION PASSWORD 'md596bdd340a56d9ab240581edede7a13c6';    
CREATE ROLE digoal;    
ALTER ROLE digoal WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION PASSWORD 'md5c08bdd942d14da5ede9d9cef2b17ef9c';    
CREATE ROLE gp1;    
ALTER ROLE gp1 WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION;    
CREATE ROLE new;    
ALTER ROLE new WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION PASSWORD 'md54a5ca2a5e9aaed4c781e7d72d7fe945f';    
CREATE ROLE postgres;    
ALTER ROLE postgres WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION PASSWORD 'md53175bce1d3201d16594cebf9d7eb3f9d';    
CREATE ROLE sslcertgroup;    
ALTER ROLE sslcertgroup WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION;    
CREATE ROLE u4;    
ALTER ROLE u4 WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION PASSWORD 'md5bbc9d1a9f9e201c9c9d3c153f85771cc';    
--    
-- Role memberships    
--    
GRANT gp1 TO client1 GRANTED BY postgres;    
GRANT sslcertgroup TO client1 GRANTED BY postgres;    
GRANT sslcertgroup TO digoal GRANTED BY postgres;    
GRANT sslcertgroup TO postgres GRANTED BY postgres;    
--    
-- Tablespaces    
--    
CREATE TABLESPACE tbs_digoal OWNER postgres LOCATION '/pgdata/digoal/1921/data03/pg93/1999/tbs_digoal';    
--    
-- Per-Database Role Settings     
--    
ALTER ROLE postgres IN DATABASE postgres SET work_mem TO '10240MB';    
--    
-- PostgreSQL database cluster dump complete    
--    
```
## COPY :  
除了使用以上命令导出数据库之外, 还可以使用SQL语句导出数据, 亦可结合管道使用.  
例如 :  
导出 :  
```
digoal=# copy test_10 to '/home/pg93/test_10.dmp' with csv header;    
COPY 1000    
digoal=# select sum(hashtext(t.*::text)) from test_10 t;    
    sum         
------------    
 -432745392    
(1 row)    
digoal=# truncate test_10;    
TRUNCATE TABLE    
```
导入 :  
```
digoal=# copy test_10 from '/home/pg93/test_10.dmp' with csv header;    
COPY 1000    
digoal=# select sum(hashtext(t.*::text)) from test_10 t;    
    sum         
------------    
 -432745392    
(1 row)    
```
## 小结  
1\.  
如果数据库非常庞大, 在做pg_dump备份时, 与ACCESS SHARE锁冲突的SQL将会处于等待状态,例如DDL.同样的如果在pg_dump加access share锁的过程中与DDL冲突，那么pg_dump会失败。    
DDL等待直到pg_dump结束(锁的释放需要等待顶级事务块结束), 这个也是非常危险的，因为DDL会与其他所有锁冲突，当发生在业务期间就会堵塞业务.  
这个是需要特别注意的.  
2\.  
pg_dump, pg_dumpall, pg_restore命令详解参考 man 文档.  
参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201241134721101/  
2\. http://blog.163.com/digoal@126/blog/static/16387704020123129649342/  
3\. http://blog.163.com/digoal@126/blog/static/163877040201337104355272/  
4\. http://blog.163.com/digoal@126/blog/static/163877040201322510519547/  
[flag](http://info.flagcounter.com/h9V1)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")