title:A Secure, Practical &amp; Safe Packet Spoofing Service
author:Will Scott
POSTER: A Secure, Practical & Safe Packet Spooﬁng Service
Will Scott
NYUAD
PI:EMAIL
ABSTRACT
SP 3 presents the design and implementation of a service to
allow clients to send themselves a limited amount of network
traﬃc from an arbitrary source IP address. Packet Spooﬁng
is a powerful tool, although often misused, and has the po-
tential to establish TCP connections between clients located
behind NATs, to learn about network ﬁrewall policies, and
to obscure communication patterns by separating source and
destination. SP 3 is the ﬁrst system to oﬀer this capability
as a service, while implementing safeguards to prevent ma-
licious users from attacking others. This poster presents the
design of SP 3.
1.
INTRODUCTION
Internet traﬃc is sent with a “from” address, the source IP
used to let the recipient know where to respond and where
the message is coming from. Today, a variety of on line
DDOS attacks continue to occur when the assumption that
the source address is truthful are violated. Packet spooﬁng,
while most closely associated with these attacks, has legiti-
mate uses as well. Many of these remain under-explored due
to routing restrictions limiting and discouraging the prac-
tice. Today, under a quarter of IPv4 source addresses, and
a smaller fraction of end hosts, are able to transmit packets
with forged sender addresses. [Beverly and Bauer 2005]
To enable more exploration of valid uses of Packet spoof-
ing, we introduce SP 3, a system designed to allow any host
to opt-in to receiving spoofed packets. To provide this ser-
vice, we focus on ensuring that SP 3 cannot be misused as
an additional source of DDOS or malicious traﬃc, while still
providing a general purpose protocol that can be used for
more than just our own research. To this end, SP 3 uses
proof-of-ownership veriﬁcation where clients must prove their
liveness and ability to send and receive packets at an IP ad-
dress before spoofed packets will be sent to them.
Designing a system oﬀering to spoof packets for others is
tough for two major reasons. First, limiting the potential for
misuse is at odds with running an open proxy of any sort,
and it is diﬃcult to deﬁne a line for what type of traﬃc is
beneﬁcial versus detrimental. Second, it is unclear how such
a system could realistically scale, and how available band-
width can be eﬀectively shared between clients. Many net-
work administrators are inherently opposed to packet spoof-
ing as a technique in general, making it important to design
a protocol where no individual can cause the service to loose
eﬀectiveness for others.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
Asia CCS ’17 April 02–06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4944-4/17/04.
DOI: 10.1145/3052973.3055155
The contributions described in the rest of this paper are:
• The design and prototype implementation of SP 3, a
system allowing any host to receive spoofed packets.
• A protocol for remote attestation of IP ownership -
proving to a third party that your host is accessible at
a given IP address without direct communication.
• A preliminary exploration of novel protocols that can
be designed with the ability to spoof packets on a lim-
ited basis.
2. BACKGROUND
Packet spooﬁng is not a new technique, though it has re-
ceived relatively little study in recent years. A signiﬁcant
amount of research on spooﬁng occurs in the context of ma-
licious traﬃc, where spooﬁng can be used as a mechanism
to reﬂect ampliﬁed amounts of traﬃc towards a victim. Re-
search continues to look at how to detect if incoming traﬃc is
spoofed, so that these forms of attacks can be mitigated [Jin
et al. 2003, Duan et al. 2008]. These techniques rely on the
network not wanting spoofed traﬃc, and become much less
eﬀective if the spoofed traﬃc is created in-tandem with a
host within the network. When traﬃc is requested by a
host on the network, the IP ﬁelds can be ﬁlled such that
TTL and sequence number values appear much more in-line
with an existing communication stream and become much
harder for the network to observe as anomalous.
There are a couple exciting legitimate uses of packet spoof-
ing that have been described and prototyped, but none of
them have received widespread adoption or supported gen-
eral use an experimentation by normal users. NUTSS [Guha
et al. 2004] presents a design for establishing a TCP con-
nection between two participating hosts both trapped be-
hind NAT devices, using packet spooﬁng to trick the routers
into each believing that their host initiated the connection.
Spooky Scan [Ensaﬁ et al. 2014] shows how packet spoof-
ing can be used to learn connectivity between two remote
computers without needing to control them, providing an
alternative Internet measurement technique.
The technique we describe for asserting control of an IP
address in 3.1 has also been approached before. The “Ac-
countable Internet Protocol” presents a network level de-
sign where addresses are self certifying, making it easy for
a host to prove indirectly who and where it was [Ander-
sen et al. 2008]. The need for proving IP address is also
used in variants of bitcoin which provide routing, or proof-
of-bandwidth [Ghosh et al. 2014]. We believe our approach
is unique in providing a transitive proof-of-presence without
revealing a network-noticeable signature.
3. SYSTEM DESIGN
The SP 3system consists of three participants: a server,
client, and sender. The server is the host which can send
926• Active engagement. The client should be running
at the time of transfer. It should not be possible to
launch replay attacks, and traﬃc should not be able
to continue once the client has disconnected.
• DDOS resistance. The server should not be usable
to overwhelm the remote network.
• Locality. The Client must be able to prove it can
receive traﬃc from the destination address.
There are a number of mechanisms by which the client can
provide this consent. The simplest is that the client estab-
lishes a connection to the server, and directly communicates
to the server that it would like to receive traﬃc. This ap-
proach works for many use cases, such as when performing
NAT hole-punching, or when a host attempts to learn rout-
ing policies of its public interfaces. One use case we want to
enable which is not addressed by direct connection is when
SP 3
is used as part of a protocol for circumventing cen-
sorship, since a direct connection to a SP 3
server would
become a single point of failure that could disrupt such a
protocol. To this end, we also support indirect forms of
conﬁrmation that do not require easily discriminable com-
munication on behalf of the client.
STUN Candidate injection
We next describe two mechanisms which meet these cri-
teria without a direct connection between the client and
SP 3 server.
3.1.1
One existing protocol that can be used to transmit a chal-
lenge code indirectly is the original STUN protocol. STUN,
Session Traversal Utilities for NAT, is a standardized UDP
protocol providing a mechanism for clients to automatically
learn their publicly facing IP address, and facilitate session
initiations.
In the original speciﬁcation of STUN, clients
may ask that the response to their query be sent to an al-
ternative IP address, in order to learn more about the NAT
device they are behind. In SP 3 , we can use this same mech-
anism to send a STUN message from the subset of STUN
servers which support the ﬁrst version of the protocol to the
IP address and port speciﬁed by the client.
In subsequent version of the STUN protocol, the server
will only respond to the IP address it receives packets from.
SP 3 can also use these servers for candidate injection by
sending a spoofed packet to the STUN server claiming to be
from the client IP address.
STUN is an ideal protocol for IP address authentication
for three reasons. First, STUN is a session initiation pro-
tocol for learning IP addresses, which is the purpose of our
mechanism, and causes the protocol to easily adapt to our
use case. Second, the protocol is structured such that a
client query may result in multiple responses in the process