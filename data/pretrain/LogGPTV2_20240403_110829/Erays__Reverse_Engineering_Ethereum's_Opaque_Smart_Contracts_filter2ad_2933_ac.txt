In the second case,
the operations update the
blockchain (world) state. Such operations include storage
updates, contract creation, log updates and message calls.
We also consider RETURN as a member of this category.
These operations deﬁne the core semantics of a contract.
By making sure that all these operations are executed with
the right arguments (memory buffers are checked if appli-
cable), we ensure that our representation is correct. If our
execution ends up missing or adding any such operations,
we mark it as a failure.
The rest of the operations fall into the third case. These
operations include the arithmetic operations, memory op-
1376    27th USENIX Security Symposium
USENIX Association
erations, as well as all the new operations we introduce
in our representation. The semantics of the operations
are implemented in our virtual machine. As an example,
when executing $s3 = $s2 + $s3, we would load the
values from $s2 and $s3, sum them , modulo by 2256
(word size) and put the result in $s3. If our machine
encounters an exception during these operations, we mark
it as a failure.
We leverage historical transactions on the blockchain
to construct a set of tests. We start with the set of unique
contracts (34 K) described in Section 3. Then, for each
unique contract, we collect the most recent transaction
up to January 3rd, 2018. In total, we gathered ˜15,855
transactions along with the corresponding contracts in our
test set. We note this is only 46% of all unique contracts—
the remaining were never transacted with.
If Erays fails to generate the representation in the ﬁrst
place, we mark it as a “construction failure”. If our repre-
sentation behaves incorrectly, we mark it as a “validation
failure”. In total we fail 510 (3.22%) of the test set, among
which 196 are “construction failures” and 314 are ‘valida-
tion failures”.
4.8 Limitations
Erays is not a full decompiler that produces recompil-
able Solidity code. The major limitation is the readability
of the output. While the output is relatively straightfor-
ward when only common types are present (uint array,
address), Erays cannot succinctly capture operations on
complex types such as mapping (uint => string).
Erays’s implementation can be improved in a few ways.
Erays uses naive structural analysis for structure recov-
ery. There are several follow-up works on improving the
recovery process, including iterative reﬁnement [41] and
pattern-independent structuring [51].
Erays does not perform variable recovery and type
recovery. Previous work in that area has been focusing
on x86 architecture [12, 30]. Though operating with
a different instruction set, Erays could draw from the
techniques.
5 Measuring Opaque Smart Contracts
In this section, we leverage Erays to provide insight on
code complexity and code reuse in the ecosystem. Further-
more, we demonstrate how Erays can be used to reduce
contract opacity. We run Erays on the 34 K unique con-
tracts found on the Ethereum blockchain. We fail to create
CFGs for 445 (1.3%) unique binaries, which we exclude
from our analysis.
Figure 2: CDF Contract Blocks—We show the CDF of the
number of blocks in unique smart contracts. The median num-
ber of blocks is 100, which denote relatively small programs.
However, there is a long tail of very large contracts—the largest
contract contains a total of 13,045 basic blocks.
Figure 3: Complexity of Contracts—We show the cyclomatic
complexity of contracts on the blockchain, by the fraction of
functions in each contract with complexity larger than 10. Only
34% of contracts have no functions in this criteria. The median is
0.3, with a long tail of contracts that have increasingly complex
functions.
Figure 4: Longitudinal Complexity—We show the complex-
ity of unique contracts on the blockchain by the number of
blocks and overall McCabe complexity. Contracts have steadily
increased in the number of blocks over time, indicating larger
contracts today. Despite this, contracts have not increased in
overall McCabe complexity, indicating better code hygiene.
USENIX Association
27th USENIX Security Symposium    1377
 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1 10 100 1000 10000CDF BlocksBlocks in Unique Contracts 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1CDF Cyclomatic Complexity% Functions with Cyclomatic Complexity > 10 60 80 100 120 140 16010-201501-201604-201607-201610-201601-201704-201707-201710-201701-2018 30 40 50 60 70Average Blocks of ContractsAverage Complexity of ContractsMonthBlocksComplexity5.1 Code Complexity
5.2 Code Reuse
Our analysis tools give insight into the complexity of con-
tracts found on the blockchain. We begin by investigating
the number of blocks in Ethereum contracts (Figure 2).
Most contracts are fairly small—the median number of
blocks found in contracts is 100, and these blocks con-
tain a median 15 instructions. However, there is a long
tail of more complicated contracts. In the largest case,
one contract contains a total of 13,045 blocks. However,
we ﬁnd that this contract is one entirely ﬁlled with STOP
instructions, which each terminate their own basic block.
Basic blocks only give one ﬂavor of contract complex-
ity. Just as important are the edges and the connections
between the blocks in the CFG. To quantify this, we mea-
sure the cyclomatic complexity of each contract, which
is a popular software metric introduced by Thomas Mc-
Cabe [33]. Cyclomatic complexity measures the num-
ber of linearly independent paths in a given control ﬂow
graph. McCabe suggested that a given function with cy-
clomatic complexity greater than 10 often needed to be
refactored or redone, due to unnecessary complexity and
an increased chance of errors in the program. Past work
has also noted a weak relationship between increased
cyclomatic complexity and software security [45].
Figure 3 shows a CDF McCabe complexity by the
fraction of functions in contracts with complexity > 10.
We ﬁnd that 79% of unique contracts do not contain a
single function with complexity greater than 10, which
indicates that in addition to being small, many contracts
do not contain unnecessarily complex functionality. We
additionally observe that there is a long tail of complex
contracts, and in the worst case, a handful of contracts are
entirely ﬁlled with overly complex functions.
We ﬁnally investigate how code complexity has evolved
over time. Figure 4 shows both the number of blocks and
the McCabe complexity of new contracts over time. We
ﬁnd that contracts are growing larger at a steady rate—
the average number of blocks in contracts published in
January 2018 is 170, which is 350% greater than the ﬁrst
contracts published in late 2015. However, we were sur-
prised to ﬁnd that McCabe complexity has not followed
a similar trend. Around January 2017, contract complex-
ity declined, and has been relatively stable since. This
indicates that contract writers are writing code with bet-
ter hygiene. We note that around this time, there was a
sharp rise in ERC20 Tokens on the Ethereum blockchain,
which tend to be larger contracts that contain an average
of 226 blocks. However, they are not particularly com-
plex, and have an average McCabe complexity of 51.6,
which is smaller than many contracts in the ecosystem.
ERC20 tokens make up 25% of the unique binaries in our
dataset.
Erays groups basic blocks into its higher-level functions.
From these groupings, we can further compare the struc-
ture and code of functions across contracts, giving us a
useful metric for determining function similarity. To en-
able this measurement, we interpret a function as a “set of
blocks” and compare the sets across functions in different
contracts. Each block, however, may contain contract
speciﬁc data that would render the comparison useless,
such as speciﬁc return address information or constants
compiled into a block. In order to handle these cases,
we remove all references to constant data found in EVM
opcodes. As an example, consider the following code
block:
hex
6060
6040
52
6004
36
10
61006c
57
reduced hex
opcode
60
PUSH1 0x60
60
PUSH1 0x40
52
MSTORE
PUSH1 0x4
60
CALLDATASIZE 36
LT
10
61
PUSH2 0x6c
JUMPI
57
This shows the original hex string, as well as the de-
coded opcode and the reduced hex after removing con-
stant values. We then take the hashes of the resultant
blocks as the “set” of blocks in a function, and compare
these sets in further analysis. From here on, we call this
resultant hash set a function “implementation”. We ﬁnd
that there are a handful of implementations that are found
in many contracts; in the most extreme case, the most
popular function appears in 11K contracts. Unfortunately,
many of the functions with the same implementation are
not particularly interesting —many are simply public “get-
ter” methods for speciﬁc data types. For example, the
most popular function by implementation is the public
getter function for the uint256 data type.
We next turn to investigate popular external functions
included in contracts, and the number of implementations
of each of those functions. As mentioned previously,
each external function is identiﬁed via a 4-byte signa-
ture in each solidity contract. Table 2 shows the top 10
function signatures found in our dataset. We note all of
the top functions are related to the ERC20 speciﬁcation,
which ERC20 tokens must conform to [26].
Interest-
ingly, we ﬁnd that although these functions appear in
several contracts, there are far fewer implementations of
each function. Some of these can be easily explained,
for example, the decimals() function is simply a ‘get-
ter” method for getting the precision of a token. Other
functions, however, are harder to explain. The function
transfer(address,uint256) typically contains busi-
1378    27th USENIX Security Symposium
USENIX Association
Function Name
owner()
balanceOf(address)
transfer(address,uint256)
name()
symbol()
decimals()
totalSupply()
allowance(address,address)
transferFrom(address,address,uint256)
approve(address,uint256)
Contracts
11,045 (32.2%)
10,070 (29.3%)
9,424 (27.5%)
9,154 (26.7%)
9.087 (26.4%)
8,916 (26.0%)
8,732 (25.4%)
8,102 (23.6%)
7,979 (23.2%)
7,713 (22.5%)
Implementations
63
240
1,759
109
120
96
200
152
1,441
479
Table 2: Function Distribution—We show the distribution of functions in unique smart contracts. All of the top functions are
related to ERC20 tokens [26], which are required to implement a speciﬁc interface.
ness logic for a token that deﬁnes how token transfers
happen, and are somewhat custom. However, despite
appearing in 9.4 K contracts, there are only 1.4 K imple-
mentations in our dataset. This indicates many contracts
sharing the same implementation for such functions.
5.3 Reducing Contract Opacity
A useful product of Erays is the ability to identify the
functional similarity between two EVM contracts (Sec-
tion 5.2). We can extend this technique further to not
just investigate code reuse, but to reduce opacity in the
ecosystem. We do this by leveraging the compiled dataset
of 88.4 K binaries generated from veriﬁed Etherscan
source code as described in Section 3. From each of these
compiled binaries, we extract its functions, and then com-
pare function implementations pairwise from the com-
piled binaries to binaries collected from the blockchain.
An exact function match to a compiled function thus im-
mediately gives us the source code for that function from
its originating source ﬁle. We view this as similar to the
technique of “binary clone detection” [15,39], a technique
that overlays function symbols onto stripped binaries us-
ing a full binary.
We apply this technique to the opaque contracts on the
blockchain, i.e the ones that do not have easily linkable
source code. Among the 26 K unique opaque contracts,
we are able to reduce the opacity of the opaque contracts
to varying degrees. We are able to map a median 50%
of functions and 14.7% of instructions per opaque con-
tract. Notably, we reveal 2.4 K unique contracts that
we now have full source code for. These newly transpar-
ent contracts are what we call “frankenstein” contracts—
contracts for which source code comes from multiple
different contracts.
These techniques additionally improve the opacity in
the ecosystem for top contracts. Table 3 shows the top
10 contracts by balance held—the largest of which holds
a total of 737 K Ether. Of these contracts, ﬁve could not
be directly mapped to a veriﬁed source contract. After
applying Erays, we are able to successfully uncover an
average of 66% of the functions in each contract, and in
one case, match 100% of the functions in the contract
exactly. This contract holds a total of 488 K Ether, which
in 2018, is valued at 500 M USD.
6 Reverse Engineering Case Studies
In this section, we show how Erays can be used as a
reverse engineering tool in analyzing opaque Ethereum
smart contracts.
6.1 Access Control Policies of High-Value
Wallets
To begin our analysis, we investigate the opaque smart
contracts with the highest Ether balance. Using Erays,
we ﬁnd that many of these are multisignature wallets that
require multiple individuals to approve any transaction —
a standard cryptocurrency security measure.
The opaque wallet with the largest balance con-
tains $597 M USD as of February 2018. Through
blockchain analysis using Etherscan, we observed that this
contract was accessed every week from the same account,
0xd244..., which belongs to Gemini, a large cryp-
tocurrency exchange.4 This address accesses two other
high value, opaque wallets in our dataset, with $381 M
and $164 M USD in balance, respectively.
We use Erays to reverse engineer these contracts, and
uncover their access control policies. We ﬁnd that the
ﬁrst two contracts are nearly identical. In order to with-
draw money from the wallet, they require two out of
three administrator signatures. Any party can call the
4Gemini used this address to vote in a public referendum on
Ethereum governance, see
https://web.archive.org/web/20180130153248/http://v1.carbonvote.
com/
USENIX Association
27th USENIX Security Symposium    1379