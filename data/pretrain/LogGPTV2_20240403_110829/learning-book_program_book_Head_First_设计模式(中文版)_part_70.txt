大师：当你确信你的设计中有一个问题需要解决的时候，或者当你确信未来的需
求可能会改变时，都可以采用模式。
门徒：虽然我已经了解了许多的模式，但我觉得我的学习应该继续下去。
大师：是的，蚱。学习管理软件的复杂度和变化，这是一生的课题。但是现在
既然你已经知道了许多模式，就可以开始在需要的地方采用它们，并不断地学
习更多的模式。
门徒：等一下，你是说我还没有学完“金部”？
大师：蚱猛，你已经学会了一些基础模式，你会发现还有更多的模式在等着你，
包括一些应用在特定领域的模式，例如并发系统（ConcurrentSystem）和企业系
统。现在你已经有了良好的基础，学习这些模式就不会太难！
596
第13章
---
## Page 633
与设计模式相处
使用模式的心智
初学者到处使用模式。这很好：初学者可以借
此培养许多使用模式的实战经验。初学者也认
为“我使用越多模式，我的设计就越好”。初学
者将慢慢认识到并非如此，所有的设计都应该尽
量保持简单。只有在需要实践扩展的地方，才值
初学者的心智
得使用复杂性和模式。
我要为HelloWold找个模式
随着学习的进程，中级人员的心智开始
能够分辨何时需要模式，而何时不需要。
中级人员的心智依然会企图把过多的模式
套用在不适当的地方，但他们也开始察觉
到有些模式并不适合目前的情况，可以对
其改编使其适合。
中级人员的心智
或许这里我需要一个单件模式。
悟道者的心智能够看到模式在何处能够自然融人。
悟道者的心智并不急切于使用模式，而是致力于最
能解决问题的简单方案。悟道者的心智会考虑对象
的原则，以及它们之间的折衷。当对模式的需要自
然出现时，悟道者的心智就拿捏得宜地采用模式。
悟道者的心智也能看到相似模式之间的关系，以及
悟道者的心智
它们在意图上的微妙差异。悟道者的心智也同于初
“在这里采用装饰者模式相当自
学者的心智一不会让这些模式的知识过度影响设
然。“
计的决策。
你现在的位置
597
---
## Page 634
何时不使用模式
警告：过度使用设计模式可能导致代码被过度
工程化。应该总是用最简单的解决方案完成工
作，并在真正需要模式的地方才使用它。
等一下，我已经谈了整
本书，而你现在都告诉我不要
使用模式？
当然我们希望你使用设计模式！
但是我们更希望你能够成为一个好的面向对象设计者。
当一个设计方案决定要使用某个模式的时候，将为你
带来好处，因为任何模式都是身经百战，被验证了是
能够解决其问题的。而且模式可以被良好地归档，容
易被其他开发人员所了解（你知道的，模式是开发人
员共享的词汇）。
然而，当你使用设计模式的时候，仍然会有缺点。设
计模式常常产生一些额外的类和对象，所以会增加设
计的复杂度。设计模式也会在你的设计中加入更多层，
这不但增加复杂性，而且效率下降。
另外，有时使用设计模式会大材小用。许多时候回头
看看设计原则，你会发现有简单得多的解决方案能解
决相同的问题。若果真如此，可别抗拒，就用较简单
的解决方案吧！
不要因我们的话而感到挫折。我们并非鼓励你不要用
模式。当设计模式应用得恰当时，好处其实是非常多
PDG
的。
598
第13章
---
## Page 635
与设计模式相处
别忘了共享词汇的威力
在这本书中，我们花了相当多的时间讨论面向对象的基础知识，但可别
忘了设计模式中人的一面—设计模式不仅可以帮助你在大脑中装进这
些解决方案，也可以让你和其他开发人员之间有共享的词汇，而这正是
设计模式最大的优点之一。
想想看，从上次我们谈到共享词汇至今，有些事情已经不一样了：你现
在已经开始建立了自己的某些词汇！更别说学会了一整套的面向对象设
计原则，而从这些设计原则中你能轻易了解所遇到的任何新模式的动机
和工作方式。
现在你已经有了设计模式的基础，应该“把模式传出去”，让大家都知
道。为什么呢？因为当你的同伴开发人员也知道这些模式并使用共享词
汇的时候，将使得你们的设计更好，更容易沟通。最棒的是，你省下了
大量的时间。
我建立的这个广播类，它会持续地追踪
所有倾听它的对象，只要有新数据进来，就
会把滴息发送给每一个倾听者。最棒的地方在
于候听者可以在任何时候加入这个广播，也可以在任
何时候将自已从广播中副除。而这个广播类本身并不
知道这些倾听者的确切类，只要实现了正确的
接口，就可以当倾听者。
耗时
不完整
混满
你现在的位置
599
---
## Page 636
共享词汇的五种方式
共享词汇的五种方式
1.在设计会议中：当你和你的团队在会议中讨论软件设计时，
使用设计模式可以帮你们待在“设计中”人一点。从设计模
式和面向对象原则的视角讨论设计，可以避免你的团队很快
地陷人实现的细节，也可以避免发生许多误解。
2.和其他开发人员：当你和其他开发人员讨论的时候，可以使
用模式。这可以帮助其他开发人员学习新模式，并建立一个
社群。和别人分享你所学会的东西是很有成就感的一件事情。
3.在架构文档中：当你在编写架构文档的时候，使用模式将会
缩减文档的篇幅，并且让读者更清楚地了解你的设计。
4.在代码注释以及命名习惯上：当你在编写代码的时候，应在
注释中清楚地注明你所使用的模式。在选择类和方法的名称
时，应尽可能显示出隐藏在下面的模式。其他的开发人员在
阅读你的代码时会感激你，因为你让他们能够很快地了解你
的实现。
5.将志同道合的开发人员集合在一起：分享你的知识。许多开
发人员都听说过模式，但并不真正了解什么是模式。你可以
自愿为他们讲一堂模式介绍课，或者成立一个读书会。
简洁
精确
观察者
完整
PDG
600
第13章
---
## Page 637
与设计模式相处
和四人组一同巡游对象村
在对象村内，你不会遇到“喷射帮”和“鲨鱼帮”（译注：
四人组发起了款件模式运动，随后有许多人
也做出了重大的贡献，包括WardCanningham、
电影“西城故事”（WestSideStory）中的两个帮派），但
Kent Beck、Jim Coplien. Crady Booch、Bruce
是你有机会遇到四人组。你大概也注意到了，想要在模式的
Anderson、 Richard Gabriel.Dous Cea、Peter
世界中走得够远，你就一定会遇到他们。那么，到底这个神
Coad和Dous Schmidt，上面只列出了一.小部分
秘的“帮派”是怎么一回事呢？
名单。
简单地说，四人组包括了ErichGamma、RichardHelm、
RalphJohnson和JohnVlissides。他们是第一群将模式归类的
功臣，而这个过程开启了软件领域的一大跃进。
对象村旅游巴士
这个称号又是怎么来的？没有人知道，反正大家都是这么称
呼。但是想想看：如果你想成为“帮派成员”，好好地认识
对象村，那么该怎么办呢？幸好，他们同意带我们一同去巡
游对象村..
今天的模式比四人组
为实际需要的扩展
简单才是王运。如果你不
书中的更多，一并学会
使用模式。不要只是为
它们吧！
了假想的需要而使用模
用模式就能够设计出更简单的
方案，那就去于吧。
式。
Ralph 3ohnson
Richard Helm
模式是工具而不是
3ohn
规则，需要被适当地调
Vlissides
整以符合你的需求。
Etich Camma
PDI
对象村
四人组
你现在的位置
601
---
## Page 638
模式资源
你的旅途刚刚开始·····
现在你已经站在设计模式的顶端，准备挖得更深了：我们为你准备了比较权威的三本书，
把它们添加到你的书架上吧.
设计模式的经典书籍
DesignPatterns
这本书在1995年出版，揭开了设计模式的序幕。你可以在
Elements of Reusable
这本书中找到所有基础的模式。事实上，这本书中所介绍
Object-Oriented Software
的模式，也正是本书的基础。
Erich Gar
这本书并非涵盖了所有的模式一从这本书出版之后，这
个领域就不断地扩大一但尽管如此，它还是第一本也是
最重要的一本书。
在你读完《HeedFirst设计模式》之后，拿起这本书来探索
模式是个很棒的选择。
这本书的作者后来被称为“四人组”，或简
称GoF。
Chtistophe:Alexander发明了模式，导致软件也
模式的经典书籍
产生了类似的解决方案。
模式并不是从四人组开始的，而是始于
ChristopherAlexander。他是伯克利的建筑学
教授一没错，Alexander是个建筑师，而不
The
是计算机科学家。Alexander发明了建筑模式
Timeless Way of
（像房屋、城镇和城市）。
Building
下次当你有心情想挖掘得更深入时，可以阅
读《The Timeless Wayof Building》
和《APatternLanguage》这两本书，从中你
会了解到设计模式的真正起源，并体会到创
建“有生命的”建筑和具有弹性、可扩展性
软件之间的对比。所以，拿起你的星巴兹咖
Christopher Alexander
啡，坐下靠在椅背上，开始享受这一切吧….
602
第13章
---
## Page 639
与设计模式相处
其他设计模式资源
你会发现外面有许多活跃、热情的模式使用者和设计者社群，他们正
散开双臂等候你的加入。这里列出一些你一开始可以取得的资源
网站
The Portland Patterns Repository，由Ward
Pattern Reposilor
Cunningham运作，这是一个致力于模式相关信
息的WIKI，任何人都可以加入。
你可以看到许多你能想到的有关模式和0O系统
的问题在这里都有主题讨论。
http://c2.com/cgi/wiki?WelcomeVisitors
The Hillside Group，旨在促进通用的编程和设
计实践，并提供模式的集中资源。这个网站包
含了许多模式相关资源的信息，例如文章、书
籍、邮件列表和工具。
http://hillside.net/
会议和研讨会
如果你想和模式社群面对面地接触，一定要查看
有哪些与模式相关的会议和研讨会。Hillside网
业
站有完整的清单。另外你至少也应该去看看
OOPSLA的活动信息。OOPSLA是ACM举办的
研讨会，主题是针对面向对象系统、语言和应
用。
PDG
你现在的位置》
603
---
## Page 640
模式动物园
模式动物园
就如我们刚刚所说的，模式并非从软件开始，而是始于建筑
和城镇的架构。事实上，模式的概念可以被应用在许多不同的
领域。现在就让我们来逛逛模式动物园，瞧瞧有哪些模式
架构模式
用来建立生气勃勃的建筑、城
栖息地：从你所居住、观悉、参
镇和城市的架构。这也正是模
观的建筑物中，可以爱现它的踪
式开始的地方。
迹。
应用模式
栖息地：出现在三层架构、害
是建立系统级架构的模
户/服务器系统以及We6中。
式。许多多层的架构都
属于这一类目。
野外笔记：MVC可算是其中
的一种。
领域特定模式
帮忙找到它的栖息地
32EE
关注特定领域的问题，例如并
发系统或实时系统。
604
第13章
---
## Page 641
与设计模式相处
出没在公司的会议室以及项目管
业务流程模式
理会议中。
描述业务、顾客和数据之
间的交互，此种模式能够
处理如“如何有效决策并
沟通决策”之类的问题。
组织模式
帮助找到一个福息地
开发团队
描述了人类组织的结
顾客支持团队
构以及实践。到目前
为止大多数努力聚焦于
制造或支持软件的组织。
用户界面设计模式
致力于解决设计交互式软件
栖息地：被发现在视频游戏
时的问题。
设计老、CU5构造者和制作者
附近。
野外笔记：请将你对模式领域的观察和发现写在这里。
PDG
你现在的位置
605
---
## Page 642
反模式
以反模式歼灭恶势力
如果我们只有模式，而没有反模式，那么这个宇宙就不完整了。
如果设计模式能够让你在某个特定的情境之下，对一再出现的
问题提供通用的解决方案，那么反模式能给你什么？
反模式看起来总像是
一个好的解决方案，
反模式告诉你如何采用一个不好的解决方案解决一个
问题。
但是当它真正被采用
后，就会带来麻烦。
你可能会这么问：“怎么会有人愿意浪费时间将不好的解决方
案归档？”
通过将反模式归档，
这么说好了：如果老是有人用某个不好的解决方案处理某个问
题，而通过将它归档，可以帮助其他开发人员避免犯同样的错
我们能够帮助其他人
误。毕竞，避免不好的解决方案，就和发现好的解决方案一样
在实现它们之前，分
有价值！
让我们来看看一个反模式的元素：
辨出不好的解决方
反模式告诉我们为什么不好的解决方案会有吸引力。
案。
必须面对的是，如果不好的解决方案没有任何吸引力，那么根
本就不会有人想要使用它。反模式最重要的工作之一，在于警
像模式一样，有许多
告你不要陷入某种致命的诱惑。
类型的反模式，包括
反模式告诉你为何这个解决方案从长远看会造成不好的影响。
为了了解为什么这是一个反模式，你必须了解它在将来如何造
了开发反模式，00反
成负面影响。反模式会告诉你使用这个解决方案，在将来会为
模式、组织反模式和
你带来怎样的麻烦。
领域特定反模式。
反模式建议你改用其他的模式以提供更好的解决方案。
反模式除了告诉你什么解决方案不好之外，也会为你指出正确
的方向，向你建议一些会引向好的解决方案的可能性，这样反
模式才真正有帮助。
现在就让我们来看一个反模式。
606
第13章