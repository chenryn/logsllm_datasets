title:Hardware Acceleration of Searchable Encryption
author:Arnab Bag and
Sikhar Patranabis and
L. Tribhuvan and
Debdeep Mukhopadhyay
A High-Security Searchable Encryption Framework for
Privacy-Critical Cloud Storage Services
Thang Hoang∗
Attila A. Yavuz∗
Jorge Guajardo†
Abstract
Searchable encryption has received a signi(cid:27)cant attention from the research community with
various constructions being proposed, each achieving asymptotically optimal complexity for spe-
ci(cid:27)c metrics (e.g., search, update). Despite their elegancy, the recent attacks and deployment e(cid:29)orts
have shown that the optimal asymptotic complexity might not always imply practical performance,
especially if the application demands a high privacy. Hence, there is a signi(cid:27)cant need for search-
able encryption frameworks that capture the recent attacks with actual deployments on cloud in-
frastructures to assess the practicality under realistic settings.
In this article, we introduce a new Dynamic Searchable Symmetric Encryption (DSSE) frame-
work called Incidence Matrix (IM)-DSSE, which achieves a high level of privacy, e(cid:28)cient search/update,
and low client storage with actual deployments on real cloud settings. We harness an incidence
matrix along with two hash tables to create an encrypted index, on which both search and up-
date operations can be performed e(cid:29)ectively with minimal information leakage. This simple set
of data structures surprisingly o(cid:29)ers a high level of DSSE security while at the same time achiev-
ing practical performance. Speci(cid:27)cally, IM-DSSE achieves forward privacy, backward privacy and
size-obliviousness properties simultaneously. We also create several DSSE variants, each o(cid:29)ering
di(cid:29)erent trade-o(cid:29)s (e.g., security, computation) that are suitable for di(cid:29)erent cloud applications and
infrastructures. Our framework was fully-implemented and its performance was rigorously evalu-
ated on a real cloud system (Amazon EC2). Our experimental results con(cid:27)rm that IM-DSSE is highly
practical even when deployed on mobile phones with a large outsourced dataset. Finally, we have
released our IM-DSSE framework as an open-source library for a wide development and adaptation.
Keywords— Privacy-enhancing technologies; private cloud services; dynamic searchable symmet-
ric encryption
1 Introduction
The rise of cloud storage and computing services provides vast bene(cid:27)ts to society and IT industry.
One of the most important cloud services is data Storage-as-a-Service (SaaS), which can signi(cid:27)cantly
reduce the cost of data management via continuous service, expertise and maintenance for resource-
limited clients such as individuals or small/medium businesses. Despite its bene(cid:27)ts, SaaS also brings
signi(cid:27)cant security and privacy concerns to the user. That is, once a client outsources her data to
the cloud, sensitive information (e.g., email) might be exploited by a malicious party (e.g., malware).
Although standard encryption schemes (e.g., AES) can provide con(cid:27)dentiality, they also prevent the
∗Oregon State University, {hoangmin, attila.yavuz}@oregonstate.edu
†Robert Bosch Research and Technology Center, PI:EMAIL
This research is kindly supported by Robert Bosch with an unrestricted gift. Part of this work was done while the (cid:27)rst two
authors were visiting the Bosch RTC—LLC, Pittsburgh, PA.
1
client from querying encrypted data from the cloud. This privacy versus data utilization dilemma may
signi(cid:27)cantly degrade the bene(cid:27)ts and usability of cloud-based systems. Therefore, it is vital to develop
privacy-enhancing technologies that can address this problem while retaining the practicality of the
underlying cloud service.
Searchable Symmetric Encryption (SSE) [9] enables a client to encrypt data in such a way that
she can later perform keyword searches on it. These encrypted queries are performed via “search to-
kens" [27] over an encrypted index which represents the relationship between search token (keywords)
and encrypted (cid:27)les. A prominent application of SSE is to enable privacy-preserving keyword search
on the cloud (e.g., Amazon S3), where a data owner can outsource a collection of encrypted (cid:27)les and
perform keyword searches on it without revealing the (cid:27)le and query contents [18]. Preliminary SSE
schemes (e.g.,[26, 9]) only provide search-only functionality on static data (i.e., no dynamism), which
strictly limits their applicability due to the lack of update capacity. Later, several Dynamic Searchable
Symmetric Encryption (DSSE) schemes (e.g., [18, 5]) were proposed that permit the user to add and
delete (cid:27)les after the system is set up. To the best of our knowledge, there is no single DSSE scheme
that outperforms all the other alternatives in terms of all the aforementioned metrics: privacy (e.g.,
information leakage), performance (e.g., search, update delay), storage e(cid:28)ciency and functionality.
Research Gap and Objectives: Despite a number of DSSE schemes have been introduced in the litera-
ture, most of them only provide a theoretical asymptotic analysis1 and in some cases, merely a prototype
implementation. The lack of a rigorous actual experimental performance evaluation on real platforms
poses a signi(cid:27)cant di(cid:28)culty in assessing the application and practicality of proposed DSSE schemes, as
the impacts of security vulnerability, hidden computation costs, multi-round communication delay and
storage blowup might be overlooked. For instance, most e(cid:28)cient DSSE schemes (e.g., [5, 12]) are vul-
nerable to (cid:27)le-injection attacks, which have been showed to be easily conducted even by semi-honest
adversary in practice, especially in the personal email scenario. Although several forward-secure DSSE
schemes with an optimal asymptotic complexity have been proposed, they incur either very high delay
due to public-key operations (e.g., [3]), or signi(cid:27)cant storage blowup at both client and server-side (e.g.,
[27]), and therefore, their ability to meet actual need of real systems in practice is still unclear.
There is a signi(cid:27)cant need for a DSSE scheme that can achieve a high level of security with a well-
quanti(cid:27)ed information leakage, while maintaining a performance and functionality balance between
the search and update operations. More importantly, it is critical that the performance of proposed DSSE
should be experimentally evaluated in a realistic cloud environment with various parameter settings,
rather than merely relying on asymptotic results. The investigation of alternative data structures and
their optimized implementations on commodity hardware seem to be key factors towards achieving
these objectives.
1.1 Our Contributions
In this article, towards (cid:27)lling the gaps between theory and practice in DSSE research community, we
introduce IM-DSSE, a fully-implemented DSSE framework which favors desirable properties for realis-
tic privacy-critical cloud systems including high security against practical attacks and low end-to-end
delay. In this framework, we provide the full-(cid:30)edged implementations of our preliminary DSSE scheme
proposed in [31], as well as extended schemes, which are specially designed to (cid:27)t with various appli-
cation requirements and cloud data storage-as-a-service infrastructures in practice.
1One noticeable outlier is [5], which provides a standalone implementation.
2
Improvements over Preliminary Version: This article is the extended version of [31] which includes
the following improvements: (i) We propose extended DSSE schemes which are more compatible with
the cloud SaaS infrastructure and o(cid:29)er backward-privacy at the cost of bandwidth overhead. (ii) As a
signi(cid:27)cant improvement over the preliminary version, we provide a comprehensive DSSE framework,
where our preliminary DSSE scheme in [31] as well as all of its variants are fully implemented. We fully
deployed our framework on Amazon EC2 cloud and provided a much more comprehensive performance
analysis of each scheme with di(cid:29)erent hardware and network settings. (iii) Finally, we have released
our framework for public use and improvement.
Desirable properties: IM-DSSE o(cid:29)ers ideal features for privacy-critical cloud systems as follows.
• Highly secure against File-Injection Attacks: IM-DSSE o(cid:29)ers forward privacy (see [27] or Section 4 for
de(cid:27)nition) which is an imperative security feature to mitigate the impact of practical (cid:27)le-injection
attacks [3, 32]. Only few DSSE schemes o(cid:29)er this property (i.e., [27, 3]), some of which incur high
client storage with costly update (e.g., [27]), or high delay due to public-key operations (e.g., [3]).
Additionally, IM-DSSE o(cid:29)ers size-obliviousness property, where it hides all size information involved
with the encrypted index and update query including (i) update query size (i.e., number of keywords
in the updated (cid:27)le); (iii) and the number of keyword-(cid:27)le pairs in the database. More importantly, one
of the IM-DSSE variants achieves backward privacy de(cid:27)ned in [27]. To the best of our knowledge,
none of the state-of-the-art DSSE schemes o(cid:29)er all these security properties simultaneously.
• Updates with Improved Features: (i) IM-DSSE allows to directly update keywords of an existing (cid:27)le
without invoking the (cid:27)le delete-then-add operation sequence. The update in IM-DSSE also leaks
minimal information and it is type-oblivious, meaning that it does not leak timing information (i.e.,
all updates take the same amount of time) and whether the operation is add, delete, or update. (ii)
The encrypted index of our schemes does not grow with update operations and, therefore, it does not
require re-encryption due to frequent updates. This is more e(cid:28)cient than some alternatives (e.g., [27])
in which the encrypted index can grow linearly with the number of deletions.
• Fully Parallelizable: IM-DSSE supports parallelization for both update and search operations and,
therefore, it takes full advantages of modern computing architecture to minimize the delay of cryp-
tographic operations. Experiments on Amazon cloud indicates that the search latency of our frame-
work is highly practical and mostly dominated by the network communication between the client
and server (see Section 5).
• Detailed experimental evaluation and open-source framework: We deployed IM-DSSE in a realistic
cloud environment (Amazon EC2) to assess the practicality of our framework. We experimented with
di(cid:29)erent database sizes and investigated the impacts of network condition and storage unit on the
overall performance. We also evaluated the performance of IM-DSSE on a resource-limited mobile
client. We give a comprehensive cost breakdown analysis to highlight the main factors contributing
the overall cost in all these settings. Finally, we released the implementation of our framework to
public to provide opportunities for broad adaptation and testing (see Section 5).
2 IM-DSSE Framework
IM-DSSE framework comprises various DSSE schemes based on the incidence matrix data structure. In
this section, we provide the detailed construction of the main scheme in IM-DSSE framework denoted
3
2.1 Notation and Data Structure
scheme that IM-DSSE also fully supports will be described in the next section. We (cid:27)rst start with
notation, and then present typical data structures being used in IM-DSSE. We give the algorithmic
as IM-DSSE, which is preliminarily presented in [31]. Several extension derived from IM-DSSE
details of IM-DSSE scheme afterwards.
Notation. Operators|| and|| denote the concatenation and the bit length of variable, respectively.
 $←  denotes variable is randomly and uniformly selected from set .(1,…,)
$←  denotes
(1
$← ,…, $←  ).|| denotes the size of. We denote{0,1}∗ as a set of binary strings of any (cid:27)nite
length.ææ andऄअ denote the (cid:30)oor and the ceiling of, respectively. Given a matrix,[,] denotes
the cell indexing at row and column.[∗,] and[,∗] denote accessing column and row of matrix
, respectively.[∗,,…,] denotes accessing columns from to of matrix.[] denotes accessing
the’th component of vector.
We denote an IND-CPA encryption scheme as a tripletç=(,,):← ç.(1), where
 is a security parameter and is a key;← ç.(,) takes as input a secret key, a counter
and a message and returns a ciphertext;← ç.(,) takes as input a key, a counter and
ciphertext, and returns if and were the key and the counter under which was produced. The
function is a keyed Pseudo Random Function (PRF), denoted by←(), which takes as input a
secret key $←{0,1} and a string, and returns a token/key. We denoteࢼ{0,1}||→{0,1} as
a Random Oracle (RO) [1], which takes an input and returns a bit.
IM-DSSE Data Structures. Our encrypted index is an incidence matrix, in which[,].∈{0,1}
stores the (encrypted) relationship between keyword indexing at row and (cid:27)le indexing at column,
and[,].∈{0,1} stores a bit indicating the state of[,].. Particularly,[,]. is set to 1 or 0 if
[,]. is accessed by update or search, respectively. For simplicity, we will often write[,] to denote
[,]., and be explicit about the state bit as[,]..
The encrypted index is augmented by two static hash tables and that associate a keyword
and (cid:27)le to a unique row and a column, respectively. Speci(cid:27)cally, is a (cid:27)le static hash table whose key-
value pair is(,,), where←2() for (cid:27)le with identi(cid:27)er, column index∈{1,…,}
equivalent to the index of in and is a counter value. We denote access operations by←
() and←[].. is a keyword static hash table whose key-value pair is{,,},
where token←2() for keyword, row index∈{1,…,} equivalent to the index of in
 and is a counter value. We denote access operations by←() and←[].. All
 and , that o(cid:29)ers (on average)(1) look-up time.
2.2 IM-DSSE Algorithms
ࢫ Setup: Given a (cid:27)le collectionè={1,…,} (with unique IDs1,…,) to be outsourced, the client
extract all unique keywords è, and constructs a matrix, which represents the relationship between
keywords and outsourced (cid:27)les. Afterwards, the client invokes IM-DSSE. algorithm to generate
cryptographic keys which are used afterwards to encrypted andè (IM-DSSE. algorithm) resulting
counter values are incremental and initially set to 1. So, the client state information is in the form of
We present the detailed algorithmic construction of the main scheme in IM-DSSE framework in Scheme
1, which consists of nine algorithms with the following highlights.
4
(cid:27)les
in encrypted index and encrypted (cid:27)les={1,…,}, respectively. Finally, the client sends and
 to the cloud server along with the (cid:27)le hash table .
ࢫ Search: To search keyword, the client generates a token (IM-DSSE. algorithm)
containing a row index and row key(s). Upon receiving, the server decrypts row and determines
column indexes where[,]=1, and returns the corresponding-labeled ciphertexts to the client.
Finally, the client invokes IM-DSSE. algorithm on each ciphertext to obtain the search result.
ࢫ Update: To add (or delete) a (cid:27)le, the client generates a token containing column and the encrypted
(cid:27)le (if the (cid:27)le is added) via IM-DSSE. (IM-DSSE. resp.) algorithm. The server
invokes IM-DSSE. ((IM-DSSE. resp.) ) algorithm to update column of, and adds (deletes
Scheme 1 IM-DSSE Scheme
resp.) the (cid:27)le in.
í← IM-DSSE.(1): Given security parameter, generate secret keyí
1:1← ç.(1) and(2,3) $←{0,1}
2: returní, whereí←{1,2,3}
← IM-DSSE.í(): Decrypt encrypted (cid:27)le with key
1:← ç.1(,||) where←[].,(,)←
2: return
(,)← IM-DSSE.í(,è): Given index and plaintext (cid:27)les è, generate encrypted index and encrypted
1:[].←1,[].←1, for0≤≤,0≤≤
2:[∗,∗].←0 and[∗,∗]←0
3: Extract(1,…,) fromè={1,…,}
4: for=1,…, do
←2(),←()
for=1,…, do
if appears in then
←2() and←()
[,]←1
10: for=1,…, do
←3(||), where←[].
for=1,…, do
[,]←[,]⊕(||||), where←[].
14: for=1,…, do
←(,), where← ç.1(,||)
16: return(,), where←(,) and←{1,…,}
← IM-DSSE.(í,): Generate search token from keyword and keyí
1:←2(),←()
2:←[].,←3(||)
3: if=1 then
←(,)
←3(||−1) and←(,,)
7:[].←+1
8: return
4:
5: else
6: