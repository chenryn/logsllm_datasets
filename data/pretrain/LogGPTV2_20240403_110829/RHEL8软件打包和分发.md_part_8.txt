::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm139867687525312}
**例 3.8. 在单元的 SPEC 文件中运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/SPECS/cello.spec
/home/admiller/rpmbuild/SPECS/cello.spec: W: invalid-url Source0: https://www.example.com/cello/releases/cello-1.0.tar.gz HTTP Error 404: Not Found
0 packages and 1 specfiles checked; 0 errors, 1 warnings.
```
:::
:::
对于 `cello.spec`{.literal}，只有一个警告，这表示 `Source0`{.literal}
指令中列出的 URL 无法访问。这是正常的，因为指定的
`example.com`{.literal} URL 不存在。假设这个 URL
以后可以正常工作，您可以忽略这个警告。
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm139867795500544}
**例 3.9. 在 SRPM 中为单元运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/SRPMS/cello-1.0-1.el8.src.rpm
cello.src: W: invalid-url URL: https://www.example.com/cello HTTP Error 404: Not Found
cello.src: W: invalid-url Source0: https://www.example.com/cello/releases/cello-1.0.tar.gz HTTP Error 404: Not Found
1 packages and 0 specfiles checked; 0 errors, 2 warnings.
```
:::
:::
对于 `cello`{.literal} SRPM，有一个新的警告，这表示 `URL`{.literal}
指令中指定的 URL 无法访问。假设链接将来可以正常工作，您可以忽略此警告。
:::
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#checking-cello-binary-rpm}检查单元二进制 RPM {.title}
:::
在检查二进制 RPM 时，`rpmlint`{.literal} 会检查以下项目：
::: itemizedlist
-   Documentation
-   man page
-   一致使用文件系统层次结构标准
:::
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm139867781645072}
**例 3.10. 在单元的二进制 RPM 中运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/RPMS/x86_64/cello-1.0-1.el8.x86_64.rpm
cello.x86_64: W: invalid-url URL: https://www.example.com/cello HTTP Error 404: Not Found
cello.x86_64: W: no-documentation
cello.x86_64: W: no-manual-page-for-binary cello
1 packages and 0 specfiles checked; 0 errors, 3 warnings.
```
:::
:::
`no-documentation`{.literal} 和 `no-manual-page-for-binary`{.literal}
警告称其 RPM 没有文档或 man page，因为您不提供任何文档或 man
page。除了以上警告外，RPM 还传递了 `rpmlint`{.literal} 检查。
:::
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#logging-rpm-activity_packaging-software}将 RPM 活动记录到 syslog {.title}
:::
任何 RPM 活动或事务都可以通过系统日志协议(syslog)记录。
::: itemizedlist
**先决条件**
-   要启用在 syslog 中记录 RPM 事务，请确保在系统中安装了
    `syslog`{.literal} 插件。
    ``` literallayout
    # yum install rpm-plugin-syslog
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    系统日志消息的默认位置是 `/var/log/messages`{.literal}
    文件。但是，您可以将 syslog 配置为使用其他位置来存储消息。
    :::
:::
要查看 RPM 活动的更新，请按照以下步骤操作。
::: orderedlist
**流程**
1.  打开您配置为存储 syslog 信息的文件，或使用默认 syslog 配置，打开
    `/var/log/messages`{.literal} 文件。
2.  搜索包括 `[RPM]`{.literal} 字符串的新行。
:::
assembly_archiving-rpms.adoc :parent-context-of-archiving-rpms:
packaging-software
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#archiving-rpms_packaging-software}提取 RPM 内容 {.title}
:::
例如，在某些情况下，如果 RPM
所需的包损坏，则需要提取包的内容。在这种情况下，如果 RPM
安装仍可以正常工作，您可以使用 `rpm2archive`{.literal} [
**工具将.rpm**]{.strong} 文件转换为 tar 归档来使用软件包的内容。
这部分论述了如何将 rpm 有效负载转换为 tar 归档。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果 RPM 安装受到严重损坏，您可以使用 `rpm2cpio`{.literal} 工具将 RPM
软件包文件转换为 cpio 归档。
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#archiving-rpms_archiving-rpms}将 RPM 转换为 tar 归档 {.title}
:::
要将 RPM 软件包转换为 tar 链，您可以使用 `rpm2archive`{.literal} 工具。
::: itemizedlist
**流程**
-   运行以下命令：
    ``` literallayout
    $ rpm2archive file.rpm
    ```
    生成的文件具有 `.tgz`{.literal} 后缀。例如，要归档 `bash`{.literal}
    软件包：
    ``` literallayout
    $ rpm2archive bash-4.4.19-6.el8.x86_64.rpm
    $ bash-4.4.19-6.el8.x86_64.rpm.tgz
    bash-4.4.19-6.el8.x86_64.rpm.tgz
    ```
:::
:::
:::
:::
[]{#advanced-topics.html}
::: chapter
::: titlepage
# []{#advanced-topics.html#advanced-topics}第 4 章 高级主题 {.title}
:::
本节涵盖介绍教程之外但对真实 RPM 打包很有用的主题。
::: section
::: titlepage
# []{#advanced-topics.html#signing-packages_advanced-topics}签署软件包 {.title}
:::
软件包已签名以确保没有第三方可以更改其内容。用户可以在下载软件包时使用
HTTPS 协议来添加额外的安全层。
可通过三种方式签署软件包：
::: itemizedlist
-   ["将签名添加到现有软件包"一节](#advanced-topics.html#adding-a-signature_signing-packages "将签名添加到现有软件包"){.xref}.
-   ["替换现有软件包的签名"一节](#advanced-topics.html#replacing-the-signature_signing-packages "替换现有软件包的签名"){.xref}.
-   ["在构建时签署软件包"一节](#advanced-topics.html#signing-a-package-at-build-time_signing-packages "在构建时签署软件包"){.xref}.
:::
为了能为软件包签名，您需要创建一个 GNU Privacy Guard(GPG)密钥，如 ["创建
GPG
密钥"一节](#advanced-topics.html#creating-a-gpg-key_signing-packages "创建 GPG 密钥"){.xref}
所述。
::: section
::: titlepage
## []{#advanced-topics.html#creating-a-gpg-key_signing-packages}创建 GPG 密钥 {.title}
:::
::: orderedlist
**流程**
1.  生成 GNU Privacy Guard(GPG)密钥对：
    ``` literallayout
    # gpg --gen-key
    ```
2.  确认并查看生成的密钥：
    ``` literallayout
    # gpg --list-keys
    ```
3.  导出公钥：
    ``` literallayout
    # gpg --export -a '' > RPM-GPG-KEY-pmanager
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    包含您为密钥选择的真实名称而不是 \。
    :::
4.  将导出的公钥导入到 RPM 数据库：
    ``` literallayout
    # rpm --import RPM-GPG-KEY-pmanager
    ```
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#adding-a-signature_signing-packages}将签名添加到现有软件包 {.title}
:::
这部分论述了在构建软件包时没有签名的最常见情况。签名添加到软件包的发布前。
要在软件包中添加签名，使用 `rpm-sign`{.literal} 软件包提供的
`--addsign`{.literal} 选项。
有多个签名可以记录软件包从软件包构建器到最终用户的所有权路径。
::: itemizedlist
**流程**
-   在软件包中添加签名：
    ``` literallayout
    $ rpm --addsign blather-7.9-1.x86_64.rpm
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您应当输入密码来解锁签名的 secret 密钥。
    :::
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#checking-the-signatures-of-a-package-with-multiple-signatures_signing-packages}使用多个签名检查软件包的签名 {.title}
:::
::: itemizedlist
**流程**
-   要检查带有多个签名的软件包的签名，请运行以下命令：
    ``` literallayout
    $ rpm --checksig blather-7.9-1.x86_64.rpm
    blather-7.9-1.x86_64.rpm: size pgp pgp md5 OK
    ```
    `rpm --checksig`{.literal} 命令输出中的两个 `pgp`{.literal}
    字符串显示该软件包已签名两次。
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#a-practical-example-of-adding-a-signature_signing-packages}将签名添加到现有软件包的实际示例 {.title}
:::
本节介绍在已有软件包中添加签名可能有用的示例情形。
公司分部创建一个包，并根据部门的关键对其进行签名。然后，公司的总部检查软件包的签名，并将公司签名添加到包中，表明签署后的软件包是真实的。
通过两种签名，该软件包帮助零售商。零售商检查签名，如果他们匹配，还会增加他们的签名。
现在，该软件包已经为想要部署软件包的公司找到了道路。检查包中的每个签名后，他们知道这是一个真实副本。根据部署公司的内部控制，他们可以选择添加自己的签名，以告知其员工已收到公司批准。
:::
::: section
::: titlepage
## []{#advanced-topics.html#replacing-the-signature_signing-packages}替换现有软件包的签名 {.title}
:::
这个步骤描述了如何更改公钥而无需重建每个软件包。
::: itemizedlist
**流程**
-   要更改公钥，请运行以下命令：
    ``` literallayout
    $ rpm --resign blather-7.9-1.x86_64.rpm
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您应当输入密码来解锁签名的 secret 密钥。
    :::
:::
`--resign`{.literal} 选项还允许您更改多个软件包的公钥，如下流程所示。
::: itemizedlist
**流程**
-   要更改多个软件包的公钥，请执行：
    ``` literallayout
    $ rpm --resign b*.rpm
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}