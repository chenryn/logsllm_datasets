    len_flag = 120
    cnt = 14
    cnt = 21
    cnt = 28
    cnt = 35
    ...
    cnt = 119
    cnt = 6
    cnt = 13
    '''
## Reverse
###  stream
  * 打开64位elf，其中都是rust的函数，直接找到rust的main函数分析，然后发现调用了open打开了一个叫flag的文件，并读取了字符串加密输出到output
  *   * 然后接下来进入到了一个循环加密，看起来就是流加密，不过调用了rust的随机数库chacha
  *   *   * 大体逻辑是每次加密第7*i MOD len的字节，然后将原文字节最为随机数种子放入随机数生成器初始化，然后将输出来异或该处字节，最后遍历所有字节
  * 可以用C++伪代码表示出来
  *   * 所以由于是从前往后加密字节的，所以我们可以使用popen枚举原文，依次枚举7 _i MOD 46位字节，然后读取output对比测试的第7_ i MOD 46位字节是否和output_flag一样，如果一样则代表该处字符是对的，可以继续向下枚举
  * 由于该题目加密会出现多对一的情况，所以使用搜索来枚举 
        import os
    import time
    import subprocess
    def excuteCommand(com):
      ex = subprocess.Popen(com, stdout=subprocess.PIPE, shell=True)
      out, err  = ex.communicate()
      status = ex.wait()
    def genFile(flag):
      f=open('flag','wb')
      f.write(flag)
      f.close()
    def checkByte(index):
      f1=open('output_flag','rb')
      buf1=f1.read()
      f1.close()
      f2=open('output','rb')
      buf2=f2.read()
      f2.close()
      if len(buf2)!=46:
          return False
      if buf1[index]==buf2[index]:
          return True
      return False
    def toStr(arr):
      bb=''
      for i in range(len(arr)):
          bb+=chr(arr[i])
      return bb
    index=[4,11,18,25,32,39,0,7,14,21,28,35,42,3,10,17,24,31,38,45,6,13,20,27,34,41,2,9,16,23,30,37,44,5,12,19,26,33,40,1,8,15,22,29,36,43]
    result=[]
    for i in range(46):
      result.append(0x41)
    def dfs(i):
      if i>=46:
          print(toStr(result))
          pass
      for x in range(0x20,0x7F+1,1):
          result[index[i]]=x
          sflag=toStr(result)
          genFile(sflag)
          excuteCommand("./a")
          if checkByte(index[i])==True:
              print(sflag)
              dfs(i+1)
          else:
              continue
    dfs(0)
  * 等一会就搜出flag了，其实有多解
###  1rep
  * 下载下来发现几百兆，然后打开可以看出属于perl语言，然而我以为是个脚本语言，可以找到脚本，并不能，所以只能跟进Perl_Run函数看
  * 然后发现到达了Perl_runops_standard，发现里面有一种巨型的数据结构，类似于树，然后循环在这种结构的节点之间跳来跳去，然后还有个函数指针
  *   * 不难猜到，这应该是一种类似树形的opcode，查阅perl文档，知道该文件没有源文件了，使用perlcc编译成c然后再成elf
  * 所以我们可以考虑使用libperl导出的函数实现一些调试，比如Perl_dump_all，能够dump出opcode，然后再看，还有用Perl_runops_debug输出调试信息
  *   *   * 其中有主模块，和有巨多的子模块，大概看了一下，主函数就是对比了一下flag格式(substr)，然后回根据输入不同执行不同的entersub进入不同的子模块
  * 观察子模块的opcode，没有涉及运算，基本也是16个entersub，而且会判断flag内部是否是16位0-9，a-f,不难想到会根据每一位的字符选择进入不同的节点
  * 然后到下一位字符，再判断前往哪个模块节点，这里可以根据runops_debug输出的结果看出，每个模块都有神奇的名字，所以抽象一下发现就是个图论题目
  * 不过这个图巨大无比，分支很多，但节点其实很少，我们必然不能每一位来枚举，16^16无法接受，所以我们选择广度优先搜索算法
  * 保存到达该模块所需要的字符串路径，然后扩展没有访问过的节点，顺便松弛一下，反正到达了输出的Correct的模块肯定就是flag，不然又会多解
  * 
如何判断访问了哪些模块呢，就用Perl_runops_debug输出调试信息，然后就可以开搜
    from pwn import *
    from itertools import permutations
    context.log_level = “CRITICAL”
    klist = “0123456789abcdef”
    klist = permutations(klist)
    for i in klist:
    input = “”.join(i)
    io = process(“./bin.bak”)
    io.sendline(“*ctf{“+input+”}”)
    result = io.recvall()
    #print "*ctf{"+input_+"}"
    if result != "":
        print "*ctf{"+input_+"}"
        break
    from pwn import *
    context.log_level = “CRITICAL”
    input_ = “0”*16
    content = open(“sub_str.txt”).read().split(“\n”)
    fin_content = {}
    j = 0
    for i in content:
    if len(i) == 6:
    fin_content[i] = j
    j += 1
    def GetResult(input,locate):
    locate-=1
    io = process(“./bin.bak”)
    io.sendline(“*ctf{“+””.join(input)+”}”)
    result = io.recvall().split()
    j = 0
    for i in result:
    if “(main::” in i:
    if len(i) == len(“(main::ofaGvn)”):
                #print "%d: %s: %d  %s" % (j,input_[j],fin_content[i[7:13]],i[7:13])
                if j == locate:
                    return fin_content[i[7:13]]
                j += 1
    from queue import Queue
    used=[]
    road=[]
    for i in range(len(fin_content)):
    used.append(0)
    for i in range(len(fin_content)):
    road.append(“”)
    q=Queue(maxsize=0)
    edge=[]
    lists=”0123456789abcdef”
    for c in lists:
    val=GetResult(c+’a’15,1)
    road[val]=c
    q.put(val)
    print(val)
    while not q.empty():
    node=q.get()
    if len(road[node])判断flag长度->流密码加密前半段->tea(QQtea)加密后半段  
通过下断点到0x10468，查看a5寄存器确定flag长度为89
之后看到有数据读取猜是数据解密，点进函数多看一看发现特征”expand 32-byte k”
到网上查是一种流密码(chacha20或salsa)，就直接不管算法看寄存器与栈区，把密钥流dump下来做异或，得出第一段flag
第二段flag就是tea算法加密
密钥：0x1368a0bb, 0x190ace1e, 0x35d8a357, 0x26bf2c61  
密文：0xc45087f9, 0x703f2b2, 0x6974f43c, 0xedb4bb59, 0xff0b02a, 0x8520f2,
0xfdcd23dd, 0x35024875, 0xf1d7b6d3, 0x74f21be1, 0xcb2dbf12, 0xa4b453f6  
解密脚本:
    def encrypt(v, k):
        v0 = v[0]
        v1 = v[1]
        x = 0
        delta = 0x9E3779B9
        k0 = k[0]
        k1 = k[1]
        k2 = k[2]
        k3 = k[3]
        for i in range(16):
            x += delta
            x = x & 0xFFFFFFFF
            v0 += ((v1 > 5) + k1)
            v0 = v0 & 0xFFFFFFFF
            v1 += ((v0 > 5) + k3)
            v1 = v1 & 0xFFFFFFFF
        v[0] = v0
        v[1] = v1
        return v
    def decrypt(v, k):
        v0 = v[0]
        v1 = v[1]
        x = 0xE3779B90
        delta = 0x9E3779B9
        k0 = k[0]
        k1 = k[1]
        k2 = k[2]
        k3 = k[3]
        for i in range(16):
            v1 -= ((v0 > 5) + k3)
            v1 = v1 & 0xFFFFFFFF
            v0 -= ((v1 > 5) + k1)
            v0 = v0 & 0xFFFFFFFF
            x -= delta
            x = x & 0xFFFFFFFF
        v[0] = v0
        v[1] = v1
        return v
    if __name__ == '__main__':
        plain = [0xcb2dbf12, 0xa4b453f6]
        key = [0x1368a0bb, 0x190ace1e, 0x35d8a357, 0x26bf2c61]
        decrypted = decrypt(plain, key)
        print [hex(i) for i in decrypted]