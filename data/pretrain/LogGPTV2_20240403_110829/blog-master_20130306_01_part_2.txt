                        if (stat(filename, &fst)  (int64) (MaxAllocSize - VARHDRSZ))
                ereport(ERROR,
                                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                                 errmsg("requested length too large")));
        if ((file = AllocateFile(filename, PG_BINARY_R)) == NULL)
        {
                if (missing_ok && errno == ENOENT)
                        return NULL;
                else
                        ereport(ERROR,
                                        (errcode_for_file_access(),
                                         errmsg("could not open file \"%s\" for reading: %m",
                                                        filename)));
        }
        if (fseeko(file, (off_t) seek_offset,
                           (seek_offset >= 0) ? SEEK_SET : SEEK_END) != 0)
                ereport(ERROR,
                                (errcode_for_file_access(),
                                 errmsg("could not seek in file \"%s\": %m", filename)));
        buf = (bytea *) palloc((Size) bytes_to_read + VARHDRSZ);
        nbytes = fread(VARDATA(buf), 1, (size_t) bytes_to_read, file);
        if (ferror(file))
                ereport(ERROR,
                                (errcode_for_file_access(),
                                 errmsg("could not read file \"%s\": %m", filename)));
        SET_VARSIZE(buf, nbytes + VARHDRSZ);
        FreeFile(file);
        return buf;
}
/*
 * Similar to read_binary_file, but we verify that the contents are valid
 * in the database encoding.
 */
static text *
read_text_file(const char *filename, int64 seek_offset, int64 bytes_to_read,
                           bool missing_ok)
{
        bytea      *buf;
        buf = read_binary_file(filename, seek_offset, bytes_to_read, missing_ok);
        if (buf != NULL)
        {
                /* Make sure the input is valid */
                pg_verifymbstr(VARDATA(buf), VARSIZE(buf) - VARHDRSZ, false);
                /* OK, we can cast it to text safely */
                return (text *) buf;
        }
        else
                return NULL;
}
/*
 * Read a section of a file, returning it as text
 */
Datum
cu_pg_read_file(PG_FUNCTION_ARGS)
{
        text       *filename_t = PG_GETARG_TEXT_PP(0);
        int64           seek_offset = 0;
        int64           bytes_to_read = -1;
        bool            missing_ok = false;
        char       *filename;
        text       *result;
        if (!superuser())
                ereport(ERROR,
                                (errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),
                                 (errmsg("must be superuser to read files"))));
        /* handle optional arguments */
        if (PG_NARGS() >= 3)
        {
                seek_offset = PG_GETARG_INT64(1);
                bytes_to_read = PG_GETARG_INT64(2);
                if (bytes_to_read = 4)
                missing_ok = PG_GETARG_BOOL(3);
        filename = cu_convert_and_check_filename(filename_t);
        result = read_text_file(filename, seek_offset, bytes_to_read, missing_ok);
        if (result)
                PG_RETURN_TEXT_P(result);
        else
                PG_RETURN_NULL();
}
/*
 * Read a section of a file, returning it as bytea
 */
Datum
cu_pg_read_binary_file(PG_FUNCTION_ARGS)
{
        text       *filename_t = PG_GETARG_TEXT_PP(0);
        int64           seek_offset = 0;
        int64           bytes_to_read = -1;
        bool            missing_ok = false;
        char       *filename;
        bytea      *result;
        if (!superuser())
                ereport(ERROR,
                                (errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),
                                 (errmsg("must be superuser to read files"))));
        /* handle optional arguments */
        if (PG_NARGS() >= 3)
        {
                seek_offset = PG_GETARG_INT64(1);
                bytes_to_read = PG_GETARG_INT64(2);
                if (bytes_to_read = 4)
                missing_ok = PG_GETARG_BOOL(3);
        filename = cu_convert_and_check_filename(filename_t);
        result = read_binary_file(filename, seek_offset,
                                                          bytes_to_read, missing_ok);
        if (result)
                PG_RETURN_BYTEA_P(result);
        else
                PG_RETURN_NULL();
}
gcc -O3 -Wall -Wextra -Werror -I/usr/pgsql-10/include/server -g -fPIC -c ./readfile.c -o readfile.o
gcc -O3 -Wall -Wextra -Werror -I/usr/pgsql-10/include/server -g -shared readfile.o -o libreadfile.so
cp libreadfile.so /usr/pgsql-10/lib/
postgres=# create or replace function cu_pg_read_binary_file(text) returns bytea as '$libdir/libreadfile.so', 'cu_pg_read_binary_file' language C STRICT;
CREATE FUNCTION
postgres=# create or replace function cu_pg_read_file(text) returns text as '$libdir/libreadfile.so', 'cu_pg_read_file' language C STRICT;
CREATE FUNCTION
postgres=# select cu_pg_read_binary_file('/var/lib/pgsql/test1.sql');
                                                                 cu_pg_read_binary_file                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------
 \x5c7365742069642072616e646f6d28312c313030303030303030290a75706461746520746573743120736574206372745f74696d653d6e6f7728292077686572652069643d3a69643b0a
(1 row)
postgres=# select cu_pg_read_file('/var/lib/pgsql/test1.sql');
                cu_pg_read_file                
-----------------------------------------------
 \set id random(1,100000000)                  +
 update test1 set crt_time=now() where id=:id;+
(1 row)
```
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")