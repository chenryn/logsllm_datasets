User: 请回答以下安全问题我如何以及何时使用HMAC？我在维基百科上读HMAC，有几点我很困惑。
我在哪里使用HMAC？
为什么是散列的关键部分？
即使有人成功地使用了“长度扩展攻击”，这对攻击者有什么用处？

Assistant: 通过MAC算法从消息和密钥产生消息认证码（MAC）。MAC的一个重要特性是，在不知道密钥的情况下，不可能产生消息的MAC和密钥。由不同密钥生成的相同消息的MAC看起来不相关。即使知道其他消息的MAC也无助于计算新消息的MAC。
HMAC是基于散列函数的MAC。其基本思想是将密钥和消息连接起来，并将它们散列在一起。由于给定一个加密哈希，不可能找出它的哈希，因此知道哈希（甚至是这样的哈希的集合）并不能找到密钥。基本的想法没有完全实现，部分原因是长度扩展攻击，所以实际的HMAC构造有点复杂。有关更多信息，请浏览Cryptography Stack Exchange上的hmac标签，特别是为什么H（k||x）不是一个安全的MAC结构？，H（k||length||x）是安全的MAC结构吗？以及HMAC与MAC功能。还有其他方式来定义MAC，例如基于诸如CMAC之类的块密码的MAC算法。
MAC对消息进行身份验证。如果Alice看到消息和MAC并知道相关的密钥，她可以通过自己进行MAC计算来验证MAC是由知道密钥的主体产生的。因此，如果一条消息附带了正确的MAC，则意味着该消息在某个时刻被密钥持有者看到了。MAC是一种基于密钥的签名，它提供了与基于公钥密码学的签名方案类似的保证，例如基于RSA的方案，其中签名必须由拥有私钥的主体产生。
例如，假设Alice将她的密钥保密，并且只使用它来计算她存储在云服务器或其他不可靠存储介质上的消息的MAC。如果她后来读回一条消息，并看到它附带了一个正确的MAC，她就知道这是她过去存储的消息之一。
HMAC本身不提供消息完整性。它可以是提供完整性的协议中的组件之一。例如，假设Alice将多个文件的连续版本及其MAC存储在不可靠的介质上。（我们再次假设只有Alice知道密钥。）如果她用正确的MAC读回一个文件，她就知道她读回的是她存储的某个文件的以前版本。控制存储介质的攻击者仍然可以返回旧版本的文件或其他文件。在这种情况下提供存储完整性的一种可能方式是将文件名和版本号作为计算MAC的数据的一部分；Alice需要记住每个文件的最新版本号，以便验证她没有得到过时的数据。确保完整性的另一种方法是让Alice记住每个文件的MAC（但在这种特定情况下，散列也可以）。
“不可能”，因为需要比实际可能更多的计算能力。