title:Towards Scalable Threshold Cryptosystems
author:Alin Tomescu and
Robert Chen and
Yiming Zheng and
Ittai Abraham and
Benny Pinkas and
Guy Golan-Gueta and
Srinivas Devadas
Towards Scalable Threshold Cryptosystems
∗Alin Tomescu, †Robert Chen, †Yiming Zheng,
‡Ittai Abraham, ‡§Benny Pinkas, ‡Guy Golan Gueta, ∗Srinivas Devadas
∗MIT CSAIL, †MIT PRIMES & Lexington High School, ‡VMware Research, §Bar Ilan University
Abstract—The resurging interest in Byzantine fault tolerant
systems will demand more scalable threshold cryptosystems.
Unfortunately, current systems scale poorly, requiring time
quadratic in the number of participants. In this paper, we present
techniques that help scale threshold signature schemes (TSS),
veriﬁable secret sharing (VSS) and distributed key generation
(DKG) protocols to hundreds of thousands of participants and
beyond. First, we use efﬁcient algorithms for evaluating poly-
nomials at multiple points to speed up computing Lagrange
coefﬁcients when aggregating threshold signatures. As a result, we
can aggregate a 130,000 out of 260,000 BLS threshold signature
in just 6 seconds (down from 30 minutes). Second, we show
how “authenticating” such multipoint evaluations can speed up
proving polynomial evaluations, a key step in communication-
efﬁcient VSS and DKG protocols. As a result, we reduce the
asymptotic (and concrete) computational complexity of VSS and
DKG protocols from quadratic time to quasilinear time, at
a small
increase in communication complexity. For example,
using our DKG protocol, we can securely generate a key for
the BLS scheme above in 2.3 hours (down from 8 days). Our
techniques improve performance for thresholds as small as 255
and generalize to any Lagrange-based threshold scheme, not
just threshold signatures. Our work has certain limitations: we
require a trusted setup, we focus on synchronous VSS and
DKG protocols and we do not address the worst-case complaint
overhead in DKGs. Nonetheless, we hope it will spark new
interest in designing large-scale distributed systems.
Index Terms—polynomial commitments, polynomial multi-
point evaluation, distributed key generation, veriﬁable secret
sharing, threshold signatures, BLS
I. INTRODUCTION
interest
Due to the popularity of cryptocurrencies,
in
Byzantine fault
tolerant (BFT) systems has been steadily
increasing [1]–[9]. At
the core of BFT systems often lie
simpler threshold cryptosystems such as threshold signature
schemes (TSS) [10], [11], veriﬁable secret sharing (VSS)
protocols [12]–[14] and distributed key generation (DKG)
protocols [15]–[17]. For example, TSS and DKG protocols are
used to scale consensus protocols [3], [5], [18]. Furthermore,
DKG protocols [16] are used to securely generate keys for
TSS [19], to generate nonces for interactive TSS [20], [21],
and to build proactively-secure threshold cryptosystems [22],
[23]. Finally, VSS is used to build multi-party computation
(MPC) protocols [24], random beacons [6], [9], [25] and is
the key component of DKG protocols.
Despite their usefulness, TSS, VSS and DKG protocols
do not scale well in important settings. For example, BFT
systems often operate in the honest majority setting, with
n total players where t > n/2 players must be honest. In
this setting, t-out-of-n threshold cryptosystems, such as TSS,
VSS and DKG, require time quadratic in n [10], [12], [14],
[26]. This is because of two reasons. First, reconstruction of
secrets, a key step in any threshold cryptosystem, is typically
implemented naively using Θ(t2) time polynomial interpo-
lation, even though faster algorithms exist [27]. This makes
aggregating threshold signatures and reconstructing VSS or
DKG secrets slow for large t. Second, either the dealing round,
the veriﬁcation round or the reconstruction phase in VSS
and DKG protocols require Θ(nt) time. Fundamentally, this
is because current polynomial commitment schemes require
Θ(nt) time to either compute or verify all proofs [12], [14],
[26]. In this paper, we address both of these problems.
Contributions. Our ﬁrst contribution is a BLS TSS [10] with
Θ(t log2 t) aggregation time, Θ(1) signing and veriﬁcation
times and Θ(1) signature size (see §III-A). In contrast, pre-
vious schemes had Θ(t2) aggregation time (see §I-A1). We
implement our fast BLS TSS in C++ and show it outperforms
the naive BLS TSS as early as n ≥ 511 and scales to n as
large as 2 million (see §IV-A). At that scale, we can aggregate
a signature 3000× faster in 46 seconds compared to 1.5 days
if done naively. Our fast BLS TSS leverages a Θ(t log2 t) time
fast Lagrange interpolation algorithm [27], which outperforms
the Θ(t2) time naive Lagrange algorithm.
Our second contribution is a space-time trade-off
for
computing evaluation proofs in KZG polynomial commit-
ments [14]. KZG commitments are quite powerful in that
their size and the time to verify an evaluation proof are both
constant and do not depend on the degree of the committed
polynomial. We show how to compute n evaluation proofs
on a degree t polynomial in Θ(n log t) time. Each proof is
of size (cid:98)log t(cid:99) − 1 group elements. Previously, each proof
was just one group element but computing all proofs required
Θ(nt) time. Our key technique is to authenticate a polynomial
multipoint evaluation at the ﬁrst n roots of unity (see §II-4),
obtaining an authenticated multipoint evaluation tree (AMT).
Importantly, similar to KZG proofs, our AMT proofs remain
homomorphic (see §III-D1), which is useful when we apply
them to distributed key generation (DKG) protocols.
Our third contribution is AMT VSS, a scalable VSS with a
Θ(n log t) time sharing phase, an O(t log2 t + n log t) time
reconstruction phase, Θ(1)-sized broadcast (during dealing
round) and Θ(n log t) overall communication. AMT VSS
improves over previous VSS protocols which, in the worst
case, incur Θ(nt) computation. However, this improvement
comes at the cost of slightly higher veriﬁcation times and
communication (see Table I). Nonetheless, in §IV, we show
AMT VSS outperforms eVSS [14], the most communication-
efﬁcient VSS, as early as n = 63. Importantly, AMT VSS
is highly scalable. For example, for n ≈ 217, we reduce the
best-case end-to-end time of eVSS from 2.2 days to 8 minutes.
Our fourth contribution is AMT DKG, a DKG with a
Θ(n log t) time sharing phase (except for its quadratic time
complaint round), an O(t log2 t + n log t) time reconstruc-
tion phase, a Θ(1)-sized broadcast (during dealing round)
and Θ(n log t) per-player dealing communication. AMT DKG
improves over previous DKGs which, in the worst case, incur
Ω(nt) computation. Once again, this improvement comes at
the cost of slightly higher veriﬁcation times and communica-
tion (see Table I). Nonetheless, in §IV, we show AMT DKG
outperforms eJF-DKG [17], the most communication-efﬁcient
DKG, as early as n = 63. For n ≈ 217, we reduce the best-
case end-to-end time of eJF-DKG from 2.4 days to 4 minutes.
Our last contribution is an open-source implementation:
https://github.com/alinush/libpolycrypto
Limitations. Our work only addresses TSS, VSS and DKG
protocols secure against static adversaries. However, adaptive
security can be obtained, albeit with some overheads [26],
[28]–[31]. We only target synchronous VSS and DKG pro-
tocols, which make strong assumptions about the delivery of
messages. However, recent work [32] shows how to instantiate
such protocols using the Ethereum blockchain [2]. Our VSS
and DKG protocols require a trusted setup (see §V-1). Our
evaluation only measures the computation in VSS and DKG
protocols and does not measure network delays that would
arise in a full implementation on a real network. Our tech-
niques slightly increase the communication overhead of VSS
and DKG protocols from Θ(n) to Θ(n log t). However, when
accounting for the time savings,
the extra communication
is worth it. Still, we acknowledge communication is more
expensive than computation in some settings. Finally, we do
not address the worst-case quadratic overhead of complaints
in DKG protocols. We leave scaling this to future work.
A. Related Work
1) Threshold signature schemes (TSS): Threshold signa-
tures and threshold encryption were ﬁrst conceptualized by
Desmedt [33]. Since then, many threshold signatures based
on Shamir secret sharing (see §II-C) have been proposed
[?], [10], [11], [20], [21], [34]–[37]. To the best of our
knowledge, none of these schemes addressed the Θ(t2) time
required for polynomial interpolation. Furthermore, all current
BLS TSS [10] implementations seem to use this quadratic
algorithm [3], [38]–[40] and thus do not scale to large t. In
contrast, our work uses Θ(t log2 t) fast Lagrange interpolation
and scales to t = 220 (see §III-A).
An alternative to a TSS is a multi-signature scheme (MSS).
Unlike a TSS, an MSS does not have a unique, constant-
sized public key (PK) against which all ﬁnal signatures can be
veriﬁed. Instead, the PK is dynamically computed given the
contributing signers’ IDs and their public keys. This means
that a t-out-of-n MSS must include the t signer IDs as part of
the signature, which makes it Ω(t)-sized. Furthermore, MSS
veriﬁers must have all signers’ PKs, which are of Ω(n) size. To
ﬁx this, the PKs can be Merkle-hashed but this now requires
including the PKs and their Merkle proofs as part of the
MSS [41]. On the other hand, an MSS is much faster to
aggregate than a TSS. Still, due to its Ω(t) size, an MSS does
not always scale.
2) Veriﬁable secret sharing (VSS): VSS protocols were
introduced by Chor et al. [13]. Feldman proposed the ﬁrst
efﬁcient, non-interactive VSS with computational hiding and
information-theoretic binding [26]. Pedersen introduced its
counterpart with information-theoretic hiding and compu-
tational binding [12]. Both schemes require a Θ(t)-sized
broadcast during dealing. Kate et al.’s eVSS reduced this
to Θ(1) using constant-sized polynomial commitments [14].
eVSS also reduced the veriﬁcation round time from Θ(t)
to Θ(1). However, eVSS’s Θ(nt) dealing time scales poorly
when t ≈ n. Our work improves eVSS to Θ(n log t) dealing
time at the cost of Θ(log t) veriﬁcation round time. We also
increase communication from Θ(n) to Θ(n log t) (see Table I).
3) Publicly veriﬁable secret sharing (PVSS): Stadler pro-
posed publicly veriﬁable secret sharing (PVSS) protocols [42]
where any external veriﬁer can verify the VSS protocol exe-
cution. As a result, PVSS is less concerned with players indi-
vidually and efﬁciently verifying their shares, instead enabling
external veriﬁers to verify all players’ (encrypted) shares.
Schoenmakers proposed an efﬁcient (t, n) PVSS protocol [43]
where dealing is Θ(n log n) time and external veriﬁcation
of all shares is Θ(nt) time, later improved to Θ(n) time
by Cascudo and David [25]. Unfortunately, when the dealer
is malicious, PVSS still needs Θ(nt) computation during
reconstruction. Furthermore, PVSS might not be a good ﬁt
in protocols with a large number of players. In this setting,
it might be better to base security on a large,
threshold
number of honest players who individually and efﬁciently
verify their own share rather than on a small number of
external veriﬁers who must each do Ω(n) work. Indeed, recent
work explores the use of VSS within BFT protocols without
external veriﬁers [44]. Nonetheless, our AMT VSS protocol
can be easily modiﬁed into a PVSS since an AMT for all n
proofs can be batch-veriﬁed in Θ(n) time (see §III-C3).
4) Distributed key generation (DKG): DKG protocols were
introduced by Ingemarsson and Simmons [45] and subse-
quently improved by Pedersen [12], [15]. Gennaro et al. [16]
noticed that if players in Pedersen’s DKG refuse to deal [15],
they cannot be provably blamed and ﬁxed this in their new
JF-DKG protocol. They also showed that secrets produced
by Pedersen’s DKG can be biased, and ﬁxed this in their
New-DKG protocol. Neji et al. gave a more efﬁcient way of
debiasing Pedersen’s DKG [46]. Gennaro et al. also introduced
the ﬁrst “fast-track” or optimistic DKG [24]. Canetti et al.
modiﬁed New-DKG into an adaptively-secure DKG [28]. So
far, all DKGs required a Θ(t)-sized broadcast by each player.
Kate’s eJF-DKG [17] reduced the dealer’s broadcast to Θ(1)
PER-PLAYER WORST-CASE ASYMPTOTIC COMPLEXITY OF (t, n) VSS/DKG PROTOCOLS.
TABLE I
Scheme
Dealing
round time
Veriﬁcation
round time
Complaint
round time
Reconstr. time
(no interpol.)
Dealing commun.
(broadcast)
Dealing commun.
(private)
Feldman VSS [26]
JF-DKG [16]
eVSS [14]
eJF-DKG [17]
AMT VSS
AMT DKG
n log n
n log n
nt
nt
n log t
n log t
t
nt
1
n
t2
t3
t
t2
nt
nt
n
n