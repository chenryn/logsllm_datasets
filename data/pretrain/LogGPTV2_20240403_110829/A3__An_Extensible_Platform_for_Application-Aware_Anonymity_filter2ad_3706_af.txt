easily extended to support additional metrics. By con-
structing small adapters that interface with Information
Providers, A3 can be adapted to support policies that ref-
erence a diverse set of routing criteria.
Acknowledgments
The authors are grateful to the anonymous reviewers
for their insightful feedback. This work is partially sup-
ported by NSF Grants CNS-0831376, CNS-0524047,
and CNS-0627579; DARPA Grant ONR-N00014-09-1-
0770; and OSD/AFOSR MURI Collaborative Policies
and Assured Information Sharing. Any opinions, ﬁnd-
ings, and conclusions or recommendations expressed in
this paper are those of the authors and do not necessarily
reﬂect the views of the funding agencies.
Appendix A. Link-based Tunable Perfor-
mance/Anonymity Selection in A3LOG
The WEIGHTED link-based path selection algorithm
operates in two phases:
In the ﬁrst phase, the initiator rapidly generates (but
does not instantiate) candidate paths consisting of three
relays chosen uniformly at random without replace-
ment. The initiator computes the e2e cost of each gen-
erated candidate path. In the second phase, the initiator
sorts the candidate paths by their cost estimates. Us-
ing the family of functions introduced by Snader and
Borisov [40] (see Eq. 1), the initiator instantiates the
candidate path with index bn · fs(x)c, where x is cho-
sen uniformly at random from [0, 1), and n is the num-
ber of nodes. As with Snader and Borisov’s algorithm, a
larger value of s more heavily weighs path selection in
favor of performance. The s parameter is denoted by the
S attribute in the initial path request.
WEIGHTED is represented in A3LOG as follows:
w1 eCandidatePaths(Src, Dst, S,
RAND(3, 100),
PathCosts) :-
ePathRequest(Src, Dest, S), node(IP, Coord),
Src != IP, Dst != IP, PathCosts = {}.
w2 eCandidatePaths(Src, Dst, S, PathList,
eCandidatePaths(Src, Dst, S, PathList,
PathCosts) :-
PathCosts),
f_size(PathList) > 0, P=f_popfront(PathList),
PathCost=f_coorddist(Src.Coord,P[0].Coord) +
f_coorddist(P[0].Coord,P[1].Coord) +
f_coorddist(P[1].Coord,P[2].Coord) +
f_coorddist(P[2].Coord,Dst.Coord),
PathCosts.append([P, PathCost]).
w3 ePathResult(Src, Dest, Path) :-
eCandidatePaths(Src, Dst, S, PathList,
PathCosts),
f_size(PathList)=0,
SortedPathCosts=f_sortByField(PathCosts,
sbRand=(1 - 2ˆ(S*f_rand01())) / (1-2ˆS)),
Path=f_selectIndex(SortedPathCost,sbRand).P.
"PathCost",
"desc"),
Rule w1 ﬁrst generates 100 random permutations of
three elements each from the node table. Then, rule w2
repeatedly converts these list elements into pairs with
the path’s e2e cost, based on the embedded coordinates.
Finally, rule w3 sorts this list and selects an index using
the Snader-Borisov random variable described in Eq. 1,
with a tunable performance parameter S. Note that in
this case, we sort in reverse order since lower latency is
preferred to higher latency. The above rule assumes a
left-to-right execution ordering of predicates. This as-
sumption can be avoided with a more verbose version of
the above program using some additional rules.
Appendix B. Tor and Crowds in A3LOG
Tor: Unlike Onion Routing, where the initiator recur-
sively builds a single onion that is relayed along the en-
tire path, Tor speciﬁes an incremental telescoping path
instantiation strategy. At a high level, a circuit initia-
tor sends a CREATE message to the ﬁrst Tor router in
the desired circuit. The Tor router establishes local state
and replies, resulting in a path of length one. Should the
initiator choose to add another hop to the end of path, he
relays an EXTEND message to the current endpoint. The
current endpoint translates the EXTEND into a CRE-
ATE message and sends it to the desired new endpoint.
The new endpoint of the circuit replies with a conﬁrma-
tion message, which is forwarded back to the initiator.
The initiator may continue to extend the path if he de-
sires5.
Both CREATE and EXTEND messages can be en-
coded as A3LOG message tuples, and contain half of
a Difﬁe-Hellman handshake, encrypted with the pub-
lic key of the desired new endpoint. The new endpoint
completes the handshake with the initiator, resulting in
symmetric keys shared with the initiator, as in Onion
Routing. The encryption/decryption modules can be im-
plemented as a CView module with the corresponding
cryptographic functions, similar to that described in Sec-
tion 6.2. Tor’s telescoping path establishment implies
that n messages are exchanged in each direction to es-
tablish a circuit of length n. The kth message sent in the
forward direction is essentially an onion with k layers.
For sending messages between Tor routers, Tor speciﬁes
a link-layer protocol similar to that of Onion Routing.
Crowds: The process of path instantiation in Crowds
commences when an initiator starts an anonymous relay
on his machine called a jondo and contacts a server to
obtain membership in a crowd – a collection of anony-
mous users. To build a path, the initiator forwards a
request to a jondo chosen uniformly at random – pos-
sibly his own. Upon receiving a request to create a
path, a jondo chooses to extend the path to another jondo
(again chosen uniformly at random) with probability pf ,
or ceases path creation with probability 1 − pf .
Typically, an initiator will use a single bidirectional
path for all anonymous communication. However, in or-
der to preserve anonymity properties, all initiators must
create a new circuit – and cease using any previous ones
– whenever a new jondo joins the crowd.
Below, we exhibit the forward half of the path instan-
tiation scheme used in Crowds in the following rules:
5The current implementation of Tor uses three-relay anonymous
paths by default.
c0 circuitStatus(CID, "BUILDING"),
circuitForward(CID, ACI_out, Node_out),
extend(@Node_out, ACI_out, Me) :-
establish_path(), ACI_out=f_gen_aci(),
CID = f_gen_cid(), random_jondo(&Node_out).
Rule c0 begins the process of building a new path of
jondos in response to an establish path event. Such
an event is triggered when a node retrieves a new list of
jondos, for example. c0 generates a CID and ACI for
the new circuit, and selects a jondo uniformly at random
(using the random jondo CView) to receive the path ex-
tension request, extend. Upon receipt of an extend re-
quest, rule c1 is triggered:
c1 circuitReverse(CID, ACI_in, Node_in),
incoming(CID, X) :-
extend(@Me, ACI_in, Node_in),
X = f_rand01(), CID = f_gen_cid().
Rule c1 generates a random number in the range [0, 1],
as well as a CID for the circuit. c1 also derives a local
incoming event, containing the local CID of the new cir-
cuit, and the previously generated random number. The
incoming event triggers rule c2:
c2 circuitForward(CID, ACI_out, Node_out),
extend(@Node_out, ACI_out, me) :-
incoming(CID, X), p_forward(P), X  P, another set of rules
relays a conﬁrmation back to the initiator informing him
that the newly instantiated path is ready for use.
References
[1] Tor Directory Protocol, Version 3.
https:
//git.torproject.org/checkout/tor/
master/doc/spec/dir-spec.txt.
[2] D. G. Andersen, H. Balakrishnan, M. F. Kaashoek, and
R. Morris. The Case for Resilient Overlay Networks. In
HOTOS ’01: Proceedings of the Eighth Workshop on Hot
Topics in Operating Systems, page 152, 2001.
[3] K. Bauer, D. McCoy, D. Grunwald, T. Kohno, and
D. Sicker. Low-Resource Routing Attacks Against Tor.
In Proceedings of the 2007 ACM Workshop on Privacy in
Electronic Society, pages 11–20, 2007.
[4] O. Berthold, H. Federrath, and M. K¨ohntopp. Project
“Anonymity and Unobservability in the Internet”. In CFP
’00: Proceedings of the Tenth Conference on Computers,
Freedom and Privacy, pages 57–65, 2000.
[5] M. Costa, M. Castro, R. Rowstron, and P. Key. PIC:
Practical Internet Coordinates for Distance Estimation. In
International Conference on Distributed Computing Sys-
tems, 2004.
[6] F. Dabek, R. Cox, F. Kaashoek, and R. Morris. Vivaldi: A
Decentralized Network Coordinate System. SIGCOMM
Comput. Commun. Rev., 34(4):15–26, 2004.
[7] F. Dabek, J. Li, E. Sit, F. Kaashoek, R. Morris, and
C. Blake. Designing a DHT for Low Latency and High
Throughput. In NSDI, 2004.
[8] R. Dingledine and N. Mathewson. Tor Path Speciﬁ-
cation, January 2008. http://www.torproject.
org/svn/trunk/doc/spec/path-spec.txt.
[9] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The
In Proc. of the 13th
Second-Generation Onion Router.
Usenix Security Symposium, pages 303–320, 2004.
[10] H. Federrath. JAP: Anonymity & Privacy. http://
anon.inf.tu-dresden.de/.
[11] P. Francis, S. Jamin, C. Jin, Y. Jin, D. Raz, Y. Shavitt,
and L. Zhang. IDMaps: A Global Internet Host Distance
Estimation Service. IEEE/ACM Trans. Netw., 9(5):525–
540, 2001.
[12] M. Freedman, K. Lakshminarayanan, and D. Mazi`eres.
OASIS: Anycast for Any Service. In Networked Systems
Design and Implementation (NSDI), May 2006.
[13] M. J. Freedman and R. Morris. Tarzan: A Peer-to-Peer
Anonymizing Network Layer. In CCS, Washington, D.C.,
November 2002.
[14] K. P. Gummadi, S. Saroiu, and S. D. Gribble. King: Es-
timating Latency between Arbitrary Internet End Hosts.
In ACM SIGCOMM Workshop on Internet Measurment
(IMW), 2002.
[15] M. A. Kaafar, L. Mathy, C. Barakat, K. Salamatian,
T. Turletti, and W. Dabbous. Securing Internet Coordi-
In ACM SIGCOMM, August
nate Embedding Systems.
2007.
[16] M. A. Kaafar, L. Mathy, T. Turletti, and W. Dabbous.
Real Attacks on Virtual Networks: Vivaldi Out of Tune.
In SIGCOMM Workshop on Large-Scale Attack Defense
(LSAD), pages 139–146, 2006.
[17] “King” Data Set. Available at http://pdos.csail.
mit.edu/p2psim/kingdata/.
[18] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F.
Kaashoek. The Click Modular Router. ACM Transactions
of Computer Systems, 18(3), 2000.
[19] B. T. Loo, T. Condie, J. M. Hellerstein, P. Maniatis,
T. Roscoe, and I. Stoica. Implementing Declarative Over-
lays. In SOSP, 2005.
[20] B. T. Loo, J. M. Hellerstein, I. Stoica, and R. Ramakr-
ishnan. Declarative Routing: Extensible Routing with
Declarative Queries. In SIGCOMM, 2005.
[21] H. Madhyastha, E. Katz-Bassett, T. Anderson, A. Kr-
ishnamurthy, and A. Venkataramani.
iPlane Nano: Path
Prediction for Peer-to-Peer Applications. In Proc. of the
USENIX Conference on Networked Systems Design and
Implementation (NSDI), 2009.
[38] M. Sherr, B. T. Loo, and M. Blaze. Towards Application-
In Second USENIX Work-
Aware Anonymous Routing.
shop on Hot Topics in Security (HotSec), August 2007.
[39] C. Shields and B. N. Levine. A Protocol for Anonymous
Communication over the Internet. In CCS ’00: Proceed-
ings of the 7th ACM Conference on Computer and Com-
munications Security, pages 33–42, New York, NY, USA,
2000. ACM Press.
[40] R. Snader and N. Borisov. A Tune-up for Tor: Improv-
ing Security and Performance in the Tor Network. In 15th
Annual Network and Distributed System Security Sympo-
sium (NDSS), February 2008.
[41] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and
H. Balakrishnan. Chord: A Scalable Peer-to-Peer Lookup
Service for Internet Applications. In SIGCOMM, 2001.
[42] B. Wong, A. Slivkins, and E. G. Sirer. Meridian: a
Lightweight Network Location Service without Virtual
Coordinates. In SIGCOMM, 2005.
[43] D. J. Zage and C. Nita-Rotaru. On the Accuracy of
Decentralized Virtual Coordinate Systems in Adversarial
Networks. In CCS, 2007.
[44] L. Zhuang, F. Zhou, B. Y. Zhao, and A. Rowstron. Cash-
mere: Resilient Anonymous Routing. Proc. of NSDI,
2005.
[22] Y. Mao, B. T. Loo, Z. Ives, and J. M. Smith. MO-
SAIC: Uniﬁed Platform for Dynamic Overlay Selection
and Composition. In 5th ACM International Conference
on emerging Networking EXperiments and Technologies,
2008.
[23] A. Mislove, G. Oberoi, A. Post, C. Reis, P. Druschel,
and D. S. Wallach. AP3: Cooperative, Decentralized
Anonymous Communication. In 11th Workshop on ACM
SIGOPS European Workshop: Beyond the PC, page 30,
2004.
[24] S. J. Murdoch and R. N. M. Watson. Metrics for Security
and Performance in Low-Latency Anonymity Systems. In
8th Privacy Enhancing Technologies Symposium (PETS
2008), July 2008.
[25] T. S. E. Ng and H. Zhang. A Network Positioning Sys-
tem for the Internet. In Proceedings of the 2004 USENIX
Annual Technical Conference, June 2004.
[26] L. Øverlier and P. Syverson. Locating Hidden Servers.
In IEEE Symposium on Security and Privacy, 2006.
[27] K. Park and V. Pai. CoMon: A Monitoring Infrastructure
http://comon.cs.princeton.
for PlanetLab.
edu.
[28] PlanetLab. http://www.planet-lab.org.
[29] R. Ramakrishnan and J. D. Ullman. A Survey of Re-
search on Deductive Database Systems. Journal of Logic
Programming, 23(2), 1993.
[30] M. Reed, P. Syverson, and D. Goldschlag. Anonymous
IEEE Journal on Se-
Connections and Onion Routing.
lected Areas in Communications, 16(4), May 1998.
[31] M. K. Reiter and A. D. Rubin. Crowds: Anonymity for
Web Transactions. In ACM Transactions on Information
and System Security, 1998.
[32] M. Rennhard and B. Plattner.
Introducing MorphMix:
Peer-to-Peer Based Anonymous Internet Usage with Col-
In WPES ’02: Proceedings of the
lusion Detection.
2002 ACM Workshop on Privacy in the Electronic Soci-
ety, pages 91–102, 2002.
[33] D. Saucez, B. Donnet, and O. Bonaventure.
A
Reputation-Based Approach for Securing Vivaldi Embed-
ding System. In Dependable and Adaptable Networks and
Services, 2007.
[34] Y. Shavitt and T. Tankel. Big-bang Simulation for Em-
bedding Network Distances in Euclidean Space. In IEEE
Infocom, April 2003.
[35] M. Sherr. Coordinate-Based Routing for High Perfor-
mance Anonymity. PhD thesis, CIS Department, Univer-
sity of Pennsylvania, 2009.
[36] M. Sherr, M. Blaze, and B. T. Loo. Scalable Link-Based
Relay Selection for Anonymous Routing. In 9th Privacy
Enhancing Technologies Symposium (PETS 2009), Au-
gust 2009.
[37] M. Sherr, M. Blaze, and B. T. Loo. Veracity: Practical
Secure Network Coordinates via Vote-based Agreements.
In USENIX Annual Technical Conference (USENIX ’09),
June 2009.