payload 来设置 Bash Bunny
注意，在 switch1 和 switch2 文件夹中都有一个名为 payload.txt 的文件。而对于每一个这个文件，你需要将
其配置为攻击 Windows 或 Mac 计算机。对于 Windows 机器，确保 AttackMode 设置为
RNDIS_ETHERNET，对于 Mac，将 AttackMode 配置为 ECM_ETHERNET。
QuickCreds
cp -R /opt/bashbunnypayloads/payloads/library/credentials/BunnyTap/* 
/media/root/BashBunny/payloads/switch1/
cp -R /opt/bashbunnypayloads/payloads/library/credentials/QuickCreds/* 
/media/root/BashBunny/payloads/switch2/
QuickCreds 是一个很棒的工具，它使用 Responder 攻击从锁定和未锁定的机器上捕获 NTLMv2 Challenge 哈希。
假设你在做一次物理评估，为此你闯进一栋大楼，碰到了一堆锁着的机器。你使用 QuickCreds 的开关插入 Bash
Bunny ，每台机器等待大约 2 分钟。Bash Bunny 将接管网络适配器，使用 Response 重新传输任何共享和身份验
证请求，然后记录这些数据。它将所有凭证保存到 USB 磁盘上的 loot 文件夹中。
译者注: 如若不懂“NTLMv2 Challenge 哈希”，可以参考此篇：Windows 下的密码 hash——NTLM hash 和
Net-NTLM hash 介绍
参考资料：
https://github.com/hak5/bashbunny-payloads/tree/master/payloads/library/credentials/QuickCreds
https://room362.com/post/2016/snagging-creds-from-locked-machines/
BunnyTap
BunnyTap 基于由 Samy Kamkar 开发的知名工具 PoisonTap ( https://www.youtube.com/watch?v=Aatp5gCskvk
)。PoisonTap 是一个非常优秀的工具，即使是在锁定的机器上，也可以执行以下操作：
通过 USB（或 Thunderbolt ）模拟以太网设备。
劫持所有来自机器的网络流量（尽管是通过低优先级或未知的网络接口）。
从 Web 浏览器中提取和存储位居 Alexa 排行榜最受欢迎的前100,0000 站的 HTTP cookie 和会话。
将内部路由器暴露给攻击者，这样攻击者就可以通过连接外网的 WebSocket 和 DNS 重新绑定攻击来远程访问
内部路由器。（感谢 Matt Austin 提供的关于“DNS 重新绑定攻击”的思路！）
在 HTTP 缓存中，为数十万个域名和常见的 JavaScript CDN URL 安装一个基于 Web 的持久后门。通过缓存投
毒的方式，我们可以获取用户对于这些资源的 cookie 。
允许攻击者通过在任何有后门的域中获取的用户 cookie，来远程强制用户来发起 HTTP 请求（包括 GET 和
POST）和通过代理传回响应。
不需要将机器解锁。
后门和远程访问权限即使在设备被移除且攻击者离开后仍然存在（ https://samy.pl/poisontap/ ）。
从一次物理评估的角度来看，你进入他们的办公室，在每台机器上插上 Bash Bunny，然后等待大约2分钟。Bash
Bunny 会让电脑中的所有流量都走 Bash Bunny 转发。如果他们有一个打开并且活动的浏览器（如广告或任何定期
更新的页面），BunnyTap 将启动并向所有 Alexa Top 100,0000 网站发出请求。此时，受害者用户若登录到这些站
点中的任何一个，BunnyTap 将捕获受害者的所有 cookie。现在，我们可以将这些 cookie 发回到自己的计算机上，
把我们的 cookie 替换成他们的，这样即可在不知道他们密码的情况下，冒充他们的身份进入网站。
请务必查看所有 Bash Bunny 的 payload：
https://github.com/hak5/bashbunny-payloads/tree/master/payloads/library
WiFi
WiFi 攻击方面，我们攻击受害者的方式没有什么大变化。虽然 WEP 加密网络的使用显著减少，但攻击方式仍包括反
认证、aireplay-ng 和捕获 IV 数据包。对于 WPA 无线网络，最好的攻击手段，依旧是对客户端进行反认证 、捕获握
手包、将其传递给 hashcat 对密码进行破解。以上这几种方法屡试不爽。工具方面，我最爱的工具是 Wiﬁte2 的完全
重写的版本，这个新版本带有一个 Alfa AWUS036NHA 无线网卡。这是一个非常易于使用的接口，可以支持多种攻
击，基于 aircrack 工具套装，令它可以很容易地破解捕获的哈希值。
关于发动 WiFi 攻击的装备，除了使用一对 Alfa 无线网卡，执行更加隐蔽的 WiFi 攻击的简单方法是使用 WiFi
Pineapple Nano。如果你想建立一个假的主无线接入点，通过天线改变他们流量的通信路径，用伪造页面捕获身份
验证，执行所有的中间人攻击，运行 Responder 和其他攻击的话，WiFi Pineapple Nano 是一个能执行此操作的轻
量级硬件工具。
除了 Pineapple，还有其他一些工具可以用来攻击公司网络。其中一个就是 eaphammer。
eaphammer 的功能：
从 WPA-EAP 和 WPA2-EAP 网络窃取 RADIUS 凭据。
执行恶意门户攻击，以窃取 AD 凭证，并执行间接无线枢轴。
执行 captive portal 攻击。
内置响应器集成。
支持开放网络和 WPA-EAP/WPA2-EAP。
大多数攻击无需手动配置。
安装和设置过程无需手动配置。
使用最新版本的 hostapd（2.6）。
支持恶意的 twin 攻击和 karma 攻击。
为间接无线枢轴生成定时 PowerShell payload。
针对恶意门户攻击的集成 HTTP 服务器。
支持 SSID 隐藏。
eaphammer 最好的地方是使用自定义攻击功能来执行 responder 攻击或捕获 NTLM challange 身份验证哈希以进
行破解( https://github.com/s0lst1c3/eaphammer#iii---stealing-ad-credentials-using-hostile-portal-attacks ) 以
及间接的无线枢轴( https://github.com/s0lst1c3/eaphammer#iv---indirect-wireless-pivots )。
为避免读者没看到上面的注释，所以译者再次注: 如若不懂“NTLMv2 Challenge 哈希”，可以参考此篇：
Windows 下的密码 hash——NTLM hash 和 Net-NTLM hash 介绍
本章总结
物理攻击是最有趣的事情之一。这会加速你的肾上腺素分泌，让自己觉得像个罪犯，迫切地想行恶。在我们的许多红
队行动中，我们可能会花上几天的时间来为一家公司进行踩点，观察警卫的轮换，并弄清楚他们都有什么类型的门。
我们可能会尝试拍摄他们的工卡的照片，记录人们离开大楼的时间，并找出能让我们进入大楼的薄弱环节。
从红队的角度来看，我们不仅要观察他们物理设施方面的安全薄弱点，也要注意他们内部的人。
如果触发了警报，相关员工要过久才能觉察并应对？
摄像头是否开启全天候监控？是这样的话，如果发现什么可疑，到相关人员来排查，能有多长空余时间？
有人看守后门等其他的不常用出口吗？
如果行踪败露，你有办法脱身吗？
如果乔装打扮成该公司(或任何为该公司提供第三方服务）的员工，对方公司会对你的入侵行为做什么反应？
最后要注意的是，在开始入侵行动之前，确保要有一个明确的攻击范围、一封入侵目标公司给你做的书面授权证明、
首席安全官或物理设施安全负责人的电话号码，并确保与对方达成共识、进行合作。准备措施做得越好，就能更好的
避免不必要的误会和麻烦。但是因为这终究是一种危险的委托，所以我也无法保证精心准备就一定能万无一失。
第7章 四分卫突破——逃避杀毒软件和网络检测
译者：@Snowming
为红队行动编写工具
红队人员和渗透测试人员比较明显的区别之一就是红队人员能快速的适应并理解不同的防护。无论是理解低级语言
（机器代码和汇编语言），编写 shellcode ，创建自定义的 C2 二进制可执行文件，还是修改代码来隐藏恶意程序，
它们都是我们（红队）日常工作的一部分。我总是遇到不会编程的渗透测试人员，虽然这不是一项硬性要求，但是编
程水平确实会决定他们专业成长的高度。 因此，我专门编写这一章节来给那些没有使用过偏向底层的低级语言编程
的人一个良好的入门方向。
基础的键盘记录器
键盘记录器是所有渗透测试人员 / 红队人员的必备工具，本节将指导你制作通用的键盘记录器。 有时我们只想持续监
控某个用户或获取其他凭据。 这可能是因为我们此时无法进行任何类型的横向移动或者权限提升，或者我们可能只
想监视用户以便更好开展将来的入侵活动。 在这些情况下，我们通常喜欢放置一个持续在受害者系统上运行的键盘
记录器并将键盘记录的数据发送到外网。 以下示例只是一个 POC  ，本实验的目的是让你从这里了解基础知识和构建
它们。 它全部用 C 语言（较底层的语言）来编写的原因是保持二进制文件相对较小、更好的系统控制、并且规避杀
毒软件。 在之前的书中，我们使用 Python  编写了一个键盘记录器并使用 py2exe  对其进行编译以使其成为二进制
文件，但这些很容易就被检测到。 让我们来看一个稍微复杂的例子。
设置你的环境
这是在 C 中编写和编译以生成 Windows 二进制文件并创建自定义键盘记录器所需的基本设置。
在一个虚拟机中安装 Windows 10
安装 Visual Studio  ，以便你可以使用命令行编译器和使用 Vim 进行代码编辑
到目前为止，Windows API 编程的最佳学习资源是微软自己的开发者网络网站 MSDN。 MSDN  是一个非常宝贵的资
源，它详细说明了系统调用，数据类型和结构定义，并包含了许多示例。通过阅读微软出版社出版的《Windows
Internals》书籍，可以更深入地了解 Windows 操作系统， 虽然这个项目中并不是特别需要这个。 对于学习 C 语
言，有一本好书，C 语言的创始人之一参与了对此书的撰写，名为《C语言程序设计》（The C Programming
Language），书的作者是 Kernighan 和 Ritchie。最后，可以阅读《Beej’s Guide to Network Programming》，有
印刷版和在线版，这是 C 语言中关于的 socket 编程的一本很好的入门读物。
从源码编译
在这些实验中，将会有多个示例代码和例子。实验室将使用微软的 Optimizing Compiler  编译代码，该编译器随
Visual Studio  社区版本一起提供，并内置于 Visual Studio  开发者命令提示符（Visual Studio Developer
Command Prompt）中。安装 VS 社区版本后，请通过 工具（Tools） --> 获取工具和功能（Get Tools and
Features） 安装 C++ 的组件 通用 Windows 平台开发和桌面开发。要编译示例源码，请打开开发者命令提示符的
一个实例，然后切换到包含源代码文件的文件夹目录。 最后，运行命令 cl sourcefile.c io.c 。这将生成一个与
源文件同名的可执行文件。
编译器默认为 32 位，但此代码也可以用64位进行编译。要编译64位程序，请运行位于 Visual Studio  文件夹中的
批处理程序。在命令提示符中，切换到目录 “ C:\Program Files (x86)\Microsoft Visual
Studio\2017\Community\VC\Auxiliary\Build ” ，注意，这个目录可能会因为你的 Visual Studio 版本而改变（但是
大致是以上目录）。然后，运行命令 vcvarsall.bat x86_amd64  ，这将设置 Microsoft 编译器编译 64 位的二进制
文件而不是编译成 32 位的。现在，你可以通过运行 cl path/to/code.c （path 是源码文件的绝对路径）来编译代
码。
示例框架
该项目的目标是创建一个键盘记录器，利用 C 语言和底层 Windows 功能来监视击键。该键盘记录器使用
SetWindowsHookEx  和 LowLevelKeyboardProc  函数 。 SetWindowsHookEx  允许在本地和全局上下文中设置各种
类型的 Hook（钩子）。在这种情况下， WH_KEYBOARD_LL 参数将用于提取底层键盘事件 。 SetWindowsHookEx  的
函数原型看起来像这样（ http://bit.ly/2qBEzsC ）：
该函数创建了定义为整型的 hook 的 ID、指向函数的指针、句柄和线程 ID。前两个值是最重要的。你即将要安装的
hook 的 ID 数据类型是整型。Windows 会在功能页面上列出的可用 ID 。在我们的例子中，将使用 ID 13 或
WH_KEYBOARD_LL  。 HOOKPROC  是一个指向回调函数的指针，每次被钩住的进程接收数据时都会调用该函数。这意
味着每次按下一个键，都会调用 HOOKPROC 。这是用于将击键写入文件的函数。 hMod  是包含 lpfn  指针指向的函数
的 DLL 的句柄。此值将设置为 NULL，因为函数与 SetWindowsHookEx  在同一进程中使用。dwThreadId 将设置为0
以将回调与桌面上的所有线程相关联。最后，该函数返回一个整数，该整数将用于验证 hook 是否已正确设置或以其
他方式退出。
第二部分是回调函数。回调函数将为此键盘记录器完成一系列繁重的工作。此函数将处理接收击键，将其转换为
ASCII 字符以及记录所有文件操作。 LowLevelKeyBoardProc （ http://bit.ly/2HomCYQ ）的原型如下所示：
HHOOK WINAPI SetWindowsHookEx(
 _In_ int   idHook,
 _In_ HOOKPROC lpfn,
 _In_ HINSTANCE hMod,
 _In_ DWORD dwThreadId