### 3.5 µTPM Software Support

The TCG Software Stack (TSS) must be enhanced to handle the externalized firmware. This involves storing the disembedded firmware and loading the appropriate TPM microcode over the XIO port before passing command parameters over the I/O port. The integrity of this firmware is protected by the µTPM’s authentication key, `kAuth`, but its availability cannot be guaranteed. If the external firmware is deleted (intentionally or unintentionally), the corresponding µTPM process becomes unusable. However, this is not a significant concern, as similar denial-of-service attacks can be applied to current TPMs (e.g., deleting parts of the TSS or the TPM driver). TPMs were never designed to withstand such attacks.

Similarly, the Core Root of Trust for Measurement (CRTM) must store the code for a small number of TPM commands used during platform startup (e.g., `TPM_Extend`). The CRTM may use another non-volatile storage medium (e.g., BIOS Flash memory). If the authenticated firmware becomes inaccessible, the CRTM can either destroy the process or re-authenticate the missing microcode, both of which prevent the chain of trust from being bypassed.

### 4. Security Comparison

Our approach aims to closely follow the original TPM attack model. However, the exposure of internal TPM data does introduce minor differences, which may require additional precautions in some applications to prevent attacks.

#### 4.1 Denial of Service

In our system, an attacker can destroy the internal state of the TPM and even the command set. While it cannot be replaced with meaningful data, such an attack can disable the TPM or force a reset to its native state. This is a more severe attack than what is possible on a traditional TPM, where deletion of external data can only destroy key material, not state information or functionality. In practice, the difference between an attack on a µTPM and a classical TPM is minimal; if a classical TPM loses all key blobs, most crucial state information is also lost, and the application using the TPM must find a way to recover without opening new attack vectors.

The only scenario where a difference may occur is in a virtualized environment. It must be impossible for one virtual environment to destroy the state information of another virtual TPM. This means each virtual TPM must have a local copy of its relevant state information, and shared information must be stored by a trusted program (e.g., the hypervisor), where it cannot be deleted by individual virtual machines. Such a mechanism would be required anyway to prevent virtual machines from disrupting each other.

#### 4.2 Access Analysis

While our µTPM implementation protects TPM data from being read by an attacker, the attacker may still be able to see the encrypted internal state or obtain information about the last commands submitted to the µTPM (e.g., by analyzing the cache or untrusted storage). Although this does not endanger security in most TPM usage scenarios, the increased visibility should be considered, and critical applications may need to apply additional measures to hide the activity of the µTPM, such as adding fake encrypted state blocks and clearing all caches after use.

#### 4.3 Vendor Backdoor

For some implementations of code integrity measurement, it is possible for the vendor to authorize TPM commands that are invisible to the user (i.e., not supplied with the original µTPM on delivery) but used later as a backdoor to violate TPM security. In security settings where the vendor is untrusted, MAC-based binary measurement should be used instead of vendor signatures, or the user should use their own verification key when executing the `AssociateKey` command, thereby locking the original vendor out of the TPM.

### 5. Memory Externalization

To allow several independent processes to run on a µTPM and minimize the amount of memory needed inside the µTPM, we require a mechanism to externalize the Non-Volatile Memory (NVM) and potentially even parts of the Random Access Memory (RAM).

There are two major issues with externalized memory. First, memory management may become more complex, especially if the memory is insufficient for a single process. Second, externalized memory needs additional protection against replay attacks, i.e., an attacker presenting an old memory block as a new one.

While our solutions are designed to support an arbitrary number of processes, realistically, the number of processes using a single µTPM is relatively low. The primary use case for a large number of processes is on a server with many virtualized operating systems and numerous applications. In such cases, it is safe to assume that the manufacturer would choose a µTPM with a large amount of internal memory and a fast communication bus. In other words, while we do not want to set an upper limit on the number of processes and their memory requirements, we are not trying to build an architecture that scales efficiently to hundreds of processes if the µTPM has only 1 kbit of memory.

#### 5.1 Memory Protection

Whenever memory is externalized to insecure storage, it must be encrypted and authenticated to protect its confidentiality and integrity. This can be achieved using a symmetric cipher in an authenticated encryption mode such as EAX, GCM, or OCB. To ensure freshness, whenever externalized memory is updated, the µTPM must make sure that all old versions of that memory become unavailable. This can be done by either adding a counter value to the externalized memory or changing the memory authentication key every time the memory is updated. The former solution requires less storage in the TPM, as one master key can be used for all processes, and each memory block only needs a counter that can be much shorter than a cryptographic key.

Ideally, if the amount of virtual memory is limited, the list of counters fits into the µTPM. If an arbitrary number of processes is allowed, the protected NVM may be too small for all counter values. In this case, the counter values themselves need to be externalized to insecure storage, and the freshness of the counters must be protected by a master counter. Advanced tree-based solutions for managing a large number of counters exist, but we assume that the number of processes is relatively low, and a simple list-based approach suffices.

#### 5.2 Memory Management

In a simple setting, we can assume that each process has its own NVM and RAM, which fits completely into the µTPM hardware. However, the size of the µTPM’s memory is insufficient to simultaneously hold the memory of all processes. Thus, swapping is only required when the process is switched.

In this case, management of the external memory is relatively simple. In response to a process creation/switch command, the µTPM returns the (encrypted and authenticated) content of the current process and expects the content of the new one in return. This does not necessarily need to be implemented in the µTPM hardware itself; the process can handle the retrieval and cleaning of the memory (e.g., using the `TPM_SaveState` and `TPM_Startup` commands).

If the NVM or RAM needed for the process exceeds the available size of the hardware memory in the µTPM, externalization becomes more complicated. Ideally, one could design complete virtual memory management and simulate page faults as TPM responses to the µTSS. However, this contradicts the principle of a minimized hardware unit.

It is possible for the µTPM to communicate with the µTSS during command execution using error codes. The µTPM is a passive device, so error codes are the only mechanism to signal problems to the µTSS. This would allow us to implement a function that can swap in and out blocks of internal memory manually while commands are being processed. However, we believe this design abuses error codes, and there is little need to support single commands that exceed the capacity of the µTPM.

#### 5.3 Memory Availability

It should be noted that externalizing the NVM allows for new forms of denial-of-service attacks. While the externalized firmware can easily be replaced if it gets lost, an attacker may be able to remove the externalized NVM permanently, and the only recovery from such an attack is to reset the µTPM to its default setting. While this attack is not critical in most TPM usage scenarios—since the attacker already requires a level of control over the host platform that allows for many other ways of denial-of-service attacks—it is an attack that is not possible for a normal TPM, and some TPM-based protocols may assume it is impossible.

One solution to this issue is for the µTPM to collaborate with secure storage, as specified by the TCG Storage Work Group. In this case, the µTPM only releases its internal memory once it receives an acknowledgment from its counterpart in the hard disk that the memory content has been successfully stored in a section of the hard disk that is unavailable to the operating system.

### 6. Conclusion

We have shown that many of the current issues with TPM implementations, stemming from complexity and inflexibility, can be overcome by redefining the trust boundaries. By placing the firmware outside the secure hardware and securing it cryptographically, our architecture allows for simplified hardware, while gaining flexibility in the supported command set and even allowing multiple secure coprocessors to share the same hardware. Our architecture is largely compatible with the current specification, provided an additional software layer between the classical TSS and the µTPM, thus enabling the improved architecture without having to adapt the TCG specification.

### 7. Acknowledgements

The authors would like to thank the anonymous reviewers for their valuable comments. This work was supported in part by the IAP Programme P6/26 BCRYPT of the Belgian State (Belgian Science Policy), by the FWO project G.0300.07 (Security components for trusted computer systems), by the IBBT QoE project, and in part by the European Commission through the IST Programme under Contract IST-027635 OPEN TC.

### 8. References

[1] M. Bellare, P. Rogaway, and D. Wagner. The EAX Mode of Operation. In B. K. Roy and W. Meier, editors, Fast Software Encryption, 11th International Workshop, FSE 2004, Delhi, India, February 5-7, 2004, Revised Papers, volume 3017 of Lecture Notes in Computer Science, pages 389–407. Springer-Verlag, 2004.

[2] S. Berger, R. C´aceres, K. A. Goldman, R. Perez, R. Sailer, and L. van Doorn. vTPM: Virtualizing the Trusted Platform Module. In Proceedings of the 15th USENIX Security Symposium, pages 21–21, Berkeley, CA, USA, 2006. USENIX Association.

[3] BSI. Federal Government’s Comments on the TCG and NGSCB in the Field of Trusted Computing. http://www.bsi.bund.de/sichere_plattformen/trustcomp/stellung/StellungnahmeTCG1_2a_e.pdf.

[4] B. Chevallier-Mames, D. Naccache, P. Paillier, and D. Pointcheval. How to Disembed a Program? In M. Joye and J.-J. Quisquater, editors, Cryptographic Hardware and Embedded Systems - CHES 2004: 6th International Workshop Cambridge, MA, USA, August 11-13, 2004. Proceedings, volume 3156 of Lecture Notes in Computer Science, pages 441–454. Springer-Verlag, 2004.

[5] B. Chevallier-Mames, D. Naccache, P. Paillier, and D. Pointcheval. How to Disembed a Program? Cryptology ePrint Archive, Report 2004/138, 2004. http://eprint.iacr.org/.

[6] V. Costan, L. F. G. Sarmenta, M. van Dijk, and S. Devadas. The Trusted Execution Module: Commodity General-Purpose Trusted Computing. In G. Grimaud and F.-X. Standaert, editors, Smart Card Research and Advanced Applications, 8th IFIP WG 8.8/11.2 International Conference, CARDIS 2008, London, UK, September 8-11, 2008. Proceedings, volume 5189 of Lecture Notes in Computer Science, pages 133–148. Springer, 2008.

[7] K. Dietrich. An Integrated Architecture for Trusted Computing for Java-enabled Embedded Devices. In 2nd ACM workshop on Scalable Trusted Computing – STC ’07, pages 2–6, New York, NY, USA, 2007. ACM.

[8] T. Eisenbarth, T. G¨uneysu, C. Paar, A.-R. Sadeghi, D. Schellekens, and M. Wolf. Reconfigurable Trusted Computing in Hardware. In 2nd ACM workshop on Scalable Trusted Computing – STC ’07, pages 15–20, New York, NY, USA, 2007. ACM.

[9] J.-E. Ekberg and M. Kyl¨anp¨a¨a. Mobile Trusted Module (MTM) – an introduction, Nov. 2007. http://research.nokia.com/files/NRCTR2007015.pdf.

[10] D. A. McGrew and J. Viega. The Security and Performance of the Galois/Counter Mode (GCM) of Operation. In A. Canteaut and K. Viswanathan, editors, Progress in Cryptology - INDOCRYPT 2004, 5th International Conference on Cryptology in India, Chennai, India, December 20-22, 2004, Proceedings, volume 3348 of Lecture Notes in Computer Science, pages 343–355. Springer-Verlag, 2004.

[11] P. Rogaway, M. Bellare, and J. Black. OCB: A Block-Cipher Mode of Operation for Efficient Authenticated Encryption. ACM Transactions on Information and System Security, 6(3):365–403, 2003.

[12] A.-R. Sadeghi, M. Selhorst, C. St¨uble, C. Wachsmann, and M. Winandy. TCG inside?: A Note on TPM Specification Compliance. In 1st ACM workshop on Scalable Trusted Computing – STC ’06, pages 47–56, New York, NY, USA, 2006. ACM.

[13] L. F. G. Sarmenta, M. van Dijk, C. W. O’Donnell, J. Rhodes, and S. Devadas. Virtual Monotonic Counters and Count-Limited Objects using a TPM without a Trusted OS. In 1st ACM workshop on Scalable Trusted Computing – STC ’06, pages 27–42, New York, NY, USA, 2006. ACM.

[14] H. Stamer and M. Strasser. A Software-Based Trusted Platform Module Emulator. In P. Lipp, A.-R. Sadeghi, and K.-M. Koch, editors, Trusted Computing - Challenges and Applications, First International Conference on Trusted Computing and Trust in Information Technologies, Trust 2008, Villach, Austria, March 11-12, 2008, Proceedings, volume 4968 of Lecture Notes in Computer Science, pages 33–47. Springer, 2008.

[15] Trusted Computing Group. TCG Storage Architecture Core Specification. Available at https://www.trustedcomputinggroup.org/specs/Storage/.