how this graph was generated are provided in Section III. In
this section, we will leverage the graph simply as an example
of how JSgraph can help in simplifying the analysis of web
attacks.
The graph was computed by starting from the download
URL (the node at the bottom highlighted in red) and back-
tracking along browsing events, until the beginning of the
browsing session (e.g., until a parent tab ﬁrst opened). What
the graph shows is that the user ﬁrst visited www.google.
com. Notice that the search query string typed by the user
is not shown in the ﬁrst graph node. The reason is that
Google uses XMLHttpRequests to send search keywords
to the server and dynamically load the search results, and
that the page’s URL is changed by JS code by leveraging
history.pushState() without triggering any navigation.
This type of information is captured in detail
in the JS
audit logs, as shown in Figure 3; however, for the sake of
simplicity our log visualization tool does not include them
in the graph. Nonetheless, the forensic analyst could use the
graph to identify nodes of interest, and then further explore
the related detailed logs, whenever needed.
Figure 2 shows that the user then navigated to gomovies[.]
to. There, the browser was instructed to load and execute
a piece of JS code (Script 362) that registered an event
listener for mousedown events on an element of the page.
As the user clicked to watch the movie (see Figure 1b),
the callback was activated, which ﬁrst created a “no source”
iframe element (the source is indicated as about:blank),
dynamically generated some JS code, and injected the new
script (Scrip 622) in the context of the newly created
iframe, as also shown in Figure 4. As the new JS code is
injected into the DOM, it is compiled and executed, triggering
a window.open call. A new window is then opened, with
content loaded from onclkds[.]com, including a JS script
that redirects to adexc[.]net by resetting the page’s location.
Then, an HTTP-based redirection takes the browser to a page
on pressupdateforsafesoft[.]download. As we will see later, this
page renders as shown in the screenshots of Figures 1c-1e
(notice that while JSgraph does not log visual screenshots,
this functionality could be easily implemented very efﬁciently
with the approach used by ChromePic [43]). As the user clicks
on the download button (see Figure 1d), this corresponds to
clicking on an HTML anchor that navigates the browser to the
pressbuttonforupdate[.]bid, triggering the .dmg ﬁle download.
We would like to emphasize that this backtracking graph
provides a high-level, and more easily interpretable abstraction
of the highly complex web content loaded by the browser. In
fact, the gomovies[.]to page alone contains 121 scripts, for
a total of more than 6.2MB of (mostly obfuscated) JS code.
Also, the pressupdateforsafesoft[.]download page contains a
large amount of JS code, which is needed to create the social
engineering portion of the attack. JSgraph condenses these to
report only the content of interest that had a direct role in
leading to the actual malware attack.
To further analyze the social engineering code delivered
by the attack, and how the malware download is actually
triggered in practice,
the forensic analyst could then fo-
cus on the last step of the attack, namely the page un-
der pressupdateforsafesoft[.]download, and ask JSgraph to
perform forward tracking. The resulting graph is shown in
Figure 8 in Section IV. While we defer a detailed explanation
of the forward tracking graph to Section IV, from Figure 8 we
can notice that the JS code shows an alert popup, listens to
the user’s clicks (which is needed to begin the ﬁle download),
and schedules callbacks, which we found are used to display
the installation instructions shown in Figure 1e.
3
Fig. 3: JSgraph audit logs – Excerpt 1 (simpliﬁed)
Fig. 4: JSgraph audit logs – Excerpt 2 (simpliﬁed)
C. Differences w.r.t. Previous Work
We now discuss how the same attack described in Sec-
tion I-B could be analyzed using previous work, and compare
these alternative approaches to JSgraph. We should ﬁrst re-
member that one of our main requirements is that we need
to be able to record the “real” attack, as it happens on the
user’s system. The reasons for this requirement are multiple: (i)
Web attacks are often ephemeral, and visiting the attack URLs
at a later time (e.g., using high-interaction honeypots) would
likely produce different or no results [19]. (ii) The attack code
is often environment-sensitive, and may behave differently
on other machines, compared to what
the victim actually
experienced. (iii) As we are interested in social engineering
attacks, user actions are critical to “activate” the attack [39];
however, user actions are often difﬁcult to reproduce exactly,
unless a highly detailed recording of user-browser interactions
is performed at
the time of the attack. (iv) Some social
engineering attacks (e.g., malware attacks) are delivered via
malicious advertisement; because ad-serving networks may
introduce a high level of non-determinism (e.g., due to the
ad bidding process typical of online ad networks), it may be
difﬁcult to reproduce the exact same attack multiple times.
Keeping the real-time recording requirement in mind, there
exist a few alternative approaches that may enable the analysis
of in-the-wild web attacks that affect real users. One possible
way would be to record, and later statically analyze, all the
HTML and JavaScript content loaded by the browser during a
time window that includes the attack. This could be done by
recording all network trafﬁc traces, or by using a lightweight
system such as ChromePic [43]. However, understanding how
the browser loaded, parsed,
interpreted, and rendered the
web content from network traces is notoriously hard [38].
Also, while ChromePic can efﬁciently record screenshots and
DOM snapshots from inside the browser, it does so only at
signiﬁcant user interactions (e.g., at every mouse click, key
press, etc.). This limits the visibility on DOM changes and
JavaScript behavior that occurred in between such interactions.
In addition, in these scenarios code analysis presents several
challenges, since the code may need to be re-executed at a later
time on a separate system, to try to ﬁll the gaps, thus suffering
from limitations similar to the ones faced by honey-clients.
example
Concretely,
in Figure 2,
ChromePic would not be able to track and reconstruct ﬁne-
grained details about
the JS code that enables the social
referring to the
Fig. 2: Malware attack analysis using JSgraph: backtracking graph.
4
mainhxxps://www.google.com/?gws_rd=sslLogic Order: 0USER NAVhxxps://gomovies.to/film/the-wolf-of-wall-street-2777/watching.htmlLogic Order: 1423USER NAVScript_362hxxps://onclkds.com/apu.php?zoneid=1131575Logic Order: 1719PARENT-CHILDiframe_25269023519680about:blankLogic Order: 2821PARENT-CHILDEvent_Callback:mousedownPosition: (606,386)Logic Order: 2818DEFINITIONP0(0,22212)REGISTERCreate and Insert iframeLogic Order: 2820EXECUTECreate and Insert Script NodeLogic Order: 2822EXECUTECREATEScript_622Logic Order: 2823PARENT-CHILDCREATEwindow.open:URL: hxxps://onclkds.com/?auction_id=9a51fc8f-2e6d-4125-b3...Logic Order: 2824EXECUTEhxxps://onclkds.com/?auction_id=9a51fc8f-2e6d-4125-b38f-6a4d05e81a05&zoneid=11...Logic Order: 2829JS NAVScript_623InlineLogic Order: 2925PARENT-CHILDSet LocationURL: hxxp://adexc.net/network/?ref_prm=7046&cid=3042956674...Logic Order: 2926EXECUTEhxxp://adexc.net/network/?ref_prm=7046&cid=304295667414&pub_sd=1131575&adprm=&...Logic Order: 2927JS NAVhxxp://upnow2app.pressupdateforsafesoft.download./Ea5j7QwuOrbRLJRiPc_lcut6oqo3...Logic Order: 2928REDIRECThxxp://update4soft.pressbuttonforupdate.bid/dl.php?pcl=Ea5j7QwuOrbRLJRiPc_lcut...Logic Order: 2958USER NAVInspectorForensicsAgent::handleRecordXHRDataOpenForensics: OPENED: 1InspectorForensicsAgent::handleRecordXHRDataReadyStateForensics: ReadyState: 1InspectorForensicsAgent::handleRecordXHRDataReadyStateForensics: ReadyState: 1ForensicDataStore::recordAddEventListenerEvent : eventTarget: 68966990005520, listener: 25269018159104 InspectorForensicsAgent::willSendXMLHttpRequest : URL: https://www.google.com/search?sclient=psy-ab&biw=1215&bih=555&q=wolf+of+wall+street+full+movie&oq=wolf+street+of+wall+full&gs_l=hp.3.0.0i22i30k1l4.21523.30020.0.31402.24.22.0.0.0.0. ...InspectorForensicsAgent::handleRecordHistoryStateObjectAdded: frame: 25269014741568,  Url: /?gws_rd=ssl#q=wolf+of+wall+street+full+movie, Type: 0InspectorForensicsAgent::handleCreateChildFrameLoaderForensicsForensicDataStore::recordChildFrame : requestURL: about:blank, frame: 25269023519680InspectorForensicsAgent::handleCreateChildFrameLoaderEndForensicsForensicDataStore::recordInsertDOMNodeEvent: m_selfNode: 43987025453064, m_parentNode: 43987026382560, m_nodeSource: InspectorForensicsAgent::didModifyDOMAttr: m_selfNode: 43987025302224, m_nodeSource: ForensicDataStore::recordInsertDOMNodeEvent: m_selfNode: 43987026264856, m_parentNode: 43987025302224, m_nodeSource: window.top = null;window.frameElement = null;var newWin = window.open("https://onclkds.com/?auction_id=9a51fc8f-2e6d-4125- ... ", "new_popup_window_1494561683103", ""); window.parent.newWin_1494561683114 = newWin; window.parent = null; newWin.opener = null;InspectorForensicsAgent::handleCompileScriptForensics : Thread_id:140362442277824, Script_id:622, URL: , line: 0, column: 0, Source: window.top = null; window.frameElement = null; var newWin = window.open("https://onclkds.com/?auction_id=9a51fc8f-2e6d-4125-  ... ", "new_popup_window_1494561683103", "");window.parent.newWin_1494561683114 = newWin; window.parent = null; newWin.opener = null; InspectorForensicsAgent::handleRunCompiledScriptStartForensics : Thread_id:140362442277824, iframe: 25269023519680, Script_id: 622InspectorForensicsAgent::handleWindowOpenForensics : URL: https://onclkds.com/?auction_id=9a51fc8f-2e6d-4125-…, frameName: new_popup_window_1494561683103, windowFeaturesString: engineering attack. For instance, ChromePic would not be able
to log any detailed information about how Script 362 injects
an iframe into the page, about the existence of Script 622
(which is dynamically generated) and how it opens a new
window, and how Script 623 redirects the browser towards
the malware download URL.
Another possible approach is to use record and replay
(R&R) systems. However, VM-level R&R systems [12], [11]
tend to be very inefﬁcient, preventing them from being de-
ployed on mobile devices, for example. On the other hand, OS-
level R&R systems [36], [10] are more efﬁcient, though they
are not easily portable to different devices. Unfortunately, both
these types of systems leave a large semantic gap that makes
analyzing web attacks difﬁcult. In fact, while they can re-run
browsing sessions, they cannot interpret what is happening in-
side the browser, such as interpreting the interactions between
the JS engine (e.g., V8) and the rendering engine (e.g., Blink)
that carried out the attack. Attaching a JS debugger inside the
browser (e.g., via DevTools) at replay time would alter the
browser execution, compared to the recorded traces, and thus
prevent a correct system-level replay to move forward.
Browser R&R systems such as TimeLapse [4] and We-
bCapsule [37] may come to help, in that they are able to
record ﬁne-grained details internal to the browser (rather then
“external”, as in system-level R&R systems), and thus ﬁll
the semantic gap that characterizes VM- and OS-level R&R
systems. Unfortunately, because they attempt to record and
replay all events at the rendering engine level (e.g., inside
WebKit or Blink), both these systems tend to have high time
and storage overhead and may fail to deterministically replay
the recorded browsing traces. For instance, in an attempt to
achieve deterministic replay, TimeLapse changes the rendering
engine to effectively prevent multi-threading, thus violating
the no functional interference requirement. On the other hand,
WebCapsule does not explicitly record JS-level events such
as scheduled actions, and is therefore incapable of performing
deterministic replay [37].
such
tools,
JavaScript-level R&R debugging
as
Mugshot
[35] and ReJS [44], offer direct visibility into
JS execution and JS-driven DOM changes, and could
therefore be used to perform a replay and step-by-step
analysis of JS attack code. However,
these systems were
not intended for always-on recording, and are not suitable
for analyzing adversarial JS code. For instance, Mugshot is
not transparent, in that it modiﬁes the JS environment, and
could be detected (and potentially also disabled) by the JS
attack code being recorded. On the other hand, ReJS forces
the rendering engine to run in single-threaded mode, thus
impacting the browser’s functionality and performance in a
way similar to TimeLapse.
Unlike the works mentioned above, JSgraph aims to be
an efﬁcient, always-on, record-only system that is capable
of producing highly detailed audit logs related to browsing
sessions, and that can assist in the investigation of in-the-wild
web attacks.
II. JSgraph SYSTEM
In this section, we explain how JSgraph works internally.
A. Overview
JSgraph consists of two components: (i) an efﬁcient, ﬁne-
grained audit logging engine, and (ii) a visualization module
(detailed in Section III) that can post-process the audit logs
to produce a higher-level description of navigation events, JS
code inclusion and execution, DOM modiﬁcations, etc.
To efﬁciently record internal browsing events, we
leverage
and extend Chrome’s DevTools. Speciﬁcally,
we implement a new InspectorAgent, extending the
InspectorInstrumentation APIs
to collect ﬁne-
grained information that is not otherwise gathered by existing
DevTools agents. This makes JSgraph highly portable. In fact,
because the vast majority of JSgraph’s code resides within
Chromium’s content module [6], it could be easily adapted
and integrated in other browsers that make use of Blink/V8 for
rendering and JS execution, such as Opera, Yandex, Amazon
Silk, etc.
B. Efﬁciently Recording Page Navigations
Reconstructing the sequence of pages visited by a
to understanding how modern web at-
user
is essential
tacks work. For
instance,
the social engineering attack
we described in Section I-B is delivered through multi-
ple pages/URLs. To efﬁciently record ﬁne-grained details
about how the browser navigates from one page to an-
other, we extend Chromium’s DevTools instrumentation hook
didStartProvisionalLoad, and register our JSgraph
inspector agent to listen to the related callbacks. Furthermore,
we instrument receivedMainResourceRedirect to ef-
ﬁciently record HTTP-based page redirections.
C. Logging iframe Loading Events
Unlike page navigations,
to record the loading of an
iframe whose content loads from a URL expressed in the
src parameter, we create a new instrumentation hook into
WebLocalFrameImpl:: createChildFrame. This al-
lows us to record a pointer to the iframe to be loaded
and the URL from which the content will be retrieved. As
the iframe’s web content is loaded asynchronously by the
browser,
this information allows us to correctly track all
DOM changes related to the iframe’s DOM, including the
compilation and execution of JS code and callbacks within the
iframe’s context.
D. Tracking DOM Changes
efﬁciency,
in recording DOM changes is to be
Our main goal
the state of
the DOM right before
able to reconstruct
thus allowing us to understand
each JS code execution,
the DOM to
how potentially malicious code modiﬁes
launch an attack. To improve
instead of
creating a full DOM snapshot every time a JS script or
callback function is executed, we incrementally record all
DOM changes applied by Blink,
including all changes
requested by the HTML parser and the JS engine via
the Blink/V8 bindings. To achieve this, we leverage six
different DevTools instrumentations: didInsertDOMNode,
characterDataModified,
willRemoveDOMNode,
didModifyDOMAttr,
and
didInvalidateStyleAttr. Moreover,
to efﬁciently
store information about the node that was added/removed or
modiﬁed, we take advantage of Blink’s DOM serialization
functionalities2.
didRemoveDOMAttr,
We now provide more details about how we leverage the