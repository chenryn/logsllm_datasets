the 95ùë°‚Ñé percentile C root has 240 ms of latency inflation but
only 70 ms of geographic inflation. However, inflation for the root
DNS as a whole is not as bad as individual root letters as shown
by lines All Roots , which take into account that recursives can
preferentially query low latency root servers [60].
Our latency inflation metric shows C root is more inflated than
previously thought, inflating 35% of users by more than 100 ms com-
pared to 20% reported in prior work [51] (although the comparison
to prior work is not perfect since what was measure is different).
Other prior work found significant inflation in the roots, but it is
difficult to directly compare results since inflation was presented
in different ways [23, 69].
Clearly, routing to individual root letters often is inflated, with
many queries traveling thousands more kilometers than needed,
and being inflated by hundreds of milliseconds for some users.
4 ROOT DNS LATENCY AND INFLATION
HARDLY MATTER
With a richer understanding of inflation in the root DNS, one might
wonder why inflation in root letters is large given growing deploy-
ments and root DNS‚Äôs importance in the Internet. We now show
that root DNS inflation does not result in much user-visible latency.
4.1 Measuring Root DNS Latency Matters
The root DNS servers host records for TLDs (e.g., COM, ORG).
There are approximately one thousand TLDs, and nearly all of the
020406080100120140Geographic Inflation per Root Query (ms)0.00.10.20.30.40.50.60.70.80.91.0CDF of UsersB - 2A - 5M - 5C - 10E - 15D - 20K - 52J - 68F - 94L - 138All Roots0255075100125150175200Latency Inflation per Root Query (ms)0.00.10.20.30.40.50.60.70.80.91.0CDF of UsersB - 2A - 5M - 5C - 10E - 15K - 52J - 68F - 94All RootsSIGCOMM ‚Äô21, August 23‚Äì27, 2021, Virtual Event, USA
corresponding DNS records have a TTL of two days. Hence, due to
shared caches at local resolvers, one might think root DNS latency
trivially does not matter for users. Recent work even suggests the
root DNS can be done away with entirely [5] or largely replaced
by preemptive caching in recursives [48]. We offer several reasons
why we found it necessary to explicitly measure root DNS latency‚Äôs
impact on users, rather than use intuition.
First, there is a lot of attention being placed on the root DNS
in the professional and research communities. For example, some
experts have asked us in conversation why CDNs use anycast, when
anycast inflates latencies in the root DNS so much. The SIGCOMM
2018 paper ‚ÄúInternet Anycast: Performance, Problems, & Potential‚Äù
has drawn attention to the fact that anycast can inflate latency to
the root DNS by hundreds of milliseconds [51]. Blog posts from the
root letters discuss latency improvements and inflation reductions
[3, 14, 61, 79] ‚Äì why does latency matter to roots? Moreover, over
the past 5 years the number of root DNS sites has steadily increased
to more than double, from 516 to 1367. Why is there so much
investment in more sites?
Second, there is value in quantitatively analyzing systems, espe-
cially global systems that operate at scale, even if we can intuitively,
qualitatively reason about these systems without conducting anal-
ysis. We conduct analysis using data from eleven of thirteen root
letters, giving us a truly global view of how users interact with the
root DNS. We are aware of only one other study which looked at
how caching affects root DNS queries [44], but that study is old, is
limited to one recursive resolver, and does not place DNS queries
in the context of user experience.
Third, although TTLs of TLD records are two days, recursive
resolver implementations can be buggy. We noticed millions of
queries per day for TLD records being sent to the root letters by
some recursives (¬ß4.3), and found a bug in the popular BIND recur-
sive resolver software that causes unnecessary queries to the roots
(Appendix E). Hence, making arguments about root DNS latency
requires careful analysis.
4.2 How We Measure Root DNS
Measuring how root DNS latency affects users poses several chal-
lenges. To put root DNS latency into context we must understand
(1) how user-application performance is affected when applications
make root queries, (2) how often end-hosts and recursive resolvers
interact with root DNS, given their caches, (3) what the latency is
from the anycast deployment, and (4) how these effects vary by loca-
tion and root letter. These challenges both motivate our subsequent
analyses and also highlight the limitations of prior work which do
not capture these subtleties of root DNS latency [23, 51, 58, 69].
Therefore, precisely determining how root DNS latency affects
users would require global, OS-level control to select recursives
and view OS DNS caches; global application-level data to see when
DNS queries are made and how this latency affects application-
performance; global recursive data to see caches, root queries, and
their latencies; and global root traces to see how queries to the
roots are routed. As of July 2021, only Google might have this data,
and assembling it would be daunting.
To overcome these challenges we take two perspectives of root
DNS interactions: local (close to the user) and global (across more
than a billion users). Our local perspective precisely measures how
root DNS queries are amortized over users browsing sessions, while
our global analysis estimates the number of queries users worldwide
execute to the roots.
4.3 Root DNS Latency Hardly Matter
Local Perspective: To obtain a precise measure of how root DNS
queries are amortized over a small population, we use packet cap-
tures of a recursive resolver at ISI (¬ß2.1). We also measure from two
authors‚Äô computers to observe how an individual user interacts
with the root servers (with no shared cache), since ISI traces do
not give us context about user experience. Data from two users
is limited, which is a reflection of the challenges we identified in
Section 4.2. However, these experiments offer precise measures of
how these authors interact with root DNS (which no prior work has
investigated), supplementing the global-scale data used for most of
the paper.
Using traces gathered at ISI, we calculate the number of queries
to any root server as a fraction of user requests to the recursive
resolver. We call this metric the root cache miss rate, as it approx-
imates how often a TLD record is not found in the cache of the
recursive in the event of a user query. It is approximate because
the resolver may have sent multiple root requests per user query,
and some root requests may not be triggered by a user query. The
daily root cache miss rates of the resolver range from 0.1% to 2.5%
(not shown), with a median value of 0.5%. The overall cache miss
rate across 2018 was also 0.5%. The particular cache miss rate may
vary depending on user querying behavior and recursive resolver
software, but clearly the miss rate is small, due to shared caches.
Appendix D shows the minimal impact root DNS latency has on
users of ISI and a CDF of DNS latency experienced by users at ISI.
Since the measurements at ISI can only tell us how often root
DNS queries are generated, we next look at how root DNS latency
compares to end-user application latency. On two authors‚Äô work
computers (in separate locations), we direct all DNS traffic to local,
non-forwarding, caching recursive resolvers running BIND 9.16.5
and capture all DNS traffic between the user and the resolver, and
between the resolver and the Internet.
We run the experiment for four weeks and observe a median
daily root cache miss rate of 1.5% ‚Äì similar to but larger than the
cache miss rate at ISI. The larger cache miss rate makes sense,
given the local users do not benefit from shared caches. We also
use browser plugins to measure median daily active browsing time
and median daily cumulative page load time, so we can place DNS
latency into perspective. Active browsing time is defined as the
amount of time a user spends interacting with the page (with a 30
second timeout), whereas page load time is defined as the time until
the window.onLoad event. Median daily root DNS latency is 1.6%
of median daily page load time and 0.05% of median daily active
browsing time, meaning that root DNS latency is barely perceptible
to these users when loading web pages, even without shared caches.
In general, we overestimate the impact of DNS and root DNS latency
since DNS queries can occur as a result of any application running
on the authors‚Äô machines (not just browsing).
Global Perspective: Towards obtaining a global view of how
users interact with the root DNS, we next look at global querying
SIGCOMM ‚Äô21, August 23‚Äì27, 2021, Virtual Event, USA
The line labeled Ideal does not use DITL query volumes to
calculate daily user query counts, but instead represents a hypothet-
ical scenario in which each recursive queries for all TLD records
exactly once per TTL, and amortizes these queries uniformly over
their respective user populations (we use Microsoft user counts for
Ideal ). The resulting hypothetical median daily query count of
0.007 could represent a future in which caching works at recursives
optimally ‚Äì not querying the roots when not necessary. Ideal
also demonstrates the degree to which the assumption that recur-
sives only query once per TTL underestimates the latency users
experience due to the root DNS (¬ß4.2) ‚Äì the assumption is orders of
magnitude off from reality.
We have shown root DNS latency, and therefore inflated routes
to the roots, makes no difference to most users. This result raises
the question ‚Äì are paths to the roots inflated because anycast intrin-
sically results in inflation? Or rather, does latency not mattering in
this setting lead to anycast deployments that are not optimized for
latency and hence tend to have inflated routes? To answer these
questions, we turn to a new system using anycast to serve latency-
sensitive content ‚Äì Microsoft‚Äôs CDN.
5 LATENCY MATTERS FOR MICROSOFT‚ÄôS
CDN
We demonstrate that latency (and hence inflation) does matter for
Microsoft users when fetching web content, unlike for most users
in the root DNS, principally due to the number of RTTs users incur
when fetching web content.
5.1 RTTs in a Page Load
To estimate the latency a user experiences when interacting with
Microsoft‚Äôs CDN (¬ß5.2), we first estimate the number of RTTs re-
quired to load a typical web page hosted by Microsoft‚Äôs CDN.
The number of RTTs in a page load depends on a variety of
factors, so we aim to lower bound the number. We lower bound the
number of RTTs since a lower bound is a conservative measure of
the impact of CDN inflation, as the latency inflation accumulates
with each additional RTT, and larger pages (more RTTs) would
be impacted more. We provide an estimate of this lower bound
based on modeling and evaluation of a set of web pages hosted by
Microsoft‚Äôs CDN using Selenium (a headless web browser), finding
that 10 RTTs is a reasonable estimate. Due to length restrictions,
we include the full details of our measurements and methodology
in Appendix C.
5.2 Microsoft‚Äôs CDN User Latency
We now measure how users are impacted by latency of Microsoft‚Äôs
CDN. First, using measurements from RIPE Atlas probes, we demon-
strate that CDN latency results in significant delay to users when
fetching web content. Then, using both client-side measurements
and server-side logs, we also show that latency usually decreases
with more sites. Consequently, Microsoft has a major incentive to
limit inflation experienced by users, and investments in more any-
cast sites positively affect user experience much more in the case
of Microsoft‚Äôs CDN than in the roots. The positive effect on user
experience has been a major reason for recent expansion (¬ß7.3).
Figure 3: A CDF of the number of queries each user executes to the
roots per day. The CDN and APNIC lines represent different user-
count datasets. The Ideal line presents an idealized assumption
about recursive query behavior. Most users wait for less than one
query to the roots per day, regardless of which user data we use.
behavior of recursives. As discussed in Section 4.2, it is difficult to
model caching at resolvers and how caching saves users latency,
since caching hides user query patterns (by design) and differs with
recursive implementation. To overcome this challenge, we use a new
methodology that amortizes queries over large user populations,
by joining DNS query patterns with user data.
Given query volumes towards root servers from recursives and
user counts using each recursive from the DITL captures (¬ß2.1),
we estimate the number of queries to the roots that users wait for
per day. Figure 3 is a CDF of the expected number of queries per
user per day, where lines CDN and APNIC use a different user-
count dataset (¬ß2.1), and line Ideal uses hypothetical assumptions
which we describe below. Figure 3 demonstrates that most users
wait for no more than one query to the roots per day, regardless of
which user data we use.
To generate each line in Figure 3, we divide (i.e., amortize) the
number of queries to the root servers made by each recursive by the
number of users that recursive represents. We weight this quotient
(i.e., daily queries per user) by user count and calculate the resulting
CDF. We calculate the number of queries per day each recursive
makes from DITL by first calculating daily query rates at each site
(i.e., total queries divided by total capture time) and subsequently
summing these rates across sites. We include nearly every root
query captured across the root servers, so Figure 3 provides a truly
global view of how users interact with the root DNS.
The two lines CDN and APNIC correspond to amortizing DITL
queries over Microsoft and APNIC user counts, respectively. Hence,
the set of ‚Äòusers‚Äô each line represents is technically different, but we
place them on the same graph for comparison. Even though the two
methodologies of estimating user counts behind root queries are
very different ( CDN uses an internal measurement system, while
APNIC uses Internet population estimates by country), amortizing
queries over these sets of users still yields the same high level
conclusions about how users interact with the root DNS, suggesting
that our methodology and conclusions are sound ‚Äì users rarely
interact with the root DNS executing about one query per day at
the median. Users in the tail are likely either spammers, have buggy
recursive software, or represent recursives with more users than
DITL‚à©CDN suggests (e.g., cellular networks). APNIC user estimates
are not affected by NATs, and APNIC has a smaller tail.
10‚àí310‚àí210‚àí1100101102103Queries per User per Day0.00.20.40.60.81.0CDF of UsersIdealCDNAPNICSIGCOMM ‚Äô21, August 23‚Äì27, 2021, Virtual Event, USA
(a)
(b)
Figure 4: RTTs and latencies per web page load from RIPE probes to
CDN rings (4a), and change in median latency for Microsoft users
in ‚ü®region, AS‚ü© locations when transitioning rings (4b). Axes with
per-RTT latencies are blue, while axes with per-page-load latencies
are red. Latencies per page load can be significant, so Microsoft has
an incentive to reduce inflation.
Microsoft‚Äôs CDN has groups of sites called rings (¬ß2.2). Each
larger ring adds some sites to those of the smaller ring. Each ring
provides an IP anycast CDN, so we report results for each of the
rings individually. Different ring sizes reflect some of the benefit of
additional anycast locations, but a user‚Äôs traffic usually ingresses
to Microsoft‚Äôs network at the same PoP regardless of ring, since
all routers announce all rings. Users experience latency from Mi-
crosoft‚Äôs as they retrieve web objects (e.g., web pages or supporting
data) hosted by Microsoft‚Äôs CDN. Hence, in order to assess how
Microsoft users experience latency, we must measure what the RTT
is from users to front-ends and how many RTTs are incurred when
fetching web content. We use our estimate from Section 5.1 that
users incur at least 10 RTTs in a page load. To obtain per-page-load
latency, we scale anycast latency by the number of RTTs.
In Figure 4a, we show latencies to rings. Figure 4a uses laten-
cies measured from RIPE Atlas probes (¬ß2.2), as we cannot share
absolute latencies from Microsoft measurements since Microsoft
considers this data proprietary. Although RIPE Atlas has limited
coverage [10], we compare (but cannot share) to CDN measure-