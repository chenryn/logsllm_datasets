2
)
2
))
Figure 2: Transitions of a two-component distributed system
SEP1
tr ∈ tr1 ||match tr2
¬ isCom1(actOf1(trn1))
(tr· sep1(trn1, endState(tr2))) ∈ (tr1 · trn1) ||match tr2
SEP2
tr ∈ tr1 ||match tr2
¬ isCom2(actOf2(trn2))
(tr· sep2(endState(tr1), trn2)) ∈ tr1 ||match (tr2 · trn2)
EMPTY
·
[] ∈ [] ||match []
COM
tr ∈ tr1 ||match tr2 match(trn1, trn2)
(tr· com(trn1, trn2)) ∈ (tr1 · trn1) ||match (tr2 · trn2)
Figure 3: The communicating shufﬂe operator for CoSMeDis
automatically), the API layer, and the outer layer (the last two
implemented manually).
The kernel consists of the I/O automaton extracted from
the Isabelle speciﬁcation to Scala code. In addition to regular
data (on users, posts and friendship), the kernel state also
contains identity checking data: passwords for users and keys
for client and server nodes. Moreover, the kernel actions take
passwords and/or keys as parameters—omitted in this paper to
enhance readability.
The API layer forwards requests back and forth between
the I/O automaton kernel and the outside world. It converts
the payload of http(s) requests into elements of Act, which
are passed to the automaton; the output retrieved from the
automaton is then converted into JSON output, which is
delivered as the API response. Special treatment is given to
data that cannot be reasonably stored in memory, namely, the
optional image ﬁles associated to posts. These are stored on the
disk, while the kernel state stores the paths to their locations.
They are all placed in a single directory, and the names of the
ﬁles are the (guaranteed to be nonoverlapping) post IDs. When
a user requests the read of a post image, the API layer invokes
the corresponding reading action from the kernel to retrieve the
path to that ﬁle—then the ﬁle is offered for download.
The outer layer handles the user interface and performs
session management. It directs user requests to the API layer
and displays the results back to the user or, if necessary,
makes remote API requests to other nodes (for communication
actions).
The main behavioral differences between CoSMeDis and
CoSMed are the following:
• A user action could produce not only local effects, but
possibly also a request to a different node. For example,
the single action (sendPost, uid2, nid1, pid) triggers a local
API call and a remote API call to nid1.
• Not only users, but other nodes can issue actions, too. For
(cid:6)
2, v) is an action
example, (receivePost, nid2, pid, pst, uid
issued by a remote node nid2.
Making sure that send and receive actions are correctly
matched is achieved by a transactional policy. E.g., when
Aut1’s admin issues a sendPost request indicating the target
node as Aut2, the following happens:
• The sendPost action is run locally, producing the new state
σ(cid:6)
1 and the output o1; but the new state is not yet committed.
• If sendPost was successful, a corresponding receivePost
request is made remotely to Aut2.
• If Aut2 responds with output outOK, the new state σ(cid:6)
committed at Aut1.
CoSMeDis is delivered as a bundle,
installable at any
location on the web to form a new node. The Scala code
for the CoSMeDis I/O automaton is signiﬁcantly larger than
that of CoSMed: 2700 compared to 1650 LOC. As expected,
the other parts of the application are also larger: 870 vs. 610
for the API layer and 900 vs. 720 for the outer layer.
1 is
Limited testing indicates that CoSMeDis performs well for
small numbers of users. For up to 100 users in the system, each
with 10 friends, 10 remote friends and 10 posts, the API could
serve about 2600 requests/second for reading and sending
actions and 1800 requests/second for writing and receiving
actions. However, a major obstacle in the way of an efﬁcient
version of CoSMeDis is the parallelism bottleneck: To allow
multi-threaded calls one currently needs to lock the whole
state object (the full I/O automaton state), whereas in database-
driven real-world applications one could lock single tables or
rows, enabling parallel access. To capture this parallel model,
733
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply. 
Isabelle’s code generator would require a signiﬁcant extension.
V. COMPOSING SECURITY FOR COSMEDIS
Each CoSMeDis node is an extension of CoSMed. Conse-
quently, when trying to prove conﬁdentiality for CoSMeDis,
we look into how to extend the CoSMed conﬁdentiality
properties to properties of a single node, and then into how
to compose node conﬁdentiality to obtain guarantees for the
entire system. As we shall see,
these two steps are not
independent, but we have to proceed in a feedback loop.
A. Security Models for the Components
Our running example, (P1), limits the amount of infor-
mation ﬂowing from the content of a given secret: a post
PID. In relation to this secret, we can distinguish two types of
components: the node where it originates, say, Aut1, and the
other nodes which are possible receivers of the post.
For the originator, it is intuitive that we should be able
to prove the same property (P1), regardless of the fact that
now the system is communicating on more channels. Indeed,
as far as Aut1’s users are concerned, the notions of secret and
observation are the same: the secrets are the updates to PID’s
content, while the observations are the actions and outputs of
a given set of Aut1 users, say, UIDs1. The communication
actions do not interfere with this local security model: it is
irrelevant for the observation power of an Aut1 user if the
post is being sent to another node. Therefore, the proofs done
for the original CoSMed work without essential modiﬁcations
for the communication-updated version—with the same trigger
and the same bound. In summary, we can easily (re)prove:
(P1) A group of users UIDs1 of Aut1 can learn nothing about
the updates to the content of Aut1’s post PID beyond the
existence of an update unless one of them is the admin or
PID’s owner, or becomes friends with the owner, or PID is
marked as public.
Now, consider a node Aut2 that may potentially receive the
content of the post PID from Aut1. We can also prove a version
of (P1) for the receiving end with a (possibly overlapping) set
of observers UIDs2, mutatis mutandis:
(P2) A group of users UIDs2 of Aut2 can learn nothing about
the updates to the content of Aut1’s post PID beyond the
existence of an update unless PID is being shared between
Aut1 and Aut2 and [one of the users is the admin or becomes
a remote friend of PID’s owner, or PID is marked as public].
Formally, (P1) and (P2) are instances of BD Security,
speciﬁed by the attacker models and security policies shown
in Fig. 4, where NID1 and NID2 are the IDs of Aut1 and
Aut2. The formalization of (P1) is essentially the one sketched
in Section III. In particular, the secrets are the updates to
PID’s content as produced by updatePost actions, and the
trigger refers to one of the users in UIDs1 being the admin,
or PID’s owner, or a friend. For (P2), the secrets are also
updates to PID’s content, but they are produced differently:
by receivePost actions having Aut1 as sender. Any update of
PID’s content is received along with the owner’s ID uid and
with any possible update v of the visibility status, which is
recorded as the “remote visibility” stored for (NID1, PID). The
trigger ﬁrst requires that PID has been shared, which is stored
in Aut2’s state as a remote post ID coming from Aut1; then it
makes requirements similar to (P1)’s trigger, but referring to
remote versions friendship and visibility. We write S1 and O1
instead of SisSec1
, and similarly for S2 and O2.
getSec1
and OisObs1
getObs1
B. The Compositionality Challenge
Let us analyze how two properties, such as (P1) and (P2),
can be composed into a property for Aut = Aut1 ×match Aut2.
The compound attacker model should be a form of
communication-aware “sum,” or “union,” of those for (P1) and
(P2). Since the Aut-traces are obtained by the communicating
shufﬂe of Aut1- and Aut2-traces, the observations produced by
Aut are themselves shufﬂings of those of the components. So
it is natural to take Obs, the compound observation domain,
to be Obs1 + Obs2 + Obs1 × Obs2—meaning, as usual, that an
element of Obs will have either the form (1, o1) or (2, o2) or
(o1, o2), where oi ∈ Obsi. For an Aut-transition trn, we deﬁne
isObs(trn) and getObs(trn) as follows. isObs(trn) is true iff:
• trn has the form sep1(trn1, σ2) and isObs1(trn1) holds, in
which case we deﬁne getObs(trn) = (1, getObs1(trn1)),
• or trn has the form sep2(σ1, trn2) and isObs2(trn2) holds,
in which case we deﬁne getObs(trn) = (2, getObs2(trn2)),
• or trn has the form com(trn1, trn2) and isObs1(trn1) or
isObs2(trn2) hold, in which case we deﬁne getObs(trn) =
(getObs1(trn1), getObs2(trn2)).
Similar constructions are performed for secrets. The com-
pound domain, Sec, is taken to be Sec1 + Sec2 + Sec1 × Sec2,
and isSec and getSec are deﬁned correspondingly. This con-
cludes the attacker model deﬁnition—we again write S and O
instead of SgetSec
isSec
and OgetObs
isObs .
2 → Pow(Obs
∗
Before moving to the deﬁnition of the compound security
policy,
let us ﬁrst contemplate some existing or missing
symmetries in the matching of observations and secrets of the
two components. The notion of matching transitions induces
a notion of matching observations. In fact, the latter can be
regarded as a stand-alone predicate matchO : Obs1 × Obs2 →
Bool. For our case study, it is deﬁned in the same way as
match—since match does not actually depend on the states,
but only on the action-output pairs, which also make up
the observations. The corresponding communicating shufﬂe
1× Obs
for observations, ||matchO : Obs
∗
∗) (where
Pow is the powerset operator),
is obtained from matchO
similarly to how ||match is obtained from match.
When trying to deﬁne a similar notion of matching for se-
crets, matchS : Sec1×Sec2 → Bool, we encounter an anomaly:
There are secrets on the receiving end (where (P2) holds),
produced by receivePost actions, that are not matched at the
sending end (where (P1) holds). Indeed, (P1)’s only secret-
producing actions are updatePost actions, which are non-
communicating. The anomaly is easy to repair by amending
(P1)’s attacker model to factor in sendPost actions as well:
Amendment 1. (P1)’s secrecy infrastructure (from Fig. 4) is
extended as highlighted below:
• Sec1 = upd Post + snd Post. We use this notation to mean
that secrets are now post contents annotated with the labels
upd or snd, in order to distinguish between posts produced
734
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply. 
Attacker
Model
Security
Policy
1
1
) iff o1 = outOK ∧
(P1)
Sec1 = Post
isSec1(σ1, a1, o1, σ(cid:6)
∃uid, pst. a1 = (updatePost, uid, PID, pst)
getSec1(σ1, a1, o1, σ(cid:6)
Obs1 = Act× Out
isObs1(σ1, a1, o1, σ(cid:6)
getObs1(σ1, a1, o1, σ(cid:6)
(cid:6)) iff sl = [] → sl
B1(sl, sl
T1 (σ1, a1, o1, σ(cid:6)
admin(σ(cid:6)) ∈ UIDs1 ∨ owner(σ(cid:6)
UIDs1 ∩ friendIDs(σ(cid:6)
, owner(σ(cid:6)
1
vis(σ(cid:6)
, PID) = public
) = pst
) iff userOf(a1) ∈ UIDs1
) = (a1, o1)
(cid:6) = []
) iff
1
1
1
1
1
1
, PID) ∈ UIDs1 ∨
, PID)) (cid:10)= /0 ∨
2
2
) iff o2 = outOK ∧
(P2)
Sec2 = Post
isSec2(σ2, a2, o2, σ(cid:6)
∃pst, uid, v. a2 = (receivePost, NID1, PID, pst, uid, v)
getSec2(σ2, a2, o2, σ(cid:6)
Obs2 = Act× Out
isObs2(σ2, a2, o2, σ(cid:6)
getObs2(σ2, a2, o2, σ(cid:6)
(cid:6)) iff sl = [] → sl
B2(sl, sl
T2 (σ2, a2, o2, σ(cid:6)
(admin(σ(cid:6)) ∈ UIDs2 ∨
UIDs2 ∩ remoteFriendIDs(σ(cid:6)
remoteOwner(σ(cid:6)
remoteVis(σ(cid:6)
) = pst
) iff userOf(a2) ∈ UIDs2
) = (a2, o2)
(cid:6) = []
, NID1,
, NID1, PID)) (cid:10)= /0 ∨
, NID1, PID) = public)
) iff PID ∈ remotePostIDs(σ(cid:6)
2
2
2
2
2
2
2
, NID1) ∧
Figure 4: Attacker model and security policy for (P1) and (P2)
by an update action, (upd, pst), and posts produced by a
sending action, (snd, pst).
• isSec1 (σ, a, o, σ(cid:6)) iff
o = outOK ∧ (∃uid, pst. a = (updatePost, uid, PID, pst)) ∨
∃uid, nid, pst, uid
(cid:6), v. o = (PID, pst, uid
(cid:6), v) ∧
a = (sendPost, uid, nid, PID)
• getSec1 now extracts the content pst from both update
actions and outputs for send actions:
getSec1(_, (updatePost, _, _, pst), _, _) = (upd, pst)
getSec1(_, (sendPost, _, _), (_, pst, _, _), _) = (snd, pst)
While restoring symmetry w.r.t. communication,
this
amendment creates disturbance in (P1)’s security policy,
namely, in its bound: It is no longer the case that the observers
can learn nothing about a sequence of produced secrets beyond
possible emptiness. Now, it is also known that the contents of
updatePost and sendPost are correlated: What is being sent
coincides with what was last updated. For example, (unless
the trigger ﬁres) from the sequence (cid:7)(upd, pst1), (upd, pst2),
(snd, pst3), (upd, pst4), (snd, pst5)(cid:8), the observers would not
know the values psti, but would know that pst2 = pst3 and