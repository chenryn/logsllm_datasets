title:Resilient Routing Layers for Recovery in Packet Networks
author:Audun Fosselie Hansen and
Amund Kvalbein and
Tarik Cicic and
Stein Gjessing and
Olav Lysne
Resilient Routing Layers for Recovery in Packet Networks
Audun Fosselie Hansen1,2
Tarik ˇCiˇci´c1
Stein Gjessing1
Amund Kvalbein1
Olav Lysne1
1 Networks and Distributed Systems Group
Simula Research Laboratory
{audunh, amundk, tarikc, steing, olavly}@simula.no
Fornebu, Norway
2Telenor R&D, Fornebu, Norway
Abstract
Most existing methods for network recovery are often
complex and seldom used by network administrators. In this
paper we present a novel approach for global and local re-
covery named Resilient Routing Layers (RRL). The method
is supported by algorithms, but also simple enough for a
network administrator to implement by hand for reasonably
sized networks. The idea in our approach is that for each
node in the network there is a topology subset called a “safe
layer”, which can handle any trafﬁc affected by a fault in
the node itself, or any of its links.
We demonstrate that our approach performs well com-
pared to other comparable methods in a wide range of dif-
ferent network topologies. Particularly, we demonstrate
RRLs performance for what are assumed to be the weakest
parameters for our method, i.e., backup-path lengths and
state information overhead. We discuss implementation is-
sues of RRL, and demonstrate its applicability to MPLS net-
works.
1 Introduction
Network resilience is an area of growing importance in
communication systems research and engineering. Recent
history of the Internet shows its vulnerability on all levels,
from physical sabotage to failing links and routers. Numer-
ous techniques have been developed to prevent, repair and
repel the damage, and among these, network recovery tech-
niques have received signiﬁcant attention.
There is, however, a discrepancy between the network
recovery in theory and practice. While the theoretical re-
search has devised schemes of high elegance and perform-
ance like p-cycles [8] and redundant trees [15], many net-
work engineers still use static, manually-laid protection
paths. The problem is that existing sophisticated algorithms
often suffer from high complexity and lack of clear control
and management view for the network operators.
The need for simplicity of deployment has also been sup-
ported empirically. Through extensive network monitoring,
Labovitz and others demonstrated that most communication
outages in IP networks stemmed from software/hardware
bugs and misconﬁguration in routers [13], [12]. Complic-
ated deployment are obvious sources of misconﬁguration,
thus recovery methods should not add signiﬁcant complex-
ity to the overall system. These observations have attained
great impact on the design of our recovery approach.
We use recovery as a common term for protection and
restoration. Protection schemes calculate the backup routes
in advance, while restoration schemes calculate the backup
routes upon detection of failures. Thus, protection operates
in a much shorter time-scale than restoration.
Recovery schemes can also be categorized by the scope
of the recovery. Global recovery covers link and node fail-
ures by calculating a new end-to-end path, while with local
recovery faults are handled locally by the neighbors. Point
of repair, i.e., the node initiating protection switching or res-
toration, is the ingress node of a path for global recovery
and the neighbor node detecting the fault for local recovery.
For global recovery, the recovery action is not performed
before the ingress node has been notiﬁed about the failure,
and hence global recovery operates on a longer time-scale
than local recovery.
The success of a recovery action depends not only on the
properties of the recovery scheme in use. If the failure of
a node or link physically disconnects the network, trafﬁc
routed over such a node or link can not be recovered. Such
nodes and links are termed articulation points.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:11 UTC from IEEE Xplore.  Restrictions apply. 
In this paper we propose a technique we call “Resilient
Routing Layers” (RRL). RRL differs from other recovery
schemes by that it is designed with the systems engineering
mindset. In other words, it is simple to understand and de-
ploy, and it is made to be used by the network engineers in
practice. One main feature of RRL, as will be thoroughly
described later, is that it provides a network manager with
simple global abstractions of the network that form a basis
for routing trafﬁc in failure situations. The simple global ab-
stractions is what we refer to as routing layers. RRL offers
ﬂexibility in that the abstractions can be built differently to
optimize different parameters, such as backup path lengths,
state amount, and multiple fault protection.
The rest of the paper is organized as follows: In Sec. 2
we give an overview of the most relevant related work. Sec.
3 deﬁnes RRL and discusses its features. In Sec. 4 we dis-
cuss the number of layers and backup path lengths and give
a general comparison with other schemes. Sec. 5 demon-
strates the applicability for MPLS networks and ﬁnally we
conclude and give some future research directions in Sec. 6.
2 Related work
From a graph-theoretical point of view, methods for fault
tolerance rely on a graph property described by Menger
(Menger’s theorem) [17]: a nontrivial graph G is k-
connected if and only if for each pair (u, v) of distinct ver-
tices there are at least k internally disjoint u− v paths in G.
A bi-connected graph will then provide each u, v pair with
two internally disjoint paths. In general a graph is said to be
k-connected with respect to vertices if removal of any k − 1
vertices leaves the graph connected. The same applies with
respect to edges. To guarantee one fault tolerance for every
vertex, a network must be at least biconnected with respect
to vertices.
These properties have served as foundation for most
work regarding recovery. One of the most studied ap-
proaches has been algorithms for ﬁnding disjoint paths
between sources and destinations in a network. Suurballe
presents an algorithm for ﬁnding k vertex-disjoint shortest
paths [25]. The algorithmic run-time is O(|V | 2 · log|V |),
where V is the number of vertices. Later on, other al-
gorithms have been proposed to minimize the complex-
ity. Some of them have assumed certain assumptions and
short-cuts like maximally disjoint paths instead of totally
disjoint paths, and edge-disjoint paths instead of vertex-
disjoint paths [30], [26], [14].
Recovery by end-to-end disjoint paths relies on notiﬁca-
tion about failures to the ingress nodes. To avoid such no-
tiﬁcation, a local variant could be implemented. Each node
should then initiate establishment of backup paths to cover
each possible failure in its neighbor links and nodes [19].
So, from each node, to each potential egress node a backup
path should be established for every possible failure in the
neighborhood. Such a strategy would provide a network
manager with a unsurmountable number of paths to over-
view. Figure 1 gives an example of how it would look for a
simple network with three nodes and three links.
Restoration serves as an alternative to such precalcula-
tions. One main parameter of optimization for restoration
schemes is the time used to calculate a new path upon detec-
tion of a failure. Afek and others propose using k+1 original
shortest paths to recover k edge failures [5]. MPLS label
stacking is used to implement this approach. No path calcu-
lation is needed after detection, only the decision on what
path to use remains. The authors demonstrate that the path
table sizes decrease, and that their method doesn’t add con-
siderable length to the backup paths compared to standard
methods. Otel presents an incremental Dijkstra algorithm
offering fast local backup path calculation for MPLS rerout-
ing [18]. The algorithm takes as input the existing outdated
shortest path three rooted at the local node. The algorithm
has a complexity close to O(|V |), while standard Dijkstra
has O(|V |2) complexity, where |V | is the number of nodes
in the network.
Network recovery management is difﬁcult if the only
offered view of the network is a collection of unstructured
backup paths. The literature provides however some altern-
atives for more structured recovery. Such schemes are based
on building a set of subtopologies of the network, serving
as a more intuitive abstraction of the recovery paths. These
schemes can serve as input to restoration and protection,
both global and local.
Itai and Rodeh generalize and structure the disjoint path
approach to spanning trees [11]. To overcome the failure
of less than k edges, they present a communication pro-
tocol which uses k spanning trees having the property that
for every vertex v, the k paths from v to the root are edge-
disjoint. In this way one common calculation provides the
network with disjoint paths between one source and several
destinations or between several sources and one destination.
They show how their algorithmic run-time is proportional
to the number of edges. Medard and others use the multi-
tree approach to generate both edge and vertex redundant
trees for arbitrary biconnected networks [15]. These trees,
named red and blue, are such that any node is connected
to the common root of the trees by at least one of the trees
in case of a vertex or edge failure. They prove that the al-
gorithmic complexity is O(|V |3). Xue and others optimize
this algorithm for generating trees based on QoS constraints
like cost and delay [31].
Grover and Stamatelakis introduce another concept
providing fault tolerance called protection cycles [8], [9].
Their goal is to provide circuit oriented mesh networks with
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:11 UTC from IEEE Xplore.  Restrictions apply. 
the fast recovery speed normally offered in rings. Sim-
ilar approaches using Hamiltonian cycles are presented in
[10] and [21]. Their method calculates one or more cycles
visiting all nodes in the network. The method is optim-
ized to cover link failures and also to minimize the over-
provisioning ratio on any link in the network. When a link
fails, the trafﬁc is locally switched to be routed according to
the cycle instead of the original shortest path. Following a
cycle, avoiding the a failure, will probably add considerable
path length compared to shortest path, however the authors
do not comment on that.
The three main categories of schemes presented above,
i.e., disjoint paths, redundant trees and protection cycles,
have ﬁrst been introduced for recovery in circuit switched
networks. As technologies for connection-oriented packet
switched networks have evolved they have also been adop-
ted for such networks. One such technology is Multipro-
tocol label switching (MPLS) that provides a ﬂexible frame-
work for trafﬁc engineering in general, where recovery is an
important part [20]. IETF is standardizing a framework and
ancillary protocols for MPLS recovery [22], [19]. IETF is
not detailing algorithms on how to ﬁnd backup resources,
only how to signal and represent them.
Algorithms for ﬁnding disjoint paths can be directly de-
ployed for giving input to the signaling mechanisms of
MPLS, while redundant trees and protection cycles need
some adjustments.
Barthos and Raman demonstrate the applicability of
Medards dual-tree approach [15] for MPLS recovery [3],
[4]. Their method differs from [15] in using the egress
node, i.e., destination, as root. In addition, they calculate
optimal primary paths, using the blue and red trees only for
recovery. So, in addition to a primary path for each pair of
ingress-egress nodes, they calculate red-blue trees for every
egress. The authors demonstrate that the approach requires
few labels and that the backup path lengths are not consid-
erable longer than for MPLS fast reroute.
Grover and Stamatelakis also adapt the concept of pro-
tection cycles to IP/MPLS networks [23], [24]. They op-
timize for link failures and oversubscription ratio.
In the following we will describe how RRL provides
a simple topology abstraction, i.e., routing layers, for the
network manager to administer the recovery of the net-
work. The work most closely related to our approach
is [27] which treats interconnection networks for computer
clusters. Here a layer-based approach is used to obtain
deadlock-free and fault-tolerant routing in irregular cluster
networks based on a routing strategy called Up*/Down*.
RRL is not hampered by deadlock-considerations necessary
in interconnection networks. It extends the concept of lay-
1
1
2
2
3
3
Figure 1. All-to-all backup paths in a 3-node
cycle.
ers, and shows its applicability to general packet networks
and routing strategies.
3 Resilient Routing Layers (RRL)
3.1 Overview of RRL
RRL is based on calculating redundant subsets of the net-
work topology that we call layers. Each layer contains all
nodes but only a subset of the links in the network. We say
that a node is safe in a layer if only one of its links is con-
tained in that layer. We will use the term safe layer for a
node to denote a layer in which the node is safe.
The layers are used as input to routing or path-ﬁnding
algorithms, calculating a routing table or path table for each
layer. We assume that for each layer an algorithm is used to
ﬁnd loop-free paths between all pairs of source and destin-
ation. Therefore all pairs of nodes can reach each other in
any layer.
We observe the following:
1. In a safe layer for a given node, this node will not ex-
perience transit trafﬁc.
2. If a node fails, any safe layer for that node keeps an in-
tact path between all pairs of sources and destinations
that are distinct from the node itself.
3. If a node fails, trafﬁc sourced by or destined for the
failed node will be lost under any circumstance.
In order to use RRL as a basis for a complete method for
recovery, we need to generate layers in such a way that all
nodes that are not articulation points are safe in at least one
layer. As we shall demonstrate later on, this can be achieved
with relatively few layers.
The concept above can be used both for global and local
recovery. In global recovery the packets that should have
traversed the failed node are made to use the node’s safe
layer from the source. In local recovery, the node upstream
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:11 UTC from IEEE Xplore.  Restrictions apply. 
of the failed node transfers the packet to the safe layer of
the failed node when the packets arrive.
RRL handles link-faults as follows. First, we deﬁne a
leaf link as the link connecting a safe node to the network.
A safe layer of a link can be deﬁned as the safe layer of its
downstream node n as long as n is not the ﬁnal destination
and its leaf link is not the failed link.
If the downstream node n is the ﬁnal destination and its
leaf link is the failed link, we have two options:
1. We use the safe layer of the detecting node (upstream
node) as long as its leaf link is not the failed link.
2. If so is, the safe layer of the upstream node is still the
safe layer of the link, but the upstream node deﬂects
the trafﬁc to another link. The safe layer of the detect-
ing node will route no trafﬁc through this node, and
hence the trafﬁc will not loop back to the failure.
Since link failures are handled using the safe layer of a
node, most of the following examples and evaluations will
focus on node failures.
3.1.1 An Example
1
1
6
6
4
4
5
5
3
3
8
8
2
2
7
7
a)
a)
1
1
6
6