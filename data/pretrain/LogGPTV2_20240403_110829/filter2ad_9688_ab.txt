      XEPATHOBJ::XEPATHOBJ(&v7, &v9);
      if ( v8 )  // *(PPATH *)((_DWORD *)&v7 + 2)
      {
        v4 = *(_BYTE *)(*(_DWORD *)(v9 + 0x38) + 0x3A);
        v11 = 0;
        RGNMEMOBJ::vCreate((RGNMEMOBJ *)&v10, (struct EPATHOBJ *)&v7, v4, 0);
        if ( v10 )
        {
          v5 = HmgInsertObject(v10, 0, 4);
          if ( !v5 )
            RGNOBJ::vDeleteRGNOBJ((RGNOBJ *)&v10);
        }
        else
        {
          v5 = 0;
        }
        ...
      }
清单 2-1 函数 NtGdiPathToRegion 中调用 RGNMEMOBJ::vCreate 函数
在函数中位于栈上的用户对象 `XEPATHOBJ v7` 的地址被作为第 2 个参数传递给 `RGNMEMOBJ::vCreate`
函数调用。`XEPATHOBJ v7` 在其自身的带参构造函数 `XEPATHOBJ::XEPATHOBJ` 中依据用户对象 `DCOBJ v9`
进行初始化，而稍早时 `DCOBJ v9` 在 `DCOBJ::DCOBJ` 构造函数中依据 `NtGdiPathToRegion` 函数的唯一参数
`HDC a1` 句柄进行初始化。
* * *
**构造函数**
构造函数 `XEPATHOBJ::XEPATHOBJ` 接受 `XDCOBJ *a2` 作为参数。函数中对成员域 `cCurves` 也进行了赋值：
      EPATHOBJ::EPATHOBJ(this);
      ...
      v3 = HmgShareLock(*(_DWORD *)(*(_DWORD *)a2 + 0x6C), 7);
      *((_DWORD *)this + 2) = v3;
      if ( v3 )
      {
        *((_DWORD *)this + 1) = *(_DWORD *)(v3 + 0x44); // count
        *((_DWORD *)this + 0) = *(_DWORD *)(v3 + 0x40);
      }
清单 2-2 对成员 cCurves 进行赋值
构造函数中通过调用 `HmgShareLock` 函数并传入 `HPATH` 句柄和 `PATH_TYPE` (`7`) 类型对句柄指向的 `PATH`
对象增加共享计数并返回对象指针，返回的指针被存储在 `this` 的第 3 个成员变量中（即父类 `EPATHOBJ` 中的 `PPATH ppath`
成员），以使当前 `XEPATHOBJ` 对象成为目标 `PATH` 对象的用户对象。传入 `HmgShareLock` 函数调用的参数 1
句柄来源于构造函数的参数 `XDCOBJ *a2`。`XDCOBJ` 类中第 1 个成员变量 `PDC pdc` 是指向当前 `XDCOBJ`
用户对象所代表的设备上下文 `DC` 对象的指针。此处获取 `a2` 对象的成员变量 `pdc` 指向 `DC` 对象中存储的 `HPATH` 句柄，作为
`HmgShareLock` 函数调用的句柄参数。
位于 `PATH+0x44` 字节偏移的也是一个名为 `ULONG cCurves` 的域，该域的值赋值给 `this` 的第 2 个成员变量（即
`cCurves` 成员变量）。
构造函数 `DCOBJ::DCOBJ` 的执行就相对简单的多，其中仅根据句柄参数 `HDC a2` 获取该句柄指向的设备上下文 `DC` 对象指针并存储在
`this` 的第 1 个成员变量中（即 `PDC pdc` 成员），以使当前 `DCOBJ` 对象成为目标 `DC` 对象的用户对象。
据此可推断，漏洞关键位置 `ExAllocatePoolWithTag` 的内存分配大小参数可以通过参数 `HDC a1` 句柄作为接口进行控制。
* * *
**调用路径**
在用户态进程中，通过 `gdi32.dll` 中的 `HRGN PathToRegion(HDC hdc)` 函数可直接调用
`NtGdiPathToRegion` 系统调用。通过 `gdi32!PathToRegion` 调用将会实现如下的调用路径：
图 2-2 从 PathToRegion 到 ExAllocatePoolWithTag 调用路径
#### 0x3 触发
接下来要想办法使上述调用路径能够使漏洞关键位置成功达成漏洞触发条件，即满足 `ExAllocatePoolWithTag` 分配缓冲区大小的整数溢出条件，使
`ExAllocatePoolWithTag` 最终分配远小于应该分配大小的缓冲区。
* * *
**PolylineTo**
`gdi32.dll` 模块中存在 `PolylineTo` 导出函数，用于向 `HDC hdc` 句柄指向的 `DC`
对象中绘制一条或多条直线。该函数最终将直接调用 `NtGdiPolyPolyDraw` 系统调用：
    BOOL __stdcall PolylineTo(HDC hdc, const POINT *apt, DWORD cpt)
    {
      int v4; // eax@4
      int v5; // edi@4
      int v6; // edi@9
      if ( ((unsigned int)hdc & 0x7F0000) != 0x10000 )
      {
        if ( ((unsigned int)hdc & 0x7F0000) == 0x660000 )
          return 0;
        v4 = pldcGet(hdc);
        v5 = v4;
        if ( !v4 )
        {
          GdiSetLastError(6);
          return 0;
        }
        if ( *(_DWORD *)(v4 + 8) == 2 && !MF_Poly((int)hdc, (struct _POINTL *)apt, cpt, 6u) )
          return 0;
        if ( *(_BYTE *)(v5 + 4) & 0x20 )
          vSAPCallback(v5);
        v6 = *(_DWORD *)(v5 + 4);
        if ( v6 & 0x10000 )
          return 0;
        if ( v6 & 0x100 )
          StartPage(hdc);
      }
      return NtGdiPolyPolyDraw(hdc, apt, &cpt, 1, 4);
    }
清单 3-1 函数 PolylineTo 代码
函数 `NtGdiPolyPolyDraw` 用于绘制一个或多个多边形、折线，也可以绘制由一条或多条直线段、贝塞尔曲线段组成的折线等；其第 4 个参数
`ccpt` 用于在绘制一系列的多边形或折线时指定多边形或折线的个数，如果绘制的是线条（不管是直线还是贝塞尔曲线）该值都需要设置为 `1`；第 5 个参数
`iFunc` 用于指定绘制图形类型，设置为 `4` 表示绘制直线。
函数 `NtGdiPolyPolyDraw` 中规定调用时的线条总数目（包括绘制多个多边形或折线时每个图形的边的总数总计）不能大于 `0x4E2000`
数值，否则将直接返回调用失败：
      cpt = 0;
      for ( i = 0; i  0x4E2000 )
        goto LABEL_56;
清单 3-2 函数 NtGdiPolyPolyDraw 规定线条总数目限制
根据第 5 个参数的值将进入不同的绘制例程：
      switch ( iFunc )
      {
        case 1:
          ulRet = GrePolyPolygon(hdc, pptTmp, pulCounts, ccpt, cpt);
          break;
        case 2:
          ulRet = GrePolyPolyline(hdc, pptTmp, pulCounts, ccpt, cpt);
          break;
        case 3:
          ulRet = GrePolyBezier(hdc, pptTmp, ulCount);
          break;
        case 4:
          ulRet = GrePolylineTo(hdc, pptTmp, ulCount);
          break;
        case 5:
          ulRet = GrePolyBezierTo(hdc, pptTmp, ulCount);
          break;
        default:
          if ( iFunc != 6 )
          {
            v18 = 0;
            goto LABEL_47;
          }
          ulRet = GreCreatePolyPolygonRgnInternal(pptTmp, pulCounts, ccpt, hdc, cpt);
          break;
      }
清单 3-3 函数 NtGdiPolyPolyDraw 根据第 5 个参数的值调用绘制例程
在 `PolylineTo` 函数中调用时由于这两个参数被分别指定为 `1` 和 `4` 数值，那么在 `NtGdiPolyPolyDraw`
中将会进入调用 `GrePolylineTo` 函数的分支。传入 `GrePolylineTo` 函数调用的第 3 个参数 `ulCount`
是稍早时赋值的本次需要绘制线条的数目，数值来源于从 `PolylineTo` 函数传入的 `cpt` 变量（见清单 3-1 所示）。
关键在于 `GrePolylineTo` 函数中，该函数首先根据 `HDC a1` 参数初始化 `DCOBJ v12`
用户对象，此处与上一章节中的初始化逻辑相同；接下来定义了 `PATHSTACKOBJ v13` 用户对象。`PATHSTACKOBJ` 是
`EPATHOBJ` 用户对象类的子类，具体定义在开始章节中有相关介绍。函数中调用 `PATHSTACKOBJ::PATHSTACKOBJ` 构造函数对
`v13` 对象进行初始化，并在初始化成功后调用成员函数 `EPATHOBJ::bPolyLineTo` 执行绘制操作。
        EXFORMOBJ::vQuickInit((EXFORMOBJ *)&v11, (struct XDCOBJ *)&v12, 0x204u);
        v8 = 1;
        PATHSTACKOBJ::PATHSTACKOBJ(&v13, (struct XDCOBJ *)&v12, 1);
        if ( !v14 )
        {
          EngSetLastError(8);
    LABEL_12:
          PATHSTACKOBJ::~PATHSTACKOBJ((PATHSTACKOBJ *)&v13);
          v6 = 0;
          goto LABEL_9;
        }
        if ( !EPATHOBJ::bPolyLineTo(&v13, (struct EXFORMOBJ *)&v11, a2, a3) )
          goto LABEL_12;
        v9 = (const struct _POINTFIX *)EPATHOBJ::ptfxGetCurrent(&v13, &v10);
        DC::vCurrentPosition(v12, &a2[a3 - 1], v9);
清单 3-4 函数 GrePolylineTo 的代码片段
* * *
**构造函数**
构造函数 `PATHSTACKOBJ::PATHSTACKOBJ` 具有 `struct XDCOBJ *a2` 和 `int a3` 两个外部参数。参数
`a2` 不解释；参数 `a3` 用于指示是否将目标 `DC` 对象的当前位置坐标点使用在 `PATH` 对象中。此处传递的值是 `1` 表示使用当前位置。
构造函数首先会根据标志位变量 `v4` 判断目标 `DC` 对象是否处于活跃状态，随后通过调用 `HmgShareLock` 函数获取目标 `PATH`
对象指针并初始化相关成员变量（与前面章节所示类似地，包括 `cCurves` 成员）。参数 `a3` 值为 `1` 时构造函数会获取该 `DC`
对象的当前位置坐标点，用以在后续的画线操作中将其作为初始坐标点。
      v4 = *(_DWORD *)(*(_DWORD *)a2 + 0x70);
      if ( v4 & 1 )
      {
        ...
        v6 = HmgShareLock(*(_DWORD *)(*(_DWORD *)a2 + 0x6C), 7);
        *((_DWORD *)this + 2) = v6;