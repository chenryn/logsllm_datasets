with the matched text while an
\N(where N=1 … 9) escape
sequence is replaced with Nth
matched group (or an empty
string if the N exceeds the
number of captured groups).
如果  为空， 所有
包含搜索字符串的行都会被
返回
start line和end line从zabbix
2.0开始支持
vfs.file.regmatch[file,regexp,,,]
文 件 中 搜 0 – 为找到 file – 文件完整路径 例如:
索字符串 1 – 找到 regexp – GNU 正则表达式 vfs.file.regmatch[/var/log/app.log,error]
encoding – 编码
start line – 哪行开始，默认
第一行
end line – 哪行结束，默认
最后一行 上面两个参数从
2.0版本开始支持。
vfs.file.size[file]
文件大小 字节 file – 完整路径 zabbix必须有可读此文件的权限
例如:
vfs.file.size[/var/log/syslog]
vfs.fs.discovery
列 出 挂 载 Used for low-level JSON对象 从zabbix agent 2.0开始支持
的 文 件 系 discovery
统
vfs.fs.inode[fs,]
inodes数量 数字 fs – 文件系统 例如:
mode – total (默认), free, vfs.fs.inode[/,pfree]
used, pfree (空闲百分比), 老命名规则:
pused (使用百分比) vfs.fs.inode.free[*], vfs.fs.inode.pfree[*],
vfs.fs.inode.total[*]
vfs.fs.size[fs,]
磁盘空间 字节 fs – 文件系统 返回本地文件系统的使用量.
mode – total (默认), free, 例如: vfs.fs.size[/tmp,free]
used, pfree (空闲百分比), 老 命名规 则 : vfs.fs.free[*], vfs.fs.total[*],
pused (使用百分比) vfs.fs.used[*], vfs.fs.pfree[*], vfs.fs.pused[*],*
是任意挂载点
vm.memory.size[]
内存大小 字节或者百分比 mode – total (默认), active, 老 命 名 规 则 : vm.memory.buffers,
anon, buffers, cached, exec, vm.memory.cached, vm.memory.free,
file, free, inactive, pinned, vm.memory.shared, vm.memory.total
shared, wired, used, pused, 监控项vm.memory.size[]
available, available 其中挑一 允许三种类型的参数
个 第一类：包含total – 总内存
第二类： 系统指定内存类型:active, anon,
buffers, cached, exec, file, free, inactive,pinned,
shared, wired.
第三类：用户级别，一共使用了多少内存，还
有 多 少 内 存 可 用 : used, pused,
available,pavailable.
web.page.get[host,,]
获 取 网 页 网页源代码 host – 主机名/域名 返回空字符串表示失败.
内容 path – 文件地址，默认/ 例如:
port – 端口，默认80 web.page.get[www.ttlsa.com,/,80]
web.page.perf[host,,]
获 取 完 全 秒 host – 主机名/域名 返 回 0 表 示 失 败 . 例 如 :
加 载 网 页 path – html地址，默认是/ web.page.perf[www.ttlsa.com,/,80]
消 耗 的 时 port – 端口,默认80
长
web.page.regexp[host,,,,,]
在 网 页 中 The matched string, or host – 主机名 失败则返回空字符 (不匹配).
搜 索 字 符 as specified by the path – html 文件路径 (默 示例:
串 optionalpara 认值 /) web.page.regexp[www.zabbix.com,index.php,
meter. An empty port – 端口 (默认80) 80,OK,2]
string if no match was regexp – GNU正则表达式
found. length – 返回的最大的字
符串数量
output – 输出格式模板可
选项. The \0 escape sequence
is replaced with the matched
text while an \N(where N=1…
9) escape sequence is replaced
with Nth matched group (or an
empty string if the N exceeds
the number of captured
groups). If  is left
empty – the whole line
containing the matched text is
returned. The output
parameter is supported from
version 2.2.
vfs.file.time[file,]
文件时间 Unix时间戳. file – 文件路径 示例:
mode - one of modify (default, vfs.file.time[/etc/passwd,modify]
modification time), access -
last access time, change - last The file size limit depends on large file support.
change time
zabbix External checks 外部命令检测
1. 概述
zabbix server运行脚本或者二进制文件来执行外部检测，外部检测不需要在被监控端运行任何agentd
item key语法如下:
参数 定义
script shell脚本或者二进制文件名.
parameter(s) Optional command line parameters.
如果不想传递任何参数，如下：
script[] 或者script
zabbix server会再定义好的目录里面执行外部脚本（zabbix server中的配置extenalScripts），这个脚本将使用zabbix
的运行用户身份运行。请注意权限以及只有指定目录中的命令才能够被执行。
zabbix脚本使用标准方式输出（完整输出但是会删除末尾的空白）,标准错误和退出代码将会被丢弃
备注：请不要过度使用那个外部检测，这会严重降低zabbix系统性能
2. 范例
执行带参数脚本 check_oracle.sh “-h ”.
check_oracle.sh[“-h”,”{HOST.CONN}”]
zabbix将会执行:
check_oracle.sh "-h" "192.168.1.4"
zabbix Simple checks 基本检测
1. 开始
Simple checks通常用来检查远程未安装代理或者客户端的服务。使用simple checks，被监控客户端无需安装zabbix
agent客户端，zabbix server直接使用simple checks来收据数据，一基本上都是用来检测远程服务器某端口是否在
监听。如下为simple checks:
net.tcp.service[ftp,,155]
net.tcp.service[http]
net.tcp.service.perf[http,,8080]
使用基本检测去监控vmware服务器，需要填写User和Password字段，其他服务器可以忽略
2. 基本检测
以下列表为zabbx支持的基本检测
Key
描述 返回值 参数 说明
icmpping[,,,,]
检测是否支持 0 – ICMP ping 失 target – 主机IP或者域名 例如:
icmpping 败 packets – 包数量 icmpping[,4] – 4 个包
1 – ICMP ping 成 interval – 连续的数据包之间的时间间隔，以毫 只要一个有返回，那么将
功 秒为单位 会返回1
size – 包大小，以字节为单位
timeout – 超时时间,以毫秒为单位
icmppingloss[,,,,]
返回百分比 丢包率 target – 目标IP或者域名
packets – 包个数
interval – 连续包之间的时间间隔,以毫秒为单
位
size – 包大小，字节为单位
timeout – 超市时间，毫秒为单位
icmppingsec[,,,,,]
返回 ICMP 响 秒 target – 主机IP或者域名 如果主机不可用，比如挂
应时间 packets – 包个数 掉了，那么会返回0
interval – 包得响应时间,毫秒为单位
size – 包大小,字节为单位
timeout – 超时时间,毫秒为单位
mode – min, max, avg (默认值)
net.tcp.service[service,,]
检测服务是否 0 – 服务未开启 service – ssh, ntp, ldap, smtp, ftp, http, pop, 范例:
运行并且接受 1 – 服务运行中 nntp, imap, tcp, https, telnet中的一个 net.tcp.service[ftp,,45]
tcp连接 ip – zabbix中定义好的ip 检测运行在端口号 45 的
port – 端口(标准服务端口). FTP 服务是否可用.加密
协议 imap993 端口和
pop995端口目前不支持
zabbix 2.0开始支持https
和telnet
net.tcp.service.perf[service,,]
检测服务器性 0 – 服务停止 service – ssh, ntp, ldap, smtp, ftp, http, pop, 例如:
能 sec – 连接到服务 nntp, imap, tcp, https, telnet之一 net.tcp.service.perf[ssh]
器的时间（秒） ip – zabbix中定义的IP 可以检测连接到ssh所消
port – 端口（标准端口号） 耗的时间.加密协议服务
不支持，例如IMAP.
zabbix 2.0开始支持https
和telnet
超时处理
如果基本检测时间超过了zabbix配置文件设置的超市时间,zabbix将不会做处理.
3. ICMP pings
zabbix使用外部命令fling处理ICMP ping. fping不包含在zabbix的发行版本中，你需要额外去下载安装,如果你配置
了epel源，如下命令安装
# yum install fping
然后修改zabbix_server.conf,指定fping路径，配置参数为FpingLocation，一般为
FpingLocation = /usr/bin/fping
如果没有安装 fping 或者 fping 路径指定出错，cmpping, icmppingloss,icmppingsec 都不会处理，执行 fping 命令的
zabbix用户要设置setuid，毕竟fping命令是需要root权限的，如下设置：
# chown root:zabbix /usr/sbin/fping
# chmod 4710 /usr/sbin/fping
ICMP检测默认参数:
参数 值 描述 fping flag Min Max
packets 3 包数量 -C 1 10000
interval 1000 毫秒, “fping” 默认 -p 20
size 56 or 68 字节, “fping” 默认; -b 24 65507
x86使用56字节, x86_64使用68字节
timeout 500 毫秒, “fping” 默认 -t 50
zabbix ODBC 数据库监控
ODBC 是 C 语言开发的、用于访问数据库的中间件接口.zabbix 支持查询任何 ODBC 支持的数据库.zabbix 通过调用
ODBC来获取数据库的数据以及数据库状态等等信息.
1. 安装 unixODBC
官方主页:http://www.unixodbc.org/download.html.安装方法如下
RedHat/Fedora/Cetnos
shell> yum -y install unixODBC unixODBC-devel
SUSE zypper
# zypper in unixODBC-devel
2. 安装 unixODBC 驱动
要监控mysql等数据库必须先安装基于c开发的unixODBC数据库驱动.redhat直接yum安装,suse使用zypper安装.
其他系统,源码安装,官方地址：http://www.unixodbc.org/drivers.html.
redhat/centos
shell> yum install mysql-connector-odbc
SUSE
zypper in MyODBC-unixODBC
3. 配置 unixODBC
配置odbcinst.ini和odbc.ini两个配置文件即可,验证配置是否正常,如下命令:
# odbcinst -j
unixODBC 2.2.14DRIVERS…………: /etc/odbcinst.iniSYSTEM DATA SOURCES: /etc/odbc.iniFILE DATA SOURCES..:
/etc/ODBCDataSourcesUSER DATA SOURCES..: /root/.odbc.iniSQLULEN Size…….: 8SQLLEN Size……..:
8SQLSETPOSIROW Size.: 8
odbcinst.ini范例:
# vi /etc/odbcinst.ini
[mysql]
Description = ODBC for MySQL
Driver = /usr/lib/libmyodbc5.so
参数详解:
属性 描述
mysql 数据库驱动名称.
Description 数据库驱动描述.
Driver 数据库驱动类库具体路径
odbc.ini范例:
[test]
Description = MySQL test database
Driver = mysql
Server = 127.0.0.1
User = root
Password =
Port = 3306
Database = zabbix
参数详解:
属性 描述
test 数据源名称 (DSN).
Description 数据源描述.
Driver 数据库驱动名 – 在 odbcinst.ini指定
Server 数据库 IP/DNS.
User 数据库用户名.
Password 数据库密码.
Port 数据库端口
Database 数据库名称.
验证ODBC是否可用,使用isql（命令unixODBC包提供）命令,如下：
# isql test
+—————————————+
| Connected! |
| |
| sql-statement |
| help [tablename] |