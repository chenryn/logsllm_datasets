### 文本优化

#### 1. 正则表达式匹配
- **功能说明**：在匹配的文本中，`\N`（其中 N=1...9）转义序列将被替换为第 N 个匹配组（如果 N 超过了捕获组的数量，则替换为空字符串）。如果输出模板为空，则返回包含匹配文本的所有行。
- **支持版本**：从 Zabbix 2.0 开始支持 `start line` 和 `end line` 参数。
- **示例**：
  - `vfs.file.regmatch[file,regexp,,,]`
    - **参数**：
      - `file`：文件的完整路径，例如 `/var/log/app.log`。
      - `regexp`：GNU 正则表达式，例如 `error`。
      - `encoding`：文件编码。
      - `start line`：开始行，默认为第一行。
      - `end line`：结束行，默认为最后一行。
    - **返回值**：
      - `0`：未找到匹配项。
      - `1`：找到匹配项。

#### 2. 文件大小
- **功能说明**：获取指定文件的大小（以字节为单位）。
- **示例**：
  - `vfs.file.size[file]`
    - **参数**：
      - `file`：文件的完整路径，例如 `/var/log/syslog`。
    - **要求**：Zabbix 必须具有读取该文件的权限。

#### 3. 挂载文件系统的发现
- **功能说明**：列出所有挂载的文件系统，并用于低级发现。
- **支持版本**：从 Zabbix Agent 2.0 开始支持。
- **返回值**：JSON 对象。

#### 4. Inodes 数量
- **功能说明**：获取文件系统的 inodes 数量。
- **示例**：
  - `vfs.fs.inode[fs,mode]`
    - **参数**：
      - `fs`：文件系统路径，例如 `/`。
      - `mode`：模式，可选值包括 `total`（默认）、`free`、`used`、`pfree`（空闲百分比）、`pused`（使用百分比）。
    - **老命名规则**：`vfs.fs.inode.free[*]`、`vfs.fs.inode.pfree[*]` 等。
- **备注**：`*` 表示任意挂载点。

#### 5. 磁盘空间
- **功能说明**：获取文件系统的磁盘空间信息。
- **示例**：
  - `vfs.fs.size[fs,mode]`
    - **参数**：
      - `fs`：文件系统路径，例如 `/tmp`。
      - `mode`：模式，可选值包括 `total`（默认）、`free`、`used`、`pfree`（空闲百分比）、`pused`（使用百分比）。
    - **老命名规则**：`vfs.fs.free[*]`、`vfs.fs.total[*]` 等。
- **备注**：`*` 表示任意挂载点。

#### 6. 内存大小
- **功能说明**：获取内存大小信息。
- **示例**：
  - `vm.memory.size[mode]`
    - **参数**：
      - `mode`：模式，可选值包括 `total`（默认）、`active`、`anon`、`buffers`、`cached`、`exec`、`file`、`free`、`inactive`、`pinned`、`shared`、`wired`、`used`、`pused`、`available`、`pavailable`。
    - **老命名规则**：`vm.memory.buffers`、`vm.memory.cached` 等。

#### 7. 获取网页内容
- **功能说明**：获取指定网页的源代码。
- **示例**：
  - `web.page.get[host,path,port]`
    - **参数**：
      - `host`：主机名/域名，例如 `www.ttlsa.com`。
      - `path`：文件地址，默认为 `/`。
      - `port`：端口，默认为 80。
    - **返回值**：网页源代码，失败时返回空字符串。

#### 8. 获取完全加载网页的时间
- **功能说明**：测量完全加载指定网页所需的时间。
- **示例**：
  - `web.page.perf[host,path,port]`
    - **参数**：
      - `host`：主机名/域名，例如 `www.ttlsa.com`。
      - `path`：HTML 地址，默认为 `/`。
      - `port`：端口，默认为 80。
    - **返回值**：时间（秒），失败时返回 0。

#### 9. 在网页中搜索字符串
- **功能说明**：在网页中搜索指定的字符串，并返回匹配的结果。
- **示例**：
  - `web.page.regexp[host,path,port,regexp,length,output]`
    - **参数**：
      - `host`：主机名/域名，例如 `www.zabbix.com`。
      - `path`：HTML 文件路径，默认为 `/`。
      - `port`：端口，默认为 80。
      - `regexp`：GNU 正则表达式。
      - `length`：返回的最大字符串数量。
      - `output`：输出格式模板。`\0` 转义序列被替换为匹配的文本，`\N`（其中 N=1...9）转义序列被替换为第 N 个匹配组（如果 N 超过了捕获组的数量，则替换为空字符串）。如果 `output` 为空，则返回包含匹配文本的整行。
    - **返回值**：匹配的字符串，未找到匹配项时返回空字符串。
    - **支持版本**：从 Zabbix 2.2 开始支持 `output` 参数。

#### 10. 文件时间戳
- **功能说明**：获取文件的时间戳。
- **示例**：
  - `vfs.file.time[file,mode]`
    - **参数**：
      - `file`：文件路径，例如 `/etc/passwd`。
      - `mode`：模式，可选值包括 `modify`（默认，修改时间）、`access`（最后访问时间）、`change`（最后更改时间）。
    - **备注**：文件大小限制取决于大文件支持。

#### 11. 外部命令检测
- **概述**：Zabbix Server 可以运行脚本或二进制文件来执行外部检测。外部检测不需要在被监控端运行任何 agentd。
- **item key 语法**：
  - `script[parameter(s)]`
  - 如果没有传递任何参数，可以使用 `script[]` 或 `script`。
- **配置**：Zabbix Server 在定义好的目录中执行外部脚本（通过 `zabbix_server.conf` 中的 `ExternalScripts` 配置），脚本将以 Zabbix 运行用户的权限执行。
- **注意事项**：不要过度使用外部检测，这会严重降低 Zabbix 系统性能。
- **示例**：
  - `check_oracle.sh["-h", "{HOST.CONN}"]`
    - Zabbix 将执行：`check_oracle.sh "-h" "192.168.1.4"`

#### 12. 基本检测
- **概述**：基本检测通常用于检查远程未安装代理或客户端的服务。无需在被监控客户端上安装 Zabbix Agent，Zabbix Server 直接使用基本检测来收集数据。
- **示例**：
  - `net.tcp.service[ftp,,155]`
  - `net.tcp.service[http]`
  - `net.tcp.service.perf[http,,8080]`
- **备注**：对于 VMware 服务器，需要填写 `User` 和 `Password` 字段，其他服务器可以忽略。

#### 13. ICMP Ping 检测
- **功能说明**：检测目标主机是否响应 ICMP Ping。
- **示例**：
  - `icmpping[target,packets,interval,size,timeout]`
    - **参数**：
      - `target`：主机 IP 或域名。
      - `packets`：包数量。
      - `interval`：连续包之间的时间间隔（毫秒）。
      - `size`：包大小（字节）。
      - `timeout`：超时时间（毫秒）。
    - **返回值**：
      - `0`：ICMP Ping 失败。
      - `1`：ICMP Ping 成功。
- **丢包率**：
  - `icmppingloss[target,packets,interval,size,timeout]`
    - **返回值**：丢包率（百分比）。
- **响应时间**：
  - `icmppingsec[target,packets,interval,size,timeout,mode]`
    - **参数**：
      - `mode`：`min`、`max`、`avg`（默认）。
    - **返回值**：ICMP 响应时间（秒）。

#### 14. TCP 服务检测
- **功能说明**：检测指定服务是否运行并接受 TCP 连接。
- **示例**：
  - `net.tcp.service[service,ip,port]`
    - **参数**：
      - `service`：服务名称，例如 `ssh`、`ntp`、`ldap`、`smtp`、`ftp`、`http`、`pop`、`nntp`、`imap`、`tcp`、`https`、`telnet`。
      - `ip`：IP 地址。
      - `port`：端口号。
    - **返回值**：
      - `0`：服务未开启。
      - `1`：服务运行中。
- **性能检测**：
  - `net.tcp.service.perf[service,ip,port]`
    - **返回值**：连接到服务的时间（秒）。

#### 15. ODBC 数据库监控
- **概述**：ODBC 是 C 语言开发的中间件接口，用于访问数据库。Zabbix 通过调用 ODBC 来获取数据库的数据和状态信息。
- **安装**：
  - **unixODBC**：
    - 官方主页：[http://www.unixodbc.org/download.html](http://www.unixodbc.org/download.html)
    - 安装方法：
      - RedHat/Fedora/CentOS：`yum -y install unixODBC unixODBC-devel`
      - SUSE：`zypper in unixODBC-devel`
  - **unixODBC 驱动**：
    - 安装基于 C 开发的驱动程序，例如 MySQL 驱动：
      - RedHat/CentOS：`yum install mysql-connector-odbc`
      - SUSE：`zypper in MyODBC-unixODBC`
- **配置**：
  - 配置 `odbcinst.ini` 和 `odbc.ini` 文件。
  - 示例：
    - `odbcinst.ini`：
      ```ini
      [mysql]
      Description = ODBC for MySQL
      Driver = /usr/lib/libmyodbc5.so
      ```
    - `odbc.ini`：
      ```ini
      [test]
      Description = MySQL test database
      Driver = mysql
      Server = 127.0.0.1
      User = root
      Password =
      Port = 3306
      Database = zabbix
      ```
- **验证**：
  - 使用 `isql` 命令验证 ODBC 是否可用：
    ```sh
    isql test
    ```

希望这些优化后的文本能够帮助你更好地理解和使用 Zabbix 的各项功能。如果有任何进一步的问题，请随时告知。