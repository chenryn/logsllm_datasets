dalla and Pointcheval [6], are deÔ¨Ånitely the most eÔ¨Écient variants, with a security analysis in
the BPR framework. And it works in any group where the CDH assumption holds: two full ex-
ponentiations and one small exponentiation, plus a multiplication and a division for each user,
and just one group element to send in each direction, for the basic SPAKE presented on Fig-
ure 1. However, the above simple construction is secure for non-concurrent executions only. The
password has to be added to the last key derivation step to handle concurrent executions. More
importantly, forward-secrecy has never been proven for these constructions, while it is essential
to guarantee the privacy of a past communication even if the password is later leaked.
Katz, Ostrovsky and Yung [34] proposed the Ô¨Årst practical scheme, but still less eÔ¨Écient
than above schemes, in the standard model with a common reference string, followed by a
generalization from Gennaro and Lindell [28,27], using the power of smooth-projective hash
functions [25], in the BPR framework. Many variations [22,4,37,31,38] have thereafter been
proposed, to achieve security in the UC framework, to improve round eÔ¨Éciency, or to rely
on new assumptions. But the most eÔ¨Écient, in the standard model, is deÔ¨Ånitely the recent
‚ÄúSimple Password-Only Key Exchange‚Äù protocol (SPOKE) [2,1], where the players have globally
to compute less than 17 exponentiations and to send 6 group elements. The security just relies
on the DDH assumption. Even if this is quite eÔ¨Écient in the standard model, this is still too
Global parameters: G of prime order p, G a hash function onto G, and H a hash function onto {0, 1}(cid:96)
A pw
B pw
4
g ‚Üê G(pw ), x R‚Üê Z‚àó
accept ‚Üê false
p, X ‚Üê gx
accept ‚Üê true
Z ‚Üê Y x
accept ‚Üê false
A(cid:107)X -
Y

g ‚Üê G(pw ), y R‚Üê Z‚àó
accept ‚Üê true
Z ‚Üê X y
p, Y ‚Üê gy
sk ‚Üê H(A(cid:107)B(cid:107)g(cid:107)X(cid:107)Y (cid:107)Z)
Figure 2. Simple Password Exponential Key Exchange
costly in constrained environments, where constructions proven secure in ideal models are still
preferable.
Whereas the huge majority of the protocols rely on a DiÔ¨Ée-Hellman-like assumption, some
schemes have also been proposed on factoring-related assumptions [41,43,24,30]. However, be-
cause of the huge parameters of factoring-based protocols, eÔ¨Éciency is far from SPAKE and even
SPOKE.
Other alternatives are the Secure Remote Password protocol (SRP) [50] and the Simple
Password Exponential Key Exchange protocol (SPEKE) [33], presented in Figure 2, that have
been standardized, and the latter has even been analyzed in [42] in the BPR model, under the
CDH assumption in the random oracle model. A speciÔ¨Åc instantiation has also been proposed
with SAE [32].
While the security analysis [42] of SPEKE relies on the CDH assumption in the random
oracle, the instantiation targets the speciÔ¨Åc prime-order subgroup of the squares in the Ô¨Ånite
Ô¨Åeld Z‚àó
p, where p = 2q + 1, with both p and q being large primes. There is no easy way to extend
this instantiation to more eÔ¨Écient groups, such as elliptic curves. The main issue is to map the
passwords into the group (modeled by G on Figure 2). As a consequence, this requires huge
parameters, similar to factoring-based protocols.
While several constructions of VPAKE protocols were proposed in the early 2000, the Ô¨Årst
formal security model has been described in [29], with an ideal functionality in the UC frame-
work [20,21] using a generic conversion (the so-called ‚Ñ¶-method). Unfortunately, the deÔ¨Ånition
makes sense in ideal models only, such as the random oracle model [9]. More recently, the no-
tion of password hashing [14] formalizes the way in which a veriÔ¨Åer can be computed from a
password, and the strong security it should guarantee in case of server compromise. This deÔ¨Ånes
the notion of tight one-wayness which says that extracting a password for one veriÔ¨Åer chosen
among a set of veriÔ¨Åers should take nearly as long as hashing 2Œ≤ passwords, where Œ≤ is the
min-entropy of the password distribution D. We recall that the min-entropy of a distribution is
a very conservative way of measuring the unpredictability, or the number of random bits: it is
deÔ¨Åned as the negative 2-logarithm of the probability of the most likely element. The password
hashing method is quite strict to allow the user to run the Ô¨Årst Ô¨Çow of the protocol without
knowing the salt, which is later sent by the server. Kiefer and Manulis [39] later extended this
deÔ¨Ånition requiring the salt to be known by the user from the beginning. Depending on the salt,
this might imply a pre-Ô¨Çow from the server, in order to send the salt to the user, or the server
plays Ô¨Årst, which is not always optimal in practice since the user is the one who wants to initiate
a communication.
Cash et al. [23] proposed a new computational hard problem, the twin DiÔ¨Ée-Hellman prob-
lem, which is at least as hard as the ordinary DiÔ¨Ée-Hellman problem, but that additionally
allows a trapdoor test to eÔ¨Éciently decide on twin DiÔ¨Ée-Hellman pairs. Based on this problem,
they presented a veriÔ¨Åer-based version of the SPAKE protocol [6], actually the SPAKE2 variant,
5
they thus called SPAKE2+. While it has been proven secure against server compromise, as for
SPAKE, forward-secrecy has never been considered. Note that both SPAKE2 and SPAKE2+
have been considered under IEFT standardization [40]. Another related work is AugPAKE (for
Augmented Password-Authenticated Key Exchange), proposed by Shin and Kobara [45,?,?].
According to the security proof [48], this is a secure PAKE protocol that resists to server com-
promise, under the Strong-DiÔ¨Ée-Hellman assumption [15]. None of them make an explicit use
to a secure password hashing method to compute the veriÔ¨Åer from a salt. This could be done,
but at the cost of an additional Ô¨Çow.
1.3 Objectives and Contributions
As said above, EKE-like schemes in the random oracle model and constructions based on smooth-
projective hash functions in the standard model are the two main streams in the literature. In
the following, we revisit the third family of SPEKE-like protocols, in order to make it work in
any group where a CDH-like assumption holds, such as elliptic curves. We expect it to lead to
new eÔ¨Écient instantiations, at least as good as SPAKE.
Actually, our new instantiation of the random oracle, in order to map a password into the
group, is inspired from SPAKE recalled on Figure 1, with two independent bases (hence the
name TBPEKE, for Two-Basis Password Exponential Key Exchange). Its security will rely on
a DLin-like assumption, which can hold in many kinds of groups, such as elliptic curves. There
is no need of random oracle that maps onto group elements. It can thus be instantiated in any
group, in an eÔ¨Écient way.
In a second step, we make it veriÔ¨Åer-based at a quite low additional cost, and name it
VTBPEKE, for VeriÔ¨Åer-based Two-Basis Password Exponential Key Exchange). To this aim, we
use the revised version of password-hashing from [39]. Its tight one-wayness has been proven
in [14]. It requires the knowledge of the salt to start the key exchange protocol. As said above,
this is not always optimal since this might make the server start the protocol, or one has to
use a deterministic salt (such as server-user identities) and one has to assume the user can per-
fectly remember it. However, we additionally provide explicit user-authentication to the server,
which anyway requires 3 Ô¨Çows when the user initiates the protocol and thereafter conÔ¨Årms his
knowledge of the session key.
As a consequence, our VTBPEKE protocol is quite eÔ¨Écient from the communication point
of view (number of Ô¨Çows), whatever kind of salt is used, and just requires 4 exponentiations on
the user side (less than twice as much as the TBPEKE protocol).
2 Security Model
At the same time, Bellare, Pointcheval and Rogaway [8], and Boyko, MacKenzie and Patel [17]
Ô¨Årst formalized security of Password-Authenticated Key Exchange, in two diÔ¨Äerent frameworks.
Later, Canetti, Halevi, Katz, Lindell and MacKenzie [22] provided an ideal functionality in the
Universally Composable (UC) security framework [21].
For the sake of eÔ¨Éciency, we focus on the weaker BPR security model, instead of UC. This is a
Find-then-Guess game, in the indistinguishability-based framework where an adversary should
not be able to get an advantage signiÔ¨Åcantly greater than qS/N in distinguishing a random
session key from a real session key, if qS is the number of active sessions against an honest
user and N the size of the dictionary. It has thereafter been improved to the Real-or-Random
scenario [5]. More precisely, the adversary is given access to oracles:
‚Äì Execute-queries model passive attacks of execution between honest players;
‚Äì Send-queries model active attacks against honest players;
‚Äì Corrupt-queries model corruptions with the leakage of long-term secrets, in order to study
forward-secrecy;
6
‚Äì Reveal-queries model bad uses of session keys and thus the leakage of ephemeral secrets;
‚Äì and Test-queries model the semantic security of the session key, with a real or random
answer.
In the Find-then-Guess scenario, only one Test-query can be asked, whereas in the Real-or-
Random scenario many Test-queries can be asked with either always-real or always-random
answers. The latter is clearly at least as strong as the former: while the former security model
shows that sessions keys are individually indistinguishable from random, the latter shows that
the session keys are globally indistinguishable from random, and independent from each other.
It is well-known that both scenarios are polynomially equivalent for encryption schemes [7], but
with a linear loss in the number of Test-queries. This makes them quite diÔ¨Äerent for PAKE, where
the advantage should remain in qs/N , whatever the number of Test-queries. It has then been
showed [5] that in this Real-or-Random scenario, Reveal-queries are not useful anymore, hence
simplifying the security game (multiple Test-queries and no Reveal-queries). There are natural
restrictions:
‚Äì in a key exchange protocol, when everything works Ô¨Åne, two partners should agree on the
same key, while in the random case the Test-oracle would answer independent random keys.
One can simply prevent the adversary from testing two partners;
‚Äì when the adversary knows the password (after a corruption) one cannot guarantee anymore
the secrecy of the future session keys. Therefore, Test-queries on sessions that completed
after corruptions are forbidden. Anyway, the forward-secrecy just considers the secrecy of
the session keys agreed before the corruptions.
Note that this is a slight variant of the so-called weak corruption model in BPR, since the long
term secrets (passwords) only are leaked, and not the internal states, in case of corruption, but
this is the important notion for the forward-secrecy.
We stress that the main diÔ¨Äerence with the UC security notions is the assumption about the
password distribution: we usually consider a uniform distribution, hence the optimal qs/N bound.
We could extend the result to the min-entropy of the passwords, or by using the probability to
be in the most probable set of qs passwords, as in [19].
3 Variants of SPEKE
In the same vein as SPAKE instantiates the ideal cipher model Epw (X) by X ¬∑ U pw for a Ô¨Åxed
element U , our goal is to Ô¨Ånd an eÔ¨Écient instantiation of G(pw ), in such a way that it leads to
a random generator in the group G.
3.1 A Naive Construction
The Ô¨Årst natural instantiation is g ‚Üê hpw for a Ô¨Åxed generator h. But an easy oÔ¨Ä-line dictionary
follows from a single active attack: the adversary impersonates A to B and sends X ‚Üê hz for a
random z. Bob sends Y ‚Üê (hpw )y for the correct password pw and computes Z ‚Üê X y, that can
be checked after a Test-query. The adversary can indeed now try any password œÄ, and compute
the candidate T ‚Üê Y z/œÄ = ((hpw )y)z/œÄ = (hy)z(pw /œÄ) = (hz)y(pw /œÄ) = (X y)pw /œÄ = Zpw /œÄ, which
is indeed Z if œÄ = pw . It then leads to the correct sk .
3.2 A Secure Construction: TBPEKE
The problem in this construction is that from the built g, the adversary can extract the correct
x for each tentative password œÄ. This has to be prevented, and the candidate g ‚Üê U ¬∑ V pw ,
where U and V are two random, independent, and Ô¨Åxed group elements, looks appropriate.
Global parameters: G of prime order p, U, V R‚Üê G, and H a hash function onto {0, 1}(cid:96)
A pw
B pw
7
g ‚Üê U ¬∑ V pw , x R‚Üê Z‚àó
accept ‚Üê false
p, X ‚Üê gx
accept ‚Üê true
Z ‚Üê Y x
accept ‚Üê false
A(cid:107)X -
Y

g ‚Üê U ¬∑ V pw , y R‚Üê Z‚àó
accept ‚Üê true
Z ‚Üê X y
sk ‚Üê H(A(cid:107)B(cid:107)g(cid:107)X(cid:107)Y (cid:107)Z)
p, Y ‚Üê gy
Figure 3. Two-Basis Password Exponential Key Exchange (TBPEKE)
The resulting scheme, called TBPEKE for Two-Basis Password Exponential Key Exchange, is
presented on Figure 3.
As SPAKE, it instantiates the ideal primitive in the body of the protocol with a simple
product that involves Ô¨Åxed but random group elements and the password. The complexity is
quite similar: two full exponentiations and one small exponentiation, plus a multiplication for
each user, and just one group element to send in each direction. There is one division and one
small exponentation less to compute for each user than in SPAKE, and much smaller elements
to exchange, compared from the original SPEKE protocol analyzed in the random oracle model
in [42] that works in Ô¨Ånite Ô¨Åelds only. We can indeed hope this construction to work in any group
where the CDH assumption holds (or a similar assumption), which would allow elliptic curves
with 256-bit long group elements: 32 bytes only have to be sent in each direction. Eventually,
as in SPAKE, only one random oracle is required for the Ô¨Ånal key derivation.
4 Security Analysis of TBPEKE
Before providing security results for our new construction, let us precise the computational
assumptions.
4.1 Assumptions
‚Äì The Computation DiÔ¨Ée-Hellman (CDH) Assumption states that, given three random
generators g, X = gx, and Y = gy, in a cyclic group G of prime order p, it is hard to fond
DHg(X, Y ) = gxy.
‚Äì The Decisional Linear (DLin) Assumption states that, given six random generators
f, g, h, and X = f x, Y = gy, Z = hz, in a cyclic group G of prime order p, it is hard to
decide whether z = x + y mod p.
‚Äì The Simultaneous DiÔ¨Ée-Hellman (SDH) Assumption states that, given three random
generators X, g = X a, and h = X b in a cyclic group G of prime order p, it is hard to Ô¨Ånd
Y (cid:54)= 1 and R, S that simultaneously satisÔ¨Åes R = DHg(X, Y ) = Y 1/a and S = DHh(X, Y ) =
Y 1/b.
Reduction of the SDH Assumption to the DLin Assumption. We Ô¨Årst show that the SDH
assumption, on which our protocol will rely, can be reduced to the well-known DLin assumption,
that is widely assumed to hold in pairing-friendly settings [16].
Theorem 1. In a pairing-friendly setting, the DLin assumption implies the SDH assumption:
Advdlin(t) ‚â• Succsdh(t).
Proof. On input a DLin instance, f, g, h, and X = f x, Y = gy, Z = hz (if b = 0, then z is random,
else z = x + y), one runs the SDH adversary on inputs X(cid:48) ‚Üê h, g(cid:48) ‚Üê f = X(cid:48)a, and h(cid:48) ‚Üê g = X(cid:48)b
8
(where we formally set a = 1/x mod p and b = 1/y mod p). The adversary outputs Y (cid:48), R(cid:48) =
Y (cid:48)1/a, S(cid:48) = Y (cid:48)1/b with probability Œµ, which validity can be checked: e(f, R(cid:48)) ?= e(h, Y (cid:48)) ?= e(g, S(cid:48)).
If this test is not satisÔ¨Åed, and so test = false, our algorithm outputs a random value b(cid:48).
If the test is satisÔ¨Åed, and so test = true, using the bilinear map e: