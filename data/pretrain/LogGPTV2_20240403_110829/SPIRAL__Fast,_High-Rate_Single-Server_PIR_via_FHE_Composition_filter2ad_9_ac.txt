z = [1, z, z2, . . . , z(cid:98)logz q(cid:99)] ∈ Rt
n,z to each column of M.
z ∈ Rn×m
: Rq → Rt
q → Rm
q
n,z : Rn
z
z
q
q
STCGSWG−1(CRegev) = (µSTG + EGSW)G−1(CRegev)
= µM + ˜E,
where we write G = Gn+1,z and ˜E = µERegev +
EGSWG−1(CRegev). Thus, CGSWG−1
n+1,z(CRegev) is a Regev
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
5934
encoding of µM with error ˜E, which is small as long as µ,
ERegev, and EGSW are small.
III. ENCODING COMPRESSION AND TRANSLATION
Similar to previous PIR protocols based on homomorphic
encryption, we view our database as a hypercube. A PIR
query consists of a collection of encodings encrypting 0/1
indicator vectors that select for the desired index along each
dimension (see Section I-A). A naïve implementation would
require at least one encoding for each dimension of the
hypercube in the query. Previously, Angel et al. [5] and
Chen et al. [39] introduced a query compression algorithm to
pack the ciphertexts for the different dimensions into a single
RLWE ciphertext (speciﬁcally, a BFV ciphertext [29, 30]).
To achieve higher rate and reduce noise growth, SPIRAL
follows the Gentry-Halevi approach [20] of encoding the index
along the ﬁrst dimension using a matrix Regev encoding and the
subsequent dimensions using GSW encodings (see Section IV).
In this section, we introduce new building blocks to enable an
analogous query compression approach as [5, 39] that allows us
to compress the query encodings into a single Regev encoding
of a scalar. Using our transformations, a PIR query in SPIRAL
consists of a single RLWE ciphertext, which precisely matches
schemes like SealPIR [5] or OnionPIR [23]. However, due to
better control of noise growth, SPIRAL can be instantiated with
smaller lattice parameters, thus resulting in smaller queries (see
Section V-C). Our approach relies on four main ingredients
which we describe in this section:
• In Section III-A, we show how to expand a Regev encoding
of a scalar µ ∈ Rq into a matrix Regev encoding of µIn for
any n > 1. In the SPIRAL protocol, this is used to obtain
the matrix Regev encoding of the query index along the ﬁrst
database dimension.
• In Section III-B, we show how to take Regev encodings
of the components of µ · gz to obtain a GSW encoding of
µ with respect to the gadget matrix Gn+1,z for any n ≥ 1
(Section III-B). In the SPIRAL protocol, this is used to derive
the GSW encodings of the query index along the subsequent
dimensions of the database.
• To compress the query itself, we rely on previous tech-
niques [5, 39] to pack multiple Regev encodings of scalars
into a single Regev encoding (of a polynomial).
• Finally, after server processing, we apply modulus switch-
ing [28, 31] to the output Regev encoding to reduce the
encoding size. Here, we describe a simple variant of modulus
switching that rescales the Regev encoding by two different
scaling factors to achieve a higher rate (Section III-D). This
is especially beneﬁcial when working with matrix Regev
encodings.
We believe that our transformations are also useful in other
settings that combine Regev and GSW encodings. Overall, they
allow us to take advantage of the high rate of matrix-Regev
encodings and the slower (asymmetric) noise growth of GSW
homomorphic operations, but without needing to communicate
low-rate GSW encodings.
The scalar-to-matrix and Regev-to-GSW transformations
we develop here are very similar to “key switching” trans-
formations used in FHE [28, 31]. Much like key switching
in FHE, the client needs to publish additional key-switching
components (as part of the public parameters of the PIR
scheme). The key-switching matrices are essentially encryptions
of the secret key for the encoding scheme, so security relies
on a key-dependent message security assumption (e.g., a
circular security assumption). We note that previous query
expansion algorithms [5, 39] also require publishing key-
switching matrices (to support automorphisms), which also
necessitate making a circular security assumption.
A. Scalar Regev Encoding to a Matrix Regev Encoding
First, we describe a method to expand a Regev encoding of
a scalar µ ∈ Rq into a matrix Regev encoding of µIn ∈ Rn×n
.
The conversion procedure consists of a setup algorithm that
samples a conversion key (i.e., a key-switching matrix):
• ScalToMatSetup(s0, S1, z): On input the source key s0 =
q, the target key S1 = [−˜s1 | In]T ∈
[−˜s0 | 1]T ∈ R2
R(n+1)×n
, and a decomposition base z ∈ N, sample
q and E ← χn×m, where m = n((cid:98)logz q(cid:99) + 1).
a R← Rm
(cid:20)
Then, output the key
∈ R(n+1)×m
• ScalToMat(W, c): On input a key W ∈ R(n+1)×m
an encoding c = (c0, c1) ∈ R2
[ 0n | c1In ]T.
q, output WG−1
−˜s0 · Gn,z
and
n,z(c0In) +
˜s1aT + E
01×m
q
q
W =
(cid:20)
(cid:21)
+
q
.
q
aT
(cid:21)
We refer to Appendix B for a sketch of the correctness proof
and to the full version of this paper [42] for the full details.
B. Converting Regev Encodings into GSW Encodings
GSW ] where tGSW = (cid:98)logzGSW
Next, we describe an approach to construct a GSW encoding
of a message µ ∈ Rq (with decomposition base zGSW)
from a collection of scalar Regev encodings of µgzGSW =
q(cid:99) + 1.
[µ, µ · zGSW, . . . , µ · ztGSW−1
Chen et al. [39] previously showed an approach for the special
case where n = 1 that builds up the GSW ciphertext row by
row using homomorphic multiplications. It is not clear how
to extend this approach to higher dimensions (e.g., to allow
homomorphic multiplication with matrix Regev encodings).
Here, we describe a general transformation for arbitrary n.
To have ﬁner control over noise growth, we introduce an
additional decomposition base zconv used for the conversion
algorithm. The decomposition base zconv for conversion does
not have to match the decomposition base zGSW for the GSW
encoding. This will enable more ﬂexibility in parameter
selection (see Section V-A) and better concrete efﬁciency.
• RegevToGSWSetup(sRegev, SGSW, zGSW, zconv): On input
the Regev secret key sRegev = [−˜sRegev | 1]T ∈ R2
q, the
GSW secret key SGSW = [−˜sGSW | In]T ∈ R(n+1)×n
, and
decomposition bases zGSW, zconv ∈ N, proceed as follows:
q(cid:5) + 1, tconv =(cid:4)logzconv q(cid:5) + 1,
– Deﬁne tGSW =(cid:4)logzGSW
q
and mGSW = (n + 1)tGSW.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
6935
– Sample W ← ScalToMatSetup(sRegev, SGSW, zconv).
– Sample a R← R2tconv
and E ← χn×2tconv and construct the
matrix
(cid:20)
q
aT
(cid:21)
(cid:20)
V =
˜sGSWaT + E
.
(III.1)
– Deﬁne the permutation matrix Π ∈ {0, 1}mGSW×mGSW such
−˜sGSW · (sT
Regev ⊗ gT
zconv )
+
01×2tconv
(cid:21)
that
(cid:20) gT
(cid:21)
zGSW
0n×tGSW gT
01×ntGSW
⊗ In
zGSW
Π = Gn+1,zGSW .
Output the conversion key ck = (V, W, Π).
• RegevToGSW(ck, c1, . . . , ctGSW ): On input the conversion
key ck = (V, W, Π) and Regev encodings c1, . . . , ctGSW ∈
q, compute Ci ← ScalToMat(W, ci) for each i ∈ [tGSW].
R2
Then, output
C = [ Vg−1
zconv ( ˆC) | C1 | ··· | CtGSW ] · Π
q
.
III.1
where ˆC = [ c1 |···| ctGSW ] ∈ R2×tGSW
We refer to Appendix B for a sketch of the correctness proof
and to the full version of this paper [42] for the full details.
Remark
(Compressing GSW Encodings). The
RegevToGSW algorithm takes
tGSW Regev encodings
(consisting of 2 · tGSW elements of Rq) and outputs a single
GSW encoding with (n + 1)mGSW = (n + 1)2tGSW elements
of Rq. Thus, our Regev-to-GSW transformation can be viewed
as a way to achieve a (n + 1)2/2 factor compression on GSW
encodings at the cost of a small amount of additional noise
and needing to store a (large) conversion key ck. However, ck
can be generated in a separate ofﬂine phase and reused across
multiple protocol invocations. This provides an effective way
to reduce the online communication costs of sending GSW
encodings.
C. Coefﬁcient Extraction on Regev Encodings
The algorithm takes a polynomial f =(cid:80)
The next ingredient we require is the coefﬁcient expansion
algorithm by Angel et al. [5] and extended by Chen et al. [39].
i∈[0,2r−1] fixi ∈ Rq
as input and outputs a (scaled) vector of coefﬁcients 2r ·
(f0, . . . , f2r−1) ∈ Z2r
q . This algorithm relies on the fact that
we can homomorphically evaluate automorphisms on Regev-
encoded polynomials. We use the same approach from [5, 39],
so we defer the description to Appendix C.
D. Modulus Switching
Modulus switching [28, 31] reduces the size of Regev-based
encodings by rescaling the encoding down into a smaller
ring while preserving the encoded message. This allows
performing homomorphic operations over a larger ring Rq
(which accommodates more homomorphic operations) and
then rescaling the ﬁnal encoding (e.g., the PIR response) to a
smaller ring Rq(cid:48) to obtain a more compact representation.
While previous approaches [28, 31, 43, 20] rescale all of
the ciphertext components from Rq to Rq(cid:48) for some q(cid:48) < q,
we can achieve further compression by re-scaling some of the
components of the Regev ciphertext to one modulus q1 and
the remaining components to a different modulus q2. The
advantage of this variant is that we can use a very small value
of q1 (e.g., q1 = 4p) and still ensure correctness. We refer to the
the full version of this paper [42] for additional discussion. We
now describe our variant of the modulus switching procedure
ModulusSwitch along with an encoding-recovery procedure
Recover that takes a rescaled encoding (ˆc1, ˆC2) (as output by
ModulusSwitch) and the secret key S as input, and outputs
an encoding Z (over Rq1) satisfying Z = (cid:98)q1/p(cid:99) M + E(cid:48). If
E(cid:48) is sufﬁciently small, we can recover M from Z using the
Decode procedure from Section II-A. Both the ModulusSwitch
and Recover algorithms are parameterized by a pair of moduli
q1, q2 ∈ N. We provide the correctness analysis in the full
version of this paper [42].
• ModulusSwitchq1,q2 (C): On input an encoding C =
, let ˆc1 =
(cid:98)c1 · q2/q(cid:101) ∈ Rn
. Both
the division and rounding are performed over the rationals.
Output (ˆc1, ˆC2)
• Recoverq1,q2 (S, (ˆc1, ˆC2)): On input the secret key S =
[−˜s | In] ∈ Rn×(n+1)
, and an encoding (ˆc1, ˆC2) where ˆc1 ∈
q2, and ˆC2 ∈ Rn×n
Rn
and output Z mod q1.
, compute Z =(cid:4)(q1/q2)(−˜sˆcT
q2 and ˆC2 = (cid:98)C2 · q1/q(cid:101) ∈ Rn×n
q and C2 ∈ Rn×n
1 )(cid:7)+ ˆC2,
, where c1 ∈ Rn
(cid:20) cT
1
C2
(cid:21)
q1
q1
q
q
IV. THE SPIRAL PROTOCOL
The structure of the basic SPIRAL protocol follows recent
constructions of PIR based on composing Regev-based encryp-
tion with GSW encryption [20, 23]. The primary difference
is that it uses the techniques from Section III for query
compression. Very brieﬂy, the database of N = 2ν1+ν2 records
is arranged as a hypercube with dimensions 2ν1×2×2×···×2.
Processing the initial (large) dimension only requires scalar
multiplication (since the database is known in the clear) and is
implemented using matrix Regev encodings. After processing
the ﬁrst dimension, the server has a (2× 2×···× 2)-hypercube
containing 2ν2 matrix-Regev encodings. The client’s index
for each of the subsequent dimensions is encoded using
GSW, so using ν2 rounds of the Regev-GSW homomorphic
multiplication, the server can “fold” the remaining elements
into a single matrix Regev encoding. We refer to Section I-B
and Fig. 1 for a general overview.
Construction IV.1 (SPIRAL). Let λ be a security parameter,
and R = Z[x]/(xd + 1) where d = d(λ) is a power of two.
Let p = p(λ) be the plaintext modulus and n = n(λ) be the
plaintext dimension.
Database structure. Each database record di is an element
, where (cid:107)di(cid:107)∞ ≤ p/2. We represent a database D =
of Rn×n
{d1, . . . , dN} of N = 2ν1+ν2 records as a (ν2 +1)-dimensional
hypercube with dimensions 2ν1×2×2×···×2. In the following
description, we index elements of D using either the tuple
(i, j1, . . . , jν2 ) where i ∈ [0, 2ν1 − 1] and j1, . . . , jν2 ∈ {0, 1},
or the tuple (i, j) where i ∈ [0, 2ν1 − 1] and j ∈ [0, 2ν2 − 1].
p
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
7936
Scheme parameters. A notable feature of our PIR protocol is
that it relies on several additional parameters that will be helpful
for enabling new communication/computation trade-offs:
• Let q = q(λ) be an encoding modulus (for the query) and
q1 = q1(λ), q2 = q2(λ) be the smaller moduli associated
with the PIR response. We require that q is odd.
• Let χ = χ(λ) be an error distribution. We use the same
error distribution for all sub-algorithms.
• Let zcoeﬀ , zconv, zGSW ∈ N be different decomposition bases
that will be used for query expansion and homomorphic
evaluation:
– zcoeﬀ is the decomposition base for evaluating the auto-
morphisms in the coefﬁcient expansion algorithm (Sec-
tion III-C and Algorithm 1);
– zconv is the decomposition base used to translate scalar
Regev encodings into matrix Regev encodings (Sec-
tion III-A); and
– zGSW is the decomposition base used in GSW encodings.
The decomposition bases are chosen to balance the server
computational costs with the total communication costs (see
Section V-A for details on how we choose these parameters).
For ease of notation, in the following, we will write GGSW
to denote the gadget matrix Gn+1,zGSW ∈ R(n+1)×mGSW
asso-
ciated with GSW encodings, where mGSW = (n + 1) · tGSW
and tGSW =(cid:4)logzGSW
q(cid:5) + 1.
q
We give the SPIRAL protocol in Fig. 2.