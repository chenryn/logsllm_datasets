## 0x01 前言
2017年11月披露的vivotek的一个栈溢出漏洞，漏洞发生在其固件中的httpd服务，其未对用户post的数据长度做校验，导致攻击者可以发送特定的数据使摄像头进程崩溃，甚至任意代码执行。这边看到后觉得挺有意思的，打算复现下。
贴一下漏洞作者放出的poc ： 
再贴一下影响版本 ：
    CC8160 CC8370-HV CC8371-HV CD8371-HNTV CD8371-HNVF2 FD8166A
    FD8166A-N FD8167A FD8167A-S FD8169A FD8169A-S FD816BA-HF2
    FD816BA-HT FD816CA-HF2 FD8177-H FD8179-H FD8182-F1 FD8182-F2
    FD8182-T FD8366-V FD8367A-V FD8369A-V FD836BA-EHTV FD836BA-EHVF2
    FD836BA-HTV FD836BA-HVF2 FD8377-HV FD8379-HV FD8382-ETV FD8382-EVF2
    FD8382-TV FD8382-VF2 FD9171-HT FD9181-HT FD9371-EHTV FD9371-HTV
    FD9381-EHTV FD9381-HTV FE8182 FE9181-H FE9182-H FE9191
    FE9381-EHV FE9382-EHV FE9391-EV IB8360 IB8360-W IB8367A
    IB8369A IB836BA-EHF3 IB836BA-EHT IB836BA-HF3 IB836BA-HT IB8377-H
    IB8379-H IB8382-EF3 IB8382-ET IB8382-F3 IB8382-T IB9371-EHT
    IB9371-HT IB9381-EHT IB9381-HT IP8160 IP8160-W IP8166
    IP9171-HP IP9181-H IZ9361-EH MD8563-EHF2 MD8563-EHF4 MD8563-HF2
    MD8563-HF4 MD8564-EH MD8565-N SD9161-H SD9361-EHL SD9362-EH
    SD9362-EHL SD9363-EHL SD9364-EH SD9364-EHL SD9365-EHL SD9366-EH
    SD9366-EHL VS8100-V2
vivotek官网固件下载地址：
## 0x02 环境搭建
#### 固件下载
vivotek官网并没有发布漏洞固件的历史版本，深夜去国外各大网站上去爬贴找资源，然鹅并没有找到，想喷一波，没有固件降级好傻，看到一堆国外友人吐槽不能版本降级。在漏洞发现者的github上找vulnable
firmware的过程中看到了有同样诉求的老哥，看来遇到战友了，果断留issue占楼。
看到作者也留言了233333333。
没办法，没有钱买vivotek摄像头，无法通过串口啥的提固件；只能去官网找技术支持，装一波升级固件后无法启动控制台的小可怜~
客服小姐姐还是很温柔的，固件到手，不忘了再github issue放一波资源。
#### 固件解包
拿到固件后binwalk跑一下，发现文件系统在`_31.extracted/_rootfs.img.extracted/squashfs-root`这个目录下
看到httpd的类型，32位的arm程序，小端，动态链接，而且符号表被裁23333333
#### 服务运行
解包以后就能看到漏洞服务httpd了，由于是arm架构，x86不能直接跑，这边用qemu模拟arm环境运行服务。
这边遇到两个坑点，一个是一开始运行httpd的时候会显示`gethostbyname::success`，然鹅httpd进程并没有成功启动，httpd文件丢ida
这边涉及两个主要函数，一个是gethostname,它获取本机主机名，将结果存放在`rlimits`变量中；另一个是gethostbyname,这个函数通过rlimits中存放的主机名寻找ip。这边由于固件hostname中的主机名和宿主机中的hostname有冲突，导致gethostbyname并不能正确的找到主机名对应的ip。
这边把宿主机和固件hosts文件中的主机名改成一致就行了。
另一个坑点就比较坑了。改完hostname并不能成功运行，httpd服务启动会报一个`Could not open boa.conf for
reading`的错，同样ida里回溯关键字符串引用，找到如下代码
发现是无法找到`/etc/conf.d/boa/boa.conf`这个文件，固件目录下看了一下发现`/etc`中的`conf.d`是一个软链接，指向`../mnt/flash/etc/conf.d`
进`../mnt/flash/etc/conf.d`看了下，发现并没有`conf.d`文件夹，emmmmmmm
一开始以为是binwalk解包方式不对，导致文件缺失，然鹅windows下用7zip提取依旧是显示缺文件；猜测`etc`文件是不是存放在其它包里，果不其然...........
找到对应版本固件的包，将其中的`etc`文件夹复制到文件系统下的
`/mnt/flash/`中覆盖原本的`etc`文件夹。看一下软连接应该是链接正常了，颜色都变了23333333，这下就能成功运行服务了。
#### 调试环境
运行漏洞作者提供的poc发现能导致httpd程序崩溃
然鹅，光能让服务崩溃最多只是个dos拒绝服务，我还想进一步的去观察，去看这个漏洞服务是否能被利用。对这个程序的调试应运而生。
调试的话需要搭建qemu虚拟机，贴下arm-debian的qemu镜像地址：`https://people.debian.org/~aurel32/qemu/armel/`
开启虚拟机：
    sudo tunctl -t tap0 -u `whoami` #这边新建一张网卡和虚拟机进行通信
    sudo ifconfig tap0 192.168.2.1/24 #给网卡配置ip
    qemu-system-arm -M versatilepb -kernel vmlinuz-3.2.0-4-versatile -initrd initrd.img-3.2.0-4-versatile -hda debian_wheezy_armel_standard.qcow2 -append "root=/dev/sda1"  -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic  #启动虚拟机镜像
之后对虚拟机进行一系列配置：
    sudo mount -o bind /dev ./squashfs-root/dev #将固件文件系统下的dev目录挂载到虚拟机/dev
    sudo mount -t proc /proc ./squashfs-root/proc #将固件文件系统下的proc目录挂载到虚拟机/proc
    ifconfig eth0 192.168.2.2/24 #配置虚拟网卡ip 使其能与主机通信
    chroot ./squashfs-root/ sh #以指定目录为根弹出一个shell
默认/dev和/proc在chroot的时候是不会挂载的，所以这边才需要手动挂载。
这边选择远程调试，因为首先要考虑到arm-debian原生镜像并不带gdb，apt-get下载太慢，交叉编译又很烦，而且更重要的是不太直观。这边其实是想ida远程调的，但是这边并没有用这种方法调，后面说原因。
//其实是尝试过交叉编译的，armgdb还好说，32位的arm-gdbserver压力就比较大了，可能qemu虚拟机撑不住，果断弃坑，用别人的多好，何必重复造轮子(滑稽)