### Resource State Management in POD-Recovery

#### 4. Populating Missing Values in Expected Resource State Templates
Resource space determination and expected resource state template generation are performed offline, prior to the sporadic operation's execution (M. Fu et al., 2016). In contrast, resource state capturing and populating missing values in expected resource state templates occur during the operation's execution, making them online procedures (M. Fu et al., 2016). This section will detail the four components of resource state management in POD-Recovery.

### 6.1 Operational Resource Space Determination
The operational resource space is the set of resources manipulated during an operation. The key input for determining this space is cloud API call logs, which record all API operations from past runs. Various cloud platforms, such as AWS CloudTrail, provide this functionality (CloudTrail, 2016). Figure 14 illustrates an example of a CloudTrail log entry for the "UpdateAutoScalingGroup" API call, showing the call time ("eventTime"), operation name ("eventName"), parameters ("requestParameters"), and response ("responseElements").

**Figure 14. CloudTrail Log.**

The process for generating the resource space involves two main steps:
1. **API Call Correlation**: Using timestamped logs from the operation process and CloudTrail logs, correlate timestamps to determine operation-related API calls.
2. **API-Resource Mapping**: Use an API-resource mapping table to identify the resources changed by each API operation. For example, the "CreateLaunchConfiguration" operation modifies "Launch Configuration" resources. This mapping table is manually created, considering the limited number of resource types and APIs in the cloud.

**Figure 15. Operation Resource Space Determination.**

For instance, in a rolling upgrade, the determined resource space includes four resource types: Instance (VM), Launch Configuration (LC), Auto Scaling Group (ASG), and Elastic Load Balancer (ELB). Each resource type has specific attributes, and the dependencies among these resources are well-defined, aligning with AWS documentation (AWS Documentation, 2016).

**Figure 16. Cloud Resource Determined for Rolling Upgrade.**

In the experimental evaluation, we will present the determined resource space for each type of sporadic operation and the average time required for resource space determination (Chapter 8).

### 6.2 Resource State Capturing
The resource state capturing service captures the states of the resources involved in the determined resource space during an operation. Unlike traditional checkpointing mechanisms that capture the entire system state, our method focuses only on the relevant resources, enhancing efficiency, especially in large-scale systems (E. N. M. Elnozahy et al., 2002; M. Fu et al., 2016).

**Figure 17. Resource State Capturing Algorithm.**

The state capturing algorithm works as follows:
1. **Retrieve Current State**: For each resource, call public cloud APIs to obtain its current state. For AWS, this involves calling functions like "DescribeInstances" or "DescribeLoadBalancers".
2. **Store Captured State**: Save the captured state information, along with the operational step it belongs to, in a variable named "CapturedState".
3. **Save Captured State**: Use the function "SaveCapturedState (CapturedState, Step)" to store the captured state and its associated step.

The state capturing service is triggered to capture the initial state at each recovery point and after recovery completion to ensure consistent resource states.

### 6.3 Expected Resource State Templates Generation
Expected resource state templates provide a detailed view of how resources are affected by each operational step. These templates are generated from historical logs of the operation (M. Fu et al., 2016).

**Figure 18. Expected Resource State Templates Generation.**

The generation process involves:
1. **Process Model Analysis**: Obtain the start and end times of each step from the process model with timestamps.
2. **API Call Correlation**: Correlate CloudTrail log entries with operational steps to get the API calls and parameters for each step.
3. **Initial Resource State Derivation**: Analyze the resource space, affected resource types, and their attributes to derive the initial resource state before the operation starts.
4. **Template Generation**: Generate the expected resource state template after each step by applying the API operations to the initial state.

An example of an initial state and an expected state template after the first step of a rolling upgrade is shown in XML format (Figure 19).

**Figure 19. Sample Expected Resource State Templates.**

In the generated templates, variables are represented with question marks (e.g., "?newLC"). At runtime, these variables are populated with actual values from the operation's logs. The expected resource state templates are stored for use by the runtime recovery service.

### 6.4 Populating Missing Values in Expected Resource State Templates
Missing values in the generated expected resource state templates are populated at runtime during the execution of the sporadic operation (M. Fu et al., 2016). This is achieved by resolving the generated operation logs and matching them with relevant regular expressions.

**Table 5. Regular Expressions Matching.**

| Missing Value | Regular Expression |
|---------------|--------------------|
| Old LC id     | Updating launch from (?\w+) with (?\w+) into (?\w+) |
| New AMI id    | Updating launch from (?\w+) with (?\w+) into (?\w+) |
| New LC id     | Updating launch from (?\w+) with (?\w+) into (?\w+) |
| New LC AMI id | Updating launch from (?\w+) with (?\w+) into (?\w+) |
| ASG id        | Updating group (?\w+) to use launch config (?\w+) |
| ELB Deregistered Instances id | Deregistered instances (?\w+) from load balancer (?\w+) |
| ELB id        | Deregistered instances (?\w+) from load balancer (?\w+) |
| Terminated Instance id | Terminating instance (?\w+) |
| Newly Launched Instance id | It took (?\w+) for instance (?\w+) to terminate and be replaced by (?\w+) |
| ELB Registered Instances id | Registered into load balancer (?\w+) instances (?\w+) |

Programming frameworks such as .Net framework 3.5 or Java SDK 2.0 support resolving log information and matching it with regular expressions to populate missing values (M. Fu et al., 2016).

### Chapter 7. Recovery Actions Generation & Selection in POD-Recovery

This chapter outlines the major online activities of POD-Recovery:
1. Handling false positives of error detection.
2. Describing eight recovery patterns.
3. Filtering applicable recovery patterns.
4. Generating recovery actions.
5. Evaluating applicable recovery actions based on three metrics.
6. Selecting acceptable recovery actions from candidates.
7. Mapping selected recovery actions into executable code.

### 7.1 Handling False Positives of Error Detection
POD-Diagnosis, an existing failure detection service, detects failures and errors in sporadic operations on the cloud by analyzing operational logs and calling cloud APIs (X. Xu et al., 2014). However, it can produce false positives, which must be handled to prevent unnecessary recovery actions (M. Fu et al., 2016).

Two types of false positives are considered:
1. No actual error, but the error detection service reports one.
2. Transient errors that disappear before recovery is initiated.

To reduce false positives, the recovery service checks the current state of relevant cloud resources before initiating recovery. If the current state differs from the erroneous state identified by the error detection service, no recovery is triggered (M. Fu et al., 2016).

### 7.2 Eight Recovery Patterns
The eight recovery patterns proposed for sporadic operations on the cloud are derived from long-running transaction research (C. Colombo et al., 2013). These patterns provide a comprehensive approach to recovery, considering the unique features of cloud operations, such as heavy reliance on virtual resources and frequent API interactions.

**Figure 20. Eight Recovery Patterns.**

The eight recovery patterns are:
1. **Compensated Undo & Redo**
2. **Compensated Undo & Alternative**
3. **Rewind & Replay**
4. **Rewind & Alternative**
5. **Reparation**
6. **Direct Redo**
7. **Direct Alternative**
8. **Farther Undo & Redo**

Each pattern specifies a sequence of state transitions from the erroneous state (S_err) to the expected state (S2). For example, in Compensated Undo & Redo, the flow is "S_err -> S1 -> Step X -> S2". If recovery fails, a "recovery for recovery" mechanism is triggered to correct the system state (M. Fu et al., 2016).

These patterns cover all possible paths and state transitions, ensuring at least one pattern is applicable for any sporadic operation on the cloud. If none of the patterns are applicable, the operation is deemed unrecoverable.