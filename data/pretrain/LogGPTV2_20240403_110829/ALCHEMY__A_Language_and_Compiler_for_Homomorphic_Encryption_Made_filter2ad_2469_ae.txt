### DSL Addition of Ciphertexts

The addition of ciphertexts in the DSL is straightforward, leading to a simple `Add_` instance:

```haskell
instance (Add_ ctex (Cyc2CT m'map zqs a), Applicative mon) => Add_ (PT2CT m'map zqs gad ctex mon) a where
    add_ = PC $ pure add_
    neg_ = PC $ pure neg_
```

Here, `add_` embeds the ciphertext-DSL function `add_` into the host-language (applicative) monad `mon`, and similarly for `neg_`.

### Multiplication

In contrast, translating plaintext multiplication to a fully homomorphic ciphertext multiplication is more complex, but the code remains relatively concise given the amount of work it performs:

```haskell
instance (Lambda_ ctex, SHE_ ctex, Mul_ ctex (PreMul_ ...),
          MonadAccumulator Hints mon,
          MonadAccumulator Keys mon,
          MonadRandom mon, ...) => Mul_ (PT2CT m'map zqs gad ctex mon) (PNoiseCyc p m zp) where
    mul_ = PC $
        lamM $ \x -> lamM $ \y -> do
            modSwitch_ $: var x *: var y
            keySwitchQuad_ hint .:
                hint  LinearCyc_ (PT2CT m'map zqs gad ctex mon) (PNoiseCyc p) where
                    linearCyc_ f = PC $
                        lamM $ \x -> do
                            tunnel_ hint .:
                                modSwitch_ $: var x
                                hint  expr env (_ -> PNoiseCyc 0 H5 (Zq 2))
```

The output type is monomorphized as required for plaintext-to-ciphertext compilation, with the `pNoise` parameter set to zero to indicate that no further homomorphic operations are needed on the output.

### Rounding Homomorphically

Next, we use `PT2CT` to compile the plaintext-DSL function `ringRound` to a ciphertext-DSL function that homomorphically rounds the coefficients of an encrypted input. We need to specify types for the cyclotomic indices of ciphertext rings and available ciphertext moduli:

```haskell
type H0' = H0 * 7 * 13
type H1' = ...
type M'Map = [(H0, H0'), (H1, H1'), ...]
type Zqs = [Zq $(mkModulus 1543651201), ...]
```

The type `M'Map` associates each plaintext ring index with its ciphertext ring index, and `Zqs` is a collection of `Zq` types that `PT2CT` combines to assign large enough moduli to each ciphertext.

With these types defined, compiling the plaintext computation to its homomorphic counterpart is straightforward:

```haskell
homomRingRound = pt2ct @M'Map @Zqs @TrivGad ringRound
```

Note that `pt2ct` yields a monadic value, where the monad needs to support generation and accumulation of keys and hints. Therefore, `homomRingRound` must be used in an appropriate monadic context.

### Homomorphic PRF Evaluation

With `homomRingRound`, we can implement homomorphic evaluation of RLWR-based PRFs. The simplest such PRF is defined as \( F_s(x) = \lfloor H(x) \cdot s \rceil_2 \), where \( H: X \to R_p \) is a hash function modeled as a random oracle mapping the PRF input space to \( R_p \), and \( \lfloor \cdot \rceil_2 \) denotes the ring-rounding function.

Given an FHE encryption \( \text{enc}(s) \) of the secret key \( s \in R_p \) and an input \( x \), we first compute the hash value \( a = H(x) \in R_p \). We then use the FHE’s multiply-by-a-public-value operation to get an encryption \( \text{enc}(a \cdot s) \). Finally, we apply homomorphic ring rounding to get an encryption of the PRF output \( \lfloor a \cdot s \rceil_2 \).

The following code chooses a uniformly random PRF key \( s \in R_p \) and returns \( s \), a host-language function \( f \) that maps any \( a \in R_p \) to \( F_s(x) \), and the corpus of generated FHE keys that allows for decrypting the result:

```haskell
homomRLWR = do
    s <- genRandomKey
    let f a = homomRingRound (mulPublic (encrypt s) a)
    return (s, f, keys)
```

Here, `homomRLWR` is a monadic value, where the monad just needs to provide a source of randomness. The call to `runKeysHints` sets up the additional "accumulator monad" context required by `homomRingRound`, and outputs the desired host-language function \( f \) along with all the generated FHE keys and hints (the latter of which we ignore as unneeded).

### Parameters, Security, and Performance

The concrete cyclotomic ring indices and ring dimensions used are provided in Figure 2. Our PRF uses a modulus of \( p = 2^5 = 32 \). The entire corpus of ciphertext moduli is less than \( 2^{180} \).

According to the "core-SVP" methodology for estimating the security of LWE/LWR parameters, our FHE and PRF parameters have at least 100 bits of security (and this is likely a significant underestimate).

On an iMac (Retina 5k) late-2015 model with a 4 GHz Core i7 and 16 GB RAM, homomorphic evaluation of the PRF itself (after generating all keys and hints) takes only 10–11 seconds for each of several runs. Generating the keys and hints takes about 150 seconds, primarily due to a very naive implementation of finite-field arithmetic in Λ◦λ, which is used for computing `decToCRT`. These performance figures were achieved with no compiler optimization flags turned on (ghc-8.0.2), so even better performance may be possible; however, certain flags cause compilation to take a great deal of time and memory.

### Cyclotomic Ring Indices

| CT Ring Index \( m' \) | PT Ring Index \( m \) | Dimension \( \phi(m') \) |
|------------------------|-----------------------|--------------------------|
| \( H'_0 = H_0 \cdot 7 \cdot 13 \) | \( H_0 = 2^7 \) | 4,608 |
| \( H'_1 = H_1 \cdot 5 \cdot 13 \) | \( H_1 = 2^6 \cdot 7 \) | 9,216 |
| \( H'_2 = H_2 \cdot 3 \cdot 5 \) | \( H_2 = 2^5 \cdot 7 \cdot 13 \) | 9,216 |
| \( H'_3 = H_3 \cdot 3 \cdot 5 \) | \( H_3 = 2^3 \cdot 5 \cdot 7 \cdot 13 \) | 11,520 |
| \( H'_4 = H_4 \cdot 5 \) | \( H_4 = 2^2 \cdot 3 \cdot 5 \cdot 7 \cdot 13 \) | 5,760 |
| \( H'_5 = H_5 \cdot 5 \) | \( H_5 = 2^0 \cdot 3^2 \cdot 5 \cdot 7 \cdot 13 \) | 8,640 |

### References

[1] Martin R. Albrecht, Christian Rechberger, Thomas Schneider, Tyge Tiessen, and Michael Zohner. 2015. Ciphers for MPC and FHE. In EUROCRYPT. 430–454.

[2] Erdem Alkim, Léo Ducas, Thomas Pöppelmann, and Peter Schwabe. 2016. Post-quantum Key Exchange - A New Hope. In USENIX Security Symposium.

[3] Jacob Alperin-Sheriff and Chris Peikert. 2013. Practical Bootstrapping in Quasi-linear Time. In CRYPTO. 297–314.

[4] Jacob Alperin-Sheriff and Chris Peikert. 2014. Faster Bootstrapping with Polynomial Error. In CRYPTO. 1–20.

[5] Abhishek Banerjee and Chris Peikert. 2014. New and Improved Key-Homomorphic Pseudorandom Functions. In CRYPTO. 353–370.

[6] Abhishek Banerjee, Chris Peikert, and Alon Rosen. 2012. Pseudorandom Functions and Lattices. In EUROCRYPT. 719–737.

[9] Dan Bogdanov, Sven Laur, and Jan Willemson. 2008. Sharemind: A Framework for Fast Privacy-Preserving Computations.

[12] Zvika Brakerski, Craig Gentry, and Vinod Vaikuntanathan. 2014. Fully Homomorphic Encryption without Bootstrapping.