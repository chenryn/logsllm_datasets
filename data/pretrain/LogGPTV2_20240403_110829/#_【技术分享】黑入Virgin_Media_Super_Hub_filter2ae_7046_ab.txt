当我们掌握了TAR文件和CRC32校验和后，我们需要制作自己的备份文件，这些文件能被路由器接收和解析。
此时，我们知道如何构建一个有效的配置文件blob并把它交由路由器处理，但实际上我们能做些什么？回溯到VmRgBackupCfgCgi，它告诉我们该文件是如何被处理的，这是我们漏洞的出发点。一旦配置文件有效，运行以下命令将路由器上的/var/tmp/backup_var打包成Tar文件：
    tar -xf /var/tmp/backup_var -C /
该命令非常强大。它会以root身份，将我们提交到Super
Hub文件系统根目录下的TAR文件进行解压缩，就像是任意文件的写/覆盖操作。虽然该命令的主要作用不在此，但这个功能反而经常被使用。所有被覆盖的配置文件包含在/nvram文件夹下。那么可以覆盖什么呢？乍看之下，我们可以进行任意的文件覆盖，但实际上有一些限制。大部分的Super
Hub文件系统被挂载为只读squashFs（一套基于Linux内核使用的压缩只读文件系统）。当Super Hub运行时，只有少数几个有趣的区域是可写的：
    /nvram
    /var
    /tmp (/var/tmp的符号链接)
    /etc文件夹下的一些文件 (实际上是/tmp的符号链接)
在文件系统的这些可写部分中，需要找到一个我们可以写/覆盖的文件，让我们进一步访问路由器。幸运的是，在/etc/init.d/we中，我们发现启动脚本rcS是一个不错的选项。
Super
Hub路由器使用rcS文件启动重要的服务，如设置内核参数和系统设置。该脚本在每次路由器启动时调用。在脚本的各种功能之中，有一部分吸引了我们的注意：
这一部分检查文件/nvram/0/sys_setup.sh是否存在，如果存在，则执行该文件。但Super
Hub的固件中不包含此文件，因此进入“else”子句，执行几个服务启动命令。这部分脚本非常有用。我们对 /nvram
具有写入权限，而且为保证每次启动后的可靠执行，重新启动后也是如此。现在我们可以将任意的文件写入脚本的其余部分（可能来自调试或个人系统定制），以完全控制Super
Hub。
为了利用这个缺陷，我们创建一个/nvram/0/的本地目录，并在其中创建sys_setup.sh文件。然后对其进行压缩、CRC32检验、加密，以创建有效的配置文件备份。一旦提交到路由器，它将被解密、验证，然后解压到文件系统的根目录。作为备份/复原过程的一部分，Super
Hub的重启会很好的帮助脚本的执行。为了测试我们的理论，我们创建了一个删除防火墙规则的脚本，并编写了一个C程序对其进行打包备份。如下所示上传成功。
等待系统完全启动后，我们重新扫描Super
Hub，看看我们对防火墙规则的修改是否具有预期的效果（见下图）。值得一提的是，这是局域网的端口扫描——因为我们实验室没有有线广域网的连接，但telnet守护进程正在监听所有接口。
尝试连接发生了异常。刚建立与Super Hub的连接，在没有任何提示之前连接又被释放。我们转向定制的utelnetd二进制文件来查找原因。
utelnetd是一个小型二进制文件，它实现了telnet协议，并将一个外部TCP流连接到一个内部程序。该内部程序在Super
Hub上默认为/bin/sh。Super
Hub已经对该默认的开源版本进行了修改，以添加一些新功能。逆向该二进制文件查找接受连接的位置，我们可以看到其中一个修改：
反汇编中的第一个基本块显示Super
Hub通过调用库函数accept（）接受连接。第二个基本块是代码被修改的地方。基于函数调用（BLX指令）的返回值决定连接是继续还是终止。调用该函数核查某种内部状态，看看是否允许telnet访问。具体检查什么？有什么办法可以从我们的脚本中修改这个设置？
答案存在于从utelnetd导入的共享库中。这个共享库大部分是帮助函数，这些帮助函数获取和设置Super
Hub的各种持久参数。进一步的逆向表明，它实现了一个内存中的数据库，在启动时从/nvram目录下的一系列配置文件中读取设置，并不受重启/关机过程的影响。如前所述，/
nvram目录由一系列编号的目录和文件组成，是合法的备份。事实证明，每个文件都是TLV编码。
下图中，我们可以看到一些熟悉的字符串，如我们的管理用户名和密码。
上面的图片显示了其中一个配置文件的部分内容，具体支持ManagementDb（其他文件支持其他方面，例如PortForwardingDb，MacFilteringDb等）。每个文件以28字节的头文件（红色）开始，之后是一系列TLV（Type-length-value类型长度值）编码。在这种情况下，“type”指定记录号（绿色）。
其次是“length”值（绿色），type和length都是2字节。最后是指定字节长度的”value”字节（橙色）。每条记录都记录了Super
Hub某一方面详细的配置信息。对/nvram文件夹下各种二进制文件的逆向之后，我们知道第10条记录用来标记telnet访问是否可用。它是一个单字节值，0为禁用telnet，1为启用telnet。
在系统启动时，首先读取配置文件，然后在内存中管理Super
Hub的运行时间。如果我们可以在启动nvram服务之前翻转启用telnet的字节（0转为1），那么我们可以为设备启用telnet。可以在恶意脚本中插入以下内容实现这一点：
    printf ‘x01’ | /bin/dd of=/nvram/9/5 bs=1 seek=534 count=1 conv=notrunc
它会强制开启telnet访问，删除防火墙后，我们甚至可以在任何接口上连接到telnet服务。最后使用从配置文件中收集到的凭据，我们得到了root
shell：
**  
**
**泄露**
这些问题一经发现，Context便将其报告给Virgin Media，并提供了Poc。Virgin
Media在验证了我们的发现后，与我们合作开发了一套缓解措施，并将其作为现有固件周期补丁的一部分发布出来。感谢Virgin
Media与Context在解决这个问题时的专业性和响应能力。
以下是主要事件的时间轴：
2016年10月20日：通过[http://virginmedia.com/netreport](http://virginmedia.com/netreport)第一次披露
2016年10月20日：VM的互联网安全小组请求Context提供的更详细的说明
2016年10月24日：Context和Virgin Media召开电话会议，详细讨论。Context给出Poc。
2010年11月-2017年2月：Virgin Media与Netgear和Context合作开发和测试两种设备的补丁
2017年5月：作为定期固件更新的一部分Virgin Media推出补丁