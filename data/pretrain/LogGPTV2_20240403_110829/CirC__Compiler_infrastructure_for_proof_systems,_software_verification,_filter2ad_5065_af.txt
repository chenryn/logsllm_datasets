loop unrolling—as a case study. To embed a loop like the one
in Figure 17 in an EQC, the compiler must unroll it some
number of times N, and in some cases emit an assertion
that
the
resulting circuit won’t handle some valid executions; if N is
too large, the extra unrollings increase circuit size, and thus
solving or proving time. Precisely determining N guarantees
completeness while minimizing circuit size.
For this case study, we extend CirC (≈18 LOC) to use an
SMT solver to determine the maximum number of iterations of
a loop. Obviously this approach cannot work for all programs,
but it is quite effective for some: for the u32log2 function of
Figure 17, CirC and the SMT solver determine that N = 32
in well under one second. Figure 18 shows the workﬂow for
Figure 18. Workﬂow for determining loop bounds with SMT while compiling
to R1CS. Incrementally compiled circuit fragments are lowered to SMT for
analysis. An UNSAT result causes unrolling to end.
u32log2. Initially, the loop is unrolled once into CirC-IR
which is is lowered to SMT that is satisﬁable, so unrolling
continues. After 33 unrollings, the corresponding SMT is now
unsatisﬁable, so the IR for 32 unrollings is used to ﬁnish
compiling to CirC-IR. The ﬁnal IR is lowered to R1CS for
use in a proof system, the intended target.
In future work we hope to improve this technique, e.g.,
by using the SMT solver’s incremental mode, and to use the
SMT solver for more complex R1CS optimizations.
7.2. Analyzing ZKlog with SMT
Our ZKlog compiler (based on CirC v2.0) does not limit
recursion when a rule that is annotated as primitive recursive
is applied to decreasing compile-time-constants (§4)—but it
can be difﬁcult to tell if a rule is primitive recursive at all.13
Consider a rule r with arguments x1, . . . , xm that (without loss
of generality) purports to be primitive recursive in x1. Now,
consider a recursive case c for rule r that binds existential
variables xm+1, . . . , xn with conditions t1 ∧ ··· ∧ t(cid:96) such
that (without loss of generality) condition t1 is the recursive
application of rule r where the ﬁrst argument depends only
on x1. Thus, the case c encodes the implication:
[∃xm+1, . . . , xn. r(f (x1), . . .)∧t2∧···∧t(cid:96)] → r(x1, . . . , xm)
13. Other languages that consider primitive recursion (e.g., Gallina, the
language of Coq [133]) occasionally require the programmer to prove to the
compiler that a recursion is primitive.
2260
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
For this to be a primitive recursion, it sufﬁces to show that
the other conditions in c imply f (x1) < x1. That is, that the
following is unsatisﬁable:
(f (x1) ≥ x1) ∧ t2 ∧ ··· ∧ t(cid:96)
(1)
Our analysis pass checks this property by lowering it to
SMT. The programmer can run the analysis on any rule that
they’ve annotated as primitive recursive. If (1) is UNSAT
for each recursive case, then the rule may be applied to any
compile-time constant without introducing incompleteness.
7.3. Automatically ﬁnding and proving bugs
Bug bounties are a popular way for software companies
to incentivize bug reporting, by offering cash rewards to re-
porters. But the incentives in these programs are imperfect. As
examples, a company might accept a bug report but refuse to
pay a bounty; or it might refuse to acknowledge a severe bug,
leaving the reporter with an uncomfortable choice between
remaining silent and publicly revealing the bug’s details, both
of which could harm innocent users. One way to address
problems like this may be to prove the existence of bugs in
zero knowledge; in fact, this application is a key element of
an ongoing DARPA program [134, 135].
Prior work [136–138] constructs manual proof-of-bug
pipelines, but none automatically detects bugs and then auto-
matically proves their existence in zero knowledge: existing
compilers to R1CS have no way of automatically detect-
ing bugs, and existing SMT-based veriﬁers have no way of
generating zero-knowledge proofs. In fact, just proving the
presence of many types of bugs is beyond the reach of existing
proof compilers that, like Pequin [108] (§5.1), model language
semantics too imprecisely (§4.1). Since CirC models language
semantics precisely (§5.3) and can embed those semantics into
both SMT and R1CS, CirC seems ideally suited to building a
semi-automated proof-of-bug pipeline.
But zero-knowledge proofs-of-bug generally, and auto-
mated pipelines in particular, are still unrealistic. The main is-
sue is that proof systems and SMT solvers both fall hopelessly
short of practical applicability to production-sized codebases.
Naively, this means that proving the existence of a bug in a
large system might require ﬁrst isolating the buggy code and
then generating a proof—in the process revealing the bug’s
location and potentially allowing anyone to rediscover it!
Nevertheless, we see two strong reasons to hope for a
path forward, with CirC as a key component. First, recent
theoretical advances in efﬁcient proofs of disjunctions [139–
142] promise proof systems well suited to proving statements
like “there is a bug in one of the thousands of functions in
this codebase”—and CirC makes it easy to marry such proof
systems to SMT-based bug-ﬁnding techniques.14 Second, prior
work shows that tools capable of detecting subtle bugs or
verifying complex properties often rely on analysts’ expert
knowledge [88, 101]—of a class of bug, of a codebase, or even
of the SMT solver itself [143]. In the case of solver-based bug
ﬁnding, furnishing expert hints to the solver can dramatically
1 #define mul_add_c2(a,b,c0,c1,c2)
2
BN_ULONG ta=(a),tb=(b),t0;
BN_UMULT_LOHI(t0,t1,ta,tb);
t2 = t1+t1; c2 += (t2<t1)?1:0;
t1 = t0+t0; t2 += (t1<t0)?1:0;
c0 += t1; t2 += (c0<t1)?1:0;
c1 += t2; c2 += (c1<t2)?1:0;
3
4
5
6
7
{ \
\
\
\
\
\
}
Figure 19. Incorrect carry handling in OpenSSL, responsible for CVE-2014-
3570 (§7.3). Appendix C explains the bug in detail.
#include "stdint.h"
int wrapper(uint64_t a, uint64_t b, uint64_t c2,
uint64_t c1, uint64_t c0) {
uint64_t cc2 = c2, cc1 = c1, cc0 = c0;
mul_add_c2(a, b, c2, c1, c0);
"SMT_assert: (= (concat c2 c1 c0) (+ (concat cc2
cc1 cc0) (* [192]2 (uext 128 a) (uext 128 b))";
(cid:44)→
return 0;
}
Figure 20. Function wrapper for mul_add_c2 with assertion of correct
behavior (§7.3). CirC’s assertion language is more verbose; we simplify for
brevity. BN_ULONG’s size depends on the architecture; we use 64 bits.
increase the reach of bug-ﬁnding tools. Crucially, a zero-
knowledge proof of a bug’s existence does not reveal these
expert hints; as a result, knowing the approximate location of
a bug may not help non-experts rediscover it.
As a proof of concept, we augment CirC’s C front-end with
support for assertions and assumptions (≈60 LOC). Codebase
owners use assertions to specify intended behavior. Consider
a small example: the macro mul_add_c2 (Fig. 19). It is
intended to compute c = c + 2*a*b, where c is a multi-
precision integer comprising three words, c0, c1, and c2.
Figure 20 shows how a codebase owner would add an assertion
of this behavior. Unfortunately, the macro mishandles integer
overﬂow (see App. C for details). Indeed, an analyst who
compiles the macro and assertion to SMT can ﬁnd a violation
using the Z3 SMT solver in ≈700 seconds. The analyst can
then produce a zero-knowledge proof that the codebase owner
can verify in milliseconds (Figure 21). The above pipeline is
impractical for larger programs and more complex properties,
since the solving step quickly becomes intractable.
Assumptions allow the security analyst to use their ex-
the analyst encodes
pertise to make bug-ﬁnding tractable:
facts about the program or its potential bugs that reduce the
SMT solver’s search burden. As an example, consider again
mul_add_c2 (Fig. 19). Since overﬂow is a traditional source
of bugs, and mul_add_c2 does not explicitly handle over-
ﬂow caused by its increment steps, the analyst may suspect
that overﬂow as a possible bug source. With an (overﬂow)
assumption that t2 == 0 && c0 < t1 after line 6, the
SMT solver can ﬁnd a bug after only 2.5s. This improves
on the unassisted search time by more than two orders of
magnitude, but expert assumptions can also allow the solver
to ﬁnish when it was unable to previously (e.g., [144, §4.2]).
7.4. Automatically ﬁnding and proving high-value
inputs
14. Standard ZKPs give disjunction proofs with proving time dependent
on the sum of the disjunct sizes. The recent advances yield proving time
dependent on the maximum disjunct size.
CirC also supports proofs of high-value (which is very
similar to proof-of-bug). Let f (x) → y be a function, and y0
be a threshold output. A proof of high-value shows that one
2261
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
Owner
Analyst
C program
& assertions
1) compile
R1CS
2) ZKP setup
6) ZKP verify
(cid:88)/×
Public
Params.
Proof
Hints
3) compile
SMT
formula
4) solve
Bad input
5) ZKP prove
Figure 21. Workﬂow for ﬁnding and proving bugs (§7.3). Left steps are
performed by the codebase owner; right steps by the analyst. (Step 2 samples
cryptographic parameters for the zero-knowledge proof system.)
knows an x such that φ(x, y0) := f (x) ≥ y0, without revealing
x. Proofs of high-value might be applied to optimization
competitions. In an optimization competition (e.g., a Kaggle
competition [145] or the ARPA-E Grid Optimization Com-
petition [146]), competitors submit parameters which maxi-
mize an objective function, and high-performing competitors
receive a reward. This setup has a similar drawback to bug
bounty programs (§8): if competitors submit their parameters
in the clear, then the competition operator could choose not to
compensate them—but zero-knowledge proofs of high-value
avoid this counterparty risk.
With CirC it’s easy to compile an objective function
and constraints to an optimization format (e.g., an ILP) for
ﬁnding high-value solutions. Then, it’s easy to compile the
same objective function to a proof-system constraint format
(like R1CS) for writing zero-knowledge proofs. (Just as in
the previous section, making this pipeline realistic requires
using human insight to assist the ILP solver.) As a proof of
concept, we build an automated pipeline for proofs of high-
value (similar to Figure 21, but with an ILP solver in place of
an SMT solver). The pipeline (≈30 LOC) takes a function f
and (a) compiles the predicate φ(x, y) := f (x) ≥ y to R1CS,
(b) compiles f to an ILP, (c) solves the ILP to ﬁnd an x∗ such
that f (x∗) = y∗, and ﬁnally, (d) writes a zero-knowledge proof
of knowledge of an x∗ that satisﬁes φ(x∗, y∗).
8. Discussion, future work, and conclusion
Targeting other applications. CirC has applications beyond
SMT, ILP, and proof systems. As one example, CirC could
support multi-party computation (MPC), which enables mutu-
ally distrusting parties to collaboratively evaluate a function
while revealing only the result [19]. MPC frameworks require
the function to be expressed as a boolean [147] or arithmetic
circuit [148–150], where each input is labeled with the parties
that know its value. Thus, extending CirC to MPC applications
would require adding support for these ﬁne-grained knowledge
labels. Even after this modiﬁcation, however, lowering CirC-
IR to MPC targets requires care when handling existential
quantiﬁers. We conjecture that
in many (and perhaps all)
cases, these quantiﬁers can be transformed either into private
inputs supplied by one party, or into values computed from
the private inputs of multiple parties. A related transformation
is implicit in the seminal work of Ishai et al. on constructing
zero-knowledge proofs via MPC protocols [151].
Program analysis infrastructure. CirC supports IR-level
optimizations, but sophisticated static analysis infrastructure—
at both the language and IR level—would improve most
compilation pipelines. For example, CirC could use a range
analysis to shrink IR-level bit-vectors, which would make
their R1CS embedding more efﬁcient. As another example,
designers could build analyses into their language front-end,
e.g., to select the cryptographic protocol that gives the best
efﬁciency on a particular program [48, 61, 62, 152]. Designing
new analyses of this kind is future work.
Beyond static analyses, there is potential to leverage more
powerful SMT-based analyses in CirC. Section 7 shows that
CirC’s SMT target can be used to search for loop bounds.
One could also imagine searching for loop invariants, tighter
range bounds, aliasing relationships, and more. The program
veriﬁcation literature is full of SMT-based analyses which may
be useful for optimizing the size of emitted circuits.
Combining CirC with existing veriﬁers. It may be inter-
esting to combine CirC with modern veriﬁcation machinery.
For example, CirC could beneﬁt from SMACK’s [25] front-
end–based optimizations, while Boogie front-ends [22] could
beneﬁt from targeting cryptographic applications.
Conclusion. In this work, we show how CirC makes it easy
to compile new source languages, support new EQC targets,
and write optimizations that apply to multiple pipelines: all
of these can be done with very little code, and all yield
high-quality compiler output. Moreover, with CirC it’s easy to
combine different EQC compilation pipelines to support novel
applications., e.g., automatically ﬁnding bugs and proving
their existence. In short: shared infrastructure for constraint
compilers is both possible and useful.
Acknowledgments
We are grateful to Sebastian Angel, Clark Barrett, Andrew
Blumberg, Dan Boneh, Patrick Cousot, Dawson Engler, Ranjit
Jhala, Soren Lerner, Andres N¨otzli, Deian Stefan, Michael
Walﬁsh, and Thomas Wies for helpful conversations. We thank
the anonymous reviewers and our shepherd, Trevor Perrin, for
making our work stronger with their careful feedback. This
work was supported in part by the NSF, the Stanford Center
for Blockchain Research, and the Simons Foundation. It was
also supported by DARPA under Agreement HR00112020022.
The views in this paper are the authors’ and do not necessar-
ily represent the views of the United States Government or
DARPA. Riad’s work was partly supported by Algorand.
References
[1]
E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers,
E. Tromer, and M. Virza, “Zerocash: Decentralized anonymous
payments from Bitcoin,” in IEEE S&P, May 2014.
D. Hopwood, S. Bowe, T. Hornby, and N. Wilcox, “Zcash protocol
speciﬁcation.” https://zips.z.cash/protocol/protocol.pdf, 2016.
B. Whitehat, “roll up: Scale ethereum with SNARKs.”
https://github.com/barryWhiteHat/roll up.
S. Bowe, A. Chiesa, M. Green, I. Miers, P. Mishra, and H. Wu,
“ZEXE: Enabling decentralized private computation,” in IEEE S&P,
May 2020.
[2]
[3]
[4]
2262
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
[5]
[6]
[7]
[8]
[9]
J. Lee, K. Nikitin, and S. Setty, “Replicated state machines without
replicated execution,” in IEEE S&P, May 2020.
A. Ozdemir, R. S. Wahby, B. Whitehat, and D. Boneh, “Scaling
veriﬁable computation using efﬁcient set accumulators,” in USENIX
Security, Aug. 2020.
B. Braun, A. J. Feldman, Z. Ren, S. Setty, A. J. Blumberg, and