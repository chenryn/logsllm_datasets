```  
使用 pgdecimal    
```    
psql    
postgres=# create extension decimal;    
CREATE EXTENSION    
```    
### 3. pgdecimal性能对比numeric    
使用int8, float8, decimal64, decimal128, numeric(15,3) 几种类型，分别比较这几种类型的性能。    
```    
create table tt(ii bigint, d double precision, d64 decimal64, d128 decimal128, n numeric(15, 3));    
postgres=# \timing    
Timing is on.    
```  
生成测试数据    
```  
postgres=# insert into tt select i, i + 0.123, i + 0.123::decimal64, i + 0.123::decimal128, i + 0.123 from generate_series(1, 1000000) i;    
INSERT 0 1000000    
postgres=# select * from tt limit 2;    
 ii |   d   |  d64  | d128  |   n       
----+-------+-------+-------+-------    
  1 | 1.123 | 1.123 | 1.123 | 1.123    
  2 | 2.123 | 2.123 | 2.123 | 2.123    
(2 rows)    
postgres=# \d tt  
                     Table "public.tt"  
 Column |       Type       | Collation | Nullable | Default   
--------+------------------+-----------+----------+---------  
 ii     | bigint           |           |          |   
 d      | double precision |           |          |   
 d64    | decimal64        |           |          |   
 d128   | decimal128       |           |          |   
 n      | numeric(15,3)    |           |          |   
postgres=# select pg_column_size(ii), pg_column_size(d),pg_column_size(d64),pg_column_size(d128),pg_column_size(n) from tt limit 1;  
 pg_column_size | pg_column_size | pg_column_size | pg_column_size | pg_column_size   
----------------+----------------+----------------+----------------+----------------  
              8 |              8 |              8 |             16 |              7  
(1 row)  
```  
普通查询性能对比    
```   
postgres=# select count(*) from tt where (d + d*d + d*d*d + d*d*d*d) > 10000000;    
 count    
--------  
 999945  
(1 row)  
Time: 184.109 ms  
postgres=# select count(*) from tt where (n + n*n + n*n*n + n*n*n*n) > 10000000;    
 count    
--------  
 999945  
(1 row)  
Time: 572.717 ms  
postgres=# select count(*) from tt where (d64 + d64*d64 + d64*d64*d64 + d64*d64*d64*d64) > 10000000;    
 count    
--------  
 999945  
(1 row)  
Time: 910.323 ms  
postgres=# select count(*) from tt where (d128 + d128*d128 + d128*d128*d128 + d128*d128*d128*d128) > 10000000;   
 count    
--------  
 999945  
(1 row)  
Time: 1205.731 ms (00:01.206)  
```    
排序性能对比    
```   
postgres=# select * from tt order by d limit 2 offset 999000;    
   ii   |     d      |    d64     |    d128    |     n        
--------+------------+------------+------------+------------  
 999001 | 999001.123 | 999001.123 | 999001.123 | 999001.123  
 999002 | 999002.123 | 999002.123 | 999002.123 | 999002.123  
(2 rows)  
Time: 426.318 ms  
postgres=# select * from tt order by n limit 2 offset 999000;    
   ii   |     d      |    d64     |    d128    |     n        
--------+------------+------------+------------+------------  
 999001 | 999001.123 | 999001.123 | 999001.123 | 999001.123  
 999002 | 999002.123 | 999002.123 | 999002.123 | 999002.123  
(2 rows)  
Time: 550.317 ms  
postgres=# select * from tt order by d64 limit 2 offset 999000;   
   ii   |     d      |    d64     |    d128    |     n        
--------+------------+------------+------------+------------  
 999001 | 999001.123 | 999001.123 | 999001.123 | 999001.123  
 999002 | 999002.123 | 999002.123 | 999002.123 | 999002.123  
(2 rows)  
Time: 454.495 ms  
postgres=# select * from tt order by d128 limit 2 offset 999000;    
   ii   |     d      |    d64     |    d128    |     n        
--------+------------+------------+------------+------------  
 999001 | 999001.123 | 999001.123 | 999001.123 | 999001.123  
 999002 | 999002.123 | 999002.123 | 999002.123 | 999002.123  
(2 rows)  
Time: 521.732 ms  
```  
哈希JOIN性能对比    
```    
postgres=# explain select count(*) from tt t1 join tt t2 on t1.d64 * t1.d64 + t1.d64 = t2.d64 + t2.d64 * t2.d64;   
                                    QUERY PLAN                                      
----------------------------------------------------------------------------------  
 Aggregate  (cost=6444771894.00..6444771894.01 rows=1 width=8)  
   ->  Hash Join  (cost=35867.50..5273007844.00 rows=468705620000 width=0)  
         Hash Cond: (((t1.d64 * t1.d64) + t1.d64) = (t2.d64 + (t2.d64 * t2.d64)))  
         ->  Seq Scan on tt t1  (cost=0.00..19982.00 rows=968200 width=8)  
         ->  Hash  (cost=19982.00..19982.00 rows=968200 width=8)  
               ->  Seq Scan on tt t2  (cost=0.00..19982.00 rows=968200 width=8)  
(6 rows)  
Time: 1.487 ms  
postgres=# select count(*) from tt t1 join tt t2 on t1.d64 * t1.d64 + t1.d64 = t2.d64 + t2.d64 * t2.d64;   
  count    
---------  
 1000000  
(1 row)  
Time: 1785.457 ms (00:01.785)  
postgres=# select count(*) from tt t1 join tt t2 on t1.n * t1.n + t1.n = t2.n + t2.n * t2.n;    
  count    
---------  
 1000000  
(1 row)  
Time: 1751.460 ms (00:01.751)  
```  
嵌套循环性能对比    
```    
postgres=# explain select count(*) from tt t1, tt t2 where t1.ii  t2.d + t2.d * t2.d;   
                                   QUERY PLAN                                     
--------------------------------------------------------------------------------  
 Aggregate  (cost=3097723814.80..3097723814.81 rows=1 width=8)  
   ->  Nested Loop  (cost=0.00..3010926657.06 rows=34718863096 width=0)  
         Join Filter: (((t1.d * t1.d) + t1.d) > (t2.d + (t2.d * t2.d)))  
         ->  Seq Scan on tt t1  (cost=0.00..22402.50 rows=322733 width=8)  
               Filter: (ii   Materialize  (cost=0.00..25277.17 rows=322733 width=8)  
               ->  Seq Scan on tt t2  (cost=0.00..22402.50 rows=322733 width=8)  
                     Filter: (ii  t2.d + t2.d * t2.d;  
  count     
----------  
 49985001  
(1 row)  
Time: 24398.160 ms (00:24.398)  
postgres=# select count(*) from tt t1, tt t2 where t1.ii  t2.n + t2.n * t2.n;  
  count     
----------  
 49985001  
(1 row)  
Time: 60969.515 ms (01:00.970)  
postgres=# select count(*) from tt t1, tt t2 where t1.ii  t2.d64 + t2.d64 * t2.d64;  
  count     
----------  
 49985001  
(1 row)  
Time: 39702.844 ms (00:39.703)  
postgres=# select count(*) from tt t1, tt t2 where t1.ii  t2.d128 + t2.d128 * t2.d128;  
  count     
----------  
 49985001  
(1 row)  
Time: 54284.330 ms (00:54.284)  
```  
性能最好的是float8，其次是decimal64, decimal64不需要使用palloc，性能比numeric好1.5倍左右，而decimal128也比numeric性能好不少。   
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")