B (λ) = 1(cid:105) − P(cid:104)
B (λ) = 1(cid:105) − P(cid:104)
Therefore, if A breaks privacy with careful voters, i.e. if(cid:12)(cid:12)(cid:12)P(cid:104)
Exppriv−careful,0
Exppriv−careful,0
A
Expind,1
Exppriv−careful,0
A
Expind,1
Expind,0
(λ) (cid:44) 1(cid:105)(cid:12)(cid:12)(cid:12) ≤ 2q(λ) P(cid:104)
ExpNMC = 1(cid:105)
(λ) = 1(cid:105)(cid:12)(cid:12)(cid:12)
B (λ) = 1(cid:105)(cid:17)
(cid:16)P(cid:104)
B (λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105)(cid:17)(cid:12)(cid:12)(cid:12)
B (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) +
(cid:12)(cid:12)(cid:12)P(cid:104)
B (λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105)(cid:12)(cid:12)(cid:12)
B (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) + 4q(λ) P(cid:104)
ExpNMC = 1(cid:105)
(λ) = 1(cid:105) − P(cid:104)
(cid:12)(cid:12)(cid:12)(cid:16)P(cid:104)
(cid:16)P(cid:104)
≤ (cid:12)(cid:12)(cid:12)P(cid:104)
(cid:12)(cid:12)(cid:12)P(cid:104)
≤ (cid:12)(cid:12)(cid:12)P(cid:104)
A
Exppriv−careful,1
Expind,0
Exppriv−careful,1
A
Expind,0
Exppriv−careful,1
A
Expind,1
Exppriv−careful,0
A
Expind,1
+
Expind,0
A
+
+
Exppriv−careful,1
A
=
.
(8)
Expind,1
B (λ) = 1(cid:105)(cid:17)
B (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12)
(λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) is not negligible, then
Expind,0
C.2.4 Helios is private for Exppriv.
1
c, Oi
d
(state′
(pk) first simulates AOreg, Ocorr
(state1, pk) maintains lists V0, V1, BB, initially empty, which will be used to simulate the lists with the same name in Exppriv.
(pk), i.e. B registers and corrupts the same identities as A, while keeping lists U1, CU1 of
1. B1 then corrupts each user A1 has registered,
Theorem C.4. Assuming no adversary wins Expind with non-negligible probability, Helios is private for Exppriv.
Proof. Let A = A1, A2, A3 be an adversary that wins Exppriv. We consider an adversary B = B1, B2 that plays Expind:
• BOreg, Ocorr
1
the identities it declares and corrupts by calling Oreg and Ocorr. A returns some state′
i.e., B1 calls Ocorr(id) for each id A1 has declared, and stores each id’s credential in a list CU2.
• BOi
2
B2 will also use a list hL, initially empty.
B2 first simulates AOp
vote, Ocast
1, pk):
2
c(id, credid, v0, v1).
vote(id, v0, v1), provided id ∈ U1\CU1, B retrieves id’s credential credid from CU2, and calls Oi
– for each call to Op
B obtains a ballot b. B then removes from V0 and V1 all elements of the form (id,∗), and appends (id, v0) to V0, (id, v1) to V1, b to
hL and to BB. Finally, B returns b to A.
– for each call to Ocast(id, b), provided id ∈ CU1 and Valid(id, b, BB, pk) (which implies, for Helios, that extract(b) does not already
occur in BB, and that openid(b) = id). B appends b to BB. Finally B returns b to A.
• B2 then computes ρ(V0), ρ(V1), and checks they are equal. If not, B2 blocks.
• B then checks whether two ballots in BB have the same ciphertext, i.e. if there exist two ballots b, b′ in BB such that extract(b) =
extract(b′). If so, following the specification of Helios, B lets r = ⊥.
Otherwise, we write BB\hL (resp. BB∩hL) the sublist of BB of ballots that do not occur (resp. do occur) in hL. Note that by construction
all ballots in hL occur in BB.
d(BB\hL), and obtains a list L of votes. Note that, if that point is reached, no two ballots in BB have the same ciphertext.
accepts to
• B2 calls Oi
Hence, no ballot in BB\hL has the same ciphertext as a ballot in hL, which is the list of all ballots produced by Oi
open all ballots in BB\hL. B2 computes (using BB and L) the list L′ of the last vote from each id.
• B2 computes r = ρ(V0) ∗ ρ(L′).
• In any case, i.e. even if r = ⊥, B2 calls A3 on r, and obtains a bit β′. B2 returns β′.
c. Thus Oi
d
Note that the lists BB, V0, V1 in B are equal to the lists of the same name in Exppriv, βA . Then, by construction, A2 is always accurately
simulated by B2, i.e. it is called on the same inputs, shown the same board, and provided with the same oracles as what would happen in
Exppriv, βA .
We will now prove that if A breaks privacy, then B wins Expind.
Exppriv, βA .
(λ) = 1 if and only if B2 returns 1 in this game.
ρ(V0) = ρ(V1)); and it is provided with the actually tally of the board BB (which A2 interacted with).
For any β, Expind, βB
Let us then show that A3 is accurately simulated by B2, i.e. it is simulated by B2 only when it is called in Exppriv, βA
(that is, when
It is clear from the construction of B that if ρ(V0) (cid:44) ρ(V1), A3 is not simulated. Hence, it is simulated by B2 only when it is called in
When A3 is called:
• either BB contains duplicate ciphertexts, and A3 is called on r = ⊥, which corresponds to what happens in Exppriv, βA ;
• or BB does not contain duplicate ciphertexts.
In the first case, A3 is accurately simulated. Let us study the second case. Let us first partition BB into two boards BBh ⊎ BBd, containing
respectively the ballots whose id is honest and dishonest (in the same order). By construction, BBh is equal to hL, and BBd is equal to BB\hL.
By assumption, BB contains no duplicate ciphertexts. Hence, the lists BBh and BBd do not have any identity or ciphertexts in common,
and according to the specification of Helios we have
Tally(BB, sk, U1) = Tally(BBh, sk, U1) ∗ Tally(BBd , sk, U1) = Tally(hL, sk, U1) ∗ Tally(BB\hL, sk, U1).
By construction of B2, the list of the last ballot associated with each honest id in hL contains ballots for either the votes in V0 or those in
returns the list L of the votes of each ballot in BB\hL. Since L′ is the list of the last vote in L associated in BB\hL
In addition, the oracle Oi
d
V1, depending on β. Since at that point ρ(V0) = ρ(V1), we thus have ρ(V0) = Tally(hL, sk, U1).
to each id, we thus have Tally(BB\hL, sk, U1) = ρ(L′).
Therefore, we indeed have
Tally(BB, sk, U1) = Tally(hL, sk, U1) ∗ Tally(BB\hL, sk, U1) = ρ(V0) ∗ ρ(L
34
′),
which is the result computed by B2. This concludes the proof that A3 is accurately simulated by B2.
Hence Expind, βB
Thus
We thus have:
(λ) = 1 if and only if the accurately simulated A3 returns 1, i.e. if and only if Exppriv, βA (λ) = 1.
Exppriv, βA (λ) (cid:44) 1(cid:105)
(λ) = 1(cid:105)
= P(cid:104)
P(cid:104)
(cid:12)(cid:12)(cid:12)P(cid:104)
A (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) =
A (λ) = 1(cid:105) − P(cid:104)
B (λ) = 1(cid:105) − P(cid:104)
A (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) is not negligible, then B breaks Expind.
A (λ) = 1(cid:105) − P(cid:104)
B (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) .
Therefore, if A breaks privacy, i.e. if(cid:12)(cid:12)(cid:12)P(cid:104)
(cid:12)(cid:12)(cid:12)P(cid:104)
Exppriv,0
Exppriv,1
Exppriv,1
Exppriv,0
Expind, βB
.
Expind,0
Expind,1
(9)
□
C.2.5
Simple is private for Exppriv.
d
1
c, Oi
(pk) first simulates AOreg, Ocorr
(state1, pk) maintains lists V0, V1, BB, initially empty, which will be used to simulate the lists with the same name in Exppriv.
(pk), i.e. B registers and corrupts the same identities as A, while keeping lists U1, CU1 of
1. B1 then corrupts each user A1 has registered,
Theorem C.5. Assuming no adversary wins Expind with non-negligible probability, Simple is private for Exppriv.
Proof. Let A = A1, A2, A3 be an adversary that wins Exppriv. We consider an adversary B = B1, B2 that plays Expind:
• BOreg, Ocorr
1
the identities it declares and corrupts by calling Oreg and Ocorr. A returns some state′
i.e., B1 calls Ocorr(id) for each id A1 has declared, and stores each id’s credential in a list CU2.
• BOi
2
B2 will also use a list hL, initially empty.
vote, Ocast
B2 first simulates AOp
1, pk):
2
vote(id, v0, v1), provided id ∈ U1\CU1 does not already occur in V0, V1, B retrieves id’s credential credid from
– for each call to Op
c(id, credid, v0, v1). B obtains a ballot b. B then appends (id, v0) to V0, (id, v1) to V1, b to hL and to BB. Finally B
CU2, and calls Oi
returns b to A.
– for each call to Ocast(id, b), provided id ∈ CU1 and Valid(id, b, BB, pk) (which implies, for Simple, that b does not already occur in
BB). B appends b to BB. Finally B returns b to A.
• B2 then computes ρ(V0), ρ(V1), and checks they are equal. If not, B2 blocks.
• B then checks whether two ballots in BB are equal. If so, following the specification of Simple, B lets r = ⊥.
Otherwise, we write BB\hL (resp. BB∩hL) the sublist of BB of ballots that do not occur (resp. do occur) in hL. Note that by construction
all ballots in hL occur in BB in that order.
• B2 calls Oi
d(BB\hL), and obtains a list L of votes. Note that, if that point is reached, no two ballots in BB are equal. Hence, no ballot in
BB\hL is equal to a ballot in hL, which is the list of all ballots produced by Oi
• B2 computes r = ρ(V0) ∗ ρ(L).
• In any case, i.e. even if r = ⊥, B2 calls A3 on r, and obtains a bit β′. B2 returns β′.
accepts to open all ballots in BB\hL.
c. Thus Oi
(state′
d
Note that the lists BB, V0, V1 in B are equal to the lists of the same name in Exppriv, βA . Then, by construction, A2 is always accurately
simulated by B2, i.e. it is called on the same inputs, shown the same board, and provided with the same oracles as what would happen in
Exppriv, βA .
We will now prove that if A breaks privacy, then B wins Expind.
(λ) = 1 if and only if B2 returns 1 in this game.
ρ(V0) = ρ(V1)); and it is provided with the actually tally of the board BB (which A2 interacted with).
For any β, Expind, βB
Let us then show that A3 is accurately simulated by B2, i.e. it is simulated by B2 only when it is called in Exppriv, βA
(that is, when
It is clear from the construction of B that if ρ(V0) (cid:44) ρ(V1), A3 is not simulated. Hence, it is simulated by B2 only when it is called in
When A3 is called:
• either BB contains duplicate ballots, and A3 is called on r = ⊥, which corresponds to what happens in Exppriv, βA ;
• or BB does not contain duplicate ballots.
Exppriv, βA .
35
In the first case, A3 is accurately simulated. Let us study the second case. Let us first partition BB into two lists (BB ∩ hL) ⊎ (BB\hL).
By construction of B, all ballots in hL are present in BB in the same order, and, since BB contains no duplicates, this means BB ∩ hL = hL.
By assumption, BB contains no duplicate ballots. Hence, the lists hL and BB\hL do not have any ballot in common, and according to the
specification of Simple we have
Tally(BB, sk, U1) = Tally(hL, sk, U1) ∗ Tally(BB\hL, sk, U1).
we thus have ρ(V0) = Tally(hL, sk, U1).
By construction of B2, the list hL contains ballots for either the votes in V0 or those in V1, depending on β. Since at that point ρ(V0) = ρ(V1),
In addition, the oracle Oi
d
Therefore, we indeed have
returns the list L of the votes of each ballot in BB\hL. We thus have Tally(BB\hL, sk, U1) = ρ(L).
which is the result computed by B2. This concludes the proof that A3 is accurately simulated by B2.
Tally(BB, sk, U1) = Tally(hL, sk, U1) ∗ Tally(BB\hL, sk, U1) = ρ(V0) ∗ ρ(L),
Hence Expind, βB
Thus
We thus have:
(λ) = 1 if and only if the accurately simulated A3 returns 1, i.e. if and only if Exppriv, βA (λ) = 1.
Exppriv, βA (λ) (cid:44) 1(cid:105)
= P(cid:104)
(λ) = 1(cid:105)
P(cid:104)
(cid:12)(cid:12)(cid:12)P(cid:104)
A (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) =
B (λ) = 1(cid:105) − P(cid:104)
A (λ) = 1(cid:105) − P(cid:104)
A (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) is not negligible, then B breaks Expind.
A (λ) = 1(cid:105) − P(cid:104)
B (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) .
(cid:12)(cid:12)(cid:12)P(cid:104)
Therefore, if A breaks privacy, i.e. if(cid:12)(cid:12)(cid:12)P(cid:104)
Exppriv,0
Expind, βB
Exppriv,1
Expind,0
Expind,1
Exppriv,0
Exppriv,1
.
(10)
□
36