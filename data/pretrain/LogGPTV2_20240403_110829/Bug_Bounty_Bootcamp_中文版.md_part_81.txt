接下来，要从服务和服务器响应中移除透露后端服务器设置和软件版本的技术细节数据。处理所有异常情况时，向用户返回通用的错误页面，而不是一个透露错误详细信息的技术页面。
## Hunting for Information Disclosure {#c21.xhtml#h1-501546c21-0003}
You can use several strategies to find information disclosure
vulnerabilities, depending on the application you're targeting and what
you're looking for. A good starting point is to look for software
version numbers and configuration information by using the recon
techniques introduced in [ Chapter 5 ]{.xref
itemid="xref_target_Chapter 5"} . Then you can start to look for exposed
configuration files, database files, and other sensitive files uploaded
to the production server that aren't protected. The following steps
discuss some techniques you can attempt.
您可以使用多种策略来查找信息披露漏洞，具体取决于您的目标应用程序和您正在寻找的内容。一个好的起点是通过使用第5章中介绍的侦察技术来查找软件版本号和配置信息。然后，您可以开始寻找未受保护的暴露的配置文件、数据库文件和其他敏感文件上传到生产服务器上。以下步骤讨论您可以尝试的一些技巧。
### Step 1: Attempt a Path Traversal Attack {#c21.xhtml#h2-501546c21-0001}
Start by trying a path traversal attack to read the server's sensitive
files. *Path traversal attacks* are used to access files outside the web
application's root folder. This process involves manipulating filepath
variables the application uses to reference files by adding the
`      ../     ` characters to them. This sequence refers to the parent
directory of the current directory in Unix systems, so by adding it to a
filepath, you can often reach files outside the web root.
尝试路径遍历攻击来读取服务器的敏感文件。路径遍历攻击用于访问网站应用程序根文件夹之外的文件。此过程涉及操作应用程序用于引用文件的文件路径变量，通过向其中添加
../
字符来实现。在Unix系统中这个序列代表当前目录的父目录，因此通过在文件路径中添加它，通常可以访问网站根目录之外的文件。
For example, let's say a website allows you to load an image in the
application's image folder by using a relative URL. An *absolute* URL
contains an entire address, from the URL protocol to the domain name and
pathnames of the resource. *Relative* URLs, on the other hand, contain
only a part of the full URL. Most contain only the path or filename of
the resource. Relative URLs are used to link to another location on the
same domain.
例如，假设一个网站允许您使用相对 URL
将图片加载到应用程序的图片文件夹中。绝对 URL 包含整个地址，从 URL
协议到域名和资源的路径名。相对 URL，则仅包含完整 URL
的一部分。大多数仅包含资源的路径或文件名。相对 URL
用于链接到同一域上的另一个位置。
This URL, for example, will redirect users to
*https://example.com/images/1.png* :
例如，此URL将重定向用户到https://example.com/images/1.png：
     https://example.com/image?url=/images/1.png
In this case, the `      url     ` parameter contains a relative URL (
*/images/1.png* ) that references files within the web application root.
You can insert the `      ../     ` sequence to try to navigate out of
the images folder and out of the web root. [ ]{#c21.xhtml#Page_326
.pagebreak title="326"} For instance, the following URL refers to the
*index.html* file at the web application's root folder (and out of the
*images* folder):
在这种情况下，URL参数包含一个相对URL（/images/1.png），它引用了Web应用程序根目录中的文件。您可以插入../序列尝试导航出图像文件夹并从Web根导航出来。例如，以下URL引用Web应用程序根文件夹（并退出图像文件夹）中的index.html文件：
    https://example.com/image?url=/images/../index.html
Similarly, this one will access the */etc/shadow* file at the server's
root directory, which is a file that stores a list of the system's user
accounts and their encrypted passwords:
类似地，这个程序将访问位于服务器根目录下的 /etc/shadow
文件，该文件存储了系统用户账户及其加密密码的列表。
    https://example.com/image?url=/images/../../../../../../../etc/shadow
It might take some trial and error to determine how many
`      ../     ` sequences you need to reach the system's root
directory. Also, if the application implements some sort of input
validation and doesn't allow `      ../     ` in the filepath, you can
use encoded variations of `      ../     ` , such as
`      %2e%2e%2f     ` (URL encoding), `      %252e%252e%255f     `
(double URL encoding), and `      ..%2f     ` (partial URL encoding).
确定需要多少../序列才能到达系统的根目录可能需要一些尝试和错误。此外，如果应用程序实现了某种输入验证并且不允许在文件路径中使用../，您可以使用编码的../变体，例如%2e%2e%2f（URL编码），%252e%252e%255f（双重URL编码）和..%2f（部分URL编码）。
### Step 2: Search the Wayback Machine {#c21.xhtml#h2-501546c21-0002}
Another way to find exposed files is by using the Wayback Machine.
Introduced in [ Chapter 5 ]{.xref itemid="xref_target_Chapter 5"} , the
Wayback Machine is an online archive of what websites looked like at
various points in time. You can use it to find hidden and deprecated
endpoints, as well as large numbers of current endpoints without
actively crawling the site, making it a good first look into what the
application might be exposing.
另一种查找暴露文件的方法是使用Wayback Machine。Wayback Machine
是一个在线网站归档，可以让你查看网站在不同时间点的外观。你可以使用它来查找隐藏和弃用的端点，以及大量当前端点，而不必主动遍历网站，因此是一个很好的第一步，了解应用程序可能暴露的内容。
On the Wayback Machine's site, simply search for a domain to see its
past versions. To search for a domain's files, visit
*https://web.archive.org/web/\*/DOMAIN* .
在Wayback
Machine的网站上，只需搜索域名即可查看其过去的版本。要搜索域名的文件，请访问
https://web.archive.org/web/\*/DOMAIN。
Add a `      /*     ` to this URL to get the archived URLs related to
the domain as a list. For example,
*https://web.archive.org/web/\*/example.com/\** will return a list of
URLs related to *example.com* . You should see the URLs displayed on the
Wayback Machine web page ( [Figure
21-1](#c21.xhtml#figure21-1){#c21.xhtml#figureanchor21-1} ).
在URL末尾添加
/\*，以获得与该域名相关的归档URL列表。例如，https://web.archive.org/web/\*/example.com/\*
将返回与example.com相关的URL列表。您应该可以在Wayback
Machine网页上看到显示的URL（图21-1）。
![[Figure 21-1]{#c21.xhtml#figure21-1} : You can list the archived URLs
of a domain on the Wayback Machine. ¶ 图21-1：您可以在Wayback
Machine上列出一个域名的存档URL。](image_fi/501546c21/f21001.png){.keyline}
[ ]{#c21.xhtml#Page_327 .pagebreak title="327"} You can then use the
search function to see whether any sensitive pages have been archived.
For example, to look for admin pages, search for the term */admin* in
the found URLs ( [Figure
21-2](#c21.xhtml#figure21-2){#c21.xhtml#figureanchor21-2} ).
然后您可以使用搜索功能查看是否已存档任何敏感页面。例如，要查找管理页面，请在找到的URL中搜索\"/admin\"一词（图21-2）。
![[Figure 21-2]{#c21.xhtml#figure21-2} : Search for keywords in the URLs
to find potentially sensitive pages. ¶
图21-2：在URL中搜索关键字以查找潜在的敏感页面。](image_fi/501546c21/f21002.png){.keyline}
You can also search for backup files and configuration files by using
common file extensions like *.conf* ( [Figure
21-3](#c21.xhtml#figure21-3){#c21.xhtml#figureanchor21-3} ) and *.env* ,
or look for source code, like JavaScript or PHP files, by using the file
extensions *.js* and *.php* .
您也可以通过使用常见的文件扩展名，例如.conf（见图21-3）和.env搜索备份文件和配置文件，或通过使用文件扩展名.js和.php查找源代码，如JavaScript或PHP文件。
![[Figure 21-3]{#c21.xhtml#figure21-3} : Filter the URLs by file
extension to find files of a certain type. ¶
图21-3：通过文件扩展名过滤URL，以查找特定类型的文件。](image_fi/501546c21/f21003.png){.keyline}
Download interesting archived pages and look for any sensitive info. For
example, are there any hardcoded credentials that are still in use, or
does the page leak any hidden endpoints that normal users shouldn't know
about?
下载有趣的归档页面，查找任何敏感信息。例如，是否存在仍在使用的硬编码凭据，或者页面是否泄漏了正常用户不应该知道的隐藏端点？
### Step 3: Search Paste Dump Sites {#c21.xhtml#h2-501546c21-0003}
Next, look into paste dump sites like Pastebin and GitHub gists. These
let users share text documents via a direct link rather than via email
or services like Google Docs, so developers often use them to send
source code, configuration files, and log files to their coworkers. But
on a site like Pastebin, for example, shared text files are public by
default. If developers upload a sensitive file, everyone will be able to
read it. For this reason, these code-sharing sites are pretty infamous
for leaking credentials like API keys and passwords.
下一步，查看类似Pastebin和GitHub
gist的粘贴转储站点。这些允许用户通过直接链接共享文本文档，而不是通过电子邮件或像Google
Docs这样的服务，因此开发人员经常使用它们向同事发送源代码、配置文件和日志文件。但是，在像Pastebin这样的网站上，共享的文本文件默认情况下是公开的。如果开发人员上传敏感文件，每个人都可以阅读它。因此，这些代码共享站点因泄漏API密钥和密码等凭据而相当臭名昭著。
[ ]{#c21.xhtml#Page_328 .pagebreak title="328"} Pastebin has an API that
allows users to search for public paste files by using a keyword, email,
or domain name. You can use this API to find sensitive files that belong
to a certain organization. Tools like PasteHunter or pastebin-scraper
can also automate the process. Pastebin-scraper (
[https://github.com/streaak/pastebin-scraper/](https://github.com/streaak/pastebin-scraper/){.LinkURL}
) uses the Pastebin API to help you search for paste files. This tool is
a shell script, so download it to a local directory and run the
following command to search for public paste files associated with a
particular keyword. The `      -g     ` option indicates a general
keyword search:
Pastebin有一个API，允许用户使用关键词、电子邮件或域名搜索公共粘贴文件。您可以使用此API来查找属于某个组织的敏感文件。像PasteHunter或pastebin-scraper这样的工具也可以自动化这个过程。Pastebin-scraper
(https://github.com/streaak/pastebin-scraper/) 使用Pastebin API
来帮助您搜索粘贴文件。这个工具是一个shell脚本，因此请将其下载到本地目录并运行以下命令来搜索与特定关键词相关的公共粘贴文件。-g选项表示常规关键词搜索：
    ./scrape.sh -g KEYWORD
This command will return a list of Pastebin file IDs associated with the
specified `      KEYWORD     `{.variable} . You can access the returned
paste files by going to *pastebin.com/ID* .
此命令将返回与指定关键字相关联的Pastebin文件ID列表。您可以通过前往pastebin.com/ID来访问返回的粘贴文件。
### Step 4: Reconstruct Source Code from an Exposed .git Directory {#c21.xhtml#h2-501546c21-0004}
Another way of finding sensitive files is to reconstruct source code
from an exposed *.git* directory. When attacking an application,
obtaining its source code can be extremely helpful for constructing an
exploit. This is because some bugs, like SQL injections, are way easier
to find through static code analysis than black-box testing. [ Chapter
22 ]{.xref itemid="xref_target_Chapter 22"} covers how to review code
for vulnerabilities.
另一种发现敏感文件的方法是从公开的.git目录中重构源代码。在攻击应用程序时，获取其源代码对于构建攻击非常有帮助。这是因为某些漏洞，比如SQL注入，通过静态代码分析比黑盒测试容易找到。第22章介绍了如何查找漏洞的代码审查方法。
When a developer uses Git to version-control a project's source code,
Git will store all of the project's version-control information,
including the commit history of project files, in a Git directory.
Normally, this *.git* folder shouldn't be accessible to the public, but
sometimes it's accidentally made available. This is when information
leaks happen. When a *.git* directory is exposed, attackers can obtain
an application's source code and therefore gain access to developer
comments, hardcoded API keys, and other sensitive data via secret
scanning tools like truffleHog (
[https://github.com/dxa4481/truffleHog/](https://github.com/dxa4481/truffleHog/){.LinkURL}
) or Gitleaks (
[https://github.com/zricethezav/gitleaks/](https://github.com/zricethezav/gitleaks/){.LinkURL}
).
当开发人员使用Git对项目的源代码进行版本控制时，Git将存储所有项目版本控制信息，包括项目文件的提交历史记录在一个Git目录中。通常情况下，这个.git文件夹不应该对公众可访问，但有时它会被意外地暴露。这是信息泄漏发生的时候。当.git目录暴露时，攻击者可以获取应用程序的源代码，并因此通过类似truffleHog(https://github.com/dxa4481/truffleHog/)或Gitleaks(https://github.com/zricethezav/gitleaks/)的秘密扫描工具获得开发人员的注释，硬编码的API密钥和其他敏感数据。
#### Checking Whether a .git Folder Is Public {#c21.xhtml#h3-501546c21-0001}
To check whether an application's *.git* folder is public, simply go to
the application's root directory (for example, *example.com* ) and add
*/.git* to the URL:
要检查一个应用程序的 .git
文件夹是否公开，只需进入应用程序的根目录（例如，example.com），并在 URL
后面添加 /.git：
    https://example.com/.git
Three things could happen when you browse to the */.git* directory. If
you get a 404 error, this means the application's *.git* directory isn't
made available to the public, and you won't be able to leak information
this way. If you get a 403 error, the *.git* directory is available on
the server, but you won't be able to directly access the folder's root,
and therefore won't be able to list all the files contained in the
directory. If you don't get an error and the server responds with the
directory listing of the *.git* directory, you can directly browse the
folder's contents and retrieve any information contained in it.
当你浏览/.git目录时有三种可能性。如果你获得404错误，这意味着应用程序的.git目录没有对公众开放，因此你将无法通过此方式泄露信息。如果你获得403错误，.git目录在服务器上是可以访问的，但你将无法直接访问该文件夹的根目录，因此无法列出目录中包含的所有文件。如果你没有收到错误，并且服务器响应了.git目录的目录列表，则可以直接浏览文件夹的内容并检索其包含的任何信息。
#### [ ]{#c21.xhtml#Page_329 .pagebreak title="329"} Downloading Files {#c21.xhtml#h3-501546c21-0002}
If directory listing is enabled, you can browse through the files and
retrieve the leaked information. The `      wget     ` command retrieves
content from web servers. You can use `      wget     ` in recursive
mode ( `      -r     ` ) to mass-download all files stored within the
specified directory and its subdirectories:
如果启用目录列表，您可以浏览文件并检索泄露的信息。
Wget命令从Web服务器检索内容。
您可以在递归模式（-r）中使用wget以批量下载指定目录及其子目录中存储的所有文件：
    $ wget -r example.com/.git
But if directory listing isn't enabled and the directory's files are not
shown, you can still reconstruct the entire *.git* directory. First,
you'll need to confirm that the folder's contents are indeed available
to the public. You can do this by trying to access the directory's
*config* file:
但是，如果目录列表未启用且目录文件未显示，则仍可以重建整个.git目录。首先，您需要确认该文件夹的内容确实对公众开放。您可以通过尝试访问目录的配置文件来实现此目的：
    $ curl https://example.com/.git/config
If this file is accessible, you might be able to download the Git