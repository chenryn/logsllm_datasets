    [root@localhost linux]# make
    make -C //lib/modules/2.6.18-194.el5/build CONFIG_DEBUG_INFO=y M="/home/yunwei/Desktop/malware/volatility/tools/linux" modules
    make[1]: Entering directory `/usr/src/kernels/2.6.18-194.el5-x86_64'
      CC [M]  /home/yunwei/Desktop/malware/volatility/tools/linux/module.o
    /home/yunwei/Desktop/malware/volatility/tools/linux/module.c:214: error: redefinition of ‘struct module_sect_attr’
    /home/yunwei/Desktop/malware/volatility/tools/linux/module.c:221: error: redefinition of ‘struct module_sect_attrs’
    /home/yunwei/Desktop/malware/volatility/tools/linux/module.c:375:5: warning: "STATS" is not defined
    /home/yunwei/Desktop/malware/volatility/tools/linux/module.c:391:5: warning: "DEBUG" is not defined
    make[2]: *** [/home/yunwei/Desktop/malware/volatility/tools/linux/module.o] Error 1
    make[1]: *** [_module_/home/yunwei/Desktop/malware/volatility/tools/linux] Error 2
    make[1]: Leaving directory `/usr/src/kernels/2.6.18-194.el5-x86_64'
    make: *** [dwarf] Error 2
    ### 注释掉 198,7 ~ 221,7,编译问题就解决了
    /*
    #if LINUX_VERSION_CODE == KERNEL_VERSION(2,6,18)
    ....
    struct module_sections module_sect_attrs;
    #endif
    */
    ## 注释代码之后，编译输出状态
    [root@localhost linux]# make
    make -C //lib/modules/2.6.18-194.el5/build CONFIG_DEBUG_INFO=y M="/home/yunwei/Desktop/malware/volatility-2.6/tools/linux" modules
    make[1]: Entering directory `/usr/src/kernels/2.6.18-194.el5-x86_64'
      CC [M]  /home/yunwei/Desktop/malware/volatility-2.6/tools/linux/module.o
    /home/yunwei/Desktop/malware/volatility-2.6/tools/linux/module.c:354:5: warning: "STATS" is not defined
    /home/yunwei/Desktop/malware/volatility-2.6/tools/linux/module.c:370:5: warning: "DEBUG" is not defined
      Building modules, stage 2.
      MODPOST
      CC      /home/yunwei/Desktop/malware/volatility-2.6/tools/linux/module.mod.o
      LD [M]  /home/yunwei/Desktop/malware/volatility-2.6/tools/linux/module.ko
    make[1]: Leaving directory `/usr/src/kernels/2.6.18-194.el5-x86_64'
    dwarfdump -di module.ko > module.dwarf
    make -C //lib/modules/2.6.18-194.el5/build M="/home/yunwei/Desktop/malware/volatility-2.6/tools/linux" clean
    make[1]: Entering directory `/usr/src/kernels/2.6.18-194.el5-x86_64'
      CLEAN   /home/yunwei/Desktop/malware/volatility-2.6/tools/linux/.tmp_versions
    make[1]: Leaving directory `/usr/src/kernels/2.6.18-194.el5-x86_64'
# Construct the new kernel ISF JSON file
先运行Volatility3 的`banners`插件，以确定必要的内核版本。
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3]
    └─$ python3 vol.py -f /mnt/f/backup2/dump.mem banners.Banners
    Volatility 3 Framework 2.4.0
    Progress:  100.00               PDB scanning finished
    Offset  Banner
    0x3e6001a0      Linux version 5.4.0-84-generic (buildd@lcy01-amd64-007) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #94~18.04.1-Ubuntu SMP Thu Aug 26 23:17:46 UTC 2021 (Ubuntu 5.4.0-84.94~18.04.1-generic 5.4.133)
    0x3f191d94      Linux version 5.4.0-84-generic (buildd@lcy01-amd64-007) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #94~18.04.1-Ubuntu SMP Thu Aug 26 23:17:46 UTC 2021 (Ubuntu 5.4.0-84.94~18.04.1-generic 5.4.133)
    0x710b7c88      Linux version 5.4.0-84-generic (buildd@lcy01-amd64-007) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #94~18.04.1-Ubuntu SMP Thu Aug 26 23:17:46 UTC 2021 (Ubuntu 5.4.0-84.94~18.04.1-generic 5.4.133)
    0x7bd00010      Linux version 5.4.0-84-generic (buildd@lcy01-amd64-007) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #94~18.04.1-Ubuntu SMP Thu Aug 26 23:17:46 UTC 2021 (Ubuntu 5.4.0-84.94~18.04.1-generic 5.4.133)
注意：`banners.Banners`插件只能识别 Linux 镜像的banner信息，不识别 Windows。
然后我们需要符号表（symbol tables）。根据上面写的`dwarf2json`生成 json 的命令，是需要我们提供
`/usr/lib/debug/boot`目录下的`vmlinux`文件，但是系统往往不会自带该文件，然后发现在`/boot`目录下有一个相同名字的
`vmlinux` 文件，但是并不可用。
能不能不用banners插件？我是刚开始学的，看了看最近比赛的内存取证的WP，很多都是直接`strings`然后提取出来的。。。
## 借助Docker直接获取`dbgsym`文件安装在指定系统
Docker集成了我们需要的系统版本，这样就直接省去了重新搭建系统的麻烦，（我用的WSL2，WSL2没法像正常Linux系统安装Docker，可以去下载一个Docker
Desktop，开启相应设置）
获取源文件网址： ，按需选择下载。
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3]
    └─$ git clone https://github.com/volatilityfoundation/dwarf2json
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3]
    └─$ cd dwarf2json
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3]
    └─$ go build
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3]
    └─$ wget https://launchpad.net/ubuntu/+archive/primary/+files/linux-image-unsigned-5.15.0-48-generic-dbgsym_5.15.0-48.54_amd64.ddeb
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3]
    └─$ cd ../
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3]
    └─$ docker run -it --rm -v $PWD:/volatility ubuntu:18.04 /bin/bash
    ┌──(root㉿DockerID)-[/]
    └─$ cd volatility/dwarf2json
    ┌──(root㉿DockerID)-[/volatility3/dwarf2json]
    └─$ dpkg -i linux-image-unsigned-5.4.0-84-generic-dbgsym_5.4.0-84.94_amd64.ddeb
    ┌──(root㉿DockerID)-[/volatility3/dwarf2json]
    └─$ ./dwarf2json linux --elf /usr/lib/debug/boot/vmlinux5.4.0-84-generic > linux-image-5.4.0-84-generic.json 
    #退出Docker
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3/]
    └─$ cp linux-image-5.4.0-84-generic.json ./volatility3/volatility3/framework/symbols/linux
Vol3的符号表编译完成，然后按照正常内存取证的步骤解析内存镜像就好了
## Examples
### 2022 Sekai CTF | symbolic-needs 1
按照上面构造符号表的方法，先判断当前系统版本和Linux 内核版本，再制作符号表，这个题目很巧，给了`Ubuntu 22.04 Linux-version
5.15.0-43-generic`，当前版本，Vol2是不支持的，必须用Vol3。
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3]
    └─$ wget https://launchpad.net/ubuntu/+archive/primary/+files/linux-image-unsigned-5.15.0-43-generic-dbgsym_5.15.0-43.46-generic_amd64.ddeb
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3]
    └─$ cd ../
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3]
    └─$ docker run -it --rm -v $PWD:/volatility ubuntu:22.04 /bin/bash
    ┌──(root㉿DockerID)-[/]
    └─$ cd volatility/dwarf2json
    ┌──(root㉿DockerID)-[/volatility3/dwarf2json]
    └─$ dpkg -i linux-image-unsigned-5.15.0-43-generic-dbgsym_5.15.0-43.46_amd64.ddeb
    ┌──(root㉿DockerID)-[/volatility3/dwarf2json]
    └─$ ./dwarf2json linux --elf /usr/lib/debug/boot/vmlinux-5.15.0-43-generic > linux-image-5.15.0-43-generic.json 
    #退出Docker
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3/]
    └─$ cp linux-image-5.4.0-84-generic.json ./volatility3/volatility3/framework/symbols/linux
    ┌──(root㉿SanDieg0)-[/mnt/d/volatility3/]
    └─$ python3 vol.py -f /mnt/f/20022Sekai/dump.mem linux.bash
    Volatility 3 Framework 2.4.0
    PID Process CommandTime Command
    1863    bash    2022-08-29 13:45:56.000000    72.48.117.53.84.48.110.95.119.51.95.52.114.51.95.49.110.33.33.33
​
最近祥云杯也有一道内存取证题目，不过可以直接非预期出，就不放祥云杯了