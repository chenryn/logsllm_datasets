in unclean networks. If these networks/regions do not take
necessary measures, D can tell the SPs to block all requests
from those regions. For instance, assuming D is able to identify
bots, it may notice that requests from an SP all belong to bots
and inform the SP to disable accepting requests by setting
its request rate limit to zero. The bots in the region are now
rendered ineffective.
1) Further Limiting DoC Attacks: As a result of localiza-
tion, some networks may locate and disable local bots, but in
some cases this may not be possible or easy. For instance, a
bot may be a DSL customer paying for connectivity. Another
issue is that a region cannot be made small enough due to
unavailability of SP hosts. We sketch out two designs inspired
from existing approaches [9], [21], [22] to limit local attackers
in these regions. An SP may implement any of them, but we
assume clients can become aware of which mechanism is in
use.
rl
The ﬁrst approach is similar in spirit to Speak-Up [22].
Since legitimate clients on average get O(
) of the R
request resources, they can improve their chance of success
by sending more requests. For instance, if an S cannot reach
D in an expected duration, it can start sending requests at
its maximum uplink capacity. Note that this type of legitimate
ﬂooding may cause congestion issues, but these will be limited
to a small network region.
rr+rl
The second approach is to employ cryptographic puz-
zles [9], [21]. S starts by sending a request to the SP. If
the SP is unable to forward the request, it returns a nonce
Ns to S asking it to solve a cryptographic puzzle. S chooses
another nonce Nc and a puzzle difﬁculty value l and computes
x such that the last l bits of P = H(x, Nc, Ns, l) are all
zeros. Here H() is a universally known hash function; Ns
guarantees puzzle freshness, while Nc distinguishes between
clients. Solving the puzzle requires S to brute-force search
2l space. S sends a second request with P , x, Nc and l.
The SP veriﬁes P and forwards the request if the solution
is greater than a threshold difﬁculty level in that time period.
The SP also records the solution so that S cannot reuse it. If
the request does not go through, S will increase the difﬁculty
level and retry the request. Using this approach, the attacker
must either solve puzzle solutions to sustain an attack rate or
resort to brute-force bandwidth exhaustion attacks. However,
solving puzzles delays the attacker so he cannot achieve very
high rates. On the other hand, SPs could be provisioned better
depending on the size of its region to prevent bandwidth
exhaustion attacks.
2) Handling Misbehaving Proxies: The attacker could use
compromised proxies to ﬂood D. Although D may know that
it is under attack, it may not know which proxy is causing the
ﬂood if compromised proxies use source address spooﬁng. To
address this, we assume routers employ path identiﬁer (Pi) [23]
to give an identiﬁable signature to all packets originating from
the same proxy (or set of closely located proxies). D can match
the signatures and remove the hidden paths to misbehaving
proxies.
Compromised proxies may also attempt to steal the autho-
rizations given to legitimate clients, or in case of SPs, may
try to discover DPs. The service can defend itself by dividing
the DPs into different trust tiers. Lower tiers are assigned to
new and untrusted clients, while higher tiers are reserved for
trusted clients or those with a history of good behavior. While
a determined attacker can still enumerate all the lower tier
DPs, this will only affect new, untrusted clients. The service
can protect legitimate clients by having a pool of low trust DPs
that are expendable. As an alternative, S may either include
a digital certiﬁcate in the request, or may have established a
prior key with D. After D authorizes S, it encrypts and signs
the important portions of the response before sending it via
the SP.
C. Authorizing a Source and Assigning DPs
In Epiphany, we assume D has policies to decide which
source to authorize. These could be based on: prior au-
thorizations given to important clients, reputation systems,
blacklists of misbehaving sources, etc. For example, D will
never authorize a malformed request, or a source found in
a blacklist. Once D decides to authorize an S, it generates
an authorization token and selects a DP to return to S. The
authorization token could be a random nonce, or based on
information sent by S. For example, when using a reputation
system, S could send a signed reputation value in the request.
D may return a new signed reputation value back to S as the
authorization. For every packet S sends, it includes a signature
(generated using the established key) so that D can verify the
messages from S.
Inaccuracies in the decision process at D may cause it to
incorrectly authorize an attacker. The attacker may ﬂood the
DP to harm legitimate clients using that DP. However, the
tiered trust based approach described above could be used
to prevent such issues. For example, suppose D knows the
properties of a DP such as its current load or bandwidth, it
could assign better DPs (i.e., DPs with fewer clients, DPs not
heavily loaded) to more important clients while assign a ﬁxed
set of DPs to untrusted clients. This way, important clients
will be unaffected since they are on different DPs. Some new
clients that are legitimate will fail to reach D, but they can
restart the setup process to receive a different DP. As D builds
more trust or reputation about an S, it can progressively move
S to better DPs in future interactions. In addition, the service
may distribute the DPs far from each other, where there is less
likelihood that an attack on one DP will affect others.
D. Requirements for the Destination Network
The strength of location hiding architectures depends on
how well the destination is kept hidden. Otherwise, secondary
defenses such as ﬁltering rings may be necessary [11], [24].
To achieve strong location hiding the destination network itself
must have a few important properties. Note that the properties
we list below are not mandatory, but would enhance protection
for very critical services.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply. 
For maximum protection the service can be placed in
a separate network that does not have any public compo-
nents. To see why, consider a hidden web-server such as
www.private.fbi.gov. If the web-server is co-located with the
rest of the public fbi.gov domain, the attacker could simply
target any host in fbi.gov domain to indirectly inﬂict damage.
Another possibility is to locate the web-server is a completely
different domain. For example, place www.private.fbi.gov
web-server in google.com domain. Though this might make it
harder for the attacker to guess the web-server’s host domain,
public components in the host domain might give away the
hidden server if they are compromised (they may discover the
hidden server through local network scans).
Another interesting step is to completely disable routing
announcements for the hidden network into global routing
space (but the routing announcements from other networks are
still received by the hidden network). Since there are no public
components in this network, and since all communication with
D happens explicitly through hidden paths, the destination IP
preﬁx is not needed to route any packets to D3.
IV. EPIPHANY COMPONENTS: HIDDEN PATHS
In unicast routing knowing the destination’s address is
sufﬁcient to send trafﬁc to it, but hidden paths are different. To
send trafﬁc on them, two conditions must be met. First, a node
must know about a hidden path address that uniquely identiﬁes
a forwarding table entry at each intermediate router on the
path, and second, the node must have a forwarding table entry
pointing to the correct next hop router (out of the possible set
of neighboring routers) on the path to the destination. We call
our paths hidden for this very reason, i.e., each router on the
path only knows the next router on the path, but do not where
the path originated from or where it may lead to.Therefore
an attacker must compromise every router on the path from a
proxy up to the destination in order to discover its location.
We ﬁrst outline a few key properties of hidden paths, and
then describe the mechanism for building hidden paths in this
section.
A. Properties of Hidden Paths
• Strong location hiding. Knowing hidden paths does not
divulge the destination’s IP address or its location either
implicitly or explicitly.
• Cannot be easily forged. Hidden paths are built securely
between the destination, intermediate routers and a proxy.
An attacker cannot easily forge this path to inject packets
towards D.
• Paths may expire or can be removed. Hidden paths are
created upon the destination’s request and expire after a
time interval (they are periodically refreshed). They may
also be explicitly removed upon D’s request.
• Compatibility with IP packet structure. Hidden paths do
not change the IP packet structure and are compatible
with the current IP packet forwarding mechanisms (to
ease deployment).
B. Constructing Hidden Paths using Reverse-Multicast
In Epiphany we want a group of senders to reach a single
receiver whose address they do not know. We call our imple-
mentation reverse-multicast (in multicast, a source does not
know the receivers). We refer to the example in Figure 3 to
describe the process. The router functions in pseudocode are
outlined in Algorithm 1.
When D decides to build a hidden path to a proxy P1,
it picks an IP address G from the multicast address range.
Any of the existing schemes to avoid collisions can be used
here. D looks up P1 in its forwarding table and sends an rjoin
message to the next hop router R1 on path to P1. Figure 4
shows the format of rjoin. R1 receives the rjoin, looks up P1
in its unicast table (UnicastFIB) and identiﬁes the interface
ifpi to reach P1. If there is no entry for G in R1’s Epiphany
Forwarding Information Base (EFIB), it creates a new entry
for G with ifpi as one of the input interfaces, and ifjoin as
the output interface (i.e, the interface on which it received the
rjoin). Otherwise, R1 adds ifpi to the already existing set of
input interfaces for G, and replaces the output interface ifout
with the new interface ifjoin. R1 forwards the rjoin towards
P1. Every router on the path performs similar operations, and
deliver the rjoin to P1, while building the hidden path in their
EFIBs. P1 veriﬁes the rjoin using the Auth(D, P ) ﬁeld and
registers an entry for D. We assume D and P1 exchange keys
during initial conﬁguration. Although we described building
hidden paths on point to point links, routers may be connected
on shared medium. We assume routers have additional link
level mechanisms to correctly resolve the input and output
interfaces to their previous and next hop routers.
Figure 3 shows the hidden path from D to P1 (red line),
and the EFIB entries created at each router in response to the
rjoin to P1 (step-1). When D wishes to create hidden paths
to proxies P2 and P3, it uses the same address G and sends
rjoins towards P2 (step-2) and P3 (step-3). For example, when
D sends rjoin for P2, R2 appends a new input interface (iface
3) to the existing input set for G. On the other hand, the rjoin
for P3 crosses the previous path for P2, i.e., one of the input
interfaces at R2 (iface 3) now becomes an output interface.
R2 removes this interface from the input set and replaces the
output interface to point to R3.
This method of constructing hidden paths consumes the
same router state as multicast (i.e., one entry per hidden
destination), which we believe to be an acceptable cost for
protecting critical services. Moreover, note that no inter-
domain routing protocol is needed, a major stumbling block
with IP multicast. We believe our proposed approach is a rea-
sonable tradeoff for efﬁcient packet forwarding while keeping
compatibility with IP.
C. Handling Loops and Failures
3If remote management is required, D could have a permanent hidden path
to a special remote management proxy.
Under stable unicast routing conditions, Epiphany creates
loop-free hidden paths. We prove this by contradiction. Sup-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply. 
1) RJOIN to P1(cid:2)
  DR1R2P1(cid:2)
  R1: (cid:2)
  R2: (cid:2)
2) RJOIN to P2(cid:2)
  DR1R2R3P2(cid:2)
P2
  R1: (cid:2)
  R2: (cid:2)
  R3: (cid:2)


 
"
"
3) RJOIN to P3(cid:2)
  DR1R3R2P3(cid:2)
  R1: (cid:2)
  R2: (cid:2)
  R3: (cid:2)
  R4: (cid:2)
  R4: <G

 

 
"
!
!
!!
!
 










 


 
!
!
!
 





 
!





 	
 	


 
 
 
!
! 
 
	





  

  

  











 
 
	
	




Fig. 4. Epiphany message formats



	



Fig. 3. Example showing the construction of hidden paths
Fig. 5. Forwarding loop in Epiphany hidden paths
pose D builds hidden paths to proxies P1 through Pn−1 and
the resulting paths do not have loops (Figure 5 shows loop free
paths in black). Now suppose D builds a hidden path to Pn,
but the path has a forwarding loop (red path in Figure 5). The
only way this could occur is if one router’s out interface points
to the input interface of another router on the same path. For
example, in Figure 5 some router Rj points to another router
Rk on the path to Pn. However, since the rjoin replaces the
outgoing interface at each router it traverses, router Rj must
have received an rjoin from Rk, which must have received it
from Rj+1, which in turn must have received it from Rj.
However, under stable routing conditions the rjoin for Pn
should have originated at D and traversed a loop free path
to Pn, which contradicts the loop formation.
Although loops do not occur under stable routing conditions,
they may be possible when the rjoin coincides with unicast
routing changes. Moreover, network failures may cause hidden
paths to fail and as a result several proxies may not be able to
reach D. Under these conditions, the EFIB state at affected
routers must be removed. To achieve this, we use a soft-
state approach – after updating the EFIB in response to an
rjoin, each router independently sets a timer for the input
interface it just added (i.e., for EF IB.G.{ifin}). If no packets
are received on this interface for the timeout duration, it is
removed from the input interface set. When the set becomes
empty, the entire EF IB entry for G is removed. In order to
keep the state active, proxies must send either data or keepalive
messages. However, they only continue to do so as long as D
sends periodic rate refresh messages or data. If no packets
are received from D in the last Trr seconds, the proxies stop
sending the keepalives (or data), which causes the router state
to expire. Eventually when unicast routing stabilizes, D can
send rjoins to affected proxies to create new hidden paths.
In Figure 3, assuming no loops or failures occur on the
unicast paths, the soft-state approach removes unused state at
routers. For example, after the rjoin for P3, R2 will switch
its outgoing interface to 3, and R1 will stop receiving trafﬁc
on input interface 1. Eventually, the interface will timeout and
R1 will remove it from the set of input interfaces for G.
D. Securing the Hidden Paths
An attacker may learn about a G associated with D and
send rjoins to usurp hidden paths. To address this, we adopt
a simple solution; we make sure that the ﬁrst D to send
an rjoin for G claims the EFIB entry for G at a router.
Before D sends an rjoin for G for the ﬁrst time, it creates
a hash chain {h0, . . . , hn} by repeatedly hashing a secret k
using a well known hash function H, i.e., h0 = H(k), h1 =
H(h0), . . . , hn = H(hn−1). D includes the last hash element
hn, called hash anchor ha in the ﬁrst rjoin it sends. Routers
associate ha with G. For every future rjoin or control message,