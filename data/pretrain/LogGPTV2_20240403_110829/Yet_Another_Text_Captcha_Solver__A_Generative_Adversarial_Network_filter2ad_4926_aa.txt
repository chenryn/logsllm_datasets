title:Yet Another Text Captcha Solver: A Generative Adversarial Network
Based Approach
author:Guixin Ye and
Zhanyong Tang and
Dingyi Fang and
Zhanxing Zhu and
Yansong Feng and
Pengfei Xu and
Xiaojiang Chen and
Zheng Wang
Yet Another Text Captcha Solver:
A Generative Adversarial Network Based Approach
Dingyi Fang
Zhanyong Tang∗
Guixin Ye
Northwest University, China
Northwest University, China
Northwest University, China
PI:EMAIL
Zhanxing Zhu
Peking University, China
PI:EMAIL
PI:EMAIL
Yansong Feng
Peking University, China
PI:EMAIL
PI:EMAIL
Pengfei Xu
Northwest University, China
PI:EMAIL
Xiaojiang Chen
Northwest University, China
PI:EMAIL
Zheng Wang∗
Lancaster University, United Kingdom
PI:EMAIL
ABSTRACT
Despite several attacks have been proposed, text-based CAPTCHAs1
are still being widely used as a security mechanism. One of the
reasons for the pervasive use of text captchas is that many of the
prior attacks are scheme-specific and require a labor-intensive and
time-consuming process to construct. This means that a change
in the captcha security features like a noisier background can sim-
ply invalid an earlier attack. This paper presents a generic, yet
effective text captcha solver based on the generative adversarial
network. Unlike prior machine-learning-based approaches that
need a large volume of manually-labeled real captchas to learn
an effective solver, our approach requires significantly fewer real
captchas but yields much better performance. This is achieved by
first learning a captcha synthesizer to automatically generate syn-
thetic captchas to learn a base solver, and then fine-tuning the base
solver on a small set of real captchas using transfer learning. We
evaluate our approach by applying it to 33 captcha schemes, includ-
ing 11 schemes that are currently being used by 32 of the top-50
popular websites including Microsoft, Wikipedia, eBay and Google.
Our approach is the most capable attack on text captchas seen to
date. It outperforms four state-of-the-art text-captcha solvers by
not only delivering a significantly higher accuracy on all testing
schemes, but also successfully attacking schemes where others have
zero chance. We show that our approach is highly efficient as it
can solve a captcha within 0.05 second using a desktop GPU. We
demonstrate that our attack is generally applicable because it can
bypass the advanced security features employed by most modern
∗Corresponding faculty authors: Zhanyong Tang and Zheng Wang.
1To aid readability, we will use the acronym in lowercase thereafter.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243754
text captcha schemes. We hope the results of our work can encour-
age the community to revisit the design and practical use of text
captchas.
• Security and privacy → Authentication; Graphical / vi-
CCS CONCEPTS
sual passwords; Access control;
KEYWORDS
Text-based CAPTCHAs; deep learning; transfer learning; gener-
ative adversarial networks
ACM Reference Format:
Guixin Ye, Zhanyong Tang∗, Dingyi Fang, Zhanxing Zhu, Yansong Feng,
Pengfei Xu, Xiaojiang Chen, and Zheng Wang. 2018. Yet Another Text
Captcha Solver:, A Generative Adversarial Network Based Approach. In
2018 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY,
USA, 17 pages. https://doi.org/10.1145/3243734.3243754
1 INTRODUCTION
Text-based captchas are extensively used to distinguish humans
from automated computer programs [58–60]. While numerous al-
ternatives to text-based captchas have been proposed [2, 12, 44, 50],
many websites and applications still use text-based captchas as a
security and authentication mechanism. These include the majority
of the top-50 popular websites ranked by alexa.com as of April
2018, including Google, Microsoft, Baidu, and many others. Due
to the wide deployment of text-based captchas, a compromise on
the scheme can have significant implications and could result in
serious consequences.
Breaking captchas2 is certainly not a new research topic. Over
the past decade, researchers have demonstrated different ways for
automatically recognizing text-based captchas [15, 16, 43, 64]. How-
ever, many of the prior attacks are hard-coded for a few specific
captcha schemes, and tuning the attacking heuristics or models
requires heavy expert involvement and follows a labor-intensive
and time-consuming process of data gathering and labeling. Since
2In this paper, the term breaking captchas means automatically solving the captcha
challenge using a computer program, i.e., recognizing the characters within a text-
based captcha image.
text captchas are keeping evolving and have become more robust,
the newly introduced security features make many of the previous
scheme-specific attacks no longer applicable [17]. Recently, some
more generic attacks were proposed [8, 10, 17]. However, these
methods only target text captchas with relatively simple security
features such as simple noisy backgrounds and a single font style.
The success of these generic attacks lies on the effectiveness of
character segmentation [11], but the recent development of text
captchas has made it more challenging by introducing e.g., more
complex backgrounds as well as distorted and overlapping charac-
ters.
This paper presents a generic, low-effort yet effective approach
to automatically solve text-based captchas based on deep learn-
ing [31, 48]. Unlike previous machine-learning-based attacks [55]
that all require a large volume of captchas (which are increasingly
difficult to gather) to train an effective solver, our approach signif-
icantly reduces the number of real captchas needed. We achieve
this by first using automatically generated synthetic captchas to
train a base solver and then fine-tune the basic model by applying
transfer learning [48] to a small set of real captchas of the target
scheme. Our approach is based on the recently proposed genera-
tive adversarial network (GAN) architecture that has demonstrated
impressive performance on image translation tasks [22, 31]. Our
method not only greatly reduces the human involvement and ef-
forts needed in building a successful captcha solver, but also yields
significantly better performance in solving a wide range of modern
captcha schemes. Since our attack requires little human involve-
ment, a captcha solver can be easily built to target a new or revised
captcha scheme. This makes our attack a particular serious threat
for text-based captchas.
We evaluate our approach by applying it to a total of 33 text-
based captcha schemes, of which 11 are currently being used by 32
of the top-50 popular websites ranked by alexa.com as of April,
2018. These include schemes being used by Google, Microsoft, eBay,
Wikipedia and Baidu, many of which employ advanced security
features. We demonstrate that our generic attack needs as few as 500
real captchas instead of millions [21] to learn a text-based captcha
solver, but the resulting solver can significantly outperform four
state-of-the arts [8, 10, 17, 19]. Experimental results show that our
approach can successfully crack all testing schemes, judged by the
commonly used standard [10], and solve a captcha in less than 50
milliseconds using a desktop GPU.
This paper makes the following contributions:
Figure 1: Captcha security features targeted in this work.
Examples in (a), (b), (c) and (d) are samples collected from
Baidu, Sina, Microsoft and JD captcha schemes, respectively.
2 BACKGROUND
GAN architecture.
In this section, we describe the threat model and introduce the
2.1 Threat Model
In this work, we assume that the adversary can access and cor-
rectly label some text-based captchas of the target scheme. Since
our approach can work effectively using no more than 500 captchas
collected from the target scheme, we consider the overhead of col-
lecting and labeling captchas to be low. We also assume the attacker
has the computation power to generate synthetic captchas, and to
train and deploy the solver. Later in the paper, we show that a mod-
ern GPU cloud server will provide sufficient computation power
for launching the attack.
Without loss of generality, to make our experiments manage-
able, we restrict our scope to six widely used security features
employed by the current text captcha schemes. These security fea-
tures (as illustrated in Figure 1), including anti-segmentation and
anti-recognition features. They are used by the top-50 popular web-
sites ranked by alexa.com at the time this work was conducted.
Specifically, an anti-segmentation feature makes it harder for a bot
program to segment the characters. The features labeled as 1, 2 and
6 in Figure 1 give some of the anti-segmentation features targeted
in this work. In a similar vein, an anti-recognition feature increases
the difficulty of character recognition by using a variety of font
styles. The features labeled as 3, 4 and 5 in Figure 1 illustrate some
of the anti-recognition features investigated in the work. More
details on how these features are used by each evaluated captcha
scheme is given later in Table 1.
• We present the first GAN-based approach for automatically
generating training data and constructing solvers for text-
based captchas (Section 4.1).
• We apply, for the first time, transfer learning to train text-
based captcha solvers. Our approach reduces the number
of real captchas needed for building an effective solver by
several orders of magnitudes when compared with prior
machine-learning-based attacks (Section 4.3).
• Our work provides new insights, showing that the security
features employed by the current text-based captcha schemes
are particularly vulnerable under deep learning methods
(Section 6).
2.2 Generative Adversarial Networks
Our attack is based on the recently proposed GAN architecture [22].
A GAN consists of two models: a generative network for creating
synthetic examples and a discriminative network to distinguish
the synthesized examples from the real ones. We use backpropaga-
tion [28] to train both networks, so that over the training iterations,
the generator produces better synthetic samples, while the discrim-
inator becomes more skilled at flagging synthetic samples. GANs
have shown impressive results in image [31, 67] and natural lan-
guage [39, 66] processing tasks. However, due to the newness of
the technique, no work to date has yet exploited GANs to develop a
generic solver for text-based captchas.
6. Noisy background1. Occluding line2. Character overlapping3. Solid and hollow fonts5. Different font sizes and colors 4. Character rotating, distortion or waving (a)(b)(c)(d)Figure 2: Overview of our approach. We first use a small set of real captchas of the target scheme to learn a captcha synthesizer
1 . The captcha synthesizer is then used to automatically generate synthetic captchas (with and without background confu-
sion) to learn a pre-processing model to remove security features, e.g., noisy backgrounds and occluding lines, from the input
captcha image 2 . At the same time, the synthetic captchas (with and without security features) are used to train a base solver
3 . The base solver is then refined to build the final, fine-tuned solver using a few real clean captchas 4 .
3 OVERVIEW OF OUR APPROACH
Figure 2 depicts the four steps of building a captcha solver using
our approach. Each of the step is described as follows.
Step 1. Captcha synthesis. The first step is to generate captchas
that are visually similar to the target captchas. Our GAN-based
captcha generator consists of two parts: a captcha generator that
tries to produce captchas which are as similar as possible to the
target captchas, and a discriminator that tries to identify the syn-
thetic captchas from the real ones. This generation-discrimination
process terminates when the discriminator fails to identify a large
portion of the synthetic captchas. Once training has terminated, we
can then use the trained generator (referred as captcha synthesizer)
to automatically generate an unbounded number of captchas (for
which the characters of each synthetic captcha are known). This is
detailed in Section 4.1.
Step 2. Preprocessing. Before presenting a captcha image to a
solver, we use a pre-processing model to remove the captcha se-
curity features and standardize the font style (e.g., filling hollow
characters and standardizing gaps between characters). The pre-
processing model is based on a specific GAN called Pix2Pix [14].
It is trained from synthetic captchas for which we also have the
corresponding clean captchas (i.e., captcha images without secu-
rity features). The trained model can then be used for any unseen
captchas of the target captcha scheme. This is detailed in Section 4.2.
Step 3. Training the base solver. With the captcha synthesizer
and the pre-processing model in place, we then generate a large
number of synthetic captchas together with their labels (i.e., corre-
sponding characters) and use this dataset to learn a base solver for a
target captcha scheme. Our captcha solver is a convolutional neural
network (CNN). The trained solver takes in a pre-processed captcha
image and outputs the corresponding characters. This process is
described in more details at Section 4.3.
Step 4. Fine-tuning the base solver. In the last step, we apply
transfer learning to refine the base solver by using a small set of
manually labeled captchas that are collected from the target website.
Transfer learning allows us to leverage knowledge learned from
synthetic captchas to reduce the cost of collecting and labeling
captchas, and to further improve performance of the base model.
This is described in Section 4.3.
Figure 3: The training process of our GAN-based text captcha
synthesizer.
4 IMPLEMENTATION DETAILS
We now describe how to build the captcha synthesizer (Sec-
tion 4.1), pre-processing model (Section 4.2) and solver (Section 4.3)
in more details.
4.1 Captcha Synthesizer
Deep neural networks typically require a large volume of training
examples to learn an effective model. Prior work shows that to
build an effective CNN-based captcha solver would require over
2.3 million unique training images [19]. Collecting and manually
labelling such number of real captchas would require intensive
human involvement and incur significant costs. In this paper, we
show that it is possible to minimize the human involvement and
the associated costs via captcha synthesis. The idea is that using
a captcha synthesizer, we can populate the training data with an
unbounded number of synthetic captchas (that are similar to the
real captchas). This allows the training data to cover the problem
space far more finely than what could be achieved by exclusively
using human-labelled training data.
Figure 3 illustrates the process of training a captcha synthesizer
using GANs. The training process is largely automatic except that
a user needs to provide a small set of real captchas (500 in this
work) of the target captcha scheme, and to define the set of security
features. The security feature definition is achieved by configuring
a set of pre-defined parameters. Figure 5 lists the set of security
parameters considered in this work and the specific settings for
the Baidu captcha scheme. We stress that these parameters can be