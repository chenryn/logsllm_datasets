如果有一个用于编辑文档的程序，因为要注册，所以需要限制可以同时打开的文档
数。现在假定要销售该软件的不同版本，而且顾客可以升级他们的版本，以便同时打开更
多的文档。显然，不能在源代码中对最大文档数进行硬编码，而是需要一个字段来表示这
个最大文档数。这个字段必须是只读的——每次启动程序时，从注册表键或其他文件存储
中读取。代码如下所示：
    public class DocumentEditor
    {
      private static readonly uint s_maxDocuments;
      static DocumentEditor()
      {
        s_maxDocuments = DoSomethingToFindOutMaxNumber();
      }
    }
在本例中，字段是静态的，因为每次运行程序的实例时，只需要存储最大文档数一
次。这就是在静态构造函数中初始化它的原因。如果只读字段是一个实例字段，就要在实
例构造函数中初始化它。例如，假定编辑的每个文档都有一个创建日期，但不允许用户修
改它（因为这会覆盖过去的日期）。
如前所述，日期用基类System.DateTime表示。下面的代码在构造函数中使用
DateTime结构初始化_creationTime字段。初始化Document类后，创建时间就不能改变了：
      public class Document
      {
        private readonly DateTime _creationTime;
        public Document()
        {
          _creationTime = DateTime.Now;
        }
      }
在上面的代码段中，CreationDate和MaxDocuments的处理方式与任何其他字段相同，
但因为它们是只读的，所以不能在构造函数外部赋值：
    void SomeMethod()
    {
      s_maxDocuments = 10; // compilation error here. MaxDocuments is readonly
    }
还要注意，在构造函数中不必给只读字段赋值。如果没有赋值，它的值就是其特定数
据类型的默认值，或者在声明时给它初始化的值。这适用于只读的静态字段和实例字段。
1．只读属性
在属性定义中省略set访问器，就可以创建只读属性。因此，如下代码把Name变成只
读属性：
    private readonly string _name;
    public string Name
    {
      get
      {
        return _name;
      }
    }
用readonly修饰符声明字段，只允许在构造函数中初始化属性的值。
同样，在属性定义中省略get访问器，就可以创建只写属性。但是，这是不好的编程
方式，因为这可能会使客户端代码的作者感到迷惑。一般情况下，如果要这么做，最好使
用一个方法替代。
2．自动实现的只读属性
C# 6提供了一个简单的语法，使用自动实现的属性创建只读属性，访问只读字段。这
些属性可以使用属性初始化器来初始化。
    public string Id { get; } = Guid.NewGuid().ToString();
在后台，编译器会创建一个只读字段和一个属性，其get访问器可以访问这个字段。
初始化器的代码进入构造函数的实现代码，并在调用构造函数体之前调用。
当然，只读属性也可以在构造函数中初始化，如下面的代码片段所示：
    public class Person
    {
      public Person(string name)
      {
        Name = name;
      }
      public string Name { get; }
    }
3．表达式体属性
C# 6中与属性相关的另一个扩展是表达式体属性。类似于表达式体方法，表达式体属
性不需要花括号和返回语句。表达式体属性是带有get访问器的属性，但不需要编写get关
键字。只是get访问器的实现后跟lambda操作符。对于Person类，FullName属性使用表达式
体属性实现，通过该属性返回FirstName和LastName属性值的组合：
    public class Person
    {
      public Person(string firstName, string lastName)
      {
        FirstName = firstName;
        LastName = lastName;
      }
      public string FirstName { get; }
      public string LastName { get; }
      public string FullName => $"{FirstName} {LastName}";
    }
4．不可变的类型
如果类型包含可以改变的成员，它就是一个可变的类型。使用readonly修饰符，编译
器会在状态改变时报错。状态只能在构造函数中初始化。如果对象没有任何可以改变的成
员，只有只读成员，它就是一个不可变类型。其内容只能在初始化时设置。这对于多线程
是非常有用的，因为多个线程可以访问信息永远不会改变的同一个对象。因为内容不能改
变，所以不需要同步。
不可变类型的一个例子是String类。这个类没有定义任何允许改变其内容的成员。诸
如ToUpper（把字符串更改为大写）的方法总是返回一个新的字符串，但传递到构造函数
的原始字符串保持不变。
3.4 匿名类型
第2章讨论了var关键字，它用于表示隐式类型化的变量。var与new关键字一起使用
时，可以创建匿名类型。匿名类型只是一个继承自Object且没有名称的类。该类的定义从
初始化器中推断，类似于隐式类型化的变量。
如果需要一个对象包含某个人的姓氏、中间名和名字，则声明如下：
    var captain = new
    {
      FirstName = "James",
      MiddleName = "T",
      LastName = "Kirk"
    };
这会生成一个包含FirstName、MiddleName和LastName属性的对象。如果创建另一个
对象，如下所示：
    var doctor = new
    {
      FirstName = "Leonard",
      MiddleName = string.Empty,
      LastName = "McCoy"
    };
那么captain和doctor的类型就相同。例如，可以设置captain = doctor。只有所有属性都
匹配，才能设置captain = doctor。
如果所设置的值来自于另一个对象，就可以简化初始化器。如果已经有一个包含
FirstName、MiddleName和LastName属性的类，且有该类的一个实例（person）, captain对
象就可以初始化为：
    var captain = new
    {
      person.FirstName,
      person.MiddleName,
      person.LastName
    };
person对象的属性名应投射到新对象名captain，所以captain对象应有FirstName、
MiddleName和LastName属性。
这些新对象的类型名未知。编译器为类型“伪造”了一个名称，但只有编译器才能使用
它。我们不能也不应使用新对象上的任何类型反射，因为这不会得到一致的结果。
3.5 结构
前面介绍了类如何封装程序中的对象，也介绍了如何将它们存储在堆中，通过这种方
式可以在数据的生存期上获得很大的灵活性，但性能会有一定的损失。因为托管堆的优
化，这种性能损失比较小。但是，有时仅需要一个小的数据结构。此时，类提供的功能多
于我们需要的功能，由于性能原因，最好使用结构。看看下面的例子：
    public class Dimensions
    {
      public double Length { get; set; }
      public double Width { get; set; }
    }
上面的代码定义了类Dimensions，它只存储了某一项的长度和宽度。假定编写一个布
置家具的程序，让人们试着在计算机上重新布置家具，并存储每件家具的尺寸。表面看来
使字段变为公共字段会违背编程规则，但这里的关键是我们实际上并不需要类的全部功
能。现在只有两个数字，把它们当成一对来处理，要比单个处理方便一些。既不需要很多
方法，也不需要从类中继承，也不希望.NET运行库在堆中遇到麻烦和性能问题，只需要
存储两个double类型的数据即可。
为此，只需要修改代码，用关键字struct代替class，定义一个结构而不是类，如本章
前面所述：
    public struct Dimensions
    {
      public double Length { get; set; }
      public double Width { get; set; }
    }
为结构定义函数与为类定义函数完全相同。下面的代码说明了结构的构造函数和属性
（代码文件StructsSample/Dimension.cs）：
    public struct Dimensions
    {
      public double Length { get; set; }
      public double Width { get; set; }
      public Dimensions(double length, double width)
      {
        Length = length;
        Width = width;
      }
      public double Diagonal => Math.Sqrt(Length ＊ Length + Width ＊ Width);
    }
结构是值类型，不是引用类型。它们存储在栈中或存储为内联（如果它们是存储在堆
中的另一个对象的一部分），其生存期的限制与简单的数据类型一样。
● 结构不支持继承。
● 对于结构，构造函数的工作方式有一些区别。如果没有提供默认的构造函数，编译
器会自动提供一个，把成员初始化为其默认值。
● 使用结构，可以指定字段如何在内存中布局（第16章在介绍特性时将详细论述这个
问题）。
因为结构实际上是把数据项组合在一起，所以有时大多数或者全部字段都声明为
public。严格来说，这与编写.NET代码的规则相反——根据Microsoft，字段（除了const字
段之外）应总是私有的，并由公有属性封装。但是，对于简单的结构，许多开发人员都认
为公有字段是可接受的编程方式。
下面几节将详细说明类和结构之间的区别。
3.5.1 结构是值类型
虽然结构是值类型，但在语法上常常可以把它们当作类来处理。例如，在上面的
Dimensions类的定义中，可以编写下面的代码：
      var point = new Dimensions();
      point.Length = 3;
      point.Width = 6;
注意，因为结构是值类型，所以new运算符与类和其他引用类型的工作方式不同。
new运算符并不分配堆中的内存，而是只调用相应的构造函数，根据传送给它的参数，初
始化所有的字段。对于结构，可以编写下述完全合法的代码：
      Dimensions point;
      point.Length = 3;
      point.Width = 6;
如果Dimensions是一个类，就会产生一个编译错误，因为point包含一个未初始化的引
用——不指向任何地方的一个地址，所以不能给其字段设置值。但对于结构，变量声明实
际上是为整个结构在栈中分配空间，所以就可以为它赋值了。但要注意下面的代码会产生
一个编译错误，编译器会抱怨用户使用了未初始化的变量：
      Dimensions point;
      double D = point.Length;
结构遵循其他数据类型都遵循的规则：在使用前所有的元素都必须进行初始化。在结
构上调用new运算符，或者给所有的字段分别赋值，结构就完全初始化了。当然，如果结
构定义为类的成员字段，在初始化包含的对象时，该结构会自动初始化为0。
结构会影响性能的值类型，但根据使用结构的方式，这种影响可能是正面的，也可能
是负面的。正面的影响是为结构分配内存时，速度非常快，因为它们将内联或者保存在栈
中。在结构超出了作用域被删除时，速度也很快，不需要等待垃圾回收。负面影响是，只
要把结构作为参数来传递或者把一个结构赋予另一个结构（如A=B，其中A和B是结
构），结构的所有内容就被复制，而对于类，则只复制引用。这样就会有性能损失，根据
结构的大小，性能损失也不同。注意，结构主要用于小的数据结构。
但当把结构作为参数传递给方法时，应把它作为ref参数传递，以避免性能损失——
此时只传递了结构在内存中的地址，这样传递速度就与在类中的传递速度一样快了。但如
果这样做，就必须注意被调用的方法可以改变结构的值。
3.5.2 结构和继承
结构不是为继承设计的。这意味着：它不能从一个结构中继承。唯一的例外是对应的
结构（和C#中的其他类型一样）最终派生于类System.Object。因此，结构也可以访问
System.Object的方法。在结构中，甚至可以重写System.Object中的方法——如重写
ToString（）方法。结构的继承链是：每个结构派生自System.ValueType类，
System.ValueType类又派生自System.Object。ValueType并没有给Object添加任何新成员，
但提供了一些更适合结构的实现方式。注意，不能为结构提供其他基类：每个结构都派生
自ValueType。
3.5.3 结构的构造函数
为结构定义构造函数的方式与为类定义构造函数的方式相同。
前面说过，默认构造函数把数值字段都初始化为0，且总是隐式地给出，即使提供了
其他带参数的构造函数，也是如此。
在C# 
6中，也可以实现默认的构造函数，为字段提供初始值（这一点在早期的C#版
本中未实现）。为此，只需要初始化每个数据成员：
    public Dimensions()
    {
      Length = 0;
      Width = 1;
    }
    public Dimensions(double length, double width)
    {
      Length = length;
      Width = width;
    }
另外，可以像类那样为结构提供Close（）或Dispose（）方法。第5章将讨论
Dispose（）方法。
3.6 按值和按引用传递参数
假设有一个类型A，它有一个int类型的属性X。ChangeA方法接收类型A的参数，把X
的值改为2（代码文件PassingByValueAndByReference / Program.cs）：
    public static void ChangeA(A a)
    {
      a.X = 2;
    }
Main（）方法创建类型A的实例，把X初始化为1，调用ChangeA方法：
    static void Main()
    {
      A a1 = new A { X = 1 };
      ChangeA(a1);
      WriteLine($"a1.X: {a1.X}");
    }
输出是什么？1还是2？
答案视情况而定。需要知道A是一个类还是结构。下面先假定A是结构：
    public struct A
    {
      public int X { get; set; }
    }
结构按值传递，通过按值传递，ChangeA方法中的变量a得到堆栈中变量a1的一个副
本。在方法ChangeA的最后修改、销毁副本。a1的内容从不改变，一直是1。
A作为一个类时，是完全不同的：
    public class A
    {
      public int X { get; set; }
    }
类按引用传递。这样，a变量把堆上的同一个对象引用为变量a1。当ChangeA修改a的
X属性值时，把它改为a1.X，因为它是同一个对象。这里，结果是2。
3.6.1 ref参数
也可以通过引用传递结构。如果A是结构类型，就添加ref修饰符，修改ChangeA方法
的声明，通过引用传递变量：
    public static void ChangeA(ref
 A a)
    {
      a.X = 2;
    }
从调用端也可以看出这一点，所以给方法参数应用了ref修饰符后，在调用方法时需
要添加它：
    static void Main()
    {
      A a1 = new A { X = 1 };
      ChangeA(ref a1);
      WriteLine($"a1.X: {a1.X}");
    }
现在，与类类型一样，结构也按引用传递，所以结果是2。
类类型如何使用ref修饰符？下面修改ChangeA方法的实现：
    public static void ChangeA(A a
)
    {
      a.X = 2;
      a = new A { X = 3 };
    }
使用A类型的类，可以预期什么结果？当然，Main（）方法的结果不是1，因为按引
用传递是通过类类型实现的。a.X设置为2，就改变了原始对象a1。然而，下一行a = new
A { X = 3 }现在在堆上创建一个新对象，和一个对新对象的引用。Main（）方法中使用的
变量a1仍然引用值为2的旧对象。ChangeA方法结束后，没有引用堆上的新对象，可以回
收它。所以这里的结果是2。