frame
code
dict
深度探索动态语言核心技术
Internal对象
eMapping对象
容纳其他对象的序列集合对象
数值对象
图17Python中对象的分类
Object
Sequence对象
Numeric对象
这种分类并不一定完
?
boolean
float
integer
Ltuple
list
string
---
## Page 59
2.1初识PylntObject对象
当我们把目光投到运行时的整数对象身上，就会发现有许多值得深思的地方。
墨。诚然，如果单纯地考虑一个静态的pyIntobject的实现，没有什么太困难的，然而
象一下，似乎我们轻而易举就能搞定一个整数对象，对于它，似乎并不需要花费太多的笔
比如字符串对象等。
对象所特有的性质，在Python中，除ryIntobject之外，还有很多对象也是不变对象，
不能改变该对象的值了。在后续的章节中我们可以看到，这种不变性并非是pyIntobject
示对象所维护的真实整数值）。也就是说，在创建了一个PyIntobject对象之后，就再也
象的值”和“pyIntobject对象中维护的真实整数值”两种说法，而将其视为一致，都表
维护的那个真实的整数值而言的（在本节的描述中，我们将不刻意区分“PyintObject对
析的pyIntObject对象就是一个不可变对象，这种不变性是针对eyntobject对象中所
可变性将对象分为“可变对象”（mutabie）和“不可变对象”（immutable）。这章将要
对象的二分法，实际上还存在着另一种对对象的二分法，这种分类法根据对象维护数据的
初探Python对象体系时，我们看到了“定长对象”和“变长对象”的区别，这是一种对
内建对象的剖析就从这个最简单的整数对象开始。
说，整数对象也最容易使读者真实地感受Pyton对象机制的切入点，因此我们对Pyhon
整数对象是如此简单，基于我们之前对Python对象机制的一般性剖析，闭上眼睛想
Pyhon中对“整数”这个概念的实现是通过PyIntobject对象来完成的。在上一章
在Python的所有对象中，整数对象是最简单的对象。从对Pyhon对象机制的剖析来
Python中的整数对象
Python源码剖析
一深度探索动态语言核心技术
第
CHAPTER
2
章
---
## Page 60
Python源码剖析
对象是PyInt_Type:
关的元信息实际上都是保存在与对象对应的类型对象中的，对于PyIntobject，这个类型
象的定义一
我们会看到，几乎所有的内建对象，都会有自己所特有的对象池机制。
向特定对象的缓冲池机制也是Pyton语言实现时的核心设计策略之一，
然界的蚂蚁一般，已经是通过一定的结构联结在一起的庞大的整数对象系统了。而这种面
对象的缓冲池机制。在此基础上，运行时的整数对象并非一个个独立的对象，而是如同自
到，如何设计一个高效的机制，使得整数对象的使用不会成为Python的瓶颈，就成了一
来的狂风骤雨般的访问？这样的执行效率你可以接受吗？一旦引入运行时，我们就会看
[intobject.c]
[intobject.h]
个必须面对的至关重要的设计决策，而解决方案也并非可以信手来。
考虑到Pyhon所采用的引用计数机制，这是否意味着系统堆将面临着透过整数对象而涌
typedef struct
PyIntobject:
Pyobject_GenerioGetAttr,
αint_as_number,
从对Python对象机制的一般性描述中，我们知道，对于Pyhon中的对象，与对象相
Python中的整数对象PyIntobject实际上就是对C中原生类型1ong的一个简单包
好，言归正传，在深入整数对象的运行时行为之前，我们再来回顾一下静态的整数对
整数对象池，这是Python给出的解答，我们将在本章中看到一个优雅而巧妙的整数
sizeof(PyIntobjeat),
PyObJect_HEAD_INTT(&PyType_Type)
PyObiect_HEAD
第2章
(hashfunc)int_hash,
(printfunc)int_print,
(destructor)int_dealloc,
"int"
在Pyhon的应用程序中，
cmpfunc) int_comnare,
ob.
深度探索动态语言核心技术
ect
Python中的整数对象
-PyIntobject:
ival:
/tp_as_buffer/
Epsetattr
tpugetattr
整数的使用是如此地广泛，其创生和灭又是如此频繁
工
tp_hash
tpgetattro
tp_compatey
tp_dealloc
/
在后续的剖析中，
---
## Page 61
象所支持的操作。在表2-1中，列出了一些pyIntobject所支持的操作：
对象应该占用的内存大小，PyIntObject对象的文档信息，而更多的是PyIntobject对
关的元信息
费如此的篇幅来展示一
static int int_compare(Pyintobject v,
[intobject.c]
intmethods
intas_number
int_compare
int_print
int_hash
int_repr
int_free
int_dealloe
下面是
在PyInt_Type中保存了关于PyIntobject对象的丰富元信息，其中有PyIntobject
这里完整地列出了PyIntobject对象的元信息，这是我们第一次，也是最后一次花
register longii
(freefunc)int_free,
Irt_new,
int_doe,
Py_TPFLAGS DEFAULTI Py TPPLAGS_CHECKTYPES
int_methods,
一个例子，我们可以看一看如何比较两个整数对象的大小。
一个对象的元信息，在以后的章节中，我们将只会给出与某个主题相
=v->ob_ival;
tp.dictaffset
tpudescr_
tp_base
tp_getset
tpmembars
tp_iternext
piter*
tp_clear */
Lp_Craverse
cp.descr_get
tpdiet
/*tp_doa
W.
set
表2-1
Python源码剖析
成员函数集合
数值操作集合
比较操作
打印PyIntObject对象
获得HASH值
转化成PyStringObject对象
PyIntObject对象的释放操作
PyIntObject对象的析构操作
/ntp_free
PyIntObject*w)
2.1
初识PylntObject对象
Py_TPFLAGS_BASETYPE,
一深度探索动态语言核心技术
---
## Page 62
Python源码剖析
代码清单2-1
如在int_asnumber中，就可以看到，有相当多的操作是没有实现的。作为一个数值操
定义了39种可选的操作，这39种操作包括加法、减法、乘法、模运算等。
可选的操作信息。在Python2.5中，ByNumberMethods中一共有39个函数指针，即其中
较。在PyInt_Type这个元信息集合中，
statle Pyobdect*int_add(PyIntObject *v
[intobject.e]
#detine PyInt_AS_LONG(op)(((PyIntObject*)(op))->ob_ivaI)
作的例子，
[intobject.h]
statie PyNumherMethods int_as_mumber =
宏，
[intobject.c]
recurm PyLong_Type.tp_as_number->nb_add((Pyobject *)v,(Pyobject *)w);
if(PyInt
在PyNumberMethods的39种数值操作中，并非所有的操作都要求一定要被实现。比
在int_as_number 中，确定了对于一个整数对象，这些数值操作应该如何进行。
第2章Python中的整数对象
X
CONVERTTOLONG(W.
上一章巴经提到，这个ryNumberMethods中定义了一个对象作为数值对象时的所有
int_true divide,
显然，PyIntobect对象的比较操作实际上就是简单地将它所维护的iong值进行比
CONVERT
(binaryfunc)int_add,
(hinaryfunc)int_sub,
牺牲类型安全，
return PyInt_FromLong(x);
al
returr Py_NotImplemented;
，我们可以看一下eyIntObject中加法操作是如何实现的（见代码清单2-1）。
一深度探索动态语言核心技术
检查加法结果是否温出
LONG
换取执行效率
nb_inplace_true_divide
nb_inplace_floor_divide*
？
b
1
a):
/*nbtrue
（1>？1：0
/nb_foor_divide/
/mb.subtract*/
Tng)
(0
，需要特别注意的是int_as_number这个域：
dlvide
pyintobject
W)
---
## Page 63
结果溢出，从而返回一个PyLongobject对象：
PyLongObject对象了。图2-1对PyIntObject 对象a执行a+a的操作时，就会引起加法
取而代之的是一个全新的PyIntobject对象于虚无中诞生。
immutable的对象，因为在操作完成之后，原来参与操作的任何一个对象都没有发生改变，
则会多方检查类型安全性，当然，这就以执行效率作为代价了。
展模块时，可能由于疏忽导致这样的错误。而查看intobjectc中的函数版PyInt_AsLong，
其参数op完全可以不是一个PyIntobject对象，比如程序员在使用C编写Python的扩
宏版本的PyInt_ASLONG可以省去一次函数调用的开销，但是其牺牲了类型安全，因为
出，就返回一个新的PyIntobject，这个PyIntobject所拥有的值正好是加法操作的结果。
可以看到，在完成了加法操作后，代码清单2-1的[1]1处还进行了溢出的检查。如果没有溢
护的文档，如图2-2所示：
我们可以在Python的交互环境下通过PyIntobject 对象的_doe_属性看到int_doc维
域中。文档无缝地集成在语言的实现中，这一点，是Pyton相对于其他语言的一大特点。
#iEdef WITH_DOC_STRINGS
define
[python.h]
如果加法的结果有溢出，那么结果就再不是一个PyIntobject对象，而是一个
从PyIntobject对象的加法操作的实现可以清晰地看到，PyIntobject确实是一个
在Pyhon的实现中，对某些会频繁执行的代码，都会同时提供函数和宏两种版本
如你所想，PyIntobject对象所实现的加法操作是直接在其维护的1ong值上进行的，
另一个有趣的元信息是PyIntobject对象的文档信息，
PyDoc_VAR(name)static
will be returned instead.
argument will be
int(xl,
>>> print a.
STRVAR(name,stm)PyDoc_VAR（name)PyDoc_STR（str)
doc
图2-2整数的文档信息
truncated
图2-1加法溢出的例子
ctypelongt>
Ctype
工t
type
chat name)
1.9
an
Python源码剖析
towards zero
2.1初识PylntObject对象
to
numberl)
这个元信息维护在int_doc
(thisdoesno
if possible
深度探索动态语言核心技术
When con
---
## Page 64
Python源码剖析
2.2.1
2.2
34
接口转换罢了：
设计模式中AdaptorPatterm的思想对整数对象的核心创建函数PyInt_FromFloat进行了
PyInt_FromFloat。如此看来，PyInt_Fromstring和 pyInt_FramUnicode不过利用了
FromUnicode实际上都是先将字符串或Py_UNIcoDE对象转换成浮点数，然后再调用
得出的结论都是正确的。
种内建实例对象暴露出来的CAPI上。无论通过哪种方式创建内建实例对象，我们分析所
本书第一部分对内建实例对象的创建之分析中，我们将把分析的重点都放在Python为这
操作创建实例对象，实际上最终还是会调用Pyon为特定内建对象准备的CAPI：所以在
建内建实例对象的。而且，对于内建对象，即便是通过内建类型对象中的tp_new、tp_init
也可以通过类型对象完成创建动作。在Pyhon自身的实现中，几乎都是调用CAPI来创
wi1l he returned instead."):
argumert wiii be truncatedt
"int(xD, base])
[intobject.c]
#endif
#define PyDoc_STR(str)
#define PyDoo_sTR(str) str
分别是从1ong值，从字符串以及Py_UNTcoDE对象生成eyIntObject对象。在这里
PylntObject对象的创建和维护
Pyobject*PyInt_FromUnicode(Py_UNIcoDE *s,int length,int base)
在intobject.h中可以看到，为了创建一个pyIntobject对象，Python提供了3条途径：
在上一章我们已经提到，Pyhon中创建一个实例对象可以通过Python暴露的CAPI，
对象创建的3种途径
Pyobject*
第2章Python中的整数对象
深度探索动态语言核心技术
LUNICODE
argument
does not
Afloating point\n