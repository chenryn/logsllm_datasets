We have now created an empty COM object. As of yet, it's still a
useless object because it doesn't do anything. We will create a
simple method called Beep() which causes the system to beep
once. Our COM method will call the Win32 API function
::Beep(), which does pretty much what you would expect.
1. Go to "Class View" tab. Select the IBeepObj interface. This
interface is represented by a small icon that resembles a
spoon. 
2. Right click the IBeepObj interface. Select "Add Method"
from the menu.
3. At the "Add Method to Interface" dialog, enter the following
and press OK. Add the method "Beep" and give it a single
[in] parameter for the duration. This will be the length of the
beep, in milliseconds. 
Figure 3–7
Adding a methos
Adding a Method to the Server
37
Additonal Information and Updates: http://www.iftech.com/dcom
4. "Add Method" has created the MIDL definition of the
method we defined. This definition is written in IDL, and
describes the method to the MIDL compiler. If you want to
see the IDL code, double click the "IBeepObj" interface at
the "Class View" tab. This will open and display the file
BeepServer.IDL. No changes are necessary to this file, but
here's what our interface definition should look like. 
interface IBeepObj : IUnknown
{
[helpstring("method Beep")] 
   HRESULT Beep([in] LONG duration);
};
The syntax of IDL is quite similar to C++. This line is the
equivalent to a C++ function prototype. We will cover the syntax
of IDL in Chapter 7.
5. Now we're going to write the C++ code for the method. The
AppWizard has already written the empty shell of our C++
Figure 3–8
Specifying the method’s name and parameters
38    Chapter 3 •
Understanding a Simple COM Server 
function, and has added it to the class definition in the
header file (BeepServer.H). 
Open the source file BeepObj.CPP. Find the //TODO: line
and add the call to the API Beep function. Modify the
Beep() method as follows:
STDMETHODIMP CBeepObj::Beep(LONG duration)
{
     // TODO: Add your implementation code here
     ::Beep( 550, duration );
     return S_OK;
}
6. Save the files and build the project.
We now have a complete COM server. When the project fin-
ishes building, you should see the following messages:
----Configuration: BeepServer - Win32 Debug----
Creating Type Library...
Microsoft (R) MIDL Compiler Version 5.01.0158 
Copyright (c) Microsoft Corp 1991-1997. All rights 
reserved. 
Processing D:\UnderCOM\BeepServer\BeepServer.idl
BeepServer.idl
Processing C:\Program Files\Microsoft Visual Stu-
dio\VC98\INCLUDE\oaidl.idloaidl.idl
.
.
Compiling resources...
Compiling... 
StdAfx.cppCompiling...
BeepServer.cpp
BeepObj.cpp
Generating Code...
Linking... 
  Creating library  Debug/BeepServer.lib and object 
Debug/BeepServer.exp
Performing registration
Adding a Method to the Server
39
Additonal Information and Updates: http://www.iftech.com/dcom
BeepServer.dll - 0 error(s), 0 warning(s)
This means that the Developer Studio has completed the fol-
lowing steps:
• Executed the MIDL compiler to generate code and type
libraries 
• Compiled the source files 
• Linked the project to create BeepServer.DLL 
• Registered COM components 
• Registered the DLL with RegSvr32 so it will automatically
load when needed. 
Let's look at the project that we've created. While we've
been clicking buttons, the ATL AppWizard has been generating
files. If you look at the "FileView" tab, the following files have
been created:
Source File
Description
BeepServer.dsw
Project workspace
BeepServer.dsp 
Project File 
BeepServer.plg 
Project log file. Contains detailed error information 
about project build. 
BeepServer.cpp
DLL Main routines. Implementation of DLL Exports
BeepServer.h
MIDL generated file containing the definitions for the 
interfaces
BeepServer.def
Declares the standard DLL module parameters: DllCa-
nUnloadNow, DllGetClassObject, DllUnregisterServer
BeepServer.idl
IDL source for BeepServer.dll. The IDL files define all 
the COM components.
BeepServer.rc
Resource file. The main resource here is 
IDR_BEEPDLLOBJ which defines the registry scripts 
used to load COM information into the registry.
Resource.h
Microsoft Developer Studio generated include file.
StdAfx.cpp 
Source for precompiled header. 
Stdafx.h 
Standard header 
40    Chapter 3 •
Understanding a Simple COM Server 
In just a few minutes, we have created a complete COM
server application. Back in the days before wizards, writing a
server would have taken hours. Of course the down-side of wiz-
ards is that we now have a large block of code that we don't
fully understand. In Chapter 5 we will look at the generated
modules in detail, and then as a whole working application.
Running the Client and the Server
Now that we have compiled the server and we have a working
client (from the previous chapter), we can run the two of them
together. In theory, all that you have to do is run the client.
Because the server DLL was automatically registered in the regis-
try as part of the build process, the client will automatically find
and load the server and then call its Beep method. You will hear
the appropriate “beep” sound. If there is a problem you will get
no textual complaint from the client (as it contains no error
checking code - see the next chapter to correct that problem...)
but it will not beep. 
BeepServer.tlb
Type Library generated by MIDL. This file is a binary 
description of COM interfaces and objects. The TypeLib 
is very useful as an alternative method of connecting a 
client.
BeepObj.cpp
Implementation of CBeepObj. This file contains all the 
actual C++ code for the methods in the COM BeepObj 
object.
BeepObj.h 
Definition of BeepObj COM object. 
BeepObj.rgs
Registry script used to register COM components in 
registry. Registration is automatic when the server 
project is built.
BeepServer_i.c 
Contains the actual definitions of the IID's and CLSID's. 
This file is often included in cpp code. 
There are several other proxy/stub files that are gener-
ated by MIDL.
Table 3.1
All the files created by the ATL wizard
Summary
41
Additonal Information and Updates: http://www.iftech.com/dcom
If you had trouble building the client or the server (that is, if
any errors or warnings were generated during the build or link
process), one thing to check is to make sure that both the client
and server are being built as normal Win32 Debug configura-
tions. Sometimes the system will default to odd Unicode release
builds. In the Build menu you can check and change the active
configuration to “Win32 Debug”.
If both client and server build fine but the client does not
beep, that means that either the client could not find or could
not start the server. Assuming that you built the server as
described above and there were no errors, we know it exists.
The problem almost certainly is occuring because the GUIDs do
not match between the client and the server. Recall that we used
statically declared GUIDS in the client in Chapter 2 to make the
GUIDs more obvious. That works fine if you are pulling the code
off the CD, but will be a problem if you generated the server
with the ATL wizard yourself. To solve this problem, look for the
“_i.c” file that MIDL generated in the server directory. In that file
is an IID GUID and a CLSID GUID. Copy them into the appropri-
ate spot in the client application, rebuild and try again. You
should hear the appropriate beep when the client executes. Now
that you can see where the GUIDs are coming from, you may
want to modify the client so it #includes the “_i.c” file and use
the GUIDs directly from there.
Summary
The server code was almost entirely generated by the ATL wiz-
ards. It provides a working implementation of the server. We
examined a DLL based server, but the process is almost identical
for all server types. This framework is an excellent way to
quickly develop a server application because you don't have to
know the myriad of details required to make it work.
42    Chapter 3 •
Understanding a Simple COM Server 
F
O
U
R
4
Creating your own 
COM Clients and 
Servers    
Based on the previous three chapters, you can see that it is
extremely easy to create COM clients and servers. In fact, you
were probably stunned by how little code was actually required.
Just a handful of lines on both the client and server sides yields a
complete COM application. You can now see why many devel-
opers use COM whenever they want to create a DLL - it only
takes about 2 minutes to set up an in-proc COM DLL with the
ATL wizard and get it working. 
The purpose of this chapter is to review the steps you need
to take to create your own COM servers and use them in real
applications you create. As you will recall, the client code previ-
ously presented was a bit sparse. We will expand on it a bit, look
at the code you need to embed in any client to activate the
server properly, and then look at an MFC application that lets
you try out some of the error modes that a COM client may typi-
cally encounter. 
Server Side
As we saw in Chapter 3, the ATL Wizard makes COM server cre-
ation extremely easy. The first step to creating any COM server,
44    Chapter 4 •
Creating your own COM Clients and Servers 
however, relies solely on you. You need to select one or more
pieces of functionality that you want to separate from the main
body of an application's code. You often want to separate the
functionality in order to make it reusable across multiple applica-
tions. But you may also want to do it because it allows a team of
programmers to divide easily into separate working groups, or
because it makes code development or maintenance easier.
Whatever the reason, defining the functionality for the COM
server is the first step. 
One thing that makes defining the boundary easy is the fact
that, in the simplest case, a COM server can act almost identically
to a normal C++ class. Like a class, you instantiate a COM class
and then start calling its methods. The syntax of COM instantia-
tion and method calling is slightly different from the syntax in
C++, but the ideas are identical. If a COM server has only one
interface, then it is, for all practical purposes, a class. You still
have to obey the rules of COM when accessing the object, but
the concepts are the same. 
Once you have decided on the functionality and the meth-
ods that will be used to access that functionality, you are ready
to build your server. As we in Chapter 3, there are 4 basic steps
you must take to create a server: 
1. Use the ATL Wizard to create the shell for your COM server.
You choose whether you want the server to be a DLL, an
EXE or a server. 
2. Create a new COM object inside the server shell with the
ATL object wizard. You will choose the threading model.
This creates the interface into which you can install your
methods. 
3. Add the methods to your object and declare their parame-
ters. 
4. Write the code for your methods. 
Each of these tasks has been described in detail in the previous
chapter. Once you have completed these steps you are ready to
compile your COM object and use it. 
After reading the previous chapter, one question frequently
asked concerns threading models. Specifically, what is the differ-
Client Side
45
Additonal Information and Updates: http://www.iftech.com/dcom
ence between apartment-threaded and free-threaded COM
objects? Chapter 10 contains a complete description, but the eas-
iest way to understand the difference is to think of apartment-
threaded COM objects as single-threaded, while free-threaded
COM objects as multi-threaded. 
In apartment threading, method calls from multiple clients
are serialized in the COM object on the server. That is, each indi-
vidual method call completes its execution before the next
method call can begin. Apartment-threaded COM objects are
therefore inherently thread safe. Free threaded COM objects can
have multiple method calls executing in the COM object at the
same time. Each method call from each client runs on a different
thread. In a free-threaded COM object you therefore have to pay
attention to multi-threading issues such as synchronization. 
Initially you will want to use apartment threading because it
makes your life easier, but over time the move to free threading
can sometimes make things more flexible, responsive and effi-
cient. 
Client Side
The client presented in chapter 2 has the benefits of clarity and
compactness. However, it contains no error-checking code and
that makes it insufficient in a real application. Let's review that
code, however, because it is so simple and it shows the exact
steps that you must take to create a successful client: 
void main()
{
        HRESULT hr;             // COM error code
        IBeepDllObj *IBeep;     // pointer to interface
        hr = CoInitialize(0);   // initialize COM
        if (SUCCEEDED(hr))      // check for success
        {
            hr = CoCreateInstance( 
                clsid,                  // COM class id
                NULL,                   // outer unknown
46    Chapter 4 •
Creating your own COM Clients and Servers 
                CLSCTX_INPROC_SERVER,   // server INFO
                iid,                    // interface id
                (void**)&IBeep );       // interface
            if (SUCCEEDED(hr))
            {
                // call the method
                hr = IBeep->Beep(800); 
                // release the interface when done
                // calling its methods
                hr = IBeep->Release();
            }
        CoUninitialize();               // close COM
}
The call to CoInitialize and CoCreateInstance initializes
COM and gets a pointer to the necessary interface. Then you can
call methods on the interface. When you are done calling meth-
ods you release the interface and call CoUninitialize to finish
with COM. That's all there is to it. 
That would be all there is to it, that is, if things always
worked as planned. There are a number of things that can go
wrong when a COM client tries to start a COM server. Some of
the more common include: 
• The client could not start COM 
• The client could not locate the requested server 
• The client could locate the requested server but it did not
start properly 
• The client could not find the requested interface 
• The client could not find the requested function 
• The client could find the requested function but it failed
when called 
• The client could not clean up properly 
In order to track these potential problems, you have to
check things every step of the way by looking at hr values. The
above code does the checking, but it is difficult to tell what has
gone wrong because the code is completely silent if an error
occurs. The following function remedies that situation: 
Client Side
47
Additonal Information and Updates: http://www.iftech.com/dcom
// This function displays detailed information con-
tained in an HRESULT.
BOOL ShowStatus(HRESULT hr)
{
// construct a _com_error using the HRESULT
_com_error e(hr);
// Show the hr as a decimal number
cout << "hr as decimal: " << hr << endl;
// Show the 1st 16 bits (SCODE)
cout << "SCODE: " << HRESULT_CODE( hr ) << endl;
// Show facility code as a decimal number
cout << "Facility: " << HRESULT_FACILITY( hr ) << 
endl;
// Show the severity bit
cout << "Severity: " << HRESULT_SEVERITY( hr ) <<
endl;
// Use the _com_error object to 
// format a message string. This is 
// much easier than using ::FormatMessage
cout << "Message string: " << e.ErrorMessage() << 
endl;
return TRUE;
}
This function dismantles an HRESULT and prints all of its
components, including the extremely useful ErrorMessage value.
You can call the function at any time with this function call: 
// display HRESULT on screen
ShowStatus( hr );
See Chapter 16 for details on HRESULTS. See the error
appendix for details on overcoming COM and DCOM errors. 
To fully explore the different error modes of a simple COM
program, the CD contains an MFC client and a sample server.
The client is a simple MFC dialog application designed to let you
simulate several possible errors and see the effect they have on
the HRESULT. When the client runs it will look like this: 
48    Chapter 4 •
Creating your own COM Clients and Servers 
You can see that the radio buttons on the left hand side let
you experiment with a lack of a CoInitialize function, a bad class
ID and a bad interface ID. If you click the Run button, the area
on the right will show the effect of the different errors on the
HRESULT returned by different functions in the client. 
[Note - Some readers initially have trouble compiling or
linking this code. For some reason VC++ v6 will sometimes
default to a very odd Unicode Release build instead of the
expected Win32 Debug build. Use the Active Configuration...
option in the Build menu to check the configuration and to set it
to Win32 Debug if it is incorrect.] 
When you explore the client code in this example, you will
find that it is a somewhat more robust version of the standard cli-
ent code we used above. For example, it sets default security
using the CoInitializeSecurity function to introduce you to that
function (see Chapter 14 for details), and it also makes use of the
Figure 4–1
Dialog from the test client, a simple MFC application that 
allows you to simulate different COM errors and see the 
effects.
Client Side
49
Additonal Information and Updates: http://www.iftech.com/dcom
CoCreateInstanceEx function so that remote servers on other
machines can be called (see chapter 14 for details). 
Let's look at the basic plan of the client. It starts with code
generated by the MFC App Wizard, with the request that the App
Wizard generate a simple dialog application. The resource file of
this application was modified to match the dialog seen above.
The bulk of the application is a single function, OnButtonRun,
that is activated when the user clicks the Run button: 
// This method displays detailed information contained 
in an HRESULT.
BOOL CBeepDeluxeDlg::ShowStatus(HRESULT hr)
{
// construct a _com_error using the HRESULT
_com_error e(hr);