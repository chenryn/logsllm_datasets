### 5.1 Router Models

In the first section of Table 2, 50% of the tested router models meet all our attack conditions and are therefore vulnerable to the defragmentation cache poisoning attack. In the second section of Table 2, 5 models are immune to the attack because they either do not support DNS caching or do not cache by record. The remaining 3 models in the third section of Table 2 are not affected by the attack due to their inability to handle oversized DNS responses. These models either do not support EDNS(0) at all or actively truncate the response to a smaller size. As expected, no router model was found to "re-query" names to verify the DNS response.

### 5.2 DNS Software

DNS forwarding is also implemented by mainstream DNS software. For example, it can be enabled using the `forward-zone` keyword in Unbound or the `server` keyword in dnsmasq. We tested the DNS forwarding behaviors of seven popular DNS software: BIND [25], Unbound [27], Knot Resolver [13], PowerDNS [18], DNRD [6], dnsmasq [7], and MS DNS [8].

**Test Results:**
Table 3 presents the DNS forwarding behaviors of the tested DNS software. We found that dnsmasq and MS DNS satisfy all attack conditions and are thus vulnerable to the defragmentation cache poisoning attack. Notably, dnsmasq is used in embedded systems like OpenWRT [17], which means the attack can affect more router models than those we tested. DNRD is not vulnerable because it caches DNS responses as a whole. Surprisingly, BIND, Unbound, Knot Resolver, and PowerDNS are immune to the attack, as they re-query the CNAME chain and verify the oversized response, even when configured as DNS forwarders.

| **Software** | **Version** | **EDNS(0) & No Truncation** | **Cache by Record** | **Verification** | **Vulnerable** |
|--------------|-------------|-----------------------------|---------------------|-----------------|----------------|
| dnsmasq      | 2.7.9       | Yes                         | Yes                 | No              | Yes            |
| MS DNS       | 2019        | Yes                         | Yes                 | No              | Yes            |
| BIND         | 9.9.4       | Yes                         | Yes                 | Yes             | No             |
| Unbound      | 1.7.2       | Yes                         | Yes                 | Yes             | No             |
| Knot Res     | 3.2.0       | Yes                         | Yes                 | Yes             | No             |
| PowerDNS     | 4.1.8       | Yes                         | Yes                 | Yes             | No             |
| DNRD         | 2.20.3      | Yes                         | No                  | No              | No             |

### 5.3 Confirmation of Attacks

To confirm the vulnerability of the selected software (listed in Tables 2 and 3) to the defragmentation cache poisoning attack, we conducted real attacks in controlled environments.

**Clean Controlled Experiment:**
In a simple case, we built our testing environment according to the attack model (see Figure 4). The attacker machine and the DNS forwarder were located in the same LAN. We configured the DNS forwarder to use a recursive resolver (Unbound [27]) as an upstream, which was not open to the public. We also set up the attacker’s authoritative server (located outside the LAN) and created an oversized DNS response as shown in Figure 5. The attack was considered successful if the rogue record of `victim.com` (in the spoofed 2nd fragment) was cached by the DNS forwarder. All 8 router models and 2 DNS software were confirmed to be vulnerable in this experiment.

**Complex Network Experiment:**
To confirm the feasibility of the attack in a real-world scenario, we tested the attack in a more complex environment.

- **Home Router:** We selected a home router running the latest version of the OpenWRT operating system (19.07.1 r10911-c155900f66). OpenWRT uses dnsmasq as its DNS forwarder by default, making such routers vulnerable to the attack.
- **Clients and Attacker:** To simulate background traffic, we added 13 other clients (e.g., mobile phones, tablets, and laptops) to the LAN of the home router. On these clients, we initiated tasks such as file downloading, video streaming, and web browsing. On average, the home router received 7.95 Mbps inbound and 753.3 Kbps outbound traffic in a 3-minute window. The attacker retried each failed or timed-out DNS query every five seconds.
- **Upstream Recursive Resolver:** We configured the DNS forwarder to use Norton ConnectSafe (at 199.85.126.10). According to our measurements in Table 1, its egress resolvers use incremental IPID counters, which are exploitable.
- **Authoritative Server:** We created the oversized DNS response as shown in Figure 5. To break load balancing, we configured our authoritative server to respond only to queries from one selected egress resolver address of Norton ConnectSafe (e.g., 156.154.38.*).

In this setup, a successful attack took 58 seconds to complete. The attacker first probed the current IPID value of the selected egress resolver (Figure 4, step 0), which took 22 seconds and 7 retries. The attacker then used sequentially incremented IPID values in the spoofed 2nd fragments and started querying the attacker domain name (Figure 4, step 2). On the 10th retried DNS query, the legitimate 1st fragment and the spoofed 2nd fragment were reassembled, and the attack succeeded. Due to resolver load balancing and possible packet loss, the attack required more time and retries.

### 5.4 Responsible Disclosure

We have reported the issue to the affected vendors by submitting vulnerability reports and contacting them via email. So far, we have received responses from three home router manufacturers (ASUS, D-Link, and Linksys). ASUS and D-Link have released firmware patches to fix the DNS cache poisoning vulnerability, where DNS responses are now cached as a whole (see Section 8 for detailed mitigations). Linksys has accepted our report via the Bugcrowd [26] platform.

### 6. Client Population: A Nationwide Measurement Study

In Section 5, we identified several home routers vulnerable to defragmentation attacks. To determine the number of real-world clients using these susceptible devices, we conducted a nationwide measurement study. This section details our methodology and findings.

### 6.1 Methodology

Unlike our tests on forwarder software, we cannot launch defragmentation attacks on real clients due to ethical considerations. While fingerprinting methods like [68] seem straightforward, they are not effective in revealing the exact model of the routers.

**Measurement Overview:**
We aimed to check whether the conditions (listed in Section 4.4) of the attack are satisfied. We collaborated with an industrial partner who develops network diagnosis software for mobile users. They implemented our checking methods in the diagnosis tool, which obtained permission to collect fine-grained DNS data. When run by mobile users, the tool performs several checks on the attack conditions and sends the collected data back to the company’s server for analysis. Each mobile client is assigned a unique ID (termed as `uuid`).

**Attack Condition Filters:**
The checking procedure includes the following steps:

1. **Network Configurations:** The software first checks the network environment of each client and removes those using mobile data. It also verifies basic network configurations, such as the client IP address and gateway address.
2. **Initial DNS Request:** Each client sends an initial DNS query of `[uuid].attacker.com` with EDNS(0) options. If the query times out, it suggests that the router does not support DNS forwarding, and the client is removed from our data. Otherwise, the software checks if an EDNS(0) OPT record is present in the response, indicating EDNS(0) support (Filter 1).
3. **Oversized Response Check:** The software checks whether the oversized response is truncated by verifying the integrity of the CNAME chain (Filter 2). If the final A record of `[uuid].final.attacker.com` is intact, it reports the IP address in the record (termed as `addr_init`). If the DNS forwarder supports caching, the initial response should be written into its DNS cache.
4. **DNS Cache Check:** The client sends queries of `[uuid].final.attacker.com` and reports the IP addresses in the responses (termed as `addr_cache`). If the initial response is cached by record, this query should hit the cache, and `addr_init` and `addr_cache` should be the same (Filter 3). Otherwise, the authoritative server should be queried again, giving another nonce response, and `addr_init` and `addr_cache` should differ, and the client is removed from our dataset.
5. **Timing-Based Caching Position Inference:** For the remaining clients, the software repeats the final DNS request of `[uuid].final.attacker.com` 10 times and calculates the average DNS query time. Based on the average DNS query time, we perform measurements to select clients that are affected (Filter 4).

**Limitations:**
We acknowledge that using a timing-based approach is only an estimation of actual affected clients. However, more accurate methods of cache snooping (e.g., non-recursive queries) are not applicable for DNS forwarders. To make the conclusion more reliable, we performed an additional analysis on the DNS query time (hitting a forwarder cache vs. resolver cache) and justified the results based on real-world measurements. Additionally, due to the software coverage, we could only perform measurements on mobile Wi-Fi users in China. Although we may underestimate the actual population of affected clients, the test results still provide valuable insights into the impact of the newly discovered attack.

**Ethics:**
The checking method was implemented by our industrial partner on their network diagnosis tool for mobile users, which obtained permission to send and collect network traffic. The software does not launch real attacks but only checks the attack conditions. It performs approximately 10 DNS queries of our controlled domain name exclusively registered for this study. Upon receiving the DNS answers, it does not make connections to the server addresses. No personally identifiable information (PII) or privacy data was collected. The checking tool uses an encrypted channel to send back the collected data to the company’s servers.

### 6.2 Analysis of Affected Population

We collected valid measurement results from 20,113 mobile clients, covering all 31 provinces of mainland China (excluding Hong Kong SAR, Macao SAR, and Taiwan) and distributed across more than 300 cities. Our clients also covered 127 autonomous systems.

When applying our attack condition filters, 79.3% of mobile clients were removed by Filters 1-3. Specifically, 8,211 (40.8%) clients used forwarders without EDNS(0) support, 5,695 (28.3%) received truncated DNS responses, and 2,035 (10.1%) clients' forwarders did not cache the DNS response by record.

For the remaining 20.7% (4,172) mobile clients, we checked their average query time of the repeated DNS queries of `[uuid].final.attacker.com` (i.e., Filter 4).