























2
2
3










–1
–
–
–


















(50%, in the ﬁrst section of Table 2) satisfy all our attack con-
ditions, which are vulnerable to the defragmentation cache
poisoning attack. 5 models (in the second section of Table 2)
are immune to the attack because they either do not support
DNS caching or do not cache by record. The remaining 3
models (in the third section of Table 2) are not affected by
the attack, because they have problems handling oversized
DNS responses. They either do not support EDNS(0) at all,
or actively truncate the response to a smaller size. As ex-
pected, we do not ﬁnd any router model that “re-queries” the
names to verify the DNS response.
5.2 DNS Software
DNS forwarding is also implemented by mainstream
DNS software. For instance,
it can be enabled by the
forward-zone keyword of Unbound, or the server key-
word of dnsmasq. We test the DNS forwarding behaviors
of seven kinds of mainstream DNS software: BIND [25],
Unbound [27], Knot Resolver
[13], PowerDNS [18],
DNRD [6], dnsmasq [7] and MS DNS [8].
Test results. Table 3 presents the DNS forwarding behav-
iors of DNS software. We ﬁnd that dnsmasq and MS DNS
satisfy all attack conditions, which are vulnerable to the de-
fragmentation cache poisoning attack. Particularly, dnsmasq
is used by embedded systems like OpenWRT [17], so the
attack can affect more router models than our tested ones.
DNRD is not vulnerable because it caches DNS responses as
a whole. Surprisingly, BIND, Unbound, Knot Resolver and
PowerDNS are immune to the attack, because they re-query
the CNAME chain and verify the oversized response, even
when conﬁgured as DNS forwarders.
USENIX Association
29th USENIX Security Symposium    583
Table 3: DNS forwarding behaviors of DNS software. The
ﬁrst two are conﬁrmed vulnerable by real attacks.
No Veri-
Software Version EDNS(0) &
ﬁcation Vulnerable
No truncation
Cache by
Record
dnsmasq
MS DNS
BIND
Unbound
Knot Res
PowerDNS
DNRD
2.7.9
2019
9.9.4
1.7.2
3.2.0
4.1.8
2.20.3




























5.3 Conﬁrmation of Attacks
To conﬁrm that the selected software (listed in Tables 2 and
3) is vulnerable to the defragmentation cache poisoning at-
tack, we launch real attacks in controlled environments.
Clean controlled experiment. In a simple case, we build
our testing environment according to the attack model (see
Figure 4). The attacker machine and the DNS forwarder lo-
cate in the same LAN. We conﬁgure the DNS forwarder to
use a recursive resolver (for which we use Unbound [27]) as
upstream, which is not open to public. Also, we build the at-
tacker’s authoritative server (which is located outside of the
LAN) and create an oversized DNS response according to
Figure 5. Finally, we conﬁrm that the attack succeeds, if the
rogue record of victim.com (in the spoofed 2nd fragment)
is cached by the DNS forwarder. As a result, all 8 router
models and 2 DNS software are conﬁrmed vulnerable with
this experiment.
Complex network experiment. To conﬁrm that the attack
is feasible in the real world, we also test the attack in a more
complex environment.
Home router. We select a home router which runs on
the latest version of OpenWRT operating system (19.07.1
r10911-c155900f66). As mentioned, OpenWRT by default
uses dnsmasq as its DNS forwarder, thus home routers built
over this system are vulnerable to the attack.
Clients and attacker. To add more background trafﬁc,
we add 13 other clients (e.g., mobile phones, tablets and
laptops) into the LAN of the home router. On the clients
we start tasks such as ﬁle downloading, video streaming
and web browsing. On average, the home router receives
7.95Mbps/753.3Kbps of inbound/outbound trafﬁc in a 3-
minute window. The attacker retries each failed or timed-out
DNS query every ﬁve seconds.
Upstream recursive resolver. We conﬁgure the DNS for-
warder to use Norton ConnectSafe (at 199.85.126.10). Ac-
cording to our measurement results in Table 1, its egress re-
solvers use incremental IPID counters which are exploitable.
Authoritative server. We also create the oversized DNS
response according to Figure 5. To break load balancing of
the resolver, we conﬁgure our authoritative server such that
it only responds to queries from one selected egress resolver
address of Norton ConnectSafe (e.g., 156.154.38.*).
In the end, a successful attack in this environment takes 58
seconds to complete. In more detail, the attacker ﬁrst tries to
probe the current IPID value of the selected egress resolver
(see Figure 4, step 0), which takes 22 seconds and 7 retries.
The attacker then uses sequentially incremented IPID values
in the spoofed 2nd fragments, and start querying the attacker
domain name (see Figure 4, step 2). On the 10th retried DNS
query, the legitimate 1st fragment and the spoofed 2nd frag-
ment are reassembled, and the attack succeeds. Because of
resolver load balancing (i.e., not every DNS query goes to
the selected egress resolver) and possible packet loss, the at-
tack takes longer and requires more retries of DNS queries.
5.4 Responsible Disclosure
We have been reporting the issue to the affected vendors, by
submitting vulnerability reports and contacting via emails.
So far, we have received responses from 3 home router man-
ufacturers (ASUS, D-Link and Linksys). ASUS and D-Link
have released ﬁrmware patches to ﬁx the DNS cache poison-
ing vulnerability, where DNS responses are now cached as a
whole (see Section 8 for detailed mitigations). Linksys has
accepted our report via the Bugcrowd [26] platform.
6 Client Population:
A Nationwide Measurement Study
In Section 5, we ﬁnd several home routers vulnerable to de-
fragmentation attacks. Further, we seek answer to the ques-
tion “how many real-world clients are using the susceptible
devices?” In this section, we elaborate our methodology on
measuring the client population of such devices, and report
our ﬁndings.
6.1 Methodology
Unlike our tests on forwarder software, from real clients we
cannot launch defragmentation attacks to check if the devices
are vulnerable due to ethical considerations. While ﬁnger-
printing methods like [68] seem straightforward, we ﬁnd it
difﬁcult to use these methods to reveal the exact model of
the routers.
Measurement overview. Alternatively, we can reach the
same goal by checking whether the conditions (listed in Sec-
tion 4.4) of the attack are satisﬁed. As such, from a high-
level view, we need to collect real-world clients as our van-
tage points, and check from client side whether the condi-
tions are satisﬁed by their DNS forwarders.
To perform the measurement study, we collaborate with
our industrial partner who develops network diagnosis soft-
ware for mobile users. They implement our checking meth-
ods in the diagnosis tool, which obtains permission to collect
584    29th USENIX Security Symposium
USENIX Association
query times out, it suggests that the router does not sup-
port DNS forwarding, and the client is removed from our
data. Otherwise, the software checks if an EDNS(0) OPT
record presents in the response, which suggests EDNS(0)
support (Filter 1).
It also checks whether the over-
sized response is truncated by checking the integrity of
the CNAME chain (Filter 2).
If the ﬁnal A record of
[uuid].final.attacker.com is intact, it reports the IP ad-
dress in the record (termed as addr_init). Note that if the
DNS forwarder supports caching, the initial response should
have been written into its DNS cache.
Figure 6: Oversized response of [uuid].attacker.com
The client
DNS cache check.
sends queries of
[uuid].final.attacker.com and report the IP addresses
in the responses (termed as addr_cache). If the initial re-
sponse is cached by record, this query should hit the cache,
and therefore addr_init and addr_cache should be the
same (Filter 3). Otherwise, the authoritative server should
be queried again and give another nonce response,
thus
addr_init and addr_cache should differ, and we remove
the client from our dataset.
Figure 7: Workﬂow of client-side measurement
ﬁne-grained DNS data. When run by mobile users, the tool
performs several checks on the attack conditions and sends
the collected data back to the company’s server. The results
are further provided to us for deeper analysis. The software
has active users mostly located in China. Each mobile client
is assigned with a unique ID (termed as uuid).
To perform the measurement, the only component we need
to conﬁgure is the authoritative server (i.e., attacker.com).
Figure 6 shows the oversized response we create for
[uuid].attacker.com. A slight difference here is that in
the last A record, the authoritative server generates a nonce
IP address for each query. Using this technique, from a client
we can distinguish whether a DNS response comes from
DNS cache.
Attack condition ﬁlters. Following the workﬂow in Fig-
ure 7, the checking procedure contains the following steps.
Network conﬁgurations. To perform checks on home
routers (i.e., through Wi-Fi), the software ﬁrst check the net-
work environment of each client and remove clients which
use mobile data. It also checks basic network conﬁgurations,
such as client IP address and gateway address.
Initial DNS request. To begin with, each client sends an
initial DNS query of [uuid].attacker.com with EDNS(0)
options3,
If the
to port 53 of the gateway address.
3UDP buffer size=4096
Meanwhile, when addr_init equals addr_cache (i.e.,
response comes from DNS cache), we need to check whether
the response is from the cache of the DNS forwarder or up-
stream recursive resolvers. Traditionally, one can use non-
recursive queries to snoop the DNS cache of recursive re-
solvers [32]. However, we ﬁnd that this approach is infea-
sible for DNS forwarders, as several router models that we
test forward non-recursive queries to other servers. As such,
we choose to infer the caching position based on timing of
the response. On each client, the software repeats the ﬁnal
DNS request of [uuid].final.attacker.com for 10 times
(due to trafﬁc limit of the diagnosis tool), and calculates the
average DNS query time of this cached domain. Based on
the average DNS query time, we perform measurements to
select clients that are affected (Filter 4).
Limitations. We acknowledge that using a timing-based ap-
proach is only an estimation of actual affected clients. How-
ever, we ﬁnd that more accurate methods of cache snoop-
ing (e.g., non-recursive queries) are not applicable for DNS
forwarders. To make the conclusion more reliable, we per-
form an additional analysis on the DNS query time (hitting
a forwarder cache vs.
resolver cache), and justify the re-
sults based on real-world measurements. Also, because of
the software coverage, we can only perform measurements
on mobile Wi-Fi users in China. Although we may under-
estimate the actual population of affected clients, we believe
the test results still provide us with an opportunity to under-
stand the impact of the newly discovered attack.
Ethics. The checking method is implemented by our in-
dustrial partner on their network diagnosis tool for mobile
users, which obtains permission to send and collect net-
work trafﬁc. It is important that on each client, the software
does not launch real attacks to DNS forwarders, but only
checks the attack conditions. Regarding implementation, it
USENIX Association
29th USENIX Security Symposium    585
only performs ∼10 DNS queries of our controlled domain
name exclusively registered for this study. Upon receiving
the DNS answers, it does not make connections to the server
addresses. Throughout the experiments, no personally iden-
tiﬁable information (PII) or privacy data is collected. In ad-
dition, the checking tool uses an encrypted channel to send
back collected data to the company’s servers.
6.2 Analysis of Affected Population
In the end, we collect valid measurement results from 20,113
mobile clients. The collected clients cover all 31 provinces
of mainland China (excluding Hong Kong SAR, Macao SAR
and Taiwan), and are distributed in more than 300 (almost
all) cities. Also, our clients cover 127 autonomous systems.
When applying our attack condition ﬁlters, 79.3% mobile
clients are removed by Filters 1-3. In detail, 8,211 (40.8%)
clients are using forwarders without EDNS(0) support, 5,695
(28.3%) receive truncated DNS responses, and forwarders
of 2,035 (10.1%) clients do not cache the DNS response by
record.
For the remaining 20.7% (4,172) mobile clients, we check
their average query time of the repeated DNS queries of
[uuid].final.attacker.com (i.e., Filter 4). Note that be-