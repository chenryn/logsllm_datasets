arithmetic operations are similar to the ones used in TEA.
Nevertheless, we found a diﬀerence. Fig. 9(a) presents in
pseudo-C a code line from the Storm Worm cryptographic
implementation, whereas Fig. 9(b) shows the equivalent code
line in the original TEA source code. In the malware version
parenthesis are around exclusive-ors, whereas in the orig-
inal code they are around additions. Hence the malware
evaluates the expression in a diﬀerent order than TEA and
therefore produces diﬀerent results.
z− = (y > 5)) + k[3]
(a) Storm Worm
z− = ((y > 5) + k[3])
(b) TEA
Figure 9: Comparison between implementations
We believe malware authors simply made a “copy/paste”
from existing code containing this error. In fact, we found
the same assembly code on a Russian website [30]. There-
fore, we named this new cryptographic function “Russian-
176TEA”. We conﬁrmed this observation by creating a refer-
ence implementation for the Russian-TEA function. Aligot
then successfully identiﬁed the code in Storm Worm as a
Russian-TEA implementation, as indicated in Table 2.
Silent Banker. Strangely enough, Aligot found no TEA im-
plementations in the SilentBanker sample either. However,
Aligot automatically identiﬁed a Russian-TEA implemen-
tation in it, something that we completely ignored before
running Aligot. After manual investigation, we conﬁrmed
that indeed the two malware families made the exact same
mistake. As a side note, SilentBanker was believed to have
been created in Russia [29]. Moreover, other tools identiﬁed
SilentBanker as containing a TEA implementation, because
the delta constant is statically visible in this case.
In summary, Aligot successfully identiﬁed that, despite
appearances, Storm Worm was not implementing TEA. More-
over, after adding a reference implementation for this new
cryptographic function (Russian-TEA), Aligot automatically
identiﬁed the same function in SilentBanker, whereas other
tools wrongly identiﬁed it as TEA.
9.2 RC4
The RC4 algorithm is a stream cipher using a variable-
length key [34]. A pseudo-random stream of bits is generated
with the key, then an XOR operation is done with the input
text in order to decrypt or encrypt it.
9.2.1 Detection Evaluation on Synthetic Example
Similarly as for TEA, we ﬁrst veriﬁed the correctness of
our identiﬁcation process. We created a synthetic example
by compiling a reference RC4 source code [34] with MSVC
without any optimization, that we denote as B3 in Table 2.
The detection result is presented in Table 2. Aligot is
the only tool able to identify this binary as RC4 implemen-
tation. Indeed this cryptographic function lacks particular
static signs (such as ﬁxed values), making it quite diﬃcult
to recognize with classic tools.
9.2.2 Detection Evaluation on Malware Samples
We investigated a malware family, named Sality, that was
publicly referenced as using RC4 in its protection layers [36].
We collected four Sality samples on the Internet: Sal1, Sal2,
Sal3 and Sal4. The detection results are presented in Table
2 in the column Sal, as they are the same for the four sam-
ples. Again, Aligot is the only tool able to identify an RC4
implementation in all binary programs.
As with the previous malware samples, the cryptographic
implementation is part of the protection layers and is heav-
ily obfuscated. Moreover, Sality samples contain a variety
of obfuscation techniques. In order to demonstrate this, we
provide in Table 4 a structural comparison between RC4
implementations in all binary programs, based on the num-
ber of basic blocks (BB) of the CFG and the average num-
ber of instructions per BB (this comparison concerns only
parts of each program recognized as RC4 implementations
by Aligot).
Moreover, thanks to the parameter graphs extracted from
each Sality RC4 implementation, we were able to identify
a pattern in the way the malware uses its cryptographic
parameters (two of these graphs are presented in Appendix
A). Each cryptographic parameter (key, input and output
text) is at the same oﬀset from the beginning of the ﬁle in
Table 4: Comparison between RC4 implementations
identiﬁed by Aligot, where NBB is the number of
Basic Blocks and IPBB is the average number of
instructions per Basic Block.
Sal1
9
40
Sal2
17
25
Sal3
4
97
Sal4
14
29
B3
18
7
NBB
IPBB
each sample, even though their values are diﬀerent. This
information is valuable to build a static unpacker for Sality,
as it gives a generic path to access cryptographic parameters.
9.3 AES
The AES algorithm is a 16-byte block cipher with a key
of either 128, 256 or 512 bits [8].
It processes input data
through a substitution-permutation network where each it-
eration (round) employs a round key derived from the in-
put key. Unlike in the simpler TEA and RC4 algorithms,
the ﬁrst and the last of these rounds are done outside the
main loop of AES, as they are functionally diﬀerent than
the other inner rounds. Consequently, when a comparison
with an AES reference implementation is made with Aligot,
only the I/O relationship for the inner rounds, i.e. the ones
inside a loop, will be veriﬁed, not for the parameters of the
AES algorithm in its entirety.
9.3.1 Detection Evaluation on Synthetic Example
We compiled a reference source code with the OpenSSL
library [12] without any optimization, where we simply en-
crypt a particular input text with AES-128, giving us the
program B4. As described in Table 2, most of the tools,
including Aligot, are able to identify such a program. Nev-
ertheless, Aligot is the only one able to infer the actual key
size, thanks to its knowledge of the parameters (in this case
the round keys).
9.3.2 Detection Evaluation on Obfuscated Programs
To show the resistance of our tool against obfuscation
techniques, we tested it on the two following binary pro-
grams: 1) the program B5, which is the result of the appli-
cation of the commercial packer AsProtect [1] on B4, and
2) W al, which is a sample of the Waledac malware fam-
ily, which was already known to use AES for encrypting its
Command and Control traﬃc [7].
In both cases, Aligot is the only tool to successfully iden-
tify AES-128.
9.4 MD5
The MD5 algorithm is a cryptographic hash function that
produces a 128-bit hash value [23]. The input message is
broken up into chunks of 512-bit that are then processed in
an iterative fashion. This core iterative behavior oﬀers an
opportunity for Aligot to identify this algorithm.
9.4.1 Detection Evaluation on Synthetic Example
Similarly as for AES, we compiled a reference source code
from the OpenSSL library [12] without any optimization,
where we simply hash a particular input text, giving us the
program B6. As presented in Table 2, most of the tools,
including Aligot, are successful in identifying MD5.
177Table 3: Aligot performance. LDF stands for “Loop Data Flow”, DI for “Dynamic Instruction”
Trace size (DI)
Tracing (min)
LDF construction
Comparison (min)
Total time
Storm SBank
3.5M
3M
Sal2
Sal3
Sal1
4.1M 1M 4.8M 4.2M
Sal4 W al
20k
4
4hr
30
3
6hr
30
2
10hr
3
4,5hr
6,5hr
10hr
1
4hr
3
4hr
2
2
1
10hr
15hr
40mn
4
4
10
10hr
15hr
51mn
9.4.2 Detection Evaluation on Obfuscated Programs
The obfuscated test cases were: 1) the program B7, pro-
duced using AsProtect on B6, and 2) W al, the same sample
of the Waledac family that uses MD5 in its payload to com-
pute unique ID for each bot.
Again, Aligot is the only tool to successfully identify MD5,
as described in Table 2.
9.5 RSA
The RSA algorithm [24] is an asymmetric cipher whose
security is based on the hardness of factoring large integers.
The two operations used for encryption and decryption are
modular exponentiation and modular multiplication. Modu-
lar exponentiation is typically implemented as a loop where
each iteration consists of either one multiplication or one
squaring and a multiplication, depending on the bit of the
exponent being referenced. This creates an outer loop pat-
tern that is not directly detectable with Aligot because the
trace generated does not belong to the LOOP language of
Deﬁnition 2. Nonetheless, the inner modular multiplication
loops are detectable and can serve as the basis for detection
of RSA or similar algorithms.
We built a synthetic example of an RSA encryption, de-
noted as B8, using the PolarSSL library [2] and also pro-
tected it with AsProtect. Since this library, as most RSA im-
plementations, uses the optimized Montgomery algorithm [20]
for modular multiplication, we added a reference implemen-
tation of this algorithm to the database, i.e. a sample non-
obfuscated program performing Montgomery multiplication
also constructed using Polar SSL. One of the problems with
RSA (and of other public-key algorithms) is the multiplic-
ity of possible parameter encoding (in this case large inte-
gers). Since Aligot retrieves parameters in the execution
trace in their low-level encoded form (i.e. representation in
memory), this might not match the high-level representation
of I/O parameters of the reference implementations (pro-
grammed in high-level languages). To deal with this, care
has to be taken to decode parameters before using them
with high-level implementations. As there is a relatively
small number of possible encoding used in practice, adding
decoding routines for each of them remains realistic. In this
case, we added a decoding routine for PolarSSL big numbers.
With this precaution, Aligot successfully identiﬁes the pres-
ence of modular multiplication operation (denoted as “MOD
MULT” in Table 2) in the obfuscated code of B8, while none
of the other tools are able to do so.
9.6 Further Results
Since compiler parametrization can signiﬁcantly changed
the structure of compiled code, we decided to test Aligot
and the other tools with samples compiled using various
space and speed optimization options. The performance of
Aligot was unaﬀected by these options, while some of the
other tools did lose their ability to identify the correspond-
ing crypto algorithm.
Furthermore, we considered the possibility that certain
implementations of crypto algorithms using ﬁxed constants,
might use diﬀerent values of these constants (without aﬀect-
ing their security) in order to avoid detection. In order to
explore this possibility, we tested Aligot against TEA im-
plementations with modiﬁed delta constant values. Thanks
to the use of a parametrized reference implementation TEA,
where the delta constant becomes an input parameter, Aligot
was still able to detect these modiﬁed TEA implementations.
All other tools failed to do so, which seems to conﬁrm that
their detection of TEA is based solely on recognition of the
standard delta constant value.
Finally, and as discussed at the end of §7.1, we also tested
Aligot against sample code where several crypto functions
were combined, e.g. Double TEA (two TEA applications in
a row), or a combination of one-time pad and RC4. As
expected, this was successfully detected by Aligot.
9.7 Performance
Table 3 presents our performance results for detection
on malware samples on a common end-user computer; the
performance for synthetic samples is comparatively much
quicker (in all cases under 20 min) and not shown. These
results should be considered as purely indicative, as Aligot
was built in ﬁrst place to prove the feasibility of the ap-
proach, and not to be a particularly eﬃcient tool. As can
be seen in Table 3 larger trace sizes do not always translate
into longer processing times (e.g Sality samples Sal3 and
Sal4). Indeed, the longest task is loop detection, and while
we gave a worst-case complexity estimate for it as a func-
tion of trace size in §5.4, in practice its performance also
strongly depends on the number of loops. If loops are rare
(according to our deﬁnition), then history size grows and
performance decreases. Regarding the comparison phase,
its performance depends in practice on the number of loop
data ﬂows extracted and their actual number of parameters.
10. LIMITATIONS
First of all, and like any other dynamic analysis tool,
Aligot is only able to identify code that is actually executed
at run time. Identifying which potential paths are relevant
for analysis and should be “fed” to such a tool is a separate
research problem. Nonetheless, in practice and for most mal-
ware samples, this can be handled with success by a skillful
malware analyst.
Second, Aligot’s identiﬁcation ability is limited to those
functions for which we possess a reference implementation.
Nevertheless, the design of the tool allows the analyst to
178to attribution of malware activities to particular groups or
individuals.
One of the limitations of our work, is the inability of the
current loop model to detect a full implementation of RSA,
due to the conditional behavior of the modular exponentia-
tion loop. While it is possible to modify the loop language to
include such conditional iterations, care has to be taken to
avoid including “artiﬁcial” loop constructions, such as those
generated by the control-ﬂow ﬂattening techniques discussed
in §5. Given the relatively simple conditional structure of
RSA (only two possible choices), it would be possible to
slightly modify to the loop language to include it, while ex-
cluding undesirable loop-like code.
As mentioned in §10, Aligot is only able to recognize
crypto that is known and for which a reference implementa-
tion has been constructed. In principle, this would prevent
the detection of “home-made” or other unknown crypto used
by malware authors in their code. However, our experience
with Russian TEA is inspiring: with some manual work we
were able to detect an unknown crypto algorithm (albeit, an
incorrect implementation of a known one). This suggests an
automated approach by which an unknown algorithm could
be detected, as long as an implementation for it has been
included into the reference database. The idea would be
to create an “import” tool able to extract reference imple-
mentations from unknown obfuscated binary samples, for
example from large databases of captured malware. By us-
ing the loop detection algorithm of Aligot, this tool could
reconstruct the binary code implementing the loops of in-
terest (possibly implementing crypto functions) that could
then be included into a reference implementation database.
A streamlined version of Aligot could then be used to ﬁnd
possible matches in this large database. Since the detection
process presented in this paper can be extended to any type
of functions maintaining a particular I/O relationship (e.g.
compression functions), this could provide the basis for a
new and promising methods of malware classiﬁcation.