private byte[] key;
private final String algorithm;
/** Constructs SecureSecretKey instance out of a copy of the provided key bytes.
* The caller is responsible of clearing the key array provided as input.
* The internal copy of the key can be cleared by calling the destroy() method.
*/
public SecureSecretKey(final byte[] key, final String algorithm) {
this.key = key.clone();
this.algorithm = algorithm;
}
public String getAlgorithm() {
return this.algorithm;
}
public String getFormat() {
return "RAW";
}
/** Returns a copy of the key.
* Make sure to clear the returned byte array when no longer needed.
*/
public byte[] getEncoded() {
if(null == key){
throw new NullPointerException();
}
return key.clone();
}
/** Overwrites the key with dummy data to ensure this copy is no longer present in memory.*/
public void destroy() {
if (isDestroyed()) {
return;
}
byte[] nonSecret = new String("RuntimeException").getBytes("ISO-8859-1");
for (int i = 0; i < key.length; i++) {
key[i] = nonSecret[i % nonSecret.length];
}
FileOutputStream out = new FileOutputStream("/dev/null");
171
Data Storage on Android
out.write(key);
out.flush();
out.close();
this.key = null;
System.gc();
}
public boolean isDestroyed() {
return key == null;
}
}
Secure user-provided data is the final secure information type usually found in memory. This is often managed by
implementing a custom input method, for which you should follow the recommendations given here. However, Android
allows information to be partially erased from EditText buffers via a custom Editable.Factory .
EditText editText = ...; // point your variable to your EditText instance
EditText.setEditableFactory(new Editable.Factory() {
public Editable newEditable(CharSequence source) {
... // return a new instance of a secure implementation of Editable.
}
});
Refer to the SecureSecretKey example above for an example Editable implementation. Note that you will be able to
securely handle all copies made by editText.getText if you provide your factory. You can also try to overwrite the
internal EditText buffer by calling editText.setText , but there is no guarantee that the buffer will not have been
copied already. If you choose to rely on the default input method and EditText , you will have no control over the
keyboard or other components that are used. Therefore, you should use this approach for semi-confidential
information only.
Dynamic Analysis
Static analysis will help you identify potential problems, but it can't provide statistics about how long data has been
exposed in memory, nor can it help you identify problems in closed-source dependencies. This is where dynamic
analysis comes into play.
There are basically two ways to analyze the memory of a process: live analysis via a debugger and analyzing one or
more memory dumps. Because the former is more of a general debugging approach, we will concentrate on the latter.
For rudimentary analysis, you can use Android Studio's built-in tools. They are on the Android Monitor tab. To dump
memory, select the device and app you want to analyze and click Dump Java Heap. This will create a .hprof file in the
captures directory, which is on the app's project path.
172
Data Storage on Android
To navigate through class instances that were saved in the memory dump, select the Package Tree View in the tab
showing the .hprof file.
For more advanced analysis of the memory dump, use the Eclipse Memory Analyzer Tool (MAT). It is available as an
Eclipse plugin and as a standalone application.
To analyze the dump in MAT, use the hprof-conv platform tool, which comes with the Android SDK.
$ ./hprof-conv memory.hprof memory-mat.hprof
MAT provides several tools for analyzing the memory dump. For example, the Histogram provides an estimate of the
number of objects that have been captured from a given type, and the Thread Overview shows processes' threads
and stack frames. The Dominator Tree provides information about keep-alive dependencies between objects. You can
use regular expressions to filter the results these tools provide.
173
Data Storage on Android
Object Query Language studio is a MAT feature that allows you to query objects from the memory dump with an SQL-
like language. The tool allows you to transform simple objects by invoking Java methods on them, and it provides an
API for building sophisticated tools on top of the MAT.
SELECT * FROM java.lang.String
In the example above, all String objects present in the memory dump will be selected. The results will include the
object's class, memory address, value, and retain count. To filter this information and see only the value of each
string, use the following code:
SELECT toString(object) FROM java.lang.String object
Or
SELECT object.toString() FROM java.lang.String object
SQL supports primitive data types as well, so you can do something like the following to access the content of all
char arrays:
SELECT toString(arr) FROM char[] arr
Don't be surprised if you get results that are similar to the previous results; after all, String and other Java data
types are just wrappers around primitive data types. Now let's filter the results. The following sample code will select
all byte arrays that contain the ASN.1 OID of an RSA key. This doesn't imply that a given byte array actually contains
an RSA (the same byte sequence may be part of something else), but this is probable.
SELECT * FROM byte[] b WHERE toString(b).matches(".*1\.2\.840\.113549\.1\.1\.1.*")
Finally, you don't have to select whole objects. Consider an SQL analogy: classes are tables, objects are rows, and
fields are columns. If you want to find all objects that have a "password" field, you can do something like the following:
SELECT password FROM ".*" WHERE (null != password)
During your analysis, search for:
Indicative field names: "password", "pass", "pin", "secret", "private", etc.
Indicative patterns (e.g., RSA footprints) in strings, char arrays, byte arrays, etc.
Known secrets (e.g., a credit card number that you've entered or an authentication token provided by the
backend)
etc.
Repeating tests and memory dumps will help you obtain statistics about the length of data exposure. Furthermore,
observing the way a particular memory segment (e.g., a byte array) changes may lead you to some otherwise
unrecognizable sensitive data (more on this in the "Remediation" section below).
Testing the Device-Access-Security Policy (MSTG-STORAGE-11)
Overview
Apps that process or query sensitive information should run in a trusted and secure environment. To create this
environment, the app can check the device for the following:
174
Data Storage on Android
PIN- or password-protected device locking
Recent Android OS version
USB Debugging activation
Device encryption
Device rooting (see also "Testing Root Detection")
Static Analysis
To test the device-access-security policy that the app enforces, a written copy of the policy must be provided. The
policy should define available checks and their enforcement. For example, one check could require that the app run
only on Android Marshmallow (Android 6.0) or a more recent version, closing the app or displaying a warning if the
Android version is less than 6.0.
Check the source code for functions that implement the policy and determine whether it can be bypassed.
You can implement checks on the Android device by querying Settings.Secure for system preferences. Device
Administration API offers techniques for creating applications that can enforce password policies and device
encryption.
Dynamic Analysis
The dynamic analysis depends on the checks enforced by the app and their expected behavior. If the checks can be
bypassed, they must be validated.
References
OWASP Mobile Top 10 2016
M1 - Improper Platform Usage - https://www.owasp.org/index.php/Mobile_Top_10_2016-M1-
Improper_Platform_Usage
M2 - Insecure Data Storage - https://www.owasp.org/index.php/Mobile_Top_10_2016-M2-
Insecure_Data_Storage
OWASP MASVS
MSTG-STORAGE-1: "System credential storage facilities are used appropriately to store sensitive data, such as
user credentials or cryptographic keys."
MSTG-STORAGE-2: "No sensitive data should be stored outside of the app container or system credential
storage facilities."
MSTG-STORAGE-3: "No sensitive data is written to application logs."
MSTG-STORAGE-4: "No sensitive data is shared with third parties unless it is a necessary part of the
architecture."
MSTG-STORAGE-5: "The keyboard cache is disabled on text inputs that process sensitive data."
MSTG-STORAGE-6: "No sensitive data is exposed via IPC mechanisms."
MSTG-STORAGE-7: "No sensitive data, such as passwords or pins, is exposed through the user interface."
MSTG-STORAGE-8: "No sensitive data is included in backups generated by the mobile operating system."
MSTG-STORAGE-9: "The app removes sensitive data from views when moved to the background."
MSTG-STORAGE-10: "The app does not hold sensitive data in memory longer than necessary, and memory is
cleared explicitly after use."
MSTG-STORAGE-11: "The app enforces a minimum device-access-security policy, such as requiring the user to
set a device passcode."
MSTG-PLATFORM-2: "All inputs from external sources and the user are validated and if necessary sanitized.
175
Data Storage on Android
This includes data received via the UI, IPC mechanisms such as intents, custom URLs, and network sources."
CWE
CWE-117 - Improper Output Neutralization for Logs
CWE-200 - Information Exposure
CWE-316 - Cleartext Storage of Sensitive Information in Memory
CWE-359 - Exposure of Private Information ('Privacy Violation')
CWE-524 - Information Exposure Through Caching
CWE-532 - Information Exposure Through Log Files
CWE-534 - Information Exposure Through Debug Log Files
CWE-311 - Missing Encryption of Sensitive Data
CWE-312 - Cleartext Storage of Sensitive Information
CWE-522 - Insufficiently Protected Credentials
CWE-530 - Exposure of Backup File to an Unauthorized Control Sphere
CWE-634 - Weaknesses that Affect System Processes
CWE-922 - Insecure Storage of Sensitive Information
Tools
Android Backup Extractor - https://github.com/nelenkov/android-backup-extractor
Burp Suite Professional - https://portswigger.net/burp/
Drozer - https://labs.mwrinfosecurity.com/tools/drozer/
Eclipse Memory Analyzer (MAT) - https://eclipse.org/mat/downloads.php
Firebase Scanner - https://github.com/shivsahni/FireBaseScanner
Fridump - https://github.com/Nightbringer21/fridump
LiME - https://github.com/504ensicsLabs/LiME
Logcat - http://developer.android.com/tools/help/logcat.html
Memory Monitor - http://developer.android.com/tools/debugging/debugging-memory.html#ViewHeap
OWASP ZAP - https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project
ProGuard - http://proguard.sourceforge.net/
Realm Browser - Realm Browser - https://github.com/realm/realm-browser-osx
Sqlite3 - http://www.sqlite.org/cli.html
Libraries
Java AES Crypto - https://github.com/tozny/java-aes-crypto
SQL Cipher - https://www.zetetic.net/sqlcipher/sqlcipher-for-android
Secure Preferences - https://github.com/scottyab/secure-preferences
Others
Appthority Mobile Threat Team Research Paper - https://cdn2.hubspot.net/hubfs/436053/Appthority%20Q2-
2018%20MTR%20Unsecured%20Firebase%20Databases.pdf
176
Android Cryptographic APIs
Android Cryptographic APIs
In the chapter Cryptography for Mobile Apps, we introduced general cryptography best practices and described typical
flaws that can occur when cryptography is used incorrectly in mobile apps. In this chapter, we'll go into more detail on
Android's cryptography APIs. We'll show how identify uses of those APIs in the source code and how to interpret the
configuration. When reviewing code, make sure to compare the cryptographic parameters used with the current best
practices linked from this guide.
Testing the Configuration of Cryptographic Standard Algorithms (MSTG-
CRYPTO-2, MSTG-CRYPTO-3 and MSTG-CRYPTO-4)
Overview
Android cryptography APIs are based on the Java Cryptography Architecture (JCA). JCA separates the interfaces and
implementation, making it possible to include several security providers that can implement sets of cryptographic
algorithms. Most of the JCA interfaces and classes are defined in the java.security.* and javax.crypto.*
packages. In addition, there are Android specific packages android.security.* and android.security.keystore.* .
The list of providers included in Android varies between versions of Android and the OEM-specific builds. Some
provider implementations in older versions are now known to be less secure or vulnerable. Thus, Android applications
should not only choose the correct algorithms and provide good configuration, in some cases they should also pay
attention to the strength of the implementations in the legacy providers.
You can list the set of existing providers as follows:
StringBuilder builder = new StringBuilder();
for (Provider provider : Security.getProviders()) {
builder.append("provider: ")
.append(provider.getName())
.append(" ")
.append(provider.getVersion())
.append("(")
.append(provider.getInfo())
.append(")\n");
}
String providers = builder.toString();
//now display the string on the screen or in the logs for debugging.
Below you can find the output of a running Android 4.4 in an emulator with Google Play APIs, after the security
provider has been patched:
provider: GmsCore_OpenSSL1.0 (Android's OpenSSL-backed security provider)
provider: AndroidOpenSSL1.0 (Android's OpenSSL-backed security provider)
provider: DRLCertFactory1.0 (ASN.1, DER, PkiPath, PKCS7)
provider: BC1.49 (BouncyCastle Security Provider v1.49)
provider: Crypto1.0 (HARMONY (SHA1 digest; SecureRandom; SHA1withDSA signature))
provider: HarmonyJSSE1.0 (Harmony JSSE Provider)
provider: AndroidKeyStore1.0 (Android AndroidKeyStore security provider)
For some applications that support older versions of Android (e.g.: only used Pre Android Nougat), bundling an up-to-
date library may be the only option. Spongy Castle (a repackaged version of Bouncy Castle) is a common choice in
these situations. Repackaging is necessary because Bouncy Castle is included in the Android SDK. The latest version
of Spongy Castle likely fixes issues encountered in the earlier versions of Bouncy Castle that were included in
177
Android Cryptographic APIs
Android. Note that the Bouncy Castle libraries packed with Android are often not as complete as their counterparts
from the legion of the Bouncy Castle. Lastly: bear in mind that packing large libraries such as Spongy Castle will often
lead to a multidexed Android application.
Apps that target modern API levels, went through the following changes:
For Android Nougat (7.0) and above the Android Developer blog shows that:
It is recommended to stop specifying a security provider. Instead, always use a patched security provider.
The support for the Crypto provider has dropped and the provider is deprecated.
There is no longer support for SHA1PRNG for secure random, but instead the runtime provides an instance of
OpenSSLRandom .
For Android Oreo (8.1) and above the Developer Documentation shows that:
Conscrypt, known as AndroidOpenSSL , is preferred above using Bouncy Castle and it has new
implementations: AlgorithmParameters:GCM , KeyGenerator:AES , KeyGenerator:DESEDE ,
KeyGenerator:HMACMD5 , KeyGenerator:HMACSHA1 , KeyGenerator:HMACSHA224 , KeyGenerator:HMACSHA256 ,
KeyGenerator:HMACSHA384 , KeyGenerator:HMACSHA512 , SecretKeyFactory:DESEDE , and
Signature:NONEWITHECDSA .
You should not use the IvParameterSpec.class anymore for GCM, but use the GCMParameterSpec.class
instead.
Sockets have changed from OpenSSLSocketImpl to ConscryptFileDescriptorSocket , and
ConscryptEngineSocket .
SSLSession with null parameters give an NullPointerException.
You need to have large enough arrays as input bytes for generating a key otherwise, an
InvalidKeySpecException is thrown.
If a Socket read is interrupted, you get an SocketException .
For Android Pie (9.0) and above the Android Developer Blog shows even more aggressive changes:
You get a warning if you still specify a provider using the getInstance method and you target any API below
P. If you target P or above, you get an error.
The Crypto provider is now removed. Calling it will result in a NoSuchProviderException .
Android SDK provides mechanisms for specifying secure key generation and use. Android 6.0 (Marshmallow, API 23)
introduced the KeyGenParameterSpec class that can be used to ensure the correct key usage in the application.
Here's an example of using AES/CBC/PKCS7Padding on API 23+:
String keyAlias = "MySecretKey";
KeyGenParameterSpec keyGenParameterSpec = new KeyGenParameterSpec.Builder(keyAlias,
KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
.setBlockModes(KeyProperties.BLOCK_MODE_CBC)
.setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)
.setRandomizedEncryptionRequired(true)
.build();
KeyGenerator keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES,
"AndroidKeyStore");
keyGenerator.init(keyGenParameterSpec);