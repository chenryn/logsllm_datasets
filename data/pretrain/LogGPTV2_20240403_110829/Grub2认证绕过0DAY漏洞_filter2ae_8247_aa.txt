# Grub2认证绕过0DAY漏洞
|
##### 译文声明
本文是翻译文章，文章来源：360安全播报
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**内容:**
**1.描述。**
**2.影响。**
**3.关于该漏洞。**
**4.利用(POC)。**
**5.APT如何利用这个0-day。**
**6.修复。**
**7.讨论。**
描述:
在Grub2上发现一枚0day漏洞。版本从1.98(十二月,2009)到2.02(十二月,2015)受到影响。该漏洞可以在某些情况下被利用,允许本地攻击者绕过任何认证(明文密码或Hash)。因此,攻击者可以控制计算机。
grub2是大多数Linux系统使用的一种常用嵌入式系统使用的引导程序。这一漏洞可造成数不胜数的设备受到影响。  
如图所示,在Debain 7.5 中我们成功的利用了该漏洞,在qemu下成功get shell。
我是否会受到影响?  
你应当赶紧检查你的系统是否存在该漏洞,当Grub访问你的用户名的时候,按退格键28次。如果你的设备重新启动或者你能够get
shell,那么你的设备以及被感染了。  
影响:  
攻击者成功利用此漏洞可以获得一个Grub的rescue shell,Grub的rescue shell是一个非常高权限的shell,有如下权限:  
权限的提升:攻击者在不知道有效用户名和密码的情况下进行身份验证。攻击者已经全面进入GRUB“控制台”(grub rescue)。  
信息披露:攻击者可以加载特定的内核以及initramfs(例如USB),然后在一个更舒适的环境,将整盘复制或者安装一个rootkit。  
拒绝服务攻击:攻击者可以破坏任何数据包括grub本身。即使在这种情况下,磁盘加密,攻击者仍然可以覆盖它,处罚DOS。
关于该漏洞:  
故障(bug)发生在GRUB代码1.98以后的版本(十二月,2009)。由提交记录b391bdb2f2c5ccf29da66cecdbfb7566656a704d引入,影响grub_password_get()函数。  
有两个函数都受到同一个整数下溢漏洞影响。grub_username_get()和grub_password_get()分别位于grub-core/normal/auth.c 以及 lib/crypto.c
。除了grub_username_get()调用了函数printf()以外，这两个函数基本是一样的。这里描述的PoC是基于grub_username_get()来get
shell的。  
下面是grub_username_get()功能:
    static int
    grub_username_get (char buf[], unsigned buf_size)
    {
      unsigned cur_len = 0;
      int key;
      while (1)
        {
          key = grub_getkey ();
          if (key == 'n' || key == 'r')
            break;
          if (key == 'e')
            {
              cur_len = 0;
              break;
            }
          if (key == 'b')  // Does not checks underflows !!
            {
              cur_len--; // Integer underflow !!
              grub_printf ("b");
              continue;
            }
          if (!grub_isprint (key))
            continue;
          if (cur_len + 2 < buf_size)
            {
              buf[cur_len++] = key; // Off-by-two !!
              grub_printf ("%c", key);
            }
        }
      grub_memset( buf + cur_len, 0, buf_size - cur_len); // Out of bounds overwrite
      grub_xputs ("n");
      grub_refresh ();
      return (key != 'e');
    }
故障是由于 cur_len 变量递减没有检查范围造成的。
利用(POC)
利用integer underflow可以导致off-by-two 或越界写的漏洞。前一个漏洞会覆盖用户名
buf以下的两个字节(grub_auth_check_authentication()中的局部变量local),但这部分内存没有任何有用的信息可以用来实施攻击，事实上这里只是内存对齐的padding。
后一个是一个越界写,这个很有趣,因为它允许在下面的用户名缓冲区以下写零。这是因为grub_memset()函数试图将所有的未使用的用户名缓冲区设置为零。代码需要计算第一个未使用的字节的地址和需要置0的缓冲区的长度。这些计算的结果作为grub_memset()的函数参数传递:
    grub_memset (buf + cur_len, 0, buf_size - cur_len);
例如,用户缓冲区,键入“root”作为用户名,cur_len为5,以及grub_memset()函数清除(设置为0)字节从5到1024-5(用户名和密码的缓冲区1024字节)的内存。这种编程方式是相当的健壮的。例如,如果输入的用户名被存储在一个干净的1024字节数组中,那么我们可以将整个1024个字节和有效的用户名进行比较,而不是比较两个字符串。这可以防止一些侧信道攻击,比如时间差攻击。
滥用出界改写,攻击者可以按退格键来下溢cur_len变量,产生很大的值。这个值是用来计算起始地址的。
**memset destination address =** buf + cur_len
在这一点上,出现了一个二次溢出,该值与用户名缓冲区所在的基地址的增加的值无法完整保存在一个32位变量中。因此,我们需要实现的第一个下溢和第二个上溢出来计算目标地址,grub_memset()函数将开始设置为零缓冲:
    cur_len--; // Integer Underflow
    grub_memset (buf + cur_len, 0, buf_size - cur_len);// Integer Overflow
下面的例子有助于理解我们如何利用这个。假设用户缓冲区位于地址0x7f674,攻击者按一次退格键（cur_len 下溢变成0xFFFFFFFF）计算结果就是：
    grub_memset(0x7f673,0,1025);
第一个参数是: (buf+cur_len) = (0x7f674+0xFFFFFFFF) = (0x7f674-1) =
0x7f673,第二个参数:用于填充内存的常量，在这里是0,和第三个参数是填充的字节数:(buf_size-cur_len)=(1024 -(- 1))=
1025。因此,整个用户名缓冲区(1024)加上缓冲区下的第一个字节将被设置为零。
因此,退格键的数目(不引入任何用户名),就是用户名缓冲区以下会被置0的字节数目。
现在,我们能够覆盖在用户名以下的任意数量的字节,我们需要找到一个合适的内存地址,我们可以用零覆盖。看看当前栈帧显，我们可以覆盖函数grub_memset()函数的返回地址。下面的图片草图勾画了堆栈内存布局:
grub2:重定向控制流
如上图所示,该grub_memset()函数的返回地址是从用户名缓冲区以下16字节开始的。换句话说,如果我们按退格键17次,我们将覆盖返回地址的高字节。如此一来，函数就会返回到0x00eb53e8，而不是0x07eb53e8。当grub_memset()结束,控制流重定向到的0x00eb53e8地址会导致重启。同样的,如果我们按退格键18、19或20次,在所有的情况下重新启动系统。
这样一来,我们就能够重定向控制流。
我们将能跳往的代码做一个详细分析:0x00eb53e8,0x000053e8和0x000000e8,因为他们跳至代码重新启动计算机,是没有办法控制的执行流程。
尽管它似乎很难建立一个成功的攻击,只是跳到0x0。我们将展示如何实现这个。
跳到0x0会有什么东西吗？
地址0x0属于处理器的IVT(中断向量表)。它包含了各种各样的指针的形式段:偏移量。
在这个启动顺序的早期阶段,处理器和执行框架不具备完全的功能。下一步的执行环境的一个规则的过程是主要的差异:
l处理器处于“保护模式”。grub2在开始的时候启用该种模式。
l未启用虚拟内存。
l无内存保护。内存是可读/写/执行。没有NX/DEP。
l处理器执行32位指令集,即使在64位架构中。