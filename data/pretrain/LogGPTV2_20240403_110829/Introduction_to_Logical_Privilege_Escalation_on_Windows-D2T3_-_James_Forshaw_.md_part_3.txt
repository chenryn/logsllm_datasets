# COM and RPC Services: Interface Definition and Security

## Interface Definition
Similar to Remote Procedure Call (RPC) services, Component Object Model (COM) services must define their interfaces using an Interface Definition Language (IDL) file. This IDL file must be registered. The DLL containing the implementation of the COM service must also be supported, along with proxies and stubs.

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## COM Security
COM security is enforced in the server process and through the Remote Procedure Call Service Subsystem (RPCSS). The following actions are part of COM security:

- **Launch**: Creates a new instance of the server.
- **Access**: Calls methods on existing objects.
- **Activate**: Creates a new object on an existing server.

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## AppIDs and RunAs User
A COM class can be registered within an Application Identifier (AppID), which is a Globally Unique Identifier (GUID). The AppID can modify the behavior of the activated COM class in several ways:

- **Specify non-default Launch or Access permissions**.
- **Specify a Surrogate Executable** to host DLL classes out-of-process.
- **Specify a Windows Service** that will host the class.
- **Specify a specific "RunAs" user** to run the server under.

The "RunAs" user is typically set to "Interactive User," which means the current session's default user, not the caller. If a server is registered as "Interactive User" and the caller has permission to launch or activate it, a sandboxed user can interact with it to try and escape the sandbox.

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## User Account Control (UAC)
By default, a Windows user is a "split-token" administrator, meaning they have limited privileges but can become a full administrator on demand. This is implemented in the AppInfo service. There are many ways to bypass UAC, but most require prompts. UAC also supports special UI Access processes, which bypass checks for sending window messages to higher integrity level processes.

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## UAC Auto-Elevation
Since the introduction of UAC, auto-elevation is supported for special UI access binaries. These binaries must be signed by a known certificate and located in a secure location, and their manifest must include the `UIAccess` element. Since Windows 7, UAC also supports auto-elevation for executables that meet certain criteria, such as being signed by Microsoft and having an `autoElevate` element in their manifest. Additionally, UAC supports the auto-elevation of out-of-process COM objects.

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## DEMO 4: Inspecting Accessible COM Services
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Bug Classes and Exploitation
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Example Vulnerabilities
The toolkit includes several example vulnerabilities that can be exploited, such as a simple kernel driver, an RPC server, and a .NET COM server. The exploitation tools include a demo client and a tool for exploiting the COM server via .NET DCOM.

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Dynamic Analysis with Process Monitor
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Reverse Engineering with IDA Pro
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Bug Class List
- **File Path Abuse**
  - Path Traversal
  - Time-of-Check, Time-of-Use (TOCTOU)
- **Impersonation**
  - File/Process Access Under Impersonation
  - Insecure Kernel Impersonation and Token Usage
- **Insecure Kernel Resource Access**
- **COM Bugs**
  - .NET DCOM Service
  - Bound Objects

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Path Canonicalization
```cpp
bool TestLoadLibrary(const wchar_t* name) {
    wstring full_path = L"C:\\Windows\\" + name;
    HMODULE hModule = LoadLibrary(full_path.c_str());
    if (hModule != nullptr) {
        printf("Loaded module: %p\n", hModule);
        FreeLibrary(hModule);
        return true;
    }
    return false;
}
```
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## DEMO 5: Exploiting Path Canonicalization
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Insecure Path Usage
```cpp
bool TestLoadLibraryCanonical(const wchar_t* name) {
    if (wcschr(name, '\\') || wcschr(name, '/')) {
        printf("Error, name contains path separators\n");
        return false;
    }
    return TestLoadLibrary(name);
}
```
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## NTFS Alternate Data Streams (ADS)
ADS allows you to create substreams on NTFS files by separating them using the `:` separator. For example, `abc:xyz` is a stream named `xyz` on the existing file `abc`. This also works for directories if you have AddSubDirectory access.

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## DEMO 6: Exploiting Named Streams
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## File Time-of-Check, Time-of-Use (TOCTOU)
```cpp
bool TestLoadLibraryTocTou(const wchar_t* lib_path) {
    if (VerifyEmbeddedSignature(lib_path)) {
        HMODULE hModule = LoadLibrary(lib_path);
        if (hModule != nullptr) {
            printf("Loaded module: %p\n", hModule);
            FreeLibrary(hModule);
            return true;
        }
    }
    return false;
}
```
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Exploiting TOCTOU
There are different ways to exploit TOCTOU, including race conditions and differing path parsing behaviors between functions.

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Exploitation
1. Copy a signed binary to a known location with the name `abc`.
2. Copy the DLL you want to load to `abc.dll` in the same directory.
3. Pass the path to the service specifying `abc` as the filename.
4. Your desired DLL should be loaded.

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## DEMO 7: TOCTOU on Name
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Hardened TOCTOU
```cpp
bool TestLoadLibraryTocTouHardened(const wchar_t* lib_path) {
    LPWSTR ext = PathFindExtensionW(lib_path);
    if (ext == nullptr || _wcsicmp(ext, L".dll") != 0)
        return false;
    HANDLE handle = CreateFile(lib_path, ...);
    if (!CheckFileIsInSystem(handle))
        return false;
    return LoadLibrary(lib_path);
}
```
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Windows Symbolic Links
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Opportunistic Locks (OPLOCK)
OPLOCKS can be used to win the TOCTOU race by locking a file to prevent access and getting a callback when someone else tries to open the file.

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## DEMO 8: Symbolic Link TOCTOU
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Reading Files Under Impersonation
```cpp
bool TestCreateProcess() {
    RpcImpersonateClient();
    WCHAR cmdline[] = L"c:\\windows\\notepad.exe";
    if (CreateProcess(cmdline, cmdline, ...))
        return true;
    return false;
}
```
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Current Userâ€™s DosDevices Directory
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## DEMO 9: DosDevices Redirect
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Incorrect Handle Duplication
```cpp
int TestDuplicateHandle(int handle) {
    unsigned long pid;
    I_RpcBindingInqLocalClientPID(hBinding, &pid);
    HANDLE process = OpenProcess(PROCESS_DUP_HANDLE, pid);
    HANDLE ret;
    DuplicateHandle(process, handle, process, &ret, 0, FALSE, DUPLICATE_SAME_ACCESS));
    return (int)ret;
}
```
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Hard-coded Handle Values
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## DEMO 10: Handle Duplication
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Insecure Kernel Resource Access
```cpp
NTSTATUS CreateFile(PUNICODE_STRING Path) {
    OBJECT_ATTRIBUTES obj_attr = { 0 };
    HANDLE Handle = NULL;
    ULONG AttributeFlags = OBJ_KERNEL_HANDLE;
    InitializeObjectAttributes(&obj_attr, Path, AttributeFlags);
    return ZwCreateFile(&Handle, MAXIMUM_ALLOWED, &obj_attr, ...);
}
```
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Resource Access
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## DEMO 11: Privileged Resource Creation
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Missing Impersonation Level Checks
```cpp
BOOLEAN GetTokenElevated(PACCESS_TOKEN Token) {
    PTOKEN_ELEVATION Elevation = NULL;
    BOOLEAN ret = FALSE;
    if (NT_SUCCESS(SeQueryInformationToken(Token, TokenElevation, &Elevation)))
        ret = !!Elevation->TokenIsElevated;
    return ret;
}
```
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Exploiting Split-Token Admin
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Insecure Impersonation in System Thread
```cpp
void SystemThread(PACCESS_TOKEN token) {
    UNICODE_STRING file;
    CHECK_STATUS(PsImpersonateClient(KeGetCurrentThread(), token, FALSE, FALSE, SecurityImpersonation));
    RtlInitUnicodeString(&file, L"\\SystemRoot\\demo.txt");
    CHECK_STATUS(CreateFileSecure(&file));
}

void BadImpersonation() {
    SeCaptureSubjectContext(&subject_context);
    PsCreateSystemThread(SystemThread, SeQuerySubjectContextToken(&subject_context));
}
```
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## DEMO 12: Admin Token Check Bypass
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Bound COM Objects
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## .NET DCOM Services
```cpp
[ComVisible(true), Guid("801445A7-C5A9-468D-9423-81F9D13FEE9B")]
public class COMService : ICOMInterface {
}

int cookie = reg_services.RegisterTypeForComClients(typeof(COMService), RegistrationClassContext.LocalServer, RegistrationConnectionType.MultipleUse);
Console.ReadLine();
reg_services.UnregisterTypeForComClients(cookie);
```
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## .NET DCOM Objects (Binary Serialization)
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## DEMO 13: .NET DCOM Elevation
- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)

## Resources
- [Google Sandbox Attack Surface Analysis Tools](https://github.com/google/sandbox-attacksurface-analysis-tools)
- [Symbolic Link Testing Tools](https://github.com/google/symboliclink-testing-tools)
- [OLEView .NET](https://github.com/tyranid/oleviewdotnet)
- [ExploitDotNetDCOM](https://github.com/tyranid/ExploitDotNetDCOM)

- **Tools/Examples**: [Link](https://goo.gl/HzZ2Gw)
- **Workbook**: [Link](https://goo.gl/P4Q9GN)