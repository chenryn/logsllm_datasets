– H: a collision resistant one-way hash function with domain restricted to k-bit strings: H : {0, 1}k →
– Ha: a collision resistent one-way hash function with arbitrary length input: Ha : {0, 1}∗ → {0, 1}k.
– h: a secure MAC scheme h : {0, 1}k ×{0, 1}∗ → {0, 1}t that, on input of a k-bit key x and an arbitrary
The scheme uses the following cryptographic primitives:
{0, 1}k.
message m outputs a t-bit MAC hx(m).
FssAgg.Kg. Any symmetric key generation algorithm can be used to generate an initial k-bit secret key s.
We set sk0 = vk = s.
FssAgg.Asig. At time period i, the signer is given a message Mi to be signed and an aggregate-so-far
MAC σ1,i−1 on messages M1,··· , Mi−1. The signer ﬁrst generates a MAC σi on Mi with h using ski:
σi = hski(Mi). It then computes σ1,i by folding σi onto σ1,i−1 through Ha: σ1,i = Ha(σ1,i−1||σi). Ha
acts as the aggregation function. Alternatively we can compute σ1,i as follows:5
σ1,i = Ha(Ha(···Ha(Ha(σ1||σ2)||σ3))||··· )||σi)whereσj = hskj (Mj)∀j = 1,··· , i
(1)
5 Note that hash functions are generally designed as an iterative process [18]. That is, a hash function H : {0, 1}∗ → {0, 1}k with
arbitrarily long ﬁnite input is executed by iteratively invoking an internal (per block) function f : {0, 1}r+k → {0, 1}k (r > k
4
Finally, the signer executes the key update subroutine deﬁned as:
FssAgg.Upd. We deﬁne the i-th signing key ski as the image under H of the previous key ski−1:
ski = H(ski−1), i > 0. (This part is the same as the forward-secure MAC scheme in [19].)
FssAgg.Aver. To verify a candidate σ1,i over messages M1, ··· , Mi, the veriﬁer (who has the verifying
key vk which is the same as the initial signing key sk0) computes keys sk1, ··· , ski through the public
key update function. It then mimics the signing process and re-computes σc
1,i and compares it with σ1,i.
If the two values match, it outputs valid. Otherwise it outputs invalid.
5 A Forward-Secure Sequential Aggregate Signature Scheme
If public (transferrable) veriﬁcation is required we need a FssAgg signature scheme to check the authenticity
of data records. Trivially, all aggregate signature schemes [6, 16, 17] can be used as a FssAgg signature
scheme if we treat the key of signer i as the key used (by the same signer) in the time period i. However
a trivial construction is useless for our purposes since a signer (e.g., a sensor) would need O(T ) storage to
store its secret keys.
The overall efﬁciency of a FssAgg signature scheme depends on the following metrics: 1) size of the
aggregate signature; 2) size of the signing key; 3) complexity of key update; 4) complexity of aggregate
signing; 5) size of veriﬁcation key; 6) complexity of aggregate verifying. The ﬁrst four represent signer
efﬁciency and the last two represent veriﬁer efﬁciency; the size parameters (aggregate signature, signing key
and veriﬁcation key) represent space efﬁciency and the complexity parameters (sign, verify and key update)
represent time efﬁciency. In our envisaged sensor scenarios, signer efﬁciency is much more important than
veriﬁer efﬁciency and space efﬁciency more important than time efﬁciency.
Focusing on the signer and space efﬁciency, we propose a FssAgg signature scheme based on the BLS
signature scheme [6]. BLS signatures can be aggregated through EC multiplication by anyone [7]. We ﬁrst
introduce the BLS scheme and then show how to modify it to be a FssAgg signature scheme.
The BLS scheme works in groups with bilinear maps. A bilinear map is a map e : G1 × G2 → GT ,
where: (a) G1 and G2 are two (multiplicative) cyclic groups of prime order q; (b) |G1| = |G2| = |GT|;
(c) g1 is a generator of G1 and g2 is a generator of G2. The bilinear map e : G1 × G2 → GT satisﬁes the
following properties:
1. Bilinear: for all x ∈ G1, y ∈ G2 and a, b ∈ Z, e(xa, yb) = e(x, y)ab;
2. Non-degenerate: e(g1, g2) (cid:54)= 1
The BLS scheme uses a full-domain hash function H1(·): {0, 1}∗ → G1. Key generation involves picking
a random x ∈ Zq for each signer, and computing v = gx
2 . The signer’s public key is v ∈ G2 and her
secret key is x. Signing a message M involves computing the message hash h = H1(M) and then the
signature σ = hx. To verify a signature one computes h = H1(M) and checks that e(σ, g2) = e(h, v). The
veriﬁcation costs amount to 2 bilinear mappings.
To aggregate n BLS signatures, one computes the product of individual signatures as follows:
n(cid:89)
σ1,n =
σi
(2)
i=1
as a hash function compresses its input) with ﬁxed-size input. A hash input x of arbitrary ﬁnite length is divided into ﬁxed-length
r-bit blocks xi. In each iteration, f takes on the current input block xi and the intermediate result Hi−1 produced by f in the
previous iteration. We can thus modify the aggregation function as follows: form an input block with several MACs and then
fold the block into the aggregate in one round. This way, σ1,i can be represented as: σ1,i = Ha(σ1||σ2||···||σi). Compared
with 1, this aggregation function in is more efﬁcient.
5
where σi corresponds to the signature on message Mi. The aggregate signature σ1,n is of the same size as
an individual BLS signature and aggregation can be performed incrementally and by anyone.
Veriﬁcation of an aggregate BLS signature σ1,n includes computing the product of all message hashes
and verifying the following match:
n(cid:89)
e(σ1,n) ?=
e(hi, vi)
(3)
i=1
2 . The initial signing key is x0 and the public key is: (v1,··· , vT ) = (gx1
where vi is the public key of the signer who generates σi on message Mi.
FssAgg.Kg The signer picks a random x0 ∈ Zp and computes a pair (xi, vi) (i = 1,··· , T ) as: xi =
2 ,··· , gxT
H(xi−1), vi = gxi
2 ).
Note that, in our sensor scenarios, a sensor (signer) would not generate its own keys. Instead, the sink
(or some other trusted party) would generate all public and secret keys for all sensors. The collector,
however, would be given the public keys only.
FssAgg.Asig With inputs of message Mi to be signed, an aggregate-so-far signature σ1,i−1 over messages
M1,··· , Mi−1 and the current signing key xi, the signer ﬁrst computes a BLS signature on Mi using
xi: σi = Hxi(index||Mi) where index denotes the position of Mi in the storage. The purpose of this
index is to provide message ordering, since the original BGLS aggregation function does not impose
any order on aggregate elements. Next, the signer aggregates σi onto σ1,i−1 through multiplication:
σ1,i = σ1,i−1 · σi. Finally, the signer updates the key.
FssAgg.Upd A signer evolves its secret signing key through the hash function H: xi = H(xi−1).
FssAgg.Aver The veriﬁer uses Equation 3 and the public key pk to verify an aggregate signature σ1,i
The security of our FssAgg signature scheme is based on the underlying BLS scheme and no other assump-
tions is needed. The following theorem summarizes the security of our FssAgg signature scheme and is
strait-forward to prove. For completeness, a formal description of the security model and the proof of the
theorem can be found in Appendix B and C.
Theorem 1. If BLS is a (t(cid:48), qH , q(cid:48)
secure FssAgg signature scheme where t(cid:48) = t + O(qH + qS), (cid:48) = /T , and q(cid:48)
S, )-secure signature scheme, our construction above is a (t, qH , qS, T, )-
S = qS/T .
A proof sketch for this theorem is presented in Appendix C. (Appendix B contains the security model).
See Appendix A for some performance results.
6 Summary and Future Work
In this paper we motivated the need for Forward-Secure Sequential Authentication to address both key ex-
posure and storage efﬁciency issues. We constructed two sample FssAgg schemes (one MAC-based and one
signature-based). While our trivial MAC-based scheme is near-optimal in terms of efﬁciency, the signature-
based scheme is not. Although it is both signer- and space-efﬁcient, it is not veriﬁer-friendly as the veriﬁer
needs O(T ) space to store the public key and the veriﬁcation is fairly expensive because of bilinear map
operations. Constructing a more efﬁcient scheme – with either (or both) compact public keys or lower veriﬁ-
cation complexity – is a challenge for future work. And, a more careful formal treatment of Forward-Secure
Sequential Authentication is certainly needed.
References
1. M. Abdalla, and L. Reyzin. “A new forward-secure digital signature scheme.” In ASIACRYPT 2000, pp. 116-129, 2000.
6
2. R. Anderson. “Two remarks on public-key cryptology - Invited Lecture”. Fourth ACM Conference on Computer and Commu-
nications Security, Apr. 1997.
3. K. Barr, and K. Asanovic. “Energy aware lossless data compression.” In Proc. of MobiSys’03. San Francisco, CA, May 2003.
4. M. Bellare, and S. K. Miner. “A forward-secure digital signature scheme”. In Proc. of Adances in Cryptology - Crypto 99,
LNCS Vol 1666:431-448, Aug. 1999.
5. M. Bellare, and B. Yee. “Forward-Security in Private-Key Cryptography”. In Proceedings of CT-RSA’03, LNCS Vol. 2612, M.
Joye ed, Springer-Verlag, 2003.
6. D. Boneh, B. Lynn, and H. Shacham. “Short signatures from the Weil pairing”. J. Cryptology, 17(4):297-319, Sept. 2004.
Extended abstract in Proceedings of Asiacrypt 2001.
7. D. Boneh, C. Gentry, B. Lynn, and H. Shacham. “Aggregate and veriﬁably encrypted signatures from bilinear maps”. In Proc.
of Eurocrypt 2003, LNCS 2656:416-432, May 2003.
8. C. Castelluccia, E. Mykletun, and G. Tsudik. “Efﬁcient aggregation of encrypted data in wireless networks”. In Mobile and
Ubiquitous Systems: Networking and Services MobiQuitous 2005. July 2005.
9. Y. Frankel, P. Gemmell, P.D. MacKenzie, and M. Yung. “Optimal resilience proactive public-key cryptosystems”. In FOCS,
1997.
10. C. G. Gunther. “An identity-based key-exchange protocol.” Advances in Cryptology - EuroCrypt’89. LNCS 434, pp. 29-37,
1990.
11. L. Hu, and D. Evans. “Secure aggregation for wireless networks.” In Workshop on Security and Assurance in Ad Hoc Networks,
2003.
12. C. Intanagonwiwat, D. Estrin, R. Govindan, and J. Heidemann. “Impact of network density on data aggregation in wireless
sensor networks”. In ICDCS’02, pp. 457-458. 2002.
13. G. Itkis, and L. Reyzin. “Forward-secure signatures with optimal signing and verifying”. In Proc. of Advances in Cryptology -
Crypto’01, LNCS 2139:332-354, Aug. 2001.
14. A. Kozlov, and L. Reyzin. “Forward-secure signatures with fast key update”. In Prof. of the 3rd International Conference on
Security in Communication Networks (SCN’02), 2002.
15. H. Krawczyk. “Simple forward-secure signatures from any signature scheme”. In Proc. 7th ACM Conference on Computer and
Communication Security (CCS), pp. 108-115, Nov. 2000.
16. S. Lu, R. Ostrovsky, A. Sahai, H. Shacham, and B. Waters. “Sequential aggregate signatures and multisignatures without
random oracles”. In Prof. of Eurocrypt 2006, May 2006.
17. A. Lysyanskaya, S. Micali, L. Reyzin, and H. Shacham. “Sequential aggregate signatures from trapdoor permutations”. In
Proc. of Eurocrypt 2004, LNCS 3027:245-254, Nov. 2001.
18. A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone. “Handbook of applied cryptography”. CRC Press, 1997. ISBN 0-8493-
8523-7.
19. A. Perrig, J. Stankovic, and D. Wagner. “Security in wireless sensor networks”. ACM Commun., 47(6):53-57, 2004.
20. D. Wagner. “Resilient aggregation in sensor networks”. In Workshops on Security of Ad Hoc and Sensor Networks. 2004.
21. Y. Yang, X. Wang, S. Zhu, and G. Cao. “SDAP: a secure hop-by-hop data aggregation protocol for sensor networks”. In ACM
MOBIHOC’06. May 2006.
A Performance
In this section, we evaluate the performance of the proposed BLS-based FssAgg signature scheme. We begin
by accessing the cost in terms of basic cryptographic operations(e.g, multiplications, exponentiation, etc).
Then we show the actual overhead incurred through experiment.
We use the notation in Table 1. We consider the generation and veriﬁcation of a FssAgg signature σ1,k∗t
where t denotes the number of periods occupied by σ1,k∗t and k denotes the number of signatures generated
per time period. Table 2 illustrates the overhead (computation, storage and bandwidth) associated with the
scheme in terms of cryptographic operations.
We used a ﬁeld Fp where |p| = 512 and we choose the size of group order as |q| = 160. We test our
scheme on a Pentium 1.86GHz machine with 512M memory. The experiment result is listed in Table 3.