title:OAKE: a new family of implicitly authenticated diffie-hellman protocols
author:Andrew Chi-Chih Yao and
Yunlei Zhao
A New Family of Implicitly Authenticated Diﬃe-Hellman Protocols
∗
Andrew C. Yao
†
Yunlei Zhao
‡
Abstract
Cryptography algorithm standards play a key role both to the practice of information security
and to cryptography theory research. Among them, the MQV and HMQV protocols ((H)MQV, in
short) are a family of implicitly authenticated Diﬃe-Hellman key-exchange (DHKE) protocols that
are among the most eﬃcient and are widely standardized. In this work, from some new perspectives
and under some new design rationales, and also inspired by the security analysis of HMQV, we
develop a new family of practical implicitly authenticated DHKE (IA-DHKE) protocols, which enjoy
notable performance among security, eﬃciency, privacy, fairness and easy deployment. We make
detailed comparisons between our new protocols and (H)MQV, showing that the newly developed
protocols outperform HMQV in most aspects. Very brieﬂy speaking, we achieve:
• The most eﬃcient provably secure IA-DHKE protocol to date, and the ﬁrst online-optimal
• The ﬁrst IA-DHKE protocol that is provably secure, resilience to the leakage of DH compo-
nents and exponents, under merely standard assumptions without additionally relying on the
knowledge-of-exponent assumption (KEA).
• The ﬁrst provably secure privacy-preserving and computationally fair IA-DHKE protocol, with
privacy-preserving properties of reasonable deniability and post-ID computability and the prop-
erty of session-key computational fairness.
provably secure IA-DHKE protocols.
Guided by our new design rationales, in this work we also formalize and introduce some new concept,
say session-key computational fairness (as a complement to session-key security), to the literature.
1
Introduction
Diﬃe-Hellman key-exchange (DHKE) protocols [23] marked the birth of modern cryptography, and are
one of the main pillars of both theory and practice of cryptography [15]. Among them, the (H)MQV
protocols [50, 45, 42, 51] are among the most eﬃcient DHKE protocols that provide implicitly mutual au-
thentications based upon public-key cryptography, and are widely standardized [3, 4, 37, 38, 56, 57, 63].
In particular, it has been announced by the US National Security Agency as the key exchange mecha-
nism underlying “the next generation cryptography to protect US government information”, including
the protection of “classiﬁed or mission critical national security information” [57, 42].
By implicitly authenticated DHKE, we mean DHKE protocols whose communication is identical
to the basic DH protocol, yet they are implicitly authenticated by the sole ability of the parties to
compute the resultant session key [42]. IA-DHKE is initially suggested in [47], which then triggered a
list of subsequent (ad-hoc) designs of IA-DHKE protocols. The (H)MQV protocols marked the great
milestones of IA-DHKE developments.
In particular, the ﬁrst formal analysis of IA-OAKE, say the
HMQV protocol, within the Canetti-Krawczyk framework (CK-framework, for short) is conducted in
[42], which is particularly helpful in understanding the protocol design insights and the parameter
choices. Though seemingly conceptually simple, the (H)MQV protocols are actually very delicately
designed, in the sense that slight change in the design structure or parameters can lose provable security
or even be totally insecure. Indeed, despite its seemingly conceptual simplicity, designing “sound ” and
“right” key-exchange protocols turns out to be extremely error prone and can be notoriously subtle.
Also, the analysis of even a simple cryptographic protocol in intricate adversarial settings like the
Internet can be a luxury and dauntingly complex task [12, 42]. The reason for this is the high system
complexity and enormous number of subtleties surrounding the design, deﬁnition and analysis of key-
exchange protocols.
This work is an academic version of [66, 67], where the protocols presented in this work originally appeared there.
Institute
Interdisciplinary
Information
Sciences,
for
Tsinghua
University,
Beijing,
China.
∗
†
‡
PI:EMAIL
Software School, Fudan University, Shanghai 200433, China.
PI:EMAIL
1
The provable security of HMQV, assuming exposed DH-components and DH-exponents, additionally
relies on the non-standard KEA assumption [42] (for the most often cases of ˆA ̸= ˆB or X ̸= Y ).
Developing provably secure IA-DHKE protocols resilient to the leakage of DH components and exponents
in advance, which is as eﬃcient as (H)MQV while removing the additional KEA assumption (or relying
on the KEA assumption as minimal as possible), was left as an interesting open question. For key-
exchange protocols, besides the need of sound security, protocol eﬃciency, privacy protection, and
computational fairness also play a critical role in protocol evaluation and standard selection. In these
dimensions, (H)MQV also leaves much space to improve.
• (H)MQV does not support oﬄine pre-computing parts of the shared DH-secret, and does not
support leaving some expensive exponentiation computations to untrusted computing devices,
which quite limits the deployment of (H)MQV with power-limited devices (e.g., smart-cards,
mobile phones, etc). In particular, achieving online-optimal (say, only one online exponentiation)
provably secure IA-DHKE remains an open question in the literature. Notice that, as (H)MQV
is commonly viewed as the state-of-the-art in the integrity of security and eﬃciency, even minor
eﬃciency improvement while remaining the provable security is challenging.
• The design of (H)MQV considers little in privacy protection.
In this work, we focus on the
privacy-preserving properties of deniability and post-ID computability, which have served as cru-
cial evaluation criteria in evaluating and selecting the IKEv2 standard [40, 41].
• In this work, we identify some asymmetry or unfairness in session-key computation of (H)MQV
between a malicious player and an honest player. Speciﬁcally, a malicious player can pay much
lesser computational resource in computing the session-key, and can even set the session-key to
be some pre-determined or publicly computable values.
It is thus much desirable to present new IA-DHKE protocols, which preserve the advantages of
(H)MQV in provable security and eﬃciency (or, perform even better) while overcoming the above
mentioned disadvantages. But, as mentioned, the protocol structure of HMQV is quite delicate and
sensitive to the security analysis in the CK-framework, and even a slight change in protocol structure
or parameters can lose provable security or even be totally insecure. We do not know how to directly
modify the (H)MQV protocol structure to overcome the above mentioned disadvantages while preserving
its provable security and eﬃciency. This thus calls for some new protocol structures with new design
novelty and rationales.
In this work, inspired by the design of deniable Internet key-exchange [68], we start with investigating
practical mechanisms in the random oracle (RO) model, referred to as non-malleable joint proof-of-
knowledge (NMJPOK) for presentation simplicity, for proving DH-knowledges, say both the secret-key
and the DH-exponent, jointly and non-malleably in concurrent settings like the Internet. In light of
this line of investigations and inspired by the security analysis of HMQV, we develop a new family of
practical IA-DHKE protocols, which consists of three protocols referred to as OAKE,1 single-hash OAKE
(sOAKE) and robust OAKE (rOAKE). For presentation simplicity, we refer to the newly developed
DHKE protocols as (s,r)OAKE. Sometimes, we also refer to (s)OAKE (resp., (r)OAKE) as the protocols
of OAKE and sOAKE (resp., rOAKE).
We then make detailed comparisons between (s,r)OAKE and (H)MQV, which shows that the new
protocols outperform HMQV in most aspects. Detailed comparisons are listed in Section 4 and Table
1 (page 11), after motivating the design rationales and building tools and after presenting the detailed
OAKE speciﬁcations. Similar to HMQV, despite its seemingly conceptual simplicity, the OAKE pro-
tocol family was also very delicately designed and chosen among various potential protocol variants
and protocol parameters, toward an optimal balance among eﬃciency, security, privacy, fairness and
easy deployment. Along the way, guided by our new design rationales, we also introduce and discuss
some new concept, say session-key computational fairness (as a complement to session-key security),
1There are two acronym interpretations of OAKE. One interpretation is: (Online) Optimal (implicitly) Authenticat-
ed (Diﬃe-Hellman) Key-Exchange. Another interpretation is: (Toward) Optimally-balanced (implicitly) Authenticated
(Diﬃe-Hellman) Key-Exchange (in the integrity of protocol eﬃciency, security, privacy, fairness and easy deployment).
2
to the literature. To the best of our knowledge, our work is the ﬁrst that formally treats the issue of
computational fairness for cryptographic protocols, which is in particular signiﬁcantly diﬀerent from
the concept of “complete fairness” studied in the literature of secure multi-party computation (SMC).
2 Preliminaries
If A is a probabilistic algorithm, then A(x1; x2;··· ; r) is the result of running A on inputs x1; x2;···
and coins r. We let y ← A(x1; x2;··· ; r) denote the experiment of picking r at random and letting y
be A(x1; x2;··· ; r). If S is a ﬁnite set then x ← S, sometimes also written as x ∈R S, is the operation
of picking an element uniformly from S. If (cid:11) is neither an algorithm nor a set then x ← (cid:11) is a simple
assignment statement.
′
be a ﬁnite Abelian group of order N , G be a subgroup of prime order q in G
a generator of G, by 1G the identity element, by G \ 1G = G − {1G} the set of elements of G except 1G
′
and by t = N
.
q the cofactor. In this work, we use multiplicative notation for the group operation in G
We assume the computational Diﬃe-Hellman (CDH) assumption holds over G, which roughly says that
given X = gx; Y = gy ← G (i.e., each of x and y is taken uniformly at random from Zq) no probabilistic
polynomial-time (PPT) algorithm can compute CDH(X; Y ) = gxy with non-negligible probability.
′
Let G
. Denote by g
Let (A = ga; a) (resp., (X = gx; x)) be the public-key and secret-key (resp., the DH-component
and DH-exponent) of player ˆA, and (B = gb; b) (resp., (Y = gy; y)) be the public-key and secret-
key (resp., the DH-component and DH-exponent) of player ˆB, where a; x; b; y are taken randomly and
∗
independently from Z
q . (H)MQV is recalled in Figure 1 (page 6), and the (H)MQV variants are recalled
in Appendix A, where on a security parameter k HK (resp., h) is a hash function of k-bit (resp., l-bit)
output and l is set to be |q|=2. Throughout this work, we assume that the underlying PKI requires no
proof-of-knowledge (POP) or proof-of-possession (POP) of secret-key during key registration, but the
CA will check the (non-identity) sub-group membership of registered public-keys (i.e., make sure that
the registered public-keys are in G \ 1G).
The Gap Diﬃe-Hellman (GDH) assumpiton [58] roughly says that the CDH assumption holds even if
the CDH solver is equipped with a decisional Diﬃe-Hellman (DDH) oracle for the group G and generator
g, where on arbitrary input (U; V; Z) ∈ G3 the DDH oracle outputs 1 if and only if Z = CDH(U; V ).
Informally speaking, the knowledge-of-exponent assumption (KEA) assumption says that, suppose
∗
on input (g; C = gc), where c is taken uniformly at random from Z
q , an eﬃcient (say, probabilistic
polynomial-time) algorithm A outputs (Y; Z = Y c) ∈ G2, then the discrete logarithm y of Y = gy can
be eﬃciently extracted from the input (g; C) and the random coins used by A. The KEA assumption
is derived from the CDH assumption, and is a non-black-box assumption by nature [7]. The KEA
assumption was introduced in [19], and has been used in many subsequent works (e.g., [35, 8, 7, 21,
42, 20, 22], etc).
In particular, the KEA assumption plays a critical role for provable deniability of
authentication and key-exchange (e.g., [21, 42, 22]). More details are referred to Appendix B.
Brief description of the CK-framework. In the CK-framework for a DHKE protocol, a session
run at the side of player ˆA with a peer player ˆB, where the outcoming (resp., incoming) DH-component
is X (resp., Y ) and ˆA and ˆB may be the same player, is identiﬁed as ( ˆA; ˆB; X; Y ). In each session, a
party can be activated as the role of either initiator (who sends the ﬁrst DH-component) or responder
(who sends the second DH-component). The session ( ˆB; ˆA; Y; X) (it it exists) is said to be matching
to ( ˆA; ˆB; X; Y ), if the two players have matching player roles in these two sessions, i.e., if ˆA is the
initiator (resp., responder) then ˆB is the responder (resp., initiator).2
A CMIM adversary A controls all the communication channels among concurrent session runs of
the KE protocol. In addition, A is allowed access to secret information via the following three types of
queries: (1) state-reveal queries for ongoing incomplete sessions; (2) session-key queries for completed
sessions; (3) corruption queries upon which all information in the memory of the corrupted parties will
2The requirement of matching roles was only implicitly assumed in the deﬁnition and security analysis in [42]. As
explicitly observed in [18], without explicitly making this requirement, no DHKE protocol where session-key derivation
is dependent of players’ roles, just like HMQV and the OAKE family, can satisfy the completeness requirement, i.e., two
matching sessions should output the same session-key.
3
The session-key security (SK-security) within the CK-framework is captured as follows:
be leaked to A. A session ( ˆA; ˆB; X; Y ) is called exposed, if it or its matching session ( ˆB; ˆA; Y; X) suﬀers
from any of these three queries.
for any
complete session ( ˆA; ˆB; X; Y ) adaptively selected by A, referred to as the test session, as long as it is
unexposed it holds with overwhelming probability that (1) the session-key outputs of the test session
and its matching session are identical; (2) A cannot distinguish the session-key output of the test session
from a random value. At a high level, the SK-security essentially says that a party that completes a
session has the following guarantees [15]: (1) if the peer to the session is uncorrupted then the session-
key is unknown to anyone except this peer; (2) if the unexposed peer completes a matching session then
the two parties have the same shared key. The reader is referred to [15] for the detailed description of
the CK-framework.
3 Design of OAKE: Motivation, Discussion and Speciﬁcation
We consider an adversarial setting, where polynomially many instances (i.e., sessions) of a Diﬃe-Hellman
protocol ⟨ ˆA; ˆB⟩ are run concurrently over an asynchronous network like the Internet. To distinguish
concurrent sessions, each session run at the side of an uncorrupted player is labeled by a tag, which is the
concatenation, in the order of session initiator and then session responder, of players’ identities/public-
keys and DH-components available from the session transcript. A session-tag is complete if it consists
of a complete set of all these components.
In this work, we study the mechanisms, in the random oracle (RO) model, for non-malleably and
jointly proving the knowledge of both b and y w.r.t. a challenge DH-component X between the prover
ˆB (of public-key B = gb and DH-component Y = gy) and the veriﬁer ˆA (who presents the challenge