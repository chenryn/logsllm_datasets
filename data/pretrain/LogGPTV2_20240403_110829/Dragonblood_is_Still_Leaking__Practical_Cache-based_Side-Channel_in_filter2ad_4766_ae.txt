script was unable to decide between two adjacent values, e.g. five
and six, we can assume that more than four iterations are required
for password conversion.
These results outline the improvement of our attack compared
to Dragonblood. In [35], at least 20 samples were needed for each
MAC address to achieve a success rate of 99% (only 10 in our attack).
Moreover, with our attack, each successfully interpreted trace gives
at least as much information, and roughly twice more on average
(see Section 3.5). Consequently, our work greatly reduces the num-
ber of the required measurements (or samples) in order to prune all
wrong passwords in a given dictionary. For instance, our work needs
160 measurements for the Rockyou dictionary, while Dragonblood
needs 580 measurements. Roughly speaking, the measurements
are cut down by at least 3. Moreover, our attack requires to vary
the MAC addresses less often (almost twice as fewer). Thus, our
work performs better in practice, particularly in a context where
cache-based measurements are limited. Of course, we argue that
our results can be generalized for other implementations suffering
from the same type of vulnerability.
ACSAC2020,December7–11,2020,Austin,USADanielDeAlmeidaBraga,Pierre-AlainFouque,andMohamedSabt4.2TraceCollectionOncebothclientandAPweresetuptouseapasswordthatwasrandomlydrawnfromadictionary,welaunchedthespyprocesstomonitorwell-chosenmemorylines(seeSection3.3).Aftereachcon-nection,wedisconnectedtheclientandreconnecteditafewtimestoacquiremultiplesamples.Thisstepemulatesade-authenticationattackaimingatcollectingmultiplesampleswiththesameMACaddresses.Foreachpasswordwewentthroughthisprocessusing10differentMACaddresses,allowingustoacquireupto10inde-pendenttracesforthesamepassword.ForeachMACaddress,wecollect15samples.Ourobservationswereconsistentlyobtainedthroughtesting80passwordsinordertoevaluatetheeffectivenessandthereliabilityofourtracecollectiontechniques.WecallsampletheresultofmonitoringoneDragonflykeyex-change,withafixedpasswordandMACaddresses.Itisrepresentedbysuccessionoflines,correspondingtoeitheracalltothesyn-chronizationclock(kdf_sha256)ortol_getrandom.Thevaluefollowingeachlabelisanindicatorofthedelaysincethelastcalltothesynchronizationclock.AnexamplecanbefoundinAppen-dixB,correspondingtoatraceyieldingfouriterations.Atraceisacollectionofsamples,allcorrespondingtothesamepasswordandthesameMACaddress.4.3TraceInterpretationWealsodesignedascriptthatautomaticallyinterpretsourtracesandoutputsthemostprobableiterationinwhichtheprocessofpasswordconversionfirstsucceeds.ThetraceparserprocessisdescribedinListing3.Thecoreideaistofirstreducethenoisebyeliminatingallpoorlyformedsamples(whichcouldnotbeinterpretedanyway,oftenbecauseofsystemnoise).Then,eachsampleisprocessedindependently,contributingtothecreationofaglobaltracescore.Todoso,eachlineofasampleisread,anddependingonthecorrespondinglabel,itisprocessedasfollow:(i)ifthelabelisthesynchronizationclock,weincreasetheiterationcounterbyone;(ii)otherwise,thescoreofthecurrentiterationisincreasedbythedelayassociatedtothatline.Inthelattercase,ifthedelayislongenough(thethresholdmaybearchitecturespecific),wecanstoptheparsingofthatsampleandprocessthenextone.Onceeverysampleofatracehasbeenprocessed,thescoreofeachiterationcomesatanindicatorofthemostprobablesuccessfullyiteration.Sincefalsepositiveshavesevereconsequences,wechosetoeliminateanytracethatdoesnotyieldaclearresult.Insuchacase,thescriptraisesawarningtotheattackerforfuturemanualinterpretation.4.4ResultsWesummed-uptheresultsofourexperimentations,withdifferentnumberofsamplesforeachMACaddress,inFigure2.Withonlyonemeasurementperaddress,approximately70.5%ofthetracescanbeautomaticallyinterpreted(othershaveahighriskofmiss-prediction).However,theaccuracyofourpredictionisonly66%.Weneedtocollect5samplestoachieveanaccuracygreaterthan90%(with77%ofusabletraces).Weachieve99%accuracywithonly10measurements,withatraceusabilityof88%.1defparse_measures(measures):2score=[0foriinrange(k+1)]3forminmeasures:4ifis_malformed(m):5continue6#Incrementsscorewiththeobserveddelayateachiteration7parse_measure(m,score)89#Convertthescoreofeachiterationintofrequency10freq=[]11total_score=sum(score)12whilesum(score)!=0:13m=max(score)14freq.append((i,round(m∗100.0/total_score,2)))15res[res.index(m)]=01617#Raiseawarningifwearenotsureoftheresult18iffreq[0][1]−freq[1][1]curve.p25x_cand=KDF(seed,"SAEHuntingandPecking",curve.p)2627#res=1or0dependingwhetherx_candisvalidornot28res=is_quadradic_residue(curve,x_cand,qr,qnr)29const_time_select_bin(found,x,x_cand,x)30save=const_time_select(found,save,seed[−1]&0x01)3132#foundis0or0xffhereandresis0or1.BitwiseORofthem33#(withresconvertedto0/0xff)handlesthisinconstanttime.34found|=res∗0xff3536#saveisusedtochosethevalueofy37pwe=point_from_bin(curve,x,save)38returnpweListing4:Python-likepseudocodeofaconstanttimeversionofHuntingandPeckingonP256.160measurementsfortheRockyoudictionary,whileDragonbloodneeds580measurements.Roughlyspeaking,themeasurementsarecutdownbyatleast3.Moreover,ourattackrequirestovarytheMACaddresseslessoften(almosttwiceasfewer).Thus,ourworkperformsbetterinpractice,particularlyinacontextwherecache-basedmeasurementsarelimited.Ofcourse,wearguethatourresultscanbegeneralizedforotherimplementationssufferingfromthesametypeofvulnerability.5DISCUSSIONANDCONCLUSION5.1RecommendationsforMitigationsFollowingthedisclosureofDragonblood,severalmitigationshavebeenproposed[17,18]toreplacetheiterativehash-to-groupfunc-tionbyadeterministicfunction.Thiscountermeasuresuitsourrequirements.However,backwardcompatibilitymightbeare-quirementinindustry.Hence,wesuggesttouseabranch-freeimplementationoftheloopinordertoavoidanyresidualleakage.Weimplementedsuchmitigationsintoiwd(seeListing4),in-spiringourselvesfromhostapdpatch9.Weestimatedtheoverhead9https://w1.fi/security/2019-1/inducedbysuchcountermeasureusingtherdtscassemblyin-struction,whichoffersveryhighprecision.Wemade10,000mea-surementsforboththemitigatedderivationandtheoriginalone,whilevaryingthepassword.Weobservedanegligibleoverhead(1.4·10−9%onaverage).Thecodecomplexityisbarleyaffectedbyourchanges.Consideringtheattackimpactandthenegligibledownsideofthepatch,westronglyrecommenddeveloperstoin-cludeitintheirproducts.Followingourdiscoveries,bothiwdandFreeRADIUShassmoothlyintegratedourpatchintheircode.5.2DiscussionAftertheoriginalDragonbloodpublication,implementationsre-ceivedvariouspatches,anddroppedthesupportofsomecurves(mainlyBrainpoolcurves).However,themainsourceofvulnera-bilities,thehash-to-groupfunction,isstillunchanged,despitethestandardsupdate.Inspiteofproperbranch-freeimplementationsbeingpubliclyavailable,withanegligibleoverhead,mostimplementationsdidnotpatchthesecret-dependentcontrol-flowofthepasswordderivation.WebelievethelackofpatchisstronglyrelatedtothelackofProofofConceptdedicatedtospecificimplementations.Dragonbloodonlydescribestheattackforhostapdwhichhasbeenfixed.Wedemonstratedthatthisvulnerabilityhasmorepotentialthantheoriginalone,allowingtorecovermorebitsofinformationwithfewermeasurements.WeprovideafullProofofConceptofourvulnerabilityonIntel’simplementation,butwebelieveitcanextendtoothers(seeAppendixC).Ourapproachillustratestherisktouserswhencryptographicsoftwaredevelopersdismissawidelypotentialattack.Thisisunfortunatelytheprevailingapproachforsecurityvulnerabilities,butweshowthatforstandardslikeWPA3,thisapproachisfraughtwithdanger.Therefore,wehopethattheWi-FiAlliancewoulddroptheirad-hocmitigations,forconstant-timealgorithmsbydesignthatdonotrelyonsavvydeveloperstoprovidesecureimplementations.ThehistoryofPKCS#1v1.5(withtheBleichenbacherattacks)showsthatsuchapathisfullofrisks.Acknowledgments.DanielDeAlmeidaBragaisfundedbytheDirectionGénéraledel’Armement(PôledeRechercheCYBER).Wewouldliketothanktheanonymouspaperandartifactreviewersfortheirtimeandconstructivefeedbacks.REFERENCES[1]2016.IEEEStandardforInformationtechnology—TelecommunicationsandinformationexchangebetweensystemsLocalandmetropolitanareanet-works—Specificrequirements-Part11:WirelessLANMediumAccessControl(MAC)andPhysicalLayer(PHY)Specifications.IEEEStd802.11-2016(RevisionofIEEEStd802.11-2012)(2016),1–3534.[2]2019.TwovulnerabilitiesinRadiator:EAP-pwdauthenticationbypassandDoSwithcertainTLSconfigurations.https://open.com.au/OSC-SEC-2019-01.htmlAccessed:2020-09-03.[3]AlejandroCabreraAldaya,CesarPereidaGarcía,LuisManuelAlvarezTapia,andBillyBobBrumley.2019.Cache-TimingAttacksonRSAKeyGeneration.IACRTrans.Cryptogr.Hardw.Embed.Syst.2019,4(2019),213–242.[4]ThomasAllan,BillyBobBrumley,KatrinaE.Falkner,JoopvandePol,andYuvalYarom.2016.Amplifyingsidechannelsthroughperformancedegradation.InACSAC.ACM,422–435.[5]Wi-FiAlliance.2019.WPA3SecurityConsiderations.[6]DiegoF.Aranha,FelipeRodriguesNovaes,AkiraTakahashi,MehdiTibouchi,andYuvalYarom.2020.LadderLeak:BreakingECDSAWithLessThanOneBitOfNonceLeakage.IACRCryptol.ePrintArch.2020(2020),615.[7]JohnBellardoandStefanSavage.2003.802.11Denial-of-ServiceAttacks:RealVulnerabilitiesandPracticalSolutions.InUSENIXSecuritySymposium.USENIXACSAC 2020, December 7–11, 2020, Austin, USA
Daniel De Almeida Braga, Pierre-Alain Fouque, and Mohamed Sabt
[13] Scott Fluhrer. 2018. Re: [Cfrg] I-D for password-authenticated EAP method. https:
//mailarchive.ietf.org/arch/msg/cfrg/mGnSNL8QW_fuCTwcyvh8lY9Z5G0/
[14] Daniel Genkin, Luke Valenta, and Yuval Yarom. 2017. May the Fourth Be With You:
A Microarchitectural Side Channel Attack on Several Real-World Applications
of Curve25519. In ACM Conference on Computer and Communications Security.
ACM, 845–858.
[15] Dan Harkins. 2014. Addressing A Side-Channel Attack on SAE. https://mentor.
ieee.org/802.11/dcn/14/11-14-0640-01-000m-side-channel-attack.docx
[16] Dan Harkins. 2015. Dragonfly Key Exchange. RFC 7664. https://doi.org/10.
17487/RFC7664
[17] Dan Harkins. 2019. Finding PWE in Constant Time. https://mentor.ieee.org/802.
11/dcn/19/11-19-1173-08-000m-pwe-in-constant-time.docx
[18] D. Harkins. 2019. Improved Extensible Authentication Protocol Using Only a
https://tools.ietf.org/html/draft-
Password draft-harkins-eap-pwd-prime-00.
harkins-eap-pwd-prime-00
[19] Dan Harkins. 2019. Secure Password Ciphersuites for Transport Layer Security
(TLS). RFC 8492. https://doi.org/10.17487/RFC8492
[20] Thomas Icart. 2009. How to Hash into Elliptic Curves. In CRYPTO (Lecture Notes
in Computer Science), Vol. 5677. Springer, 303–316.
[21] Kevin M. Igoe. 2012. [Cfrg] Status of DragonFly. https://mailarchive.ietf.org/
arch/msg/cfrg/_BZEwEBBWhOPXn0Zw-cd3eSV6pY/
[22] Kevin M. Igoe. 2012. Re: [Cfrg] Status of DragonFly. https://mailarchive.ietf.
org/arch/msg/cfrg/LsFX5Qqw53dTUmSsUOooLca5FHg/
[23] Intel Corporation. 2016. Intel® 64 and IA-32 Architectures Optimization Refer-
ence Manual.
[24] Dennis Kügler. 2010. Re: [IPsec] PAKE selection: SPSK. https://mailarchive.ietf.
org/arch/msg/ipsec/NEicYFDYJYcQuNdknY0etLyfITA/
[25] Cubrilovic Nik. 2009. RockYou Hack: From Bad To Worse. https://techcrunch.
com/2009/12/14/rockyou-hack-security-myspace-facebook-passwords/
[26] Nikolai Tschacher. 2019. Model Based fuzzing of the WPA3 Dragonfly Handshake.
Master’s thesis. Institute for Computer Science, Humboldt University, Berlin,
Germany.
[27] NVlabs. 2016. XMP - CUDA accelerated(X) Multi-Precision library.
https:
//github.com/NVlabs/xmp
[28] Yossef Oren, Vasileios P. Kemerlis, Simha Sethumadhavan, and Angelos D.
Keromytis. 2015. The Spy in the Sandbox: Practical Cache Attacks in JavaScript
and their Implications. In ACM Conference on Computer and Communications
Security. ACM, 1406–1418.
[29] Trevor Perrin. 2013. [TLS] Review of Dragonfly PAKE. https://mailarchive.ietf.
org/arch/msg/tls/A_SfHI4BsdAi4miklBs3TvUbu-Y/
[30] Peter Pessl, Leon Groot Bruinderink, and Yuval Yarom. 2017. To BLISS-B or not
to be: Attacking strongSwan’s Implementation of Post-Quantum Signatures. In
ACM Conference on Computer and Communications Security. ACM, 1843–1855.
[31] Defuse Security. [n.d.]. CrackStation’s Password Cracking Dictionary (Human
https://crackstation.net/crackstation-wordlist-password-
Passwords Only.
cracking-dictionary.htm
[32] Joop van de Pol, Nigel P. Smart, and Yuval Yarom. 2015. Just a Little Bit More. In
CT-RSA (Lecture Notes in Computer Science), Vol. 9048. Springer, 3–21.
[33] Mathy Vanhoef and Frank Piessens. 2014. Advanced Wi-Fi attacks using com-
modity hardware. In ACSAC. ACM, 256–265.
[34] Mathy Vanhoef and Frank Piessens. 2017. Key Reinstallation Attacks: Forcing
Nonce Reuse in WPA2. In ACM Conference on Computer and Communications
Security. ACM, 1313–1328.
[35] Mathy Vanhoef and Eyal Ronen. 2020. Dragonblood: Analyzing the Dragonfly
Handshake of WPA3 and EAP-pwd. In IEEE Symposium on Security and Privacy.
IEEE, 517–533.
[36] Yuval Yarom. 2016. Mastik: A Micro-Architectural Side-Channel Toolkit. https:
//cs.adelaide.edu.au/~yval/Mastik/
[37] Yuval Yarom and Naomi Benger. 2014. Recovering OpenSSL ECDSA Nonces
Using the FLUSH+RELOAD Cache Side-channel Attack. IACR Cryptol. ePrint
Arch. 2014 (2014), 140.
[38] Yuval Yarom and Katrina Falkner. 2014. FLUSH+RELOAD: A High Resolu-
tion, Low Noise, L3 Cache Side-Channel Attack. In USENIX Security Symposium.
USENIX Association, 719–732.
[39] Yuval Yarom, Daniel Genkin, and Nadia Heninger. 2016. CacheBleed: A Timing
Attack on OpenSSL Constant Time RSA. In CHES (Lecture Notes in Computer
Science), Vol. 9813. Springer, 346–367.
[40] Glen Zorn and Dan Harkins. 2010. Extensible Authentication Protocol (EAP)
Authentication Using Only a Password. RFC 5931. https://doi.org/10.17487/
RFC5931
A PASSWORD REQUIRING MORE THAN 20
ITERATIONS ON IWD
noted at the beginning of each list; the needed number of iterations
is at the end of the line.
An extended list can be found in our gitlab repository10.
## 992606B4AD9F FFF23027CB34 ##
RAJARATNAM 21
RA-KLEINENBERG 22
ellochika 21
VILIFYINGLY 24
believeingod1 24
BELLABOOBABE 25
PRERRAFAELISTA 21
DOGYLOVE1 21
macarthurreviews 23
AMERICANHOSPICE 21
CHALLNENGE 22
HAUNTEDEP 21
Nibbler112 21
0800581064 22