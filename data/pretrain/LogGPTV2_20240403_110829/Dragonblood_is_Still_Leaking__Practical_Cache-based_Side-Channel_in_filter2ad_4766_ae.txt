### Improved Text

When the script is unable to decide between two adjacent values, such as five and six, it can be inferred that more than four iterations are required for password conversion. 

These results highlight the improvements of our attack compared to Dragonblood. In [35], at least 20 samples per MAC address were needed to achieve a 99% success rate, whereas our attack requires only 10 samples. Additionally, each successfully interpreted trace in our attack provides at least as much information, and on average, roughly twice as much (see Section 3.5). Consequently, our approach significantly reduces the number of required measurements or samples needed to prune all incorrect passwords from a given dictionary. For example, our method requires 160 measurements for the RockYou dictionary, while Dragonblood needs 580. This represents a reduction of at least 3.5 times. Furthermore, our attack necessitates changing MAC addresses less frequently (almost half as often), making it more practical, especially in scenarios where cache-based measurements are limited. We argue that our findings can be generalized to other implementations with similar vulnerabilities.

**ACSAC 2020, December 7–11, 2020, Austin, USA**
**Authors: Daniel De Almeida Braga, Pierre-Alain Fouque, and Mohamed Sabt**

### 4.2 Trace Collection
Once both the client and the Access Point (AP) were set up to use a password randomly drawn from a dictionary, we launched the spy process to monitor well-chosen memory lines (see Section 3.3). After each connection, we disconnected the client and reconnected it several times to acquire multiple samples. This step emulates a de-authentication attack aimed at collecting multiple samples with the same MAC addresses. For each password, we repeated this process using 10 different MAC addresses, allowing us to acquire up to 10 independent traces for the same password. For each MAC address, we collected 15 samples. Our observations were consistently obtained by testing 80 passwords to evaluate the effectiveness and reliability of our trace collection techniques. A sample is defined as the result of monitoring one Dragonfly key exchange, with a fixed password and MAC addresses. It is represented by a sequence of lines, each corresponding to either a call to the synchronization clock (kdf_sha256) or l_getrandom. The value following each label indicates the delay since the last call to the synchronization clock. An example can be found in Appendix B, which corresponds to a trace yielding four iterations. A trace is a collection of samples, all corresponding to the same password and MAC address.

### 4.3 Trace Interpretation
We also designed a script that automatically interprets our traces and outputs the most probable iteration in which the password conversion process first succeeds. The trace parser process is described in Listing 3. The core idea is to first reduce noise by eliminating poorly formed samples, which cannot be interpreted due to system noise. Each sample is then processed independently, contributing to the creation of a global trace score. To do this, each line of a sample is read, and depending on the corresponding label, it is processed as follows:
- If the label is the synchronization clock, the iteration counter is incremented by one.
- Otherwise, the score of the current iteration is increased by the delay associated with that line. If the delay is long enough (the threshold may be architecture-specific), the parsing of that sample is stopped, and the next one is processed.

Once all samples in a trace have been processed, the score of each iteration serves as an indicator of the most probable successful iteration. Since false positives have severe consequences, we chose to eliminate any trace that does not yield a clear result. In such cases, the script raises a warning for future manual interpretation.

### 4.4 Results
We summarized the results of our experiments, with different numbers of samples per MAC address, in Figure 2. With only one measurement per address, approximately 70.5% of the traces can be automatically interpreted (others have a high risk of misprediction). However, the accuracy of our prediction is only 66%. We need to collect 5 samples to achieve an accuracy greater than 90% (with 77% of usable traces). We achieve 99% accuracy with only 10 measurements, with a trace usability of 88%.

```python
def parse_measures(measures):
    score = [0 for _ in range(k+1)]
    for m in measures:
        if is_malformed(m):
            continue
        # Increment score with the observed delay at each iteration
        parse_measure(m, score)
    
    # Convert the score of each iteration into frequency
    freq = []
    total_score = sum(score)
    while sum(score) != 0:
        m = max(score)
        freq.append((i, round(m * 100.0 / total_score, 2)))
        res[res.index(m)] = 0
    
    # Raise a warning if we are not sure of the result
    if freq[0][1] - freq[1][1] < threshold:
        raise Warning("Unclear result, manual interpretation required")
```

### 5. Discussion and Conclusion

#### 5.1 Recommendations for Mitigations
Following the disclosure of Dragonblood, several mitigations have been proposed [17, 18] to replace the iterative hash-to-group function with a deterministic function. This countermeasure suits our requirements. However, backward compatibility might be a requirement in industry. Hence, we suggest using a branch-free implementation of the loop to avoid any residual leakage. We implemented such mitigations into iwd (see Listing 4), inspired by the hostapd patch. We estimated the overhead induced by such a countermeasure using the rdtsc assembly instruction, which offers very high precision. We made 10,000 measurements for both the mitigated derivation and the original one, while varying the password. We observed a negligible overhead (1.4·10^-9% on average). The code complexity is barely affected by our changes. Considering the impact of the attack and the negligible downside of the patch, we strongly recommend developers to include it in their products. Following our discoveries, both iwd and FreeRADIUS have smoothly integrated our patch into their code.

#### 5.2 Discussion
After the original Dragonblood publication, implementations received various patches and dropped support for some curves (mainly Brainpool curves). However, the main source of vulnerabilities, the hash-to-group function, remains unchanged, despite standards updates. Despite proper branch-free implementations being publicly available with negligible overhead, most implementations did not patch the secret-dependent control flow of the password derivation. We believe the lack of patches is strongly related to the lack of Proof of Concept dedicated to specific implementations. Dragonblood only describes the attack for hostapd, which has been fixed. We demonstrated that this vulnerability has more potential than the original, allowing the recovery of more bits of information with fewer measurements. We provide a full Proof of Concept of our vulnerability on Intel’s implementation, but we believe it can extend to others (see Appendix C). Our approach illustrates the risk to users when cryptographic software developers dismiss widely potential attacks. This is unfortunately the prevailing approach for security vulnerabilities, but we show that for standards like WPA3, this approach is fraught with danger. Therefore, we hope that the Wi-Fi Alliance will drop their ad-hoc mitigations and adopt constant-time algorithms by design that do not rely on savvy developers to provide secure implementations. The history of PKCS#1v1.5 (with the Bleichenbacher attacks) shows that such a path is full of risks.

### Acknowledgments
Daniel De Almeida Braga is funded by the Direction Générale de l’Armement (Pôle de Recherche CYBER). We would like to thank the anonymous paper and artifact reviewers for their time and constructive feedback.

### References
[1] IEEE Standard for Information technology—Telecommunications and information exchange between systems Local and metropolitan area networks—Specific requirements-Part 11: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications. IEEE Std 802.11-2016 (Revision of IEEE Std 802.11-2012) (2016), 1–3534.
[2] Two vulnerabilities in Radiator: EAP-pwd authentication bypass and DoS with certain TLS configurations. https://open.com.au/OSC-SEC-2019-01.html. Accessed: 2020-09-03.
[3] Alejandro Cabrera Aldaya, Cesar Pereida García, Luis Manuel Alvarez Tapia, and Billy Bob Brumley. 2019. Cache-Timing Attacks on RSA Key Generation. IACR Trans. Cryptogr. Hardw. Embed. Syst. 2019, 4 (2019), 213–242.
[4] Thomas Allan, Billy Bob Brumley, Katrina E. Falkner, Joop van de Pol, and Yuval Yarom. 2016. Amplifying side channels through performance degradation. In ACSAC. ACM, 422–435.
[5] Wi-Fi Alliance. 2019. WPA3 Security Considerations.
[6] Diego F. Aranha, Felipe Rodrigues Novaes, Akira Takahashi, Mehdi Tibouchi, and Yuval Yarom. 2020. Ladder Leak: Breaking ECDSA With Less Than One Bit Of Nonce Leakage. IACR Cryptol. ePrint Arch. 2020 (2020), 615.
[7] John Bellardo and Stefan Savage. 2003. 802.11 Denial-of-Service Attacks: Real Vulnerabilities and Practical Solutions. In USENIX Security Symposium. USENIX.
...
[35] Mathy Vanhoef and Eyal Ronen. 2020. Dragonblood: Analyzing the Dragonfly Handshake of WPA3 and EAP-pwd. In IEEE Symposium on Security and Privacy. IEEE, 517–533.
...

### A Password Requiring More Than 20 Iterations on iwd
The following list includes passwords requiring more than 20 iterations on iwd. The number of iterations is noted at the end of each line. An extended list can be found in our GitLab repository.

- **RAJARATNAM**: 21
- **RA-KLEINENBERG**: 22
- **ellochika**: 21
- **VILIFYINGLY**: 24
- **believeingod1**: 24
- **BELLABOOBABE**: 25
- **PRERRAFAELISTA**: 21
- **DOGYLOVE1**: 21
- **macarthurreviews**: 23
- **AMERICANHOSPICE**: 21
- **CHALLNENGE**: 22
- **HAUNTEDEP**: 21
- **Nibbler112**: 21
- **0800581064**: 22