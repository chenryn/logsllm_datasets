```
4.  继续重新启动 Docker 服务，以便`dockerd`守护程序可以监听来自外部世界的通信:
```
 $ sudo systemctl restart docker
```
5.  现在，我们可以从与 Docker 主机有网络连接的任何系统连接到 Docker 引擎 API。为了演示这种远程连接，首先让我们使用我们最喜欢的`curl`命令来获取 Docker 服务器版本，如下所示:
![](img/aca6e093-40e1-4cc5-971e-869a923e5e28.png)
让我们也使用 Docker 客户端演示远程连接，如下所示:
![](img/cf93c904-d77e-42e3-adab-47a31e247350.png)
显然，客户端运行在 windows 机器上，服务器运行在 Linux 上。
# 它是如何工作的...
在前面的命令中，我们配置了 Docker 守护程序，以监听 Docker 主机中所有可用网络接口上的 TCP 端口`2375`上的客户端连接。通过这一配置更改，客户端可以使用 Docker 主机上的任何网络接口连接到 Docker 守护程序。
# 还有更多...
*   在这个方法中，我们配置 Docker 守护程序使用明文或未加密的传输层进行通信。此外，Docker 守护程序可以从任何具有网络连接的系统接收消息。由于 Docker 以 root 身份运行，因此与守护程序的开放式连接存在巨大的安全风险。因此，仅在受限网络中使用此模型进行远程连接。否则，使用**传输层安全性** ( **TLS** )保护 Docker 守护程序和客户端之间的通信，如本章后面所述。
*   之前，我们使用了`docker`命令的`-H`选项来指定远程 Docker 守护程序的地址。当我们不得不对远程 Docker 引擎运行多个命令时，这是违背直觉的。在这种情况下，我们可以使用环境变量`DOCKER_HOST`，来设置远程地址，如下所示:
```
    $ export DOCKER_HOST=tcp://dockerhost.example.com:2375
```
一旦我们配置了环境变量`DOCKER_HOST`，Docker 客户端将使用该地址发送我们的请求。因此，默认情况下，该会话中的所有未来`docker`命令都将转到远程 Docker 主机。
# 请参见
Docker 网站上的文档可以在[https://docs . Docker . com/engine/reference/command line/dockerd/# daemon-socket-option 上找到。](https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option)
# 保护 Docker 守护进程的远程连接
在本章的前面，我们看到了如何配置 Docker 守护程序来接受远程连接。然而，使用我们遵循的方法，任何人都可以连接到我们的 Docker 守护程序。我们可以确保与传输层安全性(http://en.wikipedia.org/wiki/Transport_Layer_Security)的连接。
我们可以通过使用现有的**证书颁发机构** ( **CA** )或者通过创建我们自己的来配置 TLS。为简单起见，我们将创建自己的，不建议用于生产。对于这个例子，我们假设运行 Docker 守护程序的主机是`dockerhost.example.com`。
# 准备好
确保安装了`openssl`库。
# 怎么做...
1.  在您的主机上创建一个目录，在其中放置我们的 CA 和其他相关文件:
```
         $ mkdir -p /etc/docker/keys
         $ cd /etc/docker/keys
```
2.  创建证书颁发机构私钥和公钥:
```
        $ openssl genrsa -aes256 -out ca-key.pem 4096 
        $ openssl req -new -x509 -days 365 -key ca-key.pem \
    -sha256 -out ca.pem 
```
![](img/3d41ce37-8d85-423a-83b5-762f511bd8c0.png)
3.  现在，让我们创建服务器密钥和证书签名请求。确保通用名称与 Docker 守护程序系统主机名匹配。在我们的情况下，是`dockerhost.example.com`:
```
    $ openssl genrsa -out server-key.pem 4096 
    $ openssl req -subj "/CN=dockerhost.example.com" \
    -new -key server-key.pem -out server.csr 
```
![](img/60608e41-8c20-4fe8-b60f-0b441615609a.png)
4.  客户端可以使用 Docker 主机的域名或 IP 地址连接到 Docker 守护程序。因此，必须将域名和 IP 地址作为扩展名制作到证书中。此外，添加 Docker 守护程序密钥的扩展使用属性，以便仅用于服务器身份验证。这两条信息都在`extfile.cnf`中捕获，如下所示:
![](img/bd0f6ca5-e08e-420f-8a42-d7f94c176e24.png)
这里，`192.168.33.101`和`10.0.2.15`是两个网络接口的 IP 地址，`127.0.0.1`是环回地址。
5.  继续生成密钥:
```
        $ openssl x509 -req -days 365 -sha256 -in server.csr \
                    -CA ca.pem -CAkey ca-key.pem -CAcreateserial \
                   -out server-cert.pem -extfile extfile.cnf  
```
![](img/dbe6b3b2-560e-4408-9ab3-92d99dca5480.png)
6.  对于客户端身份验证，创建客户端密钥和证书签名请求:
```
    $ openssl genrsa -out key.pem 4096 
    $ openssl req -subj '/CN=client' -new -key key.pem \
    -out client.csr 
```
![](img/321bc425-f9a7-4241-bfe5-1ed97bd72dfb.png)
7.  要使密钥适合客户端身份验证，请创建一个扩展配置文件并对公钥进行签名:
```
    $ echo extendedKeyUsage = clientAuth > client-extfile.cnf 
    $ openssl x509 -req -days 365 -sha256 -in client.csr \
                   -CA ca.pem -CAkey ca-key.pem -CAcreateserial \
                   -out cert.pem -extfile client-extfile.cnf
```
![](img/ee53bd8f-ed13-427f-bda1-a790559ecc91.png)
8.  生成`cert.pem`和`server-cert.pem`后，我们可以安全地删除两个证书签名请求:
```
        $ rm -rf client.csr server.csr 
```
9.  为了保护密钥不被意外损坏，让我们删除这些密钥文件的写权限:`ca-key.pem`、`key.pem`和`server-key.pem`。此外，让我们将这些文件的读取权限限制为`root`:
```
        $ chmod 0400 ca-key.pem key.pem server-key.pem
```
证书文件`ca.pem`、`server-cert.pem`和`cert.pem`需要更广泛的读访问权限，所以让我们给所有这些证书文件读访问权限，如下所示:
```
 $ chmod 0444 ca.pem server-cert.pem cert.pem
```
10.  如果守护程序正在使用`systemctl stop docker`命令在`dockerhost.example.com`上运行，则停止守护程序。然后，从`/etc/docker/keys`手动启动 Docker 守护程序:
```
    $ dockerd --tlsverify \ 
              --tlscacert=ca.pem \
              --tlscert=server-cert.pem \
              --tlskey=server-key.pem \
    -H=0.0.0.0:2376 
```
11.  从另一个终端，转到`/etc/docker/keys`。运行以下命令连接到 Docker 守护程序:
```
        $ cd /etc/docker/keys
        $ docker --tlsverify \
           --tlscacert=ca.pem \
           --tlscert=cert.pem \
           --tlskey=key.pem \
    -H=127.0.0.1:2376 version 
```
Docker 客户端能够通过 TLS 与 Docker 守护进程无缝连接，并获得服务器版本。
# 它是如何工作的...
一旦我们将 Docker 守护程序配置为使用 TLS 作为传输，它只接受客户端的安全 TLS 连接，并满足客户端的请求。
# 还有更多...
在本食谱中，我们使用`docker`命令的`--tlscacert`、`--tlscert`和`--tlskey`选项来连接到启用了 TLS 的 Docker 守护程序。使用如此长的选项列表来调用`docker`命令是相当笨拙的。但是，我们可以通过执行以下操作来解决这个问题:
1.  将`ca.pem`、`cert.pem`和`key.pem`文件复制到用户的`$HOME/.docker`目录。
2.  使用`chown`命令修改该用户的文件所有权。
3.  将`DOCKER_HOST`设置为守护程序地址，如下所示:
```
          $ export DOCKER_HOST=tcp://127.0.0.1:2376    
```
4.  将`DOCKER_TLS_VERIFY`设置为`1`，如下图:
```
          $ export DOCKER_TLS_VERIFY=1    
```
现在，您可以像在 Unix 套接字上运行一样运行`docker`命令。
在这个食谱中，我们从 shell 提示符启动了 Docker 守护程序，这对测试很有好处。但是，必须将 Docker 守护程序配置为使用 Systemd 启动。您可以通过编辑 Docker 服务的单元文件来实现这一点，如*为远程连接*配置 Docker 守护程序配方中所述，但`ExecStart`有以下例外:
```
ExecStart=/usr/bin/dockerd \
             --tlsverify \
             --tlscacert=/etc/docker/keys/ca.pem \
             --tlscert=/etc/docker/keys/server-cert.pem \
             --tlskey=/etc/docker/keys/server-key.pem \
             -H=0.0.0.0:2376
```
在这里，我们将命令分成多行，以便于理解。但是，它必须在单位文件中的一行中。
*   `curl`命令还可以安全地连接到启用 TLS 的 Docker 守护程序，如下所示:
```
$ curl --cacert ${HOME}/.docker/ca.pem \
--cert ${HOME}/.docker/cert.pem \
--key ${HOME}/.docker/key.pem \
https://127.0.0.1:2376/version
```
# 请参见
*   Docker 网站上的文档:[https://docs.docker.com/engine/security/https/](https://docs.docker.com/engine/security/https/)