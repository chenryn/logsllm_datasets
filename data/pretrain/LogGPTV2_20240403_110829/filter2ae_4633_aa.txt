### 一、漏洞概述
1000 Guess是一款基于以太坊的随机数竞猜游戏。 1000
Guess中的`simplelottery`智能合约实现的`‘_addguess’`函数存在安全漏洞，该漏洞源于程序使用公共可读取的变量生成随机值。攻击者可利用该漏洞一直获取奖励。
下面为CVE编号的详细内容。
`1000
Guess`作为以太坊的精彩读博游戏被爆出存在存储随机数预测漏洞。此合约通过生成随机数来预测获得大奖的钱包地址。在生成随机数的过程中，该合约通过sha256计算合约中的变量与当前数据块的信息。然而根据区块链的概念，链上的信息均是公开的，所有用户均可以获得。于是攻击者可以对此进行获取并进行投机取巧的操作。在本文中我将对合约进行详细介绍，并对此合约漏洞进行复现操作。
### 二、合约分析
合约代码如下地址：
    /**
     * Source Code first verified at https://etherscan.io on Saturday, November 25, 2017
     (UTC) */
    pragma solidity ^0.4.11;
    contract simplelottery {
        enum State { Started, Locked }
        State public state = State.Started;
        struct Guess{
          address addr;
          //uint    guess;
        }
        uint arraysize=1000;
        uint constant maxguess=1000000;
        uint bettingprice = 1 ether;
        Guess[1000] guesses;
        uint    numguesses = 0;
        bytes32 curhash = '';
        uint _gameindex = 1;
        uint _starttime = 0;
        modifier inState(State _state) {
          require(state == _state);
          _;
        }
        address developer = 0x0;
        address _winner   = 0x0;
        event SentPrizeToWinner(address winner, uint money, uint gameindex, uint lotterynumber, uint starttime, uint finishtime);
        event SentDeveloperFee(uint amount, uint balance);
        function simplelottery() 
        {
          if(developer==address(0)){
            developer = msg.sender;
            state = State.Started;
            _starttime = block.timestamp;
          }
        }
        function setBettingCondition(uint _contenders, uint _bettingprice)
        {
          if(msg.sender != developer)
            return;
          arraysize  = _contenders;
          if(arraysize>1000)
            arraysize = 1000;
          bettingprice = _bettingprice;
        }
        function findWinner(uint value)
        {
          uint i = value % numguesses;
          _winner = guesses[i].addr;
        }
          function getMaxContenders() constant returns(uint){
          return arraysize;
        }
        function getBettingPrice() constant returns(uint){
          return bettingprice;
        }
        function getDeveloperAddress() constant returns(address)
        {
          return developer;
        }
        function getDeveloperFee() constant returns(uint)
        {
          uint developerfee = this.balance/100;
          return developerfee;
        }
        function getBalance() constant returns(uint)
        {
           return this.balance;
        }
        function getLotteryMoney() constant returns(uint)
        {
          uint developerfee = getDeveloperFee();
          uint prize = (this.balance - developerfee);
          return prize;
        }
        function getBettingStatus()
          constant
          returns (uint, uint, uint, uint, uint, uint, uint)
        {
          return ((uint)(state), _gameindex, _starttime, numguesses, getLotteryMoney(), this.balance, bettingprice);
        }
        function finish()
        {
          if(msg.sender != developer)
            return;
          _finish();
        }
        function _finish() private
        {
          state = State.Locked;
          uint block_timestamp = block.timestamp;
          uint lotterynumber = (uint(curhash)+block_timestamp)%(maxguess+1);
          findWinner(lotterynumber);
          uint prize = getLotteryMoney();
          uint numwinners = 1;
          uint remain = this.balance - (prize*numwinners);
          _winner.transfer(prize);
          SentPrizeToWinner(_winner, prize, _gameindex, lotterynumber, _starttime, block_timestamp);
          // give delveoper the money left behind
          developer.transfer(remain); 
          SentDeveloperFee(remain, this.balance);
          numguesses = 0;
          _gameindex++;
          state = State.Started;
          _starttime = block.timestamp;
        }
        function () payable
        {
            _addguess();
        }
        function addguess() 
          inState(State.Started)
          payable
        {
          _addguess();
        }
        function _addguess() private
          inState(State.Started)
        {
          require(msg.value >= bettingprice);
          curhash = sha256(block.timestamp, block.coinbase, block.difficulty, curhash);
          if((uint)(numguesses+1)=arraysize){
              _finish();
            }
          }
        }
    }
首先介绍合约涉及的变量情况。根据合约定义，首先定义`state`枚举变量，用以控制合约是否停止运行。之后定义Guess结构体与相应数组，用以保存参与游戏的用户情况。其次是`arraysize`，其为具体的门限值，在后文中我们能知道当参与用户量超过此参数后便触发竞猜函数。`bettingprice`为下赌最小代币量。后四个参数为生成随机数所需的参数。
下面函数为构造函数，其中定义了建立者地址、当前合约的运行状态以及当前的时间戳信息。
    function simplelottery() 
        {
          if(developer==address(0)){
            developer = msg.sender;
            state = State.Started;
            _starttime = block.timestamp;
          }
        }
下面函数作用是用于修改该合约竞猜函数触发门限值与竞猜最小代币量。
    function setBettingCondition(uint _contenders, uint _bettingprice)
        {
          if(msg.sender != developer)
            return;
          arraysize  = _contenders;
          if(arraysize>1000)
            arraysize = 1000;