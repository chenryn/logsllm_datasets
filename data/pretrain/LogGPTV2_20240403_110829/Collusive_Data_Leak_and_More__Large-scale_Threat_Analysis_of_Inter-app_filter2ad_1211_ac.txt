implicit_src_sink
implict_nosrc_sink
implicit_mix2
implicit_mix1
implicit_src_sink
impliict_nosrc_sink
implicit_action
implicit_action
implicit_nosrc_sink
implicit_action
implicit_action
implicit_mix1
implicit_mix2
implicit_src_nosink
implicit_src_nosink
implicit_src_nosink
impilicit_src_sink
impilicit_src_sink
DroidBench (IccTA branch)
2
2
2
Sum, Precision, Recall, and F measure
Incorrect app pairings
True positive ( (cid:2)(cid:2)), higher is better
False positive (*), lower is better
False negative ((cid:2)), lower is better
Precision, p = (cid:2)(cid:2)/( (cid:2)(cid:2)+*)
Recall, r = (cid:2)(cid:2)/( (cid:2)(cid:2)+(cid:2))
F-measure = 2pr/(p+r)
 Since we were unable to execute IccTA+ApkCombiner on most of the pairs, it’s precision value is misleading and does not reﬂect it’s actual performance.
3
0‡
20
100%‡
12.5%
0.22
11
323
12
3.3%
45.8%
0.06
22
0
2
100%
91.2%
0.95
startActivity1_sink
startService1_sink
sendbroadcast1_sink
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)
1
2
2
2
3
1
2
3
2
1
1
1
1
1
1
1
1
1
1
1
1
3
3
1
1
1
1
1
1
1
1
1
1
2
1
1
1
1
1
Incorrect app pairings
ICC-Bench
sender apps may appear in ICCs of multiple categories. We then run
DIALDroid on Dataset II (Google Play apps). For each threat type,
we summarize our ﬁndings in Table 3. Because Google Play market
is known to deploy app vetting mechanisms (e.g., Google Bouncer),
it is reasonable to assume the apps in Dataset II have passed some
single-app screenings.
We found no collusive data leaks or privilege escalations based
on explicit intents, i.e., no inter-app ICCs of Threat Types I, II,
III. This result suggests that explicit intent based collusion is very
rare. (They might exist, but are out of the scope of our dataset.)
Therefore, collusion analysis needs to be focused on implicit intents
based ICCs, as opposed to explicit intents.
For inter-app ICCs via implicit intents, we distinguish three cases:
both collusive data leak and privilege escalation in Threat IV, priv-
ilege escalation without collusive data leak in Threat Type V, and
collusive data leak without privilege escalation in Threat VI. We
highlight some key results next. The most severe threat type is
Threat IV, where collusive data leak and privilege escalation occur
simultaneously. We found 16,712 app pairs originating from 33
sender apps that exhibit both collusive data leak and privilege esca-
lation behaviors via implicit intents. Because of the sensitive data
from the sender app is leaked externally by the receiver app and the
receiver app is under the disguise of having fewer permissions, apps
in Threat IV is the most serious.
It is not surprising that we observe a huge number (1,785,102) of
inter-app ICC channels with the privilege escalation threat in Threat
V. Some app pairs may have multiple ICC channels between them.
Interestingly, these 1,785,102 ICCs with privilege escalation threat
originate from only 62 problematic sender apps.
For Threat Type VI (collusive data leak without privilege esca-
lation), we found 6,783 such app pairs originating from 21 sender
apps. That is, these app pairs exhibit collusive data leak behaviors;
however, the receiver apps do not gain new permission privileges,
i.e., the receiver apps have the authorization to access the received
data. In addition, we found that a large number (20) of sender apps
in Threat Type VI are also sender apps in Threat Type IV. We per-
formed case studies for each of the Threat Types IV, V, and VI in
Section 4.3. Some cases in Threat Type VI suggest that the collusive
data leaks are unintentional.
Cases with HTTP and SMS Sinks: We want to identify the collu-
sive data leak cases (of Threat Types IV or VI) that exﬁltrate the
sensitive information to remote destinations. We recompute the
results with a small set of relevant sensitive sink methods, namely
java.net.URL, android.telephony.SmsManager, and
org.apache.http.HttpResponse. For Threat Type IV, we
found 325 problematic app pairs with 16 distinct sender apps and 32
distinct receiver apps. There are a total of 1,054 Type IV ICCs. For
Threat Type VI, the numbers are smaller. We found 19 pairs, with
Table 3: Summary of problematic inter-app ICC channels in each threat category. Sender apps and receiver apps are from Google Play Market.
All the ICC channels shown are sensitive with ICC exit leaks in the sender apps (as deﬁned in Section 2). Privilege escalation and collusive
data leak are deﬁned in Section 2.
Threat
Type
I
II
III
IV
V
VI
Categorization
Collusive
Data Leak
Privilege
Escalation
Yes
No
Yes
Yes
No
Yes
Yes
Yes
No
Yes
Yes
No
Intent
Type
Explicit
Explicit
Explicit
Implicit
Implicit
Implicit
# of Distinct
Source App
0
0
0
33
62
21
Results
# of Distinct
Receiver App
0
0
0
1,792
44,514
1,040
Total ICC
Channels
0
0
0
77,104
1,785,102
34,745
Total
App Pairs
0
0
0
16,712
1,032,321
6,783
12 senders and 3 receivers, and a total of 63 problematic ICCs. Our
case study in Section 4.3 gives an example SMS-based collusive
data leak.
Same-developer Privilege Escalations: We found 200 inter-app
ICCs with same-developer privilege escalation. Same developer
refers to that the sender and receiver apps have the same developer
name. All such cases belong to Threat Type V and are related
to location permissions (both ﬁne and coarse). 194 ICCs appear
somewhat benign, as only the country name (getCountry())
is involved. However, the other 6 privilege escalation ICCs ap-
pear more serious. They involve 3 pairs of apps (1 pair from
Alamex Ltd and 2 pairs from NexTag Mobile) and speciﬁc locations
(getLastKnowLocation()). Our case study in Section 4.3
gives an example of the same-developer privilege escalation cases.
4.3 Case Studies
Threat TYPE IV [escalation w/ collusive data leak]
1) com.ppgps.lite→de.ub0r.android.websms. The
source app provides the real-time ﬂight
information to the
pilots of paramotor, paraglider, glider or ultra light planes.
com.ppgps.PPGpSActivity retrieves a user’s location (i.e.,
getLastKnownLocation) and sends it via an implicit in-
tent (action = android.intent.action.VIEW, Mime-Type=
vnd.android-dir/mms-sms). The sink app lets a user
send free or low-cost SMS messages via various web services.
de.ub0r.android.websms.WebSMS deﬁnes an intent-ﬁlter
to accept the above intent. Upon receiving the intent, the WebSMS
activity retrieves and parses the data sent via sms_body ﬁeld and
leaks it via SMS to a phone number. Since the sink app does not
have the permission to access location, it leads to both privilege
escalation and collusive data leak.
com.codalata.craigslistchecker→qubecad.-
2)
droidtocad. The source app helps users search craiglist
worldwide. com.codalata.craigslistchecker retrieves
(i.e., getSimSerialNumber, permis-
SIM serial number
=android.permission.READ_PHONE_STATE)
sion
implicit
and
(action=
intent
android.intent.action.SEND,
Mime-Type=plain-
/text).
The sink app is a location recording app.
qubecad.droidtocad.activities.AddDocument-
Activity deﬁnes an intent-ﬁlter to accept the above intent. Upon
receiving the intent, the AddDocumentActivity activity retrieves and
parses the data sent via android.intent.extra.TEXT ﬁeld
and leaks it to a log. Since the sink app does not have permission
to access phone state, it leads to both a privilege escalation and a
collusion.
Threat TYPE V [escalation w/o collusive data leak]
1) Same developer: com.nextag.android→com.thingbuzz.
Both apps are developed by the Nextag Mobile.
The
e-commerce
sender
app compares price
across different
sends
via
sends
implicit
intent
implicit
intent
sends
that
via
an
receiver
that
via
an
the
user’s
permission
getLastKnownLocation,
com.nextag.android retrieves
sites.
location(i.e.,
=android.permission.ACCESS_FINE_LOCATION)
=
and
(action
android.intent.action.MAIN, category =android.-
intent.category.INFO/ android.intent.-
category.LAUNCHER). The receiver app, which provides
shopping advice to users, deﬁnes an intent-ﬁlter to accept the above
intent. However, com.thingbuzz does not have the permission
to access user’s location, this ICC communication leads to escalated
privileges.
2) Different developers: com.biganiseed.ladder.trial
→ ee.showm.
The sender app provides a VPN connec-
tion. com.biganiseed.ladder.trial retrieves network
information (i.e., getActiveNetworkInfo,
permission
=android.permission.ACCESS_NETWORK_STATE)
=
and
(action
android.intent.action.SENDTO). The
app,
which controls EE TV, deﬁnes an intent-ﬁlter to accept the above
intent. However, ee.showm does not have the permission to
access network information, this ICC communication leads to
escalated privileges.
Threat TYPE VI [collusive data leak w/o escalation]
com.ccmass.fotoalbumgpslite→com.ventri.cake-
photos
.retrica.
taken.
based
on
com.ccmass.fotoalbumgpslite retrieves user’s
loca-
tion (i.e., getLatitude and getLongtitude, permission
=android.permission.ACCESS_FINE_LOCATION)
and
=
(action
android.media.action.IMAGE_CAPTURE). The receiver
app, which takes photos with various ﬁlters, deﬁnes an intent-ﬁlter
to accept the above intent. Since com.ventri.cake.retrica
have the permission to access location information,
this ICC
communication does not lead to escalated privileges. But upon
reception, com.ventri.cake.retrica leaks the data to a log
and therefore causes a collusion.
Threat TYPE IV, V, VI [vulnerable sender app]
App com.koranto.mkmn provides
Muslims
com.koranto.mkmn.activities retrieves
getLastKnownLocation,
location
=android.permission.ACCESS_FINE_LOCATION)
and
tion=android.intent.action.SEND,
text/plain).
for
of
the
user’s
permission