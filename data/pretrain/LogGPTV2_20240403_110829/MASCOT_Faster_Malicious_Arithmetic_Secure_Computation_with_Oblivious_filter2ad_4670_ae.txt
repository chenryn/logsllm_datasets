To achieve at least 64-bit statistical security, we observe that as \( k \) increases, the cost of inputs scales almost exactly quadratically. For triples, when \( k = 64 \), the efficiency is slightly lower because \( \tau = 4 \) (instead of 3). However, for larger values of \( k \), the cost decreases as \( k \) becomes significantly larger than \( \lambda \). It is also important to note that the cost of an input is much lower than a triple, as the input protocol does not require the expensive sacrificing or combining steps used to achieve active security with triples. This contrasts with the SPDZ protocol [16, 18], where creating input tuples requires complex zero-knowledge or cut-and-choose techniques.

### Comparison with a Passive Protocol
A passively secure (or semi-honest) version of our protocol can be constructed by setting \( \tau = 1 \) and removing the authentication step, which saves 5 calls to \( \Pi_{\text{COPE}}^e \) for every pair of parties. For two parties, this is essentially the same as the protocol in ABY [19]. The communication cost of a single triple is then \( n(n-1)(\lambda k + k^2) \) bits. For triples where \( k \geq 128 \) and 64-bit statistical security, the actively secure protocol achieves \( \tau = 3 \), making it approximately 5.5 times the cost of the passive variant.

### Implementation
In our implementation, we have applied the following optimizations. The first two apply to the OT extension by Keller et al. [28].

| Field Bit Length | Input Cost (kbit) | Triple Cost (kbit) |
|------------------|-------------------|--------------------|
| 64               | 4.16(n − 1)       | 53.25n(n − 1)      |
| 128              | 16.51(n − 1)      | 180.22n(n − 1)     |
| 256              | 65.79(n − 1)      | 622.59n(n − 1)     |
| 512              | 262.66(n − 1)     | 2293.76n(n − 1)    |

#### Bit Matrix Transposition
Asharov et al. [2] mention that bit matrix transposition is the most expensive part of the computation for their OT extension. They propose Eklundh's algorithm to reduce the number of cache misses. Instead of transposing a matrix bit by bit, the matrix is transposed with respect to increasingly small blocks while keeping the internal structure intact. Keller et al. also use this algorithm.

For a security parameter \( \lambda \), the OT extension requires the transposition of an \( n \times \lambda \)-matrix. We store this matrix as a list of \( \lambda \times \lambda \)-blocks, so we only need to transpose these blocks. For \( \lambda = 128 \), one such block is 2 KiB, which easily fits into the L1 cache of most modern processors.

Additionally, we use the PMOVMSKB instruction from SSE2, which outputs a byte consisting of the most significant bits of 16 bytes in a 128-bit register. Combined with a left shift (PSLLQ), this allows a \( 16 \times 8 \)-matrix to be transposed with only 24 instructions (eight of PMOVSKB, PSLLQ, and MOV each).

#### Pseudorandom Generator and Hashing
Keller et al. [28] used AES-128 in counter mode to implement the PRG needed for the OT extension, leveraging the AES-NI extension provided by modern processors. We have also implemented the hash function using AES-128 via the Matyas–Meyer–Oseas construction [34], which was proven secure by Black et al. [7]. This construction uses the compression function \( h_i = E_g(h_{i-1})(m_i) \oplus m_i \), where \( m_i \) denotes the i-th message block, \( h_i \) is the state after the i-th compression, and \( g \) is a conversion function. In our case, the input is only one block long (as many bits as the computational security parameter of the OT extension), and \( g \) is the identity. This results in a hash function \( H(m) = E_{IV}(m) \oplus m \) for some initialization vector IV, allowing us to precompute the key schedule. This precomputation enables efficient use of the pipelining capabilities of AES-NI in modern Intel processors: while the latency of the AESENC instruction is seven clock cycles, the throughput is one per clock cycle [24], meaning the processor can compute seven encryptions in parallel.

#### Inner Product Computation
Both \( \Pi_{\text{COPE}}^e \) and \( \Pi_{\text{Triple}} \) involve the computation of \( \langle g, x \rangle \) for \( x \in F_{\log |F|} \). Elements of both \( F_{2k} \) and \( F_p \) are commonly represented as elements of larger rings (e.g., \( F_2[X] \) and \( Z \)), and some operations involve modular reduction (modulo an irreducible polynomial or \( p \)). We defer this reduction until after computing the sum. Furthermore, we use the mpn_* functions of MPIR [42] for large integer operations in \( F_p \). For \( F_{2k} \), the computation before the modular reduction is straightforward because addition in \( F_2[X] \) corresponds to XOR.

### Multithreading
To make optimal use of resources, we have organized the triple generation as follows: several threads independently generate triples, and each such thread controls \( n - 1 \) threads for the OTs with the \( n - 1 \) other players. Operations independent of OT instances, such as amplification and sacrificing, are performed by the triple generation threads. We found that performance is optimal if the number of generator threads is much larger than the number of processor cores, indicating that communication is the main bottleneck.

### Experiments
We tested our implementation for up to five parties on off-the-shelf machines (eight-core i7 3.1 GHz CPU, 32 GB RAM) in a local network. Figure 9 shows our results.

- **Triple Generation Throughput for 128-bit Fields:**
  - Using 100 threads, we generated up to 4800 and 1000 \( F_{2^{128}} \) triples per second with two and five parties, respectively.
  - For \( F_p \) with \( p \) a 128-bit prime, the figures are the same.
  - These figures approach the maximum possible throughput of the correlation steps, which is 5500 and 1400, respectively, computed with \( \tau = 3 \) and \( k = \lambda = 128 \).
  - Assuming a 1 Gbit/s link per party and unlimited routing capacity gives the desired result.

- **Single Thread Performance:**
  - Using just a single thread, we can produce 2000 triples/s with two parties, which is over 72 times faster than the single-threaded implementation of SPDZ [16].

- **Increased Bandwidth:**
  - By increasing the bandwidth to 2 Gbit/s, we could increase the throughput to 9500 and 1600 triples per second for two and five parties, respectively, confirming that communication is the main bottleneck. Figure 10 shows the throughput for two parties in various network environments, including a WAN environment simulated over a LAN with restricted bandwidth and round-trip latency.

### Vickrey Auction
To highlight the practicality of our protocol, we implemented the Vickrey second-price auction. Figure 11 shows the results for the offline and online phases run between two parties on a local network. This clearly illustrates a 200-fold performance improvement compared with (actively secure) SPDZ, bringing the preprocessing phase within 2–3 orders of magnitude of the online phase.

### Acknowledgements
We thank Claudio Orlandi and the anonymous reviewers for valuable feedback that helped improve the presentation.

### References
[1] The Sharemind project. http://sharemind.cs.ut.ee, 2007.
[2] Asharov, G., Lindell, Y., Schneider, T., and Zohner, M. More efficient oblivious transfer and extensions for faster secure computation. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security (2013), ACM, pp. 535–548.
[3] Baum, C., Damgård, I., Toft, T., and Zakarias, R. Better preprocessing for secure multiparty computation. IACR Cryptology ePrint Archive (2016).
[4] Beaver, D. Efficient multiparty protocols using circuit randomization. Advances in Cryptology - CRYPTO 1991 (1992).
[5] Beaver, D. Correlated pseudorandomness and the complexity of private computations. In Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing (1996), G. L. Miller, Ed., ACM, pp. 479–488.
[6] Bendlin, R., Damgård, I., Orlandi, C., and Zakarias, S. Semi-homomorphic encryption and multiparty computation. In Advances in Cryptology - EUROCRYPT 2011 (2011), pp. 169–188.
[7] Black, J., Rogaway, P., Shrimpton, T., and Stam, M. An analysis of the blockcipher-based hash functions from PGV. J. Cryptology 23, 4 (2010), 519–545.
[8] Bogdanov, D., Jõemets, M., Siim, S., and Vaht, M. How the Estonian tax and customs board evaluated a tax fraud detection system based on secure multi-party computation. In Financial Cryptography and Data Security - 19th International Conference, FC 2015, Revised Selected Papers (2015), pp. 227–234.
[9] Bogdanov, D., Kamm, L., Kubo, B., Rebane, R., Sokk, V., and Talviste, R. Students and taxes: a privacy-preserving social study using secure computation. IACR Cryptology ePrint Archive (2015).
[10] Burra, S. S., Larraia, E., Nielsen, J. B., Nordholt, P. S., Orlandi, C., Orsini, E., Scholl, P., and Smart, N. P. High performance multi-party computation for binary circuits based on oblivious transfer. Cryptology ePrint Archive, Report 2015/472, 2015. http://eprint.iacr.org/.
[11] Canetti, R. Universally composable security: A new paradigm for cryptographic protocols. In 42nd Annual Symposium on Foundations of Computer Science, FOCS (2001), pp. 136–145.
[12] Carter, L., and Wegman, M. N. Universal classes of hash functions. J. Comput. Syst. Sci. 18, 2 (1979), 143–154.
[13] Chou, T., and Orlandi, C. The simplest protocol for oblivious transfer. In Progress in Cryptology - LATINCRYPT 2015 - 4th International Conference on Cryptology and Information Security in Latin America (2015), pp. 40–58.
[14] Damgård, I., Damgård, K., Nielsen, K., Nordholt, P. S., and Toft, T. Confidential benchmarking based on multiparty computation. In Financial Cryptography (2016).
[15] Damgård, I., Keller, M., Larraia, E., Miles, C., and Smart, N. P. Implementing AES via an actively/covertly secure dishonest-majority MPC protocol. In SCN (2012), I. Visconti and R. D. Prisco, Eds., vol. 7485 of Lecture Notes in Computer Science, Springer, pp. 241–263.
[16] Damgård, I., Keller, M., Larraia, E., Pastro, V., Scholl, P., and Smart, N. P. Practical covertly secure MPC for dishonest majority - or: Breaking the SPDZ limits. In ESORICS (2013), J. Crampton, S. Jajodia, and K. Mayes, Eds., vol. 8134 of Lecture Notes in Computer Science, Springer, pp. 1–18.
[17] Damgård, I., and Orlandi, C. Multiparty computation for dishonest majority: From passive to active security at low cost. In Advances in Cryptology - CRYPTO (2010), pp. 558–576.
[18] Damgård, I., Pastro, V., Smart, N. P., and Zakarias, S. Multiparty computation from somewhat homomorphic encryption. In Advances in Cryptology – CRYPTO 2012 (2012), R. Safavi-Naini and R. Canetti, Eds., vol. 7417 of Lecture Notes in Computer Science, Springer, pp. 643–662.
[19] Demmler, D., Schneider, T., and Zohner, M. ABY - A framework for efficient mixed-protocol secure two-party computation. In 22nd Annual Network and Distributed System Security Symposium, NDSS (2015), The Internet Society.
[20] Frederiksen, T. K., Keller, M., Orsini, E., and Scholl, P. A unified approach to MPC with preprocessing using OT. In Advances in Cryptology – ASIACRYPT 2015, Part I (2015), T. Iwata and J. H. Cheon, Eds., vol. 9452 of Lecture Notes in Computer Science, Springer, pp. 711–735.
[21] Gilboa, N. Two party RSA key generation. In Advances in Cryptology - CRYPTO (1999), pp. 116–129.
[22] Goldreich, O., Micali, S., and Wigderson, A. How to play any mental game or A