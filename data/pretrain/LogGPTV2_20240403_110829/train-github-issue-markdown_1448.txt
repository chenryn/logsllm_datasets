Hi all,
while writing examples for grow3.js, I found out that adding objects gets
increasingly slower with more objects already in the scene. It gets apparent
at >>10k objects in a scene.
I tracked down the problem to this line in Scene.js:
    if ( this.__objects.indexOf( object ) === - 1 ) {
Usually objects you try to add to a scene aren't already in it, so the
`indexOf()` statement searches through the whole array every time an object is
added to the scene. This means a **quadratic** increase in computation time
depending on the overall number of objects n.
`Scene.__objects` seems to be used to prevent duplicate objects ending in
`__objectAdded`. I'm not sure if this somewhat defensive code is needed - the
objects aren't prevented to be added to the scene hierarchy anyway.
So my proposal would be to just remove the __objects array. I did this here.
three.js examples seem to still work fine, performance while building scenes
with many objects increases dramatically.
An alternative might be to have some flag to explicitly disable dupes-checking
at runtime.
Finally some vague measurements (with my oldish Macbook) based on the
webgl_performance.html example, by changing the number of objects (numbers =
ms for initializing the scene):  
500 nodes: 200ms (no __objects: 95ms)  
20000 nodes: 1707ms (no __objects: 577ms)  
40000 nodes: 7000ms (no __objects: 744ms)
If maintainers agree, I'd issue a pull request. Just didn't want to rush in,
as this seems to apply to the very core of three.js...
Cheers!