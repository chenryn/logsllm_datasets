Pig Latin语言支持嵌套的操作，所以在这一部分，我们使用嵌套语句来对数据进行操作，这样能够使Pig Latin语言的书写更加简便，更加有便于理解。因为嵌套的语句能够使程序的执行更加有层次感，使我们理解起来一目了然。
为了让大家便于理解，我们给出单步的操作：
A=load'/pigTmp/Student'using PigStorage（'：'）as（Sno：chararray, Sname：chararra
y, Ssex：chararray, Sage：int, Sdept：chararray）；
B=load'/pigTmp/SC'using PigStorage（'，'）as（Sno：chararray, Cno：chararray, Grade：int）；
C=load'/pigTmp/Course'using PigStorage（'，'）as（Cno：chararray, Cname：chararray，
Cpno：chararray, Ccredit：int）；
D=load'/pigTmp/Course'using PigStorage（'，'）as（Cno：chararray, Cname：chararray，
Cpno：chararray, Ccredit：int）；
E=Join C By Cpno, D By Cno；--连接数据
F=Filter E By D：Cname=='C Language'；--过滤出先修课名为C Language的记录
G=Foreach F Generate C：Cno；--找出先修课为C Language课程的课程号
H=Join G By Cno, B By Cno；--选课表和C Language课程的课程号做连接操作
I=Join H By Sno, A By Sno；--选课表与目标课程号连接结果与学生表作连接操作
J=Foreach I Generate Sname--输出结果
可以明显地看出，上面的操作十分地繁琐，下面我们将上面的语句嵌套起来。
因为等号左面和右面的操作是完全等价的，也就是说，可以将模式名用对应的表达式替换。比如对于下面的句子：
E=Join C By Cpno, D By Cno；--连接数据
F=Filter E By D：Cname=='C Language'；--过滤出先修课名为C Language的记录
我们可以这样写：
F=Filter（Join C By Cpno, D By Cno；）By D：Cname=='C Language'；--过滤出先修课名为C Language的记录
所以，这一问题可以按下面的Pig Latin语句来进行操作：
A=load'/pigTmp/Student'using PigStorage（'：'）as（Sno：chararray, Sname：chararra
y, Ssex：chararray, Sage：int, Sdept：chararray）；
B=load'/pigTmp/SC'using PigStorage（'，'）as（Sno：chararray, Cno：chararray, Grade：int）；
C=load'/pigTmp/Course'using PigStorage（'，'）as（Cno：chararray, Cname：chararray，
Cpno：chararray, Ccredit：int）；
D=load'/pigTmp/Course'using PigStorage（'，'）as（Cno：chararray, Cname：chararray，
Cpno：chararray, Ccredit：int）；
E=Foreach（Filter（Join C By Cpno, D By Cno）By D：Cname=='C Language'）
Generate C：Cno；
F=Foreach（Join（Join B By Cno, E By Cno）By Sno, A By Sno）Generate Sname；
当然，如果想一步执行完也是可以的，只需要将上面操作的后两步再嵌套起来即可：
A=load'/pigTmp/Student'using PigStorage（'：'）as（Sno：chararray, Sname：chararra
y, Ssex：chararray, Sage：int, Sdept：chararray）；
B=load'/pigTmp/SC'using PigStorage（'，'）as（Sno：chararray, Cno：chararray, Grade：int）；
C=load'/pigTmp/Course'using PigStorage（'，'）as（Cno：chararray, Cname：chararray，
Cpno：chararray, Ccredit：int）；
D=load'/pigTmp/Course'using PigStorage（'，'）as（Cno：chararray, Cname：chararray，
Cpno：chararray, Ccredit：int）；
E=Foreach（Join（Join B By Cno，（Foreach（Filter（Join C By Cpno, D By Cno）By
D：Cname=='C Language'）Generate C：Cno）By Cno）By Sno, A By Sno）Generate Sname；
下面，我们使用DUMP关键字来分别对上面三种方式查看下运行结果，发现输出结果是完全相同的，如图14-9所示：
图 14-9 修了先修课为“C Language”的学生
14.6 节通过一个简单的例子，让用户了解如何在Local模式和MapReduce模式下对数据进行操作。14.7节则进一步通过一组复杂的例子，对如何使用Pig Latin语言进行复杂的操作做了更深入的介绍。
从14.6和14.7这两节实例操作中，我们可以看出，Pig Latin语言更擅长对海量数据进行分析。另外，Pig Latin语言还支持嵌套的操作，这样可以让Pig Latin语言编写的程序更加易于理解。
鉴于Pig Latin语言的如上特点，我们可以使用Pig于对诸如日志等规则的、海量的并且需要定期维护的数据进行分析处理操作，这样可以大大地提高系统的工作效率。
14.8 本章小结
在本章中我们通过对Pig的实际操作，让大家对Pig有了一个新的认识。相信读完本章之后，大家可以使用Pig进行简单地数据处理了。Pig Latin语言不但自身提供了很多的函数供用户使用，而且大家可以根据实际情况结合Java和Pig Latin语言编写具有特定功能的函数。这体现了Pig的可扩展性和强大的功能。在使用Pig的过程中，还有很多技巧需要掌握，这一点大家可以在实际操作中慢慢地体会。另外，Pig还处于完善阶段。从0.5.0版到0.10.0版的发展过程中，Pig进行了很多调整，这离不开广大开发者的支持和帮助。希望大家能够通过对Pig的使用，向Apache Hadoop贡献自己的一份力量！
第15章 ZooKeeper详解
本章内容
ZooKeeper简介
ZooKeeper的安装和配置
ZooKeeper的简单操作
ZooKeeper的特性
使用ZooKeeper进行Leader选举
ZooKeeper锁服务
使用ZooKeeper创建应用程序
BooKeeper
本章小结
15.1 ZooKeeper简介
ZooKeeper是一个为分布式应用所设计的开源协调服务。它可以为用户提供同步、配置管理、分组和命名等服务。用户可以使用ZooKeeper提供的接口方便地实现一致性、组管理、leader选举及某些协议。ZooKeeper意欲提供一个易于编程的环境，所以它的文件系统使用了我们所熟悉的目录树结构。ZooKeeper是使用Java编写的，但是它支持Java和C两种编程语言接口。
众所周知，协调服务非常容易出错，而且很难从故障中恢复，例如，协调服务很容易处于竞态以至于出现死锁。ZooKeeper的设计目的是为了减轻分布式应用程序所承担的协调任务。
 15.1.1 ZooKeeper的设计目标
众所周知，分布式环境下的程序和活动为了达到协调一致的目的，通常具有某些共同的特点，例如，简单性、有序性等。ZooKeeper不但在这些目标的实现上有自身的特点，并且具有其独特的优势。下面我们将简述ZooKeeper的设计目标。
（1）简单化
ZooKeeper允许分布式的进程通过共享体系的命名空间来进行协调，这个命名空间的组织与标准的文件系统非常相似，它是由一些数据寄存器组成的。用ZooKeeper的语法来说，这些寄存器应称为Znode，它们和文件及目录非常相似。典型的文件系统是基于存储设备的，然而，ZooKeeper的数据却是存放在内存当中的，这就意味着ZooKeeper可以达到一个高的吞吐量，并且低延迟。ZooKeeper的实现非常重视高性能、高可靠性，以及严格的有序访问。
ZooKeeper性能上的特点决定了它能够用在大型的、分布式的系统当中。从可靠性方面来说，它并不会因为一个节点的错误而崩溃。除此之外，它严格的序列访问控制意味着复杂的控制原语可以应用在客户端上。
（2）健壮性
组成ZooKeeper服务的服务器必须互相知道其他服务器的存在。它们维护着一个处于内存中的状态镜像，以及一个位于存储器中的交换日志和快照。只要大部分的服务器可用，那么ZooKeeper服务就可用。
如果客户端连接到单个ZooKeeper服务器上，那么这个客户端就管理着一个TCP连接，并且通过这个TCP连接来发送请求、获得响应、获取检测事件，以及发送心跳。如果连接到服务器上的TCP连接断开，客户端将连接到其他的服务器上。
（3）有序性
ZooKeeper可以为每一次更新操作赋予一个版本号，并且此版本号是全局有序的，不存在重复的情况。ZooKeeper所提供的很多服务也是基于此有序性的特点来完成。
（4）速度优势
它在读取主要负载时尤其快。ZooKeeper应用程序在上千台机器的节点上运行。另外，需要注意的是ZooKeeper有这样一个特点：当读工作比写工作更多的时候，它执行的性能会更好。
除此之外，ZooKeeper还具有原子性、单系统镜像、可靠性的及时效性等特点。
15.1.2 数据模型和层次命名空间
ZooKeeper提供的命名空间与标准的文件系统非常相似。它的名称是由通过斜线分隔的路径名序列所组成的。ZooKeeper中的每一个节点都是通过路径来识别的。
图15-1是Zookeeper中节点的数据模型，这种树形结构的命名空间操作方便且易于理解。
图 15-1 ZooKeeper的层次命名空间
15.1.3 ZooKeeper中的节点和临时节点
通过上一节的内容，大家可以了解到在ZooKeeper中存在着节点的概念，同时也知道了这些节点是通过像树一样的结构来进行维护的，并且每一个节点通过路径来标识及访问。除此之外，每一个节点还拥有自身的一些信息，包括：数据、数据长度、创建时间、修改时间等。从节点的这些特性（既含有数据，又通过路径来标识）可以看出，它既可以被看作是一个文件，又可以被看作是一个目录，因为它同时具有二者的特点。为了便于表达，后面我们将使用Znode来表示所讨论的ZooKeeper节点。
具体地说，Znode维护着数据、访问控制列表（access control list, ACL）、时间戳等包含交换版本号信息的数据结构，通过对这些数据的管理使缓存中的数据生效，并且执行协调更新操作。每当Znode中的数据更新它所维护的版本号就会增加，这非常类似于数据库中计数器时间戳的操作方式。
另外Znode还具有原子性操作的特点：在命名空间中，每一个Znode的数据将被原子地读写。读操作将读取与Znode相关的所有数据，写操作将替换掉所有的数据。除此之外，每一个节点都有一个访问控制列表，这个访问控制列表规定了用户操作的权限。
ZooKeeper中同样存在临时节点。这些节点与session同时存在，当session生命周期结束时，这些临时节点也将被删除。临时节点在某些场合也发挥着非常重要的作用，例如Leader选举、锁服务等。
15.1.4 ZooKeeper的应用
ZooKeeper成功地应用于大量的工业程序中。它在Yahoo！被用作雅虎消息代理（Yahoo！Message Broker）的协调和故障恢复服务。雅虎消息代理是一个高度可扩展的发布-订阅系统，它管理着上千的总联机程序和信息控制系统（Total On-line Program and Information Control System, TOPICS），另外它还用于为Yahoo！crawler获取服务并进行故障维护。除此之外，一些Yahoo！广告系统也同样使用ZooKeeper来实现可靠的服务。
15.2 ZooKeeper的安装和配置
在这一节中，我们将首先向大家介绍如何在不同的环境下安装并配置ZooKeeper服务；然后具体介绍如何通过ZooKeeper配置文件对ZooKeeper进行配置管理；最后向大家介绍如何在不同环境下启动ZooKeeper服务。
 15.2.1 安装ZooKeeper
ZooKeeper有不同的运行环境，包括：单机环境、集群环境和集群伪分布环境。这里，我们将分别介绍不同环境下如何安装ZooKeeper服务，并简单介绍它们的区别与联系。
1.系统要求
下面将说明安装ZooKeeper对系统和软件的要求。
（1）支持的平台
ZooKeeper可以在不同的系统上运行，表15-1是关于这方面的一个简单说明。
（2）软件要求
首先，安装ZooKeeper需要Java的支持，并且要求1.6以上的版本。此外，对于集群的安装，ZooKeeper需要至少三个节点，我们建议将三个节点部署在不同的机器上。例如，Yahoo！将ZooKeeper部署在Red Hat Linux机器上，每台机器使用多核CPU，2G的内存和80G的IDE硬盘。
JDK的安装已经在前面章节中有过详细介绍，这里不再赘述。
注意 由于频繁的换入换出操作对系统的性能有较大的影响，为了避免这种情况的发生，建议将Java的堆大小设置为合适的值。一般说来，所设置的Java堆大小的值不应大于实际可用的内存值。对于具体的值的大小，可以通过负载测试来决定。例如，建议将4GB内存的机器的Java堆大小设置为3GB。
系统中，要求大多数机器处于可用状态。如果想要集群能够忍受m台机器的故障，那么整个集群至少需要2m+1台机器。因为此时剩余的m+1台才能构成系统的一个大多数集。例如，对于拥有三台机器的集群，系统能够在一台机器发生故障的情况下仍然提供服务。
另外，最好使用奇数台的机器。例如，拥有四台机器的ZooKeeper只能处理一台机器的故障，如果两台机器发生故障，余下的两台机器并不能组成一个可用的ZooKeeper大多数集（三台机器才能构成四台机器的大多数集）；而如果ZooKeeper拥有五台机器，那么它就能处理两台机器的故障了。
2.单机下安装ZooKeeper
（1）ZooKeeper的下载
如果大家是第一次使用ZooKeeper，那么我们建议首先尝试在单机模式下配置ZooKeeper服务器。因为，在单机模式下配置和使用相对来说都要简单得多，并且易于帮助大家理解ZooKeeper的工作原理。这对进一步学习使用ZooKeeper会有很大的帮助。
从Apache官方网站下载一个ZooKeeper的最新稳定版本，网址如下：
http：//hadoop.apache.org/zookeeper/releases.html
作为国内用户来说，选择最近的源文件服务器所在地，能够节省不少的时间，比如：
http：//labs.renren.com/apache-mirror/hadoop/zookeeper/
（2）ZooKeeper的安装
为了今后操作方便，我们需要对ZooKeeper的环境变量进行配置，方法如下，在/etc/profile文件中加入如下的内容：
#Set ZooKeeper Enviroment
export ZOOKEEPER_HOME=$HADOOP_HOME/zookeeper-3.4.3
export PATH=$PATH：$ZOOKEEPER_HOME/bin：$ZOOKEEPER_HOME/conf
ZooKeeper服务器包含在单个JAR文件中，安装此服务需要用户创建一个配置文档，并对其进行设置。我们在ZooKeeper-*.*.*目录（本书以当前ZooKeeper的最新版3.4.3为例，故在下文中此“ZooKeeper-*.*.*”都将写为“ZooKeeper-3.4.3”）的conf文件夹下创建一个zoo.cfg文件，它包含如下的内容：
tickTime=2000
dataDir=$HADOOP_HOME/zookeeper-3.4.3/data
clientPort=2181
在这个文件中，$HADOOP_HOME代表Hadoop的安装目录，为了使用的方便，我们将其放在Hadoop安装目录下。需要注意的是，ZooKeeper的运行并不依赖于Hadoop，也不依赖于HBase或其它与Hadoop相关的项目。此外，我们需要指定dataDir的值，它指向了一个目录，这个目录在开始的时候应为空。下面是每个参数的含义：
tickTime：基本事件单元，以毫秒为单位。它用来指示心跳，最小的session过期时间为两倍的tickTime。
dataDir：存储内存中数据库快照的位置，如果不设置参数，更新事务的日志将被存储到默认位置。
clientPort：监听客户端连接的端口。
使用单机模式时大家需要注意：这种配置方式下没有ZooKeeper副本，所以如果ZooKeeper服务器出现故障，ZooKeeper服务将会停止。
代码清单15-1是我们根据自身情况所设置的ZooKeeper配置文档：zoo.cfg。
代码清单15-1 ZooKeeper配置文档zoo.cfg
#The number of milliseconds of each tick
tickTime=2000
#the directory where the snapshot is stored.
dataDir=$HADOOP_HOME/zookeeper-3.4.3/data
#the port at which the clients will connect
clientPort=2181
3.在集群下安装ZooKeeper
为了获得可靠的ZooKeeper服务，用户应该在一个集群上部署ZooKeeper。只要集群上大多数的ZooKeeper服务启动了，那么总的ZooKeeper服务将是可用的。
这之后的操作和单机模式的安装类似，我们同样需要对Java环境进行设置，下载最新的ZooKeeper稳定版本并配置相应的环境变量。每台机器上conf/zoo.cfg配置文件的参数设置相同，可参考代码清单15-2的配置。
代码清单15-2 zoo.cfg中的参数设置
#The number of milliseconds of each tick
tickTime=2000
#The number of ticks that the initial
#synchronization phase can take
initLimit=10
#The number of ticks that can pass between
#sending a request and getting an acknowledgement
syncLimit=5
#the port at which the clients will connect
clientPort=2181