 pg_stat_reset   
---------------  
(1 row)  
digoal=# select * from pg_statio_all_tables where relid='t1'::regclass;  
-[ RECORD 1 ]---+-------  
relid           | 24726  
schemaname      | public  
relname         | t1  
heap_blks_read  | 0  
heap_blks_hit   | 0  
idx_blks_read   |   
idx_blks_hit    |   
toast_blks_read | 0  
toast_blks_hit  | 0  
tidx_blks_read  | 0  
tidx_blks_hit   | 0  
digoal=# explain (analyze,verbose,costs,buffers,timing) select count(*) from t1 ;  
-[ RECORD 1 ]--------------------------------------------------------------------------------------------------------------  
QUERY PLAN | Aggregate  (cost=21.50..21.51 rows=1 width=0) (actual time=0.320..0.320 rows=1 loops=1)  
-[ RECORD 2 ]--------------------------------------------------------------------------------------------------------------  
QUERY PLAN |   Output: count(*)  
-[ RECORD 3 ]--------------------------------------------------------------------------------------------------------------  
QUERY PLAN |   Buffers: shared hit=9  
-[ RECORD 4 ]--------------------------------------------------------------------------------------------------------------  
QUERY PLAN |   ->  Seq Scan on public.t1  (cost=0.00..19.00 rows=1000 width=0) (actual time=0.010..0.175 rows=1000 loops=1)  
-[ RECORD 5 ]--------------------------------------------------------------------------------------------------------------  
QUERY PLAN |         Output: id, info  
-[ RECORD 6 ]--------------------------------------------------------------------------------------------------------------  
QUERY PLAN |         Buffers: shared hit=9  
-[ RECORD 7 ]--------------------------------------------------------------------------------------------------------------  
QUERY PLAN | Total runtime: 0.353 ms  
digoal=# select * from pg_statio_all_tables where relid='t1'::regclass;  
-[ RECORD 1 ]---+-------  
relid           | 24726  
schemaname      | public  
relname         | t1  
heap_blks_read  | 0  
heap_blks_hit   | 9  
idx_blks_read   |   
idx_blks_hit    |   
toast_blks_read | 0  
toast_blks_hit  | 0  
tidx_blks_read  | 0  
tidx_blks_hit   | 0  
```  
## 参考  
1\. http://www.postgresql.org/docs/9.3/static/dynamic-trace.html  
2\.   
```  
src/backend/storage/buffer/bufmgr.c  
src/backend/access/transam/xlog.c  
src/include/storage/relfilenode.h  
/*  
 * RelFileNode must provide all that we need to know to physically access  
 * a relation, with the exception of the backend ID, which can be provided  
 * separately. Note, however, that a "physical" relation is comprised of  
 * multiple files on the filesystem, as each fork is stored as a separate  
 * file, and each fork can be divided into multiple segments. See md.c.  
 *  
 * spcNode identifies the tablespace of the relation.  It corresponds to  
 * pg_tablespace.oid.  
 *  
 * dbNode identifies the database of the relation.      It is zero for  
 * "shared" relations (those common to all databases of a cluster).  
 * Nonzero dbNode values correspond to pg_database.oid.  
 *  
 * relNode identifies the specific relation.  relNode corresponds to  
 * pg_class.relfilenode (NOT pg_class.oid, because we need to be able  
 * to assign new physical files to relations in some situations).  
 * Notice that relNode is only unique within a particular database.  
 *  
 * Note: spcNode must be GLOBALTABLESPACE_OID if and only if dbNode is  
 * zero.  We support shared relations only in the "global" tablespace.  
 *  
 * Note: in pg_class we allow reltablespace == 0 to denote that the  
 * relation is stored in its database's "default" tablespace (as  
 * identified by pg_database.dattablespace).  However this shorthand  
 * is NOT allowed in RelFileNode structs --- the real tablespace ID  
 * must be supplied when setting spcNode.  
 *  
 * Note: in pg_class, relfilenode can be zero to denote that the relation  
 * is a "mapped" relation, whose current true filenode number is available  
 * from relmapper.c.  Again, this case is NOT allowed in RelFileNodes.  
 *  
 * Note: various places use RelFileNode in hashtable keys.      Therefore,  
 * there *must not* be any unused padding bytes in this struct.  That  
 * should be safe as long as all the fields are of type Oid.  
 */  
typedef struct RelFileNode  
{  
        Oid                     spcNode;                /* tablespace */  
        Oid                     dbNode;                 /* database */  
        Oid                     relNode;                /* relation */  
} RelFileNode;  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")