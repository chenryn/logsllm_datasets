on the path under PA). This model possesses stronger path integrity
(the attacker is less free to remove information from the path) but
may lose the property of AS authentication (for example, in SPV, an
attacker is able to add arbitrary deploying ASes to the path, which it
was not able to do in the PA model). Also, under this model, ASes
may be able to perform signatures on behalf of other ASes using
cryptographic information that is revealed from one AS to another.
Hence RPI’s resistance to path forgery may depend strongly on the
attacker’s eavesdropping ability.
We do not consider path-expansion attacks in this paper because
we make the simplifying assumption that shorter paths are always
preferred regardless of the ASes on the path (we explain why this
assumption is necessary and reasonable in Section 4.5). Recall
that in RTPV, we only consider a view of the Internet restricted to
the neighborhood of the deployers of the security scheme. Hence,
since each AS in PA is authenticating to an AS-to-AS relationship
between itself and its predecessor and successor ASes, it is clear
that the set of acceptable AS PATHs in PA is a subset of the set of
paths acceptable under RTPV. Hence, we can say that, under the set
of scenarios we are considering, PA is always at least as strong as
RTPV. Clearly, RTPV is at least as strong as OA+1, which is at least
as strong as OA. This order of properties under our model implies
that each stronger property completely captures the functionality
of all the weaker properties—any of our modeled attacks that suc-
ceeds against a stronger property will always succeed against the
weaker properties. This ordering can be summarized as:
OA ≤ OA+1 ≤ RTPV ≤ PA
RPI is omitted from the ordering since, unlike the other schemes,
its security properties vary depending on the attacker’s eavesdrop-
ping capabilities. Based on the above classiﬁcation, the goal of our
study is to establish the relative quantitative contributions of each
of the security properties to the adoptability of a scheme. For clar-
ity, we pick a single well-known security scheme from each class
to represent that class of security properties. Hence, we use soBGP
to represent RTPV, S-BGP to represent PA, and SPV to represent
RPI. Since every OA protocol is meant to be implemented along-
side some kind of path security protocol, we do not use any existing
OA scheme to represent the security class. Instead, we refer to the
class directly as “OA”. Likewise, there exists no security protocol
that implements only OA+1 — hence, we refer to this class directly
as “OA+1”. To summarize, the ﬁve security classes that we inves-
tigate in this paper are denoted by OA, OA+1, soBGP, S-BGP, and
SPV respectively.
4. SIMULATION MODEL
In this section we discuss the methodology, models, and assump-
tions made to develop a viable simulation environment. In later sec-
tions we provide sensitivity analysis on the parameters discussed
here.
4.1 Simulation Methodology
Our methodology for measuring the adoptability of a given pro-
tocol aims to discover the range of possible adoption transition
costs (or switching thresholds) for which incentives-compatible de-
ployment scenarios exist. Recall from Section 1 that an AS adopts
the protocol if and only if the immediate security beneﬁt of adopt-
ing the protocol is greater than the switching threshold. Hence,
the more adoptable a protocol is, the greater the range of switching
thresholds for which full adoption eventually occurs.
We measure the adoptability of the protocol for various switch-
ing thresholds by simulating the dynamics of the adoption process
using a model of the decision-making process of the ASes on the
Internet. At the end of the simulation, we consider the ﬁnal frac-
tion of ASes in the Internet which are adopters of the protocol. If
this ﬁnal fraction is large, then we know that incentives-compatible
deployment has succeeded for this particular scenario; if the ﬁnal
fraction is small, then the adoption process has stalled because it is
not incentives-compatible for a majority of the ASes to adopt the
new protocol.
We assume that an initial set S0 of ASes have deployed the se-
curity protocol prior to the start of the simulation (i.e., at iteration
0). We call our S0 set the set of initial adopters. We consider
several possibilities that may account for a particular set of initial
adopters. For example, governmental policy could dictate that all
military ASes initiate deployment of a secure BGP protocol. Alter-
natively, large-scale Tier-1 ISPs could coordinate to become initial
adopters via a wide-ranging business agreement. Another possible
scenario would be an academic partnership causing a set of univer-
sity ASes to become initial adopters. We evaluate how the choice
of various initial adopter sets affects a security protocol’s adopt-
ability. The reason for this is twofold: ﬁrst, this allows us to check
the sensitivity of our results to different initial conditions. Second,
we hope that this study will help guide policy decisions on how to
best initiate deployment.
After we have selected our initial set S0, the simulation proceeds
in iterations. For each iteration i ≥ 1, we consider each AS that has
not yet adopted the protocol, and we model its adoption decision
process as greedily rational and selﬁshly motivated — hence it will
become an adopter of the protocol in the next iteration if and only if
the immediate security beneﬁts of adopting the protocol is greater
than the switching threshold, which represents the costs of transi-
tioning to and supporting the new protocol. We explore modeling
the security beneﬁt in a variety of ways; we describe these in detail
in Section 4.3. The switching threshold is an independent variable
(expressed in the same units as the security beneﬁt), which can be
arbitrarily varied as a parameter of the simulation. We assume that
the switching threshold is a constant value for each AS across the
Internet, we justify this assumption in Section 4.4.
Using this method, for iteration i, we use the set of deployed
(protocol-speaking) ASes in the previous iteration (Si−1) to deter-
mine the set Ai of ASes that will adopt the security protocol in the
current iteration i. We then add them to the set of protocol-speaking
ASes, i.e., Si = Si−1 ∪ Ai. The simulation ends when no more ASes
have been found to be new adopters of the secure routing proto-
col in an iteration or the whole of Internet has already adopted the
protocol, i.e., |Ai| = 0.
4.2 Attacker Model
There are many actions an adversary can take in a partially-
secure Internet. We focus on a speciﬁc attack and assume a sin-
gle malicious AS which is attempting to divert legitimate routes
towards itself. We chose this general attack since it is a necessary
ﬁrst step for other sophisticated attacks such as eavesdropping, se-
lective packet dropping, and blackholing. This is the most direct
form of attack for an adversary whose goal is to gain control of
some set of ﬂows on the Internet. Other attacker models which may
be analyzed in our framework include multiple-adversary models in
which malicious ASes may collude to share information or launch
coordinated active attacks. We do not perform these analyses in
this paper but hope that they will be the subject of future work.
We base our security analysis on two main attacker models: the
Strong Attacker Model and the Weak Attacker Model. Both models
make the assumption that a malicious AS cannot inject new an-
nouncements into a non-neighbor AS. This is because typical BGP
routers only accept BGP sessions via direct physical links from a
small set of neighboring routers, making it difﬁcult for a malicious
router to inject false information outside of its immediate AS neigh-
borhood.
We vary the ability of a malicious AS to eavesdrop on BGP an-
nouncements from other ASes. In the Strong Attacker Model, a ma-
licious AS can eavesdrop on BGP trafﬁc between any two ASes on
the Internet. This assumption is somewhat unrealistic since most
inter-AS border routers communicate via direct physical links on
which remote eavesdropping is impractical if neither AS has been
compromised by the adversary. However, the practice in standard
security analysis is to assume that all unencrypted communications
are known to the attacker. The strong attacker model is thus based
on this standard assumption. In the Weak Attacker Model, the mali-
cious AS can only access BGP trafﬁc sent directly to it, but cannot
eavesdrop on BGP communications elsewhere in the Internet. We
will discuss in Sections 5 and 7 how these different attacker models
affect the security properties of secure BGP protocols.
4.3 Security Metric
We deﬁne the security beneﬁt of each AS as being the net dif-
ference in its security metric between having deployed the protocol
and not having deployed the protocol. Intuitively, the security met-
ric for each AS is the expected probability that some uniformly
randomly chosen bit passing through the AS cannot be diverted by
a single malicious AS somewhere else in the Internet. The secu-
rity beneﬁt is thus the increase in this probability of resistance to
diversion due to the AS deploying the secure BGP protocol.
We model the security metric as follows. Let the set of all ASes
be V . Let a be the AS deciding on adopting a secure BGP scheme.
We assume that a is concerned with all the trafﬁc that passes through
itself, that is, every AS-to-AS route that passes through a (or starts
or ends at a) has an effect on its security metric. This assumption is
motivated by the intuition that ASes are commercial entities which
are paid to carry trafﬁc; hence the ability to secure any given bit
of trafﬁc should improve the AS’s ability to bring in revenue. To
enumerate all such routes, we need an AS-level routing model of
the entire Internet—we discuss our model for this in Section 4.5.
Let r be some route that passes through a; let R be the set of ASes
traversed by r. We measure the probability of compromise of r by
a single malicious AS M . We deﬁne a route r as compromised
if M can successfully cause packets from the source to be routed
to M instead of to the correct destination. In order to do this, M
can hijack the preﬁx by advertising itself as owning the preﬁx, or
it can advertise an invalid short route to the legitimate destination
thus causing packets to be routed to itself. If any of these attacks
succeed for a given position of M on the Internet, then the route
r is considered compromised for that position of M . The details
on how we determine whether or not an attacker was successful is
detailed in Sections 5 and 7. We evaluate the average security sr
of the route r by averaging the binary event variable Er,M (0=r is
compromised by M , 1=r is secure from M ) over all possible lo-
cations of M on the Internet not including ASes that are already
on the route r. We do not consider malicious ASes already on the
route r since in such a case, the attacker has already achieved its
goal needing to disrupt the correct operation of BGP.
sr = ∑
M ∈V, /∈r
· P(M )
Er,M
Where P(M ) is the probability of M being the malicious AS.
We investigate two probability distributions for M : (1) a uniform
distribution, where any AS has an equal chance of being malicious,
and (2) a distribution biased towards small ASes, where the prob-
ability of an AS being malicious is inversely proportional to its
degree—the intuition being that larger ASes are better monitored
and administered and hence more secure.
Based on the formula, sr can take values in [0,1] where 1 means
that the route is always secure, and 0 means that the route can al-
ways be compromised regardless of which AS happens to be ma-
licious. Let the set of all routes passing through a be Ra. We then
take the average of the security metrics for each route going through
the node a to get the security metric sa for a, weighted by the es-
timated trafﬁc wr for each route r, as shown in Equation 1. We
consider several different trafﬁc models which we discuss in Sec-
tion 4.6.
sa =
∑r∈Ra srwr
∑r∈Ra wr
(1)
4.4 AS behavior model
We assume that each AS adopts the new protocol in some iter-
ation of the simulation if its immediate security beneﬁt is greater
than some switching threshold in that iteration. We assume a con-
stant switching threshold for all ASes. This implies that an AS
will adopt a secure protocol if adoption secures at least a certain
expected fraction of its trafﬁc, regardless of the size, capacity, or
position of the AS in the Internet. We believe this is a reasonable
approximate model of AS behavior since larger ASes with more
trafﬁc capacity will receive greater net beneﬁts from adoption; but
at the same time their cost of transition would also be higher due to
their larger scale. More precisely, our model assumes that transition
costs scale linearly with the trafﬁc carried by an AS, so the natu-
ral measure of security beneﬁt is security provided per unit trafﬁc.
Clearly, costs in the real world do not scale linearly with trafﬁc, but
real-world costs are also affected by unmeasurable factors such as
existing infrastructure and business strategies; as a ﬁrst approxima-
tion, the linear assumption will at least allow us to perform tractable
simulations and analyses.
We chose the greedy bounded-rational strategy model where each
AS only considers its immediate beneﬁt and does not consider the
strategies of other ASes. This is because it is the most risk-averse
strategy—whenever an AS performs the switch, it is assured that its
choice will immediately improve its utility. In a game with signif-
icant uncertainty about opponent utilities and strategies and large
negative payoffs if beliefs (or predictions) are inconsistent with re-
ality, this is a reasonable approximation to rationality.
4.5 AS Topology
We model the AS topology as a weighted AS-level graph. Each
AS is represented as a node, while transit or peering relationships
between ASes are represented as edges. The edges are weighted by
the number of times a source AS prepends itself in the AS PATH
when it advertises to the neighboring AS. We consider that the
weight is symmetric in both directions, i.e., if an AS weighs one
edge higher by prepending then it wants both less outgoing and
less incoming trafﬁc.
We extract the structure of the AS-level graph from RouteViews
data [5]. Since RouteViews is merely a collection of BGP messages
at a few limited vantage points on the Internet, it does not reveal the
actual AS-level graph. However, this slight inaccuracy is tolerable
compared with the strength of our other assumptions. To construct
our AS graph, we examine all the paths observed by RouteViews
and draw an undirected edge between every pair of ASes that ap-
pear consecutively on a path. If the same AS appears consecutively
to itself on a path, then this AS is performing AS PATH prepend-
ing on this path. To reﬂect this, we set the weight of the edge to
the number of times the AS prepended itself. For example, for an
AS PATH AS1AS2AS2AS3 in the routing table, we give the AS1-AS2
edge an edge-weight of 2 and the AS2-AS3 edge an edge-weight of
1.
Since we lack comprehensive policy information about all possi-
ble routes on the Internet, in our study we use the least-edge-weight
paths to approximate actual routes found on the Internet. If more
than one least-edge-weight path exists, one is chosen at random.
In the strong attacker model, due to the universal eavesdropping
assumption, any malicious AS receives the same amount of infor-
mation regardless of its position, and hence the amount of infor-
mation available to a malicious AS anywhere in the Internet can be
precomputed at the beginning of the iteration. Furthermore, since a
malicious AS can only inject BGP messages at one point, its abil-
ity to attack a given route is dependent solely on its distance from
the destination of the route. This means that in each iteration, for
each of O(n2) routes r of length O(D) (where n is the number of
ASes and D is the diameter of the AS-graph), we can consider each
AS on the route r and check in constant time what the effect is
on the security of r when it adopts the protocol. Hence the over-
all complexity of the computations for the strong attacker model
is O(n2D). Hence, it is possible to perform all the computations
for the strong attacker model on the actual Internet AS topology
extracted from RouteViews
In the weak attacker model, for each attacker AS M and for ev-
ery route from AS A to AS B, we have to ﬁnd the route from A
to M that is weakest in security, and consider how this route can
be used to attack the route from A to B. Since the information to
attack a given route that is available to each malicious AS is now
different, for each route, the computation must now iterate over all
O(n) possible malicious ASes and revaluate the security beneﬁt of
each AS along the route adopting security. This computation is