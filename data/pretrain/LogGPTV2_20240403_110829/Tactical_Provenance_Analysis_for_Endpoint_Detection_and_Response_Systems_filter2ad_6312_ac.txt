rundll32.exe
rundll32.exe
rundll32.exe
T1085
Rundll32
defense-evasion,execution
rundll32.exe
T1085
Rundll32
defense-evasion,
execution
rundll32.exe
rundll32.exe
rundll32.exe
T1140
PS_encoded_command
defense-evasion
T1083
FileDirectoryDiscovery
discovery
cmd.exe
powershell.exe
powershell.exe
T1085
Rundll32
defense-evasion,
execution
rundll32.exe
rundll32.exe
rundll32.exe
c:/windows/system32/runas.exe
PROCESS_LAUNCH
T1085
Rundll32
defense-evasion,
execution
rundll32.exe
cliconfg.exe
/rundll32.exe
T1055
PFDR_Inject
defense-evasion,
privilege-escalation
T1085
Rundll32
defense-evasion,execution
T1086
PS_powersploit
execution
powershell.exe
PROCESS_LAUNCH
userinit.exe
T1060
Registry Run Keys
persistence
HKEY_USERS/
S-1-5-21-1603624627-402595
9035-3120021394-1103/
Software/Microsoft/Windows/
CurrentVersion/RunOnce/
ctfmon.exe
explorer.exe
PROCESS_LAUNCH
mstsc.exe
src: 10.0.10.21:63656
dst: 10.0.0.10:3389
PROCESS_LAUNCH
T1076
RemoteDesktopProtocol
lateral-movement
src: 10.0.10.21:57295
dst: 10.0.0.10:3389
cmd.exe
src: 10.0.10.21:57291
dst: 10.0.0.10:3389
T1086
PS_download_exec
execution
powershell.exe
T1086
PS_Launch
execution
powershell.exe
Start
T1060
RegistryRunKeys
persistence
T1086
PS_download_exec
execution
T1086
PS_Launch
execution
T1086
PS_powersploit
execution
(a)
T1085
Rundll32
defense-evasion,execution
T1055
PFDR_Inject
defense-evasion,privilege-escalation
T1085
Rundll32
defense-evasion,execution
T1140
PS_encoded_command
defense-evasion
T1140
PS_encoded_command
defense-evasion
T1085
Rundll32
defense-evasion,execution
defense-evasion,persistence,privilege-escalation,initial-access
T1078
RunAs
(b)
T1076
RemoteDesktopProtocol
lateral-movement
T1083
FileDirectoryDiscovery
discovery
Fig. 4: APT29 attack scenario. (a) IIP Vertex graph generated by RapSheet. Threat alert edges are annotated with the MITRE technique
ID, technique name, and tactic name. “PS” stands for PowerShell. (b) Tactical Provenance Graph (TPG) for APT29 attack after applying
readability pass. RapSheet generated TPG is 2 orders of magnitude smaller than the classical provenance graph shown in Figure 2
As is described next, the low-level system events will form
edges in a provenance graph. In RapSheet, we annotate the
edges that triggered an alert with the alert information (e.g.,
the MITRE technique ID). Some rules provided by the EDR
vendor generate alerts for behaviors not covered by the MITRE
ATT&CK, which we ignore these for the purposes of this
work. For our example attack scenario described in Section II,
the threat alert annotated as Alert B in Figure 2 matched the
following rule (syntax simpliﬁed for clarity):
Listing 1: Example MITRE technique matching rule.
IF EXISTS E WHERE E.tgtType = ’network’ AND
E.action = ’connect’ AND E.dstPort = 3389
THEN ALERT(E.actorProc, ’T1076’)
C. Provenance Graph Database
The system logs on each host are parsed into a graph
structure called a provenance graph. The provenance graph
generated by RapSheet is similar to previous work on prove-
nance graphs [26], [21], [22], [23], [27] with some new
additions to reason about MITRE ATT&CK tactics. Our
provenance graph data model is shown in Figure 5. We have
two types of vertices: process vertex type and object vertex
type which includes ﬁles, registry, etc. The edges that connect
these vertices are labeled with an event type that describes the
relationship between the connected entities and the timestamp
of event occurrence. Moreover, process vertices are marked
with start and terminate time which allows us to check if a
process is still alive during our analysis.
We also implemented a summarization technique from
previous work, causality-preserved reduction [31], [34] in our
provenance graph database. This technique merges the edges
between two vertices that have the same operation and keeps
only one edge with the latest timestamp. For example, most
Socket
Registry  
Key & Value
Accept
Create
Delete,Set,
Rename
Launch,
Terminate,
Injection,
ALPC
L
o
a
d
Module
Connect
Process
Get, 
Open
Create, Rename,
Delete, Modify,
Set Security,
Set Attributes
Open
Create
File
Kernel 
Object
Fig. 5: Data model of our provenance graph database. Vertices repre-
sent the system entities (actors and objects) while the edges represent
the causal dependency. Edges are annotated with the timestamp of
event occurrence and event type.
operating systems and many EDRs produce several system-
level events for a single ﬁle operation. RapSheet aggregates
those events into a single edge in the provenance graph. This
technique has been shown to reduce the size of the provenance
graph while still preserving the correctness of causal analysis.
D. Tactical Provenance Analysis
Given a list of triggered alerts and host provenance graphs,
we ﬁnd all the initial infection point (IIP) vertices in the
graphs. We deﬁne an IIP to be a vertex that meets two
conditions: (i) it corresponds to a process that generated an
alert event ea, and (ii) a backward trace from ea in the
provenance graph contains no other alert events. Note that
there can be multiple IIP vertices in a given provenance graph.
Intuitively, we are ﬁnding the earliest point that potentially
suspicious behavior occurred on a given provenance chain.
The IIP represents the process that exhibited this behavior. If
it turns out that ea was the ﬁrst step in a multistage attack,
then the remainder of the attack will be captured by future
alerts generated by this process and its progeny. This gives
us an effective way to group correlated alerts. For each IIP
vertex, we generate a graph that is rooted at the IIP. We call
this an IIP graph and deﬁne it as follows:
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:13 UTC from IEEE Xplore.  Restrictions apply. 
1177
Def. 1. IIP Graph Given a provenance graph G 
and alert event ea incident on IIP Vertex va, the IIP Graph
G(cid:2)  is a graph rooted at Va where e ∈ E(cid:2)
iff e is
causally dependent on ea and e is either an alert event or an
event that leads to an alert event.
We generate the IIP graph by issuing a forward tracing
query from the IIP vertex, producing a progeny provenance
graph containing only events which happened after that ﬁrst
alert event incident on the IIP vertex. We then perform a
pruning step on this subgraph, removing all provenance paths
originating from the IIP that do not traverse an alert edge.
Each path in the resulting, pruned graph contains at least
one alert event. In Algorithm 1, Lines 1-16 show the IIP
graph generation process. For our attack scenario example
from Section II, the pruned progeny graph rooted at the IIP is
shown in Figure 4a.
This IIP graph based approach is a key differentiating factor
that sets RapSheet apart from the path-based approach to
alert triage in NoDoze [38] and the full graph approach in
Holmes [43]. A path-based approach fails to correlate alerts
that are causally related but appear on different ancestry paths.
For example, after initial compromise, an attacker can launch
several child processes, with each child generating its own,
separate path. Even though all child paths are causally related,
the path-based approach will fail to correlate alerts on the
separate paths. On the other hand, Holmes’ full graph approach
requires a normal behavior database and other heuristics to
reduce false alarms from benign activities before threat score
assignment. RapSheet does not require a normal behavior
database, rather we rely on extracting certain subgraphs (the
IIP graphs) and assigning scores based on well-known attacker
behaviors, which alleviates the problem of false alarms (further
discussed in Section V).
The IIP graph captures the temporal ordering between
events on the same path. However, when reasoning about
the overall attack campaign, we are not concerned with, e.g.,
which attacker-controlled process takes a given action. Instead,
we want to capture the temporal order of all alerts contained
in the IIP graph, which better reﬂects attacker intent. Because
this graph may consist of multiple paths, we need a way to
capture ordering between edges on different paths. To achieve
this goal, we transform the IIP graph into a new graph in
which each vertex is an alert event and edges indicate the
temporal ordering between alerts based on a happens-before
relationship [59]. We call these edges sequence edges, and
they are deﬁned as follows:
Def. 2. Sequence Edge. A sequence edge (ea, eb) exists
between two alerts ea and eb iff any of the following hold:
(a) ea and eb are alerts on the same host and on the same
provenance path and ea causally preceded eb; or
(b) ea and eb are alerts on the same host and the vertex
timestamp of ea is less than the vertex timestamp of eb or
(c) ea had an outgoing Connect event edge on one host, while
eb has the corresponding Accept edge on the receiving host.
In other words, for events that happen on the same machine,
we can use the event timestamps to generate sequence edges.
For events on different machines, we can use communication
between the machines to generate the happens-before relation-
ship (events before a packet was sent on one machine deﬁnitely
happened before events that happened after the packet was
received on the other machine). In the end, we generate a graph
(Algorithm 1 Lines 17-30) which we call a tactical provenance
graph whose formal deﬁnition is as follows:
Def. 3. Tactical Provenance Graph. A tactical provenance
graph T P G can be deﬁned as a pair (V, E), where V is a
set of threat alert events and E is a set of sequence edges
between the vertices.
As deﬁned above, the TPG is already useful for analysts
to visualize multi-stage APT campaigns because it shows
temporally ordered and causally related stages of an attack
without getting bogged down in low-level system events.
However, the tactical provenance graph may not be as succinct
as the analyst would like, since MITRE techniques may
be matched repeatedly on similar events, such as a process
writing to multiple sensitive ﬁles or a process sending network
messages to multiple malicious IP addresses. This can add
redundant alert event vertices in the tactical provenance graph.
To declutter the TPG, we perform a post-processing step where
we aggregate the alert vertices ascribing the same technique if
they were triggered by the same process. Note that for events
on a single host, without cross-machine links, the TPG is a
single chain. An illustration of this post-processing step is
given in Figure 4a. While the IIP shows mstsc.exe triggering
three lateral movement alerts, the TPG in Figure 4b only has
one lateral movement vertex.
V. THREAT SCORE ASSIGNMENT
A key goal of RapSheet is to group alerts and assign them
a threat score that can be used to triage those contextualized
alerts. Because some alerts are more suspicious than others,
we pursued a scoring mechanism that incorporated a risk score
of the individual alerts. Where available, we used information
published by MITRE to assign those scores to individual alerts.
Many of the MITRE ATT&CK technique descriptions in-
clude a metadata reference to a pattern in the Common
Attack Pattern Enumeration and Classiﬁcation (CAPEC) [60]
knowledge base. The CAPEC pattern entries sometimes in-
clude two metrics for risk assessment: “Likelihood of Attack”
and “Typical Severity”. Each of these is rated on a ﬁve
category scale of Very Low, Low, Medium, High, Very
High. The ﬁrst metric captures how likely a particular attack
pattern is to be successful, taking into account factors such
as the attack prerequisites, the required attacker resources,
and the effectiveness of countermeasures that are likely to be
implemented. The second metric aims to capture how severe
the consequences of a successful implementation of the attack
would be. This information is available on MITRE’s website,
as well as in a repository of JSON ﬁles [61] from which we
programmatically extracted the scores.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:13 UTC from IEEE Xplore.  Restrictions apply. 
1178
Algorithm 1 Tactical Provenance Analysis
Inputs:
Raw provenance graph G(V, E); Alert Events AE
Output:
List of Tactical Provenance Graphs ListT P G
IIP G ← IIP G ∪ path
Seen ← Seen ∪ alerts
ListIIP ← ListIIP ∪ IIP G
// return all alert events in the input provenance path
alerts ← GetAlertEvents(path)
// keep only those paths in IIP graph with at least one alert
if alerts (cid:6)= ∅ then
Seen ← Seen ∪ {ae}
// return all forward tracing paths from input event using DFS
P aths ← ForwardPaths(ae)
IIP G ← ∅ , IIP graph
for all path : P aths do
1: AE(cid:2) ← {ae : time(ae)}, ae ∈ AE, sort by timestamp in asc. order
2: Seen ← ∅, set of seen alert events
3: ListIIP ← ∅, List of IIP Vertex Graphs
4: for all ae : AE(cid:2), ae /∈ Seen do
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17: ListT P G ← ∅, List of TPGs to return
18: for all IIP G : ListIIP do
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
T P G ← ∅ , tactical provenance graph
alerts ← GetAlertEvents(IIP G)
// sort alerts according to Happens Before rules
alertshb ← {a : time(a)}, a ∈ alerts
// Loop over sorted alerts, two at a time
for all ae1, ae2 : alertshb do
V ← ae1
V (cid:2) ← ae2
T P G ← T P G ∪ (V, V (cid:2)) // add sequence edge
// Post process the TPG for readability
T P G ← ReadabilityPass(T P G)
ListT P G ← ListT P G ∪ T P G
For some MITRE techniques, no CAPEC reference is
provided, or the provided CAPEC reference has no likelihood
and severity scores. In these cases, we fall back on a separate