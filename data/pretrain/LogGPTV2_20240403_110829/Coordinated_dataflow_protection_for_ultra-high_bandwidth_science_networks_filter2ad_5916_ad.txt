abstraction trees exposed to each of the IoT users or administra-
tors. This approach of isolating and assigning explicit infrastructure
abstractions to each admin, allows CoordiNetZ to prevent admins
from specifying policies on the infrastructure they do not own i.e.,
preventing rogue policies from being specified. For detecting rogue
policies, the policy composition engine extracts the source and tar-
get nodes from the specified policies and verifies if both the nodes
belongs to the policy abstraction trees owned by that administrator.
Further, these policies are composed together for detecting other
conflicts and violations (as discussed in §4.3.1).
4.3 Policy Composition & Deconfliction
In multi-site environments, where hosts and network entities are
sharedacrossmultipleprojects,conflictsareboundtoarisewhenpoli-
cies are being specified independently by each SDMZ user. Conflicts
might even arise among policies specified within the same project or
across projects, when multiple users are involved in policy specifica-
tion. In SDMZs, the need for project- and site-specific policies further
increase the potential for conflict. Run-time policy composition must
alsoaddressthedynamicneedsofephemeralprojects,resultinginthe
need to perform periodic policy recomposition. Hence, CoordiNetZ
facilitates automatic policy conflict detection and deconfliction in
three steps: (i) automated detection of conflicts among policies (i.e.,
specified by various administrators) within a project, (ii) automatic
conflict resolution, and (iii) decomposition of policies into logical
groups for efficient tag assignment to enable policy enforcement
among multiple projects in shared infrastructure.
4.3.1 Composition Algorithm: The composition engine accepts a
list of policies∀pi and an empty bi-partite graph G as input. Each pol-
icy in the list L is serially composed, producing a final consolidated
graph G. For each policy pi to be composed with G, the composition
engine first checks for existence of any source nodes Sj(G) in G that
has any relation with policy’s source node s(pi) If s(pi) overlaps with
any source node in Sj(G), then the composition engine evaluates
the edges of source node E(Sj(G)) of G for matching policy edge
conditions bpi(s,t). If any of the edges of Sj(G) has an edge match
condition with pi (i.e., an overlap or subset or exact match relation),
then t(pi) is checked for a target node match associated with Sj(G).
Depending on the overlap relation among source, edge, and the
target nodes, the policy is either declared a conflict, a duplicate or
non-conflicting. Duplicate policies are not added to the graph, but
increment a counter and an entry to maintain the duplicate-policy as-
sociation.Ifthecompositionenginefindsanoverlaprelation,itlabels
the policy as a conflict. It then checks for matching precedence rules
6
if bpi (s,t) overlaps with Ek(Sj(G)) &a(pi)(cid:44)A(Ek) then
if t(pi) overlaps T(Ek) then
if no or equal precedences then
Alert: Raise Policy Conflict;
else
Auto Resolution: Approach (§4.3);
decompose (p,G);
else
Create new t(pi) node in G;
else if bpi (s,t) overlaps Ek(Sj(G))&a(pi) ==A(Ek) then
if t(pi) ⊆T(Ek) then
Discard Duplicate Policy: Add track entry;
pi .counter ←pi .{counter ++};
Create new edge for the pi in G;
else if t(pi)(cid:60)T(G) then
else
Create new edge for the pi in G;
else
Create s(pi) & t(pi) hash entries in G;
Create new edge bpi (s,t) in G;
for the policy pi and policies associated with Sj(G). If precedence op-
eration exists for that policy, it proceeds to conflict resolution, while
unresolved policies are declared as conflicts. If no overlaps exist, the
policy is non-conflicting, and hence new nodes and edges are added
to the composed graph. The overall complexity of the composition
Algorithm 1 involves the following factors: (a) the number of policies
(L); (b) number of source nodes (S J ) in the composed policy graph;
(c) the number of source nodes that have overlap relations resulting
in edge comparisons (Le); and (d) the number of target nodes that
are compared for overlap relations (Lt ). The overall worst-case com-
plexity of the algorithm is O(L ∗ S J ∗ Le ∗ Lt ), which is quadratic.
The overall composition complexity Tc is calculated as follows:
(cid:18)
Lej
L
(cid:18) S Ji
Tc =
i =1
j =Sj ϵG
+
O(m +n)+
(cid:18)
Ke ∗O(q +r)
(cid:19)(cid:19)(cid:19)
k =(Si ,Sj)ϵ E
Lt
O(u +v)
l =(Si ,Sj)ϵ E
We propose incremental policy composition mechanism to
accommodate the dynamic changes to the SDMZ network infras-
tructure and perform policy composition in sub second latency
and reduce the complexity of our composition algorithm through
optimizations (discussed in Appendix A.4).
4.3.2 Precedence & Decomposition : Automated conflict resolution
employs precedence operators to resolve conflicts among competing
policies. CoordiNetZ uses three separate forms of policy precedence
evaluation. Administrator-level precedence enables precedence eval-
uation based on the scope of authority for policies authored by
administrators. For example, in SDMZs the site administrators are
(1)
(cid:14)(cid:22)(cid:24)(cid:27)(cid:23)(cid:22)3(cid:22)21(cid:1)(cid:11)/(cid:30)/(cid:1)(cid:13)(cid:26)(cid:23)(cid:22)(cid:18)(cid:33)(cid:1)(cid:14)(cid:33)(cid:25)(cid:30)/>(cid:9)(cid:29)(cid:22)(cid:30)2(cid:34)(cid:14)(cid:22)(cid:30)2(cid:6)(cid:35)(cid:4)1/(cid:30)/(cid:34)(cid:11)(cid:6)(cid:35)(cid:1) (cid:10)(cid:1)(cid:29)(cid:22)(cid:30)2(cid:34)(cid:14)(cid:22)(cid:30)2(cid:7)(cid:35)(cid:29)(cid:22)(cid:30)2(cid:34)(cid:14)(cid:22)(cid:30)2(cid:6)(cid:35)(cid:4)1/(cid:30)/(cid:34)(cid:11)(cid:6)(cid:35)(cid:1) (cid:10)(cid:1)(cid:29)(cid:22)(cid:30)2(cid:34)(cid:14)(cid:22)(cid:30)2(cid:8)(cid:35)(cid:29)(cid:22)(cid:30)2(cid:34)(cid:2)(cid:35)(cid:4)1/(cid:30)/(cid:34)(cid:11)(cid:6)(cid:5)(cid:2)(cid:35)(cid:1)(cid:36) (cid:10)(cid:1)(cid:29)(cid:22)(cid:30)2(cid:34)(cid:14)(cid:22)(cid:30)2(cid:8)(cid:35)(cid:5)(cid:2)(cid:1)(cid:11)23/(cid:31)(cid:23)(cid:30)(cid:1)1:(cid:26)(cid:27)(cid:1)2(cid:25)3(cid:26):(cid:18)21(cid:1)(cid:26)(cid:25)(cid:1):2(cid:29)(cid:30)(cid:1)(cid:26)3(cid:1)(cid:30):/33(cid:22)(cid:18)(cid:1)/(cid:31)(cid:30)(cid:26)(cid:24)/(cid:30)(cid:22)(cid:18)/(cid:23)(cid:23)(cid:33)(cid:1)(cid:2)(cid:5)(cid:14)(cid:11)*.(cid:14)(cid:22)(cid:30)2(cid:6)(cid:14)(cid:11)*.(cid:14)(cid:22)(cid:30)2(cid:8)(cid:11)(cid:6)(cid:11)-(cid:6)(cid:11)(cid:6)(cid:11)-(cid:7)(cid:11)-(cid:6)(cid:11)(cid:6)(cid:11)-(cid:6)(cid:14)(cid:11)*.(cid:14)(cid:22)(cid:30)2(cid:7)(cid:11)(cid:6)(cid:11)-(cid:6)Algorithm 2: Tag allocation across sites (Edge Coloring).
1 CT ← List of T colors with their respective tag space sizes;
2 SN ← Total number of sites involved in policy management;
3 PSi {} ← List of projects in each site;
4 Tpi {} ← Tag size requirement of each project;
5 CSi {} ← List of unique colors assigned to each site;
6 CSAi {} ← List of colors associated with Si ’s adjacent site PSi ;
7 Ct emp {} ← List of colors with tag size > Tpi + Ts lack;
8 foreach site Si ∈ SN do
(cid:17)
;
9
10
11
12
13
14
foreach adjacent sites SAi ∈ Si do
foreach project Pi ∈ PSi do
if Pi .{color} == NULL then
CT emp{} ← CT {} > Tpi + Tsl ack ;
Pi .{color } ← min
CT emp&&CT emp (cid:60)CSAi
Si ← SAi Adjacent site of Si with project tag space unassigned.;
(cid:16)
granted precedence over project administrators. Action-level prece-
denceallowsoneactiontotakeprecedenceoveranother.Forexample,
the Drop action may supersede Allow or Quarantine or redirect.
That is, Drop > Allow > Quarantine > Redirect. Custom precedence
enables policy attributes, such as user or experiment or projects,
to be associated with precedence. For example, policies specific to Ex-
periment X of Project1 may be granted precedence over policies from
Experiment Y of Project2, especially with shared network resources.
When two policies (P1 and P2) conflict (e.g., policies in Figure
6a), the nodes and edges of the policies are decomposed into set of
subset nodes that requires the least number of edges to represent
conflict-free policies. Based on the precedence, the overlapping
nodes that result in conflict are removed. For P1>P2, the edge
specific to the policy with highest precedence (P1) is retained and
the overlapping portion of edge property specific to other policy
(P2) is removed and vice versa. In this case, the total number of edges
required to represent the conflict-free composed graph is N + 1,
where N is approximately total number of different edge properties
that result in conflicts. From the composed graph all the nodes and
edges that are resolved for conflicts specific to a policy are assigned
the same tag. Here, the number of tags required is approximately
equal to the number of conflict-free policies.
5 Context-Aware Tagging
The SDMZ network lacks efficient techniques to differentiate traffic
based on: (i) static project-specific attributes (e.g., project id, project
user, experiment id) that identify the source of the science data
traffic, (ii) dynamic network security attributes, (e.g., malicious,
compromised, DDoS, or exfiltration host) that describe dynamic
security state of the network, and (iii) site-specific attributes that
enable isolation and conflict-free policy enforcement for projects
spanning multiple sites with each site hosting multiple projects. We
present a tag-based policy enforcement mechanism for fine-grained
traffic filtering and inter-site sharing of security services.
1) Intra-Site Tag Assignment: Fine-grained traffic filtering is pro-
vided to SDMZ network using tag-based policy enforcement mecha-
nism supported using IPv6 flow label (20 bits). IPv6 is a natural choice
for flow tagging as it affords greater tag space and its use is strongly
urged by the SDMZ community [43]. The tag assignment to policies
happens within each project at the site-level by the CNZ Controller.
The host DTN assigns tags to each flow associated with policies for
logically grouping the flows or forwarding them in accordance with