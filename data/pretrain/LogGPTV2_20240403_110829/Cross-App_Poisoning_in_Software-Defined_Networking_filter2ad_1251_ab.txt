components, how apps interact with the SDN control plane, the
control plane’s information flow challenges, and our main contri-
butions in solving such challenges.
3.1 SDN Architecture
SDN decouples decisions on how traffic ought to be forwarded
(i.e., the control plane) from the forwarding itself (i.e., the data
plane). SDN centralizes this control in a logically centralized con-
troller, exposes APIs to apps, and abstracts the lower-level details of
network forwarding devices (e.g., switches) [38]. Figure 1a shows
a representative SDN architecture with the controller, apps, for-
warding devices, and end hosts. Next, we highlight some relevant
background on the controller and control plane APIs.
Controller. The controller acts as a “network operating system”
to coordinate concurrent applications, to provision resources, and
to implement security or network policies [38]. Several controller
frameworks exist, such as Floodlight [20], Ryu [71], Open Net-
work Operating System (ONOS) [61], and OpenDaylight (ODL) [64].
Special-purpose controllers for secure environments include SE-
Floodlight [68], Rosemary [75], and Security-Mode ONOS [89]. The
controller maintains data stores that collectively serve as a “network
information base” for abstractions of the network’s topology, flow
entries, and end hosts, among others. The core methods provide
services that add, modify, or remove data from data stores.
Northbound API. There is no standard controller-to-application
interface or northbound API (NB API) among all controller frame-
works, and each framework may establish different boundaries
between the core functionalities and extensible apps. Apps can be
implemented in two ways: as “internal” modules within the con-
troller (represented by the dashed box in Figure 1a) or as separate
“external” processes decoupled from the controller. For example,
ONOS uses the OSGi framework in Java to manage internal app
3
modules and states. ONOS, ODL, and Floodlight, among others,
include a RESTful API for external apps.
Southbound API. SDN controllers also interact with network
forwarding devices to disseminate rules and to collect data plane
statistics. One popular standard protocol between controllers and
switches (i.e., the southbound API) is OpenFlow [46]. OpenFlow con-
figures switches’ forwarding behavior through flow tables, where
each flow table consists of flow entries that match attributes of
incoming data plane packets and assigns data plane forwarding
actions. The protocol includes messages to send data plane packets
to and from the controller (i.e., PacketIn, PacketOut), to modify
forwarding behavior (i.e., FlowMod), and to request and receive flow
entry statistics (i.e., StatsRequest, StatsReply), among others.
SDN Control Plane App Interactions. Apps interact with the shared
SDN control plane state via service API calls and event callbacks.
These mechanisms are independent of whether apps are internal or
external to the controller. With service API calls, an app can read
from or write to one of the controller’s data stores via a correspond-
ing service and the service’s methods. As shown in Figure 1b, apps
use the host service’s read() and write() methods to interact with the
underlying host data store. With event callbacks, an app registers
itself with the controller to receive events of interest as they occur.
As shown in Figure 1c, all apps have registered to receive data plane
events from a data plane event listener. Subsequent events may be
generated as a result of the first event.
3.2 Information Flow Models for Integrity
Information flow concerns the extent to which data propagate
throughout a system (i.e., the SDN control plane) and influence
other data. Information flow control (IFC) determines the ability of
data to flow based on policy so as to enforce an “end-to-end” secure
design by tracking propagation [72]. Pasquier et al. [66] provide
an overview of classical information flow models. Among them
is one proposed by Biba [10], who proposed a “no read down, no
write up” integrity policy. In that model, subjects are assigned to
one of several hierarchical integrity classes. Information can flow
from a sender subject to a receiver subject if the sender’s integrity
class is at least as high as that of the sender, which implies that low-
integrity information cannot reach high-integrity subjects. Myers
and Liskov [53] relax the hierarchical assumptions by proposing a
system of integrity tags and labels assigned to subjects.
3.3 SDN Control Plane Information Flow
Challenges
Given that apps can interact with each other through the shared
SDN control plane state, an ideal SDN controller must be able to
capture the resulting information flow and enforce access control
policies based on it. In considering the “network operating system”
concept for SDN, we next highlight how current state-of-the-art
SDN controller designs fall short with respect to information flow
and IFC, and how we approach such challenges.
3.3.1
Lack of well-defined application isolation and enforcement
as applied to shared control plane state. Some controllers, such as
Rosemary [75], sandbox each app’s resources (e.g., memory and
CPU usage) and use RBAC to allow apps or prevent them from
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
B. Ujcich et al.
(a) Architecture. SDN separates the data
and control planes to logically centralize net-
work control. The application plane modu-
larly extends the control plane functionality.
Apps can reside either as modules within the
controller or as external processes.
(b) Service API interactions. 1: App 1 calls
one of the host service’s write() methods to
insert a new host. 2: The host service adds
the object to its own data store. 3: App 2 calls
one of the host service’s read() methods (not
shown), and the service queries the store. 4:
The host service returns the object to app 2.
(c) Event callback interactions. 1: A
switch notifies the controller about an event.
2: The event listener sends the event to the
first registered app. 3 and 4: Additional regis-
tered apps receive the event. 5: The last app
optionally returns an event. 6: The event is
actuated (e.g., in the data plane).
Figure 1: SDN architecture overview and app interactions via service APIs and event callbacks.
accessing parts of the SDN control plane state, in a manner analo-
gous to resource sharing and file permissions in operating systems,
respectively. However, RBAC is limiting in practice because it does
not enforce certain usage of data after authorization [72]. Apps can
bypass RBAC policies if they cleverly influence other apps to take
actions on their behalf as “confused deputies.”
Our contributions. We formalize this IFC integrity problem, under
the name cross-app poisoning (CAP), in Section 4, and demonstrate
its consequences through an attack evaluation in Section 5.
3.3.2 Lack of insight into information flow within the control
plane. A security practitioner might want to understand the con-
trol plane’s information flow to evaluate the extent to which apps’
information sharing should or should not be allowed. However, to
date, there are no SDN controller logging mechanisms that explic-
itly and easily capture the relationships among the various ways
data have been used or generated. Practitioners must manually
reconstruct and infer possible scenarios by inspecting log files of
varying verbosity. That makes it difficult or impossible to reason
about prior network state [14, 37] or to quickly narrow down and
attribute blame to specific apps when something goes wrong [48].
This lack of insight could mislead practitioners into incorrect con-
clusions when they investigate their systems.
Our contributions. In Section 4, we describe how to use a cross-
app information flow graph to better understand the attack surface.
In Section 7, we show how data provenance can provide insight
into enforcement and recording of control plane activities.
4 CROSS-APP POISONING
We now introduce cross-app poisoning (CAP) as the IFC integrity
problem for SDN. Informally, a CAP attack is any attack in which
an app that does not have permission to take some action co-opts
apps that do have such permissions by poisoning the other apps’
4
view of data in the shared control plane state so that they take
unintended or malicious actions on the first app’s behalf.
To systematically identify CAP attacks, we model how apps are
allowed to use and generate data based on how permissions are
granted (Sections 4.1–4.3), and we overlay this model with apps’
actual data flows (Section 4.4). While individual examples of CAP at-
tacks have been considered in the SDN security literature (e.g., [42]),
we are (to the best of our knowledge) the first to systematically
study this class of attacks, which cannot be prevented by the exist-
ing defenses in SDN, such as RBAC or app sandboxing.
4.1 RBAC Policy Model
We start with the current state-of-the-art in SDN secure controller
design by considering an RBAC model as a basis for formalizing
CAP attacks. Our model for specifying RBAC policies is denoted
by R = (A, R, O, PR , PW , P, mAR , mRP , mPO ) and consists of:
• A set of apps, denoted by A = {a1, a2, . . . , ax}, that comprise
the apps in the SDN application plane.
• A set of roles, denoted by R = {r1, r2, . . . , ry}.
• A set of objects, denoted by O = {o1, o2, . . . , oz}, that com-
prise the data in the shared SDN control plane state.
• A set of read permissions, denoted by PR, that make it possi-
ble to access or read from objects.
• A set of write permissions, denoted by PW , that make it
possible to write, modify, or delete objects.
• A union of all permissions, denoted by P = PR ∪ PW .
• A mapping of apps to roles, denoted by mAR ⊆ A × R.
• A mapping of roles to permissions, denoted by mRP ⊆ R × P.
• A mapping of permissions to objects in the shared SDN
control plane state, denoted by mPO ⊆ P × O.
Our RBAC model is flexible enough to be applied to several existing
controllers. For instance, Security-Mode ONOS specifies objects and
permissions at the API granularity (e.g., read flow tables), whereas
SwitchSwitchExternalAppsSDN ControllerCoreInternal app modulesInternal appInternal app…External appExternal appNB APICore methodsSwitchCONTROL PLANE…SB APIData storesForwarding DevicesNorthbound APIDATA PLANE…End hostEnd hostEnd host…APPLICATION PLANESouthbound APIAPPLICATION PLANEEnd HostsSwitchCONTROL PLANEDATA PLANESwitchSwitch…Host storeAPPLICATION PLANEApp 1App 2Shared data structure nHost serviceAPI for shared data structure nSDN AppsSDN ControllerForwarding Devices1243……Flow rule serviceFlow rule store…App xSwitchSwitchSwitch…App 1App 2App 3Event listener123456CONTROL PLANEDATA PLANEAPPLICATION PLANEShared data structure nAPI for shared data structure n……SDN AppsForwarding DevicesSDN ControllerCross-App Poisoning in Software-Defined Networking
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
(A, R, O, PR, PW , P, mAR, mRP , mPO ) ← R
V ← A ∪ O
E ← {}
(cid:17) ∈ mRP such that rj = ri do
for each (pk, ok ) ∈ mPO such that pk = pj do
Algorithm 1 Cross-App Information Flow Graph Generation
Input: RBAC policy R
Output: cross-app information flow graph G
Initialize:
for each(cid:16)
rj, pj
1: for each (ai, ri ) ∈ mAR do
2:
3:
4:
5:
6:
7:
8: G ← (V, E)
if pk ∈ PR then
if pk ∈ PW then
E ← E ∪ {(ok, ai )}
E ← E ∪ {(ai, ok )}
SDNShield [85] specifies objects at the sub-API granularity (e.g.,
read flow tables with a specific IP prefix).
4.2 Cross-App Information Flow Graph
Given a model and policies encapsulated in R, we can convert
R into a representation by which we can reason about potential
data or information flow across the shared SDN control plane state.
A cross-app information flow graph, denoted by G = (V, E), is a
directed graph that encapsulates the relations among apps, objects
in the shared SDN control plane state, and the permissions granted
to apps to read and write objects. Our design is influenced by the
“take–grant” protection model proposed by Lipton and Snyder [43].
Algorithm 1 shows the generation process, which uses a system
modeled with an RBAC policy as input and a cross-app information
flow graph as output. The algorithm initializes the components
from R as well as the graph’s nodes V as the union of apps A
and objects O. Lines 1–3 iterate through RBAC maps so as to map
each app–object pair. Each app–object pair may have zero or more
permissions associated with it. For a read permission (lines 4–5),
an edge is added to E from the object ok to the app ai. For a write
permission (lines 6–7), an edge is added to E from the app ai to the
object ok. Thus, the directions of the cross-app information flow
graph’s edges have semantic meaning based on reads and writes.
4.3 Cross-App Attack Vectors
Given a cross-app information flow graph G, we can formally and
precisely define CAP attacks in terms of paths in G. We represent
a cross-app attack vector, denoted by Cv, as a path in G such that
the path’s starting node is an app, the path’s ending node is an
object, the path length is greater than or equal to 3, and the path
length is odd. (A path length of 1 represents what an app already
has permission to do.) Based on the structure of G produced from
Algorithm 1, the path nodes alternate between apps and objects.
We define Cv (G) = ⟨a0, o1, a2 . . . , an−1, on⟩ | n ≥ 3; n is odd.
Intuitively, we can see that a path between an app and an object
in G marks the existence of a potential attack vector. Any interme-
diate apps in a given Cv path are the apps that app a0 can co-opt
using permissions that a0 itself does not possess. Similarly, any in-
termediate objects in a given Cv path are the objects in the shared
SDN control plane state used to carry out the attack. For the trivial
a1
p1
a2
p2
p5
p4
a3
p7
p6
o2
o3
p3
o1
Figure 2: Example of a cross-app information flow graph G
with a cross-app attack vector C1 = ⟨a1, o1, a2, o2⟩. App a1 may
be able to poison object o2 even though it does not possess
permission p4 to do so; instead, it would use object o1, app a2,
and app a2’s permission p4. App a1 cannot poison object o3,
since no path exists between them.
case in which systems do not implement any access control, G can
be represented as a complete directed graph in which all apps can