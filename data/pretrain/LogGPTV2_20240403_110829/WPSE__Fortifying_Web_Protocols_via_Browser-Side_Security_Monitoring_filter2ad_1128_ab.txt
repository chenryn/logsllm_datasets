patterns, describing the expected shape of the protocol
messages at each state. We represent HTTP(S) requests
as e(cid:104)a(cid:105), where e is the remote endpoint to which the mes-
sage is sent and a is a list of parameters, while HTTP(S)
responses are noted e(h), where e is the remote end-
point from which the message is received and h is a
list of headers.4 The syntactic structure of e,a,h can be
described using regular expressions. The message pat-
terns should be considered as guards of the transition,
which are only enabled for messages matching the pat-
tern. For instance, the pattern φ2 in Figure 2 matches a
response from the endpoint G with a Location header
that contains a URL with a parameter named code. If an
HTTP(S) request or response does not satisfy any of the
patterns of the outgoing transitions of the current state, it
is blocked and the automaton is reset to the initial state,
i.e., the protocol run is aborted. In case of branches with
more than one transition enabled at a given state, we
solve the non-determinism by picking the ﬁrst transition
(with a matching pattern) according to the order deﬁned
in the XML speciﬁcation. Patterns can be composed us-
ing standard logical connectives.
Each state of the automaton also allows for pausing the
protocol execution in presence of requests and responses
that are unrelated to the protocol. Messages are consid-
ered unrelated to the protocol if they are not of the shape
of any valid message in the protocol speciﬁcation.
In
the automaton, this is expressed by having a self-loop
for each state, labeled with the negated disjunction of all
patterns describing valid protocol messages. This is im-
portant for website functionality, because the input/out-
put behavior of browsers on realistic websites is complex
and hard to fully determine when writing a protocol spec-
iﬁcation. Also, the same protocol may be run on different
websites, which need to fetch different resources as part
of their protocol-unrelated functionalities, and we would
like to ensure that the same protocol speciﬁcation can be
enforced uniformly on all these websites.
3.1.2 Security Policies
To incorporate secrecy and integrity policies in the au-
tomaton, we allow for binding parts of message patterns
4 We support HTTP headers also in requests. Here we omit them
since they are not used in the protocols that we consider.
1496    27th USENIX Security Symposium
USENIX Association
¬(φ1 ∨ φ2 ∨ φ3)
¬(φ1 ∨ φ2 ∨ φ3)
¬(φ1 ∨ φ2 ∨ φ3)
start
init
φ1
auth
φ2 :: πS
access
end
(cid:124)
φ1 (cid:44) G(cid:104)response type:code, redirect uri:^(
(cid:125)(cid:124)
(cid:123)(cid:122)
(cid:124)(cid:123)(cid:122)(cid:125)
πS (cid:44) authcode → {https://accounts.google.com, origin}
φ2 (cid:44) G(Location:[?&]code= (.*?)
(?:&|$))
(cid:124) (cid:123)(cid:122) (cid:125)
authcode
origin
(cid:122)
uri2
(https?://.*?/) .*?)
(?:\?|$)(cid:105)
uri1
φ3 (cid:44) (.*)
(cid:104)code:([^\s]{40,})(cid:105)
πI (cid:44) uri1 = uri2
φ3 ∧ πI
(cid:123)
(cid:125)
Figure 2: Automaton for OAuth 2.0 (authorization code mode) where G is the OAuth endpoint at Google.
to identiﬁers. For instance, in Figure 2 we bind the iden-
tiﬁer origin to the content of the redirect uri pa-
rameter, more precisely to the part matching the regular
expression group (https?://.*?/).5 The scope of an
identiﬁer includes the state where it is ﬁrst introduced
and all its successor states, where the notion of successor
is induced by the tree structure of the automaton. For in-
stance, the scope of the identiﬁer origin introduced in
φ1 includes the states auth,access,end.
The secrecy policy deﬁnes which parts of the HTTP(S)
responses included in the protocol speciﬁcation must be
conﬁdential among a set of web origins. We express se-
crecy policies πS with the notation x → S to denote that
the value bound to the identiﬁer x can be disclosed only
to the origins speciﬁed in the set S. We call S the se-
crecy set of identiﬁer x and represent such a policy on
the message pattern where the identiﬁer x is ﬁrst intro-
duced, using a double colon symbol :: as a separator.
For instance, in Figure 2 we require that the value of
the authorization code, which is bound to the identiﬁer
authcode introduced in φ2, can be disclosed only to
Google (at https://accounts.google.com) and the
relying party (bound to the identiﬁer origin). Conﬁden-
tial message components are stripped from HTTP(S) re-
sponses and substituted by random placeholders, so that
they are isolated from browser accesses, e.g., computa-
tions performed by JavaScript. When the automaton de-
tects an HTTP(S) request including one of the generated
placeholders, it replaces the latter with the correspond-
ing original value, but only if the HTTP(S) request is
directed to one of the origins which is entitled to learn
it. A similar idea was explored by Stock and Johns to
strengthen the security of password managers [42]. Since
the substitution of conﬁdential message components with
placeholders changes the content of the messages, poten-
tially introducing deviations with respect to the transition
5 https://developer.mozilla.org/en-US/docs/Web/
JavaScript/Reference/Global_Objects/RegExp
labels, the automaton processes HTTP(S) responses be-
fore stripping conﬁdential values and HTTP(S) requests
after replacing the placeholders with the original values.
This way, the input/output behavior of the automaton
matches the protocol speciﬁcation.
The integrity policy deﬁnes runtime checks over the
HTTP(S) messages. These checks allow for the compar-
ison of incoming messages with the messages received
in previous steps of the protocol execution. If any of the
integrity checks fails, the corresponding message is not
processed and the protocol run is aborted. To express in-
tegrity policies πI in the automaton, we enrich the mes-
sage patterns to include comparisons ranging over the
identiﬁers introduced by preceding messages. In the case
of OAuth 2.0, we would like to ensure that the browser
is redirected by the IdP to the redirect URI speciﬁed
in the ﬁrst step of the protocol. Therefore, in Figure 2
the desired integrity policy is modeled by the condition
uri1 = uri2.
3.1.3 Enforcing Multiple Protocols
There are a couple of delicate points to address when
multiple protocol speciﬁcations P1, . . . ,Pn must be en-
forced by WPSE:
1. if two different protocols Pi and Pj share messages
with the same structure, there might be situations
where WPSE does not know which of the two pro-
tocols is being run, yet a message may be allowed
by Pi and disallowed by Pj or vice-versa;
2. if WPSE is enforcing a protocol Pi, it must block
any message which may be part of another protocol
Pj, otherwise it would be trivial to sidestep the secu-
rity policy of Pi by ﬁrst making the browser process
the ﬁrst message of Pj.
Both problems are solved by replacing the protocol spec-
iﬁcations P1, . . . ,Pn with a single speciﬁcation P with n
USENIX Association
27th USENIX Security Symposium    1497
branches, one for each Pi. Using this construction, any
ambiguity on which protocol speciﬁcation should be en-
forced is solved by the determinism of the resulting ﬁ-
nite state automaton. Moreover, the self loops of the au-
tomaton will only match the messages which are not part
of any of the n protocol speciﬁcations, thereby prevent-
ing unintended protocol interleavings. Notice that the
semantics of WPSE depends on the order of P1, . . . ,Pn,
due to the way we enforce determinism on the compiled
automaton: if Pi starts with a request to u including two
parameters a and b, while Pj starts with a request to u in-
cluding just the parameter a, then Pi should occur before
Pj to ensure it is actually taken into account.
3.2 Discussion
A number of points of the design and the implementation
of WPSE are worth discussing more in detail.
3.2.1 Protocol Flow
WPSE provides a signiﬁcant improvement in security
over standard web browsers, as we show in the remainder
of the paper, but the protection it offers is not for free, be-
cause it requires the speciﬁcation of a protocol ﬂow and a
security policy. We think that it is possible to develop au-
tomated techniques to reconstruct the intended protocol
ﬂow from observable browser behaviours, while synthe-
sizing the security policy looks more difﬁcult. Manually
ﬁnding the best security policy for a protocol may re-
quire signiﬁcant expertise, but even simple policies can
be useful to prevent a number of dangerous attacks, as
we demonstrate in Section 4.
The speciﬁcation style of the protocol ﬂow supported
by WPSE is simple, because it only allows sequential
composition of messages and branching. As a result,
our ﬁnite state automata are signiﬁcantly simpler than
the request graphs proposed by Guha et al. [24] to rep-
resent legitimate browser behaviors (from the server per-
spective). For instance, our ﬁnite state automata do not
include loops and interleaving of messages, because it
seems that these features are not extensively used in web
protocols. Like standard security protocols, web proto-
cols are typically speciﬁed in terms of a ﬁxed number of
sequential messages, which are appropriately supported
by the speciﬁcation language we chose.
3.2.2 Secrecy Enforcement
The implementation of the secrecy policies of WPSE is
robust, but restrictive. Since WPSE substitutes conﬁden-
tial values with random placeholders, only the latter are
exposed to browser-side scripts. Shielding secret values
from script accesses is crucial to prevent conﬁdentiality
breaches via untrusted scripts or XSS, but it might also
break the website functionality if a trusted script needs to
compute over a secret value exchanged in the protocol.
The current design of WPSE only supports a limited use
of secrets by browser-side scripts, i.e., scripts can only
forward secrets unchanged to the web origins entitled to
learn them. We empirically show that this is enough to
support existing protocols like OAuth 2.0 and SAML, but
other protocols may require more ﬂexibility.
Dynamic information ﬂow control deals with the prob-
lem of letting programs compute over secret values while
avoiding conﬁdentiality breaches and it has been applied
in the context of web browsers [21, 26, 8, 36, 7]. We be-
lieve that dynamic information ﬂow control can be fruit-
fully combined with WPSE to support more ﬂexible se-
crecy policies. This integration can also be useful to
provide conﬁdentiality guarantees for values which are
generated at the browser-side and sent in HTTP(S) re-
quests, rather than received in HTTP(S) responses. We
leave the study of the integration of dynamic information
ﬂow control into WPSE to future work.
3.2.3 Extension APIs
The current prototype of WPSE suffers from some lim-
itations due to the Google Chrome extension APIs. In
particular, the body of HTTP messages cannot be mod-
iﬁed by extensions, hence the secrecy policy cannot be
implemented when secret values are embedded in the
page contents or the corresponding placeholders are sent
as POST parameters. Currently, we protect secret values
contained in the HTTP headers of a response (e.g., cook-
ies or parameters in the URL of a Location header) and
we only substitute the corresponding placeholders when
they are communicated via HTTP headers or as URL pa-
rameters. Clearly this is not a limitation of our general
approach but rather one of the extension APIs, which can
be solved by implementing the security monitor directly
in the browser or as a separate proxy application. De-
spite these limitations, we were able to test the current
prototype of WPSE on a number of real-world websites
with very promising results, as reported in Section 5.
4 Fortifying Web Protocols with WPSE
To better appreciate the security guarantees offered by
WPSE, we consider two popular web protocols: OAuth
2.0 and SAML. The security of both protocols has al-
ready been studied in depth, so they are an excellent
benchmark to assess the effectiveness of WPSE: we re-
fer to [6, 19, 43] for security analyses of OAuth 2.0 and
to [3, 4] for research studies on SAML. Remarkably,
by writing down a precise security policy for SAML,
we were able to expose a new critical attack against the
Google implementation of the protocol.
1498    27th USENIX Security Symposium
USENIX Association
Detected
Violation
Protocol
ﬂow
deviation
Secrecy
violation
Integrity
violation
Attack
Session swapping [43]
Social login CSRF on stateless clients [6]
IdP mix-up attack (web attacker) [19]
Unauthorized login by authentication
code redirection [6]
Resource theft by access token redirec-
tion [6]
307 redirect attack [19]
State leak attack [19]
Cross social-network request forgery [6]
Na¨ıve RP session integrity attack [19]
Table 1: Overview of the attacks against OAuth 2.0.
4.1 Attacks Against OAuth 2.0
We review in this section several attacks on OAuth 2.0
from the literature, analysing whether they are prevented
by our extension. We focus in particular on those pre-
sented in [6, 19, 43], since they apply to the OAuth 2.0
ﬂows presented in this work. In Table 1 we provide an
overview of the attacks that WPSE is able to prevent,
grouped according to the type of violation of the security
properties that they expose.
4.1.1 Protocol Flow Deviations
This category covers attacks that force the user’s browser
to skip messages or to accept them in a wrong order. For
instance, some attacks, e.g., some variants of CSRF and
session swapping, rely on completing a social login in
the user’s browser that was not initiated before. This is a
clear deviation from the intended protocol ﬂow and, as a
consequence, WPSE blocks these attacks.
We exemplify on the session swapping attack dis-
cussed in Section 2.2. Here the attacker tricks the user
into sending a request containing the attacker’s autho-
rization credential (e.g., the authorization code) to RP
(step 4(cid:13) of the protocol ﬂow). Since the state parame-
ter is not used, the RP cannot verify whether this request
was preceded by a social login request by the user. Our
security monitor blocks the (out-of-order) request since
it matches the pattern φ3, which is allowed by the au-
tomaton in Figure 2 only in state access. Thus, the attack
is successfully prevented.
4.1.2 Secrecy Violations
This category covers attacks where sensitive information
is unintentionally leaked, e.g., via the Referer header or
because of the presence of open redirectors at RP. Sen-
sitive data can either be leaked to untrusted third parties
that should not be involved in the protocol ﬂow (as in the
state leak attack) or protocol parties that are not trusted
for a speciﬁc secret (as in the 307 redirect attack). WPSE
can prevent this class of attacks since the secrecy policy
allows one to specify the origins that are entitled to re-
ceive a secret.
We illustrate how the monitor prevents these attacks in
case of the state leak attack discussed in Section 2.3, fo-
cusing on the authorization code. In the attack, the autho-
rization code is leaked via the Referer header of the re-
quest fetching a resource from the attacker website which
is embedded in the page located at the redirect URI of RP
(step 4(cid:13) of the protocol). When the authorization code
(authcode) is received (step 2(cid:13)), the monitor extracts
it from the Location header and replaces it with a ran-
dom placeholder before the request is processed by the
browser. After step 4(cid:13), the request to the attacker’s web-
site is sent, but the monitor does not replace the place-
holder with the actual value of the authorization code
since the secrecy set associated to authcode in πS does
not include the domain of the attacker.
4.1.3
Integrity Violations
This category contains attacks that maintain the general
protocol ﬂow, but the contents of the exchanged mes-
sages do not satisfy some integrity constraints required
by the protocol. WPSE can prevent these attacks by en-
forcing browser-side integrity checks.
Consider the na¨ıve RP session integrity attack pre-
sented in Section 2.4. In this attack, the malicious iden-
tity provider AIdP redirects the user’s browser to the redi-
rect URI of the honest identity provider HIdP at RP dur-
ing step 4(cid:13) of the protocol. At step 2(cid:13), the redirect URI is
provided to AIdP as parameter. This request corresponds
to the pattern φ1 of the automation and the redirect URI
associated to AIdP is bound to the identiﬁer uri1. At
step 4(cid:13), AIdP redirects the browser to a different redirect
URI, which is bound to the identiﬁer uri2. Although
the shape of the request satisﬁes pattern φ3, the moni-
tor cannot move from state access to state end since the