`python39`{.literal}。
以下 SPEC 文件 [**示例中显示了 `python3-detox`{.literal}
软件包**]{.strong} 的其他细节。有关此类细节的描述，请参见以下示例注释。
``` programlisting
%global modname detox                                                           
Name:           python3-detox                                                   
Version:        0.12
Release:        4%{?dist}
Summary:        Distributing activities of the tox tool
License:        MIT
URL:            https://pypi.io/project/detox
Source0:        https://pypi.io/packages/source/d/%{modname}/%{modname}-%{version}.tar.gz
BuildArch:      noarch
BuildRequires:  python36-devel                                                  
BuildRequires:  python3-setuptools
BuildRequires:  python36-rpm-macros
BuildRequires:  python3-six
BuildRequires:  python3-tox
BuildRequires:  python3-py
BuildRequires:  python3-eventlet
%?python_enable_dependency_generator                                            
%description
Detox is the distributed version of the tox python testing tool. It makes efficient use of multiple CPUs by running all possible activities in parallel.
Detox has the same options and configuration that tox has, so after installation you can run it in the same way and with the same options that you use for tox.
    $ detox
%prep
%autosetup -n %{modname}-%{version}
%build
%py3_build                                                                      
%install
%py3_install
%check
%{__python3} setup.py test                                                      
%files -n python3-%{modname}
%doc CHANGELOG
%license LICENSE
%{_bindir}/detox
%{python3_sitelib}/%{modname}/
%{python3_sitelib}/%{modname}-%{version}*
%changelog
...
```
::: calloutlist
  ----------------------------------------------------------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [![1](images/callouts/1.png)](#assembly_packaging-python-3-rpms.html#CO1-1)   [**modname**]{.strong} 宏包含 Python 项目的名称。在本例中是 `detox`{.literal}。
  [![2](images/callouts/2.png)](#assembly_packaging-python-3-rpms.html#CO1-2)   将 Python 项目打包到 RPM 中时，python `3`{.literal} 前缀始终需要添加到项目的原始名称。这里的原始名称是 `detox`{.literal}，RPM [**的名称为 python**]{.strong} `3-detox`{.literal}。
  [![3](images/callouts/3.png)](#assembly_packaging-python-3-rpms.html#CO1-3)   [**BuildRequires**]{.strong} 指定构建和测试此软件包所需的软件包。在 BuildRequires 中，始终包含一些项目，以提供构建 Python 软件包所需的工具： `python36-devel`{.literal} 和 `python3-setuptools`{.literal}。需要 `python36-rpm-macros`{.literal} 软件包，以便 `/usr/bin/python3`{.literal} 解释器指令的文件自动更改为 `/usr/bin/python3.6`{.literal}。
  [![4](images/callouts/4.png)](#assembly_packaging-python-3-rpms.html#CO1-4)   每个 Python 软件包都需要一些其他软件包才能正常工作。此类软件包也需要在 SPEC 文件中指定。要指定 [**依赖项**]{.strong}，您可以使用 [**%python_enable_dependency_generator**]{.strong} 宏自动使用 `setup.py`{.literal} 文件中定义的依赖关系。如果软件包有未使用 Setuptools 指定的依赖关系，请在附加 `Requires`{.literal} 指令中指定它们。
  [![5](images/callouts/5.png)](#assembly_packaging-python-3-rpms.html#CO1-5)   [**%py3_build**]{.strong} 和 [**%py3_install**]{.strong} 宏分别运行 `setup.py build`{.literal} 和 `setup.py 安装`{.literal} 命令，以及指定安装位置、要使用的解释器和其他详情的额外参数。
  [![6](images/callouts/6.png)](#assembly_packaging-python-3-rpms.html#CO1-6)   [**check**]{.strong} 部分提供了一个运行正确版本的 Python 的宏。[**%{\_\_python3}**]{.strong} 宏包含 Python 3 解释器的路径，如 `/usr/bin/python3`{.literal}。我们建议始终使用宏而不是字面路径。
  ----------------------------------------------------------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
:::
:::
::: section
::: titlepage
# []{#assembly_packaging-python-3-rpms.html#con_common-macros-for-python-3-rpms_assembly_packaging-python-3-rpms}Python 3 RPM 的常见宏 {.title}
:::
在 SPEC 文件中，始终将以下 Macros 描述的宏用于 Python 3 RPM
表，而不是硬编码它们的值。
在宏名称中，始终使用 `python3`{.literal} 或 `python2`{.literal}
而不是未指定版本的 `python`{.literal}。将 SPEC 文件的
`BuildRequires`{.literal} 中的特定 Python 3 版本配置为
`python36-rpm-macros`{.literal}、python`38-rpm-macros`{.literal} 或
`python39-rpm-macros`{.literal}。
::: table
[]{#assembly_packaging-python-3-rpms.html#idm140142018132336}
**表 42.1. Python 3 RPM 的宏**
::: table-contents
  宏                    普通定义                             描述
  --------------------- ------------------------------------ ------------------------------------------------------------------
  %{\_\_python3}        /usr/bin/python3                     Python 3 解释器
  %{python3_version}    3.6                                  Python 3 解释器的完整版本。
  %{python3_sitelib}    /usr/lib/python3.6/site-packages     安装纯Python 模块的位置。
  %{python3_sitearch}   /usr/lib64/python3.6/site-packages   安装包含架构特定扩展的模块的位置。
  %py3_build                                                 使用适合系统软件包的参数运行 `setup.py build`{.literal} 命令。
  %py3_install                                               使用适合系统软件包的参数运行 `setup.py install`{.literal} 命令。
:::
:::
:::
::: section
::: titlepage
# []{#assembly_packaging-python-3-rpms.html#con_automatic-provides-for-python-rpms_assembly_packaging-python-3-rpms}自动提供 Python RPM {.title}
:::
在打包 Python 项目时，如果这些目录存在，请确保在生成的 RPM
中包含以下目录：
::: itemizedlist
-   `.dist-info`{.literal}
-   `.egg-info`{.literal}
-   `.egg-link`{.literal}
:::
从这些目录中，RPM 构建过程会自动生成虚拟 `pythonX.Ydist`{.literal}
提供，例如 `python3.6dist(detox)。`{.literal}这些虚拟提供由
[**%python_enable_dependency_generator**]{.strong} 宏指定的软件包使用。
:::
:::
[]{#assembly_handling-interpreter-directives-in-python-scripts.html}
::: chapter
::: titlepage
# []{#assembly_handling-interpreter-directives-in-python-scripts.html#assembly_handling-interpreter-directives-in-python-scripts}第 43 章 在 Python 脚本中处理解释器指令 {.title}
:::
在 Red Hat Enterprise Linux 8 中，可执行 Python
脚本应该使用至少明确指定主要 Python 版本的解释器指令（也称为 hashbangs
或 shebang）。例如：
``` literallayout
#!/usr/bin/python3
#!/usr/bin/python3.6
#!/usr/bin/python2
```
构建任何 RPM 软件包时，会自动运行
`/usr/lib/rpm/redhat/brp-mangle-shebangs`{.literal} buildroot
策略(BRP)脚本，并尝试更正所有可执行文件中的解释器指令。
当遇到带有模糊解释器指令的 Python 脚本时，BRP 脚本会生成错误，例如：
``` literallayout
#!/usr/bin/python
```
或者
``` literallayout
#!/usr/bin/env python
```
::: section
::: titlepage
# []{#assembly_handling-interpreter-directives-in-python-scripts.html#proc_modifying-interpreter-directives-in-python-scripts_assembly_handling-interpreter-directives-in-python-scripts}在 Python 脚本中修改解释器指令 {.title}
:::
修改 Python 脚本中会导致 RPM 构建时构建错误的解释器指令。
::: itemizedlist
**先决条件**
-   您的 Python 脚本中的一些解释指令会导致构建错误。
:::
::: title
**流程**
:::
要修改解释程序指令，请完成以下任务之一：
::: itemizedlist
-   应用 `platform-python-devel`{.literal} 软件包中的
    `pathfix.py`{.literal} 脚本：
    ``` literallayout
    # pathfix.py -pn -i %{__python3} PATH …​
    ```
    请注意，可以指定 `多个PATH`{.literal}。如果 `PATH`{.literal}
    是一个目录，`pathfix.py`{.literal} 递归扫描与模式
    `^[a-zA-Z0-9_]+\.py$`{.literal} 匹配的任何 Python
    脚本，而不仅仅是具有模糊解释器指令的 Python 脚本。在
    `%prep`{.literal} 部分或 `%install`{.literal} 部分末尾添加此命令。
-   修改打包的 Python 脚本，使其符合预期的格式。为此，也可在 RPM
    构建过程外使用 `pathfix.py`{.literal}。当在 RPM 构建外运行
    `pathfix.py`{.literal} 时，将上例中的 `%{__python3}`{.literal}
    替换为解释器指令的路径，如 `/usr/bin/python3`{.literal}。
:::
如果打包的 Python 脚本需要 Python 3.6
以外的版本，请调整前面的命令使其包含所需的版本。
:::
::: section
::: titlepage
# []{#assembly_handling-interpreter-directives-in-python-scripts.html#proc_changing-interpreter-directives-in-your-custom-packages_assembly_handling-interpreter-directives-in-python-scripts}在自定义软件包中更改 /usr/bin/python3 解释器指令 {.title}
:::
默认情况下，`/usr/bin/python3`{.literal} 格式的解释器指令被替换为从
`platform-python`{.literal} 软件包指向 Python 的解释器指令，该指令用于
Red Hat Enterprise Linux 的系统工具。您可以更改自定义软件包中的
`/usr/bin/python3`{.literal} 解释器指令，使其指向从 AppStream
存储库安装的特定版本的 Python。
::: itemizedlist
**流程**
-   要为特定版本的 Python 构建软件包，请将相应
    `python 软件包的 python*-rpm-macros`{.literal} 子 `软件包`{.literal}
    添加到 SPEC 文件的 [**BuildRequires**]{.strong} 部分。例如，对于
    Python 3.6，包括以下行：
    ``` literallayout
    BuildRequires:  python36-rpm-macros
    ```
    因此，自定义软件包中的 `/usr/bin/python3`{.literal}
    解释器指令会自动转换为 `/usr/bin/python3.6`{.literal}。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要防止 BRP 脚本检查和修改解释器指令，请使用以下 RPM 指令：
``` literallayout
%undefine %brp_mangle_shebangs
```
:::
:::
:::
[]{#assembly_using-the-php-scripting-language.html}
::: chapter
::: titlepage
# []{#assembly_using-the-php-scripting-language.html#assembly_using-the-php-scripting-language}第 44 章 使用 PHP 脚本语言 {.title}
:::
Hypertext
Preor(PHP)是一种通用脚本语言，主要用于服务器端脚本编写，允许您使用 Web
服务器运行 PHP 代码。
在 RHEL 8 中，PHP 脚本语言由 `php`{.literal}
模块提供，该模块在多个流（版本）中可用。
根据您的用例，您可以安装所选模块流的特定配置集：
::: itemizedlist
-   `common`{.literal} - 使用 Web
    服务器编写服务器端脚本的默认配置集。它包括多个广泛使用的扩展。
-   `minimal`{.literal} - 此配置集只安装命令行界面，以便使用 PHP
    进行脚本，而无需使用 Web 服务器。
-   `devel`{.literal} - 此配置集包含来自 common `配置文件`{.literal}
    的软件包，以及用于开发目的的其他软件包。
:::
::: section
::: titlepage
# []{#assembly_using-the-php-scripting-language.html#installing-the-php-scripting-language_assembly_using-the-php-scripting-language}安装 PHP 脚本语言 {.title}
:::
本节论述了如何安装所选版本的 `php`{.literal} 模块。
::: itemizedlist
**流程**
-   要使用默认配置集安装 `php`{.literal} 模块流，请使用：
    ``` literallayout
    # yum module install php:stream
    ```
    使用您要安装的 PHP 版本替换 [*stream*]{.emphasis}。
    例如，要安装 PHP 7.4：
    ``` literallayout
    # yum module install php:7.4
    ```
    默认 `通用`{.literal} 配置集也会安装 `php-fpm`{.literal}
    软件包，并预配置 PHP 以用于 `Apache HTTP 服务器`{.literal} 或
    `nginx`{.literal}。
-   要安装 `php`{.literal} 模块流的特定配置集，请使用：
    ``` literallayout
    # yum module install php:stream/profile
    ```
    [*使用所需版本和配置文件替换*]{.emphasis}
    [*stream*]{.emphasis}，使用您要安装的配置集的名称。
    例如，安装 PHP 7.4 以在没有 web 服务器的情况下使用：
    ``` literallayout
    # yum module install php:7.4/minimal
    ```
:::
::: itemizedlist
**其它资源**
-   如果要从 RHEL 8 中的早期版本的 PHP 升级，[请参阅
    切换到更新的流](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/installing_managing_and_removing_user-space_components/index#switching-to-a-later-stream_managing-versions-of-appstream-content){.link}。
-   有关管理 RHEL 8 模块和流的更多信息，请参阅
    [安装、管理和删除用户空间组件](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/installing_managing_and_removing_user-space_components/index){.link}。
:::
:::
::: section
::: titlepage
# []{#assembly_using-the-php-scripting-language.html#using-the-php-scripting-language-with-a-web-server_assembly_using-the-php-scripting-language}将 PHP 脚本语言用于 Web 服务器 {.title}
:::
::: section
::: titlepage
## []{#assembly_using-the-php-scripting-language.html#using-php-with-the-apache-http-server_using-the-php-scripting-language-with-a-web-server}将 PHP 与 Apache HTTP 服务器搭配使用 {.title}
:::
在 Red Hat Enterprise Linux 8 中，`Apache HTTP 服务器`{.literal}
允许您将 PHP 作为 FastCGI 进程服务器运行。FastCGI
进程管理器(FPM)是一种替代 PHP FastCGI 守护进程，允许网站管理高负载。PHP
在 RHEL 8 中默认使用 FastCGI 进程管理器。
这部分论述了如何使用 FastCGI 进程服务器运行 PHP 代码。
::: itemizedlist
**先决条件**
-   PHP 脚本语言安装在您的系统上。
    请查看
-   [安装 PHP
    脚本语言](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#installing-the-php-scripting-language_using-the-php-scripting-language){.link}
:::
::: orderedlist
**流程**
1.  安装 `httpd`{.literal} 模块：
    ``` literallayout