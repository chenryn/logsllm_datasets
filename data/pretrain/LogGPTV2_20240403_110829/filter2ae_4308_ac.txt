在了解上面的基础知识后，就很好理解后面的攻击流程了，攻击者通过已知 `RememberMe` 密文使用 `Padding Oracle Attack`
爆破和篡改密文，构造可解密的恶意的反序列化数据，触发反序列化漏洞。  
之前提到过 `Padding Oracle Attack` 是利用类似于盲注的思想来判断是否爆破成功的，在验证 `Padding`
失败时的返回信息应该不同，那我们看一下在`Shiro`中，验证`Padding`失败时的返回值？
关注点依旧从 `AbstractRememberMeManager#getRememberedPrincipals` 中开始
    public PrincipalCollection getRememberedPrincipals(SubjectContext subjectContext) {
        PrincipalCollection principals = null;
        try {
            byte[] bytes = getRememberedSerializedIdentity(subjectContext);
            //SHIRO-138 - only call convertBytesToPrincipals if bytes exist:
            if (bytes != null && bytes.length > 0) {
                principals = convertBytesToPrincipals(bytes, subjectContext);
            }
        } catch (RuntimeException re) {
            principals = onRememberedPrincipalFailure(re, subjectContext);
        }
        return principals;
    }
负责解密的 `convertBytesToPrincipals` 方法会调用 `CipherService` 的 `decrypt`
方法，调用栈如下所示如下:
其中 `PKCS5Padding#unpad` 方法对数据的填充格式进行判断，有问题会返回 `-1`；  
当返回值小于`0`时，`CipherCore#doFinal` 方法会抛出 `BadPaddingException` 异常；  
接着 `JcaCipherService#crypt` 方法、
`AbstractRememberMeManager#getRememberedPrincipals`
方法均返回异常，而且`AbstractRememberMeManager#getRememberedPrincipals`方法还好调用`onRememberedPrincipalFailure`
移除 `rememberMe cookie`并添加 `deleteMe`。
由此可见，只要 `padding` 错误，服务端就会返回一个 `cookie: rememberMe=deleteMe;`，攻击者可以借由此特征进行
`Padding Oracle Attack`。
### 漏洞复现
直接使用 [longofo 师傅的项目](https://github.com/longofo/PaddingOracleAttack-Shiro-721)。  
首先获取一个有效的 `rememberMe` 值，其次生成一个反序列化利用的 `payload`，然后使用如下参数执行攻击。
    java -jar PaddingOracleAttack-1.0-SNAPSHOT.jar http://localhost:8080/samples_web_war/ "P5MwbBios...sdSdf" 16 cb.ser
经过一段时间后，生成`payload`，替换`rememberMe`的值，发送到服务器  
这个洞需要大量的请求，在实际中应该不太可能攻击成功。
问题：  
由于系统初始化后，只要不重启服务器，密钥就固定了，那应该就可以攻击成功一次之后，后面继续攻击应该就不需要大量请求了，可以直接生成`payload`，但是目前不知道需要保存哪些值才能实现这种需求  
不完全解答：  
改了一下代码，目前只实现攻击一次后，`ser`不变的情况下，可以快速生成，但是`ser`改变，就需要重新生成。  
原因在于原代码是基于`nextCipherTextBlock`也就是`nextBLock`计算的`tmpIV`，继而计算的`nextBLock`。所以无法通过保存`nextBLock`或`tmpIV`达到通用的目标。但我认为从攻击算法的角度来看，还是有办法实现的。  
也有师傅对利用代码进行分析后，实现了`payload`瘦身的[功能](https://www.cnblogs.com/wh4am1/p/12761959.html)
### 漏洞修复
在 `1.4.2` 版本的更新
[Commit](https://github.com/apache/shiro/commit/a8018783373ff5e5210225069c9919e071597d5e)
中对此漏洞进行了修复 ，在父类 `JcaCipherService` 中写了一个抽象方法 `createParameterSpec()`
，该方法返回加密算法对应的类，并在 `AesCipherService` 中重写了这个方法，默认使用 `GCM` 加密模式，避免此类攻击。  
## CVE-2020-1957
### 漏洞信息
漏洞编号：[CVE-2020-1957](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1957) /
[CNVD-2020-20984](https://www.cnvd.org.cn/flaw/show/CNVD-2020-20984)
/[SHIRO-682](https://issues.apache.org/jira/browse/SHIRO-682)  
影响版本：`shiro < 1.5.2`  
漏洞描述：利用 `Shiro` 和 `Spring` 对 `URL` 的处理的差异化，越权并成功访问。  
漏洞补丁：[Commit](https://github.com/apache/shiro/commit/589f10d40414a815dbcaf1f1500a51f41258ef70)
[Commit](https://github.com/apache/shiro/commit/9762f97926ba99ac0d958e088cae3be8b657948d)
[Commit](https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce)  
参考：[Shiro权限绕过漏洞详细分析](https://www.anquanke.com/post/id/226899) [Ruil1n
师傅](http://rui0.cn/archives/1643)
### 漏洞分析
### SHIRO-682
本漏洞起源于 [SHIRO-682](https://issues.apache.org/jira/browse/SHIRO-682)。在 `Spring`
中，`/resource/xx` 与 `/resource/xx/` 都会被截成`/resource/xx`以访问相应资源；在 `shiro`
中，`/resource/xx` 与 `/resource/xx/`被视为两个不同路径。所以在 `Spring` 集成 `shiro`
时，只需要在访问路径后添加 `/` 就存在绕过权限校验的可能。  
下面通过复现进行分析(分析、测试版本`1.4.2`)：  
首先`shiro.ini`中[urls]配置如下:
    [urls]
    # anon：匿名拦截器，不需登录就能访问，一般用于静态资源，或者移动端接口。
    # authc：登录拦截器，需要登录认证才能访问的资源。
    /login.jsp = authc
    /logout = logout
    /toJsonPOJO = authc, perms["audit:list"]
    /** = anon
输入`/toJsonPOJO`时，`shiro`对其进行判断，从`shior.ini`或其他配置中进行匹配。当匹配到`/toJsonPOJO`时，匹配成功，跳出循环。  
此时，跳转至登陆界面。  
输入`/toJsonPOJO/`时，`shiro`对其进行判断，当匹配到`/toJsonPOJO`时，匹配失败，继续匹配；当匹配到`/**`时，匹配成功，跳出循环。  
接着到了`springframework`中的判断，这里`/toJsonPOJO/`和`/toJsonPOJO`是可以匹配成功的  
此时，成功绕过  
### 其他绕过方式
除了上面的绕过方式，本 `CVE` 还存在另一个绕过。利用的是 `shiro` 和 `spring` 对 `url` 中的 `;`
处理的差异进行绕过并成功访问。  
分析、测试版本`1.4.2`
#### 绕过分析
首先进入`Shiro`中  
首先在`org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver.class#getChain`处下断点，进行调试，访问`http://localhost:8080/xx/..;/toJsonPOJO`  
单步调试进入`this.getPathWithinApplication(request)`，在`WebUtils#getPathWithinApplication()`中，通过`getContextPath(request)`，获取到上下文信息后，再用`getRequestUri(request)`获取具体的`uri`。进入`getRequestUri()`方法，在`return`前，获取到的`uri`为`/xx/..;/toJsonPOJO`  
接下来分析一下`return normalize(decodeAndCleanUriString(request, uri));`  
首先进入`decodeAndCleanUriString`  
传入的参数`uri`是`/xx/..;/toJsonPOJO`,然后通过语句`int semicolonIndex =
uri.indexOf(59);`找出`uri`中分号的位置，`59`也就是`;`的`ASCII码`  
如果`uri`中有分号，就返回分号前的字段，否则返回整个`uri`。  
接着进入`normalize`，参数`uri`已经变成`/xx/..`，`normalize`内部对传入的路径进行标准化规范处理，相关操作包括替换反斜线、替换`//`为`/`等，最后得到返回的`uri`  
此时`return normalize(decodeAndCleanUriString(request,
uri));`结果为`/xx/..`，也就是说`getRequestUri(request)`获取的`uri`为`/xx/..`  
一路回到`getChain`，经过上面的步骤，得到`requestURI`值为`/xx/..`，接下来在`while`循环里使用`pathMatches(pathPattern,
requestURI)`进行权限校验，此时只有`/**`能够与`/xx/..`匹配成功，`/**`是`anon`权限，不需要登陆就能访问，绕过了`/toJsonPOJO`的`authc`权限  
此时`Shiro`部分的权限绕过了，那么`Spring`部分的路径是怎么匹配的呢？  
`url`经过`shiro`的处理认证通过后，就会进入`spring`中进行解析，我们在`UrlPathHelper#getLookupPathForRequest`下断点  
先进入`getPathWithinApplication()`，通过`this.getRequestUri(request)`获取`uri`  
获取到的`uri`值为`/xx/..;/toJsonPOJO`，在`return`之前进入`decodeAndCleanUriString(request,
uri)`  
传进来的参数`uri`为`/xx/..;/toJsonPOJO`，经过`removeSemicolonContent(uri)`后移除`uri`中`/`与`/`之间的的分号以及分号后面的内容；经过`decodeRequestString(request,
uri)`后对`uri`进行解码；经过`getSanitizedPath(uri)`后将路径中`//`替换为`/`。此时返回的`uri`值为`/xx/../toJsonPOJO`  
步入`getPathWithinServletMapping()`后，传入的参数`pathWithinApp`值为`/xx/../toJsonPOJO`。依次通过`UrlPathHelper#getServletPath`、`HttpServletRequestWrapper#getServletPath`、`Request#getServletPath`获取到我们实际访问的`url：http://localhost:8080/toJsonPOJO`后返回，最终实现绕过权限访问  
经过测试当`uri`为`123;/..;345/;../.;/alter/..;/;/;///////;/;/;awdwadwa/toJsonPOJO`时，`Shiro`对`/123`进行权限验证;  
`Spring`的`org.springframework.web.util.UrlPathHelper`中，`getPathWithinApplication(request)`值为`/123/.././alter/../toJsonPOJO`;  
`this.getPathWithinServletMapping(request,
pathWithinApp)`值为`/toJsonPOJO`，可以进行绕过  
上面这个 `payload` 只能在较低版本的 `Spring Boot` 上使用。  
根据[Ruil1n 师傅](http://rui0.cn/archives/1643)介绍:  
当 `Spring Boot` 版本在小于等于 `2.3.0.RELEASE` 的情况下，`alwaysUseFullPath` 为默认值
`false`，这会使得其获取 `ServletPath` ，所以在路由匹配时相当于会进行路径标准化包括对 `%2e`
解码以及处理跨目录，这可能导致身份验证绕过。而反过来由于高版本将 `alwaysUseFullPath` 自动配置成了 `true`
从而开启全路径，又可能导致一些安全问题。  
所以在高版本上只能试着寻找逻辑上有没有漏洞，然后进行绕过。比如程序配置了访问路径 `/alter/**` 为 `anon`，但是指定了其中的一个
`/alter/page`为 `authc`。这时在不跳目录的情况下，可以使用如下请求绕过：  
`http://127.0.0.1:8080/alter//;aaaa/;...///////;/;/;awdwadwa/page`
### 漏洞修复
先是在
[Commit](https://github.com/apache/shiro/commit/589f10d40414a815dbcaf1f1500a51f41258ef70)
的`PathMatchingFilter#pathsMatch`
和`PathMatchingFilterChainResolver#getChain`方法中添加了对访问路径后缀为 `/` 的支持  
然后在
[Commit](https://github.com/apache/shiro/commit/9762f97926ba99ac0d958e088cae3be8b657948d)，除了
`endsWith` 还添加了 `equals` 的判断。是修复由于上一次提交，导致访问路径为 `/` 时抛出的异常。
在
[Commit](https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce)中，
`shiro` 使用
`request.getContextPath()`、`request.getServletPath()`、`request.getPathInfo()`
拼接构造`uri`替代`request.getRequestURI()` 来修复`;` 绕过  
## CVE-2020-11989
### 漏洞信息
漏洞编号：[CVE-2020-11989](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1957) /
[SHIRO-782](https://www.cnvd.org.cn/flaw/show/CNVD-2020-20984)  
影响版本：`shiro < 1.5.3`  
漏洞描述：在`Shiro < 1.5.3`的情况下，将`Shiro`与`Spring Controller`一起使用时，相应请求可能会导致身份验证绕过。  
漏洞补丁：[Commit](https://github.com/apache/shiro/commit/589f10d40414a815dbcaf1f1500a51f41258ef70)  
参考： [腾讯安全玄武实验室 Ruilin师傅](https://xlab.tencent.com/cn/2020/06/30/xlab-20-002/)
[边界无限 泪笑师傅](https://mp.weixin.qq.com/s/yb6Tb7zSTKKmBlcNVz0MBA)
这个漏洞有两种绕过方式，分别由腾讯安全玄武实验室的`Ruilin`师傅和来自边界无限的泪笑师傅报告
### 漏洞分析 —— 两次解码绕过
#### 限制
这个场景下需要一些限制条件，首先配置文件的`ant`风格需要是`*`而不是`**`，测试发现，`?`也可以  