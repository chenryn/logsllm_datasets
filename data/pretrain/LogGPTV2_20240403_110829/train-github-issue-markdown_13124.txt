This is difficult to explain, so I've written an isolated test case:
    let instances   = new Map();
    class Resource{
        static get(id){
            let list = instances.get(this) || {};
            return list[id];
        }
        static add(id, instance){
            let list = instances.get(this);
            if(!list)
                instances.set(this, list = {});
            list[id] = instance;
        }
        constructor(id){
            let type        = this.constructor;
            let byId        = type.get(id);
            // Already created. Return reference to existing instance.
            if(byId){
                return byId;
            }
            this.id = id;
            type.add(id, this);
        }
    }
    class SubtypeResource extends Resource{
    }
    let resourceA = new SubtypeResource(200);
    let resourceB = new SubtypeResource(200);
    console.log(resourceA === resourceB); // "true" if natively supported; "false" if transpiled
Blacklisting `es6.classes` solves the problem, but that naturally requires an
interpreter to support it natively. I'm running the latest version of Node
(4.2.1), so it's no big deal. But it'd be different if it were for client-side
delivery.
This only happens with subclasses, so it might have something to do with the
way the transformer maps references to constructor functions. E.g., the
following code runs fine either natively or through Babel:
    console.log(new Resource(200) === new Resource(200)); // true
* * *
To summarise what my code's doing: I'm writing a Node program to scrape data
from a site that lacks a formal API. Resources are loaded once and done so
asynchronously, collating patches of data from numerous different sources. I
thought an elegant approach would be to return references to existing
instances instead of manually checking if they've been created already:
    let instance;
    if(SubtypeResource.get(id)){
        instance = SubtypeResource.get(id);
    }
    else{
        instance = new SubtypeResource(id);
        SubtypeResource.add(id, instance);
    }