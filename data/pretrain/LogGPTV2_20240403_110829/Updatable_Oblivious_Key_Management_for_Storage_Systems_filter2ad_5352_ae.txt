uokms(A, SIM, (cid:96))]
15
then reduction R, given access to A, has the same probability  of solving the OMDH-IO problem.
It follows that under the OMDH-IO assumption quantity  must be negligible, which implies that
the UOKMS scheme is secure. We note that in one step along these SIM modiﬁcations we replace
the real symmetric encryption Enc with the simulator assumed by the RNC property of SKE Enc.
We provide the details of the proof now.
The proof relies on the ROM model for function H : G→{0, 1}(cid:96) used in UOKMS scheme
in Figure 4. Speciﬁcally, we treat H as an external entity A needs to query to compute H
outputs, simulator SIM and reduction R intercept A’s calls to H, and we measure probabilities
p0 = Pr[1←Expreal
uokms(A, SIM, (cid:96))] over the randomness of H. For
simplicity of notation we assume that group G is ﬁxed for every security parameter (cid:96) and we as-
sume a non-uniform security model both for the OMDH-IO assumption and UOKMS security. To
reduce visual clutter we denote plaintext ﬁles as m instead of Obj and we omit idenﬁers ObjId in
ciphertexts.
uokms(A, (cid:96))] and p1 = Pr[1←Expideal
We will ﬁrst describe game G, which reproduces the same distribution A sees in the real security
game Expreal
uokms, but does it in a way which makes it easier to understand simulator SIM which we
will describe next. Game G picks k ∈ Zq and sets the ﬁrst epoch key as (k0, y0) = (k, gk). Game
G also picks a list of random group elements g1, ..., gN in G, where N is the upper-bound on the
number of Enc queries A makes. Then for every i > 0, G picks the following values: If A corrupts
KmS in epoch i then G picks random ki ← Zq and outputs (ki, yi) for yi ← gki. (If A corrupts KmS
for two epochs in the row G also outputs ∆i = ki−1/ki.) If A corrupts StS in epoch i then G acts
depending on which party A corrupted in epoch i − 1: (case 1) If it was StS then G picks random
∆i ← Zq and outputs yi ← yi−1
1/∆i; (case 2) If it was KmS then G picks random ∆j+1,i ← Zq
and outputs yi ← yj
1/∆j+1,i where j was the last epoch when A corrupted StS before A corrupted
KmS in epoch i − 1. Let EK be the set of epochs when A corrupts KmS and ES the set of epochs
when A corrupts StS. The above process deﬁnes value δi for each i ∈ ES s.t. yi = y1/δi (hence
ki = k/δi), and G can compute this δi as either δi−1 · ∆i, if (i− 1) ∈ ES, or as δj · ∆j+1,i, if j ∈ ES
and {j + 1, ..., i − 1} ⊆ EK. Given these values, G services oracles Enc, Dec, and UEnc at epoch
i ∈ ES (note that these calls are disallowed if i ∈ EK) as follows:
• G replies to n-th call to Enc(m) with c = (w, Encdek(m)) where w = (gn)δi and dek = H(z)
for z = (gn)k; (Note that z = wk/δi, hence c is distributed as in the real interaction.)
• G replies to message u to Dec with v = (u1/δi)k;
• G replies to UEnc(t(cid:48), c) for c = (w, e) with (w(cid:48), e) for w(cid:48) = wδi/δt(cid:48)
(wδi·kt(cid:48) )1/k if t(cid:48) ∈ EK.
if t(cid:48) ∈ ES, and w(cid:48) =
The correctness of Enc and Dec responses follows because ki = k/δi, and as for UEnc, note that
ki = k/δi, and the implicit update from epoch t(cid:48) to epoch i is ∆t(cid:48),i = kt(cid:48)/ki, which together
implies that ∆t(cid:48),i = (kt · δi)· (1/k). Thus game G reproduces the exact same view as security game
Expreal
uokms.
Simulator SIM interacts with an ideal experiment Expideal
uokms and executes the same algorithm
as game G – including picking the initial key k and keys ki if i ∈ EK and update-related values
δi and ∆j,i if i ∈ ES as described above (and deﬁning corresponding δi’s and ki’s). For handling
oracles Enc and Dec, SIM resorts to the (stateful) simulator SIME assumed by the Receiver Non-
Committing (RNC) property of the symmetric encryption Enc. First, when A sends t-th query
m to oracle Enc in epoch i ∈ ES, we put m at position t in list L, and SIM replies to A with
c = (w, e) for w = (gt)δi and e computed by SIME on input (t,|m|). Second, when A sends u to
Dec, SIM replies with v = (u1/δi)k and then monitors A’s queries to H: If A makes query z to H
s.t. z1/k = gt for gt ∈ {g1, ..., gN} then SIM asks Expideal
uokms to reveal message m at the t-th position
in list L, sends (t, m) as the Reveal query to SIME, and given key dek as SIME’s response, deﬁnes
16
H(z) = dek. By the RNC property of Enc, pairs (dek, e) produced by SIME are computationally
indistinguishable from random dek and e = Encdek(m). (In particular, this process sets H(z) to a
value indistinguishable from random.)
The only diﬀerence between A’s interaction with G and A’s interaction with SIM (which in
uokms) is if in the latter case A queries H on arguments (gi)k for more than
turn interacts with Expideal
Q elements in {g1, ..., gN} where Q is the number of A’s decryption queries: Given Q decryption
queries SIM is allowed to learn only Q items in list L, so it can embed correct messages as decryptions
of Q challenge ciphertexts, involving Q challenge points {gjs}s=1,...,Q, but SIM will not be able to
decrypt correctly the (Q + 1)-st ciphertext (w, e) formed as w = (gjQ+1)δi s.t. A queries H on
z = (gjQ+1)k = wki. In other words, if there is  diﬀerence between P r[1 ← Expreal
uokms(A, (cid:96))] and
Pr[1 ← Expideal
uokms(A, SIM, (cid:96))] then  is upper-bounded by the probability that A queries H on values
(gj)k for Q+1 points gj in {g1, ..., gN}. But by inspection of SIM one can see that SIM can be readily
changed to reduction R against the OMDH-IO problem: R follows the algorithm of SIM except
that uses the OMDH-IO challenge key gk as y, it gets points (g1, . . . , gN ) as part of the OMDH-IO
challenge, and it uses OMDH-IO oracles (·)k, (·)1/k instead of using exponent k directly. Note that
SIM uses (·)k only Q times, to service the Q decryption oracle queries, and if A makes queries to
H on Q + 1 arguments (gj)k with probability , then R will break OMDH-IO with probability 
because R can identify such queries with oracle (·)1/k. This completes the proof of Theorem 3. (cid:3)
5 Threshold OKMS and UOKMS
The key management systems (particularly for storage applications) that motivate our work are
often characterized by the large amounts of data they store as well as the value and long-lived
nature of this data. The whole security of such an operation depends on the security of the KMS
client keys, hence the importance of key rotation (as addressed by UOKMS) as a way to limit the
bad eﬀects of key exposure. Yet, the main priority is to prevent these keys from leaking in the ﬁrst
place. Fortunately, all the schemes presented in this paper lend themselves to eﬃcient distributed
implementations via the very eﬃcient Threshold OPRF tdh-op [30] shown in Figure 6.
Key and server initialization. Key k ←R Zq is secret shared using Shamir’s scheme with
parameters n, t; server Si, i = 1, . . . , n, holds share ki.
Threshold Oblivious Computation of Fk(x).
• On input x, client C picks r ←R Zq and computes a := H(cid:48)(x)r; it chooses a subset SE of
[n] of size t + 1 and sends to each server Si, i ∈ SE, the value a and the subset SE.
• Upon receiving a from C, server Si veriﬁes that a ∈ G and if so it responds with bi := aλi·ki
where λi is a Lagrange interpolation coeﬃcient for index i and index set SE.
• When C receives bi from each server Si, i ∈ SE, C outputs as the result of Fk(x) the value
H(x, ((cid:81)
i∈SE bi)1/r)).
Figure 6: Protocol tdh-op [30]: (n, t)-threshold computation of dh-op from Fig. 3
In our application, client keys kc are shared among n KMS servers S1, . . . , Sn, so that the
cooperation of t + 1 of these is needed to compute the OPRF function with kc as the key, while the
compromise of t servers provides no information to the attacker on kc. Moreover, the key kc is never
reconstructed or exists in one place, not even at generation (which is also performed distributively).
17
In addition, this scheme enjoys proactive security [44, 25], namely, the sharing among the n servers
can be refreshed periodically so that the attacker needs to break into t + 1 servers during the
same time period to be able to compromise the key. Servers can be replaced and shares recovered,
protecting secrecy and integrity/availability of the system as needed for long-lived keys.
The tdh-op function from Fig. 6 implements exactly the OPRF as deﬁned in the OKMS scheme
from Fig. 2. For the UOKMS scheme of Fig. 4, the only diﬀerence is in the input from the client
(a random group element rather than a hashed value).
Note on eﬃciency. The dominant cost of computation in tdh-op is one exponentiation for each of
the t + 1 servers and two exponentiations for the client regardless of the values n and t. We note
that tdh-op is described in a simpliﬁed form in Figure 6 where the set of reconstruction parties SE
is assumed to be known by C in advance. If the reconstruction set SE is not known a-priori (i.e.,
more than t + 1 servers are contacted), each Si would respond with aki and C would compute the
interpolation in the exponent at the cost of a single multi-exponentiation (which can be further
optimized when the αi’s are small, e.g., αi = i, using a recent technique from [45]). An additional
important feature of the tdh-op solution is that the aggregation of server values bi into the dh-op
result can be done by a proxy server (one of the threshold servers or a special purpose one) so that
the threshold implementation is transparent to the client.
5.1 Distributed Updates
While a threshold solution greatly increases the security of the KMS keys, one may still want to
apply key rotation, particularly given the eﬃciency of updates in our UOKMS solution. In the
threshold setting this means that at the beginning of a rotation epoch, the servers, that have a
(cid:48)
sharing of a key kc, need to choose a new random client key kc
.
and generate the value ∆ = kc/kc
However, ∆ should only be disclosed to the client C and the storage server StS, calling for a
distributed generation of ∆ where no subset of t or less servers learn anything about this value.
(cid:48)
We show a procedure that given (n, t) Shamir sharing of a key k generates (n, t) sharing of a
new random key k(cid:48) and of the update token ∆ = k/k(cid:48). It uses two standard tools from multi-party
computation: (i) The joint generation of a Shamir sharing ρ1, . . . , ρn of a uniformly random secret
ρ over Zq, e.g., [46] or Fig. 7 of [23], and (ii) a Distributed Multiplication protocol which given the
sharings of secret a and secret b generates a sharing of the product a · b without learning anything
about either secret, e.g., [23].
The distributed update protocol assumes that n servers S1, . . . , Sn have a sharing (k1, . . . , kn)
of a key k. To produce a new key k(cid:48) the servers jointly generate a sharing ρ1, . . . , ρn of a random
secret ρ ∈ Zq and run distributed multiplication to generate shares k(cid:48)
n of the new key deﬁned
as k(cid:48) = ρ · k. Finally, each server Si sends to C and/or StS its share ρi from which the recipient
reconstructs ρ and sets ∆ := ρ−1 [= k(cid:48)/k].
1, . . . , k(cid:48)
5.2 Veriﬁable Threshold (U)OKMS
As noted earlier, being able to verify the correctness of a data encryption key dek before encrypting
an object is an important feature of the OKMS solution and a major advantage over traditional
wrapping-based KM systems (Fig. 1). OKMS Veriﬁability requires checking the correct OPRF
operation by the KmS for which Veriﬁable OPRFs [28] are available, assuming the client possesses
the authentic public key gkc corresponding to KmS key kc. As indicated in Section 2.2, veriﬁability
in the case of UOKMS can be done directly via correct symmetric authenticated decryption, thus
dispensing with the need to check the oblivious operation by KmS. In the threshold case, however,
where multiple servers provide input for decryption, it is necessary to identify misbehaving servers.
Thus, in the threshold case, veriﬁability is needed also for UOKMS.
18
Note that for the single-server dh-op scheme of Fig.3, veriﬁability can be added via a simple
non-interactive zero-knowledge proof of equality of logarithms. For the threshold case, namely,
tdh-op scheme of Fig.6, if we assume that the client possesses the public keys gki corresponding to
the shares ki of key k = kc, then zero-knowledge proofs can be used too for veriﬁcation. However,
this prevents the ability to have a “proxy” (e.g., any one of the n servers) that does the aggregation
of the bi values returned by the servers into the OPRF result. With ZK veriﬁcation, it is the client
itself that needs to do this aggregation. This loses the “client transparency” property of tdh-op
that has the important practical advantage that the client (and its software) need not be aware of
the implementation of the server, whether it is a single-server deployment or a multi-server one.
Next, we present an alternative veriﬁcation procedure that is client transparent. The client only
needs to have the certiﬁed public key gk for key k (regardless of the number of servers). We ﬁrst
describe the scheme for the case of the single-server OPRF dh-op from Fig. 3 and later extend it
to the threshold case. (This works directly for OKMS, the adaptation to UOKMS is immediate.)
The procedure is reminiscent of Chaum’s protocol for undeniable signatures [15] but simpliﬁed by
dispensing of zero-knowledge proofs that are not needed here. It is easy to verify that the integrity
guarantee is unconditional, namely, against unbounded attackers.
• On input x, C sets h = H(cid:48)(x), sets r, c, d ←R Zq, and sends to server S the pair of values
a = hr, b = hcgd.
• S responds with A = ak, B = bk.
• C checks that
= Bc(cid:48)
v−dc(cid:48)
(1)
where r(cid:48) = r−1, c(cid:48) = c−1 (and v = gk). It rejects if the equality does not hold, otherwise C
sets the value of (H(cid:48)(x))k to Ar(cid:48)
which it is already computed for equation (1).
Ar(cid:48)
This procedure involves running dh-op on two diﬀerent values and then verifying consistency via
a single multi-exponentiation by the client. The additional computational cost with respect to the
base dh-op is a single exponentiation for the server and two multi-exponentiations for the client,
essentially doubling the work for the non-veriﬁed case.
We now adapt the scheme to the threshold OPRF tdh-op. The client C sends the same pair of
values (a, b) to each participant server Si who responds with Ai = aki, Bi = bki. Upon gathering
t + 1 responses, C interpolates in the exponent (one multi-exponentiation) to obtain values A, B
and checks the identity (1). If it holds, C sets (H(cid:48)(x))k to Ar(cid:48)
, else it applies the check (1) to each
pair Ai, Bi received by participating server Si using vi = gki instead of v.
The computational cost in the normal case, where the veriﬁcation against v = gk succeeds,
is the same as in the single-server case except for one additional interpolation in the exponent.
If veriﬁcation against v = gk fails then the cost is an additional multi-exponentiation per each
participating server. As said, the special feature of this procedure is that the client can interact