存储空间要求：在MySQL5.6.4之前，为8个字节；那以后的版本，还需要外加5个字节，
为0000-00-0000:00:00[.000000]′。
默认值：如果列可以为NULL，则默认值为NULL；如果带有NOT NULL 属性，则默认值
零值：0000-00-0000:00:00[.000000]′。
取值范围：*1000-01-0100:00:00[.000000】~‘9999-12-3123:59:59[.999999]*
允许NULL值。
1在往表的TIMESTAMP列里插入NULL值时，会插入当前的日期和时间，除非列被声明为
且可以随意组合。更多详细信息请参考3.2.6.6节。
定哪一个列会有此“殊荣”。自MySQL5.6.5起，任何TIMESTAMP列都可以拥有这些属性
?
为修改发生时的日期和时间值。
自动更新：当更新行时，修改该行里的任何其他列的值，都会使TIMESTAMP列被更新
自动初始化：当创建新行时，该列的默认值为当前时间戳。
：格式为‘hh:mm:ss[.uuuuuu］’（对于负值，格式为-hh:mm:ss
B.3时态（日期和时间）类型
553
---
## Page 574
554
口
备注：自MySQL5.6.6起，YEAR(2)已被弃用。对于这样的列，可以使用YEAR(4)代替。
存储空间要求：1个字节。
为0000或00。
默认值：如果列可以为 NULL，则默认值为NULL；如果带有NOT NULL 属性，则默认值
零值：对于YEAR（4），零值为0000；对于YEAR（2），零值为00。
的范围限制在1970～2069；另一种选择是，使用YEAR（4)。
但是只显示最后两位数字。如果想要避免存储在YEAR（2）里的值出现歧义，则需要将这些值
取值范围：对于YEAR（4），范围是1901～2155，以及0000；对于YEAR(2），范围相同，
可用属性：除全局属性外，
则M的默认值为4。
含义：年份值。如果给出的话，M只能是2或者4，分别代表格式YY或CCYY。如果省略，
YEAR[(M)]
用于存储小数秒。
存储空间要求：在MySQL5.6.4之前，为4个字节；那以后的版本，还需要外加4个字节，
请参考对“可用属性”项的讨论。
默认值：在创建行时，如果TIMESTAMP列被设置为当前的日期和时间，则DESCRIBE和SHOW
零值：0000-00-0000:00:00[.000000]'。
取值范围：“1970-01-0100:00:01[.000000]＇~2038年（大约）。
存储到TIMESTAMP列时，会将其设置为当前的日期和时间。
如果指定NULL属性，则允许TIMESTAMP列存储NULL值。如果没有指定此属性，则将NULL
附录B数据类型参考
，没有其他特殊属性。
---
## Page 575
采用这种方式编写的，因为那些函数只有引用特定表才会有意义。
达式来熟悉操作符和函数使用方法的人提供了方便。
人一个分号，然后按下Enter键：
试本附录里的示例，可以先调用mysql 程序，在函数调用的前面输入 SELECT，函数调用的后面输
例如：
以后发生的更改，都在各个操作符和函数的描述里进行了说明。
操作符与函数参考
对于某些函数，本附录里的示例包含了完整的SELECT语句；否则，难以演示它们。.2.6节便是
str。它表示的是一个字符串。它可以是一个文字字符串、一个拥有字符串数据类型的表列
expr。它表示的是一个表达式。根据具体的上下文，它可以是一个数字、字符串或者目期/
MySQL并不要求SELECT语句必须要有一个FROM子句——这为我们这些希望通过输入各种表
mysql> SELECT RIGHT('my cat',3);
它表示的是，函数调用RIGHT（‘mycat'，3）将生成一个字符串结果，cat。如果你要自已尝
RIGHT('mycat',3）
其中，表达式expr演示的是如何使用操作符或函数，result展示的是该表达式的计算结果。
操作符和函数的语法描述使用了下面这些约定。
大部分的操作符和函数示例都使用了下面的格式：
时间表达式，也可以是一个常量、表列引用或者其他的表达式。
RIGHT('mycat',3）
expr
cat
附录
→'cat
-result
---
## Page 576
余部分结合在一起。
符紧密。也就是说，它们和表达式里紧随其后的那个项是结合在一起的，而不是和整个表达式的其
级相同的运算符则按从左至右的顺序依次进行计算。
同一行的运算符拥有相同的优先级。优先级高的运算符会在优先级低的运算符之前进行计算。
C.1.1
模式匹配。
C.1
讨论，以及与MySQL使用的类型转换规则有关的详细讨论，请参考3.5.2节。
556
操作符能把数据项组合成表达式，执行算术运算、数值比较、二进制位操作、逻辑操作，以及
口NOT操作符的优先级比！操作符的低。如果想让NOT的优先级和！的一样，需要启用SQL模式
口如果启用了SQL模式PIPES_AS_CONCAT，那么丨I将变成一个字符串连接操作符，而不是一
有些操作符的优先级取决于MySQL服务器的SQL模式或MySQL的版本。
-(2+3)
-2+3
一元操作符（即负号、按位求反、NOT、BINARY和COLLATE）与操作数的绑定关系比二元操作
XOR
AND
INTERVAL
操作符有着各种不同的优先级。
表达式的计算过程往往会涉及各种值之间的类型转换。与类型转换发生的具体环境有关的详细
NOT
BINARY
口省略号（...）表示的是该省略号前面的那个项目可以重复多次。
口n。它表示的是一个整数（字母表里邻近z的那些字母也常用来表示整数）。
个逻辑OR操作符，并且它的优先级将上升至~和一元操作符之间。
1操作符优先级
口
（负号）～(按位求反）
中选取一个。如果列表出现在一对花括号（{））里，则表示必须从中选取一个。
口
口
HIGH_NOT_PRECEDENCE。
操作符
竖线字符（1）用于分隔列表里的各个条目。如果列表出现在一对方括号里，则表示可以从
1方括号（［]）表示的是可选信息。
x。它表示的是一个浮点数（字母表里邻近x的那些字母也常用来表示浮点数）
引用或者一个能生成字符串的表达式。
其他的参数名很少使用，都是在使用时才定义。
DIVMOD
附录C操作符与函数参考
二
势
>>
COLLATE
！=
>=
ELSE
>
、下面按从高到低的优先级顺序列出了各种运算符。其中，处于
INISLIKEREGEXPRLIKE
S-←
一1
优先
---
## Page 577
MySQL会自动地把看起来像数字的字符串转换为相应的数值）。
C.1.3算术操作符
元组。
C.1.2分组操作符
这些操作符用来完成各种标准的算术运算。算术操作符的操作对象是数字，不是字符串（虽然
这些操作符可用于对表达式里的表达项分组，从而控制运算顺序；或者用于将各个值分组成
口如果两个操作数至少有一个是实数，那么+、一、／、*和%所得结果的精度将由精度最大的那
口如果两个操作数都是整数，那么+、-和*运算将使用64位整数。这意味着，涉及大整数的算
口在数字上下文里出现的字符串将被转换为双精度数。
算术操作符遵守以下规则。
口(...)
下面是一些算术操作符。
口
口
口
口
(expr[,expr] ...)
上面列表里最后那个示例表明的是：MySQL 不像某些程序设计语言那样，把+也用作字符
加法操作符。它用于计算两个操作数的和。
2
涉及NULL值的算术运算得到的结果仍然是一个NULL值。
位数加上系统变量div_precision_increment的值（默认值为4）。
在使用操作符/对两个精确值进行除法运算的时候，所得结果的小数位数等于被除数的小数
计算。
在需要将结果当作整数的上下文里，通过操作符/实现的除法运算会使用64位整数进行
个操作数决定。
如果两个操作数都是整数，且其中至少有一个是无符号数，那么计算结果将为无符号数。
术表达式，其运算结果有可能超出64位整数的表示范围。溢出将导致出错。
SELECT *FROM president WHERE （first_name,last_name)=('John,Adams);
这些行构造符同样可以用在不涉及子查询的上下文里。下面这条语句是合法的：
一个行包含3个值，你可以任选以下结构之一，把该行与一个包含3个值的给定元组进行比
值。上面给出的两种语法（有或没有ROW关键字）是等效的。例如，如果某个子查询返回的
这些行构造符可用于对两组（集合）值进行比较。参与比较的两个元组必须包含相同数量的
Row(expr[,expr]...)
式更易读。嵌套的括号表达式会以由内到外的顺序进行计算。
改变表达式中表达项的运算顺序（参考C.1.1节)。括号还可以改善表达式的清晰度，让表达
括号可以用来对表达式里的各个部分进行分组。它们可以改写默认的操作符优先级，从而
'abc'+'def'
SELECT...FROM t2 WHERE(0,1,2）=(SELECT Co11,Co12,CO13 FROM
4.7
+*21d
→2.2500
↑
+
64
7.9
4
C.1操作符
557
---
## Page 578
作符的返回值就将是0。可以对数值或字符串进行比较。操作数会按以下规则进行转换。
C.1.4
558
，如果比较操作的结果为真，比较操作符的返回值就将是1；如果比较操作的结果为假，比较操
口如果十六进制常量是与数字进行比较，那么会被视为二进制串。
口如果两个操作数都是整数，那么它们将按整数方式进行数字比较。
口如果两个操作数都是字符串，那么它们将按字符串方式进行词法比较。对于二进制串，按
口除操作符以外，所有涉及 NULL 值的比较结果都为NULL。
%或MOD
DIV
/口
口*
口－
于：NULLNULL的结果为真，而NULL=NULL 的结果为NULL。）
进制串进行比较。
能会导致错误或者产生毫无意义的结果。对于非二进制串和二进制串之间的比较，则按二
排序规则，逐个字符地进行比较。如果这些字符串使用了不同的字符集，那么这个比较可
字节逐个比较各个对应字节的数字。对于非二进制串，使用表示字符串的字符集所对应的
14.4%3.2
如果两个操作数带有小数部分，那么取模运算所得结构为相除以后得到的那个余数。
12 12
MOD(m,n）。与除法相类似，如果除数为O，则结果为NULL。
取模操作符。它计算的是m除以 n的余数。操作符语法mn或m MODn等价于函数语法
结果会被转换为整数。如果结果大于BIGINT的上限值，则会出现错误。
NULL。如果有一个操作数不是整数，那么这两个操作数都会被当作 DECIMAL 值来运算，而
整除操作符。它用于计算两个操作数的商值，但是不带小数。
除法操作符。它用于计算两个操作数的商值。如果除数为零，则结果为NULL。
2.3*-4.5
乘法操作符。它用于计算两个操作数的乘积。
出现在单个表达项的前面，那么计算的就是该操作数的负值（即翻转表达项的正负号）。
减法或求负操作符。如果出现在两个表达项之间，那么计算的就是两个操作数的差；如果
起来不像数字的字符串会转换为0。如果要连接字符串，可以使用CONCAT（）函数。
-(10-7)
串连接操作符。实际上，在进行运算之前，MySQL 会先将这些字符串转换为数字。那些看
比较操作符
DIV
附录C操作符与函数参考
DIV
l
4
3
0
3
→1.6
→NULL
↑
↑
一
→3
3.0000
-10.35
NULL
NULL
0.3333
-3
2
0
（与=很像，主要区别在
，如果除数为零，则结果为
---
## Page 579
进制串和二进制串之间的比较，则按二进制串进行比较。