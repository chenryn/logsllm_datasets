PDF signatures are designed to protect the integrity and
authenticity of PDFs. In contrast to the classical digital sig-
15
nature use cases that apply a signature only once on a target,
PDF signatures address more complex use cases. A signed
document is allowed to be updated without invalidating its
signature, but only in particular cases. Additionally, a PDF
can be signed several times in succession. In this paper, we
showed how this ﬂexibility could be abused to replace the
entire content of the PDF without invalidating the signature.
As a result, we found 16 of 29 applications to be vulnerable.
The reasons for this state can be found in the current PDF
speciﬁcation: (1) It describes imprecisely how the signature
validation may be implemented. (2) It does not document
edge cases and does not propose a solution or a guideline.
As a result, developers must solve these problems on their
own. (3) The PDF speciﬁcation should reconsider the feature-
richness which weakens the security. Instead, it should apply
stricter and more limited handling regarding cryptographic
protection. As a reaction to our research, we became a member
of the ISO/TC 171/SC 2 technical committee to contribute to
future PDF standards.
ACKNOWLEDGMENT
The authors would like to thank Sebastian Lauer, Paul
R¨osler, Marcus Niemietz, and J¨org Schwenk for their valuable
discussions, feedback, and support. Simon Rohlmann was
supported by the German Federal Ministry of Economics and
Technology (BMWi) project “Industrie 4.0 Recht-Testbed”
(13I40V002C). In addition, this work was supported by the
German Research Foundation (DFG) within the framework of
the Excellence Strategy of the Federal Government and the
States – EXC 2092 CASA.
REFERENCES
[1] United States Government Printing Ofﬁce, “Electronic
signatures in global and national commerce act,” 2000.
[Online]. Available: https://www.govinfo.gov/content/
pkg/PLAW-106publ229/pdf/PLAW-106publ229.pdf
[2] E. Union, “Regulation (eu) no 910/2014 of the european
parliament and of the council on electronic identiﬁcation
and trust services for electronic transactions in the
internal market and repealing directive 1999/93/ec,”
2014. [Online]. Available: https://eur-lex.europa.eu/legal-
content/EN/TXT/PDF/?uri=CELEX:32014R0910
[3] Wikipedia. (2019) Electronic signatures and law. [On-
line]. Available: https://en.wikipedia.org/wiki/Electronic
signatures and law
[4] Adobe.
(2018, Nov.) Adobe
[On-
line]. Available: https://www.adobe.com/about-adobe/
fast-facts.html
facts.
fast
[5] DocuSign.
(2019) Docusign
report.
[Online]. Available: https://s22.q4cdn.com/408980645/
ﬁles/doc ﬁnancials/2019/Annual/DocuSign-FY2019-
Annual-Report.pdf
annual
2019
[6] V. Mladenov, C. Mainka, K. Meyer zu Selhausen,
M. Grothe, and J. Schwenk, “1 trillion dollar refund –
how to spoof pdf signatures,” in ACM Conference on
Computer and Communications Security, Nov. 2019.
[7] I. Markwood, D. Shen, Y. Liu, and Z. Lu, “PDF Mirage:
Content Masking Attack Against Information-Based On-
line Services,” in 26th USENIX Security Symposium
(USENIX Security 17), (Vancouver, BC), 2017, pp. 833–
847.
[8] pdf-insecurity.org.
[Online].
https://www.pdf-insecurity.org/signature/
apr) Exploits.
Available:
evaluation 2018.html#desktop-viewer-applications
(2020,
[9] Intarsys.
(2020)
7.1.6.
[Online]. Available: https://www.intarsys.de/sites/default/
ﬁles/Dokumente/ReleaseNotes SignLive 7.1.6.txt
Releasenotes:
Signlive
are
[10] I. PDF. (2020, September) Investigating pdf shadow
[Online].
https://itextpdf.com/en/blog/technical-notes/
attacks: What
Available:
investigating-pdf-shadow-attacks-what-are-shadow-
attacks-part-1
shadow attacks?
[11] M. contributors. (2019, Nov.) 2d collision detection.
[Online]. Available: https://developer.mozilla.org/en-US/
docs/Games/Techniques/2D collision detection
[12] A. S. Incorporated, PDF Reference, version 1.7, 6th ed.,
November 2006.
[13] P. Maupin. (2017, Sep.) pdfrw 0.4: Project description.
[Online]. Available: https://pypi.org/project/pdfrw/#all-
examples
[14] I. Grigg. (2008) Technologists on signatures:
the wrong
in
//ﬁnancialcryptography.com/mt/archives/001056.html
[Online]. Available:
place.
looking
http:
4,
pp.
[15] ——. (2012) Signatures on fax & email - if you did
not intend to be bound, why did you bother to write it?
[Online]. Available: http://ﬁnancialcryptography.com/mt/
archives/001364.html
[16] F. Raynal, G. Delugr´e, and D. Aumaitre, “Malicious
in Computer Virology,
Origami
vol.
[Online].
6,
Available: http://esec-lab.sogeti.com/static/publications/
08-pacsec-maliciouspdf.pdf
in PDF,” Journal
no.
289–315,
2010.
[17] M. Stevens, E. Bursztein, P. Karpman, A. Albertini, and
Y. Markov, “The ﬁrst collision for full sha-1,” in Annual
International Cryptology Conference.
Springer, 2017,
pp. 570–596.
[18] D. Popescu,
in PDF
documents,” CoRR, vol. abs/1201.0397, 2012. [Online].
Available: http://arxiv.org/abs/1201.0397
“Hiding malicious
content
[19] A. Albertini, “This PDF is a JPEG; or, This Proof of
is a Picture of Cats,” PoC 11 GTFO 0x03,
Concept
2014. [Online]. Available: https://www.alchemistowl.org/
pocorgtfo/pocorgtfo03.pdf
[20] G. Lax, F. Buccafurri, and G. Caminiti, “Digital docu-
ment signing: Vulnerabilities and solutions,” Information
Security Journal: A Global Perspective, vol. 24, no. 1-3,
pp. 1–14, 2015.
[21] B. Rios, F. Lanusse,
and M. Gentile.
(2013)
[Online].
http://www.sneaked.net/adobe-reader-same-
same-origin policy bypass.
Adobe reader
Available:
origin-policy-bypass
[22] A.
Inf¨uhr.
(2014, Dec.) Multiple pdf vulnerabilities
[Online]. Avail-
https://insert-script.blogspot.de/2014/12/multiple-
– text and pictures on steroids.
able:
pdf-vulnerabilites-text-and.html
(2015, Sep.) Pdf – mess with the web.
[Online]. Available: https://2015.appsec.eu/wp-content/
uploads/2015/09/owasp-appseceu2015-infuhr.pdf
[23] ——.
[24] H. Valentin, “Malicious URI resolving in PDF Docu-
ments,” Blackhat Abu Dhabi, 2012.
[25] G. Franken, T. V. Goethem, and W. Joosen, “Who
third-party cookie policies,”
left open the cookie jar? a comprehensive evaluation
in 27th USENIX
of
Security Symposium (USENIX Security 18). Baltimore,
MD: USENIX Association,
151–168.
[Online]. Available: https://www.usenix.org/conference/
usenixsecurity18/presentation/franken
2018,
pp.
ﬁles.
client
[27] C.
(2018,
side
Inf¨uhr.
-
May)
request
reader
[26] A.
pdf
[On-
line]. Available: https://insert-script.blogspot.de/2018/05/
adobe-reader-pdf-client-side-request.html
April)
Ntlm cre-
[Online]. Avail-
https://research.checkpoint.com/ntlm-credentials-
Research.
theft
via
Adobe
injection.
(2018,
pdf
P.
dentials
able:
theft-via-pdf-ﬁles/
[28] P. Laskov and N. ˇSrndi´c, “Static detection of malicious
javascript-bearing pdf documents,” in Proceedings of the
27th annual computer security applications conference.
ACM, 2011, pp. 373–382.
[29] D. Maiorca, G. Giacinto, and I. Corona, “A pattern
recognition system for malicious pdf ﬁles detection,” in
International Workshop on Machine Learning and Data
Mining in Pattern Recognition. Springer, 2012, pp. 510–
524.
[30] C. Smutz and A. Stavrou, “Malicious pdf detection using
metadata and structural features,” in Proceedings of the
28th annual computer security applications conference.
ACM, 2012, pp. 239–248.
[31] I. Corona, D. Maiorca, D. Ariu, and G. Giacinto, “Lux0r:
Detection of malicious pdf-embedded javascript code
through discriminant analysis of api references,” in Pro-
ceedings of the 2014 Workshop on Artiﬁcial Intelligent
and Security Workshop. ACM, 2014, pp. 47–57.
[32] D. Maiorca, D. Ariu, I. Corona, and G. Giacinto, “A
structural and content-based approach for a precise and
robust detection of malicious pdf ﬁles,” in 2015 Interna-
tional Conference on Information Systems Security and
Privacy (ICISSP).
IEEE, 2015, pp. 27–36.
ˇSrndi´c and P. Laskov, “Hidost: a static machine-
learning-based detector of malicious ﬁles,” EURASIP
Journal on Information Security, vol. 2016, no. 1, p. 22,
2016.
[33] N.
[34] L. Tong, B. Li, C. Hajaj, C. Xiao, and Y. Vorobeychik,
“A framework for validating models of evasion attacks
on machine learning, with application to pdf malware
detection,” arXiv preprint arXiv:1708.08327, 2017.
[Online]. Available: https://arxiv.org/pdf/1708.08327.pdf
investigation of
pdf ﬁles: Unveiling traces of embedded malware,” IEEE
Security and Privacy: Special Issue on Digital Forensics,
In Press. [Online]. Available: https://pralab.diee.unica.it/
sites/default/ﬁles/maiorca17-sp.pdf
[35] D. Maiorca and B. Biggio, “Digital
[36] S. Dey, A. Kumar, M. Sawarkar, P. K. Singh, and
S. Nandi, “EvadePDF: Towards evading machine learning
based PDF malware classiﬁers,” in Communications in
Computer and Information Science, vol. 939, 2019, pp.
140–150.
[37] Y. Li, Y. Wang, Y. Wang, L. Ke, and Y. an Tan, “A
feature-vector generative adversarial network for evading
PDF malware classiﬁers,” Information Sciences, vol. 523,
pp. 38–48, 2020.
[38] A. Corum, D. Jenkins, and J. Zheng, “Robust PDF Mal-
16
(cid:27) If there are two or more complete object paths
(Pages → Page → Content), we always mark a
signed document as invalid.
(cid:27) Other methods:
Further comments:
Attack variant “Hide”:
(cid:27) We have not ﬁxed the vulnerability yet.
(cid:27) We always mark a signed document as invalid, if
there exist any Incremental Updates after signing.
(cid:27) If there exist an Incremental Update after sign-
ing, we compare the parsed document with and
without this Incremental Update.
(cid:27) If an Incremental Update overlays a form or con-
tent stream object, we mark a signed document
as invalid.
(cid:27) Other methods:
Further comments:
Attack variant “Replace”:
(cid:27) We have not ﬁxed the vulnerability yet.
(cid:27) We always mark a signed document as invalid, if
there exist any Incremental Updates after signing.
(cid:27) If there exist an Incremental Update after sign-
ing, we compare the parsed document with and
without this Incremental Update.
(cid:27) If an Incremental Update contains a font that
overwrites an existing font, we mark a signed
document as invalid.
(cid:27) If an Incremental Update delete or overwrite an
existing image or form object, we mark a signed
document as invalid
(cid:27) Other methods:
Further comments:
ware Detection with Image Visualization and Processing
Techniques,” in Proceedings - 2019 2nd International
Conference on Data Intelligence and Security, ICDIS
2019, 2019, pp. 108–114.
[39] “On training robust PDF malware classiﬁers,” in
29th USENIX Security Symposium (USENIX Security
20). Boston, MA: USENIX Association, Aug. 2020.
[Online]. Available: https://www.usenix.org/conference/
usenixsecurity20/presentation/chen-yizheng
[40] W. Xu, Y. Qi, and D. Evans, “Automatically evading
the 2016 network and
classiﬁers,” in Proceedings of
distributed systems symposium, vol. 10, 2016.
[41] N. Srndic and P. Laskov, “Practical evasion of a learning-
based classiﬁer: A case study,” in 2014 IEEE Symposium
on Security and Privacy, May 2014, pp. 197–211.
[42] Y. Chen, S. Wang, D. She, and S.
Jana, “On
training robust PDF malware classiﬁers,” in 29th
USENIX Security Symposium (USENIX Security 20).
Boston, MA: USENIX Association, Aug.
2020.
[Online]. Available: https://www.usenix.org/conference/
usenixsecurity20/presentation/chen-yizheng
[43] T. Kuchta, T. Lutellier, E. Wong, L. Tan, and C. Cadar,
“On the correctness of electronic documents: studying,
ﬁnding, and localizing inconsistency bugs in PDF readers
and ﬁles,” EMPIRICAL SOFTWARE ENGINEERING,
vol. 23, no. 6, pp. 3187–3220, DEC 2018.
[44] S. Garﬁnkel, P. Farrell, V. Roussev, and G. Dinolt,
“Bringing science to digital forensics with standardized
forensic corpora,” digital investigation, vol. 6, pp. S2–
S11, 2009.
APPENDIX
EMAIL SENT TO VENDORS
We contacted all vendors via email to gather information on
how they ﬁxed the shadow attacks. To get comparable results,
we requested the information in a multiple-choice fashion.
[CERT-Bund#2020030228000759]
Dear Sir or Madam,
we are security researchers at Ruhr University
Bochum. Together with the CERT-Bund (refer-
ence:
/ CVE-
2020-9592 / CVE-2020-9596), we informed you in
March of
this year about security vulnerabilities
(called ”Shadow Attacks”) in your PDF application.
For our research, we are very interested in how the
vulnerabilities mentioned above were ﬁxed. In order
not to take up too much of your time, we have created
some keywords and would like to ask you to tick the
appropriate lines. Of course we are also grateful for
any further comments in this context.
Attack variant “Hide-and-Replace”:
(cid:27) We have not ﬁxed the vulnerability yet.
(cid:27) We always mark a signed document as invalid, if
there exist any Incremental Updates after signing.
(cid:27) If there exist an Incremental Update after sign-
ing, we compare the parsed document with and
without this Incremental Update.
(cid:27) We check the document for hidden object paths
before signing.
17