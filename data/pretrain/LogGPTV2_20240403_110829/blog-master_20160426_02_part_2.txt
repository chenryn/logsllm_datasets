...  
    /*  
     * Send ParseComplete.  
     */  
    if (whereToSendOutput == DestRemote)  
        pq_putemptymessage('1');  
    /*  
     * Emit duration logging if appropriate.  
     */  
    switch (check_log_duration(msec_str, false))  
    {  
        case 1:  
            ereport(LOG,  
                    (errmsg("duration: %s ms", msec_str),  
                     errhidestmt(true)));  
            break;  
        case 2:  
            ereport(LOG,  
                    (errmsg("duration: %s ms  parse %s: %s",  
                            msec_str,  
                            *stmt_name ? stmt_name : "",  
                            query_string),  
                     errhidestmt(true)));  
            break;  
    }  
    if (save_log_statement_stats)  
        ShowUsage("PARSE MESSAGE STATISTICS");  
    debug_query_string = NULL;  
}  
```  
bind  
```  
/*  
 * exec_bind_message  
 *  
 * Process a "Bind" message to create a portal from a prepared statement  
 */  
static void  
exec_bind_message(StringInfo input_message)  
{  
    const char *portal_name;  
    const char *stmt_name;  
    int         numPFormats;  
    int16      *pformats = NULL;  
    int         numParams;  
    int         numRFormats;  
    int16      *rformats = NULL;  
    CachedPlanSource *psrc;  
    CachedPlan *cplan;  
    Portal      portal;  
    char       *query_string;  
    char       *saved_stmt_name;  
    ParamListInfo params;  
    MemoryContext oldContext;  
    bool        save_log_statement_stats = log_statement_stats;  
    bool        snapshot_set = false;  
    char        msec_str[32];  
...  
    /*  
     * Now we can define the portal.  
     *  
     * DO NOT put any code that could possibly throw an error between the  
     * above GetCachedPlan call and here.  
     */  
    PortalDefineQuery(portal,  
                      saved_stmt_name,  
                      query_string,  
                      psrc->commandTag,  
                      cplan->stmt_list,  
                      cplan);  
    /* Done with the snapshot used for parameter I/O and parsing/planning */  
    if (snapshot_set)  
        PopActiveSnapshot();  
    /*  
     * And we're ready to start portal execution.  
     */  
    PortalStart(portal, params, 0, InvalidSnapshot);  
    /*  
     * Apply the result format requests to the portal.  
     */  
    PortalSetResultFormat(portal, numRFormats, rformats);  
    /*  
     * Send BindComplete.  
     */  
    if (whereToSendOutput == DestRemote)  
        pq_putemptymessage('2');  
    /*  
     * Emit duration logging if appropriate.  
     */  
    switch (check_log_duration(msec_str, false))  
    {  
        case 1:  
            ereport(LOG,  
                    (errmsg("duration: %s ms", msec_str),  
                     errhidestmt(true)));  
            break;  
        case 2:  
            ereport(LOG,  
                    (errmsg("duration: %s ms  bind %s%s%s: %s",  
                            msec_str,  
                            *stmt_name ? stmt_name : "",  
                            *portal_name ? "/" : "",  
                            *portal_name ? portal_name : "",  
                            psrc->query_string),  
                     errhidestmt(true),  
                     errdetail_params(params)));  
            break;  
    }  
    if (save_log_statement_stats)  
        ShowUsage("BIND MESSAGE STATISTICS");  
    debug_query_string = NULL;  
}  
```  
execute  
```  
/*  
 * exec_execute_message  
 *  
 * Process an "Execute" message for a portal  
 */  
static void  
exec_execute_message(const char *portal_name, long max_rows)  
{  
    CommandDest dest;  
    DestReceiver *receiver;  
    Portal      portal;  
    bool        completed;  
    char        completionTag[COMPLETION_TAG_BUFSIZE];  
    const char *sourceText;  
    const char *prepStmtName;  
    ParamListInfo portalParams;  
    bool        save_log_statement_stats = log_statement_stats;  
    bool        is_xact_command;  
    bool        execute_is_fetch;  
    bool        was_logged = false;  
    char        msec_str[32];  
...  
    /*  
     * Okay to run the portal.  
     */  
    if (max_rows rDestroy) (receiver);  
    if (completed)  
    {  
        if (is_xact_command)  
        {  
            /*  
             * If this was a transaction control statement, commit it.  We  
             * will start a new xact command for the next command (if any).  
             */  
            finish_xact_command();  
        }  
        else  
        {  
            /*  
             * We need a CommandCounterIncrement after every query, except  
             * those that start or end a transaction block.  
             */  
            CommandCounterIncrement();  
        }  
        /* Send appropriate CommandComplete to client */  
        EndCommand(completionTag, dest);  
    }  
    else  
    {  
        /* Portal run not complete, so send PortalSuspended */  
        if (whereToSendOutput == DestRemote)  
            pq_putemptymessage('s');  
    }  
    /*  
     * Emit duration logging if appropriate.  
     */  
    switch (check_log_duration(msec_str, was_logged))  
    {  
        case 1:  
            ereport(LOG,  
                    (errmsg("duration: %s ms", msec_str),  
                     errhidestmt(true)));  
            break;  
        case 2:  
            ereport(LOG,  
                    (errmsg("duration: %s ms  %s %s%s%s: %s",  
                            msec_str,  
                            execute_is_fetch ?  
                            _("execute fetch from") :  
                            _("execute"),  
                            prepStmtName,  
                            *portal_name ? "/" : "",  
                            *portal_name ? portal_name : "",  
                            sourceText),  
                     errhidestmt(true),  
                     errdetail_params(portalParams)));  
            break;  
    }  
    if (save_log_statement_stats)  
        ShowUsage("EXECUTE MESSAGE STATISTICS");  
    debug_query_string = NULL;  
}  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")