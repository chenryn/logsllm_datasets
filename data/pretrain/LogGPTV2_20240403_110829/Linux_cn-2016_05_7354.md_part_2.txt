#### 更新内容
[工具套件( 3.10.1 )](http://valgrind.org/docs/manual/dist.news.html)主要修复了 3.10.0 版本发现的 bug 。除此之外，“从主干开发版本向后移植的一些补丁，修复了缺失的 AArch64 ARMv8 指令和系统调用”。
#### 有何优点
同其它所有 Valgrind 工具一样， Memcheck 也是命令行程序。它的操作非常简单：通常我们会使用诸如 `prog arg1 arg2` 格式的命令来运行程序，而 Memcheck 只要求你多加几个值即可，如 `valgrind --leak-check=full prog arg1 arg2` 。
![cw memcheck output](/data/attachment/album/201605/18/094223vcxutc60jdzdcmkz.png)
*Memcheck*
（注意：因为 Memcheck 是 Valgrind 的默认工具，所以在命令行执行命令时无需提及 Memcheck。但是，需要在编译程序之初带上 `-g` 参数选项，这一步会添加调试信息，使得 Memcheck 的错误信息会包含正确的行号。）
我真正倾心于 Memcheck 的是它提供了很多命令行选项（如上所述的`--leak-check`选项），如此不仅能控制工具运转还可以控制它的输出。
举个例子，可以开启`--track-origins`选项，以查看程序源码中未初始化的数据；可以开启`--show-mismatched-frees`选项让 Memcheck 匹配内存的分配和释放技术。对于 C 语言所写的代码， Memcheck 会确保只能使用`free()`函数来释放内存，`malloc()`函数来申请内存。而对 C++ 所写的源码， Memcheck 会检查是否使用了`delete`或`delete[]`操作符来释放内存，以及`new`或者`new[]`来申请内存。
Memcheck 最好的特点，尤其是对于初学者来说，是它会给用户建议使用哪个命令行选项能让输出更加有意义。比如说，如果你不使用基本的`--leak-check`选项， Memcheck 会在输出时给出建议：“使用 --leak-check=full 重新运行以查看更多泄漏内存细节”。如果程序有未初始化的变量， Memcheck 会产生信息：“使用 --track-origins=yes 以查看未初始化变量的定位”。
Memcheck 另外一个有用的特性是它可以创建   抑制文件    （    suppression files    ） ，由此可以略过特定的不能修正的错误，这样 Memcheck 运行时就不会每次都报警了。值得一提的是， Memcheck 会去读取默认抑制文件来忽略系统库（比如 C 库）中的报错，这些错误在系统创建之前就已经存在了。可以选择创建一个新的抑制文件，或是编辑现有的文件(通常是`/usr/lib/valgrind/default.supp`)。
Memcheck 还有高级功能，比如可以使用[定制内存分配器](http://stackoverflow.com/questions/4642671/c-memory-allocators)来[检测内存错误](http://valgrind.org/docs/manual/mc-manual.html#mc-manual.mempools)。除此之外， Memcheck 提供[监控命令](http://valgrind.org/docs/manual/mc-manual.html#mc-manual.monitor-commands)，当用到 Valgrind 内置的 gdbserver ，以及[客户端请求](http://valgrind.org/docs/manual/mc-manual.html#mc-manual.clientreqs)机制（不仅能把程序的行为告知 Memcheck ，还可以进行查询）时可以使用。
#### 注意事项
毫无疑问， Memcheck 可以节省很多调试时间以及省去很多麻烦。但是它使用了很多内存，导致程序执行变慢（[由文档可知](http://valgrind.org/docs/manual/valgrind_manual.pdf)，大概会花费 20 至 30 倍时间）。
除此之外， Memcheck 还有其它局限。根据用户评论， Memcheck 很明显不是[线程安全](http://sourceforge.net/p/valgrind/mailman/message/30292453/)的；它不能检测出 [静态缓冲区溢出](https://msdn.microsoft.com/en-us/library/ee798431%28v=cs.20%29.aspx)；还有就是，一些 Linux 程序如 [GNU Emacs](http://www.computerworld.com/article/2484425/linux/5-free-linux-text-editors-for-programming-and-word-processing.html?nsdr=true&page=2) 目前还不能配合 Memcheck 工作。
如果有兴趣，可以在[这里](http://valgrind.org/docs/manual/manual-core.html#manual-core.limits)查看 Valgrind 局限性的详细说明。
#### 总结
无论是对于初学者还是那些需要高级特性的人来说， Memcheck 都是一款便捷的内存调试工具。如果你仅需要基本调试和错误检查， Memcheck 会非常容易上手。而当你想要使用像抑制文件或者监控指令这样的特性，就需要花一些功夫学习了。
虽然罗列了大量的局限性，但是 Valgrind（包括 Memcheck ）在它的网站上声称全球有[成千上万程序员](http://valgrind.org/info/)使用了此工具。开发团队称收到来自超过 30 个国家的用户反馈，而这些用户的工程代码有的高达两千五百万行。
### [Memwatch](http://www.linkdata.se/sourcecode/memwatch/)
**开发者**：Johan Lindh
**评估版本**：2.71
**支持的 Linux 发行版**：所有种类
**许可**：GNU GPL
Memwatch 是由 Johan Lindh 开发的内存调试工具，虽然它扮演的主要角色是内存泄漏检测器，但是（根据网页介绍）它也具有检测其它如[内存重复释放和错误释放](http://www.cecalc.ula.ve/documentacion/tutoriales/WorkshopDebugger/007-2579-007/sgi_html/ch09.html)、缓冲区溢出和下溢、[野指针](http://c2.com/cgi/wiki?WildPointer)写入等等内存相关问题的能力。
Memwatch 支持用 C 语言所编写的程序。也可以在 C++ 程序中使用它，但是这种做法并不提倡（由 Memwatch 源码包随附的 Q&A 文件中可知）。
#### 更新内容
这个版本添加了`ULONG_LONG_MAX`以区分 32 位和 64 位程序。
#### 有何优点
跟 Dmalloc 一样， Memwatch 也有优秀的文档资料。参考 USING 文件，可以学习如何使用 Memwatch ，可以了解 Memwatch 是如何初始化、如何清理以及如何进行 I/O 操作，等等。还有一个 FAQ 文件，旨在帮助用户解决使用过程遇到的一般问题。最后还有一个`test.c`文件提供工作案例参考。
![cw memwatch output](/data/attachment/album/201605/18/094228hlccfflwgc7nfcwj.png)
*Memwatch*
不同于 Mtrace ， Memwatch 产生的日志文件（通常是`memwatch.log`）是人类可阅读的格式。而且， Memwatch 每次运行时总会把内存调试结果拼接到输出该文件的末尾。如此便可在需要之时轻松查看之前的输出信息。
同样值得一提的是当你执行了启用 Memwatch 的程序， Memwatch 会在[标准输出](https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29)中产生一个单行输出，告知发现了错误，然后你可以在日志文件中查看输出细节。如果没有产生错误信息，就可以确保日志文件不会写入任何错误，多次运行的话确实能节省时间。
另一个我喜欢的优点是 Memwatch 还提供了在源码中获取其输出信息的方式，你可以获取信息，然后任由你进行处理（参考 Memwatch 源码中的`mwSetOutFunc()`函数获取更多有关的信息）。
#### 注意事项
跟 Mtrace 和 Dmalloc 一样， Memwatch 也需要你往你的源文件里增加代码：你需要把`memwatch.h`这个头文件包含进你的代码。而且，编译程序的时候，你需要连同`memwatch.c`一块编译；或者你可以把已经编译好的目标模块包含起来，然后在命令行定义`MEMWATCH`和`MW_STDIO`变量。不用说，想要在输出中定位行号， -g 编译器选项也少不了。
此外， Memwatch 缺少一些特性。比如 Memwatch 不能检测出对一块已经被释放的内存进行写入操作，或是在分配的内存块之外的进行读取操作。而且， Memwatch 也不是线程安全的。还有一点，正如我在开始时指出，在 C++ 程序上运行 Memwatch 的结果是不能预料的。
#### 总结
Memcheck 可以检测很多内存相关的问题，在处理 C 程序时是非常便捷的调试工具。因为源码小巧，所以可以从中了解 Memcheck 如何运转，有需要的话可以调试它，甚至可以根据自身需求扩展升级它的功能。
### [Mtrace](http://www.gnu.org/software/libc/manual/html_node/Tracing-malloc.html)
**开发者**: Roland McGrath 和 Ulrich Drepper
**评估版本**: 2.21
**支持的 Linux 发行版**：所有种类
**许可**：GNU GPL
Mtrace 是 [GNU C 库](https://www.gnu.org/software/libc/)中的一款内存调试工具，同时支持 Linux 上的 C 和 C++ 程序，可以检测由函数`malloc()`和`free()`不匹配的调用所引起的内存泄漏问题。
![cw mtrace output](/data/attachment/album/201605/18/094232y5pee9zhyrx1jf99.png)
*Mtrace*
Mtrace 实际上是实现了一个名为`mtrace()`的函数，它可以跟踪程序中所有 malloc/free 调用，并在用户指定的文件中记录相关信息。文件以一种机器可读的格式记录数据，所以有一个 Perl 脚本——同样命名为 mtrace ——用来把文件转换并为人类可读格式。
#### 更新内容
[Mtrace 源码](https://sourceware.org/git/?p=glibc.git;a=history;f=malloc/mtrace.c;h=df10128b872b4adc4086cf74e5d965c1c11d35d2;hb=HEAD)和 [Perl 文件](https://sourceware.org/git/?p=glibc.git;a=history;f=malloc/mtrace.pl;h=0737890510e9837f26ebee2ba36c9058affb0bf1;hb=HEAD)同 GNU C 库( 2.21 版本)一起释出，除了更新版权日期，其它别无改动。
#### 有何优点
Mtrace 最好的地方是它非常简单易学。你只需要了解在你的源码中如何以及何处添加 `mtrace()` 及对应的 `muntrace()` 函数，还有如何使用 Mtrace 的 Perl 脚本。后者非常简单，只需要运行指令`mtrace  `（例子见开头截图最后一条指令）。
Mtrace 另外一个优点是它的可伸缩性，这体现在不仅可以使用它来调试完整的程序，还可以使用它来检测程序中独立模块的内存泄漏。只需在每个模块里调用`mtrace()`和`muntrace()`即可。
最后一点，因为 Mtrace 会在`mtrace()`——在源码中添加的函数——执行时被触发，因此可以很灵活地[使用信号](http://webcache.googleusercontent.com/search?q=cache:s6ywlLtkSqQJ:www.gnu.org/s/libc/manual/html_node/Tips-for-the-Memory-Debugger.html+&cd=1&hl=en&ct=clnk&gl=in&client=Ubuntu)动态地（在程序执行时）使能 Mtrace 。
#### 注意事项
因为`mtrace()`和`mauntrace()`函数 —— 声明在`mcheck.h`文件中，所以必须在源码中包含此头文件 —— 的调用是 Mtrace 工作的基础（`mauntrace()`函数并非[总是必要](http://www.gnu.org/software/libc/manual/html_node/Using-the-Memory-Debugger.html#Using-the-Memory-Debugger)），因此 Mtrace 要求程序员至少改动源码一次。
需要注意的是，在编译程序的时候带上 -g 选项（ [GCC](http://linux.die.net/man/1/gcc) 和 [G++](http://linux.die.net/man/1/g++) 编译器均有提供），才能使调试工具在输出结果时展示正确的行号。除此之外，有些程序（取决于源码体积有多大）可能会花很长时间进行编译。最后，带 -g 选项编译会增加了可执行文件的大小（因为提供了额外的调试信息），因此记得程序需要在测试结束后，不带 -g 选项重新进行编译。
使用 Mtrace ，你需要掌握 Linux 环境变量的基本知识，因为在程序执行之前，需要把用户把环境变量`MALLOC_TRACE`的值设为指定的文件（`mtrace()`函数将会记录全部信息到其中）路径。
Mtrace 在检测内存泄漏和试图释放未经过分配的内存方面存在局限。它不能检测其它内存相关问题如非法内存访问、使用未初始化内存。而且，[有人抱怨](https://sourceware.org/ml/libc-help/2014-05/msg00008.html) Mtrace 不是[线程安全](https://en.wikipedia.org/wiki/Thread_safety)的。
### 总结
不言自明，我在此讨论的每款内存调试器都有其优点和局限。所以，哪一款适合你取决于你所需要的特性，虽然有时候容易安装和使用也是一个决定因素。
要想捕获软件程序中的内存泄漏， Mtrace 最适合不过了。它还可以节省时间。由于 Linux 系统已经预装了此工具，对于不能联网或者不可以下载第三方调试调试工具的情况， Mtrace 也是极有助益的。
另一方面，相比 Mtrace ， Dmalloc 不仅能检测更多错误类型，还提供更多特性，比如运行时可配置、 GDB 集成。而且， Dmalloc 不像这里所说的其它工具，它是线程安全的。更不用说它的详细资料了，这让 Dmalloc 成为初学者的理想选择。
虽然 Memwatch 的资料比 Dmalloc 的更加丰富，而且还能检测更多的错误种类，但是你只能在 C 语言写就的程序中使用它。一个让 Memwatch 脱颖而出的特性是它允许在你的程序源码中处理它的输出，这对于想要定制输出格式来说是非常有用的。
如果改动程序源码非你所愿，那么使用 Electric Fence 吧。不过，请记住， Electric Fence 只能检测两种错误类型，而此二者均非内存泄漏。还有就是，需要基本了解 GDB 以最大化发挥这款内存调试工具的作用。
Memcheck 可能是其中综合性最好的了。相比这里提及的其它工具，它能检测更多的错误类型，提供更多的特性，而且不需要你的源码做任何改动。但请注意，基本功能并不难上手，但是想要使用它的高级特性，就必须学习相关的专业知识了。
---
via: 
作者：[Himanshu Arora](http://www.computerworld.com/author/Himanshu-Arora/) 译者：[soooogreen](https://github.com/soooogreen) 校对：[PurlingNayuki](https://github.com/PurlingNayuki),[ezio](https://github.com/oska874)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出