Device
2.1.2
6/3/1
Device
2.2.2
4/1/1
4/1/1
5/2/1
IP Network
Main Line 1
Main Line 2
IP Network
Figure 3: Example KNX/IP network
The second is a CONNECTIONSTATE REQUEST. After this you can start sending mes-
sages to the KNX backbone by using a TUNNELLING REQUEST message. Once you are
ﬁnished, you terminate the communication by issuing a DISCONNECT REQUEST. The
Tunneling request command stands out in importance for practical purposes, as it carries
the end action for the networked electrical appliance.
Listing 1 shows an example of a tunnel request (treq) for switching a light bulb on a
KNX address 1/0/2 [6].
Listing 1: Tunnel Request example
treq = [06 10 04 20 00 15 04 49 00 00 11 00 be e0 00 00 08 02 01 00 81]
/*
TUNNELLING_REQUEST */
/*
Header (6 Bytes) */
treq[0] = 0x06; /* 06 - Header Length */
treq[l] = 0x10; /* 10 - KNXnet version (1.0) */
treq[2] = 0x04; /* 04 - hi-byte Service type descriptor (TUNNELLING_REQUEST)
*/
treq[3] = 0x20; /* 20 - lo-byte Service type descriptor (TUNNELLING_REQUEST)
*/
treq[4] = 0x00; /* 00 - hi-byte total length */
treq[5] = 0x15; /* 15 - lo-byte total length 21 bytes */
/* Connection Header (4 Bytes) */
7
treq[6] = 0x04; /* 04 - Structure length */
treq[7] = iChannellD & 0xff; /* given channel id */
treq[8] = 0x00; /* sequence counter, zero if you send one tunnelling request
only at this session, otherwise count ++ */
treq[9] = 0x00; /* 00 - Reserved */
/*
cEMI-Frame (11 Bytes) */
treq[10] = 0x11; /* message code, 11: Data Service transmitting */
treq[11] = 0x00; /* add. info length (bytes) */
treq[12] = 0xbc; /* control byte */
treq[13] = 0xe0; /* DRL byte */
treq[14] = 0x00; /* hi-byte source individual address */
treq[15] = 0x00; /* lo-byte source (replace throw IP-Gateway) */
treq[16] = (destaddr
8) & 0xff; /* hi-byte destination address (20: group
address) 4/0/0: (4*2048) + (0*256) + (0*1) = 8192 = 20 00 */
treq[17] = destaddr & 0xff; /* lo-Byte destination */
treq[18] - 0x01; /* 01 data byte following */
treq[19] - 0x00; /* tpdu */
treq[20] = 0x81; /* 81: switch on, 80: off */
As an apparent sign of good will, universities have been able to work with the standard
and as a result, there are open source projects for hobbyist and researchers. One of the
tools created from this collaboration is the excellent eibd [7]. The eibd software package
is the only tool an attacker needs to send messages to the KNX bus, as it implements
the KNX/IP UDP wrapper and the tunneling handshake. Another method is to code the
handshake yourself, which is very simple.
5
Case Study: The St. Regis ShenZhen
5.1
A beautiful hotel
For visitor to the ShenZhen area (the “Silicon Valley” of China), I recommend a stay or
at least a visit to the St. Regis. The property is nothing short of stunning: placed at
the top of the K100 building, this hotel provides an unrivaled experience for guests in the
area: a personal butler, dwarﬁng area views, freestanding bathtubs next to ﬂoor-to-ceiling
windows, a pool claiming half of one ﬂoor, and so far up that even the white pollution smog
so pervasive in the Shanghai-Shenzhen area appears mystical and benign.
Every room
features an IPAD2TM (we will call it the iPad from now on) loaded with an application
controlling every electronic device in the room. Four major components provided the room
automation for this property: The iPad, a wireless communication channel, the automation
protocol (KNX) and the KNX backbone.
8
5.2
The Wireless Communication Channel
Wireless internet is now widely available in most hotels. Smaller hotels and motels provide
the guest with the network WiFi key, but this solution is not scalable for bigger properties.
Besides, hotel chain guests su↵er the internet fee malady: the requirement to pay for the
internet, even after spending a large amount of money for just being in the room (or in the
case of Vegas, a “resort fee”). This annoying and extended practice also faces an interesting
security ﬂipside: to charge guests, the hotel deploys a captive portal to keep track of internet
access. The captive portal ﬁrst redirects the browser to a page asking for the guest name and
room number. After providing the right information, the captive portal places your device’s
MAC address into a white-list, and the guest is then able to connect to the internet. But
to access the captive portal, this solutions grants initial access to the network to guests and
strangers alike (you just cannot access the internet, but can surely “see” other guests). As a
result, anyone can “listen” or even intercept your communications while you are connected
to a hotel network. For the paranoid or not so paranoid, a hotel network should be treated
as an adversarial network: bad stu↵ may happen to you, so methods such as using a VPN
are required for security and privacy. As this is an “open” network, and is already deployed,
the guest network could be used for other purposes, such as, you guessed it, interconnecting
devices in a room.
5.3
the iPad
The iPad in the room does not provide any physical security. A guest can unplug it from its
power attachment and transport it around freely. The guest can also attach it to his or her
own computer and sync the applications, verify and modify the conﬁguration settings and
reboot it. At launch, the iPad shows (in full screen) the only application installed: a room
control amenity, created by the company AYcontrol. The application presents several tabs
to the user. Each tab allows guests to communicate with the room’s networked devices: TV
(including channel selection), temperature, outside lights (Do Not Disturb), inside lights,
blinds and music.
The iPad also can allow selecting scenarios, bundling di↵erent room
actions to create a certain mood (romantic, night, day and so forth). The iPad IP address
was pre-conﬁgured in the iPad.
When the application is launched, the iPad sends two types of packets. The ﬁrst one
is a connectionless datagram (UDP) packet directed to a multicast address. This message
is sent periodically by the iPad and contains basic information: the iPad IP address and
room location. This message’s role is uncertain, but is most likely used for maintenance
to keep track of the iPad location. This message was not required to communicate with
the end connected devices. The second message type is also an UDP packet, but with a
9
di↵erent payload. In this case, the UDP payload forms a KNX/IP protocol communication
to a ﬁxed IP address, and they are triggered while pressing a button in the iPad application
requesting an action, such as switching on the lights. The KNX/IP IP destination was
unique for each room and correlative for adjacent rooms. An attacker could easily infer the
pattern and create a map between room and IP address of the KNX/IP router even without
collecting any traﬃc from that room. The messages seem to follow the KNX/IP protocol
requirements, except for a ﬁeld that was modiﬁed from the standard for no apparent reason.
However, an attacker could easily change these ﬁelds to mimic the slightly di↵erent packet.
5.4
The KNX network
The CEMI frame contains several ﬁelds, must unnecessary to perform the attack.
An
attacker needs only to understand what the “moving parts” of the protocol are. In this
case, an attacker only requires the IP address inside the CEMI frame, the KNX destination
address, the action code for that address and the payload (if any) for that destination in
order to modify the IP address for every room (the destination). The source IP address is
not necessary - there is no mechanism for checking the source IP address by the router.
The IP address for each room provided (at least) access to two di↵erent KNX subnets.
The ﬁrst subnet contained every element controlled by the automation control in the room.
The address space assignments for each room where correlative - after collecting four or
ﬁve room addresses, an attacker can easily guess all the room KNX numbers, similarly as
performed with the IP address.
The second subnet, that can be accessed by every KNX/IP router in a ﬂoor, contained
element outside the room. That IPAD action for that “ﬂoor” KNX address space was to
switch on/o↵ the “Do Not Disturb Lights” and the “Make Room” light.
The KNX network also responded to administrative and conﬁguration commands. How-
ever, its modiﬁcation was not necessary to allow arbitrary KNX commands to go through.
5.5
The Attack
With the knowledge of the KNX/IP router and KNX address of the room, the KNX address
of the appliance and a dictionary of actions, the adversary can send any arbitrary action to
any room, as long as it followed the KNX protocol sequence to transmit. The dictionary of
actions is simple to create - just press every button on the iPad application and record the
action and payload sent by utilizing a network sniﬃng tool such as Wireshark. To create
a complete map of each room an attacker can either listen for iPads communicating (as
discussed, the iPad “sings” its room number and IP address periodically). Or, a simpler
method is to ﬁnd an excuse to change rooms.
10
Once armed with this knowledge the attack is trivial: send the action to the target
device, using the IP/KNX address. KNX does not provide any free software of application,
but there are many open source software solutions that implement the KNX protocol. One
such application is eibd. You can launch the eibd daemon in tunnel mode with the listen
local option, and set it to the target IP of the room. As an example, let’s suppose the
address for a light is 3. The action to switch on is 80, and to switch o↵ is 81. Finally the
pair KNX room subnet and router IP address are 2/0 (KNX) - 172.31.20.160 (IP). After
this we can launch eibd with the target IP address as a daemon. This action will perform
the ﬁrst two handshakes of the connection sequence and keep the connection alive. After
that, the eibd will listen to request that can be sent using an application (also provided
by eibd) writing to the local ﬁle. A sample sequence to switch on/o↵ a light is presented
in Listing 2.
Listing 2: Sample commands
#eibd -- T -listen-local ipt:172.31.20.160
#groupswite local:/tmp/eib 2/0/3 80 (Switch on light)
#groupswite local:/tmp/eib 2/0/3 81 (Switch off light)
5.6
Attack Scenarios
From here, it is trivial for an attacker to create any hack scenario: raise all the blinds at the
same time (note: eibd does not provide a method to send parallel messages to di↵erent IP
destinations, so in this case an attacker needs to code the handshake itself, which is simple),
trojanize the iPad to control every room instead of only your own (the ONE iPad), or just
prank the neighbor. As the only requirement to perform the attack is access to the local
open network of the hotel, you can just point an antenna to the building, bridge the hotel
network to the internet and start sending commands. A fancier option is to install an iPad
application that connects to an external network regularly waiting for commands. There
is nothing to stop the attacker from rooting the iPad, or replacing it entirely with another
one.
The attacker could go deeper. First, the router conﬁguration seemed modiﬁable and
several conﬁguration attacks may have been possible at the infrastructure level. Second,
there seemed to be devices in the KNX network other than the ones controlled by the iPad
application. Clues pointed to it: for example, in the “outside” corridor address space, many
“ghost” addresses not used by the iPad (blank address with no apparent reason) existed.
11
5.7
Solutions
The hotel room control featured multiple elements which made it vulnerable to a hack.
In this case, an iPad with a beautiful room control application; a wireless communication
channel; a KNX/IP router; and a KNX wired network to connect to the appliances. It is
common not to follow the tired adage advising to provide security not as an afterthought
but from the start. But in this case the adverse results were quite telling.
The three elements do not provide any possible security mitigation. iPads are gadgets
intended from personal use, and do not provide a multiuser environment to perform access
control. The network for the hotel requires openness for guests to access and pay for the
internet.
Finally, and this is quite embarrassing, there is no option to provide security utilizing the
KNX protocol. The security problems in KNX/IP are known in the research community
for years [8]. Earlier works suggest the use of ZigBee for wireless communications [9]. In
[10] researchers discuss the lack of security on KNX/IP and that in the standard only some
“rudimentary” countermeasures are presented. Researchers proposed modiﬁcation to the
protocol called EIBsec, but only prototypes have been implemented. It seems that in the
last speciﬁcation version (2.1, published October 2013) the KNX consortium added some
security, but as speciﬁcation are not available to the general public, these claims cannot
be reviewed. So at this point we will assume KNX provides no security whatsoever in the
protocol.
Given these facts, the only viable option (without changing the architecture signiﬁcantly)
is to provide a secure tunnel between the iPad and the KNX/IP router. This could easily be
achieved by adding a certiﬁcate and tunnel code in the iPad, and a network device preceding
the KNX/IP router that enables the secure tunnel (by deploying a commercial solution or
using open source tools and hardware). The tunnel must provide mutual authentication,
which could be achieved with di↵erent secure connection protocols, such as SSL. However,
in this environment an attacker may steal the certiﬁcates from the iPad. To prevent this,
before the next guest check-in, the iPad certiﬁcate could be reinstalled and the software
integrity of the application installed veriﬁed. The old certiﬁcate could be automatically
revoked from the tunneling server at time of check-out and the new certiﬁcate added at the
time of check-in. This whole process could be easily automated by utilizing a conﬁguration
server (triggered after user check-out). Another method to perform this process o↵-line is
to provide guest with the iPads at check-in. This option adds the beneﬁt of allowing guests
to inquire about the iPad functionality, or even decline its use if they are not comfortable
with a multi-purpose computing device in their room.
12
6
Conclusion
This particular attack has important implications for large scale home automation appli-
cations, as several hotels around the world are beginning to o↵er this room amenity. The
severity of these types of security ﬂaws cannot be understated - from creating a chaotic
atmosphere to raising room temperatures at night with fatal consequences - hoteliers need
to understand the risks and liabilities they are exposed to by faulty security deployments.
Security researchers, leaders in the automation market and members of the hotel industry
need to start conversations to provide guest with reasonable protection standards while
enjoying this new and promising technology.
References
[1] N. Zeminsky. Analysis: U.S. industrials, telecoms to face o↵ in home automation.
http://www.reuters.com/article/2012/08/23/us-usa-
manufacturing-homeautomation-idUSBRE87M0U320120823.
[2] http://www.intelitycorp.com/main/press/facts.php.
[3] Why use KNX? http://www.knxuk.org.
[4] Siemens AG Dipl.-Ing. Hans-Joachim Langels. KNX IP –using IP networks as KNX
medium.
[5] Interworking. KNX association.
[6] KNXnet/IP / KNX TP tunneling howto.
http://www.eb-systeme.de/?page_id=479.
[7] eibd. http://www.auto.tuwien.ac.at/˜mkoegler/index.php/eibd.
[8] W. Granzer, G. Neugschwandtner, and W. Kastner. EIBsec: a security extension to
KNX/EIB. In Konnex Scientiﬁc Conference, November 2006.
[9] Christian Reinisch. Wireless communication in knx/eib. In KNX Scientiﬁc
Conference, 2006.
[10] Daniel Lechner, Wolfgang Granzer, and Wolfgang Kastner. Security for knxnet/IP.
In Konnex Scientiﬁc Conf., 2008.
13