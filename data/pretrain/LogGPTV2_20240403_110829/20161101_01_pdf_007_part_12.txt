 LOG: 00000: BTREE BUILD (Spool) STATISTICS
 DETAIL: ! system usage stats: -- 输出getrusage()的信息.
 ! 0.048502 elapsed 0.040993 user 0.006999 system sec
 ! [0.328949 user 0.038994 sys total]
 ! 0/0 [0/13888] filesystem blocks in/out
 ! 0/1706 [0/8926] page faults/reclaims, 0 [0] swaps
PostgreSQL trace和debug
 ! 0 [0] signals rcvd, 0/0 [0/0] messages rcvd/sent
 ! 0/0 [74/1] voluntary/involuntary context switches
 LOCATION: ShowUsage, postgres.c:4400
 LOG: 00000: BTREE BUILD STATS
 DETAIL: ! system usage stats:
 ! 0.043534 elapsed 0.031996 user 0.002999 system sec
 ! [0.360945 user 0.041993 sys total]
 ! 0/4864 [0/18752] filesystem blocks in/out
 ! 0/741 [0/9667] page faults/reclaims, 0 [0] swaps
 ! 0 [0] signals rcvd, 0/0 [0/0] messages rcvd/sent
 ! 9/1 [83/2] voluntary/involuntary context switches
 LOCATION: ShowUsage, postgres.c:4400
 CREATE INDEX
PostgreSQL trace和debug
 2. 跟踪锁
 digoal=# set trace_locks=on;
 LOG: 00000: LockReleaseAll: lockmethod=1
 LOCATION: LockReleaseAll, lock.c:1954
 LOG: 00000: LockReleaseAll done
 LOCATION: LockReleaseAll, lock.c:2199
 SET
 digoal=# update t set info='test' where id=1;
 LOG: 00000: statement: update t set info='test' where id=1;
 LOCATION: exec_simple_query, postgres.c:890
 LOG: 00000: LockAcquire: lock [16384,26061] RowExclusiveLock // 输出锁对象(db_oid, rel_oid), 锁类别等信息. 根据给出的代码解读输出的内容.
 LINE 1: update t set info='test' where id=1;
 ^
 LOCATION: LockAcquireExtended, lock.c:729
 LOG: 00000: LockAcquire: lock [16384,26061] RowExclusiveLock
 LOCATION: LockAcquireExtended, lock.c:729
 LOG: 00000: LockAcquire: lock [16384,26061] ExclusiveLock
 LOCATION: LockAcquireExtended, lock.c:729
 LOG: 00000: LockAcquire: new: lock(0x7f6970d12b00) id(16384,26061,0,1,3,1) grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0 wait(0) type(ExclusiveLock)
 LOCATION: LOCK_PRINT, lock.c:318
 LOG: 00000: LockAcquire: new: proclock(0x7f6970d98440) lock(0x7f6970d12b00) method(1) proc(0x7f6971004860) hold(0)
 LOCATION: PROCLOCK_PRINT, lock.c:330
PostgreSQL trace和debug
 LOG: 00000: LockCheckConflicts: no conflict: proclock(0x7f6970d98440) lock(0x7f6970d12b00) method(1) proc(0x7f6971004860) hold(0)
 LOCATION: PROCLOCK_PRINT, lock.c:330
 LOG: 00000: GrantLock: lock(0x7f6970d12b00) id(16384,26061,0,1,3,1) grantMask(80) req(0,0,0,0,0,0,1)=1 grant(0,0,0,0,0,0,1)=1 wait(0) type(ExclusiveLock)
 LOCATION: LOCK_PRINT, lock.c:318
 LOG: 00000: process 6499 still waiting for ShareLock on transaction 3268512749 after 1000.118 ms
 LOCATION: ProcSleep, proc.c:1246
 LOG: 00000: process 6499 acquired ShareLock on transaction 3268512749 after 5021.627 ms
 LOCATION: ProcSleep, proc.c:1250
 LOG: 00000: LockRelease: lock [16384,26061] ExclusiveLock
 LOCATION: LockRelease, lock.c:1761
 LOG: 00000: LockRelease: found: lock(0x7f6970d12b00) id(16384,26061,0,1,3,1) grantMask(80) req(0,0,0,0,0,0,1)=1 grant(0,0,0,0,0,0,1)=1 wait(0) type(ExclusiveLock)
 LOCATION: LOCK_PRINT, lock.c:318
 LOG: 00000: LockRelease: found: proclock(0x7f6970d98440) lock(0x7f6970d12b00) method(1) proc(0x7f6971004860) hold(80)
 LOCATION: PROCLOCK_PRINT, lock.c:330
 LOG: 00000: UnGrantLock: updated: lock(0x7f6970d12b00) id(16384,26061,0,1,3,1) grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0 wait(0) type(ExclusiveLock)
 LOCATION: LOCK_PRINT, lock.c:318
 LOG: 00000: UnGrantLock: updated: proclock(0x7f6970d98440) lock(0x7f6970d12b00) method(1) proc(0x7f6971004860) hold(0)
 LOCATION: PROCLOCK_PRINT, lock.c:330
 LOG: 00000: CleanUpLock: deleting: proclock(0x7f6970d98440) lock(0x7f6970d12b00) method(1) proc(0x7f6971004860) hold(0)
 LOCATION: PROCLOCK_PRINT, lock.c:330
PostgreSQL trace和debug
 LOG: 00000: CleanUpLock: deleting: lock(0x7f6970d12b00) id(16384,26061,0,1,3,1) grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0 wait(0) type(INVALID)
 LOCATION: LOCK_PRINT, lock.c:318
 LOG: 00000: LockReleaseAll: lockmethod=1
 LOCATION: LockReleaseAll, lock.c:1954
 LOG: 00000: LockReleaseAll done
 LOCATION: LockReleaseAll, lock.c:2199
 UPDATE 1
 根据给出的代码解读输出的内容:
PostgreSQL trace和debug
 inline static void
 LOCK_PRINT(const char *where, const LOCK *lock, LOCKMODE type)
 {
 if (LOCK_DEBUG_ENABLED(&lock->tag))
 elog(LOG,
 "%s: lock(%p) id(%u,%u,%u,%u,%u,%u) grantMask(%x) "
 "req(%d,%d,%d,%d,%d,%d,%d)=%d "
 "grant(%d,%d,%d,%d,%d,%d,%d)=%d wait(%d) type(%s)",
 where, lock,
 lock->tag.locktag_field1, lock->tag.locktag_field2,
 lock->tag.locktag_field3, lock->tag.locktag_field4,
 lock->tag.locktag_type, lock->tag.locktag_lockmethodid,
 lock->grantMask,
 lock->requested[1], lock->requested[2], lock->requested[3],
 lock->requested[4], lock->requested[5], lock->requested[6],
 lock->requested[7], lock->nRequested,
 lock->granted[1], lock->granted[2], lock->granted[3],
 lock->granted[4], lock->granted[5], lock->granted[6],
 lock->granted[7], lock->nGranted,
 lock->waitProcs.size,
 LockMethods[LOCK_LOCKMETHOD(*lock)]->lockModeNames[type]);
 }
PostgreSQL trace和debug
 3. 跟踪wal
 digoal=# set wal_debug=on;
 digoal=# select pg_switch_xlog();
 LOG: 00000: INSERT @ 20E/D4BB2878: prev 20E/D4BB2848; xid 0; len 0: XLOG
 LOCATION: XLogInsert, xlog.c:1077
 pg_switch_xlog
 ----------------
 20E/D4BB2898
 (1 row)
PostgreSQL trace和debug
 #ifdef WAL_DEBUG
 static void
 xlog_outrec(StringInfo buf, XLogRecord *record)
 {
 int i;
 appendStringInfo(buf, "prev %X/%X; xid %u",
 (uint32) (record->xl_prev >> 32),
 (uint32) record->xl_prev,
 record->xl_xid);
 appendStringInfo(buf, "; len %u",
 record->xl_len);
 for (i = 0; i xl_info & XLR_BKP_BLOCK(i))
 appendStringInfo(buf, "; bkpb%d", i);
 }
 appendStringInfo(buf, ": %s", RmgrTable[record->xl_rmid].rm_name);
 }
 #endif /* WAL_DEBUG */
 封装后在xlog.c中输出.
PostgreSQL trace和debug
 其他跟踪方法
 stap
 适合Linux系统
 编译时加上--enable-dtrace --enable-debug选项
 需要systemtap环境
 strace
 跟踪系统调用
 ltrace
 跟踪库函数调用
 gdb
 调试
PostgreSQL trace和debug
 stap举例, 跟踪SQL, 会话的块设备读写统计, cache的读写统计.
 vi test.stp
 global io_stat1%[120000] // 非cache读写字节数(单SQL)
 global io_stat11%[120000] // 非cache读写耗费时间(单SQL)
 global io_stat2%[120000] // cache读写字节数(单SQL)
 global io_stat22%[120000] // cache读写耗费时间(单SQL)
 global io_stat3%[120000] // 非cache读取字节数(总,只关心设备号)
 global io_stat33%[120000] // 非cache读写耗费时间(总,只关心设备号)
 global io_stat4%[120000] // cache读写字节数(总,只关心设备号)
 global io_stat44%[120000] // cache读写耗费时间(总,只关心设备号)
 global del%[120000] // 因为foreach中不允许修改本数组, 所以需要使用另一个数组来存储索引, 方便删除
 probe vfs.read.return {
 try {
 if ($return>0) {
 v_us=gettimeofday_us() - @entry(gettimeofday_us())
 if (devname!="N/A" && execname()=="postgres") { /*skip read from cache, filter postgres otherwise*/
 io_stat1[pid(),execname(),"R",devname] 0) {
 v_us=gettimeofday_us() - @entry(gettimeofday_us())
 if (devname!="N/A" && execname()=="postgres") { /*skip read from cache, filter postgres otherwise*/
 io_stat1[pid(),execname(),"W",devname] <<< $return
 io_stat11[pid(),execname(),"W",devname] <<< v_us
 io_stat3["W",devname] <<< $return
 io_stat33["W",devname] <<< v_us
 }
 if (devname=="N/A" && execname()=="postgres") {
 io_stat2[pid(),execname(),"W",devname] <<< $return
 io_stat22[pid(),execname(),"W",devname] <<< v_us
 io_stat4["W",devname] <<< $return
 io_stat44["W",devname] <<< v_us
 }
 }
 }
 catch(msg) {
 printdln("---", pn(), msg)
 }
 }
PostgreSQL trace和debug
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__start") {
 try {
 // SQL开始前, 先清除之前SQL的统计变量存储的信息.
 // 清除非CACHE读写统计变量的信息.
 // 因为foreach中不允许修改本数组, 所以需要使用另一个数组来存储索引, 方便删除, 这里就是del的用意.
 foreach([a,b,c,d] in io_stat1) {
 if (a==pid() && b==execname()) {
 del[a,b,c,d]=1 // 将a,b,c,d作为索引存储任意一个值到del数组. a,b,c,d就是一会需要清除的io_stat1,io_stat11的索引值.
 }
 }
 foreach([a,b,c,d] in del) {
 delete io_stat1[a,b,c,d]
 delete io_stat11[a,b,c,d]
 }
 delete del // 用完del后, 记得清除del的值.
PostgreSQL trace和debug
 // 清除CACHE读写统计变量的信息.
 foreach([a,b,c,d] in io_stat2) {
 if (a==pid() && b==execname()) {
 del[a,b,c,d]=1
 }
 }
 foreach([a,b,c,d] in del) {
 delete io_stat2[a,b,c,d]
 delete io_stat22[a,b,c,d]
 }
 delete del
 }
 catch(msg) {
 printdln("---", pn(), msg)
 }
 }
PostgreSQL trace和debug
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__done") {