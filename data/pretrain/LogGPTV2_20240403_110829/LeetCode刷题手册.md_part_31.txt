 type TreeNode struct {
 Definition for a binary tree node.
Right *TreeNode
Left *TreeNode
Val int 
---
## Page 280
func preorderTraversal2(root *TreeNode) []int 
//解法三 非递归，用栈模拟递归过程
func preorder(root *TreeNode, output *[]int) {
func preorderTraversall(root *TreeNode) []int {
//解法二递归
func preorderTraversal(root *TreeNode) []int {
if root == nil {
if root != nil { 
for len(stack) != 0 { 
stack = append(stack, root)
stack, res := []*TreeNode{},
return result
preorder(root, &result)
var result []int
return res
res := []int{}
if node.Right != nil {
if node != nil { 
stack = stack[:len(stack)-1]
node := stack[len(stack)-1]
return []int{}
preorder(root.Right, output)
if node.Left != nil {
preorder(root.Left, output)
*output = append(*output, root.val)
for .
tmp = preorderTraversal(root.Right)
for -, t := range tmp {
tmp := preorderTraversal(root.Left)
res = append(res, root.val) 
stack = append(stack, node.Right)
 stack = append(stack, node.Left)
res = append(res, node.val)
 res = append(res, t)
 res = append(res, t)
-,t := range tmp { 
[]int{}
r
---
## Page 281
代码
递归的实现方法，见代码。
解题思路
后根遍历一颗树。
题目大意
Follow up: Recursive solution is trivial, could you do it iteratively?
Example:
Given a binary tree, return the postorder traversal of its nodes' values.
题目
145. Binary Tree Postorder Traversal
package leetcode
Output: [3,2,1]
Input: [1,null,2,3]
* Definition for a binary tree node.
return res
1
---
## Page 282
It repeats until no input elements remain.
belongs within the sorted list, and inserts it there.
At each iteration, insertion sort removes one element from the input data, finds the location it 
output list.
Insertion sort iterates, consuming one input element each repetition, and growing a sorted 
Algorithm of Insertion Sort:
the sorted list 
With each iteration one element (red) is removed from the input data and inserted in-place into
element in the list.
A graphical example of insertion sort. The partial sorted list (black) initially contains only the first
Sort a linked list using insertion sort.
题目
147. Insertion Sort List
func postorder(root *TreeNode, output *[]int) {
func postorderTraversal(root *TreeNode) []int {
* type TreeNode struct {
return result 
var result []int 
postorder(root, &result)
*output = append(*output, root.val)
postorder(root.Right, output)
postorder(root.Left, output)
Right *TreeNode
Left *TreeNode
 Val int 
9
5
3
一
8
2
4
---
## Page 283
代码
按照题意做即可。
解题思路
链表的插入排序
题目大意
Example 2: 
 Example 1: 
环可以统一处理 
package leetcode
Output: -1->0->3->4->5
Input: -1->5->3->4->0
Output: 1->2->3->4
func insertionSortList(head *ListNode) *ListNode {
Input: 4->2->1->3
if head == nil {
for cur != nil {
next := &ListNode{val: O, Next: ni]}
pre := newHead 
cur := head 
newHead:= ＆&ListNode{val：O，Next：nil}/／ 这里初始化不要直接指向 head，为了下面循
 type ListNode struct { 
 Definition for singly-linked list.
for pre.Next != nil && pre.Next.val 0->3->4->5
Input: -1->5->3->4->0
Output: 1->2->3->4
Input: 4->2->1->3
* type ListNode struct { 
 Definition for singly-linked list.
return newHead.Next
cur = next 
pre = newHead // 归位，重头开始
ore.Next = cur
cur.Next = pre.Next
Val int 
---
## Page 285
func mergeTwoLists148(11 *ListNode, 12 *ListNode) *ListNode {
func middleNode1(head *ListNode) *ListNode {
func sortList(head *ListNode) *ListNode 
if l1 == nil {
if head == nil Il head.Next == nil { 
middleNode.Next = nil
middleNode := middleNode1(head)
12.Next = mergeTwoLists(l1, 12.Next)
if l1.val < l2.val {
if 12 == nil {
return pl
for p2.Next != nil && p2.Next.Next != nil {
p2 := head 
pl := head
return mergeTwoLists148(left, right)
right := sortList(middleNode)
left := sortList(head)
middleNode = cur 
cur = middleNode.Next 
if length <= 1 
for cur != nil {
cur := head 
length := 0
l1.Next = mergeTwoLists(l1.Next, 12)
 return 11
 return 12
 return head
return 11
p2 = p2.Next.Next
return head 
cur = cur.Next
Tength++ 
Next *ListNode
Y
---
## Page 286
Example 3: 
Example 2: 
Example 1: 
Note:
Valid operators are +, -, *, /. Each operand may be an integer or another expression.
Evaluate the value of an arithmetic expression in Reverse Polish Notation.
题目
150. Evaluate Reverse Polish Notation
● The given RPN expression is always valid. That means the expression would always evaluate
● Division between two integers should truncate toward zero.
= ((10 *(6 /(12 *-11)))+ 17)+ 5 
Explanation:
Output: 22 
Input: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
Explanation: (4 + (13 / 5)) = 6
Output: 6 
Input: ["4", "13", "5", "/", "+"]
Explanation: ((2 + 1) * 3) = 9
Output: 9 
Input: ["2", "1", "+", "3", "*"]
：（(10*（6/-132))+17）+ 5
（(10*(6 ／（(9+ 3)＊-11)))+ 17)+ 5 
22
(0 + 17)+ 5
（(10*0)+ 17）+ 5
 to a result and there won't be any divide by zero operation.
return 12
17 + 5
---
## Page 287
代码
这道题就是经典的考察栈的知识的题目。
解题思路
计算逆波兰表达式。
题目大意
func evalRPN(tokens []string) int {
import （
package leetcode
if len(tokens) == 1 {
"strconv"
stack， top := []int{}，0
case "/":
case
case
case "+":
switch v {
return i
i，
人
- := strconv.Atoi(tokens[o]]
div := stack[top-2] / stack[top-1]
stack = append(stack, mul)
mul := stack[top-2] * stack[top-1]
stack = stack[:top-2] 
top--
stack = append(stack, sub)
stack = stack[:top-2] 
sub := stack[top-2] - stack[top-1]
stack = append(stack, sum)
stack = stack[:top-2] 
sum := stack[top-2] + stack[top-1]
top--
"*":
"_":
top--
---
## Page 288
Note:
Example 3: 
 Example 2:
 Example 1:
Given an input string, reverse the string word by word.
151. Reverse Words in a String
题
ou pinous us pasianau nnor 'aamon 'saeds uen o suieal uieuon Kew us andul ·
● A word is defined as a sequence of non-space characters. 
space in the reversed string.
Explanation: You need to reduce multiple spaces between two words to a single
Output: "example good a"
Input: "a good 
spaces.
Explanation: Your reversed string should not contain leading or trailing
Output: "world! hello"
Input: "the sky is blue"
 contain leading or trailing spaces.
return stack[0]
default:
top++
 stack = append(stack, i)
top--
stack = append(stack, div) 
stack = stack[:top-2]
 := strconv.Atoi(v)
 example'
---
## Page 289
152. Maximum Product Subarray
代码
解题思路
进阶：
说明：
给定一个字符串，逐个翻转字符串中的每个单词。
题目大意
For C programmers, try to solve it in-place in O(1) extra space.
Follow up:
·依照题意，先把字符串按照空格分隔成每个小单词，然后把单词前后翻转，最后再把每个单词中间
·给出一个中间有空格分隔的字符串，要求把这个字符串按照单词的维度前后翻转。
·请选用C 语言的用户尝试使用O(1）额外空间复杂度的原地解法。
·无空格字符构成一个单词。
● You need to reduce multiple spaces between two words to a single space in the reversed
func reverse151(m *[]string, i int, j int) {
  (  s
import "strings"
package leetcode
ss := strings.Fields(s) 
如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
string.
for i<= j { 
return strings.Join(ss, "
reversel5l(&ss, 0, len(ss)-1)
添加空格。
j--
i++
（*m)[i]，（*m) [j] =（*m)[j]，（*m)[i] 
"
---
## Page 290
代码
解题思路
给定一个整数数组 nums，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。
题目大意
Example 2: 
Example 1:
one number) which has the largest product.
 Given an integer array nums, find the contiguous subarray within an array (containing at least 
题
package leetcode
·这一题是 DP 的题，状态转移方程是：最大值是Max(f(n)）= Max（Max(f(n-1)）* n,
·给出一个数组，要求找出这个数组中连续元素乘积最大的值。
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
func maxProduct(nums []int) int {
output:0
Input: [-2,0,-1]
Explanation: [2,3] has the largest product 6.
output: 6
Input: [2,3,-2,4]
目
minimum, maximum, res := nums[O], nums[O], nums[0]
return res
for i := l; i < len(nums); i++ {
后一个数是正数，最大值就在正数＊最大值中产生。
n）。只要动态维护这两个值，如果最后一个数是负数，最大值就在负数＊最小值中产生，如果最
*（（-u))u “u （（-u))x ）u =（(u))u [:(u （（-u))u
res = max(res, maximum)
minimum = min(nums[i], minimum*nums[i])
ifnums[i]<O{ 
maximum = max(nums[i], 
 maximum, minimum = minimum, maximum
maximum*nums [i]]
---
## Page 291
代码
解题思路
你可以假设数组中不存在重复元素。
[4,5,6,7,0,1,2])。请找出其中最小的元素。
假设按照升序排序的数组在预先未知的某个点上进行了旋转。（例如，数组[0,1,2,4,5,6,7] 可能变为
题目大意
 Example 2:
Example 1: 
You may assume no duplicate exists in the array.
Find the minimum element. 
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
Suppose an array sorted in ascending order is rotated at some pivot unknown to you 
题目
153. Find Minimum in Rotated Sorted Array
·给出一个原本从小到大排序过的数组，但是在某一个分割点上，
beforehand. 
·求数组最小的元素其实就是找分割点，前一个数比当前数大，后一个数比当前数也要大。可以用二