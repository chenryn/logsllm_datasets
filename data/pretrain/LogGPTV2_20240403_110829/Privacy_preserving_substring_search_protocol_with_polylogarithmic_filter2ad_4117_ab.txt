privacy of the access pattern and the search pattern observed
by the server. The access pattern to the outsourced indexing
data structures is concealed by employing an ORAM data
structure [27] – which is specifically designed to obliviously
access a remote data storage without leaking search and ac-
cess patterns. The asymptotic complexities of the protocol
showed in [22] mainly depends on the size of each document
being negligible w.r.t. the total number of them (denoted
as z). Indeed, it exhibits O(m log3(z)) communication and
computation complexities, assuming that the size of each
document is O(log2(z)). If the size of each document is not
negligible w.r.t. their total number, the computational and
communication cost of the solution increase proportionally
to the size n of the document collection, by (at least) a factor
log2(n). We show in Table 1 a concise comparison between
our PPSS protocol and the state-of-the-art solutions we have
just described.
3 PRELIMINARIES
In the following, we describe the basic algorithms and cryp-
tographic primitives employed in this work, detailing their
features and pointing out the properties needed to define
our privacy-preserving substring search (PPSS) protocol.
3.1 Substring Search with BWT
The Burrows-Wheeler Transform (BWT) [4] was designed
to compute a transformation of a given text (string), s, to
make it more compressible by run-length encoding methods.
It computes an invertible permutation of the string at hand,
L = BWT(s), that can be efficiently compressed if letters of
the alphabet Σ have repetitions in the string s, regardless of
their position. The BWT computation has a time complexity
that is linear in the string length n.
Besides its usefulness as a preprocessing for compression,
the BWT enables a very efficient substring search algorithm
when combined with the so-called suffix array, i.e., the array
of starting positions of all sorted suffixes of a string [11]. The
substring search algorithm has a linear time complexity in
the length of the substring to be searched for, and requires
only a limited storage overhead. Consider a string s with
length n defined over an alphabet Σ ∪ {$}, where the end-of-
string delimiter $ precedes any character in Σ, for any order
relation of choice (e.g., the alphabetical one). We denote
with an increasing numerical subscript the occurrences of
the same character in s (e.g., a1, a2 will denote the first and
second occurrence of a in s) and define as index of a substring
in s the position of its leading character in the original string,
counting from 1 onwards.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
String
Index
a1 l1 f1 a2 l2 f2 a3 $
l1 f1 a2 l2 f2 a3 $ a1
f1 a2 l2 f2 a3 $ a1 l1
a2 l2 f2 a3 $ a1 l1 f1
l2 f2 a3 $ a1 l1 f1 a2
f2 a3 $ a1 l1 f1 a2 l2
a3 $ a1 l1 f1 a2 l2 f2
$ a1 l1 f1 a2 l2 f2 a3
1
2
3
4
5
6
7
8
sorting
String
F
L
$ a1 l1 f1 a2 l2 f2 a3
a3 $ a1 l1 f1 a2 l2 f2
a2 l2 f2 a3 $ a1 l1 f1
a1 l1 f1 a2 l2 f2 a3 $
f2 a3 $ a1 l1 f1 a2 l2
f1 a2 l2 f2 a3 $ a1 l1
l2 f2 a3 $ a1 l1 f1 a2
l1 f1 a2 l2 f2 a3 $ a1
SA
8
7
4
1
6
3
5
2
Figure 1: Burrows Wheeler Transform L and Suffix Ar-
ray SA of the string alfalfa
As shown in Figure 1, taking as an example s = alfalfa$,
first the BWT computation mandates to build a list of n + 1
strings obtained performing a cyclic shift of s by all the
amounts in {0, 1, . . . , n}. Each of these n + 1 strings contain
the suffixes of s, represented by the portion of the shifted
string preceding the string delimiter $, whose indexes are
also computed and stored. The list of n + 1 shifted strings is
then sorted lexicographically, and the BWT of s, L = BWT(s),
is derived concatenating the trailing characters of each string
in the sorted list. The suffix array, SA, associated to L is built
by storing the indexes of the cyclic shifts of s in the sequence
defined by the sorting step.
Given L and SA, the inverse BWT transform, allows to re-
construct the original string s = BWT−1(L) and also to lookup
for the occurrences of a given substring. Note that, the string
F, i.e., the concatenation of the leading characters of the
sorted list of suffixes employed to compute the BWT (in blue
in Figure 1) can also be obtained concatenating s[SA[j]] for
all 1≤j≤n+1, i.e., F[j] = s[SA[j]]. We outline some useful
properties of the strings L and F in the following statement:
Theorem 3.1. Consider a string s , with length n + 1, over
the alphabet Σ ∪ {$} and $ as trailing character. Denote the
BWT of s as L = BWT(s), its suffix array as SA and as F the
string F[j] = s[SA[j]] with 1≤j≤n + 1. Denoting the position
of a character c ∈ Σ in F and L as posF(c) and posL(c), respec-
tively, the following properties hold:
(1) Characters in the same position in L and F are consecu-
tive in the original string s: ∀c ∈ s(posL(c) = posF(succs(c))).
(2) All the occurrences of the same character appear in
the same order in both F and L, i.e., for each pair of occur-
rences ⟨c1, c2⟩ of the same character: posF(c1) posF(c1)+1
implies the existence of a further occurrence, c3, between
the two, posF(c2)>posF(c3)>posF(c1). Property (2) implies
posL(c2)>posL(c3)>posL(c1), contradicting the hypothesis. □
Relying on the previous theorem, Algorithm 1 computes
the number of occurrences of a substring q with length m
in a string s with n characters, taking as input three data
structures and the substring to be searched.
The first data structure replaces L, the BWT of s, with a
(|Σ| + 1) × (n + 1) integer matrix M indexed by a character
c in Σ ∪ {$} and an integer i, storing in each cell M[c][i]
the number of occurrences of c in the string L[1], . . . , L[i].
The second data structure is a dictionary Rank of size |Σ|+1,
with pairs ⟨c, l⟩, where c∈Σ, and l, 0≤l≤n+1, is the number
of characters in s alphabetically smaller than c. The third
one is the suffix array SA of s.
The substring search procedure looks for the characters
in q starting from the last one, i.e., q[m], moving backwards
towards q[1]. In the algorithm, a run of equal characters
in F is tracked by α +1 and β which denote the positions
of the first and the last of them in F. Starting from q[m],
and the corresponding values for α and β (lines 1–2), the
algorithm looks for all the occurrences of q[m−1] followed
by q[m] in s (lines 4–6) to update α +1 and β with the first
and last positions in F of the leading character of the sub-
string q[m−1, m]. In particular, all the repetitions of q[m−1]
among the predecessors of q[m] in s = BWT−1(L) coincide
with the repetitions of q[m−1] in L[α + 1, . . . , β] (property
(1) in Thm. 3.1). Denote the first and last repetition of q[m−1]
in L[α +1, . . . , β] as q[m−1]first and q[m−1]last. Note that,
thanks to property (3) in Thm. 3.1, the repetitions of q[m−1]
in the unsorted string L[α +1, . . . , β] correspond to the subse-
quence of consecutive characters in F with positions between
α +1=posF(q[m−1]first) and β=posF(q[m−1]last).
The value posF(q[m−1]first) can be obtained adding to
the position of the leading character in F (i.e., 1) the number
r = Rank(q[m−1]) of characters in s smaller than q[m−1]
(i.e., the number of characters preceding any repetition of
q[m−1] in F), and the number of repetitions of q[m−1] with
smaller positions in F than q[m − 1]first. As by property (2)
in Thm. 3.1, the latter quantity equals M[q[m−1]][α] thus,
line 5 in Alg. 1 correctly updates α.
Algorithm 1: Substring search
Input: M, matrix representation of the BWT L of a given
n-character string s; M[c][i] stores the number of
occurrences of the character c∈Σ in the string
L[1], . . . , L[i], 1≤i≤n.
Rank, dictionary of size |Σ|+1, of pairs⟨c, l⟩, with
c∈Σ, l=Rank(c), 0≤l≤n+1 number of chars in s
smaller than c.
SA, suffix array with length n+1 of the string s;
q, a substring with length 1 ≤ m ≤ n.
of every repetition of q.
Output: Rq, set of positions in s with the leading character
1 c ← q[m]
2 α ← Rank(c), β ← α + M[c][n + 1]
3 for i ← m − 1 downto 1 do
c ← q[i], r ← Rank(c)
α ← r + M[c][α]
β ← r + M[c][β]
7 Rq ← ∅
8 for i ← α + 1 to β do
Rq ← Rq ∪ {SA[i]}
4
5
6
9
10 return Rq
Analogously, posF(q[m−1]last) can be obtained by adding
to the position of the leading character in F (i.e., 1) the num-
ber r = Rank(q[m−1]) of characters in s smaller than q[m−1]
(i.e., the number of characters preceding any repetition of
q[m−1] in F), and the number of repetitions of q[m−1] with
smaller positions over F than q[m−1]last. By property (2)
in Thm. 3.1, the latter quantity equals M[q[m−1]][β] − 1 as
the count given by M[q[m−1]][β] includes also q[m−1]last.
Thus, Alg. 1 at line 6 correctly updates β.
Note that, in case q[m−1] is not in L[α + 1, . . . , β], then
M[q[m − 1]][α] = M[q[m − 1]][β] thus, α and β are correctly
updated to the same value.
At the end of the first iteration of the loop, β−α amounts
to the number of repetitions of the substring q[m−1, m] in
s. In the next iteration the values α +1, β are updated with
the positions in F of the first and last repetition of the lead-
ing character of q[m−2, . . . , m]. The algorithm proceeds in
such a way to compute during the last iteration the values
of α +1 and β referring to the first and last positions in F
of the leading character of the whole substring q[1, . . . , m]
thus obtaining the number of occurrences of q, denoted as
oq, i.e., oq =β−α. Then, exploiting the fact that F[i]=s[SA[i]],
1≤i≤n + 1, the set Rq of integers in SA[j] with α +1≤j≤β,
includes the position of the leading character of each repeti-
tion of q in s. In Alg. 1 lines 7–9 computes Rq following the
mentioned observation.
In Alg. 1, the time and space complexities to find the num-
ber of repetitions of a substring q with length m amounts, re-
spectively, to 4m−1 memory accesses, i.e., O(m), and O(|Σ|n).
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
The computation of the set of positions of the leading char-
acters of repetitions of q in s increases the time complexity
up to O(m + oq).
Substring Search over a Collection of Documents. The
problem of finding the repetitions of a substring q with length
m over a set of z ≥ 1 documents D = {D1, . . . , Dz}, can be
solved considering a string s obtained as the ordered concate-
nation of all documents, each terminated by an end-of-string
character i.e.: s = D1$D2$ . . . Dz$, and returning a set of
pairs ⟨doc, off⟩, where doc is the identifier of the document
where the repetition of q is found, and off is the position
of the said replica into the document. Therefore, it is easy
to adapt Alg. 1 also to this multi-document scenario. Specif-
ically, Alg. 1 takes as input a matrix M derived from the
BWT of s, the dictionary Rank over the alphabet Σ and an
augmented suffix array SA storing for each cell SA[j], with
1≤j≤n+1 and n = len(s), a pair of values ⟨doc, off⟩.
Alg. 1 correctly computes the solution by recognizing
all the repetitions of q in D1, D2, . . . , Dz separately. Indeed,
the interleaving of the end-of-string delimiters with the se-
quence of documents during the construction of s guarantees
that no substring matching across two adjacent documents
is considered. Thus, the application of Alg. 1 with a prop-
erly prepared input returns a result equivalent to running it
separately over each document.
3.2 Cryptographic Building Blocks
Definition 3.2 (Additive Homomorphic Encryption). An ad-
ditive homomorphic encryption (AHE) scheme is a tuple of
four polynomial time algorithms (KeyGen, E, D, Add):
• (pk, sk, evk) ← KeyGen(1λ) is a probabilistic algorithm
which, given the security parameter λ, generates a pub-
lic key pk, a secret key sk and a public evaluation key
evk used to perform the homomorphic operation.
• c ← E(pk, m), denoted also as Epk(c), is a probabilistic
algorithm which, given the public key pk and a plain-
text value m ∈ M, where M denotes the plaintext
space of the scheme, encrypts the message to a cipher-
text c ∈ C, where C denotes the ciphertext space.
• m ← D(sk, c), denoted also as Dsk(c), is a determin-
istic algorithm which, given the secret key sk and a
ciphertext c ∈ C, recovers the plaintext value m ∈ M.
• cadd ← Add(evk, c1, c2), the homomorphic-addition
primitive, is a deterministic algorithm which, given
the evaluation key evk and two ciphertexts c1, c2 ∈
C, computes the homomorphic addition of the two
ciphertexts, which is a ciphertext cadd ∈ C.
For every key (pk, sk, evk) generated by the KeyGen algo-
rithm, the encryption, decryption and homomorphic addi-
tion algorithms satisfy the following correctness properties.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Decryption Correctness: ∀m ∈ M(Dsk(Epk(m)) = m)
Addition Correctness: ∀m1, m2∈M(Dsk(Add(evk,
Epk(m1), Epk(m2)))=m1+m2), where m1+m2 represents
the addition in the plaintext space M.