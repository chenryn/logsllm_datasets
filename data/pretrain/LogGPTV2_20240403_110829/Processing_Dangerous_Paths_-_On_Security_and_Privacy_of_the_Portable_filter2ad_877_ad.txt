s
w
o
d
n
i
W
c
a
M
x
u
n
i
L
s
n
o
i
t
c
n
u
f
#
6742
1900
114
Ǆ
Ǆ
1067
6851
1902
3529
Ǆ
Ǆ
Ǆ
206
–
1134
2559
2317
–
–
–
Ŷ
Ŷ
–
1183
–
Ŷ
1182
–
s
t
c
e
j
b
o
#
320
130
58
Ǆ
Ǆ
159
714
130
166
Ǆ
Ǆ
Ǆ
88
–
75
117
112
–
–
–
Ŷ
Ŷ
–
73
–
Ŷ
73
–
s
r
e
b
m
u
n
#
398
79
68
Ǆ
Ǆ
55
388
79
219
Ǆ
Ǆ
Ǆ
109
–
57
156
146
–
–
–
Ŷ
Ŷ
–
46
–
Ŷ
46
–
s
g
n
i
r
t
s
#
492
146
183
Ǆ
Ǆ
84
482
146
270
Ǆ
Ǆ
Ǆ
730
–
94
214
194
–
–
–
Ŷ
Ŷ
–
87
–
Ŷ
87
–
s
n
a
e
l
o
o
b
#
357
30
1
Ǆ
Ǆ
10
358
30
61
Ǆ
Ǆ
Ǆ
0
–
10
141
135
–
–
–
Ŷ
Ŷ
–
21
–
Ŷ
21
–
b
e
W
Chrome
Firefox
Safari
Opera
Edge
¹
– JavaScript support is not available
JavaScript must be enabled in settings Ŷ No feedback channel
Ǆ Application crashes
(cid:32) Permissions ignored (cid:35) Permissions honored
TABLE III.
ACCESS PERMISSION ENFORCEMENT IN PDF VIEWERS.
– Not available
TABLE II.
JAVASCRIPT EXECUTION ENVIRONMENT DIFFERENCES.
is completely up to the client application (i.e.,
to the standard, should be respected by consumer applications.
As it
the
PDF viewer) to enforce PDF permissions,
they cannot be
considered as effective security mechanisms. In reality, various
PDF applications, especially on Linux, do not interpret PDF
permissions at all. To evaluate which viewers “conform to
the standard” and enforce PDF access permissions, we saved
a document using Adobe Acrobat Reader, with “printing”,
“copying text”, and “editing” disabled. The results are given
in Table III.
Of the tested 28 applications, ﬁve viewers completely
ignore the user access permissions. For another two viewers,
we could observe inconsistent behavior. For example, Safari
allows to print the document but prohibits copying its text, in
a document where both actions are prohibited.
C. Hidden Data in PDF Documents
In this section we discuss two privacy-related PDF issues –
evitable metadata and revision recovery – which allow anyone
obtaining the ﬁle to reveal potentially sensitive information.
1) Evitable Metadata in PDF Documents:
In 2005, the
former US President Bush gave a speech on the war in Iraq and
published a strategy document on the White House website.
The metadata of the PDF document revealed a Duke University
political scientist as the original author of the document [33].
Afterwards, the NSA published best practices addressing risks
involved with hidden data and metadata in PDF ﬁles [9].
This example shows that there are valid use-cases where the
author of a document prefers to remain anonymous. The issue
of unwanted metadata in various ﬁle formats is well-known
and has been discussed in [11, 46]. Even though metadata
is a feature of the PDF standard, from a privacy perspective,
creator software should avoid to include excessive metadata
by default and instead let users opt-in. Although many PDF
documents are created with non-PDF software (e.g., LaTeX,
ofﬁce suites, or system printers), all professional PDF editors
offer the creation of PDF ﬁles as well. They are especially used
when designing complex PDF documents that, for example,
include forms and JavaScript. During the creation process,
these editors generate special PDF metadata objects, which
can contain sensitive information (e.g., usernames or dates).
To identify which amount of information is included by
modern applications, we created a minimal document with
each PDF editor and identiﬁed the metadata in the saved
ﬁle, which can either be found in the Document Information
Dictionary or within a Metadata Stream. The results are given
in Table IV. All tested PDF editors store the date of creation
and modiﬁcation, as well as the creator software, including its
version number. Eight editors store the author’s name, derived
11
from the name of the currently (at creation time) logged in
user. We classify the level of data exposure as “full”, if a PDF
editor silently stores the author’s name (i.e., the username) and
as “limited” if only dates or creator software strings are stored.
We also performed a large-scale evaluation, of 294 586
PDF ﬁles downloaded from the Internet of which 173 112
(58%) contained an author name. Of course, we cannot make
any statement if this information was included on purpose or
by accident. The single largest creator software of documents
containing an author was Microsoft Ofﬁce with 64 167 ﬁles.
it
is added to the document,
2) Revision Recovery: The PDF standard allows editing
applications to modify existing documents while only append-
ing to the ﬁle and leaving the original data intact. Whenever
new content
is not simply
inserted into the existing body section. Instead, a new body
section is appended at the end of the PDF ﬁle containing
new objects.30 This feature is called “incremental updates”.
It enables authors, for example, to undo changes. However, it
also enables third parties to restore previous versions of the
document, which may not be desired in the context of privacy
and document security. Especially when sensitive content is
explicitly redacted/blackened in a document to be published,
this can be dangerous. Instead of deleting the underlying text
object, PDF editors may simply overlay a black rectangle,
allowing for easy “unredaction”. Poorly redacted documents
revealing classiﬁed information have been published by the
Washington Post [23],
the Pentagon [41], Facebook [42],
and many others. Although this is a well-known problem
and has been researched for PDF documents generated by
various ofﬁce suites [26], modern PDF editors have an explicit
“redact” function, which has not yet been comprehensively
evaluated. Therefore, we systematically analyze how document
modiﬁcation and text redaction is implemented in PDF editors.
To test if sensitive information can be recovered from a
document redacted by a PDF editor, we used two PDF ﬁles –
one containing selectable text, the other containing a scanned
document (i.e., an image).31 We applied the PDF editor’s
“redact” function to draw a black rectangle over parts of the
document as well as the “delete” function to remove the text
or image. In all tested PDF editors, the “redaction” feature
was found to be secure, because the actual content of the text
or image object was modiﬁed, thereby overwriting potentially
sensitive content in the ﬁle. However, we determined potential
security issues in Acrobat Pro and and four other PDF editors,
whereby we deleted the content (text or image). The removed
content is not displayed anymore, but it is still contained in
the ﬁle and can be extracted. We do classify the level of data
exposure as “limited” in our evaluation (see Table IV), because
the “delete” function is not explicitly promoted as a secure
feature, even though users may misinterpret it as such. To
conclude, redaction tools in PDF viewers can be considered as
well-developed these days. The only identiﬁed risk is caused
by removing sensitive information without explicitly using the
redact feature of the PDF editors. This approach does not
provide the same security level and should be avoided.
30A new XRef index table and a new trailer must also be appended.
31We used the scan of a document from WWI, describing cipher techniques,
which was recently declassiﬁed by the CIA and can be downloaded from:
https://www.cia.gov/library/readingroom/docs/Secret-writing-document-one.pdf.
12
Evitable
Metadata
Revision
Recovery
Application
Acrobat Pro DC
Foxit PhantomPDF
PDF-XChange Editor
Perfect PDF Premium
PDF Studio Pro
Nitro Pro
Nuance Power PDF
iSkysoft PDF Editor
Master PDF Editor
Soda PDF Desktop
PDF Architect
PDFelement
s
w
o
d
n
i
W
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:32) Full data exposure (cid:71)(cid:35) Limited data exposure (cid:35) No exposure
TABLE IV.
HIDDEN DATA IN PDF DOCUMENTS.
IX. COUNTERMEASURES
In this section, we discuss short-term mitigations as well
as more generic in-depth countermeasures to be considered by
implementations and future versions of the PDF standard.
A. Towards an Unambiguous Speciﬁcation
To counter inﬁnite loops, constructs that can lead to cycles
or recursion, such as self-referencing objects, must be prohib-
ited in implementations (e.g., by remembering their path) and
ambiguous formulations should be removed from the standard.
A clearly stated speciﬁcation would also help to prevent
content masking attacks. In practice, this is not trivial as it
would require a formal model of the PDF standard, in order to
prove that the model is cycle free, and that a certain document
can only be processed in one single way. Furthermore, it must
be noted that an unambiguous PDF speciﬁcation would only
protect the document structure, not embedded data formats
such as calculator functions, XML, JavaScript, Flash, etc.
B. Resource Limitation and Sandboxing
To counter compression bombs, [45] propose to halt de-
compression once the size of the decompressed data exceeds an
upper limit. This strategy should be applied by PDF processing
applications. It must, however, be noted that a single document
can contain thousands of streams to be processed in a row.
In general, the authors think that limiting the resources to be
consumed by a single document, by sandboxing it – similar
to a tab in a modern web browser – is a good approach,
thereby preventing a malicious document to affect the whole
application or even the whole operating system.
C. Identiﬁcation of Dangerous Paths
Considering Figure 1, our attacks took a path from the
top to the ﬁle handle. If the path was neither blocked nor
required user consent, the attack was successful. Many viewer
applications blocked particular paths, but failed to block all
of them, thereby allowing us to bypass existing protection
mechanisms. This reveals the need for a systematic approach
to analyze insecure features in PDF documents. Two positive
examples for blocking dangerous paths are Safari and Edge.
These application blocked all but one path: Annotation ⇒(link)
⇒ URI Action ⇒ URL. In addition, this path required user
interaction by actively clicking on a Link Annotation. This
example illustrates how a secure PDF application should work.
We would like to see more applications that restrict the danger-
ous paths systematically (e.g., by removing them completely or
by asking the user for consent). This would reliably prevent
all possible variants of URL invocation, form data leakage,
local ﬁle leakage, credential theft, form modiﬁcation, ﬁle write
access, and code execution attacks discussed in this paper.
Launch Thread GoToE GoToR SubmitForm ImportData URI
532
(0.18%)
0
(0.00%)
0
(0.00%)
46 612
(15.82%)
4416
(1.49%)
693
(0.23%)
64
(0.02%)
TABLE V.
PDF ACTIONS IN 294 586 ANALYZED DOCUMENTS.
As part of this work, we conducted a large-scale evaluation
of 294 586 publicly available PDF documents. We analyzed
these ﬁles for the various PDF action types by ﬁrst uncom-
pressing all contained streams and then searching for the
patterns which deﬁne a certain action (e.g., /SubmitForm).
Results on how many documents contain a certain action are
depicted in Table V. As one can see, the only action-based PDF
feature that is widely in practice is the URI action, which can
be restricted to a Link Annotation. Insecure features instead
are rarely used in real-world PDF documents. Therefore, it
can be concluded that PDF viewers should drop support for
potentially dangerous features such as the Launch action or at
least disable them in the default settings.
D. Removing or Restricting JavaScript
JavaScript support in PDF applications is extremely varied.
The absence of a sound test suite to accompany the standard
makes it difﬁcult for developers to create compliant and robust
implementations. In addition, the great disparity between PDF
viewers regarding their feature support complicates the effec-
tive utilization of JavaScript by authors of PDF documents.
While we could observe some viewers to borrow a stable
JavaScript engine from other projects, such as SpiderMonkey
or V8, multiple viewers provide very unstable homebrewed
solutions which can be crashed with ease. Unrelated to the
used engine, many viewers implement obscure JavaScript API
functions without providing public documentation. Neither
their purpose nor resistance to exploitation is clear.
Given that PDF is supposed to be a format for portable
documents, the need to embed a full programming language
is debatable. Many legitimate use cases of JavaScript
in
PDF, such as input validation of form ﬁelds, can be covered
without a programming language, as established and proven
in HTML5.32. Any scenario exceeding the declarative markup
features of PDF should be considered to be implemented as
a web application instead of a PDF document, given that
JavaScript support and the security of modern web browsers
is well researched and robustly implemented.
32See https://html.spec.whatwg.org/multipage/input.html#input-impl-notes.
13
E. Implementing Privacy by Default
PDF editors should not include excessive metadata such
as usernames in the default settings. Furthermore, all editing
functions (redaction, modiﬁcation, and deletion of elements)
should be performed on the actual object to prevent a third
party from recovering previous versions of the document. Such
best practices regarding metadata and text redaction should not
only be applied by PDF editors, but by all applications that
allow to export content to PDF (e.g., ofﬁce suites).
X. CONCLUSION
PDF is more than a simple document format. Each standard
compatible PDF viewer must support a large set of additional
features. While PDF exploitation caused by implementation
bugs, such as buffer overﬂow based code execution, has been
a long-standing research area with many important results, a
security evaluation of standard PDF features has just started.
A. Systematization of PDF Processing Model
The research presented in this paper can be seen as a ﬁrst
step towards a systematization of research on PDF security
within the PDF data processing model. All of our test cases
fall within the PDF speciﬁcation, and mitigations against the
described attacks often consist in omitting certain standard
the Launch action). However, research
PDF features (e.g.,
in this direction, until now, was limited to picking some
functionality, evaluating it and in case of successful attacks,
(partially) disabling this single functionality. This will close
single security holes, but will not result in a provably secure
PDF viewer speciﬁcation. Instead, we have to fully understand
the data processing model behind the PDF standard to be able
to deﬁne what secure PDF rendering means.
B. Future Research Directions
1) Printers and PDF Libraries Used by Web Applications:
Modern printers are able to natively process PDF ﬁles and
print them to paper. Some of our attack classes are highly
relevant to these embedded interpreters. Examples are DoS,
local ﬁle leakage, content masking, or code execution. Sending
a PDF document to a company employee which does render
on a desktop PDF viewer, but causes a DoS attack on network
printers, may have a large attack potential. Web applications
which parse uploaded PDF ﬁles (e.g., to generate preview
images) also may show security weaknesses. While we did
not evaluate PDF parser libraries used in printers or in web
applications, our attack vectors may still be applicable here.
2) Automatic Test Vector Generation: Automatically gener-
ating test vectors from a human-readable speciﬁcation remains
an open problem in software engineering. This especially
holds for compliance tests. Even if such generation tools were
available, it would be questionable whether the test suite of
PDF ﬁles used in our evaluation could be generated by them.
Although our test cases are valid PDF documents, they are
edge cases and are not necessarily reproduced by speciﬁcation
coverage [28]. We conclude that an open question for the
research community is to generate such security test cases
automatically, not only relying on compliance test vectors.
REFERENCES
[1] Access Denied. DFS Issue 55. http://textﬁles.com/magazines/DFS/
dfs055.txt. May 1996.
[2] Adobe Systems. Acrobat JavaScript Scripting Guide. 2005.
[3] Adobe Systems. Adobe Supplement to the ISO 32000, BaseVersion:
1.7, ExtensionLevel: 3. 2008.
[4] Adobe Systems. Applying Actions and Scripts to PDFs. https://helpx.
adobe.com/acrobat/using/applying-actions-scripts-pdfs.html. 2019.
[5] Adobe Systems. Displaying 3D Models in PDFs. https://helpx.adobe.
com/acrobat/using/displaying-3d-models-pdfs.html. 2017.
[6] Adobe Systems. How to ﬁll in PDF forms. https://helpx.adobe.com/
en/acrobat/using/ﬁlling-pdf-forms.html. 2019.
[7] Adobe Systems. Starting a PDF review. https://helpx.adobe.com/
acrobat/using/starting-pdf-review.html. 2019.
[8] Adobe Systems. XMP Speciﬁcation Part 1. 2012.
[9] National Security Agency. Hidden Data and Metadata in Adobe PDF
Files: Publication Risks and Countermeasures. 2008.
[10] A. Albertini. “This PDF is a JPEG; or, This Proof of Concept is a
Picture of Cats”. In: PoC 11 GTFO 0x03 (2014). URL: https://www.
alchemistowl.org/pocorgtfo/pocorgtfo03.pdf.
[11] C. Alonso et al. Disclosing Private Information from Metadata,
Hidden Info and Lost Data. 2008.
P. Bieringer. Decompression Bomb Vulnerabilities. 2001.
[12]
[13] A. Blonce, E. Filiol, and L. Frayssignes. “Portable Document Format
Security Analysis and Malware Threats”. In: BlackHat Europe (2008).
[14] Boxcryptor. Malware in Email Attachments: Which File Extensions
are Dangerous? https://boxcryptor.com/blog/post/malware-in-email-
attachments/. 2019.
[15] C. Carmony et al. “Extract Me If You Can: Abusing PDF Parsers in
Malware Detectors.” In: NDSS. The Internet Society, 2016.
[18]
[17]
[16] A. Castiglione, A. De Santis, and C. Soriente. “Security and Privacy
Issues in the Portable Document Format”. In: Journal of Systems and
Software 83.10 (2010), pp. 1813–1822.
T. Claburn. Use an 8-char Windows NTLM password? https://www.