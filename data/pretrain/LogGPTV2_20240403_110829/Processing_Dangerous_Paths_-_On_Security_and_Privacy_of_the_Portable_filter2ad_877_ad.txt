# Introduction to PDF Security and Privacy Issues

## A. JavaScript Execution Environment Differences

The support for JavaScript in PDF viewers varies significantly, which can lead to inconsistencies in the execution environment. For example, some viewers may not support certain JavaScript features, while others may have unique behaviors or bugs. Below is a table that summarizes the differences in JavaScript execution environments across various PDF viewers:

| **Viewer** | **Chrome** | **Firefox** | **Safari** | **Opera** | **Edge** |
|------------|------------|-------------|------------|-----------|----------|
| **JavaScript Support** | Available | Available | Available | Available | Available |
| **Feedback Channel** | No feedback channel (Ŷ) | No feedback channel (Ŷ) | No feedback channel (Ŷ) | No feedback channel (Ŷ) | No feedback channel (Ŷ) |
| **Application Crashes** | Permissions ignored ((cid:32)) | Permissions honored (cid:35) | Permissions ignored (cid:32) | Permissions honored (cid:35) | Permissions honored (cid:35) |

### Table II: JavaScript Execution Environment Differences
- **(cid:32)**: Permissions ignored
- **(cid:35)**: Permissions honored
- **Ŷ**: No feedback channel

## B. Access Permission Enforcement in PDF Viewers

According to the PDF standard, access permissions should be enforced by the client application (i.e., the PDF viewer). However, in practice, many PDF applications, especially on Linux, do not interpret these permissions. To evaluate which viewers conform to the standard and enforce PDF access permissions, we saved a document using Adobe Acrobat Reader with "printing," "copying text," and "editing" disabled. The results are shown in the following table:

| **Viewer** | **Printing** | **Copying Text** | **Editing** |
|------------|--------------|------------------|-------------|
| **Chrome** | Ignored (cid:32) | Honored (cid:35) | Honored (cid:35) |
| **Firefox** | Honored (cid:35) | Honored (cid:35) | Honored (cid:35) |
| **Safari** | Ignored (cid:32) | Ignored (cid:32) | Honored (cid:35) |
| **Opera** | Honored (cid:35) | Honored (cid:35) | Honored (cid:35) |
| **Edge** | Honored (cid:35) | Honored (cid:35) | Honored (cid:35) |

### Table III: Access Permission Enforcement in PDF Viewers
- **(cid:32)**: Permissions ignored
- **(cid:35)**: Permissions honored

Of the 28 tested applications, five viewers completely ignore user access permissions, and two viewers exhibit inconsistent behavior. For example, Safari allows printing but prohibits copying text, even though both actions are prohibited in the document.

## C. Hidden Data in PDF Documents

In this section, we discuss two privacy-related issues in PDF documents: evitable metadata and revision recovery, which can reveal sensitive information.

### 1. Evitable Metadata in PDF Documents

Metadata in PDF documents can include sensitive information such as the author's name, creation date, and software version. In 2005, a strategy document published by the White House revealed the original author through its metadata. This highlights the need for PDF editors to avoid including excessive metadata by default.

We created minimal documents with various PDF editors and analyzed the metadata stored. The results are summarized below:

| **PDF Editor** | **Author Name** | **Creation Date** | **Modification Date** | **Creator Software** |
|----------------|-----------------|-------------------|-----------------------|----------------------|
| **Acrobat Pro DC** | Full data exposure (cid:71)(cid:35) | Limited data exposure (cid:35) | Limited data exposure (cid:35) | Limited data exposure (cid:35) |
| **Foxit PhantomPDF** | Full data exposure (cid:71)(cid:35) | Limited data exposure (cid:35) | Limited data exposure (cid:35) | Limited data exposure (cid:35) |
| **PDF-XChange Editor** | Full data exposure (cid:71)(cid:35) | Limited data exposure (cid:35) | Limited data exposure (cid:35) | Limited data exposure (cid:35) |
| **Perfect PDF Premium** | No exposure (cid:32) | Limited data exposure (cid:35) | Limited data exposure (cid:35) | Limited data exposure (cid:35) |
| **PDF Studio Pro** | No exposure (cid:32) | Limited data exposure (cid:35) | Limited data exposure (cid:35) | Limited data exposure (cid:35) |

### Table IV: Hidden Data in PDF Documents
- **(cid:71)(cid:35)**: Full data exposure
- **(cid:35)**: Limited data exposure
- **(cid:32)**: No exposure

### 2. Revision Recovery

The PDF standard allows for incremental updates, where new content is appended to the file rather than inserted into the existing body. This feature enables authors to undo changes but also allows third parties to recover previous versions of the document. Poorly redacted documents can reveal sensitive information. We tested several PDF editors and found that the "redact" feature is generally secure, but the "delete" function may leave sensitive content in the file.

## IX. Countermeasures

### A. Towards an Unambiguous Specification

To prevent infinite loops and content masking attacks, the PDF specification should prohibit constructs that can lead to cycles or recursion. A clearly stated specification would help ensure that documents are processed consistently.

### B. Resource Limitation and Sandboxing

To counter compression bombs, PDF processing applications should halt decompression once the size of the decompressed data exceeds an upper limit. Additionally, sandboxing documents, similar to tabs in modern web browsers, can prevent malicious documents from affecting the entire application or operating system.

### C. Identification of Dangerous Paths

Many viewer applications block particular paths but fail to block all of them, allowing attackers to bypass protection mechanisms. A systematic approach to analyzing insecure features is needed. Applications like Safari and Edge block most dangerous paths, requiring user interaction for potentially risky actions.

### D. Removing or Restricting JavaScript

JavaScript support in PDF applications is highly varied and often unstable. Given that PDF is a format for portable documents, the need to embed a full programming language is debatable. Many legitimate use cases of JavaScript in PDFs can be covered without a programming language, as established in HTML5.

### E. Implementing Privacy by Default

PDF editors should not include excessive metadata by default and should perform editing functions on the actual object to prevent recovery of previous versions. These best practices should be applied by all applications that allow exporting content to PDF.

## X. Conclusion

PDF is more than a simple document format, and each standard-compliant PDF viewer must support a large set of additional features. While implementation bugs have been a long-standing research area, a security evaluation of standard PDF features is just beginning. Future research should focus on understanding the data processing model behind the PDF standard to define what secure PDF rendering means.

### References

[1] Access Denied. DFS Issue 55. http://textfiles.com/magazines/DFS/dfs055.txt. May 1996.
[2] Adobe Systems. Acrobat JavaScript Scripting Guide. 2005.
[3] Adobe Systems. Adobe Supplement to the ISO 32000, BaseVersion: 1.7, ExtensionLevel: 3. 2008.
[4] Adobe Systems. Applying Actions and Scripts to PDFs. https://helpx.adobe.com/acrobat/using/applying-actions-scripts-pdfs.html. 2019.
[5] Adobe Systems. Displaying 3D Models in PDFs. https://helpx.adobe.com/acrobat/using/displaying-3d-models-pdfs.html. 2017.
[6] Adobe Systems. How to fill in PDF forms. https://helpx.adobe.com/en/acrobat/using/filling-pdf-forms.html. 2019.
[7] Adobe Systems. Starting a PDF review. https://helpx.adobe.com/acrobat/using/starting-pdf-review.html. 2019.
[8] Adobe Systems. XMP Specification Part 1. 2012.
[9] National Security Agency. Hidden Data and Metadata in Adobe PDF Files: Publication Risks and Countermeasures. 2008.
[10] A. Albertini. “This PDF is a JPEG; or, This Proof of Concept is a Picture of Cats”. In: PoC 11 GTFO 0x03 (2014). URL: https://www.alchemistowl.org/pocorgtfo/pocorgtfo03.pdf.
[11] C. Alonso et al. Disclosing Private Information from Metadata, Hidden Info and Lost Data. 2008.
[12] P. Bieringer. Decompression Bomb Vulnerabilities. 2001.
[13] A. Blonce, E. Filiol, and L. Frayssignes. “Portable Document Format Security Analysis and Malware Threats”. In: BlackHat Europe (2008).
[14] Boxcryptor. Malware in Email Attachments: Which File Extensions are Dangerous? https://boxcryptor.com/blog/post/malware-in-email-attachments/. 2019.
[15] C. Carmony et al. “Extract Me If You Can: Abusing PDF Parsers in Malware Detectors.” In: NDSS. The Internet Society, 2016.
[16] A. Castiglione, A. De Santis, and C. Soriente. “Security and Privacy Issues in the Portable Document Format”. In: Journal of Systems and Software 83.10 (2010), pp. 1813–1822.
[17] T. Claburn. Use an 8-char Windows NTLM password? https://www.