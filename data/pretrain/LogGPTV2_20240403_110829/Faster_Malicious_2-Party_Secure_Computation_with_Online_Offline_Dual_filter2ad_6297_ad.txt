secure only against passive adversaries. We later discuss
how to achieve weak malicous security.
The basic building block is a protocol for private
equality test (PEQT) based on OT. A beneﬁt of using
OT-based techniques is that the bulk of the effort in gen-
erating OTs can be done in the ofﬂine phase, again lead-
ing to a lightweight online phase for the resulting PSI
protocol.
Suppose a sender has input s and receiver has input
r, with r,s ∈ {0,1}n, where the receiver should learn
whether r = s (and nothing more). The PEQT protocol
requires n string OTs; in the ith one, the receiver uses
choice bit r[i] and the sender chooses random string in-
puts (mi
s[i], and
r[i], which is the
1). The sender ﬁnally sends S =(cid:31)i mi
0,mi
the receiver checks whether S =(cid:31)i mi
XOR of his OT outputs.
The PEQT can be extended to a private set mem-
bership test (PSMT), in which the sender has a set
{s1, . . . ,s t} of strings, and receiver learns whether r ∈
{s1, . . . ,s t}. We simply have the sender randomly
permute the s j values, compute for each one S j =
(cid:31)i F(mi
s j[i], j) and send {S1, . . . ,S t}, where F is a PRF.5
The receiver can check whether (cid:31)i F(mi
r[i], j) matches
S j for any j. Finally, we can achieve a PSI where the
receiver has strings {r1, . . . ,r t} by running independent
PSMTs of the form r j ∈ {s1, . . . ,s t} for each r j (in ran-
dom order).
The overhead of this approach is O(t2), and [30] de-
scribe ways to combine hashing with this basic PSI pro-
tocol to obtain asymptotically superior PSI protocols for
large sets. However, we are dealing with very small val-
ues of t (typically at most 5), so the concrete cost of this
simple protocol is very low.
To make the PSI protocol two-phase, we run the OTs
and commit to the S values in the input-committing
phase. Then the output phase consists simply of the
sender opening the commitments to S.
7.3 Achieving weakly-malicious security
and double-sided output.
We use the [30] protocol but instantiate it with malicious-
secure OTs. This leads to the standard notion of security
against an active receiver since the simulator can extract
the receiver’s input from its choice bits to the OTs.
However, the protocol does not achieve full security
against a malicious sender. In the simple PEQT building
block, the simulator cannot extract a malicious sender’s
input. Doing so would require inspecting S,{mi
b} and
determining a value s such that S =(cid:31)i mi
s[i]. Such an
s may not exist, and even if it did, the problem seems
5Simply XORing the mi
b values would reveal some linear dependen-
cies; applying a PRF renders all of the S j values independently random
except the ones for which r = s j.
closely related to a subset-sum problem.
However, if the simulator knows a candidate s∗, it can
certainly check whether the corrupt sender has sent the
corresponding S value. This is essentially the only prop-
erty required for weakly malicious security.
We note that a corrupt sender could use inconsistent
sets {s1, . . . ,s t} in the parallel PSMT instances. How-
ever, the simulator can still extract whether the candidate
s∗ was used in each of them. If the sender used s∗ in t(cid:27)
of the t subprotocols, then the simulator can send s∗ to
the ideal PSI functionality with probability t(cid:27)/t, which is
a sound simulation for weakly-malicious security.
Regarding double-sided output, it sufﬁces to simply
run two instances of the one-sided-output PSI protocol,
one in each direction, in parallel. Again, this way of
composing PSI protocols is not sound in general, but it is
sound for the special case of weakly-malicious security.
7.4 Trading computation for lower round
complexity.
Even when random OTs are pre-processed ofﬂine, the
PSI protocol as currently described requires two rounds
to commit to the outputs, and one round to release the
output. The two input-committing rounds are (appar-
ently) inherently sequential, stemming from the sequen-
tial nature of OT derandomization.
In terms of round complexity, these two PSI rounds
are a bottleneck within the overall dual-execution pro-
tocol. We now describe a variant of the PSI protocol
in which the two input-committing messages are asyn-
chronous and can be sent simultaneously. The modi-
ﬁed protocol involves (a nontrivial amount of) additional
computation but reduces the number of rounds in the
overall 2PC online phase by one. This tradeoff does not
always reduce the overall latency of the 2PC online phase
— only sometimes, depending on the number of garbled
circuits being evaluated and the network latency. The
speciﬁc break-even points are discussed in Section 9.
0,mi
In our PEQT protocol above, the two parties have pre-
processed random OTs, with choice bits c and random
strings mi
1. To commit to his PSI input, the receiver’s
ﬁrst message is d = c⊕ r, to which the sender responds
with S =(cid:31)i mi
d[i]⊕s[i].
Consider randomizing the terms of this summation as
S =(cid:31)i[mi
d[i]⊕s[i] ⊕ zi] where zi are random subject to
(cid:31)i zi = 0.
Importantly, (1) each term in this sum de-
pends only on a single bit of d; (2) revealing all terms in
the sum reveals no more than S itself. We let the sender
commit to all the potential terms of this sum and reveal
them individually in response to d. In more detail, the
sender commits to the following values (in this order):
((cid:28)) [m1
[m1
s[1] ⊕ z1]
s[1]⊕1 ⊕ z1]
[m2
[m2
s[2] ⊕ z2]
s[2]⊕1 ⊕ z2]
···
···
[mn
[mn
s[n] ⊕ zn]
s[n]⊕1 ⊕ zn]
306  25th USENIX Security Symposium 
USENIX Association
10
dexed by d to see whether their XOR is(cid:31)i mi
Importantly, these commitments can be made before d is
known. In response to the message d from the receiver,
the sender is expected to release the output by opening
the commitments indexed by the bits of d. The sender
will open the commitments {mi
d[i]⊕s[i] ⊕ zi}; the receiver
will compute their XOR S and proceed as before.
The simulator for a corrupt sender simulates a random
message d and then checks whether the sender has used
a candidate input s∗ by extracting the commitments in-
d[i]⊕s∗[i].6
We can further move the commitments to the ofﬂine
phase, since there are two commitments per bit of s per
PEQT. Observe that the commitments in ((cid:31)) are arranged
according to the bits of s, which are not known until the
online phase. Instead, in the ofﬂine phase the sender can
commit to these values arranged according to a random
string π. In the online phase, the sender commits to its
input s by sending s ⊕ π. Then in response to receiver
message d, the sender must open the commitments in-
dexed by the bits of d ⊕ (s⊕ π).
protocol, the sender commits to an array of F(mi
values for each j.
7.5 Final Protocols
For completeness, we provide formal descriptions of
the ﬁnal PSI protocols (synchronous 3-round and asyn-
chronous 2-round) in Figures 13 & 14.
When extending the asynchronous PEQT to a PSMT
b, j)⊕ z j
i
We defer the proof of their security to the full version.
Theorem 4. The protocols Πsync-psi and Πasync-psi de-
scribed in Figures 13 & 14 are weakly-malicious secure
(in the sense of Deﬁnition 3) when (cid:29) ≥ κs, the statistical
security parameter.
8 Protocol Details & Implementation
The full details of our protocol are given in Figure 15
and the c++ implementation may be found at https:
//github.com/osu-crypto/batchDualEx. The pro-
tocol uses three security parameters:
κb is chosen so that the protocol will leak a bit to the
adversary with probability at most 2−κb. This pa-
rameter controls the number of garbled circuits used
per execution.
κs is the statistical security parameter, used to deter-
mine the length of the reconciliation strings used as
PSI input (the PSI protocol scales with the length
of the PSI input values). The adversary can guess
an unknown reconciliation value with probability at
most 2−κs.
6Note: although we intend for the two parties’ messages to be sent
simultaneously, we must be able to simulate in the case that a corrupt
sender waits for incoming message d before sending its commitments.
κc is the computational security parameter, that con-
trols the key sizes for OTs, commitments and gar-
bled circuits.
In our evaluations we consider κc = 128, κs ∈ {40,80}
and κb ∈ {20,40,80}. In the full version we prove the
security of our protocol:
Implementation & Architecture
Theorem 5. Our protocol (Figure 15) securely realizes
the Fmulti-sfe functionality, in the presence of malicious
adversaries.
8.1
In the ofﬂine phase, the work is divided between p paral-
lel sets of 4 threads. Within each set, two threads gener-
ate OTs and two threads garble and receive circuits and
related commitments. Parallelizing OT generation and
circuit generation is key to our ofﬂine performance; we
ﬁnd that these two activities take roughly the same time.
We generate OTs using an optimized implementation
of the Keller et al. [15] protocol for OT extension. Start-
ing from 128 base OTs (computed using the protocol of
[28]), we ﬁrst run an OT extension to obtain 128· p OT
instances. We then distribute these instances to the p dif-
ferent thread-sets, and each thread-set uses its 128 OT
instances as base OTs to perform its own independent
OT extension.
We further modiﬁed the OT extension protocol to pro-
cess and ﬁnalize OT instances in blocks of 128 instances.
This has two advantages: First, OT messages can be
used by other threads in the ofﬂine phase as they are
generated. Second, OT extension involves CPU-bound
matrix transposition computations along with I/O-bound
communication, and this approach interlaces these oper-
ations.
The ofﬂine phase concludes by checking the circuits in
the cut-and-choose, bucketing the circuits, and exchang-
ing garbled inputs for the random k-probe-encoded in-
puts.
The online phase similarly uses threading to exploit
the inherently parallel nature of the protocol. Upon re-
ceiving input, a primary thread sends the other party
their input correction value as the ﬁrst protocol message.
This value is in turn given to B sub-threads (where B
is the bucket size) that transmit the appropriate wire la-
bels. Upon receiving the labels, the B threads (in par-
allel) each evaluate a circuit.Each of the B threads then
executes (in parallel) one of the set-membership PSI sub-
protocols. After the other party has committed to their
PSI inputs, the translation tables of each circuit is opened
and checked in parallel. The threads then obtain the in-
tersection and the corresponding output value.
8.2 Low-level Optimizations
We instantiate the garbled circuits using the state-of-the-
art half-gates construction of [35]. The implementation
USENIX Association  
25th USENIX Security Symposium  307
11
utilizes the hardware accelerated AES-ni instruction set
and uses ﬁxed-key AES as the gate-level cipher, as sug-
gested by [3]. Since circuit garbling and evaluation is the
major computation bottleneck, we have taken great care
to streamline and optimize the execution pipeline.
The protocol requires the bucket’s common output la-
bels to be random. Instead, we can optimize the online
phase choose these labels as the output of a hash at a ran-
dom seed value. The seed can then be sent instead of
sending all of the common output labels. From the seed
the other party regenerates the output labels and proceed
to validate the output commitments.
9 Performance Evaluation
We evaluated the prototype on Amazon AWS instances
c4.8xlarge (64GB RAM and 36 virtual 2.9 GHz
CPUs). We executed our prototype in two network set-
tings: a LAN conﬁguration with both parties in the same
AWS geographic region and 0.2 ms round-trip latency;
and a WAN conﬁguration with parties in different regions
and 75 ms round-trip latency.
We demonstrate the scalability of our implementation
by evaluating a range of circuits:
• The AES circuit takes a 128-bit key from one party
and a 128-bit block from another party and outputs
a 128-bit block to both. The circuit consists of 6800
AND gates and 26,816 XOR gates.
• The SHA256 circuit takes 512 bits from both par-
ties, XORs them together and returns the 256-bit
hash digest of the XOR’ed inputs. The circuit con-
sists of 90,825 AND gates and 145,287 XOR gates.
takes a 16-block
(2048-bit) input from one party and a 128-bit key
from the other party and returns the 128-bit result
of 16-round AES-CBC-MAC. The circuit consists
of 156,800 AND gates and 430,976 XOR gates.7
• The AES-CBC-MAC circuit
In all of our tests, we use system parameters derived
from Lemma 1. N denotes the number of executions, and
B denotes the bucket size (number of garbled circuits per
execution) and we use ∼ B online threads.
9.1 PSI protocol comparison
In Section 7 we describe two PSI protocols that can
be used in our 2PC protocol — a synchronous protocol
that uses three rounds total, and an asynchronous pro-
tocol that uses two rounds total (at higher communica-
tion cost). We now discuss the tradeoffs between these
two PSI protocols. A summary is given in Figure 5. For
small parameters in the LAN setting, the 2-round asyn-
chronous protocol is faster overall, but for larger param-
eters the 3-round synchronous protocol is faster. This is
7The circuit is not optimized; each call to AES recomputes the en-
tire key schedule.
PSI
κs
40
80
B
2
3
4
6
5
7
9
Async
Sync
Time
0.31
0.34
0.42
0.65
0.55
0.83
1.39
Size
2,580
5,790
10,280
32,100
23,100
62,860