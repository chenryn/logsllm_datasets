### The Preprocessing Protocol

We start by assuming the existence of a random oracle \( O \) and a generic MPC functionality \( F_{\text{MPC}} \), which is formalized in Figure 9. This resource can be implemented in several ways, such as using Tiny-OT [NNOB12] for bit operations, SPDZ [BDOZ11, DPSZ12] for field operations, and the induced multiparty computation protocol over elliptic curves [DOK+20]. A protocol implementing 2-DPF with \( O(\lambda \cdot \log N) \) communication was presented in [BCG+20]. Sometimes, we use \( F_{\text{MPC}} \) to perform additions between Module-LPN special positions, although integer operations are not supported by the functionality. In such cases, we assume that the special positions are stored bit by bit, allowing us to compute sums using operations over \( \mathbb{F}_2 \). For clarity, we will use the symbols \( [[\cdot]] \) and \( [[\cdot]]_2 \) to denote elements stored by \( F_{\text{MPC}} \) over \( \mathbb{F}_q \) and \( \mathbb{F}_2 \), respectively.

#### The Preprocessing Protocol \( \Pi^R_{\text{Prep}} \)

A formal description of the preprocessing protocol \( \Pi^R_{\text{Prep}} \) is available in Figure 6. The construction closely follows the blueprint outlined by PCGECDSA but performs the operations in a distributed manner, merging the seed generation and evaluation phases indissolubly. To simplify notation, we will denote the multiparty procedure implementing the distributed sum of point functions as 2-DSPF, even though it is not featured in \( F_{\text{MPC}} \). The operation takes as input the dimension of the resulting vector \( N \), the \( t \) special positions, the corresponding \( t \) non-zero elements, and the indices \( i \) and \( j \) of the two parties among which the output is secret-shared. The output is not a series of DSPF keys but their full evaluation. This instruction is a shorthand for \( t \) executions of 2-DPF among the same parties \( P_i \) and \( P_j \), outputting the sum of the resulting \( t \) secret-shared unit vectors and allowing the corresponding influence and leakage. In \( \Pi^R_{\text{Prep}} \), this leakage will be absorbed by the hardness of the Module-LPN assumption, ensuring security.

**Initialization:**
During initialization, each party \( P_i \) samples the key material \( \text{sk}_i \) and \( \alpha_i \), and inputs these values into \( F_{\text{MPC}} \). Using \( F_{\text{MPC}} \), the parties compute and output the ECDSA public key \( \text{PK} = \sum_{i \in [n]} \text{sk}_i \cdot G \).

**Generation of Ring ECDSA Tuples:**
To generate a ring ECDSA tuple, each party \( P_i \) samples, for every \( r \in [c] \), the \( t \) special positions and non-zero elements describing \( u_r^i(X) \). These sampled values are input into the \( F_{\text{MPC}} \) functionality. Later, using 2-DSPF as in PCGECDSA, each party \( P_i \) computes \( \tilde{v}_i \), \( \tilde{w}_i \), and for every \( j \neq i \), \( \tilde{M}_{i,j} \) and \( \tilde{K}_{j,i} \). Finally, after sampling \( a \) using the random oracle \( O \), each party can complete the evaluation of the PCG seeds, obtaining their share of the ring ECDSA tuple.

**Theorem 3:**
Let \( F(X) \) be a degree-\( N \) polynomial over the prime field \( \mathbb{F}_q \) and let \( t, c \in \mathbb{N} \). Define the ring \( R := \mathbb{F}_q[X]/(F(X)) \). If the \( R_c \)-LPN\(_t \) problem with static leakage is hard, then the protocol \( \Pi^R_{\text{Prep}} \) in the \( F_{\text{MPC}} \)-hybrid model with a random oracle is secure. Moreover, if all parties are honest, the protocol aborts with negligible probability.

**Security Proof:**
The security proof of the preprocessing protocol \( \Pi^R_{\text{Prep}} \) closely resembles the proof of Theorem 2. The only major difference is the leakage about the special positions allowed by the DPSF procedure in \( F_{\text{MPC}} \). However, this leakage will be absorbed by the hardness of the Module-LPN problem, ensuring security. The complete proof of Theorem 3 can be found in Appendix C.

**Efficiency:**
Our protocol is particularly efficient from a communication perspective. The cost of the triple generation procedure per party includes:
- \( 2(n - 1) \cdot c \cdot t \) times the total complexity of 2-DPF with output length \( N \),
- \( (n - 1) \cdot c^2 \cdot t^2 \) times the total complexity of 2-DPF with output length \( 2N \),
- \( 2c \cdot t \cdot (\log q + \log N) \) bits of communication for the inputs,
- \( 4n(n - 1) \cdot c \cdot t \cdot \log q \) bits for the multiplications in step 3,
- \( 2n(n - 1) \cdot c^2 \cdot t^2 \cdot \log q \) bits for the outer product,
- \( 2n(n - 1) \cdot c^2 \cdot t^2 \cdot \log N \) bits for the outer sum,
- \( O(\lambda \cdot n + \log q) \) complexity for the MAC checks.

Given the complexity analysis of 2-DPF [BCG+20], the communication complexity of the procedure is dominated by \( 13n^2 \cdot c^2 \cdot t^2 \cdot (\log N + \log q) + 4n \cdot c^2 \cdot t^2 \cdot \log N \cdot \lambda \).

**Implementation and Experimental Results**

We implemented our protocol and conducted experiments to test its practicality. Our code is implemented for the Secp256k1 elliptic curve used in Bitcoin, demonstrating the applicability of our threshold ECDSA to blockchain wallets. For the DPF, we chose to implement the optimized protocol from [BGI16, Figure 4]. The DSPF is optimized using multi-threading.

**Setup:**
We implemented the simplified version of the protocol where a trusted dealer distributes the PCG seeds, and the servers perform local seed expansion before interacting for the distributed computation of the signing phase. This model is meaningful in practical applications, such as a client generating its own ECDSA secret key and distributing it to a number of servers. In this case, it is reasonable to ask the client to also generate the (short) PCG seeds used in the protocol. This setting is relevant, for example, in applications to threshold wallets [AF21].

**Instantiating Module-LPN:**
For Module-LPN, we use a cyclotomic ring as defined in [BCG+20], where the prime \( q \) is the order of the elliptic curve. Note that \( q \) is not well-suited for radix 2 FFT because the maximum power of two dividing \( q - 1 \) is \( 2^6 \). Our FFT, implementing the Cooley-Tukey algorithm, is optimized for the factors of \( q - 1 \). Therefore, the parameter \( N \), which determines the number of offline signatures, is not a power of 2 and is chosen from a set of optimized values. We considered different configurations of \( t \) and \( c \) that achieve the 128-bit security level and finally picked \( (c, t) = (4, 16) \), which performed better than \( (c, t) = (2, 76) \) and \( (c, t) = (8, 5) \). These values are taken from [BCG+20] for dimension \( N = 2^{20} \); however, as noted in the analysis, the hardness of ring-LPN with cyclotomic polynomials essentially depends only on \( (c, t) \) and not \( N \), due to a dimension-reduction attack.

**Measurements:**
We measured the performance of our protocol by looking at two measures: (i) offline time per signature (amortized); and (ii) online time to generate a single signature. Our measurements were done on a machine with an Intel i7 2.6GHz 6-core CPU and 16GB memory. The results are shown in the table below:

| Parties | Offline Time (ms) | Online Time (ms) |
|---------|-------------------|------------------|
| 2       | 3.5               | 2.5              |
| 3       | 4                 | 2                |

These results demonstrate the practicality of our protocol in real-world applications.