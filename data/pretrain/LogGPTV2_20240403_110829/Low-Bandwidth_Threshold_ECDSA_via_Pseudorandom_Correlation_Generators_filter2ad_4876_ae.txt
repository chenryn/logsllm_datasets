j
ar·ur
i
(cid:88)
r,s∈[c]
(ar·as)·(ur
i ·vs
j ).
s∈[c]
i and vs
The polynomials ur
j are both t-sparse of degree at
most N − 1, so their product over Fq[X] consists in a t2-
sparse polynomial of degree at most 2N −2. We can therefore
compress a secret-sharing of such product between Pi and
Pj using t2 DPF keys. The linearity of the reduction modulo
F (X) allows then projecting such secret-sharing over R.
The generation of the terms (zi)i∈[n] in the PCG follows
exactly the blueprint sketched above, using outer products ⊗
and outer sums (cid:1) to compress the notation. In total, we need
c2 · t2 · n(n − 1) DPF keys.
Theorem 2:
If the Rc-LPNt problem is hard and DSPF is
a secure distributed sum of point functions, PCGECDSA is a
correct and secure PCG for ring ECDSA tuples over R in the
random oracle model. Moreover, if we instantiate DSPF with
the 2-party DPF of [BGI16], the size of the seeds is
2 log q + 2c · t · (log q + log N )+
+4c · t · (n − 1) · (λ · log N + log q)+
+2c2 · t2 · (n − 1) · (λ · log 2N + log q).
The complete proof of Theorem 2 can be found in Ap-
pendix B.
B. The Preprocessing Protocol
We start by assuming the existence of a random oracle
O and a generic MPC functionality FMPC, which is for-
malised in Figure 9. Such resource can be implemented in
several ways, for instance, using Tiny-OT [NNOB12] (for
bit operations) SPDZ [BDOZ11], [DPSZ12] (for ﬁeld op-
erations) and the induced multiparty computation protocol
over elliptic curves [DOK+20]. A protocol
implementing
2-DPF with O(λ·log N ) communication was instead presented
in [BCG+20]. Sometimes, we use FMPC to perform additions
between Module-LPN special positions, although integer op-
erations are not supported by the functionality. In such case,
we assume that the special positions are stored bit by bit, and
therefore, we are able to compute sums using operations over
F2. In order to make our presentation clearer, we will use the
symbols [[·]] and [[·]]2 to denote elements stored by FMPC over
Fq and F2 respectively.
We are now ready to describe the preprocessing proto-
col ΠR
Prep. A formal description is available in Figure 6.
The construction closely follows the blueprint outlined by
PCGECDSA, performing however the operations in a distributed
manner and merging the seed generation and evaluation phases
indissolubly5. In order to ease the notation, we will denote by
2-DSPF the multiparty procedure implementing the distributed
sum of point functions, although it is not featured in FMPC.
The operation will take as input the dimension of the resulting
vector N, the t special positions, the corresponding t non-zero
elements and the indexes i and j of the two parties among
which the output is secret-shared. Observe that the output
is not a series of DSPF keys but their full evaluation. The
instruction has to be regarded as a shorthand for t executions of
2-DPF among the same parties Pi and Pj, outputting the sum
of the resulting t secret-shared unit vectors and allowing the
corresponding inﬂuence and leakage. In ΠR
Prep, the latter will
be absorbed by the hardness of the Module-LPN assumption
and therefore, it will not constitute a problem for security.
We now proceed by outlining the operations of ΠR
During the initialisation every party Pi samples the key
material ski and αi, inputting their values in FMPC. Using
the latter, the parties compute and output the ECDSA public
Prep.
key PK =(cid:80)
i∈[n] ski · G.
i (X) and vr
In order to generate a ring ECDSA tuple, each party Pi
starts by sampling, for every r ∈ [c], the t special positions and
non-zero elements describing ur
i (X). The sampled
values are input in the FMPC functionality. Later on, using
2-DSPF as in PCGECDSA, each party Pi computes (cid:101)vi, (cid:101)wi
and, for every j (cid:54)= i, (cid:102)Mi,j and (cid:102)Kj,i. Finally, after sampling
a using the random oracle O, each party can terminate the
evaluation of the PCG seeds obtaining their share of the ring
ECDSA tuple.
Theorem 3: Let F (X) be a degree-N polynomial over
the prime ﬁeld Fq and let t, c ∈ N. Deﬁne the ring R :=
Fq[X]/(cid:0)F (X)(cid:1). If the Rc-LPNt problem with static leakage
then the protocol ΠR
Prep in
is hard,
the FMPC-hybrid model with random oracle. Moreover,
if
all the parties are honest, the protocol aborts with negligible
probability.
Prep UC-implements F R
The security proof of the preprocessing protocol ΠR
Prep
strictly resembles the proof of Theorem 2. The only major
difference is the leakage about the special positions allowed
by the DPSF procedure in FMPC. In any case, this fact will
not constitute a security issue as the leakage will be absorbed
the the hardness of Module-LPN.
The complete proof of Theorem 3 can be found in Ap-
pendix C.
output length N,
1) Efﬁciency: Our protocol is particularly efﬁcient from a
communication point of view. The cost of the triple generation
procedure per party is indeed
• 2(n − 1) · c · t times the total complexity of 2-DPF with
• (n− 1)· c2 · t2 times the total complexity of 2-DPF with
• 2c·t·(cid:0)log q+log N(cid:1) bits of communication for the inputs,
output length 2N,
• 4n(n− 1)· c· t· log q bits for the multiplications in step 3,
• 2n(n − 1) · c2 · t2 · log q bits for the outer product,
• 2n(n − 1) · c2 · t2 · log N bits for the outer sum,
• O(λ · n + log q) complexity for the MAC checks6.
Considered the complexity analysis of 2-DPF [BCG+20], we
conclude that the communication complexity of the procedure
is dominated by 13n2·c2·t2·(log N +log q)+4n·c2·t2·log N·λ.
5The reason why this is unavoidable is that the DPF protocol of [BCG+20]
does not permit to perform the DPF key generation and evaluation separately.
6It is fundamental to run a check on the inputs of 2-DPF before executing
the procedures. Clearly, the MAC checks can be batched.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
112564
The Protocol ΠR
and consider Module-LPN parameters t, c ∈ N.
a) INITIALISATION: Each party Pi samples αi, ski
Let N be a power of 2. Take a degree N polynomial F (X) over the prime ﬁeld Fq. Deﬁne the ring R := Fq[X]/(cid:0)F (X)(cid:1)
FMPC, the parties compute and open PK ←(cid:80)n
i (X) ←(cid:88)
$← Fq and inputs the values in FMPC to obtain [[αi]] and [[ski]]. Using
1) For all i ∈ [n] and r ∈ [c], Pi samples βr
i=1[[ski]]G. Then, every party Pi outputs (αi, PK).
i (X) ←(cid:88)
$← [N ]t. Then, it computes the
$← Ft
i [l] · X ωr
βr
b) ECDSA TUPLE:
$← [N ]t, γr
i [l] · X ηr
γr
polynomials
q and ηr
i
$← Ft
q, ωr
i
i [l],
ur
vr
Prep
i [l]
i
i
l∈[t]
l∈[t]
2) For every i ∈ [n] and r ∈ [c], the parties compute the following operations using FMPC.
i ]] ← Input(Pi, γr
i ),
i ]]2 ← Input(Pi, ηr
i ).
i ]] ← Input(Pi, βr
i ),
i ]]2 ← Input(Pi, ωr
i ),
[[βr
[[ωr
[[γr
[[ηr
3) For every i, j ∈ [n] with i (cid:54)= j and r ∈ [c], the parties compute, using FMPC,
[[νr
[[µr
i,j]] ← [[ski]] · [[γr
j ]].
j,i) ← 2-DSPF(N, [[ωr
j ]]2 and non-zero elements [[µr
4) For every i, j ∈ [n] with i (cid:54)= j and r ∈ [c], the parties call FMPC to compute
and obtain a 2-party secret-sharing among Pi and Pj of the N-dimensional t-point vector with special positions
j,i denote the
[[ωr
j,i(X).
i,j]] ← [[αi]] · [[βr
j ]],
((cid:102)Kr
j,i, (cid:102)M r
i,j]]. If FMPC outputs Zero, the protocol aborts. Let (cid:102)Kr
shares obtained by Pi and Pj respectively. We regard them as degree-(N − 1) polynomials (cid:101)K r
((cid:101)vr,0
i,j ,(cid:101)vr,1
i,j]]. If FMPC outputs Zero, the protocol aborts. Let (cid:101)vr,0
shares obtained by Pi and Pj respectively. We regard them as degree-(N − 1) polynomials(cid:101)vr,0
and obtain a 2-party secret-sharing among Pi and Pj of the N-dimensional t-point vector with special positions
i,j denote the
[[ηr
i,j (X).
i,j and (cid:101)vr,1
i,j (X) and(cid:101)vr,1
j,i and (cid:102)M r
j,i(X) and (cid:102)M r
5) For every i, j ∈ [n] with i (cid:54)= j and r ∈ [c], the parties call FMPC to compute
i,j ) ← 2-DSPF(N, [[ηr
j ]]2 and non-zero elements [[νr
j ]]2, [[µr
j ]]2, [[νr
i,j]], i, j)
i,j]], i, j)
6) For every i (cid:54)= j and r, s ∈ [c], the parties compute
i ]] ⊗ [[γs
j ]],
i,j ]] ← [[βr
[[ρr,s
[[ζr,s
i,j ]] ← [[ωr
i ]]2 (cid:1) [[ηs
j ]]2.
7) For every i, j ∈ [n] with i (cid:54)= j and r, s ∈ [c], the parties call FMPC to compute
i,j ]]2, [[ρr,s
) ← 2-DSPF(2N, [[ζr,s
, wr,s,1
(wr,s,0
i,j
i,j
i,j ]], i, j)
and obtain a 2-party secret-sharing among Pi and Pj of the 2N-dimensional t2-point vector with special positions
[[ζr,s
denote the shares obtained by Pi and Pj respectively.
We regard them as degree-(2N − 1) polynomials wr,s,0
i,j ]]2 and non-zero elements [[ρr,s
i,j
(X) and wr,s,1
i,j ]]. Let wr,s,0
and wr,s,1
(X).
i,j
8) For every r ∈ [c], each party Pi computes
i,j
(cid:101)vr
i (X) ← ski · vr
i (X) +
9) For every r, s ∈ [c], each party Pi computes over R
i (X) · vs
(X) ← ur
wrc+s
i
(cid:17)
j,i (X)
.
i,j
(cid:16)(cid:101)vr,0
(cid:88)
i,j (X) +(cid:101)vr,1
(cid:16)
(cid:88)
j(cid:54)=i
i (X) +
wr,s,0
i,j
(X) + wr,s,1
j,i
j(cid:54)=i
(cid:17)
(X)
.
10) The parties call O to obtain ai
11) Each party Pi outputs
$← R for every i ∈ [c − 1]. Let a ← (a0, a1, . . . , ac−2, 1).
xi ← (cid:104)a, ui(cid:105),
Mi,j ← (cid:104)a, (cid:102)Mi,j(cid:105),
yi ← (cid:104)a, vi(cid:105),
Kj,i ← −(cid:104)a,(cid:102)Kj,i(cid:105)
zi ← (cid:104)a ⊗ a, wi(cid:105),
di ← (cid:104)a,(cid:101)vi(cid:105).
Fig. 6. The preprocessing protocol
122565
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
We recall that every execution of Tuple permits to produce N
fresh ECDSA tuples.
Observe that the implementation of FMPC requires some
additional preprocessing material,
the generation of which
does not affect the overall asymptotic complexity (even if it
needs to be produced by some other preprocessing protocol).
Speciﬁcally, we need
over Fq (step 3 and outer product),
• 2n · c · t input masks over Fq (step 2),
• 2n · c · t · log(N ) input masks over F2 (step 2),
• 2n(n − 1) · c · t + n(n − 1) · c2 · t2 multiplication triples
• n(n−1)·c2·t2·log(N ) AND triples over F2 (outer sum).
V. IMPLEMENTATION AND EXPERIMENTAL RESULTS
We implemented our protocol and run experiments to test
its practicality. 7
Our code is implemented for the Secp256k1 elliptic curve
used in Bitcoin. This is done to demonstrate the applicability
of our threshold ECDSA to blockchain wallets. For the DPF,
we choose to implement the optimised protocol from [BGI16,
Figure 4]. The DSPF is optimised using multi-threading.
a) Setup: We chose to implement the simpliﬁed version
of the protocol in the setting where a trusted dealer distributes
the PCG seeds, and then the servers perform the local seed
expansion before interacting for the distributed computation
of the signing phase. This model is meaningful in practical
applications in which, for instance, a client generates its own
ECDSA secret key and then distributes it to a number of
servers. In this case it is meaningful to ask the client to
(also) generate the (short) PCG seeds that will be used in
the protocol. This is a setting which makes sense e.g. in
applications to threshold wallets [AF21].
b) Instantiating Module-LPN: For Module-LPN, we use
a cyclotomic ring as deﬁned in [BCG+20] where the prime
q is the order of the elliptic curve. Note that q is not well
suited for radix 2 FFT, because the maximum power of two
dividing q−1 is 26. Our FFT, implementing the Cooley-Tuckey
algorithm, is optimised for the factors of q − 1. This is why
the parameter N, which eventually accounts for the number of
ofﬂine signatures, is not a power of 2 and is taken from a given
set of optimised values. We considered different conﬁgurations
of t, c that achieve the 128-bit security level, and ﬁnally picked
the one for which we got the best performances. In particular,
we chose (c, t) = (4, 16), which we found performed better
than (c, t) = (2, 76) and (c, t) = (8, 5). These values are taken
from [BCG+20] for dimension N = 220; however, as noted
by the analysis in that paper, the hardness of ring-LPN with
cyclotomic polynomials essentially only depends on (c, t) and
not N, due to a dimension-reduction attack.
c) Measurements: We measured the performance of our
protocol by looking at
two measures: (i) ofﬂine time per
signature (amortised); and (ii) online time to generate a
single signature. Our measurements were done on a machine
with Intel i7 2.6GHz 6 core CPU, and 16GB memory. For
7https://github.com/ZenGo-X/silent-ecdsa
two parties
three parties
)
B
M
(
e
z
i
s
d
e
e
S
4
3.5
3
2.5
2