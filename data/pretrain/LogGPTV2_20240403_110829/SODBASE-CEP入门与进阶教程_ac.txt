12.
13.int functionid=_rand.nextInt(10000); 
14.    String a = "function-"+functionid; 
15.    String b = "start"; 
16.    _collector.emit(new Values(a,b)); 
17.    Utils.sleep(500); 
18.if(functionid%2==0) 
19.    {18.if(functionid%2==0) 
19.    { 
20.        b = "end"; 
21.        _collector.emit(new Values(a,b)); 
22.    } 
23.  } 
24.
25.  @Override 
26.publicvoid ack(Object id) { 
27.  } 
28.
29.  @Override 
30.publicvoid fail(Object id) { 
31.  } 
32.
33.  @Override 
34.publicvoid declareOutputFields(OutputFieldsDeclarer declarer) { 
35.    declarer.declare(new Fields("callerid","eventtype")); 
36.  }36.  } 
37.
38.} 
PrintBolt 作用是屏幕打印输出
[java] view plaincopy 
1.publicclass PrintBolt extends BaseRichBolt { 
2.    OutputCollector _collector; 
3.publicvoid prepare(Map conf, TopologyContext context, OutputCol
lector collector) { 
4.        _collector = collector; 
5.    } 
6.publicvoid execute(Tuple tuple) { 
7.        Fields fields = tuple.getFields(); 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程SODBASECEP 入门与进阶教程
9.            System.out.print(field+": "+tuple.getValueByField(field)
); 
10.        System.out.println(); 
11.        _collector.ack(tuple); 
12.    } 
13.publicvoid declareOutputFields(OutputFieldsDeclarer declarer) {
14.    } 
15.  } 
（6）将 Topology 打包成 jar,在 storm 中测试运行。
本文示例的功能是监控系统中监测服务调用或系统调用的响应时间，是否超时。
Storm 为什么要集成 SQL 呢？这个问题答案很简单：为了做分析。毕竟 Storm
最擅长的是短文本计数，对数据的操作和分析还是比较麻烦的。上篇写了类最擅长的是短文本计数，对数据的操作和分析还是比较麻烦的。上篇写了类
SQL 语言 EPL 与 Storm 集成的方法，示例是日志分析。可能有些复杂，这次
写个常用的简单的示例，滑动窗口的应用。
本示例的功能是每十秒统计一次数据，比如求平均值或计数。
1.示例操作步骤
1.1 制作 EPL 模型
下载 ，在 SODBASE Studio 绘制 EPL 模型，将模型导出
为 XML 文件在 Storm 中使用。使用 Storm 输出适配器,级联输入适配器。timer1 为
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
10 秒定时触发器，timer2 为 timer1 的延迟事件，与 timer1 形成一个半开半闭的 10
秒时间区间。
具体步骤见。下载解压，第 1 个为建模过程，第 2 个为导出为 XML。
XML 还可以再手工补充修改。XML 还可以再手工补充修改。
生成的 XML 已经放到了下一节的 Eclipse 工程中，读者如果时间有限，也可以直接
进入下一步。
1.2 编写 topology 代码
下载示例 Eclipse 工程，解压后导入到 Eclipse 中。不用 maven,依赖的包都在 lib 文件夹下，加到 build path 即可。
打开
com.sodbase.integration.storm.windowexample.WindowStatisticExampleTopolog y.java 
Run As->Java Application，就可以在 Eclipse 中看到输出效果
打包后的 jar 包可以部署到 storm 服务器上。
注：使用 jStorm 的读者，配置方法和 Storm 一致。在 Eclipse 工程的 lib/storm 中使
用 jstorm 依赖的 jar 包即可。用 jstorm 依赖的 jar 包即可。
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
2. 工作原理
2.1 SODSQL 语句
SODSQL 的写法请参考 
，其中的窗口查询和定时统计小节。下面语句中我们在 10 秒的滑动窗口上查询
数量和平均价格。
[sql] view plaincopy 
1.SELECT average(data.price) AS avg, count(data.price) AS count 
2.FROM se:timer1;data:userinput;ee:timer2 
3.PATTERN se;data^+;ee//se 开始事件，data^+事件累积，ee 结束事件
4.WHERE ee._start_time_-se._start_time_=10001  WITHIN 10001 //10s 的半开半闭窗口
2.2 Topology 代码
有了 EPL XML，配置 4 个参数，就可以在 Topology 里面用 EPL 类 SQL 语句了
[java] view plaincopy 
1.package com.sodbase.integration.storm.windowexample; 
2.import backtype.storm.Config; 
3.import backtype.storm.LocalCluster; 
4.import backtype.storm.StormSubmitter; 
5.import backtype.storm.topology.TopologyBuilder; 
6.import backtype.storm.tuple.Fields; 
7.import backtype.storm.utils.Utils;7.import backtype.storm.utils.Utils; 
8.import com.sodbase.integration.storm.PrintBolt; 
9.import com.sodbase.outputadaptor.storm.EPLBolt; 
10.publicclass WindowStatisticExampleTopology { 
11.publicstaticvoid main(String[] args) throws Exception { 
12.    TopologyBuilder builder = new TopologyBuilder(); 
13.    /** 
14.     * EPLBolt 相关配置
15.     */ 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程SODBASECEP 入门与进阶教程
17.    String streamname="userinput"; 
18.    //（2）输出的字段，与 EPL 输出对应
19.    Fields outputFields = new Fields("avg","count","products"); 
20.    //（3）EPL 引擎 cep home 
21.    String cep_home="cep_home"; 
22.    //（4）EPL 模型文件
23.    String[] cepmodelfiles=new String[]{ 
24.            "cep_home/files/windowquery.xml", 
25.            "cep_home/files/windowtimer.xml", 
26.            };26.            }; 
27.
28.    builder.setSpout("event", new RandomBuyEventSpout(), 1); 
29.    builder.setBolt("EPL", new EPLBolt(streamname,outputFields,cep_h
ome,cepmodelfiles), 1).shuffleGrouping("event"); 
30.    builder.setBolt("print1", new PrintBolt(), 1).shuffleGrouping("E
PL"); 
31.
32.    Config conf = new Config(); 
33.    conf.setDebug(false); 
34.
35.if (args != null && args.length > 0) {36.      conf.setNumWorkers(3); 
37.
38.      StormSubmitter.submitTopology(args[0], conf, builder.createTop
ology()); 
39.    } 
40.else { 
41.
42.      LocalCluster cluster = new LocalCluster(); 
43.      cluster.submitTopology("test", conf, builder.createTopology())
; 
44.      Utils.sleep(1000000); 
45.      cluster.killTopology("test"); 
46.      cluster.shutdown(); 
47.    } 
|  |  |
|---|---|47.    } 
|  |  |
|---|---|
| 49. |}  |
（本文中类 SQL 语句建模、单元测试建议使用 SODBASE 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
Studio，参考示例见。
SODBASE CEP 中，类 SQL 语言 EPL（事件处理语言）也叫做 SODSQL。其基本
写法为
[sql] view plaincopy 
1.CREATE QUERY 查询名称
2.SELECT查询字段
3.FROM流
4.PATTERN 复杂事件模式
5.WHERE条件
6.WITHIN 时间窗口大小
比传统 SQL 就多了两个东西 PATTERN 和 WITHIN
PATTERN：复杂事件表达式PATTERN：复杂事件表达式
CEP 理论通常规定事件有两个时间戳，即开始时间和结束时间。SODBASE CEP 对应数据的_start_time_和_end_time_属性。CEP 理论对事件也作了区分：基本事 件和复杂事件。基本事件类似于关系表中的一条记录，带一个时间戳（SODBASE CEP 中表示为开始时间、结束时间相等）。所谓复杂事件是指由基本事件通过各种
时间关系、逻辑关系所组成的事件。
WITHIN：是指输出的复杂事件 e 的结束时间减去 e 的开始时间需1000 
6.WITHIN 3000 
1.3 非模式
Negation（!A）:表示事件 A 不发生。非模式必须在两个基本事件之间使用。如“A;!B;C”表示 A、C 顺序发生，但其间不能有 B 发生。用在超时监测，事务审计等场景中比