p argv
的地址是固定的，不能执⾏⾃增运算（ ），所以必须通过⼀个中间变量 ，完成遍历操
argv argv++ p
作。
退出状态 #
C 语⾔规定，如果 函数没有 语句，那么结束运⾏的时候，默认会添加⼀句 ，即
main() return return 0
返回整数 。这就是为什么 语句通常约定返回⼀个整数值，并且返回整数 表示程序运⾏成功。
0 main() 0
如果返回⾮零值，就表示程序运⾏出了问题。
Bash 的环境变量 可以⽤来读取上⼀个命令的返回值，从⽽知道是否运⾏成功。
$?
$ ./foo hello world
$ echo $?
0
上⾯示例中， ⽤来打印环境变量 的值，该值为 ，就表示上⼀条命令运⾏成功，否则就是运
echo $? $? 0
⾏失败。
注意，只有 会默认添加 ，其他函数都没有这个机制。
main() return 0
环境变量 #
C 语⾔提供了 函数（原型在 ）⽤来读取命令⾏环境变量。
getenv() stdlib.h
#include 
#include 
int main(void) {
char* val = getenv("HOME");
if (val == NULL) {
printf("Cannot find the HOME environment variable\n");
return 1;
}
printf("Value: %s\n", val);
return 0;
}
上⾯示例中， ⽤来获取命令⾏的环境变量 ，如果这个变量为空（ ），则程序
getenv("HOME") $HOME NULL
报错返回。
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
多字节字符 语⾔教程 ⽹道
- C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
本章介绍 C 语⾔如何处理⾮英语字符。
Unicode 简介 #
C 语⾔诞⽣时，只考虑了英语字符，使⽤ 7 位的 ASCII 码表示所有字符。ASCII 码的范围是 0 到 127，也
就是 100 多个字符，所以 类型只占⽤⼀个字节，
char
但是，如果处理⾮英语字符，⼀个字节就不够了，单单是中⽂，就⾄少有⼏万个字符，字符集就势必使⽤
多个字节表示。
最初，不同国家有⾃⼰的字符编码⽅式，这样不便于多种字符的混⽤。因此，后来就逐渐统⼀到 Unicode
编码，将所有字符放⼊⼀个字符集。
Unicode 为每个字符提供⼀个号码，称为码点（code point），其中 0 到 127 的部分，跟 ASCII 码是重合
的。通常使⽤ “U + ⼗六进制码点” 表示⼀个字符，⽐如 表示字⺟ 。
U+0041 A
Unicode 编码⽬前⼀共包含了 100 多万个字符，码点范围是 U+0000 到 U+10FFFF。完整表达整个
Unicode 字符集，⾄少需要三个字节。但是，并不是所有⽂档都需要那么多字符，⽐如对于 ASCII 码就够
⽤的英语⽂档，如果每个字符使⽤三个字节表示，就会⽐单字节表示的⽂件体积⼤出三倍。
为了适应不同的使⽤需求，Unicode 标准委员会提供了三种不同的表示⽅法，表示 Unicode 码点。
UTF-8：使⽤ 1 个到 4 个字节，表示⼀个码点。不同的字符占⽤的字节数不⼀样。
UTF-16：对于 U+0000 到 U+FFFF 的字符（称为基本平⾯），使⽤ 2 个字节表示⼀个码点。其他
字符使⽤ 4 个字节。
UTF-32：统⼀使⽤ 4 个字节，表示⼀个码点。
其中，UTF-8 的使⽤最为⼴泛，因为对于 ASCII 字符（U+0000 到 U+007F），它只使⽤⼀个字节表示，
这就跟 ASCII 的编码⽅式完全⼀样。
C 语⾔提供了两个宏，表示当前系统⽀持的编码字节⻓度。这两个宏都定义在头⽂件 。
limits.h
：任意⽀持地区的最⼤字节⻓度，定义在 。
MB_LEN_MAX limits.h
：当前语⾔的最⼤字节⻓度，总是⼩于或等于 ，定义在 。
MB_CUR_MAX MB_LEN_MAX stdlib.h
字符的表示⽅法 #
字符表示法的本质，是将每个字符映射为⼀个整数，然后从编码表获得该整数对应的字符。
C 语⾔提供了不同的写法，⽤来表示字符的整数号码。
：以⼋进制值表示⼀个字符，斜杠后⾯需要三个数字。
\123
：以⼗六进制表示⼀个字符， 后⾯是⼗六进制整数。
\x4D \x
：以 Unicode 码点表示⼀个字符（不适⽤于 ASCII 字符），码点以⼗六进制表示， 后
\u2620 \u
⾯需要 4 个字符。
：以 Unicode 码点表示⼀个字符（不适⽤于 ASCII 字符），码点以⼗六进制表示，
\U0001243F
后⾯需要 8 个字符。
\U
printf("ABC\n");
printf("\101\102\103\n");
printf("\x41\x42\x43\n");
上⾯三⾏都会输出 “ABC”。
printf("\u2022 Bullet 1\n");
printf("\U00002022 Bullet 1\n");
上⾯两⾏都会输出 “• Bullet 1”。
多字节字符的表示 #
C 语⾔预设只有基本字符，才能使⽤字⾯量表示，其它字符都应该使⽤码点表示，并且当前系统还必须⽀
持该码点的编码⽅法。
所谓基本字符，指的是所有可打印的 ASCII 字符，但是有三个字符除外： 、 、 。
@ $ `
因此，遇到⾮英语字符，应该将其写成 Unicode 码点形式。
char* s = "\u6625\u5929";
printf("%s\n", s);
上⾯代码会输出中⽂ “春天”。
如果当前系统是 UTF-8 编码，可以直接⽤字⾯量表示多字节字符。
char* s = "春天";
printf("%s\n", s);
注意， 和 的写法，不能⽤来表示 ASCII 码字符（码点⼩于 的字符），只有三个
\u + 码点 \U + 码点 0xA0
字符除外： （ ）， （ ）和 （ ）。
0x24 $ 0x40 @ 0x60 `
char* s = "\u0024\u0040\u0060";
printf("%s\n", s);
上⾯代码会输出三个 Unicode 字符 “@$`”，但是其它 ASCII 字符都不能⽤这种表示法表示。
为了保证程序执⾏时，字符能够正确解读，最好将程序环境切换到本地化环境。
set_locale(LC_ALL, "");
上⾯代码中，使⽤ 切换到执⾏环境切换到系统的本地化语⾔。 的原型定义在头
set_locale() set_locale()
⽂件 ，详⻅标准库部分的《locale.h》章节。
locale.h
像下⾯这样，指定编码语⾔也可以。
setlocale(LC_ALL, "zh_CN.UTF-8");
上⾯代码将程序执⾏环境，切换到中⽂环境的 UTF-8 编码。
C 语⾔允许使⽤ 前缀，对多字节字符串指定编码⽅式为 UTF-8。
u8
char* s = u8"春天";
printf("%s\n", s);
⼀旦字符串⾥⾯包含多字节字符，就意味着字符串的字节数与字符数不再⼀⼀对应了。⽐如，字符串的⻓
度为 10 字节，就不再是包含 10 个字符，⽽可能只包含 7 个字符、5 个字符等等。
set_locale(LC_ALL, "");
char* s = "春天";
printf("%d\n", strlen(s));
上⾯示例中，字符串 只包含两个字符，但是 返回的结果却是 6，表示这两个字符⼀共占据了
s strlen()
6 个字节。
C 语⾔的字符串函数只针对单字节字符有效，对于多字节字符都会失效，⽐如 、 、
strtok() strchr()
、 、 、 等不会得到正确结果。
strspn() toupper() tolower() isalpha()
宽字符 #
上⼀⼩节的多字节字符串，每个字符的字节宽度是可变的。这种编码⽅式虽然使⽤起来⽅便，但是很不利
于字符串处理，因此必须逐⼀检查每个字符占⽤的字节数。所以除了这种⽅式，C 语⾔还提供了确定宽度
的多字节字符存储⽅式，称为宽字符（wide character）。
所谓 “宽字符”，就是每个字符占⽤的字节数是固定的，要么是 2 个字节，要么是 4 个字节。这样的话，
就很容易快速处理。
宽字符有⼀个单独的数据类型 wchar_t，每个宽字符都是这个类型。它属于整数类型的别名，可能是有符
号的，也可能是⽆符号的，由当前实现决定。该类型的⻓度为 16 位（2 个字节）或 32 位（4 个字节），
⾜以容纳当前系统的所有字符。它定义在头⽂件 ⾥⾯。
wchar.h
宽字符的字⾯量必须加上前缀 “L”，否则 C 语⾔会把字⾯量当作窄字符类型处理。
set_locale(LC_ALL, "");
wchar_t c = L'⽜'；
printf("%lc\n", c);
wchar_t* s = L"春天";
printf("%ls\n", s);
上⾯示例中，前缀 “L” 在单引号前⾯，表示宽字符，对应 的占位符为 ；在双引号前⾯，表
printf() %lc
示宽字符串，对应 的占位符为 。
printf() %ls
宽字符串的结尾也有⼀个空字符，不过是宽空字符，占⽤多个字节。
处理宽字符，需要使⽤宽字符专⽤的函数，绝⼤部分都定义在头⽂件 。
wchar.h
多字节字符处理函数 #
mblen() #
函数返回⼀个多字节字符占⽤的字符数。它的原型定义在头⽂件 。
mblen() stdlib.h
int mblen(const char* mbstr, size_t n);
它接受两个参数，第⼀个参数是多字节字符串指针，⼀般会检查该字符串的第⼀个字符；第⼆个参数是需
要检查的字节数，这个数字不能⼤于当前系统单个字符占⽤的最⼤字节，⼀般使⽤ 。
MB_CUR_MAX
它的返回值是该字符占⽤的字节数。如果当前字符是空的宽字符，则返回 ；如果当前字符不是有效的多
0
字节字符，则返回 。
-1
setlocale(LC_ALL, "");
char* mbs1 = "春天";
printf("%d\n", mblen(mbs1, MB_CUR_MAX));
char* mbs2 = "abc";
printf("%d\n", mblen(mbs2, MB_CUR_MAX));
上⾯示例中，字符串 “春天” 的第⼀个字符 “春”，占⽤ 3 个字节；字符串“abc” 的第⼀个字符“a”，占⽤ 1
个字节。
wctomb() #
函数（wide character to multibyte）⽤于将宽字符转为多字节字符。它的原型定义在头⽂件
wctomb()
。
stdlib.h
int wctomb(char* s, wchar_t wc);
接受两个参数，第⼀个参数是作为⽬标的多字节字符数组，第⼆个参数是需要转换的⼀个宽字
wctomb()
符。它的返回值是多字节字符存储占⽤的字节数量，如果⽆法转换，则返回 。
-1
setlocale(LC_ALL, "");
wchar_t wc = L'⽜';
char mbStr[10] = "";
int nBytes = 0;
nBytes = wctomb(mbStr, wc);
printf("%s\n", mbStr);
printf("%d\n", nBytes);
上⾯示例中， 将宽字符 “⽜” 转为多字节字符， 的返回值表示转换后的多字节字符占⽤
wctomb() wctomb()
3 个字节。
mbtowc() #
⽤于将多字节字符转为宽字符。它的原型定义在头⽂件 。
mbtowc() stdlib.h
int mbtowc(
wchar_t* wchar,
const char* mbchar,
size_t count
);
它接受 3 个参数，第⼀个参数是作为⽬标的宽字符指针，第⼆个参数是待转换的多字节字符指针，第三个
参数是多字节字符的字节数。
它的返回值是多字节字符的字节数，如果转换失败，则返回 。
-1
setlocale(LC_ALL, "");
char* mbchar = "⽜";
wchar_t wc;
wchar_t* pwc = &wc;
int nBytes = 0;
nBytes = mbtowc(pwc, mbchar, 3);
printf("%d\n", nBytes);
printf("%lc\n", *pwc);
上⾯示例中， 将多字节字符 “⽜” 转为宽字符 ，返回值是 占⽤的字节数（占⽤ 3 个
mbtowc() wc mbchar
字节）。
wcstombs() #
⽤来将宽字符串转换为多字节字符串。它的原型定义在头⽂件 。
wcstombs() stdlib.h
size_t wcstombs(
char* mbstr,
const wchar_t* wcstr,
size_t count
);
它接受三个参数，第⼀个参数 是⽬标的多字节字符串指针，第⼆个参数 是待转换的宽字符串
mbstr wcstr
指针，第三个参数 是⽤来存储多字节字符串的最⼤字节数。
count
如果转换成功，它的返回值是成功转换后的多字节字符串的字节数，不包括尾部的字符串终⽌符；如果转
换失败，则返回 。
-1
下⾯是⼀个例⼦。
setlocale(LC_ALL, "");
char mbs[20];
wchar_t* wcs = L"春天";
int nBytes = 0;
nBytes = wcstombs(mbs, wcs, 20);
printf("%s\n", mbs);
printf("%d\n", nBytes);
上⾯示例中， 将宽字符串 转为多字节字符串 ，返回值 表示写⼊ 的字符串占
wcstombs() wcs mbs 6 mbs
⽤ 6 个字节，不包括尾部的字符串终⽌符。
如果 的第⼀个参数是 NULL，则返回转换成功所需要的⽬标字符串的字节数。
wcstombs()
mbstowcs() #
⽤来将多字节字符串转换为宽字符串。它的原型定义在头⽂件 。
mbstowcs() stdlib.h
size_t mbstowcs(
wchar_t* wcstr,
const char* mbstr,