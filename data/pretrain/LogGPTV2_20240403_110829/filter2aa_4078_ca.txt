### 第 7 章 PKI 和密码学应用

#### 7.2.4 MD5
1991 年，Rivest 发布了其消息摘要算法的下一个版本，即 MD5。该算法处理 512 位的消息分组，并使用四轮明显不同的计算生成与 MD2 和 MD4 算法相同长度的消息摘要（128 位）。MD5 与 MD4 具有相同的填充要求，即消息长度必须比 512 位的倍数少 64 位。MD5 实现了额外的安全特性，显著降低了消息摘要的生成速度。遗憾的是，近年来的密码分析攻击已经证明 MD5 协议会产生冲突，这表明它不是一种单向函数。特别是，Arjen Lenstra 及其他研究者在 2005 年展示了使用不同公钥创建两个具有相同 MD5 散列值的数字证书。

**表 7.2 常见散列函数及其生成散列值的长度**

| 算法名称   | 散列值长度 (位) |
|------------|-----------------|
| HAVAL      | 128, 160, 192, 224, 256 |
| HMAC       | 可变            |
| MD2        | 128             |
| MD4        | 128             |
| MD5        | 128             |
| SHA-1      | 160             |
| SHA-224    | 224             |
| SHA-256    | 256             |
| SHA-384    | 384             |
| SHA-512    | 512             |

#### 7.3 数字签名
选择足够安全的散列算法后，可以实现数字签名系统。数字签名基础设施有两个主要目标：

1. **不可否认性**：数字化签名的消息可以向接收方保证消息确实来自声明的发送者，并且提供不可否认性（排除发送者之后声称消息是伪造的情况）。
2. **完整性**：数字化签名的消息可以向接收方保证消息在传输过程中未被修改，确保消息不会受到恶意或无意识的更改。

数字签名算法基于公钥密码学和散列函数这两个重要概念。如果 Alice 想要数字化签名一条发送给 Bob 的消息，她会执行以下步骤：

1. 使用一种足够安全的散列算法（如 SHA-512）生成原始明文消息的消息摘要。
2. 使用她的私钥对消息摘要进行加密。加密后的消息摘要即为数字签名。
3. 将签名的消息摘要添加到明文消息中。
4. 将完成添加的消息传送给 Bob。

当 Bob 接收到数字化签名的消息时，他会逆向完成如下过程：

1. 使用 Alice 的公钥解密数字签名。
2. 使用相同的散列函数生成从 Alice 那里接收到的完整明文消息的消息摘要。
3. 将从 Alice 那里接收到的已解密的消息摘要与自己计算得到的消息摘要进行比较。如果两个消息摘要匹配，则 Bob 可以确认消息是由 Alice 发送的；如果不匹配，则消息可能不是 Alice 发送的，或者在传输过程中被修改了。

**注意**：
数字签名不仅用于消息，软件供应商也常使用数字签名技术对从互联网下载的编码分发（例如 applet 和软件补丁）进行身份认证。需要注意的是，数字签名过程本身并不提供隐私保护，仅确保消息的完整性和不可否认性。如果 Alice 想保证发送给 Bob 的消息的隐私性，可以在将已签名的消息摘要添加到明文消息后，用 Bob 的公钥加密整条消息。Bob 在接收到消息后，会在上述步骤之前用自己的私钥对消息进行解密。

#### 7.3.1 HMAC
HMAC 算法实现了部分数字签名功能，保证了消息在传输过程中的完整性，但不提供不可否认性。

**真实场景**：
应使用哪种密钥？
对于不太熟悉公钥密码学的人来说，针对各种应用情况选择适当的密钥可能会感到困惑。以下是一些简单的规则，有助于记住这些概念：

- 如果想要加密消息，那么就使用接收者的公钥。
- 如果想要解密发送给你的消息，那么就使用自己的私钥。
- 如果想要数字化签名发送给他人的消息，那么就使用自己的私钥。
- 如果想要验证他人发送过来的消息中的签名，那么就使用发送者的公钥。

这些规则是公钥密码学和数字签名的核心原则。只要深刻理解每一条规则，就能有一个良好的开端。

通过使用一个共享的密钥，HMAC 可以与任何标准的消息摘要生成算法（如 SHA-2）结合在一起。因此，只有知道此密钥的通信双方能够产生或验证数字签名。如果接收方解密消息摘要，但无法将其与明文消息产生的消息摘要成功比较，说明消息在传输过程中被修改了。

由于 HMAC 依赖于一个共享的密钥，所以它无法提供不可否认性功能。然而，与下面将介绍的数字签名标准相比，HMAC 以一种更有效的方式操作，更适合使用对称密码学的应用。简而言之，在不使用加密的消息摘要算法与基于公钥密码学的昂贵数字签名算法之间，HMAC 起到了折中的作用。

#### 7.3.2 数字签名标准
在美国联邦信息处理标准 (FIPS) 186-4 中，美国国家标准和技术协会指定了联邦政府可以使用的数字签名算法，该标准也被称为数字签名标准 (DSS)。该文档规定所有联邦政府批准的数字签名算法都必须使用 SHA-2 散列函数。

DSS 还指定了可用于支持数字签名基础设施的加密算法。目前存在三种经批准的标准加密算法：

- 数字签名算法 (DSA)，在 FIPS 186-4 中指定。
- RSA 算法，在 ANSI X9.31 中指定。
- 椭圆曲线数字签名算法 (ECDSA)，在 ANSI X9.62 中指定。

**提示**：
还应了解另外两种数字签名算法，至少要知道它们的名字：Schnorr 签名算法和 Nyberg-Rueppel 签名算法。

#### 7.4 公钥基础设施 (PKI)
公钥加密的主要优点是使原本互不认识的双方之间的通信变得容易。受信任的公钥基础设施 (PKI) 层次使得这一点成为可能。这种信任允许结合非对称和对称算法以及哈希和数字证书，为我们提供混合加密方式。

在接下来的内容中，你将了解公钥基础设施的基本组件，以及使全球安全通信成为可能的密码学概念。你将学习数字证书的组成、证书授权的作用、生成和销毁证书的过程。

##### 7.4.1 证书
数字证书为通信双方提供了保证，保证正在与之通信的人确实具有他们所宣称的身份。数字证书本质上是个人公钥的认可副本。当用户验证证书确实是由可信证书颁发机构 (CA) 发布时，他们就相信这个公钥是合法的。

数字证书包含特定的身份标识信息，并且其结构由国际标准 X.509 决定。遵循 X.509 标准的证书包含以下数据：

- 证书遵循的 X.509 版本。
- 序列号（来自证书建立者）。
- 签名算法标识符（指定证书授权机构对证书内容进行数字签名时使用的技术）。
- 发布者姓名（发布证书的证书授权机构的身份标识）。
- 有效期（指定证书有效的日期和时间：开始的日期、时间，以及结束的日期、时间）。
- 主体的名字（包括区分实体身份的唯一名字或 DN，相应实体拥有证书中包含的公钥）。
- 主体的公钥（证书的内容：证书拥有者用于建立安全通信的实际公钥）。

当前版本的 X.509（版本 3）支持证书扩展：定制变量，这些变量包含为支持对证书或各种应用程序进行跟踪而由证书授权机构插入到证书中的数据。

**注意**：
如果对建设自己的 X.509 证书感兴趣或只是想探究公钥基础设施的内部工作，可以从国际电信联盟 (ITU) 购买完整的官方 X.509 标准。它是通信标准的开放系统互连 (OSI) 系列的一部分，可以在 ITU 网站 www.itu.int 购买电子版。

X.509 尚未正式接受为标准，因此不同厂商的实现有所不同。然而，微软和 Mozilla 在他们的 Web 客户端和服务器之间采用 X.509 作为事实上的安全套接字层 (SSL) 通信标准。SSL 协议的细节部分将在本章后面的 "密码学应用" 中进行阐述。

##### 7.4.2 证书授权机构
证书授权机构 (CA) 将公钥基础设施绑定在一起。这些中立的组织机构为数字证书提供公证服务。为了从著名的 CA 处获得数字证书，必须亲自前往其代理机构，并出示适当的身份识别文档。以下是一些主要的 CA：

- Symantec
- Thawte
- GeoTrust
- GlobalSign
- Comodo Limited