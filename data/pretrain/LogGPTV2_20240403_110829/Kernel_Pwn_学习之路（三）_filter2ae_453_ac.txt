        // 判断是否允许对象写越界，如果不允许则重定位空闲对象指针到对象的末尾。
        if (((flags & (SLAB_TYPESAFE_BY_RCU | SLAB_POISON)) || s->ctor)) {
            /*
             * Relocate free pointer after the object if it is not
             * permitted to overwrite the first word of the object on
             * kmem_cache_free.
             *
             * This is the case if we do RCU, have a constructor or
             * destructor or are poisoning the objects.
             */
            // 设置 kmem_cache 结构的 offset（即对象指针的偏移）
            s->offset = size;
            // 调整size为包含空闲对象指针
            size += sizeof(void *);
        }
    // 若已开启 CONFIG_SLUB_DEBUG 配置
    #ifdef CONFIG_SLUB_DEBUG
        // 若已设置 SLAB_STORE_USER 标识
        if (flags & SLAB_STORE_USER)
            /*
             * Need to store information about allocs and frees after
             * the object.
             */
            // 在对象末尾加上两个track的空间大小，用于记录该对象的使用轨迹信息（分别是申请和释放的信息）
            size += 2 * sizeof(struct track);
    #endif
        kasan_cache_create(s, &size, &s->flags);
    #ifdef CONFIG_SLUB_DEBUG
        // 若已设置 SLAB_RED_ZONE
        if (flags & SLAB_RED_ZONE) {
            /*
             * Add some empty padding so that we can catch
             * overwrites from earlier objects rather than let
             * tracking information or the free pointer be
             * corrupted if a user writes before the start
             * of the object.
             */
            // 新增空白边界,主要是用于捕捉内存写越界信息
            // 目的是与其任由其越界破坏了空闲对象指针或者内存申请释放轨迹信息，倒不如捕获内存写越界信息。
            size += sizeof(void *);
            s->red_left_pad = sizeof(void *);
            s->red_left_pad = ALIGN(s->red_left_pad, s->align);
            size += s->red_left_pad;
        }
    #endif
        /*
         * SLUB stores one object immediately after another beginning from
         * offset 0. In order to align the objects we have to simply size
         * each object to conform to the alignment.
         */
        // 根据前面统计的size做对齐操作
        size = ALIGN(size, s->align);
        // 更新到kmem_cache结构中
        s->size = size;
        if (forced_order >= 0)
            order = forced_order;
        else
            // 通过 calculate_order() 计算单 slab 的页框阶数
            order = calculate_order(size, s->reserved);
        if (order allocflags = 0;
        if (order)
            s->allocflags |= __GFP_COMP;
        if (s->flags & SLAB_CACHE_DMA)
            s->allocflags |= GFP_DMA;
        if (s->flags & SLAB_RECLAIM_ACCOUNT)
            s->allocflags |= __GFP_RECLAIMABLE;
        /*
         * Determine the number of objects per slab
         */
        // 调用 oo_make 计算 kmem_cache 结构的 oo、min、max 等相关信息
        s->oo = oo_make(order, size, s->reserved);
        s->min = oo_make(get_order(size), size, s->reserved);
        if (oo_objects(s->oo) > oo_objects(s->max))
            s->max = s->oo;
        return !!oo_objects(s->oo);
    }
###  `calculate_order()`源码分析
`calculate_order()`用于计算单`slab`的页框阶数：(`calculate_order()`在`/source/mm/slub.c#L3237`处实现)
    static inline int calculate_order(int size, int reserved)
    {
        int order;
        int min_objects;
        int fraction;
        int max_objects;
        /*
         * Attempt to find best configuration for a slab. This
         * works by first attempting to generate a layout with
         * the best configuration and backing off gradually.
         *
         * First we increase the acceptable waste in a slab. Then
         * we reduce the minimum objects required in a slab.
         */
        // 判断来自系统参数的最少对象数 slub_min_objects 是否已经配置
        min_objects = slub_min_objects;
        if (!min_objects)
            // 通过处理器数 nr_cpu_ids 计算最小对象数
            min_objects = 4 * (fls(nr_cpu_ids) + 1);
        // 通过 order_objects() 计算最高阶下，slab 对象最多个数
        max_objects = order_objects(slub_max_order, size, reserved);
        // 取得最小值min_objects
        min_objects = min(min_objects, max_objects);
        // 调整 min_objects 及 fraction
        while (min_objects > 1) {
            fraction = 16;
            while (fraction >= 4) {
                // 通过 slab_order() 计算找出最佳的阶数
                // 其中fraction用来表示slab内存未使用率的指标，值越大表示允许的未使用内存越少
                // 不断调整单个slab的对象数以及降低碎片指标，由此找到一个最佳值
                order = slab_order(size, min_objects, slub_max_order, fraction, reserved);
                if (order  MAX_OBJS_PER_PAGE)
            return get_order(size * MAX_OBJS_PER_PAGE) - 1;
        // 调整阶数以期找到一个能够容纳该大小最少对象数量及其保留空间的并且内存的使用率满足条件的阶数
        for (order = max(min_order, get_order(min_objects * size + reserved));
                order node[node] = n;
        }
        return 1;
    }
###  `early_kmem_cache_node_alloc()`源码分析
`early_kmem_cache_node_alloc()`用于分配并初始化节点对象：(`early_kmem_cache_node_alloc()`在`/source/mm/slub.c#L3331`处实现)
    /*
     * No kmalloc_node yet so do it by hand. We know that this is the first
     * slab on the node for this slabcache. There are no concurrent accesses
     * possible.
     *
     * Note that this function only works on the kmem_cache_node
     * when allocating for the kmem_cache_node. This is used for bootstrapping
     * memory on a fresh node that has no slab structures yet.
     */
    static void early_kmem_cache_node_alloc(int node)
    {
        struct page *page;
        struct kmem_cache_node *n;
        BUG_ON(kmem_cache_node->size < sizeof(struct kmem_cache_node));
        // 通过new_slab()创建kmem_cache_node结构空间对象的slab
        page = new_slab(kmem_cache_node, GFP_NOWAIT, node);
        BUG_ON(!page);
        // 如果创建的slab不在对应的内存节点中，则通过printk输出调试信息