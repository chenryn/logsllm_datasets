Here, STAsymEnc, STSign, and STSend are the state monads for
encrypting and signing messages, and sending messages over the
network. Their type speciﬁcations state the trace properties of these
actions. The above program maps straightforwardly to the pseudo
code in Figure 1. The tricky part is to specify a type for the pro-
gram and to prove, using LS2, that the type speciﬁcation is correct.
Once Coq type checks the program against its type, the program
is veriﬁed to have the invariant and partial correctness properties
speciﬁed in the type.
Honesty. The HONESTY rule asserts properties of traces that con-
tain the execution of trusted programs (shown below). Predicate
honestThread i prog t states that thread i starts to run program
prog at time t. The Honesty rule states that after the thread starts,
Inductive hassymKey: threadId → symKey → time → Prop :=
...
with has: threadId → msg → time → Prop :=
...
| hasComp: ∀ i m t, mayComp i m t → has i m t
| hasRecv: ∀ i m t, recv i m @ t → has i m t
| hasHad: ∀ i m t1 t2, has i m t1 → t1  ub → ∀e: ST inv pc, honestThread i e ub →inv i ub ue.
Rely-guarantee. Rely-guarantee reasoning principles (described
by Garg et al. [25]) are needed to prove invariant properties of the
form ∀t:time, ϕ(t). To prove that at all time t, the property ϕ holds,
we need to prove (1) that ϕ holds initially and (2) that ϕ has held
before time t implies that ϕ holds at t. By induction over time, we
can conclude from (1) and (2) that ∀t : time, ϕ(t). In a distributed
system, (2) can be further reﬁned into two conditions concerning
the local guarantees of a set of threads We list the conditions below.
We deﬁne time as natural numbers because we conﬂate time with
the number of steps the system has taken so far.
(RG1) ϕ(0)
(RG2) ∀u, (∀u(cid:48), u(cid:48)<u→ ϕ(u(cid:48)))→ (∀i, ι(i)→ ψ(i, u))
(RG3) ∀u, (∀u(cid:48), u(cid:48)<u→ ϕ(u(cid:48)))→ (∀i, ι(i)→ ψ(i, u))→ ϕ(u)
We call ϕ(u) a global invariant, and ψ(i, u) a local guarantee by
thread i. Condition RG1 ensures that the invariant property holds
initially. Condition RG2 checks that local guarantees are met as-
suming the global invariant has held so far. Condition RG3 checks
that local guarantees imply the global invariant. Using the above
conditions, we can prove that ∀u, ϕ(u) by inducting over time.
Here, ι(i) selects the set of relevant threads whose local behavior
is central to the security of the protocols. ψ(i, u) is a property of
the trace that is speciﬁc to thread i. Condition RG3 is simpler than
the corresponding condition described by Garg et al. [25]: it does
not mention violations of the invariant property. We have proved in
Coq that conditions RG1–RG3 imply ∀u, ϕ(u).
3.2 Protocol Speciﬁc Constructs
Inductively deﬁned data structures. Network messages are de-
ﬁned as an inductive data type. The constructors for messages
include principals and keys; constructors for creating ciphertext,
hashes, signatures, MACs, and pseudo-random functions; and a
constructor for pairs. An important deﬁnition is a principal’s knowl-
edge, which is crucial to modeling adversary capabilities. We de-
ﬁne has i m t as an inductively deﬁned data type, which means that
thread i knows message m at time t. We show part of the deﬁni-
tion in Figure 4. A principal has a message if it has received that
message earlier, has generated it, or can compute it. For instance,
if a principal has an encryption key k and a message m, then it can
compute the encryption of m using k; if a principal has a cypher-
text and the decryption key, then it can obtain the plaintext. Us-
ing these deﬁnitions, we can prove lemmas about the properties of
cryptographic functions. For instance, we can prove the following
lemma by induction over time and the structure of has.
Lemma hasMacCnt:∀ i m t m1 k,
has i m t → contain m (macMsg k m1) →
has i (symkeyToMsg k) t
∨∃m2 tr, tr≤t ∧ recv i m2 @ tr ∧
contain m2 (macMsg k m1).
This lemma states that if a thread i has a message that contains a
MAC message, then it either has the key for computing the MAC,
or it has received a message that contains that MAC earlier. Here,
contain m1 m2 means that m2 can be computed from m1 and it
is inductively deﬁned.
Axioms. We assert several axioms that can only be proven sound
based on the semantics of actions. We list a few below. Axiom
Recv states that if one receives a message, then someone must have
sent it. Axiom sendHas states that if i sends a message m, then
i must have that message. Axiom Verify states that if sig is the
signature of m using the public key of an honest principal p, then
some thread owned by p must have signed m using p’s private key.
Axiom Recv: ∀ i m t, recv i m @ t → ∃ j t’, t’<t ∧ send j m @ t’.
Axiom sendHas: ∀ i m t, send i m @ t → has i m t.
Axiom Verify: ∀ i m p t sig, verify i sig m pk(p) t ∧ honest p →
∃ j t’, t’<t ∧ owns j p∧ sign j m pk−1(p) sig t’.
These axioms together with the deﬁnition of has specify our ad-
versaries’ capabilities.
4. THE SECRECY AND AUTHENTICITY
OF THE DRKEY PROTOCOL
Two important properties of the DRKey protocol are Secrecy:
each symmetric key KSi (resp. KDi) generated by the router Ri is
known only to S (resp. D) and Ri, and the symmetric key KD gen-
erated by the destination is known only to S and D; and Authen-
ticity: the list of keys accepted by the source (resp. destination) is
computed using the correct public key of S (resp. D) for that ses-
sion and the router’s local secret for the source (resp. destination).
4.1 Property speciﬁcations
We summarize main predicates in Figure 5. safeMsg M s K is
borrowed from earlier work on verifying secrecy properties using
PCL [41]. We deﬁne it inductively over the structure of M. For
instance, the following two rules deﬁne when s is safe in an en-
crypted message. Here pubencMsg m pk denotes the encryption
of m using public key pk. Either s is already safe in m, or pk’s
corresponding private key pk−1 belongs to the set K. For com-
pactness, deﬁnitions are shown in the style of inference rules, rather
than the Coq code.
safeMsg m s K
safeMsg (pubencMsg m pk ) s K
asymKeyPair pk pk
−1
−1 ∈ K
pk
safeMsg (pubencMsg m pk ) s K
Next we deﬁne HasOnlyPath p path keys to state that every key k
in keys, such that k is the ith key in keys, is only known to the
principal p and the ith principal r in path , if r is honest.
The secrecy and authenticity properties of the keys are deﬁned in
terms of HasOnlyPath p path keys and GenkPath keys path pk sv.
The following two theorems state that our key setup protocol has
key secrecy and authenticity for both the source and the destination.
THEOREM 1
(KEY SECRECY AND AUTHENTICITY (DST)).
For all i S D path keysD pkD t, owner i D, honest D, and
acceptedD i S D path keysD pkD@t imply all of the following
• GenkPath keysD path pkD SVD
• there exists a pkS such that session S D path pkS pkD and
HasOnlyPath D path keysD
Theorem 1 states that when the destination (D) ﬁnishes validat-
ing the keys (keysD) w.r.t.
the path (path) and the session key
(pkD), it is the case that (1) the list of keys it accepts is generated
by intermediate routers if they are honest, (2) each key is known
only to the destination and the router who generated it (if that router
is honest), and (3) the current session is identical to the session that
the destination has shared with the source.
When the source accepts a list of keys, a similar property of the
keys holds, stated below.
THEOREM 2
(KEY SECRECY AND AUTHENTICITY (SRC)).
For all i S D path keysS pkS t, owner i S, honest S, and
acceptedS i S D path keysS pkS @t imply all of the following
• GenkPath keysS (path, D) pkS SVS
• there exists a pkD such that session S D path pkS pkD and
HasOnlyPath S (path, D) keysS
4.2 Proofs of Key Secrecy and Authenticity
We explain proofs of Theorem 1. Theorem 2 can be proved sim-
ilarly. We make the following assumptions, which are encoded as
axioms in Coq. (KeyS) and (KeyD) state that if a principal is hon-
est and declares that a public-key component of a key pair is being
used as a session key, then the corresponding private key must be
known only to that principal. (SecS) and (SecD) state that the local
secrets of an honest router are known only to itself.
(KeyS) ∀S D path pkS pkD pkS −1 ,
(KeyD) ∀S D path pkS pkD pkD−1 ,
honest S ∧ session S D path pkS pkD∧
asymKeyPair pkS pkS −1 → hasOnly (S :: nil ) pkS −1
honest D ∧ session S D path pkS pkD∧
asymKeyPair pkD pkD−1 → hasOnly (D :: nil ) pkD−1
(SecS) ∀rt, honest rt → hasOnly (rt :: nil ) SVS (rt)
(SecD) ∀rt, honest rt → hasOnly (rt :: nil ) SVD (rt)
HasOnlyPath p () ()
honest p
hasOnly (p :: r :: nil ) k
HasOnlyPath p path keys
ownerIn i P
HasOnlyPath p (path, r ) (keys, k )
Finally we deﬁne GenkPath keys path pk sv to mean that for
every k in keys, where k is the ith key in keys, k must be the mes-
sage generated by applying the pseudo random function to the ith
principal on path , r’s secret sv(r) and the hash of the key pk, if r
is honest. Here sv is either SVS or SVD. PrfMsg is the constructor
for messages generated using pseudo random functions.
honest r
k = PrfMsg sv(r) pk
GenkPath keys path pk sv
GenkPath () () pk sv
GenkPath (keys, k ) (path, r ) pk sv
hasOnly P s
safeMsg M s K
safeNet s K u
Threads owned by the principal p run ei-
ther the source, destination, or router’s