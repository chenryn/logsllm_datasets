      (import "env" "__table_base" (global (;0;) i32))
      (import "env" "DYNAMICTOP_PTR" (global (;1;) i32))
      (import "global" "NaN" (global (;2;) f64))
      (import "global" "Infinity" (global (;3;) f64))
      (import "env" "memory" (memory (;0;) 256 256))
      (import "env" "table" (table (;0;) 10 10 funcref))
#####  2.JS处理用户输入
`__syscall145`函数调用之后，程序又进入了JS代码空间。在此可以跟进到第二个`doReadv`函数，可以看到这里是在处理的用户输入去了哪里。
如果跟进后面的read可以得知，取出用户输入1024长度的内容，这里终于可以用到`WASM
debuger`工具了，这里在4183行下好断点，运行到断点处，我们在工具窗口中查看`ptr`中的内容，此时的命令与gdb相同，需要注意3672是10进制数字。
    wdb> x/16 0xe58
    0x00000e58:  0x00000000 0x00000000 0x00000000 0x00000000
    0x00000e68:  0x00000000 0x00000000 0x00000000 0x00000000
    0x00000e78:  0x00000000 0x00000000 0x00000000 0x00000000
    0x00000e88:  0x00000000 0x00000000 0x00000000 0x00000000
    wdb>
之后在函数结束处4187行下好断点，然后输入1024个A的数据，程序中断，在工具窗口中继续查看`ptr`中的内容。
    wdb> x/16 0xe58
    0x00000e58:  0x41414141 0x41414141 0x41414141 0x41414141
    0x00000e68:  0x41414141 0x41414141 0x41414141 0x41414141
    0x00000e78:  0x41414141 0x41414141 0x41414141 0x41414141
    0x00000e88:  0x41414141 0x41414141 0x41414141 0x41414141
    wdb>
此时，该内存的内容就是用户输入的数据了，同时我们查看`iov`内存中的内容。
    wdb> x/4 0x1b30
    0x00001b30:  0x00001b20 0x00000000 0x00000e58 0x00000400
    wdb>
可以看出，该内存块中存访了0xe58的内存地址和0x400的内存大小。
那么执行到`f25`函数之后就有了存放输入内容的内存地址和内存大小的信息了。
#####  3.输入数据的判断
到这里以后，就可以随心所欲地调试自己的程序了，发现输入的数据进入到wasm代码空间之后并没有进行处理，直接又返回调用到用户输入了。
继续跟进会发现在`f54`函数当一个判断条件不能触发，那么程序永远都会跳转到第1000行的`f32`函数，从而重新跳转到了用户输入变成了死循环。因此，我们在判断条件处设置断点。
发现这里比较的是内存地址和4696的值进行比较，而内存长度只有1024，当内存的每一个字符都比较完了就必定会落入`f32`函数当中，好像无法跳出循环。继续往下执行发现还有一个条件判断语句。
发现这里是取内存地址6656，在地址偏移为输入字符的ASCII码值加1处的内容，然后与0进行比较，因此可以查看该内存地址0x1A00处的内容。
    wdb> x/48 0x1a00
    0x00001a00:  0xfffffeff 0xfffffffe 0x0000ffff 0xfeffffff
    0x00001a10:  0xfffffffe 0xfffffffe 0xfffffffe 0xfffffffe
    0x00001a20:  0xffff00fe 0xfffffffe 0xfffffffe 0xfffffffe
    0x00001a30:  0xfffffffe 0xfffffffe 0xfffffffe 0xfffffffe
    0x00001a40:  0xfffffffe 0xfffffffe 0xfffffffe 0xfffffffe
    0x00001a50:  0xfffffffe 0xfffffffe 0xfffffffe 0xfffffffe
    0x00001a60:  0xfffffffe 0xfffffffe 0xfffffffe 0xfffffffe
    0x00001a70:  0xfffffffe 0xfffffffe 0xfffffffe 0xfffffffe
    0x00001a80:  0xfffffffe 0xfffffffe 0xfffffffe 0xfffffffe
    0x00001a90:  0xfffffffe 0xfffffffe 0xfffffffe 0xfffffffe
    0x00001aa0:  0xfffffffe 0xfffffffe 0xfffffffe 0xfffffffe
    0x00001ab0:  0xfffffffe 0xfffffffe 0xfffffffe 0xfffffffe
或者查看右边Global中的memory，找到6056的位置。
可以看到其中有内容为0的地址有6个，当输入为可见字符空格即0x20的时候，会取到6689处的0，之后就会跳出循环进入到后面的验证程序。所以输入的1024个数据中，会截取空格之前的数据传送到后边的程序进行处理。
#####  4.数据加密
我们继续跟进，查看输入数据是否到达了上文静态分析的`f15`函数中，直接在`f15`函数第33行设置断点，输入1024个A，并替换其中一个A为空格，运行后程序中断。
可以看到两个变量的值变为1094795585，这个值转换为十六进制就是0x41414141，即我们刚才输入数据的前四个AAAA，到此完全搞清楚了程序的执行流程和数据处理情况。
####  4.3.3编写exp得到flag
经过上述分析可以编写exp如下。
    #!python3.6
    import struct
    def decrypt(v0, v1, key):
        delta = 0x9e3779b9
        n = 32
        sum = (delta * n)
        mask = 0xffffffff
        for round in range(n):
                v1 = (v1 - (((v0>5) + v0) ^ (sum + k[sum>>11 & 3]))) & mask
                sum = (sum - delta) & mask
                v0 = (v0 - (((v1>5) + v1) ^ (sum + k[sum & 3]))) & mask
        return struct.pack("i",v0) + struct.pack("i",v1)
    block = [0xE7689695, 0xC91755b7, 0xCF1e03ad, 0x4B61c56f, 0x2Dfd9002, 0x930aed22, 0xECc97e30, 0xE0B1968c]
    k = [0,0,0,0]
    flag = ''
    for i in range(4):
         flag = flag + ((decrypt(block[i*2], block[i*2+1], k)).decode())
    flag = flag + 'x65x36x38x62x62x7d'
    print(flag)
得到flag为`flag{1c15908d00762edf4a0dd7ebbabe68bb}`
若直接输入该字符串并不会显示处结果，因此输入flag和空格，再跟上一些内容组成1024长度的数据，就可以得到成功结果的字符串。
另外，如果只输入flag，直接点击取消，会有换行符号0x0A加在输入后面，也能够进入判断流程，是可以得到正确结果的，有兴趣的萌新可以跟进调试以下。
## 5.相关信息
在进行Webassembly的动态调试的时候，chrome浏览器存在一些bug，可能导致某些断点虽然设置了，但是并没断下来，这个时候需要关闭浏览器后重新加载一下就可正常运行了。`WASM
debuger`工具并不是必须的，浏览器中也能够观察到相关的内存信息，不过不如该工具方便。由于刚接触Webassembly的逆向分析，可能上述过程并不是最佳方法，如大佬们有更好的调试分析方法，欢迎分享知识指点迷津。
###  5.1参考资料
  * [`图解WebAssembly`](https://www.w3ctech.com/topic/2011)
  * [`理解 WebAssembly JS API`](https://www.w3ctech.com/topic/2014)
  * [`理解WebAssembly文本格式`](https://developer.mozilla.org/zh-CN/docs/WebAssembly/Understanding_the_text_format)
  * [`Webassembly 语义`](https://webassembly.org/docs/semantics/#linear-memory)
  * [`一种Wasm逆向静态分析方法`](https://xz.aliyun.com/t/5170)
  * [`用idawasm IDA Pro逆向WebAssembly模块`](https://xz.aliyun.com/t/2854)
  * [`执行 wasm 转换出来的 C 代码`](https://zhuanlan.zhihu.com/p/43986042)
  * [`TEA、XTEA、XXTEA加密解密算法`](https://blog.csdn.net/gsls200808/article/details/48243019)
  * [`WebAssembly.Memory()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)
  * [`buffer获取器`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/buffer)
  * [`编译和实例话Webassembly代码`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)
###  5.2工具链接
  * [`WABT（The WebAssembly Binary Toolkit）`](https://github.com/WebAssembly/wabt)
  * [`chrome-wasm-debugger`](https://github.com/itszn/chrome-wasm-debugger)
  * [`示例程序相关文件`](https://github.com/supdump/qwb2019/tree/master/webassembly)