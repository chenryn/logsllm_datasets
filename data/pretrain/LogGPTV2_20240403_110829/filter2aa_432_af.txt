以在 shell 中用下述命令序列来设置环境变量 PATH：
$PATH=/bin;/usr/bin;/sbin
$export PATH
这就使 execlp()和 execvp()首先在目录/bin,然后在目录/usr/bin，最后在目录/sbin 中搜索
程序文件。另外，execlp 和 execvp 还可以用于运行 shell 程序，而不只是普通的程序。
2．对 exec 传送变量的访问
任何被 exec 调用所执行的程序，都可以访问 exec 调用中的参数。这些参数是调用 exec
的程序传送给它的。我们可以通过定义程序 main()函数的参数来使用这些参数，方法如下：
main( int argc, char* argv[] );
这对于大多数人来说应该是熟悉的，这种方法就是 C 语言程序访问命令行参数的方法。
这也显示了 shell 本身就是使用 exec 启动进程的。
以上说明的 main()函数中，argc 是参数计数器，argv 指向参数数组本身。所以，用 execvp()
执行一个程序，如下所示：
chat* argin[]={“command”, “with”, “argument”, NULL};
当 prog 程序启动后，它取得的 argc 和 argv 之值如下：
argc=3;
argv[0]=”command”;
argv[1]=”with”;
argv[2]=”argument”;
第三章 进程控制
- 27 -
argv[3]=NULL;
为了进一步说明这种参数传递技术，请考虑下列程序 showarg：
#include 
main(int argc,char* argv[])
{
while(--argc>0)
{
printf("%s ",*(++argv));
printf("\n");]
}
这个程序的工作是把它的参数（除第一个参数外）的值送标准输出。如果用如下程序
段来调用 showarg 的话，则其 argc 参数为 3,输出结果为：”hello world”。
char* argin[]={"showarg", "hello", "world", NULL};
execvp(argin[0],argin);
3．exec 和 fork()的联用
系统调用 exec 和 fork()联合起来为程序员提供了强有力的功能。我们可以先用 fork()建
立子进程，然后在子进程中使用 exec,这样就实现了父进程运行一个与其不同的子进程，并
且父进程不会被覆盖。
下面我们给出一个 exec 和 fork()联用的例子，从中我们可以清楚的了解这两个系统调
用联用的细节。其程序清单如下：
#include 
#include 
main()
{
        int pid;
/* fork 子进程 */
        pid=fork();
        switch(pid) {
        case -1:
                perror("fork failed");
                exit(1);
        case 0:
                execl("/bin/ls","ls","-l","--color",NULL);
                perror("execl failed");
                exit(1);
        default:
                wait(NULL);
                printf("ls completed\n");
                exit(0);
        }
}
在程序中，在调用 fork()建立一个子进程之后，马上调用了 wait()，使父进程在子进程
- 28 -
Linux网络编程
结束之前，一直处于睡眠状态。所以，wait()向程序员提供了一种实现进程之间同步的简单
方法，我们将在下面对它作出更详细的讨论。
为了说明得更清楚一些，我们用图 3-3 来解释程序的工作。图 3-3 分为 fork()调用前、
fork()调用后和 exec 调用后三个部分。
图 3-3  exec()和 fork()的联用
在 fork()调用前，只有一个进程 A，PC 指向将要执行的下一个语句。fork()调用后，就
有了进程 A 和进程 B。A 是父进程，它正在执行系统调用 wait()，使进程 A 睡眠，直至进
程 B 结束。同时，B 正在用 exec 装入命令 ls。exec 调用后，进程 B 的程序被 ls 的代码取
代，这时执行 ls 命令的代码。进程 B 的 PC 指向 ls 的第一个语句。由于 A 正在等待 B 的
结束，所以它的 PC 所指位置未变。
现在我们应该了解命令解释程序 shell 的工作概况。当 shell 从命令行接受到以正常方
式（即前台运行）执行一个命令或程序的要求时，它就按上述方法调用 fork()、exec 和 wait()，
以实现命令或程序的执行。当要求在后台执行一个命令或程序时，shell 就省略对 wait 的调
用，使得 shell 和命令进程并发运行。
为了帮助读者进一步熟悉和掌握 fork()和 exec 的使用，我们再来看一个名为 docommand
的程序，这个程序仿真 Linux 库调用 system()，它可以在程序中执行一个 shell 命令。
docommand 的主题是对 fork()和 exec 的调用。程序清单如下：
int docommand(char* command)
{
int pid;
switch(pid=fork())
{
第三章 进程控制
- 29 -
case -1:
return -1;
case 0:
execl("/bin/sh","sh","-c",command,NULL);
exit(127);
default:
wait(NULL);
}
return 0;
}
docommand 并没有通过 exec 去直接执行指定的命令，而是通过 exec 去执行 shell（即
/bin/sh），并由 shell 再执行指定的命令。这是一种非常巧妙的方法，它使得 docommand 能
使用 shell 提供的一系列特性（如文件名扩展等）。在引用 shell 中使用的参数-c，表示从下
一个参数中取得命令名，而不是从标准输入上取得。
3.1.4  数据和文件描述符的继承
1．fork()、文件和数据
用系统 fork()建立的子进程几乎与其父进程完全一样。子进程中的所有变量均保持它
们在父进程中之值（fork()的返回值除外）。因为子进程可用的数据是父进程可用数据的拷
贝，并且其占用不同的内存地址空间，所以必须要确保以后一个进程中变量数据的变化，
不能影响到其它进程中的变量。这一点非常重要。
另外，在父进程中已打开的文件，在子进程中也已被打开，子进程支持这些文件的文
件描述符。但是，通过 fork()调用后，被打开的文件与父进程和子进程存在着密切的联系，
这是以为子进程与父进程公用这些文件的文件指针。这就有可能发生下列情况：由于文件
指针由系统保存，所以程序中没有保存它的值，从而当子进程移动文件指针时，也等于移
动了父进程的文件指针。这就可能会产生意想不到到结果。
为了说明上述情况，我们给出一个实例程序 proc_file。在这个程序中使用了两个预定
义的函数 failure()和 printpos()。failure()用来完成简单的出错处理，它只是调用 perror()来显
示出错信息。其实现如下：
failure( char* s)
{
perror(s);
exit(1);
}
printpos()实现显示一个文件的文件指针之值，其实现如下：
printpos( char* string, int fildes)
{
long pos;
if ((pos=lseek(fildes,0L,1)
#include 
#include 
failure( char* s)
{
perror(s);
exit(1);
}
printpos( char* string, int fildes)
{
long pos;
if ((pos=lseek(fildes,0L,1))
…
…
…
int fd;
fd=open(“file”,O_RDONLY);
…
…
fcntl(fd,F_SETFD,1);
如果已经设置了执行关闭位，我们可以用下面的语句来撤销“ 执行关闭“ 位的设置，
并取得它的返回值：
res=fcntl(fd,F_SETFD,0);
如果文件描述符所对应的文件的“ 执行关闭位” 已经被设置，则 res 为 1,否则 res 之值
为 0。
3.2  进程的控制操作
3.2.1  进程的终止
系统调用 exit()实现进程的终止。exit()在 Linux 系统函数库 stdlib.h 中的函数声明如下：
void exit(int status);
exit()只有一个参数 status，称作进程的退出状态，父进程可以使用它的低 8 位。exit()
的返回值通常用于指出进程所完成任务的成败。如果成功，则返回 0；如果出错，则返回
非 0 值。
exit()除了停止进程的运行外，它还有一些其它作用，其中最重要的是，它将关闭所有
已打开的文件。如果父进程因执行了 wait()调用而处于睡眠状态，那幺子进程执行 exit()会
重新启动父进程运行。另外，exit()还将完成一些系统内部的清除工作，例如缓冲区的清除
工作等。
除了使用 exit()来终止进程外，当进程运行完其程序到达 main()函数末时，进程会自动
终止。当进程在 main()函数内执行一个 return 语句时，它也会终止。
在 Linux 中还有一个用于终止进程的系统调用_exit()。它在 Linux 系统函数库 unistd.h
中被声明：
- 32 -
Linux网络编程
void _exit(int status)
其使用方法与 exit()完全相同，但是它执行终止进程的动作而没有系统内部的清除工
作。因此，只有那些对系统内部了解比较深的程序员才使用它。
3.2.2  进程的同步
系统调用 wait()是实现进程同步的简单手段，它在 Linux 系统函数库 sys/wait.h 中的函
数声明如下：
       pid_t wait(int *status)
我们在前面已经看到了，当子进程执行时，wait()可以暂停父进程的执行，使起等待。
一旦子进程执行完，等待的父进程就会重新执行。如果有多个子进程在执行，那么父进程
中的 wait()在第一个子进程结束时返回，恢复父进程执行。
通常情况下，父进程调用 fork()后要调用 wait()。例如：
pid=fork();
if (!pid){
/* 子进程 */
} else {
/* 父进程 */
wait(NULL);
}
当希望子进程通过 exec 运行一个完全不同的进程时，就要进程 fork()和 wait()的联用。
wait()的返回值通常是结束的那个子进程的进程标识符。如果 wait()返回-1，表示没有子进
程结束，这时 errno 中含有出错代码 ECHILD。
wait()有一个参数，它可以是一个指向整型数的指针，也可以是一个 null 指针。如果参
数用了 null 指针，wait 就忽略它。如果参数是一个有效的指针，那么 wait 返回时，该指针
就指向子进程退出时的状态信息。通常，该信息就是子进程通过 exit 传送出来的出口信息。
下面的程序 status 就给出了这种情况下，wait 的使用方法。
#include 
#include 