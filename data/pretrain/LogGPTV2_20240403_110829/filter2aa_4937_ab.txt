**jq**
> 该工具帮助阅读 json 格式的数据
```bash
apt-get install -y jq
JsonData='[
    {"Book":"PHP 7"},
    {"Publication":"Apress"},
    {"Book":"React 16 Essentials"},
    {"Publication":"Packt"}
]'
echo "${JsonData}" | jq '.'
```
```bash
cat test.json | jq '.[].ip+":"'
cat test.json | jq '.[].port'
cat craw1.json | jq '.req_list[].url'
```
```bash
cat test.json | jq '.' -r   # 不带双引号
```
```bash
cat chaos-bugbounty-list.json | jq -r '.programs[] | select(.bounty == true) | .domains' | sort -u | cut -d '"' -f2 > urls.txt
```
- 相关教程
    - https://justcode.ikeepstudying.com/2018/02/shell%EF%BC%9A%E6%97%A0%E6%AF%94%E5%BC%BA%E5%A4%A7%E7%9A%84shell%E4%B9%8Bjson%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7jq-linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A7%A3%E6%9E%90json-jq%E8%A7%A3%E6%9E%90-json/
    - https://mozillazg.com/2018/01/jq-use-examples-cookbook.html
    - https://www.jianshu.com/p/6de3cfdbdb0e
- 在线调试
    - https://jqplay.org/
**jo**
> 生成json格式数据的小工具
- https://github.com/jpmens/jo
```bash
wget https://github.com/jpmens/jo/releases/download/1.6/jo-1.6.tar.gz
tar xvzf jo-1.6.tar.gz
cd jo-1.6
autoreconf -i
./configure
make check
make install
jo name=Jane
seq 1 10 | jo -a
jo time=$(date +%s) dir=$HOME
jo -p -a spring summer winter
```
**jd**
> json 比较工具
- https://github.com/josephburnett/jd
```bash
go install github.com/josephburnett/jd@latest
jd a.json b.json
```
**gron**
> json 数据格式化
- https://github.com/TomNomNom/gron
```bash
go install github.com/tomnomnom/gron@latest
gron test.json
```
**jless**
> 命令行的json查看工具
- https://jless.io/
### html
**htmlq**
> 像 jq 一样对 html 使用 yq
- https://github.com/mgdm/htmlq
---
## 图像视频
**imcat**
> 在终端显示任何图片
- https://github.com/stolk/imcat
```bash
git clone https://github.com/stolk/imcat.git
make
./imcat xxx.png
```
**Termtosvg**
> 将你在 Linux 终端中操作录制成 SVG 动画
```bash
pip3 install termtosvg pyte python-xlib svgwrite
termtosvg
# 按下 CTRL+D 或输入 exit 来停止录制。录制完后，输出文件会以一个独一无二的名字被保存在 /tmp 文件夹中。
```
**gimp**
> GIMP（全称 Gnu 图像处理程序）是一款免费的、跨平台的开源图像处理程序。
```bash
add-apt-repository ppa:otto-kesselgulasch/gimp
apt-get update
apt-get install -y gimp     # 安装 gimp
gimp                        # 启动 gimp
```
**asciinema**
```bash
pip3 install asciinema
apt-get install asciinema
yum install asciinema
dnf install asciinema
```
```bash
asciinema rec
```
**zbarimg**
> 命令行解析二维码
```bash
apt install zbar-tools
zbarimg xxx.png
```
**montage**
> 将多个小图片拼成一张图
```bash
apt install imagemagick
montage xxx.jpg -tile 8x15 -geometry 200x100+0+0 output.jpg
```
**gaps**
> 修复、还原图片
```bash
gaps --image=output.jpg --generations=40 --population=120 --size=100
gaps -image=flag.jpg -generations=50 -population=120 -size=50
```
---
## 提高生产力
**bc**
> 任意精度计算器
```bash
bc  # 进入交互模式,输入 quit 退出
# e.g.
echo "15+5" | bc
echo "10^10" | bc
echo "sqrt(100)" | bc
echo 'scale=2; (2.777 - 1.4744)/1' | bc     # scale=2 设小数位，2 代表保留两位:
```
**rlwrap**
> 解决各类 shell 中无法上下左右的问题
```bash
apt install rlwrap
rlwrap [Command]
```
**trash-cli**
> 回收站的命令行界面
- https://github.com/andreafrancia/trash-cli
```bash
pip3 install trash-cli
```
**tr**
> 命令行届的翻译
```bash
# 转换大小写
echo "abc" | tr a-z A-Z
echo "abc" | tr [:lower:] [:upper:]
# 将空白转换成 TABs
echo "a b" | tr [:space:] '\t'
# 转换括号
echo "{abc}" | tr "{}" "()"
# 删除 -d 指定的字符集
echo "abc" | tr -d 'a'
# 删除数字
echo "123abc123" | tr -d [:digit:]
# 删除连续空白
echo "emmmmmmmmmm   no" | tr -s [:space:] ' '
# 删除空行
cat test.txt | tr -s '\n'
# squeeze repeats
echo "abbbbccccbd"  | tr -s a-z A-Z
# 删除除了数字之外的内容
echo "my id is 123" | tr -cd [:digit:]
# 将不是 SET1 中的内容，替换为 SET2 中内容
echo 'abc123' | tr -c [:digit:] x
```
**xclip**
> 在 Linux 命令行中复制粘贴
```bash
xclip file_name     # 将文件的内容复制到剪贴板
```
**hexyl**
> 命令行十六进制查看器
```
apt install hexyl
hexyl a.png
```
**DeepL**
> 非常好用的翻译软件
```bash
yarn global add deepl-translator-cli
deepl translate -t 'DE' 'How do you do?'
```
**translate-shell**
```bash
wget git.io/trans
chmod +x ./trans
./trans 'Saluton, Mondo!'
```
**anew**
- https://github.com/tomnomnom/anew
```bash
cat newthings.txt | anew things.txt
cat newthings.txt | anew things.txt > 1.txt
```
**ranger**
linux 文件管理工具 ranger, 具有 Vim 式的操作方式.
```bash
apt install ranger && pip install ranger-fm
ranger
# 使用 h,j,k,l 来进行光标的移动, 来穿越在不同的文件夹中
# q 退出
# S 来进行当前光标所在的文件夹中 exit 命令重新回到 ranger 程序当中去
```
使用 `ranger --copy-config=all` 将在 `~/.config/ranger` 中生成一系列配置文件, 其中 ranger 主要有 4 个配置文件.
* rc.conf 常用于设置选项和绑定快捷键.(最常用)
* scope.sh 常用于设置文件的预览方式.
* rifle.conf 常用于设置使用那个软件来打开文件.
* commands.py python 文件, 增强和改进 ranger 的各种功能.
**exa**
> ls 的替代品
- https://github.com/ogham/exa
```bash
# fefora
dnf install exa
# debian
apt install exa
```
```bash
exa -l -F
```
**broot**
> 类似 ranger 的树形图目录查看工具
- https://github.com/Canop/broot
```bash
br -s
```
**bat**
> cat 的替代品
```bash
# fefora
dnf install bat
# debian
wget https://github.com/sharkdp/bat/releases/download/v0.19.0/bat_0.19.0_amd64.deb
dpkg -i bat_0.19.0_amd64.deb
```
---
## 定时任务
- https://github.com/dshearer/jobber
- https://github.com/rundeck/rundeck
- https://github.com/shunfei/cronsun
---
## 辅助
**wait-for**
> 监测服务是否可用
- https://github.com/eficode/wait-for
```
./wait-for www.eficode.com:80 -- echo "Eficode site is up"
Eficode site is up
```
**wait-for-it**
> 监测服务是否可用
- https://github.com/vishnubob/wait-for-it
```
./wait-for-it.sh -t 0 db:3306 -- echo "mysql is up"
./wait-for-it.sh -t 0 rabbitmq:5672 -- echo "rabbitmq is up"
```
**yes**
> 帮你自动回答命令行提示
```
yes | rm -i *.test
yes n | rm -i *.test
```
**usql**
> 多合一命令行下数据库管理工具
- https://github.com/xo/usql
```bash
GO111MODULE=on go install -tags 'all' github.com/xo/usql@latest
# 或
go install github.com/xo/usql@master
```
```bash
# connect to a postgres database
$ usql pg://user:pass@host/dbname
$ usql pgsql://user:pass@host/dbname
$ usql postgres://user:pass@host:port/dbname
$ usql pg://
$ usql /var/run/postgresql
$ usql pg://user:pass@host/dbname?sslmode=disable # Connect without SSL
# connect to a mysql database
$ usql my://user:pass@host/dbname
$ usql mysql://user:pass@host:port/dbname
$ usql my://
$ usql /var/run/mysqld/mysqld.sock
# connect to a sqlserver database
$ usql sqlserver://user:pass@host/instancename/dbname
$ usql ms://user:pass@host/dbname
$ usql ms://user:pass@host/instancename/dbname
$ usql mssql://user:pass@host:port/dbname
$ usql ms://
# connect to a sqlserver database using Windows domain authentication
$ runas /user:ACME\wiley /netonly "usql mssql://host/dbname/"
# connect to a oracle database
$ usql or://user:pass@host/sid
$ usql oracle://user:pass@host:port/sid
$ usql or://
# connect to a cassandra database
$ usql ca://user:pass@host/keyspace
$ usql cassandra://host/keyspace
$ usql cql://host/
$ usql ca://
# connect to a sqlite database that exists on disk
$ usql dbname.sqlite3
# NOTE: when connecting to a SQLite database, if the "://" or
# ":" scheme/alias is omitted, the file must already exist on disk.
#
# if the file does not yet exist, the URL must incorporate file:, sq:, sqlite3:,
# or any other recognized sqlite3 driver alias to force usql to create a new,
# empty database at the specified path:
$ usql sq://path/to/dbname.sqlite3
$ usql sqlite3://path/to/dbname.sqlite3
$ usql file:/path/to/dbname.sqlite3
# connect to a adodb ole resource (windows only)
$ usql adodb://Microsoft.Jet.OLEDB.4.0/myfile.mdb
$ usql "adodb://Microsoft.ACE.OLEDB.12.0/?Extended+Properties=\"Text;HDR=NO;FMT=Delimited\""
# connect with ODBC driver (requires building with odbc tag)
$ cat /etc/odbcinst.ini
[DB2]
Description=DB2 driver
Driver=/opt/db2/clidriver/lib/libdb2.so
FileUsage = 1
DontDLClose = 1
[PostgreSQL ANSI]
Description=PostgreSQL ODBC driver (ANSI version)
Driver=psqlodbca.so
Setup=libodbcpsqlS.so
Debug=0
CommLog=1
UsageCount=1
# connect to db2, postgres databases using ODBC
$ usql odbc+DB2://user:pass@localhost/dbname
$ usql odbc+PostgreSQL+ANSI://user:pass@localhost/dbname?TraceFile=/path/to/trace.log
```
**croc**
> Easily and securely send things from one computer to another
- https://github.com/schollz/croc
A : send file
```
croc send xxx.txt
Code is: xxxx-xxxx
```
B : receive file
```
croc xxxx-xxxx
```
**magic-wormhole**
> get things from one computer to another, safely
- https://github.com/magic-wormhole/magic-wormhole
**fq**
> jq for binary formats
```
fq . file.mp3
```