---
## Page 25
1.4条件分支和猫环机制
图1-5表示把内存中存储的数值（示例中是123）的绝对值输出到
显示器的程序的内存状态。程序运行的开始位置是0100地址。随着程
序计数器数值的增加，当到达0102地址时，如果累加寄存器的值是正
数，则执行跳转指令（jump指令）跳转到0104地址。此时，由于累加
寄存器的值是123，为正数，因此0103地址的指令被跳过，程序的流
程直接跳转到了0104地址。也就是说，“跳转到0104地址”这个指令
间接执行了“将程序计数器设定成0104地址”这个操作。
程序计数器
数值的变化
地址
内存中的内客
0100
0100指令：将0106地址的数值保存在累加寄存器中
0101
0101
指令：比较累加寄存器的值和0的大小
0102
0102指令：大于0跳转到0104地址
0104
0103
指令：将累加寄存群的值的符号反过来
0105
0104
指令：将累加寄存器的值输出到显示器上
0105指令：结束程序（返回操作系统）
0106数据：123
围1-5执行条件分支的程序示例（显示绝对值）
条件分支和循环中使用的跳转指令，会参照当前执行的运算结果
来判断是否跳转。表1-1所列出的寄存器中，我们提到了标志寄存器。
无论当前累加寄存器的运算结果是负数、零还是正数，标志寄存器都
①溢出（overflow）是指运算的结果超出了寄存器的长度范围。
②奇偶校验（paritycheck）是指检查运算结果的值是钙数还是奇数。
更多资料请关注裁的新浪薄客http：//blog
---
## Page 26
第1章对程序员来说CPU提什么
CPU在进行运算时，标志寄存器的数值会根据运算结果自动设定。
条件分支在跳转指令前会进行比较运算。至于是否执行跳转指令，则
由CPU在参考标志寄存器的数值后进行判断。运算结果的正、零、负
三种状态由标志寄存器的三个位表示。图1-6是32位CPU（寄存器的
长度是32位）的标志寄存器的示例。标志寄存器的第一个字节位、第
二个字节位和第三个字节位的值为1时，表示运算结果分别为正数、
零和负数。
运算结果
运算结果
运算结果
为负则为1
为0则为1
为正则为1
标志寄存器
位
31
围1-6比较运算的结果存储在标志寄存器的三个位中
CPU执行比较的机制很有意思，因此请大家务必牢记。例如，假
设要比较累加寄存器中存储的XXX值和通用寄存器中存储的YYY
值，执行比较的指令后，CPU的运算装置就会在内部（暗中）进行
XXX-YYY的减法运算。而无论减法运算的结果是正数、零还是负数，
都会保存到标志寄存器中。结果为正表示XXX比YYY大，零表示
XXX和YYY相等，负表示XXX比YYY小。程序中的比较指令，就
是在CPU内部做减法运算。怎么样，是不是挺有意思的？
①1位（bit=binary digit）就是一个位数的二进制数，表示0或1的数值。32
位CPU指的就是用32位的二进制数来表示数据及地址的数值。关于二进
制数的详细内容，请读者参阅第2章。
---
## Page 27
1.5函数的调用机制
1.5函数的调用机制
接下来，我们继续介绍程序的流程。哪怕是高级语言编写的程序，
函数调用处理也是通过把程序计数器的值设定成函数的存储地址来实
现的。不过，这和条件分支、循环的机制有所不同，因为单纯的跳转指
令无法实现函数的调用。函数的调用需要在完成函数内部的处理后，处
理流程再返回到函数调用点（函数调用指令的下一个地址）。因此，如
果只是跳转到函数的入口地址，处理流程就不知道应该返回至哪里了。
图1-7是给变量a和b分别代人123和456后，将其赋值给参数
（parameter）来调用MyFunc函数的C语言程序。图中的地址是将C语
言编译成机器语言后运行时的地址。由于1行C语言程序在编译后通
常会变成多行的机器语言，所以图中的地址是离散的。
此外，通过跳转指令把程序计数器的值设定成0260也可实现调用
MyFunc函数。函数的调用原点（0132地址）和被调用函数（0260地
址）之间的数据传递，可以通过内存或寄存器来实现。不过，当函数处
理进行到最后的0354地址时，我们知道应该将程序计数器的值设定成
函数调用后要执行的0154地址，但实际上这一操作根本无法实现。那
么，怎么办才好呢？
机器语言的call指令和rctum指令能够解决这个问题。建议大家把
二者结合起来来记忆。函数调用使用的是call指令，而不是跳转指令。
在将函数的人口地址设定到程序计数器之前，cal指令会把调用函数后
①很多高级编程语言都采用类似于yf（x）这样的数学函数的语法来记述编写
处理。我们知道，该数学函数的意思是将x这个值通过/处理后得到数值
y。如果套用函数的语法，x就是参数，y就是运回值，抗行函数的功能就
是函数调用。
更多资料请关注裁的新浪薄客http：//blo
---
## Page 28
第1章对程序灵来说CPU是什么
要执行的指令地址存储在名为栈的主存内。函数处理完毕后，再通过
函数的出口来执行retum命令。returm命令的功能是把保存在栈中的地
址设定到程序计数器中。如图1-7所示，MyFunc函数被调用之前
0154地址保存在栈中。MyFunc函数的处理完毕后，栈中的0154地址
就会被读取出来，然后再被设定到程序计数器中（图1-8）。
地址
C语言程序
0100
a=123
0116
b=456
0132
C = MyFunc(a, bl;
函数的调用
0154
下一个指令
跌转到0260地址）
call指令
0260
int MyFunolint a, int b)(
函数的入口
函数的处理
：
retun指令
0354
函数的出口
返图到0154地址）
图1-7程序调用函数示例（这里直接展示了C语言的源代码，实际上各地址存储的
应该是变换成机器语言后的程序）
①栈（stack）本来是“干草等堆积如山”的意思。在程序领城中。通常使用
该词来表示不断地存储各种数据的内存区城。函数调用后之所以能正确
地返回调用前的地址，就是核的功劳。关于栈，我们会在第4章迹行详细
说明。
---
## Page 29
1.5函数的调用机制
（1）执行cal指令时
CPU
返回自的地
内存
程序计数器
在栈中
的地址存储
0260
程序的指令区域
程序的数据区域
一个完整的程序
通过把函数调用的地址0260
程序的栈区域
设定在程序计数器上，来
：
转到该函数进行处理
0154（返回目的地的地址）
（2）执行retum指令时
CPU
内存
程序计数器
0154
程序的指令区域
程序的数据区域
一个完整的程序
程序的栈区域
通过把返回目的地的地址
0154设定在程序计数器上，
来跳转到该函数的调用元地
0154（返回目的地的地址）
址遗行处理
图1-8函数调用中程序计数器和栈的职能
在编译高级编程语言的程序后，函数调用的处理会转换成call指
令，函数结束的处理则会转换成returm指令。这样一来，程序的运行也
就变得非常流畅。
---
## Page 30
第1章对程序员来说CPU是什么）
1.6通过地址和索引实现数组
接下来我们看一下表1-1中出现的基址寄存器和变址寄存器。通过
这两个寄存器，我们可以对主内存上特定的内存区城进行划分，从而
实现类似于数组的操作。
首先，我们用十六进制数将计算机内存上00000000~FFFFFFFF
的地址划分出来。那么，凡是该范围的内存区域，只要有一个32位的
寄存器，即可查看全部的内存地址。但如果想要像数组那样分割特
定的内存区域以达到连续查看的目的，使用两个寄存器会更方便
些。例如，查看10000000地址~1000FFFF地址时，如图1-9所示，
可以将10000000存人基址寄存器，并使变址寄存器的值在
00000000~0000FFFF变化。CPU则会把基址寄存器+变址寄存器的值
解释为实际查看的内存地址。变址寄存器的值就相当于高级编程语言
程序中数组的索引功能。
①数纽是指网样长度的数据在内存中进行连续排
列的数据构造。用一个数组名来表示全体数
数据
元素a0]
据，通过索引采区分数组的各个数据（元素）。
有10个
数据
-元素a1]
例如，一个10个元素的数组a，其中的各个
元索的
数据
元素a[2]
数组a
数据就用a[0]~a[9]来表示。[内的数字0~9
数据
元素9]
就是索引。
②二进制数的位数较多、不易理解时，通常使用十六进制数来代替二进制数。
这是一种数到16就进位的计数方式。我们用A~F来分别表示10~15，那
么，二进制数的4位（0000~FFFF）就可以用十六进制数的1位（0~F）
来表示。32位的二进制数，就可以用8位的十六进制数来表示。
---
## Page 31
1.7CPU的处理其实很简单
实际地址=基址寄存题的值+变址寄存器的值
固定
10000000
10000000
00000000
10000001
0000000
相当于数组
索引的数值
10000002
变化
00000
1000FFFF
围1-9综合使用地址和索引来决定实际地址
1.7CPU的处理其实很简单
可能有些读者不知道机器语言和汇编语言的指令到底有多少种，
因而对CPU的运行没什么概念。为了消除大家心中的这个疑团，接下
来我们就来看一下机器语言到底有哪些种类。表1-2按照功能对CPU
能执行的机器语言指令进行了大体分类。这里没有列出指令的具体名
称（汇编语言的助记符）。看完表后你会惊奇地发现，原来CPU可以进
行的处理非常少。虽然高级编程语言编写的程序看起来非常复杂，但
CPU实际处理的事情就是这么简单。这样一来，大家是不是能够消除
“计算机机制看起来很难”这个印象了呢？
表1-2机器语言指令的主要类型和功能
类型
功能
数据转送指令
寄存器和内存、内存和内存、寄存器和外围设备之间的数据读
写操作
运算指令
用累加寄存器执行算术运算、逻辑运算、比较运算和移位运算
跳转指令
实现条件分支、循环、强制跳转等
cal/return指令
函数的调用/返回调用前的地址
①外国设备指的是连接到计算机的键盘、鼠标、显示器、设备装置、打印机等。
更多资料请关注裁的新浪薄客http：//blo
---
## Page 32
第1章对程序员来说CPU是什么）