then transits from the Critical Data Corruption state
to the Crash state.
In this case, the instruction i is
the faulting instruction (i.e., i = f ). For example, in a
stack bu(cid:11)er over(cid:13)ow attack, the overrun may corrupt
return address as well as other stack variables. An in-
struction that dereferences such a variable before the
function returns may cause a crash.
(cid:15) Case III: The attack corrupts critical program data
without causing the crash. However, the process crashes
when executing the takeover instruction t, since the
takeover instruction attempts to access an incorrect
address. In this case, the takeover instruction is the
faulting instruction (i.e., t = f ). Thus, the program
(cid:12)rst transits from the Normal state into the Critical
Data Corruption state, and then into the Crash state.
For example, in a stack over(cid:13)ow attack, the corrupted
return address would be invalid and cause the crash
when the ret instruction is executed.
(cid:15) Case IV: The program successfully transits into the
Critical Data Corruption state, as in cases II and III.
Then the compromised program successfully executes
the takeover instruction without an immediate crash,
and continues to execute for some time before it ex-
ecutes a faulting instruction. (Such cases have been
shown in a previous study [39].) In other words, the
corrupted, randomized program transits into the In-
consistent Execution state even though the attacker
makes wrong address prediction, and then transits into
the Crash state when it executes a faulting instruction
f .
In this case, the faulting instruction is executed
after c and t.
The key di(cid:11)erence between Case I & II is that no datum
has been corrupted in Case I, while some data have already
been corrupted in case II.
4. DIAGNOSING MEMORY CORRUPTION
VULNERABILITIES
Based on the above discussion, we propose a backward
tracing approach to automatically locating the (unknown)
memory corruption vulnerabilities exploited by novel at-
tacks. As discussed in Section 2, the monitor starts each
network service program using a randomized version of the
program. When this process crashes due to memory corrup-
tion attacks, the monitor takes control by intercepting the
memory access violation exception. The monitor and the
diagnosis engine then start the automatic diagnosis process.
Our approach aims to identify the (cid:12)rst one or several
corrupting instructions during a memory corruption attack.
This instruction can be used to easily identify the counter-
part in the program source code with the stack trace and
possibly auxiliary data collected during compilation, thus
providing useful information in (cid:12)xing the vulnerability. In
the next section, we also use this information to automati-
cally generate a signature of the memory corruption attack,
and deploy the signature at the message (cid:12)lter to block future
attacks.
Consider the four cases discussed in Section 3. We ob-
serve that the takeover instruction t is a dividing factor of
these four cases. Before the takeover instruction is executed
(cases I and II), the victim process only executes the instruc-
tions intended in the original program, though the operands
may be corrupted. However, after the takeover instruction
is executed (case IV), the victim process may have executed
instructions injected or chosen by the attack. Thus, it is
more di(cid:14)cult to trace back to the initial corrupting instruc-
tion.
We adopt the following strategy to develop our approach.
We (cid:12)rst eliminate case IV by converting a Case-IV crash
into one of the other three cases. For a Case-III crash, we
need to identify the takeover instruction, which is also the
faulting instruction. Since a takeover instruction is a con-
trol (cid:13)ow transfer instruction in case III, the takeover in-
struction must have accessed an incorrect address pointed
by the corrupted data. We then locate the address where
this corrupted data is stored, re-execute the crashed pro-
gram, and at the same time monitor this address to catch
the instruction that writes the corrupted data. This in-
struction is obviously a corrupting instruction, which either
initially corrupts the data, or helps propagate the corrupted
data. In the latter situation, the corrupted data may have
been copied from another location. Thus, we iteratively per-
form the above process to identify the previous location and
corrupting instruction, until we reach the point where the
program receives the network input data.
In a Case-I crash or a Case-II crash where the faulting
instruction uses a faulty address derived from the malicious
input, there is no need to further trace back, since we can al-
ready identify the vulnerable instruction a(cid:11)ected by the ma-
licious input. However, in a Case-II crash where the faulty
address is derived from corrupted data, we need to identify
the source of the faulty address, and then trace back to the
initial corrupting instruction as in case III.
Our approach consists of the following two steps:
1. Convert Case-IV crashes. This step eliminates
Case-IV crashes by converting such crashes into one
of the other three cases. Intuitively, we re-execute the
monitored program with a di(cid:11)erent memory layout,
and force the takeover instruction or an instruction
before it to crash the process, if the original crash is a
Case-IV crash. At the end of this step, we can distin-
guish these cases by checking the faulting instruction.
If the faulting instruction is a memory access instruc-
tion (e.g., mov), the (converted) crash is either case I
or case II. If the faulting instruction is a control (cid:13)ow
transfer instruction (e.g., jmp, ret), the (converted)
crash must be case III.
2. Trace the corrupting instructions. The goal of
this step is to trace back as close to the initial cor-
rupting instruction as possible. As discussed above,
a Case-I crash or a Case-II crash where the faulting
instruction uses a faulty address derived from the ma-
licious input, there is no need to further trace back.
In the remaining situations, we (cid:12)rst identify the loca-
tion where the corrupted address used by the faulting
instruction is stored, and then trace back to the in-
struction that writes the corrupted data. This process
may repeat until we reach the network input data.
In both steps, the monitor supervises the re-execution of
the victim program, stops the monitored process occasion-
ally to collect data, and facilitates the diagnosis engine to
trace the attack and to eventually identify the potentially
unknown memory corruption vulnerability. The method can
be viewed as an automated debugging process.
A critical issue in this diagnosis process is to locate the
faulting instruction. Though the faulting instruction f causes
the process to crash, the process image at the time of crash
does not include the speci(cid:12)c address of f .
In particular,
the CPUâ€™s program counter (PC) register does not point to
f , rather it contains the address of the next instruction to
be executed should f complete. Because f could be any
instruction using a faulty address (e.g., function call or re-
turn), the address of f may be very far from the address in
PC.
We propose to use monitored re-execution and programmable
breakpoints to locate the faulting instruction. In the follow-
ing, we (cid:12)rst present this technique, and then discuss the two
steps of our approach in detail.
4.1 Identifying the Faulting Instructing
To correctly determine the address of the faulting instruc-
tion f , we distinguish between two cases: a simple case
where f is the immediate preceding instruction of the cur-
rent PC, and a complex case where f is an indirect control
(cid:13)ow transfer instruction that uses a corrupted target ad-
dress. These two cases can be distinguished as follows:
if
the current PC value matches the invalid memory address
that causes the access violation, then the faulting instruc-
tion f must be an indirect control (cid:13)ow transfer. We then
have the complex case. Otherwise, we have the simple case,
and f is the immediate predecessor of the current PC. The
invalid memory address is stored in the control register cr2
on Linux/IA-32. We implemented a kernel patch to retrieve
this value and made it accessible from the user-space moni-
tor.
In the simple case, the faulting instruction must be the
one right before the address held by the PC register at the
time of the memory access exception. Now let us discuss
how to locate the faulting instruction in the complex case.
In normal program debugging, the call stack trace at the
time of exception can be used to identify the last function
called, and the faulting instruction f should be a part of this
function. Unfortunately, we cannot trust the call stack in-
formation, because it might have been maliciously corrupted
by the on-going attack. Instead, we use the following algo-
rithm.
We (cid:12)rst identify all indirect control (cid:13)ow instructions in
the program, and place them in a candidate set C. This is
done by scanning the code segment of the monitored process
image. This set includes all indirect jumps, indirect function
calls, and function returns. The faulting instruction f must
be one member in the candidate set.
We then decode and compute the target address a of each
member m in C using the process machine state at the time
of the memory exception.
If for an m, its target address
a does not match the value of the current PC register, m
is eliminated and removed from C.
If there is only one
instruction in C at the end of this process, it is the faulting
instruction f . If there are still multiple instructions in the
resulting C, we use programmable breakpoints to select the
real faulting instruction.
Speci(cid:12)cally, we set a programmable breakpoint at each
of the candidate instructions in C, and re-execute the pro-
gram (under the supervision of the monitor) with the logged
messages replayed to it. The program will have the mem-
ory access violation as before due to the attack. During
the re-execution, the monitor will receive a breakpoint ex-
ception whenever an instruction in the candidate set C is
executed. The faulting instruction f is the instruction at
the last breakpoint before the memory access violation.
4.2 Converting Case-IV Crashes
We now describe how to convert a Case-IV crash into one
of the other three cases. While the purpose of the following
algorithm is to eliminate and convert Case-IV crashes, we
do not need to distinguish the four cases. In fact, when a
crash is detected, we have no way to di(cid:11)erentiate the cases.
Therefore, our algorithm takes any crash as an input, elim-
inates the possibility of Case-IV via random re-execution,
and converts it to the other cases.
Recall that in a Case-IV crash, a takeover instruction
does not directly cause a crash, but rather a subsequent
instruction does due to semantically inconsistent execution.
Case-IV exists because the takeover instruction uses a cor-
rupted but still valid address. Our method converts Case-IV
crashes into other cases by making the corrupted address
invalid for the takeover instruction. We use re-execution
with non-overlapping memory layout for this purpose. Intu-
itively, when a process crashes, the monitor re-executes the
program with message replay. But this time, it creates the
address space of the process in such a way that its mem-
ory regions do not overlap with those used in the crashed
process. While the new process has changed with a com-
pletely di(cid:11)erent memory layout, the address values sent by
the attacker in the logged message remain the same. As
a result, the re-execution makes a previously valid address
invalid. Should the re-execution reach the takeover instruc-
tion, it would have an immediate memory access exception,
resulting in a Case-III crash. It is also possible that the re-
execution would crash before reaching the original takeover
instruction. In either case, a Case-IV crash is converted to
one of the other three cases.
One possible concern is: Can an attacker predict the rela-
tive addresses used in o(cid:11)set-based instructions (e.g., o(cid:11)set-
based jmp)? Modern compilers generate o(cid:11)set-based in-
structions directly and place the o(cid:11)set values in the read-
only code segment. Thus, the attack will not be able to
corrupt these o(cid:11)set values. An attacker may also use o(cid:11)set-
based instructions in the attack-injected code. Fortunately,
the attack has to rely on a control (cid:13)ow transfer instruction
(i.e., the takeover instruction) based on absolute addresses
to execute injected code. Thus, the process will crash at
the takeover instruction before the attack has a chance to
transfer the control (cid:13)ow to the injected code, if the earlier
instructions do not cause the crash.
It is certainly possible that during the re-execution with
non-overlapping memory layout, an invalid address in the
original process becomes a valid one in the re-execution.
This implies that a non-Case-IV crash may be converted into
a Case-IV crash. To deal with such situations, we re-execute
the program for a second time using a memory mapping that
does not overlap with the original execution and the (cid:12)rst
re-execution. Given the non-overlapping memory layouts
of the executions, at least two of the three instances will
be non-Case-IV crashes. These two instances must crash
at the same faulting instruction, because any faulty address
can be valid in at most one memory mapping. Note that the
diagnosis engine can easily determine the correspondence of
instructions in di(cid:11)erent crashes by reversing the memory re-
mapping (using the information about how the re-mapping
is performed). Thus, the diagnosis engine can determine the
non-Case-IV crashes through a majority voting, and choose
any one of them for the subsequent analysis.
To support this approach, we modi(cid:12)ed the Linux kernel
process execution and memory management code by adding
a special system call execve rand(). Besides the normal
arguments in the original execve(), the system call takes an
additional argument { a list of memory regions that should
not be used during the lifetime of the process. Before each
re-execution, the monitor collects the memory layouts from
the previous executions and pass the list to the kernel. All
memory regions on the Linux operating system are created
via the mmap() system call. The modi(cid:12)ed kernel consults
the list from execve rand() whenever mmap is called. The
modi(cid:12)ed kernel routine makes sure that such a request does
not violate the non-overlapping requirement. This is done by
relocating the mmap request to random, un-allocated region.
It seems that this approach is only applicable to programs
that uses no more than 1/3 of the available address space,
which is between 1 and 2 GB on a 32-bit system. Most
network service applications, however, have small memory
(cid:12)ngerprints (much less than the above limit). Thus, we con-
sider this approach practical.
After choosing a non-Case-IV crash, we can determine
partially which case it belongs to by examining the faulting
instruction.
If the faulting instruction f is a control (cid:13)ow
transfer instruction (e.g., ret), this must be a Case-III crash.
Otherwise, it must be a Case-I or Case-II crash. In a Case-
I crash, the faulting instruction must have used an invalid
address computed from the malicious input. However, there
may be two sub-cases in a Case-II crash: (a) The faulting
instruction causes the crash because it accesses an invalid
address computed from the malicious network input, and (b)
the faulting instruction uses corrupted data as an address.
For the sake of presentation, we call them as Case-II(a) and
Case-II(b), respectively.
In a Case-I or Case-II(a) crash, we can already identify
how the faulting instruction causes the crash with the ma-