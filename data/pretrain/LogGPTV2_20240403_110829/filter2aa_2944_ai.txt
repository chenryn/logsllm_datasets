you need to support international usernames or email addresses as usernames.
  public String createSpace(Request request, Response response)
      throws SQLException {
    var json = new JSONObject(request.body());
    var spaceName = json.getString("name");
    if (spaceName.length() > 255) {               
      throw new IllegalArgumentException("space name too long");
    }
    var owner = json.getString("owner");
    if (!owner.matches("[a-zA-Z][a-zA-Z0-9]{1,29}")) {                  
      throw new IllegalArgumentException("invalid username: " + owner);
    }
    ..
  }
Regular expressions are a useful tool for input validation, because they can succinctly
express complex constraints on the input. In this case, the regular expression ensures
that the username consists only of alphanumeric characters, doesn’t start with a num-
ber, and is between 2 and 30 characters in length. Although powerful, regular expres-
sions can themselves be a source of attack. Some regular expression implementations
can be made to consume large amounts of CPU time when processing certain inputs,
1 You may hear the older terms whitelist and blacklist used for these concepts, but these words can have negative
connotations and should be avoided. See https://www.ncsc.gov.uk/blog-post/terminology-its-not-black-and-
white for a discussion.
Listing 2.8
Validating inputs
Check that the space 
name is not too long.
Here we use a regular expression to
ensure the username is valid.
51
Input validation
leading to an attack known as a regular expression denial of service (ReDoS) attack (see
sidebar).
If you compile and run this new version of the API, you’ll find that you still get a 500
error, but at least you are not sending invalid requests to the database anymore. To
communicate a more descriptive error back to the user, you can install a Spark excep-
tion handler in your Main class, as shown in listing 2.9. Go back to the Main.java file in
your editor and navigate to the end of the main method. Spark exception handlers
are registered by calling the Spark.exception() method, which we have already stati-
cally imported. The method takes two arguments: the exception class to handle, and
then a handler function that will take the exception, the request, and the response
objects. The handler function can then use the response object to produce an appropri-
ate error message. In this case, you will catch IllegalArgumentException thrown by
our validation code, and JSONException thrown by the JSON parser when given incor-
rect input. In both cases, you can use a helper method to return a formatted 400 Bad
Request error to the user. You can also return a 404 Not Found result when a user tries
to access a space that doesn’t exist by catching Dalesbred’s EmptyResultException.
import org.dalesbred.result.EmptyResultException;    
import spark.*;                                      
public class Main {
ReDoS Attacks
A regular expression denial of service (or ReDoS) attack occurs when a regular expres-
sion can be forced to take a very long time to match a carefully chosen input string.
This can happen if the regular expression implementation can be forced to back-track
many times to consider different possible ways the expression might match.
As an example, the regular expression ^(a|aa)+$ can match a long string of a char-
acters using a repetition of either of the two branches. Given the input string
“aaaaaaaaaaaaab” it might first try matching a long sequence of single a characters,
then when that fails (when it sees the b at the end) it will try matching a sequence of
single a characters followed by a double-a (aa) sequence, then two double-a
sequences, then three, and so on. After it has tried all those it might try interleaving
single-a and double-a sequences, and so on. There are a lot of ways to match this
input, and so the pattern matcher may take a very long time before it gives up. Some
regular expression implementations are smart enough to avoid these problems, but
many popular programming languages (including Java) are not.a Design your regular
expressions so that there is always only a single way to match any input. In any
repeated part of the pattern, each input string should only match one of the alterna-
tives. If you’re not sure, prefer using simpler string operations instead.
a
Java 11 appears to be less susceptible to these attacks than earlier versions.
Listing 2.9
Handling exceptions
Add required 
imports.
52
CHAPTER 2
Secure API development
  public static void main(String... args) throws Exception {
    ..
    exception(IllegalArgumentException.class,       
        Main::badRequest);
    exception(JSONException.class,   
        Main::badRequest);
    exception(EmptyResultException.class,                  
        (e, request, response) -> response.status(404));   
  }
  private static void badRequest(Exception ex,
      Request request, Response response) {
    response.status(400);
    response.body("{\"error\": \"" + ex + "\"}");
  }
  ..
}
Now the user gets an appropriate error if they supply invalid input:
$ curl -d '{"name":"test", "owner":"a really long username 
➥ that is more than 30 characters long"}'  
➥ http://localhost:4567/spaces -i 
HTTP/1.1 400 Bad Request
Date: Fri, 01 Feb 2019 15:21:16 GMT
Content-Type: text/html;charset=utf-8
Transfer-Encoding: chunked
Server: Jetty(9.4.8.v20171121)
{"error": "java.lang.IllegalArgumentException: invalid username: a really 
long username that is more than 30 characters long"}
Pop quiz
3
Given the following code for processing binary data received from a user (as a
java.nio.ByteBuffer):
  int msgLen = buf.getInt();
  byte[] msg = new byte[msgLen];
  buf.get(msg);
and recalling from the start of section 2.5 that Java is a memory-safe language,
what is the main vulnerability an attacker could exploit in this code?
a
Passing a negative message length
b
Passing a very large message length
c
Passing an invalid value for the message length
d
Passing a message length that is longer than the buffer size
e
Passing a message length that is shorter than the buffer size
The answer is at the end of the chapter.
Install an exception 
handler to signal invalid 
inputs to the caller as 
HTTP 400 errors.
Also handle
exceptions
from the
JSON parser.
Return 404 
Not Found for 
Dalesbred empty 
result exceptions.
53
Producing safe output
2.6
Producing safe output
In addition to validating all inputs, an API should also take care to ensure that the out-
puts it produces are well-formed and cannot be abused. Unfortunately, the code
you’ve written so far does not take care of these details. Let’s have a look again at the
output you just produced:
HTTP/1.1 400 Bad Request
Date: Fri, 01 Feb 2019 15:21:16 GMT
Content-Type: text/html;charset=utf-8
Transfer-Encoding: chunked
Server: Jetty(9.4.8.v20171121)
{"error": "java.lang.IllegalArgumentException: invalid username: a really 
long username that is more than 30 characters long"}
There are three separate problems with this output as it stands:
1
It includes details of the exact Java exception that was thrown. Although not a
vulnerability by itself, these kinds of details in outputs help a potential attacker
to learn what technologies are being used to power an API. The headers are
also leaking the version of the Jetty webserver that is being used by Spark under
the hood. With these details the attacker can try and find known vulnerabilities
to exploit. Of course, if there are vulnerabilities then they may find them any-
way, but you’ve made their job a lot easier by giving away these details. Default
error pages often leak not just class names, but full stack traces and other
debugging information.
2
It echoes back the erroneous input that the user supplied in the response and
doesn’t do a good job of escaping it. When the API client might be a web
browser, this can result in a vulnerability known as reflected cross-site scripting
(XSS). You’ll see how an attacker can exploit this in section 2.6.1.
3
The Content-Type header in the response is set to text/html rather than the
expected application/json. Combined with the previous issue, this increases
the chance that an XSS attack could be pulled off against a web browser client.
You can fix the information leaks in point 1 by simply removing these fields from the
response. In Spark, it’s unfortunately rather difficult to remove the Server header com-
pletely, but you can set it to an empty string in a filter to remove the information leak:
    afterAfter((request, response) ->
          response.header("Server", ""));
You can remove the leak of the exception class details by changing the exception han-
dler to only return the error message not the full class. Change the badRequest
method you added earlier to only return the detail message from the exception.
  private static void badRequest(Exception ex,
      Request request, Response response) {
54
CHAPTER 2
Secure API development
    response.status(400);
    response.body("{\"error\": \"" + ex.getMessage() + "\"}");
  }
2.6.1
Exploiting XSS Attacks
To understand the XSS attack, let’s try to exploit it. Before you can do so, you may
need to add a special header to your response to turn off built-in protections in some
browsers that will detect and prevent reflected XSS attacks. This protection used to be
widely implemented in browsers but has recently been removed from Chrome and
Microsoft Edge.2 If you’re using a browser that still implements it, this protection
makes it harder to pull off this specific attack, so you’ll disable it by adding the follow-
ing header filter to your Main class (an afterAfter filter in Spark runs after all other
Cross-Site Scripting
Cross-site scripting, or XSS, is a common vulnerability affecting web applications, in
which an attacker can cause a script to execute in the context of another site. In a
persistent XSS, the script is stored in data on the server and then executed whenever
a user accesses that data through the web application. A reflected XSS occurs when
a maliciously crafted input to a request causes the script to be included (reflected)
in the response to that request. Reflected XSS is slightly harder to exploit because a
victim has to be tricked into visiting a website under the attacker’s control to trigger
the attack. A third type of XSS, known as DOM-based XSS, attacks JavaScript code
that dynamically creates HTML in the browser.
These can be devastating to the security of a web application, allowing an attacker
to potentially steal session cookies and other credentials, and to read and alter data
in that session. To appreciate why XSS is such a risk, you need to understand that
the security model of web browsers is based on the same-origin policy (SOP). Scripts
executing within the same origin (or same site) as a web page are, by default, able
to read cookies set by that website, examine HTML elements created by that site,
make network requests to that site, and so on, although scripts from other origins
are blocked from doing those things. A successful XSS allows an attacker to execute
their script as if it came from the target origin, so the malicious script gets to do all
the same things that the genuine scripts from that origin can do. If I can successfully
exploit an XSS vulnerability on facebook.com, for example, my script could potentially
read and alter your Facebook posts or steal your private messages.
Although XSS is primarily a vulnerability in web applications, in the age of single-page
apps (SPAs) it’s common for web browser clients to talk directly to an API. For this
reason, it’s essential that an API take basic precautions to avoid producing output
that might be interpreted as a script when processed by a web browser.
2 See https://scotthelme.co.uk/edge-to-remove-xss-auditor/ for a discussion of the implications of Microsoft’s
announcement. Firefox never implemented the protections in the first place, so this protection will soon be
gone from most major browsers. At the time of writing, Safari was the only browser I found that blocked the
attack by default.
55
Producing safe output
filters, including exception handlers). Open the Main.java file in your editor and add
the following lines to the end of the main method:
    afterAfter((request, response) -> {
      response.header("X-XSS-Protection", "0");
    });
The X-XSS-Protection header is usually used to ensure browser protections are turned
on, but in this case, you’ll turn them off temporarily to allow the bug to be exploited. 
NOTE
The XSS protections in browsers have been found to cause security
vulnerabilities of their own in some cases. The OWASP project now recom-
mends always disabling the filter with the X-XSS-Protection: 0 header as
shown previously.
With that done, you can create a malicious HTML file that exploits the bug. Open your
text editor and create a file called xss.html and copy the contents of listing 2.10 into it.
Save the file and double-click on it or otherwise open it in your web browser. The file
includes a HTML form with the enctype attribute set to text/plain. This instructs the
web browser to format the fields in the form as plain text field=value pairs, which you
are exploiting to make the output look like valid JSON. You should also include a small
piece of JavaScript to auto-submit the form as soon as the page loads.
If all goes as expected, you should get a pop-up in your browser with the “XSS” message.
So, what happened? The sequence of events is shown in figure 2.8, and is as follows:
1
When the form is submitted, the browser sends a POST request to http:/ /local-
host:4567/spaces with a Content-Type header of text/plain and the hidden
form field as the value. When the browser submits the form, it takes each form
element and submits them as name=value pairs. The &lt;, &gt; and &apos;
HTML entities are replaced with the literal values , and ' respectively.
Listing 2.10
Exploiting a reflected XSS
The form is configured to POST 
with Content-Type text/plain.
You carefully craft the form 
input to be valid JSON with a 
script in the “owner” field.
Once the page loads, you 
automatically submit the 
form using JavaScript.
56
CHAPTER 2
Secure API development
2
The name of your hidden input field is '{"x":"', although the value is your
long malicious script. When the two are put together the API will see the follow-
ing form input:
{"x":"=","name":"x","owner":""}
3
The API sees a valid JSON input and ignores the extra “x” field (which you only
added to cleverly hide the equals sign that the browser inserted). But the API
rejects the username as invalid, echoing it back in the response:
{"error": "java.lang.IllegalArgumentException: invalid username: 
"}
4
Because your error response was served with the default Content-Type of
text/html, the browser happily interprets the response as HTML and executes
the script, resulting in the XSS popup.
Submit
1. Hidden form ﬁelds
are carefully crafted
in the HTML page.
{"x":"=","name
":"x","owner":
""}
Content-Type: text/plain
2. The form payload
ends up looking like
valid JSON.
Web browser
Natter API
Web browser
Natter API
{“x”:”
“,”name”:”x”,...
XSS!
0 0 0
0 0 0
{"error":
"...:
"}
Content-Type: text/html
3. The Natter API receives
the malicious request . . .
. . . and reﬂects the invalid
input back to the web
browser as HTML.
4. The browser executes the embedded
script, resulting in a popup window.
Figure 2.8
A reflected cross-site scripting (XSS) attack against your API can occur when an attacker 
gets a web browser client to submit a form with carefully crafted input fields. When submitted, the 
form looks like valid JSON to the API, which parses it but then produces an error message. Because 
the response is incorrectly returned with a HTML content-type, the malicious script that the attacker 
provided is executed by the web browser client.
57
Producing safe output
Developers sometimes assume that if they produce valid JSON output then XSS is not
a threat to a REST API. In this case, the API both consumed and produced valid JSON
and yet it was possible for an attacker to exploit an XSS vulnerability anyway.
2.6.2
Preventing XSS
So, how do you fix this? There are several steps that can be taken to avoid your API
being used to launch XSS attacks against web browser clients:
 Be strict in what you accept. If your API consumes JSON input, then require
that all requests include a Content-Type header set to application/json. This
prevents the form submission tricks that you used in this example, as a HTML
form cannot submit application/json content.
 Ensure all outputs are well-formed using a proper JSON library rather than by
concatenating strings.
 Produce correct Content-Type headers on all your API’s responses, and never
assume the defaults are sensible. Check error responses in particular, as these
are often configured to produce HTML by default. 
 If you parse the Accept header to decide what kind of output to produce, never
simply copy the value of that header into the response. Always explicitly specify
the Content-Type that your API has produced.
Additionally, there are some standard security headers that you can add to all API
responses to add additional protection for web browser clients (see table 2.1).
Table 2.1
Useful security headers
Security header
Description
Comments
X-XSS-Protection
Tells the browser 
whether to block/ignore 
suspected XSS attacks.
The current guidance is to set to “0” on API 
responses to completely disable these protections 
due to security issues they can introduce.
X-Content-Type-
Options
Set to nosniff to pre-
vent the browser guess-
ing the correct Content-
Type.
Without this header, the browser may ignore your 
Content-Type header and guess (sniff) what the 
content really is. This can cause JSON output to be 
interpreted as HTML or JavaScript, so always add 
this header.
X-Frame-Options
Set to DENY to prevent 
your API responses being 
loaded in a frame or 