all calls to alloca() allocate a multiple of our minimum
object size and insert a library call after an alloca() to
update the labelling to include this newly allocated area.
The second issue is due to longjmp(), which is a
function that will jump to the last place in the code where
setjmp() was executed, resetting the stack pointer and
other registers to the value they held at the time of the
setjmp() call. These changes in stack pointer need to be
tracked by FreeSentry to be able to invalidate the stack
frames that have been freed due to the longjmp() call.
To facilitate this, we intercept calls to this function and
invalidate each stack frame separately by walking over
the saved frame pointer until we reach the frame we’re
returning to. This ensures that any pointers that become
stale due to the longjmp() are properly invalidated.
While FreeSentry supports protecting against dan-
gling pointers to stack-allocated variables, their occur-
rence are rare. As such, we assume that
the typical
1
2
3
4
6
use case for the mitigation will not include the stack
protection: the added performance impact of enabling
stack protection is too high relative to the rarity of this
type of vulnerability.
E. Pointer arithmetic and out-of-bounds pointers
If simple pointer arithmetic occurs increasing or de-
creasing the value of a single pointer, then we do not
consider this as a change in target object and thus no
tracking is added at compile time. This is due to the
fact that if no buffer overﬂows exist, we can assume
that an object will stay within the bounds of the object
it refers to. Out-of-bounds pointers can be created this
way, but they simply will be considered to still point
within bounds by our implementation. However these
pointers will not be invalidated when the object is freed
as we expect the values to be in bounds at the time of
deallocation. This provides for maximum compatibility
for FreeSentry: if a pointer is changed in unprotected
code and now points to a new object, which might be
immediately adjacent to the object being freed, then we
cannot invalidate it if it no longer points within the
bounds of the original object.
If pointer arithmetic occurs where a value is assigned
to a pointer based on arithmetic with a different pointer,
then an out-of-bounds value can still occur which can
cause incompatibility with our approach: if the out-of-
bounds pointer points to a new memory location that is
subsequently freed, then the pointer will be invalidated.
If new pointer arithmetic occurs on this out-of-bounds
pointer that would make it go in bounds again, then the
result will still be invalid. This type of incompatibility
only occurs with programs that generate illegal out-of-
bounds values (i.e., not compatible with the C standard)
and can be solved by combining our approach with
a bounds checker that supports illegal out-of-bounds
values. In Section V we discuss a workaround that we
used to run the benchmarks on a program that generates
these illegal out-of-bounds pointers.
Another possibility that can exist is pointer arithmetic
with freed values. For example, one piece of code that
FreeSentry would break when used naively is shown in
Listing 3:
Listing 3. C program with pointer arithmetic
i n t main ( ) {
char ∗a , ∗b ;
i n t d i f f e r e n c e ;
a = m a l l o c ( 1 0 0 ) ;
b = a + 8 ;
f r e e ( a ) ;
d i f f e r e n c e = b − a ;
5
6
7
8
}
Whether the code in Listing 3 is valid, is arguable:
it is valid in C to subtract two pointers that refer to the
same object. One might argue that if the object no longer
exists, then the pointers can no longer point to the same
object and thus one might expect undeﬁned behavior by
the compiler. However, even if the memory has been
reused, as long as the pointers are not dereferenced, then
no exploitable use-after-free vulnerability has occurred.
If our mitigation simply invalidated both pointers with-
out taking this possibility into account, some programs
might break (in fact, one of the benchmarks, perlbmk,
performs this exact operation). To achieve maximum
compatibility, our mitigation will invalidate pointers by
making them point to a reserved area of memory. In
our implementation, we assume that the top 1GB of
memory has permissions that our user-mode program
cannot access. This is the case for both 32-bit and 64-bit
versions of both Linux and Windows, where the top areas
of memory in a user-mode process are reserved for the
kernel. Any access to the kernel address space, will result
in a segmentation fault. This allows our implementation
to invalidate a pointer by simply setting the ﬁrst two bits
to one (on Windows systems, just setting the ﬁrst bit to
one is enough as the top 2GB of memory is reserved).
This allows this type of arithmetic to keep working1.
F. Pointers copied as a different type
One limitation in our approach is that it does not track
pointers that are not copied as pointers, i.e., if a pointer
is copied as a different type, this will not be tracked
by our approach. This can occur for example, when a
programmer calls the memcpy() function to copy one
area of memory to another. The memory is copied as
a void type and not through pointer assignment resulting
in the copy not being tracked by our mitigation. While
our approach cannot automatically detect the copying, it
does allow for a programmer to register the pointers in
the new memory area by manually calling the regptr()
function with the address of the newly copied pointer.
G. Unprotected code
Unmodiﬁed code that is linked to code that is pro-
tected by our mitigation will work without issues. Any
pointer assignments and propagation in this code will not
be tracked by our approach and any dangling pointers
that result from this code will not be detected. However,
calls to memory allocation functions will still be inter-
cepted, allowing the correct labelling of newly allocated
or reallocated memory and the correct invalidation of
tracked pointers. We provide the ability for a programmer
to manually opt out of tracking by setting a function
attribute. This allows for ﬂexibility when deploying the
mitigation, allowing a programmer to improve perfor-
mance by making sure particular often-called functions
are safe. We discuss the impact of selective opting out
by a programmer in Section V-A2.
H. C++
Our prototype implementation, discussed in Section
IV is aimed at C code due to the CIL framework that
we use to transform the code. However, the principles
hold the same for C++ as they do for C. Pointers
operate in much the same way in C++ as they do in
C, so tracking occurs in a similar manner. The smart
pointers provided by C++ in the form of unique ptrs,
auto ptrs, shared ptrs and weak ptrs are built on top
of regular pointers using templates, which means they
would all be trackable in the manner discussed in the
previous sections. However, given the properties that
these smart pointers provide, tracking could be simpliﬁed
by eliminating some of the checks for conditions that
cannot occur on a particular pointer subtype. Dynamic
memory handling is similar to C: when new or new[] is
called, the memory is labeled by FreeSentry and when
delete or delete[] is called, the pointers to the memory
are invalidated.
1On Linux this introduces a minor compatibility issue, if the point-
ers used in the arithmetic cross the memory boundary where these
bits are ﬂipped: i.e. having a pointer above and below 0x40000000
and a pointer above and below 0x80000000. However this is unlikely
to happen in practice: it requires a dynamic memory allocation that
crosses this boundary, having one pointer that is set above and one
that is set below the boundary and then requires the application to
free that memory and subsequently perform a subtraction of those
two pointers
IV. PROTOTYPE IMPLEMENTATION
FreeSentry is implemented using CIL [5]. Whenever
a pointer is set to an object, the pointer is registered by
calling a library function regptr(), which creates a new
pointer registration information, which stores the address
of the pointer and the label of the object that is associated
with it and stores pointers to that information in both in
7
the pointer and object lookup tables. When the program
starts up, we allocate these various memory regions by
using a constructor function in the library that is linked
by the mitigation.
Our default region size is 32 bytes in our prototype
implementation, meaning that all objects must be a
multiple of 32 bytes in size. To achieve this, we intercept
all calls to the memory allocation functions: malloc(),
calloc() and realloc(). We then increase the size of the
allocated object to be a multiple of 32 bytes. We then
ensure that
these functions perform the labelling for
the allocated objects to ensure that we can track the
object sizes. We also made a minor modiﬁcation to the
memory allocation library to ensure that all objects are
aligned on a 32-byte boundary, mostly to simplify our
implementation. If stack protection is enabled, then we
also label the stack frames at the start of the function
and use gcc options to ensure that stack frames start at a
32-byte boundary and are a multiple of 32 bytes in size.
A. Optimizations
There are two major optimizations performed by our
approach that both rely on call graph analysis that we
perform on the program. We examine which functions
a particular function calls and to go through that call
chain until we either hit a leaf function or a library
call. If along the call chain, any function calls the free()
function (or any variant function that has the potential to
free memory, such as realloc(), library functions that free
pointers passed into it, etc), we consider that function
a leaf function that calls free(). We propagate the free-
calls through the functions in the program, allowing us
to know if any function calls free() at any time. To be
able to support this modelling, we provide models for the
functions in typical system libraries such as libc, libm and
openssl: noting whether they potentially free any memory
they did not themselves allocate. When we encounter a
function that doesn’t exist in the program, nor in our
model (i.e., a library call that we do not recognize), we
err on the side of safety and assume that this function
calls free() and propagate it accordingly. Note that the
model (which simply indicates if a library function calls
free or not) is not required for FreeSentry to work, if
no model is available then we assume that all unknown
functions call free and it simply reduces the potential
for optimization. This also means that a developer is not
required to ever update the default models as they already
provide all the basic information for the default system
libraries. If new calls are added without an updated
model, then they are simply assumed to call free and
functions that call them are not optimized.
The ﬁrst optimization that relies on this approach
simply removes pointer tracking for a local variable if the
function does not at any point call free and does not take
the address of that local variable. We still track changes
to pointers in global and dynamic memory, including
copies of local variables to this memory, as well as
dereferences of local variables that result in changes
to pointers. This provides for signiﬁcant optimizations
because CIL introduces many temporary variables when
transforming programs, which simply hold intermediate
values for complex calculations. This also allows a
further optimization for the stack-based approach: if no
addresses of local variables are taken, then a function
cannot return a pointer to it’s local stack frame, allowing
us to remove the labelling and invalidating calls for that
function.
A second optimization is to introduce loop optimiza-
tion. If no function calls that free memory are performed
in a loop and there are no unexpected exits out of the
loop (i.e., no return statements), then the registration
for simple pointer assignments (i.e., where there is no
arithmetic or dereferencing on the left hand side value)
is moved outside of the loop. Statements that use this
pointer value will still be tracked, but since the pointer
is overwritten every loop iteration, it is only tracked when
the loop ends since it can’t become stale in the loop.
Both these approaches are safe, because there can be
no releasing of memory due to a lack of function calls
that call free() in the respective optimized scopes.
A few other optimizations include the fact pointers
that are set to point to global memory are not tracked
because this memory can never be freed2. We also
do not update pointer information when simple pointer
arithmetic occurs that simply changes the value of the
base pointer (e.g., p++;) , given that we assume that
memory stays within bounds as discussed in Section
III-E.
V. EVALUATION
In this section we evaluate how FreeSentry performs
in terms of performance overhead. We also provide
a security evaluation and discussion, showing that the
mitigation is able to prevent exploitation of real-world
2A rare vulnerability can occur when a module is unloaded, as
evidenced by CVE-2010-0425[6]
8
Table I.
SECURITY EVALUATION AGAINST REAL WORLD VULNERABILITIES
CVE id
CVE-2003-0015
CVE-2004-0416
CVE-2007-1521
CVE-2007-1522
CVE-2007-1711
Affected Programs
CVS <= 1.1.14
CVS 1.12.x-1.12.8 and 1.11.x-1.11.16
PHP before 4.4.7 and 5.x before 5.2.2
PHP 5.2.0 and 5.2.1
PHP 4.4.5 and 4.4.6
Result
Protected
Protected
Protected
Protected
Protected
B. Security Evaluation
1) Perlbmk vulnerability: Perlbmk is one of the pro-
grams that makes up the SPEC CPU2000 benchmark
suite. It is a stripped down version of the Perl interpreter
that removes many operating system speciﬁc functions
and aims to create a version of Perl aimed speciﬁcally
at CPU benchmarking.
In the function yy lex() in the ﬁle toke.c, the program
implements lexical analysis for Perl programs. While
running the benchmark’s reference load, the program
exhibits a use-after-free vulnerability.
Listing 4. Perlbmk use-after-free vulnerability
d = s ;
i f
( P L l e x s t a t e == LEX NORMAL)
s = s k i p s p a c e ( s ) ;
i f
( P L l e x s t a t e == LEX NORMAL
&& isSPACE (∗ d ) ) {
2576
2578
2618
The relevant code snippets are duplicated in Listing
4. At line 2576, d aliases pointer s. Then at line 2578,
the function skipspace() is called. This function will,
depending on the program state, end up calling realloc()
on the memory pointed to by s to increase the size to
allow for a larger line of text to be read into memory.
When the realloc() in question is called using the refer-
ence load provided by the SPEC CPU2000 benchmark,
the memory will be allocated at a different
location
and the data will be copied. When this happens, all
references to the memory that s refers to are invalidated
by our mitigation. This includes the pointer d. When d is
dereferenced at line 2617, the program crashes because
it refers to freed memory. To be able to measure the
performance overhead of perlbmk, we ﬁxed the program
using the least intrusive method by recording the value
of isSPACE(*d) in a variable at line 2577 and then using
this variable in the comparison at
line 2617. Fixing
this vulnerability resulted in no further crashes in the
program.
2) Real world vulnerabilities:
In this section we
evaluate our mitigation against vulnerabilities that were
found against real world applications. We selected the
vulnerabilities solely on the availability of public proof-
of-concept exploits (POCs). This limited our selection to
5 vulnerabilities.
The results of running these POCs against our mit-
igation are presented in Table I: a value of “protected”
means that the attempted use-after-free was prevented
and the program crashed trying to dereference an inval-
idated pointer (i.e. dereferencing a pointer to memory
above 3GB in our implementation). The programs oper-
ated normally when not running the exploit. The focus
in Table I is on double free vulnerabilities as these are
the vulnerabilities for which public exploits are available.
While many other use-after-free vulnerabilities have been
discovered in C programs, there are very few with public
exploits for open source C programs. For mitigations
that provide a safer memory allocator, a double free
vulnerability is the easiest type of vulnerability to detect:
simply mark a chunk as free and check if it is free before
performing a second free operation. However, for our
mitigation with its focus on pointer tracking, double free
vulnerabilities are the exact same thing as a use-after-free
vulnerability as they both result from a dangling pointer
reference. In the case of a double free, the dereference