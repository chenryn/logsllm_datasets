##### System information (version)
  * OpenCV => 3.4.1 (master seems to be same)
  * Operating System / Platform => cygwin 64 bit
  * Compiler => g++ (gcc 7.3.0)
##### Detailed description
In some (very rare) condition, "Error: Assertion failed" happens at:  
opencv/modules/core/src/types.cpp
Line 154 in da7e1cf
|  CV_Assert( abs(vecs[0].dot(vecs[1])) / (norm(vecs[0]) * norm(vecs[1])) (10, 2) <<
                        1357., 1337.,
                        1362., 1407.,
                        1367., 1474.,
                        1372., 1543.,
                        1375., 1625.,
                        1375., 1696.,
                        1377., 1734.,
                        1378., 1742.,
                        1382., 1801.,
                        1372., 1990.);
        cv::PCA pca_points(points, cv::Mat(), CV_PCA_DATA_AS_ROW, 2);
        cv::Point2d p1(564.45, 339.8819), p2, p3;
        p2 = p1 - 1999 * cv::Point2d(pca_points.eigenvectors.row(0));
        p3 = p2 - 1498.5295 * cv::Point2d(pca_points.eigenvectors.row(1));
        cv::RotatedRect(p1, p2, p3);
##### Plans
I have some plans:
  1. Multiple 2, 4 or some value to FLT_EPSILON
  2. Make another constructor using `Point2d` for `Point2f` (and `Vec2d` for `Vec2f` etc. inside)  
Note 1: If we use `DBL_EPSILON`, same problem may occur.  
Note 2: If we only have `Point2f` rectangle, we cannot avoid assertion.
  3. Calcurate the angle between two vectors and introduce another assersion.
I want to create PR for solving this issue. But I want some direction.