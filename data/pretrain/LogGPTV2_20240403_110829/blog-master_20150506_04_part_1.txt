## PostgreSQL 检查点性能影响及源码分析 - 4      
### 作者                       
digoal                        
### 日期                      
2015-05-06                          
### 标签                      
PostgreSQL , 检查点 , 性能影响 , full page write , FPW , 可靠性                                                      
----                      
## 背景        
数据库可靠性从何而来？          
数据库崩溃后如何恢复，从什么位置开始恢复？          
数据库检查点是什么？          
检查点要干些什么？          
为什么脏数据较多时，检查点会对性能有一定的影响？          
什么是full page write？          
相信这些问题是搞数据库的同学都想搞明白的。          
接下里的一系列文章，围绕检查点展开讲解，讲一讲检查点的原理，以及为什么脏数据较多是，它会对数据库产生一定的性能影响。            
## 正文        
这一篇主要谈一下和检查点相关的几个跟踪。  
1\. 锁等待次数和时间的跟踪。  
2\. 刷新缓存相关函数的时间跟踪。  
从这些跟踪结果来反映检查点对数据库性能的影响。  
先整理一下检查点相关的一些探针，如果不能满足跟踪的需求，可以再自定义添加：  
刷事务提交日志相关的探针结构，了解结构对我们计算时间很有帮助：  
CheckPointCLOG@src/backend/access/transam/clog.c  
```
  TRACE_POSTGRESQL_CLOG_CHECKPOINT_START(true);  
  TRACE_POSTGRESQL_CLOG_CHECKPOINT_DONE(true);  
```
刷子事务相关的探针：  
CheckPointSUBTRANS@src/backend/access/transam/subtrans.c  
```
  TRACE_POSTGRESQL_SUBTRANS_CHECKPOINT_START(true);  
  TRACE_POSTGRESQL_SUBTRANS_CHECKPOINT_DONE(true);  
```
刷多事务相关的探针：  
CheckPointMultiXact@src/backend/access/transam/multixact.c  
```
  TRACE_POSTGRESQL_MULTIXACT_CHECKPOINT_START(true);  
  TRACE_POSTGRESQL_MULTIXACT_CHECKPOINT_DONE(true);  
```
刷Buffer相关的探针：  
CheckPointBuffers(flags)@src/backend/storage/buffer/bufmgr.c  
```
  TRACE_POSTGRESQL_BUFFER_CHECKPOINT_START(flags);  // buffer检查点开始  
  {  -- 遍历BUFFER区，将头信息need checkpoint的块刷入磁盘  
  BufferSync(flags)                //  与第一个trace之间包含遍历整个buffer区,增加脏块头信息need checkpoint  
    TRACE_POSTGRESQL_BUFFER_SYNC_START(NBuffers, num_to_write);  // 开始sync buffer  
    {  --  sync单个buffer  
    SyncOneBuffer  
      FlushBuffer  
        TRACE_POSTGRESQL_BUFFER_FLUSH_START(buf->tag.forkNum,    // 单个buffer块, flush开始  
          buf->tag.blockNum,  
          reln->smgr_rnode.node.spcNode,  
          reln->smgr_rnode.node.dbNode,  
          reln->smgr_rnode.node.relNode);  
        TRACE_POSTGRESQL_BUFFER_FLUSH_DONE(buf->tag.forkNum,    // 单个buffer块, flush结束  
          buf->tag.blockNum,  
          reln->smgr_rnode.node.spcNode,  
          reln->smgr_rnode.node.dbNode,  
          reln->smgr_rnode.node.relNode);  
    }  
    TRACE_POSTGRESQL_BUFFER_SYNC_WRITTEN(buf_id);  // 单个buffer块, writeten结束  
    } //  SYNC_START和SYNC_WRITTEN之间是单个buffer的writter时间  
    // BufferSync末端，缓存区的need checkpointer的脏块全部written完毕。  
    TRACE_POSTGRESQL_BUFFER_SYNC_DONE(NBuffers, num_written, num_to_write);   
  }  // BufferSync结束  
  TRACE_POSTGRESQL_BUFFER_CHECKPOINT_SYNC_START();  
  //  调用smgrsync(); // 前面的write操作持久化到磁盘。  
  TRACE_POSTGRESQL_BUFFER_CHECKPOINT_DONE();  
```
需要用到的probe name如下：  
```
        probe checkpoint__start(int);  
        probe clog__checkpoint__start(bool);  
        probe clog__checkpoint__done(bool);  
        probe subtrans__checkpoint__start(bool);  
        probe subtrans__checkpoint__done(bool);  
        probe multixact__checkpoint__start(bool);  
        probe multixact__checkpoint__done(bool);  
        probe buffer__checkpoint__start(int);  
        probe buffer__sync__start(int, int);  
        probe buffer__flush__start(ForkNumber, BlockNumber, Oid, Oid, Oid);  
        probe buffer__flush__done(ForkNumber, BlockNumber, Oid, Oid, Oid);  
        probe buffer__sync__written(int);  
        probe buffer__sync__done(int, int, int);  
        probe buffer__checkpoint__sync__start();  
        probe buffer__checkpoint__done();  
        probe checkpoint__done(int, int, int, int, int);  
```
含义请参考  
http://www.postgresql.org/docs/devel/static/dynamic-trace.html  
src/backend/utils/probes.d  
src/backend/utils/probes.h  
使用stap统计他们开始和结束的时间区间，对于sync和flush单个buffer统计耗时柱状分布。  
```
stap -v 11111 -e '  
global var, stat_var, tmp;  
probe process("/opt/pgsql/bin/postgres").mark("checkpoint__start") {  
  /* clear data */  
  delete var  
  delete stat_var  
  delete tmp  
  var[pid(),0] = gettimeofday_us()  
  printf("checkpoint__start pid:%d, us_epoch: %d\n", pid(), var[pid(),0])  
}  
probe process("/opt/pgsql/bin/postgres").mark("clog__checkpoint__start") {  
  var[pid(),1] = gettimeofday_us()  
}  
probe process("/opt/pgsql/bin/postgres").mark("clog__checkpoint__done") {  
  var[pid(),2] = gettimeofday_us()  
  printf("clog__checkpoint__done us: %d\n", var[pid(),2]-var[pid(),1])  
}  
probe process("/opt/pgsql/bin/postgres").mark("subtrans__checkpoint__start") {  
  var[pid(),3] = gettimeofday_us()  
}  
probe process("/opt/pgsql/bin/postgres").mark("subtrans__checkpoint__done") {  
  var[pid(),4] = gettimeofday_us()  
  printf("subtrans__checkpoint__done us: %d\n", var[pid(),4]-var[pid(),3])  
}  
probe process("/opt/pgsql/bin/postgres").mark("multixact__checkpoint__start") {  
  var[pid(),5] = gettimeofday_us()  
}  
probe process("/opt/pgsql/bin/postgres").mark("multixact__checkpoint__done") {  
  var[pid(),6] = gettimeofday_us()  
  printf("multixact__checkpoint__done us: %d\n", var[pid(),6]-var[pid(),5])  
}  
probe process("/opt/pgsql/bin/postgres").mark("buffer__checkpoint__start") {  
  var[pid(),7] = gettimeofday_us()  
  tmp[pid(),1] = $flags     /* bitwise flags used to distinguish different checkpoint types */  
  printf("buffer__checkpoint__start flags: %d\n", tmp[pid(),1])  
}  
probe process("/opt/pgsql/bin/postgres").mark("buffer__sync__start") {  
  var[pid(),8] = gettimeofday_us()  
  tmp[pid(),2] = $NBuffers     /* number buffers */  
  tmp[pid(),3] = $num_to_write   /* dirty buffers */  
  printf("buffer__sync__start num_buffers: %d, dirty_buffers: %d\n", tmp[pid(),2], tmp[pid(),3])  
  printf("scan buffers, lock bufheader one-by-one, add need chkpoint flag for dirty buffer: total us %d \n", var[pid(),8] - var[pid(),7])  
}  
/* start loop scan buffers */  
probe process("/opt/pgsql/bin/postgres").mark("buffer__flush__start") {  
  var[pid(),9] = gettimeofday_us()  
}  
probe process("/opt/pgsql/bin/postgres").mark("buffer__flush__done") {  
  var[pid(),10] = gettimeofday_us()  
  stat_var[pid(),1]  0 ) {  
    printf("buffer__flush us min: %d, max: %d, avg: %d, sum: %d, count: %d\n", @min(stat_var[pid(),1]), @max(stat_var[pid(),1]), @avg(stat_var[pid(),1]), @sum(stat_var[pid(),1]), @count(stat_var[pid(),1]) )  
    print(@hist_log(stat_var[pid(),1]))  
  }  
  if ( @count(stat_var[pid(),2]) > 0 ) {  
    printf("buffer__sync us min: %d, max: %d, avg: %d, sum: %d, count: %d\n", @min(stat_var[pid(),2]), @max(stat_var[pid(),2]), @avg(stat_var[pid(),2]), @sum(stat_var[pid(),2]), @count(stat_var[pid(),2]) )  
    print(@hist_log(stat_var[pid(),2]))  
  }  
  printf("buffer__sync__done num_buffers: %d, actual_written_buffers: %d, dirty_buffers: %d\n", tmp[pid(),7], tmp[pid(),8], tmp[pid(),9])  
  printf("buffer__sync__done us: %d\n", var[pid(),12] - var[pid(),8])  
}  
probe process("/opt/pgsql/bin/postgres").mark("buffer__checkpoint__sync__start") {  
  var[pid(),13] = gettimeofday_us()  
}  
probe process("/opt/pgsql/bin/postgres").mark("buffer__checkpoint__done") {  
  var[pid(),14] = gettimeofday_us()  
  printf("buffer__checkpoint__done sync us: %d\n", var[pid(),14] - var[pid(),13])  
}  
probe process("/opt/pgsql/bin/postgres").mark("checkpoint__done") {  
  var[pid(),15] = gettimeofday_us()  
  printf("checkpoint__done pid:%d, us_epoch: %d\n", pid(), var[pid(),15])  
  printf("checkpoint__done us: %d\n", var[pid(),15] - var[pid(),0])  
  /* clear data */  
  delete var  
  delete stat_var  
  delete tmp  
}'  
```
执行开始：  
```