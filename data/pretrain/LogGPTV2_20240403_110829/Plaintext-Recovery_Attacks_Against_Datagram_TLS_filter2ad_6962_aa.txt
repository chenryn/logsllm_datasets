title:Plaintext-Recovery Attacks Against Datagram TLS
author:Kenneth G. Paterson and
Nadhem J. AlFardan
Plaintext-Recovery Attacks Against Datagram TLS
Nadhem J. AlFardan and Kenneth G. Paterson∗
Information Security Group
Royal Holloway, University of London, Egham, Surrey TW20 0EX, UK
{Nadhem.Alfardan.2009, kenny.paterson}@rhul.ac.uk
Abstract
The Datagram Transport Layer Security (DTLS) proto-
col provides conﬁdentiality and integrity of data exchanged
between a client and a server. We describe an efﬁcient and
full plaintext recovery attack against the OpenSSL imple-
mentation of DTLS, and a partial plaintext recovery attack
against the GnuTLS implementation of DTLS. The attack
against the OpenSSL implementation is a variant of Vaude-
nay’s padding oracle attack and exploits small timing differ-
ences arising during the cryptographic processing of DTLS
packets. It would have been prevented if the OpenSSL im-
plementation had been in accordance with the DTLS RFC.
In contrast, the GnuTLS implementation does follow the
DTLS RFC closely, but is still vulnerable to attack. The
attacks require new insights to overcome the lack of error
messages in DTLS and to amplify the timing differences. We
discuss the reasons why these implementations are insecure,
drawing lessons for secure protocol design and implemen-
tation in general.
Keywords
TLS, DTLS, CBC-mode encryption,
padding oracle, attack, timing, OpenSSL, GnuTLS.
1
Introduction
DTLS, OpenSSL and GnuTLS: The Datagram Trans-
port Layer Security (DTLS) protocol was ﬁrst introduced
at NDSS in 2004 [10]. Two years later, the Internet En-
gineering Task Force (IETF) assigned Request for Com-
ments (RFC) 4347 [11] to DTLS. The aim of DTLS is to
provide a datagram-compatible variant of TLSv1.1 [6] that
eliminates the dependency on the Transport Control Proto-
col (TCP). Since its introduction, there has been a growing
interest in the security services offered by DTLS. Leading
implementations of DTLS can be found in OpenSSL1 and
∗This author’s research supported by an EPSRC Leadership Fellow-
ship, EP/H005455/1.
1http://www.openssl.org
GnuTLS2. Both of these provide source toolkits that imple-
ment TLS and DTLS as well as being general purpose cryp-
tographic libraries that software developers can use. The
ﬁrst release of OpenSSL to implement DTLS was 0.9.8.
Since its release, DTLS has become a mainstream proto-
col in OpenSSL. There are also a number of commercial
products that have taken advantage of DTLS. For example,
DTLS is used to secure Virtual Private Networks (VPNs)3,4
and wireless trafﬁc5. Platforms such as Microsoft Windows,
Microsoft .NET and Linux can also make use of DTLS6.
In addition, the number of RFC documents that are be-
ing published on DTLS is increasing. Recent examples in-
clude RFC 5415 [1], RFC 5953 [8] and RFC 6012 [13]. A
new version of DTLS is currently under development in the
IETF to bring DTLS into line with TLSv1.2.
Padding oracle attacks: According to [11], the DTLS
protocol is based on TLSv1.1 and provides equivalent secu-
rity guarantees. In particular, then, one would expect imple-
mentations of DTLS to be resilient to attacks on TLS known
prior to the development of TLSv1.1, especially those at-
tacks explicitly mentioned in RFC 4346 [6], the speciﬁca-
tion for TLSv1.1.
One such example is the padding oracle attack intro-
duced by Vaudenay in [15] and applied to OpenSSL by
Canvel et al.
in [2]. This attack exploits the MAC-then-
Pad-then-Encrypt construction used by TLS and makes use
of subtle timing differences that may arise in the crypto-
graphic processing carried out during decryption, in order
to glean information about the correctness or otherwise of
the plaintext format underlying a target ciphertext. Speciﬁ-
cally, Canvel et al. used timing of encrypted TLS error mes-
sages in order to distinguish whether the padding occurring
2http://www.gnu.org/software/gnutls
3http://www.cisco.com/en/US/products/ps10884/
index.html
4http://campagnol.sourceforge.net
5http://www.cisco.com/en/US/docs/wireless/
controller/7.0MR1/configuration/guide/cgi_lwap.
html
6http://www.eldos.com/sbb/desc-ssl.php
at the end of the plaintext was correctly formatted accord-
ing to the TLS standard or not. Using Vaudenay’s ideas,
this padding oracle information can be leveraged to build a
full plaintext recovery attack. However, because TLS tears
down the connection in the event of any error arising dur-
ing cryptographic processing, and because all the messages
in the attack do provoke such errors, the attack can only
recover signiﬁcant amounts of plaintext if the same plain-
text bytes are repeated across many TLS connections at the
same location in the data stream.
OpenSSL quickly addressed the attack of [2] by modify-
ing the code to ﬁrstly make the error messages are identical
and secondly to ensure that the error messages would al-
ways appear on the network at the same time, an approach
we call uniform error reporting. These countermeasures
eventually appeared in TLSv1.1 as guidance for implemen-
tors a few years later. Since the initial work in this vein,
padding oracle attacks have been generalised in various
ways and applied to other network protocols such as IPsec
[4, 5] and application layer protocols such as ASP.NET
[12, 7], further highlighting the dangers of the MAC-then-
PAD-then-Encrypt cryptographic construction coupled with
non-uniform error reporting.
Our attack on DTLS: Given this history, and the fact that
the DTLS speciﬁcation is based on that of TLSv1.1, imple-
mentations of DTLS should be immune to padding oracle
attacks and their variants. Our paper shows that this is not
the case for either the OpenSSL or the GnuTLS implemen-
tations of DTLS.
We ﬁrst focus on OpenSSL, showing that there is a small
timing difference in OpenSSL’s processing of DTLS pack-
ets having valid and invalid padding ﬁelds: just like old ver-
sion of OpenSSL’s implementation of TLS, if the padding is
invalid, then the MAC is not checked, while if the padding
is valid, the MAC check is done. This results in a timing
difference for processing of packets with valid and invalid
padding that is on the order of a few tens of microseconds
(µs) on a modern processor.
However, one major difference between TLS and DTLS
is that DTLS provides no error messages when decryption
encounters an error. The detection of these error messages
is essential to the attacks of [2] on TLS. Thus it would ap-
pear that this timing difference cannot be used to build a
padding oracle. This may explain why the OpenSSL code
for DTLS has not been patched to remove the known timing
difference.
By bringing new techniques into play, we show that the
lack of DTLS error messages is not a serious impediment
to the attack – we are able to exploit the DTLS extension
for Heartbeat messages [14] to ensure that the timing differ-
ence shows up in the timing of Heartbeat response messages
rather than error messages. In fact, any upper layer protocol
which has messages that also provoke a response message
with a predictable delay can be used in place of Heartbeat
messages in our attack. We also introduce new techniques
which amplify the identiﬁed timing difference. In TLS, this
is easily done by using long messages, since TLS supports
messages up to roughly 214 bytes in size. But this is not pos-
sible in DTLS, since the maximum message size is limited
by the PMTU. To overcome this, we build trains of DTLS
packets which all either have valid or invalid padding and
hence which all contribute to an accumulated timing dif-
ference in the same way. These trains need to be carefully
injected into the network – fast enough so as to ensure each
packet arrives before the processing of the previous one has
completed, but not so fast that DTLS’s buffer for incom-
ing packets gets swamped. Thus the success of the attack
depends on delicate, µs-level timing of network events.
Another major difference between TLS and DTLS is
that, in TLS, any error arising during cryptographic pro-
cessing is treated as fatal, meaning that the TLS connec-
tion is discarded in the event of any error. TLS can af-
ford to do this because it is built on top of a reliable trans-
port protocol, TCP. DTLS, on the other hand, cannot af-
ford to do so, since its underlying transport protocol is UDP.
This means that DTLS does not discard connections in the
event of errors, but merely discards error-generating pack-
ets. So, in contrast to previous attacks on TLS, our attack on
OpenSSL’s DTLS implementation can efﬁciently recover as
much plaintext as the adversary desires, without having to
wait for the re-establishment of DTLS connections. Our
attack becomes even more efﬁcient in the situation where
DTLS’s anti-replay feature is disabled, which is an option
within the DTLS speciﬁcation.
Our attack on OpenSSL is easily prevented, by properly
implementing the countermeasures in the TLSv1.1 speci-
ﬁcation on which DTLS is based. We have informed the
OpenSSL development team about our attack. They have
supplied us with a potential ﬁx that we have tested and
found to be effective against the attack. We expect that the
ﬁx will be made public soon.
We then switch our focus to the GnuTLS implementa-
tion, and show that, even though it properly implements
the countermeasures in TLSv1.1, it is still vulnerable to
a partial plaintext recovery attack in its default conﬁgura-
tion. We show that a small timing channel is introduced
into the decryption process because a plaintext-dependent
sanity check is carried out at an early stage during decryp-
tion. This introduces a detectable timing difference that,
when combined with our new techniques, allows 4 or 5 bits
of plaintext to be recovered per ciphertext block. In princi-
ple, the attack could also be applied to the GnuTLS imple-
mentation of TLS (but then the timing difference would be
hard to amplify). We have informed the GnuTLS develop-
ment team about our ﬁnding and we are working with them
to identify the root cause of the timing difference.
Despite the availability of easy ﬁxes, we argue that the
attacks are still interesting and provide valuable lessons for
protocol designers and implementors:
• To our knowledge, our attacks are the ﬁrst of their kind
against any implementations of DTLS. Our OpenSSL
attack is also the ﬁrst plaintext-recovering attack
against a protocol implemented by OpenSSL since the
work of Canvel et al. [2].
• Our attacks exploit the fact that DTLS has to be error-
tolerant, but we had to ﬁnd a novel means to circum-
vent the resulting lack of error messages.
• The DTLS speciﬁcation is rather brief and refers to
the TLSv1.1 speciﬁcation for many details, particu-
larly those relating to how packets are encrypted and
decrypted. This then requires an implementor to cross-
refer to other standards during implementation, which
may lead to software that does not implement the
known countermeasures.
• Our attack on the GnuTLS implementation of DTLS
and TLS shows that, even if all the known counter-
measures are carefully implemented, DTLS and TLS
implementations may still be vulnerable to attack via
subtle timing side channels.
We expand on these themes later in the paper.
Paper organisation: Section 2 provides further back-
ground on DTLS, TLS and padding oracle attacks, as prepa-
ration for the presentation of our basic attack against the
OpenSSL implementation in Section 3. Then Section 4 dis-
cusses a number of implementation issues for this attack
and discusses reﬁnements of it. Section 5 presents our ex-
perimental results demonstrating efﬁcient and reliable re-
covery of full DTLS plaintexts in the OpenSSL case. Sec-
tion 6 brieﬂy discusses how similar attacks can recover par-
tial plaintexts in the GnuTLS case. Section 7 discusses the
wider implications of our work for secure network protocol
design.
2 Further Background
2.1 Encryption in DTLS
A DTLS client initiates a handshake protocol with a
server to agree on a number of parameters such as the cipher
suite and the keys to use for a symmetric encryption algo-
rithm and a message authentication code (MAC). After the
handshake is complete, DTLS deploys a MAC-then-PAD-
then-Encrypt construction, with CBC being a commonly
used mode of operation. We will assume CBC-mode en-
cryption is in use for the remainder of the paper.
When sending a DTLS packet, the sender ﬁrst calculates
a MAC over the DTLS payload and other parameters in-
cluding a sequence number [11]. The size of the MAC
output depends on the hash function used (e.g. 160 bits in
the case of HMAC-SHA-1). The MAC is appended to the
DTLS message. The sender then appends padding so that
the payload length is a multiple of b bytes, where b is the
block-size of the selected block cipher (so b = 8 for 3DES
and b = 16 for AES). As with TLS, the padding consists of
p + 1 copies of some byte value p, where 0 ≤ p ≤ 255.
In particular, at least 1 byte of padding must always be
added. So examples of valid padding ﬁelds are: “0x00”,
“0x01, 0x01” and “0x02, 0x02, 0x02”. The padding may
extend over multiple blocks, and receivers must support the
removal of such extended padding. The concatenation of
DTLS message, MAC and padding is then encrypted using
CBC-mode of the selected block cipher, using an explicit
IV. Thus, the ciphertext blocks are formed as:
Cj = Ek(Pj ⊕ Cj−1)
where Pi are the plaintext blocks, C0 is the IV, and k is the
key for the block cipher E. The resulting ciphertext, in-
cluding the IV, is then appended to a header which includes
a length ﬁeld and an explicit sequence number. The de-
cryption process reverses this sequence of steps. First the
ciphertext is decrypted block by block to recover the plain-
text blocks:
Pj = Dk(Cj) ⊕ Cj−1,
where D denotes the decryption algorithm of the block ci-
pher. Then the padding is checked and removed, and ﬁnally,
the MAC is checked.
2.2 DTLS versus TLS
Applications that operate over the Unreliable Datagram
Protocol (UDP) can easily take advantage of the security
services offered of DTLS. Such applications are generally
unconcerned about the session management services that
TCP provides. Simple Network Management Protocol [8]
is a good example of such applications. Other examples in-
clude voice and video network streaming applications. By
design, DTLS is very similar to TLSv1.1 [6]. In fact, RFC
4347 [11] presents only the changes to TLSv1.1 introduced
by DTLS and refers to RFC 4346 [6] for the rest of the pro-
tocol speciﬁcation. According to RFC 4347, this approach
has been chosen to minimize the amount of effort needed to
implement the protocol. Thus, to fully understand and be
able to analyse and code DTLS, the reader of RFC 4347 is
expected to be familiar with TLSv1.1.
A number of changes were introduced so that the ser-
vices of TLSv1.1 could be delivered over an unreliable
transport protocol like UDP. The reader can refer to [11]
and [10] for the complete list of changes. We list here some
of the changes relevant to our work:
• In TLS, MAC errors must result in connection termina-
tion. In DTLS, the receiving implementation may sim-
ply discard the offending record and continue with the
connection. According to [11, Section 4.1.2.1], DTLS
implementations should silently discard data with bad
MACs, and the OpenSSL implementation takes this
“discard and continue” option, with no error messages
being sent on the wire. Not sending error messages
clearly complicates the task of the adversary, since it
is the presence of these messages (and their timings)
that allowed previous attacks on TLS; however not ter-
minating the connection in the event of an error proves
to be very useful in building a reliable padding oracle
that can be accessed as many times as the adversary
wishes.
• Unlike TLSv1.1, fragmentation of record messages is
not permitted in DTLS. Instead, a DTLS record must
ﬁt within a single lower layer datagram. Therefore, we
cannot use a large size message in our attacks, a feature
exploited in [2] to amplify timing differences for TLS.
• DTLS optionally supports record replay detection,
whereas this is required in TLS. The technique used
is the same as in IPsec’s AH protocol [9], by maintain-
ing a bitmap window of received records. Records that
are too old to ﬁt in the window and records that have
previously been received are silently discarded. Ac-
cording to [11], the replay detection feature is optional,
since packet duplication is not always malicious, but
can also occur due to routing errors. In this paper, we
mostly focus on the case where the DTLS anti-replay
feature is disabled, but explain how to extend our at-
tack to the case where it is enabled in Section 4.5.
2.3 Heartbeat Extension for TLS and DTLS
The Heartbeat extension [14] provides a new protocol for
TLS and DTLS allowing a keep-alive functionality. This is
very useful in the case of DTLS, which runs on top of un-
reliable transport protocols that have no concept of session
management. The only mechanism available at the DTLS
layer to determine if a peer is still alive is performing a
costly renegotiation. The Heartbeat extension uses Heart-
beat request and response messages between two entities
having an established DTLS connection. A Heartbeat re-
quest message can be sent by either of the entities and is
protected using the same DTLS ciphersuite and keys used
for protecting other payloads. According to [14], whenever
a Heartbeat request message is received, it has to be an-
swered with a corresponding Heartbeat response message.
Both messages have speciﬁc lengths that can be detected by
the adversary. Although we exploit Heartbeat request mes-
sages in our attack against OpenSSL, other type of mes-
sages could also be used. The only constraint is that they
should always predictably generate responses that can be
detected by the adversary. We demonstrate this in our at-
tack against GnuTLS.
2.4 Padding Oracle Attacks
The concept of a padding oracle was ﬁrst introduced by
Vaudenay [15]. In Vaudenay’s formulation, a padding or-
acle is a notional algorithm which, when presented with
a CBC-mode ciphertext, returns VALID if the underly-
ing plaintext has padding that is correctly formatted and
INVALID otherwise. Here, correctness is with respect
to some padding scheme. For example, for TLS/DTLS
padding, correctness means that the decryption of the ci-
phertext is a byte string ending in one of the valid padding