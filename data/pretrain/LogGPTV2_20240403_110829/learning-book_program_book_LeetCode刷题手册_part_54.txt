start: "AAAAACCC"
end:
“AACCCCCC"
bank: ["AAAACCCC", "AAACCCCC"，"AACCCCCC"]
return:3
题目大意
现在给定3个参数一start，end，bank，分别代表起始基因序列，目标基因序列及基因库，请找出能够使
起始基因序列变化为目标基因序列所需的最少变化次数。如果无法实现目标变化，请返回-1。
注意：
1.起始基因序列默认是合法的，但是它并不一定会出现在基因库中。
2.所有的目标基因序列必须是合法的。
3.假定起始基因序列与目标基因序列是不一样的。
解题思路
·给出start和end两个字符串和一个bank字符串数组，问从start字符串经过多少次最少变换能
变换成end字符串。每次变换必须使用bank字符串数组中的值。
·这一题完全就是第127题的翻版题，解题思路和代码99%是一样的。相似的题目也包括第126
题。这一题比他们都要简单。有2种解法，BFS和DFS。具体思路可以见第127题的题解。
代码
package leetcode
//解法一BFS
func minMutation(start string, end string, bank []string) int {
wordMap, que, depth := getwordMap(bank, start), []string{start}, 0
forlen(que)>0{
depth++
qlen := 1en(que)
for i := 0; i next{
C=next +1
3
step[start] = C
return c
func check(val uint32) bool {
if val == 0 {
return false
if val&(val-1) == 0 {
return true
for val > 0 {
if val == 3 {
return true
if val&3 != 0 {
return false
val >>= 2
return false
func convert(gene string) uint32 {
var v uint32
for -, c := range gene {
= intervals[j][1]{
dp[i] = max(dp[i], 1+dp[j]]
---
## Page 513
for _, v := range dp {
res = max(res, v)
return len(intervals) - res
// Intervals define
type Intervals [][]int
func (a Intervals) Len() int {
return len(a)
}
func (a Intervals) Swap(i,j int) {
a[i], a[j] = a[j], a[i]
func (a Intervals) Less(i, j int) bool {
for k := 0; k = intervals[pre][1]{
res++
pre = i
}else if intervals[i][1] = intervalList[i].interval[1] 3)
if index == 1en(intervalList) {
out[intervalList[i].index] = -1
}else{
out[intervalList[i].index]  = intervalList[index] .index
return out
---
## Page 516
type intervalstruct{
interval[]int
index
int
type intervallist []interval
func (in intervalList) LenO int { return len(in) }
func (in intervalList) Less(i, j int) bool {
return in[i].interva][o]  0 {
tmp = intervalmap[intervalsList[tmp]]
res = append(res, tmp)
return res
}
func searchFirstGreaterInterval(nums []Interval，target int) int {
1ow, high := 0, 1en(nums)-1
for low > 1)
if nums[mid] .start >= target {
if（mid==0）11（nums[mid-1].Start3
2.5-> 2-> 1
3. -3 -> 11
题目大意
给定一个二叉树，它的每个结点都存放着一个整数值。找出路径和等于给定数值的路径总数。路径不需
要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。
二叉树不超过1000个节点，且节点数值范围是[-1000000,1000000]的整数。
解题思路
·这一题是第112题PathSum和第113题PathSumlIl的加强版，这一题要求求出任意一条路径
的和为sum，起点不一定是根节点，可以是任意节点开始。
·注意这一题可能出现负数的情况，节点和为sum，并不一定是最终情况，有可能下面还有正数节
点和负数节点相加正好为0，那么这也是一种情况。一定要遍历到底。
·一个点是否为sum的起点，有3种情况，第一种情况路径包含该root节点，如果包含该结点，
就在它的左子树和右子树中寻找和为sum-root.va1的情况。第二种情况路径不包含该root节
---
## Page 518
点，那么就需要在它的左子树和右子树中分别寻找和为sum的结点。
代码
package leetcode
☆
* Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*/
func pathSumIII(root *TreeNode, sum int) int {
if root == nil {
return 0
res := findPath437(root, sum)
res += pathSumIII(root.Left, sum)
res += pathSumIII(root.Right, sum)
return res
//寻找包含root这个结点，且和为sum的路径
func findPath437(root *TreeNode, sum int) int {
if root == nil {
return 0
res := 0
if root.val == sum {
res++