# MySQL 5.6 版本的并行复制策略官方 MySQL5.6版本，支持了并行复制，只是支持的粒度是按库并行。理解了上面介绍的按表分发策略和按行分发策略，你就理解了，用于决定分发策略的hash 表里，key 就是数据库名。这个策略的并行效果，取决于压力模型。如果在主库上有多个 DB，并且各个 DB的压力均衡，使用这个策略的效果会很好。相比于按表和按行分发，这个策略有两个优势：1.  构造 hash 值的时候很快，只需要库名；而且一个实例上 DB    数也不会很多，不会出现需要构造 100 万个项这种情况。2.  不要求 binlog 的格式。因为 statement 格式的 binlog    也可以很容易拿到库名。但是，如果你的主库上的表都放在同一个 DB里面，这个策略就没有效果了；或者如果不同 DB的热点不同，比如一个是业务逻辑库，一个是系统配置库，那也起不到并行的效果。理论上你可以创建不同的 DB，把相同热度的表均匀分到这些不同的 DB中，强行使用这个策略。不过据我所知，由于需要特地移动数据，这个策略用得并不多。
# MariaDB 的并行复制策略在[第 23篇文章](https://time.geekbang.org/column/article/76161)中，我给你介绍了redo log 组提交 (group commit) 优化， 而 MariaDB的并行复制策略利用的就是这个特性：1.  能够在同一组里提交的事务，一定不会修改同一行；2.  主库上可以并行执行的事务，备库上也一定是可以并行执行的。在实现上，MariaDB 是这么做的：1.  在一组里面一起提交的事务，有一个相同的 commit_id，下一组就是    commit_id+1；2.  commit_id 直接写到 binlog 里面；3.  传到备库应用的时候，相同 commit_id 的事务分发到多个 worker 执行；4.  这一组全部执行完成后，coordinator 再去取下一批。当时，这个策略出来的时候是相当惊艳的。因为，之前业界的思路都是在"分析binlog，并拆分到 worker"上。而 MariaDB的这个策略，目标是"模拟主库的并行模式"。但是，这个策略有一个问题，它并没有实现"真正的模拟主库并发度"这个目标。在主库上，一组事务在commit 的时候，下一组事务是同时处于"执行中"状态的。如图 5 所示，假设了三组事务在主库的执行情况，你可以看到在 trx1、trx2 和trx3 提交的时候，trx4、trx5 和 trx6是在执行的。这样，在第一组事务提交完成的时候，下一组事务很快就会进入commit 状态。![](Images/a26f8826ecd45e492a4441ec5864db73.png){savepage-src="https://static001.geekbang.org/resource/image/8f/c3/8fec5fb48d6095aecc80016826efbfc3.png"}```{=html}```图 5 主库并行事务]{.reference}```{=html}```而按照 MariaDB 的并行复制策略，备库上的执行效果如图 6 所示。![](Images/166496132894bda358685ab887d64c50.png){savepage-src="https://static001.geekbang.org/resource/image/8a/22/8ac3799c1ff2f9833619a1624ca3e622.png"}```{=html}```图 6 MariaDB 并行复制，备库并行效果]{.reference}```{=html}```可以看到，在备库上执行的时候，要等第一组事务完全执行完成后，第二组事务才能开始执行，这样系统的吞吐量就不够。另外，这个方案很容易被大事务拖后腿。假设 trx2是一个超大事务，那么在备库应用的时候，trx1 和 trx3 执行完成后，就只能等trx2 完全执行完成，下一组才能开始执行。这段时间，只有一个 worker线程在工作，是对资源的浪费。不过即使如此，这个策略仍然是一个很漂亮的创新。因为，它对原系统的改造非常少，实现也很优雅。
# MySQL 5.7 的并行复制策略在 MariaDB 并行复制实现之后，官方的 MySQL5.7版本也提供了类似的功能，由参数 slave-parallel-type 来控制并行复制策略：1.  配置为 DATABASE，表示使用 MySQL 5.6 版本的按库并行策略；2.  配置为 LOGICAL_CLOCK，表示的就是类似 MariaDB 的策略。不过，MySQL 5.7    这个策略，针对并行度做了优化。这个优化的思路也很有趣儿。你可以先考虑这样一个问题：同时处于"执行状态"的所有事务，是不是可以并行？答案是，不能。因为，这里面可能有由于锁冲突而处于锁等待状态的事务。如果这些事务在备库上被分配到不同的worker，就会出现备库跟主库不一致的情况。而上面提到的 MariaDB 这个策略的核心，是"所有处于commit"状态的事务可以并行。事务处于 commit状态，表示已经通过了锁冲突的检验了。这时候，你可以再回顾一下两阶段提交，我把前面[第 23篇文章](https://time.geekbang.org/column/article/76161)中介绍过的两阶段提交过程图贴过来。![](Images/4141df161d231298b44260878c4d0667.png){savepage-src="https://static001.geekbang.org/resource/image/5a/28/5ae7d074c34bc5bd55c82781de670c28.png"}```{=html}```图 7 两阶段提交细化过程图]{.reference}```{=html}```其实，不用等到 commit 阶段，只要能够到达 redo log prepare阶段，就表示事务已经通过锁冲突的检验了。因此，MySQL 5.7 并行复制策略的思想是：1.  同时处于 prepare 状态的事务，在备库执行时是可以并行的；2.  处于 prepare 状态的事务，与处于 commit    状态的事务之间，在备库执行时也是可以并行的。我在第 23 篇文章，讲 binlog 的组提交的时候，介绍过两个参数：1.  binlog_group_commit_sync_delay 参数，表示延迟多少微秒后才调用 fsync;2.  binlog_group_commit_sync_no_delay_count    参数，表示累积多少次以后才调用 fsync。这两个参数是用于故意拉长 binlog 从 write 到 fsync 的时间，以此减少binlog 的写盘次数。在 MySQL 5.7的并行复制策略里，它们可以用来制造更多的"同时处于 prepare阶段的事务"。这样就增加了备库复制的并行度。也就是说，这两个参数，既可以"故意"让主库提交得慢些，又可以让备库执行得快些。在MySQL 5.7处理备库延迟的时候，可以考虑调整这两个参数值，来达到提升备库复制并发度的目的。
# MySQL 5.7.22 的并行复制策略在 2018 年 4 月份发布的 MySQL 5.7.22 版本里，MySQL增加了一个新的并行复制策略，基于 WRITESET 的并行复制。相应地，新增了一个参数binlog-transaction-dependency-tracking，用来控制是否启用这个新策略。这个参数的可选值有以下三种。1.  COMMIT_ORDER，表示的就是前面介绍的，根据同时进入 prepare 和 commit    来判断是否可以并行的策略。2.  WRITESET，表示的是对于事务涉及更新的每一行，计算出这一行的 hash    值，组成集合 writeset。如果两个事务没有操作相同的行，也就是说它们的    writeset 没有交集，就可以并行。3.  WRITESET_SESSION，是在 WRITESET    的基础上多了一个约束，即在主库上同一个线程先后执行的两个事务，在备库执行的时候，要保证相同的先后顺序。当然为了唯一标识，这个 hash 值是通过"库名 + 表名 + 索引名 +值"计算出来的。如果一个表上除了有主键索引外，还有其他唯一索引，那么对于每个唯一索引，insert语句对应的 writeset 就要多增加一个 hash 值。你可能看出来了，这跟我们前面介绍的基于 MySQL 5.5版本的按行分发的策略是差不多的。不过，MySQL官方的这个实现还是有很大的优势：1.  writeset 是在主库生成后直接写入到 binlog    里面的，这样在备库执行的时候，不需要解析 binlog 内容（event    里的行数据），节省了很多计算量；2.  不需要把整个事务的 binlog 都扫一遍才能决定分发到哪个    worker，更省内存；3.  由于备库的分发策略不依赖于 binlog 内容，所以 binlog 是 statement    格式也是可以的。因此，MySQL 5.7.22 的并行复制策略在通用性上还是有保证的。当然，对于"表上没主键"和"外键约束"的场景，WRITESET策略也是没法并行的，也会暂时退化为单线程模型。
# 小结在今天这篇文章中，我和你介绍了 MySQL 的各种多线程复制策略。为什么要有多线程复制呢？这是因为单线程复制的能力全面低于多线程复制，对于更新压力较大的主库，备库是可能一直追不上主库的。从现象上看就是，备库上seconds_behind_master 的值越来越大。在介绍完每个并行复制策略后，我还和你分享了不同策略的优缺点：-   如果你是 DBA，就需要根据不同的业务场景，选择不同的策略；-   如果是你业务开发人员，也希望你能从中获取灵感用到平时的开发工作中。从这些分析中，你也会发现大事务不仅会影响到主库，也是造成备库复制延迟的主要原因之一。因此，在平时的开发工作中，我建议你尽量减少大事务操作，把大事务拆成小事务。官方 MySQL5.7 版本新增的备库并行策略，修改了 binlog 的内容，也就是说binlog协议并不是向上兼容的，在主备切换、版本升级的时候需要把这个因素也考虑进去。最后，我给你留下一个思考题吧。假设一个 MySQL 5.7.22 版本的主库，单线程插入了很多数据，过了 3个小时后，我们要给这个主库搭建一个相同版本的备库。这时候，你为了更快地让备库追上主库，要开并行复制。在binlog-transaction-dependency-tracking 参数的 COMMIT_ORDER、WRITESET 和WRITE_SESSION 这三个取值中，你会选择哪一个呢？你选择的原因是什么？如果设置另外两个参数，你认为会出现什么现象呢？你可以把你的答案和分析写在评论区，我会在下一篇文章跟你讨论这个问题。感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。
# 上期问题时间上期的问题是，什么情况下，备库的主备延迟会表现为一个 45度的线段？评论区有不少同学的回复都说到了重点：备库的同步在这段时间完全被堵住了。产生这种现象典型的场景主要包括两种：-   一种是大事务（包括大表 DDL、一个事务操作很多行）；-   还有一种情况比较隐蔽，就是备库起了一个长事务，比如```{=html}```    begin; select * from t limit 1;然后就不动了。这时候主库对表 t 做了一个加字段操作，即使这个表很小，这个 DDL在备库应用的时候也会被堵住，也不能看到这个现象。评论区还有同学说是不是主库多线程、从库单线程，备库跟不上主库的更新节奏导致的？今天这篇文章，我们刚好讲的是并行复制。所以，你知道了，这种情况会导致主备延迟，但不会表现为这种标准的呈45 度的直线。评论区留言点赞板：> \@易翔 、 \@万勇、@老杨同志 等同学的回复都提到了我们上面说的场景；> \@Max 同学提了一个很不错的问题。主备关系里面，备库主动连接，之后的> binlog> 发送是主库主动推送的。之所以这么设计也是为了效率和实时性考虑，毕竟靠备库轮询，会有时间差。![](Images/48edcb93fb03e3e52d7e7099be6b5cb3.png){savepage-src="https://static001.geekbang.org/resource/image/09/77/09c1073f99cf71d2fb162a716b5fa577.jpg"}