Table of Contents
1. Introduction 1.1
2. The Basics 1.2
1. Linux 1.2.1
1. Basics of Linux 1.2.1.1
2. Bash-scripting 1.2.1.2
3. Vim 1.2.1.3
2. Windows 1.2.2
1. Basics of Windows 1.2.2.1
2. PowerShell 1.2.2.2
3. PowerShell Scripting 1.2.2.3
4. CMD 1.2.2.4
3. Scripting With Python 1.2.3
1. Python Fundamentals 1.2.3.1
2. Useful Scripts 1.2.3.2
4. Transferring Files 1.2.4
1. Transfering Files on Linux 1.2.4.1
2. Transfering files on Windows 1.2.4.2
5. Firewalls 1.2.5
6. General tips and tricks 1.2.6
7. Cryptography 1.2.7
3. Recon and Information Gathering Phase 1.3
1. Passive Information Gatherig 1.3.1
1. Identify IP-addresses and Subdomains 1.3.1.1
1. Identify IP-addresses 1.3.1.1.1
2. Find Subdomains 1.3.1.1.2
1. DNS Basics 1.3.1.1.2.1
2. Finding subdomains 1.3.1.1.2.2
3. DNS Zone Transfer Attack 1.3.1.1.2.3
2. Identifying People 1.3.1.2
3. Search Engine Discovery 1.3.1.3
4. Identifying Technology Stack 1.3.1.4
2. Active Information Gathering 1.3.2
1. Port Scanning 1.3.2.1
4. Vulnerability analysis 1.4
1. Non-HTTP Vulnerabilities 1.4.1
1. Common ports\/services and how to use them 1.4.1.1
2. Port Knocking 1.4.1.2
2. HTTP - Web Vulnerabilities 1.4.2
1. Common Web-services 1.4.2.1
2. Authentication 1.4.2.2
1. OAuth 1.4.2.2.1
3. Session Management 1.4.2.3
1. Ses 1.4.2.3.1
4. Broken Authentication or Session Management 1.4.2.4
5. Session Fixation 1.4.2.5
6. WAF - Web Application Firewall 1.4.2.6
7. Attacking the System 1.4.2.7
1. Local File Inclusion 1.4.2.7.1
2. Remote File Inclusion 1.4.2.7.2
1
3. Directory Traversal Attack 1.4.2.7.3
4. Hidden Files and Directories 1.4.2.7.4
5. SQL-Injections 1.4.2.7.5
6. Nosql-Injections 1.4.2.7.6
7. XML External Entity Attack 1.4.2.7.7
8. Bypass File Upload Filtering 1.4.2.7.8
9. Exposed Version Control 1.4.2.7.9
10. Directory Traversal Attack 1.4.2.7.10
11. Host Header Attack 1.4.2.7.11
12. Deserialization attacks 1.4.2.7.12
3. Attacking the User 1.4.3
1. Clickjacking 1.4.3.1
2. Text/content-injection 1.4.3.2
3. HTML-Injection 1.4.3.3
4. Insecure Direct Object Reference (IDOR) 1.4.3.4
5. Subdomain Takeover 1.4.3.5
6. Cross Site Request Forgery 1.4.3.6
7. Cross-Site Scripting 1.4.3.7
1. Examples 1.4.3.7.1
2. DOM-based XSS 1.4.3.7.2
8. Browser Vulnerabilities 1.4.3.8
9. HTML-Injection 1.4.3.9
4. Automated Vulnerability Scanners 1.4.4
5. Exploiting 1.5
1. Social Engineering - Phishing 1.5.1
2. Default Layout of Apache on Different Versions 1.5.2
3. Shells 1.5.3
4. Webshell 1.5.4
5. Generate Shellcode 1.5.5
6. Editing Exploits 1.5.6
7. Compiling windows exploits 1.5.7
6. Post Exploitation 1.6
1. Spawning Shells 1.6.1
2. Meterpreter for Post-Exploitation 1.6.2
3. Privilege Escalation - Linux 1.6.3
4. Privilege Escalation - Windows 1.6.4
5. Privilege Escalation - Powershell 1.6.5
6. Escaping Restricted Shell 1.6.6
7. Bypassing antivirus 1.6.7
8. Loot and Enumerate 1.6.8
1. Loot Windows 1.6.8.1
2. Loot Linux 1.6.8.2
9. Persistence 1.6.9
10. Cover your tracks 1.6.10
7. Password Cracking 1.7
1. Generate Custom Wordlist 1.7.1
2. Offline Password Cracking 1.7.2
3. Online Password Cracking 1.7.3
4. Pass the Hash - Reusing Hashes 1.7.4
8. Pivoting - Port forwarding - Tunneling 1.8
9. Network traffic analysis 1.9
1. Arp-spoofing 1.9.1
1. SSL-strip 1.9.1.1
2
2. DNS-spoofing 1.9.2
3. Wireshark 1.9.3
10. Wifi 1.10
1. WEP 1.10.1
2. WPS 1.10.2
11. Physical access to machine 1.11
12. Literature 1.12
3
Introduction
Introduction
IT-Security
My notepad about stuff related to IT-security, and specifically penetration testing. Stuff I have come
across that I don't feel like googeling again.
I have used this book to try to write down how some things work, but at the same time I want to use it
as a reference book to find commands and things I just can't remember. Therefore I have tried to
create a TLDR section in the beginning of some chapters where I have copy-paste ready commands
that are useful. And if you want to know more you can continue to read the rest of the chapter. This is
my way of making the book a hybrid between the Red Team Field Manual and a standard introduction
book to pentesting.
Also, this book is just a collection of stuff that is available on the interwebz. I am just a simple
collector. I have tried to include a reference section to show where I found the technique. This book is
my way of trying to give something back to the infosec community and I hope it can be useful to
someone.
You can read this book on https://xapax.gitbooks.io/security/content/. If you feel like contributing, or
just forking it, you can do that from its github repo here: https://github.com/xapax/security. If you feel
like this is a good start, but you want to add and remove things and just make it yours you can just
fork it and do whatever you want with it.
Find practical examples
If you read about a vulnerability that you want to know more about I can really recommend searching
for in on HackerOne via google. It is a good way to find real life examples of vulnerabilities.
Here is an example of such a search:
site:hackerone.com sql-injection
Disclaimers
Sometimes the line isn't very clear between the chapters. Some actions might be considered part of
the vulnerability analysis-phase, but it could also but considered part of the recon-phase. It is what it
is.
These chapters are written sporadically with a lot of stuff missing. I just add stuff wherever whenever.
Also, things might not be accurate, I might have misunderstood something or misused a tool. So don't
trust me or this book for any accuracy.
4
The Basics
The Basics
The Basics
In this chapter we will look at some basics, good stuff to know before we begin. The basics of how
Windows work and the basics of Linux.
It is also pretty useful to know how to cook together a simple bash-script, so we are going to look at
some really simple bash operations.
And a little bit about PowerShell, and the windows command line. PowerShell is becomming more
and more important as a tool for hackers. So this chapters will probably keep expanding.
Python is also the hackers friend, so I have included a little bit about some basic operations with
python.
Transferring files is also pretty fundamental. It could be placed in the post-exploit chapter, but I think
it fits better here since it is necessary for any work between different machines.
Vim is another thing that you can't live without. So can use it as your main editor for writing and
editing code or notes, but even if you don't use it as your main editor you still need to know the basics
of it in order to be able to edit files on your hacked machines.
5
Linux
Linux
Linux
Linux was first released in September 17, 1991 by Linus Torvalds. Strictly speaking Linux is just the
kernel in the GNU/Linux operating system. Linux is the most installed OS in the world, that is mainly
due to the fact that android use Linux as its OS. It is leading in pretty much all markets except for the
desktop-market.
From a infosec perspective there are two reasons we should learn Linux. The first is that the majority
of all servers in the world is running on Linux. And if we want to hack those servers we of course
have to understand how they work. The second reason is that the vast majority of all hacking-tools are
only available on Linux.
So in this chapter we are going to look at bit at some basic commands and basics of Linux. Of course
your can write quite a few books about Linux, so this tiny little introduction is just way to get you
started. And also, I am just a beginner myself so I am just writing stuff that I myself need to learn.
Although there is only one Linux Kernel there are many Linux Distributions, that is: different
versions. That is because the GNU/Linux OS is a mix of GNU software and the Linux Kernel. The
GNU/Linux OS can be packaged in a million different ways, with different software preinstalled, with
different configurations, with different Graphical User Interface (GUI). The fact that you can
configure the OS however you like has given rise to the many different versions. These different
versions are usually called distros. There are hundreds of different distros. Some common ones are:
Ubuntu, Debian, Redhat, CentOS and Arch.
So you probably wonder what the main differences are. Here is a list of some differences:
Package management program.
Speed and interval of release
Desktop environment
Default GUI
Community
Compilation of the Linux Kernel
So as you can see depending on the users needs you can choose the distro that fits you best. Some
people want to have bleeding-edge (the latest updates - although a bit more unstable) and others
prefer stability. Some people want a distro with higher degree of security. Others want a distro with
only free software, others want distros specially made for kids, or for education, or for scientists. One
distro that is common among pentesters is Kali Linux. It comes preinstalled with hundreds of
different pentesting-related tools. It might not be the best distro for everyday use. But for pentesting is
is really convenient. Of course you could just download the programs to your non-kali distro as you
go along. But it might be just an unneccesary hassle for you.
6
Basics of Linux
Basics of Linux
Basics of linux
This is a huge chapter. I could divide it up in many subchapters but I like to have it all at one place so
I can just do ctr-f, and search for whatever I am looking for.
1. The Shell - Bash
The shell, or the terminal is a really useful tool. Bash is the standard shell on most Linux distros.
One really useful trick when working with bash is to search for old commands that you have used.
You can access this search function by doing ctr-r in the terminal.
The configuration file for the bash shell is ~./bashrc
Navigating
pwd - Print working directory
cd - Change directory
cd ~ - Change directory to your home directory
cd - - Go back to previous directory
Looking at files
ls - List files in directory
ls -ltr - Sort list by last modified. -time -reverse
file - Show info about file. What type of file it is. If it is a binary or text file for example.
cat - Output content of file.
less - Output file but just little bit at a time. Use this one. Not more.
Use /searchterm to search. It is the same command as in vim. n to scroll to next search result.
Press q to quit.
more - Output file but just little bit at a time. less is better.
Working with files
touch - Create a new file.
cp - Copy
7
Basics of Linux
mkdir - Make directory.
# Make entire directory structure
mkdir -p new/thisonetoo/and/this/one
rm - Remove file
# Remove recursively and its content. Very dangerous command!
rm -rf ./directory
Watch the command destroy an entire machine: https://www.youtube.com/watch?v=D4fzInlyYQo
rmdir - Remove empty directory
A little bit of everything
history - Show commands history
sudo
List what rights the sudo user has.
sudo -l
Sudo config file is usually /etc/sudoers
Finding files
There are mainly three ways to find files on Linux: find, locate, and which.
Find
Find is slower than locate but a lot more thorough. You can search for files recursively and with regex
and a lot of other features.
# This will send all permissions denied outputs to dev/null.
find / -name file 2>/dev/null
# Search incasesensitive, that contains the word file.
find / -iname *file* 2>/dev/null
Locate
Locate is really fast because it relies on an internal database. So in order to have it updated you need
to run:
sudo updatedb
Then you can easily find stuff like this:
locate filename
Which
Outputs the path of the binary that you are looking for. It searches through the directories that are
8
Basics of Linux
defined in your $PATH variable.
which bash
# Usually outputs: /bin/bash
Creating custom bash functions
If you want to create a new command from other commands, and be able to invoke that command
from your terminal, there are a few different way of doing that.
One way is write a bash-script, and then move that script to one of your folders in your $PATH
variable.
The other way is to simply write a function in your .bashrc file. You can then invoke that function
from anywhere in your terminal.
So for example, if you want to ssh into a machine, but you are tired of having to write the whole
command, you can just add this function in your .basrhrc file:
function connecttossh {
ssh PI:EMAIL
}
Then you need to source the file, so that it becomes updated: source ./.bashrc
Now you can just writeconnecttossh and the function will be executed.
2. Editing text
First let's just clear out something about standard streams, or I/O-streams. Standard streams are the
streams that are used to interact between the human computer-user and the machine. There are three
standard streams: standard input (stdin), standard output (stdout), and standard error (stderr).The stdin
stream can be seen as an abstractions of the real keyboard input. So when you issue a
command/program that requires input the program does not read straight from the keyboard input,
instead it reads from the file STDIN.
Stdin
Stdin is the data that gets inputed into the program. An example of a program that requires stdin data
is cp. In order for the program to do anything it needs input data. For example cp file1
copy_of_file1. Here file1 and copy_of_file1 is the stdin.
So the default Stdin comes from the STDIN-file that is a text-file representation of the keyboard
input. But often times we do not want to input stuff from the keyboard, sometimes we want to input
something into a program that comes from another file. That is when we can use redirection symbol:
>.
So an example could be cat  and >>. So now we can do the
following:
ls > result_of_ls.txt
# now the result will be written to the file result_of_ls.txt
ls >> result_of_ls.txt
# This will append the data to the bottom of the file result_of_ls.txt
Another incredibly useful feature is the pipe feature, reprsented with this symbol |. It will take the
stdout and redirect it into another program. Here is an example:
ls -la | less
This will take the stdout from ls -la and forward/redirect it into the less program. Using the
pipe you can now chain different commands.
The file descriptor for stdout is: 1
Stderr
Stderr is the stream used for outputting error messages. So if a program fails for whatever reason. For
example, if we try to copy a file that does not exist, this will be the stdrr output:
cp thisfiledoesnotexist aaaaaaaaaa
cp: cannot stat 'thisfiledoesnotexist': No such file or directory
This is a common way for stderr to present itself, just straight out into the terminal. But sometimes
stderr gets sent to a log file.
Stderr is useful because with it we can separate between stdout and stderr. However, to the eye it
might be difficult to distinguish what output is stdout and what output is stderr.
One easy way to determine is the output is stderr or stdout is to simply redirect it into a file. Because
by default you only redirect stdout, and not stderr.
cp thisfiledoesnotexist aaaaaaaaaa > result.txt
cp: cannot stat 'thisfiledoesnotexist': No such file or directory
# If we now look at result.txt we will find that it is empty. Since the error-text we recieved could not be redirected into the textfile, since it is stderr and not stdout.
Filters
There are certain programs that are especially useful to use together with pipes. They can also be used
as stand-alone programs but you will often see them together with pipes.
sort
sort test.txt
uniq
10
Basics of Linux
sort -u test.txt
sort test.txt | uniq
cat filename | sort -u > newFileName
grep
head
tail