title:Generating Client Workloads and High-Fidelity Network Traffic for
Controllable, Repeatable Experiments in Computer Security
author:Charles V. Wright and
Christopher Connelly and
Timothy Braje and
Jesse C. Rabek and
Lee M. Rossey and
Robert K. Cunningham
Information Guide
Timekeeping in VMware Virtual 
Machines
VMware® ESX 3.5/ESXi 3.5, VMware Workstation 6.5
Because virtual machines work by time‐sharing host physical hardware, a virtual machine cannot exactly 
duplicate the timing behavior of a physical machine. VMware virtual machines use several techniques to 
minimize and conceal differences in timing behavior, but the differences can still sometimes cause 
timekeeping inaccuracies and other problems in software running in a virtual machine. This information 
guide describes how timekeeping hardware works in physical machines, how typical guest operating systems 
use this hardware to keep time, and how VMware products virtualize the hardware.
This paper is intended for partners, resellers, and advanced system administrators who are deploying 
VMware products and need a deep understanding of the issues that arise in keeping accurate time in virtual 
machines. The VMware knowledge base contains additional and more frequently updated information, 
including best practices to configure specific guest operating system versions for the most accurate 
timekeeping, as well as recipes for diagnosing and working around known issues in specific versions of 
VMware products.
This document includes the following topics:
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
(cid:132)
“Timekeeping Basics” on page 1
“Time and Frequency Units” on page 4
“PC Timer Hardware” on page 4
“VMware Timer Virtualization” on page 6
“Timekeeping in Specific Operating Systems” on page 10
“Synchronizing Virtual Machines and Hosts with Real Time” on page 14
“Time and Performance Measurements Within a Virtual Machine” on page 18
“Resource Pressure” on page 21
“Troubleshooting” on page 22
“Resources” on page 26
Timekeeping Basics
Computer operating systems typically measure the passage of time in one of two ways. 
(cid:132)
Tick counting—The operating system sets up a hardware device to interrupt periodically at a known rate, 
such as 100 times per second. The operating system then handles these interrupts (called ticks) and keeps 
a count to determine how much time has passed. 
Copyright © 2008 VMware, Inc. All rights reserved.
1
Timekeeping in VMware Virtual Machines
(cid:132)
Tickless timekeeping—A hardware device keeps a count of the number of time units that have passed 
since the system booted, and the operating system simply reads the counter when needed. Tickless 
timekeeping has several advantages. In particular, it does not keep the CPU busy handling interrupts, and 
it can keep time at a finer granularity. However, tickless timekeeping is practical only on machines that 
provide a suitable hardware counter. The counter must run at a constant rate, be reasonably fast to read, 
and either never overflow or overflow infrequently enough that the operating system can reliably extend 
its range by detecting and counting the overflows.
Besides measuring the passage of time, operating systems are also called on to keep track of the absolute time, 
often called wall‐clock time. Generally, when an operating system starts up, it reads the initial wall‐clock time 
to the nearest second from the computer’s battery‐backed real time clock or queries a network time server to 
obtain a more precise and accurate time value. It then uses one of the methods described above to measure the 
passage of time from that point. In addition, to correct for long‐term drift and other errors in the measurement, 
the operating system may include a daemon that runs periodically to check the clock against a network time 
server and make adjustments to its value and running rate.
Tick Counting
Many PC‐based operating systems use tick counting to keep time. Unfortunately, supporting this form of 
timekeeping accurately in a virtual machine is difficult.
Virtual machines share their underlying hardware with the host operating system (or on VMware ESX, the 
VMkernel). Other applications and other virtual machines may also be running on the same host machine. 
Thus, at the moment a virtual machine should generate a virtual timer interrupt, it may not actually be 
running. In fact, the virtual machine may not get a chance to run again until it has accumulated a backlog of 
many timer interrupts. In addition, even a running virtual machine can sometimes be late in delivering virtual 
timer interrupts. The virtual machine checks for pending virtual timer interrupts only at certain points, such 
as when the underlying hardware receives a physical timer interrupt. Many host operating systems do not 
provide a way for the virtual machine to request a physical timer interrupt at a precisely specified time.
Because the guest operating system keeps time by counting interrupts, time as measured by the guest 
operating system falls behind real time whenever there is a timer interrupt backlog. A VMware virtual 
machine deals with this problem by keeping track of the current timer interrupt backlog and delivering timer 
interrupts at a higher rate whenever the backlog grows too large, in order to catch up. Catching up is made 
more difficult by the fact that a new timer interrupt should not be generated until the guest operating system 
has fully handled the previous one. Otherwise, the guest operating system may fail to see the next interrupt 
as a separate event and miss counting it. This phenomenon is called a lost tick.
If the virtual machine is running too slowly, perhaps as a result of competition for CPU time from other virtual 
machines or processes running on the host machine, it may be impossible to feed the virtual machine enough 
interrupts to keep up with real time. In current VMware products, if the backlog of interrupts grows beyond 
60 seconds, the virtual machine gives up on catching up, simply setting its record of the backlog to zero. After 
this happens, if VMware Tools is installed in the guest operating system and its clock synchronization feature 
is enabled, VMware Tools corrects the clock reading in the guest operating system sometime within the next 
minute by synchronizing the guest operating system time to match the host machine’s clock. The virtual 
machine then resumes keeping track of its backlog and catching up any new backlog that accumulates.
Another problem with timer interrupts is that they cause a scalability issue as more and more virtual machines 
are run on the same physical machine. Even when a virtual machine is otherwise completely idle, it must run 
briefly each time it receives a timer interrupt. If a virtual machine is requesting 100 interrupts per second, it 
thus becomes ready to run at least 100 times per second, at evenly spaced intervals. So roughly speaking, if N 
virtual machines are running, processing the interrupts imposes a background load of 100×N context switches 
per second (even if all the virtual machines are idle). Virtual machines that request 1,000 interrupts per second 
create 10 times the context switching load, and so forth.
Tickless Timekeeping
A growing number of PC‐based operating systems use tickless timekeeping. This form of timekeeping is 
relatively easy to support in a virtual machine and has several advantages, but there are still a few challenges.
Copyright © 2008 VMware, Inc. All rights reserved.
2
Timekeeping in VMware Virtual Machines
On the positive side, when the guest operating system is not counting timer interrupts for timekeeping 
purposes, there is no need for the virtual machine to keep track of an interrupt backlog and catch up if the 
number of interrupts delivered has fallen behind real time. Late interrupts can simply be allowed to pile up 
and merge together, without concern for clock slippage caused by lost ticks. This saves CPU time that would 
otherwise be consumed in handling the late interrupts. Further, the guest operating system’s view of time is 
more accurate, because its clock does not fall behind real time while the virtual machine is not running or is 
running slowly.
In order to achieve these advantages, however, the virtual machine needs to know that the guest operating 
system is using tickless timekeeping. The virtual machine must assume tick counting in the absence of 
knowledge to the contrary, because if the guest operating system is in fact counting timer interrupts, it is 
incorrect to drop any. VMware products use multiple methods to detect tickless timekeeping. First, if the guest 
has not programmed any of the virtual timer devices to generate periodic interrupts, it is safe to assume that 
tick counting is not in use. However, some operating systems do program one or more timer devices for 
periodic interrupts even when using tickless timekeeping. In such cases the use of tickless timekeeping can 
usually be inferred from the guest operating system type. Alternatively, software in the virtual machine can 
make a hypercall to inform the virtual machine that it is tickless. 
An additional challenge for both forms of timekeeping is that virtual machines occasionally run highly 
time‐sensitive code—for example, measuring the number of iterations of a specific loop that can run in a given 
amount of real time. In some cases, such code may behave better under the tick‐counting style of timekeeping, 
in which the guest operating system’s view of time appears to slow down or stop while the virtual machine is 
not running.
Initializing and Correcting Wall-Clock Time
A guest operating system faces the same basic challenges in keeping accurate wall‐clock time when running 
in either a virtual or physical machine: initializing the clock to the correct time when booting, and updating 
the clock accurately as time passes.
For initializing the clock, a VMware virtual machine provides mechanisms similar to those of a physical 
machine: a virtual battery‐backed CMOS clock and virtual network cards that can be used to fetch the time 