 itemoffset |  ctid   | itemlen | nulls | vars |                      data                         
------------+---------+---------+-------+------+-------------------------------------------------  
          1 | (3,1)   |       8 | f     | f    |   
          2 | (208,1) |      24 | f     | f    | a8 2c a1 00 78 82 d4 3d 55 1b a6 67 00 00 00 00  
          3 | (413,1) |      24 | f     | f    | a8 9d 42 01 3c fe ab 6b e7 69 81 1c 00 00 00 00  
          4 | (617,1) |      24 | f     | f    | c8 f7 e5 01 eb cd b6 31 49 90 14 6f 00 00 00 00  
          5 | (821,1) |      24 | f     | f    | e7 b6 86 02 9c 1e 63 65 c4 c3 06 48 00 00 00 00  
(5 rows)  
postgres=# select * from bt_page_items('idx_t2_3',208) limit 5;  
 itemoffset |  ctid   | itemlen | nulls | vars |                      data                         
------------+---------+---------+-------+------+-------------------------------------------------  
          1 | (410,1) |      24 | f     | f    | a8 9d 42 01 3c fe ab 6b e7 69 81 1c 00 00 00 00  
          2 | (205,1) |       8 | f     | f    |   
          3 | (206,1) |      24 | f     | f    | b5 ef a1 00 bf b0 c5 14 94 4f ae 63 00 00 00 00  
          4 | (207,1) |      24 | f     | f    | 1b b1 a2 00 0a f5 c6 33 c4 09 e3 12 00 00 00 00  
          5 | (210,1) |      24 | f     | f    | 34 81 a3 00 82 74 a7 42 fe d6 33 06 00 00 00 00  
(5 rows)  
postgres=# select * from bt_page_items('idx_t2_3',410) limit 5;  
 itemoffset |    ctid     | itemlen | nulls | vars |                      data                         
------------+-------------+---------+-------+------+-------------------------------------------------  
          1 | (61769,131) |      24 | f     | f    | a6 6b 43 01 83 ab a4 04 0c a4 9e 29 00 00 00 00  
          2 | (44927,154) |      24 | f     | f    | a8 9d 42 01 3c fe ab 6b e7 69 81 1c 00 00 00 00  
          3 | (24587,3)   |      24 | f     | f    | e3 9d 42 01 4a 9f 46 25 b9 d2 8e 47 00 00 00 00  
          4 | (29996,51)  |      24 | f     | f    | be 9e 42 01 66 33 fd 03 8c 8c 39 2c 00 00 00 00  
          5 | (4032,73)   |      24 | f     | f    | 5c 9f 42 01 ea 4d b1 01 1d af 88 32 00 00 00 00  
(5 rows)  
postgres=# select * from t2 where ctid='(61769,131)';  
    c1    |    c2    |    c3     | c4 |     c5       
----------+----------+-----------+----+------------  
 21195686 | 77900675 | 698262540 |  1 | 1522991839  
(1 row)  
postgres=# select to_hex(21195686);  
 to_hex    
---------  
 1436ba6  
(1 row)  
postgres=# select to_hex(77900675);  
 to_hex    
---------  
 4a4ab83  
(1 row)  
postgres=# select to_hex(698262540);  
  to_hex    
----------  
 299ea40c  
(1 row)  
对应a6 6b 43 01 83 ab a4 04 0c a4 9e 29 00 00 00 00  
每个字段占用4字节，倒过来看 01 43 6b a6。04 a4 ab 83。29 9e a4 0c。   
```  
但是这些个索引选择有什么关系吗？  
本身没什么关系，但是由于这样出现了一个问题，索引本身占用的大小，在评估成本时也在成本计算环节之一。  
### HINT ， 成本对比  
最后数据库选什么索引，其实还是取决于COST。  
每个PATH的COST都会算一遍，哪个最低选哪个。  
使用hint来强制使用某个索引，这样就能对比出COST到底差多少？  
```  
postgres=# set pg_hint_plan.debug_print =on;  
SET  
postgres=# set pg_hint_plan.enable_hint=on;  
SET  
postgres=# set pg_hint_plan.message_level =log;  
SET  
postgres=# set client_min_messages =log;  
SET  
```  
以t4表为例  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) /*+ IndexScan(t4 idx_t4_3) */ select * from t4 where c1='1' and c2='1' and c3='a';  
LOG:  available indexes for IndexScan(t4): idx_t4_3  
LOG:  pg_hint_plan:  
used hint:  
IndexScan(t4 idx_t4_3)  
not used hint:  
duplication hint:  
error hint:  
                                                      QUERY PLAN                                                        
----------------------------------------------------------------------------------------------------------------------  
 Index Scan using idx_t4_3 on public.t4  (cost=0.69..2.91 rows=1 width=134) (actual time=0.012..0.012 rows=0 loops=1)  
   Output: c1, c2, c3, c4, c5  
   Index Cond: ((t4.c1 = '1'::text) AND (t4.c2 = '1'::text) AND (t4.c3 = 'a'::text))  
   Buffers: shared hit=5  
 Planning time: 0.188 ms  
 Execution time: 0.027 ms  
(6 rows)  
```  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) /*+ IndexScan(t4 idx_t4_2) */ select * from t4 where c1='1' and c2='1' and c3='a';  
LOG:  available indexes for IndexScan(t4): idx_t4_2  
LOG:  pg_hint_plan:  
used hint:  
IndexScan(t4 idx_t4_2)  
not used hint:  
duplication hint:  
error hint:  
                                                      QUERY PLAN                                                        
----------------------------------------------------------------------------------------------------------------------  
 Index Scan using idx_t4_2 on public.t4  (cost=0.56..2.78 rows=1 width=134) (actual time=0.012..0.012 rows=0 loops=1)  
   Output: c1, c2, c3, c4, c5  
   Index Cond: ((t4.c1 = '1'::text) AND (t4.c2 = '1'::text))  
   Filter: (t4.c3 = 'a'::text)  
   Buffers: shared hit=5  
 Planning time: 0.212 ms  
 Execution time: 0.027 ms  
(7 rows)  
```  
很显然，数据库评估出来选择idx_t4_2的成本为2.78，使用idx_t4_3的成本为2.91。  
理所当然，选择了idx_t4_2。虽然它多了一次filter。  
#### 那么为什么idx_t4_2的成本更低呢？  
```  
 public | idx_t4_2 | index | postgres | t4    | 911 MB  |   
 public | idx_t4_3 | index | postgres | t4    | 1266 MB |   
```  
1、走idx_t4_2索引时，评估出来扫描的数据块比idx_t4_3更少，虽然它多了filter，但是filter引入的开销在 RANDOM PAGE SCAN面前小得多（并且实际上这里没有filter的成本，因为c1,c2两个条件下去后评估出来的ROWS=0 ```select * from t4 where c1='1' and c2='1';```）。   
2、走idx_t4_3索引时，评估出来不需要filter，但是这个索引比idx_t4_2占用的空间大，按比例划分时，算了更多的random page SCAN 成本。即使没有额外的filter，成本也比idx_t4_2更高。  
#### PS:  
这样的评估算法应该还有优化的空间，因为实际上两个索引的LEVEL是一样的。  
```  
postgres=# select * from bt_metap('idx_t2_2');  
 magic  | version | root | level | fastroot | fastlevel   
--------+---------+------+-------+----------+-----------  
 340322 |       2 |  290 |     2 |      290 |         2  
(1 row)  
postgres=# select * from bt_metap('idx_t2_3');  
 magic  | version | root | level | fastroot | fastlevel   
--------+---------+------+-------+----------+-----------  
 340322 |       2 |  209 |     2 |      209 |         2  
(1 row)  
```  
以上，使用idx_t2_2和idx_t2_3扫描的INDEX PAGE数实际上是一样的。  
## 小结  
PostgreSQL 采用CBO的优化器模型，哪个PATH成本低，就使用哪个PATH。  
在有多个索引可以使用时，实际上数据库会计算每一种的成本，哪种成本低，选择哪个。  
影响成本的因素很多：  
算子设置，选择性，扫描成本，INDEX TUPLE过滤成本，HEAP TUPLE过滤成本。  
成本是综合的结果。  
思考：  
```  
select * from tbl where c1=1 and c2=1 and c3=1 and c4=1;  
idx(c1,c2)  
idx(c2,c3)  
idx(c4,c3,c1)  
```  
选哪个索引？需要考虑什么因素？  
提示：  
多列统计信息，统计信息，多列条件合并选择性、索引大小、RANDOM SCAN成本，SEQ SCAN成本，FILTER的成本，成本算子参数，优化器开关等。  
## 参考  
[《深入浅出PostgreSQL B-Tree索引结构》](../201605/20160528_01.md)    
[《PostgreSQL 10 黑科技 - 自定义统计信息》](../201709/20170902_02.md)  
src/backend/optimizer/path/costsize.c  
[《PostgreSQL 多查询条件，多个索引的选择算法与问题诊断方法》](../201803/20180309_01.md)    
[《PostgreSQL 自定义函数表达式选择性评估算法 - Statistics, Cardinality, Selectivity, Estimate》](../201806/20180625_02.md)    
[《PostgreSQL 优化器行评估算法》](../201005/20100511_04.md)    
[《关键时刻HINT出彩 - PG优化器的参数优化、执行计划固化CASE》](../201607/20160723_02.md)    
[《优化器成本因子校对 - PostgreSQL explain cost constants alignment to timestamp》](../201311/20131126_03.md)    
[《优化器成本因子校对(disk,ssd,memory IO开销精算) - PostgreSQL real seq_page_cost & random_page_cost in disks,ssd,memory》](../201404/20140423_01.md)    
https://www.postgresql.org/docs/11/static/planner-stats-details.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")