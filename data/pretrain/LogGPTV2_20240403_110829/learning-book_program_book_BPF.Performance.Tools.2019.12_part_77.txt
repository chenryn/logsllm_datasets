## Page 610
12.4 Bash Shell
573
funccount *p: /hone/bgzegg/Bu11d/bash-4. 4.18/bash:execute_*
Tracing 29 functions for *p:/home/bgregg/Bui1d/bash-4.4.18/bash:execute_**... Hit
Ctr1-C to end.
^C
FUHC
COUNT
execute_env_file
execute_disk_conmand
execute_Intern_functIon
1
1
execute_function
7
execute_connection
14
execute_builtin
21
pueuwmooanoexa
23
execute_builtin_ox_functlon
28
execute_simple_connand
29
execute_command_intexnal
51
Detach.ing...
Some more numbers stand out: this has execute_builtin() 21 times, which equals the calls to
echo(1). If I want to trace echo(1) and other built-ins, I can start by tracing execute_builtin(.
There was also execute_command() called 23 times, which may be the echo(1) calls plus the
function declaration plus the sleep(1) call. It sounds like another promising function to trace for
understanding bash.
12.4.2 Function Argument Tracing (bashfunc.bt)
Now to trace execute_function() call. I want to know which function, hoping it will show that
it is executing the *welcome* function. Hopefully this can be found from one of the arguments.
The bash source has (execute_cmd.c):
static int
execute_function (var, words, flags, fds_to_elose, async, subsbel1)
SHELL_VAR *var:
Int flagsj
sprOA,ISIT"GXOx
struct fd_bitnsp *fds_to_close,
Int async, subshe1l1;
Int retuzn_val, result;
[...]
1f (subshell == 0)
begin_unvlnd_frane("function_ca11ing*)
push_context (var->nane, subshell, tenporary_env) :
[..-]
---
## Page 611
574
Chapter 12 Languages
Browsing this source suggests that var, the first argument, is the executed function. It is of type
SHELL_VAR, which is struct variable, from variables.h:
typedef atruct rariable (
eu xeqo
/* Synbol that the usez types. */
char *value;
/* Value that is returned. */
asxodxs, xeqo
/* String for the environment. */
sh_var_valve_func_t *dynanic_valve,
/* Function called to return. a 'dynamic*
value for a variable, llke $SEC0NDS
or $RANDOM. */
[eToeds, stqa ueun petteo uotqoung +/ foungubtese, 1oungubTesexengs
variable* is sssigned a value in
/+ *etqetxesputg
int attributes7
/* export, readonly, array, invisible... */
Int context,
/* Whlch context this variable belongs to. */
) SHELL_VAR;
char *’s are straightforward to trace. Let's look at the name member using bpftrace. I can either
include this header or declare the struct directly in bpftrace. I'lI show both, starting with the
header include. Here is bashfunc.bt?1:
1/usr/local/bin/bpftrace
include */home/bgregg/Build/bash-4 4. 18/variables.h*
uprobe:/home/bgregg/Bui1d/bash=4 , 4 .18/bash:execute_funct.ion
1
$var = (struct variable *) arg0;
printf (*functlon: %s′,n, st ($var=>nane)) 
sq Suruung
+./bashfune.bt
pumog ou eTTa ,u*opas, 1xoxxe teaeg +ot+zig*seTgexea/8t*b*gsea/ptTng/6exfα/euou/
Attach.ing 1 probe...
functloni xelcone
functioni xelcone
function: xelcone
function: xel cone
21. 0rigin: I crested this for this boo
ok on 9-Feb-2019
---
## Page 612
12.4 Bash Shell575
function: xelcone
functlon: xeIcone
function: xelcone
°C
It worked I can now trace bash function calls.
It also printed a warning about another missing header file. I'l show the second approach, where
the struct is declared directly. In fact, since I only need the first member, Ill only declare that
member and call it a *partial" struct.
#1/usr/local/bin/bpftrace
struct variable_partial (
feueu, xeqo
);
uprobe:/home/bgregg/Bui1d/bash-4 4 .18/bash :execute_funct.ion
bre (s teqaedatqetae pon.s) = xes
printf (*CunctLon: ls′,na, stz ($var=>nane)) ;
Using this version of bashfunc.bt:
Attaching 1 pzobe...
functioni xel cone
functlon: xelcone
function: welcone
functlon: xeIcone
functioni xel cone
function: welcone
functlon: xeIcone
C
This works, without the error or the requirement for the bash source.
Note that uprobes are an unstable interface, so this program may stop working if bash changes its
function names and arguments.
---
## Page 613
576
Chapter 12 Languages
12.4.3 Function Latency (bashfunclat.bt)
Now that I can trace function calls, let's look at function latency: the duration of the function.
To start with, I modified welcome.sh so that the function was:
function welcone [
echo *Hello, Morld!*
sleep 0.3
This provides a known latency for the function call: 0.3 seconds
Now I'll check whether execute_function() waits for the shell function to complete by measuring
its latency using funclatency(8) from BCC:
+funclatency -n /hone/bgregg/Bui1d/bash-4 . 4.18/bash:execute_function
Tracing 1 functlons for */hone/bgxegg/Bulld/bash-4.4.18/bash:execute_functlon*... H1t
Ctr1-C to end.
°C
Functlon 
nsecs
: count
distribution
0 -> 1
: 0
2 > 3
: 0
4 -> 7
: 0
8 -> 15
: 0
16 -> 31
: 0
32 > 63
: 0
64 -> 127
: 0
128 -> 255
: 0
256 -> 511
: T
De tach.ing- .-
Its latency was in the 256 to 511 millisecond bucket, which matches our known latency. It looks
like I can simply time this function for the latency of the shellfunction.
Turning this into a tool so that shell function latency can be printed as a histogram by shell
function name, bashfunclat.bt?2
#1 /usx/loca1/b1n/bpE trace
struct variable_partial (
chsr *naner
22 0rigin: I created this for
: on 9-Feb-201.9
---
## Page 614
12.4 Bash Shell
577
BEGIN
printf(*Tracing bash funetion latency, Ctr]-C to end.^o*):
uprobe :/home/bgzegg/Bu11d/bash4 , 4 .18/bash:execute_funct.ion
n6xe (。[eTaxedotqetaen on.x1s)=xeas
Bnane [tid] =$var=>name
Bstart[tid] = nsecs;
uretprobe:/home/bgregg/Bui1d/bash-4 4 18/bash:execute_funct.ion
/[p]xesa/
Bns[stx (enane[tid]) ] = hist((nsecs - Bstart[tid]) / 10oooo0) ;
delete (fnane [tid]1
delete (@start[tid]) ;
This saves a pointer to a function name, and the timestamp, on the uprobe. On the uretprobe, it
fetches the name and starting timestamp for creating the histogram.
:ndno
+./bashfunelat.bt
Attach.ing 3 pzobes. .
Tracing bash function latency, Ctrl-C to end.
°C
ms [xelcorse] :
[256, 512}
71869889889886 8889889889869869889889886 888988988986986 
This works. This latency could be presented in different ways if desired: per event or as a linear
histogram.
12.4.4/bin/bash
Up until now, tracing bash has been so straightforward that I started worrying it wasn’t represen-
tative of the gritty debugging adventures one normally encounters when tracing interpreters. But
I needed to look no further than the default /bin/bash to share such an adventure. These earlier 
tools have instrumented my own build of bash, which includes the local symbol table and the
frame pointer. I modified them and the welcome.sh program to use /bin/bash instead, and found
that the BPF tools I wrote no longer worked.
---
## Page 615
578
Chapter 12 Languages
Back to square one. Here's counting function calls containing *func° in /bin/bash:
 oumg:qreq/rq/:d, sunoooung t
Tracing 36 functions for *p:/bin/bash:*func**,.. Hit Ctr]-C to end.
°C
FUBIC
COUVT
gep"uooundo
sv_funcnest
dispose_function_def
1
1
bind_function
1
make_function_def
bind_function_def
2
dispose_funct.ion_def_content.s
4
goung"saAo"deu
2
copy_function_def_ostents
2
restore_funcarray_state
7
find_function_def
9
make_funcnane_vi.sible
14
find_function
32
De tach.ing- ..
The execute_function() symbol is no longer available. Here’s readelf(1) and file(1) highlighting
our problem:
qseg/st >′>-gseg/ptng/66exfa/oou/ su<su/p-- suis-- tepeez 
[...]
2324 : 000000000004cc49
195 FUNC
GLOBAL DEFAULT
14 restoxe_funcarzay_state
[...]
298: 000000000004cd0c2326 FUNC
LOCAL DEFAULT  14 execute_function
[...]
S f11e /bin/bash /home/bgregg/Bui1d/bash-4 . 4.18/bash
/bin/bash.:
ELF 64-bit LS8 ..., strisped
/hose/bgxegg/Bu11d/bash-4 , 4.18/bash: ELF 64b1t LS8 ---, not stx1pped
file size.
execute_function() is a local symbol, and those have been stripped from /bin/bash to reduce the
Fortunately, I still have a lead: the funccount(8) output showed that restore_funcarray_state() was
called seven times, equal to our known workload. To check if it is related to function calls, Il use
stackcount(8) from BCC to show its stack trace:
---
## Page 616
12.4 Bash Shell
579
+ stackcount -P /bin/bash:restore_funcarray_state
Tracing l functlons for */bin/bash:restore_funcazray_state"... Hit Ctrl-C to end.
C
[unknown]
[unknovn]
xe1cone0.sh [8514]
7
De tach.ing- -
The stack is broken: I wanted to include this to show what /bin/bash stacks look like by default.
It's one of the reasons I compiled my own bash with frame pointers. Switching to that to investi-
gate this function:
+stackcount -P /home/bgregg/Bui1d/bash-4.4.18/bash:restore_funcarray_state
Tracing 1 functlons for
*/home/bgregg/Build/bash-4.4.18/bash:restore_funcarray_state*... Bit Ctr]C to end
C
restore_funcarray_state
vithout_interrupts
run_unvind_frane
execute_functlon
execute_builtin_or_function
execute_slnple_command
execute_conmand_interna]
resder_loop
execute_conmand
nain
_libc_start_nain
[unknovn]
xelcome,sh [8542]
7
De tach.ing-..
This shows that restore_funcarray_state() is called as a child of execute_function(), so it is indeed
related to the shell function calls.
The function is in execute_cmd.c:
vo1d
restore_funcarray_state (fa)
struct func_array_state *fa,
---
## Page 617
580
Chapter 12 Languages
The struct func_array_state is, from execute_cmd.h:
struet fune_array_state
ARRAY *funcnane_a
tx"aueuoung SvATTEHS
ARRAY *source_a;
SHELL_VAR *source_v
ARRAY *11neno_a:
SHELL_VAR *1inene_v
This seems to be used for creating local contexts while running functions. I guessed that
funcname_a or funcname_v might contain what I am after: the name of the called function, so 1
declared structs and printed strings in a similar fashion to my earlier bashfunc.bt to find it. But I
was unable to find the function name.
There are many paths forward, and given that I am using an unstable interface (uprobes), there
isn’t necessarily a right way to do this (the right way is USDT). Example next steps:
•funccount(8) also showed a few other interesting sounding functions: find_function(),
make_funcname_visible0), and find_function_def(), all called more times than our known
function. Perhaps the function name is in their arguments or return value, and I can cache
it for later lookup in restore_funcarray_state().
· stackcount(8) showed higher level functions: Are any of these symbols still present in
zuogoung aqp Supen o qed 1ououe apiaoud Aag Aeu pue ‘qseq/uq/
Here's a look at that second approach, by checking what *execute° functions are visible in /bin/bash:
funccount * /bin/bash:execute_*'
Tracing 4 functions for */bin/bash:execute_**... Bit Ctrl-C to end.
C
FUBIC
COUTT
execute_command
execute_comnand_interns]
De tach.ing -..
The source code shows that execute_command() runs many things, including functions, and they
can be identified by a type number from the first argument. This would be one path forward: filter
for just function calls, and explore the other arguments to find the function name.
---
## Page 618
12.4 Bash Shell
581
I found the first approach worked immediately: find_function() has the name as its argument,
which I could cache for later lookup. An updated bashfunc.bt:
+1 /usz/local/bin/bpftrace
uprobe:/bin/bash:find_function_def
(3o -[pT]oonxxng
uprobe:/bin/bash:restore_funcarray_atate
printf (*functlon: Is’,n*, st (@currfunc[tid])1 
delete (fcurrfunc [tid]) ;
ndno
 bashfune.bt
Attach.ing 2 probes...
function: xelcone
function: xel cone
functlon: xelcone
functioni xelcone
functlon: xeIcone
functioni xel cone
functlon: xeIcone
While this works, this is tied to this version of bash and its implementation
12.4.5/bin/bash USDT
For tracing bash not to run into issues as bash internals change, USDT probes can be added to the
code. For example, imagine USDT probes with the following format:
bash:execute__function_entry (chax *name, char **args, char *f1le, Int Linenun)
bashiexecute__function__return(char *nane, int retval, char *file, int Linenun)
Then printing the function name, as well as showing the arguments, return value, latency, source
file, and line number, would all be straightforward.
---
## Page 619
582
Chapter 12 Languages
As an example of instrumenting the shell, USDT probes were added to the Bourne shell for Solaris
systems [139], with the following probe definitions:
provider sh (
probe functlon-entry Iflle, funetlon, lineno) 
probe function-return (file, function, rral) 
probe bulltin-entry(file, function, lineno) 
probe builtin-returnIfile, function, rval):
pxobe conmand-entry (f11e, function, 1ineno) 
probe cormand-return (file, function, rval) 
probe script=start (flle] 
probe script-done (file, rval);