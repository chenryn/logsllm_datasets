sulin pump.
vulnerabilities-in-animas-onetouch-ping-insulin-pump/, October 2016.
[53] Eyal Ronen, Adi Shamir, Achi-Or Weingarten, and Colin OFlynn. Iot
goes nuclear: Creating a zigbee chain reaction. In Security and Privacy
(SP), 2017 IEEE Symposium on, pages 195–212. IEEE, 2017.
[54] A. Seshadri, A. Perrig, L. van Doorn, and P. Khosla. Swatt: software-
based attestation for embedded devices. In IEEE Symposium on Security
and Privacy, 2004. Proceedings. 2004, pages 272–282, May 2004.
[55] Arvind Seshadri, Mark Luk, Elaine Shi, Adrian Perrig, Leendert van
Doorn, and Pradeep Khosla. Pioneer: Verifying code integrity and
enforcing untampered code execution on legacy systems. SIGOPS Oper.
Syst. Rev., 39(5):1–16, October 2005.
[56] Tom Spring.
New mirai variant carries out 54-hour ddos at-
https://threatpost.com/new-mirai-variant-carries-out-54a-hour-
tacks.
ddos-attacks/124660/, March 2017.
[57] Christos Stergiou, Kostas E Psannis, Byung-Gyu Kim, and Brij Gupta.
Secure integration of iot and cloud computing. Future Generation
Computer Systems, 78:964–975, 2018.
[58] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway,
´Ulfar Erlingsson, Luis Lozano, and Geoff Pike. Enforcing forward-edge
In Proceedings of the 23rd
control-ﬂow integrity in gcc &#38; llvm.
USENIX Conference on Security Symposium, SEC’14, pages 941–955,
Berkeley, CA, USA, 2014. USENIX Association.
[59] Victor van der Veen, Dennis Andriesse, Enes G¨oktas¸, Ben Gras, Lionel
Sambuc, Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. Practical
context-sensitive cﬁ. In Proceedings of the 22nd ACM SIGSAC Confer-
ence on Computer and Communications Security, pages 927–940. ACM,
2015.
[60] Arvind Seshadri Adrian Perrig Leendert van Doorn Pradeep Khosla.
Using software-based attestation for verifying embedded systems in cars.
S&P, Oakland, 2004.
[61] Deepak Chandra Vivek Haldar and Michael Franz. Semantic remote
attestation – a virtual machine directed approach to trusted computing.
VM, 2004.
[62] Jacob Wurm, Khoa Hoang, Orlando Arias, Ahmad-Reza Sadeghi, and
Yier Jin. Security analysis on consumer and industrial iot devices. In
Design Automation Conference (ASP-DAC), 2016 21st Asia and South
Paciﬁc, pages 519–524. IEEE, 2016.
[63] Bin Zeng, Gang Tan, and Greg Morrisett. Combining control-ﬂow
integrity and static analysis for efﬁcient and validated data sandbox-
In Proceedings of the 18th ACM conference on Computer and
ing.
communications security, pages 29–40. ACM, 2011.
TABLE VI: Instrumented Instructions for Control and Data Mea-
surement
Inst Type
Ind. Call
Ind. Jump
Cond. Jump
Data Access
Return
Layer
Assm.
Assm.
Assm.
IR
Assm.
Inst
blr xr
br xr
b.cond,cbz
cbnz,tbz,tbnz
load/store
ret
Info to Record
xr
xr
true/false
addr,value
pc,lr
[64] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres,
Stephen McCamant, Dawn Song, and Wei Zou. Practical control ﬂow
In Security and
integrity and randomization for binary executables.
Privacy (SP), 2013 IEEE Symposium on, pages 559–573. IEEE, 2013.
[65] Mingwei Zhang and R Sekar. Control ﬂow integrity for cots binaries.
In USENIX Security Symposium, pages 337–352, 2013.
APPENDIX A
IMPLEMENTATION DETAILS OF OAT SYSTEM
Compiler-based Instrumentation: OAT compiler is built on
LLVM [43]. Besides the typical compilation tasks, it performs
(i) the analysis for identifying critical variables; (ii) the code
instrumentation for collecting runtime measurements on con-
trol ﬂow and critical variables. The analysis works on the
LLVM IR. It ﬁrst constructs the initial set of critical variables
by traversing the IR and searching for control-dependent
variables and programmer-annotated semantically critical vari-
ables. It then uses a ﬁeld-sensitive context-insensitive Ander-
son pointer analysis to generate the global points-to informa-
tion. The compiler uses this point-to information to recursively
identify direct and indirect pointers to the critical variables
(i.e., critical pointers). It also performs a backward slicing
for each critical variable on the program dependence graph to
ﬁnd its dependencies. All critical pointers and dependencies
are iteratively added to the critical variable set.
OAT compiler instruments the code via an added backend
pass in LLVM. The instrumentation is needed at both the
assembly level (for control-related instructions) and the IR
level (for data-related instructions). This is important because
the translation from the IR to the machine code can generate
additional control-ﬂow instructions that need to be instru-
mented. The compiler inserts calls to trampolines at instruc-
tions that can change the control ﬂow of attested operations
or store/load critical variables (Table VI). Though seemingly
straightforward, this instrumentation, if not designed carefully,
can break the original program because a trampoline call may
corrupt the destination register used by the original control
transfer. To avoid such issues, the instrumentation saves to
the stack the registers that are to be used for passing the
parameters to the trampoline. Moreover, the trampoline is
responsible for handling the caller-saved registers (normally
handled by callers rather than callees). This design reduces the
number of inserted instructions at each instrumentation site. It
also minimizes the stack frame growth. As a result, registers
changed during a trampoline call are restored immediately
after the call returns.
15
Measurement Engine: We built the measurement engine as
a Trusted Application (TA) running in the Secure World. It
handles events generated by the trampolines (i.e., the Client
Application, or CA) during runtime. Control-ﬂow events
are only generated and handled during an active attesta-
tion window (when an attestation-enabled operation is ex-
ecuting). Internally, the measurement engine maintains, for
each active operation, a binary trace (Sbin) for branches,
an address trace (Saddr) for indirect calls/jumps, and a
hash (H) for returns. At the end of an attestation session,
the engine concatenates Sbin and Saddr to form a single
measurement stream, S, in a sequentially parsable format:
Size(Saddr)|Saddr|Size(Sbin)|Sbin.
Data load/store events are only triggered by critical vari-
ables. To perform CVI check, the engine maintains a hashmap
to keep track of each critical variable’s last-deﬁned value.
At every use-site of a critical variable, the engine checks if
the observed value equals the stored value in the hashmap.
If a mismatch is encountered, the engine sets a global ﬂag,
F , to indicate the CVI violation. If a violation is detected,
the engine also records the variable address and the previous
return address as the context information C, which allows the
remote veriﬁer to investigate the violation. Finally, the engine
generates a signed attestation blob that consists of S, H, F ,
and C if CVI veriﬁcation failed, along with a nonce N sent
from the veriﬁer who initiated the attestation. It will be passed
back to the normal world who will ﬁnally send the signed
attestation blob to our veriﬁcation engine via the network.
Although we use the normal world’s network stack, we do
not need to trust it. Any corruption of the blob is detectable
by verifying the signature. Any denial of service by the normal
world network stack also causes attestation failure.
CA-TA Interaction: We implemented three CA-TA com-
munication interfaces compliant with the GlobalPlatform’s
TEE speciﬁcation [29], a de-facto standard for TEE in-
terface design. The interfaces are oei_attest_begin,
commit_event, and oei_attest_end, used by the CA
to notify the TA of the respective event. To prevent potential
abuse (e.g., calling them via ROP), the measurement engine
ensures that the interfaces can only be called by the trampo-
lines and can never be invoked via indirect calls, jumps, or
returns (details in §VIII-D ).
Veriﬁcation Engine: We prototyped a simple veriﬁcation
engine based on the Capstone disassembler [9]. It takes as
input an attestation blob, the binary code that performed the
operation under attestation, and a CFG extracted at compile
time for that operation code. As described in
the
veriﬁcation process is fairly straightforward, thanks to our
hybrid measurement scheme.
§IV,
For control-ﬂow attestation, the veriﬁer performs a static
abstract execution of the disassembled binary code. This
abstract execution is guided by the forward-edge traces in
the attestation blob. It simply traverses through the code and
performs CFI checks at each indirect control-ﬂow transfer.
It also simulates a call stack for keeping track of return
addresses and updating the return hash, which is checked
against the reported hash in the end. This abstract-execution-
based veriﬁcation is fast because it does not actually run the
code or have to exhaustively explore all possible code paths.
Moreover, unlike traditional attestation, which only gives a
binary result, our veriﬁcation allows for the reconstruction
of the execution traces, which are valuable to postmortem
analysis. For CVI veriﬁcation, the veriﬁer checks if the CVI
violation bit is set in the attestation blog. If positive, it fails
the attestation and outputs the context information.
APPENDIX B
PROOF OF CONTROL-FLOW VERIFICATION
Let h : {0, 1}(cid:63) → {0, 1} be a collision resistant hash
function. Using h we can construct another hash function
H[op] which takes the sequence of values (cid:104)z1,··· , zm(cid:105) as
follows: H1 = h(z1) and Hi+1 = op(Hi, zi+1) (1 ≤ i < m).
The value of H on the sequence is Hm. We rely on the
following property, which restricts the binary operation op we
can use.
If h is collision resistant, then H[op] is collision
resistant
Our implementation uses BLAKE-2s as h and supports a
variety of binary operations, such as concatenation and xor.
Recall that if op is concatenation, H[op] is very similar to the
classic Merkle-Damgrad construction. For the rest of the note,
we will ﬁx the binary operation op (i.e., we use concatenation
as op in our implementation) and just write H instead of
H[op].
Let P be the program under consideration. Let C(P ) =
{c1,··· , ck} and R(P ) = {r1,··· , rk} be the call and return
sites in a program P (we will assume that the return site ri
corresponds to the call site ci). Recall that a proof σ has three
components (α, v, β), where α ∈ C(P )∗ (a sequence of call
sites), v is the hash value of the sequence of returns, and β
is a sequence of jumps (direct and indirect) and conditional
branches (essentially β has everything related to control-ﬂow
transfers, except calls and returns). A path π through the
control-ﬂow graph (CFG) program P is called legal
if it
satisﬁes two conditions: (A) the call and returns in π are
balanced 4, (B) the jumps and conditional branches are legal
(this can be easily checked by looking at the source code
of P and the data values corresponding to the targets of
the indirect jumps). Π(P ) denotes the set of execution paths
through the CFG of the program P . The proof corresponding
to an execution path π ∈ Π(P ) is denoted by σ(π). Next, we
describe our veriﬁcation algorithm.
Veriﬁcation. Our veriﬁer vrf y(P, σ) (let σ = (α, v, β)) and is
conjunction of two veriﬁers vrf yj and vrf yc described below.
• Veriﬁer vrf yj(P, σ) checks that the jumps and branches
in β are valid (i.e.
this can be easily done because
the veriﬁer has the program P and the data values
4This means that call and returns satisfy the grammar with the following
rules: S → ci S ri (for 1 ≤ i ≤ k) and S → .
16
corresponding to the targets of the indirect jumps). If
the jumps are valid, then vrf yj(P, σ) = 1; otherwise
vrf yj(P, σ) = 0
• Veriﬁer vrf yc(P, σ) checks the validity of calls and re-
turns. This part is a bit more involved. Essentially vrf yc
“mimics” how the hash of the returns are computed and
then checks if the computed hash value matches the one
in the proof σ. Veriﬁer vrf yc maintains an auxiliary stack
st and processes the sequence of calls α = (cid:104)cj1 ,··· , cjn(cid:105)
as follows: The calls in α are processed in order, and the
veriﬁer keeps running hash. Let us say we have processed
cj1 ,··· , cjr and are processing cjr+1. Recall that from the
call site we can tell if there was a context switch in the
program execution (a context switch means that we are
executing in a different function). The call site has the
location of the program, so we can inspect whether we
are in the same function as the top of the stack (i.e., the
location of cjr+1 is different from the location of the call
site on top of the stack). If there was no context switch,
then we push cjr+1 on the stack. If there was a context
switch, then we pop the top of the stack (say cu), compute
v(cid:48) = op(v(cid:48), h(ru)), and push cjr+1 on the stack. If ru was
the ﬁrst return computed, then v(cid:48) = h(ru). After all the
calls have been processed, let the hash value be v(cid:48). The
veriﬁer vrf yc outputs a 1 if v = v(cid:48); otherwise it outputs
a 0.
The veriﬁer vrf y(P, σ) is vrf yj(P, σ) ∧ vrf yc(P, σ).
Deﬁnition 1. A proof σ is called ambiguous iff there are two
paths π and π(cid:48) and π such that: (I) σ = σ(π) = σ(π(cid:48)) (II)
π is legal and π(cid:48) is illegal.
Note that if the veriﬁer gets an ambiguous proof σ, then it
cannot reject it because it could also correspond to a legal path
π. Therefore, an adversary is free to take an illegal path π(cid:48)
corresponding to the ambiguous proof. Therefore, adversary’s
goal is to generate an ambiguous proof.
Essentially the lemma given below informally states that if
an adversary can generate an ambiguous proof, then they can
ﬁnd a collision in the hash function H[op]. Hence, if H[op]
is collision resistant, then it will be hard for an adversary to
ﬁnd an ambiguous proof and “fool” the veriﬁer.
Lemma 2. If there exists an ambiguous proof σ, then there
is a collision in the hash function H[op].
Proof: Let π and π(cid:48) be two execution paths that result in the
same proof σ. Moreover, let π be legal and π(cid:48) be illegal (recall
that σ is an ambiguous proof). Let rπ and rπ(cid:48) be the sequence
of returns for the two paths π and π(cid:48). The set of direct jumps
and call sequences for the two paths are the same (since they
correspond to the same proof σ), so the sequence of returns has
to be different (otherwise the two paths will be the same, which
is a contradiction). However, the two sequences of returns hash
to the same value under H[op] because the paths correspond
to the same proof. Thus, we have found a collision in H[op].
(cid:3)
17