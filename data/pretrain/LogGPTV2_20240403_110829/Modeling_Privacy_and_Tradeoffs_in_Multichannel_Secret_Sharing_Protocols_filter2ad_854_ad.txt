(k,M )∈M
(k,M )∈M
(k,M )∈M
p(k, M ) = 1,
p(k, M )(k − κ) = 0,
p(k, M )(|M| − μ) = 0,
(cid:9)
and
p(k, M ) = min
(k,M )∈M;
i∈M
ri
RC
, 1
(k, M ) ∈ M,
(cid:10)
i ∈ C.
With the added constraint, this program now ﬁnds a valid share
schedule to optimize privacy, given a speciﬁed κ and μ, and
ensuring that the overall rate is RC. As in Section IV-B, loss
and delay can be optimized by changing the objective function
to L(p) and D(p) respectively.
E. Accommodating Previous Multichannel Threat Models
The MICSS work [9], as well as Blakley’s paper on the
courier mode of secret sharing [20], do not model
their
adversaries using probabilistic risk metrics. Rather, they simply
assume that the adversary can always eavesdrop on a ﬁxed set
of channels. In those works, a constant, integral parameter k is
used for all symbols, and if the adversary cannot compromise
at least k channels, then no information is disclosed. Our
approach, which allows for an average threshold κ, is not
directly suited to the MICSS threat model. For example, if the
adversary compromises two channels and κ = 3, there may or
may not be information disclosure, depending on the individual
k chosen from the share schedule.
Our approach can be modiﬁed in a straightforward fashion
to cater to both threat models. To do this, we limit the potential
share schedules to those in which only elements of the set
(k, M ) ∈ M : k ≥ (cid:10)κ(cid:11), |M| ≥ (cid:10)μ(cid:11)(cid:3)
M(cid:5) =
(cid:2)
have a nonzero probability of being chosen. By doing this, we
ensure that k ≥ (cid:10)κ(cid:11) for every symbol, forcing the adversary to
be able to compromise (cid:10)κ(cid:11) channels simultaneously to learn
any given source symbol. The following theorem states that
limiting the share schedule in this way does not exclude any
combination of κ and μ; the proof, which is a straightforward
construction, is omitted for space considerations.
Theorem 5. For any κ and μ such that 1 ≤ κ ≤ μ ≤ n,
(cid:5) over M(cid:5) with average
there exists a valid share schedule p
threshold κ
(cid:5) = κ and average multiplicity μ
(cid:5) = μ.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:36:34 UTC from IEEE Xplore.  Restrictions apply. 
While we hoped to ﬁnd that this limitation preserved the
optimal values of each network property, it became apparent
that this was not the case. The optimal rate does remain the
same, since by Theorem 4 it depends only on the average μ
and not the individual choices of k and M. Other properties,
however, can have optimal values which are not achievable
with a limited share schedule. Consider the case in which there
are three channels with negligible loss and (cid:2)d = (2, 9, 10), for
parameters κ = 2 and μ = 3. The only possible limited share
schedule is the one in which p(2, C) = 1, and the average delay
d(2, C) = 9. However, this is not equal to the optimal delay
achievable with a non-limited share schedule, since choosing
(1, C) for half of the symbols and (3, C) for the other half
gives the same κ and μ but with a lower average delay of 6.
Similar examples can be found for privacy and loss as well.
V. REFERENCE PROTOCOL
In order to demonstrate the predictive abilities of our model
and results, we need a usable secret sharing protocol with which
to test them. Unfortunately, the assumptions of MICSS [9]
are not general enough. Using perfect secret sharing schemes
instead of threshold schemes leads to a simpliﬁed design which
does not make sense in a more general secret sharing protocol.
Essentially, MICSS only provides one conﬁguration of κ and
μ for any given channels, namely that where κ = μ = n.
We therefore create a new protocol to serve as a refer-
ence implementation of our model of parameterized secret
sharing protocols. Our goal is not to provide a perfectly
tuned implementation, but to provide a means to evaluate
the usefulness of our model. We call this protocol ReMICSS,
as it is a signiﬁcantly redesigned protocol yet still based on
the concepts of MICSS. ReMICSS does not force maximum
privacy, allowing instead for the selection of parameters κ and
μ to deﬁne how the protocol will operate. In this section, we
discuss the design of ReMICSS and highlight how it differs
from MICSS, and in Section VI we will examine the behavior
of this protocol over a variety of choices of κ and μ.
The fundamental difference in ReMICSS is the addition of
support for threshold schemes, although this affects several
other aspects of its design and implementation. One obvious
beneﬁt is the ability to lose m − k shares of a packet without
the need for retransmission. However, reliable share transport
such as that of MICSS forces all lost shares to be retransmitted
regardless, stalling the channel and wasting network resources
when k < m. In order to beneﬁt from threshold scheme support,
ReMICSS is designed as a best-effort protocol, and instead
of intercepting TCP connections, it uses the network-layer
DIBS architecture [30] to ﬂexibly and transparently intercept IP
trafﬁc. As a further beneﬁt of changing the network semantics,
ReMICSS is transport-agnostic, able to carry any IP-based
communication and not only TCP.
These changes also affect the sending and receiving of shares.
Without reliable share transport, ReMICSS cannot assume that
one packet will be reconstructed before shares of the next begin
to arrive. Due to loss, reordering, or differing channel rates, the
receiver will typically be waiting for shares of many packets
379
at once and needs to store the received shares intelligently.
We borrow ideas from IP fragment reassembly algorithms,
evicting shares after a set timeout and limiting the total amount
of memory used, to provide time for slower shares to arrive
without blocking new shares or sacriﬁcing throughput.
On the sending side, the introduction of parameters κ and μ
requires that the sender somehow choose an appropriate share
schedule. In ReMICSS, to avoid the complexity of computing
an explicit schedule, we implement a dynamic share schedule.
Instead of deciding M ahead of time, the sender chooses the
ﬁrst m channels which are ready for writing (on Linux, we
use the epoll mechanism). Our evaluation will show how this
simpliﬁcation affects different aspects of protocol performance.
VI. EMPIRICAL EVALUATION
We conduct a set of experiments to demonstrate our model’s
usefulness in describing the performance characteristics of real
multichannel secret sharing protocols, as well as to evaluate
the network behavior of our reference implementation. These
experiments consist of network microbenchmarks targeting
rate, loss, and delay between two endpoints connected by ﬁve
controlled network channels. Each experiment demonstrates
how the κ and μ parameters of the protocol affect a speciﬁc
network property on a given setup, and we compare these
real-world results to the optimal values projected by our model.
Experiments are carried out on one or more of the following
pre-deﬁned network setups, designed speciﬁcally to illustrate
the effects of each property:
• Identical. All ﬁve channels are conﬁgured to transmit
at a given rate between 100 Mbps and 800 Mbps, with
negligible loss and delay.
• Diverse. The ﬁve channels are conﬁgured to transmit at 5,
20, 60, 65, and 100 Mbps, with negligible loss and delay.
• Lossy. The ﬁve channels are again conﬁgured as in the
Diverse setup, but with loss of 1, 0.5, 1, 2, and 3 percent
respectively in each direction.
• Delayed. The ﬁve channels are conﬁgured as in the
Diverse setup, but with an added delay of 2.5, 0.25, 12.5,
5, and 0.5 ms respectively in each direction.
The two hosts used in these experiments are Dell Precision
T7600 desktop workstations with 2.3 GHz hex-core Xeon
processsors and 32 GB of memory, running Arch Linux with
kernel 4.1.6. Each system is equipped with ﬁve 10 Gbps net-
work interfaces, and each channel is a direct wired connection
between two of these interfaces which is dedicated solely to
experimental trafﬁc. Channel properties are controlled using
built-in features of the Linux network infrastructure, with the
Hierarchical Token Bucket (htb) queueing class used to limit
transmission rate and the Network Emulator (netem) queueing
discipline used to introduce loss and delay.
A. Rate on Identical and Diverse Channels
In our ﬁrst experiment, we measure the transmission rate
achieved by ReMICSS over its parameter space, and we
compare the results to the optimal values from our model.
To carry out this test, we use the iperf network benchmarking
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:36:34 UTC from IEEE Xplore.  Restrictions apply. 
500
400
300
200
100
)
s
p
b
M
(
e
t
a
r
l
e
n
n
a
h
c
i
t
l
u
M
Optimal
κ = 1
κ = 2
κ = 3
κ = 4
κ = 5
250
200
150
100
50
)
s
p
b
M
(
e
t
a
r
l
e
n
n
a
h
c
i
t
l
u
M
Optimal
κ = 1
κ = 2
κ = 3
κ = 4
κ = 5
0
1
1.5
2
2.5
3.5
4
4.5
5
3
μ
0
1
1.5
2
2.5
3.5
4
4.5
5
3
μ
Fig. 3: Optimal and actual rate over κ and μ on 100 Mbps Identical setup (left) and Diverse setup (right)
tool to generate UDP trafﬁc for one minute at 1000 Mbps,
recording the bitrate reported by the iperf receiver. We begin by
using this method to obtain an accurate rate for each individual
channel, which gives us the vector (cid:2)r to use in calculating the
optimal rate at each point. After this, we measure the protocol’s
transmission rate for various combinations of κ and μ.
The results of this experiment for the 100 Mbps Identical
setup and the Diverse setup are shown in Figure 3. For each κ,
the rate is measured at values of μ ranging from κ to 5 in steps
of 0.1. For the Identical setup, the achieved rate followed the
optimal predictions closely, with overhead of no more than 3%
at any point. By Corollary 1, every channel is fully utilized at
all values of μ, and this is evident from the smoothly curving
graph for this setup. In contrast, the graph of the results for
the Diverse experimental setup is bumpy. Each bump indicates
a new channel which can no longer be fully utilized at higher
values of μ. For this setup, aside from slightly anomalous
behavior in the vicinity of μ = 3.4, the rate achieved by the
reference implementation in our experiments was consistently
within 4% of optimal.
B. Loss and Delay at Maximum Rate
Since our model also provides a means of calculating the
optimal loss and delay which can be achieved while maintaining
maximum rate, we evaluate how the reference implementation
compares in this regard as well. We do not anticipate that its
performance will be as near to optimal for these properties as
it was for rate, due to the dynamic share schedule approach
described in Section V. Instead, we will use our optimality
results to determine how well the simpler scheduling approach
used in ReMICSS deals with loss and delay.
We will ﬁrst evaluate performance in terms of overall packet
loss at maximum rate, given lossy underlying channels. In
this experiment, we continue to use the iperf tool, which in
addition to rate reports the percentage of datagrams lost for
UDP benchmarks. For each choice of parameters κ and μ,
we direct iperf to generate 30 seconds of UDP trafﬁc at the
rate measured in the previous experiment. In these tests we
conﬁgure our network channels in the Lossy experimental
setup, so that there may now be loss of individual shares on
different channels, potentially leading to the loss of the symbol
depending on the current protocol parameters.
The results of the loss experiment are shown in Figure 5. As
before, we measure the lossiness of each individual channel
ﬁrst to ensure that we have an accurate (cid:2)l with which to calculate
optimal values. These optimal predictions, represented by the
solid lines in the ﬁgure, are computed by solving the linear
program in Section IV-D. We can see a variety of behavior
in the results, which stems from the way in which ReMICSS
chooses its share schedule. In some cases, such as when κ is 2,
4, or 5, the actual loss is extremely close to optimal. At other
points, such as the pathological case where κ = 3 and μ = 3.8,
the procedure for selecting channels interacts negatively with
the speciﬁc proportions of channel properties, leading to much
higher loss than other nearby values. It is still clear to see from
other parts of the graph that the predictions from our model are
reinforced by the results of this experiment, and that oddities
in the graph are effects of the particular implementation.
We evaluate delay similarly, although we must use a different
tool because iperf does not give results for packet delay. We
create a simple utility to determine average packet round-trip
time for echoed UDP trafﬁc which is generated at a speciﬁed
rate. The client is based on the sending routine from iperf, but
each packet includes a timestamp so that when it receives the
echoed packet, it can determine its round-trip time. We run
our client/server pair instead of iperf for 30 seconds, again at
the rate determined in the ﬁrst experiment. The client gives an
average round-trip time for all of the packets sent, and since
the channel delays are applied in both directions, we divide
this result by 2 to ﬁnd the one-way delay.
It is clear from our results that the reference implementation
is much more heavily affected by delay than by loss. We plot
optimal and actual delays separately in Figure 4 due to the