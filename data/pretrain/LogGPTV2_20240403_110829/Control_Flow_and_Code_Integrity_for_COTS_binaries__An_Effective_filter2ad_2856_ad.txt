### Syscall Policy and State Model

- **Syscall Policy**: This policy governs the system calls that a process is allowed to make. It ensures that only authorized system calls are executed, thereby preventing unauthorized operations.
- **State Model**: The state model tracks the current state of the process and enforces security policies based on the state. It helps in detecting and preventing anomalies in the process's behavior.

### Library Loading Policy

- **Library Loading Policy**: This policy controls which libraries can be loaded by a process and from where they can be loaded. It prevents the loading of malicious or unauthorized libraries, thus enhancing the security of the application.

### Effectiveness Evaluation of CFCI

**Figure 7: Effectiveness Evaluation of CFCI**

| Metric | Description |
|--------|-------------|
| (cid:10)(cid:11)(cid:12) | (Description of the metric) |
| (cid:13)(cid:14)(cid:13)(cid:12) | (Description of the metric) |
| (cid:9)(cid:3)(cid:3)(cid:4)(cid:3)(cid:3)(cid:5) | (Description of the metric) |
| (cid:8)(cid:3)(cid:4)(cid:3)(cid:3)(cid:5) | (Description of the metric) |
| (cid:7)(cid:3)(cid:4)(cid:3)(cid:3)(cid:5) | (Description of the metric) |
| (cid:6)(cid:3)(cid:4)(cid:3)(cid:3)(cid:5) | (Description of the metric) |
| (cid:2)(cid:3)(cid:4)(cid:3)(cid:3)(cid:5) | (Description of the metric) |
| (cid:3)(cid:4)(cid:3)(cid:3)(cid:5) | (Description of the metric) |
| (cid:1)(cid:2)(cid:3)(cid:4)(cid:3)(cid:3)(cid:5) | (Description of the metric) |

**Figure 4: Performance of CFCI on SPEC2006**

| Metric | Description |
|--------|-------------|
| (cid:13)(cid:14)(cid:4)(cid:15)(cid:4)(cid:16)(cid:17)(cid:3) | (Description of the metric) |
| (cid:18)(cid:19)(cid:18)(cid:20) | (Description of the metric) |
| (cid:1)(cid:11) | (Description of the metric) |
| (cid:1)(cid:10) | (Description of the metric) |
| (cid:1)(cid:9) | (Description of the metric) |
| (cid:1)(cid:6) | (Description of the metric) |
| (cid:12) | (Description of the metric) |
| (cid:11) | (Description of the metric) |
| (cid:10) | (Description of the metric) |
| (cid:9) | (Description of the metric) |
| (cid:6) | (Description of the metric) |
| (cid:28) | (Description of the metric) |
| (cid:7) | (Description of the metric) |
| (cid:25) | (Description of the metric) |
| (cid:27) | (Description of the metric) |
| (cid:24) | (Description of the metric) |
| (cid:26) | (Description of the metric) |
| (cid:25) | (Description of the metric) |
| (cid:4) | (Description of the metric) |
| (cid:21) | (Description of the metric) |
| (cid:24) | (Description of the metric) |
| (cid:23) | (Description of the metric) |
| (cid:22) | (Description of the metric) |
| (cid:21) | (Description of the metric) |
| (cid:14) | (Description of the metric) |
| (cid:17) | (Description of the metric) |
| (cid:21) | (Description of the metric) |
| (cid:7) | (Description of the metric) |

**Figure 5: Micro Benchmark Evaluation of CFCI**

| Metric | Description |
|--------|-------------|
| (cid:1)(cid:2)(cid:3)(cid:4)(cid:5) | (Description of the metric) |
| (cid:1)(cid:6)(cid:2)(cid:3)(cid:4)(cid:5)(cid:7) | (Description of the metric) |
| (cid:8)(cid:6)(cid:2)(cid:3)(cid:4)(cid:5)(cid:7) | (Description of the metric) |
| (cid:1)(cid:6)(cid:6)(cid:2)(cid:3)(cid:4)(cid:5)(cid:7) | (Description of the metric) |

### Overhead Analysis

- **Microbenchmark Overhead**: The overhead of CFCI on library loading grows linearly with the number of libraries loaded. On average, the overhead is 150%. However, this is a microbenchmark, and the actual overhead, when considering the overall execution time, is much smaller.

### Commonly Used Linux Applications

- **Performance Overhead**: Since only code allocation and deallocation generate performance overhead, we focused our evaluation on program startup when a large number of modules are loaded. The results are shown in Figure 6, where the base load time is in seconds.

**Figure 6: Startup Overhead on Typical Applications**

| Program Name | Base Load Time (s) | PSI Overhead (%) | Added CFCI Overhead (%) | # of Loaded Libraries |
|--------------|--------------------|------------------|--------------------------|-----------------------|
| vim          | 0.140              | 34               | 8                        | 96                    |
| evince       | 0.336              | 222              | 8                        | 103                   |
| lyx          | 0.484              | 89               | 10                       | 152                   |
| lynx         | 0.052              | 38               | 2                        | 15                    |
| wireshark    | 0.684              | 224              | 18                       | 114                   |
| nautilus     | 0.080              | 900              | 16                       | 178                   |
| acroread     | 0.972              | 280              | 7                        | 82                    |

- **Additional Overhead**: The additional overhead generated by CFCI ranges from 2% to 18%, with an average of 8%. Many of these programs load more than 100 shared libraries each.

### Running with Dynamic Code

- **Compatibility with Dynamic Code**: To demonstrate compatibility with dynamic code, we used LibJIT [14], an actively maintained JIT engine similar to the LLVM backend. We forced LibJIT to generate only non-writable code. The benchmark tool computes the greatest common divisor (GCD). Our evaluation shows that CFCI overhead is 14.6%, including about 10% for runtime code transformation.

### Effectiveness Evaluation

- **CFI Bypass Techniques**: Although CFI bypass techniques are emerging, real-world exploits have not been designed with CFI in mind. Our effectiveness evaluation uses a combination of manual analysis based on CVE reports and proof-of-concept exploits. This evaluation is summarized in Figure 7.

- **Threat Model**: We classify all attacks into direct attacks (direct), loader data corruption attacks (ldr.data), and loader code reuse attacks (ldr.cr). All types of attacks are defeated. Specifically, our system call policy prevents all direct attacks, and our library loading policy defeats loader subversion attacks.

### Case Studies

#### Case Study: Library Policy for Adobe Reader

- **Policy for Adobe Reader**: The policy limits the load path and specific libraries that may be loaded by Adobe Reader. For example, low-level libraries like `libc.so`, `libpthread.so`, and `libselinux.so` must be loaded from specific directories.

**Figure 8: Library Loading Policy for Adobe Reader**

| Action | Path/Condition |
|--------|----------------|
| ALLOW  | /lib/i386-linux-gnu/ |
| REJECT | *              |
| ALLOW  | libc.so.6      |
| REJECT | *              |
| ALLOW  | libpthread.so.0 /lib/i386-linux-gnu/ |
| REJECT | *              |
| ALLOW  | libselinux.so.1 /lib/i386-linux-gnu/ |
| REJECT | *              |
| ALLOW  | /lib/i386-linux-gnu/ |
| ALLOW  | /usr/lib/*     |
| ALLOW  | /opt/Adobe/Reader9/Reader/intellinux/lib |
| ALLOW  | /usr/lib/i386-linux-gnu/* |
| ALLOW  | /usr/lib       |
| REJECT | *              |

#### Case Study: Library Policy for Static Binary

- **Static Binaries**: It is a common misconception that static binaries cannot load libraries. We demonstrated that a statically-linked program with a buffer overflow vulnerability can load libraries using internal functions. Our default policy for library loading stops such attacks by preventing loads of libraries outside standard directories.

#### Case Study: Text Relocation Attack

- **Text Relocation Attack**: We implemented a proof-of-concept exploit that leverages text relocation. The attack was detected and blocked by our loader state model.

#### Case Study: Making Stack Executable

- **Stack Executable Attack**: We wrote a simple proof-of-concept exploit that makes the stack executable and then jumps to the stack. The exploit bypasses sanity checks in glibc 2.15. When run with CFCI, the exploit is blocked by our policies, specifically the attempt to make an empty region executable.

### Related Work

- **Memory Corruption Defenses and CFI**: Memory corruption attacks are a significant threat. Bounds-checking techniques provide comprehensive defense but introduce considerable overheads and compatibility issues. Other approaches like LBC and CPI reduce overheads but trade off some detection capabilities. Randomization techniques, while widely deployed, have limitations.