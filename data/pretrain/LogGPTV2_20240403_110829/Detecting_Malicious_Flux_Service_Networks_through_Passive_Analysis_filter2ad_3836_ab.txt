ﬂux service. In the following we describe each single
component of our detection system more in details.
C. Trafﬁc Volume Reduction (F1)
In order to describe the trafﬁc volume reduction
ﬁlter F1, we ﬁrst need to formally deﬁne how the
313
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:12:17 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1: Overview of our detection system.
DNS queries and related responses are represented by
our system. Let q(d) be a DNS query performed by
a user at time ti
to resolve the set of IP addresses
owned by domain name d. We formally deﬁne the
information in the query and its related response as a
tuple q(d) = (ti, T (d), P(d)), where T (d) is the time-to-
live (TTL) of the DNS response, and P(d) is the set
of resolved IPs returned by the RDNS server. Also, let
pref ix(P(d), 16) be the set of distinct /16 network
preﬁxes extracted from P(d).
In order to reduce the volume of DNS trafﬁc (see ﬁlter
F1 in Figure 1) without discarding information about the
domain names that are most likely related to malicious
ﬂux services, we use the following ﬁltering rules. We
“accept” only DNS queries (and related responses) that
respect all of the following constraints:
F1-a) T (d) 6 10800 seconds (i.e., 3 hours).
F1-b) |P(d)| > 3 OR T (d) 6 30.
F1-c) p = |pref ix(P(d),16)|
> 1
3 .
|P(d)|
We now brieﬂy motivate the choice of these rules.
As mentioned in Section II-A, ﬂux domains are charac-
terized by a low TTL, which is usually in the order of
a few minutes [12] and allows the set of resolved IPs
to change rapidly. Rule F1-a excludes all the queries to
domain names whose TTL exceeds three hours, because
such domain names are unlikely to be “ﬂuxing”. Rule
F1-b takes into account the fact that DNS queries to ﬂux
domain names usually return a relatively large number
(> 3) of resolved IPs [12]. The reason for this is that
the uptime of each ﬂux agent is not easily predictable.
A large set of resolved IPs provides a sort of “fault-
tolerance” mechanism for the ﬂux service. However,
a similar result may also be obtained by setting up
ﬂux domains that return a very small set of resolved
IPs (e.g., only one per query) but have a very low
TTL (e.g., equal or close to zero). This way, if a ﬂux
agent is “down”, a new ﬂux agent can be immediately
discovered by performing another DNS query, because
the previous response will be quickly evicted from the
RDNS’s cache. Rule F1-b takes into account both these
scenarios. Rule F1-c is motivated by the fact that the
ﬂux agents are often scattered across many different
networks and organizations. On the other hand, most
legitimate (non-ﬂux) domains resolve to IP addresses
residing in one or few different networks. We use the
function pref ix(P(d), 16) to estimate the number of
different networks in which the resolved IPs reside2, and
the ratio p (rule F1-c) allows us to identify queries to
domains that are very unlikely to be part of a malicious
ﬂux service.
D. Periodic List Pruning (F2)
i
i
i
i
, ˆT (d)
, R(d)
, G(d)
While monitoring the recursive DNS trafﬁc, each
sensor maintains a list L of candidate ﬂux domains.
The list L stores historic information about the candi-
date ﬂux domains and is updated every time a DNS
query passes ﬁlter F1. In order to explain how L
is updated,
let us formally deﬁne how a candidate
ﬂux domain name is represented. At any time t, a
candidate ﬂux domain name d can be viewed as a tuple
d = (ti, Q(d)
), where ti is the time
when the last DNS query for d was observed, Q(d)
is
the total number of DNS queries related to d ever seen
until ti, ˆT (d)
is the maximum TTL ever observed for
d, R(d)
is the cumulative set of all the resolved IPs
ever seen for d until time ti, and G(d)
is a sequence of
pairs {(tj, r(d)
j−1|,
i.e., the number of new resolved IPs we observed at
time tj, compared to the set of resolved IPs seen until
tj−1. We store only the pairs {(tj, r(d)
)}j=1..i for which
r(d)
j > 0. Therefore G(d)
registers when and how much
the resolved IP set of d “grew”, until time ti. When
a new DNS query q(d) = (tk, T (d), P(d)) related to d
passes ﬁlter F1, the data structure d ∈ L is updated
according to the information in q(d).
)}j=1..i, where r(d)
j = |R(d)
| − |R(d)
j
j
i
j
i
i
i
i
In order to narrow down the number of candidate ﬂux
domains and only consider the ones that are most likely
related to malicious ﬂux services, the list L is pruned at
the end of every interval ∆T  100 AND |G
| 6 5 OR p 6 0.5).
| < 3 AND (|R
(d)
j
(d)
j
Rule F2-a ﬁlters out those domains for which we
monitored more than 100 queries, the cumulative set
of resolved IPs didn’t “grow” more than twice, the total
number of resolved IPs ever seen is low (6 5) or the
network preﬁx ratio p is low (6 0.5). The ﬁlter F2
is justiﬁed by the characteristics of ﬂux domain names
described in Section II-A, and domain names that do not
pass F2 are very unlikely to be related to ﬂux services.
E. Domain Clustering
At the end of each epoch E, we consider the list L of
candidate ﬂux domains, and we group them according
to similarities in their resolved IP sets. This clustering
step is motivated by the following reasons. Botmasters
usually operate malicious ﬂux services using a (often
large) number of fast-ﬂux domain names that all point
to ﬂux agents related to the same ﬂux service. We
speculate that one of the reasons for this behavior is
to evade domain blacklists (DBLs).
Our clustering approach groups together domain
names that within an epoch E (equal to one day in
our experiments) resolved to a common set of IP ad-
dresses. To perform domain clustering of ﬂux domains
that are related to each other, we use a single-linkage
hierarchical clustering algorithm [5, 6], which adopts a
“friends of friends” clustering strategy. In order to apply
clustering on a set of domain names D = {d1, d2, ..dn},
we ﬁrst need to formally deﬁne a notion of similarity
between them. Given two domains α and β, and their
cumulative set of resolved IP addresses collected during
an epoch E, respectively R(α) and R(β), we compute
their similarity score as
sim(α, β) =
|R(α) ∩ R(β)|
|R(α) ∪ R(β)|
·
1
1 + eγ−min(|R(α)|,|R(β)|)
∈ [0, 1]
(1)
The ﬁrst factor is the Jaccard index for sets R(α) and
R(β), which intuitively measures the similarity between
the two cumulative sets of resolved IPs. The second
factor is a sigmoidal weight. In practices, the higher
the minimum number of resolved IPs in R(α) or R(β),
the higher the sigmoidal weight. To better understand
the choice of this weight factor consider this example:
if |R(α) ∩ R(β)| = 1 and |R(α) ∪ R(β)| = 4 or |R(α) ∩
R(β)| = 10 and |R(α)∪R(β)| = 40, the Jaccard index is
0.25 in both cases. However, in the second case we want
the similarity to be higher because there are 10 resolved
IPs in common among the domains α and β, instead of
0
0
0
8
0
0
0
6
0
0
0
4
0
0
0
2
0
s
r
e
t
s
u
c
f
l
o
.
m
u
n
0.0
0.2
0.4
0.6
0.8
1.0
cut height (h)
Figure 2: Cluster Analysis, Sensor 1.
just one. We can also think of the second factor as a
sort of “conﬁdence” on the ﬁrst one. The parameter γ
is chosen a priori, and is only used to shift the sigmoid
towards the right with respect to the x-axes. We set γ =
3 in our experiments so that if min(|R(α)|, |R(β)|) = 3
the weight factor will be equal to 0.5. As the minimum
number of resolved IPs grows, the sigmoidal weight
tends to its asymptotic value of 1.
A similarity (or proximity) matrix P = {sij}i,j=1..n
that consists of similarities sij = sim(di, dj) between
each pair of domains (di, dj) can then be computed.
The hierarchical clustering algorithm takes P as input
and produces in output a dendrogram, i.e., a tree-like
data structure in which the leaves represent the original
domains in D, and the length of the edges represent the
distance between clusters [5]. The obtained dendrogram
does not actually deﬁne a partitioning of the domains
into clusters, rather it deﬁnes “relationships” among
domains. A partitioning of the set D into clusters
can then be obtained by cutting the dendrogram at a
certain hight h. In order to choose the best dendrogram
cut (i.e., the best clustering), we apply a clustering
validation approach based on plateau regions [2]. In
practice we plot a graph that shows how the number
of clusters varies for varying hight of the cut, and
we look for plateau (i.e., ﬂat) regions in the graph.
For example, consider Figure 2, which is related to
clusters of candidate ﬂux domain names extracted from
an RDNS sensor (see Section III for details) after an
epoch E = 1 day. The long plateau region between 0.1
and 0.7 shows that varying the cut height h does not
signiﬁcantly change the number of obtained clusters,
thus providing for a sort of “natural grouping” of the
domain names. A manual validation of the clusters
obtained using this analysis strategy conﬁrmed that the
obtained clusters were indeed correct. We will discuss
the clustering results more in detail in Section III.
F. Service Classiﬁer
Each cluster Ci of candidate ﬂux domains can be seen
as a candidate ﬂux service deﬁned by the set of all the
315
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:12:17 UTC from IEEE Xplore.  Restrictions apply. 
domain names in Ci, and the overall set of IP addresses
these domains resolved to during an epoch E. Since ﬁl-
ters F1 and F2 adopt a conservative approach, they may
not be able to ﬁlter out domains related to legitimate
CDNs or other legitimate Internet services (e.g., pools of
NTP servers) that have a behavior somewhat similar to
ﬂux services. Therefore, after collecting and clustering
the candidate ﬂux domains we need to determine which
clusters are actually related to malicious ﬂux services
and which ones are related to legitimate and non-ﬂux
networks. To this end, we apply a statistical supervised
learning approach to build a network classiﬁer which
can automatically distinguish between malicious ﬂux
services and other networks, as shown in Figure 1.
We ﬁrst describe and motivate the set of statisti-
cal features we use to distinguish between malicious
ﬂux services and legitimate/non-ﬂux services. In [9],
Passerini et al. proposed a thorough characterization of
fast-ﬂux domain names in terms of statistical features
for supervised learning. They introduced a set of nine
features based on the analysis of the set of IP addresses
resolved by querying single domain names. In this work
we adapt some of the features proposed in [9] to char-