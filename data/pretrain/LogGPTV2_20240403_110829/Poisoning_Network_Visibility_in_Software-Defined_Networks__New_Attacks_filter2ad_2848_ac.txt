mobile networks.
In order to deceive the LDS, an adversary can violate
the “integrity/origin invariant” and “path invariant” of LLDP
packets. In particular, the adversary originates falsiﬁed LLDP
packets or simply relays LLDP packets between two switches
to fabricate a non-existing internal link. At a ﬁrst glance, it
does not seem practical to inject arbitrary packets into the net-
work from hosts or virtual machines because they are normally
isolated by speciﬁc mechanisms, e.g., VLAN and Firewall.
However, it appears feasible for hosts and virtual machines
to inject or relay LLDP packets in OpenFlow networks. The
OpenFlow networks allow LLDP packets to be sent outside
all switch ports to dynamically track internal links between
switches. Thus, the current design of OpenFlow controllers
accepts LLDP packets from each switch port, even though it
is connected to a host, which leaves a room for an adversary
to inject fake internal links on compromised hosts or virtual
machines. Next, we describe two methods an adversary can
utilize to inject fake links into network topology.
Fake LLDP Injection. In this case, an adversary generates
fake LLDP packets into an OpenFlow network to announce
bogus internal links between two switches. By monitoring the
trafﬁc from OpenFlow switches, the adversary can obtain the
genuine LLDP packet. Afterwards, he/she can violate the ori-
gin invariant of an LLDP packet, while OpenFlow controllers
leverage speciﬁc syntax and extra TLVs for veriﬁcation. Due
to the open source nature of most OpenFlow controllers, the
adversary can ﬁnd out the reference LLDP syntax. Although
those controllers in a hybrid network scenario (i.e., a network
contains both OpenFlow islands and Non-OpenFlow islands),
as the OpenFlow controller can hardly stop Host Tracking
Service on the Multi-hop link ports (i.e., switch port outgoing
to another Non-OpenFlow switch).
Next, we illustrate two attack possibilities on the top of
Link Fabrication Attack, i.e., Denial of Service attack and man-
in-the-middle attack.
Fig. 5: Link Fabrication in an LLDP relay manner
the source code of OpenFlow controllers could be veiled and
a network administrator could customize the source code, it is
also available to decode the LLDP packets by using differential
tools. Moreover, as described above, the weak authenticator of
LLDP packets imposed by several OpenFlow controllers can
be bypassed. As long as the adversary acquires the genuine
LLDP packet along with its syntax, he/she can modify the
speciﬁc contents of the LLDP packet, e.g., the DPID ﬁeld or
the port number ﬁeld, and launch the Link Fabrication Attack.
In order to circumvent the possible anomalous trafﬁc detection,
the adversary could tune the LLDP injecting rate to the LLDP
sending rate monitored from the OpenFlow controller.
LLDP Relay. Instead of injecting forged LLDP packets, a
stronger adversary can also fabricate internal links in a relay
fashion (without packet modiﬁcation). That is, when receiving
an LLDP packet from one target switch, the adversary repeats
it to another target switch without any modiﬁcation. In the
case, the adversary constructs a fake topology view to the
OpenFlow controller as if there is an internal link between
those two target switches. This kind of fake link injection
incurs future attack possibilities which we will describe more
in detail as follows.
Here, we discuss two ways to build a communication
channel to relay LLDP packets, i.e., by physical links and
by a tunnel. An intuitive relay method is that an adversary
sets up physical links (e.g., cable or wireless) between two
switches. If this is not feasible, the adversary can use another
more feasible approach, which relays LLDP packets by reusing
the existing OpenFlow network infrastructure as illustrated in
Figure 5. Particularly, the dotted line is the communication
channel between two users in the view of an OpenFlow
controller, whereas the dashed line is the actual trafﬁc route. To
successfully launch an LLDP relay attack, the adversary ﬁrst
needs to ﬁnd suitable relay host(s), which can be achieved
by a connection test. Another thing we need to note is that,
some OpenFlow controllers, e.g., Floodlight and POX, disable
the Host Tracking Service on internal link switch ports, which
hinders the deployment of the LLDP relay channel. However,
we cannot
ignore the tunnel-based LLDP relay attack on
(a) The chosen switch has the second
smallest DPID
(b) The chosen switch has the small-
est DPID
Fig. 6: Denial of Service Attack
Denial of Service Attack. To prevent a broadcast storm
and save energy, OpenFlow controllers provide Spanning Tree
Service (as detailed in Appendix A). When any topology up-
date occurs, Spanning Tree Service is triggered to block those
redundant ports. However, this capability can be leveraged by
an adversary to launch a Denial of Service attack. In particular,
by injecting a fake link into existing topology, the adversary
can borrow the knife of Spanning Tree Service to “kill” normal
switch ports.
One challenge to launch this type of attack is the non-
deterministic characteristics of Spanning Tree Calculation after
fake link injection. We note that the Spanning Tree Algorithm
always excludes the link that connects largest DPID switches.
Hence, we introduce an attack strategy tailored to a practical
scenario, where an adversary possesses several compromised
hosts connected to ingress switches. By listening to LLDP
packets, the adversary can acquire the DPIDs of two ingress
switches. Then, the adversary controls the compromised host
which connects to the ingress switch with a lower DPID and
injects a fake LLDP to announce a link with the target switch.
As a result, there may be two consequences: if the DPID
of the aggregation switch is smaller than that of our chosen
switch, the adversary could shut down an arbitrary port of
the target switch, as shown in Figure 6(a); otherwise, if the
chosen switch has the smallest DPID, the link between the
target switch and the aggregation switch is excluded from the
spanning tree and also the corresponding ports are blocked, as
shown in Figure 6(b).
We demonstrated a Denial of Service attack in our ex-
perimental environment. We chose POX as the OpenFlow
controller, enabling routing module (l2 learning.py), link dis-
covery module (discovery.py) and spanning tree module (span-
ning tree.py). Note that the action for non-spanning-tree ports
was conﬁgured as Port Down. Then, we deployed a FatTree-
like topology, where we controlled two hosts connecting to two
7
Fake LinkRelay HostUserUserCompromised HostCompromised HostAggregationIngressSmallest DPIDSecond SmallestDPIDTarget SwitchUserAggregationIngressSecond Smallest DPIDSmallest DPIDTarget SwitchUserhad a compromised host connecting two ingress switches in
the network. After the deployment, we ran an attacking script
to relay trafﬁc between two target switches (The dashed line
in Figure 7(a) is the actual communication trafﬁc route). As
shown in Figure 7(b), we successfully wiretapped the trafﬁc
of clients connected to the target switches.
IV. COUNTERMEASURES
A. Static Defense Strategies
To defeat the proposed Network Topology Poisoning At-
tacks in SDN networks, we can have two major types of
defense strategies: static or dynamic. The static solution is
to manually conﬁgure/manage the host location and link in-
formation beforehand (e.g., assign a host identiﬁer such as a
MAC address to a speciﬁc switch port), and then manually
verify and modify whenever there are changes (new addition
or removal). However, this defense is obviously not attractive
as the manual management is tedious, error-prone and not
scalable in practice. In particular, it is not suitable for SDN
networks,
in which dynamics could be common and the
scalability is important. Thus, in the following sections, we
mainly focus on discussing dynamic defense strategies, as
brieﬂy summarized in Table IV. We will further introduce our
proposed new defense system, TopoGuard, and evaluate its
effectiveness and performance in the later section.
B. Dynamic Defense Strategies against Host Location Hijack
The problem of Host Location Hijacking lies in that
OpenFlow controllers fail to verify the host identiﬁer when
the location of a host is updated. In order to tackle this issue,
we discuss two possible mitigation methods which can secure
HTS in OpenFlow controllers as well as dynamically track
network mobility.
Authenticate Host Entity. A cryptographic solution to
this problem is to authenticate a host by adding additional
public-key infrastructure. In particular, when a host needs to
change its location, it encodes the new location information
into an unused ﬁeld of packet (e.g., VLAN ID or ToS) with
the encryption using its private key. This solution seems decent
to prevent malicious host proﬁle falsiﬁcation, because it is not
practical for an adversary to acquire the private key of the
target host. However, there are several restrictions that make it
hard to be feasible in practice. First, it begets additional storage
overhead for keeping public keys in the OpenFlow controller
side as well as computation overhead for handling each Packet-
In message. The management of all keys of hosts and the
dynamic addition/removal also bring a lot of overhead and cost.
Moreover, this method requires to modify the implementation
on every host, which is tedious and difﬁcult
in practical
deployment.
(a) Attack Topology
(b) Attack Result
Fig. 7: Man-In-The-Middle Attack
sibling ingress switches. We ran Wireshark with the OpenFlow
Dissector extension [5], which helps to parse OpenFlow mes-
sages, and dumped the Packet-Out messages with the payload
of LLDP packets. We also ran an attacking script to craft fake
LLDP packets based on the dumped genuine LLDP packets
and injected them to the switch with the smaller DPID. As
a result, we noticed that the users who are connected to our
target switch port could not access the network resource any
more.
Man-In-The-Middle Attack. Similarly, The fake link in-
jection can also disturb the operation of Shortest Path Routing
Service. An adversary can build an LLDP relay channel to
deceive an OpenFlow controller with the illusion of an (actu-
ally non-existing) internal link between target switches. Once
the OpenFlow controller notices a link up, it re-computes the
Shortest Route based on contaminated topology information.
As a result, all the trafﬁc traversing through the fake route
will fall into the trap of the adversary. Note that unlike legacy
Ethernet switches,
the OpenFlow switches do not change
the source MAC address of packets. As such, in order to
circumvent possible anomaly detection, we must keep the
source MAC address when relaying both LLDP and normal
packets.
Here, we launched a man-in-the-middle attack in our
experimental environment. The OpenFlow controller we chose
was Floodlight (master) with default settings. We deployed an
linear network topology, as shown in Figure 7(a), where we
Verify the Legitimacy of Host Migration. Another
lightweight solution we propose is to verify conditions of a
host migration. The idea is based on our two observations.
First, the precondition of a host migration is that the OpenFlow
8
Ingress SwitchIngress SwitchCompromised HostUserUserHost Migration
Comparative Feasibility
Integirty/Origin Invariant of LLDP
Path Invariant of LLDP
Authentication
Veriﬁcation
Yes
Yes
Low
High
Yes
No
No
Yes
TABLE IV: Defense Capabilities
controller must receive a Port Down signal before the host mi-
gration ﬁnishes. Second, the postcondition of a host migration
is that the host entity is unreachable in the previous location
after the completion of the host migration. Consequently, based
on this cause-and-effect relation, we can verify the legitimacy
of the host migration by checking the precondition and post-
condition. This method also adds performance overhead for
Packet-In message processing, but compared to Host Entity
Authentication, it is lighter and more feasible. In this paper, we
adopt this veriﬁcation approach to secure the host migration.
C. Dynamic Defense Strategies against Link Fabrication
As mentioned earlier, the root causes of the Link Fabri-
cation attack can be summarized as: 1) The integrity/origin
of an LLDP packet can be violated during the link discovery
procedure in OpenFlow networks; 2) The compromised hosts
can involve in the LLDP propagation path. To ﬁx those security
omissions, we propose two approaches that can secure the Link
Discovery procedure without the burden of manual effort.
Authentication for LLDP packets. The ﬁrst security
omission exploited by an adversary is that
the OpenFlow
controller fails to verify the integrity of LLDP packets. Also,
the adversary can defeat the veriﬁcation of the origin in current
OpenFlow controllers as long as he/she is able to receive
LLDP packets from the connected switch. One solution to
this problem is to add extra authenticator TLVs in the LLDP
packet. Especially, we can add a controller-signed TLV into
the LLDP packet and check the signature when receiving
the LLDP packets. The signature TLV is calculated over
the semantics of the the LLDP packet (i.e., DPID and Port
number). In this case, the adversary can hardly manipulate the
LLDP packets. However, this approach suffers from the fact
that it fails to defend against the Link Fabrication attack in an
LLDP relay/tunneling manner.
Veriﬁcation for Switch Port Property. Another security
invariant of the OpenFlow link discovery procedure is that
no hosts can participate in the LLDP propagation. An idea
to mitigate the relay-based Link Fabrication is to check if
any host resides inside the LLDP propagation, e.g., we can
add some extra logic to track the trafﬁc coming from each
switch port to decide which device is connected to the port.
If OpenFlow controllers detect host-generated trafﬁc (e.g.,
DNS) from a speciﬁc switch port, we set the Device Type
of that port as HOST (details in Section V). Otherwise, we
assign those switch ports as SWITCH when LLDP packets
are received from those ports. In OpenFlow networks, those
two categories are mutually exclusive because LLDP can only
transmit on switch internal link ports and ports connected to the
OpenFlow controller 4. One assumption of this method lies in
that the compromised machine is not an actual switch thus will
generate regular host-generated trafﬁc (e.g., ARP, DNS). This
assumption is reasonable and it holds in most cases in practice.
While a powerful adversary could theoretically disable all host-
generated trafﬁc in compromised hosts or virtual machines, it
could also make the machine somewhat non-functional, at least
for some normal networking activities/operations, and such
non-functional anomaly could be easily noticed by the normal
machine user, thus expose the existence of the adversary.
Finally, we note that in the case the adversary mutes all
host-generated trafﬁc, our aforementioned switch port property
veriﬁcation may not work. From the controller perspective,
the attacking host can act just as a part of a cable, which
is very difﬁcult to discover by layer 2 or layer 3 security
mechanisms. We could resort to verify some physical layer
characteristics (e.g., [20]) to differentiate whether the attached
device hardware is a switch or a machine, which is out of the
scope of this paper.
V. TopoGuard PROTOTYPE SYSTEM
In this section, we detail the design and implementation of
a new security extension for the OpenFlow controller, called
TopoGuard, to protect the SDN networks from Network Topol-
ogy Poisoning Attacks. TopoGuard is certainly not perfect. Our
goal is to provide an automatic tool that (i) has a good balance
between usability and security, and (ii) can be easily integrated
into current mainstream OpenFlow controllers for immediate
protection.
A. Overview
The basic idea of TopoGuard is to secure OpenFlow
controllers by ﬁxing security omissions as described in the
previous section. In TopoGuard, we design Topology Update
Checker to automatically validate the update of network topol-
ogy, which is dependent on the information provided by Port
Manager and Host Tracker.
Architecture. Figure 8 illustrates the architecture of our
defense system. The Topology Update Checker veriﬁes the
legitimacy of a host migration, the integrity/origin of an LLDP
packet and switch port property once detecting a topology
update. Speciﬁcally,
the Port Manager surveils OpenFlow
messages to track dynamics of switch ports, which are stored
in the Port Property. Afterwards, the Port Property is used to
reason about the trustworthiness of a topology update. The
Host Prober module is to test the liveness of the host in
4In this paper, we consider the control channel of OpenFlow networks could
be properly under protection of SSL/TLS.
9
Type as HOST. However, in our study, we ﬁnd that different
OpenFlow switches may issue multiple replicas of Packet-In
messages for a speciﬁc host ﬂow, i.e., the OpenFlow controller
would receive host trafﬁc from switch internal link ports. It
could be due to the race condition scenario or specialized
packet processing logic of OpenFlow controller applications.
To solve this problem, we keep tracking the ﬁrst-hop host
trafﬁc. Especially, we maintain Host List in the Port Property
for each switch port, which contains host entities (in the form
of a MAC address). When receiving Packet-In messages, the
Port Manager locates the host entity in the existing Host List
of Port Property. if the host entity is not found, the trafﬁc
is regarded as ﬁrst-hop trafﬁc and the source MAC address
is recorded in the Host List of Port Property of the ingress
switch port. Also, we need to handle network dynamics such
as the Set-Field action in the OpenFlow ﬂow rule, because
any modiﬁcation of the source MAC address during packet