在本例中，我们通过`roleRef`将`Role`与用户绑定。Kubernetes 支持不同种类的`roleRef`；我们可以在这里替换从`Role`到`ClusterRole`的那种:
```
roleRef:
kind: ClusterRole
name: cd-role
apiGroup: rbac.authorization.k8s.io 
```
那么`cd-role`只能访问命名空间`project1`中的资源。
另一方面，一个`ClusterRoleBinding`用于在所有名称空间中授予权限。让我们回顾一下我们在[第 7 章](07.html#4REBM0-6c8359cae3d4492eb9973d94ec3e4f1e)、*持续交付*中所做的工作。我们首先创建了一个名为`cd-agent`的服务帐户，然后创建了一个名为`cd-role`的`ClusterRole`。最后，我们为`cd-agent`和`cd-role`创建了一个`ClusterRoleBinding`。然后，我们使用`cd-agent`代表我们进行部署:
```
# cat cd-clusterrolebinding.yml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
 name: cd-agent
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cd-role
subjects:
- apiGroup: rbac.authorization.k8s.io
 kind: User
 name: system:serviceaccount:cd:cd-agent  
```
`cd-agent`通过`ClusterRoleBinding`与`ClusterRole`绑定，因此它可以跨名称空间拥有`cd-role`中指定的权限。因为服务帐户是在命名空间中创建的，所以我们需要指定它的全名，包括命名空间:
```
system:serviceaccount:: 
```
让我们通过`8-5-2_role.yml`和`8-5-2_rolebinding_user.yml:`启动`Role`和`RoleBinding`
```
# kubectl create -f 8-5-2_role.yml
role "devops-role" created
# kubectl create -f 8-5-2_rolebinding_user.yml
rolebinding "devops-role-binding" created  
```
现在，我们不再被禁止:
```
# kubectl --context=devops-context get pods
No resources found.
```
如果 Linda 想列出名称空间呢，允许吗？：
```
# kubectl --context=devops-context get namespaces
Error from server (Forbidden): User "linda" cannot list namespaces at the cluster scope. (get namespaces)  
```
答案是否定的，因为琳达没有被授予列出名称空间的权限。
# 准入控制
准入控制发生在 Kubernetes 处理请求之前以及通过身份验证和授权之后。通过增加`--admission-control`参数启动 API 服务器时启用。Kubernetes 官方建议，如果集群版本为> = 1.6.0，则集群附带以下插件。
```
--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,DefaultTolerationSeconds,ResourceQuota  
```
下面介绍这些插件的用法，以及我们为什么需要它们。有关支持的准入控制插件的更多最新信息，请访问官方文档[https://kubernetes.io/docs/admin/admission-controllers](https://kubernetes.io/docs/admin/admission-controllers)。
# 命名空间生命周期
正如我们之前了解到的，当一个命名空间被删除时，该命名空间中的所有对象也将被逐出。该插件确保在终止或不存在的命名空间中不会产生新的对象创建请求。它还可以防止 Kubernetes 本地命名空间被删除。
# 极限游侠
这个插件确保`LimitRange`可以正常工作。借助`LimitRange`，我们可以在一个名称空间中设置默认的请求和限制，在启动 pod 时使用，而无需指定请求和限制。
# 服务帐户
如果使用服务帐户对象，必须添加服务帐户插件。有关服务帐户的更多信息，请再次访问本章中的服务帐户部分。
# PersistentVolumeLabel
`PersistentVolumeLabel`根据底层云提供商提供的标签，为新创建的 PV 添加标签。从 1.8 开始，此准入控制器已被弃用。
# DefaultStorageClass
如果在持久卷声明中没有设置`StorageClass`，该插件确保默认存储类可以正常工作。不同云提供商的不同供应工具将利用`DefaultStorageClass`(如 GKE 使用谷歌云持久盘)。请确保您已启用此功能。
# 资源配额
就像`LimitRange`一样，如果你使用`ResourceQuota`对象来管理不同级别的服务质量，这个插件必须被启用。资源配额应该总是放在准入控制插件列表的末尾。正如我们在 ResourceQuota 部分中提到的，如果使用的配额小于硬配额，将更新资源配额使用情况，以确保群集有足够的资源接受请求。如果请求最终被下列控制器拒绝，将其放入准入控制器列表的末尾可以防止该请求过早增加配额使用。
# 默认容差秒
在介绍这个插件之前，我们必须了解**污染**和**容忍**是什么。
# 污点和宽容
污点和容忍被用来阻止一组 Pod 在某些节点上调度运行。污点被应用于节点，而容忍被指定给荚。污点的值可能是`NoSchedule`或`NoExecute`。如果运行一个受污染节点的单元没有匹配的容忍度，这些单元将被驱逐。
假设我们有两个节点:
```
# kubectl get nodes
NAME                            STATUS    AGE       VERSION  
ip-172-20-56-91.ec2.internal Ready 6h v1.7.2
ip-172-20-68-10.ec2.internal Ready 29m v1.7.2
```
现在让我们通过`kubectl run nginx --image=nginx:1.12.0 --replicas=1 --port=80`命令运行一个 nginx Pod 。
pod 正在第一个节点`ip-172-20-56-91.ec2.internal`上运行:
```
# kubectl describe pods nginx-4217019353-s9xrn
Name:       nginx-4217019353-s9xrn
Node:       ip-172-20-56-91.ec2.internal/172.20.56.91
Tolerations:    node.alpha.kubernetes.io/notReady:NoExecute for 300s
node.alpha.kubernetes.io/unreachable:NoExecute for 300s  
```
通过 pod 的描述，我们可以看到有两个默认的容忍附加到 pod。这意味着，如果节点尚未准备好或无法访问，请等待 300 秒，然后将 pod 从节点中逐出。这两个容差由默认容差秒接纳控制器插件应用。我们以后再谈这个。接下来，我们将为第一个节点设置一个污点:
```
# kubectl taint nodes ip-172-20-56-91.ec2.internal experimental=true:NoExecute
node "ip-172-20-56-91.ec2.internal" tainted  
```
由于我们将动作设置为`NoExecute`，并且`experimental=true`与我们的 pod 上的任何容忍不匹配，pod 将立即从节点中移除并重新计划。多重污点可以应用于一个节点。为了在该节点上运行，pods 必须匹配所有的容差。下面是一个可以传递受感染节点的示例:
```
# cat 8-6_pod_tolerations.yml
apiVersion: v1
kind: Pod
metadata:
 name: pod-with-tolerations
spec:
 containers:
 - name: web
 image: nginx
 tolerations:
 - key: "experimental"
 value: "true"
 operator: "Equal"
 effect: "NoExecute"  
```
除了`Equal`运算符，我们还可以使用`Exists`。在这种情况下，我们不需要指定值。只要键出现并且效果匹配，那么 pod 就有资格在那个被污染的节点上运行。
`DefaultTolerationSeconds`插件用于设置那些没有任何容忍设置的 PODS。然后它将为污点`notready:NoExecute`和`unreachable:NoExecute`应用 300 秒的默认容忍。如果你不想这个行为发生在集群中，禁用这个插件可能会起作用。
# 波德诺选择器
该插件用于设置`node-selector`对名称空间的注释。启用插件后，使用以下格式传递带有`--admission-control-config-file`命令的配置文件:
```
podNodeSelectorPluginConfig:
 clusterDefaultNodeSelector: 
 namespace1: 
 namespace2: 
```
然后`node-selector`注释将应用于名称空间。然后，该命名空间上的 pods 将在匹配的节点上运行。
# 总是承认
这总是允许所有的请求，它可能只用于测试。
# AlwaysPullImages
拉取策略定义了 kubelet 拉取映像时的行为。默认的拉取策略是`IfNotPresent`，也就是说，如果映像不在本地，它会拉取映像。如果启用该插件，默认的拉取策略将变为`Always`，即始终拉取最新的映像。如果你的集群被不同的团队共享，这个插件还会带来另一个好处。每当一个 pod 被调度时，它总是拉最新的映像，不管该映像是否存在于本地。然后，我们可以确保 pod 创建请求始终通过对映像的授权检查。
# 总是否认
这总是会拒绝所有请求。它只能用于测试。
# DenyEscalatingExec
该插件拒绝任何`kubectl exec`和`kubectl attach`命令升级权限模式。具有权限模式的 Pods 可以访问主机名称空间，这可能会带来安全风险。
# 其他准入控制器插件
我们还可以使用更多的其他准入控制器插件，例如限制 kubelet 权限的 NodeRestriciton、建立控制映像访问的 Webhook 的 ImagePolicyWebhook、控制 pod 或容器权限的 SecurityContextDeny。其他插件请参考([https://kubernetes.io/docs/admin/admission-controllers)](https://kubernetes.io/docs/admin/admission-controllers/))官方文档。
# 摘要
在本章中，我们学习了什么是命名空间和上下文，它们是如何工作的，如何通过设置上下文在物理集群和虚拟集群之间切换。然后，我们了解了重要的对象——服务帐户，它用于识别 pod 中运行的进程。然后我们了解如何在 Kubernetes 中控制访问流。我们了解了身份验证和授权之间的区别，以及它们在 Kubernetes 中的工作方式。我们还学习了如何利用 RBAC 向用户提供细粒度的权限。最后，我们学习了几个准入控制器插件，它们是访问控制流程中的最后一个守门员。
AWS 是公共 IaaS 提供商中最主要的参与者。在本章中，我们将它作为自托管集群的例子使用了很多次。在下一章[第 9 章](09.html#6NGV40-6c8359cae3d4492eb9973d94ec3e4f1e)、*AWS 上的 Kubernetes*中，我们将最终了解如何在 AWS 上部署集群以及使用 AWS 时的基本概念。