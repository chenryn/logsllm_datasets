口USR2，用于平滑升级可执行程序。
口USR1，用于Nginx的日志切换，也就是重新打开一个日志文件，
口HUP，表示重新加载配置，也就是关闭原有的进程，并开启新的工作进程。此操作不
口QUIT，表示处理完当前请求后，关闭进程。
Nginx对进程的控制能力非常强大，可以通过信号指令控制进程。常用的信号有：
2.Nginx的启动、关闭与重启
上述命令不但显示Nginx的版本信息，同时显示Nginx在编译时指定的相关模块信息。
执行以下命令可显示安装的Nginx版本和相关编译信息：
在命令行执行以下命令可以显示安装Nginx的版本信息：
（2）显示Nginx的版本以及相关编译信息
如果检测结果显示如下信息，说明配置文件正确。
其中，“-t”参数用于检查配置文件是否正确，但并不执行，“-c”参数用于指定配置
Nginx提供的配置文件调试功能非常有用，可以快速定位配置文件存在的问题。执行如
（1）检查Nginx配置文件的正确性
1.Nginx基本信息检查
在完成对nginx.conf文件的配置后，就可以启动服务了。Nginx自身提供了一些用于日
个新的日志文件时，可以使用这个信号来控制。
会中断用户的访问请求，因此可以通过此信号平滑地重启Nginx。
/opt/nginx/sbin/nginx-V
/opt/nginx/sbin/nginx-v
opt/nginx/sbin/nginx-t-c /opt/nginx/conf/nginx.conf
/opt/nginx/sbin/nginx-t或者
Nginx的启动、关闭和平滑重启
www.Linuxidc.com
root
html;
，例如每天要生成一
ginx
13
---
## Page 34
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
部分。
1.5.1虚拟主机配置实例
实例，具体包含虚拟主机配置、负载均衡配置、防盗链配置以及日志管理等。
以与Apache相媲美，几乎可以实现Apache的所有功能。下面就介绍一些Nginx常用的配置
1.5Nginx常用配置实例
14
http{
下面在Nginx中创建3个虚拟主机，需要说明的是，这里仅仅列出了虚拟主机的配置
Nginx作为一个HTTP服务器，在功能实现方面和性能方面都表现得非常卓越，完全可
ki11-HUp‘cat/opt/nginx/logs/nginx.pid
要不间断服务地重新启动Nginx，可以使用如下命令：
（3）Nginx的平滑重启
cat /opt/nginx/1ogs/nginx.pid
其中，XXX就是信号名，pid是Nginx的进程号，可以通过如下两个命令获取：
ki11 -xxx pid
如果要关闭Nginx进程，可以使用如下命令：
（2）Nginx的关闭
nobody
lobody
nobody
tobody
toot
root@localhost logs]#ps-ef|grep nginx
即可完成Nginx的启动。Nginx启动后，可以通过如下命令查看Nginx的启动进程：
opt/nginx/sbin/nginx
Nginx的启动非常简单，
（1）Nginx的启动
口WINCH，从容关闭工作进程。
index index.html;
access_log
server_name
isten
server
16594 16572
16592
16591 16572
16572
16572
1ogs/domain1.access.log main;
www. domain1.com;
Q
011:15？
11:15 ?
11:15
只需输人如下命令：
00:00:00nginx:worker
00:00:00 nginx: worker process
00:00:00 nginx:
00:0o:oo nginx: master process /opt/nginx/sbin/nginx
nginx:
worker process
process
process
善
PDG
---
## Page 35
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
点，用于提供Web服务，通过Nginx的调度实现3个节点的负载均衡。
1.5.2
location/{
http
下面通过Nginx的反向代理功能配置一个Nginx负载均衡服务器。后端有3个服务节
server{
这里用到了include指令，
Berver
upstream
server
负载均衡配置实例
oot
index index.html;
location
server_name
listen
include
server
server
root
ndex
location/
access_log
server_name
listen
server
root
proxy_next_upstream http_500 http_502 http_503 error timeout invalid_header;
proxy_pass http://myserver;
root/ixdba/web/wwwroot;
index
listen
/web/www/domain3.com/htdocs;
_1og
/web/www/domain2.com/htdocs;
/web/www/domain1.com/htdocs;
www.Linuxidc.com
index.htm index.html；
192.168.12.182:80 weight=1 max_fai1s=3 fai1_timeout=20s;
192.168.12.181:80 weight=3 max_fails=3 fai1_timeout=20g
myserver
/opt/nginx/conf/vhosts/www.domain2.com.conf;
www.domain.com 192.168.12.189;
80 ;
logs/domain3.access.1og main;
80;
logs/domain2.access.1og main;
：其中/opt/nginx/conf/vhosts/www.domain2.com.conf的内容如下：
ginx
15
PDG
---
## Page 36
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
代表的含义。
httpproxy模块，因此可直接使用httpproxy模块。下面详细解释proxy.conf文件中每个选项
故障转移。最后通过include指令包含进来一个proxy.conf文件。
504和执行超时等错误时，自动将请求转发到upstream负载均衡组中的另一台服务器，实现
载均衡组名称。
服务器地址和端口，地址可以是主机名或者IP地址，也可以是通过upstream指令设定的负
“proxy_passhttp://myserver”实现负载调度功能，其中proxy_pass指令用来指定代理的后端
16
口proxy_buffer_size：设置缓冲区大小，默认该缓冲区大小等于指令proxy_buffers 设置
proxy_next_upstream用来定义故障转移策略，当后端服务节点返回500、502、503、
口proxy_read_timeout：设置Nginx从代理的后端服务器获取信息的时间，表示连接建
器必须传完所有的数据，否则，Nginx将断开这个连接。
口proxy_send_timeout：表示后端服务器的数据回传时间，即在规定时间之内后端服务
超时时间。
口proxy_connect_timeout：表示与后端服务器连接的超时时间，即发起握手等候响应的
本地再传给用户。
client_body_buffer_size:
者的真实IP地址。
proxy_set_header:
Nginx的代理功能是通过http proxy模块来实现的。默认在安装Nginx时已经安装了
其中/opt/nginx/conf/proxy.conf的内容如下：
在上面这个配置实例中，先定义了一个负载均衡组myserver，然后在location部分通过
中等候处理的时间。
立成功后，Nginx等待后端服务器的响应时间，其实是Nginx已经进入后端的排队之
proxy_temp_file_write_size 64k;
proxy_buffers 4 32k;
proxy_buffer_Bize
proxy_set_header x-Forwarded-For Sproxy_add_x_forwarded_for;
proxy_set_header X-Real-IP $remote_addr;
proxy_redirect off;
include
oxy_read_timeout9
oxy_send_timeout
第篇
www.Linuxidc .com
/opt/nginx/conf/proxy.conf;
设置由后端的服务器获取用户的主机名或真实IP地址，以及代理
4k;
90;
90;
：用于指定客户端请求主体缓冲区大小，可以理解为先保存到
---
## Page 37
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
号控制功能的脚本来实现日志的自动切割。请看下面的一个实例。
1.5.4
可以实现功能更强大的防盗链处理。更详细的内容可参考官方文档。
也可以直接通过return返回403错误。
wma、wmv、asf、mp3、mmf、zip和rar为后缀的文件实行防盗链处理。
根据自己的需求进行类似的设定。
盗链处理。请看下面的这个实例：
1.5.3防盗链配置实例
Nginx对日志进行处理的脚本。
Nginx没有类似Apache的cronolog日志分割处理的功能，但是，可以通过Nginx的信
要做更加复杂的防盗链处理，可以使用Nginx的HttpAccessKeyModule，通过这个模块
“jpglgiflpnglswfflv|wmalwmvlasfmp3|mmfziplrar”表示对以jpg、gif、png、swf、flv、
ifl)中的内容的意思是：如果地址不是上面指定的地址就跳转到通过rewrite指定的地址，
“*ixdbal.netixdbal.net”表示这个请求可以正常访问上面指定的文件资源。
在上面这段防盗链设置中，分别针对不同文件类型和不同的目录进行了设置，读者可以
location ~* \. (jpg|gif|png|swf|flv|wma|wmv|asf |mp3|mmf |zip|rar)$ {
Nginx的防盗链功能也非常强大。在默认情况下，只需要进行简单的配置，即可实现防
口proxy_temp_file_write_size：指定proxy缓存临时文件的大小。
推荐的大小为proxy_buffersX2。
口proxy_busy_buffers_size：用于设置系统很忙时可以使用的proxy_buffers大小，官方
会放置到缓冲区。
口proxy_buffers：设置缓冲区的数量和大小。Nginx从代理的后端服务器获取的响应信息，
的大小。
日志分割配置实例
www.Linuxidc.com
if (sinvalid_referer)
valid_referers none blocked *.ixdbal.net ixdbal.net;
ocation /images{
#return 403;
rewrite
if (Sinvalid_referer)
^/http://www.ixdba.net/img/error.gif;
return
403;
6
---
## Page 38
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
个参数：
模式。具体方法如下：
式，编译完成后Nginx只有几百千字节。因此可以在编译之前，修改相关源码，取消debug
之类的信息，编译完成后，一个Nginx要有好几兆字节。而在编译前取消Nginx的debug模
1.6.1编译安装过程优化
1.6Nginx性能优化技巧
文件的存放路径。最后一行，通过Nginx的信号“USR1”实现了日志的自动切换功能。
就可以实现日志的每天分割功能了。
18
在Nginx源码文件被解压后，找到源码目录下的auto/cc/gcc文件，在其中找到如下几行：
在编译Nginx时，默认以debug模式进行，而在debug模式下会插入很多跟踪和ASSERT
其中，变量savepath_log指定分割后的日志存放的路径，而变量nglogs指定Nginx日志
要确定CPU类型，可以通过如下命令：
-with-cpu-opt=CPU
--with-cc-opt='-03'
在编译Nginx时，默认的GCC编译参数是“-O"，要优化GCC编译，
2.为特定的CPU指定CPU类型编译优化
注释掉或删掉这两行，即可取消debug模式，
1.减小Nginx编译后的文件大小
将这段脚本保存后加入到Linux的crontab守护进程，让此脚本在每天凌晨0点执行
ki11-usR1^cat/opt/nginx/logs/nginx.pid
mkdir -p$savepath_log/$（date +Y)/S（date +&m)
nglogs='/opt/nginx/1ogs'
savepath_1og=′/home/nginx/1ogs
#/bin/bash
CFLAGS="$CFLAGS -g”
#debug
$nglogs/error.1og
www.Linuxidc .com
#为特定的CPU编译，有效的值包括：pentium，pentiumpro，
$savepathlog/$（date +&Y)/$(date +tm)/error.S(date +&Y&m&d).log
$savepath_1og/$ (date +#Y) /$ (date +m) /access.S (date +&Y&m&d) .1og
可以使用以下两
pentium
PDG
---
## Page 39
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
module”选项重新编译Nginx。安装代码如下：
载的是google-perftools-1.8.tar.gz。安装过程如下：
这里下载的是libunwind-0.99-alpha.tar.gz。安装过程如下：
链和函数调用寄存器功能。
perftools两个软件包，libunwind库为基于64位CPU和操作系统的程序提供了基本函数调用
单介绍如何为Nginx添加TCMalloc库支持。
多，这在很大程度上提高了服务器在高并发情况下的性能，从而降低了系统的负载。下面简
的一个成员。与标准的glibc库的Malloc相比，TCMalloc库在内存分配效率和速度上要高很
1.6.2
要安装TCMalloc库，需要安装libunwind（32位操作系统不需要安装）和google-
到这里Nginx安装完成。
[rootalocalhost nginx-0.7.65]#make instal1
[root@localhost nginx-0.7.65]#make
>--with-google_perftools_module --with-http_stub_status_module--prefix=/opt/nginx
[PI:EMAIL]#./configure\
为了使Nginx支持google-perftools，
3.重新编译Nginx
至此，google-perftools安装完成。
[rcot@localhost google-perftools-1.8]# 1dconfig
[root@localhost home]#tar zxvf gocgle-perftools-1.8.tar.gz
可以从http://google-perftools.googlecode.com下载相应的google-perftools版本，这里下
2.安装google-perftools
[root@localhost
[root@localhost
[root@localhost home] #tar zxvf libunwind-0.99-alpha.tar.gz
可以从http://download.savannah.gnu.org/releases/libunwind下载相应的libunwind版本，
1.安装libunwind库
TCMalloc的全称为Thread-CachingMalloc，是谷歌开发的开源工具google-perftools中
[root@localhost gocgle-perftools-1.8]#echo "/usr/local/lib">/etc/ld.so.conf.d/
rootolocalhost
[rootalocalhost
rootalocalhost
root@localhost
root@localhost
usr_local_lib.conf
利用TCMalloc优化Nginx的性能
www.Linuxidc.com
google-perftools-1.8l#make && make instal1
1ibunwind-0.99-alpha]#make CFLAGS=-fPIC instal1
1ibunwind-0.99-alpha]#make CFLAGS=-fPIC
1ibunwind-0.99-alpha]#CFLAGS=-fPIC ./configure
home] # cd 1ibunwind-0.99-alpha/
下面介绍利用TCMalloc优化Nginx的具体操作过程。
，需要在安装过程中添加“-with-google_perftools
./configure
PDG
---
## Page 40
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
1.6.3Nginx内核参数优化
每个线程会有一行记录。每个线程文件后面的数字值就是启动的Nginx的pid值。
将上面的内核参数值加入/etc/sysctl.conf文件中，然后执行如下命令使之生效：
net.ipv4.tcp_synack_retries =1
net.ipv4.tcp_max_syn_backlog = 262144
net.ipv4.tcp_max_tw_buckets = 6000
下面给出一个优化实例以供参考。
内核参数的优化，主要是在Linux系统中针对Nginx应用而进行的系统内核参数优化。
至此，利用TCMalloc优化Nginx的操作完成。
[root@localhost home]#/sbin/sysctl-p
由于在Nginx配置文件中设置worker_processes的值为4，因此开启了4个Nginx线程，
nginx
nginx
ngi
nginx
[root@ localhost home]# lsof
为了验证google-perftools已经正常加载，可通过如下命令查看：
6.验证运行状态
接着，重启Nginx即可完成google-perftools的加载。
google_perftools_profiles/tmp/tcmalloc;