f.write("\n\n")
for
f.write('Parent Directory\n'%(pubutil.parent_dir(self.path)))
list.sort(lambda a,b:cmp(a.lower(),b.lower()))
except os.error:
try:
=StringIO()
list = os.listdir(path)
f.write('%s\n'%(name;displayname))
elif os.path.isdir（fullname):
name in list:
return None
self.send_error(404, "No permission to list directory");
if os.path.islink(fullname):
displayname=name
fullname
Linux公社www.linuxidc.com
displayname=name+"/"
os.path.join(path,name)
#创建内存文件对象
#遍历输出目录文件列表
=cgi.escape(name)
#获取当前目录系统绝对路径列表
#HTML字符转义
#不区分大小写对目录列表做排序
---
## Page 142
(CGIHTTPRequestHandler)，其他实现源码如下：
服务。另外在主服务类中需要继承CGIHTTPRequestHandler基类，例如：class ServerHandler
承了SimpleHTTPRequestHandler类，因此，该类除了可以执行CGI程序外还支持静态文件
序扩展名支持，详细见下面的配置：
yorserver/bin/cgi-bin目录，指定多个目录使用“”号分隔；cgi_extensions参数指定CGI程
if cgi_moudle=="on" and self.path.endswith(cgi_extensions):
CGIHTTPRequestHandler.cgi_directories=cgi_path
Yorserver采用CGIHTTPServer模块来实现CGI支持，其CGIHTTPRequestHandler类继
cgi_extensions="('.cgi','.py','.pl','.php')"
# cgi_extensions: configure cgi file extension
cgi_path='/cgi-bin',
cgi_moudle="on"
#cgi_moudle:Enable(on) or Disable(off) cgi support.
[cgim]
tpw
Directory listing for/
件编（E）查春（V)收蒙央（A）工具（T）帮助（H)）
return CGIHTTPRequestHandler.do_GET(self)
eteres
Started
T/1.2
Linux公社 www.linuxidc.com
TeneChart
图8-8目录列表
SentReceived Method
第8章从“零”开发一个轻量级WebServer115
本e：Sat
t,19J
200
#调用cgi do_GET（）方法，返回执行结果
htp://192.168.1.0/
TypeURL
#指定CGI路径
#扩展名列表中
#开启CGI且在配置
Q Find Bb Export
---
## Page 143
116第二部分高级篇
执行结果如图8-9所示。
print""
print my_list
bubble(my_list)
def bubble(bad_list):
my_1ist=[23,45,67,3,56,82,24,23,5,77,19,33,51,99]
print "Python 冒泡排序测试"
#coding=utf-8
#!/usr/bin/env python
【 bin/cgi-bin/index.py 】
下面列举 Python与 PHP CGI 实现冒泡排序法的示例。代码如下：
[3,5,19,23,23,24,33,45,51,56,67,77,82,99]
文件（F(E）查春（V)收藏夹(A）工具(T）帮助（H)
while not sorted:
length=len(bad_list)-1
for i in range(length):
sorted = True
Linux公社www.linuxidc.com
if bad_list[i]>bad_list[i+1]:
bad_list[i],bad_list[i+l] = bad_list[i+l], bad_list[i]
sorted = False
图8-9Python CGI运行结果图
Time
FindExport
Sent
Received Method
0
Result
outputfol
pu
---
## Page 144
执行结果如图8-10所示。
print_r(bubb1e(array(23,45,67,3,56,82,24,23,5,77,19,33,51,99)));
echo "PHP 冒泡排序测试";
#!/usr/bin/env php
【 bin/cgi-bin/index.php 】
V
return $array;
for($i=0,$len=count($array)-1;$iSi;--$j）{
Time
if($array[$j]<$array[$j-1])
Linux公社 www.linuxidc.com
hemax
1la
中冒泡排序测式
$array[Sj-1]=Stemp;
$array[$j]=$array[$j-1];
$temp =$array[$j];
图8-10PHPCGI运行结果图
Time
Sent
第8章从“零”开发一个轻量级WebServer
Recehved Method
PHP
415bytes
Result
TypeURL
tpu
follou
Gnep
QFindExport
国回
11
---
## Page 145
台、大数据都有很好的支持。Ansible在GitHub上的地址为https:/github.com/ansible/，其中
理、状态配置，都使用YAML 格式来描述配置，两者都提供丰富的模板及API，对云计算平
接通过SSH通道进行远程命令执行或下发配置；相同点是都具备功能强大、灵活的系统管
Modules（模块）、Plugins（插件）组成。
（配置管理数据库）中的主机，其中Ansible 编排引擎由Inventory（主机与组规则）、API、
构建。Ansible具有如下特点：
于2012年创建成立。Ansible基于Python语言实现，由Paramiko和PyYAML两个关键模块
特定任务的开源平台，是AnsibleWorks公司名下的项目，该公司由Cobbler及Func的作者
Chopter9
Ansible与 Saltstack最大的区别是Ansible无需在被控主机部署任何客户端代理，默认直
Ansible的架构图见图9-1，用户通过Ansible编排引擎操作公共/私有云或CMDB
口提供一个功能强大、操作性强的Web管理界面和RESTAPI接口一
口对云计算平台、大数据都有很好的支持；
口通过Playbooks来定制强大的配置、状态管理；
口支持API及自定义模块，可通过Python轻松扩展；
口配置简单、功能强大、扩展性强：
口主从集中化管理；
口默认使用SSH（Secure SHell）协议对设备进行管理；
口部署简单，只需在主控端部署 Ansible 环境，被控端无需做任何操作；
Ansible（http://www.ansibleworks.com/）一种集成IT系统的配置管理、应用部署、执行
集中化管理平台Ansible详解
第9章
Linux公社 www.linuxidc.com
一AWX平台。
---
## Page 146
示例定义了在master的不同业务环境下文件根路径的描述：
YAML格式存在，熟悉YAML结构及语法对我们理解两环境的相关配置至关重要。下面的
单明了、支持丰富的语言解析库、通用性强等。Ansible与Saltstack环境中配置文件都以
9.1
介绍。
提供了不少配置例子供参考，本文测试的版本为1.3.2。
YAML是一种用来表达数据序列的编程语言，它的主要特点包括：可读性强、语法简
为了方便读者更系统化地了解Ansible的技术点，本章将针对相关技术点进行详细展开
file_roots:
YAML 语言
dev:
base:
/srv/salt/dev
即可安装到本地，该角色的详细地址为：https://galaxy.ansibleworks.com/list#/roles/2。
提供的Nginx安装与配置的角色，直接运行“ansible-galaxy installbennojoy.nginx”
“ansible-galaxy install作者id.角色包名称”就可以安装到本地，比如想安装bennojoy
该平台汇聚了各类常用功能的角色，找到适合自已的Role（角色）后，只需要运行
/srv/salt/
Linux公社 www.linuxidc.com
Cloud
图9-1Ansible架构图
第9章集中化管理平台Ansible详解119
---
## Page 147
9.1.2
Python的对应关系：
9.1.1
块序列与块映射的示例详细说明。
构，最常见的是映射到Python中的列表（List）、字典（Dictionary）两种对象类型。下面通过
120第二部分高级篇
块序列就是将描述的元素序列到Python的列表（List）中。以下代码演示了YAML与
块映射就是将描述的元素序列到 Python 的字典（Dictionary）中，格式为“键（key）：值
对应的Python结果为：
YAML 也存在类似于Python块的概念，例如：
本例中引用“-”来分隔列表中的每个元素，运行结果如下：
print obj
obj=yaml.1oad(
本节主要通过YAML描述与Python的对应关系，从而方便读者了解YAML的层次及结
'USA',
[['Hesperiidae',
['Hesperiidae','Papilionidae'，'Apatelodidae'，'Epiplemidae']
import yaml
prod:
块映射描述
Japan
Epiplemidae
Hesperiidae
Epiplemidae
Hesperiidae
块序列描述
-/srv/salt/prod
USA
China
Apatelodidae
Papilionidae
Apatelodidae
Papilionidae
'Japan']]
Linux公社 www.linuxidc.com
'Papilionidae'，'Apatelodidae','Epiplemidae']，['China',
---
## Page 148
(CPU核数及Nginx根目录的差异化是为方便演示生成动态配置需要)：
者的操作系统版本为CentOSrelease6.4，自带Python 2.6.6。相关服务器信息如表9-1所示
9.2.1
9.2
非常灵活的组合，可以帮助我们描述更加复杂的对象属性，例如：
（value)”，以下为YAML例子：
具体步骤。
为了方便读者理解，笔者通过虚拟化环境部署了两组业务功能服务器来进行演示。笔
Ansible只需在管理端部署环境即可，建议读者采用 yum 源方式来实现部署，下面介绍
['hero':('hp': 34,'sp': 8, 'level': 4}), ('orc':('hp':[12, 30], 'sp':0,
对应的Python结果为：
-hero:
当然，YAML块序列与块映射是可以自由组合在一起的，它们之间可以相互嵌套，通过
('hero':('hp':34,'sp′:8,'1eve1':4),orc':{'hp':12,sp':0,'1evel′:2））
对应的Python 结果为：
'level':2}}]
orc:
orc:
hero:
业务环境说明
Ansible的安装
level:2
hp:
level:
sp:0
hp:
level:4
sp:
1
30
12
12
8
8
34
Linux公社www.linuxidc.com
第9章
集中化管理平台Ansible详解
121
---
## Page 149
示的结果表示安装、测试成功。
同时定义两个IP到webservers 组，更新的内容如下：
9.2.4
9.2.3
为部署Ansible 的默认 yum 源。
9.2.2
122第二部分高级篇
minion
Master
第一步是修改主机与组配置，
minion
角色
通过ping模块测试主机的连通性，
【/etc/ansible/hosts】
主服务器安装（主控端），代码如下：
 RHEL(CentOS)5 版本 : rpm -Uvh hp://mirror.pnl.gov/epel/5/i386/epel-release-5-4.noarch.rpm
由于目前RHEL官网的 yum源还没有得到Ansible的安装包支持，因此先安装EPEL作
192.168.1.22
#beta.example.org
#alpha.example.org
[webservers]
192.168.1.22
192.168.1.21
#blue.example.com
#green.example.com
#yum install ansible -y
92.168.1.21
Ansible配置及测试
安装 Ansible
6-8.noarch.rpm
安装 EPEL
SN2013-08-022
SN2013-08-021
SN2013-08-020
主机名
Linux公社 www.linuxidc.com
192.168.1.22
192.168.1.21
192.168.1.20
，文件位置/etc/ansible/hosts，格式为ini，添加两台主机IP，
P
表9-1
，分别对单主机及组进行ping操作，出现如图9-2所
webservers
webservers
组名
业务环境表
Cpus（核数）
WebRoot（Nginx根目录）
/data
/data
---
## Page 150
到被控主机用户.ssh目录，同时要求重命名成 authorized_keys文件)。
键即可，将在/root/.ssh/下生成一对密钥，其中id_rsa为私钥，id_rsa.pub 为公钥（需要下发
keygen 生成一对密钥，使用 ssh-copy-id来下发生成的公钥。具体操作如下。
好的方案，推荐使用 ssh-keygen 与 ssh-copy-id 来实现快速证书的生成及公钥下发，其中 ssh-
9.2.5
在主控端主机（SN2013-08-020）创建密钥，执行：ssh-keygen-t rsa，有询问直接按回车
为了避免Ansible下发指令时输入目标主机密码，通过证书签名达到SSH无密码是一个
提示
Thekey's randomartimageis:
Bd:f0:47:c6:b9:55:5b:c0:0e:04:ec:e2:9c:38:f6:84 r0ot@SN2013-08-020
The key fingerprint is:
Your publickeyhas beensavedin/root/.ssh/id_rsa.pub
Your identification has been saved in /root/.ssh/id_rsa.
Generating public/private rsa key pair.
配置Linux主机SSH无密码访问
webservers-m ping-u ansible-sudo。
于使用Linux普通用户账户进行连接并使用sudo命令实现root权限，格式为：ansible
要求提供root（默认）账号密码，即在提示“SSH password:”时输入。很多人更倾向
由于主控端与被控主机未配置 SSH证书信任，需要在执行ansible命令时添加-k参数
Linux公社www.linuxidc.com
..0..0..
ESN2013-
图9-2测试主机连通性
08-
020
第9章
集中化管理平台Ansible详解
123
---
## Page 151
式如下：
域名、IP、别名进行标识，其中 webservers、dbservers 为组名，紧跟着的主机为其成员。格
9.3.1
规则文件默认是/etc/ansible/hosts。
9.3
提示符，则说明配置成功。