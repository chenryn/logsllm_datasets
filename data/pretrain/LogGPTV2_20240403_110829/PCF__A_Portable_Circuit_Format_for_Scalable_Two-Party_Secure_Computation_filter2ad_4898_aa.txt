title:PCF: A Portable Circuit Format for Scalable Two-Party Secure Computation
author:Benjamin Kreuter and
Abhi Shelat and
Benjamin Mood and
Kevin R. B. Butler
PCF: A Portable Circuit Format for Scalable  
Two-Party Secure Computation
Ben Kreuter, University of Virginia; Benjamin Mood, University of Oregon;  
abhi shelat, University of Virginia; Kevin Butler, University of Oregon
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4PCF: A Portable Circuit Format For Scalable Two-Party Secure
Computation
Computer Science Dept.
Computer and Info. Science Dept.
Computer Science Dept.
Benjamin Mood
Ben Kreuter
U. Virginia
abhi shelat
U. Virginia
U. Oregon
Kevin Butler
U. Oregon
Computer and Info. Science Dept.
Abstract
A secure computation protocol for a function f (x,y)
must leak no information about inputs x,y during its ex-
ecution; thus it is imperative to compute the function f
in a data-oblivious manner. Traditionally, this has been
accomplished by compiling f into a boolean circuit. Pre-
vious approaches, however, have scaled poorly as the cir-
cuit size increases. We present a new approach to com-
piling such circuits that is substantially more efﬁcient
than prior work. Our approach is based on online cir-
cuit compression and lazy gate generation. We imple-
mented an optimizing compiler for this new representa-
tion of circuits, and evaluated the use of this representa-
tion in two secure computation environments. Our eval-
uation demonstrates the utility of this approach, allow-
ing us to scale secure computation beyond any previous
system while requiring substantially less CPU time and
disk space. In our largest test, we evaluate an RSA-1024
signature function with more than 42 billion gates, that
was generated and optimized using our compiler. With
our techniques, the bottleneck in secure computation lies
with the cryptographic primitives, not the compilation or
storage of circuits.
1
Introduction
Secure function evaluation (SFE) refers to several related
cryptographic constructions for evaluating functions on
unknown inputs. Typically, these constructions require
an oblivious representation of the function being eval-
uated, which ensures that the control ﬂow of the algo-
rithm will not depend on its input; in the two party case,
boolean circuits are most frequently seen. These oblivi-
ous representations are often large, with millions and in
some cases billions of gates even for relatively simple
functions, which has motivated the creation of software
tools for producing such circuits. While there has been
substantial work on the practicality of secure function
evaluation, it was only recently that researchers began
investigating the practicality of compiling such oblivious
representations from high-level descriptions.
The work on generating boolean circuits for SFE has
largely focused on two approaches.
In one approach,
a library for a general purpose programming language
such as Java is created, with functions for emitting cir-
cuits [13, 20]. For convenience, these libraries typically
include pre-built gadgets such as adders or multiplex-
ers, which can be used to create more complete func-
tions. The other approach is to write a compiler for a
high level language, which computes and optimizes cir-
cuits based on a high level description of the functional-
ity that may not explicitly state how the circuit should
be organized [18, 21].
It has been shown in previous
work that both of these approaches can scale up to cir-
cuits with at least hundreds of millions of gates on mod-
ern computer hardware, and in some cases even billions
of gates [13, 18].
The approaches described above were limited in terms
of their practical utility. Library-based approaches like
HEKM [13] or VMCrypt [20] require users to understand
the organization of the circuit description of their func-
tion, and were unable to apply any optimizations across
modules. The Fairplay compiler [21] was unable to scale
to circuits with only millions of gates, which excludes
many interesting functions that have been investigated.
The poor scalability of Fairplay is a result of the com-
piler ﬁrst unrolling all loops and inlining all subroutines,
storing the results in memory for later compiler stages.
The PALC system [23] was more resource efﬁcient than
Fairplay, but did not attempt to optimize functions, re-
lying instead on precomputed optimizations of speciﬁc
subcircuits. The KSS12 [18] system was able to apply
some global optimizations and used less memory than
Fairplay, but also had to unroll all loops and store the
complete circuit description, which caused some func-
tions to require days to compile. Additionally, the lan-
guage used to describe circuits in the KSS12 system was
USENIX Association  
22nd USENIX Security Symposium  321
1
brittle and difﬁcult to use; for example, array index val-
ues could not be arbitrary functions of loop indices.
1.1 Our Approach
In this work, we demonstrate a new approach to compil-
ing, optimizing, and storing circuits for SFE systems. At
a high level, our approach is based on representing the
function to be evaluated as a program that computes the
circuit representation of the function, similar to the cir-
cuit library approaches described in previous work. Our
compiler then optimizes this program with the goal of
producing a smaller circuit. We refer to our circuit rep-
resentation as the Portable Circuit Format (PCF).
When the SFE system is run, it uses our interpreter
to load the PCF program and execute it. As the PCF
program runs, it interacts with the SFE system, managing
information about gates internally based on the responses
from the SFE system itself. In our system, the circuit is
ephemeral; it is not necessary to store the entire circuit,
and wires will be deleted from memory once they are no
longer required.
The key insight of our approach is that it is not neces-
sary to unroll loops until the SFE protocol runs. While
previous compilers discard the loop structure of the func-
tion, ours emits it as part of the control structure of the
PCF program. Rather than dealing directly with wires,
our system treats wire IDs as memory addresses; a wire
is “deleted” by overwriting its location in memory. Loop
termination conditions have only one constraint:
they
must not depend on any secret wire values. There is no
upper bound on the number of loop iterations, and the
programmer is responsible for ensuring that there are no
inﬁnite loops.
To summarize, we present the following contributions:
• A new compiler that has the same advantages as the
circuit library approach
• A novel, more general algorithm for translating con-
ditional statements into circuits
• A new representation of circuits that is more com-
pact than previous representations which scales to
arbitrary circuit sizes.
• A portable interpreter that can be used with differ-
ent SFE execution systems regardless of the security
model.
Our compiler is a back end that can read the byte-
code emitted by a front end; thus our compiler allows
any language to be used for SFE. Instead of focusing on
global optimizations of boolean functions, our optimiza-
tion strategy is based on using higher-level information
from the bytecode itself, which we show to be more ef-
fective and less resource-intensive. We present compar-
isons of our compiler with previous work and show ex-
perimental results using our compiler in two complete
SFE systems, one based on an updated version of the
KSS12 system and one based on HEKM. In some of our
test cases, our compiler produced circuits only 30% as
large as previous compilers starting from the same source
code. With the techniques presented in this work, we
demonstrate that the RSA algorithm with a real-world
key size and real-world security level can be compiled
and run in a garbled circuit protocol using a typical desk-
top computer. To the best of our knowledge, the RSA-
1024 circuit we tested is larger than any previous garbled
circuit experiment, with more than 42 billion gates. We
also present preliminary results of our system running
on smartphones, using a modiﬁed version of the HEKM
system.
For testing purposes, we used the LCC compiler [8]
as a front-end to our system. A high-level view of our
system, with the LCC front-end, is given in Figure 1.
The rest of this paper is organized as follows: Sec-
tion 2 is a review of SFE and garbled circuits; Section 3
presents an overview of bytecode languages; Section 4
explains our compiler design and describes our represen-
tation; Section 5 discusses the possibility of using dif-
ferent bytecode and SFE systems; Section 6 details the
experiments we performed to evaluate our system and re-
sults of those experiments; Section 7 details other work
which is related to our own; and Section 8 presents future
lines of research.
2 Secure Function Evaluation
The problem of secure two-party computation is to allow
two mutually distrustful parties to compute a function
of their two inputs without revealing their inputs to the
opposing party (privacy) and with a guarantee that the
output could not have been manipulated (correctness).
Yao was the ﬁrst to show that such a protocol can be
constructed for any computable function, by using the
garbled circuits technique [30]. In his original formula-
tion, Yao proposed a system that would allow users to de-
scribe the function in a high level language, which would
then be compiled into a circuit to be used in the garbled
circuits protocol. The ﬁrst complete implementation of
this design was the Fairplay system given by Malkihi et
al. [21].
Oblivious Transfer One of the key building blocks
in Yao’s protocol is oblivious transfer, a cryptographic
primitive ﬁrst proposed by Rabin [25]. In this primitive,
the “sender” party holds a database of n strings, and the
“receiver” party learns exactly k strings with the guar-
antee that the sender will not learn which k strings were
322  22nd USENIX Security Symposium 
USENIX Association
2
C Compiler
LCC to PCF 
Compiler
LCC 
Bytecode
PCF File
Gen. PCF 
Interpreter
Evl. PCF 
Interpreter
Figure 1: High-level design of our system. We take a C
program and compile it down to the LCC bytecode. Our
compiler then transforms the LCC bytecode to our new
language PCF. Both parties then execute the protocol in
their respective role in the SFE protocol. The interpreter
could be any execution system.
sent and the receiver will not learn more than k strings;
this is known as a k-out-of-n oblivious transfer. Given a
public key encryption system it is possible to construct
a 1-out-of-2 oblivious transfer protocol [7], which is the
building block used in Yao’s protocol.
Garbled Circuits The core of Yao’s protocol is the con-
struction of garbled circuits, which involves encrypting
the truth table of each gate in a circuit description of the
function. When the protocol is run, the truth values in the
circuit will be represented as decryption keys for some
cipher, with each gate receiving a unique pair of keys for
its output wire. The keys for a gate’s input wires are then
used to encrypt the keys for its output wires. Given a sin-
gle key for each input wire of the circuit, the party that
evaluates the circuit can decrypt a single key that rep-
resents a hidden truth value for each gate’s output wire,
until the output gates are reached. Since this encryption
process can be applied to any circuit, and since any com-
putable function has a corresponding circuit family, this
allows the construction of a secure protocol for any com-
putable function.
The typical garbled circuit protocol has two parties
though it can be expanded to more. Those two parties
are Bob, the generator of the garbled circuit, and Alice,
the evaluator of the garbled circuit. Bob creates the gar-
bled circuit and therefore knows the decryption keys, but
does not know which speciﬁc keys Alice uses. Alice will
receive the input keys from Bob using an oblivious trans-
fer protocol, and thus learns only one key for each input
wire; if the keys are generated independent of Bob’s in-
put, Alice will learn only enough to compute the output
of the circuit.
Several variations on the Yao protocol have been pub-
lished; a simple description of the garbling and eval-
f : {0,1}A × {0,1}B →
uation process follows. Let
{0,1} j × {0,1}k be a computable function, which will
receive input bits from two parties and produce output
bits for each party (not necessarily the same outputs). To
garble the circuit, a block cipher (cid:27)E,D,G(cid:26) will be used.
For each wire in the circuit, Bob computes a pair of
random keys (k0,k1) ← (G(1n),G(1n)), which represent
logical 0 and 1 values. For each of Alice’s outputs, Bob
uses these keys to encrypt a 0 and a 1 and sends the pair
of ciphertexts to Alice. Bob records the keys correspond-
ing to his own outputs. The rest of the wires in the cir-
cuit are inputs to gates. For each gate, if the truth table is
[v0,0,v0,1,v1,0,v1,1], Bob computes the following cipher-
text:
(cid:31)Ekl,0(Ekr,0(kv0,0)),Ekl,0(Ekr,1(kv0,1))
Ekl,1(Ekr,0(kv1,0)),Ekl,1(Ekr,1(kv1,1))(cid:30)
where kl,∗ and kr,∗ are the keys for the left and right input
wires (this can be generalized for gates with more than
two inputs). The order of the four ciphertexts is then
randomly permuted and sent to Alice.
Now that Alice has the garbled gates, she can begin
evaluating the circuit. Bob will send Alice his input wire
keys. Alice and Bob then use an oblivious transfer to give
Alice the keys for her input wires. For each gate, Alice
will only be able to decrypt one entry, and will receive
one key for the gate’s output, and will continue to de-
crypt truth table entries until the output wires have been
computed. Alice will then send Bob his output keys, and
decrypt her own outputs.
Optimizations Numerous optimizations to the basic Yao
protocol have been published [10, 13, 17, 24, 27]. Of
these, the most relevant to compiling circuits is the “free
XOR trick” given by Kolesnikov and Schneider [17].
This technique allows XOR gates to be evaluated with-
out the need to garble them, which greatly reduces the
amount of data that must be transferred and the CPU time
required for both the generator and the evaluator. One ba-
sic way to take advantage of this technique is to choose
subcircuits with fewer non-XOR gates; Schneider pub-
lished a list of XOR-optimal circuits for even three-input
functions [27].
Huang et al. noted that there is no need for the eval-
uator to wait for the generator to garble all gates in the
circuit [13]. Once a gate is garbled, it can be sent to
the evaluator, allowing generation and evaluation to oc-
cur in parallel. This technique is very important for large
circuits, which can quickly become too large to store in
RAM [18]. Our approach uniﬁes this technique with the
use of an optimizing compiler.
3 Bytecode
A common approach to compiler design is to translate a
high level language into a sequence of instructions for a
simple, abstract machine architecture; this is known as
the intermediate representation or bytecode. Bytecode
representations have the advantage of being machine-
independent, thus allowing a compiler front-end to be
used for multiple target architectures. Optimizations per-
USENIX Association  
22nd USENIX Security Symposium  323
3
C Codeformed on bytecode are machine independent as well; for
example, dead code elimination is typically performed
on bytecode, as removing dead code causes programs to
run faster on all realistic machines.
For the purposes of this work, we focus on a com-
monly used bytecode abstraction, the stack machine. In
this model, operands must be pushed onto an abstract
stack, and operations involve popping operands off of the
stack and pushing the result. In addition to the stack, a
stack machine has RAM, which is accessed by instruc-
tions that pop an address off the stack. Instructions in
a stack machine are partially ordered, and are divided
into subroutines in which there is a total ordering.
In
addition to simple operations and operations that interact
with RAM, a stack machine has operations that can mod-
ify the program counter, a pointer to the next instruction
to be executed, either conditionally or unconditionally.
At a high level, our system translates bytecode pro-
grams for a stack machine into boolean circuits for SFE.
At ﬁrst glance, this would appear to be at least highly
inefﬁcient, if not impossible, because of the many ways
such an input program could loop. We show, however,
that imposing only a small set of restrictions on permis-
sible sequences of instructions enables an efﬁcient and
practical translator, without signiﬁcantly reducing the us-
ability or expressive power of the high level language.
4 System Design
Our system divides the compiler into several stages, fol-
lowing a common compiler design. For testing, we used
the LCC compiler front end to parse C source code and
produce a bytecode intermediate representation (IR). Our
back end performs optimizations and translates the byte-
code into a description of a secure computation proto-
col using our new format. This representation greatly re-
duces the disk space requirements for large circuits com-
pared to previous work, while still allowing optimiza-
tions to be done at the bit level. We wrote our compiler
in Common Lisp, using the Steel Bank Common Lisp
system.
4.1 Compact Representations of Boolean
Circuits
In Fairplay and the systems that followed its design, the
common pattern has been to represent Boolean circuits as
adjacency lists, with each node in the graph being a gate.
The introduces a scalability problem, as it requires stor-
age proportional to the size of the circuit. Generating,
optimizing, and storing circuits has been a bottleneck
for previous compilers, even for relatively simple func-
tions like RSA. Loading such large circuits into RAM
…   ...
NO
Loop?
YES
Memory
…   ...
LOC: 33+i
LOC: 1+i
LOC: 65+i
OR
Memory
LOC: 65+i
LOC: 97+i
LOC: 65+i
OR
…   ...