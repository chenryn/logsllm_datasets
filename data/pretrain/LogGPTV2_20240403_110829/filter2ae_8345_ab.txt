`Content-Type: multipart/form-data; boundary="I_am_a_boundary`
`Content-Type: multipart/form-data; boundary="I_am_a_boundary"aa"`
`Content-Type: multipart/form-data; boundary=""I_am_a_boundary"`
对于php来说相对简单，因为只要出现第一个字符不是双引号，就算是空格，都会将之作为boundary的一部分，所以前四种解析类似，当第一个字符为双引号时，会找与之对应的闭合的双引号，如果找到了，那么就会忽略之后的内容直接取双引号内内容作为boundary的值。
然而如果没有找到闭合双引号，就会导致boundary取值失败，无法解析multipart/form-data。
当然对于最后一种情况，会取一个空的boundary值，我也以为会解析失败，但是很搞笑的是，竟然boundary值为空，php也可以正常解析，当然也可以直接写成`Content-Type: multipart/form-data; boundary=`。
大多数waf应该会认为这是一个不符合规范的boundary，从而导致解析multipart/form-data失败，所以这种绕过waf的方式显得更加粗暴。
对于flask来说，可以看下解析boundary的正则`werkzeug/http.py:L79`。
    _option_header_piece_re = re.compile(
        r"""
        ;\s*,?\s*  # newlines were replaced with commas
        (?P
            "[^"\\]*(?:\\.[^"\\]*)*"  # quoted string
        |
            [^\s;,=*]+  # token
        )
        (?:\*(?P\d+))?  # *1, optional continuation index
        \s*
        (?:  # optionally followed by =value
            (?:  # equals sign, possibly with encoding
                \*\s*=\s*  # * indicates extended notation
                (?:  # optional encoding
                    (?P[^\s]+?)
                    '(?P[^\s]*?)'
                )?
            |
                =\s*  # basic notation
            )
            (?P
                "[^"\\]*(?:\\.[^"\\]*)*"  # quoted string
            |
                [^;,]+  # token
            )?
        )?
        \s*
        """,
这个正则可以解释本文的大多数flask解析结果产生的原因，这里看到flask对于boundary两边的空格是做了处理的，对于双引号的处理，都会取第一对双引号内的内容作为boundary的值，对于非闭合的双引号，会处理成`token`形式，将双引号作为boundary的一部分，并不会像php一样解析boundary失败。
从上面正则也能看出，对于最后一种Content-Type的情况，flask也会取空值作为boundary的值，但是这不会同过flask对boundary的正则验证，导致boundary取值失败，无法解析，下文会提及到。
#### 转义符号
以flask的正则中`quoted string`和`token`作为区分是否boundary为双引号内取值，测试两种转义符的位置会怎样影响解析。
  * `\`在`token`中
`Content-Type: multipart/form-data; boundary=I_am_a\"_boundary`
这种形式的boundary，flask和php都会将`\`认定为一个字符，并不具有转义作用，并将整体的`I_am_a\"_boundary`内容做作为boundary的值。
  * `\`在`quoted string`中
`Content-Type: multipart/form-data; boundary="I_am_a\"_boundary"`
对于flask来说，在双引号的问题上，`werkzeug/http.py:L431`中调用一个处理函数，就是取双引号之间的内容作为boundary的值。
可以看到，在取完boundary值之后还做了一个`value.replace("\\\\", "\\").replace('\\"',
'"')`的操作，将转义符认定为具有转义的作用，而不是单单一个字符，所以最终boundary的值是`I_am_a"_boundary`。
对于php来说，依旧和`token`类型的boundary处理机制一样，认定`\`只是一个字符，不具有转义作用，所以按照上文`双引号`中提到的，由于遇到第二个双引号就会直接闭合双引号，忽略后面内容，最终php会取`I_am_a\`作为boundary的值。
#### 空格 & 双引号
上文提到使用空格对解析的影响，既然可以使用双引号来指定boundary的值，那么如果在双引号外或者内加入空格，后端会如何解析呢？
  * 双引号外
对于flask来说，依旧和普通不加双引号的解析一致，会忽略双引号外（两边）的空格，直接取双引号内的内容作为boundary的值，php对于双引号后面有空格时，处理机制和flask一致，但是当双引号前面有空格时，会无法正常解析表单数据内容。
解析会和不带双引号的实现一致，此时php会将前面的空格和后面的双引号和双引号的内容作为一个整体，将之作为boundary的值，当然这虽然符合RFC规定的boundary可以以空格开头，但是把双引号当作boundary的一部分并不符合。
  * 双引号内
此时php会取双引号内的所有内容（非双引号）作为boundary的值，无论是以任意空格开头还是结束，其分隔行中boundary前后的空格数，要与Content-Type中双引号内boundary前后的空格个数一致，否则解析失败。
值得注意的是，flask解析的时候，如果双引号内的boundary值以空格开始，那么在分隔行中类似php只要空格个数一致，就可以成功解析，但是如果双引号内的boundary的值以空格结束，无论空格个数是否一致，都无法正常解析。
想知道为什么出现这种状况，只能看下werkzeug是如何实现的，flask对boundary的验证可以在`werkzeug/formparser.py:L46`看到。
      #: a regular expression for multipart boundaries
      _multipart_boundary_re = re.compile("^[ -~]{0,200}[!-~]$")
这个正则是来验证boundary有效性的，比较符合RFC规定的，只不过在长度上限制更小，可以是空格开头，不能以空格结尾，但是用的不是全匹配，所以以空格结尾也会通过验证。
上图使用`boundary= " I_am_a_boundary "`，所以boundary的值为`" I_am_a_boundary
"`双引号内的内容，而且这个值也会通过boundary正则的验证，最终还是解析失败了，很是是奇怪。上文`空格`中提到，对于flask来说，在分隔行中boundary后可以加任意空格不影响最终的解析的。
原因是解析multipart/form-data具体内容时，为了寻找分割行，将每一行数据都进行了一个`line.strip()`操作，这样会把CRLF去除，当然会把结尾的所有空格也给strip掉，所以当boundary不以空格结尾时，在分隔行中可以随意在结尾加空格。但是这也会导致一个问题，当不按照RFC规定，用空格结尾作为boundary值，虽然过了flask的boundary正则验证，但是在解析body时，却将结尾的空格都strip掉，导致在body中分隔行经过处理之后变为了`--I_am_a_boundary`，这与Content-Type中获取的boundary值（结尾含有空格）并不一致，导致找不到分隔行，解析全部失败。
#### 结束分隔行
在上文`空格`内容中提到，php在结束分割行中的boundary后面加空格并不会影响最终的解析，其实并不是空格的问题，经测试发现，其实php根本就没把结束分隔行当回事。
可以看到，没有结束分隔行，php会根据每一分隔行来分隔各个表单部分，并根据Content-Length来进行取表单最后一部分的内容的值，然而这是极不尊重RFC规定的，一般waf会将这种没有结束分隔行的视为错误的multipart/form-data格式，从而导致整体body解析失败，那么waf可以被绕过。
上文提到flask会对multipart/form-data的每一行内容进行strip操作，但是由于结束分隔行需要以`--`结尾，所以在strip的过程中只会将`CRLF`strip掉，但是在解析boundary的时候，boundary是不能以空格为结尾的，最终会导致结束分隔行是严谨的`--BOUNDARY
--CRLF`，当然如果使用双引号使boundary以空格结尾，那么结束分隔行是可以正确解析的，但是非结束分隔行无法解析还是会导致整体解析失败。
#### 其他
从flask的代码能够看出来，支持参数名的`quoted string`形式，就是参数名在双引号内。
而对于Java来说，支持参数名的大小写不敏感的写法。
### 3\. Content-Disposition
对于multipart/form-data类型的数据，通过分隔行分隔的每一部分都必须含有Content-Dispostion，其类型为form-data，并且必须含有一个name参数，形如`Content-Disposition: form-data;
name="name"`，如果这部分是文件类型，可以在后面加一个filename参数，当然filename参数是可选的。
#### 空格
经常和waf打交道的都知道，随便一个空格，可能就会发生奇效。对于Content-Disposition参数，测试在四个位置加任意的空格。
  * 原本有空格的位置
`Content-Disposition: form-data; name="key1"; filename="file.php"`
`Content-Disposition: form-data; name="key1" ; filename="file.php"`
`Content-Disposition: form-data; name="key1" ; filename="file.php"`
`Content-Disposition: form-data ; name="key1" ; filename="file.php"`
前三种类型，php和flask解析都是准确的。
但是第四种对于`Content-Disposition: form-data ;`来说，php解析准确，认为其是正常的multipart/form-data数据，然而flask解析失败了，并且直接返回了500（：
这里flask处理Content-Disposition的方式是和request_header中Content-Type是一致的，经过了`r",\s*([^;,\s]+)([;,]\s*.+)?"`匹配，由于空格导致后面的name和filename无法解析，只不过这种情况会返回500。对于后续的name和filename得解析也是和request_header中Content-Type一致，后面匹配中的group作为rest进行后续的正则匹配，匹配用到的正则，是上文第2部分（Boundary）双引号中的`_option_header_piece_re`。
  * 参数名和等于号之间
`Content-Disposition: form-data; name ="key1"; filename="file.php"`
`Content-Disposition: form-data; name="key1"; filename ="file.php"`
flask正常解析
php解析失败，不仅第一部分数据无法解析，第二部分非文件参数也解析失败，可见php解析会将`name=`/`filename=`作为关键字匹配，当发现`name=`和`filename=`都不存在时，直接不再解析了，这与boundary的解析是不一样的，使用`Content-Type: multipart/form-data; boundary =I_am_a_boundary`一样可以正常解析处boundary的值。
如果我们不在name和等于号之间加空格，只在filename和等于号之间加空格，形如`Content-Disposition: form-data;
name="key1"; filename ="file.txt"`，那么php会将这种解析会非文件参数。
如果waf支持这种多余空格形式的写法，那么将会把这种解析为文件类型，造成解析上的差异，waf错把非文件参数当作文件，那么可能绕过waf的部分规则。
  * 参数值和等于号之间
`Content-Disposition: form-data; name= "key1"; filename= "file_name"`
php和flask解析正常。
  * 参数值中
这个没啥注意的，flask会按照准确的name解析。
php会忽略开头的空格，并把非开头空格转化为`_`，具体原因可以看[php-variables](https://www.php.net/manual/zh/language.variables.external.php)。
#### 重复参数
  * 重复name/filename参数名
php和flask都会取最后一个name/filename，从flask代码来看，存储参数使用了字典，由于具有相同的key=name，所以最后在解析的时候，遇到相同key的参数，会进行参数值的覆盖。
这种重复参数名的方式，在下文中将结合其他方式进行绕过waf。
  * 重复name/filename参数名和参数值
接着尝试重复整个form-data的一部分，构造这样一个数据包进行测试。
      --I_am_a_boundary
      Content-Disposition: form-data; name="key3"; filename="file_name.asp"
      Content-Type: text/plain;charset=UTF-8
      This_is_file_content.
      --I_am_a_boundary
      Content-Disposition: form-data; name="key3"; filename="file_name.jsp"
      Content-Type: text/plain;charset=UTF-8
      This_is_file2_content.
      --I_am_a_boundary
      Content-Disposition: form-data; name="key5";
      Content-Type: text/plain;charset=UTF-8