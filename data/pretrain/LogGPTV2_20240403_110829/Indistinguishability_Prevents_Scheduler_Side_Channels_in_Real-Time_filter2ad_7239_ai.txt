uniform distribution) with a range of [0, 2 · 𝑙𝑒𝑛(𝑎𝑟𝑟𝑎𝑦𝑃𝑃𝐹) − 1] (i.e.,
two times of the length of the PPF array). Line 3 to line 7 convert the
random number into a feasible index to obtain a sample value from
the PPF array. If the random number is greater than the array’s
length, a negative sample value is generated. Otherwise a positive
value is obtained and returned.
020406080100120140160180200Inter-ArrivalTime(ms)0.000.010.020.030.040.050.06RelativeFrequencyJi=16,∆ηi=190,i=1000.00.10.20.30.40.50.60.70.80.91.0CumulativeProbability−400−300−200−1000100200300400PercentPointFunctionofXJi=16,∆ηi=190,i=100Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea681Table 8: Video Description
Video
1
2
3
4
5
Content
lecture
movie
street
soccer
cartoon
Resolution
640 X 352
640 X 360
480 X 360
640 X 480
640 X 480
FPS
30
30
25
25
25
By eavesdropping on the network traffic during video streaming,
attackers can recognize certain patterns in the traffic. Video fin-
gerprints can be built on the other hand, using the pre-recorded
video files. Hence, attackers can utilize the fingerprints and the
observed traffic pattern to identify which video was being streamed
during eavesdropping. The idea is to merely compare the extracted
video fingerprints with the observed traffic pattern of the video
stream to deduce an individual video. A matching method is nec-
essary for effective outcomes post-comparison. In this way, the
eavesdropped traffic and the video fingerprints provide seamless
video identification.
Real-time video has many varying parameters which make it
difficult to implement an efficient yet accurate attack. There are
many quality levels of recorded video: some have noise, others
are clear. Fingerprinting often is not effective when there is too
much noise in a sample. This is because the fingerprints will not be
unique and are rarely representative of the sample. The bandwidth
plays a major role in the adaptive quality selection in the network.
A high bandwidth automatically transmits samples using higher
quality levels. This makes it problematic to observe a consistent
pattern for the same video in the traffic trace. Another obstacle
is the length of the eavesdropped sample. It is time-consuming to
eavesdrop on the entire video. Also most times, the host doesn’t
play the entire video, so only a part of the video is present in the
eavesdropped traffic. There is a workaround for this in DASH: the
bitrate variation trend is stable for a particular sample, hence a
bitrate based fingerprinting method is viable.
The systematic steps are: extracting the video fingerprints from
pre-recorded videos, obtaining the eavesdropped traffic pattern,
calculating a similarity estimate between the traffic pattern and the
fingerprints using temporal sequence analysis (p-DTW) and finally,
identifying the video using this similarity estimate. An example of
a fingerprint and an observed traffic pattern is shown in Figure 14.
Specifically, we use the fingerprint-based video identification attack
detailed in sections IV and V by Gu et al. [25], adapting it to the
video streaming application that we designed.
The fingerprints that we obtain follow the segmentation rules of
DASH. Initially, we calculate the data per second in bits per second
(bps) for each video in a differential manner in order to eliminate the
impact of different quality levels on the fingerprints. This sequence
of fingerprints, which correspond to data per second, need to be
aggregated into segments before the matching step because DASH
transmits video data in segments. Each segment covers a certain
number of seconds; segment length is usually kept constant. Again
a differential strategy is used to collect the data per segment and
the resulting set is the set of video fingerprints available to the
attacker. For each video in the dataset, a set of video fingerprints is
calculated. Next comes the part where the attacker eavesdrops on
(a) 𝜖-Scheduler (𝜖 = 103)
(b) 𝜖-Scheduler (𝜖 = 10)
Figure 13: The trajectory of the rover system steering
through predefined way points with RoverBot running un-
der Vanilla EDF and 𝜖-Scheduler. The worst observed devia-
tions are 0.024𝑚 and 0.038𝑚 in the cases of 𝜖 = 103 and 𝜖 = 10
respectively, compared to the trajectory of Vanilla EDF.
Table 7: K-S Test and Average Minimum L2 Distance
Way Points
Route “8”
Comparison
𝜖 = 103, vanilla
𝜖 = 10, vanilla
𝜖 = 103, 𝜖 = 10
K-S
0.015038
0.016958
0.013265
p-val Min Dist (Meters)
0.9999
0.9999
0.9999
0.009458
0.009940
N/A
C AUTONOMOUS ROVER SYSTEM
C.1 The Route “8” Test
With an experiment setup the same as introduced in Section 7.1,
we conduct another set of tests with a closed loop route that has
a shape “8”. The results are shown in Figure 13 and Table 7 which
suggest similar, promising performance outcomes. As the “8” route
has more rounded turns, the worst observed deviations (0.024𝑚
and 0.038𝑚 in the cases of 𝜖 = 103 and 𝜖 = 10 compared to Vanilla
EDF) are generally smaller (i.e., better) compared to the irregular
route.
C.2 The Kolmogorov-smirnov (K-S) Test
We perform two types of K-S tests: the one sample test and the
two sample test. The one sample test is used to determine whether
the cumulative distributive function (CDF) of an observed random
variable is identical to the CDF of a reference random variable, also
known as the null hypothesis. Here, our observed random variable
is the y-axis of the rover paths with 𝜖-Scheduler (𝜖 = 103 or 𝜖 = 10)
and our reference random variable is the y-axis of the rover paths
with Vanilla EDF. The two sample test is used to determine whether
two independent samples are drawn from the same continuous
distribution (null hypothesis). Hence, this test is used to compare
rover paths with 𝜖-Scheduler (𝜖 = 103) and 𝜖-Scheduler (𝜖 = 10).
If the K-S statistic value is small and the corresponding 𝑝-value
large, then we cannot reject the null hypothesis. Instead, the null
hypothesis is almost certainly true.
D VIDEO STREAMING EAVESDROPPING
ATTACK
While streaming with DASH, each video segment is a certain seg-
ment length and quality level. This type of mechanism results in
a distinct traffic pattern due to the segment-based transmission.
This key property can be used to identify videos while streaming.
−0.50.00.51.01.5∆X(meters)0.00.51.01.52.02.5∆Y(meters)VanillaEDF−Sched(103)−0.50.00.51.01.5∆X(meters)0.00.51.01.52.02.5∆Y(meters)VanillaEDF−Sched(10)Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea682Figure 14: The similarity between the eavesdropped traffic
pattern with Vanilla EDF when video 1 was being streamed
and video 1’s fingerprints. The similarity distance is calcu-
lated using temporal sequence analysis.
the network traffic to obtain traffic traces. This occurs during the
transmission of the video from the server to the client. Assuming
that there are no other processes that require a large bandwidth,
the attacker aggregates the obtained network traffic (in bps) into
data per segment in a differential manner. The objective is to find
a maximum match between the sequence of traffic traces and the
sequence of individual video fingerprints. The video corresponding
to the maximum match is identified to be the video that was being
streamed during the eavesdropping period.
The similarity measurement is a method to find out which set of
video fingerprints is likely to produce the extracted traffic pattern.
Since the assumption is that only one video is streamed at a time,
measuring the similarity of the pattern to each set of fingerprints
will reveal the closest match. We treat this as a time series matching
problem. Two important considerations before solving the prob-
lem have to be taken into account: eavesdropping can be short
and the eavesdropped period may correspond to only a portion of
the entire video. After normalizing the sequences using a sigmoid
function, a newly proposed method called “partial dynamic time
warping (P-DTW)” is used. There are several advantages of using
this method over the classic DTW [6] method. Classic DTW tries to
match the two sequences in their entirety, i.e., using the full length
of sequences to calculate the alignment cost. The series heads and
tails are required to be matched. On the other hand, P-DTW tries
to find the best local alignment between the two sequences, i.e., it
minimizes the distance between the traffic pattern and any proper
sub-sequence of the fingerprints. The sub-sequence that results in
this minimum is selected for calculating the final similarity between
the fingerprint and the traffic traces. As eavesdropping occurs only
for a part of the video, P-DTW is more suited to our attack. The
similarity is quantified using the minimum distance (cost) of align-
ing the two sequences. Whichever set of video fingerprints renders
the minimum distance is the identified video in our attack.
E GENERATION OF SIMULATION TASK SETS
A total of 6000 task sets are grouped by utilization from {[0.001+0.1·
𝑥, 0.1+0.1· 𝑥) | 0 ≤ 𝑥 ≤ 9∧𝑥 ∈ Z}. Each group contains subgroups
that have a fixed number of tasks from {5, 7, 9, 11, 13, 15}. A total
of 100 task sets are generated for each of the 60 subgroups. The
utilization for a task set is generated from a uniform distribution
using the UUniFast algorithm [8]. Each task’s period 𝑇𝑖 is randomly
drawn from [10𝑚𝑠, 200𝑚𝑠] and the worst-case execution time 𝐶𝑖 is
Figure 15: The inference precision results for a Sched-
uLeak attack duration ranged from 1 · 𝐿𝐶𝑀(𝑇𝑜,𝑇𝑣) to 10 ·
𝐿𝐶𝑀(𝑇𝑜,𝑇𝑣). The experiment suggests that 𝜖-Scheduler’s pro-
tection against ScheduLeak is independent to the attack du-
ration.
Figure 16: Results of the mean of the worst under-
performance ratio (y-axis) grouped by the task set utiliza-
tion (x-axis). The experiment gives us an insight into the
degradation a system may observe from its tasks. It suggests
that a task’s under-performance ratio can be biased towards
0.5 and above. The bias is noticeable when 𝜖 is large. This
often happens on the task that has a small period leading
to an asymmetric distribution that tends to generate larger
inter-arrival times.
computed based on the generated task utilization and period. The
task phase is randomly selected from [0,𝑇𝑖).
F DISCRETE FOURIER TRANSFORM
ANALYSIS SETUP
To adequately utilize such a tool, the task schedule must be trans-
formed into a sequence of equal-spaced samples that represent the
states when CPU is busy and idle. In our analysis, a sample is taken
at each time tick and hence the Nyquist frequency is half of the tick
rate. In contrast to prior work [42] where busy and idle states are
translated into binary values 1 and 0, we translate them into 1.0 and
−1.0 to reduce noise in the spectrum caused by the positive-biased
sample values. The outcome of the transformation is a sequence
of 1.0 and −1.0 numbers that is then analyzed using DFT. In the
end, only the first half part of the analysis result is taken since
the DFT output is known to be conjugate symmetric. As shown in
Figure 7, the resulting frequency spectrum is useful for uncovering
the periodicity introduced by the scheduling of the real-time tasks.
020406080second6.06.57.07.58.0bits per period1e6Video 1 fingerprints051015202530second6.06.26.46.66.87.0bits per periodTraffic pattern (Vanilla EDF)12345678910AttackDuration(LCM(To,Tv))0.00.20.40.60.81.0InferencePrecisionofeφvVanillaEDFTaskShuﬄerEDF−Sched(103)−Sched(10)−Sched(103)∗−Sched(10)∗[0.0,0.1][0.1,0.2][0.2,0.3][0.3,0.4][0.4,0.5][0.5,0.6][0.6,0.7][0.7,0.8][0.8,0.9][0.9,1.0]TaskSetUtilization0.00.20.40.60.81.0MeanoftheWorstUnderPerformanceRatio−Sched(103)−Sched(10)Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea683Additionally, it can also be seen that peaks encapsulate the true fre-
quencies of the tasks (annotated by the red dashed lines). It’s worth
noting that the spectrum can contain aliasing frequency peaks that
are in harmony with the true frequencies. These harmonic peaks
in fact are helpful for adversaries to identify and verify the true
frequencies of interest.
We are interested in the amount of information that an adversary
can learn from the DFT analysis w.r.t. a task’s periodic behavior.
By the nature of DFT, the amplitude in the spectrum has a positive
correlation with the periods and the peaks that stand out are par-
ticularly helpful to adversaries in gaining more knowledge about
the schedule. To this end, we use a Z-score based peak detection
algorithm [20, 38] to count the number of outstanding peaks in
the spectrum. The peak detection algorithm uses a moving mean
with a 10𝐻𝑧 window to detect the outstanding peaks that are 3.5
standard deviations away. As shown by the green line in Figure 7,
such a moving threshold can effectively identify the peaks that are
significant while filtering out the base noise.
Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea684