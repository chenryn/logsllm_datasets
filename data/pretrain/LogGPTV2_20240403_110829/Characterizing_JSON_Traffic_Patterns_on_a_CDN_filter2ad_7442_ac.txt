Since our JSON traffic is not application or platform specific, we
do not use program analysis like prior approaches. Instead, we model
the relationship between requests using a backoff ngram model [12].
The ngram model captures transition probabilities from a subse-
quence of previously requested objects to the next request in the
client flow. Though the ngram model does not directly show a de-
pendency relationship between two objects unlike program analysis,
it is a data-driven method to empirically show probable object re-
quests. Furthermore, this approach takes into account the popularity
of highly requested items, unlike standard program analysis.
Methodology: To evaluate this approach, we first split the JSON
dataset by unique clients into a testing and training set. As a feature
199
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Vargas et al.
K Clustered URLs Actual URLs
1
5
10
.65
.84
.87
Accuracy
.45
.64
.69
Table 3: NGram model accuracy for URLs with a history of
N = 1 and varying K, where K is a parameter for choosing
most probable requests.
to the ngram, we use request URLs, such that a previous URL transi-
tions to the next URL. Since 84% of JSON requests are GET requests
(see §4), they do not carry request bodies and the URL is sufficient to
fetch a response. However, request cookies are not considered due
to privacy and client fingerprinting concerns. Requests are split into
client request flows, ngram transitions are created from individual
client requests, and these ngram transitions are used to train the
ngram model.
Evaluation: We evaluate this method on two ngram models, one
with actual, unmodified URLs and one with clustered URLs, using
clustering similar to URL argument clustering in [13]. Since 84% of
requests are GET requests, unmodified URLs can be used to request
these objects directly. However, when URLs contain unique client
information, such as client id’s or coordinates, clustered URLs can
reveal general object dependencies for the application. The ngram
models are also tested on individual client request flows.
We examine the change in accuracy when predicting with larger
N and K parameters. N denotes how much history to use when
predicting where N = 1 predicts only using the most recent request
(ie. history of 1). K selects the number of requests to predict in
probability order.
Table 3 shows that predicting a larger set of requests (larger K)
greatly improves accuracy even with only immediate history of
the previous request, ie. N = 1. Using larger N like N = 5 only
marginally increases accuracy by up to 5%. Overall, using this model
we achieve about 70% prediction accuracy for actual URLs. This is a
promising result showing that request order is highly probabilistic
and hints that more robust machine learning systems may be able to
better predict requests. 87% accuracy is also achieved for clustered
URL showing that JSON requests exhibit general ordering patterns.
Overall, these results show that a JSON request prediction system
can be used by CDNs to perform prefetching for cacheable requests.
HTTP Server Push can also be used to preemptively send responses
to the client, improving overall response time. Also, the general
ordering patterns discovered can be used to better inform current
caching or load balancing systems, and to perform anomaly detection
(i.e., detect when a highly unlikely object is requested). While our
prediction analysis examines request access order, future work can
also take into account request interarrival time to better inform
prediction systems.
6 Related Works
Web Proxy Optimization: Given that the CDN can serve as an
HTTP proxy, there is a plethora of literature on proxy optimizations
for web content. One group of works seek to discover network
and computational bottlenecks caused by inter-dependencies in
browsing workloads [20, 30]. Researchers have also explored using
200
split-browser architectures, which are modified browsers and cloud
proxies work together that selectively offload expensive parts of
the web page load to the proxy [27, 31]. Yet, other works improve
webpage performance by rewriting pages for efficient execution [21].
Similarly, we explore dependency patterns in JSON traffic through
the lens of traffic prediction. In the mobile web space, researchers
using program analysis and configuration to proposed local and
remote prefetching proxies that improve mobile application quality
of experience [14, 17, 35]. By contrast we propose data-driven CDN
prefetching to improve JSON traffic delivery performance.
Network Traffic Characterization: One line of research looks at
characterizing Internet trends using network data logs. Researchers
have explored extracting client information from user-agent strings
to characterize network traffic [18, 33]. Another vein of work looks at
the problem of Mobile Application Identification, mapping network
traffic to the applications that generated the traffic [19, 32–34]. We
also breakdown JSON traffic by device and application types using
user-agent. In [26], researchers use CDN baseline activity for blocks
of IP addresses to identify activity anomalies in the traffic for these
blocks and determine if there is an internet outage for these IPs.
Pujol et al. [24] identify machine-to-machine traffic by checking for
valid TCP or HTTP responses from standard web ports. Instead, we
find periodicity patterns that identify machine-to-machine JSON
traffic.
7 Implications & Limitations
In this section, we outline implications and limitations of this study.
First, since the number of JSON requests has been growing while the
size of the JSON objects has decreased, networking systems should
account for changes when serving this type of content and provision-
ing new infrastructure. Secondly, §5 explains two patterns present
in JSON traffic, periodicity and request ordering. We suggest that
these patterns can be exploited by network operators to implement
management policies for periodic traffic and to build prediction-
based systems to improve network performance. While we suggest
deprioritization of periodic traffic over, network operators should
evaluate the effects of deprioritization on user QoE. Lastly, this study
looks at two large-scale datasets collected from Akamai’s network,
a five minute dataset over Akamai’s entire network and a day-long
dataset covering one geographic region. Future studies can analyze
longer datasets covering more regions in order to explore geographic
and temporal differences in JSON traffic patterns. Though this study
presents these initial implications, it is important to further analyze
the traffic shift to JSON for further implications.
8 Conclusion
In this work, we explore the prominence of JSON traffic on a large
CDN. We first examine content-types on the CDN and find that
JSON content is largely more requested than HTML and there is a
growth trend for JSON traffic. Next, we create a taxonomy of JSON
traffic and analyze HTTP request logs from CDN edge servers to
further explore what types of clients are using JSON content, what
types of requests and responses are seen on the CDN, and how we
can use JSON patterns to optimize JSON traffic. We find that the
majority of JSON traffic is non-standardized traffic that is requested
by mobile and embedded devices. We also see that more than half
Characterizing JSON Traffic Patterns on a CDN
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
of all JSON traffic is not cacheable, especially for specific industries.
Next, we find that at least 6.3% of JSON traffic is machine-to-machine
traffic and CDN operators can deprioritize this traffic as it is not
human-triggered and no human is waiting while staring at a screen.
Finally, we explore prediction of JSON content and note that since
87% of content can be predicted, prefetching is a viable optimization
for JSON traffic.
References
[1] Ecmascript 5.1 language specification. https://www.ecma-international.org/ecma-
262/5.1/#sec-15.12.2.
[2] Edge Device Characteristics - Akamai. https://learn.akamai.com/en-us/webhelp/
ion/oca/GUID-8DC8807F-B65E-40EC-BB14-896C9F12026E.html.
[3] Fact & Figures - Akamai. https://www.akamai.com/us/en/about/facts-figures.jsp.
[4] ION Web Performance Optimization - Akamai. https://www.akamai.com/us/en/
products/performance/web-performance-optimization.jsp.
[5] The json data interchange syntax.
publications/files/ECMA-ST/ECMA-404.pdf.
http://www.ecma-international.org/
[6] Kona Site Defender - Akamai. https://www.akamai.com/us/en/products/security/
kona-site-defender.jsp.
xhtml.
[7] Media types - iana. https://www.iana.org/assignments/media-types/media-types.
[8] Mime types - mdn. https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_
of_HTTP/MIME_types.
[9] Progressive web apps - the app shell model. https://developers.google.com/web/
fundamentals/architecture/app-shell.
[10] Symmantec Sitereview. https://sitereview.bluecoat.com.
[11] User agent string database. http://www.useragentstring.com/.
[12] Lecture on Ngrams and Backoff Models, 2009. http://l2r.cs.uiuc.edu/~danr/Teaching/
CS546-09/Lectures/Lec5-Stat-09-ext.pdf.
[13] Butkiewicz, M., Wang, D., Wu, Z., Madhyastha, H. V., and Sekar, V. Klotski:
Reprioritizing web content to improve user experience on mobile devices. In 12th
USENIX Symposium on Networked Systems Design and Implementation (NSDI 15)
(Oakland, CA, May 2015), USENIX Association, pp. 439–453.
[14] Choi, B., Kim, J., Cho, D., Kim, S., and Han, D. Appx: an automated app accelera-
tion framework for low latency mobile app. In Proceedings of the 14th International
Conference on emerging Networking EXperiments and Technologies (2018), ACM,
pp. 27–40.
[15] Fielding, R., and Reschke, J. Rfc 7231-hypertext transfer protocol (http/1.1):
Internet Engineering Task Force (IETF) (2014). https:
Semantics and content.
//tools.ietf.org/html/rfc7231.
[16] Gerber, A., and Doverspike, R. Traffic types and growth in backbone networks. In
Optical Fiber Communication Conference/National Fiber Optic Engineers Conference
2011 (2011), Optical Society of America.
[17] Higgins, B. D., Flinn, J., Giuli, T. J., Noble, B., Peplin, C., and Watson, D.
Informed mobile prefetching. In Proceedings of the 10th international conference
on Mobile systems, applications, and services (2012), ACM, pp. 155–168.
[18] Kline, J., Barford, P., Cahn, A., and Sommers, J. On the structure and char-
acteristics of user agent string. In Proceedings of the 2017 Internet Measurement
Conference (New York, NY, USA, 2017), IMC ’17, ACM, pp. 184–190.
[19] Miskovic, S., Lee, G. M., Liao, Y., and Baldi, M. Appprint: automatic finger-
printing of mobile applications in network traffic. In International Conference on
Passive and Active Network Measurement (2015), Springer, pp. 57–69.
[20] Nejati, J., and Balasubramanian, A. An in-depth study of mobile browser
performance. In Proceedings of the 25th International Conference on World Wide
Web (2016), International World Wide Web Conferences Steering Committee,
pp. 1305–1315.
[21] Netravali, R., and Mickens, J. Prophecy: Accelerating mobile page loads using
final-state write logs. In 15th USENIX Symposium on Networked Systems Design
and Implementation (NSDI 18) (Renton, WA, Apr. 2018), USENIX Association,
pp. 249–266.
[22] Nygren, E., Sitaraman, R. K., and Sun, J. The Akamai network: A platform for
high-performance internet applications. ACM SIGOPS Operating Systems Review
44, 3 (2010), 2–19.
[23] Poese, I., Frank, B., Smaragdakis, G., Uhlig, S., Feldmann, A., and Maggs, B.
Enabling content-aware traffic engineering. ACM SIGCOMM Computer Communi-
cation Review 42, 5 (2012), 21–28.
[24] Pujol, E., Richter, P., Chandrasekaran, B., Smaragdakis, G., Feldmann, A.,
Maggs, B. M., and Ng, K.-C. Back-office web traffic on the internet. In Proceedings
of the 2014 Conference on Internet Measurement Conference (2014), ACM, pp. 257–
270.
[25] Richter, P., Padmanabhan, R., Spring, N., Berger, A., and CLark, D. Advancing
the Art of Internet Edge Outage Detection. In Proceedings of ACM IMC 2018 (Boston,
MA, November 2018).
[26] Richter, P., Padmanabhan, R., Spring, N., Berger, A., and Clark, D. Advancing
the art of internet edge outage detection. In Proceedings of the Internet Measurement
Conference 2018 (2018), ACM, pp. 350–363.
[27] Sivakumar, A., Puzhavakath Narayanan, S., Gopalakrishnan, V., Lee, S., Rao,
S., and Sen, S. Parcel: Proxy assisted browsing in cellular networks for energy
and latency reduction. In Proceedings of the 10th ACM International on Conference
on Emerging Networking Experiments and Technologies (New York, NY, USA, 2014),
CoNEXT ’14, ACM, pp. 325–336.
[28] Trevisan, M., Giordano, D., Drago, I., Mellia, M., and Munafo, M. Five years
at the edge: watching internet from the isp network. In Proceedings of the 14th
International Conference on Emerging Networking EXperiments and Technologies
(2018), ACM, pp. 1–12.
[29] Vlachos, M., Yu, P., and Castelli, V. On periodicity detection and structural
periodic similarity. In Proceedings of the 2005 SIAM international conference on
data mining (2005), SIAM, pp. 449–460.
[30] Wang, X. S., Balasubramanian, A., Krishnamurthy, A., and Wetherall, D.
Demystifying page load performance with WProf. In Presented as part of the 10th
USENIX Symposium on Networked Systems Design and Implementation (NSDI 13)
(Lombard, IL, 2013), USENIX, pp. 473–485.
[31] Wang, X. S., Krishnamurthy, A., and Wetherall, D. Speeding up web page
loads with shandian. In 13th USENIX Symposium on Networked Systems Design and
Implementation (NSDI 16) (Santa Clara, CA, 2016), USENIX Association, pp. 109–
122.
[32] Xu, Q., Andrews, T., Liao, Y., Miskovic, S., Mao, Z. M., Baldi, M., and Nucci,
A. Flowr: a self-learning system for classifying mobileapplication traffic. ACM
SIGMETRICS Performance Evaluation Review 42, 1 (2014), 569–570.
[33] Xu, Q., Erman, J., Gerber, A., Mao, Z., Pang, J., and Venkataraman, S. Identify-
ing diverse usage behaviors of smartphone apps. In Proceedings of the 2011 ACM
SIGCOMM conference on Internet measurement conference (2011), ACM, pp. 329–
344.
[34] Yao, H., Ranjan, G., Tongaonkar, A., Liao, Y., and Mao, Z. M. Samples: Self adap-
tive mining of persistent lexical snippets for classifying mobile application traffic.
In Proceedings of the 21st Annual International Conference on Mobile Computing
and Networking (2015), ACM, pp. 439–451.
[35] Zhao, Y., Laser, M. S., Lyu, Y., and Medvidovic, N. Leveraging program analysis
to reduce user-perceived latency in mobile applications. In Proceedings of the 40th
International Conference on Software Engineering (2018), ACM, pp. 176–186.
201