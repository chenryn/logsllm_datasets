# CTF中32位程序调用64位代码的逆向方法
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 背景
在CTF中，逆向的玩法越来越多变，曾经出现过32位程序调用64位代码的情况，一般的静态分析和动态调试方法都会失效，让人十分头大，今天将通过2个案例来学习如何应对这种情况。
## 案例
2个案例包括1个windows程序和1个linux
ELF程序，正好覆盖了2个常见的平台，[下载地址](https://pan.baidu.com/s/11IcSdE-74xW68SlEE5glQg)
(提取码：nxwx)
  1. father and son （ELF），来源于2018年护网杯CTF
  2. GWoC （Windows），来源于2018年CNCERT CTF
## 基础知识
在x64系统下的进程是有32位和64位两种工作模式，这两种工作模式的区别在于CS寄存器。32位模式时，CS = 0x23；64位模式时，CS =
0x33。;
这两种工作模式是可以进行切换的，一般会通过retf指令，一条retf指令等效于以下2条汇编指令
    pop ip
    pop cs
如果此时栈中有0x33，则会将0x33弹出到CS寄存器中，实现32位程序切换到64位代码的过程。
**所以retf是识别32位程序调用64位代码的重要标志。**
## 案例1：father and son
二进制文件father来自于一个流量包的内容（非本文焦点），是一个32位的ELF程序
    $ file father
    father: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=4351dc8fde1bd3404207e1540b84e3c577c81521, stripped
###  程序分析
核心代码如下
    int sub_8048527()
    {
      signed int retaddr; // [esp+2Ch] [ebp+4h]
      signed int retaddr_4; // [esp+30h] [ebp+8h]
      if ( mmap((void *)0x1337000, 0x3000u, 7, 50, 0, 0) != (void *)0x1337000 )
      {
        puts("sorry");
        exit(0);
      }
      if ( mmap((void *)0xDEAD000, 0x3000u, 7, 50, 0, 0) != (void *)0xDEAD000 )
      {
        puts("sorry");
        exit(0);
      }
      memcpy((void *)0xDEAD000, &unk_804A060, 0x834u);
      sub_80484EB(0xDEAD000, 0x834, 0x33);  // sub_80484EB(内容，长度，异或的值)
      retaddr = 0xDEAD000;
      retaddr_4 = 0x33;
      return MEMORY[0xDF7D000]();
    }
用nmap开辟了两段RWX内存，并且将0x804A060的内容拷贝到其中一块RWX内存0xDEAD000处，并用sub_80484EB函数异或恢复代码。
最后的部分IDA没有识别出来，看汇编是用retf跳转到0xDEAD000处执行。
    .text:08048629 C7 00 00 D0 EA 0D                       mov     dword ptr [eax], 0DEAD000h
    .text:0804862F 8D 45 E4                                lea     eax, [ebp+var_1C]
    .text:08048632 83 C0 24                                add     eax, 24h
    .text:08048635 89 45 E0                                mov     [ebp+var_20], eax
    .text:08048638 8B 45 E0                                mov     eax, [ebp+var_20]
    .text:0804863B C7 00 33 00 00 00                       mov     dword ptr [eax], 33h
    .text:08048641 C9                                      leave
    .text:08048642 CB                                      retf
看到retf，又开到此时栈中有0x33，符合32位程序调用64位代码的模式。
###  执行分析
使用一般的逆向工具gdb，在0x08048642处设置断点
    gdb ./father
    pwndbg> b *0x08048642
    Breakpoint 1 at 0x8048642
    pwndbg> show architecture 
    The target architecture is set automatically (currently i386)
    pwndbg> r
断点触发后，用ni单步执行指令执行下一步，可以看到指令已经跳转到0xDEAD000空间，CS寄存器的值从0x23变为0x33，进入64位代码的空间。
然而此时代码内容无法显示64位汇编
此时继续用ni单步执行指令，就会看到汇编指令没有一条条执行，而是几步一跳的执行，这是因为gdb认为这段代码是32位而不是64位的，即使使用set
architecture i386:x86-64 命令，也会提示错误。
我也尝试过以下调试方法，均已失败告终。
  1. IDA+linux_server(IDA32位版本)进行调试，效果同gdb，无法识别64位汇编代码，可以单步执行，汇编指令也是几步一跳。
  2. IDA64+linux_server64(IDA64位版本)，程序无法引导起来。
那么应该如何动态调试呢？
###  动态调试
为了可以正确执行64位指令，可以采用gdbserver+IDA64的调试方式。
gdbserver启动程序，并绑定到1234端口（冒号前不带ip使用本机ip）
    gdbserver :1234 ./father
用IDA64打开程序，此时是无法使用F5查看伪代码的，但是可以看到IDA64识别了32位的程序，汇编能够正常显示。
在0x8048642的retf处设置断点，设置好连接gdbserver的参数（如图）
点击绿色三角形按钮启动调试，一次F9运行后，到达断点处。
再按F7进入64位代码，此时EIP显示已经进入了0xDEAD000，但是汇编窗口没有提示。即使使用G跳转到地址0xDEAD000也提示出错。
这是因为IDA和gdbserver连接时，内存并没有及时刷新导致。可以打开Debugger菜单中的Manual memory
regions菜单项，右键Insert新建一个内存区域（这个动作每启动一次调试都要重新做）。
内存区域设置起始地址为0xDEAD000，结束地址默认即可，注意选择64-bit segment。
然后用G指令跳转到内存0xDEAD000，此时显示的是二进制数据。
按一下C识别为汇编指令，IDA调试器可以正确识别64位汇编，按F8单步执行也不会出现几步一跳的情况，可以正常调试啦。
注意1：gdbserver在一次调试结束后，第二次可能连接不上，需要kill掉再启动。
注意2：有的ELF程序可能并不需要Manual memory regions中增加内存区域，可以通过IDA的Edit->Segments->Change
Segment Attributes修改内存为64位代码
###  静态分析
有了动态调试方法，还需要静态分析方法的配合，提高CTF中逆向的效率。
本案例采用了异或混淆，由于混淆不复杂，可以静态Dump出来异或恢复，也可以动态时再Dump出来。本文采用动态运行到retf指令时，利用脚本Dump出内存。
    static main(void)
    {
      auto fp, begin, end, dexbyte;
      fp = fopen("C:\father64.mem", "wb");
      begin = 0xDEAD000;
      end = 0xDEB0000;
      for ( dexbyte = begin; dexbyte Segments->Rebase
Segment重定义基地址，设置为0xDEAD000，这样动态调试时和静态调试时的汇编地址就一样了。
然后可以愉快的用F5生成C语言代码了。
###  逆向破解
由于本文侧重点在于如何识别和分析32位程序调用64位代码，因此案例的算法逆向篇幅部分会比较简略，有兴趣的朋友可以自行研究。
主流程sub_DEAD44B接收用户输入和输出结果，并且判断输入格式是否为hwbctf{…}。
    __int64 __fastcall sub_DEAD44B(__int64 a1)
    {
      int v1; // eax
      int v2; // eax
      char v4; // [rsp+0h] [rbp-70h]
      char v5; // [rsp+10h] [rbp-60h]
      char v6[16]; // [rsp+20h] [rbp-50h]
      char v7[19]; // [rsp+30h] [rbp-40h]
      char v8[13]; // [rsp+50h] [rbp-20h]
      int v9; // [rsp+6Ch] [rbp-4h]
      v8[0] = 123;
    ...
      v8[12] = 18;
      sub_DEAD011(0x12, v8, 13);                    // v[i] ^= 0x12  恢复成为input_code:
      sub_DEAD0D7(v8);                              // strlen
      sub_DEAD073();                                // write
      sub_DEAD09C(22, v7, 0);
      sub_DEAD05B();                                // read
      if ( sub_DEAD0D7(v7) > 18 )                   // 长度大于0x12
      {
        v9 = 0;
        v1 = sub_DEAD105(v7);                       // check input[:6] == 'hwbctf'
        v9 += v1;
        v9 += v7[6] != '{';                         // check {}
        v9 += v7[18] != '}';
        v2 = sub_DEAD16F(&v7[7]);                   // 解方程，解得1'm n0t 4n5
        v9 += v2;
        if ( v9 )
        {
          sub_DEAD011(0x89, &v4, 12);               // 此处有赋值，ida没有f5出来
          sub_DEAD0D7(&v4);
          sub_DEAD073();
        }
        else
        {
          sub_DEAD011(0xF1, &v5, 11);
          sub_DEAD0D7(&v5);
          sub_DEAD073();
        }
      }
      else
      {
        v6[0] = 105;
    ...
        v6[15] = 5;
        sub_DEAD011(5, v6, 16);                     // length error!!!
        sub_DEAD0D7(v6);
        sub_DEAD073();
      }
      return sub_DEAD08B();
    }
而sub_DEAD16F函数则是有13个方程组判断输入的内容
    __int64 __usercall sub_DEAD16F@(_BYTE *a1@)
    {
      int v1; // ST0C_4
      v1 = ((a1[4] ^ a1[2] ^ a1[6]) != 119)
         + ((a1[1] ^ *a1 ^ a1[3]) != 54)
         + (a1[10] + a1[3] != 85)
         + (a1[2] + a1[9] != 219)
         + (a1[4] + a1[5] != 158)
         + (a1[2] + a1[1] + a1[5] != 196)
         + (a1[8] + a1[7] + a1[9] != 194)
         + (a1[5] + a1[3] + a1[9] != 190)
         + (a1[6] + a1[2] + a1[8] != 277)
         + (a1[10] + a1[1] + a1[7] != 124);
      return (a1[5] != 48) + (a1[10] != 53) + ((a1[7] ^ a1[6] ^ a1[8]) != 96) + v1;
    }
用Z3可以求解得flag为hwbctf{1’m n0t 4n5}
## 案例2： GWoC
GWoC是一个32位的Windows程序
原题程序中有较多花指令和反调试部分，利用0x90来nop掉，附件提供的是一个Patch后的代码
###  程序分析
将patch后的程序拖入IDA32位中，看到主流程如下
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      const char *v3; // ST14_4
      HANDLE v4; // eax
      HANDLE v5; // eax
      HANDLE v6; // eax
      HANDLE v7; // eax
      const char *v8; // eax
      const char *v9; // edx
      const char *v10; // edx
      const char *v11; // edx
      _DWORD *v13; // [esp+24h] [ebp-40h]
      _DWORD *v14; // [esp+28h] [ebp-3Ch]
      _DWORD *v15; // [esp+2Ch] [ebp-38h]
      _DWORD *lpParameter; // [esp+30h] [ebp-34h]
      BOOL Wow64Process; // [esp+3Ch] [ebp-28h]
      DWORD ThreadId; // [esp+40h] [ebp-24h]
      int v19; // [esp+44h] [ebp-20h]
      int v20; // [esp+48h] [ebp-1Ch]
      int v21; // [esp+4Ch] [ebp-18h]
      HANDLE Handles; // [esp+50h] [ebp-14h]
      HANDLE v23; // [esp+54h] [ebp-10h]
      HANDLE v24; // [esp+58h] [ebp-Ch]
      HANDLE v25; // [esp+5Ch] [ebp-8h]
      if ( argc < 2 ) //程序判断是否有命令行参数
      {
        sub_C725E0("Error missing argument !n");
        v3 = *argv;