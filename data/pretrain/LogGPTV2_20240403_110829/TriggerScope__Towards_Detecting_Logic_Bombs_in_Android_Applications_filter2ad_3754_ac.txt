For example, time values can be introduced by construction
from a constant, in which case the analysis computes the
corresponding concrete value. Values representing the current
time are also specially handled by modeling the Android APIs
known to return such values (which are represented by the
#now tag in the examples mentioned in this paper). Our
system also annotates time-related objects with special tags to
encode which time component is stored in a given object. For
example, an application can invoke the Date.getMonth()
method to access the month component of a given time object,
or the Date.getSeconds() method to access the seconds.
In this case, our analysis annotates the return value of these
methods invocations with the special tags #now/#month
and #now/#seconds. All other components are similarly
modeled. This information can be useful, for example, to
determine how narrow is the condition represented by a given
time-related check.
Note also that it is not sufﬁcient to simply record time values
representing the current time as a singular “now” value, as
the notion of “current time” monotonically increases during
program execution. Therefore, in addition to recording that
a time object corresponds to the current time at the point
where it is returned from the Android framework, the analysis
additionally annotates such value with an integer identiﬁer
that is incremented for each new current time value observed
during symbolic execution. This additional information is used
to reconstruct the semantics of a given check (e.g., hard-coded
vs. recurring check) more precisely.
In addition, our analysis also models symbolic location-
and SMS-related values and operations. Sources of location-
related values include invocation of Android APIs related to
the GPS and cellular radio devices, operations on Location
objects, and transformations on raw integer and double values
extracted from Location objects. Our analysis also keeps
track whether a given Location object represents the current
location (in which case the value is annotated with the special
#here tag), and, when an application accesses a speciﬁc lo-
cation component, such as longitude and latitude, our analysis
encodes this information with the special tags #longitude
and #latitude.
Finally, sources of SMS-related values are modeled sim-
ilarly, and include operations performed on SmsMessage
objects, such as createFromPdu, getMessageBody,
and getOriginatingAddress,
to which our analysis
associates, respectively, the tags #sms, #sms/#body, and
#sms/#sender.
382382
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply. 
g()
p ⋀ q
b2
q
f
¬p ⋀ q
b3
h()
(p ⋀ q) ⋁ (¬p ⋀ q) = q
b0
b1
b4
b5
Figure 5: Path predicate reconstruction from block predicates.
Expression Trees. During the symbolic execution step, each
symbolic object is also annotated with an expression tree that
encodes the operations that inﬂuence its value. As an example,
for the code snippet in Figure 1, our system would annotate the
object involved in the check with the expression tree depicted
in Figure 4, whose text representation is “(#now after
Date(2016/12/22)).” As we will show, these annotations
contain all the necessary information to reconstruct the seman-
tics of checks that operate on these inputs (and later classify
them). Of course, to avoid performance issues, we keep track
of precise information only for objects that are relevant to our
analysis.
B. Block Predicate Extraction
We already mentioned how, during the symbolic execution
step, the sCFG is also annotated with simple block predicates.
To better explain this step, consider, once again, the program
snippet in Figure 1 and its schematic representation in Fig-
ure 5. The analyzer would ﬁrst recover the block predicate p
as a path condition introduced by b1, and it would annotate
the b1 → b2 edge (where b2 is the block that contains the
invocation of method g) with predicate p, representing that,
once the execution reaches b1, b2 is executed if and only if p
holds. For this example, our system would determine that p is
a comparison of the value of an object x against the constant
zero. The expression tree of x (i.e., Figure 4) is then retrieved,
and the predicate p is determined to be “(!= (#now after
Date(2016/12/22)) 0).” Similarly, the b1 → b3 edge
(where b3 is the block that contains the invocation of method
h) would be annotated with the predicate ¬p.
C. Path Predicate Recovery and Minimization
In the following step, simple block predicates are combined
intra-
together to recover, for each basic block,
the full
procedural path predicate. Given the block predicates for each
basic block, path predicate recovery is conceptually straight-
forward. For each block, the analysis performs a backwards
traversal of the enclosing method’s CFG and builds a complex
Boolean formula that represents all paths from the current
block to the entry point of the method. Predicates for se-
quences of basic blocks are combined using conjunction (i.e.,
logical AND), while blocks with multiple predecessors (due
to branch joins) take the disjunction (i.e., logical OR) of the
corresponding incoming path predicates. These predicates not
only capture the control-dependency relation between blocks,
but also precisely encode the condition that must be satisﬁed
for a block to be executed.
Note that, without any further steps, this simple path pred-
icate reconstruction algorithm might produce path predicates
that contain redundant terms. These terms could, if not re-
moved, result in a large number of blocks with false depen-
dencies on values derived from trigger inputs. For instance,
if a basic block is only executed when a certain condition
evaluates to true over a value derived from a trigger input, then
the path predicate recovery algorithm will correctly identify
that the basic block depends on that trigger input. But, it will
also erroneously state that successor blocks – including blocks
executed after a join with the else path – depend on the trigger
input.
To illustrate, consider once again the graph shown in
Figure 5, extracted from the trigger example introduced in
Figure 1. After the analysis has computed block predicates
over the entire sCFG, the path predicate from block b0 to b2 –
where the incoming path predicate to f is q – is represented by
the conjunction p ∧ q. Since p involves symbolic time values,
blocks b2 and b3 have a control dependency on a time-based
input. However, the path predicate associated with the join
of the two branches, represented by b4, would result in the
following expression: (p∧q)∨(¬p∧q). This will also be the
path predicate associated with the exit from f, represented by
b5. Note how this path predicate has a dependency on a time-
based input (through the predicate p), even if the execution of
the basic block b5 is clearly not guarded by any time-related
check.
For this reason, after path predicates are recovered for each
basic block, the analysis minimizes each path predicate. This
is accomplished by recursively simplifying the full formulas
for each basic block (using standard Boolean laws such as
the distributive law) until no further simpliﬁcations can be
performed. To conclude our example, the minimization of
the path predicate associated with b5 would result
in the
expression (p ∧ q) ∨ (¬p ∧ q) = (p ∨ ¬p) ∧ q = q, which,
as expected, does not contain a spurious dependency on time
input. We note that minimization of Boolean formulas is NP-
hard in the general case. However, we found this technique
to be fast in practice in our system. Finally, to compute path
predicates for those cases that include loops, we make use of
the techniques described in [33].
383383
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply. 
D. Predicate Classiﬁcation
Once the minimized path predicates have been recovered,
the analysis proceeds to classify these path predicates accord-
ing to the semantics of the comparison performed on potential
trigger inputs. To this end, the analysis checks the type of
comparison performed (e.g., =, , (cid:3)) as well as the
types of the operands used in the comparison (e.g., whether
a value is a constant, purely symbolic, or a special symbolic
value such as the current timestamp, the current location, or
an incoming SMS).
Intuitively, a check (predicate) is considered as suspicious
if it encodes a narrow condition. In fact, these are the types
of checks used by malicious applications that, for example,
are programmed to mount an attack only when the user is at
a very speciﬁc location (e.g., a soldier in a war zone).
In our current implementation, a check is ﬂagged as sus-
picious according to the following policy: If a predicate is
semantically equivalent to one (or more) ordering compari-
son(s) between a current time value and a constant, then the
predicate is labeled as suspicious. A similar criterion is used
for location values. That is, if a predicate is equivalent to a
bounds check on symbolic values derived from an Android
location object, then the predicate is labeled as suspicious.
We apply a similar policy for SMS objects as well. Our
current implementation ﬂags as suspicious any functionality
that attempts to match hard-coded patterns against the body
(or sender) of an incoming SMS.
Clearly, this is not the only possible valid deﬁnition of
suspiciousness. In fact, in certain scenarios, recurring checks
that, for example, trigger the execution of a given functionality
only once every month could be considered suspicious as
well. We believe that our observation that predicates encoding
narrow conditions deserve special attention is generic, and it is
independent from how such narrow checks are implemented.
Moreover, our analysis framework extracts all the relevant
information about path predicates that makes the detection of
these different kinds of checks possible.
Additionally, we implemented a few post-ﬁlter steps. These
are useful to ﬁlter out checks that match our deﬁnition of
suspiciousness but that are clearly benign. For example, we
empirically found that several applications check the value of
a ﬁeld (that might contain a timestamp) against the constant
0 or -1: in effect, the application is just performing a “Is
this ﬁeld already set with a valid timestamp?” type of check.
Similarly, for the location domain, we found cases where
location objects were compared against the constant value 0 –
in effect, the application performs a null reference check. We
also found that a similar kind of sanity check is performed on
strings representing the body of an SMS. In particular, some
applications check whether the length of the SMS’s body and
sender is greater than 0. As the 0 and -1 values do not represent
a valid (or interesting) absolute time or location, and as all
valid SMS have a non-empty body, we consider these checks
to be benign, and, therefore, our analysis does not ﬂag them
as suspicious. We note that these post-ﬁlter steps are safe (i.e.,
they do not ﬁlter potentially-suspicious checks out) and that,
as we will discuss in Section V, they only affect a very limited
number of applications.
E. Control-Dependency Analysis
The ﬁnal step of our analysis consists in determining
whether a control dependency exists between predicates iden-
tiﬁed as suspicious in the prior step and basic blocks that
contain invocations of sensitive Android framework methods.
This is accomplished using a forward traversal of the sCFG,
starting from each basic block that is guarded by a suspicious
path predicate. For each of these blocks, if that block invokes
a sensitive API method, then the path leading to it is labeled
as a suspicious triggered behavior.
Furthermore, our control-dependency analysis is inter-
procedural, and it also propagates suspicious predicates
through ﬁeld locations or object deﬁnitions. That is, if a block
guarded by a suspicious predicate updates a ﬁeld or sets an
object, subsequent blocks (potentially contained in different
methods) that are guarded by a check on that ﬁeld (or object)
are added to the set of suspicious blocks to check. A similar
propagation is performed over ﬂows through the Android
framework due to callback registrations and invocations, as
well as over intent-based inter-component ﬂows. This allows
us to detect (implicit) control dependencies that would evade
simpler static analysis approaches.
Returning to the time-based trigger example in Figure 1 and
its schematic representation in Figure 5, our system would
consider b2 and b3 as blocks to be checked for sensitive
operations. If the analysis ﬁnds that method g (or h) can
directly or indirectly invoke a sensitive operation, then that
behavior would be classiﬁed by our analysis as a suspicious
triggered behavior.
For this work, we compiled a list of potentially-sensitive
operations by considering all Android APIs protected by a per-
mission (we used, as a starting point, the results of PScout [20]
and SuSi [47]), and by augmenting it with operations that
involve the ﬁlesystem (this list can be simply modiﬁed through
a conﬁguration ﬁle). As the reader can notice, our deﬁnition of
sensitive is very conservative: in fact, the vast majority of the
operations considered as such are not even security-relevant.
As shown in the evaluation section, even with this conservative
deﬁnition of sensitiveness, our approach is affected by a very
low false positives rate, the reason being that we focus on
characterizing the check that guards a given behavior, and
not on the guarded behavior per se. It is also worth noting
that if existing approaches would adopt a similar deﬁnition of
sensitiveness, they would all be affected by an unacceptable
rate of false positives.
IV. IMPLEMENTATION DETAILS
We implemented our approach in a tool called TRIGGER-
SCOPE. The initial parsing of the bytecode uses the libdex
library from the AOSP project [3]. Then, the bytecode is
lifted into an intermediate representation (IR) suitable for per-
forming symbolic execution. Our symbolic execution engine
models the semantics of all individual Dalvik virtual machine
384384
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply. 
instructions over an abstract representation of program states,
including the current program counter, abstract store, and
local environment. Thus, TRIGGERSCOPE is a pure static
symbolic execution engine for Dalvik bytecode, and it
is
completely independent from the Android framework itself.
TRIGGERSCOPE is mostly written in C++, and consists of
18.6K SLOC.
Our prototype faithfully models all Dalvik bytecode instruc-
tions and propagates the taints (and the information about the
objects) accordingly. Moreover, as we described, our system
precisely models a number of relevant APIs. For these APIs,
the taints are propagated according to their model. For all other
APIs for which a model is not available, our system applies a
default tainting policy, which propagates all taints on method
arguments to the receiver object and to the returned value.
This conservative approach helps in case of a lookup in a
data structure like a map. Another problematic case is posed
when a tainted object is written to a ﬁle. To conservatively
handle this and similar cases, one would need to keep track
of, for example, ﬁle paths. When it is not possible to do so,
our current prototype errs on the side of false positives: if a
tainted value is written to the ﬁlesystem and no information
on the ﬁle path is available, the analysis will propagate such
taint upon subsequent ﬁle reads.
From a conceptual point of view, these design choices would
lead to more imprecision, which, as everything is handled
conservatively, would directly translate to over-tainting and
a high number of false positives. However, we empirically
found that this is not the case in practice. In fact, as we show
in the evaluation section, our analysis is quite precise in terms
of detecting suspicious triggered behaviors. Intuitively, this is
possible as time-, location-, and SMS-related functionality is
often well-isolated and self-contained, and even such aggres-
sive policies do not affect the overall precision of our analysis.
Another important aspect is related to keeping track of
constant values. In fact, determining whether an object (in-
dependently from its representation) encodes a constant value
is critical for our classiﬁcation steps. Unfortunately, in the
general case it is not possible to record the exact value for
each constant. For this reason, when such information is
not available, our implementation falls back to a basic taint
propagation system, which can label a symbolic object as
constant.
Developing a symbolic execution engine for Dalvik byte-
code is not novel, and for the design and implementation of
our prototype, we reused many of the ideas from existing
static analysis tools [13], [12], [19], [23], [36]. However, none
of these frameworks has been designed to perform symbolic
execution directly on Dalvik bytecode and, therefore, we were
not able to reuse their implementation. Our approach also
relies on detailed CFG annotations (described throughout the
paper) as well as on precise models of symbolic values, which
other approaches do not provide.
V. EVALUATION
In this section, we evaluate TRIGGERSCOPE’s ability to
effectively and efﬁciently identify suspicious time-, location-,
385385
and SMS-based logic bombs. We ﬁrst describe the data sets we
used for the experiments. Next, we evaluate the performance
aspect, we discuss the results of our trigger analysis, and we
perform an evaluation of the accuracy of our analysis. We then
compare our system’s accuracy against the accuracy achieved
by three existing state-of-the-art
tools, namely Kirin [31],
DroidAPIMiner [14], and FlowDroid [19], and we discuss
why they are not adequate for the automatic detection of logic
bombs. We conclude by discussing case studies of a number of
interesting triggers found by TRIGGERSCOPE, including two
previously-unknown backdoors in benign apps, and a variety
of logic bombs in the malicious samples.
A. Data Sets
For this work, we built a dataset of applications that include
both benign and malware samples relevant to our analysis. This
section describes how we obtained these two datasets.
Benign Applications. Since the current prototype focuses on
the detection of suspicious time-, location-, and SMS-based