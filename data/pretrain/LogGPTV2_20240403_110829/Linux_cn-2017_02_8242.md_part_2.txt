```
chmod 700 /etc/nginx/cert
chmod 600 /etc/nginx/cert/*
```
![为 Nextcloud 生成一个自签名 SSL 证书](/data/attachment/album/201702/27/115124dmwotmrvuow3wrxu.png)
### 步骤 5 - 下载和安装 Nextcloud
我直接使用 `wget` 命令下载 Nextcloud 到服务器上，因此需要先行安装 `wget`。此外，还需要安装 `unzip` 来进行解压。使用 `yum` 命令来安装这两个程序。
```
yum -y install wget unzip
```
先进入 `/tmp` 目录，然后使用 `wget` 从官网下载最新的 Nextcloud 10。
```
cd /tmp
wget https://download.nextcloud.com/server/releases/nextcloud-10.0.2.zip
```
解压 Nextcloud，并将其移动到 `/usr/share/nginx/html/` 目录。
```
unzip nextcloud-10.0.2.zip
mv nextcloud/ /usr/share/nginx/html/
```
下一步，转到 Nginx 的 web 根目录为 Nextcloud 创建一个 `data` 文件夹。
```
cd /usr/share/nginx/html/
mkdir -p nextcloud/data/
```
变更 `nextcloud` 目录的拥有者为 `nginx` 用户和组。
```
chown nginx:nginx -R nextcloud/
```
### 步骤 6 - 在 Nginx 中为 Nextcloud 配置虚拟主机
在步骤 5 我们已经下载好了 Nextcloud 源码，并配置好了让它运行于 Nginx 服务器中，但我们还需要为它配置一个虚拟主机。在 Nginx 的 `conf.d` 目录下创建一个新的虚拟主机配置文件 `nextcloud.conf`。
```
cd /etc/nginx/conf.d/
vim nextcloud.conf
```
将以下内容粘贴到虚拟主机配置文件中：
```
upstream php-handler {
    server 127.0.0.1:9000;
    #server unix:/var/run/php5-fpm.sock;
}
server {
    listen 80;
    server_name cloud.nextcloud.co;
    # enforce https
    return 301 https://$server_name$request_uri;
}
server {
    listen 443 ssl;
    server_name cloud.nextcloud.co;
    ssl_certificate /etc/nginx/cert/nextcloud.crt;
    ssl_certificate_key /etc/nginx/cert/nextcloud.key;
    # Add headers to serve security related headers
    # Before enabling Strict-Transport-Security headers please read into this
    # topic first.
    add_header Strict-Transport-Security "max-age=15768000;
    includeSubDomains; preload;";
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;
    # Path to the root of your installation
    root /usr/share/nginx/html/nextcloud/;
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
    # The following 2 rules are only needed for the user_webfinger app.
    # Uncomment it if you're planning to use this app.
    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json
    # last;
    location = /.well-known/carddav {
      return 301 $scheme://$host/remote.php/dav;
    }
    location = /.well-known/caldav {
      return 301 $scheme://$host/remote.php/dav;
    }
    # set max upload size
    client_max_body_size 512M;
    fastcgi_buffers 64 4K;
    # Disable gzip to avoid the removal of the ETag header
    gzip off;
    # Uncomment if your server is build with the ngx_pagespeed module
    # This module is currently not supported.
    #pagespeed off;
    error_page 403 /core/templates/403.php;
    error_page 404 /core/templates/404.php;
    location / {
        rewrite ^ /index.php$uri;
    }
    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
        deny all;
    }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
        deny all;
    }
    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) {
        include fastcgi_params;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param HTTPS on;
        #Avoid sending the security headers twice
        fastcgi_param modHeadersAvailable true;
        fastcgi_param front_controller_active true;
        fastcgi_pass php-handler;
        fastcgi_intercept_errors on;
        fastcgi_request_buffering off;
    }
    location ~ ^/(?:updater|ocs-provider)(?:$|/) {
        try_files $uri/ =404;
        index index.php;
    }
    # Adding the cache control header for js and css files
    # Make sure it is BELOW the PHP block
    location ~* \.(?:css|js)$ {
        try_files $uri /index.php$uri$is_args$args;
        add_header Cache-Control "public, max-age=7200";
        # Add headers to serve security related headers (It is intended to
        # have those duplicated to the ones above)
        # Before enabling Strict-Transport-Security headers please read into
        # this topic first.
        add_header Strict-Transport-Security "max-age=15768000;
        includeSubDomains; preload;";
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Robots-Tag none;
        add_header X-Download-Options noopen;
        add_header X-Permitted-Cross-Domain-Policies none;
        # Optional: Don't log access to assets
        access_log off;
    }
    location ~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {
        try_files $uri /index.php$uri$is_args$args;
        # Optional: Don't log access to other assets
        access_log off;
    }
}
```
保存文件并退出 vim。
下载测试以下该 Nginx 配置文件是否有错误，没有的话就可以重启服务了。
```
nginx -t
systemctl restart nginx
```
![在 Nginx 中为 Nextcloud 配置虚拟主机](/data/attachment/album/201702/27/115124zj7jqngyvc9rjpyq.png)
### 步骤 7 - 为 Nextcloud 配置 SELinux 和 FirewallD 规则
本教程中，我们将以强制模式运行 SELinux，因此需要一个 SELinux 管理工具来为 Nextcloud 配置 SELinux。
使用以下命令安装 SELinux 管理工具。
```
yum -y install policycoreutils-python
```
然后以 root 用户来运行以下命令，以便让 Nextcloud 运行于 SELinux 环境之下。如果你是用的其他名称的目录，记得将 `nextcloud` 替换掉。
```
semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/html/nextcloud/data(/.*)?'
semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/html/nextcloud/config(/.*)?'
semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/html/nextcloud/apps(/.*)?'
semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/html/nextcloud/assets(/.*)?'
semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/html/nextcloud/.htaccess'
semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/html/nextcloud/.user.ini'
restorecon -Rv '/usr/share/nginx/html/nextcloud/'
```
接下来，我们要启用 firewalld 服务，同时为 Nextcloud 开启 http 和 https 端口。
启动 firewalld 并设置随系统启动。
```
systemctl start firewalld
systemctl enable firewalld
```
现在使用 `firewall-cmd` 命令来开启 http 和 https 端口，然后重新加载防火墙。
```
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=https
firewall-cmd --reload
```
![为 Nextcloud 配置 FirewallD 规则](/data/attachment/album/201702/27/115125fcx3sr7sw317zc53.png)
至此，服务器配置完成。
### 步骤 8 - Nextcloud 安装
打开你的 Web 浏览器，输入你为 Nextcloud 设置的域名，我这里设置为 `cloud.nextcloud.co`，然后会重定向到安全性更好的 https 连接。
设置你的管理员用户名和密码，然后输入数据验证信息，点击 '**完成安装 (Finish Setup)**'。
![Nextcloud 安装](/data/attachment/album/201702/27/115125gs4ojzf7h1fobrdo.png)
Nextcloud 管理面板大致如下：
![Nextcloud 管理面板](/data/attachment/album/201702/27/115126kn65n94gi1nnd5i5.png)
Nextcloud 用户设置：
![Nextcloud 用户设置](/data/attachment/album/201702/27/115126zo7y3krynetk9eek.png)
管理设置：
![管理设置](/data/attachment/album/201702/27/115127rhpkkk7wv568whhj.png)
至此，我们在 CentOS 7 服务器上通过使用 Nginx、PHP7-FPM、MariaDB 完成了 Nextcloud 的安装。
### 参考链接
* 
---
译者简介：
[GHLandy](http://GHLandy.com) —— 划不完粉腮柳眉泣别离。
---
via: 
作者：[Muhammad Arul](https://www.howtoforge.com/tutorial/how-to-install-nextcloud-with-nginx-and-php-fpm-on-centos-7/) 译者：[GHLandy](https://github.com/GHLandy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出