### Organizing and Instrumenting Application Classes

To prevent application classes from being accidentally bundled and deployed to production, it is recommended to store them in a separate directory. Here’s a step-by-step guide on how to instrument the application classes:

1. **Compile the Application Classes:**
   - Ensure that the application classes have been compiled before proceeding with instrumentation.

2. **Clean Up Previous Data:**
   - Remove any coverage data generated by previous builds.
   - Remove any previously instrumented classes.

3. **Instrument the Application Classes:**
   - Instrument the application classes (excluding test classes) and place them in the `${instrumented.dir}` directory.

At this point, the `${instrumented.dir}` directory contains the instrumented version of your application classes. To generate useful code coverage data, run your unit tests against these instrumented classes.

4. **Run Unit Tests:**
   - Execute JUnit tests against the instrumented application classes.
   - Ensure that the Cobertura libraries are included in the classpath, as the instrumented classes depend on them.

This process will produce the raw test coverage data needed to generate XML test coverage reports for Jenkins. To create these reports, you need to invoke another task.

5. **Generate Coverage Reports:**
   - Use the appropriate task to generate the XML test coverage reports.

6. **Cleanup:**
   - After completing the process, clean up by deleting the generated classes, instrumented classes, Cobertura coverage data, and Cobertura reports.

Once this is done, you are ready to integrate your coverage reports into Jenkins.

### Installing the Cobertura Code Coverage Plugin

To configure Jenkins to report on code coverage, you need to install the Jenkins Cobertura plugin. Follow these steps:

1. **Access the Plugin Manager:**
   - Go to the Manage Jenkins screen and click on Manage Plugins.

2. **Install the Cobertura Plugin:**
   - If the Cobertura plugin is not installed, find it in the Available tab under the Build Reports section.
   - Check the box next to the Cobertura Plugin and click "Install" or press Enter.
   - Jenkins will download and install the plugin. Restart the Jenkins server after installation.

### Configuring Code Coverage Reporting in Your Build

After installing the Cobertura plugin, set up code coverage reporting in your build jobs:

1. **Create a Separate Build Job:**
   - For large projects, consider creating a separate build job for code coverage and other quality metrics, which can be run after the normal unit and integration tests.
   - For very large projects, you might want to run this build job on a nightly basis.

2. **Generate Coverage Data:**
   - Configure your build to produce the Cobertura `coverage.xml` file(s).

3. **Configure Post-build Actions:**
   - In the "Post-build Actions" section of your build job, check the "Publish Cobertura Coverage Report" checkbox.
   - Specify the path to the Cobertura XML data. You can use Ant-style wildcards to include multiple files, such as `**/target/site/cobertura/coverage.xml`.

### Interpreting Code Coverage Metrics

Jenkins displays code coverage reports on the build job home page:

1. **Initial Run:**
   - The first time it runs, it produces a simple bar chart.
   - From the second build onwards, a graph is shown, indicating the various types of coverage over time.

2. **Drill-Down Capabilities:**
   - Jenkins allows you to drill down into the coverage metrics, displaying breakdowns for packages, classes within a package, and lines of code within a class.
   - Lines that have been executed during tests are marked in green, and lines that were never executed are marked in red.
   - A number in the margin indicates the number of times a given line was executed.
   - Yellow shading in the margin indicates insufficient conditional coverage.

### Measuring Code Coverage with Clover

Clover is a commercial code coverage tool from Atlassian that works well with Ant, Maven, and Grails. Here’s how to set it up:

1. **Maven Configuration:**
   - Add the Clover plugin to your Maven configuration.
   - This will generate both HTML and XML coverage reports, including aggregated data for multimodule projects.

2. **Install the Jenkins Clover Plugin:**
   - Install the Jenkins Clover plugin using the Plugin Manager.
   - Restart Jenkins after installation.

3. **Run Clover:**
   - Instrument your application code, run your tests, aggregate the test data, and generate the HTML and XML reports.
   - Typically, this is done as part of a separate build job.

4. **Configure Clover Reporting in Jenkins:**
   - Check the "Publish Clover Coverage Report" checkbox.
   - Provide the path to the Clover HTML report directory and the XML report file.
   - Define threshold values for sunny and stormy weather, and for unstable builds.

### Automated Acceptance Tests

Automated acceptance tests play a crucial role in agile projects for verification and communication:

1. **Verification:**
   - Similar to integration tests, they verify that the application functions as expected.

2. **Communication:**
   - They demonstrate the project's status to non-developers, such as business owners, analysts, and testers.

3. **Separate from Developer-Focused Tests:**
   - Acceptance tests should be kept separate from developer-focused tests due to their different aims and audiences.

4. **Behavior-Driven Development (BDD):**
   - BDD frameworks are often used for automated acceptance tests, as they generate HTML reports suitable for non-developers.
   - These frameworks also support "Pending tests," which are automated but not yet implemented, providing a clear indicator of feature progress.

5. **Displaying Acceptance Tests:**
   - Ensure that acceptance tests are displayed separately from conventional tests.
   - Use business-focused and behavioral naming conventions for tests and test classes.

### Publishing HTML Reports

To display HTML reports in Jenkins, use the HTML Publisher plugin:

1. **Install the Plugin:**
   - Install the HTML Publisher plugin using the Plugin Manager.

2. **Configure the Plugin:**
   - In the "Post-build Actions" section, check the "Publish HTML reports" checkbox.
   - Provide the directory containing the HTML reports, an index page, and a title for the report.
   - Optionally, configure Jenkins to store reports for each build or keep only the latest one.

3. **View the Reports:**
   - Jenkins will display a special icon on the build job home page, linking to the HTML report.

### Publishing Non-HTML Documents

For non-HTML documents, such as text files and PDFs, use the DocLinks plugin:

1. **Install the Plugin:**
   - Install the DocLinks plugin using the Plugin Manager.

2. **Configure the Plugin:**
   - In the "Post-build Actions" section, configure the plugin to archive both HTML reports and non-HTML artifacts.
   - Both types of documents will be listed on the build home page.

### Automated Performance Tests with JMeter

Application performance testing is essential to ensure that applications meet Service Level Agreements (SLAs). JMeter is a popular open-source tool for performance and load testing:

1. **Simulating Load:**
   - JMeter simulates user actions, sending requests to your application and measuring response times.
   - It supports various request types, including HTTP, SOAP, JDBC, and JMS.

2. **Configuring Test Scripts:**
   - Use the JMeter GUI to configure test scripts, including random pauses, conditions, loops, and other variations to mimic real user actions.

3. **Running JMeter:**
   - JMeter can be run as a Swing application or as a proxy to capture and replay user actions.

By following these steps, you can effectively manage and report on code coverage, acceptance tests, and performance testing in your Jenkins environment.