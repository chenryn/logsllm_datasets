User: 请解答这个和日志有关的问题How do I find out what version of Linux is running? Sometimes your scripts need to behave differently on different Linux's. How can I determine which version of Linux a script is running on?

Assistant: There is no cross-distribution way. However:


  
  Redhat and friends: Test for /etc/redhat-release, check contents
  Debian: Test for /etc/debian_version, check contents
  Mandriva and friends: Test for /etc/version, check contents
  Slackware: Test for /etc/slackware-version, check contents
  


Etc. Generally speaking, check for /etc/*-release and /etc/*-version.



Edit: Found an old (1+ years) bash script of mine lying around that I must have cobbled together over the years (it has an impressive CVS log going back 6 years.) It might not work properly anymore as-is and I can't be bothered to find installed distros to test against, but it should provide you with a good starting point. It works fine on CentOS, Fedora and Gentoo. gyaresu tested it successfully on Debian Lenny.

#!/bin/bash

get_distribution_type()
{
    local dtype
    # Assume unknown
    dtype="unknown"

    # First test against Fedora / RHEL / CentOS / generic Redhat derivative
    if [ -r /etc/rc.d/init.d/functions ]; then
        source /etc/rc.d/init.d/functions
        [ zz`type -t passed 2&gt;/dev/null` == "zzfunction" ] &amp;&amp; dtype="redhat"

    # Then test against SUSE (must be after Redhat,
    # I've seen rc.status on Ubuntu I think? TODO: Recheck that)
    elif [ -r /etc/rc.status ]; then
        source /etc/rc.status
        [ zz`type -t rc_reset 2&gt;/dev/null` == "zzfunction" ] &amp;&amp; dtype="suse"

    # Then test against Debian, Ubuntu and friends
    elif [ -r /lib/lsb/init-functions ]; then
        source /lib/lsb/init-functions
        [ zz`type -t log_begin_msg 2&gt;/dev/null` == "zzfunction" ] &amp;&amp; dtype="debian"

    # Then test against Gentoo
    elif [ -r /etc/init.d/functions.sh ]; then
        source /etc/init.d/functions.sh
        [ zz`type -t ebegin 2&gt;/dev/null` == "zzfunction" ] &amp;&amp; dtype="gentoo"

    # For Slackware we currently just test if /etc/slackware-version exists
    # and isn't empty (TODO: Find a better way :)
    elif [ -s /etc/slackware-version ]; then
        dtype="slackware"
    fi
    echo $dtype
}


Note that this will probably only work correctly in Bash. You could rewrite it for other shells.

That being said, you might want to test for features, not for distributions. I'm not using this anymore simply because it became a maintenance burden. It's easier to rely on cross-distribution tools and solutions.



Conceptually, what it does is, in order:


  
  Pull in a known, "common init script function" type of file. Those are distribution-specific. If it doesn't exist, skip to next distribution check.
  Check the existence of a specific, known-to-exist, often-used and unlikely to be renamed function from that core script. We do that using the type Bash builtin. type -t returns function if that symbol is a function. We prepend zz to the output from type -t 2&gt;/dev/null because if the name isn't defined the output string would be empty and we'd get a syntax error about a missing left hand to the == operator. If the name we just checked isn't a function, skip to next distribution check, otherwise we found the distribution type.
  Finally, echo the distribution type so the function output can be easily used in a case .. esac block.
  




Edit in case you're trying to run this as a straight script: This script is supposed to get sourced or included from other scripts. It does not output anything on its own if you run it as-is. To test it, source it and then invoke the function, e.g.:

source /path/to/this/script.sh
get_distribution_type


at the bash prompt.



Edit: Please note that this script does not require root privileges. I urge you not to run it as root. Shouldn't harm anything, but there's no need.



Found a link to a relevant mailing list post in the CVS log. Should be useful in unwrapping init script spaghetti.