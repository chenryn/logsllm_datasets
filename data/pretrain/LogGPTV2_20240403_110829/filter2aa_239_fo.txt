)
          {
            string title = null;
            string description = null;
            try
            {
            _shareOperation = shareOperation;
            title = _shareOperation.Data.Properties.Title;
            description = _shareOperation.Data.Properties.Description;
            foreach (var format in _shareOperation.Data.AvailableFormats)
            {
          _shareFormats.Add(format);
            }
            Title = title;
            Description = description;
            }
            catch (Exception ex)
            {
            _shareOperation.ReportError(ex.Message);
            }
          }
          // etc.
        }
一旦用户选择数据格式，可以单击按钮，检索数据。这会调用RetrieveData方法。根
据用户的选择，在Data属性返回的DataPackageView实例上调用GetTextAsync或
GetHtmlFormatAsync。在检索数据前，调用方法ReportStarted；检索到数据后，调用方法
ReportDataRetrieved：
    public class ShareTargetPageViewModel: INotifyPropertyChanged
    {
      // etc.
      private bool dataRetrieved = false;
      public async void RetrieveData()
      {
        try
        {
        if (dataRetrieved)
        {
          await new MessageDialog("data already retrieved").ShowAsync();
        }
        _shareOperation.ReportStarted();
        switch (SelectedFormat)
        {
          case "Text":
            Text = await _shareOperation.Data.GetTextAsync();
            break;
          case "HTML Format":
            Html = await _shareOperation.Data.GetHtmlFormatAsync();
            break;
          default:
            break;
        }
        _shareOperation.ReportDataRetrieved();
        dataRetrieved = true;
        }
        catch (Exception ex)
        {
        _shareOperation.ReportError(ex.Message);
        }
      }
      // etc.
    }
在示例应用程序中，检索到的数据显示在用户界面中。在真正的应用程序中，可以使
用任何形式的数据，例如，把它本地存储在客户端上，或者调用自己的Web服务并给它传
递数据。
最后，用户可以在UI中单击Report Completed按钮。通过Click处理程序，会在视图模
型中调用ReportCompleted方法，进而在ShareOperation实例上调用ReportCompleted方法。
这个方法关闭对话框：
    public class ShareTargetPageViewModel: INotifyPropertyChanged
    {
      // etc.
      public void ReportCompleted()
      {
        _shareOperation.ReportCompleted();
      }
      // etc.
    }
在应用程序中，可以在检索数据之后调用前面的ReportCompleted方法。只要记住，
应用程序的对话框关闭时，调用此方法。
运行SharingTarget应用程序，如图33-6所示。
图33-6
 注意： 
测试分享所有支持格式的最佳方法是使用示例应用程序的Sharing
Content Source应用程序示例和Sharing Content Target应用程序示例。两个示例应用程序
都在https://github.com/Microsoft/ Windows-universal-samples上。如果一个应用程序作为
共享源，就使用示例应用程序目标，反之亦然。
  注意： 调试共享目标的一个简单方法是把Debug选项设置为Do Not Launch,
but Debug My Code When It Starts。这个设置在Project Properties的Debug选项卡（参见
图33-7）中。使用此设置，可以启动调试器，一旦与这款应用程序共享数据源应用程序
中的数据，应用程序就启动。
图33-7
33.6 应用程序服务
在应用程序之间共享数据的另一种方法是使用应用程序服务。应用程序服务是
Windows 10的一个新功能，可以与调用Web服务相媲美，但对用户的系统而言，服务是本
地的。多个应用程序可以访问相同的服务，这是在应用程序之间共享信息的方式。应用服
务和Web服务之间的一个重要区别是，用户不需要使用这个特性进行交互；而可以在应用
程序中完成。
样例应用程序AppServices使用服务缓存Book对象。调用服务，可以检索Book对象的
列表，把新Book对象添加到服务中。
应用程序包含多个项目：
● 一个.NET移动库（BooksCacheModel）定义了这个应用程序的模型：Book类。为了
便于传输数据，提供一个扩展方法，把Book对象转换为JSON，把JSON转换为
Book对象。这个库在所有其他项目中使用。
● 第二个项目（BooksCacheService）是一个Windows运行库组件，定义了book服务本
身。这种服务需要在后台运行，因此实现一个后台任务。
● 
后台任务需要注册到系统中。这个项目是一个Windows应用程序
BooksCacheProvider。
● 调用应用程序服务的客户机应用程序是一个Windows应用程序BooksCacheClient。
下面看看这些部分。
33.6.1 创建模型
移动库BooksCacheModel包含Book类、利用NuGet包Newtonsoft.Json转换到JSON的转
换器以及存储库。
Book类定义了Title和Publisher属性（代码文件AppServices 
/ 
BooksCacheModel 
/
Book.cs）：
    public class Book
    {
      public string Title { get; set; }
      public string Publisher { get; set; }
    }
BooksRepository类包含Book对象的内存缓存，允许用户通过AddBook方法添加book对
象，使用Books属性返回所有缓存的书。为了查看一本书，而无须添加新书，初始化时把
一本书添加到列表中（代码文件AppServices /BooksCacheModel / BooksRepository.cs）：
    public class BooksRepository
    {
      private readonly List _books = new List()
      {
        new Book {Title = "Professional C# 6", Publisher = "Wrox Press" }
      };
      public IEnumerable Books => _books;
      private BooksRepository()
      {
      }
      public static BooksRepository Instance = new BooksRepository();
      public void AddBook(Book book)
      {
        _books.Add(book);
      }
    }
因为通过应用程序服务发送的数据需要序列化，所以扩展类BookExtensions定义了一
些扩展方法，把Book对象和Book对象列表转换为JSON字符串，反之亦然。给应用程序服
务传递一个字符串是很简单的。扩展方法利用了NuGet包Newtonsoft.Json中可用的类
JsonConvert （代码文件AppServices / BooksCacheModel（BookExtensions.cs）：
    public static class BookExtensions
    {
      public static string ToJson(this Book book) =>
        JsonConvert.SerializeObject(book);
      public static string ToJson(this IEnumerable books) =>
        JsonConvert.SerializeObject(books);
      public static Book ToBook(this string json) =>
        JsonConvert.DeserializeObject(json);
      public static IEnumerable ToBooks(this string json) =>
        JsonConvert.DeserializeObject>(json);
    }
33.6.2 为应用程序服务连接创建后台任务
现在进入这个示例应用程序的核心：应用程序服务。需要把应用服务实现为Windows
Runtime组件库，通过实现接口IBackgroundTask把它实现为一个后台任务。Windows后台
任务可以在后台运行，不需要用户交互。
有不同种类的后台任务可用。后台任务的启动可以基于定时器的间隔、Windows推送
通知、位置信息、蓝牙设备连接或其他事件。
类BooksCacheTask是一个应用程序服务的后台任务。接口IBackgroundTask定义了需
要实现的Run方法。在实现代码中，定义了请求处理程序，来接收应用程序服务的连接
（代码文件AppServices/ BooksCacheService / BooksCacheTask.cs）：
      public sealed class BooksCacheTask: IBackgroundTask
      {
        private BackgroundTaskDeferral _taskDeferral;
        public void Run(IBackgroundTaskInstance taskInstance)
        {
          _taskDeferral = taskInstance.GetDeferral();
          taskInstance.Canceled += OnTaskCanceled;
          var trigger = taskInstance.TriggerDetails as AppServiceTriggerDetails;
          AppServiceConnection connection = trigger.AppServiceConnection;
          connection.RequestReceived += OnRequestReceived;
        }
        private void OnTaskCanceled(IBackgroundTaskInstance sender,
          BackgroundTaskCancellationReason reason)
        {
          _taskDeferral? .Complete();
        }
        // etc.
在OnRequestReceived处理程序的实现代码中，服务可以读取请求，且需要提供回
应。接收到的请求都包含在AppServiceRequestReceivedEventArgs的Request.Message属性
中。Message属性返回一个ValueSet对象。ValueSet是一个字典，其中包含键及其相应的
值。这里的服务需要一个command键，其值是GET或POST。GET命令返回一个包含所有
书籍的列表，而POST命令要求把额外的键book和一个JSON字符串作为Book对象表示的
值。根据收到的消息，调用GetBooks或AddBook辅助方法。通过调用SendResponseAsync
把从这些消息返回的结果返回给调用者：
    private async void OnRequestReceived(AppServiceConnection sender,
        AppServiceRequestReceivedEventArgs args)
      {
        AppServiceDeferral deferral = args.GetDeferral();
        try
        {
      ValueSet message = args.Request.Message;
      ValueSet result = null;
      switch (message["command"].ToString())
      {
        case "GET":
          result = GetBooks();
          break;
        case "POST":
          result = AddBook(message["book"].ToString());
          break;
        default:
          break;
      }
      await args.Request.SendResponseAsync(result);
        }
        finally
        {
      deferral.Complete();
        }
      }
GetBooks方法使用BooksRepository获得JSON格式的所有书籍，它创建了一个
ValueSet，其键为result：
    private ValueSet GetBooks()
      {
        var result = new ValueSet();
        result.Add("result", BooksRepository.Instance.Books.ToJson());
        return result;
      }
AddBook方法使用存储库添加一本书，并返回一个ValueSet，其中的键是result，值是
ok：
    private ValueSet AddBook(string book)
      {
        BooksRepository.Instance.AddBook(book.ToBook());
        var result = new ValueSet();
        result.Add("result", "ok");
        return result;
      }
33.6.3 注册应用程序服务
现在需要通过操作系统注册应用程序服务。为此，创建一个正常UWP应用程序，它
引用了BooksCacheService。在此应用程序中，必须在package.appxmanifest中（见图33-
8）。在应用程序声明列表中添加一个应用程序服务，并指定名字。需要设置到后台任务
的入口点，包括名称空间和类名。
图33-8
对于客户端应用程序，需要package.appxmanifest定义的应用程序名和包名。为了查看
包名，可以调用Package.Current.Id.FamilyName。为了便于查看这个名字，把它写入属性
PackageFamilyName，该属性绑定到用户界面的一个控件上（代码文件
AppServices/BooksCacheProvider/MainPage.xaml. cs）：
    public sealed partial class MainPage: Page
    {
      public MainPage()
      {
        this.InitializeComponent();
        PackageFamilyName = Package.Current.Id.FamilyName;
      }
      public string PackageFamilyName
      {
        get { return (string)GetValue(PackageFamilyNameProperty); }
        set { SetValue(PackageFamilyNameProperty, value); }
      }
      public static readonly DependencyProperty PackageFamilyNameProperty =
        DependencyProperty.Register("PackageFamilyName", typeof(string),
          typeof(MainPage), new PropertyMetadata(string.Empty));
    }
当运行这个应用程序时，它会注册后台任务，并显示客户端应用程序需要的包名。
33.6.4 调用应用程序服务
在客户端应用程序中，现在可以调用应用程序服务。客户端应用程序
BooksCacheClient的主要部分用视图模型实现。Books属性绑定在UI中，显示从服务返回
的所有书籍。这个集合用GetBooksAsync方法填充。GetBooksAsync使用GET命令创建一
个ValueSet，使用SendMessageAsync辅助方法发送给应用程序服务。这个辅助方法返回一
个JSON字符串，该字符串再转换为一个Book集合，用于填充Books属性的
ObservableCollection 
（代码文件AppServices 
/ 
BooksCacheClient
/ViewModels/BooksViewModel.cs）：
    public class BooksViewModel
    {
      private const string BookServiceName = "com.CNinnovation.BooksCache";
      private const string BooksPackageName =
        "CNinnovation.Samples.BookCache_p2wxv0ry6mv8g";
      public ObservableCollection Books { get; } =
        new ObservableCollection();
      public async void GetBooksAsync()
      {
        var message = new ValueSet();
        message.Add("command", "GET");
        string json = await SendMessageAsync(message);
        IEnumerable books = json.ToBooks();
        foreach (var book in books)
        {
          Books.Add(book);
        }