# 堆利用之fastbin攻击
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
通过一道babyheap例题讲解fastbin attack，同时会涉及到一个泄露libc地址的方法，绕过GOT写保护劫持PC的方法，一个绕过Fastbin
大小检测的方法，还有对glibc相关源码的一些讲解。
## 涉及到的glibc的知识
要把这道题做出来，需要对下面的基础知识有所了解。
###  源码中MIN_CHUNK_SIZE大小是多少
MIN_CHUNK_SIZE指的是一个CHUNK最小为多大
    #define MIN_CHUNK_SIZE        (offsetof(struct malloc_chunk, fd_nextsize))
是fd_nextsize在malloc_chunk中的偏移，并不是malloc_chunk这个数据结构的大小
    struct malloc_chunk {
      INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */
      INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */
      struct malloc_chunk* fd;         /* double links -- used only if free. */
      struct malloc_chunk* bk;
      /* Only used for large blocks: pointer to next larger size.  */
      struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
      struct malloc_chunk* bk_nextsize;
    };
因为每个chunk都会有prev_size, size， fd,bk这几个成员，但是只有large
chunk拥有fd_nextsize和bk_nextsize
###  MINSIZE
MINSIZE是指用户能够得到的最小的chunk 大小，与MIN_CHUNK_SIZE区别是它要求是对其的，所以是可能大于MIN_CHUNK_SIZE的  
但是对于32位和64位的x86类型来说，MINSIZE与MIN_CHUNK_SIZE大小是一样的。32位MINSIZE=MIN_CHUNK_SIZE=16bytes,64位为32bytes。
###  chunk与用户使用的mem之间的转换
    #define chunk2mem(p)   ((void*)((char*)(p) + 2*SIZE_SZ))
    #define mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))
###  MALLOC_ALIGN_MASK
    #define MALLOC_ALIGN_MASK      (MALLOC_ALIGNMENT - 1)
###  MALLOC_ALIGN_MASK
    #  define MALLOC_ALIGNMENT       (2 *SIZE_SZ fd;
          if (__glibc_unlikely (fwd->bk != bck))
        {
          errstr = "free(): corrupted unsorted chunks";
          goto errout;
        }
          p->fd = fwd;
          p->bk = bck;
          if (!in_smallbin_range(size))
        {
          p->fd_nextsize = NULL;
          p->bk_nextsize = NULL;
        }
          bck->fd = p;
          fwd->bk = p;
          set_head(p, size | PREV_INUSE);
          set_foot(p, size);
          check_free_chunk(av, p);
        }
当free一个合适大小的chunk的时候，会往unsorted bin中插入这个chunk,
插入一个chunk的时候需要对四个指针进行写，分别是该chunk的fd和bk指针，以及前后相邻的两个chunk的一个bk和一个fd指针。
###  malloc一个在unsorted bin上的chunk
如果unsorted bin有比申请大的chunk，就会直接把它分割，让剩下的chunk加入到unsorted bin 链表中。  
具体操作如下
            remainder = chunk_at_offset (victim, nb);
            /* We cannot assume the unsorted list is empty and therefore
                have to perform a complete insert here.  */
            bck = unsorted_chunks (av);
            fwd = bck->fd;
    if (__glibc_unlikely (fwd->bk != bck))
            {
                errstr = "malloc(): corrupted unsorted chunks 2";
                goto errout;
            }
            remainder->bk = bck;
            remainder->fd = fwd;
            bck->fd = remainder;
            fwd->bk = remainder;
            /* advertise as last remainder */
            if (in_smallbin_range (nb))
            av->last_remainder = remainder;
            if (!in_smallbin_range (remainder_size))
            {
                remainder->fd_nextsize = NULL;
                remainder->bk_nextsize = NULL;
            }
            set_head (victim, nb | PREV_INUSE |
                    (av != &main_arena ? NON_MAIN_ARENA : 0));
            set_head (remainder, remainder_size | PREV_INUSE);
            set_foot (remainder, remainder_size);
        }
        check_malloced_chunk (av, victim, nb);
        void *p = chunk2mem (victim);
        alloc_perturb (p, bytes);
        return p;
###  初始化bins
     for (i = 1; i fd = bin->bk = bin;
        }
## 0ctf babyheap
题目文件下载地址[babyheap](https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/fastbin-attack/2017_0ctf_babyheap)
目标是泄露libc的地址，借助的是泄露unsorted bin所在的地址进而推导出其他地址。  
因为unsroted bin所在的数据结构是在libc的读写区分配的，因此是可以借助它进行地址泄露的。
泄露unsorted bin地址的方法是把unsorted bin的头部chunk的bk指针给泄露出来。  