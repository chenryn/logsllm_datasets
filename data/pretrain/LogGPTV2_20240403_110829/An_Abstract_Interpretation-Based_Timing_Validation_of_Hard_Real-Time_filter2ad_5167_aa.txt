title:An Abstract Interpretation-Based Timing Validation of Hard Real-Time
Avionics Software
author:Stephan Thesing and
Jean Souyris and
Reinhold Heckmann and
Famantanantsoa Randimbivololona and
Marc Langenbach and
Reinhard Wilhelm and
Christian Ferdinand
An Abstract Interpretation-Based Timing Validation of Hard Real-Time
Avionics Software∗
Stephan Thesing
Universit¨at des Saarlandes
FR Informatik
Postfach 15 11 50
Jean Souyris
Airbus France
316, route de Bayonne
Saint-Martin-du-Touch
D-66041 Saarbr¨ucken, Germany
F-31063 Toulouse cedex 03, France
PI:EMAIL
PI:EMAIL
Reinhold Heckmann
AbsInt GmbH
Stuhlsatzenhausweg 69
Famantanantsoa Randimbivololona
Airbus France
316, route de Bayonne, Saint-Martin-du-Touch
D-66123 Saarbr¨ucken, Germany
PI:EMAIL
F-31063 Toulouse cedex 03, France
PI:EMAIL
Marc Langenbach
Universit¨at des Saarlandes, FR Informatik
Postfach 15 11 50, D-66041 Saarbr¨ucken, Germany
PI:EMAIL
Reinhard Wilhelm
Universit¨at des Saarlandes
FR Informatik
Christian Ferdinand
AbsInt GmbH
Stuhlsatzenhausweg 69
Postfach 15 11 50, D-66041 Saarbr¨ucken, Germany
D-66123 Saarbr¨ucken, Germany
PI:EMAIL
PI:EMAIL
Abstract
Hard real-time avionics systems like ﬂight control soft-
ware are expected to always react in time. Consequently, it
is essential for the timing validation of the software that the
worst-case execution time (WCET) of all tasks on a given
hardware conﬁguration be known. Modern processor com-
ponents like caches, pipelines, and branch prediction com-
plicate the determination of the WCET considerably since
the execution time of a single instruction may depend on
the execution history. The safe, yet overly pessimistic as-
sumption of no cache hits, no overlapping executions in the
processor pipeline, and constantly mispredicted branches
results in a serious overestimation of the WCET. Our ap-
proach to WCET prediction was implemented for the Mo-
torola ColdFire 5307.
It includes a static prediction of
∗
This work was partly supported by the RTD project IST-1999-20527
“DAEDALUS” of the European FP5 program.
cache and pipeline behavior, producing much tighter up-
per bounds for the execution times. The WCET analysis
tool works on real applications. It is safe in the sense that
the computed WCET is always an upper bound of the real
WCET. It requires much less effort, while producing more
precise results than conventional measurement-based meth-
ods.
1. Introduction
Airbus’ ﬂight control software consists of tasks with
speciﬁed deadlines. It is the duty of the developer to guar-
antee that the tasks making up the system will always meet
these speciﬁed deadlines. For this, the worst-case execu-
tion times (WCET) of the tasks must be determined. Since
the exact WCET is hard to obtain, an upper bound for the
WCET must be known (from now, we follow common ter-
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:28:15 UTC from IEEE Xplore.  Restrictions apply. 
minology in taking WCET to mean upper bound to WCET).
It is crucial for the safety of the system that any computed
WCET is safe, i. e., no execution of the task takes longer.
But, the WCET should also be tight, i. e., a possible over-
estimation should be as low as possible to increase the uti-
lization of the processor and thus the performance of the
system.
The presence of optimizations in compilers makes it very
difﬁcult to argue about the timing behavior of high-level
source programs or speciﬁcations. In addition, validation
requirements imposed by the certiﬁcation authorities, e. g.,
DO 178B for air trafﬁc software, require that validation be
performed on the code that actually runs in the real-time
system, i. e., on the machine code itself. It is for these two
reasons that timing validation must be performed on the ob-
ject code of the program.
There is a tremendous gap between the cycle times
of modern microprocessors and the access times of main
memory. Caches are used to overcome this gap in virtu-
ally all performance-oriented processors (including high-
performance microcontrollers and DSPs). Pipelines enable
acceleration by overlapping the executions of different in-
structions. The consequence is that the execution behavior
of the instructions cannot be analyzed separately since this
depends on the execution history.
Cache memories and pipelines usually work very well,
but under some circumstances minimal changes in the pro-
gram code or program input may lead to dramatic changes
in the execution time. For (hard) real-time systems like
a ﬂight control computer, this is undesirable and possibly
even hazardous. The widely used classical methods of pre-
dicting execution times are not generally applicable. Soft-
ware monitoring or the dual loop benchmark change the
code, which in turn impacts the cache behavior. Hardware
simulation, emulation, or direct measurement with logic an-
alyzers can only determine the execution times for some in-
puts and cannot be used to infer the execution times for all
possible inputs in general.
Consequently, Airbus uses its own method for its most
time-critical avionics software. This method is based on
strict design and coding rules, the most deterministic us-
age of the internal speed-up mechanisms of the micropro-
cessor, and measurements of pieces of code whose limited
size makes it possible to obtain a WCET for all their pos-
sible inputs. This method allows Airbus to compute a safe
WCET for the whole program by combining the WCETs of
the small pieces. An appropriate combination formula ex-
ists thanks to the design and coding rules. However, this
method poses the following drawbacks: it limits the effec-
tive power of the CPU, requires some effort for the mea-
surements and related intellectual analysis, and cannot be
performed too early during software development because
the hardware has to be available for measurement. To be
sure, complex extensive veriﬁcation and justiﬁcation of the
measurement process is required in order to ensure that an
upper bound of the WCET is really being observed.
that
Starting from Airbus’ assessment
its current
measurement-based method might not scale up to future
projects, a new approach based on static program analy-
sis has been investigated and evaluated in the DAEDALUS
project. In static program analysis or—to be more exact—
within the framework of abstract interpretation [1, 12], ab-
stract versions of the program semantics are deﬁned in order
to obtain a safe approximation of the real behavior of the
program so that results are produced that are valid for all
executions. These abstract versions should be designed so
that they can be computed efﬁciently without giving up too
much precision. In addition, since this process does not re-
quire the real hardware to execute the code on, the analysis
can also be performed in an early stage of the development
of a new system. Our implementation additionally provides
detailed information on the pipeline and cache states at arbi-
trary program points. This information can be used in code
optimization.
In the following sections, our static analysis method is
presented as applied to a system based on the Motorola
ColdFire 5307. Then a more detailed description of the tool
implementing the WCET analysis is given along with some
results from its evaluation on real-life benchmarks by Air-
bus France. This paper is concluded by a summary of our
results, a comparison with other research in this area, and a
presentation of future work.
2. WCET Computation
In our approach [4] the determination of the WCET of a
program task is composed of several phases (see Figure 1):
First, the control ﬂow has to be reconstructed from the given
object code. Then a value analysis computes address ranges
for instructions accessing memory. This information is used
in cache analysis, which classiﬁes memory references as
cache misses or hits [3]. To increase precision, this is per-
formed as part of the pipeline analysis, which predicts the
behavior of the program on the processor pipeline [7] and
computes execution times for all basic blocks. Then path
analysis determines a worst-case execution path of the pro-
gram from this timing information [18].
The separation of WCET determination into several
phases has the additional beneﬁt that different methods tai-
lored to the subtasks can be used. In our case, value analysis
and cache/pipeline analysis are done by abstract interpreta-
tion [1], a semantics-based method for static program anal-
ysis. Path analysis is done by integer linear programming.
In order to obtain as much precision as possible, the
value and cache/pipeline analyses are implemented as
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:28:15 UTC from IEEE Xplore.  Restrictions apply. 
Executable
Program
CFG Builder
Loop Transformation
IR
(CRL File)
Annotations
(AIP File)
Results
(PER File)
ILP Generator
LP Solver
Evaluation
Path Analysis
Value Analysis
Cache/Pipeline
Analysis
Static Analysis
Figure 1. Structure of the WCET tool
whole program analyses, i. e., they assume a linked exe-
cutable to be available.
2.1. Reconstruction of the Control Flow from Bi-
nary Programs
The starting point of our analysis framework (see Fig-
ure 1) is a binary program and additional user-provided in-
formation about numbers of loop iterations, upper bounds
for recursion, etc.
In the ﬁrst step a parser reads the executable and recon-
structs the control ﬂow [15, 16]. This requires some know-
ledge about the underlying hardware, e. g., which instruc-
tions represent branches or calls. The reconstructed con-
trol ﬂow is annotated with the information needed by subse-
quent analyses and then translated into CRL (Control Flow
Representation Language—a human-readable intermediate
format designed to simplify analysis and optimization at
the executable/assembly level). This annotated control-ﬂow
graph serves as the input for microarchitecture analysis.
2.2. Value Analysis
Value analysis determines ranges for values in registers,
thus resolving indirect accesses to memory. The results of
the analysis are so good that only a few indirect accesses
cannot be determined exactly.
2.3. Cache Analysis
Cache analysis classiﬁes the accesses to main memory.
The analysis in our tool is based upon [3], however it had to
be modiﬁed to reﬂect the pseudo-round-robin replacement
IAG
IC1
IC2
IED
Instruction
Address
Generation
Instruction
Fetch Cycle 1
Instruction
Fetch Cycle 2
Instruction
Early Decode
IB
FIFO
Instruction Buffer
Instruction
Fetch
Pipeline
(IFP)
Operand
Execution
Pipeline
(OEP)
DSOC
Decode & Select,
Operand Fetch
AGEX
Address
Generation,
Execute
Address [31:0]
Data[31:0]
Figure 2. The MCF 5307 pipeline
policy of the ColdFire 5307 cache. The modiﬁed algorithm
distinguishes between sure cache hits and unclassiﬁed ac-
cesses.
2.4. Pipeline Analysis (for MCF 5307)
Pipeline analysis models the pipeline behavior to deter-