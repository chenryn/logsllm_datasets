title:Custos: Practical Tamper-Evident Auditing of Operating Systems Using
Trusted Execution
author:Riccardo Paccagnella and
Pubali Datta and
Wajih Ul Hassan and
Adam Bates and
Christopher W. Fletcher and
Andrew Miller and
Dave Tian
CUSTOS: Practical Tamper-Evident Auditing of
Operating Systems Using Trusted Execution
Riccardo Paccagnella∗, Pubali Datta∗, Wajih Ul Hassan∗,
Adam Bates∗, Christopher W. Fletcher∗, Andrew Miller∗, Dave Tian†
†Purdue University: PI:EMAIL
∗University of Illinois at Urbana-Champaign:
{rp8, pdatta2, whassan3, batesa, cwﬂetch, soc1024}@illinois.edu
Abstract—System auditing is a central concern when inves-
tigating and responding to security incidents. Unfortunately,
attackers regularly engage in anti-forensic activities after a break-
in, covering their tracks from the system logs in order to frustrate
the efforts of investigators. While a variety of tamper-evident
logging solutions have appeared throughout the industry and
the literature, these techniques do not meet the operational and
scalability requirements of system-layer audit frameworks.
In this work, we introduce CUSTOS, a practical framework
for the detection of tampering in system logs. CUSTOS consists
of a tamper-evident logging layer and a decentralized auditing
protocol. The former enables the veriﬁcation of log integrity with
minimal changes to the underlying logging framework, while the
latter enables near real-time detection of log integrity violations
within an enterprise-class network. CUSTOS is made practical by
the observation that we can decouple the costs of cryptographic
log commitments from the act of creating and storing log events,
without trading off security, leveraging features of off-the-shelf
trusted execution environments. Supporting over one million
events per second, we show that CUSTOS’ tamper-evident logging
protocol is three orders of magnitude (1000×) faster than prior
solutions and incurs only between 2% and 7% runtime overhead
over insecure logging on intensive workloads. Further, we show
that CUSTOS’ auditing protocol can detect violations in near real-
time even in the presence of a powerful distributed adversary
and with minimal (3%) network overhead. Our case study on a
real-world APT attack scenario demonstrates that CUSTOS forces
anti-forensic attackers into a “lose-lose” situation, where they can
either be covert and not tamper with logs (which can be used
for forensics), or erase logs but then be detected by CUSTOS.
I.
INTRODUCTION
Auditing is an essential component of building and main-
taining secure systems. When suspicious events occur, system
logs are frequently turned to as the deﬁnitive ground truth of
the system’s activities. Such logs have been leveraged to ad-
dress a variety of security challenges, from post-mortem attack
reconstruction [7], [65], [68], [76], [99] to runtime tasks such
as access control [4], [6], [88], [95], execution integrity [107],
[118], and intrusion detection [23], [43], [62], [64], [83]. The
integrity of logs is thus a vital consideration in system security.
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24065
www.ndss-symposium.org
Unfortunately, intruders also understand the value of sys-
tem logs. Because such logs describe an attacker’s method
of entry, mission objectives, and further propagation within
a system, attackers regularly engage in anti-forensic counter-
measures to erase or conceal this vital forensic evidence [121],
[90], [56], [9]. Penetration testing tools such as Last Door [37]
and Metasploit [104] go so far as to automate this process, al-
lowing an intruder to escalate privilege and wipe the associated
logs with a single command. Perhaps worse than log removal,
attackers may also edit existing events or insert new ones to
confuse investigators [38], [21]. Concerningly, recent reports
suggest that 72% of incident response specialists have encoun-
tered tampered logs in the course of an investigation [16], [17].
In light of this reality, it is perhaps surprising that commod-
ity operating systems offer no special protections for their log-
ging frameworks. Case in point, root access is often sufﬁcient
for the covert manipulation of any and all forensic evidence.
While fully preventing this tampering might be impossible,
detecting it should be of prime importance. Existing commer-
cial solutions to this tamper-evident logging problem involve
specialized Write-Once-Read-Many (WORM) storage devices
[47], [85] or fully-trusted remote storage servers [58], [94].
Concurrent to commercial efforts, a variety of cryptographic
solutions have been presented in the literature, spanning sym-
metric cryptography [10], [108], [44], digital signatures [73],
[127], [41], and tamper-evident data structures [20], [101].
However, while these approaches show promise for con-
strained logging scenarios (e.g., securing a single application’s
log), they present limitations that make them ill-suited to the
demands of system logging. Existing commercial solutions,
while considered good practice in the industry [32], rely
on either costly and exotic hardware devices or continuous,
timely communication with remote trusted servers. Proposed
cryptographic techniques incur excessive computational and
storage overheads and do not account for practical
issues
such as continuity across power cycles or compatibility with
upstream log analysis applications (e.g., [115]). Critically,
all prior solutions suffer from issues of throughput, meaning
that
they are too slow to be used in practice on modern
operating systems, which can generate hundreds of thousands
of system calls per second [24]. For these reasons, we argue
that prior solutions do not meet the practical requirements of
operating systems. For tamper-evident logging to be viable
within operating systems, it must be scalable, efﬁcient, and
minimally invasive to the existing audit frameworks.
In this work, we revisit the goal of tamper-evident logging
within the context of standard operating system abstractions.
We introduce CUSTOS,1 a practical solution for the detection of
tampering in system logs. CUSTOS scales to high volume log-
ging scenarios, avoids invasive modiﬁcations to commodity au-
dit frameworks, and is provably secure under a strong attacker
model. CUSTOS is made up of the following components:
1) Tamper-Evident Logger: To enable the veriﬁcation of
log integrity, we present a minimally invasive tamper-
evident logging layer for commodity audit frameworks.
Our protocol satisﬁes the above requirements by decoupling
cryptographic event commitment from logging—leveraging
features of off-the-shelf Trusted Execution Environments
(TEEs). Upon creation, log events are hashed inside the en-
clave, and the enclave asynchronously signs these hashes in
response to periodic audits. We show that, without trading
off security, this technique allows CUSTOS to secure up to
1,086,956 events per second, as compared to at most 1,266
events per second on the same hardware in prior work [57].
As such, CUSTOS’ tamper-evident logging protocol is three
orders of magnitude (i.e., 1000×) faster than prior TEE-
based work. Furthermore, our logger supports third-party
veriﬁability of log integrity, and, unlike prior work [57],
[89], does not break compatibility with log analysis appli-
cations by avoiding reliance on log encryption.
2) Real-time Decentralized Auditing: Differently from many
prior solutions (e.g., [73], [57], [41], [128], [44]), we also
focus on how to discover log tampering through auditing.
Intuitively, the more frequently logs are audited, the earlier
anti-forensic attackers will be detected after intrusion: thus,
there is a clear motivation for auditing to be a frequent
operation. To this end, we introduce a decentralized au-
diting scheme that enables near real-time detection of log
integrity violations. Our scheme employs a three-way net-
work protocol between CUSTOS-enabled hosts and detects
log tampering with very high probability even in the pres-
ence of distributed adversaries. Decentralized audits further
enable CUSTOS to provide assurance of log availability
for historic, integrity-veriﬁed log data. Most importantly,
decentralized audits force anti-forensic attackers into a
“lose-lose” situation, where they can either be covert and
not tamper with logs (which can be used for forensics), or
they can erase logs but then be detected by CUSTOS.
In summary, this paper makes the following contributions:
• We design CUSTOS, a comprehensive and practical solu-
tion for the detection of tampering in system logs, made
up of a tamper-evident logging layer and a decentralized
auditing protocol. CUSTOS minimizes the cost of securely
logging an event down to a single hash update by decou-
pling cryptographic event commitment from logging—
leveraging features of off-the-shelf TEEs. We include
security analyses of our protocols to demonstrate their
correctness in the presence of anti-forensic adversaries.
• To enable further experimentation and proliferation of
tamper-evident
logging mechanisms, we implement a
prototype version of CUSTOS for the Linux Audit system
1Custos is the Latin word for guard. It was used by the Roman poet Juvenal
in the phrase “Quis custodiet ipsos custodes?” (Satire VI, lines 347–348),
translated as “Who watches the watchers?”.
that uses Intel SGX as a TEE. Our prototype is available
as open source at https://bitbucket.org/sts-lab/custos/.
• We rigorously evaluate the performance and effectiveness
of our system in a network of 100 hosts. Our results
demonstrate that CUSTOS can secure log events 1000×
faster than prior work and imposes only 2% to 7% runtime
and 3% network overheads over insecure logging. Our
case study shows that CUSTOS enables the detection of
log tampering in real-world APT attack scenarios.
II. BACKGROUND
1) System Logs: This paper concerns itself with detecting
tampering with system logs. System logs, sometimes referred
to as audit logs, are a set of records that provide documentary
evidence of the sequence of activities that have affected an
operating system (OS). These records contain information that
serves to establish what type of event occurred, when and
where it occurred, its source and outcome and the subjects
associated with it [85]. System logs differ from application
logs because they are not generated by the application code
at
the developer’s will, but by the OS regardless of the
application’s code. As such,
they are able to capture the
most primitive system-level events (i.e., system calls), which
include records of security-relevant events such as execution
of malicious binaries and failed login attempts. Moreover, the
volume of system logs is generally very large compared to
application logs, since modern OSs can generate hundreds of
thousands of system calls per second [24]. Because of their
forensic value, system logs are critical for postmortem analyses
after a break-in. As a consequence, recording system logs is a
legal requirement for a number of security-related certiﬁcations
(e.g., [105], [51]): in Linux, the Audit Subsystem (LAuS) [117]
was introduced in version 2.6 to achieve certiﬁcation under the
Controlled Access Protection Proﬁle (CAPP) common criteria
[86]. System auditing will continue to grow in importance with
the enactment of the European Union’s GDPR [25].
2) Intel SGX: Intel Software Guard Extensions (SGX) are
a set of extensions to the x86 instruction set architecture that
allows for the creation of isolated execution environments
called enclaves. Once an enclave has been initialized,
the
processor ensures that any system component outside the
enclave, including the privileged software, cannot access the
enclave’s protected memory where its code and data reside.
Untrusted applications can, however, switch into enclave mode
at pre-deﬁned entry points and execute protected instructions
inside the trusted enclave. For an untrusted application to start
executing trusted code inside the enclave, it needs to invoke an
EENTER instruction, which performs a sequence of steps (e.g.,
load secure register context) before transitioning to enclave
mode. Intel provides wrapper code, called ecalls, to prepare
the environment for an EENTER instruction [49]. Current SGX
hardware provides 128 MB of protected enclave memory per
host. However, SGX also offers a sealing feature, which allows
an enclave to persist and retrieve data on the host’s unprotected
memory, even after the enclave is destroyed and restarted.
Sealed data is conﬁdentiality and integrity-protected, but seal-
ing does not provide freshness guarantees and is vulnerable
to rollback attacks. To address rollback attacks, SGX supports
monotonic counters that use non-volatile memory to maintain
state across different sessions. However, usage of monotonic
counters is limited by both their quota (256 per enclave) and
2
their update rate (excessive use can cause memory to wear out).
Note that, while our implementation utilizes Intel SGX, our
design is applicable to any enclave-like interface [116], which
can alternatively be provided by other TEEs such as ARM
Trustzone and Keystone (see [14], [26], [19], [60]). However,
as we will demonstrate, our performance requirements rule out
off-chip solutions such as the Trusted Platform Module (TPM),
which is notoriously slow [80], [102].
III. THREAT MODEL AND GOALS
1) Threat Model: This work envisions a large organiza-
tional environment, comprised of upwards of thousands of ma-
chines, that is the target of a sophisticated and well-funded ad-
versary. The adversary’s attack pattern follows the APT lifecy-
cle model [83]: after an initial compromise grants unprivileged
access to a host, the attacker establishes persistence and then
escalates privilege in order to achieve full system compromise,
at which point they have full control of the operating system,
and can engage in anti-forensic measures (e.g., log tampering
[104], [37], [90], [121], [77]) in order to hide their presence.
We assume that each host in the network is equipped with a
TEE such as Intel SGX that can conﬁdentially store crypto-
graphic keys. We also assume that the implementations of the
cryptographic functions used inside the TEE are side-channel
free, meaning that they do not exhibit secret-dependent mem-
ory accesses that can leak the signing key.2 We make the usual
assumption that it is not feasible for an adversary to forge digi-
tal signatures or ﬁnd collisions in cryptographic hash functions.
Finally, we assume that the organization employs a system ad-
ministrator or cyber analyst that maintains a key management
service (KMS) and can receive and respond to security alerts.
2) Design Goals: With the adversary model and the as-
sumptions described above in mind, we set out to design a
system that satisﬁes the following properties:
G1 Tamper-Evident Logs. The auditing system must record
log entries with provable integrity such that forgeries,
omissions, and other forms of tampering can be detected.
That is, after achieving full system compromise, an ad-
versary should not be able to undetectably manipulate log
messages recorded pre-compromise. This goal is consistent
with prior work (cf. Section XIII).
G2 Third-Party Veriﬁability. Log veriﬁability should not de-
pend on a single machine or fully trusted veriﬁer. In foren-
sic investigations, third parties (e.g. Court agents [52],
[53], [33]) should be able to verify the correctness and
authenticity of a given set of logs without being granted
other privileges in the system (e.g., access to secret keys).
G3 Fine-Grained Audits. The system must support veri-